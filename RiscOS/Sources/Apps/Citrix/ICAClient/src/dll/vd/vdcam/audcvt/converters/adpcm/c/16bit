// File: 16bit.c
//===========================================================================
//
// Author: Bill Smith
// Date:   1/29/98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc: 16 pcm conversion funcs
//
//============================================================================

/****
*
* $Author$
* $Log$
*
*     Rev 1.1   Apr 13 1998 20:00:06   sumitd
*  Removed the warning messages
*
*     Rev 1.0   Mar 30 1998 14:32:46   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#include "adpcm.h"


// Extern Data:
//=============


// Global Data:
//=============
WORD prevSample16L, prevSample16R;


// Function Prototypes:
//=====================


// Code:
//======

// Function: int ADPCMtoPCM16MONO(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int ADPCMtoPCM16MONO(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
	const char funcName[] = "APDCMtoPCM16MONO";

	WORD *output_P = (WORD *) dest_P;
	adpcmBlkHdr_S *blkHdr_P;
	const BYTE *input_P = (const BYTE *) src_P;
	UCHAR blockAlignment = 128;
	USHORT bytesWritten = 0;
	UINT x, y;

	LogFunctionName(funcName);

	*destSize_P = 0;


	// for each block
	for (x = 0; x < (UINT) (srcSize / blockAlignment); x++) {

		// set our header
		blkHdr_P = (adpcmBlkHdr_S *) input_P;

		// move the input
		input_P = (BYTE *) blkHdr_P + sizeof(adpcmBlkHdr_S);

		// do the first write
		stepIndexL = blkHdr_P->stepTableIndex;
		prevSample16L = (int)(short)blkHdr_P->sample0;
		*(output_P++) = (BYTE)((prevSample16L >> 8) + 128);
		bytesWritten++;

		// now loop thru the block
		for (y = 0; y < blockAlignment - sizeof(adpcmBlkHdr_S); y++) {
			LONG sample = (LONG) *input_P++;
			LONG encSample;
			LONG stepSize;
			int z;

	        if (!ValidStepIndex(stepIndexL)) {
		        //
			    //  The step index is out of range - this is considered a fatal
				//  error as the input stream is corrupted.  We fail by returning
	            //  zero bytes converted.
		        //

//#pragma TODO(debug printf)
	//            DPF(1,"ctxadpcmDecode_M08: invalid step index.");
		        return 0;
			}

			// there are 4 samples per byte
			for (z = 0; z < 4; z++) {

				// get the encoded sample
	            encSample  = (sample & (BYTE)0x03);

				// get the step size
		        stepSize   = step[stepIndexL];

				// decode the sample
			    prevSample16L = (USHORT) SampleDecode(encSample, prevSample16L, stepSize);

				// next step index
				stepIndexL  = (USHORT) NextStepIndex(encSample, stepIndexL);

				// write the sample
	            *(output_P++) = (WORD)((prevSample16L >> 8) + 128);

				// number of bytes written
				bytesWritten += 2;

				// shift the sample over
				sample >>= 2;
			}
        }
    }

	// and assign the number of bytes in the buffer
	*destSize_P = bytesWritten;

	LogRtnVal(funcName, rtnVal);

	return rtnVal;
}
// end - int ADPCMtoPCM16MONO(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)


// Function: int ADPCMtoPCM16STER(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int ADPCMtoPCM16STER(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
	const char funcName[] = "APDCMtoPCM16STER";

	WORD *output_P = (WORD *) dest_P;
	adpcmBlkHdr_S *blkHdrL_P;
	adpcmBlkHdr_S *blkHdrR_P;
	const BYTE *input_P = (const BYTE *) src_P;
	UCHAR blockAlignment = 128;
	USHORT bytesWritten = 0;
	UINT x, y;

	LogFunctionName(funcName);

	*destSize_P = 0;



	// for each block
	for (x = 0; x < (UINT) (srcSize / blockAlignment); x++) {

		// set our header
		blkHdrL_P = (adpcmBlkHdr_S *) input_P;
		blkHdrR_P = blkHdrL_P + sizeof(adpcmBlkHdr_S);

		// move the input
		input_P = (BYTE *) blkHdrR_P + sizeof(adpcmBlkHdr_S);

		// do the first write
		stepIndexL = blkHdrL_P->stepTableIndex;
		prevSample16L = (short)blkHdrL_P->sample0;
		*(output_P++) = (BYTE)((prevSample16L >> 8) + 128);

		stepIndexR = blkHdrR_P->stepTableIndex;
		prevSample16R = (short)blkHdrR_P->sample0;
		*(output_P++) = (BYTE)((prevSample16R >> 8) + 128);

		bytesWritten += 2;

		// now loop thru the block
		for (y = 0; y < blockAlignment - sizeof(adpcmBlkHdr_S); y++) {
			LONG sampleL = (LONG) *input_P++;
			LONG sampleR = (LONG) *input_P++;
			LONG encSample;
			LONG stepSize;
			int z;

	        if (!ValidStepIndex(stepIndexL)) {
		        //
			    //  The step index is out of range - this is considered a fatal
				//  error as the input stream is corrupted.  We fail by returning
	            //  zero bytes converted.
		        //

//#pragma TODO(debug printf)
	//            DPF(1,"ctxadpcmDecode_M08: invalid step index.");
		        return 0;
			}


			// there are 4 samples per byte
			for (z = 0; z < 4; z++) {


				// do the left channel

				// get the encoded sample
	            encSample  = (sampleL & (BYTE)0x03);

				// get the step size
		        stepSize   = step[stepIndexL];

				// decode the sample
			    prevSample16L = (USHORT) SampleDecode(encSample, prevSample16L, stepSize);

				// next step index
				stepIndexL  = (USHORT) NextStepIndex(encSample, stepIndexL);

				// write the sample
	            *(output_P++) = (WORD)((prevSample16L >> 8) + 128);


				// do the right channel
				// get the encoded sample
	            encSample  = (sampleR & (BYTE)0x03);

				// get the step size
		        stepSize   = step[stepIndexR];

				// decode the sample
			    prevSample16R = (USHORT) SampleDecode(encSample, prevSample16R, stepSize);

				// next step index
				stepIndexR  = (USHORT) NextStepIndex(encSample, stepIndexR);

				// write the sample
	            *(output_P++) = (WORD)((prevSample16R >> 8) + 128);

				// number of bytes written
				bytesWritten += 4;

				// shift the sample over
				sampleL >>= 2;
				sampleR >>= 2;
			}
        }
    }

	// and assign the number of bytes in the buffer
	*destSize_P = bytesWritten;

	LogRtnVal(funcName, rtnVal);

	return rtnVal;
}
// end - int ADPCMtoPCM16STER(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)

// Function: int PCM16MONOtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int PCM16MONOtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
	const char funcName[] = "PCM16MONOtoADPCM";

    DWORD   srcSamples;
    UINT    blockSamples;

	adpcmBlkHdr_S *adpcmHdr_P = (adpcmBlkHdr_S *) dest_P;

	SHORT	*input_P = (SHORT *) src_P;
	BYTE	*output_P = (BYTE *) adpcmHdr_P + sizeof(adpcmBlkHdr_S);
    short   sample;
	USHORT  samplesPerBlock;
    BYTE    encSample1;

    LogFunctionName(funcName);

    srcSamples = pcmM16BytesToSamples(srcSize);
	samplesPerBlock = 3;
	*destSize_P = 0;

    //
    //
    //
    //
    while (srcSamples)
    {
        blockSamples = (UINT)min(srcSamples, samplesPerBlock);
        srcSamples  -= blockSamples;

        //
        //  block header
        //
        adpcmHdr_P->sample0 = prevSample16L = ((short)*input_P++ - 128) << 8;
		adpcmHdr_P->stepTableIndex = (BYTE)(stepIndexL << 8);
        blockSamples--;
		*destSize_P += sizeof(adpcmBlkHdr_S);


        //
        //  We have written the header for this block--now write the data
        //  chunk (which consists of a bunch of encoded nibbles).  Note
        //  that if we don't have enough data to fill a complete byte, then
        //  we add 0's to the end.
        //
        while (blockSamples)
        {
			BYTE adpcmSample = 0, temp;
			int x, stepSize;

			for (x = 0; x < 4; x++) {

				sample = 0;

				if (blockSamples) {
					sample = ((short)*input_P++ - 128) << 8;
					blockSamples--;

					stepSize    = step[stepIndexL];
					#if defined(WIN32)
					FastEncode(encSample1,prevSample16L ,sample,stepSize);
					#else
					encSample1 = (BYTE)SampleEncode(sample, prevSample16L, stepSize);
					prevSample16L = (WORD)SampleDecode(encSample1, prevSample16L, stepSize);
					#endif
					stepIndexL   = (USHORT) NextStepIndex(encSample1, stepIndexL);
				}
				adpcmSample <<= 2;
				temp = (BYTE) sample;
				adpcmSample |= (temp & 0x03);
			}

            //
            //  Write out encoded byte.
            //
            *output_P++ = adpcmSample;
			*destSize_P++;
        }
    }


	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int PCM16MONOtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)

// Function: int PCM16STERtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int PCM16STERtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
    DWORD   srcSamples;
    UINT    blockSamples;
    SHORT   sample;
    int     stepSize;
    DWORD   dwLeft;
    DWORD   dwRight;
    int     i;

    SHORT   encSampleL;
    SHORT   encSampleR;

	const SHORT *input_P = (const SHORT *) src_P;
	DWORD *output_P;
	adpcmBlkHdr_S *adpcmHdr_P = (adpcmBlkHdr_S *) dest_P;
	USHORT samplesPerBlock = 2;

    const char funcName[] = "PCM8STERtoADPCM";
	LogFunctionName(funcName);
	*destSize_P = 0;


    srcSamples = pcmM16BytesToSamples(srcSize);;

    while (srcSamples) {

        blockSamples = samplesPerBlock;
        srcSamples  -= blockSamples;

        //
        //  LEFT channel block header
        //
		adpcmHdr_P->sample0 = prevSample16L = ((short)*input_P++ - 128) << 8;
		adpcmHdr_P->stepTableIndex =  (BYTE)(stepIndexL << 8);
		adpcmHdr_P++;
		*destSize_P += sizeof(adpcmBlkHdr_S);

        //
        //  RIGHT channel block header
        //
		adpcmHdr_P->sample0 = prevSample16R = ((short)*input_P++ - 128) << 8;
		adpcmHdr_P->stepTableIndex = (BYTE)(stepIndexR << 8);
		adpcmHdr_P++;
		output_P = (DWORD *) adpcmHdr_P;
		*destSize_P += sizeof(adpcmBlkHdr_S);


        blockSamples--;  // One sample is in the header.


        //
        //  We have written the header for this block--now write the data
        //  chunk.  This consists of 8 left samples (one DWORD of output)
        //  followed by 8 right samples (also one DWORD).  Since the input
        //  samples are interleaved, we create the left and right DWORDs
        //  sample by sample, and then write them both out.
        //
        while (blockSamples) {

            blockSamples -= 8;
            dwLeft  = 0;
            dwRight = 0;

            for ( i=0; i<16; i++ )
            {
                //
                //  LEFT channel
                //
                sample     = ((short)*input_P++ - 128) << 8;
                stepSize   = step[stepIndexL];
                #if defined(WIN32)
                FastEncode(encSampleL,prevSample16L,sample,stepSize);
                #else
                encSampleL = (SHORT)SampleEncode(sample, prevSample16L, stepSize);
                prevSample16L = (SHORT)SampleDecode(encSampleL, prevSample16L, stepSize);
                #endif
                stepIndexL = (USHORT) NextStepIndex(encSampleL, stepIndexL);
                dwLeft     |= ((DWORD)encSampleL) << 2*i;

                //
                //  RIGHT channel
                //
                sample     = ((short)*input_P++ - 128) << 8;
                stepSize   = step[stepIndexR];
                #if defined(WIN32)
                FastEncode(encSampleR,prevSample16R,sample,stepSize);
                #else
                encSampleR = (SHORT)SampleEncode(sample, prevSample16R, stepSize);
                prevSample16R = (WORD)SampleDecode(encSampleR, prevSample16R, stepSize);
                #endif
                stepIndexR = (USHORT) NextStepIndex(encSampleR, stepIndexR);
                dwRight    |= ((DWORD)encSampleR) << 2*i;
            }


            //
            //  Write out encoded DWORDs.
            //
            *output_P = dwLeft;
            output_P++;
            *output_P = dwRight;
            output_P++;
			*destSize_P += sizeof(DWORD) * 2;
        }
    }

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int PCM16STERtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P)



// end
