
Thinwire requirements
---------------------

16 colour or 256 colour palettes

16 colour is fixed, windows standard palette
256 colour is fully programmable, initialised to windows standard.

origin is top left, positive is right and downwards.


Paint operations

BITBLT_NOSRC_ROP3_NOCLIP
  Simple plot with brush

BITBLT_NOSRC_ROP3_CMPLXCLIP
  Plot with brush and clipping, maybe simple or complex


Bitmap operations

BITBLT_SCRTOSRC_ROP3
  Copy from screen to screen using  brush and clipping

BITBLT_SOURCE_ROP3_NOCLIP
  Plot bitmap no clipping

BITBLT_SOURCE_ROP3_SIMPLECLIP
  Plot bitmap one clipping rectangle

BITBLT_SOURCE_ROP3_CMPLXCLIP
  Plot bitmap complex clipping list


Stroke operations

TWCMD_STROKEPATH
  Clip:  rectangle or via run path(?)
  Style: with bit mask or bit array

  Curve: Bezier or Ellipse

  28.4 format for points

  ROP2 plot type

TWCMD_STROKEPATHSTRAIGHT
  Straight line plotting with no clipping


Text operations

TWCMD_TEXTOUT_NOCLIP
  Plot text
    opaque or transparent background
    monospaced or proportional glyphs
    character increment on monospaced
    glyph data as bitmaps

TWCMD_TEXTOUT_RCLCLIP
   Plot text with simple clipping

TWCMD_TEXTOUT_CMPLXCLIP
   Plot text with list of clipping rectangles
	
TWCMD_TEXTOUT_RCLEXTRA
   Draw line or box through previously drawn text
      with same clipping


Pointer routines

POINTER_SETSHAPE
  32x32 pointer
  monochrome, 16 or 256 colour
  hot spots
  show and hide pointer


Save bitmap routines

SSB_SAVE_BITMAP
  Save screen area in cache

SSB_RESTORE_BITMAP
  Restore to previous position



/* Binary raster ops */
#define R2_BLACK            1   /*  0       */
#define R2_NOTMERGEPEN      2   /* DPon     */
#define R2_MASKNOTPEN       3   /* DPna     */
#define R2_NOTCOPYPEN       4   /* PN       */
#define R2_MASKPENNOT       5   /* PDna     */
#define R2_NOT              6   /* Dn       */
#define R2_XORPEN           7   /* DPx      */
#define R2_NOTMASKPEN       8   /* DPan     */
#define R2_MASKPEN          9   /* DPa      */
#define R2_NOTXORPEN        10  /* DPxn     */
#define R2_NOP              11  /* D        */
#define R2_MERGENOTPEN      12  /* DPno     */
#define R2_COPYPEN          13  /* P        */
#define R2_MERGEPENNOT      14  /* PDno     */
#define R2_MERGEPEN         15  /* DPo      */
#define R2_WHITE            16  /*  1       */

static struct {
    ULONG ulColorAnd; (and col)
    ULONG ulColorXor; (xor col)
    ULONG ulVgaMode; (plot op)
} arop[] = {
    {0x00, 0xff, DR_SET},          //  1   R2_WHITE
    {0x00, 0x00, DR_SET},          //  0   R2_BLACK
    {0xff, 0xff, DR_AND|DR_2PASS}, // DPon R2_NOTMERGEPEN   Dest invert + DPna
    {0xff, 0xff, DR_AND},          // DPna R2_MASKNOTPEN
    {0xff, 0xff, DR_SET},          // PN   R2_NOTCOPYPEN
    {0xff, 0x00, DR_AND|DR_2PASS}, // PDna R2_MASKPENNOT    Dest invert + DPa
    {0x00, 0xff, DR_XOR},          // Dn   R2_NOT           Invert dest without pen
    {0xff, 0x00, DR_XOR},          // DPx  R2_XORPEN
    {0xff, 0xff, DR_OR|DR_2PASS},  // DPan R2_NOTMASKPEN    Dest invert + DPno
    {0xff, 0x00, DR_AND},          // DPa  R2_MASKPEN
    {0xff, 0xff, DR_XOR},          // DPxn R2_NOTXORPEN     DPxn == DPnx
    {0x00, 0x00, DR_OR},           // D    R2_NOP           Silliness!
    {0xff, 0xff, DR_OR},           // DPno R2_MERGENOTPEN
    {0xff, 0x00, DR_SET},          // P    R2_COPYPEN
    {0xff, 0x00, DR_OR|DR_2PASS},  // PDno R2_MERGEPENNOT   Dest invert + DPo
    {0xff, 0x00, DR_OR},           // DPo  R2_MERGEPEN
};

  plot col = (pen col & 'and col') ^ 'xor col'
  dest col = plot col 'plot op' src col



/* Ternary raster operations */
#define SRCCOPY             (DWORD)0x00CC0020 /* dest = source                   */
	overwrite (0)
#define SRCPAINT            (DWORD)0x00EE0086 /* dest = source OR dest           */
	or (1)
#define SRCAND              (DWORD)0x008800C6 /* dest = source AND dest          */
	and (2)
#define SRCINVERT           (DWORD)0x00660046 /* dest = source XOR dest          */
	xor (3)
#define SRCERASE            (DWORD)0x00440328 /* dest = source AND (NOT dest )   */
#define NOTSRCCOPY          (DWORD)0x00330008 /* dest = (NOT source)             */
#define NOTSRCERASE         (DWORD)0x001100A6 /* dest = (NOT src) AND (NOT dest) */
#define MERGECOPY           (DWORD)0x00C000CA /* dest = (source AND pattern)     */
#define MERGEPAINT          (DWORD)0x00BB0226 /* dest = (NOT source) OR dest     */
	screen or not sprite(7)
#define PATCOPY             (DWORD)0x00F00021 /* dest = pattern                  */
#define PATPAINT            (DWORD)0x00FB0A09 /* dest = DPSnoo                   */
#define PATINVERT           (DWORD)0x005A0049 /* dest = pattern XOR dest         */
#define DSTINVERT           (DWORD)0x00550009 /* dest = (NOT dest)               */
	invert (4)
#define BLACKNESS           (DWORD)0x00000042 /* dest = BLACK                    */
	simple
#define WHITENESS           (DWORD)0x00FF0062 /* dest = WHITE                    */
	simple


BRUSH
	8x8 pixels
	1, 2, 16, 256 color
	rotate 0-7 pixels in x or y direction before plotting


BITMAP
	can be rle encoded and/or pixel packed



GCAPS
   Supplied client sets GCAPS_COMPLEX_CURVES always.
	GCAPS_RES_VARIABLE, GCAPS_SSB_1BYTE_PP, GCAPS_BMPS_PRECACHED
	depending on setup.
   Could we turn off complex curves? What would it do?



DIB format
----------

scanlines are sent from top to bottom.
pixels are in order high nybble - low nybble for 4bpp.
There can be 1 nybble packing in first column if necessary.
scanlines are aligned to byte boundaries.

It is assumed that data in 16 color mode is stored in separate color
planes. It doesn't need to be but space is calculated on this basis.

It is assumed that bitmaps are cached in DDB format.

