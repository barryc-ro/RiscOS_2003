ICA module

    Transport driver
	TCPIP
		There are several to choose from. We should write our
		own using the structure of one of those available.

	Async
		Possibly useful for direct serial links?

	NetBEUI
		Could interface to LanManFS if necessary


	This has to be in a module to be able to use Internet events
	and timers to handle data flow most efficiently.

    Protocol drivers
	Crypt1
		Optional - Code given just XORs data with a seed that
		is sent at the start of the communication. Secure!

	Reliable framing
		Only needed if we want compression or encryption
	
	Modem
		Possibly useful

	Compression
	Crypt2	
		No source provided

	Framing
	Reliable
		Not needed for TCPIP


	At this point the data is sent out a byte at a time through
	ProcessInput and could be buffered until the next poll for
	processing.

	Or, we could process some and buffer the rest.


    WinStation driver
	TTY
		Handles the base set of ICA packet commands
	ICA2
	ICA3
		More complex protocol with Virtual channel support


	If this is in the module as well. Then we need to process everything 
	except the VD's marked as application.

    Virtual channels

	Virtual channels are implemented by other modules registered using SWIs
	and service calls (and direct function calls?). 

	Or by application code using a polling mechanism? There are
	callbacks into VDs from the WD so it may not be practical to
	have a VD in an application. Is this too restrictive?
	
	Thinwire (windows)
		Implemented in main application

	COM port
	Drive mapping
	Printer mapping
		Implemented as modules


	Data goes into the VD on the ProcessInput call.

	Data goes out of the VD on the Poll call. If the VD wants to
	send any data whilst processing it just seems to stick it into
	a buffer and wait until Poll is called.


    Network Enumerator
        Can't be used with TCPIP currently.
        Only Netware and NetBEUI.
        
    Name resolver
    	Standard resolver - convert into calls to Resolver.
    	Does this need to be in the ICA module? Do the protocol stacks call into it?
    	What is the ICA resolver?

	Can we modify the resolver code to use the multi-tasking lookup?

    Interdependencies

	Data flows from the WD down through the PD's to the TD and then out.

	Data flows from the TD up through the PD's and to the WD and thence to
	a VD.

	Querying can occur when?
	Error callbacks can occur when?

	Functions available outside their layer...




    External dependencies
	Configuration option (INI file based?)


    API
	Send packet data to server
	Poll for data from server
		Called from a VD
		Use dynamic area for buffers

	Open server connection
	Close server connection
	Browse for servers
	Configure
		Called from UI


	Call the WD functions as listed in the WD structure. That
	should be it. All information comes out of it via the status code
	or from structures filled in.


WinStation application

    Implements UI and configuration portion of WinStation


	Full screen mode 
		programmable 256 colour palette on Risc PC

	Windowed mode
		Use toolbox for UI configuration


WFEngine
    abstracts interface to WinStation Driver / ICA module
    Allow use of Toolbox and non-toolbox frontends?



Transport Driver
----------------

No background processing occurs so all callbacks are real callbacks not
upcalls.

 Input parameters
 	Module, Log, BIni, CLib Procedure tables

        OutBufHeader
        OutBufTrailer


 Callback functions
        ProcessInputProc called with received data
        ErrorProc called on error
        OutBuf* not called

 Profile information
 	BrowserRetry
 	BrowserTimeout
 	  plus other resolver information of no interest

 	OutBufLength
 	OutBufCountHost
	OutBufCountClient


PdOpen
	Sets up stuff, returns status
	
PdClose
	closes down stuff, returns status

PdInfo
	Fills in stuff
	
PdPoll
	write out pending data
	read data and callback to processinputproc with data.
	
PdWrite
	can callback to ErrorProc if not open


Protocol driver
---------------

Each one has a copy of the BUFFER.C OutBuf routines these call up
to the main OutBuf routines with some wrapping.


Callbacks
        ProcessInputProc called with transformed received data
        OutBufAlloc/Error/Free called
        SetInfo/QueryInfo called up to WD for parameter stuff.


Virtual Drivers
---------------

Implemented as separate modules. Supply a jump table to allow the ICA
module to jump into them. Could use the gebneric veneer code for
simplicity. Similarly the callback functions into the ICA module would
have to go via veneers. Need to check on how many of them there are.

The Virtual drivers do all their registering of functions, and getting
of function pointers, via the SetInfo interface already.


WinStation TTY
--------------

Uses Vio library for text display. The Vio library has two sets of
code - one for DOS and one for Windows. 

The Windows one calls into the Thinwire code - also it appears to do
TTY in a window. It also uses special VGA modes for writing.

The DOS one uses some Intel assembler.

We could do 
 - Standard full-screen mode
 - TaskWindow mode
 - Special text screen mode (TextArea Gadget?).

Suspect full-screen mode will be adequate (and definitely
easiest). Will need writing afresh though.

TTY appears to be a simple scrolling window. ie VDU 4 output or
similar. Although it shares the same output routines as the
full-screen text mode in ICA3 it doesn't understand packets it just
takes lines of text from the driver stack and prints them to the
screen.


WinStation20
------------

No source provided

WinStation30
------------

Supports a full-screen mode but uses a whole different set of routines
that go through to the same VIO routines as TTY in the end.

I think we need to support full screen mode in a window - which is
unfortunately the hardest option - but otherwise if we need to switch
in and out of fullscreen mode it willook very ugly. OTOH that does
happen in windows and does look ugly!


OutBufs
-------

Some kind of mbuf scheme for data reception and transmission. 
Linked list of buffers to read or write.


Thinwire
--------

Missing loads of code!!! We need access to source (or definitions at
least) of the standard windows DIB functions. Possibly we might have
to do more than this.

Notes
-----

Nothing happens except when Poll is called. We might want to change this
to have the driver stack Poll called from a timer so thast module
based VDs can process if the frontend is hungup. eg COM and Driver mappers.

Use MemLib for malloc'ing memory since this will be a big module.
Possiblly keep OutBuf's in a separate DA since they will be simple and
long-lived? Need to analyse their memory use.

What do we do if/when they introduce ICA4? Is it OK to assume that we
will update the ICA module?

Develop the Thinwire VD separately so we can test it by feeding in
test packet sequences and seeing what happens.

Loading Protocol Drivers
------------------------

There is one static structure PdLink. 

A pointer to this is passed to the first driver (the transport
driver). It checks it is empty and if so initialises it with its own
details.

This same pointer is passed to the next driver. It takes a copy of the
the details in its own workspace and then overwrites it with its own
details.

So when the stack is all loaded the top of the stack is all that's
available to the WinStation driver. It is up to each PD to pass on
calls to the next driver.


