
Protocol Driver entry points
----------------------------

Load
	Write back pointer to procedure block
	and pointer to context structure
	NOTE: currently there is one static context in each
	driver. This wouldn't allow multiple connections so must
	change this to be malloc'd. UI must present clean driver array
	for each connection.

Unload
	Clear pointer to procedure block

Open
	Call DeviceOpen (eg open socket, allocate memory)

Close
	cancel writes, close device, free memory

Info
	read information about this module

Poll
	allow module to process

Write
	add data to be written

QueryInformation
	return appropriate information

SetInformation
	set appropriate information



PD SetInformation classes
-------------------------

SetInfo is usually called on the top of the protocol stack (not on the
WinStation driver).  Each class either does an operation and then
calls the next driver in the stack or calls the next driver first and
then does its operation. Either way the request always (?) trickles
down all the layers.

    PdNop,
    PdLastError,
    PdWdAddress,
    PdConnect,
    PdDisconnect,
    PdCancelWrite,
    PdKillFocus,
    PdSetFocus,
    PdSendBreak,
    PdEnablePassThrough,
    PdDisablePassThrough,
    PdCallback,
    PdAddReadHook,
    PdRemoveReadHook,
    PdAddWriteHook,
    PdRemoveWriteHook,
    PdModemStatus,
    PdBufferInfo,
    PdInitModule,
    PdDisableModule,
    PdIcaDetected,
    PdOutBufReserve,
    PdEnableModule,
    PdTimeoutStatus,
    PdIOStatus,


    PdNop,

    PdLastError,
TD: Read: last error information from device

    PdWdAddress,
TD: Set: function pointers plus context for OutBufAlloc, OutBufFree, OutBufError, ProcessInput
PD: Set: function pointers plus context for OutBufAlloc, OutBufFree, OutBufError, ProcessInput, SetInfo, QueryInfo
    Read: function pointers plus context for OutBufAlloc, OutBufFree, OutBufError, ProcessInput, SetInfo, QueryInfo

    PdConnect,
TD: call: Connect device
PD: call: connect logical device

    PdDisconnect,
TD: call: Disconnect device
PD: call: disconnect logical device

    PdCancelWrite,
TD: call: Cancel queued and pending device write
PD: call: Cancel queued and pending device write

    PdKillFocus,
unused?
    PdSetFocus,
unused?
    PdSendBreak,
unused?
    PdEnablePassThrough,
unused?
    PdDisablePassThrough,
unused?

    PdCallback,
PD: call: callback (?? when is it used ??)

    PdAddReadHook,
TD: Set:  the function to be called after reading data

    PdRemoveReadHook,
TD: Set: Remove read hook

    PdAddWriteHook,
TD: set: Set the function to be called after writing data

    PdRemoveWriteHook,
TD: set: Remove write hook

    PdModemStatus,
PD: read: (PDMODEM) read modem TimeLeft

    PdBufferInfo,
TD: Read: OutBufLength, OutBufCountHost, OutBufCountClient

    PdInitModule,
PD: call: Init protocol module device

    PdDisableModule,
TD: set: Set the SentCOnnect flag to FALSE
PD: call: device disable
    set: flags to FALSE

    PdIcaDetected,
PD: set: ICA detected flag TRUE

    PdOutBufReserve,
PD: read: (PDRELI) calls CheckSlowStart

    PdEnableModule,
PD: call: enable device
    set: enable module flag

    PdTimeoutStatus,
PD: read: (PDRELI) retransmit times

    PdIOStatus,
TD: Read: IO statistics and status


----------------------------------------------------------------------------------------------------

Driver entry points (as for PD's apart from Write)

Load
Unload
Open
Close
Info
Poll
QueryInformation
SetInformation


{
    WdClientData,
    WdStatistics,
    WdLastError,
    WdConnect,
    WdDisconnect,
    WdKillFocus,
    WdSetFocus,
    WdEnablePassThrough,
    WdDisablePassThrough,
    WdVdAddress,
    WdVirtualWriteHook,
    WdAddReadHook,
    WdRemoveReadHook,
    WdAddWriteHook,
    WdRemoveWriteHook,
    WdModemStatus,
    WdLoadBalance,        // get - appserver to reconnect to for load balancing
    WdCharCode,
    WdScanCode,
    WdMouseInfo,
    WdInitWindow,
    WdDestroyWindow,
    WdPaint,              // Tell the client to paint
    WdRedraw,             // Tell the host to redraw
    WdThinwireStack,      // Pass the thinwire stack to the thinwire vd
    WdEncryptionInit,     // get - Encryption initialization parameters
    WdRealizePaletteFG,   // inform client to realize it's foreground palette
    WdRealizePaletteBG,   // inform client to realize it's background palette
    WdInactivate,         // client is about to lose input focus
    WdSetProductID,       // client is about to lose input focus
    WdSetDefaultMode,     // client is about to lose input focus
    WdRaiseSoftkey,       // raise the soft keyboard
    WdLowerSoftkey,       // lower the soft keyboard
    WdIOStatus,           // IO status
    WdOpenVirtualChannel, // get - Open a virtual channel
    WdCache,              // persistent caching command set
    WdGetInfoData,        // Information from host to client
    WdWindowSwitch,       // window has switched back, check keyboard state
}

    WdClientData,
WD read: return nothing

    WdStatistics,
WD read: return nothing

    WdLastError,
WD read: call PD

    WdConnect,
WD set: call PD

    WdDisconnect,
WD set: call PD, 
WD set: set send terminate flag


    WdKillFocus,
WD set: call PD
WD set: set received stop OK (TTY/ICA)

    WdSetFocus,
WD set: call PD
WD set: setup kbd mode and LEDs (ICA)

    WdEnablePassThrough,
WD set: call PD

    WdDisablePassThrough,
WD set: call PD

    WdVdAddress,
WD set: copy addresses of loaded VD's (?)

    WdVirtualWriteHook,
WD set: set function pointers for write hooks for a VD
        return functions OutBufReserve, OutBufAppend, OutBufWrite, AppendVdHeader, data MaximumWriteSize

    WdAddReadHook,
WD set: call PD

    WdRemoveReadHook,
WD set: call PD

    WdAddWriteHook,
WD set: call PD

    WdRemoveWriteHook,
WD set: call PD

    WdModemStatus,
WD read: call PD

    WdLoadBalance,        // get - appserver to reconnect to for load balancing
WD read: read AppServer information

    WdCharCode,
WD call: send keystroke to KeyWrite() (ICA/TTY)

    WdScanCode,
WD call: call KbdWrite()

    WdMouseInfo,
WD call: call MouWrite()

    WdInitWindow,
WD call: open a text window

    WdDestroyWindow,
WD call: close a text window

    WdPaint,              // Tell the client to paint
WD call: paint a text window

    WdRedraw,             // Tell the host to redraw
WD call: set SendRedraw flag

    WdThinwireStack,      // Pass the thinwire stack to the thinwire vd
WD call: convert to VdThinwireStack

    WdEncryptionInit,     // get - Encryption initialization parameters
WD read: get encruption parameters
WD read: get encruption parameters (ICA)

    WdRealizePaletteFG,   // inform client to realize it's foreground palette
WD call: convert to VdRealizePaletteFG

    WdRealizePaletteBG,   // inform client to realize it's background palette
WD call: convert to VdRealizePaletteBG

    WdInactivate,         // client is about to lose input focus
WD call: convert to VdInactivate

    WdSetProductID,       // client is about to lose input focus

WD set: set productID
    WdSetDefaultMode,     // client is about to lose input focus
WD set: set default mode

    WdRaiseSoftkey,       // raise the soft keyboard
WD set: set raise soft key flag
 
    WdLowerSoftkey,       // lower the soft keyboard
WD set: set lower soft key flag

    WdIOStatus,           // IO status
WD read: call PD

    WdOpenVirtualChannel, // get - Open a virtual channel
WD read: get a virtual channel number and open it

    WdCache,              // persistent caching command set
WD set: do some cache stuff

    WdGetInfoData,        // Information from host to client
WD read: get an ID'd packet oif information from the WD

    WdWindowSwitch,       // window has switched back, check keyboard state
WD set: set led states

----------------------------------------------------------------------------------------------------

    VdLastError,
    VdKillFocus,
    VdSetFocus,
    VdMousePosition,
    VdThinWireCache,
    VdThinWire20Entries,
    VdDisableModule,
    VdFlush,
    VdInitWindow,
    VdDestroyWindow,
    VdPaint,
    VdThinwireStack,
    VdRealizePaletteFG,   // inform client to realize it's foreground palette
    VdRealizePaletteBG,   // inform client to realize it's background palette
    VdInactivate,         // client is about to lose input focus
    VdGetSecurityAccess,  // cdm security info
    VdSetSecurityAccess,  // cdm security info


Some VD entries are called from the WdSetInformation. Others from
other points in the ICA protocol.

