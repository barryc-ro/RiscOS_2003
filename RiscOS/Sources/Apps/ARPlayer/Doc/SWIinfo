

ReplaySupport module
--------------------

The ReplaySupport module provides routines to help out applications that wish to provide an interface to the ARMovie Player. Currently it has routines that need to be held in the RMA as they are called by Player whilst it is running. It may be expanded in the future.

Module name:  ReplaySupport
Module title: Replay support
File name:    Replayspt
Version:      0.02
SWI chunk:    &C0200 (temporary user area)

SWIs
----

=== Replay_RegisterSprites  &C0200
----------------------------------

Input:
  r0 -> sprite area containing buttons
  r1 -> array of offsets in bytes from screen base of buttons
  r2 -> array of sprite names
  r3 = initial button state word

Output:
  VC, r0 -> address of update routine
  VS, r0 -> standard error

Description:

  This routine copies the given sprites into the RMA and returns a pointer to a routine to pass to Player via the -mouse parameter. It will then respond to the callbacks from Player to press and unpress the buttons appropriately.

It should be called immediately before calling Player if button control is desired. If any sprites are already registered then they will be freed first.

The sprites must be pre-processed in the following way.

 - They must be in the current mode and palette (ie should look correct if plotted with OS_SpriteOp,PutSprite).

 - They should have a suitable amount of lefthand-wastage such that the position of the actual sprite data within the sprite is at the same offset within the word as the button is on screen. Or to look at it in another way, the sprites could be created by screen grabs (preserving the lefthand wastage that naturally exists on screen).

Note that even though 16 bit sprites are not allowed to have left-hand wastage in this case they may have as no OS routines are used to plot the sprites.

The button controls available are

 PAUSE, STOP, STEP, MUTE

The sprites can be in any order in the sprite area but their names should be presented in the above order, in the array pointed to by r2. The 4 unpressed varities should be followed the 4 pressed versions.

eg for the standard set of buttons in !ARMovie.Sprites :-

static char *sprite_names[] =
{
  "pause",  "exit",  "single",  "loud",
  "ppause", "pexit", "psingle", "mute"
};

 r1 points to an array (in the same order as the sprite names) of the positions of the top left hand corners of the sprites. The values given should be the offset in bytes from the start of the screen. Note that obviously the values for sprites 5-8 will be the same as for 1-4, however an array of 8 values must still be given.

If -1 is given for any sprite then it is assumed to be off screen and button changes relating to it will be ignored.

 r3 contains the initial button state so that the code knows when a button changes state. The relevant bits are :-

bPaused  bit 0
bMuted   bit 1

If there are no errors on exit then r0 contains the address of the routine to pass to Player in the form "-mouse %d", r0. Note that the address must be passed as a decimal value.

=== Replay_DeRegisterSprites  &C0201
------------------------------------

Input
 None
Output
 VS, r0 -> error

This routine will free up the memory used for the sprites copied in by Replay_RegisterSprites. It should be called after Player returns but it can be called many times without harm.

=== Replay_TimebarPaintAddress &C0202
-------------------------------------

Input:
 r0 = PixelsPerFrame
 r1 = TimebarAddress
 r2 = TimebarHeight
 r3 = FGColour
 r4 = BGColour
 r5 = log2bpp for routine wanted

Output:
 VC, r0 = 0 or -> time bar paint routine
 VS, r0 -> error

Description:

  This SWI configures the time bar paint routine and passes back the address which should be passed to Player as "-paint %d", r0. Note that r0 may be 0 if no paint routine is available for the current screen mode. Currently all display depths are supported except 1 and 2 bits.

 r0 is the number of pixels covered by one frame. It is a 20.12 fixed point value. ie it can be calculated as :-

(TimebarWidthInPixels << 12) * RateAdjustment / NumFramesInMovie

RateAdjustment is what is passed in the -speed argument to Player. 

 r1 is the address of the top left corner of the time bar. The value is the offset in bytes from the screen base address. Note that you should be careful with the positioning of the timebar left hand size as in 4bpp modes a byte cannot represent any position on screen.

 r2 is the height of the time bar in screen lines.

 r3 is the colour of the time bar. It should be in colour number format as returned by ColourTrans_ReturnColourNumber.

 r4 is the colour of the time bar background. It should be in colour number format as returned by ColourTrans_ReturnColourNumber.

 r5 is log2bpp for the current screen mode. Currently supported values are 2,3,4 and 5. Other values will mean r0 returns 0.

eof
