/* > display.h

 * © SJ Middleton, 1993

 * The main header for ARTools.
 * See the C files for descriptions of the functions prototyped here.

 */

#ifndef __display_h
# define __display_h

#ifndef __spr_disp_h            /* allows display of a sprite in a window */
# include "ARLib/spr_disp.h"
#endif

#ifndef __dbox_h
# include "ARLib/dbox.h"
#endif

#ifndef __armovie_h             /* For sound-only playback and movie identification */
# include "ARLib/armovie.h"
#endif

#ifndef __artools_h             /* Setup structure for playback */ 
# include "artools.h"
#endif

#ifndef __arinfo_h
# include "ARLib/arinfo.h"
#endif

/*
 * Current state of playback, used for updating the buttons in the tools pane.
 */

typedef enum
{
    play_Stopped,
    play_Playing,
    play_Paused
} play_state;

enum
{
    time_Decimal,
    time_Seconds,
    time_Faded
};

/*
 * The context structure for a window
 */

typedef struct display__str
{
    struct display__str *next;  /* not actually used currently */

    sprdisplay  viewer;         /* sprite viewer */
    wimp_w      window;         /* window handle of viewer */
    dbox        tools;          /* tools pane */

    char        *filename;      /* file loaded or NULL */
    armovie_hdr *hdr;           /* hdr of file loaded or NULL */
    int         nsoundtracks;
    arinfo_str  arinfo;         /* info for compression type */

    spr_area    spranchor;      /* static sprite in window */
    char        name[13];       /* name of sprite in area */

    BOOL        timebar_open;   /* are the panes showing */
    BOOL        tools_open;
    BOOL        sound_on;

    artool_playstr  play;       /* current setup for playing the movie */

    int         length;         /* length of movie */

    int         current_frame,
                nframes;

    int         displayed_frame;    /* frame time last displayed in box */
    int         time_mode;

    int         grabbed_frame;  /* frame number of frame displayed */

    play_state  state;          /* see above */

    int         ref_playing;    /* ref code as passed to armovie_playsound */

    dbox        info;           /* associated info window */
    spr_area    newsprite;      /* newsprite to add into header */

    int         info_soundtrack;    /* which soundtrack to display in info window (from 1) */

} display_str;

#define TIMEBAR_COLOUR      0x0000ff00      /* red */
#define TIMEBAR_BG_COLOUR   0xffffff00      /* white */

/* Prototypes from tools.c */ 

extern void tools_dispose(display_str *dp);
extern void tools_create(display_str *dp, BOOL time, BOOL tools);

extern void tools_refreshsound(display_str *dp);
extern void tools_refreshtime(display_str *dp);
extern void tools_refreshpause(display_str *dp);
extern void tools_refreshplay(display_str *dp);
extern void tools_clearstop(display_str *dp);

extern int tool_buttonpositions(display_str *dp, char *buffer, int *xpos, int *ypos);
extern BOOL tool_barposition(display_str *dp, wimp_box *box);
extern void tools_toggle(display_str *dp);
extern void tools_timemode(display_str *dp, int mode);

/* From display.c */

extern int display_positions(display_str *dp, char *buffer);
extern BOOL display_grabsprite(display_str *d, spr_box *box_out);
extern void display_moveonscreen(wimp_w w);
extern int display_checkonscreen(display_str *dp, BOOL check_iconbar);

extern void display_loadfile(display_str *d, const char *name);
extern void display_runfile(const char *name);

extern void display_dispose(display_str **pdp);
extern display_str *display_open(const char *filename);
extern void display_close(void);
extern void display_settitle(display_str *dp);
extern BOOL display_loadsprite(display_str *d);

/* From play.c */

extern void play_stop(display_str *d);
extern void play_start(display_str *d, BOOL big);
extern void play_pause(display_str *d);
extern void play_step(display_str *d, int step);
extern void play_togglemute(display_str *d);
extern void play_seek(display_str *dp);
extern void play_disposepaintcode(void);

extern BOOL setup_nextslot(int mem_needed, const char *msg);

/* From info.c */

extern void info_update(display_str *dp);
extern void info_dispose(display_str *dp);
extern void info_open(display_str *dp);
extern void info_popup(display_str *dp);

/*
extern void info_paste(display_str *dp);
extern BOOL info_allowpaste(display_str *dp);
 */

#endif

/* eof display.h */
