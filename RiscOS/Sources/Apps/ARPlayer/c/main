/* > main.c

 * © SJ Middleton, 1993

 * Main file for ARPlayer.
 * This file initiliases everything and controls the iconbar icon and menu.

 */

#include "ARLib/baricon.h"
#include "ARLib/clipboard.h"
#include "ARLib/dbox.h"
#include "ARLib/dboxquery.h"
#include "ARLib/event.h"
#include "ARLib/flex.h"
#include "ARLib/help.h"
#include "ARLib/menu.h"
#include "ARLib/msgs.h" 
#include "ARLib/res.h"
#include "ARLib/res_spr.h"
#include "ARLib/screenmode.h"
#include "swis.h"
#include "ARLib/template.h"
#include "ARLib/visdelay.h"
#include "ARLib/werr.h"
#include "ARLib/wimpt.h"
#include "ARLib/wimpx.h"
#include "ARLib/win.h"
#include "ARLib/xferrecv.h"

#include <locale.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ARLib/file.h"
#include "ARLib/macros.h"
#include "ARLib/opt.h"
#include "ARLib/strfn.h"
#include "ARLib/wmisc.h"

#include "ARLib/dboxinc.h"
#include "ARLib/armovie.h"
#include "ARLib/arsound.h"
#include "artools.h"
#include "display.h"

#include "VersionNum"

/* ------------------------------------------------------------------------------------ */

#define TASK_TITLE			msgs_lookup("taskname")
#define APP_TITLE			"ARPlayer"

#define ICONBAR_SPRITE		"!ARPlayer"

#define ICON_HELP			msgs_lookup("ICON")

#define ARMOVIE_SPRITES		"<ARMovie$Dir>.Sprites"
#define ARTOOLS_SPRITES		"ARPlayer:Sprites"

artool_options	options =
{
	option_CatchDataOpen | option_WindowButtons | option_Timebar | option_Toolbar | option_Sound,
	{
		artool_Video,
		"13",
		NULL, 0,		/* traj file / rate */
		NULL,			/* shape file */
		1,				/* loop for */
		1,				/* soundtrack */
		NULL,			/* extra args */
		RATE_UNIT*1		/* rate change */
	},
	100000000, 100000000	/* interpolation limits  */
};

/* ------------------------------------------------------------------------------------ */

/*
 * See File/opt for the code to save and load preference files
 */

#define OPTIONS_FILE	"<ARPlayer$OptionsFile>"
#define OPTIONS_TITLE	msgs_lookup("main1:ARPlayer options")

static opt_line_t opts[] =
{
	{ "DisplayOpen", NULL, NULL, opt_FlagField, 0x100 | 0, offsetof(artool_options, flags) },
	{ "CatchDataOpen", NULL, NULL, opt_FlagField, 0x100 | 1, offsetof(artool_options, flags) },
	{ "Timebar", NULL, NULL, opt_FlagField, 0x100 | 2, offsetof(artool_options, flags) },
	{ "Toolbar", NULL, NULL, opt_FlagField, 0x100 | 3, offsetof(artool_options, flags) },
	{ "Sound", NULL, NULL, opt_FlagField, 0x100 | 4, offsetof(artool_options, flags) },
	{ "MultipleWindows", NULL, NULL, opt_FlagField, 0x100 | 5, offsetof(artool_options, flags) },
	{ "WindowButtons", NULL, NULL, opt_FlagField, 0x100 | 6, offsetof(artool_options, flags) },

	{ "ChangeMode", NULL, NULL, opt_FlagField, 0x100 | 0, offsetof(artool_options, play.flags) },
	{ "PlayTrajectory", NULL, NULL, opt_FlagField, 0x100 | 1, offsetof(artool_options, play.flags) },
	{ "Loop", NULL, NULL, opt_FlagField, 0x100 | 2, offsetof(artool_options, play.flags) },
	{ "LoopForever", NULL, NULL, opt_FlagField, 0x100 | 3, offsetof(artool_options, play.flags) },
	{ "PlayVideo", NULL, NULL, opt_FlagField, 0x100 | 5, offsetof(artool_options, play.flags) },
	{ "PlayBig", NULL, NULL, opt_FlagField, 0x100 | 6, offsetof(artool_options, play.flags) },
	{ "PlayShape", NULL, NULL, opt_FlagField, 0x100 | 7, offsetof(artool_options, play.flags) },
	{ "UseExtraArgs", NULL, NULL, opt_FlagField, 0x100 | 8, offsetof(artool_options, play.flags) },
	{ "UseRateAdjust", NULL, NULL, opt_FlagField, 0x100 | 9, offsetof(artool_options, play.flags) },

	{ "Screen mode", NULL, NULL, opt_String, sizeoff(artool_options, play.mode), offsetof(artool_options, play.mode) },
	{ "Loop for", NULL, NULL, opt_ULong, 1, offsetof(artool_options, play.loop_for) },
	{ "Rate change", NULL, NULL, opt_ULong, 1, offsetof(artool_options, play.rate_change) },
	{ "Trajectory", NULL, NULL, opt_MallocString, 256, offsetof(artool_options, play.trajectory_file) },
	{ "Shape", NULL, NULL, opt_MallocString, 256, offsetof(artool_options, play.shape_file) },
	{ "Extra args", NULL, NULL, opt_MallocString, 256, offsetof(artool_options, play.extra_args) },

	{ "Interpolation", NULL, NULL, opt_SLong, 2, offsetof(artool_options, interp_rate1) },

	{ NULL, NULL, NULL, opt_EndOfList }
};

static void preferences_save(void)
{
	opt_save(OPTIONS_FILE, OPTIONS_TITLE, opts, &options, 0);
}

/*
 * Check that the trajectory or shape file in the file actually exists either as a full pathname
 * or as a leaf in the ARMovie directory.
 * If it doesn't then clear the entry.
 */

static BOOL check_file(const char *root, const char *file, char **s_out)
{
	char *s = stradd(root, file);
	BOOL found = FALSE;

	if (file_size(s, NULL) != -1)
		found = TRUE;
	else if (file_size(file, NULL) != -1)
	{
		strrplc(&s, file);
		found = TRUE;
	}

	if (found && s_out)
		*s_out = s;
	else
		free(s);

	return found;
}

BOOL get_trajectory_file(const char *file, char **s_out)
{
	return check_file(ARMOVIE_TRAJECTORY_DIR".", file, s_out);
}

BOOL get_shape_file(const char *file, char **s_out)
{
	return check_file(ARMOVIE_SHAPE_DIR".", file, s_out);
}

static void preferences_load(void)
{
	opt_load(OPTIONS_FILE, OPTIONS_TITLE, opts, &options, 0);

	if (options.play.trajectory_file[0] && !get_trajectory_file(options.play.trajectory_file, NULL))
	{
		c_free((mem_ptr)&options.play.trajectory_file);
		options.play.flags &= ~artool_Trajectory;
	}

	if (options.play.shape_file[0] && !get_shape_file(options.play.shape_file, NULL))
	{
		c_free((mem_ptr)&options.play.shape_file);
		options.play.flags &= ~artool_Shape;
	}
}

void dispose_playstr(artool_playstr *play)
{
	c_free((mem_ptr)&play->trajectory_file);
	c_free((mem_ptr)&play->shape_file);
	c_free((mem_ptr)&play->extra_args);
}

void copy_playstr(const artool_playstr *from, artool_playstr *to)
{
	dispose_playstr(to);
	*to = *from;

	to->trajectory_file = strdup(from->trajectory_file);
	to->shape_file = strdup(from->shape_file);
	to->extra_args = strdup(from->extra_args);
}

/* ------------------------------------------------------------------------------------ */

/*
 * Iconbar click.
 * Open new window (or bring to top if single window)
 */

static void iconclick(wimp_i icon)
{
	display_open(NULL);
	UNUSED(icon);
}

/*
 * ARMovie file dropped on iconbar - open a new window containing it.
 * Trying to save an ARMovie to here will give an error.
 */

static void loadproc(wimp_eventstr *e, void *handle)
{
	switch (e->e)
	{
		case wimp_ESEND:
		case wimp_ESENDWANTACK:
		{
			char	*filename;
			if (xferrecv_checkinsert(&filename) == filetype_ARMovie)
			{
				display_open(filename);
			}
			else switch (e->data.msg.hdr.action)
			{
				case wimp_MHELPREQUEST:
					help_reply(ICON_HELP);
					break;
			}
			break;
		}
	}
	UNUSED(handle);
	UNUSED(e);
}

/* ------------------------------------------------------------------------------------ */

/*
 * ARMovie file Filer_Run - open a new window and show it if flag is set.
 */

static BOOL unknown_events(wimp_eventstr *e, void *handle)
{
	char *filename;
	if (help_process(e))
		return TRUE;

	else if (xferrecv_checkinsert(&filename) == filetype_ARMovie &&
		options.flags & option_CatchDataOpen)
	{
		xferrecv_insertfileok();
		display_runfile(filename);
		return TRUE;
	}
	return FALSE;
	UNUSED(handle);
}

/* ------------------------------------------------------------------------------------ */

/*
 * Iconbar menu
 * control sound system
 * enable multiple windows
 * enable Filer_Run catching
 */

#define ICONBAR_MENU    msgs_lookup("imenu")

#define IMENU_HELP		"IHELP"

enum
{
	mmenu_Info = 1,
	mmenu_Globals,
	mmenu_MultipleWindows,
	mmenu_SaveOptions,
	mmenu_Quit
};

enum
{
	msound_Volume = 1,
	msound_Speaker
};

static menu mainmenu;

static menu menumaker(void *handle)
{
	menu_setflags(mainmenu, mmenu_Globals, is_artoolglobal_open(), FALSE);
	menu_setflags(mainmenu, mmenu_MultipleWindows, options.flags & option_MultipleWindows, FALSE);

	help_register_handler(help_simplehandler, IMENU_HELP);

    return mainmenu;
    UNUSED(handle);
}

static void menuhit(void *handle, char *hit)
{
	switch (hit[0])
	{
		case mmenu_Info:
			if (wimpt_last_event()->e != wimp_EMENU)
				wmisc_popup_info(Module_Version, Module_Date);
			break;

		case mmenu_Globals:
			artoolglobal_popup();
			break;

		case mmenu_MultipleWindows:
			options.flags ^= option_MultipleWindows;
			break;

		case mmenu_SaveOptions:
			artoolglobal_savebootoptions();
			preferences_save();
			break;

		case mmenu_Quit:
			wmisc_losecaret();
			wmisc_flushevents();
			exit(EXIT_SUCCESS);
	}
    UNUSED(handle);
}

static BOOL setup_menus(void)
{
    if ((mainmenu = menu_new(APP_TITLE, ICONBAR_MENU)) == NULL)
    	return FALSE;

    event_attachmenumaker(win_ICONBAR, menumaker, menuhit, NULL);

	return TRUE;
}

/* ------------------------------------------------------------------------------------ */

static wimp_msgaction wimpmsglist[] =
{
	wimp_MDATASAVE,
	wimp_MDATASAVEOK,
	wimp_MDATALOAD,
	wimp_MDATALOADOK,
	wimp_MRAMFETCH,
	wimp_MRAMTRANSMIT,
	wimp_MMENUWARN,
	wimp_MMODECHANGE,
	wimp_PALETTECHANGE,
	wimp_MHELPREQUEST,
	wimp_MDATAOPEN,
	wimp_SAVEDESK,
	wimp_MDEVICECLAIM,
	wimp_MDEVICEINUSE,
	wimp_MPREQUIT
};

static void cleanup(void)
{
	_swix(Hourglass_Smash, 0);
}

/*
 * Main initialisation.
 * Load ARMovie button sprites, then merge in private sprites.
 */

static BOOL main_initialise(int argc, char *argv[])
{
	setbuf(stderr, NULL);
	setlocale(LC_ALL, "");

    /* RISC_OSlib initialisation */

    visdelay_init();
    visdelay_begin();
	atexit(cleanup);

    res_init(APP_TITLE);            /* Resources */
	msgs_init();

    wimpt_wimpversion(310);
	wimpt_wimpmsgs(wimpmsglist);
	wimpt_postmortem(argc > 1 && strcmp(argv[1], "-p") == 0);
    if (wimpt_init(TASK_TITLE) >= 320)         /* Main Wimp initialisation */
    	werr__registersprite("!"APP_TITLE, (void *)1);

    resspr_AddSprites(ARMOVIE_SPRITES);
	if (file_size(ARTOOLS_SPRITES, NULL) != -1)
	    resspr_AddSprites(ARTOOLS_SPRITES);

    template_init();                /* Templates */

	flex_Init(TASK_TITLE);
    dbox_init();                    /* Dialogue boxes */

	wmisc_init();

    /* Set up the icon on the icon bar, and declare its event handlers */
    baricon(wimp_spriteanchor, ICONBAR_SPRITE, iconclick);

    armovie_init();
	armovie_registermemfns(f_alloc, f_free);
	armovie_registercataloguememfns(f_alloc, f_free);
	if (dynamicarea_init())
		armovie_registersoundmemfns(d_alloc, d_free);

	clipboard_Init();
	clipboard_RegisterMemFns(f_alloc, f_free);

	preferences_load();

	win_register_event_handler(win_ICONBARLOAD, loadproc, NULL);
	win_add_unknown_event_processor(unknown_events, NULL);

/* ------------------ Init Iconbar menu ----------------- */

	setup_menus();

	if (options.flags & option_DisplayOpen)
		display_open(NULL);

    visdelay_end();

	return TRUE;
}

/******************************* MAIN PROGRAM ********************************/

/*--- Main entry point. ---*/

int main(int argc, char *argv[])
{
    if (main_initialise(argc, argv))
    {
		event_setmask(wimp_EMNULL | wimp_EMLOSECARET | wimp_EMGAINCARET);
        while (TRUE)
            event_process();
    }
    UNUSED(argc);
    UNUSED(argv);
}

/* eof main.c */
