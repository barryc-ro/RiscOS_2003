/**************************************************************************************************/
/* File:    ftpglue.c                                                                             */
/* Purpose: Interface to ZModem File Transfer Protocol                                            */
/*                                                                                                */
/* Author:  David Pilling (original author), with modifications by Simon Forrest                  */
/* History: 0.00 - Created from original file                                                     */
/*          0.01 - Added file structure information, and functions to utilise it                  */
/*          0.02 - Rewrote ZModem send/receive calling functions; removed batch transfers         */
/*          0.03 - Hooked into main WIMP task                                                     */
/*          0.04 - No. of CAN characters reduced from 10 to 8 as specified in ZModem protocol     */
/**************************************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <signal.h>
#include <ctype.h>
#include <time.h>

#include "kernel.h"      /* Include kernel.h: SBF */
#include "swis.h"        /* Include swis.h: SBF */

#include "ftpglue.h"
#include "serial_lib.h"  /* Include dual serial library: SBF */
#include "debuglib.h"    /* Include Neil Bingham's debugging library */

#include "zmodemdef.h"   /* Include ZModem definitions */


/* ------------------------------------ #DEFINE STATEMENTS -------------------------------------- */
#ifdef DUALSERIAL
#define SerialPort SerialPort_1  /* Dual serial supported */
#else
#define SerialPort SerialPort_o  /* Original serial device driver */
#endif

#define timeslice  10    /* Timeslice for Wimp Polls in cs */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */
int rxbitrate=2400;
int txbitrate=2400;

int ftp_ok = 1;
int online = 1;

static int bytessofar;         /* How many bytes have been transferred? */
static int totlength;          /* Out of how many? (file length) */

static int o_handle, i_handle; /* Serial port handles */
char txdname[256];             /* Current pathname of file to transfer */


/* ------------------------------------ FUNCTION DEFINITIONS ------------------------------------ */

/* Open the I/O streams - returns -1 for OK, 0 for failure */
/* Added: SBF.  Most likely only temporary (for testing) */
int ftpopenstreams(void)
{
  o_handle = serial_open_stream(SerialPort, Serial_Output);
  i_handle = serial_open_stream(SerialPort, Serial_Input);

  if (i_handle == 0 || o_handle == 0)
  {
    ftpclosestreams();
    return(0);
  }
  else
    return(-1);
}


/* Set the internal file handles to those passed in from outside */
/* Added: SBF */
void ftpdeclarestreams(int in, int out)
{
  o_handle = out;
  i_handle = in;
}


/* Close the I/O steams */
/* Added: SBF.  Most likely only temporary (for testing) */
void ftpclosestreams(void)
{
  serial_close_stream(o_handle);
  serial_close_stream(i_handle);
}


/* Write a byte to the output stream */
int outbyte(int byte)
{
 static clock_t timeperiod = 0;

 serial_write_byte(o_handle, byte);
 /* Call null poll loop if timeslice has expired */
 if (timeperiod < clock())
 {
   poll_zero();
   timeperiod = clock() + timeslice;
 }
 return(0);
}


/* Get a byte from input stream, in given time, or return -1 */
/* Original method: null poll only when byte not present */
#if 0
int ftpgetbyte(int time)
{
  int byte;

  time = clock() + time;

  do
  {
    if ((byte = serial_read_byte(i_handle)) != -1) return(byte);
    /* Wimp poll here */
    poll_zero();
  } while (time > clock());

  return(-1);
}
#endif

/* Alternative: ensures more null polls may occur, stopping input buffer saturation */
#if 1
int ftpgetbyte(int time)
{
  static clock_t timeperiod = 0;
  int byte;

  time = clock() + time;

  do
  {
    byte = serial_read_byte(i_handle);
    if (byte == -1)
      poll_zero();
  } while ((time > clock() && byte == -1));

  /* Call null poll loop if timeslice has expired */
  if (timeperiod < clock())
  {
    poll_zero();
    timeperiod = clock() + timeslice;
  }

  return (byte);
}
#endif


/* Write a byte to the currently open serial stream */
int ftpoutbyte(int byte)
{
 return(outbyte(byte));
}


/* Check if modem is online - now unused */
int ftponline(void)
{
 return(online);
}


/* Trash the input buffer */
/* This works by allocating a buffer in memory, filling it with the
 * characters in the serial input buffer, then throwing it away.
 */
#ifdef DUALSERIAL
void ftpflushinput(void)
{

  char *memory;
  int bytes_in_buffer;

  bytes_in_buffer = serial_size(i_handle);

  dprintf((NULL, "Bytes to flush from I/P: %d\n", bytes_in_buffer));

  if (bytes_in_buffer == 0)
    return;

  memory = malloc((size_t)bytes_in_buffer);
  if (memory == 0)
    return;

  serial_read_stream(i_handle, memory, bytes_in_buffer); // Read the bytes

  free(memory); // Throw them away
}

#else

/* Alternative which works on old serial device driver only */
/* Works simply by flushing serial input buffer using *FX 21,1 */
void ftpflushinput(void)
{
  _kernel_swi_regs reg;

  reg.r[0] = 21;
  reg.r[1] = 1;

  _kernel_swi(OS_Byte, &reg, &reg);
}
#endif

/* Returns number of bytes in the input buffer */

int ftpinputchars(void)
{
 return(serial_size(i_handle));
}



/* Send cancel string to get the other end to shut up */
void ftpcanit(void)
{
 static char canitstr[]=
 {
  24,24,24,24,24,24,24,24,8,8,8,8,8,8,8,8,0
 };
 int i=0;

 while(canitstr[i]) outbyte(canitstr[i++]);
}


/* Print/despatch information about the ZModem transfer session in operation */
void ftpinfo(char * format, ...)
{
 va_list args;
 char v[128];
 va_start(args, format);
 vsprintf(v, format, args);
 va_end(args);

/* Send information on transfer from here */
#ifdef DEBUGFTP
 display_status(v);  // Debug to status window
#endif
}

/* Calculate the percentage complete of the current transfer */
/* Display the results in the status window */
static void ftpwritepc(void)
{
#ifdef DEBUGFTP
  if (totlength)
    display_percentage((bytessofar*100)/totlength);
  else
    display_percentage(0);
#endif
}

/* Read bytes from file into buffer */
int ftpread(void * buff, int size, int number, FILE * fp)
{
  int code;

  code = fread(buff, 1, number, fp);
  bytessofar += code;
  ftpwritepc();
  return (code);
}

/* Adjust the file pointer position in the file (read) */
int ftpreadfseek(FILE *stream, long int offset, int whence)
{
  int code;

  code = fseek(stream, offset, whence);
  bytessofar = (int)ftell(stream);
  ftpwritepc();
  return (code);
}

/* Close the file opened for reading */
int ftpcloseread(FILE * fp, char * message, int flags)
{
  int code = 0;

  if (fp)
    code = fclose(fp);

#ifdef DEBUGFTP
  display_status(message);
//  dprintf((NULL, "ftpcloseread: %s\n", message));
#endif

  if (flags == FTPCLOSEERROR)
    send_result_code(RC_ZModemTerminated);

  return (code);
}


/* Open a file for reading */
FILE * ftpopenread(int bn, int bsize)
{
  fstat f;

  if (bn < 0)
  {
    stat(txdname, &f);
    totlength = f.length;
    bytessofar = 0;
    ftpwritepc();
    return(fopen(txdname, "rb"));
  }
  else
    return (NULL);
}

/****************************************************************************/

/* Open a file for writing */
FILE * ftpopenwrite(char * rname, int * bn, int bsize, int len, int * flg, int * hdr)
{
  totlength = len;
  bytessofar = 0;
  ftpwritepc();
  return (fopen(txdname, "wb"));  /* Note: change "txdname" to "rxname" to use leafnane of received file */
}


/* Adjust the file pointer position in the file (write) */
int ftpwritefseek(FILE *stream, long int offset, int whence)
{
  int code;

  code = fseek(stream, offset, whence);
  bytessofar = (int)ftell(stream);
  ftpwritepc();
  return (code);
}


/* Write bytes from the buffer to an open file */
int ftpwrite(void * buff, int size, int number, FILE * fp)
{
  int code;

  code = fwrite(buff, size, number, fp);
  bytessofar += code;
  ftpwritepc();
  return (code);
}


/* Find the position of the file pointer in the file (write) */
int ftpwritetell(FILE * fp)
{
  return ((int)ftell(fp));
}


/* Close the file opened for writing */
int ftpclosewrite(FILE * fp, char * message, int flags)
{
  int code = 0;

  if (fp)
    code = fclose(fp);

#ifdef DEBUGFTP
  display_status(message);
  //dprintf((NULL, "ftpclosewrite: %s\n", message));
#endif

  if (flags == FTPCLOSEERROR)
    send_result_code(RC_ZModemTerminated);

return (code);
}


/* Set up filename ready for direct ZModem send */
void ftpdirectsend(char * name)
{
  if (name)
    strcpy(txdname, name);
}


/* Set up filename ready for direct ZModem receive */
void ftpdirectreceive(char * name)
{
  if (name)
    strcpy(txdname, name);
}

/***************************************/
/* File information transfer functions */
/***************************************/

/* Return file statistics */
_kernel_oserror *stat(char *name, fstat *f)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = 5;
  reg.r[1] = (int)name;

  err = _kernel_swi(OS_File, &reg, &reg);
  if (err) return (err);

  f -> object = reg.r[0];
  f -> load = reg.r[2];
  f -> exec = reg.r[3];
  f -> length = reg.r[4];
  f -> acc = reg.r[5];
  f -> type = filetype(f -> load);

  return (NULL);
}

/* Obtain filetype of file */
int filetype(int load)
{
  if ((load & 0xfff00000)==0xfff00000)
    return ((load >> 8) & 0xfff);
  else
    return (CODE);
}

/* Given a full pathname, obtain the leafname of the file */
char *leaf(char *pathname)
{
  char *ptr;

  ptr = strrchr(pathname, '.');
  if (!ptr) ptr = pathname;
  else ptr += 1;

  return (ptr);
}

/* End of ftpglue.c */
