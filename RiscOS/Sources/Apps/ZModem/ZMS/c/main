/**************************************************************************************************/
/* File:    main.c                                                                                */
/* Purpose: Main file for the Daytona ZModem FTP.                                                 */
/*                                                                                                */
/* Author:  Simon Forrest                                                                         */
/* History: 04/07/97 - 0.01 - Created                                                             */
/*          19/09/97 - 0.02 - Removed input buffer purge on TX and RX                             */
/**************************************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */

#include "main.h"
#include "ftpglue.h"

/* ------------------------------------ DEBUG OUTPUT CONTROL ------------------------------------ */

/* Set output device for trace (if function tracing is enabled) */
#ifdef TRACE
#define TRACE_OUTPUT PDEBUG_OUTPUT
#endif

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Declaration of window & menu handles                                                           */
ObjectId Main_WindowHandle;
ObjectId ProgInfo_WindowHandle;
ObjectId Ibar_MenuHandle;
ObjectId Icon_BarHandle;

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

MessagesFD message_block;              /* declare a message block for use with toolbox initialise */
IdBlock    event_id_block;             /* declare an event block for use with toolbox initialise  */
int        current_wimp;               /* the current version of the wimp we are using            */
int        task_id;                    /* and our task handle                                     */
int        quit = 0;                   /* declare a flag to indicate when we should quit          */

/* ZModem variables */
static int busy = 0;                   /* declare a flag to indicate when ZModem is busy          */
static int port_number;                /* current serial port number for transfer                 */
static int transfer_dir;               /* current transfer type (0 = TX, 1 = RX)                  */


/* This array tells toolbox initialise which toolbox events we are interested in.  A value        */
/* of 0 indicates we want all events                                                              */
static int toolbox_events[] = {0};


/* This array tells toolbox initialise which wimp messages we want to know about                  */
static int wimp_messages[]  = {
                                Message_ZModemTX,      // Our TX request
                                Message_ZModemRX,      // Our RX request
                                Message_ZModemAbort,   // Abort request
                                                       // No "ZModemTransferResult"; we despatch this!
                                Wimp_MQuit
                               };


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* quit_program                                                         */
/*                                                                      */
/* Function is called when quit is selected from the TaskWindow, or the */
/* user selects quit from the iconbar menu                              */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int quit_program(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  quit = 1;
  dprintf((NULL, "Received quit event\n"));
  return(TRUE);
}


/************************************************************************/
/* send_result_code                                                     */
/*                                                                      */
/* Function is called when a ZModem transfer message is to be sent.     */
/*                                                                      */
/* Parameters: Result code.                                             */
/*                                                                      */
/* Returns:    Nothing.                                                 */
/*                                                                      */
/************************************************************************/
void send_result_code(int result_code)
{
  ZModemMessage zmessage;

  /* Show debugging information */
  dprintf((NULL, "ZModem result code = %d\n", result_code));
  #ifdef DEBUGFTP
  {
    char buffer[20];

    sprintf(buffer, "%d", result_code);
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_resultcode, buffer);
  }
  #endif

  /* Send ZModem_TransferResult message */
  /* Build message block */
  zmessage.hdr.size = 32;
  zmessage.hdr.your_ref = 0;
  zmessage.hdr.action_code = Message_ZModemTransferResult;
  zmessage.data.zmodem_result.port_id = port_number;
  zmessage.data.zmodem_result.transfer_type = transfer_dir;
  zmessage.data.zmodem_result.result_code = result_code;

  /* Despatch message */
  wimp_send_message(Wimp_EUserMessage, &zmessage, 0, 0, &task_id);
}


/************************************************************************/
/* check_object_exists                                                  */
/*                                                                      */
/* Function is called to check whether or not an object exists on a     */
/* given filesystem, and if so returns its type.                        */
/*                                                                      */
/* Parameters: Pathname of object.                                      */
/*                                                                      */
/* Returns:    0 = Not found; 1 = File; 2 = Directory; 3 = Image file   */
/*                                                                      */
/************************************************************************/
int check_object_exists(char *pathname)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;

  reg.r[0] = 17;
  reg.r[1] = (int)pathname;
  err = _kernel_swi(OS_File, &reg, &reg);
  if (err) return (0);
  return(reg.r[0]);
}


/************************************************************************/
/* startup                                                              */
/*                                                                      */
/* Function is called upon startup of the program after initialisation  */
/* and Toolbox registration.                                            */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void startup(void)
{
  debug_initialise("ZMS", "ZMSdebug", NULL);
  debug_atexit();
  debug_output_device(DEBUGIT_OUTPUT);
  #ifdef TRACE
  debug_initialise_trace(TRACE_OUTPUT, "outbyte serial_write_byte serial_read_byte");
  dfprintf((NULL, TRACE_OUTPUT, "\n*** START OF TRACE ***\n"));
  #endif

  dprintf((NULL, "WIMP task started\n"));
}


/************************************************************************/
/* attach_handlers                                                      */
/*                                                                      */
/* Function will be called when an object is auto-created (usually the  */
/* Iconbar).  We can now register all our other objects, plus the events*/
/* associated with them.                                                */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int attach_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  #ifdef DEBUGFTP
  _kernel_oserror *er;
  ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

  /* Deal with all events on the debug window */
  if (strcmp(created_event->template_name, "debug_win")==0)
  {
    /* Define handle for debug_win */
    Main_WindowHandle = id_block->self_id;
  }

  /* Deal with all events on the proginfo window */
  else if (strcmp(created_event->template_name, "proginfo")==0)
  {
    /* Define handle for proginfo */
    ProgInfo_WindowHandle = id_block->self_id;
  }

  /* Deal with all events on the iconbar menu */
  else if (strcmp(created_event->template_name, "ibar_menu")==0)
  {
    /* Assign a handle to the ibar_menu */
    Ibar_MenuHandle = id_block->self_id;

    /* Quit menu entry - ibar menu */
    er = event_register_toolbox_handler(id_block->self_id, ib_menu_quit_event, quit_program, NULL);
    error_check(er);
  }

  /* Deal with all events on the Iconbar */
  else if (strcmp(created_event->template_name, "Iconbar")==0)
  {
    /* Assign a handle to the iconbar */
    Icon_BarHandle = id_block->self_id;

    /* Run startup() function from here */
    startup();
  }
  #endif

  return (TRUE);
}


/************************************************************************/
/* wimp_message_handler                                                 */
/*                                                                      */
/* Function handles wimp messages coming to the program.  Then,         */
/* depending on the message, the relevant function is called.           */
/*                                                                      */
/* Parameters: WimpMessage parameters.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int wimp_message_handler(WimpMessage *message, void *handle)
{
  switch (message -> hdr.action_code)
  {
    /* Quit message */
    case Wimp_MQuit:
      quit = 1;
      dprintf((NULL, "Received quit message from Task Manager\n"));
      exit(0);
      #ifdef TRACE
      dfprintf((NULL, TRACE_OUTPUT, "*** END OF TRACE ***\n"));
      #endif
    break;
  }
  return (TRUE);
}


/************************************************************************/
/* zmodem_message_handler                                               */
/*                                                                      */
/* Function handles ZModem WIMP messages coming into the program.       */
/* Depending on the message, the relevant function is called.           */
/*                                                                      */
/* Parameters: WimpMessage parameters.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int zmodem_message_handler(WimpMessage *message, void *handle)
{
  /* Transform WimpMessage type into ZModemMessage type so we may interpret the data block easily */
  ZModemMessage *zmessage = (ZModemMessage*) message;
  char *pathname;
  char *end_marker;

  switch (zmessage -> hdr.action_code)
  {
    /* ZModem TX messsage */
    case Message_ZModemTX:
      /* Check busy flag first */
      if (busy)
      {
        /* Send "BUSY" return code */
        send_result_code(RC_ZModemBusy);
        #ifdef DEBUGFTP
        displayfield_set_value(0, Main_WindowHandle, cpt_dw_transferstatus, "Busy");
        #endif
        dprintf((NULL, "TX request received: ZModem busy...\n"));
        return(FALSE);
      }
      else
      {
        /* Set busy flag */
        busy = 1;
        dprintf((NULL, "Busy flag set\n"));

        /* Declare the stream handles */
        ftpdeclarestreams(zmessage -> data.zmodem_tx.RX_handle, zmessage -> data.zmodem_tx.TX_handle);

        /* Obtain pathname of file and check if it exists */
        pathname = zmessage -> data.zmodem_tx.pathname;

        /* Check that the pathname points to a file */
        if (check_object_exists(pathname) != 1)
        {
          /* Complain about the non-existence of the file */
          send_result_code(RC_FileNotFound);

          #ifdef DEBUGFTP
          displayfield_set_value(0, Main_WindowHandle, cpt_dw_transferstatus, "File not found");
          displayfield_set_value(0, Main_WindowHandle, cpt_dw_xfertype, "None");
          displayfield_set_value(0, Main_WindowHandle, cpt_dw_leafname, "<None>");
          #endif

          dprintf((NULL, "File '%s' not found, or is a directory; exiting...\n", pathname));

          /* Send abort frame to other machine, indicating it should cancel the transfer */
          ftpcanit();

          /* Clear busy flag and exit */
          busy = 0;
          dprintf((NULL, "Busy flag cleared\n"));
          return (FALSE);
        }

        /* Obtain serial port number and set transfer type to 0 (TX) */
        port_number = zmessage -> data.zmodem_tx.port_id;
        transfer_dir = 0;

        dprintf((NULL, "ZModem TX initiated; pathname '%s'\n", pathname));

        #ifdef DEBUGFTP
        displayfield_set_value(0, Main_WindowHandle, cpt_dw_leafname, (char*)leaf(pathname));
        displayfield_set_value(0, Main_WindowHandle, cpt_dw_xfertype, "TX");
        #endif

        /* Print debug info. */
        dprintf((NULL, "Stream handles: R = %d, W = %d\n", zmessage -> data.zmodem_tx.RX_handle,
                                                           zmessage -> data.zmodem_tx.TX_handle));
        dprintf((NULL, "Port number = %d\n", zmessage -> data.zmodem_tx.port_id));

        /* Flush input buffer and send the file using ZModem protocols */
        ftpflushinput();
        directzmodemtx(pathname);

        busy = 0; /* Clear busy flag */
        dprintf((NULL, "Busy flag cleared\n"));
        dprintf((NULL, "ZModem transfer (TX) complete\n"));

        /* Notify interested tasks of completion */
        send_result_code(RC_Complete);
      }
    break;

    /* ZModem RX message */
    case Message_ZModemRX:
      /* Check busy flag first */
      if (busy)
      {
        /* Send "BUSY" return code */
        send_result_code(RC_ZModemBusy);
        #ifdef DEBUGFTP
        displayfield_set_value(0, Main_WindowHandle, cpt_dw_transferstatus, "Busy");
        #endif
        dprintf((NULL, "RX request received: ZModem busy...\n"));
        return(FALSE);
      }
      else
      {
        /* Set busy flag */
        busy = 1;
        dprintf((NULL, "Busy flag set\n"));

        /* Declare the stream handles */
        ftpdeclarestreams(zmessage -> data.zmodem_rx.RX_handle, zmessage -> data.zmodem_rx.TX_handle);

        /* Obtain pathname of file and check if the directory in which it will be written exists */
        pathname = zmessage -> data.zmodem_rx.pathname;

        /* First strip off the leafname; place a NULL terminator at the last fullstop position */
        end_marker = strrchr(pathname, '.');

        if (end_marker != NULL)
        {
          *end_marker = '\0';

          /* Check that the new pathname points to a directory */
          if (check_object_exists(pathname) != 2)
          {
            /* Complain about non-existence of directory */
            send_result_code(RC_DirNotFound);

            #ifdef DEBUGFTP
            displayfield_set_value(0, Main_WindowHandle, cpt_dw_transferstatus, "Directory not found");
            displayfield_set_value(0, Main_WindowHandle, cpt_dw_xfertype, "None");
            displayfield_set_value(0, Main_WindowHandle, cpt_dw_leafname, "<None>");
            #endif

            dprintf((NULL, "Directory '%s' not found, or is a file; exiting...\n", pathname));

            /* Send abort frame to other machine, indicating it should cancel the transfer */
            ftpcanit();

            /* Clear busy flag and exit */
            busy = 0;
            dprintf((NULL, "Busy flag cleared\n"));
            return (FALSE);
          }

          /* Now cleverly reconstruct the original pathname by restoring the fullstop */
          *end_marker = '.';
        }

        /* Obtain serial port number and set transfer type to 1 (RX) */
        port_number = zmessage -> data.zmodem_rx.port_id;
        transfer_dir = 1;

        dprintf((NULL, "ZModem RX initiated: pathname '%s'\n", pathname));

        #ifdef DEBUGFTP
        displayfield_set_value(0, Main_WindowHandle, cpt_dw_leafname, (char*)leaf(pathname));
        displayfield_set_value(0, Main_WindowHandle, cpt_dw_xfertype, "RX");
        #endif

        /* Print debug info. */
        dprintf((NULL, "Stream handles: R = %d, W = %d\n", zmessage -> data.zmodem_rx.RX_handle,
                                                           zmessage -> data.zmodem_rx.TX_handle));
        dprintf((NULL, "Port number = %d\n", port_number));

        /* Receive the file using ZModem protocols */
        directzmodemrx(pathname);

        busy = 0; /* Clear busy flag */
        dprintf((NULL, "Busy flag cleared\n"));
        dprintf((NULL, "ZModem transfer (RX) complete\n"));

        /* Notify interested tasks of completion */
        send_result_code(RC_Complete);
      }
    break;

    /* ZModem abort message */
    case Message_ZModemAbort:

      /* Send abort string to other machine */
      ftpcanit();
      dprintf((NULL, "Abort request: sent abort frame\n"));

      #ifdef DEBUGFTP
      displayfield_set_value(0, Main_WindowHandle, cpt_dw_transferstatus, "Aborted");
      #endif

      /* Flush the input buffer and notify any interested tasks of the abort */
      ftpflushinput();
      send_result_code(RC_ZModemAbort);

      /* Clear the busy flag */
      busy = 0;
      dprintf((NULL, "Busy flag cleared\n"));
  }
  return (TRUE);
}


/************************************************************************/
/* default_key_handler                                                  */
/*                                                                      */
/* Function processes all key presses, and if they are not used by this */
/* program (e.g. F12), then they are ignored, and the WIMP process them */
/*                                                                      */
/* Parameters: WimpEventHandler parameters.                             */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpKeyPressedEvent *key_event = (WimpKeyPressedEvent *) event;

  wimp_process_key(key_event->key_code);

  return(TRUE);
}


/************************************************************************/
/* initialise                                                           */
/*                                                                      */
/* Function is from main() to setup various things vital to the program */
/* including Toolbox registration, message handle creation...           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void initialise(void)
{
  _kernel_oserror *er;

  /* Initialise ourselves with the event library. */
  er = event_initialise(&event_id_block);
  error_check_exit(er);

  /* As we have set the object flags on our iconbar object to be auto-create and auto_show,       */
  /* we are initially only interested in an auto create event when we receive this we can then    */
  /* attach handlers for our window and menu.                                                     */
  er = event_register_toolbox_handler(-1, Toolbox_ObjectAutoCreated, attach_handlers, NULL);
  error_check_exit(er);

  /* Standard WIMP messages */
  er = event_register_message_handler(Wimp_MQuit, wimp_message_handler, NULL);
  error_check_exit(er);

  /* ZModem (additional) messages */
  er = event_register_message_handler(Message_ZModemTX, zmodem_message_handler, NULL);
  error_check_exit(er);

  er = event_register_message_handler(Message_ZModemRX, zmodem_message_handler, NULL);
  error_check_exit(er);

  er = event_register_message_handler(Message_ZModemAbort, zmodem_message_handler, NULL);
  error_check_exit(er);

  /* This function prevents the program trapping unnecessary key presses such as F12              */
  er = event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL);
  error_check_exit(er);

  /* Now we have set up our handlers, we must initialise ourselves with the toolbox. Note that    */
  /* a parameter that we are not interested in (eg. in this case the sprite area) can be set to   */
  /* NULL.                                                                                        */
  er = toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                          &message_block, &event_id_block, &current_wimp, &task_id, NULL);
  error_check_exit(er);
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Function is called on initialisation.  initialise() is called from   */
/* here, and then event_poll().                                         */
/*                                                                      */
/* Parameters: Command line parameters supported.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int main(int argc, char *argv[])
{
  WimpPollBlock block;
  int code;
  _kernel_oserror *er;

  char buffer[50];

  /* Perform initialisation of various aspects of ourselves */
  initialise();

  /* While quit flag unset call event poll */
  while(!quit)
  {
    er = event_poll(&code, &block, NULL);
    error_check(er);

    sprintf(buffer, "Poll reason code = %d\n", code);
    dprintf((NULL, buffer));
  }

  /* It is time to quit. By simply calling exit the toolbox will be informed of our demise */
  dprintf((NULL, "Exit program\n"));
  #ifdef TRACE
  dfprintf((NULL, TRACE_OUTPUT, "*** END OF TRACE ***\n"));
  #endif
  exit(0);
}

/* Null event poll loop; ensures multi-tasking continues throughout file transfer */
int poll_loop(void)
{
  WimpPollBlock block;
  int code;
  _kernel_oserror *er;

/* Mask out everything except null events: following mask = 0x1CE3972 */
  er = event_set_mask(Wimp_Poll_RedrawWindowRequestMask | Wimp_Poll_PointerLeavingWindowMask | Wimp_Poll_PointerEnteringWindowMask
                      | Wimp_Poll_MouseClickMask | Wimp_Poll_KeyPressedMask | Wimp_Poll_LoseCaretMask | Wimp_Poll_GainCaretMask
                      | Wimp_Poll_PollWordNonZeroMask | Wimp_Poll_UserMessageMask | Wimp_Poll_UserMessageRecordedMask
                      | Wimp_Poll_UserMessageAcknowledgeMask | Wimp_Poll_PollWord | Wimp_Poll_PollWordHighPriority
                      | Wimp_Poll_SaveFPRegs);
  error_check(er);

  er = event_poll(&code, &block, NULL);
  error_check(er);

/* Show latency info.
  {
    static int last = 0;

    dprintf((NULL, "poll_loop: Return code = %d; Time = %d; Latency = %d\n", code, clock(), (clock() - last)));
    last = clock();
  }
*/

  /* Restore all Wimp Poll events */
  er = event_set_mask(Wimp_Poll_NullMask);
  error_check(er);
  return(code);
}

/* Null poll loop: wait for null reason code to be returned and then exit */
void poll_zero(void)
{
  while(poll_loop() != 0);
}

/* Update the percentage complete field in the debug window */
void display_percentage(int percentage)
{
  #ifdef DEBUGFTP
  char buffer[10];

  sprintf(buffer, "%d%%", percentage);
  displayfield_set_value(0, Main_WindowHandle, cpt_dw_percentagedone, buffer);
  #endif
}

/* Update the transfer status field in the debug window */
void display_status(char *string)
{
  #ifdef DEBUGFTP
  displayfield_set_value(0, Main_WindowHandle, cpt_dw_transferstatus, string);
  #endif
}
