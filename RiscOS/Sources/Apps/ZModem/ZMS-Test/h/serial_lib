/* File:    serial_lib.h
 * Purpose: C interface to Dual Serial module
 * Author:  S.B. Forrest (based on code by R.W. Buckley and B.A. Laughton)
 * History: 28-May-97 : SBF : Created
 */

#ifndef serial_lib_h
#define serial_lib_h


/* =============================================================================
 * Include header files
 */

#include "kernel.h"

/* =============================================================================
 * Define constants
 */

/* Filenames for serial streams, and access priviledges */
#define SerialPort_o  "Devices:$.Serial"
#define SerialPort_1  "Devices:$.Serial1"
#define SerialPort_2  "Devices:$.Serial2"

#define Serial_Input  (0x4F)
#define Serial_Output (0xCF)


/* Reason codes */
#define OS_Args_IOCtl    0x09  /* New reason code for SWI OS_Args */
#define DeviceCall_IOCtl 0x0E  /* New reason code for SWI DeviceFS_CallDevice */


/* Serial IOCtl reason codes */
enum
{
  IOCtl_baud_rate = 1,
  IOCtl_data_format,
  IOCtl_handshaking,
  IOCtl_buffer_size,
  IOCtl_buffer_threshold,
  IOCtl_control_lines,
  IOCtl_fifo_trigger_level,
  IOCtl_enumerate_baud_rates,
  IOCtl_baud_rate_from_index
};

/* Bit masks for reading/writing data length */
#define data_length_5 (0x00000005)
#define data_length_6 (0x00000006)
#define data_length_7 (0x00000007)
#define data_length_8 (0x00000008)

/* Bit masks for reading/writing number of start/stop bits */
#define stop_bits_1 (0x00000100)
#define stop_bits_2 (0x00000200)

/* Bit masks for reading/writing parity */
#define no_parity   (0x00000000)
#define even_parity (0x00010000)
#define odd_parity  (0x00020000)

/* Bit masks for reading/writing handshake status */
#define no_handshake       (0x00000000)
#define rts_cts_handshake  (0x00000001)
#define xon_xoff_handshake (0x00000002)
#define dtr_dsr_handshake  (0x00000003)

/* Bit masks for reading/writing control lines */
#define ctrl_line_DTR   (0x00000001)
#define ctrl_line_RTS   (0x00000002)
#define ctrl_line_CTS   (0x00010000)
#define ctrl_line_DSR   (0x00020000)
#define ctrl_line_RI    (0x00040000)
#define ctrl_line_DCD   (0x00080000)
#define ctrl_line_FIFOs (0x00100000)

/* Bit masks to set data read/write flag */
#define read_flag  (0x01)
#define write_flag (0x02)


/* =============================================================================
 * Declare new types
 */

/* IOCtl block */
typedef struct
{
  unsigned int reason    : 16; /* ioctl reason code */
  unsigned int group	 : 8;  /* ioctl group code */
  unsigned int reserved	 : 6;  /* should be zero */
  unsigned int read	 : 1;  /* read flag */
  unsigned int write	 : 1;  /* write flag */
  unsigned int data;	       /* data */
} ioctl_t;


/* =============================================================================
 * Declare function prototypes
 */

/*
 * Open stream on specified device.
 *
 * In: filename - filename of device to open stream on
 *     rights - RiscOS file access rights, SERIAL_INPUT or SERIAL_OUTPUT
 *
 * Ret: file handle of stream or 0 for failure
 *
 */
int serial_open_stream(char *filename, int rights);

/*
 * Close an open stream.
 *
 * In: handle - handle previously returned from serial_open_stream
 *
 */
void serial_close_stream(int handle);

/*
 * Perform a serial ioctl on an open stream.
 *
 * In: handle - handle previously returned from serial_open_stream
 *     ioctl_block - pointer to populated ioctl control block
 *
 * Ret: ioctl_block->data
 *
 * Contents of IOCtl control block will have been modifed depending on the
 * state of the write flag.
 *
 * Some IOCtls will only perform operations on the stream specified. others
 * will affect the general state of the serial port, ie DTR flag.
 *
 */
unsigned int serial_ioctl(int handle, ioctl_t *ioctl_block);

/*
 * Read a block of data from an open stream.
 *
 * In: handle - handle previously returned from serial_open_stream
 *     data_block - area to copy data to
 *     size - maximum size of data_block area
 *
 * Ret: amount of data copied into data_block area, -1 for error.
 *
 * If there is more than size bytes of data in stream then size bytes are
 * copied. otherwise all the data is copied.
 *
 */
int serial_read_stream(int handle, char *data_block, int size);

/*
 * Reads a single byte from an open stream.
 *
 * In: handle - handle previously returned from serial_open_stream
 *
 * Ret: byte of data, -1 for error or no data present.
 *
 */
int serial_read_byte(int handle);

/*
 * Writes a block of data to an open stream.
 *
 * In: handle - handle previously returned from serial_open_stram
 *     data_block - area to copy data from
 *     size - amount of data in data_block area
 *
 * Ret: Amount of data copied, -1 for error
 *
 * If there is more than size bytes of free space in stream, then size bytes
 * are written to the stream. Otherwise as much data as will fit will be
 * written.
 *
 */
int serial_write_stream(int handle, char *data_block, int size);

/*
 * Writes a single byte to an open stream.
 *
 * In: handle - handle previously returned from serial_open_stram
 *     data - byte to write
 *
 * Ret: 1 for success, -1 for error
 *
 */
int serial_write_byte(int handle, char data);

/*
 * Returns the number of characters in an input buffer and the amount of free
 * space in an output buffer.
 *
 * In: handle - handle previously returned from serial_open_stream
 *
 */
int serial_size(int handle);

/*
 * Perform a serial IOCtl call
 */
extern _kernel_oserror* osargs_ioctl(const int serial_file, const int reason, const int flags,
                                     const unsigned int data_in, unsigned int *const data_out);

/*
 * Write a string to an open stream
 *
 * In: handle - handle previously returned from serial_open_stream
 *     string - string to write
 *
 */
void serial_write_str(int handle, char* string);

#endif
