/**************************************************************************************************/
/* File:    main.c                                                                                */
/* Purpose: Main file for the Daytona ZModem Test Harness                                         */
/*                                                                                                */
/* Author:  Simon Forrest                                                                         */
/* History: 23/07/97 - 0.01 - Created                                                             */
/*          18/08/97 - 0.02 - Modem handling added                                                */
/*          16/02/98 - 0.03 - Removed dependency on "functions.h"                                 */
/**************************************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "serial_lib.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Declaration of window & menu handles                                                           */
ObjectId Main_WindowHandle;
ObjectId ProgInfo_WindowHandle;
ObjectId Ibar_MenuHandle;
ObjectId Icon_BarHandle;


/* ---------------------------------------- DEFINITIONS ----------------------------------------- */

#ifdef DUALSERIAL
#define SerialPort SerialPort_1
#else
#define SerialPort SerialPort_o
#endif


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

MessagesFD message_block;              /* declare a message block for use with toolbox initialise */
IdBlock    event_id_block;             /* declare an event block for use with toolbox initialise  */
int        current_wimp;               /* the current version of the wimp we are using            */
int        task_id;                    /* and our task handle                                     */
int        quit = 0;                   /* declare a flag to indicate when we should quit          */

int        i_handle = 0;               /* global to hold read stream handle                       */
int        o_handle = 0;               /* global to hold write stream handle                      */


/* This array tells toolbox initialise which toolbox events we are interested in.  A value        */
/* of 0 indicates we want all events                                                              */
static int toolbox_events[] = {0};


/* This array tells toolbox initialise which wimp messages we want to know about                  */
static int wimp_messages[]  = {
                                Message_ZModemTransferResult,
                                Wimp_MPreQuit,
                                Wimp_MQuit
                               };


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

int quit_program(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* If modem is being utilised... */
  #ifdef MODEM
  {
    int time;
    int delay = 200;
    int ptr = 0;
    char* string1 = "+++";
    char* string2 = "ATH0\n\r";
    char* string3 = "ATZ\n\r";

    /* Send string to modem */
    while (string1[ptr]) serial_write_byte(o_handle, string1[ptr++]);  /* N.B. Don't want NULL terminator! */
    time = clock() + delay;
    do
    {
      serial_read_byte(i_handle);
    } while (time > clock());
    serial_write_str(o_handle, string2);
    serial_write_str(o_handle, string3);
  }
  #endif

  quit = 1;
  return(TRUE);
}


void startup(void)
{
  /* Attempt to open serial streams */
  i_handle = serial_open_stream(SerialPort, Serial_Input);
  o_handle = serial_open_stream(SerialPort, Serial_Output);

  if (i_handle == 0 || o_handle == 0)
  {
    serial_close_stream(i_handle);
    serial_close_stream(o_handle);
    beep;
    quit = 1;
    return;
  }

  /* If modem is being utilised... */
  #ifdef MODEM
  {
    int time;
    int delay = 2000;
    char* string = "ATDT5237\n\r";

    /* Send string to modem */
    serial_write_str(o_handle, string);

    /* Wait for connection, discarding any echoed info. */
    time = clock() + delay;
    do
    {
      serial_read_byte(i_handle);
    } while (time > clock());
  }
  #endif

}


void trigger_zmodemtx(void)
{
  ZModemMessage zmessage;
  char buffer[256];
  int unused;

  sprintf(buffer, "%d", i_handle);
  displayfield_set_value(0, Main_WindowHandle, cpt_dw_rxhandle, buffer);
  sprintf(buffer, "%d", o_handle);
  displayfield_set_value(0, Main_WindowHandle, cpt_dw_txhandle, buffer);

  /* Build message block */
  zmessage.hdr.size = 256;
  zmessage.hdr.your_ref = 0;
  zmessage.hdr.action_code = Message_ZModemTX;
  zmessage.data.zmodem_tx.RX_handle = i_handle;
  zmessage.data.zmodem_tx.TX_handle = o_handle;
  numberrange_get_value(0, Main_WindowHandle, cpt_dw_portnumber, &zmessage.data.zmodem_tx.port_id);
  writablefield_get_value(0, Main_WindowHandle, cpt_dw_pathname, buffer, sizeof(buffer), &unused);
  strcpy((char *)&zmessage.data.zmodem_tx.pathname, buffer);

  /* Despatch message */
  wimp_send_message(Wimp_EUserMessage, &zmessage, 0, 0, &task_id);
}


void trigger_zmodemrx(void)
{
  ZModemMessage zmessage;
  char buffer[256];
  int unused;

  sprintf(buffer, "%d", i_handle);
  displayfield_set_value(0, Main_WindowHandle, cpt_dw_rxhandle, buffer);
  sprintf(buffer, "%d", o_handle);
  displayfield_set_value(0, Main_WindowHandle, cpt_dw_txhandle, buffer);

  /* Build message block */
  zmessage.hdr.size = 256;
  zmessage.hdr.your_ref = 0;
  zmessage.hdr.action_code = Message_ZModemRX;
  zmessage.data.zmodem_rx.RX_handle = i_handle;
  zmessage.data.zmodem_rx.TX_handle = o_handle;
  numberrange_get_value(0, Main_WindowHandle, cpt_dw_portnumber, &zmessage.data.zmodem_rx.port_id);
  writablefield_get_value(0, Main_WindowHandle, cpt_dw_pathname, buffer, sizeof(buffer), &unused);
  strcpy((char *)&zmessage.data.zmodem_rx.pathname, buffer);

  /* Despatch message */
  wimp_send_message(Wimp_EUserMessage, &zmessage, 0, 0, &task_id);
}


void trigger_zmodemabort(void)
{
  ZModemMessage zmessage;

  /* Build message block */
  zmessage.hdr.size = 32;
  zmessage.hdr.your_ref = 0;
  zmessage.hdr.action_code = Message_ZModemAbort;

  /* Despatch message */
  wimp_send_message(Wimp_EUserMessage, &zmessage, 0, 0, &task_id);
}


int action_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  _kernel_oserror *er;
  ActionButtonSelectedEvent *act_event = (ActionButtonSelectedEvent *) event;

  if (id_block->self_component == cpt_dw_actiontx)
  {
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_xfertype, "Send");
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_returncode, "None/OK");
    trigger_zmodemtx();
  }
  else if (id_block->self_component == cpt_dw_actionrx)
  {
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_xfertype, "Receive");
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_returncode, "None/OK");
    trigger_zmodemrx();
  }
  else if (id_block->self_component == cpt_dw_actionabort)
  {
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_xfertype, "Abort");
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_rxhandle, "--");
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_txhandle, "--");
    trigger_zmodemabort();
  }

  return (TRUE);

  IGNORE(act_event);
  IGNORE(er);
}


int attach_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  _kernel_oserror *er;
  ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

  /* Deal with all events on the debug window */
  if (strcmp(created_event->template_name, "debug_win")==0)
  {
    /* Define handle for debug_win */
    Main_WindowHandle = id_block->self_id;
  }

  /* Deal with all events on the proginfo window */
  else if (strcmp(created_event->template_name, "proginfo")==0)
  {
    /* Define handle for proginfo */
    ProgInfo_WindowHandle = id_block->self_id;
  }

  /* Deal with all events on the iconbar menu */
  else if (strcmp(created_event->template_name, "ibar_menu")==0)
  {
    /* Assign a handle to the ibar_menu */
    Ibar_MenuHandle = id_block->self_id;

    /* Quit menu entry - ibar menu */
    er = event_register_toolbox_handler(id_block->self_id, ib_menu_quit_event, quit_program, NULL);
    error_check(er);
  }

  /* Deal with all events on the Iconbar */
  else if (strcmp(created_event->template_name, "Iconbar")==0)
  {
    /* Assign a handle to the iconbar */
    Icon_BarHandle = id_block->self_id;

    /* Run startup() function from here */
    startup();
  }

  return (TRUE);
}



int wimp_message_handler(WimpMessage *message, void *handle)
{
  switch (message -> hdr.action_code)
  {
    /* Quit message */
    case Wimp_MQuit:
      quit = 1;
    break;
  }
  return (TRUE);
}



int zmodem_message_handler(WimpMessage *message, void *handle)
{
  /* Transform WimpMessage type into ZModemMessage type so we may interpret the data block easily */
  ZModemMessage *zmessage = (ZModemMessage*) message;
  char buffer[20];

  switch (zmessage -> hdr.action_code)
  {
    case Message_ZModemTransferResult:

    displayfield_set_value(0, Main_WindowHandle, cpt_dw_rxhandle, "--");
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_txhandle, "--");

    /* Obtain and display return code */
    sprintf(buffer, "%d", zmessage -> data.zmodem_result.result_code);
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_returncode, buffer);

    /* Cancel transfer type display */
    displayfield_set_value(0, Main_WindowHandle, cpt_dw_xfertype, "None");
  }

  return (TRUE);
}



int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpKeyPressedEvent *key_event = (WimpKeyPressedEvent *) event;

  wimp_process_key(key_event->key_code);

  return(TRUE);
}



void initialise(void)
{
  _kernel_oserror *er;

  /* Initialise ourselves with the event library. */
  er = event_initialise(&event_id_block);
  error_check_exit(er);

  er = event_register_toolbox_handler(-1, Toolbox_ObjectAutoCreated, attach_handlers, NULL);
  error_check_exit(er);
  er = event_register_toolbox_handler(-1, ActionButton_Selected, action_handlers, NULL);
  error_check_exit(er);

  /* Standard WIMP messages */
  er = event_register_message_handler(Wimp_MQuit, wimp_message_handler, NULL);
  error_check_exit(er);

  /* ZModem (additional) messages */
  er = event_register_message_handler(Message_ZModemTransferResult, zmodem_message_handler, NULL);
  error_check_exit(er);

  /* This function prevents the program trapping unnecessary key presses such as F12              */
  er = event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL);
  error_check_exit(er);

  /* Now we have set up our handlers, we must initialise ourselves with the toolbox. Note that    */
  /* a parameter that we are not interested in (eg. in this case the sprite area) can be set to   */
  /* NULL.                                                                                        */
  er = toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                          &message_block, &event_id_block, &current_wimp, &task_id, NULL);
  error_check_exit(er);
}



int main(int argc, char *argv[])
{

  WimpPollBlock block;
  int code;
  _kernel_oserror *er;

  /* Perform initialisation of various aspects of ourselves */
  initialise();

  /* While quit flag unset call event poll */
  while(!quit)
  {
    er = event_poll(&code, &block, NULL);
    error_check(er);
  }

  /* Close the serial streams */
  if (i_handle != 0 || o_handle != 0)
  {
    serial_close_stream(i_handle);
    serial_close_stream(o_handle);
  }

  /* Bye bye! */
  exit(0);
}
