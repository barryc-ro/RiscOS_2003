#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

#include "kernel.h"
#include "swicall.h"

#ifndef TRUE
# define TRUE 1
# define FALSE 0
#endif

void *private_word_pointer, *capwp, *cepwp;

#define FADENSTEPS 16                           /* Number of fade steps */

int fadestate = FADENSTEPS;

static char *gamma = NULL;                      /* Gamma table for fading */

/*
 * Standard module routines
 */

void Fader_modfinal (void)
{
  free(gamma);
}

_kernel_oserror *Fader_modinit (char *cmd_tail, int podule_base, void *pw)
{
  char *gammatab;
  int i;
  private_word_pointer = pw;

  /* Allocate and prime the gamma table for fading */

  gamma = malloc ((FADENSTEPS + 1) * 256);
  atexit (Fader_modfinal);
  if (gamma == NULL)
    exit(0);
  for (i = 0; i <= FADENSTEPS; i++)
  {
    int j;
    gammatab = gamma + i * 256;
    for (j = 0; j < 256; j++)
      gammatab[j] = (j * i) / FADENSTEPS;
  }

  return(NULL);
}

_kernel_oserror *Fader_cmd (char *arg_string, int argc, int cmd_no, void *pw)
{
  switch (cmd_no)
  {
  case 0:
    {
      int i, newstate;
      char *gammatab;

      newstate = atoi(arg_string) / (256 / FADENSTEPS);
      if (newstate < 0)
        newstate = 0;
      if (newstate > FADENSTEPS)
        newstate = FADENSTEPS;
      if (newstate > fadestate)
      {
        for (i = fadestate; i <= newstate; i++)
        {
          gammatab = gamma + i * 256;
          swi(OS_Byte, R0, 19, R1, 0, R2, 0, END);
          swi(OS_CallAVector,  R0, gammatab,  R1, gammatab,  R2, gammatab,
          R4, 9,  R9, 0x23,  END);
        }
      }
      else if (newstate < fadestate)
      {
        for (i = fadestate; i >= newstate; i--)
        {
          gammatab = gamma + i * 256;
          swi(OS_Byte, R0, 19, R1, 0, R2, 0, END);
          swi(OS_CallAVector,  R0, gammatab,  R1, gammatab,  R2, gammatab,
          R4, 9,  R9, 0x23,  END);
        }
      }
      fadestate = newstate;
    }
    break;

  }
  return (NULL);
}

