/*=====================================================================================*/
/*                                                                                     */
/*  FILE: !cd.h.messages                                                               */
/*  DESCRIPTION:  Header file for message handling routines.                           */
/*  AUTHOR: srose@omi.co.uk                                                            */
/*                                                                                     */
/*=====================================================================================*/

/*-------------------------------------------------------------------------------------*/
/*                       !cd's MESSAGE HANDLING PROTOCOL                               */
/*-------------------------------------------------------------------------------------*/

/*

Four message types exist in !cd's world.  These messages pass between !cd itself, and
the other cd task / application.  (At most, !cd and one other task is active.  At least,
only !cd is active in which case the machine is in an idle state waiting for the user to
insert a cd).  The four message types are as follows.  In terms of coding, they are
message numbers (see macro definitions further below), also referred to as message
actions on p.3-197 of the PRM.  Apart from TASK_HANDLE, none of the messages contain
data beyond byte 20 of the message block (refer PRM p.3-197).

Messages TO !cd:-

(Action Number)

TASK_ACTIVE       Let !cd know that I am a new task starting up.

TASK_DEAD         Let !cd know that I am about to die.



Messages FROM !cd:-

(Action Number)

TASK_HANDLE       !cd broadcasts its task handle, thus allowing for direct
                  communication as mentioned above under TASK_HANDLE_ACK.

TASK_DIE          !cd tells the other task to die.


A task launched by !cd should obey the following rules:

1.  Send !cd a TASK_ACTIVE message when starting up.

2.  Wait for !cd to send it's task handle if you wish to communicate directly with !cd
    rather than on a broadcast basis.

3.  Tell !cd when I am about to die.  Do this by sending a TASK_DEAD message.

4.  If a TASK_DIE message is received from !cd, do number 3 above.

5.  All messages are user messages (event code 17 on p.3-116 of the PRM).

*/


/*-------------------------------------------------------------------------------------*/
/*                                   MACRO DEFINITIONS                                 */
/*-------------------------------------------------------------------------------------*/


#define TASK_ACTIVE 0x4b680   /* Message numbers (also referred to as action numbers). */
#define TASK_DEAD 0x4b681     /* As mentioned on p. 4-546 of the PRM, Acorn must       */
#define TASK_DIE  0x4b682     /* allocate these numbers.  This has been done.  These   */
#define TASK_HANDLE 0x4b683   /* numbers have been officially allocated.               */

#define TASK_ACTIVE_INDEX 0        /* Allows the user to specify for example           */
#define TASK_DEAD_INDEX 1          /* msg_list[TASK_HANDLE_INDEX] rather than having   */
#define TASK_DIE_INDEX 2           /* to look it up and write msg_list[3].             */
#define TASK_HANDLE_INDEX 3

#define ORIGINAL_MESSAGE 0    /* Message codes used in message SWI calls.              */
#define USER_MESSAGE 17
#define BROADCAST 0

/*-------------------------------------------------------------------------------------*/
/*                             GLOBAL VARIABLE DECLARATIONS                            */
/*-------------------------------------------------------------------------------------*/


#ifdef DECLARE__
int msg_list[4] =      /* List of messages we're interested in.  This is used by       */
  {TASK_ACTIVE,        /* Wimp_Initialise to specify which messages are important, and */
   TASK_DEAD,          /* then in the message action field of the user message block   */
   TASK_DIE,           /* used by Wimp_SendMessage.                                    */
   TASK_HANDLE};
#else
  extern int msg_list[4];
#endif

/*-------------------------------------------------------------------------------------*/
/*                                FUNCTION PROTOTYPES                                  */
/*-------------------------------------------------------------------------------------*/


extern void SendMessage(int action,int destination,char *data);
/*

   Sends a message, with or without data to the specified destination.

   REQUIRES:  'action', which is R1+16 as mentioned on p. 3-197 of the PRM, and which
               is either TASK_HANDLE or TASK_DIE as described in the message handling
               protocol section of this file.  'action' should be passed in as
               msg_list[xxx_INDEX], where xxx is TASK_HANDLE, or TASK_DIE.

              'destination', which has the value BROADCAST if the message is to be
               sent to all tasks (including the sender).  Alternatively, 'destination'
               is the task handle of the destination task.

              'data', which is a pointer to a string of message data (refer PRM, p.
               3-197.  R1+20 in the message block).  If there is no message data, 'data'
               should be NULL.  Message data is only expected when !cd broadcasts its
               task handle.

   PREREQUISITES:  Any message data must be less than 236 characters in total.  As
                   !cd's only requirement for use of the message data field is in
               broadcasting it's task handle, use of a message data field which is
               anywhere near this limit should be unecessary.
*/

extern void ReadMessage(void);
/*

   Called when the main part of !cd detects the arrival of a user message.  Expected
   user messages are as described in the message passing protocol section above,
   namely TASK_ACTIVE or TASK_DEAD.  ReadMessage() updates certain variables in response
   to the received message.  ReadMessage() also displays the splash screen in response
   to a TASK_DEAD message and hides the splash screen in response to a TASK_ACTIVE
   message.

*/


extern void BroadcastPlingCDTaskHandle(void);

/*

   Broadcasts !cd task handle to all tasks (including itself, which we're not interested
   in and therefore don't act upon).

   PREREQUISITE:  'cd_task_handle' must have been set as a result of calling Wimp_
                   Initialise().

*/

/*-------------------------------------------------------------------------------------*/
