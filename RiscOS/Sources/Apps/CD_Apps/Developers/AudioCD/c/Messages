/*=====================================================================================*/
/*                                                                                     */
/*  FILE:  !AudioCD.c.Messages                                                         */
/*  DESCRIPTION:           Message handling routines for use in communicating with     */
/*                         !cd.  !AudioCD is a sub-task of !cd.  See messages.h for    */
/*                         further information on !cd's message passing protocol.      */
/*  AUTHOR:  srose@omi.co.uk                                                           */
/*                                                                                     */
/*=====================================================================================*/

#undef GLOBALS__

/*-------------------------------------------------------------------------------------*/
/*                         Inclusion of !AudioCD header files.                         */
/*-------------------------------------------------------------------------------------*/

#include "Common.h"
#include "Messages.h"

/*-------------------------------------------------------------------------------------*/
/*                        Inclusion of standard C header files.                        */
/*-------------------------------------------------------------------------------------*/

#if defined(DEVELOPMENT) || defined(MEMORY_TRACE) || defined(FN_TRACE)
    #include "stdlib.h"
#endif

#include "stdio.h"
#include "string.h"

/*-------------------------------------------------------------------------------------*/
/*   Inclusion of SWI interface header.  Allows constructs of the type                 */
/*   err = swi(Wimp_Initialise,R0,310,R1,0x4B534154,R2,NULL,R3,msg_list,OUT,R1,        */
/*   &cd_task_handle,END);                                                             */
/*-------------------------------------------------------------------------------------*/

#include "swicall.h"

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  SendMessage()                                                           */
/*  BEHAVIOUR: Sends a message of type 'action' to the specified destination.   In     */
/*             !cd's world this translates to send !cd a TASK_ACTIVE message (I'm a    */
/*             new task just starting up), or send !cd a TASK_DEAD message (I'm about  */
/*             to die).                                                                */
/*  REQUIRES:  - 'action', which is TASK_ACTIVE, or TASK_DEAD (see messages.h).        */
/*             - 'destination', which is either !cd's task handle, or which has the    */
/*                value BROADCAST.  (A broadcast goes to the sender as well as to all  */
/*                other tasks.  !AudioCD ignores messages it receives from itself.     */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void SendMessage(int action,int destination)
{
 int *mess_blk = NULL;        /* Points to the message block, the format of which is   */
                              /* described on p. 3-197 of the PRM.                     */
 int mess_blk_size = 20;      /* !AudioCD never sends any message data in it's message */
                              /* data field.  Hence the size of the message block is   */
                              /* always 20 (refer PRM p. 3-197).                       */
 _kernel_oserror *err = NULL; /* Error handling swi pointer.                           */

   #ifdef FN_TRACE
     puts("SendMessage()");
   #endif

   if ((mess_blk = malloc(mess_blk_size)) == NULL)
        ErrorHandler(__FILE__,__LINE__,"SendMessage()",0,"Insufficient Memory.",FATAL);

   *mess_blk = mess_blk_size;             /* Message block length.                     */
   *(mess_blk + 3) = ORIGINAL_MESSAGE;
   *(mess_blk + 4) = action;              /* TASK_ACTIVE, or TASK_DEAD.                */

   if ((err = swi(Wimp_SendMessage,R0,USER_MESSAGE,R1,mess_blk,R2,destination,END))
        != NULL)
         ErrorHandler(__FILE__,__LINE__,"SendMessage()",err->errnum,err->errmess,FATAL);

   free(mess_blk);
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  ReadMessage()                                                           */
/*  BEHAVIOUR: Reads messages sent from !cd.  Ignores broadcast messages sent from     */
/*             itself to !cd.  Expected messages from !cd include TASK_HANDLE (!cd's   */
/*             task handle), and TASK_DIE (!cd has told me to die).  See messages.h    */
/*             for further information.                                                */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void ReadMessage(void)
{
 int *mess_code = NULL;                    /* Message action portion of the message    */
                                           /* block (refer PRM p. 3-197, and messages  */
                                           /* header file).                            */
 char *p = NULL;                           /* Used if the received message is !cd's    */
                                           /* task handle.                             */
 extern char cd_task_handle[100];          /* Stores !cd's task handle if the received */
                                           /* message is of type TASK_HANDLE.          */
 extern int *poll_blk;

   #ifdef FN_TRACE
     puts("ReadMessage()");
   #endif

   p = (char *)poll_blk;

   mess_code = (int *)(poll_blk + 4);

   if (*mess_code == msg_list[TASK_HANDLE_INDEX])
   {
        sprintf(cd_task_handle,"%s",(p+20));
   }
   else if (*mess_code == msg_list[TASK_DIE_INDEX])
        {
             ErrorHandler(__FILE__,__LINE__,"ReadMessage()",0,
                          "!cd told me to die.  This is not an error.",FATAL);
        }
}

