/*=====================================================================================*/
/*                                                                                     */
/*  FILE:    !VideoCD.c.Initialise                                                     */
/*  AUTHOR:  srose@omi.co.uk                                                           */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

#undef  GLOBALS__

#include "Common.h"
#include "Initialise.h"
#include "stdlib.h"
#include "stdio.h"
#include "signal.h"
#include "string.h"
#include "ctype.h"
#include "swicall.h"

static int GetNumbrOfFiles(char *sp);
static int MPEGFile(char *p);

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:   Signals()                                                              */
/*  BEHAVIOUR:  !VideoCD should trap *all* errors.  Executing this function as part of */
/*              the initialisation sequence means that when certain errors occur which */
/*              would not normally be trapped by !VideoCD, !VideoCD's SignalCatcher()  */
/*              function in Main.c will get a look in and be able to handle them       */
/*              instead.  These types of errors include division by zero, bad memory   */
/*              access, and so on.  This functionality was successfully tested by      */
/*              deliberately incorporating "int a = 3/0;" into display.c in !AudioCD.  */
/*              Refer PRM p.4-302 and Horspool's C programming book p. 173 for further */
/*              info.                                                                  */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

extern void Signals(void)
{
 int i;
 int signal_list[] = { SIGABRT, SIGFPE,
                       SIGILL,  SIGINT,
                       SIGSEGV, SIGTERM,
                       SIGSTAK, SIGUSR1,
                       SIGUSR2, SIGOSERROR};

   #ifdef FN_TRACE
     puts("Signals()");
   #endif

   for (i = 0; i < 10; signal(signal_list[i],SignalCatcher),i++);
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Which_TV_Standard()                                                     */
/*  BEHAVIOUR: Determines whether NTSC or PAL.  This information is used when invoking */
/*             the BASIC Player program.                                               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern int Which_TV_Standard(void)
{
 int mode = NTSC;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE
     puts("Which_TV_Standard()");
   #endif

   if ((err = swi(OS_ScreenMode,R0,1,OUT,R1,&mode,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"Which_TV_Standard()",err->errnum,err->errmess,
        WARNING);

   #ifdef DEVELOPMENT
      printf("\nScreen mode: %d\n",mode);
   #endif

   return mode;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  GetNumbrOfMPEGFiles()                                                   */
/*  BEHAVIOUR: Tries to determine the number of MPEG clips on a cd and returns a list  */
/*             of those clips.                                                         */
/*  RETURNS:   A null separator list of MPEG filenames, and "MPEGs", which is the no.  */
/*             of MPEGs found and the no. of files in this list.                       */
/*  ASSUMPTIONS: There is an MPEGAV directory in the root, containing MUSICn/DAT or    */
/*               AVSEQn/DAT files, which are MPEG clips.  ('n' represents wildcard).   */
/*               Or, if there is no MPEGAV directory in the root then any MPEG clips   */
/*               live in the root.  Each file in the root is said to be an MPEG if it  */
/*               satisfies the conditions specified in MPEGFile().  If an MPEGAV       */
/*               directory was found in the root we assume that all files of the       */
/*               pattern MUSICn/DAT or AVSEQn/DAT in MPEGAV are MPEGs.  An MPEGAV      */
/*               directory contains only MUSICn/DAT or AVSEQn/DAT files.  It doesn't   */
/*               contain both, nor does it contain any other type of filename.         */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern char * GetNumbrOfMPEGFiles(int *MPEGs)
{
 _kernel_oserror *err = NULL;
 char *fnames = NULL;
 char *MPEG_fnames = NULL;
 char * index = NULL;
 int i;
 int total_file_count = 0;
 char m_wildcard[30] = "CDFS:$.MPEGAV.MUSIC*/DAT";
 char a_wildcard[30] = "CDFS:$.MPEGAV.AVSEQ*/DAT";
 char search_pattern[30];
 FILE *fptr = NULL;
 int j,m;
 #define MAX_LEN 50

   #ifdef FN_TRACE
     puts("GetNumbrOfMPEGFiles()");
   #endif

   *MPEGs = 0;

   if ((fptr = fopen(m_wildcard,"r")) != NULL)
   {
         fclose(fptr);
         sprintf(search_pattern,m_wildcard);
   } else if ((fptr = fopen(a_wildcard,"r")) != NULL)
          {
               fclose(fptr);
               sprintf(search_pattern,a_wildcard);
          }
          else
               sprintf(search_pattern,"CDFS:$.*");

   if ((total_file_count = GetNumbrOfFiles(search_pattern)) == 0)
        ErrorHandler(__FILE__,__LINE__,"GetNumbrOfMPEGFiles()",0,"No files found.",FATAL);

   if ((MPEG_fnames = calloc(total_file_count,MAX_LEN)) == NULL)
        ErrorHandler(__FILE__,__LINE__,"GetNumbrOfMPEGFiles()",0,"Insufficient Memory",
        FATAL);

   if (strncmp(search_pattern,"CDFS:$.MPEGAV",strlen("CDFS:$.MPEGAV")) != NULL)
   {
    /* If the search pattern is "CDFS:$." then discover which root files are MPEGs ... */

       if ((fnames = calloc(total_file_count+1,MAX_LEN)) == NULL)
            ErrorHandler(__FILE__,__LINE__,"GetNumbrOfMPEGFiles()",0,
            "Insufficient Memory",FATAL);

       if ((err = swi(OS_GBPB,R0,9,R1,"CDFS:$",R2,fnames,R3,total_file_count,R4,0,R5,
            total_file_count * MAX_LEN,R6,0,END)) != NULL)
       {
            free(fnames);
            ErrorHandler(__FILE__,__LINE__,"NTSCVideoCd()",err->errnum,err->errmess,
            FATAL);
       }

       i = 0;
       index = fnames;
       j = 0;
       m = 0;
       while (i < total_file_count)
       {
              if (MPEGFile(index) == TRUE)
              {
                  *MPEGs = (*MPEGs) + 1;
                  j = 0;
                  while ((index[j]) != '\0')
                  {
                         MPEG_fnames[m] = index[j];
                         j++;
                         m++;
                  }
                  MPEG_fnames[m] = '\0';
                  m++;
              }
              index = index + (strlen(index)+1);
              i++;
       }
       free (fnames);
   }
   else
   {
    /* An MPEGAV directory was found in the root.                                     */

       *MPEGs = total_file_count;
       if ((err = swi(OS_GBPB,R0,9,R1,"CDFS:$.MPEGAV",R2,MPEG_fnames,R3,total_file_count,
            R4,0,R5,total_file_count * MAX_LEN,R6,0,END)) != NULL)
            ErrorHandler(__FILE__,__LINE__,"NTSCVideoCd()",err->errnum,err->errmess,
            FATAL);
   }

   return MPEG_fnames;
   #undef MAX_LEN
}


/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION: GetNumbrOfFiles()                                                        */
/*  BEHAVIOUR: Counts the number of files which match the specified search pattern.    */
/*  REQUIRES: - 'sp', which is the search pattern.                                     */
/*  RETURNS:  - 'file_cnt', which is the total number of matches found.  'file_cnt'    */
/*               does not include sub-directories.                                     */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int GetNumbrOfFiles(char *sp)
{
 _kernel_oserror *err = NULL;
 int file_cnt = 0;

   #ifdef FN_TRACE
     puts("GetNumbrOfFiles()");
   #endif

   if ((err = swi(OS_FSControl,R0,28,R1,sp,R3,0,OUT,R3,&file_cnt,END)) != NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"GetNumbrOfFiles()",err->errnum,err->errmess,
        WARNING);
   }

   #ifdef DEVELOPMENT
     printf("GetNumbrOfFiles():- file count: %d\n",file_cnt);
   #endif

   return file_cnt;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  MPEGFile()                                                              */
/*  BEHAVIOUR: Tries to determine whether or not the specified file is an MPEG file.   */
/*             The obvious method of searching thru. each file for MPEG codes would    */
/*             probably take too long.  (This method should be tested at a later stage */
/*             though).                                                                */
/*  REQUIRES:  a single filename.                                                      */
/*  RETURNS:   TRUE if thought to be an MPEG clip, FALSE otherwise.                    */
/*  ASSUMPTIONS: If able to read a file of the pattern type CFS:$.MPEGAV.MUSICn/DAT or */
/*               CDFS:$.MPEGAV.AVSEQn/DAT, the specified file is an MPEG clip.  ('n'   */
/*               represents wildcard).                                                 */
/*                                                                                     */
/*               Otherwise, the specified file is in the root.  If larger than approx  */
/*               400M and if it ends in "/RTF" and if the name of the file also        */
/*               includes at least one digit value, it is an MPEG clip.                */
/*                                                                                     */
/*               (Note:- there are other "/RTF" files which are big and which          */
/*                therefore appear to be MPEGs at first sight, but they are not always */
/*                MPEG clips).                                                         */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int MPEGFile(char *p)
{
 #define BIG 400000000 /* bytes (i.e. about 400M) */
 int handle = 0;
 int MPEG = FALSE;
 int len = 0;
 int i;
 char *fname = NULL;
 char m_wildcard[30] = "CDFS:$.MPEGAV.MUSIC*/DAT";
 char a_wildcard[30] = "CDFS:$.MPEGAV.AVSEQ*/DAT";
 _kernel_oserror *err = NULL;
 FILE *fptr = NULL;

   #ifdef FN_TRACE
     puts("MPEGFile()");
   #endif

   if (((fptr = fopen(m_wildcard,"r")) != NULL) ||
       ((fptr = fopen(a_wildcard,"r")) != NULL))
   {
         fclose(fptr);
         MPEG = TRUE;
   }
   else {

            if ((fname = calloc(strlen(p)+strlen("CDFS:$.")+1,sizeof(char))) == NULL)
            {
                 ErrorHandler(__FILE__,__LINE__,"MPEGFile()",0,"Insufficient Memory.",
                 WARNING);
                 return FALSE;
            }

            sprintf(fname,"CDFS:$.%s",p);

            if ((err = swi(OS_Find,R0,0x41,R1,fname,OUT,R0,&handle,END)) != NULL)
            {
                 ErrorHandler(__FILE__,__LINE__,"MPEGFile()",err->errnum,err->errmess,
                 WARNING);
                 free(fname);
                 return FALSE;
            }

            if (handle == 0)
            {
                ErrorHandler(__FILE__,__LINE__,"MPEGFile()",0,
                "File handle returned as zero.",WARNING);
                #ifdef DEVELOPMENT
                  printf("\nTried to read file %s.\n",fname);
                #endif
                free(fname);
                return FALSE;
            }

            if ((err = swi(OS_File,R0,17,R1,fname,OUT,R4,&len,END)) != NULL)
            {
                 ErrorHandler(__FILE__,__LINE__,"MPEGFile()",err->errnum,err->errmess,
                 WARNING);
                 if ((err = swi(OS_Find,R0,0,R1,handle,END)) != NULL)
                      ErrorHandler(__FILE__,__LINE__,"MPEGFile()",err->errnum,
                      err->errmess,WARNING);
                 free(fname);
                 return FALSE;
            }

            if ((len >= BIG) &&
                (strcmp(fname+strlen(fname)-strlen("/RTF"),"/RTF") == NULL))
            {
                 i = 0;
                 while ((MPEG == FALSE) && (i < strlen(fname)))
                 {
                         if (isdigit(fname[i]))
                         {
                             MPEG = TRUE;
                             #ifdef DEVELOPMENT
                               printf("MPEGFile(): MPEG file detected - %s\n",fname);
                             #endif
                         }
                         i++;
                 }
            }

            if ((err = swi(OS_Find,R0,0,R1,handle,END)) != NULL)
                 ErrorHandler(__FILE__,__LINE__,"MPEGFile()",err->errnum,err->errmess,
                 WARNING);

            free(fname);
        }

   return MPEG;

 #undef BIG

}

