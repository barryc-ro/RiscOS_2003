/*=====================================================================================*/
/*                                                                                     */
/*  FILE:         !VideoCD.c.Pointer                                                   */
/*  DESCRIPTION:  Routines for handling the selection screen pointer.  Not applicable  */
/*                if only a single MPEG clip was found on the loaded cd.               */
/*  AUTHOR:       srose@omi.co.uk                                                      */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/*=====================================================================================*/

#undef GLOBALS__
#include "Common.h"
#include "Display.h"
#include "Pointer.h"
#include "stdlib.h"
#include "swicall.h"

static int xres,yres,xeig,yeig;

static void MovePointerToEject(int selection,struct coords *pointer_positions,int pwidth,
       int pheight,char *rubout_buffer,char *pointer_sprarea,int MPEG_file_count,
       char *title_list,char ch);

static void ScreenDimensions(void);

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  InitPointer()                                                           */
/*  BEHAVIOUR: Loads selection screen pointer sprite into memory and returns it's      */
/*             pixel width and height.                                                 */
/*  REQUIRES:  'ptr_sprarea', which is the address of a pointer to the sprite area.    */
/*             'ptr_sprsize', which is the total size of the sprite area.              */
/*             'width', which is the sprite width, similarly 'height'.                 */
/*  RETURNS:   'ptr_sprarea','ptr_sprsize','width', and 'height' as described above.   */
/*             'rubout_buffer', which is an allocated area of memory used for rubbing  */
/*              out the pointer when altering it's screen position.                    */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern char * InitPointer(char **ptr_sprarea,int *ptr_sprsize,int *width,int *height)
{ int *ptr = NULL;
  char *rubout_buffer = NULL;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE
     puts("InitPointer()");
   #endif

   ScreenDimensions();

   *ptr_sprsize = CheckSpriteExists("VideoCD:Arrow");

   /* Arrow sprite file contains all the info described on p. 1-749 of the PRM, except */
   /* for bytes 0 to 3 of the sprite area.  Extension words are null and there is no   */
   /* palette data.  Hence add 4 bytes to the spritesize for adding on bytes 0-3 in    */
   /* the control block.                                                               */
      *ptr_sprsize = *ptr_sprsize + 4;

   *ptr_sprarea = malloc(*ptr_sprsize);
   if (*ptr_sprarea == NULL)
       ErrorHandler(__FILE__,__LINE__,"InitPointer()",0,"Insufficient Memory.",
       FATAL);

   /* Initialise sprite area.                                                          */
      ptr = (int *)(*ptr_sprarea);
      *ptr = *ptr_sprsize;
      *(ptr + 2) = 16;
      if ((err = swi(OS_SpriteOp,R0,256+9,R1,*ptr_sprarea,END)) != NULL)
           ErrorHandler(__FILE__,__LINE__,"InitPointer()",err->errnum,err->errmess,
           FATAL);

   /* Load sprite into memory.                                                         */
      if ((err = swi(OS_SpriteOp,R0,256+10,R1,*ptr_sprarea,R2,"VideoCD:Arrow",END))
           != NULL)
           ErrorHandler(__FILE__,__LINE__,"InitPointer()",err->errnum,err->errmess,
           FATAL);

   /* Get pointer width and height.                                                    */
   if ((err = swi(OS_SpriteOp,R0,512+40,R1,*ptr_sprarea,R2,(int)(*ptr_sprarea)+16,OUT,R3,
        &(*width),R4,&(*height),END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"InitPointer()",err->errnum,err->errmess,FATAL);

   /* Allocate memory for rubout buffer used when the pointer position is altered.     */
      if ((rubout_buffer = malloc((*width) * (*height))) == NULL)
           ErrorHandler(__FILE__,__LINE__,"InitPointer()",0,"Insufficient Memory.",FATAL);

      return rubout_buffer;

}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  CreatePointerCoords()                                                   */
/*  BEHAVIOUR: Uses currently existing text positions to build a list of positions     */
/*             which are valid pointer display locations.                              */
/*  REQUIRES:  - 'title_list', which tells us whether or not any titles were found and */
/*                therefore whether or not pointer coords should be based on a         */
/*                titles scrolling or non scrolling numbers only display.              */
/*             - 'MPEG_file_count', which helps to determine how many pointer coords   */
/*                we need to set up.                                                   */
/*             - 'text_positions', which are used to work out pointer positions.       */
/*  RETURNS:   - 'pointer_coords', which points to a list of on-screen pointer         */
/*                positions.                                                           */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern struct coords *CreatePointerCoords(char *title_list,int MPEG_file_count,
                      struct coords *text_positions)
{
 int i;
 struct coords *pointer_coords = NULL;

   #ifdef FN_TRACE
     puts("CreatePointerCoords()");
   #endif

   ScreenDimensions();

   if (title_list == NULL)
   {
       if ((pointer_coords = calloc((MPEG_file_count + 1),sizeof(struct coords)))
            == NULL)
            ErrorHandler(__FILE__,__LINE__,"CreatePointerCoords()",0,
            "Insufficient Memory.",FATAL);

       for (i = 0; i <= MPEG_file_count; i++)
       {
            pointer_coords[i].x = (text_positions[i].x) - 50;
            pointer_coords[i].y = text_positions[i].y;
       }
   }
   else
   {
       if ((pointer_coords = malloc(8 * sizeof(struct coords))) == NULL)
            ErrorHandler(__FILE__,__LINE__,"CreatePointerCoords()",0,
            "Insufficient Memory.",FATAL);

       for (i = 0; i <= 6; i++)
       {
            pointer_coords[i].x = (text_positions[i].x) - 50;
            pointer_coords[i].y = text_positions[i].y;
       }
       pointer_coords[7].x = xres - (xres/4) - 3;
       pointer_coords[7].y = yres/4 - 7;
   }

   return pointer_coords;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  SaveUnderPointer()                                                      */
/*  BEHAVIOUR: Saves background region beneath selection screen pointer for use when   */
/*             erasing the pointer later on.                                           */
/*  REQUIRES:  - 'item_no', which reflects the pointer position at which to do the     */
/*                background save.                                                     */
/*             - 'coord_table', which is a list of valid on-screen pointer positions.  */
/*             - 'MPEG_file_count', which is the number of MPEG files found on the cd. */
/*             - 'buffer', which is an allocated area of memory used for storing the   */
/*                background image.                                                    */
/*             - 'width', which is the width of the area to save (in pixels).          */
/*             - 'height', which is the height of the area to save (in pixels).        */
/*             - 'title_list', which is a NULL separator list of titles found, or NULL */
/*                if no titles were found.                                             */
/*             - 'ch', which is the most recent button press.                          */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void SaveUnderPointer(int item_no,struct coords *coord_table,
                             int MPEG_file_count,char *buffer,int width,int height,
                             char *title_list,char ch)
{
 int x,y,i,j;
 int vdublk[2];
 int scrstart;
 int linelen;
 char *src_ptr = NULL;
 char *dest_ptr = NULL;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE
     puts("SaveUnderPointer()");
   #endif

   ScreenDimensions();

   if (title_list != NULL)
   {
       if (item_no < 1)
           item_no = 1;
       else if ((item_no > 7) && (item_no != 8))
                item_no = 7;
            else if ((item_no == 8) && (ch != RGHT_ARROW) && (ch != DOWN_RIGHT) &&
                     (ch != BLUE))
                      item_no = 7;
   }
   else
   {
       if (item_no < 1)
           item_no = MPEG_file_count;
       else if (item_no > MPEG_file_count + 1) /* "+ 1 to allow for the Eject option.  */
                item_no = 1;
   }

   vdublk[0] = 148;
   vdublk[1] = -1;
   if ((err = swi(OS_ReadVduVariables,R0,vdublk,R1,vdublk,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"RuboutInit()",err->errnum,err->errmess,
        FATAL);
   scrstart = vdublk[0];

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,6,OUT,R2,&linelen,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"RuboutInit()",err->errnum,err->errmess,FATAL);

   x = coord_table[item_no-1].x;
   y = coord_table[item_no-1].y;
   y = y + height;

   src_ptr = (char *) (scrstart + (linelen * (yres - y)) + (x * 2));
   dest_ptr = (char *)buffer;

   for (j = 0; j < height; j++)
   {
        for (i = 0; i < width; *dest_ptr++ = *src_ptr++, i++);
        src_ptr += (linelen - width);
   }

}


/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  ShowPointer()                                                           */
/*  BEHAVIOUR: Shows the selection screen pointer at the specified position.           */
/*  REQUIRES:  - 'new_item_no', which is the new display position (item no starts at   */
/*                1.  If scroll type display, last item number is 8, 8 being the eject */
/*                selection position).                                                 */
/*             - 'ptr_sprarea', which points to the base of the pointer sprite area.   */
/*             - 'coord_table', which contains valid pointer display positions.        */
/*             - 'MPEG_file_count', which is the number of MPEG clips found on the cd. */
/*             - 'title_list', which is a null separator list of titles, or NULL if    */
/*                there aren't any titles to display.                                  */
/*             - 'ch', which is the most recent button press.                          */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern int ShowPointer(int new_item_no,char *ptr_sprarea,struct coords *coord_table,
                       int MPEG_file_count,char *title_list,char ch)
{
 _kernel_oserror *err = NULL;
 int pointer_width;
 int pointer_height;
 struct coords new_screen_pos;

   #ifdef FN_TRACE
     puts("ShowPointer()");
   #endif

   if (title_list != NULL)
   {
       if (new_item_no < 1)
           new_item_no = 1;
       else if ((new_item_no > 7) && (new_item_no != 8))
                new_item_no = 7;
            else if ((new_item_no == 8) && (ch != RGHT_ARROW) && (ch != DOWN_RIGHT) &&
                     (ch != BLUE))
                      new_item_no = 7;
   }
   else
   {
       if (new_item_no < 1)
           new_item_no = MPEG_file_count;
       else if (new_item_no > MPEG_file_count + 1)  /* " + 1 for the Eject option.    */
                new_item_no = 1;
   }

   new_screen_pos.x = coord_table[new_item_no-1].x;
   new_screen_pos.y = coord_table[new_item_no-1].y;

   if ((err = swi(OS_SpriteOp,R0,512+40,R1,ptr_sprarea,R2,(int)ptr_sprarea+16,OUT,R3,
        &pointer_width,R4,&pointer_height,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"ShowPointer()",err->errnum,err->errmess,FATAL);

   if (((new_screen_pos.x + pointer_width) > xres) ||
       ((new_screen_pos.y + pointer_height) > yres))
         ErrorHandler(__FILE__,__LINE__,"ShowPointer()",0,"Pointer off screen.",FATAL);

   if ((err = swi(OS_Plot,R0,4,R1,(new_screen_pos.x)<<xeig,R2,(new_screen_pos.y)<<yeig,
        END))!=NULL)
        ErrorHandler(__FILE__,__LINE__,"ShowPointer()",err->errnum,err->errmess,FATAL);

   if ((err = swi(OS_SpriteOp,R0,512+28,R1,ptr_sprarea,R2,(int)ptr_sprarea+16,R5,0x08,
        END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"ShowPointer()",err->errnum,err->errmess,FATAL);


   return new_item_no;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  MovePointer()                                                           */
/*  BEHAVIOUR: Moves the selection screen pointer to the specified position.           */
/*  REQUIRES:  - 'direction', which is the direction in which to move (UP_ARROW,       */
/*                DOWN_ARROW, RIGHT_ARROW, DOWN_RIGHT, or BLUE, the latter 3 being     */
/*                for eject).  RIGHT_ARROW, DOWN_RIGHT and BLUE should not be used if  */
/*                screen type is non-scrolling, i.e. if there are no titles.           */
/*             - 'position', which is the position we want to move to (starts from 1). */
/*             - 'pointer_positions', which is a list of valid pointer display coords. */
/*             - 'pwdith' and 'pheight', which is the pixel width and height of the    */
/*                pointer sprite.                                                      */
/*             - 'rubout_buffer', which contains the background for rubbing out the    */
/*                pointer in it's current position.                                    */
/*             - 'MPEG_file_count', which is the number of MPEG clips found on the cd. */
/*             - 'title_list', which is a null separator list of titles, or NULL if no */
/*                titles were found.                                                   */
/*             - 'ch', which is the most recent button press.                          */
/*             - 'pointer_sprarea', which points to the base of the pointer sprite     */
/*                 area.                                                               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void MovePointer(int direction,int *position,struct coords *pointer_positions,
       int pwidth,int pheight,char *rubout_buffer,int MPEG_file_count,char *title_list,
       char ch,char *pointer_sprarea)
{

   #ifdef FN_TRACE
     puts("MovePointer()");
   #endif

   switch (direction)
   {
     case UP_ARROW :  Rubout(*position,pointer_positions,pwidth,pheight,rubout_buffer);

                      SaveUnderPointer((*position) - 1,pointer_positions,MPEG_file_count,
                      rubout_buffer,pwidth,pheight,title_list,UP_ARROW);

                      *position = ShowPointer((*position) - 1,
                      pointer_sprarea,pointer_positions,MPEG_file_count,
                      title_list,UP_ARROW);
                      break;

     case DOWN_ARROW: Rubout(*position,pointer_positions,pwidth,pheight,rubout_buffer);

                      SaveUnderPointer((*position)+1,pointer_positions,MPEG_file_count,
                      rubout_buffer,pwidth,pheight,title_list,DOWN_ARROW);

                      *position = ShowPointer((*position)+1,pointer_sprarea,
                      pointer_positions,MPEG_file_count,
                      title_list,DOWN_ARROW);
                      break;

     case RGHT_ARROW: MovePointerToEject(*position,pointer_positions,pwidth,pheight,
                      rubout_buffer,pointer_sprarea,MPEG_file_count,title_list,
                      RGHT_ARROW);
                      break;

     case DOWN_RIGHT: MovePointerToEject(*position,pointer_positions,pwidth,pheight,
                      rubout_buffer,pointer_sprarea,MPEG_file_count,title_list,
                      DOWN_RIGHT);
                      break;

     case BLUE:       MovePointerToEject(*position,pointer_positions,pwidth,pheight,
                      rubout_buffer,pointer_sprarea,MPEG_file_count,title_list,BLUE);
                      break;

     default :        ErrorHandler(__FILE__,__LINE__,"MovePointer()",0,
                      "Unrecognized arrow direction request.",WARNING);
   };

}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  MovePointerToEject()                                                    */
/*  BEHAVIOUR: Positions the pointer next to the Eject option on the selection screen. */
/*  REQUIRES: - 'selection', which is the currently selected item (starting from 1).   */
/*            - 'pointer_positions', which contains valid pointer display pixel coords.*/
/*            - 'pwidth' and 'pheight', which is the pixel width and height of the     */
/*               pointer sprite.                                                       */
/*            - 'rubout_buffer', which contains the background used for erasing the    */
/*               pointer in it's current position.                                     */
/*            - 'pointer_sprarea', which points to the base of the pointer sprite area */
/*            - 'MPEG_file_count', which is the no. of MPEG clips found on the cd.     */
/*            - 'title_list', which is null if no titles, otherwise it's a null        */
/*               separator list of titles.                                             */
/*            - 'ch', which is the most recent button press.                           */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static void MovePointerToEject(int selection,struct coords *pointer_positions,int pwidth,
       int pheight,char *rubout_buffer,char *pointer_sprarea,int MPEG_file_count,
       char *title_list,char ch)
{
   #ifdef FN_TRACE
     puts("MovePointerToEject()");
   #endif

   Rubout(selection,pointer_positions,pwidth,pheight,rubout_buffer);

   if (title_list != NULL)
       ShowPointer(8,pointer_sprarea,pointer_positions,MPEG_file_count,title_list,ch);
   else
       ShowPointer(MPEG_file_count+1,pointer_sprarea,pointer_positions,MPEG_file_count,
                   title_list,ch);
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  ScreenDimensions()                                                      */
/*  BEHAVIOUR: Sets 'xres' and 'yres', these being the current screen pixel width and  */
/*             height.  Also sets 'xeig' and 'yeig', which are the number of bits by   */
/*             which an x or y coordinate must be shifted right to convert to screen   */
/*             pixels.                                                                 */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static void ScreenDimensions(void)
{
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE
     puts("ScreenDimensions()");
   #endif

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,11,OUT,R2,&xres,END))!=NULL)
        ErrorHandler(__FILE__,__LINE__,"ScreenDimensions()",err->errnum,err->errmess,
        FATAL);

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,12,OUT,R2,&yres,END))!=NULL)
        ErrorHandler(__FILE__,__LINE__,"ScreenDimensions()",err->errnum,err->errmess,
        FATAL);

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,4,OUT,R2,&xeig,END))!=NULL)
        ErrorHandler(__FILE__,__LINE__,"ScreenDimensions()",err->errnum,err->errmess,
        FATAL);

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,5,OUT,R2,&yeig,END))!=NULL)
        ErrorHandler(__FILE__,__LINE__,"ScreenDimensions()",err->errnum,err->errmess,
        FATAL);

   xres++; yres++;
}
