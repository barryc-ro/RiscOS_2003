/*=====================================================================================*/
/*                                                                                     */
/*  FILE: !AudioCD.h.messages                                                          */
/*  DESCRIPTION:   Message handling routines for communication with !cd.               */
/*  AUTHOR: srose@omi.co.uk                                                            */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/*=====================================================================================*/

/*-------------------------------------------------------------------------------------*/
/*                       !cd's MESSAGE HANDLING PROTOCOL                               */
/*-------------------------------------------------------------------------------------*/

/*

Four message types exist in !cd's world.  These messages pass between !cd itself, and
the other cd task / application.  (At most, !cd and one other task is active.  At least,
only !cd is active in which case the machine is in an idle state waiting for the user to
insert a cd).  The four message types are as follows.  In terms of coding, they are
message numbers (see macro definitions further below), also referred to as message
actions on p.3-197 of the PRM.  Apart from TASK_HANDLE, none of the messages contain
data beyond byte 20 of the message block (refer PRM p.3-197).

Messages TO !cd:-

(Action Number)

TASK_ACTIVE       Let !cd know that I am a new task starting up.

TASK_DEAD         Let !cd know that I am about to die.



Messages FROM !cd:-

(Action Number)

TASK_HANDLE       !cd broadcasts its task handle, thus allowing for direct
                  communication as mentioned above under TASK_HANDLE_ACK.

TASK_DIE          !cd tells the other task to die.


A task launched by !cd should obey the following rules:

1.  Send !cd a TASK_ACTIVE message when starting up.

2.  Wait for !cd to send it's task handle if you wish to communicate directly with !cd
    rather than on a broadcast basis.

3.  Tell !cd when I am about to die.  Do this by sending a TASK_DEAD message.

4.  If a TASK_DIE message is received from !cd, do number 3 above.

5.  All messages are user messages (event code 17 on p.3-116 of the PRM).

*/


/*-------------------------------------------------------------------------------------*/
/*                                  MACRO DEFINITIONS                                  */
/*-------------------------------------------------------------------------------------*/

#define TASK_ACTIVE 0x4b680   /* Message numbers (also referred to as action numbers). */
#define TASK_DEAD 0x4b681     /* As mentioned on p. 4-546 of the PRM, Acorn must       */
#define TASK_DIE 0x4b682      /* allocate these numbers.  This has now been done.      */
#define TASK_HANDLE 0x4b683   /* These numbers have been officially allocated.         */

#ifdef DECLARE__
int msg_list[4] =      /* List of messages we're interested in.  This is used by       */
  {TASK_ACTIVE,        /* Wimp_Initialise to specify which messages are important, and */
   TASK_DEAD,          /* then in the message action field of the user message block   */
   TASK_DIE,           /* used by Wimp_SendMessage.                                    */
   TASK_HANDLE};
#else
  extern int msg_list[4];
#endif

#define TASK_ACTIVE_INDEX 0        /* Allows the user to specify for example           */
#define TASK_DEAD_INDEX 1          /* msg_list[TASK_HANDLE_INDEX] rather than having   */
#define TASK_DIE_INDEX 2           /* to look it up and write msg_list[3].             */
#define TASK_HANDLE_INDEX 3

#define ORIGINAL_MESSAGE 0         /* Message codes used in message swi calls.         */
#define USER_MESSAGE 17


/*-------------------------------------------------------------------------------------*/
/*                          EXTERNAL FUNCTION PROTOTYPES                               */
/*-------------------------------------------------------------------------------------*/

extern void SendMessage(int action,int destination);
/*
   Sends a message of type 'action' to the specified destination.  In !cd's world, this
   translates to send !cd a TASK_ACTIVE message (I'm a new task just starting up), or
   send !cd a TASK_DEAD message (I'm about to die).
   REQUIRES:  - 'action', which is TASK_ACTIVE or TASK_DEAD, as mentioned above.
              - 'destination', which is either !cd's task handle, or which has the
                value BROADCAST.  (A broadcast goes to the sender as well as to all
                other tasks.  !AudioCD ignores messages it receives from itself).
*/

extern void ReadMessage(void);

/*
   Reads messages sent from !cd.  Ignores broadcast messages sent from itself.
   Expected messages from !cd include TASK_HANDLE (!cd's task handle) and TASK_DIE
   (!cd has told me to die).
*/
