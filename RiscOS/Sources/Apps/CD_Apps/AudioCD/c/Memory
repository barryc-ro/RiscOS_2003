/*=====================================================================================*/
/*                                                                                     */
/*  FILE:  !AudioCD.c.Memory                                                           */
/*  DESCRIPTION:   Shows current memory allocation.  Used for debugging / development  */
/*                 purposes only.  This file should not be included in the final       */
/*                 release.                                                            */
/*  AUTHOR:  srose@omi.co.uk                                                           */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/*=====================================================================================*/

#undef GLOBALS__

/*-------------------------------------------------------------------------------------*/
/*                       Inclusion of !AudioCD header files.                           */
/*-------------------------------------------------------------------------------------*/

#include "Common.h"


/*-------------------------------------------------------------------------------------*/
/*                       Inclusion of standard C header files.                         */
/*-------------------------------------------------------------------------------------*/

#include "stdio.h"

/*-------------------------------------------------------------------------------------*/
/*   Inclusion of SWI interface header.  Allows constructs of the type                 */
/*   err = swi(Wimp_Initialise,R0,310,R1,0x4B534154,R2,NULL,R3,msg_list,OUT,R1,        */
/*   &cd_task_handle,END);                                                             */
/*-------------------------------------------------------------------------------------*/

#include "swicall.h"

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:   ShowMem()                                                              */
/*  BEHAVIOUR:  Shows current memory allocation.  Used for debugging / development     */
/*              purposes only.                                                         */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void ShowMem(char *file,int line)
{
  int area = 0;
  int size = 0;
  char *description = NULL;
  _kernel_oserror *err = NULL;

   printf("\n\n");

   printf("File: %s\n",file);
   printf("Line: %d\n",line);

   /* This call allows us to find out what dynamic areas are defined.  -1 is passed on */
   /* entry to start the enumeration.                                                  */

   if ((err = swi(OS_DynamicArea,R0,3,R1,-1,OUT,R1,&area,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"ShowMem()",err->errnum,err->errmess,WARNING__);

   while (area != -1)
   {
      /* Return information on the current dynamic memory area.                        */

      if ((err = swi(OS_DynamicArea,R0,2,R1,area,OUT,R2,&size,R8,&description,END))
           != NULL)
              ErrorHandler(__FILE__,__LINE__,"ShowMem()",err->errnum,err->errmess,
              WARNING__);

      printf("%s : %d\n",description,size);

      /* Get the next dynamic memory area.                                             */

      if ((err = swi(OS_DynamicArea,R0,3,R1,area,OUT,R1,&area,END)) != NULL)
           ErrorHandler(__FILE__,__LINE__,"ShowMem()",err->errnum,err->errmess,WARNING__);

   }

   if ((err = swi(OS_GetEnv,OUT,R1,&size,END)) != NULL)
        ErrorHandler(__FILE__,__LINE__,"ShowMem()",err->errnum,err->errmess,WARNING__);

   printf("Application size : %d\n\n",(size - 0x8000)/1024);

}
