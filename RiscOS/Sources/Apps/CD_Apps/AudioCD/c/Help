/*=====================================================================================*/
/*                                                                                     */
/*   FILE:   !AudioCD.c.Help                                                           */
/*   BEHAVIOUR: Plots help information onto the screen.  Plotting and anti-twittering  */
/*              can be adjusted to allow for lack of memory if necessary by supplying  */
/*              a small sized JPEG image and defining LOW_MEM (see below).             */
/*   AUTHOR:  srose@omi.co.uk                                                          */
/*   MODIFICATION HISTORY:                                                             */
/*     Date         Name                Description                                    */
/*     ----         ----                -----------                                    */
/*                                                                                     */
/*=====================================================================================*/

#undef GLOBALS__
#include "Common.h"
#include "Help.h"
#include "Initialise.h"
#include "Display.h"
#include "ButtonOps.h"
#include "swicall.h"

#ifdef DEVELOPMENT__
 #include "stdio.h"
#endif

#ifdef MEMORY_TRACE__
 #include "Memory.h"
#endif

static int xres,yres;

static int ReadJPEGDimensions(int *jpeg_width,int *jpeg_hght,char *fname);
static char * CreateBlankSprite(int width,int hght,int *area_no);
static int LoadJPEGIntoSpriteArea(int width,int hght,char *jpegfile,int area_no,
       char *sprarea);
static int DisplaySprite(char *sprarea,int area_no,int spr_width,int spr_hght);
static void AntiTwitter(char *sprarea);
static void LowMemAntiTwitter(void);
static void FreeMemory(int area_no);
static void RestoreButtonStates(int paused);
static int ScreenDimensions(void);

#define OLD_TWITTER   /* OLD_TWITTER means that the old twitter module will be used.   */
                      /* NEW_TWITTER means that the new twitter module will be used.   */
                      /* Undefining OLD_TWITTER or NEW_TWITTER will result in no       */
                      /* twitter being applied.                                        */
                      /* Currently, the new twitter module is apparantly working, but  */
                      /* had no effect when used from within !AudioCD.                 */

#undef LOW_MEM        /* Undefined :- JPEG is scaled up to full screen size prior to   */
                      /*              screen plotting.  This allows anti-twitter to be */
                      /*              applied before plotting the sprite on the screen.*/
                      /* Defined   :- JPEG consumes less space in memory (assuming     */
                      /*              user has supplied a JPEG less than screen size). */
                      /*              Drawback - user will see anti twitter being      */
                      /*              applied on screen.                               */

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Help()                                                                  */
/*  BEHAVIOUR: Displays help information in the form of handset controls.              */
/*  RETURNS:   'OFF' to indicate failure, ON to indicate success.                      */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern int Help(int toggle,int paused)
{
 char *sprarea = NULL;
 int jpeg_width,jpeg_hght;
 char fname[] = "AudioCD:Help";
 int area_no;
 int help_state;
 extern int current_left,current_right;

   #ifdef FN_TRACE__
     puts("Help()");
   #endif

   switch (toggle)
   {
      case ON__ : if ((ScreenDimensions()) == -1)
                     return OFF__;

                if ((ReadJPEGDimensions(&jpeg_width,&jpeg_hght,fname)) == -1)
                     return OFF__;

                if ((sprarea = CreateBlankSprite(jpeg_width,jpeg_hght,&area_no)) == NULL)
                     return OFF__;

                if ((LoadJPEGIntoSpriteArea(jpeg_width,jpeg_hght,fname,area_no,sprarea))
                     == -1)
                     return OFF__;

                if ((DisplaySprite(sprarea,area_no,jpeg_width,jpeg_hght)) == -1)
                     return OFF__;

                FreeMemory(area_no);

                help_state = ON__;

                break;

     case OFF__ : ScreenDisplay();

                help_state = OFF__;

                DisplayText(current_left,current_right,help_state,TRUE__);

                RestoreButtonStates(paused);

                break;

     default:   ErrorHandler(__FILE__,__LINE__,"Help()",0,"Invalid toggle value.",
                             WARNING__);

   }

   return help_state;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  ReadJPEGDimensions()                                                    */
/*  BEHAVIOUR: Reads height and width of user supplied JPEG Help image file.           */
/*  REQUIRES:  - 'jpeg_width' and 'jpeg_hght' which will be returned as width and      */
/*                height of the specified JPEG image.                                  */
/*             - 'fname', which is the filename of the JPEG image.                     */
/*  RETURNS:   -1 to indicate failure, 0 to indicate success.                          */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int ReadJPEGDimensions(int *jpeg_width,int *jpeg_hght,char *fname)
{
 _kernel_oserror *err = NULL;
 #define JPEG_FileInfo 0x49981

   #ifdef FN_TRACE__
     puts("ReadJPEGDimensions()");
   #endif

   if ((err = swi(JPEG_FileInfo,R0,0,R1,fname,OUT,R2,&(*jpeg_width),R3,&(*jpeg_hght),
        END)) != NULL)
   {
         ErrorHandler(__FILE__,__LINE__,"ReadJPEGDimensions()",err->errnum,err->errmess,
         WARNING__);
         return -1;
   }

   #undef JPEG_FileInfo

   return 0;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  CreateBlankSprite()                                                     */
/*  BEHAVIOUR: Sets up a sprite area in memory for loading the JPEG into.  The sprite  */
/*             area will only be full screen size if LOW_MEM is not defined.           */
/*  REQUIRES:  - 'width' and 'hght', which is the width and height of the JPEG image.  */
/*             - 'area_no', which is the dynamic area number used for the sprite.      */
/*  RETURNS:   - 'sprarea' which is a pointer to the sprite area, or NULL to indicate  */
/*                failure.                                                             */
/*  PREREQUISITES: 'xres' and 'yres' must have been set.                               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static char * CreateBlankSprite(int width,int hght,int *area_no)
{
 int spritemode;
 char *sprarea = NULL;
 int sprsize;
 int check_size = 0;
 int check_base = 0;
 int check_max = 0;
 int *ptr;
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
     puts("CreateBlankSprite()");
   #endif

   /* Find out the current screen mode.  The sprite will be created in that mode.      */
   if ((err = swi(OS_ScreenMode,R0,1,OUT,R1,&spritemode,END)) != NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"CreateBlankSprite()",err->errnum,err->errmess,
        WARNING__);
        return NULL;
   }

   #ifdef LOW_MEM
     /* Don't scale up to screen size yet.  Scaling will be done later as part of the  */
     /* screen plotting process.                                                       */
        sprsize = (width*hght*2)+16+44;
   #else
     /* Scale up to screen size while reading the JPEG into the sprite area.           */
        sprsize = (xres*yres*2)+16+44;
        width = xres;
        hght = yres;
   #endif

   /* Create dynamic memory area.                                                      */
   if ((err = swi(OS_DynamicArea,R0,0,R1,-1,R2,sprsize,R3,-1,R4,0,R5,sprsize,R6,0,R7,0,
        R8,"Audio Help",OUT,R1,&(*area_no),R3,&sprarea,END))!=NULL)
   {
         ErrorHandler(__FILE__,__LINE__,"CreateBlankSprite()",err->errnum,err->errmess,
         WARNING__);
         return NULL;
   }

   #ifdef MEMORY_TRACE__
     ShowMem(__FILE__,__LINE__);
   #endif

   /* Check that it hasn't created a dynamic area of size zero, this being a known bug */
   /* in the past.                                                                     */

   if ((err = swi(OS_DynamicArea,R0,2,R1,*area_no,OUT,R2,&check_size,R3,&check_base,R5,
        &check_max,END))!=NULL)
   {
         ErrorHandler(__FILE__,__LINE__,"CreateBlankSprite()",err->errnum,err->errmess,
         WARNING__);
         FreeMemory(*area_no);
         return NULL;
   }

   if ((check_size < sprsize) || (check_base == 0) || (check_max < sprsize))
   {
        ErrorHandler(__FILE__,__LINE__,"CreateBlankSprite()",0,
          "Failed to properly create dynamic memory area for help sprite.",WARNING__);
        FreeMemory(*area_no);
        return NULL;
   }

   /* Populate the first and third words of the sprite area control block.             */
   ptr = (int *)sprarea;
   *ptr = sprsize;
   *(ptr + 2) = 16;   /* Byte offset to the sprite itself.                             */

   /* Initialise sprite area.                                                          */
   if ((err = swi(OS_SpriteOp,R0,512+9,R1,sprarea,END))!=NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"CreateBlankSprite()",err->errnum,err->errmess,
        WARNING__);
        FreeMemory(*area_no);
        return NULL;
   }

   /* Create the sprite.                                                               */
   if ((err = swi(OS_SpriteOp,R0,256+15,R1,sprarea,R2,"Audio Help",R3,0,R4,width,R5,
        hght,R6,spritemode,END)) != NULL)
   {
          ErrorHandler(__FILE__,__LINE__,"PrepareShadowSprite()",err->errnum,
          err->errmess,WARNING__);
          FreeMemory(*area_no);
          return NULL;
   }

   return sprarea;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  LoadJPEGIntoSpriteArea()                                                */
/*  BEHAVIOUR: Plot JPEG into sprite area.  If LOW_MEM is defined, the plot will be    */
/*             the same size as the JPEG in it's original form.  Otherwise, it will be */
/*             scaled up to screen size, allowing anti-twitter to be applied before    */
/*             plotting to screen afterwards.                                          */
/*  REQUIRES:  - 'width', which is the width of the user supplied JPEG image.          */
/*             - 'hght', which is the height of the user supplied JPEG image.          */
/*             - 'jpegfile', which is the filename of the JPEG image.                  */
/*             - 'area_no', which is the dynamic area number of the sprite area.       */
/*  RETURNS:   0 to indicate success, -1 to indicate failure.                          */
/*  PREREQUISITES: 'xres' and 'yres' must have been set.                               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int LoadJPEGIntoSpriteArea(int width,int hght,char *jpegfile,int area_no,
       char *sprarea)
{
 int *scale;
 int oldscb,oldsptr,oldsa;
 _kernel_oserror *err = NULL;
 #define JPEG_PlotFileScaled 0x49983

   #ifdef FN_TRACE__
     puts("LoadJPEGIntoSpriteArea()");
   #endif

   #ifdef LOW_MEM
     scale = 0;    /* Scale up later on when plotting sprite to screen memory, not     */
                   /* when loading JPEG image into sprite area.                        */
   #else
     if ((scale = malloc(16)) == NULL)
     {
          ErrorHandler(__FILE__,__LINE__,"LoadJPEGIntoSpriteArea()",0,
           "Insufficient Memory.",WARNING__);
          FreeMemory(area_no);
          return -1;
     }

     /* Scale factors.  PRM p. 1-752. (Pixels, not OS coords).                         */
     *scale = xres;
     *(scale + 1) = yres;
     *(scale + 2) = width;
     *(scale + 3) = hght;
   #endif

   /* Switch output to the sprite area.                                                */
   if ((err = swi(OS_SpriteOp,R0,512+60,R1,sprarea,R2,(int)sprarea + 16,R3,0,OUT,R1,
        &oldscb,R2,&oldsptr,R3,&oldsa,END))!=NULL)
   {
         ErrorHandler(__FILE__,__LINE__,"JPEGOverlay()",err->errnum,err->errmess,WARNING__);
         FreeMemory(area_no);
         #ifndef LOW_MEM
           free(scale);
         #endif
   }

   /* Plot JPEG onto sprite area.                                                      */
   if ((err = swi(JPEG_PlotFileScaled,R0,jpegfile,R1,0,R2,0,R3,scale,R4,0,END))
        !=NULL)
   {
          ErrorHandler(__FILE__,__LINE__,"LoadJPEGIntoSpriteArea()",err->errnum,
          err->errmess,WARNING__);
          FreeMemory(area_no);
          #ifndef LOW_MEM
            free(scale);
          #endif

         /* Turn output to the sprite area off.                                        */
         if ((err = swi(OS_SpriteOp,R0,256+60,R1,oldscb,R2,oldsptr,R3,oldsa,END))!=NULL)
              ErrorHandler(__FILE__,__LINE__,"JPEGOverlay()",err->errnum,err->errmess,
              WARNING__);

          return -1;
   }

   /* Turn output to the sprite area off.                                              */
   if ((err = swi(OS_SpriteOp,R0,256+60,R1,oldscb,R2,oldsptr,R3,oldsa,END))!=NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"JPEGOverlay()",err->errnum,err->errmess,WARNING__);
        FreeMemory(area_no);
        #ifndef LOW_MEM
          free(scale);
        #endif
   }

   #ifdef MEMORY_TRACE__
     ShowMem(__FILE__,__LINE__);
   #endif

   #ifdef LOW_MEM
     free(scale);
   #endif

   return 0;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  DisplaySprite()                                                         */
/*  BEHAVIOUR: Plots the specified sprite onto the screen.  If LOW_MEM is defined it   */
/*             won't yet have been scaled up to full screen size and will therefore    */
/*             also not yet have been anti-twittered, in which case scaling is         */
/*             performed as part of the plotting procedure, and anti-twitter is        */
/*             applied after this. Otherwise, the sprite will already be screen size   */
/*             and anti-twitter will be applied before plotting to the screen.         */
/*  REQUIRES:  - 'sprarea', which points to the sprite area containing the image.      */
/*             - 'area_no', which identifies the dynamic area containing the sprite.   */
/*             - 'spr_width' and 'spr_hght' which get used if LOW_MEM is defined.      */
/*  RETURNS:   0 to indicate success, -1 to indicate failure.                          */
/*  PREREQUISITES: 'xres' and 'yres' must have been set.                               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int DisplaySprite(char *sprarea,int area_no,int spr_width,int spr_hght)
{
 int *scale = 0;
 _kernel_oserror *err = NULL;
 #define STBFilter_FilterArea 0x84000

   #ifdef FN_TRACE__
     puts("DisplaySprite()");
   #endif

   #ifdef LOW_MEM
       if ((scale = malloc(16)) == NULL)
       {
            ErrorHandler(__FILE__,__LINE__,"DisplaySprite()",0,"Insufficient Memory.",
            WARNING__);
            FreeMemory(area_no);
            return -1;
       }
   #endif

   /* Scale factors.  PRM p. 1-752.  Pixels, not OS coords.                            */
   #ifdef LOW_MEM
       *scale = xres;
       *(scale + 1) = yres;
       *(scale + 2) = spr_width;
       *(scale + 3) = spr_hght;
   #endif

   #ifndef LOW_MEM
     AntiTwitter(sprarea);
   #endif

   if ((err = swi(OS_SpriteOp,R0,512+52,R1,sprarea+16,R2,(int)sprarea + 16,R3,0,R4,0,R5,
        0,R6,scale,R7,0,END))!=NULL)
   {
          ErrorHandler(__FILE__,__LINE__,"DisplaySprite()",err->errnum,err->errmess,
          WARNING__);
          FreeMemory(area_no);
          #ifdef LOW_MEM
            free(scale);
          #endif
          return -1;
   }

   #ifdef LOW_MEM
     LowMemAntiTwitter();
     free(scale);
   #endif

   return 0;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  AntiTwitter()                                                           */
/*  BEHAVIOUR: Performs anti twitter on a populated sprite area, providing that        */
/*             LOW_MEM is not defined, this meaning that the sprite is already full    */
/*             screen size.                                                            */
/*  REQUIRES:  - 'sprarea', which points to the sprite area of the sprite to be anti   */
/*                twittered.                                                           */
/*  PREREQUISITES: 'xres' and 'yres' must have been set.                               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static void AntiTwitter(char *sprarea)
{
 #ifndef LOW_MEM
 _kernel_oserror *err = NULL;

       #ifdef NEW_TWITTER

         #error NEW_TWITTER without LOW_MEM doesn't work yet

          /* Anti-twitter the shadow sprite in place.
           * (int)sprarea + 16 holds the address of the sprite's control block.
           * The offset from the control block to the sprite image is held in the word
           * at byte 32 of the control block.
           */
          if ((err = swi(STBFilter_FilterArea,R0,((int)sprarea + 16) +
               *(((int *) ((int)sprarea + 16))+8),R1,((int) sprarea + 16) +
               *(((int *) ((int)sprarea + 16))+8),R2,yres, R3,xres, R4,xres, R5,xres,
               R6,4, END))!=NULL)
          {
               ErrorHandler(__FILE__,__LINE__,"AntiTwitter()",err->errnum,
               err->errmess,WARNING__);
               return;
          }

          #ifdef DEVELOPMENT__
            printf("area:%p, sprite:%p, image:%p, xres:%x, yres:%x\n",
            (int*) sprarea, (int*)((int)sprarea + 16),
            (int*) (((int)sprarea + 16) +
            *(((int *) ((int)sprarea + 16))+8)), xres, yres);
          #endif

       #endif

       #ifdef OLD_TWITTER
       if ((err = swi(STBFilter_FilterArea,R0,((int)sprarea + 16) +
            *(((int *) ((int)sprarea + 16))+8),R1,xres*2, R2,xres, R3,yres, R4,0, R5,0,
            R6,xres,R7,yres,END))!= NULL)
       {
            ErrorHandler(__FILE__,__LINE__,"AntiTwitter()",err->errnum,
            err->errmess,WARNING__);
            return;
       }

          #ifdef DEVELOPMENT__
            printf("area:%p, sprite:%p, image:%p, xres:%x, yres:%x\n",
            (int*) sprarea, (int*)((int)sprarea + 16),
            (int*) (((int)sprarea + 16) +
            *(((int *) ((int)sprarea + 16))+8)), xres, yres);
          #endif

       #endif

 #endif
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  LowMemAntiTwitter()                                                     */
/*  BEHAVIOUR: Anti twitters screen memory.  This function is intended for use where   */
/*             lack of memory prevents a sprite from being anti-twittered before being */
/*             plotted to the screen.  A sprite can only be anti-twittered in memory   */
/*             properly if it is it's intended display size.                           */
/*  PREREQUISITES: 'xres' and 'yres' must have been set.                               */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static void LowMemAntiTwitter(void)
{
 int vdublk[2];
 int scrstart;
 int linelen;
 _kernel_oserror *err = NULL;

   vdublk[0] = 148;
   vdublk[1] = -1;
   if ((err = swi(OS_ReadVduVariables,R0,vdublk,R1,vdublk,END)) != NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"LowMemAntiTwitter()",err->errnum,err->errmess,
        WARNING__);
        return;

   }
   scrstart = vdublk[0];

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,6,OUT,R2,&linelen,END)) != NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"LowMemAntiTwitter()",err->errnum,err->errmess,
        WARNING__);
        return;
   }

   #ifdef OLD_TWITTER
   if ((err = swi(STBFilter_FilterArea,R0,scrstart,R1,linelen,R2,xres,R3,yres,R4,0,R5,
        0,R6,xres,R7,yres,END)) != NULL)
   {
          ErrorHandler(__FILE__,__LINE__,"LowMemAntiTwitter()",err->errnum,
          err->errmess,WARNING__);
          return;
   }
   #endif

   #ifdef NEW_TWITTER
     #error NEW_TWITTER with LOW_MEM doesn't work yet
   if ((err = swi(STBFilter_FilterArea,R0,scrstart,R1,scrstart,R2,yres,R3,linelen,R4,
        linelen,R5,xres,R6,4,END)) != NULL)
   {
          ErrorHandler(__FILE__,__LINE__,"LowMemAntiTwitter()",err->errnum,
          err->errmess,WARNING__);
          return;
   }
   #endif
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  FreeMemory()                                                            */
/*  BEHAVIOUR: Deallocates memory which was previously allocated to the dynamic memory */
/*             area identified by 'area_no'.                                           */
/*  REQUIRES:  - 'area_no', which identifies the dynamic memory area to free.          */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static void FreeMemory(int area_no)
{
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
     puts("FreeMemory()");
   #endif

   if ((err = swi(OS_DynamicArea,R0,1,R1,area_no,END))!=NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"FreeMemory()",err->errnum,err->errmess,
        WARNING__);
        return;
   }
}

/*=====================================================================================*/
/*                                                                                     */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static void RestoreButtonStates(int paused)
{
 extern int playing;

   if (playing == TRUE__)
       PlotButton("play1",OFF__);

   if (paused == TRUE__)
       PlotButton("pause1",OFF__);
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  Screen Dimensions()                                                     */
/*  BEHAVIOUR: Sets xres and yres, which are the number of pixels horizontally and     */
/*             vertically in the current screen mode.                                  */
/*  RETURNS:   0 to indicate success, -1 to indicate failure.                          */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int ScreenDimensions(void)
{
 _kernel_oserror *err = NULL;

   #ifdef FN_TRACE__
     puts("ScreenDimensions() in Help.c");
   #endif

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,11,OUT,R2,&xres,END))!=NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"ScreenDimensions()",err->errnum,err->errmess,
        WARNING__);
        return -1;
   }

   if ((err = swi(OS_ReadModeVariable,R0,-1,R1,12,OUT,R2,&yres,END))!=NULL)
   {
        ErrorHandler(__FILE__,__LINE__,"ScreenDimensions()",err->errnum,err->errmess,
        WARNING__);
        return -1;
   }

   xres++; yres++;

   return 0;
}
