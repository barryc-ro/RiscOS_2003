/*=====================================================================================*/
/*                                                                                     */
/*  FILE:  !AudioCD.c.Random                                                           */
/*  DESCRIPTION:  Routines for playing tracks in random order.                         */
/*  AUTHOR:  srose@omi.co.uk                                                           */
/*  MODIFICATION HISTORY:                                                              */
/*    Date         Name                Description                                     */
/*    ----         ----                -----------                                     */
/*                                                                                     */
/*=====================================================================================*/

#undef GLOBALS__

#include "Common.h"
#include "Random.h"
#include "time.h"

#ifdef DEVELOPMENT__
  #include "Memory.h"
  #include "stdio.h"
#endif

static int AlreadyExists(int track_no,int total_tracks,int *table);

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  RandomInit()                                                            */
/*  BEHAVIOUR: Creates an empty table for storing track numbers in random order.       */
/*  REQUIRES:  - 'total_tracks', which is the number of tracks on the cd and hence     */
/*                determines the size of the table.                                    */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern int * RandomInit(int total_tracks)
{
 int *random_table = NULL;

   #ifdef FN_TRACE__
     puts("RandomInit()");
   #endif

   /* Seed the random number generator.                                                */
      srand(time(NULL));

   /* Create a table for storing track numbers in random order.                        */
   if (total_tracks == 0)
   {
       ErrorHandler(__FILE__,__LINE__,"RandomInit()",0,"Total tracks = 0",WARNING__);
   }
   else if ((random_table = calloc(total_tracks,sizeof(int))) == NULL)
        {
             ErrorHandler(__FILE__,__LINE__,"RandomInit()",0,"Insufficient Memory",
                          WARNING__);
        }
        else
        {
             FillRandomTable(random_table,total_tracks);
        }

   return random_table;
}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  FillRandomTable()                                                       */
/*  BEHAVIOUR: */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
extern void FillRandomTable(int *r,int total_tracks)
{
 int i,n;

   #ifdef FN_TRACE__
     puts("FillRandomTable()");
   #endif

   #ifdef RANDOM__
     printf("Total tracks == %d\n",total_tracks);
   #endif

   if (total_tracks == 0)
   {
       ErrorHandler(__FILE__,__LINE__,"FillRandomTable()",0,"Total tracks = 0",WARNING__);
       return;
   }

   if (r == NULL)
   {
       ErrorHandler(__FILE__,__LINE__,"FillRandomTable()",0,
                    "Memory not allocated for random number table.",WARNING__);
       return;
   }


   for (i = 0; i < total_tracks; r[i] = 0,i++);

   i = 0;
   while (i < total_tracks)
   {
        n = rand() % total_tracks;      /* Random no. in range 0 .. total tracks-1     */
        n++;                            /* Adjust to range 1 .. total_tracks.          */


        #ifdef RANDOM__
          printf("Random no returned (and adjusted): %d\n",n);
        #endif

        if (n > total_tracks)
        {
            ErrorHandler(__FILE__,__LINE__,"FillRandomTable()",0,"Random no. too high.",
                         WARNING__);
        }
        else if (n < 1)
             {
                 ErrorHandler(__FILE__,__LINE__,"FillRandomTable()",0,
                              "Random no. too low.",
                              WARNING__);
             }

        if (AlreadyExists(n,total_tracks,r) == FALSE__)
        {
            r[i] = n;
            i++;
        }

   }

   #ifdef RANDOM__
     printf("\nTotal tracks == %d\n",total_tracks);
     puts("Populated random number table: ");
     for (i = 0; i < total_tracks; printf(" %d, ",r[i]),i++);
   #endif

}

/*=====================================================================================*/
/*                                                                                     */
/*  FUNCTION:  AlreadyExists()                                                         */
/*  BEHAVIOUR: */
/*                                                                                     */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int AlreadyExists(int track_no,int total_tracks,int *table)
{
 int i;
 int track_exists = FALSE__;

   #ifdef FN_TRACE__
     puts("AlreadyExists()");
   #endif

   if ((track_no < 1) || (track_no > total_tracks) || (total_tracks < 1))
   {
        ErrorHandler(__FILE__,__LINE__,"AlreadyExists()",0,
                     "Strange track_no or total_tracks.",WARNING__);
        return TRUE__;
   }

   i = 0;
   while ((i <= total_tracks) && (track_exists == FALSE__))
   {
           if (table[i] == track_no)
               track_exists = TRUE__;
           else
               i++;
   }

   return track_exists;
}



