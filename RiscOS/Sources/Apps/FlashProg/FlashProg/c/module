/* module.c - RISC OS module related code. */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "flashprog.h"
#include "error.h"

ERROR_STRUCT(BADSWI, "BadSWI");

static _kernel_oserror *TinyError;

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *module_initialise(char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *err = flash_initialise(pw, podule_base);

  /* Try to use TinyStubs if possible. */
  if (err == NULL)
    TinyError = _swix(TinySupport_Share, _IN(0), pw);

  return err;

  NOT_USED(cmd_tail);
  NOT_USED(podule_base);
}

/*------------------------------------------------------------------------------
 * module_finalise
 *
 *      Module exit handler.
 */
_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
  if (TinyError == NULL)
    _swix(TinySupport_Die, 0);

  return NULL;

  NOT_USED(fatal);
  NOT_USED(podule);
}

/*------------------------------------------------------------------------------
 * module_swi
 *
 *      Module SWI handler.
 */
_kernel_oserror *module_swi(int swi_no, _kernel_swi_regs *r, void *pw)
{
  switch (swi_no)
  {
  case 0:
    return flash_info(r);
  case 1:
    return flash_read(r);
  case 2:
    return flash_erase(r);
  case 3:
    return flash_write(r);
  case 4:
    return flash_status(r);
  case 5:
    return flash_release(r);
  case 6:
    return flash_erasesuspend(r);
  case 7:
    return flash_eraseresume(r);
  case 8:
    return flash_abort(r);
  case 9:
    return flash_powercontrol(r);
  default:
    return _swix(MessageTrans_ErrorLookup,
		 _IN(0) | _IN(1) | _IN(2) | _IN(3) | _IN(4),
		 ERROR(BADSWI), 0, 0, 0, MODULE_NAME);
  }
  NOT_USED(pw);
}
