/* error.h
 *
 *      General purpose error header.
 */

#define ERROR_BADSWI	0x00000112
#define ERROR_BADTYPES	0x000000AF
#define ERROR_BADPARAMS	0x000001ED
#define ERROR_LOCKED	0x000000C3
#define ERROR_BADHARD	0x00000603
//a 256 byte error block has been assigned for
//more detailed error reporting...
#define ERROR_VPPLOW          0x00816d00       //block starts here
#define ERROR_WRITEPROT       0x00816d01
#define ERROR_PROGSUS         0x00816d02
#define ERROR_PROGERR         0x00816d03
#define ERROR_BUSY            0x00816d04
#define ERROR_GSRDOS          0x00816d05
#define ERROR_S5_ERASE_SUS    0x00816d06
#define ERROR_S5_ERASE_ERR    0x00816d07
#define ERROR_S5_PROG_ERR     0x00816d08
#define ERROR_S5_VPPLOW       0x00816d09
#define ERROR_S5_PROG_SUS     0x00816d0a
#define ERROR_S5_PROT         0x00816d0b
#define ERROR_NOPOD           0x00816d0c


/* Declare the given error in a memory efficient way.
 */
#define ERROR_STRUCT(name,text) \
        struct {int errnum; char errmess[sizeof(text)+1];} name = {ERROR_##name,text}

/* Declare the given error as external.
 */
#define ERROR_EXTERN(name) \
        extern struct {int errnum; char errmess[1];} name

#define ERROR(e)  ((_kernel_oserror *)&(e))
