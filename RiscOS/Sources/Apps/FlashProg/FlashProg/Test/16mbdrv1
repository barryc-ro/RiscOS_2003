28F016SA "C" DRIVERS

/************************************************************************/
/* INTEL CONFIDENTIAL: DELIVER TO CUSTOMERS ONLY UNDER NDA UNTIL	*/	
/* 28F016SA MARKET INTRODUCTION						*/
/* Copyright Intel Corporation, 1993					*/
/* Example C Routines for the 28F016SA Flash memory component		*/
/* Patrick Killelea, Intel Corporation					*/
/* Revision 1.0, 25 June 1993						*/
/*									*/
/* NOTE: BYTE# pin on the device determines whether addressing 		*/
/* refers to words or bytes. I assume word mode.			*/
/* NOTE: A 28F016SA command can be written to any address in the	*/
/* block or device to be affected by that command.			*/
/************************************************************************/

#include <stdio.h>

void set_pin(int pin, int level)
{
/* set_pin is an implementation-dependent function which sets a		*/
/* given pin on the standard 28F016SA pinout HIGH = 1 or LOW = 0.	*/
}

int *base(int *address)
{
/* base is an implementation-dependent function which takes an		*/
/* address in the flash array and returns a pointer to the base		*/
/* of that 64K byte block.						*/
}

 
int compatible_block_erase(int *address)
{
/* This procedure erases a 64K byte block on the 28F016SA.		*/
/* It also works with a pair of 28F008SAs.				*/
int CSR;
/* CSR variable is used to return contents of CSR register.		*/

*address = 0X2020;
/* Single Block Erase command						*/
*address = 0XD0D0;
/* Confirm command							*/
while(!(0X0080 & *address))
/* Poll CSR until CSR.7 = 1 (WSM ready)					*/
{
/* Erase may be suspended here to write to a different block.		*/
};
/* At this point, CSR.7 is 1, indicating WSM is not busy.		*/
/* Note that we are still reading from CSR by default.			*/
CSR = *address;
/* Save CSR before clearing it.						*/
*address = 0X5050;
/* Clear Status Registers command					*/
return(CSR);
/* Return CSR to be checked for status of operation.			*/
}

 
int compatible_byte_write(int *address, int data)
{
/* This procedure writes a byte to the 28F016SA.			*/
/* It also works with a the 28F008SA.					*/
int CSR;
/* CSR variable is used to return contents of CSR register.		*/

*address = 0X1010;
/* Word Write command 							*/
*address = data;
/* Actual data write to flash address.					*/
while(!(0X0080 & *address));
/* Poll CSR until CSR.7 = 1 (WSM ready)					*/

CSR = *address;
/* Save CSR before clearing it.						*/
*address = 0X5050;
/* Clear Status Registers command					*/
return(CSR);
/* Return CSR to be checked for status of operation.			*/
}

 
int compatible_suspend_to_read(int *read_address, int *erase_address, int *result)
{
/* This procedure suspends an erase operation to do a read.		*/
/*  It also works with a pair of 28F008SAs.				*/
int CSR;
/* CSR variable is used to return contents of CSR register.		*/

/* Assume erase is underway in block beginning at erase_address.	*/
*erase_address = 0XB0B0;
/* Erase Suspend command						*/
while(!(0X0080 & *erase_address));
/* Poll CSR until CSR.7 = 1 (WSM ready)					*/
*erase_address = 0XFFFF;
/* Read Flash Array command						*/
*result = *read_address;
/* Do the actual read. Any number of reads can be done here.		*/
if (0X0040 & *erase_address)
/* If CSR.6 = 1 (erase incomplete)					*/
	*erase_address = 0XD0D0;
/* Erase Resume command							*/
CSR = *erase_address;
/* Save CSR before clearing it.						*/
*erase_address = 0X5050;
/* Clear Status Registers command					*/
return(CSR);
/* Return CSR to be checked for status of operation.			*/
}
 

int device_information_upload(int *address)
/* This procedure uploads the device revision number to the DSR.	*/
{
int GSR_DSR;
/* DSR variable is used to return device revision status.		*/
int *block_base = base(address);
/* Find pointer to base of 32K word block.				*/

*address = 0X7171;
/* Read Extended Status Registers command				*/
while (0X0008 & *(block_base + 2));
/* Poll GSR until GSR.3 = 0 (queue available).				*/
while (!(0X0080 & *(block_base + 2)));
/* Poll GSR until GSR.7 = 1 (WSM available).				*/
*address = 0X9999;
/* Device Information Upload command					*/
*address = 0XD0D0;
/* Confirmation command							*/
*address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 2)));
/* Poll GSR until GSR.7 = 1 (WSM not busy)				*/
*address = 0X7272;
/* Swap page buffer to bring buffer with status information to top.	*/
*address = 0X7575;
/* Read Page Buffer command						*/
GSR_DSR = (*(block_base + 3) & 0X00FF);
/* Put device revision code in bottom byte of return value.		*/
/* Note that device revision code was read from word 3 in page buffer.	*/
*address = 0X7171;
/* Read Extended Status Registers command				*/
GSR_DSR += (*(block_base + 2) & 0XFF00);
/* Put GSR in top byte of return value.					*/

*address = 0X5050;
/* Clear Status Registers command					*/
return(GSR_DSR);
}
 
int ESR_block_erase(int *erase_address)
/* This procedure erases a block on the 28F016SA.			*/
{
int ESR;
/* ESR variable is used to return contents of GSR and BSR.		*/
int *block_base = base(erase_address);
/* Find address of base of block being erased.				*/
*erase_address = 0X7171;
/* Read Extended Status Registers command				*/
while (0X0008 & *(block_base + 1));
/* Poll BSR until BSR.3 of erase_address = 0 (queue available).		*/
/* BSR is 1 word above base of target block in ESR space.		*/

*erase_address = 0X2020;
/* Single Block Erase command						*/
*erase_address = 0XD0D0;
/* Confirm command							*/
*erase_address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 1)));
/* Poll BSR until BSR.7 of target erase_address = 1 (block ready).	*/
 
ESR = (*(block_base + 2) & 0XFF00) + (*(block_base + 1) & 0X00FF);
/* Put GSR in top byte and BSR in bottom byte of return value.		*/
*erase_address = 0X5050;
/* Clear Status Registers command					*/
return(ESR);
}

 
int ESR_suspend_to_read(int *address,int *result)
/* This procedure suspends an erase on the 28F016SA.			*/
{
/* Address is assumed to point to location to be read.			*/
/* result is used to hold read value until procedure is complete.	*/
int ESR;
/* ESR variable is used to return contents of GSR and BSR.		*/
int *block_base = base(address);

*address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 1)));
/* Poll BSR until BSR.7 of target address = 1 (block ready).		*/
/* BSR is 1 word above base of target block in ESR space.		*/
*address = 0XB0B0;
/* Operation Suspend command						*/
*address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 2)));
/* Poll GSR until GSR.7 = 1 (WSM ready).				*/
*address = 0XFFFF;
/* Read Flash Array command						*/
*result = *address;
/* Read the data.							*/
if (0X0040 & *(block_base + 2))
/* If GSR.6 indicates an operation was suspended on this device,	*/
	*address = 0XD0D0;
/* then resume the operation.						*/

ESR = (*(block_base + 2) & 0XFF00) + (*(block_base + 1) & 0X00FF);
/* Put GSR in top byte and BSR in bottom byte of return value.		*/
*address = 0X5050;
/* Clear Status Registers command					*/
return(ESR);
}

 
int ESR_word_write(int *write_address, int data)
/* This procedure writes a word to the 28F016SA.			*/
{
int ESR;
/* ESR variable is used to return contents of GSR and BSR.		*/
int *block_base = base(write_address);

*write_address = 0X7171;
/* Read Extended Status Registers command				*/
while (0X0008 & *(block_base + 1));
/* Poll BSR until BSR.3 of target address = 0 (queue available).	*/
/* BSR is 1 word above base of target block in status reg space.	*/
*write_address = 0X1010;
/* Write word command							*/
*write_address = data;
/* Write actual data.							*/
*write_address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 1)));
/* Poll BSR until BSR.7 of target address = 1 (block ready).		*/
ESR = (*(block_base + 2) & 0XFF00) + (*(block_base + 1) & 0X00FF);
/* Put GSR in top byte and BSR in bottom byte of return value.		*/
*write_address = 0X5050;
/* Clear Status Registers command					*/
return(ESR);
}

 
int erase_all_unlocked_blocks(int *device_address, long *failure_list)
/* This procedure erases all the unlocked blocks on a 28F016SA.		*/
{
int GSR;
/* Return value will contain GSR in both top and bottom byte.		*/
/* 32 bit long pointed to by failure_list is used to return map		*/
/* of block failures, each bit representing one block's status.		*/
/* device_address points to base of chip.				*/
int block;
/* block is used to hold block count for loop through blocks.		*/
long power = 1;

*failure_list = 0; 
/* Initialize all 32 bits of failure list long to 0.				*/
*device_address = 0X7171;
/* Read Extended Status Registers					*/
while (0X0008 & *(device_address + 1));
/* Poll BSR until BSR.3 of target address = 0 (queue available).	*/
*device_address = 0XA7A7;
/* Full-chip erase command						*/
*device_address = 0XD0D0;
/* Confirm command							*/
*device_address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(device_address + 2)));
/* Poll GSR until GSR.7 = 1 (WSM ready)					*/

for (block = 0; block < 0X0020; block++)
{
/* Go through blocks, looking at each BSR.5 for operation failure	*/
/* and setting appropriate bit in long pointed to by failure list.	*/
	if (0X0020 & *(device_address + block * 0X8000 + 1))
/* Multiply block by 32K words to get to the base of each block.	*/
		*failure_list += power;
/* If the block failed, set that bit in the failure list.		*/
	power *= 2;
/* Increment to next power of two to access next bit.			*/
}

GSR = *(device_address + 2);
/* Put GSR in both bytes of return value.				*/
*device_address = 0X5050;
/* Clear Status Registers command					*/
return(GSR);
}

 
int lock_block(int *lock_address)
/* This procedure locks a block on the 28F016SA.			*/
{
int ESR;
/* ESR variable is used to return contents of GSR and BSR.		*/
#define WPB 56
/* Write Protect pin (active low) is pin number 56 on standard		*/
/* pinout of 28F016SA.							*/
#define VPP 15
/* Vpp pin is pin number 15 on standard pinout of 28F016SA.		*/
#define HIGH 1
#define LOW  0

int *block_base = base(lock_address);
/* Find pointer to base of block being locked.				*/

*lock_address = 0X7171;
/* Read Extended Status Registers command				*/
while (0X0008 & *(block_base + 2));
/* Poll GSR until GSR.3 = 0 (queue available).				*/
set_pin(WPB, HIGH);
/* Disable write protection by setting WPB high.			*/
set_pin(VPP, HIGH);
/* Enable Vpp, wait for ramp if necessary in this system.		*/
*lock_address = 0X7777;
/* Lock Block command							*/
*lock_address = 0XD0D0;
/* Confirmation command							*/
*lock_address = 0X7171;
/* Read Extended Status Registers command 				*/
while (!(0X0080 & *(block_base + 2)));
/* GSR is 2 words above 0; poll GSR until GSR.7 = 1 (WSM ready).	*/

ESR = (*(block_base + 2) & 0XFF00) + (*(block_base + 1) & 0X00FF);
/* Put GSR in top byte and BSR in bottom byte of return value.		*/
*lock_address = 0X5050;
/* Clear Status Registers command					*/
return(ESR);
}

 
int status_upload(int *address)
/* This procedure uploads status information into the ESR from		*/
/* non-volatile status bits.						*/
{
int ESR;
/* ESR variable is used to return contents of GSR and BSR.		*/
int *block_base = base(address);
/* Find pointer to base of 32K word block.				*/

*address = 0X7171;
/* Read Extended Status Registers command				*/
while (0X0008 & *(block_base + 2));
/* Poll GSR until GSR.3 = 1 (queue available).				*/
*address = 0X9797;
/* Lock-status Upload command						*/
*address = 0XD0D0;
/* Confirmation command							*/
*address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 2)));
/* Poll GSR until GSR.7 = 1 (WSM not busy)				*/

ESR = (*(block_base + 2) & 0XFF00) + (*(block_base + 1) & 0X00FF);
/* Put GSR in top byte and BSR in bottom byte of return value.		*/
*address = 0X5050;
/* Clear Status Registers command					*/
return(ESR);
}

 
int pagebuffer_write_to_flash(int *address, int byte_count)
/* This procedure writes from page buffer to flash.			*/
{
/* This routine assumes page buffer is already loaded.			*/
/* Address is where in flash array to begin writing.			*/
/* Low byte of byte_count must be 256 or fewer, high must be 0.		*/
/* High byte exists for future Page Buffer expandability.		*/
int ESR;
/* ESR variable is used to return contents of GSR and BSR.		*/
int *block_base = base(address);
/* Find pointer to base of block to be written.				*/

*address = 0X7171;
/* Read Extended Status Registers command				*/
while (0X0008 & *(block_base + 1));
/* Poll BSR until BSR.3 of target address = 0 (queue available).	*/
*address = 0X0C0C;
/* Page Buffer Write to Flash command					*/
*address = byte_count;
/* Only A0 valid here; low or high byte loaded depending on A0.		*/
*address = byte_count;
/* A0 internally complemented; alternate byte loads; write starts	*/
*address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 1)));
/* Poll BSR until BSR.7 of target address =1 (block ready).		*/

ESR = (*(block_base + 2) & 0XFF00) + (*(block_base + 1) & 0X00FF);
/* Put GSR in top byte and BSR in bottom byte of return value.		*/
*address = 0X5050;
/* Clear Status Registers command					*/
return(ESR);
}

 
void sequential_pagebuffer_load(int *device_address, char *start_address,
int word_count, int* data)
/* This procedure loads a multiple bytes to a page buffer.		*/
{
/* Low byte of word_count must be 128 or fewer, high must be 0.		*/
/* High byte exists for future Page Buffer expandability.		*/
char counter;
/* counter is used to keep track of bytes written.			*/

*device_address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0004 & *(device_address + 2)));
/* Poll GSR until GSR.2 = 1 (page buffer available).			*/
*device_address = 0XE0E0;
/* Sequential Page Buffer Load command					*/
*start_address = word_count;
/* Loads high or low byte of count register, depending on A0		*/
*start_address = word_count;
/* Automatically loads alternate byte of count register			*/
for (counter = 0; counter < word_count; counter++)
	*(start_address + counter) = data[counter];
/* Loop through data, writing to page buffer.				*/
/* This routine does not affect status registers.			*/
}

 
void single_pagebuffer_load(int *device_address, char *address, int data)
/* This procedure loads a single byte or word to a page buffer.		*/
{
*device_address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0004 & *(device_address + 2)));
/* Poll GSR until GSR.2 = 1 (page buffer available)			*/
*device_address = 0X7474;
/* Single Load to Page Buffer command					*/
*address = data;
/* Actual write to page buffer						*/
/* This routine does not affect status registers.			*/
}

int two_byte_write(int *address, char data_low, char data_high)
/* This routine is used when BYTE# is low, i.e. the 28F016SA 		*/
/* is in byte mode, to emulate a word write.				*/
{
int ESR;
/* ESR variable is used to return contents of GSR and BSR.		*/
int *block_base = base(address);
/* Find pointer to base of block.					*/

*address = 0X7171;
/* Read Extended Status Registers command				*/
while (0X0008 & *(block_base + 1));
/* Poll BSR until BSR.3 of target address = 0 (queue available).	*/
*address = 0XFBFB;
/* Two-byte Write command						*/
*address = data_low;
/* Load one byte of data register; A0 = 0 loads low byte, A1 high	*/
*address = data_high;
/* 28F016SA automatically loads alternate byte of data register		*/

/* Write is initiated. Now we poll for successful completion.		*/
*address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 1)));
/* Poll BSR until BSR.7 of target address = 1 (block ready).		*/
/* BSR is 1 word above base of target block in status reg space.	*/

ESR = (*(block_base + 2) & 0XFF00) + (*(block_base + 1) & 0X00FF);
/* Put GSR in top byte and BSR in bottom byte of return value.		*/
*address = 0X5050;
/* Clear Status Registers command					*/
return(ESR);
}

 
int write_during_erase(int *write_address, int *erase_address, int data)
/* This procedure writes to one block while another is erasing.		*/
{
int ESR;
/* ESR variable is used to return contents of GSR and BSR.		*/
int *block_base = base(erase_address);
/* Find pointer to base of block being erased.				*/

*erase_address = 0X7171;
/* Read Extended Status Register command				*/
while (0X0008 & *(block_base + 1));
/* Poll BSR until BSR.3 of target address = 0 (queue available).	*/
/* BSR is 1 word above base of target block in ESR space.		*/
*erase_address = 0X2020;
/* Erase Block command							*/
*erase_address = 0XD0D0;
/* Confirm command							*/
*write_address = 0X4040;
/* Word Write command							*/
*write_address = data;
/* Write actual data.							*/
/* Erase suspends, write takes place, then erase resumes.		*/
*erase_address = 0X7171;
/* Read Extended Status Registers command				*/
while (!(0X0080 & *(block_base + 1)));
/* Poll BSR until BSR.7 of erase address = 1 (block ready).		*/
/* BSR is 1 word above base of target block in status reg space.	*/

ESR = (*(block_base + 2) & 0XFF00) + (*(block_base + 1) & 0X00FF);
/* Put GSR in top byte and BSR in bottom byte of return value.		*/
*block_base = 0X5050;
/* Clear Status Registers command					*/
return(ESR);
}

