/*  fileio.c
 *
 *  Routines to read/write a file from/to memory.
 *
 *  05-Sep-97 jfarrell - Created.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include "fileio.h"

/*  Write 'nbytes' of data from 'buff' to file 'filename', creating or truncating
 *  the file if necessary.
 */
int write_file (const char *filename, const unsigned char *buff, size_t nbytes)
{
    FILE *fp;
    
    fp = fopen(filename, "wb");
    if (fp == NULL)
    {
        fprintf(stderr, "Failed to open output file '%s': %s", filename, strerror(errno));
	return 1;
    }

    if (fwrite(buff, 1, nbytes, fp) != nbytes)
    {
        fprintf(stderr, "Failed to write output file '%s': %s", filename, strerror(errno));
        fclose(fp);
        return 1;
    }
        
    if (fclose(fp) != 0)
    {
        fprintf(stderr, "Failed to write output file '%s': %s", filename, strerror(errno));
        return 1;
    }

    return 0;
}

/*  Read the contents of file 'filename' into memory.
 *  Sufficient memory is allocated and returned in '*buff'.  Its size is returned in '*nbytes'.
 */
int read_file (const char *filename, unsigned char **buff, size_t *nbytes)
{
    FILE *fp;
    long extent;
    
    fp = fopen(filename, "r");
    if (fp == NULL)
    {
        fprintf(stderr, "Failed to open input file '%s': %s\n", filename, strerror(errno));
        return 1;
    }
 
    if (fseek(fp, 0L, SEEK_END) || ((extent = ftell(fp)) <= 0) || fseek(fp, 0L, SEEK_SET))
    {
 	fprintf(stderr, "Failed to determine input file size\n");
 	fclose(fp);
 	return 1;
    }
    
    *buff = malloc(*nbytes = (size_t) extent);

    if (fread(*buff, 1, *nbytes, fp) != *nbytes)
    {
        fprintf(stderr, "Failed to read input file '%s': %s\n", filename, strerror(errno));
        fclose(fp);
        free(buff);
        return 1;
    }
    fclose(fp);
    return 0;
}
