/*  FlashPod- Acorn podule card flash ROM utility.
 *
 *  Assembler bits taken from FlashUp application.  FlashUp is different in that
 *  it is a dedicated in-place updater for the NC ROM Card.  The ROM card uses
 *  different flash devices with different programming mechanisms to those used
 *  on podule network cards.
 *
 *  03-Sep-1997 jfarrell - Created.
 *  30-Sep-1997 jfarrell - Add device sum as well as CC.
 *  06-Nov-1997 jfarrell - Fixed device size for AMD29F010.
 *  07-Nov-1997 jfarrell - Specifying filename but none of -[epv] now displays file CRC
 *  27-Feb-1009 jfarrell - Add chksum32.
 */
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include "kernel.h"
#include "swis.h"

#include "error.h"
#include "csleep.h"
#include "fileio.h"
#include "flashpod.h"
#include "amd29f.h"
#include "chksum.h"

#define VERSION "0.5 (27-Feb-1998)"

/*  Globals.
 */
char 	*filename = NULL;
int 	rflag = 0;		/* -r flag set (read flash) */
int 	pflag = 0;		/* -p flag set (program flash) */
int	vflag = 0;		/* -v flag set (verify) */
int	eflag = 0;		/* -e flag set (erase) */
int	slot = PODULE_SLOT;	/* -s argument (podule slot number) */


/* From stuff.s */
extern void hack_L1PT(unsigned int space, unsigned int size);


int main(int argc, char *argv[])
{
    struct flash *device;
    unsigned char *buff = NULL;			/* buffer to read device into */

    unsigned char *input_buff = NULL;		/* buffer to read file into */
    size_t input_size;
            
    char *usage = "flashpod [-s <slot>] [-v] [-e] [-r | -p] <filename>";
 
    setvbuf(stdout, NULL, _IONBF, 0); /* no buffering on standard output */
    printf("Acorn Podule Flash Memory Programmer - Version " VERSION "\n\n");
    
    /*  Process command line arguments and figure out what to do.
     */ 
    while ((++argv, --argc > 0) && (*argv[0] == '-'))
    {
  	if ((strcmp(*argv, "-s") == 0) && (argc > 1))
  	{
  	    argv++, argc--;
  	    if (sscanf(argv[0], "%d", &slot) != 1)
  	    {
    	    	fprintf(stderr, "Usage: %s\n", usage);
            	exit(EXIT_FAILURE);
  	    }
  	}
  	else if (strcmp(*argv, "-e") == 0)
  	{
	    eflag = TRUE;
  	}
  	else if (strcmp(*argv, "-p") == 0)
  	{
	    pflag = TRUE;
  	}
  	else if (strcmp(*argv, "-r") == 0)
  	{
  	    rflag = TRUE;
  	}
  	else if (strcmp(*argv, "-v") == 0)
  	{
  	    vflag = TRUE;
  	}
  	else
  	{
    	    fprintf(stderr, "Usage: %s\n", usage);
            exit(EXIT_FAILURE);
  	}
    }

    /*  Cannot read and write in one invocation because we only have a single filename
     *  Similarly, reading and verifying would be pointless as it would prove only that
     *  two successive reads of the devicee give the same answer.
     */
    if ((rflag && pflag) || (rflag && vflag))
    {
    	fprintf(stderr, "Usage: %s\n", usage);
        exit(EXIT_FAILURE);
    }

    /*  If we need a file, make sure there's a filename argument remaining.
     */
    if ((pflag || vflag || rflag) && (argc != 1))
    {
    	fprintf(stderr, "Usage: %s\n", usage);
        exit(EXIT_FAILURE);
    }
    else
    {
        filename = *argv;
    }
    
#if 0
    /* Make IOC etc. user-writeable (for usleep) */
    hack_L1PT(IO_SPACE, IO_SIZE);
#endif

    /* Make podule spaces user-writeable, non-cacheable/bufferable, write enabled */
    hack_L1PT((int)PODULE_SPACE(slot), PODULE_SIZE);


    /*  If we have an input file read it now. 
     */
    if (filename && !rflag)
    {
	if (read_file(filename, &input_buff, &input_size) != 0)
	    exit(EXIT_FAILURE);
	    

	printf("Image filename: %s\n", filename);
	printf("Image sum:      &%X\n", chksum(input_buff, input_size));
	printf("Image sum32:    &%X\n", chksum32(input_buff, input_size));	
	printf("Image CRC:      &%X\n", crc(input_buff, input_size));		
    }
    printf("\n");

    /*  To support other device families, write a new module like amd29f.c and
     *  call xxx_create(PODULE_SPACE(slot) instead.
     */
    device = amd29f_create(PODULE_SPACE(slot));
    if (device == NULL)
    {
        fprintf(stderr, "Failed to create flash device in podule slot %d\n", slot);
        exit(EXIT_FAILURE);
    }

    printf("Podule slot:    %d\n", slot);
    printf("Device type:    %s\n", device->name);
    
    if (device->size == 0)
        exit(EXIT_FAILURE);
            
    if ((buff = malloc(device->size)) == NULL)
    {
        fprintf(stderr, "Couldn't allocate %d bytes for device-size buffer\n", 
		device->size);
		 
        exit(EXIT_FAILURE);
    }

    /*  For operations that aren't about to alter the device, print the device CRC.
     */
    if (!pflag && !eflag)
    {
        if (flash_read(device, device->size, buff) == 0)
        {
            printf("Device sum:	    &%X\n", chksum(buff, device->size));
            printf("Device CRC:	    &%X\n", crc(buff, device->size));            
        }
    }
    
    /*  If programming or verifying, check file/device size first.
     */
    if ((vflag || pflag) && (input_size != device->size))
    {
        fprintf(stderr, "Input file size (%d) and device size (%d) differ\n", 
             	input_size, device->size);
        exit(EXIT_FAILURE);
    }
    printf("\n");
              
    /*  Read flash if requested.
     */
    if (rflag)
    {
	printf("Reading... ");
        if (flash_read(device, device->size, buff))
            printf("Failed!\n");
	else
            printf("Done.\n");        

	printf("Writing file... ");
        if (write_file(filename, buff, device->size))
            printf("Failed!\n");
	else
            printf("Done.\n");        
    } 

    /*  Erase flash if requested.
     *  Do this before 'pflag' so that '-e -p' erases then reprograms.
     */  
    if (eflag)
    {
	printf("Erasing... ");
        if (flash_erase(device))
            printf("Failed!\n");
	else
            printf("Done.\n");        
    }
 
    /*  Program flash if requested.
     */
    if (pflag)
    {
	printf("Programming... ");
        if (flash_write(device, input_buff))
            printf("Failed!\n");
	else
            printf("Done.\n");        
    }

    /*  Finally, verify flash if requested.
     */ 
    if (vflag)
    {
	printf("Verifying... ");
        flash_read(device, device->size, buff);
        
        if (memcmp(buff, input_buff, input_size) != 0)
            printf("Failed!\n");
	else
            printf("Done.\n");        
    }

    exit(EXIT_SUCCESS);
}
