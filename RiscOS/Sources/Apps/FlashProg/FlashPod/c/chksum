/* chksum.c
 *
 * Generate checksums of a block of memory.
 *
 * 08-Sep-97 jfarrell - Created.
 * 30-Sep-97 jfarrell - Add byte-wise sum in addition to CRC.
 * 27-Feb-98 jfarrell - Add chksum32().  Fix initialisation to 0.
 */

#include "kernel.h"
#include "swis.h"

/*  Generate a CRC of the 'nbytes' of memory starting at 'addr'.
 */
unsigned crc (unsigned char *addr, size_t nbytes)
{
    _kernel_swi_regs reg;

    reg.r[0] = 0;
    reg.r[1] = (int) addr;
    reg.r[2] = (int) (addr + nbytes);
    reg.r[3] = 1;

    _kernel_swi(OS_CRC, &reg, &reg);
    return reg.r[0];
}

/*  Generate a 16 bit bytewise-sum of the 'nbytes' of memory starting at 'addr'.
 */
unsigned short chksum (unsigned char *addr, size_t nbytes)
{
    unsigned short sum = 0;    /* assumed 16 bits */
    unsigned char *p;


    for (p = addr; p < addr+nbytes; p++)
        sum += *p;

    return sum;
}

/*  Generate a 32 bit bytewise-sum of the 'nbytes' of memory starting at 'addr'.
 */
unsigned chksum32 (unsigned char *addr, size_t nbytes)
{
    unsigned sum = 0;    /* assumed 32 bits */
    unsigned char *p;

    for (p = addr; p < addr+nbytes; p++)
        sum += *p;

    return sum;
}
