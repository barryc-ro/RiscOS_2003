/*
 * FlashUp.c - In-place flash update for NCs
 */

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "flashup.h"
#include "error.h"

/*
 * Errors
 */
ERROR_STRUCT(BADTYPES, "Unknown type of flash");
ERROR_STRUCT(BADPARAMS, "Bad parameters");
ERROR_STRUCT(LOCKED, "Device is busy");
ERROR_STRUCT(BADHARD, "Bad hardware");
ERROR_STRUCT(BADFILE, "Bad file");
ERROR_STRUCT(NOMEMORY, "Not enough free memory");

#define MEG		(1024*1024)

/* Addressing stuff */
/* ROM we're executing out of (either physical bank) */
#define ROM_SPACE	0x3800000

#define IO_SPACE	0x3000000	/* IOMD, VIDC and ROM space */
#define IO_SIZE		0x1000000

#define IO_ROMCR0	0x3200080
#define IO_ROMCR1	0x3200084
#define IO_ROMWE_BIT	0x80		/* Bit 7 or IOMD ROMCRn */

#define IO_CLINES	0x320000C
#define IO_C_VPP_BIT	2		/* Bit 1 of IOMD CLines, inverted */
#define IO_C_READMASK	0xf9

#ifdef USE_PODULE
#  define PODULE	1
#  define PODULE_SPACE	(0x88000000+(PODULE<<24))
#  define PODULE_SIZE	0x1000000
#  define PODULE_POWER	(PODULE_SPACE+0x400000)
#  define PODULE_FLASH	(PODULE_SPACE+0x800000)
#endif

/* IDs */
#define MAN_INTEL	0x0089
#define MAN_SHARP	0x00B0
#define	DEV_28F016Su	0x6688
#define	DEV_28F016Sx	0x66A0

/* 28F008SA-compatible commands (16bit-wide, replicated to 32bits) */
#define WRITE_WORD	0x40404040
#define READ_ID		0x00900090
#define READ_ARRAY	0x00FF00FF

/* 28F016SA/SV commands (16bit-wide, replicated to 32bits) */
#define CLEAR_SR	0x00500050
#define READ_ESR	0x00710071
#define ERASE_ALL	0x00A700A7
#define ERASE_CONFIRM	0x00D000D0
#define LOAD_PB		0x00E000E0
#define WRITE_PB	0x000C000C

/* IDs (accessible after READ_ID but not during WSM operation) */
#define MAN_ADDR	0
#define DEV_ADDR	1

/* BSR (accessible after READ_ESR or during WSM operation) */
#define BSR_ADDR	1
#define BSR_READY	0x00800080
#define BSR_BOS_ERROR	0x00200020
#define BSR_QUEUE_FULL	0x00080008

/* GSR (accessible after READ_ESR or during WSM operation) */
#define GSR_ADDR	2
#define GSR_WSMS_READY	0x00800080
#define GSR_DOS_ERROR	0x00200020
#define GSR_QUEUE_FULL	0x00080008
#define GSR_PB_AVAIL	0x00040004

/* Border colours for set_border(). Assumes VIDC20 */
#define VIDC		0x3500000
#define Border_Black    0x40000000
#define Border_Red      0x400000FF
#define Border_Green    0x4000FF00
#define Border_Yellow   0x4000FFFF
#define Border_Blue     0x40FF0000
#define Border_Magenta  0x40FF00FF
#define Border_Cyan     0x40FFFF00
#define Border_White    0x40FFFFFF
#define Border_Grey     0x40808080
#define Border_Beige    0x4080C0FF
#define Border_Pink     0x408080FF
#define Border_Brown    0x404080C0
#define Border_Lime     0x4040FFC0

/* Do we recognise this flash? */
#define RECOGNISE(man,dev)					\
	((((man) == MAN_INTEL) || ((man) == MAN_SHARP)) &&	\
	 ((dev) == DEV_28F016Sx))

/*
 * Macros
 */
#define peekw(addr)	\
	(*((volatile unsigned int *) (addr)))

#define pokew(addr, value)	\
	(*((volatile unsigned int *) (addr)) = ((unsigned int) (value)))

#define set_border(colour)	\
	pokew(VIDC, (colour))

#ifndef USE_PODULE
#  define vpp_on()	\
	pokew(IO_CLINES, peekw(IO_CLINES) & IO_C_READMASK)
#else
#  define ints_off()
#  define ints_on()

#  define vpp_on()	\
	pokew(PODULE_POWER+8, 0xf)
#endif

#define vpp_off()	\
	pokew(IO_CLINES, peekw(IO_CLINES) | IO_C_READMASK | IO_C_VPP_BIT)


/*
 * Variables
 */
int area = 0;				/* Dynamic area number for image */
unsigned int man, dev, size, blocksize, writesize, width;


/*
 * Function prototypes
 */
void getimage(char *filename, unsigned int **image, int *imagesize);
void flash_info(unsigned int *flash);
void flash_erase(unsigned int *flash);
void flash_write(unsigned int *flash, unsigned int *image, int imagesize);
void fatal(_kernel_oserror *e);

/* From stuff.s */
#ifndef USE_PODULE
extern void ints_on(void);
extern void ints_off(void);
#endif
extern void hack_L1PT(unsigned int space, unsigned int size);


int main(int argc, char *argv[])
{
  unsigned int *image;
#ifndef USE_PODULE
  unsigned int *flash = (unsigned int *) ROM_SPACE;
#else
  unsigned int *flash = (unsigned int *) PODULE_FLASH;
#endif
  int imagesize;

  if (argc != 2)
  {
    printf("Flash update-in-place proglet for NCs, Ver. 0.01.\n\nSyntax:\tFlashUp <OSimage_file>\n\n");
    exit(EXIT_FAILURE);
  }

  /* Make rom spaces user-writeable, non-cacheable/bufferable, write enabled */
  hack_L1PT(IO_SPACE, IO_SIZE);
#ifndef USE_PODULE
  pokew(IO_ROMCR0, peekw(IO_ROMCR0) | IO_ROMWE_BIT);
  pokew(IO_ROMCR1, peekw(IO_ROMCR1) | IO_ROMWE_BIT);
#else
  hack_L1PT(PODULE_SPACE, PODULE_SIZE);
  pokew(PODULE_POWER, 0xf);
  pokew(PODULE_POWER+4, 0xf);
#endif

  set_border(Border_Cyan);
  getimage(argv[1], &image, &imagesize);

  set_border(Border_Red);
  flash_info(flash);

#if 0
  DEBUGFN(printf("man %x, dev %x, size %x, blocksize %x, writesize %x, width %x\n", man, dev, size, blocksize, writesize, width));
#endif

  /*
   * Don't want interrupts while there is no OS image present
   * From here on can't use any CLib stuff, including printf and divide (/)
   */
  ints_off();
  vpp_on();

  set_border(Border_Cyan);
  flash_erase(flash);

  set_border(Border_Red);
  flash_write(flash, image, imagesize);

  set_border(Border_Black);

  /* XXX: Should do a reset of some sort here */

  ints_on();
  _swi(OS_DynamicArea, _INR(0,1), 1, area);
}


/*
 * Free the dynamic area used to hold our image and generate error.
 * Assumes good OS image is present when called.
 */
void fatal(_kernel_oserror *e)
{
  set_border(Border_Magenta);
  ints_on();
  if (area) _swi(OS_DynamicArea, _INR(0,1), 1, area);
  _swi(OS_GenerateError, _IN(0), e);
}


/*
 * Read in the entire OS image and return its location and size
 */
void getimage(char *filename, unsigned int **image, int *imagesize)
{
  FILE *in;
  long extent;
  int i, toggle=0;

  /* Open file, get extent and check its a multiple of 1 MEG */
  if (((in = fopen(filename, "rb")) == NULL) ||
      fseek(in, 0L, SEEK_END) ||
      ((extent = ftell(in)) <= 0) ||
      (extent & (MEG-1)) ||
      fseek(in, 0L, SEEK_SET))
    fatal(ERROR(BADFILE));

  *imagesize = (int) extent;

  _swi(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3)|_OUT(5),
       0, -1, *imagesize, -1, 1<<7, *imagesize, 0, 0, "New OS image",
       &area, image);

//  _swix(Hourglass_Start, _IN(0), 1);
  for (i=0; i<(*imagesize); i+=(MEG/2))
  {
    set_border((toggle = 1-toggle) ? Border_Cyan : Border_Red);
    if (fread((*image)+(i>>2), 1, (MEG/2), in) != (MEG/2))
      fatal(ERROR(BADFILE));
  };
//  _swix(Hourglass_Off, 0);

  fclose(in);
}


/*
 * Find out if we know about the kind of flash fitted
 */
void flash_info(unsigned int *flash)
{
  /* Don't want an interrupt while the OS is not around */
  ints_off();

  *flash = READ_ID;			/* Get ID stuff */

  man = flash[MAN_ADDR];
  dev = flash[DEV_ADDR];

  /* See if same in both 16-bit halves, ie 32-bit wide pair of 16-bit devices */
  /* and ensure we're not just reading back the latched value we just wrote */
  if (((man & 0xffff) == (man >> 16)) && ((dev & 0xffff) == (dev >> 16)) &&
      (man != READ_ID) || (dev != READ_ID))
  {
    width = 4;
    man &= 0xffff;
    dev &= 0xffff;

    if ((man == MAN_INTEL) && (dev == DEV_28F016Sx))
    {
      blocksize = 128*1024;		/* Each device in pair = 64Kbytes */
      writesize = 512;			/* pagebuffer=256 bytes * 2 devices */

      /* If IDs also appear at 4M, then its a ghost and only 4M is fitted */
      if ((flash[MEG+MAN_ADDR] == ((MAN_INTEL<<16) | MAN_INTEL)) &&
          (flash[MEG+DEV_ADDR] == ((DEV_28F016Sx<<16) | DEV_28F016Sx)))
      {
        *flash = READ_ARRAY;		/* Restore normality */
        size = 4*MEG;
      }
      else
      {
        int man2, dev2;
        *flash = READ_ARRAY;		/* Restore normality on 1st bank */

        /* Look again for IDs at 4Meg to see two pairs of chips are fitted */
        flash[MEG] = READ_ID;		/* Get ID stuff */
        man2 = flash[MEG+MAN_ADDR];
        dev2 = flash[MEG+DEV_ADDR];
        flash[MEG] = READ_ARRAY;	/* Restore normality on 2nd bank */

        if (((man2 & 0xffff) == (man2 >> 16)) &&
            ((dev2 & 0xffff) == (dev2 >> 16)) &&
            ((man2 & 0xffff) == MAN_INTEL) &&
            ((dev2 & 0xffff) == DEV_28F016Sx))
          size = 8*MEG;
        else
          size = 4*MEG;
      }
      ints_on();
      return;
    }
  }

  *flash = READ_ARRAY;
  fatal(ERROR(BADHARD));
}


void flash_erase(unsigned int *flash)
{
  *flash = READ_ESR;

  if (flash[BSR_ADDR] & BSR_QUEUE_FULL)
  {
    /* This should never happen */
    *flash = READ_ARRAY;		/* Try to Restore normality */
    fatal(ERROR(LOCKED));
  }

  if (size > (4*MEG))
  {
    flash[MEG] = READ_ESR;
    if (flash[MEG+BSR_ADDR] & BSR_QUEUE_FULL)
    {
      /* This should never happen if !pending */
      *flash = READ_ARRAY;		/* Try to restore normality */
      flash[MEG] = READ_ARRAY;
      fatal(ERROR(LOCKED));
    }
  }

  /* Erase */
  set_border(Border_Yellow);
  *flash = ERASE_ALL;
  *flash = ERASE_CONFIRM;
  if (size > (4*MEG))
  {
    flash[MEG] = ERASE_ALL;
    flash[MEG] = ERASE_CONFIRM;
  }

  /* Wait till done (~27s) */
  {
    int toggle = 0;
    while ((flash[BSR_ADDR] & BSR_QUEUE_FULL) ||
           ((size > (4*MEG)) && (flash[MEG+BSR_ADDR] & BSR_QUEUE_FULL)) ||
           ((flash[GSR_ADDR] & GSR_WSMS_READY) != GSR_WSMS_READY) ||
           ((size > (4*MEG)) && ((flash[MEG+GSR_ADDR] & GSR_WSMS_READY) != GSR_WSMS_READY)))
    {
      set_border((toggle = 1-toggle) ? Border_Yellow : Border_Blue);
    }
  }

  if ((flash[GSR_ADDR] & GSR_DOS_ERROR) ||
      ((size > (4*MEG)) && (flash[MEG+GSR_ADDR] & GSR_DOS_ERROR)))
  {
    *flash = CLEAR_SR;
    *flash = READ_ARRAY;
    if (size > (4*MEG))
    {
      flash[MEG] = CLEAR_SR;
      flash[MEG] = READ_ARRAY;
    }
    fatal(ERROR(BADHARD));
  }

  *flash = CLEAR_SR;
  *flash = READ_ARRAY;
  if (size > (4*MEG))
  {
    flash[MEG] = CLEAR_SR;
    flash[MEG] = READ_ARRAY;
  }

  return;
}


void flash_write(unsigned int *flash, unsigned int *image, int imagesize)
{
  int i, toggle = 0;
  int bank, offset, pb_offset;
  unsigned int len = (writesize>>2);		/* words to write */
  unsigned int lenpattern = (len - 1) + ((len - 1)<<16);
  volatile unsigned int *block, *chip, *dst;

  for (bank = 0; bank<(imagesize>>2); bank+=MEG)
  {
    chip = flash + bank;
//    *chip = READ_ESR;

    for (offset = bank; offset < bank+imagesize; offset += writesize)
    {
      block = flash + ((offset & ~(blocksize-1)) >> 2);
      dst = flash + (offset >> 2);
      pb_offset = offset & (writesize-1);

      /* Wait for Page Buffer to become available */
      *chip = READ_ESR;
      while ((chip[GSR_ADDR] & GSR_PB_AVAIL) != GSR_PB_AVAIL);
        set_border((toggle = 1-toggle) ? Border_Yellow : Border_Blue);

      /* Write length followed by data to page buffer */
      *chip = LOAD_PB;
      block[pb_offset] = lenpattern;	/* LSB of word count */
      block[pb_offset] = 0;		/* MSB of word count & buffer offset */
      for (i=0; i<len; i++)
        block[pb_offset+i] = image[(offset>>2)+i];

      /* Wait for space in WSM queue */
      *chip = READ_ESR;
      while (chip[BSR_ADDR] & BSR_QUEUE_FULL)
        set_border((toggle = 1-toggle) ? Border_Yellow : Border_Blue);

      /* Write page buffer to flash */
      *dst = WRITE_PB;
      *dst = lenpattern;		/* LSB of word count */
      *dst = 0;				/* MSB of word count & address */
    }

    /* Wait for WSM to finish */
    while ((chip[GSR_ADDR] & GSR_WSMS_READY) != GSR_WSMS_READY)
      set_border((toggle = 1-toggle) ? Border_Yellow : Border_Blue);

    /* Check for failure */
    if (chip[GSR_ADDR] & GSR_DOS_ERROR)
      fatal(ERROR(BADHARD));

    *chip = CLEAR_SR;			/* Restore normality */
    *chip = READ_ARRAY;
  }
  set_border(Border_Brown);
}
