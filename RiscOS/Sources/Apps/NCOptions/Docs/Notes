Notes on NCOptions (Justin Fletcher, 14 Jun 2000)
==================

* Sticks lots of stuff on the stack; q.v. start of Command, Main.c
  [ Lazarus/Bethany is an 8k SVC stack machine ]
* For some reason, the author doesn't like String literals embedded in
  sprintf-like routines. Not sure why... 
* Variables.c processes the input parameters
  * CMOS_PREFIX (nvram_) - use double _ (eg nvram__ to directly access NVRAM
    named variables.
    Tend to be operations that deal with setting NVRAM
  * BLAST_PREFIX (action_).
    Tend to be things that cause direct actions, such as to clean the printer
    head, or launch a subsequent action.
  * SPECIAL_PREFIX (ncoptions_).
    The 'wait' operation. Assume that this is for waiting for redial or
    equivilent ?
  

Routines:
  
  * Command is the command processor which is called by the browser.
    options are given on the command line. Options are, therefore, restricted
    to 256 characters ?

  * NCOptions_SetSystemVariables2:
    * for all the variables passed, looks at CMOS_PREFIX, BLAST_PREFIX,
      SPECIAL_PREFIX
  
  * FindArgs:
    * Takes a HTML tag string and produces a HTML_Args_variablelist from it.
 
  * CatReplacement:
    * Replaces SPECIALTAG values (ie _NCOPTIONS) with the a value
      read from FindCNOPTIONSOptions routine ?
    * Assumes that no 'type' attribute means that it's a text field; better
      to enforce a type ? Never going to see another browser, so probably
      not necessary.
    * For valued variables, calls NCOptions_GetVariableValueString to read
      the value of that variable.
      For radio's, the second argument is the 'checked' value.
  
  * FindCNOPTIONSOptions:
    * Processes the a comma separated list into a list of options, stripping
      quotes around it. Modifies the string passed to it.
  
  * NCOptions_GetVariableValueString2:
    * Calls FindSpecialValueString to read out values.

  * FindSpecialValueString:
    * Only processes CMOS_PREFIX vars
    * stringspec = the way to decode the things we're parsing ?
    * intvalue = initial value of the variable, or INT_MIN if not valid/defined
    * value is returned in stringvalue (32 bytes allocated staticly)


Adding new nvram_ options :

* File c.Variables, routine FindSpecialValueString
  intvalue should be INT_MIN if you're returning a string, and set stringvalue
    to point to the string to return (static string).
  intvalue should be a number to return that as the string.
* File c.Variables, routine NCOptions_SetSystemVariables2  
* Whilst adding you can use ! at the beginning of any name to cause it to be
  ignored.


So...

CMOS_PREFIX (nvram_) is a read (via NCOptions_GetVariableValueString2) /
write (via NCOptions_SetSystemVariables2) option to include in the HTML
_NCOPTIONS attributes of input tags. _NCOPTIONS_<name> as a value is
substituted for the value of the <name> variable on input to the page,
allowing cascading.

NCOptions_SetSystemVariables2 also triggers actions.

<file_template> is read as the template to use when generating a new page.
<url> is set the URL of the page that caused the fetch.


How to write HTML files for NCOptions
-------------------------------------

Trigger mechanism :
  <form method="GET" action="NCOptions_OpenPage:">

Input substitutions :

  <input type=radio _NCOPTIONS="nvram_<variable>,<default>">
    selects the radio icon if the string value of <variable> matches that of
    <default>
  
  <input maxlength=<blah> size=<blah> _ncoptions="nvram_<variable>">
    text writable of given size, with default text set to value of <variable>
  
  <input type=hidden name=file_template value=<path>>
    file path to use as a template for the page we're giving you with the
    options on.
  
  <input type=hidden name=quit_page value=<url>>
    [ Not part of NCOptions module, but used within the Lazarus UI]
    Used to propogate the page which 'started' the options process.


Variable names
--------------
!*
  Ignored - gives a null

nvram__*
  Write to NVRAM module the value set.
  There are many options - you'll just have to consult the source for these.
    Language : Configure the language (values are those for territory numbers)
               If the language needs changing then the value of the variable
               'lang_confirm' will be used to display a page to confirm
               resetting the machine.

action_*
  Various actions subsequent to the operation.
    blasttv         : ?
    blastvcr        : ?
    blastcable      : ?
    blastprinter    : Print test page (to printer)
    dial            : does nothing
    updatebrowser   : ?
    centerprinthead : just that
    parkprinthead   : just that
    updatePPP       : performs an AlterSettings, passing ModemTimeout
                      (?)
    savemode        : sets mode from CMOS (?)
    changemode      : changes mode (?)
    restoremode     : return to old resolution and framerate (?)
    resetunit       : reset the unit by OS_Reset (reboot from scratch on
                      language change)

ncoptions_*
  Operations that are 'special'
    wait            : wait a number of centiseconds


SECURITY NOTE
-------------
NCOptions is a security hole for any STB that uses it; forms may be
submitted from external sites to NCOptions, and activate any of the events
which NCOptions supports. In the latest changes, this includes an action
to reset the machine. This might be used maliciously as an empty frame, or
other URL fetch method to cause a remote reset of the machine.

Similarly, zip debugging, as used on Lazarus and Bethany (possibly others)
is triggered by a printer type code. This could be reset remotely (as could
any of the other printer options, text sizing or whatever...). Basically,
any NVRAM tag can be written to from NCOptions, using a correctly formed
form submission.

Possible solutions:
  * Rolling key, generated on entry to the top level NCOptions screen, to
    check for a correct form submission.
  * ...

