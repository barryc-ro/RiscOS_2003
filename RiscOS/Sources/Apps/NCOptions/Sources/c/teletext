/* teletext.c */

#include "swis.h"
#include "TaskModule.h"

#include "Desk/Error2.h"
#include "Desk/Wimp.h"
#include "DebugLib/DebugLib.h"

#include "ttextandsubs.h"

#include "CMHGHead.h"
#include "global.h"

#include "teletext.h"


/* static variables and functions */
static int attempts = 0;

static void sendMessage( char *parameters );

/* Static function definitions */

/* Send the message to start a teletext session
   Entry:
     parameters - the parameter list to use
                  or NULL to use the saved one
*/
static void sendMessage( char *parameters )
{
  Desk_message_block  message;
  ttextandsubs_message_on *on = (ttextandsubs_message_on *)&message.data.words;

  parameters = parameters; /* For future expansion. Will probably need to take a copy.
                              in which case it is freed later.
                              There are 2 places, see comments below.
                           */

  message.header.action   = (Desk_message_action) TTextAndSubs_On;
  message.header.yourref  = 0;
  message.header.size     = 56;

  on->flags               = TTextAndSubs_On_TeletextMagazine;
  on->videoControlHandle  = 0;
  /* on->displayBBox      = No bounding box so no need to initialise */
  on->data1               = 0;
  on->data2               = 0;
 
  Desk_Error2_CheckOS
  ( _swix
    (  TaskModule_SendMessage, _INR(0,5),
       2u,                  /* flags (bit 1 set for FIFO message delivery) */
       &message,            /* message data                                */
       0,                   /* Destination, 0=broadcast                    */
       0,                   /* Destination icon                            */
       teletext_veneer,     /* Reply handler                               */
       global_privateWord
    )               
  );
}

/* extern function definitions */

/* Called from the main NCOptions code in responce to action_teletext
  Entry:
    parameters - the content of the value= parameter
*/
void teletext_action( char *parameters )
{
  sendMessage( parameters );
  attempts = 1;
}

/* Called on receipt of a message in responce to teletext_action() */
_kernel_oserror *teletext_handler(_kernel_swi_regs *r, void *pw)
{
  pw = pw;
  
  Desk_Error2_Try
  {
    Desk_message_block *messageIn = (Desk_message_block *) r->r[1];
    dprintf(("", "teletext_handler() entered with event code %i\n", r->r[0]));
    switch( r->r[0] )
    {
      case 17:
      case 18:
        /* probably an acknowledgement */
        switch( messageIn->header.action )
        {
          case TTextAndSubs_OnAck:
            /* Teletext is starting up so we don't need to do anything     */
            /* The message claim is deleted automatically                  */
            /* However, if the parameter list has been saved, free it here */
            break;
  
          default:
            /* Ignore everything else */
            break;
        }
        break;
  
      case 19:
        dprintf(( "", "Message returned.\n" ));
        if( messageIn->header.action == TTextAndSubs_On) 
        {
          if( attempts > 1 )
          {
            dprintf(( "", "Too many attempts = %i\n", attempts ));
            Desk_Error2_MsgTransHandle0( "TeletextFail" );
          }
          
          /* the TTextAndSubs_On message has bounced so start up the teletext application */
          dprintf(( "", "Starting teletext application" ));
          Desk_Error2_CheckOS ( _swix( TaskModule_StartTask, _INR(0,2), "run <TTXTView$Dir>" , 0, 0));
          dprintf(( "", "Returned from Starting teletext application" ));
          /* and try the message again */
          sendMessage( NULL ); 
          attempts++;          
        }
        break;
    }
  }

  Desk_Error2_Catch
  {
    /* However, if the parameter list has been saved, free it here */
    return Desk_Error2_ConvertToOS2();
  }
  Desk_Error2_EndCatch

  return NULL;
}

/* End of teletext.c */
