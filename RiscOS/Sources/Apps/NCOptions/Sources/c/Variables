#include <limits.h>
#include <string.h>
#include <stdio.h>

#include "Desk.Str.h"
#include "Desk.KernelSWIs.h"
#include "Desk.Error2.h"

#include "Str.h"

#include "Territory.h"
#include "Variables.h"



#define	CMOS_PREFIX	"nvram_"
#define	BLAST_PREFIX	"action_"

#define	dialprefix_STAR	11
#define	dialprefix_HASH	12


static char*	FindSpecialValueString( const char* name)
	{
	if ( 0==StrInitialCmp( name, CMOS_PREFIX))	{
		const char*	s = name + strlen( CMOS_PREFIX);
		int		intvalue		= INT_MIN;
		char*		stringspec		= "%i";
		static char	stringvalue[ 32];
		
		stringvalue[0] = 0;
		
		if ( 0)	;
		else if ( 0==Desk_stricmp( s, "dialprefix"))	{
			int	x = Desk_OS_Byte_ReadCMOS( 0x9e) & 15;
			if ( x==0)			strcpy( stringvalue, "");
			else if ( x<=10)		sprintf( stringvalue, "%i", x-1);
			else if ( dialprefix_STAR)	strcpy( stringvalue, "*");
			else if ( dialprefix_HASH)	strcpy( stringvalue, "#");
			else				strcpy( stringvalue, "");
			}
		else if ( 0==Desk_stricmp( s, "dialtype"))	intvalue = ( Desk_OS_Byte_ReadCMOS( 0x9e) >> 5) & 1;
		else if ( 0==Desk_stricmp( s, "dialwaiting"))	{
			intvalue	= ( Desk_OS_Byte_ReadCMOS( 0x9e) >> 4) & 1;
			stringspec	= "%02i";
			}
		else if ( 0==Desk_stricmp( s, "dialtime"))	intvalue = 0;
		else if ( 0==Desk_stricmp( s, "dialignore"))	intvalue = 0;
		
		else if ( 0==Desk_stricmp( s, "timezone"))	{
			NCConfig_territorysettings	ts;
			NCConfig_Territory_Read( &ts);
			intvalue = ts.timeoffset_actual / 60 / 60;	// Convert cs to 100ths of hour.
			}
		
		else if ( 0==Desk_stricmp( s, "printercode"))	{
			intvalue	= Desk_OS_Byte_ReadCMOS( 0x6b);
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "tvcode"))	{
			intvalue	= 0;
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "vcrcode"))	{
			intvalue	= 0;
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "cablecode"))	{
			intvalue	= 0;
			stringspec	= "%03i";
			}
		
		else if ( 0==Desk_stricmp( s, "tvsource"))	intvalue = 0;
		
		else	Desk_Error2_HandleTextf( "Don't know how to read variable '%s'", name);
		
		if ( intvalue != INT_MIN)	sprintf( stringvalue, stringspec, intvalue);
		
		return stringvalue;
		}
	
	return NULL;
	}


#if 0
int	NCOptions_GetVariableValue( const char* name, HTML_Args_variablelist* variables)
	{
	int			value;
	int			n;
	HTML_Args_variable*	v;
	
	value = FindSpecialValue( name);
	if ( value != INT_MIN)	return value;
	
	v = HTML_Args_FindPossibleVar( variables, name, Desk_bool_TRUE/*caseinsensitive*/);
	
	if ( !v)	return 0;
	
	else n = sscanf( v->value, "%i", &value);
	if ( n!=1)	Desk_Error2_HandleTextf( "Couldn't read integer from variable '%s' value'%s'", v->name, v->value);
	
	return value;
	}
#endif


char*	NCOptions_GetVariableValueString( const char* name, HTML_Args_variablelist* variables)
	{
	HTML_Args_variable*	v;
	char*			specialvalue;
	
	specialvalue = FindSpecialValueString( name);
	
	if ( specialvalue)	return specialvalue;
	
	/*	{
		static char	buffer[ 32];
		sprintf( buffer, "%i", value);
		return buffer;
		}
	*/
	v = HTML_Args_FindPossibleVar( variables, name, Desk_bool_TRUE/*caseinsensitive*/);
	
	if ( !v)	return "";
	else		return v->value;
	}


int	NCOptions_GetVariableValue( const char* name, HTML_Args_variablelist* variables)
	{
	char*	stringvalue = NCOptions_GetVariableValueString( name, variables);
	int	n;
	int	v;
	
	n = sscanf( stringvalue, "%i", &v);
	if ( n!=1)	Desk_Error2_HandleTextf( "Couldn't read integer from variable '%s' value '%s'", name, stringvalue);
	
	return v;
	}



void	NCOptions_SetSystemVariables( HTML_Args_variablelist* variables)
	{
	int	i;
	for ( i=0; i<variables->num; i++)
		{
		HTML_Args_variable*	var = &variables->vars[i];
		
		if ( 0==StrInitialCmp( var->name, CMOS_PREFIX))
			{
			char*	s = var->name + strlen( CMOS_PREFIX);
			int	intvalue = atoi( var->value);
			
			Desk_Debug_Printf( Desk_error_PLACE "NCOptions_SetSystemVariables, looking at variable '%s'='%s', intvalue=%i\n",
				var->name, var->value, intvalue
				);
			/*
			int	value;
			
			if ( var->value)	{
				int	n = sscanf( var->value, "%i", &value);
				if ( n!=1)	Desk_Error2_HandleTextf( "Couldn't read numeric value of '%s'='%s'", var->name, var->value);
				}
			else	value = 0;
			*/
			if ( 0)	;
			
			else if ( 0==Desk_stricmp( s, "dialprefix"))	{
				int	value;
				if ( var->value[0]=='*')	value = dialprefix_STAR;
				else if ( var->value[0]=='#')	value = dialprefix_HASH;
				else if ( var->value[0]==0)	value = 0;
				else	{
					value = var->value[0] - '0' + 1;
					if ( value < 1 || value>10)	Desk_Error2_HandleTextf( "Unrecognised dial prefix '%s'", var->value);
					}
				
				Desk_OS_Byte_WriteCMOSMask( 0x9e, 15, value);
				}
			
			else if ( 0==Desk_stricmp( s, "dialtype"))	Desk_OS_Byte_WriteCMOSMask( 0x9e, 1<<5, intvalue<<5);
			else if ( 0==Desk_stricmp( s, "dialwaiting"))	Desk_OS_Byte_WriteCMOSMask( 0x9e, 1<<4, intvalue<<4);
			else if ( 0==Desk_stricmp( s, "dialtime"))	;
			else if ( 0==Desk_stricmp( s, "dialignore"))	;
			
			else if ( 0==Desk_stricmp( s, "timezone"))	{
				NCConfig_territorysettings	ts;
				intvalue *= 60*60;	// Convert to cs.
				NCConfig_Territory_Read( &ts);
				ts.timeoffset_nodst += intvalue-ts.timeoffset_actual;
				ts.timeoffset_actual = intvalue;
				NCConfig_Territory_Set2( &ts);
				}
			else if ( 0==Desk_stricmp( s, "printercode"))	Desk_OS_Byte_WriteCMOS( 0x6b, intvalue);
			else if ( 0==Desk_stricmp( s, "tvcode"))	;
			else if ( 0==Desk_stricmp( s, "vcrcode"))	;
			else if ( 0==Desk_stricmp( s, "cablecode"))	;
			else if ( 0==Desk_stricmp( s, "tvsource"))	;
			
			else	Desk_Error2_HandleTextf( "Don't know how to write NVRAM variable '%s'", var->name);
			}
		
		else if ( 0==StrInitialCmp( var->name, BLAST_PREFIX))	{
			char*	s = var->name + strlen( BLAST_PREFIX);
			if ( 0)	;
			else if ( 0==Desk_stricmp( s, "blastprinter"))	;
			else if ( 0==Desk_stricmp( s, "blasttv"))	;
			else if ( 0==Desk_stricmp( s, "blastvcr"))	;
			else if ( 0==Desk_stricmp( s, "blastcable"))	;
			else if ( 0==Desk_stricmp( s, "dial"))		;
			else	Desk_Error2_HandleTextf( "Don't know how to do action for variable '%s'", var->name);
			}
		}
	}
