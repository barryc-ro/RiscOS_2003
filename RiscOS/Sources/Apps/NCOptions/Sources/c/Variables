#include <limits.h>
#include <string.h>
#include <stdio.h>

#include "swis.h"

#include "Desk.Str.h"
#include "Desk.KernelSWIs.h"
#include "Desk.Error2.h"

#include "Str.h"

#include "Territory.h"
#include "Variables.h"



#define	CMOS_PREFIX	"nvram_"
#define	BLAST_PREFIX	"action_"

#define	dialprefix_STAR	11
#define	dialprefix_HASH	12


/*
These will deliberately cause cc to complain when swis.h is updated to
contain the SWI numbers.
 */

#define	NVRAM_Read	0x4ee00
#define	NVRAM_Write	0x4ee01

#define	RCAIRBlast_BlastToTV	0x4f181
#define	RCAIRBlast_BlastToVCR	0x4f182
#define	RCAIRBlast_BlastToCable	0x4f183




#define	NOTSUCHTAG	"Unable to %s NVRAM tag '%s' - no such tag"
#define	NOTAWORD	"Unable to %s NVRAM tag '%s' - not a word"
#define	UNRECOGERROR	"Unable to %s NVRAM tag '%s' - unrecognised error number %i"

/*
These error strings are duplicated in read and write fns so that cc can
use the same literal in both functions.
 */

static void	Desk_NVRAM_WriteInt( const char* tag, int value)
	{
	int	e;
	Desk_Error2_CheckOS( _swix( NVRAM_Write, _INR(0,2)|_OUT(0), tag, &value, 0, &e));
	if ( e>=0)	;
	else if (e==-1)	/*Desk_Error2_HandleTextf( NOTSUCHTAG, "read", tag);*/		Desk_Error2_MsgTransHandlef( "NVTag", "read", tag);
	else if (e==-4)	/*Desk_Error2_HandleTextf( NOTAWORD, "read", tag);*/		Desk_Error2_MsgTransHandlef( "NVWord", "read", tag);
	else		/*Desk_Error2_HandleTextf( UNRECOGERROR, "read", tag, e);*/	Desk_Error2_MsgTransHandlef( "NVReg", "read", tag);
	}

static int	Desk_NVRAM_ReadInt( const char* tag)
	{
	int	value;
	int	e;
	Desk_Error2_CheckOS( _swix( NVRAM_Read, _INR(0,2)|_OUT(0), tag, &value, 0, &e));
	if ( e>=0)	return value;
	else if (e==-1)	/*Desk_Error2_HandleTextf( NOTSUCHTAG, "write", tag);*/		Desk_Error2_MsgTransHandlef( "NVTag", "write", tag);
	else if (e==-4)	/*Desk_Error2_HandleTextf( NOTAWORD, "write", tag);*/		Desk_Error2_MsgTransHandlef( "NVWord", "write", tag);
	else		/*Desk_Error2_HandleTextf( UNRECOGERROR, "write", tag, e);*/	Desk_Error2_MsgTransHandlef( "NVReg", "write", tag);
	return 0;
	}


static char*	FindSpecialValueString( const char* name)
	{
	if ( 0==StrInitialCmp( name, CMOS_PREFIX))	{
		const char*	s = name + strlen( CMOS_PREFIX);
		int		intvalue		= INT_MIN;
		char*		stringspec		= "%i";
		static char	stringvalue[ 32]	= "";
		
		if ( 0)	;
		
		else if ( '_'==s[0])	intvalue = Desk_NVRAM_ReadInt( s+1);
		
		else if ( 0==Desk_stricmp( s, "dialprefix"))	{
			int	x = Desk_NVRAM_ReadInt( "ModemPrefix");
			if ( x==0)			strcpy( stringvalue, "");
			else if ( x<=10)		sprintf( stringvalue, "%i", x-1);
			else if ( dialprefix_STAR)	strcpy( stringvalue, "*");
			else if ( dialprefix_HASH)	strcpy( stringvalue, "#");
			else				strcpy( stringvalue, "");
			}
		else if ( 0==Desk_stricmp( s, "dialtype"))	intvalue = Desk_NVRAM_ReadInt( "ModemDialType");
		else if ( 0==Desk_stricmp( s, "dialwaiting"))	{
			intvalue = Desk_NVRAM_ReadInt( "ModemDialTone");
			stringspec	= "%02i";
			}
		else if ( 0==Desk_stricmp( s, "dialtime"))	intvalue = 0;
		else if ( 0==Desk_stricmp( s, "dialignore"))	intvalue = 0;
		
		else if ( 0==Desk_stricmp( s, "timezone"))	{
			NCConfig_territorysettings	ts;
			NCConfig_Territory_Read( &ts);
			intvalue = ts.timeoffset_actual / 60 / 60;	// Convert cs to 100ths of hour.
			}
		
		else if ( 0==Desk_stricmp( s, "printercode"))	{
			intvalue	= Desk_NVRAM_ReadInt( "PrinterCode");
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "tvcode"))	{
			intvalue	= Desk_NVRAM_ReadInt( "IRTVCode");
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "vcrcode"))	{
			intvalue	= Desk_NVRAM_ReadInt( "IRVCRCode");
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "cablecode"))	{
			intvalue	= Desk_NVRAM_ReadInt( "IRCableCode");
			stringspec	= "%03i";
			}
		
		else if ( 0==Desk_stricmp( s, "tvsource"))	intvalue = 0;
		
		else	//Desk_Error2_HandleTextf( "Don't know how to read variable '%s'", name);
			Desk_Error2_MsgTransHandlef( "NVRead", name);
		
		if ( intvalue != INT_MIN)	sprintf( stringvalue, stringspec, intvalue);
		
		return stringvalue;
		}
	
	return NULL;
	}



char*	NCOptions_GetVariableValueString( const char* name, HTML_Args_variablelist* variables)
	{
	HTML_Args_variable*	v;
	char*			specialvalue;
	
	specialvalue = FindSpecialValueString( name);
	
	if ( specialvalue)	return specialvalue;
	
	v = HTML_Args_FindPossibleVar( variables, name, Desk_bool_TRUE/*caseinsensitive*/);
	
	if ( !v)	return "";
	else		return v->value;
	}


int	NCOptions_GetVariableValue( const char* name, HTML_Args_variablelist* variables)
	{
	char*	stringvalue = NCOptions_GetVariableValueString( name, variables);
	int	n;
	int	v;
	
	n = sscanf( stringvalue, "%i", &v);
	if ( n!=1)	//Desk_Error2_HandleTextf( "Couldn't read integer from variable '%s' value '%s'", name, stringvalue);
			Desk_Error2_MsgTransHandlef( "NVReadV", name, stringvalue);
	
	return v;
	}



void	NCOptions_SetSystemVariables( HTML_Args_variablelist* variables)
	{
	int	i;
	for ( i=0; i<variables->num; i++)
		{
		HTML_Args_variable*	var = &variables->vars[i];
		
		if ( 0==StrInitialCmp( var->name, CMOS_PREFIX))
			{
			char*	s = var->name + strlen( CMOS_PREFIX);
			int	intvalue = atoi( var->value);
			
			Desk_Debug_Printf( Desk_error_PLACE "NCOptions_SetSystemVariables, looking at variable '%s'='%s', intvalue=%i\n",
				var->name, var->value, intvalue
				);
			
			if ( 0)	;
			
			else if ( '_'==s[0])	Desk_NVRAM_WriteInt( s+1, intvalue);
			
			else if ( 0==Desk_stricmp( s, "dialprefix"))	{
				int	value;
				if ( var->value[0]=='*')	value = dialprefix_STAR;
				else if ( var->value[0]=='#')	value = dialprefix_HASH;
				else if ( var->value[0]==0)	value = 0;
				else	{
					value = var->value[0] - '0' + 1;
					if ( value < 1 || value>10)	//Desk_Error2_HandleTextf( "Unrecognised dial prefix '%s'", var->value);
									Desk_Error2_MsgTransHandlef( "BadDial", var->value);
					}
				Desk_NVRAM_WriteInt( "ModemPrefix", value);
				}
			
			else if ( 0==Desk_stricmp( s, "dialtype"))	Desk_NVRAM_WriteInt( "ModemDialType", intvalue);
			else if ( 0==Desk_stricmp( s, "dialwaiting"))	Desk_NVRAM_WriteInt( "ModemDialTone", intvalue);
			else if ( 0==Desk_stricmp( s, "dialtime"))	;
			else if ( 0==Desk_stricmp( s, "dialignore"))	;
			
			else if ( 0==Desk_stricmp( s, "timezone"))	{
				NCConfig_territorysettings	ts;
				intvalue *= 60*60;	// Convert to cs.
				NCConfig_Territory_Read( &ts);
				ts.timeoffset_nodst += intvalue-ts.timeoffset_actual;
				ts.timeoffset_actual = intvalue;
				NCConfig_Territory_Set2( &ts);
				}
			else if ( 0==Desk_stricmp( s, "printercode"))	Desk_NVRAM_WriteInt( "PrinterCode", intvalue);
			else if ( 0==Desk_stricmp( s, "tvcode"))	Desk_NVRAM_WriteInt( "IRTVCode", intvalue);
			else if ( 0==Desk_stricmp( s, "vcrcode"))	Desk_NVRAM_WriteInt( "IRVCRCode", intvalue);
			else if ( 0==Desk_stricmp( s, "cablecode"))	Desk_NVRAM_WriteInt( "IRCableCode", intvalue);
			else if ( 0==Desk_stricmp( s, "tvsource"))	;
			
			else	//Desk_Error2_HandleTextf( "Don't know how to write NVRAM variable '%s'", var->name);
				Desk_Error2_MsgTransHandlef( "NVWrite", var->name);
			}
		
		else if ( 0==StrInitialCmp( var->name, BLAST_PREFIX))	{
			int	intvalue	= atoi( var->value);
			int	blastflags	= 3;	// Bits are: 8 repeat, 4-7 delay, 3 port2, 2 port1, 1 port 0, 0 LEDs.
			char*	s = var->name + strlen( BLAST_PREFIX);
			if ( 0)	;
			else if ( 0==Desk_stricmp( s, "blastprinter"))	;
			else if ( 0==Desk_stricmp( s, "blasttv"))	Desk_Error2_CheckOS( _swix( RCAIRBlast_BlastToTV, _INR(0,1), intvalue, blastflags));
			else if ( 0==Desk_stricmp( s, "blastvcr"))	Desk_Error2_CheckOS( _swix( RCAIRBlast_BlastToTV, _INR(0,1), intvalue, blastflags));
			else if ( 0==Desk_stricmp( s, "blastcable"))	Desk_Error2_CheckOS( _swix( RCAIRBlast_BlastToTV, _INR(0,1), intvalue, blastflags));
			else if ( 0==Desk_stricmp( s, "dial"))		;
			else	//Desk_Error2_HandleTextf( "Don't know how to do action for variable '%s'", var->name);
				Desk_Error2_MsgTransHandlef( "Action", var->name);
			}
		}
	}
