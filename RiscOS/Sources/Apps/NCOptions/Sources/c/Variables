#include <limits.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include <time.h>

#include "swis.h"

#include "Desk.Str.h"
#include "Desk.KernelSWIs.h"
#include "Desk.Error2.h"
#include "Desk.Wimp.h"

#include "Str.h"

#include "Territory.h"
#include "Variables.h"
#include "NVRAM.h"
#include "Modem.h"



#define	CMOS_PREFIX	"nvram_"
#define	BLAST_PREFIX	"action_"
#define	SPECIAL_PREFIX	"ncoptions_"

#define	dialprefix_STAR	11
#define	dialprefix_HASH	12

#define	PPrimer_Change 0x4b100


/*
static char	GetDialKeyCharacter( int nvramvalue)
	{
	static char	list[ 16] = { '\0', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#', '\0', '\0', '\0'};
	if ( nvramvalue<0 || nvramvalue>15)	{
		Desk_Error2_MsgTransHandlef( "NVBadKey", nvramvalue);
		}
	return list[ nvramvalue];
	}

static char	GetDialKeyNyble0( char c)
	{
	if ( 0)	;
	else if ( c=='\0')	return 0;
	else if ( c=='*')	return dialprefix_STAR;
	else if ( c=='#')	return dialprefix_HASH;
	else if ( isdigit( c))	return c-'0' + 1;
	else			return 0;
	}

static char	GetDialKeyNyble( char c)
	{
	char	n = GetDialKeyNyble0( c);
	Desk_Debug_Printf( Desk_error_PLACE "GetDialKeyNyble( '%c') returning %i\n", c, n);
	return n;
	}
*/

/*
These will deliberately cause cc to complain when swis.h is updated to
contain the SWI numbers.
 */

#define	RCAIRBlast_BlastToTV	0x4f181
#define	RCAIRBlast_BlastToVCR	0x4f182
#define	RCAIRBlast_BlastToCable	0x4f183




static char*	FindSpecialValueString( const char* name)
	{
	if ( 0==StrInitialCmp( name, CMOS_PREFIX))	{
		const char*	s = name + strlen( CMOS_PREFIX);
		int		intvalue		= INT_MIN;
		char*		stringspec		= "%i";
		static char	stringvalue[ 32]	= "";
		
		if ( 0)	;
		
		else if ( '_'==s[0])	intvalue = NVRAM_ReadInt( s+1);
		
		else if ( 0==Desk_stricmp( s, "dialprefix"))	{
			/*
			int	x = NVRAM_ReadInt( "ModemPrefix");
			if ( x==0)			strcpy( stringvalue, "");
			else if ( x<=10)		sprintf( stringvalue, "%i", x-1);
			else if ( dialprefix_STAR)	strcpy( stringvalue, "*");
			else if ( dialprefix_HASH)	strcpy( stringvalue, "#");
			else				strcpy( stringvalue, "");
			*/
			ModemDecode( NVRAM_ReadInt( "ModemPrefix"), stringvalue);
			}
		else if ( 0==Desk_stricmp( s, "dialtype"))	intvalue = NVRAM_ReadInt( "ModemDialType");
		else if ( 0==Desk_stricmp( s, "dialwaiting"))	{
			ModemDecode( NVRAM_ReadInt( "ModemCallWaiting"), stringvalue);
			/*
			int	w1 = NVRAM_ReadInt( "ModemCallWaiting1");
			int	w2 = NVRAM_ReadInt( "ModemCallWaiting2");
			int	w1hi = w1 >> 4;
			int	w1lo = w1 & 15;
			int	w2hi = w2 >> 4;
			int	w2lo = w2 & 15;
			if ( w1hi==0)	strcpy( stringvalue, "00");
			else	{
				//if ( w1hi!=dialprefix_STAR)	Desk_Error2_MsgTransHandlef( "NVDialWait1hi", w1hi);
				// Treat w1lo-w2hi-w2lo as zero-terminated.
				stringvalue[0] = GetDialKeyCharacter( w1lo);
				stringvalue[1] = GetDialKeyCharacter( w2hi);
				stringvalue[2] = GetDialKeyCharacter( w2lo);
				stringvalue[3] =0;	// Ensure termination.
				}
			*/
			}
		/*
		else if ( 0==Desk_stricmp( s, "dialtime"))	intvalue = 0;
		else if ( 0==Desk_stricmp( s, "dialignore"))	intvalue = 0;
		*/
		else if ( 0==Desk_stricmp( s, "timezone"))	{
			NCConfig_territorysettings	ts;
			NCConfig_Territory_Read( &ts);
			intvalue = ts.timeoffset_actual / 60 / 60;	// Convert cs to 100ths of hour.
			}
		
		else if ( 0==Desk_stricmp( s, "printercode"))	{
			intvalue	= NVRAM_ReadInt( "PrinterCode");
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "printercolour"))	{
			intvalue	= NVRAM_ReadInt( "PrinterColour");
			Desk_Debug_Printf( Desk_error_PLACE "nvram_printercolour returning %i", intvalue);
			stringspec	= "%i";
			}
		else if ( 0==Desk_stricmp( s, "tvcode"))	{
			intvalue	= NVRAM_ReadInt( "IRTVCode");
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "vcrcode"))	{
			intvalue	= NVRAM_ReadInt( "IRVCRCode");
			stringspec	= "%03i";
			}
		else if ( 0==Desk_stricmp( s, "cablecode"))	{
			intvalue	= NVRAM_ReadInt( "IRCableCode");
			stringspec	= "%03i";
			}
		
		/*
		else if ( 0==Desk_stricmp( s, "dialtime"))	intvalue	= NVRAM_ReadInt( "ModemDialTime");
		else if ( 0==Desk_stricmp( s, "dialignore"))	intvalue	= NVRAM_ReadInt( "ModemDialIgnore");
		else if ( 0==Desk_stricmp( s, "tvchannel"))	intvalue	= NVRAM_ReadInt( "TVChannel");
		*/
		else if ( 0==Desk_stricmp( s, "tvsource"))	intvalue	= NVRAM_ReadInt( "TVSource");
		else if ( 0==Desk_stricmp( s, "cablechannel"))  intvalue	= NVRAM_ReadInt( "CableChannel");
		
		else	//Desk_Error2_HandleTextf( "Don't know how to read variable '%s'", name);
			Desk_Error2_MsgTransHandlef( "NVRead", name);
		
		if ( intvalue != INT_MIN)	sprintf( stringvalue, stringspec, intvalue);
		
		Desk_Debug_Printf( Desk_error_PLACE "returning '%s'='%s'\n", s, stringvalue);
		
		return stringvalue;
		}
	
	return NULL;
	}



char*	NCOptions_GetVariableValueString2( const char* name, HTML_Args_variablelist* variables, char* buffer)
{
	HTML_Args_variable*	v;
	char*			specialvalue;
	
	specialvalue = FindSpecialValueString( name);
	
	if ( specialvalue)	return specialvalue;
	
	v = HTML_Args_FindPossibleVar( variables, name, Desk_bool_TRUE/*caseinsensitive*/);
	
	if ( !v)	return "";
	else
	{
		if ( buffer)	return buffer + (int) (v->value);
		else		return v->value;
	}
}


char*	NCOptions_GetVariableValueString( const char* name, HTML_Args_variablelist* variables)
	{
	return NCOptions_GetVariableValueString2( name, variables, NULL);
	}


int	NCOptions_GetVariableValue( const char* name, HTML_Args_variablelist* variables)
	{
	char*	stringvalue = NCOptions_GetVariableValueString( name, variables);
	int	n;
	int	v;
	
	n = sscanf( stringvalue, "%i", &v);
	if ( n!=1)	//Desk_Error2_HandleTextf( "Couldn't read integer from variable '%s' value '%s'", name, stringvalue);
			Desk_Error2_MsgTransHandlef( "NVReadV", name, stringvalue);
	
	return v;
	}



static void	NCOptions_SetSystemVariables2( HTML_Args_variablelist* variables, nvram_changelist* changelist)
	{
	int	i;
	for ( i=0; i<variables->num; i++)
		{
		HTML_Args_variable*	var = &variables->vars[i];
		
		if ( 0==StrInitialCmp( var->name, CMOS_PREFIX))
			{
			char*	s = var->name + strlen( CMOS_PREFIX);
			int	intvalue = atoi( var->value);
			
			Desk_Debug_Printf( Desk_error_PLACE "NCOptions_SetSystemVariables, looking at variable '%s'='%s', intvalue=%i\n",
				var->name, var->value, intvalue
				);
			
			if ( 0)	;
			
			else if ( '_'==s[0])	NVRAM_WriteAndStoreOld( s+1, intvalue, changelist);
			
			else if ( 0==Desk_stricmp( s, "dialprefix"))	{
				/*
				int	value;
				if ( var->value[0]=='*')	value = dialprefix_STAR;
				else if ( var->value[0]=='#')	value = dialprefix_HASH;
				else if ( var->value[0]==0)	value = 0;
				else	{
					value = var->value[0] - '0' + 1;
					if ( value < 1 || value>10)	//Desk_Error2_HandleTextf( "Unrecognised dial prefix '%s'", var->value);
									Desk_Error2_MsgTransHandlef( "BadDial", var->value);
					}
				NVRAM_WriteAndStoreOld( "ModemPrefix", value, changelist);
				*/
				NVRAM_WriteAndStoreOld( "ModemPrefix", ModemEncode( var->value), changelist);
				}
			
			else if ( 0==Desk_stricmp( s, "dialtype"))	NVRAM_WriteAndStoreOld( "ModemDialType",	intvalue, changelist);
			
			else if ( 0==Desk_stricmp( s, "dialwaiting"))	{
				NVRAM_WriteAndStoreOld( "ModemCallWaiting", ModemEncode( var->value), changelist);
				/*
				Desk_bool	nonzero = Desk_bool_FALSE;
				
				Desk_Debug_Printf( Desk_error_PLACE "Writing nvram_dialwaiting value '%s'\n", var->value);
				
				// Find whether value is '00' or equivalent.
					{
					int	i;
					for ( i=0; var->value[i]; i++)	{
						if ( var->value[i]!='0')	{
							nonzero = Desk_bool_TRUE;
							break;
							}
						}
					}
				
				if ( !nonzero)	{
					NVRAM_WriteAndStoreOld( "ModemCallWaiting1", 0, changelist);
					NVRAM_WriteAndStoreOld( "ModemCallWaiting2", 0, changelist);
					}
				else	{
					int	w1 = 0;
					int	w2 = 0;
					char	value[5]= { 0, 0, 0, 0, 0};
					strncpy( value, var->value, 4);
					
					w1 = (GetDialKeyNyble( '*') << 4) + GetDialKeyNyble( value[0]);
					w2 = (GetDialKeyNyble( value[1]) << 4) + GetDialKeyNyble( value[2]);
					
					Desk_Debug_Printf( Desk_error_PLACE "Writing nvram_dialwaiting values %02x %02x\n", w1, w2);
					NVRAM_WriteAndStoreOld( "ModemCallWaiting1", w1, changelist);
					NVRAM_WriteAndStoreOld( "ModemCallWaiting2", w2, changelist);
					}
				*/
				}
			
			//else if ( 0==Desk_stricmp( s, "dialtime"))	NVRAM_WriteAndStoreOld( "ModemDialTime",	intvalue, changelist);
			//else if ( 0==Desk_stricmp( s, "dialignore"))	NVRAM_WriteAndStoreOld( "ModemDialIgnore",	intvalue, changelist);
			
			else if ( 0==Desk_stricmp( s, "timezone"))	{
				NCConfig_territorysettings	ts;
				intvalue *= 60*60;	// Convert to cs.
				NCConfig_Territory_Read( &ts);
				ts.timeoffset_nodst += intvalue-ts.timeoffset_actual;
				ts.timeoffset_actual = intvalue;
				NCConfig_Territory_Set2( &ts);
				}
			
			/*
			This code restores printer setting after any error. This is now done automatically...
			else if ( 0==Desk_stricmp( s, "printercode"))
				{
				Desk_os_error*		pprimererror;
				int			old_printercode;
				int			old_printercolour;
				
				// We look for any setting of nvram__PrinterColour - if the printer-changing fails,
				// we need to restore the printercolour value.
				// We also need to set printercolour before calling PPrimer_Change, otherwise
				// it can complain if the new printer doesn't support the current NVRAM colour
				// setting.
				
				old_printercode		= Desk_NVRAM_ReadInt( "PrinterCode");	// So we can restore in case of error.
				old_printercolour	= Desk_NVRAM_ReadInt( "PrinterColour");
				
					{
					HTML_Args_variable*	colvar = HTML_Args_FindPossibleVar( variables, "nvram__PrinterColour", Desk_bool_TRUE);
					if ( colvar)	Desk_NVRAM_WriteInt( "PrinterColour", atoi( colvar->value));
					}
				
				Desk_NVRAM_WriteInt( "PrinterCode", intvalue);
				pprimererror = _swix( PPrimer_Change, 0);
				
				if ( pprimererror)	{
					// Bad printer code, so reset NVRAM to old printer code, and then raise the error.
					// Also (11 Jun 1997) reset colour status.
					Desk_NVRAM_WriteInt( "PrinterCode", old_printercode);
					Desk_NVRAM_WriteInt( "PrinterColour", old_printercolour);
					Desk_Error2_CheckOS( pprimererror);
					}
				}
			*/
			else if ( 0==Desk_stricmp( s, "printercode"))
				{
				// We need to set printercolour before calling PPrimer_Change, otherwise
				// it can complain if the new printer doesn't support the current NVRAM colour
				// setting.
					{
					HTML_Args_variable*	colvar = HTML_Args_FindPossibleVar( variables, "nvram__PrinterColour", Desk_bool_TRUE);
					if ( colvar)	NVRAM_WriteAndStoreOld( "PrinterColour", atoi( colvar->value), changelist);
					}
				
				NVRAM_WriteAndStoreOld( "PrinterCode", intvalue, changelist);
				Desk_Error2_CheckOS( _swix( PPrimer_Change, 0));
				}
			
			else if ( 0==Desk_stricmp( s, "printercolour"))
				{
				NVRAM_WriteAndStoreOld( "PrinterColour", intvalue, changelist);
				Desk_Error2_CheckOS( _swix( PPrimer_Change, 0));
				}
			
			else if ( 0==Desk_stricmp( s, "tvcode"))	NVRAM_WriteAndStoreOld( "IRTVCode", intvalue, changelist);
			else if ( 0==Desk_stricmp( s, "vcrcode"))	NVRAM_WriteAndStoreOld( "IRVCRCode", intvalue, changelist);
			else if ( 0==Desk_stricmp( s, "cablecode"))	NVRAM_WriteAndStoreOld( "IRCableCode", intvalue, changelist);
			
			/*
			else if ( 0==Desk_stricmp( s, "tvchannel"))	NVRAM_WriteAndStoreOld( "TVChannel", intvalue, changelist);
			*/
			else if ( 0==Desk_stricmp( s, "tvsource"))	NVRAM_WriteAndStoreOld( "TVSource", intvalue, changelist);
			else if ( 0==Desk_stricmp( s, "cablechannel"))	NVRAM_WriteAndStoreOld( "CableChannel", intvalue, changelist);
			
			else	//Desk_Error2_HandleTextf( "Don't know how to write NVRAM variable '%s'", var->name);
				Desk_Error2_MsgTransHandlef( "NVWrite", var->name);
			}
		
		else if ( 0==StrInitialCmp( var->name, SPECIAL_PREFIX))
			{
			int	intvalue	= atoi( var->value);
			char*	s		= var->name + strlen( SPECIAL_PREFIX);
			
			if ( 0)	;
			
			else if ( 0==Desk_stricmp( s, "wait"))
				{
				clock_t	t = clock();
				while ( clock()-t < intvalue)	;
				}
			
			else	Desk_Error2_MsgTransHandlef( "Special", var->name);
			}
		
		else if ( 0==StrInitialCmp( var->name, BLAST_PREFIX))	{
			int	intvalue	= atoi( var->value);
			int	blastflags	= 163;	// Bits are: 8 repeat, 4-7 delay, 3 port2, 2 port1, 1 port 0, 0 LEDs.
			char*	s = var->name + strlen( BLAST_PREFIX);
			
			Desk_Debug_Printf( Desk_error_PLACE "NCOptions_SetSystemVariables, handling blasting variable '%s'='%s', intvalue=%i\n",
				var->name, var->value, intvalue
				);
			
			if ( 0)	;
			
			else if ( 0==Desk_stricmp( s, "blastprinter"))
				{
				int	printercode = NVRAM_ReadInt( "PrinterCode");
				
				if ( 0==printercode || 999==printercode)
					{
					// Desk_Error2_MsgTransHandle0( "NoPrinter");
					// Current behaviour is to ignore the request to print a test page.
					}
				else	{
					Desk_message_block	message;
					message.header.action	= (Desk_message_action) 0x4af80;	// Message_Open_URL
					message.header.yourref	= 0;
					message.header.size	= 256;
					strcpy( message.data.bytes, "NCInt:PrintPage");
					Desk_Error2_CheckOS(
						_swix(	0x4d300/*TaskModule_SendMessage*/, _INR(0,4),
							0,		// flags
							&message,	// message data
							0,		// Destination, 0=broadcast
							0,		// Destination icon
							0		// Reply handler - none.
							)
						);
					}
				}
			
			else if ( 0==Desk_stricmp( s, "blasttv"))
				{
				// Toggle TV power.
				Desk_Debug_Printf( Desk_error_PLACE "NCOptions_SetSystemVariables calling RCAIRBlast_BlastToTV, intvalue=%i\n", intvalue);
				Desk_Error2_CheckOS( _swix( RCAIRBlast_BlastToTV, _INR(0,1), intvalue /*0 toggles power*/, blastflags));
				}
			
			else if ( 0==Desk_stricmp( s, "blastvcr"))
				Desk_Error2_CheckOS( _swix( RCAIRBlast_BlastToVCR, _INR(0,1), intvalue /*7 toggles power*/, blastflags));
			
			else if ( 0==Desk_stricmp( s, "blastcable"))
				Desk_Error2_CheckOS( _swix( RCAIRBlast_BlastToCable, _INR(0,1), intvalue /*0 toggles power*/, blastflags));
				
			else if ( 0==Desk_stricmp( s, "dial"))		;
			
			else	//Desk_Error2_HandleTextf( "Don't know how to do action for variable '%s'", var->name);
				Desk_Error2_MsgTransHandlef( "Action", var->name);
			}
		}
	}



void	NCOptions_SetSystemVariables( HTML_Args_variablelist* variables)
{
	nvram_changelist	changelist;
	
	NVRAM_InitChangeList( &changelist);
	
	Desk_Error2_Try
	{
		NCOptions_SetSystemVariables2( variables, &changelist);
	}
	Desk_Error2_Catch
	{
		NVRAM_RestoreOld( &changelist);	// Restore all NVRAM that was changed by NCOptions_SetSystemVariable2().
		NVRAM_FreeChangeList( &changelist);
		Desk_Error2_ReThrow();
	}
	Desk_Error2_EndCatch
	
	NVRAM_FreeChangeList( &changelist);
}
