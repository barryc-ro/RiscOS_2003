#include <string.h>

#include "Desk.Error2.h"
#include "Desk.DeskMem.H"

#include "Variables2.h"
#include "Variables.h"



static void	BufferAppendString( Desk_deskmem_buffer* buffer, const char* string)
	{
	int	len = strlen( string);
	int	offset = Desk_DeskMem_BufferGetDataSize( buffer);
	Desk_DeskMem_BufferEnsureExtra( buffer, 1 + len);
	memcpy( Desk_DeskMem_BufferGetString( buffer) + offset, string, 1 + len);
	}

#ifdef Desk_DEBUG
	static int	global_offset = 0;
#endif




static int	Expand( Desk_deskmem_buffer* buffer, int pos, HTML_Args_variablelist* args)
/*
Expands any [varname] in buffer, starting at postion 'pos'. [...]'s are
dealt with recursively. Returns number of characters dealt with. On
entry, all variables in 'args' are expected to have offsets into
'buffer' as their values, rather than straight (char*)'s.

Although we insert/remove characters at or after position pos, the only
variables in 'args' have their values /before/ position 'pos' in
'buffer', so the values aren't corrupted by out insertion/removal
operations.
 */
	{
	int	i;
	
	Desk_Debug_Printf( Desk_error_PLACE "Expanding '%s'\n", Desk_DeskMem_BufferGetString( buffer) + pos);
	
	for ( i=pos; Desk_DeskMem_BufferGetString( buffer)[i] != 0;)	{
		
		if ( 0==Desk_DeskMem_BufferGetString( buffer)[i] || ']'==Desk_DeskMem_BufferGetString( buffer)[i])	break;
			// terminate at end of string or unmatched ']'.
		
		if ( Desk_DeskMem_BufferGetString( buffer)[i] == '[')	{
			int			varname_start = i+1;
			int			varname_len	= Expand( buffer, varname_start, args);
			char*			varvalue;
			int			varvalue_len;
			//HTML_Args_variable*	var;
			
			if ( Desk_DeskMem_BufferGetString( buffer)[ varname_start + varname_len] != ']')	Desk_Error2_MsgTransHandlef( "VNoClose");
			Desk_DeskMem_BufferGetString( buffer)[ varname_start + varname_len] = 0;
			
			/*
			var = HTML_Args_FindPossibleVar2( args, Desk_DeskMem_BufferGetString( buffer)+varname_start, Desk_bool_TRUE /case insensitive/);
			if ( !var)	varvalue = "";
			else		varvalue = Desk_DeskMem_BufferGetString( buffer) + ((int) (var->value));
			*/
			
			varvalue = NCOptions_GetVariableValueString2( 
					Desk_DeskMem_BufferGetString( buffer)+varname_start, 
					args, 
					Desk_DeskMem_BufferGetString( buffer)
					);
			
			Desk_Debug_Printf( Desk_error_PLACE "Value of '%s' is '%s'\n", Desk_DeskMem_BufferGetString( buffer)+varname_start, varvalue);
			
			// Replace '[variable name]' by 'variable value' in the buffer. The '+2' is for the '[]'
			varvalue_len = strlen( varvalue);
			Desk_DeskMem_BufferMidExtend( buffer, varname_start+varname_len+1, varvalue_len-(varname_len+2));
			memcpy( Desk_DeskMem_BufferGetString( buffer)+varname_start-1, varvalue, varvalue_len);
			
			//Desk_Debug_Printf( Desk_error_PLACE "Expand: buffer is '%s'\n", 
			//	Desk_DeskMem_BufferGetString( buffer)+global_offset/*+varname_start-1*/
			//	);
			
			i += varvalue_len;
			}
		
		else	i++;
		}
	
	/*
	Desk_Debug_Printf( Desk_error_PLACE "Expand: buffer (global_offset=%i, pos=%i, i=%i) is '%s'\n", 
				global_offset,
				pos,
				i,
				Desk_DeskMem_BufferGetString( buffer)+global_offset
				);
	*/
	
	Desk_Debug_Printf( Desk_error_PLACE "Expand returning '%s'\n", Desk_DeskMem_BufferGetString( buffer) + pos);
	
	return i-pos;
	}



void	Variables2_Expand( HTML_Args_variablelist* args)
	{
	int			i;
	Desk_deskmem_buffer	buffer;
	Desk_DeskMem_BufferInit( &buffer, 256);
	
	Desk_Error2_Try	{
		
		Desk_DeskMem_BufferStrCpy( &buffer, "");
		
		for ( i=0; i<args->num; i++)	{
			int	len = strlen( args->vars[i].name);
			int	valueoffset = Desk_DeskMem_BufferGetDataSize( &buffer);
			
			BufferAppendString( &buffer, args->vars[i].value);
			
			if ( len>2 && 0==strcmp( args->vars[i].name+len-2, "[]"))	{	// variable name ends with '[]'
				int	oldnum = args->num;
				args->num = i;	// Restrict expansion to previous variables only.
				
				#ifdef Desk_DEBUG
					global_offset = valueoffset;
				#endif
				
				Expand( &buffer, valueoffset, args);
				
				args->num = oldnum;
				args->vars[i].name[len-2] = 0;	// New variable name is with the '[]' stripped.
				}
			
			args->vars[i].value = (char*) valueoffset;
				// Values are temporarily stored as offsets.
			}
		
		// Now relocate all values into proper pointers.
		
		for ( i=0; i<args->num; i++)	{
			args->vars[i].value = Desk_DeskMem_BufferGetString( &buffer) + ((int) args->vars[i].value);
			}
		}
	
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( &buffer);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	}


void	Variables2_Free( HTML_Args_variablelist* args)
/*
This is hacky. variable values from Variables2_Expand are in a single
array, with the first var value pointing to the start of this array+1.
 */
	{
	if ( args->num > 0)	Desk_DeskMem_Free( args->vars[0].value-1);
	}
