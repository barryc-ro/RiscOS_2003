#include "swis.h"

#include <string.h>
#include <ctype.h>

#include "MemCheck.MemCheck.h"

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.Str.h"
#include "Desk.File.h"
#include "Desk.Wimp.h"

#include "AcornNC.HTMLParams.h"

#include "Str.h"
#include "Variables.h"
#include "CMHGHead.h"
#include "Variables2.h"

#ifdef Trace_TRACE
	#include "Trace.Trace.h"
#endif


#define	TaskModule_SendMessage	0x4d300

#if 0
static void	Desk_DeskMem_BufferMidExtend( Desk_deskmem_buffer* buffer, int at, int by)
/*
If 'by'>0, inserts 'by' bytes at position 'at'.
If 'by'<0, removes the region 'at'+'by' to 'at'.

Thus if 'by'<0, then 'at' is the /end/ of the deleted region, while if
'by'>0, 'at' is the /start/ of the new region. This behaviour mimics
that of flex_midextend().

Note that this calls Desk_DeskMem_BufferRealloc, so will probably move
the buffer. Hence any pointers into the buffer are made invalid by this
call.
 */
	{
	int	oldsize = Desk_DeskMem_BufferGetDataSize( buffer);
	
	if ( by<0)	{
		memmove( 
			Desk_DeskMem_BufferGetString( buffer) + at + by, 
			Desk_DeskMem_BufferGetString( buffer) + at, 
			oldsize - at
			);
		}
	
	Desk_DeskMem_BufferEnsure( buffer, Desk_DeskMem_BufferGetDataSize( buffer) + by);
	
	if ( by>0)	{
		memmove( 
			Desk_DeskMem_BufferGetString( buffer) + at + by, 
			Desk_DeskMem_BufferGetString( buffer) + at, 
			oldsize - at
			);
		}
	}
#endif




#define	isalnum_( x) ((x)=='_' || isalnum(x))


static char*	strstr_alnum_( char* s, const char* name)
/*
Finds next occurence of 'name' (assumed to be all alpha numeric
characters) surrounded by non-alphanumeric or '_' characters.
 */
	{
	int	len = strlen( name);
	for(;;)	{
		// Skip any non-alphanumeric characters
		while ( *s!=NULL && !isalnum_( *s))	s++;
		if ( *s==NULL)	return NULL;
		
		// s now points to an alnum_ character.
		if ( 0==strncmp( s, name, len) && !isalnum_( s[len]))	return s;
		
		// Doesn't match tag, so skip alnum_ characters.
		while ( *s!=NULL && isalnum_( *s))	s++;
		if ( *s==NULL)	return NULL;
		}
	}

static char*	strstr_alnum_2( char* s, const char* name)
/*
Finds next occurence of 'name' (assumed to be all alpha numeric
characters) preceded by non-alphanumeric or '_' characters. Trailing
character aren't tested.
 */
	{
	int	len = strlen( name);
	for(;;)	{
		// Skip any non-alphanumeric characters
		while ( *s!=NULL && !isalnum_( *s))	s++;
		if ( *s==NULL)	return NULL;
		
		// s now points to an alnum_ character.
		if ( 0==strncmp( s, name, len))	return s;
		
		// Doesn't match tag, so skip alnum_ characters.
		while ( *s!=NULL && isalnum_( *s))	s++;
		if ( *s==NULL)	return NULL;
		}
	}



#define	SPECIALTAG	"_NCOPTIONS"
#define	SPECIALTAG_LEN	strlen( SPECIALTAG)
#define	SPECIALTAG2	"_NCOPTIONS_"



static char*	FindLT( char* s, char* pos)
/*
Finds previous occurence of '<'. Returns NULL if '>' is found first or
no '<' exists.
 */
	{
	for ( pos-=1; pos>=s; pos--)	{
		if ( *pos=='>')	return NULL;
		if ( *pos=='<')	return pos;
		}
	return NULL;
	}


#if 0
static char*	GetAlNum_Ident( char* s, int* len)
/*
Returns pointer to first alpha-numeric-_ string in given string, and
makes *len be the length of this alpha-numeric sequence.
 */
	{
	char*	end;
	
	while ( *s && !isalnum_( *s))	s++;	// Skip non-alnum_ characters
	if ( !*s)	{
		*len = 0;
		return NULL;	// Reached end of string
		}
	
	// s now points to start of alnum_ sequence.
	for ( end=s; *end && isalnum_( *end); end++)	;
	*len = end-s;
	
	return s;
	}
#endif





static void	FindArgs( HTML_Args_variablelist* args, char* string, char* separatorlist)
/*
Finds all variables in a list such as 'foo=abc rty=qwe'. Any character
in 'separatorlist' is treated as a separator (the separator is ' ' in
the above example).

The variable values can be in quotes to allow separator characters to be
included. The quotes are retained in the value.
 */
	{
	char*		s = string;
	args->num	= 0;
	args->vars	= NULL;
	
	Desk_Debug3_Printf( Desk_error_PLACE "FindArgs, s=0x%p = '%s' (len %i)\n", s, s, strlen( s));
	
	for(;;)	{
		Desk_Debug3_Printf( Desk_error_PLACE "s-string=%i\n", s-string);
		
		while ( *s && strchr( separatorlist, *s))	s++;
		
		Desk_Debug3_Printf( Desk_error_PLACE "FindArgs, s=0x%p = '%s' (len %i)\n", s, s, strlen( s));
		
		if ( !*s)	{
			Desk_Debug3_Printf( Desk_error_PLACE "No more arguments,\n");
			return;
			}
		
		args->num++;
		args->vars = Desk_DeskMem_Realloc( args->vars, args->num*sizeof( HTML_Args_variable));
		args->vars[ args->num-1].name=s;
		// Now terminate name.
		Desk_Debug3_Printf( Desk_error_PLACE "FindArgs: terminating name '%10s'\n", s);
		
		for(;;)	{
			if ( *s=='=')	{
				int	quotes = 0;
				*s = 0;
				s+=1;
				// Now find value. Need to terminate it, handling quoting etc.
				args->vars[ args->num-1].value = s;
				
				Desk_Debug3_Printf( Desk_error_PLACE "FindArgs: terminating value '%10s'\n", s);
				
				for(;;s++)	{	// Find end of value and terminate it.
					if ( *s==0)	{
						/*
						if ( quotes)	Desk_Error2_HandleTextf( 
									"No closing quote for value of variable '%s'\n", 
									args->vars[ args->num-1].value
									);
						*/
						if ( quotes)	Desk_Error2_MsgTransHandlef( "NoQuote", args->vars[ args->num-1].value);
						break;
						}
					if ( *s=='"')	quotes = 1-quotes;
					if ( !quotes)	{
						if ( *s==0)	break;
						if ( strchr( separatorlist, *s))	{
							*s=0;
							s+=1;
							break;
							}
						}
					}
				break;
				}
			else if ( *s==0)	{
				args->vars[ args->num-1].value = NULL;
				break;
				}
			else if ( strchr( separatorlist, *s))	{
				*s = 0;
				s+=1;
				args->vars[ args->num-1].value = NULL;
				break;
				}
			
			else	s++;
			}
		
		Desk_Debug3_Printf( Desk_error_PLACE "FindArgs: found arg '%s'='%s'\n", 
			args->vars[ args->num-1].name, 
			(args->vars[ args->num-1].value) ? args->vars[ args->num-1].value : "<NULL>"
			);
		}
	
	Desk_Debug3_Printf( Desk_error_PLACE "FindArgs: found %i args\n", args->num);
	}


static void	FindCNOPTIONSOptions( HTML_Args_variablelist* args, char* string)
/*
string is something like '"nvram_dial_wait,1"' - the value of _NCOPTIONS
from <input type=checkbox _NCOPTIONS="nvram_dial_wait,1">. We simply
skip quotes and spaces, replace commas by '\0' and store pointers into
string.
 */
	{
	args->num	= 0;
	args->vars	= NULL;
	
	// Remove leading/trailing quotes.
	if ( *string=='"')	string++;
	if ( string[ strlen( string) - 1]=='"')	string[ strlen( string) - 1] = 0;
	
	FindArgs( args, string, ", \t");
	}


static void	CatVariable( Desk_deskmem_buffer* buffer, HTML_Args_variable* var)
	{
	Desk_Debug3_Printf( Desk_error_PLACE "CatVariable called for variable '%s'='%s'\n", var->name, (var->value) ? var->value : "<NULL>");
	Desk_DeskMem_BufferStrCat( buffer, var->name);
	if ( var->value)	{
		Desk_DeskMem_BufferStrCat( buffer, "=");
		Desk_DeskMem_BufferStrCat( buffer, var->value);
		}
	}

static void	CatReplacement( Desk_deskmem_buffer* buffer, HTML_Args_variablelist* args, HTML_Args_variablelist* variables)
/*
args is arguments inside <...>. variables is list of variables past to
our *NCOptions command.
 */
	{
	HTML_Args_variable*	ncoptions = HTML_Args_FindVar( args, SPECIALTAG, Desk_bool_TRUE/*caseinsensitive*/);
	HTML_Args_variablelist	ncoptions_args;
	
	FindCNOPTIONSOptions( &ncoptions_args, ncoptions->value);
	
	if ( HTML_Args_FindPossibleVar( args, "input", Desk_bool_TRUE/*caseinsensitive*/))
		{
		HTML_Args_variable*	type	= HTML_Args_FindPossibleVar( args, "type", Desk_bool_TRUE/*caseinsensitive*/);
		
		if ( type && 0==Desk_stricmp( type->value, "radio"))	{
			int	i;
			
			if ( ncoptions_args.num != 2)
			/*	Desk_Error2_HandleTextf( "Need 2 arguments to " SPECIALTAG " when used with radio button, not %i", 
					ncoptions_args.num
					);
			*/	Desk_Error2_MsgTransHandlef( "Radio", ncoptions_args.num);
			
			for ( i=0; i<args->num; i++)	{
				if ( &args->vars[i] != ncoptions)	{
					CatVariable( buffer, &args->vars[i]);
					Desk_DeskMem_BufferStrCat( buffer, " ");
					}
				else	{
					char*	checkedvalue = ncoptions_args.vars[1].name;
					
					Desk_DeskMem_BufferStrCat( buffer, "name=");
					Desk_DeskMem_BufferStrCat( buffer, ncoptions_args.vars[0].name);
					Desk_DeskMem_BufferStrCat( buffer, " value=\"");
					Desk_DeskMem_BufferStrCat( buffer, ncoptions_args.vars[1].name);
					Desk_DeskMem_BufferStrCat( buffer, "\" ");
					// Now need to add 'checked' if the current value of vars[0] is vars[1].
					if	( 0==Desk_stricmp( 
							checkedvalue, NCOptions_GetVariableValueString( ncoptions_args.vars[0].name, variables)
							))
						Desk_DeskMem_BufferStrCat( buffer, "checked ");
					}
				}
			}
		else if ( type && 0==Desk_stricmp( type->value, "checkbox"))	{
			int	i;
			
			if ( ncoptions_args.num != 2)
				//Desk_Error2_HandleTextf( "Need 2 arguments to " SPECIALTAG " when used with checkbox, not %i", ncoptions_args.num);
				Desk_Error2_MsgTransHandlef( "CheckBox", ncoptions_args.num);
			
			for ( i=0; i<args->num; i++)	{
				if ( &args->vars[i] != ncoptions)	{
					CatVariable( buffer, &args->vars[i]);
					Desk_DeskMem_BufferStrCat( buffer, " ");
					}
				else	{
					char*	checkedvalue = ncoptions_args.vars[1].name;
					
					Desk_DeskMem_BufferStrCat( buffer, "name=");
					Desk_DeskMem_BufferStrCat( buffer, ncoptions_args.vars[0].name);
					Desk_DeskMem_BufferStrCat( buffer, " value=\"");
					Desk_DeskMem_BufferStrCat( buffer, ncoptions_args.vars[1].name);
					Desk_DeskMem_BufferStrCat( buffer, "\" ");
					// Now need to add 'checked' if the current value of vars[0] is vars[1].
					if	( 0==Desk_stricmp( 
							checkedvalue, NCOptions_GetVariableValueString( ncoptions_args.vars[0].name, variables)
							))
						Desk_DeskMem_BufferStrCat( buffer, "checked ");
					}
				}
			}
		
		else if ( type)	//Desk_Error2_HandleTextf( "Unrecognised input type='%s'", (type->value) ? type->value : "-NONE-");
				Desk_Error2_MsgTransHandlef( "Input", (type->value) ? type->value : "-NONE-");
		
		else	{	// No type, so writable field.
			int	i;
			
			if ( ncoptions_args.num != 1)
				//Desk_Error2_HandleTextf( "Need 1 argument to " SPECIALTAG " when used with writable field, not %i", ncoptions_args.num);
				Desk_Error2_MsgTransHandlef( "Writable", ncoptions_args.num);
			
			for ( i=0; i<args->num; i++)	{
				if ( &args->vars[i] != ncoptions)	{
					CatVariable( buffer, &args->vars[i]);
					Desk_DeskMem_BufferStrCat( buffer, " ");
					}
				else	{
					Desk_DeskMem_BufferStrCat( buffer, "name=");
					Desk_DeskMem_BufferStrCat( buffer, ncoptions_args.vars[0].name);
					Desk_DeskMem_BufferStrCat( buffer, " value=\"");
					Desk_DeskMem_BufferStrCat( buffer, NCOptions_GetVariableValueString( ncoptions_args.vars[0].name, variables));
					Desk_DeskMem_BufferStrCat( buffer, "\" ");
					}
				}
			}
		}
	
	// if we reach the following if, then there is no 'type' argument.
	else if ( HTML_Args_FindPossibleVar( args, "select", Desk_bool_TRUE/*caseinsensitive*/))	{
		int	i;
		if ( ncoptions_args.num != 1)
			//Desk_Error2_HandleTextf( "Need 1 arguments to " SPECIALTAG " when used in select, not %i", ncoptions_args.num);
			Desk_Error2_MsgTransHandlef( "Select", ncoptions_args.num);
		
		for ( i=0; i<args->num; i++)	{
			if ( &args->vars[i] != ncoptions)	{
				CatVariable( buffer, &args->vars[i]);
				Desk_DeskMem_BufferStrCat( buffer, " ");
				}
			else	{
				Desk_DeskMem_BufferStrCat( buffer, "name=");
				Desk_DeskMem_BufferStrCat( buffer, ncoptions_args.vars[0].name);
				Desk_DeskMem_BufferStrCat( buffer, " value=\"");
				Desk_DeskMem_BufferStrCat( buffer, NCOptions_GetVariableValueString( ncoptions_args.vars[0].name, variables));
				Desk_DeskMem_BufferStrCat( buffer, "\" ");
				}
			}
		}
	else if ( HTML_Args_FindPossibleVar( args, "option", Desk_bool_TRUE/*caseinsensitive*/))	{
		int	i;
		char*	varname;
		char*	checkedvalue;
		
		if ( ncoptions_args.num != 2)
			//Desk_Error2_HandleTextf( "Need 2 arguments to " SPECIALTAG " when used in option, not %i", ncoptions_args.num);
			Desk_Error2_MsgTransHandlef( "Option", ncoptions_args.num);
		
		varname		= ncoptions_args.vars[0].name;
		checkedvalue	= ncoptions_args.vars[1].name;
		
		for ( i=0; i<args->num; i++)	{
			if ( &args->vars[i] != ncoptions)	{
				CatVariable( buffer, &args->vars[i]);
				Desk_DeskMem_BufferStrCat( buffer, " ");
				}
			else	{
				Desk_DeskMem_BufferStrCat( buffer, "value=\"");
				Desk_DeskMem_BufferStrCat( buffer, checkedvalue);
				Desk_DeskMem_BufferStrCat( buffer, "\" ");
				if	( 0==Desk_stricmp( 
						checkedvalue, NCOptions_GetVariableValueString( varname, variables)
						))
					Desk_DeskMem_BufferStrCat( buffer, "selected ");
				}
			}
		}
	
	else //Desk_Error2_HandleTextf( "Don't know how to expand " SPECIALTAG " inside <...> - no input, select or option tag found");
		Desk_Error2_MsgTransHandlef( "NoTag");
	}



static char*	CatGeneralText( Desk_deskmem_buffer* buffer, char* ncoptions, HTML_Args_variablelist* variables)
/*
Returns end of special NCOptions tag.
 */
	{
	// Find end of _NCOPTIONS=...
	char*			start = strchr( ncoptions, '=');
	char*			end;
	HTML_Args_variablelist	args;
	
	if ( !start)	//Desk_Error2_HandleTextf( "Couldn't find '='");
			Desk_Error2_MsgTransHandlef( "NoEQ");
	
	start+=1;
	
	if ( start[0]=='"')	{
		start+=1;
		end = strchr( start, '"');
		}
	else	end = strpbrk( start, " \n\t");
	
	if ( !end)	//Desk_Error2_HandleTextf( "Couldn't find end of '" SPECIALTAG "'");
			Desk_Error2_MsgTransHandlef( "NoEnd");
	
	*end = 0;
	
	FindCNOPTIONSOptions( &args, start);
	if ( args.num != 1)	//Desk_Error2_HandleTextf( "Need one argument to '" SPECIALTAG "', not %i", args.num);
				Desk_Error2_MsgTransHandlef( "Args", args.num);
	
	Desk_DeskMem_BufferStrCat( buffer, NCOptions_GetVariableValueString( args.vars[0].name, variables));
	Desk_DeskMem_BufferStrCat( buffer, " ");
	
	return end+1;
	}


static void	ProcessTemplateFile( Desk_deskmem_buffer* buffer, HTML_Args_variablelist* variables, char* templatefile)
	{
	char*	pos;
	Desk_DeskMem_BufferStrCpy( buffer, "");
	
	for ( pos=templatefile;;)	{
		char*	ncoptions;
		ncoptions = strstr_alnum_( pos, SPECIALTAG);
		
		if ( !ncoptions)	{	// Copy rest of template
			Desk_DeskMem_BufferStrCat( buffer, pos);
			break;
			}
		else	{
			char*	lt;
			char*	gt;
			HTML_Args_variablelist	args;	// Will be list of args inside <...>.
			// Find out what context we are in. ncoptions points to '_NCOPTIONS' tag.
			
			lt = FindLT( templatefile, ncoptions);	// Searches backwards for '<', and returns NULL if '>' is found first.
			if ( !lt)	{
				Desk_DeskMem_BufferStrNCat( buffer, pos, ncoptions-pos);	// Cat up to the start of _NCOPTIONS
				pos = CatGeneralText( buffer, ncoptions, variables);
				}
			
			else	{
				Desk_DeskMem_BufferStrNCat( buffer, pos, lt+1-pos);	// Cat up to and including the '<'
				
				gt = strchr( lt, '>');
				if ( !gt)
					//Desk_Error2_HandleTextf( "Couldn't find matching '>' after '<' at offset %i in template file.", lt-templatefile);
					Desk_Error2_MsgTransHandlef( "NeedGT", lt-templatefile);
				
					{
					char*	lt2 = strchr( lt+1, '<');
					if ( lt2 && lt2<gt)
						/*Desk_Error2_HandleTextf( 
							"Found second '<' before closing '>' after '<' at offset %i in template file", 
							lt-templatefile
							);
						*/
						Desk_Error2_MsgTransHandlef( "ExtraLT", lt-templatefile);
					}
				
				*gt=0;
				FindArgs( &args, lt+1, " \t");
				CatReplacement( buffer, &args, variables);
				pos = gt;
				*gt='>';
				}
			}
		}
	
	// Now expand any occurrencies of '_NCOPTIONS_foo' - will contain the value of variable 'foo'.
	for ( pos=Desk_DeskMem_BufferGetString( buffer);;)	{
		int	offset;	// = pos-Desk_DeskMem_BufferGetString( buffer);
		char*	ncoptions;	// used to point to '_NCOPTIONS_foobar'.
		char*	var_start;	// points to 'foobar'.
		char*	var_end;	// points to next chr after 'foobar'.
		char	var_endc;	// original chr after 'foobar'.
		int	var_len;
		char*	var_value;
		char*	newend;		// where end of expanded variable will be.
		
		ncoptions = strstr_alnum_2( pos, SPECIALTAG2);
		if ( !ncoptions)	break;
		
		// Find variable
		var_start = ncoptions + strlen( SPECIALTAG2);
		for ( var_end=var_start; *var_end && isalnum_(*var_end); var_end++)	;
		var_endc = *var_end;
		*var_end = 0;
		var_value = NCOptions_GetVariableValueString( var_start, variables);
		
		Desk_Debug_Printf( Desk_error_PLACE "Expanding variable '%s', value='%s'\n", var_start, var_value);
		
		var_len = strlen( var_value);
		newend = ncoptions + var_len;	// End of substituted variable.
		*var_end = var_endc;
		
		offset = ncoptions-Desk_DeskMem_BufferGetString( buffer);
		
		Desk_DeskMem_BufferMidExtend( buffer, var_end-Desk_DeskMem_BufferGetString( buffer), newend-var_end);
		pos = Desk_DeskMem_BufferGetString( buffer) + offset;
		strncpy( pos, var_value, var_len);
		
		Desk_Debug_Printf( Desk_error_PLACE "Inserted variable value (change in size was %i)\n", newend-var_end);
		
		pos += var_len;	// Make next search start /after/ substitued value - stops endless loop when foo=_NCOPTIONS_foo 8/
		}
	}



static void	OpenPage( const char* html)
	{
	char			filename[ 256];
	Desk_message_block	dataopen;
	
	tmpnam( filename);
	Desk_File_SaveMemory2( filename, (char*) html, strlen( html), Desk_filetype_HTML);
	dataopen.header.size	= 256;
	dataopen.header.yourref	= 0;
	dataopen.header.action	= Desk_message_DATAOPEN;
	dataopen.data.dataopen.window	= 0;
	dataopen.data.dataopen.icon	= 0;
	dataopen.data.dataopen.pos.x	= 0;
	dataopen.data.dataopen.pos.y	= 0;
	dataopen.data.dataopen.size	= 0;
	dataopen.data.dataopen.filetype	= Desk_filetype_HTML;
	strcpy( dataopen.data.dataopen.filename, filename);
	/*
	Desk_Debug_Printf( Desk_error_PLACE "Would open file '%s'\n", filename);
	Desk_Debug2_Printf( Desk_error_PLACE "Filer message handler is at 0x%p (calls C function at 0x%p), pw=0x%p\n",
		FOpen_MHandler, FOpen_MHandler_handler, pw
		);
	*/
	Desk_Error2_CheckOS( (Desk_os_error*) _swix( TaskModule_SendMessage, _INR(0,5), 0, &dataopen, 0, 0, 0, 0));
	
	}


_kernel_oserror*	Command( char *arg_string, int argc, int cmd_no, void *pw)
	{
	AcornNC_args_variablelist	args			= { {0, NULL}, NULL};
	char* volatile			template_file_volatile	= NULL;
	Desk_deskmem_buffer		buffer			= { NULL};
	char*				url_value;
	char* volatile			url_value_volatile	= NULL;
	
	Desk_Debug_Printf( Desk_error_PLACE "Command called, arg_string='%s'\n", arg_string);
	
	Desk_Error2_Try
		{
		HTML_Args_variable*	template_filename;
		char*			template_file;
		Desk_deskmem_buffer	buffer;
		
		Desk_Debug_Printf( Desk_error_PLACE "&Desk_jumpauto_newestbuf=0x%p, Desk_jumpauto_newestbuf=0x%p\n", 
			&Desk_jumpauto_newestbuf, 
			Desk_jumpauto_newestbuf
			);
		
		if ( cmd_no != CMD_NCOptions_OpenPage)	//Desk_Error2_HandleTextf( "Unrecognised command %i", cmd_no);
							Desk_Error2_MsgTransHandlef( "BadCmd", cmd_no);
		
		Desk_DeskMem_BufferInit( &buffer, 256);
		AcornNC_FindHTMLVariables( &args, arg_string, argc);
		Variables2_Expand( &args.list);
		// Add variable 'url' to list of variables, whose value is our complete input command.
		// _kernel_command_string() doesn't contain anything useful unfortunately.
		// Desk_Debug_Printf( Desk_error_PLACE "_kernel_command_string() = '%s'\n", _kernel_command_string());
			{
			char	cmd_prefix[]	= "NCOptions_OpenPage ";
			
			url_value		= Desk_DeskMem_Malloc( 1+strlen( arg_string)+strlen( cmd_prefix));
			url_value_volatile	= (char* volatile) url_value;
			
			sprintf( url_value, "%s%s", cmd_prefix, arg_string);
			args.list.num++;
			args.list.vars = Desk_DeskMem_Realloc( args.list.vars, args.list.num * sizeof( HTML_Args_variable));
			args.list.vars[ args.list.num-1].name	= "url";
			args.list.vars[ args.list.num-1].value	= url_value;
			}
		
		template_filename	= HTML_Args_FindVar( &args.list, "file_template", Desk_bool_TRUE /*caseinsensitive*/);
		
		Desk_Debug_Printf( Desk_error_PLACE "&Desk_jumpauto_newestbuf=0x%p, Desk_jumpauto_newestbuf=0x%p\n", 
			&Desk_jumpauto_newestbuf, 
			Desk_jumpauto_newestbuf
			);
		
		template_file		= Desk_File_AllocLoad0( template_filename->value);
		template_file_volatile	= (char* volatile) template_file;
		
		NCOptions_SetSystemVariables( &args.list);
		
		ProcessTemplateFile( &buffer, &args.list, template_file);
		
		OpenPage( Desk_DeskMem_BufferGetString( &buffer));
		
		Desk_DeskMem_Free( template_file_volatile);	template_file_volatile	= NULL;
		Desk_DeskMem_Free( url_value_volatile);		url_value_volatile	= NULL;
		Desk_DeskMem_BufferFree( &buffer);
		Variables2_Free( &args.list);
		}
	Desk_Error2_Catch
		{
		AcornNC_FreeHTMLVariables( &args);
		Desk_DeskMem_Free( template_file_volatile);
		Desk_DeskMem_Free( url_value_volatile);
		Desk_DeskMem_BufferFree( &buffer);
		return Desk_Error2_ConvertToOS2();
		}
	Desk_Error2_EndCatch
	
	return NULL;
	
	Desk_UNUSED( pw);
	}


_kernel_oserror*	Initialise( char* cmd, int argc, void* pw)
	{
	Desk_Error2_Init_JumpSig();
	Desk_Debug_SetNestingIndentation( "  ");
	Desk_Debug_Printf( Desk_error_PLACE "Initialise called\n");
	
	Desk_Error2_TryCatch(
		Desk_Error2_MsgTransInit( "Resources:$.Resources.NCOptions.Messages");
		,
		return Desk_Error2_ConvertToOS2();
		)
	
	return _kernel_setenv( "Alias$URLOpenCLI_NCOptions_OpenPage", "NCOptions_OpenPage %*0");
	return NULL;
	Desk_UNUSED( cmd);
	Desk_UNUSED( argc);
	Desk_UNUSED( pw);
	}


_kernel_oserror*	Finalise( int fatal, int podule, void *pw)
	{
	Desk_Error2_TryCatch(
		Desk_Error2_MsgTransFinal();
		,
		)
	
	return NULL;
	Desk_UNUSED( fatal);
	Desk_UNUSED( podule);
	Desk_UNUSED( pw);
	}


#ifdef Desk__MODULE_CLIENT

#else
int	main( int argc, char* argv[])
	{
	char*				argstring;
	char* volatile			argstring_volatile = NULL;
	Desk_os_error*			e;
	
	MemCheck_Init();
	MemCheck_InterceptSCLStringFunctions();
	MemCheck_RegisterArgs( argc, argv);
	
	#ifdef Trace_TRACE
		Trace_InterceptAllFunctions();
	#endif
	
	e = Initialise( NULL, 0, NULL);
	if ( e)	{
		printf( "Couldn't initialise: '%s'\n", e->errmess);
		return 1;
		}
	
	Desk_Error2_Try	{
		char*	argstring_raw = _kernel_command_string();
		MemCheck_checking	oldchecking;
		
		oldchecking = MemCheck_SetChecking( 0, 0);
		MemCheck_RegisterMiscBlock( argstring_raw, 1+Desk_strlencr( argstring_raw));
		MemCheck_RestoreChecking( oldchecking);
		
		argstring = Desk_Str_strdupcr( argstring_raw);
		argstring_volatile = argstring;
		
			{
			// Program name not expected in argument string.
			char*	argstring2=argstring;
			for ( ; *argstring2 && !isspace( *argstring2); argstring2++)	;
			for ( ; *argstring2 &&  isspace( *argstring2); argstring2++)	;
			printf( "Command is '%s'\n", argstring2);
			Desk_Error2_CheckOS( Command( argstring2, argc-1, CMD_NCOptions_OpenPage, NULL));
			}
		
		Desk_DeskMem_Free( argstring);
		argstring_volatile = NULL;
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_Free( argstring_volatile);
		Desk_Error2_FDescribe( (Desk_Error2_printf_fn) fprintf, stdout, &Desk_Error2_globalblock);
		printf( "\n");
		return 1;
		}
	Desk_Error2_EndCatch
	
	return 0;
	
	Desk_UNUSED( argv);
	}
#endif
