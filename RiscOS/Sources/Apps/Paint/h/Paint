/* > h.Paint */
/*
 *  Main header for the Paint program
 *
 *  DAHE, 04 Sep 89: heap allocation added
 *        07 Sep 89: symbolic SWI numbers
 *  JAB,  23 Jan 91: Added structure 'snapshotstr' for snapshot
 *                   implementation
 *  CDP,  27 Jan 92: Added include for fixes.h.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "ftrace.h"
#include "fixes.h"

#include "h.os"
#include "h.wimp"
#include "h.wimpt"
#include "h.bbc"
#include "h.res"
#include "h.sprite"
#include "h.resspr"
#include "h.win"
#include "h.menu"
#include "h.event"
#include "h.dbox"
#include "h.werr"
#include "h.flex"
#include "h.baricon"
#include "h.msgs"
#include "h.colourpick"

#if TRACE
  #define spencer(s) s;
  #define spencer2(s) s

  #define WHETHER(c) ((c)? "true": "false")
#else
  #define spencer(s) ;
  #define spencer2(s)
#endif

#define ModuleVersion 1 /*don't bother with separate code for disc version*/

#define USEHEAP 0  /* 1 => Use heap (rather than C memory allocation) */

#define entries(l) ((l) < 3? 1 << (1 << (l)): 16)

#if USEHEAP
  #include "h.heap"
  /* Dynamic memory allocation */

  #define Alloc(s)      heap_alloc(s)
  #define Free(p)       heap_free(p)
  #define Realloc(p, s) heap_realloc(p, s)
#else
  #define Alloc(s)      malloc(s)
  #define Free(p)       free(p)
  #define Realloc(p, s) realloc(p, s)
#endif

#define toolspacesize 9
    /* amount of scratchspace a tool is given */

#define NAME_LIMIT 12 /*not defined in sprite.h!*/
#define SPRITE_FILE 0xFF9

typedef int sprite_offset;

typedef struct
{
  int scale_xmul;
  int scale_ymul;
  int scale_xdiv;
  int scale_ydiv;
} scaling_block;        /* ready for use by sprite scaling ops */

typedef struct
{
  char set[20];
  sprite_area *sarea;
} ECF_block;

typedef struct ttab_block
{
  struct ttab_block *link;
  int refcount;
  int ttab_size;
  char *table;     /* flex'ed real translation table */
  /*int spalsize, dpalsize; J R C 23rd Nov 1993*/
  int ttab2_size;
  char *table2;     /* flex'ed real GCOL translation table */
} ttab_block;

typedef struct sprite_window_info_block
{
  struct sprite_window_info_block *link;
  struct active_window            *window;
  struct sprite_info_block        *sprite;
  char                            *title;
  scaling_block                    blobsize;
  char                             gridcol;
  BOOL                             read_only;
} sprite_window_info_block;

typedef struct sprite_info_block
{
  struct sprite_info_block     *link;
  struct spritefile_info_block *file;        /* parent file info */
  sprite_window_info_block     *windows;     /* windows onto sprite */
  sprite_offset                 offset;      /* of sprite in file */
  int                           spriteno;    /* index of sprite in file */
  ttab_block                   *transtab;    /* colour translation table */
  scaling_block                 mode;        /* mode conversion */
  scaling_block                 iconsize;
  wimp_w                        colourhandle;
  ECF_block                     ECFs[4];
  int                           gcol;        /* current painting colour */
  int                           toolspace [toolspacesize];
                                             /* tool scratch space */
  colourpicker_d                colourdialogue;
  char                         *colourtitle; /* indirected colour title */
                                             /* handle of colourpicker */
  char                          needsnull;   /* set if tracking pointer */
  char                          coloursize;
} sprite_info_block;

typedef struct spritefile_info_block
{
  sprite_info_block *sprites;       /* linked list of sprites */
  char              *filename;      /* flex array */
  sprite_area       *spritearea;    /* flex array of bytes */
  char              *title;         /* indirected title space */
  char               fullinfo;      /* big icons or full info */
  char               modified;
  char               use_current_palette;
  char               lastwidth;
  struct active_window *window;
} spritefile_info_block;

typedef union
{
  spritefile_info_block file;
  sprite_window_info_block sprite;
} paint_info_block;

typedef enum
{
  paint_window_is_file,
  paint_window_is_sprite
} paint_window_tag;

typedef struct active_window
{
  struct active_window *link;
  wimp_w handle;
  paint_window_tag   tag;
  paint_info_block  *data;
} active_window;

typedef
  struct
  { struct {BOOL full_info, use_desktop_colours;} display;
    struct {BOOL show_colours, small_colours;} colours;
    struct {BOOL show_tools;} tools;
    struct {int mul, div;} zoom;
    struct {BOOL show; int colour;} grid;
    struct {BOOL on;} extended;
  }
  paint_options;

typedef
  struct
  { wimp_wind t;
    char ind [128];
  }
  other_template; /*Fix overwriting store bugs. J R C 14th Oct 1993*/

extern paint_options paint_current_options;
  /*Set at start up from initial_options and <Paint$Options>. Maintained
    by the routines that change state.*/

extern active_window *paint_windows;
extern wimp_box bigextent;
extern  void snapshot_show(void);

extern int  my_create_wind(wimp_wind *, wimp_w *, win_event_handler,
  void *);
extern void my_delete_wind(wimp_w);
extern void delete_paint_window(active_window *);

extern int __root_stack_size;

#if TRACE
 extern void noroom (char *);
#else
 extern void noroom (void);
#endif


extern void set_work_extent(active_window *);
extern void set_window_title(active_window *, char *);

extern int  LoadFile(active_window *, char *, int, int);

extern sprite_info_block *pick_sprite(active_window *, wimp_mousestr *);

extern void forceredraw(wimp_w);
extern void help_message(char *tag, wimp_eventstr *);
extern void set_printer_data(void);

extern void set_modified(spritefile_info_block *);
extern void allocate_position(wimp_box *);
extern void check_position(active_window *);

/*************************************************************
 *  Manifests for the size sprites appear in the file window *
 *************************************************************/

#define SpriteFiler_TextHeight 32
#define SpriteFiler_TextWidth  20
#define SpriteFiler_XSize (12*(SpriteFiler_TextWidth - 4))
#define SpriteFiler_YSize SpriteFiler_XSize
#define SpriteFiler_Border (SpriteFiler_TextWidth - 4)
#define SpriteFiler_TotalHeight \
    (SpriteFiler_YSize + SpriteFiler_TextHeight + SpriteFiler_Border)
#define SpriteFiler_TotalWidth (SpriteFiler_XSize + SpriteFiler_Border)

#define SpriteFiler_FullInfoWidth \
    (SpriteFiler_XSize/2 + 55*SpriteFiler_TextWidth)
#define SpriteFiler_FullInfoHeight (3*SpriteFiler_TextHeight)

/* Macro to do source clipping:
   provide graphics window wimp_box *, bounding box of object */

#define CLIPS(g, myx0, myy0, myx1, myy1) (!((myx0) > (g)->x1 || \
    (myx1) < (g)->x0 || (myy0)>(g)->y1 || (myy1)<(g)->y0))


/* Claim idle events */
extern void paint_claim_idle(wimp_w window);

/* Report error via msgs */
extern void paint_error(int level, char *tag);
extern void paint_error1(char *tag, char *rest);

extern void iprintf (int flags, int x, int y, char *format, ...);

extern int modevar (int, int);
