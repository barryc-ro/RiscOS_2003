/* > C.Colours
 *
 *  Paint: Arthur 2 sprite editor
 *   Main loop and resource loading
 *
 *  Author: A.P. Thompson
 *
 * Upgraded to RISCOSlib - DAHE - 16 Aug 1989
 *  DAHE, 28 Aug 89 - internationalisation
 *  JAB,  30 Oct 90 - Brings colour window to the front it is already open
 *  JAB,  23 Nov 90 - Doesn't reset options when closing colour window
 */

#include "swis.h"

#include "bbc.h"
#include "wimpt.h"

#include "ftrace.h"
#include "m.h"
#include "main.h"
#include "menus.h"
#include "psprite.h"
#include "sprwindow.h"
#include "toolwindow.h"
#include "colours.h"

#undef  OS_SetColour
#define OS_SetColour               0x61
#undef  ColourPicker_OpenDialogue
#define ColourPicker_OpenDialogue  0x47702
#undef  ColourPicker_CloseDialogue
#define ColourPicker_CloseDialogue 0x47703
#undef  Wimp_TextOp
#define Wimp_TextOp                0x400F9
#undef  ColourTrans_GenerateTable
#define ColourTrans_GenerateTable  0x40763

/**********************************
 * Number of colours in a sprite  *
 **********************************/

int colours_count (main_sprite *sprite)

{ static int N [] = {-1, 1 << 1, 1 << 2, 1 << 4, 1 << 8, 1 << 15, 1 << 24};

  ftracef2 ("colours_count (\"%.12s\") -> 0x%X\n",
      psprite_address (sprite)->name,
      N [bbc_modevar (psprite_address (sprite)->mode, bbc_Log2BPP) + 1]);

  return N [bbc_modevar (psprite_address (sprite)->mode, bbc_Log2BPP) + 1];
}

/**************************************************
 * Set gcol, doing tint if dest = 256 colour mode *
 **************************************************/

char colours_gcol_ttab [] =
    "\00\01\20\21\02\03\22\23\04\05\24\25\06\07\26\27\10"
    "\11\30\31\12\13\32\33\14\15\34\35\16\17\36\37\40\41"
    "\60\61\42\43\62\63\44\45\64\65\46\47\66\67\50\51\70"
    "\71\52\53\72\73\54\55\74\75\56\57\76\77";

void colours_set_gcol (int col, int action, int back)

{ switch ((unsigned) bbc_modevar (-1, bbc_NColour))
  { case 63u: case 0xFFFFu: case 0xFFFFFFFFu:
      bbc_gcol (action, colours_gcol_ttab [col >> 2] | back << 7);
      bbc_tint (2 | back, col & 3); /* library shifts it for me */
      ftracef3 ("GCOL 0x%X=%d, TINT %d\n",
          colours_gcol_ttab [col >> 2] | back << 7,
          colours_gcol_ttab [col >> 2] | back << 7, col & 3);
    break;

    case 1u: case 3u: case 15u: case 255u:
      os_swi2 (OS_SetColour, action | back << 4, col);
      ftracef2 ("SetColour 0x%X=%d\n", col, col);
    break;
} }

#if 0
  /*replaces the following. J R C 22nd Feb 1994*/
  { if (bbc_modevar (-1, bbc_Log2BPP) >= 3)  /* 256 colour mode */
    { bbc_gcol (action, colours_gcol_ttab [col >> 2] | back << 7);
      bbc_tint (2 + back, col & 3); /* library shifts it for me */
      ftracef3 ("GCOL 0x%X=%d, TINT %d\n",
          colours_gcol_ttab [col >> 2] | back << 7,
          colours_gcol_ttab [col >> 2] | back << 7, col & 3);
    }
    else
    { bbc_gcol (action, (col & 127) | back << 7);
      ftracef2 ("GCOL 0x%X=%d\n", (col & 127) | back << 7,
          (col & 127) | back << 7);
  } }
#endif

/***********************************************************
 * Set the gcol, doing sprite ECF selection if appropriate *
 ***********************************************************/

void colours_set_sprite_gcol (int gcol, main_sprite *sprite, int back)

{ ftracef2 ("colours_set_sprite_gcol (%d, ..., %d)\n", gcol, back);

  if (gcol < 0)
    psprite_set_ecf (sprite, -gcol - 1, back);
  else if (colours_count (sprite) != 256 || psprite_hastruecolpal (sprite))
  { /*Deep sprite - just use OS_SetColour.*/
    ftracef2 ("OS_SetColour (%d, %d)\n",
        toolwindow_current_mode | back << 4, gcol);
    os_swix2 (OS_SetColour, toolwindow_current_mode | back << 4, gcol);
  }
  else
    colours_set_gcol (gcol, toolwindow_current_mode, back);

  ftracef1 ("set gcol 0x%X\n", gcol);
}

/**********************************************************************
 *                                                                    *
 *  Window event handler for sprite colour windows.                   *
 *                                                                    *
 **********************************************************************/

void colours_event_handler (wimp_eventstr *e, void *handle)

{ main_sprite *sprite = (main_sprite *) handle;
  int coloursize = sprite->coloursize, x_eig, y_eig, max_eig;

  ftracef0 ("colours_event_handler\n");
  x_eig = bbc_vduvar (bbc_XEigFactor);
  y_eig = bbc_vduvar (bbc_YEigFactor);
  if (x_eig > y_eig) max_eig = x_eig; else max_eig = y_eig;
  coloursize = (coloursize - 1 >> max_eig) + 1 << max_eig;

  switch (e->e)
  { case wimp_EOPEN:
      wimpt_complain (wimp_open_wind (&e->data.o));
    break;

    case wimp_EREDRAW:
    { int nc, lim, nacross, lb_bpp;
      BOOL more, mask;
      wimp_redrawstr rds;
      unsigned char mono_ttab [256];

      static int mono_palette [] = {0x00000000, 0xFFFFFF00};

      mask = psprite_hasmask (sprite);
      lim = nc = colours_count (sprite);
      if (mask) lim++;
      for (more = 0; more < 4; more++)
        if (sprite->ECFs [more].sarea != NULL)
          lim++;
      lb_bpp = bbc_modevar (psprite_address (sprite)->mode, bbc_Log2BPP);

      rds.w = e->data.o.w;
      wimpt_noerr (wimp_redraw_wind (&rds, &more));

      nacross = (lim > 21? 16: 4)*coloursize;

      /*Get a mapping from the sprite to black and white.*/
      if (psprite_haspal (sprite))
        os_swi6 (ColourTrans_GenerateTable, sprite->file->spritearea,
            psprite_address (sprite), 0, (int) mono_palette, (int) mono_ttab,
            1 << 0 /*R1 is sprite*/);
      else
        os_swi6 (ColourTrans_GenerateTable, psprite_address (sprite)->mode,
            psprite_std_palettes [sprite->file->use_current_palette? 0: 1]
            [lb_bpp], 0, (int) mono_palette, (int) mono_ttab, 0);

      #ifdef XTRACE
      { int i;

        for (i = 0; i < 1 << (1 << lb_bpp); i++)
          ftracef2 ("mono_ttab [%d]: %d\n", i, mono_ttab [i]);
      }
      #endif

      while (more)
      { int i, colourx = -coloursize, coloury = 0, xpos, ypos;

        /*Is this a wide table?*/
        ftracef2 ("got a %d-entry sprite, table size %d\n",
            nc, sprite->transtab->ttab_size);

        wimp_setcolour (0);
        bbc_clg ();

        /* now convert to on_screen coordinates */
        for (i = 0; i < lim; i++)
        { int ECF = 0;
          colourx += coloursize;
          if (colourx + coloursize > nacross)
            colourx = 0, coloury -= coloursize;

          xpos = colourx + rds.box.x0 - rds.scx;
          ypos = coloury + rds.box.y1 - rds.scy;

          if (main_CLIPS (&rds.g, xpos, ypos - coloursize,
              xpos + coloursize, ypos))
          { int x, y;

            x = xpos + (1 << x_eig)/2;
            y = ypos - coloursize + (1 << y_eig)/2;

            if (i == nc && mask)
              psprite_ecf (0);
            else
            { if (i >= nc)     /* ECF! */
              { int ECFno;

                ECFno = i - nc;
                if (!mask) ECFno++;        /* ECF index + 1 */

                for (ECF = 0; ECFno; ECF++)
                  if (sprite->ECFs [ECF].sarea != NULL) ECFno--;

                psprite_plot_ecf_sprite (sprite, ECF-1, x, y);
                ftracef2 ("Got ECF %d; gcol %d\n", ECF, sprite->gcol);
              }
              else
              { if (sprite->transtab->table != 0)
                  switch (sprite->transtab->ttab_size/nc)
                  { case 1:
                    #ifdef JRC
                      colours_set_gcol (sprite->transtab->table [i], 0, 0);
                    #else
                    { unsigned char *t =
                          (unsigned char *) sprite->transtab->table;
                      os_swi2 (OS_SetColour, 0, t [i]);
                    }
                    #endif
                    break;

                    case 2:
                    { short *t = (short *) sprite->transtab->table;
                      os_swi2 (OS_SetColour, 0, t [i]);
                    }
                    break;

                    case 4:
                    { int *t = (int *) sprite->transtab->table;
                      os_swi2 (OS_SetColour, 0, t [i]);
                    }
                    break;
            } }   }

            if (!ECF) bbc_rectanglefill (x, y, coloursize - (1 << x_eig),
                coloursize - (1 << y_eig));

            /*If this is the selected colour, border is white, otherwise
              black.*/
            wimpt_noerr (wimp_setcolour (sprite->gcol == (!ECF? i: -ECF)?
                0: 7));
            bbc_rectangle (x, y, coloursize - (1 << x_eig),
                coloursize - (1 << y_eig));

            /*Fill in the number (full size only).*/
            if
            ( coloursize == colours_SIZE
                #if !TRACE
                  && (sprite->gcol == (!ECF? i: -ECF) /*||
                      sprite->gcol2 == (!ECF? i: -ECF)*/)
                #endif
            )
            { unsigned int fg, bg;

              /*Find the RGB colour of this cell in the colours window.*/
              if (psprite_hastruecolpal (sprite))
                bg = (&psprite_address (sprite)->mode + 1) [2*i];
              else
              { if (psprite_haspal (sprite))
                  /*Use the brain-damaged palette.*/
                  bg = (&psprite_address (sprite)->mode + 1) [2*(i & 15)] |
                      (i & 16) << 11 | (i & 96) << 17 | (i & 128) << 24;
                else
                { /*Use the relevant "standard palette."*/
                  if (nc == 256)
                    bg = psprite_std_palettes
                        [sprite->file->use_current_palette? 0: 1]
                        [3] [i & 15] |
                        (i & 16) << 11 | (i & 96) << 17 | (i & 128) << 24;
                  else
                    bg = psprite_std_palettes
                        [sprite->file->use_current_palette? 0: 1]
                        [nc == 2? 0: nc == 4? 1: 2] [i];

                  /*Copy nybbles.*/
                  bg |= bg >> 4;
              } }

              if (mono_ttab [i /*was colour 31st Jan 1994*/])
                fg = 0 /*black*/;
              else
                fg = 0xFFFFFF00 /*white*/;

              if (os_swix3 (Wimp_TextOp, 0 /*SetColour*/, fg, bg) == NULL)
              { /*Do this with the WIMP font ...*/
                char s [10];

                if (i < nc)
                  sprintf (s, "%d", i);
                else if (!ECF)
                  s [0] = 'T', s [1] = '\0';
                else
                  sprintf (s, "E%d", ECF);

                os_swi6 (Wimp_TextOp, 2 /*RenderText*/, s,
                    -1, -1,
                    xpos + coloursize/2 -
                    (i < nc? (i < 10? 1: i < 100? 2: 3):
                    !ECF? 2: 1)*(main_FILER_TextWidth - 4)/2,
                    ypos -
                    (coloursize + main_FILER_TextHeight + (1 << y_eig))/2);
              }
              else
              { /*WIMP Does not support wimptextop_set_colour.*/
                wimpt_noerr (wimp_setcolour (mono_ttab [i /*was colour 31st
                    Jan 1994*/]? 7: 0));

                bbc_move (xpos + coloursize/2 -
                    (i < nc? (i < 10? 1: i < 100? 2: 3):
                    !ECF? 2: 1)*(main_FILER_TextWidth - 4)/2,
                    ypos - (coloursize - main_FILER_TextHeight +
                    (1 << y_eig))/2);
                /*the main_FILER_TextWidth's have 4 taken off to set value
                  to the original size*/

                if (i < nc)
                  printf ("%d", i);
                else if (!ECF)
                  puts ("T");
                else
                  printf ("E%d", ECF);
        } } } }

        wimpt_noerr (wimp_get_rectangle (&rds, &more));
      }
    }
    break;

    case wimp_EBUT:
      if (e->data.but.m.bbits & 5)
      { wimp_wstate whereisit;
        wimp_redrawstr rds;
        int x, y, oldgcol, newgcol, ncols, ncs, perrow;

        wimpt_noerr (wimp_get_wind_state (sprite->colourhandle, &whereisit));
        ncs = colours_count (sprite);
        if (!psprite_hasmask (sprite)) ncs--;
        ncols = ncs;
        for (x=0; x<4; x++) if (sprite->ECFs[x].sarea != NULL) ncols++;
        perrow = ncols > 20 ? 16 : 4;

        /* convert to work extent coordinates */
        x = e->data.but.m.x-whereisit.o.box.x0+whereisit.o.x;
        y = - (e->data.but.m.y-whereisit.o.box.y1+whereisit.o.y);

        /* and now to colour number */
        x /= coloursize;
        if (x>=perrow) break;
        y /= coloursize;

        newgcol = y*perrow + x;
        oldgcol = e->data.but.m.bbits & 4? sprite->gcol: sprite->gcol2;

        if (newgcol > ncols) break;

        if (newgcol > ncs)
        { int ECF, n = newgcol - ncs;

          for (ECF = 0; n; ECF++)
             if (sprite->ECFs [ECF].sarea != NULL)
                n--;

          newgcol = -ECF;
        }

        ftracef1 ("Colour %d\n", newgcol /*sprite->gcol*/);
        rds.w = sprite->colourhandle;
        rds.box.x0 = x*coloursize /*x*coloursize*/;
        rds.box.y0 = -(y + 1)*coloursize /*rds.box.y1 - coloursize*/;

        rds.box.x1 = (x + 1)*coloursize /*rds.box.x0 + coloursize*/;
        rds.box.y1 =-y*coloursize /*-y*coloursize*/;
        wimpt_noerr (wimp_force_redraw (&rds));  /* of new colour */

        if (oldgcol < 0)
        { int ECFno, n = 0;

          for (ECFno = 0; ECFno < -oldgcol; ECFno++)
            if (sprite->ECFs[ECFno].sarea != NULL) n++;

          oldgcol = n + ncs;
        }

        rds.w = sprite->colourhandle;
        x = oldgcol%perrow;
        y = oldgcol/perrow;
        rds.box.x0 = x*coloursize /*x*coloursize*/;
        rds.box.y0 =- (y + 1)*coloursize /*rds.box.y1 - coloursize*/;

        rds.box.x1 = (x + 1)*coloursize /*rds.box.x0 + coloursize*/;
        rds.box.y1 =-y*coloursize /*-y*coloursize*/;
        wimpt_noerr (wimp_force_redraw (&rds));  /* of old colour */

        *(e->data.but.m.bbits & 4? &sprite->gcol: &sprite->gcol2) = newgcol;
      }
    break;

    case wimp_ECLOSE:
      ftracef0 ("Colour window close\n");
      colours_delete_window (sprite);
      main_current_options.colours.show_colours = FALSE;
    break;

    case wimp_ESEND:
    case wimp_ESENDWANTACK:
      if (e->data.msg.hdr.action == wimp_MHELPREQUEST)
      { ftracef0 ("Help request on colour window\n");
        main_help_message ("PntH6", e);
      }
    break;

    default:
      ftracef1 ("Poll returned event %d\n", e->e);
    break;
  }
  menus_insdel_frig ();
}

/*****************************************************
 *  Delete a sprite colour window                    *
 *****************************************************/

void colours_delete_window (main_sprite *sprite)

{ ftracef0 ("colours_delete_window\n");
  ftracef1 ("deleting colour window %d\n", sprite->colourhandle);

  m_FREE (sprite->colourtitle, 23); /*plug memory leak. J R C 29th Nov 1993*/
  if (sprite->colourdialogue != 0)
  { os_swi2 (ColourPicker_CloseDialogue, 0, sprite->colourdialogue);
    sprite->colourdialogue = 0;
  }
  else
    main_delete_window (sprite->colourhandle);
  sprite->colourhandle = 0;
}

/****************************************************
 *  Force display of sprite colour window           *
 ****************************************************/

static void calculate_colour_extent (main_sprite *sprite,
    wimp_box *box, char *title)

{ int ne, width, height, i, x_eig, y_eig, max_eig, coloursize;

  ftracef0 ("calculate_colour_extent\n");
  ne = colours_count (sprite);
  if (psprite_hasmask (sprite)) ne++;
  for (i = 0; i < 4; i++) if (sprite->ECFs [i].sarea != NULL) ne++;

  width  = ne >= 256? 16: 4;
  height = (ne - 1)/width + 1;
  ftracef2 ("colour window is %d x %d\n", width, height);

  x_eig = bbc_vduvar (bbc_XEigFactor);
  y_eig = bbc_vduvar (bbc_YEigFactor);
  if (x_eig > y_eig) max_eig = x_eig; else max_eig = y_eig;
  coloursize = (sprite->coloursize - 1 >> max_eig) + 1 << max_eig;

  /* make extent something appropriate */
  box->x0 = 0;
  box->y1 = 0;
  box->x1 = coloursize*width;
  box->y0 =-coloursize*height;

  i = (strlen (title) + 5)*(main_FILER_TextWidth - 4);
    /* set main_FILER_TextWidth to original size */
  if (box->x1 < i) box->x1 = i;
}

void colours_set_extent (main_sprite *sprite)

{ ftracef0 ("colours_set_extent\n");
  if (sprite->colourhandle != NULL)
  { wimp_winfo curr;
    wimp_redrawstr newext;

    curr.w = sprite->colourhandle;
    wimpt_noerr (wimp_get_wind_info (&curr));

    newext.w = sprite->colourhandle;
    calculate_colour_extent (sprite, &newext.box,
                          curr.info.title.indirecttext.buffer);
    wimpt_noerr (wimp_set_extent (&newext));

    wimpt_noerr (wimp_open_wind ((wimp_openstr *) &curr));
    main_force_redraw (sprite->colourhandle);
  }
}

void colours_create_window (main_sprite *sprite)

{ wimp_openstr colours_open_str;
  wimp_wstate colours_w_state, sprite_w_state;
  wimp_redrawstr sprite_redraw_str;
  int colours_height, colours_width, nc;

  ftracef0 ("colours_create_window\n");
  if (sprite->colourhandle == 0)
  { char *sprname = psprite_address (sprite)->name;

    ftracef0 ("New sprite colour window\n");

    /*Get the state of the parent sprite window*/
    wimpt_noerr (wimp_get_wind_state (sprite->windows->window->handle,
        &sprite_w_state));

    /*And its outline*/
    sprite_redraw_str.w = sprite->windows->window->handle;
    wimpt_noerr (wimp_getwindowoutline (&sprite_redraw_str));

    /*Allocate store for the title*/
    if ((sprite->colourtitle = m_ALLOC (23)) == NULL)
    { main_NO_ROOM ("indirect title - sprite colours");
      return;
    }
    sprintf (sprite->colourtitle, msgs_lookup ("PntW7"), sprname);

    if ((nc = colours_count (sprite)) > 256)
    { /*Use a colour picker.*/
      colourpicker_dialogue dialogue;

      dialogue.flags       =
          (psprite_hasmask (sprite)?
              colourpicker_DIALOGUE_OFFERS_TRANSPARENT: 0) |
          (sprite->gcol == nc? colourpicker_DIALOGUE_TRANSPARENT: 0) |
          colourpicker_DIALOGUE_TYPE_CLICK <<
          colourpicker_DIALOGUE_TYPE_SHIFT;
      ftracef1 ("flags set to 0x%X\n", dialogue.flags);
      dialogue.title       = sprite->colourtitle;
      dialogue.visible.x0  = sprite_redraw_str.box.x1;
      dialogue.visible.y0  = 0;
      dialogue.visible.x1  = 0;
      dialogue.visible.y1  = sprite_w_state.o.box.y1;
      dialogue.xscroll     = 0;
      dialogue.yscroll     = 0;
      dialogue.colour      = sprite->gcol == nc? 0:
          colours_entry (nc, sprite->gcol);
      dialogue.size        = 0;

      if (wimpt_complain (os_swix2r (ColourPicker_OpenDialogue,
          colourpicker_OPEN_TOOLBOX, &dialogue, &sprite->colourdialogue,
          &sprite->colourhandle)) != NULL)
      { m_FREE (sprite->colourtitle, 23);
        sprite->colourtitle = 0;
        return;
    } }
    else
    { wimp_wind colours_wind;

      colours_wind = sprwindow_template.t;
      colours_wind.workflags = (wimp_iconflags) (wimp_IBTYPE*wimp_BCLICKAUTO);
      colours_wind.minsize = 0x00010001;      /* allow tinyness */
      colours_wind.titleflags = (wimp_iconflags) (colours_wind.titleflags | wimp_INDIRECT);
      colours_wind.title.indirecttext.bufflen = 23;
      colours_wind.title.indirecttext.buffer = sprite->colourtitle;
      colours_wind.title.indirecttext.validstring = 0;

      calculate_colour_extent (sprite, &colours_wind.ex,
                              colours_wind.title.indirecttext.buffer);
      colours_wind.box.x1 = colours_wind.box.x0 + colours_wind.ex.x1; /*new*/
      colours_wind.box.y0 = colours_wind.box.y1 + colours_wind.ex.y0;
      if (!main_create_window (&colours_wind, &sprite->colourhandle,
                          &colours_event_handler, sprite)) return;

      wimpt_noerr (wimp_get_wind_state (sprite->colourhandle,
          &colours_w_state));
      colours_width  = colours_w_state.o.box.x1 - colours_w_state.o.box.x0;
      colours_height = colours_w_state.o.box.y1 - colours_w_state.o.box.y0;

      colours_open_str.w = sprite->colourhandle;
      /* open colours_wind to right of its parent */
      colours_open_str.box.x0 = sprite_redraw_str.box.x1;
      colours_open_str.box.x1 = sprite_redraw_str.box.x1 + colours_width;
      colours_open_str.box.y0 = sprite_w_state.o.box.y1 - colours_height;
      colours_open_str.box.y1 = sprite_w_state.o.box.y1;
      colours_open_str.behind = -1;
      colours_open_str.x = 0;
      colours_open_str.y = 0;
      wimpt_noerr (wimp_open_wind (&colours_open_str));
  } }
  else
  { /* if the window is already open, then bring it to the front */
    wimp_wstate colour_w_state;

    wimpt_noerr (wimp_get_wind_state (sprite->colourhandle,
        &colour_w_state));
    colour_w_state.o.behind = -1;
    wimpt_noerr (wimp_open_wind (&colour_w_state.o));
  }
}

extern int colours_entry (int nc, int colour)

  /*Returns the palette entry corresponding to the given colour number.*/

{ ftracef0 ("colours_entry\n");

  switch (nc)
  { case 1 << 15:
    { int
        r = colour & 0x1F,
        g = (colour & 0x3E0) >> 5,
        b = (colour & 0x7C00) >> 10;

      return 0xFF*r/0x1F << 8 | 0xFF*g/0x1F << 16 | 0xFF*b/0x1F << 24;
    }
    break;

    case 1 << 24:
      return colour << 8;
    break;

    default:
      ftracef0 ("INVALID SPRITE MODE!!!\n");
      return 0;
    break;
} }
