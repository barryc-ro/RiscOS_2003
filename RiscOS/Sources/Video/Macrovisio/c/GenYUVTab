/* GenYUVTab.c
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 *
 * Constructs the YUV data file for the Macrovision module.
 *
 */

#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>

typedef signed int data_type;
typedef double calc_type;

static data_type data[9 * 0x100];

static data_type rounding_function(const calc_type source)
{
  return (data_type) floor(source + 0.5);
}

static void generate_data(void)
{
  data_type *ry = data + 0x000, *ru = data + 0x100, *rv = data + 0x200;
  data_type *gy = data + 0x300, *gu = data + 0x400, *gv = data + 0x500;
  data_type *by = data + 0x600, *bu = data + 0x700, *bv = data + 0x800;
  const calc_type kYR = 0.299, kYG = 0.587, kYB = 0.114;
  const calc_type kUR = -16744.0/97017.0, kUG = -32872.0/97017.0, kUB = 112.0/219.0;
  const calc_type kVR = 112.0/219.0, kVG = -65744.0/153519.0, kVB = -4256.0/51173.0;
  int i;

  for (i=0; i<0x100; ++i) {
    const double multiplier = 16.0+(219.0*(double)i)/255.0;

    ry[i] = rounding_function(256 * kYR * multiplier);
    ru[i] = rounding_function(256 * kUR * multiplier);
    rv[i] = rounding_function(256 * kVR * multiplier);
    gy[i] = rounding_function(256 * kYG * multiplier);
    gu[i] = rounding_function(256 * kUG * multiplier);
    gv[i] = rounding_function(256 * kVG * multiplier);
    by[i] = rounding_function(256 * kYB * multiplier);
    bu[i] = rounding_function(256 * kUB * multiplier);
    bv[i] = rounding_function(256 * kVB * multiplier);
  }
}

int main(int argc, char *argv[])
{
  FILE *f;
  int exit_code = EXIT_SUCCESS;

  if (argc != 2) {
    fprintf(stderr, "Syntax: %s <output-file>\n", argv[0]);
    exit(EXIT_FAILURE);
  }

  generate_data();

  f = fopen(argv[1], "wb");
  if (f) {
    if (fwrite(data, 1, sizeof(data), f) != sizeof(data)) {
      exit_code = EXIT_FAILURE;
    }
    if (fclose(f) != 0) {
      exit_code = EXIT_FAILURE;
    }
  }

  return exit_code;
}
