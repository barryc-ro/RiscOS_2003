/*
 * module.c
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"
#include "global/services.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"

#include "pip.h"
#include "pipwin.h"

#if CMHG_VERSION < 516
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif

/* Module housekeeping globals */
void   *mod_wsp = NULL;

extern void __module_header (void);
int errorv_claimed=0;
int kill_count=3;


/*----------------------------------------------------------------------------*/
/* Functions */

void kill_module(void)
{
  _swix(OS_ExitAndDie,_INR(0,3),NULL,0x58454241,0,Module_Title);
}

_kernel_oserror * module_finalise(int fatal, int podule, void *pw)
{
  _kernel_oserror *error=NULL;

  error=pipwin_stop_task();
  pip_off();

  if (errorv_claimed==1)
    error=_swix(OS_Release,_INR(0,2),1,errorv_entry,mod_wsp);

  return error;
}

_kernel_oserror * module_initialise(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *error = NULL;
  int chip;

  mod_wsp = pw;

  debug_initialise (Module_Title, "", "");
  debug_set_device(DEBUGIT_OUTPUT);
  debug_set_unbuffered_files (TRUE);

  dprintf(("","Module starting\n"));

  chip=pip_init_device();
  if (chip==-1)
  {
    dprintf(("","Killing module, no pip found\n"));
    kill_module();
  } /* if (chip==-1) */

  return error;
}

char *start_app="Desktop_PIP";

void module_service(int service_number, _kernel_swi_regs *reg, void *pw) {
  if (pip_getchip()==-1)
  {
    dprintf(("","Killing module, no pip found\n"));
    kill_module();
  } /* if (pip_getchip()==-1) */
  else
  {
    switch (service_number)
    {
    case Service_Memory :
      /* if it's our CAO, claim the service call to leave our memory */
      if ((void*)reg->r[2] == (void*)__module_header)
        reg->r[1] = 0;
      break;
    case Service_StartWimp :
      dprintf(("","Service_StartWimp\n"));
      dprintf(("","Taskhandle=%d\n",pipwin_get_taskhandle()));
      if (pipwin_get_taskhandle()==-1)
      {
        pipwin_set_taskhandle(0);   /* this stops repeated attempts to start task */
        reg->r[0]=(int)start_app;
        reg->r[1]=0;
      }
      break;

    } /* switch (service_number) */
  } /* if (pip_getchip()==-1) else */
}



_kernel_oserror *pip_swi(int swi_number, _kernel_swi_regs *reg, void *wsp)
{
  _kernel_oserror *error = NULL;
  unsigned int value;

  dprintf(("","swi handler, swi_number=%d\n",swi_number));
  switch (swi_number+PIP_00) {
  case PIP_SetChip :
    pip_setchip(reg->r[1]);
    break;
  case PIP_GetChip :
    reg->r[1]=pip_getchip();
    break;
  case PIP_SetConversionValue :
    pip_setconversionvalue(reg);
    break;
  case PIP_GetConversionValue :
    pip_getconversionvalue(reg);
    break;
  case PIP_SetOrigin :
    pip_setorigin(reg->r[1],reg->r[2]);
    break;
  case PIP_GetOrigin :
    pip_getorigin(&reg->r[1],&reg->r[2]);
    break;
  case PIP_SetBorderWidth :
    pip_setborderwidth(reg->r[1]);
    break;
  case PIP_SetBorderColour :
    if (reg->r[0] & PIP_BORDERCOLOUR_CURRENT)
      pip_setbordercolour(reg->r[1]);
    if (reg->r[0] & PIP_BORDERCOLOUR_HIGHLIGHT ||
        reg->r[0] & PIP_BORDERCOLOUR_CLICKMOVE)
      pipwin_setbordercolour(reg->r[0],reg->r[1]);
    break;
  case PIP_GetBorderSettings :
    pip_getbordersettings(&reg->r[1],&value);
    reg->r[2]=value;
    break;
  case PIP_On :
    if (!(reg->r[0] & PIP_FLAG_WINDOW))
      pipwin_open_window();
    if (!(reg->r[0] & PIP_FLAG_OVERLAY))
      pip_on();
    break;
  case PIP_Off :
    if (!(reg->r[0] & PIP_FLAG_WINDOW))
      pipwin_close_window();
    if (!(reg->r[0] & PIP_FLAG_OVERLAY))
      pip_off();
    break;
  case PIP_Status :
    reg->r[0]=0;
    if (pip_getstatus()==PIP_OVERLAY_IS_ON)
      reg->r[0] |= PIP_FLAG_OVERLAY;
    if (pipwin_getstatus()==PIP_WINDOW_IS_ON)
      reg->r[0] |= PIP_FLAG_WINDOW;
    break;

  case PIP_MouseResponse :
    reg->r[1]=pipwin_mouseresponse(reg->r[1]);
    break;

  case PIP_SetRaw :
    error=pip_raw_write(reg->r[0],reg->r[1]);
    break;
  case PIP_GetRaw :
    reg->r[1]=(int)pip_fake_read(reg->r[0]);
    break;

  case PIP_SetPosition :
    pipwin_setposition(reg);     /* use window setposition to keep alignment */
    break;
  case PIP_GetPosition :
    pipwin_getposition(reg);
    break;
  case PIP_SetScaling :
    pip_setscaling(reg);
    break;
  case PIP_GetScaling :
    pip_getscaling(reg);
    break;
  case PIP_WindowHandle :
    reg->r[1]=pipwin_gethandle();
    break;
  case PIP_ErrorResponse :
    switch (reg->r[0])
    {
    case PIP_ERRORV_CLAIM :
      if (errorv_claimed==0)
      {
        error=_swix(OS_Claim,_INR(0,2),1,errorv_entry,mod_wsp);
        if (error==NULL)
          errorv_claimed=1;
      } /* if (errov_claimed==0) */
      break;
    case PIP_ERRORV_RELEASE :
      if (errorv_claimed==1)
      {
        error=_swix(OS_Release,_INR(0,2),1,errorv_entry,mod_wsp);
        if (error==NULL)
          errorv_claimed=0;
      } /* if (errorv_claimed==1) */
      break;
    case PIP_ERRORV_STATUS :
      reg->r[1]=errorv_claimed;
      break;
    } /* switch (reg->r[0]) */
    break;

  default:
    break;
  } /* switch (swi_number) */

  return(error);
}

_kernel_oserror *cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
  _kernel_oserror *error=NULL;

  switch (cmd_no)
  {
  case 0 : /* *Desktop_PIP */
      if (pip_getchip()==-1)
      {
        dprintf(("","Killing module, no pip found\n"));
        _swix(OS_Module,_INR(0,1),4,Module_Title);
      } /* if (chip==-1) */
      else
      {
        dprintf(("","Starting wimp task\n"));
        _swix(Wimp_SlotSize,_INR(0,1),20480,-1);
        _swix(OS_Module,_INR(0,2),2,Module_Title,NULL);
      } /* if (pip_getchip()==-1) else */
    break;
  } /* switch (cmd_no) */

  return(error);
}

/* module run section  */
int main(int argc, char *argv[])
{


  dprintf(("","Module run section\n"));

  if (pip_getchip()==-1)
  {
    dprintf(("","Killing module, no pip found\n"));
    kill_module();
  } /* if (pip_getchip()==-1) */
  else
    pipwin_start_task();

  dprintf(("","End module run section\n"));
  return(0);
}
/* End of module.c */
