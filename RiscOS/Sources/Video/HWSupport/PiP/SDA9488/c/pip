/*
 * pip.c
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "global/services.h"
#include "pip.h"
#include "pipwin.h"

unsigned int pip_identifier=0xa0;
unsigned int pip_write=0xde,pip_read=0xdf;

#define fake_data_len 64
unsigned char fake_data[fake_data_len];

/* SDA9488 kickstart values, should also work on SDA9489 */
const unsigned char data_array[40]={
  0x40,0x24,0x0F,0x00,0x45,0x40,0x00,0x00,
  0xf0,0x80,0x00,0x0b,0x40,0x02,0x14,0x00,
  0x87,0xf0,0x00,0x00,0x60,0x60,0x60,0x34,
  0x0d,0x07,0x86,0x00,0x58,0x01,0x00,0x00,
  0x00,0x02};

int   pip_chip=NULL;
int   pip_border_width=0;

int   pip_origin_x=4, pip_origin_y=-3;

/* div_x=2*   4*monitor timing
 * mul_x=parent clock frequency for pip chip
 */

int   pip_mul_x=2734,pip_div_x=8*1600;
int   pip_mul_y=1,pip_div_y=4;

int border_red,border_green,border_blue;

int   pip_x_pos    = 0, pip_y_pos    = 0;
int   pip_x_scale  = 1, pip_y_scale  = 1;
int   pip_x_shrink = 0, pip_y_shrink = 0;

unsigned int  pip_coarse_origin=2, pip_disp_on=1;
int pip_raw_read(int offset);


void identify_chip(int chip)
{
  int value=-1;

  if (chip!=-1)
    pip_chip=chip;     /* chip specified so use it */
  else
  {                    /* otherwise try and find out what chip we have */
    value=pip_raw_read(0x2c);
    if (value!=-1)     /* will be set to -1 if unable to read */
    {
      switch ( (value>>4) & 3)       /* device identification is bits 4+5 */
      {
      case 00 :
        pip_chip=PIP_SDA9488;
        break;
      case 01 :
        pip_chip=PIP_SDA9489;
        break;
      } /* switch ( (value>>4) & 3) */
    } /* if (value!=-1) */
  } /* if (chip!=-1) else */
}

/* reads the register contents at offset address
 * actually reads from an internal copy of whatever is written
 * as it's impossible to read from the pip mc
 */

unsigned char pip_fake_read(int offset)
{
  int result=0;

  if (offset>=0 && offset<fake_data_len)
    result=fake_data[offset];
  return(result);
}

/* writes the raw value to the register offset
 * also takes a copy to ensure the fake read function
 * can return a sensible value
 */

_kernel_oserror *pip_raw_write(int offset, unsigned char value)
{
  _kernel_oserror *error=NULL;
  unsigned int data_word=0;
  data_word=(unsigned int)offset | (((unsigned int)value)<<8);
  error=_swix(IIC_Control,_INR(0,2),pip_write,&data_word,2);

  if (error!=NULL)
    dprintf(("","Write failed\n"));
  /* take copy if successfully written */
  if (error==NULL && offset<fake_data_len && offset>=0)
    fake_data[offset]=value;

  return(error);
}

/* int pip_raw_read(int offset)
 * returns -1 if failed to read or the value read from offset specified
 * uses pip_write and pip_read global variables
 */

int pip_raw_read(int offset)
{
  int result=-1;
  unsigned int data_word=offset;
  _kernel_oserror *error=NULL;

  error=_swix(IIC_Control,_INR(0,2),pip_write,&data_word,1);
  if (error==NULL)
    error=_swix(IIC_Control,_INR(0,2),pip_read,&data_word,1);
  if (error==NULL)
    result=data_word;

  return(result);
}

/* Programmes the PIP with the default
 * kickstart values
 */

void pip_initialise_chip(void)
{
  int index;
  switch (pip_chip)
  {
  case PIP_SDA9488 : case PIP_SDA9489 :
    for (index=0;index<34;index++)
      pip_raw_write(index,data_array[index]);
    break;
  } /* switch (pip_chip) */
}

void pip_init_device(void)
{

  identify_chip(-1); /* let it autodetect */
  pip_initialise_chip();


}

void pip_setchip(int chip_id)
{
  pip_chip=chip_id;
  pip_initialise_chip();
}

int pip_getchip(void)
{
  return(pip_chip);
}

/* Converts the internal scale and shrink values to the
 * actual PIP x pixel size
 */

int convert_x_internal_tv(int scale, int shrink)
{
  int value=0;
  switch (pip_chip)
  {
  case PIP_SDA9488 :
    if (scale==1)
      value=shrink;
    else if (scale==2)
      value=shrink+14;
    else if (scale==3)
      value=shrink+27;
    value=107-(2*value);
    break;
  } /* switch (pip_chip) */

  return(value);
}

/* Converts the internal scale and shrink values to the
 * actual number of  PIP lines
 */

int convert_y_internal_tv(int scale, int shrink)
{
  int value=0;

  switch (pip_chip)
  {
  case PIP_SDA9488 :
    if (scale==1)
      value=shrink;
    else if (scale==2)
      value=shrink+11;
    else if (scale==3)
      value=shrink+22;
    value=88-(2*value);
    break;
  } /* switch (pip_chip) */

  return(value);
}

/* Converts the internal number of PIP y lines
 * to the internal scale and shrink values
 * returns the values in the two variables passed
 */

void convert_y_tv_internal(int value, int *scale, int *shrink)
{
  switch (pip_chip)
  {
  case PIP_SDA9488 :

    value=(88-value)/2;

    if (value<=10)
    {
      *scale=1;
      *shrink=value;
    }
    else if (value<=21)
    {
      *scale=2;
      *shrink=value-11;
    }
    else if (value<=32)
    {
      *scale=3;
      *shrink=value-22;
    }
  } /* switch (pip_chip) */
}

/* Converts the internal number of PIP x pixels
 * to the internal scale and shrink values
 * returns the values in the two variables passed
 */

void convert_x_tv_internal(int value, int *scale, int *shrink)
{
  switch (pip_chip)
  {
  case PIP_SDA9488 :

    value=(107-value)/2;

    if (value<=13)
    {
      *scale=1;
      *shrink=value;
    }
    else if (value<=26)
    {
      *scale=2;
      *shrink=value-14;
    }
    else if (value<=39)
    {
      *scale=3;
      *shrink=value-27;
    }
  } /* switch (pip_chip) */
}

void pip_getscaling(_kernel_swi_regs *reg)
{
  if (reg->r[0]==PIP_SCALE_UNITS_PIPRAW)
  {
    reg->r[1]=pip_x_scale;
    reg->r[2]=pip_y_scale;
    reg->r[3]=pip_x_shrink;
    reg->r[4]=pip_y_shrink;
  }
  else
  {
    reg->r[1]=convert_x_internal_tv(pip_x_scale,pip_x_shrink);
    reg->r[2]=convert_y_internal_tv(pip_y_scale,pip_y_shrink);

    if (reg->r[0]==PIP_UNITS_OSSCREEN)
    {
      /* convert to screen units */

        reg->r[1]=reg->r[1]*pip_div_x/pip_mul_x;
        reg->r[2]=reg->r[2]*pip_div_y/pip_mul_y;
      } /* if (pip->r[0] & PIP_SCALE_SCR_UNITS) */
  } /* if (reg->r[0]==PIP_SCALE_UNITS_PIPRAW) else */
}

void pip_setscaling(_kernel_swi_regs *reg) {
  int temp_pip_x=0, temp_pip_y=0;
  dprintf(("","Got here\n"));


  if (reg->r[0] & PIP_SCALE_PIPRAW) /* specify raw scaling values */
  {
    pip_x_scale=reg->r[1];
    pip_y_scale=reg->r[2];
    pip_x_shrink=reg->r[3];
    pip_y_shrink=reg->r[4];
  } /* if (reg->r[8] & PIP_SCALE_RAW) */
  else  /* calculate raw scaling values from tv units */
  {
    dprintf(("","%d:%d->",reg->r[1],reg->r[2]));
    if (reg->r[0] & PIP_SCALE_PIPUNIT)
    { /* pip units */
      temp_pip_x=reg->r[1];
      temp_pip_y=reg->r[2];
    } /* if (reg->r[0] & PIP_SCALE_PIPUNIT) */
    else
    { /* screen units */
      temp_pip_x=pip_mul_x*reg->r[1]/pip_div_x;
      temp_pip_y=pip_mul_y*reg->r[2]/pip_div_y;
    } /* if (reg->r[0] & PIP_SCALE_PIPUNIT) else */
    dprintf(("","%d:%d\n",temp_pip_x,temp_pip_y));

    if (temp_pip_y>88)
      temp_pip_y=88;
    if (temp_pip_y<=24)
      temp_pip_y=24;

    convert_y_tv_internal(temp_pip_y,&pip_y_scale,&pip_y_shrink);

    if (temp_pip_x>107)
      temp_pip_x=107;
    if (temp_pip_x<=29)
      temp_pip_x=29;

   convert_x_tv_internal(temp_pip_x,&pip_x_scale,&pip_x_shrink);

    /* return the new scaling values */
    reg->r[1]=convert_x_internal_tv(pip_x_scale,pip_x_shrink);
    reg->r[2]=convert_y_internal_tv(pip_y_scale,pip_y_shrink);

    /* Converting if neccessary */
    if (!(reg->r[0] & PIP_SCALE_PIPUNIT))
    {
      reg->r[1]=reg->r[1]*pip_div_x/pip_mul_x;
      reg->r[2]=reg->r[2]*pip_div_y/pip_mul_y;
    } /* if (!(reg->r[0] & PIP_SCALE_PIPUNIT)) */


  } /* if (reg->r[0] & PIP_SCALE_RAW) else */

  if (reg->r[0] & PIP_SCALE_RESET) /* reset scale */
  {
    pip_x_scale=1;
    pip_y_scale=1;
    pip_x_shrink=0;
    pip_y_shrink=0;
  } /* if (reg->r[8] & PIP_SCALE_RESET) */


  pip_raw_write(0x1f,pip_y_shrink);
  pip_raw_write(0x20,pip_x_shrink);

  pip_raw_write(4,((pip_coarse_origin & 3) << 5) | ((pip_x_scale  & 3) << 2) | (pip_y_scale & 3));

}

void pip_disp_onoff()
{
  switch (pip_chip)
  {
  case PIP_SDA9488 : case PIP_SDA9489 :

    pip_raw_write(0,((pip_disp_on & 1) << 7) | (2<<5)); /* Toggle pip on bit and set origin lower left position */
    break;
  } /* switch (pip_chip)  */
}

void pip_getposition(_kernel_swi_regs *reg)
{
  reg->r[1]=pip_x_pos;
  reg->r[2]=pip_y_pos;
  switch (reg->r[3])
  {
  case PIP_UNITS_PIPRAW :
    /* don't need to do anything */
    break;
  case PIP_UNITS_OSSCREEN :
    reg->r[1]=((((reg->r[1]-pip_origin_x)*pip_div_x)/pip_mul_x)>>2)<<2;
    reg->r[2]=((((reg->r[2]-pip_origin_y)*pip_div_y)/pip_mul_y)>>2)<<2;
    break;
  } /* switch (reg->r[3]) */
}

void pip_setposition(int x_pos,int y_pos, int flags,int units)
{
  switch (pip_chip)
  {
  case PIP_SDA9488 : case PIP_SDA9489 :

    if (units==PIP_UNITS_OSSCREEN)
    { /* screen units */
      pip_x_pos=pip_origin_x+(pip_mul_x*x_pos/pip_div_x);
      pip_y_pos=pip_origin_y+(pip_mul_y*y_pos/pip_div_y);
    } /* if (units==PIP_UNITS_OSSCREEN) */
    else if (units==PIP_UNITS_PIPRAW)
    {  /* PIP units */
      pip_x_pos=x_pos;
      pip_y_pos=y_pos;
    } /* else if (units==PIP_UNITS_PIPRAW) */

    if (pip_x_pos>337-convert_x_internal_tv(pip_x_scale,pip_x_shrink))
      pip_x_pos=337-convert_x_internal_tv(pip_x_scale,pip_x_shrink);
    if (pip_y_pos>288-convert_y_internal_tv(pip_y_scale,pip_y_shrink))
      pip_y_pos=288-convert_y_internal_tv(pip_y_scale,pip_y_shrink);

    pip_x_pos= pip_x_pos<0 ? 0 : (pip_x_pos>255 ? 255 : pip_x_pos);
    pip_y_pos= pip_y_pos<0 ? 0 : (pip_y_pos>255 ? 255 : pip_y_pos);

    pip_raw_write(1,pip_x_pos);
    pip_raw_write(2,pip_y_pos);


    break; /* return with updated values */
  } /* switch (pip_chip) */
}
/* **** needs looking at and reimplementing.  Probably needs function rewriting to pass a reg value? */
/* update passed co-ordinates section
    reg->r[1]=pip_x_pos;
    reg->r[2]=pip_y_pos;
    if (reg->r[8] & PIP_POS_SCR_UNITS)
    { // convert to screen units
      reg->r[1]=(int) (0.5+(double)(pip_x_pos)/pip_multiplier_x);
      reg->r[2]=(int) (0.5+(double)(pip_y_pos)/pip_multiplier_y);
    } // if (reg->r[8] & PIP_POS_SCR_UNITS)
    else
    {
      reg->r[1]=pip_x_pos;
      reg->r[2]=pip_y_pos;
    } // if (reg->r[8] & PIP_POS_SCR_UNITS) else
*/

/* sets the conversion values which are used in the
 * OS SCREEN <=> PIP units conversions
 */
void pip_setconversionvalue(_kernel_swi_regs *reg)
{
  if (reg->r[3]!=0 && reg->r[6]!=0) /* ensure we don't divide by zero */
  {
    pip_origin_x=reg->r[1];
    pip_mul_x=reg->r[2];
    pip_div_x=reg->r[3];
    pip_origin_y=reg->r[4];
    pip_mul_y=reg->r[5];
    pip_div_y=reg->r[6];
  } /* if (reg->r[3]!=0 && reg->r[6]!=0) */
}

void pip_getconversionvalue(_kernel_swi_regs *reg)
{
  reg->r[1]=pip_origin_x;
  reg->r[2]=pip_mul_x;
  reg->r[3]=pip_div_x;
  reg->r[4]=pip_origin_y;
  reg->r[5]=pip_mul_y;
  reg->r[6]=pip_div_y;
}

/* sets OS screen conversion origin */

void pip_setorigin(int x,int y)
{
    pip_origin_x=x;
    pip_origin_y=y;
}

void pip_getorigin(int *x,int *y)
{
    *x=pip_origin_x;
    *y=pip_origin_y;
}

/* sets the pip border width
 * automatically limits values to maximum possible for x and y border size
 */

void pip_setborderwidth(int width)
{
  int value;
  switch (pip_chip)
  {
  case PIP_SDA9488 : case PIP_SDA9489 :
    if (width>0)
    {
      value=(1<<6);
      value|=width<=7 ? width<<2 : 7<<2;
      value|=width<=3 ? width : 3;
    } /* if (reg->r[2]<=0) else */
    else
      value=0;
    pip_raw_write(7,value);
    pip_border_width=width;
  } /* switch (pip_chip); */
}

/* Converts rgb values passed into internal yuv values
 * yuv colourspace is defined in ITU REC 601-1
 */
void pip_setbordercolour(unsigned int colour)
{
  int y,u,v;
  int r,g,b;

  r=(colour & 0xff);
  g=(colour & 0xff00) >> 8;
  b=(colour & 0xff0000) >> 16;

  y=((299*r)+(587*g)+(114*b))/1000;
  u=(-(168*r)-(331*g)+(500*b))/1000;
  v=((500*r)-(418*g)-(81*b))/1000;
  y=(y & 0xf0) >> 4;
  u=(u & 0xf0) >> 4;
  v=(v & 0xf0) >> 4;

  pip_raw_write(0x17,y);
  pip_raw_write(0x18,u);
  pip_raw_write(0x19,v);

  /* keep internal copy in case somebody reads values */
  border_red=r;
  border_green=g;
  border_blue=b;

}

void pip_getbordersettings(int *width, unsigned int *colour)
{
  int y,u,v;
  *width=pip_border_width;
  y=(pip_fake_read(0x17) & 0x0f)<<4;
  u=(pip_fake_read(0x18) & 0x0f)<<4;
  v=(pip_fake_read(0x19) & 0x0f)<<4;
  *colour=border_red+(border_green<<8)+(border_blue<<16);

  /**** NEED TO FIX CONVERSION rather than just returning written values? ****/

}

void pip_on(void)
{
  pip_disp_on=1;
  pip_disp_onoff();
}

void pip_off(void)
{
  dprintf(("","pip_off entered\n"));
  pip_disp_on=0;
  pip_disp_onoff();
}

int pip_getstatus(void)
{
  int result=PIP_OVERLAY_IS_OFF;
  if (pip_disp_on==1)
    result=PIP_OVERLAY_IS_ON;
  return(result);
}

_kernel_oserror * pip_errorv_handler(_kernel_swi_regs *reg, void *pw)
{

  _swix(OS_AddCallBack,_INR(0,1),error_callback_entry,pw);
  return(NULL);
}

/* this function is called when an system error has occured to
 * remove PIP display.  This ensures the error dialogue box will
 * be readable.
 */

_kernel_oserror *error_callback_handler(_kernel_swi_regs *reg, void *pw)
{
  dprintf(("","Errorv handler"));
  pip_off();
  /* need to turn off tv sound also */
  pipwin_close_window();
  return(NULL);
}
