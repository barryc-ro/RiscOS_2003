/*
 * pipwin.c
 * This controls all of the windowing functions for the
 * blanking window behind the PIP overlay
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "global/services.h"
#include "pip.h"
#include "pipwin.h"
#include "wimpstruct.h"


#define putword(a,b,c) (*((int*) ((a)+(b)))=(c))
#define getword(a,b)   *((int*)((a)+(b)))
#define putbyte(a,b,c) (*((unsigned char*) ((a)+(b)))=(c))

/* Global variable section */
int pipwin_quit=0;
char *pipwin_task_name="PIP";
int pip_task_handle=-1;
unsigned char data_block[1024];
int pip_window_handle=-1;
int mouse_response=MOUSE_RESPONSE_WINMOVE;
int pipwin_x_pos=1,pipwin_y_pos=1;
int pipwin_width=508,pipwin_height=350;
int screen_width,screen_height;
int pipwin_open=1;
int last_mouse_x=-1,last_mouse_y=-1;
int must_remove=0;

unsigned int pip_highlight_colour=0x0000ff,pip_clickmove_colour=0x00ff00;

/* function predefines */
void convert_pip_position(int in_x,int in_y,int *out_x, int *out_y);
void position_pipwin_coordinate(  int x_pos, int y_pos,int flags, int units);
void next_quadrant(void);

_kernel_oserror *poll_null(void)
{
  _kernel_oserror *error=NULL;

  /* this needs modifying to specify window is on top layer
   * rather than popping window up to front everytime
   */

  if (pipwin_open==1)
  {
    putword(data_block,0,pip_window_handle);
    error=_swix(Wimp_GetWindowState,_IN(1),&data_block);
    if (error==NULL && getword(data_block,28)!=-1)
    { /* not on top of all other windows so push forward */
      putword(data_block,28,-1);
      error=_swix(Wimp_OpenWindow,_IN(1),&data_block);
    } /* if (getword(data_block,28)!=-1) */
  } /* if (pipwin_open==1) */

  /* if blocking mouse from entering window
   * then last_mouse will have been set by mouse enter poll message
   * so move mouse back out
   */
  if (last_mouse_x!=-1 && mouse_response==MOUSE_RESPONSE_BLOCK)
  {
    data_block[256+0]=3;
    data_block[256+1]=last_mouse_x & 0xff;
    data_block[256+2]=(last_mouse_x >> 8) & 0xff;
    data_block[256+3]=last_mouse_y & 0xff;
    data_block[256+4]=(last_mouse_y >>8) & 0xff;

    _swix(OS_Word,_INR(0,1),21,data_block+256);
  } /*if (last_mouse_x!=-1 && mouse_response==MOUSE_RESPONSE_BLOCK) */
  return(error);
}

_kernel_oserror *poll_open_window(void)
{
  _kernel_oserror *error=NULL;

  if (pipwin_open==1)
  {

    error=_swix(Wimp_OpenWindow,_IN(1),&data_block);
    _swix(PIP_SetPosition,_INR(0,3),0,
          getword(data_block,4),getword(data_block,8),PIP_UNITS_OSSCREEN);
    /* **** need to fix this part
    _swix(PIP_Control,_INR(0,2) | _IN(8),PIP_CONTROL_SCALE,
          getword(data_block,12)-getword(data_block,4)-4,
          getword(data_block,16)-getword(data_block,8)-4,PIP_SCALE_SCR_UNITS);
    */
  } /* if (pipwin_open==1) */
  return (error);
}

_kernel_oserror *poll_close_window(void)
{
  _kernel_oserror *error=NULL;
  error=_swix(Wimp_CloseWindow,_IN(1),&data_block);
  pip_off();
  pipwin_open=0;

  return(error);
}
_kernel_oserror *poll_leave_window(void)
{
  _kernel_oserror *error=NULL;

  if (pipwin_open==1)
  {
    switch (mouse_response)
    {
    case MOUSE_RESPONSE_HIGHLIGHT : case MOUSE_RESPONSE_CLICKMOVE :
      _swix(PIP_SetBorderWidth,_IN(1),0);
      break;
    case MOUSE_RESPONSE_BLOCK : /* not allow into window */
      last_mouse_x=-1; /* stop moving out of window */
      break;
    } /* switch(mouse_response) */
  } /* if (pipwin_open==1) */
  return(error);
}

_kernel_oserror *poll_enter_window(void)
{
  _kernel_oserror *error=NULL;
  int mouse_x,mouse_y,diff_x,diff_y;
  int temp_x,temp_y;

  if (pipwin_open==1)
  {

    switch (mouse_response)
    {
    case MOUSE_RESPONSE_HIGHLIGHT :
      _swix(PIP_SetBorderColour,_IN(1),pip_highlight_colour);
      _swix(PIP_SetBorderWidth,_IN(1),7);
      break;
    case MOUSE_RESPONSE_CLICKMOVE :
      _swix(PIP_SetBorderColour,_IN(1),pip_clickmove_colour);
      _swix(PIP_SetBorderWidth,_IN(1),7);
      break;

    case MOUSE_RESPONSE_BLOCK : /* not allow to move into window */
      /* fundamentally the same as warp for detecting position, just
       * different response section so combined together
       */
    case MOUSE_RESPONSE_WARP : /* move to opposite side of window */

      error=_swix(Wimp_GetWindowOutline,_IN(1),&data_block);
      if (error!=NULL)
        return(error);

      data_block[256+0]=6;
      _swix(OS_Word,_INR(0,1),21,data_block+256);   /* read pointer position */

      mouse_x=data_block[256+1]+(data_block[256+2]<<8);
      mouse_y=data_block[256+3]+(data_block[256+4]<<8);

      diff_x= abs(mouse_x-getword(data_block,4));
      if (diff_x>abs(getword(data_block,12)-mouse_x))
        diff_x=-abs(mouse_x-getword(data_block,12));      /* will be -ve to signify nearer to right */
      diff_y=abs(mouse_y-getword(data_block,8));
      if (diff_y>abs(getword(data_block,16)-mouse_y))
        diff_y=-abs(mouse_y-getword(data_block,16));      /* will be -ve to signify nearer to top */

      if (mouse_response==MOUSE_RESPONSE_WARP)
      {

        if (abs(diff_x)<abs(diff_y))
        {
          /* nearer to left/right than top/bottom*/
          if (mouse_x>( ( getword(data_block,12)+getword(data_block,4))/2))
            mouse_x=getword(data_block,4)-4;     /* move to left */
          else
            mouse_x=getword(data_block,12)+4;    /* move to right */
        } /* left/right section */
        else
        {
          /* nearer to top/bottom */
          if (mouse_y>( ( getword(data_block,16)+getword(data_block,8))/2))
            mouse_y=getword(data_block,8)-4;     /* move to bottom */
          else
            mouse_y=getword(data_block,16)+4;    /* move to top */
        } /* top/bottom section */
      } /* if (mouse_response==MOUSE_RESPONSE_WARP) */
      else if (mouse_response==MOUSE_RESPONSE_BLOCK)
      {
        if (abs(diff_x)<abs(diff_y))
        {
          /* nearer to left/right than top/bottom */
          if (mouse_x<( ( getword(data_block,12)+getword(data_block,4))/2))
            mouse_x=getword(data_block,4)-4;     /* move to left */
          else
            mouse_x=getword(data_block,12)+4;    /* move to right */
        } /* left/right section */
        else
        {
          /* nearer to top/bottom */
          if (mouse_y<( ( getword(data_block,16)+getword(data_block,8))/2))
            mouse_y=getword(data_block,8)-4;     /* move to bottom */
          else
            mouse_y=getword(data_block,16)+4;    /* move to top */
        } /* top/bottom section */
        last_mouse_x=mouse_x;
        last_mouse_y=mouse_y;
      } /* else if (mouse_response==MOUSE_RESPONSE_BLOCK) */

      data_block[256+0]=3;
      data_block[256+1]=mouse_x & 0xff;
      data_block[256+2]=(mouse_x >> 8) & 0xff;
      data_block[256+3]=mouse_y & 0xff;
      data_block[256+4]=(mouse_y >>8) & 0xff;

      _swix(OS_Word,_INR(0,1),21,data_block+256);
      break;
    case MOUSE_RESPONSE_WINMOVE : /* auto move to next quadrant */
      next_quadrant();
      convert_pip_position(pipwin_x_pos,pipwin_y_pos,&temp_x,&temp_y);
      position_pipwin_coordinate(temp_x,temp_y,0,PIP_UNITS_OSSCREEN);
      break;


    } /* case mouse_response */
  } /* if (pipwin_open==1) */
  return(error);
}

/*
 * alter the pip position to the next screen quadrant
 */

void next_quadrant(void)
{
  if (pipwin_x_pos==1 && pipwin_y_pos==1)
     pipwin_y_pos=-1;
  else if (pipwin_x_pos==1 && pipwin_y_pos==-1)
    pipwin_x_pos=-1;
  else if (pipwin_x_pos==-1 && pipwin_y_pos==-1)
    pipwin_y_pos=1;
  else
    pipwin_x_pos=1;
}



_kernel_oserror *poll_mouse_click(void)
{
  _kernel_oserror *error=NULL;
  int temp_x,temp_y;
  dprintf(("","Mouse button pressed=%d\n",getword(data_block,8)));
  if (pipwin_open==1)
  {
     switch (getword(data_block,8))
     {
     case 1 : case 4 : /* left or right button */
       if (mouse_response==MOUSE_RESPONSE_CLICKMOVE)
       {
         next_quadrant();
         convert_pip_position(pipwin_x_pos,pipwin_y_pos,&temp_x,&temp_y);
         position_pipwin_coordinate(temp_x,temp_y,0,PIP_UNITS_OSSCREEN);
       } /* if (mouse_response==MOUSE_RESPONSE_CLICKMOVE) */

       break;

     case 64 : /* left button drag */
       if (mouse_response==MOUSE_RESPONSE_HIGHLIGHT)
       {
         /* datablock is 1k in size and wimp poll will fill lower 256 bytes
          * so 512 bytes on will be safe
          */
         putword(data_block,512,getword(data_block,12));
         putword(data_block,512+4,1);
         _swix(Wimp_DragBox,_IN(1),data_block+512);
       }
     break;
     } /* switch(getword(data_block,8) */
  } /* if (pipwin_open==1) */

  return(error);
}

_kernel_oserror *poll_user_message(void)
{
  _kernel_oserror *error=NULL;
  dprintf(("","Got message event\n"));
  switch ( getword(data_block,16))
  {
  case 0 : case 14 :   /* Quit message and message_shutdown */
    dprintf(("","Got quit message\n"));
    pipwin_quit=1;
    break;
  case 0x400c1 : /* Message_ModeChange */
    /* add functionality to cope with other screen displays */
    break;
  } /* switch ((int*)(data_block+16)) */
  return(error);
}

/* This function converts the divisions passed in the in_x and in_y
 * to OS screen units which are returned in out_x and out_y
 */

void convert_pip_position(int in_x,int in_y,int *out_x, int *out_y)
{
  int mid_x,mid_y;
  int size,shift;
  /* get screen size */
  _swix(OS_ReadModeVariable,_INR(0,1) | _OUT(2),-1,11,&size);
  _swix(OS_ReadModeVariable,_INR(0,1) | _OUT(2),-1,4,&shift);
  screen_width=(size+1)<<shift;
  _swix(OS_ReadModeVariable,_INR(0,1) | _OUT(2),-1,12,&size);
  _swix(OS_ReadModeVariable,_INR(0,1) | _OUT(2),-1,5,&shift);
  screen_height=(size+1)<<shift;

  mid_x=screen_width/2;
  mid_y=screen_height/2;

  /* set to middle of quadrant */
  *out_x=mid_x+(in_x*(mid_x/2));
  *out_y=mid_y+(in_y*(mid_y/2));

  /* now adjust for size of pip */

  *out_x-=(pipwin_width/2);
  *out_y-=(pipwin_height/2);
  *out_x=(*out_x>>4)<<4;    /* align by 8 pixels */
  *out_y=(*out_y>>1)<<1;    /* align by 2 lines  */

}

void position_pipwin_coordinate(int x_pos, int y_pos,int flags, int units)
{
  unsigned char block[32];
  int temp_x,temp_y;

  dprintf(("","Position_pipwin_coord, [%d,%d],%d,%d\n",x_pos,y_pos,flags,units));

  if (!(flags & PIP_FLAG_OVERLAY))
    pip_setposition(x_pos,y_pos,flags,units);

  dprintf(("","x=%d,y=%d =>",x_pos,y_pos));
  _swix(PIP_GetPosition,_IN(3) | _OUTR(1,2), PIP_UNITS_OSSCREEN, &temp_x,&temp_y);
  dprintf(("","x=%d,y=%d\n",temp_x,temp_y));

  /* if window flag not set and not raw units (unsupported for window atm) */
  if (units!=PIP_UNITS_PIPRAW && !(flags & PIP_FLAG_WINDOW))
  {
    putword(block,0,pip_window_handle);
    putword(block,4,temp_x+8);
    putword(block,8,temp_y+4);
    putword(block,12,temp_x+pipwin_width-4);
    putword(block,16,temp_y+pipwin_height-4);
    putword(block,20,0);
    putword(block,24,0);
    putword(block,28,-1);
    _swix(Wimp_OpenWindow,_IN(1),block);
  }
}

_kernel_oserror *pipwin_poll_task(void)
{
  _kernel_oserror *error=NULL;

  unsigned int time_value;
  int reason,wimp_mask;

  if (data_block==NULL)
    pipwin_quit=1;           /* failed to allocate memory so give up and die*/
  else
    pipwin_quit=0;

  wimp_mask=0;               /* need to fix so ignores NULL */

  dprintf(("","Starting wimp poll\n"));

  while (!pipwin_quit)
  {
    _swix(OS_ReadMonotonicTime,_OUT(0),&time_value);
    _swix(Wimp_PollIdle,_INR(0,2) | _OUT(0),wimp_mask,&data_block,
          time_value+10,&reason);
    /*  An error occured in the system but we were not able to close
     *  the window, so we close it at the soonest possible opportunity
     */

    if (must_remove==1)
    {
      pipwin_close_window();
      must_remove=0;
    }

    if (reason!=0)
      dprintf(("","Reason=%d\n",reason));
    switch (reason)
    {
      case 0 : /* null */
        error=poll_null();
        break;
      case 2 : /* window open */
        error=poll_open_window();
        break;
      case 3 : /* window close */
        error=poll_close_window();
        break;
      case 4 : /* leave window */
        error=poll_leave_window();
        break;
      case 5 : /* enter window */
        error=poll_enter_window();
        break;
      case 6 : /* mouse button */
        error=poll_mouse_click();
        break;
      case 8 : /* key press */
        break;
      case 17 : case 18 :    /* message events */
        error=poll_user_message();
        break;
    } /* switch (reason); */

  } /* while (!pipwin_quit) */

  pip_off();
  _swix(Wimp_CloseDown,_INR(0,1),pip_task_handle,0x4B534154);
  pip_task_handle=-1;
  return(error);

}


_kernel_oserror *pipwin_create_window()
{
  _kernel_oserror *error=NULL;
  int x_pos,y_pos;

  convert_pip_position(pipwin_x_pos,pipwin_y_pos,&x_pos,&y_pos);

  /* All offset by 4 so we can reuse datablock for opening window */
  putword(data_block,4,x_pos);
  putword(data_block,8,y_pos);
  putword(data_block,12,x_pos+pipwin_width);
  putword(data_block,16,y_pos+pipwin_height);
  putword(data_block,20,0);
  putword(data_block,24,0);
  putword(data_block,28,-1); /* top */
  putword(data_block,32,0x80002012); /* window flags */
  putbyte(data_block,36,7); /* title + window foreground colour */
  putbyte(data_block,37,2); /* title background */
  putbyte(data_block,38,7); /* work foreground */
  putbyte(data_block,39,7); /* work area background */
  putbyte(data_block,40,12); /* scroll bar outer colour */
  putbyte(data_block,41,1); /* scroll bar inner colour */
  putbyte(data_block,42,3); /* highlighted title background */
  putbyte(data_block,43,0); /* reserved */
  putword(data_block,44,0); /* minimum workarea x coord */
  putword(data_block,48,-1000); /* minimum workarea y coord */
  putword(data_block,52,1000); /* max workarea x coord */
  putword(data_block,56,0); /* max workarea y coord */
  putword(data_block,60,0x00000000); /* title bar flags */
  putword(data_block,64,0x00006000); /* work area flags */
  putword(data_block,68,1); /* wimp sprite area */
  putword(data_block,72,0); /* min width */
  putword(data_block,76,0); /* title bar data (12 bytes) */
  putword(data_block,78,0);
  putword(data_block,82,0);
  putword(data_block,88,0); /* number of icons */



  dprintf(("","Creating window\n"));
  error=_swix(Wimp_CreateWindow,_IN(1) | _OUT(0),data_block+4,&pip_window_handle);
  dprintf(("","Got window handle %d\n",pip_window_handle));

/*
  if (error==NULL)
  {
    putword(data_block,0,pip_window_handle);
    dprintf(("","Opening window\n"));
    error=_swix(Wimp_OpenWindow,_IN(1),data_block);
  }
  if (error!=NULL)
    return(error);  * don't continue if error occured *

  pip_on();         * start pip overlay *

*/


  return(error);
}

void pipwin_setscaling(int width, int height)
{
  WIMP_WindowStateStruct window;
  window.window_handle=pip_window_handle;
  _swix(Wimp_GetWindowState,_IN(1),&window);
  window.max_x=window.min_x+width;
  window.max_y=window.min_y+height;

  _swix(Wimp_OpenWindow,_IN(1),&window);
}



/*
 * pipwin_start_start attempts to start a desktop application for the
 * blanking window behind the pip
 */

_kernel_oserror *pipwin_start_task(void)
{
  _kernel_oserror *error=NULL;
  int shift,size;

  if (pip_task_handle<=0)
  {  /* ensure not already running */

    dprintf(("","Starting task\n"));

    error=_swix(Wimp_Initialise,_INR(0,3) | _OUT(1), 310,0x4B534154, pipwin_task_name, NULL,&pip_task_handle);
    dprintf(("","Got task_handle => %d\n",pip_task_handle));

    /* get screen size */
    _swix(OS_ReadModeVariable,_INR(0,1) | _OUT(2),-1,11,&size);
    _swix(OS_ReadModeVariable,_INR(0,1) | _OUT(2),-1,4,&shift);
    screen_width=(size+1)<<shift;
    _swix(OS_ReadModeVariable,_INR(0,1) | _OUT(2),-1,12,&size);
    _swix(OS_ReadModeVariable,_INR(0,1) | _OUT(2),-1,5,&shift);
    screen_height=(size+1)<<shift;


    if (error==NULL)
      error=pipwin_create_window();

    if (error==NULL)
      error=pipwin_poll_task();
  } /* if (pip_task_handle>0) */
  dprintf(("","Exiting start task function\n"));
  return(error);
}

_kernel_oserror *pipwin_stop_task(void)
{
  _kernel_oserror *error=NULL;

  dprintf(("","Closing down application\n"));
  if (pip_task_handle>0)
  {
    pipwin_quit=1;
    error=_swix(Wimp_CloseDown,_INR(0,1),pip_task_handle, 0x4B534154);
    pip_task_handle=-1;
    if (error==NULL)
    {
      pip_task_handle=-1;
      dprintf(("","Application successfully closed\n"));
    }
    else
      dprintf(("","Failed to close application\n"));
  } /* if (pip_task_handle>0) */

  return(error);
}

int pipwin_get_taskhandle(void)
{
  return(pip_task_handle);
}

void pipwin_set_taskhandle(int handle)
{
  pip_task_handle=handle;
}

_kernel_oserror *pipwin_open_window(void)
{
  _kernel_oserror *error=NULL;

  putword(data_block,0,pip_window_handle);

  error=_swix(Wimp_GetWindowState,_IN(1),&data_block);
  if (error==NULL)
  {
    putword(data_block,28,-1);     /* top of stack */
    error=_swix(Wimp_OpenWindow,_IN(1),&data_block);
  }
  if (error==NULL)
    pipwin_open=1;
  return(error);
}

_kernel_oserror *pipwin_close_window(void)
{
  _kernel_oserror *error=NULL;

  dprintf(("","pipwin_close_window entered\n"));
  putword(data_block,0,pip_window_handle);
  error=_swix(Wimp_CloseWindow,_IN(1),&data_block);
  if (error!=NULL)
  {
      /* Failed to remove window
       * close window at next possible opportunity
       * unless already attempting to do so
       */
    if (must_remove==0)
    {
      must_remove=1;
    } /* if must_remove==0) */
    else
    {
      /* failed to close window twice in a row, don't attempt again */
      must_remove=0;
    } /* if must_remove==0) else */
  } /* if (error!=NULL) */
  pipwin_open=0;
  return(error);
}

int pipwin_getstatus(void)
{
  int result=PIP_WINDOW_IS_OFF;
  if (pipwin_open==1)
    result=PIP_WINDOW_IS_ON;

  return(result);
}

int pipwin_mouseresponse(int response)
{
  if (response==-1)
    response=mouse_response;
  else
    mouse_response=response;

  return(response);
}

void pipwin_getposition(_kernel_swi_regs *reg)
{
  /* we can handle division units here
   * otherwise pass to main pip_getposition function
   */
  if (reg->r[3]==PIP_UNITS_DIVISION)
  {
    reg->r[1]=pipwin_x_pos;
    reg->r[2]=pipwin_y_pos;
  }
  else
    pip_getposition(reg);
}

void pipwin_setposition(_kernel_swi_regs *reg)
{
  int temp_x,temp_y;
  switch (reg->r[3]) {
  case PIP_UNITS_OSSCREEN :
    position_pipwin_coordinate(reg->r[1],reg->r[2],reg->r[0],reg->r[3]);
    break;
  case PIP_UNITS_DIVISION :
    /* modify internal division position and convert to OS screen units */
    pipwin_x_pos=reg->r[1];
    pipwin_y_pos=reg->r[2];
    convert_pip_position(pipwin_x_pos,pipwin_y_pos,&temp_x,&temp_y);
    position_pipwin_coordinate(temp_x,temp_y,reg->r[0],PIP_UNITS_OSSCREEN);
    break;
  case PIP_UNITS_PIPRAW :
    position_pipwin_coordinate(temp_x,temp_y,reg->r[0],reg->r[3]);
    break;
  } /* switch (reg->r[3]) */
}

void pipwin_setbordercolour(int flag, unsigned int colour)
{
  if (flag & PIP_BORDERCOLOUR_HIGHLIGHT)
    pip_highlight_colour=colour;
  if (flag & PIP_BORDERCOLOUR_CLICKMOVE)
    pip_clickmove_colour=colour;
}

int pipwin_gethandle(void)
{
  return(pip_window_handle);
}
