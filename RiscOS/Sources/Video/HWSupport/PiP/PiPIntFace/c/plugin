/*
 * plugin.c
 * This handles the plugin related calls.
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "debuglib/debuglib.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "global/services.h"
#include "task.h"
#include "wimpstruct.h"
#include "plugin.h"
#include "pip.h"
#include "utils.h"
#include "list.h"
#include "PIPControl.h"




/* External global variables */

extern void   *mod_wsp;

/* Global variable section */

extern unsigned char *pollword_mem;
char *filter_name=NULL;
int filter_claimed=0;

_kernel_oserror *stop_filter(void)
{
  _kernel_oserror *error=NULL;

  if (filter_claimed==1)
  {
    dprintf(("","Stop_filter removing filter\n"));
//    error=_swix(Filter_DeRegisterCopyFilter,_INR(0,2),filter_name,filter_entry,mod_wsp);
    error=_swix(Filter_DeRegisterPostFilter,_INR(0,4),filter_name,filter_entry,mod_wsp,0,0xfffffff9);
    if (error==NULL)
    {
      filter_claimed=0;

    } // if (error==NULL) */
    else
    {
      dprintf(("","Failed to remove filter\n"));
    } /* if (error==NULL) */
  } /* if (filter_claimed==1) */

  return(error);
}

_kernel_oserror *start_filter(void)
{
  _kernel_oserror *error=NULL;
  dprintf(("","Starting filter\n"));
  if (filter_name==NULL)
    dprintf(("","Filter_name hasn't allocated"));
  else
  {
    strcpy(filter_name,"PiPPlugin");
    if (filter_claimed==0)
    {
      dprintf(("","Registering filter\n"));
  //    error=_swix(Filter_RegisterCopyFilter,_INR(0,2),filter_name,filter_entry,mod_wsp);
      error=_swix(Filter_RegisterPostFilter,_INR(0,4),filter_name,filter_entry,mod_wsp,0,0xfffffff9);
      if (error==NULL)
      {
        dprintf(("","Filter_claimed set\n"));
        filter_claimed=1;
      } /* if (error==NULL) */
    } /* if (filter_claimed==0) */
  } /* if (filter_name==NULL) else */
  return(error);

}


/* This function tests if the window used by plugin record is
 * currently covered by any over window.
 * If it is 100% uncovered, then WINDOW_VISIBLE will be returned
 * otherwise WINDOW_NOTVISIBLE is returned.
 */

int test_plugin_visible(PLUGIN_LIST *plugin)
{
  int result=WINDOW_VISIBLE;
  int window_handle, old_window_handle,parent_window_handle;
  WIMP_WindowStateStruct window;
  int pip_masking_window;

  /* get the window handle of the PIP Control masking window */
  _swix(PIP_WindowHandle,_OUT(1),&pip_masking_window);

  if (plugin->plugin_window==-1 || plugin->active==PLUGIN_INACTIVE)
    result=WINDOW_NOTVISIBLE;
  else
  {
    /* test if child window is completely viewable */
    if (test_window_visible(plugin->plugin_window,plugin->browser_window)!=WINDOW_VISIBLE)
      result=WINDOW_NOTVISIBLE;
    else if (test_window_onscreen(plugin->plugin_window)!=WINDOW_VISIBLE)
      result=WINDOW_NOTVISIBLE;
    else
    {
      /* Now need to check that any other windows in main window stack do
       * not cover the plugin window.
       * First go up parent window stack to find handle of top level browser window*/
      window_handle=plugin->plugin_window;
      do {
        old_window_handle=window_handle;
        _swix(Wimp_Extend,_INR(0,1) | _OUT(1), 6, window_handle, &window_handle);
      } while (window_handle!=-1);

      /* old_window_handle is now set to the most parent window of the stack containing
       * the plugin window.  Now test if any windows are in front and covering the plugin
       */

      window.window_handle=plugin->browser_window;
      do {
        _swix(Wimp_GetWindowState,_INR(1,2) | _OUT(3) ,&window,0x4b534154, &parent_window_handle);
        if (window.front_window!=-1)
        {
          /* There is a window in front so see if it covers the plugin window
           * Don't test window if it's the pip_control masking window
           * if it does not obscure plugin then continue up window stack
           */
          if (window.front_window!=pip_masking_window &&
              test_window_obscured(plugin->plugin_window,window.front_window)==WINDOW_NOTVISIBLE )
            result=WINDOW_NOTVISIBLE;
          else
            window.window_handle=window.front_window;
        } /* if (window.front_window!=-1) */
        else
        {
          /* no more windows above so see if there is a parent window owning the current window
           * if so then change to that window and continue up the window stack
           */
          window.window_handle=parent_window_handle;
        } /* if (window.front_window!=-1) else */
        /* Continue until reached top of window stack (no more parents or windows in front
         * or found a window that (partially/completely) obscures the plugin
         */
      } while (result!=WINDOW_NOTVISIBLE && (window.window_handle!=-1 || parent_window_handle!=-1));

    } /* if (test_window_visible(plugin_window_handle,plugin->browser_window)!=WINDOW_VISIBLE) else */

    // need to test if offscreen
    if (result==WINDOW_VISIBLE)
    {
      // maybe do some more stuff here?
      dprintf(("","Plugin is completely visible\n"));
    }
    else if (result==WINDOW_NOTVISIBLE)
    {
      /* plugin window is not completely visible so if it is the currently
       * active window then stop filter and return back to user mode
       */
      dprintf(("","Plugin is not completely visible\n"));
      if (plugin->active==PLUGIN_ACTIVE)
      {
        dprintf(("","Stopping active in redraw\n"));
        plugin->active=PLUGIN_INACTIVE;
        stop_filter();
        pip_disable();
        pip_setmode(PIP_MODE_USER);

      } /* if (plugin->active==PLUGIN_ACTIVE) */
    } /* else if (result==WINDOW_NOTVISIBLE) */

  } /* if (plugin_window_handle==-1) */

  return(result);
}


_kernel_oserror *plugin_redraw(unsigned int window_handle)
{
  int redraw_flag=-1;
  _kernel_oserror *error=NULL;
  WIMP_WindowStateStruct window;
  WIMP_RedrawStruct redraw;
  PLUGIN_LIST *plugin=list_find_by_plugin_handle(window_handle);
  int active=PLUGIN_INACTIVE;

  /* If no plugin objects found then assume plugin is inactive */
  if (plugin!=NULL)
    active=plugin->active;

  dprintf(("","Redraw, plugin=%p, active=%d\n",plugin,active));


  redraw.window_handle=window_handle;
  _swix(Wimp_RedrawWindow,_IN(1) | _OUT(0),&redraw,&redraw_flag);
  while (redraw_flag!=0)
  {
    /* If plugin disabled use red otherwise use black as background */
    if (active==PLUGIN_ACTIVE)
      _swix(Wimp_SetColour,_IN(0),7);
    else
      _swix(Wimp_SetColour,_IN(0),11);
    _swix(OS_Plot,_INR(0,2),4,redraw.vis_min_x, redraw.vis_min_y);
    _swix(OS_Plot,_INR(0,2),101,redraw.vis_max_x,redraw.vis_max_y);

    _swix(Wimp_GetRectangle,_IN(1) | _OUT(0),&redraw,&redraw_flag);
  }; /* while (redraw_flag !=0) */

  if (active)
  {
    /* identify plugin window, if one we're interested in then move window */
    window.window_handle=plugin->plugin_window;
    _swix(Wimp_GetWindowState,_IN(1),&window);

    pip_set_position(window.min_x,window.min_y,window.max_x,window.max_y);
  } /* if (plugin_disabled==0) */

  return(error);
}

_kernel_oserror *plugin_open_window(WIMP_WindowOpenStruct *window)
{
  _kernel_oserror *error=NULL;
  dprintf(("","plugin_open window\n"));
  error=_swix(Wimp_OpenWindow,_IN(1),window);
  return (error);
}

_kernel_oserror *plugin_close_window(WIMP_WindowCloseStruct *window)
{
  _kernel_oserror *error=NULL;
  dprintf(("","plugin_close window\n"));
  error=_swix(Wimp_CloseWindow,_IN(1),window);
  return(error);
}

_kernel_oserror *plugin_pollword(unsigned char *data_block)
{
  _kernel_oserror *error=NULL;
  PLUGIN_LIST *plugin;

  dprintf(("","Pollword entered\n"));
  plugin=list_plugin_find_active();

  /* reset pollword flag and test if the plugin window is still completely visible */
  putword(pollword_mem,0,0);

  // get current instance

  if (plugin!=NULL) // also test if valid current instance
    test_plugin_visible(plugin);
  return(error);
}



void plugin_reshape_msg(WIMP_MessageStruct *message)
{
  int plugin_min_x,plugin_min_y,plugin_max_x,plugin_max_y;
  WIMP_WindowStateStruct parent,plugin_window;
  Plugin_ReshapeMsg *reshape=(Plugin_ReshapeMsg *)message;
  _kernel_oserror *error=NULL;

  PLUGIN_LIST *plugin=list_find_by_instance(reshape->plugin_instance);

  /* if plugin was found from instance then reshape it */

  if (plugin!=NULL)
  {
    dprintf(("","Reshape to [%d,%d][%d,%d]\n",reshape->min_x,reshape->min_y,reshape->max_x,reshape->max_y));

    /* dont assume parent window handle so update handle
     * and then get window size of parent
     */


    plugin->browser_window=reshape->parent_window_handle;
    parent.window_handle=plugin->browser_window;
    list_set_plugin_parent_handle(reshape->plugin_instance,plugin->browser_window);
    _swix(Wimp_GetWindowState,_IN(1),&parent);

    dprintf(("","parent window [%d,%d][%d,%d] [%d,%d]\n",
             parent.min_x,parent.min_y,parent.max_x,parent.max_y,
             parent.scroll_x,parent.scroll_y));

    /* Get plugin co-ordinates relative to parent window work area origin */
    plugin_min_x=reshape->min_x;
    plugin_min_y=reshape->min_y;
    plugin_max_x=reshape->max_x;
    plugin_max_y=reshape->max_y;

    /* offset the plugin window by the workarea information from the window
     * containing the plugin
     */
    plugin_window.window_handle = plugin->plugin_window;
    plugin_window.min_x         = plugin_min_x+parent.min_x-parent.scroll_x;
    plugin_window.min_y         = plugin_min_y+parent.max_y-parent.scroll_y;
    plugin_window.max_x         = plugin_max_x+parent.min_x-parent.scroll_x;
    plugin_window.max_y         = plugin_max_y+parent.max_y-parent.scroll_y;
    plugin_window.scroll_x      = 0;
    plugin_window.scroll_y      = 0;
    plugin_window.front_window  = -1; /* On top */
    dprintf(("","plugin window [%d,%d][%d,%d] [%d,%d]\n",
             plugin_window.min_x,plugin_window.min_y,
             plugin_window.max_x,plugin_window.max_y,
             plugin_window.scroll_x,plugin_window.scroll_y));

    dprintf(("","Resized and opening window\n"));
    _swix(Wimp_OpenWindow,_INR(1,4),&plugin_window,0x4B534154,plugin->browser_window,0);

    /* if the plugin wasn't yet started (probably due to initial open outside
     * of the parent bounds) and a pip chip is available then start plugin
     */

    if (plugin->active==PLUGIN_NOTSTARTED && pip_getstatus()!=PIP_NOPIP)
    {
      plugin->active=PLUGIN_ACTIVE;
      error=start_filter();
      if (error!=NULL)
      {
        dprintf(("","failed to start filter\n"));
        plugin->active=PLUGIN_INACTIVE;
        error=NULL;
      } /* if (error!=NULL) */
      else
      {
        pip_enable();
        pip_setmode(PIP_MODE_EMBEDDED);
      } /* if (error!=NULL) else */
    } /* if (plugin->active==PLUGIN_NOTSTARTED && pip_getstatus()!=PIP_NOPIP) */


    if (plugin->active==PLUGIN_ACTIVE)
    {
      pip_set_position(plugin_window.min_x-1,plugin_window.min_y-1,
                       plugin_window.max_x+1,plugin_window.max_y+1);
    } /* if (plugin->active==PLUGIN_ACTIVE) */

  } /* if (plugin!=NULL) */
}

int stop_plugin(int instance, int close_reference,int flag)
{
 _kernel_oserror *error=NULL;
  WIMP_MessageStruct message;
  WIMP_WindowStateStruct window;
  PLUGIN_LIST *plugin;

  dprintf(("","Stopping plugin %d\n",instance));
  plugin=list_find_by_instance(instance);

  /* If plugin wasn't found then don't do anything */
  if (plugin==NULL)
  {
    dprintf(("","Stop plugin couldn't find plugin [%d]\n",instance));
    return(0);
  } /* if (plugin==NULL) */

  dprintf(("","Closing plugin window\n"));


  window.window_handle=plugin->plugin_window;
  _swix(Wimp_CloseWindow,_IN(1),&window);

  message.message_size=32;
  message.your_ref=close_reference;
  message.message_action=0x4d543; /* Message_PlugIn_Closed*/
  message.data.word[0]=flag; /* will exit+not in reply to a close request */
  message.data.word[1]=plugin->identifier;
  message.data.word[2]=plugin->browser_instance;
  _swix(Wimp_SendMessage,_INR(0,2),17,&message,plugin->browser_task);


  /* if plugin was active then stop filter, remove pip and return to usermode */
  if (plugin->active==PLUGIN_ACTIVE)
  {
    dprintf(("","Calling stop filter\n"));
    error=stop_filter();
    pip_disable();
    pip_setmode(PIP_MODE_USER);
  }

  list_delete_plugin(instance);

  return(0);
}

void plugin_action_msg(WIMP_MessageStruct *message)
{
  /* test if flags specify message contains a new state */
  if (message->data.word[0] & 2)
  {
    switch (message->data.word[3])
    {
    case 0 : // Stop
      /* closedown plugin if we get stop */
      dprintf(("","Stop message received, shutting down plugin\n"));
      plugin_close_msg(message);
      break;
    } /* switch (message->data.word[3]) */
  }/* if (if (message->data.word[0] & 2) */
}


void plugin_close_msg(WIMP_MessageStruct *message)
{
  PLUGIN_LIST *plugin=list_find_by_instance(message->data.word[1]);
  dprintf(("","got plugin_close[%d]\n", message->data.word[1]));
  if (plugin!=NULL)
  {
    stop_plugin(message->data.word[1],message->my_ref,0);
  } /*if (message->data.word[1]==plugin_instance)*/
}

char *get_string_value(WIMP_MessageStruct *message, string_value *string)
{
  char *result=NULL;
  int offset = ((char *) string) - ((char *)message);

  if (message!=NULL && string!=NULL && string->offset!=NULL)
  {
    /* Is the offset of the string_value field within the message */
    /* block out of range (i.e. the string_value does not appear  */
    /* to lie in the given message block)?                        */

    if (offset>20 && offset < message->message_size)
    {
      if (string->offset<256)
      {
        if (offset+20<message->message_size)
        {
          result=(char*)message+(string->offset+20);
        } /* if (offset+20<message->message_size) */
      } /* if (string->ptr<256) */
      else
        result=(char *)string->offset;
    } /* if (offset>20 && offset < message->message_size) */
  } /* if (message!=NULL && string!=NULL && string->offset!=NULL) */
  return(result);
}

int test_mimetype(char *data, char *mime_type)
{
  int result=0;
  int record_ptr=0,record_size;
  int name_ptr,name_size;
  int data_ptr,data_size;
  int mime_ptr,mime_size;

  while (getword(data,record_ptr)!=0 && result==0)
  {
    record_size=getword(data,record_ptr+4);


    name_ptr=record_ptr+8;
    name_size=getword(data,name_ptr);

    /* check for name is DATA from plugin field */
    if (strncasecmp(data+name_ptr+4,"DATA",name_size)==0)
    {
      data_ptr=name_ptr+align_word(name_size)+4;
      data_size=getword(data,data_ptr);

      mime_ptr=data_ptr+align_word(data_size)+4;
      mime_size=getword(data,mime_ptr);

      /* If mimetype=pip mimetype then we know its our plugin */
      if (strncasecmp(data+mime_ptr+4,"video/pip",mime_size)==0)
        result=1;
    } /* if (strncasecmp(data+name_ptr+4,"DATA",name_size)==0) */
    /* go to next record */
    record_ptr+=record_size+8;
  } /* while (getword(data,record_ptr)!=0 && result==0) */

  dprintf(("","Test mimetype result=%d\n",result));

  return(result);
}

_kernel_oserror *plugin_open_msg(WIMP_MessageStruct *message)
{
  _kernel_oserror *error=NULL;

  WIMP_WindowStruct window;
  WIMP_MessageStruct new_message;
  WIMP_WindowOpenStruct openwin;
  Plugin_OpenMsg *open_msg=(Plugin_OpenMsg *)message;
  WIMP_WindowInfoStruct parent;
  int infomessage_value;

  int plugin_instance,plugin_handle;
  int browser_task, browser_instance, browser_window_handle;

  char *filename,*file_data;
  int file_size,file_type;

  int index;

  /* Get filename, load it and test to ensure that it is a pip plugin request  */

  filename=get_string_value(message, (string_value*) &open_msg->filename);
  /* if failed to get filename then don't start plugin */
  if (filename==NULL)
    return(error);

  _swix(OS_File,_INR(0,1) | _OUT(4) | _OUT(6),23,filename,&file_size,&file_type);
  dprintf(("","%s [%d,%d]\n",filename,file_size,file_type));

  file_data=(char*)malloc(file_size);

  if (file_data==NULL)
  {
    dprintf(("","Failed to alloc memory %d\n",file_size));
    return(error);
  } /*  if (file_data==NULL) */

  error=_swix(OS_File,_INR(0,3),16,filename,file_data,0);
  if (error!=NULL)
  {
    dprintf(("","Failed to read file\n"));
    return(error);
  } /* if (error!=NULL) */

  /* Ensure it is for a pip plugin */
  if (test_mimetype(file_data,"video/pip")==0)
  {
    dprintf(("","Not video/pip mimetype\n"));
    free(file_data);
    return(error);
  } /* if (test_mimetype(file_data,"video/pip")==0) */

  /* finished with file, free up memory */
  free(file_data);

  /* Now create a new instance */

  dprintf(("","open at [%d,%d],[%d,%d]\n",open_msg->min_x,open_msg->min_y,open_msg->max_x,open_msg->max_y));
  browser_task=open_msg->header.sender_task;
  browser_instance=open_msg->browser_instance;
  browser_window_handle=open_msg->parent_window_handle;

  plugin_instance=list_addplugin(browser_task, browser_instance,
                                 browser_window_handle);

  if (plugin_instance==-1)
  {
    dprintf(("","failed to create plugin\n"));
    return(error);
  } /* if (plugin_instance==-1) */

  new_message.message_size=36;
  new_message.your_ref=open_msg->header.my_ref;
  new_message.message_action=0x4d541; /* Message_PlugIn_Opening*/
  new_message.data.word[0]=0x00;      /* flags word */
  new_message.data.word[1]=plugin_instance;
  new_message.data.word[2]=browser_instance;
  new_message.data.word[3]=0;         /* reserved flag */
  error=_swix(Wimp_SendMessage,_INR(0,2),17,&new_message,browser_task);


  if (error!=NULL)
  {
    /* failed to send message so delete this instance and give up */
    dprintf(("","Failed to send message to browser\n"));
    list_delete_plugin(plugin_instance);
    return(error);
  } /*   if (error!=NULL) */

  parent.window_handle=browser_window_handle;
  infomessage_value=((int) (&parent) ) | 1;
  _swix(Wimp_GetWindowInfo,_IN(1),infomessage_value);

  window.min_x=open_msg->min_x+parent.window_data.min_x-parent.window_data.scroll_x;;
  window.min_y=open_msg->min_y+parent.window_data.max_y-parent.window_data.scroll_y;
  window.max_x=open_msg->max_x+parent.window_data.min_x-parent.window_data.scroll_x;
  window.max_y=open_msg->max_y+parent.window_data.max_y-parent.window_data.scroll_y;
  window.scroll_x=0;
  window.scroll_y=0;
  window.front_window=-1; /* on top */
  window.window_flags=0x80002000;
  window.col_title_fore=7;
  window.col_title_back=2;
  window.col_work_fore=7;
  window.col_work_back=7;
  window.col_scroll_outer=12;
  window.col_scroll_inner=1;
  window.col_highlight_title=3;
  window.col_reserved=0;
  window.work_min_x=0;
  window.work_min_y=-1000;
  window.work_max_x=1000;
  window.work_max_y=0;
  window.titlebar_flags=0;
  window.workarea_flags=0x00000000;
  window.sprite_area=1; /* wimp sprite area */
  window.window_min_width=0;
  window.window_min_height=0;
  for (index=0;index<11;index++)
    window.title_data[index]=0;
  window.icon_count=0;

  dprintf(("","Creating plugin window\n"));
  error=_swix(Wimp_CreateWindow,_IN(1) | _OUT(0),&window,&plugin_handle);

  if (error!=NULL)
  {
    dprintf(("","failed to create window\n"));
    list_delete_plugin(plugin_instance);
    return(error);
  }

  dprintf(("","plugin window handle %d\n",plugin_handle));
  dprintf(("","browser window handle %d\n",browser_window_handle));

  list_set_plugin_handle(plugin_instance,plugin_handle);

  /* check if the plugin window is within the bounds of the parent window.
   * If out of bounds or no pip is available then delay initialisation
   */

  if (open_msg->max_x>parent.window_data.work_max_x || open_msg->max_y>parent.window_data.work_max_x ||
      open_msg->min_x<parent.window_data.work_min_x || open_msg->min_y<parent.window_data.work_max_y ||
      pip_getstatus()==PIP_NOPIP)
  {
    dprintf(("","Out of bounds, delaying start\n"));
    list_set_plugin_active(plugin_instance,PLUGIN_NOTSTARTED);
  } /* if plugin window out of bounds of parent  */
  else
  {

    error=start_filter();
    if (error!=NULL)
    {
      dprintf(("","failed to start filter\n"));
      list_delete_plugin(plugin_instance);
      return(error);
    }

    openwin.window_handle=plugin_handle;
    openwin.min_x=window.min_x;
    openwin.min_y=window.min_y;
    openwin.max_x=window.max_x;
    openwin.max_y=window.max_y;
    openwin.scroll_x=window.scroll_x;
    openwin.scroll_y=window.scroll_y;
    openwin.front_window=window.front_window;

    /* Setting this current instance active will automatically
     * set any others inactive
     */

    list_set_plugin_active(plugin_instance,PLUGIN_ACTIVE);

    dprintf(("","Opening plugin window at [%d,%d],[%d,%d]\n",openwin.min_x,openwin.min_y,openwin.max_x,openwin.max_y));
    _swix(Wimp_OpenWindow,_INR(1,4),&openwin,0x4B534154,browser_window_handle,0);
    pip_enable();
    pip_setmode(PIP_MODE_EMBEDDED);
  } /* if plugin window out of bounds of parent else */


  return(error);

}


/* This function is called during initialisation of the task
 * if it fails to startup it will return a non-zero value
 */
int plugin_initialise(void)
{
  int result=1;
  _kernel_oserror *error=NULL;

  if (error==NULL && pollword_mem==NULL)
  error=_swix(OS_Module,_IN(0) | _IN(3) | _OUT(2),6,256,&pollword_mem);
  if (error==NULL && filter_name==NULL)
    error=_swix(OS_Module,_IN(0) | _IN(3) | _OUT(2),6,64,&filter_name);

  if (error==NULL && pollword_mem!=NULL)
  {
    /* All claims successful so zero pollword and set return result to be successful */
    putword(pollword_mem,0,0);
    result=0;
  } /*  if (error==NULL && pollword_mem!=NULL) */
  return(result);
}

/* This function is called to shutdown the plugin application
 * during shutdown of the module
 */

_kernel_oserror * plugin_closedown(void)
{
  _kernel_oserror *error=NULL;
  PLUGIN_LIST *plugin;
  dprintf(("","Plugin closedown in process\n"));
// send closedown message

  while (list_plugin_count()!=0)
  {
    plugin=list_find_first_plugin();
    if (plugin==NULL)
    {
      dprintf(("","PANIC!!!!!  no plugin data but plugin count>0"));
      break;
    } /* if (plugin==NULL) */
      /* stop the plugin - no reference and not in reply to a close message */
    stop_plugin(plugin->identifier,0,3);
  } /* while (list_plugin_count()!=0) */

  /* If the stop filter function fails we're in trouble*/
  // ***** what do we do if failed?
  dprintf(("","Calling stop filter\n"));
  error=stop_filter();


  if (filter_name!=NULL)
  {
    error=_swix(OS_Module,_IN(0) |_IN(2),7,filter_name);
    if (error==NULL)
      filter_name=NULL;
  }
  if (pollword_mem!=NULL)
  {
    error=_swix(OS_Module,_IN(0) |_IN(2),7,pollword_mem);
    if (error==NULL)
      pollword_mem=NULL;
  }

  list_delete_list();

  return(error);
}



/* This function will stop the currently active plugin instance */


void plugin_stop_active(void)
{
  _kernel_oserror *error=NULL;
  PLUGIN_LIST *plugin=list_plugin_find_active();

  if (plugin!=NULL)
  {
    error=stop_filter();
    dprintf(("","Stopping active\n"));
    plugin->active=PLUGIN_INACTIVE;
  } /* if (plugin!=NULL) */
}

_kernel_oserror * plugin_filter(_kernel_swi_regs *reg, void *pw)
{
  /* Generate a pollword_nonzero message   */

  putword(pollword_mem,0,1);

  return(NULL);
}

/* this function is called from the task functions to determine
 * whether or not the wimp message is for a plugin window or not
 */

int plugin_test_windowhandle(int window_handle)
{
  int result=PLUGIN_UNKNOWN_WINDOW;

  if (list_find_by_plugin_handle(window_handle)!=NULL)
    result=PLUGIN_PLUGIN_WINDOW;

  return(result);

}

/* end of plugin.c */
