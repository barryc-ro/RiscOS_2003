/*
 * pip.c
 * This handles the pip display
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "global/services.h"
#include "pip.h"
#include "NVRAM.h"
#include "AudSwitch.h"
#include "PIPControl.h"
#include "plugin.h"

/* Global variable section */
int pip_mode=PIP_MODE_USER;
int pip_state=PIP_DISABLED;
int tv_sound=PIP_DISABLED;
int pip_position=PIP_POS_TOPRIGHT;

#ifndef TRUE
 #define TRUE 1
#endif
#ifndef FALSE
 #define FALSE 0
#endif


int pip_getstatus(void)
{
  return(pip_state);
}

/* Generic enable pip function
 * don't need to care about which mode in just to enable it+sound
 */
void pip_enable(void)
{
  _swix(PIP_On,_IN(0),0);
  pip_state=PIP_ENABLED;

  if (tv_sound==PIP_ENABLED)
    _swix(AudioSwitch_AudioMix,_IN(1),AudioSwitch_Audio_Enabled);
}

void pip_disable(void)
{
  _swix(PIP_Off,_IN(0),0);
  pip_state=PIP_DISABLED;

  _swix(AudioSwitch_AudioMix,_IN(1),AudioSwitch_Audio_Disabled);
}

int next_division(int division)
{
  switch (division)
  {
  case PIP_POS_TOPLEFT :
    division=PIP_POS_TOPRIGHT;
    break;
  case PIP_POS_TOPRIGHT :
    division=PIP_POS_BOTTOMRIGHT;
    break;
  case PIP_POS_BOTTOMLEFT :
    division=PIP_POS_TOPLEFT;
    break;
  case PIP_POS_BOTTOMRIGHT :
    division=PIP_POS_BOTTOMLEFT;
    break;
  default :
    division=PIP_POS_TOPRIGHT;
     /* invalid division so reset position */
    break;
  } /* switch (division) */
  return(division);
}

void set_position_division(int division)
{
  int x_pos=0,y_pos=0,update=TRUE;

  switch (division)
  {
  case PIP_POS_TOPLEFT : /* top left */
    x_pos=-1;
    y_pos=1;
    break;
  case PIP_POS_TOPRIGHT : /* top right */
    x_pos=1;
    y_pos=1;
    break;
  case PIP_POS_BOTTOMLEFT : /* bottom left */
    x_pos=-1;
    y_pos=-1;
    break;
  case PIP_POS_BOTTOMRIGHT : /* bottom right */
    x_pos=1;
    y_pos=-1;
    break;
  default :
    update=FALSE; /* invalid division so don't update position */
    break;
  } /* switch (division) */

  if (update==TRUE)
  {
    pip_position=division;
    _swix(PIP_SetPosition,_INR(0,3),0,x_pos,y_pos,PIPCONTROL_UNITS_DIVISION);
    /* should reset scaling here, could have been resized in embedded mode*/
  } /* if (x_pos!=-1) */

}

/* This function is run at startup to read and process the default values
 * it will limit what it does if there is no PIP hardware fitted
 */

void pip_initialise(void)
{
  int pip_chip,status;
  _kernel_oserror *error=NULL;

  pip_position=1;
  dprintf(("","Initialising PiP Chip\n"));

  error=_swix(PIP_GetChip,_OUT(1),&pip_chip);

  /* if unrecognised PIP chip or error occured then assume no PIP installed */

  if (pip_chip<0 || pip_chip>1 || error!=NULL)
  {
    dprintf(("","No (valid) PiP chip available\n"));
    pip_state=PIP_NOPIP;
  }
  else
  {
    /* Lets set up the PIP */
    _swix(NVRAM_Read,_INR(0,2) | _OUT(0),"PIPLocation",0,0,&pip_position);

/*    set_position_division(pip_position); */

    _swix(NVRAM_Read,_INR(0,2) | _OUT(0),"PIPEnable",0,0,&status);
    _swix(NVRAM_Read,_INR(0,2) | _OUT(0),"TVAudioInPIP",0,0,&tv_sound);

    if (status==1)
      pip_enable();
    else
      pip_state=PIP_DISABLED;
  } /*   if (pip_chip<0 || pip_chip>1 || error!=NULL) else */
}
/* this function positions the PiP display to the co-ordinates specified
 * if max_x or max_y is set to 0 then the PiP display will be scaled to
 * the maximum size
 */
void pip_set_position(int min_x,int min_y, int max_x, int max_y)
{

  if (pip_state!=PIP_NOPIP)
  {
    dprintf(("","Positioning pip\n"));
    _swix(PIP_SetPosition,_INR(0,3),0,min_x,min_y,PIPCONTROL_UNITS_OSSCREEN);

    if (max_x<=0 || max_y<=0)
      _swix(PIP_SetScaling, _IN(0),PIPCONTROL_SCALE_RESET);
    else
      _swix(PIP_SetScaling,_INR(0,2),0,max_x-min_x,max_y-min_y);
  } /* if (pip_state!=PIP_NOPIP) */

}

void pip_setmode(int mode)
{
  dprintf(("","Mode change: "));
  if (pip_mode==PIP_MODE_EMBEDDED)
    dprintf(("","embedded -> "));
  else if (pip_mode==PIP_MODE_USER)
    dprintf(("","user -> "));
  else
    dprintf(("","unknown -> "));

  switch (mode)
  {
  case PIP_MODE_EMBEDDED :
    dprintf(("","embedded\n"));
    pip_mode=mode;
    _swix(PIP_MouseResponse,_IN(1),PIPCONTROL_MOUSE_RESPONSE_WARP);
    break;
  case PIP_MODE_USER :
    dprintf(("","user\n"));
    pip_mode=mode;
    _swix(PIP_MouseResponse,_IN(1),PIPCONTROL_MOUSE_RESPONSE_WINMOVE);
    break;
  } /* switch (mode) */
}

void pip_keypress_onoff(void)
{
  /* don't do anything if no pip otherwise change pip on or off */
  if (pip_state!=PIP_NOPIP)
  {
    switch (pip_state)
    {
    case PIP_DISABLED :
      dprintf(("","Enabling pip\n"));
      /* easy, just enable PIP */
      set_position_division(pip_position);
      pip_enable();
      pip_setmode(PIP_MODE_USER);
      break;
    case PIP_ENABLED :
      switch (pip_mode)
      {
      case PIP_MODE_USER :
        dprintf(("","User -> disabling pip\n"));
        pip_disable();
        break;
      case PIP_MODE_EMBEDDED :
        dprintf(("","Embedded -> disabling pip\n"));
        plugin_stop_active();
        pip_disable();
        pip_setmode(PIP_MODE_USER);
        break;
      } /* switch (pip_mode) */
      break;
    } /* switch (pip_state) */
  } /* if (pip_state!=PIP_NOPIP) */
}

void pip_keypress_move(void)
{
  /* only move the pip if enabled and in user mode */
  dprintf(("","pip_state=%d, pip_mode=%d\n",pip_state,pip_mode));
  if (pip_state==PIP_ENABLED && pip_mode==PIP_MODE_USER)
    set_position_division(next_division(pip_position));
}

void pip_keypress_tvsound(void)
{
   int audio_state;
   _swix(AudioSwitch_AudioMix,_INR(0,1) | _OUT(2),0,-1,&audio_state);
   switch (audio_state)
   {
   case AudioSwitch_Audio_Enabled :
     audio_state=AudioSwitch_Audio_Disabled;
     break;

   case AudioSwitch_Audio_Disabled :
   default             :
     /* if an unknown setting is set or disabled then enable sound */
     audio_state=AudioSwitch_Audio_Enabled;
     break;
   } /* switch (current_state); */
   _swix(AudioSwitch_AudioMix,_INR(0,1),0,audio_state);
}

void pip_keypress(int key_value)
{
  switch (key_value)
  {
  case KEY_PIP_ONOFF :
    dprintf(("","PIP ONOFF\n"));
    pip_keypress_onoff();
    break;
  case KEY_PIP_MOVE :
    dprintf(("","PIP MOVE\n"));
    pip_keypress_move();
    break;
  case KEY_PIP_TVSOUND :
    dprintf(("","tv sound\n"));
    pip_keypress_tvsound();
    break;
  } /* switch (key_value) */
}



/* end of pip.c */
