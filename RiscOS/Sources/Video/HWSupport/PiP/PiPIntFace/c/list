/*
 * list.c
 * This handles the plugin list related calls.
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "debuglib/debuglib.h"
#include "list.h"
#include "plugin.h"

PLUGIN_LIST *plugin_list=NULL;


void dump_list(void)
{
  PLUGIN_LIST *ptr=plugin_list;
  if (ptr==NULL)
    dprintf(("","list debug -> empty list\n"));
  else
  {
    while (ptr!=NULL && ptr!=ptr->next)
    {
      dprintf(("","list debug -> ptr=%p, ptr->identifier=%d, ptr->next=%p\n",ptr,ptr->identifier,ptr->next));
      ptr=ptr->next;
    } /* while (ptr!=NULL) */
    if (ptr==ptr->next)
      dprintf(("","list debug -> inifinite loop detected\n"));
  } /* if (ptr==NULL) else */
}


int list_plugin_count(void)
{
  PLUGIN_LIST *ptr=plugin_list;
  int count=0;

  dump_list();
  while (ptr!=NULL)
  {
    count++;
    ptr=ptr->next;
  } /* (while ptr!=NULL) */
  dprintf(("","Plugin count is %d\n",count));
  return(count);
}

void list_delete_list(void)
{
  PLUGIN_LIST *ptr=plugin_list,*next_ptr;
  dprintf(("","Destroying plugin list\n"));
  while (ptr!=NULL)
  {
    dprintf(("","Deleting %p, next=%p\n",ptr,ptr->next));
    next_ptr=ptr->next;
    free(ptr);
    ptr=next_ptr;
  } /* while (ptr!=NULL) */
}

void list_delete_plugin(int identifier)
{
  PLUGIN_LIST *prev_ptr=NULL,*ptr=plugin_list;
  int found=0;
  dprintf(("","Deleting plugin [%d]\n",identifier));

  while (ptr!=NULL && found!=1)
  {
    if (ptr->identifier==identifier)
      found=1;
    else
    {
      prev_ptr=ptr;
      ptr=ptr->next;
    } /* if (ptr->identifier==identifier) else */
  } /* while (ptr!=NULL && found!=1) */

  if (found==1)
  {
    if (prev_ptr==NULL)
    {
      /* deleting first item so set start to be next item */
      plugin_list=ptr->next;
    } /* if (prev_ptr==NULL) */
    else
    {
      /* set previous plugin instance to point to next plugin instance */
      prev_ptr->next=ptr->next;
    } /* if (prev_ptr==NULL) else */

    /* moved pointers, now delete found record */
    dprintf(("","Freeing %p\n",ptr));
    free(ptr);
  } /* if (found==1) */

  dump_list();


}

PLUGIN_LIST *list_find_by_plugin_handle(int plugin_handle)
{
  PLUGIN_LIST *ptr=plugin_list, *result=NULL;
  int found=0;
  /* Find plugin entry for given instance */
  while (ptr!=NULL && found!=1)
  {
    if (ptr->plugin_window==plugin_handle)
      found=1;
    else
      ptr=ptr->next;
  } /* while (ptr!=NULL && found!=1) */

  if (found==1)
  {
    result=ptr;
    dprintf(("","Found record[%d] for [%d]\n",ptr->identifier,plugin_handle));
  } /* if (found==1) */

  return(result);
}



PLUGIN_LIST *list_find_by_instance(int identifier)
{
  PLUGIN_LIST *ptr=plugin_list, *result=NULL;
  int found=0;
  /* Find plugin entry for given instance */
  while (ptr!=NULL && found!=1)
  {
    if (ptr->identifier==identifier)
      found=1;
    else
      ptr=ptr->next;
  } /* while (ptr!=NULL && found!=1) */

  if (found==1)
  {
    result=ptr;
    dprintf(("","Found record for [%d]\n",identifier));
  } /* if (found==1) */

  return(result);
}

void list_set_plugin_parent_handle(int instance, int handle)
{
  PLUGIN_LIST *ptr=list_find_by_instance(instance);
  if (ptr!=NULL)
  {
    ptr->browser_window=handle;
  } /* if (ptr!=NULL) */
}

void list_set_plugin_handle(int instance, int plugin_handle)
{
  PLUGIN_LIST *ptr=list_find_by_instance(instance);
  if (ptr!=NULL)
  {
    ptr->plugin_window=plugin_handle;
  } /* if (ptr!=NULL) */
}

/* This function will go through the list of plugins
 * if the plugin is the instance given then the active
 * parameter will be set to the given type.
 * otherwise the plugin will be set inactive
 */

void list_set_plugin_active(int instance,int type)
{
  PLUGIN_LIST *ptr=plugin_list;
  int found=0;

  dprintf(("","Setting active [%d]\n",instance));

  if (ptr!=NULL)
  {
    /* Find plugin entry for given instance */
    while (ptr!=NULL && found!=1)
    {
      if (ptr->identifier==instance)
      {
        found=1;
        ptr->active=type;
      } /* if (ptr->identifier==instance) */
      else
      {
        ptr->active=PLUGIN_INACTIVE;
        ptr=ptr->next;
      } /* if (ptr->identifier==instance) else */
    } /* while (ptr!=NULL && found!=1) */
  } /* if (ptr!=NULL) */
}

PLUGIN_LIST *list_plugin_find_active(void)
{
  PLUGIN_LIST *ptr=plugin_list, *result=NULL;
  int found=0;
  dprintf(("","Searching for active\n"));
  /* Find plugin entry for given instance */
  while (ptr!=NULL && found!=1)
  {
    if (ptr->active==PLUGIN_ACTIVE)
      found=1;
    else
      ptr=ptr->next;
  } /* while (ptr!=NULL && found!=1) */

  if (found==1)
  {
    result=ptr;
    dprintf(("","Found active [%d], ",result->identifier));
  } /* if (found==1) */

  return(result);
}

int list_addplugin(int browser_task, int browser_instance, int browser_window)
{
  PLUGIN_LIST *ptr, *new_plugin;
  int identifier=0;

  new_plugin=(PLUGIN_LIST *)malloc(sizeof(PLUGIN_LIST));

  if (new_plugin==NULL)
  {
    dprintf(("","Failed to alloc %d\n",sizeof(PLUGIN_LIST)));
    return(-1);
  }

  new_plugin->browser_task=browser_task;
  new_plugin->browser_instance=browser_instance;
  new_plugin->browser_window=browser_window;
  new_plugin->next=NULL;
  new_plugin->active=PLUGIN_INACTIVE;

  /* add new plugin to end of list (or start of empty one)       *
   * identifier is set to 1+ highest currently known identifier  */

  if (plugin_list==NULL)
  {
    dprintf(("","list debug -> Putting plugin at start of list\n"));
    plugin_list=new_plugin;
  }
  else
  {
    dprintf(("","list debug -> Finding end of list\n"));
    ptr=plugin_list;
    identifier=ptr->identifier;

    while (ptr->next!=NULL)
    {
      if (ptr==ptr->next)
      {
        dprintf(("","list debug -> Infinite loop detected\n"));
        ptr=NULL;
        break;
      }
      ptr=ptr->next;
      if (identifier<=ptr->identifier)
      {
        identifier=ptr->identifier;
      } /* if (identifier<=ptr->identifier) */
    } /* while (ptr->next!=NULL) */

    ptr->next=new_plugin;
  } /* if (plugin_list==NULL) else */

  new_plugin->identifier=identifier+1;
  dprintf(("","list debug -> Setting identifier to be %d\n",new_plugin->identifier));

  return(new_plugin->identifier);
}

PLUGIN_LIST *list_find_first_plugin(void)
{
  return(plugin_list);
}

/* end of list.c */
