/*
 * module.c
 */

/************************************************************************/
/*              Copyright 2001 Pace Micro Technology PLC                */
/************************************************************************/

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "debuglib/debuglib.h"
#include "global/services.h"

#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "header.h"
#include "task.h"


#if CMHG_VERSION < 516
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif

/* Module housekeeping globals */
void   *mod_wsp = NULL;

extern void __module_header (void);


/*----------------------------------------------------------------------------*/
/* Functions */

_kernel_oserror * module_finalise(int fatal, int podule, void *pw)
{
  _kernel_oserror *error=NULL;
  dprintf(("","module finalise function\n"));

  task_stop_task();

  return error;
}

_kernel_oserror * module_initialise(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *error = NULL;

  mod_wsp = pw;

  debug_initialise (Module_Title, "", "");
  debug_set_device(DEBUGIT_OUTPUT);
  debug_set_unbuffered_files (TRUE);

  dprintf(("","Module starting\n"));

  return error;
}

char *start_app="Desktop_PIPInterface";

void module_service(int service_number, _kernel_swi_regs *reg, void *pw) {
  switch (service_number)
  {
  case Service_Memory :
    /* if it's our CAO, claim the service call to leave our memory */
    if ((void*)reg->r[2] == (void*)__module_header)
      reg->r[1] = 0;
    break;
  case Service_StartWimp :
    dprintf(("","Service_StartWimp\n"));
    if (task_get_taskhandle()==-1)
    {
      task_set_taskhandle(0);   /* this stops repeated attempts to start task */
      reg->r[0]=(int)start_app;
      reg->r[1]=0;
    }
    break;

  } /* switch (service_number) */
}


_kernel_oserror *cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
  _kernel_oserror *error=NULL;

  switch (cmd_no)
  {
  case 0 : /* *Desktop_PIP */
    dprintf(("","Starting wimp task\n"));
    _swix(Wimp_SlotSize,_INR(0,1),20480,-1);
    _swix(OS_Module,_INR(0,2),2,Module_Title,NULL);
    break;
  } /* switch (cmd_no) */

  return(error);
}

/* module run section  */
int main(int argc, char *argv[])
{
  dprintf(("","Module run section\n"));

  task_start_task();

  return(0);
}

/* End of module.c */
