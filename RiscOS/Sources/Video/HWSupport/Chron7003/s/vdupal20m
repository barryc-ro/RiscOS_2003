; > VduPal20m

; mjs:
; For the new HAL-based OS, this is no longer a dodgy copy of kernel VIDC20
; palette handling. We only need to sit on PaletteV to do Chrontel power saving
; on a blank. The HAL handles everything for the video controller (not
; necessarily VIDC20).

; *****************************************************************************

; PaletteV handler
; ----------------

Chron_MOSPaletteV ROUT
        CMP     r4, #paletteV_BlankScreen
        MOVNE   pc,lr
;
; else drop through to PV_BlankScreen
;
; *****************************************************************************
;
;       PV_BlankScreen - Blank/unblank screen
;
; in:   R0 = -1 => read blank state
;       R0 = 0 => unblank screen
;       R0 = 1 => blank screen
;
; out:  R0 = old state (0=unblanked, 1=blanked)
;       R4 = 0
;
PV_BlankScreen ROUT
        Push    "r1-r3,r10-r12,lr"
        LDRB    r4, [r12, #ScreenBlankFlag]
        CMP     r0, #1
        BHI     %FT99

        TEQ     r0, r4                  ; changing to same state? (carry preserved)
        BEQ     %FT99                   ; if so, do nothing

        STRB    r0, [r12, #ScreenBlankFlag] ; update new state
        BCC     %FT50

        ;blanking
        ;pass the call through to the kernel for video controller blanking
        ;when the call comes back we turn off the chrontel

        MOV     r4, #paletteV_BlankScreen   ;fix up the register we messed with
        Push    "r0,r10-r12"
        Push    "pc"
        MOV     pc,lr                   ;pass call on to kernel
        NOP                             ;PC+8 ARMs return here, PC+12 next word
        Pull    "r0,r10-r12"

        ;do the chrontel stuff here
        MOV     r2,r0                   ;preserve returned state
        ADRL    r0,Standby_Callback
        MOV     r1,r12
        SWI     XOS_AddCallBack
        MOV     r0,r2                   ;restore returned state

        MOV     r4,#0                   ;operation complete
        Pull    "r1-r3,r10-r12,lr,pc"   ;and claim

50
        ;unblanking
        ;pass call to kernel for video controller unblanking
        ;then sort out chrontel
        MOV     r4,#paletteV_BlankScreen
        Push    "r0,r10-r12"
        Push    "pc"
        MOV     pc,lr                   ;pass call on to kernel
        NOP                             ;PC+8 ARMs return here, PC+12 next word
        Pull    "r0,r10-r12"

        ;do the chrontel stuff here
        MOV     r2,r0                   ;preserve returned state
        ADRL    r0,Standby_Callback
        MOV     r1,r12
        SWI     XOS_AddCallBack
        MOV     r0,r2                   ;restore returned state
99
        MOV     r4,#0                   ;operation complete
        Pull    "r1-r3,r10-r12,lr,pc"   ;claim

        END
