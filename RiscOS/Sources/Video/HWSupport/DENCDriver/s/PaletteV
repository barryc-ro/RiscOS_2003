; /****** PaletteV.s *********************************************************
;
; Project:	STB-400
; Component:	MPEGDriver
; This file:	PaletteV intercept routine
;
; Copyright 1999 Pace Micro Technology plc. All rights reserved.
;
; This material is the confidential trade secret and proprietary information
; of Pace Micro Technology plc. It may not be reproduced, used, sold, or
; transferred to any third party without the prior written consent of
; Pace Micro Technology plc.
;
; History:
; Date		Who	Change
; ----------------------------------------------------------------------------
; 10/01/2000	BJGA	Created
; 14/01/2000	BJGA	Completed
; 10/03/2000	BJGA	Fixed a bug when bulk-reading pointer colours into a single block;
;			changed logical meaning of supremacy bits to be an 8-bit
;			translucency (all partial values on entry are interpreted as
;			fully transparent)
; 13/03/2000	BJGA	Corrected some comments, and added a couple of missing ROUT's
; 16/03/2000	BJGA	Bugfix: BulkRead doesn't attempt to correct the output block twice
;                       if two identical block pointers are passed in
;
; ***************************************************************************/


; Included headers
; ----------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:PaletteV


        AREA    |Asm$$Code|, CODE, READONLY


; Exported functions
; ------------------


; PaletteV_Routine (not APCS compliant)

; In:   r0-r3    depend upon reason code
;       r4       = reason code
;       r10,r11  must be restored from pre-processing state when exiting post-processing
;       r12      -> module private word (ie r12 -> -> module workspace)
;       lr       = "pass-on" return address
;       [sp]     = "claim" return address

        EXPORT  PaletteV_Routine
PaletteV_Routine ROUT
        ; See if it's a reason code that we have to munge
        TEQ     r4, #paletteV_Read
        BEQ     PV_ReadPalette
        TEQ     r4, #paletteV_Set
        BEQ     PV_SetPalette
        TEQ     r4, #paletteV_BulkRead
        BEQ     PV_BulkRead
        TEQ     r4, #paletteV_BulkWrite
        BEQ     PV_BulkWrite
        TEQ     r4, #paletteV_SetDefaultPalette
        BEQ     PV_SetDefaultPalette
        ; If none of those, then pass on call
        MOV     pc, lr

; *****************************************************************************
;
;       PV_ReadPalette - PaletteV read palette handler
;
; in:   R0 = logical colour
;       R1 = 16/17/18 (read normal colour, both flash states returned in each case)
;            24 (read border colour)
;            25 (read cursor colour)
;       R4 = 1 (PaletteV reason code)
;
; out:  R2 = first flash setting   (BBGGRRTT)
;       R3 = second flash setting  (BBGGRRTT)
;

PV_ReadPalette ROUT
        Push    "r10-r12,lr"

        ; Push a return address (PC + 12) onto the stack for actual claimant to return to
        STR     pc, [sp, #-4]!

        ; Having altered the stack, jump to the return address for passing on the call
        MOV     pc, lr

        NOP

        ; Palette should now have been read; if it hasn't, then don't tamper with r2 or r3
        TEQ     r4, #paletteV_Complete
        BNE     %FT99

        ; Convert supremacy bits from hardware form to preferred form
        TST     r2, #&10
        BIC     r2, r2, #&FF            ; bits 0-7 clear for solid
        ORREQ   r2, r2, #&FF            ; bits 0-7 set for transparent
        TST     r3, #&10
        BIC     r3, r3, #&FF            ; bits 0-7 clear for solid
        ORREQ   r3, r3, #&FF            ; bits 0-7 set for transparent

99      ; Restore r10-r12,lr to the values they had originally, and jump to the return
        ; address supplied for claiming the call
        Pull    "r10-r12,lr,pc"

; *****************************************************************************
;
;       PV_SetPalette - PaletteV set palette handler
;
; in:   R0 = logical colour
;       R1 = colour type (16,17,18,24,25)
;       R2 = BBGGRRTT
;     ( R3 not used, PRM 1-104 is wrong)
;       R4 = 2 (PaletteV reason code)
;

PV_SetPalette ROUT
        Push    "r2,r10-r12,lr"

        ; Convert supremacy bits as per hardware requirement
        TST     r2, #&FF
        BIC     r2, r2, #&FF            ; all ED lines low for transparent
        ORREQ   r2, r2, #&10            ; ED[0] (only) high for solid

        ; Push a return address (PC + 12) onto the stack for actual claimant to return to
        STR     pc, [sp, #-4]!

        ; Having altered the stack, jump to the return address for passing on the call
        MOV     pc, lr

        NOP

        ; Palette should now have been set; restore r2,r10-r12,lr to the values they had
        ; originally, and jump to the return address supplied for claiming the call
        Pull    "r2,r10-r12,lr,pc"

; *****************************************************************************
;
;	PV_BulkRead - PaletteV call to read section of palette
;
; in:	R0 = pointer to word aligned list of logical colours (words), or 0
;	R1 = type (bits 24..31) and number of colours (bits 0..23)
;	R2 = pointer to block for 1st flash state
;	R3 = pointer to block for 2nd flash state (or 0 for put both at R2)
;	R4 = 7 (PaletteV reason code)
;

PV_BulkRead ROUT
        Push    "r0-r3,r7,r8,r10-r12,lr"

        ; Push a return address (PC + 12) onto the stack for actual claimant to return to
        STR     pc, [sp, #-4]!

        ; Having altered the stack, jump to the return address for passing on the call
        MOV     pc, lr

        NOP

        ; Palette should now have been read; if it hasn't, then don't tamper with buffers
        TEQ     r4, #paletteV_Complete
        BNE     %FT99

        MOV     r7, r1, LSR #24
        BIC     r8, r1, #&FF000000
        MOV     r10, #0
10
        TEQ     r7, #18                 ; do we need to fix the first flash colour?
        LDRNE   r0, [r2]
        TEQ     r7, #17                 ; do we need to fix the second flash colour?
        BEQ     %FT15
        TEQ     r7, #16
        TEQNE   r7, #24
        TEQNE   r7, #25
        TEQEQ   r3, #0
        LDRNE   r1, [r3]
        LDREQ   r1, [r2]
15
        TST     r0, #&10
        BIC     r0, r0, #&FF            ; bits 0-7 clear for solid
        ORREQ   r0, r0, #&FF            ; bits 0-7 set for transparent
        TST     r1, #&10
        BIC     r1, r1, #&FF            ; bits 0-7 clear for solid
        ORREQ   r1, r1, #&FF            ; bits 0-7 set for transparent

        TEQ     r7, #18                 ; do we need to store back the first flash colour?
        STRNE   r0, [r2], #4
        TEQ     r7, #17                 ; do we need to store back the second flash colour?
        BEQ     %FT20
        TEQ     r7, #16
        TEQNE   r7, #24
        TEQNE   r7, #25
        TEQEQ   r3, #0
        STRNE   r1, [r3], #4
        STREQ   r1, [r2], #4
20
        ADD     r10, r10, #1
        CMP     r10, r8
        BCC     %BT10

99      ; Restore r0-r3,r7,r8,r10-r12,lr to the values they had originally, and jump to the
        ; return address supplied for claiming the call
        Pull    "r0-r3,r7,r8,r10-r12,lr,pc"

; *****************************************************************************

;       PV_BulkWrite - PaletteV call to set palette in bulk
; in:   R0 => list of colours, or 0
;       R1 =  colour type (16,17,18,24,25) in b24-31 & number to do in b23-b00
;       R2 => list of palette entries (both flash states if 16, one if 17/18/24/25)
;       R4 = 8 (PaletteV reason code)
;

PV_BulkWrite ROUT
        Push    "r1-r3,r5-r6,r10-r12,lr"

        ; Create another palette block, but with supremacy bits as per hardware requirement
        MOV     r3, r1, LSR #24
        BIC     r5, r1, #&FF000000
        CMP     r5, #256                ; refuse to do more than 256 palette entries
        MOVGT   r5, #256                ;   (that's all we've got space for)
        ORR     r1, r5, r3, LSL #24     ; recreate a suitable r1
        TEQ     r3, #16                 ; are there are two entries for each colour?
        MOVEQ   r5, r5, LSL #1          ; multiply by two if necessary
        MOV     r3, r2                  ; we need the original block to copy from
        LDR     r12, [r12]              ; retrieve module wsptr from private word
        StaticBaseFromWP r12, r12
        ADRVar  r2, r12, BulkWriteBlock ; point r2 at 2K of workspace
        MOV     r6, r2                  ; initialise roving pointer into our block

        ; Register usage:
        ; r2 -> our block
        ; r3 -> original block
        ; r5  = palette entry counter
        ; r6 -> our block
        ; r12 = scratch register
10      LDR     r12, [r3], #4
        TST     r12, #&FF
        BIC     r12, r12, #&FF          ; all ED lines low for transparent
        ORREQ   r12, r12, #&10          ; ED[0] (only) high for solid
        STR     r12, [r6], #4
        SUBS    r5, r5, #1
        BNE     %BT10

        ; Push a return address (PC + 12) onto the stack for actual claimant to return to
        STR     pc, [sp, #-4]!

        ; Having altered the stack, jump to the return address for passing on the call
        MOV     pc, lr

        NOP

        ; Palette should now have been set; restore r1-r3,r5-r6,r10-r12,lr to the values
        ; they had originally and jump to the return address supplied for claiming the call
        Pull    "r1-r3,r5-r6,r10-r12,lr,pc"

; Static variable indirection table
        LocalVar BulkWriteBlock

; *****************************************************************************
;
;       PV_SetDefaultPalette - PaletteV call to set default palette
;
; in:   R4 = 5 (PaletteV reason code)
;

PV_SetDefaultPalette ROUT
        Push    "r0-r3,r5-r6,r10-r12,lr"

        ; Get the VDU variables that we need
        MOV     r0, #0                  ; ModeFlags variable
        MOV     r1, #3                  ; NColour variable
        MOV     r2, #-1                 ; terminator for input list
        SUB     sp, sp, #4*2            ; create output block on stack
        Push    "r0-r2"                 ; create input block on stack
        MOV     r0, sp
        ADD     r1, sp, #4*3
        SWI     XOS_ReadVduVariables
        MOV     sp, r1                  ; jump over input block on stack
        Pull    "r5,r6"                 ; r5 = ModeFlags, r6 = NColour
        BVS     %FT98

        CMP     r6, #255                ; by default,
        ADDCC   r1, r6, #1              ;   program NColour+1 palette entries
        MOVCS   r1, #256                ;   or 256, whichever is the minimum
        TEQ     r6, #1                  ; 1bpp?
        ADREQ   r2, defpal_1bpp
        TEQ     r6, #3                  ; 2bpp?
        ADREQ   r2, defpal_2bpp
        TEQ     r6, #63                 ; 8bpp, VIDC-1 compatible mode?
        MOVEQ   r1, #16                 ; only do the first 16 palette entries in this case
        TEQNE   r6, #255                ; 8bpp, either variety?
        ADREQ   r2, defpal_8bpp
        TST     r6, #&FF00              ; 16bpp or 32bpp? (correct 32bpp later)
        ADRNEL  r2, defpal_16bpp
        CMP     r6, #&FFFFFFFF          ; 32bpp?
        ADREQL  r2, defpal_32bpp
        MOV     r3, r2                  ; for all of above, the flash states are the same
        TEQ     r6, #15                 ; 4bpp?
        ADREQ   r2, defpal_4bpp_1
        ADREQ   r3, defpal_4bpp_2
        TST     r5, #2                  ; teletext mode?
        ADRNE   r3, defpal_4bpp_1       ; don't flash colours
                                        ; note, no transparent default colours any more

        MOV     r0, #0                  ; program from palette entry 0 upwards
        ORR     r1, r1, #17:SHL:24      ; program flash state 1
        MOV     r4, #paletteV_BulkWrite
        STR     pc, [sp, #-4]!          ; push claimant return address onto stack
        LDR     pc, [sp, #4*10]         ; goto pass-on (skip pc,r0-r3,r5-r6,r10-r12)
        NOP
        TEQ     r4, #paletteV_Complete  ; BulkWrite not successful?
        BNE     %FT98

        ADD     r10, sp, #4*6
        LDMIA   r10, {r10-r12}          ; restore original r10-r12 from stack
        BIC     r1, r1, #&FF000000
        ORR     r1, r1, #18:SHL:24      ; program flash state 2
        MOV     r2, r3
        MOV     r4, #paletteV_BulkWrite
        STR     pc, [sp, #-4]!          ; push claimant return address onto stack
        LDR     pc, [sp, #4*10]         ; goto pass-on (skip pc,r0-r3,r5-r6,r10-r12)
        NOP
        TEQ     r4, #paletteV_Complete  ; BulkWrite not successful?
        BNE     %FT98

        ADD     r10, sp, #4*6
        LDMIA   r10, {r10-r12}          ; restore original r10-r12 from stack
        MOV     r0, #0
        MOV     r1, #24
        MOV     r2, #&00000010
        MOV     r4, #paletteV_Set       ; set border to solid black
        STR     pc, [sp, #-4]!          ; push claimant return address onto stack
        LDR     pc, [sp, #4*10]         ; goto pass-on (skip pc,r0-r3,r5-r6,r10-r12)
        NOP
        TEQ     r4, #paletteV_Complete  ; BulkWrite successful?
        BEQ     %FT99

98      ; Jumps here if there was any sort of error: claims vector, but doesn't mark
        ; operation as having been completed
        CLRV
        MOV     r4, #paletteV_SetDefaultPalette

99      ; Restore r0-r3,r5-r6,r10-r12,lr to the values they had originally, and jump to
        ; the return address supplied for claiming the call
        Pull    "r0-r3,r5-r6,r10-r12,lr,pc"

        GBLA    Counter
        GBLA    PEntry

defpal_1bpp
        &       &00000010       ; black
        &       &FFFFFF10       ; white

defpal_2bpp
        &       &00000010       ; black
        &       &0000FF10       ; red
        &       &00FFFF10       ; yellow
        &       &FFFFFF10       ; white

defpal_4bpp_1
        &       &00000010       ; black
        &       &0000FF10       ; red
        &       &00FF0010       ; green
        &       &00FFFF10       ; yellow
        &       &FF000010       ; blue
        &       &FF00FF10       ; magenta
        &       &FFFF0010       ; cyan
        &       &FFFFFF10       ; white
        &       &00000010       ; black-white flash
        &       &0000FF10       ; red-cyan flash
        &       &00FF0010       ; green-magenta flash
        &       &00FFFF10       ; yellow-blue flash
        &       &FF000010       ; blue-yellow flash
        &       &FF00FF10       ; magenta-green flash
        &       &FFFF0010       ; cyan-red flash
        &       &FFFFFF10       ; white-black flash

defpal_4bpp_2
        &       &00000010       ; black
        &       &0000FF10       ; red
        &       &00FF0010       ; green
        &       &00FFFF10       ; yellow
        &       &FF000010       ; blue
        &       &FF00FF10       ; magenta
        &       &FFFF0010       ; cyan
        &       &FFFFFF10       ; white
        &       &FFFFFF10       ; black-white flash
        &       &FFFF0010       ; red-cyan flash
        &       &FF00FF10       ; green-magenta flash
        &       &FF000010       ; yellow-blue flash
        &       &00FFFF10       ; blue-yellow flash
        &       &00FF0010       ; magenta-green flash
        &       &0000FF10       ; cyan-red flash
        &       &00000010       ; white-black flash

defpal_8bpp

Counter SETA    0
        WHILE   Counter < 256
PEntry  SETA    &00000010               ; all solid colours
      [ Counter :AND: 1 = 1
PEntry  SETA    PEntry :OR: &11111100   ; tint bit 0
      ]
      [ Counter :AND: 2 = 2
PEntry  SETA    PEntry :OR: &22222200   ; tint bit 1
      ]
      [ Counter :AND: 4 = 4
PEntry  SETA    PEntry :OR: &00004400   ; red bit 2
      ]
      [ Counter :AND: 8 = 8
PEntry  SETA    PEntry :OR: &44000000   ; blue bit 2
      ]
      [ Counter :AND: 16 = 16
PEntry  SETA    PEntry :OR: &00008800   ; red bit 3
      ]
      [ Counter :AND: 32 = 32
PEntry  SETA    PEntry :OR: &00440000   ; green bit 2
      ]
      [ Counter :AND: 64 = 64
PEntry  SETA    PEntry :OR: &00880000   ; green bit 3
      ]
      [ Counter :AND: 128 = 128
PEntry  SETA    PEntry :OR: &88000000   ; blue bit 3
      ]
        &       PEntry
Counter SETA    Counter + 1
        WEND

defpal_16bpp

Counter SETA    0
        WHILE   Counter < 256           ;    ___ logical colour bit ____
PEntry  SETA    &00000010               ;   |             |             |
      [ Counter :AND: 1 = 1             ;   v   B out     v   G out     v   R out
PEntry  SETA    PEntry :OR: &00000800   ;   8 00000000    4 00000000    0 00001000
      ]
      [ Counter :AND: 2 = 2
PEntry  SETA    PEntry :OR: &00081000   ;   9 00000000    5 00001000    1 00010000
      ]
      [ Counter :AND: 4 = 4
PEntry  SETA    PEntry :OR: &08102100   ;  10 00001000    6 00010000    2 00100001
      ]
      [ Counter :AND: 8 = 8
PEntry  SETA    PEntry :OR: &10214200   ;  11 00010000    7 00100001    3 01000010
      ]
      [ Counter :AND: 16 = 16
PEntry  SETA    PEntry :OR: &21428400   ;  12 00100001    8 01000010    4 10000100
      ]
      [ Counter :AND: 32 = 32
PEntry  SETA    PEntry :OR: &42840000   ;  13 01000010    9 10000100    5 00000000
      ]
      [ Counter :AND: 64 = 64
PEntry  SETA    PEntry :OR: &84000000   ;  14 10000100   10 00000000    6 00000000
      ]
      [ Counter :AND: 128 = 128
PEntry  SETA    PEntry :OR: &00000000   ;  15 00000000   11 00000000    7 00000000
      ]
        &       PEntry
Counter SETA    Counter + 1
        WEND

defpal_32bpp

Counter SETA    0
        WHILE   Counter < 256
        &       (&01010100 * Counter) :OR: &00000010    ; 1:1 mapping of logical:physical
Counter SETA    Counter + 1
        WEND


        AREA    |Asm$$Data|, DATA
; Local static variables
BulkWriteBlock  %       4 * 256 * 2     ; up to 256 colours, up to 2 flash states


        END
