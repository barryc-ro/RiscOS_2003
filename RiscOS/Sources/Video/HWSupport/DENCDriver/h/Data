/******	Data.h *************************************************************

Project:	STB-400
Component:	DENCDriver
This file:	The look-up tables used by the rest of the module

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
24/02/2000	BJGA	Created

***************************************************************************/

#ifndef __data_h
#define __data_h

/* Includes */

#include <stdbool.h>

/* Public types */

typedef enum
{
  standard_none = -1,
  standard_ntsc_443,
  standard_ntsc_m,
  standard_ntsc_m_jp,
  standard_pal_60,
  standard_pal_b,
  standard_pal_b_au,
  standard_pal_b_it,
  standard_pal_b_nz,
  standard_pal_cn,
  standard_pal_d,
  standard_pal_g,
  standard_pal_h,
  standard_pal_i,
  standard_pal_m,
  standard_pal_n,
  standard_secam_b,
  standard_secam_d,
  standard_secam_g,
  standard_secam_k,
  standard_secam_k1,
  standard_secam_l,
  standard_MAX
}
tv_standard;

typedef enum
{
  channel_list_none = -1,
  channel_list_G001D_pal_b_au = 0,
  channel_list_G001D_pal_g_h_i = 1,
  channel_list_G001D_ntsc_m = 2,
  channel_list_MAX
}
tv_channel_list_number;

typedef enum
{
  tv_off,
  tv_on_pal_cvbs,
  tv_on_pal_rgb,
  tv_on_pal_yc,
  tv_on_ntsc
}
tv_configuration;

typedef enum
{
  modulator_G001D = 1,
  modulator_H007F = 2
}
modulator;

typedef enum
{
  colour_ntsc,
  colour_pal,
  colour_secam
}
colour_system;

typedef enum
{
  fsc_3_576, /* PAL-M */
  fsc_3_580, /* NTSC-M */
  fsc_3_582, /* PAL-CN */
  fsc_4_43   /* everything else */
}
colour_subcarrier;

typedef enum
{
  fsa_4_5, /* NTSC-M, PAL-M,CN */
  fsa_5_5, /* PAL-B,G,H,N, SECAM-B,G */
  fsa_6_0, /* PAL-I */
  fsa_6_5  /* PAL-D, SECAM-D,K,K1,L */
}
sound_subcarrier;


typedef struct
{
  char name [12];
  tv_standard nvram_tag;
  tv_channel_list_number channel_list;
}
tv_standard_block_t;

typedef struct
{
  unsigned int nchannels;
  struct {
    char name [4];
    unsigned int freq;
  } channel [68]; /* Yep, NTSC-M has 68 channels */
}
tv_channel_block_t;

typedef struct
{
  char name [12];
  colour_system system;
  bool standard_525_60;
  colour_subcarrier fsc;
  bool pedestal;
  sound_subcarrier fsa;
  const tv_channel_block_t *tv_channels;
}
tv_standard_data_t;

/* Public variables */

extern const tv_standard_data_t Data_TVData [];
extern const tv_standard_block_t Data_G001DPALTVStandards [];
extern const tv_standard_block_t Data_G001DNTSCTVStandards [];
extern const tv_standard_block_t Data_H007FPALTVStandards [];
extern const tv_standard_block_t Data_H007FNTSCTVStandards [];
extern const tv_channel_block_t *Data_TVChannelLists [];

#endif
