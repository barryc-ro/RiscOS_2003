/******	Service.c **********************************************************

Project:	STB-400
Component:	DENCDriver
This file:	Service call handling

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
01/10/1999	BJGA	Created
03/03/2000	BJGA	Implemented all service call handlers
06/03/2000	BJGA	Only reprograms DENC on Service_ModeChanging if the standard has actually changed

***************************************************************************/

/************/
/* Includes */
/************/

#include <stdbool.h>
#include "swis.h"

#include "Control.h"
#include "Defs.h"
#include "Module.h"
#include "Service.h"

/*****************/
/* Private types */
/*****************/

typedef struct
{
  unsigned int flags;
  unsigned int x_res;
  unsigned int y_res;
  unsigned int depth;
  unsigned int frame_rate;
  unsigned int terminator;
}
mode_selector;

/**********************/
/* Private prototypes */
/**********************/

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

/*********************/
/* Private constants */
/*********************/

/********************/
/* Public functions */
/********************/

/******	Service_ServicePostInit() ******************************************

Purpose:	Handles Service_PostInit

***************************************************************************/

void Service_ServicePostInit (void)
{
  /* Read configured mode/wimpmode, and select it */
  /* Since the mode should be configured to Auto, it will */
  /* actually be determined from Service_MonitorLeadTranslation */
  void *wimpmode;
  _swix (OS_ReadSysInfo, _IN(0)|_OUT(0), 1, &wimpmode);
  _swix (OS_ScreenMode, _INR(0,1), 0, wimpmode);
}

/******	Service_ServiceMonitorLeadTranslation() ****************************

Purpose:	Handles Service_MonitorLeadTranslation
In:		Pointers to return default mode, MonitorType and sync type
Out:		|true| to claim the service call

***************************************************************************/

bool Service_ServiceMonitorLeadTranslation (void **mode, unsigned char *monitor_type, unsigned char *sync_type)
{
  static mode_selector my_mode = { 1, 0, 0, 4, -1, -1 };
  if (Data_TVData[Module_ConfiguredTVStandard].standard_525_60)
  {
    my_mode.x_res = 640;
    my_mode.y_res = 480;
    *monitor_type = 8;
  }
  else
  {
    my_mode.x_res = 720;
    my_mode.y_res = 576;
    *monitor_type = 0;
  }
  *mode = &my_mode;
  *sync_type = 0;
  return true;
}

/******	Service_ServiceModeChanging() **************************************

Purpose:	Handles Service_ModeChanging
In:		New mode

***************************************************************************/

void Service_ServiceModeChanging (void *mode)
{
  IGNORE(mode);
  /* Set up the video hardware when we're switching between 625/50 and 525/60 TV standards */
  if (Module_SwitchStandardOnNextModeChange)
  {
    Control_SetStandard (Module_PendingTVStandard);
    Module_SwitchStandardOnNextModeChange = false;
  }
  /* Apply the pending "Macrovision" state unconditionally */
  /* This must be done after switching the TV standard, because that resets DENC, which scrambles its Macrovision registers */
  Control_SetMacrovisionState (Module_PendingMacrovisionState);
}

/******	Service_ServiceStandby() *******************************************

Purpose:	Handles Service_Standby
In:		Service_Standby flags (bit 0 set => into standby)

***************************************************************************/

void Service_ServiceStandby (unsigned int flags)
{
  IGNORE(flags);
  Control_SetVideoPath ();
}
