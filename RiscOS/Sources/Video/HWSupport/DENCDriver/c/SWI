/******	SWI.c **************************************************************

Project:	STB-400
Component:	DENCDriver
This file:	SWI handler

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
01/10/1999	BJGA	Created
22/10/1999	BJGA	API updated in line with issue C specification
14/12/1999	BJGA	API updated in line with issue D specification
03/03/2000	BJGA	Implemented SWI PlatformFeatures 0 and 1, and SWI TVSetup
09/03/2000	BJGA	Implemented SWI SetState, PlatformFeatures 3, GetState, LoadMacrovisionKey

***************************************************************************/

/************/
/* Includes */
/************/

#include <stdio.h>
#include <ctype.h>
#include <stdbool.h>
#include "kernel.h"
#include "swis.h"

#include "DebugLib/DebugLib.h"
#include "MPEG/Macrovisio.h"
#include "NVRAM.h"

#include "Control.h"
#include "Data.h"
#include "Defs.h"
#include "Mess.h"
#include "Module.h"
#include "SWI.h"

/*****************/
/* Private types */
/*****************/

typedef struct
{
  unsigned int state_bits;
  unsigned int denc_type;
  modulator modulator_type;
  unsigned chipID: 8;
  unsigned revID: 8;
}
platform_features_3_block_t;

/**********************/
/* Private prototypes */
/**********************/

static bool static_MatchStrings (const char *s1, const char *s2);

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

/*********************/
/* Private constants */
/*********************/

/********************/
/* Public functions */
/********************/

/******	SWI_SetState() *****************************************************

Purpose:	Handles Macrovision_SetState
In:		flags:
                  bit 0:     clear => defer until next screen mode change
		state:
		  bits 0-3:  2 => enable anti-taping
		             others => disable it
		  bit 4:     set => engage DENC test signal
		  bit 5:     set => engage modulator test signal
		  bit 6:     set => disable modulator even if not in standby
		  bits 7-8:  0 => preserve SCART pin 8 state
		             1 => set SCART pin 8 low
		             2 => set SCART pin 8 intermediate (anamorphic)
		             3 => set SCART pin 8 high
		ntsc_rates:
		  |true|  => use a 525/60 standard
		  |false| => use a 625/50 standard
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *SWI_SetState (unsigned int flags, unsigned int state, bool ntsc_rates)
{
  _kernel_oserror *e = NULL;
  
  if ((state & MacroStateFlags_Pin8_Bits) == MacroStateFlags_Pin8_Preserve)
  {
    /* Preserve SCART pin 8 state, update all other features */
    Module_PendingMacrovisionState = state | (Module_PendingMacrovisionState & MacroStateFlags_Pin8_Bits);
  }
  else
  {
    /* Update all features */
    Module_PendingMacrovisionState = state;
  }
  
  if ((flags & MacroSetStateFlags_ChangeNow) != 0)
  {
    /* Don't defer until next mode change */
    Control_SetMacrovisionState (Module_PendingMacrovisionState);
  }
  
  if (Data_TVData[Module_PendingTVStandard].standard_525_60 != ntsc_rates)
  {
    /* Change between 625/50 and 525/60 TV standards */
    Module_SwitchStandardOnNextModeChange = true;
    if (ntsc_rates)
    {
      /*_swix (OS_SetVarVal, _INR(0,4), "TV$Type", "NTSC", 4, 0, 0);*/
      _swix (OS_CLI, _IN(0), "LoadModeFile ModeFiles:NTSCTV");
    }
    else
    {
      /*_swix (OS_SetVarVal, _INR(0,4), "TV$Type", "PAL", 3, 0, 0);*/
      _swix (OS_CLI, _IN(0), "LoadModeFile ModeFiles:PALTV");
    }
    if (ntsc_rates == Data_TVData[Module_ConfiguredTVStandard].standard_525_60)
    {
      /* Switch back to configured TV standard on next mode change */
      Module_PendingTVStandard = Module_ConfiguredTVStandard;
    }
    else if (ntsc_rates == true)
    {
      /* If we're switching to 525/60 on a 625/50 box, use PAL-60 (seems to be more universally supported than NTSC 4.43) */
      Module_PendingTVStandard = standard_pal_60;
    }
    else
    {
      /* If we're switching to 625/50 on a 525/60 box, there isn't a good standard to use, so just go for PAL-I (baseband BDGHI are indistiguishable) */
      Module_PendingTVStandard = standard_pal_i;
    }
  }
  
  return e;
}

/******	SWI_LoadCaptions() *************************************************

Purpose:	Handles Macrovision_LoadCaptions
Note:		A future enhancement, does nothing yet

***************************************************************************/

_kernel_oserror *SWI_LoadCaptions (unsigned int flags, char *bytes, unsigned int length)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(bytes);
  IGNORE(length);
  return e;
}

/******	SWI_PlatformFeatures0() ********************************************

Purpose:	Handles Macrovision_PlatformFeatures 0
In:		Address to write pointer to TV standards structure into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *SWI_PlatformFeatures0 (const void **block)
{
  _kernel_oserror *e = NULL;
  *block = Module_TVStandardsStructure;
  return e;
}

/******	SWI_PlatformFeatures1() ********************************************

Purpose:	Handles Macrovision_PlatformFeatures 1
In:		TV channel list number;
		address to write pointer to TV channel list into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *SWI_PlatformFeatures1 (unsigned int list_number, const void **block)
{
  _kernel_oserror *e = NULL;
  if (list_number >= channel_list_MAX)
  {
    e = Mess_GenerateError ("Err_BadChannelListNo", 0, 0);
  }
  else
  {
    *block = Data_TVChannelLists[list_number];
  }
  return e;
}

/******	SWI_PlatformFeatures3() ********************************************

Purpose:	Handles Macrovision_PlatformFeatures 3
In:		Address to write pointer to video circuitry info block into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *SWI_PlatformFeatures3 (const void **block)
{
  _kernel_oserror *e = NULL;
  static platform_features_3_block_t data;
  unsigned char iic_block [2];
  
  data.state_bits = (Module_FittedModulator == modulator_G001D) ?
      MacroStateFlags_PathBits | MacroStateFlags_DENCTest | MacroStateFlags_ModulatorTest | MacroStateFlags_DisableModulator | MacroStateFlags_Pin8_Bits :
      MacroStateFlags_PathBits | MacroStateFlags_DENCTest | MacroStateFlags_DisableModulator | MacroStateFlags_Pin8_Bits;
  data.denc_type = 1; /* this version of DENCDriver only supports STV0118/STV0119 */
  data.modulator_type = Module_FittedModulator;
  iic_block [0] = 17;
  _swix (IIC_Control, _INR(0,2), 0x40, &iic_block, 1); /* write register address byte */
  _swix (IIC_Control, _INR(0,2), 0x41, &iic_block, 2); /* read registers 17 and 18 */
  data.chipID = iic_block [0];
  data.revID = iic_block [1];
  
  *block = &data;
  return e;
}

/******	SWI_TVSetup() ******************************************************

Purpose:	Handles Macrovision_TVSetup
In:		Flags; new TV standard (or null to preserve); new TV channel
		(or null to preserved); address to write pointer to old TV
		standard into; address to write pointer to old TV channel into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *SWI_TVSetup (unsigned int flags, const char *new_standard,
    const char *new_channel, const char **return_old_standard, const char **return_old_channel)
{
  _kernel_oserror *e = NULL;
  int standard = -1;
  int frequency = -1;
  bool found;
  IGNORE(flags);
  
  _swix (NVRAM_Read, _INR(0,2), "TVStandard", &standard, 0); /* needed even if not returned */
  if (return_old_standard != NULL)
  {
    if (standard == -1 || standard >= standard_MAX)
    {
      *return_old_standard = "Unknown";
    }
    else
    {
      *return_old_standard = Data_TVData[standard].name;
    }
  }
  
  if (return_old_channel != NULL)
  {
    _swix (NVRAM_Read, _INR(0,2), "RFChannel", &frequency, 0);
    if (standard == -1 || standard >= standard_MAX || frequency == -1)
    {
      *return_old_channel = "Unknown";
    }
    else
    {
      const tv_channel_block_t *channel_block = Data_TVData[standard].tv_channels;
      unsigned int channel;
      static char fallback_string [24];
      *return_old_channel = NULL;
      for (channel = 0; channel < channel_block->nchannels; channel ++)
      {
        if (channel_block->channel[channel].freq == frequency)
        {
          *return_old_channel = channel_block->channel[channel].name;
        }
      }
      if (*return_old_channel == NULL) /* if not found in channel list */
      {
        sprintf (fallback_string, "Unknown (%d.25 MHz)", frequency);
        *return_old_channel = fallback_string;
      }
    }
  }
  
  if (new_standard != NULL)
  {
    const tv_standard_block_t *standard_block = Module_TVStandardsStructure;
    unsigned int possible_standard = 0;
    found = false;
    /* First try the list of officially supported standards (for autodetected hardware) */
    while (!found && standard_block->name[0] != '\0')
    {
      if (static_MatchStrings (standard_block->name, new_standard))
      {
        found = true;
        standard = standard_block->nvram_tag;
      }
      standard_block ++;
    }
    /* Then try the global list of standards */
    while (!found && possible_standard < standard_MAX)
    {
      if (static_MatchStrings (Data_TVData[possible_standard].name, new_standard))
      {
        char *warning_message;
        found = true;
        standard = possible_standard;
        Mess_LookUp ("UnsuppStandard", &warning_message, 0);
        printf ("%s\n", warning_message);
      }
      possible_standard ++;
    }
    /* Either set NVRAM, or return an error, as appropriate */
    if (found)
    {
      _swix (NVRAM_Write, _INR(0,2), "TVStandard", &standard, 0);
    }
    else
    {
      e = Mess_GenerateError ("Err_BadStandard", 0, 0);
    }
  }
  
  /* NB: |standard| now holds the new standard, or the current one if no new standard was specified */
  
  if (new_channel != NULL && standard != -1 && standard < standard_MAX && !e)
  {
    const tv_channel_block_t *channel_block = NULL; /* default to no official channel block */
    const tv_standard_block_t *standard_block = Module_TVStandardsStructure;
    unsigned int possible_channel;
    found = false;
    /* First identify whether there is an official channel block, and if so, look for channel within it */
    while (!found && standard_block->name[0] != '\0')
    {
      if (standard_block->nvram_tag == standard)
      {
        found = true;
        if (standard_block->channel_list != channel_list_none)
        {
          channel_block = Data_TVChannelLists [standard_block->channel_list];
        }
      }
      standard_block ++;
    }
    found = false;
    if (channel_block != NULL)
    {
      possible_channel = 0;
      while (!found && possible_channel < channel_block->nchannels)
      {
        if (static_MatchStrings (channel_block->channel[possible_channel].name, new_channel))
        {
          found = true;
          frequency = channel_block->channel[possible_channel].freq;
        }
        possible_channel++;
      }
    }
    /* Then try the global list of channels for the appropriate TV standard */
    channel_block = Data_TVData[standard].tv_channels;
    possible_channel = 0;
    while (!found && possible_channel < channel_block->nchannels)
    {
      if (static_MatchStrings (channel_block->channel[possible_channel].name, new_channel))
      {
        char *warning_message;
        found = true;
        frequency = channel_block->channel[possible_channel].freq;
        Mess_LookUp ("UnsuppChannel", &warning_message, 0);
        printf ("%s\n", warning_message);
      }
      possible_channel++;
    }
    /* Either set NVRAM, or return an error, as appropriate */
    if (found)
    {
      _swix (NVRAM_Write, _INR(0,2), "RFChannel", &frequency, 0);
    }
    else
    {
      e = Mess_GenerateError ("Err_BadChannel", 0, 0);
    }
  }
  
  return e;
}

/******	SWI_GetState() *****************************************************

Purpose:	Handles Macrovision_GetState
In:		Flags; address to write copy of state word into; address to
		write copy of ntsc_rates flag into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *SWI_GetState (unsigned int flags, unsigned int *return_state, bool *return_ntsc_rates)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  *return_state = Module_PendingMacrovisionState;
  *return_ntsc_rates = Data_TVData[Module_PendingTVStandard].standard_525_60;
  return e;
}

/******	SWI_LoadMacrovisionKey() *******************************************

Purpose:	Handles Macrovision_LoadMacrovisionKey
In:		Flags; address of Macrovision key to apply
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *SWI_LoadMacrovisionKey (unsigned int flags, const char *key_block)
{
  _kernel_oserror *e = NULL;
  unsigned char iic_block [1];
  static const unsigned short crc16tab[256] =
  {
    /* Table calculated by Mark G. Mendel, Network Systems Corporation */
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
  };
  IGNORE(flags);
  
  iic_block [0] = 17; /* chipID register */
  _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 1); /* set register */
  _swix (IIC_Control, _INR(0,2), 0x41, iic_block, 1); /* read value */
  if (iic_block [0] == 118)
  {
    /* An STV0118 seems to be fitted! Disable Macrovision */
    Module_MacrovisionEnabled = false;
  }
  else
  {
    /* Make an upper case copy of the key */
    /* At the same time, check for invalid characters or invalid lengths, and determine if it's Revision 6 or 7 */
    unsigned char macrovision_revision = 7; /* default to Revision 7 */
    char block2 [41]; /* the upper-case version of the key, null-terminated */
    unsigned int c;
    Module_MacrovisionEnabled = true; /* start off assuming it's valid */
    for (c = 0; c < 40; c++)
    {
      if (key_block[c] < ' ')
      {
        /* It's an early terminator: either it's a Revision 6 key, or an invalid key; either way we want to stop copying */
        if (c == 34)
        {
          macrovision_revision = 6;
        }
        else
        {
          Module_MacrovisionEnabled = false;
        }
        break;
      }
      else if ((key_block[c] >= '0' && key_block[c] <= '9') || (key_block[c] >= 'A' && key_block[c] <= 'F'))
      {
        /* Copy character */
        block2[c] = key_block[c];
      }
      else if (key_block[c] >= 'a' && key_block[c] <= 'f')
      {
        /* Copy an upper case version of the character */
        block2[c] = key_block[c] + ('A' - 'a');
      }
      else
      {
        /* An invalid character: just break out of the loop (the long-string test will invalidate the key) */
        break;
      }
    }
    /* Was the key over-long? */
    if (key_block[c] >= ' ')
    {
      Module_MacrovisionEnabled = false;
    }
    else
    {
      block2[c] = '\0'; /* null-terminate our copy */
    }
    /* If we still think the key may be valid, test the CRC */
    if (Module_MacrovisionEnabled)
    {
      unsigned short crc_calculated = 0;
      unsigned char cps_length = (macrovision_revision == 7) ? 34 : 28;
      unsigned short crc_supplied = 0;
      unsigned char last_crc_char = (macrovision_revision == 7) ? 40 : 34;
      unsigned char crc_digit;
      for (c = last_crc_char - 4; c < last_crc_char; c++)
      {
        crc_supplied <<= 4;
        crc_digit = block2[c] & 0x4F; /* numeric digits in range 0-9, alphabetic digits in range 65-70 */
        if (crc_digit > 9) crc_digit -= 'A' - 10;
        crc_supplied |= crc_digit;
      }
      for (c = 2; c < (2 + cps_length); c++)
      {
        crc_calculated = crc16tab[((crc_calculated >> 8) & 0xFF)] ^ (crc_calculated << 8) ^ block2[c];
      }
      if (crc_calculated != crc_supplied)
      {
        Module_MacrovisionEnabled = false;
      }
    }
    if (Module_MacrovisionEnabled)
    {
      /* The key has now passed all validity tests - pass to Control_SetupMacrovision() */
      Control_SetupMacrovision (macrovision_revision, block2);
    }
  }
  /* Reassert the current "Macrovision" state (not any currently pending version) */
  /* This will actually program the DENC Macrovision registers; if the current state has anti-taping */
  /* enabled, it may also blank/unblank the video, depending on whether anti-taping is/was prohibited */
  Control_SetMacrovisionState (Module_CurrentMacrovisionState);
  
  return e;
}

/*********************/
/* Private functions */
/*********************/

/******	static_MatchStrings() **********************************************

Purpose:	Case insensitive control-terminated string compare
In:		Two string pointers
Out:		|true| if they match

***************************************************************************/

static bool static_MatchStrings (const char *s1, const char *s2)
{
  unsigned int i = 0;
  bool match = false;
  do
  {
    if ((s1[i] < ' ') ^ (s2[i] < ' '))
    {
      break;
    }
    else if ((s1[i] < ' ') && (s2[i] < ' '))
    {
      match = true;
    }
    else if (toupper(s1[i]) != toupper(s2[i]))
    {
      break;
    }
    i++;
  }
  while (!match);
  return match;
}
