/******	Control.c **********************************************************

Project:	STB-400
Component:	DENCDriver
This file:	Low level hardware control

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
25/02/2000	BJGA	Created
10/03/2000	BJGA	Switches G001D modulator completely off in standby;
			implemented Control_SetupMacrovision,
			Control_SetMacrovisionState and static_SetDENCOutputs
14/03/2000	BJGA	Added support for TVChannel 0 (off)
11/05/2000	BJGA	Pedestal now correctly set (and even field closed
			captioning is no longer enabled in PAL modes)
07/06/2000	BJGA	D0 and D1 outputs from TDA8540 switched, so can now
			correctly signal 6V on SCART pin 8
06/07/2000	BJGA	No longer calls getenv() in Control_SetMacrovisionState
			(so SWI Macrovision_SetState is now interrupt-safe)
07/08/2000	BJGA	(De)activates closed caption waveform when necessary

***************************************************************************/

/************/
/* Includes */
/************/

#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "DebugLib/DebugLib.h"
#include "MPEG/Macrovisio.h"
#include "PortMan.h"

#include "Control.h"
#include "Data.h"
#include "Module.h"

/*****************/
/* Private types */
/*****************/

union binary_key
{
  unsigned char byte [18];
  struct
  {
    /* The rather cryptic notation used to describe each field in this structure is derived from the  */
    /* Nx references for Macrovision parameters. Typically, a field is named nX_YZ, where X is the    */
    /* parameter number (in decimal) and Y and Z are the highest and lowest bit numbers (in hex) from */
    /* the parameter that are found in the field. A single parameter is split across multiple fields  */
    /* where the parameter is programmed into more than one STV0119B register, or where there is a    */
    /* 32-bit word boundary in the structure (to prevent the compiler from re-aligning the field at   */
    /* the next word boundary). Where possible, multiple parameters or parts of parameters have been  */
    /* lumped together into a single field, for efficiency. */
    
    unsigned n0_54               : 2;
    unsigned n0_76               : 2;
    unsigned n0_30               : 4;
    unsigned zero                : 4;
    unsigned n21_92              : 8;
    unsigned n18_0_n19_30_n20_20 : 8;
    unsigned n17_0_n18_31        : 4;
    
    unsigned n16_0_n17_31        : 4;
    unsigned n15_70              : 8;
    unsigned n14_70              : 8;
    unsigned n13_70              : 8;
    unsigned n12_30              : 4;
    
    unsigned n12_74              : 4;
    unsigned n12_E8              : 7;
    unsigned n11_70              : 8;
    unsigned n11_E8              : 7;
    unsigned n10_50              : 6;
    
    unsigned n9_50               : 6;
    unsigned n8_50               : 6;
    unsigned n5_20_n6_20_n7_10   : 8;
    unsigned n4_50               : 6;
    unsigned n22_0               : 1;
    unsigned n3_10               : 2;
    unsigned n3_42               : 3;
    
    unsigned n2_30_n3_5          : 5;
    unsigned n2_54               : 2;
    unsigned n2_6                : 1;
    unsigned n1_50               : 6;
    unsigned n21_10              : 2;
    
  } param;
};

/**********************/
/* Private prototypes */
/**********************/

static void static_SetDENCOutputs (void);

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

static unsigned char static_DENCConfigSoftCopy [7] = { 0x12, 0x44, 0x20, 0x00, 0x00, 0x30, 0x10 };
static unsigned char static_ModulatorSoftCopy [4] = { /*C1*/ 0x84, /*C2*/ 0x40, /*PD1*/ 0x00, /*PD2*/ 0x04 };
static unsigned int static_MacrovisionRevision = 7;
static unsigned char static_MacrovisionIICBlock [20] = { 45 }; /* parameters N0-N22 in STV0119B format */

/*********************/
/* Private constants */
/*********************/

/********************/
/* Public functions */
/********************/

/******	Control_SetStandard() **********************************************

Purpose:	Setting all features directly related to a given baseband video standard
In:		TV standard

***************************************************************************/

void Control_SetStandard (tv_standard standard)
{
  unsigned char iic_block [6];
  dprintf (("DENC", "Setting TV standard to %s\n", Data_TVData[standard].name));
  
  
  /* DENC register "Configuration0" */
  if (Data_TVData[standard].standard_525_60)
  {
    if (Data_TVData[standard].system == colour_ntsc)
    {
      /* NTSC-4.43, NTSC-M, NTSC-M-JP:  std[1:0] = NTSC M */
      static_DENCConfigSoftCopy[0] = (static_DENCConfigSoftCopy[0] &~ (3<<6)) | (2<<6);
    }
    else
    {
      /* PAL-60, PAL-M:  std[1:0] = PAL M */
      static_DENCConfigSoftCopy[0] = (static_DENCConfigSoftCopy[0] &~ (3<<6)) | (3<<6);
    }
  }
  else
  {
    if (Data_TVData[standard].pedestal)
    {
      /* PAL-N:  std[1:0] = PAL N */
      static_DENCConfigSoftCopy[0] = (static_DENCConfigSoftCopy[0] &~ (3<<6)) | (1<<6);
    }
    else
    {
      /* Everything else:  std[1:0] = PAL BDGHI */
      static_DENCConfigSoftCopy[0] = (static_DENCConfigSoftCopy[0] &~ (3<<6)) | (0<<6);
    }
  }
  iic_block [0] = 0;
  iic_block [1] = static_DENCConfigSoftCopy[0];
  _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
  
  
  /* DENC register "Configuration1" */
  if (Data_TVData[standard].standard_525_60 || standard == standard_pal_n || standard == standard_pal_cn)
  {
    /* NTSC and PAL M/N:  flt[1:0] = 1.6 MHz chroma filter bandwidth */
    static_DENCConfigSoftCopy[1] = (static_DENCConfigSoftCopy[1] &~ (3<<5)) | (2<<5);
  }
  else
  {
    /* Everything else:  flt[1:0] = 1.9 MHz chroma filter bandwidth */
    static_DENCConfigSoftCopy[1] = (static_DENCConfigSoftCopy[1] &~ (3<<5)) | (3<<5);
  }
  if (Data_TVData[standard].pedestal)
  {
    static_DENCConfigSoftCopy[1] |= (1<<2);
  }
  else
  {
    static_DENCConfigSoftCopy[1] &= ~ (1<<2);
  }
  if (Data_TVData[standard].captions)
  {
    static_DENCConfigSoftCopy[1] |= (3<<0);
  }
  else
  {
    static_DENCConfigSoftCopy[1] &= ~ (3<<0);
  }
  iic_block [0] = 1;
  iic_block [1] = static_DENCConfigSoftCopy[1];
  _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
  
  
  /* DENC register "Configuration3" */
  if (Data_TVData[standard].fsc == fsc_4_43)
  {
    /* fsc = 4.43 MHz:  trap_pal = 4.43 MHz trap filter */
    static_DENCConfigSoftCopy[3] |= (1<<6);
  }
  else
  {
    /* fsc = 3.576, 3.580, 3.582 MHz:  trap_pal = 3.58 MHz trap filter */
    static_DENCConfigSoftCopy[3] &= ~ (1<<6);
  }
  iic_block [0] = 3;
  iic_block [1] = static_DENCConfigSoftCopy[3];
  _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
  
  
  /* DENC registers "Increment_dfs" */
  switch (Data_TVData[standard].fsc)
  {
    case fsc_3_576:
      /* PAL-M */
      iic_block [1] = 0x21;
      iic_block [2] = 0xE6;
      iic_block [3] = 0xF0;
      break;
    case fsc_3_580:
      /* NTSC_M, NTSC_M_JP */
      iic_block [1] = 0x21;
      iic_block [2] = 0xF0;
      iic_block [3] = 0x7C;
      break;
    case fsc_3_582:
      /* PAL-CN */
      iic_block [1] = 0x21;
      iic_block [2] = 0xF6;
      iic_block [3] = 0x94;
      break;
    case fsc_4_43:
      /* Everything else */
      iic_block [1] = 0x2A;
      iic_block [2] = 0x09;
      iic_block [3] = 0x8B;
  }
  /* DENC registers "Phase_dfs" */
  if (Data_TVData[standard].system == colour_ntsc)
  {
    iic_block [4] = (unsigned char) (0x1FC000 >> 22);
    iic_block [5] = (unsigned char) (0x1FC000 >> 14);
  }
  else
  {
    iic_block [4] = (unsigned char) (0xD9C000 >> 22);
    iic_block [5] = (unsigned char) (0xD9C000 >> 14);
  }
  iic_block [0] = 10;
  _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 6);
  /* Now, to activate Increment_dfs and Phase_dfs, we need to set selrst and perform a software reset */
  static_DENCConfigSoftCopy[2] |= (1<<3);
  iic_block [0] = 2;
  iic_block [1] = static_DENCConfigSoftCopy[2];
  _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
  iic_block [0] = 6;
  iic_block [1] = static_DENCConfigSoftCopy[6] | (1<<7) /* soft-reset bit doesn't stay set */;
  _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
  
  /* Finally, tell Jim's circuitry to withhold two PIXCLK cycles from each scanline, or not */
  _swix (PortMan_AccessBit, _INR(0,1), Data_TVData[standard].standard_525_60 ? PORTMAN_FLAG_SET : PORTMAN_FLAG_CLEAR, "NTSC_Selected");
  
  /* Make sure Revision 6 Macrovision data is kept up-to-date */
  if (static_MacrovisionRevision == 6)
  {
    if (Data_TVData[standard].standard_525_60)
    {
      * (unsigned int *) (static_MacrovisionIICBlock + 16) = 0xC0FF2CD0;
    }
    else
    {
      * (unsigned int *) (static_MacrovisionIICBlock + 16) = 0x40552740;
    }
  }
}

/******	Control_InitialiseModulator() **************************************

Purpose:	Sets up the modulator, based upon Module_ConfiguredTVStandard
		and Module_ConfiguredTVChannel
Notes:		Audio subcarrier frequency / channel are not changed when
		TV standard is altered using Macrovision_SetState

***************************************************************************/

void Control_InitialiseModulator (void)
{
  _kernel_oserror *e;
  
  /* Supply power to modulator - the G001D won't respond until we do */
  /* The H007F may be turned off again in Control_SetVideoPath */
  _swix (PortMan_AccessBit, _INR(0,1), PORTMAN_FLAG_SET, "Modulator");
  
  /* Set up the video carrier and audio subcarrier frequency in the IIC block */
  static_ModulatorSoftCopy [2] |= (Module_ConfiguredTVChannel & 0x3F0) >> 4;
  static_ModulatorSoftCopy [3] |= (Module_ConfiguredTVChannel & 0x00F) << 4;
  switch (Data_TVData[Module_ConfiguredTVStandard].fsa)
  {
    case fsa_4_5:
      static_ModulatorSoftCopy [1] |= 0 << 3;
      break;
    case fsa_5_5:
      static_ModulatorSoftCopy [1] |= 1 << 3;
      break;
    case fsa_6_0:
      static_ModulatorSoftCopy [1] |= 2 << 3;
      break;
    case fsa_6_5:
      static_ModulatorSoftCopy [1] |= 3 << 3;
      break;
  }
  
  /* Attempt an IIC transaction. If this fails, assume that H007F modulator is fitted instead of G001D */
  e = _swix (IIC_Control, _INR(0,2), 0xCA, static_ModulatorSoftCopy, 4);
  if (e->errnum == 0x20300 /* No acknowledge from IIC device */)
  {
    Module_FittedModulator = modulator_H007F;
  }
  else
  {
    Module_FittedModulator = modulator_G001D;
  }
}

/******	Control_SetVideoPath() *********************************************

Purpose:	Sets CVBS/RGB/YC routing through the video circuitry, as
		appropriate to TVOn variable and the hardware type
		(deduced from the modulator type); also turns H007F modulator
		(if fitted) on or off according to TVOn

***************************************************************************/

void Control_SetVideoPath (void)
{
  const char *tvon_setting = getenv ("TVOn");
  unsigned char iic_block [2];
  if (tvon_setting == NULL)
  {
    /* Into standby - turn everything off */
    
    /* Turn off H007F modulator, turn on H007F booster, or */
    /* turn off G001D modulator, leaving G001D booster on */
    _swix (PortMan_AccessBit, _INR(0,1), PORTMAN_FLAG_CLEAR, "Modulator");
    /* Then turn off the TDA outputs */
    iic_block [0] = 2;
    iic_block [1] = 0x00;
    _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
    /* Then the DENC outputs */
    static_DENCConfigSoftCopy [5] = 0xFE;
    static_SetDENCOutputs ();
  }
  else
  {
    if (Module_FittedModulator == modulator_H007F)
    {
      /* Set DENC to output Y/C/CVBS/CVBS1 with CVBS forced to blanking level */
      static_DENCConfigSoftCopy [5] = 0x32;
      static_SetDENCOutputs ();
      /* Set TDA to pass IN2->OUT2, IN1->OUT1, IN0->OUT0, with OUT3 at high impedance */
      iic_block [0] = 0;
      iic_block [1] = (2<<4) | (1<<2) | (0<<0);
      _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
      iic_block [0] = 2;
      iic_block [1] = 0x07;
      _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
      /* Turn on H007F modulator, turn off H007F booster */
      _swix (PortMan_AccessBit, _INR(0,1), PORTMAN_FLAG_SET, "Modulator");
    }
    else
    {
      if (strcmp (tvon_setting, "CVBS") == 0)
      {
        /* Set DENC to output R/G/B/CVBS1 with R/G/B forced to black level */
        static_DENCConfigSoftCopy [5] = 0xBE;
        static_SetDENCOutputs ();
        /* Set TDA to pass IN1->OUT1, with OUT3/OUT2/OUT0 at high impedance */
        iic_block [0] = 0;
        iic_block [1] = (1<<2);
        _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
        iic_block [0] = 2;
        iic_block [1] = 0x02;
        _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
      }
      else if (strcmp (tvon_setting, "YC") == 0)
      {
        /* Set DENC to output Y/C/CVBS/CVBS1 with CVBS/CVBS1 forced to blanking level */
        static_DENCConfigSoftCopy [5] = 0x72;
        static_SetDENCOutputs ();
        /* Set TDA to pass IN2->OUT1, IN0->OUT0, with OUT3/OUT2 at high impedance */
        iic_block [0] = 0;
        iic_block [1] = (2<<2) | (0<<0);
        _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
        iic_block [0] = 2;
        iic_block [1] = 0x03;
        _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
      }
      else
      {
        /* Set DENC to output R/G/B/CVBS1 */
        static_DENCConfigSoftCopy [5] = 0xB0;
        static_SetDENCOutputs ();
        /* Set TDA to pass IN3->OUT3, IN2->OUT2, IN1->OUT1, IN0->OUT0 */
        iic_block [0] = 0;
        iic_block [1] = (3<<6) | (2<<4) | (1<<2) | (0<<0);
        _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
        iic_block [0] = 2;
        iic_block [1] = 0x0F;
        _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
      }
      /* Turn on G001D modulator, and program it up again - unless TVChannel is configured to 0 */
      if (Module_ConfiguredTVChannel == 0)
      {
        _swix (PortMan_AccessBit, _INR(0,1), PORTMAN_FLAG_CLEAR, "Modulator");
      }
      else
      {
        _swix (PortMan_AccessBit, _INR(0,1), PORTMAN_FLAG_SET, "Modulator");
        _swix (IIC_Control, _INR(0,2), 0xCA, static_ModulatorSoftCopy, 4);
      }
    }
  }
}

/******	Control_SetupMacrovision() *****************************************

Purpose:	Interprets a validated Macrovision key, and caches the
		values to write into the DENC Macrovision registers
In:		Macrovision revision (6 or 7), pointer to key string

***************************************************************************/

void Control_SetupMacrovision (unsigned int revision, const char *key)
{
  union binary_key b;
  unsigned int keybyte = 0;
  unsigned int bbyte = 0;
  unsigned char nybble;
  
  static_MacrovisionRevision = revision; /* cache for later */
  
  /* First convert the ASCII key into binary form. */
  
  /* The binary form must suit the bitfield side of the |binary_key| union:                         */
  /* the compiler accesses bitfields as 32-bit words, and the bitfield fields are assigned within   */
  /* the 32-bit words in increasing significance order; so since the ARM already stores bytes in    */
  /* little-endian order within words, all we need to do is to read nybbles from the ASCII key two  */
  /* at a time, and store the two nybbles in one byte, with the first nybble in the least           */
  /* significant half of the byte.  */
  
  /* Set b.byte[0] from the first two nybbles */
  nybble = key [keybyte++] & 0x4F;
  if (nybble > 9) nybble -= 'A' - 10;
  b.byte [bbyte] = nybble; /* first is least-significant */
  nybble = key [keybyte++] & 0x4F;
  if (nybble > 9) nybble -= 'A' - 10;
  b.byte [bbyte] |= nybble << 4; /* second is most-significant */
  
  if (revision == 6)
  {
    /* In this case, we skip a few bytes of |b| to compensate for the fact that |key| is missing a  */
    /* few characters. Doing this will leave b.byte[1:3] uninitialised, and leave the LS nybble of  */
    /* b.byte[4] erroneously set to zero, but we don't check that the zero nybble is zero, and we   */
    /* overwrite the other relevant parts of the Macrovision IIC block later on for Revision 6, so  */
    /* these aren't problems */
    bbyte = 4;
  }
  else
  {
    /* We can use a straight 2:1 mapping for Revision 7 */
    bbyte = 1;
  }
  
  /* Loop round, parsing the ASCII key, until we've filled |b| */
  while (bbyte < 18)
  {
    nybble = key [keybyte++] & 0x4F;
    if (nybble > 9) nybble -= 'A' - 10;
    b.byte [bbyte] = nybble; /* first is least-significant */
    nybble = key [keybyte++] & 0x4F;
    if (nybble > 9) nybble -= 'A' - 10;
    b.byte [bbyte] |= nybble << 4; /* second is most-significant */
    
    bbyte ++;
  }
  
  /* Now use the other side of the |binary_key| union to construct */
  /* the IIC block for the STV0119B Macrovision registers          */
  static_MacrovisionIICBlock [1] = (b.param.n22_0 << 6) | (b.param.n0_54 << 4) | b.param.n0_30;
  static_MacrovisionIICBlock [2] = (b.param.n1_50 << 2) | b.param.n2_54;
  static_MacrovisionIICBlock [3] = (b.param.n2_30_n3_5 << 3) | b.param.n3_42;
  static_MacrovisionIICBlock [4] = (b.param.n3_10 << 6) | b.param.n4_50;
  static_MacrovisionIICBlock [5] = b.param.n5_20_n6_20_n7_10;
  static_MacrovisionIICBlock [6] = b.param.n8_50;
  static_MacrovisionIICBlock [7] = b.param.n9_50;
  static_MacrovisionIICBlock [8] = b.param.n10_50;
  static_MacrovisionIICBlock [9] = b.param.n11_E8;
  static_MacrovisionIICBlock [10] = b.param.n11_70;
  static_MacrovisionIICBlock [11] = b.param.n12_E8;
  static_MacrovisionIICBlock [12] = (b.param.n12_74 << 4) | b.param.n12_30;
  static_MacrovisionIICBlock [13] = b.param.n13_70;
  static_MacrovisionIICBlock [14] = b.param.n14_70;
  static_MacrovisionIICBlock [15] = b.param.n15_70;
  static_MacrovisionIICBlock [16] = (b.param.n16_0_n17_31 << 4) | b.param.n17_0_n18_31;
  static_MacrovisionIICBlock [17] = b.param.n18_0_n19_30_n20_20;
  static_MacrovisionIICBlock [18] = b.param.n21_92;
  static_MacrovisionIICBlock [19] = (b.param.n21_10 << 6);
  
  /* If it's Revision 6 Macrovision, determine if we're 625/50 or 525/60 from the hardware */
  /* (pending standard isn't good enough) and set up the unspecified part of the IIC block directly */
  if (revision == 6)
  {
    unsigned char iic_block [1] = 0;
    _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 1); /* set register to read (0) */
    _swix (IIC_Control, _INR(0,2), 0x41, iic_block, 1); /* read it */
    if ((iic_block [0] & 0x80) != 0) /* top bit is set for 525/60, clear for 625/50 */
    {
      * (unsigned int *) (static_MacrovisionIICBlock + 16) = 0xC0FF2CD0;
    }
    else
    {
      * (unsigned int *) (static_MacrovisionIICBlock + 16) = 0x40552740;
    }
  }
}

/******	Control_SetMacrovisionState() **************************************

Purpose:	Setting of anti-taping, test signals, modulator disable, SCART pin 8 state
In:		"Macrovision" state word

***************************************************************************/

void Control_SetMacrovisionState (unsigned int state)
{
  unsigned char iic_block [2];
  dprintf (("DENC", "Setting Macrovision state to %X\n", state));
  
  /* Set/unset DENC test signal */
  /* This must be done before we fix the anti-taping state, because we */
  /* have to reset the DENC, which always re-enables Macrovision! */
  if ((state ^ Module_CurrentMacrovisionState) & MacroStateFlags_DENCTest) /* only if flag bit has changed */
  {
    if (state & MacroStateFlags_DENCTest)
    {
      static_DENCConfigSoftCopy [0] = (static_DENCConfigSoftCopy [0] & 0xC7) | (7 << 3); /* AUTOTEST mode */
    }
    else
    {
      static_DENCConfigSoftCopy [0] = (static_DENCConfigSoftCopy [0] & 0xC7) | (2 << 3); /* ODDEVEN+HSYNC slave mode */
    }
    iic_block [0] = 0;
    iic_block [1] = static_DENCConfigSoftCopy [0];
    _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
    iic_block [0] = 6;
    iic_block [1] = static_DENCConfigSoftCopy [6] | (1<<7) /* soft-reset bit doesn't stay set */;
    _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
  }
  
  /* Set/unset modulator test signal */
  if (state & MacroStateFlags_ModulatorTest)
  {
    static_ModulatorSoftCopy [2] |= (1<<6);
  }
  else
  {
    static_ModulatorSoftCopy [2] &= ~(1<<6);
  }
  
  /* Enable/disable modulator, but only if we're not in standby */
  if (!Module_InStandby)
  {
    if ((state & MacroStateFlags_DisableModulator) != 0 || Module_ConfiguredTVChannel == 0)
    {
      _swix (PortMan_AccessBit, _INR(0,1), PORTMAN_FLAG_CLEAR, "Modulator");
    }
    else
    {
      _swix (PortMan_AccessBit, _INR(0,1), PORTMAN_FLAG_SET, "Modulator");
    }
    /* If we turned on the modulator, or if we turned the test on or off, we must now reprogram the G001D */
    if ((Module_FittedModulator == modulator_G001D) && (Module_ConfiguredTVChannel != 0) && (
        (((Module_CurrentMacrovisionState &~ state) & MacroStateFlags_DisableModulator) != 0) ||
        (((Module_CurrentMacrovisionState ^  state) & MacroStateFlags_ModulatorTest)    != 0) ))
    {
      _swix (IIC_Control, _INR(0,2), 0xCA, static_ModulatorSoftCopy, 4);
    }
  }
  
  /* Update the variable holding the current state *after* we check */
  /* for toggling bits, but *before* we call static_SetDENCOutputs() */
  Module_CurrentMacrovisionState = state;
  
  /* Set/unset anti-taping */
  if ((state & MacroStateFlags_PathBits) == MacroStateFlags_Path1Macrovision && Module_MacrovisionEnabled)
  {
    _swix (IIC_Control, _INR(0,2), 0x40, static_MacrovisionIICBlock, sizeof static_MacrovisionIICBlock);
  }
  else
  {
    iic_block [0] = 45;
    iic_block [1] = 0;
    _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
  }
  static_SetDENCOutputs (); /* may blank/unblank the screen if invalid key is/was loaded */
  
  /* Set SCART pin 8 state */
  iic_block [0] = 1;
  switch (state & MacroStateFlags_Pin8_Bits)
  {
    case MacroStateFlags_Pin8_0V:
      iic_block [1] = 0x00; /* all outputs have gain 2, IN0/IN1 are clamped, D0 = 0, D1 = 0 */
      break;
    case MacroStateFlags_Pin8_6V:
      iic_block [1] = 0x02; /* all outputs have gain 2, IN0/IN1 are clamped, D0 = 0, D1 = 1 */
      break;
    case MacroStateFlags_Pin8_12V:
      iic_block [1] = 0x03; /* all outputs have gain 2, IN0/IN1 are clamped, D0 = 1, D1 = 1 */
      break;
  }
  _swix (IIC_Control, _INR(0,2), 0x98, iic_block, 2);
}

/*********************/
/* Private functions */
/*********************/

/******	static_SetDENCOutputs() ********************************************

Purpose:	Sets the output signals from the DENC, taking into account
		the video path and whether it needs to be blanked due to
		Macrovision having been requested when no valid key is loaded

***************************************************************************/

static void static_SetDENCOutputs (void)
{
  unsigned char iic_block [2];
  iic_block [0] = 5;
  iic_block [1] = static_DENCConfigSoftCopy [5];
  if ((Module_CurrentMacrovisionState & MacroStateFlags_PathBits) == MacroStateFlags_Path1Macrovision && !Module_MacrovisionEnabled)
  {
    iic_block [1] |= 0x4E; /* force all outputs to blanking/black/neutral levels, leave other bits unchanged */
  }
  _swix (IIC_Control, _INR(0,2), 0x40, iic_block, 2);
}
