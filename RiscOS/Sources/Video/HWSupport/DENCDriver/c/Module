/******	Module.c ***********************************************************

Project:	STB-400
Component:	DENCDriver
This file:	Main relocatable module entry points

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
01/10/1999	BJGA	Created
22/10/1999	BJGA	API updated in line with issue C specification
22/10/1999	BJGA	Now uses RAM_MODULE switch rather than ROM_MODULE to
			switch ResourceFS code - since debug and McCabe builds
			will be softloaded, this makes the makefile simpler
14/12/1999	BJGA	API updated in line with issue D specification
10/01/2000	BJGA	Various initialisation changes to get CAD 1 going
14/01/2000	BJGA	Installs PaletteV handler; sets up NTSC CLINES output bit
25/01/2000	BJGA	Added 2 x 27MHz delay to incoming HSync signal
26/01/2000	BJGA	Sets default palette on module initialisation
01/02/2000	BJGA	Removed 2 x 27MHz delay
03/03/2000	BJGA	Actions on initialisation are now conditional upon
			hardware detected, and upon configuration settings
09/03/2000	BJGA	Initialises SCART pin 8 state according to TVOn and
			MPEGControl_SetVideoParameters 2; only sets default
			palette on module initialisation if MonotonicTime
			< 5 seconds (ie in ROM boot)

***************************************************************************/

/************/
/* Includes */
/************/

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include "kernel.h"
#include "swis.h"

#include "Global/PaletteV.h"
#include "Global/RISCOS.h"
#include "Global/Services.h"
#include "Global/SWIs.h"
#include "Global/IO/GenericIO.h"
#include "Global/IO/IOMD.h"
#include "DebugLib/DebugLib.h"
#include "MPEG/Macrovisio.h"
#include "MPEG/MPEG2cCard.h"
#include "MPEG/MPEGCtrl.h"

#include "CLI.h"
#include "Config.h"
#include "Control.h"
#include "Data.h"
#include "Defs.h"
#include "Mess.h"
#include "ModHdr.h"
#include "Module.h"
#include "PaletteV.h"
#include "ResMess.h"
#include "Service.h"
#include "SWI.h"

/*****************/
/* Private types */
/*****************/

/**********************/
/* Private prototypes */
/**********************/

/********************/
/* Public variables */
/********************/

bool             Module_NTSCJumper;
modulator        Module_FittedModulator;
tv_standard      Module_ConfiguredTVStandard;
unsigned int     Module_ConfiguredTVChannel;
const tv_standard_block_t *Module_TVStandardsStructure;

unsigned int     Module_PendingMacrovisionState = MacroStateFlags_Path2;
unsigned int     Module_CurrentMacrovisionState = MacroStateFlags_Path2;
tv_standard      Module_PendingTVStandard;

bool             Module_SwitchStandardOnNextModeChange = true;
bool             Module_MacrovisionEnabled = false;

int              Module_MessageFD [4] = { 0, 0, 0, 0 };  /* message file descriptor */

/*********************/
/* Private variables */
/*********************/

/*********************/
/* Private constants */
/*********************/

#ifndef IOMD_C_PALNTSCType
#define IOMD_C_PALNTSCType (1<<4)
#endif

#ifndef NVRAM_Read
#define NVRAM_Read (NVRAMSWI_Base + 0)
#endif

/********************/
/* Public functions */
/********************/

/******	Module_Init() ******************************************************

Purpose:	Module and STi3520L initialisation
In:		Standard args
Out:		Pointer to error block if initialisation failed

***************************************************************************/

extern _kernel_oserror *Module_Init(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e = NULL;
#ifndef ROM_MODULE
  bool FileRegistered = false;
#endif
  bool MessagesOpen = false;
  bool PaletteVRegistered = false;
  unsigned int monotonic_time;
  IGNORE(podule_base);
  IGNORE(cmd_tail);

  debug_initialise ("DENCDriver", "null:", "");
  debug_atexit ();
  debug_set_taskname_prefix (false);
  debug_set_area_level_prefix (true);
  debug_set_area_pad_limit (0);
  debug_set_device (NULL_OUTPUT);
  debug_set_raw_device (NULL_OUTPUT);
  debug_set_trace_device (NULL_OUTPUT);

  if (!e)
  {

#ifndef ROM_MODULE
    e = _swix (ResourceFS_RegisterFiles, _IN(0), ResMess_ResourcesFiles ());
  }
  if (!e)
  {
    FileRegistered = true;
#endif

    e = _swix (MessageTrans_OpenFile, _INR(0,2), &Module_MessageFD, "Resources:$.Resources.DENCDriver.Messages", 0);
  }
  if (!e)
  {
    MessagesOpen = true;
    
    e = _swix (OS_Claim, _INR(0,2), PaletteV, PaletteV_Routine, pw);
  }
  if (!e)
  {
    PaletteVRegistered = true;
    
    /* Read configuration from CLINES and NVRAM */
    e = _swix (NVRAM_Read, _INR(0,2), "RFChannel", &Module_ConfiguredTVChannel, 0);
  }
  if (!e)
  {
    e = _swix (NVRAM_Read, _INR(0,2), "TVStandard", &Module_ConfiguredTVStandard, 0);
  }
  if (!e)
  {
    Module_NTSCJumper = (* (volatile char *) (IOC + IOMD_CLINES) & IOMD_C_PALNTSCType) != 0;
    if (Module_NTSCJumper == 1 ||
        Module_ConfiguredTVStandard >= standard_MAX ||
        Data_TVData[Module_ConfiguredTVStandard].system == colour_secam)
    {
      Module_ConfiguredTVStandard = standard_ntsc_m; /* with 0 ohm resistor removed, or if NVRAM corrupt, use NTSC-M */
    }
    Module_PendingTVStandard = Module_ConfiguredTVStandard;
    
    /* Set solid palette during machine boot (masks the green from the MPEG chip) */
    _swix (OS_ReadMonotonicTime, _OUT(0), &monotonic_time);
    if (monotonic_time < 500)
    {
      _swix (OS_CallAVector, _IN(4)|_IN(9), paletteV_SetDefaultPalette, PaletteV);
      _swix (ColourTrans_InvalidateCache, 0); /* in case palette wasn't already default */
    }
    
    /* Turn on audio DACs */
    * (volatile unsigned int *) (MPEG_Base_Address + Offset_Audio_DACs) = 1;
    
    /* Set up the TV standard to use following the next mode change */
    /* Note that during ROM boot, a mode change is issued on Service_PostInit */
    if (Data_TVData[Module_ConfiguredTVStandard].standard_525_60)
    {
      _swix (OS_SetVarVal, _INR(0,4), "TV$Type", "NTSC", 4, 0, 0);
      _swix (OS_CLI, _IN(0), "LoadModeFile ModeFiles:NTSCTV");
    }
    else
    {
      _swix (OS_SetVarVal, _INR(0,4), "TV$Type", "PAL", 3, 0, 0);
      _swix (OS_CLI, _IN(0), "LoadModeFile ModeFiles:PALTV");
    }
    
    /* Initialise the modulator */
    Control_InitialiseModulator ();
    
    /* Set up the video path out of the DENC and through the TDA8540 */
    Control_SetVideoPath ();
    
    /* Assert a sensible "Macrovision" state: */
    /* disable anti-taping and disable test signals in the DENC and/or modulator, */
    /* and guess an appropriate voltage for SCART pin 8 */
    if (getenv ("TVOn") == NULL)
    {
      Module_PendingMacrovisionState |= MacroStateFlags_Pin8_0V;
    }
    else
    {
      unsigned int scart_state = 0; /* default to 12V if SWI fails */
      _swix (MPEGControl_SetVideoParameters, _IN(0)|_IN(2)|_OUT(2), 2, -1, &scart_state);
      if (scart_state == 1)
      {
        Module_PendingMacrovisionState |= MacroStateFlags_Pin8_6V;
      }
      else
      {
        Module_PendingMacrovisionState |= MacroStateFlags_Pin8_12V;
      }
    }
    Control_SetMacrovisionState (Module_PendingMacrovisionState);
    
    /* Initialise Module_TVStandardsStructure */
    if (Module_NTSCJumper == 1)
    {
      if (Module_FittedModulator == modulator_G001D)
      {
        Module_TVStandardsStructure = Data_G001DNTSCTVStandards;
      }
      else
      {
        Module_TVStandardsStructure = Data_H007FNTSCTVStandards;
      }
    }
    else
    {
      if (Module_FittedModulator == modulator_G001D)
      {
        Module_TVStandardsStructure = Data_G001DPALTVStandards;
      }
      else
      {
        Module_TVStandardsStructure = Data_H007FPALTVStandards;
      }
    }
  }

  if (e && PaletteVRegistered) _swix (OS_Release, _INR(0,2), PaletteV, PaletteV_Routine, pw);
  if (e && MessagesOpen) _swix (MessageTrans_CloseFile, _IN(0), &Module_MessageFD);
#ifndef ROM_MODULE
  if (e && FileRegistered) _swix (ResourceFS_DeregisterFiles, _IN(0), ResMess_ResourcesFiles ());
#endif
  return e;
}

/******	Module_Final() *****************************************************

Purpose:	Module finalisation
In:		Standard args
Out:		Pointer to error block if finalisation failed

***************************************************************************/

extern _kernel_oserror *Module_Final(int fatal, int podule, void *pw)
{
  _kernel_oserror *e = NULL;
  IGNORE(fatal);
  IGNORE(podule);
  
  _swix (OS_Release, _INR(0,2), PaletteV, PaletteV_Routine, pw);
  _swix (MessageTrans_CloseFile, _IN(0), &Module_MessageFD);
#ifndef ROM_MODULE
  _swix (ResourceFS_DeregisterFiles, _IN(0), ResMess_ResourcesFiles ());
#endif
  return e;
}

/******	Module_Service() ***************************************************

Purpose:	Service call handler
In:		Standard args

***************************************************************************/

extern void Module_Service(int service_number, _kernel_swi_regs *r, void *pw)
{
  bool claim = false;
  _kernel_swi_regs rout;
  IGNORE(pw);
  switch (service_number)
  {
    case Service_PostInit:
      Service_ServicePostInit ();
      break;
    case Service_MonitorLeadTranslation:
      claim = Service_ServiceMonitorLeadTranslation (
          (void **) &(rout.r[3]),
          (unsigned char *) &(rout.r[4]),
          (unsigned char *) &(rout.r[5])
          );
      if (claim)
      {
        r->r[3] = rout.r[3];
        r->r[4] = rout.r[4];
        r->r[5] = rout.r[5];
      }
      break;
    case Service_ModeChanging:
      Service_ServiceModeChanging (
          (void *) (r->r[2])
          );
      break;
    case Service_Standby:
      Service_ServiceStandby (
          (unsigned int) (r->r[0])
          );
      break;
  }
  if (claim) r->r[1] = 0;
}

/******	Module_Commands() **************************************************

Purpose:	* command handler
In:		Standard args
Out:		Pointer to error block if command could not be executed

***************************************************************************/

extern _kernel_oserror *Module_Commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
  _kernel_oserror *e = NULL;
  IGNORE(argc);
  IGNORE(pw);
  switch ((int) arg_string)
  {
    case (int) arg_CONFIGURE_SYNTAX:
      switch (cmd_no)
      {
        case CMD_TVStandard:
          printf ("%s\n", (char *) _swi (MessageTrans_Lookup, _INR(0,2)|_RETURN(2), Module_MessageFD, "CDEDTVS", 0));
          break;
        case CMD_TVChannel:
          printf ("%s\n", (char *) _swi (MessageTrans_Lookup, _INR(0,2)|_RETURN(2), Module_MessageFD, "CDEDTVC", 0));
          break;
      }
      break;
    case (int) arg_STATUS:
      switch (cmd_no)
      {
        case CMD_TVStandard:
          Config_PrintTVStandard ();
          break;
        case CMD_TVChannel:
          Config_PrintTVChannel ();
          break;
      }
      break;
    default:
      switch (cmd_no)
      {
        case CMD_LoadMacrovisionKey:
          e = CLI_LoadMacrovisionKey (arg_string);
          break;
        case CMD_TVStandard:
          e = Config_SetTVStandard (arg_string);
          break;
        case CMD_TVChannel:
          e = Config_SetTVChannel (arg_string);
          break;
      }
      break;
  }
  return e;
}

/******	Module_SWI() *******************************************************

Purpose:	SWI handler
In:		Standard args
Out:		Pointer to error block if SWI could not be executed

***************************************************************************/

extern _kernel_oserror *Module_SWI(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *e = NULL;
  _kernel_swi_regs rout;
  IGNORE(pw);
  switch (swi_offset)
  {
    case Macrovision_SetState & 0x3F:
      e = SWI_SetState (
          (unsigned int) (r->r[0]),
          (unsigned int) (r->r[1]),
          (bool) (r->r[2])
          );
      break;
    case Macrovision_LoadCaptions & 0x3F:
      e = SWI_LoadCaptions (
          (unsigned int) (r->r[0]),
          (char *) (r->r[1]),
          (unsigned int) (r->r[2])
          );
      break;
    case Macrovision_CaptionControl & 0x3F:
      /* do nothing, but don't return an error either */
      break;
    case Macrovision_PlatformFeatures & 0x3F:
      switch (r->r[0])
      {
        case 0:
          e = SWI_PlatformFeatures0 (
              (const void **) &(rout.r[1])
              );
          r->r[1] = rout.r[1];
          break;
        case 1:
          e = SWI_PlatformFeatures1 (
              (unsigned int) (r->r[1]),
              (const void **) &(rout.r[2])
              );
          r->r[2] = rout.r[2];
          break;
        case 3:
          e = SWI_PlatformFeatures3 (
              (const void **) &(rout.r[1])
              );
          r->r[1] = rout.r[1];
          break;
        default:
          e = Mess_GenerateError ("Err_InvReason", 0, 1, "Macrovision_PlatformFeatures");
          break;
      }
      break;
    case Macrovision_TVSetup & 0x3F:
      e = SWI_TVSetup (
          (unsigned int) (r->r[0]),
          (const char *) (r->r[1]),
          (const char *) (r->r[2]),
          (const char **) &(rout.r[1]),
          (const char **) &(rout.r[2])
          );
      r->r[1] = rout.r[1];
      r->r[2] = rout.r[2];
      break;
    case Macrovision_GetState & 0x3F:
      e = SWI_GetState (
          (unsigned int) (r->r[0]),
          (unsigned int *) &(rout.r[1]),
          (bool *) &(rout.r[2])
          );
      r->r[1] = rout.r[1];
      r->r[2] = rout.r[2];
      break;
    case Macrovision_LoadMacrovisionKey & 0x3F:
      e = SWI_LoadMacrovisionKey (
          (unsigned int) (r->r[0]),
          (const char *) (r->r[1])
          );
      break;
    default:
      e = error_BAD_SWI;
      break;
  }
  return e;
}

/******	Module_EventV() ****************************************************

Purpose:	EventV handler
In:		Registers in/out, module private word
Out:		0 to intercept, 1 to pass on

***************************************************************************/

extern int Module_EventV(_kernel_swi_regs *r, void *pw)
{
  IGNORE(r);
  IGNORE(pw);
  return 1;
}
