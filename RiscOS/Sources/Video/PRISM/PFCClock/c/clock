/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Session management
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>

#include "PRISM/PRISM.h"

#include "clock.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* File scope Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/


/*****************************************************************************
* Functions
*****************************************************************************/

/*****************************************************************************
* clock_ListClients
*
* Enumerates all registrations, as per *PFCClockClients
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void clock_ListClients(void)
{
}

/*****************************************************************************
* clock_Register
*
* Implements SWI PFCClock_Register
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_Register(uint32_t flags, prism_id_t unwrap_id, stream_handle_t unwrap_handle, uint32_t *r_flags, stream_handle_t *r_clock_handle, void (**r_function_table)(void))
{
  return NULL;
}

/*****************************************************************************
* clock_Deregister
*
* Implements SWI PFCClock_Deregister
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_Deregister(uint32_t flags, stream_handle_t clock_handle)
{
  return NULL;
}

/*****************************************************************************
* clock_BeginSession
*
* Implements SWI PFCClock_BeginSession
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_BeginSession(uint32_t flags, stream_handle_t clock_handle)
{
  return NULL;
}

/*****************************************************************************
* clock_EndSession
*
* Implements SWI PFCClock_EndSession
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_EndSession(uint32_t flags, stream_handle_t clock_handle)
{
  return NULL;
}

/*****************************************************************************
* clock_StreamInfo
*
* Implements SWI PFCClock_StreamInfo
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_StreamInfo(uint32_t reason, stream_handle_t clock_handle, void **info)
{
  return NULL;
}

/*****************************************************************************
* clock_SpeedChange
*
* Implements SWI PFCClock_SpeedChange
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_SpeedChange(uint32_t flags, stream_handle_t clock_handle, int32_t new_speed)
{
  return NULL;
}

/*****************************************************************************
* clock_PCRNotify
*
* Implements SWI PFCClock_PCRNotify
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_PCRNotify(uint32_t flags, stream_handle_t clock_handle, mpeg_time_t *pcr)
{
  return NULL;
}

/*****************************************************************************
* clock_NPTMapping
*
* Implements SWI PFCClock_NPTMapping
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_NPTMapping(uint32_t flags, stream_handle_t clock_handle, mpeg_time_t *npt_offset, int32_t npt_scale)
{
  return NULL;
}

/*****************************************************************************
* clock_FreezeClock
*
* Implements SWI PFCClock_FreezeClock
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_FreezeClock(uint32_t flags, stream_handle_t clock_handle)
{
  return NULL;
}

/*****************************************************************************
* clock_AbandonAll
*
* Shuts down all sessions
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void clock_AbandonAll(void)
{
}

/*****************************************************************************
* clock_AbandonComponent
*
* Shuts down sessions related to a given PRISM component
*
* Assumptions
*  NONE
*
* Inputs
*  id: PRISM ID of the component to abandon
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void clock_AbandonComponent(prism_id_t id)
{
}

/*****************************************************************************
* clock_AbandonClient
*
* Shuts down sessions related to a given PRISM client
*
* Assumptions
*  NONE
*
* Inputs
*  handle: PRISM client handle of the client to abandon
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void clock_AbandonClient(stream_handle_t handle)
{
}

/*****************************************************************************
* clock_AbandonRelationship
*
* Shuts down sessions related to a specific PRISM component and remote
* stream handle
*
* Assumptions
*  NONE
*
* Inputs
*  id:     PRISM ID of the component
*  handle: PRISM stream handle for that component
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void clock_AbandonRelationship(prism_id_t id, stream_handle_t handle)
{
}


/*****************************************************************************
* END OF FILE
*****************************************************************************/
