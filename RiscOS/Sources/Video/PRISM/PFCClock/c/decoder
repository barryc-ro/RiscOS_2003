/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Decoder management
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>

#include "PRISM/PRISM.h"
#include "PRISM/PFCClock.h"
#include "DebugLib/DebugLib.h"

#include "clock.h"
#include "decoder.h"
#include "global.h"
#include "mess.h"
#include "time.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* File scope Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/
static bool CompareDecoders(const void *a, const void *b);


/*****************************************************************************
* Functions
*****************************************************************************/

/*****************************************************************************
* decoder_Register
*
* Implements SWI PFCClock_DecoderRegister
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *decoder_Register(uint32_t flags, prism_id_t decoder_id, stream_handle_t decoder_handle, stream_handle_t clock_handle, const prism_function_table_clock_to_decoder_t *restrict function_table, uint32_t latency,
                                  uint32_t *restrict r_flags, const prism_function_table_decoder_to_clock_t **restrict r_function_table)
{
  if (clock_handle.local_handle > global_ClockMax || global_ClockArray[clock_handle.local_handle] == 0)
  {
    return mess_MakeError(prism_ERROR_INVALID_PARAMETERS, 1, "DecoderRegister");
  }
  
  clock_t *clock = global_ClockArray[clock_handle.local_handle];
  
  llist_step_t step;
  llist_StartWalk(&step, &clock->decoder_list, false);
  while (step.data != NULL)
  {
    decoder_t *decoder = (decoder_t *) step.data;
    if (decoder->decoder_id == decoder_id && *(uint32_t *)&decoder->decoder_handle == *(uint32_t *)&decoder_handle)
    {
      llist_AbortWalk(&step);
      return mess_MakeError(pfcclock_ERROR_DECODER_ALREADY_REGISTERED, 0);
    }
    llist_NextStep(&step, false);
  }
  
  decoder_t decoder =
  {
    .preferred_sync_master = flags & 1,
    .decoder_id            = decoder_id,
    .decoder_handle        = decoder_handle,
    .function_table        = function_table,
    .latency               = latency
  };
  
  if (llist_AddSorted(&clock->decoder_list, &decoder, CompareDecoders))
  {
    *r_flags = 0;
    static bool my_table_initialised = false;
    static prism_function_table_decoder_to_clock_t my_table;
    if (!my_table_initialised++)
    {
      my_table = (prism_function_table_decoder_to_clock_t)
      {
        global_Veneers->decoder_Deregister,
        global_Veneers->decoder_BeginSession,
        global_Veneers->decoder_EndSession,
        global_Veneers->clock_StreamInfo,
        global_Veneers->decoder_SetEvent,
        global_Veneers->decoder_ClearEvent,
        global_Veneers->decoder_TSNotify
      };
    }
    *r_function_table = &my_table;
    return NULL;
  }
  else
  {
    return mess_MakeError(prism_ERROR_MEMORY_EXHAUSTED, 0);
  }
}

static bool CompareDecoders(const void *a, const void *b)
{
  int32_t decoder_id_diff = ((const decoder_t *) a)->decoder_id - ((const decoder_t *) b)->decoder_id;
  if (decoder_id_diff != 0)
  {
    return decoder_id_diff > 0;
  }
  else
  {
    return ((const decoder_t *) a)->decoder_handle.local_handle > ((const decoder_t *) b)->decoder_handle.local_handle;
  }
}

/*****************************************************************************
* decoder_Deregister
*
* Implements SWI PFCClock_DecoderDeregister
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *decoder_Deregister(uint32_t flags, prism_id_t decoder_id, stream_handle_t decoder_handle, stream_handle_t clock_handle)
{
  IGNORE(flags);
  
  if (clock_handle.local_handle > global_ClockMax || global_ClockArray[clock_handle.local_handle] == 0)
  {
    return mess_MakeError(prism_ERROR_INVALID_PARAMETERS, 1, "DecoderRegister");
  }
  
  clock_t *clock = global_ClockArray[clock_handle.local_handle];
  
  llist_step_t step;
  llist_StartWalk(&step, &clock->decoder_list, false);
  while (true)
  {
    if (step.data == NULL)
    {
      return mess_MakeError(pfcclock_ERROR_DECODER_NOT_REGISTERED, 0);
    }
    decoder_t *decoder = (decoder_t *) step.data;
    if (decoder->decoder_id == decoder_id && *(uint32_t *)&decoder->decoder_handle == *(uint32_t *)&decoder_handle)
    {
      break;
    }
    llist_NextStep(&step, false);
  }
  llist_Delink(&step);
  llist_AbortWalk(&step);
  
  return NULL;
}

/*****************************************************************************
* decoder_BeginSession
*
* Implements SWI PFCClock_DecoderBeginSession
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *decoder_BeginSession(uint32_t flags, prism_id_t decoder_id, stream_handle_t decoder_handle, stream_handle_t clock_handle, uint32_t pre_buffer, const mpeg_time_t *first_ts)
{
  if (clock_handle.local_handle > global_ClockMax || global_ClockArray[clock_handle.local_handle] == 0)
  {
    return mess_MakeError(prism_ERROR_INVALID_PARAMETERS, 1, "DecoderBeginSession");
  }
  
  clock_t *clock = global_ClockArray[clock_handle.local_handle];
  decoder_t *decoder;
  
  llist_step_t step;
  llist_StartWalk(&step, &clock->decoder_list, false);
  while (true)
  {
    if (step.data == NULL)
    {
      return mess_MakeError(pfcclock_ERROR_DECODER_NOT_REGISTERED, 0);
    }
    decoder = (decoder_t *) step.data;
    if (decoder->decoder_id == decoder_id && *(uint32_t *)&decoder->decoder_handle == *(uint32_t *)&decoder_handle)
    {
      break;
    }
    llist_NextStep(&step, false);
  }
  
  if (flags & 1)
  {
    decoder->pre_buffer = pre_buffer;
  }
  else
  {
    decoder->pre_buffer = clock->min_pre_buffer * (90000 / 1000);
  }
  uint32_t min_pre_buffer = (clock->jitter_buffer / 2 + decoder->latency) * (90000 / 1000);
  decoder->pre_buffer = MAX(decoder->pre_buffer, min_pre_buffer);
  decoder->pre_buffer += clock->jitter_buffer * (90000 / 1000 / 2);
  
  /* What we do next depends upon whether this decoder knows its first timestamp, whether */
  /* other decoders already registered knew their timestamp, and whether we're already committed */
  /* to a time frame because at least one of the decoders has completed its pre-buffering period */
  bool irqs_were_off = _kernel_irqs_disabled();
  if (!irqs_were_off) _kernel_irqs_off();
  if (first_ts == NULL)
  {
    if (clock->time_established)
    {
      if (!irqs_were_off) _kernel_irqs_on();
      int64_t stc = time_ReadMonotonicTime();
      stc = time_Transform(&stc, &clock->STC_ref_mono, &clock->STC_ref, clock->current_STC_speed);
      decoder->first_ts = stc + decoder->pre_buffer;
    }
    else
    {
      if (clock->tentative_time_established)
      {
        int64_t stc = time_ReadMonotonicTime();
        stc = time_Transform(&stc, &clock->STC_ref_mono, &clock->STC_ref, clock->current_STC_speed);
        decoder->first_ts = stc + decoder->pre_buffer;
        /* We don't actually want to start at a negative time, so adjust STC if this was negative */
        if (decoder->first_ts < 0)
        {
          /* The small -ve number must be subtracted from (ie absolute value added to) all references to STC values */
          clock->STC_ref = clock->STC_ref - decoder->first_ts;
          llist_step_t step;
          llist_StartWalk(&step, &clock->decoder_list, false); /* could simplify this since we know irqs are off */
          while (step.data != NULL)
          {
            decoder_t *other_decoder = (decoder_t *) step.data;
            if (other_decoder->session_active)
            {
              other_decoder->first_ts = other_decoder->first_ts - decoder->first_ts;
            }
            llist_NextStep(&step, false);
          }
          event_CorrectTimes(clock, - decoder->first_ts);
          decoder->first_ts = 0;
        }
      }
      else
      {
        clock->STC_ref_mono = time_ReadMonotonicTime();
        clock->STC_ref = - (int64_t) decoder->pre_buffer;
        decoder->first_ts = 0;
        clock->tentative_time_established = true;
      }
      if (!irqs_were_off) _kernel_irqs_on();
    }
  }
  else /* first_ts != NULL */
  {
    if (clock->time_locked || clock->time_established)
    {
      int64_t stc = time_ReadMonotonicTime();
      stc = time_Transform(&stc, &clock->STC_ref_mono, &clock->STC_ref, clock->current_STC_speed);
      decoder->first_ts = time_Extend(*first_ts, stc);
      /* If there is insufficient time before we are due to start, move the monotonic reference later to give us more time */
      int64_t time_remaining = decoder->first_ts - stc;
      if (time_remaining < decoder->pre_buffer)
      {
        clock->STC_ref_mono = clock->STC_ref_mono - time_remaining;
        clock->STC_ref_mono = clock->STC_ref_mono + decoder->pre_buffer;
      }
      if (clock->time_locked)
      {
        /* Someone's already aware of the time, so we'll have to broadcast a correction */
        decoder_NotifyClockCorrection(clock, false);
      }
    }
    else
    {
      if (clock->tentative_time_established)
      {
        int64_t monotime = time_ReadMonotonicTime();
        int64_t stc = time_Transform(&monotime, &clock->STC_ref_mono, &clock->STC_ref, clock->current_STC_speed);
        clock->STC_ref_mono = monotime;
        decoder->first_ts = time_Extend(*first_ts, stc);
        clock->STC_ref = decoder->first_ts - decoder->pre_buffer;
        /* We now have a true timestamp, so the tentative ones can be corrected */
        int64_t correction = clock->STC_ref - stc;
        llist_step_t step;
        llist_StartWalk(&step, &clock->decoder_list, false); /* could simplify this since we know irqs are off */
        while (step.data != NULL)
        {
          decoder_t *other_decoder = (decoder_t *) step.data;
          if (other_decoder->session_active)
          {
            other_decoder->first_ts = other_decoder->first_ts + correction;
          }
          llist_NextStep(&step, false);
        }
        event_CorrectTimes(clock, correction);
      }
      else
      {
        clock->STC_ref_mono = time_ReadMonotonicTime();
        ((uint32_t *) &decoder->first_ts)[0] = first_ts->word.lo;
        ((uint32_t *) &decoder->first_ts)[1] = first_ts->word.hi; /* no sign extension in this case */
        clock->STC_ref = decoder->first_ts - decoder->pre_buffer;
      }
      clock->time_established = true;
    }
    if (!irqs_were_off) _kernel_irqs_on();
  }
  
  /* If time hasn't already been locked (either by PCR receipt or because we are beginning our session late) */
  /* then we need to set or possibly hasten the callback to lock the time */
  if (!irqs_were_off) _kernel_irqs_off();
  if (!clock->time_locked)
  {
    if (clock->time_lock_pending)
    {
      if (decoder->first_ts < clock->time_lock_time)
      {
        event_Clear(clock, 0, 0, (uint32_t) clock, (_kernel_oserror *(*)(uint32_t, uint32_t)) clock_TimeLock, 0);
        clock->time_lock_time = decoder->first_ts;
        event_Set(clock, 0, 0, (uint32_t) clock, (_kernel_oserror *(*)(uint32_t, uint32_t)) clock_TimeLock, 0, 0, clock->time_lock_time);
      }
    }
    else
    {
      clock->time_lock_time = decoder->first_ts;
      event_Set(clock, 0, 0, (uint32_t) clock, (_kernel_oserror *(*)(uint32_t, uint32_t)) clock_TimeLock, 0, 0, clock->time_lock_time);
      clock->time_lock_pending = true;
    }
  }
  
  /* If we're not using PCRs, and this decoder is sync-capable, and either */
  /* (a) there's no existing sync master, or */
  /* (b) the sync master is only pending and this decoder is a better choice */
  /* then set or adjust the sync-start callback */
  if (clock->using_pcrs == false && decoder->function_table->ActivateSyncControl != NULL)
  {
    if (clock->sync_start_pending &&
        (decoder->first_ts < clock->sync_master->first_ts ||
         (decoder->preferred_sync_master && !clock->sync_master->preferred_sync_master)))
    {
      event_Clear(clock, 0, 0, (uint32_t) clock, (_kernel_oserror *(*)(uint32_t, uint32_t)) clock_SyncStart, 0);
      clock->sync_master = decoder;
      clock->sync_start_time = decoder->first_ts;
      event_Set(clock, 0, 0, (uint32_t) clock, (_kernel_oserror *(*)(uint32_t, uint32_t)) clock_SyncStart, 0, 0, clock->sync_start_time);
    }
    if (clock->sync_master == NULL)
    {
      clock->sync_master = decoder;
      clock->sync_start_time = decoder->first_ts;
      event_Set(clock, 0, 0, (uint32_t) clock, (_kernel_oserror *(*)(uint32_t, uint32_t)) clock_SyncStart, 0, 0, clock->sync_start_time);
      clock->sync_start_pending = true;
    }
  }
  if (!irqs_were_off) _kernel_irqs_on();
  
  
  
  decoder->session_active = true;
  
  llist_AbortWalk(&step);
  
  return NULL;
}

/*****************************************************************************
* decoder_EndSession
*
* Implements SWI PFCClock_DecoderEndSession
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *decoder_EndSession(uint32_t flags, prism_id_t decoder_id, stream_handle_t decoder_handle, stream_handle_t clock_handle)
{
  IGNORE(flags);
  
  if (clock_handle.local_handle > global_ClockMax || global_ClockArray[clock_handle.local_handle] == 0)
  {
    return mess_MakeError(prism_ERROR_INVALID_PARAMETERS, 1, "DecoderEndSession");
  }
  
  clock_t *clock = global_ClockArray[clock_handle.local_handle];
  decoder_t *decoder;
  
  llist_step_t step;
  llist_StartWalk(&step, &clock->decoder_list, false);
  while (true)
  {
    if (step.data == NULL)
    {
      return mess_MakeError(pfcclock_ERROR_DECODER_NOT_REGISTERED, 0);
    }
    decoder = (decoder_t *) step.data;
    if (decoder->decoder_id == decoder_id && *(uint32_t *)&decoder->decoder_handle == *(uint32_t *)&decoder_handle)
    {
      break;
    }
    llist_NextStep(&step, false);
  }
  
  decoder->session_active = false;
  decoder->sync_master = false;
  
  llist_AbortWalk(&step);
  
  return NULL;
}

/*****************************************************************************
* decoder_SetEvent
*
* Implements SWI PFCClock_DecoderSetEvent
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *decoder_SetEvent(uint32_t flags, prism_id_t decoder_id, uint32_t event_handle, stream_handle_t clock_handle, _kernel_oserror *(*event)(uint32_t, uint32_t), void *when)
{
  if (clock_handle.local_handle > global_ClockMax || global_ClockArray[clock_handle.local_handle] == 0)
  {
    return mess_MakeError(prism_ERROR_INVALID_PARAMETERS, 1, "DecoderRegister");
  }
  
  clock_t *clock = global_ClockArray[clock_handle.local_handle];
  decoder_t *decoder;
  
  llist_step_t step;
  llist_StartWalk(&step, &clock->decoder_list, false);
  while (true)
  {
    if (step.data == NULL)
    {
      return mess_MakeError(pfcclock_ERROR_DECODER_NOT_REGISTERED, 0);
    }
    decoder = (decoder_t *) step.data;
    if (decoder->decoder_id == decoder_id) /* actually, we should really check decoder_handle here to ensure that we have the right registration - but that means an API change :-( */
    {
      break;
    }
    llist_NextStep(&step, false);
  }
  
  int64_t event_time;
  if (flags & 1)
  {
    event_time = time_ReadMonotonicTime();
    event_time = time_Transform(&event_time, &clock->STC_ref_mono, &clock->STC_ref, clock->current_STC_speed);
    event_time = event_time + *(uint32_t *) when;
  }
  else
  {
    event_time = *(int64_t *) when;
  }
  if (event_time < decoder->first_ts)
  {
    event_time = decoder->first_ts;
  }
  
  event_Set(clock, flags, decoder_id, event_handle, event, when, decoder->latency * (90000ll / 1000ll), event_time);
  
  llist_AbortWalk(&step);
  
  return NULL;
}

/*****************************************************************************
* decoder_ClearEvent
*
* Implements SWI PFCClock_DecoderClearEvent
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *decoder_ClearEvent(uint32_t flags, prism_id_t decoder_id, uint32_t event_handle, stream_handle_t clock_handle, _kernel_oserror *(*event)(uint32_t, uint32_t), void *when)
{
  if (clock_handle.local_handle > global_ClockMax || global_ClockArray[clock_handle.local_handle] == 0)
  {
    return mess_MakeError(prism_ERROR_INVALID_PARAMETERS, 1, "DecoderRegister");
  }
  
  clock_t *clock = global_ClockArray[clock_handle.local_handle];
  
  event_Clear(clock, flags, decoder_id, event_handle, event, when);
  
  return NULL;
}

/*****************************************************************************
* decoder_TSNotify
*
* Implements SWI PFCClock_DecoderTSNotify
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *decoder_TSNotify(uint32_t flags, stream_handle_t clock_handle, const mpeg_time_t *pts)
{
  IGNORE(flags);
  
  if (clock_handle.local_handle > global_ClockMax || global_ClockArray[clock_handle.local_handle] == 0)
  {
    return mess_MakeError(prism_ERROR_INVALID_PARAMETERS, 1, "DecoderRegister");
  }
  
  clock_t *clock = global_ClockArray[clock_handle.local_handle];
  
  bool irqs_were_off = _kernel_irqs_disabled();
  if (!irqs_were_off) _kernel_irqs_off();
  
  int64_t monotime = time_ReadMonotonicTime();
  int64_t old_stc = time_Transform(&monotime, &clock->STC_ref_mono, &clock->STC_ref, clock->current_STC_speed);
  clock->STC_ref_mono = monotime;
  clock->STC_ref = time_Extend(*pts, old_stc);
  
  if (!irqs_were_off) _kernel_irqs_on();
  
  decoder_NotifyClockCorrection(clock, true);
  
  return NULL;
}

/*****************************************************************************
* decoder_LinkFreed
*
* Handles freeing up of a decoder_t link (see llist.c)
*
* Assumptions
*  NONE
*
* Inputs
*  link: pointer to decoder_t link that is being freed
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void decoder_LinkFreed(void *link)
{
  /* Currently, nothing needs freeing */
  IGNORE(link);
}

/*****************************************************************************
* decoder_NotifyClockCorrection
*
* Notifies decoders of a clock correction
*
* Assumptions
*  NONE
*
* Inputs
*  clock:         the clock struct to which the correction applies
*  notsyncmaster: if true, don't tell the sync master decoder (if any)
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void decoder_NotifyClockCorrection(clock_t *clock, bool notsyncmaster)
{
  llist_step_t step;
  llist_StartWalk(&step, &clock->decoder_list, false);
  while (step.data != NULL)
  {
    decoder_t *decoder = (decoder_t *) step.data;
    if (decoder->function_table->ClockCorrection != NULL)
    {
      if (notsyncmaster == false || decoder->sync_master == false)
      {
        decoder->function_table->ClockCorrection(0, decoder->decoder_handle);
      }
    }
    llist_NextStep(&step, false);
  }
}

/*****************************************************************************
* decoder_AbandonAll
*
* Shuts down all sessions
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void decoder_AbandonAll(void)
{
}

/*****************************************************************************
* decoder_AbandonComponent
*
* Shuts down sessions related to a given PRISM component
*
* Assumptions
*  NONE
*
* Inputs
*  id: PRISM ID of the component to abandon
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void decoder_AbandonComponent(prism_id_t id)
{
  IGNORE(id);
}

/*****************************************************************************
* decoder_AbandonClient
*
* Shuts down sessions related to a given PRISM client
*
* Assumptions
*  NONE
*
* Inputs
*  handle: PRISM client handle of the client to abandon
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void decoder_AbandonClient(stream_handle_t handle)
{
  IGNORE(handle);
}

/*****************************************************************************
* decoder_AbandonRelationship
*
* Shuts down sessions related to a specific PRISM component and remote
* stream handle
*
* Assumptions
*  NONE
*
* Inputs
*  id:     PRISM ID of the component
*  handle: PRISM stream handle for that component
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void decoder_AbandonRelationship(prism_id_t id, stream_handle_t handle)
{
  IGNORE(id);
  IGNORE(handle);
}


/*****************************************************************************
* END OF FILE
*****************************************************************************/
