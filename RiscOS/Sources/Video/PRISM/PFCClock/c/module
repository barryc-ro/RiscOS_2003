/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Main relocatable module entry points
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <stdbool.h>
#include "kernel.h"
#include "swis.h"

#include "Global/NewErrors.h"
#include "Global/Services.h"
#include "DebugLib/DebugLib.h"

#include "VersionNum"
#include "modhdr.h"
#include "PRISM/PRISM.h"
#include "PRISM/PFCClock.h"

#include "clock.h"
#include "decoder.h"
#include "global.h"
#include "mess.h"
#include "module.h"
#include "resmess.h"



/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* File scope Global variables
*****************************************************************************/
static bool static_RegisteredWithPRISM = false;


/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/
static _kernel_oserror *RegisterWithPRISM(void);
static _kernel_oserror *DeregisterWithPRISM(void);


/*****************************************************************************
* Functions
*****************************************************************************/

/*****************************************************************************
* module_Init
*
* Initialisation code
*
* Assumptions
*  NONE
*
* Inputs
*  cmd_tail:    points to the string of arguments with which the module is invoked
*               (may be "", and is control-terminated, not zero terminated)
*  podule_base: 0              => first invocation, not from a podule
*               1 - 0x02FFFFFF => reincarnation number
*               >0x03000000    => first invocation, from a podule based at this address
*  pw:          the 'R12' value established by module initialisation
*
* Outputs
*  NONE
*
* Returns
*  NULL if initialisation succeeds; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *module_Init(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e = NULL;
#ifndef ROM_MODULE
  bool FileRegistered = false;
#endif
  bool MessagesOpen = false;
  bool ClockInitialised = false;
  bool CallbackSet = false;
  IGNORE(cmd_tail);
  IGNORE(podule_base);
  
  debug_initialise("PFCClock", "null:", "");
  debug_atexit();
  debug_set_taskname_prefix(false);
  debug_set_area_level_prefix(true);
  debug_set_area_pad_limit(0);
  debug_set_device(DADEBUG_OUTPUT);
  debug_set_raw_device(NULL_OUTPUT);
  debug_set_trace_device(NULL_OUTPUT);
  
  global_PrivateWord = pw;
  
  if (!e)
  {
    
#ifndef ROM_MODULE
    e = _swix(ResourceFS_RegisterFiles, _IN(0),
              resmess_ResourcesFiles());
  }
  if (!e)
  {
    FileRegistered = true;
#endif
    
    e = _swix(MessageTrans_OpenFile, _INR(0,2),
              &global_MessageFD,
              Module_MessagesFile,
              0);
  }
  if (!e)
  {
    MessagesOpen = true;
    
    e = clock_Init();
  }
  if (!e)
  {
    ClockInitialised = true;
    
    e = RegisterWithPRISM();
  }
  if (!e)
  {
    
    e = _swix(OS_AddCallBack, _INR(0,1),
              module_callback_from_init,
              global_PrivateWord);
  }
  if (!e)
  {
    CallbackSet = true;
    
  }
  if (e && CallbackSet) _swix(OS_RemoveCallBack, _INR(0,1),
                              module_callback_from_init,
                              global_PrivateWord);
  if (e && static_RegisteredWithPRISM) DeregisterWithPRISM();
  if (e && ClockInitialised) clock_Final();
  if (e && MessagesOpen) _swix(MessageTrans_CloseFile, _IN(0),
                               &global_MessageFD);
#ifndef ROM_MODULE
  if (e && FileRegistered) _swix(ResourceFS_DeregisterFiles, _IN(0),
                                 resmess_ResourcesFiles());
#endif
  return e;
}

/*****************************************************************************
* module_CallbackFromInit
*
* Callback handler for callback set in module initialisation
*
* Assumptions
*  NONE
*
* Inputs
*  r:          register block
*  pw:         the 'R12' value
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *module_CallbackFromInit(_kernel_swi_regs *r, void *pw)
{
  IGNORE(r);
  IGNORE(pw);
  _swix(OS_ServiceCall, _INR(0,4),
        PRISMModuleStarted,
        Service_PRISM_Core,
        0,
        PFCClock_PRISMID,
        Module_Version);
  return NULL;
}

/*****************************************************************************
* module_Final
*
* Finalisation code
*
* Assumptions
*  NONE
*
* Inputs
*  fatal, podule, pw: the values of R10, R11 and R12 (respectively) on entry
*                     to the finalisation code
*
* Outputs
*  NONE
*
* Returns
*  NULL if finalisation succeeds; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *module_Final(int fatal, int podule, void *pw)
{
  _kernel_oserror *e = NULL;
  IGNORE(fatal);
  IGNORE(podule);
  IGNORE(pw);
  
  if (!e)
  {
    _swix(OS_RemoveCallBack, _INR(0,1),
          module_callback_from_init,
          global_PrivateWord);
    _swix(OS_ServiceCall, _INR(0,4),
          PRISMModuleDying,
          Service_PRISM_Core,
          0,
          PFCClock_PRISMID,
          Module_Version);
    if (static_RegisteredWithPRISM)
    {
      DeregisterWithPRISM();
    }
    clock_Final();
    _swix(MessageTrans_CloseFile, _IN(0),
          &global_MessageFD);
#ifndef ROM_MODULE
    _swix(ResourceFS_DeregisterFiles, _IN(0),
          resmess_ResourcesFiles());
#endif
  }
  return e;
}

/*****************************************************************************
* module_Service
*
* Service call handler
*
* Assumptions
*  NONE
*
* Inputs
*  service_number: service call number
*  r:              pointer to registers on entry
*  pw:             the 'R12' value
*
* Outputs
*  r:              updated or not, as appropriate
*
* Returns
*  NOTHING
*****************************************************************************/
void module_Service(int service_number, _kernel_swi_regs *r, void *pw)
{
  IGNORE(pw);
  switch (service_number)
  {
    case Service_MessageFileClosed:
      /* We might want to use our message file descriptor from the background, */
      /* so re-open message file now, when filing system re-entrancy isn't an issue */
      _swix(MessageTrans_OpenFile, _INR(0,2),
            &global_MessageFD,
            Module_MessagesFile,
            0);
      break;
      
    case Service_PRISM_Core:
      switch (r->r[0])
      {
        case PRISMModuleStarted:
          if (r->r[3] == PRISM_PRISMID)
          {
            RegisterWithPRISM();
          }
          break;
        case PRISMModuleDying:
          if (r->r[3] == PRISM_PRISMID)
          {
            static_RegisteredWithPRISM = false;
          }
          decoder_AbandonComponent((prism_id_t) r->r[3]);
          clock_AbandonComponent((prism_id_t) r->r[3]);
          break;
        case PRISMSessionAborting:
          if (r->r[4] == 0)
          {
            decoder_AbandonComponent((prism_id_t) r->r[3]);
            clock_AbandonComponent((prism_id_t) r->r[3]);
          }
          else if (((stream_handle_t *) &r->r[4])->local_handle == 0)
          {
            decoder_AbandonClient(*(stream_handle_t *) &r->r[4]);
            clock_AbandonClient(*(stream_handle_t *) &r->r[4]);
          }
          else
          {
            decoder_AbandonRelationship((prism_id_t) r->r[3], *(stream_handle_t *) &r->r[4]);
            clock_AbandonRelationship((prism_id_t) r->r[3], *(stream_handle_t *) &r->r[4]);
          }
          break;
        case PRISMCleanShutdown:
        case PRISMAbortiveShutdown:
          decoder_AbandonAll();
          clock_AbandonAll();
          break;
      }
      break;
      
    default:
      assert(false /* unserviced service call */);
      break;
  }
  return;
}

/*****************************************************************************
* module_Commands
*
* Command handler
*
* Assumptions
*  NONE
*
* Inputs
*  arg_string: command tail
*  argc:       number of parameters
*  cmd_no:     index into cmhg's list of commands
*  pw:         the 'R12' value
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *module_Commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
  _kernel_oserror *e = NULL;
  uint32_t verbose;
  IGNORE(argc);
  IGNORE(pw);
  RETURN_ERROR(_swix(OS_ReadArgs, _INR(0,3),
                 "verbose/S",
                 arg_string,
                 &verbose,
                 sizeof verbose));
  switch (cmd_no)
  {
    case CMD_PFCClockClients:
      e = clock_ListClients(verbose);
      break;
      
    default:
      assert(false /* unserviced star command */);
      break;
  }
  return e;
}

/*****************************************************************************
* module_SWI
*
* SWI handler
*
* Assumptions
*  NONE
*
* Inputs
*  swi_offset: offset into SWI chunk
*  r:          register block
*  pw:         the 'R12' value
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *module_SWI(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *e = NULL;
  IGNORE(pw);
  switch (swi_offset)
  {
    case PFCClock_Register - PFCClock_00:
      e = clock_Register((uint32_t) r->r[0],
                         (prism_id_t) r->r[1],
                         *(stream_handle_t *) (r->r+2),
                         (uint32_t *restrict) (r->r+0),
                         (stream_handle_t *restrict) (r->r+2),
                         (const prism_function_table_unwrap_to_clock_t **restrict) (r->r+3));
      if (!e)
      {
        r->r[1] = PFCClock_PRISMID;
      }
      break;
      
    case PFCClock_Deregister - PFCClock_00:
      e = clock_Deregister((uint32_t) r->r[0],
                           *(stream_handle_t *) (r->r+1));
      break;
      
    case PFCClock_BeginSession - PFCClock_00:
      e = clock_BeginSession((uint32_t) r->r[0],
                             *(stream_handle_t *) (r->r+1));
      break;
      
    case PFCClock_EndSession - PFCClock_00:
      e = clock_EndSession((uint32_t) r->r[0],
                           *(stream_handle_t *) (r->r+1));
      break;
      
    case PFCClock_StreamInfo - PFCClock_00:
      e = clock_StreamInfo((uint32_t) r->r[0],
                           *(stream_handle_t *) (r->r+1),
                           (void **) r->r[2]);
      break;
      
    case PFCClock_SpeedChange - PFCClock_00:
      e = clock_SpeedChange((uint32_t) r->r[0],
                            *(stream_handle_t *) (r->r+1),
                            (int32_t) r->r[2]);
      break;
      
    case PFCClock_PCRNotify - PFCClock_00:
      e = clock_PCRNotify((uint32_t) r->r[0],
                          *(stream_handle_t *) (r->r+1),
                          (mpeg_time_t *) r->r[2]);
      break;
      
    case PFCClock_NPTMapping - PFCClock_00:
      e = clock_NPTMapping((uint32_t) r->r[0],
                           *(stream_handle_t *) (r->r+1),
                           (mpeg_time_t *) r->r[2],
                           (int32_t) r->r[3]);
      break;
      
    case PFCClock_FreezeClock - PFCClock_00:
      e = clock_FreezeClock((uint32_t) r->r[0],
                            *(stream_handle_t *) (r->r+1));
      break;
      
    case PFCClock_DecoderRegister - PFCClock_00:
    {
      int original_r3 = r->r[3];
      e = decoder_Register((uint32_t) r->r[0],
                           (prism_id_t) r->r[1],
                           *(stream_handle_t *) (r->r+2),
                           *(stream_handle_t *) (r->r+3),
                           (const prism_function_table_clock_to_decoder_t *restrict) r->r[4],
                           (uint32_t) r->r[5],
                           (uint32_t *) (r->r+0),
                           (const prism_function_table_decoder_to_clock_t **restrict) (r->r+3));
      if (!e)
      {
        r->r[1] = PFCClock_PRISMID;
        r->r[2] = original_r3;
      }
      break;
    }
      
    case PFCClock_DecoderDeregister - PFCClock_00:
      e = decoder_Deregister((uint32_t) r->r[0],
                             (prism_id_t) r->r[1],
                             *(stream_handle_t *) (r->r+2),
                             *(stream_handle_t *) (r->r+3));
      break;
      
    case PFCClock_DecoderBeginSession - PFCClock_00:
      e = decoder_BeginSession((uint32_t) r->r[0],
                               (prism_id_t) r->r[1],
                               *(stream_handle_t *) (r->r+2),
                               *(stream_handle_t *) (r->r+3),
                               (uint32_t) r->r[4]);
      break;
      
    case PFCClock_DecoderEndSession - PFCClock_00:
      e = decoder_EndSession((uint32_t) r->r[0],
                             (prism_id_t) r->r[1],
                             *(stream_handle_t *) (r->r+2),
                             *(stream_handle_t *) (r->r+3));
      break;
      
    case PFCClock_DecoderSetEvent - PFCClock_00:
      e = decoder_SetEvent((uint32_t) r->r[0],
                           (prism_id_t) r->r[1],
                           (uint32_t) r->r[2],
                           *(stream_handle_t *) (r->r+3),
                           (_kernel_oserror *(*)(uint32_t, uint32_t)) r->r[4],
                           (void *) r->r[5]);
      break;
      
    case PFCClock_DecoderClearEvent - PFCClock_00:
      e = decoder_ClearEvent((uint32_t) r->r[0],
                             (prism_id_t) r->r[1],
                             (uint32_t) r->r[2],
                             *(stream_handle_t *) (r->r+3),
                             (_kernel_oserror *(*)(uint32_t, uint32_t)) r->r[4],
                             (void *) r->r[5]);
      break;
      
    case PFCClock_DecoderPTSNotify - PFCClock_00:
      e = decoder_PTSNotify((uint32_t) r->r[0],
                            *(stream_handle_t *) (r->r+1),
                            (mpeg_time_t *) r->r[2]);
      break;
      
    default:
      e = error_BAD_SWI;
      break;
  }
  return e;
}

/*****************************************************************************
* RegisterWithPRISM
*
* Tries to register with PRISM
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
static _kernel_oserror *RegisterWithPRISM(void)
{
  if (static_RegisteredWithPRISM)
  {
    return NULL;
  }
  RETURN_ERROR(_swix(PRISM_ComponentRegister, _INR(0,1),
                     0,
                     PFCClock_PRISMID));
  static const struct
  {
    void (*function)(void);
    uint32_t stack_words;
  }
  function_descriptor_table[] =
  {
    PRISM_FUNCTION_DESCRIPTOR(module_ComponentInfo), /*  0 */
    PRISM_FUNCTION_DESCRIPTOR(clock_Deregister),     /*  1 */
    PRISM_FUNCTION_DESCRIPTOR(clock_BeginSession),   /*  2 */
    PRISM_FUNCTION_DESCRIPTOR(clock_EndSession),     /*  3 */
    PRISM_FUNCTION_DESCRIPTOR(clock_StreamInfo),     /*  4 */
    PRISM_FUNCTION_DESCRIPTOR(clock_SpeedChange),    /*  5 */
    PRISM_FUNCTION_DESCRIPTOR(clock_PCRNotify),      /*  6 */
    PRISM_FUNCTION_DESCRIPTOR(clock_NPTMapping),     /*  7 */
    PRISM_FUNCTION_DESCRIPTOR(clock_FreezeClock),    /*  8 */
    PRISM_FUNCTION_DESCRIPTOR(decoder_Deregister),   /*  9 */
    PRISM_FUNCTION_DESCRIPTOR(decoder_BeginSession), /* 10 */
    PRISM_FUNCTION_DESCRIPTOR(decoder_EndSession),   /* 11 */
    PRISM_FUNCTION_DESCRIPTOR(decoder_SetEvent),     /* 12 */
    PRISM_FUNCTION_DESCRIPTOR(decoder_ClearEvent),   /* 13 */
    PRISM_FUNCTION_DESCRIPTOR(decoder_PTSNotify)     /* 14 */
  };
  RETURN_ERROR(_swix(PRISM_CreateVeneers, _INR(0,4)|_OUT(1),
                     1,
                     function_descriptor_table,
                     sizeof(function_descriptor_table) / sizeof(*function_descriptor_table),
                     global_PrivateWord,
                     PFCClock_PRISMID,
                     &global_Veneers));
  RETURN_ERROR(_swix(PRISM_ComponentNotify, _INR(0,3),
                     0,
                     PFCClock_PRISMID,
                     PRISM_Notify_DeclareInformation,
                     global_Veneers->module_ComponentInfo));
  static_RegisteredWithPRISM = true;
  return NULL;
}

/*****************************************************************************
* RegisterWithPRISM
*
* Tries to register with PRISM
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
static _kernel_oserror *DeregisterWithPRISM(void)
{
  if (!static_RegisteredWithPRISM)
  {
    return NULL;
  }
  RETURN_ERROR(_swix(PRISM_FreeVeneers, _INR(0,2),
                     0,
                     global_Veneers,
                     PFCClock_PRISMID));
  RETURN_ERROR(_swix(PRISM_ComponentDeregister, _INR(0,1),
                     0,
                     PFCClock_PRISMID));
  static_RegisteredWithPRISM = false;
  return NULL;
}

/*****************************************************************************
* module_ComponentInfo
*
* Returns information about the PRISM component
*
* Assumptions
*  NONE
*
* Inputs
*  tag:    information index value
*
* Outputs
*  result: value associated with tag
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *module_ComponentInfo(uint32_t tag, uintptr_t *result)
{
  switch (tag)
  {
    case 0:
    {
      const char *string;
      RETURN_ERROR(mess_LookUpDirect("V00", &string, NULL));
      * (const char **) result = string;
      return NULL;
    }
    
    case 1:
    {
      *result = 0; /* no meaningful version for us to report */
      return NULL;
    }
    
    case 2:
    {
      * (const char **) result = Module_ComponentName " " Module_HelpVersion;
      return NULL;
    }
    
    case 3:
    {
      *result = Module_Version;
      return NULL;
    }
    
    case 4:
    {
      static char string[80];
      if (string[0] == 0)
      {
        char year[5];
        sscanf(Module_Date, "%*u %*s %4s", year);
        RETURN_ERROR(mess_LookUpBuffer("C00", string, sizeof string, 1, year));
      }
      * (const char **) result = string;
      return NULL;
    }
    
    case 5:
    {
      static char string[80];
      if (string[0] == 0)
      {
        char year[5];
        sscanf(Module_Date, "%*u %*s %4s", year);
        RETURN_ERROR(mess_LookUpBuffer("S00", string, sizeof string, 2, Module_HelpVersion, year));
      }
      * (const char **) result = string;
      return NULL;
    }
    
    default:
    {
      return mess_MakeError(prism_ERROR_INVALID_PARAMETERS, 1, "ComponentInfo");
    }
  }
}


/*****************************************************************************
* END OF FILE
*****************************************************************************/
