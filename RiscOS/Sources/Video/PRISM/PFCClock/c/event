/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Event management
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdint.h>
#include "kernel.h"
#include "swis.h"

#include "Global/RISCOS.h"
#include "PRISM/PRISM.h"

#include "clock.h"
#include "event.h"
#include "global.h"
#include "time.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/


/*****************************************************************************
* Functions
*****************************************************************************/

/*****************************************************************************
* event_Set
*
* Sets an event
*
* Assumptions
*  NONE
*
* Inputs
*  clock:        pointer to clock struct for the time stream to which the event belongs
*  flags:        as passed to PFCClock_DecoderSetEvent (currently used only for validating event clearing)
*  decoder_id:   PRISM ID of decoder
*  event_handle: decoder's handle for this event
*  event:        address of routine to call
*  when:         used only for validating event clearing
*  pre_emption:  amount to add on to monotonic time before conversion to STC, derived from decoder latency
*  time:         STC at which to call routine
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void event_Set(clock_t *clock, uint32_t flags, prism_id_t decoder_id, uint32_t event_handle, _kernel_oserror *(*event)(uint32_t, uint32_t), void *when, int64_t pre_emption, int64_t time)
{
  clock_event_t *block = malloc(sizeof(clock_event_t));
  if (block != NULL)
  {
    *block = (clock_event_t)
    {
      .flags = flags,
      .decoder_id = decoder_id,
      .event_handle = event_handle,
      .event = event,
      .when = when,
      .pre_emption = pre_emption,
      .time = time
    };
    /* Atomically add struct to linked list */
    bool irqs_were_off = _kernel_irqs_disabled();
    if (!irqs_were_off) _kernel_irqs_off();
    clock_event_t *prev = NULL;
    clock_event_t *next = clock->event_head;
    bool first_event = (next == NULL);
    while (true)
    {
      if (next == NULL || next->time > time || (clock->current_STC_speed < 0 && next->time == time))
      /* this isn't quite right - if we're paused in reverse, simultaneous events will be called in reverse registration order */
      {
        block->prev = prev;
        if (prev == NULL)
        {
          clock->event_head = block;
        }
        else
        {
          prev->next = block;
        }
        block->next = next;
        if (next == NULL)
        {
          clock->event_tail = block;
        }
        else
        {
          next->prev = block;
        }
        break;
      }
      prev = next;
      next = next->next;
    }
    if (first_event)
    {
      clock->tickerv_threaded = false;
      _swix(OS_Claim, _INR(0,2),
            TickerV,
            global_Veneers->event_Tick,
            clock);
    }
    if (!irqs_were_off) _kernel_irqs_on();
  }
}

/*****************************************************************************
* event_Clear
*
* Clears an event
*
* Assumptions
*  NONE
*
* Inputs
*  clock:        pointer to clock struct for the time stream to which the event belongs
*  flags:        as passed to PFCClock_DecoderClearEvent (currently used only for validation)
*  decoder_id:   PRISM ID of decoder
*  event_handle: decoder's handle for this event
*  event:        address of routine to call
*  when:         used only for validation
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void event_Clear(clock_t *clock, uint32_t flags, prism_id_t decoder_id, uint32_t event_handle, _kernel_oserror *(*event)(uint32_t, uint32_t), void *when)
{
  bool irqs_were_off = _kernel_irqs_disabled();
  if (!irqs_were_off) _kernel_irqs_off();
  clock_event_t *prev = NULL;
  clock_event_t *ptr = clock->event_head;
  while (ptr != NULL)
  {
    if (ptr->flags == flags && ptr->decoder_id == decoder_id && ptr->event_handle == event_handle && ptr->event == event && ptr->when == when)
    {
      if (prev == NULL)
      {
        clock->event_head = ptr->next;
      }
      else
      {
        prev->next = ptr->next;
      }
      if (ptr->next == NULL)
      {
        clock->event_tail = prev;
      }
      else
      {
        ptr->next->prev = prev;
      }
      free(ptr);
      if (clock->event_head == NULL)
      {
        _swix(OS_Release, _INR(0,2),
              TickerV,
              global_Veneers->event_Tick,
              clock);
      }
      break;
    }
    prev = ptr;
    ptr = ptr->next;
  }
  if (!irqs_were_off) _kernel_irqs_on();
}

/*****************************************************************************
* event_ClearDecoder
*
* Clears all events for a particular clock/decoder combination
*
* Assumptions
*  NONE
*
* Inputs
*  clock:      pointer to clock struct
*  decoder_id: PRISM ID of decoder
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void event_ClearDecoder(clock_t *clock, prism_id_t decoder_id)
{
  if (clock->event_head == NULL)
  {
    return;
  }
  bool irqs_were_off = _kernel_irqs_disabled();
  if (!irqs_were_off) _kernel_irqs_off();
  clock_event_t *prev = NULL;
  clock_event_t *ptr = clock->event_head;
  while (ptr != NULL)
  {
    clock_event_t *next = ptr->next;
    if (ptr->decoder_id == decoder_id)
    {
      if (prev == NULL)
      {
        clock->event_head = next;
      }
      else
      {
        prev->next = next;
      }
      if (next == NULL)
      {
        clock->event_tail = prev;
      }
      else
      {
        next->prev = prev;
      }
      free(ptr);
    }
    else
    {
      prev = ptr;
    }
    ptr = next;
  }
  if (clock->event_head == NULL)
  {
    _swix(OS_Release, _INR(0,2),
          TickerV,
          global_Veneers->event_Tick,
          clock);
  }
  if (!irqs_were_off) _kernel_irqs_on();
}

/*****************************************************************************
* event_ClearAll
*
* Clears all events for a particular clock
*
* Assumptions
*  NONE
*
* Inputs
*  clock: pointer to clock struct
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void event_ClearAll(clock_t *clock)
{
  if (clock->event_head == NULL)
  {
    return;
  }
  bool irqs_were_off = _kernel_irqs_disabled();
  if (!irqs_were_off) _kernel_irqs_off();
  clock_event_t *ptr = clock->event_head;
  while (ptr != NULL)
  {
    clock_event_t *next = ptr->next;
    free(ptr);
    ptr = next;
  }
  clock->event_head = clock->event_tail = NULL;
  _swix(OS_Release, _INR(0,2),
        TickerV,
        global_Veneers->event_Tick,
        clock);
  if (!irqs_were_off) _kernel_irqs_on();
}

/*****************************************************************************
* event_CorrectTimes
*
* Modifies all times to compensate for a STC correction
*
* Assumptions
*  IRQs are off
*
* Inputs
*  clock:      pointer to clock struct
*  correction: adjustment to make
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void event_CorrectTimes(clock_t *clock, int64_t correction)
{
  clock_event_t *event;
  for (event = clock->event_head; event != NULL; event = event->next)
  {
    event->time = event->time + correction;
  }
}

/*****************************************************************************
* event_Tick
*
* TickerV routine
*
* Assumptions
*  IRQs are disabled
*
* Inputs
*  clock: pointer to relevant clock struct
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
_kernel_oserror *event_Tick(clock_t *clock)
{
  if (clock->tickerv_threaded == true)
  {
    return NULL;
  }
  if (clock->current_STC_speed == 0)
  {
    return NULL;
  }
  clock->tickerv_threaded = true;
  
  /* This algorithm isn't quite right - things might be called out of order. */
  /* But it'll have to do for now. */
  
  bool reverse = (clock->current_STC_speed < 0);
  int64_t monotime = time_ReadMonotonicTime();
//  int64_t actual_stc = time_Transform(&monotime, &clock->STC_ref_mono, &clock->STC_ref, clock->current_STC_speed);
  clock_event_t *prev = NULL;
  clock_event_t *event;
  clock_event_t *next = NULL;
  if (reverse)
  {
    next = NULL;
    event = clock->event_tail;
  }
  else
  {
    prev = NULL;
    event = clock->event_head;
  }
  for (; event != NULL; event = reverse ? prev : next)
  {
    if (reverse)
    {
      prev = event->prev;
    }
    else
    {
      next = event->next;
    }
    bool triggered = false;
//    if (reverse ^ (event->time < actual_stc))
//    {
//      /* We're already at the specified time, no need to worry about pre-emption */
//      triggered = true;
//    }
//    else
    {
      int64_t future_stc = monotime + event->pre_emption;
      future_stc = time_Transform(&future_stc, &clock->STC_ref_mono, &clock->STC_ref, clock->current_STC_speed);
      if (reverse ^ (event->time < future_stc))
      {
        triggered = true;
      }
    }
    if (triggered)
    {
      /* Delink first, in case they enable interrupts! */
      if (prev == NULL)
      {
        clock->event_head = next;
      }
      else
      {
        prev->next = next;
      }
      if (next == NULL)
      {
        clock->event_tail = prev;
      }
      else
      {
        next->prev = prev;
      }
      /* Get off TickerV if no events left */
      if (clock->event_head == NULL)
      {
        _swix(OS_Release, _INR(0,2),
              TickerV,
              global_Veneers->event_Tick,
              clock);
      }
      /* clock_TimeLock() must be called before any other event, in case they want to read the time */
      if (clock->time_lock_pending && event->event != (_kernel_oserror *(*)(uint32_t, uint32_t)) clock_TimeLock)
      {
        clock_TimeLock(0, clock);
      }
      /* Dispatch and free event */
      event->event(0, event->event_handle);
      free(event);
    }
    else
    {
      if (reverse)
      {
        next = event;
      }
      else
      {
        prev = event;
      }
    }
  }
  
  clock->tickerv_threaded = false;
  return NULL;
}


/*****************************************************************************
* END OF FILE
*****************************************************************************/
