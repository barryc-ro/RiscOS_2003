#if !defined(PFCCLOCK_DECODER_H) /* file used if not already included */
#define PFCCLOCK_DECODER_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Decoder management
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdint.h>
#include "kernel.h"

#include "PRISM/PRISM.h"
#include "PRISM/PFCClock.h"
#include "MPEG/mpegtime.h"

#include "int64.h"
#include "llist.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/
typedef struct
{
  unsigned preferred_sync_master: 1;
  unsigned session_active: 1;
  unsigned sync_master: 1;
  prism_id_t decoder_id;
  stream_handle_t decoder_handle;
  const prism_function_table_clock_to_decoder_t *function_table;
  uint32_t latency;
  uint32_t pre_buffer;
  int64_t first_ts;
} decoder_t;


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* decoder_Register
*
* Implements SWI PFCClock_DecoderRegister
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern _kernel_oserror *decoder_Register(uint32_t flags, prism_id_t decoder_id, stream_handle_t decoder_handle, stream_handle_t clock_handle, const prism_function_table_clock_to_decoder_t *restrict function_table, uint32_t latency,
                                         uint32_t *restrict r_flags, const prism_function_table_decoder_to_clock_t **restrict r_function_table);

/*****************************************************************************
* decoder_Deregister
*
* Implements SWI PFCClock_DecoderDeregister
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_4(_kernel_oserror *, decoder_Deregister, uint32_t /*flags*/, prism_id_t /*decoder_id*/, stream_handle_t /*decoder_handle*/, stream_handle_t /*clock_handle*/)

/*****************************************************************************
* decoder_BeginSession
*
* Implements SWI PFCClock_DecoderBeginSession
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_6(_kernel_oserror *, decoder_BeginSession, uint32_t /*flags*/, prism_id_t /*decoder_id*/, stream_handle_t /*decoder_handle*/, stream_handle_t /*clock_handle*/, uint32_t /*pre_buffer*/, const mpeg_time_t */*first_ts*/)

/*****************************************************************************
* decoder_EndSession
*
* Implements SWI PFCClock_DecoderEndSession
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_4(_kernel_oserror *, decoder_EndSession, uint32_t /*flags*/, prism_id_t /*decoder_id*/, stream_handle_t /*decoder_handle*/, stream_handle_t /*clock_handle*/)

/*****************************************************************************
* decoder_SetEvent
*
* Implements SWI PFCClock_DecoderSetEvent
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_6(_kernel_oserror *, decoder_SetEvent, uint32_t /*flags*/, prism_id_t /*decoder_id*/, uint32_t /*event_handle*/, stream_handle_t /*clock_handle*/, _kernel_oserror *(*/*event*/)(uint32_t, uint32_t), void */*when*/)

/*****************************************************************************
* decoder_ClearEvent
*
* Implements SWI PFCClock_DecoderClearEvent
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_6(_kernel_oserror *, decoder_ClearEvent, uint32_t /*flags*/, prism_id_t /*decoder_id*/, uint32_t /*event_handle*/, stream_handle_t /*clock_handle*/, _kernel_oserror *(*/*event*/)(uint32_t, uint32_t), void */*when*/)

/*****************************************************************************
* decoder_TSNotify
*
* Implements SWI PFCClock_DecoderTSNotify
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_3(_kernel_oserror *, decoder_TSNotify, uint32_t /*flags*/, stream_handle_t /*clock_handle*/, const mpeg_time_t */*pts*/)

/*****************************************************************************
* decoder_AbandonAll
*
* Shuts down all sessions
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void decoder_AbandonAll(void);

/*****************************************************************************
* decoder_LinkFreed
*
* Handles freeing up of a decoder_t link (see llist.c)
*
* Assumptions
*  NONE
*
* Inputs
*  link: pointer to decoder_t link that is being freed
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void decoder_LinkFreed(void *link);

/*****************************************************************************
* decoder_NotifyClockCorrection
*
* Notifies decoders of a clock correction
*
* Assumptions
*  NONE
*
* Inputs
*  clock:         the clock struct to which the correction applies
*  notsyncmaster: if true, don't tell the sync master decoder (if any)
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void decoder_NotifyClockCorrection(clock_t *clock, bool notsyncmaster);

/*****************************************************************************
* decoder_AbandonComponent
*
* Shuts down sessions related to a given PRISM component
*
* Assumptions
*  NONE
*
* Inputs
*  id: PRISM ID of the component to abandon
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void decoder_AbandonComponent(prism_id_t id);

/*****************************************************************************
* decoder_AbandonClient
*
* Shuts down sessions related to a given PRISM client
*
* Assumptions
*  NONE
*
* Inputs
*  handle: PRISM client handle of the client to abandon
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void decoder_AbandonClient(stream_handle_t handle);

/*****************************************************************************
* decoder_AbandonRelationship
*
* Shuts down sessions related to a specific PRISM component and remote
* stream handle
*
* Assumptions
*  NONE
*
* Inputs
*  id:     PRISM ID of the component
*  handle: PRISM stream handle for that component
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void decoder_AbandonRelationship(prism_id_t id, stream_handle_t handle);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
