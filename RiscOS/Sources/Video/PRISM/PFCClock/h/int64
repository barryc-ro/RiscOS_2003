#if !defined(PFCCLOCK_INT64_H) /* file used if not already included */
#define PFCCLOCK_INT64_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: 64-bit type
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdbool.h>
#include <stdint.h>


/*****************************************************************************
* MACROS
*****************************************************************************/

#ifdef INT64_MAX

#define NEG64(x) (-(x))
#define ADD64(x,y) ((x)+(y))
#define SUB64(x,y) ((x)-(y))
#define EQ64(x,y) ((x)==(y))
#define NE64(x,y) ((x)!=(y))
#define GT64(x,y) ((x)>(y))
#define GE64(x,y) ((x)>=(y))
#define LT64(x,y) ((x)<(y))
#define LE64(x,y) ((x)<=(y))

#else

struct longlong
{
  unsigned int lo;
  signed int hi;
};

#define uint64_t __value_in_regs struct longlong
#define int64_t __value_in_regs struct longlong

#define NEG64(x) (int64_Neg(x))
#define ADD64(x,y) (int64_Add((x),(y)))
#define SUB64(x,y) (int64_Sub((x),(y)))
#define EQ64(x,y) (int64_Equal((x),(y)))
#define NE64(x,y) (int64_NotEqual((x),(y)))
#define GT64(x,y) (int64_GreaterThan((x),(y)))
#define GE64(x,y) (int64_GreaterThanOrEqual((x),(y)))
#define LT64(x,y) (int64_LessThan((x),(y)))
#define LE64(x,y) (int64_LessThanOrEqual((x),(y)))

#endif


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

#ifndef INT64_MAX
extern int64_t int64_Neg(int64_t x);
extern int64_t int64_Add(int64_t x, int64_t y);
extern int64_t int64_Sub(int64_t x, int64_t y);
extern bool int64_Equal(int64_t x, int64_t y);
extern bool int64_NotEqual(int64_t x, int64_t y);
extern bool int64_GreaterThan(int64_t x, int64_t y);
extern bool int64_GreaterThanOrEqual(int64_t x, int64_t y);
extern bool int64_LessThan(int64_t x, int64_t y);
extern bool int64_LessThanOrEqual(int64_t x, int64_t y);
#endif


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
