#if !defined(PFCCLOCK_CLOCK_H) /* file used if not already included */
#define PFCCLOCK_CLOCK_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Session management
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdint.h>
#include "kernel.h"

#include "PRISM/PRISM.h"
#include "PRISM/PFCClock.h"
#include "MPEG/mpegtime.h"

#include "llist.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/
typedef struct
{
  stream_handle_t clock_handle;
  unsigned sync_to_stream: 1;
  unsigned jitter_buffer: 1;
  unsigned session_active: 1;
  unsigned pcr_seen: 1;
  prism_id_t unwrap_id;
  stream_handle_t unwrap_handle;
  uint32_t jitter_buffer_size;
  uint32_t default_min_decoder_buffer;
  uint32_t total_fasts;
  uint32_t session_fasts;
  uint32_t total_slows;
  uint32_t session_slows;
  int32_t current_STC_speed;
  int32_t current_NPT_wrt_STC;
  int32_t pending_STC_speed;
  int32_t next_STC_speed;
  llist_list_t decoder_list; /* held in order of PRISM ID, then decoder's local handle */
} clock_t;


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* clock_Init
*
* Module initialisation entry
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *clock_Init(void);

/*****************************************************************************
* clock_Final
*
* Module finalisation (or initialisation failure) entry
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void clock_Final(void);

/*****************************************************************************
* clock_ListClients
*
* Enumerates all registrations, as per *PFCClockClients
*
* Assumptions
*  NONE
*
* Inputs
*  verbose: whether to print verbose information
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern _kernel_oserror *clock_ListClients(bool verbose);

/*****************************************************************************
* clock_Register
*
* Implements SWI PFCClock_Register
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern _kernel_oserror *clock_Register(uint32_t flags, prism_id_t unwrap_id, stream_handle_t unwrap_handle,
                                       uint32_t *restrict r_flags, stream_handle_t *restrict r_clock_handle, const prism_function_table_unwrap_to_clock_t **restrict r_function_table);

/*****************************************************************************
* clock_Deregister
*
* Implements SWI PFCClock_Deregister
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_2(_kernel_oserror *, clock_Deregister, uint32_t /*flags*/, stream_handle_t /*clock_handle*/)

/*****************************************************************************
* clock_BeginSession
*
* Implements SWI PFCClock_BeginSession
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_2(_kernel_oserror *, clock_BeginSession, uint32_t /*flags*/, stream_handle_t /*clock_handle*/)

/*****************************************************************************
* clock_EndSession
*
* Implements SWI PFCClock_EndSession
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_2(_kernel_oserror *, clock_EndSession, uint32_t /*flags*/, stream_handle_t /*clock_handle*/)

/*****************************************************************************
* clock_StreamInfo
*
* Implements SWI PFCClock_StreamInfo
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_3(_kernel_oserror *, clock_StreamInfo, uint32_t /*reason*/, stream_handle_t /*clock_handle*/, void **/*info*/)

/*****************************************************************************
* clock_SpeedChange
*
* Implements SWI PFCClock_SpeedChange
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_3(_kernel_oserror *, clock_SpeedChange, uint32_t /*flags*/, stream_handle_t /*clock_handle*/, int32_t /*new_speed*/)

/*****************************************************************************
* clock_PCRNotify
*
* Implements SWI PFCClock_PCRNotify
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_3(_kernel_oserror *, clock_PCRNotify, uint32_t /*flags*/, stream_handle_t /*clock_handle*/, mpeg_time_t */*pcr*/)

/*****************************************************************************
* clock_NPTMapping
*
* Implements SWI PFCClock_NPTMapping
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_4(_kernel_oserror *, clock_NPTMapping, uint32_t /*flags*/, stream_handle_t /*clock_handle*/, mpeg_time_t */*npt_offset*/, int32_t /*npt_scale*/)

/*****************************************************************************
* clock_FreezeClock
*
* Implements SWI PFCClock_FreezeClock
*
* Assumptions
*  NONE
*
* Inputs
*  See API documentation
*
* Outputs
*  See API documentation
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern PRISM_DECLARE_FUNCTION_2(_kernel_oserror *, clock_FreezeClock, uint32_t /*flags*/, stream_handle_t /*clock_handle*/)

/*****************************************************************************
* clock_AbandonAll
*
* Shuts down all sessions
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void clock_AbandonAll(void);

/*****************************************************************************
* clock_AbandonComponent
*
* Shuts down sessions related to a given PRISM component
*
* Assumptions
*  NONE
*
* Inputs
*  id: PRISM ID of the component to abandon
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void clock_AbandonComponent(prism_id_t id);

/*****************************************************************************
* clock_AbandonClient
*
* Shuts down sessions related to a given PRISM client
*
* Assumptions
*  NONE
*
* Inputs
*  handle: PRISM client handle of the client to abandon
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void clock_AbandonClient(stream_handle_t handle);

/*****************************************************************************
* clock_AbandonRelationship
*
* Shuts down sessions related to a specific PRISM component and remote
* stream handle
*
* Assumptions
*  NONE
*
* Inputs
*  id:     PRISM ID of the component
*  handle: PRISM stream handle for that component
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void clock_AbandonRelationship(prism_id_t id, stream_handle_t handle);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
