#if !defined(PFCCLOCK_GLOBAL_H) /* file used if not already included */
#define PFCCLOCK_GLOBAL_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Global variables
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdint.h>

#include "PRISM/PRISM.h"
#include "tboxlibs/toolbox.h"

#include "clock.h"
#include "module.h"
#include "decoder.h"


/*****************************************************************************
* MACROS
*****************************************************************************/
#ifndef IGNORE
#define IGNORE(x) { (x)=(x); }
#endif

#ifndef MIN
#define MIN(x,y) ((x)<(y)?(x):(y))
#endif

#ifndef MAX
#define MAX(x,y) ((x)>(y)?(x):(y))
#endif

#ifndef RETURN_ERROR
#define RETURN_ERROR(error_returning_statement) \
  { \
    _kernel_oserror *returnerror_error = (error_returning_statement); \
    if (returnerror_error != NULL) \
    { \
      return returnerror_error; \
    } \
  }
#endif


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/
extern void *global_PrivateWord; /* so we don't have to worry about passing pw around */
extern MessagesFD global_MessageFD; /* message file descriptor */
extern struct veneers
{
  PRISM_VENEER_POINTER(module_ComponentInfo); /*  0 */
  PRISM_VENEER_POINTER(clock_Deregister);     /*  1 */
  PRISM_VENEER_POINTER(clock_BeginSession);   /*  2 */
  PRISM_VENEER_POINTER(clock_EndSession);     /*  3 */
  PRISM_VENEER_POINTER(clock_StreamInfo);     /*  4 */
  PRISM_VENEER_POINTER(clock_SpeedChange);    /*  5 */
  PRISM_VENEER_POINTER(clock_PCRNotify);      /*  6 */
  PRISM_VENEER_POINTER(clock_NPTMapping);     /*  7 */
  PRISM_VENEER_POINTER(clock_FreezeClock);    /*  8 */
  PRISM_VENEER_POINTER(decoder_Deregister);   /*  9 */
  PRISM_VENEER_POINTER(decoder_BeginSession); /* 10 */
  PRISM_VENEER_POINTER(decoder_EndSession);   /* 11 */
  PRISM_VENEER_POINTER(decoder_SetEvent);     /* 12 */
  PRISM_VENEER_POINTER(decoder_ClearEvent);   /* 13 */
  PRISM_VENEER_POINTER(decoder_TSNotify);     /* 14 */
  void (*event_Tick)(void);                   /* 15 */
}
*global_Veneers;
extern clock_t **global_ClockArray;
extern size_t global_ClockMax;


/*****************************************************************************
* Function prototypes
*****************************************************************************/


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
