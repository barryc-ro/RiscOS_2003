#if !defined(BAVISON_LLIST_H) /* file used if not already included */
#define BAVISON_LLIST_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): 
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Re-entrant linked list handling
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdint.h>


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/
typedef struct
{
  uint32_t opaque[11];
} llist_list_t;

typedef struct
{
  void *data;
  uint32_t opaque[4];
} llist_step_t;


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* llist_Create
*
* Creates a llist_list_t struct
*
* Assumptions
*  NONE
*
* Inputs
*  data_size:    size of data block attached to each link
*  malloc:       memory allocation routine (called like clib malloc())
*  free:         memory free routine (called like clib free())
*  atremoval:    routine called when a link is removed (eg to free things it points to)
*                * can be NULL to signify no action need be taken
*                * is called with IRQs off
*  cluster_size: number of links to allocate together (ignored unless LLIST_CLUSTER is defined)
*
* Outputs
*  list:         filled in appropriately
*
* Returns
*  NOTHING
*****************************************************************************/
extern void llist_Create(llist_list_t *list, size_t data_size, void *(*malloc)(size_t), void (*free)(void *), void (*atremoval)(void *), size_t cluster_size);

/*****************************************************************************
* llist_Destroy
*
* Finishes with a llist_list_t struct
*
* Assumptions
*  No walks remain that are using the list
*  (because the llist_list_t struct needs to be referenced when freeing links)
*
* Inputs
*  list: the head of the list to free
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void llist_Destroy(llist_list_t *list);

/*****************************************************************************
* llist_StartWalk
*
* Starts a walk along a list
*
* Assumptions
*  NONE
*
* Inputs
*  list:      the list head of the list to walk
*  backwards: true to start at the end of the list (ignored unless LLIST_DOUBLE is defined)
*
* Outputs
*  step:      filled in appropriately; step.data = NULL if list was empty
*
* Returns
*  NOTHING
*****************************************************************************/
extern void llist_StartWalk(llist_step_t *step, llist_list_t *list, bool backwards);

/*****************************************************************************
* llist_StartWalkAt
*
* Starts a walk along a list at a known link
*
* Assumptions
*  NONE
*
* Inputs
*  list:     the list head of the list to walk
*  position: pointer to the data field of the link we want to start at
*
* Outputs
*  step:     filled in appropriately; step.data = NULL if the link isn't on the list
*
* Returns
*  NOTHING
*****************************************************************************/
extern void llist_StartWalkAt(llist_step_t *step, llist_list_t *list, void *position);

/*****************************************************************************
* llist_NextStep
*
* Steps along a list
*
* Assumptions
*  NONE
*
* Inputs
*  step:      the current step on this walk
*  backwards: true to step backwards through the list (ignored unless LLIST_DOUBLE is defined)
*
* Outputs
*  step:      updated to point at the next data block, or NULL if the end has been reached
*
* Returns
*  NOTHING
*****************************************************************************/
extern void llist_NextStep(llist_step_t *step, bool backwards);

/*****************************************************************************
* llist_AbortWalk
*
* Abandons a walk before the end of the list is reached
* This *must* be called if you want to finish with a llist_step_t struct
* before the end of the list
*
* Assumptions
*  NONE
*
* Inputs
*  step:      the current step on this walk
*
* Outputs
*  step:      updated to point at NULL
*
* Returns
*  NOTHING
*****************************************************************************/
extern void llist_AbortWalk(llist_step_t *step);

/*****************************************************************************
* llist_AddAtLimit
*
* Creates a new link at one end of a list
*
* Assumptions
*  NONE
*
* Inputs
*  list:      the list head of the list to which to add the link
*  backwards: true to add at the tail of the list rather than the head (ignored unless LLIST_DOUBLE is defined)
*  data:      pointer to data to be copied into the new link's data field
*
* Outputs
*  NONE
*
* Returns
*  true if successful
*****************************************************************************/
extern bool llist_AddAtLimit(llist_list_t *list, bool backwards, const void *data);

/*****************************************************************************
* llist_AddAdjacent
*
* Creates a new link adjacent to the current one
*
* Assumptions
*  NONE
*
* Inputs
*  step:      the current step on this walk
*  backwards: true to add before the current step, rather than after
*             (ignored unless LLIST_DOUBLE is defined)
*             if the current link has been delinked, then the new link is
*             added after the link we would have stepped back to, or before
*             the link we would have stepped forward to, as appropriate
*  data:      pointer to data to be copied into the new link's data field
*
* Outputs
*  NONE
*
* Returns
*  true if successful
*****************************************************************************/
extern bool llist_AddAdjacent(llist_step_t *step, bool backwards, const void *data);

/*****************************************************************************
* llist_AddSorted
*
* Creates a new link in a sorted list
*
* Assumptions
*  NONE
*
* Inputs
*  list:      the list to add the link to
*  data:      pointer to data to be copied into the new link's data field
*  later:     pointer to a function that returns true when the first argument
*             should be placed later in the list than the second argument
*
* Outputs
*  NONE
*
* Returns
*  true if successful
*****************************************************************************/
extern bool llist_AddSorted(llist_list_t *list, const void *data, bool (*later)(const void *, const void *));

/*****************************************************************************
* llist_Delink
*
* Delinks a link from the list
*
* Assumptions
*  NONE
*
* Inputs
*  step:      the current step on this walk
*             the link is not freed until every walk pointing at it had moved
*             on in one direction or the other
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void llist_Delink(llist_step_t *step);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
