#if !defined(PFCCLOCK_EVENT_H) /* file used if not already included */
#define PFCCLOCK_EVENT_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Event management
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdint.h>
#include "kernel.h"

#include "PRISM/PRISM.h"

#include "clock.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/
typedef struct clock_event
{
  struct clock_event *next;
  struct clock_event *prev;
  uint32_t flags;                         /* 5 matching values for reference on event clear */
  prism_id_t decoder_id;
  uint32_t event_handle;
  _kernel_oserror *(*event)(uint32_t, uint32_t);
  void *when;
  int64_t pre_emption;                    /* derived from decoder latency */
  int64_t time;                           /* absolute time at which to generate event */
} clock_event_t;


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* event_Set
*
* Sets an event
*
* Assumptions
*  NONE
*
* Inputs
*  clock:        pointer to clock struct for the time stream to which the event belongs
*  flags:        as passed to PFCClock_DecoderSetEvent (currently used only for validating event clearing)
*  decoder_id:   PRISM ID of decoder
*  event_handle: decoder's handle for this event
*  event:        address of routine to call
*  when:         used only for validating event clearing
*  pre_emption:  amount to add on to monotonic time before conversion to STC, derived from decoder latency
*  time:         STC at which to call routine
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void event_Set(clock_t *clock, uint32_t flags, prism_id_t decoder_id, uint32_t event_handle, _kernel_oserror *(*event)(uint32_t, uint32_t), void *when, int64_t pre_emption, int64_t time);

/*****************************************************************************
* event_Clear
*
* Clears an event
*
* Assumptions
*  NONE
*
* Inputs
*  clock:        pointer to clock struct for the time stream to which the event belongs
*  flags:        as passed to PFCClock_DecoderClearEvent (currently used only for validation)
*  decoder_id:   PRISM ID of decoder
*  event_handle: decoder's handle for this event
*  event:        address of routine to call
*  when:         used only for validation
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void event_Clear(clock_t *clock, uint32_t flags, prism_id_t decoder_id, uint32_t event_handle, _kernel_oserror *(*event)(uint32_t, uint32_t), void *when);

/*****************************************************************************
* event_ClearDecoder
*
* Clears all events for a particular clock/decoder combination
*
* Assumptions
*  NONE
*
* Inputs
*  clock:      pointer to clock struct
*  decoder_id: PRISM ID of decoder
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void event_ClearDecoder(clock_t *clock, prism_id_t decoder_id);

/*****************************************************************************
* event_ClearAll
*
* Clears all events for a particular clock
*
* Assumptions
*  NONE
*
* Inputs
*  clock: pointer to clock struct
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void event_ClearAll(clock_t *clock);

/*****************************************************************************
* event_CorrectTimes
*
* Modifies all times to compensate for a STC correction
*
* Assumptions
*  IRQs are off
*
* Inputs
*  clock:      pointer to clock struct
*  correction: adjustment to make
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void event_CorrectTimes(clock_t *clock, int64_t correction);

/*****************************************************************************
* event_Tick
*
* TickerV routine
*
* Assumptions
*  NONE
*
* Inputs
*  clock: pointer to relevant clock struct
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern _kernel_oserror *event_Tick(clock_t *clock);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
