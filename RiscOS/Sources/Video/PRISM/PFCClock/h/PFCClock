#if !defined(PRISM_PFCCLOCK_H) /* file used if not already included */
#define PRISM_PFCCLOCK_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): 
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: PFC Clock exportable API
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdint.h>
#include "kernel.h"

#include "MPEG/mpegtime.h"
#include "PRISM/PRISM.h"


/*****************************************************************************
* Function tables
*****************************************************************************/
typedef struct
{
  _kernel_oserror *(*Deregister)(uint32_t flags, stream_handle_t clock_handle);
  _kernel_oserror *(*BeginSession)(uint32_t flags, stream_handle_t clock_handle);
  _kernel_oserror *(*EndSession)(uint32_t flags, stream_handle_t clock_handle);
  _kernel_oserror *(*StreamInfo)(uint32_t reason, stream_handle_t clock_handle, void *info);
  _kernel_oserror *(*SpeedChange)(uint32_t flags, stream_handle_t clock_handle, int32_t new_speed);
  _kernel_oserror *(*PCRNotify)(uint32_t flags, stream_handle_t clock_handle, const mpeg_time_t *pcr);
  _kernel_oserror *(*NPTMapping)(uint32_t flags, stream_handle_t clock_handle, const mpeg_time_t *stc_reference, const mpeg_interval_t *npt_reference, int32_t npt_scale);
  _kernel_oserror *(*FreezeClock)(uint32_t flags, stream_handle_t clock_handle);
}
prism_function_table_unwrap_to_clock_t;

typedef struct
{
  _kernel_oserror *(*Deregister)(uint32_t flags, prism_id_t decoder_id, stream_handle_t decoder_handle, stream_handle_t clock_handle);
  _kernel_oserror *(*BeginSession)(uint32_t flags, prism_id_t decoder_id, stream_handle_t decoder_handle, stream_handle_t clock_handle, uint32_t pre_buffer, const mpeg_time_t *first_ts);
  _kernel_oserror *(*EndSession)(uint32_t flags, prism_id_t decoder_id, stream_handle_t decoder_handle, stream_handle_t clock_handle);
  _kernel_oserror *(*StreamInfo)(uint32_t reason, stream_handle_t clock_handle, void *info);
  _kernel_oserror *(*SetEvent)(uint32_t flags, prism_id_t decoder_id, uint32_t event_handle, stream_handle_t clock_handle, _kernel_oserror *(*restrict event)(uint32_t, uint32_t), void *restrict when);
  _kernel_oserror *(*ClearEvent)(uint32_t flags, prism_id_t decoder_id, uint32_t event_handle, stream_handle_t clock_handle, _kernel_oserror *(*restrict event)(uint32_t, uint32_t), void *restrict when);
  _kernel_oserror *(*TSNotify)(uint32_t flags, stream_handle_t clock_handle, const mpeg_time_t *pts);
}
prism_function_table_decoder_to_clock_t;

typedef struct
{
  _kernel_oserror *(*ClockCorrection)(uint32_t flags, stream_handle_t decoder_handle);
  _kernel_oserror *(*SpeedChange)(uint32_t flags, stream_handle_t decoder_handle);
  _kernel_oserror *(*ActivateSyncControl)(uint32_t flags, stream_handle_t decoder_handle);
  _kernel_oserror *(*GetBufferLength)(uint32_t flags, stream_handle_t decoder_handle, uint32_t *length);
  _kernel_oserror *(*AdjustRate)(uint32_t flags, stream_handle_t decoder_handle);
}
prism_function_table_clock_to_decoder_t;


/*****************************************************************************
* Error numbers
*****************************************************************************/
enum
{
  pfcclock_ERROR_DECODER_ALREADY_REGISTERED = PRISM_ERROR1_BASE + PFC_CLOCK_OFFSET,
  pfcclock_ERROR_DECODER_NOT_REGISTERED,
  pfcclock_ERROR_CLOCK_NOT_STARTED
};


/*****************************************************************************
* PRISM IDs
*****************************************************************************/
#define PRISM_Parent_PFCClock       (0x003000)
#define PFCClock_PRISMID            ((PRISM_Class_PFC) | (PRISM_Parent_PFCClock))


/*****************************************************************************
* Flags to PFCClock_Register
*****************************************************************************/
#define PFCCLOCK_REGISTER_STREAM_SYNC   (1u << 0)
#define PFCCLOCK_REGISTER_DEJITTER      (1u << 1)


/*****************************************************************************
* Reason codes to PFCClock_StreamInfo
*****************************************************************************/
enum
{
  pfcclock_STREAM_INFO_JITTER_BUFFER = 0,
  pfcclock_STREAM_INFO_MIN_BUFFER,
  pfcclock_STREAM_INFO_TOTAL_CORRECTIONS,
  pfcclock_STREAM_INFO_CORRECTIONS,
  pfcclock_STREAM_INFO_TOTAL_FASTS,
  pfcclock_STREAM_INFO_FASTS,
  pfcclock_STREAM_INFO_TOTAL_SLOWS,
  pfcclock_STREAM_INFO_SLOWS,
  pfcclock_STREAM_INFO_STC_SPEED,
  pfcclock_STREAM_INFO_NPT_PER_STC_SPEED,
  pfcclock_STREAM_INFO_NPT_SPEED,
  pfcclock_STREAM_INFO_PENDING_STC_SPEED,
  pfcclock_STREAM_INFO_PENDING_NPT_SPEED,
  pfcclock_STREAM_INFO_NEXT_STC_SPEED,
  pfcclock_STREAM_INFO_STC,
  pfcclock_STREAM_INFO_NPT,
  pfcclock_STREAM_INFO_STC_SECONDS,
  pfcclock_STREAM_INFO_NPT_SECONDS,
};


/*****************************************************************************
* Flags to PFCClock_SpeedChange
*****************************************************************************/
#define PFCCLOCK_SPEED_CHANGE_DEFERRED  (1u << 0)


/*****************************************************************************
* Flags to PFCClock_DecoderRegister
*****************************************************************************/
#define PFCCLOCK_DECODER_REGISTER_SYNC_CAPABLE  (1u << 0)


/*****************************************************************************
* Flags to PFCClock_DecoderBeginSession
*****************************************************************************/
#define PFCCLOCK_DECODER_BEGIN_SESSION_BUFFER_SPECIFIED (1u << 0)


/*****************************************************************************
* Flags to PFCClock_DecoderSetEvent
*****************************************************************************/
#define PFCCLOCK_DECODER_SET_EVENT_RELATIVE     (1u << 0)


#endif  /* end of sentry #ifdef */

/*****************************************************************************
* In the exported copy of this file, SWI numbers will follow
*****************************************************************************/
#undef PFCClock_00 /* so we can be multiply included, or included after the cmhg h file */
