#if !defined(PFCCLOCK_TIME_H) /* file used if not already included */
#define PFCCLOCK_TIME_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Low-level time manipulation utilities
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include "int64.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* time_Extend
*
* Extends the width of a 33-bit mpeg_time_t to match a nearby 64-bit
* internal time reference (not necessarily just a bit copy)
*
* Assumptions
*  NONE
*
* Inputs
*  time: time to extend
*
* Outputs
*  NONE
*
* Returns
*  full 64-bit time
*****************************************************************************/
extern int64_t time_Extend(mpeg_time_t time, int64_t nearby);

/*****************************************************************************
* time_ConvertToSeconds
*
* Converts a time from a 64-bit unsigned 90 kHz number to a value in
* seconds and milliseconds
*
* Assumptions
*  NONE
*
* Inputs
*  time: time to convert
*
* Outputs
*  s:    time converted to seconds, rounded down
*  ms:   millisecond part of time after conversion, rounded to nearest
*
* Returns
*  NOTHING
*****************************************************************************/
extern void time_ConvertToSeconds(uint64_t *time, uint32_t *s, uint32_t *ms);

/*****************************************************************************
* time_Transform
*
* Converts a time from one frame of reference to another
* (eg from monotonic to STC, or from STC to NPT)
*
* Assumptions
*  NONE
*
* Inputs
*  raw_time:        time to convert
*  ref_raw:         \ representations of the same time in
*  ref_transformed: / the source and destination time frames
*  scale:           the rate of change of the destination time frame
*                   with respect to the source time frame, as a signed
*                   16.16 fixed-point number
*
* Outputs
*  NONE
*
* Returns
*  the time in the destination time frame that corresponds to raw_time
*  in the source time frame
*****************************************************************************/
extern int64_t time_Transform(int64_t *raw_time, int64_t *ref_raw, int64_t *ref_transformed, int32_t scale);

/*****************************************************************************
* time_ReadMonotonicTime
*
* Reads a 64-bit 90 kHz monotonic time value using Timer0
*
* Assumptions
*  The box has not been running for over 16 months (at this point, the
*  monotonicity fails due to OS_ReadMonotonicTime overflowing)
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  64-bit 90 kHz monotonic time
*****************************************************************************/
extern int64_t time_ReadMonotonicTime(void);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
