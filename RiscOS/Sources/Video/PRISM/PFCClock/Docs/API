PFCClock module API                                       08-May-2002
===================                                       ===========


* Unwrap module to PFCClock module
  --------------------------------

                                                          PFCClock_Register
                                                               (SWI &56040)

  Creates a time stream

On entry
  R0 = flags:
       bit 0 set => make incremental adjustments to the clock to match the
                    incoming data rate
       bit 1 set => use a jitter buffer, duration in milliseconds read from
                    system variable PRISM$JitterBuffer (or 600ms if unset)
       other bits reserved, currently must be zero
  R1 = PRISM ID of unwrap module
  R2 = unwrap module's PRISM stream handle to associate with this time
       stream

On exit
  R0 = exit flags (currently zero)
  R1 = PRISM ID of clock module
  R2 = clock module's PRISM stream handle for this time stream
  R3 = pointer to table of direct-call function pointers to use for this
       time stream

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This SWI creates the internal structures relating to a clock with a
  particular stream, and passes around handle and direct-call function
  pointer tables. The stream handle passed in R2 serves both to notify
  PFCClock of the unwrapper's handle for this stream (in case the API is
  extended so calls to the unwrapper are needed) and also to notify it of
  the client handle.

  Note that typically there will be only one clock per stream, it is
  theoretically possible that elementary streams within stream are
  synchronised to different clocks, so this API does not force a single
  clock per stream.

  When this call is made, the system variable PRISM$MinDecoderBuffer is
  read (a value measured in milliseconds, defaulting to 300ms if unset)
  and cached for later use. If R0 bit 0 is set and no PCRs are received,
  then one of the decoders is selected to be the sync master, and PFCClock
  will attempt to maintain the length of time that data remains in that
  decoder's buffer at this level as a minimum (ie when the jitter buffer is
  empty). Note that this means that there must be a jitter buffer if R0 bit
  0 is set and no PCRs are being delivered.

  The direct-call function table returned in R3 currently has 8 entries:
    deregister()
    beginsession()
    endsession()
    streaminfo()
    speedchange()
    pcrnotify()
    nptmapping()
    freezeclock()

  The functions are mirrored by SWIs, and both are described together below.

Related SWIs
  PFCClock_Deregister

Related vectors
  None



                                                        PFCClock_Deregister
                                                               (SWI &56041)

  Finishes with a time stream

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = clock module's PRISM stream handle for this time stream

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*deregister)(uint32_t flags,
                                 stream_handle_t clock_handle);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call discards all internal resources relating to a clock. It is
  assumed that all decoders associated with the time stream have already
  been deregistered. The clock module's stream handle ceases to be valid,
  and becomes available for subsequent re-use.

Related SWIs
  PFCClock_Register

Related vectors
  None



                                                      PFCClock_BeginSession
                                                               (SWI &56042)

  Initialises a session within a time stream

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = clock module's PRISM stream handle for this time stream

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*beginsession)(uint32_t flags,
                                   stream_handle_t clock_handle);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call must be used to initialise the clock, either at the start of a
  stream, or after a known discontinuity.

Related SWIs
  PFCClock_EndSession

Related vectors
  None



                                                        PFCClock_EndSession
                                                               (SWI &56043)

  Finalises a session within a time stream

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = clock module's PRISM stream handle for this time stream

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*endsession)(uint32_t flags,
                                 stream_handle_t clock_handle);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call must be used to finalise the clock, either at the end of a
  stream, or before a known discontinuity.

Related SWIs
  PFCClock_BeginSession

Related vectors
  None



                                                        PFCClock_StreamInfo
                                                               (SWI &56044)

  Returns information about a time stream

On entry
  R0 = reason code
  R1 = clock module's PRISM stream handle for this time stream
  R2 = pointer to block to receive the information (size is reason code
       dependent)

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*streaminfo)(uint32_t reason,
                                 stream_handle_t clock_handle,
                                 void *info);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call is used to discover information about a time stream. Currently
  defined reason codes are as follows:

  Reason code  Information                                   Type

  0            Jitter buffer size (ms)                       uint32_t
  1            Default minimum decoder buffering (ms)        uint32_t
  2            Number of fasts since registration            uint32_t
  3            Number of fasts since session start           uint32_t
  4            Number of slows since registration            uint32_t
  5            Number of slows since session start           uint32_t
  6            Current speed of STC wrt real time (16.16)    int32_t
  7            Current speed of NPT wrt STC (16.16)          int32_t
  8            Current speed of NPT wrt real time (16.16)    int32_t
  9            Pending speed of STC wrt real time (16.16)    int32_t
  10           Pending speed of NPT wrt real time (16.16)    int32_t
  11           STC wrt real time (16.16) for next session    int32_t
  12           Current value of STC                          mpeg_time_t
  13           Current value of NPT                          mpeg_interval_t
  14           Current value of STC, seconds, rounded down   { uint32_t,
               and millisecond part of current STC             uint32_t } *
  15           Current value of NPT, seconds, round to zero  { int32_t,
               and absolute millisecond part of current NPT    uint32_t } *

  Note that the items marked "(16.16)" are 16.16 fixed-point numbers.

Related SWIs
  None

Related vectors
  None



                                                       PFCClock_SpeedChange
                                                               (SWI &56045)

  Notifies PFCClock of an immediate or pending STC speed change

On entry
  R0 = flags:
       bit 0 set => speed change is not to take effect until next session
       other bits reserved, currently must be zero
  R1 = clock module's PRISM stream handle for this time stream
  R2 = new STC speed (signed 16.16 fixed-point number)

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *speedchange(uint32_t flags,
                               stream_handle_t clock_handle,
                               int32_t new_speed);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call notifies PFCClock that the user has requested a speed change
  that impacts upon the rate of change of the STC with respect to real time.
  This may involve a new session (for example, switching a video server into
  or out of trick mode); if so, flag bit 0 should be set, and the new STC
  rate will not come into effect until the next session is started.

  Alternatively, the same data stream may continue across the boundary; in
  this case, if we are operating in client-pull mode, the speed change has
  immediate effect, and if in server-push mode, the speed change is deferred
  until it is detected that the server has acted upon the speed change
  request. The determination of client-pull versus server-push is made by
  flag bit 0 passed to PFCClock_Register. At the present time, no
  tranmission formats are known that notify the client when a server has
  changed speed, so the determination of server-push speed change times is
  entirely internal to PFCClock.

  It is the caller's responsibility to ensure that only decoders capable of
  handling the new STC rate (for example if the rate is negative) will be
  activated.

Related SWIs
  None

Related vectors
  None



                                                         PFCClock_PCRNotify
                                                               (SWI &56046)

  Notifies PFCClock of a newly received PCR value

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = clock module's PRISM stream handle for this time stream
  R2 = pointer to PCR - currently must be a mpeg_time_t struct, but other
       formats may be supported in future, indicated by the flags word

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*pcrnotify)(uint32_t flags,
                                stream_handle_t clock_handle,
                                mpeg_time_t *pcr);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call is used to inform PFCClock of the receipt of a PCR. It is
  ignored in the case of client-pull streams. In the case of server-push
  streams, the first receipt of this call within a session switches PFCClock
  into PCR mode; in the absence of this call, PFCClock remains in a mode
  where one of the elementary stream decoders acts as the synchronisation
  master. (Note that a flag passed to the unwrapper could be used to
  suppress PCR notification, and therefore force PFCClock to be driven from
  one of the elementary decoders.)

Related SWIs
  None

Related vectors
  None



                                                        PFCClock_NPTMapping
                                                               (SWI &56047)

  Notifies PFCClock of a newly received STC to NPT mapping

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = clock module's PRISM stream handle for this time stream
  R2 = pointer to reference value of STC - currently must be a mpeg_time_t
       struct, but other formats may be supported in future, indicated by
       the flags word
  R3 = pointer to reference value of NPT - currently must be a
       mpeg_interval_t struct, but other formats may be supported in future,
       indicated by the flags word
  R4 = rate of change of NPT with respect to STC (signed 16.16 fixed-point)

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*nptmapping)(uint32_t flags,
                                 stream_handle_t clock_handle,
                                 mpeg_time_t *stc_reference,
                                 mpeg_interval_t *npt_reference,
                                 int32_t npt_scale);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call is used to inform PFCClock that a new STC to NPT mapping takes
  immediate effect.

Related SWIs
  None

Related vectors
  None



                                                       PFCClock_FreezeClock
                                                               (SWI &56048)

  Notifies PFCClock that the clock should be frozen

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = clock module's PRISM stream handle for this time stream

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*freezeclock)(uint32_t flags,
                                  stream_handle_t clock_handle);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call is used to stop the clock from incrementing any further. It
  stops the STC from incrementing, which therefore causes the NPT to stop
  too. If a PCR is subsequently received in the same session, or if the sync
  master decoder processes a timestamp, then the clocks start incrementing
  again.

  This call is intended to be called at end-of-stream markers, not at stream
  time-outs.

Related SWIs
  None

Related vectors
  None



* Decoder module to PFCClock module
  ---------------------------------

                                                   PFCClock_DecoderRegister
                                                               (SWI &56060)

  Registers a decoder with a particular time stream

On entry
  R0 = flags:
       bit 0 set => choose this decoder as a sync master (if necessary) in
                    preference to other potential sync masters - typically
                    should only be set by audio decoders
       other bits reserved, currently must be zero
  R1 = PRISM ID of decoder module
  R2 = decoder module's private handle for this registration (typically its
       own PRISM stream handle)
  R3 = clock module's PRISM stream handle for this time stream (passed to
       decoder from unwrapper)
  R4 = pointer to table of direct-call function pointers, see below
  R5 = decoder's maximum decode-display latency, in milliseconds

On exit
  R0 = exit flags (currently zero)
  R1 = PRISM ID of clock module
  R2 = clock module's PRISM stream handle for this time stream (ie R3 on
       entry)
  R3 = pointer to table of direct-call function pointers, see below
  Other registers are preserved

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This SWI initiates a dialogue between a decoder and the PFCClock module
  for a given time stream. Stream handles and direct-call function pointer
  tables are exchanged, but no new handles are created in the process.
  PFCClock instead identifies its registrant by a unique combination of
  PRISM ID and remote PRISM stream handle.

  The latency in R5 is the maximum amount by which the removal of data
  from its buffer precedes the completion of its decoding. In this context,
  the completion of decoding includes the time at which a decoded unit is
  passed to a re-ordering buffer, if any. The latency is used as part of
  the calculation of how long prefilling should last, and in the case of a
  sync master decoder, it is factored into the calculation of the the
  duration of all buffered data. It is also the amount of real time by which
  any registered event callbacks for this decoder are pre-empted (see
  PFCClock_DecoderSetEvent).

  The functions in the table passed from the decoder to PFCClock have no SWI
  equivalents. There are cuurently 5 entries, as follows:

  _kernel_oserror *(*clockcorrection)(uint32_t flags,
                                      stream_handle_t decoder_handle);

    This call informs the decoder that a clock correction has taken place.
    It should read the current value of the STC in the format it desires
    using PFCClock_StreamInfo or the equivalent direct-call function.

    A null pointer in this entry indicates that the decoder does not wish to
    be notified of clock corrections.

  _kernel_oserror *(*speedchange)(uint32_t flags,
                                  stream_handle_t decoder_handle);

    This call informs the decoder that a speed change (STC or NPT or both)
    has taken place. It should read the current value of the STC in the
    format it desires using PFCClock_StreamInfo or the equivalent
    direct-call function.

    A null pointer in this entry indicates that the decoder does not wish to
    be notified of speed changes.

  _kernel_oserror *(*activatesynccontrol)(uint32_t flags,
                                          stream_handle_t decoder_handle);

    This call is used to notify a decoder that it has become the sync master
    for this time stream, and must start calling PFCClock_DecoderTSNotify
    or the equivalent direct-call function every time it starts presenting a
    unit with a specified PTS or starts decoding a specified DTS. This is
    usually called near the start of a session, but may take place some time
    into it, if for example the original sync master deregisters itself. The
    decoder must continue in this role until the end of the session.

    A null pointer in this entry indicates that the decoder is incapable of
    acting as sync master. Otherwise the following two functions must also
    be provided.

  _kernel_oserror *(*getbufferlength)(uint32_t flags,
                                      stream_handle_t decoder_handle,
                                      uint32_t *length);

    This call is used when PFCClock needs to know the duration of the data
    buffered for the sync master decoder. The length should be returned in
    units of 90kHz ticks (although flags may in future allow different
    granularities). A value of 0 should be returned if the duration cannot
    be determined because the bitrate has yet to be determined.

  _kernel_oserror *(*adjustrate)(uint32_t flags,
                                 stream_handle_t decoder_handle);

    This call is used when PFCClock wants the sync master decoder to subtly
    alter its rate. Flag bit 0 is set if the decoder should run slow; flag
    bit 1 is set if the decoder should run fast; if neither flag bit is set,
    the decoder should proceed at its nominal rate.

  The direct-call function table passed back from PFCClock to the decoder
  currently has 7 entries:
    deregister()
    beginsession()
    endsession()
    streaminfo()
    setevent()
    clearevent()
    tsnotify()

  The functions are mirrored by SWIs, and both are described together below,
  except for streaminfo(), which is identical to PFCClock_StreamInfo
  described above.

Related SWIs
  PFCClock_DecoderDeregister

Related vectors
  None



                                                 PFCClock_DecoderDeregister
                                                               (SWI &56061)

  Deregisters a decoder from a particular time stream

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = PRISM ID of decoder module
  R2 = decoder module's private handle for this registration
  R3 = clock module's PRISM stream handle for this time stream

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*deregister)(uint32_t flags,
                                 prism_id_t decoder_id,
                                 stream_handle_t decoder_handle,
                                 stream_handle_t clock_handle);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call discards all internal resources relating to a particular
  decoder/time stream combination.

Related SWIs
  PFCClock_DecoderRegister

Related vectors
  None



                                               PFCClock_DecoderBeginSession
                                                               (SWI &56062)

  Initialises a session with a decoder for a particular time stream

On entry
  R0 = flags:
       bit 0 set => the value in R4 is valid; otherwise the value that
                    was read from the system variable PRISM$MinDecoderBuffer
                    at clock registration time is used instead
       other bits reserved, currently must be zero
  R1 = PRISM ID of decoder module
  R2 = decoder module's private handle for this registration
  R3 = clock module's PRISM stream handle for this time stream
  R4 = minimum pre-buffering time for this session, measured in 90kHz ticks.
       The minimum decoder buffer is used instead if flag bit 0 is clear.
       Either value is overridden if is is less than half the jitter buffer
       (if applicable) plus the decode-display latency (as quoted on decoder
       registration) in order to avoid underrun in worst-case initial jitter
       conditions
  R5 = pointer to first timestamp for this session, or 0 if unknown -
       currently must be a mpeg_time_t struct, but other formats may be
       supported in future, indicated by the flags word

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*beginsession)(uint32_t flags,
                                   prism_id_t decoder_id,
                                   stream_handle_t decoder_handle,
                                   stream_handle_t clock_handle,
                                   uint32_t pre_buffer,
                                   mpeg_time_t *first_ts);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call informs PFCClock that a decoder has become active. After this
  call, PFCClock is free to call the clockcorrection(), speedchange(),
  activatesynccontrol(), getbufferlength() and adjustrate()
  functions that were registered in PFCClock_DecoderRegister.

  The pre-buffering time is the length of time (ignoring any jitter buffer,
  which will be half-filled in addition to this) that is expected to elapse
  before the timestamp given in R5 (if any) becomes pertinent. If no
  timestamp is given in R5 for any of the decoders, then this value is still
  useful, because the STC will be started at a value of 0 when the earliest
  pre-buffering time of any decoder is satisfied.

  The timestamp that is registered in R5 can be a DTS or a PTS, whichever is
  easier to predict the remoteness of. For example, an MPEG video decoder
  can read the vbv_delay of the first I picture upon receipt, and pass in
  the vbv_delay and the DTS of the I picture.

  There is no automatic notification of the decoder when its pre-buffering
  time has elapsed; a decoder that requires this information would normally
  register an event for this purpose using PFCClock_DecoderSetEvent.

Related SWIs
  PFCClock_DecoderEndSession

Related vectors
  None



                                                 PFCClock_DecoderEndSession
                                                               (SWI &56063)

  Finalises a session with a decoder for a particular time stream

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = PRISM ID of decoder module
  R2 = decoder module's private handle for this registration
  R3 = clock module's PRISM stream handle for this time stream

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(*endsession)(uint32_t flags,
                                 prism_id_t decoder_id,
                                 stream_handle_t decoder_handle,
                                 stream_handle_t clock_handle);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call informs PFCClock that a decoder has ceased to be active. After
  this call, PFCClock will no longer call the clockcorrection(),
  speedchange(), activatesynccontrol(), getbufferlength() and adjustrate()
  functions that were registered in PFCClock_DecoderRegister.

Related SWIs
  PFCClock_DecoderBeginSession

Related vectors
  None



                                                   PFCClock_DecoderSetEvent
                                                               (SWI &56064)

  Registers a routine to be called at a set time

On entry
  R0 = flags:
       bit 0 set => R5 is a 90kHz uint32_t offset from the current STC; else
                    R5 is the absolute STC value at which to call the
                    routine (currently must be a mpeg_time_t struct, but
                    other formats may be supported in future, indicated by
                    other flag bits)
       other bits reserved, currently must be zero
  R1 = PRISM ID of decoder module
  R2 = decoder module's private handle for this event (not necessarily the
       same as the private handle for the registration)
  R3 = clock module's PRISM stream handle for this time stream
  R4 = pointer to routine to call
  R5 = pointer to time to call the routine (see R0)

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(setevent)(uint32_t flags,
                              prism_id_t decoder_id,
                              uint32_t event_handle,
                              stream_handle_t clock_handle,
                              _kernel_oserror *(*event)(uint32_t, uint32_t),
                              void *when);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call registers a routine to be called when the STC reaches a
  specified value. The routine is called as follows:

  _kernel_oserror *(*event)(uint32_t flags, uint32_t event_handle);

    This call informs the decoder that the desired STC value has been
    reached. The flags are reserved (currently all zero) and the
    event_handle is the value passed in R2 to PFCClock_DecoderSetEvent.
    Interrupts are disabled on entry.

  In reality, the call is made in advance of the STC reaching the specified
  value, by an amount of real time specified by the latency passed in R5 to
  PFCClock_DecoderRegister.

  If an event is registered to be called before the pre-buffering time for
  the appropriate decoder is up, then it is deferred until the end of the
  pre-buffering period.

  If multiple events are scheduled for the same time, they are called in
  order of registration.

  If the session ends for whatever reason before the routine has been
  called, you must deregister it using PFCClock_DecoderClearEvent, or the
  equivalent direct-call function.

Related SWIs
  PFCClock_DecoderClearEvent

Related vectors
  None



                                                 PFCClock_DecoderClearEvent
                                                               (SWI &56065)

  Deregisters a routine previously registered with PFCClock_DecoderSetEvent

On entry
  R0 = flags (as for PFCClock_DecoderSetEvent)
  R1 = PRISM ID of decoder module
  R2 = decoder module's private handle for this event (not necessarily the
       same as the private handle for the registration)
  R3 = clock module's PRISM stream handle for this time stream
  R4 = pointer to routine to call
  R5 = pointer to time to call the routine (see R0)

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(clearevent)(uint32_t flags,
                              prism_id_t decoder_id,
                              uint32_t event_handle,
                              stream_handle_t clock_handle,
                              _kernel_oserror *(*event)(uint32_t, uint32_t),
                              void *when);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call deregisters a routine previously registered with
  PFCClock_DecoderSetEvent. The values of all the parameters must match, or
  no action is taken (so it is safe to deregister an event if you are unsure
  if it has been triggered yet).

Related SWIs
  PFCClock_DecoderSetEvent

Related vectors
  None



                                                   PFCClock_DecoderTSNotify
                                                               (SWI &56066)

  Notifies PFCClock that a specific timestamp is pertinent

On entry
  R0 = flags (reserved, currently must be zero)
  R1 = clock module's PRISM stream handle for this time stream
  R2 = pointer to timstamp - currently must be a mpeg_time_t struct, but
       other formats may be supported in future, indicated by the flags word

On exit
  All registers preserved

Direct-call function prototype
  _kernel_oserror *(tsnotify)(uint32_t flags,
                              stream_handle_t clock_handle,
                              mpeg_time_t *ts);

Interrupts
  Interrupt status is not altered

Processor mode
  Processor is in SVC mode

Re-entrancy
  SWI is re-entrant

Use
  This call must only be made by the currently nominated sync master decoder
  (if any). It informs PFCClock of what the current time is, and as such
  must be made as close as possible to the time at which a timestamped
  presentation unit is being presented, or timestamped access unit is being
  decoded.

Related SWIs
  None

Related vectors
  None


--
Ben Avison, Senior Software Engineer
Pace Micro Technology plc                    Tel: +44 1223 518 562
645 Newmarket Road                           Fax: +44 1223 518 526
Cambridge, CB5 8PB, United Kingdom           WWW: http://www.pace.co.uk/
