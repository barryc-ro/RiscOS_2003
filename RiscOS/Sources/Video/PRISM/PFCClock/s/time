;*****************************************************************************
; $Id$
; $Name$
;
; Author(s):  Ben Avison
; Project(s):
;
; ----------------------------------------------------------------------------
; Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
;
; The copyright in this material is owned by Pace Micro Technology PLC
; ("Pace").  This material is regarded as a highly confidential trade secret
; of Pace.  It may not be reproduced, used, sold or in any other way exploited
; or transferred to any third party without the prior written permission of
; Pace.
;
; ----------------------------------------------------------------------------
; Purpose: Low-level time manipulation utilities
;
; ----------------------------------------------------------------------------
; History: See source control system log
;
;****************************************************************************/

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:Machine.<Machine>
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:APCS.<APCS>

        AREA    |Asm$$Code|, CODE, READONLY

; extern int64_t time_Extend(mpeg_time_t time, int64_t nearby);

        EXPORT  time_Extend
time_Extend
        AND     a2, a2, #1              ; just to be sure
        SUBS    a1, a1, a3              ; find difference from nearby
        SBC     a2, a2, a4
        MOV     a2, a2, LSL #31         ; truncate and sign extend
        MOV     a2, a2, ASR #31
        ADDS    a1, a1, a3              ; add back on to nearby
        ADC     a2, a2, a4
        Return  , LinkNotStacked


; extern void time_ConvertToSeconds(const uint64_t *time, uint32_t *s, uint32_t *ms);

        EXPORT  time_ConvertToSeconds
time_ConvertToSeconds
        ; Multiply 64-bit time by reciprocal of 90000 = &BA69DBDD x 2^-48
        ; to give a 32.16 fixed point result, then convert fraction to ms.
        ; Result is 32-bit accurate, meaning we have millisecond accuracy
        ; for 50 days, getting exponentially worse thereafter
        ; (32-bit second count won't wrap for 136 years).

        ;        a     b     c     d
        ; x                        0 .  0000  BA69  DBDD
        ;   --------------------------------------------
        ;                      DBDDa . DBDDb DBDDc
        ; +              BA69a BA69b . BA69c BA69d

        FunctionEntry "a2,a3,v1"
        LDMIA   a1, {a1, a3}
        MOV     a2, a1, LSR #16     ; c
        SUB     a1, a1, a2, LSL #16 ; d
        MOV     a4, a3, LSR #16     ; a
        SUB     a3, a3, a4, LSL #16 ; b

        MOV     lr, #&BA00
        ORR     lr, lr, #&69
        MUL     ip, lr, a4
        MOV     ip, ip, LSL #16
        MLA     ip, lr, a3, ip
        MUL     v1, a1, lr
        MUL     a1, a2, lr
        ADDS    v1, v1, a1, LSL #16
        ADC     ip, ip, a1, LSR #16

        MOV     lr, #&DB00
        ORR     lr, lr, #&DD
        MLA     ip, lr, a4, ip
        MUL     a1, lr, a3
        ADDS    v1, v1, a1, LSL #16
        ADC     ip, ip, a1, LSR #16
        MUL     a1, a2, lr
        ADDS    v1, v1, a1
        ADC     ip, ip, #0

        Pull    "a2,a3"
        ; Multiply fraction by 1000/1024
        SUB     a1, v1, v1, LSR #5
        ADD     a1, a1, v1, LSR #7
        ; Multiply by 2^10/2^32 to give integer millisecond result
        MOVS    a1, a1, LSR #22
        ; Round
        ADDCS   a1, a1, #1
        TEQ     a1, #1000
        MOVEQ   a1, #0
        ADDEQ   ip, ip, #1
        ; Return results
        STR     ip, [a2]
        STR     a1, [a3]
        Return  "v1"


; extern int64_t time_Transform(const int64_t *raw_time, const int64_t *ref_raw,
;                               const int64_t *ref_transformed, int32_t scale);

        EXPORT  time_Transform
time_Transform
        FunctionEntry "a3,v1,v2"
        MOV     ip, a4
        LDMIA   a2, {a3, a4}
        LDMIA   a1, {a1, a2}
        ; Subtract the reference point in the raw frame
        SUBS    a1, a1, a3
        SBC     a2, a2, a4
        ; Scale by distance from the reference point
        TEQ     ip, #0
        MOVEQ   a1, #0
        MOVEQ   a2, #0
        TEQNE   ip, #&10000
        BEQ     multiplication_done     ; simple, common cases

        ; ip = 16.16 multiplier
        ; a1,a2 = multiplicand

        ;    a  b  c  d
        ; x  s  s  s  e .  f
        ;   ----------------
        ;      af bf cf . df
        ; + ae be ce de
        ; + bs cs ds
        ; + cs ds
        ; + ds

        MOV     lr, ip, LSR #16     ; e
        SUB     ip, ip, lr, LSL #16 ; f

        MOV     v1, a2, LSR #16     ; a
        SUB     a2, a2, v1, LSL #16 ; b
        MUL     a4, v1, lr
        MUL     v2, v1, ip
        ADD     a4, v2, a4, LSL #16

        MOV     v1, a1, LSR #16     ; c
        SUB     a1, a1, v1, LSL #16 ; d
        MUL     a3, a1, ip
        MUL     v2, a1, lr
        ADDS    a3, v2, a3, LSR #16
        ADC     a4, a4, #0

        TST     lr, #1:SHL:15
        BEQ     no_sign_extension
        RSB     v2, a1, a1, LSL #16
        ADDS    a3, a3, v2, LSL #16
        ADC     a4, a4, v2, LSR #16
        ADD     a4, a4, v2
        ADD     a4, a4, v2, LSL #16
        RSB     v2, v1, v1, LSL #16
        ADD     a4, a4, v2
        ADD     a4, a4, v2, LSL #16
        RSB     v2, a2, a2, LSL #16
        ADD     a4, a4, v2, LSL #16
no_sign_extension

        MLA     a4, a2, lr, a4
        MUL     a1, v1, ip
        ADDS    a3, a3, a1
        ADC     a4, a4, #0

        MUL     a1, a2, ip
        MUL     a2, v1, lr
        ADDS    lr, a1, a2
        ADDCS   a4, a4, #1:SHL:16
        ADDS    a1, a3, lr, LSL #16
        ADC     a2, a4, lr, LSR #16
multiplication_done

        ; Add back on the reference point, this time in the transformed frame
        Pull    "a3"
        LDMIA   a3, {a3, a4}
        ADDS    a1, a1, a3
        ADC     a2, a2, a4
        Return  "v1,v2"


; extern int64_t time_ReadMonotonicTime(void);

        EXPORT  time_ReadMonotonicTime
time_ReadMonotonicTime
        FunctionEntry "v1-v4"
        SCPSR   I_bit, 0, lr,, v4
      [ HAL
        ; If HAL_IRQStatus(HAL_TimerDevice(0)) becomes set within the following
        ; code, then we can't know whether the counter value is pre or post
        ; the timer wrap, so we treat it as though it had just wrapped.
        ; Read the initial state.
        MOV     a1, #0
        CallHAL HAL_TimerDevice
        MOV     v3, a1
        CallHAL HAL_IRQStatus
        MOV     v2, a1
        ; Convert from HAL_CounterRead() to a count up, then scale to give us
        ; a figure in 90 kHz ticks.
        ; Note that since our multiplier is 10 bits, the maximum value we can
        ; handle being returned from HAL_CounterRead() is 2^22-1, corresponding
        ; to a CounterRate of **** 419 MHz ****.
        CallHAL HAL_CounterRead
        StaticBaseFromSL lr
        ADRVar  v1, lr, CounterPeriod
        LDMIA   v1, {a2-a4}
        TEQ     a2, #0
        BLEQ    FirstTime
        SUBS    a1, a2, a1
        MOVMI   a1, #0
        MUL     lr, a1, a3
        MOV     v1, lr, LSR a4
        ; Has timer wrapped?
        MOV     a1, v3
        CallHAL HAL_IRQStatus
        BICS    lr, a1, v2
        MOVNE   v1, #0
        ; If HAL_IRQStatus(HAL_TimerDevice(0)) is set then the OS monotonic
        ; time is 1 cs out of date (or potentially more).
        TST     a1, #1
      |
        ; If Timer0 bit becomes set in IRQREQA within the following code, then
        ; we can't know whether the Timer0 value is pre or post wrap, so we
        ; treat it as though it had just wrapped.
        ; Read the initial state.
        MOV     lr, #IOC
        LDRB    v2, [lr, #IOCIRQREQA]
        ; Multiply Timer0 value by 90000/2000000 = 0.045
        ; in binary this is approx 0.000010111000010100011110
        ; but we only need 10 sig figs because result will not be more than 900
        ; so 0.000010111 is close enough.
        STRB    lr, [lr, #Timer0LR]
        LDRB    a1, [lr, #Timer0LL]
        LDRB    a2, [lr, #Timer0LH]
        ORR     a4, a1, a2, LSL #8
        RSB     a4, a4, #&4E00
        ADDS    a4, a4, #  &1F
        MOVMI   a4, #0                  ; a4 = count up (19999 - count down)
        ADD     a1, a4, a4, LSL #1      ; a1 = a4 * 3
        RSB     v1, a4, a1, LSL #3      ; v1 = (a4 * 3) * 8 - a4 = a4 * 23
        MOV     v1, v1, LSR #9          ; v1 = a4 * 0.0449
        ; Has Timer0 wrapped?
        LDRB    a1, [lr, #IOCIRQREQA]
        BIC     lr, a1, v2
        TST     lr, #timer0_bit
        MOVNE   v1, #0
        ; If Timer0 bit is set in IRQREQA then the OS monotonic time is 1 cs
        ; out of date (or potentially more).
        TST     a1, #timer0_bit
      ]
        SWI     XOS_ReadMonotonicTime   ; wraps every 16 months or so
        ADDNE   a1, a1, #1              ; adjust if out of date
        RestPSR v4
        ; Multiply centisecond part by 900 = 2_1110000100
        MOV     a3, a1, LSL #10
        MOV     a4, a1, LSR #(32-10)
        SUBS    a3, a3, a1, LSL #7
        SBC     a4, a4, a1, LSR #(32-7)
        ADDS    a3, a3, a1, LSL #2
        ADC     a4, a4, a1, LSR #(32-2)
        ; Add on sub-centisecond part
        ADDS    a1, a3, v1
        ADC     a2, a4, #0
        Return  "v1-v4"

 [ HAL

FirstTime
        ; Called first time only
        ; On entry:
        ;   v1 -> CounterPeriod
        ; On exit:
        ;   CounterPeriod, CounterMultiplier, CounterShift initialised
        ;   a1 preserved
        ;   a2 = CounterPeriod
        ;   a3 = CounterMultiplier
        ;   a4 = CounterShift
        Entry   "a1"
        CallHAL HAL_CounterPeriod
        STR     a1, [v1, #0]
        CallHAL HAL_CounterRate
        MOV     a2, a1                  ; a2 = CounterRate (timer ticks per sec)

        SWI     XFPEmulator_ContextLength
        MOV     a4, a1
        MOV     a1, #ModHandReason_Claim
        SWI     XOS_Module              ; a3 -> our context block
        MOV     a1, a3
        SWI     XFPEmulator_InitContext
        SWI     XFPEmulator_ChangeContext

        LDFS    f0, =90000
        FLTS    f1, a2
        DVFS    f0, f0, f1
        STFS    f0, [sp, #-4]!

        SWI     XFPEmulator_ChangeContext
        MOV     a1, #ModHandReason_Free
        SWI     XOS_Module

        LDR     a2, [sp], #4            ; a2 = 90000/CounterRate in IEEE S format
        MOV     a3, a2, LSL #(31-22)
        MOVS    a3, a3, LSR #(32-9)
        ADC     a3, a3, #1:SHL:9        ; a3 = multiplier, accurate to 10 bits

        MOV     a4, a2, LSL #(31-30)
        MOV     a4, a4, LSR #(32-8)
        RSB     a4, a4, #127 + 9        ; a4 = bits to shift right: 127 is to
                                        ; compensate for the IEEE format, 9 is
                                        ; to counteract the multiplier being 2^9
                                        ; times bigger than "correct" size
        STMIB   v1, {a3, a4}
        LDR     a2, [v1, #0]
        EXIT


        AREA    |Asm$$Data|, DATA

CounterPeriod                           ; as returned from HAL, ie ticks per cs
        DCD     0
CounterMultiplier                       ; to convert from timer ticks to
        DCD     0                       ; 90 kHz ticks, use this multiplier
CounterShift                            ; and shift down by this amount
        DCD     0

 ]

        END
