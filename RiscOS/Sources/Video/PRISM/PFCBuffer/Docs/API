VECTOR TABLES

  give_data  ->  Called from a data source to a data sink; passes data to it
  free_data  ->  Called from a data sink to a data source; releases data
  tear_down  ->  Called from a data source to a data sink; forget all buffers
                 (the data sink is expected to call free_data for all buffers
                 it is holding).
  notify     ->  Communicate some important event (e.g. Stream Identified)

A data sink may refuse to release all buffers when told to tear down. See
e.g. documentation on SWI PFCBuffer_Destroy for the implications of doing
this.

Footnote:

  Vector table entries have SWI equivalents. They'll be defined with the
  same interface (just registers rather than C-style function prototypes)
  and at some defined place in all protocol modules - i.e SWI_Base + <n>
  to SWI_Base + <m>. In the same way, I'm expecting a need for a SWI to
  read and pass vector tables explicitly (ReadVectorTable, WriteVectorTable)
  which would be at SWI_Base + <a> and SWI_Base + <b> for any *core* PRISM
  component (i.e. not Video Control & co.).

PFCBuffer_Register

  R0 = Flags (0)
  R1 = My PRISM ID
  R2 = 0 or pointer to vector table

  R0 = Exit flags (0)
  R1 = PFCBuffer's PRISM ID
  R2 = 0 if R2=0 on entry, else pointer to PFC Buffer's vector table
  R3 = Session handle

  All other registers preserved

  Interrupts may be disabled briefly, overall state preserved
  Fast interrupts are enabled
  SWI is re-entrant

  This SWI must be called to establish a session with the PFC Buffer
  module. In calling it, PFC Buffer may establish links to other PRISM
  components that it believes are required. As a result, a common error
  from this SWI would be "Service unavailable".

  The swapping of PRISM IDs and vector tables is as per PRISM standard.

PFCBuffer_Create

  R0 = Flags:
       Bits  Meaning
       0-7   Type of buffer:
             0  Local copy buffer, network source
             1  MBuf direct buffer, network source
             2  Local copy buffer, file source
             3  Local copy buffer, RAM source
             4  RAM direct buffer, RAM source
             Other values are reserved and must not be used.
       8     If set, preferred buffer size is in R2, else use system default
       9     If set, child buffer handle is in R3,
             starting buffer pointer is in R4
       10-31 Reserved (0)
  R1 = Session handle
  R2 = Preferred buffer size if R0:8 set
  R3 = Child buffer handle if R0:9 set
  R4 = Child buffer start pointer if R0:9 set

  R0 = Exit flags:
       Bits  Meaning
       0     If set, vector table direct calls will NOT
             be used - go via. SWI fallbacks instead
       1-31  Reserved (0)
  R1 = Buffer handle

  All other registers preserved

  Interrupts may be disabled briefly, overall state preserved
  Fast interrupts are enabled
  SWI is re-entrant

  Once a session is established, a buffer must be created using this SWI.
  Buffers are identified by the buffer handle. A session can create as many
  buffers as free RAM allows.

  One buffer may reference the contents of another to allow multiple logical
  data streams relating to one copy of source data. Setting R0:9 on entry
  allows a client to provide a child buffer handle and pointer to the first
  block of required data in the child buffer in R3 and R4 respectively.

PFCBuffer_Options

  R0 = Flags (0)
  R1 = Session handle
  R2 = Buffer handle

  R0 = Exit flags (0)

  All other registers preserved

  Interrupts may be disabled briefly, overall state preserved
  Fast interrupts are enabled
  SWI is re-entrant

  This call modifies buffer attributes. Presently, there are no defined
  parameters that may be altered after a buffer is created, so this call
  is reserved for future expansion.

PFCBuffer_Destroy

  R0 = Flags
       Bits  Meaning
       0     If set, mark the buffer for termination once no longer in use,
             otherwise attempt to bring it down now.
  R1 = Session handle
  R2 = Buffer handle

  R0 = Exit flags (0)

  All other registers preserved

  Interrupts may be disabled briefly, overall state preserved
  Fast interrupts are enabled
  SWI is re-entrant

  This call tears down a buffer, freeing RAM claimed for it. To do this, the
  tear_down entry point in the vector table (or SWI equivalent) is called.
  Since the tear_down entry leads to the recipient calling back through
  free_data to release any claimed buffers, it may be the case that the
  "Buffer in use" gets returned; the buffer cannot be released at this time.

  A client may not need the buffer released immediately, just as soon as
  possible; thus if R0:0 is set, the tear_down is *not* called until all
  data has been released through calls to PFC Buffer's free_data entry point.
  On the whole, this makes one part of the system trust in another's ability
  to tidy up correctly, which isn't very defensive. For this reason, clients
  should ideally first try the SWI with R0:0 clear, then either return all
  errors if the buffer should have been freed without problems, or elect to
  try again with R0:0 set should "Buffer in use" be raised.

PFCBuffer_Deregister

  R0 = Flags (0)
  R1 = Session handle

  R0 = Exit flags (0)

  All other registers preserved

  Interrupts may be disabled briefly, overall state preserved
  Fast interrupts are enabled
  SWI is re-entrant
