/**************************************************************/
/* File   : Module.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: PFCBuffer is the cyclic buffer manager for PRISM. */
/*          See xxxx,xxx/FS for details.                      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 26-Feb-2001: Created.                             */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include <Global/RISCOS.h>
#include <Global/Services.h>
#include <Global/Upcall.h>
#include <swis.h>
#include <sys/errno.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "CallOut.h"
#include "Utils.h"
#include "PFCBHdr.h"
#include "PFCBuffer.h"

#include "Module.h"

/*
 * This macro, when defined, includes the code for the two debugging *-commands
 * You need to enable the commands in the CMHG header file too.
 */

#if CMHG_VERSION < 516
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif

/* RAM build support */

#ifndef ROM

  extern int messages_file(void);

  #ifdef DEFINE_ERRNO
    int __errno;
  #endif

#endif

/* Local statics */

static void * module_wsp                        = NULL;
static bool   clibrary_realloc_routine_is_buggy = false;

static bool   registered                        = false;
static bool   upcallv_claimed                   = false;
static bool   callback_pending_flag             = false;

/* Local functions */

static void              module_check_os_version      (void);
static void              module_atexit                (void);

static _kernel_oserror * module_claim_upcall_vector   (void);
static _kernel_oserror * module_release_upcall_vector (void);

static _kernel_oserror * module_try_to_register       (void);
static _kernel_oserror * module_try_to_deregister     (void);
static _kernel_oserror * module_register              (void);

//static void            callout_handler              (void * handle);
static _kernel_oserror * clients_list                 (void);

/**************************************************************/
/* module_check_os_version()                                  */
/*                                                            */
/* Set clibrary_realloc_routine_is_buggy non zero if the OS   */
/* version is sufficiently old, else set it to zero.          */
/*                                                            */
/* See also module_realloc.                                   */
/**************************************************************/

static void module_check_os_version(void)
{
  int os;

  (void) _swix(OS_Byte,
               _INR(0,2) | _OUT(1),

               129,
               0,
               255,

               &os);

  clibrary_realloc_routine_is_buggy = os <= 0xA4 ? true : false;
}

/**************************************************************/
/* module_atexit()                                            */
/*                                                            */
/* atexit() handler for the module. Note that this is only    */
/* correctly called if the module is built with CMHG 5.30 or  */
/* later.                                                     */
/**************************************************************/

static void module_atexit(void)
{
  dprintf(("Module", "module_atexit: Called\n"));

  callout_final(module_wsp);
  messages_file_close();

  #ifndef ROM

    (void) _swix(ResourceFS_DeregisterFiles,
                 _IN(0),

                 messages_file());

  #endif

  /* Release UpCallV and deregister with PRISM */

  module_release_upcall_vector();
  module_try_to_deregister();

  /* Send the "dying" service call */

  (void) _swix(OS_ServiceCall,
               _INR(0,4),

               PRISMModuleDying,
               Service_PRISM_Core,
               0,
               PFCBuffer_PRISMID,
               Module_VersionNumber);

  return;
}

/**************************************************************/
/* module_init()                                              */
/*                                                            */
/* Startup code, usual initialisation entry point stuff.      */
/*                                                            */
/* Parameters: As normal for a CMHG initialisation function.  */
/**************************************************************/

_kernel_oserror * module_init(CMHG_CONST char * cmd_fail, int podule_base, void * pw)
{
  _kernel_oserror * e;

  module_wsp = pw;

  (void) cmd_fail;
  (void) podule_base;

  #ifdef TRACE
    {
      debug_device dev = TML_OUTPUT;

      debug_initialise("PFCBuffer", "ADFS::4.$.PFCBDebug", NULL);
      debug_atexit();
      debug_set_screen_cornering(FALSE);
      debug_set_unbuffered_files(TRUE);
      debug_set_device(dev);
    }
  #endif

  /* Keep this after debuglib initialisation or you won't */
  /* see any debug output from within the atexit handler. */

  atexit(module_atexit);
  module_check_os_version();

  #ifndef ROM

    e = _swix(ResourceFS_RegisterFiles,
              _IN(0),

              messages_file());

    if (e != NULL) return e;

  #endif

  if (getenv(Module_Title "$Path"))
  {
    e = messages_file_open(Module_Title ":Messages");
  }
  else
  {
    e = messages_file_open("Resources:$.Resources.PRISM." Module_Title ".Messages");
  }

  #if CMHG_VERSION < 530

    /*
     * Earlier CMHGs won't call the atexit() handler if we return an
     * error here 'cos its bust. Could work around it but since there
     * is a fixed version available, insist on it.
     */

    #error You need CMHG 5.30 or later to build RTSPMB.

  #else

    if (e != NULL) return e;

    /* Register with PRISM - No Such SWI is hidden, other */
    /* errors are reported.                               */

    e = module_register();
    if (e != NULL && e->errnum != 0x1E6) return e;

  #endif

  if (
       _swix(OS_AddCallBack,
             _INR(0,1),

             callback_entry,
             pw)

       == NULL
     )
     callback_pending_flag = true;

  /* Claim UpCallV to see MPEG UpCalls and initialise the */
  /* callout library for dealing with those UpCalls.      */

  e = callout_init(pw); /* Must do it before claiming UpCallV, of course */

  if (e == NULL) return module_claim_upcall_vector();
  else           return e;
}

/**************************************************************/
/* module_claim_upcall_vector()                               */
/*                                                            */
/* Claims the UpCall vector for the purpose of receiving the  */
/* MPEG UpCall. A locking flag ensures multiple calls are     */
/* dealt with correctly.                                      */
/**************************************************************/

static _kernel_oserror * module_claim_upcall_vector(void)
{
  if (!upcallv_claimed)
  {
    _kernel_oserror * e;

    e = _swix(OS_Claim,
              _INR(0,2),

              UpCallV,
              upcall_entry,
              module_wsp);

    if (e == NULL) upcallv_claimed = true;
    return e;
  }

  return NULL;
}

/**************************************************************/
/* module_release_upcall_vector()                             */
/*                                                            */
/* Releases the UpCall vector. A locking flag ensures         */
/* multiple calls are dealt with correctly.                   */
/**************************************************************/

static _kernel_oserror * module_release_upcall_vector(void)
{
  if (upcallv_claimed)
  {
    _kernel_oserror * e;

    e = _swix(OS_Release,
              _INR(0,2),

              UpCallV,
              upcall_entry,
              module_wsp);

    if (e == NULL) upcallv_claimed = false;
    return e;
  }

  return NULL;
}

/**************************************************************/
/* module_try_to_register()                                   */
/*                                                            */
/* Attempts to register with PRISM. Exits if already          */
/* registered. "registered" is set to 1 if registration is    */
/* successful, else left at its previous value.               */
/**************************************************************/

static _kernel_oserror * module_try_to_register(void)
{
  _kernel_oserror * e;

  dprintf(("", "module_try_to_register: Called\n"));

  if (registered)
  {
    dprintf(("", "module_try_to_register: Already registered, exitting\n"));
    return NULL;
  }

  e = _swix(PRISM_ComponentRegister,
            _INR(0,4),

            0,
            PFCBuffer_00,
            PFCBuffer_PRISMID,
            Module_VersionNumber,
            Module_Help " © Pace 2000 (" Module_Date ")");

  if (e == NULL) registered = true;

  dprintf(("", "module_try_to_register: Finished, registered = %d\n", registered));

  return e;
}

/**************************************************************/
/* module_try_to_deregister()                                 */
/*                                                            */
/* Attempts to deregister with PRISM. Exits if not            */
/* registered. "registered" is set to 0 whether or not the    */
/* call to PRISM to deregister raises an error.               */
/**************************************************************/

static _kernel_oserror * module_try_to_deregister(void)
{
  _kernel_oserror * e;

  dprintf(("", "module_try_to_deregister: Called\n"));

  if (registered == false)
  {
    dprintf(("", "module_try_to_deregister: Not registered, exitting\n"));
    return NULL;
  }

  e = _swix(PRISM_ComponentDeregister,
            _INR(0,2),

            0,
            PFCBuffer_00,
            PFCBuffer_PRISMID);

  registered = false;

  dprintf(("", "module_try_to_deregister: Finished, e = %p\n", e));
  if (e) dprintf(("", "module_try_to_register: '%s'\n", e->errmess));

  return e;
}

/**************************************************************/
/* module_register()                                          */
/*                                                            */
/* Attempts to register with PRISM. If we get "SWI not known" */
/* and this isn't a ROM build, try loading PRISM. That should */
/* send the "started" service call around which leads to      */
/* another attempt to register later.                         */
/**************************************************************/

static _kernel_oserror * module_register(void)
{
  _kernel_oserror * e = module_try_to_register();

  if (e == NULL) return NULL;
  if (e->errnum != PRISM_NoSuchSWI) return e;

  #ifndef ROM

    /* Try to load PRISM - if it starts it should send round a */
    /* service call that'll prompt us to attempt registration again.   */

    _swix(OS_Module,
          _INR(0,1),

          1, /* Load */
          "System:Modules.PRISM.PRISM");

  #endif

  return NULL;
}

/**************************************************************/
/* callback_handler()                                         */
/*                                                            */
/* Standard callback handler. When invoked, assumes the       */
/* module has just started, and issues Service_PRISM_Core     */
/* / ModuleStarted.                                           */
/*                                                            */
/* Parameters: As normal for a CMHG callback handler.         */
/**************************************************************/

int callback_handler(_kernel_swi_regs * r, void * pw)
{
  (void) pw;
  (void) r;

  if (callback_pending_flag == false)
  {
    return 1;
  }

  callback_pending_flag = false;

  dprintf(("Module", "callback_handler: Sending Service_PRISM_Core\n"));

  _swix(OS_ServiceCall,
        _INR(0,4),

        PRISMModuleStarted,
        Service_PRISM_Core,
        0,
        PFCBuffer_PRISMID,
        Module_VersionNumber);

  return 1;
}

// /**************************************************************/
// /* callout_handler()                                          */
// /*                                                            */
// /* Callout handler used for UpCall_MPEG handling.             */
// /*                                                            */
// /* Parameters: The handle should point to a client structure. */
// /**************************************************************/
//
// static void callout_handler(void * handle)
// {
//   (void) handle;
//
//   return;
// }

/**************************************************************/
/* upcall_handler()                                           */
/*                                                            */
/* General UpCall handler.                                    */
/*                                                            */
/* Parameters: As normal for a CMHG generic veneer.           */
/**************************************************************/

_kernel_oserror * upcall_handler(_kernel_swi_regs * r, void * pw)
{
  (void) pw;
  (void) r;

//  if (r->r[0] == UpCall_MPEG)
//  {
//    timeout(callout_handler, (void *) c, 1 /* i.e. ASAP, give or take */);
//  }

  return NULL;
}

/**************************************************************/
/* swi_handler()                                              */
/*                                                            */
/* Simple SWI dispatch table.                                 */
/*                                                            */
/* Parameters: As normal for a CMHG SWI handler.              */
/**************************************************************/

_kernel_oserror * swi_handler(int swi_no, _kernel_swi_regs * r, void * pw)
{
  (void) pw;
  (void) r;

  switch(swi_no)
  {
    default:
      return error_BAD_SWI;
  }
}

/**************************************************************/
/* client_list()                                              */
/*                                                            */
/* List registered clients.                                   */
/**************************************************************/

static _kernel_oserror * clients_list(void)
{
  _kernel_oserror * e;
  const char      * buffer = NULL;
  size_t            len;
//  client          * list;
//
//  if (client_list == NULL)
//  {
    e = read_message("PC00", &buffer, &len);
    if (e != NULL) return e;

    printf("%.*s\n", len, buffer);
//  }
//  else
//  {
//    const char * info;
//
//    e = read_message("PC01", &buffer, &len);
//    if (e != NULL) return e;
//
//    printf("%.*s\n", len, buffer);
//
//    for (len = 0; len < 9; ++len)
//    {
//      printf("========");
//    }
//
//    printf("======\n");
//
//    for (list = client_list; list; list = list->next)
//    {
//      control * c = &list->ctrl;
//
//      info = c->protocol != 0 ? protocol_get_info_from_swi_base(c->protocol) : NULL;
//      if (info == NULL) info = "-";
//
//      printf("%08X %08X %08X   %-49s\n",
//             (int) list,
//             c->id,
//             c->protocol,
//             info);
//    }
//  }

  if (registered == false)
  {
    buffer = NULL;

    e = read_message("PA00", &buffer, &len);
    if (e != NULL) return e;

    printf("%.*s\n", len, buffer);
  }

  return NULL;
}

/**************************************************************/
/* command_line_handler()                                     */
/*                                                            */
/* Straightforward command handler.                           */
/*                                                            */
/* Parameters: As normal for a CMHG command line handler.     */
/**************************************************************/

_kernel_oserror * command_line_handler(CMHG_CONST char * a, int ac, int cmd_no, void * pw)
{
  (void) a;
  (void) ac;
  (void) pw;

  switch (cmd_no)
  {
    case CMD_PFCBufferClients:
      return clients_list();

    default:
      break;
  }

  return NULL;
}

/**************************************************************/
/* service_handler()                                          */
/*                                                            */
/* General service call handler.                              */
/*                                                            */
/* Parameters: As normal for a CMHG service call handler.     */
/**************************************************************/

void service_handler(int service_number, _kernel_swi_regs * r, void * pw)
{
  (void) pw;
  (void) r;

  dprintf(("Module", "service_handler: Called for &%08X (%d, %d, &%08X)\n", service_number, r->r[0], r->r[2], r->r[3]));

  switch (service_number)
  {
    case Service_Standby:
    {
      if (r->r[0] & (1u<<0))
      {
        //// Standby entered; tear down?
      }
    }
    break;

    case Service_PRISM_Core:
    {
      switch (r->r[0])
      {
        case PRISMSessionAborting:
        case PRISMCleanShutdown:
        case PRISMAbortiveShutdown:
        {
          //// Presently undefined
        }
        break;

        case PRISMModuleDying:
        {
          /* If this is PRISM, note that we're not registered anymore */

          if (r->r[3] == PRISM_PRISMID) registered = false;
        }
        break;

        case PRISMModuleStarted:
        {
          /* If this is PRISM, re-register with it */

          if (r->r[3] == PRISM_PRISMID) module_try_to_register();
        }
      }
    }

  } /* 'switch (service_number)' */
}

/**************************************************************/
/* module_realloc()                                           */
/*                                                            */
/* RISC OS 3.1's SVC mode realloc is broken, so here's our    */
/* own version. Use it if clibrary_realloc_routine_is_buggy   */
/* is set after calling module_check_os_version.              */
/*                                                            */
/* Parameters: As realloc.                                    */
/*                                                            */
/* Returns:    As realloc.                                    */
/**************************************************************/

void * module_realloc(void * ptr, size_t size)
{
  dprintf(("", "module_realloc(%p, %d)\n", ptr, size));

  if (clibrary_realloc_routine_is_buggy == false) return realloc(ptr, size);

  if (ptr == NULL)
  {
    return malloc(size);
  }

  if (size == 0)
  {
    free(ptr);
    return NULL;
  }
  else
  {
    const int    * rma_block = ptr;
    const size_t   newsize   = size - (rma_block[-1] - 4);
    char         * newptr;

    if (
         _swix(OS_Module,
               _IN(0) | _INR(2,3) | _OUT(2),

               0xD,
               ptr,
               newsize,

               &newptr)

         != NULL
       )
       return NULL;

     return newptr;
  }
}
