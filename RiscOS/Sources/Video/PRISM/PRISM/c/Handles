/**************************************************************/
/* File:    Handles.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage handles arrays.                            */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 21-Jun-2001 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <kernel.h>
#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "PRISM.h"

#include "Lists.h"
#include "Module.h"
#include "PRISMErr.h"
#include "Utils.h"

#include "Handles.h"

/* Local variables */

static handles * handles_list = NULL;

/* Local functions */

static _kernel_oserror * handles_resize_array     (handles * h, int max_handle, int allowed);
static int               handles_find_spare_entry (handles * h, int start_handle);

/**************************************************************/
/* handles_resize_array()                                     */
/*                                                            */
/* Resize a given handles entry's array to the given amount.  */
/*                                                            */
/* Parameters: Pointer to the handles entry to update;        */
/*                                                            */
/*             Highest handle number to accommodate (i.e.     */
/*             number of array entries minus one).            */
/*                                                            */
/*             Highest allowed entry number, or 0 for default */
/*             value of 65535.                                */
/**************************************************************/

static _kernel_oserror * handles_resize_array(handles * h, int max_handle, int allowed)
{
  unsigned int * new_array;

  dprintf(("handles",
           "handles_resize_array: Called with &%08X, max_handle %d, allowed %d\n", (int) h, max_handle, allowed));

  if (allowed == 0) allowed = 65535;
  if (max_handle > allowed) return make_error(prism_ERROR_ALL_HANDLES_USED, 0);

  new_array = module_realloc(h->entries, (max_handle + 1) * sizeof(unsigned int));
  if (new_array == NULL) return make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);

  h->entries    = new_array;
  h->max_handle = max_handle;

  dprintf(("handles",
           "handles_resize_array: Successful\n"));

  return NULL;
}

/**************************************************************/
/* handles_find_spare_entry()                                 */
/*                                                            */
/* Find the lowest numbered spare array entry in the given    */
/* handles array.                                             */
/*                                                            */
/* Parameters: Handles entry to look in;                      */
/*                                                            */
/*             Lowest array index to start looking at.        */
/*                                                            */
/* Returns:    Array index, or 0 for "none found".            */
/**************************************************************/

static int handles_find_spare_entry(handles * h, int start_handle)
{
  int i;

  /* If there are no entries yet, max_handle is 0 */

  for (i = start_handle; i <= h->max_handle; i++)
  {
    if (h->entries[i] == 0) return i;
  }

  /* Nothing found? Return zero then */

  return 0;
}

/**************************************************************/
/* handles_allocate_handle()                                  */
/*                                                            */
/* Handle the PRISM_AllocateHandle SWI.                       */
/*                                                            */
/* Parameters: Pointer to register block.                     */
/**************************************************************/

_kernel_oserror * handles_allocate_handle(_kernel_swi_regs * r)
{
  handles * h = 0;
  int       free_entry;

  dprintf(("handles",
           "handles_allocate_handle: Called with &%08X and &%08X (&%08X, %d)\n", r->r[1], r->r[2], r->r[3], r->r[4]));

  if (r->r[3] == 0)                   return make_error(prism_ERROR_NO_ZEROS_ALLOWED, 0);
  if (r->r[4] < 0 || r->r[4] > 65535) return make_error(prism_ERROR_INVALID_PARAMETERS, 1, "Handles_AllocateHandle");

  if (r->r[2] != 0) h = *((handles **) (r->r[2]));

  dprintf(("handles",
           "handles_allocate_handle: Handles entry at &%08X\n", (int) h));

  if (h == 0)
  {
    /* Alloate an new list entry */

    RetError(lists_add_to_head((void **) &handles_list, sizeof(handles)));

    h = handles_list;
    h->prism_id = r->r[1];

    /* Allocate a 1 entry array (so max_handle = 0) for the PRISM ID */

    RetError(handles_resize_array(h, 0, r->r[4]));

    h->entries[0] = (unsigned int) h;
  }
  else if (h->prism_id != r->r[1])
  {
    /* Entry 0 should be the PRISM ID; it didn't match */

    return make_error(prism_ERROR_INVALID_ARRAY_BASE, 0);
  }

  /* Find an existing free array entry */

  free_entry = h->free_handle;

  dprintf(("handles",
           "handles_allocate_handle: Free handle is presently %d\n", free_entry));

  if (free_entry == 0)
  {
    RetError(handles_resize_array(h, h->max_handle + 1, r->r[4]));
    free_entry = h->max_handle;
  }

  /* Fill in this entry */

  h->entries[free_entry] = r->r[3];

  /* If we reclaimed an item, have to find a new spare entry */

  if (h->free_handle != 0)
  {
    h->free_handle = handles_find_spare_entry(h, free_entry + 1);

    dprintf(("handles",
             "handles_allocate_handle: Free handle updated to %d\n", h->free_handle));
  }

  /* On exit... */

  r->r[0] = 0;
  r->r[1] = free_entry;
  r->r[2] = (int) h->entries;
  r->r[3] = h->max_handle;

  dprintf(("handles",
           "handles_allocate_handle: Successful\n"));

  return NULL;
}

/**************************************************************/
/* handles_forget_handle()                                    */
/*                                                            */
/* Handle the PRISM_ForgetHandle SWI.                         */
/*                                                            */
/* Parameters: Pointer to register block.                     */
/**************************************************************/

_kernel_oserror * handles_forget_handle(_kernel_swi_regs * r)
{
  handles * h      = 0;
  int       handle = r->r[3];
  int       max;

  dprintf(("handles",
           "handles_forget_handle: Called with &%08X and &%08X for %d\n", r->r[1], r->r[2], handle));

  if (r->r[2] != 0) h = *((handles **) (r->r[2]));

  dprintf(("handles",
           "handles_forget_handle: Handles entry at &%08X, lowest free handle is %d\n", (int) h, h->free_handle));

  /* Sanity checks */

  if (h == 0 || handle < 1 || handle > h->max_handle)
  {
    return make_error(prism_ERROR_INVALID_PARAMETERS, 1, "Handles_ForgetHandle");
  }
  else if (h->prism_id != r->r[1])
  {
    /* Entry 0 should be the PRISM ID; it didn't match */

    return make_error(prism_ERROR_INVALID_ARRAY_BASE, 0);
  }
  else if (h->entries[handle] == 0)
  {
    return make_error(prism_ERROR_HANDLE_NOT_IN_USE, 0);
  }

  /* Clear the handle entry */

  h->entries[handle] = 0;

  /* If this is at the top of the array, shrink it */

  max = h->max_handle;

  if (handle == max)
  {
    while (max > 0 && h->entries[max] == 0) max--;

    if (max == 0)
    {
      free(h->entries), h->entries = NULL;
      RetError(lists_remove((void **) &handles_list, (void *) h));
    }
    else
    {
      if (h->free_handle >= max) h->free_handle = 0;
      RetError(handles_resize_array(h, max, 0));
    }
  }
  else
  {
    if (h->free_handle == 0 || handle < h->free_handle) h->free_handle = handle;
  }

  /* On exit... */

  r->r[0] = 0;
  r->r[2] = h != NULL ? (int) h->entries : 0;
  r->r[3] = max;

  /* Finished */

  dprintf(("handles",
           "handles_forget_handle: Successful, free handle now %d\n", h->free_handle));

  return NULL;
}

/**************************************************************/
/* handles_shutdown()                                         */
/*                                                            */
/* Shut down the handles system.                              */
/**************************************************************/

void handles_shutdown(void)
{
  handles * h = handles_list;

  dprintf(("handles",
           "handles_shutdown: Called\n"));

  while (h != NULL)
  {
    free(h->entries);
    h = h->next;
  }

  lists_remove_all((void **) &handles_list);

  dprintf(("handles",
           "handles_shutdown: Successful\n"));
}
