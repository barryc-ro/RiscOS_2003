/**************************************************************/
/* File:    Lists.c                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage doubly-linked lists. The structures given  */
/*          must have a next and prev word as the first and   */
/*          second items respectively; the list is recorded   */
/*          through a pointer to the head item.               */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 21-Jun-2001 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>

#include <kernel.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "PRISM.h"

#include "Utils.h"

#include "Lists.h"

/* Local structures */

typedef struct list
{
  struct list * next;
  struct list * prev;

  /* ... */
}
list;

/**************************************************************/
/* lists_add_to_head()                                        */
/*                                                            */
/* Add an item to the head of the given list.                 */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer,       */
/*             updated on exit;                               */
/*                                                            */
/*             Size of the item to add in bytes.              */
/**************************************************************/

_kernel_oserror * lists_add_to_head(void ** head, size_t size)
{
  list ** lhead = (list **) head;
  list  * new;

  dprintf(("Lists", "lists_add_to_head: Called (head = &%08X, size = %d)\n", (int) head, size));

  if (head == NULL)
  {
    return make_error(prism_ERROR_INVALID_PARAMETERS,
                      1,
                      "lists_add_to_head");
  }

  new = calloc(size, 1);
  if (new == NULL) return make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "lists_add_to_head: New item is at &%08X\n", (int) new));

  if (*lhead != NULL)
  {
    (*lhead)->prev = new;
    new->next      = *lhead;
  }

  *lhead = new;

  dprintf(("Lists", "lists_add_to_head: Successful\n"));

  return NULL;
}

/**************************************************************/
/* lists_add_to_tail()                                        */
/*                                                            */
/* Add an item to the tail of the given list.                 */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer, may   */
/*             be updated on exit;                            */
/*                                                            */
/*             Pointer to a void *, updated to point to the   */
/*             new item on exit;                              */
/*                                                            */
/*             Size of the item to add.                       */
/**************************************************************/

_kernel_oserror * lists_add_to_tail(void ** head, void ** added, size_t size)
{
  list ** lhead = (list **) head;
  list  * new;

  dprintf(("Lists", "lists_add_to_tail: Called (head = &%08X, size = %d)\n", (int) head, size));

  if (head == NULL || added == NULL)
  {
    return make_error(prism_ERROR_INVALID_PARAMETERS,
                      1,
                      "lists_add_to_tail");
  }

  new = calloc(size, 1);
  if (new == NULL) return make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "lists_add_to_tail: New item is at &%08X\n", (int) new));

  if (*lhead != NULL)
  {
    list * tail;

    for (tail = (*lhead); tail->next != NULL; tail = tail->next);

    tail->next = new;
    new->prev  = tail;
  }
  else
  {
    *lhead = new;
  }

  *added = new;

  dprintf(("Lists", "lists_add_to_tail: Successful\n"));

  return NULL;
}

/**************************************************************/
/* lists_add_at_given()                                       */
/*                                                            */
/* Add an item before the given one in the list.              */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer, may   */
/*             be updated on exit;                            */
/*                                                            */
/*             Pointer to a void *, updated to point to the   */
/*             new item on exit;                              */
/*                                                            */
/*             Pointer to item to add after (or NULL to add   */
/*             at the list's tail);                           */
/*                                                            */
/*             Size of the item to add.                       */
/**************************************************************/

_kernel_oserror * lists_add_at_given(void ** head, void ** added, void * position, size_t size)
{
  list ** lhead = (list **) head;
  list *  lpos  = (list  *) position;
  list *  new;

  dprintf(("Lists", "lists_add_at_given: Called (head = &%08X, position = &%08X, size = %d)\n", (int) head, (int) position, size));

  if (head == NULL || added == NULL)
  {
    return make_error(prism_ERROR_INVALID_PARAMETERS,
                      1,
                      "lists_add_at_given");
  }

  if (position == NULL) return lists_add_to_tail(head, added, size);

  new = calloc(size, 1);
  if (new == NULL) return make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "lists_add_at_given: New item is at &%08X\n", (int) new));

  if (lpos->prev != NULL) lpos->prev->next = new;

  new->prev  = lpos->prev;
  lpos->prev = new;
  new->next  = lpos;

  *added = new;

  if (*lhead == lpos) *lhead = new;

  dprintf(("Lists", "lists_add_at_given: Successful\n"));

  return NULL;
}

/**************************************************************/
/* lists_remove()                                             */
/*                                                            */
/* Remove an item from the given list. If the item held any   */
/* pointers to any allocated memory (apart from other list    */
/* items), that memory should be freed before calling here.   */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer, may   */
/*             be updated on exit;                            */
/*                                                            */
/*             Pointer to the item to remove.                 */
/**************************************************************/

_kernel_oserror * lists_remove(void ** head, void * item)
{
  list ** lhead = (list **) head;
  list *  litem = (list *)  item;

  dprintf(("Lists", "lists_remove: Called (head = &%08X, item = &%08X)\n", (int) head, (int) item));

  if (head == NULL || item == NULL)
  {
    return make_error(prism_ERROR_INVALID_PARAMETERS,
                      1,
                      "lists_remove");
  }

  if (litem->next != NULL) litem->next->prev = litem->prev;
  if (litem->prev != NULL) litem->prev->next = litem->next;
  else *lhead = litem->next;

  free(litem);

  dprintf(("Lists", "lists_remove: Successful\n"));

  return NULL;
}

/**************************************************************/
/* lists_remove_all()                                         */
/*                                                            */
/* Remove all items from the given list. If the items hold    */
/* any pointers to allocated memory (apart from other list    */
/* items), that memory should be freed before calling here.   */
/*                                                            */
/* Parameters: Pointer to the head of the list pointer,       */
/*             updated on exit to be NULL.                    */
/**************************************************************/

_kernel_oserror * lists_remove_all(void ** head)
{
  list ** lhead = (list **) head;
  list  * item;

  dprintf(("Lists", "lists_remove_all: Called (head = &%08X)\n", (int) head));

  if (head == NULL)
  {
    return make_error(prism_ERROR_INVALID_PARAMETERS,
                      1,
                      "lists_remove_all");
  }

  while (*lhead != NULL)
  {
    item = (*lhead)->next;
    free(*lhead);
    (*lhead) = item;
  }

  dprintf(("Lists", "lists_remove_all: Successful\n"));

  return NULL;
}
