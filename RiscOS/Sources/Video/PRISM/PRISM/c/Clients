/**************************************************************/
/* File:    Clients.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage client lists.                              */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 21-Jun-2001 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include <kernel.h>
#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "PRISM/PRISM.h"

#include "Lists.h"
#include "PRISMErr.h"
#include "Utils.h"

#include "Clients.h"

/* Local variables */

static client ** client_array = NULL;
static size_t client_max = 0;

/**************************************************************/
/* clients_print_list()                                       */
/*                                                            */
/* Print a list of currently registered clients, as for       */
/* "*PRISMClients".                                           */
/**************************************************************/

_kernel_oserror * clients_print_list(void)
{
  _kernel_oserror * e;
  const char      * buffer = NULL;
  size_t            len;

  if (client_max == 0)
  {
    e = read_message("PCl00", &buffer, &len);

    if (e != NULL)
    {
      return e;
    }

    /* Print it - length-limit as we're using MessageTrans_Lookup */
    /* (albeit indirectly) in its "give us the buffer" mode, so   */
    /* the string is terminated by char 10 rather than NUL.       */

    printf("%.*s\n", len, buffer);
  }
  else
  {
    e = read_message("PCl01", &buffer, &len);

    if (e != NULL)
    {
      return e;
    }

    printf("%.*s\n", len, buffer);

    {
      size_t len;

      for (len = 0; len < 9; ++len)
      {
        printf("========");
      }

      printf("=======\n");
    }

    {
      size_t c;

      for (c = 1; c <= client_max; c++)
      {
        printf("%08X   ", client_array[c]->id);

        if (client_array[c]->items == NULL)
        {
          /* Print "None" */
          e = read_message("PCl02", &buffer, &len);

          if (e != NULL)
          {
            return e;
          }

          printf("%.*s\n", len, buffer);
        }
        else
        {
          /* Enumerate the components */
          printf("\n");
        }
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* clients_register()                                         */
/*                                                            */
/* Handle the PRISM_Register SWI.                             */
/*                                                            */
/* Parameters: Pointer to register block.                     */
/**************************************************************/

_kernel_oserror * clients_register(_kernel_swi_regs * r)
{
  _kernel_oserror * e;
  component       * compo;
  client          * c;

  dprintf(("Clients", "clients_register: Called\n"));

  (void) r;

  compo = components_find_by_id(PRISM_PRISMID);

  if (compo == NULL)
  {
    dprintf(("Clients", "clients_register: Can't find PRISM in components list!\n"));
    return make_error(prism_ERROR_INTERNAL_ERROR, 0);
  }

  c = malloc(sizeof(client));

  if (c == NULL)
  {
    dprintf(("Clients", "clients_register: malloc failed for new client block\n"));
    return make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);
  }

  e = _swix(PRISM_AllocateHandle,
            _INR(0,4)|_OUTR(1,3),

            0,
            PRISM_PRISMID,
            &client_array,
            c,
            0,

            &c->id,
            &client_array,
            &client_max);

  if (e != NULL)
  {
    dprintf(("Clients", "clients_register: PRISM_AllocateHandle failed: %s\n", e->errmess));
    free(c);
    return e;
  }

  c->items = NULL;

  compo->clients++;

  r->r[0] = 0;
  r->r[1] = c->id;

  return NULL;
}

/**************************************************************/
/* clients_deregister()                                       */
/*                                                            */
/* Handle the PRISM_Register SWI.                             */
/*                                                            */
/* Parameters: Pointer to register block.                     */
/**************************************************************/

_kernel_oserror * clients_deregister(_kernel_swi_regs * r)
{
  _kernel_oserror * e;
  component       * compo;
  client          * c = NULL;

  dprintf(("Clients", "clients_deregister: Called\n"));

  (void) r;

  compo = components_find_by_id(PRISM_PRISMID);

  if (compo == NULL)
  {
    dprintf(("Clients", "clients_deregister: Can't find PRISM in components list!\n"));
    return make_error(prism_ERROR_INTERNAL_ERROR, 0);
  }

  if (r->r[1] <= client_max) /* otherwise PRISM_ForgetHandle will flag the error */
  {
    c = client_array[r->r[1]];
  }

  e = _swix(PRISM_ForgetHandle,
            _INR(0,3)|_OUTR(2,3),

            0,
            PRISM_PRISMID,
            &client_array,
            r->r[1],

            &client_array,
            &client_max);

  if (e != NULL)
  {
    dprintf(("Clients", "clients_deregister: PRISM_ForgetHandle failed: %s\n", e->errmess));
    return e;
  }

  free(c);

  compo->clients--;

  r->r[0] = 0;

  return NULL;
}

/**************************************************************/
/* clients_shutdown()                                         */
/*                                                            */
/* Shut down the client registry.                             */
/**************************************************************/

void clients_shutdown(void)
{
  size_t c;

  dprintf(("Clients", "clients_shutdown: Called\n"));

  for (c = 1; c <= client_max; c++)
  {
    if (client_array[c] != NULL)
    {
      lists_remove_all((void **) &(client_array[c]->items));
    }

    free(client_array[c]);
  }

  dprintf(("Clients", "clients_shutdown: Successful\n"));
}
