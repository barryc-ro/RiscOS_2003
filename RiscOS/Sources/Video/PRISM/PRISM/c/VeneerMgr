/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): 
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Direct-call veneer management
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <stdint.h>
#include "swis.h"

#include "PRISM/PRISM.h"

#include "Components.h"
#include "PRISMErr.h"
#include "VeneerMgr.h"
#include "Utils.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/
typedef struct
{
  uint32_t offset: 24;
  uint32_t opcode: 8;
} b_bl_instruction_t;

typedef struct
{
  uint32_t offset: 12;
  uint32_t opcode: 20;
} immoff_instruction_t;

typedef struct
{
  const void *raw_function;
  int32_t stack_usage;
} entry_t;

typedef struct
{
  const void *code_template;
  size_t poff_fn;
  size_t poff_ws;
  size_t poff_b;
  size_t poff_immoff0;
  size_t poff_immoff1;
} entry_template_t;

typedef struct
{
  const void *code_template;
  size_t code_size;
  size_t poff_ldr;
  size_t poff_imm0;
  size_t poff_imm1;
  size_t poff_immoff;
} common_template_t;

typedef struct
{
  const entry_template_t *entry;
  const common_template_t *common;
} veneer_template_t;

typedef struct block_header
{
  /* Three words to pad OS_Heap block to quad-word alignment */
  struct block_header *next;
  prism_id_t id;
  uint32_t unused;
  /* The function pointers followed by the veneer code itself */
  uint8_t pointers[1];
} block_header_t;


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* File scope Global variables
*****************************************************************************/
extern veneer_template_t veneertmpl_Template[2][5];
static block_header_t *static_BlockList;


/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/


/*****************************************************************************
* Functions
*****************************************************************************/

/*****************************************************************************
* veneermgr_Init
*
* Must be called on module initialisation
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void veneermgr_Init(void)
{
  static_BlockList = NULL;
}

/*****************************************************************************
* veneermgr_Final
*
* Must be called on module finalisation
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
void veneermgr_Final(void)
{
  while (static_BlockList != NULL)
  {
    block_header_t *ptr = static_BlockList;
    static_BlockList = ptr->next;
    free(ptr);
  }
}

/*****************************************************************************
* veneermgr_Cleanup
*
* Tidy up after an abnormal exit of a PRISM component
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  id: PRISM ID of exiting component
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void veneermgr_Cleanup(prism_id_t id)
{
  while (static_BlockList != NULL && static_BlockList->id == id)
  {
    block_header_t *ptr = static_BlockList;
    static_BlockList = ptr->next;
    free(ptr);
  }
  if (static_BlockList != NULL)
  {
    block_header_t *oldptr = static_BlockList;
    block_header_t *ptr;
    ptr = oldptr->next;
    while (ptr != NULL)
    {
      if (ptr->id == id)
      {
        oldptr->next = ptr->next;
        free(ptr);
      }
      else
      {
        oldptr = ptr;
      }
      ptr = oldptr->next;
    }
  }
}

/*****************************************************************************
* veneermgr_Create
*
* Creates veneers
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  flags:      see SWI PRISM_CreateVeneers
*  table:      pointer to table of (function pointer, stack usage) entries
*  table_size: number of entries in table
*  workspace:  either module workspace, or module private word
*  id:         PRISM ID of component containing the functions the veneers point to
*
* Outputs
*  veneers:    pointer to the created veneer entry points (at quadword intervals)
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *veneermgr_Create(uint32_t flags, const void *table, size_t table_size, const void *workspace, prism_id_t id, void **veneers)
{
  uint32_t callee_type = flags & 0xF;
  const entry_t *table_entry = table;
  uint32_t ncommonblocks = 0;
  struct
  {
    int32_t stack_usage;
    size_t start_offset;
    size_t end_offset;
  } *commonblocks;
  uint32_t table_index;
  
  /* Sanity check the arguments */
  if (callee_type > 1)
  {
    return make_error(prism_ERROR_UNKNOWN_VENEER_CALLEE_TYPE, 0);
  }
  if (table == NULL || table_size == 0)
  {
    return make_error(prism_ERROR_INVALID_PARAMETERS, 1, "PRISM_CreateVeneers");
  }
  if (id != NULL)
  {
    component *c = components_find_by_id(id);
    if (c == NULL)
    {
      return make_error(prism_ERROR_PRISM_ID_NOT_KNOWN, 0);
    }
  }
  commonblocks = malloc(table_size * sizeof(*commonblocks)); /* the absolute maximum it could be */
  if (commonblocks == NULL)
  {
    return make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);
  }
  
  /* First pass: calculate the total memory requirement for the veneers, */
  /* and work out the offsets to each common code block */
  for (table_index = 0; table_index < table_size; table_index++)
  {
    int32_t stack_usage = table_entry[table_index].stack_usage;
    uint32_t block_index;
    for (block_index = 0; block_index < ncommonblocks; block_index++)
    {
      if (commonblocks[block_index].stack_usage == stack_usage)
      {
        break;
      }
    }
    if (block_index == ncommonblocks) /* a new stack usage that we hadn't seen yet */
    {
      const common_template_t *common_template;
      uint32_t template_index = stack_usage + 1;
      if (template_index > 4u)
      {
        template_index = 4u;
      }
      common_template = veneertmpl_Template[callee_type][template_index].common;
      if (common_template != NULL)
      {
        commonblocks[ncommonblocks].stack_usage = stack_usage;
        if (ncommonblocks == 0)
        {
          commonblocks[ncommonblocks].start_offset = ((table_size * 20 + 15) &~ 15) + 4;
        }
        else
        {
          commonblocks[ncommonblocks].start_offset = commonblocks[ncommonblocks-1].end_offset;
        }
        commonblocks[ncommonblocks].end_offset = commonblocks[ncommonblocks].start_offset + common_template->code_size;
        ncommonblocks++;
      }
    }
  }
  
  /* Allocate memory for the veneers */
  {
    block_header_t *block = malloc(12 + (ncommonblocks == 0 ? (table_size * 20 + 15) &~ 15 : commonblocks[ncommonblocks-1].end_offset));
    uint8_t *ptr;
    if (block == NULL)
    {
      free(commonblocks);
      return make_error(prism_ERROR_MEMORY_EXHAUSTED, 0);
    }
    block->next = static_BlockList;
    static_BlockList = block;
    block->id = id;
    block->unused = 0;
    ptr = block->pointers;
    
    /* Fill in the function pointers */
    for (table_index = 0; table_index < table_size; table_index++)
    {
      *(const void **)(ptr + table_index * 4) = ptr + ((table_size * 4 + 15) &~ 15) + table_index * 16;
    }
    for (; table_index < ((table_size + 3) &~ 3); table_index++)
    {
      *(const void **)(ptr + table_index * 4) = 0; /* quad-word align with nulls */
    }
    ptr += (table_size * 4 + 15) &~ 15;
    
    /* Second pass: create the individual veneer entry points */
    for (table_index = 0; table_index < table_size; table_index++)
    {
      const entry_template_t *entry_template;
      int32_t stack_usage = table_entry[table_index].stack_usage;
      uint32_t template_index = table_entry[table_index].stack_usage + 1;
      if (template_index > 4u)
      {
        template_index = 4u;
      }
      entry_template = veneertmpl_Template[callee_type][template_index].entry;
      memcpy(ptr, entry_template->code_template, 16);
      *(const void **)(ptr + entry_template->poff_fn) = table_entry[table_index].raw_function;
      if (entry_template->poff_ws != -1)
      {
        *(const void **)(ptr + entry_template->poff_ws) = workspace;
      }
      {
        uint32_t block_index;
        for (block_index = 0; block_index < ncommonblocks; block_index++)
        {
          if (commonblocks[block_index].stack_usage == stack_usage)
          {
            (*(b_bl_instruction_t *)(ptr + entry_template->poff_b)).offset +=
                ((block->pointers + commonblocks[block_index].start_offset) - (ptr + entry_template->poff_b)) >> 2;
            break;
          }
        }
      }
      if (entry_template->poff_immoff0 != -1)
      {
        (*(immoff_instruction_t *)(ptr + entry_template->poff_immoff0)).offset = (stack_usage - 1) * 4;
      }
      if (entry_template->poff_immoff1 != -1)
      {
        (*(immoff_instruction_t *)(ptr + entry_template->poff_immoff1)).offset = (stack_usage - 1) * 4;
      }
      ptr += 16;
    }
    
    /* Finally, create the common code blocks */
    if (ncommonblocks != 0)
    {
      uint32_t block_index;
      *(const void **)ptr = workspace;
      ptr += 4;
      for (block_index = 0; block_index < ncommonblocks; block_index++)
      {
        const common_template_t *common_template;
        int32_t stack_usage = commonblocks[block_index].stack_usage;
        uint32_t template_index = commonblocks[block_index].stack_usage + 1;
        if (template_index > 4u)
        {
          template_index = 4u;
        }
        common_template = veneertmpl_Template[callee_type][template_index].common;
        memcpy(ptr, common_template->code_template, common_template->code_size);
        (*(immoff_instruction_t *)(ptr + common_template->poff_ldr)).offset -= /* since sign is already -ve */
            (block->pointers + ((table_size * 20 + 15) &~ 15)) - (ptr + common_template->poff_ldr);
        if (common_template->poff_imm0 != -1)
        {
          *(uint8_t *)(ptr + common_template->poff_imm0) = stack_usage - 1;
        }
        if (common_template->poff_imm1 != -1)
        {
          *(uint8_t *)(ptr + common_template->poff_imm1) = stack_usage * 4;
        }
        if (common_template->poff_immoff != -1)
        {
          (*(immoff_instruction_t *)(ptr + common_template->poff_immoff)).offset = (stack_usage - 1) * 4;
        }
        ptr += common_template->code_size;
      }
    }
    
    _swix(OS_SynchroniseCodeAreas, _INR(0,2),
          1,
          block,
          block->pointers + (ncommonblocks == 0 ? (table_size * 20 + 15) &~ 15 : commonblocks[ncommonblocks-1].end_offset) - 4);
    
    *veneers = block->pointers;
  }
  
  free(commonblocks);
  
  return NULL;
}

/*****************************************************************************
* veneermgr_Free
*
* Frees veneers
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  veneers: veneer struct (as returned from veneermgr_Create)
*  id:      PRISM ID of component containing the functions the veneers point to
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
_kernel_oserror *veneermgr_Free(void *veneers, prism_id_t id)
{
  block_header_t *block = (block_header_t *) ((char *) veneers - 12);
  if (block->id != id)
  {
    return make_error(prism_ERROR_INCORRECT_PRISM_ID, 0);
  }
  if (block == static_BlockList)
  {
    static_BlockList = block->next;
    free(block);
  }
  else
  {
    block_header_t *ptr;
    for (ptr = static_BlockList; ptr != NULL; ptr = ptr->next)
    {
      if (ptr->next == block)
      {
        ptr->next = block->next;
        free(block);
        break;
      }
    }
  }
  return NULL;
}


/*****************************************************************************
* END OF FILE
*****************************************************************************/
