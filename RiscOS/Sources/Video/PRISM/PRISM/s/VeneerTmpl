;*****************************************************************************
; $Id$
; $Name$
;
; Author(s):  Ben Avison
; Project(s):
;
; ----------------------------------------------------------------------------
; Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
;
; The copyright in this material is owned by Pace Micro Technology PLC
; ("Pace").  This material is regarded as a highly confidential trade secret
; of Pace.  It may not be reproduced, used, sold or in any other way exploited
; or transferred to any third party without the prior written permission of
; Pace.
;
; ----------------------------------------------------------------------------
; Purpose: Templates for run-time veneer creation
;
; ----------------------------------------------------------------------------
; History: See source control system log
;
;****************************************************************************/

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System

        EXPORT  veneertmpl_Template

        AREA    |Asm$$Code|, CODE, READONLY


Type0_OS_Entry
        DCD     Type0_OS_Entry_Template           ; address of template (length 16 bytes)
        DCD     %F02-Type0_OS_Entry_Template      ; offset to patch with pointer to raw function
        DCD     -1                                ; offset to patch with workspace
        DCD     %F01-Type0_OS_Entry_Template      ; offset to patch B(L) to common code
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type0_OS_Entry_Template
        STMDB   R13!,{R0-R4,R10,R14}
        LDR     R1,[PC]
01      B       .
02      ANDEQ   R0,R0,R0 ; DCD 0

Type0_OS_Common
        DCD     Type0_OS_Common_Template          ; address and length of template
        DCD     Type0_OS_Common_TemplateEnd - Type0_OS_Common_Template
        DCD     %F01-Type0_OS_Common_Template     ; offset to patch PC-relative LDR of workspace
        DCD     -1                                ; offset to patch immediate with args-1
        DCD     -1                                ; offset to patch immediate with args*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type0_OS_Common_Template
        TEQ     PC,PC
        MRSEQ   R4,CPSR
        MOVNE   R4,PC
        ORR     R3,R4,#SVC_mode
        MSREQ   CPSR_c,R3
        TEQNEP  R3,#0
        MOV     R0,R12
01      LDR     R12,.
        MOV     R10,R13,LSR#20
        MOV     R10,R10,LSL#20
        ADD     R10,R10,#540
        STR     R14,[R13,#-4]!
        MOV     R14,PC
        MOV     PC,R1
        LDR     R14,[R13],#4
        BIC     R4,R4,#V_bit:OR:Z_bit ; so condition remains NE after TEQP
        TEQ     R0,#0
        ORRNE   R4,R4,#V_bit
        TEQ     PC,PC
        TEQNEP  R4,#0
        NOP     ; can't use MSREQ as NOP due to StrongARM bug
        MSREQ   CPSR_cf,R4
        LDMVCIA R13!,{R0-R4,R10,PC}
        ADD     R13,R13,#4
        LDMIA   R13!,{R1-R4,R10,PC}
Type0_OS_Common_TemplateEnd


Type0_APCS_Entry
        DCD     Type0_APCS_Entry_Template         ; address of template (length 16 bytes)
        DCD     %F02-Type0_APCS_Entry_Template    ; offset to patch with pointer to raw function
        DCD     %F01-Type0_APCS_Entry_Template    ; offset to patch with workspace
        DCD     -1                                ; offset to patch B(L) to common code
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type0_APCS_Entry_Template
        LDR     R12,[PC]
        LDR     PC,[PC]
01      ANDEQ   R0,R0,R0 ; DCD 0
02      ANDEQ   R0,R0,R0 ; DCD 0


Type1_OS_Entry
        DCD     Type1_OS_Entry_Template           ; address of template (length 16 bytes)
        DCD     %F02-Type1_OS_Entry_Template      ; offset to patch with pointer to raw function
        DCD     -1                                ; offset to patch with workspace
        DCD     %F01-Type1_OS_Entry_Template      ; offset to patch B(L) to common code
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type1_OS_Entry_Template
        STMDB   R13!,{R0-R6,R10-R11,R14}
        LDR     R1,[PC]
01      B       .
02      ANDEQ   R0,R0,R0 ; DCD 0

Type1_OS_Common
        DCD     Type1_OS_Common_Template          ; address and length of template
        DCD     Type1_OS_Common_TemplateEnd - Type1_OS_Common_Template
        DCD     %F01-Type1_OS_Common_Template     ; offset to patch PC-relative LDR of workspace
        DCD     -1                                ; offset to patch immediate with args-1
        DCD     -1                                ; offset to patch immediate with args*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type1_OS_Common_Template
        TEQ     PC,PC
        MRSEQ   R4,CPSR
        MOVNE   R4,PC
        ORR     R3,R4,#SVC_mode
        MSREQ   CPSR_c,R3
        TEQNEP  R3,#0
        MOV     R0,R12
        MOV     R10,R13,LSR#20
        MOV     R10,R10,LSL#20
        LDMIA   R10,{R5,R6}
01      LDR     R12,.
        LDR     R12,[R12]
        LDMIB   R12,{R11,R12}
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,#0
        STR     R14,[R13,#-4]!
        MOV     R14,PC
        MOV     PC,R1
        LDR     R14,[R13],#4
        SUB     R10,R10,#540
        STMIA   R10,{R5,R6}
        BIC     R4,R4,#V_bit:OR:Z_bit ; so condition remains NE after TEQP
        TEQ     R0,#0
        ORRNE   R4,R4,#V_bit
        TEQ     PC,PC
        TEQNEP  R4,#0
        NOP     ; can't use MSREQ as NOP due to StrongARM bug
        MSREQ   CPSR_cf,R4
        LDMVCIA R13!,{R0-R6,R10-R11,PC}
        ADD     R13,R13,#4
        LDMIA   R13!,{R1-R6,R10-R11,PC}
Type1_OS_Common_TemplateEnd


;       When calling from APCS to APCS, the stack is shuffled as follows (high to low address):
;       Before:             After:
;           Argument            Return address (in caller)
;           Argument            Old fp/R11
;           Argument            Old client reloc offset (contents of stack base + 4)
;                               Old lib reloc offset (contents of stack base + 0)
;                               Argument
;                               Argument
;                               Argument

Type1_APCS_0_Entry
        DCD     Type1_APCS_0_Entry_Template       ; address of template (length 16 bytes)
        DCD     %F02-Type1_APCS_0_Entry_Template  ; offset to patch with pointer to raw function
        DCD     -1                                ; offset to patch with workspace
        DCD     %F01-Type1_APCS_0_Entry_Template  ; offset to patch B(L) to common code
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type1_APCS_0_Entry_Template
        STMDB   R13!,{R11,R14}
        LDR     R12,[PC]
01      B       .
02      ANDEQ   R0,R0,R0 ; DCD 0

Type1_APCS_0_Common
        DCD     Type1_APCS_0_Common_Template      ; address and length of template
        DCD     Type1_APCS_0_Common_TemplateEnd - Type1_APCS_0_Common_Template
        DCD     %F01-Type1_APCS_0_Common_Template ; offset to patch PC-relative LDR of workspace
        DCD     -1                                ; offset to patch immediate with args-1
        DCD     -1                                ; offset to patch immediate with args*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type1_APCS_0_Common_Template
        SUB     R10,R10,#540
        LDMIA   R10,{R11,R14}
        STMDB   R13!,{R11,R14}
01      LDR     R14,.
        LDR     R14,[R14]
        LDMIB   R14,{R11,R14}
        STMIA   R10,{R11,R14}
        ADD     R10,R10,#540
        MOV     R11,#0
        MOV     R14,PC
        MOV     PC,R12
        LDMIA   R13!,{R11,R12,R14}
        SUB     R10,R10,#540
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,R14
        LDR     PC,[R13],#4
Type1_APCS_0_Common_TemplateEnd


Type1_APCS_1_Entry
        DCD     Type1_APCS_1_Entry_Template       ; address of template (length 16 bytes)
        DCD     %F02-Type1_APCS_1_Entry_Template  ; offset to patch with pointer to raw function
        DCD     -1                                ; offset to patch with workspace
        DCD     %F01-Type1_APCS_1_Entry_Template  ; offset to patch B(L) to common code
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type1_APCS_1_Entry_Template
        LDR     R12,[R13]
        STMDB   R13!,{R11,R14}
01      BL      .
02      ANDEQ   R0,R0,R0 ; DCD 0

Type1_APCS_1_Common
        DCD     Type1_APCS_1_Common_Template      ; address and length of template
        DCD     Type1_APCS_1_Common_TemplateEnd - Type1_APCS_1_Common_Template
        DCD     %F01-Type1_APCS_1_Common_Template ; offset to patch PC-relative LDR of workspace
        DCD     -1                                ; offset to patch immediate with args-1
        DCD     -1                                ; offset to patch immediate with args*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type1_APCS_1_Common_Template
        STR     R12,[R13,#-12]!
        SUB     R10,R10,#540
        LDMIA   R10,{R11,R12}
        STMIB   R13,{R11,R12}
01      LDR     R12,.
        LDR     R12,[R12]
        LDMIB   R12,{R11,R12}
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,#0
        MOV     R12,R14
        TEQ     PC,PC
        BICNE   R12,R12,#ARM_CC_Mask
        LDR     R12,[R12]
        MOV     R14,PC
        MOV     PC,R12
        LDMIB   R13!,{R11,R12,R14}
        SUB     R10,R10,#540
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,R14
        LDR     PC,[R13,#4]!
Type1_APCS_1_Common_TemplateEnd


Type1_APCS_2_Entry
        DCD     Type1_APCS_2_Entry_Template       ; address of template (length 16 bytes)
        DCD     %F04-Type1_APCS_2_Entry_Template  ; offset to patch with pointer to raw function
        DCD     -1                                ; offset to patch with workspace
        DCD     %F03-Type1_APCS_2_Entry_Template  ; offset to patch B(L) to common code
        DCD     %F01-Type1_APCS_2_Entry_Template  ; offset to patch immediate offset with (args-1)*4
        DCD     %F02-Type1_APCS_2_Entry_Template  ; offset to patch immediate offset with (args-1)*4
Type1_APCS_2_Entry_Template
01      LDR     R12,[R13,#0]
02      STR     R14,[R13,#0]
03      BL      .
04      ANDEQ   R0,R0,R0 ; DCD 0

Type1_APCS_2_Common
        DCD     Type1_APCS_2_Common_Template      ; address and length of template
        DCD     Type1_APCS_2_Common_TemplateEnd - Type1_APCS_2_Common_Template
        DCD     %F01-Type1_APCS_2_Common_Template ; offset to patch PC-relative LDR of workspace
        DCD     -1                                ; offset to patch immediate with args-1
        DCD     -1                                ; offset to patch immediate with args*4
        DCD     -1                                ; offset to patch immediate offset with (args-1)*4
Type1_APCS_2_Common_Template
        SUB     R13,R13,#16
        STMDB   R13!,{R11,R12,R14}
        ADD     R14,R13,#12
        LDR     R11,[R14,#16]
        STR     R11,[R14],#4
        LDR     R11,[R13,#4] ; original last argument
        STR     R11,[R14],#4
        SUB     R10,R10,#540
        LDMIA   R10,{R11,R12}
        STMIA   R14!,{R11,R12}
        LDR     R11,[R13],#8 ; original R11
        STR     R11,[R14]
01      LDR     R12,.
        LDR     R12,[R12]
        LDMIB   R12,{R11,R12}
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,#0
        LDR     R12,[R13],#4
        TEQ     PC,PC
        BICNE   R12,R12,#ARM_CC_Mask
        LDR     R12,[R12]
        MOV     R14,PC
        MOV     PC,R12
        ADD     R13,R13,#8
        LDMIA   R13!,{R11,R12,R14}
        SUB     R10,R10,#540
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,R14
        LDR     PC,[R13],#-4
Type1_APCS_2_Common_TemplateEnd


Type1_APCS_3_Common
        DCD     Type1_APCS_3_Common_Template      ; address and length of template
        DCD     Type1_APCS_3_Common_TemplateEnd - Type1_APCS_3_Common_Template
        DCD     %F03-Type1_APCS_3_Common_Template ; offset to patch PC-relative LDR of workspace
        DCD     %F01-Type1_APCS_3_Common_Template ; offset to patch immediate with args-1
        DCD     %F04-Type1_APCS_3_Common_Template ; offset to patch immediate with args*4
        DCD     %F05-Type1_APCS_3_Common_Template ; offset to patch immediate offset with (args-1)*4
Type1_APCS_3_Common_Template
        SUB     R13,R13,#16
        STMDB   R13!,{R11,R12,R14}
        ADD     R14,R13,#12
01      MOV     R12,#0
02      LDR     R11,[R14,#16]
        STR     R11,[R14],#4
        SUBS    R12,R12,#1
        BNE     %B02
        LDR     R11,[R13,#4] ; original last argument
        STR     R11,[R14],#4
        SUB     R10,R10,#540
        LDMIA   R10,{R11,R12}
        STMIA   R14!,{R11,R12}
        LDR     R11,[R13],#8 ; original R11
        STR     R11,[R14]
03      LDR     R12,.
        LDR     R12,[R12]
        LDMIB   R12,{R11,R12}
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,#0
        LDR     R12,[R13],#4
        TEQ     PC,PC
        BICNE   R12,R12,#ARM_CC_Mask
        LDR     R12,[R12]
        MOV     R14,PC
        MOV     PC,R12
04      ADD     R13,R13,#0
        LDMIA   R13!,{R11,R12,R14}
        SUB     R10,R10,#540
        STMIA   R10,{R11,R12}
        ADD     R10,R10,#540
        MOV     R11,R14
05      LDR     PC,[R13],#-&FFF ; LDR PC,[R13],#-0 can't be assembled
Type1_APCS_3_Common_TemplateEnd



        AREA    |Asm$$Data|, DATA

veneertmpl_Template
        DCD     Type0_OS_Entry
        DCD     Type0_OS_Common
        DCD     Type0_APCS_Entry
        DCD     0
        DCD     Type0_APCS_Entry
        DCD     0
        DCD     Type0_APCS_Entry
        DCD     0
        DCD     Type0_APCS_Entry
        DCD     0
        DCD     Type1_OS_Entry
        DCD     Type1_OS_Common
        DCD     Type1_APCS_0_Entry
        DCD     Type1_APCS_0_Common
        DCD     Type1_APCS_1_Entry
        DCD     Type1_APCS_1_Common
        DCD     Type1_APCS_2_Entry
        DCD     Type1_APCS_2_Common
        DCD     Type1_APCS_2_Entry ; sic
        DCD     Type1_APCS_3_Common

        END
