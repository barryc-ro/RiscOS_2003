Adding simple PRISM registration to a module              10-Jul-2001
============================================              ===========

If you have an existing module that wants to register itself as a
PRISM component, this is quite simple. If you have source tree access
take a look at LVFGeneric's CMHG file and Module.c file for a real
example of the application of the following instructions. LVFGeneric
is in "RiscOS/Sources/Networking/Video/".

 1) Obtain a PRISM ID.

    Your module's appropriate ID may be described in the PRISM
    architecture overview:

    http://intranet.cam.pace.co.uk/~ahodgkin/prism/architecture.html

    If not, EMail ahodgkin@pace.co.uk for an allocation.

 2) You must support Service_PRISM_Core. In C modules, the following
    is worth adding at the top of your CMHG file:

      #ifndef Service_PRISM_Core
        #define Service_PRISM_Core &D3
      #endif

      #ifndef Service_PRISM_Client
        #define Service_PRISM_Client &D5
      #endif

    Then add Service_PRISM_Core to your list of service calls; for
    example:

      ; Service calls
      service-call-handler: service_handler Service_PRISM_Core

 3) Since you must *issue* Service_PRISM_Core when your module
    starts, you'll need a callback and callback handler; in the CMHG
    file, then, you might use this:

      ; Callback handler.
      vector-handlers: callback_entry/callback_handler

 4) Your module will need to remember whether or not it has a pending
    callback, and cancel it in the finalisation code if so. It will
    also need to remember whether or not it is registered with PRISM.
    It is a good idea to use CMHG 5.30 or later and use an atexit()
    function rather than traditional finalisation code, since then
    any crashing on closedown will not result in a dead module in the
    module chain with zero instantiations ("DEADDEAD").

    Towards the top of your Module.c or equivalent, then:

      static void * module_wsp            = NULL;
      static bool   prism_registered      = false;
      static bool   callback_pending_flag = false;

    You'll also need to declare an atexit function:

      static void module_atexit (void);

    Make sure you've included these headers too:

      #include <PRISM.h>
      #include "MyCMHGHdr.h"

    (The last one is whatever .h file name your Makefile builds from
    the CMHG file).

 5) The following code will register/deregister with PRISM. DebugLib
    is assumed to be in use for debugging functions.

      /**************************************************************/
      /* module_prism_try_to_register()                             */
      /*                                                            */
      /* Attempts to register with PRISM. Exits if already          */
      /* registered. "prism_registered" is set if registration      */
      /* is successful, else left at its previous value.            */
      /**************************************************************/

      static _kernel_oserror * module_prism_try_to_register(void)
      {
        _kernel_oserror * e;

        dprintf(("", "module_prism_try_to_register: Called\n"));

        if (prism_registered)
        {
          dprintf(("", "module_prism_try_to_register: Already registered, exitting\n"));
          return NULL;
        }

        e = _swix(PRISM_ComponentRegister,
                  _INR(0,4),

                  0,
                  MyModuleName_00,
                  MyModuleName_PRISMID,
                  Module_VersionNumber,
                  Module_Help " © Pace 2000 (" Module_Date ")");

        if (e == NULL) prism_registered = true;

        dprintf(("", "module_prism_try_to_register: Finished, prism_registered = %d\n", prism_registered));

        return e;
      }

      /**************************************************************/
      /* module_prism_try_to_deregister()                           */
      /*                                                            */
      /* Attempts to deregister with PRISM. Exits if not            */
      /* registered. "prism_registered" is cleared whether or not   */
      /* the call to PRISM to deregister raises an error.           */
      /**************************************************************/

      static _kernel_oserror * module_prism_try_to_deregister(void)
      {
        _kernel_oserror * e;

        dprintf(("", "module_prism_try_to_deregister: Called\n"));

        if (prism_registered == false)
        {
          dprintf(("", "module_prism_try_to_deregister: Not registered, exitting\n"));
          return NULL;
        }

        e = _swix(PRISM_ComponentDeregister,
                  _INR(0,2),

                  0,
                  MyModuleName_00,
                  MyModuleName_PRISMID);

        prism_registered = false;

        dprintf(("", "module_prism_try_to_deregister: Finished, e = %p\n", e));
        if (e) dprintf(("", "module_prism_try_to_register: '%s'\n", e->errmess));

        return e;
      }

      /**************************************************************/
      /* module_prism_register()                                    */
      /*                                                            */
      /* Attempts to register with PRISM. If we get "SWI not known" */
      /* and this isn't a ROM build, try loading PRISM. That should */
      /* send the "started" service call around which leads to      */
      /* another attempt to register later.                         */
      /**************************************************************/

      static _kernel_oserror * module_prism_register(void)
      {
        _kernel_oserror * e = module_prism_try_to_register();

        if (e == NULL) return NULL;
        if (e->errnum != PRISM_NoSuchSWI) return e;

        #ifndef ROM

          /* Try to load PRISM - if it starts it should send round a       */
          /* service call that'll prompt us to attempt registration again. */

          _swix(OS_Module,
                _INR(0,1),

                1, /* Load */
                "System:Modules.PRISM.PRISM");

        #endif

        return NULL;
      }

    In the above, "MyModuleName_PRISMID" should be constructed in a
    convenient header file along the following lines - each line here
    is a separate example:

      #define MyModuleName_PRISMID (PRISM_Class_SI  | PRISM_Parent_VideoControl | PRISM_Child_MyModuleName)
      #define MyModuleName_PRISMID (PRISM_Class_PTL | PRISM_Parent_PTLStream    | PRISM_Child_MyModuleName)

    The _Class_ definition comes from PRISM.h. The _Parent_
    definition should be in an exported header output by the build
    system of whatever module your parent is. The _Child_ definition
    may be something you define locally, or it may be also included
    in the same header the _Parent_ definition (this is the case, for
    example, in Video Control's VideoCtrl.h).

 6) In your module's initialisation code, register your atexit
    handler and enforce CMHG 5.30 or later; do this just after
    bringing up DebugLib (or equivalent):

    _kernel_oserror * module_init(CMHG_CONST char * cmd_fail, int podule_base, void * pw)
    {
      ...

      atexit(module_atexit);
      module_check_os_version();

    Don't forget to store your module private word away for the
    atexit code later:

      module_wsp = pw;

    ...ResourceFS registration, messages files; say we've a
    _kernel_oserror * e; defined which we're using for any error
    returning functions. After the first of these once the atexit
    hander is installed, we should do this:

      #if CMHG_VERSION < 530
        /*
         * Earlier CMHGs won't call the atexit() handler if we return an
         * error here 'cos its bust. Could work around it but since there
         * is a fixed version available, insist on it.
         */
        #error You need CMHG 5.30 or later to build LVFGeneric.
      #else
        if (e != NULL) return e;
      #endif

 7) After the above housekeeping, register with PRISM and add a
    callback to send the Starting service call:

      _kernel_oserror * e;

      ...

      /* Register with PRISM - No Such SWI is hidden, other */
      /* errors are reported.                               */

      e = module_prism_register();
      if (e != NULL && e->errnum != 0x1E6) return e;

      /* Callback to send "I'm starting" service call for PRISM */

      if (
           _swix(OS_AddCallBack,
                 _INR(0,1),

                 callback_entry,
                 pw)

           == NULL
         )
         callback_pending_flag = true;

 8) Callback handler to send the service call:

      /**************************************************************/
      /* callback_handler()                                         */
      /*                                                            */
      /* Standard callback handler. When invoked, assumes the       */
      /* module has just started, and issues Service_PRISM_Core     */
      /* / ModuleStarted.                                           */
      /*                                                            */
      /* Parameters: As normal for a CMHG callback handler.         */
      /**************************************************************/

      int callback_handler(_kernel_swi_regs * r, void * pw)
      {
        (void) pw;
        (void) r;

        if (callback_pending_flag == false)
        {
          return 1;
        }

        callback_pending_flag = false;

        dprintf(("", "callback_handler: Sending Service_PRISM_Core\n"));

        _swix(OS_ServiceCall,
              _INR(0,4),

              PRISMModuleStarted,
              Service_PRISM_Core,
              0,
              MyModuleName_PRISMID,
              Module_VersionNumber);

        return 1;
      }

 9) Your atexit handler should look something like this:

      /**************************************************************/
      /* module_atexit()                                            */
      /*                                                            */
      /* At exit handler for the module. Note that this is only     */
      /* correclty called if the module is built with CMHG 5.30 or  */
      /* later.                                                     */
      /**************************************************************/

      static void module_atexit(void)
      {
        dprintf(("", "module_atexit: Called\n"));

        /* Ensure pending callbacks are cancelled */

        if (callback_pending_flag == true)
        {
          (void) _swix(OS_RemoveCallBack,
                       _INR(0,1),
                       callback_entry,
                       module_wsp);

          callback_pending_flag = false;
        }

        ...Deregister ResourceFS files, close Messages files...

        module_prism_try_to_deregister();

        ...Close down anything else, free linked lists etc...

        /* Send the "dying" service call for PRISM */

        (void) _swix(OS_ServiceCall,
                     _INR(0,4),

                     PRISMModuleDying,
                     Service_PRISM_Core,
                     0,
                     MyModuleName_PRISMID,
                     Module_VersionNumber);

10) Finally, your service call handler should include a case for
    Service_PRISM_Core:

      case Service_PRISM_Core:
      {
        switch (r->r[0])
        {
          case PRISMSessionAborting:
          case PRISMCleanShutdown:
          case PRISMAbortiveShutdown:
          {
            //// Presently undefined
          }
          break;

          case PRISMModuleStarted:
          {
            /* If this is PRISM, re-register with it */

            if (r->r[3] == PRISM_PRISMID) module_prism_try_to_register();
          }

          case PRISMModuleDying:
          {
            /* If this is PRISM, note that we're not registered anymore */

            if (r->r[3] == PRISM_PRISMID) prism_registered = false;
          }
          break;
        }
      }

That covers the simple stuff, anyway. As for registering sessions and
so-on - see other documentation. With the above code, you'll show up
as a service in *PRISMComponents and *PRISMStatus, in the latter case
showing "Idle" or "Asleep" automatically depending on whether or not
your parent is running (determined from the PRISM ID).

-- 
Andrew Hodgkinson, Senior Software Engineer
Pace Micro Technology plc                    Tel: +44 1223 518 560
645 Newmarket Road                           Fax: +44 1223 518 526
Cambridge, CB5 8PB, United Kingdom           WWW: http://www.pace.co.uk/