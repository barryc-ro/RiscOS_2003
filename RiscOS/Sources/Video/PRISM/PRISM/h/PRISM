/**************************************************************/
/* File:    PRISM.h                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: PRISM exportable API.                             */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 26-Feb-2001 (ADH): Created.                       */
/*          21-Jun-2001 (ADH): Filled out to make a working,  */
/*                             useful header.                 */
/**************************************************************/

#ifndef PRISM_PRISM__
  #define PRISM_PRISM__

  /* Useful types */

  typedef unsigned int prism_id_t;

  typedef struct
  {
    unsigned client_handle: 16;
    unsigned local_handle: 16;
  } stream_handle_t;

  /* Service calls */

  #ifndef Service_PRISM_Core
    #define Service_PRISM_Core        (0xD3)
  #endif
  #define PRISMModuleStarted          (0)
  #define PRISMModuleDying            (1)
  #define PRISMSessionAborting        (2)
  #define PRISMCleanShutdown          (100)
  #define PRISMAbortiveShutdown       (101)

  #ifndef Service_PRISM_Client
    #define Service_PRISM_Client      (0xD5)
  #endif
  #define PRISMSessionAborted         (0)

  /* Error numbers. There are two error blocks, */
  /* at 819800 and 819E00. The first &40 of the */
  /* first block are PRISM private for &20 and  */
  /* PRISM public for &20; then the rest are    */
  /* allocated module by module.                */

  #define PRISM_ERROR1_BASE           (0x819800)
  #define PRISM_ERROR2_BASE           (0x819E00)
  #define PRISM_PRIVATE_OFFSET        (0)
  #define PRISM_PUBLIC_OFFSET         (0x20)

  #define PFC_BUFFER_OFFSET           0x000040 /* 0x819840 to */
  #define PFC_BUFFER_SIZE             0x00001f /* 0x81985f    */
  #define PFC_CLOCK_OFFSET            0x000060 /* 0x819860 to */
  #define PFC_CLOCK_SIZE              0x00001f /* 0x81987f    */
  #define PFC_AUDIO_MIXER_OFFSET      0x000080 /* 0x819880 to */
  #define PFC_AUDIO_MIXER_SIZE        0x00001f /* 0x81989f    */
  #define PFC_VIDEO_MIXER_OFFSET      0x0000a0 /* 0x8198a0 to */
  #define PFC_VIDEO_MIXER_SIZE        0x00001f /* 0x8198bf    */

  #define PTL_STREAM_OFFSET           0x0000c0 /* 0x8198c0 to */
  #define PTL_STREAM_SIZE             0x00001f /* 0x8198df    */

  enum
  {
    /* These may be raised by any PRISM component */

    prism_ERROR_MEMORY_EXHAUSTED      = PRISM_ERROR1_BASE + PRISM_PUBLIC_OFFSET,
    prism_ERROR_IN_PROGRESS,
    prism_ERROR_SERVICE_UNAVAILABLE,
    prism_ERROR_COMPONENT_ALREADY_PRESENT,
    prism_ERROR_CLIENT_ID_NOT_KNOWN,
    prism_ERROR_PRISM_ID_NOT_KNOWN,
    prism_ERROR_INVALID_PARAMETERS
  };

  /* Generally useful items */

  #define PRISM_NoSuchSWI             (0x1E6)

  /* PRISM class identifiers for PRISM IDs */

  #define PRISM_Class_PFC             (0x01000000)
  #define PRISM_Class_SI              (0x02000000)
  #define PRISM_Class_PTL             (0x03000000)

  /* The PRISM module is the one component to follow a non-standard */
  /* name for brevity. It is in fact a PTL class module.            */

  #define PRISM_Parent_PRISM          (0x001000)
  #define PRISM_PRISMID               (PRISM_Class_PFC | PRISM_Parent_PRISM)

  /* Reason codes to PRISM_ComponentNotify */

  #define PRISM_Notify_DeclareInformation       (0)
  #define PRISM_Notify_RegisterLocalSession     (1)
  #define PRISM_Notify_DeregisterLocalSession   (2)

  /* Direct call veneers */

    //  First a few "private" macros needed to define the later ones.
    
    #define PRISM_WORDSIZEOF1(a1) ((sizeof(a1)+3)/4)
    #define PRISM_WORDSIZEOF2(a1,a2) (PRISM_WORDSIZEOF1(a1)+PRISM_WORDSIZEOF1(a2))
    #define PRISM_WORDSIZEOF3(a1,a2,a3) (PRISM_WORDSIZEOF2(a1,a2)+PRISM_WORDSIZEOF1(a3))
    #define PRISM_WORDSIZEOF4(a1,a2,a3,a4) (PRISM_WORDSIZEOF3(a1,a2,a3)+PRISM_WORDSIZEOF1(a4))
    #define PRISM_WORDSIZEOF5(a1,a2,a3,a4,a5) (PRISM_WORDSIZEOF4(a1,a2,a3,a4)+PRISM_WORDSIZEOF1(a5))
    #define PRISM_WORDSIZEOF6(a1,a2,a3,a4,a5,a6) (PRISM_WORDSIZEOF5(a1,a2,a3,a4,a5)+PRISM_WORDSIZEOF1(a6))
    #define PRISM_WORDSIZEOF7(a1,a2,a3,a4,a5,a6,a7) (PRISM_WORDSIZEOF6(a1,a2,a3,a4,a5,a6)+PRISM_WORDSIZEOF1(a7))
    #define PRISM_WORDSIZEOF8(a1,a2,a3,a4,a5,a6,a7,a8) (PRISM_WORDSIZEOF7(a1,a2,a3,a4,a5,a6,a7)+PRISM_WORDSIZEOF1(a8))
    
    //  The following macros should be used to declare any functions for which you will be creating a veneer.
    //  
    //  In this way, there is much less danger of getting the number of stacked words wrong in the table passed to PRISM_CreateVeneers.
    //  
    //  Unfortunately, even C99's variadic macros aren't sufficient to perform this sort of operation on a variable number of parameters,
    //  so you will need to select the appropriate macro for the number of arguments in your function.
    //  
    //  Note that under APCS, unless you use the __value_in_regs storage class (and the result is four words or smaller), any function
    //  that returns a result larger than one word (except the __int64 type, currently not supported by our compiler) will actually use an
    //  additional argument word to hold an internal pointer through which the result is to be returned. These macros cannot detect such
    //  cases automatically, so you must use the _RETURNING_STRUCT macro variants for them.
    //  
    //  For example, when you have used
    //  
    //    PRISM_DECLARE_FUNCTION_5(static void, fred, bool /*arnold*/, char * /*brian*/, int /*chris*/, double /*dave*/, char /*edward*/)
    //  
    //  then you will have declared the function
    //  
    //    static void fred(bool /*arnold*/, char * /*brian*/, int /*chris*/, double /*dave*/, char /*edward*/);
    //  
    //  and the enum  prism_STACK_WORDS_fred  will have been set to the value 2.
    //  
    //  Note that it is essential that the argument names are commented, if not omitted entirely, for these macros to work (because they use sizeof()).
    
    #define PRISM_DECLARE_FUNCTION_0(type,name) \
      enum { prism_STACK_WORDS_##name = 0 }; \
      type name(void);
    #define PRISM_DECLARE_FUNCTION_0_RETURNING_STRUCT(type,name) \
      enum { prism_STACK_WORDS_##name = 0 }; \
      type name(void);
    #define PRISM_DECLARE_FUNCTION_1(type,name,a1) \
      enum { prism_STACK_WORDS_##name = PRISM_WORDSIZEOF1(a1) < 4 ? 0 : -4 + PRISM_WORDSIZEOF1(a1) }; \
      type name(a1);
    #define PRISM_DECLARE_FUNCTION_1_RETURNING_STRUCT(type,name,a1) \
      enum { prism_STACK_WORDS_##name = PRISM_WORDSIZEOF1(a1) < 3 ? 0 : -3 + PRISM_WORDSIZEOF1(a1) }; \
      type name(a1);
    #define PRISM_DECLARE_FUNCTION_2(type,name,a1,a2) \
      enum { prism_STACK_WORDS_##name = PRISM_WORDSIZEOF2(a1,a2) < 4 ? 0 : -4 + PRISM_WORDSIZEOF2(a1,a2) }; \
      type name(a1,a2);
    #define PRISM_DECLARE_FUNCTION_2_RETURNING_STRUCT(type,name,a1,a2) \
      enum { prism_STACK_WORDS_##name = PRISM_WORDSIZEOF2(a1,a2) < 3 ? 0 : -3 + PRISM_WORDSIZEOF2(a1,a2) }; \
      type name(a1,a2);
    #define PRISM_DECLARE_FUNCTION_3(type,name,a1,a2,a3) \
      enum { prism_STACK_WORDS_##name = PRISM_WORDSIZEOF3(a1,a2,a3) < 4 ? 0 : -4 + PRISM_WORDSIZEOF3(a1,a2,a3) }; \
      type name(a1,a2,a3);
    #define PRISM_DECLARE_FUNCTION_3_RETURNING_STRUCT(type,name,a1,a2,a3) \
      enum { prism_STACK_WORDS_##name = -3 + PRISM_WORDSIZEOF3(a1,a2,a3) }; \
      type name(a1,a2,a3);
    #define PRISM_DECLARE_FUNCTION_4(type,name,a1,a2,a3,a4) \
      enum { prism_STACK_WORDS_##name = -4 + PRISM_WORDSIZEOF4(a1,a2,a3,a4) }; \
      type name(a1,a2,a3,a4);
    #define PRISM_DECLARE_FUNCTION_4_RETURNING_STRUCT(type,name,a1,a2,a3,a4) \
      enum { prism_STACK_WORDS_##name = -3 + PRISM_WORDSIZEOF4(a1,a2,a3,a4) }; \
      type name(a1,a2,a3,a4);
    #define PRISM_DECLARE_FUNCTION_5(type,name,a1,a2,a3,a4,a5) \
      enum { prism_STACK_WORDS_##name = -4 + PRISM_WORDSIZEOF5(a1,a2,a3,a4,a5) }; \
      type name(a1,a2,a3,a4,a5);
    #define PRISM_DECLARE_FUNCTION_5_RETURNING_STRUCT(type,name,a1,a2,a3,a4,a5) \
      enum { prism_STACK_WORDS_##name = -3 + PRISM_WORDSIZEOF5(a1,a2,a3,a4,a5) }; \
      type name(a1,a2,a3,a4,a5);
    #define PRISM_DECLARE_FUNCTION_6(type,name,a1,a2,a3,a4,a5,a6) \
      enum { prism_STACK_WORDS_##name = -4 + PRISM_WORDSIZEOF6(a1,a2,a3,a4,a5,a6) }; \
      type name(a1,a2,a3,a4,a5,a6);
    #define PRISM_DECLARE_FUNCTION_6_RETURNING_STRUCT(type,name,a1,a2,a3,a4,a5,a6) \
      enum { prism_STACK_WORDS_##name = -3 + PRISM_WORDSIZEOF6(a1,a2,a3,a4,a5,a6) }; \
      type name(a1,a2,a3,a4,a5,a6);
    #define PRISM_DECLARE_FUNCTION_7(type,name,a1,a2,a3,a4,a5,a6,a7) \
      enum { prism_STACK_WORDS_##name = -4 + PRISM_WORDSIZEOF7(a1,a2,a3,a4,a5,a6,a7) }; \
      type name(a1,a2,a3,a4,a5,a6,a7);
    #define PRISM_DECLARE_FUNCTION_7_RETURNING_STRUCT(type,name,a1,a2,a3,a4,a5,a6,a7) \
      enum { prism_STACK_WORDS_##name = -3 + PRISM_WORDSIZEOF7(a1,a2,a3,a4,a5,a6,a7) }; \
      type name(a1,a2,a3,a4,a5,a6,a7);
    #define PRISM_DECLARE_FUNCTION_8(type,name,a1,a2,a3,a4,a5,a6,a7,a8) \
      enum { prism_STACK_WORDS_##name = -4 + PRISM_WORDSIZEOF8(a1,a2,a3,a4,a5,a6,a7,a8) }; \
      type name(a1,a2,a3,a4,a5,a6,a7,a8);
    #define PRISM_DECLARE_FUNCTION_8_RETURNING_STRUCT(type,name,a1,a2,a3,a4,a5,a6,a7,a8) \
      enum { prism_STACK_WORDS_##name = -3 + PRISM_WORDSIZEOF8(a1,a2,a3,a4,a5,a6,a7,a8) }; \
      type name(a1,a2,a3,a4,a5,a6,a7,a8);
    
    //  The following macro is for initialising a struct to pass to PRISM_CreateVeneers.
    
    #define PRISM_FUNCTION_ENTRY(function) { (void (*)(void)) function, prism_STACK_WORDS_##function }

#endif /* PRISM_PRISM__ */

#undef PRISM_00 /* so we can be multiply included, or included after the cmhg h file */

/* In the exported copy of this file, SWI numbers will follow. */

