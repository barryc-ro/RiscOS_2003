#if !defined(PRISM_VENEERMGR_H) /* file used if not already included */
#define PRISM_VENEERMGR_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): 
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Direct-call veneer management
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdint.h>
#include "kernel.h"

#include "PRISM.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* veneermgr_Init
*
* Must be called on module initialisation
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void veneermgr_Init(void);

/*****************************************************************************
* veneermgr_Final
*
* Must be called on module finalisation
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void veneermgr_Final(void);

/*****************************************************************************
* veneermgr_Cleanup
*
* Tidy up after an abnormal exit of a PRISM component
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  id: PRISM ID of exiting component
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
extern void veneermgr_Cleanup(prism_id_t id);

/*****************************************************************************
* veneermgr_Create
*
* Creates veneers
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  flags:      see SWI PRISM_CreateVeneers
*  table:      pointer to table of (function pointer, stack usage) entries
*  table_size: number of entries in table
*  workspace:  either module workspace, or module private word
*  id:         PRISM ID of component containing the functions the veneers point to
*
* Outputs
*  veneers:    pointer to the created veneer entry points (at quadword intervals)
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern _kernel_oserror *veneermgr_Create(uint32_t flags, const void *table, size_t table_size, const void *workspace, prism_id_t id, void **veneers);

/*****************************************************************************
* veneermgr_Free
*
* Frees veneers
* Not re-entrant
*
* Assumptions
*  NONE
*
* Inputs
*  veneers: veneer struct (as returned from veneermgr_Create)
*  id:      PRISM ID of component containing the functions the veneers point to
*
* Outputs
*  NONE
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern _kernel_oserror *veneermgr_Free(void *veneers, prism_id_t id);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
