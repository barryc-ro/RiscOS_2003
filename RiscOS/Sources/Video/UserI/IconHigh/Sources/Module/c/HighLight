#include <limits.h>
#include <stdlib.h>

#include "swis.h"

#include "Desk.Error2.h"
#include "Desk.WimpSWIs.h"
#include "Desk.Window.h"
#include "Desk.DeskMem.h"

#include "tboxlibs.window.h"

#define	TaskModule_SendMessage	0x4d300

#include "^.Highlight.h"
#include "^.Globals.h"

#include "WindInfo2.h"
#include "DrawHL.h"




#define	MAJOR	3
#define	MINOR	1
#define	DISTANCE_SQUARED( major, minor)	( (major)*(major)*MINOR*MINOR + (minor)*(minor)*MAJOR*MAJOR)
#define	DISTANCE_SQUARED0( x, y)	( (x)*(x) + (y)*(y))

#define	MakeGE( a, b)	if ((b)>(a))	(a)=(b)
#define	MakeLE( a, b)	if ((b)<(a))	(a)=(b)



/*
static void	GetLeftPoint( Desk_wimp_point* point, const Desk_wimp_rect* rect)
	{
	point->x = rect->min.x;
	point->y = (rect->min.y + rect->max.y) / 2;
	}

static void	GetRightPoint( Desk_wimp_point* point, const Desk_wimp_rect* rect)
	{
	point->x = rect->max.x;
	point->y = (rect->min.y + rect->max.y) / 2;
	}

static void	GetTopPoint( Desk_wimp_point* point, const Desk_wimp_rect* rect)
	{
	point->x = (rect->min.x + rect->max.x) / 2;
	point->y = rect->max.y;
	}

static void	GetBottomPoint( Desk_wimp_point* point, const Desk_wimp_rect* rect)
	{
	point->x = (rect->min.x + rect->max.x) / 2;
	point->y = rect->min.y;
	}
*/


#ifndef iconhigh_DAYTONA
	
	static int	Distance( const Desk_wimp_rect* pos, const Desk_wimp_rect* newpos, iconhigh_direction direction)
		{
		/*
		Desk_wimp_point	point_pos;
		Desk_wimp_point	point_newpos;
		Desk_wimp_point	mid_pos;
		Desk_wimp_point	mid_newpos;
		
		mid_pos.x = ( pos->min.x + pos->max.x) / 2;
		mid_pos.y = ( pos->min.y + pos->max.y) / 2;
		mid_newpos.x = ( newpos->min.x + newpos->max.x) / 2;
		mid_newpos.y = ( newpos->min.y + newpos->max.y) / 2;
		
		if ( direction==iconhigh_direction_LEFT)	{
			GetLeftPoint( &point_pos, pos);
			GetRightPoint( &point_newpos, newpos);
			//if ( point_newpos.x > point_pos.x)	return INT_MAX;
			if ( mid_newpos.x >= mid_pos.x)	return INT_MAX;
			return DISTANCE_SQUARED( point_newpos.x-point_pos.x, point_newpos.y-point_pos.y);
			}
		if ( direction==iconhigh_direction_RIGHT)	{
			GetRightPoint( &point_pos, pos);
			GetLeftPoint( &point_newpos, newpos);
			//if ( point_newpos.x < point_pos.x)	return INT_MAX;
			if ( mid_newpos.x <= mid_pos.x)	return INT_MAX;
			return DISTANCE_SQUARED( point_newpos.x-point_pos.x, point_newpos.y-point_pos.y);
			}
		if ( direction==iconhigh_direction_UP)	{
			GetTopPoint( &point_pos, pos);
			GetBottomPoint( &point_newpos, newpos);
			//if ( point_newpos.y < point_pos.y)	return INT_MAX;
			if ( mid_newpos.y <= mid_pos.y)	return INT_MAX;
			return DISTANCE_SQUARED( point_newpos.y-point_pos.y, point_newpos.x-point_pos.x);
			}
		if ( direction==iconhigh_direction_DOWN)	{
			GetBottomPoint( &point_pos, pos);
			GetTopPoint( &point_newpos, newpos);
			//if ( point_newpos.y > point_pos.y)	return INT_MAX;
			if ( mid_newpos.y >= mid_pos.y)	return INT_MAX;
			return DISTANCE_SQUARED( point_newpos.y-point_pos.y, point_newpos.x-point_pos.x);
			}
		*/
		
		if ( direction==iconhigh_direction_NEAREST)	{
			return DISTANCE_SQUARED0( 
				( ( pos->min.x+pos->max.x) - ( newpos->min.x+newpos->max.x)) / 2, 
				( ( pos->min.y+pos->max.y) - ( newpos->min.y+newpos->max.y)) / 2
				);
			}
		
		else if ( direction==iconhigh_direction_NONE)	return INT_MAX;
		
		else	{
			Desk_wimp_rect	from;
			Desk_wimp_rect	to;
			
			// Transform so that we are always moving up.
			
			if ( direction==iconhigh_direction_UP)
				{
				from	= *pos;
				to	= *newpos;
				}
			if ( direction==iconhigh_direction_DOWN)
				{
				from.min.x	= pos->min.x;
				from.max.x	= pos->max.x;
				from.min.y	= -pos->max.y;
				from.max.y	= -pos->min.y;
				to.min.x	= newpos->min.x;
				to.max.x	= newpos->max.x;
				to.min.y	= -newpos->max.y;
				to.max.y	= -newpos->min.y;
				}
			if ( direction==iconhigh_direction_RIGHT)
				{
				from.min.x	= pos->min.y;
				from.max.x	= pos->max.y;
				from.min.y	= pos->min.x;
				from.max.y	= pos->max.x;
				to.min.x	= newpos->min.y;
				to.max.x	= newpos->max.y;
				to.min.y	= newpos->min.x;
				to.max.y	= newpos->max.x;
				}
			if ( direction==iconhigh_direction_LEFT)
				{
				from.min.x	= pos->min.y;
				from.max.x	= pos->max.y;
				from.min.y	= -pos->max.x;
				from.max.y	= -pos->min.x;
				to.min.x	= newpos->min.y;
				to.max.x	= newpos->max.y;
				to.min.y	= -newpos->max.x;
				to.max.y	= -newpos->min.x;
				}
			
			// Now calculate distance when moving up from 'from' to 'to'.
				{
				Desk_wimp_point	from_point;
				int		to_linex_min;
				int		to_linex_max;
				Desk_wimp_point	to_point;
				
				from_point.x	= (from.min.x + from.max.x) / 2;
				from_point.y	= from.max.y;
				to_linex_min	= to.min.x;
				to_linex_max	= to.max.x;
				
				to_point.y	= to.min.y;
				if ( to_point.y < from_point.y)	to_point.y = (to.min.y+to.max.y) / 2;
					// In case of overlap.
				
				if ( from_point.x > to_linex_max)	to_point.x = to_linex_max;
				else if ( from_point.x < to_linex_min)	to_point.x = to_linex_min;
				else	to_point.x = from_point.x;
				
				if ( to_point.y < from_point.y)	return INT_MAX;
				return DISTANCE_SQUARED( to_point.y-from_point.y, to_point.x-from_point.x);
				}
			}
		return INT_MAX;
		}

#endif	// ifndef iconhigh_DAYTONA


/*
We ignore non-clickable icons, shaded icons and deleted icons.
 */







void	MoveHighlight( Desk_wimp_point* newpos, iconhigh_direction direction, void* pw)
/*
cursor keypress should be in 'lastcursorkey'. We look for nearest icon
in the specified direction.

When direction=iconhigh_direction_NONE, we shouldn't move the mouse,
just highlight the icon under the current mouse (if any).

When direction=iconhigh_direction_NEAREST, we move to the nearest icon.
 */
	{
	Desk_window_info* volatile	info_volatile		= NULL;
	
	Desk_Debug_Printf( Desk_error_PLACE "MoveHighlight called for direction %i\n", (int) direction);
	
	Desk_Error2_Try	{
		Desk_window_info*		info;
		Desk_mouse_block		mouse;
		Desk_icon_block*		icons;
		#ifdef iconhigh_DAYTONA
			Desk_icon_block		besticon_block;
		#else
			int				i;
			Desk_wimp_point			mouse_workarea;
			Desk_wimp_rect			mouse_iconrect;
		#endif
		int				besticon_number			= -1;
		int				besticon_distancesquared	= INT_MAX;
		Desk_wimp_rect			screenrect_wa;
		
		Desk_Wimp_GetPointerInfo( &mouse);
		*newpos = mouse.pos;
		
		// Get all icons for current window... First, how many icons:
		info = GetInfoAlloc( mouse.window);
		info_volatile = (Desk_window_info* volatile) info;
			
		icons = (Desk_icon_block*) (info+1);
			// Don't really need icon info for daytona build, but the scroll offsets are used later
			// (should really use Wimp_GetWindowState in daytona build).
		
		#ifdef iconhigh_DAYTONA
			{
			ObjectId	object;
			ComponentId	component;
			Desk_Error2_CheckOS( 
				window_wimp_to_toolbox( 0, mouse.window, mouse.icon, &object, &component)
				);
			if ( object!=0)
				{
				int	numicons;
				if ( direction==iconhigh_direction_NEXT)	component++;
				if ( direction==iconhigh_direction_PREV)	component--;
				Desk_Error2_CheckOS( gadget_get_icon_list( 0, object, component, NULL, 0, &numicons));
				if ( numicons==1)
					{
					Desk_Error2_CheckOS( 
						gadget_get_icon_list( 0, object, component, &besticon_number, sizeof( besticon_number), &numicons)
						);
					if (numicons==1)
						{
						Desk_Wimp_GetIconState( mouse.window, mouse.icon, &besticon_block);
						besticon_distancesquared	= 0;
						}
					}
				}
			}
		#else
			
			mouse_workarea.x = mouse.pos.x + info->block.scroll.x - info->block.screenrect.min.x;
			mouse_workarea.y = mouse.pos.y + info->block.scroll.y - info->block.screenrect.max.y;
			
			screenrect_wa = info->block.screenrect;
			Desk_Coord_RectToWorkArea( &screenrect_wa, (Desk_convert_block*) &info->block.screenrect);
			
			Desk_Debug_Printf( Desk_error_PLACE "Window 0x%p has %i icons. Mouse is over icon %i\n", 
				(void*) mouse.window, 
				info->block.numicons,
				mouse.icon
				);
			
			
			// Find the rectangle for the current icon, if any. If not over an icon, use zero-size rect at position of pointer.
			// This rectangle is used when calulating the nearest icon to move to.
			
			mouse_iconrect.min = mouse_workarea;
			mouse_iconrect.max = mouse_workarea;
			
			if ( mouse.icon>=0)	{
				Desk_icon_block*	mouseicon = &icons[ mouse.icon];
				if ( !IconHigh_IgnoreIcon( mouseicon))
					{
					mouse_iconrect = mouseicon->workarearect;
					}
				//mouse_iconrect = ((Desk_icon_block*)(info+1))[ mouse.icon].workarearect;
				}
			/*
			else	{
				mouse_iconrect.min = mouse_workarea;
				mouse_iconrect.max = mouse_workarea;
				}
			*/
			for ( i=0; i<info->block.numicons; i++)	{
				Desk_icon_block*	icon = &icons[i];
				
				if ( 	   direction!=iconhigh_direction_NONE 
					&& direction!=iconhigh_direction_NEAREST 
					&& i==mouse.icon
					)
					continue;	// Ignore current icon if we are moving.
				
				if ( IconHigh_IgnoreIcon( icon))	continue;
				
				//if ( !Desk_Coord_RectsOverlap( &info->block.workarearect, &icon->workarearect))
				if ( !Desk_Coord_RectContained( &icon->workarearect, &info->block.workarearect))
					{
					Desk_Debug_Printf( Desk_error_PLACE "Icon %i is hidden outside accesible workarea of window\n", i);
					continue;
					}
				
				if	(
					IconHigh_globals.newemulation.data.no_autoscroll 
					&&
					!Desk_Coord_RectContained( &icon->workarearect, &screenrect_wa)
					)
					{
					Desk_Debug_Printf( Desk_error_PLACE "Icon %i is not wholey inside visible window, and we aren't allowed to scroll\n", i);
					continue;
					}
				
				if ( direction==iconhigh_direction_NONE)	{
					if ( Desk_Coord_PointInRect( &mouse_workarea, &icon->workarearect))	{
						Desk_Debug_Printf( Desk_error_PLACE "Direction=0, and pointer within icon %i\n", i);
						besticon_number			= i;
						}
					}
				
				else	{
					int	distancesquared = Distance( &mouse_iconrect, &icon->workarearect, direction);
					if ( distancesquared < besticon_distancesquared)	{
						besticon_number			= i;
						besticon_distancesquared	= distancesquared;
						}
					}
				}
			
			{	// Now compare to moving outside of window.
			int	distance = -1;
			if ( direction==iconhigh_direction_LEFT)	distance = mouse.pos.x - info->block.screenrect.min.x;
			if ( direction==iconhigh_direction_RIGHT)	distance = info->block.screenrect.max.x - mouse.pos.x;
			if ( direction==iconhigh_direction_DOWN)	distance = mouse.pos.y - info->block.screenrect.min.y;
			if ( direction==iconhigh_direction_UP)		distance = info->block.screenrect.max.y - mouse.pos.y;
			if ( distance!=-1 && distance*distance < besticon_distancesquared)
				besticon_number = -1;	// Cancel previous best icon - this will result in move out of window.
			}
		
		#endif	// #ifdef iconhigh_DAYTONA
		
		if ( besticon_number != -1)	{	// We have a winner!
			
			Desk_icon_block*	icon;
			
			#ifdef iconhigh_DAYTONA
				icon = &besticon_block;
			#else
				icon		= &icons[ besticon_number];
			#endif
			
			if ( direction==iconhigh_direction_NONE)	{
				Desk_Debug_Printf( Desk_error_PLACE "Direction=0, and best icon=%i. Calling SetHighlight()\n", besticon_number);
				SetHighlight( mouse.window, besticon_number, icon, pw);
				}
			else	{
				Desk_wimp_point		besticon_centre;
				
				besticon_centre.x = ( icon->workarearect.min.x + icon->workarearect.max.x) / 2;
				besticon_centre.y = ( icon->workarearect.min.y + icon->workarearect.max.y) / 2;
				
				Desk_Debug_Printf( Desk_error_PLACE "Moving to icon %i\n", besticon_number);
				// If necessary, scroll window so that besticon is visible.
				newpos->x = besticon_centre.x - info->block.scroll.x + info->block.screenrect.min.x;
				newpos->y = besticon_centre.y - info->block.scroll.y + info->block.screenrect.max.y;
				//Desk_Coord_RectToWorkArea( &screenrect_wa, (Desk_convert_block*) &info->block.screenrect);
				
				SetHighlight( mouse.window, besticon_number, icon, pw);
				
				if ( !Desk_Coord_RectContained( &icon->workarearect, &screenrect_wa) && !IconHigh_globals.newemulation.data.no_autoscroll)
					{
					// Scroll window so that the new icon is visible.
					// We can't Wimp_OpenWindow the window ourselves (we don't own it), so
					// we send it a Wimp_OpenWindow event using Wimp_SendMessage, via
					// TaskModule.
					Desk_wimp_point	dscroll = { 0, 0};
					MakeGE( dscroll.x, icon->workarearect.max.x - screenrect_wa.max.x);
					MakeLE( dscroll.x, icon->workarearect.min.x - screenrect_wa.min.x);
					MakeLE( dscroll.y, icon->workarearect.min.y - screenrect_wa.min.y);
					MakeGE( dscroll.y, icon->workarearect.max.y - screenrect_wa.max.y);
					newpos->x -= dscroll.x;
					newpos->y -= dscroll.y;
					info->block.scroll.x += dscroll.x;
					info->block.scroll.y += dscroll.y;
					Desk_Debug_Printf( Desk_error_PLACE "Calling TaskModule_SendMessage, dscroll=(%i,%i)\n", dscroll.x, dscroll.y);
					Desk_Error2_CheckOS( 
						_swix( TaskModule_SendMessage, _INR(0,6), 
							1, 
							(Desk_window_openblock*) &info->window, 
								// First few fields in Desk_window_info are a Desk_window_openblock.
							info->window, 
							0, 
							0,
							0,
							Desk_event_OPEN
							)
						);
						
					}
				}
			}
		else	{	// No icon to move to.
			Desk_Debug_Printf( Desk_error_PLACE "No icon to move to...\n");
			if (direction==iconhigh_direction_UP)		newpos->y = info->block.screenrect.max.y + 8;
			if (direction==iconhigh_direction_DOWN)		newpos->y = info->block.screenrect.min.y - 8;
			if (direction==iconhigh_direction_RIGHT)	newpos->x = info->block.screenrect.max.x + 8;
			if (direction==iconhigh_direction_LEFT)		newpos->x = info->block.screenrect.min.x - 8;
			if (direction==iconhigh_direction_NONE)		SetHighlight( NULL, 0, NULL, pw);	// Turn off the highlight.
			}
		
		GetInfoFree( info);
		info_volatile = NULL;
		}
	Desk_Error2_Catch	{
		GetInfoFree( info_volatile);
		}
	Desk_Error2_EndCatch
	
	Desk_UNUSED( pw);
	}


