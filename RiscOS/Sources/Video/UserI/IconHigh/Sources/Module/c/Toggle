#include "swis.h"
#include "kernel.h"

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.WimpSWIs.h"
#include "WindInfo2.h"

#include "Emulation.h"

#include "Toggle.h"
#include "CMHGHead.h"



//static int	global_lastchr = 0;


_kernel_oserror*	ToggleHandler2_handler( _kernel_swi_regs* r, void* pw)
	{
	Desk_Debug_Printf( Desk_error_PLACE "ToggleHandler2_handler called\n");
	
	
	#if 0
	if ( global_lastchr)	{
		
		int	k=-1;
		_swix( OS_Byte, _INR(0,1)|_OUT(2), 145, 0, &k);	// Read chr from kbd buffer, to prevent anyone else getting it.
		
		Desk_Debug_Printf( Desk_error_PLACE "Chr %i entered into kbd buffer. Just read %i\n", global_lastchr, k);
		
		HighlightKeyPressHandler( global_lastchr, pw);
		/*
		// Test whether we can call Wimp_GetWindowState
		#ifdef Desk_DEBUG
			{
			Desk_mouse_block	mouse;
			Desk_window_info*	w;
			Desk_Error2_TryCatch(
				Desk_Wimp_GetPointerInfo( &mouse);
				w = GetInfoAlloc( mouse.window);
				,
				)
			}
		#endif
		*/
		global_lastchr = 0;
		}
	else
	#endif
	
	
	if ( IconHigh_globals.currentemulation==IconHigh_newemulation_default_NONE)	{
		//EmulationPointerStart( IconHigh_newemulation_default_POINTER, pw);
		EmulationStartAuto( NULL, pw);
		}
	else	EmulationPointerStop( pw);
	return NULL;
	Desk_UNUSED( r);
	}


_kernel_oserror*	ToggleHandler_handler( _kernel_swi_regs* r, void* pw)
	{
	if ( r->r[0]==11 && r->r[1]==1)	{	// key down
		if ( r->r[2]==0x0e)	{	// Key is Scroll lock
			_swix( OS_AddCallBack, _INR(0,1), ToggleHandler2, pw);
			}
		}
	/*
	if ( IconHigh_globals.currentemulation==IconHigh_newemulation_default_HIGHLIGHTING)	{
		// Check for cursor keys
		if ( r->r[0]==2 && r->r[1]==0)	{
			global_lastchr = r->r[2];
			_swix( OS_AddCallBack, _INR(0,1), ToggleHandler2, pw);
			}
		}
	*/
	return NULL;
	}

void	ToggleInit( void* pw)
	{
	_swix( OS_Byte, _INR(0,1), 14, 11);
	_swix( OS_Claim, _INR(0,2), 0x10, ToggleHandler, pw);
	}

void	ToggleFinal( void* pw)
	{
	_swix( OS_Release, _INR(0,2), 0x10, ToggleHandler, pw);
	_swix( OS_Byte, _INR(0,1), 13, 11);
	_swix( OS_RemoveCallBack, _INR(0,1), ToggleHandler2, pw);
	}
