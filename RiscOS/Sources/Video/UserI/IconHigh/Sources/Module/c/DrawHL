#include "swis.h"

#include "Desk.Wimp.h"
#include "Desk.GFX.h"
#include "Desk.Coord.h"
#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.WimpSWIs.h"
#include "Desk.ColourTran.h"
#include "Desk.Window.h"

#include "DrawHL.h"

#include "CMHGHead.h"



static Desk_window_handle	global_window	= 0;
static Desk_icon_handle		global_icon	= 0;
static Desk_icon_block		global_iconblock;

#define	BORDER 8

#undef	Redraw_AddCallBack
#define	Redraw_AddCallBack	0x82c80
#undef	Redraw_RemoveCallBack
#define	Redraw_RemoveCallBack	0x82c81


static Desk_palette_entry	highlight_colour = { 0x0000ff00};	// Default is red



static void	ForceRedraw( void)
	{
	Desk_window_redrawblock	redraw;
	
	if ( global_window)	{
		redraw.window	= global_window;
		redraw.rect	= global_iconblock.workarearect;
		Desk_Wimp_ForceRedraw( &redraw);
		}
	}


void	SetHighlightColour( int	colour)
	{
	highlight_colour.value = colour & 0xffffff00;
	ForceRedraw();
	}


_kernel_oserror*	DrawHighlight( _kernel_swi_regs* r, void* pw)
	{
	Desk_window_state*	state = (Desk_window_state*) r->r[2];
	Desk_wimp_point		origin;
	
	Desk_Debug_Printf( Desk_error_PLACE "DrawHighlight() called\n");
	
	Desk_Coord_WindowOrigin( &origin, (Desk_convert_block*) &state->openblock.screenrect);
	//Desk_GFX_GCOL( 0, Desk_colour_RED);
	Desk_ColourTrans_SetGCOL( Desk_ColourTrans_RGB( 255, 0, 0), 0, Desk_gfx_action_OVERWRITE);
	
	Desk_GFX_RectangleFill( 
		origin.x + global_iconblock.workarearect.min.x, 
		origin.y + global_iconblock.workarearect.min.y, 
		global_iconblock.workarearect.max.x - global_iconblock.workarearect.min.x - 1, 
		BORDER - 1
		);
	Desk_GFX_RectangleFill( 
		origin.x + global_iconblock.workarearect.max.x - BORDER, 
		origin.y + global_iconblock.workarearect.min.y + BORDER, 
		BORDER - 1, 
		global_iconblock.workarearect.max.y - global_iconblock.workarearect.min.y - 1 -BORDER
		);
	Desk_GFX_RectangleFill( 
		origin.x + global_iconblock.workarearect.min.x, 
		origin.y + global_iconblock.workarearect.max.y - BORDER, 
		global_iconblock.workarearect.max.x - global_iconblock.workarearect.min.x - 1 - BORDER, 
		BORDER - 1
		);
	Desk_GFX_RectangleFill( 
		origin.x + global_iconblock.workarearect.min.x, 
		origin.y + global_iconblock.workarearect.min.y + BORDER, 
		BORDER - 1,
		global_iconblock.workarearect.max.y - global_iconblock.workarearect.min.y - 1 - BORDER - BORDER
		);
	
	return NULL;
	Desk_UNUSED( pw);
	}



static void	RemoveFilter( void* pw)
	{
	Desk_window_redrawblock	redraw;
	Desk_os_error*		e;
	
	e = _swix( Redraw_RemoveCallBack, _INR(0,4), 8, global_window, IconHigh_Redrawer, &global_iconblock.workarearect, NULL);
	if ( e)	Desk_Debug_Printf( Desk_error_PLACE "Redraw_RemoveCallBack returned '%s'\n", e->errmess);
	
	redraw.window	= global_window;
	redraw.rect	= global_iconblock.workarearect;
	global_window	= 0;
	global_icon	= -1;
	// Wimp_ForceRedraw will cause an error if window has closed.
	Desk_Error2_TryCatch(
		if ( Desk_Window_IsOpen( redraw.window))	Desk_Wimp_ForceRedraw( &redraw);
		,
		Desk_Debug_Printf( Desk_error_PLACE "Wimp_ForceRedraw returned error\n");
		)
	
	Desk_UNUSED( pw);
	}


void	SetHighlight( Desk_window_handle window, Desk_icon_handle icon, Desk_icon_block* iconblock, void* pw)
	{
	if ( window!=0 && window==global_window && icon==global_icon)	{
		Desk_Debug_Printf( Desk_error_PLACE "SetHighlight ignoring - window=0x%08x\n", window);
		return;
		}
	
	if ( global_window)	RemoveFilter( pw);
	
	global_window		= window;
	global_icon		= icon;
	global_iconblock	= *iconblock;
	
	global_iconblock.workarearect.min.x -= BORDER;
	global_iconblock.workarearect.min.y -= BORDER;
	global_iconblock.workarearect.max.x += BORDER;
	global_iconblock.workarearect.max.y += BORDER;
	
	/*
	global_iconblock.workarearect.min.x = -1024;
	global_iconblock.workarearect.min.y = -1024;
	global_iconblock.workarearect.max.x = 1024;
	global_iconblock.workarearect.max.y = 1024;
	*/
	Desk_Debug_Printf( Desk_error_PLACE "SetHighlight( window=0x%08x) called\n", window);
	
	if ( !window)	return;
	// Set filter
	
		{
		//Desk_window_redrawblock	redraw;
		Desk_os_error*	e = _swix( Redraw_AddCallBack, _INR(0,4), 8, global_window, IconHigh_Redrawer, &global_iconblock.workarearect, NULL);
		if ( e)	Desk_Debug_Printf( Desk_error_PLACE "Redraw_AddCallBack returned error '%s'\n", e->errmess);
		
		/*
		redraw.window = global_window;
		redraw.rect = global_iconblock.workarearect;
		Desk_Wimp_ForceRedraw( &redraw);
		*/
		ForceRedraw();
		}
	
	}
