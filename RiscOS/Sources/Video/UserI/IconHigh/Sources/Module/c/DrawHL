#include "swis.h"

#include "Desk.Wimp.h"
#include "Desk.GFX.h"
#include "Desk.Coord.h"
#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.WimpSWIs.h"
#include "Desk.ColourTran.h"
#include "Desk.Window.h"
#include "Desk.Sprite.h"
#include "Desk.DeskMem.h"

#include "MemCheck.MemCheck.h"

#include "DrawHL.h"
#include "Globals.h"

#include "CMHGHead.h"



static Desk_window_handle	global_window	= 0;
static Desk_icon_handle		global_icon	= 0;
static Desk_icon_block		global_iconblock;

static Desk_wimp_point		global_singletaskredraw_offset;
static Desk_sprite_areainfo*	global_singletask_oldrect	= NULL;

/*
#ifdef iconhigh_TEST
	Desk_window_state	global_windowstate;
#endif
*/

#define	BORDER 6

#undef	Redraw_AddCallBack
#define	Redraw_AddCallBack	0x82c80
#undef	Redraw_RemoveCallBack
#define	Redraw_RemoveCallBack	0x82c81

#define	Redraw_FLAGS_ABOVEICONS	8
#define	Redraw_FLAGS_BELOWICONS	0

#ifdef LOW_HIGHLIGHT
	#define	Redraw_FLAGS	Redraw_FLAGS_BELOWICONS
#else
	#define	Redraw_FLAGS	Redraw_FLAGS_ABOVEICONS
#endif


//static Desk_palette_entry	highlight_colour = { 0xde510f00};	// Default RCA blue or something
static Desk_palette_entry	highlight_colour = { 0x0000ff00};







static void	DrawHighlight2( Desk_wimp_point* origin)
	{
	Desk_ColourTrans_SetGCOL( highlight_colour.value, 0, Desk_gfx_action_OVERWRITE);
	
	if ( global_singletask_oldrect)
		{
		//_swix( 0x107, 0);
		//Desk_ColourTrans_SetGCOL( 0xffffff00, 0, Desk_gfx_action_OVERWRITE);
		}
	
	Desk_GFX_RectangleFill( 
		origin->x + global_iconblock.workarearect.min.x, 
		origin->y + global_iconblock.workarearect.min.y, 
		global_iconblock.workarearect.max.x - global_iconblock.workarearect.min.x - 1, 
		BORDER - 1
		);
	Desk_GFX_RectangleFill( 
		origin->x + global_iconblock.workarearect.max.x - BORDER, 
		origin->y + global_iconblock.workarearect.min.y + BORDER, 
		BORDER - 1, 
		global_iconblock.workarearect.max.y - global_iconblock.workarearect.min.y - 1 -BORDER
		);
	Desk_GFX_RectangleFill( 
		origin->x + global_iconblock.workarearect.min.x, 
		origin->y + global_iconblock.workarearect.max.y - BORDER, 
		global_iconblock.workarearect.max.x - global_iconblock.workarearect.min.x - 1 - BORDER, 
		BORDER - 1
		);
	Desk_GFX_RectangleFill( 
		origin->x + global_iconblock.workarearect.min.x, 
		origin->y + global_iconblock.workarearect.min.y + BORDER, 
		BORDER - 1,
		global_iconblock.workarearect.max.y - global_iconblock.workarearect.min.y - 1 - BORDER - BORDER
		);
	
	#ifdef iconhigh_TEST
		Desk_GFX_Move( state->openblock.screenrect.min.x, state->openblock.screenrect.min.y);
		Desk_GFX_Draw( state->openblock.screenrect.max.x, state->openblock.screenrect.max.y);
		Desk_GFX_Rectangle( 
			state->openblock.screenrect.min.x, 
			state->openblock.screenrect.min.y, 
			state->openblock.screenrect.max.x-8-state->openblock.screenrect.min.x, 
			state->openblock.screenrect.max.y-8-state->openblock.screenrect.min.y
			);
	#endif
	}







static void	ForceRedraw2( Desk_window_redrawblock* redraw)
	{
	Desk_os_error*	e = _swix( 0x4d306/*TaskModule_ForceRedraw*/, _INR(0,4), 
		redraw->window, 
		redraw->rect.min.x, 
		redraw->rect.min.y, 
		redraw->rect.max.x, 
		redraw->rect.max.y
		);
	if ( e)	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_ForceRedraw returned error '%s'", e->errmess);
	}



static void	ForceRedraw( void)
	{
	Desk_window_redrawblock	redraw;
	
	if ( global_singletask_oldrect)
		{
		DrawHighlight2( &global_singletaskredraw_offset);
		}
	
	else if ( global_window)
		{
		redraw.window	= global_window;
		/*
		redraw.rect	= global_iconblock.workarearect;
		Desk_Wimp_ForceRedraw( &redraw);
		*/
		
		#ifdef iconhigh_TEST
			redraw.rect.min.x = -2000;
			redraw.rect.min.y = -2000;
			redraw.rect.max.x = 2000;
			redraw.rect.max.y = 2000;
			ForceRedraw2( &redraw);
		#else
			redraw.rect.min.x = global_iconblock.workarearect.min.x;
			redraw.rect.max.x = global_iconblock.workarearect.max.x;
			
			redraw.rect.min.y = global_iconblock.workarearect.min.y;
			redraw.rect.max.y = global_iconblock.workarearect.min.y + BORDER;
			ForceRedraw2( &redraw);
			redraw.rect.min.y = global_iconblock.workarearect.max.y - BORDER;
			redraw.rect.max.y = global_iconblock.workarearect.max.y;
			ForceRedraw2( &redraw);
			
			redraw.rect.min.y = global_iconblock.workarearect.min.y + BORDER;
			redraw.rect.max.y = global_iconblock.workarearect.max.y - BORDER;
			
			redraw.rect.min.x = global_iconblock.workarearect.min.x;
			redraw.rect.max.x = global_iconblock.workarearect.min.x + BORDER;
			ForceRedraw2( &redraw);
			redraw.rect.min.x = global_iconblock.workarearect.max.x - BORDER;
			redraw.rect.max.x = global_iconblock.workarearect.max.x;
			ForceRedraw2( &redraw);
		#endif
		}
	}


void	SetHighlightColour( int	colour)
	{
	highlight_colour.value = colour & 0xffffff00;
	ForceRedraw();
	}


_kernel_oserror*	DrawHighlight( _kernel_swi_regs* r, void* pw)
	{
	Desk_window_state*	state = (Desk_window_state*) r->r[2];
	Desk_wimp_point		origin;
	
	
	Desk_Debug_Printf( Desk_error_PLACE "DrawHighlight() called\n");
	
	MemCheck_RegisterMiscBlock( r, sizeof( *r));
	MemCheck_RegisterMiscBlock( state, sizeof( *state));
	
	Desk_Coord_WindowOrigin( &origin, (Desk_convert_block*) &state->openblock.screenrect);
	
	DrawHighlight2( &origin);
	
	MemCheck_UnRegisterMiscBlock( state);
	MemCheck_UnRegisterMiscBlock( r);
	
	return NULL;
	Desk_UNUSED( pw);
	}



static void	RemoveFilter( void* pw)
	{
	Desk_os_error*		e;
	
	
	if ( global_singletask_oldrect)
		{
		// plot stored sprite directly to screen, and free memory.
		
		/*
		Desk_Sprite_Plot( 
			global_singletask_oldrect, 
			"----", 
			global_iconblock.workarearect.min.x + global_singletaskredraw_offset.x,
			global_iconblock.workarearect.min.y + global_singletaskredraw_offset.y,
			Desk_plot_SOLIDBOTH
			);
		*/
		Desk_Sprite_Plot( 
			global_singletask_oldrect, 
			"bottom",
			global_singletaskredraw_offset.x + global_iconblock.workarearect.min.x,
			global_singletaskredraw_offset.y + global_iconblock.workarearect.min.y,
			Desk_plot_SOLIDBOTH
			);
		
		Desk_Sprite_Plot( 
			global_singletask_oldrect, 
			"top",
			global_singletaskredraw_offset.x + global_iconblock.workarearect.min.x,
			global_singletaskredraw_offset.y + global_iconblock.workarearect.max.y - BORDER,
			Desk_plot_SOLIDBOTH
			);
		
		Desk_Sprite_Plot( 
			global_singletask_oldrect, 
			"left",
			global_singletaskredraw_offset.x + global_iconblock.workarearect.min.x,
			global_singletaskredraw_offset.y + global_iconblock.workarearect.min.y + BORDER,
			Desk_plot_SOLIDBOTH
			);
		
		Desk_Sprite_Plot( 
			global_singletask_oldrect, 
			"right",
			global_singletaskredraw_offset.x + global_iconblock.workarearect.max.x - BORDER,
			global_singletaskredraw_offset.y + global_iconblock.workarearect.min.y + BORDER,
			Desk_plot_SOLIDBOTH
			);
		
		Desk_DeskMem_Free( global_singletask_oldrect);
		global_singletask_oldrect = NULL;
		}
	
	else
		{
		e = _swix( Redraw_RemoveCallBack, _INR(0,4), Redraw_FLAGS, global_window, IconHigh_Redrawer, &global_iconblock.workarearect, NULL);
		if ( e)	Desk_Debug_Printf( Desk_error_PLACE "Redraw_RemoveCallBack returned '%s'\n", e->errmess);
		
		Desk_Error2_TryCatch(
			if ( Desk_Window_IsOpen( global_window))	ForceRedraw();
			,
			Desk_Debug_Printf( Desk_error_PLACE "Wimp_ForceRedraw returned error\n");
			)
		Desk_UNUSED( pw);
		}
	
	global_window	= 0;
	global_icon	= -1;
	
	}


void	SetHighlight( Desk_window_handle window, Desk_icon_handle icon, Desk_icon_block* iconblock, void* pw)
	{
	if ( window!=0 && window==global_window && icon==global_icon)	{
		Desk_Debug_Printf( Desk_error_PLACE "SetHighlight ignoring - window=0x%08x\n", window);
		return;
		}
	
	if ( global_window)	RemoveFilter( pw);
	
	global_window		= window;
	global_icon		= icon;
	global_iconblock	= *iconblock;
	
	global_iconblock.workarearect.min.x -= BORDER;
	global_iconblock.workarearect.min.y -= BORDER;
	global_iconblock.workarearect.max.x += BORDER;
	global_iconblock.workarearect.max.y += BORDER;
	/*
	#ifdef iconhigh_TEST
		Desk_Wimp_GetWindowState( window, &global_windowstate);
	#endif
	*/
	Desk_Debug_Printf( Desk_error_PLACE "SetHighlight( window=0x%08x) called\n", window);
	
	if ( !window)	return;
	// Set filter
	
	
	if ( IconHigh_globals.currentemulation.singletask_redraws)
		{
		// Draw highlight directly on screen.
		Desk_window_state	state;
		int			memsize;
		Desk_sprite_info*	dummyspriteinfo;
		
		
		Desk_Wimp_GetWindowState( window, &state);
		global_singletaskredraw_offset.x = state.openblock.screenrect.min.x - state.openblock.scroll.x;
		global_singletaskredraw_offset.y = state.openblock.screenrect.max.y - state.openblock.scroll.y;
		memsize = sizeof( Desk_sprite_areainfo);
		memsize += 2 * Desk_Sprite_MemorySize( 	// Top and bottom thin rects.
				global_iconblock.workarearect.max.x - global_iconblock.workarearect.min.x,
				BORDER,
				-1,
				Desk_sprite_HASNOMASKPAL
				);
		
		memsize += 2 * Desk_Sprite_MemorySize( 	// left and right thin rects.
				BORDER,
				global_iconblock.workarearect.max.y - global_iconblock.workarearect.min.y - 2*BORDER,
				-1,
				Desk_sprite_HASNOMASKPAL
				);
		/*
		memsize += Desk_Sprite_MemorySize( 
				global_iconblock.workarearect.max.x - global_iconblock.workarearect.min.x,
				global_iconblock.workarearect.max.y - global_iconblock.workarearect.min.y,
				-1,	// current mode
				Desk_sprite_HASNOMASKPAL
				);
		*/
		/*
		Desk_Debug_Printf( "Sprite size (%i*%i) is %i\n", 
			global_iconblock.workarearect.max.x - global_iconblock.workarearect.min.x,
			global_iconblock.workarearect.max.y - global_iconblock.workarearect.min.y,
			memsize
			);
		*/
		global_singletask_oldrect = Desk_DeskMem_RawMalloc( memsize);
		if ( global_singletask_oldrect)
			{
			global_singletask_oldrect->areasize	= memsize;
			global_singletask_oldrect->numsprites	= 0;
			global_singletask_oldrect->firstoffset	= 16;
			global_singletask_oldrect->freeoffset	= 16;
			Desk_Sprite_InitArea( global_singletask_oldrect);
			
			// Store the current bit of screen that we are going to plot over.
			Desk_Error2_CheckOS(
				_swix( OS_SpriteOp, _INR(0,7)|_OUT(2),
					256+16,
					global_singletask_oldrect, 
					"bottom", 
					0, 
					global_singletaskredraw_offset.x + global_iconblock.workarearect.min.x,
					global_singletaskredraw_offset.y + global_iconblock.workarearect.min.y,
					global_singletaskredraw_offset.x + global_iconblock.workarearect.max.x - 1,
					global_singletaskredraw_offset.y + global_iconblock.workarearect.min.y + BORDER - 1,
					&dummyspriteinfo
					)
				);
			
			Desk_Error2_CheckOS(
				_swix( OS_SpriteOp, _INR(0,7)|_OUT(2),
					256+16,
					global_singletask_oldrect, 
					"top", 
					0, 
					global_singletaskredraw_offset.x + global_iconblock.workarearect.min.x,
					global_singletaskredraw_offset.y + global_iconblock.workarearect.max.y - BORDER,
					global_singletaskredraw_offset.x + global_iconblock.workarearect.max.x - 1,
					global_singletaskredraw_offset.y + global_iconblock.workarearect.max.y - 1,
					&dummyspriteinfo
					)
				);
			
			Desk_Error2_CheckOS(
				_swix( OS_SpriteOp, _INR(0,7)|_OUT(2),
					256+16,
					global_singletask_oldrect, 
					"left", 
					0, 
					global_singletaskredraw_offset.x + global_iconblock.workarearect.min.x,
					global_singletaskredraw_offset.y + global_iconblock.workarearect.min.y + BORDER,
					global_singletaskredraw_offset.x + global_iconblock.workarearect.min.x + BORDER - 1,
					global_singletaskredraw_offset.y + global_iconblock.workarearect.max.y - BORDER - 1,
					&dummyspriteinfo
					)
				);
			
			
			Desk_Error2_CheckOS(
				_swix( OS_SpriteOp, _INR(0,7)|_OUT(2),
					256+16,
					global_singletask_oldrect, 
					"right", 
					0, 
					global_singletaskredraw_offset.x + global_iconblock.workarearect.max.x - BORDER,
					global_singletaskredraw_offset.y + global_iconblock.workarearect.min.y + BORDER,
					global_singletaskredraw_offset.x + global_iconblock.workarearect.max.x - 1,
					global_singletaskredraw_offset.y + global_iconblock.workarearect.max.y - BORDER - 1,
					&dummyspriteinfo
					)
				);
			
			
			
			/*
			Desk_Error2_CheckOS(
				_swix( OS_SpriteOp, _INR(0,7)|_OUT(2),
					256+16,
					global_singletask_oldrect, 
					"----", 
					0, 
					global_iconblock.workarearect.min.x + global_singletaskredraw_offset.x,
					global_iconblock.workarearect.min.y + global_singletaskredraw_offset.y,
					global_iconblock.workarearect.max.x + global_singletaskredraw_offset.x - 1,
					global_iconblock.workarearect.max.y + global_singletaskredraw_offset.y - 1,
					&dummyspriteinfo
					)
				);
			*/
			
			/*
			This Desk function is buggy.
			Desk_Sprite_Get(
				global_singletask_oldrect, 
				"----", 
				0, 
				global_iconblock.workarearect.min.x + global_singletaskredraw_offset.x,
				global_iconblock.workarearect.min.y + global_singletaskredraw_offset.y,
				global_iconblock.workarearect.max.x + global_singletaskredraw_offset.x - 1,
				global_iconblock.workarearect.max.y + global_singletaskredraw_offset.y - 1,
				&dummyspriteinfo
				);
			*/
			}
		}
	
	else	{
		Desk_os_error*	e;
		
		e = _swix( Redraw_AddCallBack, _INR(0,4), Redraw_FLAGS, global_window, IconHigh_Redrawer, &global_iconblock.workarearect, NULL);
		if ( e)	Desk_Debug_Printf( Desk_error_PLACE "Redraw_AddCallBack returned error '%s'\n", e->errmess);
		}
	
	ForceRedraw();
	}
