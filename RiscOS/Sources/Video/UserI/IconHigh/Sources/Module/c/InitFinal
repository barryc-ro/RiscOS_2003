#include "swis.h"

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.File.h"

//#include "Trace.Trace.h"

#include "^.Globals.h"
#include "^.GetSetPtr.h"
#include "^.Emulation.h"
#include "Toggle.h"

#include "MemCheck.MemCheck.h"

#undef PDebug_DEBUG
#ifdef Desk_DEBUG
	#define	PDebug_DEBUG
#endif
//#include "PDebug.Send.h"

#include "CMHGHead.h"



IconHigh_globalblock	IconHigh_globals;



void ServiceHandler(int service_number, _kernel_swi_regs *r, void *pw)
	{
	#ifdef MemCheck_MEMCHECK
		MemCheck_checking	oldchecking = MemCheck_SetChecking( 0, 0);
	#endif
	
	if ( service_number==0x53)	Desk_Debug_Printf( Desk_error_PLACE "Task 0x%08x has closed down\n", r->r[2]);
	
	#ifdef MemCheck_MEMCHECK
		MemCheck_RestoreChecking( oldchecking);
	#endif
	Desk_UNUSED( pw);
	}




_kernel_oserror *Initialise(char *cmd_tail, int podule_base, void *pw)
	{
	MemCheck_InitNoDebug();
	MemCheck_InterceptSCLStringFunctions();
	MemCheck_SetQuitting( 0, 0);
	MemCheck_SetStoreMallocFunctions( 1);
	MemCheck_SetReportFrees( 0);
	
	Desk_Error2_Init_JumpSig();
	
	//Desk_Debug_Printf( Desk_error_PLACE "Hello from IconHigh, from Desk_Debug_Printf\n");
	//PDebug_Printf( "Hello from IconHigh, directly from PDebug_Printf\n");
	
	//return NULL;
	
	
	#if defined( MemCheck_MEMCHECK) && !defined( Desk_DEBUG)
		MemCheck_RedirectToFilename( tmpnam( NULL));
		Desk_debug_level = 0;	// Force linking with Desk's debug library.
	#endif
	
	
	#ifdef Desk_DEBUG
		Desk_Debug_Printf( Desk_error_PLACE "freopen returned 0x%p\n", freopen( tmpnam( NULL), "w", stderr));
	#endif
	
	//Desk_Debug_Printf( Desk_error_PLACE "PDebug_Printf returned %i\n", PDebug_Printf( "Hello from IconHigh\n")); 
	
	
	Desk_Error2_Try	{
		Desk_Debug_Initialise();
		Desk_Debug_SetNestingIndentation( "  ");
		//Desk_Debug_SetLevel( 5);
		
		//Trace_SetVerboseLevel( 99);
		//Trace_IgnoreFunctions( "Trace_* Desk_* KeyDown Pointer_PtrV_handler Pointer_KeyV_handler _swix Start Stop");
		//Trace_InterceptAllFunctions();
		//Trace_InterceptFunction( PointerBuffer_Init);
		
		IconHigh_globals.newemulation.value				= 0;
		IconHigh_globals.newemulation.data.newemulation			= (int) IconHigh_newemulation_default_POINTER;
		IconHigh_globals.newemulation.data.highlighting_with_icons	= 1;
		IconHigh_globals.newemulation.data.pointer_with_noicons		= 1;
		
		IconHigh_globals.currentemulation		= IconHigh_newemulation_default_NONE;
		IconHigh_globals.lastmovement.x			= 0;
		IconHigh_globals.lastmovement.y			= 0;
		
		IconHigh_globals.lastemulation			= IconHigh_newemulation_default_NONE;
		IconHigh_globals.paused				= Desk_bool_FALSE;
		
		Emulation_Init( pw);
		}
	Desk_Error2_Catch	{
		return Desk_Error2_ConvertToOS2();
		}
	Desk_Error2_EndCatch
	
	return NULL;
	
	Desk_UNUSED( cmd_tail);
	Desk_UNUSED( podule_base);
	Desk_UNUSED( pw);
	}

_kernel_oserror *Finalise(int fatal, int podule, void *pw)
	{
	Desk_Error2_Try	{
		Emulation_Final( pw);
		EmulationPointerStop( pw);
		MemCheck_Finalise();
		}
	Desk_Error2_Catch	{
		}
	Desk_Error2_EndCatch
	
	return NULL;
	Desk_UNUSED( fatal);
	Desk_UNUSED( podule);
	Desk_UNUSED( pw);
	}
