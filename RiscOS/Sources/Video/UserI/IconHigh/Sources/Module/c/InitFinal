#include "swis.h"

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.File.h"
#include "Desk.Screen.h"

#ifdef Trace_TRACE
	#include "Trace.Trace.h"
#endif

#include "^.Globals.h"
#include "^.GetSetPtr.h"
#include "^.Emulation.h"
#include "Toggle.h"

#include "MemCheck.MemCheck.h"

#undef PDebug_DEBUG
#ifdef Desk_DEBUG
	#define	PDebug_DEBUG
#endif
//#include "PDebug.Send.h"

#include "CMHGHead.h"



IconHigh_globalblock	IconHigh_globals;



void ServiceHandler(int service_number, _kernel_swi_regs *r, void *pw)
	{
	#ifdef MemCheck_MEMCHECK
		MemCheck_checking	oldchecking = MemCheck_SetChecking( 0, 0);
	#endif

	if ( 0x46==service_number)	Desk_Screen_CacheModeInfo();

	//if ( service_number==0x53)	Desk_Debug_Printf( Desk_error_PLACE "Task 0x%08x has closed down\n", r->r[2]);

	#ifdef MemCheck_MEMCHECK
		MemCheck_RestoreChecking( oldchecking);
	#endif
	Desk_UNUSED( pw);
	Desk_UNUSED( r);
	}


#if ( CMHG_VERSION < 516)
	#define	CMHG_const
#else
	#define	CMHG_const const
#endif



#ifdef Trace_TRACE
	#include <stdarg.h>
	#include <string.h>

	static int	TracePrintFn( FILE* ref, const char* fmt, ...)
	{
	va_list	va;
	int	i;

	va_start( va, fmt);
	i = Desk_Debug_VPrintf( fmt, va);
	/*
	if ( strchr( fmt, '\n'))	// flush pdebug output.
	{
		int	i;
		for ( i=0; i<40; i++)
		Desk_Debug_Print( "                                 ");	// 32 spaces.
		Desk_Debug_Print( "\n");
	}
	*/
	va_end( va);
	return i;
	Desk_UNUSED( ref);
	}
#endif


#ifdef MemCheck_MEMCHECK
	static int	MemCheckPrintFn( void* ref, const char* format, va_list args)
	{
		return Desk_Debug_VPrintf( format, args);
		Desk_UNUSED( ref);
	}
#endif

_kernel_oserror *Initialise( CMHG_const char *cmd_tail, int podule_base, void *pw)
	{
	MemCheck_Init();
	MemCheck_InterceptSCLStringFunctions();
	MemCheck_SetQuitting( 0, 0);
	MemCheck_SetStoreMallocFunctions( 1);
	MemCheck_SetReportFrees( 0);

	Desk_Error2_Init_JumpSig();

	//Desk_Debug_Printf( Desk_error_PLACE "Hello from IconHigh, from Desk_Debug_Printf\n");
	//PDebug_Printf( "Hello from IconHigh, directly from PDebug_Printf\n");

	//return NULL;


	#if defined( MemCheck_MEMCHECK) && !defined( Desk_DEBUG)
		MemCheck_RedirectToFilename( tmpnam( NULL));
		Desk_debug_level = 0;	// Force linking with Desk's debug library.
	#endif

	MemCheck_RedirectToFunction( MemCheckPrintFn, NULL);


	#ifdef Desk_DEBUG
		Desk_Debug_Printf( Desk_error_PLACE "freopen returned 0x%p\n", freopen( tmpnam( NULL), "w", stderr));
	#endif

	//Desk_Debug_Printf( Desk_error_PLACE "PDebug_Printf returned %i\n", PDebug_Printf( "Hello from IconHigh\n"));


	Desk_Error2_Try	{
		Desk_Debug_Initialise();
		Desk_Debug_SetNestingIndentation( "  ");

		#ifdef Trace_TRACE
			//Trace_SetPrintfFn( (Trace_printffn) Desk_Debug_PrintfRef, NULL);
			Trace_SetPrintfFn( TracePrintFn, NULL);
			Trace_IgnoreFunctions( "Desk_* *_handler SetCallBackHighlightCheck TracePrintFn");
			Trace_InterceptAllFunctions();
		#endif

		Desk_Debug_SetLevel( 3);

		//Trace_SetVerboseLevel( 99);
		//Trace_IgnoreFunctions( "Trace_* Desk_* KeyDown Pointer_PtrV_handler Pointer_KeyV_handler _swix Start Stop");
		//Trace_InterceptAllFunctions();
		//Trace_InterceptFunction( PointerBuffer_Init);

		IconHigh_globals.newemulation.value				= 0;
		IconHigh_globals.newemulation.data.newemulation			= (int) IconHigh_newemulation_default_POINTER;
		IconHigh_globals.newemulation.data.highlighting_with_icons	= 1;
		IconHigh_globals.newemulation.data.pointer_with_noicons		= 1;

		IconHigh_globals.currentemulation.type			= IconHigh_newemulation_default_NONE;
		IconHigh_globals.currentemulation.singletask_redraws	= Desk_bool_FALSE;
		IconHigh_globals.lastmovement.x				= 0;
		IconHigh_globals.lastmovement.y				= 0;

		IconHigh_globals.lastemulation.type			= IconHigh_newemulation_default_NONE;
		IconHigh_globals.lastemulation.singletask_redraws	= Desk_bool_FALSE;
		IconHigh_globals.paused					= Desk_bool_FALSE;
		Desk_Screen_CacheModeInfo();
		Desk_Debug_Printf( "screen delta is (%i,%i)\n", Desk_screen_delta.x, Desk_screen_delta.y);

		Emulation_Init( pw);
		#ifdef iconhigh_DESKTOP
			{
			IconHigh_emulationtype	emulation;
			emulation.type			= IconHigh_newemulation_default_POINTER;
			emulation.singletask_redraws	= Desk_bool_FALSE;	// Use TRUE here to test singletask_redraws.
			EmulationPointerStart( emulation, pw);
			}
		#endif
		}
	Desk_Error2_Catch	{
		return Desk_Error2_ConvertToOS2();
		}
	Desk_Error2_EndCatch

	return NULL;

	Desk_UNUSED( cmd_tail);
	Desk_UNUSED( podule_base);
	Desk_UNUSED( pw);
	}

_kernel_oserror *Finalise(int fatal, int podule, void *pw)
	{
	Desk_Error2_Try	{
		Emulation_Final( pw);
		EmulationPointerStop( pw);
		MemCheck_Finalise();
		}
	Desk_Error2_Catch	{
		}
	Desk_Error2_EndCatch

	Desk_Debug_Printf( Desk_error_PLACE "IconHigh finalised\n");
	Desk_Debug_Finalise();

	return NULL;
	Desk_UNUSED( fatal);
	Desk_UNUSED( podule);
	Desk_UNUSED( pw);
	}
