#include <stdlib.h>

#include "Desk/Error2.h"
#include "Desk/Str.h"

#include "PlainArgv/PlainArgv.h"

#include "CMHGHead.h"
#include "DrawHL.h"
#include "Emulation.h"


static int	GetInt( const char* string)
	{
	if ( '&'==string[0])			return (int) strtoul( string+1, NULL, 16);
	if ( '0'==string[0] && 'x'==string[1])	return (int) strtoul( string+2, NULL, 16);
	else					return (int) strtoul( string, NULL, 10);
	}

#if ( CMHG_VERSION < 516)
	#define	CMHG_const
#else
	#define	CMHG_const const
#endif


_kernel_oserror*	Command( CMHG_const char* args, int argc, int cmd, void* pw)
	{
	Desk_Error2_Try	{
		if ( 0)	;
		else if ( cmd == CMD_IconHigh_SetHighlightColour)
		{
			if ( argc==1)	SetHighlightColour( GetInt( args));
			else
			{
				PlainArgv_argsblock	args2;
				char*			s = Desk_Str_strdupcr( args);
				int			numcols;
				Desk_palette_entry*	colours;
				int			i;
				
				PlainArgv_GetArgs( &args2, s);
				
				if ( args2.argc<1)	Desk_Error2_HandleText( "Not enough arguments");
				numcols = args2.argc-1;
				
				colours = Desk_DeskMem_CallocType( 1+numcols, Desk_palette_entry);
				for ( i=0; i<numcols; i++)	colours[i].value = GetInt( args2.argv[ i+1]);
				colours[i].value = 1;	// terminator.
				
				SetHighlightColour2( GetInt( args2.argv[0]), colours);
				
				Desk_DeskMem_Free( colours);
			}
		}
		else if ( cmd == CMD_IconHigh_Start)	{
			int	emulation = GetInt( args);
			if ( 0)	;
			else if ( emulation==0)	EmulationPointerStart0( IconHigh_newemulation_default_HIGHLIGHTING, pw);
			else if ( emulation==1)	EmulationPointerStart0( IconHigh_newemulation_default_POINTER, pw);
			else 			Desk_Error2_HandleTextf( "Unrecognised emulation type %i\n", (int) emulation);
			}
		else if ( cmd == CMD_IconHigh_Stop)	{
			EmulationPointerStop( pw);
			}
		else	Desk_Error2_HandleTextf( "Unrecognised command number %i\n", cmd);
		}
	Desk_Error2_Catch	{
		return Desk_Error2_ConvertToOS2();
		}
	Desk_Error2_EndCatch
	
	return NULL;
	
	Desk_UNUSED( argc);
	}
