#include <time.h>

#include "swis.h"

#include "Desk.Error2.h"
#include "Desk.WimpSWIs.h"
#include "Desk.Coord.h"
#include "Desk.KernelSWIs.h"

#include "^.Desk.Window2.h"

#include "MemCheck.MemCheck.h"

#include "^.Emulation.h"
#include "^.GetSetPtr.h"
#include "^.Highlight.h"
#include "^.Globals.h"

#include "WindInfo2.h"
#include "PtrV.h"
#include "DrawHL.h"
#include "Toggle.h"

#include "CMHGHead.h"

#define	TaskModule_SendMessage	0x4d300




static Desk_bool	KeyDown( int internalkeynumber)
	{
	int	r1;
	if ( internalkeynumber<0)	return Desk_bool_FALSE;
	if ( _swix( OS_Byte, _INR(0,1)|_OUT(1), 121, internalkeynumber ^ 0x80, &r1))	return Desk_bool_FALSE;
	return (r1) ? Desk_bool_TRUE : Desk_bool_FALSE;
	}


#ifndef iconhigh_DAYTONA
	
	/*
	These store whether the mouse movement buttons are down. Used when
	responding to MouseV in pointer mode.
	 */
	static	Desk_bool	keydown_left	= Desk_bool_FALSE;
	static	Desk_bool	keydown_right	= Desk_bool_FALSE;
	static	Desk_bool	keydown_up	= Desk_bool_FALSE;
	static	Desk_bool	keydown_down	= Desk_bool_FALSE;
	
	static	int	keydown_detected_from_keyv	= 0;
		// So we know whether to ignore InsV key insertions. This variable contains the number of important KeyV
		//keys that are currently known to be depressed from looking at the KeyV vector.
	
	/*
	Note that the frame rate will effect how fast the pointer-emulated mouse
	moves. Could call OS_Monotonic time every time the mouse is read and
	scale appropriately.
	 */
	#define	mousespeed_SCALE	256
	static int		mouse_speed_max	= 8*mousespeed_SCALE;
	static int		mouse_speed_min	= 1*mousespeed_SCALE;
	static int		mouse_accel	= 16;
	static int		mouse_speed	= mousespeed_SCALE;
	
	static clock_t		mouse_lasttime	= 0;
	
	
	void	SetMomentum( int* min, int* max, int* accel)
		{
		int	new_min		= mouse_speed_min;
		int	new_max		= mouse_speed_max;
		int	new_accel	= mouse_accel;
		
		if ( *min != -1)	new_min		= *min * mousespeed_SCALE;
		if ( *max != -1)	new_max		= *max * mousespeed_SCALE;
		if ( *accel != -1)	new_accel	= *accel;
		
		if	(
			new_min > new_max 
			|| new_min<0 
			|| new_max<mousespeed_SCALE 
			|| ( new_min<mousespeed_SCALE && new_accel==0)
			|| new_accel < 0
			)
			Desk_Error2_HandleText( "Invalid mouse momentum parameters");
		
		mouse_speed_min	= new_min;
		mouse_speed_max	= new_max;
		mouse_accel	= new_accel;
		
		if ( mouse_speed < mouse_speed_min)	mouse_speed = mouse_speed_min;
		if ( mouse_speed > mouse_speed_max)	mouse_speed = mouse_speed_max;
		
		*min	= mouse_speed_min / mousespeed_SCALE;
		*max	= mouse_speed_max / mousespeed_SCALE;
		*accel	= mouse_accel;
		}
	
	
	
	
	static Desk_bool	callback_set_for_highlightcheck = Desk_bool_FALSE;
	
	_kernel_oserror*	HighlighCheck_handler( _kernel_swi_regs* r, void* pw)
	// Called when real mouse has moved in highlight mode. Need to check
	// whether mouse is still over same icon.
		{
		if ( IconHigh_globals.currentemulation.type != IconHigh_newemulation_default_HIGHLIGHTING)
			return NULL;
		
		Desk_Error2_Try	{
			Desk_wimp_point	dummypos;
			MoveHighlight( &dummypos, iconhigh_direction_NONE, pw);
			callback_set_for_highlightcheck = Desk_bool_FALSE;
			}
		Desk_Error2_Catch	{
			}
		Desk_Error2_EndCatch
		
		return NULL;
		
		Desk_UNUSED( r);
		}
	
	
	#ifdef TIME_PTRV
		#include "Timer1.Timer1.h"
		
		static char		time_ptrv_buffer[ 1024] = "";
		static char*		time_ptrv_bufferend = NULL;
		
		_kernel_oserror*	SaveDtInfo_handler( _kernel_swi_regs* r, void* pw)
			{
			Desk_Debug_SetNestingIndentation( "");
			Desk_Debug_Print( time_ptrv_buffer);
			Desk_Debug_SetNestingIndentation( "  ");
			time_ptrv_buffer[ 0] = 0;
			time_ptrv_bufferend = time_ptrv_buffer;
			return NULL;
			Desk_UNUSED( pw);
			Desk_UNUSED( r);
			}
	#endif
	
	static void	SetCallBackHighlightCheck( void* pw)
		{
		if ( !callback_set_for_highlightcheck)	{
			callback_set_for_highlightcheck = Desk_bool_TRUE;
			_swix( OS_AddCallBack, _INR(0,1), HighlighCheck, pw);
			}
		}
	
	
	#define	vsync_t_SCALE	256
	static	global_vsync_t = 0;
		// This has a value equal to vsync_t_SCALE * average time between vsyncs in cs.
		// This value is maintained by tEventVHandler_handler
	
	
	static Desk_bool	global_havereceivedvsync = Desk_bool_FALSE;
		// We only move ptr in response to a PtrV when this is TRUE
		// It is set to TRUE every VSync by EventVHandler_handler,
		// and reset to FALSE by PtrV handler.
		// This avoids extra pointer movements in response to 
		// extra PtrV vectors that the kernel seems to make.
	
	
	int	EventVHandler_handler( _kernel_swi_regs* r, void* pw)
	// Called on each VSync event.
		{
		static	int	initial_its = 0;
		int		dt;
		int		t = clock();
		
		if ( mouse_lasttime==0)	initial_its = 0;	// Start from scratch - mouse_lasttime is reset to 0 whenever emulation starts again.
		
		if ( initial_its<10)	// Do a quick average in the first 10 vsyncs.
			{
			initial_its++;
			if ( initial_its==1)
				{
				mouse_lasttime = t;
				global_vsync_t = 0;
				}
			else	{
				global_vsync_t = vsync_t_SCALE * (t-mouse_lasttime)/initial_its;
				}
			}
		
		else	{		// After the first 10 vsyncs, keep a running average.
			dt = t-mouse_lasttime;
			mouse_lasttime = t;
			global_vsync_t = dt + (vsync_t_SCALE-1)*global_vsync_t/vsync_t_SCALE;
			global_havereceivedvsync	= Desk_bool_TRUE;
			}
		
		return 1;
		Desk_UNUSED( r);
		Desk_UNUSED( pw);
		}
	
	
	int	Pointer_PtrV_handler( _kernel_swi_regs* r, void* pw)
		{
		MemCheck_checking	oldchecking = MemCheck_SetChecking( 0, 0);
		
		if ( r->r[0]==0)	{
			
			Desk_wimp_point	dpos = { 0, 0};
			// Request status of device
			
			// Some cunning assembler (PtrV.s) ensures that we are called after the normal
			// mouse has filled in the mouse-movement values. Hence we simply add to the existing values.
			
			#if defined( iconhigh_DESKTOP) && defined( iconhigh_ACCEL)
				r->r[2] = ((r->r[2]>0) ? +1 : -1) * r->r[2] * r->r[2];
				r->r[3] = ((r->r[3]>0) ? +1 : -1) * r->r[3] * r->r[3];
			#endif
			
			if ( IconHigh_globals.currentemulation.type == IconHigh_newemulation_default_HIGHLIGHTING)
				{
				// mouse_dpos is not actually used - when highlighting is moved, the mouse is
				// moved directly, as moving here is subsequently scaled by Wimp.
				// Note that this moving of highlight is still done even when paused.
				SetCallBackHighlightCheck( pw);
					// Mouse has already moved, so we should check location of pointer and move/remove highlight
				}
			
			if (	global_havereceivedvsync 
				&& !IconHigh_globals.paused 
				&& IconHigh_globals.currentemulation.type==IconHigh_newemulation_default_POINTER
				)
				{
				global_havereceivedvsync = Desk_bool_FALSE;
				
				if ( keydown_left)	dpos.x -= global_vsync_t * mouse_speed / mousespeed_SCALE / vsync_t_SCALE;
				if ( keydown_right)	dpos.x += global_vsync_t * mouse_speed / mousespeed_SCALE / vsync_t_SCALE;
				if ( keydown_down)	dpos.y -= global_vsync_t * mouse_speed / mousespeed_SCALE / vsync_t_SCALE;
				if ( keydown_up)	dpos.y += global_vsync_t * mouse_speed / mousespeed_SCALE / vsync_t_SCALE;
				
				if ( keydown_left || keydown_right || keydown_down || keydown_up)	{
					if ( mouse_speed < mouse_speed_max)	mouse_speed += mouse_accel;
					}
				else	{
					mouse_speed = mouse_speed_min;
					// Stops accelaration immediately if all buttons are released.
					}
				
				r->r[2] += dpos.x;
				r->r[3] += dpos.y;
				
				IconHigh_globals.lastmovement = dpos;
				}
			
			MemCheck_RestoreChecking( oldchecking);
			return 0;	// Intercept the call.
			}
		
		else	{
			MemCheck_RestoreChecking( oldchecking);
			return 1;
			}
		
		Desk_UNUSED( pw);
		
		#ifndef MemCheck_MEMCHECK
			Desk_UNUSED( oldchecking);
		#endif
		}
#endif	// #ifndef iconhigh_DAYTONA



// These are low-level internal key numbers. See PRMs 1-156.
// These should never be changed - other KeyV events are
// converted into these values, in order to fake mouse
// button presses.
#define	KEY_KEYV_MOUSE_SELECT	0x70
#define	KEY_KEYV_MOUSE_MENU	0x71
#define	KEY_KEYV_MOUSE_ADJUST	0x72



// The next 3 sets of constants define the keys used to emulate the mouse.

// These are low-level internal key numbers. See PRMs 1-156.
#ifdef iconhigh_DESKTOP
	#define	is_keyv_SELECT( x)	( (x)==0x34 /*Delete*/		)
	#define	is_keyv_MENU( x)	( (x)==0x35 /*Copy*/		)
	#define	is_keyv_ADJUST( x)	( (x)==0x36 /*Page down*/	)
	static const int	mouse_buttons_keyv_list[]		= { 0x34, 0x35, 0x36, -1};	// PRMs 1-156
	static const int	mouse_buttons_initdown_internal_list[]	= { 89, 105, 78};		// PRMs 1-849
	static Desk_bool	mouse_buttons_initdown_list[ 3];					// Used to store state when emulation starts.

#elif defined( iconhigh_DAYTONA)
	#define	is_keyv_SELECT( x)	( (x)==0x47 /*Return*/	)
	#define	is_keyv_MENU( x)	( 0			)
	#define	is_keyv_ADJUST( x)	( 0			)
	static const int	mouse_buttons_keyv_list[]		= { 0x47, -1};			// PRMs 1-156
	static const int	mouse_buttons_initdown_internal_list[]	= { 89, 105, 78};		// PRMs 1-849
	static Desk_bool	mouse_buttons_initdown_list[ 3];					// Used to store state when emulation starts.

#else
	#define	is_keyv_SELECT( x)	( (x)==0x47 /*Return*/	)
	#define	is_keyv_MENU( x)	( (x)==0x93 /*Menu*/ || (x)==0x67 /*keypad enter*/	)
	#define	is_keyv_ADJUST( x)	(0)
	static const int	mouse_buttons_keyv_list[]		= { 0x47, 0x93, 0x67, -1};	// PRMs 1-156
	static const int	mouse_buttons_initdown_internal_list[]	= { 73, -1/*don't know code for menu*/, 60};		// PRMs 1-849
	static Desk_bool	mouse_buttons_initdown_list[ 3];					// Used to store state when emulation starts.
#endif
/*
In the above, mouse_buttons_keyv_list[] is a -1 terminated array of the
KeyV codes that IconHigh converts into mouse button KeyVs.
mouse_buttons_initdown_internal_list[] contains the corresponding
internal key numbers, which are used to find which keys are down when
emulation starts. 

This initial key state info is stored in mouse_buttons_initdown_list[].
When a KeyV comes through, if it is for a key that was initially
depressed when emulation started, it is not converted into a mousebutton
keyv, and then the entry in mouse_buttons_initdown_list[] is zeroed.
This ensures that a key that is down when emulation starts doesn't stay
down throughout emulation - this will result in auto repeat starting.
 */


// KeyV numbers - See PRMs 1-156.
#define	KEY_KEYV_RIGHT		0x64
#define	KEY_KEYV_LEFT		0x62
#define	KEY_KEYV_UP		0x59
#define	KEY_KEYV_DOWN		0x63


//Key numbers used in keyboard buffer.
#define KEY_BUFFER_LEFT		0x8c
#define KEY_BUFFER_RIGHT	0x8d
#define KEY_BUFFER_UP		0x8f
#define KEY_BUFFER_DOWN		0x8e
#define KEY_BUFFER_NEAREST	-1

#ifndef iconhigh_DESKTOP
        #define	is_buffer_SELECT( x)	( (x)==0x0d/*IRHandset Ok*/	)

#ifdef iconhigh_RCA_KEYS
	#define	is_buffer_TOGGLE( x)	( (x)==0x0e/*Kbd scroll lock*/ || (x)==0xc3/*IRHandset/Kbd 'Stop'*/	)
	#define	is_buffer_MENU( x)	( (x)==0xc1/*IRHandset Menu*/	)
#else
	#define	is_buffer_TOGGLE( x)	( 0)
	#define	is_buffer_MENU( x)	( 0)
#endif
	#define	is_buffer_ADJUST( x)	( 0)
#else
	#define	is_buffer_TOGGLE( x)	( (x)==0x0e/*Kbd scroll lock*/	)
	#define	is_buffer_SELECT( x)	0
	#define	is_buffer_MENU( x)	0
	#define	is_buffer_ADJUST( x)	0
#endif


// These are internal key numbers, as used by OS_Byte 121, Basic's INKEY(-x) etc. See PRMs 1-849
#define	KEY_INTERNAL_DOWN	41
#define	KEY_INTERNAL_UP		57
#define	KEY_INTERNAL_LEFT	25
#define	KEY_INTERNAL_RIGHT	121



static void	ReleaseAllMouseKeys( void)
	{
	/*
	#ifndef NO_EXTRA_KEYV
	int	i;
		for ( i=0; mouse_buttons_keyv_list[i]!=-1; i++)	{
			Desk_Debug_Printf( Desk_error_PLACE "ReleaseAllMouseKeys, sending key up for key %i\n", mouse_buttons_keyv_list[i]);
			_swix( OS_CallAVector, _INR(0,1)|_IN(9), 1, mouse_buttons_keyv_list[i], 0x13);
				// This is a KeyV keyup event. We rely on the kernel coping gracefully with
				// KeyV up events for keys that are already up. This is ok according 
				// to Steve Cormie.
			}
	#endif
	*/
	// See which mousebutton keys are down.
	int	i;
	for ( i=0; mouse_buttons_keyv_list[i]!=-1; i++)	{
		if ( KeyDown( mouse_buttons_initdown_internal_list[i]))	mouse_buttons_initdown_list[i] = Desk_bool_TRUE;
		else							mouse_buttons_initdown_list[i] = Desk_bool_FALSE;
		}
	}


/* A function to ensure the OS thinks all mouse buttons are released */
/* For use during IconHigh_Stop, so none of the mouse buttons get stuck down */
/* BJGA 27-Nov-1998 */
void	ReleaseAllRealMouseKeys( void)
	{
		_swix( OS_CallAVector, _INR(0,1)|_IN(9), 1, KEY_KEYV_MOUSE_SELECT, 0x13);
		_swix( OS_CallAVector, _INR(0,1)|_IN(9), 1, KEY_KEYV_MOUSE_MENU, 0x13);
		_swix( OS_CallAVector, _INR(0,1)|_IN(9), 1, KEY_KEYV_MOUSE_ADJUST, 0x13);
	}


int	Pointer_KeyV_handler( _kernel_swi_regs* r, void* pw)
	{
	int	ret = 1;	// default is to pass on the KeyV event.
	
	MemCheck_RegisterMiscBlock( r, sizeof( _kernel_swi_regs));
	
	if ( IconHigh_globals.paused)	return 1;	// pass on call.
	
	if ( r->r[0]==1 || r->r[0]==2)	{	// key release/press.
		
		Desk_Debug5_Printf( Desk_error_PLACE "KeyV, received key number 0x%02x\n", r->r[1]);
		
		// Check whether this event is keyup for a key mentioned in mouse_buttons_initdown_list.
			{
			int	i;
			for ( i=0; mouse_buttons_keyv_list[i]!=-1; i++)	{
				if ( mouse_buttons_keyv_list[i] == r->r[1] && mouse_buttons_initdown_list[i])	{
					// If we get here, this keyv is for a key that was depressed when emulation started.
					// Thus we have to let this key up through, otherwise it will be turned into a
					// mouse button up, and the key will be stuck down and start auto-repeating.
					mouse_buttons_initdown_list[i] = Desk_bool_FALSE;
					MemCheck_UnRegisterMiscBlock( r);
					return 1;
					}
				}
			}
		
		// Convert keyboard's pseudo mouse buttons to to menu button change, and pass on call.
		// Now does intercept call... 18 Feb 1997
		if (0)	;
		else if ( is_keyv_SELECT( r->r[1]))	{ r->r[1] = KEY_KEYV_MOUSE_SELECT;	}
		else if ( is_keyv_MENU(	  r->r[1]))	{ r->r[1] = KEY_KEYV_MOUSE_MENU;	}
		else if ( is_keyv_ADJUST( r->r[1]))	{ r->r[1] = KEY_KEYV_MOUSE_ADJUST;	}
		
		// Update status of cursor keys, and don't (09:43pm 07 Feb 1997) intercept call.
		// If we intercept call, this can cause problems later on if the elmulation stops
		// while a key is down - the OS will see 2 key-up events etc.
		// Seems to confuse things - system sometimes behaves as though a key is stuck down. etc.
		else if ( IconHigh_globals.currentemulation.type == IconHigh_newemulation_default_POINTER)	{
			if ( r->r[1]==KEY_KEYV_RIGHT)	{ keydown_right	= (r->r[0]==2) ? Desk_bool_TRUE : Desk_bool_FALSE; /*return 0;*/	}
			if ( r->r[1]==KEY_KEYV_LEFT)	{ keydown_left	= (r->r[0]==2) ? Desk_bool_TRUE : Desk_bool_FALSE; /*return 0;*/	}
			if ( r->r[1]==KEY_KEYV_UP)	{ keydown_up	= (r->r[0]==2) ? Desk_bool_TRUE : Desk_bool_FALSE; /*return 0;*/	}
			if ( r->r[1]==KEY_KEYV_DOWN)	{ keydown_down	= (r->r[0]==2) ? Desk_bool_TRUE : Desk_bool_FALSE; /*return 0;*/	}
			
			if ( r->r[1]==KEY_KEYV_RIGHT || r->r[1]==KEY_KEYV_LEFT || r->r[1]==KEY_KEYV_UP || r->r[1]==KEY_KEYV_DOWN)	{
				keydown_detected_from_keyv += (r->r[0]==2) ? 1 : -1;
					// So we know that keydown is from detection of a KeyV, rather than insertion into
					// keyboard buffer.
				if ( keydown_detected_from_keyv < 0)	{	// Shouldn't happen
					keydown_detected_from_keyv = 0;
					Desk_Debug5_Printf( Desk_error_PLACE "*** keydown_detected_from_keyv < 0\n");
					}
				}
			}
		
		else if ( IconHigh_globals.currentemulation.type == IconHigh_newemulation_default_HIGHLIGHTING)
			{
			/*
			We don't handle key events here - doing them
			later (by trapping  key-buffer insert events) enables auto-repeat to
			be done for us.
			 */
			}
		
		}
	
	MemCheck_UnRegisterMiscBlock( r);
	
	Desk_Debug5_Printf( Desk_error_PLACE "KeyV handler returning with r[1]=0x%02x\n", r->r[1]);
	return ret;	// Pass on the call if ret==1, otherwise intercept.
	Desk_UNUSED( pw);
	}



static Desk_bool	WindowContainsClickableIcons( Desk_window_handle window)
	{
	Desk_window_info*	info = GetInfoAlloc( window);
	Desk_icon_block*	icons = (Desk_icon_block*) (info+1);
	int			i;
	Desk_bool		r = Desk_bool_FALSE;
	
	for ( i=0; i<info->block.numicons; i++)	{
		//if ( icons[i].flags.data.buttontype != Desk_iconbtype_NEVER)	{
		if ( !IconHigh_IgnoreIcon( &icons[i]))	{
			if ( Desk_Coord_RectsOverlap( &info->block.workarearect, &icons[i].workarearect))	{
				r = Desk_bool_TRUE;
				break;
				}
			}
		}
	
	Desk_Window_GetInfoFree( info);
	return r;
	}



static Desk_bool	in_emulation_start_auto = Desk_bool_FALSE;
// Used to decide whether to move pointer to nearest icon when starting highlight mode.


void	EmulationStartAuto( Desk_window_handle window0, void* pw)
	{
	Desk_bool		ptr_in_windowborder	= Desk_bool_FALSE;
	IconHigh_emulationtype	newemulation;
	Desk_window_handle	window;
	
	newemulation.type		= IconHigh_newemulation_default_NONE;
	newemulation.singletask_redraws	= IconHigh_globals.currentemulation.singletask_redraws;
	
	Desk_Debug_Printf( Desk_error_PLACE "EmulationStartAuto called, window0=0x%p\n", (void*) window0);
	
	in_emulation_start_auto	= Desk_bool_TRUE;
	
	IconHigh_globals.lastemulation = IconHigh_globals.currentemulation;
	
	if ( !window0)	{
		Desk_window_state	state;
		Desk_mouse_block	mouse;
		Desk_Wimp_GetPointerInfo( &mouse);
		window = mouse.window;
		Desk_Debug_Printf( Desk_error_PLACE "EmulationStartAuto, mouse window=0x%p, calling GetWindowState\n", (void*) window);
		Desk_Wimp_GetWindowState( mouse.window, &state);
		Desk_Debug_Printf( Desk_error_PLACE "EmulationStartAuto, called GetWindowState\n");
		if ( !Desk_Coord_PointInRect( &mouse.pos, &state.openblock.screenrect))	ptr_in_windowborder = Desk_bool_TRUE;
		}
	else	window = window0;
	
	//IconHigh_globals.window = window;
	
	if ( 0)	;
	
	else if ( 
		IconHigh_globals.newemulation.data.newemulation == IconHigh_newemulation_default_POINTER
		||
			(
			IconHigh_globals.newemulation.data.newemulation == IconHigh_newemulation_default_PREVIOUS
			&&
			IconHigh_globals.lastemulation.type == IconHigh_newemulation_default_POINTER
			)
		)
		{
		if ( IconHigh_globals.newemulation.data.highlighting_with_icons && (!ptr_in_windowborder) && WindowContainsClickableIcons( window))
			newemulation.type	= IconHigh_newemulation_default_HIGHLIGHTING;
		else	newemulation.type	= IconHigh_newemulation_default_POINTER;
		}
	
	else if (
		IconHigh_globals.newemulation.data.newemulation == IconHigh_newemulation_default_HIGHLIGHTING
		||
			(
			IconHigh_globals.newemulation.data.newemulation == IconHigh_newemulation_default_PREVIOUS
			&&
			IconHigh_globals.lastemulation.type == IconHigh_newemulation_default_HIGHLIGHTING
			)
		)
		{
		if ( IconHigh_globals.newemulation.data.pointer_with_noicons && (ptr_in_windowborder || !WindowContainsClickableIcons( window)))
			newemulation.type = IconHigh_newemulation_default_POINTER;
		else	newemulation.type = IconHigh_newemulation_default_HIGHLIGHTING;
		}
	
	Desk_Debug_Printf( Desk_error_PLACE "EmulationStartAuto setting emulation to %i\n", newemulation.type);
	
	EmulationPointerStart( newemulation, pw);
	
	in_emulation_start_auto	= Desk_bool_FALSE;
	
	Desk_Debug_Printf( Desk_error_PLACE "EmulationStartAuto returning\n");
	}





void	HighlightKeyPressHandler( int key, void* pw)
	{
	Desk_wimp_point	pos;
	Desk_wimp_point	oldpos;
	
	Desk_Debug_Printf( Desk_error_PLACE "HighlightKeyPressHandler called for key %i\n", key);
	
	GetMousePos( &pos);
	oldpos = pos;
	
	// We only move the highlight if the key is still down, otherwise autorepeat
	// can cause lots of key events to be delivered to us well after the key has
	// been released, causing all sorts of confusion.
	
	// Exception to this is made if the key wasn't detected from KeyV. If so, it
	// will have come from the InsV on the keyboard buffer, so from the IRHandset,
	// in which case KeyDown() will always return FALSE. 
	
	if ( 0)	;
	
	else if ( key==KEY_BUFFER_LEFT	&& (!keydown_detected_from_keyv) || KeyDown( KEY_INTERNAL_LEFT))
		MoveHighlight( &pos, iconhigh_direction_LEFT, pw);
	
	else if ( key==KEY_BUFFER_RIGHT	&& (!keydown_detected_from_keyv) || KeyDown( KEY_INTERNAL_RIGHT))
		MoveHighlight( &pos, iconhigh_direction_RIGHT, pw);
	
	else if ( key==KEY_BUFFER_DOWN  && (!keydown_detected_from_keyv) || KeyDown( KEY_INTERNAL_DOWN))
		MoveHighlight( &pos, iconhigh_direction_DOWN, pw);
	
	else if ( key==KEY_BUFFER_UP	&& (!keydown_detected_from_keyv) || KeyDown( KEY_INTERNAL_UP))
		MoveHighlight( &pos, iconhigh_direction_UP, pw);
	
	else if ( key==KEY_BUFFER_NEAREST)
		MoveHighlight( &pos, iconhigh_direction_NEAREST, pw);
	
	SetMousePos( pos.x, pos.y);
	IconHigh_globals.lastmovement.x = pos.x - oldpos.x;
	IconHigh_globals.lastmovement.y = pos.y - oldpos.y;
	}


static int	global_lastkey = 0;





_kernel_oserror*	CancelIRKeyDown_handler( _kernel_swi_regs* r, void* pw)
	{
	keydown_left	= Desk_bool_FALSE;
	keydown_right	= Desk_bool_FALSE;
	keydown_up	= Desk_bool_FALSE;
	keydown_down	= Desk_bool_FALSE;
	return NULL;
	Desk_UNUSED( r);
	Desk_UNUSED( pw);
	}


_kernel_oserror*	HighlightInsV2_handler( _kernel_swi_regs* r, void* pw)
	{
	Desk_Debug_Printf( Desk_error_PLACE "HighlightInsV2_handler called - lastkey is %i\n", global_lastkey);
	
	if ( !global_lastkey)	{
		Desk_Debug_Printf( Desk_error_PLACE "HighlightInsV2_handler, global key=0\n");
		return NULL;
		}
	
	if	(
		   global_lastkey==KEY_BUFFER_LEFT
		|| global_lastkey==KEY_BUFFER_RIGHT
		|| global_lastkey==KEY_BUFFER_UP
		|| global_lastkey==KEY_BUFFER_DOWN
		)
		{
		if ( IconHigh_globals.currentemulation.type==IconHigh_newemulation_default_HIGHLIGHTING)
			HighlightKeyPressHandler( global_lastkey, pw);
		
		else if ( IconHigh_globals.currentemulation.type==IconHigh_newemulation_default_POINTER)	{
			
			if ( !keydown_detected_from_keyv)	{	// Only interested in mouse movements via kbd buffer if none detected from KeyV
				// Set a callback to cancel this keydown after a delay.
				if ( keydown_left || keydown_right || keydown_up || keydown_down)
					_swix( OS_RemoveTickerEvent, _INR(0,1), CancelIRKeyDown, pw);
					/*
					Remove the canceler, so that keydown is cancelled after this press, rather than the last one.
					*/
				
				// We cancel the keypress after a delay which is calculated from the auto-repeat freq.
				// This is so the key is treated as being down for as small a time as possible but long enough
				// to be treated as down permanently while auto-repeat is happening.
				// using delay+1 isn't ok, seems that the IRHandlset doesn't deliver keys fast enough...?
				
					{
					int	autorepeat_delay = Desk_OS_Byte_ReadCMOS( 13);
					_swix( OS_CallAfter, _INR(0,2), autorepeat_delay+10, CancelIRKeyDown, pw);
					}
				
				if ( global_lastkey==KEY_BUFFER_LEFT)	keydown_left	= Desk_bool_TRUE;
				if ( global_lastkey==KEY_BUFFER_RIGHT)	keydown_right	= Desk_bool_TRUE;
				if ( global_lastkey==KEY_BUFFER_UP)	keydown_up	= Desk_bool_TRUE;
				if ( global_lastkey==KEY_BUFFER_DOWN)	keydown_down	= Desk_bool_TRUE;
				}
			}
		}
	
	
	else if ( is_buffer_TOGGLE( global_lastkey))	{
		//IconHigh_globals.paused = (IconHigh_globals.paused) ? Desk_bool_FALSE : Desk_bool_TRUE;
		ToggleEmulation();
		Desk_Debug_Printf( Desk_error_PLACE "Just toggled pause - new status is %i\n", IconHigh_globals.paused);
		}
	
	
	else if ( IconHigh_globals.currentemulation.type!=IconHigh_newemulation_default_NONE)	{
		
		int	insertkeyv = 0;
		
		if (0)	;
		else if ( is_buffer_SELECT( global_lastkey))	insertkeyv = KEY_KEYV_MOUSE_SELECT;
		else if ( is_buffer_MENU( global_lastkey))	insertkeyv = KEY_KEYV_MOUSE_MENU;
		else if ( is_buffer_ADJUST( global_lastkey))	insertkeyv = KEY_KEYV_MOUSE_ADJUST;
		
		
		if ( insertkeyv)	{
			// Fake mouse press/release.
			Desk_Debug_Printf( Desk_error_PLACE "Calling KeyV down+up for key 0x%02x\n", insertkeyv);
			_swix( OS_CallAVector, _INR(0,1)|_IN(9), 2, insertkeyv, 0x13);
			_swix( OS_CallAVector, _INR(0,1)|_IN(9), 1, insertkeyv, 0x13);
			}
		}
	
	global_lastkey = 0;
	return NULL;
	Desk_UNUSED( r);
	}


static Desk_bool	ignore_next_key = Desk_bool_FALSE;

void	IgnoreNextKbd( void)
	{
	Desk_Debug_Printf( Desk_error_PLACE "IgnoreNextKbd called\n");
	ignore_next_key = Desk_bool_TRUE;
	}


int	HighlightInsV_handler( _kernel_swi_regs* r, void* pw)
	{
	MemCheck_RegisterMiscBlock( r, sizeof( *r));
	
	if ( r->r[1]==0)	{	//	kbd buffer
		Desk_bool	ignore = Desk_bool_TRUE;
		
		Desk_Debug_Printf( Desk_error_PLACE "HighlightInsV_handler called, key is %i\n", r->r[0]);
		
		if ( is_buffer_TOGGLE( r->r[0]))	{
			Desk_Debug_Printf( Desk_error_PLACE "Intercepted insertion of toggle\n");
			ignore = Desk_bool_FALSE;
			}
		
		else if ( IconHigh_globals.currentemulation.type==IconHigh_newemulation_default_NONE)	;
		
		else if ( IconHigh_globals.paused)	;
		
		else if ( ignore_next_key)	{
			ignore_next_key = Desk_bool_FALSE;
			MemCheck_UnRegisterMiscBlock( r);
			return 1;
			}
		
		else if (  r->r[0]==KEY_BUFFER_LEFT
			|| r->r[0]==KEY_BUFFER_RIGHT
			|| r->r[0]==KEY_BUFFER_UP
			|| r->r[0]==KEY_BUFFER_DOWN
			|| is_buffer_SELECT( r->r[0])
			|| is_buffer_MENU( r->r[0])
			|| is_buffer_ADJUST( r->r[0])
			)
			ignore = Desk_bool_FALSE;
		
		if ( !ignore)	{
			Desk_Debug_Printf( Desk_error_PLACE "setting global_lastkey (current value 0x%02x) to 0x%02x\n", global_lastkey, r->r[0]);
			global_lastkey = r->r[0];
			_swix( OS_AddCallBack, _INR(0,1), HighlightInsV2, pw);
			MemCheck_UnRegisterMiscBlock( r);
			return 0;	// Intercept the InsV, so prevent the insertion from taking place.
			}
		}
	
	MemCheck_UnRegisterMiscBlock( r);
	return 1;
	}




static Desk_event_pollmask	global_premask = {0};

_kernel_oserror*	PtrPreFilter_handler( _kernel_swi_regs* r, void* pw)
	{
	MemCheck_RegisterMiscBlock( r, sizeof( *r));
	global_premask.value = r->r[0];
	r->r[0] &= (~( (1<<Desk_event_PTRLEAVE) | (1<<Desk_event_PTRENTER)));
		// Ensure ptr enter/leave events aren't masked out.
	MemCheck_UnRegisterMiscBlock( r);
	return NULL;
	Desk_UNUSED( pw);
	}

_kernel_oserror*	PtrPostFilter_handler( _kernel_swi_regs* r, void* pw)
	{
	Desk_event_type		type;
	Desk_event_data*	data;
	
	MemCheck_RegisterMiscBlock( r, sizeof( *r));
	type = (Desk_event_type) r->r[0];
	data = (Desk_event_data*) r->r[1];
	MemCheck_RegisterMiscBlock( data, 64);
	
	Desk_Debug_Printf( Desk_error_PLACE "PtrPostFilter_handler called, type = %s\n", (Desk_event_PTRLEAVE==type) ? "ptrleave" : "ptrenter");
	
	SetHighlight( 0, 0, NULL, pw);
	
	if ( Desk_event_PTRLEAVE==type)	EmulationStartAuto( NULL, pw);
	if ( Desk_event_PTRENTER==type)	EmulationStartAuto( data->openblock.window, pw);
	if ( (1<<type) & global_premask.value)	r->r[0] = -1;
		// Stop this event from reaching the app.
	global_premask.value = 0;
	MemCheck_UnRegisterMiscBlock( data);
	MemCheck_UnRegisterMiscBlock( r);
	return NULL;
	}



static char*	filtername_pre_ptr	= "IconHigh pre ptr";
static char*	filtername_post_ptr	= "IconHigh post ptr";



void	EmulationPointerStart0( IconHigh_emulationtype0 emulation0, void* pw)
	{
	IconHigh_emulationtype	emulation;
	emulation.type			= emulation0;
	emulation.singletask_redraws	= Desk_bool_FALSE;
	EmulationPointerStart( emulation, pw);
	}


void	EmulationPointerStart( IconHigh_emulationtype emulation, void* pw)
	{
	if ( emulation.type==IconHigh_newemulation_default_NONE)
		{
		Desk_Debug_Printf( Desk_error_PLACE "EmulationPointerStart, emulation==IconHigh_newemulation_default_NONE\n");
		EmulationPointerStop( pw);
		return;
		}
        
	SetHighlight( 0, 0, NULL, pw);
        
	if (	emulation.type						== IconHigh_newemulation_default_POINTER 
		&& IconHigh_globals.currentemulation.type		== IconHigh_newemulation_default_POINTER
		&& IconHigh_globals.currentemulation.singletask_redraws	== emulation.singletask_redraws
		)
		{
		Desk_Debug_Printf( Desk_error_PLACE "EmulationPointerStart, emulation==current emulation==pointer\n");
		return;
		}
        
	if ( IconHigh_globals.currentemulation.type == IconHigh_newemulation_default_NONE)
		IconHigh_globals.paused = Desk_bool_FALSE;
		// If we are starting emulation rather than changing to a different emulation type, then reset the paused flag.
        
	EmulationPointerStop( pw);
        
	IconHigh_globals.currentemulation	= emulation;
	
	Desk_Debug_Printf( Desk_error_PLACE "EmulationPointerStart called, pw=0x%p, type=%s\n", 
		pw,
		(emulation.type==IconHigh_newemulation_default_POINTER) ? "pointer"
		: (emulation.type==IconHigh_newemulation_default_HIGHLIGHTING) ? "highlighting"
		: "-"
		);
	
	mouse_speed	= mouse_speed_min;
	mouse_lasttime	= 0;	// This is time of last PtrV interception, used to calculate how far to move the mouse.
	
	keydown_left	= KeyDown( KEY_INTERNAL_LEFT);
	keydown_right	= KeyDown( KEY_INTERNAL_RIGHT);
	keydown_up	= KeyDown( KEY_INTERNAL_UP);
	keydown_down	= KeyDown( KEY_INTERNAL_DOWN);
	
	//SetCurrentMouseButtonState();
	ReleaseAllMouseKeys();
		// This has to be called before we register Pointer_KeyV as KeyV handler, 
		// as it sends key events for all special mouse-button keys, which we
		// don't want converted into mousebutton-up events.
	
	_swix( OS_Claim, _INR(0,2), 0x26, Pointer_PtrV_Handler2, pw);
	_swix( OS_Claim, _INR(0,2), 0x13, Pointer_KeyV, pw);
	_swix( OS_Claim, _INR(0,2), 0x14, HighlightInsV, pw);
	
	_swix( OS_Claim, _INR(0,2), 0x10, EventVHandler, pw);
	_swix( OS_Byte, _INR(0,1), 14, 4/*VSync*/);	// Enable VSync events.
	
	_swix( Filter_RegisterPreFilter, _INR(0,3), 
		filtername_pre_ptr,
		PtrPreFilter,
		pw,
		0
		);
	
	_swix( Filter_RegisterPostFilter, _INR(0,4), 
		filtername_post_ptr,
		PtrPostFilter,
		pw,
		0,
		~((1<<Desk_event_PTRLEAVE) | (1<<Desk_event_PTRENTER))
		);
	
	ToggleInit( pw);
	
	/*
	Now send a dummy OpenWindow message so that the window's tasks calls Wimp_Poll.
	This will mean that the pre-filter is called, so the window-under-pointer's
	task's pollmask will be modified to accept ptrenter/leave immediately, instead
	of after the next time the task calls wimp_poll (which could well be after the
	pointer has left the window).

        SJM: 5Nov97: Changed to using a dummy scroll request (direction=0,0) as OpenWindow
        can cause problems when overlapping a real call to Wimp_OpenWindow in an app
	 */
	
		{
		Desk_mouse_block	mouse;
		Desk_window_state	state;
		Desk_scroll_rq		scroll;
		Desk_os_error*		e;
		
		Desk_Error2_Try	{
			Desk_Wimp_GetPointerInfo( &mouse);
			Desk_Wimp_GetWindowState( mouse.window, &state);

			// copy data into scroll request block
			scroll.openblock = state.openblock;
			scroll.direction.x = scroll.direction.y = 0;
			
			e = _swix( TaskModule_SendMessage, _INR(0,3)|_IN(6),
				1,
				&scroll,
				state.openblock.window,
				0,
				Desk_event_SCROLL
				);
			if ( e)	Desk_Debug_Printf( Desk_error_PLACE "TaskModule_SendMessage returned error '%s'\n", e->errmess);
			Desk_Debug_Printf( Desk_error_PLACE "Called TaskModule_SendMessage, window=0x%p\n", (void*) state.openblock.window);
			}
		Desk_Error2_Catch	{
			Desk_Debug_Printf( Desk_error_PLACE "Couldn't send fake openwindow event to window under the pointer\n");
			// This occurs when (for eg) the user starts emulation by double-clicking a BASIC file calling SWI IconHigh_Start
			// 
			}
		Desk_Error2_EndCatch
		}
	
	
	#ifndef iconhigh_DESKTOP
		if ( emulation.type==IconHigh_newemulation_default_HIGHLIGHTING)	{
			if	( 
				!IconHigh_globals.paused
				// Would be nice to not move to the nearet icon if real mouse was moving.
				/*
				&&	(
						(
						IconHigh_globals.lastmovement.x 
						|| IconHigh_globals.lastmovement.y 
						// || IconHigh_globals.lastemulation==IconHigh_newemulation_default_NONE
						)
					||	!in_emulation_start_auto
					)
				*/
				&& !IsMouseVisible()
				)
				{
				HighlightKeyPressHandler( KEY_BUFFER_NEAREST, pw);	// Moves pointer to the nearest icon...
				}
			
			}
	#endif
	}





void	EmulationPointerStop( void* pw)
	{
	Desk_Debug3_Printf( Desk_error_PLACE "EmulationPointerStop called, pw=0x%p\n", pw);
	
	SetHighlight( 0, 0, NULL, pw);
	
	if ( IconHigh_globals.currentemulation.type == IconHigh_newemulation_default_NONE)	return;
	
	_swix( Filter_DeRegisterPreFilter, _INR(0,3), 
		filtername_pre_ptr,
		PtrPreFilter,
		pw,
		0
		);
	
	_swix( Filter_DeRegisterPostFilter, _INR(0,4), 
		filtername_post_ptr,
		PtrPostFilter,
		pw,
		0,
		~((1<<Desk_event_PTRLEAVE) | (1<<Desk_event_PTRENTER))
		);
	
	_swix( OS_Release, _INR(0,2), 0x26, Pointer_PtrV_Handler2, pw);
	
	_swix( OS_Release, _INR(0,2), 0x13, Pointer_KeyV, pw);
	
	// This is to clean up any callafter handlers for cancelling IRHandset cursor presses.
	_swix( OS_RemoveTickerEvent, _INR(0,1), CancelIRKeyDown, pw);
	
	_swix( OS_Release, _INR(0,2), 0x10, EventVHandler, pw);
	_swix( OS_Byte, _INR(0,1), 13, 4/*VSync*/);	// Disable VSync events.
	
	_swix( OS_RemoveCallBack, _INR(0,1), HighlighCheck, pw);
	_swix( OS_RemoveCallBack, _INR(0,1), HighlightInsV2, pw);
	_swix( OS_Release, _INR(0,2), 0x14, HighlightInsV, pw);
	
	callback_set_for_highlightcheck = Desk_bool_FALSE;
	
	SetHighlight( 0, 0, NULL, pw);
	
	IconHigh_globals.lastemulation				= IconHigh_globals.currentemulation;
	IconHigh_globals.currentemulation.type			= IconHigh_newemulation_default_NONE;
	IconHigh_globals.currentemulation.singletask_redraws	= Desk_bool_FALSE;
	
	ToggleFinal( pw);
	
	Desk_Debug3_Printf( Desk_error_PLACE "EmulationPointerStop called2, pw=0x%p\n", pw);
	}



void	Emulation_Init( void* pw)
	{
	#ifdef TIME_PTRV
		Timer1_Wind();
	#endif
	//_swix( OS_Claim, _INR(0,2), 0x14, HighlightInsV, pw);
	Desk_UNUSED( pw);
	}


void	Emulation_Final( void* pw)
	{
	#ifdef TIME_PTRV
		Timer1_Unwind();
	#endif
	//_swix( OS_Release, _INR(0,2), 0x14, HighlightInsV, pw);
	Desk_UNUSED( pw);
	}

