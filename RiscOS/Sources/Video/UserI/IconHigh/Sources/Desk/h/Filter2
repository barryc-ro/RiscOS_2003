#ifndef __Desk_Filter2_h
#define __Desk_Filter2_h

#include "Desk.Wimp.h"


typedef struct	{
	Desk_event_type		eventtype;
	Desk_event_data*	eventdata;
	Desk_task_handle	task;
	}
	Desk_filter2_postblock;
/*
Passed to Desk_filter_posthandler functions.
 */

typedef struct	{
	Desk_event_pollmask	mask;
	Desk_event_data* const	eventdata;
	const Desk_task_handle	task;
	}
	Desk_filter2_preblock;
/*
Passed to Desk_filter_prehandler functions.
 */

typedef int	Desk_filter2_posthandle;
typedef int	Desk_filter2_prehandle;


typedef void	(*Desk_filter2_posthandler)( Desk_filter2_postblock *eventinfo, void* pw, void* reference);
/*
See Desk_Filter2_ClaimPost().

This function type can modify the data in 'eventinfo', eg setting
'eventinfo->eventtype=-1' stops the filtered task form receiving the
event etc. 

See PRMs 3-309.
 */

typedef void	(*Desk_filter2_prehandler)( Desk_filter2_preblock *eventinfo, void* pw, void* reference);
/*
See Desk_Filter2_ClaimPre().

See PRMs 3-309.
 */



Desk_filter2_posthandle	Desk_Filter2_ClaimPost( 
				int				mask, 
				Desk_task_handle		task, 
				Desk_filter2_posthandler	handler, 
				void*				reference, 
				const char*			filtername,
				void*				pw
				);
/*
task=0 puts on all tasks. For all events which aren't masked by 'mask',
this causes 'handler' to be called before the application receives the
event.

See Desk_Filter2_ReleasePost(), Desk_Filter2_ClaimPre(),
Desk_Filter2_ClaimPost2().
 */

void	Desk_Filter2_ReleasePost( Desk_filter2_posthandle handle);
/*
Cancels filtering by previous call to Desk_Filter2_ClaimPost.

See Desk_Filter2_ClaimPost().
 */


Desk_filter2_prehandle	Desk_Filter2_ClaimPre(
				Desk_task_handle	task, 
				Desk_filter2_prehandler	handler, 
				void*			reference, 
				const char*		filtername,
				void*			pw
				);
/*
task=0 puts on all tasks. For all events which aren't masked by 'mask',
this causes 'handler' to be called after the application receives the
event.

See Desk_Filter2_ReleasePre(), Desk_Filter2_ClaimPost().
 */



void	Desk_Filter2_ReleasePre( Desk_filter2_prehandle handle);
/*
Cancels filtering by previous call to Desk_Filter2_ClaimPre.

See Desk_Filter2_ClaimPre().
 */



typedef int	Desk_filter2_post2handle;

Desk_filter2_post2handle	Desk_Filter2_ClaimPost2( 
					int				mask, 
					Desk_task_handle		task, 
					Desk_filter2_posthandler	handler, 
					void*				reference, 
					const char*			filtername,
					void*				pw
					);
/*
Similar to Desk_Filter2_ClaimPost, except that events which are let
through by 'mask' are detected even if the specified task masks them out
itself.

This is done by installing a prefilter as well as a post filter. The
prefilter alters the mask passed by the filtered application when it
calls Wimp_Poll, while the postfilter prevents the filtered application
from seeing any events which it originally masked out.
 */

void	Desk_Filter2_ReleasePost2( Desk_filter2_post2handle handle);
/*
 */

#endif
