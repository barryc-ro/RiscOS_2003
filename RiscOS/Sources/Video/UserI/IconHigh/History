22 Jan 1997

Got SWI chunk allocated.



29 Jan 1997
Current status: Moves between icons in the current window in highlight
mode. Ballistic emulation works ok, with accelaration etc.

Works by sitting on PointerV and KeyV.

Problems so far: Detection of cursor keys is fine when looking for key
up/down events for ballistic emulation. However, highlighting needs to
be given keys after autorepeat has been added by the kernel. At the
moment I can't do this - tried to use OS_Byte 4 (PRMs (1-856) to make
cursor keys output normal key codes, but this didn't work. Hence
ballistic emulation currently responds to 2,4,8 and 6 being pressed
(either on numeric keypad or in main part of keyboard). The key events
aren't intercepted yet.


30 Jan 1997

Now /adds/ ballistic movement to that specified by the usual mouse, so
that IconHigh doesn't stop the normal mouse from being used.



03 Feb 1997

In highlight mode, distance now weighted according to direction.

Now scrolls window if needed to expose icon. This uses new feature of
TaskModule 0.05.


Added two Desk libraries locally, which allow veneers which pass a
reference to the client handler (as well as CMHG's pw), and a high-level
interface to the filter manager. Both seem to work.


04 Feb 1997

Added extra filter code for filters which munge the app's pollmask so
that the required events are always detected by the filter, even if the
task masks them out.

Seems to work ok. Note that testing the filtering out of the added code
with WimpMon doesn't work too well - WimpMon can see the extra events if
its filter is called before IconHigh's mask-restoring filter.

Added code to handle ptrenter/leave, and switch to appropriate emulation
mode. Works reasonably, but pointer stops moving and one has to press
cursor key again in ballistic mode. Tried hack to find initial state of
cursor keys, but doesn't work.


06 Feb 1997

Doesn't restart emulation when moving to new window if emulation is
unchanged.


07 Feb 1997

Seemed to have solved most of the problems. 

One was that sometimes a pointer enter event is received but
WImp_GetPointerInfo thinks pointer is still over old window. Thus
IconHigh chose the wrong window to test for presence of icons etc. The
intermitency of this was probably caused by the random order in which
IconHigh's filter detected event_LTRLEAVE/ENTER.

Another (which resulted in spurious movement of mouse and extra key
events being delivered to wimp apps) was caused by IconHigh blithely
moving the mouse inresponse to buffered autorepat events. It now only
moves the mouse in highlight mode if the appropriate key is still
pressed.

Now carries on moving after switching to ballisticmode from highlight
mode.

Need to stop cursor presses from reaching applications. Probably have to
use a filter.


11 Feb 1997

Bug causes no stack for trap handler etc. Seems that ptr enter/leave
code corrupts the memory of the task which is being filtered.

Seems to be ptr leave - eg moving onto titlebar. If no new emulation is
started (which is mosdt of the time because EmulationPointerStart
returns immediately if new emulation == old emulation) then everything
is ok.

Trying to ignore ptr leave com,pletely.
probkem is caused by ptr enter too. Even caused when
PtrEnterLeaveHandler calls EmulationPointerStart() straightaway, without
any checking of window info etc.

Problem goes away if Desk_Filter2_ClaimPost2 claim/relese is ommited...

Maybe it is the setting of r0to -1 after postfilter

Bug was caused by Desk_Filter2_ not coping with a filter being
unregistered by its client function. Hurray for MemCheck...


Still seems to be problem, only occurs after emulation has restarted,
and when key events are masked out...

**Check that MC checking isn't turnied ofand not restored...**
**try with direct CMHG veneers instead of Desk_ModHand etc.**



12 Feb 1997
Trying with direct CMHG veneers...Also removwed all mouse-buffer
functions in c.pointer - they were unused anyway. Seems to work ok.

13 Feb 1997
Made all key nbymers be #defines.


14 Feb 1997

Keeps lastmovement up to date.


17 Feb 1997

Problem with Filtermanager not understanding the inconsistent version
numbers used by Windowmanagr. It checks for version 3.80, and assumes
that all later versions have new filter code. Ubfortuntely, they don't.
Now have a hacked version which checks for version 3.96. This is on my
NC's NFS directory.


Works ok.


18 Feb 1997

Now intercepts KeyV in ballistic mode when key press is a cursor
direction key. Should prevent on-screen keyboard from detecting cursor
keypress KeyV and thus think that there is a real kbd present, and thus
closing down.

Now moves highlight when real mouse is moved.
Modified MoveHighlight() to cope with directioni_NULL - looks for valid
icon under pointer.

Problems are caused when window containing iconhighlightong is closed -
looks like redrawmanager doesn't detect this...?
Oops - problem was called by IconHigh calling Wimp[_ForceRedraw when
highlight was removed - caused problems when window doesn't exist any
more... Seems to be fixed now...






18 Mar 1997

Some info on keys...

Three types of key numbers are used:

KEY_KEYV_*	These are as used in the KeyV vector (PRMs 5a-238), and
		also in Key up/down events (PRMs 1-156).
KEY_INTERNAL_*	Used to test status of keys in OS_Byte 121, Basic's
		INKEY(-x) etc.
KEY_WIMP_*	Key numbers in Wimp keyboard events.

All three numbers are currently used because IconHigh does the following:


Detects KeyV vectors, and converts keypresses to mouse button presses.
This is done at this low level so that the kernel will automatically
detect mouse double-clicks and drags. Also allows IconHigh to store the
status of the direction keys when in pointer mode so that it knowns
which directorion to move the mouse in in response to PointerV (which is
generated every VSync), without explicitly testing the key up/down
status every VSync.

In highlight mode, IconHigh intercepts Wimp events for the direction
keys. This is done so that auto-repeat of the direction keys happens.

When emulation starts, the status of the direction keys is found
immediately (before the next PointerV), so that the mouse isn't
automatically stationary for an instant. This allows IconHigh to stop
and then start emulation whenever the pointer moves across a window
boundary without losing momentum. This makes deciding whether to change
emulation mode simpler.


Because the NC's IR keyboard and keypad only put key codes into the
keyboard buffer (PRMs 1-153), need to change the above mechanism so that
it doesn't rely on KeyV.



18 Mar 1997

Added detection of ScollLock key - toggles emulation on/off.

This is not quite as trivial as it may seem. If emulation is started off
with the pointer in the middle of a window, then IconHigh might not get
the first ptr-leave event, if the window's task has masked
ptrenter/leave and doesn't receive an event before the ptr leaves. This
is because IconHigh relies on munging each task's pollmask so that ptr
enter/leaves are always received. This can only be done immediately
after the task calls Wimp_Poll.

Will have to send a dummy event or something... The only candidate I can
see is Event_Scroll_Request (10), which cannot be masked out, and
accepts a scroll direction 0 meaning no change. Could send this to the
window, so that the prefilter can then munge the poll mask. 

19 Mar 1997

Better would be to send Open_Window, which also connot be masked out.
Have done this. Doesn't always work though - under some circumstances,
the call to Wimp_GetWindowState returns 'invalid wimp operation in this
context'. Seems to be ok for detectkon of toggle key though.

Implemented IconHigh_SetMomentum. 

Implemented IconHigh_SetHighlightColour - not tested. 

Fixed bug in !ROM_AOF !Run - adds -d flag to makatic3



20 Mar 1997
Looking at detecting highglight movement from keyboard buffer rather
than wimp poll interception. Keyboard buffer is number 0, write chr 'c'
with 'OS_Byte 128, 0, c'.
Cursor keys generate codes 140-143 (0x8c-0x8f) - see PRMs 1-892

Converted to intercept InsV to find keys, rather than Wimp event_Key
events. Also added SWI IconHigh_IgnoreNextCharacter.


21 Mar 1997

Refuses to move mouse to negative x or y coordinate - when this is
attempted, the mouse seems to end up 256 units in from the edge.


26 Mar 1997

Added support for irhandset. Module version now set to 0.01
IRhandset buffer codes are:
Ok:	0x0d
Menu:	0xc1
Stop:	0xc3

Seems to work ok, but pointer emulation without key up/down is not very
good - have to pretend the key is down for a time (dependent on the
autorepeat rate) so that autorepeat results in smooth movement and
accelaration.

NB This version still uses Delete,End,PageDown as mouse buttons on
standard keyboard.

Checked in as version 0.02


Added some timing code which uses my Timer1 library to measure the
interval between calls to the PtrV vector. There seem to be extra calls
for some reason. This version built by 'cc -dTIME_PTRV ...'.



08 Apr 1997

Changing the operation of the toggle key. This is only active when
emulation is on, and temporarily turns emulation off. Paused status is
orthogonal to the emulation type. Thus the emulation can change from
between pointer and highlight and still be paused. Pause is turned off
when emulation changes from none to either of pointer or highlight.

Detection of toggle has to be done by looking for key/down events - the
scroll key isn't put into the keyboard buffer, neither is the IRHandset
'Stop' key. This also avoids the toggling being sensitive to
auto-repeat.

All seems to work ok...


09 Apr 1997

Doing two things: Putting calls to clock() into PtrV handler to avoid
jumping of the pointer in pointer mode, and fixing flagging of a
key-press being from interception of KeyV rather than keyboard-buffer
InsV (will work with n-key rollover).

All works fine...


-- version 0.04 --


Note that the use of clock() in the PtrV handler isn't ideal. The time
between PtrV calls is typically 0, 1 or 2 cs, so the pointer still moves
unevenly.




15 Apr 1997

Adding code to work with IRKeyboard keys.

Adding code to ensure that the kernel's KeyV code doesn't get sent
contradictory mouse-key events (eg two key-down events in a row).


16 Apr 1997

Removed code that ensured that kernel's KeyV code doesn't get sent
contradictory mouse-key events. This was originaly done to fix a problem
where if emulation was started while <return> was depressed, the release
of <return> would be converted into a mouse button release, leaving the
os thinking that the return key was still down, and autorepeating it
into the keyboard buffer, which was then picked up by IconHigh and
converted into multiple SELECT clicks.

Other problems were also likely to be caused by pressing of buttons/keys
inparticular orders.

Anyway, solution now adopted is to send keyv release events for all
mouse button keys whenever emulation starts. Steve Cormie says that the
kernel's KeyV code can cope fine with such multiple key events.

There is a problem with drags from highlight emulation - ptr leave
events don't seem to be sent, so emulation doesn't change to pointer as
it should...



-- version 0.05 --


16 Apr 1997

Changed .s files so that GET <filename> has correct case-sensitivity for
the filename. This is needed when on a case-sensitive filesystem such as
SawFS.

Making pointer move straight to an icon when highlight emulation is
started. Done.

Making distance algorithm better. Used to measure from current pointer
position to nearest edge of each possible next icon. Will ammend this to
measure from nearest edge of current icon, if any.

Need to ignore faded icons - Wimp_GetPointerInfo ignores them, causing
problems... Fixed.

Only remaining problem is slightly non-optimal movement between icons -
eg MultiDesk's config window.

17 Apr 1997

Fixed non-optimal movement between icons.

If NO_EXTRA_KEYV is defined, extra keyv won't be sent when iconhigh
starts emulaton.

If LOW_HIGHLIGHT is defined, RedrawManager will be called with r0 bit 3
unset, so that highlights are drawn behind icons.

ROM build currently defines NO_EXTRA_KEYV, as this causes the onscreen
keyboard to disappear immeditately. A better solution would be to make
iconhigh ignore the initial releases of mouse button keys which were
down when emulation started, however, this requires use of INKEY(-xx),
and I don't known the codes...

Now checks for whether normal keyboard mousekeys are down when emulation
starts. When the first KeyV event comes through for a pressed key, it is
passed on. If an IRKeyboard key is depressed though, this won't be
detected, as I don't know the internal key codes.

Only moves to the nearest icon when last movement isn't (0,0). This
stops the pointer jumping when moved via mouse into a window-with-icons.


-- version 0.06 --

Added MemCheck commands

-- version 0.07 --


18 Apr 1997

Changed algorithm for moving between icons in highlight mode. Works much
better with the on-screen-kbd.

Changed to forceredraw of just the four rects making up each highlight,
rather than the whole icon.


-- version 0.08 --

19 Apr 1997
Minor change to highlight algorithm - works better with overlapping icons.

Added *commands IconHigh_SetHighlightColour, IconHigh_Start,
IconHigh_Stop.


-- version 0.09 --

22 Apr 1997

Desktop version turns emulation on immediately it is loaded.


23 Apr 1997

Now ignores deleted icons.

Also checks all relevent icons flags when deciding whether to use
highlight mode in a new window. The check used to be different from the
check used when moving between icons.

-- version 0.10 --


23 Apr 1997

Version 0.04 doesn't seem to show bug where clicking and dragging on a
NCKeyboard key causes crashes etc.

IconHigh is stealing ptr enter/leave events from tasks that need them.

Changed && to & in postfilter handler, when checking whether the event
should be let through to the filtered task.

Now calls TaskModule_ForceRedraw instead of Wimp_ForceRedraw, to prevent
breaking random application's redraw loops (gave 'Redraw_Rectangle
called incorrectly errors'). This requires version 0.07 of TaskModule.


-- version 0.11 --

28 Apr 1997

Ensuring pointer is moved to nearest icon whenever highlight mode is
started (unless paused).


12 May 1997

Modifying Desktop version so that it scales the mouse movement. Only
happens when iconhigh_ACCEL is defined.


13 May 1997

-- version 0.12 --


13 May 1997

Ignoring icons if they aren't wholy within the workarea; this makes
nckeyboard work properly when top row icons are hidden, and is nicer as
it means that one doesn't end up on half-visible icons.

Also implemented disallow of scrolling when bit 5 of defaultemulation
word is set.

-- version 0.13 --

Adding timing based on VSync event, which is also used to prevent
spurious PtrVs to be ignored. This results in much smoother movement in
Pointer emulation.


-- version 0.14 --

Treats edge of window as a place to move to. Previously only moved out
of window when no icon was present in the required direction. This
should prevent movement to highly non-optimal icons near edge of window.

Changin the highlight algorithm yet again. When moving up, takes
starting point as middle of top of current icon. Finishing point is the
nearest point on the bottom of the destination icon to the starting
point. The distance between these points is then put through an
elliptical distortion to get the final mearsure of the distance.

Actually, something similar to this method was tried ages ago, but
didn't work too well for some reason...

If icons overlap, then y coor of destination point is halfway up the
icon. This is needed to work with icons that overlap slightly (eg
RISC OS up/down arrows).


-- version 0.15 --


04 Jun 1997

Adding conditional code for special version of IconHigh in the Daytona
project. For Daytona, no pointer emulation.


09 Jun 1997

Adding support for use in non-multitasking windows, such as Wimp error
boxes. This involves redrawing the highlight directly, rather than using
RedrawManager, and restoring the highlighted part of the window by
storing it in 4 tempoarary sprites before drawing the highlight.

Desk_Sprite_Get seems to be plain wrong, so am _swix instead.


-- version 0.16 --

Fixed bug in SWI IconHigh_Start introduced in version 0.16 - always
turned mouse emulation off completely.

-- version 0.17 --


Working on Daytona things... Daytona's keyboard generates normsl KeyV
events, so no faffing around with keyboard buffer 8) .


20 Jun 1997

Daytona:	Now moves caret into new icons. Looking at moving
		between icons when no toolbox objects available.
		
		Using CMHG 5.16, so added const to some fn prototypes.
		
		Works roughly stepping between Wimp icons. Need toolbox
		window to test stepping between gadgets.


23 Jun 1997

Daytona:	Moves caret to start of string - moving to end requires
		reading string, which involves a Wimp_TransferBlock.
		
		Moves to first icon/component when emulation starts.
		
		Adding to SetHighlghtColour SWI - if bit 0 of r0 is 1,
		then r1 is highlight width, and r2 points to array of
		colours. If colours are teminated by word with bit0 set,
		then they repeat. Width is in pixels.

ie spec for IconHigh_SetHighlightColour is:


SWI IconHigh_SetHighlightColour 0x4e706

On entry:
	r0 = Flags:
		Bits 1-31 reserved (must be 0)
		Bit 1 controls whether to set full details of highlight
			or just the colour.
	If r0 bit 0 is unset:
		r1 = New highlight colour, 0xbbggrrxx
	If r0 bit 0 is set:
		r1 = width of highlight in pixels
		r2 = pointer to array of colours (one word per colour,
			0xbbggrrxx). If array of colours are teminated
			by a word with bit 0 set, then they repeat.
On exit:
	All registers preserved.

This sets the highlight colour used in Highligh mode. The default is red
(0x0000ff00).




11 Jul 1997

Daytona:

Seems to vaguely work with my modified toolbox Window module (version
1.40), which has new SWIs Window_EnumerateGadgets and
Window_GadgetGetIconList, and also fixes a bug in Gadget_GetIconList.

21 Jul 1997

Daytona: Added code to sort list of window gadgets by component id.
	Added a few try..catch blocks around generic veneers.


22 Jul 1997

Daytona:	The code to set the caret position caused data aborts -
scanned the icon's indirected text, which isn't guaranteed to be paged
in. Fix for this is to simply put the caret at the end of the buffer -
the wimp copes with this.

Further problem is caused by us doing Wimp operations while a redraw is
going on - random tasks get 'Wimp_GetRectangle called incorrectly'. This
error doesn't occur if we don't set the caret, so have to find a way of
setting the caret when not in a redraw rectangle.

23 Jul 1997

TaskModule 0.10 has a callback SWI which should allow this. Now uses
this callback SWI (TaskModule_AddCallBack). Seems to work.


-- version 0.18 --

29 Jul 1997

Uses Wimp_TransferBlock to get contents of indirected icons when putting
caret at end of icon. Stops caret looking like it is at end, but is
actually beyond the end of the icon text.


-- version 0.19 --

Turns caret off before moving it, in case moving to a non-text icon.

29 Jul 1997

Fixed bug in call to Window_EnumerateGadgets using _swix - was not
giving address of returned register, so _swix was trampling over random
memory... 8( .


30 Jul 1997

Makes caret invisible rather than turned off when moving to an icon that
isn't writable.

31 Jul 1997

Puts hidden caret in window when there are no icons to move to.

31 Jul 1997

Scrolls window a bit further, so that highlight is visible.
When sending evenbt_OPEN to window to scroll it so that highlighted icon
is visible, now has a global openblock structure, which is filled in
with the new openpos. Instead of calling TaskModule_SednMessage, uses
TaskModule_AddCallBack, and the fn that is called back calls
Wiomp_SendMessage directly. This ensures that the latest scroll
positions are sent. Previously, if more than one event_OPEN was sent
before the receiving window's task was polled, the event_OPENs could
atrive in the wrong order, resulting inthe window not moving far enough.




18 Aug 1997

Uses taskmodule's callback-after-nullevent to ignore move requests when
just issued a openwindow. starts handling requests after taskmodule
callsback in its nullevent handler. This should ensure that window
scroll etc are up to date.
Requires TaskModule 0.11.

-- version 0.20 --
