/*---------------------------------------------------------------------------*/
/* File:    c.scrbounce                                                      */
/* Purpose: Shrinks the desktop and bounces it around the screen.            */
/* Author:  Richard Leggett                                                  */
/* History: 01-Jun-98: RML: Started.                                         */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "wimplib.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"
#include "saver.h"

#define SettingsFile         "<Choices$Write>.ScrSavers.ScrBounce"
#define SpriteInitArea       9
#define SpriteGetSprite      16
#define SpritePutSprite      34
#define SpritePutScaled      52
#define SpriteSwitchToSprite 60
#define State_Initial        1
#define State_Shrinking      2
#define State_Bouncing       3
#define XShrinkStep          20
#define YShrinkStep          16
#define ShrinkTime           600
#define ShrinkDelay          1
#define DefaultRatio         4
#define DefaultBounceStep    1
#define DefaultBounceDelay   0

static MessagesFD messages_desc;
static IdBlock    idb;
static int       *spritearea = 0;
static int        screenw;
static int        screenh;
static int        xeig;
static int        yeig;
static int        bpp;
static int        state = State_Initial;
static int        shrink_x = 0;
static int        shrink_y = 0;
static int        bounce_x = 0;
static int        bounce_y = 0;
static int        x_step = 0;
static int        y_step = 0;
static int        block_ratio = DefaultRatio;
static int        bounce_step = DefaultBounceStep;
static int        bounce_delay = DefaultBounceDelay;
static int        last_time = 0;


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    saver_exit();
    exit(0);
}


/*---------------------------------------------------------------------------*
 * read_settings                                                             *
 *                                                                           *
 * Read the current settings file.                                           *
 *---------------------------------------------------------------------------*/

void read_settings(void)
{
    char  string[256];
    FILE *fp;
    
    fp=fopen(SettingsFile, "r");
    if (fp)
    {
        fgets(string, 256, fp);
        sscanf(string, "Ratio %d", &block_ratio);
        fgets(string, 256, fp);
        sscanf(string, "Bounce step %d", &bounce_step);        
        fgets(string, 256, fp);
        sscanf(string, "Bounce delay %d", &bounce_delay);        
        fclose(fp);
    }
    
    if (block_ratio > 20) block_ratio = 20;
    if (block_ratio < 2)  block_ratio = 2;
    
    if (bounce_step < 0) bounce_step = 0;
    if (bounce_step > 10) bounce_step = 10;

    if (bounce_delay < 0) bounce_delay = 0;
    if (bounce_delay > 100) bounce_delay = 100;
}        


/*---------------------------------------------------------------------------*
 * init_sprite_area                                                          *
 *                                                                           *
 * Initialise the sprite area used to store the block.                       *
 *---------------------------------------------------------------------------*/

int init_sprite_area(void)
{
    int size;
    int sw = 256 + (screenw>>xeig);
    int sh = screenh>>yeig;

    /* Calculate how big the sprite area needs to be for this screenmode */
    size = (sw * bpp) / 8;
    if ( (sw * bpp * 8) > (size * 8 * 8) ) size++;
    size = (size+3)&~3;
    size = (size * sh) + 44 + 16;

    /* Get memory */
    spritearea = malloc(size);
    if (!spritearea) return 0;
    spritearea[0] = size;
    spritearea[2] = 16;

    /* Initialise sprite area */
    _swix(OS_SpriteOp, _INR(0,1), 256+SpriteInitArea, spritearea);
    
    /* Create sprite */
    saver_error_trap(_swix(OS_SpriteOp, _INR(0,7), 256 + SpriteGetSprite,
                                  spritearea,
                                  "grab",
                                  0,
                                  0,
                                  0,
                                  screenw - (1>>xeig),
                                  screenh - (1>>yeig))    , 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * shrink_a_bit_more                                                         *
 *                                                                           *
 * Shrink the screen a bit more.                                             *
 *---------------------------------------------------------------------------*/

static void shrink_a_bit_more(int time)
{
    //static float x_shrink_factor = 0;
    //static float y_shrink_factor = 0;
    static int   final_x = 0;
    static int   final_y = 0;
    int          x_shrink_by;
    int          y_shrink_by;
    int          x;
    int          y;
    int          scale[4];
    int          size;
    
    if (final_x == 0)
    {
        final_x = screenw / block_ratio;
        final_y = screenh / block_ratio;
        //x_shrink_factor = ((float)screenw - (float)final_x) / ShrinkTime;
        //y_shrink_factor = ((float)screenh - (float)final_y) / ShrinkTime;
        //last_time = time - 10;
        shrink_x = screenw;
        shrink_y = screenh;
    }
    
    //time = time - last_time;
    //x_shrink_by = (int) (x_shrink_factor * (float)time);
    //y_shrink_by = (int) (y_shrink_factor * (float)time);
    x_shrink_by = XShrinkStep;
    y_shrink_by = YShrinkStep;
    
    if ((shrink_x - x_shrink_by) < final_x)
        x_shrink_by = shrink_x - final_x;

    if ((shrink_y - y_shrink_by) < final_y)
        y_shrink_by = shrink_y - final_y;

    shrink_x -= x_shrink_by;
    shrink_y -= y_shrink_by;
        
    scale[0] = shrink_x;
    scale[1] = shrink_y;
    scale[2] = screenw;
    scale[3] = screenh;
    
    x = (screenw - shrink_x) / 2;
    y = (screenh - shrink_y) / 2;
        
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);
                                  
    /* Black out the border bits we're losing */
    _swix(OS_Plot, _INR(0, 2), OSPlot_Move,          x - x_shrink_by, y);
    _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, x_shrink_by,     shrink_y);
    
    _swix(OS_Plot, _INR(0, 2), OSPlot_Move,          x + shrink_x,    y);
    _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, x_shrink_by,     shrink_y);

    _swix(OS_Plot, _INR(0, 2), OSPlot_Move,          x - x_shrink_by,              y - y_shrink_by);
    _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, shrink_x + (2 * x_shrink_by), y_shrink_by);

    _swix(OS_Plot, _INR(0, 2), OSPlot_Move,          x - x_shrink_by,              y + shrink_y);
    _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, shrink_x + (2 * x_shrink_by), y_shrink_by);

    /* Plot the sprite */
    _swix(OS_SpriteOp, _INR(0,7), 256+SpritePutScaled,
                                  spritearea,
                                  "grab",
                                  x,
                                  y,
                                  0,
                                  scale,
                                  0);
                                                                         
    /* See if we've reached our desired size yet */
    if (shrink_y <= final_y)
    {
        bounce_x = x;
        bounce_y = y;
        x_step = bounce_step<<xeig;
        y_step = bounce_step<<yeig;

        saver_error_trap(_swix(OS_SpriteOp, _INR(0,7), 256 + SpriteGetSprite,
                              spritearea,
                              "grab",
                              0,
                              x - (2*x_step),
                              y - (2*y_step),
                              x + shrink_x + (2*x_step),
                              y + shrink_y + (2*y_step))    ,0);
                              
        size = spritearea[3];
        spritearea = realloc(spritearea, size);
        if (!spritearea)
        {
            saver_handle_fatal_error();
            return;
        }
                              
        state = State_Bouncing;
        
        saver_decide_double_buffering();
    }
}


/*---------------------------------------------------------------------------*
 * bounce_it                                                                 *
 *                                                                           *
 * Move the screen sprite.                                                   *
 *---------------------------------------------------------------------------*/

static void bounce_it(void)
{
    saver_write_bank();
    
    _swix(OS_SpriteOp, _INR(0,5), 256 + SpritePutSprite,
                                  spritearea,
                                  "grab",
                                  bounce_x,
                                  bounce_y,
                                  0);

    saver_read_bank();
                                  
    bounce_x += x_step;
    bounce_y += y_step;
    
    if ( (bounce_x > (screenw - shrink_x) )
      || (bounce_x < 0) )
    {
        x_step = -x_step;
        bounce_x += x_step;
    }
    
    if ( (bounce_y > (screenh - shrink_y) )
      || (bounce_y < 0) )
    {
        y_step = -y_step;
        bounce_y += y_step;
    }

}


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our sliding on null events.                *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{ 
    int current_time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &current_time);
    
    switch(state)
    {
        case State_Initial:
            saver_error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
            state = State_Shrinking;
            break;
          
        case State_Shrinking:
            if ((last_time + ShrinkDelay) <= current_time)
            {
                shrink_a_bit_more(current_time);
                last_time = current_time;
            }
            break;
        
        case State_Bouncing:
            if ((last_time + bounce_delay) <= current_time)
            {
                bounce_it();
                last_time = current_time;
            }
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_hide_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_show_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - ignore them in fact!                               *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int                   more;
    
    wimp_update_window(&block, &more);
    while (more)
    {
        wimp_get_rectangle(&block, &more);
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}

/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise toolbox etc.                                                   *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    int task_handle;
    int main_window;

    /* Initialise toolbox */
    saver_error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0), 1);
    saver_error_trap(event_initialise(&idb), 0);
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord +
                                    Wimp_Poll_PollWordHighPriority), 0);    

    /* Register event handlers */
    saver_error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Open the covering window */
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);
    saver_error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    saver_open_covering_window(main_window);

    /* More initialisation */
    read_settings();
    saver_error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 9, &bpp), 0);
    bpp = 1<<bpp;
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop.                                                        *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = 0;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();
    if (!main_initialise()) program_exit();
    if (!init_sprite_area())
    {
        event_set_mask(Wimp_Poll_PollWord + Wimp_Poll_NullMask);
    }

    while (TRUE)
    {
        saver_error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }

    return 0;
}


