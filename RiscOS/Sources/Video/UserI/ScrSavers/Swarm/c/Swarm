/*---------------------------------------------------------------------------*/
/* File:    Swarm.c                                                          */
/* Purpose: Swarming bees screen saver.                                      */
/* Author:  David Brown                                                      */
/* History: 29-Apr-98: DTAB: Created.                                        */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "wimplib.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

static MessagesFD    messages_desc;
static IdBlock       idb;
static int           screenw;
static int           screenh;
static int           saver_initialised = 0;

#define SettingsFile "<Choices$Write>.ScrSavers.Swarm"
#define BEEACC       3
#define QUEENACC     5
#define BEEMAX       18
#define QUEENMAX     20

typedef struct
{
  int xpos;
  int ypos;
  int oldxpos;
  int oldypos;
  int xdir;
  int ydir;
} bee;

/* Configurable variables */
static unsigned int    delay  = 0;
static unsigned int    nobees = 100;
static unsigned char   near_r = 255;
static unsigned char   near_g = 255;
static unsigned char   near_b = 0;
static unsigned char   far_r  = 255;
static unsigned char   far_g  = 0;
static unsigned char   far_b  = 0;
static unsigned int    queen_col = 0xffffff00;

/* Internal variables */
static bee           * swarm;
static unsigned int    old_time;

/* Colour tables */
static unsigned int    coloursGCOL[9][256]; /* 0-8 for brightness, 0-255 for distance */
static unsigned int    blackGCOL;
static unsigned int    queenGCOL;

_kernel_oserror *saver_error(const char *st)
{
  static _kernel_oserror e;
  e.errnum=0;
  strcpy(e.errmess, st);

  return &e;
}

/*---------------------------------------------------------------------------*
 * read_settings                                                             *
 *                                                                           *
 * Read the current settings file.                                           *
 *---------------------------------------------------------------------------*/

_kernel_oserror * read_settings(void)
{
  _kernel_oserror * e;
  char              string[256];
  char            * buffer;
  int               flags, buffsize;
  int               messblk[4];
  int               tempcol;
  int               type;

  _swix(OS_File, _INR(0,1)|_OUT(0), 17, SettingsFile, &type);
  if (type!=1) return NULL;

  if ((e = _swix(MessageTrans_FileInfo, _IN(1) | _OUTR(1, 2), SettingsFile, &flags, &buffsize)) != NULL) return e;
  buffer = malloc(buffsize);

  if ((e = _swix(MessageTrans_OpenFile, _INR(0, 2), messblk, SettingsFile, buffer)) != NULL)
  {
    free(buffer);
    return e;
  }
  /* Read bits here */

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "NoBees:100", string, 256, 0, 0, 0, 0))
    nobees    = (unsigned int)strtoul(string, NULL, 10);

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "QueenColour:0xffffff00", string, 256, 0, 0, 0, 0))
    queen_col = (unsigned int)strtoul(string, NULL, 16);

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "NearColour:0x00ffff00", string, 256, 0, 0, 0, 0))
  {
    tempcol   = (unsigned int)strtoul(string, NULL, 16);
    near_r    = (tempcol >> 8) & 0xff;
    near_g    = (tempcol >> 16) & 0xff;
    near_b    = (tempcol >> 24) & 0xff;
  }

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "FarColour:0x0000ff00", string, 256, 0, 0, 0, 0))
  {
    tempcol   = (unsigned int)strtoul(string, NULL, 16);
    far_r     = (tempcol >> 8) & 0xff;
    far_g     = (tempcol >> 16) & 0xff;
    far_b     = (tempcol >> 24) & 0xff;
  }

  if (!_swix(MessageTrans_Lookup, _INR(0, 7), messblk, "Delay:0", string, 256, 0, 0, 0, 0))
    delay     = (unsigned int)strtoul(string, NULL, 10);

  e = _swix(MessageTrans_CloseFile, _IN(0), messblk);

  free(buffer);
  return e;
}

/*---------------------------------------------------------------------------*
 * init_saver                                                                *
 *                                                                           *
 * Initialist the screensaver.                                               *
 *---------------------------------------------------------------------------*/

_kernel_oserror * init_saver(void)
{
  _kernel_oserror *e;
  bee * temp;
  int   count, count2;
  unsigned char red, green, blue;

  e = read_settings();
  if (e) return e;

  swarm = malloc(sizeof(bee) * nobees);
  if (!swarm) return saver_error("Insufficient memory");

  temp = swarm;

  for(count = nobees; count; count--)
  {
    temp->xpos = rand() % screenw;
    temp->ypos = rand() % screenh;
    temp->oldxpos = temp->xpos;
    temp->oldypos = temp->ypos;
    temp->xdir = 0;
    temp->ydir = 0;

    temp++;
  }

  /* Create interpolated colour array */
  for(count = 0; count < 256; count++)
  {
    red   = (far_r * count) + near_r * (255 - count) >> 8;
    green = (far_g * count) + near_g * (255 - count) >> 8;
    blue  = (far_b * count) + near_b * (255 - count) >> 8;

    for(count2 = 0; count2 < 9; count2++)
    {
      /* Brightness is currently not used but is provided to allow fading trails behind the bees */
      e = _swix(ColourTrans_ReturnGCOL, _IN(0) | _OUT(0), (((red   * count2) >> 3) << 8)  |
                                                          (((green * count2) >> 3) << 16) |
                                                          (((blue  * count2) >> 3) << 24), &coloursGCOL[count2][count]);

      if (e) return e;
    }
  }

  e = _swix(ColourTrans_ReturnGCOL, _IN(0) | _OUT(0), 0, &blackGCOL);
  if (e) return e;
  e = _swix(ColourTrans_ReturnGCOL, _IN(0) | _OUT(0), queen_col, &queenGCOL);
  if (e) return e;

  return NULL;
}

/*---------------------------------------------------------------------------*
 * call_saver                                                                *
 *                                                                           *
 * Call the screensaver to do an update.                                     *
 *---------------------------------------------------------------------------*/

_kernel_oserror * call_saver(void)
{
  _kernel_oserror *e;
  bee * temp;
  int   count;
  int   dy, dx, distance;
  unsigned int current_time;

  e = _swix(OS_ReadMonotonicTime, _OUT(0), &current_time);
  if (e) return e;

  if (current_time - old_time < delay) return NULL;

  old_time = current_time;

  /* Special case the queen for extra speed */

  e = _swix(ColourTrans_SetColour, _IN(0)|_IN(3)|_IN(4), blackGCOL, 0x80, 0);
  if (e) return e;
  e = _swix(OS_Plot, _INR(0,2), 4, swarm->oldxpos, swarm->oldypos);
  if (e) return e;
  e = _swix(OS_Plot, _INR(0,2), 7, swarm->xpos, swarm->ypos);
  if (e) return e;

  swarm->oldxpos = swarm->xpos;
  swarm->oldypos = swarm->ypos;

  e = _swix(ColourTrans_SetColour, _IN(0)|_IN(3)|_IN(4), queenGCOL, 0, 0);
  if (e) return e;
  swarm->xdir += (rand() % QUEENACC*2+1) - QUEENACC;
  swarm->ydir += (rand() % QUEENACC*2+1) - QUEENACC;

  /* Limit speed */
  if (swarm->xdir >  BEEMAX) swarm->xdir =  QUEENMAX;
  if (swarm->xdir < -BEEMAX) swarm->xdir = -QUEENMAX;
  if (swarm->ydir >  BEEMAX) swarm->ydir =  QUEENMAX;
  if (swarm->ydir < -BEEMAX) swarm->ydir = -QUEENMAX;

  /* Bounce the queen off the edges of the screen */
  if ((swarm->xpos + swarm->xdir > screenw) || (swarm->xpos + swarm->xdir < 0)) swarm->xdir = -swarm->xdir;
  if ((swarm->ypos + swarm->ydir > screenh) || (swarm->ypos + swarm->ydir < 0)) swarm->ydir = -swarm->ydir;

  swarm->xpos += swarm->xdir;
  swarm->ypos += swarm->ydir;

  e = _swix(OS_Plot, _INR(0,2), 5, swarm->xpos, swarm->ypos);
  if (e) return e;

  /* End of queen code */

  /* The general case for all other bees in the swarm */

  temp = swarm + 1;

  for(count = nobees-1; count; count--)
  {
    e = _swix(OS_Plot, _INR(0,2), 4, temp->oldxpos, temp->oldypos);
    if (e) return e;
    e = _swix(OS_Plot, _INR(0,2), 7, temp->xpos, temp->ypos);
    if (e) return e;

    temp->oldxpos = temp->xpos;
    temp->oldypos = temp->ypos;

    /* Swarm */
    dy = swarm->ypos - temp->ypos;
    dx = swarm->xpos - temp->xpos;
    distance = abs(dx) + abs(dy);

    if (distance)
    {
      /* Accelerate bee towards queen */
      temp->xdir += (dx * BEEACC) / distance;
      temp->ydir += (dy * BEEACC) / distance;

      /* Spread the bees out a bit */
      if (rand() % 30 == 1)
      {
        temp->xdir += (rand() % BEEACC * 4 + 1) - BEEACC * 2;
        temp->ydir += (rand() % BEEACC * 4 + 1) - BEEACC * 2;
      }

      /* Limit speed */
      if (temp->xdir >  BEEMAX) temp->xdir =  BEEMAX;
      if (temp->xdir < -BEEMAX) temp->xdir = -BEEMAX;
      if (temp->ydir >  BEEMAX) temp->ydir =  BEEMAX;
      if (temp->ydir < -BEEMAX) temp->ydir = -BEEMAX;
    }

    distance >>= 1;

    if (distance > 255) distance = 255;

    e = _swix(ColourTrans_SetColour, _IN(0) | _INR(3, 4), coloursGCOL[8][distance], 0, 0);
    if (e) return e;

    temp->xpos += temp->xdir;
    temp->ypos += temp->ydir;

    e = _swix(OS_Plot, _INR(0,2), 5, temp->xpos, temp->ypos);
    if (e) return e;

    temp++;
  }

  return NULL;
}


/*---------------------------------------------------------------------------*
 * kill_saver                                                                *
 *                                                                           *
 * Kill the screensaver prior to exit.                                       *
 *---------------------------------------------------------------------------*/

_kernel_oserror * kill_saver(void)
{
  if (swarm) free(swarm);
  return NULL;
}

/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
  _kernel_oserror *e;

  e = kill_saver();

  /* Turn on pointer */
  _swix(OS_Byte, _INR(0,1), 106, 1);

  /* Unset ScrSaver$Running */
  _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);

  /* Exit */
  exit(0);
}


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
  /* Report the appropriate error, has one occured */
  if (err != NULL)
  {
    wimp_report_error(err, 0, "Screensaver", 0, 0, 0);

    /* Now, if it was a fatal error (type != 0), exit at once */
    if (err_type != 0) exit(0);
  }
}

/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void set_random_seed(void)
{
  int time;

  _swix(OS_ReadMonotonicTime, _OUT(0), &time);
  srand(time);
}

/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  if (!saver_initialised)
  {
    /* We no longer need high priority poll word checking */
    error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
    saver_initialised = 1;
  }

  call_saver();

  return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  _swix(OS_Byte, _INR(0,1), 106, 0);

  return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  _swix(OS_Byte, _INR(0,1), 106, 1);

  return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpRedrawWindowBlock block;
  int                   more;

  wimp_update_window(&block, &more);
  while (more)
  {
    wimp_get_rectangle(&block, &more);
  }

  return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  program_exit();

  return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/

int message_quit(WimpMessage *event, void *handler)
{
  program_exit();

  return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise the toolbox, work out the screensize, open the window.         *
 *                                                                           *
 * Globals: screenw, screenh                                                 *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
  WimpOpenWindowBlock   win;
  BBox                  extent;
  int                   show[2];
  int                   xeig;
  int                   yeig;
  int                   xpixels;
  int                   ypixels;
  int                   task_handle;
  int                   window_toolbox_id;
  int                   window_wimp_handle;

  /* Initialise and register event handlers */
  error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                0, &task_handle, 0), 1);
  error_trap(event_initialise(&idb), 1);
  error_trap(event_set_mask(Wimp_Poll_PollWord +
                            Wimp_Poll_PollWordHighPriority), 0);

  error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

  /* Find screen size */
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 1);
  screenw = xpixels<<xeig;
  screenh = ypixels<<yeig;

  /* Set the extent of the 'covering' window. */
  extent.xmin = 0;
  extent.xmax = screenw;
  extent.ymin = 0;
  extent.ymax = screenh;
  show[0] = 0;
  show[1] = screenh;
  error_trap(toolbox_create_object(0, "Window", &window_toolbox_id), 1);
  error_trap(window_set_extent(0, window_toolbox_id, &extent), 1);
  error_trap(window_get_wimp_handle(0, window_toolbox_id, &window_wimp_handle), 1);

  /* Open the covering window */
  win.window_handle=window_wimp_handle;
  win.visible_area.xmin = 0;
  win.visible_area.xmax = screenw;
  win.visible_area.ymin = 0;
  win.visible_area.ymax = screenh;
  win.xscroll = 0;
  win.yscroll = 0;
  win.behind= - 1;
  error_trap(wimp_open_window(&win), 1);

  error_trap(init_saver(), 1);

  return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
  WimpPollBlock  wpb;
  int            event_code;
  int           *pollword = 0;

  if (argc>1) pollword = (int*) atoi(argv[1]);

  if (!pollword)          program_exit();
  if (!main_initialise()) program_exit();

  while (TRUE) error_trap(event_poll(&event_code, &wpb, pollword), 0);

  return 0;
}
