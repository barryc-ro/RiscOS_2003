/*---------------------------------------------------------------------------*/
/* File:    c.smearset                                                       */
/* Purpose: Configuration for Smear screen blanker                           */
/* Author:  Richard Leggett                                                  */
/* History: 20-Nov-97: RML: Begun.                                           */
/*          20-Mar-98: RML: Minor changes.                                   */
/*          20-May-98: RML: Default key handler added.                       */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"
#include "wimplib.h"

#define TaskName      "Screensaver setup"
#define SettingsFile  "<Choices$Write>.ScrSavers.Smear"

#define BlockSizeRange 0x02
#define SlideStepRange 0x03
#define DefaultButton  0x06
#define CancelButton   0x07
#define SetButton      0x08

static MessagesFD messages_desc;
static IdBlock    idb;
static int        main_window;


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, TaskName, 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    exit(0);
}


/*---------------------------------------------------------------------------*
 * read_screensize                                                           *
 *                                                                           *
 * Return the size of rhe screen in OS units                                 *
 *---------------------------------------------------------------------------*/

_kernel_oserror* read_screensize(int *x, int *y)
{
    _kernel_oserror* e;
    int              xeig;
    int              yeig;
    int              xpix;
    int              ypix;

    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpix); if (e) return e;
    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypix); if (e) return e;

    *x = xpix << xeig;
    *y = ypix << yeig;

    return NULL;
}


/*---------------------------------------------------------------------------*
 * save_choices                                                              *
 *                                                                           *
 * Read the choices from the window and output a command file.               *
 *---------------------------------------------------------------------------*/

static void save_choices(void)
{
    FILE *fp;
    int   state;
    int   smear;
    char  string[256];
    
    error_trap(radiobutton_get_state(0, main_window, 1, &state, &smear), 0);

    fp = fopen(SettingsFile, "w");
    if (fp)
    {
        sprintf(string, "Type %d", smear);
        fputs(string, fp);
        fputc(0x0a, fp);
        fclose(fp);
    }
}


/*---------------------------------------------------------------------------*
 * set_default_choices                                                       *
 *                                                                           *
 * Fill in the default choices in the dialogue box.                          *
 *---------------------------------------------------------------------------*/

static void set_default_choices(void)
{
    error_trap(radiobutton_set_state(0, main_window, 1, 1), 0);
}


/*---------------------------------------------------------------------------*
 * read_choices                                                              *
 *                                                                           *
 * Read the *Filer_Options command from the choices file.                    *
 *---------------------------------------------------------------------------*/

static void read_choices(void)
{
    FILE *fp;
    char  string[256];
    int   smear = 1;
    
    fp = fopen(SettingsFile, "r");
    if (fp)
    {
        fgets(string, 256, fp);
        sscanf(string, "Type %d", &smear);
        if ((smear>3) || (smear<1)) smear=1;
        fclose(fp);
    }

    error_trap(radiobutton_set_state(0, main_window, smear, 1), 0);
}


/*---------------------------------------------------------------------------*/
/*                                Event handlers                             */
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * toolbox_error                                                             *
 *                                                                           *
 * Handler for errors from toolbox.                                          *
 *---------------------------------------------------------------------------*/

int toolbox_error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxErrorEvent *error_event = (ToolboxErrorEvent *)event;
    _kernel_oserror    err;

    strcpy(err.errmess, error_event->errmess);
    err.errnum=error_event->errnum;
    wimp_report_error(&err, 0, TaskName, 0, 0, 0);

    return 1;
}

/*---------------------------------------------------------------------------*
 * default_key_handler                                                       *
 *                                                                           *
 * Handler for key presses.                                                  *
 *---------------------------------------------------------------------------*/

static int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
   int key_code = event->key_pressed.key_code;

   wimp_process_key(key_code);

   return 1;
}


/*---------------------------------------------------------------------------*
 * action_selected                                                           *
 *                                                                           *
 * Handler for when action buttons are clicked on.                           *
 *---------------------------------------------------------------------------*/

int action_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    ActionButtonSelectedEvent *block = (ActionButtonSelectedEvent*) event_block;
    int                        icon = id_block->self_component;

    switch (icon)
    {
        case SetButton:
            save_choices();
            if ((block->hdr.flags & 7)==0) program_exit(); /* Return pressed */
            if (block->hdr.flags & 4) program_exit();      /* Left button */
            break;

        case CancelButton:
            if ((block->hdr.flags & 7)==0) program_exit(); /* Escape pressed */
            if (block->hdr.flags & 1)                      /* Right button */
            {
                 read_choices();      
            }
            if (block->hdr.flags & 4) program_exit();      /* Left button */
            break;
            
        case DefaultButton:
            set_default_choices();
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * close_window                                                              *
 *                                                                           *
 * Called when user has clicked on close icon of window.                     *
 *---------------------------------------------------------------------------*/

int close_window(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*/
/*                     Program startup & polling loop                        */
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * open_configure_window                                                     *
 *                                                                           *
 * Called to open the configure window on screen and register handlers.      *
 *---------------------------------------------------------------------------*/

static void open_configure_window(int at_x, int at_y)
{
    BBox bbox;
    int  screenx;
    int  screeny;
    int  buffer[2];

    /* Create window */
    error_trap(toolbox_create_object(0, "Window", &main_window), 1);

    read_choices();

    /* Register handlers for the configure window */
    error_trap(event_register_toolbox_handler(-1,Toolbox_Error,toolbox_error,NULL) ,0);
    error_trap(event_register_wimp_handler(main_window, Wimp_ECloseWindow, close_window, NULL), 0);
    error_trap(event_register_toolbox_handler(main_window, ActionButton_Selected, action_selected, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL), 0);

    /* Work out positioning (unless it was supplied in the command line) */
    if ((at_x==-1) && (at_y==-1))
    {
        error_trap(read_screensize(&screenx, &screeny), 0);
        error_trap(window_get_extent(0, main_window, &bbox), 0);
        at_y = screeny - ((screeny+bbox.ymin)/2);
        at_x = (screenx - bbox.xmax)/2;
    }

    /* Show the window */
    buffer[0] = at_x;
    buffer[1] = at_y;
    error_trap(toolbox_show_object(0, main_window, 2, buffer, 0, 0), 0);
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise toolbox etc.                                                   *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Returns: 1 if everything went okay, 0 otherwise                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    int               task_handle;
    static int        mess_wanted[] = {Wimp_MQuit,
                                       0};
    static int        tbox_wanted[] = {Toolbox_Error,
            	                       ActionButton_Selected,
                                       0};
                                
    error_trap(toolbox_initialise(0, 310, mess_wanted, tbox_wanted,
                                  "<SvrSetup$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0) ,1);
    error_trap(event_initialise(&idb), 0);
    error_trap(event_set_mask(Wimp_Poll_NullMask), 0);    
    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);

    return 1;
}
                                  

/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop                                                         *
 *---------------------------------------------------------------------------*/

int main(int argc, char *argv[])
{
    WimpPollBlock wpb;
    int           event_code;
    int           openat_x = -1;
    int           openat_y = -1;

    /* Have we been passed any co-ordinates to open at? */
    if (strcmp(argv[1], "-openat")==0)
    {
        openat_x = atoi(argv[2]);
        openat_y = atoi(argv[3]);
    }

    /* Do main initialisation */
    if (!main_initialise()) return 0;
    
    /* Open configure window */
    open_configure_window(openat_x, openat_y);

    /* Poll loop */
    while (1)
    {
        error_trap(event_poll(&event_code, &wpb, NULL), 0);
    }
    
    return 0;
}         

