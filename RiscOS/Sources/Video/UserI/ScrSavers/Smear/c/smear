/*---------------------------------------------------------------------------*/
/* File:    c.smear                                                          */
/* Purpose: Simple screen saver.                                             */
/* Author:  Richard Leggett                                                  */
/* History: 18-Nov-97: RML: Created.                                         */
/*          19-Mar-98: RML: Updated.                                         */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "wimplib.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

#define SettingsFile "<Choices$Write>.ScrSavers.Smear"
#define PlotType     190
#define Size         128

static MessagesFD messages_desc;
static IdBlock    idb;
static int        screenw;
static int        screenh;
static int        smeartype;
static int        xmove = -4;
static int        ymove = -4;
static int        smear_initialised = 0;


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    /* Turn on pointer */
    _swix(OS_Byte, _INR(0,1), 106, 1);

    /* Unset ScrSaver$Running */
    _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);
    
    /* Exit */
    exit(0);
}


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, "Screen Blanker", 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int rnd(int n)
{
    return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void set_random_seed(void)
{
    int time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    srand(time);
}


/*---------------------------------------------------------------------------*
 * read_settings                                                             *
 *                                                                           *
 * Read the current settings file.                                           *
 *---------------------------------------------------------------------------*/

void read_settings(void)
{
    char  string[256];
    FILE *fp;
    
    fp = fopen(SettingsFile, "r");
    if (fp)
    {
        fgets(string, 256, fp);
        sscanf(string, "Type %d", &smeartype);
        fclose(fp);
    }

    switch(smeartype)
    {
        case 2:
            xmove = 0;
            ymove = -4;
            break;
        default:
            xmove = -4;
            ymove = -4;
            break;
    }
}


/*---------------------------------------------------------------------------*
 * initialise_smear                                                          *
 *---------------------------------------------------------------------------*/

void initialise_smear(void)
{
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);

    _swix(OS_Plot, _INR(0,2), 4, 0, screenh-8);
    _swix(OS_Plot, _INR(0,2), 101, screenw, screenh);

    _swix(OS_Plot, _INR(0,2), 4, screenw-8, 0);
    _swix(OS_Plot, _INR(0,2), 101, screenw, screenh);

    _swix(OS_Plot, _INR(0,2), 4, 0, 0);
    _swix(OS_Plot, _INR(0,2), 101, 8, screenh);
    
    /* We no longer want high priority pollword scans */
    error_trap(event_set_mask(Wimp_Poll_PollWord), 0);    

    smear_initialised = 1;
}


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    int x;
    int y;

    if (!smear_initialised) initialise_smear();

    x = rnd(screenw + Size) - Size;
    y = rnd(screenh - Size);
    
    if (x > (screenw - Size)) x = screenw - Size;
    
    if (x < 0) x = 0;
    
    if (smeartype==3)
    {
        if (rnd(2)==1) xmove = -4;
        else xmove = 4;
        if (rnd(2)==1) ymove = -4;
        else ymove = 4;
    }

    _swix(OS_Plot, _INR(0,2), 4, x, y);
    _swix(OS_Plot, _INR(0,2), 4, x+Size, y+Size);
    _swix(OS_Plot, _INR(0,2), PlotType, x+xmove, y+ymove);

    return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int                   more;
    
    wimp_update_window(&block, &more);
    while (more)
    {
        wimp_get_rectangle(&block, &more);
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    _swix(OS_Byte, _INR(0,1), 106, 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    _swix(OS_Byte, _INR(0,1), 106, 1);

    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    WimpOpenWindowBlock win;
    BBox                extent;
    int                 show[2];
    int                 xeig;
    int                 yeig;
    int                 xpixels;
    int                 ypixels;
    int                 task_handle;
    int                 main_window;
    int                 wimp_handle;

    read_settings();
    set_random_seed();

    /* Initialise and register event handlers */
    error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0), 1);
    error_trap(event_initialise(&idb), 0);
    error_trap(event_set_mask(Wimp_Poll_PollWord +
                              Wimp_Poll_PollWordHighPriority), 0);
  
    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Find screen size */
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 0);
    screenw = xpixels<<xeig;
    screenh = ypixels<<yeig;

    /* Set the extent of the 'covering' window. */
    extent.xmin = 0;
    extent.xmax = screenw;
    extent.ymin = 0;
    extent.ymax = screenh;
    show[0] = 0;
    show[1] = screenh;
    error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    error_trap(window_set_extent(0, main_window, &extent), 0);
    error_trap(window_get_wimp_handle(0, main_window, &wimp_handle), 0);

    /* Open the covering window */
    win.window_handle = wimp_handle;
    win.visible_area.xmin = 0;
    win.visible_area.xmax = screenw;
    win.visible_area.ymin = 0;
    win.visible_area.ymax = screenh;
    win.xscroll = 0;
    win.yscroll = 0;
    win.behind = -1;
    error_trap(wimp_open_window(&win), 0);
        
    return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = 0;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();
    if (!main_initialise()) program_exit();

    while (TRUE)
    {
        error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }

    return 0;
}
