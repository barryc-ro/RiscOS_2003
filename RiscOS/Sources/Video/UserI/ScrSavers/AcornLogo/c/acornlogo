/*---------------------------------------------------------------------------*/
/* File:    c.acornlogo                                                      */
/* Purpose: Simple screen saver.                                             */
/* Author:  Richard Leggett                                                  */
/* History: 21-Nov-97: RML: Created.                                         */
/*          23-Mar-98: RML: Minor modifications.                             */
/*          03-Jun-98: RML: Removed reference to PhotoQV in error reporting. */
/*          05-Jun-98: RML: Screen banking added.                            */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "wimplib.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"
#include "saver.h"

#define SettingsFile         "<Choices$Write>.ScrSavers.Acornlogo"
#define SpriteFile           "<BlankTask$Dir>.Frames"
#define FirstLoopingFrame    34
#define LastLoopingFrame     34
#define DelayBetweenFrames   2
#define DelayBetweenMoves    1
#define SpriteInitialiseArea 9
#define SpriteLoadFile       10
#define SpriteReadInfo       40
#define SpritePutScaled      52
#define JustStarting         -2
#define DefaultSpeed         2


static int       *spritearea = 0;
static char      *ctrans_table = 0;
static char       spritename[16];
static IdBlock    idb;
static MessagesFD messages_desc;
static int        screenw;
static int        screenh;
static int        xeig;
static int        yeig;
static int        last_frame;
static int        last_move;
static int        spritew;
static int        spriteh;
static int        logo_x;
static int        logo_y;
static int        x_step;
static int        y_step;


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    saver_exit();
    if (spritearea) free(spritearea);
    if (ctrans_table) free(ctrans_table);

    exit(0);
}


/*---------------------------------------------------------------------------*
 * read_settings                                                             *
 *                                                                           *
 * Read the current settings file.                                           *
 *---------------------------------------------------------------------------*/

void read_settings(void)
{
#if 0
    FILE *fp;
    char  string[256];

    fp=fopen(SettingsFile, "r");
    if (fp)
    {
        fgets(string, 256, fp);
        sscanf(string, "Speed %d", &speed);
        fclose(fp);
    }
    
    if (speed<0) speed = 1;
    if (speed>4) speed = 4;
#else
    int speed = DefaultSpeed;    
#endif
    x_step = speed<<xeig;
    y_step = speed<<yeig;
}        



/*---------------------------------------------------------------------------*
 * plot_sprite                                                               *
 *                                                                           *
 * Er, plot the sprite.                                                      *
 *---------------------------------------------------------------------------*/

void plot_sprite(void)
{
    saver_write_bank();
    
#if 0
    if (speed > 2)
    {
        /* Black out the corner pieces which will be left as a trail */
        _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);
        _swix(OS_Plot, _INR(0, 2), OSPlot_Move, logo_x - (speed*x_step), logo_y - (speed*y_step));
        _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, spritew + (speed*x_step), speed*y_step);

        _swix(OS_Plot, _INR(0, 2), OSPlot_Move, logo_x - (speed*x_step), logo_y + spriteh);
        _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, spritew + (speed*x_step), speed*y_step);

        _swix(OS_Plot, _INR(0, 2), OSPlot_Move, logo_x - (speed*x_step), logo_y);
        _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, speed*x_step, spriteh);

        _swix(OS_Plot, _INR(0, 2), OSPlot_Move, logo_x + spritew, logo_y);
        _swix(OS_Plot, _INR(0, 2), OSPlot_RectangleFill, speed*x_step, spriteh);
    }        
#endif        
    
    _swix(OS_SpriteOp, _INR(0,7), 256+SpritePutScaled,
                                  spritearea,
                                  spritename,
                                  logo_x,
                                  logo_y,
                                  32,
                                  0,
                                  ctrans_table);
                                  
    saver_read_bank();
}


/*---------------------------------------------------------------------------*
 * initialise_animation                                                      *
 *                                                                           *
 * Set up the animation.                                                     *
 *---------------------------------------------------------------------------*/

int initialise_animation()
{
    _kernel_oserror *e;
    int              type = 0;
    int              size = 0;
    
    /* Find size of sprite file and get memory to store it */
    e = _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 17, SpriteFile, &type, &size);
    if ((e) || (size==0) || (type==0)) return 0;
    spritearea = malloc(size+16);
    if (!spritearea) return 0;
    spritearea[0] = size + 16;
    spritearea[2] = 16;

    /* Initialise sprite area, read sprites into it and find their size */
    if (_swix(OS_SpriteOp, _INR(0,1), 256+SpriteInitialiseArea, spritearea)) return 0;
    if (_swix(OS_SpriteOp, _INR(0,2), 256+SpriteLoadFile, spritearea, SpriteFile)) return 0;
    if (_swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4), 256+SpriteReadInfo,
                                                 spritearea,
                                                 "logo0",
                                                 &spritew,
                                                 &spriteh)) return 0;
    spritew = spritew<<xeig;
    spriteh = spriteh<<yeig;
    
    /* Generate a colourtrans table */
    if (_swix(ColourTrans_GenerateTable, _INR(0,5)|_OUT(4), spritearea, "logo0", -1, -1, 0, 16, &size)) return 0;
    ctrans_table = malloc(size);
    if (!ctrans_table) return 0;
    if (_swix(ColourTrans_GenerateTable, _INR(0,5), spritearea, "logo0", -1, -1, ctrans_table, 16)) return 0;

    /* Set initial position and direction */
    memset(spritename, 0, 16);    
    sprintf(spritename, "logo0");
    _swix(OS_ReadMonotonicTime, _OUT(0), &last_frame); 
    last_move = last_frame;
    logo_x = saver_rnd(screenw-spritew);
    logo_y = saver_rnd(screenh-spriteh);
    
    saver_decide_double_buffering();

    return 1;
}
    

/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    static int current_frame = JustStarting;
    int        time;
    int        plot_it = 0;

    /* If we're just starting, then remove the high priority on pollword */
    if (current_frame == JustStarting)
    {
        saver_error_trap(event_set_mask(Wimp_Poll_PollWord), 0);    
        plot_it = 1;
    }
 
    /* Change the frame? */
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    if ((time-last_frame) >= DelayBetweenFrames)
    {
        last_frame = time;
        current_frame++;
        if (current_frame>LastLoopingFrame) current_frame = FirstLoopingFrame;
        plot_it = 1;
        sprintf(spritename, "logo%d", current_frame);
    }

    /* Move the animation? */
    if (current_frame >= FirstLoopingFrame)
    {
        if ((time-last_move) >= DelayBetweenMoves)
        {
            last_move = time;
            logo_x += x_step;
            logo_y += y_step;

            if ( (logo_x > (screenw - spritew))
              || (logo_x < 0) )
            {
                x_step = -x_step;
                logo_x += x_step;
            }
            
            if ( (logo_y > (screenh - spriteh))
              || (logo_y < 0) )
            {
                y_step = -y_step;
                logo_y += y_step;
            }
            
            plot_it = 1;
        }
    }

    if (plot_it) plot_sprite();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_hide_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_show_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int                   more;
    
    wimp_redraw_window(&block, &more);
    while (more)
    {
        wimp_get_rectangle(&block, &more);
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *---------------------------------------------------------------------------*/

static void main_initialise(void)
{
    int main_window;
    int task_handle;

    /* Initialise toolbox */
    saver_error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>",
                                  &messages_desc, &idb, 0, &task_handle, 0), 1);
    saver_error_trap(event_initialise(&idb), 1);
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord +
                              Wimp_Poll_PollWordHighPriority), 1);    

    /* Register event handlers */
    saver_error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 1);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 1);

    /* Open covering window */
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);
    saver_error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    saver_open_covering_window(main_window);
    
    /* More initialisation */
    saver_set_rnd_seed();
    read_settings();
    if (!initialise_animation()) saver_handle_fatal_error();
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = 0;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();

    main_initialise();
    
    while (TRUE)
    {
        saver_error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }
    
    return 0;
}
