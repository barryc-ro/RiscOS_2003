/*---------------------------------------------------------------------------*/
/* File:    c.slider                                                         */
/* Purpose: Sliding block screen saver.                                      */
/* Author:  Richard Leggett                                                  */
/* History: 17-Nov-97: RML: Created.                                         */
/*          19-Mar-98: RML: Updated.                                         */
/*          20-May-98: RML: Rounds block size so that exact number of blocks */
/*                          fit horizontally and vertically.                 */
/*          05-Jun-98: RML: Code tidied up a little.                         */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "wimplib.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"
#include "saver.h"

#define SettingsFile         "<Choices$Write>.ScrSavers.Slider"
#define LineThickness        4
#define DirectionLeft        1
#define DirectionRight       2
#define DirectionDown        3
#define DirectionUp          4
#define SpriteInitArea       9
#define SpriteGetSprite      16
#define SpritePutSprite      34
#define SpriteSwitchToSprite 60
#define MinimumBlockSize     32
#define DefaultBlocksize     256
#define DefaultSlidestep     2
#define Delay                0

static MessagesFD messages_desc;
static IdBlock    idb;
static int       *spritearea = 0;
static int        screenw;
static int        screenh;
static int        blk[7];
static int        newx;
static int        newy;
static int        blankx;
static int        blanky;
static int        xblocks;
static int        yblocks;
static int        blocksize = DefaultBlocksize;
static int        slidestep = DefaultSlidestep;


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

static void program_exit(void)
{
    saver_exit();
    exit(0);
}


/*---------------------------------------------------------------------------*
 * read_settings                                                             *
 *                                                                           *
 * Read the current settings file.                                           *
 *---------------------------------------------------------------------------*/

static void read_settings(void)
{
    FILE *fp;
    char  string[256];
    
    fp=fopen(SettingsFile, "r");
    if (fp)
    {
        fgets(string, 256, fp);
        sscanf(string, "BlockSize %d", &blocksize);
        fgets(string, 256, fp);
        sscanf(string, "SlideStep %d", &slidestep);
        fclose(fp);
    }
    
    if (blocksize>2048) blocksize = 2048;
    if (slidestep>blocksize) slidestep = blocksize;
    if (slidestep<1) slidestep = 1;
    if (blocksize<16) blocksize = 16;
}        


/*---------------------------------------------------------------------------*
 * remainder                                                                 *
 *                                                                           *
 * Return the integer remainder of a division                                *
 *---------------------------------------------------------------------------*/

static int remainder(int number, int divisor)
{
    int a = number / divisor;
    int b = a * divisor;
    
    return number - b;
}


/*---------------------------------------------------------------------------*
 * check_blocksize                                                           *
 *                                                                           *
 * Check blocksize is within various limits.                                 *
 *---------------------------------------------------------------------------*/

static void check_blocksize(void)
{
    int n;
    
    /* Ensure blocksize is at least half the height */
     if (blocksize > (screenh/2)) blocksize = screenh / 2;

    /* Make sure blocksize is a multiple of 2 */
    if (blocksize & 1) blocksize-=1;
    
    /* If blocksize is a multiple of screen width AND screen height, then return */
    if ( (!remainder(screenw, blocksize)) && (!remainder(screenh, blocksize)) ) return;

    /* Otherwise, try and find the nearest multiple of screen width AND screen height */
    for  (n=2; n<blocksize; n+=2)
    {
        /* Blocksize must be no more than half screen height in size */
        if ( (blocksize + n) < (screenh / 2) )
        {
            if ( (!remainder(screenw, blocksize + n)) && (!remainder(screenh, blocksize + n)) )
            {
                blocksize += n;
                return;
            }
        }
        
        /* Blocksize must be at least a minimum size */
        if ( (blocksize - n) > MinimumBlockSize)
        {
            if ( (!remainder(screenw, blocksize - n)) && (!remainder(screenh, blocksize - n)) )
            {
                blocksize -= n;
                return;
            }
        }
    }
}


/*---------------------------------------------------------------------------*
 * init_sprite_area                                                          *
 *                                                                           *
 * Initialise the sprite area used to store the block.                       *
 *---------------------------------------------------------------------------*/

static int init_sprite_area(void)
{
    int size;
    int bpp;

    check_blocksize();

    /* Calculate how big the sprite area needs to be for this screenmode */
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 9, &bpp);
    bpp = 1<<bpp;
    size = (blocksize*bpp) / 8;
    if ( (blocksize*bpp*8) > (size*8*8) ) size++;
    size = (size+3)&~3;
    size = (size*blocksize) + 44 + 16;

    /* Get memory */
    spritearea = malloc(size);
    if (!spritearea) return 0;
    spritearea[0] = size;
    spritearea[2] = 16;

    /* Initialise sprite area */
    if (_swix(OS_SpriteOp, _INR(0,1), 256+SpriteInitArea, spritearea)) return 0;

    return 1;
}


/*---------------------------------------------------------------------------*
 * draw_grid                                                                 *
 *                                                                           *
 * Draw the grid over the desktop.                                           *
 *---------------------------------------------------------------------------*/

static void draw_grid(int w, int h, int s)
{
    int x;
    int y;
   
    for (x=0; x<w; x+=s)
    {
        _swix(OS_Plot, _INR(0,2), OSPlot_Move, x, 0);
        _swix(OS_Plot, _INR(0,2), OSPlot_RectangleFill, LineThickness, h);
    }

    for (y=0; y<h; y+=s)
    {
        _swix(OS_Plot, _INR(0,2), OSPlot_Move, 0, y);
        _swix(OS_Plot, _INR(0,2), OSPlot_RectangleFill, w, LineThickness);
    }
}


/*---------------------------------------------------------------------------*
 * move_block                                                                *
 *                                                                           *
 * Move the sliding block another notch.                                     *
 *---------------------------------------------------------------------------*/

static void move_block(int bx, int by, int nx, int ny)
{
    blk[0] += slidestep;                             
    _swix(OS_SpriteOp, _INR(0,5), 256+SpritePutSprite,
                                  spritearea,
                                  "grab",
                                  nx + (blk[1]*blk[0]),
                                  ny + (blk[2]*blk[0]),
                                  0);
    _swix(OS_Plot, _INR(0,2), OSPlot_Move,
                              nx + blk[3] + (blk[1]*blk[0]),
                              ny + blk[4] + (blk[2]*blk[0]));
    _swix(OS_Plot, _INR(0,2), OSPlot_RectangleFill, blk[5], blk[6]);
}


/*---------------------------------------------------------------------------*
 * select_new_direction                                                      *
 *                                                                           *
 * Select a new direction to slide in and grab the sliding square as a       *
 * sprite.                                                                   *
 *---------------------------------------------------------------------------*/

static void select_new_direction()
{
    static int  direction = 0;
    static int  opposite[] = {0, 2, 1, 4, 3};
    char       *savearea;
    int         last_direction;
    int         prev1;
    int         prev2;
    int         prev3;
    int         fill_width;

    last_direction = direction;
    blankx = newx;
    blanky = newy;

    /* Decide on a new direction */
    while ((newx==blankx) && (newy==blanky))
    {
        direction = saver_rnd(4);
        if (direction==opposite[last_direction]) direction = saver_rnd(4);
        
        switch(direction)
        {   
            case DirectionLeft:  newx = blankx + 1; break;
            case DirectionRight: newx = blankx - 1; break;
            case DirectionDown:  newy = blanky + 1; break;
            case DirectionUp:    newy = blanky - 1; break;
        }
        
        if (newx>xblocks) newx = xblocks;
        if (newy>yblocks) newy = yblocks;
        if (newx<0)       newx = 0;
        if (newy<0)       newy = 0;
    }
    
    /* Set up the sliding parameters */
    blk[0] = 0;
    switch(direction)
    {
        case DirectionLeft:
            blk[1] = -1;
            blk[2] = 0;
            blk[3] = blocksize;
            blk[4] = 0;
            blk[5] = slidestep;
            blk[6] = blocksize;
            break;

        case DirectionRight:
            blk[1] = 1;
            blk[2] = 0;
            blk[3] = -slidestep;
            blk[4] = 0;
            blk[5] = slidestep;
            blk[6] = blocksize;
            break;

        case DirectionDown:
            blk[1] = 0;
            blk[2] = -1;
            blk[3] = 0;
            blk[4] = blocksize;
            blk[5] = blocksize;
            blk[6] = slidestep;
            break;

        case DirectionUp:
            blk[1] = 0;
            blk[2] = 1;
            blk[3] = 0;
            blk[4] = -slidestep;
            blk[5] = blocksize;
            blk[6] = slidestep;
            break;
    }
    
    /* Grab the block to be slid as a sprite */
    _swix(OS_SpriteOp, _INR(0,7), 256+SpriteGetSprite,
                                 spritearea,
                                 "grab",
                                 0,
                                 newx*blocksize,
                                 newy*blocksize,
                                 ((newx+1)*blocksize)-1,
                                 ((newy+1)*blocksize)-1);           

    /* Now, if the block is an end block, there may be bits off screen which
       need filling in black. */
    if ((newx!=xblocks) && (newy!=yblocks)) return;

    savearea = malloc(800);
    if (!savearea) return;
    memset(savearea, 0, 4);
   
    _swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3),
                       256+SpriteSwitchToSprite,
                       spritearea, "grab", savearea,
                       &prev1, &prev2, &prev3);

    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);

    if (newx==xblocks)
    {
        fill_width = ((xblocks+1) * blocksize) - screenw;
        _swix(OS_Plot, _INR(0,2), OSPlot_Move, blocksize-fill_width, 0);
        _swix(OS_Plot, _INR(0,2), OSPlot_RectangleFill, fill_width, blocksize);
    }
    
    if (newy==yblocks)
    {
        fill_width = ((yblocks+1) * blocksize) - screenh;
        _swix(OS_Plot, _INR(0,2), OSPlot_Move, 0, blocksize-fill_width);
        _swix(OS_Plot, _INR(0,2), OSPlot_RectangleFill, blocksize, fill_width);
    }
                           
    _swix(OS_SpriteOp, _INR(0,3),
                       256+SpriteSwitchToSprite,
                       prev1, prev2, prev3);
 
    free(savearea);
}


/*---------------------------------------------------------------------------*
 * initialise_slider                                                         *
 *                                                                           *
 * Set up a few variables and draw a grid.                                   *
 *---------------------------------------------------------------------------*/

static void initialise_slider(void)
{
    xblocks = (screenw / blocksize) - 1;
    yblocks = (screenh / blocksize) - 1;
    newx = saver_rnd(xblocks);
    newy = 0;    

    draw_grid(screenw, screenh, blocksize);
    _swix(OS_Plot, _INR(0,2), OSPlot_Move, newx*blocksize, newy*blocksize);
    _swix(OS_Plot, _INR(0,2), OSPlot_RectangleFill, blocksize, blocksize);
    blk[0] = blocksize;

    /* We no longer want high priority pollword scans */
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord), 0);    
}    


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our sliding on null events.                *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    static int slider_initialised = 0;
    static int last_time = 0;
    int        current_time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &current_time);
    if (current_time < (last_time + Delay)) return 1;
    last_time = current_time;

    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);

    if (!slider_initialised)
    {
        initialise_slider();
        slider_initialised = 1;
    }
    
    if (blk[0]==blocksize)
    {
        select_new_direction();
    }
    else
    {
        move_block(blankx*blocksize, blanky*blocksize, newx*blocksize, newy*blocksize);
    }
 
    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_hide_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_show_pointer();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - ignore them in fact!                               *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int                   more;
    
    wimp_update_window(&block, &more);
    while (more)
    {
        wimp_get_rectangle(&block, &more);
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}

/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *---------------------------------------------------------------------------*/

static void main_initialise(void)
{
    int task_handle;
    int main_window;
    int xeig;
    int yeig;

    /* Initialise toolbox */
    saver_error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0), 1);
    saver_error_trap(event_initialise(&idb), 0);
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord +
                              Wimp_Poll_PollWordHighPriority), 0);    

    /* Register event handlers */
    saver_error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Open the covering window */
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);
    saver_error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    saver_open_covering_window(main_window);

    /* More initialisation */
    read_settings();
    saver_set_rnd_seed();
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop.                                                        *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = 0;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();
    main_initialise();

    if (!init_sprite_area())
    {
        saver_handle_fatal_error();
    }

    while (TRUE)
    {
        saver_error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }

    return 0;
}
