/*---------------------------------------------------------------------------*/
/* File:    c.slider                                                         */
/* Purpose: Sliding block screen saver.                                      */
/* Author:  Richard Leggett                                                  */
/* History: 17-Nov-97: RML: Created.                                         */
/*          19-Mar-98: RML: Updated.                                         */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "wimplib.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

#define SettingsFile         "<Choices$Write>.ScrSavers.Slider"
#define LineThickness        4
#define DirectionLeft        1
#define DirectionRight       2
#define DirectionDown        3
#define DirectionUp          4
#define SpriteInitArea       9
#define SpriteGetSprite      16
#define SpritePutSprite      34
#define SpriteSwitchToSprite 60

static MessagesFD messages_desc;
static IdBlock    idb;
static int       *spritearea = 0;
static int        screenw;
static int        screenh;
static int        bpp;
static int        blk[7];
static int        newx;
static int        newy;
static int        blankx;
static int        blanky;
static int        xblocks;
static int        yblocks;
static int        direction;
static int        slider_initialised = 0;
static int        blocksize = 256;
static int        slidestep = 2;


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    /* Turn on pointer */
    _swix(OS_Byte, _INR(0,1), 106, 1);

    /* Unset ScrSaver$Running */
    _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);
    
    /* Exit */
    exit(0);
}


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, "Screen Blanker", 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int rnd(int n)
{
    return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/
void set_random_seed(void)
{
    int time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    srand(time);
}


/*---------------------------------------------------------------------------*
 * read_settings                                                             *
 *                                                                           *
 * Read the current settings file.                                           *
 *---------------------------------------------------------------------------*/

void read_settings(void)
{
    char  string[256];
    FILE *fp;
    
    fp=fopen(SettingsFile, "r");
    if (fp)
    {
        fgets(string, 256, fp);
        sscanf(string, "BlockSize %d", &blocksize);
        fgets(string, 256, fp);
        sscanf(string, "SlideStep %d", &slidestep);
        fclose(fp);
    }
    
    if (blocksize>2048) blocksize = 2048;
    if (slidestep>blocksize) slidestep = blocksize;
    if (slidestep<1) slidestep = 1;
    if (blocksize<16) blocksize = 16;
}        


/*---------------------------------------------------------------------------*
 * init_sprite_area                                                          *
 *                                                                           *
 * Initialise the sprite area used to store the block.                       *
 *---------------------------------------------------------------------------*/

int init_sprite_area(void)
{
    int size;
    
    /* Calculate how big the sprite area needs to be for this screenmode */
    size = (blocksize*bpp) / 8;
    if ( (blocksize*bpp*8) > (size*8*8) ) size++;
    size = (size+3)&~3;
    size = (size*blocksize) + 44 + 16;

    /* Get memory */
    spritearea = malloc(size);
    if (!spritearea) return 0;
    spritearea[0] = size;
    spritearea[2] = 16;

    /* Initialise sprite area */
    _swix(OS_SpriteOp, _INR(0,1), 256+SpriteInitArea, spritearea);

    return 1;
}


/*---------------------------------------------------------------------------*
 * draw_grid                                                                 *
 *                                                                           *
 * Draw the grid over the desktop.                                           *
 *---------------------------------------------------------------------------*/

void draw_grid(int w, int h, int s)
{
    int x;
    int y;
   
    for (x=0; x<w; x+=s)
    {
        _swix(OS_Plot, _INR(0,2), 69, x, 0);
        _swix(OS_Plot, _INR(0,2), 101, x+LineThickness, h);
    }

    for (y=0; y<h; y+=s)
    {
        _swix(OS_Plot, _INR(0,2), 69, 0, y);
        _swix(OS_Plot, _INR(0,2), 101, w, y+LineThickness);
    }
}


/*---------------------------------------------------------------------------*
 * move_block                                                                *
 *                                                                           *
 * Move the sliding block another notch.                                     *
 *---------------------------------------------------------------------------*/

void move_block(int bx, int by, int nx, int ny)
{
    blk[0] += slidestep;                             
    _swix(OS_SpriteOp, _INR(0,5), 256+SpritePutSprite,
                                 spritearea,
                                 "grab",
                                 nx + (blk[1]*blk[0]),
                                 ny + (blk[2]*blk[0]),
                                 0);
    _swix(OS_Plot, _INR(0,2), 69,
                             nx + blk[3] + (blk[1]*blk[0]),
                             ny + blk[4] + (blk[2]*blk[0]));
    _swix(OS_Plot, _INR(0,2), 97, blk[5], blk[6]);
}


/*---------------------------------------------------------------------------*
 * select_new_direction                                                      *
 *                                                                           *
 * Select a new direction to slide in and grab the sliding square as a       *
 * sprite.                                                                   *
 *---------------------------------------------------------------------------*/

void select_new_direction()
{
    char* savearea;
    int   opposite[] = {0, 2, 1, 4, 3};
    int   last_direction = direction;
    int   prev1;
    int   prev2;
    int   prev3;
    int   fill_width;

    blankx = newx;
    blanky = newy;

    /* Decide on a new direction */
    while ((newx==blankx) && (newy==blanky))
    {
        direction = rnd(4);
        if (direction==opposite[last_direction]) direction = rnd(4);
        
        switch(direction)
        {   
            case DirectionLeft:  newx = blankx + 1; break;
            case DirectionRight: newx = blankx - 1; break;
            case DirectionDown:  newy = blanky + 1; break;
            case DirectionUp:    newy = blanky - 1; break;
        }
        
        if (newx>xblocks) newx = xblocks;
        if (newy>yblocks) newy = yblocks;
        if (newx<0)       newx = 0;
        if (newy<0)       newy = 0;
    }
    
    /* Set up the sliding parameters */
    blk[0] = 0;
    switch(direction)
    {
        case DirectionLeft:
            blk[1] = -1;
            blk[2] = 0;
            blk[3] = blocksize;
            blk[4] = 0;
            blk[5] = slidestep;
            blk[6] = blocksize;
            break;

        case DirectionRight:
            blk[1] = 1;
            blk[2] = 0;
            blk[3] = -slidestep;
            blk[4] = 0;
            blk[5] = slidestep;
            blk[6] = blocksize;
            break;

        case DirectionDown:
            blk[1] = 0;
            blk[2] = -1;
            blk[3] = 0;
            blk[4] = blocksize;
            blk[5] = blocksize;
            blk[6] = slidestep;
            break;

        case DirectionUp:
            blk[1] = 0;
            blk[2] = 1;
            blk[3] = 0;
            blk[4] = -slidestep;
            blk[5] = blocksize;
            blk[6] = slidestep;
            break;
    }
    
    /* Grab the block to be slid as a sprite */
    _swix(OS_SpriteOp, _INR(0,7), 256+SpriteGetSprite,
                                 spritearea,
                                 "grab",
                                 0,
                                 newx*blocksize,
                                 newy*blocksize,
                                 ((newx+1)*blocksize)-1,
                                 ((newy+1)*blocksize)-1);           

    /* Now, if the block is an end block, there may be bits off screen which
       need filling in black. */
    if ((newx!=xblocks) && (newy!=yblocks)) return;

    savearea = malloc(800);
    if (!savearea) return;
    memset(savearea, 0, 4);
   
    _swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3),
                       256+SpriteSwitchToSprite,
                       spritearea, "grab", savearea,
                       &prev1, &prev2, &prev3);

    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);

    if (newx==xblocks)
    {
        fill_width = ((xblocks+1) * blocksize) - screenw;
        _swix(OS_Plot, _INR(0,2), 69, blocksize-fill_width, 0);
        _swix(OS_Plot, _INR(0,2), 97, fill_width, blocksize);
    }
    
    if (newy==yblocks)
    {
        fill_width = ((yblocks+1) * blocksize) - screenh;
        _swix(OS_Plot, _INR(0,2), 69, 0, blocksize-fill_width);
        _swix(OS_Plot, _INR(0,2), 97, blocksize, fill_width);
    }
                           
    _swix(OS_SpriteOp, _INR(0,3),
                       256+SpriteSwitchToSprite,
                       prev1, prev2, prev3);
 
    free(savearea);
}


/*---------------------------------------------------------------------------*
 * initialise_slider                                                         *
 *                                                                           *
 * Set up a few variables and draw a grid.                                   *
 *---------------------------------------------------------------------------*/

void initialise_slider(void)
{
    xblocks = (screenw / blocksize);
    yblocks = (screenh / blocksize);
    newx = rnd(xblocks);
    newy = 0;    

    draw_grid(screenw, screenh, blocksize);
    _swix(OS_Plot, _INR(0,2), 69, newx*blocksize, newy*blocksize);
    _swix(OS_Plot, _INR(0,2), 97, blocksize, blocksize);
    blk[0] = blocksize;

    /* We no longer want high priority pollword scans */
    error_trap(event_set_mask(Wimp_Poll_PollWord), 0);    

    slider_initialised = 1;
}    


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our sliding on null events.                *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);
    if (!slider_initialised) initialise_slider();
    
    if (blk[0]==blocksize) select_new_direction();
    else move_block(blankx*blocksize, blanky*blocksize,
                    newx*blocksize, newy*blocksize);
 
    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    _swix(OS_Byte, _INR(0,1), 106, 0);
    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    _swix(OS_Byte, _INR(0,1), 106, 1);
    return 1;
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - ignore them in fact!                               *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int                   more;
    
    wimp_update_window(&block, &more);
    while (more)
        wimp_get_rectangle(&block, &more);
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
    
    return 1;
}

/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    WimpOpenWindowBlock win;
    BBox                extent;
    int                 task_handle;
    int                 xeig;
    int                 yeig;
    int                 xpixels;
    int                 ypixels;
    int                 wimp_handle;
    int                 main_window;

    read_settings();
    set_random_seed();

    /* Initialise and register event handlers */
    error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0), 1);
    error_trap(event_initialise(&idb), 0);
    error_trap(event_set_mask(Wimp_Poll_PollWord +
                              Wimp_Poll_PollWordHighPriority), 0);    

    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Find screen size */
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 0);
    error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 9, &bpp), 0);

    bpp = 1<<bpp;
    screenw = xpixels<<xeig;
    screenh = ypixels<<yeig;

    /* Set the extent of the 'covering' window. */
    extent.xmin = 0;
    extent.xmax = screenw;
    extent.ymin = 0;
    extent.ymax = screenh;
    error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    error_trap(window_set_extent(0, main_window, &extent), 0);
    error_trap(window_get_wimp_handle(0, main_window, &wimp_handle), 0);

    /* Open the covering window */
    win.window_handle = wimp_handle;
    win.visible_area.xmin = 0;
    win.visible_area.xmax = screenw;
    win.visible_area.ymin = 0;
    win.visible_area.ymax = screenh;
    win.xscroll = 0;
    win.yscroll = 0;
    win.behind = -1;
    error_trap(wimp_open_window(&win), 0);
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop.                                                        *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = 0;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();
    if (!main_initialise()) program_exit();
    if (!init_sprite_area()) program_exit();

    while (TRUE)
    {
        error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }

    return 0;
}
