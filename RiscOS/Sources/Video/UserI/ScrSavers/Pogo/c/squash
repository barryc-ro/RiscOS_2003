
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
//#include "os.h"

#include "main.h"

#define XSquash_Compress    0x62700
#define XSquash_Decompress  0x62701

static int work_size, area_size, out_size;
static int *out, *out_ptr, *work, *work_ptr;

static int open_file(char *filename, int flag);
static int close_file(int file_handle);

void squash_compress_to_file(char *fname)
{
  _kernel_swi_regs r, p;
  _kernel_oserror *err;
  int fhandle, bytes_compressed, seq_ptr;
  char size_buff[256];

  _swix(OS_SpriteOp, _INR(0,1)|_OUT(2), 256 + 8, sprites, &area_size);

  _swix(Squash_Compress, _INR(0,1)|_OUT(0), 8, -1, &work_size);
  _swix(Squash_Compress, _INR(0,1)|_OUT(1), 8, -1, &out_size);

  work = malloc(work_size);

  out = malloc(out_size + 1000);  /* Assume output is as big as the input */

  if (out)
  {
    seq_ptr = 0;

    out_ptr = out;

    fhandle = open_file(fname, 1);

    memset(out, 0, 50);

    out[0] = area_size;

    _swix(OS_GBPB, _INR(0,4), 1, fhandle, out, 20, seq_ptr);

    seq_ptr += 20;

    if (fhandle)
    {
      r.r[0] = 0;
      r.r[1] = (int) work;
      r.r[2] = (int) sprites;
      r.r[3] = (int) area_size;
      do
      {
        r.r[4] = (int) out;
        r.r[5] = out_size;
        err = _kernel_swi(XSquash_Compress, &r, &r);

        if (!err)
        {
          bytes_compressed = r.r[4] - (int) out;

          p.r[0] = 1;
          p.r[1] = fhandle;
          p.r[2] = (int) out;
          p.r[3] = bytes_compressed;
          p.r[4] = seq_ptr;
          err = _kernel_swi(OS_GBPB, &p, &p);

          if (err)
            printf("Error = %s\n", err->errmess);

          seq_ptr += bytes_compressed;

          r.r[0] = 1;
        }
      }
      while (r.r[3]);

      close_file(fhandle);

      free(out_ptr);
      free(work);
    }
    else
      printf("Output file couldn't be found");
  }
  else
    printf("Workspace couldn't be allocated");
}

void squash_decompress_file(char *fname)
{
  _kernel_swi_regs r, p;
  _kernel_oserror *err;
  int fhandle, input_size;
  int size_buff[256];
  char *input, *input_ptr;

  fhandle = open_file(fname, 0);

  _swix(OS_GBPB, _INR(0,4), 3, fhandle, size_buff, 255, 0);

  sprites = malloc(size_buff[0]);

  _swix(OS_File, _INR(0,3)|_OUT(4), 17, fname, 0, 0, &input_size);
  input_size += 1000;

  input = malloc(input_size);

  if (input)
  {
    input_ptr = input;

    _swix(Squash_Compress, _INR(0,1)|_OUT(0), 8, -1, &work_size);
    work_size += 1000;

    work = malloc(work_size);

    if (work)
    {
      _swix(OS_GBPB, _INR(0,4), 3, fhandle, input, input_size, 0);

      input += 20;

      r.r[0] = 0;
      r.r[1] = (int) work;
      r.r[2] = (int) input;
      r.r[3] = input_size - 20;
      r.r[4] = (int) sprites;
      r.r[5] = size_buff[0];
      err = _kernel_swi(0x062701, &r, &r);

      //if (err)
        //printf("Error (3) = %s\n", err->errmess);

      close_file(fhandle);

      free(work);
    }
    else
      printf("Work area buffer not allocated");

    free(input_ptr);
  }
  else
    printf("Input buffer not allocated");
}

static int open_file(char *filename, int flag)
{
  int        file_handle =-1;
  _kernel_swi_regs r;
  _kernel_oserror *err;

  if (flag)
    _swix(OS_Find, _INR(0,2)|_OUT(0), 0x87, filename, 0, &file_handle);
  else
    _swix(OS_Find, _INR(0,2)|_OUT(0), 0xc7, filename, 0, &file_handle);

  return (file_handle);
}

static int close_file(int file_handle)
{
  _kernel_swi_regs r;
  _kernel_oserror *err;

  _swix(OS_Find, _INR(0,1), 0, file_handle);

  return(1);
}
