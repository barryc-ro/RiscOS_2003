
//#define DEVELOP 1

/*---------------------------------------------------------------------------*/
/* File:    c.main                                                           */
/* Purpose: Pogo stick screen saver.                                         */
/* Author:  Mark Moir                                                        */
/* History: 14-Nov-97: RML: Shell created.                                   */
/*          20-Feb-98: MM : Pogo stick version.                              */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "wimplib.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

#include "main.h"
#include "squash.h"
#include "saver.h"

static MessagesFD messages_desc;
static IdBlock    idb;
static int        task_handle;
static int        window_toolbox_id;
static int        window_wimp_handle;
static int        screenw, screenh;
static int        coords[60] = {0,10005, 0,10019, 1,33, 1,48, 2,62, 2,75, 2,85, 3,93, 3,99, 4,103, 4,106, 5,107,
                                5,106, 4,103, 4,99, 3,93, 3,85, 2,75, 2,62, 2,48, 1,33, 0,10019/*, 0,10005*/};
static int        coords_max = 42;
static int        x_pos, y_pos, c_pos, x_calc;
static int        temp_x, temp_y;
static int        delay_start, delay_length;
static int        pogo_non_squash_height;
static int        animation;
static int        saver_initialised = 0;

int               *sprites = 0;

static int check_time(void);
static void plot_sprite(int x, int y, char *name);
static void pogo_stick_animation(int type);
static void set_up_starts(void);

/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
  if (sprites)
    free(sprites);

  _swix(OS_Byte, _INR(0,1), 106, 1);
  _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);

  exit(0);
}


/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void error_trap(_kernel_oserror *err, int err_type)
{
  /* Report the appropriate error, has one occured */
  if (err != NULL)
  {
    wimp_report_error(err, 0, "Screen Blanker", 0, 0, 0);

    /* Now, if it was a fatal error (type != 0), exit at once */
    if (err_type != 0) exit(0);
  }
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int rnd(int n)
{
  return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void set_random_seed(void)
{
  int time;
  
  _swix(OS_ReadMonotonicTime, _OUT(0), &time);
  srand(time);
}


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  if (!saver_initialised)
  {
      error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
      saver_initialised = 1;
  }

  if (check_time())
  {
    if (animation == 1)
      pogo_stick_animation(1);

    if (animation == 2)
      pogo_stick_animation(2);
  }

  return 1;
}


/*---------------------------------------------------------------------------*
 * pogo_stick_animation                                                      *
 *                                                                           *
 * Displays the frames of animation at the current position                  *
 *---------------------------------------------------------------------------*/

static void pogo_stick_animation(int type)
{
  int squash_height;

  if (animation == 1)
  {
    /* Calculate the new coordinates from current position */
    x_calc += (coords[c_pos] * 2);
    temp_x = x_calc;
    temp_y = y_pos + (coords[c_pos + 1] * 3);

    /* If the y coordinate is over 9999 then we want to use the squashed bottom of the
       pogo stick rather than the extended one.  Simple way of flagging the sprite to
       use */

    if (temp_y > 9999)
    {
      temp_y -= 30000;

      plot_sprite(temp_x, temp_y, "rights");
    }
    else
    {
      plot_sprite(temp_x, temp_y, "right");
    }

    c_pos += 2;

    if (c_pos > coords_max)
    {
      x_pos = temp_x;
      x_calc = x_pos;

      if (x_pos > screenw)
      {
        animation = 2;
        set_up_starts();
        if (y_pos > screenh)
          y_pos = rnd(screenh) / 2;
      }

      c_pos = 0;
    }
  }
  else
  {
    /* Calculate the new coordinates from current position */
    x_calc -= (coords[c_pos] * 2);
    temp_x = x_calc;
    temp_y = y_pos + (coords[c_pos + 1] * 3);

    /* If the y coordinate is over 9999 then we want to use the squashed bottom of the
       pogo stick rather than the extended one.  Simple way of flagging the sprite to
       use */

    if (temp_y > 9999)
    {
      temp_y -= 30000;

      plot_sprite(temp_x, temp_y, "lefts");

      //_swix(OS_ReadMonotonicTime, _OUT(0), &delay_start); /* Double delay for squashed bottom of pogo stick */
    }
    else
    {
      plot_sprite(temp_x, temp_y, "left");
    }

    c_pos -= 2;

    if (c_pos < 0)
    {
      x_pos = temp_x;
      x_calc = x_pos;
      if (x_pos < -200)
      {
        animation = 1;
        set_up_starts();
        if (y_pos > screenh)
          y_pos = rnd(screenh) / 2;
      }

      c_pos = coords_max;
    }
  }
}


/*---------------------------------------------------------------------------*
 * plot_sprite                                                               *
 *                                                                           *
 * Plots sprite in any mode (correct colours etc.)                           *
 *---------------------------------------------------------------------------*/

static void plot_sprite(int x, int y, char *name)
{
  char        pal[256];
  int         scale[16];
  int         log, sprtype = 0x100;
  int         mode, mask;

  _swix(OS_SpriteOp, _INR(0,2)|_OUT(6), 256+40, sprites, name, &mode);
  _swix(OS_SpriteOp, _INR(0,2)|_OUT(5), 256+40, sprites, name, &mask);

  _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, 3, &log);

saver_write_bank();

  if (log > 15)
  {
    _swix(Wimp_ReadPixTrans, _INR(0,7), sprtype, sprites, name, 0, 0, 0, scale, pal);
    _swix(ColourTrans_SelectTable, _INR(0,5), mode, -1, -1, -1, pal);
  }
  else
    _swix(Wimp_ReadPixTrans, _INR(0,7), sprtype, sprites, name, 0, 0, 0, scale, pal);

  if (mask)
    _swix(OS_SpriteOp, _INR(0,7), 256 + 52, sprites, name, x, y, 8, scale, pal);
  else
    _swix(OS_SpriteOp, _INR(0,7), 256 + 52, sprites, name, x, y, 0, scale, pal);

saver_read_bank();
}


/*---------------------------------------------------------------------------*
 * check_time                                                                *
 *                                                                           *
 * Decides whether the next frame of animation should be displayed (makes    *
 * the code independant of processor speed.
 *---------------------------------------------------------------------------*/

static int check_time(void)
{
  int timenow;

  _swix(OS_ReadMonotonicTime, _OUT(0), &timenow);

  if ((timenow - delay_start) > delay_length)
  {
    delay_start = timenow;

    return(1);
  }
  else
    return(0);
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpRedrawWindowBlock block;
  int more;
  
  wimp_update_window(&block, &more);

  while (more)
  {
    wimp_get_rectangle(&block, &more);
  }
  
  return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  _swix(OS_Byte, _INR(0,1), 106, 0);

  return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  _swix(OS_Byte, _INR(0,1), 106, 1);

  return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  program_exit();
    
  return 1;
}

/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
  program_exit();
  
  return 1;
}


/*---------------------------------------------------------------------------*
 * set_up_starts                                                             *
 *                                                                           *
 * Sets up the variables for each animation                                  *
 *---------------------------------------------------------------------------*/
 
static void set_up_starts(void)
{
  int        spr_height, spr_width;

  if (animation == 1)
  {
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(3), 256+40, sprites, "right", &spr_width);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "right", &spr_height);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "rights", &pogo_non_squash_height);

    x_pos = -(spr_width * 2);                /* Start off screen */
    c_pos = 0;
    x_calc = x_pos;
    delay_length = 5;                        /* Delay between frames (centi-seconds) */
  }

  if (animation == 2)
  {
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(3), 256+40, sprites, "left", &spr_width);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "left", &spr_height);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "lefts", &pogo_non_squash_height);

    x_pos = screenw;
    c_pos = coords_max;
    x_calc = x_pos;
    delay_length = 5;                        /* Delay between frames (centi-seconds) */
  }

  _swix(OS_ReadMonotonicTime, _OUT(0), &delay_start);
}

/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise the toolbox, work out the screensize, load and decompress the  *
 * sprites, open the window.                                                 *
 *                                                                           *
 * Globals: screenw, screenh, window_toolbox_id, window_wimp_handle,         *
 *          task_handle                                                      *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
  WimpOpenWindowBlock win;
  static int messages_wanted[] = {Wimp_MQuit, 0};
  static int tbox_wanted[] = {0};
  BBox       extent;
  int        show[2];
  int        xeig, yeig, xpixels, ypixels, len, spr_height, spr_width;

  /* Initialise and register event handlers */
  error_trap(toolbox_initialise(0, 310, messages_wanted, tbox_wanted,
                                "<BlankTask$Dir>", &messages_desc, &idb,
                                0, &task_handle, 0), 1);
  error_trap(event_initialise(&idb), 1);

  error_trap(event_set_mask(Wimp_Poll_PollWord +
                          Wimp_Poll_PollWordHighPriority), 0);

  error_trap(event_register_message_handler(Wimp_MQuit, (WimpMessageHandler *) message_quit, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 1);
  error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 1);

  error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
  error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);


  /* Find screen size */
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels), 1);
  error_trap(_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels), 1);
  screenw = xpixels << xeig;
  screenh = ypixels << yeig;

  /* Set the extent of the 'covering' window. */
  extent.xmin = 0;
  extent.xmax = screenw;
  extent.ymin = 0;
  extent.ymax = screenh;
  show[0] = 0;
  show[1] = screenh;
  error_trap(toolbox_create_object(0, "Window", &window_toolbox_id), 1);
  error_trap(window_set_extent(0, window_toolbox_id, &extent), 1);
  error_trap(window_get_wimp_handle(0, window_toolbox_id, &window_wimp_handle), 1);

  /* Open the covering window */
  win.window_handle=window_wimp_handle;
  win.visible_area.xmin = 0;
  win.visible_area.xmax = screenw;
  win.visible_area.ymin = 0;
  win.visible_area.ymax = screenh;
  win.xscroll = 0;
  win.yscroll = 0;
  win.behind= - 1;
  error_trap(wimp_open_window(&win), 1);

saver_decide_double_buffering();

#if0
  error_trap(_swix(OS_File, _INR(0,1)|_OUT(4), 13, "<BlankTask$Dir>.Sprites22", &len), 1);

  len += 4096;
  sprites = malloc(len);

  if (sprites)
  {
    sprites[0] = len;
    sprites[2] = 16;
    _swix(OS_SpriteOp, _INR(0,1), 256+9, sprites);

    error_trap(_swix(OS_SpriteOp, _INR(0,2), 256+10, sprites, "<BlankTask$Dir>.Sprites22"), 1);

    _swix(OS_SpriteOp, _INR(0,2)|_OUT(3), 256+40, sprites, "pogoright", &spr_width);
    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "pogoright", &spr_height);

    _swix(OS_SpriteOp, _INR(0,2)|_OUT(4), 256+40, sprites, "br", &pogo_non_squash_height);

    squash_compress_to_file("<BlankTask$Dir>.Data");
    program_exit();
  }
  else
    program_exit();
#endif

  squash_decompress_file("<BlankTask$Dir>.Data");

  set_random_seed();
  y_pos = rnd(screenh) / 2;
  animation = 1;                           /* Animation type:
                                                1 = pogo stick left-to-right 
                                                2 = pogo stick right-to-left */

  set_up_starts();

  return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
  WimpPollBlock wpb;
  int           event_code;
  int *poll_word_location = 0;

  if (argc > 1)
    poll_word_location = (int *) atoi(argv[1]);

  if (!poll_word_location)
    program_exit();

  if (!main_initialise())
    program_exit();

  while (1)
  {
    error_trap(event_poll(&event_code, &wpb, poll_word_location), 0);
  }

  return 0;
}
