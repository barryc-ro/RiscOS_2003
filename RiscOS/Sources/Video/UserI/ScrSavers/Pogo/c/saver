/*---------------------------------------------------------------------------*/
/* File:    c.saver                                                          */
/* Purpose: Handy routines for screensavers                                  */
/* Author:  Richard Leggett                                                  */
/* History: 05-Jun-98: RML: Created.                                         */
/*          15-Jul-98: RML: Changed memory freeing code to take account of   */
/*                          screen memory granularity.                       */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "wimplib.h"
#include "window.h"
#include "event.h"
#include "saver.h"
#include "swis.h"

static int extra_screen = 0;
static int screen_banks = 1;
static int current_bank = 1;


/*---------------------------------------------------------------------------*
 * saver_error_trap                                                          *
 *                                                                           *
 * Wrap around a function to report an error if one occurred eg.:            *
 *  error_trap(event_initialise(&idb), 0);                                   *
 *                                                                           *
 * Use only in exceptional cases with screensavers.                          *
 *                                                                           *
 * In: err - a kernel_oserror block                                          *
 *     type - 0 means non-fatal, otherwise program will exit after reporting *
 *---------------------------------------------------------------------------*/

void saver_error_trap(_kernel_oserror *err, int err_type)
{
    /* Report the appropriate error, has one occured */
    if (err != NULL)
    {
        wimp_report_error(err, 0, "Screensaver", 0, 0, 0);
  
        /* Now, if it was a fatal error (type != 0), exit at once */
        if (err_type != 0) exit(0);
    }    
}


/*---------------------------------------------------------------------------*
 * saver_handle_fatal_error                                                  *
 *                                                                           *
 * If a fatal error occurs, clear the screen (to ensure blanking) and remove *
 * null event handler.                                                       *
 *---------------------------------------------------------------------------*/

void saver_handle_fatal_error(void)
{
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 128, 0);
    _swi(OS_WriteC, _IN(0), 16);

    event_set_mask(Wimp_Poll_PollWord + Wimp_Poll_NullMask);
}    


/*---------------------------------------------------------------------------*
 * saver_exit                                                                *
 *                                                                           *
 * Exit routine to be called before death. Frees up screen memory and unsets *
 * ScrSaver$Running.                                                         *
 *---------------------------------------------------------------------------*/

void saver_exit(void)
{
    /* Turn on pointer */
    _kernel_osbyte(106, 1, 0);

    /* If screen banking was used, free up the extra screen memory */
    if (screen_banks > 1)
    {
        _kernel_osbyte(OSByte_WriteDriverBank, 1, 0);
        _kernel_osbyte(OSByte_WriteDisplayBank, 1, 0);
        _swix(OS_ChangeDynamicArea, _INR(0,1), ScreenDA, -extra_screen);
    }

    /* Unset ScrSaver$Running */
    _swix(OS_SetVarVal, _INR(0,4), "ScrSaver$Running", 0, -1, 0, 0);
}    


/*---------------------------------------------------------------------------*
 * saver_decide_double_buffering                                             *
 *                                                                           *
 * Decide if there's enough memory for double buffering the screen. If there *
 * is, then set up the two screen banks.                                     *
 *---------------------------------------------------------------------------*/

void saver_decide_double_buffering(void)
{
    int screen_memory_required;
    int memory_required;
    int free_memory;
    int old_size;
    int new_size;

    /* Find out the free memory, also the memory required to hold two screen banks */
    _swix(Wimp_SlotSize, _INR(0,1)|_OUT(2), -1, -1, &free_memory);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 7, &screen_memory_required);
    screen_memory_required = screen_memory_required * 2;

    /* Now work out the minimum memory that must be free before we'll use screen banking */
    memory_required = screen_memory_required + (MinimumFreeMemory * 1024);
    if (free_memory < memory_required) return;

    /* Find out how much memory is currently assigned to the screen */
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &old_size)) return;
    extra_screen = screen_memory_required - old_size;
    if (extra_screen < 0) extra_screen = 0;

    /* Try and increase the screen memory dynamic area */
    if (extra_screen)
    {
        if (_swix(OS_ChangeDynamicArea, _INR(0,1), ScreenDA, extra_screen)) return;
    }
    
    /* Find out what it's increased to (it may be more than we asked for because
       of granularity) */
    if (_swix(OS_DynamicArea, _INR(0,1)|_OUT(2), 2, ScreenDA, &new_size)) return;
    extra_screen = new_size - old_size;

    /* Clear second bank */
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 128, 0);
    _kernel_osbyte(OSByte_WriteDriverBank, 2, 0); 
    _swix(OS_WriteC, _IN(0), 16);
    _kernel_osbyte(OSByte_WriteDriverBank, 1, 0);

    screen_banks = 2;
}


/*---------------------------------------------------------------------------*
 * saver_write_bank                                                          *
 *                                                                           *
 * Sets up the next screen bank to write to. Call this before writing to the *
 * screen, then call saver_read bank, after the data has been written.       *
 *---------------------------------------------------------------------------*/

void saver_write_bank(void)
{
    if (screen_banks > 1)
    {
        _kernel_osbyte(OSByte_WriteDriverBank, current_bank, 0);
    }
}


/*---------------------------------------------------------------------------*
 * saver_read_bank                                                           *
 *                                                                           *
 * Sets up the next screen bank to read from.                                *
 *---------------------------------------------------------------------------*/

void saver_read_bank(void)
{
    if (screen_banks > 1)
    {
        _kernel_osbyte(OSByte_WriteDisplayBank, current_bank, 0);
        _kernel_osbyte(OSByte_WaitVSync, 0, 0);
        current_bank = current_bank^3;
    }
}


/*---------------------------------------------------------------------------*
 * saver_read_screensize                                                     *
 *                                                                           *
 * Read the screen size, plus eigenvalues.                                   *
 *                                                                           *
 * In: sw -> variable to store screen width.                                 *
 *     sh -> variable to store screen height.                                *
 *     xe -> variable to store x eigen value.                                *
 *     ye -> variable to store y eigen value.                                *
 *---------------------------------------------------------------------------*/

void saver_read_screensize(int *sw, int *sh, int *xe, int *ye)
{
    int xeig;
    int yeig;
    int xpixels;
    int ypixels;
    
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 11, &xpixels);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 12, &ypixels);

    *sw = (xpixels + 1) << xeig;
    *sh = (ypixels + 1) << yeig;
    *xe = xeig;
    *ye = yeig;
}


/*---------------------------------------------------------------------------*
 * rnd                                                                       *
 *                                                                           *
 * Generate a random number between 1 and n.                                 *
 *---------------------------------------------------------------------------*/

int saver_rnd(int n)
{
    return (int) ( ((float)rand()/(float)RAND_MAX) *n)+1;
}


/*---------------------------------------------------------------------------*
 * set_random_seed                                                           *
 *                                                                           *
 * Reset the random number seed to a value dependent on the monotonic timer. *
 *---------------------------------------------------------------------------*/

void saver_set_rnd_seed(void)
{
    int time;
    
    _swix(OS_ReadMonotonicTime, _OUT(0), &time);
    srand(time);
}


/*---------------------------------------------------------------------------*
 * saver_hide_pointer                                                        *
 *                                                                           *
 * Remove the pointer from the screen.                                       *
 *---------------------------------------------------------------------------*/

void saver_hide_pointer(void)
{
    _kernel_osbyte(106, 0, 0);
}


/*---------------------------------------------------------------------------*
 * saver_show_pointer                                                        *
 *                                                                           *
 * Re-show the pointer.                                                      *
 *---------------------------------------------------------------------------*/

void saver_show_pointer(void)
{
    _kernel_osbyte(106, 1, 0);
}


/*---------------------------------------------------------------------------*
 * saver_open_covering_window                                                *
 *                                                                           *
 * Given the toolbox ID of a window, set it's extent to cover the screen and *
 * then open the window.                                                     *
 *                                                                           *
 * In: window_id = toolbox ID of window to open.                             *
 *---------------------------------------------------------------------------*/

void saver_open_covering_window(int window_id)
{
    WimpOpenWindowBlock win;
    BBox extent;
    int  wimp_handle;
    int  screenw;
    int  screenh;
    int  xeig;
    int  yeig;
    int  show[2];
    
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);

    extent.xmin = 0;
    extent.xmax = screenw;
    extent.ymin = 0;
    extent.ymax = screenh;

    show[0] = 0;
    show[1] = screenh;

    saver_error_trap(window_set_extent(0, window_id, &extent), 0);
    saver_error_trap(window_get_wimp_handle(0, window_id, &wimp_handle), 0);

    win.window_handle = wimp_handle;
    win.visible_area.xmin = 0;
    win.visible_area.xmax = screenw;
    win.visible_area.ymin = 0;
    win.visible_area.ymax = screenh;
    win.xscroll = 0;
    win.yscroll = 0;
    win.behind = -1;
    saver_error_trap(wimp_open_window(&win), 0);
}
