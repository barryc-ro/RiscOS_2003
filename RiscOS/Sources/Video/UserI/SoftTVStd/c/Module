/******	Module.c ***********************************************************

Project:	MSI Demo
Component:	SoftTVStandard
This file:	Everything bar the cmhg veneers

Copyright 2001 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
01/10/2001	BJGA	Created from DENCDriver sources

***************************************************************************/

/************/
/* Includes */
/************/

#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "swis.h"

#include "Global/Services.h"
#include "Global/SWIs.h"

#include "ModHdr.h"

/*****************/
/* Private types */
/*****************/

typedef enum
{
  standard_none = -1,
  standard_ntsc_443,
  standard_ntsc_m,
  standard_ntsc_m_jp,
  standard_pal_60,
  standard_pal_b,
  standard_pal_b_au,
  standard_pal_b_it,
  standard_pal_b_nz,
  standard_pal_cn,
  standard_pal_d,
  standard_pal_g,
  standard_pal_h,
  standard_pal_i,
  standard_pal_m,
  standard_pal_n,
  standard_secam_b,
  standard_secam_d,
  standard_secam_g,
  standard_secam_k,
  standard_secam_k1,
  standard_secam_l,
  standard_MAX
}
tv_standard;

typedef struct
{
  unsigned int flags;
  unsigned int x_res;
  unsigned int y_res;
  unsigned int depth;
  unsigned int frame_rate;
  unsigned int terminator;
}
mode_selector;

/**********************/
/* Private prototypes */
/**********************/

static void Service_ServicePostInit (void);
static bool Service_ServiceMonitorLeadTranslation (void **mode, int *monitor_type, int *sync_type);

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

/*********************/
/* Private constants */
/*********************/

#ifndef NVRAM_Read
#define NVRAM_Read (NVRAMSWI_Base + 0)
#endif

#define IGNORE(x) ((x)=(x))

/********************/
/* Public functions */
/********************/

/******	Module_Init() ******************************************************

Purpose:	Module initialisation
In:		Standard args
Out:		Pointer to error block if initialisation failed

***************************************************************************/

extern _kernel_oserror *Module_Init(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e = NULL;
  tv_standard Module_ConfiguredTVStandard;
  signed int return_code;
  IGNORE(cmd_tail);
  IGNORE(podule_base);
  IGNORE(pw);
  
  e = _swix (NVRAM_Read, _INR(0,2)|_OUT(0), "TVStandard", &Module_ConfiguredTVStandard, 0, &return_code);
  
  if ((Module_ConfiguredTVStandard > standard_pal_60 && Module_ConfiguredTVStandard != standard_pal_m)
      || return_code == -1 || e != NULL)
  {
    _swix (OS_CLI, _IN(0), "Set TV$Type PAL");
  }
  else
  {
    _swix (OS_CLI, _IN(0), "Set TV$Type NTSC");
  }
  
  _swix (OS_CLI, _IN(0), "LoadModeFile Resources:$.Resources.Monitors.<TV$Type>TV");
  
  return NULL;
}

/******	Module_Service() ***************************************************

Purpose:	Service call handler
In:		Standard args

***************************************************************************/

extern void Module_Service(int service_number, _kernel_swi_regs *r, void *pw)
{
  bool claim = false;
  _kernel_swi_regs rout;
  IGNORE(pw);
  switch (service_number)
  {
    case Service_PostInit:
      Service_ServicePostInit ();
      break;
    case Service_MonitorLeadTranslation:
      claim = Service_ServiceMonitorLeadTranslation (
          (void **) &(rout.r[3]),
          &(rout.r[4]),
          &(rout.r[5])
          );
      if (claim)
      {
        r->r[3] = rout.r[3];
        r->r[4] = rout.r[4];
        r->r[5] = rout.r[5];
      }
      break;
  }
  if (claim) r->r[1] = 0;
}

/******	Service_ServicePostInit() ******************************************

Purpose:	Handles Service_PostInit

***************************************************************************/

static void Service_ServicePostInit (void)
{
  /* Read configured mode/wimpmode, and select it */
  /* Since the mode should be configured to Auto, it will */
  /* actually be determined from Service_MonitorLeadTranslation */
  void *wimpmode;
  _swix (OS_ReadSysInfo, _IN(0)|_OUT(0), 1, &wimpmode);
  _swix (OS_ScreenMode, _INR(0,1), 0, wimpmode);
}

/******	Service_ServiceMonitorLeadTranslation() ****************************

Purpose:	Handles Service_MonitorLeadTranslation
In:		Pointers to return default mode, MonitorType and sync type
Out:		|true| to claim the service call

***************************************************************************/

static bool Service_ServiceMonitorLeadTranslation (void **mode, int *monitor_type, int *sync_type)
{
  static mode_selector my_mode = { 1, 0, 0, 3, -1, -1 };
  if (strcmp (getenv ("TV$Type"), "NTSC") != 0)
  {
    my_mode.x_res = 768;
    my_mode.y_res = 576;
    *monitor_type = 0;
  }
  else
  {
    my_mode.x_res = 640;
    my_mode.y_res = 480;
    *monitor_type = 8;
  }
  *mode = &my_mode;
  *sync_type = 0;
  return true;
}
