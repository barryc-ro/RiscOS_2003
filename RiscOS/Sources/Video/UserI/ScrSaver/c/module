/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"

#include "module.h"

int poll_word;

#define OS_Module             0x1e
#define TaskModule_StartTask  0x4d301
#define OS_Find               0x0d
#define PDriver_Info          0x80140

/*------------------------------------------------------------------------*/

/* Check if user is already printing */
static int user_currently_printing(void)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;
  int printing = FALSE;

  regs.r[0] = 0;
  err = _kernel_swi(PDriver_Info, &regs, &regs);   /* Get PDriver Info */
  if (err)
    printing = FALSE;    /* printer does not exist - user not printing */
  else
  {
    regs.r[0] = 0xc3;
    regs.r[1] = (int) "printer:";
    regs.r[2] = 0;
    _kernel_swi(OS_Find, &regs, &regs);   /* try and open printer */
    if (regs.r[0] != 0)    /* printer: not in use - user not printing */
    {
      regs.r[1] = regs.r[0];                
      regs.r[0] = 0;
      regs.r[2] = 0;                      
     _kernel_swi(OS_Find, &regs, &regs);  /* close printer: */
      printing = FALSE;    
    }
    else
     printing = TRUE;      /* printer: is in use - user is printing */
  }
  return (printing);
}

static void blank_screen(void)
{
  _kernel_swi_regs r;
  char cmd[256];
  
  poll_word = 0;             /* Set value of Poll Word to 0 */
  
  sprintf(cmd, "Run Resources:$.Resources.ScrSaver.!Run %d", (int) &poll_word);
  r.r[0] = (int) cmd;
  r.r[1] = 0;
  _kernel_swi(TaskModule_StartTask, &r, &r);  /* Run Basic App */
}

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
  return 0;

  NOT_USED( cmd_tail );
  NOT_USED( podule_base );
  NOT_USED( pw );
}

/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
        if ( service_no == Service_ScreenBlanking )
        {
          if (user_currently_printing() == FALSE)
          {
            blank_screen();
          }
          r->r[1]=0;                /* Claim service call */
        }

        if ( service_no == Service_ScreenRestored )
        {
          poll_word = 1;         /* Set value of Poll Word to 1 */
        }
       
        NOT_USED( pw );
}
