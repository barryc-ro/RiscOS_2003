/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"

#include "module.h"

char *poll_word;

#define OS_Module             0x1e
#define TaskModule_StartTask  0x4d301

static char *claim_rma_space(void)
{
  _kernel_swi_regs r;

  r.r[0] = 6;
  r.r[1] = r.r[2] = 0;
  r.r[3] = 8;
  _kernel_swi(OS_Module, &r, &r);

  return((char *) r.r[2]);
}

/* static void free_rma_space(char *poll_word)
{
  _kernel_swi_regs r;

  r.r[0] = 7;
  r.r[1] = 0;
  r.r[2] = (int) poll_word;
  _kernel_swi(OS_Module, &r, &r);
}  */

static void blank_screen(void)
{
  _kernel_swi_regs r;
  char cmd[256];
  
  poll_word[0] = 0;             /* Set value of Poll Word to 0 */
  
  sprintf(cmd, "Run Resources:$.Resources.ScrSaver.!Run %d", (int) poll_word);
  r.r[0] = (int) cmd;
  r.r[1] = 0;
  _kernel_swi(TaskModule_StartTask, &r, &r);  /* Run Basic App */
}

/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
  NOT_USED( pw );

  poll_word = claim_rma_space();   /* Claim a Poll Word */
   
  return 0;
}

/*------------------------------------------------------------------------------
 * module_service
 *
 *      Module service call entry point.
 */
void
module_service( int service_no, _kernel_swi_regs *r, void *pw )
{
        if ( service_no == Service_ScreenBlanking )
        {
          blank_screen();
          r->r[1]=0;                /* Claim service call */
        }

        if ( service_no == Service_ScreenRestored )
        {
          poll_word[0] = 1;         /* Set value of Poll Word to 1 */
        }
       
        NOT_USED( pw );
}
