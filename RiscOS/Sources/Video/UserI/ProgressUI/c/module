/* > module.c
  *   Title:      Progress UI Module
  *   Author:     Owen Love
  *   Date:       28th April 1997
*/

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"

#include "Header.h"	// Generated by CMHG.

#include "swis.h"

/************************************************/
/*                  constants                   */
/************************************************/

#define ProgressUIUpCall 18   /* The ProgressUI Up Call Number        */
#define X_POS        250      /* The x screen coordinate of first box */ 
#define Y_POS        440      /* The y screen coordinate of first box */
#define X_NUM        650      /* The x offset of the number box       */
#define Y_NUM         20      /* The y offset of the numbers          */
#define X_DIGIT       20      /* The spacing between the digits       */

/***************************************/
/********* global variables   **********/
/***************************************/

int base_of_sprites;          /* The memory location of WimpSprites */
int value;                    /* The current percentage value       */

/***************************************************************************/

/* Plot the sprite using OS_SpriteOp 34 */
static void plot_sprite(char *name, int xpos, int ypos)
{
  _kernel_swi_regs r;

  r.r[0] = 256 + 34;
  r.r[1] = (int) base_of_sprites;
  r.r[2] = (int) name;
  r.r[3] = xpos;
  r.r[4] = ypos;
  r.r[5] = 0;
  _kernel_swi(OS_SpriteOp, &r, &r);
}

/* Calculate the memory location of the sprites */
static int set_base_of_sprites(void)
{
  _kernel_swi_regs r;

  _kernel_swi(Wimp_BaseOfSprites, &r, &r);

  return (r.r[0]);
}

/* Plot sprites when called by call back handler */
/* 'Value' contains the percentage downloaded */
_kernel_oserror* PlotSprites_handler(_kernel_swi_regs* r, void* pw)
{
  int x;
  char name[10];
  div_t result;

  base_of_sprites = set_base_of_sprites();

  /* Plot boxes */
  for (x =  0; x < 10; x=x+1)
  { 
    if (x  >= ((value / 10)))
      plot_sprite("progbox0", X_POS + (x * (X_NUM / 10)), Y_POS);
    else
      plot_sprite("progbox1", X_POS + (x * (X_NUM / 10)), Y_POS);
  }
  plot_sprite("progbox11", X_POS + (X_NUM), Y_POS);

  /* Plot number */
  result = div(value, 10);
  if (value == 100)
  {
    plot_sprite("prognum1", X_POS + (X_NUM) + (X_DIGIT * 1), Y_POS + Y_NUM);
    plot_sprite("prognum0", X_POS + (X_NUM) + (X_DIGIT * 2), Y_POS + Y_NUM);
  }
  if (value >= 10)
  {
    sprintf(name, "%s%d", "prognum", result.quot);
    plot_sprite(name, X_POS + (X_NUM) + (X_DIGIT * 2), Y_POS + Y_NUM);
  }
  if (value >= 0)
  {
    sprintf(name, "%s%d", "prognum", result.rem);
    plot_sprite(name, X_POS + (X_NUM) + (X_DIGIT * 3), Y_POS + Y_NUM);
  }

  /* Plot percentage symbol */
  plot_sprite("progper", X_POS + (X_NUM) + (X_DIGIT * 4), Y_POS + Y_NUM);

  return NULL;
}

/* Upcall handler for the module */
/* Value r->r[1] contains the percentage downloaded stored in 'Value' */
int	UpCall_handler(_kernel_swi_regs* r, void* pw)
{
  if (r->r[0] == ProgressUIUpCall)
  {
    _swix(OS_AddCallBack, _INR(0,1), PlotSprites, pw); /* Issue a call back */
    value = r->r[1];
  }
  return (1);
}

/* Module initialisation entry point */ 
_kernel_oserror *Initialise(char *cmd_tail, int podule_base, void *pw)
{
  _swix(OS_Claim, _INR(0,2), 0x1d, UpCall, pw);

  return NULL;
}

/*--Module exit entry point */
_kernel_oserror* Finalise(int fatal, int podule, void* pw)
{
  _swix(OS_Release, _INR(0,2), 0x1d, UpCall, pw);
  _swix(OS_RemoveCallBack, _INR( 0,1), PlotSprites, pw);

  return NULL;
}


