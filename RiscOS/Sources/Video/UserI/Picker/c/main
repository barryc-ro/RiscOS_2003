/*main.c - entry points for ColourPicker module*/

/*History

   11 May 1993 J R C Started

*/

/*From CLib*/
#include <kernel.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*From OSLib*/
#include "macros.h"
#include "messagetrans.h"
#include "os.h"
#include "resourcefs.h"
#include "taskmanager.h"
#include "territory.h"

/*From Support*/
#include "lookup.h"
#include "m.h"
#include "resource.h"
#include "relocate.h"
#include "riscos.h"
#include "trace.h"

/*Local*/
#include "cmyk.h"
#include "colourpicker.h"
#include "dialogue.h"
#include "files.h"
#include "hsv.h"
#include "main.h"
#include "model.h"
#include "rgb.h"

lookup_t main_messages, main_sprites, main_templates;

void *main_workspace;

static os_error *(*Initialise []) (char *, int, void *) =
   {  &rgb_initialise,
      &cmyk_initialise,
      &hsv_initialise
   };

static os_error *(*Terminate []) (bool, int, void *) =
   {  &rgb_terminate,
      &cmyk_terminate,
      &hsv_terminate
   };

static void (*Service []) (int, _kernel_swi_regs *, void *) =
   {  &rgb_service,
      &cmyk_service,
      &hsv_service
   };

#if TRACE
   static int Invocation_Depth = 0;
#endif

static char *Message_File_Name, *Sprite_File_Name, *Template_File_Name;

#ifdef NEWTABLE
static char *Table_File_Name;
#endif

#ifdef USE_ATEXIT
/*------------------------------------------------------------------------*/
static void Exit (void)
      {(void) main_terminate (SKIP, SKIP, SKIP);}
#endif
/*------------------------------------------------------------------------*/
_kernel_oserror *main_initialise (char *tail, int podule_base,
      void *workspace)

{  os_error *error = NULL;
   bool done_messages = FALSE, done_sprites = FALSE, done_templates = FALSE,
      done_model = FALSE, done [COUNT (Initialise)] = {FALSE /*, ...*/},
      done_dialogue = FALSE;
   int i;
#ifdef STANDALONE
   bool registered_messages = FALSE, registered_sprites = FALSE,
      registered_templates = FALSE;
#endif
#ifdef NEWTABLE
   bool registered_table = FALSE;
#endif

   NOT_USED (tail)
   NOT_USED (podule_base)

#if TRACE
   Invocation_Depth++;
#endif

   trace_initialise ("ColourPicker$Trace");

   tracef ("main\n");
   tracef ("main_initialise: depth %d\n" _ Invocation_Depth);

   if (getenv ("ColourPicker$Path") == NULL)
   {  Message_File_Name  = "Resources:Resources.Picker.Messages";
      Sprite_File_Name   = "Resources:Resources.Picker.Sprites";
      Template_File_Name = "Resources:Resources.Picker.Templates";
   }
   else
   {  Message_File_Name  = "ColourPicker:Messages";
      Sprite_File_Name   = "ColourPicker:Sprites";
      Template_File_Name = "ColourPicker:Templates";
   }
   #ifdef NEWTABLE
      Table_File_Name = "Resources:Resources.Colours.Tables.4desktop";
   #endif

   if ((error = riscos_territory (territory_CURRENT)) != NULL)
      goto finish;

#ifdef STANDALONE
   if ((error = xresourcefs_register_files (files_messages ())) != NULL)
      goto finish;
   registered_messages = TRUE;

   if ((error = xresourcefs_register_files (files_sprites ())) != NULL)
      goto finish;
   registered_sprites = TRUE;

   if ((error = xresourcefs_register_files (files_templates ())) != NULL)
      goto finish;
   registered_templates = TRUE;
#endif

#ifdef NEWTABLE
   if ((error = xresourcefs_register_files (files_table ())) != NULL)
      goto finish;
   registered_table = TRUE;
#endif

   /*Load files.*/
   tracef ("main_initialise: loading messages\n");
   if ((error = main_resource_alloc (Message_File_Name,
         &resource_messages_alloc, &resource_messages_free, &main_messages))
         != NULL)
      goto finish;
   done_messages = TRUE;

   tracef ("main_initialise: loading sprites\n");
   if ((error = main_resource_alloc (Sprite_File_Name,
         &resource_sprites_alloc, &resource_sprites_free, &main_sprites)) !=
         NULL)
      goto finish;
   done_sprites = TRUE;

   tracef ("main_initialise: loading templates\n");
   if ((error = main_resource_alloc (Template_File_Name,
         &resource_templates_alloc, &resource_templates_free,
         &main_templates)) != NULL)
      goto finish;
   done_templates = TRUE;

   /*Make sure the model list is empty.*/
   if ((error = model_initialise ()) != NULL)
      goto finish;
   done_model = TRUE;

   /*Nearly done - pass round Service_ColourPickerLoaded, giving the address
      of a suitable function for a model to call to register itself.*/
   if ((error = xservice_colour_picker_loaded
         ((void *) &model_loaded_service, workspace)) != NULL)
      goto finish;

   /*Now we put on a different hat, and pretend to be the colour model
      modules.*/
   for (i = 0; i < COUNT (Initialise); i++)
   {  tracef ("done [%d] initialised to %s\n" _
            i _ WHETHER (done [i]));
      if ((error = (*Initialise [i]) (tail, podule_base, workspace)) !=
            NULL)
         goto finish;
      done [i] = TRUE;
   }

   if ((error = dialogue_initialise ()) != NULL)
      goto finish;
   done_dialogue = TRUE;

   #ifdef USE_ATEXIT
   atexit (&Exit);
   #endif

   m_SUMMARY ();

finish:
   if (error != NULL)
   {  tracef ("ERROR: %s (error 0x%X)\n" _ error->errmess _ error->errnum);

      if (done_dialogue)
      {  os_error *error1;

         tracef ("dialogue_terminate\n");
         error1 = dialogue_terminate ();
         if (error == NULL) error = error1;
      }

      for (i = 0; i < COUNT (Initialise); i++)
         if (done [i])
         {  os_error *error1;

            tracef ("Terminate [i]\n" _ i);
            error1 = (*Terminate [i]) (TRUE, SKIP, workspace);
            if (error == NULL) error = error1;
         }

      if (done_model)
      {  os_error *error1;

         tracef ("model_terminate\n");
         error1 = model_terminate ();
         if (error == NULL) error = error1;
      }

      if (done_messages)
      {  os_error *error1;

         tracef ("main_resource_free\n");
         error1 = main_resource_free (main_messages,
               &resource_messages_free);
         if (error == NULL) error = error1;
      }

      if (done_sprites)
      {  os_error *error1;

         tracef ("main_resource_free\n");
         error1 = main_resource_free (main_sprites,
               &resource_sprites_free);
         if (error == NULL) error = error1;
      }

      if (done_templates)
      {  os_error *error1;

         tracef ("main_resource_free\n");
         error1 = main_resource_free (main_templates,
               &resource_templates_free);
         if (error == NULL) error = error1;
      }

   #ifdef NEWTABLE
      if (registered_table)
      {  os_error *error1;

         error1 = xresourcefs_deregister_files (files_table ());
         if (error == NULL) error = error1;
      }
   #endif

   #ifdef STANDALONE
      if (registered_messages)
      {  os_error *error1;

         error1 = xresourcefs_deregister_files (files_messages ());
         if (error == NULL) error = error1;
      }

      if (registered_sprites)
      {  os_error *error1;

         error1 = xresourcefs_deregister_files (files_sprites ());
         if (error == NULL) error = error1;
      }

      if (registered_templates)
      {  os_error *error1;

         error1 = xresourcefs_deregister_files (files_templates ());
         if (error == NULL) error = error1;
      }
   #endif
   }

   tracef ("returning error \"%s\" from initialisation, depth %d\n" _
         error != NULL? error->errmess: "" _ Invocation_Depth);
#if TRACE
   --Invocation_Depth;
#endif
   return (_kernel_oserror *) error;
}
/*------------------------------------------------------------------------*/
_kernel_oserror *main_terminate (bool fatal, int instance, void *workspace)

{  int i;
   os_error *error = NULL;

   NOT_USED (fatal)
   NOT_USED (instance)
   NOT_USED (workspace)

#if TRACE
   Invocation_Depth++;
#endif
   tracef ("main_terminate: depth %d\n" _ Invocation_Depth);

   /*Terminate any dialogues in progress. (In fact, if there are any we just
      refuse to die).*/
   if ((error = dialogue_terminate ()) != NULL)
      goto finish;

   /*Put on our colour model hat.*/
   for (i = 0; i < COUNT (Terminate); i++)
      if ((error = (*Terminate [i]) (fatal, instance, workspace)) != NULL)
         goto finish;

   if ((error = model_terminate ()) != NULL)
      goto finish;

   if ((error = main_resource_free (main_messages, &resource_messages_free))
         != NULL)
      goto finish;

   if ((error = main_resource_free (main_sprites,
         &resource_sprites_free)) != NULL)
      goto finish;

   if ((error = main_resource_free (main_templates,
         &resource_templates_free)) != NULL)
      goto finish;

#ifdef NEWTABLE
   if ((error = xresourcefs_deregister_files (files_table ())) != NULL)
      goto finish;
#endif

#ifdef STANDALONE
   if ((error = xresourcefs_deregister_files (files_messages ())) != NULL)
      goto finish;

   if ((error = xresourcefs_deregister_files (files_sprites ())) != NULL)
      goto finish;

   if ((error = xresourcefs_deregister_files (files_templates ())) != NULL)
      goto finish;
#endif

   m_SUMMARY ();

finish:
   {  os_error *error1 = trace_terminate ();
      if (error == NULL) error = error1;
   }
   tracef ("returning error \"%s\" from termination, depth %d\n" _
         error != NULL? error->errmess: "" _ Invocation_Depth);
#if TRACE
   --Invocation_Depth;
#endif
   return (_kernel_oserror *) error; }
/*------------------------------------------------------------------------*/
_kernel_oserror *main_swi (int swi, _kernel_swi_regs *regs, void *workspace)

{  os_error *error = NULL;

#if TRACE
   Invocation_Depth++;
#endif
   tracef ("main_swi: depth %d\n" _ Invocation_Depth);

   main_workspace = workspace;

   switch (swi)
   {  case ColourPicker_RegisterModel & 0x3F:
         tracef ("main_swi: despatching RegisterModel\n");
         if ((error = model_register ((int) regs->r [0],
               (colourpicker_model *) regs->r [1], (void *) regs->r [2])) !=
               NULL)
            goto finish;
      break;

      case ColourPicker_DeregisterModel & 0x3F:
         tracef ("main_swi: despatching DeregisterModel\n");
         if ((error = model_deregister ((int) regs->r [0])) != NULL)
            goto finish;
      break;

      case ColourPicker_OpenDialogue & 0x3F:
         tracef ("main_swi: despatching OpenDialogue\n");
         if ((error = dialogue_open ((bits) regs->r [0],
               (colourpicker_dialogue *) regs->r [1],
               (colourpicker_d *) &regs->r [0],
               (wimp_w *) &regs->r [1])) != NULL)
            goto finish;
         tracef ("main_swi: OpenDialogue done\n");
      break;

      case ColourPicker_CloseDialogue & 0x3F:
         tracef ("main_swi: despatching CloseDialogue\n");
         if ((error = dialogue_close ((bits) regs->r [0],
               (colourpicker_d) regs->r [1])) != NULL)
            goto finish;
         tracef ("main_swi: CloseDialogue done\n");
      break;

      case ColourPicker_UpdateDialogue & 0x3F:
         tracef ("main_swi: despatching UpdateDialogue\n");
         if ((error = dialogue_update ((bits) regs->r [0],
               (colourpicker_d) regs->r [1],
               (colourpicker_dialogue *) regs->r [2])) != NULL)
            goto finish;
      break;

      case ColourPicker_ReadDialogue & 0x3F:
         tracef ("main_swi: despatching ReadDialogue\n");
         if ((error = dialogue_read ((bits) regs->r [0],
               (colourpicker_d) regs->r [1],
               (colourpicker_dialogue *) regs->r [2],
               (wimp_w *) &regs->r [1],
               (int *) &regs->r [2])) != NULL)
            goto finish;
      break;

      case ColourPicker_SetColour & 0x3F:
         tracef ("main_swi: despatching SetColour\n");
         if ((error = model_set_colour ((bits) regs->r [0],
               (colourpicker_colour *) regs->r [1])) != NULL)
            goto finish;
      break;

      case ColourPicker_HelpReply & 0x3F:
         tracef ("main_swi: despatching HelpReply\n");
         if ((error = dialogue_help_reply ((bits) regs->r [0],
               (wimp_message *) regs->r [1])) != NULL)
            goto finish;
      break;

      case ColourPicker_ModelSWI & 0x3F:
         tracef ("main_swi: despatching ModelSWI\n");
         switch (regs->r [0])
         {  case ColourPickerModelSWI_ColourChanged:
               if ((error = dialogue_colour_changed (FALSE,
                     (colourpicker_colour *) regs->r [1])) != NULL)
                  goto finish;
            break;

            case ColourPickerModelSWI_ColourChangedByDragging:
               if ((error = dialogue_colour_changed (TRUE,
                     (colourpicker_colour *) regs->r [1])) != NULL)
                  goto finish;
            break;

            case ColourPickerModelSWI_ClaimEvent:
            {  dialogue_task_list t;
               dialogue_list l;

               for (t = dialogue_active_tasks; t != NULL; t = t->next)
                  for (l = t->open_dialogues; l != NULL; l = l->next)
                     if (l->colour == (colourpicker_colour *) regs->r [2])
                        task_claim (t->r, regs->r [1]);
            }
            break;

            case ColourPickerModelSWI_ReleaseEvent:
            {  dialogue_task_list t;
               dialogue_list l;

               for (t = dialogue_active_tasks; t != NULL; t = t->next)
                  for (l = t->open_dialogues; l != NULL; l = l->next)
                     if (l->colour == (colourpicker_colour *) regs->r [2])
                        task_release (t->r, regs->r [1]);
            }
            break;

            case ColourPickerModelSWI_ProcessKey:
               /*This is a bit low, but it should do the trick.*/
               if ((error = dialogue_process_key (regs->r [1],
                     (colourpicker_colour *) regs->r [2])) != NULL)
                  goto finish;
            break;

            default:
               error = main_error_lookup (error_COLOUR_PICKER_BAD_REASON,
                     "BadReason");
               goto finish;
            break;
         }
      break;

      default:
         error = riscos_error_lookup (error_NO_SUCH_SWI, "BadSwi",
               "ColourPicker");
         goto finish;
      break;
   }

finish:
   tracef ("returning error \"%s\" from SWI handler, depth %d\n" _
         error != NULL? error->errmess: "" _ Invocation_Depth);
#if TRACE
   --Invocation_Depth;
#endif
   return (_kernel_oserror *) error;
}
/*------------------------------------------------------------------------*/
void main_service (int service, _kernel_swi_regs *regs, void *workspace)

{  int i;
   os_error *error = NULL;

   NOT_USED (workspace)

#if TRACE
   if (Invocation_Depth != 0)
   {  tracef ("*** service discarded at depth %d ***\n" _ Invocation_Depth);
      return;
   }
#endif

#if TRACE
   Invocation_Depth++;
#endif
   tracef ("main_service: depth %d\n" _ Invocation_Depth);

   switch (service)
   {  case Service_WimpCloseDown:
      {  dialogue_task_list t;

         tracef ("main_service: servicing WimpCloseDown\n");
         if (regs->r [0] == 0 &&
               (t = dialogue_task ((wimp_t) (regs->r [2] & 0xFFFF))) !=
               NULL)
            if ((error = dialogue_close_down (t)) != NULL)
               goto finish;
      }
      break;

      case Service_ResourceFSStarted:
      case Service_TerritoryStarted:
         tracef ("main_service: servicing ResourceFSStarted/"
               "TerritoryStarted\n");
         /*One of 2 things has happened here: either a new territory has
            started, and all the tokens in the table are now sorted in the
            wrong order, or else the files that we are pointing into have
            moved, so we'll have to read the whole lot again.*/
         if ((error = riscos_territory (territory_CURRENT)) != NULL)
            goto finish;

         if ((error = main_resource_free (main_messages,
               &resource_messages_free)) != NULL)
            goto finish;
         if ((error = main_resource_alloc (Message_File_Name,
               &resource_messages_alloc, &resource_messages_free,
               &main_messages)) != NULL)
            goto finish;

         if ((error = main_resource_free (main_sprites,
               &resource_sprites_free)) != NULL)
            goto finish;
         if ((error = main_resource_alloc (Sprite_File_Name,
               &resource_sprites_alloc, &resource_sprites_free,
               &main_sprites)) != NULL)
            goto finish;

         if ((error = main_resource_free (main_templates,
               &resource_templates_free)) != NULL)
            goto finish;
         if ((error = main_resource_alloc (Template_File_Name,
               &resource_templates_alloc, &resource_templates_free,
               &main_templates)) != NULL)
            goto finish;

         if ((error = dialogue_setup ()) != NULL)
            goto finish;
      break;
   }

finish:
   /*Change hats - now we're some colour model modules. This could be more
      efficient, but it probably doesn't matter in practice.*/
   for (i = 0; i < COUNT (Service); i++)
      (*Service [i]) (service, regs, workspace);

   /*We can't return an error from a service call, so throw it away.*/
   tracef ("discarding \"%s\" from service handler, depth %d\n" _
         error != NULL? error->errmess: "" _ Invocation_Depth);
#if TRACE
   --Invocation_Depth;
#endif
}
/*------------------------------------------------------------------------*/
_kernel_oserror *main_command (char *tail, int argc, int cmd_no,
      void *workspace)

{  os_error *error = NULL;

#if TRACE
   Invocation_Depth++;
#endif
   tracef ("main_command: depth %d\n" _ Invocation_Depth);

   switch (cmd_no)
   {  case main_MODEL_LIST:
      {  /*ModelList*/
         model_list l;
         char buf [512];

         NOT_USED (tail) /*Must be empty*/
         NOT_USED (argc) /*Must be 0*/
         NOT_USED (workspace)

         for (l = model_registry; l != NULL; l = l->next)
         {  sprintf (buf, "%d:\t%.*s\r\t%.*s\r",
                  l->model_no, riscos_strlen (l->model->name),
                  l->model->name, riscos_strlen (l->model->description),
                  l->model->description);

            if ((error = xos_pretty_print (buf, NULL, NULL)) != NULL)
               goto finish;
      }  }
      break;
   }

   m_SUMMARY ();

finish:
   tracef ("returning error \"%s\" from command handler, depth %d\n" _
         error != NULL? error->errmess: "" _ Invocation_Depth);
#if TRACE
   --Invocation_Depth;
#endif
   return (_kernel_oserror *) error; }
/*------------------------------------------------------------------------*/
os_error *main_event (int event, wimp_block *block, dialogue_task_list t)

{  os_error *error = NULL;
   bool unclaimed;
   dialogue_list l, l_next;
   relocate_frame frame;
   model_list m;

   tracef ("main_event %d round picker's own callbacks\n" _ event);
   if ((error = task_callback (t->r, NULL, event, block, &unclaimed)) !=
         NULL)
      goto finish;
   tracef ("picker's own callbacks done - event %s\n" _
         unclaimed? "not claimed": "claimed");

   if (unclaimed)
      /*Pass the event on to each dialogue.*/
      for (l = t->open_dialogues; l != NULL; l = l_next)
      {  l_next = l->next;
         m = l->model;

         tracef ("passing event %d to dialogue 0x%X\n" _ event _ l);
         relocate_begin (m->workspace, &frame);
         error =
               (*(os_error *(*) (colourpicker_colour *, int, wimp_block *))
               m->model->entries [colourpicker_ENTRY_PROCESS_EVENT])
               (l->colour, event, block);
            /*this may delete the dialogue, and the whole task, too!*/
         relocate_end (&frame);
         if (error != NULL) goto finish;
      }

finish:
   return error;
}
/*------------------------------------------------------------------------*/
int main_post_filter (int event, wimp_block *block, wimp_t task,
      dialogue_task_list t)

{  os_error *error = NULL;
   bits saved_mask = t->saved_mask;
   task_r r = t->r; /*this may not survive!*/

   NOT_USED (task)

   trace_f (NULL _ 0 _ "\n");
#if TRACE
   Invocation_Depth++;
#endif
   tracef ("main_post_filter: depth %d\n" _ Invocation_Depth);

   main_workspace = t->workspace;

   if ((error = main_event (event, block, t)) != NULL)
      goto finish;

finish:
   if (event != wimp_REDRAW_WINDOW_REQUEST)
      task_report_error (r, error);

   /*Swallow the event if the task is masking it out.*/
   tracef ("returning event %d from postfilter, depth %d\n" _
         (1 << event & saved_mask) != NONE? -1: event _
         Invocation_Depth);
#if TRACE
   --Invocation_Depth;
#endif
   return (1 << event & saved_mask) != NONE? -1: event; }
/*------------------------------------------------------------------------*/
int main_pre_filter (bits mask, wimp_block *block, wimp_t task,
      dialogue_task_list t)

   /*Adjust the mask that the task is using so that events we are interested
      in are passed to us. Save the mask the task wanted so that we can
      screen out the ones it doesn't want (sneaky, huh?).*/

{  os_error *error = NULL;
   task_r r = t->r;
   int c = t->key;

   NOT_USED (block)
   NOT_USED (task)

#if TRACE
   Invocation_Depth++;
#endif
   tracef ("main_pre_filter: depth %d\n" _ Invocation_Depth);

   if (c != -1)
   {  t->key = -1; /*Just for safety (whose, yours or mine?).*/

      tracef ("xwimp_process_key (0x%X)\n" _ c);
      if ((error = xwimp_process_key (c)) != NULL)
         goto finish;
   }

   t->saved_mask = mask;
   tracef ("nulls wanted %d times\n" _ ((byte *) t->r) [4]);

finish:
   task_report_error (r, error);

   tracef ("returning mask %d from prefilter, depth %d\n" _
         mask & task_mask (t->r) _ Invocation_Depth);
#if TRACE
   --Invocation_Depth;
#endif
   return mask & task_mask (t->r); }
/*------------------------------------------------------------------------*/
os_error *main_error_lookup (int errnum, char *token, ...)

{  va_list list;
   char *p [4], *msg, *cc;
   int i;
   os_error *error = NULL, *error1, error_block;

   tracef ("main_error_lookup\n");

   /*Assume that 4 args are always given.*/
   va_start (list, token);
   for (i = 0; i < 4; i++) p [i] = va_arg (list, char *);
   va_end (list);

   if ((error = lookup (main_messages, token, (void **) &msg)) != NULL)
      goto finish;

   /*We have to do the substitution of arguments ourselves, since there's no
      MessageTrans call to do it, and os_substitute_args() takes a
      space-separated string.*/
   error_block.errnum = errnum;
   i = 0;
   for (cc = msg; *cc >= 32; cc++)
      if (*cc != '%' || !('0' <= *++cc && *cc < '4'))
      {  if (i + 1 >= os_ERROR_LIMIT) break;
         error_block.errmess [i++] = *cc;
      }
      else
      {  /*We have %0, %1, %2 or %3.*/
         char *dd;

         if ((dd = p [*cc - '0']) != NULL)
            while (*dd >= 32)
            {  if (i + 1 >= os_ERROR_LIMIT) break;
               error_block.errmess [i++] = *dd++;
            }
         else
         {  if (i + 2 >= os_ERROR_LIMIT) break;
            error_block.errmess [i++] = '%',
            error_block.errmess [i++] = *cc;
      }  }
   error_block.errmess [i] = '\0';

   if ((error = xmessagetrans_copy_error (&error_block, &error1)) != NULL)
      goto finish;

   error = error1;

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *main_report_error (os_error *error)

   /*Report an error on behalf of no task in particular.*/

{  os_error *error1;
   char *name;

   tracef ("main_report_error: \"%s\"\n" _
         error != NULL? error->errmess: "");

   if (error != NULL)
   {  error1 = lookup (main_messages, "Module", (void **) &name);
      if (error == NULL) error = error1;
   }

   if (error != NULL)
   {  error1 = xwimp_report_error (error, NONE, name, NULL);
      if (error == NULL) error = error1;
   }

   return error;
}
/*------------------------------------------------------------------------*/
os_error *main_resource_alloc (char *file_name, resource_loader *loader,
      resource_unloader *unloader, lookup_t *t_out)

   /* Registers the contents of |resource| into ResourceFS, then loads
      |file_name| into a new table, using the given |loader| and |unloader|.
      The table is returned in |t|.
   */

{  os_error *error = NULL;
   lookup_t t;
   bool done_new = FALSE, done_load = FALSE;

   if ((error = lookup_new (&t, 3)) != NULL)
      goto finish;
   done_new = TRUE;

   if ((error = (*loader) (t, file_name)) != NULL)
      goto finish;
   done_load = TRUE;

   if (t_out != NULL) *t_out = t;

finish:
   if (error != NULL)
   {  tracef ("ERROR: %s (error 0x%X)\n" _ error->errmess _ error->errnum);

      if (done_load)
      {  os_error *error1;

         tracef ("*unloader\n");
         error1 = (*unloader) (t);
         if (error == NULL) error = error1;
      }

      if (done_new)
      {  os_error *error1;

         tracef ("lookup_delete\n");
         error1 = lookup_delete (t);
         if (error == NULL) error = error1;
   }  }

   return error;
}
/*------------------------------------------------------------------------*/
os_error *main_resource_free (lookup_t table, resource_unloader *unloader)

   /* Unloads the resources in the given table.
    */

{  os_error *error = NULL, *error1;

   error1 = (*unloader) (table);
   if (error == NULL) error = error1;

   error1 = lookup_delete (table);
   if (error == NULL) error = error1;

   if (error != NULL)
      tracef ("ERROR: %s (error 0x%X)\n" _ error->errmess _ error->errnum);
   return error;
}
