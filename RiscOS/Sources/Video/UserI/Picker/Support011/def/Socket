TITLE Socket;

NEEDS OS;

CONST Socket_DomainInet = .Int: 2;

CONST
   Socket_TypeStream    = .Int: 1,
   Socket_TypeDGram     = .Int: 2,
   Socket_TypeRaw       = .Int: 3;

CONST
   Socket_ProtocolIP    = .Int:   0, //dummy for IP
   Socket_ProtocolICMP  = .Int:   1, //control message protocol
   Socket_ProtocolGGP   = .Int:   2, //gateway^2 (deprecated)
   Socket_ProtocolTCP   = .Int:   6, //tcp
   Socket_ProtocolEGP   = .Int:   8, //exterior gateway protocol
   Socket_ProtocolPUP   = .Int:  12, //pup
   Socket_ProtocolUDP   = .Int:  17, //user datagram protocol
   Socket_ProtocolIDP   = .Int:  22, //xns idp
   Socket_ProtocolRAW   = .Int: 255; //raw IP packet

CONST Socket_LevelSocket = .Int: 0xffff;

TYPE Socket_InetAddr =
   .Struct
   (  .Short: family,
      .Short: port,
      .Bits: addr,
      [8] .Byte: data
   );

TYPE Socket_Addr =
   .Union
   (  .Struct
      (  .Short: family,
         [14] .Byte: data
      ): generic,
      Socket_InetAddr: inet
   );

CONST
   Socket_ErrorBadF           = .Bits: 9,  //Bad descriptor
   Socket_ErrorAgain          = .Bits: 11, //No more ports
   Socket_ErrorFault          = .Bits: 14, //Bad address
   Socket_ErrorInval          = .Bits: 22, //Invalid argument
   Socket_ErrorWouldBlock     = .Bits: 35, //Operation would block
   Socket_ErrorInProgress     = .Bits: 36, //Operation now in progress
   Socket_ErrorAlready        = .Bits: 37, //Operation already in progress
   Socket_ErrorNotSock        = .Bits: 38, //Socket operation on non-socket
   Socket_ErrorDestAddrReq    = .Bits: 39, //Destination address required
   Socket_ErrorMsgSize        = .Bits: 40, //Message too long
   Socket_ErrorProtoType      = .Bits: 41, //Protocol wrong type for socket
   Socket_ErrorNoProtoOpt     = .Bits: 42, //Protocol not available
   Socket_ErrorProtoNoSupport = .Bits: 43, //Protocol not supported
   Socket_ErrorSockTNoSupport = .Bits: 44, //Socket type not supported
   Socket_ErrorOpNotSupp      = .Bits: 45, //Operation not supported on socket
   Socket_ErrorPFNoSupport    = .Bits: 46, //Protocol family not supported
   Socket_ErrorAFNoSupport    = .Bits: 47, //Address family not supported by protocol family
   Socket_ErrorAddrInUse      = .Bits: 48, //Address already in use
   Socket_ErrorAddrNotAvail   = .Bits: 49, //Can't assign requested address
   Socket_ErrorNetDown        = .Bits: 50, //Network is down
   Socket_ErrorNetUnreach     = .Bits: 51, //Network is unreachable
   Socket_ErrorNetReset       = .Bits: 52, //Network dropped connection on reset
   Socket_ErrorConnAborted    = .Bits: 53, //Software caused connection abort
   Socket_ErrorConnReset      = .Bits: 54, //Connection reset by peer
   Socket_ErrorNoBufs         = .Bits: 55, //No buffer space available
   Socket_ErrorIsConn         = .Bits: 56, //Socket is already connected
   Socket_ErrorNotConn        = .Bits: 57, //Socket is not connected
   Socket_ErrorShutdown       = .Bits: 58, //Can't send after socket shutdown
   Socket_ErrorTooManyRefs    = .Bits: 59, //Too many references: can't splice
   Socket_ErrorTimedOut       = .Bits: 60, //Connection timed out
   Socket_ErrorConnRefused    = .Bits: 61, //Connection refused
   Socket_ErrorHostDown       = .Bits: 64, //Host is down
   Socket_ErrorHostUnreach    = .Bits: 65; //No route to host

TYPE Socket_Linger = .Struct (.Int: onoff, .Int: linger);
TYPE Socket_TimeVal = .Struct (.Int: sec, .Int: usec);

CONST
   Socket_OptionAcceptConn  = .Int: &2,
   Socket_OptionReuseAddr   = .Int: &4,
   Socket_OptionKeepAlive   = .Int: &8,
   Socket_OptionDontRoute   = .Int: &10,
   Socket_OptionBroadcast   = .Int: &20,
   Socket_OptionUseLoopback = .Int: &40,
   Socket_OptionLinger      = .Int: &80,
   Socket_OptionOOBInLine   = .Int: &100,
   Socket_OptionSndBuf      = .Int: &1001,
   Socket_OptionRcvBuf      = .Int: &1002,
   Socket_OptionSndLowAt    = .Int: &1003,
   Socket_OptionRcvLowAt    = .Int: &1004,
   Socket_OptionSndTimeo    = .Int: &1005,
   Socket_OptionRcvTimeo    = .Int: &1006,
   Socket_OptionError       = .Int: &1007,
   Socket_OptionType        = .Int: &1008;

CONST Socket_IFNameLimit = .Int: 16;
TYPE Socket_IFFlags = .Short;

CONST
   Socket_IFUp           = Socket_IFFlags: 0x1,  //interface is up
   Socket_IFBroadcast    = Socket_IFFlags: 0x2,  //broadcast address valid
   Socket_IFDebug        = Socket_IFFlags: 0x4,  //turn on debugging
   Socket_IFLoopback     = Socket_IFFlags: 0x8,  //is a loopback net
   Socket_IFPointToPoint = Socket_IFFlags: 0x10, //interface is point-to-point link
   Socket_IFNoTrailers   = Socket_IFFlags: 0x20, //avoid use of trailers
   Socket_IFRunning      = Socket_IFFlags: 0x40, //resources allocated
   Socket_IFNoARP        = Socket_IFFlags: 0x80; //no address resolution protocol

TYPE Socket_IFReq =
   .Struct
   (  [Socket_IFNameLimit] .Char: name,
      .Union
      (  Socket_Addr: addr,
         Socket_Addr: broadaddr,
         Socket_IFFlags: flags,
         .Int: metric,
         .Ref .Byte: data
      ): u
   );

TYPE Socket_IFConf =
   .Struct
   (  .Int: len,
      .Union
      (  .Ref .Byte: buf,
         .Ref Socket_IFReq: req
      ): u
   );

//                                       4 = OUT
//                                       8 = IN
//                                       C = IN/OUT
//                                         TT = size in bytes
//                                           XX = 's'/'i'/'f'
//                                             YY = operation
CONST
   Socket_IoctlSIOCSHIWAT     = .Bits: 0x80047300, //set high watermark (Int)
   Socket_IoctlSIOCGHIWAT     = .Bits: 0x40047301, //get high watermark (Int)
   Socket_IoctlSIOCSLOWAT     = .Bits: 0x80047302, //set low watermark (Int)
   Socket_IoctlSIOCGLOWAT     = .Bits: 0x40047303, //get low watermark (Int)
   Socket_IoctlSIOCATMARK     = .Bits: 0x40047307, //at oob mark? (Int)
   Socket_IoctlSIOCSIFADDR    = .Bits: 0x8020690C, //set ifnet address (Socket_IFReq)
   Socket_IoctlSIOCGIFADDR    = .Bits: 0xC020690D, //get ifnet address (Socket_IFReq)
   Socket_IoctlSIOCSIFDSTADDR = .Bits: 0x8020690E, //set p-p address (Socket_IFReq)
   Socket_IoctlSIOCGIFDSTADDR = .Bits: 0xC020690F, //get p-p address (Socket_IFReq)
   Socket_IoctlSIOCSIFFLAGS   = .Bits: 0x80206910, //set ifnet flags (Socket_IFReq)
   Socket_IoctlSIOCGIFFLAGS   = .Bits: 0xC0206911, //get ifnet flags (Socket_IFReq)
   Socket_IoctlSIOCGIFBRDADDR = .Bits: 0xC0206912, //get broadcast addr (Socket_IFReq)
   Socket_IoctlSIOCSIFBRDADDR = .Bits: 0x80206913, //set broadcast addr (Socket_IFReq)
   Socket_IoctlSIOCGIFCONF    = .Bits: 0xC0086914, //get ifnet list (Socket_IFConf)
   Socket_IoctlSIOCGIFNETMASK = .Bits: 0xC0206915, //get net addr mask (Socket_IFReq)
   Socket_IoctlSIOCSIFNETMASK = .Bits: 0x80206916, //set net addr mask (Socket_IFReq)
   Socket_IoctlSIOCGIFMETRIC  = .Bits: 0xC0206917, //get IF metric (Socket_IFReq)
   Socket_IoctlSIOCSIFMETRIC  = .Bits: 0x80206918, //set IF metric (Socket_IFReq)
   Socket_IoctlFIONREAD       = .Bits: 0x4004667F, //get number of bytes to read (Int)
   Socket_IoctlFIONBIO        = .Bits: 0x8004667E, //set/clear non-blocking i/o (Int)
   Socket_IoctlFIOASYNC       = .Bits: 0x8004667D; //set/clear async i/o (Int)

TYPE
   Socket_MsgFlags = .Bits;

CONST
   Socket_MsgOOB       = Socket_MsgFlags: %1,
   Socket_MsgPeek      = Socket_MsgFlags: %10,
   Socket_MsgDontRoute = Socket_MsgFlags: %100;

TYPE
   Socket_S,
   Socket_IOVec = .Struct (.Ref .Data: base, .Int: len),
   Socket_MsgHdr =
      .Struct
      (  .Ref .Data: name,
         .Int: namelen,
         .Ref Socket_IOVec: iov,
         .Int: iov_count,
         .Ref .Data: accrights,
         .Int: accrightslen
      );

SWI Socket_Creat = (NUMBER 0x41200 "Creates an endpoint for communication",
      ENTRY
      (  R0 = .Int: domain,
         R1 = .Int: type,
         R2 = .Int: protocol
      ),
      EXIT
      (  R0! = Socket_S: s
   )  );

SWI Socket_Bind = (NUMBER 0x41201 "Binds a name to a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> Socket_Addr: addr,
         R2 = .Int: namelen
   )  );

SWI Socket_Listen = (NUMBER 0x41202 "Listens for connections on a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Int: backlog
   )  );

SWI Socket_Accept = (NUMBER 0x41203 "Accepts a connection on a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> Socket_Addr: addr,
         R2 -> .Int: addrlen
      ),
      EXIT
      (  R0! = Socket_S: ns
   )  );

SWI Socket_Connect = (NUMBER 0x41204 "Initiates a connection on a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> Socket_Addr: addr,
         R2 = .Int: namelen
   )  );

SWI Socket_Recv = (NUMBER 0x41205 "Receives data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref .Data: buf,
         R2 = .Int: len,
         R3 = Socket_MsgFlags: flags
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Recvfrom = (NUMBER 0x41206 "Receives data from a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref .Data: buf,
         R2 = .Int: len,
         R3 = Socket_MsgFlags: flags,
         R4 -> Socket_Addr: from,
         R5 -> .Int: fromlen
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Recvmsg = (NUMBER 0x41207 "Receives a message from a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref Socket_MsgHdr: msg,
         R2 = Socket_MsgFlags: flags
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Send = (NUMBER 0x41208 "Sends data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> .Data: msg,
         R2 = .Int: len,
         R3 = Socket_MsgFlags: flags
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Sendto = (NUMBER 0x41209 "Sends data from a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> .Data: msg,
         R2 = .Int: len,
         R3 = Socket_MsgFlags: flags,
         R4 -> Socket_Addr: to,
         R5 = .Int: tolen
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Sendmsg = (NUMBER 0x4120A "Sends a message from a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> Socket_MsgHdr: msg,
         R2 = Socket_MsgFlags: flags
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

TYPE Socket_ShutdownType = .Int;
CONST Socket_ShutdownRecv = Socket_ShutdownType: 0,
      Socket_ShutdownSend = Socket_ShutdownType: 1,
      Socket_ShutdownAll  = Socket_ShutdownType: 2;

SWI Socket_Shutdown = (NUMBER 0x4120B "Shuts down part of a full-duplex connection",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = Socket_ShutdownType: type
   )  );

SWI Socket_Setsockopt = (NUMBER 0x4120C "Set options on sockets",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Int: level,
         R2 = .Int: optname,
         R3 -> .Data: optval,
         R4 = .Int: optlen
   )  );

SWI Socket_Getsockopt = (NUMBER 0x4120D "Get options on sockets",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Int: level,
         R2 = .Int: optname,
         R3 = .Ref .Data: optval,
         R4 -> .Int: optlen
   )  );

SWI Socket_Getpeername = (NUMBER 0x4120E "Gets name of connected peer",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref Socket_Addr: addr,
         R2 -> .Int: namelen
   )  );

SWI Socket_Getsockname = (NUMBER 0x4120F "Gets socket name",
      ENTRY
      (  R0 =  Socket_S: s,
         R1 = .Ref Socket_Addr: addr,
         R2 -> .Int: namelen
   )  );

SWI Socket_Close = (NUMBER 0x41210 "Closes an open socket",
      ENTRY
      (  R0 = Socket_S: s
   )  );

TYPE Socket_FDSet = .Data;
SWI Socket_Select = (NUMBER 0x41211 "Synchronous socket i/o multiplexing",
      ENTRY
      (  R0 = .Int: nfds,
         R1 -> Socket_FDSet: readfds,
         R2 -> Socket_FDSet: writefds,
         R3 -> Socket_FDSet: exceptfds,
         R4 -> Socket_TimeVal: timeout
      ),
      EXIT
      (  R0! = .Int: nfound
   )  );

SWI Socket_Ioctl = (NUMBER 0x41212 "Controls an open socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Bits: flags,
         R2 -> .Data: argp
   )  );

SWI Socket_Read = (NUMBER 0x41213 "Receives data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref .Data: buf,
         R2 = .Int: len
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Write = (NUMBER 0x41214 "Sends data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> .Data: msg,
         R2 = .Int: len
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Stat = (NUMBER 0x41215 "Not implemented");

SWI Socket_Readv = (NUMBER 0x41216 "Receives data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref Socket_IOVec: iov,
         R2 = .Int: iov_count
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Writev = (NUMBER 0x41217 "Sends data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> Socket_IOVec: iov,
         R2 = .Int: iov_count
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Gettsize = (NUMBER 0x41218 "Gets the size of the socket table",
      EXIT (R0! = .Int: size));

CONST
   Socket_AsyncEvent  = .Int: 1,
   Socket_UrgentEvent = .Int: 2,
   Socket_BrokenEvent = .Int: 3;

SWI Event_Internet = (NUMBER 0x22, ENTRY (R0 # 19 "Internet event",
      R1 = .Int: event_type, R2 = Socket_S: s))
