/*x.c*/

/*From CLib*/
#include <kernel.h>
#include <setjmp.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>

/*From OSLib*/
#include "macros.h"
#include "os.h"

/*From Support*/
#include "x.h"

x_STATIC_ERROR (Error_Escape,    error_ESCAPE,     "Escape")
x_STATIC_ERROR (Error_Stack,     error_STK_OFLO,   "Stack overflow")
x_STATIC_ERROR (Error_Unknown,   1,                "C library error")
x_STATIC_ERROR (Error_No_Memory, os_GLOBAL_NO_MEM, "Not enough memory")

static int Signals [] = {SIGINT, SIGSTAK, SIGOSERROR};

/*------------------------------------------------------------------------*/
static void Try_Handler (int sig, x_exception *x)

   /*Handler for use after x_try().*/

{  os_error *error = NULL /**/;

   /*Save this condition in the buffer.*/
   switch (sig)
   {  case SIGINT:
         error = Error_Escape;
      break;

      case SIGSTAK:
         error = Error_Stack;
      break;

      case SIGOSERROR:
         error = x__last_error ();
      break;
   }

   /*Longjump back to the x_TRY() call.*/
   longjmp (x->buf, (int) (x->error = error));
}
/*------------------------------------------------------------------------*/
void x__try (x_exception *x)

{  int sig;

   /*trampoline*/
   x->trampoline [0] = 0xE24F1008;
      /*i e, 'ADR R1, x,' which is the same as 'SUB R1, PC, #8'*/
   x->trampoline [1] = 0xEA000000 | ((int) &Try_Handler -
         (int) &x->trampoline [1] - 8 >> 2 & 0xFFFFFF);
      /*i e, 'B Try_Handler'*/

   /*previous*/
   for (sig = 0; sig < COUNT (Signals); sig++)
      if ((x->previous [sig] = signal (Signals [sig], (void (*) (int)) x)) ==
            SIG_ERR)
         x->previous [sig] = NULL;

   /*error*/
   x->error = NULL;

   /*buf*/
   /*Done in calling macro.*/
}
/*------------------------------------------------------------------------*/
void x__catch (x_exception *x)

{  int sig;

   /*Restore the caller's handlers.*/
   for (sig = 0; sig < COUNT (Signals); sig++)
      if (x->previous [sig] != NULL)
         (void) signal (Signals [sig], x->previous [sig]);

}
/*------------------------------------------------------------------------*/
os_error *x__last_error (void)

{  /*messing about here because _kernel_last_oserror() returns NULL the
      second time it's called*/
   os_error *last_error;

   static os_error *Last_Error = (os_error *) &Error_Unknown_;

   if ((last_error = (os_error *) _kernel_last_oserror ()) != NULL)
      Last_Error = last_error;

   return Last_Error; /*never NULL*/
}
/*------------------------------------------------------------------------*/
void *x_alloc (int size)

{  void *ptr;

   if ((ptr = malloc (size)) == NULL && size != 0)
      x_THROW (Error_No_Memory);

   return ptr;
}
/*------------------------------------------------------------------------*/
void x_free (void *ptr) {free (ptr);}
/*------------------------------------------------------------------------*/
void *x_realloc (void *ptr, int size)

{  if ((ptr = realloc (ptr, size)) == NULL && size != 0)
      x_THROW (Error_No_Memory);

   return ptr;
}
