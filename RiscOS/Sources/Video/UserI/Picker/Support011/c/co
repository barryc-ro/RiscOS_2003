/*co.c - coroutine implementation*/

/*From CLib*/
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

/*From Support*/
#include "co.h"
#include "m.h"
#include "trace.h"

#define STACK_DISP 0x230
#define JMP_FP     6
#define JMP_SP     7
#define JMP_SL     8
#define JMP_LR     9

#define V3_FP_MASK 0x80000000
#define SC_NEXT    1
#define SC_PREV    2
#define SC_SIZE    3

#define STACK_CHUNK_SIZE 4096

struct co_routine {jmp_buf env; int *stack;};

static struct co_routine Main_Co;

typedef void Cofunction (void *);

static co_routine Starter, Current = &Main_Co;
static void *Parameter;
static Cofunction *Start_Proc;

/*Resume a coroutine. Coroutine may be current.*/
void *co_resume (co_routine r, void *p)

{  if (setjmp (Current->env) == 0)
   {  Current = r;
      Parameter = p;
      longjmp (r->env, 0);
   }

   return Parameter;
}

/*Initialise the coroutine handling. Establish the mainline coroutine.*/
void co_init (void)

{  (void) setjmp (Main_Co.env);
   Main_Co.stack = (int *) (Main_Co.env [JMP_SL] - STACK_DISP);
   tracef ("co_init: stack 0x%X = 0x%X - 0x%X\n" _
       Main_Co.stack _ Main_Co.env [JMP_SL] _ STACK_DISP);
}

void co_term (void)

{  longjmp (Main_Co.env, 0);
}

/*Coroutine starter for co_create.*/
static void Start (void)

{  Cofunction *proc = Start_Proc;

   (void) (*proc) (co_resume (Starter, NULL));
   fprintf (stderr, "Exit from coroutine\n");
   exit (1);
}

/*Create coroutine and start executing.*/
co_routine co_create (Cofunction *proc)

{  co_routine r;
   int *stack;

   r = malloc (sizeof *r);

   /*Put STACK_DISP space at beginning of space.*/
   stack = malloc (STACK_DISP + STACK_CHUNK_SIZE);

   memcpy (stack, Current->stack, STACK_DISP);

   stack [SC_NEXT] = NULL;
   stack [SC_PREV] = NULL;
   stack [SC_SIZE] = STACK_DISP + STACK_CHUNK_SIZE;

   setjmp (r->env);
   r->env [JMP_SL] = (int) stack + STACK_DISP;
   r->env [JMP_SP] = (int) stack + STACK_DISP + STACK_CHUNK_SIZE;
   r->env [JMP_LR] = (int) Start;

   Start_Proc = proc;
   Starter = Current;
   co_resume (r, NULL);

   return r;
}

void co_delete (co_routine r)

{  free (r);
}
