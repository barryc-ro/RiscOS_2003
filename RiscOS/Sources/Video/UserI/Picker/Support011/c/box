/*box - various operations on boxes*/

/*From OSLib*/
#include "os.h"

/*From Support*/
#include "box.h"

os_box *box_extend (os_box *b, os_coord *p)

   /*Extend the box so that it includes the point*/

{  (void) MINAB (b->x0, p->x);
   (void) MINAB (b->y0, p->y);
   (void) MAXAB (b->x1, p->x + 1);
   (void) MAXAB (b->y1, p->y + 1);

   return b;
}
/*------------------------------------------------------------------------*/
bool box_within (os_coord *p, os_box *b)

   /*Is p inside b?*/

{  return b->x0 <= p->x && p->x < b->x1 &&
         b->y0 <= p->y && p->y < b->y1;
}
/*------------------------------------------------------------------------*/
os_box *box_intersection (os_box *a, os_box *b)

   /*Intersects b into a, returning a if there is one or NULL otherwise*/

{  os_box tmp;

   tmp.x0 = MAX (a->x0, b->x0);
   tmp.y0 = MAX (a->y0, b->y0);
   tmp.x1 = MIN (a->x1, b->x1);
   tmp.y1 = MIN (a->y1, b->y1);

   if (tmp.x1 - tmp.x0 > 0 && tmp.y1 - tmp.y0 > 0)
   {  *a = tmp;
      return a;
   }
   else
      return NULL;
}
/*------------------------------------------------------------------------*/
os_box *box_union (os_box *a, os_box *b)

   /*Unites b into a, returning a*/

{  os_box tmp;

   tmp.x0 = MIN (a->x0, b->x0);
   tmp.y0 = MIN (a->y0, b->y0);
   tmp.x1 = MAX (a->x1, b->x1);
   tmp.y1 = MAX (a->y1, b->y1);

   *a = tmp;
   return a;
}
/*------------------------------------------------------------------------*/
bool box_overlap (os_box *a, os_box *b)

   /*Whether two boxes overlap*/

{  os_box tmp = *a;

   return box_intersection (&tmp, b) != NULL;
}
