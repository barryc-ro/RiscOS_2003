/* STBSplash:error.c */

#include <stdio.h>
#include <string.h>

#include "kernel.h"

#include "error.h"

/* globals */
_kernel_oserror error_asyncBuf[1];
_kernel_oserror *error_async=NULL;

char *errmess[] =
{
  "Memory",
  "No icons loaded",
  "Bad rectangle",
  "Bad file type",
  "Palette memory"
};

/*********************** extern functions ************************/

/* Initialise */
_kernel_oserror *error_init( void )
{
  error_asyncBuf->errnum = 0;
  error_asyncBuf->errmess[0] = 0;
  
  return NULL;
}

/* Returns the _kernel_oserror corresponding to the errorNumber */
/* The _kernel_oserror will be overwritten by the next call to this function */
_kernel_oserror *error_make( int errorNumber )
{
  static _kernel_oserror error; /* Ensure always available */
  error.errnum = errorNumber;
  sprintf( error.errmess, ERROR_PREFIX "%.240s", errmess[errorNumber-ERROR_BASE] );
  
  return &error;
}

/* Copy the error into an internal buffer (unless it's already there). */
/* Give it NULL and it returns NULL.                                   */
_kernel_oserror *error_copy(_kernel_oserror *err)
{
  static _kernel_oserror error_buffer[1];

  if(err==NULL || err==error_buffer)
    return err;
  memcpy(error_buffer, err, sizeof(error_buffer));
  return error_buffer;
}

/* Set the asynchronous error */
void error_setAsync(_kernel_oserror *err)
{
  if(err)
  {
    memcpy(error_asyncBuf, err, sizeof(error_asyncBuf));
    error_async = error_asyncBuf;
  }
  else
  {
    error_async = NULL;
  }
}

/* STBSplash:End of error.c */

