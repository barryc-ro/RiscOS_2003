#include "pehandlers.h"
#include "swihandlers.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define NOT_USED(a) ((a)=(a))

//#define DEBUG

#ifdef DEBUG
extern FILE *DebugFile;
#define DEBUG_PUTS(a) fprintf(DebugFile,"%s\n",(a))
#else
#define DEBUG_PUTS(a)
#endif

typedef struct teletext_header
{
   int page;
   int subPage;
   int flags;
}teletext_header;

static bool sane( char *packet );

void free_program_element_packet(program_element_packet *programElementPacket);

bool VideoStreamOpen = false;

_kernel_oserror *peh_open_stream(unsigned int flags,
                                 unsigned int controlStreamHandle,
                                 unsigned int *programElementStreamHandle)
{
   _kernel_oserror *err = NULL;

   NOT_USED(controlStreamHandle);
   NOT_USED(flags);

   if (VideoStreamOpen)
   {
      *programElementStreamHandle = 0;
   }
   else
   {
      TeletextSession.processState.gotStartPacket = false;
      TeletextSession.processState.waitingForFirstHeader = true;
      TeletextSession.processState.serialTransmission = false;

      TeletextSession.processState.pageDecode[0].active = false;
      TeletextSession.processState.pageDecode[1].active = false;
      TeletextSession.processState.pageDecode[2].active = false;
      TeletextSession.processState.pageDecode[3].active = false;
      TeletextSession.processState.pageDecode[4].active = false;
      TeletextSession.processState.pageDecode[5].active = false;
      TeletextSession.processState.pageDecode[6].active = false;
      TeletextSession.processState.pageDecode[7].active = false;

      *programElementStreamHandle = (int)&TeletextSession;

      VideoStreamOpen = true;
   }

   return err;
}

int parity(char v)
{
   unsigned int a = (unsigned int)v;

   a ^= a >> 4;
   a ^= a >> 2;
   a ^= a >> 1;
   a &= 1;

   return (int)a;
}

static unsigned char unham84(char v)
{
   unsigned char result = 0xFF; /* FF error return value */
   unsigned int val = (unsigned int)v;
   unsigned int a,b,c,d,e;

   a = val ^ val >> 1; /* combine bits 0 & 1 */
   a ^= val >> 5;      /* combine bit 5 */
   a ^= val >> 7;      /* combine bit 7 */
   a &= 1;

   b = val ^ val >> 1; /* combine bits 1 & 2 */
   b ^= val >> 2;      /* combine bit 3 */
   b ^= val >> 6;      /* combine bit 7 */
   b = (b >> 1) & 1;

   c = val ^ val >> 2; /* combine bits 1 & 3 */
   c ^= val >> 3;      /* combine bit 4 */
   c ^= val >> 4;      /* combine bit 5 */
   c = (c >> 1) & 1;

   d = parity(v);

   e = a + 2*b + 4*c;

   result = ((v & 2)>>1) | ((v & 8)>>2) | ((v & 32)>>3) | ((v & 128)>>4);

   if (e != 7)
   {
      if (d)
      { /* double bit error */
         result = 0xFF;
      }
      else
      { /* single bit error */
         switch (e)
         {
            case 0: /* D1 */
               result ^= 1;
               break;
            case 1: /* D2 */
               result ^= 1<<1;
               break;
            case 2: /* D3 */
               result ^= 1<<2;
               break;
            case 4: /* D4 */
               result ^= 1<<3;
               break;
         }
      }
   }

   return result;
}

char bitswap(char a)
{
   unsigned int mask1 = 0x33;
   unsigned int mask2 = 0x55;
   unsigned int c = (unsigned int)a;                       /* ABCDEFGH */
   c = (c >> 4) | c << 4;                                  /* EFGHABCD */
   c = ((c >> 2) & mask1) | ((c & mask1) << 2);            /* GHEFCDAB */
   c = ((c >> 1) & mask2) | ((c & mask2) << 1);            /* HGFEDCBA */
   return (char)c;
}

static bool decode_page_header(char *p, teletext_header *h)
{
   char pageUnits = 0xFF;
   char pageTens = 0xFF;
   unsigned int s1 = 0xFF;
   unsigned int s2 = 0xFF;
   unsigned int s3 = 0xFF;
   unsigned int s4 = 0xFF;
   unsigned int c1 = 0xFF;
   unsigned int c2 = 0xFF;

   pageUnits = unham84(bitswap(p[0]));

   if (pageUnits != 0xFF)
      pageTens = unham84(bitswap(p[1]));

   if (pageTens != 0xFF)
      s1 = unham84(bitswap(p[2]));

   if (s1 != 0xFF)
      s2 = unham84(bitswap(p[3]));

   if (s2 != 0xFF)
      s3 = unham84(bitswap(p[4]));

   if (s3 != 0xFF)
      s4 = unham84(bitswap(p[5]));

   if (s4 != 0xFF)
      c1 = unham84(bitswap(p[6]));

   if (c1 != 0xFF)
      c2 = unham84(bitswap(p[7]));

   if (c2 != 0xFF)
   { /* all the header bytes decoded ok */
      h->page = pageUnits | (pageTens<<4);
      h->subPage = s1 | ((s2 & 7)<<4) | (s3<<8) | ((s4 & 3)<<12);
      h->flags = (s2>>3) | ((s4 & 0xC)>>1) | (c1<<3) | (c2<<7);
      return true;
   }

   return false;
}

static void process_decoded_page(teletext_session *session, decoded_page *page)
{
   decoded_page_list *p = malloc(sizeof(decoded_page_list));

   if (p)
   {
      decoded_page_list **list = &session->backgroundPageList;
      decoded_page_list *l = NULL;

      p->page = *page;
      p->next = NULL;
      p->page.ptsPassed = false;
      p->page.active = true; /* mark the page as new */

      if (page->page == session->primaryPage)
      { /* a new primary page */
         if (!session->primaryPageLocked)
            list = &session->primaryPages;
      }
      else if (!session->otherPagesLocked)
      { /* it may be one of the other requested pages or a left over fetch */
         int i;

         for (i=0;i<session->otherPagesCount;i++)
         {
            if (session->otherPagesToDecode[i] == page->page)
            {
               list = &session->otherPages;
               break;
            }
         }

         if (i==session->otherPagesCount)
         {
            free(p);
            return; /* page number not found so just ignore it */
         }
      }

      l = *list;

      if (l)
      {
         while (l->next) /* find end of list */
            l = l->next;

         l->next = p;
      }
      else
         *list = p;
   }
}

static void process_service_information(teletext_session *session, char *packet)
{
   char designationCode = unham84(bitswap(packet[0]));

   if (designationCode < 4)
   {
      int pageUnits = unham84(bitswap(packet[1]));
      int pageTens = unham84(bitswap(packet[2]));
      int a = unham84(bitswap(packet[3]));
      int b = unham84(bitswap(packet[4]));
      int c = unham84(bitswap(packet[5]));
      int d = unham84(bitswap(packet[6]));

      if (pageUnits != 0xFF &&
          pageTens != 0xFF &&
          a != 0xFF && b != 0xFF &&
          c != 0xFF && d != 0xFF)
      {
         int magazine = (b >> 3) | ((d & 0xC)>>1);
         session->defaultIndexPage = pageUnits | (pageTens << 4) | (magazine << 8);
      }
   }
}

static void update_status(teletext_session *session,
                          char *status,
                          char pts[5],
                          bool outOfOrder,
                          bool serial,
                          int magazineNumber)
{
   if (!session->statusLocked) /* status updates are just dropped if the foreground */
   {                           /* has the lock. Status updates are frequent and non critial */
      bool timeOnly = outOfOrder ||
                      (session->primaryPageFetchState != PPFetch_RememberStartPoint &&
                       session->primaryPageFetchState != PPFetch_WaitingForPage) ||
                      ((session->primaryPage>>8) != magazineNumber && !serial );

      bool changed = true;

      status_update_list *s = session->status;

      if (s)
      {
         while (s->next != NULL) /* find last update in the list */
            s = s->next;

         if (timeOnly)
            /* only update time if it is actually different */
            changed = memcmp(s->status+24,status+24,8) != 0;
         else
            /* update status if the last update is time only or the status is different */
            changed = s->timeOnly || (memcmp(s->status,status,32) != 0);
      }

      if (changed)
      {
         status_update_list *n = malloc(sizeof(status_update_list));

         if (n)
         {
            n->timeOnly = timeOnly;
            n->ptsPassed = false;
            memcpy(n->status,status,32);
            memcpy(n->pts,pts,5);
            n->next = NULL;

            if (s)
               s->next = n;
            else
               session->status = n;
         }
      }
   }
}

static void set_page_available(teletext_session *session, int page)
{
   if ((page & 0x00F) < 0x00A &&
       (page & 0x0F0) < 0x0A0)
   { /* it is a BCD page so record it */
      page = ((page & 0xF00)>>8) * 100 + ((page & 0x0F0)>>4) * 10 + (page & 0x00F); /* convert to decimal */

      session->pageAvailability[page] = 1;
   }
}

static int decode_page_number(char *p, int m)
{
   int result = -1;

   int pageUnits = unham84(bitswap(p[0]));
   int pageTens = unham84(bitswap(p[1]));
   int a = unham84(bitswap(p[3]));
   int b = unham84(bitswap(p[5]));

   if (pageUnits != 0xFF && pageTens != 0xFF && a != 0xFF && b != 0xFF)
   {
      m ^= ((a>>3) | (b & 6));
      result = pageUnits | (pageTens<<4);
      result = (result == 0xFF) ? -1 : result | (m<<8);
   }

   return result;
}

static void process_data_field(teletext_session *session, char *d)
{
   pe_process_state *state = &session->processState;

   char a = unham84(bitswap(d[2]));
   char b = unham84(bitswap(d[3]));

   session->teletextFound = true;

   if (a != 0xFF && b != 0xFF)
   {
      int magazineNumber = a & 7;
      int packetAddress = (a >> 3) | (b << 1);
      char *packet = d+4;
      int m = (state->serialTransmission) ? 0 : magazineNumber;

      if (packetAddress == 0)
      { /* page header */
         teletext_header pageHeader;

         DEBUG_PUTS("Packet 0");

         if (decode_page_header(packet,&pageHeader))
         {

            DEBUG_PUTS("Header OK");

            state->serialTransmission = (pageHeader.flags & (1<<7)) ? true : false;
            /* if in serial mode then treat all pages as if they are in magazine 0 for decoding */
            m = (state->serialTransmission) ? 0 : magazineNumber; /* update incase it has changed */

            if (state->pageDecode[m].active &&
                pageHeader.page != state->pageDecode[m].page)
            { /* page decode completed */
               DEBUG_PUTS("Page decode complete");
               process_decoded_page(session,&state->pageDecode[m]);
               state->pageDecode[m].active = false;
            }

            if (pageHeader.page != 0xFF &&  /* not invalid page number */
                !(pageHeader.flags & (1<<6))) /* and packets 1-28 are valid */
            {
               int fullPage = pageHeader.page + (magazineNumber<<8);
               bool fetch = false;

               DEBUG_PUTS("Page valid");

               set_page_available(session,fullPage);

               if (!(pageHeader.flags & (1<<5)))
               { /* not an out of order page */
                  DEBUG_PUTS("Not out of order");
                  if (session->pageAvailabilityStartPage == PageAvailabilty_WaitingForFirstPage)
                     session->pageAvailabilityStartPage = fullPage;
                  else if (session->pageAvailabilityStartPage == fullPage)
                     session->pageAvailabilityStartPage = PageAvailabilty_TableValid;
               }
#ifdef DEBUG
               fprintf(DebugFile,"Page number = %3.3X\n",fullPage);
#endif
               switch (session->primaryPageFetchState)
               {
                  case PPFetch_RememberStartPoint:
                     if (fullPage == session->primaryPage)
                     { /* shortcut, skipping a state */
                        fetch = true;
                        session->primaryPageFetchState = PPFetch_FetchingSubPages;
                     }
                     else if (!(pageHeader.flags & (1<<5)))
                     {
                        session->primaryPageFetchStartPage = fullPage;
                        session->primaryPageFetchState = PPFetch_WaitingForPage;
                     }
                     break;

                  case PPFetch_WaitingForPage:
                     if (fullPage == session->primaryPage)
                     { /* got the first page */
                        fetch = true;
                        session->primaryPageFetchState = PPFetch_FetchingSubPages;
                     }
                     else
                     { /* check for loop */
                        if (session->primaryPageFetchStartPage == fullPage &&
                            !(pageHeader.flags & (1<<5)))
                        {
                           session->primaryPageFetchState = PPFetch_Failed;
                        }
                     }
                     break;
                  case PPFetch_FetchingSubPages:
                     if (fullPage == session->primaryPage)
                        fetch = true;
                     break;
               }

               if (!fetch && !session->otherPagesLocked)
               { /* not fetching because it's a primary page so check the other pages */
                  int i;

                  for (i=0;i<session->otherPagesCount && !fetch;i++)
                     fetch = session->otherPagesToDecode[i] == fullPage;
               }

               if (fetch)
               {
                  DEBUG_PUTS("Fetching");
                  state->pageDecode[m].active = true;
                  state->pageDecode[m].page = fullPage;
                  state->pageDecode[m].subPage = pageHeader.subPage;
                  state->pageDecode[m].flags = (pageHeader.flags >> 1) & 3;
                  state->pageDecode[m].nationalOptionCharset = (pageHeader.flags >> 8) & 7;
                  state->pageDecode[m].fastTextLinksValid = false;
                  state->pageDecode[m].ignorePacket24 = false;

                  if (pageHeader.flags & (1<<3))
                  { /* page header display data is invalid */
                     memset(state->pageDecode[m].header,' ',32);
                  }
                  else
                  {
                     memcpy(state->pageDecode[m].header,packet+8,32);
                  }
                  memcpy(state->pageDecode[m].pts,state->pts,5);
                  memset(state->pageDecode[m].pageData,' ',sizeof(state->pageDecode[m].pageData)); /* initialise the whole page to spaces */
               }
            }

            if (!(pageHeader.flags & 1<<3))
            { /* page header display data is valid */
               update_status(session,
                             packet+8,
                             state->pts,
                             (pageHeader.flags & 1<<5) ? true : false,
                             state->serialTransmission,
                             magazineNumber);
            }
         }
      }
      else if (packetAddress > 0 && packetAddress < 25)
      { /* normal page data */
         /* if in serial mode then treat all pages as if they are in magazine 0 for decoding */
         int m = (state->serialTransmission) ? 0 : magazineNumber;

         if (    state->pageDecode[m].active
              && ( magazineNumber == state->pageDecode[m].page >> 8)
              && sane( packet )
            )
         {
            memcpy(&state->pageDecode[m].pageData[40*(packetAddress-1)],packet,40);
         }
      }
      else if (packetAddress == 27 && unham84(bitswap(packet[0])) == 0)
      { /* fasttext links */
         char c = unham84(bitswap(packet[37]));
         if (c != 0xFF && !(c & (1<<3)))
            state->pageDecode[m].ignorePacket24 = true;
         state->pageDecode[m].fastTextLinksValid = true;
         state->pageDecode[m].fastTextLinks[0] = decode_page_number(packet+1,magazineNumber);
         state->pageDecode[m].fastTextLinks[1] = decode_page_number(packet+7,magazineNumber);
         state->pageDecode[m].fastTextLinks[2] = decode_page_number(packet+13,magazineNumber);
         state->pageDecode[m].fastTextLinks[3] = decode_page_number(packet+19,magazineNumber);
         state->pageDecode[m].fastTextLinks[4] = decode_page_number(packet+31,magazineNumber); /* NOTE: link 4 is not used */
      }
      else if (packetAddress == 30 && magazineNumber == 0)
      { /* service information */
         process_service_information(session,packet);
      }
   }
}

/* packet - pointer to 40 byte data payload */
/* returns false if contents insane         */
/* Symptoms of insanity:                    */
/*   All 40 bytes zero                      */
static bool sane( char *packet )
{
  char *i;
  bool result = false;

  for( i = packet; i < &packet[40]; i++ )
  {
    if( *i != 0 ) { result = true; break; }
  }

  return result;
}

static void process_pe_packet(teletext_session *session, program_element_packet *p)
{
   pe_process_state *state = &session->processState;
   char *b = p->dataStart;
   char *bEnd = b + p->length;
   static const char zeroPts[5] = { 0,0,0,0,0 };

   if (p->flags & 1)
   { /* start of MPEG packet */
      char dataIdentifier = *b++;

      if (dataIdentifier >= 0x10 &&
          dataIdentifier <= 0x1F)
      {
         state->gotStartPacket = true;
#ifdef DEBUG
         if (p->flags & (1<<2))
            DEBUG_PUTS("PTS valid");
         else
            DEBUG_PUTS("PTS invalid");
#endif
         memcpy(state->pts,(p->flags & (1<<2)) ? p->pts : zeroPts,sizeof(state->pts));
      }
      else
      {
         state->gotStartPacket = false;
      }
   }

   if (state->gotStartPacket)
   {
      while ((bEnd - b) >= 46)
      {
         char dataUnitId = *b++;
         char dataUnitLength = *b++;

         if ((dataUnitId == 0x02 ||
              dataUnitId == 0x03) &&
             dataUnitLength == 0x2c)
         {
            process_data_field(session,b);
         }

         b += dataUnitLength;
      }
   }
}

static void process_background_pages(teletext_session *session)
{
   decoded_page_list **p = &session->backgroundPageList;

   while (*p)
   {
      decoded_page_list **list = NULL;
      decoded_page_list *n = NULL;
      decoded_page_list *t = *p;

      if (t->page.page == session->primaryPage &&
          !session->primaryPageLocked)
      { /* a new primary page */
         list = &session->primaryPages;
         n = *p;
      }
      else if (!session->otherPagesLocked)
      { /* it may be one of the other requested pages or a left over fetch */
         int i;

         for (i=0;i<session->otherPagesCount;i++)
         {
            if (session->otherPagesToDecode[i] == t->page.page)
            {
               list = &session->otherPages;
               n = *p;
               break;
            }
         }

         if (i==session->otherPagesCount)
         { /* page number not found so dispose of it */
            n = *p;
            *p = n->next;
            free(n);
            continue;
         }
      }

      if (n)
      { /* delink this page and link it into the correct list */
         decoded_page_list *l = *list;

         *p = n->next;
         n->next = NULL;

         if (l)
         {
            while (l->next) /* find end of list */
               l = l->next;

            l->next = n;
         }
         else /* still locked so leave the page in place and move on to the next */
            *list = n;
      }
      else
         p = &n->next;
   }
}

_kernel_oserror *peh_data_transfer(unsigned int flags,
                                   unsigned int programElementStreamHandle,
                                   program_element_packet *programElementPacket)
{
   _kernel_oserror *err = NULL;
   teletext_session *session = (teletext_session *)programElementStreamHandle;

   NOT_USED(flags);

   do
   {
      program_element_packet *next = programElementPacket->next;

      if (session->sessionActive) /* only process packets if a session is open */
      {
         if (session->backgroundPageList) /* if some pages have been buffered because the forground had the lock */
            process_background_pages(session); /* then deal with them now */
         process_pe_packet(session,programElementPacket);
      }

      free_program_element_packet(programElementPacket);

      programElementPacket = next;

   } while (programElementPacket != NULL);

   return err;
}

_kernel_oserror *peh_close_stream(unsigned int flags,
                                  unsigned int programElementStreamHandle)
{
   _kernel_oserror *err = NULL;
   teletext_session *session = (teletext_session *)programElementStreamHandle;

   NOT_USED(flags);

   if (session->sessionActive)
      close_session(session);

   VideoStreamOpen = false;

   return err;
}
