#include "module.h"
#include "swihandlers.h"
#include "pehandlers.h"
#include "messages.h"

#include "swis.h"

#include <stdlib.h>
#include <stdio.h>

#define NOT_USED(a) ((a)=(a))

//#define DEBUG

#ifdef DEBUG
FILE *DebugFile = NULL;
#endif

enum
{
   MPEGControl_RegisterProgramElementHandler   = 0x492CA,
   MPEGControl_DeregisterProgramElementHandler = 0x492CB
};

/*
 * Initialisation code
 * ===================
 *
 * Return NULL if your initialisation succeeds; otherwise return a pointer
 * to an error block. cmd_tail points to the string of arguments with which
 * the module is invoked (may be "", and is control-terminated, not zero
 * terminated).
 * podule_base is 0 unless the code has been invoked from a podule.
 * pw is the 'R12' value established by module initialisation. You may
 * assume nothing about its value (in fact it points to some RMA space
 * claimed and used by the module veneers). All you may do is pass it back
 * for your module veneers via an intermediary such as SWI OS_CallEvery
 * (use _swix() to issue the SWI call).
 */
_kernel_oserror *init(const char *cmd_tail, int podule_base, void *pw)
{
   _kernel_oserror *err = NULL;
   extern int messages_file(void);

   NOT_USED(cmd_tail);
   NOT_USED(podule_base);

   err = _swix(ResourceFS_RegisterFiles,_IN(0),messages_file());

   if (!err)
   {
      err = messages_initialise();

      if (!err)
      {
         err = _swix(MPEGControl_RegisterProgramElementHandler,

                     _INR(0,3),

                     0,
                     0x06,
                     program_element_entry,
                     pw);

         if (err)
            messages_final();
      }

      if (err)
         _swix(ResourceFS_DeregisterFiles,_IN(0),messages_file());
   }

#ifdef DEBUG
   if (!err)
   {
      DebugFile = fopen("NFS::NFSBoot.$.IPTeletextDebug","w");
      if (DebugFile)
         setvbuf(DebugFile,NULL,_IONBF,0);
   }
#endif /* DEBUG */

   return err;
}


/*
 * Finalisation code
 * =================
 *
 * Return NULL if your finalisation succeeds. Otherwise return a pointer to
 * an error block if your finalisation handler does not wish to die (e.g.
 * toolbox modules return a 'Task(s) active' error).
 * fatal, podule and pw are the values of R10, R11 and R12 (respectively)
 * on entry to the finalisation code.
 */
_kernel_oserror *finalise(int fatal, int podule, void *pw)
{
   _kernel_oserror *err = NULL;
   extern int messages_file(void);

   NOT_USED(fatal);
   NOT_USED(podule);

   err = _swix(MPEGControl_DeregisterProgramElementHandler,

               _INR(0,3),

               0,
               0x06,
               program_element_entry,
               pw);

   if (!err)
      err = _swix(ResourceFS_DeregisterFiles,_IN(0),messages_file());

#ifdef DEBUG
   if (DebugFile)
   {
      fclose(DebugFile);
      DebugFile = NULL;
   }
#endif /* DEBUG */


   messages_final();

   return err;
}


/*
 * SWI handler code
 * ================
 *
 * swi_offset contains the offset of the SWI into your SWI chunk.
 * r points to the registers passed to the SWI.
 *
 * Return NULL if the SWI is handled successfully; otherwise return
 * a pointer to an error block which describes the error.
 * The veneer code sets the 'V' bit if the returned value is non-NULL.
 * The special value error_BAD_SWI may be returned if you do not
 * implement a SWI; the veneer will arrange for the appropriate
 * standard internationalised error 'SWI value out of range for
 * module IPTeletext' to be returned.
 * The handler may update any of its input registers (R0-R9).
 * pw is the private word pointer ('R12') value passed into the
 * SWI handler entry veneer.
 */
_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
   _kernel_oserror *err = NULL;

   NOT_USED(pw);

   switch (swi_offset)
   {
      case IPTeletext_OpenSession - IPTeletext_00:
         err = swi_open_session(r);
         break;

      case IPTeletext_CloseSession - IPTeletext_00:
         err = swi_close_session(r);
         break;

      case IPTeletext_RequestPage - IPTeletext_00:
         err = swi_request_page(r);
         break;

      case IPTeletext_Status - IPTeletext_00:
         err = swi_status(r);
         break;

      case IPTeletext_ReadPage - IPTeletext_00:
         err = swi_read_page(r);
         break;

      case IPTeletext_PageInfo - IPTeletext_00:
         err = swi_page_info(r);
         break;

      case IPTeletext_ServiceInfo - IPTeletext_00:
         err = swi_service_info(r);
         break;
   }

   return err;
}

/*
 * This is the handler function that the veneer declared above
 * calls.
 *
 * For a standard exit, return NULL. For handlers that can return an
 * error, return an error block pointer, and the veneer will set the
 * 'V' bit, and set R0 to the error pointer.
 *
 * 'r' points to a vector of words containing the values of R0-R9 on
 * entry to the veneer. If r is updated, the updated values will be
 * loaded into R0-R9 on return from the handler.
 *
 * pw is the private word pointer ('R12') value with which the
 * entry veneer is called.
 */
_kernel_oserror *program_element_handler(_kernel_swi_regs *r, void *pw)
{
   _kernel_oserror *err = NULL;

   NOT_USED(pw);

   switch (r->r[0])
   {
      case 0: /* Open stream */
         err = peh_open_stream((unsigned int)r->r[1],(unsigned int)r->r[2],(unsigned int *)&r->r[0]);
         break;

      case 1: /* Data transfer */
         err = peh_data_transfer((unsigned int)r->r[1],(unsigned int)r->r[2],(program_element_packet *)r->r[3]);
         break;

      case 2: /* Close stream */
         err = peh_close_stream((unsigned int)r->r[1],(unsigned int)r->r[2]);
         break;
   }

   return err;
}
