#include "swihandlers.h"
#include "pehandlers.h"
#include "messages.h"
#include "errors.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "stdbool.h"
#include <time.h>

#define NOT_USED(a) ((a)=(a))

//#define DEBUG

#ifdef DEBUG
extern FILE *DebugFile;
#define DEBUG_PUTS(a) fprintf(DebugFile,"%s\n",(a))
#else
#define DEBUG_PUTS(a)
#endif

teletext_session TeletextSession;

/* Return false if the data fails a parity check */
static bool teletext_data_checked_copy( char *dest, char *src, size_t size )
{
   int i;
   char *p;

   for ( p=src, i=size; i!=0; i--)
   {
      if( !parity( *p++ )) return false;
   }

   for ( i=size; i!=0; i--)
   {
      *dest++ = bitswap(*src++);
   }

   return true;
}

static void teletext_data_copy(char *dest, char *src, size_t size)
{
   int i;

   for (i=size;i!=0;i--)
   {
      char a = *src++;

      *dest++ = (parity(a)) ? bitswap(a) & 0x7F : ' ';
   }
}

static _kernel_oserror *open_session(int flags,
                                     int videoControlHandle,

                                     teletext_session **sessionHandleOut)
{
   _kernel_oserror *err = NULL;
   teletext_session *session = &TeletextSession;

   NOT_USED(flags);
   NOT_USED(videoControlHandle);

   if (session->sessionActive)
   {
      err = messages_error_lookup(ErrorNum_SessionActive,"SessionActive");
   }
   else
   {
      session->teletextFound = false;
      session->defaultIndexPage = -1;
      session->defaultSubtitlePage = -1;

      session->primaryPageLocked = false;
      session->primaryPage = -1;
      session->primaryPages = NULL;
      session->primaryPageFetchState = PPFetch_Waiting;

      session->otherPagesLocked = false;
      session->otherPagesCount = 0;
      session->otherPages = NULL;

      session->status = NULL;
      session->statusLocked = false;

      memset(session->pageAvailability,0,sizeof(session->pageAvailability));
      session->pageAvailabilityStartPage = PageAvailabilty_WaitingForFirstPage;

      session->backgroundPageList = NULL;

      *sessionHandleOut = session;

      session->sessionActive = true; /* must be last so we don't have to bother with interlocks */
   }

   return err;
}

/* NOTE: this function is also used by the program element handler */
_kernel_oserror *close_session(teletext_session *session)
{
   _kernel_oserror *err = NULL;
   status_update_list *s;
   decoded_page_list *l;

   if (!session->sessionActive)
   {
      err = messages_error_lookup(ErrorNum_SessionNotActive,"SessionNotActive");
   }
   else
   {
      session->sessionActive = false; /* must be first so we don't have to bother with interlocks */

      l = session->primaryPages;
      while (l)
      {
         decoded_page_list *n = l->next;
         free(l);
         l=n;
      }
      l = session->otherPages;
      while (l)
      {
         decoded_page_list *n = l->next;
         free(l);
         l=n;
      }
      l = session->backgroundPageList;
      while (l)
      {
         decoded_page_list *n = l->next;
         free(l);
         l=n;
      }

      s = session->status;
      while (s)
      {
         status_update_list *n = s->next;
         free(s);
         s=n;
      }
   }

   return err;
}

static _kernel_oserror *multiple_page_request(teletext_session *session,
                                              int flags,
                                              int *pages,
                                              int pageCount)
{
   _kernel_oserror *err = NULL;

   NOT_USED(flags);

   if (!session->sessionActive)
   {
      err = messages_error_lookup(ErrorNum_SessionNotActive,"SessionNotActive");
   }
   else
   {
      if (pageCount > 16)
         err = messages_error_lookup(ErrorNum_TooManyPages,"TooManyPages");
      else if (pageCount > 0)
      {
         int i;

         decoded_page_list **l = &session->otherPages;

         session->otherPagesLocked = true;

         memcpy(session->otherPagesToDecode,pages,sizeof(int)*pageCount);
         session->otherPagesCount = pageCount;

         for (i=0;i<pageCount;i++) /* change magazine number 8 to 0 */
            pages[i] = ((pages[i] & 0xF00) == 0x800) ? pages[i] & 0x0FF : pages[i];

         while (*l) /* discard any pages no longer in the list */
         {
            decoded_page_list *t = *l;

            for (i=0;i<pageCount;i++)
               if (t->page.page == pages[i])
                  break;

            if (i == pageCount)
            {
               *l = t->next;
               free(t);
            }
            else
               l = &t->next;
         }

         session->otherPagesLocked = false;
      }
   }

   return err;
}

static _kernel_oserror *single_page_request(teletext_session *session,
                                            int flags,
                                            int page)
{
   _kernel_oserror *err = NULL;

   NOT_USED(flags);

   if (!session->sessionActive)
   {
      err = messages_error_lookup(ErrorNum_SessionNotActive,"SessionNotActive");
   }
   else
   {
      if ((page & 0xF00) == 0x800) /* if the magazine number is 8 */
         page &= 0x0FF;            /* then change it to 0 */

      if (session->primaryPage != page)
      {
         decoded_page_list **l;

         session->primaryPageLocked = true;

         session->primaryPage = page;
         session->primaryPageFetchState = PPFetch_RememberStartPoint;

         /* Move the primary pages into the other pages list
            they will stay there until the next call to status which
            will discard all but the last page and any where the PTS
            hasn't been reached.

            This is done because you probably want the previous page
            to remain available. And if you don't the next call to
            multiple_page_request will discard it anyway. */

         session->otherPagesLocked = true;

         l = &session->otherPages;
         while (*l)
            l = &l[0]->next;

         *l = session->primaryPages;

         session->primaryPages = NULL;

         {
            /* Now check if the new primary page is one of the other
               pages being fetched. If so move any of those pages to
               the primary page list */

            decoded_page_list **s = &session->primaryPages;

            l = &session->otherPages;

            while (*l)
            {
               decoded_page_list *t = *l;

               if (t->page.page == page) /* if the page in the list matches the new primary page */
               {
                  *l = t->next; /* delink from list */
                  t->next = NULL;
                  t->page.active = true; /* mark as new */
                  *s = t;
                  s = &t->next;
               }
               else
                  l = &t->next;
            }
         }

         session->otherPagesLocked = false;

         session->primaryPageLocked = false;
      }
   }

   return err;
}

static void read_current_pts(char pts[5])
{
   unsigned int lo = 0;
   unsigned int hi = 0;

   if (_swix(0x49307,_IN(0)|_OUTR(1,2),3,&lo,&hi) != 0) /* MPEGVideo_ReadParemters 3 */
      lo = hi = 0;

   *(unsigned int *)pts = lo;
   pts[4] = (char)hi;
}

static int compare_pts(char a[5], char b[5])
{
#ifdef DEBUG
   fprintf(DebugFile,"Compare pts &%2.2X%8.8X with &%2.2X%8.8X\n",(int)a[4],*(unsigned int *)a,(int)b[4],*(unsigned int *)b);
#endif
   return (a[4] == 0 && (*(unsigned int *)a) == 0) ? 0 : (a[4] == b[4]) ? (int)((*(unsigned int *)a) - (*(unsigned int *)b)) : (int)(a[4] - b[4]);
}

static void check_pts_remove_duplicates(decoded_page_list **list, char currentPts[5])
{ /* check if pts has passed and remove duplicates from the page list. */
   decoded_page_list *passedList = NULL;
   decoded_page_list *notPassedList = NULL;
   decoded_page_list **notPassedListNextPtr = &notPassedList;

   decoded_page_list *l = *list;

   decoded_page_list *finalList = NULL;

   while (l)
   {
      decoded_page_list *n = l->next;

      if (l->page.ptsPassed || compare_pts(currentPts,l->page.pts) >= 0)
      {
         l->page.ptsPassed = true;
         l->next = passedList;
         passedList = l;
      }
      else
      {
         l->next = NULL;
         *notPassedListNextPtr = l;
         notPassedListNextPtr = &l->next;
      }

      l = n;
   }

   /* passedList points to a *reversed* list of pages that have passed their pts */
   /* notPassedList points to a *non reversed* list of pages that have not passed their pts */

   while (passedList)
   {
      decoded_page_list *n = passedList->next;
      bool duplicate = false;

      l = finalList;

      while (l && !duplicate)
      {
         duplicate = l->page.page == passedList->page.page;
         l = l->next;
      }

      if (duplicate)
         free(passedList);
      else
      {
         passedList->next = finalList;
         finalList = passedList;
      }

      passedList = n;
   }

   /* finalList now contains the pages that have passed their PTS, back in the right order
      with duplicates removed */

   if (finalList)
   {
      l = finalList;
      while (l->next)
         l = l->next;
      l->next = notPassedList;
   }
   else
      finalList = notPassedList;

   *list = finalList;
}

static _kernel_oserror *status(teletext_session *session,
                               int flags,
                               char *displayBuffer,

                               int *statusOut)
{
   _kernel_oserror *err = NULL;
   int s = Status_Waiting;

   NOT_USED(flags);

   if (!session->sessionActive)
   { /* the session has been closed */
      s = Status_SessionClosed;
   }
   else
   {
      char currentPts[5];
      read_current_pts(currentPts);

      if (session->primaryPages)
      { /* check for PTS passing and remove duplicate pages */
         session->primaryPageLocked = true;
         check_pts_remove_duplicates(&session->primaryPages,currentPts);
         session->primaryPageLocked = false;
      }

      if (session->otherPages)
      { /* check for PTS passing and remove duplicate pages */
         session->otherPagesLocked = true;
         check_pts_remove_duplicates(&session->otherPages,currentPts);
         session->otherPagesLocked = false;
      }

      if (session->status)
      { /* check for PTS passing and keep just those that have not passed and one that has */
         status_update_list *statusUpdate = NULL;
         status_update_list **l;

         session->statusLocked = true;

         l = &session->status;
         while (*l)
         {
            status_update_list *t = *l;

            if (compare_pts(currentPts,t->pts) >= 0)
            {
               if (statusUpdate)
               {
                  if (t->timeOnly && !statusUpdate->timeOnly)
                  { /* if we are discarding a status update then check if the new update
                       is only a time update and if so copy the rest of the status line
                       from the update we are discarding */
                     memcpy(t->status,statusUpdate->status,32-8);
                     t->timeOnly = false;
                  }
                  free(statusUpdate); /* free any previous status update found */
               }
               statusUpdate = t;
               *l = t->next;
            }
            else
               l = &t->next;
         }

         if (statusUpdate)
         { /* if there is a status update then put it at the front of the list */
            statusUpdate->next = session->status;
            statusUpdate->ptsPassed = true;
            session->status = statusUpdate;
         }

         session->statusLocked = false;
      }

      if (session->primaryPageFetchState == PPFetch_Failed)
      { /* primary page fetch has failed */
         s = Status_PageFetchFailed;
         session->primaryPageFetchState = PPFetch_RememberStartPoint; /* start fetching again */
      }
      else
      { /* check if a new page is available */
         decoded_page_list *p;

         session->primaryPageLocked = true;

         p = session->primaryPages;

         while (p && !p->page.ptsPassed)
            p = p->next;

         if (p && p->page.ptsPassed && p->page.active)
         { /* there is a page ready */
            DEBUG_PUTS("New page available");
            s = Status_PageFetchComplete;
            session->primaryPageFetchState = PPFetch_FetchingSubPages; /* make sure status line updates stop */
         }

         session->primaryPageLocked = false;
      }

      if (s == Status_Waiting)
      { /* still not found anything to return, so check for status line updates */
         session->statusLocked = true;

         if (session->status && session->status->ptsPassed)
         {
            status_update_list *n = session->status->next;

            if (session->status->timeOnly)
            {
               DEBUG_PUTS("Time update");
               if( teletext_data_checked_copy( displayBuffer+24, session->status->status+24,8))
               {
                 s = Status_TimeUpdate;
               }
            }
            else
            {
               DEBUG_PUTS("Status update");
               if( teletext_data_checked_copy(displayBuffer,session->status->status,32) )
               {
                 s = Status_StatusLineUpdate;
               }  
            }

            free(session->status);
            session->status = n;
         }

         session->statusLocked = false;
      }
   }

   *statusOut = s;

   return err;
}

static _kernel_oserror *read_page(teletext_session *session,
                                  char *pageBuffer,

                                  int *sizeOut)
{
   _kernel_oserror *err = NULL;

   DEBUG_PUTS(">read_page()");

   if (!session->sessionActive)
   {
      err = messages_error_lookup(ErrorNum_SessionNotActive,"SessionNotActive");
   }
   else
   {
      decoded_page_list **p;
      bool found = false;

      session->primaryPageLocked = true;

      p = &session->primaryPages;

      while (*p && !found)
      {
         decoded_page_list *t = *p;

         if (t->page.ptsPassed)
         {
            found = true;

            if (pageBuffer)
            {
               int *b = (int*)pageBuffer;
               int i;

               *b++ = 0;
               *b++ = 960 + 4 + 24;
               *b++ = t->page.flags;
               teletext_data_copy((char *)b,t->page.header,24);
               b += 24/sizeof(int);
               teletext_data_copy((char *)b,t->page.pageData,920);
               b += 920/sizeof(int);
               if (t->page.ignorePacket24)
                  memset(b,' ',40);
               else
                  teletext_data_copy((char *)b,t->page.pageData+920,40);
               b += 40/sizeof(int);

               *b++ = 1;
               *b++ = 4;
               *b++ = t->page.nationalOptionCharset;

               if (t->page.fastTextLinksValid)
               {
                  DEBUG_PUTS("Returning fasttext links");
                  *b++ = 2;
                  *b++ = 20;
                  for (i=0;i<5;i++)
                     *b++ =  ((t->page.fastTextLinks[i] & 0xF00) == 0x000) ? t->page.fastTextLinks[i] | 0x800 : t->page.fastTextLinks[i];
               }

               t->page.active = false; /* mark as old */
            }
            else
            {
               *sizeOut = 8 + 4 + 24 + 960 + 8 + 4;
               if (t->page.fastTextLinksValid)
                  *sizeOut += 8 + 20;
            }
         }
         else
            p = &t->next;
      }

      session->primaryPageLocked = false;

      if (!found)
         err = messages_error_lookup(ErrorNum_PageNotReady,"PageNotReady");
   }

   DEBUG_PUTS("<read_page()");

   return err;
}

static _kernel_oserror *page_info(teletext_session *session,
                                  int reasonCode,
                                  int page,

                                  int *pageOut)
{
   _kernel_oserror *err = NULL;

   if (!session->sessionActive)
   {
      err = messages_error_lookup(ErrorNum_SessionNotActive,"SessionNotActive");
   }
   else
   {
      int m = (page & 0xF00) >> 8;
      int t = (page & 0x0F0) >> 4;
      int u = page & 0x00F;

      m = (m == 8) ? 0 : (m < 8) ? m : 7; /* magazine 8 becomes 0 and round down any silly magazine numbers */
      t = (t > 9) ? 9 : t; /* round down to decimal */
      u = (u > 9) ? 9 : u; /* round down to decimal */

      page = m * 100 + t * 10 + u;

      switch (reasonCode)
      {
         case 0: /* check page availabilty */
            *pageOut = (int) session->pageAvailability[page];
            break;

         case 1: /* return next page down */
            if (session->pageAvailabilityStartPage == PageAvailabilty_TableValid)
            {
               int i = page-1;
               bool found = false;

               while (!found && i >= 0)
               {
                  if (session->pageAvailability[i])
                     found = true;
                  else
                     i--;
               }

               if (!found)
               {
                  i = 799;

                  while (!found && i >= page) /* include the current page in the test */
                  {
                     if (session->pageAvailability[i])
                        found = true;
                     else
                        i--;
                  }
               }

               if (found)
               { /* convert back to BCD */
                  m = i/100;
                  t = (i/10) % 10;
                  u = i % 10;

                  m = (m==0) ? 8 : m;

                  i = 0x100*m + 0x10*t + u;
               }
               else
                  i = -1;

               *pageOut = i;
            }
            else
               *pageOut = -1;

            break;

         case 2: /* return next page up */
            if (session->pageAvailabilityStartPage == PageAvailabilty_TableValid)
            {
               int i = page+1;
               bool found = false;

               while (!found && i < 799)
               {
                  if (session->pageAvailability[i])
                     found = true;
                  else
                     i++;
               }

               if (!found)
               {
                  i = 0;

                  while (!found && i <= page) /* include the current page in the test */
                  {
                     if (session->pageAvailability[i])
                        found = true;
                     else
                        i++;
                  }
               }

               if (found)
               { /* convert back to BCD */
                  m = i/100;
                  t = (i/10) % 10;
                  u = i % 10;

                  m = (m==0) ? 8 : m;

                  i = 0x100*m + 0x10*t + u;
               }
               else
                  i = -1;

               *pageOut = i;
            }
            else
               *pageOut = -1;

            break;

         default:
            err = messages_error_lookup(ErrorNum_InvalidReasonCode,"InvalidReasonCode");
      }
   }

   return err;
}

static _kernel_oserror *service_info(teletext_session *session,

                                     int *flagsOut,
                                     int *defaultIndexOut,
                                     int *defaultSubtitleOut)
{
   _kernel_oserror *err = NULL;

   if (!session->sessionActive)
   {
      err = messages_error_lookup(ErrorNum_SessionNotActive,"SessionNotActive");
   }
   else
   {
      int flags = 0;

      if (VideoStreamOpen)
         flags |= 1;

      if (session->teletextFound)
         flags |= 1<<1;

      if (session->defaultIndexPage != -1)
      {
         flags |= 1<<2;
         *defaultIndexOut = ((session->defaultIndexPage & 0xF00) == 0x000) ?
                               session->defaultIndexPage | 0x800 :
                               session->defaultIndexPage;
      }

      if (session->defaultSubtitlePage != -1)
      {
         flags |= 1<<3;
         *defaultSubtitleOut = ((session->defaultSubtitlePage & 0xF00) == 0x000) ?
                               session->defaultSubtitlePage | 0x800 :
                               session->defaultSubtitlePage;
      }

      if (session->pageAvailabilityStartPage == PageAvailabilty_TableValid)
         flags |= 1<<4;

      *flagsOut = flags;
   }

   return err;
}

_kernel_oserror *swi_open_session(_kernel_swi_regs *r)
{
   return open_session(r->r[0],
                       r->r[1],

                       (teletext_session **)&r->r[0]);
}

_kernel_oserror *swi_close_session(_kernel_swi_regs *r)
{
   return close_session((teletext_session *)r->r[0]);
}

_kernel_oserror *swi_request_page(_kernel_swi_regs *r)
{
   if (r->r[1] & 1)
   { /* request multiple pages */
      return multiple_page_request((teletext_session *)r->r[0],
                                   r->r[1],
                                   (int *)r->r[2],
                                   r->r[3]);
   }
   else
   { /* request a single page */
      return single_page_request((teletext_session *)r->r[0],
                                 r->r[1],
                                 r->r[2]);
   }
}

_kernel_oserror *swi_status(_kernel_swi_regs *r)
{
   return status((teletext_session *)r->r[0],
                 r->r[1],
                 (char *)r->r[2],

                 &r->r[1]);
}

_kernel_oserror *swi_read_page(_kernel_swi_regs *r)
{
   return read_page((teletext_session *)r->r[0],
                    (char *)r->r[1],

                    &r->r[1]);
}

_kernel_oserror *swi_page_info(_kernel_swi_regs *r)
{
   return page_info((teletext_session *)r->r[0],
                    r->r[1],
                    r->r[2],

                    &r->r[2]);
}

_kernel_oserror *swi_service_info(_kernel_swi_regs *r)
{
   return service_info((teletext_session *)r->r[0],

                       &r->r[1],
                       &r->r[2],
                       &r->r[3]);
}
