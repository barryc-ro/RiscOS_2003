#ifndef SWIHANDLERS_H
#define SWIHANDLERS_H

#include "pehandlers.h"

#include "kernel.h"
#include "stdbool.h"

typedef enum
{
   PPFetch_Waiting,            /* doing nothing */
   PPFetch_RememberStartPoint, /* record the next page number we see so we can see a loop */
   PPFetch_WaitingForPage,     /* waiting for the first version of the page to appear */
   PPFetch_FetchingSubPages,   /* fetching any subpages for the primary page */
   PPFetch_Failed              /* we've looped and not seen the page */
} ppfetch_state;

typedef struct decoded_page_list
{
   struct decoded_page_list *next;
   decoded_page page;
} decoded_page_list;

typedef struct status_update_list
{
   struct status_update_list *next;
   bool timeOnly;
   char status[32];
   char pts[5];
   bool ptsPassed;
} status_update_list;

typedef struct teletext_session
{
   bool sessionActive;             /* true if this session is active */
   bool teletextFound;
   pe_process_state processState;  /* state of the page fetching system */

   int defaultIndexPage;
   int defaultSubtitlePage;

   volatile bool primaryPageLocked;
   int primaryPage;                /* the primary page being fetched */
   decoded_page_list *primaryPages; /* subpages of the primary page */
   ppfetch_state primaryPageFetchState;
   int primaryPageFetchStartPage;  /* the first page we see after starting to fetch a page */

   volatile bool otherPagesLocked;
   int otherPagesCount;
   int otherPagesToDecode[16];
   decoded_page_list *otherPages;

   status_update_list *status;
   volatile bool statusLocked;

   char pageAvailability[800];     /* 800 bytes indicating if pages are available */
   int pageAvailabilityStartPage;  /* page number used to detect when all pages have been seen */

   decoded_page_list *backgroundPageList;
} teletext_session;

enum
{
   PageAvailabilty_WaitingForFirstPage = -1,
   PageAvailabilty_TableValid = -2
};

enum
{
   Status_Waiting = 0,
   Status_StatusLineUpdate,
   Status_TimeUpdate,
   Status_PageFetchComplete,
   Status_PageFetchFailed,
   Status_SessionClosed
};

extern teletext_session TeletextSession;

_kernel_oserror *swi_open_session(_kernel_swi_regs *r);
_kernel_oserror *swi_close_session(_kernel_swi_regs *r);
_kernel_oserror *swi_request_page(_kernel_swi_regs *r);
_kernel_oserror *swi_status(_kernel_swi_regs *r);
_kernel_oserror *swi_read_page(_kernel_swi_regs *r);
_kernel_oserror *swi_page_info(_kernel_swi_regs *r);
_kernel_oserror *swi_service_info(_kernel_swi_regs *r);

_kernel_oserror *close_session(teletext_session *sessionHandle);

#endif /* SWIHANDLERS_H */
