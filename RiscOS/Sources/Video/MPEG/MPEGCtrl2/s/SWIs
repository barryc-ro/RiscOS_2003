SWIHandler
        LDR     R12, [R12]
        TEQ     R11, #MPEGControl_ControlOp - MPEGControlSWI_Base
        BEQ     SWIMPEGControl_ControlOp

        Push    "R14"
        TEQ     R11, #MPEGControl_RegisterProgramElementHandler - MPEGControlSWI_Base
        TEQNE   R11, #MPEGControl_DeregisterProgramElementHandler - MPEGControlSWI_Base
        MOVEQ   R14, #1                 ; those two SWIs always sent to MPEGTransport
        LDRNE   R14, DemuxModule
        CMP     R14, #0                 ; also clears V
        BMI     err_no_module_selected
    [ JumpDirect
        LDREQ   R14, MPEGSystem_Base
        LDRNE   R14, MPEGTransport_Base
        ADREQ   R10, MPEGSystem_PW
        ADRNE   R10, MPEGTransport_PW
        TEQ     R14, #0                 ;; should only happen if (de)register PEH SWIs
        BEQ     err_cant_register_peh   ;; are called while MPEGTransport is dead
        MOV     R12, R10                ; don't need our own wsptr any more
        LDR     R10, [R14, #Module_SWIEntry]
        ADD     R10, R14, R10           ; convert from offset into address
        MOV     R14, PC                 ; V still clear from CMP, PC is 8 bytes ahead
        MOV     PC, R10                 ; call the SWI handler
        Pull    "PC", VC, ^
        Pull    "R14"
        ORRS    PC, R14, #V_bit
    |
        LDREQ   R10, = MPEGSystemSWI_Base :OR: Auto_Error_SWI_bit
        LDRNE   R10, = MPEGTransportSWI_Base :OR: Auto_Error_SWI_bit
        ORR     R10, R10, R11           ; this is now the equivalent SWI number
      [ StrongARM
        SWI     XOS_CallASWI
      |
        ORR     R10, R10, #&EF000000    ; construct opcode (SWIAL)
        STR     R10, JumpCode
        ADD     PC, R12, #:INDEX:JumpCode
      ]
    ]

err_no_module_selected
        ThrowError  NoModuleSelected
        Pull    "R14"
        ORRS    PC, R14, #V_bit
        MakeErrorBlock  NoModuleSelected

err_cant_register_peh
        ThrowError  DeadModule  ; error block is defined below
        Pull    "R14"
        ORRS    PC, R14, #V_bit


int_control_op
; Mirrors effect of SWI, but for internal use
        BIC     R14, R14, #V_bit
        ; drop through...

SWIMPEGControl_ControlOp
; Reason codes
; ------------
; R0 = 0:  Set demux module according to R1, return old demux module in R1
; R0 = 1:  Return current demux module in R1
; R0 = 2:  Register demux module number R1 with base R2 and private word R3
; R0 = 3:  Deregister demux module number R1
        Entry   "R0-R1"
        CMP     R0, #3
        ADDLS   PC, PC, R0, LSL #2      ; PC operand was 8 bytes ahead
        B       err_invalid_reason
        B       control_op_0
        B       control_op_1
        B       control_op_2

control_op_3
        CMP     R1, #1
        BHI     err_invalid_module
        LDR     R14, DemuxModule
        TEQ     R14, R1                 ; if we were using it
        MOVEQ   R14, #-1
        STREQ   R14, DemuxModule        ; then set no selected demux module
        MOV     R0, #0
        ADR     R14, MPEGSystem_Base
        ASSERT  MPEGTransport_Base = MPEGSystem_Base + 4
        STR     R0, [R14, R1, LSL #2]   ; mark not alive
        EXITS

control_op_2
        CMP     R1, #1
        BHI     err_invalid_module
        ADR     R14, MPEGSystem_Base
        ASSERT  MPEGTransport_Base = MPEGSystem_Base + 4
        STR     R2, [R14, R1, LSL #2]
        ADR     R14, MPEGSystem_PW
        ASSERT  MPEGTransport_PW = MPEGSystem_PW + 4
        STR     R3, [R14, R1, LSL #2]
        EXITS

control_op_1
        LDR     R1, DemuxModule
        STR     R1, [sp, #1*4]          ; return demux module in R1
        EXITS

control_op_0
        CMP     R1, #1
        BHI     err_invalid_module
        LDRLO   R14, MPEGSystem_Base
        LDREQ   R14, MPEGTransport_Base
        TEQ     R14, #0
        BEQ     err_dead_module
        LDR     R0, DemuxModule
        STR     R1, DemuxModule
        STR     R0, [sp, #1*4]          ; return old demux module in R1
        EXITS

err_invalid_reason
        ThrowError  BadReason
        STR     R0, [sp]
        EXIT
        MakeErrorBlock  BadReason

err_invalid_module
        ThrowError  BadModule
        STR     R0, [sp]
        EXIT
        MakeErrorBlock  BadModule

err_dead_module
        ThrowError  DeadModule
        STR     R0, [sp]
        EXIT
        MakeErrorBlock  DeadModule

        END
