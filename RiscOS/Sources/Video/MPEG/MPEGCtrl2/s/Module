; Standard module structures and maintenance

Module_BaseAddr

        DCD     0 ; Start code
        DCD     Initialise      - Module_BaseAddr
        DCD     Finalise        - Module_BaseAddr
        DCD     0; Service         - Module_BaseAddr
        DCD     Title           - Module_BaseAddr
        DCD     Help            - Module_BaseAddr
        DCD     CommandTable    - Module_BaseAddr
        DCD     MPEGControlSWI_Base
        DCD     SWIHandler      - Module_BaseAddr
        DCD     SWITable        - Module_BaseAddr
        DCD     0 ; SWI decode code
        [ International_Help <> 0
        DCD     MessagesFile    - Module_BaseAddr
        ]

Help
        =       "MPEGControl", 9, "$Module_MajorVersion ($Module_Date)"
        [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
        ]
        =       0

Title
SWITable
        =       "MPEGControl", 0
        =       "OpenStream", 0
        =       "FullBuffers", 0
        =       "CloseStream", 0
        =       "Play", 0
        =       "SetSpeed", 0
	=	"ResetStream", 0
	=	"MuteSound", 0
	=	"SoundVolume", 0
	=	"SelectProgram", 0
	=	"Stats", 0
	=	"RegisterProgramElementHandler", 0
	=	"DeregisterProgramElementHandler", 0
	=	"SetAudioParameters", 0
	=       "ControlOp", 0
        =       0
        ALIGN

CommandTable
        Command CtrlInfo,       0, 0, International_Help
        Command CtrlDebugOn,    0, 0, International_Help
        Command CtrlDebugOff,   0, 0, International_Help
        Command LoadMPEGCtrl,   0, 0, International_Help
        Command LoadMPEGTrans,  0, 0, International_Help
        =       0

      [ International_Help = 0
CtrlInfo_Help           =       "*CtrlInfo outputs debugging info.", CR
CtrlInfo_Syntax         =       "Syntax: *CtrlInfo", 0

CtrlDebugOn_Help        =       "*CtrlDebugOn enables continuous debugging output.", CR
CtrlDebugOn_Syntax      =       "Syntax: *CtrlDebugOn", 0

CtrlDebugOff_Help       =       "*CtrlDebugOff disables continuous debugging output.", CR
CtrlDebugOff_Syntax     =       "Syntax: *CtrlDebugOff", 0

LoadMPEGCtrl_Help       =       "*LoadMPEGCtrl selects MPEGSystem to handle "
                                "MPEGControl SWIs and * commands. This command is "
                                "deprecated.", CR
LoadMPEGCtrl_Syntax     =       "Syntax: *LoadMPEGCtrl", 0

LoadMPEGTrans_Help      =       "*LoadMPEGTrans selects MPEGTransport to handle "
                                "MPEGControl SWIs and * commands. This command is "
                                "deprecated.", CR
LoadMPEGTrans_Syntax    =       "Syntax: *LoadMPEGTrans", 0
      |
CtrlInfo_Help           =       "HMPCINF", 0
CtrlInfo_Syntax         =       "SMPCINF", 0

CtrlDebugOn_Help        =       "HMPCDON", 0
CtrlDebugOn_Syntax      =       "SMPCDON", 0

CtrlDebugOff_Help       =       "HMPCDOF", 0
CtrlDebugOff_Syntax     =       "SMPCDOF", 0

LoadMPEGCtrl_Help       =       "HMPCLMC", 0
LoadMPEGCtrl_Syntax     =       "SMPCLMC", 0

LoadMPEGTrans_Help      =       "HMPCLMT", 0
LoadMPEGTrans_Syntax    =       "SMPCLMT", 0
      ]
        ALIGN

MessagesFile
        =       "Resources:$.Resources.MPEGCtrl.Messages", 0
        ALIGN

      [ Standalone
ResourceFSFiles
        ResourceFile    Messages, Resources.MPEGCtrl.Messages
        DCD     0
      ]

        MACRO
$label  ThrowError  $block, $cond, $l
$label  ADR$cond$l  R0, ErrorBlock_$block
        BL$cond     ErrorLookup
        MEND

ErrorLookup
; Entry: R0 -> error block
; Exit:  R0 -> detokenised error block
;        V set
        Entry   "R1-R7"
        ADR     R1, MessagesBlock       ; message file assumed open
        MOV     R2, #0                  ; use internal block
        MOV     R4, #0                  ; no parameters
        MOV     R5, #0
        MOV     R6, #0
        MOV     R7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT


Initialise
        ROUT
        Push    "R14"
        LDR     R0, [R12]
        TEQ     R0, #0
        BNE     %FT01
        ; Claim workspace
        MOV     R0, #ModHandReason_Claim
        MOV     R3, #workspacesize
        SWI     XOS_Module
        BVS     abort_init_no_messages
        STR     R2, [R12]
01      LDR     R12, [R12]

      [ Standalone
        ; Register messages file in ResourceFS
        ADRL    R0, ResourceFSFiles
        SWI     XResourceFS_RegisterFiles
        BVS     abort_init_no_messages
        ; Open messages file
        ADR     R0, MessagesBlock
        ADRL    R1, MessagesFile
        MOV     R2, #0
        SWI     XMessageTrans_OpenFile
        BVS     abort_init_messages_registered
      |
        ; Open messages file
        ADR     R0, MessagesBlock
        ADRL    R1, MessagesFile
        MOV     R2, #0
        SWI     XMessageTrans_OpenFile
        BVS     abort_init_no_messages
      ]

        BL      create_variables
        BVS     abort_init_messages_open

        BL      scan_modules            ; can't return an error

        MOV     R14, #-1
        STR     R14, DemuxModule        ; mark as unintialised

      [ StrongARM :LOR: JumpDirect
        Pull    "PC",, ^

      |
        ; Set up dynamic SWI-calling code return
        ADR     R0, return_opcodes
        LDMIA   R0, {R1-R3}
        ADR     R0, JumpCode + 4
        STMIA   R0, {R1-R3}
        Pull    "PC",, ^

return_opcodes
        Pull    "PC", VC, ^
        Pull    "R14"
        ORRS    PC, R14, #V_bit
      ]

abort_init_variable_created
        Push    "R0"
        BL      delete_variables
        B       %FT99
abort_init_messages_open
        Push    "R0"
99      ADR     R0, MessagesBlock
        SWI     XMessageTrans_CloseFile
        B       %FT99
      [ Standalone
abort_init_messages_registered
        Push    "R0"
99      ADRL    R0, ResourceFSFiles
        SWI     XResourceFS_DeregisterFiles
        B       %FT99
      ]
abort_init_no_messages
        Push    "R0"
99
        Pull    "R0,R14"
        ORRS    PC, R14, #V_bit


Finalise
        Entry
        LDR     R12, [R12]
        BL      delete_variables
        ADR     R0, MessagesBlock
        SWI     XMessageTrans_CloseFile
      [ Standalone
        ADRL    R0, ResourceFSFiles
        SWI     XResourceFS_DeregisterFiles
      ]
        EXITS


      [ {FALSE}
; Don't need to handle Service_MPEGControlStarting now that we have ControlOp 2/3
; The service call handler code is still here to make life easier if we *do* have to
; handle service calls in future. :-)

        DCD     ServiceTable - Module_BaseAddr
Service MOV     R0, R0
        TEQ     R1, #Service_MPEGControlStarting
        MOVNES  PC, R14
ServiceCode
        LDR     R12, [R12]
        TEQ     R1, #Service_MPEGControlStarting
        BEQ     service_mpegcontrolstarting
        MOVS    PC, R14
ServiceTable
        DCD     0  ; flags
        DCD     ServiceCode - Module_BaseAddr
        DCD     Service_MPEGControlStarting     ; &C7  (table must be in numerical order)
        DCD     0 ; terminator

service_mpegcontrolstarting
        Entry
        BL      scan_modules
        EXITS

      ]

scan_modules
; Scans through module list, to determine which
; (if any) demux modules are present and alive
        Entry   "R0-R7"
        MOV     R14, #0                         ;
        STR     R14, MPEGSystem_Base            ; initially mark both modules as absent
        STR     R14, MPEGTransport_Base         ;
        LDR     R6, = MPEGSystemSWI_Base          ; for comparison
        LDR     R7, = MPEGTransportSWI_Base       ;
        MOV     R0, #ModHandReason_GetNames
        MOV     R1, #0
        MOV     R2, #0
01      SWI     XOS_Module
        EXITS   VS
        LDR     R14, [R3, #Module_SWIChunk]
        TEQ     R14, R6
        TEQNE   R14, R7
        BNE     %BT01
        TEQ     R14, R6
        STREQ   R3, MPEGSystem_Base
        STRNE   R3, MPEGTransport_Base
        STREQ   R4, MPEGSystem_PW
        STRNE   R4, MPEGTransport_PW
        B       %BT01

        END
