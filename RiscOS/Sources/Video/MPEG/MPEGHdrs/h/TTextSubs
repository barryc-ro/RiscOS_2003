#if !defined(TTEXTSUBS_H) /* file used if not already included */
#define TTEXTSUBS_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Structures and constants for the Message_TTextAndSubs family
*          in the style of the Toolbox's wimp.h
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/

#include "tboxlibs/wimp.h"



/*****************************************************************************
* Message numbers
*****************************************************************************/

#define Wimp_MTTextAndSubsOn            0x55a00
#define Wimp_MTTextAndSubsOnAck         0x55a01
#define Wimp_MTTextAndSubsOff           0x55a02
#define Wimp_MTTextAndSubsOffAck        0x55a03



/*****************************************************************************
* The following are definitions of structures used to send and
* receive Wimp Messages
*****************************************************************************/

/* Wimp_MTTextAndSubsOn */

typedef struct
{
  unsigned int flags;
  unsigned int videoctrl_client_handle;
  BBox         bbox;
  char         iso639lang[4];
  union
  {
    struct
    {
      enum
      {
        same_page     = 0,
        teletext_type = 1,
        page_number   = 2
      } scheme;
      union
      {
        unsigned teletext_type: 5;
        unsigned page_number:   11;
      } data;
    } teletext;
    enum
    {
      ebu_teletext_subtitles        = 0,
      dvb_subtitles_normal          = 1,
      dvb_subtitles_hard_of_hearing = 2,
      atsc_dtvcc_normal             = 3,
      atsc_dtvcc_easy_reader        = 4
    } subtitles;
  } select;
} WimpTTextAndSubsOnMessage;

/* Flags for the above */

#define Wimp_MTTextAndSubsOn_ReasonCodeMask             0x0ff
#define Wimp_MTTextAndSubsOn_ReasonCode_Teletext        0x000
#define Wimp_MTTextAndSubsOn_ReasonCode_Subtitles       0x001
#define Wimp_MTTextAndSubsOn_Windowed                   0x100
#define Wimp_MTTextAndSubsOn_OverlayVideo               0x200



/* Wimp_MTTextAndSubsOnAck */

typedef struct
{
  unsigned int flags;
  unsigned int videoctrl_client_handle;
  unsigned int errnum;
  char         errmess[224];
} WimpTTextAndSubsOnAckMessage;

/* Flags for the above */

#define Wimp_MTTextAndSubsOnAck_ErrorFlag               0x001
#define Wimp_MTTextAndSubsOnAck_ServiceExited           0x002



/* Wimp_MTTextAndSubsOff */
/* Wimp_MTTextAndSubsOffAck */

typedef struct
{
  unsigned int flags;
  unsigned int videoctrl_client_handle;
} WimpTTextAndSubsOffMessage,
  WimpTTextAndSubsOffAckMessage;




#endif
