#if !defined(MPEG_MPEGTIME_H) /* file used if not already included */
#define MPEG_MPEGTIME_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: 33-bit arithmetic
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdbool.h>
#include <stdint.h>


/*****************************************************************************
* MACROS
*****************************************************************************/
#ifdef __STDC_VERSION__
#if __STDC_VERSION__ >= 199901L
#define MPEG_MPEGTIME_H_UINT64_AVAILABLE
#endif
#endif


/*****************************************************************************
* New type definitions
*****************************************************************************/
typedef union
{
#ifdef MPEG_MPEGTIME_H_UINT64_AVAILABLE
  uint64_t dword;
#endif
  struct
  {
    uint32_t lo;
    uint32_t hi: 1;
  } word;
} mpeg_time_t;

typedef union
{
#ifdef MPEG_MPEGTIME_H_UINT64_AVAILABLE
  int64_t dword;
#endif
  struct
  {
    uint32_t lo;
    int32_t hi: 1;
  } word;
} mpeg_interval_t;


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* mpegtime_After
*
* Checks whether one time is after another time
*
* Assumptions
*  NONE
*
* Inputs
*  Two times to compare
*
* Outputs
*  NONE
*
* Returns
*  true if a comes after b (accounting for wraparound)
*****************************************************************************/
extern bool mpegtime_After(mpeg_time_t a, mpeg_time_t b);

/*****************************************************************************
* mpegtime_Before
*
* Checks whether one time is before another time
*
* Assumptions
*  NONE
*
* Inputs
*  Two times to compare
*
* Outputs
*  NONE
*
* Returns
*  true if a comes before b (accounting for wraparound)
*****************************************************************************/
extern bool mpegtime_Before(mpeg_time_t a, mpeg_time_t b);

/*****************************************************************************
* mpegtime_Greater
*
* Checks whether one interval is greater than another
*
* Assumptions
*  NONE
*
* Inputs
*  Two intervals to compare
*
* Outputs
*  NONE
*
* Returns
*  true if a is longer than b (signed comparison, no wraparound)
*****************************************************************************/
extern bool mpegtime_Greater (mpeg_interval_t a, mpeg_interval_t b);

/*****************************************************************************
* mpegtime_Less
*
* Checks whether one interval is less than another
*
* Assumptions
*  NONE
*
* Inputs
*  Two intervals to compare
*
* Outputs
*  NONE
*
* Returns
*  true if a is shorter than b (signed comparison, no wraparound)
*****************************************************************************/
extern bool mpegtime_Less(mpeg_interval_t a, mpeg_interval_t b);

/*****************************************************************************
* mpegtime_TimeDifference
*
* Returns the interval between two times
*
* Assumptions
*  NONE
*
* Inputs
*  Two times to compare
*
* Outputs
*  NONE
*
* Returns
*  The interval between the times
*****************************************************************************/
extern __value_in_regs mpeg_interval_t mpegtime_TimeDifference(mpeg_time_t a, mpeg_time_t b);

/*****************************************************************************
* mpegtime_AddInterval
*
* Adds an interval to a time
*
* Assumptions
*  NONE
*
* Inputs
*  Start time, interval to add to it
*
* Outputs
*  NONE
*
* Returns
*  The resultant time
*****************************************************************************/
extern __value_in_regs mpeg_time_t mpegtime_AddInterval(mpeg_time_t a, mpeg_interval_t b);

/*****************************************************************************
* mpegtime_SubtractInterval
*
* Takes an interval from a time
*
* Assumptions
*  NONE
*
* Inputs
*  Start time, interval to subtract from it
*
* Outputs
*  NONE
*
* Returns
*  The resultant time
*****************************************************************************/
extern __value_in_regs mpeg_time_t mpegtime_SubtractInterval(mpeg_time_t a, mpeg_interval_t b);

/*****************************************************************************
* mpegtime_IntervalSum
*
* Adds two intervals together
*
* Assumptions
*  NONE
*
* Inputs
*  Two intervals to add
*
* Outputs
*  Optional overflow indicator
*
* Returns
*  The signed sum of them
*****************************************************************************/
extern __value_in_regs mpeg_interval_t mpegtime_IntervalSum(mpeg_interval_t a, mpeg_interval_t b, bool *overflow);

/*****************************************************************************
* mpegtime_IntervalDifference
*
* Finds the difference between two intervals
*
* Assumptions
*  NONE
*
* Inputs
*  Two intervals to compare
*
* Outputs
*  Optional overflow indicator
*
* Returns
*  The signed difference between them
*****************************************************************************/
extern __value_in_regs mpeg_interval_t mpegtime_IntervalDifference(mpeg_interval_t a, mpeg_interval_t b, bool *overflow);

/*****************************************************************************
* mpegtime_IntervalMultiply
*
* Multiplies an interval
*
* Assumptions
*  NONE
*
* Inputs
*  Interval, integer multiplier
*
* Outputs
*  NONE (overflow not signalled)
*
* Returns
*  The result
*****************************************************************************/
extern __value_in_regs mpeg_interval_t mpegtime_IntervalMultiply(mpeg_interval_t interval, uint32_t multiplier);

/*****************************************************************************
* mpegtime_IntervalDivide
*
* Divides an interval
*
* Assumptions
*  NONE
*
* Inputs
*  Interval, integer divisor
*
* Outputs
*  NONE
*
* Returns
*  The result
*****************************************************************************/
extern __value_in_regs mpeg_interval_t mpegtime_IntervalDivide(mpeg_interval_t interval, uint32_t divisor);

/*****************************************************************************
* mpegtime_IntervalScale
*
* Scales an interval
*
* Assumptions
*  NONE
*
* Inputs
*  Interval, 16.16 fixed-point multiplier
*
* Outputs
*  NONE (result is saturated to &100000000 or &0FFFFFFFF if overflow)
*
* Returns
*  The result
*****************************************************************************/
extern __value_in_regs mpeg_interval_t mpegtime_IntervalScale(mpeg_interval_t interval, uint32_t scale);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
