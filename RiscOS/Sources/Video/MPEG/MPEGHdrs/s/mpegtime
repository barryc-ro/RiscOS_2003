;*****************************************************************************
; $Id$
; $Name$
;
; Author(s):  Ben Avison
; Project(s): DSL4000 Deployment (A170)
;
; ----------------------------------------------------------------------------
; Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
;
; The copyright in this material is owned by Pace Micro Technology PLC
; ("Pace").  This material is regarded as a highly confidential trade secret
; of Pace.  It may not be reproduced, used, sold or in any other way exploited
; or transferred to any third party without the prior written permission of
; Pace.
;
; ----------------------------------------------------------------------------
; Purpose: 33-bit arithmetic
;
; ----------------------------------------------------------------------------
; History: See source control system log
;
;****************************************************************************/

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>

        AREA    |Asm$$Code|, CODE, READONLY

; extern bool mpegtime_After(mpeg_time_t a, mpeg_time_t b);

; In:   Two times to compare
; Out:  |true| if a>b (with wraparound)

; a is in (a1,a2)
; b is in (a3,a4)

        EXPORT  mpegtime_After
mpegtime_After
        CMP     a3, a1
        SBC     a1, a4, a2
        AND     a1, a1, #1      ; if (b-a) < 0, this will have value 1 (true)
        Return  , LinkNotStacked

; extern bool mpegtime_Before(mpeg_time_t a, mpeg_time_t b);

; In:   Two times to compare
; Out:  |true| if a<b (with wraparound)

; a is in (a1,a2)
; b is in (a3,a4)

        EXPORT  mpegtime_Before
mpegtime_Before
        CMP     a1, a3
        SBC     a1, a2, a4
        AND     a1, a1, #1      ; if (a-b) < 0, this will have value 1 (true)
        Return  , LinkNotStacked

; extern bool mpegtime_Greater(mpeg_interval_t a, mpeg_interval_t b);

; In:   Two intervals to compare
; Out:  |true| if a>b (no wraparound)

; a is in (a1,a2)
; b is in (a3,a4)

        EXPORT  mpegtime_Greater
mpegtime_Greater
        CMP     a1, a3
        MOVHI   a1, #1
        MOVLS   a1, #0
        EOR     ip, a2, a4
        TST     ip, #1          ; do sign bits differ?
        BICNE   a1, a4, a2
        ANDNE   a1, a1, #1
        Return  , LinkNotStacked

; extern bool mpegtime_Less(mpeg_interval_t a, mpeg_interval_t b);

; In:   Two intervals to compare
; Out:  |true| if a<b (no wraparound)

; a is in (a1,a2)
; b is in (a3,a4)

        EXPORT  mpegtime_Less
mpegtime_Less
        CMP     a1, a3
        MOVLO   a1, #1
        MOVHS   a1, #0
        EOR     ip, a2, a4
        TST     ip, #1          ; do sign bits differ?
        BICNE   a1, a2, a4
        ANDNE   a1, a1, #1
        Return  , LinkNotStacked

; extern __value_in_regs mpeg_time_t mpegtime_AddInterval(mpeg_time_t a, mpeg_interval_t b);

; In:   Start time, interval to add to it
; Out:  The resultant time

; a is in (a1,a2)
; b is in (a3,a4)
; result returned in (a1,a2)

        EXPORT  mpegtime_AddInterval
mpegtime_AddInterval
        ADDS    a1, a1, a3
        ADC     a2, a2, a4
        AND     a2, a2, #1
        Return  , LinkNotStacked

; extern __value_in_regs mpeg_interval_t mpegtime_TimeDifference(mpeg_time_t a, mpeg_time_t b);

; In:   Two times to compare
; Out:  The interval between the times

; extern __value_in_regs mpeg_time_t mpegtime_SubtractInterval(mpeg_time_t a, mpeg_interval_t b);

; In:   Start time, interval to subtract from it
; Out:  The resultant time

; a is in (a1,a2)
; b is in (a3,a4)
; result returned in (a1,a2)

        EXPORT  mpegtime_TimeDifference
        EXPORT  mpegtime_SubtractInterval
mpegtime_TimeDifference
mpegtime_SubtractInterval
        SUBS    a1, a1, a3
        SBC     a2, a2, a4
        AND     a2, a2, #1
        Return  , LinkNotStacked

; extern __value_in_regs mpeg_interval_t mpegtime_IntervalSum(mpeg_interval_t a, mpeg_interval_t b, bool *overflow);

; In:   Two intervals to add
; Out:  The signed sum of them, and optionally an overflow flag

; a is in (a1,a2)
; b is in (a3,a4)
; result returned in (a1,a2),[[sp]]

        EXPORT  mpegtime_IntervalSum
mpegtime_IntervalSum
        EOR     ip, a2, a4      ; bit 0 set means original sign bits differed (so overflow is impossible)
        ADDS    a1, a1, a3
        ADC     a2, a2, a4
        AND     a2, a2, #1
        EOR     a3, a2, a4      ; bit 0 clear means result sign bit matches second argument sign bit (so not overflow if original signs matched)
        BIC     ip, a3, ip
        AND     ip, ip, #1      ; 1 => overflowed, 0 => not overflowed
        LDR     a3, [sp]
        TEQ     a3, #0
        STRNE   ip, [a3]
        Return  , LinkNotStacked

; extern __value_in_regs mpeg_interval_t mpegtime_IntervalDifference(mpeg_interval_t a, mpeg_interval_t b, bool *overflow);

; In:   Two intervals to compare
; Out:  The signed difference between them, and optionally an overflow flag

; a is in (a1,a2)
; b is in (a3,a4)
; result returned in (a1,a2),[[sp]]

        EXPORT  mpegtime_IntervalDifference
mpegtime_IntervalDifference
        EOR     ip, a2, a4      ; bit 0 clear means original sign bits matched (so overflow is impossible)
        SUBS    a1, a1, a3
        SBC     a2, a2, a4
        AND     a2, a2, #1
        EOR     a3, a2, a4      ; bit 0 set means result sign bit differs from sign of subtracted argument (so not overflow if original signs differed)
        BIC     ip, ip, a3
        AND     ip, ip, #1      ; 1 => overflowed, 0 => not overflowed
        LDR     a3, [sp]
        TEQ     a3, #0
        STRNE   ip, [a3]
        Return  , LinkNotStacked

; extern __value_in_regs mpeg_interval_t mpegtime_IntervalMultiply(mpeg_interval_t interval, uint32_t multiplier);

; In:   Interval, multiplier
; Out:  Interval result

; interval is in (a1,a2)
; result returned in (a1,a2)

        EXPORT  mpegtime_IntervalMultiply
mpegtime_IntervalMultiply
        MUL     a1, a3, a1
        Return  , LinkNotStacked

; extern __value_in_regs mpeg_interval_t mpegtime_IntervalDivide(mpeg_interval_t interval, uint32_t divisor);

; In:   Interval, divisor
; Out:  Interval result

; interval is in (a1,a2)
; result returned in (a1,a2)

        EXPORT  mpegtime_IntervalDivide
mpegtime_IntervalDivide
        TST     a2, #1
        RSBNE   a1, a1, #0
        DivRem  ip, a1, a3, a4
        MOV     a1, ip
        TST     a2, #1
        RSBNE   a1, a1, #0
        Return  , LinkNotStacked

; extern __value_in_regs mpeg_interval_t mpegtime_IntervalScale(mpeg_interval_t interval, uint32_t scale);

; In:   Interval, 16.16 fixed-point multiplier
; Out:  Interval result

; interval is in (a1,a2)
; result returned in (a1,a2)

        EXPORT  mpegtime_IntervalScale
mpegtime_IntervalScale
        FunctionEntry
        TST     a2, #1
        RSBNE   a1, a1, #0
        MOV     lr, a3, LSL #16
        MOV     lr, a3, LSR #16         ; lr = lsw of scale
        MOV     ip, a3, LSR #16         ; ip = msw of scale
        MOV     a4, a1, LSL #16
        MOV     a4, a4, LSR #16         ; a4 = lsw of interval
        MOV     a3, a1, LSR #16         ; a3 = msw of interval
        MUL     a1, ip, a3
        TST     a1, #&FF000000
        TSTNE   a1, #&00FF0000
        BNE     %FT90
        MUL     a3, lr, a3
        ADDS    a1, a3, a1, LSL #16
        MULCC   a3, ip, a4
        ADDCCS  a1, a1, a3
        MULCC   a3, lr, a4
        ADDCCS  a1, a1, a3, LSR #16
        BCS     %FT90
        TST     a2, #1
        RSBNE   a1, a1, #0
        Return
90      ; overflow case - saturate
        TST     a2, #1
        MOVEQ   a1, #-1
        MOVNE   a1, #0
        Return


        END
