; Hdr:L64002
;
; Header file for LSI Logic L64002 MPEG 2 audio/video decoder chip
; Must get Hdr:MPEG2Card first

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Who  Version       Description
; ----       ---  -------       -----------
; 25-Apr-95  TMD  -		Created
; 14-Jun-95  TMD  -		Added L64002_Status0_AuxIDShift
; 21-Jun-95  TMD  -		Added OSDControl_VideoBlack, IR bits
; 06-Jul-95  TMD  -		Added Audio mute bit, trick modes bits
; 11-Jul-95  TMD  -		Added DRAMRead macro
; 19-Jul-95  TMD  -		Added VideoTrickModes bits
; 06-Feb-96  TMD  -		Added General register symbols
; 14-Feb-96  TMD  -		Added DisplayMode1 symbols
; 28-Feb-96  TMD  -		Added bodge in DRAMRead routine to workaround bug
; 11-Sep-96  TMD  -		Added symbols for I2S output mode
; 18-Nov-96  TMD  -		Added AudioTrickModes_DecoderEnable
; 20-Nov-96  TMD  -		Added DRAMWrite, DRAMFill, DRAMCopy, DRAMCopyB macros
; 28-Nov-96  TMD  -		Added VideoTrickModes_SkipBorP, VideoTrickModes_SkipAny
; 11-Mar-97  TMD  -		Added DisplayMode0 symbols
; 18-Apr-97  TMD  -		Added ErrorStatus_VideoReconstructionError/ContextError/VLCError
; 09-Oct-98  TMD  -		Added DualMono select stuff, include it now in TrickMode valid bits
; 04-Nov-98  TMD  -		Changed comment on TrickMode valid bits to reflect above change
; 25-Mar-99  BJGA 0.04-4.4.?.1  Added User Data FIFO Status bits

AIR_Auto_Increment_Bit	*	&40

        MACRO
        VReg    $regname, $index
L64002_$regname	*	($index) :SHL: L64002_Register_Address_Shift
        MEND

	MACRO
	VRegI	$regname, $index1, $index2
L64002_$regname._Addr1 *	($index1) :SHL: L64002_Register_Address_Shift
L64002_$regname._Addr2 * $index2
	MEND

	MACRO
	ReadReg $armreg, $regname
	LDRB	$armreg, [L64002_Registers_Ptr, #L64002_$regname]
	MEND

	MACRO
	WriteReg $armreg, $regname
	STRB	$armreg, [L64002_Registers_Ptr, #L64002_$regname]
	MEND

	MACRO
	ReadRegI $armreg, $regname
	MOV	$armreg, #L64002_$regname._Addr2
	STRB	$armreg, [L64002_Registers_Ptr, #L64002_AIR]
	LDRB	$armreg, [L64002_Registers_Ptr, #L64002_$regname._Addr1]
	MEND

	MACRO
	WriteRegI $armreg, $regname, $tmp
	MOV	$tmp, #L64002_$regname._Addr2
	STRB	$tmp, [L64002_Registers_Ptr, #L64002_AIR]
	STRB	$armreg, [L64002_Registers_Ptr, #L64002_$regname._Addr1]
	MEND

; Perform a DRAM read operation to load 8 bytes into the registers $dst1 (lo) and $dst2 (hi)

	MACRO
	DRAMRead $dst1, $dst2, $byteaddr, $tmp
	MOV	$dst1, #AIR_Auto_Increment_Bit + L64002_DRAMAddress0_Addr2
	WriteReg $dst1, AIR
	MOV	$dst1, $byteaddr, LSR #3	; convert to word address
	WriteReg $dst1, DRAMAddress0_Addr1 	; write DRAMAddress0
	MOV	$dst1, $dst1, LSR #8
	WriteReg $dst1, DRAMAddress1_Addr1	; write DRAMAddress1
	MOV	$dst1, $dst1, LSR #8
	WriteReg $dst1, DRAMAddress2_Addr1	; write DRAMAddress2
	MOV	$dst1, #DRAMControlSoftCopy+2
	WriteRegI $dst1, DRAMControl, $dst2	; initiate read

	MOV	$dst1, #L64002_DRAMControl_Addr2
	WriteReg $dst1, AIR
10
	ReadReg $dst1, DRAMControl_Addr1
	TST	$dst1, #2			; wait until operation complete
	BEQ	%BT10

	MOV	$dst1, #AIR_Auto_Increment_Bit + L64002_DRAMData0_Addr2
	WriteReg $dst1, AIR

	ReadReg	$dst2, DRAMData0_Addr1
	ReadReg $tmp, DRAMData1_Addr1
	ORR	$dst2, $tmp, $dst2, LSL #8
	ReadReg $tmp, DRAMData2_Addr1
	ORR	$dst2, $tmp, $dst2, LSL #8
	ReadReg $tmp, DRAMData3_Addr1
	ORR	$dst2, $tmp, $dst2, LSL #8

	ReadReg	$dst1, DRAMData4_Addr1
	ReadReg $tmp, DRAMData5_Addr1
	ORR	$dst1, $tmp, $dst1, LSL #8
	ReadReg $tmp, DRAMData6_Addr1
	ORR	$dst1, $tmp, $dst1, LSL #8
	ReadReg $tmp, DRAMData7_Addr1
	ORR	$dst1, $tmp, $dst1, LSL #8

 [ {FALSE}
; now the bodge so that the DRAM doesn't go into la-la land

	MOV	$tmp, #L64002_DRAMTransferMode_Addr2
	WriteReg $tmp, AIR

	MOV	$tmp, #4
	STRB	$tmp, [L64002_Registers_Ptr, #L64002_DRAMTransferMode_Addr1]
 ]

	MEND

; Write one 64-bit word of data (in 2 ARM words) to the L64002 DRAM
; dst1 holds bytes 0-3, dst2 holds bytes 4-7
; byteaddr is the DRAM byte address, tmp is a temporary register
; All registers except tmp are preserved

	MACRO
	DRAMWrite $dst1, $dst2, $byteaddr, $tmp
	MOV	$tmp, #AIR_Auto_Increment_Bit + L64002_DRAMAddress0_Addr2
	WriteReg $tmp, AIR
	MOV	$tmp, $byteaddr, LSR #3		; convert to word address
	WriteReg $tmp, DRAMAddress0_Addr1 	; write DRAMAddress0
	MOV	$tmp, $tmp, LSR #8
	WriteReg $tmp, DRAMAddress1_Addr1	; write DRAMAddress1
	MOV	$tmp, $tmp, LSR #8
	WriteReg $tmp, DRAMAddress2_Addr1	; write DRAMAddress2
	MOV	$tmp, $dst1
	WriteReg $tmp, DRAMData0_Addr1		; write byte 0 of data
	MOV	$tmp, $tmp, LSR #8
	WriteReg $tmp, DRAMData1_Addr1		; write byte 1 of data
	MOV	$tmp, $tmp, LSR #8
	WriteReg $tmp, DRAMData2_Addr1		; write byte 2 of data
	MOV	$tmp, $tmp, LSR #8
	WriteReg $tmp, DRAMData3_Addr1		; write byte 3 of data
	MOV	$tmp, $dst2
	WriteReg $tmp, DRAMData4_Addr1		; write byte 4 of data
	MOV	$tmp, $tmp, LSR #8
	WriteReg $tmp, DRAMData5_Addr1		; write byte 5 of data
	MOV	$tmp, $tmp, LSR #8
	WriteReg $tmp, DRAMData6_Addr1		; write byte 6 of data
	MOV	$tmp, $tmp, LSR #8
	WriteReg $tmp, DRAMData7_Addr1		; write byte 7 of data

	MOV	$tmp, #L64002_DRAMControl_Addr2
	WriteReg $tmp, AIR
	MOV	$tmp, #DRAMControlSoftCopy+4
	WriteReg $tmp, DRAMControl_Addr1	; initiate write
10
	ReadReg $tmp, DRAMControl_Addr1
	TST	$tmp, #4			; wait until operation complete
	BEQ	%BT10
	MEND

	MACRO
	DRAMCopyB $bytesrcaddr, $bytedestaddr, $bytelen, $tmp1, $tmp2
	DRAMCopy ($bytesrcaddr :SHR: 3), ($bytedestaddr :SHR: 3), ($bytelen :SHR: 3), $tmp1, $tmp2
	MEND

	MACRO
	DRAMCopy $wordsrcaddr, $worddestaddr, $wordlength, $tmp1, $tmp2
	MOV	$tmp1, #AIR_Auto_Increment_Bit + L64002_DRAMAddress0_Addr2
	WriteReg $tmp1, AIR
	LDR	$tmp1, =$worddestaddr
	WriteReg $tmp1, DRAMAddress0_Addr1 	; write DRAMAddress0
	MOV	$tmp1, $tmp1, LSR #8
	WriteReg $tmp1, DRAMAddress1_Addr1	; write DRAMAddress1
	MOV	$tmp1, $tmp1, LSR #8
	WriteReg $tmp1, DRAMAddress2_Addr1	; write DRAMAddress2
	MOV	$tmp1, #AIR_Auto_Increment_Bit + L64002_DRAMSource0_Addr2
	WriteReg $tmp1, AIR
	LDR	$tmp1, =$wordsrcaddr
	WriteReg $tmp1, DRAMSource0_Addr1 	; write DRAMSource0
	MOV	$tmp1, $tmp1, LSR #8
	WriteReg $tmp1, DRAMSource1_Addr1	; write DRAMSource1
	MOV	$tmp1, $tmp1, LSR #8
	WriteReg $tmp1, DRAMSource2_Addr1	; write DRAMSource2
	LDR	$tmp1, =$wordlength
	WriteReg $tmp1, DRAMTransferCount0_Addr1 ; write DRAMTransferCount0
	MOV	$tmp1, $tmp1, LSR #8
	WriteReg $tmp1, DRAMTransferCount1_Addr1 ; write DRAMTransferCount1
	MOV	$tmp1, #6			; flush FIFO and initiate DRAM transfer
	WriteReg $tmp1, DRAMTransferMode_Addr1
10
	ReadReg $tmp1, IR0			; loop until transfer has been done
	TST	$tmp1, #IR_DRAMTransferDone	; this assumes no IRQ handler is running yet that
	BEQ	%BT10				; will accidentally clear the bit
	MEND

	MACRO
	DRAMFill $byteaddr, $bytelength, $bytevalue, $tmp1, $tmp2, $tmp3
	MOV	$tmp1, #$bytevalue
	ORR	$tmp1, $tmp1, $tmp1, LSL #8
	ORR	$tmp1, $tmp1, $tmp1, LSL #16	; fill word with value
	LDR	$tmp3, =$byteaddr
	DRAMWrite $tmp1, $tmp1, $tmp3, $tmp2
	DRAMFill2 ($byteaddr :SHR: 3), ($bytelength :SHR: 3), $tmp1, $tmp2
	MEND

	MACRO
	DRAMFill2 $wordaddr, $wordlength, $tmp1, $tmp2
	LCLA	wordbase
	LCLA	wordlen
wordbase SETA	$wordaddr
wordlen	SETA	$wordlength
 [ wordlen :MOD: 5 = 0
	DRAMFill2 &$wordbase, &$wordlen/5, $tmp1, $tmp2
	B	%FT10
	LTORG
10
	DRAMCopy &$wordbase, &$wordbase + 1*&$wordlen/5, &$wordlen/5, $tmp1, $tmp2
	DRAMCopy &$wordbase, &$wordbase + 2*&$wordlen/5, &$wordlen/5, $tmp1, $tmp2
	DRAMCopy &$wordbase, &$wordbase + 3*&$wordlen/5, &$wordlen/5, $tmp1, $tmp2
	DRAMCopy &$wordbase, &$wordbase + 4*&$wordlen/5, &$wordlen/5, $tmp1, $tmp2
	MEXIT
 ]
 [ wordlen :MOD: 3 = 0
	DRAMFill2 &$wordbase, &$wordlen/3, $tmp1, $tmp2
	DRAMCopy &$wordbase, &$wordbase + 1*&$wordlen/3, &$wordlen/3, $tmp1, $tmp2
	DRAMCopy &$wordbase, &$wordbase + 2*&$wordlen/3, &$wordlen/3, $tmp1, $tmp2
	MEXIT
 ]
 [ wordlen :MOD: 2 = 0
	DRAMFill2 &$wordbase, &$wordlen/2, $tmp1, $tmp2
	DRAMCopy &$wordbase, &$wordbase + 1*&$wordlen/2, &$wordlen/2, $tmp1, $tmp2
 |
	ASSERT wordlen = 1
	; do nothing - first copy's already there!
 ]
	MEND

; Register offsets

	VReg	AIR,		0
	VReg	Status0,	1
	VReg	Status1,	2
	VReg	IR0,		3
	VReg	IR1,		4
	VReg	General,	5
	VReg	Group6,		6
	VReg	Group7,		7

	VRegI	UserDataFIFO,			6, 0
	VRegI	ErrorStatus,			6, 1
	VRegI	ForwardAnchorLumaBase0, 	6, 2	; \
	VRegI	ForwardAnchorLumaBase1, 	6, 3	; |
	VRegI	ForwardAnchorChromaBase0,	6, 4	; |
	VRegI	ForwardAnchorChromaBase1,	6, 5	; |
	VRegI	BackwardAnchorLumaBase0,	6, 6	; |
	VRegI	BackwardAnchorLumaBase1,	6, 7	; |
	VRegI	BackwardAnchorChromaBase0,	6, 8	; |
	VRegI	BackwardAnchorChromaBase1,	6, 9	; |
	VRegI	DisplayLumaCommon0,		6, 10	; | These addresses are in units of 64 bytes
	VRegI	DisplayLumaCommon1,		6, 11	; |
	VRegI	DisplayChromaCommon0,		6, 12	; |
	VRegI	DisplayChromaCommon1,		6, 13	; |
	VRegI	VBI1Luma0,			6, 14	; |
	VRegI	VBI1Luma1,			6, 15	; |
	VRegI	VBI1Chroma0,			6, 16	; |
	VRegI	VBI1Chroma1,			6, 17	; |
	VRegI	VBI2Luma0,			6, 18	; |
	VRegI	VBI2Luma1,			6, 19	; |
	VRegI	VBI2Chroma0,			6, 20	; |
	VRegI	VBI2Chroma1,			6, 21	; /
	VRegI	VBISize,			6, 22
	VRegI	OSDControl,			6, 23
	VRegI	OSDField1Address0,		6, 24   ; \
	VRegI	OSDField1Address1,		6, 25	; | These addresses are in units of 32 bytes
	VRegI	OSDField2Address0,		6, 26	; |
	VRegI	OSDField2Address1,		6, 27	; /
	VRegI	DisplayMode0,			6, 28
	VRegI	DisplayMode1,			6, 29
	VRegI	RasterMapperIncrement,		6, 30
	VRegI	DisplayControllerStatus,	6, 31

	VRegI	VideoPESBufferStart0,		6, 32	; \
	VRegI	VideoPESBufferStart1,		6, 33	; |
	VRegI	VideoPESBufferEnd0,		6, 34	; |
	VRegI	VideoPESBufferEnd1,		6, 35	; |
	VRegI	AudioPESBufferStart0,		6, 36	; |
	VRegI	AudioPESBufferStart1,		6, 37	; |
	VRegI	AudioPESBufferEnd0,		6, 38	; | These addresses are in units of 64 bytes
	VRegI	AudioPESBufferEnd1,		6, 39	; | The end addresses are inclusive
	VRegI	VideoChannelBufferStart0,	6, 40	; | i.e. buffer goes from start*64 to end*64+63 inclusive
	VRegI	VideoChannelBufferStart1,	6, 41	; |
	VRegI	VideoChannelBufferEnd0,		6, 42	; |
	VRegI	VideoChannelBufferEnd1,		6, 43	; |
	VRegI	AudioChannelBufferStart0,	6, 44	; |
	VRegI	AudioChannelBufferStart1,	6, 45	; |
	VRegI	AudioChannelBufferEnd0,		6, 46	; |
	VRegI	AudioChannelBufferEnd1,		6, 47	; /

	VRegI	AudioModeControl,		6, 48
	VRegI	AudioFrequencyNMOSC0,		6, 49
	VRegI	AudioFrequencyNOSC0,		6, 50
	VRegI	AudioFrequencyNMOSCNOSC1,	6, 51
	VRegI	AudioParameter0,		6, 52
	VRegI	AudioParameter1,		6, 53
	VRegI	AudioTrickModes,		6, 54

	VRegI	AuxiliaryDataFIFO,		7, 0
	VRegI	DRAMControl,			7, 1
	VRegI	DRAMAddress0,			7, 2	; \
	VRegI	DRAMAddress1,			7, 3	; | I think this address is in units of 8 bytes
	VRegI	DRAMAddress2,			7, 4	; /
	VRegI	DRAMData0,			7, 5
	VRegI	DRAMData1,			7, 6
	VRegI	DRAMData2,			7, 7
	VRegI	DRAMData3,			7, 8
	VRegI	DRAMData4,			7, 9
	VRegI	DRAMData5,			7, 10
	VRegI	DRAMData6,			7, 11
	VRegI	DRAMData7,			7, 12

	VRegI	HorizSyncWidth,			7, 13
	VRegI	EqualizationPulseWidth,		7, 14
	VRegI	SerrationPulseWidth,		7, 15
	VRegI	HorizBlankPulseWidth,		7, 16
	VRegI	ActiveImageDone,		7, 17
	VRegI	HalfLineTime,			7, 18
	VRegI	UpperBits,			7, 19
	VRegI	VertiPreBlankEqualization,	7, 20
	VRegI	VertiPostBlankEqualization,	7, 21
	VRegI	VertiMainSerrationLines,	7, 22
	VRegI	VertiScanHalfLines,		7, 23
	VRegI	MainReadsPerLine,		7, 24
	VRegI	DisplayWidth,			7, 25
	VRegI	PanAndScan8thPelOrigin,		7, 26
	VRegI	PanAndScanLumaWordOrigin0,	7, 27
	VRegI	PanAndScanLumaWordOrigin1,	7, 28
	VRegI	PanAndScanChromaWordOrigin0,	7, 29
	VRegI	PanAndScanChromaWordOrigin1,	7, 30
	VRegI	VideoOutputModeControl,		7, 31

	VRegI	VideoSystemWrite0,		7, 32 ; \
	VRegI	AudioSystemWrite0,		7, 33 ; |
	VRegI	VideoChannelBufferWrite0,	7, 34 ; | These addresses are in units of 8 bytes
	VRegI	AudioChannelBufferWrite0,	7, 35 ; |
	VRegI	VideoChannelBufferRead0,	7, 36 ; |
	VRegI	AudioChannelBufferRead0,	7, 37 ; |
	VRegI	PreviouslyReadPtr1,		7, 38 ; |
	VRegI	PreviouslyReadPtr2,		7, 39 ; /

	VRegI	PictureStartCodeRead0,		7, 40
	VRegI	PictureStartCodeRead1,		7, 41
	VRegI	PictureStartCodeRead2,		7, 42
;	Register 43 is reserved

	VRegI	AudioSyncCodeRead0,		7, 44
	VRegI	AudioSyncCodeRead1,		7, 45
	VRegI	AudioSyncCodeRead2,		7, 46
;	Register 47 is reserved

	VRegI	DRAMSource0,			7, 48
	VRegI	DRAMSource1,			7, 49
	VRegI	DRAMSource2,			7, 50
	VRegI	DRAMTransferCount0,		7, 51
	VRegI	DRAMTransferCount1,		7, 52
	VRegI	DRAMTransferMode,		7, 53
;	Register 54 is reserved

	VRegI	VideoTrickModes,		7, 55
	VRegI	SCR0,				7, 56
	VRegI	SCR1,				7, 57
	VRegI	SCRCompare0,			7, 58
	VRegI	SCRCompare1,			7, 59
;	Registers 60..63 are reserved

; Bits in various registers

; Bits in Address Indirection Register (AIR)

L64002_AIR_AutoIncrement	*	1 :SHL: 6	; R/W - enable auto-increment on the paged registers

; Bits in Status 0

L64002_Status0_ChannelStatus	*	1 :SHL: 7	; R/W - when set, channel buffer is running and storing data
L64002_Status0_VideoChannelReady *	1 :SHL: 6	; R   - duplicates state of VREQ pin (polarity?)
L64002_Status0_AudioChannelReady *	1 :SHL: 5	; R   - duplicates state of AREQ pin (polarity?)

L64002_Status0_AuxIDShift	*	2
L64002_Status0_AuxIDBits	*	7 :SHL: 2	; R   - indicate which MPEG layer produced Aux FIFO data:-
L64002_Status0_AuxID_Sequence	*	0 :SHL: 2	;		Sequence
L64002_Status0_AuxID_GOP	*	1 :SHL: 2	;		Group-of-pictures
L64002_Status0_AuxID_Picture	*	2 :SHL: 2	;		Picture
L64002_Status0_AuxID_Extension	*	7 :SHL: 2	;		Extension

L64002_Status0_ADFSBits		*	3 :SHL: 0	; R   - indicates status of auxiliary FIFO:-
L64002_Status0_AuxDataFIFOEmpty *	0 :SHL: 0	;		Empty
L64002_Status0_AuxDataFIFOSome	*	1 :SHL: 0	;		Some data present
L64002_Status0_AuxDataFIFOFull	*	2 :SHL: 0	;		Full (additional writes will cause overrun)
L64002_Status0_AuxDataFIFOOverrun *	3 :SHL: 0	;		Overrun

L64002_Status0_AudioStreamSelectEnable * 1 :SHL: 5	; W   - enable audio stream ID check (if 0, decode any stream)
L64002_Status0_AudioStreamIDShift	*	0	;		bits 4..0 are the stream to decode (if bit 5 set)

; Bits in Status 1

L64002_Status1_UDIDBits		*	3 :SHL: 2	; R   - indicate MPEG layer of user data item:-
L64002_Status1_UDID_Sequence	*	0 :SHL: 2	;		Sequence
L64002_Status1_UDID_GOP		*	1 :SHL: 2	;		Group-of-pictures
L64002_Status1_UDID_Picture	*	2 :SHL: 2	;		Picture
L64002_Status1_UDID_Slice	*	3 :SHL: 2	;		Slice

L64002_Status1_UDFSBits         *       3 :SHL: 0       ; R   - indicates status of user data FIFO:-
L64002_Status1_UserDataFIFOEmpty *      0 :SHL: 0       ;               Empty
L64002_Status1_UserDataFIFOSome *       1 :SHL: 0       ;               Some data present
L64002_Status1_UserDataFIFOFull *       2 :SHL: 0       ;               Full (additional writes will cause overrun)
L64002_Status1_UserDataFIFOOverrun *    3 :SHL: 0       ;               Overrun

; Values to store in General register

General_ParallelInput		*	1 :SHL: 6

General_AVPESPackets		*	0 :SHL: 4
General_SystemStream		* 	1 :SHL: 4
General_AVElementary		*	3 :SHL: 4

General_ResetBuffersAndFIFOs	*	15 :SHL: 0

; Bits in OSDControl

OSDControl_VideoBlack		*	1 :SHL: 1

; Bits in IR (0 and 1)

IR_DecodeStatus			*	1 :SHL: 0
IR_UserDataFIFOReady		*	1 :SHL: 1
IR_DecodeError			*	1 :SHL: 2
IR_AudioSyncCodeDetect		*	1 :SHL: 3
IR_PictureStartCodeDetect	*	1 :SHL: 4
IR_SCRStatus			*	1 :SHL: 5
IR_PackDataReady		*	1 :SHL: 6
IR_DRAMTransferDone		*	1 :SHL: 7
IR_AudioChannelBufferOverflow	*	1 :SHL: 8
IR_VideoChannelBufferOverflow	*	1 :SHL: 9
IR_AudioChannelBufferUnderflow	*	1 :SHL: 10
IR_VideoChannelBufferUnderflow	*	1 :SHL: 11
IR_BeginActiveVideo		*	1 :SHL: 12
IR_BeginVerticalBlank		*	1 :SHL: 13
IR_AudioPESDataReady		*	1 :SHL: 14
IR_VideoPESDataReady		*	1 :SHL: 15

; Bits in DisplayMode0

DisplayMode0_PulldownRepeat	*	1 :SHL: 4
DisplayMode0_PulldownEnable	*	1 :SHL: 3
DisplayMode0_PulldownBitstream  *	1 :SHL: 2
DisplayMode0_FreezeField	*	1 :SHL: 1
DisplayMode0_FreezeFrame	*	1 :SHL: 0

; Bits in DisplayMode1

DisplayMode1_PanAndScanFromBitstream			*	1 :SHL: 5

DisplayMode1_ProgressiveNoFilter			*	0 :SHL: 2
DisplayMode1_ProgressiveFilterLuma			*	1 :SHL: 2
DisplayMode1_ProgressiveFilterChroma			*	3 :SHL: 2
DisplayMode1_InterlaceChromaFieldRepeat			*	4 :SHL: 2
DisplayMode1_InterlaceChromaFieldRepeatFilterChroma	*	5 :SHL: 2
DisplayMode1_InterlaceChromaLineRepeat			*	6 :SHL: 2
DisplayMode1_InterlaceChromaLineRepeatFilterChroma	*	7 :SHL: 2

DisplayMode1_HorizontalFilterSelect			*	1 :SHL: 1
DisplayMode1_HorizontalFilterEnable			*	1 :SHL: 0

; Bits in AudioModeControl

AudioModeControl_AudioMuteOnErrors *	1 :SHL: 1	; when set, mutes audio when there is an error
AudioModeControl_AudioSoftMute	*	1 :SHL: 2	; when set, mutes audio
AudioModeControl_DACsAreI2S	*	1 :SHL: 3	; normal DACs
AudioModeControl_DACsAreJap	*	0 :SHL: 3	; Japanese DACs

; Bits in AudioTrickModes

AudioTrickModes_ValidBits		*	&1F	; bits 0-4 are valid
AudioTrickModes_DecoderEnable		*	1 :SHL: 2
AudioTrickModes_PausePlayFastSlowBits	*	3 :SHL: 0
AudioTrickModes_Pause			*	0 :SHL: 0
AudioTrickModes_Play			*	1 :SHL: 0
AudioTrickModes_Fast			*	2 :SHL: 0
AudioTrickModes_Slow			*	3 :SHL: 0
AudioTrickModes_DualMonoSelectShift	*	3
AudioTrickModes_DualMonoSelectMask	*	3 :SHL: AudioTrickModes_DualMonoSelectShift

; Bits in ErrorStatus

ErrorStatus_VLCError			*	1 :SHL: 0
ErrorStatus_ContextError		*	1 :SHL: 1
ErrorStatus_VideoReconstructionError	*	1 :SHL: 2
ErrorStatus_SCROverflow			*	1 :SHL: 6

; Bits in VideoTrickModes

VideoTrickModes_ValidBits	*	7
VideoTrickModes_Repeat		*	4
VideoTrickModes_SkipB		*	1
VideoTrickModes_SkipBorP	*	2
VideoTrickModes_SkipAny		*	3

        END
