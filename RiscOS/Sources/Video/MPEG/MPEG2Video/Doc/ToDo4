; > ToDo4

 Stuff to do to make EPROM to test STB2/2 with STB2/1 main ROMs in:-

 + New IR module, assembled with new address, and later version number
 + New Joystick module - ditto
 + New Podule manager, with different FakePodule0 value and later version number
 + Modify MPEG2Video module to recognise STB2MPEG2 podule type as well as STB1MPEG2 (at least they are 100% compatible now)
 + Dummy MPEGVideo, MPEGAudio
 + All the stuff in the MPEG 2 podule EPROM
 * The above EPROM crashes in STB2/1, so can't tell if would work - try putting in dummy STBState module and see how
   far we get?

 Main ROM build for STB2/2
 
 * Check in various sources, if not already done:
   * Hdr.Machine.Peregrine
   * Podule
   * IR
   * Joystick
   * MPEG2Video
   * Macrovision
   * ModeFiles
   * Interlace
 * Sort out some disc space to do full build on, or get Steve Cormie to build it.
 * Get an STB2/2 made up with an ARM7500FE on, and test that.

 SoakTest:
  * Suss why the video doesn't work (proving obstinate!)

 General:
  * Sort out horizontal positioning/sync fiasco
    + For normal mode
    * For macrovision mode

 * Sort out why sometimes the pause-unpause sequence crashes.
   => maybe only an hour if I track down the problem straight away -
      if not it could take days, or weeks if I have to consult LSI about it.
   
 * Get ResetStream working - needed to support reposition or switch to
   fast-forward/fast-reverse - currently not working at all
   => about 2 days, if I don't encounter unforseen obstacles
 
 * Sort out video-to-audio synchronisation
   + Code is in there and seems to work OK for DVB content
   - MPEG 1 content seems to give some jitters - may be acceptable
     I'm tempted to leave it as is, and look into it further if a customer
     complains.
   
 * Sort out audio-to-stream synchronisation
   + Basic code is in there but it may not be critically damped at the moment
     (ie if stream is delivered at the correct rate it may still cause audio
     frames to play alternately fast and slow) - again, may be acceptable
     for now.
   - Needs server capable of delivering MPEG 2 data at a guaranteed rate,
     plus content whose correct bitrate is known.
   
 * Check that the STB can cope with a 7 Mbit stream, with a 16 colour overlay
   - needs server capable of delivering at this rate
   - needs content encoded at this rate (we're talking to Telecom Finland
     about this)
   - may work on ARM7500FE based systems, but not with ARM7500?

 * Sort out slow-motion modes
   * May not be required - the DEC server doesn't support it, ICL does
   - Not even started on coding for this yet - it's a lot more tricky than
     on CL450, where you just issued the SlowMotion command and that was it -
     here you have to manually start and stop the decoder.
   - Initial information from LSI Logic suggests that it may not be possible
     to play MPEG 2 material at even ratios such as 1/2, 1/4, because you end
     up having to display bottom field pictures on the top field. I haven't
     checked this out yet (on existing STBs we support 1/2, 1/3 and 1/4
     where the server allows it).

 * Replace SWI-based data-passing interface (MPEGVideo/Audio_FullPackets)
   with registered-handler-based one, to speed up the system performance
   (and therefore support higher bit rates). The same interface can also
   provide access to private streams. However it is easier to use this new
   interface just for private data, so if the extra performance is not
   required, it may not be worth making the video and audio decoders use
   this too.
    + The MPEGTrans module now checks against the list of registered program
      element handlers when processing a packet, so private data can be
      handled now, but it still treats video + audio specially.
    * Create handler entry point in MPEG2Video module for video data, and
      register it. Need to do at least the open, data transfer and close
      routines. The others can probably stay as SWIs for the time being.
      => about 2 days
    
