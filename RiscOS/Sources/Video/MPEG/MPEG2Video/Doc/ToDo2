; > ToDo2

Actions for me to do before I go on holiday on Fri 23rd August:-

Key for the following:
 * Item still to be done
 + Item completed (at least partially)
 - Obstacle to completion, problem
 => estimated timescale
 Indentation reflects the breakdown of tasks into sub-tasks.
 
I plan to make two releases of the code before I go away:-

 Release 1: For the four out the 10 podules that are going to customers.
  This will take the form of an EPROM to go on the card.
  The podules should be available to us by the end of July, but I don't have
  a firm date for when the customers require them. I estimate that it will
  take at least a week after I receive the first example podule before I can
  release anything.

  Modules which need to be included in the EPROM on the card:
   * Macrovision (to program SAA7183 to enable syncs, so we get a picture)
   * HClkUtils (to select HCLK, so the picture locks)

  Modules which could be included:
   * MPEG2Video
   * Interlace (new flavour)
   * MPEGTrans (if they need to play MPEG1 system streams they'll have to manually
              load MPEGControl from somewhere)
   * ModeFiles module that loads monitor description file with the interlaced
     modes (presumably loads either PAL or NTSC mode file)
   * Perhaps dummy versions of MPEGVideo, MPEGAudio with later version numbers so
     that any versions in the main ROM won't try and start up.

  Users will also need to load the BASIC player program from somewhere - it's
  usually loaded from the network. We'll probably need some of Keith Ruttle's time
  sort out the network booting for these machines (applies equally to STB2/2).
  
  Question: Who are these podules going to?

 Release 2: For STB2/2.
  This will take the form of a new OS ROM image.

  The image should be available by Thu 22nd August (the last day before
  I go away). Unfortunately the plan currently shows the first two tested
  PCBs only coming back from Peter Wild by Mon 19th August, leaving only
  four days for testing. Also, Peter Wild will need something to help him
  debug the boards before then - I suggest maybe using the existing STB2 ROMs
  with an extension ROM containing the stuff from Release 1, possibly with the
  addition of dummy versions of MPEGVideo, MPEGAudio to prevent
  the ones in the main ROM causing problems.

  Also, I don't have the ability to build OS ROM images myself. It will take
  at least a week of Jonathan Harris' or Steve Cormie's time to sort out the
  build versioning issues. Maybe be this could go on while I'm on holiday but
  I'm rather sceptical.
  
  Again, there will be issues to resolve to do with booting STB2/2s from the
  network.
  
 Tasks for Release 1:
 --------------------
 + Create new variant of the MPEG2Video module for the issue 3 card.
 + Remove code that talks to SAA7167 in this variant (no longer used)

 + Develop new version of the Macrovision module
   + Add SWI to select between different modes, rather than using mode number
   + Modify to still program SAA7183 to output syncs when in normal mode
   => about 1 day

 + Specify general approaches:
 {
   * The video system has three modes of operation:
     a) Normal multiplexing of VIDC data and MPEG data;
     b) Using Macrovision video path (uses ED lines to select colour or trans)
        without anti-taping
     c) Same as b), but with anti-taping
     
     Modes b) and c) restrict the overlay to 8 solid colours + transparent;
     in mode a) the overlay depends on the pixel depth of the VIDC mode.
     
     Mode b) is only useful if we're not going to use mode a) at all, and
     want things to be consistent between anti-taping and normal modes.
     
   * Do we use a) and c), or b) and c)?
     -> Allow all three

   * If we use mode descriptors rather than numbered modes, how does the
     Macrovision module know if it's supposed to select mode a, b or c?
     Previously we defined two identical numbered modes in the Interlace
     module and made the Macrovision module detect them and switch the
     h/w appropriately. If we use mode descriptors we can't easily
     tell if this is just normal use of this mode, or we need the Macrovision
     video path but no anti-taping, or we need the Macrovision video path and
     anti-taping.
     -> Use new Interlace module, and a Macrovision_SetState SWI to switch
        between states (takes effect on next mode change)
 } => 2-3 days

 + Sort out new Interlace module (mode descriptor flavour)
   + New position for phase detect logic
   => about 1 day
   
 + Sort out screen clearing and palette programming (inside MPEG2Video module)
   for 16-colour modes (both anti-taping and normal)
   + No need to do this, use BASIC program and set nomode, nocls, nopalettechange
   
 * Sort out new version of BASIC player program
   + Select appropriate screen mode (the same for all three states now)
   * Adjust plotting of on-screen icons to work in those modes
     + Implement
     * Test
   => about 2 days, from when I get a board with working overlays

 * Sort out ModeFiles module for EPROM

 * Build EPROM image
    Needs: Macrovision (to program SAA7183 to enable syncs, so we get a picture)
    	   HClkUtils (to select HCLK, so the picture locks)
    Can also include:
           Interlace
           MPEG2Video
           MPEGTrans
           ModeFiles
   => about 2 days

 Tasks for Release 2:
 --------------------

 * Sort out general build issues for the Release 2 ROM image:
 {
   * Create new machine type for STB2/2
   * Create Hdr.Global.Machine.Falcon2 with new product type for STB2/2
     (already allocated I believe).
   * Change podule manager to recognise new product type for podule 0 (to
     return podule description) (sources won't build if 'FakePodule0' symbol
     is not what it recognises)
   * Check code in s.ARM600 and TestSrc.Begin that pokes ROMCR1 so it
     doesn't assume it's got a ROM card.
   * Sort out new list of modules to include:
     * Out go MPEGVideo, MPEGAudio
     * In come MPEG2Video, new Macrovision, some new form of Interlace module
 } => probably about a week of someone's time (not all mine, since I can't
      build OS images on my machine (not enough disc space))

 * Sort out why sometimes the pause-unpause sequence crashes.
   => maybe only an hour if I track down the problem straight away -
      if not it could take days, or weeks if I have to consult LSI about it.
   
 * Get ResetStream working - needed to support reposition or switch to
   fast-forward/fast-reverse - currently not working at all
   => about 2 days, if I don't encounter unforseen obstacles
 
 * Sort out video-to-audio synchronisation
   + Code is in there and seems to work OK for DVB content
   - MPEG 1 content seems to give some jitters - may be acceptable
     I'm tempted to leave it as is, and look into it further if a customer
     complains.
   
 * Sort out audio-to-stream synchronisation
   + Basic code is in there but it may not be critically damped at the moment
     (ie if stream is delivered at the correct rate it may still cause audio
     frames to play alternately fast and slow) - again, may be acceptable
     for now.
   - Needs server capable of delivering MPEG 2 data at a guaranteed rate,
     plus content whose correct bitrate is known.
   
 * Check that the STB can cope with a 7 Mbit stream, with a 16 colour overlay
   - needs server capable of delivering at this rate
   - needs content encoded at this rate (we're talking to Telecom Finland
     about this)
   - may work on ARM7500FE based systems, but not with ARM7500?

 * Sort out slow-motion modes
   * May not be required - the DEC server doesn't support it, ICL does
   - Not even started on coding for this yet - it's a lot more tricky than
     on CL450, where you just issued the SlowMotion command and that was it -
     here you have to manually start and stop the decoder.
   - Initial information from LSI Logic suggests that it may not be possible
     to play MPEG 2 material at even ratios such as 1/2, 1/4, because you end
     up having to display bottom field pictures on the top field. I haven't
     checked this out yet (on existing STBs we support 1/2, 1/3 and 1/4
     where the server allows it).

 * Replace SWI-based data-passing interface (MPEGVideo/Audio_FullPackets)
   with registered-handler-based one, to speed up the system performance
   (and therefore support higher bit rates). The same interface can also
   provide access to private streams. However it is easier to use this new
   interface just for private data, so if the extra performance is not
   required, it may not be worth making the video and audio decoders use
   this too.
    + The MPEGTrans module now checks against the list of registered program
      element handlers when processing a packet, so private data can be
      handled now, but it still treats video + audio specially.
    * Create handler entry point in MPEG2Video module for video data, and
      register it. Need to do at least the open, data transfer and close
      routines. The others can probably stay as SWIs for the time being.
      => about 2 days
    
Probably not required for STB2/2:

 * Provide proper support for selecting a given program out of a
   multi-program stream - may require hardware program filtering as on the
   DVB card. Jim Westwood is working on converting the DVB hardware to work
   with cable modems.
   
Other worries:

 - Apart from the material we have already recorded to disc from the various
   satellites, the only continuous content we have is the test broadcast of
   VH-1, MTV etc. At any time, this is liable to go off air, or become
   scrambled. (This has happened with several other satellites we used to get
   data from, such as Canal+, which has started scrambling since it went
   commercial).
