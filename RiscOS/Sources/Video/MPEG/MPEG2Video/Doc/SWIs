VideoOpenStream		; open stream
 in:	r0 = flags
	r1 = control stream handle
	r2 -> video parameters structure

 out:	r0 = video stream handle

VideoFullPackets	; new data
 in:	r0 = flags
	r1 = video stream handle
	r2 -> one or more linked bitstream packets

VideoCloseStream	; close stream
 This call performs the following operations:
  - If in pause mode, it delinks all full packets from the chain and frees
    them.
  - If not in pause mode, then it waits for all data to have been sent
    (it needs to drop into user mode for this to happen, so that callbacks go
    off (yuk!))

  It is assumed that no more MPEGVideo_FullPackets calls will be made once
 this call has started (MPEGControl module should ensure this).

 in:	r0 = flags
	r1 = Video stream handle

VideoPlay		; start playing
 in:	r0 = flags
	r1 = video stream handle

 out:  -

VideoSetSpeed		; may encompass pause/slow/fast/rewind
 in:	r0 = flags
	r1 = video stream handle
	r2 = speed indicator
	       0    = paused
	       1    = normal speed
	       2-8  = 1/2 to 1/8 slow motion

CardControl		; general control of MPEG card (used by audio module)
	r0 = reason code
	  0 ClaimAudioIRQ		; Bad reason code
	  1 ReleaseAudioIRQ		; Bad reason code
	  2 UpdateControlRegisterMPEG1Style
		 in:	r0 = reason code (2=Update Control register)
			r1 = EOR mask
			r2 = AND mask

		 out:	r1 = old value of control register
			r2 = new value of control register

		 Performs CR = (CR AND r2) EOR r1

	  3 ControlPowerDown		; Bad reason code
	  4 SendMacroCommand		; Bad reason code
	  5 SetColourMode		; Bad reason code
	  6 ReadStatusRegister
		in:	r0 = reason code (6=Read status register)

		out:	r1 = value of status register (actually two 8-bit
			     registers combined into 16)


VideoSetSCR		; set SCR value in L64002
 in:	r0 = flags
	r1 = bits 0..31 of SCR
	r2 = bit 32 of SCR

ReadParameters		; read various parameters
 in:	r0 = reason code
	  0 => read time code and temporal reference
	       out: r1 = time code: bits 0..5	= time_code_pictures
				    bits 6..11  = time_code_seconds
				    bits 12..17 = time_code_minutes
				    bits 18..22 = time_code_hours
				    bit  23	= drop_frame_flag
		    r2 = temporal_reference
	  1 => read direct access parameters for SetSCR
	       out: r1 = address of SetSCR routine
		    r2 = workspace value for SetSCR routine
	  2 => read various locations
		in: r1 = index of location to read:
			  0 => CompletionTime
			  1 => MaxCompletionTime
	       out: r2 = value
	  3 => read current SCR value
		out: r1 = bits 0..31 of SCR
		     r2 = bit  32    of SCR
	  4 => read buffer fullness
		out: r1 = number of bytes in internal buffer
	  5 => check display ready
		out: r1 = 1 if 1st picture has been displayed yet, 0 if not

VideoResetStream	; discard data and reset
 in:	r0 = flags
	  bit 0 set => video data in new stream
	  bit 1 set => audio data in new stream
	r1 = video stream handle

 out:	r2 = estimate of number of bytes discarded

 In this implementation it also resets the audio system as well, since we
 have to reset the whole L64002 to do this. If an audio stream is open at the
 time, then, in the anticipation that we will shortly be getting an
 MPEGAudio_ResetStream, we first find out how much audio data is being thrown
 away from the audio channel buffer, and save this away in the variable
 AudioDiscardedDataCount.

 When the MPEGAudio_ResetStream is issued, we see that the variable is
 non-zero, and use that value, and don't reset the device. However we do at
 that point free all the audio packets, adding onto this length. We then set
 the variable back to -1.

DisplayStill		; display 2-field MPEG still picture
 in:	r0 = flags

VideoStats		; return statistics
 in:	r0 = flags (zero at present)
	r1 = video stream handle, or zero for stream-independent vars
	r2 -> list of statistic tags, terminated by -1
	r3 -> word-aligned buffer to dump data
	r4 = size of buffer (in bytes)

 out:
	r3 -> after last byte put into buffer
	r4 = entry r4 - total size of entries requested, whether or not they
             were put in buffer
