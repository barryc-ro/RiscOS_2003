; > Interface

 This document describes a new internal interface for fast passing of data
from the MPEGTrans module to the elementary stream handler modules, such as
MPEGVideo.

 It's not worth doing for non-transport-stream work as other types of streams
generally have reasonable size packets, so there's not as much overhead per
byte of data, whereas transport stream packets are at most 184 bytes of
payload.

 On MPEGControl_OpenStream a service call is issued:-

	Service_MPEGControlOpenStream

 On entry

	r1 = service reason
	r2 = control stream handle

 On exit

	All registers preserved (service must not be claimed)

 In response to this service elementary stream decoding modules issue
SWI MPEGControl_RegisterStreamHandler to register interest in a particular
stream type for this opened stream - initially this will be based on the
stream type assignments specified in table 2-36 of the MPEG 2 Systems spec
(ISO/IEC 13818-1), although it might need to be extendable to allow the
handler to intercept data on an absolute PID number.

	SWI MPEGControl_RegisterStreamHandler
 
 On entry

	r0 = flags:
	    bit 0 set => MPEGTrans module should skip adaptation fields?
	    Other bits yet to be defined
	r1 = control stream handle
	r2 = internal stream handle
        r3 -> stream handler descriptor, containing the following
              information:-
              		stream_type
              		entry address for handler
              		workspace pointer for handler (or should this be in
              		 a separate register, rather than in descriptor?)

 On exit
	
	All registers preserved

 If a module needs to intercept multiple stream types, it needs to call this
SWI multiple times.

 When data of a registered stream type is received by the MPEGTrans module,
the appropriate entry address is called as follows:-

 On entry

	r0 = flags:
	    bit 0 set => buffer end marker (not real data) - see below
	    bit 1 set => uncorrectable continuity counter discontinuity?
	    Other bits yet to be defined
	r1 = control stream handle
	r2 -> start of data block (or buffer end free routine if bit 0 set)
	r3 = length of data block (in bytes)
	r4 = 32 bits of transport packet header
	r12 = workspace pointer for handler

 On exit
	Possibly V set indicates r0 -> error block, but not sure yet

 The old system of passing data from the MPEGControl module to the
MPEGVideo/Audio modules was by means of the SWIs MPEGVideo/Audio_FullPackets.
As well as having to issue this SWI for each packet (although it could have
bundled them up into multiple packets), the elementary module also had to
call the MPEGTrans module to free each packet (ie indicate that all the data
in the packet had been used). On this call the MPEGTrans module would
decrement a packet count for the buffer containing the packet, and if zero,
would return the buffer to the client.

 However, this is a rather inefficient way of doing things. All the
MPEGTrans module is interested in is when all the data in the buffer has been
used. This can be achieved by the MPEGTrans module keeping a record of which
stream handlers have been passed data out of a given buffer, and when all the
data in the buffer has been parsed, to send each of the relevant stream
handlers a buffer end marker message, indicating that this buffer has no more
data on that stream type. In the stream handler this will get queued along
with the other data passing messages, and when the data stuffing code in the
handler reaches one of these markers, it calls the MPEGTrans module to tell
it that it has used all the data up to there.

 (Note: this technique could also be applied to MPEG-1 video inside an MPEG-2
TS, eg on Westminster Cable, and might make the system work better at 3Mbit).

Issues:

 Should the other messages, both stream_type-independent (ie ResetStream,
SetSpeed) and/or stream_type-dependent (ie MuteSound, SoundVolume)