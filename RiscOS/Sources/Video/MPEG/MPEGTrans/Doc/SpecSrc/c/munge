#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define MAX_LINE_LEN 256

static char linebuf [MAX_LINE_LEN];
static char *infile = "";
static char *outfile = "";
static char *defined = "";

static void read_arguments (int argc, char *argv[]);


int main (int argc, char *argv[])
{
  FILE *fin;
  FILE *fout;
  int strip = 0; /* initial state is to copy every line */
  
  read_arguments (argc, argv);
  if (*infile == '\0') fin = stdin; else fin = fopen (infile, "r");
  if (fin == NULL)
  {
    fprintf (stderr, "Cannot open input file\n");
    exit (EXIT_FAILURE);
  }
  if (*outfile == '\0') fout = stdout; else fout = fopen (outfile, "w");
  if (fout == NULL)
  {
    fprintf (stderr, "Cannot open output file\n");
    exit (EXIT_FAILURE);
  }
  
  while (fgets (linebuf, MAX_LINE_LEN, fin) != NULL)
  {
    char *ptr = linebuf;
    while (*ptr++ >= ' ');
    ptr[-1] = '\0'; /* null-terminate the line */
    if (strncmp (linebuf, "#ifdef ", 7) == 0)
    {
      strip = strcmp (linebuf + 7, defined);
    }
    else if (strcmp (linebuf, "#else") == 0)
    {
      strip = !strip;
    }
    else if (strcmp (linebuf, "#endif") == 0)
    {
      strip = 0;
    }
    else /* normal line */
    {
      if (strip == 0)
      {
        fprintf (fout, "%s\n", linebuf);
      }
    }
  }
  
  fclose (fout);
  fclose (fin);
  
  exit (EXIT_SUCCESS);
}

static void read_arguments (int argc, char *argv[])
{
  int arg;
  for (arg=1; arg<argc; arg++)
  {
    char *thisarg=argv[arg];
    if (thisarg[0] == '-')
    {
      switch (thisarg[1])
      {
        case 'D':
          /* Defined symbol, for compatibility with cc */
          /* Note that we're only supporting one symbol - that's all we need */
          if (arg<argc) defined = thisarg + 2;
          break;
        case 'h':
          /* List syntax */
          fprintf (stderr, "Usage: munge [options] infile\n\n");
          fprintf (stderr, "Options:\n\n");
          fprintf (stderr, "-h              Outputs this information\n");
          fprintf (stderr, "-o <filename>   Specifies output file\n");
          fprintf (stderr, "-D<symbol>      Specifies preprocessor symbol\n");
          fprintf (stderr, "                (interpreted as in C)\n");
          exit (EXIT_SUCCESS);
          break;
        case 'o':
          /* Output filename */
          arg++;
          if (arg<argc) outfile = argv[arg];
          break;
        default:
          /* Others are ignored */
          break;
      }
    }
    else
    {
      /* Input filename */
      infile = thisarg;
    }
  }
}
