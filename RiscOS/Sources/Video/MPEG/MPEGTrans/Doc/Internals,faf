 <html>
 <head>
 <title>MPEGControl/MPEGTrans Internals</title>
 </head>
 <body bgcolor="white">
 <h1>MPEGControl/MPEGTrans Internals</h1>
 <pre>
	Drawing Number:		???
	Issue:			1.01
	Date:			07-Jan-1999
	Status:			Draft
	Change:			N/A
	Author:			<a href="mailto:tdobson@acorn.com">Tim Dobson</a>
 	Master format:		HTML
 </pre>
 <h2>Introduction</h2>
 MPEG video and audio streams can be multiplexed into a combined stream in
a number of different ways: MPEG1 System Stream, MPEG2 Program Stream,
MPEG2 Transport Stream.<p>
 In the Acorn set-top boxes, the MPEGControl/MPEGTrans modules are
responsible for demultiplexing these into their component streams and
delivering these to the elementary stream handlers.<p>
 Of these, the MPEGTrans module handles only MPEG2 Transport Streams; the
MPEGControl module handles the others (optionally also including raw
elementary streams).<p>
 Both modules have the same module name and share the same SWI chunk and
implement largely the same interface, details of which can be found in the
STB22xx series PRM (knowledge of which will be assumed throughout this
document). Only one of the modules can be loaded at any one time.
 This document describes the internal operation of these modules, and
explains some of the design decisions which were involved in their
construction.<p>

 <h2>Workspace</h2>
 Most of MPEGControl/MPEGTrans's workspace is related to the stream which is
playing. Current implementations of the module can only handle one stream
being open at one time, but in order not to exclude that possibility, all
stream-specific workspace is stored in a <cite>control stream handle
structure</cite>, the base of which is returned as the control stream handle
from MPEGControl_OpenStream. (All offsets within this structure have
the prefix 'CSH_'.) However, currently the structure is not allocated
dynamically on MPEGControl_OpenStream, but is included statically within the
module workspace. Any future implementation which wished to support multiple
open streams would have to change this. The module does not currently check
whether a stream is already open when OpenStream is called - it just returns
the same handle each time. In addition a number of the SWI calls: Play,
SetSpeed, MuteSound, SoundVolume, FullBuffers and CloseStream, which are
supposed to take a control stream handle in r1 on entry, actually override
the passed-in value with a pointer the static control stream handle
structure, mostly for historical reasons. (At one stage one of the VSP
modules was calling the MPEGControl module without setting up r1 - I'm not
sure if this is still the case.)

 <h2>The use of coroutines</h2>
Multiplexed MPEG streams split the component streams into packets, and
prepend headers to each packet. However, the mechanics of the delivery of
this data over a network may result in the multiplexed data being delivered
in buffers whose boundaries are not aligned with the MPEG packet boundaries.
Therefore it is a requirement of the MPEGControl_FullBuffers call that it can
accept such buffers.<p>
 This makes it harder to parse the packet headers, because the buffer data
may run out at any byte position while parsing any item in the header.
Ideally one would want to copy the partial packet headers into a separate
buffer and only parse them when a complete packet header was available.
However it's rather messy since packet headers are of variable length, so you
need to preparse them to determine the length.<p>
 An alternative to this is to somehow save the parsing state between calls to
MPEGControl_FullBuffers. One way to do this would to have a complicated state
machine, with one state for each byte position in the header. However I
decided that a more natural and efficient alternative would be to effectively
give the parser code its own coroutine thread and return stack. This allows
the parser to be written in a very natural way, with nested subroutines to
parse particular syntactic items that occur more than once in a header.<p>
 In an operating system that supports coroutines, normally each coroutine has
its own individual stack area. When a coroutine switch is requested, the
current thread's working registers (including the program counter) are pushed
onto its stack, then the stack pointer is switched over to a second thread's
stack, then its working registers and PC are pulled off its stack, and
execution continues where the second thread left off last time.<p>
 Unfortunately RISC OS provides no support for coroutines, so some
improvisation was required. Since MPEGControl_FullBuffers is a SWI call, it
is entered in supervisor mode, so you effectively need a second supervisor
stack chunk. The original implementation of the code in fact used the lower
4K of the existing 8K supervisor stack area for this purpose. However, this
ran into difficulties with heavy use of the main stack by the Internet code,
which sometimes overwrote my auxiliary stack.<p>
 The implementation was therefore changed to put the auxiliary stack
immediately below the current level of the main stack, and to copy this
auxiliary stack away into an RMA block when execution is switched back to the
main thread.<p>
 The process works like this:
 <ol>
 <li>MPEGControl_FullBuffers is called:
 <pre>
                   ----------------------
                   |   Main SVC stack   |
  Stack pointer -> ----------------------
 </pre>
 <li>The working registers (r5-r11) and the link register are pushed onto the
stack:
 <pre>
                   ----------------------
                   |   Main SVC stack   |
                   ----------------------
                   | Working registers  |
                   |   (main context)   |
  Stack pointer -> ----------------------
 </pre>
 <li>The stack pointer is saved in ExternalSP, and then the auxiliary stack
block (including the auxiliary working registers and PC) is pushed onto the
stack:
 <pre>
                   ----------------------
                   |   Main SVC stack   |
                   ----------------------
                   | Working registers  |
                   |   (main context)   |
     ExternalSP -> ----------------------
                   |  Auxiliary stack   |
                   ----------------------
                   | Working registers  |
                   |(auxiliary context) |
   Stack pointer ->----------------------
 </pre>
 <li>The working registers and PC are then pulled off the stack, and
execution of the stream parser continues. Eventually the parser runs out of
data (the amount of data on the auxiliary stack may be different from that on
entry). At this point, the working registers and PC are again saved on the
stack.
 <li>The RMA block which holds the auxiliary stack block is extended if
necessary, and then the auxiliary stack data is pulled off the SVC stack and
stored back into the RMA block, until the stack pointer = ExternalSP.
 <li>The (main) working registers and PC are then pulled off the stack, and
control returns to the caller of MPEGControl_FullBuffers.
 </ol>
 <h3>Limitations of this technique</h3>
One limitation of the above technique is that the routines which are executed
while in the auxiliary context must not keep pointers to stack-based objects
which need to be maintained across a coroutine call. This is because
MPEGControl_FullBuffers may be entered with differing amounts of data already
on the stack, and hence the auxiliary stack contents may get stored at
different addresses on different calls to the parser. This doesn't usually
present any problems.
 <h2>Program element handlers (MPEGTrans only)</h2>
In June 1996 the concept of a <cite>program element handler</cite> was added
to MPEGTrans. Before that time, only video and audio data could be extracted
from the multiplexed stream; the data was delivered by means of hardwired
SWIs with the MPEGVideo_ or MPEGAudio_ prefix. This excluded the possibility
of extracting private data streams, unless a separate group of SWIs were
allocated for each type of private data. In addition, because transport
stream packets are relatively small (usually 184 bytes of payload in each),
the overhead of calling MPEGVideo_FullPackets for each packet becomes
significant.<p>
 Because of that, the program element handler was invented, to provide a
lower-overhead data delivery mechanism, and to generalise the interface
to allow private data of any kind to be handled in the same way as video and
audio. The MPEGTrans module maintains a global list of program element
handlers (GlobalPEHList). Each item on this list is a <cite>program
element handler structure</cite>, which has the following structure:
 <table border="1">
 <tr valign="top"><td>PEH_Link<td>Link to the next handler on the global list</td></tr>
 <tr valign="top"><td>PEH_Flags<td>Various flags relating to the handler:
     <table border="0" cellspacing="2">
     <tr valign="top"><th>Bit<th align="left">Meaning when set</th></tr>
     <tr valign="top"><td>0<td>Pass adaptation fields as part of packet payload (not implemented)</td></tr>
     <tr valign="top"><td>1<td>Pass PES packet headers as part of packet payload</td></tr>
     <tr valign="top"><td>2<td>Pass TS header as part of packet payload (not implemented)</td></tr>
     <tr valign="top"><td>3<td>PEH_StreamType is a PID value to match; otherwise PEH_StreamType is the value of stream_type to match in the PMT.</td></tr>
     </table>
     </td></tr>
 <tr valign="top"><td>PEH_StreamType<td>The value of stream_type to match, if bit 3 of
PEH_Flags is clear; otherwise the absolute value of PID to match</td></tr>
 <tr valign="top"><td>PEH_HandlerWS<td>Pointer to the handler's workspace to be passed in r12
when handler is called</td></tr>
 <tr valign="top"><td>PEH_HandlerCode<td>Pointer to the handler's entry point</td></tr>
 </table>
 Calls to RegisterProgramElementHandler and DeRegisterProgramElementHandler
add or remove items from this list respectively.<p>
 When MPEGControl_OpenStream is called, each handler on the global list is
called, to give it the option of becoming active for the newly created
stream. If the handler returns a non-zero program element stream handle from
this call, then a <cite>program element PID structure</cite> is initialised,
and added to the list of active handlers for this stream. (The head of this
list is stored in CSH_ListOfPEHPID.) The format of this structure is:
 <table border="1">
 <tr valign="top"><td>PEHPID_Link<td>Link to the next PEHPID on the list for this stream</td></tr>
 <tr valign="top"><td>PEHPID_Flags<td>Flags relevant to the handler for this stream (none allocated so far)</td></tr>
 <tr valign="top"><td>PEHPID_ProgramElementStreamHandle<td>Stream handle to use when talking to this handler for this stream</td></tr>
 <tr valign="top"><td>PEHPID_PID<td>The PID that this stream type is currently using, or -1 if the PID has not yet been determined (this field may change during life of
stream)</td></tr>
 <tr valign="top"><td>PEHPID_PIDSlot<td>Filter index used in the DVB capture card, allocated at time of OpenStream (see section on DVB support)</td></tr>
 <tr valign="top"><td>PEHPID_PEH<td>Pointer to the corresponding program element handler
structure</td></tr>
 </table>

When data is subsequently passed to MPEGControl_FullBuffers, if a packet
matches the PID/stream_type in one of the PEHPID nodes, the corresponding
handler is called with the data transfer reason code.
 <h2>DVB support (MPEGTrans only)</h2>
Acorn has designed an expansion card (for internal research only at this
stage) which allows a multi-program transport stream to be fed in (eg from a
satellite, terrestrial or cable tuner) and which captures packets on up to 32
different PIDs, while discarding the rest. This is necessary to reduce the
processor and I/O bandwidth required to handle a stream which may be more
than 40Mbits/s, which the processor could not possibly read and process
itself. By using this hardware pre-filter, the data throughput can be
reduced to manageable levels (a single program is typically about 4 to
6&nbsp;Mbits/s). The data is deposited into memory on the card, which is then
read into main memory under interrupt. Each 188-byte TS packet which is
captured is preceded by a single 32-bit status word, which contains a time
stamp indicating when the packet was captured, together with 5 bits which
indicate which PID filter the packet matched. The MPEGTrans module doesn't
actually use any of this information, but it needs to know that the stream
came from the DVB capture card. This is indicated by bit 9 of the stream
flags. This makes the MPEGTrans module:
 <ol type="a">
 <li>skip over the extra word before the start of each TS packet;
 <li>issue DVBControl SWIs to enable and disable the PID filters.
 </ol>
Of the 32 PID filters available, the following are statically allocated:
 <ol start=0>
 <li>Video
 <li>Audio
 <li>PAT
 <li>PMT
 </ol>
An additional filter slot is allocated for each PEHPID that is active,
starting with 4 upwards.
See the DVBControl documentation for details of the DVBControl SWIs.
 <h2>Limitations</h2>
 The continuity_counter field is not checked, therefore if packets have been
deliberately duplicated to improve reliability, this will cause errors as
both packets will be processed.<p>
 The CRC on PAT and PMT is not checked.<p>
 The code doesn't cope with PAT or PMT sections which span more than 1 TS
packet, or with multiple-section PATs.<p>
 The code doesn't cope with PES packet headers which span more than 1 TS
packet.<p>

 The program element handler interface doesn't cope well if the PMT for the
selected program has more than one elementary stream of the same type, and
that type has been registered with MPEGTrans. It will overwrite the
PEHPID_PID entry with each successive PID it finds, so it will end up
pointing at the last stream of that type. In particular, if there is more
than 1 video stream in the same program, then one PID filter will be
allocated for the hardwired video stream (which will select the one specified
by SelectProgram), and another PID filter will be allocated for the last
video stream, for the program element handler instantiation. This could
result in the MPEG2Video module getting passed data from both streams, one
lot via MPEGVideo_FullPackets, and another lot via the program element
handler interface. Fortunately, in the case of multiple audio streams within
the same program, the MPEG2Video module doesn't bother registering handlers
for these, so we just get the hardwired audio coming through, as selected by
the SelectProgram.<p>
 <hr>
 <I>Copyright &copy; 1999 Acorn Computers Limited</I>
 </body>
 </html>
