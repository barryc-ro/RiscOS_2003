#include <stdlib.h>

#include "swis.h"
#include "Global/Services.h"
#include "ModHdr.h"

#ifdef DEBUG
#include "DWrite.h"
static char string [256];
#endif

#ifdef TELEFONICA
#include <string.h>
#include "libTIDcrypt.h"
#endif

#define IGNORE(x) (void) x /* Stop compiler warnings about unused variables */

/* SWI number constants */
#define MPEGDescramble_RegisterHandlers   0x566C0
#define MPEGDescramble_DeregisterHandlers 0x566C1

#ifdef TELEFONICA
/* For their demo content */
static unsigned char initKey[] =
{
  0x08, 0xf6, 0x72, 0x22,
  0x08, 0xf6, 0x72, 0x22,
  0x89, 0xae, 0x13, 0x32,
  0xc1, 0xc2, 0xee, 0xff
};
static unsigned char Key[33];
#endif

/**********************************************************************
 *
 * Open stream handler. Called when a stream opens (starts playing).
 */
static unsigned int OpenStream_Handler (unsigned int flags, unsigned int csh)
{
  unsigned int *handle;

#ifdef DEBUG
  DWrite_Write0 ("Open: flags =");
  DWrite_WriteHex8 (flags);
  DWrite_Write0 (", csh =");
  DWrite_WriteHex8 (csh);
  DWrite_NewLine ();
#endif

#ifdef XOR_DEMO
  /* Claim some workspace for this stream - passed into other fns as 'handle' */
  handle = malloc (12);

  /* Generate a few 'keys' for our scrambling algorithm */
  if (handle)
  {
    handle[0] = 0xDEADDEAD;
    handle[1] = 0x01234567;
    handle[2] = 0x3C3C3C3C;
  }
#endif

#ifdef TELEFONICA
  /* Claim a block for them to descramble into */
  handle = malloc (184);
#endif

  return( (unsigned int) handle );
}


/**********************************************************************
 *
 * Reset stream handler. Called after a play speed transition, etc.
 */
static void ResetStream_Handler (unsigned int flags, unsigned int handle)
{
  IGNORE (flags);
  IGNORE (handle);

#ifdef DEBUG
  DWrite_Write0 ("Reset: flags =");
  DWrite_WriteHex8 (flags);
  DWrite_Write0 (", handle =");
  DWrite_WriteHex8 (handle);
  DWrite_NewLine ();
#endif

#ifdef TELEFONICA
  /* We don't need to do anything */
#endif

}


/**********************************************************************
 *
 * Close stream handler. Called when the stream closes (i.e. stops).
 */
static void CloseStream_Handler (unsigned int flags, unsigned int handle)
{
  IGNORE (flags);
  IGNORE (handle);

#ifdef DEBUG
  DWrite_Write0 ("Close: flags =");
  DWrite_WriteHex8 (flags);
  DWrite_Write0 (", handle =");
  DWrite_WriteHex8 (handle);
  DWrite_NewLine ();
#endif

#ifdef XOR_DEMO
  if (handle) free( (char *)handle );
#endif

#ifdef TELEFONICA
  free ((char *) handle);
#endif

}


/**********************************************************************
 *
 * TS packet payload descrambler handler.
 */
static unsigned int Descrambler_Handler (unsigned int flags, unsigned int handle, char *buffer, unsigned int size)
{
  unsigned int out_val  = 0;
#ifdef XOR_DEMO
  unsigned int key      = *((unsigned int *)(handle + (flags - 1) * sizeof(int))); /* Read key from workspace given flags */
  unsigned int *pointer = (unsigned int *)buffer;                                  /* Pointer to a word in buffer */
  unsigned int *end_pos = (unsigned int *)(buffer + (size & ~3));                  /* Pointer to word after last word in buffer */
#endif

#ifdef XOR_DEMO
  /* Do a simple exclusive-OR descramble of all words in buffer, given the appropriate key */
  while (pointer < end_pos)
  {
    *pointer = *pointer ^ key;
    pointer ++;
  }
  out_val = 1; /* Success */
#endif

#ifdef DEBUG
  DWrite_Write0 ("Descramble: flags =");
  DWrite_WriteHex8 (flags);
  DWrite_Write0 (", handle =");
  DWrite_WriteHex8 (handle);
  DWrite_Write0 (", buffer =");
  DWrite_WriteHex8 ((int)buffer);
  DWrite_Write0 (", size =");
  DWrite_WriteHex2 (size);
  DWrite_Write0 (" buffer contains");
  DWrite_WriteHex2 (buffer[0]);
  DWrite_WriteHex2 (buffer[1]);
  DWrite_WriteHex2 (buffer[2]);
  DWrite_WriteHex2 (buffer[3]);
  DWrite_Write0 (" ...");
  DWrite_WriteHex2 (buffer[size-4]);
  DWrite_WriteHex2 (buffer[size-3]);
  DWrite_WriteHex2 (buffer[size-2]);
  DWrite_WriteHex2 (buffer[size-1]);
  DWrite_NewLine ();
  out_val = 1; /* Success */
#endif

#ifdef TELEFONICA
  /* If our malloc failed, return a failure indication */
  if (handle == 0) return 0;

  /* Call the appropriate descrambling function */
  switch (flags)
  {
    case 1: /* 2_01 */
    {
      (void) TIDDecryptBlock (Key, (const BYTE *) buffer, size, (BYTE *) handle);
      break;
    }
    case 2: /* 2_10 */
    {
      (void) TIDDecryptBlock10 (Key, (const BYTE *) buffer, size, (BYTE *) handle);
      break;
    }
    /* Unknown flag states result in a failure indication */
    default: /* 2_11 or 2_00 if something went wrong! */
      out_val = 0;
  }

  memcpy (buffer, (char *) handle, size);
  out_val = 1; /* Success */
#endif

  /* Return non-zero if we descrambled OK. Pass payload on to MPEG decoder.
   * Return zero if we failed to descamble the payload. It will be discarded.
   */
  return out_val;
}


/* Define the block of function pointers to register with the MPEGDescramble
 * module. This will allow it to call our functions directly. These functions
 * must be implemented in the same C program (i.e. module) as the SWI call
 * which registers them.
 */
static struct
{
  unsigned int (*open)       (unsigned int flags, unsigned int csh);
  void         (*reset)      (unsigned int flags, unsigned int handle);
  void         (*close)      (unsigned int flags, unsigned int handle);
  unsigned int (*descramble) (unsigned int flags, unsigned int handle, char *buffer, unsigned int size);
}
fns = { OpenStream_Handler,
        ResetStream_Handler,
        CloseStream_Handler,
        Descrambler_Handler
      };


/**********************************************************************
 *
 * Module initialisation code. Register our handler functions with
 * the MPEGDescramble module.
 */
_kernel_oserror *Module_Init (const char *cmd_tail, int podule_base, void *pw)
{
  IGNORE (cmd_tail);
  IGNORE (podule_base);
  IGNORE (pw);

#ifdef DEBUG
  DWrite_Init ();
#endif

#ifdef TELEFONICA
  /* For their demo content */
//  IRD_IP_Addr[0] = 0x01;
//  IRD_IP_Addr[1] = 0x23;
//  IRD_IP_Addr[2] = 0x43;
//  IRD_IP_Addr[3] = 0x76;
  IRD_IP_Addr[0] = 136;
  IRD_IP_Addr[1] = 170;
  IRD_IP_Addr[2] = 32;
  IRD_IP_Addr[3] = 105;
#endif

  _swix (MPEGDescramble_RegisterHandlers, _INR(0,1), 0, &fns);
  return 0;
}


/**********************************************************************
 *
 * Module finalisation code. Deregister our handler functions with
 * the MPEGDescramble module.
 */
_kernel_oserror *Module_Final (int fatal, int podule, void *pw)
{
  IGNORE (fatal);
  IGNORE (podule);
  IGNORE (pw);

  _swix (MPEGDescramble_DeregisterHandlers, _INR(0,1), 0, &fns);
  return 0;
}


/**********************************************************************
 *
 * Handle an MPEG service call. Was it MPEGDescramble (re)initialising?
 * If it was, we will need to re-register with the MPEGDescramble module.
 */
static void MPEG_Service(int reason, void *pw)
{
  IGNORE (pw);

  switch (reason & 0xFE)
  {
    case 1<<1: /* MPEGControl module has (re)initialised    */
    case 8<<1: /* MPEGDescramble module has (re)initialised */
    {
      _swix (MPEGDescramble_RegisterHandlers, _INR(0,1), 0, &fns);
      break;
    }
  }
}


/**********************************************************************
 *
 * Module service call handler.
 */
void Module_Service(int service_number, _kernel_swi_regs *r, void *pw)
{
  switch (service_number)
  {
    /* Spot when some important module (re)initialises */
    case Service_MPEGControlStarting:
    {
      MPEG_Service((int) r->r[0], pw);
      break;
    }
#ifdef DEBUG
    /* Only required for debugging */
    case Service_ModeChange:
    {
      DWrite_Init();
      break;
    }
#endif
  }
}


#ifdef TELEFONICA
/**********************************************************************
 *
 * *TID_SetKey handler.
 */
static _kernel_oserror *TIDSetKey(const char *arg_string)
{
  printf("Arg '%s'\n",arg_string);
  (void) TIDGenK(initKey, (const BYTE *) arg_string, 32, Key);
  printf("Key '%s'\n",Key);
  return NULL;
}
#endif


#ifdef TELEFONICA
/**********************************************************************
 *
 * Module *command handler.
 */
_kernel_oserror *Module_Command(const char *arg_string, int argc, int cmd_no, void *pw)
{
  IGNORE (argc);
  IGNORE (pw);

  switch (cmd_no)
  {
    case CMD_TIDSetKey:
      return TIDSetKey(arg_string);
    default:
      return NULL;
  }
}
#endif
