; > Module
; Source for MPEGPEH Module
; Output to file version

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Who  Version       Description
; ----       ---  -------       -----------
; 27-Jun-96  TMD  0.01		Created from MPEGCtFile
; 03-Jul-96  TMD  0.02		Added optional flags parameter to AddPEH
; 13-Feb-98  TMD  0.03		Added detection of Service_MPEGControlStarting
;

        LEADR   Module_LoadAddr

TAB     *       9
LF      *       10
FF      *       12
CR      *       13

; PEHList node

			^	0
PEHList_Link		#	4	; link to next one
PEHList_StreamID	#	4	; stream ID (either stream type or PID)
PEHList_Flags		#	4	; flags
PEHList_HandlerWS	#	4	; pointer to handler WS, which is actually just the filename string
PEHListSize		*	:INDEX: @

                        ^       0, wp

GlobalPEHList		#	4

Module_WorkspaceSize * :INDEX: @

; ** Debugging macros **

        GBLL    debug
debug   SETL    {FALSE}

        MACRO
        DLine   $string, $cc, $inverse
 [ debug
        DLINE   $string, $cc, $inverse
 ]
        MEND

        MACRO
        DReg    $reg, $string, $cc, $routine
 [ debug
        DREG    $reg, $string, $cc, $routine
 ]
        MEND

; **************** Module code starts here **********************

Module_BaseAddr

        &       0                               ; no app start entry
        &       Mod_Init    -Module_BaseAddr
        &       Mod_Die     -Module_BaseAddr
        &       Mod_Service -Module_BaseAddr
        &       Mod_Title   -Module_BaseAddr
        &       Mod_HelpStr -Module_BaseAddr
        &       Mod_HC_Table-Module_BaseAddr
        &       0				; SWI chunk
        &       0				; SWI handler
        &       0				; SWI name table
        &       0                               ; no swi name decode entry

Mod_Title
        =       "MPEGPEH", 0

Mod_HelpStr
        =       "MPEGPEH", TAB, "0.03 (13 Feb 1998)"
	=	0
        ALIGN

Mod_HC_Table
	Command AddPEH, 3, 2			; add program element handler
	Command RemovePEH, 2, 1			; remove program element handler
	=	0

AddPEH_Help
	=	"*AddPEH adds a program element handler", CR
AddPEH_Syntax
	=	"Syntax: *AddPEH <streamID> [<flags>] <filename>", 0
RemovePEH_Help
	=	"*RemovePEH removes a program element handler", CR
RemovePEH_Syntax
	=	"Syntax: *RemovePEH <streamID> [<flags>]", 0
	ALIGN

; **************************************************************************
;
;       Mod_Init - Initialisation entry
;

Mod_Init Entry
        LDR     r2, [R12]               ; have we got workspace yet ?
        TEQ     r2, #0
        BNE     %FT05

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =Module_WorkspaceSize
        SWI     XOS_Module
        EXIT    VS

; r2 -> workspace

        STR     r2, [r12]               ; save address in my workspace pointer,
                                        ; so Tutu can free it for me when I die
05
        MOV     r12, r2

        MOV     r0, #0
        STR     r0, GlobalPEHList

	CLRV
        EXIT

; RegisterHandlers will be called on Service_MPEGControlStarting.
; We go through our global list and re-register them all

RegisterHandlers Entry "r0-r4"
	LDR	r4, GlobalPEHList
10
	TEQ	r4, #0
	EXIT	EQ

	LDR	r0, [r4, #PEHList_Flags]
	LDR	r1, [r4, #PEHList_StreamID]
	ADR	r2, HandlerEntry
	LDR	r3, [r4, #PEHList_HandlerWS]
	SWI	XMPEGControl_RegisterProgramElementHandler

	LDR	r4, [r4, #PEHList_Link]
	B	%BT10

; **************************************************************************
;
;       Mod_Die - Die entry
;

Mod_Die Entry
        LDR     wp, [r12]

	LDR	r4, GlobalPEHList
10
	TEQ	r4, #0
	BEQ	%FT90

	LDR	r0, [r4, #PEHList_Flags]
	LDR	r1, [r4, #PEHList_StreamID]
	ADR	r2, HandlerEntry
	LDR	r3, [r4, #PEHList_HandlerWS]
	SWI	XMPEGControl_DeregisterProgramElementHandler

	MOV	r0, #ModHandReason_Free
	MOV	r2, r3			; free string block
	SWI	XOS_Module

	LDR	r5, [r4, #PEHList_Link] ; read link before freeing node

	MOV	r0, #ModHandReason_Free
	MOV	r2, r4			; free PEHList block
	SWI	XOS_Module
	MOV	r4, r5			; goto next node
	B	%BT10
90
        CLRV
        EXIT

; **************************************************************************
;
;       Mod_Service - Main entry point for services
;
; in:   R1 = service reason code
;
; out:  R1 = 0 if we claimed it
;

Mod_Service ROUT
	TEQ	r1, #Service_MPEGControlStarting
	MOVNE	pc, lr
	LDR	wp, [r12]
	B	RegisterHandlers

; **************************************************************************
;
;	AddPEH_Code - Entry point for *AddPEH command
;
; in:	r0 -> command line
;	r1 = number of parameters
;

AddPEH_Code Entry
	LDR	wp, [r12]

	MOV	r3, r1					; r3 = number of parameters
	MOV	r1, r0
	MOV	r0, #10 :OR: (1<<31)			; base 10
	SWI	XOS_ReadUnsigned			; check space or ctrl char termination
	EXIT	VS
	MOV	r6, r2					; save stream ID

; skip spaces after number

10
	LDRB	r0, [r1]
	TEQ	r0, #" "
	ADDEQ	r1, r1, #1
	BEQ	%BT10

; now check for extra (flags) parameter

	TEQ	r3, #2					; if 2 parameters (AddPEH <streamID> <filename>)
	MOVEQ	r5, #0					; then set flags to zero
	BEQ	%FT18					; and skip reading of flags

; must be 3 (AddPEH <streamID> <flags> <filename>) so read another number for flags word

	MOV	r0, #10					; base 10, no restriction on value
	SWI	XOS_ReadUnsigned
	EXIT	VS
	MOV	r5, r2					; flags = value

; skip spaces after number again

12
	LDRB	r0, [r1]
	TEQ	r0, #" "
	ADDEQ	r1, r1, #1
	BEQ	%BT12

18
; now check stream identifier is in range

	TST	r5, #PEHFlags_StreamIdentifiedByPID
	MOVEQ	r3, #256				; if a real stream type, then 0 to 255
	MOVNE	r3, #&2000				; if a PID, then 0 to &1FFF
	CMP	r6, r3
	BCS	NumberTooBig

; now find end of string

	MOV	r4, r1
20
	CMP	r0, #&20
	LDRCSB	r0, [r1, #1]!
	BCS	%BT20

; now r1 -> terminator

	SUB	r3, r1, r4		; r3 = length of string not including terminator
	ADD	r3, r3, #1		; add one on for terminator
	MOV	r0, #ModHandReason_Claim
	SWI	XOS_Module		; claim block to copy string into
	EXIT	VS

; copy string to RMA block

30
	SUBS	r3, r3, #1		; copy bytes 0..len-1
	LDRCSB	lr, [r4, r3]
	STRCSB	lr, [r2, r3]
	BCS	%BT30

; now allocate a PEH block

	MOV	r4, r2			; save pointer to string block
	MOV	r3, #PEHListSize
	MOV	r0, #ModHandReason_Claim
	SWI	XOS_Module
	BVS	%FT90			; failed to allocate PEHList block, so free string block and exit with error

	STR	r6, [r2, #PEHList_StreamID]	; store stream type
	STR	r5, [r2, #PEHList_Flags]	; store flags
	STR	r4, [r2, #PEHList_HandlerWS]	; store pointer to string block

; now register this handler

	MOV	r0, r5			; r0 = flags
	MOV	r1, r6			; r1 = stream type
	MOV	r5, r2			; save pointer to PEHList block
	ADR	r2, HandlerEntry
	MOV	r3, r4
	SWI	XMPEGControl_RegisterProgramElementHandler
	BVS	%FT85			; if fail, then must free PEHList block and string block

; now add entry onto global PEH list

	LDR	lr, GlobalPEHList
	STR	lr, [r5, #PEHList_Link]
	STR	r5, GlobalPEHList

	CLRV
	EXIT

; error during registration of handler - must free PEHList block, then string block

85
	Push	"r0"			; save original error pointer
	MOV	r2, r5			; pointer to PEHList block
	MOV	r0, #ModHandReason_Free
	SWI	XOS_Module
	Pull	"r0"			; restore error pointer

; error during claim of PEHList block - must free string block

90
	Push	"r0"			; save original error pointer
	MOV	r2, r4			; pointer to string block
	MOV	r0, #ModHandReason_Free
	SWI	XOS_Module
	Pull	"r0"			; restore error pointer
	SETV
	EXIT

NumberTooBig
	ADR	r0, NumberTooBigError
	SETV
	EXIT

NumberTooBigError
	&	0
	=	"StreamID out of range", 0
	ALIGN

; **************************************************************************
;
;	RemovePEH_Code - Remove a program element handler
;
; in:	r0 -> command line
;	r1 = number of parameters
;

RemovePEH_Code Entry
	LDR	wp, [r12]

	MOV	r3, r1					; r3 = number of parameters
	MOV	r1, r0
	MOV	r0, #10 :OR: (1<<31)			; base 10
	SWI	XOS_ReadUnsigned			; check space or ctrl char termination
	EXIT	VS
	MOV	r6, r2					; save stream ID

; skip spaces after number

10
	LDRB	r0, [r1]
	TEQ	r0, #" "
	ADDEQ	r1, r1, #1
	BEQ	%BT10

; now check for extra (flags) parameter

	TEQ	r3, #1					; if only one parameter
	MOVEQ	r5, #0					; then set flags to zero
	BEQ	%FT20

; must be 2 (RemovePEH <streamID> <flags>) so read another number for flags word

	MOV	r0, #10					; base 10, no restriction on value
	SWI	XOS_ReadUnsigned
	EXIT	VS
	MOV	r5, r2					; flags = value
20

; r6 is streamID and r5 is flags, so try to find them in our list

	ADR	r4, GlobalPEHList
	LDR	r3, [r4]
30
	TEQ	r3, #0			; no more PEHs?
	BEQ	%FT90			; then not found, so error
	LDR	lr, [r3, #PEHList_StreamID]
	TEQ	lr, r6			; does stream ID match
	LDREQ	lr, [r3, #PEHList_Flags]
	TEQEQ	lr, r5			; and flags match
	MOVNE	r4, r3			; no, so keep copy of prev
	LDRNE	r3, [r3, #PEHList_Link]	; find next
	BNE	%BT30			; and loop

	MOV	r0, r5			; deregister flags
	MOV	r1, r6			; stream type
	ADR	r2, HandlerEntry
	MOV	r5, r3			; save pointer to PEHList
	LDR	r3, [r3, #PEHList_HandlerWS]
	SWI	XMPEGControl_DeregisterProgramElementHandler
	EXIT	VS			; if error, assume not removed from list

; delink from list

	LDR	lr, [r5, #PEHList_Link]  ; prev->link = this->link
	STR	lr, [r4, #PEHList_Link]

; free string block

	MOV	r2, r3			; -> string block
	MOV	r0, #ModHandReason_Free
	SWI	XOS_Module

; free PEHList block

	MOV	r2, r5			; -> PEHList block
	MOV	r0, #ModHandReason_Free
	SWI	XOS_Module

	CLRV
	EXIT

90
	ADR	r0, HandlerNotFoundError
	SETV
	EXIT

HandlerNotFoundError
	&	0
	=	"Program element handler not found", 0
	ALIGN

; **************************************************************************
;
;	HandlerEntry - Entry point for program element handler
;
; in:	r0 = reason code
;	Other registers as appropriate
;
; out:	Depends on reason code

HandlerEntry ROUT
        CMP     r0, #(HandlerEntriesEnd-HandlerEntriesStart) :SHR: 2
        ADDCC   pc, pc, r0, LSL #2
        B       UnknownHandlerReason
HandlerEntriesStart
        B       OpenStream      ; open stream
	B	DataTransfer	; data transfer
        B       CloseStream     ; close stream
        B       Play            ; start playing
        B       SetSpeed        ; may encompass pause/slow/fast/rewind
	B	ResetStream	; discard data and reset devices
HandlerEntriesEnd

; For the time being, these are not recognised

Play
SetSpeed
ResetStream
UnknownHandlerReason
	ADR	r0, UnknownHandlerReasonError
	SETV
	MOV	pc, lr

UnknownHandlerReasonError
	&	0
	=	"Unknown handler reason code", 0
	ALIGN

; **************************************************************************
;
;	OpenStream
;
; in:	r0 = reason code (0)
;	r1 = stream flags
;	r2 = control stream handle
;	r3 = program element parameters structure
;	r12 -> string block, containing our filename
;
; out:	r0 = program element stream handle (=file handle in our module)
;

OpenStream Entry "r1"
	MOV	r0, #OSFind_OpenOut
	MOV	r1, r12
	SWI	XOS_Find
	EXIT				; exit with r0 = file handle, or r0->error and VS

; **************************************************************************
;
;	DataTransfer
;
; in:	r0 = reason code (1)
;	r1 = flags
;	r2 = program element stream handle
;	r3 -> packet descriptors
;	r12 -> string block, containing our filename
;
; out:	r0-r3 may be corrupted
;

DataTransfer Entry "r4-r6"
	MOV	r5, r3					; pointer to packet descriptors
        MOV	r1, r2					; file handle
10
	LDR	r2, [r5, #PacketDescriptor_Start]
	LDR	r3, [r5, #PacketDescriptor_Length]
        MOV     r0, #OSGBPB_WriteAtPTR
        SWI     XOS_GBPB
30
        EXIT    VS

        MOV     r0, r5
        LDR     r5, [r5, #PacketDescriptor_Link]
        MOV     r2, #0
        STR     r2, [r0, #PacketDescriptor_Link]

        MOV     lr, pc
        LDR     pc, [r0, #PacketDescriptor_FreeRoutine]

        CMP     r5, #0          ; V := 0
        BNE     %BT10
        EXIT

; **************************************************************************
;
;	CloseStream
;
; in:	r0 = reason code (2)
;	r1 = flags
;	r2 = program element stream handle (=file handle)
;	r12 -> string block, containing our filename
;
; out:	-
;

CloseStream Entry "r0,r1"
	MOV	r0, #0		; close file
	MOV	r1, r2
	SWI	XOS_Find
	STRVS	r0, [sp]
	EXIT

; **************************************************************************
;
;       Message stuff


 [ international
CopyError ENTRY "r1-r7"
        BL      open_messagefile
        EXIT    VS
        ADR     r1, MessageFile_Block
        MOV     r2, #0
        LDR     r4, [sp]        ; R1 (parameter) -> R4
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

message_filename
        DCB     "Resources:$.Resources.ARM600.Messages", 0
        ALIGN

open_messagefile ENTRY "r0-r2"
        LDR     r0, MessageFile_Open
        CMP     r0, #0
        EXIT    NE
        ADR     r0, MessageFile_Block
        ADR     r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r0, #1
        STR     r0, MessageFile_Open
        EXIT

write_r0_message ENTRY "r0-r7"
        BL      open_messagefile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r1, r0
        ADR     r0, MessageFile_Block
        MOV     r2, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        STRVS   r0, [sp]
        EXIT    VS
10      LDRB    r0, [r2], #1
        CMP     r0, #" "
        SWICS   XOS_WriteC
        STRVS   r0, [sp]
        EXIT    VS
        BCS     %B10
        SWI     XOS_NewLine
        EXIT
 |
write_r0_message ENTRY "r0"
        SWI     XOS_Write0
        STRVS   r0, [sp]
        EXIT
 ]

        InsertDebugRoutines

        END
