; > GetAll

        GBLL    Module
Module  SETL    {TRUE}          ; needed for ExitSWIHandler

        GBLL    international
international   SETL {FALSE}

; The following flag 'UseBALE' when true means the code uses the BALE interrupt
; to send data on; when false, on TickerV it polls the audio data request bit
; in the podule status register and sends up to a fixed amount.  It cannot
; sensibly be used with DRAM-less AV110 working, so conditionalise
; appropriately.

        GBLL    UseBALE
UseBALE SETL    {FALSE} :LAND: :LNOT: HandleNoDRAM

; The following flag 'UseWholePackets' effectively indicates whether
; audio-to-video synchronisation should be attempted, usually by putting the
; AV110 into packet mode.  When true, and the AV110 is fitted with DRAM, then
; the AV110 is programmed to accept audio packets, rather than just the audio
; stream, and the module reconstructs the packet header to send it, from the
; information in the packet descriptor.  However if HandleNoDRAM is configured
; true, and the AV110 has no DRAM, then the AV110 is still used in stream
; (non-packet) mode; the module arranges to signal triggering of the PTS by
; software not via the AV110's facilities (which are buggy anyway).  IN
; GENERAL, SET THIS TRUE.

        GBLL    UseWholePackets
UseWholePackets SETL {TRUE}

; The following flag 'StuffOnCallBack' when true makes the module send data on
; a callback from TickerV, rather than directly on TickerV. It also makes it stuff
; until the buffer is completely full, rather than limiting to a fixed amount.

;        GBLL    StuffOnCallBack
; StuffOnCallBack SETL {TRUE}           ** NOT USED AT PRESENT **

; The following flag 'SendPTSPatch' when true makes the module send the
; patch known as 'PTS.FIX' to the AV110 during initialisation. This patch
; corrects a bug whereby some PTS's sent to the device do not generate PTS
; interrupts.

        GBLL    SendPTSPatch
SendPTSPatch SETL {TRUE}

; Enable IRQs inside TickerV stuffing code

        GBLL    EnableIRQsInTickerV
EnableIRQsInTickerV SETL {TRUE} :LAND: :LNOT: AudioIRQBodge

; Collect statistics of some kind (ie set up debug array)

        GBLL    CollectDebugStats
CollectDebugStats SETL {FALSE}

; Output sent count to debug array

        GBLL    Debug_SentCount
Debug_SentCount SETL {FALSE}

; Output buffer fullness to debug array

        GBLL    Debug_Fullness
Debug_Fullness  SETL {FALSE}

; Use AV110's error recovery

        GBLL    UseErrorRecovery
UseErrorRecovery SETL {FALSE}   ; it sounds crap!

; Call SetSCR routine in MPEGVideo directly, not by SWI

        GBLL    CallSetSCRDirectly
CallSetSCRDirectly SETL {TRUE}

; When playing audio-only files, wait for a pre-fill amount before starting to play

        GBLL    PreFillAudioOnly
PreFillAudioOnly SETL {FALSE}

; Check audio sample rate and program clock select bits

        GBLL    CheckSampleRate
CheckSampleRate SETL {TRUE}

; Work-around 'Stars' problem by synthesizing a SCR value from 100Hz, and
; rejecting values outside a suitable range

        GBLL    VetSCRValues
VetSCRValues    SETL {TRUE}

; Put chip into Pause mode after ResetStream

	GBLL	PauseAfterResetStream
PauseAfterResetStream SETL {TRUE}

; Check system variable MPEG$PoduleNumber and if present, assume this is the
; MPEG podule without checking the product type

	GBLL	CheckPoduleVariable
CheckPoduleVariable SETL {TRUE}

; Disable stream synchronisation if we haven't received any data at all for a while

	GBLL	SpotEOFOnStreamSync
SpotEOFOnStreamSync SETL {TRUE}

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:CMOS
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:Proc
        GET     Hdr:FSNumbers	; Jon Change (was File)
        GET     Hdr:NewErrors
        GET     Hdr:MsgTrans
        GET     Hdr:Debug
        GET     Hdr:VduExt
        GET     Hdr:Podule
	GET	Hdr:PoduleReg
        GET     Hdr:DevNos

        GET     Hdr:MPEGCtrl
        GET     Hdr:MPEGVideo   ; needed for access to MPEG podule control register
        GET     Hdr:MPEGAudio
        GET     Hdr:MPEGCard
        GET     Hdr:AV110

        GET     s.Module	; Jon added s.

        END
