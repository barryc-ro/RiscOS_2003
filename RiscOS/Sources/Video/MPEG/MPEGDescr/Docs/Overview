
This module provides a simplified interface onto the MPEGControl module to
allow software written by third-parties to easily get access to scrambled
MPEG Transport Stream packet payloads.

An overview of how everything hangs-together is given below:


      Internet Stack
            |
            |
      ______v______   Scrambled   ________________         ________
     |             |  Packet     |                |------>|        |
     | MPEGControl |- - - - - - >| MPEGDescramble |       | Client |
     |_____________|             |________________|<------|________|
            |                             ¦
            | Clear                       ¦
            | Packet                      ¦ Descrambled
      ______v______                       ¦ packet
     |             |                      ¦
     | MPEGDriver  |<- - - - - - - - - - -
     |_____________|
            |
            |
            |
            v
   MPEG Decoder Hardware


The client registers a set of APCS-compliant handler functions with us,
probably written in a C module, and we call those functions as defined
below:

  OpenStream_Handler()  - an Open Stream event
  ResetStream_Handler() - a Reset Stream event (i.e. trickplay transition)
  CloseStream_Handler() - a Close Stream event
  Descrambler_Handler() - pass them a complete TS packet payload

To reduce load on the system, the payload is only passed to the client if
the transport_scrambling_control bits in the packet header are non-zero.

The MPEGDescramble module has to introduce an additional data copy of the TS
packet payload into the MPEG system for scrambled packet, so that the client
can be presented with a single TS packet payload as a contiguous block.

If, for any reason, the client fails to descramble a given packet, it can
return an indicator from the Descrambler_Handler() function which tells
MPEGDescramble to discard that packet. All other packets are passed on to
the MPEGDriver module with no further processing by MPEGControl.

Because MPEGDescramble copies the payload from a packet for the client to
process, it must free the packet(s) from which that payload was built. This
requires MPEGDescramble to maintain its own free list of bitstream packets
(with a bitstream packet descriptor pre-pended onto the beginning).

This free list is initially empty. As packets are required, they are claimed
from the RMA. MPEGDriver will direct-call our free routine for a packet once
it has been finished with, based upon the information in the descriptor for
that packet. Over time, the number of packets claimed should stabilise so
that the overhead of claiming RMA is removed. However, problems are known to
exist on client-pull systems with RMA exhaustion. This has not really been
addressed (some commented-out code indicates the problem areas).

Thus, when MPEGDescramble is killed, it should only free the bitstream
packets in its free list; the claimed ones will be freed in their own time
(dangerously, by calling our code in the module which has been killed - you
have to hope nothing has been loaded over that bit of RMA in the mean time).
