;*****************************************************************************
; $Id$
; $Name$
;
; Author(s):  Ben Avison
; Project(s): DSL4000 Deployment (A170)
;
; ----------------------------------------------------------------------------
; Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
;
; The copyright in this material is owned by Pace Micro Technology PLC
; ("Pace").  This material is regarded as a highly confidential trade secret
; of Pace.  It may not be reproduced, used, sold or in any other way exploited
; or transferred to any third party without the prior written permission of
; Pace.
;
; ----------------------------------------------------------------------------
; Purpose: Preveneer to C environment initialisation for module entry
;
; ----------------------------------------------------------------------------
; History: See source control system log
;
;****************************************************************************/

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:UpCall
        GET     Hdr:EnvNumbers
        GET     Hdr:Wimp

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  _clib_entermodule

        EXPORT  modentry_Code
modentry_Code
        ; _clib_entermodule only looks at r12, so no need to preserve r0

        ; If we're entered from a task slot that's already Wimp_Initialised, start
        ; ourselves in a different slot, to avoid confusion. The calling application
        ; has already been trashed, so all we can do is call its parent's exit
        ; handler. Note that we can't have got here due to a *Desktop_DVBSubtitles
        ; command, since it returns an error if a task is active, so it's probably
        ; because somebody has *RMRun the module.
        MOV     r0, #0
        SWI     XWimp_ReadSysInfo
        BVS     %FT02
        TEQ     r0, #0                 ; are there tasks active?
        BEQ     %FT01                  ; no, just exit
        MOV     r0, #5
        SWI     XWimp_ReadSysInfo
        BVS     %FT02
        TEQ     r0, #0                 ; no current task handle?
        BEQ     %FT10                  ; yes, proceed as normal
        ADR     r0, DesktopCommand
        SWI     XWimp_StartTask
01      SWIVC   OS_Exit
02      SWI     OS_GenerateError

10      LDR     r6, [r12]
        StaticBaseFromWP r6, r6
        ; At module entry, it is guaranteed to be the preferred instantiation
        ; (ie. its instantiation number is 0), so we can easily find the postfix string
        ; We can't do this in module init, because we're not yet linked into the chain
        MOV     r0, #ModHandReason_LookupName
        ADRVar  r1, r6, global_FullModuleName  ; may or may not have postfix on it yet
        SWI     XOS_Module             ; now r5 -> postfix string, null-terminated
        ; Complete the full module name in static workspace
        ADRVar  r0, r6, global_FullModuleName
11      LDRB    r1, [r0], #1
        TEQ     r1, #'%'
        BEQ     %FT13                  ; already been done!
        TEQ     r1, #0
        BNE     %BT11
        MOV     r1, #'%'
        STRB    r1, [r0, #-1]
12      LDRB    r1, [r5], #1
        STRB    r1, [r0], #1
        TEQ     r1, #0
        BNE     %BT12
13      ; For all but the base instantiation, we need to install handlers so as to
        ; kill the instantiation when the task exits (because the instantiation
        ; exists only to service the task)
        LDRVar  r0, r6, global_ThisIsBaseInstantiation
        TEQ     r0, #0
        ADRNE   r4, BaseSlotCmd
        ADREQ   r4, MainSlotCmd
        BLEQ    InstallHandlers        ; only install for non-base tasks
        ; Select the appropriate WimpSlot
        MOV     r0, r4
        SWI     OS_CLI                 ; call error handler if there's a problem
        ; Drop through into normal C runtime initialisation
        B       _clib_entermodule

DesktopCommand
        =       "Desktop_DVBSubtitles", 0
BaseSlotCmd
        =       "WimpSlot -min 16K -max 16K", 0
MainSlotCmd
        =       "WimpSlot -min 16K -max 16K", 0
        ALIGN

InstallHandlers
        ; On entry, r6 = static base, mode USR
        ; On exit, r4 and r12 must be preserved
        MOV     r0, #ErrorHandler
        ADR     r1, MyErrorHandler
        MOV     r2, r6
        ADRVar  r3, r6, my_error_buffer
        SWI     XOS_ChangeEnvironment
        ADRVar  r5, r6, old_handlers
        STMIA   r5!, {r1-r3}
        MOV     r0, #ExitHandler
        ADR     r1, MyExitHandler
        MOV     r2, r6
        SWI     XOS_ChangeEnvironment
        STMIA   r5!, {r1-r3}
        MOV     r0, #UpCallHandler
        ADR     r1, MyUpCallHandler
        MOV     r2, r6
        SWI     XOS_ChangeEnvironment
        STMIA   r5!, {r1-r3}
        MOV     pc, r14

RemoveHandlers
        ; On entry, r12 = static base, r11 = return address, mode USR/SVC
        ; On exit, r5-r10,r12-r13 must be preserved
        ; Weird entry conditions are because in USR mode we might not have a stack,
        ; and in SVC mode the SWIs we call will corrupt r14_svc
        ADRVar  r4, r12, old_handlers
        MOV     r0, #ErrorHandler
        LDMIA   r4!, {r1-r3}
        SWI     XOS_ChangeEnvironment
        MOV     r0, #ExitHandler
        LDMIA   r4!, {r1-r3}
        SWI     XOS_ChangeEnvironment
        MOV     r0, #UpCallHandler
        LDMIA   r4!, {r1-r3}
        SWI     XOS_ChangeEnvironment
        MOV     pc, r11

MyErrorHandler
        MOV     r12, r0
        MOV     r11, pc
        B       RemoveHandlers
        ADRVar  r0, r12, my_error_buffer
        ADD     r0, r0, #4      ; skip the error PC from the buffer
        LDR     r1, =&58454241
        MOV     r2, #-1 ; maximum return code, should cause error in r0 to be returned
        ADRVar  r3, r12, global_FullModuleName
        SWI     OS_ExitAndDie
                ; will kill module, set Sys$ReturnCode to -1, then call error handler

MyExitHandler
        MOV     r11, pc
        B       RemoveHandlers
        MOV     r1, #0  ; ensure error is not generated instead
        ADRVar  r3, r12, global_FullModuleName
        SWI     OS_ExitAndDie
                ; will kill module, set Sys$ReturnCode to 0, then call exit handler

MyUpCallHandler
        ; We have to preserve all registers, but fortunately this handler
        ; is called in SVC mode, so we know we have a stack
        TEQ     r0, #UpCall_NewApplication
        MOVNE   pc, lr
        Push    "r0-r4,r11,r14"
        MOV     r11, pc
        B       RemoveHandlers
        MOV     r0, #CAOPointer ; fake this so we can kill module while still CAO
        MOV     r1, #4          ; (there's no equivalent of OS_ExitAndDie here)
        MOV     r2, #0
        MOV     r3, #0
        SWI     XOS_ChangeEnvironment
        MOV     r0, #ModHandReason_Delete
        ADRVar  r1, r12, global_FullModuleName
        SWI     XOS_Module
        Pull    "r0-r4,r11,pc"


        IMPORTVar global_ThisIsBaseInstantiation
        IMPORTVar global_FullModuleName
        LocalVar my_error_buffer
        LocalVar old_handlers


        AREA    |Asm$$Data|, DATA

        IMPORT  |Image$$RO$$Base|
        EXPORT  Image__RO__Base
Image__RO__Base
        DCD     |Image$$RO$$Base|

old_handlers
        %       4*3*3
my_error_buffer
        %       256

        END
