/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): DSL4000 Deployment (A170)
*
* ----------------------------------------------------------------------------
* Copyright [2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Subtitle task launcher task
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <setjmp.h>
#include <signal.h>
#include <string.h>
#include <inttypes.h>
#include "swis.h"
extern const char *_clib_version(void);

#include "Global/ModHand.h"
#undef Module_Title /* clash with cmhg */
#include "Global/NewErrors.h"
#include "VideoCtrl.h"
#include "DebugLib/DebugLib.h"
#include "MPEG/TTextSubs.h"
#include "tboxlibs/event.h"
#include "tboxlibs/wimp.h"
#include "tboxlibs/wimplib.h"

#include "basetask.h"
#include "defs.h"
#include "global.h"
#include "mess.h"
#include "modhdr.h"
#include "throwerror.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/
#define WIMP_VERSION ((int) 310)
#define vc_ERROR_NOT_SETUP_YET (VIDEOCONTROL_ERROR1_BASE + VIDEOCONTROL_PRIVATE_OFFSET + 4)


/*****************************************************************************
* File scope Global variables
*****************************************************************************/
static jmp_buf static_RestartBuf;
static bool static_Restartable; /* whether static_RestartBuf is valid yet */


/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/
static void EscapeHandler(int sig);
static void ErrorHandler(int sig);
static void FatalErrorHandler(int sig);
static bool DisplayErrorBox(bool fatal, bool serious);

static WimpMessageHandler WimpMQuitHandler;
static WimpMessageHandler WimpMTTextAndSubsOnHandler;


/*****************************************************************************
* Functions
*****************************************************************************/

/*****************************************************************************
* basetask_Main
*
* Entry point for task
*
* Assumptions
*  NONE
*
* Inputs
*  NONE
*
* Outputs
*  NONE
*
* Returns
*  pointer to error block, if initialisation failed
*****************************************************************************/
_kernel_oserror *basetask_Main(void)
{
  static_Restartable = false;
  {
    uint32_t CLibVersion;
    sscanf(_clib_version(), "%*[^0123456789]%" SCNu32, &CLibVersion);
    if (CLibVersion < 535)
    {
      /* Older CLibs don't have nice default handlers for these signals */
      signal(SIGABRT, FatalErrorHandler);
      signal(SIGFPE, FatalErrorHandler);
      signal(SIGILL, FatalErrorHandler);
      signal(SIGSEGV, FatalErrorHandler);
      signal(SIGTERM, FatalErrorHandler);
      signal(SIGSTAK, FatalErrorHandler);
    }
  }
  signal(SIGINT, EscapeHandler);
  signal(SIGOSERROR, ErrorHandler);
  
  {
    static int MessagesList[] = { Wimp_MTTextAndSubsOn, 0 };
    const char *TaskName;
    CHECK(mess_LookUp("BaseTask", &TaskName, 0));
    CHECK(wimp_initialise(WIMP_VERSION, (char *) TaskName, MessagesList, NULL, &global_TaskHandle));
  }
  CHECK(event_initialise(NULL));
  atexit((void(*)(void))event_finalise);
  CHECK(event_set_mask(Wimp_Poll_NullMask |
                       Wimp_Poll_PointerLeavingWindowMask |
                       Wimp_Poll_PointerEnteringWindowMask |
                       Wimp_Poll_LoseCaretMask |
                       Wimp_Poll_GainCaretMask));
  CHECK(event_register_message_handler(Wimp_MQuit, WimpMQuitHandler, 0));
  CHECK(event_register_message_handler(Wimp_MTTextAndSubsOn, WimpMTTextAndSubsOnHandler, 0));
  
  setjmp(static_RestartBuf);
  static_Restartable = true;
  
  while (true)
  {
    CHECK(event_poll(NULL, NULL, NULL));
  }
  
  return NULL;
}

/*****************************************************************************
* EscapeHandler
*
* Handles SIGINT
*
* Assumptions
*  NONE
*
* Inputs
*  sig: signal number
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
static void EscapeHandler(int sig)
{
  signal(sig, EscapeHandler);
}

/*****************************************************************************
* ErrorHandler
*
* Handles SIGOSERROR
*
* Assumptions
*  NONE
*
* Inputs
*  sig: signal number
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
static void ErrorHandler(int sig)
{
  if (DisplayErrorBox(!static_Restartable, false))
  {
    exit(EXIT_FAILURE);
  }
  else
  {
    signal(sig, ErrorHandler);
    longjmp(static_RestartBuf, 1);
  }
}

/*****************************************************************************
* FatalErrorHandler
*
* Handles all signals other than SIGINT and SIGOSERROR
*
* Assumptions
*  NONE
*
* Inputs
*  sig: signal number
*
* Outputs
*  NONE
*
* Returns
*  NOTHING
*****************************************************************************/
static void FatalErrorHandler(int sig)
{
  IGNORE(sig);
  DisplayErrorBox(true, true);
  exit(EXIT_FAILURE);
}

/*****************************************************************************
* DisplayErrorBox
*
* Common Wimp error box stuff for ErrorHandler() and FatalErrorHandler()
*
* Assumptions
*  NONE
*
* Inputs
*  fatal:   true if the user is to be denied a "Continue" button
*  serious: true if the error is to be flagged as a program report rather than error report
*
* Outputs
*  NONE
*
* Returns
*  true if the user clicked on "Quit"
*****************************************************************************/
static bool DisplayErrorBox(bool fatal, bool serious)
{
  _kernel_oserror *e = _kernel_last_oserror();
  char ExtraButtons[32] = "Quit";
  char TaskName[32] = "Error";
  MessagesFD WimpMessages;
  bool OurMessagesBroken = false;
  
  if (e == NULL)
  {
    e = mess_GenerateError("err_UKError", 0, 0);
  }
  
  /* First try to internationalise "Quit" and "Error" using the Wimp messages file */
  if (_swix(MessageTrans_OpenFile, _INR(0,2),
            &WimpMessages,
            "WindowManager:Messages",
            0) == NULL)
  {
    _swix(MessageTrans_Lookup, _INR(0,7),
          &WimpMessages,
          "Quit",
          ExtraButtons,
          sizeof(ExtraButtons),
          0, 0, 0, 0);
    _swix(MessageTrans_Lookup, _INR(0,7),
          &WimpMessages,
          "Error",
          TaskName,
          sizeof(TaskName),
          0, 0, 0, 0);
    _swix(MessageTrans_CloseFile, _IN(0),
          &WimpMessages);
  }
  
  /* If our own messages file works, get our task name */
  if (_swix(MessageTrans_Lookup, _INR(0,7),
            &global_MessageFD,
            "BaseTask",
            TaskName,
            sizeof(TaskName),
            0, 0, 0, 0) != NULL)
  {
    OurMessagesBroken = true;
  }
  
  /* Display an appropriate error box */
  return (1 != wimp_report_error(e,
      (fatal ? 0 : Wimp_ReportError_OK) | (OurMessagesBroken ? Wimp_ReportError_NoAppName : 0) | 1u<<8 | (serious ? 3u<<9 : 2u<<9),
      TaskName, "switcher", 1, ExtraButtons));
}

/*****************************************************************************
* WimpMQuitHandler
*
* Handles Wimp_MQuit
*
* Assumptions
*  NONE
*
* Inputs
*  as type WimpMessageHandler
*
* Outputs
*  as type WimpMessageHandler
*
* Returns
*  as type WimpMessageHandler
*****************************************************************************/
static int WimpMQuitHandler(WimpMessage *message, void *handle)
{
  IGNORE(message);
  IGNORE(handle);
  global_TaskHandle = 0;
  exit(EXIT_SUCCESS);
  return 1;
}

/*****************************************************************************
* WimpMTTextAndSubsOnHandler
*
* Handles Wimp_MTextAndSubsOn
*
* Assumptions
*  NONE
*
* Inputs
*  as type WimpMessageHandler
*
* Outputs
*  as type WimpMessageHandler
*
* Returns
*  as type WimpMessageHandler
*****************************************************************************/
static int WimpMTTextAndSubsOnHandler(WimpMessage *message, void *handle)
{
  WimpTTextAndSubsOnMessage *OnMessage = (WimpTTextAndSubsOnMessage *) message->data.words;
  IGNORE(handle);
  if ((OnMessage->flags & Wimp_MTTextAndSubsOn_ReasonCodeMask) == Wimp_MTTextAndSubsOn_ReasonCode_Subtitles
      && !(OnMessage->flags & Wimp_MTTextAndSubsOn_Windowed)
      && ((OnMessage->select.subtitles == dvb_subtitles_normal) || (OnMessage->select.subtitles == dvb_subtitles_hard_of_hearing)))
  {
    /* We should be able to handle this */
    char NewModuleName[MAX_MODULE_NAME_LEN];
    _kernel_oserror *e;
    
    /* Try to create a new instantiation, named after the VideoControl handle */
    /* We can do this because limitations in MPEGControl limit us to one session per stream anyway */
    sprintf(NewModuleName, Module_Title "%%%08X", OnMessage->videoctrl_client_handle);
    e = _swix(OS_Module, _INR(0,1),
              ModHandReason_NewIncarnation,
              NewModuleName);
    if (e->errnum == ErrorNumber_IncarnationExists)
    {
      e = mess_GenerateError("err_StreamInUse", 1, 0);
    }
    if (!e)
    {
      /* Do a dummy VideoControl options read, to validate the client handle */
      vc_tags Tag = vc_tags__end;
      e = _swix(VideoControl_Options, _INR(0,2),
                VC_Options_ReadValues,
                OnMessage->videoctrl_client_handle,
                &Tag);
      if (e && e->errnum == vc_ERROR_NOT_SETUP_YET)
      {
        e = NULL; /* this isn't a problem for us */
      }
    }
    if (!e)
    {
      char CommandString[256];
      sprintf(CommandString, "Desktop_DVBSubtitles %08X %s %c %08X %08X",
                              OnMessage->videoctrl_client_handle,
                              OnMessage->iso639lang,
                              OnMessage->select.subtitles == dvb_subtitles_normal ? '0' : '1',
                              message->hdr.sender,
                              message->hdr.my_ref);
      /* note: new instantiations are automatically preferred, so no mod%inst: prefix needed */
      e = wimp_start_task(CommandString, NULL);
    }
    
    /* If anything went wrong, acknowledge the message ourselves */
    if (e)
    {
      WimpTTextAndSubsOnAckMessage *OnAckMessage = (WimpTTextAndSubsOnAckMessage *) message->data.words;
      size_t errmess_length = strlen(e->errmess);
      errmess_length = MIN(errmess_length, 223); /* truncate as necessary */
      strncpy(OnAckMessage->errmess, e->errmess, errmess_length);
      OnAckMessage->errmess[errmess_length] = 0; /* terminate in case of truncation */
      OnAckMessage->errnum = e->errnum;
      /* client handle remains unchanged */
      OnAckMessage->flags = Wimp_MTTextAndSubsOnAck_ErrorFlag | Wimp_MTTextAndSubsOnAck_ServiceExited;
      message->hdr.action_code = Wimp_MTTextAndSubsOnAck;
      message->hdr.your_ref = message->hdr.my_ref;
      message->hdr.size = ((char *) &(OnAckMessage->errmess) - (char *) message + errmess_length + 1 + 3) &~ 3;
      CHECK(wimp_send_message(Wimp_EUserMessage, message, message->hdr.sender, 0, NULL));
    }
  }
  return 1;
}


/*****************************************************************************
* END OF FILE
*****************************************************************************/
