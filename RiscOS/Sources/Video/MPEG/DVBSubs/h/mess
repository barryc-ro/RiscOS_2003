#if !defined(BAVISON_MESS_H) /* file used if not already included */
#define BAVISON_MESS_H
/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Ben Avison
* Project(s): Ursula (originally)
*
* ----------------------------------------------------------------------------
* Copyright [1997-2002] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: Message lookup and error handling routines
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
#include "kernel.h"


/*****************************************************************************
* MACROS
*****************************************************************************/


/*****************************************************************************
* New type definitions
*****************************************************************************/


/*****************************************************************************
* Constants
*****************************************************************************/


/*****************************************************************************
* Global variables
*****************************************************************************/


/*****************************************************************************
* Function prototypes
*****************************************************************************/

/*****************************************************************************
* mess_GenerateError
*
* Builds an error block from a message file token
*
* Assumptions
*  global_MessageFD is valid
*
* Inputs
*  token:   pointer to token
*  errno:   error number
*  nparams: parameter count
*  ...:     between 0 and 4 (const char *) parameter pointers
*
* Outputs
*  NONE
*
* Returns
*  pointer to error block
*****************************************************************************/
extern _kernel_oserror *mess_GenerateError(const char *token, int errno, int nparams, ...);

/*****************************************************************************
* mess_CacheError
*
* Copies an error block where it won't be trampled on by MessageTrans
*
* Assumptions
*  NONE
*
* Inputs
*  err_in: pointer to MessageTrans error block
*
* Outputs
*  NONE
*
* Returns
*  pointer to static error block
*****************************************************************************/
extern _kernel_oserror *mess_CacheError(const _kernel_oserror *err_in);

/*****************************************************************************
* mess_LookUp
*
* Looks up text from a message file token
*
* Assumptions
*  global_MessageFD is valid
*
* Inputs
*  token:   pointer to token (0, 10 or 13 terminated)
*  nparams: parameter count
*  ...:     between 0 and 4 (const char *) parameter pointers
*
* Outputs
*  result_ptr: filled in with pointer to (volatile) result string
*
* Returns
*  NULL if successful; otherwise pointer to error block
*****************************************************************************/
extern _kernel_oserror *mess_LookUp(const char *token, const char **result_ptr, int nparams, ...);


#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
