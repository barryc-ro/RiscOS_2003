/* Title; debug.c
 * Author; David De Vorchik
 * History;
 *  	25-Apr-95 diz Created from IDJ example
 *  	25-Apr-95 diz TRACE_ENTER & TRACE_LEAVE and the function stack
 *  	 3-May-95 diz Flusheding WriteC macro improved
 *
 *  Conditional assembly of the debug handling:
 *
 *  	TUBE	    	    	    	    : Redirects output to HostFS device
 *  	NO_DEBUG_INDENT	    	    	    : Turns off function indenting (useful for tracing client / server interactions )
 *  	NO_DEBUG_FUNCTIONS  	    	    : Turns off function name location
 *
 */

#include <stdarg.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

#include "misc.h"
#include "debug.h"
#include "swicall.h"



#ifdef DEBUG



////////////////////////////////////////////////////////////////////////////////
// Statics and Macros

#ifdef TUBE
#define WRITEC( x ) swi( HostFS_WriteC, R0, x, END )
#else
#define WRITEC( x ) { fputc( x, stdout ); }
//#define WRITEC( x ) { fputc( x, stdout ); swi( OS_Args, R0, 255, R1, 0, END ); }
//#define WRITEC( x ) swi( OS_WriteC, R0, x, END )
#endif

#define WRITES( x ) { char* __p = x ; for ( ; *__p != '\0' ; __p++ ) WRITEC( *__p ); }

#define FUNCTION_MAX 64

static char output_buffer [ 1024 ];
static int function_index = 0;



////////////////////////////////////////////////////////////////////////////////
// Ian's skull duggery to find the function name pointers.

#ifndef NO_DEBUG_FUNCTIONS

static char* function_stack [ FUNCTION_MAX ];
static char* function_unknown = "< unknown function >";

static unsigned int fpoffz()
{
    return 0;
}
static unsigned int *myfp()
{
    unsigned int local;
    return (unsigned int *)*(&local + 1 + fpoffz());
}

#define CALLER_FP() ((unsigned int *)(*(myfp()-3)))

static char* get_fn_name (unsigned int* fp)
{
    // Given a pointer to a caller's frame (if any) this function returns
    // its name which appears "before" it in the code area if the code
    // has not been compiled cc -ff.  If no name is found, returns 0

    // search to find magic marker 0xff00XXXX, where XXXX is the length
    //of the function name

    int i;
    char* name = 0;
    unsigned int* code_wordp;

    // Check the sanity of the address first!

    if (fp == 0)
        return function_unknown;
    else
        code_wordp = (unsigned int*)(*fp & 0x03fffffc);

    for (i = 0; i < 10; i++)     // same as backtrace code in C library (yuk)
    {
        int w = *--code_wordp;
        if ((w & 0xffff0000) == 0xff000000)
        {
            name = (char*)code_wordp - (w & 0xffff);
            break;
        }
    }

    return name;
}

#endif



////////////////////////////////////////////////////////////////////////////////
// Function stack management, on entry to a function requiring trace
// call this and it will determine the function point and
// place it on the stack, exiting a function you should call
// the leave function.

void TRACE_ENTER( void )
{

#ifndef NO_DEBUG_FUNCTIONS
    if ( function_index < FUNCTION_MAX )
        function_stack[ function_index ] = get_fn_name( CALLER_FP() );
#endif

    function_index++;
}

void TRACE_LEAVE( void )
{
    if ( function_index > 0 )
    	function_index--;
}



////////////////////////////////////////////////////////////////////////////////
// Debugging output function, this takes a printf style formatting string and
// then generates a suitable output to the required device, if TUBE defined then
// it is output via HostFs, otherwise normal character output methods are used.

// NB: Doesn't cope with multi-line trace

void TRACE( char* psFormat, ... )
{
    char *p;
    int i;
    va_list args;

#ifndef NO_DEBUG_INDENT
    // prefix the trace with indented function name
    for ( i = 1 ; i < function_index ; i++ )
    {
        WRITEC( ' ' );
        WRITEC( ' ' );
    }
#endif

#ifndef NO_DEBUG_FUNCTIONS
    if ( function_index < FUNCTION_MAX )
    {
        WRITES( function_stack[ function_index -1 ] );
        WRITES( ": " );
    }
    else
        WRITES( function_unknown );
#endif

     va_start( args, psFormat );

    // format the string and then output that
    vsprintf( output_buffer, psFormat, args );	    	    // format the output for display

    for ( p = output_buffer ; *p != '\0' ; p++ )
    {
        if ( ( *p >= ' ' && *p <= '~' ) || *p == '\n' )
            i = (int) *p;
        else
            i = (int) '*';

    	WRITEC( i );

#ifndef NOT_STDOUT
    	if ( *p == '\n' )
    	    WRITEC( '\r' );
#endif
    }

    va_end( args );
}


#endif
