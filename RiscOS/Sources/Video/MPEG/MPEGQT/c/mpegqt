
/*==========================================================================\
|                                                                           |
|                     Copyright 1995 Online Media			    |
|                                                                           |
|      This material is the confidential trade secret and proprietary       |
|      information of Online Media.  It may not be reproduced, used,	    |
|      sold or transferred to any third party without the prior written     |
|      consent of Online Media.  All rights reserved.                       |
|                                                                           |
\==========================================================================*/


/****************************************************************************
/ Filename
/   mpegqt.c
/
/ Purpose
/   Source code for processing MPEG QuickTime movies
/
/ Notes
/
/
/ Modification History
/
/ Date       Who  Version       Description
/ ----       ---  -------       -----------
/ 24-Jul-95  TMD  0.01, 0.02    Started work
/ 15-Nov-95  TMD  0.03		Fixed numeric overflow problems in time-to-byte-offset calculations
/ 22-Nov-95  TMD  0.04		Allow duration as input to time-to-byte offset conversion, and return end of MPEG data offset
/
****************************************************************************/

#define INT32 long int
#define UINT32 unsigned long int
#define INT16 short int
#define MALLOC malloc
#define FREE free
#define BOOL char
#define FALSE 0
#define TRUE 1

#include <stdio.h>
#include <stdlib.h>
#include "t.mpegqt"
#include "h.mpegqt"
#include "h.swicall"
#include "h.debug"

static _kernel_oserror error_BadSWI = { 0, "No such MPEGQT SWI" };
static _kernel_oserror error_BadOpen = { 0, "Couldn't open file" };
static _kernel_oserror error_AtomAllocateFail = { 0, "Couldn't allocate space for QuickTime atoms" };
static _kernel_oserror error_IncompleteFile = { 0, "Couldn't find all required QuickTime atoms" };
static _kernel_oserror error_AtomReadFail = { 0, "Failed to read whole QuickTime atom" };
static _kernel_oserror error_BadAtomLength = { 0, "Atom length not a whole number of words" };
static _kernel_oserror error_InvalidHandle = { 0, "Invalid MPEGQT handle" };
static _kernel_oserror error_OutsideFile = { 0, "Movie time is outside file" };
static _kernel_oserror error_NoPackStart = { 0, "Couldn't find pack start" };
static _kernel_oserror error_InvalidPack = { 0, "Invalid pack header" };

static TAtomInfo AtomInfoStructure [NAtomInfos] =

{
    { InfoMOOV, AtomTypeMDAT, MovieData, TRUE },
    { -1, AtomTypeMOOV, InfoTRAK, FALSE },
    { -1, AtomTypeTRAK, InfoMDIA, FALSE },
    { -1, AtomTypeMDIA, InfoMDHD, FALSE },
    { InfoMINF, AtomTypeMDHD, MediaHeader, TRUE },
    { -1, AtomTypeMINF, InfoSTBL, FALSE },
    { -1, AtomTypeSTBL, InfoSTTS, FALSE },
    { InfoSTSZ, AtomTypeSTTS, TimeToSample, TRUE },
    { InfoSTSC, AtomTypeSTSZ, SampleSize, TRUE },
    { InfoSTCO, AtomTypeSTSC, SampleToChunk, TRUE },
    { -1, AtomTypeSTCO, ChunkOffset, TRUE }
};

static char ahbuf[9];				/* include one for zero terminator */
static pTMPEGQTHandle pOpenFiles;		/* pointer to list of open files */

#define error(errmsg) {fprintf (stderr, errmsg); goto errorexit;}

/* Support functions */

static INT32 SwapEndian (INT32 x)
{
    char *p = (char *) &x;
    return ((INT32)(p[0])<<24) + ((INT32)(p[1])<<16) + ((INT32)(p[2])<<8) + (INT32)p[3];
}

/* Scan through file looking for a pack start code
 */

static _kernel_oserror *mpegqtScanForPackStart (FILE *fp)
{
    char		c;
start:
    c = getc (fp);
    if (c == EOF) goto eof;
    if (c != 0) goto start;

    c = getc (fp);
    if (c == EOF) goto eof;
    if (c != 0) goto start;
got_two_zeros:
    c = getc (fp);
    if (c == EOF) goto eof;
    if (c == 0) goto got_two_zeros;
    if (c != 1) goto start;

    c = getc (fp);
    if (c == EOF) goto eof;
    if (c != 0xBA) goto start;

    return NULL;

eof:
    return &error_NoPackStart;
}

/* Extract an SCR value from a pack header
 */

static _kernel_oserror *mpegqtExtractSCR (FILE *fp, INT32 *SCRvalue)
{
	char sbuf[5];
	INT32 bytesread;

	bytesread = fread (sbuf, 1, 5, fp);
	if (bytesread < 5) return &error_InvalidPack;

        if ((sbuf[0] & 0xF1) != 0x21 || (sbuf[2] & 1) != 1 || (sbuf[4] & 1) != 1) return &error_InvalidPack;

	*SCRvalue = (( (INT32) (sbuf[0] & 0x6) ) << 29) | \
	            (( (INT32) sbuf[1] ) << 22) | \
	            (( (INT32) (sbuf[2] & 0xFE) ) << 14) | \
	            (( (INT32) sbuf[3] ) << 7) | \
	            (( (INT32) (sbuf[4] & 0xFE) ) >> 1);

	return NULL;
}


/* Scan through start of MPEG data, to establish the size of each pack, which hopefully is constant
 * apart from (possibly) the first pack. Also calculates the number of SCR ticks in one pack and the
 * byte offset within the file of the 2nd pack.
 *
 * This is so we can convert time values lying within one sample into byte offsets
 */

static _kernel_oserror *mpegqtFindPackOffsets (FILE *fp, pTMPEGQTHandle handle)
{
	_kernel_oserror *e = NULL;
	INT32 packstartptr;
	INT32 scrvalue;

	/* Position file pointer at start of MPEG data */
	fseek (fp, handle->MPEGStart, SEEK_SET);
	e = mpegqtScanForPackStart (fp);		/* Find first pack start */
	if (!e) e = mpegqtScanForPackStart (fp);	/* Find second pack start */
	if (!e)
	{
	    packstartptr = ftell (fp) - 4;
	    handle->MPEGSecondPackOffset = packstartptr;
	    e = mpegqtExtractSCR (fp, &scrvalue);
	}
	if (!e)
	{
	    handle->SCROfSecondPack = scrvalue;
	    e = mpegqtScanForPackStart (fp);		/* Find third pack start */
	}
	if (!e)
	{
	    packstartptr = ftell (fp) - 4;
	    handle->MPEGPackSize = packstartptr - handle->MPEGSecondPackOffset;
	    e = mpegqtExtractSCR (fp, &scrvalue);
	}
	if (!e)
	{
	    handle->SCRTicksPerPack = scrvalue - handle->SCROfSecondPack;
	}

	return e;
}

static _kernel_oserror *mpegqtRecursiveExtract (FILE *fp, pTMPEGQTHandle handle, INT32 startptr, INT32 endptr, INT32 index)
{
#undef ldebug
#define ldebug TRUE

	INT32 atomend;
	pTAtomInfo pInfo = &AtomInfoStructure[index];
	_kernel_oserror *e = NULL;

	debug TRACE_ENTER ();
	debug TRACE (" startptr = &%lx\n", startptr);
	debug TRACE (" endptr = &%lx\n", endptr);
	debug TRACE (" top node = '%c%c%c%c'\n", ((char *)(&pInfo->type))[0], ((char *)(&pInfo->type))[1], ((char *)(&pInfo->type))[2], ((char *)(&pInfo->type))[3]);
	while (!e && startptr < endptr)
	{
	    INT32 bytesread, atomlength, atomtype;
	    INT32 p;

	    fseek (fp, startptr, SEEK_SET);
	    bytesread = fread (ahbuf, 1, 8, fp);
	    startptr += bytesread;
	    if (bytesread < 8)
	    {
	        e = &error_AtomReadFail;		/* failed to read length and type */
	        break;					/* get out of while loop */
	    }
	    atomlength = SwapEndian (* (INT32 *) &ahbuf[0]) - 8;
	    atomend = startptr + atomlength;
	    atomtype = * (INT32 *) &ahbuf[4];
	    p = index;
	    /* check atom type against all at this level */
	    while (p!=-1 && AtomInfoStructure[p].type != atomtype) p=AtomInfoStructure[p].next;
	    if (p!=-1)
	    {
	        /* We have found a match for our atom type */
		debug TRACE ("Useful atom '%s' at pointer &%lx\n", &ahbuf[4], startptr-8);
		if (AtomInfoStructure[p].terminal)
		{
		    INT32 i, *bp;

		    if (p == InfoMDAT)			/* Movie data atom */
		    {
		        handle->MPEGStart = startptr;			/* Save start and end of MPEG data */
		        handle->MPEGEnd = startptr + atomlength;
		    } else {
       		        /* Terminal node, so allocate a block of memory for the node, and read it in */
        		char *block = MALLOC ((int) atomlength);	/* allocate block for all but length + type */
        		if (!block) e = &error_AtomAllocateFail;
        		if (!e)
        		{
        		    debug TRACE ("Reading rest of atom, length &%lx\n", atomlength);
        		    bytesread = fread (block, 1, (int) atomlength, fp); /* read in rest of atom */
        		    if (bytesread < atomlength) e = &error_AtomReadFail;
        		    if (!e && atomlength & 3) e = &error_BadAtomLength;
        		}
                        if (!e)
                        {
        		    /* Swap endianness of all 32-bit words in block */
        		    bp = (INT32 *) block;
        		    for (i = 0; i < (atomlength >> 2); i++) bp[i] = SwapEndian (bp[i]);
        		    handle->pAtomArray[AtomInfoStructure[p].info] = block;	/* point relevant array element at block */
        		    debug TRACE ("Allocated block for atom and read it in\n");
        		}
        	    }
		} else {
		    /* Not a terminal node, so recurse downwards */
		    debug TRACE ("Not a terminal node - recursing down\n");
		    e = mpegqtRecursiveExtract (fp, handle, startptr, atomend, AtomInfoStructure[p].info);
		    if (e) break;
		}
	    } else {
	        debug TRACE ("Unknown atom '%s' at pointer &%lx\n", &ahbuf[4], startptr-8);
	    }
	    startptr = atomend;
	}
	debug TRACE_LEAVE ();
	return e;
}

static _kernel_oserror *mpegqtExtractAtoms (FILE *fp, pTMPEGQTHandle handle)
{
	INT32 fileext;

	fseek (fp, 0, SEEK_END);
	fileext = ftell (fp);
	return mpegqtRecursiveExtract(fp, handle, 0, fileext, 0);
}

static _kernel_oserror *mpegqtValidateHandle (pTMPEGQTHandle handle)
{
	pTMPEGQTHandle h=pOpenFiles;
	while (h && h!=handle) h=h->next;
	if (h) return NULL; else return &error_InvalidHandle;
}

/* Free all the atom blocks we've claimed for a file, then free handle block */
static void mpegqtFreeAtoms (pTMPEGQTHandle handle)
{
	INT32 i;

	for (i = 0; i < NAtoms; i++)
	{
	    void **a = &handle->pAtomArray[i];
	    if (*a)
	    {
	        FREE (*a);
	        *a = 0;
	    }
	}
	FREE (handle);
}

/* Convert movie time to sample number, time within sample */
/* Returns sample number, and stores time within sample in *TimeOffset */
/* If > duration, returns sample number = -1 */
/* If = duration, returns sample number = -2 */

static INT32 mpegqtTimeToSample (pTMPEGQTHandle handle, INT32 MovieTime, INT32 *pTimeOffset)
{
	pTMediaHeaderAtom pMediaHeaderAtom = (pTMediaHeaderAtom) handle->pAtomArray[MediaHeader];
	pTTimeToSampleAtom pTimeToSampleAtom = (pTTimeToSampleAtom) handle->pAtomArray[TimeToSample];
	pTTimeToSampleTableEntry p = &pTimeToSampleAtom->TimeToSampleTable[0];
	INT32 maxTime = pMediaHeaderAtom->Duration;
	INT32 entries = pTimeToSampleAtom->Entries;
	INT32 i, count, duration, samples=0, s;

	if (MovieTime < 0 || MovieTime > maxTime) return -1;
	if (MovieTime == maxTime) return -2;

	for (i=0; i<entries; i++)
	{
	    count = p[i].SampleCount;
	    duration = p[i].SampleDuration;
	    if (MovieTime >= count*duration)		/* If bigger than whole of this entry */
	    {
	        MovieTime-=count*duration;		/* then subtract off whole of this entry from time */
	        samples+=count;				/* and increment number of samples by count */
	    } else {
	        s = MovieTime / duration;		/* else count number of samples we can do in this entry */
	        samples+=s;				/* increment samples by this */
	        MovieTime-=s*duration;			/* and subtract this from movie time left */
	        break;					/* and exit from loop */
	    }
	}
	*pTimeOffset = MovieTime;
	return samples;
}


/* Convert sample number to chunk number, sample within chunk*/
/* Returns chunk number, and stores sample within chunk in *SampleOffset */

static INT32 mpegqtSampleToChunk (pTMPEGQTHandle handle, INT32 Sample, INT32 *pSampleOffset)
{
	pTSampleToChunkAtom pSampleToChunkAtom = (pTSampleToChunkAtom) handle->pAtomArray[SampleToChunk];
	pTSampleToChunkTableEntry p = &pSampleToChunkAtom->SampleToChunkTable[0];
	INT32 entries = pSampleToChunkAtom->Entries;
	INT32 i, j=entries-1, chunks=0, c, ChunksInThisEntry, SperC;

	for (i=0; i<entries-1; i++)			/* May not be executed at all if only one entry */
	{
	    SperC = p[i].SamplesPerChunk;
	    ChunksInThisEntry = p[i+1].FirstChunk - p[i].FirstChunk;
	    if (Sample >= SperC * ChunksInThisEntry)	/* If bigger than whole of this entry */
	    {
	        Sample -= SperC * ChunksInThisEntry;	/* then subtract off whole of this entry from sample number */
	        chunks+=ChunksInThisEntry;		/* and increment number of chunks by count */
	    } else {
	        j=i;					/* indicate entry to do last bit on */
	        break;					/* and exit from loop */
	    }
	}
	SperC = p[j].SamplesPerChunk;		/* get samples per chunk on last entry */
	c = Sample / SperC;			/* else count number of chunks we can do in this entry */
        chunks+=c;				/* increment chunks by this */
        Sample -= c * SperC;			/* and subtract this from number of samples left */
	*pSampleOffset = Sample;
	return chunks;
}

/* Convert chunk number to byte offset within file */
/* Returns -1 if out of range */

static INT32 mpegqtChunkToOffset (pTMPEGQTHandle handle, INT32 Chunk)
{
	pTChunkOffsetAtom pChunkOffsetAtom = (pTChunkOffsetAtom) handle->pAtomArray[ChunkOffset];
	pTChunkOffsetTableEntry p = &pChunkOffsetAtom->ChunkOffsetTable[0];
	INT32 entries = pChunkOffsetAtom->Entries;

        if (Chunk < 0 || Chunk >= entries) return -1;	/* Outside range */
	return p[Chunk].Offset;
}

/* Convert sample number to size */
/* Returns -1 if out of range */

static INT32 mpegqtSampleToSize (pTMPEGQTHandle handle, INT32 Sample)
{
	pTSampleSizeAtom pSampleSizeAtom = (pTSampleSizeAtom) handle->pAtomArray[SampleSize];
	pTSampleSizeTableEntry p = &pSampleSizeAtom->SampleSizeTable[0];
	INT32 entries = pSampleSizeAtom->Entries;
	INT32 size = pSampleSizeAtom->SampleSize;

	if (size) return size;
	if (Sample < 0 || Sample >=entries) return -1;	/* Outside range */
	return p[Sample].Size;
}

/* Main SWI functions */

static _kernel_oserror *MPEGQT_openfile (_kernel_swi_regs *r)
{
	FILE *fp;
	pTMPEGQTHandle handle;
	_kernel_oserror *e = NULL;

	fp = fopen ( (char *) r->r[1], "r");
	if (!fp) return &error_BadOpen;

	handle = MALLOC (sizeof(TMPEGQTHandle));
	if (handle)
	{
	    INT32 i;

	    handle->MPEGStart = -1;
	    handle->MPEGEnd = -1;
	    for (i=0; i<NAtoms; i++) handle->pAtomArray[i] = NULL;
	    e = mpegqtExtractAtoms (fp, handle);
	    if (!e) if (handle->MPEGStart == -1 || handle->MPEGEnd == -1) e = &error_IncompleteFile;
	    if (!e)
	    {
	        for (i=0; i<NAtoms; i++) if (!handle->pAtomArray[i]) e = &error_IncompleteFile;
	    }
	    if (!e)
	    {
		/* Work out pack sizes for interpolation within one sample */
	        e = mpegqtFindPackOffsets (fp, handle);
	    }
	    if (!e)
	    {
		pTMediaHeaderAtom p=(pTMediaHeaderAtom) handle->pAtomArray[MediaHeader];

	        /* Add handle to list */
	        handle->next = pOpenFiles;
	        pOpenFiles = handle;
	        r->r[0] = (int) handle;			/* return handle in r0 */
	        r->r[1] = (int) handle->MPEGStart;      /* start of MPEG data in r1 */
	        r->r[2] = (int) handle->MPEGEnd;	/* end+1 of MPEG data in r2 */
	        r->r[3] = (int) p->TimeScale;			/* number of time units per sec */
	        r->r[4] = (int) p->Duration;			/* duration of movie in time units */


	    } else {
	        mpegqtFreeAtoms (handle);
	    }
	}
	(void) fclose (fp);
	return e;
}

static _kernel_oserror *MPEGQT_closefile (_kernel_swi_regs *r)
{
	pTMPEGQTHandle h=0, i=pOpenFiles, handle=(pTMPEGQTHandle) r->r[1];
	/* Scan down list looking for specified handle, keeping copy of previous node */
	while (i && i!=handle)
	{
	    h=i;
	    i=i->next;
	}
	if (!i) return &error_InvalidHandle;
	if (h) h->next = handle->next; else pOpenFiles = handle->next;
	mpegqtFreeAtoms (handle);
	return NULL;
}

static _kernel_oserror *MPEGQT_timetobyteoffset (_kernel_swi_regs *r)
{
	/* in:	r0 = flags (zero for now)
	 *	r1 = handle
	 *	r2 = movie time, in movie time units
	 * out:	r3 = byte offset in file
	 */

	_kernel_oserror *e=NULL;
	pTMPEGQTHandle handle = (pTMPEGQTHandle) r->r[1];
	INT32 time = (INT32) r->r[2];
	INT32 timeoffset, sample, sampleoffset, chunk, byteoffset, s;
	pTMediaHeaderAtom p;
	double MPEGTicksPerTick;

	e = mpegqtValidateHandle (handle);
	if (e) return e;

	sample = mpegqtTimeToSample (handle, time, &timeoffset);
	if (sample==-1) return &error_OutsideFile;
	if (sample==-2)
	{
	    /* Input time = duration, so return byte offset of end of MPEG data */
	    byteoffset = handle->MPEGEnd;

	} else {
	    chunk = mpegqtSampleToChunk (handle, sample, &sampleoffset);

	    byteoffset = mpegqtChunkToOffset (handle, chunk);
	    if (byteoffset==-1) return &error_OutsideFile;

	    /* Add on the size of all the samples in the same chunk before the sample we want */
	    for (s=sample-sampleoffset; s<sample; s++)
	    {
	        byteoffset += mpegqtSampleToSize (handle, s);
	    }

	    /* Now add on offset corresponding to the time offset within the sample
	     */
	    p = (pTMediaHeaderAtom) handle->pAtomArray[MediaHeader];

	    /* Convert timeoffset from movie ticks to MPEG ticks and then to number of packs */
	    MPEGTicksPerTick = (double) MPEGTicksPerSecond / (double) p->TimeScale;

	    timeoffset = ((INT32) (timeoffset * MPEGTicksPerTick)) / handle->SCRTicksPerPack;
	    byteoffset += timeoffset * handle->MPEGPackSize;
	    if (byteoffset < handle->MPEGSecondPackOffset) byteoffset = handle->MPEGStart;
	    if (byteoffset > handle->MPEGEnd) byteoffset = handle->MPEGEnd;
	}

	r->r[3] = (int) byteoffset;
    	return NULL;
}

static _kernel_oserror *MPEGQT_showatoms (pTMPEGQTHandle handle)
{
	_kernel_oserror *e=NULL;
	INT32 i, entries, samplesize;
	pTChunkOffsetAtom pChunkOffsetAtom;
	pTSampleToChunkAtom pSampleToChunkAtom;
	pTSampleSizeAtom pSampleSizeAtom;
	pTTimeToSampleAtom pTimeToSampleAtom;
	pTMediaHeaderAtom pMediaHeaderAtom;

	e = mpegqtValidateHandle (handle);
	if (e) return e;

	/* Go through showing contents of atoms loaded */

	pChunkOffsetAtom = handle->pAtomArray[ChunkOffset];
	pSampleToChunkAtom = handle->pAtomArray[SampleToChunk];
	pSampleSizeAtom = handle->pAtomArray[SampleSize];
	pTimeToSampleAtom = handle->pAtomArray[TimeToSample];
	pMediaHeaderAtom = handle->pAtomArray[MediaHeader];

	printf ("MPEGSecondPackOffset = &%lx\n", handle->MPEGSecondPackOffset);
	printf ("SCROfSecondPack = %ld\n", handle->SCROfSecondPack);
	printf ("MPEGPackSize = &%lx\n", handle->MPEGPackSize);
	printf ("SCRTicksPerPack = %ld\n", handle->SCRTicksPerPack);

	if (pChunkOffsetAtom)
	{
	    entries = pChunkOffsetAtom->Entries;
	    printf ("Chunk offset atom present\n");
	    printf ("Chunk offset table has %ld entries:\n", entries);
	    for (i = 0; i < entries; i++)
	    {
	        printf (" Chunk %ld - Offset &%lx\n", i+1, pChunkOffsetAtom->ChunkOffsetTable[i].Offset);
	    }
	} else {
	    printf ("No chunk offset atom recovered\n");
	}

	if (pSampleToChunkAtom)
	{
	    entries = pSampleToChunkAtom->Entries;
	    printf ("Sample-to-chunk atom present\n");
	    printf ("Sample-to-chunk table has %ld entries:\n", entries);
	    for (i = 0; i < entries; i++)
	    {
		pTSampleToChunkTableEntry p = &pSampleToChunkAtom->SampleToChunkTable[i];
	        printf (" Entry %ld - First chunk %ld - Samples per chunk %ld - Sample Description ID &%lx\n",
	                        i+1,  p->FirstChunk,    p->SamplesPerChunk,     p->SampleDescriptionID);
	    }
	} else {
	    printf ("No sample-to-chunk atom recovered\n");
	}

	if (pSampleSizeAtom)
	{
	    printf ("Sample size atom present\n");
	    samplesize = pSampleSizeAtom->SampleSize;
	    if (samplesize)
	    {
	        printf ("Constant sample size of &%lx\n", samplesize);
	    } else {
	        printf ("Variable sample sizes as follows:\n");
	        entries = pSampleSizeAtom->Entries;
	        for (i = 0; i < entries; i++)
	        {
	            printf (" Sample %ld - Size &%lx\n", i+1, pSampleSizeAtom->SampleSizeTable[i].Size);
	        }
	    }
	} else {
	    printf ("No sample size atom recovered\n");
	}

	if (pTimeToSampleAtom)
	{
	    printf ("Time-to-sample atom present\n");
	    entries = pTimeToSampleAtom->Entries;
	    printf ("Time-to-sample table has %ld entries:\n", entries);
	    for (i = 0; i < entries; i++)
	    {
		pTTimeToSampleTableEntry p = &pTimeToSampleAtom->TimeToSampleTable[i];
	        printf (" Entry %ld - Sample count %ld - Sample duration %ld\n",
	                        i+1,  p->SampleCount,    p->SampleDuration);
	    }
	} else {
	    printf ("No time-to-sample atom recovered\n");
	}

	if (pMediaHeaderAtom)
	{
	    printf ("Media header atom present\n");
	    printf ("Media time scale unit = 1/%ld second\n", pMediaHeaderAtom->TimeScale);
	    printf ("Media duration = %ld time units\n", pMediaHeaderAtom->Duration);
	} else {
	    printf ("No media header atom recovered\n");
	}

	return NULL;
}

/* Die entry point for module */

void MPEGQT_die (void)
{
	return;
}

/* Initialisation entry point for module */
/* Must initialise list of open files to NULL */

_kernel_oserror *MPEGQT_init (char *cmd_tail, int podule_base, void *pw)
{
        pOpenFiles = NULL;
        (void) atexit ( &MPEGQT_die );
        return NULL;
}

/* Module SWI handler */

_kernel_oserror *MPEGQT_swihandler (int swi_no, _kernel_swi_regs *r, void *pw)
{
	switch (swi_no)
	{
	    case 0: /* OpenFile */
	    	return MPEGQT_openfile (r);
	    case 1: /* CloseFile */
	    	return MPEGQT_closefile (r);
	    case 2: /* TimeToByteOffset */
	    	return MPEGQT_timetobyteoffset (r);
/* following are for debugging only */

	    case 3: /* ShowAtoms */
	    	return MPEGQT_showatoms ((pTMPEGQTHandle) r->r[1]);
	    case 4: /* TimeToSample */
		r->r[3] = (int) mpegqtTimeToSample ((pTMPEGQTHandle) r->r[1], (INT32) r->r[2], (INT32 *)&r->r[2]);
		return NULL;
	    case 5: /* SampleToChunk */
	        r->r[3] = (int) mpegqtSampleToChunk ((pTMPEGQTHandle) r->r[1], (INT32) r->r[2], (INT32 *)&r->r[2]);
	        return NULL;
	    default:
	    	return &error_BadSWI;
	}
}

