
/*==========================================================================\
|                                                                           |
|                     Copyright 1995 Online Media			    |
|                                                                           |
|      This material is the confidential trade secret and proprietary       |
|      information of Online Media.  It may not be reproduced, used,	    |
|      sold or transferred to any third party without the prior written     |
|      consent of Online Media.  All rights reserved.                       |
|                                                                           |
\==========================================================================*/


/****************************************************************************
/ Filename
/   mpegqt.t
/
/ Purpose
/   Type definitions for processing MPEG QuickTime movies
/
/ Notes
/
/
/ Modification History
/   Date        Engineer    Notes
/   --------    --------    --------
/   24jul95     TMD	    Created.
****************************************************************************/


/* Generic atom format */

typedef struct
{
#if 0				/* don't include length and type in the stored atoms */
    UINT32	Length;		/* length of the atom, including the length and type fields */
    INT32	Type;		/* type of the atom (four alphabetic characters) */
#endif
    char	Version;
    char	Flags[3];

}   TAtomHeader,  *pTAtomHeader;


/* Time-to-sample table entry */

typedef struct
{
    INT32	SampleCount;	/* The number of consecutive samples that have the same duration */
    INT32	SampleDuration;	/* The duration of each sample */

}   TTimeToSampleTableEntry,  *pTTimeToSampleTableEntry;


/* Time-to-sample atom */

typedef struct
{
    TAtomHeader			Header;			/* Generic atom header */
    INT32			Entries;		/* Number of entries in the TimeToSample table */
    TTimeToSampleTableEntry	TimeToSampleTable[1];	/* actually [Entries] */

}   TTimeToSampleAtom,  *pTTimeToSampleAtom;


/* Sample-to-chunk table entry */

typedef struct
{
    INT32	FirstChunk;		/* The first chunk number using this table entry */
    INT32	SamplesPerChunk;	/* The number of samples in each chunk */
    INT32	SampleDescriptionID;	/* The ID number associated with the sample description containing the sample */

} TSampleToChunkTableEntry,  *pTSampleToChunkTableEntry;


/* Sample-to-chunk atom */

typedef struct
{
    TAtomHeader			Header;			/* Generic atom header */
    INT32			Entries;		/* Number of entries in the SampleToChunk table */
    TSampleToChunkTableEntry	SampleToChunkTable[1];	/* actually [Entries] */

}   TSampleToChunkAtom,  *pTSampleToChunkAtom;


/* Sample size table entry */

typedef struct
{
    INT32	Size;			/* The size in bytes for this sample */

}   TSampleSizeTableEntry,  *pTSampleSizeTableEntry;


/* Sample size atom */

typedef struct
{
    TAtomHeader			Header;			/* Generic atom header */
    INT32			SampleSize;		/* Size of each sample (in bytes) if they're all the same size
    							 * if zero, then the sizes are given in the table */
    INT32			Entries;		/* Number of entries in the SampleToChunk table */
    TSampleSizeTableEntry	SampleSizeTable[1];	/* actually [Entries] */

}   TSampleSizeAtom,  *pTSampleSizeAtom;


/* Chunk offset table entry */

typedef struct
{
    INT32	Offset;		/* Byte offset from the beginning of the data stream to the chunk */

}   TChunkOffsetTableEntry,  *pTChunkOffsetTableEntry;


/* Chunk offset atom */

typedef struct
{
    TAtomHeader			Header;			/* Generic atom header */
    INT32			Entries;		/* Number of entries in the ChunkOffset table */
    TChunkOffsetTableEntry	ChunkOffsetTable[1];	/* actually [Entries] */

}   TChunkOffsetAtom,  *pTChunkOffsetAtom;

/* Media header atom */

typedef struct
{
    TAtomHeader			Header;			/* Generic atom header */
    INT32			CreationTime;		/* Creation time in seconds since 00:00 Jan 1, 1904 */
    INT32			ModificationTime;	/* Modification time, same units */
    INT32			TimeScale;		/* Number of media time scale units per second */
    INT32			Duration;		/* Duration of this media in media time scale units */
    INT16			Language;		/* Language code for this media */
    INT16			Quality;		/* Playback quality */

}   TMediaHeaderAtom,  *pTMediaHeaderAtom;

/* Definitions for static structure defining which atoms we're interested in */

#define NAtoms 5
#define NAtomInfos 11

typedef enum
{
    ChunkOffset=0,
    SampleToChunk=1,
    SampleSize=2,
    TimeToSample=3,
    MediaHeader=4,
    MovieData=5			/* Note that this atom isn't loaded (it's the MPEG movie!) */
} TAtomTypeIndex;

typedef enum
{
    InfoMDAT = 0,
    InfoMOOV = 1,
    InfoTRAK = 2,
    InfoMDIA = 3,
    InfoMDHD = 4,
    InfoMINF = 5,
    InfoSTBL = 6,
    InfoSTTS = 7,
    InfoSTSZ = 8,
    InfoSTSC = 9,
    InfoSTCO = 10
} TAtomInfoIndex;

typedef struct SAtomInfo TAtomInfo, *pTAtomInfo;

struct SAtomInfo
{
    INT32		next;				/* index in array of next item (-1 => none) */
    INT32  		type;
    INT32		info;
    BOOL		terminal;			/* whether this is a terminal node */

};

/* Definitions for MPEGQT handle */

typedef struct SMPEGQTHandle TMPEGQTHandle, *pTMPEGQTHandle;

struct SMPEGQTHandle
{
    pTMPEGQTHandle		next;			/* pointer to next MPEGQTHandle in chain */
    INT32			MPEGStart;		/* offset in file of start of MPEG data */
    INT32			MPEGEnd;		/* offset in file of end of MPEG data */
    INT32			MPEGSecondPackOffset;	/* offset in file of 2nd MPEG pack */
    INT32			SCROfSecondPack;	/* SCR value of 2nd pack */
    INT32			MPEGPackSize;		/* size in byte of each pack (apart from 1st one) (hopefully constant) */
    INT32			SCRTicksPerPack;	/* SCR offset from 1 pack to next (hopefully constant) */
    void			*pAtomArray [NAtoms];	/* pointers to atom blocks for this file */

};
