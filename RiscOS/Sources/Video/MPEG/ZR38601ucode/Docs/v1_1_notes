Date: Fri, 19 Oct 2001 15:28:30 +0100
From: Steven Corby <Steven.Corby@pace.co.uk>
Subject: v1.1 with VCXO ...
To: Robert Sprowson <robert.sprowson@pace.co.uk>, 
    Ben Avison <Ben.Avison@pace.co.uk>

Hi folks .. 

please find attached v1.1 which adds VCXO functionality to V1.0 on GPIO
2.  Send param command 0x08 to control in the following format.

0x96
0x08
0x00
0xlo1
0xlo2
0x00
0xhi1
0xhi2

two values are supplied in the command.  The number of clock cycles
spent with gpio low, and the number of clock cycles with gpio high.  At
50mhz (core clock frequency as set in PLLTAB) a value of 5000 equates to
5000 clock cycles.  If 5000 is supplied for both lo and hi values
(lo1/hi1 are most significant nibbles) a frequency of 5khz is generated.
For 2500, a frequency of 10khz will be generated.  The mark space ratio
of the PWM can be varied by specifying different values for each of the
hi and lo.  This is the easiest way for me to implement the feature, and
it ultimately gives you guys complete control over the output.  The two
values are latched in on the next 2.65ms block.

be warned though .. the PWM is implemented in software, so if you set
the values too small it will begin to impact on the actual decoding
process.  I have run it at 5khz here with no problems, and I expect it
will run significantly faster if needbe.

 <<A231v1_1.zip>> 
also, a C function to modify the parameters (for completeness)

static INT DAP_EXTsetVCXO(USHORT clocksLo, USHORT clocksHi) {
    static union {
        struct {
            UCHAR IDENT      :   8;
            UCHAR EXT        :   8;
            UCHAR RESERVED1  :   8;
            UCHAR LO1        :   8;
            UCHAR LO2        :   8;
            UCHAR RESERVED2  :   8;
            UCHAR HI1        :   8;
            UCHAR HI2        :   8;
        } bits;
        UCHAR byte[8];
    } command = { { 0x96,8,0,0,0,0,0,0 } };

    INT retCode = SUCCESS;

    command.bits.LO1 = ((clocksLo & 0xff00) >> 8);
    command.bits.LO2 = (clocksLo & 0x00ff);
    command.bits.HI1 = ((clocksHi & 0xff00) >> 8);
    command.bits.HI2 = (clocksHi & 0x00ff);

    COMMAND_GATE_LOCK
    if (sendCommand(command.byte,sizeof(command.byte),NULL,0) !=
SUCCESS) {
        retCode = FAILURE;
    }
    COMMAND_GATE_UNLOCK
    return retCode;
}

regards .. SC
