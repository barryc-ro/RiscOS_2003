Date: Thu, 18 Oct 2001 12:19:52 +0100
From: Steven Corby <Steven.Corby@pace.co.uk>
Subject: RE: firmware.. 
To: Simon Gausden <simon.gausden@pace.co.uk>, 
    Robert Sprowson <robert.sprowson@pace.co.uk>, 
    Ben Avison <Ben.Avison@pace.co.uk>
Cc: Peter Walton <Peter.Walton@pace.co.uk>

Hi folks .. 

OK - this version is much much better.  I have called this build
A231v1.0 as it is the first 'official' release - please discard the code
that I sent you yesterday.  It uses hardware interrupts to help detect
when data has arrived, thus making the whole system more efficient.
I've also taken out all references to hreg registers (which I had
forgotten to do in yesterdays build).  These would have conflicted with
any commands you were sending to the device via the parallel input.  It
works great with AC3 (Sky are transmitting the Matrix as a test stream,
and I listened to it for a good 10 minutes with no problems).  MPEG is
proving a little more problematic.  On live I am suffering from
underflow for some reason! - it works fine from HDD though, so as long
as you have enough buffered data it should not be a problem for you.
I'll continue to look at it in the meantime.  Also outstanding is VCXO
driver.  I can use the timer interrupt to toggle one of the GPIO pins
with a specified mark space ratio as supplied in a PARAM (0x96) command
that you can send to the device.  I need to know what the minimum
frequency you can live with is.  ie, one complete period of the output.
The lower the better as each timer ISR will take away clocks from
whatever else the DSP is doing.  Once you give me this information I can
implement the VCXO feature.

 <<A231.zip>> 
Let me know how your getting on.  The code here should be ample for you
to get things running.  If you do want me to come down and help from the
ZR38601 point of view during integration for a couple of days then I am
happy to do that, but it cannot be next week as I have other commitments
during the evenings.

kind regards .. SC


Date: Thu, 18 Oct 2001 12:31:37 +0100
From: Steven Corby <Steven.Corby@pace.co.uk>
Subject: RE: firmware.. 
To: Simon Gausden <simon.gausden@pace.co.uk>, 
    Robert Sprowson <robert.sprowson@pace.co.uk>, 
    Ben Avison <Ben.Avison@pace.co.uk>

Rob - Ben .. another two things you should be aware of

(a) the sync byte (and first byte in a burst) is 0x47 hex
(b) the second byte is the number of byte pairs in the payload to follow
(b) the maximum payload size is currently 128 bytes - you can send
anything up to this amount of payload
(c) only ever send an even number of bytes in a payload or it won't work
(d) you should send 4 bytes (ie two pairs) of flushing data at the end
of the burst - these can be anything other than the sync byte (or the
algorithm will think its found a new packet when it hasn't) - I'm using
0xFF 

so .. a complete burst might look something like...

0x47	<- SYNC byte
0x08	<- number of 16bit words to follow
0x32	<- first byte of payload
0xff	<- second byte of payload
0x54
0x12
0x94
0xb3
0xa3
0x12
0xde
0xfd
0x54
0x12
0x94
0xb3
0xa3
0x12  <- sixteenth byte of payload
0xff	<- 4*flushing bytes
0xff
0xff
0xff

also note:

The 38601 may make several back to back requests within on 2.65ms window
if it needs more than 128bytes of data.  It will only do this if the
previous burst was of 128bytes signifying that the host probably has
more data to send in its buffer.

cheers .. SC
