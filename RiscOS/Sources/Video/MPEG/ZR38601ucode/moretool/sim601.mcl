#* ident "@(#)SIM38_MCL:/sw_util/audio/a12/tools/sim/sim601_mcl/SCCS/s.sim601.mcl 1.22 06/12/98" *
#**************************************************************************
#*                                                                        *
#*    Copyright (c) 1993 ZORAN Corporation, All Rights Reserved           *
#*                                                                        *
#*    THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF ZORAN CORPORATION    *
#*                                                                        *
#*                                                                        *
#*
#*    File : SCCS/s.sim601.mcl
#*    Type : MCL File
#*    Module : SIM38_MCL
#*    Sccs Identification (SID) : 1.22
#*    Modification Time : 06/12/98 11:54:10
#*                                                                        *
#*                                                                        *
#**************************************************************************

defcom run ()
##Run simulation

defcom step ()
##Execute one instruction

defcom nstep (
instructions: I: 1: 1000000: 1: "Number of instructions")
##Execute a number of instructions

defcom mshow (
address: S: "0": "Starting address"
length: I: 1: 0xfffff: 1: "How many words to display"
format: M: "global:decimal:unsignedDecimal:fractional:hexadecimal": global: "Display format")
##Display the memory content

defcom mset (
address: S: "0": "Starting address"
value: S: "0": "Value"
length: I: 0: 0xfffff: 1: "How many words to initialize")
##Initialize memory with a specified value

defcom rshow (
register: S: "data": "Register name"
format: M: "global:decimal:unsignedDecimal:fractional:hexadecimal": global: "Display format")
##Display register content

defcom rset (
register: S: "": "Register name"
value: S: "": "Value")
##Set register content

defcom dset (
format: M: "decimal:unsignedDecimal:fractional:hexadecimal": decimal: "Format")
##Set data format

defcom mcopy (
target: S: "": "Target address"
source: S: "": "Source address"
length: I: 0: 0xfffff: 1: "How many words to copy")
##Copy a portion of memory from the source location to the target location

defcom mcompare (
source1: S: "": "First source address"
source2: S: "": "Second source address"
length: I: 0: 0xfffff: 1: "How many words to compare"
bound: I: 0: 0xfffff: 0: "Comparison bound")
##Compare the first portion of memory location with the second source location

defcom fread (
file: S: "sim.dat": "File name"
address: S: "0": "Starting address"
format: M: "decimal:hexadecimal": decimal: "Data format")
##Read a file into memory

defcom fwrite (
file: S: "sim.dat": "File name"
address: S: "0": "Starting address"
length: I: 0: 0xfffff: 1: "How many word to write"
format: M: "decimal:hexadecimal": decimal: "Data format")
##Write memory content to file

defcom mread (
file: S: "sim.in": "File name"
address: S: "": "Address"
format: M: "decimal:hexadecimal": decimal: "Data format")
##Assign a file to the specified address for memory read

defcom mwrite (
file: S: "sim.out": "File name"
address: S: "": "Address"
format: M: "decimal:hexadecimal": decimal: "Data format")
##Assign a file to the specified address for memory write

defcom bset (
event: S: "": "Event (instruction name, address or data)"
type: M: "instruction:address:data:watch:default": default: "Breakpoint type"
after: I: 0: 0x7fffffff: 1: "After")
##Set a breakpoint

defcom bshow ()
##Display a list of currently defined breakpoints

defcom bdelete (
number: S: "": "Number")
##Delete a breakpoint

defcom load (
file: S: "prog.exz": "File name")
##Load an ZR38001 execution file to the simulator memory

defcom disassemble (
address: S: "": "Starting address"
length: I: 1: 0xfffff: 20: "Number of instructions to disassemble"
file: S: "screen": "Output file name (screen)")
##Disassemble a memory segment

defcom reset ()
##Perform processor reset

defcom mmap (
mode: M: "on:off:toggle": toggle: "MMAP pin state")
##Set or clear the MMAP pin

defcom merror (
mode: M: "on:off:toggle": toggle: "Memory access error")
##Supress or resume memory access error messages

defcom setmode (
mode: M: "ZR38001:ZR38000": ZR38001: "Required mode")
##Select the ZR38001 or ZR38000 mode of operation

defcom genint (
file: S: "sim.int": "File name"
format: M: "decimal:hexadecimal": decimal: "Format")
##Read an external interrupt file into the interrupt table

defcom interrupt (
interrupt: M: "on:off": on: "Interrupts"
int_message: M: "on:off": on: "Interrupt massage")
##Enable interrupt processing

defcom gengpio (
type: M: "in:out": in: "File for GPIO Input or Output"
file: S: "gpio.in": "File name"
format: M: "dec/bin:hexadecimal": dec/bin: "File format")
##Read an GPIO h/w pin File or write to File GPIO output


defcom genspi (
inputfile: S: "spi.hex": "input SPI File name"
outputfile: S: "close": "output SPI File name")
##Generate Serial Peripherial Interface interrupts

defcom geni2c (
inputfile: S: "i2c.hex": "input SPI File name"
outputfile: S: "close": "output SPI File name")
##Generate I2C Interface interrupts

defcom i2caddr (
address: S: "3b": "I2C slave address")
##Initialize the I2C slave address

defcom genpportsw (
inputfile: S: "pport.in": "input parallel port File name"
fifofile: S: "fifo.in": "input dfifo File name"
rewind: M: "off:on": off: "Rewind SP Data file")
##Generate Dfifo and parallel SPI input

defcom dfiforate (
rate: R: 0.0:36000.0: 2.0: "DFIFO clock rate [in XTI]")
##Dfifo input rate in XTI



defcom spirate (
rate: I: 6:36000: 6: "SPI clock rate [in XTI]"
inter_frame_delay: I: 0:36000: 0: "SPI inter frame time [in XTI]"
init_delay: I: 0:36000: 0: "SPI delay before the first frame")
##Serial Peripherial Interface clock rate in XTI

defcom gensrport (
port: M: "A:B:C:D:E:F:G": A: "Input/Output port name"
in_file: S: "": "SP Data File name (hexa)" 
rewind: M: "off:on": off: "Rewind SP Data file"
out_size: M: "s20:s24": s20: "Number of bits for output port")
##Run the Serial port

defcom srpframesize (
port: M: "A:B": A: " Port group name"
framesize: I: 0:1024: 16: "Frame Size in Slave Mode")
##Set Serial Port Frame Size in Slave Mode

defcom srptracefile (
port: M: "A:B": A: " Port group name"
out_file: S: "": "SP Trace File name (trace -> out)")
## Open Serial ports group trace file

defcom srprate (
port: M: "A:B": A: " Port group name"
rate: R: 0.0:36000.0: 2.0: "SP clock rate [in XTI]")
##Serial port clock rate in XTI

defcom genspdif (
type: M: "in:out": in: "File for GPIO Input or Output"
file: S: "spdif.in": "SPDIF Data File name"
rewind: M: "off:on": off: "Rewind SP Data file")
##Run the SPDIF

defcom spdifrate (
rate: R: 2.0:36000.0: 5.0: "S/PDIF input clock rate [in XTI]")
##S/PDIF input data rate in XTI time units

defcom sckinrate (
rate: R: 0.0:36000.0: 2.0: "SCKIN clock rate [in XTI]")
##External SCKIN rate in XTI time units

defcom setgpio (
PinNumber: I: 0: 1: 0: "Number of GPIO pin"
PinValue: I: 0: 1: 0: "Logical value to be forced on h/w pin")
##set GPIO pin to logical 0 or logical 1

defcom setpm (
mode: M: "on:off": off: "PM (parallel/memory) mode")
##Select the P/M pin 


defcom spipolarity (
polarity: I: 0:1: 0: "SPI clock polarity")
##set SPI clock polarity

defcom version ()
##Version number

defcom setpackage (
mode: M: "zr64:zr100:zr128": zr100: "package type (64/100/128 pin package)")
##Select package type

defcom dreq (
mode: M: "on:off": off: "Request driven mode")
##Select request driven input mode

defcom savemcl (
file: S: "startup.mcl": "MCL command file" 
mode: M: "append:noappend": noappend: "Append mode")
##Open trace file

defcom closemcl ()
## Close trace file
