
  Sprite overlay extensions to BASIC MPEG player, 14-May-1999
  ===========================================================

  Note that at the time of writing, the RelNote file in this directory
  is completely out of date, so this file won't refer to it beyond the
  reference here...!

  From version 2.17 onwards, the MPEG player supports overlay sprites.
  When F1 is pressed (this usually maps to the red FastText button on
  the remote handset), sprites are optionally displayed in sequence
  according to a list file. This gives the names of sprites and the
  coordinates to plot them at. A single sprites file contains the
  sprites referred to by the list file. The sprites file is loaded
  before the MPEG player starts to contact the video server, so there
  should be no fighting for network bandwidth. This does mean that the
  startup time of the player will be increased, depending on the size
  of the sprites file. It also means you need enough free memory in
  the STB to load the whole set of sprites you wish to display. This
  is unfortunate but unavoidable given how little processor time and
  network bandwith is typically available on the STB when video is
  playing back.

  To use the overlay sprites, you need to create a directory with the
  sprites and list files in it. The player looks in three places for
  the directory:

    1. If -spritedir <directory name> is given in the MPEG playback
       URL, the given directory is used. If this can't be found, no
       other alternative is searched for and sprites won't be plotted
       (but no error is raised). The '-spritedir' option allows per-
       stream sprite sets to be specified, often very useful (e.g. a
       set of overlay questions-and-answers relating to that
       particular video).

    2. If -spritedir is not specified, Boot:Choices.MPEG.Sequence is
       used. Allows default, all-streams sprites to be used. The
       location is derived from older Baseline strucures (pre-v3).

    3. If (2) cannot be found, STBRoot:Content.MPEG.Sequence is used
       instead. If this can't be found, no other alternative is
       searched for and sprites won't be plotted (but no error is
       raised). If it is found, though, this also allows default,
       all-streams sprites to be used. The location this time is
       derived from newer Baseline structures (v3.xx).

  Once you've decided where to put the directory, put a plain, RISC OS
  / Unix text file (i.e. LF terminated lines) called "List" and a
  RISC OS sprites file called "Sprites" in it. If both of these files
  are not readable, sprites won't be plotted (but again, no error is
  raised). The list file is copied to CacheFS and held open; the
  sprites file is loaded into a dynamic area. The file is closed and
  the dynamic area is removed when video playback stops.

  The list file consists of a series of entries. Each entry has three
  fields. Each field sits on its own line in the file. There are no
  empty lines between entries; comments, blank lines and control
  characters are not allowed (including tabs). The first field is the
  name of the sprite in the sprites file that should be plotted. The
  second field is the X coordinate, and the third field is the Y
  coordinate to plot at, in OS units, with (0,0) being the bottom left
  of the screen *not* taking the Safe Area into account. This lets you
  design overscanned sprites to "border" the picture when needed. Note
  though that there's no per-mode selection of sprites possible, so if
  viewing an NTSC style stream in a 480 line mode you may need to use
  different sprites from those designed towards a PAL style stream in
  a 576 line mode (another use for '-spritedir'). This of course will
  depend on the kind of overlay sprites in use.

  Sprites should be in 256 colours with the standard RISC OS 256
  colour palette. No colour translation is done at plot time - the
  sprite is thrown onto the display as quickly as possible, since
  there just isn't enough processor time to do anything better. The
  designs should be in a square pixel mode and be anti-twittered
  where necessary. Colour 1 of the sprites (0 being black) will be
  transparent, so you can create binary mask sprites this way; do NOT
  use a "true" sprite mask as this gets ignored and only makes the
  sprite file bigger. You need to have a logical colour transparent
  anyway, so there's no point having both a "forbidden" colour and
  then reading the real mask for plotting purposes. By the way, for
  coordinates, (96,48) seems to be near to the bottom left corner of
  the visible display on most TVs, if that helps...

  The previous sprite is removed from the display before the next one
  is plotted, so if you want to give the illusion of "building up"
  a picture you'll need to have each new sprite holding the entire
  image I'm afraid. The removal is done intelligently so overlap of
  one sprite by another will not be seen to flicker. At least you
  don't have to worry about *that* side of things too!

  Designing sprites
  -----------------

  Avoiding colour 1 can be tricky. From a previous work, here's some
  advice on how to create the sprites:

  | The modified video player will be running in a 256 colour mode,
  | with the standard RISC OS 256 colour palette defined *except*
  | physical colour 1 (normally defined as the darkest grey
  | available) is transparent. There must be no mask and no palette
  | associated with the sprite data. For development, it is possible
  | to (in Paint at least):
  |
  |  * Create a 256 colour sprite with mask but no palette;
  |
  |  * Design the sprite using a conventional mask where you want
  |    transparent areas, but avoid using colour 1 in the palette;
  |
  |  * When finished, perform a global fill of the mask colour using
  |    colour 1 and remove the mask.
  |
  | Software anti-twitter is disabled, as this is not a 32K colour
  | mode. Therefore, sprites should take into account the effects of
  | any sharp colour transitions along horizontal or shallow dipping
  | lines, and anti-alias appropriately.
  |
  | It may be useful to employ dithering or other image processing
  | effects via. ChangeFSI. In this case, ChangeFSI will create 256
  | colour sprites that may use colour 1. This can be prevented as
  | follows:
  |
  |  * Create a 256 colour sprite of any size in Paint, making sure
  |    it has a colour palette (not 'mono' or 'none'; mask is
  |    irrelevant).
  |
  |  * In the sprite editing window, use the 'Save->Palette' menu
  |    item to save the palette file *back to the editing window*.
  |    This will enable the 'Paint->Edit palette' menu item which
  |    was greyed beforehand.
  |
  |  * Select colour 1 in the palette display and use the
  |    'Paint->Edit palette' menu item to change colour 1 to be
  |    black, rather than dark grey.
  |
  |  * Use the 'Save->Palette' menu item to save the modified
  |    palette file to disc.
  |
  | Change to a 256 greyscale mode and start ChangeFSI. Look on
  | shared disc Merdyl, in $.Utilities.Screen.Pal256 (it's an ArcFS
  | archive but SparkFS will read it fine). Run the application in
  | the archive (the screen will flick back to colour again) and drag
  | your new palette file to it. The Desktop is now running in the
  | 256 colour palette you created earlier. Any files you process in
  | ChangeFSI will now be written to this palette, provided "Use
  | current mode" is ticked in the "Sprite Output" dialogue box.
  | Since colours 0 and 1 are both black, colour 0 will always be
  | found first when ChangeFSI wants to use black, so colour 1 will
  | never appear in the output sprite (you can always test this by
  | making colour 1 a bright, obvious colour in Paint and seeing if
  | it shows up in the sprite).
  |
  | If you use the 'ModeFader' module to fade the screen in/out
  | before/after a mode change, you should *RMKill this before
  | running Pal256 - otherwise you'll eventually find the machine
  | hangs.

  Mostly fine, though when you read this there's a good chance the
  shared disc it mentions won't exist anymore and you'll have to
  find your own way of setting the Desktop palette (not all that
  hard, really).

  --
  Andrew Hodgkinson, Senior Software Engineer
  Element 14 Ltd.                              Tel: +44 (0) 1223 725247
  645 Newmarket Road                           Fax: +44 (0) 1223 725347
  Cambridge, CB5 8PB, United Kingdom           WWW: http://www.e-14.com/