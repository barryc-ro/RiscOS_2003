#include "swis.h"
#include "Global/Services.h"

#include "ModHdr.h"
#include "DWrite.h"

#define IGNORE(x) ((x)=(x))

#define MPEGNDS_RegisterHandlers 0x555C1
#define MPEGNDS_DeregisterHandlers 0x555C2

#define CAS_ID 123

static char string [256];

/**********************************************************************
 *
 * Open stream handler. Called when a stream opens (starts playing).
 */
static unsigned int Open (unsigned int flags, unsigned int csh)
{
  DWrite_Write0("Open: flags =");
  DWrite_WriteHex8(flags);
  DWrite_Write0(", csh =");
  DWrite_WriteHex8(csh);
  DWrite_NewLine();
  return 1;
}

/**********************************************************************
 *
 * Reset stream handler. Called after a play speed transition, etc.
 */
static void Reset (unsigned int flags, unsigned int handle)
{
  DWrite_Write0("Reset: flags =");
  DWrite_WriteHex8(flags);
  DWrite_Write0(", handle =");
  DWrite_WriteHex8(handle);
  DWrite_NewLine();
}

/**********************************************************************
 *
 * Close stream handler. Called when the stream closes (i.e. stops).
 */
static void Close (unsigned int flags, unsigned int handle)
{
  DWrite_Write0("Close: flags =");
  DWrite_WriteHex8(flags);
  DWrite_Write0(", handle =");
  DWrite_WriteHex8(handle);
  DWrite_NewLine();
}

/**********************************************************************
 *
 * Descriptor (CA system private_data_bytes) handler.
 */
static void Descriptor (unsigned int flags, unsigned int handle, const char *buffer, unsigned int size)
{
  DWrite_Write0("Descriptor: flags =");
  DWrite_WriteHex8(flags);
  DWrite_Write0(", handle =");
  DWrite_WriteHex8(handle);
  DWrite_Write0(", buffer =");
  DWrite_WriteHex8((int)buffer);
  DWrite_Write0(", size =");
  DWrite_WriteHex2(size);
  DWrite_Write0(" buffer contains");
  DWrite_WriteHex2(buffer[0]);
  DWrite_WriteHex2(buffer[1]);
  DWrite_WriteHex2(buffer[2]);
  DWrite_WriteHex2(buffer[3]);
  DWrite_Write0(" ...");
  DWrite_WriteHex2(buffer[size-4]);
  DWrite_WriteHex2(buffer[size-3]);
  DWrite_WriteHex2(buffer[size-2]);
  DWrite_WriteHex2(buffer[size-1]);
  DWrite_NewLine();
}

/**********************************************************************
 *
 * ECM payload handler.
 */
static void ECM (unsigned int flags, unsigned int handle, const char *buffer, unsigned int size)
{
  DWrite_Write0("ECM: flags =");
  DWrite_WriteHex8(flags);
  DWrite_Write0(", handle =");
  DWrite_WriteHex8(handle);
  DWrite_Write0(", buffer =");
  DWrite_WriteHex8((int)buffer);
  DWrite_Write0(", size =");
  DWrite_WriteHex2(size);
  DWrite_NewLine();
  DWrite_Write0(" buffer contains");
  DWrite_WriteHex2(buffer[0]);
  DWrite_WriteHex2(buffer[1]);
  DWrite_WriteHex2(buffer[2]);
  DWrite_WriteHex2(buffer[3]);
  DWrite_Write0(" ...");
  DWrite_WriteHex2(buffer[size-4]);
  DWrite_WriteHex2(buffer[size-3]);
  DWrite_WriteHex2(buffer[size-2]);
  DWrite_WriteHex2(buffer[size-1]);
  DWrite_NewLine();
}

/**********************************************************************
 *
 * TS packet payload descrambler handler.
 */
static unsigned int Descramble (unsigned int flags, unsigned int handle, char *buffer, unsigned int size)
{
  IGNORE (flags);
  IGNORE (handle);
  IGNORE (buffer);
  IGNORE (size);

  DWrite_Write0("Descramble: flags =");
  DWrite_WriteHex8(flags);
  DWrite_Write0(", handle =");
  DWrite_WriteHex8(handle);
  DWrite_Write0(", buffer =");
  DWrite_WriteHex8((int)buffer);
  DWrite_Write0(", size =");
  DWrite_WriteHex2(size);
  DWrite_Write0(" buffer contains");
  DWrite_WriteHex2(buffer[0]);
  DWrite_WriteHex2(buffer[1]);
  DWrite_WriteHex2(buffer[2]);
  DWrite_WriteHex2(buffer[3]);
  DWrite_Write0(" ...");
  DWrite_WriteHex2(buffer[size-4]);
  DWrite_WriteHex2(buffer[size-3]);
  DWrite_WriteHex2(buffer[size-2]);
  DWrite_WriteHex2(buffer[size-1]);
  DWrite_NewLine();

  return 1;
}

static struct
{
  unsigned int (*open)       (unsigned int flags, unsigned int csh);
  void         (*reset)      (unsigned int flags, unsigned int handle);
  void         (*close)      (unsigned int flags, unsigned int handle);
  void         (*descriptor) (unsigned int flags, unsigned int handle, const char *buffer, unsigned int size);
  void         (*ecm)        (unsigned int flags, unsigned int handle, const char *buffer, unsigned int size);
  unsigned int (*descramble) (unsigned int flags, unsigned int handle, char *buffer, unsigned int size);
}
fns = { Open, Reset, Close, Descriptor, ECM, Descramble };

/**********************************************************************
 *
 * Module initialisation code.
 */
_kernel_oserror *Module_Init (const char *cmd_tail, int podule_base, void *pw)
{
  IGNORE (cmd_tail);
  IGNORE (podule_base);
  IGNORE (pw);
  DWrite_Init();
  _swix (MPEGNDS_RegisterHandlers, _INR(0,2), 1, &fns, CAS_ID);
  return 0;
}

/**********************************************************************
 *
 * Module finalisation code.
 */
_kernel_oserror *Module_Final (int fatal, int podule, void *pw)
{
  IGNORE (fatal);
  IGNORE (podule);
  IGNORE (pw);
  _swix (MPEGNDS_DeregisterHandlers, _INR(0,1), 0, &fns);
  return 0;
}

/**********************************************************************
 *
 * Handle an MPEG service call. Was it MPEG NDS (re)initialising?
 */
static void MPEG_Service(int reason, void *pw)
{
  IGNORE (pw);

  switch (reason & 0xFE)
  {
    case 1<<1: /* MPEGControl module has (re)initialised */
    case 7<<1: /* MPEG NDS module has (re)initialised    */
    {
      _swix (MPEGNDS_RegisterHandlers, _INR(0,2), 1, &fns, CAS_ID);
      break;
    }
  }
}

/**********************************************************************
 *
 * Module service call handler.
 */
void Module_Service(int service_number, _kernel_swi_regs *r, void *pw)
{
  switch (service_number)
  {
    case Service_ModeChange:
    {
      DWrite_Init();
      break;
    }
    case Service_MPEGControlStarting:
    {
      MPEG_Service((int) r->r[0], pw);
      break;
    }
  }
}

