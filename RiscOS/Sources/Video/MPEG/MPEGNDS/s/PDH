; >s.PDH
; Payload Descrambling Handler
; Copyright © Pace Micro Technology plc, 2002
; All rights reserved.


; ******************************************************
; *
; * Register the payload descrambling handler for this stream.
; *
; * In...
; *   R10	= pointer to stream block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   R14	= corrupted
; *
Register_PDH Entry "R1-R5"
	DAWriteS "RegPDH()", LF
	; Check registration bit...
	LDR	R5, [SB, #SB_Flags]
	TST	R5, #SB_Flags_PDH
	BNE	%FT00
	; Register...
	DAWriteS "  PDH:Reg", LF
	MOV	R0, #DESCRAMBLER_FLAGS
	ADR	R2, PayloadDescramblingHandler
	MOV	R3, SB
	LDR	R4, [SB, #SB_CSH]
	SWI	XMPEGControl_RegisterPayloadDescramblingHandler
	; Set registration bit...
	ORRVC	R5, R5, #SB_Flags_PDH
	STRVC	R5, [SB, #SB_Flags]
00	; Exit (with possible error)...
	EXIT


; ******************************************************
; *
; * Deregister the payload descrambling handler for this stream.
; *
; * In...
; *   R10	= pointer to stream block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   R14	= corrupted
; *
Deregister_PDH Entry "R1-R5"
	DAWriteS "DeregPDH()", LF
	; Check registration bit...
	LDR	R5, [SB, #SB_Flags]
	TST	R5, #SB_Flags_PDH
	BEQ	%FT00
	; Deregister...
	DAWriteS "  PDH:Dereg", LF
	MOV	R0, #DESCRAMBLER_FLAGS
	ADR	R2, PayloadDescramblingHandler
	MOV	R3, SB
	LDR	R4, [SB, #SB_CSH]
	SWI	XMPEGControl_DeregisterPayloadDescramblingHandler	; and the long SWI name winner is...
	; Clear registration bit...
	BICVC	R5, R5, #SB_Flags_PDH
	STRVC	R5, [SB, #SB_Flags]
00	; Exit (with possible error)...
	EXIT


; ******************************************************
; *
; * Reset the buffers for the payload descrambling handler on this stream.
; *
; * In...
; *   R10	= pointer to stream block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted
; *   R1-R14	= preserved
; *
Reset_PDH ROUT
	LDR	R0, [SB, #SB_Flags]
	ORR	R0, R0, #SB_Flags_FirstChunk
	STR	R0, [SB, #SB_Flags]
	MOV	PC, LR

; ******************************************************
; *
; * Despatch the appropriate routine for this payload descrambling handler based
; * upon the reason code passed in R0. Try to do the most speed-critical
; * things fastest.
; *
; * In...
; *   R0	= reason code
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R2	= depends upon R0 on entry
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
PayloadDescramblingHandler ROUT
	CMP	R0, #PSHReason_DescramblePacket
	BEQ	PayloadDescramblingHandler_DataTransfer
	BLO	PayloadDescramblingHandler_OpenStream
	CMP	R0, #PSHReason_ResetStream
	BEQ	PayloadDescramblingHandler_ResetStream
	BLO	PayloadDescramblingHandler_CloseStream
	; Unknown reason codes do nothing.
	MOV	PC, LR


; ******************************************************
; *
; * PAYLOAD DESCRAMBLING HANDLER - OPEN STREAM (REASON 0)
; *
; * In...
; *   R0	= reason code (0)
; *   R1	= stream flags (as passed to MPEGControl_OpenStream)
; *   R2	= control stream handle
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= payload descrambling stream handle - WS pointer (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
PayloadDescramblingHandler_OpenStream Entry "R3-R11"
	; Arrange registers in the order we want them...
	LDR	CL, [R12, #SB_CL]	; CL (R11) = parent client block pointer
	MOV	SB, R12			; SB (R10) = stream block pointer
	LDR	WS, [CL, #CL_WS]	; WS (R12) = MPEGNDS module workspace pointer
	DAWriteS "PDH_Open()", LF
	; Initialise the buffers for this stream...
	BL	Reset_PDH
	BL	Bitstream_Claim
	STR	R2, [SB, #SB_PDH_Packet]
00	; Return the WS pointer as our payload descrambling stream handle (or an error)...
	MOVVC	R0, WS
	EXIT


; ******************************************************
; *
; * PAYLOAD DESCRAMBLING HANDLER - DATA TRANSFER (REASON 1)
; *
; * In...
; *   R0	= reason code (1)
; *   R1	= flags (should be zero)
; *   R2	= WS pointer
; *   R3	= pointer to bitstream packet descriptor chain
; *   R8	= number of bytes following the bitstream packets in R3 that form part
; *		  of the same TS packet
; *   R9	= transport_scrambling_control field for this TS packet, in bits 6 and 7;
; *		  all other bits are undefined
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R3	= corrupted
; *   R4-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
PayloadDescramblingHandler_DataTransfer Entry "R4-R5, R7-R11"
	; Arrange registers in the order we want them...
	LDR	CL, [R12, #SB_CL]	; CL (R11) = parent client block pointer
	MOV	SB, R12			; SB (R10) = stream block pointer
	MOV	WS, R2			; WS (R12) = MPEGNDS module workspace pointer
	DAWriteS "PDH_Data()", LF
	MOV	R7, R9, LSR #6
	; Copy this chunk of the payload...
	LDR	R2, [R3, #PacketDescriptor_Length]
	LDR	R0, [R3, #PacketDescriptor_Start]
	LDR	R4, [SB, #SB_PDH_Packet]
	ADD	R1, R4, #BITSTREAM_SIZE
	ADD	R5, R2, R8
	SUB	R1, R1, R5
	LDR	R14, [SB, #SB_Flags]
	; If this is the first chunk, get our packet descriptor fully
	; initialised...
	TST	R14, #SB_Flags_FirstChunk
	BEQ	%FT00
	BIC	R14, R14, #SB_Flags_FirstChunk
	STR	R14, [SB, #SB_Flags]
	LDR	R14, [R3, #PacketDescriptor_Flags]
	STR	R1, [SB, #SB_PDH_First]
	STR	R14, [R4, #PacketDescriptor_Flags]
	STR	R1, [R4, #PacketDescriptor_Start]
	STR	R5, [R4, #PacketDescriptor_Length]

; This is dead code. Left in for posterity to remind me at some point to check
; if this problem still needs fixing. After all, I'm going to the trouble of
; registering with MPEGControl's direct call interface on module init so that
; I can call its Buffer Usage routine directly. I don't appear to be doing this
; so I guess that client-pull MPEGs (i.e. NFS and HyperMS) will fall over after
; a few seconds/minutes due to RMA exhaustion.
;
; Push "R4-R5,LR"
;	; Record the buffer descriptor from the first packet we copy into our
;	; packet. Thus, we can increment their usage counter to avoid excessive
;	; memory claiming by client-pull systems...
;	LDR	R5, [R3, #PacketDescriptor_BufferDescriptor]
;	STR	R5, [R4, #PacketDescriptor_BufferDescriptor]
;	SCPSR	I_bit, 0, R14,, R4	; Disable IRQs
;	LDR	R14, [R5, #BufferDescriptor_Packets]
;	ADD	R14, R14, #1
;	STR	R14, [R5, #BufferDescriptor_Packets]
;	RestPSR	R4			; Restore IRQ state
; Pull "R4-R5,LR"

00	; Append the packet payload into our packet...
	BL	Safe_Copy
	; Call the free routine for the copied bitstream packet...
	MOV	R0, R3
	BL	Call_Bitstream_FreeRoutine
	; Have we got a complete TS packet payload (is R8=0)?
	TEQ	R8, #0
	MOVNE	R3, #0
	EXIT	NE
	; Yes - pass the TS packet payload to the descrambler (our client)...
	DAWriteS "  PDH:Call", LF
	LDR	R5, [SB, #SB_PDH_Packet]
	LDR	R2, [SB, #SB_PDH_First]
	ADD	R0, R5, #BITSTREAM_SIZE
	SUB	R3, R0, R2
	BIC	R3, R3, #15
	SUB	R2, R0, R3
	AND	R0, R7, #3
	LDR	R1, [SB, #SB_Handle]
	LDR	R4, [CL, #CL_Descrambling]
	BL	Call_Veneer
	; Set flag to indicate next fetch is first chunk...
	LDR	R14, [SB, #SB_Flags]
	ORR	R14, R14, #SB_Flags_FirstChunk
	STR	R14, [SB, #SB_Flags]
	; If the previous packet was successfully descrambled, claim a new one
	; for the next payload to go into an pass the descrambled packet on to
	; the MPEG system. Otherwise, throw the (still scrambled) data away and
	; re-use the bitstream packet for the next payload...
	TEQ	R0, #0
	LDREQ	R2, [SB, #SB_PDH_Packet]
	MOVEQ	R5, #0
	BLNE	Bitstream_Claim
	STR	R2, [SB, #SB_PDH_Packet]
	; Return pointer to our descrambled bitstream packet in R3 (or zero if
	; we threw the data away)...
	MOV	R3, R5
	DAWriteS "  PDH:Done", LF
	EXIT


; ******************************************************
; *
; * PAYLOAD DESCRAMBLING HANDLER - CLOSE STREAM (REASON 2)
; *
; * In...
; *   R0	= reason code (2)
; *   R1	= flags (as passed to MPEGControl_CloseStream)
; *   R2	= WS pointer
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R14	= preserved
; *
PayloadDescramblingHandler_CloseStream ROUT
	MOV	PC, LR


; ******************************************************
; *
; * PAYLOAD DESCRAMBLING HANDLER - RESET STREAM (REASON 3)
; *
; * In...
; *   R0	= reason code (3)
; *   R1	= flags (as passed to MPEGControl_ResetStream)
; *   R2	= WS pointer
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
PayloadDescramblingHandler_ResetStream Entry "R10-R11"
	; Arrange registers in the order we want them...
	LDR	CL, [R12, #SB_CL]	; CL (R11) = parent client block pointer
	MOV	SB, R12			; SB (R10) = stream block pointer
	MOV	WS, R2			; WS (R12) = MPEGNDS module workspace pointer
	DAWriteS "PDH_Reset()", LF
	; Reset the buffers for this stream...
	BL	Reset_PDH
	EXIT


	END
