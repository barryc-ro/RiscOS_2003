; >s.SWIs
; Copyright © Pace Micro Technology plc, 2002
; All rights reserved.
;
; This source file contains the SWI handler and the main body of the
; implementation for each SWI. Most supporting routines will be found in the
; "s.Support" file.

; ****************************************************
; *
; * Module SWI handler entry point.
; *
; * In...
; *   R0-R9	= passed in from caller
; *   R11	= SWI number offset from SWI chunk base
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R9	= values to return to caller
; *   R10-R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   N,Z,C	= corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_SWIHandler
	ROUT
	LDR	WS, [R12]
	RSBS	R11, R11, #(swi_end - swi_start) :SHR: 2
	ADDHS	PC, PC, R11, LSL #2
	B	BadSWI_Err
swi_start				; SWI:
	B	SWI_DeregisterHandlers	; 2
	B	SWI_RegisterHandlers	; 1
swi_end;B	SWI_SetCASID		; 0


; ****************************************************
; *
; * SWI MPEGNDS_SetCASID
; *
; * This SWI is used to inform the MPEG NDS module of the CA system ID to be
; * used when scanning the PMT for the correct CA descriptor.
; *
; * In...
; *   R0	= flags (should be zero)
; *   R1	= CA_system_ID
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= previous global CA_system_ID value
; *   R1-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   R14	= corrupted
; *
SWI_SetCASID ROUT
  [ DEBUG
	Push	"LR"
	DAWriteS "SWI SetCASID", LF
	Pull	"LR"
  ];DEBUG
	LDR	R0, [WS, #WS_CASID]
	STR	R1, [WS, #WS_CASID]
	MOV	PC, LR


; ****************************************************
; *
; * SWI MPEGNDS_RegisterHandlers
; *
; * This SWI will register a block of APCS-compatible functions with the MPEG
; * NDS module. Each word in the block pointed to by R1 on entry contains a
; * pointer to a C function which the MPEG NDS module will call.
; *
; * In...
; *   R0	= flags:
; *               bit 0 - R2 contains CA_system_ID for this client (else, use global)
; *   R1	= pointer to function pointer block
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   R14	= corrupted
; *
SWI_RegisterHandlers Entry "R1-R6"
	; Is R2 the CA system ID for these handlers?
	DAWriteS "SWI Reg", LF
	TST	R0, #RegFlag_CAS
	LDREQ	R10, [WS, #WS_CASID]
	MOVNE	R10, R2
	CMP	R10, #-1
	BEQ	Reg_Err
	; Claim client block...
	DAWriteS "  Reg:ClaimCL", LF
	BL	Claim_CL
	EXIT	VS
	; Initialise the client block...
	DAWriteS "  Reg:InitCL", LF
	LDMIA	R1, {R2-R6,R14}
	ADD	R0, CL, #CL_OpenStream
	STMIA	R0, {R2-R6,R14}				; The client's function pointers
	STR	R10, [CL, #CL_CASID]			; The CA_system_ID to use for this client
	; Register a DSH with MPEGControl on all streams...
	DAWriteS "  Reg:RegDSH", LF
	BL	Register_DSH
	EXIT	VC
	; If registration fails with MPEGControl, remove this client from the list...
	MOV	R1, R0
	BL	Free_CL
	MOV	R0, R1
	SETV
	EXIT


; ****************************************************
; *
; * SWI DeregisterHandlers
; *
; * This SWI is used to deregister a block of functions with the MPEG NDS
; * module. The function pointers within the block should match those passed
; * into the MPEGNDS_RegisterHandlers SWI call.
; *
; * In...
; *   R0	= flags (should be zero)
; *   R1	= pointer to function pointer block
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   R14	= corrupted
; *
SWI_DeregisterHandlers Entry "R1"
	; Find the head of the client list...
	DAWriteS "SWI Dereg", LF
	LDR	CL, [WS, #WS_ClientList]
	TEQ	CL, #0
	BEQ	Dereg_Err
	; Search for a client matching this one...
	DAWriteS "  Dereg:Search", LF
	LDR	R1, [R1]
00	LDR	R14, [CL, #CL_OpenStream]
	TEQ	R1, R14
	BEQ	%FT01
	LDR	CL, [CL, #CL_Next]
	TEQ	CL, #0
	BNE	%BT00
	DAWriteS "  Dereg:NoMatch", LF
	B	Dereg_Err
01	; Deregister the descriptor handler...
	DAWriteS "  Dereg:NoDSH", LF
	BL	Deregister_DSH
	; Free the client block...
	DAWriteS "  Dereg:RemvCL", LF
	BL	Free_CL
	EXIT


	END
