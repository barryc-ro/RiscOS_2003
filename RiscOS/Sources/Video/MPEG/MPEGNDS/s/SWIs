; >s.SWIs
; Copyright © Pace Micro Technology plc, 2001
; All rights reserved.
;
; This source file contains the SWI handler and the main body of the
; implementation for each SWI. Most supporting routines will be found in the
; "s.Support" file.

; ****************************************************
; *
; * Module SWI handler entry point.
; *
; * In...
; *   R0-R9	= passed in from caller
; *   R11	= SWI number offset from SWI chunk base
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R9	= values to return to caller
; *   R10-R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   N,Z,C	= corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_SWIHandler
	ROUT
	LDR	R12, [R12]
	RSBS	R11, R11, #(swi_end - swi_start) :SHR: 2
	ADDHS	PC, PC, R11, LSL #2
	B	BadSWI_Err
swi_start				; SWI:
	B	SWI_DeregisterHandlers	; 2
	B	SWI_RegisterHandlers	; 1
swi_end;B	SWI_SetCASID		; 0


; ****************************************************
; *
; * SWI MPEGNDS_SetCASID
; *
; * This SWI is used to inform the MPEG NDS module of the CA system ID to be
; * used when scanning the PMT for the correct CA descriptor.
; *
; * In...
; *   R0	= flags (should be zero)
; *   R1	= CA_system_ID
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   R14	= corrupted
; *
SWI_SetCASID ROUT
	STR	R1, [R12, #WS_CASID]
	MOV	PC, LR


; ****************************************************
; *
; * SWI MPEGNDS_RegisterHandlers
; *
; * This SWI will register a block of APCS-compatible functions with the MPEG
; * NDS module. Each word in the block pointed to by R1 on entry contains a
; * pointer to a C function which the MPEG NDS module will call.
; *
; * In...
; *   R0	= flags (should be zero)
; *   R1	= pointer to function pointer block
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   R14	= corrupted
; *
SWI_RegisterHandlers Entry "R1-R11"
	; Is R2 the CA system ID for these handlers?
;	TST	R0, #1 :SHL: 0
;	MOVNE	R1, R2
;	MOVEQ	R1, #-1

  [ DEMO_BODGE
	LDR	R0, [R12, #WS_ClientList]
	TEQ	R0, #0
	BNE	Reg_Err

	DAWriteS "Register...", 10

	; Claim client block...
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #CLIENT_BLK_SIZE
	SWI	XOS_Module
	EXIT	VS
	MOV	R11, R2
	STR	R11, [R12, #WS_ClientList]

	; Initialise client block...
	STR	R12, [R11, #CL_ModuleWorkspace]
	MOV	R0, SP, LSR #20
	MOV	R0, R0, LSL #20
	LDMIA	R0, {R2-R3}
	ADD	R0, R11, #CL_RelocModifiers
	STMIA	R0, {R2-R3}
	LDMIA	R1, {R2-R6,R14}
	ADD	R0, R11, #CL_OpenStream
	STMIA	R0, {R2-R6,R14}
	LDR	R0, [R12, #WS_CASID]
	MOV	R1, #0
	STR	R0, [R11, #CL_CASID]
	STR	R1, [R11, #CL_Prev]
	STR	R1, [R11, #CL_Next]
	STR	R1, [R11, #CL_ClaimList]

	; Claim DSH block...
	MOV	R3, #DSH_BLOCK_SIZE
	BL	Client_Claim
	EXIT	VS
	MOV	R10, R2
	STR	R10, [R12, #WS_DSHBlock]

	; Initialise DSH block...
	STR	R12, [R10, #DSH_ModuleWorkspace]
	STR	R11, [R10, #DSH_ClientBlock]
	MOV	R0, #0
	STR	R0, [R10, #DSH_ClientHandle]
	STR	R0, [R10, #DSH_Flags]
	STR	R0, [R10, #DSH_ControlStreamHandle]
	STR	R0, [R10, #DSH_ECMPID]
	STR	R0, [R10, #DSH_Limit]
	STR	R0, [R10, #DSH_Fetched]

	; Register the descrambling handler...
	MOV	R0, #0
	ADR	R2, DescramblingHandler
	MOV	R3, R10
	SWI	XMPEGControl_RegisterPayloadDescramblingHandler

	DAWriteS "Registered.", 10
  ];DEMO_BODGE

	EXIT


; ****************************************************
; *
; * SWI DeregisterHandlers
; *
; * This SWI is used to deregister a block of functions with the MPEG NDS
; * module. The function pointers within the block should match those passed
; * into the MPEGNDS_RegisterHandlers SWI call.
; *
; * In...
; *   R0	= flags (should be zero)
; *   R1	= pointer to function pointer block
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R9	= preserved
; *   R10-R11	= corrupted
; *   R12-R13	= preserved
; *   R14	= corrupted
; *
SWI_DeregisterHandlers Entry "R1-R11"
  [ DEMO_BODGE
	LDR	R0, [R12, #WS_ClientList]
	TEQ	R0, #0
	BEQ	Dereg_Err

	DAWriteS "Deregister...", 10

	; Deregister descrambling handler...
	MOV	R0, #0
	LDR	R3, [R12, #WS_DSHBlock]
	ADR	R2, DescramblingHandler
	TEQ	R3, #0
	SWINE	XMPEGControl_DeregisterPayloadDescramblingHandler
	EXIT	VS

	DAWriteS "  Free DSH block", 10

	; Free the DSH block...
	LDR	R2, [R12, #WS_DSHBlock]
	MOV	R0, #ModHandReason_Free
	TEQ	R2, #0
	SWINE	XOS_Module
	EXIT	VS

	DAWriteS "  Free client's blocks", 10

	BL	Free_All_Clients

	DAWriteS "Deregistered.", 10
  ];DEMO_BODGE
	EXIT


	END
