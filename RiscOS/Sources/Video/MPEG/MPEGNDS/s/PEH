; >s.PEH
; Program Element Handler
; Copyright © Pace Micro Technology plc, 2002
; All rights reserved.


; ******************************************************
; *
; * Register the program element handler for this stream.
; *
; * In...
; *   R10	= pointer to stream block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   R14	= corrupted
; *
Register_PEH Entry "R1-R4"
	DAWriteS "RegPEH()", LF
	; Check registration bit...
	LDR	R0, [SB, #SB_Flags]
	TST	R0, #SB_Flags_PEH
	BNE	%FT00
	; Register...
	DAWriteS "  PEH:Reg", LF
	LDR	R0, =ELEMENT_FLAGS
	LDR	R1, [SB, #SB_ECMPID]
	ADR	R2, ProgramElementHandler
	MOV	R3, SB
	LDR	R4, [SB, #SB_CSH]
	SWI	XMPEGControl_RegisterProgramElementHandler
	BVS	%FT00
	; Set registration bit...
	LDR	R0, [SB, #SB_Flags]
	ORR	R0, R0, #SB_Flags_PEH
	STR	R0, [SB, #SB_Flags]
00	; Exit (with possible error)...
	EXIT


; ******************************************************
; *
; * Deregister the program element handler for this stream.
; *
; * In...
; *   R10	= pointer to stream block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   R14	= corrupted
; *
Deregister_PEH Entry "R1-R4"
	DAWriteS "DeregPEH()", LF
	; Check registration bit...
	LDR	R0, [SB, #SB_Flags]
	TST	R0, #SB_Flags_PEH
	BEQ	%FT00
	; Deregister...
	DAWriteS "  PEH:Dereg", LF
	LDR	R0, =ELEMENT_FLAGS
	LDR	R1, [SB, #SB_ECMPID]
	ADR	R2, ProgramElementHandler
	MOV	R3, SB
	LDR	R4, [SB, #SB_CSH]
	SWI	XMPEGControl_DeregisterProgramElementHandler
	BVS	%FT00
	; Clear registration bit...
	LDR	R0, [SB, #SB_Flags]
	BIC	R0, R0, #SB_Flags_PEH
	STR	R0, [SB, #SB_Flags]
00	; Exit (with possible error)...
	EXIT


; ******************************************************
; *
; * Reset the buffers for the program element handler on this stream.
; *
; * In...
; *   R10	= pointer to stream block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted
; *   R1-R14	= preserved
; *
Reset_PEH ROUT
	MOV	R0, #0
	STR	R0, [SB, #SB_PEH_Fetched]
	MOV	PC, LR


; ******************************************************
; *
; * Despatch the appropriate routine for this program element handler based
; * upon the reason code passed in R0. Try to do the most speed-critical
; * things fastest.
; *
; * In...
; *   R0	= reason code
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R2	= depends upon R0 on entry
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
ProgramElementHandler ROUT
	CMP	R0, #PEHReason_DataTransfer
	BEQ	ProgramElementHandler_DataTransfer
	BLO	ProgramElementHandler_OpenStream
	CMP	R0, #PEHReason_ResetStream
	BEQ	ProgramElementHandler_ResetStream
	BLO	ProgramElementHandler_CloseStream
	CMP	R0, #PEHReason_SetSpeed
	BLO	ProgramElementHandler_Play
	BEQ	ProgramElementHandler_SetSpeed
	; Unknown reason codes do nothing.
	MOV	PC, LR


; ******************************************************
; *
; * PROGRAM ELEMENT HANDLER - OPEN STREAM (REASON 0)
; *
; * In...
; *   R0	= reason code (0)
; *   R1	= stream flags (as passed to MPEGControl_OpenStream)
; *   R2	= control stream handle
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= program element stream handle - WS pointer (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
ProgramElementHandler_OpenStream Entry "R10-R11"
	; Arrange registers in the order we want them...
	LDR	CL, [R12, #SB_CL]	; CL (R11) = parent client block pointer
	MOV	SB, R12			; SB (R10) = stream block pointer
	LDR	WS, [CL, #CL_WS]	; WS (R12) = MPEGNDS module workspace pointer
	DAWriteS "PEH_Open()", LF
	; Initialise the buffers for this stream...
	BL	Reset_PEH
	; Return the WS pointer as our program element stream handle...
	MOV	R0, WS
	EXIT


; ******************************************************
; *
; * PROGRAM ELEMENT HANDLER - DATA TRANSFER (REASON 1)
; *
; * In...
; *   R0	= reason code (1)
; *   R1	= flags (should be zero)
; *   R2	= WS pointer
; *   R3	= pointer to bitstream packet descriptor chain
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R3	= corrupted
; *   R4-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
ProgramElementHandler_DataTransfer Entry "R4-R5, R10-R11"
	; Arrange registers in the order we want them...
	LDR	CL, [R12, #SB_CL]	; CL (R11) = parent client block pointer
	MOV	SB, R12			; SB (R10) = stream block pointer
	MOV	WS, R2			; WS (R12) = MPEGNDS module workspace pointer
	DAWriteS "PEH_Data()", LF
	; Load our buffer information into registers...
	LDR	R4, [SB, #SB_PEH_Fetched]
	ADD	R5, SB, #SB_PEH_Buffer
00	; Traverse the packet descriptor chain, buffering payload...
	DAWriteS "  PEH:Packet", LF
	LDR	R2, [R3, #PacketDescriptor_Length]
	LDR	R0, [R3, #PacketDescriptor_Start]
	ADD	R1, R5, R4
	TEQ	R2, #0
	BEQ	%FT03
	ADD	R4, R4, R2
	CMP	R4, #TS_PAYLOAD_SIZE
	BEQ	%FT01
	BHI	%FT02
	; Add the bytes from the packet to our buffer...
	DAWriteS "  PEH:Add1", LF
	BL	Safe_Copy
	B	%FT03
01	; We have a complete ECM packet payload. Pass it to our client...
	DAWriteS "  PEH:Add2", LF
	BL	Safe_Copy
	DAWriteS "  PEH:Call", LF
	Push	"R3-R4"
	MOV	R0, #0
	LDR	R1, [SB, #SB_Handle]
	MOV	R2, R5
	MOV	R3, #TS_PAYLOAD_SIZE
	LDR	R4, [CL, #CL_ECMTSPacket]
	BL	Call_Veneer
	Pull	"R3-R4"
	DAWriteS "  PEH:Reset", LF
	BL	Reset_PEH
	MOV	R4, #0
	DAWriteS "  PEH:Reg", LF
	LDR	R0, [SB, #SB_Flags]
	TST	R0, #SB_Flags_PDH
	BLEQ	Register_PDH
	B	%FT03
02	; The bitstream data has overrun the expected size. We expect it to
	; always be exactly 184 bytes. This is possibly because of adaptation
	; fields in the start of the payload (which we assumed would not be
	; there). For now, we'll reset our buffer. This is an implementation
	; decision which may require changing if we ever hit this point in the
	; field.
	DAWriteS "  PEH:OVERRUN!", LF
	BL	Reset_PEH
03	; Delink and free this bitstream packet...
	MOV	R0, R3
	BL	Call_Bitstream_FreeRoutine
	MOVS	R3, R0
	; Move on to the next packet descriptor in the chain (if any)...
	BNE	%BT00
	; Write back the number of bytes in our buffer...
	STR	R4, [SB, #SB_PEH_Fetched]
	DAWriteS "  PEH:Done", LF
	EXIT


; ******************************************************
; *
; * PROGRAM ELEMENT HANDLER - CLOSE STREAM (REASON 2)
; *
; * In...
; *   R0	= reason code (2)
; *   R1	= flags (as passed to MPEGControl_CloseStream)
; *   R2	= WS pointer
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R14	= preserved
; *
ProgramElementHandler_CloseStream ROUT
	MOV	PC, LR


; ******************************************************
; *
; * PROGRAM ELEMENT HANDLER - RESET STREAM (REASON 3)
; *
; * In...
; *   R0	= reason code (3)
; *   R1	= flags (as passed to MPEGControl_ResetStream)
; *   R2	= WS pointer
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
ProgramElementHandler_ResetStream Entry "R10-R11"
	; Arrange registers in the order we want them...
	LDR	CL, [R12, #SB_CL]	; CL (R11) = parent client block pointer
	MOV	SB, R12			; SB (R10) = stream block pointer
	MOV	WS, R2			; WS (R12) = MPEGNDS module workspace pointer
	DAWriteS "PEH_Reset()", LF
	; Reset the buffers for this stream...
	BL	Reset_PEH
	EXIT


; ******************************************************
; *
; * PROGRAM ELEMENT HANDLER - PLAY (REASON 4)
; *
; * In...
; *   R0	= reason code (4)
; *   R1	= flags (should be zero)
; *   R2	= WS pointer
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R14	= preserved
; *
ProgramElementHandler_Play ROUT
	MOV	PC, LR


; ******************************************************
; *
; * PROGRAM ELEMENT HANDLER - SET SPEED (REASON 5)
; *
; * In...
; *   R0	= reason code (5)
; *   R1	= flags (should be zero)
; *   R2	= WS pointer
; *   R12	= SB block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R14	= preserved
; *
ProgramElementHandler_SetSpeed ROUT
	MOV	PC, LR


	END
