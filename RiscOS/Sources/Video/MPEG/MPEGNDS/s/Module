; >s.Module
; Copyright © Pace Micro Technology plc, 2001
; All rights reserved.
;
; Main module body of the MPEG NDS module. This is a glue layer between the
; MPEGControl (version 3 and above) module and the NDS Verifier software. It
; registers with several interfaces in MPEGControl and collates data from those
; interfaces into contiguous, word-aligned buffers, before passing the data to
; the Verifier.
;
; NOTE: throughout this source, all routines which return an error should be
; assumed to have corrupted any registers which are not specified explicitly as
; being "preserved" on exit. All routines should be assumed to corrupt flags
; unless explicitly specified as doing otherwise.

ErrBase			*	0x00819F00	; Base of our error number range
SWIBase			*	0x000555C0	; Base of our SWI chunk
TAB			*	9
LF			*	10
CR			*	13
|_Lib$Reloc$Off|	*	540
InfoWord_SubReason	*	2_11111110	; Mask to extract sub-reason code


	AREA	|Asm$$Code|, CODE, READONLY


; ******************************************************
; *
; * Module header block
; *
Module_BaseAddr
	&	Mod_Start-Module_BaseAddr	; Module start entry point offset
	&	Mod_Init-Module_BaseAddr	; Module initialisation entry point offset
	&	Mod_Die-Module_BaseAddr		; Module finalisation entry point offset
	&	Mod_Service-Module_BaseAddr	; Module service call entry point offset
	&	Mod_Title-Module_BaseAddr	; Module title string offset
	&	Mod_HelpStr-Module_BaseAddr	; Module version info string offset
	&	Mod_HC_Table-Module_BaseAddr	; Help and command keyword table offset
	&	SWIBase				; SWI chunk
	&	Mod_SWIHandler-Module_BaseAddr	; Module SWI handler entry point offset
	&	Mod_SWITable-Module_BaseAddr	; Module SWI table offset
	&	0				; No SWI name decode entry
	&	0				; No messages file
	&	Mod_Flags-Module_BaseAddr	; Module flags word offset


; ******************************************************
; *
; * Module flags word.
; *
Mod_Flags
  [ No32bitCode
	&	0
  |
	&	ModuleFlag_32bit
  ]


; ******************************************************
; *
; * Module version, date (and copyright) string.
; *
Mod_HelpStr
	DCB	"MPEG NDS", TAB
	DCB	"$Module_MajorVersion ($Module_Date)"
  [ Module_MinorVersion <> ""
	DCB	" $Module_MinorVersion"
  ];Module_MinorVersion <> ""
  [ DEBUG
	DCB	" (debug)"
  ];DEBUG
  [ DEMO_BODGE
	DCB	" (demo)"
  ];DEMO_BODGE
  [ PDH_TEST
	DCB	" (pdh)"
  ];PDH_TEST
	DCB	0
	ALIGN


; ******************************************************
; *
; * Module help and command keyword table.
; *
Mod_HC_Table * Module_BaseAddr


; ******************************************************
; *
; * Module title string and module SWI table.
; *
Mod_Title
Mod_SWITable
	DCB	"$Module_ComponentName", 0	; Prefix
	DCB	"SetCASID", 0			; 0
	DCB	"RegisterHandlers", 0		; 1
	DCB	"DeregisterHandlers", 0		; 2
	DCB	0
	ALIGN


; ******************************************************
; *
; * Module execution start entry point.
; *
; * In...
; *   R0	= pointer to command string, including module title
; *   R12	= pointer to private word for preferred instance
; * Out...
; *   SHOULD NOT RETURN. Call SWI OS_Exit or start another application.
; *
Mod_Start * Module_BaseAddr


; ******************************************************
; *
; * Module initialisation entry point.
; *
; * In...
; *   R10	= pointer to environment string
; *   R11	= I/O base or instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Init Entry	"R10-R11"
	; Claim our module workspace...
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #WS_SIZE
	SWI	XOS_Module
	EXIT	VS
	; If claim was successful, initialise the workspace...
	STR	R2, [R12]
	MOV	R12, R2
	MOV	R0, #0
	STR	R0, [R12, #WS_ClientList]
	STR	R0, [R12, #WS_FreeList]
	STR	R0, [R12, #WS_CASID]
	STR	R0, [R12, #WS_Flags]

	DAInit; "NDS Debug"
	DAWriteS "Module initialise", 10

  [ DEMO_BODGE
	MOV	R0, #0
	STR	R0, [R12, #WS_DSHBlock]
  ];DEMO_BODGE

	; Create a CallBack for issuing our "starting" service call...
	ADR	R0, CallBack_Handler
	MOV	R1, R12
	SWI	XOS_AddCallBack
	EXIT


; ******************************************************
; *
; * Module finalisation entry point.
; *
; * In...
; *   R10	= fatality indication: 0 is non-fatal, 1 is fatal
; *   R11	= instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Die	Entry	"R10-R11"
	LDR	R12, [R12]
	TEQ	R12, #0
	EXIT	EQ
	; Remove our CallBack (if it is still active)...
	ADR	R0, CallBack_Handler
	MOV	R1, R12
	SWI	XOS_RemoveCallBack
	; Issue a service call to inform everyone that we've died...
	MOV	R0, #1 :OR: (CtrlStarting_NDSDie :SHL: 1)
	MOV	R1, #Service_MPEGControlStarting
	SWI	XOS_ServiceCall
	DAWriteS "Module finalise", 10
	DAKill

  [ DEMO_BODGE
	BL	SWI_DeregisterHandlers
	BL	Release_Free_List
  ];DEMO_BODGE

	; Free our module workspace...
	MOV	R0, #ModHandReason_Free
	MOVS	R2, R12
	SWINE	XOS_Module
	MOV	R0, #0
	STR	R0, [R12]
	EXIT


; ******************************************************
; *
; * Module service call entry point.
; *
; * In...
; *   R1	= service call reason code
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= may be altered to return a result
; *   R1	= 0 if we claimed it
; *   R2-R8	= may be altered to return a result
; *   R9-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13-R14	= must be preserved
; *
; * Do NOT return V set errors from this routine!
; *
FastSvc_Table
	DCD	0
	DCD	FastSvc - Module_BaseAddr
	DCD	Service_MPEGControlStarting
	DCD	0
FastSvc_Pos
	DCD	FastSvc_Table - Module_BaseAddr
Mod_Service ROUT
	NOP
	; Eliminate service calls that we're not interested in...
	TEQ	R1, #Service_MPEGControlStarting
	MOVNE	PC, LR
FastSvc	Entry	"R0"
	; The service call is "MPEGControlStarting"...
	AND	R0, R0, #InfoWord_SubReason
	; If it is the MPEGControl module which has died, free any stream
	; buffers...
	TEQ	R0, #CtrlStarting_CtrlDie :SHL: 1
	TEQNE	R0, #CtrlStarting_CtrlInit :SHL: 1

;	LDREQ	R12, [R12]
;	BLEQ	Free_all

	; Do not return with V set...
	CLRV
	EXIT


; ******************************************************
; *
; * Module CallBack handler. Issue a service call to inform interested parties
; * that we have initialised.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
CallBack_Handler Entry "R0-R12"
	MOV	R0, #1 :OR: (CtrlStarting_NDSInit :SHL: 1)
	MOV	R1, #Service_MPEGControlStarting
	SWI	XOS_ServiceCall
	EXIT


	END
