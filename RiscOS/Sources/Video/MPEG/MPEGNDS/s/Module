; >s.Module
; Copyright © Pace Micro Technology plc, 2002
; All rights reserved.
;
; Main module body of the MPEG NDS module. This is a glue layer between the
; MPEGControl (version 3 and above) module and the NDS Verifier software. It
; registers with several interfaces in MPEGControl and collates data from those
; interfaces into contiguous, word-aligned buffers, before passing the data to
; the Verifier.
;
; NOTE: throughout this source, all routines which return an error should be
; assumed to have corrupted any registers which are not specified explicitly as
; being "preserved" on exit. All routines should be assumed to corrupt flags
; unless explicitly specified as doing otherwise.

ErrBase			*	0x00819F00	; Base of our error number range
SWIBase			*	0x000555C0	; Base of our SWI chunk
TAB			*	9
LF			*	10
CR			*	13
|_Lib$Reloc$Off|	*	540		; Funny, I can't get this from any global Hdr file :(
InfoWord_SubReason	*	2_11111110	; Mask to extract sub-reason code


	AREA	|Asm$$Code|, CODE, READONLY


; ******************************************************
; *
; * Module header block
; *
Module_BaseAddr
	&	Mod_Start-Module_BaseAddr	; Module start entry point offset
	&	Mod_Init-Module_BaseAddr	; Module initialisation entry point offset
	&	Mod_Die-Module_BaseAddr		; Module finalisation entry point offset
	&	Mod_Service-Module_BaseAddr	; Module service call entry point offset
	&	Mod_Title-Module_BaseAddr	; Module title string offset
	&	Mod_HelpStr-Module_BaseAddr	; Module version info string offset
	&	Mod_HC_Table-Module_BaseAddr	; Help and command keyword table offset
	&	SWIBase				; SWI chunk
	&	Mod_SWIHandler-Module_BaseAddr	; Module SWI handler entry point offset
	&	Mod_SWITable-Module_BaseAddr	; Module SWI table offset
	&	0				; No SWI name decode entry
	&	0				; No messages file
	&	Mod_Flags-Module_BaseAddr	; Module flags word offset


; ******************************************************
; *
; * Module flags word.
; *
Mod_Flags
  [ No32bitCode
	&	0
  |
	&	ModuleFlag_32bit
  ]


; ******************************************************
; *
; * Module version, date (and copyright) string.
; *
Mod_HelpStr
	DCB	"MPEG NDS", TAB
	DCB	"$Module_MajorVersion ($Module_Date)"
  [ Module_MinorVersion <> ""
	DCB	" $Module_MinorVersion"
  ];Module_MinorVersion <> ""
  [ DEBUG
	DCB	" (debug)"
  ];DEBUG
	DCB	0
	ALIGN


; ******************************************************
; *
; * Module help and command keyword table.
; *
Mod_HC_Table
	Command	MPEGNDS_Clients, 0, 0
  [ DEBUG
	Command	MPEGNDS_DebugSave, 1, 1
  ];DEBUG
	DCB	0
MPEGNDS_Clients_Help
	DCB	"This command will output a list of all the currently active MPEG NDS clients.", CR
MPEGNDS_Clients_Syntax
	DCB	"Syntax: *MPEGNDS_Clients", 0
  [ DEBUG
MPEGNDS_DebugSave_Help
	DCB	"This command saves the MPEG NDS debug dynamic area as a text file.", CR
MPEGNDS_DebugSave_Syntax
	DCB	"Syntax: *MPEGNDS_DebugSave <filename>", 0
  ];DEBUG
	ALIGN


; ******************************************************
; *
; * Module title string and module SWI table.
; *
Mod_Title
Mod_SWITable
	DCB	"$Module_ComponentName", 0	; Prefix
	DCB	"SetCASID", 0			; 0
	DCB	"RegisterHandlers", 0		; 1
	DCB	"DeregisterHandlers", 0		; 2
	DCB	0
	ALIGN


; ******************************************************
; *
; * Module execution start entry point.
; *
; * In...
; *   R0	= pointer to command string, including module title
; *   R12	= pointer to private word for preferred instance
; * Out...
; *   SHOULD NOT RETURN. Call SWI OS_Exit or start another application.
; *
Mod_Start * Module_BaseAddr


; ******************************************************
; *
; * Module initialisation entry point.
; *
; * In...
; *   R10	= pointer to environment string
; *   R11	= I/O base or instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Init Entry	"R10-R11"
	; Claim our module workspace...
	MOV	R0, #ModHandReason_Claim
	MOV	R3, #WS_SIZE
	SWI	XOS_Module
	EXIT	VS
	; If claim was successful, initialise the workspace...
	STR	R2, [R12]
	MOV	WS, R2
	MOV	R0, #0
	STR	R0, [WS, #WS_ClientList]
	STR	R0, [WS, #WS_FreeList]
	STR	R0, [WS, #WS_Flags]
	MOV	R0, #-1
	STR	R0, [WS, #WS_CASID]
	DAInit; "NDS Debug"
	; Get the direct call interface to MPEGControl sorted...
	DAWriteS "Init:CtrlIf", LF
	BL	Init_CtrlInterface
	EXIT	VS
	; Create a CallBack for issuing our "starting" service call...
	DAWriteS "Init:CallBack", LF
	ADR	R0, CallBack_Handler
	MOV	R1, #1 :OR: (CtrlStarting_NDSInit :SHL: 1)
	SWI	XOS_AddCallBack
	EXIT


; ******************************************************
; *
; * Module finalisation entry point.
; *
; * In...
; *   R10	= fatality indication: 0 is non-fatal, 1 is fatal
; *   R11	= instantiation number
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R6	= can be corrupted
; *   R7-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13	= must be preserved
; *   R14	= can be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Mod_Die	Entry	"R10-R11"
	LDR	WS, [R12]
	TEQ	WS, #0
	EXIT	EQ
	; Remove our CallBack (if it is still active)...
	DAWriteS "Final:RemvCB", LF
	ADR	R0, CallBack_Handler
	MOV	R1, WS
	SWI	XOS_RemoveCallBack
	; Deregister and remove all handlers for all clients...
	DAWriteS "Final:FreeCLs", LF
	BL	Free_All_CL
	EXIT	VS
	; Free any bitstream buffers in our free list...
	DAWriteS "Final:FreePkts", LF
	BL	Release_Free_List	; (never returns errors)
	; Issue a service call to inform everyone that we've died...
	DAWriteS "Final:CallBack", LF
	MOV	R0, #1 :OR: (CtrlStarting_NDSDie :SHL: 1)
	MOV	R1, #Service_MPEGControlStarting
	SWI	XOS_ServiceCall
	EXIT	VS
	; Free our module workspace...
	DAKill
	EXIT


; ******************************************************
; *
; * Module service call entry point.
; *
; * In...
; *   R1	= service call reason code
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= may be altered to return a result
; *   R1	= 0 if we claimed it
; *   R2-R8	= may be altered to return a result
; *   R9-R11	= must be preserved
; *   R12	= can be corrupted
; *   R13-R14	= must be preserved
; *
; * Do NOT return V set errors from this routine!
; *
FastSvc_Table
	DCD	0
	DCD	FastSvc - Module_BaseAddr
	DCD	Service_MPEGControlStarting
	DCD	0
FastSvc_Pos
	DCD	FastSvc_Table - Module_BaseAddr
Mod_Service ROUT
	NOP
	; Eliminate service calls that we're not interested in...
	TEQ	R1, #Service_MPEGControlStarting
	MOVNE	PC, LR
FastSvc	Entry	"R0"
	LDR	WS, [R12]
	DAWriteS "SVC", LF
	; The service call is "MPEGControlStarting"...
	AND	R0, R0, #InfoWord_SubReason
	; If it is the MPEGControl module which has died, free any stream
	; buffers...
	TEQ	R0, #CtrlStarting_CtrlDie :SHL: 1
	BEQ	%FT00
	TEQ	R0, #CtrlStarting_CtrlInit :SHL: 1
	BEQ	%FT01
	; Do not return with V set...
	CLRV
	EXIT
00	; MPEGControl has died...
	DAWriteS "  SVC CtrlDie", LF
	BL	Remove_CtrlInterface
	CLRV
	EXIT
01	; MPEGControl has (re)initialised...
	DAWriteS "  SVC CtrlInit", LF
	BL	Init_CtrlInterface
	CLRV
	EXIT


; ******************************************************
; *
; * Module CallBack handler. Issue a service call to inform interested parties
; * that we have initialised.
; *
; * In...
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
CallBack_Handler Entry "R0-R12"
	MOV	R0, R12
	MOV	R1, #Service_MPEGControlStarting
	SWI	XOS_ServiceCall
	EXIT


; ****************************************************
; *
; * *MPEGNDS_Clients
; *
; * Output information about each registered MPEG NDS client.
; *
; * In...
; *   R0	= pointer to parameter string
; *   R1	= number of parameters
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= may be corrupted (or pointer to error block)
; *   R1-R6	= may be corrupted
; *   R7-R11	= must be preserved
; *   R12	= may be corrupted
; *   R13	= must be preserved
; *   R14	= may be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
MPEGNDS_Clients_Code Entry
	LDR	WS, [R12]
	DAWriteS "*Clients", LF
	; Output the list heading...
	SWI	XOS_WriteS
	DCB	"MPEG NDS registered clients:", CR, LF, 0
	ALIGN
	; Early exit if there are no registered clients...
	LDR	R4, [WS, #WS_ClientList]
	TEQ	R4, #0
	BNE	%FT00
	SWI	XOS_WriteS
	DCB	"  <none>", CR, LF, 0
	ALIGN
	EXIT
00	; Output some information about this client...
	SWI	XOS_NewLine
	ADR	R0, OPEN
	SWI	XOS_Write0
	LDR	R0, [R4, #CL_OpenStream]
	BL	Hex8
	SWIVC	XOS_NewLine
	ADR	R0, RESET
	SWI	XOS_Write0
	LDR	R0, [R4, #CL_ResetStream]
	BL	Hex8
	SWIVC	XOS_NewLine
	ADR	R0, CLOSE
	SWI	XOS_Write0
	LDR	R0, [R4, #CL_CloseStream]
	BL	Hex8
	SWIVC	XOS_NewLine
	ADR	R0, CADESC
	SWI	XOS_Write0
	LDR	R0, [R4, #CL_CADescriptor]
	BL	Hex8
	SWIVC	XOS_NewLine
	ADR	R0, ECMTS
	SWI	XOS_Write0
	LDR	R0, [R4, #CL_ECMTSPacket]
	BL	Hex8
	SWIVC	XOS_NewLine
	ADR	R0, DESCRAM
	SWI	XOS_Write0
	LDR	R0, [R4, #CL_Descrambling]
	BL	Hex8
	SWIVC	XOS_NewLine
	ADR	R0, CASID
	SWI	XOS_Write0
	LDR	R0, [R4, #CL_CASID]
	BL	Hex4
	SWIVC	XOS_NewLine
	; Loop around if there are more clients...
	LDR	R4, [R4, #CL_Next]
	TEQ	R4, #0
	BNE	%BT00
	EXIT
OPEN	DCB	"  OpenStream_Handler()   - &", 0
RESET	DCB	"  ResetStream_Handler()  - &", 0
CLOSE	DCB	"  CloseStream_Handler()  - &", 0
CADESC	DCB	"  CADescriptor_Handler() - &", 0
ECMTS	DCB	"  ECMTSPacket_Handler()  - &", 0
DESCRAM	DCB	"  Descrambler_Handler()  - &", 0
CASID	DCB	"  CA System ID           - &", 0
	ALIGN


; ****************************************************
; *
; * Output the number in R0 to all active output streams as an eight-nibble
; * hexadecimal string.
; *
; * In...
; *   R0	= number to output
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R13	= preserved
; *   R14	= corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Hex4	Entry
	SUB	SP, SP, #8
	MOV	R1, SP
	MOV	R2, #8
	SWI	XOS_ConvertHex4
	SWIVC	XOS_Write0
	ADD	SP, SP, #8
	EXIT


; ****************************************************
; *
; * Output the number in R0 to all active output streams as an eight-nibble
; * hexadecimal string.
; *
; * In...
; *   R0	= number to output
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R13	= preserved
; *   R14	= corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
Hex8	Entry
	SUB	SP, SP, #12
	MOV	R1, SP
	MOV	R2, #12
	SWI	XOS_ConvertHex8
	SWIVC	XOS_Write0
	ADD	SP, SP, #12
	EXIT


; ****************************************************
; *
; * *MPEGNDS_DebugSave
; *
; * Save the MPEG NDS debug dynamic area as a text file. Debug builds
; * only.
; *
; * In...
; *   R0	= pointer to parameter string
; *   R1	= number of parameters
; *   R12	= private word pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= may be corrupted (or pointer to error block)
; *   R1-R6	= may be corrupted
; *   R7-R11	= must be preserved
; *   R12	= may be corrupted
; *   R13	= must be preserved
; *   R14	= may be corrupted
; *   V flag	= set if R0 is a pointer to an error block
; *
  [ DEBUG
MPEGNDS_DebugSave_Code Entry
	LDR	WS, [R12]
	DAWriteS "*DebugSave", LF
	TEQ	R1, #1
	BNE	DebugSave_Err
	MOV	R1, R0
	DASave
	EXIT
DebugSave_Err
	ADR	R0, DebugSave_ErrBlk
	SETV
	EXIT
DebugSave_ErrBlk
	DCD	490
	DCB	"Syntax: *MPEGNDS_DebugSave <filename>", 0
	ALIGN
  ];DEBUG


	END
