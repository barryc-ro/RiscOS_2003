; >s.DSH
; Descriptor Handler
; Copyright © Pace Micro Technology plc, 2002
; All rights reserved.


; ******************************************************
; *
; * Register the descriptor handler for this stream.
; *
; * In...
; *   R11	= pointer to client block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   R14	= corrupted
; *
Register_DSH Entry "R1-R3"
	DAWriteS "RegDsH()", LF
	; Register...
	MOV	R0, #DESCRIPTOR_FLAGS
	MOV	R1, #DESCRIPTOR_TAG
	ADR	R2, DescriptorHandler
	MOV	R3, CL
	SWI	XMPEGControl_RegisterDescriptorHandler
	EXIT


; ******************************************************
; *
; * Deregister the descriptor handler for this client.
; *
; * In...
; *   R11	= pointer to client block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R13	= preserved
; *   R14	= corrupted
; *
Deregister_DSH Entry "R1-R3"
	DAWriteS "DeregDsH()", LF
	; Deregister...
	MOV	R0, #DESCRIPTOR_FLAGS
	MOV	R1, #DESCRIPTOR_TAG
	ADR	R2, DescriptorHandler
	MOV	R3, CL
	SWI	XMPEGControl_DeregisterDescriptorHandler
	EXIT


; ******************************************************
; *
; * Reset the buffers for the descriptor handler on this stream.
; *
; * In...
; *   R5	= number of bytes in descriptor
; *   R10	= pointer to stream block
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R3	= preserved
; *   R4	= pointer to start of DSH buffer
; *   R5	= number of bytes yet to fetch (default)
; *   R6-R14	= preserved
; *
Reset_DSH ROUT
	STR	R5, [SB, #SB_DSH_Remain]
	ADD	R4, SB, #SB_DSH_Buffer
	STR	R4, [SB, #SB_DSH_BufPtr]
	MOV	PC, LR


; ******************************************************
; *
; * Despatch the appropriate routine for this descriptor handler based upon the
; * reason code passed in R0. Try to do the most speed-critical things fastest.
; *
; * In...
; *   R0	= reason code
; *   R12	= CL block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R3	= depends upon R0 on entry
; *   R4-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
DescriptorHandler ROUT
	CMP	R0, #DHReason_DataTransfer
	BEQ	DescriptorHandler_DataTransfer
	BLO	DescriptorHandler_OpenStream
	CMP	R0, #DHReason_ResetStream
	BEQ	DescriptorHandler_ResetStream
	BLO	DescriptorHandler_CloseStream
	; Unknown reason codes do nothing.
	MOV	PC, LR


; ******************************************************
; *
; * DESCRIPTOR HANDLER - OPEN STREAM (REASON 0)
; *
; * In...
; *   R0	= reason code (0)
; *   R1	= stream flags (as passed to MPEGControl_OpenStream)
; *   R2	= control stream handle
; *   R12	= CL block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= descriptor stream handle - SB pointer (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
DescriptorHandler_OpenStream Entry "R3-R11"
	; Arrange registers in the order we want them...
	MOV	CL, R12			; CL (R11) = parent client block pointer
	LDR	WS, [CL, #CL_WS]	; WS (R12) = MPEGNDS module workspace pointer
	DAWriteS "DsH_OpenS()", LF
	; Create a stream block (SB) to store information from and about this stream...
	BL	Claim_SB
	BVS	%FT00
	; Initialise some stuff in the SB...
	DAWriteS "  DsH:Reset", LF
	STR	R2, [SB, #SB_CSH]
	MOV	R5, #CA_INIT
	BL	Reset_DSH
	; Call the client's OpenStream handler function...
	DAWriteS "  DsH:Call", LF
	MOV	R0, #0
	MOV	R1, R2
	LDR	R4, [CL, #CL_OpenStream]
	BL	Call_Veneer
	STRVC	R0, [SB, #SB_Handle]
	; Return the SB pointer as our descriptor stream handle...
	MOVVC	R0, SB
00	; (or an error)...
	EXIT


; ******************************************************
; *
; * DESCRIPTOR HANDLER - DATA TRANSFER (REASON 1)
; *
; * In...
; *   R0	= reason code (1)
; *   R1	= flags (should be zero)
; *   R2	= SB pointer
; *   R3	= pointer to bitstream packet descriptor chain
; *   R12	= CL block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R3	= corrupted
; *   R4-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
DescriptorHandler_DataTransfer Entry "R4-R8, R10-R11"
	; Arrange registers in the order we want them...
	MOV	CL, R12			; CL (R11) = parent client block pointer
	LDR	WS, [CL, #CL_WS]	; WS (R12) = MPEGNDS module workspace pointer
	MOV	SB, R2			; SB (R10) = stream block pointer
	DAWriteS "DsH_Data()", LF
	;
	; Register usage in this routine...
	;   R0  = scratch register
	;   R1  = pointer to current byte to copy from bitstream packet
	;   R2  = pointer to byte after last byte to copy from bitstream packet
	;   R3  = pointer to current bitstream packet descriptor
	;   R4  = pointer to location in DSH buffer to copy next byte into
	;   R5  = number of bytes remaining to copy from complete descriptor
	;   R6  = byte position in DSH buffer where the private_data_bytes will start
	;   R7  = value of byte to copy
	;   R8  = pointer to the previous bitstream packet descriptor in the chain
	;   R10 = stream block pointer (SB)
	;   R11 = client block pointer (CL)
	;   R12 = module workspace pointer (WS)
	;   R14 = scratch register
	;
	LDR	R4, [SB, #SB_DSH_BufPtr]
	LDR	R5, [SB, #SB_DSH_Remain]
	ADD	R6, SB, #SB_DSH_Buffer + 3
	MOV	R8, #0
	CMP	R5, #CA_SKIP
	BEQ	%FT09
00	; While there are any bitstream packet descriptors to process...
	MOVS	R0, R8
	BLNE	Call_Bitstream_FreeRoutine
	MOVS	R8, R3
	BEQ	%FT09
	LDR	R0, [R3, #PacketDescriptor_Flags]
        LDR	R2, [R3, #PacketDescriptor_Length]
	LDR	R1, [R3, #PacketDescriptor_Start]
	ADD	R2, R1, R2
	; Reset our DSH buffer if this packet is marked as the start of a descriptor...
	TST	R0, #PacketDescriptorFlags_MPEGStart
	LDRNE	R5, [R3, #PacketDescriptor_FullLength]
	LDR	R3, [R3, #PacketDescriptor_Link]
	BEQ	%FT01
	DAWriteS "Reset", LF
	BL	Reset_DSH
01	; While there are bytes in the bitstream packet to process...
	CMP	R1, R2
	BHS	%BT00
	LDRB	R7, [R1], #1
	SUBS	R14, R6, R4
	; Special-case processing for bytes before the private_data_bytes...
	ADDHS	PC, PC, R14, LSL #2		; Byte: Remain:	Meaning:
	B	%FT03				; 4+	4+	private_data_bytes
	B	%FT02				; 3	0	CA_PID (least significant byte)
	B	%FT07				; 2	1	CA_PID (most significant byte)
	B	%FT08				; 1	2	CA_system_ID (least significant byte)
						; 0	3	CA_system_ID (most significant byte)
07	; Copy the byte into our output buffer and move onto the next one...
	STRB	R7, [R4], #1
	SUBS	R5, R5, #1
	BNE	%BT01
	B	%FT09				; Early exit if we're out of bytes
02	; We have both bytes of the PID (13 bits). Get them and register a PEH on it...
	LDRB	R14, [R4, #-1]
	ORR	R14, R7, R14, LSL #8
	BIC	R14, R14, #0xE000
	STR	R14, [SB, #SB_ECMPID]
	BL	Register_PEH			; Does nothing if already registered
03	; Shove the byte in our DSH buffer and see if we have all of the private_data_bytes...
	STRB	R7, [R4], #1
	SUBS	R5, R5, #1
	BNE	%BT01
	; We have all the private_data_bytes. Pass them to our client...
	DAWriteS "Call", LF
	Push	"R1-R4"
	MOV	R0, #0				; Flags
	LDR	R1, [SB, #SB_Handle]		; Client's handle
	ADD	R2, R6, #1			; Pointer to data start
	SUBS	R3, R4, R2			; Number of bytes
	LDR	R4, [CL, #CL_CADescriptor]	; Function pointer
	BLNE	Call_Veneer			; Don't call if number of bytes = 0
	Pull	"R1-R4"
	; Reset our DSH buffer and continue fetching bytes...
	DAWriteS "Reset", LF
	MOV	R5, #CA_INIT
	BL	Reset_DSH
	B	%BT01
08	; Compare the CA_system_ID against that which the client wants...
	LDRB	R14, [R4, #-1]
	ADD	R4, R4, #1
	LDR	R0, [CL, #CL_CASID]
	SUB	R5, R5, #1
	ORR	R14, R7, R14, LSL #8
	TEQ	R0, R14
	BEQ	%BT01
	; No match, mark this descriptor for skipping and exit...
	DAWriteS "Reject", LF
	MOV	R5, #CA_SKIP
09	; If there is a bitstream packet left to free, do it now...
	MOVS	R0, R8
	BLNE	Call_Bitstream_FreeRoutine
	; Write the DSH buffer values back into the stream block and exit...
	STR	R4, [SB, #SB_DSH_BufPtr]
	STR	R5, [SB, #SB_DSH_Remain]
	DAWriteS "  DsH:Done", LF
	EXIT


; ******************************************************
; *
; * DESCRIPTOR HANDLER - CLOSE STREAM (REASON 2)
; *
; * In...
; *   R0	= reason code (2)
; *   R1	= flags (as passed to MPEGControl_CloseStream)
; *   R2	= SB pointer
; *   R12	= CL block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
DescriptorHandler_CloseStream Entry "R3-R4, R10-R11"
	; Arrange registers in the order we want them...
	MOV	CL, R12			; CL (R11) = parent client block pointer
	LDR	WS, [CL, #CL_WS]	; WS (R12) = MPEGNDS module workspace pointer
	MOV	SB, R2			; SB (R10) = stream block pointer
	DAWriteS "DsH_Close()", LF
	; Call the client's CloseStream handler function...
	MOV	R0, #0
	LDR	R1, [SB, #SB_Handle]
	LDR	R4, [CL, #CL_CloseStream]
	BL	Call_Veneer
	; Free the stream block for this stream (also deregisters PEH and PDH, if any)...
	BLVC	Free_SB
	EXIT


; ******************************************************
; *
; * DESCRIPTOR HANDLER - RESET STREAM (REASON 3)
; *
; * In...
; *   R0	= reason code (3)
; *   R1	= flags (as passed to MPEGControl_ResetStream)
; *   R2	= SB pointer
; *   R12	= CL block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
DescriptorHandler_ResetStream Entry "R3-R5, R10-R11"
	EXIT


	END
