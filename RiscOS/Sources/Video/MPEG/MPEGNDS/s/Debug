; >s.Debug
; Copyright © Pace Micro Technology plc, 2001
; All rights reserved.
;
; Various useful debugging macros and routines.


; Is this a debug build of the module?
		GBLL	DEBUG
;DEBUG		SETL	{TRUE}
DEBUG		SETL	{FALSE}


  [ DEBUG
		^	0
DADB_DumpPtr	#	4
DADB_EndPtr	#	4
DADB_DAnum	#	4
DADB_PageSize	#	4
DADB_HdrSize	*	@
  ];DEBUG


; ******************************************************************************
; *                                                                            *
; *                              INTERFACE                                     *
; *                                                                            *
; ******************************************************************************


; ******************************************************
; *
; * Create a dynamic area for debugging stuff to be written into. This area
; * requires two words of module workspace to store the area base address and
; * the area number, e.g.
; *
; *   WS_DAnum
; *   WS_DAbase
; *
; * The dynamic area contents are of the format:
; *
; *   0 ... pointer to current dump position (base+12 at start)
; *   4 ... pointer to end of mapped-in pages
; *   8 ... dynamic area number (for removal on Mod_Final)
; *  12 ... strings written
; *
; * Thus, the contents of the dynamic area, from base+12 to base[4] could be
; * dumped to a file with a text filetype if you want to read its contents at a
; * later date.
; *
; * In...
; *   R12	= module workspace pointer
; *
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
; * Syntax...
; *   DAInit ["DA name string" [, <maximum size (KB)>]]
; *
; * Examples...
; *   DAInit
; *   DAInit "My debug area"
; *   DAInit "DADebug", 2*1024    ; 2 MB maximum for DA
; *
; * Notes...
; *   Does nothing if DEBUG is FALSE.
; *
	MACRO
	DAInit	$name, $max
  [ DEBUG
	Push	"R5, R8"
	ADR	R8, %FT00
        B	%FT01
00
  [ "$name" = ""
	DCB	"Debug area", 0
  |
	DCB	"$name", 0
  ];"$name" = ""
	ALIGN
01
  [ "$max" = ""
	MOV	R5, #1*1024*1024
  |
	MOV	R5, #$max*1024
  ];"$max" = ""
	BL	DADB_Init
	Pull	"R5, R8"
  ];DEBUG
	MEND


; ******************************************************
; *
; * If we managed to create our debugging dynamic area, remove it and store
; * zero in our debug info words of the module workspace.
; *
; * In...
; *   R12	= module workspace pointer
; *
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
; * Syntax...
; *   DAKill
; *
; * Notes...
; *   Does nothing if DEBUG is FALSE.
; *
	MACRO
	DAKill
  [ DEBUG
  	BL	DADB_Kill
  ];DEBUG
	MEND


; ******************************************************
; *
; * Embed a string in our code and branch to a debugging routine which will
; * write that string to the debugging dynamic area.
; *
; * In...
; *   R12	= module workspace pointer
; *
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
; * Syntax...
; *   DAWriteS "string" [, <char> [, <char>]]
; *
; * Examples...
; *   DAWriteS "Hello world"
; *   DAWriteS "Line feed", 10
; *   DAWriteS "LF and CR", 10, 13
; *
; * Notes...
; *   Does nothing if DEBUG is FALSE.
; *
	MACRO
	DAWriteS $str, $chr1, $chr2
  [ DEBUG
	BL	DADB_WrtS
	DCB	"$str"
    [ "$chr1" <> ""
	DCB	$chr1
      [ "$chr2" <> ""
	DCB	$chr2
      ];"$chr2" <> ""
    ];"$chr1" <> ""
  ];DEBUG
	DCB	0
	ALIGN
	MEND


; ******************************************************
; *
; * Copy the zero-terminated string pointed to by the specified register into
; * the debugging dynamic area.
; *
; * In...
; *   R<n>	= pointer to zero-terminated string to copy
; *   R12	= module workspace pointer
; *
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
; * Syntax...
; *   DAWrite0 <register>
; *
; * Examples...
; *   DAWrite0 R0
; *
; * Notes...
; *   Does nothing if DEBUG is FALSE.
; *
	MACRO
	DAWrite0 $reg
  [ DEBUG
	Push	"R0"
    [ ("$reg" = "R0") :LOR: ("$reg" = "r0")
    |
	MOV	R0, $reg
    ];("$reg" = "R0") :LOR: ("$reg" = "r0")
	BL	DADB_Wrt0
	Pull	"R0"
  ];DEBUG
	MEND


; ******************************************************************************
; *                                                                            *
; *                           IMPLEMENTATION                                   *
; *                                                                            *
; ******************************************************************************


  [ DEBUG
	! 0, ""
	! 0, "WARNING: This is a debug build!"
	! 0, ""


	AREA	|Debug$$Code|, CODE, READONLY


; ******************************************************
; *
; * Create a dynamic area for debugging purposes.
; *
; * In...
; *   R5	= maximum size of dynamic area to create
; *   R8	= pointer to zero-terminated name string for the dynamic area
; *   R12	= pointer to module workspace
; *   R13	= full-descending stack pointer
; *   R14	= pointer to start of zero-terminated string
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
DADB_Init Entry	"R0-R9"
	; Zero-initialise module workspace debug information...
	MOV	R0, #0
	STR	R0, [R12, #WS_DAnum]
	STR	R0, [R12, #WS_DAbase]
	; Read the machine's page size...
	SWI	XOS_ReadMemMapInfo
	MOVVS	R9, #4096
	MOVVC	R9, R0
	; Attempt to create a dynamic area for debugging output...
	MOV	R0, #0
	MOV	R1, #-1
	MOV	R2, R9
	MOV	R3, #-1
	MOV	R4, #1 :SHL: 7
	MOV	R6, #0
	MOV	R7, #0
	SWI	XOS_DynamicArea
	BVS	%FT00
	; Read the current size of the dynamic area...
	MOV	R0, #2
	SWI	XOS_DynamicArea
	BVS	%FT00
	ADD	R2, R3, R2
	ADD	R0, R3, #DADB_HdrSize
	; Initialise the module workspace info and dynamic area...
	STR	R1, [R12, #WS_DAnum]
	STR	R3, [R12, #WS_DAbase]
	STR	R0, [R3, #DADB_DumpPtr]
	STR	R2, [R3, #DADB_EndPtr]
	STR	R1, [R3, #DADB_DAnum]
	STR	R9, [R3, #DADB_PageSize]
00	;
	EXIT


; ******************************************************
; *
; * If we have created a debug dynamic area, remove it.
; *
; * In...
; *   R12	= pointer to module workspace
; *   R13	= full-descending stack pointer
; *   R14	= pointer to start of zero-terminated string
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
DADB_Kill Entry	"R0-R1"
	LDR	R0, [R12, #WS_DAbase]
	LDR	R1, [R12, #WS_DAnum]
	TEQ	R0, #0
	MOVNE	R0, #1
	SWINE	XOS_DynamicArea
	MOVNE	R0, #0
	STRNE	R0, [R12, #WS_DAbase]
	EXIT


; ******************************************************
; *
; * Similar to SWI OS_WriteS, except that the string pointed to gets written
; * into our debugging dynamic area. This area is grown every time the current
; * size is used-up.
; *
; * In...
; *   R12	= pointer to module workspace
; *   R13	= full-descending stack pointer
; *   R14	= pointer to start of zero-terminated string
; * Out...
; *   R0-R13	= preserved
; *   R14	= corrupted
; *
DADB_WrtS ROUT
	Push	"R0"
	RSB	R0, PC, PC	; R9 = current PSR bits if 26-bit, 0 if 32-bit
	SUB	R0, R14, R0
	BL	DADB_Wrt0
	BIC	LR, R0, #3
	Pull	"R0"
	ADD	PC, LR, #4


; ******************************************************
; *
; * Copy the zero-terminated string from the source pointer specified into our
; * debugging dynamic area and return a pointer to the end of the source
; * string.
; *
; * In...
; *   R0	= pointer to zero-terminated string to write
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= pointer to zero-terminator of source string
; *   R1-R13	= preserved
; *   R14	= corrupted
; *
DADB_Wrt0 Entry	"R9-R12"
	LDR	R11, [R12, #WS_DAbase]
	TEQ	R11, #0
	EXIT	EQ
	LDMIA	R11, {R10, R12}
	; R0  = pointer to string to output
	; R10 = pointer to dump point in DA
	; R11 = pointer to base of DA
	; R12 = pointer to end of DA mapped-in pages
	LDRB	R9, [R0]
	TEQ	R9, #0
	EXIT	EQ
00	STRB	R9, [R10], #1
	LDRB	R9, [R0, #1]!
	; If need be, grow the dynamic area...
	CMP	R10, R12
	BLHS	DADB_Grow
	TEQ	R9, #0
	BNE	%BT00
	STR	R10, [R11, #DADB_DumpPtr]
	EXIT


; ******************************************************
; *
; * Attempt to grow the debugging dynamic area by a single page. If we cannot
; * manage to do this, throw whatever debug data is in there away and reset the
; * are to empty and just one page in extent.
; *
; * In...
; *   R11	= pointer to debug dynamic area
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R9	= preserved
; *   R10	= new dump pointer (if shrunk back)
; *   R11	= preserved
; *   R12	= new end pointer for dynamic area
; *   R13	= preserved
; *   R14	= corrupted
; *
DADB_Grow Entry	"R0-R8"
	LDR	R0, [R11, #DADB_DAnum]
	LDR	R1, [R11, #DADB_PageSize]
	SWI	XOS_ChangeDynamicArea
	BVS	%FT00
	MOV	R0, #2
	LDR	R1, [R11, #DADB_DAnum]
	SWI	XOS_DynamicArea
	ADD	R12, R3, R2
	STR	R12, [R11, #DADB_EndPtr]
00	; Area cannot grow any more, empty and shrink back to one page...
	MOV	R0, #2
	LDR	R1, [R11, #DADB_DAnum]
	SWI	XOS_DynamicArea
	MOV	R0, R1
	LDR	R1, [R11, #DADB_PageSize]
	SUB	R1, R1, R2
	SWI	XOS_ChangeDynamicArea
	LDR	R12, [R11, #DADB_PageSize]
	ADD	R10, R11, #DADB_HdrSize
	ADD	R12, R11, R12
	STR	R10, [R11, #DADB_DumpPtr]
	STR	R12, [R11, #DADB_EndPtr]
	EXIT


  ];DEBUG


	END
