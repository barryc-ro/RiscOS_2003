; >s.Element
; Copyright © Pace Micro Technology plc, 2001
; All rights reserved.


; ************************************************************
; *
; * Our program element handler entry point. Despatch to the
; * appropriate subroutine with the minimal amount of fuss.
; *
; * In...
; *   R0	= reason code (0..5)
; *   R12	= DSH block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   Depends upon reason code
; *
ProgramElementHandler ROUT
	CMP	R0, #PEHReason_DataTransfer
	BEQ	ProgramElementHandler_DataTransfer	; R0=1
	BLO	ProgramElementHandler_OpenStream	; R0=0
	CMP	R0, #PEHReason_ResetStream
	BLO	ProgramElementHandler_CloseStream	; R0=2
	BEQ	ProgramElementHandler_ResetStream	; R0=3
	CMP	R0, #PEHReason_SetSpeed
	BLO	ProgramElementHandler_Play		; R0=4
	; R0>=5...


; ************************************************************
; *
; * A SetSpeed event has been detected for the stream which is being
; * processed by this program element handler. Do nothing.
; *
; * In...
; *   R0	= reason code (5)
; *   R1	= flags (unused)
; *   R2	= PEH block pointer
; *   R12	= DSH block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R14	= preserved
; *
ProgramElementHandler_SetSpeed ROUT
	MOV	PC, LR


; ************************************************************
; *
; * A Play event has been detected for the stream which is being
; * processed by this program element handler. Do nothing.
; *
; * In...
; *   R0	= reason code (4)
; *   R1	= flags (unused)
; *   R2	= PEH block pointer
; *   R12	= DSH block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R14	= preserved
; *
ProgramElementHandler_Play ROUT
	MOV	PC, LR


; ************************************************************
; *
; * A ResetStream event has been detected for the stream which is being
; * processed by this program element handler. Throw-away and buffered TS
; * packet payload.
; *
; * In...
; *   R0	= reason code (3)
; *   R1	= reset stream flags (as for MPEGControl_ResetStream)
; *   R2	= PEH block pointer
; *   R12	= DSH block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= corrupted
; *   R1-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
ProgramElementHandler_ResetStream Entry "R9-R11"
	LDR	R11, [R12, #DSH_ClientBlock]
	MOV	R10, R12
	MOV	R9, R2
	LDR	R12, [R11, #CL_ModuleWorkspace]
	; R9  = PEH block pointer
	; R10 = DSH block pointer
	; R11 = client block pointer
	; R12 = module workspace pointer

	; Reset buffer pointers to empty...
	BL	PEH_Reinit
	EXIT


; ************************************************************
; *
; * An OpenStream event has been detected for the stream which is being
; * processed by this program element handler. Create a block of useful
; * info for this stream. This will be passed in R2 in further calls to
; * our descrambling handlers
; *
; * In...
; *   R0	= reason code (0)
; *   R1	= stream flags (as for MPEGControl_OpenStream)
; *   R2	= control stream handle
; *   R12	= DSH block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0	= PEH block pointer (or pointer to error block)
; *   R1-R2	= corrupted
; *   R3-R13	= preserved
; *   R14	= corrupted
; *
ProgramElementHandler_OpenStream Entry "R3, R9-R11"
	LDR	R11, [R12, #DSH_ClientBlock]
	MOV	R10, R12
	LDR	R12, [R11, #CL_ModuleWorkspace]
	; R10 = DSH block pointer
	; R11 = client block pointer
	; R12 = module workspace pointer

	MOV	R3, #PEH_BLOCK_SIZE
	BL	Client_Claim
	BVS	PEHerr
	MOV	R9, R2
	BL	PEH_Initialise
	MOV	R0, R2
	EXIT


; ************************************************************
; *
; * A CloseStream event has been detected for the stream which is being
; * processed by this program element handler. Deregister this handler
; * and then delink and free the PEH block.
; *
; * In...
; *   R0	= reason code (2)
; *   R1	= flags (unused)
; *   R2	= PEH block pointer
; *   R12	= DSH block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R2	= corrupted
; *   R3-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
ProgramElementHandler_CloseStream Entry "R3-R4, R9-R11"
	LDR	R11, [R12, #DSH_ClientBlock]
	MOV	R10, R12
	MOV	R9, R2
	LDR	R12, [R11, #CL_ModuleWorkspace]
	; R9  = PEH block pointer
	; R10 = DSH block pointer
	; R11 = client block pointer
	; R12 = module workspace pointer

	; Deregister the program element handler...
	MOV	R0, #ELEMENT_FLAGS
	LDR	R1, [R10, #DSH_ECMPID]
	ADR	R2, ProgramElementHandler
	MOV	R3, R10
	LDR	R4, [R10, #DSH_ControlStreamHandle]
	SWI	XMPEGControl_DeregisterProgramElementHandler	; Ignore errors
	; Delink and free the PEH block...
	MOV	R2, R9
	BL	Client_Free
	EXIT


; ************************************************************
; *
; * Some more program element data has arrived. Copy it into our buffer
; * and see if we have enough to call the client's ECM handler code.
; *
; * In...
; *   R0	= reason code (1)
; *   R1	= flags (unused)
; *   R2	= PEH block pointer
; *   R3	= pointer to bitstream packet descriptor chain
; *   R12	= DSH block pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *   R0-R3	= corrupted
; *   R4-R11	= preserved
; *   R12	= corrupted
; *   R13	= preserved
; *   R14	= corrupted
; *
ProgramElementHandler_DataTransfer Entry "R4, R9-R11"
	LDR	R11, [R12, #DSH_ClientBlock]
	MOV	R10, R12
	MOV	R9, R2
	LDR	R12, [R11, #CL_ModuleWorkspace]
	; R9  = PEH block pointer
	; R10 = DSH block pointer
	; R11 = client block pointer
	; R12 = module workspace pointer

 ! 0, "Not finished!"

;  Have we got a complete ECM (reference)?
	BNE	%FT01
	; Yes. Is the descrambler handler already installed?
	LDR	R0, [R9, #PEH_Flags]
	TST	R0, #PEH_Flags_DoneDescram
	BNE	%FT00
	; Yes. Register a descrambler handler on the stream...
	MOV	R0, #DESCRAMBLER_FLAGS
	ADR	R2, DescramblingHandler
	MOV	R3, R10
	LDR	R4, [R10, #DSH_ControlStreamHandle]
	SWI	XMPEGControl_RegisterPayloadDescramblingHandler	; Ignore errors
	; Reset buffer pointers to empty...
00	BL	PEH_Reinit
01	;
	EXIT


; ************************************************************
; *
; *
; *
; * In...
; *   R10	= DSH block pointer
; *   R11	= client block pointer
; *   R12	= module workspace pointer
; *   R13	= full-descending stack pointer
; *   R14	= return address
; * Out...
; *
PEH_Initialise Entry
 ! 0, "Not finished!"
	EXIT


; ************************************************************
; *
; *
; *
; * In...
; *
; * Out...
; *
PEH_Reinit Entry
 ! 0, "Not finished!"
	EXIT


	END
