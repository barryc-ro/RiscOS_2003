; >s.DataStruct
; Copyright © Pace Micro Technology plc, 2001
; All rights reserved.
;
; Various global constants and data structure definitions.


; Maximum possible size of a transport stream packet's payload (round-up to quad-words)...
TS_PAYLOAD_SIZE		*	184+8

; Size of an internal bitstream packet plus its descriptor...
  [ PDH_TEST
BITSTREAM_HDR_SIZE	*	PacketDescriptorSize + 8 	; Test vsn uses most descriptor values
  |
BITSTREAM_HDR_SIZE	*	PacketDescriptor_BSn		; Real vsn doesn't need top-most values
  ];PDH_TEST
BITSTREAM_SIZE		*	BITSTREAM_HDR_SIZE + TS_PAYLOAD_SIZE

	; Will the end of the payload lie on a quad-word boundary in RMA?
	ASSERT	((BITSTREAM_SIZE + 4) :AND: 15) = 0


; Number of bytes to insert before CA descriptor to ensure private data bytes
; start on a word boundary...
CA_BUF_ALIGN		*	3

; Size of the CA descriptor buffer (plus three alignment bytes)...
CA_BUF_SIZE		*	CA_BUF_ALIGN + 257

; Flags used to register program element handler...
ELEMENT_FLAGS		*	PEHFlags_IncludePESHeaders :OR: PEHFlags_StreamIdentifiedByPID :OR: PEHFlags_StreamSpecific

; Flags used to register descriptor handler...
DESCRIPTOR_FLAGS	*	0

; Tag for a CA descriptor - used to register descriptor handler...
DESCRIPTOR_TAG		*	9

; Flags used to register descrambler handler...
DESCRAMBLER_FLAGS	*	PSHFlags_StreamSpecific


;
; *********************** MODULE WORKSPACE ***********************
;
			^	0
WS_Flags		#	4		; Flags word
WS_ClientList		#	4		; Pointer to the head client list block
WS_FreeList		#	4		; Pointer to the head bitstream buffer on the free list (see note below)
WS_CASID		#	4		; Global CAS ID setting
  [ DEBUG
WS_DAnum		#	4		; Debug dynamic area's number
WS_DAbase		#	4		; Debug dynamic area's base address
  ];DEBUG
  [ DEMO_BODGE
WS_ClientBlock		#	4		; Pointer to one and only client block
WS_DSHBlock		#	4		; Pointer to spoofed descriptor handler workspace block
  ];DEMO_BODGE
WS_SIZE			*	@		; Size in bytes of the module workspace block


;
; *********************** MPEG NDS CLIENT BLOCK ***********************
;
			^	0
CL_Prev			#	4		; Ptr to the previous client block (null if this is head item)
CL_Next			#	4		; Ptr to the next client block (null if this is tail item)
CL_ModuleWorkspace	#	4		; Ptr to the MPEG NDS module workspace
CL_RelocModifiers	#	8		; Copy of the client's relocation modifiers
CL_OpenStream		#	4		; Ptr to client's OpenStream function
CL_ResetStream		#	4		; Ptr to client's ResetStream function
CL_CloseStream		#	4		; Ptr to client's CloseStream function
CL_CADescriptor		#	4		; Ptr to client's CADescriptor function
CL_ECMTSPacket		#	4		; Ptr to client's ECMTSPacket function
CL_Descrambler		#	4		; Ptr to client's Descrambler function
CL_CASID		#	4		; The CAS ID to be used to derive the ECM PID for a stream
CL_ClaimList		#	4		; Ptr to head item in linked list of blocks claimed for this client
CLIENT_BLK_SIZE		*	@		; Size in bytes of a client block


;
; *********************** DESCRIPTOR HANDLER BLOCK ***********************
;
			^	0
DSH_Prev		#	4		; Previous block pointer (null if head)
DSH_Next		#	4		; Next block pointer (null if tail)
DSH_ModuleWorkspace	#	4		; Copy of the MPEG NDS module workspace pointer
DSH_ClientBlock		#	4		; Pointer to owner client block
DSH_ClientHandle	#	4		; Handle to pass to client
DSH_Flags		#	4		; Flags word - contents undefined
DSH_ControlStreamHandle	#	4		; Control stream handle of this stream
DSH_ECMPID		#	4		; PID for the ECM stream (upon which the PEH was registered)
DSH_Limit		#	4		; Number of bytes required before passing the data on
DSH_Fetched		#	4		; Number of bytes of data fetched thus far
DSH_Buffer		#	CA_BUF_SIZE	; Buffer for accumulating the handler's data
DSH_BLOCK_SIZE		*	@		; Size in bytes of a descriptor buffer


;
; *********************** PROGRAM ELEMENT HANDLER BLOCK ***********************
;
			^	0
PEH_Prev		#	4		; Previous block pointer (null if head)
PEH_Next		#	4		; Next block pointer (null if tail)
PEH_Flags		#	4		; Flags word...
PEH_Flags_DoneDescram	*	1 :SHL: 0	;   Bit 0 set - descrambling handler is registered
PEH_Limit		#	4		; Number of bytes required before passing the data on
PEH_Fetched		#	4		; Number of bytes of data fetched thus far
PEH_Buffer		#	TS_PAYLOAD_SIZE	; Buffer for accumulating the handler's data
PEH_BLOCK_SIZE		*	@		; Size in bytes of a program element buffer


;
; *********************** PAYLOAD DESCRAMBLING HANDLER BLOCK ***********************
;
			^	0
PDH_Prev		#	4		; Previous block pointer (null if head)
PDH_Next		#	4		; Next block pointer (null if tail)
PDH_Flags		#	4		; Flags word - contents undefined
PDH_Flags_FirstChunk	*	1 :SHL: 0	;   Bit 0 set - next chunk is first chunk of payload accumulated in this bitstream packet
PDH_First		#	4		; Pointer to the first copied byte of payload in our bitstream packet
PDH_Packet		#	4		; Pointer to the bitstream packet descriptor for copying data into
PDH_BLOCK_SIZE		*	@		; Size in bytes of a descrambling buffer


	ASSERT	DSH_Prev = PEH_Prev
	ASSERT	DSH_Next = PEH_Next
	ASSERT	PEH_Prev = PDH_Prev
	ASSERT	PEH_Next = PDH_Next
	ASSERT	PDH_Prev = 0
	ASSERT	PDH_Next = 4


	END
