<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<HTML LANG="en">
  <HEAD>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
    <TITLE>MPEG NDS Module Software Functional Specification</TITLE>
  </HEAD>
  <BODY BGCOLOR="white" TEXT="black" LINK="blue" VLINK="magenta">

    <H1 ALIGN="center">MPEG NDS Module<BR>Software Functional Specification</H1>

    <HR>
    <P ALIGN="center"><STRONG>CONFIDENTIAL</STRONG>

    <HR>
    <TABLE BORDER="0" WIDTH="50%" ALIGN="center">
      <TR><TD>Document ref:   <TD>2501,855/FS
      <TR><TD>Issue:          <TD>H
      <TR><TD>Date:           <TD>13 Aug 2001
      <TR><TD>Author(s):      <TD><A HREF="mailto:ben.avison@pace.co.uk">Ben Avison</A><BR>
                                  <A HREF="mailto:steve.revill@pace.co.uk">Steve Revill</A>
      <TR><TD>Change:         <TD>-
      <TR><TD>Classification: <TD>Pace Restricted
    </TABLE>

    <H2>Contents</H2>

    <TABLE BORDER="0" WIDTH="100%">
      <TR><TD> 1.       <TD><A HREF="#overview">       Overview</A>
      <TR><TD> 2.       <TD><A HREF="#outstanding">    Outstanding issues</A>
      <TR><TD> 3.       <TD><A HREF="#technical">      Technical background</A>
      <TR><TD> 4.       <TD><A HREF="#user">           User interface</A>
      <TR><TD> 5.       <TD><A HREF="#programmer">     Programmer interface</A>
      <TR><TD> 6.       <TD><A HREF="#interchange">    Data interchange</A>
      <TR><TD> 7.       <TD><A HREF="#formats">        Data formats</A>
      <TR><TD> 8.       <TD><A HREF="#external">       External dependencies</A>
      <TR><TD> 9.       <TD><A HREF="#acceptance">     Acceptance test</A>
      <TR><TD> 10.      <TD><A HREF="#noncompliances"> Noncompliances</A>
      <TR><TD> 11.      <TD><A HREF="#test">           Development test strategy</A>
      <TR><TD> 12.      <TD><A HREF="#organisation">   Product organisation</A>
      <TR><TD> 13.      <TD><A HREF="#enhancements">   Future enhancements</A>
      <TR><TD> 14.      <TD><A HREF="#glossary">       Glossary</A>
      <TR><TD> 15.      <TD><A HREF="#references">     References</A>
      <TR><TD> 16.&nbsp;<TD><A HREF="#history">        History</A>
    </TABLE>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="overview">1. Overview</A></H2>

    <P>
    Copyright &copy; Pace Micro Technology plc 2001, all rights reserved.
    </P>

    <P>
    No part of this document may be reproduced, transmitted, transcribed, stored
    in a retrieval system or translated into any language (natural or computer), in
    any form or by any means without the prior written permission of Pace Micro
    Technology plc.
    </P>

    <P>
    This document specifies the software module MPEG NDS, which provides an interface
    for the NDS Verifier module to communicate at a low level with the MPEGControl
    module. This is required for the Verifier to control the descrambling of any
    encrypted MPEG transport stream packets.
    </P>

    <P>
    The API does not cover the descrambling of MPEG streams other than transport
    streams.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="outstanding">2. Outstanding issues</A></H2>

    <P>
    There are no outstanding issues.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="technical">3. Technical background</A></H2>

    <P>
    The DSL4000 is required to display MPEG content which has been scrambled using
    the NDS conditional access system. This requires that various software is
    implemented to support the descrambling process.
    </P>

    <P>
    On a DSL4000 system, the MPEG data is usually passed directly from the MPEGControl
    module to the MPEGDriver module. For descrambling, an intermediate step will be
    required for those parts of the stream which have been scrambled.
    </P>

    <P>
    This specification documents the module which hooks into various handler interfaces
    in the MPEGControl module to allow a client to descramble any scrambled transport
    stream packets. This interface is limited to transport streams only.
    </P>

    <P>
    Once the data in a TS packet has been descrambled, it is returned to the
    MPEGControl module to be passed onto the MPEGDriver as normal.
    </P>

    <P>
    The descrambler software also needs to be notified when a new packet from the ECM
    PID has been received, and when a CA descriptor has been encountered each time a new
    PMT is parsed. Notification of each is performed by calling the appropriate function
    in the client code.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="user">4. User interface</A></H2>

    <H3>4.1. * Commands</H3>

    <H4>*MPEGNDS_Clients</H4>

    <P>
    This command will output a list of the addresses of all the currently registered
    client functions for each of the API functions. If there are no clients registered,
    the list will be empty.
    </P>

    <P>
    Some example output is:
    </P>

    <PRE><CODE>
    MPEG NDS registered clients:

      OpenStream_Handler()   - &amp;0246F6A4
      ResetStream_Handler()  - &amp;0246F6B0
      CloseStream_Handler()  - &amp;0246F6BC
      CADescriptor_Handler() - &amp;0246F6C8
      ECMTSPacket_Handler()  - &amp;0246F9E8
      Descrambler_Handler()  - &amp;0246FCD0
    </CODE></PRE>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="programmer">5. Programmer interface</A></H2>

    <H3>5.1. Software Interrupts (SWIs)</H3>

    <P>
    The MPEG NDS SWIs are used to call the MPEG NDS module from the software which
    will be descrambling the MPEG stream. They are used to register and deregister
    C functions for handling MPEG events.
    </P>

    <!-- ==================================================================== -->

    <H4 ALIGN="right">SWI MPEGNDS_SetCASID <BR>(SWI &amp;555C0)</H4>

    <H5>On entry</H5>

    <DL><DD>
      <TABLE CELLSPACING="2">
        <TR><TD>R0&nbsp;= <TD>flags (should be zero)
        <TR><TD>R1&nbsp;= <TD>CA_system_ID
      </TABLE>
    </DL>

    <H5>On exit</H5>

    <DL><DD>
      <TABLE CELLSPACING="2">
        <TR><TD>R0&nbsp;= <TD>corrupted (or pointer to error block)
        <TR><TD>R1&nbsp;= <TD>preserved
      </TABLE>

      <P>
      V flag is set if R0 contains a pointer to a RISC OS error block.
      </P>
    </DL>

    <H5>Use</H5>

    <P>
    This SWI is used to inform the MPEG NDS module of the global CA system ID
    to be used by the client handlers. If a CA system ID is not specified when
    the handlers are registered, an error will be returned. You may also
    override this setting by specifying the CA system ID directly when you
    register your handler functions.
    </P>

    <P>
    The CA system ID is used when scanning the PMT to locate the correct CA
    descriptor for passing on to the client's handler function.
    </P>

    <P>
    <B>NOTE:</B> it is recommended that you specify the CA system ID when
    calling SWI MPEGNDS_RegisterHandlers rather than by using this SWI. This
    will allow multiple clients to register with the MPEG NDS module.
    </P>

    <!-- ==================================================================== -->

    <H4 ALIGN="right">SWI MPEGNDS_RegisterHandlers <BR>(SWI &amp;555C1)</H4>

    <H5>On entry</H5>

    <DL><DD>
      <TABLE CELLSPACING="2">
        <TR><TD VALIGN="top">R0&nbsp;= <TD>flags<BR>
          <TABLE CELLSPACING="2">
            <TR><TH ALIGN="left">Bit(s):
                <TH ALIGN="left">Meaning when set:
            <TR><TD>0
                <TD>R2 contains the CA system ID for these handlers
            <TR><TD>1-31
                <TD>Reserved - should be zero
          </TABLE>
        <TR><TD>R1&nbsp;= <TD>pointer to function pointer block
        <TR><TD>R2&nbsp;= <TD>CA system ID if R0:0 is set on entry, else ignored
      </TABLE>
    </DL>

    <H5>On exit</H5>

    <DL><DD>
      <TABLE CELLSPACING="2">
        <TR><TD>R0&nbsp;= <TD>corrupted (or pointer to error block)
        <TR><TD>R1&nbsp;= <TD>preserved
      </TABLE>

      <P>
      V flag is set if R0 contains a pointer to a RISC OS error block.
      </P>
    </DL>

    <H5>Use</H5>

    <P>
    This SWI will register a block of APCS-compatible functions with the MPEG
    NDS module. Each word in the block pointed to by R1 on entry contains a
    pointer to a C function which the MPEG NDS module will call, as defined
    below.
    </P>

    <P>
    It is expected that registration should happen when the client code
    starts (i.e. during module initialisation). You should deregister before
    quitting (i.e. during module finalisation). Registration and deregistration
    are <B>not</B> required on a per-stream basis.
    </P>

    <P>
    If the flags word (R0 on entry) has bit zero set, it is assumed that R2
    contains the CA system ID to be used for this registered client. You should
    use this method in preference to calling the MPEGNDS_SetCASID SWI call.
    </P>

    <P>
    Each function may be called for different streams (i.e. with a different
    descrambler handle or control stream handle, passed in R1 on entry).
    As such, although the functions will not need to be re-entrant for the
    same stream, they should be implemented to cope with descrambling multiple
    concurrent streams.
    </P>

    <P>
    Note: as this SWI will extract the static base from the caller's stack to
    be used when calling the registered functions, the caller of this SWI must
    use the same static base as the registered functions (i.e. it must be in
    the same C program).
    </P>

    <P>
    Each function has defined entry and exit conditions. These are specified
    in the following table:
    </P>

    <STRONG>R1+0 (Open stream)</STRONG>
    <DL><DD>
      <H6>On entry</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0&nbsp;= <TD>flags (undefined)
          <TR><TD>R1&nbsp;= <TD>control stream handle
        </TABLE>
      </DL>

      <H6>On exit</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0&nbsp;=       <TD>descrambler handle
          <TR><TD>R1-R3,&nbsp;R12 <TD>may be corrupted
        </TABLE>
      </DL>

      <H6>Prototype</H6>
      <DL><DD>
        <SMALL><CODE>uint OpenStream_Handler(uint flags, uint csh);</CODE></SMALL>
      </DL>

      <H6>Use</H6>
      <P>
      This function is called by MPEG NDS when a new stream is opened. It passes-in
      the control stream handle for the new stream. This may be of use if any
      low-level communication with the STB MPEG software is required.
      </P>

      <P>
      The client should return a handle which will be passed in subsequent calls
      from MPEG NDS to identify the stream. This will usually be a pointer to the
      client's data structure associated with this stream.
      </P>

      <P>
      The contents of the flags word are currently undefined and should be ignored.
      </P>
    </DL>

    <STRONG>R1+4 (Reset stream)</STRONG>
    <DL><DD>
      <H6>On entry</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0&nbsp;= <TD>flags (undefined)
          <TR><TD>R1&nbsp;= <TD>descrambler handle
        </TABLE>
      </DL>

      <H6>On exit</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0-R3,&nbsp;R12 <TD>may be corrupted
        </TABLE>
      </DL>

      <H6>Prototype</H6>
      <DL><DD>
        <SMALL><CODE>void ResetStream_Handler(uint flags, uint handle);</CODE></SMALL>
      </DL>

      <H6>Use</H6>
      <P>
      This function is called on every reset stream. Usually, a reset happens when there
      is a transition between trickplay modes. It can also happen when looping a clip.
      </P>

      <P>
      The contents of the flags word are currently undefined and should be ignored.
      </P>
    </DL>

    <STRONG>R1+8 (Close stream)</STRONG>
    <DL><DD>
      <H6>On entry</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0&nbsp;= <TD>flags (undefined)
          <TR><TD>R1&nbsp;= <TD>descrambler handle
        </TABLE>
      </DL>

      <H6>On exit</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0-R3,&nbsp;R12 <TD>may be corrupted
        </TABLE>
      </DL>

      <H6>Prototype</H6>
      <DL><DD>
        <SMALL><CODE>void CloseStream_Handler(uint flags, uint handle);</CODE></SMALL>
      </DL>

      <H6>Use</H6>
      <P>
      This function is called when the stream has closed. The client should
      not receive any more calls with the same descrambler handle until after
      the next open stream function call, in which case the client may re-use
      the old descrambler handle.
      </P>

      <P>
      For some video transfer protocols, a close stream is sent just before the
      clip loops. When the loop completes, an open stream is sent. This behaviour
      should not affect the client code - it will look like any other close/open
      stream sequence.
      </P>

      <P>
      The contents of the flags word are currently undefined and should
      be ignored.
      </P>
    </DL>

    <STRONG>R1+12 (Process new CA descriptor)</STRONG>
    <DL><DD>
      <H6>On entry</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0&nbsp;= <TD>flags (undefined)
          <TR><TD>R1&nbsp;= <TD>descrambler handle
          <TR><TD>R2&nbsp;= <TD>pointer to buffer of private_data_bytes
          <TR><TD>R3&nbsp;= <TD>size of buffer in bytes
        </TABLE>
      </DL>

      <H6>On exit</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0-R3,&nbsp;R12 <TD>may be corrupted
        </TABLE>
      </DL>

      <H6>Prototype</H6>
      <DL><DD>
        <SMALL><CODE>void CADescriptor_Handler(uint flags, uint handle, char *buffer, int size);</CODE></SMALL>
      </DL>

      <H6>Use</H6>
      <P>
      This function is called when a new CA descriptor is detected in the stream. The
      buffer pointed to by R2 on entry is word-aligned and contains all of the
      private_data_bytes from the CA descriptor in the PMT.
      </P>

      <P>
      The client code should make no assumptions that this buffer will remain after
      exiting this function. If any data is required to be preserved, a copy should be
      taken during the execution of this function.
      </P>

      <P>
      The contents of the flags word are currently undefined and should be ignored.
      </P>
    </DL>

    <STRONG>R1+16 (Process new ECM TS packet)</STRONG>
    <DL><DD>
      <H6>On entry</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0&nbsp;= <TD>flags (undefined)
          <TR><TD>R1&nbsp;= <TD>descrambler handle
          <TR><TD>R2&nbsp;= <TD>pointer to buffer of ECM TS packet payload
          <TR><TD>R3&nbsp;= <TD>size of buffer in bytes
        </TABLE>
      </DL>

      <H6>On exit</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0-R3,&nbsp;R12 <TD>may be corrupted
        </TABLE>
      </DL>

      <H6>Prototype</H6>
      <DL><DD>
        <SMALL><CODE>void ECMTSPacket_Handler(uint flags, uint handle, char *buffer, int size);</CODE></SMALL>
      </DL>

      <H6>Use</H6>
      <P>
      This function is called when a new ECM TS packet is detected in the stream. The
      buffer pointed to by R2 on entry is word-aligned and contains the complete payload
      of the ECM TS packet.
      </P>

      <P>
      The client code should make no assumptions that this buffer will remain after
      exiting this function. If any data is required to be preserved, a copy should be
      taken during the execution of this function.
      </P>

      <P>
      The contents of the flags word are currently undefined and should be ignored.
      </P>
    </DL>

    <STRONG>R1+20 (Descramble TS packet)</STRONG>
    <DL><DD>
      <H6>On entry</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>R0&nbsp;= <TD>flags
          <TR><TD>R1&nbsp;= <TD>descrambler handle
          <TR><TD>R2&nbsp;= <TD>pointer to buffer of data to descramble
          <TR><TD>R3&nbsp;= <TD>size of buffer in bytes (whole multiple of 16)
        </TABLE>
      </DL>

      <H6>On exit</H6>
      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD VALIGN="top">R0 =<TD>Flag.<BR>
                                       &nbsp;non-zero: descrambled OK,<BR>
                                       &nbsp;zero: failed to descramble
          <TR><TD>R1-R3,&nbsp;R12  <TD>may be corrupted
        </TABLE>
      </DL>

      <H6>Prototype</H6>
      <DL><DD>
        <SMALL><CODE>uint Descrambler_Handler(uint flags, uint handle, char *buffer, int size);</CODE></SMALL>
      </DL>

      <H6>Use</H6>
      <P>
      This function is called when a scrambled TS packet is detected in the open stream.
      The flags word passed in R0 on entry is defined to contain:
      </P>

      <DL><DD>
        <TABLE CELLSPACING="2">
          <TR><TD>Bits 0,1  <TD>transport_scrambling_control bits from TS header (= 1, 2 or 3)
          <TR><TD>Bits 2-31 <TD>Undefined (should be ignored)
        </TABLE>
      </DL>

      <P>
      The buffer pointed to by R2 on entry is aligned to a quad-word boundary and
      contains a whole number of 16 byte blocks. These blocks are taken from the end of
      the TS packet payload, excluding any adaptation fields. I.e. the last byte in the
      block corresponds to the last byte in the TS packet payload.
      </P>

      <P>
      This function call should return a flag to indicate if the block pointed to by R2
      on entry was successfully descrambled. If not, the function should return zero and
      that packet will be dropped from the MPEG system. This is useful in stopping the
      MPEG decoder from attempting to decode data which is known to be garbage.
      </P>

      <P>
      Any non-zero value returned by this function is assumed to indicate that the block
      of data was successfully descrambled and should be passed-on to the MPEG decoder.
      </P>
    </DL>

    <!-- ==================================================================== -->

    <H4 ALIGN="right">SWI MPEGNDS_DeregisterHandlers <BR>(SWI &amp;555C2)</H4>

    <H5>On entry</H5>

    <DL><DD>
      <TABLE CELLSPACING="2">
        <TR><TD>R0&nbsp;= <TD>flags (should be zero)
        <TR><TD>R1&nbsp;= <TD>pointer to function pointer block
      </TABLE>
    </DL>

    <H5>On exit</H5>

    <DL><DD>
      <TABLE CELLSPACING="2">
        <TR><TD>R0&nbsp;= <TD>corrupted (or pointer to error block)
        <TR><TD>R1&nbsp;= <TD>preserved
      </TABLE>

      <P>
      V flag is set if R0 contains a pointer to a RISC OS error block.
      </P>
    </DL>

    <H5>Use</H5>

    <P>
    This SWI is used to deregister a block of functions with the MPEG NDS module.
    The function pointers within the block should match those passed into the
    MPEGNDS_RegisterHandlers SWI call.
    </P>

    <!-- ==================================================================== -->

    <H3>5.2. Errors</H3>

    <P>
    It is possible for calls to MPEG NDS SWIs and *commands to return errors.
    Any errors returned by this module will have an error number in the range
    &amp;00819F00..&amp;00819FFF.
    </P>

    <!-- ==================================================================== -->

    <H3>5.3. Service calls</H3>

    <P>
    When the MPEG NDS module initialises and finalises, it issues a service
    call to inform any clients of this fact. When it initialises, it can be
    assumed to be safe to call MPEG NDS SWIs. When a client receives a
    finalisation service call, you cannot call any MPEG NDS SWIs; instead,
    you should simply assume that all active sessions have been torn-down.
    </P>

    <H4 ALIGN="right">Service_MPEGControlStarting <BR>(Service Call &amp;C7)</H4>

    <H5>On entry</H5>

    <DL><DD>
      <TABLE CELLSPACING="2">
        <TR><TD VALIGN="top">R0&nbsp;= <TD>information word:<BR>
          <TABLE>
            <TR><TH ALIGN="left">Bit(s): <TH ALIGN="left">Meaning:
            <TR><TD>0       <TD>reserved, must be ignored
            <TR><TD>1-7     <TD>sub-reason code, see below
            <TR><TD>8-31    <TD>flags, should be ignored
          </TABLE>
        <TR><TD>R1&nbsp;= <TD>&amp;C7 (reason code)
      </TABLE>
    </DL>

    <H5>On exit</H5>

    <DL><DD>
      <P>
      All registers must be preserved (service must not be claimed).
      </P>
    </DL>

    <H5>Use</H5>

    <P>
    This service call is issued by the MPEGControl module and its clients, such
    as the MPEG NDS module, to inform interested parties of events such as
    module initialisation and finalisation. For a more complete treatment of
    this service call, the reader is directed to the
    <A HREF="#references">MPEGControl3 module specification</A>.
    </P>

    <P>
    The sub-reason codes are currently defined as follows:
    </P>

    <TABLE>
      <TR><TH ALIGN="left">Sub-reason: <TH ALIGN="left">Meaning:
      <TR><TD> 6 <TD>The MPEG NDS module has been killed
      <TR><TD> 7 <TD>The MPEG NDS module has (re)initialised
    </TABLE>

    <P>
    Other sub-reason codes are defined in the document mentioned above.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="interchange">6. Data interchange</A></H2>

    <P>
    This section is not applicable.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="formats">7. Data formats</A></H2>

    <H3>7.1. Function pointer block</H3>

    <P>
    The MPEGNDS_RegisterHandlers and MPEGNDS_DeregisterHandlers SWIs require a
    pointer to a block of APCS-compatible C function pointers to be passed in R1.
    This is defined below:
    </P>

    <DL><DD>
      <TABLE CELLSPACING="2">
        <TR><TH ALIGN="left"> Word: <TH ALIGN="left"> Function:
        <TR><TD> 0 <TD> OpenStream_Handler()
        <TR><TD> 1 <TD> ResetStream_Handler()
        <TR><TD> 2 <TD> CloseStream_Handler()
        <TR><TD> 3 <TD> CADescriptor_Handler()
        <TR><TD> 4 <TD> ECMTSPacket_Handler()
        <TR><TD> 5 <TD> Descrambler_Handler()
      </TABLE>
    </DL>

    <P>
    All other entries in this block are undefined.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="external">8. External dependencies</A></H2>

    <UL>
      <LI>The MPEG NDS module and the NDS Verifier module must be available
          to exercise the SWI API.
    </UL>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="acceptance">9. Acceptance test</A></H2>

    <UL>
      <LI>Must function on target hardware, the DSL4000, as specified.
    </UL>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="noncompliances">10. Noncompliances</A></H2>

    <P>
    There are no noncompliances.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="test">11. Development test strategy</A></H2>

    <UL>
      <LI>All *commands must function as specified;
      <LI>All SWIs must function as specified.
    </UL>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="organisation">12. Product organisation</A></H2>

    <P>
    This API will be implemented by a module which interfaces with the MPEGControl module.
    The client code will probably be implemented in a wrapper around the NDS Verifier
    module.
    </P>

    <P>
    The MPEG NDS module will be written in ARM assembler and may be built into a ROM image
    or soft-loaded.
    </P>

    <P>
    The Verifier module wrapper code will be written in pure C and may be built into a ROM
    image or soft-loaded.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="enhancements">13. Future enhancements</A></H2>

    <P>
    No future enhancements are currently specified.
    </P>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="glossary">14. Glossary</A></H2>

    <DL>
      <DT>CA
        <DD>Conditional Access.
      <DT>ECM
        <DD>Entitlement Control Message
      <DT>MPEG
        <DD>Moving Picture (Motion Pictures) Experts Group - the nickname of
          SubCommittee 29 of Working Group 11 of ISO/IEC Joint Technical Committee 1.
      <DT>MPEG-1
        <DD>the nickname of ISO/IEC 11172 (see References).
      <DT>MPEG-2
        <DD>the nickname of ISO/IEC 13818 (see References).
      <DT>PID
        <DD>Packet IDentifier - a field in each transport stream packet, identifying
          which elementary stream the packet's payload belongs to. Some PIDs instead
          indicate the Program Association Table, Program Map Tables, Conditional
          Access Table, Network Information Table, etc.
      <DT>PMT
        <DD>Program Map Table - a table which fully defines a programme, including
          the PIDs of each relevant elementary stream.
      <DT>STB
        <DD>Set Top Box.
      <DT>SWI
        <DD>SoftWare Interrupt - basic OS function call.
      <DT>Transport stream
        <DD>a fixed-length-packet stream, further encoding video, audio and other PES
          packets relating to one or more programmes. It is capable of transmission
          or storage in relatively error-prone media. It is defined in the MPEG-2
          standard.
      <DT>TS
        <DD>see <I>transport stream</I>.
    </DL>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="references">15. References</A></H2>

    <UL>
      <LI>MPEGControl 3 Functional Specification (2501,883/FS - Issue 2)
      <LI>MPEGDriver Module Functional Specification (2501,823/FS - Issue 3)
    </UL>

    <!-- ******************************************************************************** -->
    <HR>
    <H2><A NAME="history">16. History</A></H2>

    <DL><DD>
      <TABLE WIDTH="90%" BORDER="0">
        <TR><TH ALIGN="left">Issue</TH>
            <TH ALIGN="left">Date</TH>
            <TH ALIGN="left">Author</TH>
            <TH ALIGN="left">Description of change</TH>
        <TR><TD>A
            <TD>04&nbsp;May&nbsp;2001
            <TD>BAvison
            <TD>Initial version.
        <TR><TD>B
            <TD>11&nbsp;May&nbsp;2001
            <TD>SRevill
            <TD>Added sections 6 through 15.
            <BR>Improved Technical Background.
        <TR><TD>C
            <TD>14&nbsp;May&nbsp;2001
            <TD>SRevill
            <TD>Added SWI SetCASID to the base of the SWI chunk.
            <BR>Corrected copyright date.
        <TR><TD>D
            <TD>01&nbsp;Jun&nbsp;2001
            <TD>SRevill
            <TD>Tidied-up a bit before first release.
        <TR><TD>E
            <TD>25&nbsp;Jun&nbsp;2001
            <TD>SRevill
            <TD>Updated with allocated SWI and error chunk information.
        <TR><TD>F
            <TD>19&nbsp;Jul&nbsp;2001
            <TD>SRevill
            <TD>Added details of the service calls issued by MPEG NDS.
        <TR><TD>G
            <TD>06&nbsp;Aug&nbsp;2001
            <TD>SRevill
            <TD>Modified API to allow CASID to be specified in Register SWI.
        <TR><TD>H
            <TD>13&nbsp;Aug&nbsp;2001
            <TD>SRevill
            <TD>The descrambler handler function API is now extended to return a success indicator.
      </TABLE>
    </DL>
  </BODY>
</HTML>

