/******	Zoran.h ************************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	Generic Zoran ZR38601 support (independent of interface)

Copyright 2001 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
10/10/2001	BJGA	Created

***************************************************************************/

#ifdef GENERIC

#ifndef __zoran_h
#define __zoran_h

/* Includes */

#include <stdint.h>
#include "kernel.h"

#include "PRISM/PRISM.h"

#include "AudGeneric.h"
#include "Clk.h"

/* Public types */

typedef struct
{
  _kernel_oserror * (*establish) (unsigned int flags, void *client, void *handle, void **session_id);
  _kernel_oserror * (*annul) (unsigned int flags, void *session_id);
  _kernel_oserror * (*commence) (unsigned int flags, void *session_id);
  _kernel_oserror * (*discontinue) (unsigned int flags, void *session_id);
  _kernel_oserror * (*dataavailable) (unsigned int flags, void *session_id);
  _kernel_oserror * (*consumedata) (unsigned int flags, void *session_id, const unsigned char *start, unsigned int length, const mpeg_time_t *pts, unsigned int *not_consumed);
  _kernel_oserror * (*readstreaminfo) (void *session_id, unsigned int tag, unsigned int *result);
}
zoran_characteriser_protocol_fns_t;

typedef struct block_header
{
  struct block_header *next;
  unsigned int offset; /* offset from start of struct to data - only differs from sizeof struct if some data has been sent to the chip */
  unsigned int length;
  /* Immediately following in memory is the data block itself */
}
block_header_t;

typedef struct zoran_interface /* This is also what our session_id handles actually point to! */
{
  /* command() : perform a Zoran command */
  void (*command) (unsigned int flags, const char *parameters, char *response);
  
  /* unmaskstuffingirq() : allow stuffing interrupts to start */
  void (*unmaskstuffingirq) (void);
  
  /* consumedata() : for delivery of queued data from generic Zoran code */
  _kernel_oserror * (*consumedata) (unsigned int flags, void *session_id, const unsigned char *start, unsigned int length, unsigned int *not_consumed);
  
  const common_toplevel_fns_t *toplevel;
  const buffer_fns_t *buffer;
  const scheduler_fns_t *scheduler;
  const presentation_fns_t *presentation;
  void *toplevelhandle;
  const prism_function_table_decoder_to_clock_t *clock;
  stream_handle_t clockhandle;
  const zoran_characteriser_protocol_fns_t *characteriser;
  void *characteriserhandle;
  struct zoran_interface *link; /* for global list, so we can convert from top-level handles */
  
  _kernel_oserror * (*howmuchdata) (unsigned int flags, void *handle, unsigned int max, unsigned int *bytes);
  _kernel_oserror * (*givemedata) (unsigned int flags, void *handle);
  unsigned flag_ac3notmpa: 1;
  unsigned flag_characterising: 1;
  unsigned flag_receivingcharacterisationdata: 1;
  unsigned flag_started: 1;
  unsigned flag_characterisationptsvalid: 1;
  unsigned flag_clocksessionbegun: 1;
  unsigned flag_syncmaster: 1;
  unsigned flag_oldptcvalid: 1;
  unsigned flag_oldptcerrvalid: 1;
  mpeg_time_t characterisation_pts;
  unsigned int oldptc;
  signed int oldptcerr;
  block_header_t *block_queue_head;
  block_header_t *block_queue_tail;
  
  prism_id_t prism_id;
  void *function_descriptor_table;
  size_t function_descriptor_table_size;
  const struct
  {
    _kernel_oserror *(*ComponentInfo)(uint32_t tag, uintptr_t *result);
    _kernel_oserror *(*ClockCorrection)(uint32_t flags, stream_handle_t decoder_handle);
    _kernel_oserror *(*SpeedChange)(uint32_t flags, stream_handle_t decoder_handle);
    _kernel_oserror *(*ActivateSyncControl)(uint32_t flags, stream_handle_t decoder_handle);
    _kernel_oserror *(*GetBufferLength)(uint32_t flags, stream_handle_t decoder_handle, uint32_t *length);
    _kernel_oserror *(*AdjustRate)(uint32_t flags, stream_handle_t decoder_handle);
_kernel_oserror *(*BodgePlay)(uint32_t flags, uint32_t event_handle);
  }
  *veneers;
  const char *hardware_info_prototype;
  char *hardware_info;
  unsigned int rom_version;
  const char *driver_info_prototype;
  char *driver_info;
  const char *short_info;
}
zoran_interface_t;

/* Public prototypes */

void Zoran_BodgeStart(void);
extern _kernel_oserror *Zoran_Init (zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_Final (zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_ComponentInfo (unsigned int tag, unsigned int *result, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_ClockCorrection (uint32_t flags, stream_handle_t decoder_handle, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_SpeedChange (uint32_t flags, stream_handle_t decoder_handle, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_ActivateSyncControl (uint32_t flags, stream_handle_t decoder_handle, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_GetBufferLength (uint32_t flags, stream_handle_t decoder_handle, uint32_t *length, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_AdjustRate (uint32_t flags, stream_handle_t decoder_handle, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_EstablishMPA (unsigned int flags, stream_handle_t clock_handle, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_EstablishAC3 (unsigned int flags, stream_handle_t clock_handle, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_Annul (unsigned int flags, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_Commence (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_Discontinue (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_DataAvailable (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_ConsumeData (unsigned int flags, void *session_id, const unsigned char *start, unsigned int length, unsigned int *not_consumed);
extern _kernel_oserror *Zoran_ReadFullness (unsigned int flags, void *session_id, unsigned int *occupancy);
extern _kernel_oserror *Zoran_Start (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_Stop (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_SetClock (unsigned int flags, void *session_id, clk time);
extern _kernel_oserror *Zoran_Speed (unsigned int flags, void *session_id, unsigned int factor);
extern _kernel_oserror *Zoran_Fast (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_Slow (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_Normal (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_Volume (unsigned int flags, void *session_id, unsigned int left, unsigned int right);
extern _kernel_oserror *Zoran_Downmix (unsigned int flags, void *session_id, unsigned int mode);
extern _kernel_oserror *Zoran_SPDIF (unsigned int flags, void *session_id);
extern _kernel_oserror *Zoran_ReadStreamInfo (void *session_id, unsigned int tag, unsigned int *result);
extern _kernel_oserror *Zoran_Peek (const char *arg_string, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_Poke (const char *arg_string, zoran_interface_t *zoran);
extern _kernel_oserror *Zoran_VCXO (const char *arg_string, zoran_interface_t *zoran);

#endif

#endif
