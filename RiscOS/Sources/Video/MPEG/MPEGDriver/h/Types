/******	Types.h ************************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	C type definitions

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
20/09/1999	BJGA	Created
07/10/1999	BJGA	Added internal types and public constants
20/10/1999	BJGA	Added video header parser items
22/10/1999	BJGA	API updated in line with issue 2 specification
26/10/1999	BJGA	Separated out picture_t, added picture list
09/11/1999	BJGA	Added (accumulated_data).amount_sent;
			typedef'ed a_v_state;
			structured (program_element_structure).int_flags;
			moved multiple bools into (program_element_structure).vid_flags;
			enumerated (program_element_structure).video_prefill_state
12/11/1999	BJGA	Split picture struct into frame and picture structs
			(to cope with field pictures); simplified video
			prefill state machine
17/11/1999	BJGA	Added frame display linked list; increased frame structs to 5;
			allowed dynamic allocation of frame buffers to frame structs;
			added a few state flags
23/11/1999	BJGA	Added a number of state flags for the improved state machine;
			added a number of new items to struct accumulated_data
25/11/1999	BJGA	Added frame buffer list for new frame buffer allocation scheme
30/11/1999	BJGA	Distinguished current_picture_structure and next_picture_structure
01/12/1999	BJGA	Added ps_frame_picture_extension and prev_picture_structure to
			support switching between field and frame pictures;
			added parsing_headers flag bit for enhanced robustness
02/12/1999	BJGA	Added a couple of flags for added error resilience
07/12/1999	BJGA	Added audio buffer thresholds
28/01/2000	BJGA	Added audio_header and aud_flags

***************************************************************************/

#ifndef __types_h
#define __types_h

/* Includes */

#include <stddef.h>
#include <stdbool.h>

#include "Clk.h"
#include "Co.h"

/* Public types */

/* types relating to the module's API */

typedef struct
{
  unsigned video_present: 1;
  unsigned audio_present: 1;
  unsigned sync_to_stream: 1;
  unsigned no_lip_sync: 1;
  unsigned reserved1: 1;
  unsigned use_callbacks: 1;
  unsigned reserved2: 4;
  unsigned ovs_npt_descriptors: 1;
  unsigned reserved3: 21;
}
stream_flags_t;

typedef void * control_stream_handle_t;

typedef struct
{
  unsigned video_present: 1;
  unsigned audio_present: 1;
  unsigned skip_until_correct_mode: 1;
  unsigned trick_play_mode: 1;
  unsigned reserved: 28;
}
reset_stream_flags_t;

typedef struct bitstream_packet
{
  struct bitstream_packet *link;
  void *free_routine;
  void *free_workspace;
  unsigned char *start;
  size_t length;
  void *buffer_descriptor;
  unsigned mpeg_start: 1;
  unsigned BSn_valid: 1;
  unsigned PTS_valid: 1;
  unsigned DTS_valid: 1;
  unsigned full_length_unknown: 1;
  unsigned reserved: 27;
  unsigned int BSn;
  clk PTS;
  clk DTS;
  unsigned int full_length;
}
bitstream_packet_t;

typedef enum
{
  st_free = 0,
  st_fixed_width = 1,
  st_fixed_height = 2,
  st_fixed = 3
}
scaling_type;

typedef enum
{
  tv_regular = 0,
  tv_widescreen = 1
}
TV_aspect;

typedef enum
{
  vm_box = 0,
  vm_auto = 1,
  vm_zoom = 2,
  vm_stretch = 3
}
viewing_mode;

typedef struct
{
  scaling_type type;
  union
  {
    struct
    {
      TV_aspect ratio;
      struct
      {
        unsigned use_WSS: 1;
        unsigned use_SCART_pin_8: 1;
        unsigned reserved: 30;
      }
      flags;
      viewing_mode preference;
    }
    free;
    struct
    {
      bool anamorphic;
      unsigned int width;
      unsigned int x;
      unsigned int y;
    }
    fixed_width;
    struct
    {
      bool anamorphic;
      unsigned int height;
      unsigned int x;
      unsigned int y;
    }
    fixed_height;
    struct
    {
      unsigned int width;
      unsigned int height;
      unsigned int x;
      unsigned int y;
    }
    fixed;
  }
  param;
}
scaling_type_block_t;

typedef struct
{
  unsigned int format_type;
  unsigned dont_CLS : 1;
  unsigned reserved1: 15;
  unsigned blanked_entries_present : 1;
  unsigned underrun_fix : 1;
  unsigned fix_lengths : 1;
  unsigned scaling_type_present : 1;
  unsigned reserved2: 12;
  unsigned int screen_mode;
  unsigned int reserved3 [4];
  unsigned int blanked_sequences;
  unsigned int blanked_fields;
  scaling_type_block_t scaling_type;
}
video_parameters_structure_t;

typedef enum
{
  dc_both = 0,
  dc_left = 1,
  dc_right = 2
}
dual_channel_specifier;

typedef enum
{
  ct_unknown = -1,
  ct_stereo = 0,
  ct_joint_stereo = 1,
  ct_dual_mono = 2,
  ct_mono = 3
}
audio_channel_type;

typedef struct
{
  unsigned int format_type;
  unsigned mute_audio_on_errors: 1;
  unsigned dual_channel_specifier_present: 1;
  unsigned reserved: 30;
  dual_channel_specifier specifier;
}
audio_parameters_structure_t;

/* internal types */

struct accumulated_data
{
  int amount_received; /* from control unit */
  int amount_sent;     /* to chip */
  int slows;           /* frame-repeats for video */
  int fasts;           /* frame-skips for video */
  int stalls;
  int underruns;
  int picture_decode_errors; /*                           */
  int severe_errors;         /* only used in video struct */
  int pipeline_errors;       /*                           */
};

typedef struct
{
  enum {
    stream_prefilling,
    stream_open,
    stream_closing,
    stream_closed
  } state;
  enum {
    ps_searching_for_first_PES_header,
    ps_initialising,
    ps_waiting_for_play_command,
    ps_waiting_for_presentation_start
  } prefill_state;
  int speed_indicator;                  /* As passed to SetSpeed */
  bitstream_packet_t *packet_list_head;
  bitstream_packet_t *packet_list_tail;
  struct accumulated_data since_open;
  struct accumulated_data since_reset;
  co_routine header_parser;
}
a_v_state_t;

typedef enum
{
  ps_first_field_picture,    /* ie first in a picture pair */
  ps_second_field_picture,   /* ie second in a picture pair */
  ps_frame_picture,          /* when a frame is one picture */
  ps_frame_picture_extension /* magic state for slipping decode by one field      */
                             /* when moving from frame pictures to field pictures */
}
picture_structure;

typedef struct
{
  /* Things determined from MPEG headers, which persist until the next picture header */
  unsigned char picture_coding_type;
  unsigned int vbv_delay;  /* in 90 kHz ticks */
  unsigned char forward_horizontal_f_code;
  unsigned char forward_vertical_f_code;
  unsigned char backward_horizontal_f_code;
  unsigned char backward_vertical_f_code;
  unsigned char intra_dc_precision;
  unsigned char picture_structure;
  union {
    unsigned char byte;
    struct {
      unsigned alternate_scan: 1;
      unsigned intra_vlc_format: 1;
      unsigned q_scale_type: 1;
      unsigned concealment_motion_vectors: 1;
      unsigned frame_pred_frame_dct: 1;
      unsigned top_field_first: 1;
    } bits;
  } picture_flags;
  unsigned char active_format;
} picture_t;

struct frame_buffer
{
  unsigned int addr;
  unsigned char usage_count; /* 0, 1 or 2 */
  struct frame_buffer *unused_link; /* next unused struct */
};

typedef struct frame
{
  /* Things determined from MPEG headers, which persist until the next sequence header */
  struct {
    bool mpeg2;
    unsigned int display_horizontal_size;
    unsigned int display_vertical_size;
    unsigned int display_aspect_ratio;
    unsigned int coded_horizontal_size;
    unsigned int coded_vertical_size;
    unsigned int coded_aspect_ratio;
    bool active_area_is_at_top;
    unsigned int active_horizontal_size;
    unsigned int active_vertical_size;
    unsigned int active_aspect_ratio;
    unsigned int protected_horizontal_size;
    unsigned int protected_vertical_size;
    unsigned int protected_aspect_ratio;
    unsigned char aspect_ratio_information;  /* MPEG-1/2 semantics differ */
    unsigned int frame_rate;                 /* in millihertz */
    unsigned int bit_rate;                   /* in units of 400 bits/s */
    unsigned int vbv_buffer_size;            /* in units of 16*1024 bits */
    unsigned char profile_and_level_indication;
    bool progressive_sequence;
    unsigned char chroma_format;
    bool low_delay;
    unsigned char video_format;
    unsigned char color_primaries;
    unsigned char transfer_characteristics;
    unsigned char matrix_coefficients;
  } seq;
  /* Things determined from MPEG headers, which persist until the next GOP header */
  struct {
    unsigned int time_code;
    bool closed_gop;
    bool broken_link;
  } gop;
  /* Things determined from MPEG headers specific to this frame */
  unsigned int temporal_reference;
  picture_t pic1;
  picture_t pic2;  /* only used for second of a pair of field pictures */
  picture_t *lastpic; /* points to whichever of pic1 or pic2 was most recently decoded */
  bool top_field_first; /* read from headers for frame pictures, calculated for field pictures */
  bool repeat_first_field; /* these would both be zero (ie the same) */
  bool progressive_frame;  /* in pairs of field pictures             */
  signed short frame_center_horizontal_offset [3];
  signed short frame_center_vertical_offset [3];
  /* Other frame-related things */
  struct frame *decode_link;  /* decoding list (and unused list) */
  struct frame *display_link; /* display list */
  unsigned on_decode_list: 1;
  unsigned on_display_list: 1;
  struct frame_buffer *frame_buffer;
}
frame_t;

typedef struct
{
  /* General stuff */
  control_stream_handle_t csh;
  stream_flags_t s_flags;
  reset_stream_flags_t rs_flags;
  /* Video stuff */
  video_parameters_structure_t video_parms;
  a_v_state_t video;
  enum {
    lvhld_sequence,
    lvhld_gop,
    lvhld_picture
  } last_video_header_layer_decoded;
  picture_structure next_picture_structure;    /* ie of the most-recently parsed headers */
  picture_structure current_picture_structure; /* current value, latched on instruction write */
  picture_structure prev_picture_structure;    /* old value, latched on instruction write */
  struct {
    unsigned default_intra_quantizer_matrix_loaded: 1;
    unsigned default_non_intra_quantizer_matrix_loaded: 1;
    unsigned parsing_headers: 1;
    unsigned sequence_header_received_since_picture_header: 1;
    unsigned gop_header_received_since_picture_header: 1;
    unsigned buffer_assigned_to_this_frame: 1;
    unsigned had_phoney_pipeline_idle_IRQ: 1;
    unsigned prefill_anchor_frames_decoded: 2;
    unsigned first_frame_displayed: 1;
    unsigned next_frames_headers_have_been_decoded: 1;
    unsigned this_frames_data_have_been_decoded: 1;
    unsigned last_instruction_was_a_decode: 1; /* ie not a skip */
    unsigned final_instruction_has_been_written_during_this_AU: 1;
    unsigned stalled_while_closing: 1; /* the condition for exiting CloseStream */
  } vid_flags;
  int field_to_trigger_second_decode_on;
  int fields_into_this_PU;
  int fields_till_next_AU;
  int consecutive_pipeline_stalls;
  frame_t frame[5];        /* yes, we really need five of these */
  frame_t *decode_frames;  /* list of recent frames in reverse order of decoding */
  frame_t *display_frames; /* list of future frames in order of display */
  frame_t *unused_frames;  /* list of currently unused frame structs */
  struct frame_buffer frame_buffer[4];
  struct frame_buffer *unused_frame_buffers;
  /* Audio stuff */
  audio_parameters_structure_t audio_parms;
  a_v_state_t audio;
  union {
    unsigned int word;
    struct {
      unsigned emphasis: 2;
      unsigned original_copy: 1;
      unsigned copyright: 1;
      unsigned mode_extension: 2;
      unsigned mode: 2;
      unsigned private_bit: 1;
      unsigned padding_bit: 1;
      unsigned sampling_frequency: 2;
      unsigned bitrate_index: 4;
      unsigned protection_bit: 1;
      unsigned layer: 2;
      unsigned ID: 1;
      unsigned syncword: 12;
    } fields;
  } audio_header;
  struct {
    unsigned pcmclk_set_up_for_this_stream: 1;
  } aud_flags;
  enum {
    aps_searching_for_first_PES_header,
    aps_reaching_buffer_threshold,
    aps_waiting_for_decode_start
  } audio_prefill_state;
  enum {
    afss_next_frame_fast,
    afss_this_frame_fast,
    afss_normal_speed,
    afss_this_frame_slow,
    afss_next_frame_slow
  } audio_fast_slow_state;     /* default afss_normal_speed */
  int discarded_audio_bit_buffer_data; /* for use in ResetStream */
  int audio_buffer_prefill;         /* in bytes */
  int audio_buffer_low_water_mark;  /* in bytes */
  int audio_buffer_high_water_mark; /* in bytes */
}
program_element_structure_t;

typedef program_element_structure_t * stream_handle_t;

/* Public constants */

#define NULL_CSH ((control_stream_handle_t) -1)

#endif
