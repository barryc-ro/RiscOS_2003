/******	STi3520L.h *********************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	MPEG chip initialisation and management

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
28/09/1999	BJGA	Created
20/10/1999	BJGA	Added STi3520L_SoftReset() and STi3520L_PipelineReset();
			added bit definitions for VID_DCF, VID_HDS, VID_TIS, VID_CTL

***************************************************************************/

#ifndef __sti3520l_h
#define __sti3520l_h

/* Includes */

#include "kernel.h"

/* Public prototypes */

extern void STi3520L_HardReset (void);
extern void STi3520L_SoftReset (void);
extern void STi3520L_PipelineReset (void);

/* Public constants */

#define SDRAM_OSD_START                 0x000000  /* On-screen display (512K - plenty of room for full-screen OSD plus WSS pattern) */
#define SDRAM_OSD_END                   0x080000
#define SDRAM_AUDIO_BIT_BUFFER_START    0x080000  /* Audio bit buffer (14.5K) */
#define SDRAM_AUDIO_BIT_BUFFER_END      0x083A00
#define SDRAM_VIDEO_BIT_BUFFER_START    0x083A00  /* Video bit buffer (532K) */
#define SDRAM_VIDEO_BIT_BUFFER_END      0x108A00
#define SDRAM_FRAME_BUFFER_0_START      0x108A00  /* MPEG still-picture frame buffer (607.5K - enough for NTSC or PAL) */
#define SDRAM_FRAME_BUFFER_0_END        0x1A0800
#define SDRAM_FRAME_BUFFER_1_START      0x1A0800  /* Anchor frame buffer (607.5K - enough for NTSC or PAL) */
#define SDRAM_FRAME_BUFFER_1_END        0x238600
#define SDRAM_FRAME_BUFFER_2_START      0x238600  /* Anchor frame buffer (607.5K - enough for NTSC or PAL) */
#define SDRAM_FRAME_BUFFER_2_END        0x2D0400
#define SDRAM_FRAME_BUFFER_3_START      0x2D0400  /* B-frame buffer (607.5K - enough for NTSC or PAL) */
#define SDRAM_FRAME_BUFFER_3_END        0x368200
#define SDRAM_FRAME_BUFFER_4_START      0x368200  /* B-frame buffer (607.5K - enough for NTSC or PAL) */
#define SDRAM_FRAME_BUFFER_4_END        0x400000

#define VIDEO_INT_ERR           (1u << 22)      /* PES inconsistency error */
#define VIDEO_INT_SCR           (1u << 21)      /* New SCR latched */
#define VIDEO_INT_ABF           (1u << 19)      /* Audio bit buffer at or above threshold */
#define VIDEO_INT_RFN           (1u << 18)      /* Memory read FIFO not empty */
#define VIDEO_INT_WFN           (1u << 17)      /* Memory write FIFO not full */
#define VIDEO_INT_ABE           (1u << 16)      /* Audio bit buffer empty */
#define VIDEO_INT_PDE           (1u << 15)      /* Picture decoding error */
#define VIDEO_INT_SER           (1u << 14)      /* Severe error */
#define VIDEO_INT_BMI           (1u << 13)      /* Block move idle */
#define VIDEO_INT_HFF           (1u << 12)      /* Header FIFO full */
#define VIDEO_INT_RFF           (1u << 11)      /* Memory read FIFO full */
#define VIDEO_INT_WFE           (1u << 10)      /* Memory write FIFO empty */
#define VIDEO_INT_PID           (1u << 9)       /* Pipeline idle */
#define VIDEO_INT_PER           (1u << 8)       /* Pipeline error */
#define VIDEO_INT_PSD           (1u << 7)       /* Pipeline starting to decode */
#define VIDEO_INT_VST           (1u << 6)       /* VSync - top field */
#define VIDEO_INT_VSB           (1u << 5)       /* VSync - bottom field */
#define VIDEO_INT_BBE           (1u << 4)       /* Video bit buffer empty */
#define VIDEO_INT_BBF           (1u << 3)       /* Video bit buffer at or above threshold */
#define VIDEO_INT_HFE           (1u << 2)       /* Header FIFO empty */
#define VIDEO_INT_BFF           (1u << 1)       /* Video CD FIFO full (== VIDREQ¬) */
#define VIDEO_INT_SCH           (1u << 0)       /* Start code hit */

#define AUDIO_INT_FNP           (1u << 14)      /* First bit of new frame at PCM output */
#define AUDIO_INT_IFF           (1u << 13)      /* Input FIFO full */
#define AUDIO_INT_IFT           (1u << 12)      /* Input FIFO at threshold */
#define AUDIO_INT_DCH           (1u << 10)      /* De-emphasis changed */
#define AUDIO_INT_SFC           (1u << 9)       /* Sampling frequency changed */
#define AUDIO_INT_POU           (1u << 8)       /* PCM output buffer underflow */
#define AUDIO_INT_ADF           (1u << 7)       /* Anciliary data register full */
#define AUDIO_INT_CRC           (1u << 5)       /* CRC error */
#define AUDIO_INT_VPR           (1u << 2)       /* Valid PTS registered */
#define AUDIO_INT_VHR           (1u << 1)       /* Valid header registered */
#define AUDIO_INT_CSS           (1u << 0)       /* Change in synchronisation status */

#define VID_DCF_BFL             (1u << 22)      /* Blank first line */
#define VID_DCF_DVO             (1u << 21)      /* Dual video output */
#define VID_DCF_LB              (1u << 20)      /* Letterbox */
#define VID_DCF_OAD_SHIFT       (14)            /* OSD active signal delay */
#define VID_DCF_OAM             (1u << 13)      /* OSD active mode signal */
#define VID_DCF_FRZ             (1u << 12)      /* Display freeze (in B-picture optimisation mode) */
#define VID_DCF_DAM_SHIFT       (9)             /* Display access mode */
#define VID_DCF_FLD             (1u << 8)       /* Field bit */
#define VID_DCF_USR             (1u << 7)       /* Enable user field sequence control */
#define VID_DCF_PXD             (1u << 6)       /* PIXCLK delay */
#define VID_DCF_EVD             (1u << 5)       /* Enable video display */
#define VID_DCF_EOS             (1u << 4)       /* Enable OSD */
#define VID_DCF_DSR             (1u << 3)       /* Disable SRC */
#define VID_DCF_VFC_SHIFT       (0)             /* Vertical filter configuration */

#define VID_HDS_SOS             (1u << 2)       /* Stop on first slice */
#define VID_HDS_QMI             (1u << 1)       /* Quant matrix intra select bit */
#define VID_HDS_HDS             (1u << 0)       /* Start header search */

#define VID_TIS_BUF             (1u << 7)       /* Bit buffer selection */
#define VID_TIS_MP2             (1u << 6)       /* MPEG-2 mode */
#define VID_TIS_SKP_SHIFT       (4)             /* Skip mode */
#define VID_TIS_OVW             (1u << 3)       /* Overwrite mode */
#define VID_TIS_FIS             (1u << 2)       /* Force instruction */
#define VID_TIS_RPT             (1u << 1)       /* Repeat */
#define VID_TIS_EXE             (1u << 0)       /* Execute */

#define VID_CTL_ERU             (1u << 7)       /* Enable pipeline reset on underflow error */
#define VID_CTL_ERS             (1u << 6)       /* Enable pipeline reset on overflow error */
#define VID_CTL_DEC             (1u << 4)       /* Disable error concealment */
#define VID_CTL_ERP             (1u << 3)       /* Enable pipeline reset on pipeline error */
#define VID_CTL_PRS             (1u << 2)       /* Pipeline reset */
#define VID_CTL_SRS             (1u << 1)       /* Soft reset */
#define VID_CTL_EDC             (1u << 0)       /* Enable decoding */

//#define VID_DCF_             (1u << )      /*  */

#endif
