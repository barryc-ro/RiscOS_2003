/******	AudGeneric.h *******************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	Generic version of audio handling

Copyright 2001 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
10/10/2001	BJGA	Created

***************************************************************************/

#ifdef GENERIC

#ifndef __audgeneric_h
#define __audgeneric_h

/* Includes */

#include <stdbool.h>
#include "kernel.h"

#include "Clk.h"
#include "Types.h"

/* Public types */

typedef struct
{
  /* COMMON */
  /* Would be implemented in each protocol module in a real PRISM system */
  
  /* componentinfo() : return hardware/driver/codec information */
  /* This is the same routine as is registered with PRISM */
  /*   in:     tag:          0 => return pointer to hardware/codec name and version */
  /*                         1 => return hardware/codec version as unsigned int */
  /*                         2 => return pointer to driver/implementation name and version */
  /*                         3 => return driver/implementation version as unsigned int */
  /*                         4 => return copyright message */
  /*                         5 => return short-form info string */
  /*                         etc  */
  /*   out:                  error pointer */
  _kernel_oserror * (*componentinfo) (unsigned int tag, unsigned int *result);
  
  /* establish(): stream initialisation (only called on OpenStream) */
  /*   in:     flags:        reserved, mbz */
  /*           handle:       top-level module's handle for this dialogue (= audio stream handle, for now) */
  /*           clock_handle: handle of PFCClock session to synchronise to */
  /*   out:                  error pointer if stream could not be opened */
  /*           session_id:   protocol module's session identifier (its own handle for this dialogue) */
  _kernel_oserror * (*establish) (unsigned int flags, void *handle, stream_handle_t clock_handle, void **session_id);
  
  /* annul(): stream finalisation (only called on CloseStream) */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*   out:                  error pointer if stream could not be closed */
  _kernel_oserror * (*annul) (unsigned int flags, void *session_id);
  
  /* commence() : stream segment initialisation (called on OpenStream and ResetStream) */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*   out:                  error pointer if stream could not be opened */
  _kernel_oserror * (*commence) (unsigned int flags, void *session_id);
  
  /* discontinue() : stream segment finalisation (called on ResetStream and CloseStream) */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*   out:                  error pointer if stream could not be closed */
  _kernel_oserror * (*discontinue) (unsigned int flags, void *session_id);
  
  
  /* DECODER PROTOCOL MODULES */
  
  /* dataavailable() : notification that data has arrived in a hitherto empty buffer */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*   out:                  error pointer */
  _kernel_oserror * (*dataavailable) (unsigned int flags, void *session_id);
  
  /* consumedata() : accept contiguous data block (called multiple times in response to givemedata()) */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*           start/length: definition of data block */
  /*   out:                  error pointer if operation was aborted */
  /*           not_consumed: number of bytes that could not be accepted at this time (nonzero values will prevent further consumedata() calls until the next givemedata() call) */
  _kernel_oserror * (*consumedata) (unsigned int flags, void *session_id, const unsigned char *start, unsigned int length, unsigned int *not_consumed);
  
  /* readfullness() : return amount of data currently buffered */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*   out:                  error pointer */
  /*           occupancy:    "private" (typically hardware) buffer occupancy (bytes) */
  _kernel_oserror * (*readfullness) (unsigned int flags, void *session_id, unsigned int *occupancy);
  
  
  /* PRESENTATION PROTOCOL MODULES */
  
  /* volume() : volume has changed */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*   out:                  error pointer */
  _kernel_oserror * (*volume) (unsigned int flags, void *session_id);
  
  /* downmix() : dual channel downmix option has changed */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*   out:                  error pointer */
  _kernel_oserror * (*downmix) (unsigned int flags, void *session_id);
  
  /* spdif() : S/PDIF options have changed */
  /*   in:     flags:        reserved, mbz */
  /*           session_id:   protocol module's session identifier */
  /*   out:                  error pointer */
  _kernel_oserror * (*spdif) (unsigned int flags, void *session_id);
  
  /* streaminfo() : return stream information */
  /*   in:     session_id:   protocol module's session identifier */
  /*           tag:          256 => return pointer to full encoding name (eg "MPEG-1 Layer II") */
  /*                         257 => return pointer to short encoding name (eg "MPEG-1") */
  /*                         258 => return sampling rate in Hz */
  /*                         259 => return bitrate in bits/s */
  /*                         260 => return number of main channels */
  /*                         261 => return number of surround channels */
  /*                         262 => return number of LFE channels */
  /*                         263 => return 1 if downmix options available (dual mono / karaoke) */
  /*                         264 => return 1 if copyrighted, else 0 */
  /*                         265 => return 1 if original, 0 if copy */
  /*                         266 => return pointer to first PTS of stream, or NULL if none (yet) determined */
  /*                         512 => return 1 if decoding has begun, else 0 */
  /*                         513 => return number of decode errors since OpenStream */
  /*                         514 => return number of decode errors since Open/ResetStream */
  /*                         515 => return number of underruns since OpenStream */
  /*                         516 => return number of underruns since Open/ResetStream */
  /*   out:                  error pointer */
  _kernel_oserror * (*streaminfo) (void *session_id, unsigned int tag, unsigned int *result);
}
protocol_fns_t;

typedef struct
{
  /* CALLS ANY TOP LEVEL MODULE (although flag bit definitions would differ) */
  
  /* registerme() : protocol module registration */
  /*   in:     flags:        bit 0 clear = MPEG audio, bit 0 set = AC-3 audio */
  /*                         bit 1 set => step decoder, else stream decoder */
  /*           me:           pointer to list of functions in this protocol module */
  /*   out:                  error pointer */
  _kernel_oserror * (*registerme) (unsigned int flags, protocol_fns_t *me);
  
  /* deregisterme(): protocol module deregistration */
  /*   in:     flags:        as for registerme() */
  /*           me:           as for registerme() */
  /*   out:                  error pointer */
  _kernel_oserror * (*deregisterme) (unsigned int flags, protocol_fns_t *me);
}
common_toplevel_fns_t;

typedef struct
{
  /* howmuchdata() : enquire how much data is available to be stuffed */
  /*   in:     flags:        reserved, mbz */
  /*           handle:       top-level module's dialogue handle */
  /*           max:          the maximum amount we're interested in hearing about, or 0 to return the total amount */
  /*   out:                  error pointer */
  /*           bytes:        number of bytes available for stuffing (excluding PES headers) */
  _kernel_oserror * (*howmuchdata) (unsigned int flags, void *handle, unsigned int max, unsigned int *bytes);
  
  /* givemedata() : request for stuffing */
  /*   in:     flags:        bit 0 set => wrap data in PES packets, bit 0 clear => no PES wrapping (implies no timestamps conveyed!) */
  /*           handle:       top-level module's dialogue handle */
  /*   out:                  error pointer */
  _kernel_oserror * (*givemedata) (unsigned int flags, void *handle);
}
buffer_fns_t;

typedef struct
{
  /* underrun() : decoding has underrun */
  /*   in:     flags:        reserved, mbz */
  /*           handle:       top-level module's dialogue handle */
  /*   out:                  error pointer */
  _kernel_oserror * (*underrun) (unsigned int flags, void *handle);
}
scheduler_fns_t;

typedef struct
{
  /* streaminfo() : return stream information */
  /*   in:     handle:       top-level module's dialogue handle */
  /*           tag:          0 => mute (raw setting, independent of attenuation) */
  /*                         1 => left channel attenuation (peak, before mixing, relative to system volume) (16.16 fixed-point adB) */
  /*                         2 => left channel dialogue attenuation (16.16 fixed-point adB) */
  /*                         3 => left channel peak attenuation (16.16 fixed-point adB) */
  /*                         4 => left channel dialogue attenuation (16 bit linear scale) */
  /*                         5 => left channel peak attenuation (16 bit linear scale) */
  /*                         6 => right channel attenuation (peak, before mixing, relative to system volume) (16.16 fixed-point adB) */
  /*                         7 => right channel dialogue attenuation (16.16 fixed-point adB) */
  /*                         8 => right channel peak attenuation (16.16 fixed-point adB) */
  /*                         9 => right channel dialogue attenuation (16 bit linear scale) */
  /*                         10 => right channel peak attenuation (16 bit linear scale) */
  /*                         11 => dual channel downmix mode:  0 = channel 1 (or V1) on left, channel 2 (or V2) on right */
  /*                                                           1 = channel 1 (or V1) on both left and right */
  /*                                                           2 = channel 2 (or V2) on both left and right */
  /*                                                           3 = neither channel output */
  /*                         12 => S/PDIF mode for PCM audio (0 => on, compressed; 1 => on, PCM downmix; 2 => off) */
  /*                         13 => S/PDIF mode for MPEG audio */
  /*                         14 => S/PDIF mode for AC-3 audio */
  /*                         15 => S/PDIF mode for DTS audio */
  /*                         16 => S/PDIF mode for SDDS audio */
  /*   out:                  error pointer */
  _kernel_oserror * (*streaminfo) (void *handle, unsigned int tag, unsigned int *result);
  
  /* streaminfochanging() : stream information has been initialised or updated (new values have effect from next presentation unit) */
  /*   in:     flags:        reserved, mbz */
  /*           handle:       top-level module's dialogue handle */
  /*   out:                  error pointer */
  _kernel_oserror * (*streaminfochanging) (unsigned int flags, void *handle);
}
presentation_fns_t;

typedef struct
{
  /* streamrecognised(): stream type positively or negatively identified */
  /*   in:     flags:        bit 0 set => positive rather than negative identification */
  /*           handle:       top-level module's dialogue handle */
  /*   out:                  error pointer */
  _kernel_oserror * (*streamrecognised) (unsigned int flags, void *handle);
}
recogniser_fns_t;

enum
{
  ptlaudio_STREAM_INFO_MUTE_RAW = 0,
  ptlaudio_STREAM_INFO_LEFT_ATTENUATION_RAW,
  ptlaudio_STREAM_INFO_LEFT_DIALOGUE_ATTENUATION,
  ptlaudio_STREAM_INFO_LEFT_PEAK_ATTENUATION,
  ptlaudio_STREAM_INFO_LEFT_DIALOGUE_ATTENUATION_LINEAR,
  ptlaudio_STREAM_INFO_LEFT_PEAK_ATTENUATION_LINEAR,
  ptlaudio_STREAM_INFO_RIGHT_ATTENUATION_RAW,
  ptlaudio_STREAM_INFO_RIGHT_DIALOGUE_ATTENUATION,
  ptlaudio_STREAM_INFO_RIGHT_PEAK_ATTENUATION,
  ptlaudio_STREAM_INFO_RIGHT_DIALOGUE_ATTENUATION_LINEAR,
  ptlaudio_STREAM_INFO_RIGHT_PEAK_ATTENUATION_LINEAR,
  ptlaudio_STREAM_INFO_DUAL_CHANNEL_MODE,
  ptlaudio_STREAM_INFO_SPDIF_MODE_PCM,
  ptlaudio_STREAM_INFO_SPDIF_MODE_MPEG,
  ptlaudio_STREAM_INFO_SPDIF_MODE_AC3,
  ptlaudio_STREAM_INFO_SPDIF_MODE_DTS,
  ptlaudio_STREAM_INFO_SPDIF_MODE_SDDS,
  
  ptlaudio_STREAM_INFO_FULL_NAME = 0x100,
  ptlaudio_STREAM_INFO_NAME,
  ptlaudio_STREAM_INFO_SAMPLING_RATE,
  ptlaudio_STREAM_INFO_BITRATE,
  ptlaudio_STREAM_INFO_MAIN_CHANNELS,
  ptlaudio_STREAM_INFO_SURROUND_CHANNELS,
  ptlaudio_STREAM_INFO_LFE_CHANNELS,
  ptlaudio_STREAM_INFO_DOWNMIX_AVAILABLE,
  ptlaudio_STREAM_INFO_COPYRIGHTED,
  ptlaudio_STREAM_INFO_ORIGINAL_NOT_COPY,
  ptlaudio_STREAM_INFO_FIRST_PTS,
  
  ptlaudio_STREAM_INFO_DECODING_ACTIVE = 0x200,
  ptlaudio_STREAM_INFO_TOTAL_ERRORS,
  ptlaudio_STREAM_INFO_ERRORS,
  ptlaudio_STREAM_INFO_TOTAL_UNDERRUNS,
  ptlaudio_STREAM_INFO_UNDERRUNS,
};

/* Public prototypes */

extern _kernel_oserror *AudGeneric_Initialise (bool *use);
extern _kernel_oserror *AudGeneric_Finalise (void);

extern _kernel_oserror *AudGeneric_CLIAudioInfo (void);
extern _kernel_oserror *AudGeneric_CLIPacketInfo (void);

extern _kernel_oserror *AudGeneric_SWIOpenStream (stream_flags_t *flags, control_stream_handle_t csh, audio_parameters_structure_t *aps, mpeg_stream_handle_t *return_ash);
extern _kernel_oserror *AudGeneric_SWIFullPackets (unsigned int type, unsigned int flags, mpeg_stream_handle_t ash, bitstream_packet_t *packets);
extern _kernel_oserror *AudGeneric_SWICloseStream (unsigned int flags, mpeg_stream_handle_t ash);
extern _kernel_oserror *AudGeneric_SWIPlay (unsigned int flags, mpeg_stream_handle_t ash);
extern _kernel_oserror *AudGeneric_SWISetSpeed (unsigned int flags, mpeg_stream_handle_t ash, unsigned int speed);
extern _kernel_oserror *AudGeneric_SWIResetStream (reset_stream_flags_t *flags, mpeg_stream_handle_t ash, unsigned int *return_discarded_data_size);
extern _kernel_oserror *AudGeneric_SWIMuteSound (unsigned int flags, mpeg_stream_handle_t ash);
extern _kernel_oserror *AudGeneric_SWISoundVolume (unsigned int flags, mpeg_stream_handle_t ash, int volume, int *return_old_volume);
extern _kernel_oserror *AudGeneric_SWIStats (unsigned int flags, mpeg_stream_handle_t ash, unsigned int *tags, void *buffer, int buffer_size, void **return_pointer, int *return_buffer_remaining);
extern _kernel_oserror *AudGeneric_SWISetAudioParameters0 (mpeg_stream_handle_t ash, int new_state, int *return_old_state);
extern _kernel_oserror *AudGeneric_SWISetAudioParameters1 (mpeg_stream_handle_t ash, dual_channel_specifier new_state, dual_channel_specifier *return_old_state, audio_channel_type *return_channel_type);
extern _kernel_oserror *AudGeneric_SWISetAudioParameters2 (mpeg_stream_handle_t ash, int new_state, int *return_old_state);
extern _kernel_oserror *AudGeneric_SWIReadParameters3 (mpeg_stream_handle_t ash, unsigned int *return_STC_lo, unsigned int *return_STC_hi);
extern void AudGeneric_ChangeAudioMode (bool line_mode);
extern void AudGeneric_ChangeSPDIF (void);

#endif

#endif
