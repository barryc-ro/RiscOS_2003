/******	Co.h ***************************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	Support for SVC mode coroutines

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
12/10/1999	BJGA	Created

***************************************************************************/

#ifndef __co_h
#define __co_h

/* Public types */

/******	co_routine *********************************************************

|co_routine| is a block of memory holding the current context of a single
coroutine. It would typically be allocated as a static variable by the
routine that intends to call it.

***************************************************************************/

typedef struct
{
  int Private[10];
}
co_routine;

/******	co_routine_function ************************************************

|co_routine_function| defines the prototype to which every coroutine
function must conform. The first time the function is invoked, the
parameter that the caller passed to |Co_SwitchTo()| is passed to the
coroutine as the argument |param|.
   
The function is entered in SVC mode with interrupts disabled; it must not
enable interrupts, and must not return. This is because the coroutine is
executed with its own private stack chunk: respectively, we cannot allow
interrupts to go off when sp_svc does not point within the supervisor
stack; and there is no return frame on the private stack for function exit
to return to.

***************************************************************************/

typedef void co_routine_function (void *param);

/* Public variables */

/******	Co_MainRoutine *****************************************************
   
|Co_MainRoutine| is a pointer to a |co_routine| block for the main
routine. It should be passed to |Co_SwitchTo()| when a coroutine wishes to
return to the main routine. The block is managed internally.

***************************************************************************/

extern const co_routine *Co_MainRoutine;

/* Public functions */

/******	Co_Create() ********************************************************

Purpose:	|Co_Create()| takes a pointer to a coroutine function, and
		returns an appropriate |co_routine| block. The coroutine is
		not actually called at this stage.

		Note that this call can be issued from within a coroutine to
		achieve nested coroutines. However, care must then be taken
		that |Co_Destroy()| is called for the nested coroutines.

***************************************************************************/

extern co_routine Co_Create (const co_routine_function *function);

/******	Co_Create() ********************************************************
   
Purpose:	|Co_SwitchTo()| switches context to another coroutine. The
		next piece of code that is executed is either the first
		statement of the coroutine function (if it is the first
		call), or the statement after the most-recently called
		instance of |Co_SwitchTo()| within the coroutine. In either
		case, the value of |param| that the caller passed in is
		passed on to the callee, either as an argument to the
		function, or as the result of the coroutine's most recent
		call to |Co_SwitchTo()|.

***************************************************************************/

extern void *Co_SwitchTo (const co_routine *routine, void *param);

/******	Co_Create() ********************************************************
   
Purpose:	|Co_Destroy()| must be called when the given coroutine is no
		longer required.

***************************************************************************/

extern void Co_Destroy (const co_routine *routine);

#endif
