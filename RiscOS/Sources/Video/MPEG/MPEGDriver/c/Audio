/******	Audio.c ************************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	Audio SWI handling

Copyright 1999 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
01/10/1999	BJGA	Created
23/11/1999	BJGA	Return values from SWIStats() initialised, so VSP modules no longer crash

***************************************************************************/

/************/
/* Includes */
/************/

#include "kernel.h"

#include "Audio.h"
#include "Defs.h"
#include "Module.h"
#include "Types.h"

/*****************/
/* Private types */
/*****************/

/**********************/
/* Private prototypes */
/**********************/

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

/*********************/
/* Private constants */
/*********************/

/********************/
/* Public functions */
/********************/

/******	Audio_SWIOpenStream() **********************************************

Purpose:	Handles MPEGAudio_OpenStream
In:		Control stream flags; control stream handle; audio parameters
		structure; address to write audio stream handle into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWIOpenStream (stream_flags_t *flags, control_stream_handle_t csh, audio_parameters_structure_t *aps, stream_handle_t *return_ash)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(csh);
  IGNORE(aps);
  IGNORE(return_ash);
  Stream.discarded_audio_bit_buffer_data = -1; /* flag that VID_ABL should be read in Audio_ResetStream */
  return e;
}

/******	Audio_SWIFullPackets() *********************************************

Purpose:	Handles MPEGAudio_FullPackets
In:		Flags; audio stream handle; list of bitstream packets
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWIFullPackets (unsigned int flags, stream_handle_t ash, bitstream_packet_t *packets)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(ash);
  IGNORE(packets);
  return e;
}

/******	Audio_SWICloseStream() *********************************************

Purpose:	Handles MPEGAudio_CloseStream
In:		Flags; audio stream handle
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWICloseStream (unsigned int flags, stream_handle_t ash)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(ash);
  return e;
}

/******	Audio_SWIPlay() ****************************************************

Purpose:	Handles MPEGAudio_Play
In:		Flags; audio stream handle
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWIPlay (unsigned int flags, stream_handle_t ash)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(ash);
  return e;
}

/******	Audio_SWISetSpeed() ************************************************

Purpose:	Handles MPEGAudio_SetSpeed
In:		Flags; audio stream handle;
		speed (0 => pause, 1 => normal, 2-16 => 1/2 - 1/16th speed)
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWISetSpeed (unsigned int flags, stream_handle_t ash, unsigned int speed)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(ash);
  IGNORE(speed);
  return e;
}

/******	Audio_SWIResetStream() *********************************************

Purpose:	Handles MPEGAudio_ResetStream
In:		ResetStream flags; audio stream handle;
		address to write discarded data count into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWIResetStream (reset_stream_flags_t *flags, stream_handle_t ash, unsigned int *return_discarded_data_size)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(ash);
  IGNORE(return_discarded_data_size);
  return e;
}

/******	Audio_SWIMuteSound() ***********************************************

Purpose:	Handles MPEGAudio_MuteSound
In:		Flags (bit 0 set => mute); audio stream handle
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWIMuteSound (unsigned int flags, stream_handle_t ash)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(ash);
  return e;
}

/******	Audio_SWISoundVolume() *********************************************

Purpose:	Handles MPEGAudio_SoundVolume
In:		Flags; audio stream handle; new volume (0 => mute,
		1-256 => .5 dB ramp up to 0 dB, -1 => just read old volume);
		address to write old volume into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWISoundVolume (unsigned int flags, stream_handle_t ash, int volume, int *return_old_volume)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(ash);
  IGNORE(volume);
  IGNORE(return_old_volume);
  return e;
}

/******	Audio_SWIStats() ***************************************************

Purpose:	Handles MPEGAudio_Stats
In:		Flags; audio stream handle; pointer to tags list; buffer to
		write ino (pointer/size); address to write updated buffer
		pointer into; address to write space remaining into (may be <0)
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWIStats (unsigned int flags, stream_handle_t ash, unsigned int *tags, void *buffer, int buffer_size, void **return_pointer, int *return_buffer_remaining)
{
  _kernel_oserror *e = NULL;
  IGNORE(flags);
  IGNORE(ash);
  IGNORE(tags);
  *return_pointer = buffer;
  *return_buffer_remaining = buffer_size;
  return e;
}

/******	Audio_SWISetAudioParameters0() *************************************

Purpose:	Handles MPEGAudio_SetAudioParameters 0
In:		Audio stream handle; new mute-on-error state (or -1 just
		to read old state); address to write old state into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWISetAudioParameters0 (stream_handle_t ash, int new_state, int *return_old_state)
{
  _kernel_oserror *e = NULL;
  IGNORE(ash);
  IGNORE(new_state);
  IGNORE(return_old_state);
  return e;
}

/******	Audio_SWISetAudioParameters1() *************************************

Purpose:	Handles MPEGAudio_SetAudioParameters 1
In:		Audio stream handle; new dual-channel state (or -1 just
		to read old state); address to write old dual-channel state
		into; address to write current channel type into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *Audio_SWISetAudioParameters1 (stream_handle_t ash, dual_channel_specifier new_state, dual_channel_specifier *return_old_state, audio_channel_type *return_channel_type)
{
  _kernel_oserror *e = NULL;
  IGNORE(ash);
  IGNORE(new_state);
  IGNORE(return_old_state);
  IGNORE(return_channel_type);
  return e;
}
