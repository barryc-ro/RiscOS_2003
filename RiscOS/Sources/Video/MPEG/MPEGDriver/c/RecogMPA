/******	RecogMPA.c *********************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	MPEG audio recogniser

Copyright 2001 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
26/10/2001	BJGA	Created

***************************************************************************/

#ifdef GENERIC

/************/
/* Includes */
/************/

#include <stdlib.h>
#include <string.h>

#include "AudGeneric.h"
#include "Defs.h"
#include "Mess.h"
#include "Module.h"
#include "RecogMPA.h"

#include "VersionNum"

#include "Debug.h"
#if Debugging==1
#include "DWrite.h"
#endif

/*****************/
/* Private types */
/*****************/

typedef struct client
{
  struct client *link;
  const buffer_fns_t *buffer;
  const recogniser_fns_t *recogniser;
}
client_t;

typedef union
{
  unsigned char byte [4];
  struct
  {
    unsigned syncword1: 8;
    
    unsigned protection_bit: 1;
    unsigned layer: 2;
    unsigned ID: 2;
    unsigned syncword2: 3;
    
    unsigned private_bit: 1;
    unsigned padding_bit: 1;
    unsigned sampling_frequency: 2;
    unsigned bitrate_index: 4;

    unsigned emphasis: 2;
    unsigned original_copy: 1;
    unsigned copyright: 1;
    unsigned mode_extension: 2;
    unsigned mode: 2;
  } fields;
}
audio_header_t;

typedef struct candidate
{
  struct candidate *next;
  unsigned int locks;
  audio_header_t first_header;
  audio_header_t latest_header;
  unsigned int frame_length;
  int next_index;
}
candidate_t;

typedef struct
{
  client_t *client;
  void *client_handle;
  candidate_t *candidates;
  int byte_index;
  union
  {
    unsigned int word [2];
    unsigned char byte [8];
  }
  buffer;
  unsigned int buffer_offset;
  bool recognised;
  audio_header_t result;
  unsigned int result_bitrate;
  unsigned int result_samplerate;
}
session_t;

/**********************/
/* Private prototypes */
/**********************/

static void static_CalculateNextIndex (candidate_t *candidate, unsigned int current_index);

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

static client_t TopLevel; /* This is where the top-level recogniser's function pointers would go */
static client_t *Clients = NULL;

/*********************/
/* Private constants */
/*********************/

#define SYNC_REPEATS_NEEDED_TO_LOCK (3) /* 1 in 2^33 = 1 in 8 billion chance of false positive */
#define MAX_FRAME_LENGTH (2880)

static const unsigned short BitRate [2][3][16] =
{
  /* MPEG-1 layers I-III */
  {
    { 0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 0 },
    { 0, 32, 48, 56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, 384, 0 },
    { 0, 32, 40, 48,  56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, 0 }
  },
  /* MPEG-2/2.5 layers I-III */
  {
    { 0, 32, 48, 56,  64,  80,  96, 112, 128, 144, 160, 176, 192, 224, 256, 0 },
    { 0,  8, 16, 24,  32,  40,  48,  56,  64,  80,  96, 112, 128, 144, 160, 0 },
    { 0,  8, 16, 24,  32,  40,  48,  56,  64,  80,  96, 112, 128, 144, 160, 0 }
  }
};

static const unsigned short SampleRate [4][3] =
{
  /* MPEG-2.5 */
  { 11025, 12000,  8000 },
  /* unused */
  {     0,     0,     0 },
  /* MPEG-2 */
  { 22050, 24000, 16000 },
  /* MPEG-1 */
  { 44100, 48000, 32000 }
};

static const unsigned short FrameLength [3][3][16][3] =
{
  {
    {
      /* MPEG-1 layer I */
      /* sampling rate   44100     48000     32000 */
      {                      0,        0,        0 },
      {                     32,       32,       48 },
      {                     68,       64,       96 },
      {                    104,       96,      144 },
      {                    136,      128,      192 },
      {                    172,      160,      240 },
      {                    208,      192,      288 },
      {                    240,      224,      336 },
      {                    276,      256,      384 },
      {                    312,      288,      432 },
      {                    348,      320,      480 },
      {                    380,      352,      528 },
      {                    416,      384,      576 },
      {                    452,      416,      624 },
      {                    484,      448,      672 },
      {                      0,        0,        0 }
    },
    {
      /* MPEG-1 layer II */
      /* sampling rate   44100     48000     32000 */
      {                      0,        0,        0 },
      {                    104,       96,      144 },
      {                    156,      144,      216 },
      {                    182,      168,      252 },
      {                    208,      192,      288 },
      {                    261,      240,      360 },
      {                    313,      288,      432 },
      {                    365,      336,      504 },
      {                    417,      384,      576 },
      {                    522,      480,      720 },
      {                    626,      576,      864 },
      {                    731,      672,     1008 },
      {                    835,      768,     1152 },
      {                   1044,      960,     1440 },
      {                   1253,     1152,     1728 },
      {                      0,        0,        0 }
    },
    {
      /* MPEG-1 layer III */
      /* sampling rate   44100     48000     32000 */
      {                      0,        0,        0 },
      {                    104,       96,      144 },
      {                    130,      120,      180 },
      {                    156,      144,      216 },
      {                    182,      168,      252 },
      {                    208,      192,      288 },
      {                    261,      240,      360 },
      {                    313,      288,      432 },
      {                    365,      336,      504 },
      {                    417,      384,      576 },
      {                    522,      480,      720 },
      {                    626,      576,      864 },
      {                    731,      672,     1008 },
      {                    835,      768,     1152 },
      {                   1044,      960,     1440 },
      {                      0,        0,        0 }
    }
  },
  {
    {
      /* MPEG-2 layer I */
      /* sampling rate   22050     24000     16000 */
      {                      0,        0,        0 },
      {                     68,       64,       96 },
      {                    104,       96,      144 },
      {                    120,      112,      168 },
      {                    136,      128,      192 },
      {                    172,      160,      240 },
      {                    208,      192,      288 },
      {                    240,      224,      336 },
      {                    276,      256,      384 },
      {                    312,      288,      432 },
      {                    348,      320,      480 },
      {                    380,      352,      528 },
      {                    416,      384,      576 },
      {                    484,      448,      672 },
      {                    556,      512,      768 },
      {                      0,        0,        0 }
    },
    {
      /* MPEG-2 layer II */
      /* sampling rate   22050     24000     16000 */
      {                      0,        0,        0 },
      {                     52,       48,       72 },
      {                    104,       96,      144 },
      {                    156,      144,      216 },
      {                    208,      192,      288 },
      {                    261,      240,      360 },
      {                    313,      288,      432 },
      {                    365,      336,      504 },
      {                    417,      384,      576 },
      {                    522,      480,      720 },
      {                    626,      576,      864 },
      {                    731,      672,     1008 },
      {                    835,      768,     1152 },
      {                    940,      864,     1296 },
      {                   1044,      960,     1440 },
      {                      0,        0,        0 }
    },
    {
      /* MPEG-2 layer III */
      /* sampling rate   22050     24000     16000 */
      {                      0,        0,        0 },
      {                     26,       24,       36 },
      {                     52,       48,       72 },
      {                     78,       72,      108 },
      {                    104,       96,      144 },
      {                    130,      120,      180 },
      {                    156,      144,      216 },
      {                    182,      168,      252 },
      {                    208,      192,      288 },
      {                    261,      240,      360 },
      {                    313,      288,      432 },
      {                    365,      336,      504 },
      {                    417,      384,      576 },
      {                    470,      432,      648 },
      {                    522,      480,      720 },
      {                      0,        0,        0 }
    }
  },
  {
    {
      /* MPEG-2.5 layer I */
      /* sampling rate   11025     12000      8000 */
      {                      0,        0,        0 },
      {                    136,      128,      192 },
      {                    208,      192,      288 },
      {                    240,      224,      336 },
      {                    276,      256,      384 },
      {                    348,      320,      480 },
      {                    416,      384,      576 },
      {                    484,      448,      672 },
      {                    556,      512,      768 },
      {                    624,      576,      864 },
      {                    696,      640,      960 },
      {                    764,      704,     1056 },
      {                    832,      768,     1152 },
      {                    972,      896,     1344 },
      {                   1112,     1024,     1536 },
      {                      0,        0,        0 }
    },
    {
      /* MPEG-2.5 layer II */
      /* sampling rate   11025     12000      8000 */
      {                      0,        0,        0 },
      {                    104,       96,      144 },
      {                    208,      192,      288 },
      {                    313,      288,      432 },
      {                    417,      384,      576 },
      {                    522,      480,      720 },
      {                    626,      576,      864 },
      {                    731,      672,     1008 },
      {                    835,      768,     1152 },
      {                   1044,      960,     1440 },
      {                   1253,     1152,     1728 },
      {                   1462,     1344,     2016 },
      {                   1671,     1536,     2304 },
      {                   1880,     1728,     2592 },
      {                   2089,     1920,     2880 },
      {                      0,        0,        0 }
    },
    {
      /* MPEG-2.5 layer III */
      /* sampling rate   11025     12000      8000 */
      {                      0,        0,        0 },
      {                     52,       48,       72 },
      {                    104,       96,      144 },
      {                    156,      144,      216 },
      {                    208,      192,      288 },
      {                    261,      240,      360 },
      {                    313,      288,      432 },
      {                    365,      336,      504 },
      {                    417,      384,      576 },
      {                    522,      480,      720 },
      {                    626,      576,      864 },
      {                    731,      672,     1008 },
      {                    835,      768,     1152 },
      {                    940,      864,     1296 },
      {                   1044,      960,     1440 },
      {                      0,        0,        0 }
    }
  }
};

/********************/
/* Public functions */
/********************/

/******	RecogMPA_Init() ****************************************************

Purpose:	Initialise recogniser non-stream-specifically
Out:		Error pointer if we can't initialise

***************************************************************************/

_kernel_oserror *RecogMPA_Init (void)
{
  _kernel_oserror *e = NULL;
  /* In a real PRISM protocol module, we'd register with the top-level recogniser module */
  IGNORE (TopLevel);
  return e;
}

/******	RecogMPA_Final() ***************************************************

Purpose:	Finalise
Out:		Error pointer if we can't finalise

***************************************************************************/

_kernel_oserror *RecogMPA_Final (void)
{
  _kernel_oserror *e = NULL;
  client_t *ptr;
  client_t *next;
  /* In a real PRISM protocol module, we'd deregister with the top-level recogniser module */
  for (ptr = Clients; ptr != NULL; ptr = next)
  {
    next = ptr->link;
    free (ptr);
  }
  Clients = NULL;
  return e;
}

/******	RecogMPA_RegisterCharacterisationClient() **************************

Purpose:	A module other than the top-level recogniser is registering
		its interest in the protocol module's services, for the
		purpose of stream characterisation
In:		Flags; buffer and recogniser callback function structures
Out:		Error pointer; handle for client to use when calling RecogMPA_Establish

***************************************************************************/

_kernel_oserror *RecogMPA_RegisterCharacterisationClient (unsigned int flags, const buffer_fns_t *buffer, const recogniser_fns_t *recogniser, void **client)
{
  _kernel_oserror *e = NULL;
  client_t *newclient = malloc (sizeof (client_t));
  IGNORE (flags);
  if (newclient == NULL)
  {
    e = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
  }
  if (!e)
  {
    newclient->link = Clients;
    Clients = newclient;
    newclient->buffer = buffer;
    newclient->recogniser = recogniser;
    *client = newclient;
  }
  return e;
}

/******	RecogMPA_DeregisterCharacterisationClient() ************************

Purpose:	Reverses the effect of RecogMPA_RegisterCharacterisationClient()
In:		Flags; client handle
Out:		Error pointer

***************************************************************************/

_kernel_oserror *RecogMPA_DeregisterCharacterisationClient (unsigned int flags, void *client)
{
  _kernel_oserror *e = NULL;
  client_t *ptr;
  client_t *prev = NULL;
  IGNORE (flags);
  for (ptr = Clients; ptr != NULL; prev = ptr, ptr = ptr->link)
  {
    if (ptr == client)
    {
      if (prev == NULL)
      {
        Clients = ptr->link;
      }
      else
      {
        prev->link = ptr->link;
      }
      break;
    }
  }
  free (client);
  return e;
}

/******	RecogMPA_Establish() ***********************************************

Purpose:	Stream initialisation
In:		Flags; handle of client to receive callbacks; client's handle
Out:		Error pointer; handle for client to use when calling us (session ID)

***************************************************************************/

_kernel_oserror *RecogMPA_Establish (unsigned int flags, void *client, void *handle, void **session_id)
{
  _kernel_oserror *e = NULL;
  session_t *newsession = malloc (sizeof (session_t));
  IGNORE (flags);
  if (newsession == NULL)
  {
    e = Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
  }
  if (!e)
  {
    newsession->client = client;
    newsession->client_handle = handle;
    *session_id = newsession;
  }
  return e;
}

/******	RecogMPA_Annul() ***************************************************

Purpose:	Stream finalisation
In:		Flags; session ID
Out:		Error pointer

***************************************************************************/

_kernel_oserror *RecogMPA_Annul (unsigned int flags, void *session_id)
{
  session_t *session = session_id;
  _kernel_oserror *e = NULL;
  IGNORE (flags);
  free (session);
  return e;
}

/******	RecogMPA_Commence() ************************************************

Purpose:	Stream segment initialisation
In:		Flags; session ID
Out:		Error pointer

***************************************************************************/

_kernel_oserror *RecogMPA_Commence (unsigned int flags, void *session_id)
{
  session_t *session = session_id;
  _kernel_oserror *e = NULL;
  IGNORE (flags);
  session->candidates = NULL;
  session->byte_index = -4; /* we never identify any header until we have all 4 bytes */
  session->buffer.word[0] = 0;
  session->buffer_offset = 0;
  session->recognised = false;
  return e;
}

/******	RecogMPA_Discontinue() *********************************************

Purpose:	Stream segment finalisation
In:		Flags; session ID
Out:		Error pointer

***************************************************************************/

_kernel_oserror *RecogMPA_Discontinue (unsigned int flags, void *session_id)
{
  session_t *session = session_id;
  _kernel_oserror *e = NULL;
  candidate_t *ptr;
  candidate_t *next;
  IGNORE (flags);
  for (ptr = session->candidates; ptr != NULL; ptr = next)
  {
    next = ptr->next;
    free (ptr);
  }
  return e;
}

/******	RecogMPA_ReadSystemInfo() ******************************************

Purpose:	Return stream-agnostic information
In:		Tag word
Out:		Error pointer; value associated with tag

***************************************************************************/

_kernel_oserror *RecogMPA_ReadSystemInfo (unsigned int tag, unsigned int *result)
{
  _kernel_oserror *e = NULL;
  switch (tag)
  {
    case 0:
      *result = (unsigned int) "MPEG Audio recogniser";
      break;
    case 1:
      *result = 0;
      break;
    case 2:
      *result = (unsigned int) Module_ComponentName " " Module_HelpVersion;
      break;
    case 3:
      *result = Module_Version;
      break;
    default:
      e = Mess_GenerateError ("Err_UkTag", errno_UK_TAG, 0);
      break;
  }
  return e;
}

/******	RecogMPA_DataAvailable() *******************************************

Purpose:	Notification that data has arrived in a hitherto empty buffer
In:		Flags; session ID
Out:		Error pointer

***************************************************************************/

_kernel_oserror *RecogMPA_DataAvailable (unsigned int flags, void *session_id)
{
  session_t *session = session_id;
  _kernel_oserror *e = NULL;
  IGNORE (flags);
  session->client->buffer->givemedata (0 /* no PES wrapping */, session->client_handle);
  return e;
}

/******	RecogMPA_ConsumeData() *********************************************

Purpose:	Accept contiguous data block (called multiple times in response to givemedata())
In:		Flags; session ID; start/length pair
Out:		Error pointer; amount of the block that was not used and should be queued (always 0 for recognisers)

***************************************************************************/

_kernel_oserror *RecogMPA_ConsumeData (unsigned int flags, void *session_id, const unsigned char *start, unsigned int length, unsigned int *not_consumed)
{
  session_t *session = session_id;
  _kernel_oserror *e = NULL;
  bool header_found;
  IGNORE (flags);
  while (length != 0)
  {
    session->buffer.byte[session->buffer_offset++] = *start++; /* copy byte to our rolling buffer */
    length--;
    session->buffer.word[1] = session->buffer.word[0]; /* repeating word makes reading bytes easier */
    session->buffer_offset &= 3; /* loop rolling buffer pointer */
    session->byte_index++;
    header_found = (session->buffer.byte[session->buffer_offset] == 0xFF && (session->buffer.byte[session->buffer_offset+1] & 0xE0) == 0xE0);
    /* Check no fields in the new header have forbidden/reserved values */
    if (header_found)
    {
      if ((session->buffer.byte[session->buffer_offset+1] & 0x18) == 0x08 ||
          (session->buffer.byte[session->buffer_offset+1] & 0x06) == 0x00 || /* pretend AAC doesn't exist for now! */
          (session->buffer.byte[session->buffer_offset+2] & 0xF0) == 0xF0 ||
          (session->buffer.byte[session->buffer_offset+2] & 0x0C) == 0x0C)
      {
        header_found = false;
      }
    }
    /* Check outstanding candidates */
    {
      candidate_t *prev = NULL;
      candidate_t *ptr = session->candidates;
      candidate_t *next;
      for (; ptr != NULL; prev = ptr, ptr = next)
      {
        next = ptr->next;
        if (ptr->next_index == session->byte_index)
        {
          if (header_found)
          {
            /* Encouraging... */
            ptr->locks++;
            if (ptr->locks == SYNC_REPEATS_NEEDED_TO_LOCK)
            {
              /* Hooray, we've recognised the stream - note what we need, free all candidates, and exit */
              session->result = ptr->first_header;
              session->result_bitrate = BitRate [session->result.fields.ID != 3] [3 - session->result.fields.layer] [session->result.fields.bitrate_index];
              session->result_samplerate = SampleRate [session->result.fields.ID] [session->result.fields.sampling_frequency];
              session->recognised = true;
              for (ptr = session->candidates; ptr != NULL; ptr = next)
              {
                next = ptr->next;
                free (ptr);
              }
              session->candidates = NULL;
              session->client->recogniser->streamrecognised (1, session->client_handle);
              *not_consumed = 0;
              return NULL;
            }
            else
            {
              /* Look for another one */
              /* Distance to next frame may be different, so recalculate */
              memcpy (ptr->latest_header.byte, session->buffer.byte + session->buffer_offset, 4);
              static_CalculateNextIndex (ptr, session->byte_index);
            }
          }
          else
          {
            /* This candidate was bogus - remove it */
            if (prev == NULL)
            {
              session->candidates = next;
            }
            else
            {
              prev->next = next;
            }
            free (ptr);
            ptr = prev;
          }
        }
      }
    }
    /* If we're still in range of the start of the stream and we have a new header, create a new candidate */
    if (header_found && session->byte_index < MAX_FRAME_LENGTH)
    {
      candidate_t *newcandidate = malloc (sizeof (candidate_t));
      if (newcandidate != NULL)
      {
        newcandidate->locks = 0;
        memcpy (newcandidate->first_header.byte, session->buffer.byte + session->buffer_offset, 4);
        newcandidate->latest_header = newcandidate->first_header;
        static_CalculateNextIndex (newcandidate, session->byte_index);
        newcandidate->next = session->candidates;
        session->candidates = newcandidate;
      }
    }
    /* If we're out of range and there are no candidates left, we've failed */
    if (session->candidates == NULL && session->byte_index >= MAX_FRAME_LENGTH)
    {
      session->byte_index = -4;
      session->buffer.word[0] = 0;
      session->buffer_offset = 0;
      session->client->recogniser->streamrecognised (0, session->client_handle);
      *not_consumed = 0;
      return NULL;
    }
  }
  *not_consumed = 0;
  return e;
}

static void static_CalculateNextIndex (candidate_t *candidate, unsigned int current_index)
{
  static const unsigned int mpeg_version_from_ID [4] = { 2, 0, 1, 0 };
  candidate->frame_length = FrameLength [mpeg_version_from_ID [candidate->latest_header.fields.ID]]
                                        [3 - candidate->latest_header.fields.layer]
                                        [candidate->latest_header.fields.bitrate_index]
                                        [candidate->latest_header.fields.sampling_frequency];
  candidate->next_index = current_index + candidate->frame_length +
      (candidate->latest_header.fields.padding_bit ? ((candidate->latest_header.fields.layer == 3) ? 4 : 1) : 0);
}

/******	RecogMPA_ReadFullness() ********************************************

Purpose:	Return amount of data currently buffered (always 0 for recognisers)
In:		Flags; session ID
Out:		Error pointer; amount buffered

***************************************************************************/

_kernel_oserror *RecogMPA_ReadFullness (unsigned int flags, void *session_id, unsigned int *occupancy)
{
  _kernel_oserror *e = NULL;
  IGNORE (flags);
  IGNORE (session_id);
  *occupancy = 0;
  return e;
}

/******	RecogMPA_ReadStreamInfo() ******************************************

Purpose:	Return stream information
In:		Flags; session ID
Out:		Error pointer; amount buffered

***************************************************************************/

_kernel_oserror *RecogMPA_ReadStreamInfo (void *session_id, unsigned int tag, unsigned int *result)
{
  session_t *session = session_id;
  _kernel_oserror *e = NULL;
  static const char full_encoding_name [4][3][20] =
  {
    { "MPEG-2.5 Layer I", "MPEG-2.5 Layer II", "MPEG-2.5 Layer III" },
    { "",                 "",                  ""                   },
    { "MPEG-2 Layer I",   "MPEG-2 Layer II",   "MPEG-2 Layer III"   },
    { "MPEG-1 Layer I",   "MPEG-1 Layer II",   "MPEG-1 Layer III"   }
  };
  static const char short_encoding_name [4][12] = { "MPEG-2.5", "", "MPEG-2", "MPEG-1" };
  if (session->recognised)
  {
    switch (tag)
    {
      case 0:
        *result = (unsigned int) full_encoding_name [session->result.fields.ID] [3 - session->result.fields.layer];
        break;
      case 1:
        *result = (unsigned int) short_encoding_name [session->result.fields.ID];
        break;
      case 2:
        *result = session->result_samplerate;
        break;
      case 3:
        *result = session->result_bitrate;
        break;
      case 4:
        *result = (session->result.fields.mode == 3) ? 1 : 2;
        break;
      case 5:
        *result = 0;
        break;
      case 6:
        *result = 0;
        break;
      case 7:
        *result = (session->result.fields.mode == 2) ? 1 : 0;
        break;
      case 8:
        *result = session->result.fields.copyright;
        break;
      case 9:
        *result = session->result.fields.original_copy;
        break;
      default:
        e = Mess_GenerateError ("Err_UkTag", errno_UK_TAG, 0);
        break;
    }
  }
  else
  {
    e = Mess_GenerateError ("Err_NoInfo", errno_NO_INFO, 0);
  }
  return e;
}

#else
extern int RecogMPA_NotUsed;
#endif
