/******	Stuffing.c *********************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	Compressed data stuffing
		PES header reconstitution
		Sync-to-stream management

Copyright 1999-2000 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
06/10/1999	BJGA	Created
22/10/1999	BJGA	Changed in line with Hdr:MPEG2cCard
05/11/1999	BJGA	Implemented freeing of packets after they're sent to the 3520
24/11/1999	BJGA	Bugfix to allow video play-out to function
13/12/1999	BJGA	Added support for MiscAsm_Stuff (ie 16- and 32-bit writes);
			initial attempt at audio stuffing
25/01/2000	BJGA	Calls SWI MPEGControl_Play when audio buffer reaches prefill threshold
10/04/2000	BJGA	Implemented PES header reconstruction and timestamp reinsertion;
			implemented audio sync-to-stream;
			implemented new deferred set-speed code (which will work in either direction);
			added code to stop audio decoding after an underrun until a minimal buffer level is attained
11/05/2000	BJGA	Audio buffer now re-tested every 1/10 sec rather than every 1/2 sec;
			quick-prefilling of trick-play streams implemented, by setting prefill size to buffer
			occupation when the second PTS is encoded; byte counters made 64 bits wide; sync-to-stream
			disabled while video is playing out; audio fasts/slows smoothed out to fill the time between
			tests, rather than being compressed into a single-frame "warble"
18/05/2000	BJGA	Issues UpCall_MPEG &1003 when the video speed indicator changes
20/06/2000	BJGA	Reverted to the "backwards compatible" video PTS mechanism because the 3520's video PES parser
			seems unable to reliably parse some of our MPEG streams (generally those where pictures aren't
			aligned with PES packets) - this consists of maintaining a PTS/byte-index list in software
14/07/2000	BJGA	Removed lower limit on video buffer threshold in trick play mode

***************************************************************************/

/************/
/* Includes */
/************/

#include "swis.h"

#include "Global/RISCOS.h"
#include "Global/SWIs.h"
#include "Global/UpCall.h"
#include "DebugLib/DebugLib.h"
#include "MPEG/MPEGCtrl.h"
#include "MPEG/MPEG2cCard.h"
#include "MPEG/UpCallMPEG.h"

#include "Defs.h"
#include "IRQ.h"
#include "MiscAsm.h"
#include "ModHdr.h"
#include "Module.h"
#include "STi3520L.h"
#include "Stuffing.h"
#include "Types.h"
#include "Registers.h"

/*****************/
/* Private types */
/*****************/

typedef struct
{
  unsigned packet_start_code_prefix : 24;  /* 000000000000000000000001 */
  unsigned stream_id                : 8;   /* 0xE0 for video, 0xC0 for audio */
  
  unsigned PES_packet_length_15_8   : 8;
  unsigned PES_packet_length_7_0    : 8;
  unsigned flags                    : 14;  /* 10000000xx000000 */
  unsigned PTS_DTS_flags            : 2;   /* 0 for neither, 2 for PTS only, 3 for PTS and DTS */
  
  unsigned PES_header_data_length   : 8;   /* 0 for neither, 5 for PTS only, 10 for PTS and DTS */
  unsigned marker_bit1              : 1;   /* 1 */
  unsigned PTS_32_30                : 3;
  unsigned PTS_marker_bits          : 4;   /* 2 for PTS only, 3 for PTS and DTS */
  unsigned PTS_29_22                : 8;
  unsigned marker_bit2              : 1;   /* 1 */
  unsigned PTS_21_15                : 7;
  
  unsigned PTS_14_7                 : 8;
  unsigned marker_bit3              : 1;   /* 1 */
  unsigned PTS_6_0                  : 7;
  unsigned marker_bit4              : 1;   /* 1 */
  unsigned DTS_32_30                : 3;
  unsigned DTS_marker_bits          : 4;   /* 1 when DTS is present */
  unsigned DTS_29_22                : 8;
  
  unsigned marker_bit5              : 1;   /* 1 */
  unsigned DTS_21_15                : 7;
  unsigned DTS_14_7                 : 8;
  unsigned marker_bit6              : 1;   /* 1 */
  unsigned DTS_6_0                  : 7;
}
PES_header_t;

/**********************/
/* Private prototypes */
/**********************/

static void static_InsertPESHeader (a_v_state_t *av, bitstream_packet_t *private_packet, unsigned char stream_id);

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

static bool video_callback_requested = false;
static bool audio_callback_requested = false;
static PES_header_t audio_PES_header;
static bitstream_packet_t audio_PES_header_packet = { NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 0, 0, 0, 0, 1 };

/*********************/
/* Private constants */
/*********************/

#define TIME_TO_WAIT_BEFORE_RETESTING_AUDIO_BUFFER_FULLNESS (10) /* centiseconds */
#define STREAM_ID_VIDEO (0xE0)
#define STREAM_ID_AUDIO (0xC0)

/********************/
/* Public functions */
/********************/

/******	Stuffing_StuffVideo() **********************************************

Purpose:	TickerV entry for video stuffing

***************************************************************************/

void Stuffing_StuffVideo (void)
{
  if (!video_callback_requested)
  {
    if (Stream.s_flags.use_callbacks)
    {
      if (NULL == _swix (OS_AddCallBack, _INR(0,1), video_stuffing_callback, Module_PrivateWord))
      {
        video_callback_requested = true;
      }
    }
    else
    {
      video_callback_requested = true;
      Stuffing_VideoCallback ();
    }
  }
}

/******	Stuffing_VideoCallback() *******************************************

Purpose:	Callback entry for video stuffing

***************************************************************************/

void Stuffing_VideoCallback (void)
{
  bool irqs_were_disabled = _kernel_irqs_disabled ();
  int space_in_bit_buffer;
  unsigned int bytes_to_send_this_time;
  
  /* Enable interrupts for the duration */
  if (irqs_were_disabled) _kernel_irqs_on ();
  
  if (Stream.video.state == stream_prefilling || Stream.video.state == stream_open || Stream.video.state == stream_closing)
  {
    /* Calculate the minimum possible space available in the video bit buffer */
    /* bearing in mind that VID_VBL is rounded down to the nearest 2 kilobit boundary */
    space_in_bit_buffer = (SDRAM_VIDEO_BIT_BUFFER_END - SDRAM_VIDEO_BIT_BUFFER_START) - ((VID_VBL & 0x3FFF) * 256 + 256);
    
    while (Stream.video.packet_list_head != NULL && space_in_bit_buffer > 0)
    {
      if (Stream.video.packet_list_head->mpeg_start)
      {
        if (Stream.video.state == stream_prefilling && Stream.video.prefill_state == ps_initialising && Stream.video.packet_list_head->PTS_valid)
        {
          /* Store the last PTS received before the first sequence header */
          Stream.video.first_PTS.msb = Stream.video.packet_list_head->PTS.msb & 1;
          Stream.video.first_PTS.lsw = Stream.video.packet_list_head->PTS.lsw;
        }
        if (Stream.video.state == stream_prefilling && Stream.video.prefill_state == ps_pre_decoding && Stream.rs_flags.trick_play_mode)
        {
          if (Stream.video.packet_list_head->PTS_valid && Stream.video.packet_list_head->PTS.lsw != Stream.video.first_PTS.lsw)
          {
            unsigned int prefill = (VID_VBL & 0x3FFF);
            /* A second, differing, PTS has been received in a trick-play stream: we can terminate prefilling early */
            WRITE_VID_VBT(prefill); /* may cause interrupts to go off */
          }
        }
        /* Pretend that we're sending a new PES packet */
        /* (The crappy PES parser in the 3520 can't cope with all streams!) */
        Stream.video.since_open.PES_packets_sent ++;
        Stream.video.since_reset.PES_packets_sent ++;
        if (Stream.video.packet_list_head->PTS_valid)
        {
          unsigned int next_write_ptr = (Stream.video_PTS_write_ptr + 1) % PTS_LIST_SIZE;
          if (next_write_ptr != Stream.video_PTS_read_ptr) /* mustn't fill up completely, because that's indistinguishable from empty */
          {
            dprintf (("Stuffing", "Inserting video PTS %c%08X\n",
                Stream.video.packet_list_head->PTS.msb ? '1' : '0', Stream.video.packet_list_head->PTS.lsw));
            Stream.video.since_open.PTSs_in ++;
            Stream.video.since_reset.PTSs_in ++;
            READ_VID_CDcount(Stream.video_PTS_queue[Stream.video_PTS_write_ptr].count); /* already only 24 bits */
            Stream.video_PTS_queue[Stream.video_PTS_write_ptr].PTS = Stream.video.packet_list_head->PTS;
            Stream.video_PTS_write_ptr = next_write_ptr;
          }
        }
      }
      
      bytes_to_send_this_time = MIN(space_in_bit_buffer, Stream.video.packet_list_head->length);
      
      MiscAsm_Stuff ((void *) (MPEG_Base_Address + Offset_MPEG_Video_Data_Write_32), Stream.video.packet_list_head->start, bytes_to_send_this_time);
      
      Stream.video.packet_list_head->start += bytes_to_send_this_time;
      Stream.video.packet_list_head->length -= bytes_to_send_this_time;
      if (Stream.video.packet_list_head->private_PES_header_flag == false) /* don't count the PES headers in the amount that we've sent to the chip */
      {
        unsigned int old_value;
        
        old_value = Stream.video.since_open.amount_sent.lsw;
        Stream.video.since_open.amount_sent.lsw += bytes_to_send_this_time;
        if (Stream.video.since_open.amount_sent.lsw < old_value) Stream.video.since_open.amount_sent.msw ++;
        
        old_value = Stream.video.since_reset.amount_sent.lsw;
        Stream.video.since_reset.amount_sent.lsw += bytes_to_send_this_time;
        if (Stream.video.since_reset.amount_sent.lsw < old_value) Stream.video.since_reset.amount_sent.msw ++;
      }
      space_in_bit_buffer -= bytes_to_send_this_time;
      
      if (Stream.video.packet_list_head->length == 0) Stuffing_FreePacket (&Stream.video);
    }
  }
  
  /* Clear up and exit */
  video_callback_requested = false;
  if (irqs_were_disabled) _kernel_irqs_off ();
}

/******	Stuffing_StuffAudio() **********************************************

Purpose:	TickerV entry for audio stuffing

***************************************************************************/

void Stuffing_StuffAudio (void)
{
  if (!audio_callback_requested)
  {
    if (Stream.s_flags.use_callbacks)
    {
      if (NULL == _swix (OS_AddCallBack, _INR(0,1), audio_stuffing_callback, Module_PrivateWord))
      {
        audio_callback_requested = true;
      }
    }
    else
    {
      audio_callback_requested = true;
      Stuffing_AudioCallback ();
    }
  }
}

/******	Stuffing_AudioCallback() *******************************************

Purpose:	Callback entry for audio stuffing

***************************************************************************/

void Stuffing_AudioCallback (void)
{
  bool irqs_were_disabled = _kernel_irqs_disabled ();
  int total_audio_queueing;
  int space_in_bit_buffer;
  unsigned int bytes_to_send_this_time;
  
  /* Enable interrupts for the duration */
  if (irqs_were_disabled) _kernel_irqs_on ();
  
  if (Stream.audio.state == stream_prefilling || Stream.audio.state == stream_open || Stream.audio.state == stream_closing)
  {
    /* Calculate the minimum possible space available in the audio bit buffer */
    /* bearing in mind that VID_ABL is rounded down to the nearest 2 kilobit boundary */
    space_in_bit_buffer = (SDRAM_AUDIO_BIT_BUFFER_END - SDRAM_AUDIO_BIT_BUFFER_START) - ((VID_ABL & 0x3FFF) * 256 + 256);
    
    while (Stream.audio.packet_list_head != NULL && space_in_bit_buffer > 0)
    {
      if (Stream.audio.packet_list_head->mpeg_start)
      {
        if (Stream.audio.state == stream_prefilling && (Stream.audio.first_PTS.msb & 0xFE) && Stream.audio.packet_list_head->PTS_valid)
        {
          /* Store only the first PTS received */
          Stream.audio.first_PTS.msb = Stream.audio.packet_list_head->PTS.msb & 1;
          Stream.audio.first_PTS.lsw = Stream.audio.packet_list_head->PTS.lsw;
        }
        /* Insert PES header into bitstream packet list */
        audio_PES_header_packet.start = (unsigned char *) &audio_PES_header;
        static_InsertPESHeader (&Stream.audio, &audio_PES_header_packet, STREAM_ID_AUDIO);
      }
      
      bytes_to_send_this_time = MIN(space_in_bit_buffer, Stream.audio.packet_list_head->length);
      
      MiscAsm_Stuff ((void *) (MPEG_Base_Address + Offset_MPEG_Audio_Data_Write_32), Stream.audio.packet_list_head->start, bytes_to_send_this_time);
      
      Stream.audio.packet_list_head->start += bytes_to_send_this_time;
      Stream.audio.packet_list_head->length -= bytes_to_send_this_time;
      if (Stream.audio.packet_list_head->private_PES_header_flag == false) /* don't count the PES headers in the amount that we've sent to the chip */
      {
        unsigned int old_value;
        
        old_value = Stream.audio.since_open.amount_sent.lsw;
        Stream.audio.since_open.amount_sent.lsw += bytes_to_send_this_time;
        if (Stream.audio.since_open.amount_sent.lsw < old_value) Stream.audio.since_open.amount_sent.msw ++;
        
        old_value = Stream.audio.since_reset.amount_sent.lsw;
        Stream.audio.since_reset.amount_sent.lsw += bytes_to_send_this_time;
        if (Stream.audio.since_reset.amount_sent.lsw < old_value) Stream.audio.since_reset.amount_sent.msw ++;
      }
      space_in_bit_buffer -= bytes_to_send_this_time;
      
      if (Stream.audio.packet_list_head->length == 0) Stuffing_FreePacket (&Stream.audio);
    }
    
    /* Now test for the various audio buffer thresholds */
    total_audio_queueing = ((VID_ABL & 0x3FFF) * 256) + (Stream.audio.since_reset.amount_received.lsw - Stream.audio.since_reset.amount_sent.lsw);
    
    /* If we've reached prefill buffer-fullness, tell control unit so */
    if (Stream.audio.state == stream_prefilling && Stream.audio.prefill_state == ps_initialising && total_audio_queueing > Stream.audio_buffer_prefill)
    {
      /* Update state machine */
      Stream.audio.prefill_state = ps_waiting_for_play_command;
      dprintf (("Stuffing", "AudioCallback: audio.prefill_state = waiting_for_play_command\n"));
      /* Note, we may be re-entered via SWI MPEGAudio_Play at this point */
      _swix (MPEGControl_Play, _INR(0,1), StreamFlags_AudioPresent, Stream.csh);
    }
    
    /* Deal with audio-to-stream synchronisation */
    if (Stream.audio.state == stream_open && (Stream.video.state == stream_open || !Stream.rs_flags.video_present)
        && Stream.s_flags.sync_to_stream && Stream.audio.speed_indicator != 0)
    {
      if (Stream.audio_resync_delay > 0)
      {
        Stream.audio_resync_delay --;
      }
      else
      {
        if (total_audio_queueing < Stream.audio_buffer_low_water_mark)
        {
          if (Stream.audio.fast_slow_state != fss_this_frame_slow)
          {
            STi3520L_SetPCMClock ((sample_rate) Stream.audio_header.fields.sampling_frequency, false, true);
            Stream.audio.fast_slow_state = fss_this_frame_slow;
          }
          Stream.audio_resync_delay = TIME_TO_WAIT_BEFORE_RETESTING_AUDIO_BUFFER_FULLNESS * Stream.audio.speed_indicator;
          Stream.audio.since_open.slows ++;
          Stream.audio.since_reset.slows ++;
        }
        else if (total_audio_queueing > Stream.audio_buffer_high_water_mark)
        {
          if (Stream.audio.fast_slow_state != fss_this_frame_fast)
          {
            STi3520L_SetPCMClock ((sample_rate) Stream.audio_header.fields.sampling_frequency, true, false);
            Stream.audio.fast_slow_state = fss_this_frame_fast;
          }
          Stream.audio_resync_delay = TIME_TO_WAIT_BEFORE_RETESTING_AUDIO_BUFFER_FULLNESS * Stream.audio.speed_indicator;
          Stream.audio.since_open.fasts ++;
          Stream.audio.since_reset.fasts ++;
        }
        else
        {
          if (Stream.audio.fast_slow_state != fss_normal_speed)
          {
            STi3520L_SetPCMClock ((sample_rate) Stream.audio_header.fields.sampling_frequency, false, false);
            Stream.audio.fast_slow_state = fss_normal_speed;
          }
        }
      }
    }
    
    /* Deal with deferred set-speed calls */
    if ((Stream.vid_flags.going_faster && total_audio_queueing > Stream.audio_buffer_prefill) ||
        (Stream.vid_flags.going_slower && total_audio_queueing < Stream.audio_buffer_prefill))
    {
      Stream.vid_flags.going_faster = Stream.vid_flags.going_slower = false;
      if (Stream.video.speed_indicator != Stream.video.deferred_speed_indicator)
      {
        Stream.video.speed_indicator = Stream.video.deferred_speed_indicator;
        _swix (OS_UpCall, _INR(0,4), UpCall_MPEG, 0, Stream.csh, UpCallMPEG_SpeedChange, Stream.video.speed_indicator);
      }
    }
    
    /* Restart if we suffered an underrun, and we have now reached the low water mark */
    if (Stream.aud_flags.recovering_from_underrun && total_audio_queueing > Stream.audio_buffer_low_water_mark)
    {
      Stream.aud_flags.recovering_from_underrun = false;
      AUD_PLY = 1;
      IRQ_UpdateMuteState ();
    }
  }
  
  
  /* Clear up and exit */
  audio_callback_requested = false;
  if (irqs_were_disabled) _kernel_irqs_off ();
}

/******	Stuffing_FreePacket() **********************************************

Purpose:	Removes the first bistream packet from a packet list, and frees it
In:		Pointer to either Stream.video or Stream.audio
Notes:		Assumes the packet list is not empty

***************************************************************************/

void Stuffing_FreePacket (a_v_state_t *av)
{
  bitstream_packet_t *packet;
  bool irqs_were_enabled = !_kernel_irqs_disabled ();
  
  /* Disable IRQs while we mess with the packet list */
  if (irqs_were_enabled) _kernel_irqs_off ();
  
  packet = av->packet_list_head;
  /* Point list head at next packet along */
  av->packet_list_head = packet->link;
  /* If |packet| was the only one in the list, zero the list tail too */
  if (packet->link == NULL)
  {
    av->packet_list_tail = NULL;
  }
  
  /* Restore interrupts */
  if (irqs_were_enabled) _kernel_irqs_on ();
  
  /* Free the packet */
  MiscAsm_FreePacket (packet);
}

/*********************/
/* Private functions */
/*********************/

/******	static_InsertPESHeader() *******************************************

Purpose:	Inserts a special bitstream packet into the bitstream packet
		list, whose payload is the reconstructed PES header
In:		Pointer to Stream.video or Stream.audio; pointer to bitstream
		packet to use to construct PES packet header; value to use
		for the PES header stream_id field

***************************************************************************/

static void static_InsertPESHeader (a_v_state_t *av, bitstream_packet_t *private_packet, unsigned char stream_id)
{
  const static PES_header_t PES_header_PTSDTS = { 0x010000, 0, 0, 0, 0x0080, 3, 10, 1, 0, 3, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0 };
  const static PES_header_t PES_header_PTS    = { 0x010000, 0, 0, 0, 0x0080, 2,  5, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  const static PES_header_t PES_header_noTS   = { 0x010000, 0, 0, 0, 0x0080, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  bitstream_packet_t *packet = av->packet_list_head;
  PES_header_t *PES_header = (PES_header_t *) (private_packet->start);
  
  /* Don't do this all again next time! */
  packet->mpeg_start = false;
  
  /* Update PES packet statistics */
  av->since_open.PES_packets_sent ++;
  av->since_reset.PES_packets_sent ++;
  
  /* Construct the PES header and the bitstream packet descriptor (most of which is constant) */
  if (packet->DTS_valid)
  {
    *PES_header = PES_header_PTSDTS;
    PES_header->DTS_32_30 = (packet->DTS.msb << 2) | (packet->DTS.lsw >> 30);
    PES_header->DTS_29_22 = packet->DTS.lsw >> 22;
    PES_header->DTS_21_15 = packet->DTS.lsw >> 15;
    PES_header->DTS_14_7 = packet->DTS.lsw >> 7;
    PES_header->DTS_6_0 = packet->DTS.lsw >> 0;
    private_packet->length = 19; /* header is 19 bytes long in this case */
  }
  else if (packet->PTS_valid)
  {
    *PES_header = PES_header_PTS;
    private_packet->length = 14; /* header is 14 bytes long in this case */
  }
  
  if (packet->PTS_valid)
  {
    PES_header->PTS_32_30 = (packet->PTS.msb << 2) | (packet->PTS.lsw >> 30);
    PES_header->PTS_29_22 = packet->PTS.lsw >> 22;
    PES_header->PTS_21_15 = packet->PTS.lsw >> 15;
    PES_header->PTS_14_7 = packet->PTS.lsw >> 7;
    PES_header->PTS_6_0 = packet->PTS.lsw >> 0;
    av->since_open.PTSs_in ++;
    av->since_reset.PTSs_in ++;
  }
  else
  {
    *PES_header = PES_header_noTS;
    private_packet->length = 9; /* header is 9 bytes long in this case */
  }
  
  PES_header->stream_id = stream_id;
  
  if (packet->full_length_unknown || (Stream.rs_flags.trick_play_mode && Stream.video_parms.fix_lengths))
  {
    PES_header->PES_packet_length_15_8 = PES_header->PES_packet_length_7_0 = 0;
  }
  else
  {
    /* The length we want is the payload length + length of all header fields except the start code and the length field itself */
    unsigned int length = packet->full_length + private_packet->length - 6;
    PES_header->PES_packet_length_15_8 = length >> 8;
    PES_header->PES_packet_length_7_0 = length;
  }
  
  /* Insert into packet list */
  private_packet->link = packet;
  av->packet_list_head = private_packet;
}
