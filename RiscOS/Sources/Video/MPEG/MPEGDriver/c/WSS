/******	WSS.c **************************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	Line 23 WideScreen Signalling and SCART pins 8/16 support

Copyright 1999-2000 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
10/12/1999	BJGA	Created
13/12/1999	BJGA	Completed implementation
14/02/2000	BJGA	Switched to using bottom field OSD (compensates for
			3520 getting them the wrong way round!), and reversed
			order of bits within each group
02/03/2000	BJGA	Implemented all SCART signalling code
02/05/2000	BJGA	Internal settings can now be returned from WSS_Set()
			and WSS_SetSCART()
12/05/2000	BJGA	UpCall_MPEG &1000 and &1001 are now issued when the
			line 23 and SCART signals change, respectively
18/05/2000	BJGA	Uses defined symbols for UpCall_MPEG sub-reason codes

***************************************************************************/

/************/
/* Includes */
/************/

#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "swis.h"

#include "Global/RISCOS.h"
#include "Global/UpCall.h"
#include "DebugLib/DebugLib.h"
#include "MPEG/Macrovisio.h"
#include "MPEG/UpCallMPEG.h"
#include "PortMan.h"

#include "Defs.h"
#include "Module.h"
#include "Registers.h"
#include "STi3520L.h"
#include "WSS.h"

/*****************/
/* Private types */
/*****************/

/**********************/
/* Private prototypes */
/**********************/

static _kernel_oserror *static_ToggleBits (unsigned int invert_mask);

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

/* This is a copy of the contents of the 3520's OSD memory */

static unsigned char OSD_soft_copy [128] =
{
  0x00, 23,   /* start row 23 */
  0x00, 23,   /* end row 23 */
  0x00, 0x80, /* start column 128 (inclusive) */
  0x02, 0x02, /* end column 514 (inclusive) */
  
  0x00, 0x88, /* palette entry 0 = black */
  0x54, 0x88, /* palette entry 1 = dark grey */
  0xA8, 0x88, /* palette entry 2 = light grey */
  0xFC, 0x88, /* palette entry 3 = white */
  
  0x00, 0x00, /* leading black pixels to achieve 64-bit word alignment at Group 1 start */
  0x00, 0x00,
  0x3F, 0xFF, /* run-in */
  0xFF, 0xF4,
  
  0x00, 0x0B,
  0xFF, 0xF8,
  0x00, 0x07,
  0xFF, 0xF8,
  
  0x00, 0x03,
  0xFF, 0xFC,
  0x00, 0x03,
  0xFF, 0xFD,
  
  0x00, 0x02, /* start code */
  0xFF, 0xFF,
  0xF0, 0x00,
  0x0B, 0xFF,
  
  0xFF, 0xC0,
  0x00, 0x00,
  0x0B, 0xFF,
  0xFF, 0xFF,
  
  0x00, 0x00, /* Group data: default setting is all data bits set to zero */
  0xFF, 0xFF,
  0x00, 0x00,
  0xBF, 0xFF,

  0x00, 0x00,
  0xBF, 0xFF,
  0xC0, 0x00,
  0x7F, 0xFF,

  0xC0, 0x00,
  0x3F, 0xFF,
  0xC0, 0x00,
  0x3F, 0xFF,

  0xC0, 0x00,
  0x2F, 0xFF,
  0xC0, 0x00,
  0x2F, 0xFF,

  0xF0, 0x00,
  0x1F, 0xFF,
  0xF0, 0x00,
  0x0F, 0xFF,

  0xF0, 0x00,
  0x0F, 0xFF,
  0xF0, 0x00,
  0x0B, 0xFF,

  0xF0, 0x00,
  0x0B, 0xFF,
  0xFC, 0x00,
  0x07, 0xFF,

  0xFC, 0x00,
  0x00, 0x00,
  0x00, 0x00,
  0x00, 0x00,
  
  0x00, 0x00, /* this consitutes a terminator */
  0x00, 0x00, /* pad to 64-bit boundary */
  0x00, 0x00,
  0x00, 0x00
};

/* This holds the settings of b0-b13 that correspond to the current OSD */

static unsigned int b = 0;

/* This is the setting of Group bits requested by ScalingType 0 with flag bit 0 set (auto WSS).        */
/* When [0] is zero, |external_group| is used instead.                                                 */
/* [1] is always set at the same time as [0].                                                          */
/* [2] is always left at 0 (no subtitles). [3] is reserved and also left at 0.                         */

static unsigned char internal_group [4] = { 0, 0, 0, 0 };

/* This is the setting of Group bits requested via the SWI interface. |internal_group| takes           */
/* precedence over this, but this is remembered for when the stream is closed.                         */
/* When [0] is zero, OSD is disabled.                                                                  */
/* [1] cannot be accessed via the SWI, and value 1 is used (browser screens are naturally progressive) */
/* [2] is always left at 0 (no subtitles). [3] is reserved and also left at 0.                         */

static unsigned char external_group [4] = { 0, 1, 0, 0 };

/*********************/
/* Private constants */
/*********************/

/* This is a list of which bits in |OSD_soft_copy| need toggling when each bit in |b| is toggled */

static const struct
{
  unsigned int start_byte;
  unsigned int nbytes;
  unsigned char byte [5];
}
b_mask [14] =
{
  { 56 +  0, 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
  { 56 +  4, 4, { 0xFF, 0xFF, 0xFF, 0xFF } },
  { 56 +  8, 5, { 0xFF, 0xFF, 0xFF, 0xFF, 0xC0 } },
  { 56 + 12, 5, { 0x3F, 0xFF, 0xFF, 0xFF, 0xC0 } },
  { 56 + 16, 5, { 0x3F, 0xFF, 0xFF, 0xFF, 0xC0 } },
  { 56 + 20, 5, { 0x3F, 0xFF, 0xFF, 0xFF, 0xC0 } },
  { 56 + 24, 5, { 0x3F, 0xFF, 0xFF, 0xFF, 0xC0 } },
  { 56 + 28, 5, { 0x3F, 0xFF, 0xFF, 0xFF, 0xF0 } },
  { 56 + 32, 5, { 0x0F, 0xFF, 0xFF, 0xFF, 0xF0 } },
  { 56 + 36, 5, { 0x0F, 0xFF, 0xFF, 0xFF, 0xF0 } },
  { 56 + 40, 5, { 0x0F, 0xFF, 0xFF, 0xFF, 0xF0 } },
  { 56 + 44, 5, { 0x0F, 0xFF, 0xFF, 0xFF, 0xF0 } },
  { 56 + 48, 5, { 0x0F, 0xFF, 0xFF, 0xFF, 0xFC } },
  { 56 + 52, 5, { 0x03, 0xFF, 0xFF, 0xFF, 0xFC } }
};

/********************/
/* Public functions */
/********************/

/******	WSS_Initialise() ***************************************************

Purpose:	Initialises the 3520 OSD, but does not display it;
		also initialises SCART state parameters
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *WSS_Initialise (void)
{
  _kernel_oserror *e = NULL;
  const char *tvon_setting;
  scart_feature rgb;
  scart_feature tvassert;
  /* Top-field OSD is at byte offset 0 */
  e = STi3520L_WriteSDRAM (OSD_soft_copy, SDRAM_OSD_START, 128);
  /* Bottom-field OSD is at byte offset 256 - just use the terminating word */
  if (!e) e = STi3520L_WriteSDRAM (OSD_soft_copy + 128 - 8, SDRAM_OSD_START + 256, 8);
  /* Set up OSD field pointers */
  WRITE_VID_OTP((SDRAM_OSD_START + 256) / 256); /* top/bottom OSD fields are actually inverted!! */
  WRITE_VID_OBP(SDRAM_OSD_START / 256);         /* another undocumented 3520 bug is my guess...  */
  /* Set up SCART signalling according to TVOn variable */
  tvon_setting = getenv ("TVOn");
  if (tvon_setting == NULL)
  {
    rgb = tvassert = scart_disable;
  }
  else
  {
    if ((strcmp (tvon_setting, "CVBS") == 0) || (strcmp (tvon_setting, "YC") == 0))
    {
      rgb = scart_disable;
      tvassert = scart_enable;
    }
    else
    {
      rgb = tvassert = scart_enable;
    }
  }
  WSS_SetSCART (&rgb, &tvassert, NULL, NULL);
  return e;
}

/******	WSS_Set() **********************************************************

Purpose:	Writes one or more type of Group data, reads Group A data
In:		New settings for Group A-D (0 for Group A means disable,
		0xFF for any Group means preserve existing value);
		internal/external flag; address to write original external
		Group A setting into
Out:		Pointer to error block

***************************************************************************/

_kernel_oserror *WSS_Set (unsigned char group [4], bool internal, unsigned char *old_groupA_ext, unsigned char *old_groupA_int)
{
  _kernel_oserror *e = NULL;
  unsigned char *group_static_copy;
  unsigned char *old_group_static_copy;
  unsigned char old_controlling_groupA;
  
  if (old_groupA_ext != NULL) *old_groupA_ext = external_group [0];
  if (old_groupA_int != NULL) *old_groupA_int = internal_group [0];
  
  old_group_static_copy = (internal_group [0] == 0) ? external_group : internal_group;
  old_controlling_groupA = old_group_static_copy [0];
  
  /* Write array is determined from argument */
  group_static_copy = internal ? internal_group : external_group;
  if (group [0] != 0xFF) group_static_copy [0] = group [0];
  if (group [1] != 0xFF) group_static_copy [1] = group [1];
  if (group [2] != 0xFF) group_static_copy [2] = group [2];
  if (group [3] != 0xFF) group_static_copy [3] = group [3];
  
  /* Read array is determined from precedence */
  group_static_copy = (internal_group [0] == 0) ? external_group : internal_group;
  if (group_static_copy [0] != 0)
  {
    e = static_ToggleBits (b ^ (group_static_copy [0] | group_static_copy [1] << 4 |
        group_static_copy [2] << 8 | group_static_copy [3] << 11));
    VID_DCF_0 |= VID_DCF_EOS<<0; /* enable OSD */
  }
  else
  {
    VID_DCF_0 &= ~VID_DCF_EOS<<0; /* disable OSD */
  }
  
  /* Do the UpCall if necessary */
  if (group_static_copy != old_group_static_copy || group_static_copy [0] != old_controlling_groupA)
  {
    void *handle = Stream.csh;
    fixed PAR = 0x11111;
    unsigned char overscan [4] = { 0, 0, 0, 0 }; /* default to no extra overscan anywhere */
    if (internal_group [0] == 0)
    {
      /* New WSS state was externally signalled - no attached stream handle */
      handle = NULL;
    }
    switch (group_static_copy [0])
    {
      case 1:
        /* 14:9 letterbox centre */
      case 6 | 8:
        /* 4:3 with 14:9 centre shoot-and-protect */
        overscan [1] = 7;
        overscan [3] = 7;
        break;
      case 2:
        /* 14:9 letterbox top */
        overscan [1] = 14;
        break;
      case 3 | 8:
        /* 16:9 letterbox centre */
        overscan [1] = 12;
        overscan [3] = 12;
        break;
      case 4:
        /* 16:9 letterbox top */
        overscan [1] = 25;
        break;
      case 5 | 8:
        /* 2.35:1 letterbox centre */
        overscan [0] = 12;
        overscan [1] = 21;
        overscan [2] = 12;
        overscan [3] = 21;
        break;
      case 7:
        /* Anamorphic */
        PAR = 0x16C17;
        break;
      default:
        /* Anything else, just use defaults */
        break;
    }
    /* Issue UpCall using OS_CallAVector to preserve interrupt state */
    _swix (OS_CallAVector, _INR(0,9), UpCall_MPEG, 0, handle, UpCallMPEG_WSS, PAR, overscan [0], overscan [1], overscan [2], overscan [3], UpCallV);
  }
  return e;
}

/******	WSS_SetSCART() *****************************************************

Purpose:	Reads/writes SCART signalling parameters
In:		Pointers to read from / write to, or NULL to preserve state and not write back
Notes:		internal_anamorphic has higher priority than external_anamorphic

***************************************************************************/

void WSS_SetSCART (scart_feature *rgb, scart_feature *tvassert, scart_feature *external_anamorphic, scart_feature *internal_anamorphic)
{
  static scart_feature static_rgb;
  static scart_feature static_tvassert;
  static scart_feature static_external_anamorphic = scart_disable;
  static scart_feature static_internal_anamorphic = scart_dontcare;
  scart_feature new_value; /* a scratch value of type scart_feature */
  scart_feature old_anamorphic = (static_internal_anamorphic == scart_dontcare) ? static_external_anamorphic : static_internal_anamorphic;
  scart_feature new_anamorphic;
  bool old_internal_anamorphic = static_internal_anamorphic;
  unsigned int macrovision_state;
  unsigned int macrovision_tvstandard;
  bool irqs_were_enabled = !_kernel_irqs_disabled ();
  
  /* Deal with inputs and outputs */
  
  if (irqs_were_enabled) _kernel_irqs_off ();
  
  if (rgb != NULL)
  {
    new_value = *rgb;
    *rgb = static_rgb;
    if (new_value != scart_preserve)
    {
      static_rgb = new_value;
    }
  }
  
  if (tvassert != NULL)
  {
    new_value = *tvassert;
    *tvassert = static_tvassert;
    if (new_value != scart_preserve)
    {
      static_tvassert = new_value;
    }
  }
  
  if (external_anamorphic != NULL)
  {
    new_value = *external_anamorphic;
    *external_anamorphic = static_external_anamorphic;
    if (new_value != scart_preserve)
    {
      static_external_anamorphic = new_value;
    }
  }
  
  if (internal_anamorphic != NULL)
  {
    new_value = *internal_anamorphic;
    *internal_anamorphic = static_internal_anamorphic;
    if (new_value != scart_preserve)
    {
      static_internal_anamorphic = new_value;
    }
  }
  
  if (irqs_were_enabled) _kernel_irqs_on ();
  
  /* Apply static_rgb to the hardware */
  
  _swix (PortMan_AccessBit, _INR(0,1),
      (static_rgb == scart_enable) ? PORTMAN_FLAG_CLEAR : PORTMAN_FLAG_SET, "SCART_CVBS");
  
  /* Apply everything else to the hardware */
  
  new_anamorphic = (static_internal_anamorphic == scart_dontcare) ? static_external_anamorphic : static_internal_anamorphic;
  
  _swix (Macrovision_GetState, _IN(0)|_OUTR(1,2), 0, &macrovision_state, &macrovision_tvstandard);
  macrovision_state &= ~MacroStateFlags_Pin8_Bits;
  if (!static_tvassert)
  {
    macrovision_state |= MacroStateFlags_Pin8_0V;
  }
  else
  {
    if (new_anamorphic == scart_enable)
    {
      macrovision_state |= MacroStateFlags_Pin8_6V;
    }
    else
    {
      macrovision_state |= MacroStateFlags_Pin8_12V;
    }
  }
  _swix (Macrovision_SetState, _INR(0,2),
      MacroSetStateFlags_ChangeNow, macrovision_state, macrovision_tvstandard);
  
  /* Do the UpCall if necessary */
  if (new_anamorphic != old_anamorphic || old_internal_anamorphic != static_internal_anamorphic)
  {
    void *handle = Stream.csh;
    if (static_internal_anamorphic == scart_dontcare)
    {
      handle = NULL;
    }
    /* Issue UpCall using OS_CallAVector to preserve interrupt state */
    _swix (OS_CallAVector, _INR(0,4)|_IN(9), UpCall_MPEG, 0, handle, UpCallMPEG_SCARTpin8, new_anamorphic, UpCallV);
  }
}

/*********************/
/* Private functions */
/*********************/

/******	static_ToggleBits() ************************************************

Purpose:	Inverts a number of elements in the WSS OSD
In:		Bits to invert
Out:		Pointer to error block

***************************************************************************/

static _kernel_oserror *static_ToggleBits (unsigned int invert_mask)
{
  _kernel_oserror *e = NULL;
  
  if (invert_mask != 0) /* optimisation for cases where nothing need change */
  {
    unsigned int this_mask_bit = 0;
    unsigned int current_invert_byte;
    unsigned int current_invert_index;
    unsigned int last_invert_index;
    
    b ^= invert_mask; /* keep |b| in line */
    while (!e && invert_mask != 0 && this_mask_bit < 14)
    {
      if ((invert_mask & 1) == 1)
      {
        current_invert_byte = b_mask[this_mask_bit].start_byte;
        current_invert_index = 0;
        last_invert_index = b_mask[this_mask_bit].nbytes;
        while (current_invert_index < last_invert_index)
        {
          OSD_soft_copy[current_invert_byte] ^= b_mask[this_mask_bit].byte[current_invert_index];
          current_invert_byte ++;
          current_invert_index ++;
        }
      }
      invert_mask >>= 1; /* move next bit into bit 0 */
      this_mask_bit++;
    }
    /* Re-send (all) group data to the SDRAM */
    e = STi3520L_WriteSDRAM (OSD_soft_copy + 56, SDRAM_OSD_START + 56, 64);
  }
  return e;
}
