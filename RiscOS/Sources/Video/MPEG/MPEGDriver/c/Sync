/******	Sync.c *************************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	Common sync-management code for generic video and audio

Copyright 2002 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
16/04/2002	BJGA	Created

***************************************************************************/

#ifdef GENERIC

/************/
/* Includes */
/************/

#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include "kernel.h"
#include "swis.h"

#include "MPEG/mpegtime.h"
#include "PRISM/PRISM.h"
#include "PRISM/PFCClock.h"

#include "Mess.h"
#include "Module.h"
#include "Sync.h"
#include "Types.h"

#include "Debug.h"
#if Debugging==1
#include "DWrite.h"
#endif

/*****************/
/* Private types */
/*****************/

typedef struct sync_stream
{
  struct sync_stream *next;
  control_stream_handle_t csh;
  unsigned int prism_client_handle;
  unsigned int unwrap_handle;
  stream_handle_t clock_handle;
  const prism_function_table_unwrap_to_clock_t *functions;
} sync_stream_t;

/**********************/
/* Private prototypes */
/**********************/

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

static sync_stream_t *static_Streams;

/*********************/
/* Private constants */
/*********************/

/********************/
/* Public functions */
/********************/

/******	Sync_Open() ********************************************************

Purpose:	Fakes up a PRISM client and PRISM unwrapper - enough that
		it can persuade PFCClock to create a time stream
In:		Control stream handle (so video and audio can find each other);
		sync-to-stream flag (needed by PFCClock);
		pointer through which to return PFCClock's handle for this stream
Out:		Error pointer or NULL

***************************************************************************/

_kernel_oserror *Sync_Open (control_stream_handle_t csh, bool sync_to_stream, stream_handle_t *clock_handle)
{
  _kernel_oserror *e;
  sync_stream_t *new_stream = malloc (sizeof (sync_stream_t));
  if (new_stream == NULL)
  {
    return Mess_GenerateError ("NoMem", errno_NO_MEM, 0);
  }
  new_stream->csh = csh;
  e = _swix (PRISM_Register, _IN(0)|_OUT(1),
             0,
             &new_stream->prism_client_handle);
  if (e)
  {
    free (new_stream);
    return e;
  }
  /* We can fake a unique demux handle by replicating the client handle bits in the local handle bits */
  new_stream->unwrap_handle = new_stream->prism_client_handle | (new_stream->prism_client_handle << 16);
  e = _swix (PFCClock_Register, _INR(0,2)|_OUTR(2,3),
             sync_to_stream ? 3 : 2,
             0, /* we'll have to bodge PFCClock to allow no PRISM ID to be specified here */
             new_stream->unwrap_handle,
             &new_stream->clock_handle,
             &new_stream->functions);
  if (e)
  {
    free (new_stream);
    return e;
  }
  new_stream->next = static_Streams;
  static_Streams = new_stream;
  *clock_handle = new_stream->clock_handle;
  return NULL;
}

/******	Sync_GetHandleFromCSH() ********************************************

Purpose:	Maps from a control stream handle to the related PFCClock handle
In:		Control stream handle; pointer through which to return the PFCClock handle
Out:		Error pointer or NULL

***************************************************************************/

_kernel_oserror *Sync_GetHandleFromCSH (control_stream_handle_t csh, stream_handle_t *clock_handle)
{
  sync_stream_t *ptr = static_Streams;
  while (ptr->csh != csh) ptr = ptr->next;
  *clock_handle = ptr->clock_handle;
  return NULL;
}

/******	Sync_Start() *******************************************************

Purpose:	Equivalent to PFCClock_BeginSession
In:		Clock handle
Out:		Error pointer or NULL

***************************************************************************/

_kernel_oserror *Sync_Start (stream_handle_t clock_handle)
{
  return _swix (PFCClock_BeginSession, _INR(0,1),
                0,
                clock_handle);
}

/******	Sync_Stop() ********************************************************

Purpose:	Equivalent to PFCClock_EndSession
In:		Clock handle
Out:		Error pointer or NULL

***************************************************************************/

_kernel_oserror *Sync_Stop (stream_handle_t clock_handle)
{
  return _swix (PFCClock_EndSession, _INR(0,1),
                0,
                clock_handle);
}

/******	Sync_Close() *******************************************************

Purpose:	Opposite of Sync_Open
In:		Clock handle
Out:		Error pointer or NULL

***************************************************************************/

_kernel_oserror *Sync_Close (stream_handle_t clock_handle)
{
  _kernel_oserror *e;
  sync_stream_t *ptr = static_Streams;
  sync_stream_t *prev = NULL;
  while (*(uint32_t *)&(ptr->clock_handle) != *(uint32_t *)&clock_handle)
  {
    prev = ptr;
    ptr = ptr->next;
  }
  if (prev == NULL)
  {
    static_Streams = ptr->next;
  }
  else
  {
    prev->next = ptr->next;
  }
  e = _swix (PFCClock_Deregister, _INR(0,1),
             0,
             clock_handle);
  if (e)
  {
    return e;
  }
  e = _swix (PRISM_Deregister, _INR(0,1),
             0,
             ptr->prism_client_handle);
  if (e)
  {
    return e;
  }
  free (ptr);
  return NULL;
}

#else
extern int Sync_NotUsed;
#endif
