/******	Service.c **********************************************************

Project:	STB-400
Component:	MPEGDriver
This file:	Service call handling

Copyright 1999-2000 Pace Micro Technology plc. All rights reserved.

This material is the confidential trade secret and proprietary information
of Pace Micro Technology plc. It may not be reproduced, used, sold, or
transferred to any third party without the prior written consent of
Pace Micro Technology plc.

History:
Date		Who	Change
----------------------------------------------------------------------------
20/09/1999	BJGA	Created
07/10/1999	BJGA	Implemented Service_ServicePreReset()
19/04/2000	BJGA	Implemented Service_ServiceModeChange()
23/06/2000	BJGA	Implemented Service_ServicePostInit()
05/07/2000	BJGA	Sets new flags when registering video PEH to indicate
			that it should only be called - so playing only the audio
			part of a stream now works; also registers an audio PEH (new)

***************************************************************************/

/************/
/* Includes */
/************/

#include <stdbool.h>
#include "swis.h"

#include "Global/SWIs.h"
#include "MPEG/Macrovisio.h"
#include "MPEG/MPEGCtrl.h"

#include "IRQ.h"
#include "ModHdr.h"
#include "ModHdr2.h"
#include "Module.h"
#include "Registers.h"
#include "Service.h"

/*****************/
/* Private types */
/*****************/

/**********************/
/* Private prototypes */
/**********************/

/********************/
/* Public variables */
/********************/

/*********************/
/* Private variables */
/*********************/

/*********************/
/* Private constants */
/*********************/

/********************/
/* Public functions */
/********************/

/******	Service_ServicePreReset() ******************************************

Purpose:	Handles Service_PreReset (releases interrupts)
Out:		|true| to claim the service call

***************************************************************************/

bool Service_ServicePreReset (void)
{
  IRQ_DisableVideoIRQs ();
  IRQ_DisableAudioIRQs ();
  IRQ_DisableCommonIRQs ();
  VID_DCF_0 = 0x40; /* blank the MPEG video plane */
  return false;
}

/******	Service_ServiceModeChange() ****************************************

Purpose:	Handles Service_ModeChange (recaches screen mode data)
Out:		|true| to claim the service call

***************************************************************************/

bool Service_ServiceModeChange (void)
{
  int in_block [5] = { 4, 5, 11, 12, -1 };
  unsigned int out_block [4];
  unsigned int mode_width;
  unsigned int mode_height;
  _swix (Macrovision_GetState, _IN(0)|_OUT(2), 0, &Module_Display525_60);
  _swix (OS_ReadVduVariables, _INR(0,1), in_block, out_block);
  mode_width = (out_block [2] + 1) << out_block [0];
  mode_height = (out_block [3] + 1) << out_block [1];
  Module_OriginXOffset = (1440 - mode_width) / 2;
  Module_OriginYOffset = ((Module_Display525_60 ? 960 : 1152) - mode_height) / 2;
  Module_OriginYOffset &= ~1; /* round down if a mode uses an odd number of frame lines */
  return false;
}

/******	Service_ServicePostInit() ******************************************

Purpose:	Handles Service_PostInit
Out:		|true| to claim the service call

***************************************************************************/

bool Service_ServicePostInit (void)
{
  /* Add MPEGDriver+ at the *end* of ROM init, to avoid confusing module     */
  /* numbers and ROM module numbers. RAM builds will never see this service  */
  /* call, so they initialise MPEGDriver+ during main module initialisation. */
  _swix (OS_Module, _INR(0,1), 10 /* insert from memory */, ModHdr2);
  return false;
}

/******	Service_ServiceMPEGControlStarting() *******************************

Purpose:	Handles Service_MPEGControlStarting (re-registers PEHs)
Out:		|true| to claim the service call

***************************************************************************/

bool Service_ServiceMPEGControlStarting (void *pw)
{
  _swix (MPEGControl_RegisterProgramElementHandler, _INR(0,3),
      1 << PEHFlags_RequiredFlag_Shift, 1 /* MPEG-1 video */, video_program_element_handler, pw);
  _swix (MPEGControl_RegisterProgramElementHandler, _INR(0,3),
      1 << PEHFlags_RequiredFlag_Shift, 2 /* MPEG-2 video */, video_program_element_handler, pw);
  _swix (MPEGControl_RegisterProgramElementHandler, _INR(0,3),
      2 << PEHFlags_RequiredFlag_Shift, 3 /* MPEG-1 audio */, audio_program_element_handler, pw);
  return false;
}
