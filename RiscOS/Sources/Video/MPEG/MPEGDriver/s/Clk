; /****** Clk.s **************************************************************
;
; Project:	STB-400
; Component:	MPEGDriver
; This file:	33-bit clock arithmetic
;
; Copyright 1999-2000 Pace Micro Technology plc. All rights reserved.
;
; This material is the confidential trade secret and proprietary information
; of Pace Micro Technology plc. It may not be reproduced, used, sold, or
; transferred to any third party without the prior written consent of
; Pace Micro Technology plc.
;
; History:
; Date		Who	Change
; ----------------------------------------------------------------------------
; 01/09/1999	BJGA	Created
; 02/12/1999	BJGA	Updated to use Hdr:APCS.<APCS>
; 28/03/2000	BJGA	Implemented Clk_Add(), Clk_ReadRawSTC() and Clk_ConvertSTCtoPCR()
;
; ***************************************************************************/


; Included headers
; ----------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:APCS.<APCS>


; Notes:
; ------
; Memory layout of clk structure:
; +0 - +3 / lower register : least significant 32 bits
; +4      / upper register : most significant bit in bit 0


        AREA    |Asm$$Code|, CODE, READONLY

; extern bool Clk_Greater (clk a, clk b);

; In:   Two clock references to compare
; Out:  |true| if a>b (with wraparound)

; a is in (a1,a2)
; b is in (a3,a4)

        EXPORT  Clk_Greater
Clk_Greater
        CMP     a3, a1
        SBC     a1, a4, a2
        AND     a1, a1, #1      ; if (b-a) < 0, this will have value 1 (true)
        Return  , LinkNotStacked

; extern bool Clk_Less (clk a, clk b);

; In:   Two clock references to compare
; Out:  |true| if a<b (with wraparound)

; a is in (a1,a2)
; b is in (a3,a4)

        EXPORT  Clk_Less
Clk_Less
        CMP     a1, a3
        SBC     a1, a2, a4
        AND     a1, a1, #1      ; if (a-b) < 0, this will have value 1 (true)
        Return  , LinkNotStacked

; extern clk Clk_Subtract (clk a, clk b);

; In:   Two clock references to compare
; Out:  The value of a-b (a 33-bit value)

; a is in (a2,a3)
; b is in (a4,[sp])
; return result in ([a1],[a1,#4])

        EXPORT  Clk_Subtract
Clk_Subtract
        LDR     ip, [sp]
        SUBS    a2, a2, a4
        SBC     a3, a3, ip
        AND     a3, a3, #1
        STMIA   a1, {a2, a3}
        Return  , LinkNotStacked

; extern clk Clk_Add (clk a, clk b);

; In:   Two clock references to sum
; Out:  The value of a+b (a 33-bit value)

; a is in (a2,a3)
; b is in (a4,[sp])
; return result in ([a1],[a1,#4])

        EXPORT  Clk_Add
Clk_Add
        LDR     ip, [sp]
        ADDS    a2, a2, a4
        ADC     a3, a3, ip
        AND     a3, a3, #1
        STMIA   a1, {a2, a3}
        Return  , LinkNotStacked

; extern clk Clk_ReadRawSTC (void);

; Out:  A monotonic |clk| struct (90 kHz ticks), derived from OS_ReadMonontonicTime and Timer0
; Note: It is assumed that we are in SVC mode, with IRQs disabled

; During function, a3 is least-significant 32 bits of value, a4 is most-significant bit

; Under APCS, result is returned in ([a1],[a1,#4])

        EXPORT  Clk_ReadRawSTC
Clk_ReadRawSTC
        FunctionEntry "a1"

        ; Get cs monotonic time in a1
        SWI     XOS_ReadMonotonicTime

        ; Result msb starts off as zero
        MOV     a4, #0

        ; Multiply by 100 (2_01100100) to convert into 100µs ticks
        MOVS    a2, a1, LSL#6           ; a2 = a1<<6, C = bit 32 of a2
        EORCS   a4, a4, #1
        MOVS    a3, a1, LSL#5           ; a3 = a1<<5, C = bit 32 of a3
        EORCS   a4, a4, #1
        MOVS    a1, a1, LSL#2           ; a1 = a1<<2, C = bit 32 of new a1
        EORCS   a4, a4, #1
        ADDS    a3, a1, a3              ; a3 = (original a1) * (4+32)
        EORCS   a4, a4, #1
        ADDS    a3, a3, a2              ; a3 = (original a1) * (4+32+64)
        EORCS   a4, a4, #1

        ; Check initial IRQRQA status
        MOV     lr, #IOC
        LDRB    a1, [lr, #IOCIRQREQA]

        ; Read the Timer 0 value - it counts down from 19999 to 0
        ; the clock tick occurring as it changes from 0 to 19999.
        STRB    lr, [lr, #Timer0LR]
        LDRB    ip, [lr, #Timer0LL]
        LDRB    a2, [lr, #Timer0LH]
        ORR     ip, ip, a2, LSL#8

        ; Check new IRQRQA status
        LDRB    a2, [lr, #IOCIRQREQA]

        ; If an interrupt is pending, OS MonotonicTime is (at least) 1 cs out-of-date
        TST     a2, #timer0_bit
        BEQ     %FT10
        ADDS    a3, a3, #100
        EORCS   a4, a4, #1
10
        ; If 100Hz clock didn't tick, add in (Timer0 count) / 200
        EOR     a1, a1, a2
        TST     a1, #timer0_bit
        BNE     %FT20
        ; First subtract the Timer0 count from 19999 (&4E1F)
        MOV     lr, #&1F
        ORR     lr, lr, #&4E00
        SUBS    ip, lr, ip
        MOVLT   ip, #0                  ; just in case
        ; We only need 7 bits accuracy for the Timer0 quotient
        ; so multiply by 41 (2_00101001) then divide by 8192
        MOV     a1, ip, LSL#5
        ADD     a1, a1, ip, LSL#3
        ADD     a1, a1, ip
        ADDS    a3, a3, a1, LSR#13
        EORCS   a4, a4, #1
20
        ; Finally, multiply by 9 (2_1001) to give us a value in 90kHz ticks
        MOVS    a1, a3, LSL#3           ; a1 = a3<<3, C = bit 32 of a1
        EORCS   a4, a4, #1
        ADDS    a3, a3, a1              ; a3 = (original a3) * (1+9)
        EORCS   a4, a4, #1

        ; Store the result in the output block
        Pull    "a1"
        STMIA   a1, {a3, a4}

        Return

; extern clk Clk_ConvertSTCtoPCR (clk STC);

; In:   A raw STC value (as returned from Clk_ReadRawSTC)
; Out:  A PCR value, derived using Stream.reference_PCR, Stream.reference_STC and
;       Stream.audio.speed_indicator
; Note: PCR will increment slowly in slow-motion mode, and not at all in pause mode

; STC is in (a2,a3)
; result is returned in ([a1],[a1,#4])

        EXPORT  Clk_ConvertSTCtoPCR
Clk_ConvertSTCtoPCR
        FunctionEntry "v1, v2, v3"
        StaticBaseFromSL v3
        ADRVar  ip, v3, Stream
        LDRVar  lr, v3, Module_AudioSpeedIndicatorOffset
        LDR     lr, [ip, lr]
        LDMIA   ip, {a4, v1, v2, v3}    ; reference_PCR is (a4,v1), reference_STC is (v2,v3)
        TEQ     lr, #0                  ; if paused,
        BEQ     %FT80                   ; just return reference_PCR

        SUBS    a2, a2, v2
        SBC     a3, a3, v3              ; (a2,a3) is STC - reference_STC
        ANDS    a3, a3, #1              ; negative?
        RSBNE   a2, a2, #0              ; a2 is now absolute value of bits 0-31
        MOV     v3, a2
        DivRem  a2, v3, lr, ip          ; DivRem is unsigned 32-bit division
        TST     a3, #1
        RSBNE   a2, a2, #0              ; (a2,a3) is signed quotient of delta_STC / slowness
        ADDS    a4, a4, a2
        ADC     v1, v1, a3
        AND     v1, v1, #1              ; (a4,v1) is reference_PCR + (a2,a3)

80      STMIA   a1, {a4, v1}
        Return  "v1, v2, v3"


; Static variable indirection table
; ---------------------------------

        IMPORTVar Stream
        IMPORTVar Module_AudioSpeedIndicatorOffset


        END
