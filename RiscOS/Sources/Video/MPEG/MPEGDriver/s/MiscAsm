; /****** MiscAsm.s **********************************************************
;
; Project:	STB-400
; Component:	MPEGDriver
; This file:	Miscellaneous assembler routines
;
; Copyright 1999-2000 Pace Micro Technology plc. All rights reserved.
;
; This material is the confidential trade secret and proprietary information
; of Pace Micro Technology plc. It may not be reproduced, used, sold, or
; transferred to any third party without the prior written consent of
; Pace Micro Technology plc.
;
; History:
; Date		Who	Change
; ----------------------------------------------------------------------------
; 28/10/1999	BJGA	Created
; 23/11/1999	BJGA	Added UserModeWait routine
; 02/12/1999	BJGA	Updated to use Hdr:APCS.<APCS> and WritePSRc macro
; 07/12/1999	BJGA	Implemented MiscAsm_Stuff
; 26/05/2000	BJGA	Implemented MiscAsm_ConvertImage
; 08/08/2000	BJGA	Implemented MiscAsm_CallHandler
; 19/09/2000	BJGA	Implemented MiscAsm_StiffTheBox
;
; ***************************************************************************/


; Included headers
; ----------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:APCS.<APCS>
        GET     Hdr:MPEGCtrl
      [ "$MPEGPoduleType" <> "MPEG2cCard"
        !       1, "MPEGDriver is only suitable for STi3520L hardware"
      ]
        GET     Hdr:$MPEGPoduleType


        AREA    |Asm$$Code|, CODE, READONLY


; Exported functions
; ------------------


; void MiscAsm_Stuff (void *write32, const void *start, unsigned int length);

; In:   32-bit write address to use, start and length of source

        ASSERT  Offset_MPEG_Video_Data_Write_16 - Offset_MPEG_Video_Data_Write_32 = &100
        ASSERT  Offset_MPEG_Audio_Data_Write_16 - Offset_MPEG_Audio_Data_Write_32 = &100
        ASSERT  Offset_MPEG_Video_Data_Write_8  - Offset_MPEG_Video_Data_Write_32 = &200
        ASSERT  Offset_MPEG_Audio_Data_Write_8  - Offset_MPEG_Audio_Data_Write_32 = &200

        EXPORT  MiscAsm_Stuff
MiscAsm_Stuff
        FunctionEntry "v1-v5"
        RSB     a4, a2, #0
        AND     a4, a4, #3      ; a4 = number of bytes from start to next word boundary (range 0-3)
        CMP     a3, a4
        MOVLO   a4, a3          ; a4 = min (a3, a4)
        TEQ     a4, #0
        ; a2 -> data to stuff (not word aligned)
        ; a3 = amount remaining (not word aligned)
        ; a4 = number of bytes to do at this stage
        ; Z set => a4=0
      [ {FALSE}
        ; The slow way to load the MS 1-3 bytes of a word into the LS 1-3 bytes of a register
        BICNE   lr, a2, #3
        LDRNE   ip, [lr]
        MOVNE   lr, a2, LSL #3  ; so bottom five bits of lr are 0, 8, 16 or 24
        MOVNE   ip, ip, ROR lr  ; ROR effectively ignores bits 5-31 of lr
      |
        ; But we can achieve exactly the same in one instruction
        LDRNE   ip, [a2]        ; note a2 can be non-word-aligned
      ]
        TST     a4, #1          ; write a byte if 1 or 3 bytes to do
        STRNEB  ip, [a1, #&200]
        MOVNE   ip, ip, ROR #8
        TST     a4, #2          ; write a halfword if 2 or 3 bytes to do
        STRNE   ip, [a1, #&100]
        ADD     a2, a2, a4
        SUB     a3, a3, a4
stuff_words
        ; a2 -> remaining data to stuff (word aligned - or if it isn't, then a3 will be 0)
        ; a3 = amount remaining (not word aligned)
        BICS    lr, a3, #31             ; lr = total size of all 8-word chunks left to do
        LDMNEIA a2!, {a4, v1-v5, ip, lr}
        STMNEIA a1, {a4, v1-v5, ip, lr}
        SUBNE   a3, a3, #32
        BNE     stuff_words
        BICS    lr, a3, #3              ; lr = total size of all words left to do
        ADDNE   pc, pc, lr, LSL #2
        TEQ     a3, #0
        B       stuff_trailing_bytes
        NOP
        NOP
        NOP
        LDR     a4, [a2], #4
        STR     a4, [a1]
        SUBS    a3, a3, #4*1
        B       stuff_trailing_bytes
        LDMIA   a2!, {a4, v1}
        STMIA   a1, {a4, v1}
        SUBS    a3, a3, #4*2
        B       stuff_trailing_bytes
        LDMIA   a2!, {a4, v1-v2}
        STMIA   a1, {a4, v1-v2}
        SUBS    a3, a3, #4*3
        B       stuff_trailing_bytes
        LDMIA   a2!, {a4, v1-v3}
        STMIA   a1, {a4, v1-v3}
        SUBS    a3, a3, #4*4
        B       stuff_trailing_bytes
        LDMIA   a2!, {a4, v1-v4}
        STMIA   a1, {a4, v1-v4}
        SUBS    a3, a3, #4*5
        B       stuff_trailing_bytes
        LDMIA   a2!, {a4, v1-v5}
        STMIA   a1, {a4, v1-v5}
        SUBS    a3, a3, #4*6
        B       stuff_trailing_bytes
        LDMIA   a2!, {a4, v1-v5, ip}
        STMIA   a1, {a4, v1-v5, ip}
        SUBS    a3, a3, #4*7
stuff_trailing_bytes
        ; a2 -> remaining data to stuff (word aligned)
        ; a3 = number of bytes remaining
        ; Z set => a3=0
        LDRNE   ip, [a2]
        TST     a3, #2          ; write a halfword if 2 or 3 bytes to do
        STRNE   ip, [a1, #&100]
        MOVNE   ip, ip, ROR #16
        TST     a3, #1          ; write a byte if 1 or 3 bytes to do
        STRNEB  ip, [a1, #&200]
        Return  "v1-v5"


; bitstream_packet_t *MiscAsm_FreePacket (bitstream_packet_t *packet);

; In:   Pointer to packet to free
; Out:  Contents of packet's |link| field

; On entry to the free routine:
; r0 -> packet descriptor (will accept a linked list, but we have only ever
;           zeroed the |link| field so a single packet is freed at once)
; all other registers undefined (even FreeWorkspace is read from the packet
;           descriptor by the free routine itself)

        EXPORT  MiscAsm_FreePacket
MiscAsm_FreePacket
        FunctionEntry
        LDR     a2, [a1, #PacketDescriptor_Link]
        Push    "a2"
        MOV     a2, #0
        STR     a2, [a1, #PacketDescriptor_Link]
        LDR     a2, [a1, #PacketDescriptor_FreeRoutine]
        TEQ     a2, #0
        MOVNE   lr, pc
        MOVNE   pc, a2
        Return  "a1"


; extern void MiscAsm_UserModeWait (void *pointer);

; In:   Pointer to flag word (exit when 0)

        EXPORT  MiscAsm_UserModeWait
MiscAsm_UserModeWait
        FunctionEntry
10
        WritePSRc USR_mode, a2 ; warning: also enables IRQs and FIQs
        NOP
        SWI     XOS_EnterOS ; trashes lr_svc, but that's okay

        LDR     lr, [a1]
        TEQ     lr, #0
        BNE     %BT10

        Return


; extern void MiscAsm_StiffTheBox (void);
        EXPORT  MiscAsm_StiffTheBox
MiscAsm_StiffTheBox
        WritePSRc I_bit+F_bit+SVC_mode, lr      ; disable IRQs (and FIQs too, for the hell of it)
01
        B       %BT01                           ; loop endlessly, until the watchdog kicks in


; extern void MiscAsm_ConvertImage (void *frame_buffer, void *sprite,
;     unsigned int macroblock_width, unsigned int macroblock_height, unsigned int flags);

; In:   a1 -> frame buffer
;       a2 -> sprite image
;       a3 = width in macroblocks
;       a4 = height in macroblocks
;       [sp] = flags

        EXPORT  MiscAsm_ConvertImage
MiscAsm_ConvertImage
        FunctionEntry "v1-v6"
        MUL     v1, a3, a4
        ADD     v1, a1, v1, LSL#8       ; v1 -> Cb data in frame buffer
        LDR     v2, [sp, #4*7]          ; v2 = flags word (bit 0 => I/P-frame, bit 1 => interlaced)
        MOV     v3, #4
        TST     v2, #1
        MOVNE   v3, v3, LSL#1
        TST     v2, #2
        MOVNE   v3, v3, LSL#1
        ORR     v2, v3, v2, LSL#8       ; v2 [0:7] is block line offset, adjusted for interlace
                                        ; v2 [8] set => I/P-frame
                                        ; v2 [9] set => interlaced
        ORR     v2, v2, a3, LSL#22      ; v2 [15:31] is field offset for luma (B-frames only)
                                        ; v2 [16:31] is field offset for chroma (B-frames only)
new_macroblock_row
        Push    "a4"                    ; a4 is needed as a scratch register
        MOV     v3, #0                  ; v3 [8:31] is the macroblock number on this row
                                        ; v3 [0:7] is the luma sample, in order of consideration
                                        ; v3 [2:7] is the chroma sample, in order of consideration
new_chroma_sample
        TST     v2, #1:SHL:8
        LDREQB  v4, [v1, #32]
        LDRNEB  v4, [v1, #64]           ; v4 = Cr
        SUBS    v4, v4, #128            ; get signed version, N flag set appropriately
        RSBMI   v4, v4, #0              ; do scaling on absolute value
        MOV     v6, v4, LSL#9
        SUB     v6, v6, v4, LSL#7
        ADD     v6, v6, v4, LSL#5
        SUB     v6, v6, v4, LSL#3       ; v6 = Cr * 408
        MOV     v6, v6, LSR#8           ; v6 = Cr * 1.59
        RSBMI   v6, v6, #0              ; restore sign: v6 is now contribution to R from chroma
        MOV     ip, v4, LSL#8
        SUB     ip, ip, v4, LSL#6
        ADD     ip, ip, v4, LSL#4       ; ip = Cr * 208
        RSBPL   ip, ip, #0              ; ip = 256 * Cr * -0.81 (contribution to G from Cr)
        LDRB    v4, [v1], #1            ; v4 = Cb
        SUBS    v4, v4, #128            ; get signed version, N flag set appropriately
        RSBMI   v4, v4, #0              ; do scaling on absolute value
        MOV     lr, v4, LSL#7
        SUB     lr, lr, v4, LSL#5
        ADD     lr, lr, v4, LSL#2       ; lr = Cb * 100
        RSBPL   lr, lr, #0              ; lr = 256 * Cb * -0.39 (contribution to G from Cb)
        ADD     ip, ip, lr
        MOV     ip, ip, ASR#8           ; ip is now total contribution to G from chroma
        MOV     lr, v4, LSL#9
        ADD     lr, lr, v4, LSL#2       ; lr = Cb * 516
        MOV     lr, lr, LSR#8           ; lr = Cb * 2.02
        RSBMI   lr, lr, #0              ; restore sign: lr is now contribution to B from chroma
new_luma_sample
        LDRB    v4, [a1], #1            ; v4 = Y
        SUBS    v4, v4, #16
        MOVMI   v4, #0                  ; don't allow sub-black colours
        MOV     v5, v4, LSL#8
        ADD     v5, v5, v4, LSL#5
        ADD     v5, v5, v4, LSL#3
        ADD     v5, v5, v4, LSL#1
        ADD     v5, v5, v4              ; v5 = Y * 299
        MOV     v5, v5, LSR#8           ; v5 = Y * 1.16 = contribution to R,G,B from luma

        ADDS    v4, v5, v6
        MOVMI   v4, #0
        CMP     v4, #255
        MOVHI   v4, #255
        MOV     a4, v4                  ; a4 = 000000RR
        ADDS    v4, v5, ip
        MOVMI   v4, #0
        CMP     v4, #255
        MOVHI   v4, #255
        ORR     a4, a4, v4, LSL#8       ; a4 = 0000GGRR
        ADDS    v4, v5, lr
        MOVMI   v4, #0
        CMP     v4, #255
        MOVHI   v4, #255
        ORR     a4, a4, v4, LSL#16      ; a4 = 00BBGGRR
        STR     a4, [a2], #4
        ADD     v3, v3, #1

        AND     a4, v2, #&FF            ; a4 = half gap between output line pairs in framebuffer
        TEQ     a4, #4
        MOVNE   v4, a4                  ; v4 = gap between adjacent output lines in framebuffer
        MOVEQ   v4, v2, LSR#15          ; special case for progressive B-frames (chroma is smaller)

        TST     v3, #1                  ; for the first in each pair of samples,
        BNE     new_luma_sample         ;   just loop
        SUB     a2, a2, #2*4            ; but for the second, move sprite pointer left two pixels
        ADD     a2, a2, a3, LSL#6       ;   and down a row
        SUB     a1, a1, #2              ;   move luma pointer left two pixels
        ADD     a1, a1, v4              ;   and down a row

        TST     v3, #3                  ; for the first three of each four samples,
        BNE     new_luma_sample         ;   do next luma sample, using same chroma value
        ADD     a2, a2, #2*4            ; then after fourth, move sprite pointer right two pixels
        SUB     a2, a2, a3, LSL#7       ;   and up two rows
        ADD     a1, a1, #2              ;   move luma pointer right two pixels
        SUB     a1, a1, v4, LSL#1       ;   and up two multiples of one row

        TST     v3, #15                 ; after 16 luma samples,
        BNE     new_chroma_sample
        ADD     a1, a1, #32-8           ;   luma pointer needs to jump to next luma block
        TST     v2, #1:SHL:8
        ADDNE   a1, a1, #32             ;   blocks are twice as big in I/P-frames

        TST     v3, #31
        BNE     new_chroma_sample
        TEQ     a4, #4
        MOVEQ   v4, v2, LSR#16          ; line gap in the special case is smaller in chroma buffer
                                        ; after 32 luma samples (8 chroma samples),
        SUB     a2, a2, #16*4           ;   move sprite pointer left 16 pixels
        ADD     a2, a2, a3, LSL#7       ;   and down two rows
        SUB     a1, a1, #64             ;   move luma pointer back two blocks
        TST     v2, #1:SHL:8
        SUBNE   a1, a1, #64
        ADD     a1, a1, a4, LSL#1       ;   and down two rows
        SUB     v1, v1, #8              ;   move chroma pointer back 8 pixels
        ADD     v1, v1, v4              ;   and down one row

        TST     v3, #63                 ; after 64 luma samples (2 chroma rows),
                                        ; (don't branch if NE yet)
        SUBEQ   v1, v1, v4, LSL#1       ;   move chroma pointer up twice one row
        ADDEQ   v1, v1, a4, LSL#1       ;   and down by a two-row gap (copes with weird B-frames)

        TST     v2, #1:SHL:9
        MOVEQ   v4, v3
        MOVNE   v4, v3, LSL#1

        TST     v4, #127                ; after 64 luma samples (interlaced) or 128 (progressive)
        BNE     new_chroma_sample
        ADD     a1, a1, #32             ;   luma pointer needs to skip a luma block
        TST     v2, #1:SHL:8
        ADDNE   a1, a1, #32

        TST     v4, #255                ; after 128 luma samples (interlaced) or 256 (progressive)
        BNE     new_chroma_sample
        ADD     a2, a2, #16*4           ;   move sprite pointer right 16 pixels
        SUB     a2, a2, a3, LSL#9       ;   and up 8 rows
        TST     v2, #1:SHL:9            ;   and if we're progressive
        SUBEQ   a2, a2, a3, LSL#9       ;   then another 8 rows up
        ADDNE   v3, v3, #128            ; if we're interlaced, then add in the 128 skipped samples
        ADD     v1, v1, #32             ; chroma pointer needs to skip opposite colour block
        TST     v2, #1:SHL:8
        ADDNE   v1, v1, #32

        CMP     a3, v3, LSR#8           ; while we haven't done all the macroblocks on this row,
        BHI     new_chroma_sample       ;   loop

        SUB     a2, a2, a3, LSL#6       ; move sprite pointer 1 row up (because we've wrapped)
        ADD     a2, a2, a3, LSL#9       ;   then down 8 rows
        TST     v2, #1:SHL:9            ;   and if we're progressive
        ADDEQ   a2, a2, a3, LSL#9       ;   then another 8 too
        TST     v2, #1:SHL:8            ; if a B-frame
        ADDEQ   a1, a1, v2, LSR#15      ;   then skip the data for the opposite field of luma
        ADDEQ   v1, v1, v2, LSR#16      ;   and also for chroma

        Pull    "a4"
        SUBS    a4, a4, #1              ; decrement count of macroblock rows
        BNE     new_macroblock_row      ; loop until done
        Return  "v1-v6"


; extern void MiscAsm_CallHandler (unsigned int handler, ...);

; In:   Handler number; arguments to pass in registers from r0 up (variadic)

; Structure of a link in a handler list
                        ^       0
Handler_Next            #       4       ; -> next link
Handler_Number          #       4       ; event number that this handler services
Handler_Addr            #       4       ; address of handler
Handler_Wsptr           #       4       ; handler's workspace pointer

        EXPORT  MiscAsm_CallHandler
MiscAsm_CallHandler
        FunctionEntry "r8, v6, fp"
        StaticBaseFromSL ip
        LDRVar  v6, ip, Module_Handlers ; v6 used to pass along handler list
        TEQ     v6, #0
        BEQ     %FT90
        MOV     r8, a1                  ; we want handler number in r8
        MOV     r0, a2                  ; and other parameters in r0 upwards
        MOV     r1, a3
        MOV     r2, a4
        ; if any future handler uses more than 3 arguments,
        ; conditionally take them from the stack here
        ; but remember to preserve v1-v4 overall
10      LDR     lr, [v6, #Handler_Number]
        TEQ     r8, lr                  ; is it the correct type of handler?
        BNE     %FT20

        ; Call the handler
        LDR     r12, [v6, #Handler_Wsptr] ; get handler workspace pointer
        LDR     fp, [v6, #Handler_Addr]
        MOV     lr, pc                  ; return address = pc + 8
        MOV     pc, fp                  ; BL to the handler routine
        TEQ     r8, #0                  ; was it claimed?

20      ; EQ => we called a handler and it claimed the event
        LDRNE   v6, [v6, #Handler_Next]
        TEQNE   v6, #0
        BNE     %BT10   ; exit if the event was claimed, or if we ran out of handlers; else loop
90
        Return  "r8, v6, fp"


; Static variable indirection table
; ---------------------------------

        IMPORTVar Module_Handlers


        END
