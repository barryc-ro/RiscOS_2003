; /****** DivRem64.s *********************************************************
;
; Project:	STB-400
; Component:	MPEGDriver
; This file:	64-bit unsigned division and remainder routine
;
; Copyright 2000 Pace Micro Technology plc. All rights reserved.
;
; This material is the confidential trade secret and proprietary information
; of Pace Micro Technology plc. It may not be reproduced, used, sold, or
; transferred to any third party without the prior written consent of
; Pace Micro Technology plc.
;
; History:
; Date		Who	Change
; ----------------------------------------------------------------------------
; 05/05/2000	BJGA	Created
;
; ***************************************************************************/

; Included headers
; ----------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>


        AREA    |Asm$$Code|, CODE, READONLY


; Exported functions
; ------------------

; __value_in_regs extern long_long DivRem64 (long_long dividend, long_long divisor, long_long *remainder);

; In:   a1,a2 = dividend
;       a3,a4 = divisor
; Out:  a1,a2 = quotient
;       [[sp]],[[sp],#4] = remainder

        EXPORT  DivRem64
DivRem64
        FunctionEntry
        BL      _ll_udiv
        LDR     lr,[sp,#1*4]      ; skip one register on stack
        STMIA   lr,{a3,a4}
        Return


; Local functions
; ---------------

_ll_udiv
; On entry,
;  (a1,a2) hold dividend  (a1 is lsw)
;  (a3,a4) hold divisor   (a3 is lsw)
; On exit,
;  (a1,a2) hold quotient  (a1 is lsw)
;  (a3,a4) hold remainder (a3 is lsw)
; This function was actually disassembled from the ARM SDT, but the comments are all mine. BJGA 08/05/2000
        STMDB   sp!,{v1-v3,lr}
        MOV     v1,a2
        MOV     v2,a1
        MOV     v3,#0
        ORRS    ip,a4,a3,LSR #31
        BNE     %FT01
        TST     a3,a3
        BEQ     _ll_div0
        MOVS    ip,a3,LSR #15
        ADDEQ   v3,v3,#16
        MOV     ip,a3,LSL v3
        MOVS    lr,ip,LSR #23
        MOVEQ   ip,ip,LSL #8
        ADDEQ   v3,v3,#8
        MOVS    lr,ip,LSR #27
        MOVEQ   ip,ip,LSL #4
        ADDEQ   v3,v3,#4
        MOVS    lr,ip,LSR #29
        MOVEQ   ip,ip,LSL #2
        ADDEQ   v3,v3,#2
        MOVS    lr,ip,LSR #30
        MOVEQ   ip,ip,LSL #1
        ADDEQ   v3,v3,#1
        B       _ll_udiv_small
01
        TST     a4,#&80000000
        BNE     %FT02
        MOVS    ip,a4,LSR #15
        ADDEQ   v3,v3,#16
        MOV     ip,a4,LSL v3
        MOVS    lr,ip,LSR #23
        MOVEQ   ip,ip,LSL #8
        ADDEQ   v3,v3,#8
        MOVS    lr,ip,LSR #27
        MOVEQ   ip,ip,LSL #4
        ADDEQ   v3,v3,#4
        MOVS    lr,ip,LSR #29
        MOVEQ   ip,ip,LSL #2
        ADDEQ   v3,v3,#2
        MOVS    lr,ip,LSR #30
        MOVEQ   ip,ip,LSL #1
        ADDEQ   v3,v3,#1
        RSB     a4,v3,#32
        ORR     ip,ip,a3,LSR a4
        MOV     lr,a3,LSL v3
        B       _ll_udiv_big
02
        MOV     ip,a4
        MOV     lr,a3
        B       _ll_udiv_ginormous

_ll_udiv_small
; Divisor is &0000000000000001 - &000000007FFFFFFF
; (v2,v1) is dividend
; v3 is (number of leading zeroes in divisor) - 33
; ip is divisor, shifted left until there is exactly one leading zero (ie msw of (divisor << v3))
        MOV     a4,#0
        CMP     v1,ip,LSL #1
        SUBCS   v1,v1,ip,LSL #1
        ADDCS   a4,a4,#2          ; remember that we've already subtracted 2 * (divisor << v3) from msw
        CMP     v1,ip
        SUBCS   v1,v1,ip
        ADC     a4,a4,#0          ; and/or we've subtracted (another) lot of (divisor << v3) from msw
        ; v1 is now definitely less than ip
        RSB     ip,ip,#0          ; negate ip for use during iteration phase
        ADD     a3,v3,#32         ; a3 is now the amount by which the the divisor has been shifted left,
                                  ; if you consider ip to be the msw of a 64-bit value (whose lsw is 0)

        ; (v1,v2) is now converted from the dividend to the remainder *and* the the quotient, primarily
        ; using an iterative process. The least significant a3 (= 0 ... v3) bits are used to build up the
        ; quotient, and the remaining bits are repeatedly shifted left and compared against the shifted
        ; divisor. However, there is a further optimisation that can be performed on the first iterations:
        ; a number of leading zero bits may be dealt with in one go by simply shifting (v1,v2) left because
        ; that many of the most significant bits of the quotient will also be zero. The number of
        ; iterations that can be so optimised is limited by two factors: (a) the shifted dividend must be
        ; less than the shifted divisor (whose minimum value is &4000000000000000); and (b) the dividend
        ; must not be shifted more times than the divisor was (to achieve an integer quotient and remainder)

;        CMP     a3,#32           ; v3 is between 0 and 30, so this test is pointless
;        BCC     _ll_udiv_small_nosh32
        ORRS    a1,v1,v2,LSR #30  ; if (v2,v1) < &0000000040000000
        MOVEQ   v1,v2             ; then shift (v2,v1) left by 32
        MOVEQ   v2,#0
        SUBEQ   a3,a3,#32
;_ll_udiv_small_nosh32
        MOV     a2,#0             ; a2 is the number of sub-word shifts in the optimisation
        CMP     a3,#16            ; if (shift MOD 32) >= 16,
        BCC     _ll_udiv_small_nosh16
        MOVS    a1,v1,LSR #14     ; and v1 < &00004000,
        MOVEQ   v1,v1,LSL #16     ; then shift v1 left by 16
        ADDEQ   a2,a2,#16
_ll_udiv_small_nosh16
        SUB     lr,a3,a2
        CMP     lr,#8             ; if (shift MOD 16) >= 8,
        BCC     _ll_udiv_small_nosh8
        MOVS    a1,v1,LSR #22     ; and v1 < &00400000,
        MOVEQ   v1,v1,LSL #8      ; then shift v1 left by 8
        ADDEQ   a2,a2,#8
_ll_udiv_small_nosh8
        RSB     a1,a2,#32
        ORR     v1,v1,v2,LSR a1   ; shift top bits of v2 into v1
        MOV     v2,v2,LSL a2      ; and shift up the rest of v2
        SUB     a3,a3,a2
        ; The next bit of code (up to _ll_udiv_small_loopdone) is simply an
        ; unrolled loop that does this code fragment a3 (0 or more) times over:
        ; ADCS    v2,v2,v2        ; bit 0 is C from last operation (1 if dividend divided into divisor)
                                  ; other bits (quotient and dividend) shifted left, top bit into C
        ; ADCS    v1,ip,v1,LSL #1 ; shift up ms bits; also subtract shifted divisor; C is bit 33 of result
                                  ; if CS, then (dividend - divisor) >= &(1)00000000, so leave the divisor
                                  ; subtracted off, and at the next iteration set the next bit in quotient
        ; RSBCC   v1,ip,v1        ; if CC, undo the subtraction, and clear the next quotient bit
        CMP     a3,#1
        BCC     _ll_udiv_small_loopdone
        SUB     a3,a3,#1
        AND     a1,a3,#7
        EOR     a1,a1,#7
        ADDS    a1,a1,a1,LSL #1   ; clears C as a useful side-effect
        ADD     pc,pc,a1,LSL #2
        NOP
_ll_udiv_small_loop
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        SUB     a3,a3,#8
        TST     a3,a3
        BPL     _ll_udiv_small_loop
_ll_udiv_small_loopdone
        MOV     a3,v1,LSR v3      ; remainder lsw is bottom v3 bits of v1 (remember, v3 is 0 - 30)
        BIC     v1,v1,a3,LSL v3   ; remove remainder bits from v1, leaving just (32-v3) bits of quotient
        ADCS    a1,v2,v2          ; \ one last time round the loop for v2 and v1
        ADC     a2,v1,v1          ; / and place the quotient into (a1,a2) while we're at it
        ADD     a2,a2,a4,LSL v3   ; add the early subtractions back into quotient msw
        MOV     a4,#0             ; remainder msw is always 0
        LDMIA   sp!,{v1-v3,pc}

_ll_udiv_big
; Divisor is &0000000080000000 - &7FFFFFFFFFFFFFFF
; (v2,v1) is dividend
; v3 is (number of leading zeroes in divisor) - 1
; (lr,ip) is divisor, shifted left until there is exactly one leading zero (ie divisor << v3)
        MOV     a4,#0
        SUBS    a1,v2,lr
        SBCS    a2,v1,ip
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADC     a4,a4,#0
        SUBS    a1,v2,lr
        SBCS    a2,v1,ip
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADC     a4,a4,#0
        SUBS    a1,v2,lr
        SBCS    a2,v1,ip
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADC     a4,a4,#0
        RSBS    lr,lr,#0
        RSC     ip,ip,#0
        MOV     a2,#0
        CMP     v3,#16
        BCC     _ll_udiv_big_nosh16
        MOVS    a1,v1,LSR #14
        MOVEQ   v1,v1,LSL #16
        ADDEQ   a2,a2,#16
_ll_udiv_big_nosh16
        SUB     a3,v3,a2
        CMP     a3,#8
        BCC     _ll_udiv_big_nosh8
        MOVS    a1,v1,LSR #22
        MOVEQ   v1,v1,LSL #8
        ADDEQ   a2,a2,#8
_ll_udiv_big_nosh8
        RSB     a1,a2,#32
        ORR     v1,v1,v2,LSR a1
        MOV     v2,v2,LSL a2
        SUB     a3,v3,a2
        CMP     a3,#1
        BCC     _ll_udiv_big_loopdone
        SUB     a3,a3,#1
        AND     a1,a3,#3
        RSB     a1,a1,#3
        ADDS    a1,a1,a1,LSL #1
        ADD     pc,pc,a1,LSL #3
        NOP
_ll_udiv_big_loop
        ADCS    v2,v2,v2
        ADCS    v1,v1,v1
        ADCS    a1,lr,v2
        ADCS    a2,ip,v1
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    v2,v2,v2
        ADCS    v1,v1,v1
        ADCS    a1,lr,v2
        ADCS    a2,ip,v1
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    v2,v2,v2
        ADCS    v1,v1,v1
        ADCS    a1,lr,v2
        ADCS    a2,ip,v1
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    v2,v2,v2
        ADCS    v1,v1,v1
        ADCS    a1,lr,v2
        ADCS    a2,ip,v1
        MOVCS   v2,a1
        MOVCS   v1,a2
        SUB     a3,a3,#4
        TST     a3,a3
        BPL     _ll_udiv_big_loop
_ll_udiv_big_loopdone
        MOV     a3,v2,LSR v3
        BIC     v2,v2,a3,LSL v3
        MOV     a2,#0
        ADCS    a1,v2,v2
        ADC     a2,a2,#0
        MOVS    lr,a4,LSL v3
        ADC     a2,a2,#0
        ADDS    a1,a1,lr
        ADC     a2,a2,#0
        MOV     a4,v1,LSR v3
        BIC     v1,v1,a4,LSL v3
        ORR     a3,a3,v1,ROR v3
        LDMIA   sp!,{v1-v3,pc}

_ll_udiv_ginormous
; Divisor is &8000000000000000 - &FFFFFFFFFFFFFFFF
; (v2,v1) is dividend
; (lr,ip) is divisor
        SUBS    a3,v2,lr
        SBCS    a4,v1,ip
        MOVCC   a3,v2
        MOVCC   a4,v1
        MOV     a2,#0
        ADC     a1,a2,a2
        LDMIA   sp!,{v1-v3,pc}

_ll_div0
; Divisor is 0
; Substitute some appropriate action here, if it matters to you
        MOV     a1,#-1
        MOV     a2,#-1
        MOV     a3,#0
        MOV     a4,#0
        LDMIA   sp!,{v1-v3,pc}


        END
