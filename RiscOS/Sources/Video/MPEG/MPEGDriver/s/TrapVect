
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>
        GET     Hdr:System

        GET     hdr.Debug

 [ Debugging=1 :LAND: DebugTrapVectors=1

cp15 CP 15
c6   CN 6
c5   CN 5
c0   CN 0

IRQsema *       &108

        IMPORT  DWrite_NewLine
        IMPORT  DWrite_Write0
        IMPORT  DWrite_WriteCT
        IMPORT  DWrite_WriteHex8
        IMPORT  DWrite_WriteC
        IMPORT  |x$stack_overflow|
        IMPORT  |calloc|
        IMPORT  |_memcpy|
        IMPORT  |free|

        AREA    |Asm$$Code|, CODE, READONLY

        ; extern void TrapVect_Claim (void);

        EXPORT  TrapVect_Claim
TrapVect_Claim
        FunctionEntry

        MOV     r0, #ErrorV
        ADR     r1, ErrorVHandler
        StaticBaseFromSL r2
        SWI     XOS_Claim

        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        SWI     XOS_Claim

        MOV     r0, #FileV
        ADR     r1, FileVHandler
        SWI     XOS_Claim

;        MOV     r0, #ArgsV
;        ADR     r1, ArgsVHandler
;        SWI     XOS_Claim
;
;        MOV     r0, #BGetV
;        ADR     r1, BGetVHandler
;        SWI     XOS_Claim
;
;        MOV     r0, #BPutV
;        ADR     r1, BPutVHandler
;        SWI     XOS_Claim
;
;        MOV     r0, #GBPBV
;        ADR     r1, GBPBVHandler
;        SWI     XOS_Claim
;
;        MOV     r0, #FindV
;        ADR     r1, FindVHandler
;        SWI     XOS_Claim
;
;        MOV     r0, #FSCV
;        ADR     r1, #FSCVHandler
;        SWI     XOS_Claim

        BL      InstallOSModuleTrap

        BL      InstallDataAbortHandler

        Return

 [ DebugProtectMemory=1
        ; extern void TrapVect_InitDataAbort
        ; (
        ;   void *ValidRangeMin,
        ;   void *ValidRangeMax,
        ;   void *CheckAddr1,
        ;   void *CheckAddr2,
        ;   void *CheckAddr3,
        ;   void *CheckAddr4,
        ;   void *CheckAddr5
        ; );

        EXPORT  TrapVect_InitDataAbort
TrapVect_InitDataAbort
        FunctionEntry
        StaticBaseFromSL ip
        LDRVar  lr, ip, DataAbortBlock
        ADD     lr, lr, #Workspace_ValidRangeMin
        STMIA   lr!, {a1-a4}
        ADD     a1, sp, #4 ; point at remaining arguments
        LDMIA   a1, {a2-a4}
        STMIA   lr!, {a2-a4}
        Return
 ]

        ; extern void TrapVect_Release (void);

        EXPORT  TrapVect_Release
TrapVect_Release
        FunctionEntry

        MOV     r0, #ErrorV
        ADR     r1, ErrorVHandler
        StaticBaseFromSL r2
        SWI     XOS_Release

        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        SWI     XOS_Release

        MOV     r0, #FileV
        ADR     r1, FileVHandler
        SWI     XOS_Release

;        MOV     r0, #ArgsV
;        ADR     r1, ArgsVHandler
;        SWI     XOS_Release
;
;        MOV     r0, #BGetV
;        ADR     r1, BGetVHandler
;        SWI     XOS_Release
;
;        MOV     r0, #BPutV
;        ADR     r1, BPutVHandler
;        SWI     XOS_Release
;
;        MOV     r0, #GBPBV
;        ADR     r1, GBPBVHandler
;        SWI     XOS_Release
;
;        MOV     r0, #FindV
;        ADR     r1, FindVHandler
;        SWI     XOS_Release
;
;        MOV     r0, #FSCV
;        ADR     r1, #FSCVHandler
;        SWI     XOS_Release

        BL      RemoveOSModuleTrap

        BL      RemoveDataAbortHandler

        Return

 [ DebugProtectMemory=1
        ; extern void TrapVect_InvalidatePages (void);

        EXPORT  TrapVect_InvalidatePages
TrapVect_InvalidatePages
        FunctionEntry "v1"
        StaticBaseFromSL ip
        SCPSR   I_bit, 0, lr,, v1
        LDRVar  a1, ip, Usage
        SUBS    a1, a1, #1
        STRVar  a1, ip, Usage, lr
        BNE     %FT99

        LDRVar  a1, ip, PTAddress
        TEQ     a1, #0
        BNE     %FT10

        ; We're first called from module init, so it's okay to call a SWI
        MOV     r0, #6
        MOV     r1, #0
        MOV     r2, #14
        SWI     XOS_ReadSysInfo ; r2 -> L2PT
        ADRVar  a1, ip, Stream
        MOV     a1, a1, LSR#12 ; round down to page boundary
        ADD     a1, r2, a1, LSL#2 ; a1 -> first page table entry
        STRVar  a1, ip, PTAddress, lr
        LDMIA   a1, {a3, a4}
        ADRVar  a2, ip, OriginalPTEntries
        STMIA   a2, {a3, a4}
        BIC     a3, a3, #&FF0 ; set all AP bits to 0 - assume R is set globally
        BIC     a4, a4, #&FF0
        ADRVar  a2, ip, ModdedPTEntries
        STMIA   a2, {a3, a4}
        B       %FT20
10
        ADRVar  a2, ip, ModdedPTEntries
        LDMIA   a2, {a3, a4}
20      STMIA   a1, {a3, a4}

        MOV     a1, a1, LSL#10 ; get aborting page address back
        MCR     cp15, 0, a1, c6, c0 ; purge first page in TLB
        ADD     a1, a1, #4096
        MCR     cp15, 0, a1, c6, c0 ; purge second page in TLB
99
        RestPSR v1,, c
        NOP
        Return  "v1"

        ; Local fast version

        MACRO
        Pages_InvalidateFast
        LDRVar  a1, ip, PTAddress
        ADRVar  a2, ip, ModdedPTEntries
        LDMIA   a2, {a3, a4}
        STMIA   a1, {a3, a4}
        MOV     a1, a1, LSL#10 ; get aborting page address back
        MCR     cp15, 0, a1, c6, c0 ; purge first page in TLB
        ADD     a1, a1, #4096
        MCR     cp15, 0, a1, c6, c0 ; purge second page in TLB
        MEND

        ; extern void TrapVect_RevalidatePages (void);

        EXPORT  TrapVect_RevalidatePages
TrapVect_RevalidatePages
        FunctionEntry "v1"
        StaticBaseFromSL ip
        SCPSR   I_bit, 0, lr,, v1
        LDRVar  a1, ip, Usage
        ADD     a1, a1, #1
        STRVar  a1, ip, Usage, lr
        TEQ     a1, #1
        BNE     %FT99

        LDRVar  a1, ip, PTAddress
        ADRVar  a2, ip, OriginalPTEntries
        LDMIA   a2, {a3, a4}
        STMIA   a1, {a3, a4}

        MOV     a1, a1, LSL#10 ; get aborting page address back
        MCR     cp15, 0, a1, c6, c0 ; purge first page in TLB
        ADD     a1, a1, #4096
        MCR     cp15, 0, a1, c6, c0 ; purge second page in TLB
99
        RestPSR v1,, c
        NOP
        Return  "v1"

        ; Local fast version

        MACRO
        Pages_RevalidateFast
        LDRVar  a1, ip, PTAddress
        ADRVar  a2, ip, OriginalPTEntries
        LDMIA   a2, {a3, a4}
        STMIA   a1, {a3, a4}
        MOV     a1, a1, LSL#10 ; get aborting page address back
        MCR     cp15, 0, a1, c6, c0 ; purge first page in TLB
        ADD     a1, a1, #4096
        MCR     cp15, 0, a1, c6, c0 ; purge second page in TLB
        MEND
 ]


ErrorVHandler
        Push    "lr"
        MOV     lr, #0
        LDR     lr, [lr, #IRQsema]
        TEQ     lr, #0           ; IRQ threaded?
        Pull    "pc", EQ         ; pass on immediately if not
        Push    "a1-a4,v6,sl"
        BL      SetupStack
        ADR     a1, %FT01
        BL      DWrite_Write0
        LDR     r0, [sp]
        BL      Equals
        LDR     r0, [sp]
        BL      PointsToError
        BL      DWrite_NewLine
        BL      RestoreStack
        Pull    "a1-a4,v6,sl,pc" ; pass on vector
01
        =       "ErrorV, R0", 0
        ALIGN

ByteVHandler
        Push    "lr"
        TEQ     r0, #19          ; OS_Byte 19?
        Pull    "pc", NE         ; pass on immediately if not
        MOV     lr, #0
        LDR     lr, [lr, #IRQsema]
        TEQ     lr, #0           ; IRQ threaded?
        Pull    "pc", EQ         ; pass on immediately if not
        Push    "a1-a4,v6,sl"
        BL      SetupStack
        ADR     a1, %FT01
        BL      DWrite_Write0
        LDR     r0, [sp, #7*4 + 4 + 4 + 1*4]
        SUB     r0, r0, #4       ; point at actual instruction
        BL      Equals
        ADR     a1, %FT02
        BL      DWrite_Write0
        LDR     r0, [sp, #7*4 + 4 + 4 + 4*4]
        BL      Equals
        BL      DWrite_NewLine
        BL      RestoreStack
        Pull    "a1-a4,v6,sl,pc" ; pass on vector
01
        =       "OS_Byte 19 called: PC", 0
02
        =       ", R12", 0
        ALIGN

FileVHandler
        Push    "lr"
        MOV     lr, #0
        LDR     lr, [lr, #IRQsema]
        TEQ     lr, #0           ; IRQ threaded?
        Pull    "pc", EQ         ; pass on immediately if not
        Push    "a1-a4,v6,sl"
        BL      SetupStack
        ADR     a1, %FT01
        BL      DWrite_Write0
        LDR     r0, [sp, #7*4 + 4 + 4 + 1*4]
        SUB     r0, r0, #4       ; point at actual instruction
        BL      Equals
        ADR     a1, %FT02
        BL      DWrite_Write0
        LDR     r0, [sp, #7*4 + 4 + 4 + 4*4]
        BL      Equals
        ADR     a1, %FT03
        BL      DWrite_Write0
        LDR     r0, [sp]
        BL      Equals
        ADR     a1, %FT04
        BL      DWrite_Write0
        LDR     r0, [sp, #1*4]
        BL      Equals
        LDR     r0, [sp, #1*4]
        BL      PointsTo
        BL      DWrite_NewLine
        BL      RestoreStack
        Pull    "a1-a4,v6,sl,pc" ; pass on vector
01
        =       "FileV: PC", 0
02
        =       ", R12", 0
03
        =       ", R0", 0
04
        =       ", R1", 0
        ALIGN

OSModuleHandler
        STR     lr, [sp, #-8]!   ; reserve space for return pc
        MRS     lr, CPSR
        Push    "lr"
        LDR     lr, OSModuleHandler-8 ; 2 words before us in copy -> routine
        STR     lr, [sp, #8]
        MOV     lr, #0
        LDR     lr, [lr, #IRQsema]
        TEQ     lr, #0           ; IRQ threaded?
        BEQ     OSModuleHandler_FastExit ; pass on immediately if not
        TEQ     r0, #6
        TEQNE   r0, #7
        BEQ     OSModuleHandler_FastExit ; not interested in claim/release
        Push    "r12"
        LDR     r12, OSModuleHandler-4 ; word before us in copy contains sb
OSModuleHandler_BranchInstruction
        B       {PC}             ; needs runtime modification
OSModuleHandler_FastExit
        Pull    "lr"
        MSR     CPSR_f, lr
        Pull    "lr, pc"
OSModuleHandler_CopyEnd
OSModuleHandler_StaticBit
        Push    "a1-a4, v5-v6, sl"
        BL      SetupStack
        ADR     r0, %FT01
        BL      DWrite_Write0
        LDR     r0, [sp]
        BL      DWrite_WriteHex8
        ADR     r0, %FT02
        BL      DWrite_Write0
        LDR     r0, [sp, #11*4 + 1*4]
        SUB     r0, r0, #4       ; point at actual instruction
        BL      Equals
        ADR     r0, %FT03
        BL      DWrite_Write0
        LDR     r0, [sp, #11*4 + 4*4]
        BL      Equals
        BL      DWrite_NewLine
        BL      RestoreStack
        Pull    "a1-a4, v5-v6, sl, r12, lr"
        MSR     CPSR_f, lr
        Pull    "lr, pc"
01
        =       "OS_Module", 0
02
        =       ": PC", 0
03
        =       ", R12", 0
        ALIGN


                       ^ 0
Workspace_Registers    # 15*4 ; r0-r12,PC,CPSR
Workspace_USRRegisters # 2*4  ; r13_usr,r14_usr
Workspace_FIQRegisters # 8*4  ; r8_fiq-r14_fiq,SPSR_fiq
Workspace_IRQRegisters # 3*4  ; r13_irq,r14_irq,SPSR_irq
Workspace_SVCRegisters # 3*4  ; r13_svc,r14_svc,SPSR_svc
Workspace_AURegisters  # 3*4  ; either abt or und versions of r13,r14,SPSR
Workspace_StaticBase   # 4    ; internal use only
Workspace_OldVector    # 4    ; internal use only
Workspace_VectorCPSR   # 4    ; internal use only
 [ DebugProtectMemory=1
Workspace_ValidRangeMin # 4   ; base of address range to do out-of-line store emulation
Workspace_ValidRangeMax # 4   ; end of etc (inclusive to byte granularity)
NCheckAddrs * 5
Workspace_CheckAddrs   # 4*NCheckAddrs ; addresses to check stored values before emulating
Workspace_ScratchR13   # 4
 ]
WorkspaceSize          * @

DataAbortHandler
        ; This code is copied into a block of RMA, so that we can use PC to
        ; address our private data, which is held immediately before the code

        ; Store aborting PC (advanced by 8 bytes)
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        ; Store current CPSR so we can restore it on entry to kernel
        MRS     r14_abt, CPSR
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_VectorCPSR
        ; Store CPSR that was in use at the time of the abort
        MRS     r14_abt, SPSR
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+14*4
 [ DebugProtectMemory=1
        ; Drop into SVC26 mode so that we can access banked registers when necessary
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC26_mode
        STMDB   r13, {a1-a4,ip,lr} ; deliberately no writeback, so r13_svc remains unchanged
        STR     r13, DataAbortHandler-WorkspaceSize+Workspace_ScratchR13 ; save r13_svc pc-relative
        ; See if we can interpret the abort
        MRC     cp15, 0, r13, c6, c0 ; get fault address
        LDR     r14, DataAbortHandler-WorkspaceSize+Workspace_ValidRangeMin
        CMP     r13, r14
        LDRHS   r14, DataAbortHandler-WorkspaceSize+Workspace_ValidRangeMax
        CMPHS   r14, r13
        BLO     DataAbortHandler_ThrowAbort ; outside our pages
        ; It's in our remapped pages - see if it's a location we're worried about
        LDR     r14, DataAbortHandler-WorkspaceSize+Workspace_CheckAddrs+0*4
        TEQ     r13, r14
        LDRNE   r14, DataAbortHandler-WorkspaceSize+Workspace_CheckAddrs+1*4
        TEQNE   r13, r14
        LDRNE   r14, DataAbortHandler-WorkspaceSize+Workspace_CheckAddrs+2*4
        TEQNE   r13, r14
        LDRNE   r14, DataAbortHandler-WorkspaceSize+Workspace_CheckAddrs+3*4
        TEQNE   r13, r14
        LDRNE   r14, DataAbortHandler-WorkspaceSize+Workspace_CheckAddrs+4*4
        TEQNE   r13, r14
        BNE     DataAbortHandler_NoValueCheck ; not a check location
        ; Check that the data abort happened in SVC26 mode - if not, it's not MPEGDriver
        LDR     r14, DataAbortHandler-WorkspaceSize+Workspace_Registers+14*4
        AND     r14, r14, #M32_bits
        TEQ     r14, #SVC26_mode
        BNE     DataAbortHandler_ThrowAbort ; wrong mode!
        ; Examine the instruction to check that it's an STR and so that we can
        ; look at the value we were storing to ensure that it was sane
        LDR     r14, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        LDR     r14, [r14, #-8]
        AND     r13, r14, #&0C500000
        TEQ     r13, #&04000000
        BNE     DataAbortHandler_ThrowAbort ; not an STR!
        MOV     r13, r14, LSL#16
        MOV     r13, r13, LSR#28 ; = Rd
        ORR     r13, r13, #&E1000000
        ORR     r13, r13, #&00A00000
        ORR     r13, r13, #&0000D000
        STR     r13, GrabRegisterInstruction
        LDR     r13, DataAbortHandler-WorkspaceSize+Workspace_ScratchR13
        LDR     r14, [r13, #-4]
GrabRegisterInstruction
        DCI     0 ; now r13 contains the word we were attempting to write
        CMP     r13, #&02bc0000
        RSBLSS  r14, r13, #&02100000
        TEQHI   r13, #0
        BHI     DataAbortHandler_ThrowAbort ; not a pointer to RMA or NULL!
        ; drop through...
DataAbortHandler_NoValueCheck
        LDR     r14, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        LDR     r14, [r14, #-8]
        AND     r13, r14, #&0C000000 ; we don't do STRH, so no need to check for all zero
        TEQ     r13, #&08000000
        BEQ     DataAbortHandler_HandleSTM
        TEQ     r13, #&0C000000
        BEQ     DataAbortHandler_ThrowAbort ; can't be bothered to do STC
        ANDS    r13, r14, #&01200000
        EOREQ   r14, r14, #&01800000 ; post-indexed STR(B) -> offset addressing with opposite sign
        TEQNE   r13, #&01000000 ; offset addressing doesn't need to change
        BEQ     DataAbortHandler_InstructionNowTweaked
        TEQ     r13, #&00200000
        BEQ     DataAbortHandler_ThrowAbort ; too hard to do STR(B)H - needs proper reconstruction
        BIC     r14, r14, #&02200000 ; pre-indexed STR(B) -> offset addressing, immediate offset
        BIC     r14, r14, #&00000F00
        BIC     r14, r14, #&000000FF ; and set offset to 0
DataAbortHandler_InstructionNowTweaked
        BIC     r14, r14, #&F0000000
        ORR     r14, r14, #&E0000000 ; make instruction unconditional
        STR     r14, EmulatedInstruction

        LDR     ip, DataAbortHandler-WorkspaceSize+Workspace_StaticBase
        Pages_RevalidateFast
        LDR     r13, DataAbortHandler-WorkspaceSize+Workspace_ScratchR13
        LDMDB   r13, {a1-a4,ip,lr}
EmulatedInstruction
        DCI     0 ; hope it doesn't involve pc
        LDR     ip, DataAbortHandler-WorkspaceSize+Workspace_StaticBase
        Pages_InvalidateFast
        LDR     r13, DataAbortHandler-WorkspaceSize+Workspace_ScratchR13
        LDMDB   r13, {a1-a4,ip,lr}
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: ABT32_mode
        LDR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        ; Return to instruction following the data abort
        SUBS    pc, r14_abt, #4
        LocalVar PTAddress
        LocalVar OriginalPTEntries
        LocalVar ModdedPTEntries
DataAbortHandler_HandleSTM
        TST     r14, #&00200000 ; has writeback messed up our base register?
        EORNE   r14, r14, #&01A00000 ; if so, invert IA<>DB / IB<>DA and clear writeback bit
        B       DataAbortHandler_InstructionNowTweaked

DataAbortHandler_ThrowAbort
        LDR     r13_svc, DataAbortHandler-WorkspaceSize+Workspace_ScratchR13
        LDR     r14_svc, [r13_svc, #-4] ; only other register that needs restoring
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: ABT32_mode
 ]
        ; Store non-banked registers
        ADR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers
        STMIA   r14_abt, {r0-r12}
        ; Store banked registers - USR/SYS mode
        ADR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_USRRegisters
        STMIA   r14_abt, {r13,r14}^
        ; Store banked registers - FIQ mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: FIQ32_mode
        STR     r8_fiq, DataAbortHandler-WorkspaceSize+Workspace_FIQRegisters+0*4
        MRS     r8_fiq, SPSR
        STR     r8_fiq, DataAbortHandler-WorkspaceSize+Workspace_FIQRegisters+7*4
        ADR     r8_fiq, DataAbortHandler-WorkspaceSize+Workspace_FIQRegisters+1*4
        STMIA   r8_fiq, {r9-r14}
        LDR     r8_fiq, DataAbortHandler-WorkspaceSize+Workspace_FIQRegisters+0*4
        ; Store banked registers - IRQ mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: IRQ32_mode
        STR     r13_irq, DataAbortHandler-WorkspaceSize+Workspace_IRQRegisters+0*4
        STR     r14_irq, DataAbortHandler-WorkspaceSize+Workspace_IRQRegisters+1*4
        MRS     r14_irq, SPSR
        STR     r14_irq, DataAbortHandler-WorkspaceSize+Workspace_IRQRegisters+2*4
        LDR     r14_irq, DataAbortHandler-WorkspaceSize+Workspace_IRQRegisters+1*4
        ; Store banked registers - SVC mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC32_mode
        STR     r13_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+0*4
        STR     r14_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
        MRS     r14_svc, SPSR
        STR     r14_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+2*4
        LDR     r14_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
        ; Store banked registers - UND mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: UND32_mode
        STR     r13_und, DataAbortHandler-WorkspaceSize+Workspace_AURegisters+0*4
        STR     r14_und, DataAbortHandler-WorkspaceSize+Workspace_AURegisters+1*4
        MRS     r14_und, SPSR
        STR     r14_und, DataAbortHandler-WorkspaceSize+Workspace_AURegisters+2*4
        LDR     r14_und, DataAbortHandler-WorkspaceSize+Workspace_AURegisters+1*4
        ; Switch to SVC mode so we can use its stack
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC26_mode
        Push    "a1-a4, v5-v6, sl, r12, lr_svc"
        ADR     v5, DataAbortHandler-WorkspaceSize
        LDR     r12, DataAbortHandler-WorkspaceSize+Workspace_StaticBase
DataAbortHandler_BranchInstruction
        B       {PC}    ; needs runtime modification
        Pull    "a1-a4, v5-v6, sl, r12, lr_svc"
        ; Restore state and pass control on to kernel
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: ABT32_mode
        LDR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_VectorCPSR
        MSR     CPSR_cxsf, r14_abt
        LDR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        LDR     PC, DataAbortHandler-WorkspaceSize+Workspace_OldVector
DataAbortHandler_CopyEnd
DataAbortHandler_StaticBit
        ; Entered in SVC26 mode with v5 -> Workspace, r12 = static reloc offset,
        ; lr -> return address in RMA block; a1-a4, v6, sl and lr are corruptible
        Push    "lr"
        BL      SetupStack
        ADR     r0, %FT01
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+13*4]
        SUB     r0, r0, #8       ; point at actual instruction
        BL      Equals
        ADRL    r0, %FT02
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+14*4]
        BL      Equals
        ADRL    r0, %FT03
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+12*4]
        BL      Equals
        BL      DWrite_NewLine
        ADR     r0, %FT04
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+0*4]
        BL      Equals
        ADRL    r0, %FT05
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+1*4]
        BL      Equals
        ADR     r0, %FT06
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+2*4]
        BL      Equals
        ADRL    r0, %FT07
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+3*4]
        BL      Equals
        BL      DWrite_NewLine
        ADR     r0, %FT08
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+4*4]
        BL      Equals
        ADRL    r0, %FT09
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+5*4]
        BL      Equals
        ADR     r0, %FT10
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+6*4]
        BL      Equals
        ADRL    r0, %FT11
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+7*4]
        BL      Equals
        BL      DWrite_NewLine
        ADR     r0, %FT12
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+8*4]
        BL      Equals
        ADRL    r0, %FT13
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+9*4]
        BL      Equals
        ADR     r0, %FT14
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+10*4]
        BL      Equals
        ADRL    r0, %FT15
        BL      DWrite_Write0
        LDR     r0, [v5, #Workspace_Registers+11*4]
        BL      Equals
        BL      DWrite_NewLine
        BL      RestoreStack
        Pull    "pc"
01
        =       "Data abort: PC", 0
02
        =       ", CPSR", 0
03
        =       ", R12", 0
04
        =       "  R0 ", 0
05
        =       ", R1 ", 0
06
        =       ", R2 ", 0
07
        =       ", R3 ", 0
08
        =       "  R4 ", 0
09
        =       ", R5 ", 0
10
        =       ", R6 ", 0
11
        =       ", R7 ", 0
12
        =       "  R8 ", 0
13
        =       ", R9 ", 0
14
        =       ", R10", 0
15
        =       ", R11", 0
        ALIGN



SetupStack
        MOV     sl, sp, LSR #20
        MOV     sl, sl, LSL #20  ; point sl at base of SVC stack
        ADD     sl, sl, #540     ; then where DWrite routines expect it
        LDR     v6, [sl, #-536]  ; save old client reloc modifier
        STR     r12, [sl, #-536] ; replace with ours
        MOV     pc, r14

RestoreStack
        STR     v6, [sl, #-536]  ; restore old client reloc modifier
        MOV     pc, r14

Equals
        Push    "r0,lr"
        ADR     a1, %FT01
        BL      DWrite_Write0
        Pull    "r0"
        BL      DWrite_WriteHex8
        Pull    "pc"
01
        =       " =", 0
        ALIGN

PointsTo
        CMP     r0, #&8000
        MOVCC   pc, lr
        Push    "r0,lr"
        ADR     a1, %FT01
        BL      DWrite_Write0
        Pull    "r0"
        BL      DWrite_WriteCT
        Pull    "pc"
01
        =       " -> ", 0
        ALIGN

PointsToError
        CMP     r0, #&8000
        MOVCC   pc, lr
        Push    "r0,lr"
        ADR     a1, %FT01
        BL      DWrite_Write0
        LDR     r0, [sp]
        LDR     a1, [r0]
        BL      DWrite_WriteHex8
        ADR     a1, %FT02
        BL      DWrite_Write0
        Pull    "r0"
        ADD     r0, r0, #4
        BL      DWrite_WriteCT
        Pull    "pc"
01
        =       " ->", 0
02
        =       ": ", 0
        ALIGN

InstallOSModuleTrap
        FunctionEntry "v1"
        MOV     a1, #(8+OSModuleHandler_CopyEnd-OSModuleHandler)/4
        MOV     a2, #4
        BL      |calloc|
        MOVS    v1, a1
        Return  "v1",, EQ

        ADD     a1, a1, #8
        addr    a2, OSModuleHandler
        MOV     a3, #OSModuleHandler_CopyEnd-OSModuleHandler
        BL      |_memcpy|

        LDR     a1, OSModuleHandler_BranchInstruction
        ADD     a2, v1, #8+OSModuleHandler_BranchInstruction-OSModuleHandler
        addr    a3, OSModuleHandler_StaticBit
        SUB     a3, a3, a2
        ADD     a1, a1, a3, ASR#2
        BIC     a1, a1, #&01000000 ; clear L bit in case of overflow
        STR     a1, [v1, #8+OSModuleHandler_BranchInstruction-OSModuleHandler]

;        MOV     r0, #1
;        ADD     r1, v1, #8
;        ADD     r2, r1, #OSModuleHandler_CopyEnd-OSModuleHandler-4
;        SWI     XOS_SynchroniseCodeAreas

        StaticBaseFromSL a1
        STRVar  v1, a1, OSModuleBlock, a4 ; save pointer to calloc block
        STR     a1, [v1, #4]  ; save copy of sb for OSModuleHandler to use
        LDR     a2, =&01F033FC + OS_Module*4 ; a2 -> OS_Module SWI vector
        LDR     a3, [a2]      ; load old OS_Module routine
        STR     a3, [v1]      ; and save away
        ADD     v1, v1, #8    ; point at our OS_Module handler
        STR     v1, [a2]      ; and store in vector table
        Return  "v1"

        LTORG

RemoveOSModuleTrap
        FunctionEntry
        StaticBaseFromSL lr
        LDRVar  a1, lr, OSModuleBlock
        LDR     a2, =&01F033FC + OS_Module*4 ; a2 -> OS_Module SWI vector
        LDR     a3, [a1]      ; retrieve old vector address
        STR     a3, [a2]      ; reinstate it
        BL      |free|
        Return

InstallDataAbortHandler
        FunctionEntry "v1"
        MOV     a1, #(WorkspaceSize+DataAbortHandler_CopyEnd-DataAbortHandler)/4
        MOV     a2, #4
        BL      |calloc|
        MOVS    v1, a1
        Return  "v1",, EQ

        ADD     a1, a1, #WorkspaceSize
        addr    a2, DataAbortHandler
        MOV     a3, #DataAbortHandler_CopyEnd-DataAbortHandler
        BL      |_memcpy|

        LDR     a1, DataAbortHandler_BranchInstruction
        ADD     a2, v1, #WorkspaceSize+DataAbortHandler_BranchInstruction-DataAbortHandler
        ADR     a3, DataAbortHandler_StaticBit
        SUB     a3, a3, a2
        ADD     a1, a1, a3, ASR#2
        ORR     a1, a1, #&01000000 ; set L bit in case of lack of overflow
        STR     a1, [v1, #WorkspaceSize+DataAbortHandler_BranchInstruction-DataAbortHandler]

;        MOV     r0, #1
;        ADD     r1, v1, #WorkspaceSize
;        ADD     r2, r1, #DataAbortHandler_CopyEnd-DataAbortHandler-4
;        SWI     XOS_SynchroniseCodeAreas

        StaticBaseFromSL a1
        STRVar  v1, a1, DataAbortBlock, a4 ; save pointer to calloc block
        STR     a1, [v1, #Workspace_StaticBase]
        MOV     r0, #4        ; Data abort vector number
        ORR     r0, r0, #&100 ; Claim
        ADD     r1, v1, #WorkspaceSize
        SWI     XOS_ClaimProcessorVector
        STR     r1, [v1, #Workspace_OldVector]
        Return  "v1"

RemoveDataAbortHandler
        FunctionEntry "v1"
        StaticBaseFromSL lr
        LDRVar  v1, lr, DataAbortBlock
        MOV     r0, #4        ; Data abort vector number
        LDR     r1, [v1, #Workspace_OldVector]
        ADD     r2, v1, #WorkspaceSize
        SWI     XOS_ClaimProcessorVector
        Return  "v1",, VS

        MOV     a1, v1
        BL      |free|
        Return  "v1"


        LocalVar OSModuleBlock
        LocalVar DataAbortBlock
 [ DebugProtectMemory=1
        LocalVar Usage
        LocalVar Stream
 ]

        AREA    |Asm$$Data|, DATA

OSModuleBlock
        DCD     0
DataAbortBlock
        DCD     0
 [ DebugProtectMemory=1
        EXPORT  PTAddress
PTAddress
        DCD     0 ; -> first page table entry
OriginalPTEntries
        %       2*4
ModdedPTEntries
        %       2*4
Usage
        DCD     1
 ]

 [ DebugProtectMemory=1
        AREA    |Stream$$Data|, DATA

        EXPORT  Stream
FirebreakPre
        %       4092
Stream
        %       &99c ; current size of program_element_structure_t
FirebreakPost
        %       8196
 ]

 ]

        END
