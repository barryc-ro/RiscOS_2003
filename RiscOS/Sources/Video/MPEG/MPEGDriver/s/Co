; /****** Co.s ***************************************************************
;
; Project:	STB-400
; Component:	MPEGDriver
; This file:	Support for SVC mode coroutines
;
; Copyright 1999 Pace Micro Technology plc. All rights reserved.
;
; This material is the confidential trade secret and proprietary information
; of Pace Micro Technology plc. It may not be reproduced, used, sold, or
; transferred to any third party without the prior written consent of
; Pace Micro Technology plc.
;
; History:
; Date		Who	Change
; ----------------------------------------------------------------------------
; 12/10/1999	BJGA	Created
; 02/12/1999	BJGA	Updated to use Hdr:APCS.<APCS>
;
; ***************************************************************************/


; Included headers
; ----------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:APCS.<APCS>
        GET     Hdr:ModHand

 [ No26bitCode
        ! 1, "This file contains code that requires 26-bit compatibility, and so needs attention"
 ]


; Constants
; ---------

; Size of stack (in bytes) to allocate to each coroutine
StackChunkSize          *       4096

; Structure of stack chunk
                        ^       0
stack_base              #       0
stack_lib_reloc         #       4
stack_client_reloc      #       4
stack_reserved_words    #       4*5
stack_extension_ws      #       512
stack_sl                #       StackChunkSize
stack_sp                #       0
stack_size              #       0

; Structure of co_routine block
; Note we don't store floating point registers -
; we shouldn't be accessing them at all from supervisor mode
                        ^       0
co_routine_v1           #       4
co_routine_v2           #       4
co_routine_v3           #       4
co_routine_v4           #       4
co_routine_v5           #       4
co_routine_v6           #       4
co_routine_sl           #       4
co_routine_fp           #       4
co_routine_sp           #       4
co_routine_lr           #       4
co_routine_size         #       0


        AREA    |Asm$$Code|, CODE, READONLY


; Exported functions
; ------------------

        EXPORT  Co_Create
; extern co_routine Co_Create (const co_routine_function *function);
; a1 -> buffer to fill with co_routine structure for new coroutine
; a2 -> coroutine function to invoke on next Co_SwitchTo
; returns void
Co_Create
        FunctionEntry "a1, v1, v2, v3, v4, v5, v6"
        STMIA   a1, {v1, v2, v3, v4, v5, v6}    ; clone coroutine v1-v6 from current v1-v6
        MOV     a1, #ModHandReason_Claim
        MOV     a3, #0          ; data abort if claim fails
        LDR     a4, =stack_size
        SWI     XOS_Module      ; claim coroutine stack chunk - let's just hope this doesn't fail
        Pull    "a1"            ; retrieve a1 from stack
        SUB     a4, sl, #stack_sl - stack_base          ; copy reloc offsets and reserved words
        LDMIA   a4, {a4, v1, v2, v3, v4, v5, v6}        ; from current stack
        STMIA   a3, {a4, v1, v2, v3, v4, v5, v6}        ; to new stack chunk
        ADD     v1, a3, #stack_sl               ; coroutine sl
        MOV     v2, #0                          ; coroutine fp
        ADD     v3, v1, #stack_sp - stack_sl    ; coroutine sp
        BIC     a2, a2, #ARM_CC_Mask            ; knock out function pointer PSR bits
        ORR     a2, a2, #I_bit :OR: SVC_mode    ; and force them to SVC mode with IRQs disabled
        ORR     v4, a2, v4                      ; combine them to create coroutine lr
        ADD     a1, a1, #co_routine_sl
        STMIA   a1, {v1, v2, v3, v4}            ; write coroutine sl, fp, sp, lr
        Return  "v1, v2, v3, v4, v5, v6"


        EXPORT  Co_SwitchTo
; extern void *Co_SwitchTo (const co_routine *routine, void *param);
; a1 -> co_routine block for coroutine to switch to
; a2 = parameter to pass to coroutine (as an argument, or returned from Co_SwitchTo)
; returns parameter passed by the coroutine when it eventually calls Co_SwitchTo itself
Co_SwitchTo
        StaticBaseFromSL ip
        MOV     a3, a1          ; move |routine| out of the way
        MOV     a1, a2          ; so we can set up a1 for return to the new routine
        LDRVar  a2, ip, CurrentCoRoutine        ; save context of old routine
        STMIA   a2, {v1, v2, v3, v4, v5, v6, sl, fp, sp, lr}
        STRVar  a3, ip, CurrentCoRoutine, a2    ; and load context of new routine
        LDMIA   a3, {v1, v2, v3, v4, v5, v6, sl, fp, sp, pc}^


        EXPORT  Co_Destroy
; extern void Co_Destroy (const co_routine *routine);
; a1 -> co_routine block for coroutine to destroy
Co_Destroy
        FunctionEntry
        LDR     a3, [a1, #co_routine_sl]
        SUB     a3, a3, #stack_sl - stack_base  ; point at coroutine stack chunk
        MOV     a1, #ModHandReason_Free
        SWI     XOS_Module                      ; and free it
        Return


; Static variable indirection table
; ---------------------------------

        EXPORTVar Co_MainRoutine
        LocalVar CurrentCoRoutine


        AREA    |Asm$$Data|, DATA


; Exported global static variables
; --------------------------------

Co_MainRoutine
        DCD     MainRoutineBlock
; const pointer to MainRoutineBlock


; Local static variables
; ----------------------

CurrentCoRoutine
; pointer to co_routine block for currently executing routine
        DCD     MainRoutineBlock        ; default value

MainRoutineBlock        %       co_routine_size
; co_routine block for main routine


        END
