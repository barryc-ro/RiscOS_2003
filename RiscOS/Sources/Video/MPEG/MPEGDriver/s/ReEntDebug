
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:APCS.<APCS>
        GET     Hdr:NdrDebug

        GET     hdr.Debug

 [ Debugging=1 :LAND: DebugReentrancy=1

        IMPORT  DWrite_NewLine
        IMPORT  DWrite_Write0
        IMPORT  DWrite_WriteHex8
        IMPORT  DWrite_WriteC


; Useful addresses in zero page
; -----------------------------

IRQsema *       &108



        AREA    |Asm$$Code|, CODE, READONLY


 [ DebugToScreen=1

; extern void ReEntDebug_OutputDebug (unsigned int depth);

        EXPORT  ReEntDebug_OutputDebug
ReEntDebug_OutputDebug
        FunctionEntry "v1-v6,sl,fp"

        MOV     v5, a1

        ADR     r0, titlestring
        BL      DWrite_Write0
        BL      DWrite_NewLine

        MOV     v6, #0
        LDR     v6, [v6, #IRQsema]
        TEQ     v6, #0
        BEQ     %FT09
01      ; v6 -> old IRQsema, r1-r3, r11, r12, SPSR_irq, r0, lr_irq-4
        BL      DWrite_NewLine

        ADRL    a1, R0str
        BL      DWrite_Write0
        LDR     a1, [v6, #7*4]
        BL      DWrite_WriteHex8
        ADRL    a1, R1str
        BL      DWrite_Write0
        LDR     a1, [v6, #1*4]
        BL      DWrite_WriteHex8
        ADRL    a1, R2str
        BL      DWrite_Write0
        LDR     a1, [v6, #2*4]
        BL      DWrite_WriteHex8
        ADRL    a1, R3str
        BL      DWrite_Write0
        LDR     a1, [v6, #3*4]
        BL      DWrite_WriteHex8
        BL      DWrite_NewLine

        ADRL    a1, R11str
        BL      DWrite_Write0
        LDR     a1, [v6, #4*4]
        BL      DWrite_WriteHex8
        ADRL    a1, R12str
        BL      DWrite_Write0
        LDR     a1, [v6, #5*4]
        BL      DWrite_WriteHex8
        BL      DWrite_NewLine

        ADRL    a1, PCstr
        BL      DWrite_Write0
        LDR     a1, [v6, #8*4]
        BL      DWrite_WriteHex8
        ADRL    a1, CPSRstr
        BL      DWrite_Write0
        LDR     a1, [v6, #6*4]
        MOV     v1, a1
        BL      DWrite_WriteHex8
        ADRL    a1, Flagstr
        BL      DWrite_Write0
        MOV     a1, #"N"
        TST     v1, #1:SHL:31
        ORREQ   a1, a1, #32
        BL      DWrite_WriteC
        MOV     a1, #"Z"
        TST     v1, #1:SHL:30
        ORREQ   a1, a1, #32
        BL      DWrite_WriteC
        MOV     a1, #"C"
        TST     v1, #1:SHL:29
        ORREQ   a1, a1, #32
        BL      DWrite_WriteC
        MOV     a1, #"V"
        TST     v1, #1:SHL:28
        ORREQ   a1, a1, #32
        BL      DWrite_WriteC
        MOV     a1, #"I"
        TST     v1, #1:SHL:7
        ORREQ   a1, a1, #32
        BL      DWrite_WriteC
        MOV     a1, #"F"
        TST     v1, #1:SHL:6
        ORREQ   a1, a1, #32
        BL      DWrite_WriteC
        ADR     a1, Modestr
        BL      DWrite_Write0
        ADR     a1, Modes
        AND     v1, v1, #&1F
        ADD     a1, a1, v1, LSL #3
        BL      DWrite_Write0
        BL      DWrite_NewLine

        SUBS    v5, v5, #1
        ADREQL  a1, mpeginterrupthere
        BLEQ    DWrite_Write0

        LDR     v6, [v6]
        TEQ     v6, #0
        BNE     %BT01
09
        Return  "v1-v6,sl,fp"


 |


debug           SETL    {TRUE}
pdebug_module   SETL    {TRUE}
debug_irqsafe   SETL    {TRUE}


; extern void ReEntDebug_OutputDebug (void);

        EXPORT  ReEntDebug_OutputDebug
ReEntDebug_OutputDebug
        FunctionEntry "v1-v6,sl,fp"

        WritePSRc SVC_mode, lr,, r0
        NOP
        Push    "r0,lr_svc"

        Debug_Open ""

        ; Print a few lines of stuff to try to persuade PDebug to synchronise itself
        ADR     r0, paddingstring
        BL      Neil_Write0
        BL      Neil_Write0
        BL      Neil_Write0
        BL      Neil_Write0
        BL      Neil_Write0
        BL      Neil_Write0
        BL      Neil_Write0
        BL      Neil_Write0
        ADR     r0, titlestring
        BL      Neil_Write0
        BL      Neil_NewLine

        MOV     ip, #0
        LDR     ip, [ip, #IRQsema]
01      LDMIA   ip, {r3-r11}            ; old IRQsema, r1-r3, r11, r12, SPSR_irq, r0, lr_irq-4

        BL      Neil_NewLine

        ADRL    r0, R0str
        BL      Neil_Write0
        MOV     r0, r10
        BL      Neil_ConvertHex8
        ADRL    r0, R1str
        BL      Neil_Write0
        MOV     r0, r4
        BL      Neil_ConvertHex8
        ADRL    r0, R2str
        BL      Neil_Write0
        MOV     r0, r5
        BL      Neil_ConvertHex8
        ADRL    r0, R3str
        BL      Neil_Write0
        MOV     r0, r6
        BL      Neil_ConvertHex8
        BL      Neil_NewLine

        ADRL    r0, R11str
        BL      Neil_Write0
        MOV     r0, r7
        BL      Neil_ConvertHex8
        ADRL    r0, R12str
        BL      Neil_Write0
        MOV     r0, r8
        BL      Neil_ConvertHex8
        BL      Neil_NewLine

        ADRL    r0, PCstr
        BL      Neil_Write0
        MOV     r0, r11
        BL      Neil_ConvertHex8
        ADRL    r0, CPSRstr
        BL      Neil_Write0
        MOV     r0, r9
        BL      Neil_ConvertHex8
        ADRL    r0, Flagstr
        BL      Neil_Write0
        MOV     r0, #"N"
        TST     r9, #1:SHL:31
        ORREQ   r0, r0, #32
        BL      Neil_WriteC
        MOV     r0, #"Z"
        TST     r9, #1:SHL:30
        ORREQ   r0, r0, #32
        BL      Neil_WriteC
        MOV     r0, #"C"
        TST     r9, #1:SHL:29
        ORREQ   r0, r0, #32
        BL      Neil_WriteC
        MOV     r0, #"V"
        TST     r9, #1:SHL:28
        ORREQ   r0, r0, #32
        BL      Neil_WriteC
        MOV     r0, #"I"
        TST     r9, #1:SHL:7
        ORREQ   r0, r0, #32
        BL      Neil_WriteC
        MOV     r0, #"F"
        TST     r9, #1:SHL:6
        ORREQ   r0, r0, #32
        BL      Neil_WriteC
        ADR     r0, Modestr
        BL      Neil_Write0
        ADR     r0, Modes
        AND     lr, r9, #&1F
        ADD     r0, r0, lr, LSL #3
        BL      Neil_Write0
        BL      Neil_NewLine

        MOVS    ip, r3
        BNE     %BT01

        Pull    "r0,lr_svc"
        RestPSR r0,, c
        NOP

        Debug_Close

        Return  "v1-v6,sl,fp"

paddingstring
        =       "****************************************", 0
        ALIGN


        InsertNDRDebugRoutines

 ]


titlestring
        =       "Interrupts enabled, unwinding IRQ stack:", 0
R0str   =       "R0  =", 0
R1str   =       "  R1   =", 0
R2str   =       "  R2  =", 0
R3str   =       "  R3 =", 0
R11str  =       "R11 =", 0
R12str  =       "  R12  =", 0
PCstr   =       "PC  =", 0
CPSRstr =       "  CPSR =", 0
Flagstr =       "  Flags = ", 0
Modestr =       "  Mode = ", 0
        ALIGN
Modes   =       "USR26", 0
        ALIGN
        =       "FIQ26", 0
        ALIGN
        =       "IRQ26", 0
        ALIGN
        =       "SVC26", 0
        ALIGN
        =       "00100", 0
        ALIGN
        =       "00101", 0
        ALIGN
        =       "00110", 0
        ALIGN
        =       "00111", 0
        ALIGN
        =       "01000", 0
        ALIGN
        =       "01001", 0
        ALIGN
        =       "01010", 0
        ALIGN
        =       "01011", 0
        ALIGN
        =       "01100", 0
        ALIGN
        =       "01101", 0
        ALIGN
        =       "01110", 0
        ALIGN
        =       "01111", 0
        ALIGN
        =       "USR32", 0
        ALIGN
        =       "FIQ32", 0
        ALIGN
        =       "IRQ32", 0
        ALIGN
        =       "SVC32", 0
        ALIGN
        =       "10100", 0
        ALIGN
        =       "10101", 0
        ALIGN
        =       "10110", 0
        ALIGN
        =       "ABT32", 0
        ALIGN
        =       "11000", 0
        ALIGN
        =       "11001", 0
        ALIGN
        =       "11010", 0
        ALIGN
        =       "UND32", 0
        ALIGN
        =       "11100", 0
        ALIGN
        =       "11101", 0
        ALIGN
        =       "11110", 0
        ALIGN
        =       "SYS32", 0
        ALIGN
mpeginterrupthere
        =       "MPEG interrupt handler called at this point", 0


        ALIGN

 ]

        END
