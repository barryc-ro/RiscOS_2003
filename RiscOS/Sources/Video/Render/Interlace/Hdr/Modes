; > Hdr.Modes
; Contains all mode dependent details

; Indexes from OtherInfo to variables

				^	0
OtherIndex_PalIndex		#	4
OtherIndex_YRes			#	4
OtherIndex_Offset1To2		#	4	; offset in physical space from start of screen memory to start of 2nd field
OtherIndex_PageOffset2ndField	#	4	; offset in physical space from start of screen memory to page containing
						; start of 2nd field (which doesn't start on a page boundary)
OtherIndex_ScreenSize		#	4
OtherIndex_LineLength		#	4
OtherIndex_ModeIndex		#	4	; index of mode number in our list
OtherIndex_RecordSize		#	0

	GBLA	VIDCListSize

; Indexes into VIDC list

	^	0
VIDCListIndex_Type	#	4
VIDCListIndex_PixDepth	#	4
VIDCListIndex_HSW	#	4
VIDCListIndex_HBP	#	4
VIDCListIndex_HB1	#	4
VIDCListIndex_HDIS	#	4
VIDCListIndex_HB2	#	4
VIDCListIndex_HFP	#	4
VIDCListIndex_VSW	#	4
VIDCListIndex_VBP	#	4
VIDCListIndex_VB1	#	4
VIDCListIndex_VDIS	#	4
VIDCListIndex_VB2	#	4
VIDCListIndex_VFP	#	4
VIDCListIndex_PixelRate	#	4
VIDCListIndex_SyncPol	#	4
VIDCListIndex_VideoControlParameters # 0

VideoControlParametersIndex_Interlaced * 12

	MACRO
	ModeStuff $mode, $xres, $yres, $pixdepth, $hsw, $hbp, $hb1, $hdis, $hb2, $hfp, $vsw, $vbp, $vb1, $vdis, $vb2, $vfp, $pixrate
nummodes SETA	nummodes+1
 [ $yres > maxyres
maxyres SETA	$yres
 ]
modeno_$nummodes	*	$mode
linelen_$mode		*	($xres :SHL: $pixdepth) :SHR: 3
 [ Use1MBPerField
offset1to2_$mode	*	1024* 1024 + (linelen_$mode/2)	; offset from even to odd field
 |
offset1to2_$mode        *	512 * 1024 + (linelen_$mode/2)	; offset from even to odd field
 ]
;fakescrsize_$mode	*   	(offset1to2_$mode + linelen_$mode*($yres/2) + &FFF) :AND: :NOT: &FFF
fieldsize_$mode		*	linelen_$mode*($yres/2)
firstfieldsize_$mode	*	(fieldsize_$mode + &FFF) :AND: :NOT: &FFF
secondfieldsize_$mode	*	(fieldsize_$mode + linelen_$mode/2 +&FFF):AND::NOT:&FFF
fakescrsize_$mode	*	firstfieldsize_$mode + secondfieldsize_$mode
framelines_$mode	*	2*(($vsw)+($vbp)+($vb1)+($vdis)+($vb2)+($vfp))+1
linepixels_$mode	*	($hsw)+($hbp)+($hb1)+($hdis)+($hb2)+($hfp)
framepixels_$mode	*	framelines_$mode * linepixels_$mode
framerate_$mode		*	($pixrate * 1000 + framepixels_$mode/2) / framepixels_$mode

 [ $pixdepth <= 3	; <=8bpp
PalIndexValue_$mode	*	$pixdepth
 |
  [ $pixdepth = 4	; 16bpp
PalIndexValue_$mode 	* 	6
  |
  ASSERT $pixdepth = 5   ; 32bpp
PalIndexValue_$mode 	* 	7
  ]
 ]

 [ UseModeDescriptors
ModeDescriptor_$nummodes
	&	1	; descriptor type
	&	$xres
	&	$yres
	&	$pixdepth
	&	framerate_$mode
 |
MyVIDCList_$nummodes
	&	3			; VIDC list type
	&	$pixdepth
	&	$hsw, $hbp, $hb1, $hdis, $hb2, $hfp
	&	$vsw, $vbp, $vb1, $vdis, $vb2, $vfp
	&	$pixrate
	&	0			; sync polarity
	&	-1			; end of list

VIDCListSize SETA	{PC} - MyVIDCList_$nummodes

OtherInfo_$nummodes
	&	PalIndexValue_$mode
	&	$yres
	&	firstfieldsize_$mode + (linelen_$mode/2)
	&	firstfieldsize_$mode
	&	fakescrsize_$mode
	&	offset1to2_$mode
	&	nummodes-1

MyWSList_$nummodes
	&	0
	&	28
 ] ; UseModeDescriptors

; The following either forms part of MyWSList_$nummodes, or in the case of UseModeDescriptors, part of ModeDescriptor_$nummodes

  [ $pixdepth = 3
	&	VduExt_ModeFlags, Flag_HardScrollDisabled :OR: Flag_FullPalette :OR: Flag_InterlacedMode
  |
        &       VduExt_ModeFlags, Flag_HardScrollDisabled :OR: Flag_InterlacedMode
  ]
        &       VduExt_ScrRCol, ($xres :SHR: 3)-1
        &       VduExt_ScrBRow, ($yres :SHR: 3)-1
  [ $pixdepth = 3
	&	VduExt_NColour, 255
  |
        &       VduExt_NColour, (1 :SHL: (1 :SHL: $pixdepth))-1
  ]
        &       VduExt_XEigFactor, 1
        &       VduExt_YEigFactor, 1
        &       VduExt_LineLength, offset1to2_$mode
        &       VduExt_ScreenSize, fakescrsize_$mode
        &       VduExt_YShftFactor, 0
        &       VduExt_Log2BPP, $pixdepth
        &       VduExt_Log2BPC, $pixdepth
        &       VduExt_XWindLimit, $xres-1
        &       VduExt_YWindLimit, $yres-1
        &       -1

	MEND

; Now the actual modes

	MACRO
	OutputModeInfo
	GBLA	nummodes
	GBLA	modeno
	GBLA	maxyres
nummodes SETA   0
maxyres	SETA	0

	ModeStuff	50, 768,576,4, 82,102,0,768,0,8, 3,19,0,288,0,2, 15000
	ModeStuff	51, 720,576,4, 74,70,0,720,0,0, 3,19,0,288,0,2, 13500
	ModeStuff	52, 768,576,5, 82,102,0,768,0,8, 3,19,0,288,0,2, 15000
	ModeStuff	53, 720,576,5, 74,70,0,720,0,0, 3,19,0,288,0,2, 13500
; Old mode 55
;	ModeStuff	55, 768,480,4, 82,66,0,768,0,44, 3,18,0,240,0,1, 15000
	ModeStuff	55, 768,480,4, 72,106,0,768,0,8, 3,18,0,240,0,1, 15000
	ModeStuff	56, 640,480,3, 64,74,40,640,40,0, 3,18,0,240,0,1, 13500
	ModeStuff	57, 640,480,3, 74,70,40,640,40,0, 3,19,24,240,24,2, 13500 ; PAL version of mode 56
	ModeStuff	58, 640,480,4, 64,74,40,640,40,0, 3,18,0,240,0,1, 13500
	ModeStuff	59, 640,480,4, 74,70,40,640,40,0, 3,19,24,240,24,2, 13500 ; PAL version of mode 58

; For NTSC desktop use

	ModeStuff	60, 640,400,3, 64,74,40,640,40,0, 3,18,20,200,20,1, 13500
	ModeStuff	61, 640,400,4, 64,74,40,640,40,0, 3,18,20,200,20,1, 13500

; Until we get the extensible Interlace module, just add the modes that Macrovision needs explicitly

	ModeStuff	64, 704,576,3, 64,62,0,704,0,34, 3,19,0,288,0,2, 13500	; Video path b) - anti-taping off
	ModeStuff	65, 704,576,3, 64,62,0,704,0,34, 3,19,0,288,0,2, 13500	; Video path c) - anti-taping on
;	ModeStuff	64, 704,576,3, 74,78,0,704,0,8, 3,19,0,288,0,2, 13500	; Video path b) - anti-taping off
;	ModeStuff	65, 704,576,3, 74,78,0,704,0,8, 3,19,0,288,0,2, 13500	; Video path c) - anti-taping on
	ModeStuff	66, 704,480,3, 64,82,0,704,0,8, 3,18,0,240,0,1, 13500	; NTSC versions of same
	ModeStuff	67, 704,480,3, 64,82,0,704,0,8, 3,18,0,240,0,1, 13500
; NB Macrovision module itself makes the difference between modes 64 & 65, 66 & 67 by sitting on Service_ModeChange or some such.

 [ UseModeDescriptors
maxyres	SETA	1280
 ]

ModeListTable
modeno	SETA	1
	WHILE 	modeno <= nummodes
10
	&	modeno_$modeno
 [ UseModeDescriptors
	&	ModeDescriptor_$modeno - %BT10
 |
	&	MyVIDCList_$modeno - %BT10
	&	MyWSList_$modeno - %BT10
	&	OtherInfo_$modeno - %BT10
 ]
modeno	SETA	modeno + 1
	WEND
	&	-1			; end of list
	MEND

        LNK     s.Common
