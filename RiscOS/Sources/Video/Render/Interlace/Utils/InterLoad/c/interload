#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

static _kernel_oserror *err_copy(_kernel_oserror *err)
{
  static _kernel_oserror errbuf;
  
  if(err)
  {
    memcpy(&errbuf, err, sizeof(errbuf));
    return &errbuf;
  }
  return err;
}

static void err_exit(_kernel_oserror *err)
{
  _kernel_raise_error(err);
}

int main(int argc, char *argv[])
{
  _kernel_swi_regs regs1, regs2;
  _kernel_oserror *err1, *err2;
  int mode=0;
  char *file;
  char *p;

  switch(argc)
  {
  case 2:
    file=argv[1];
    break;
  case 3:
    mode=(int)strtoul(argv[1], &p, 0);
    if(argv[1][0]==0 || *p)
    {
      fprintf(stderr, "Bad number: '%s'\n", argv[1]);
      return 1;
    }
    file=argv[2];
    break;
  default:
    fprintf(stderr, "Usage: %s [mode] <file>\n", argv[0]);
    return 1;
  }
  
  regs1.r[0]=1; /* Get screen mode */
  err1=_kernel_swi(OS_ScreenMode, &regs1, &regs1);
  if(err1)
    err_exit(err1);
  
  regs2.r[0]=0; /* Set screen mode */
  regs2.r[1]=mode;
  err2=_kernel_swi(OS_ScreenMode, &regs2, &regs2);
  if(err2)
    err_exit(err2);
  
  regs2.r[0]=1; /* Load module */
  regs2.r[1]=(int)file;
  err2=err_copy(_kernel_swi(OS_Module, &regs2, &regs2));
  
  regs1.r[0]=0; /* Set screen mode back */
  err1=_kernel_swi(OS_ScreenMode, &regs1, &regs1);
  
  err_exit(err2?err2:err1);
  
  return 0;
}
