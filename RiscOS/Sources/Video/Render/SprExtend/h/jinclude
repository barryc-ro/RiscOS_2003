/*
 * jinclude.h
 *
 * Copyright (C) 1991, 1992, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This is the central file that's #include'd by all the JPEG .c files.
 * Its purpose is to provide a single place to fix any problems with
 * including the wrong system include files.
 * You can edit these declarations if you use a system with nonstandard
 * system include files.
 */

/* RISCOS thing - only allow this file to be included once */
#ifndef jinclude__
#define jinclude__


/*
 * Normally the __STDC__ macro can be taken as indicating that the system
 * include files conform to the ANSI C standard.  However, if you are running
 * GCC on a machine with non-ANSI system include files, that is not the case.
 * In that case change the following, or add -DNONANSI_INCLUDES to your CFLAGS.
 */

#ifdef __STDC__
#ifndef NONANSI_INCLUDES
#define INCLUDES_ARE_ANSI       /* this is what's tested before including */
#endif
#endif

/*
 * We need the size_t typedef, which defines the parameter type of malloc().
 * In an ANSI-conforming implementation this is provided by <stdio.h>,
 * but on non-ANSI systems it's more likely to be in <sys/types.h>.
 * On some not-quite-ANSI systems you may find it in <stddef.h>.
 */

#ifndef INCLUDES_ARE_ANSI       /* shouldn't need this if ANSI C */
#include <sys/types.h>
#endif
#ifdef __SASC                   /* Amiga SAS C provides it in stddef.h. */
#include <stddef.h>
#endif

/*
 * In ANSI C, and indeed any rational implementation, size_t is also the
 * type returned by sizeof().  However, it seems there are some irrational
 * implementations out there, in which sizeof() returns an int even though
 * size_t is defined as long or unsigned long.  To ensure consistent results
 * we always use this SIZEOF() macro in place of using sizeof() directly.
 */

#undef SIZEOF                   /* in case you included X11/xmd.h */
#define SIZEOF(object)  ((size_t) sizeof(object))

/*
 * We need the memcpy() and strcmp() functions, plus memory zeroing.
 * ANSI and System V implementations declare these in <string.h>.
 * BSD doesn't have the mem() functions, but it does have bcopy()/bzero().
 * NOTE: we assume the size parameters to these functions are of type size_t.
 * Insert casts in these macros if not!
 */

#ifdef INCLUDES_ARE_ANSI
  #include <string.h>
  #define MEMZERO(voidptr,size)   memset((voidptr), 0, (size))
#else /* not ANSI */
  #ifdef BSD
    #include <strings.h>
    #define MEMZERO(voidptr,size)   bzero((voidptr), (size))
    #define memcpy(dest,src,size)   bcopy((src), (dest), (size))
  #else /* not BSD, assume Sys V or compatible */
    #include <string.h>
    #define MEMZERO(voidptr,size)   memset((voidptr), 0, (size))
  #endif /* BSD */
#endif /* ANSI */


/* Now include the portable JPEG definition files. */

#include "jconfig.h"

#include "jpegdata.h"

/* Assembler coded stuff */
#ifdef ASMHUFF
extern void
asm_huff_decode_blocks(decompress_info_ptr cinfo, JBLOCK block,
                   HUFF_TBL *dctbl, HUFF_TBL *actbl, QUANT_TBL_PTR quanttbl,
                   int *last_dc_val, int nblocks);

extern void
asm_huff_skip_blocks(decompress_info_ptr cinfo, JBLOCK block,
                 HUFF_TBL *dctbl, HUFF_TBL *actbl, QUANT_TBL_PTR quanttbl,
                 int *last_dc_val, int nblocks);

extern void panic_exit(int i);
#endif

extern void asm_j_rev_dct(decompress_info_ptr cinfo, JBLOCK block, int count);
extern void asm_mono_convert_block(JBLOCK jblock, int *outptr, int outoffset);
extern void asm_mono_convert_block_8(JBLOCK jblock, int *outptr, int outoffset);
extern void asm_colour_convert_block(JBLOCK jblock, int *outptr, int outoffset);
extern void asm_colour_convert_block_16(JBLOCK jblock, short int *outptr, int outoffset);
extern void asm_colour_convert_block_8(JBLOCK jblock, char *outptr, int outoffset);
extern void asm_diffuse_line_to_8bpp(int *line, int linelength, char *output, char *table32k);
extern void asm_diffuse_to_8bpp(int *line, int linelength, char *output, char *table32k, int nlines, int linestep, int *palette_data);
extern char *asm_get_table32k(int *palette_data/*void*/);
extern void asm_convert_to_8bpp_grey(int *line, int linelength, char *output, int nlines, int linestep);
extern void asm_diffuse_to_24bpp(int *line, int linelength, int *output, char *table32k, int nlines, int linestep, int *palette_data);

#endif
