/*
 * jpegdata.h
 *
 * Copyright (C) 1991, 1992, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines shared data structures for the various JPEG modules.
 *
 * Seriously updated for use deep in RISCOS.
 */

#define METHODDEF static        /* a function called through method pointers */
#define LOCAL     static        /* a function used only in its module */
#define GLOBAL    static
#define EXTERN    static
#define FAR

#define METHOD(type,methodname,arglist)  type (*methodname) arglist

/* Data structures for images containing either samples or coefficients. */
/* Note that the topmost (leftmost) index is always color component. */

typedef JSAMPLE FAR *JSAMPROW;  /* ptr to one image row of pixel samples. */
typedef JSAMPROW *JSAMPARRAY;   /* ptr to some rows (a 2-D sample array) */
typedef JSAMPARRAY *JSAMPIMAGE; /* a 3-D sample array: top index is color */

#define DCTSIZE         8       /* The basic DCT block is 8x8 samples */
#define DCTSIZE2        64      /* DCTSIZE squared; # of elements in a block */

typedef JCOEF JBLOCK[DCTSIZE2]; /* one block of coefficients */
typedef JBLOCK FAR *JBLOCKROW;  /* pointer to one row of coefficient blocks */
typedef JBLOCKROW *JBLOCKARRAY;         /* a 2-D array of coefficient blocks */
typedef JBLOCKARRAY *JBLOCKIMAGE;       /* a 3-D array of coefficient blocks */

typedef JCOEF FAR *JCOEFPTR;    /* useful in a couple of places */

/* The input and output data of the DCT transform subroutines are of
 * the following type, which need not be the same as JCOEF.
 * For example, on a machine with fast floating point, it might make sense
 * to recode the DCT routines to use floating point; then DCTELEM would be
 * 'float' or 'double'.
 */

typedef JCOEF DCTELEM;
typedef DCTELEM DCTBLOCK[DCTSIZE2];

/* -------------------- Statistics on JPEG files ------------------------- */

#ifdef STATS
typedef struct
{
  int n_jblocks;                  /* JBLOCKs analysed */
  int n_nonzero_coeff[DCTSIZE2];  /* no of JBLOCKs with this many nonzero coeffs,
                                     given absolute DC value (not just delta). */

  int n_lines_thismany_nonzero_coeffs_pass1[DCTSIZE]; /* just ac coeffs */
  int n_lines_thismany_nonzero_coeffs_pass2[DCTSIZE];

  int n_pass1_ac_zero;
  int n_pass1_ac_dc_zero;
  int n_pass1_ac_nonzero;

  int n_pass1_even_zero; /* no of rows in pass 1 with even coeffs zero */
  int n_pass1_odd_zero;
  int n_pass1_odd_nonzero;

  int higher_coeff_all_zero[DCTSIZE]; /* higher coeffs than this are all zero, in pass 1 */

} stats_struct;
#define IFSTATS(a) a
#else
#define IFSTATS(a)
#endif

/* ----------- Types for JPEG compression parameters and working tables. ---------- */

typedef enum {                  /* defines known color spaces */
        CS_UNKNOWN,             /* error/unspecified */
        CS_GRAYSCALE,           /* monochrome (only 1 component) */
        CS_RGB,                 /* red/green/blue */
        CS_YCbCr,               /* Y/Cb/Cr (also known as YUV) */
        CS_YIQ,                 /* Y/I/Q */
        CS_CMYK                 /* C/M/Y/K */
} COLOR_SPACE;


typedef struct {                /* Basic info about one component */
  /* These values are fixed over the whole image */
  /* For compression, they must be supplied by the user interface; */
  /* for decompression, they are read from the SOF marker. */
        int /*short*/ component_id;     /* identifier for this component (0..255) */
        int /*short*/ component_index;  /* its index in SOF or cinfo->comp_info[] */
        int /*short*/ h_samp_factor;    /* horizontal sampling factor (1..4) */
        int /*short*/ v_samp_factor;    /* vertical sampling factor (1..4) */
        int /*short*/ quant_tbl_no;     /* quantization table selector (0..3) */
  /* These values may vary between scans */
  /* For compression, they must be supplied by the user interface; */
  /* for decompression, they are read from the SOS marker. */
        int /*short*/ dc_tbl_no;        /* DC entropy table selector (0..3) */
        int /*short*/ ac_tbl_no;        /* AC entropy table selector (0..3) */
  /* These values are computed during compression or decompression startup */
        long true_comp_width;   /* component's image width in samples */
        long true_comp_height;  /* component's image height in samples */
        /* the above are the logical dimensions of the subsampled image */
  /* These values are computed before starting a scan of the component */
        int /*short*/ MCU_width;        /* number of blocks per MCU, horizontally */
        int /*short*/ MCU_height;       /* number of blocks per MCU, vertically */
        int /*short*/ MCU_blocks;       /* MCU_width * MCU_height */
        long subsampled_width;  /* image width in samples, after expansion */
        long subsampled_height; /* image height in samples, after expansion */
        /* the above are the true_comp_xxx values rounded up to multiples of */
        /* the MCU dimensions; these are the working dimensions of the array */
        /* as it is passed through the DCT or IDCT step.  NOTE: these values */
        /* differ depending on whether the component is interleaved or not!! */
} jpeg_component_info;


/* DCT coefficient quantization tables.
 * For 8-bit precision, 'INT16' should be good enough for quantization values;
 * for more precision, we go for the full 16 bits.  'INT16' provides a useful
 * speedup on many machines (multiplication & division of JCOEFs by
 * quantization values is a significant chunk of the runtime).
 * Note: the values in a QUANT_TBL are always given in zigzag order.
 */
typedef int QUANT_VAL;
typedef QUANT_VAL QUANT_TBL[DCTSIZE2];  /* A quantization table */
typedef QUANT_VAL * QUANT_TBL_PTR;      /* pointer to same */


typedef struct {                /* A Huffman coding table */
  /* These two fields directly represent the contents of a JPEG DHT marker */

        UINT8 bits[17];         /* bits[k] = # of symbols with codes of */
                                /* length k bits; bits[0] is unused */
        UINT8 huffval[256];     /* The symbols, in order of incr code length */

  /* The remaining fields are computed from the above to allow more efficient
   * coding and decoding.  These fields should be considered private to the
   * Huffman compression & decompression modules.
   */
        /* decoding tables: (element [0] of each array is unused) */
#if 0
        UINT32 /*UINT16*/ mincode[17];     /* smallest code of length k */
#endif
        INT32 maxcode[18];      /* largest code of length k (-1 if none) */
        /* (maxcode[17] is a sentinel to ensure huff_DECODE terminates) */
        int /*short*/ valptr[17];       /* huffval[] index of 1st symbol of length k */
                                        /* with value of mincode[k] from above subtracted */

        int shortcut[256]; /* shortcuts the actual reading of huffman values - indexed
                              by the next 8 bits in the bit stream an entry tells you
                              how long the next entry is. This allows you to read
                              the vast majority of huffman codes at a single step. */
} HUFF_TBL;


#define NUM_QUANT_TBLS      4   /* quantization tables are numbered 0..3 */
#define NUM_HUFF_TBLS       4   /* Huffman tables are numbered 0..3 */
#define NUM_ARITH_TBLS      16  /* arith-coding tables are numbered 0..15 */
#define MAX_COMPS_IN_SCAN   4   /* JPEG limit on # of components in one scan */
#define MAX_SAMP_FACTOR     4   /* JPEG limit on sampling factors */
#define MAX_BLOCKS_IN_MCU   10  /* JPEG limit on # of blocks in an MCU */

/* ----------- Remember a precise position in the huffman stream. ------------------ */
typedef struct
{
  int bit_pointer;   /* (next_input_byte-input_buffer)*32 + bits_left */
  int get_buffer;
  short int last_dc_val0; /* NB NOT dequantised */
  short int last_dc_val1;
  short int last_dc_val2;
  short int last_dc_val3; /* in case we ever do CMYK */
  short int restarts_to_go;
  short int next_restart_num;
} huff_pointer;

/* ------------- Error codes for various forms of unacceptable JPEG file ------------- */
#define E_PRE_NOT_8         1            /* Data precision not 8 */
#define E_RESTART           2            /* Restart interval not 0 */
#define E_MULTI_SCAN        3            /* Multi-scan file */
#define E_TOO_HIGH          4            /* Image too high, max is %i pixels */
#define E_BAD_SAMPLE        5            /* Bad sample factor */
#define E_HEIGHT            6            /* Height is %i, not as specified */
#define E_WIDTH             7            /* Width is %i, not as specified */
#define E_COLOUR            8            /* Bad colour space (%i), not grey or YUV */
#define E_COMPONENTS        9            /* Bad number (%i) of components, only 1 or 3 allowed */
#define E_TOO_WIDE          10           /* Image too wide, max is %i pixels */

/* ------------- Working data for decompression ---------------------------------- */

struct decompress_info_struct {

        int error_code;         /* Returned err code, 0 if no error */
        int error_argument1;    /* Supplementary error data */
        int error_argument2;    /* Supplementary error data */

        char *workspace_UNUSED;        /* For band buffer and things. (no, implicitly at end of this space now) */
        int workspace_size;     /* number of bytes */
/* up to here appears in sources.SprExtend */

        int /*long*/ image_width;       /* overall image width */
        int /*long*/ image_height;      /* overall image height */
        COLOR_SPACE jpeg_color_space; /* colorspace of JPEG file */
/* up to here is replicated somewhat in CFSI-JPEG's interface */

        char *table32k; /* the 16bpp->8bpp 32K lookup table, if you need it. */
        BOOL table32k_unavailable; /* Set if we ever failed to get table32k.
                                   This means we're probably on an old OS, so the
                                   table will never be available. */

        int *band_buffer; /* Large buffer into which the colour data goes. */
                          /* We construct one strip, 8 or 16 pixels high, across the image. */
        int band_buffer_size; /* Must be a multiple of 16 */

        char * input_buffer;    /* start of buffer (private to input code) */
        char * next_input_byte; /* => next byte to read from buffer */
        char * buffer_end;      /* pointer to end of buffer */

        int data_precision;   /* bits of precision in image data */

        /* These three values are not used by the JPEG code, merely copied */
        /* from the JFIF APP0 marker (if any). */
        UINT32 /*UINT8*/ density_unit;     /* JFIF code for pixel size units */
        UINT32 /*UINT16*/ X_density;       /* Horizontal pixel density */
        UINT32 /*UINT16*/ Y_density;       /* Vertical pixel density */

        int /*short*/ num_components;   /* # of color components in JPEG image */
        jpeg_component_info * comp_info;
        /* comp_info[i] describes component that appears i'th in SOF */

        QUANT_TBL_PTR quant_tbl_ptrs[NUM_QUANT_TBLS];
        /* ptrs to coefficient quantization tables, or NULL if not defined */

        HUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
        HUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
        /* ptrs to Huffman coding tables, or NULL if not defined */

        UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
        UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
        UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

        boolean arith_code;     /* TRUE=arithmetic coding, FALSE=Huffman */
        boolean CCIR601_sampling; /* TRUE=first samples are cosited */

        UINT32 /*UINT16*/ restart_interval;/* MDUs per restart interval, or 0 for no restart */
        int restarts_to_go;
        int next_restart_num;

/*
 * These fields are valid during any one scan
 */
        int /*short*/ comps_in_scan;    /* # of JPEG components input this time */
        jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
        /* *cur_comp_info[i] describes component that appears i'th in SOS */

        long MCUs_per_row;      /* # of MCUs across the image */
        long MCU_rows_in_scan;  /* # of MCU rows in the image */

        /* these fields are private data for the entropy encoder */
        JCOEF last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each comp - NOT dequantized yet */

        int current_huff_pointer; /* Currently loaded band, or -1 if none. */
        int xmin;
        int xmax;                 /* Min and max x pixels required: clip as early
                                  as possible. */
        int options;

        /* Statics moved in from the huffman decoding */
        int get_buffer;
        int bits_left;

        /* Random check words to look for the same sprite over again */
        int check1;
        int check2;
        int check3;

        IFSTATS(stats_struct stats;)       /* Gathering statistics */

        JBLOCK jblocks[7]; /* YYYYUV blocks, and one spare at the front */

#define HPOINTERS 200 /* max picture depth 16*this for colour, 8*this for mono, in pixels */
        huff_pointer *huff_pointers;
                      /* An array of information every 16 pixel lines, which
                      allows us to start decoding the file at that point. This
                      allows reasonably quick random access to anywhere in the file. */

        /* Space always needed, and pointed at by some of the pointers above. */

        jpeg_component_info s_cur_comp_info[MAX_COMPS_IN_SCAN];
        QUANT_TBL s_quant_tbl[NUM_QUANT_TBLS];
        HUFF_TBL s_dc_huff_tbl[NUM_HUFF_TBLS];
        HUFF_TBL s_ac_huff_tbl[NUM_HUFF_TBLS];
};

typedef struct decompress_info_struct * decompress_info_ptr;


/* Macros for reading data from the decompression input buffer */

/* The buffer contains the entire file */
#define JGETC(cinfo) (int) ((cinfo)->next_input_byte >= (cinfo)->buffer_end ? 255 : *(cinfo)->next_input_byte++)

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is generally cinfo->emethods, left undisturbed in
   c.jrdjfif but not used here. */

/* The variable FILE_ is used to identify source files, smaller than __FILE__ (a bit!) for
non-debugging code. */
#define EXIT exit(FILE_+__LINE__);

#ifdef DEBUG
  #ifdef EMBED
    #define TRACEMS(emeth,lvl,msg) {sprintf(0, msg); newline();}
    #define TRACEMS1(emeth,lvl,msg,p1) {sprintf(0, msg,p1); newline();}
    #define TRACEMS2(emeth,lvl,msg,p1,p2) {sprintf(0, msg,p1,p2); newline();}
    #define TRACEMS3(emeth,lvl,msg,p1,p2,p3) {sprintf(0, msg,p1,p2,p3); newline();}
    #define TRACEMS4(emeth,lvl,msg,p1,p2,p3,p4) {sprintf(0, msg,p1,p2,p3,p4); newline();}
    #define TRACEMS8(emeth,lvl,msg,p1,p2,p3,p4,p5,p6,p7,p8) {sprintf(0, msg,p1,p2,p3,p4,p5,p6,p7,p8); newline();}
  #else
    #define TRACEMS(emeth,lvl,msg) {if (verbose) {printf(msg); printf("\n");}}
    #define TRACEMS1(emeth,lvl,msg,p1) {if (verbose) {printf(msg,p1); printf("\n");}}
    #define TRACEMS2(emeth,lvl,msg,p1,p2) {if (verbose) {printf(msg,p1,p2); printf("\n");}}
    #define TRACEMS3(emeth,lvl,msg,p1,p2,p3) {if (verbose) {printf(msg,p1,p2,p3); printf("\n");}}
    #define TRACEMS4(emeth,lvl,msg,p1,p2,p3,p4) {if (verbose) {printf(msg,p1,p2,p3,p4); printf("\n");}}
    #define TRACEMS8(emeth,lvl,msg,p1,p2,p3,p4,p5,p6,p7,p8) {if (verbose) {printf(msg,p1,p2,p3,p4,p5,p6,p7,p8); printf("\n");}}
  #endif
#else
  #define TRACEMS(emeth,lvl,msg)
  #define TRACEMS1(emeth,lvl,msg,p1)
  #define TRACEMS2(emeth,lvl,msg,p1,p2)
  #define TRACEMS3(emeth,lvl,msg,p1,p2,p3)
  #define TRACEMS4(emeth,lvl,msg,p1,p2,p3,p4)
  #define TRACEMS8(emeth,lvl,msg,p1,p2,p3,p4,p5,p6,p7,p8)
#endif

#define DUMPVAL(x) tracef(#x "=0x%x " _ (int)(x));
#define DUMPVALN(x) tracef(#x "=0x%x\n" _ (int)(x));

#ifdef EMBED
  #define ERREXIT(emeth,msg) {tracef("Error:"); tracef(msg); newline(); EXIT}
  #define ERREXIT1(emeth,msg,p1) {tracef("Error:"); tracef(msg _ p1); newline(); EXIT}
  #define ERREXIT2(emeth,msg,p1,p2) {tracef("Error:"); tracef(msg _ p1 _ p2); newline(); EXIT}
  #define ERREXIT3(emeth,msg,p1,p2,p3) {tracef("Error:"); tracef(msg _ p1 _ p2 _ p3); newline(); EXIT}
  #define ERREXIT4(emeth,msg,p1,p2,p3,p4) {tracef("Error:"); tracef(msg _ p1 _ p2 _ p3 _ p4); newline(); EXIT}
#else
  #define ERREXIT(emeth,msg) {printf("Error:"); printf(msg); printf("\n"); exit(1);}
  #define ERREXIT1(emeth,msg,p1) {printf("Error:"); printf(msg,p1); printf("\n"); exit(1);}
  #define ERREXIT2(emeth,msg,p1,p2) {printf("Error:"); printf(msg,p1,p2); printf("\n"); exit(1);}
  #define ERREXIT3(emeth,msg,p1,p2,p3) {printf("Error:"); printf(msg,p1,p2,p3); printf("\n"); exit(1);}
  #define ERREXIT4(emeth,msg,p1,p2,p3,p4) {printf("Error:"); printf(msg,p1,p2,p3,p4); printf("\n"); exit(1);}
#endif

/* We assume that right shift corresponds to signed division by 2 with
 * rounding towards minus infinity.  This is correct for typical "arithmetic
 * shift" instructions that shift in copies of the sign bit.  But some
 * C compilers implement >> with an unsigned shift.  For these machines you
 * must define RIGHT_SHIFT_IS_UNSIGNED.
 * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
 * It is only applied with constant shift counts.  SHIFT_TEMPS must be
 * included in the variables of any routine using RIGHT_SHIFT.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define SHIFT_TEMPS     INT32 shift_temp;
#define RIGHT_SHIFT(x,shft)  \
        ((shift_temp = (x)) < 0 ? \
         (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
         (shift_temp >> (shft)))
#else
#define SHIFT_TEMPS
#define RIGHT_SHIFT(x,shft)     ((x) >> (shft))
#endif


/* Miscellaneous useful macros */

#undef MAX
#define MAX(a,b)        ((a) > (b) ? (a) : (b))
#undef MIN
#define MIN(a,b)        ((a) < (b) ? (a) : (b))


#define RST0    0xD0            /* RST0 marker code */
