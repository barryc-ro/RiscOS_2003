/* 
 * c.genyuvtabs - Generate tables (in assembler source form) to assist in converting
 *                YUV data directly to 8bit RGB.
 *
 * 08-Feb-94 0.01 WRS - started
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

/**************** RGB -> YCbCr conversion **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *      Y  =  0.29900 * R + 0.58700 * G + 0.11400 * B
 *      Cb = -0.16874 * R - 0.33126 * G + 0.50000 * B  + MAXJSAMPLE/2
 *      Cr =  0.50000 * R - 0.41869 * G - 0.08131 * B  + MAXJSAMPLE/2
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 *
 */

static int rgb_to_yuv(int r, int g, int b)
/* Input values are in 0..255 */
/* Returns a word containing 00000000yyyyyyyyuuuuuuuuvvvvvvvv */
{
  int y =  0.29900 * (float)r + 0.58700 * (float)g + 0.11400 * (float)b;
  int u = -0.16874 * (float)r - 0.33126 * (float)g + 0.50000 * (float)b  + 256/2;
  int v =  0.50000 * (float)r - 0.41869 * (float)g - 0.08131 * (float)b  + 256/2;

  if (y < 0) y = 0; if (y > 255) y = 255;
  if (u < 0) u = 0; if (u > 255) u = 255;
  if (v < 0) v = 0; if (v > 255) v = 255;
  /*printf("rgb_to_yuv: %i,%i,%i -> %i,%i,%i\n" ,r ,g ,b ,y ,u ,v);*/
  return (y<<16) + (u<<8) + v;
}

/**************** YCbCr -> RGB conversion **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *      R = Y                + 1.40200 * Cr
 *      G = Y - 0.34414 * Cb - 0.71414 * Cr
 *      B = Y + 1.77200 * Cb
 * where Cb and Cr represent the incoming values less MAXJSAMPLE/2.
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 *
 */

static int yuv_to_rgb(int y, int u, int v)
/* Input values are in 0..255 */
/* Returns a word containing 00000000bbbbbbbbggggggggrrrrrrrr */
{
  int r = (float)y                              + 1.40200 * (float)(v-256/2);
  int g = (float)y - 0.34414 * (float)(u-256/2) - 0.71414 * (float)(v-256/2);
  int b = (float)y + 1.77200 * (float)(u-256/2);

  if (r < 0) r = 0; if (r > 255) r = 255;
  if (g < 0) g = 0; if (g > 255) g = 255;
  if (b < 0) b = 0; if (b > 255) b = 255;
  /*printf("yuv_to_rgb: %i,%i,%i -> %i,%i,%i\n" ,y ,u ,v ,r ,g ,b);*/
  return (b<<16) + (g<<8) + r;
}

/**************** RGB <-> 8bit conversions **************/

#define BIT(n) (1<<(n))

static int pixel_to_rgb(int i)
/* Given a VIDC1 8bpp pixel bggrbrtt, return a precise rgb as 00000000bbbbbbbbggggggggrrrrrrrr */
{
  int r = 0, g = 0, b = 0;

  if (i & BIT(7)) b |= BIT(7); /* hi bit of blue */
  if (i & BIT(6)) g |= BIT(7); /* hi bit of green */
  if (i & BIT(5)) g |= BIT(6); /* next bit of green */
  if (i & BIT(4)) r |= BIT(7); /* hi bit of red */
  if (i & BIT(3)) b |= BIT(6); /* next bit of blue */
  if (i & BIT(2)) r |= BIT(6); /* next bit of red */
  if (i & BIT(1)) /* hi bit of tint - bit 5 of each gun */
  {
    r |= BIT(5);
    g |= BIT(5);
    b |= BIT(5);
  }
  if (i & BIT(0)) /* lo bit of tint - bit 1 of each gun */
  {
    r |= BIT(4);
    g |= BIT(4);
    b |= BIT(4);
  }
  r |= r>>4;
  g |= g>>4;
  b |= b>>4;
  /*printf("pixel_to_rgb: %i to %i,%i,%i\n", i, r, g, b);*/
  return (b<<16)+(g<<8)+r;
}

static int palette[256]; /* cache of pixel_to_rgb values */

static void palette_init(void)
{
  int i;

  for (i = 0; i < 256; i++) palette[i] = pixel_to_rgb(i);
}

static int pixel_closest_to_rgb(int r, int g, int b)
/* Returns VIDC1 pixel closest to specified colour */
/* This 256-time loop is called for each output byte! So, quite speed intensive. */
{
  int i;
  int mindistance = 1000000;
  int mini = 0;

  for (i = 0; i < 256; i++)
  {
    int rgb = palette[i];
    int dg = ((rgb>>8)&255) - g;
    int distance = 1*dg*dg;
    if (distance < mindistance) /* Quite often green distance will swamp the others, cut off quicker. */
    {
      int dr = (rgb&255) - r;
      int db = ((rgb>>16)&255) - b;
      distance += 1*dr*dr + db*db;
      if (distance < mindistance) {mini = i; mindistance = distance;}
    }
  }
  /*printf("pixel_closest_to_rgb %i,%i,%i -> %i.\n", r, g, b, mini);*/
  return mini;
}

static int pixel_to_yuv(int pixel)
/* Given a VIDC1 8bpp pixel, return a precise yuv as 00000000yyyyyyyyuuuuuuuuvvvvvvvv */
{
  int rgb = pixel_to_rgb(pixel);
  return rgb_to_yuv(rgb & 255, (rgb>>8)&255, (rgb>>16)&255);
}

/**************** Formatting huge byte tables neatly, as assembler source ****************/
static int offset = 0;
static int count = 0;

static void byte_begin(void)
{
  offset = 0;
  count = 0;
}

static void byte_put(int b)
{
  if (0 == (offset & 15)) printf(" DCB "); else printf(", ");
  printf("%i", b);
  offset++;
  if (0 == (offset & 15)) printf("\n");
  count++;
}

static void word_put(int w)
{
  byte_put(w&255);
  byte_put((w>>8)&255);
  byte_put((w>>16)&255);
  byte_put((w>>24)&255);
}

static void byte_end(int count_total)
{
  printf("\n");
  if (count != count_total) printf("Generated %i bytes, expected %i.\n", count, count_total);
  assert(count == count_total); /* Just a little check that we're generating the right amount */
}

/**************** Generating the tables ****************/

static void pixel_to_yuv_table(void)
{
  int i;

  printf("pixel_to_yuv_table ; word i is the closest yuv value to VIDC1 8bpp pixel i\n");
  byte_begin();
  for (i = 0; i < 256; i++) word_put(pixel_to_yuv(i));
  byte_end(4 * 256);
}

static void yuv_to_pixel_table(void)
{
  int bits_of_y = 5;
  int bits_of_u = 4;
  int bits_of_v = 4;
  int y, u, v;

  printf("yuv_to_pixel_table\n");
  printf("yuvtab_ybits * %i\n", bits_of_y);
  printf("yuvtab_ubits * %i\n", bits_of_u);
  printf("yuvtab_vbits * %i\n", bits_of_v);
  printf("; A byte table indexed by yuv value, returns the closest 8bpp pixel\n");
  byte_begin();
  for (y = 0 /*(1<<(7-bits_of_y))*/; y < 256; y += (1<<(8-bits_of_y)))
  {
    printf(" ; y=%i\n", y);
    for (u = 0 /*(1<<(7-bits_of_u))*/; u < 256; u += (1<<(8-bits_of_u)))
    {
      for (v = 0 /*(1<<(7-bits_of_v))*/; v < 256; v += (1<<(8-bits_of_v)))
      /* This loop effectively looks for values one-half above the precise
      value that you're looking up. The intention is that this is right for
      truncating the values before doing the lookup - on average, I'm putting
      back half the truncated value before finding the closest match */
      /* >>> No, maybe this leads to the dirty-white phenomenon? Should
      really replicate top pixels at bottom.  */
      {
        int rgb = yuv_to_rgb(y + (y>>bits_of_y), u + (u>>bits_of_u), v + (v>>bits_of_v));
        int byte = pixel_closest_to_rgb(rgb&255, (rgb>>8)&255, (rgb>>16)&255);
        byte_put(byte);
      }
    }
  }
  byte_end((1<<bits_of_y) * (1<<bits_of_u) * (1<<bits_of_v));
}

extern int main(int argc, char **argv)
{
  printf("; YUV<->pixel tables, generated %s\n", __DATE__);
  palette_init();
  pixel_to_yuv_table();
  yuv_to_pixel_table();
  printf("\n END\n");
  return 0;
}
