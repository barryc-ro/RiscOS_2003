/* c.testdct - internal test for the assembler DCT implementation

   The program arranges to be able to run the C and assembler DCT implementations
   side by side, as a 1D DCT, and compare the result. This makes it easy to
   debug changes to the assembler version.

   28-Sep-93 WRS - started
   21-Oct-93 WRS - one-odd-nonzero cases added to assembler - some new custom tests.

*/

#include <stdio.h>
#include <stdlib.h>
#include "jinclude.h"

extern void asm_dct_1_d(decompress_info_ptr cinfo, int *data); /* assembler version */
extern void asm_idctsq_1_d(decompress_info_ptr cinfo, int *data); /* newer assembler version */

#define CONST_BITS 8
#define PASS1_BITS 8
#define MULTIPLY(a,b) ((a)*(b))
#define DESCALE1(a,b) (a) /* don't scale, leave it just like the assembler does */
#define ONE     ((INT32) 1)
#define CONST_SCALE (ONE << CONST_BITS)
#define FIX(x)  ((INT32) ((x) * CONST_SCALE + 0.5))

#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)

static void c_dct_1_d(decompress_info_ptr cinfo, int *dataptr)
/* Reference code extracted from the standard 2D one. */
{
  INT32 tmp0, tmp1, tmp2, tmp3;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;

  /* Even part: reverse the even part of the forward DCT. */
  /* The rotator is sqrt(2)*c(-6). */

  z2 = (INT32) dataptr[2];
  z3 = (INT32) dataptr[6];

  z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
  tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
  tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);

  tmp0 = ((INT32) dataptr[0] + (INT32) dataptr[4]) << CONST_BITS;
  tmp1 = ((INT32) dataptr[0] - (INT32) dataptr[4]) << CONST_BITS;

  tmp10 = tmp0 + tmp3;
  tmp13 = tmp0 - tmp3;
  tmp11 = tmp1 + tmp2;
  tmp12 = tmp1 - tmp2;
  
  /* Odd part per figure 8; the matrix is unitary and hence its
   * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
   */

  tmp0 = (INT32) dataptr[7];
  tmp1 = (INT32) dataptr[5];
  tmp2 = (INT32) dataptr[3];
  tmp3 = (INT32) dataptr[1];

  z1 = tmp0 + tmp3;
  z2 = tmp1 + tmp2;
  z3 = tmp0 + tmp2;
  z4 = tmp1 + tmp3;
  z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
  
  tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
  tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
  tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
  tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
  z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
  z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
  z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
  z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
  
  z3 += z5;
  z4 += z5;
  
  tmp0 += z1 + z3;
  tmp1 += z2 + z4;
  tmp2 += z2 + z3;
  tmp3 += z1 + z4;

  /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

  dataptr[0] = (DCTELEM) DESCALE1(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
  dataptr[7] = (DCTELEM) DESCALE1(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
  dataptr[1] = (DCTELEM) DESCALE1(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
  dataptr[6] = (DCTELEM) DESCALE1(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
  dataptr[2] = (DCTELEM) DESCALE1(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
  dataptr[5] = (DCTELEM) DESCALE1(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
  dataptr[3] = (DCTELEM) DESCALE1(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
  dataptr[4] = (DCTELEM) DESCALE1(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
}

static void do_dct(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int b1[8];
  int b2[8];
  int i;
  BOOL ok=1;

  b1[0] = a0;
  b1[1] = a1;
  b1[2] = a2;
  b1[3] = a3;
  b1[4] = a4;
  b1[5] = a5;
  b1[6] = a6;
  b1[7] = a7;
  for (i = 0; i < 8; i++) b2[i] = b1[i];
  c_dct_1_d(0, b1);
  asm_idctsq_1_d(0, b2);
  printf("\n");
  printf("inputs:     %8x %8x %8x %8x %8x %8x %8x %8x\n", a0,a1,a2,a3,a4,a5,a6,a7);
  printf("C result:   %8x %8x %8x %8x %8x %8x %8x %8x\n", b1[0],b1[1],b1[2],b1[3],b1[4],b1[5],b1[6],b1[7]);
  printf("asm result: %8x %8x %8x %8x %8x %8x %8x %8x\n", b2[0],b2[1],b2[2],b2[3],b2[4],b2[5],b2[6],b2[7]);
  for (i = 0; i < 8; i++) if (b1[i] != b2[i]) ok=0;
  printf(ok ? "YES!\n" : "RATS!\n");
  /* if (!ok) exit(1); */
}

static int r(void)
/* Random DCT arg */
{
  int rr = rand() & 511;

  if (rr > 256) return 0; /* about 50% chance */
  return rr - 128;
}

int main(int argc, char **argv)
{
  printf("Test DCT, %s %s\n", __DATE__, __TIME__);

  do_dct(0,0,0,0,0,0,0,0);

  do_dct(100,0,0,0,0,0,0,0);
  do_dct(0,100,0,0,0,0,0,0);
  do_dct(0,0,100,0,0,0,0,0);
  do_dct(0,0,0,100,0,0,0,0);
  do_dct(0,0,0,0,100,0,0,0);
  do_dct(0,0,0,0,0,100,0,0);
  do_dct(0,0,0,0,0,0,100,0);
  do_dct(0,0,0,0,0,0,0,100);

  do_dct(2,0,4,0,6,0,8,0);
  do_dct(0,2,0,4,0,6,0,8);
  do_dct(1,2,3,4,5,6,7,8);

  /* Extra custom cases for the only-one-odd-coeff-nonzero: try each
  possible case of the odd coefficients zero and nonzero. */
  do_dct(100,0,102,0,104,0,106,0);
  do_dct(100,0,102,0,104,0,106,7);
  do_dct(100,0,102,0,104,5,106,0);
  do_dct(100,0,102,0,104,5,106,7);
  do_dct(100,0,102,3,104,0,106,0);
  do_dct(100,0,102,3,104,0,106,7);
  do_dct(100,0,102,3,104,5,106,0);
  do_dct(100,0,102,3,104,5,106,7);
  do_dct(100,1,102,0,104,0,106,0);
  do_dct(100,1,102,0,104,0,106,7);
  do_dct(100,1,102,0,104,5,106,0);
  do_dct(100,1,102,0,104,5,106,7);
  do_dct(100,1,102,3,104,0,106,0);
  do_dct(100,1,102,3,104,0,106,7);
  do_dct(100,1,102,3,104,5,106,0);
  do_dct(100,1,102,3,104,5,106,7);


  {
    int i;
    int n = 10000;

    for (i = 0; i < n; i++) do_dct(r(),r(),r(),r(),r(),r(),r(),r());
    printf("Completed %i random trials.\n", n);
  }

  return 0;
}
