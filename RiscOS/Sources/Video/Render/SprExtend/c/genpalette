/* Simple code to generate assembler source for the
8bpp palette lookup table. The table consists of 256
32bit entries, containing the true RGB values of the
256 pixel values of the standard 8bpp palette. To get
that value, take the 4 bits of hicolour/tint for each
gun, and replicate them in the hi and lo 4 bits of that
gun.

The 8bpp pixels are bggrbrtt
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define BIT(n) (1<<(n))

int main(int argc, char **argv)
{
  int i;

  printf("; s.genpalette, generated by c.genpalette\n"
         "; The table consists of 256 16bit entries, containing the true RGB values\n"
         "; of the 256 pixel values of the standard 8bpp palette.\n"
         "; The 8bpp pixels are bggrbrtt, the words are 0BGR\n");
  for (i = 0; i < 256; i++)
  {
#if 0
/* Code that generates 16bit entries - not accurate enough */
    int hibyte = 0;
    int lobyte = 0;

    if (i & BIT(7)) hibyte |= BIT(6); /* hi bit of blue */
    if (i & BIT(6)) hibyte |= BIT(1); /* hi bit of green */
    if (i & BIT(5)) hibyte |= BIT(0); /* next bit of green */
    if (i & BIT(4)) lobyte |= BIT(4); /* hi bit of red */
    if (i & BIT(3)) hibyte |= BIT(5); /* next bit of blue */
    if (i & BIT(2)) lobyte |= BIT(3); /* next bit of red */
    if (i & BIT(1)) /* hi bit of tint - bits 0 and 2 of each gun */
    {
      hibyte |= BIT(2) | BIT(4);
      lobyte |= BIT(7) | BIT(5) | BIT(2) | BIT(0);
    }
    if (i & BIT(0)) /* lo bit of tint - bit 1 of each gun */
    {
      hibyte |= BIT(3);
      lobyte |= BIT(6) | BIT(1);
    }
    printf("        DCB     %i,%i\n", lobyte, hibyte);
#else
    int r = 0, g = 0, b = 0;

    if (i & BIT(7)) b |= BIT(7); /* hi bit of blue */
    if (i & BIT(6)) g |= BIT(7); /* hi bit of green */
    if (i & BIT(5)) g |= BIT(6); /* next bit of green */
    if (i & BIT(4)) r |= BIT(7); /* hi bit of red */
    if (i & BIT(3)) b |= BIT(6); /* next bit of blue */
    if (i & BIT(2)) r |= BIT(6); /* next bit of red */
    if (i & BIT(1)) /* hi bit of tint - bit 5 of each gun */
    {
      r |= BIT(5);
      g |= BIT(5);
      b |= BIT(5);
    }
    if (i & BIT(0)) /* lo bit of tint - bit 1 of each gun */
    {
      r |= BIT(4);
      g |= BIT(4);
      b |= BIT(4);
    }
    r |= r>>4;
    g |= g>>4;
    b |= b>>4;
    printf("        DCB     %i,%i,%i,0\n", r, g, b);
#endif
  }
  printf("        ALIGN\n");
  printf("        END\n");

  return 0;
}
