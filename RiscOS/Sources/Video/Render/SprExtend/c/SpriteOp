#ifndef CFSI
static int check_sprite_area(char *SpriteArea)
{
  int   SizeOfArea = *(int *)(SpriteArea);
  int   NumberOfSprites = *(int *)(SpriteArea+4);
  int   OffsetToSprite = *(int *)(SpriteArea+8);
  int   OffsetToFreeWord = *(int *)(SpriteArea+12);
  char  *CurrentPos = SpriteArea;
  int   loop,
        bpp;

  tracef("CurrentPos = %x\n\n" _ CurrentPos);
  tracef("SizeOfArea = %d number of sprites = %d\n" _ SizeOfArea _ NumberOfSprites);
  tracef("offset to first sprite = %d, offset to free word = %d\n" _ OffsetToSprite _ OffsetToFreeWord);
  if (OffsetToSprite > OffsetToFreeWord) return(1);
  if (OffsetToFreeWord > SizeOfArea) return(1);

  CurrentPos = SpriteArea + OffsetToSprite;
  tracef("CurrentPos = %x\n" _ CurrentPos);
  for (loop = 0;loop < NumberOfSprites;loop++)
  {
/*    char *CurrentSprite = CurrentPos;*/
    int NextOffset = *(int *)(CurrentPos);
#ifdef DEBUG
    char *SpriteName = CurrentPos+4;
#endif
    int width = *(int *)(CurrentPos+16);
    int height = *(int *)(CurrentPos+20);
    int FirstBit = *(int *)(CurrentPos+24);
    int LastBit = *(int *)(CurrentPos+28);
    int OffsetToSprite = *(int *)(CurrentPos+32);
    int OffsetToMask = *(int *)(CurrentPos+36);
    int ModeWord = *(int *)(CurrentPos+40);

    tracef("Current Sprite = %x, Next offset = %d\n" _ CurrentPos _ NextOffset);
    tracef("Sprite Name = %s\nwidth = %d, height = %d\n" _ SpriteName _ width _ height);
    tracef("Fisrt bit used = %d, Last bit = %d\n" _ FirstBit _ LastBit);
    tracef("Offset to sprite = %d, mask = %d\n" _ OffsetToSprite _ OffsetToMask);
    tracef("Mode Word = %x\n" _ ModeWord);
    if ((NextOffset + (int)CurrentPos) > ((int)SpriteArea + SizeOfArea)) return(1);
    tracef("passed next sprite within 'used' check\n");
    if (FirstBit > 31) return(1);
    if (LastBit > 31) return(1);
    tracef("passed First and Last bit checks\n");
    if ((OffsetToSprite + (int)CurrentPos) > ((int)SpriteArea + SizeOfArea)) return(1);
    tracef("passed sprite still in area check\n");
    if ((OffsetToMask + (int)CurrentPos) > ((int)SpriteArea + SizeOfArea)) return(1);
    tracef("passed mask still in area check\n");
    if ((ModeWord >> 24) > 0)
    {
      tracef("New format sprite!!\n");
      if (FirstBit != 0) return(1);
    }
    tracef("passed first bit == 0 for new sprites check\n");
    if (OffsetToSprite != OffsetToMask)
    {
      tracef("sprite has mask\n");
      if ((width+1)*(height+1)*4 + OffsetToSprite > OffsetToMask) return(1);
      tracef("passed width*height <= size check\n");
      if ((ModeWord >> 24) == 0)
      {
        if ((width+1)*(height+1)*4 + OffsetToMask > NextOffset) return(1);
        tracef("passed mask width*height <= size check\n");
        if (NextOffset-OffsetToMask != OffsetToMask-OffsetToSprite) return(1);
        tracef("passed size of mask == size of sprite check\n");
      }
      else
      {
        _kernel_oserror *e;

        tracef("New format sprite!! => 1bpp mask\n");
        if ((ModeWord > 255) && ((ModeWord & 1) == 0)) return(1);
        tracef("Passed valid mode check\n");
        e = _swix(OS_ReadModeVariable, _IN(0) | _IN(1) | _OUT(2), ModeWord, 9, &bpp);
        if (e != NULL) return(1);
        if (  (((((width << (5-bpp)) + (LastBit+1>>bpp)) + 31) & ~31) >> 3) *
             (height+1) + OffsetToMask != NextOffset           ) return(1);
        tracef("passed 1bpp mask width*height == size check\n");
      }
    }
    else
    {
      tracef("sprite has no mask\n");
      if ((width+1)*(height+1)*4 + OffsetToSprite > NextOffset) return(1);
      tracef("passed width*height <= size check\n");
    }
    if (((NextOffset | OffsetToSprite | OffsetToMask) & 3) != 0) return(1);
    tracef("passed offsets word aligned check\n");
    CurrentPos += NextOffset;
    if ((loop+1 < NumberOfSprites) && ((int)CurrentPos+44) > ((int)SpriteArea + SizeOfArea)) return(1);
  }
  tracef("passed all checks\n");
  return(0);
}
#endif
