/* c.put - put a sprite on the screen
*/

#include <stdlib.h>
#include <time.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

/* Register ranges for _swix: */
#define _R(nin,nout) ((_IN(nin)-1) | ((~(_OUT(nout)-1) & 0x7fffffff) << 1))
/* Note you can NOT provide 0s as missing output registers. */

/* Copied in from RISC_OSLib's h.sprite: */
typedef struct 
{
 int size; /* NB this first field does NOT get saved in a sprite file. */
 int number;
 int sproff;
 int freeoff;
}sprite_area;
typedef struct 
{
 int next; 
 char name[12]; 
 int width; 
 int height; 
 int lbit; 
 int rbit; 
 int image; 
 int mask; 
 int mode; 
}sprite_header;

/* -------------------------------------------------------------------------------------------------- */

#define PROGNAME "put"

#define BOOL int
#define TRUE 1
#define FALSE 0

/* For passing variable arguments to ERROR */
#define _ ,

/* Simple error handling */
#define ERROR(message) {printf(message); exit(1);}
#define CALL(expr) {_kernel_oserror *e_ = (expr); if (e_) ERROR("Error: %s\n" _ e_->errmess)}
#define SYSERROR ERROR("Error: %s.\n" _ _kernel_last_oserror()->errmess)
#define SYNERROR {help_message(); exit(1);}

static BOOL verbose = FALSE;
#define tracef(f) if (verbose) printf(f);

#define MEMZERO(voidptr,size)   memset((voidptr), 0, (size))

/* -------------------------------------------------------------------------------------------------- */

static void title_message(void) {printf("%s - simple sprite plotter (%s)\n", PROGNAME, __DATE__);}

static void help_message(void)
{
  title_message();
  printf("\n");
  printf("Usage:    %s sourcefile [-options]\n", PROGNAME);
  printf("\n");
  printf("Options and arguments:\n");
  printf("sourcefile                 Source Sprite file\n");
  printf("-help                      Print this message\n");
  printf("-v                         Verbose - give details of JPEG header contents\n");
  printf("-p[<integer>,<integer>]    Plot the sprite at the given screen coordinates\n");
  printf("-t[<clockspeed>]           Timings - do timings for plot\n");
}

/* -------------------------------------------------------------------------------------------------- */

static int filesize(char *filename)
/* The size of this file, or -1 if not found, or -2 if a directory. */
{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  r.r[0] = 5; /* Read file info - PRM page 850 */
  r.r[1] = (int) filename;
  if (0 != (e = _kernel_swi(XOS_Bit | OS_File, &r, &r))) ERROR("Error: %s\n" _ e->errmess)
  if (r.r[0] == 0) /* not found */ return -1;
  else if (r.r[0] == 2) /* directory found */ return -2;
  else return r.r[4];
}

/* -------------------------------------------------------------------------------------------------- */

/* Misc useful functions */

static void do_fwrite(void *p, int size, FILE *f)
{
  if (fwrite(p, sizeof(char), size, f) != size) SYSERROR
}

static void *safe_malloc(size_t size)
{
  void *result = malloc(size);

  if (result == 0) ERROR("Not enough space")
  return result;
}

static int roundup(int i) {return (i + 3) & ~3;}

static int readint(char **source)
{
  char *c = *source;
  BOOL negative = *c == '-';
  int result = 0;

  if (negative) c++;
  while (*c >= '0' && *c <= '9') result = result * 10 + (*c++ - '0');
  *source = c;
  if (negative) result = - result;
  return result;
}

/* -------------------------------------------------------------------------------------------------- */

static int image_width = 0;
static int image_height = 0;
static int ticks_per_pixel = 25; /* used for timing output */

/* -------------------------------------------------------------------------------------------------- */

static void print_microseconds(float micros)
{
  printf("%f microseconds (%f ticks @%iMHz) ", micros, micros * ticks_per_pixel, ticks_per_pixel);
}

/* -------------------------------------------------------------------------------------------------- */

extern int main(int argc, char **argv)
{
  char *buffer;
  int size;
  int buffersize;
  /* Things read in from the command line */
  char *sourcefile = 0;
  BOOL plot = TRUE;
  BOOL timings = FALSE;
  BOOL collect_statistics = FALSE;
  BOOL give_help = FALSE;
  BOOL plot_mask = FALSE;
  int plotx = 0;
  int ploty = 0;

  /* Decode arguments */
  {
    int nextarg = 1;
    char *options = 0;

    while (nextarg < argc)
    {
      if (argv[nextarg][0] == '-')
      {
        options = argv[nextarg] + 1;
        while (*options != 0)
        {
          switch (*options)
          {
          case 'p': plot = TRUE;
                    options++;
                    if ((*options >= '0' && *options <= '9') || *options == '-') /* read coords to plot at */
                    {
                      plotx = readint(&options);
                      if (*options++ != ',') SYNERROR
                      ploty = readint(&options);
                    }
                    options--;
                    break;
          case 'T':
          case 't': timings = TRUE;
                    if (options[1] >= '0' && options[1] <= '9') {options++; ticks_per_pixel = readint(&options); options--;}
                    break;
          case 'S':
          case 's': collect_statistics = TRUE; break;
          case 'V':
          case 'v': verbose = TRUE; break;
          case 'm':
          case 'M': plot_mask = TRUE; break;
          case 'H':
          case 'h': give_help = TRUE;
                    if (options[1] == 'e') options++;
                    if (options[1] == 'l') options++;
                    if (options[1] == 'p') options++;
                    break;
          default:  SYNERROR
          }
          options++;
        }
      }
      else if (sourcefile == 0) sourcefile = argv[nextarg];
      nextarg++;
    }

    if (give_help)
    {
      help_message();
      if (sourcefile == 0) exit(0);
    }
    else if (sourcefile == 0) SYNERROR
    if (verbose) title_message();
  }

  /* Allocate the buffer, load in the JPEG file */
  tracef("Input file '%s'.\n" _ sourcefile);
  size = filesize(sourcefile);
  tracef("Input file size %i bytes.\n" _ size);
  if (size == -1) ERROR("File '%s' not found\n" _ sourcefile)
  if (size == -2) ERROR("'%s' is a directory\n" _ sourcefile)
  buffersize = roundup(size) + sizeof(int);
  buffer = safe_malloc(buffersize);
  MEMZERO(buffer, buffersize); /* ensure 0 bytes at end of file, so that output is deterministic */
  {
    FILE *f = fopen(sourcefile, "r");
    if (f == 0) SYSERROR
    if (size != fread(buffer + sizeof(int), sizeof(char), size, f)) SYSERROR
    fclose(f);
  }
  ((int*)buffer)[0] = size;
  size = roundup(size);

  /* Plot the sprite on the screen. Time how long it took, be prepared to print out time and pixels/sec. */
  if (plot)
  {
    sprite_area *a = (sprite_area*) (buffer);
    sprite_header *h = (sprite_header*) (buffer + sizeof(sprite_area));
    char table[256];
    int ticks;
    int npixels;

    /* find the number of pixels that will be plotted */
    int xeig, yeig, xsize, ysize;

    CALL(_swix(OS_ReadModeVariable, _R(2,0) | _OUT(2), -1, 4, &xeig))
    CALL(_swix(OS_ReadModeVariable, _R(2,0) | _OUT(2), -1, 5, &yeig))
    CALL(_swix(OS_ReadModeVariable, _R(2,0) | _OUT(2), -1, 11, &xsize))
    CALL(_swix(OS_ReadModeVariable, _R(2,0) | _OUT(2), -1, 12, &ysize))
    xsize++, ysize++;
    tracef("Screen size %ix%i at %ix%i\n" _ xsize _ ysize _ xeig _ yeig);
    if ((xsize << xeig) > 2 * image_width) xsize = image_width; /* xsize is now pixels */
    if ((ysize << yeig) > 2 * image_height) ysize = image_height;
    npixels = xsize * ysize;

    CALL(_swix(OS_CLI, _IN(0), "Unset Sys$RC"))

    /* Set up the translation table */
    CALL(_swix(ColourTrans_SelectTable, _R(8,0), a, h, -1, -1, table, 1, 0, 0))

    /* If doing timings then we avoid giving the time for the initial scan. Do this by plotting twice.
    The first plot makes just one pixel appear, in the bot left of the screen. */
    if (timings) CALL(_swix(OS_SpriteOp, _R(8,0), (plot_mask?50:52) + 512, a, h, (1<<xeig)-2*image_width, (1<<yeig)-2*image_height, 0, 0, table))

    /* Now do the actual timed plot */
    ticks = clock();
    CALL(_swix(OS_SpriteOp, _R(8,0), (plot_mask?50:52) + 512, a, h, plotx, ploty, 0, 0, table))
    ticks = clock() - ticks;

    CALL(_swix(OS_CLI, _IN(0), "If \"<Sys$RC>\"<>\"\" Then Echo Error return code <Sys$RC> from plot operation"))

    if (timings)
    {
      printf("That took %f seconds to plot %i pixels,\n", (float)ticks/100.0, npixels);
      print_microseconds(((float)ticks*10000.0)/(float)npixels);
      printf(" per pixel\n");
    }

    if (verbose) /* hack to discover effect on OS_SpriteOp 40, read sprite info */
    {
      int width, height, mask, mode;

      CALL(_swix(OS_SpriteOp, _R(3,0) | _OUT(3)|_OUT(4)|_OUT(5)|_OUT(6), 
        40 + 512, a, h, &width, &height, &mask, &mode))
      printf("OS says width=%i, height=%i, mask=%i, mode=%i\n", width, height, mask, mode);
      /* This fails with type-9 sprites on RISC OS 3.10, because of tests deep in the OS. */
    }
  }

  return 0;
}
