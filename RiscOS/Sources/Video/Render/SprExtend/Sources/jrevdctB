; hand-coded DCT
; Based on the inverse DCT in the Indep JPEG Group's release 4 code - look in c.jrevdct4.
;   This C source, and the assembler output from the C (from cc 4.50) are both extremely
;   useful in understanding this code.
; started 24-Sep-93

; 21-Oct-93 - This version is considerably expanded, with customised paths
; for cases of only one non-zero odd coefficients (four cases, one for each
; component). This code works, but turns out to have no performance advantage
; on an ARM3 machine. The cost of all that checking,and the resulting
; increase of cache misses, probably soak up anything significant. So, this
; version discarded and I go back to the previous one.
;   total code size - 1700 bytes.

; ------------------------------------------------------------------------
; The DCT macro
; ------------------------------------------------------------------------

; The basic 1-D DCT is coded here as a macro, because the code is replicated
; for rows and for columns.

; There are various basic paths through a 1D DCT in this code:
;   all the values are zero - nothing need be done. (common, esp in 1st pass)
;   only r0 is non-zero - replicate it (also common, ditto)
;   r1/r3/r5/r7 are zero, others are non-zero
;   r0/r2/r4/r6 are zero, others are non-zero

        MACRO
        DCTransform $rc

; the even components.

        ORRS    r10,r2,r6
        BEQ     $rc._zr26                 ; B if r2/6 are zero

        ADD     r10,r2,r6

        ;MulCon  r11,r10,FIX_0_541196100   ; z1
        RSB     r11,r10,r10,LSL #4
        ADD     r11,r11,r11,LSL #3
        ADD     r11,r11,r10,LSL #2

        ;MulCon  r10,r6,- FIX_1_847759065
        SUB     r10,r6,r6,LSL #5
        RSB     r10,r10,r10,LSL #4
        SUB     r10,r10,r6,LSL #3
        ADD     r10,r10,r11                ; tmp2

        ;MulCon  r12,r2,FIX_0_765366865
        ADD     r12,r2,r2,LSL #4
        ADD     r12,r12,r2,LSL #5
        ADD     r12,r11,r12,LSL #2        ; tmp3
        ; scratch z1=r11
        ; scratch r2,r6

        SUB     r11,r0,r4                 ; tmp1 (not shifted)
        ADD     r6,r10,r11,LSL #8         ; tmp11 = tmp1 + tmp2;
        RSB     r2,r10,r11,LSL #8         ; tmp12 = tmp1 - tmp2;

        ADD     r11,r0,r4                 ; tmp0 (not shifted)
        ; scratch r0,r4
        ADD     r0,r12,r11,LSL #8         ; tmp10 = tmp0 + tmp3;
        RSB     r4,r12,r11,LSL #8         ; tmp13 = tmp0 - tmp3;
        ; scratch r11=tmp0
; scratch r10,r11,r12
; r0/2/4/6 have been replaced by tmp10/12/13/11

; the odd components

; If not including the only-one-odd-nonzero cases then do this test:
        ORRS    r10,r1,r3
        ORREQS  r10,r5,r7
        BEQ     $rc._odd_allzero         ; shortcut
; otherwise, do this:
        ORRS    r10,r1,r3
        BEQ     $rc._odd_shortcut         ; possible shortcut - at least r1,r3 are zero
        ORRS    r10,r5,r7
        BEQ     $rc._odd_shortcut2        ; possible shortcut - at least r5,r7 are zero

$rc._odd

; the pressure on registers is severe: do z3,z4,z5 so that
; z5 can be discarded before doing anything with z1,z2

        ADD     r10,r7,r3                 ; z3
        ADD     r11,r5,r1                 ; z4
        ADD     r12,r10,r11               ; ...z3+z4

        ;MulCon  lr,r12,FIX_1_175875602    ; z5
        ADD     lr,r12,r12,LSL #5
        ADD     lr,lr,lr,LSL #3
        ADD     lr,lr,r12,LSL #2
        ; scratch r12

        ;MulCon  r12,r10,- FIX_1_961570560 ; z3
        SUB     r12,r10,r10,LSL #1
        RSB     r12,r12,r12,LSL #8
        ADD     r12,r12,r10,LSL #2        ; (still needs to <<1)
        ; scratch r10

        ;MulCon  r10,r11,- FIX_0_390180644 ; z4
        SUB     r10,r11,r11,LSL #1
        ADD     r10,r10,r10,LSL #5
        ADD     r10,r10,r11,LSL #3         ; (still needs to <<2)
        ; scratch r11

        ADD     r12,lr,r12,LSL #1         ; z3 += z5; (did the <<1 from z3 above)
        ADD     r10,lr,r10,LSL #2         ; z4 += z5; (did the <<2 from z4 above)
        ; scratch lr=z5
        ; now do z1 all the way through before doing z2.
        ; registers: r12=z3
        ;            r10=z4
        ;            r11,lr scratch
        ADD     r11,r7,r1                 ; z1

; prevent 'macro too big' errors!
        MEND
        MACRO
        DCTransform2 $rc

        ;MulCon  lr,r7,FIX_0_298631336     ; tmp0
        ADD     lr,r7,r7,LSL #1
        ADD     lr,lr,r7,LSL #4           ; (still need to do <<2)
        ; scratch r7

        ;MulCon  r7,r1,FIX_1_501321110     ; tmp3
        ADD     r7,r1,r1,LSL #1           ; (still need to <<7)
        ; scratch r1

        ;MulCon  r1,r11,- FIX_0_899976223  ; z1
        ADD     r1,r11,r11,LSL #2
        ADD     r1,r1,r11,LSL #3
        SUB     r1,r1,r11,LSL #7          ; (still need to <<1)
        ; scratch r11

        ADD     lr,r12,lr,LSL #2          ; tmp0 += z3;         (did the <<2 for tmp0 above)
        ADD     lr,lr,r1,LSL #1           ; tmp0 += z1;         (did the <<1 for z1 above)
        ADD     r7,r10,r7,LSL #7          ; tmp3 += z4;         (did the <<7 for tmp3 above)
        ADD     r7,r7,r1,LSL #1           ; tmp3 += z1;         (did the <<1 for z1 above)
        ; scratch r1
        ; now we can do z2
        ; registers: r7=tmp3
        ;            r10=z4
        ;            r12=z3
        ;            lr=tmp0
        ;            r1,r11 scratch
        ADD     r1,r5,r3                  ; z2

        ;MulCon  r11,r1,- FIX_2_562915447  ; z2
        SUB     r11,r1,r1,LSL #1
        ADD     r11,r11,r11,LSL #5
        SUB     r11,r11,r1,LSL #3         ; (still need to <<4)
        ; scratch r1

        ADD     r10,r10,r11,LSL #4        ; ...z2+z4 (did the <<4 above)
        ADD     r12,r12,r11,LSL #4        ; ...z2+z3 (did the <<4 above)
        ; scratch r11

        ;MulCon  r11,r5,FIX_2_053119869    ; tmp1
        RSB     r11,r5,r5,LSL #3
        ADD     r11,r11,r5,LSL #8         ; (still need to <<1)
        ; scratch r5

        ;MulCon  r5,r3,FIX_3_072711026     ; tmp2
        ADD     r5,r3,r3,LSL #8
        ADD     r5,r5,r5,LSL #1
        ADD     r5,r5,r3,LSL #4
        ; scratch r3

        ADD     r11,r10,r11,LSL #1        ; tmp1 += z2 + z4; (did the <<1 on tmp1 above)
        ADD     r10,r5,r12                ; tmp2 += z2 + z3;
        MEND

        MACRO
        DCTransform3 $rc
        ; final combination and output stage:
        ; r0 = tmp10
        ; r1 =             (scratch)
        ; r2 = tmp12
        ; r3 =             (scratch)
        ; r4 = tmp13
        ; r5 =             (scratch)
        ; r6 = tmp11
        ; r7 = tmp3
        ; r8 = loop counter
        ; r9 = data pointer
        ; r10= tmp2
        ; r11= tmp1
        ; r12=             (scratch)
        ; r13= sp
        ; lr = tmp0
        ADD     r1,r6,r10                 ; tmp11 + tmp2
        ADD     r3,r4,lr                  ; tmp13 + tmp0
        SUB     r5,r2,r11                 ; tmp12 - tmp1
        SUB     r4,r4,lr                  ; tmp13 - tmp0
        ADD     r2,r2,r11                 ; tmp12 + tmp1
        SUB     r6,r6,r10                 ; tmp11 - tmp2
        ADD     r0,r0,r7                  ; tmp10 + tmp3
        SUB     r7,r0,r7,LSL #1           ; tmp10 - tmp3 (actually tmp10 + tmp3 - 2*tmp3)
;$rc._store goes here
        MEND

        MACRO
        DCTransform_Leftovers $rc
$rc._zr26
        ; r2/6 are zero - we can take a shortcut through the first quadrant.
        ; tmp2 and tmp3 are zero, tmp0=(r0+r4)<<8, tmp1=(r0-r4)<<8.
        ; we do this rather than replicate-DC because it's little slower,
        ; especially considering we only did one instruction of test to get here,
        ; and handles one more case.
        SUB     r6,r0,r4
        MOV     r6,r6,LSL #8             ; tmp11 = tmp1 + tmp2;
        MOV     r2,r6                    ; tmp12 = tmp1 - tmp2;
        ADD     r0,r0,r4
        MOV     r0,r0,LSL #8             ; tmp10 = tmp0 + tmp3;
        MOV     r4,r0                    ; tmp13 = tmp0 - tmp3;
        ; We also check for r1-r7 being zero (so replicate r0 << 8), or
        ; r0-r7 being zero in which case nothing to be done at all.

;        ORRS    r10,r1,r3
;        ORREQS  r10,r5,r7
;        BNE     $rc._odd                 ; odd coeffs NOT all zero, handle them normally.
        ORRS    r10,r1,r3
        BNE     $rc._odd                  ; odd coeffs NOT all zero, handle them normally.
        ORREQS  r10,r5,r7
        BNE     $rc._odd_shortcut         ; r1|r3 zero, but r5|r7 not - try the shortcuts.

        ; 1-3,5-7 are all zero - worth checking for 1-7 zero, and for all zero.
        ORRS    r10,r0,r2                ; r0+r4,r0-r4 both zero -> r0,r4 were both zero
        BEQ     $rc._inc                 ; r0-r7 are all zero - don't even save
        ; code for 1-7 zero, works for any case where 1/3/5/7 are zero in fact.
$rc._odd_allzero
        MOV     r7,r0
        MOV     r1,r6
        MOV     r5,r2
        MOV     r3,r4
        ; it's as if you B'd to $rc._store here.
        ; the caller of this macro will replicate the end-of-loop code,
        ; or put in the suitable B.
        MEND

; ------------------------------------------------------------------------
; The case of odd coefficients with only r5 non-zero
; ------------------------------------------------------------------------
; The four separate cases of only one odd coefficient nonzero are coded
; separately. Each one is a hacked version of the general case, with
; values known to be zero discarded.

        MACRO
        DCTransform_Leftovers2 $rc
$rc._odd_shortcut
        ; Even coeffs done. r1 and r3 are zero. Check for them all zero. Do customised
        ; code for only one odd coeff non-zero, else go back to the general code.
;        ORRS    r10,r5,r7
;        BEQ     $rc._odd_allzero
        CMP     r5,#0
        BEQ     $rc._odd_only_r7_nonzero
        CMP     r7,#0
        BNE     $rc._odd                      ; r5 and r7 both nonzero - back to totally general code, sorry
$rc._odd_only_r5_nonzero
        ; 38 instructions in normal path through odd coeffs, 16 through this one.

        ; r10 = z3 = 0                    ADD     r10,r7,r3                 ; z3
        ; r11 = r5                        ADD     r11,r5,r1                 ; z4
        ; r12 = r5                        ADD     r12,r10,r11               ; ...z3+z4

        ;MulCon  lr,r12,FIX_1_175875602    ; z5
        ADD     lr,r5,r5,LSL #5
        ADD     lr,lr,lr,LSL #3
        ADD     lr,lr,r5,LSL #2
        ; scratch r12
        ; r12 = 0                         MulCon  r12,r10,- FIX_1_961570560 ; z3
        ;                             ... ADD     r12,r12,r10,LSL #2        ; (still needs to <<1)
        ; scratch r10
        ;MulCon  r10,r11,- FIX_0_390180644 ; z4
        SUB     r10,r5,r5,LSL #1
        ADD     r10,r10,r10,LSL #5
        ADD     r10,r10,r5,LSL #3         ; (still needs to <<2)
        ; scratch r11

        ; r12 = lr                        ADD     r12,lr,r12,LSL #1   ; z3 += z5; (did the <<1 from above)
        ADD     r10,lr,r10,LSL #2         ; z4 += z5; (did the <<2 from above)
        ; scratch lr=z5
        ; now do z1 all the way through before doing z2.
        ; registers: r12=z3         NO, lr=z3, r12 scratch
        ;            r10=z4
        ;            r11,lr scratch
        ; r11 = 0                         ADD     r11,r7,r1                 ; z1

        ; lr = 0                          MulCon  lr,r7,FIX_0_298631336     ; tmp0
        ;                             ... ADD     lr,lr,r7,LSL #4           ; (still need to do <<2)
        ; scratch r7

        ; r7 = 0                          MulCon  r7,r1,FIX_1_501321110     ; tmp3
        ;                                 ADD     r7,r1,r1,LSL #1           ; (still need to <<7)
        ; scratch r1

        ; r1 = 0                          MulCon  r1,r11,- FIX_0_899976223  ; z1
        ;                             ... SUB     r1,r1,r11,LSL #7          ; (still need to <<1)
        ; scratch r11

        ; lr = r12                        ADD     lr,r12,lr,LSL #2  ; tmp0 += z3;(did the <<2 for tmp0 above)
        ;                                 ADD     lr,lr,r1,LSL #1   ; tmp0 += z1;(did the <<1 for z1 above)
        ; r7 = r10                        ADD     r7,r10,r7,LSL #7  ; tmp3 += z4;(did the <<7 for tmp3 above)
        ;                                 ADD     r7,r7,r1,LSL #1   ; tmp3 += z1;(did the <<1 for z1 above)
        ; scratch r1
        ; now we can do z2
        ; registers: r7=tmp3 = r10
        ;            r10=z4
        ;            r12=z3          NO, in lr
        ;            lr=tmp0 = r12
        ;            r1,r11 scratch
        ; r1 = r5                         ADD     r1,r5,r3                  ; z2

        ;MulCon  r11,r1,- FIX_2_562915447  ; z2
        SUB     r11,r5,r5,LSL #1
        ADD     r11,r11,r11,LSL #5
        SUB     r11,r11,r5,LSL #3         ; (still need to <<4)
        ; scratch r1

        MOV     r7,r10
;       MOV     lr,r12
        ADD     r1,r10,r11,LSL #4         ; ...z2+z4 (did the <<4 above)     (WAS TO r10)
        ADD     r10,lr,r11,LSL #4         ; ...z2+z3 (did the <<4 above)     (WAS TO r12)
        ; scratch r11

        ;MulCon  r11,r5,FIX_2_053119869    ; tmp1
        RSB     r11,r5,r5,LSL #3
        ADD     r11,r11,r5,LSL #8         ; (still need to <<1)

        ; r5 = 0                      ... MulCon  r5,r3,FIX_3_072711026     ; tmp2

        ADD     r11,r1,r11,LSL #1         ; tmp1 += z2 + z4; (did the <<1 on tmp1 above)
        ; r10 = r12 (done by WAS TO above)ADD     r10,r5,r12                ; tmp2 += z2 + z3;
        MEND
        ; now combine with even coefficients
        ; it's as if we're at the call to DCTransform3

; ------------------------------------------------------------------------
; The case of odd coefficients with only r7 non-zero
; ------------------------------------------------------------------------
        MACRO
        DCTransform_Leftovers3 $rc
$rc._odd_only_r7_nonzero
        ; r10 = r7                        ADD     r10,r7,r3                 ; z3
        ; r11 = 0                         ADD     r11,r5,r1                 ; z4
        ; r12 = r7                        ADD     r12,r10,r11               ; ...z3+z4

        ;MulCon  lr,r12,FIX_1_175875602    ; z5
        ADD     r11,r7,r7,LSL #5
        ADD     r11,r11,r11,LSL #3
        ADD     r11,r11,r7,LSL #2
        ; scratch r12

        ;MulCon  r12,r10,- FIX_1_961570560 ; z3
        SUB     r12,r7,r7,LSL #1
        RSB     r12,r12,r12,LSL #8
        ADD     r12,r12,r7,LSL #2        ; (still needs to <<1)
        ; scratch r10

        ; r10 = 0                        MulCon  r10,r11,- FIX_0_390180644 ; z4
        ;                            ... ADD     r10,r10,r11,LSL #3         ; (still needs to <<2)
        ; scratch r11

        ADD     r10,r11,r12,LSL #1       ; z3 += z5; (did the <<1 from above)
        ; r10 = r11                      ADD     r10,lr,r10,LSL #2  ; z4 += z5; (did the <<2 from above)
        ; scratch lr=z5
        ; registers: r12=z3              (NO, r12 scratch)
        ;            r10=z4              (NO, r10=z3)
        ;            r11,lr scratch      (NO, just lr - r11=z4)
        ; r11 = r7                       ADD     r11,r7,r1                 ; z1

        ;MulCon  lr,r7,FIX_0_298631336     ; tmp0
        ADD     lr,r7,r7,LSL #1
        ADD     lr,lr,r7,LSL #4            ; (still need to do <<2)
        ; scratch r7

        ; r7 = 0                          ;MulCon  r7,r1,FIX_1_501321110     ; tmp3
        ;                                 ADD     r7,r1,r1,LSL #1           ; (still need to <<7)
        ; scratch r1
        ; (NB r7 = z1 INSTEAD OF r11)

        ;MulCon  r1,r11,- FIX_0_899976223  ; z1
        ADD     r1,r7,r7,LSL #2
        ADD     r1,r1,r7,LSL #3
        SUB     r1,r1,r7,LSL #7           ; (still need to <<1)
        ; scratch r11 (ie SCRATCH r7)

        ; (NOTE r1=z1, r11=z4, r7=z1, lr=tmp0, r10=z3, tmp3=0)
        ADD     lr,r10,lr,LSL #2          ; tmp0 += z3;         (did the <<2 for tmp0 above)
        ADD     lr,lr,r1,LSL #1           ; tmp0 += z1;         (did the <<1 for z1 above)
        ; r7 = lr                         ADD     r7,r10,r7,LSL #7 ; tmp3 += z4; (did the <<7 for tmp3 above)
        ADD     r7,r11,r1,LSL #1          ; tmp3 += z1;         (did the <<1 for z1 above)
        ; scratch r1
        ; registers: r7=tmp3
        ;            r10=z4       (NO, r10=z3)
        ;            r12=z3       (NO, r12 scratch)
        ;            lr=tmp0
        ;            r1,r11 scratch (NO, r11 = z4)

        ; z2=0, so we've finished now - tmp2=z3,tmp1=z4.
        MEND
; registers are correct to enter DCTransform3.

; ------------------------------------------------------------------------
; The case of odd coefficients with only r1 non-zero
; ------------------------------------------------------------------------
        MACRO
        DCTransform_Leftovers4 $rc
$rc._odd_shortcut2
        ; Even coeffs done. r1 OR r3 is non-zero, r5 and r7 are zero. Do customised
        ; code for only one odd coeff non-zero, else go back to the general code.
        CMP     r1,#0
        BEQ     $rc._odd_only_r3_nonzero
        CMP     r3,#0
        BNE     $rc._odd                  ; r1 nonzero, r3 nonzero - back to totally general code, sorry
$rc._odd_only_r1_nonzero
        ; r10 = 0                         ADD     r10,r7,r3                 ; z3
        ; r11 = r1                        ADD     r11,r5,r1                 ; z4
        ; r12 = r1                        ADD     r12,r10,r11               ; ...z3+z4

        ;MulCon  lr,r1,FIX_1_175875602    ; z5
        ADD     r10,r1,r1,LSL #5
        ADD     r10,r10,r10,LSL #3
        ADD     r10,r10,r1,LSL #2
        ; scratch r12

        ; r12 = 0                         ;MulCon  r12,r10,- FIX_1_961570560 ; z3
        ;                             ... ADD     r12,r12,r10,LSL #2        ; (still needs to <<1)
        ; scratch r10

        ;MulCon  r10,r11,- FIX_0_390180644 ; z4
        SUB     r11,r1,r1,LSL #1
        ADD     r11,r11,r11,LSL #5
        ADD     r11,r11,r1,LSL #3         ; (still needs to <<2)
        ; scratch r11

        ; r12 = r10                       ADD     r12,lr,r12,LSL #1         ; z3 += z5; (did the <<1 from above)
        ADD     r11,r10,r11,LSL #2         ; z4 += z5; (did the <<2 from above)
        ; scratch lr=z5                   (NO, lr=z3)
        ; registers: r12=z3               (NO, r12 scratch)
        ;            r10=z4               (NO, r10=z3)
        ;            r11,lr scratch       (NO, r11=z4)
        ; r11 = r1                        ADD     r11,r7,r1                 ; z1

        ; lr = 0                          MulCon  lr,r7,FIX_0_298631336     ; tmp0
        ;                             ... ADD     lr,lr,r7,LSL #4           ; (still need to do <<2)
        ; scratch r7

        ;MulCon  r7,r1,FIX_1_501321110     ; tmp3
        ADD     r7,r1,r1,LSL #1           ; (still need to <<7)
        ; scratch r1

        ;MulCon  r1,r11,- FIX_0_899976223  ; z1
        ADD     r12,r1,r1,LSL #2
        ADD     r12,r12,r1,LSL #3
        SUB     r12,r12,r1,LSL #7          ; (still need to <<1)
        ; scratch r11

        ; tmp0 = lr                       ADD     lr,r12,lr,LSL #2          ; tmp0 += z3;         (did the <<2 for tmp0 above)
        ADD     lr,r10,r12,LSL #1         ; tmp0 += z1;         (did the <<1 for z1 above)
        ADD     r7,r11,r7,LSL #7          ; tmp3 += z4;         (did the <<7 for tmp3 above)
        ADD     r7,r7,r12,LSL #1          ; tmp3 += z1;         (did the <<1 for z1 above)
        ; scratch r1
        ; registers: r7=tmp3
        ;            r10=z4               (NO, r10=z3)
        ;            r12=z3               (NO, r12 scratch)
        ;            lr=tmp0              (NO, lr=tmp0)
        ;            r1,r11 scratch       (NO, r11=z4)
        ; That's all we need - z2 is 0, so tmp1=z4 and tmp2=z3

        MEND
; Registers are now correct to enter DCTransform3.

; ------------------------------------------------------------------------
; The case of odd coefficients with only r3 non-zero
; ------------------------------------------------------------------------
        MACRO
        DCTransform_Leftovers5 $rc
$rc._odd_only_r3_nonzero
        ; r10 = r3                         ADD     r10,r7,r3                 ; z3
        ; r11 = 0                          ADD     r11,r5,r1                 ; z4
        ; r12 = r3                         ADD     r12,r10,r11               ; ...z3+z4

        ;MulCon  lr,r12,FIX_1_175875602    ; z5
        ADD     r7,r3,r3,LSL #5
        ADD     r7,r7,r7,LSL #3
        ADD     r7,r7,r3,LSL #2
        ; scratch r12

        ;MulCon  r12,r10,- FIX_1_961570560 ; z3
        SUB     r12,r3,r3,LSL #1
        RSB     r12,r12,r12,LSL #8
        ADD     r12,r12,r3,LSL #2         ; (still needs to <<1)
        ; scratch r10

        ; r10 = 0                         MulCon  r10,r11,- FIX_0_390180644 ; z4
        ;                             ... ADD     r10,r10,r11,LSL #3         ; (still needs to <<2)
        ; scratch r11

        ; r10 = lr                        ADD     r10,lr,r10,LSL #2         ; z4 += z5; (did the <<2 from z4 above)
        ADD     lr,r7,r12,LSL #1          ; z3 += z5; (did the <<1 from z3 above)
        ; scratch lr=z5
        ; registers: r12=z3               (NO, r12 scratch)
        ;            r10=z4
        ;            r11,lr scratch       (NO, lr=z3)
        ; r11 = 0                         ADD     r11,r7,r1                 ; z1

        ; lr = 0                          MulCon  lr,r7,FIX_0_298631336     ; tmp0
        ;                             ... ADD     lr,lr,r7,LSL #4           ; (still need to do <<2)
        ; scratch r7

        ; r7 = 0                          MulCon  r7,r1,FIX_1_501321110     ; tmp3
        ;                                 ADD     r7,r1,r1,LSL #1           ; (still need to <<7)
        ; scratch r1

        ; r1 = 0                          MulCon  r1,r11,- FIX_0_899976223  ; z1
        ;                             ... SUB     r1,r1,r11,LSL #7          ; (still need to <<1)
        ; scratch r11

        ; lr = tmp0 = r12 = z3            ADD     lr,r12,lr,LSL #2          ; tmp0 += z3;         (did the <<2 for tmp0 above)
        ;                                 ADD     lr,lr,r1,LSL #1           ; tmp0 += z1;         (did the <<1 for z1 above)
        ; r7 = tmp3 = r10 = z4            ADD     r7,r10,r7,LSL #7          ; tmp3 += z4;         (did the <<7 for tmp3 above)
        ;                                 ADD     r7,r7,r1,LSL #1           ; tmp3 += z1;         (did the <<1 for z1 above)
        ; scratch r1
        ; registers: r7=tmp3              (AND r7=z4)
        ;            r10=z4               (NO, r10 scratch)
        ;            r12=z3               (NO, r12 scratch)
        ;            lr=tmp0              (AND lr=z3)
        ;            r1,r11 scratch
        ; r1 = r3                         ADD     r1,r5,r3                  ; z2

        ;MulCon  r11,r3,- FIX_2_562915447  ; z2
        SUB     r11,r3,r3,LSL #1
        ADD     r11,r11,r11,LSL #5
        SUB     r11,r11,r3,LSL #3         ; (still need to <<4)
        ; scratch r1

        ADD     r12,lr,r11,LSL #4         ; ...z2+z3 (did the <<4 above)
        ADD     r11,r7,r11,LSL #4         ; ...z2+z4 (did the <<4 above)      (WAS INTO r10)
        ; scratch r11

        ; r11 = 0                         MulCon  r11,r5,FIX_2_053119869    ; tmp1
        ;                                 ADD     r11,r11,r5,LSL #8         ; (still need to <<1)
        ; scratch r5

        ;MulCon  r5,r3,FIX_3_072711026     ; tmp2
        ADD     r5,r3,r3,LSL #8
        ADD     r5,r5,r5,LSL #1
        ADD     r5,r5,r3,LSL #4
        ; scratch r3

        ;                                 ADD     r11,r10,r11,LSL #1        ; tmp1 += z2 + z4; (did the <<1 on tmp1 above)
        ADD     r10,r5,r12                ; tmp2 += z2 + z3;
        MEND
; Registers are now correct to enter DCTransform3.

; ------------------------------------------------------------------------
; The main routine
; ------------------------------------------------------------------------
; r0=cinfo (unused)
; r1=data ptr
; r2=count

asm_j_rev_dct                             ; extern void asm_j_rev_dct(decompress_info_ptr cinfo, DCTBLOCK data, int count);

        CMP     r2,#0                     ; if count=0, do nothing
        MOVLE   pc,lr

        STMDB   sp!,{r1,r2,r4-r12,lr}     ; save state - count is at [sp,#4], r3 need not be preserved

dct_loop                                  ; for each block

        MOV     r8,#8                     ; loop counter for rows
        MOV     r9,r1                     ; data pointer

; First do the rows
dctrow_loop
        LDMIA   r9,{r0-r7}                ; get this row
        DCTransform dctrow
        DCTransform2 dctrow
        DCTransform3 dctrow
dctrow_store
        STMIA   r9,{r0-r7}                ; put this row
dctrow_inc
        ADD     r9,r9,#8*4                ; increment output pointer
        SUBS    r8,r8,#1
        BNE     dctrow_loop
dctrow_done

; now to do the columns, very similar but the loads/stores are spaced
; out more.
;        LDR     r9,[sp]                   ; reload data pointer
        SUB     r9,r9,#8*8*4              ; reset data pointer
        SUB     r8,r9,#8*8*4              ; set up output pointer
dctcol_loop
        ; load the data values, spaced 8 words apart.
        LDR     r0,[r9,#8*4*0]
        LDR     r1,[r9,#8*4*1]
        LDR     r2,[r9,#8*4*2]
        LDR     r3,[r9,#8*4*3]
        LDR     r4,[r9,#8*4*4]
        LDR     r5,[r9,#8*4*5]
        LDR     r6,[r9,#8*4*6]
        LDR     r7,[r9,#8*4*7]

        DCTransform dctcol
        DCTransform2 dctcol
        DCTransform3 dctcol
dctcol_store
        STMIA   r8,{r0-r7}                ; store in row order, in the block below the original input
dctcol_inc
        ADD     r8,r8,#8*4                ; advance output pointer
        ADD     r9,r9,#4                  ; advance input pointer
        SUB     r10,r9,r8                 ; terminate based on the difference between them
        CMP     r10,#8*4                  ; until then the difference will be bigger
        BGT     dctcol_loop               ; loop

        LDMIA   sp!,{r1,r2}               ; get block pointer, count back
        SUBS    r2,r2,#1                  ; decrement count
        LDMLEIA sp!,{r4-r12,pc}^          ; exit
        ; 'count' says that we do another block
        ADD     r1,r1,#64*4               ; advance pointer to next block
        STMDB   sp!,{r1,r2}               ; push pointer and count back on stack
        B       dct_loop                  ; and do another block

; --------------------------------------------------------------------------
        DCTransform_Leftovers dctrow
        STMIA   r9!,{r0-r7}               ; store this row
        SUBS    r8,r8,#1                  ; decrement row count
        BNE     dctrow_loop               ; and either do another row
        B       dctrow_done               ; or done all rows
        DCTransform_Leftovers2 dctrow
        DCTransform3 dctrow
        STMIA   r9!,{r0-r7}               ; store this row
        SUBS    r8,r8,#1                  ; decrement row count
        BNE     dctrow_loop               ; and either do another row
        B       dctrow_done               ; or done all rows
        DCTransform_Leftovers3 dctrow
        DCTransform3 dctrow
        STMIA   r9!,{r0-r7}               ; store this row
        SUBS    r8,r8,#1                  ; decrement row count
        BNE     dctrow_loop               ; and either do another row
        B       dctrow_done               ; or done all rows
        DCTransform_Leftovers4 dctrow
        DCTransform3 dctrow
        STMIA   r9!,{r0-r7}               ; store this row
        SUBS    r8,r8,#1                  ; decrement row count
        BNE     dctrow_loop               ; and either do another row
        B       dctrow_done               ; or done all rows
        DCTransform_Leftovers5 dctrow
        DCTransform3 dctrow
        STMIA   r9!,{r0-r7}               ; store this row
        SUBS    r8,r8,#1                  ; decrement row count
        BNE     dctrow_loop               ; and either do another row
        B       dctrow_done               ; or done all rows

        DCTransform_Leftovers dctcol
        B       dctcol_store              ; B to code for end of column
        DCTransform_Leftovers2 dctcol
        DCTransform3 dctcol
        B       dctcol_store              ; B to code for end of column
        DCTransform_Leftovers3 dctcol
        DCTransform3 dctcol
        B       dctcol_store              ; B to code for end of column
        DCTransform_Leftovers4 dctcol
        DCTransform3 dctcol
        B       dctcol_store              ; B to code for end of column
        DCTransform_Leftovers5 dctcol
        DCTransform3 dctcol
        B       dctcol_store              ; B to code for end of column

        END
