
; Clip module header and entry points

; global includes

	GET	hdr.include
	GET	hdr.msgstuff
	GET	hdr.GenSWIs
	GET	hdr.swiparams
	GET	hdr.filters
	GET	hdr.region
	GET	hdr.RegionMan
	GET     VersionASM

 [ Debug
 	GET	hdr.debuginc
 ]

; includes for this file

	AREA	|!!!Clip$Header|,CODE,READONLY

; Module code starts here

Base
	DCD	StartEntry	-Base
	DCD	InitEntry	-Base
	DCD	DieEntry	-Base
	DCD	ServiceEntry	-Base
	DCD	Title		-Base
	DCD	HelpStr		-Base
	DCD	CommandTab	-Base
	DCD	ClipSWI_Base		; SWI chunk
	DCD	SWIEntry	-Base
	DCD	SWITable	-Base
	DCD     0                       ; SWI decoding code
	DCD     0                       ; messages
	DCD     ModuleFlags     -Base

Title
	=	"Clip",0

HelpStr
        =       "Clip",9,9,"$Module_HelpVersion",0
	ALIGN

ModuleFlags
      [ No32bitCode
        DCD     0
      |
        DCD     ModuleFlag_32bit
      ]

; ******************************************************************************
;
; Start Entry point
;

StartEntry	*	Base

; ******************************************************************************
;
; Init Entry Point
;
; for now we do nothing here; later we will do lots of interesting and fun things

InitEntry
	stmfd	r13!,{lr}

 [ DebugI
	DLINE	"clip module starting"
 ]

	mov	r0,#ModHandReason_Claim
	mov	r3,#:INDEX:WsSize
	swi	XOS_Module
	ldmvsfd	r13!,{pc}

; store the workspace pointer
	str	r2,[r12]

; store the reference back
        str	r12,[r2]

; and move it into r12
	mov	r12,r2

; then init the workspace

	mov	r3,#(:INDEX:WsSize)-4
	mov	r2,#0

24
	str	r2,[r12,r3]
	subs	r3,r3,#4
	bpl	%bt24

; check filter version
	bl	GetFilterVersion

	str	r0,FilterVersion

	cmp	r0,#13    ; very unlikely to set V
	blt	%FT25

	ldmfd	r13!,{pc}


25	; look up error for wrong filter version
        adr     r0,ErrorBlock_WrongFilter
	BL	ErrorLookup
	mov	r6,r0

26	; error handling
	bl	CloseMessageFile

	mov	r0,#ModHandReason_Free
	mov	r2,r12
	swi	XOS_Module

	mov	r0,r6
	SETV
	ldmfd	r13!,{pc}

; ******************************************************************************
;
; Die entry point.
;
; for now, do nothing.  in future, we will refuse to die if no clipping regions
; are active.

DieEntry
	stmfd	r13!,{lr}

	ldr	r12,[r12]

	ldr	r0,ClipHead
	cmp	r0,#0
	beq	%ft10

        adr     r0,ErrorBlock_InUse
	bl	ErrorLookup     ; sets V
	ldmfd   r13!,{pc}

10
	bl	RemoveFilters

	bl	CloseMessageFile

	ldr	r2,[r12]	; get the workspace pointer
        mov	r0,#ModHandReason_Free
	swi	XOS_Module

        CLRV
	ldmfd	r13!,{pc}

; ******************************************************************************
;
; Service call Entry point
;

ServiceTable
        DCD     0                               ; flags
        DCD     ServiceEntry2 -Base
        DCD     Service_NewApplication          ; &2A
        DCD     Service_PreModeChange           ; &4D
        DCD     Service_FilterManagerInstalled  ; &87
        DCD     Service_FilterManagerDying      ; &88
        DCD     0                               ; terminator
        DCD     ServiceTable -Base
ServiceEntry    ROUT
        mov     r0,r0
        teq     r1,#Service_PreModeChange
        teqne   r1,#Service_NewApplication
        teqne   r1,#Service_FilterManagerDying
        teqne   r1,#Service_FilterManagerInstalled
        movne   pc,lr
ServiceEntry2
	cmp	r1,#Service_PreModeChange
	beq	PreModeChange

	cmp	r1,#Service_FilterManagerDying
	beq	FilterManagerDying

	cmp	r1,#Service_FilterManagerInstalled
	beq	FilterManagerInstalled

;	handles the service_NewApplication call.  this call is used to

NewApplication	ROUT
	stmfd	sp!,{r10,r11,r12,lr}

;	sort the private word

	ldr	r12,[r12]

	ldr	r11,ClipHead
	mov	r10,#1
	str	r10,WindowsMoving

10
	cmp	r11,#0
	beq	%ft20				; if there are no regions left to munge

	bl	ZeroRegion			; make sure nothing gets painted
	ldr	r10,[r11,#Region_State]
	orr	r10,r10,#Region_State_AppStarted
	str	r10,[r11,#Region_State]

	ldr	r11,[r11,#Region_Next]

	b	%bt10

20
	ldmfd	sp!,{r10,r11,r12,pc}

PreModeChange	ROUT
	stmfd	sp!,{r11,r12,lr}

;	sort the private word

	ldr	r12,[r12]

;	first check if there are any active regions

	ldr	r11,ClipHead

10
	cmp	r11,#0
	beq	%ft20			; if there are no regions left to munge

	bl	ZeroRegion		; make sure nothing gets painted

;	now ensure that the filter code won't attempt to modify the region

	ldr	lr,[r11,#Region_State]
	orr	lr,lr,#Region_State_ModeChange
	str	lr,[r11,#Region_State]

	ldr	r11,[r11,#Region_Next]

	b	%bt10

20
	ldmfd	sp!,{r11,r12,pc}


FilterManagerDying	ROUT
	stmfd	sp!,{r11,r12,lr}

	ldr	r12,[r12]

	ldr	r11,ClipHead

10
	cmp	r11,#0
	beq	%ft20

	bl	ZeroRegion

	ldr	lr,[r11,#Region_State]
	orr	lr,lr,#Region_State_FilterDead
	bic	lr,lr,#Region_State_PostFilter
	str	lr,[r11,#Region_State]

	ldr	r11,[r11,#Region_Next]

	b	%bt10

20
	mov	r0,#0
	str	r0,FiltersInstalled

	ldmfd	sp!,{r11,r12,pc}

FilterManagerInstalled	ROUT
	stmfd	sp!,{r0,r11,r12,lr}

	ldr	r12,[r12]

	ldr	r11,ClipHead

	bl	GetFilterVersion

	str	r0,FilterVersion

;	if the filtermanager version is no use to us then
;	do nowt

	cmp	r0,#13

	blt	%ft20

; install some filters

	cmp	r11,#0
	beq	%ft20

	bl	InstallFilters

; and install one filter for every clipping region which needs it

10
	cmp	r11,#0
	beq	%ft20

	ldr	r0,[r11,#Region_SWIParams+Create_Flags]
	tsts	r0,#Create_Flags_Align
	beq	%ft15

        adrl    r0,PostName
        adr     r1,PostFilter
	mov	r2,r12
	ldr	r3,[r11,#Region_SWIParams+Create_TaskHandle]
	mvn	r4,#1:SHL:Open_Window_Request
	swi	XFilter_RegisterPostFilter
	bvs	%ft15

	ldr	r0,[r11,#Region_State]
	orr	r0,r0,#Region_State_PostFilter
	str	r0,[r11,#Region_State]

15
	ldr	r11,[r11,#Region_Next]
	b	%bt10

20
	ldmfd	sp!,{r0,r11,r12,pc}

; ******************************************************************************
;
; Command table - supports no commands.

CommandTab	*	Base


; ******************************************************************************
;
; SWIEntry - SWI handler

SWIEntry
	ldr	r12,[r12]
	cmp	r11,#(EndOfJumpTable-JumpTable)/4
	addlo	pc,pc,r11,lsl #2
	b	ukswi

JumpTable
	b	DoSWICreate
	b	DoSWIDestroy
	b	DoSWIMoving
	b	DoSWIMoved
	b	DoSWIReadPointHandler
	b	DoSWIPoll
	b	DoSWIDump
EndOfJumpTable

ukswi
	stmfd	r13!,{lr}
	adr	r0,%FT10
	adr	r4,Title
	bl	ErrorLookup   ; sets V
	ldmfd	r13!,{pc}

10
	DCD	ErrorNumber_ModuleBadSWI
	DCB	"BadSWI",0
	ALIGN

; ******************************************************************************
;
; SWITable
;

SWITable
	= ClipSWI_Name,0
	= "Create",0
	= "Destroy",0
	= "Moving",0
	= "Moved",0
	= "ReadPointHandler",0
	= "Poll",0
	= "Dump",0
	= 0

	END
