
; s.GenSWIs - SWI handling code.

; This module provides the handling of all the clipping module's
; SWI's.

	GET	hdr.include
	GET	hdr.SWIparams
	GET	hdr.Region
	GET	hdr.RegionMan
	GET	hdr.MsgStuff
	GET	hdr.Filters
	GET	hdr.debuginc

	AREA	|SWI$$Code|,CODE,READONLY

; ********************************************************************
;
; DoSWICreate
;
; Handles the Clip_Create SWI.  The SWI is entered with:
;
; r0 = flags word
; r1 = pointer to parameter block
;
; The module should work out the required sizes of everything.
;
; The control structures get allocated in RMA space, the clipping
; region is placed in a dynamic area.  The clipping region handle
; that gets returned is actually the

DnToken
	= "DAName",0
	ALIGN

	EXPORT	DoSWICreate


DoSWICreate	ROUT
	stmfd	r13!,{r0-r12,lr}

;	first allocate the RMA workspace for the clipping region
;	initialise all values to 0 so that if we get problems down
;	the line, a single tidy-up routine can clear up!

	mov	r0,#ModHandReason_Claim
	mov	r3,#Region_RMASize		; amount of RMA used for a
						; region's workspace

	swi	XOS_Module			; (r0,r3->r2)
	strvs	r0,[sp]

	bvs	%FT98				; argh there's none!

; 	we keep r11 pointing at the allocated space

; 	now zero the area

	mov	r4,#0
	mov	r11,r2

05
	str	r4,[r2],#4
	subs	r3,r3,#4
	bgt	%BT05

; 	now we have zeroed everything in the area.  we can
; 	start copying things in.  we keep a copy of the parameter
; 	block cos its values are useful

	ASSERT	Create_Size=36			; needs to be 36 bytes!

	mov	r5,#Region_State_Init
	str	r5,[r11,#Region_State]
 [ DebugF
 	DREG	r5,"init state "
 ]

	add	r5,r11,#Region_SWIParams		; point to place for SWI params copy
	ldmia	r1,{r2,r3,r4,r6,r7,r8,r9,r10,r14}
	stmia	r5,{r2,r3,r4,r6,r7,r8,r9,r10,r14}

;	get the screen parameters for the current mode.  only need Xeig and Yeig
;	factors I reckon

	add	r1,r11,#Region_VduVars		; vdu variables struct

	ASSERT	Region_NumVduVars=2

;	use some stack to build the structure

	sub	sp,sp,#(Region_NumVduVars*4)+4

	ASSERT	Region_XEigFactor=Region_VduVars
	ASSERT	Region_YEigFactor=Region_XEigFactor+4

	mov	r0,sp
	mov	r2,#VduExt_XEigFactor
	mov	r3,#VduExt_YEigFactor
	mvn	r4,#0				;-1 marks end of list

	stmia	r0,{r2,r3,r4}

	swi	XOS_ReadVduVariables		; (r0,r1->r0)

	add	sp,sp,#(Region_NumVduVars*4)+4

	bvs	%ft95				; bomb out with error

;	get the window information

	bl	GetWindowInfo
	bvs	%ft95

;	work out the size of the movie

	ldmia	r1,{r2,r3}			; get XEig and YEig values
	add	r1,r11,#Region_SWIParams+Create_XMin
	ldmia	r1,{r4,r5,r6,r7}		; and the work area coords
	sub	r4,r6,r4			; sizes in OS units
	sub	r5,r7,r5
	mov	r4,r4,lsr r2			; in pixels
	mov	r5,r5,lsr r3
	add	r1,r11,#Region_XSize
	stmia	r1,{r4,r5}

;	work out bytes per scan line (4 byte header, 4 bytes per span)

	ldr	r1,[r11,#Region_SWIParams+Create_Spans]
	cmp	r1,#2
	bge	%ft10

;	here we have the problem
        adrl    r0,ErrorBlock_TooFewSpans
	bl	ErrorLookup
	b	%ft95

10
	mov	r4,#4
	mov	r4,r4,lsl r1			; amout for spans
	add	r4,r4,#4			; and header
	str	r4,[r11,#Region_LineSize]	; bytes per span

	mul	r4,r5,r4			; bytes per region
	str	r4,[r11,#Region_AreaSize]	; size of dynamic area wanted

;	now can claim dynamic area

	mov	r2,r4				; initial size

	adr	r0,DnToken			; token for dynamic area name
	bl	MessageLookup			; (r0->r0,r10)
	movvs	sp,r10				; take stack back if error
	bvs	%FT95				; error

	bl	AllocRegion			; allocate!

	mov	sp,r10				; fix up the stack again

	bvs	%FT95				; could not allocate area!

;	store the dynamic area number and addr

	str	r1,[r11,#Region_AreaNumber]
	str	r3,[r11,#Region_AreaAddr]

;	install a post wimp_poll filter, if required

	bl	InstallFilters

	ldr	r0,[r11,#Region_SWIParams+Create_Flags]
	tsts	r0,#Create_Flags_Align
	beq	%ft20

	adr	r0,PostName
        adrl    r1,PostFilter
	mov	r2,r12
	ldr	r3,[r11,#Region_SWIParams+Create_TaskHandle]
	mvn	r4,#1:SHL:Open_Window_Request
	swi	XFilter_RegisterPostFilter

	bvs	%ft90

;	have to mark it down as installed so that removing it
;	ain't a problem

	ldr	r0,[r11,#Region_State]
	orr	r0,r0,#Region_State_PostFilter
	str	r0,[r11,#Region_State]

20
;	now initialise the region

	bl	ZeroRegion			; (r11)

	bl	LinkRegion			; (r11)

	str	r11,[sp]
	ldr	r1,[r11,#Region_AreaAddr]
	str	r1,[sp,#4]

	b	%FT99				; exit without error

90
;	here if error when registering filter
        mov	r10,r0


	bl	FreeRegion

	mov	r0,r10

95
; 	here if exiting with error - tidy-up needs doing.
	str	r0,[sp]

;	free the RMA block

	mov	r0,#ModHandReason_Free
	mov	r2,r11
	swi	XOS_Module			; (r0,r2)

98
	ldmfd	r13!,{r0-r12,lr}
	orrs	pc,lr,#V_bit

99
; 	here if exiting normally
	ldmfd	r13!,{r0-r12,lr}
	bics	pc,lr,#V_bit


	EXPORT	PostName
PostName
	DCB	"Clip",0
	ALIGN


; ********************************************************************
;
; DoSWIDestroy

; On entry,

; r0=flags, r1=clipping region handle

	EXPORT	DoSWIDestroy

DoSWIDestroy	ROUT
	stmfd	r13!,{r0-r9,r14}		; stack
	mov	r11,r1				; standard usage of r11

;	free the region's dynamic area

	bl	FreeRegion

	bl	UnlinkRegion			; (r11)

	ldr	r0,[r11,#Region_State]
	tsts	r0,#Region_State_PostFilter
	beq	%ft80

;	if we have filters installed then remove
	adr	r0,PostName
        adrl    r1,PostFilter
	mov	r2,r12
	ldr	r3,[r11,#Region_SWIParams+Create_TaskHandle]
	mvn	r4,#1:SHL:Open_Window_Request
	swi	XFilter_DeRegisterPostFilter

80
	mov	r0,#ModHandReason_Free		; free it
	mov	r2,r11
	swi	XOS_Module			; (r0,r2)

	ldr	r11,ClipHead
	cmp	r11,#0
	bleq	RemoveFilters

	ldmfd	r13!,{r0-r9,r14}		; destack
	bics	pc,r14,#V_bit			; exit

; ********************************************************************
;
; DoSWIMoving

; The Clip_Moving SWI is used to allow the window to be moved.

; entry: R0 = flags - currently should always 0 and it gets ignored
;        R1 = pointer to the region

	EXPORT	DoSWIMoving

DoSWIMoving	ROUT
	stmfd	sp!,{r0-r11,lr}

	mov	r11,r1				; move the pointer to r11

	ldr	r1,[r11,#Region_State]		; set up the state

	orr	r1,r1,#Region_State_Moving

	str	r1,[r11,#Region_State]

	bl	ZeroRegion			; mark it all as covered

	ldmfd	sp!,{r0-r11,lr}
	bics	pc,lr,#V_bit

; ********************************************************************
;
; DoSWIMoved

	EXPORT	DoSWIMoved

DoSWIMoved	ROUT
	stmfd	sp!,{r0-r11,lr}

	mov	r11,r1

	ldr	r1,[r11,#Region_State]
	bic	r1,r1,#Region_State_Moving
	str	r1,[r11,#Region_State]

	bl	GetWindowInfo		; (r11)

	bl	ForceUpdate		; (r11)

	ldmfd	sp!,{r0-r11,lr}
	bics	pc,lr,#V_bit

; ********************************************************************
;
; DoSWIReadPointHandler

; this SWI returns the address of the routine which is called to
; determine if the given screen coordinate is over the clipping
; region, and if it is visible or not.

; simply return the address of the handler in r0

	EXPORT	DoSWIReadPointHandler

DoSWIReadPointHandler
        adr     r0,PointHandler
	bics	pc,r14,#V_bit


; ********************************************************************
;
; DoSWIPoll
;
; r0 - flags/reason code - currently all 0
; r1 - clipping region handle

; this SWI is

	EXPORT	DoSWIPoll

DoSWIPoll ROUT
	stmfd	r13!,{r0,r1,r11,r12,lr}
	mov	r11,r1
	ldr	r1,[r11,#Region_State]		; get the region's status
	tsts	r0,#Poll_Flags_ModeOk
	bicne	r1,r1,#Region_State_ModeChange
	orrne	r1,r1,#Region_State_Moving
	movne	r0,#1
	strne	r0,WindowsMoving
	strne	r1,[r11,#Region_State]
 [ DebugF
        DREG    r1, "New state "
 ]
	ldmfd	r13!,{r0,r1,r11,r12,lr}
	bics	pc,lr,#V_bit

; ********************************************************************

; DoSWIDump

; ****** this is for debugging

	EXPORT	DoSWIDump

DoSWIDump	ROUT
	stmfd	r13!,{r0-r4,r10,lr}
	sub	sp,sp,#20
; 	in the first instance, lets just walk the list getting all the
; 	clip region points and printing them out

	ldr	r11,ClipHead

10
	cmp	r11,#0
	beq	%FT20

	mov	r0,r11
	mov	r1,sp
	mov	r2,#20
	swi	XOS_ConvertHex8
	bvs	%ft99
	adr	r0,LTok
	mov	r4,sp
	bl	MessageLookup
	bvs	%ft99
	mov	r0,sp
	swi	XOS_Write0
	mov	sp,r10
	bvs	%ft99
	swi	XOS_NewLine
	bvs	%ft99
	ldr	r11,[r11,#Region_Next]
	b	%bt10

20
	add	sp,sp,#20
	ldmfd	r13!,{r0-r4,r10,lr}
	bics	pc,r14,#V_bit

99
	add	sp,sp,#20
	ldmfd	r13!,{r0-r4,r10,lr}
	orrs	pc,r14,#V_bit

LTok
	DCB "LNK",0

; ********************************************************************

; entry:

; r0 - name
; r2 - size

; exit:

; r1 - area number (-1 for in RMA)
; r3 - address

AllocRegion	ROUT
	stmfd	r13!,{r2,r4-r8,lr}

; first, try to allocate as a dynamic area

	mov	r8,r0				; string to use for dynamic area name
	mov	r0,#0				; reason code
	mvn	r1,#0				; not a specific number
	mvn	r3,#0				; not a specific base
	mov	r4,#&81				; area cannot be written in user mode and cannot be dragged
	mov	r5,r2				; max size
	mov	r6,#0				; no handler routine
	mov	r7,#0				; no handler routine - so no workspace either

	swi	XOS_DynamicArea			; allocate it

	ldmvcfd	r13!,{r2,r4-r8,lr}
	bicvcs	pc,lr,#V_bit

; failed to allocate in a dynamic area; try to get it from the RMA

	mov	r0,#6
	mov	r3,r2
	swi	XOS_Module

	bvs	%ft10

	mov	r3,r2
	mvn	r1,#0		; area number is now -1

	ldmfd	r13!,{r2,r4-r8,lr}
	bics	pc,lr,#V_bit

10
	ldmfd	r13!,{r2,r4-r8,pc}

; ********************************************************************

; Frees the region block.

FreeRegion ROUT
	stmfd	r13!,{r1-r2,lr}

	ldr	r1,[r11,#Region_AreaNumber]	; get the dynamic area number
	cmn	r1,#1
	beq	%ft10				; not a dynamic area...
	mov	r0,#1

	swi	XOS_DynamicArea			; (r0,r1)

	ldmfd	r13!,{r1-r2,pc}

10
	mov	r0,#7
	ldr	r2,[r11,#Region_AreaAddr]
	swi	XOS_Module
	ldmfd	r13!,{r1-r2,pc}

	ALIGN
	END
