
; region maintenance code

	AREA	|Region$$Code|,CODE,READONLY

	GET	Hdr.include
	GET	Hdr.SWIParams
	GET	Hdr.Region
	GET	Hdr.debuginc

; ******************************************************************
;
; ZeroRegion
;
; In: R11=pointer to clipping region to zero.
;
; Will zero all the region entries.

	EXPORT	ZeroRegion

ZeroRegion	ROUT

	stmfd	r13!,{r0-r5,r14}

	ldr	r0,[r11,#Region_AreaAddr]		; r0 points at scan table
	ldr	r1,[r11,#Region_YSize]			; r1 is size
	ldr	r2,[r11,#Region_LineSize]		; bytes per line
	ldr	r3,[r11,#Region_SWIParams+Create_Scale]
	mov	r4,#1
	mov	r4,r4,lsl r3				; r4=value to add to thing
	mov	r3,#0					; modulo value
	mov	r5,#1<<31				; value for 'special' lines
        mov	r14,#0					; value to write into other lines

10
	cmp	r3,#0					; is the modulo 0?
	streq	r5,[r0],r2				; zero one line with 'same' flag set
	strne	r14,[r0],r2				; zero one line
	subs	r3,r3,#1				; wrap the modulo?
	addmi	r3,r3,r4				; if yes then add r4
	subs	r1,r1,#1
	bgt	%BT10

	ldmfd	r13!,{r0-r5,r14}
	bics	pc,r14,#V_bit


; ******************************************************************
;
; LinkRegion
;
; Links a clipping region into the chain.  R11 points to the region
; on entry.

	EXPORT	LinkRegion

LinkRegion	ROUT

	stmfd	r13!,{r0-r1,r14}
	ldr	r0,ClipHead				; get current head
	str	r11,ClipHead				; replace it with new head
	mov	r1,#0					; set prev from this one to 0
	str	r0,[r11,#Region_Next]			; set the next ptr to the next one
	cmp	r0,#0					; is there a next?
	strne	r11,[r0,#Region_Prev]			; if so then point its prev at us
	str	r1,[r11,#Region_Prev]			; point our prev at 0
	ldmfd	r13!,{r0-r1,r14}			; destack
	bics	pc,r14,#V_bit				; return

; ******************************************************************
;
; UnlinkRegion
;
; Removes the region pointed to by R11 from the chain of regions!

	EXPORT	UnlinkRegion

UnlinkRegion
	stmfd	r13!,{r0-r4}

	ldr	r0,[r11,#Region_Next]
	ldr	r1,[r11,#Region_Prev]

	cmp	r0,#0
	strne	r1,[r0,#Region_Prev]			; point next at prev

	cmp	r1,#0
	streq	r0,ClipHead
	strne	r0,[r1,#Region_Next]

	ldmfd	r13!,{r0-r4}
	bics	pc,r14,#V_bit

; ******************************************************************
;
; ForceUpdate

; cause the region to get redrawn

	EXPORT	ForceUpdate

ForceUpdate	ROUT
	stmfd	r13!,{r0-r6,lr}

	ldr	r2,[r11,#Region_SWIParams+Create_WindowHandle]
	add	r1,r11,#Region_SWIParams+Create_XMin
	ldmia	r1,{r3,r4,r5,r6}

	sub	sp,sp,#20
	mov	r1,sp
	stmia	r1,{r2,r3,r4,r5,r6}

	swi	XWimp_UpdateWindow
	bvs	%ft99

	cmp	r0,#0
	beq	%ft99
10
	swi	XWimp_GetRectangle
	bvs	%ft99

	cmp	r0,#0
	bne	%bt10

99
	add	sp,sp,#20
	ldmfd	r13!,{r0-r6,lr}
	bics	pc,lr,#V_bit

; ******************************************************************
;
; ForceUpdate

; cause the region to get redrawn when we don't have full control

	EXPORT	ForceUpdateNotOwner

ForceUpdateNotOwner	ROUT
	stmfd	r13!,{r0-r6,lr}

	ldr	r0,[r11,#Region_SWIParams+Create_WindowHandle]
	add	r1,r11,#Region_SWIParams+Create_XMin
	ldmia	r1,{r1,r2,r3,r4}
 [ DebugF
        DLINE   "doing force redraw"
 ]
	swi	XWimp_ForceRedraw
	ldmfd	r13!,{r0-r6,lr}
	bics	pc,lr,#V_bit

; ******************************************************************
;
; determine if the window has moved; r11 is clip region ptr

	EXPORT	CheckForMovement
CheckForMovement	ROUT
	stmfd	r13!,{r0-r10,lr}
	
	sub	sp,sp,#u_windowstate
	mov	r1,sp
	ldr	r0,[r11,#Region_SWIParams+Create_WindowHandle]
	str	r0,[r1,#u_handle]
	swi	XWimp_GetWindowState
	addvs	sp,sp,#u_windowstate
	ldmvsfd	r13!,{r0-r10,pc}^
	
	add	r0,sp,#u_wax0
	ldmia	r0,{r0,r1,r2,r3,r4,r5}
	add	r6,r11,#Region_WindowState+u_wax0
	ldmia	r6,{r6,r7,r8,r9,r10,lr}
	
	add	sp,sp,#u_windowstate
	
	cmp	r0,r6
	cmpeq	r1,r7
	cmpeq	r2,r8
	cmpeq	r3,r9
	cmpeq	r4,r10
	cmpeq	r5,lr
	
	ldmeqfd	r13!,{r0-r10,pc}^
	
	ldr	r0,[r11,#Region_State]
	orr	r0,r0,#Region_State_Moving
	str	r0,[r11,#Region_State]
	mov	r0,#1
	str	r11,WindowsMoving
	
	bl	ZeroRegion
	
	ldmfd	r13!,{r0-r10,pc}^

; ******************************************************************
;
; GetWindowInfo
;
; Gets the window information required by the clipping region and
; updates the fields in the region in accordance.

; entry: r11 points to clipping region

; exit: it fills in the window information, and the fields giving
; the screen bounding box for the clipping region
;
; it also generates the screen address fore the painter

	EXPORT	GetWindowInfo

GetWindowInfo ROUT
	stmfd	r13!,{r0-r10,r14}

	ldr	r0,[r11,#Region_SWIParams+Create_WindowHandle]
	add	r1,r11,#Region_WindowState

	str	r0,[r1,#u_handle]

	swi	XWimp_GetWindowState
	bvc	%ft10

	str	r0,[sp]
	ldmfd	r13!,{r0-r10,r14}
	orrs	pc,r14,#V_bit

10
;	generate the cached window info

	add	r1,r1,#u_wax0			; point at something different
	ldmia	r1,{r2,r3,r4,r5,r6,r7}		; get the values
	sub	r2,r2,r6			; sub the scroll offsets
	sub	r3,r5,r7

	add	r1,r11,#Region_SWIParams+Create_XMin

	ldmia	r1,{r6,r7,r8,r9}
	add	r4,r2,r8
	add	r5,r3,r9
	add	r2,r2,r6
	add	r3,r3,r7

	add	r1,r11,#Region_SXMin
	stmia	r1,{r2,r3,r4,r5}
	
	; r2, r5 give top, left of area - need to generate screen address of this
	
	mov	r7,r2
	mov	r8,r5
	
	mov	r0,#VduExt_XEigFactor
	mov	r1,#VduExt_YEigFactor
	mov	r2,#VduExt_LineLength
	mov	r3,#VduExt_YWindLimit
	mov	r4,#VduExt_ScreenStart
	mov	r5,#VduExt_Log2BPP
	mvn	r6,#0
	stmfd	r13!,{r0,r1,r2,r3,r4,r5,r6}
	mov	r0,sp
	mov	r1,sp
	swi	XOS_ReadVduVariables
	
	bvs	%ft80
	
XEigFactor	RN	0
YEigFactor	RN	1
LineLength	RN	2
YWindLimit	RN	3
ScreenStart	RN	4
Log2BPP		RN	5

xmin		RN	7
ymax		RN	8


; now we work out the screen position

	ldmia	r13,{r0,r1,r2,r3,r4,r5}
	
	mov	r9,xmin
	mov	r9, r9, asr XEigFactor
	mov	r9, r9, lsl Log2BPP
	
	add	r9,r9,#16
	
	and	r9, r9, #31
	sub	r9, r9, #16

	mov	r9, r9, asr Log2BPP
	mov	r9, r9, lsl XEigFactor

 [ DebugF	
	DREG	r9,"r9 ="
 ]
	
	ldr	xmin,[r11,#Region_SXMin]
	sub	xmin,xmin,r9
	str	xmin,[r11,#Region_SXMin]
	ldr	r10,[r11,#Region_SXMax]
	sub	r10,r10,r9
	str	r10,[r11,#Region_SXMax]
	
	mov	xmin,xmin,asr XEigFactor
	mov	ymax,ymax,asr YEigFactor
	
	sub	ymax,YWindLimit,ymax
	add	ymax,ymax,#1
	
	mla	ymax,LineLength,ymax,ScreenStart
	mov	xmin,xmin,lsl Log2BPP
	add	ymax,ymax,xmin,asr #3
	
	str	ymax,[r11,#Region_PaintAddr]

80
	add	sp,sp,#7*4

	ldmfd	r13!,{r0-r10,r14}
	bics	pc,r14,#V_bit

; register use in AddRectangle and RemoveRectangle


ls	RN	1	; size of a line
lp	RN	2	; pointer to current line
rxs	RN	3	; width of region
wk1	RN	4	; work 1
wk2	RN	5	; work 2
sx	RN	6	; start x
endline	RN	7	; last line
lx	RN	8	; length x
line	RN	9	; current line

; register use in AddRectangleGen and RemoveRectangleGen - some common with
; AddRectangle and RemoveRectangle

si	RN	0	; input } start
ns	RN	4	; number of input spans
oc	RN	5	; counting output spans
cs	RN	7	; current span
spanw	RN	9	; width of a span
li	RN	10	; span  } length


; ******************************************************************
;
; AddRectangleGen
;
; This routine provides the generate case code for AddRectangle, ie
; it should work with any number of spans.  As the general case code
; needs more registers than the normal code, it is a separate function
; so it can stack.

; entry:

; sx and lx are valid

; lp is valid
; ls is valid
; wk1 contains the number of spans in the input

; on exit, wk1, wk2, r0, lr and r10 may be corrupted.

; This routine operates by builing a new scan line structure on the
; stack, then copying the new structure over the old one.  If there
; is no change to the scan line, then the function doesn't bother
; with the copy back of the data.

; When generating the output, the principle used is to hold the output
; to be generated in the registers sx, lx until it is to be written out

; thus there are three stages: input is before new span, input overlaps
; new span, and input beyond new span.

; we build the output on the stack, using oc as an index.

AddRectangleGen	ROUT
	stmfd	r13!,{r0-r10,lr}

	ldr	spanw,[r11,#Region_SWIParams+Create_Spans]
	mov	lr,#1
	mov	spanw,lr,lsl spanw
	sub	sp,sp,ls

; ==================================================================
;
;	stage 1 - input before the new span (ie no overlap)

	mov	oc,#0

	add	lp,lp,#4		; bump ptr to miss number

	ldr	cs,[lp],#4		; get span

	mov	li,cs,lsr #16		; extract length and stuff
	bic	si,cs,li,lsl #16	;
	sub	ns,ns,#1

10
;	now check current span to see if it is less than the span we
;	are playing with

	add	lr,si,li		; end of span
	cmp	lr,sx			; is it totally before the current?
	bge	%ft30			; no, so we have to go get some more

;	its completely before, so output it

	str	cs,[sp,oc,lsl #2]       ; put it on the stack
	add	oc,oc,#1		; number of output
	cmp	oc,spanw		; check for end
	beq	%ft99			; write it all back

;	now we get the next span, unless there are none

	cmp	ns,#0			; none left
	beq	%ft20			; so just write out the current and finish

	ldr	cs,[lp],#4		; get span

	mov	li,cs,lsr #16		; extract length and stuff
	bic	si,cs,li,lsl #16	;
	sub	ns,ns,#1

	b	%bt10			; back round the loop

20
;	here there's discovered to be no overlap, and no spans
;	left so we simply add the new span then run away

	orr	cs,sx,lx,lsl #16	; make the span
	str	cs,[lp],#4		; store it
	add	oc,oc,#1		; add 1 to output count
	add	lp,sp,ls
	ldr	lp,[lp,#2*4]
	orr	oc,oc,#1<<31
	str	oc,[lp]			; then store it

	b	%ft99			; simple exit

; ==================================================================
;
;	stage 2 - input might overlap, or might come after

30
	add	lr,sx,lx
	cmp	si,lr
	bgt	%ft50			; its beyond, so skip (have to write new span)
	cmp	si,sx
	movlt	sx,si
	sublt	lx,lr,sx		; new sx,lx
	add	cs,si,li		; span

	cmp	cs,lr			;
	subgt	lx,cs,sx		; new length

	cmp	ns,#0			; none left
	beq	%ft40			; so just write out the current and finish

	ldr	cs,[lp],#4		; get span

	mov	li,cs,lsr #16		; extract length and stuff
	bic	si,cs,li,lsl #16	;
	sub	ns,ns,#1

	b	%bt30			; back round the loop

40

; here we place our altered line on the thing at the end

	orr	cs,sx,lx,lsl #16	; new entry
	add	lp,sp,ls
	ldr	lp,[lp,#2*4]
	add	lp,lp,#4
	str	cs,[lp,oc,lsl #2]
	add	oc,oc,#1+(1<<31)
	str	oc,[lp,#-4]

	b	%ft99

; ==================================================================
;
;	stage 3 - input after new span

50
	orr	cs,sx,lx,lsl #16		; copy any new data to the output
	str	cs,[sp,oc,lsl #2]
	add	oc,oc,#1
	cmp	oc,spanw
	beq	%ft70

	orr	cs,si,li,lsl #16		; then the next span
	str	cs,[sp,oc,lsl #2]
	add	oc,oc,#1
	cmp	oc,spanw
	beq	%ft70

	cmp	ns,#0
	beq	%ft70

;	then any further spans

60
	ldr	cs,[lp],#4
	sub	ns,ns,#1
	str	cs,[sp,oc,lsl #2]
        add	oc,oc,#1
	cmp	ns,#0
	beq	%ft70
	cmp	oc,spanw
	blt	%bt60

70
	add	lp,sp,ls
	ldr	lp,[lp,#2*4]
	add	lp,lp,#4
	mov	ns,#0

80
	ldr	cs,[sp,ns,lsl #2]
	str	cs,[lp,ns,lsl #2]
	add	ns,ns,#1
	cmp	ns,oc
	blt	%bt80

	orr	oc,oc,#1<<31
	str	oc,[lp,#-4]

99
;	more tidy up code

	add	sp,sp,ls
	ldmfd	r13!,{r0-r10,lr}
	bics	pc,lr,#V_bit

; ******************************************************************
;
; RemoveRectangleGen
;
; This function, like AddRectangleGen, provides the more generalised
; version of the RemoveRectangle function.

; this code tries to do things in a more

RemoveRectangleGen	ROUT
	stmfd	r13!,{r0-r10,lr}

	ldr	spanw,[r11,#Region_SWIParams+Create_Spans]
	mov	lr,#1
	mov	spanw,lr,lsl spanw	; number of spans per line
	sub	sp,sp,ls
	add	cs,sx,lx		; end of the removal span

	mov	oc,#0

	add	lp,lp,#4		; bump ptr to miss number

	ldr	si,[lp],#4		; get span

	mov	li,si,lsr #16		; extract length and stuff
	bic	si,si,li,lsl #16	;
	sub	ns,ns,#1

10
	add	lr,si,li		; end of the span from the scan line
	cmp	lr,sx			; make a complete miss case simple to deal with
	ble	%ft30			; nothing to do
	cmp	cs,si			; miss check again
	ble	%ft30			; miss

;	now we know we have a hit

	cmp	sx,si			; is it before (either pretruncate or complete removal)
	ble	%ft20

; split or post-truncate

	cmp	lr,cs			; decide between split or post-trunc.

	bgt	%ft15			; post-truncate

	sub	li,sx,si
	orr	li,si,li,lsl #16	; reconstruct the span
	str	li,[sp,oc,lsl #2]
	add	oc,oc,#1
	cmp	oc,spanw

	beq	%ft70			; write it all out
	b	%ft50			; do the next span


15
	; split

	sub	li,sx,si
	orr	li,si,li,lsl #16	; reconstruct the span
	str	li,[sp,oc,lsl #2]
	add	oc,oc,#1
	cmp	oc,spanw

	beq	%ft70			; write it all out

	sub	li,lr,cs
	orr	li,cs,li,lsl #16
	str	li,[sp,oc,lsl #2]
	add	oc,oc,#1
	cmp	oc,spanw
	beq	%ft70
	b	%ft50

; pretruncate or complete removal
20
	cmp	lr,cs
	ble	%ft50			; its a removal
; no, it's a pretruncate
	sub	li,lr,cs		; length of new span
	mov	si,cs

; fall through to code to output the span

30
	orr	li,si,li,lsl #16	; reconstruct the span
	str	li,[sp,oc,lsl #2]
	add	oc,oc,#1
	cmp	oc,spanw

	beq	%ft70			; write it all out
	b	%ft50			; do the next span


;	here we deal with the next span
50
	cmp	ns,#0
	beq	%ft70			; if none left then leave

	ldr	si,[lp],#4		; get span

	mov	li,si,lsr #16		; extract length and stuff
	bic	si,si,li,lsl #16	;
	sub	ns,ns,#1
	b	%bt10

70
	cmp	oc,#0
	add	lp,sp,ls
	ldr	lp,[lp,#2*4]
	add	lp,lp,#4
	beq	%ft80
	mov	ns,#0

75
	ldr	li,[sp,ns,lsl #2]
	str	li,[lp,ns,lsl #2]
	add	ns,ns,#1
	cmp	ns,oc
	blt	%bt75

80
	orr	oc,oc,#1<<31
	str	oc,[lp,#-4]

99
	add	sp,sp,ls

	ldmfd	r13!,{r0-r10,lr}
	bics	pc,lr,#V_bit

; ******************************************************************
;
; AddRectangle
;
; Entry:
;
; r6-r9 = O.S units within clipping region (xmin,ymin,xmax,ymax)
;
; r11 points to region
;
; corrupts r0-r10

	EXPORT	AddRectangle

AddRectangle	ROUT
	stmfd	r13!,{line,endline,lr}

;	convert from OS units to pixels

	ldr	r0,[r11,#Region_XEigFactor]
	mov	r6,r6,lsr r0
	mov	r8,r8,lsr r0
	ldr	r0,[r11,#Region_YEigFactor]
	mov	r7,r7,lsr r0
	mov	r9,r9,lsr r0

;	first adjust coords into a different format

	sub	r8,r8,r6		; xmax becomes length of span

;	convert y coord so 0 at top

	ldr	r1,[r11,#Region_YSize]
	rsbs	r7,r7,r1
	movmi	r7,#0
	rsbs	r9,r9,r1
	movmi	r9,#0

;	calculate span address
	ldr	lp,[r11,#Region_AreaAddr]
	ldr	ls,[r11,#Region_LineSize]
	mla	lp,ls,line,lp

	ldr	rxs,[r11,#Region_XSize]

;	is it making the entire span visible?

	cmp	sx,#0
	bne	%ft10

	cmp	lx,rxs
	beq	%ft80

10
	cmp	line,endline
	bge	%ft99


20
	ldr	wk1,[lp]
	and	wk1,wk1,#255
	cmp	wk1,#1
	bgt	%ft40			; general case code
	beq	%ft25			; one span code

	orr	wk2,sx,lx,lsl #16
	str	wk2,[lp,#4]
	mov	wk1,#1+(1<<31)
	str	wk1,[lp],ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

25
	ldr	wk1,[lp,#4]		; get the span
	mov	wk2,wk1,lsr #16		; get the length
	bic	wk1,wk1,wk2,lsl #16
	cmp	sx,wk1
	bge	%ft30

;	new before old

	add	r0,sx,lx
	cmp	r0,wk1			; is it less?
	blt	%ft26

	add	lr,wk1,wk2
	cmp	lr,r0
	movle	wk2,lx
	subgt	wk2,lr,sx
	orr	wk1,sx,wk2,lsl #16
	str	wk1,[lp,#4]
	mov	wk1,#(1<<31)+1

	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

26
;	new one
	orr	wk2,wk1,wk2,lsl #16
	orr	wk1,sx,lx,lsl #16
	mov	r0,#2+(1<<31)
	stmia	lp,{r0,wk1,wk2}
	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

;	new one >=old
30
;	check for overlap
	add	lr,wk1,wk2
	cmp	sx,lr
	bgt	%ft32			; no overlap

;	say yes to overlap!

	add	r0,lx,sx
	cmp	r0,lr
	blt	%ft31

	sub	wk2,r0,wk1
	orr	wk1,wk1,wk2,lsl #16
	mov	r0,#(1<<31)+1
	stmia	lp,{r0,wk1}
	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

31
	mov	r0,#(1<<31)+1
	str	r0,[lp],ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

32
;	no overlap
	orr	wk1,wk1,wk2,lsl #16
	mov	r0,#2+(1<<31)
	orr	wk2,sx,lx,lsl #16
	stmia	lp,{r0,wk1,wk2}
	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

39
	add	line,line,#1
	cmp	line,endline
	blt	%bt20

	b	%ft99


40
; general case
	bl	AddRectangleGen

	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

; its the entire width of the span, make it visible

80
	cmp	line,endline
	bge	%ft99
	mov	wk1,#1
	orr	wk2,sx,lx,lsl #16

90
	str	wk2,[lp,#4]
	orr	wk1,wk1,#1<<31
	str	wk1,[lp],ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt90

99
	ldmfd	r13!,{line,endline,lr}
	bics	pc,r14,#V_bit


; ******************************************************************
;
; RemoveRectangle
;
; This routine removes the given rectangle (coord system as for the
; AddRectangle function.

	EXPORT	RemoveRectangle

RemoveRectangle	ROUT
	stmfd	r13!,{line,endline,r14}
;	convert from OS units to pixels

	ldr	r0,[r11,#Region_XEigFactor]
	mov	r6,r6,lsr r0
	mov	r8,r8,lsr r0
	ldr	r0,[r11,#Region_YEigFactor]
	mov	r7,r7,lsr r0
	mov	r9,r9,lsr r0


;	first adjust coords into a different format

	sub	r8,r8,r6		; xmax becomes length of span

;	convert y coord so 0 at top

	ldr	r1,[r11,#Region_YSize]
	rsbs	r7,r7,r1
	movmi	r7,#0
	rsbs	r9,r9,r1
	movmi	r9,#0

;	calculate span address
	ldr	lp,[r11,#Region_AreaAddr]
	ldr	ls,[r11,#Region_LineSize]
	mla	lp,ls,line,lp

	ldr	rxs,[r11,#Region_XSize]

	cmp	sx,#0
	bne	%ft10

	cmp	lx,rxs
	beq	%ft80

10
	cmp	line,endline
	bge	%ft99

20
	ldr	wk1,[lp]
	and	wk1,wk1,#255
	cmp	wk1,#1
	bgt	%ft50
	beq	%ft25

;	here there's nothing there anyway
	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20

	b	%ft99

25
;	here have one thingy, so its a simple case

	ldr	wk1,[lp,#4]		; get the span

	mov	wk2,wk1,lsr #16		; get the length of the span
	bic	wk1,wk1,wk2,lsl #16	; and the start of it

	cmp	sx,wk1			; is it before or after
	beq	%ft30			; the same
	blt	%ft35			; before

;	after

;	then could be middle (split), beyond (no action) or truncate

;	check for beyond first

	add	lr,wk1,wk2		; end of current line
	cmp	sx,lr

	blt	%ft26			; we are doing either a split or a truncate

; 	beyond - no change

	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

26	; split or truncate
	add	r0,sx,lx		; get end of remove thing
	cmp	r0,lr			; check for split or truncate
	blt	%ft27			; split

;	truncate

	sub	wk2,sx,wk1		; length of truncated span
	orr	wk1,wk1,wk2,lsl #16	; new value
	mov	r0,#(1<<31)+1
	stmia	lp,{r0,wk1}
	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20

	b	%ft99

27	; split
	sub	wk2,sx,wk1		; length of first span
	orr	wk1,wk1,wk2,lsl #16	; first span
	str	wk1,[lp,#4]
	sub	lr,lr,r0		; length of second span
	orr	lr,r0,lr,lsl #16	; second span
	str	lr,[lp,#8]
	mov	r0,#2+(1<<31)
	str	r0,[lp],ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

30	; the same or before - pretruncate
35	; before

	add	r0,sx,lx		; end of removal
	cmp	r0,wk1			; compare with start of region
	ble	%ft37			; nothing doingwibble

;	complete removal?

	add	lr,wk1,wk2		; end of span
	cmp	r0,lr
	bge	%ft36			; complete removal

;	pretruncation

	sub	wk2,lr,r0
	orr	wk1,r0,wk2,lsl #16
	mov	r0,#(1<<31)+1
	str	wk1,[lp,#4]
	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

36
;	complete removal
	mov	r0,#(1<<31)
	str	r0,[lp],ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

37
	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20

	b	%ft99

50
;	this is the general case
	bl	RemoveRectangleGen
	add	lp,lp,ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt20
	b	%ft99

80
	cmp	line,endline
	bge	%ft99
	mov	wk1,#(1<<31)

85
	str	wk1,[lp],ls
	add	line,line,#1
	cmp	line,endline
	blt	%bt85

99

	ldmfd	r13!,{line,endline,lr}
	bics	pc,lr,#V_bit

scale	RN	0
sls	RN	8
lp2	RN	6
count	RN	3
sv	RN	5
sv2	RN	10

; ******************************************************************
;
; ScanCompare
;
; This routine is called to alter the equality flag for all the given
; spans.  it

	EXPORT	ScanCompare

ScanCompare	ROUT
	stmfd	sp!,{r0-r11,lr}


;	convert coords

;	convert from OS units to pixels

	ldr	scale,[r11,#Region_YEigFactor]
	mov	line,line,lsr scale
	mov	endline,endline,lsr scale

	ldr	scale,[r11,#Region_YSize]

	rsbs	line,line,scale
	movmi	line,#0

	rsb	endline,endline,scale
	subs	endline,endline,#1
	movmi	endline,#0


	cmp	endline,scale
	subge	endline,scale, #1

;	adjust things due to the scale

	ldr	scale,[r11,#Region_SWIParams+Create_Scale]

	cmp	scale,#0
	beq	%ft99

	mov	line,line,lsr scale
	mov	endline,endline,lsr scale
	mov	line,line,lsl scale
	mov	endline,endline,lsl scale


;	so now we have things aligned to tuples

;	have to decide some things

; 	now caculate all the pointers

	ldr	ls,[r11,#Region_LineSize]	; size of a line
	ldr	lp,[r11,#Region_AreaAddr]	; area pointer

	mla	lp,ls,line,lp

	mov	sls,ls,lsl scale

	mov	lr,#1
	mov	scale,lr,lsl scale

;	start of per-line loop
10
	cmp	line,endline
	bgt	%ft99

;	for this group, work out the sameness - first check that the numbers of
;	spans are similar

;	get the number of spans from the first line
	ldr	ns,[lp]
	and	ns,ns,#255

	add	lp2,lp,ls
	sub	count,scale,#1

20
	ldr	lr,[lp2],ls
	and	lr,lr,#255
	cmp	lr,ns
	bne	%ft80
	subs	count,count,#1
	bgt	%bt20

;	here have found that it matches on number of spans

;	loop over all the spans
	add	lr,lp,#4

30
	cmp	ns,#0
	beq	%ft70

	add	lp2,lr,ls
	ldr	sv,[lp2,-ls]

	sub	count,scale,#1

40
	ldr	sv2,[lp2],ls
	cmp	sv2,sv
	bne	%ft80

	subs	count,count,#1
	bgt	%bt40

	add	lr,lr,#4
	sub	ns,ns,#1
	b	%bt30

;	here when we know it's the same
70
	ldr	ns,[lp]
	bic	ns,ns,#1<<31
	str	ns,[lp]
	b	%ft90

;	here when we know it's not same
80
	ldr	ns,[lp]
	orr	ns,ns,#1<<31
	str	ns,[lp]

;	now go onto next line
90
	add	lp,lp,sls
	add	line,line,scale
	b	%bt10

99
	ldmfd	sp!,{r0-r11,lr}
	bics	pc,lr,#V_bit


; ******************************************************************
;
; PointHandler

; this routine is called directly by a client, quoting:

; r0 - flags (currently all values should be 0)
; r1 - clipping region handle
; r2 - x coord (OS units)
; r3 - y coord (OS units)

; exit:

; r0: 0 - it doesn't overlap the clipping region
;     1 - it does

	EXPORT	PointHandler

PointHandler ROUT
	stmfd	sp!,{r1-r11,lr}

	mov	r11,r1			; clipping region handle

	add	r10,r11,#Region_WindowState+u_wax0

	ldmia	r10,{r4,r5,r6,r7}

	cmp	r2,r4
	blt	%ft90			; no match
	cmp	r2,r6
	bge	%ft90			; no match

	cmp	r3,r5
	blt	%ft90			; no match
	cmp	r3,r7
	bge	%ft90			; no match


; so now we know it's within the window - does it overlap the
; clipping region inside the window?

	add	r10,r11,#Region_SXMin

	ldmia	r10,{r4,r5,r6,r7}

	cmp	r2,r4
	blt	%ft90			; missed

	cmp	r2,r6
	bge	%ft90			; missed

	cmp	r3,r5
	blt	%ft90			; missed

	cmp	r3,r7
	bge	%ft99			; missed

	sub	r2,r2,r4		; offsets into region
	sub	r3,r3,r5

	ldr	r9,[r11,#Region_XEigFactor]
	mov	r2,r2,lsr r9
	ldr	r9,[r11,#Region_YEigFactor]
	mov	r3,r3,lsr r9

	ldr	r9,[r11,#Region_YSize]

	rsb	r3,r3,r9		; y coord now has 0 at the top

; now we have the coordinates in the correct format.  we point at
; the thing we want to scan, and scan it

	ldr	r4,[r11,#Region_AreaAddr]
	ldr	r5,[r11,#Region_LineSize]

	mla	r4,r3,r5,r4		; work out the pointer to the thing

	ldr	r5,[r4],#4		; get the number of spans

	and	r5,r5,#255

	cmp	r5,#0
	beq	%ft90			; no spans, so we miss

10
	ldr	r6,[r4],#4		; get one span
	mov	r7,r6,lsr #16		; length
	bic	r6,r6,r7,lsl #16

	cmp	r2,r6
	blt	%ft90

	add	r6,r6,r7
	cmp	r2,r6
	blt	%ft80

	subs	r5,r5,#1
	bgt	%bt10

	b	%ft90

80
	mov	r0,#1
	b	%ft99

90
	mov	r0,#0

99
	ldmfd	sp!,{r1-r11,lr}
	bics	pc,lr,#V_bit

	END
