
	AREA	|msgstuff$$code|,CODE,READONLY

	GET	hdr.include
	GET	hdr:MsgTrans

filename1
	=	"Clip:Messages",0

filename2
	=	"Resources:$.Resources.Clip.Messages",0
	ALIGN

; ***********************************************************
;
; OpenMessageFile
;
; this routine opens the message file

OpenMessageFile	ROUT
	stmfd	r13!,{r0-r2,lr}
	adr	r0,MsgBlock
	adr	r1,filename1
	mov	r2,#0
	swi	XMessageTrans_OpenFile
	movvc	r0,#1
	strvc	r0,MsgFileOpen
	ldmvcfd	r13!,{r0-r2,pc}

	adr	r0,MsgBlock
	adr	r1,filename2
	mov	r2,#0
	swi	XMessageTrans_OpenFile
	movvc	r0,#1
	strvc	r0,MsgFileOpen
	strvs	r0,[sp]
	ldmfd	r13!,{r0-r2,pc}

; ***********************************************************
;
; ErrorLookup
;
; in: R0=error block
; out: R0=translated error block
;
; it first looks in out own message file; if it can't find it
; there it looks in the global message file, making life a little
; easier in coding!

	EXPORT	ErrorLookup

ErrorLookup
	stmfd	r13!,{r1-r2,lr}
	ldr	r1,MsgFileOpen
	cmp	r1,#0
	bne	%FT10
	bl	OpenMessageFile
	ldmvsfd	r13!,{r1-r2,pc}

10
	adr	r1,MsgBlock
	mov	r2,#0

	SWI	XMessageTrans_ErrorLookup
	ldmfd	r13!,{r1-r2,pc}


; ***********************************************************
;
; MessageLookup
;
; in: R0=token
; out: R0=ptr to string, sp=ptr to string, r10=value to reset sp to
;
; it first looks in out own message file; if it can't find it
; there it looks in the global message file, making life a little
; easier in coding!

; it puts the value on the stack, so on exit, r10 points to the
; result, to get the stack space back, copy sp from r0

	EXPORT	MessageLookup

MessageLookup
	mov	r10,sp
	stmfd	r13!,{r1-r3,r9,lr}
	mov	r1,r0
	ldr	r2,MsgFileOpen
	cmp	r2,#0
	bne	%FT10
	bl	OpenMessageFile
	ldmvsfd	r13!,{r1-r3,r9,pc}

10
	adr	r0,MsgBlock
	mov	r3,#256
	sub	r13,r13,r3
	mov	r2,r13
	swi	XMessageTrans_Lookup

	movvs	r13,r10
	ldmvsdb	r10,{r1-r3,r9,pc}

	mov	r0,r2
	ldmdb	r10,{r1-r3,r9,pc}

; **********************************************************
;
; CloseMessageFile
;
; This is to make the module close its message file; it should
; be done before the module dies.  No entry parameters.
;

	EXPORT	CloseMessageFile

CloseMessageFile
	stmfd	r13!,{r0,lr}
	ldr	r0,MsgFileOpen
	cmp	r0,#0
	ldmeqfd	r13!,{r0,pc}^
	adr	r0,MsgBlock
	swi	XMessageTrans_CloseFile
	mov	r0,#0
	str	r0,MsgFileOpen
	ldmfd	r13!,{r0,pc}^

	END
