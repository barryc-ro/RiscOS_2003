
; this code module contains the stuff associated with filter
; handling

	AREA	|Filter$$Code|,CODE,READONLY

	GET	hdr.include	; misc important includes
	GET	hdr.msgstuff	; message handling
	GET	hdr.SWIparams	; that
	GET	hdr.region	; the other
	GET	hdr.regionman
	
 [ Debug
 	GET	hdr.debuginc
 ]

; ***************************************************************
;
; FilterVersion
;
; This function returns the version number of the filtermanager
; in R0.  R0=-1 if there isn't a FilterManager running.
;

FilterManName
	=	"FilterManager",0
	ALIGN

	EXPORT	GetFilterVersion

GetFilterVersion
	stmfd	r13!,{r1-r5,lr}

	; find the module

	mov	r0,#ModHandReason_LookupName
	adr	r1,FilterManName
	swi	XOS_Module
	mvnvs	r0,#0			; no such module - return -1
	ldmvsfd	r13!,{r1-r5,pc}^	; get out of there!

	; have found the module, extract its version number

	add	r5,r3,#Module_HelpStr
	ldr	r5,[r5]
	add	r5,r5,r3

	; now run thru the string looking for the '.'

	mov	r1,r5

NotDigit
	ldrb	r2,[r1],#1		; get one char
	cmp	r2,#0
	beq	BadNum
	cmp	r2,#'9'
	bgt	NotDigit
	cmp	r2,#'0'
	blt	NotDigit

; found a digit - followed by '.'?

	ldrb	r2,[r1]
	cmp	r2,#'.'
	bne	NotDigit	; no - keep looking

; here should be pointing at the '.', while we're here get the two values
; after the '.'.  if either is non-valid, then give up now

	ldrb	r2,[r1,#1]	; get the first
	subs	r2,r2,#'0'
	bmi	BadNum
	cmp	r2,#9
	bgt	BadNum

	add	r0,r2,r2,lsl #2
	mov	r0,r0,lsl #1

; then the second
	ldrb	r2,[r1,#2]
	subs	r2,r2,#'0'
	bmi	BadNum
	cmp	r2,#9
	bgt	BadNum
	add	r0,r0,r2

; so now we have 0-99 in r0, r1 points to '.'

	mov	r3,#100		; place multiplier in r3
BDLoop
	cmp	r1,r5
	ble	Finished
	ldrb	r2,[r1,#-1]!
	subs	r2,r2,#'0'
	bmi	Finished
	cmp	r2,#9
	bgt	Finished
	mla	r0,r2,r3,r0	; calculate next place
	add	r3,r3,r3,lsl #2
	mov	r3,r3,lsl #1
	b	BDLoop

Finished
	; r0 should now contain the version number

	ldmfd	r13!,{r1-r5,pc}^


BadNum
	mov	r0,#0
	ldmfd	r13!,{r1-r5,pc}^

; ***********************************************************************
;
; RectangleFilter
;
; This entry point handles the rectangle filter calls.  It is called by
; the rectangle filters handler.

; entry conditions for the filter:

; r0=window handle
; r2=task handle
; r6=xmin
; r7=ymin
; r8=xmax
; r9=ymax

; we have to do the full check for all the regions

RectangleFilter	ROUT
	stmfd	r13!,{r0-r11,r14}
	mov	r10,r0
; 	loop for all clipping regions, checking everything out

	ldr	r11,ClipHead		; get the clipping list
10
	cmp	r11,#0
	beq	%ft99			; none left
	
	bl	CheckForMovement	; check to see if the window has moved

	ldr	r1,[r11,#Region_State]

	tsts	r1,#Region_State_Moving+Region_State_ModeChange
	bne	%ft30

;	is the window handle the same
	ldr	r1,[r11,#Region_SWIParams+Create_WindowHandle]
	cmp	r1,r10
	bne	%ft20

 [ DebugF
        DLINE    "internal redraw event"
	DREG	r6, "xmin   "
	DREG	r7, "ymin   "
	DREG	r8, "xmax   "
	DREG	r9, "ymax   "
        ldr	r0,[r11,#Region_State]
        DREG	r0,"state "
 ]

;	internal redraw

;	clip to window visible area

	bl	GetWindowInfo		; ensure synced to window movement

	add	r0,r11,#Region_WindowState+u_wax0

	ldmia	r0,{r0,r1,r2,r3}

 [ DebugF
	DREG	r0, "w xmin "
	DREG	r1, "w ymin "
	DREG	r2, "w xmax "
	DREG	r3, "w ymax "
 ]
	cmp	r0,r8
	cmplt	r6,r2
	cmplt	r1,r9
	cmplt	r7,r3
	bge	%ft20			; it's actually external

	cmp	r6,r0
	movlt	r6,r0
	cmp	r8,r2
	movgt	r8,r2
	cmp	r7,r1
	movlt	r7,r1
	cmp	r9,r3
	movgt	r9,r3

	add	r0,r11,#Region_SXMin

	ldmia	r0,{r0,r1,r2,r3}	; get the screen coords of interest

	cmp	r0,r8			; SXmin>=redraw xmax
	cmplt	r6,r2			; SXMax<=redraw min
	cmplt	r1,r9			; SYMin>=redraw ymax
	cmplt	r7,r3			; SYMax<=redraw xmax
	bge	%ft30			; not of interest

;	clip to region boundary and convert to region internal coordinates

; 	(still OS units)

	subs	r6,r6,r0
	movmi	r6,#0
	subs	r7,r7,r1
	movmi	r7,#0
	cmp	r8,r2
	movgt	r8,r2
	sub	r8,r8,r0
	cmp	r9,r3
	movgt	r9,r3
	sub	r9,r9,r1

	bl	AddRectangle
	bl	ScanCompare

	b	%ft30

20
	add	r0,r11,#Region_WindowState+u_wax0

	ldmia	r0,{r0,r1,r2,r3}

;	cmp	r6,r0
;	movlt	r6,r0
;	cmp	r8,r2
;	movgt	r8,r2
;	cmp	r7,r1
;	movlt	r7,r1
;	cmp	r9,r3
;	movgt	r9,r3

	add	r0,r11,#Region_SXMin
	ldmia	r0,{r0,r1,r2,r3}	; get the screen coords of interest

	cmp	r0,r8			; SXmin>=redraw xmax
	cmplt	r6,r2			; SXMax<=redraw min
	cmplt	r1,r9			; SYMin>=redraw ymax
	cmplt	r7,r3			; SYMax<=redraw xmax

	bge	%ft30

	subs	r6,r6,r0
	movmi	r6,#0
	subs	r7,r7,r1
	movmi	r7,#0
	cmp	r8,r2
	movgt	r8,r2
	sub	r8,r8,r0
	cmp	r9,r3
	movgt	r9,r3
	sub	r9,r9,r1

	bl	RemoveRectangle
	bl	ScanCompare

30
	add	r0,sp,#6*4
	ldmia	r0,{r6,r7,r8,r9}
	ldr	r11,[r11,#Region_Next]	; get ptr to next region
	b	%bt10

99
	ldmfd	r13!,{r0-r11,r14}
	bics	pc,r14,#V_bit

; ***********************************************************************
;
; CopyFilter
;
; The Copy filters is only used for external events.
;
; r2-r5 contain the coords of interest (dest)
; r6-r9 contain the source coords
;
; r0    contains the window handle (nested wimp only)

Task	=	"TASK",0
	ALIGN

CopyFilter	ROUT
	stmfd	r13!,{r0-r11,r14}
 [ DebugF
 	DREG	r0, "copy filter - window handle = "
 ]
	mov	r9,r5
	mov	r8,r4
	mov	r7,r3
	mov	r6,r2

	mov	r10,r0			; keep window handle in r0

	ldr	r11,ClipHead		; get the clipping list
10
	cmp	r11,#0
	beq	%ft99			; none left

	ldr	r0,[r11,#Region_State]

	tsts	r0,#Region_State_Moving+Region_State_ModeChange
	bne	%ft30

; now determine if the window is ours - if it is, the action we take is to mark the
; region as moving and move on to the next region in the list
	ldr	r0,[r11,#Region_SWIParams+Create_WindowHandle]

12
	cmp	r0,r10
	beq	%ft15
	
; get parent window
	sub	sp,sp,#u_windowstate	; enough space for Wimp_GetWindowState
	str	r0,[sp,#0]
	mov	r1,sp
	ldr	r2,Task
	swi	XWimp_GetWindowState
	add	sp,sp,#u_windowstate
	bvs	%ft20                   ; error - ignore

	cmn	r3,#1
	beq	%ft20			; no parent
	
 [ DebugF	
	DREG	r3, "Parent is "
 ]
	
	mov	r0,r3
	b	%bt12

	; window handle matches
15
	ldr	r0,[r11,#Region_State]
	orr	r0,r0,#Region_State_Moving
	str	r0,[r11,#Region_State]
	
	mov	r0,#1
	str	r0,WindowsMoving	; flag that the PreFilter has work to do
	
	bl	ZeroRegion
	
	ldr	r11,[r11,#Region_Next]	; get ptr to next region
	b	%bt10

20
	add	r0,r11,#Region_SXMin

	ldmia	r0,{r0,r1,r2,r3}	; get the screen coords of interest

	cmp	r0,r8			; SXmin>=redraw xmax
	cmplt	r6,r2			; SXMax<=redraw min
	cmplt	r1,r9			; SYMin>=redraw ymax
	cmplt	r7,r3			; SYMax<=redraw xmax
	bge	%ft30			; not of interest

;	clip to region boundary and convert to region internal coordinates

; 	(still OS units)

	subs	r6,r6,r0
	movmi	r6,#0
	subs	r7,r7,r1
	movmi	r7,#0
	cmp	r8,r2
	movgt	r8,r2
	sub	r8,r8,r0
	cmp	r9,r3
	movgt	r9,r3
	sub	r9,r9,r1

	bl	RemoveRectangle
	bl	ScanCompare

	add	r0,sp,#2*4
	ldmia	r0,{r6,r7,r8,r9}

30
	ldr	r11,[r11,#Region_Next]	; get ptr to next region
	b	%bt10

99
	ldmfd	r13!,{r0-r11,pc}^


; ***********************************************************************
;
; PostFilter

; this is a post Wimp_Poll filter, used to alter the opening of the
; window so that the movie remains word aligned on the screen

; entry:

; r0   - event code
; r1   - pointer to event block
; r2   - task handle of task
; r12  - our private word pointer

	EXPORT	PostFilter
PostFilter ROUT

; 	if it's not of interest then don't bother

	cmp	r0,#Open_Window_Request
	movnes	pc,lr

;	now we can get some stack

	stmfd	r13!,{r0-r12,lr}

	mov	r10,r1

;	go through the clipping regions looking for one which
;	matches this window handle.

;	get the first region

	ldr	r11,ClipHead

;	get the window handle

	ldr	r3,[r10,#u_handle]

10
	cmp	r11,#0
	beq	%ft90			; no match

	ldr	r4,[r11,#Region_SWIParams+Create_WindowHandle]

	cmp	r3,r4			; are they the same?

	beq	%ft20			; yes, go and deal with it

	ldr	r11,[r11,#Region_Next]

	b	%bt10

20

;	now have found a clipping region in that window,
;	so need to make the window word aligned; also have
;	to adjust the region's screen address, and that of
;	all other regions in the window

;	to ensure word alignment, we make the horizontal scroll
;	offset, and the horizontal left hand visible edge of the
;	window stick to word aligned positions

;	store some useful VDU variables

	mov	r0,#VduExt_XEigFactor
	mov	r1,#VduExt_YEigFactor
	mov	r2,#VduExt_LineLength
	mov	r3,#VduExt_YWindLimit
	mov	r4,#VduExt_ScreenSize
	mov	r5,#VduExt_Log2BPP
	mvn	r6,#0
	stmfd	r13!,{r0,r1,r2,r3,r4,r5,r6}
	mov	r0,sp
	mov	r1,sp
	swi	XOS_ReadVduVariables

	bvs	%ft80

	^ 0,sp

XEigFactor	#	4
YEigFactor	#	4
LineLength	#	4
YWindLimit	#	4
ScreenSize	#	4
Log2BPP		#	4

	ldr	r4,[r10,#u_wax0]
	ldr	r5,[r10,#u_wax1]
	ldr	r6,[r10,#u_scx]

	ldr	r7,XEigFactor
	mov	r4,r4,lsr r7
	mov	r5,r5,lsr r7
	mov	r6,r6,lsr r7

	ldr	r8,Log2BPP

	mov	r9,#15
	mov	r9,r9,lsr r8
	add	r14,r4,r9
	add	r6,r6,r9

	mov	r9,#31
	mov	r9,r9,lsr r8
	bic	r14,r14,r9
	bic	r6,r6,r9

	sub	r14,r14,r4
	add	r4,r4,r14
	add	r5,r5,r14

	mov	r4,r4,lsl r7
	mov	r5,r5,lsl r7
	mov	r6,r6,lsl r7

	str	r4,[r10,#u_wax0]
	str	r5,[r10,#u_wax1]
	str	r6,[r10,#u_scx]

80
	add	sp,sp,#7*4

;	no more regions
90

	ldmfd	r13!,{r0-r12,lr}
	movs	pc,lr

; ***********************************************************************
;
; PostFilter - called on Wimp_Poll events.  It is required to ensure that
; a redraw event is generated for a Clip region when required

	EXPORT	PreFilter
PreFilter	ROUT
	stmfd	r13!,{r0-r12,lr}

; check if we have any windows moving that need anything done
	ldr	r0,WindowsMoving
	teq	r0,#0
	ldmeqfd	r13!,{r0-r12,pc}^
	
	mov	r0,#0
	str	r0,WindowsMoving

 [ DebugF	
	DLINE	"prefilter got something to do!"
 ]


; for each region test its flag separately
	ldr	r11,ClipHead

10
	cmp	r11,#0
	beq	%ft90
	
	
	bl	GetWindowInfo			; get new state of window
	
	ldr	r1,[r11,#Region_State]
	tsts	r1,#Region_State_Moving+Region_State_AppStarted
	beq	%ft80
	bic	r1,r1,#Region_State_Moving+Region_State_AppStarted
	str	r1,[r11,#Region_State]

	bl	ForceUpdateNotOwner		; ForceUpdate even if not owner
	
80
	ldr	r11,[r11,#Region_Next]
	b	%bt10
	
90

	ldmfd	r13!,{r0-r12,pc}^

; ***********************************************************************
;
; InstallFilters
;
; No pararameters on entry, normal error return.

	EXPORT	InstallFilters

InstallFilters	ROUT
	stmfd	r13!,{r0-r3,r10,r14}

	ldr	r0,FiltersInstalled
	cmp	r0,#0
	beq	%ft05

	ldmfd	r13!,{r0-r3,r10,r14}
	bics	pc,r14,#V_bit

05
	adr	r0,RectName
	adrl	r1,RectangleFilter
	mov	r2,r12
	mov	r3,#0

	swi	XFilter_RegisterRectFilter
	bvc	%ft20

;	failed!

	str	r0,[sp]
	ldmfd	r13!,{r0-r3,r10,r14}
	orrs	pc,r14,#V_bit

20

;	now install the other filter, if it fails then we have
;	to de-install the other one too!

	adr	r0,RectName
	adr	r1,CopyFilter
	mov	r2,r12
	swi	XFilter_RegisterCopyFilter
	bvc	%ft30

; 	bah, problem

	str	r0,[sp]

	adr	r0,RectName
	adrl	r1,RectangleFilter
	mov	r2,r12
	mov	r3,#0
	swi	XFilter_DeRegisterRectFilter

	ldmfd	r13!,{r0-r3,r10,r14}
	orrs	pc,r14,#V_bit

30
; now install the pre-filter
	adr	r0,RectName
	adr	r1,PreFilter
	mov	r2,r12
	mov	r3,#0			; applies to all tasks
	swi	XFilter_RegisterPreFilter
	bvc	%ft40
	
	str	r0,[sp]

	adr	r0,RectName
	adrl	r1,RectangleFilter
	mov	r2,r12
	mov	r3,#0
	swi	XFilter_DeRegisterRectFilter
	
	adr	r0,RectName
	adr	r1,CopyFilter
	mov	r2,r12
	mov	r3,#0
	swi	XFilter_DeRegisterCopyFilter
	
	ldmfd	r13!,{r0-r3,r10,r14}
	orrs	pc,r14,#V_bit	

40
; all done
	mov	r0,#1
	str	r0,FiltersInstalled

	ldmfd	r13!,{r0-r3,r10,r14}
	bics	pc,r14,#V_bit

RectName
	DCB	"Clip",0
	ALIGN

; ***********************************************************************
;
; RemoveFilters
;
; This routine must handle all sorts of nastiness.  If we get an error
; on the un-install, we have a serious problem!

	EXPORT	RemoveFilters

RemoveFilters	ROUT
	stmfd	r13!,{r0-r3,r10,r14}

	ldr	r0,FiltersInstalled
	cmp	r0,#0
	bne	%FT10

	ldmfd	r13!,{r0-r3,r10,r14}
	bics	pc,r14,#V_bit

10
	adr	r0,RectName
	adrl	r1,RectangleFilter
	mov	r2,r12
	mov	r3,#0

	swi	XFilter_DeRegisterRectFilter

	adr	r0,RectName
	adrl	r1,CopyFilter
	mov	r2,r12
	swi	XFilter_DeRegisterCopyFilter

	adr	r0,RectName
	adr	r1,PreFilter
	mov	r2,r12
	mov	r3,#0
	swi	XFilter_DeRegisterPreFilter

	mov	r0,#0
	str	r0,FiltersInstalled

	ldmfd	r13!,{r0-r3,r10,r14}
	bics	pc,r14,#V_bit

	END
