; > DrawMod.sources.DrArith

;----------------------------------------------------------------------------
;
; The Draw arithmetic routines
;
;----------------------------------------------------------------------------

; Subroutine to multiply two single precision signed numbers together and
; get a double precision result. The word following the BL should contain
; the numbers of the two operand registers in its bottom two bytes and the
; number of the register to take the ls part of the result in the next byte.
; The ms part of the result will go into the next register.
;   This routine will only work on registers R0-R8.

arith_SSmultD
        Push    "R0-R8"
        BIC     R8,R14,#&FC000003
        LDRB    R0,[R8]                 ;Get first operand
        LDR     R0,[R13,R0,LSL #2]
        LDRB    R1,[R8,#1]              ;Get second operand
        LDR     R1,[R13,R1,LSL #2]
        MOV     R4,R0,LSR #16           ;Split first operand into halves
        BIC     R3,R0,R4,LSL #16
        MOVS    R6,R1,LSR #16           ;Split second operand into halves
        BIC     R5,R1,R6,LSL #16
        MUL     R2,R3,R5                ;Produce low partial product
        MUL     R3,R6,R3                ;And middle partial products
        MUL     R5,R4,R5
        MULNE   R6,R4,R6                ;And high partial product
        ADDS    R3,R3,R5                ;Add middle partial products, dealing
        ADDCS   R6,R6,#&10000           ;  with overflow
        ADDS    R2,R2,R3,LSL #16        ;Add middle partial product sum into
        ADC     R6,R6,R3,LSR #16        ;  result
        TEQ     R0,#0                   ;Add cross products of operands and
        SUBMI   R6,R6,R1                ;  operand sign extensions into
        TEQ     R1,#0                   ;  result
        SUBMI   R6,R6,R0
        LDRB    R0,[R8,#2]              ;Store the result on the stack, to be
        ADD     R0,R13,R0,LSL #2        ;  picked up by the correct registers
        STMIA   R0,{R2,R6}
        Pull    "R0-R8"
        ADD     PC,R14,#4               ;Skip the argument word on return

; Subroutine to multiply a double precision and a single precision signed
; number together and get a double precision result. The first byte following
; the BL should contain the number of the register holding the low half of
; the double precision operand: its high half is held in the next register.
; The next byte holds the number of the register containing the single
; precision operand. The third byte holds the number of the register to take
; the ls part of the result; its ms part of the result will go into the next
; register.
;   This routine will only work on registers R0-R8.

arith_DSmultD
        Push    "R0-R8"
        BIC     R8,R14,#&FC000003
        LDRB    R0,[R8]                 ;Get first operand
        ADD     R0,R13,R0,LSL #2
        LDMIA   R0,{R0,R2}
        LDRB    R4,[R8,#1]              ;Get second operand
        LDR     R4,[R13,R4,LSL #2]
        MUL     R7,R2,R4                ;Produce R2 * R4 cross product
        TEQ     R4,#0                   ;Add in R0 * sign extension(R4) cross
        SUBMI   R7,R7,R0                ;  product
        MOV     R1,R0,LSR #16           ;Split low words of operands into 16
        BIC     R0,R0,R1,LSL #16        ;  bit chunks
        MOVS    R5,R4,LSR #16
        BIC     R4,R4,R5,LSL #16
        MUL     R6,R0,R4                ;Now add in main low word product
        MLA     R7,R1,R5,R7
        MULNE   R5,R0,R5
        MUL     R4,R1,R4
        ADDS    R4,R4,R5
        ADDCS   R7,R7,#&10000
        ADDS    R6,R6,R4,LSL #16
        ADC     R7,R7,R4,LSR #16
        LDRB    R0,[R8,#2]              ;Store the result on the stack, to be
        ADD     R0,R13,R0,LSL #2        ;  picked up by the correct registers
        STMIA   R0,{R6,R7}
        Pull    "R0-R8"
        ADD     PC,R14,#4               ;Skip the argument word on return

; Subroutine to divide a double precision unsigned number by a single
; precision unsigned number, yielding a single precision unsigned result.
; The word following the BL should contain the number of the register holding
; the ls part of the dividend in its bottom byte; the ms part of the dividend
; is in the next register. The next byte of the word contains the number of
; the divisor register, and the next byte the number of the register in which
; to deposit the quotient.
;   This routine will only work on registers R0-R8. It assumes that the
; divisor is not zero, and that the quotient will not overflow.

arith_DSdivS
        Push    "R0-R8"
        BIC     R8,R14,#&FC000003
        LDRB    R0,[R8]                 ;Get first operand
        ADD     R0,R13,R0,LSL #2
        LDMIA   R0,{R0,R1}
        LDRB    R2,[R8,#1]              ;Get second operand
        LDR     R2,[R13,R2,LSL #2]
        [       checkdivides
        TEQ     R2,#0
        SWIEQ   OS_BreakPt
        ]
        MOV     R3,#1                   ;Init. quotient with a sentinel bit
arith_DSdivS_loop
        ADDS    R0,R0,R0                ;Shift a bit up into the ms half of
        ADC     R1,R1,R1                ;  the dividend
        CMP     R1,R2                   ;Do trial subtraction, producing
        SUBCS   R1,R1,R2                ;  result bit in C
        ADCS    R3,R3,R3                ;Result bit into result, then loop
        BCC     arith_DSdivS_loop       ;  unless sentinel bit shifted out
        LDRB    R0,[R8,#2]              ;Store the result on the stack, to be
        STR     R3,[R13,R0,LSL #2]      ;  picked up by the correct registers
        Pull    "R0-R8"
        ADD     PC,R14,#4               ;Skip the argument word on return

; Subroutine to divide a double precision unsigned number by a single
; precision unsigned number, yielding a double precision unsigned result.
; The word following the BL should contain the number of the register holding
; the ls part of the dividend in its bottom byte; the ms part of the dividend
; is in the next register. The next byte of the word contains the number of
; the divisor register, and the next byte the number of the register in which
; to deposit the ls part of the quotient: the next register receives its ms
; part.
;   This routine will only work on registers R0-R8. It assumes that the
; divisor is not zero.

arith_DSdivD
        Push    "R0-R8"
        BIC     R8,R14,#&FC000003
        LDRB    R0,[R8]                 ;Get first operand
        ADD     R0,R13,R0,LSL #2
        LDMIA   R0,{R0,R1}
        LDRB    R2,[R8,#1]              ;Get second operand
        LDR     R2,[R13,R2,LSL #2]
        DivRem2 R4,R1,R2,R3             ;Produce high word of quotient
        MOV     R3,#1                   ;Init. low quot. with a sentinel bit
arith_DSdivD_loop
        ADDS    R0,R0,R0                ;Shift a bit up into the ms half of
        ADC     R1,R1,R1                ;  the dividend
        CMP     R1,R2                   ;Do trial subtraction, producing
        SUBCS   R1,R1,R2                ;  result bit in C
        ADCS    R3,R3,R3                ;Result bit into result, then loop
        BCC     arith_DSdivD_loop       ;  unless sentinel bit shifted out
        LDRB    R0,[R8,#2]              ;Store the result on the stack, to be
        ADD     R0,R13,R0,LSL #2        ;  picked up by the correct registers
        STMIA   R0,{R3,R4}
        Pull    "R0-R8"
        ADD     PC,R14,#4               ;Skip the argument word on return

; Subroutine to divide a double precision signed number by a double precision
; unsigned number, yielding a single precision signed result. The byte
; following the BL should contain the number of the register holding the ls
; part of the dividend in its bottom byte; its ms part is in the next
; register. The next byte contains the number of the register holding the ls
; part of the divisor: its ms part is in the next register. The next byte
; holds the number of the register in which to deposit the quotient.
;   This routine will only work on registers R0-R8. It assumes that the
; divisor is not zero, and that the quotient will not overflow. Rounding is
; towards minus infinity.

arith_DDdivS
        Push    "R0-R8"
        BIC     R8,R14,#&FC000003
        LDRB    R0,[R8]                 ;Get first operand
        ADD     R0,R13,R0,LSL #2
        LDMIA   R0,{R0,R1}
        LDRB    R3,[R8,#1]              ;Get second operand
        ADD     R3,R13,R3,LSL #2
        LDMIA   R3,{R3,R4}
        [       checkdivides
        ORRS    R2,R3,R4
        SWIEQ   OS_BreakPt
        ]
        MOVS    R8,R1,ASR #31           ;Record sign of dividend
        MVNMI   R0,R0                   ;  and 1's complement it
        MVNMI   R1,R1
        MOV     R2,#0
        MOV     R5,#1                   ;Init. quotient with a sentinel bit
arith_DDdivS_loop
        ADDS    R0,R0,R0                ;Shift a bit up in the dividend
        ADCS    R1,R1,R1
        ADC     R2,R2,R2
        SUBS    R6,R1,R3                ;Do trial subtraction, producing
        SBCS    R7,R2,R4                ;  result bit in C
        MOVCS   R1,R6
        MOVCS   R2,R7
        ADCS    R5,R5,R5                ;Result bit into result, then loop
        BCC     arith_DDdivS_loop       ;  unless sentinel bit shifted out
        TEQ     R8,#0                   ;Deal with dividend sign by 1's
        MVNMI   R5,R5                   ;  complementing quotient if negative
        BIC     R8,R14,#&FC000003
        LDRB    R0,[R8,#2]              ;Store the result on the stack, to be
        STR     R5,[R13,R0,LSL #2]      ;  picked up by the correct registers
        Pull    "R0-R8"
        ADD     PC,R14,#4               ;Skip the argument word on return

; Subroutine to produce a single precision square root of an unsigned double
; precision unsigned number. The word following the BL should contain the
; number of the register holding the ls part of the argument in its bottom
; byte; the ms part of the argument is in the next register. The next byte of
; the word contains the number of the register in which to deposit the result.
;   This routine will only work on registers R0-R8.

arith_DsqrtS
        Push    "R0-R8"
        BIC     R8,R14,#&FC000003
        LDRB    R0,[R8]                 ;Get operand
        ADD     R0,R13,R0,LSL #2
        LDMIA   R0,{R0,R1}
        MOV     R2,#0                   ;Set up twice the roving bit
        MOV     R3,#&80000000
        MOV     R4,#0                   ;Set up the result so far
        MOV     R5,#0
arith_DsqrtS_loop
        ADD     R4,R4,R2,LSR #1         ;No carry in this double precision
        ADD     R5,R5,R3,LSR #1         ;  addition - or in the shift
        SUBS    R6,R0,R4                ;Trial subtraction
        SBCS    R7,R1,R5
        MOVHS   R0,R6
        MOVHS   R1,R7
        ADDHS   R4,R4,R2,LSR #1         ;Another shift and addition without
        ADDHS   R5,R5,R3,LSR #1         ;  carry.
        SUBLO   R4,R4,R2,LSR #1         ;Or a similar subtraction and shift
        SUBLO   R5,R5,R3,LSR #1
        MOVS    R5,R5,LSR #1            ;Shift result by one
        MOV     R4,R4,RRX
        MOVS    R3,R3,LSR #2            ;Shift roving bit by two
        MOVCS   R2,#&80000000
        MOVCC   R2,R2,LSR #2
        ORRS    R6,R2,R3                ;Loop until roving bit falls off the
        BNE     arith_DsqrtS_loop       ;  end of the double word
        LDRB    R0,[R8,#1]              ;Store the result on the stack, to be
        STR     R4,[R13,R0,LSL #2]      ;  picked up by the correct register
        Pull    "R0-R8"
        ADD     PC,R14,#4               ;Skip the argument word on return

        LNK     DrInter.s
