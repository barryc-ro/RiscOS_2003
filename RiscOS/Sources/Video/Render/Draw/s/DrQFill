; > DrawMod.sources.DrQFill

        [       FastEasyFills
;----------------------------------------------------------------------------
;
; The fast Draw fill code for the common special fill styles &0C-&0F,&30-&33
;
;----------------------------------------------------------------------------

; Main code branches around this fast code

        B       out_qfill_finish

out_qfill

; We're now ready to start the main plotting loop. This scans pixel lines,
; from the top to the bottom of the graphics window. (This order is chosen
; because it reduces the chance of "tears" on the display as the shape is
; being plotted.)
;
; When an edge is activated, the format of its five word area changes, to
; the following:
;   Offset 0:  Flags as above, now fully generated.
;   Offset 4:  Target Y co-ordinate.
;   Offset 8:  ABS(deltaX).
;   Offset 12: ABS(deltaY).
;   Offset 16: Pointer to end of second five word area (detailed below).
;
; Furthermore, a second five word area is generated for the line. This
; contains the following details:
;   Offset 0:  Unused.
;   Offset 4:  Unused.
;   Offset 8:  Bresenham control value for current pixel.
;   Offset 12: X co-ordinate of current pixel. The current pixel is the pixel
;              that we start searching from on the next scan line.
;   Offset 16: First pixel on current scan line for which the winding number
;              change comes into effect. If there is no such pixel, this
;              contains &7FFFFFFF.
; This five word area is again pointed at via its last word.
;
; A modified Bresenham algorithm is used to keep track of the edges. Details
; of this are as follows:
;   We know that the edge is going downwards. We reverse the X co-ordinate
; if necessary to ensure that it is going rightwards. All references below to
; "left" and "right" refer to the situation after this possible reversal,
; unless otherwise stated.
;   Imagine a linear function defined on the plane to take values of 0 at
; the initial and final points (to subpixel accuracy) of the edge - this
; specifies the function up to multiplication by a constant. We can determine
; which side of the edge any given point is by looking at the sign of this
; function. Furthermore, given the value of the function at a given point, we
; can calculate the value of the function at a given displacement from this
; point by adding a constant times
;
;    (Ydisplacement * ABS(deltaX) + Xdisplacement * ABS(deltaY))
;
; to the given value. We choose the linear function such that this constant
; is -1: this means that the specified point lies below or to the left of the
; edge if the linear function is positive and above or to the right of the
; edge if it is negative. If the function turns out to be zero, this means
; that the point lies precisely on the edge. To avoid problems with this, we
; deem the edge to be positioned very slightly to the (real - i.e. not taking
; account of the reversal) right of and even more slightly above its real
; position. In practice, the way this is implemented is to take the value of
; the function at the edge's endpoints to be zero if deltaX is positive and
; -1 otherwise, and then treat zero as being positive.
;   To keep track of winding numbers, we need to examine the value of the
; function at the centre of the pixel. So we only need to look at the value
; of the function at pixel increments. Rather than continually shifting
; deltaX/Y left by coord_shift, we deal with this by shifting the function's
; value right by the same amount: the low order bits clearly make no
; difference to the decision as to which side of the edge the point is on,
; and can never be changed by a half pixel movement.
;   As we are only interested in winding number changes (rather than in
; boundary pixels), there are no significant problems at the ends of the
; edges.
;
; A certain amount of memory management has to be done while all this is
; going on. In general, the active edges are pointed to by the pointers
; between [startactive] and [endpointers], while edges awaiting activation
; are pointed to by the pointers between [pointers] and [endwaiting]. The
; active edges are shuffled up as edges become inactive.
;   A list of available 5 word areas is kept. Whenever one is needed, this
; list is used in the first place. If it is empty, another is generated from
; the unused workspace. If there is insufficient workspace, a new workspace
; chunk is claimed. When an edge is inactivated, both 5 word areas used by it
; are reclaimed.
;   Note that this list is chained in the same way as above - i.e. a pointer
; at the end of each area pointing at the end of the next area.
;
; Use of registers throughout this loop:
;   R1 holds the current Y co-ordinate.

; Layout of alternative second control area used here.

        ^       -edgepointeroffset
        #       4               ;Unused
        #       4               ;Unused
qbres   #       4
qcurrX  #       4
qcrossX #       4

; The main row loop has been initialised by the main case code

out_qfill_rowloop

        [       mydebug

        Push    "R0,R1,R2"
        MOV     R0,R1
        ADR     R1,%f90
        MOV     R2,#9
        SWI     OS_ConvertHex8
        SWI     OS_WriteS
        DCB     12,"Scan line "
90
        DCB     "00000000",0
        ALIGN
        Pull    "R0,R1,R2"

        ]

; Advance each of the currently active edges, working out how they
; intersect this scan line.
;
; Use of registers:
;   R1 holds the current Y co-ordinate.
;   R10 points to start of list of active edges.
;   R11 points to current active edge.

        ADR     R14,startactive
        LDMIA   R14,{R10,R11}
        ASSERT  endpointers = startactive + 4
        CMP     R11,R10
        BLS     out_qfill_possibleskip  ;Branch if no active edges
out_qfill_advanceloop
        LDR     R9,[R11,#-4]!

        [       mydebug

        Push    "R0,R1,R2"
        LDR     R0,[R11]
        ADR     R1,%f90
        MOV     R2,#9
        SWI     OS_ConvertHex8
        SWI     OS_WriteS
        DCB     13,10,"Advance edge at "
90
        DCB     "00000000",0
        ALIGN
        Pull    "R0,R1,R2"

        ]

; Do normal line processing, tidy the results and store them.

        LDMDA   R9,{R0,R2,R3,R4,R5}
        ASSERT  lineflags = -16
        ASSERT  target = -12
        ASSERT  deltaX = -8
        ASSERT  deltaY = -4
        ASSERT  linkptr = 0
        LDMDB   R5,{R6,R7}
        ASSERT  qbres = -8
        ASSERT  qcurrX = -4
        SUB     R8,R7,R0,ASR #31        ;Calculate crossing X
        ADD     R6,R6,R3                ;Adjust Bresenham value for Y move
        CMP     R1,R2                   ;Stop if already below target

        [       FastHorizEdges

        BLT     out_qfill_endprocessloop1
        CMP     R4,R6,ASR #FastHorizEdgeParam   ;Use fast code?
        BLLE    out_qfill_fasthoriz

        CMP     R6,#0                   ;Are we still below the edge?
out_qfill_processloop1
        ADDGE   R7,R7,R0,ASR #30        ;Make X moves until we're above the
        SUBGES  R6,R6,R4                ;  edge, adjusting Bresenham value
        BGE     out_qfill_processloop1  ;  for them
out_qfill_endprocessloop1

        |

        CMPGE   R6,#0                   ;Are we still below the edge?
out_qfill_processloop1
        ADDGE   R7,R7,R0,ASR #30        ;Make X moves until we're above the
        SUBGES  R6,R6,R4                ;  edge, adjusting Bresenham value
        BGE     out_qfill_processloop1  ;  for them

        ]

        STMDA   R5,{R6,R7,R8}
        ASSERT  qbres = -8
        ASSERT  qcurrX = -4
        ASSERT  qcrossX = 0

; Loop for next edge to advance.

        CMP     R11,R10                 ;Advance to next active edge and loop
        BHI     out_qfill_advanceloop
out_qfill_advanceend

; Activate any new edges and work out how they intersect this scan
; line. Note that the dummy edge put into the edge table means we don't
; have to check for overflowing the end of the table.
;
; Use of registers:
;   R0 holds current edge's flags.
;   R1 holds the current Y co-ordinate.
;   R3 holds ABS(deltaX).
;   R4 holds ABS(deltaY).
;   R5 holds lowerX.
;   R6 holds lowerY.
;   R7 holds upperX.
;   R8 holds upperY.
;   R9 points at edge currently being considered.
;   R10 points at pointer to edge currently being considered.
;   R11 points at first active edge pointer.

        LDR     R10,endwaiting          ;Note R11 is already set up correctly
out_qfill_activateloop
        LDR     R9,[R10,#-4]!           ;Get edge pointer
        LDMDA   R9,{R0,R5-R8}           ;Get flags and co-ordinates
        ASSERT  lineflags = -16
        ASSERT  lowerX = -12
        ASSERT  lowerY = -8
        ASSERT  upperX = -4
        ASSERT  upperY = 0
        
        SUB     R8,R8,#halfpixelsize    ;Offset upperY to pixel centre
        CMP     R1,R8,ASR #coord_shift  ;Does this edge need activating?
        BGT     out_qfill_activateend   ;Finished activating edges if not

        [       mydebug

        Push    "R0,R1,R2"
        MOV     R0,R9
        ADR     R1,%f90
        MOV     R2,#9
        SWI     OS_ConvertHex8
        SWI     OS_WriteS
        DCB     13,10,"Activate edge at "
90
        DCB     "00000000",0
        ALIGN
        Pull    "R0,R1,R2"

        ]

        SUB     R6,R6,#halfpixelsize    ;Offset lowerY to pixel centre

; Calculate ABS(deltaX) and ABS(deltaY).

        SUBS    R3,R7,R5
        RSBLT   R3,R3,#0
        SUB     R4,R8,R6                ;Must be correct sign

; Record direction of line as 1 or -1 in top two bits of flags

        ORR     R0,R0,#&40000000
        ORRGE   R0,R0,#&80000000        ;GE if line goes leftwards

; Now calculate target Y co-ordinate - the line must stop after this Y value
; is reached.

        MOV     R2,R6,ASR #coord_shift
        ADD     R2,R2,#1

; We're now ready to obtain the second control area for this edge. We want
; a pointer to it in R5 (lower endpoint is no longer needed).

        LDR     R5,fivewordlist         ;Is there one waiting around?
        TEQ     R5,#0
        LDRNE   R14,[R5,#linkptr]       ;If so, remove it from list
        STRNE   R14,fivewordlist
        BNE     out_qfill_gotsecondarea
        Push    "outptr,outcnt"         ;If not, try to get it from
        ADR     R6,outptrandcnt         ;  remaining workspace
        LDMIA   R6,{outptr,outcnt}
        SUBS    outcnt,outcnt,#edgesize ;Check there's space. V cleared
        BLLO    out_fill_getmorespace   ;If not, try to get more space.
                                        ;Now VS <=> space claimed & failed
        ADDVC   R5,outptr,#edgepointeroffset    ;Point correctly at five word
                                                ;  area in workspace
        ADDVC   outptr,outptr,#edgesize
        STMVCIA R6,{outptr,outcnt}
        Pull    "outptr,outcnt"
        BVS     out_fill_errorfinish    ;Pass errors back, now stack correct
out_qfill_gotsecondarea

; Now we're ready to store the first control area and add edge to active
; list.

        STMDA   R9,{R0,R2,R3,R4,R5}
        ASSERT  lineflags = -16
        ASSERT  target = -12
        ASSERT  deltaX = -8
        ASSERT  deltaY = -4
        ASSERT  linkptr = 0
        STR     R9,[R11,#-4]!

; Next, we must calculate values for the second control area. Time to give
; a new register usage, I think:
;
; Use of registers:
;   R0 holds current edge's flags.
;   R1 holds the current Y co-ordinate.
;   R2 holds the target Y co-ordinate.
;   R3 holds ABS(deltaX).
;   R4 holds ABS(deltaY).
;   R5 points to the edge's second control area.
;   R6 holds Bresenham value.
;   R7 holds upperX.
;   R8 holds upperY.
;   R9 points at edge currently being considered.
;   R10 points at pointer to edge currently being considered.
;   R11 points at first active edge pointer.
;
; Calculate current pixel at upper endpoint and Bresenham value at its
; centre. Then use standard code to determine where crossing on this scan
; line is.
;   We need to calculate 0 if line goes right or -1 if it goes leftwards,
; plus subpixel X from centre of pixel times ABS(deltaY), plus subpixel Y
; from centre of pixel times ABS(deltaX).
;   Double precision arithmetic will be needed during this calculation if
; pixelsize * ABS(deltaX) + pixelsize * ABS(deltaY) can exceed the signed
; integer range, i.e. if ABS(deltaX)+ABS(deltaY) >= &80000000/pixelsize.

        AND     R14,R7,#subpixelmask
        MOV     R7,R7,ASR #coord_shift

        ADD     R6,R3,R4                ;ABS(deltaX)+ABS(deltaY)
        CMP     R6,#&80000000:SHR:coord_shift
        BLO     out_qfill_spbres

out_qfill_dpbres
        Push    "R0,R4,R5,R7"
        MOVS    R7,R0,ASR #32           ;Initialise R7 to 0 if line goes
                                        ;  right, -1 if left. Also set C
                                        ;  if and only if line goes left
        SUB     R0,R14,#halfpixelsize   ;Produce corrected subpixel X
        RSBCS   R0,R0,#0
        BL      arith_SSmultD
        DCB     R0,R4,R4,0              ;subpixelX * ABS(deltaY) into R4,R5
        ADDS    R6,R4,R7                ;Accumulate into R6,R7
        ADC     R7,R5,R7
        AND     R0,R8,#subpixelmask
        BL      arith_SSmultD
        DCB     R0,R3,R4,0              ;subpixelY * ABS(deltaX) into R4,R5
        ADDS    R6,R4,R6                ;Accumulate into R6,R7
        ADC     R7,R5,R7
        MOV     R6,R6,LSR #coord_shift  ;Change units to full pixels
        ORR     R6,R6,R7,LSL #32-coord_shift
        Pull    "R0,R4,R5,R7"
        B       out_qfill_bresdone

out_qfill_spbres
        MOVS    R6,R0,ASR #32           ;Initialise R6 to 0 if line goes
                                        ;  right, -1 if left. Also set C if
                                        ;  and only if line goes left
        SUB     R14,R14,#halfpixelsize  ;Produce corrected subpixel X
        RSBCS   R14,R14,#0
        MLA     R6,R14,R4,R6            ;Accumulate subpixelX * ABS(deltaY)
        AND     R14,R8,#subpixelmask
        MLA     R6,R14,R3,R6            ;Accumulate subpixelY * ABS(deltaX)
        MOV     R6,R6,ASR #coord_shift  ;Change units to full pixels

out_qfill_bresdone
        MOV     R8,R8,ASR #coord_shift

; Now advance the edge until we're on the right scan line and the Bresenham
; value is negative.

        [       FastYClipping
        
        CMP     R1,R2                   ;Don't bother if we're below target Y
        SUBGES  R8,R8,R1                ;Must set GT or EQ
        BLGT    out_qfill_fastclip      ;Preserves flags
        CMPGE   R6,#0                   ;So this can only happen if R1 >= R2
out_qfill_Xcliploop
        ADDGE   R7,R7,R0,ASR #30        ;Advance in X direction as far as
        SUBGES  R6,R6,R4                ;  possible
        BGE     out_qfill_Xcliploop
        ADD     R6,R6,R3

        |

out_qfill_Ycliploop
        CMP     R1,R2                   ;Don't bother if we're below target Y
        CMPGE   R6,#0
out_qfill_Xcliploop
        ADDGE   R7,R7,R0,ASR #30        ;Advance in X direction as far as
        SUBGES  R6,R6,R4                ;  possible
        BGE     out_qfill_Xcliploop
        SUB     R8,R8,#1                ;Advance in Y direction and
        ADD     R6,R6,R3                ;  adjust Bresenham value
        CMP     R8,R1                   ;Loop if not far enough down yet
        BGE     out_qfill_Ycliploop

        ]

; Now process the edge normally.

        SUB     R8,R7,R0,ASR #31        ;Calculate crossing X
        CMP     R1,R2                   ;Stop if already below target

        [       FastHorizEdges

        BLT     out_qfill_endprocessloop2
        CMP     R4,R6,ASR #FastHorizEdgeParam   ;Use fast code?
        BLLE    out_qfill_fasthoriz

        CMP     R6,#0                   ;Are we still below the edge?
out_qfill_processloop2
        ADDGE   R7,R7,R0,ASR #30        ;Make X moves until we're above the
        SUBGES  R6,R6,R4                ;  edge, adjusting Bresenham value
        BGE     out_qfill_processloop2  ;  for them
out_qfill_endprocessloop2

        |

        CMPGE   R6,#0                   ;Are we still below the edge?
out_qfill_processloop2
        ADDGE   R7,R7,R0,ASR #30        ;Make X moves until we're above the
        SUBGES  R6,R6,R4                ;  edge, adjusting Bresenham value
        BGE     out_qfill_processloop2  ;  for them

        ]

        STMDA   R5,{R6,R7,R8}
        ASSERT  qbres = -8
        ASSERT  qcurrX = -4
        ASSERT  qcrossX = 0
        B       out_qfill_activateloop  ;And loop for another edge

        [       FastYClipping

out_qfill_fastclip
        Push    "R1,R2,R7,LR"
        MOV     R7,R6,ASR #31           ;Sign-extend Bresenham value
        BL      arith_SSmultD
        DCB     R8,R3,R1,0              ;(no. Y steps) * deltaX into R1,R2
        ADDS    R6,R6,R1                ;Accumulate into Bresenham value
        ADCS    R7,R7,R2
        MOVMI   R8,#0                   ;Check for still being to the right
        BMI     out_qfill_fastclipdone  ;  of the edge
        BL      arith_DSdivS            ;Divide by deltaY - cannot be divide
        DCB     R6,R4,R8,0              ;  by zero or overflow because edges
                                        ;  above graphics window were
                                        ;  filtered out
        BL      arith_SSmultD
        DCB     R8,R4,R1,0              ;(no. X steps) * deltaY into R1,R2
        SUB     R6,R6,R1                ;Not interested in high word!
out_qfill_fastclipdone
        Pull    "R1,R2,R7"
        TEQ     R0,#0                   ;Move X co-ord. in right direction
        ADDPL   R7,R7,R8
        SUBMI   R7,R7,R8
        Pull    "PC",,^

        ]

        [       FastHorizEdges

; Subroutine to advance an edge horizontally fast (i.e. using long division
; rather than division by repeated subtraction!)
;   Updates R6 and R7, corrupts R2 and R3, preserves flags & other registers

out_qfill_fasthoriz
        DivRem2 R2,R6,R4,R3
        TEQ     R0,#0
        ADDPL   R7,R7,R2
        SUBMI   R7,R7,R2
        MOVS    PC,LR

        ]

out_qfill_activateend
        ADD     R10,R10,#4              ;Replace non-activated edge
        ADR     R14,endwaiting
        STMIA   R14,{R10,R11}
        ASSERT  startactive = endwaiting + 4

; Destroy any edges that have finished.
;
; Use of registers:
;   R1 holds the current Y co-ordinate.
;   R8 contains current edge pointer.
;   R9 points to last active edge in new list.
;   R10 points to start of list of active edges.
;   R11 points to current active edge from old list.

        ADR     R14,startactive
        LDMIA   R14,{R10,R11}
        ASSERT  endpointers = startactive + 4
        CMP     R11,R10
        BLS     out_qfill_destroyend    ;Branch if no active edges
        MOV     R9,R11
out_qfill_destroyloop
        LDR     R8,[R11,#-4]!           ;Get next edge pointer
        LDR     R14,[R8,#target]        ;Finished with this edge?
        CMP     R1,R14
        STRGE   R8,[R9,#-4]!            ;Store it in new list if not
        LDRLT   R14,fivewordlist        ;If so, chain both five word areas
        STRLT   R8,fivewordlist         ;  for the finished edge onto the
        LDRLT   R8,[R8,#linkptr]        ;  list of free five word areas
        STRLT   R14,[R8,#linkptr]

        [       mydebug

        BGE     %f99
        Push    "R0,R1,R2"
        LDR     R0,[R11]
        ADR     R1,%f90
        MOV     R2,#9
        SWI     OS_ConvertHex8
        SWI     OS_WriteS
        DCB     13,10,"Destroy edge at "
90
        DCB     "00000000",0
        ALIGN
        Pull    "R0,R1,R2"
99

        ]

        CMP     R11,R10                 ;And loop for further active edges
        BHI     out_qfill_destroyloop
        STR     R9,startactive          ;Store new active edge list start
out_qfill_destroyend

; Plot appropriate parts of this scan line.
;
; First, we sort the active edges by their crossing X value. We use a bubble
; sort working upwards through the active edge pointers for this purpose.
; Reasons:
;
;   (a) There will usually be few active edges.
;   (b) Pointers to the active edges that have just been activated and which
;       are therefore likely to be moved a long way are at the bottom of the
;       list of active edge pointers.
;   (c) Pointers to active edges that have not just been activated will
;       already be in their correct order for the previous scan line. This is
;       unlikely to differ much from the order for this scan line.
;
; Use of registers:
;   R3 holds old active edge pointer.
;   R4 holds old crossing X value.
;   R5 holds new active edge pointer.
;   R6 holds new crossing X value.
;   R7 points to current position in list of active edge pointers.
;   R8 points to current bound to sort.
;   R9 points to new bound to sort.
;   R10 points to first active edge pointer.
;   R11 points beyond last active edge pointer.

        ADR     R14,startactive
        LDMIA   R14,{R10,R11}
        ASSERT  endpointers = startactive + 4
        CMP     R11,R10
        BLS     out_qfill_sortend
        MOV     R9,R11
out_qfill_sortpass
        SUB     R8,R9,#4
        MOV     R9,R10
        MOV     R7,R10
        CMP     R7,R8
        BHS     out_qfill_sortend
        LDR     R3,[R7]
        LDR     R4,[R3,#linkptr]
        LDR     R4,[R4,#qcrossX]
out_qfill_sortloop
        LDR     R5,[R7,#4]!
        LDR     R6,[R5,#linkptr]
        LDR     R6,[R6,#qcrossX]
        CMP     R6,R4
        STRGE   R3,[R7,#-4]
        MOVGE   R3,R5
        MOVGE   R4,R6
        STRLT   R5,[R7,#-4]
        MOVLT   R9,R7
        CMP     R7,R8
        BLO     out_qfill_sortloop
        STR     R3,[R7]
        B       out_qfill_sortpass

out_qfill_sortend

; Now we are set to do the plotting. This is done by scanning through the
; list of active edges, deciding at each one whether we have moved between
; interior and exterior.
;
; Use of registers:
;   R0 contains the left end of the line segment to be plotted.
;   R1 contains the current Y co-ordinate.
;   R2 contains the current edge's crossing X.
;   R5 contains the fill style, in a modified form. We use the f_fullexterior
;      bit to indicate whether we are currently plotting.
;   R6 contains the current winding number.
;   R7 contains the current edge's winding number in its top two bits.
;   R10 points to the first active edge.
;   R11 points just beyond the last active edge.

        MOV     R0,#&80000000           ;Left end at "-infinity" if plotting
                                        ;  full exterior pixels
        LDR     R5,fillstyle            ;Pick up (modified) fill style
        MOV     R6,#0                   ;Winding number initially zero
                                        ;Note R10 and R11 already set up
out_qfill_plotloop
        CMP     R10,R11                 ;No more active edges?
        BHS     out_qfill_finishscanline
                                        ;If not, go and finish this scan line
        LDR     R14,[R10],#4            ;Get the edge's winding number and
        LDR     R7,[R14,#lineflags]     ;  crossing X
        MOV     R7,R7,ASL #2
        LDR     R14,[R14,#linkptr]
        LDR     R2,[R14,#qcrossX]
        LDR     R14,rcol
        CMP     R2,R14                  ;Beyond right hand side?
        BGT     out_qfill_finishscanline
                                        ;If so, we're finished

; Next change the winding number and re-determine whether we are inside or
; outside. This uses some tricky code, based on the following facts:
;
; For non-zero rule:
;
;   exterior  <=>  winding = 0
;
; For negative only rule:
;
;   exterior  <=>  ASR(winding, 31) = 0
;
; For even-odd rule:
;
;   exterior  <=>  winding AND 1 = 0
;
; For positive only rule:
;
;   exterior  <=>  ASR(-winding, 31) AND 1 = 0

        ADD     R6,R6,R7,ASR #30
        MOVS    R14,R5,LSL #31          ;Sets Z for non-zero and even-odd
                                        ;  rules, C for even-odd and positive
                                        ;  only rules
        ASSERT  r_nonzero = 0
        ASSERT  r_negative = 1
        ASSERT  r_evenodd = 2
        ASSERT  r_positive = 3
        MOV     R14,R6
        RSBHI   R14,R14,#0              ;Done only if positive only rule!
        MOVNE   R14,R14,ASR #31
        ANDCS   R14,R14,#1
        TEQ     R14,#0                  ;Now Z set <=> exterior
        AND     R14,R5,#f_inside        ;Isolate inside/outside flag
        EORNE   R14,R14,#f_inside       ;Now zero if state hasn't changed
        EOR     R5,R5,R14               ;Update the flag
        TEQ     R14,#0                  ;If we've changed, deal with the
        BLNE    out_fill_plottingchange ;  change

        B       out_qfill_plotloop

; The following piece of code does a fast skip down the graphics window in
; the case that there are no active edges and the full exterior pixels are
; not being plotted.

out_qfill_possibleskip
        LDR     R14,fillstyle           ;Check whether full exterior pixels
        TST     R14,#f_fullexterior     ;  are to be plotted - we cannot skip
        BNE     out_qfill_advanceend    ;  fast if they are
        LDR     R14,endwaiting          ;If not, find out what the first scan
        LDR     R14,[R14,#-4]           ;  line that could be affected by the
        LDR     R14,[R14,#upperY]       ;  next edge is
        SUB     R14,R14,#halfpixelsize
        CMP     R1,R14,ASR #coord_shift ;Move down to it if it lies below our
        MOVGT   R1,R14,ASR #coord_shift ;  current scan line
        LDRGT   R14,brow                ;If this happened, check if finished
        CMPGT   R14,R1
        BLE     out_qfill_advanceend    ;Re-enter loop if we didn't skip down
                                        ;  or if we did and stayed above the
                                        ;  bottom of the graphics window
        B       out_qfill_finish        ;Otherwise, finalise and return

out_qfill_finishscanline

; We want to finish the current segment if we're in "plotting" state. We
; do this by simply specifying that there is a change in state at +infinity.

        MOV     R2,#&7FFFFFFF
        BL      out_fill_plottingchange

; And loop for next scan line if necessary.

        [       mydebug

        Push    "R0"
        SWI     OS_WriteS
        DCB     13,10,"Done.",0
        ALIGN
        SWI     OS_ReadC
        Pull    "R0"

        ]

        SUB     R1,R1,#1                ;Move down a row
        LDR     R14,brow                ;Off bottom of graphics window?
        CMP     R1,R14
        BGE     out_qfill_rowloop       ;Loop if not

out_qfill_finish

        ]

        END
