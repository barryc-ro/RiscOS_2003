; generated by Norcroft RISC OS ARM C vsn 4.10 [Jan 13 1993]
a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
v3 RN 6
v4 RN 7
v5 RN 8
v6 RN 9
sl RN 10
fp RN 11
ip RN 12
sp RN 13
lr RN 14
pc RN 15

f0 FN 0
f1 FN 1
f2 FN 2
f3 FN 3
f4 FN 4
f5 FN 5
f6 FN 6
f7 FN 7

        AREA |C$$code|, CODE, READONLY

        IMPORT  |__main|
|x$codeseg|
        B       |__main|

        IMPORT  |x$stack_overflow_1|
        IMPORT  xcolourtrans_select_table_for_sprite
        IMPORT  xos_read_mode_variable
        IMPORT  riscos_format_dec
        IMPORT  main_error_lookup
        IMPORT  xwimp_read_palette
        IMPORT  xcolourtrans_select_table
        IMPORT  xosspriteop_put_sprite_trfm
Sprite
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,fp,ip,lr,pc}
        SUB     fp, ip, #4
        SUB     ip, sp, #368
        CMPS    ip, sl
        BLLT    |x$stack_overflow_1|
        MOV     v1, a1
        MOV     v2, a2
        SUB     sp, sp, #256
        MOV     v3, #0
        LDR     a1, [v1, #32]
        SUB     a1, a1, #44
        MOV     a1, a1, LSR #3
        CMPS    a1, #0
        BLE     |L000070.J4.Sprite|
        MOV     a4, #1
        MOV     a3, sp
        STMFD   sp!, {a3,a4}
        MOV     a2, v1
        MVN     a4, #0
        MVN     a3, #0
        MOV     a1, #256
        BL      xcolourtrans_select_table_for_sprite
        ADD     sp, sp, #8
        CMPS    a1, #0
        BNE     |L000164.J27.Sprite|
        B       |L000134.J9.Sprite|
|L000070.J4.Sprite|
        SUB     sp, sp, #88
        LDR     a1, [v1, #40]
        MOV     a4, sp
        ADD     a3, sp, #84
        MOV     a2, #9
        BL      xos_read_mode_variable
        CMPS    a1, #0
        BNE     |L000128.J22.Sprite|
        LDR     a1, [sp, #0]
        ANDS    a1, a1, #&20000000
        BEQ     |L0000d8.J12.Sprite|
        SUB     sp, sp, #12
        LDR     a2, [v1, #40]
        MOV     a1, sp
        MOV     a4, #1
        MOV     a3, #0
        BL      riscos_format_dec
        MOV     a3, a1
        ADD     a2, pc, #L0000d0-.-8
        MOV     a1, #4
        ADD     a1, a1, #&20c00
        BL      main_error_lookup
        ADD     sp, sp, #100
        B       |L000164.J27.Sprite|
L0000d0
        DCB     &42,&61,&64,&4d
        DCB     &6f,&64,&65,&00
|L0000d8.J12.Sprite|
        LDR     a1, [sp, #84]
        CMPS    a1, #3
        BGE     |L0000f4.J14.Sprite|
        ADD     a1, sp, #4
        BL      xwimp_read_palette
        CMPS    a1, #0
        BNE     |L000128.J22.Sprite|
|L0000f4.J14.Sprite|
        ADD     a4, sp, #88
        STMFD   sp!, {a4}
        LDR     a1, [v1, #40]
        LDR     a2, [sp, #88]
        CMPS    a2, #3
        MOVGE   a2, v3
        ADDLT   a2, sp, #8
        MVN     a4, #0
        MVN     a3, #0
        BL      xcolourtrans_select_table
        ADD     sp, sp, #4
        CMPS    a1, #0
        BEQ     |L000130.J18.Sprite|
|L000128.J22.Sprite|
        ADD     sp, sp, #88
        B       |L000164.J27.Sprite|
|L000130.J18.Sprite|
        ADD     sp, sp, #88
|L000134.J9.Sprite|
        MOV     a4, sp
        MOV     a3, v2
        MOV     a2, #8
        MOV     a1, #0
        STMFD   sp!, {a1,a2,a3,a4}
        MOV     a3, v1
        MOV     a4, #0
        MOV     a2, #255
        MOV     a1, #512
        BL      xosspriteop_put_sprite_trfm
        ADD     sp, sp, #16
        CMPS    a1, #0
|L000164.J27.Sprite|
        LDMEA   fp, {v1,v2,v3,fp,sp,pc}^

        IMPORT  |x$stack_overflow|
        IMPORT  trfm_dir
        IMPORT  strlen
        IMPORT  xosspriteop_switch_output_to_mask
        IMPORT  xos_writen
        IMPORT  xos_plot
        IMPORT  xos_writec
        IMPORT  xosspriteop_unswitch_output
Text_System
        MOV     ip, sp
        STMFD   sp!, {a1,a2,a3,v1,v2,v3,v4,v5,v6,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        MOV     v2, a2
        MOV     a1, a3
        SUB     sp, sp, #200
        MOV     v4, #0
        MOV     v1, v4
        ADD     lr, sp, #40
        LDR     v3, [pc, #L00022c-.-8]
        LDR     ip, [sl, #0]
        ADD     v3, ip, v3
        MOV     ip, #11
|L0001a4.J28.Text_System|
        LDMFD   v3!, {a2,a3,a4}
        STMEA   lr!, {a2,a3,a4}
        SUBS    ip, ip, #1
        BNE     |L0001a4.J28.Text_System|
        LDMFD   v3, {a3,a4}
        STMEA   lr, {a3,a4}
        MOV     v3, v4
        ADD     a3, sp, #32
        LDR     a2, [pc, #L000230-.-8]
        LDR     ip, [sl, #0]
        ADD     a2, ip, a2
        LDMFD   a2, {a4,ip}
        STMEA   a3, {a4,ip}
        ADD     sp, sp, #24
        ADD     a3, a1, #24
        LDMEA   a3!, {a4,ip,lr}
        STMFD   sp!, {a4,ip,lr}
        LDMEA   a3!, {a4,ip,lr}
        STMFD   sp!, {a4,ip,lr}
        ADD     a3, sp, #32
        MOV     a2, a1
        ADD     a1, sp, #24
        BL      trfm_dir
        LDR     a1, [fp, #-48]
        BL      strlen
        STR     a1, [sp, #196]
        STR     v2, [sp, #104]
        STR     v2, [sp, #100]
        MOV     v2, v4
        ADD     v6, sp, #56
        MOV     a1, sp
        ADD     v5, a1, #20
        ADD     v4, a1, #16
        B       |L00030c.J5.Text_System|
L00022c
        DCD     |x$dataseg|
L000230
        DCD     |x$dataseg|+&8c
|L000234.J4.Text_System|
        ADD     a4, sp, #180
        ADD     a3, sp, #184
        ADD     a2, sp, #188
        ADD     a1, sp, #192
        STMFD   sp!, {a1,a2,a3,a4}
        MOV     a3, v6
        ADD     a2, sp, #56
        MOV     a4, #0
        MOV     a1, #512
        BL      xosspriteop_switch_output_to_mask
        ADD     sp, sp, #16
        MOVS    v1, a1
        BNE     |L000318.J8.Text_System|
        MOV     v3, #1
        LDR     a1, [pc, #L000344-.-8]
        LDR     ip, [sl, #0]
        ADD     a1, ip, a1
        MOV     a2, #3
        BL      xos_writen
        MOVS    v1, a1
        BNE     |L000318.J8.Text_System|
        MOV     a3, #32
        MOV     a2, #0
        MOV     a1, #4
        BL      xos_plot
        MOVS    v1, a1
        BNE     |L000318.J8.Text_System|
        LDR     a1, [fp, #-48]
        LDRB    a1, [a1, v2]
        BL      xos_writec
        MOVS    v1, a1
        BNE     |L000318.J8.Text_System|
        LDR     a1, [sp, #192]
        LDR     a2, [sp, #188]
        LDR     a3, [sp, #184]
        LDR     a4, [sp, #180]
        BL      xosspriteop_unswitch_output
        MOVS    v1, a1
        BNE     |L000318.J8.Text_System|
        MOV     v3, #0
        MOV     a1, v6
        MOV     a2, sp
        BL      Sprite
        MOVS    v1, a1
        BNE     |L000318.J8.Text_System|
        LDR     a1, [v4, #0]
        LDR     a2, [sp, #24]
        ADD     a1, a1, a2
        STR     a1, [v4, #0]
        LDR     a1, [v5, #0]
        LDR     a2, [sp, #28]
        ADD     a1, a1, a2
        STR     a1, [v5, #0]
        ADD     v2, v2, #1
|L00030c.J5.Text_System|
        LDR     a1, [sp, #196]
        CMPS    v2, a1
        BLT     |L000234.J4.Text_System|
|L000318.J8.Text_System|
        CMPS    v3, #0
        BEQ     |L00033c.J20.Text_System|
        LDR     a1, [sp, #192]
        LDR     a2, [sp, #188]
        LDR     a3, [sp, #184]
        LDR     a4, [sp, #180]
        BL      xosspriteop_unswitch_output
        CMPS    v1, #0
        MOVEQ   v1, a1
|L00033c.J20.Text_System|
        MOV     a1, v1
        LDMEA   fp, {v1,v2,v3,v4,v5,v6,fp,sp,pc}^
L000344
        DCD     |x$dataseg|+&94

        IMPORT  trfm_point
        IMPORT  xcolourtrans_set_gcol
Bbox
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,v4,v5,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        MOV     v1, a2
        MOV     v5, #0
        SUB     sp, sp, #64
        LDR     a2, [pc, #L000498-.-8]
        LDR     ip, [sl, #0]
        ADD     a2, ip, a2
        LDMEA   a2, {a2,a4,ip}
        STMFD   sp!, {a2,a4,ip}
        LDR     a2, [a1, #0]
        STR     a2, [sp, #44]
        LDR     a2, [a1, #4]
        STR     a2, [sp, #48]
        LDR     a2, [a1, #8]
        STR     a2, [sp, #52]
        LDR     a2, [a1, #4]
        STR     a2, [sp, #56]
        LDR     a2, [a1, #8]
        STR     a2, [sp, #60]
        LDR     a2, [a1, #12]
        STR     a2, [sp, #64]
        LDR     a2, [a1, #0]
        STR     a2, [sp, #68]
        LDR     a1, [a1, #12]
        STR     a1, [sp, #72]
        MOV     v2, v5
|L0003c0.J4.Bbox|
        ADD     a1, sp, #44
        ADD     a3, a1, v2, ASL #3
        ADD     a1, sp, #12
        ADD     a1, a1, v2, ASL #3
        MOV     v3, a1
        MOV     v4, a1
        MOV     a2, v1
        BL      trfm_point
        LDR     a1, [v4, #0]
        CMPS    a1, #0
        ADDLE   a1, a1, #255
        MOV     a1, a1, ASR #8
        STR     a1, [v3, #0]
        LDR     a1, [v3, #4]
        CMPS    a1, #0
        ADDLE   a1, a1, #255
        MOV     a1, a1, ASR #8
        STR     a1, [v3, #4]
        ADD     v2, v2, #1
        CMPS    v2, #4
        BLT     |L0003c0.J4.Bbox|
        MOV     a4, #0
        STMFD   sp!, {a4}
        MOV     a4, #0
        MOV     a3, #0
        MOV     a2, #0
        MOV     a1, #&dd00
        BL      xcolourtrans_set_gcol
        ADD     sp, sp, #4
        CMPS    a1, #0
        BNE     |L000494.J25.Bbox|
        MOV     a1, sp
        MOV     a2, #10
        BL      xos_writen
        CMPS    a1, #0
        BNE     |L000494.J25.Bbox|
        ADD     a3, sp, #36
        LDMFD   a3, {a2,a3}
        MOV     a1, #4
        BL      xos_plot
        CMPS    a1, #0
        BNE     |L000494.J25.Bbox|
        MOV     v2, v5
|L00046c.J17.Bbox|
        ADD     a1, sp, #12
        ADD     a1, a1, v2, ASL #3
        LDMFD   a1, {a2,a3}
        MOV     a1, #21
        BL      xos_plot
        CMPS    a1, #0
        BNE     |L000494.J25.Bbox|
        ADD     v2, v2, #1
        CMPS    v2, #4
        BLT     |L00046c.J17.Bbox|
|L000494.J25.Bbox|
        LDMEA   fp, {v1,v2,v3,v4,v5,fp,sp,pc}^
L000498
        DCD     |x$dataseg|+&a4

        IMPORT  trfm_det
        IMPORT  trfm_inv
        IMPORT  trfm_box
        IMPORT  callback
        EXPORT  render
render
        MOV     ip, sp
        STMFD   sp!, {a1,a2,a3,a4}
        STMFD   sp!, {v1,v2,v3,v4,v5,v6,fp,ip,lr,pc}
        SUB     fp, ip, #20
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        MOV     v3, a1
        MOV     v2, a2
        MOV     v1, a4
        ADD     v6, fp, #20
        LDMFD   v6, {v5,v6}
        SUB     sp, sp, #52
        CMPS    v5, #0
        BEQ     |L0004ec.J5.render|
        MOV     a1, v1
        BL      trfm_det
        CMPS    a1, #0
        BEQ     |L0004ec.J5.render|
        MOV     v4, #1
        B       |L0004f0.J4.render|
|L0004ec.J5.render|
        MOV     v4, #0
|L0004f0.J4.render|
        CMPS    v4, #0
        BEQ     |L000538.J8.render|
        SUB     sp, sp, #40
        MOV     a1, #0
|L000500.J10.render|
        LDR     a2, [v5, a1, ASL #2]
        MOV     a3, a2, ASL #8
        STR     a3, [sp, a1, ASL #2]
        ADD     a1, a1, #1
        CMPS    a1, #4
        BLT     |L000500.J10.render|
        MOV     a2, v1
        ADD     a1, sp, #16
        BL      trfm_inv
        MOV     a3, sp
        ADD     a2, sp, #16
        ADD     a1, sp, #40
        BL      trfm_box
        ADD     sp, sp, #40
|L000538.J8.render|
        STR     v2, [sp, #20]
        MOV     a1, #0
        STR     a1, [sp, #24]
        STR     v1, [sp, #32]
        STR     v3, [sp, #28]
        CMPS    v4, #0
        MOVEQ   a1, #0
        MOVNE   a1, sp
        STR     a1, [sp, #36]
        ANDS    a1, v3, #4
        BNE     |L000568.J15.render|
        MOV     v6, #128
|L000568.J15.render|
        STR     v6, [sp, #40]
        MOV     a1, #0
        STR     a1, [sp, #44]
        LDR     a1, [fp, #12]
        ADD     v1, v2, a1
        ADD     a1, v2, #40
        STR     a1, [sp, #48]
        LDR     v2, [pc, #L000594-.-8]
        LDR     ip, [sl, #0]
        ADD     v2, ip, v2
        B       |L0005c8.J19.render|
L000594
        IMPORT  main_render_callback
        DCD     main_render_callback
|L000598.J18.render|
        STR     a1, [sp, #16]
        LDR     a4, [a1, #0]
        ADD     a2, sp, #16
        LDR     a1, [v2, #0]
        MOV     a3, #1
        BL      callback
        ADD     a1, sp, #48
        LDR     a2, [sp, #48]
        LDR     a3, [a2, #4]
        LDR     a2, [a1, #0]
        ADD     a2, a3, a2
        STR     a2, [a1, #0]
|L0005c8.J19.render|
        LDR     a1, [sp, #48]
        CMPS    a1, v1
        BLT     |L000598.J18.render|
        LDR     a1, [sp, #44]
        LDMEA   fp, {v1,v2,v3,v4,v5,v6,fp,sp,pc}^

        EXPORT  render_font_table
render_font_table
        MOV     a1, a2
        MOV     a3, #0
        MOV     a2, a3
        LDR     a4, [a1, #0]
        STR     a4, [a1, #8]
        LDR     a4, [a1, #28]
        CMPS    a4, #0
        STREQ   a2, [a1, #28]
        CMPS    a2, #0
        MOVNE   a1, a3
        MOVEQ   a1, #1
        MOVS    pc, lr

        IMPORT  verify_overlap
        IMPORT  |x$divide|
        IMPORT  trfm_mul
        EXPORT  render_text_system
render_text_system
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,v4,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        SUB     sp, sp, #48
        MOV     v3, #0
        MOV     v2, v3
        MOV     v1, a2
        LDR     a1, [v1, #20]
        CMPS    a1, #0
        BEQ     |L000654.J5.render_text_system|
        LDR     a1, [v1, #0]
        ADD     a2, a1, #8
        LDR     a1, [v1, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L000774.J21.render_text_system|
|L000654.J5.render_text_system|
        LDR     a1, [v1, #0]
        ADD     a1, a1, #52
        BL      strlen
        MOV     v4, a1
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #1
        BEQ     |L000680.J8.render_text_system|
        LDR     a1, [v1, #0]
        LDR     a2, [v1, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L000680.J8.render_text_system|
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #24]
        CMNS    a2, #1
        BEQ     |L000774.J21.render_text_system|
        LDR     a2, [v1, #12]
        ANDS    a2, a2, #2
        BNE     |L000774.J21.render_text_system|
        CMPS    v4, #0
        BLE     |L000774.J21.render_text_system|
        LDRB    a2, [a1, #32]
        CMPS    a2, #0
        BNE     |L0006fc.J14.render_text_system|
        LDR     a1, [a1, #36]
        MOV     a1, a1, ASL #4
        STMEA   sp, {a1,v3}
        STR     v3, [sp, #8]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #40]
        MOV     a1, a1, ASL #3
        STR     a1, [sp, #12]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #44]
        STR     a1, [sp, #16]
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #48]
        LDR     a1, [a1, #40]
        CMPS    a1, #0
        ADDLE   a1, a1, #7
        MOV     a1, a1, ASR #3
        SUB     a1, a2, a1
        B       |L000748.J31.render_text_system|
|L0006fc.J14.render_text_system|
        LDR     a2, [a1, #16]
        LDR     a1, [a1, #8]
        SUB     a1, a2, a1
        MOV     a2, a1, ASL #4
        MOV     a1, v4
        BL      |x$divide|
        STMEA   sp, {a1,v3}
        STR     v3, [sp, #8]
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #20]
        LDR     a1, [a1, #12]
        SUB     a1, a2, a1
        MOV     a1, a1, ASL #3
        STR     a1, [sp, #12]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #8]
        STR     a1, [sp, #16]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #12]
|L000748.J31.render_text_system|
        STR     a1, [sp, #20]
        LDR     a2, [v1, #16]
        MOV     a3, sp
        ADD     a1, sp, #24
        BL      trfm_mul
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #24]
        ADD     a1, a1, #52
        ADD     a3, sp, #24
        BL      Text_System
        MOVS    v2, a1
|L000774.J21.render_text_system|
        LDR     a1, [v1, #28]
        CMPS    a1, #0
        STREQ   v2, [v1, #28]
        CMPS    v2, #0
        MOVNE   a1, v3
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,v4,fp,sp,pc}^

        IMPORT  verify_lookup_font_index
        IMPORT  xfont_find_font
        IMPORT  xcolourtrans_set_font_colours
        IMPORT  xfont_paint
        IMPORT  xfont_lose_font
        EXPORT  render_text
render_text
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,v4,v5,v6,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        LDR     a1, [a2, #0]
        LDRB    a1, [a1, #32]
        CMPS    a1, #0
        MOVEQ   a1, #0
        LDMEQEA fp, {v1,v2,v3,v4,v5,v6,fp,sp,pc}^
        SUB     sp, sp, #36
        MOV     v2, a2
        MOV     v5, #0
        MOV     v1, v5
        MOV     v4, v5
        LDR     a1, [v2, #20]
        CMPS    a1, #0
        BEQ     |L0007f0.J8.render_text|
        LDR     a1, [v2, #0]
        ADD     a2, a1, #8
        LDR     a1, [v2, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L000944.J18.render_text|
|L0007f0.J8.render_text|
        LDR     a1, [v2, #12]
        ANDS    a1, a1, #1
        BEQ     |L00080c.J11.render_text|
        LDR     a1, [v2, #0]
        LDR     a2, [v2, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L00080c.J11.render_text|
        LDR     a1, [v2, #0]
        LDR     a2, [v2, #8]
        LDRB    a1, [a1, #32]
        BL      verify_lookup_font_index
        MOV     v6, a1
        LDR     v3, [v2, #0]
        LDR     a1, [v3, #24]
        CMNS    a1, #1
        BEQ     |L000944.J18.render_text|
        LDR     a1, [v2, #12]
        ANDS    a1, a1, #2
        BNE     |L000944.J18.render_text|
        MOV     a4, #0
        MOV     a3, #0
        ADD     a2, sp, #32
        MOV     a1, #0
        STMFD   sp!, {a1,a2,a3,a4}
        LDR     a2, [v3, #40]
        MOV     a1, #40
        BL      |x$divide|
        MOV     v1, a1
        LDR     a2, [v3, #36]
        MOV     a1, #40
        BL      |x$divide|
        MOV     a2, a1
        MOV     a1, v6
        MOV     a4, #0
        MOV     a3, v1
        BL      xfont_find_font
        ADD     sp, sp, #16
        MOVS    v1, a1
        BNE     |L000944.J18.render_text|
        MOV     v4, #1
        MOV     a4, #0
        MOV     a3, #0
        MOV     a2, #0
        STMFD   sp!, {a2,a3,a4}
        LDR     a1, [v2, #0]
        LDR     a2, [a1, #28]
        LDR     a3, [a1, #24]
        LDRB    a1, [sp, #44]
        MOV     a4, #14
        BL      xcolourtrans_set_font_colours
        ADD     sp, sp, #12
        MOVS    v1, a1
        BNE     |L000944.J18.render_text|
        ADD     a1, sp, #8
        LDR     a2, [v2, #16]
        LDMFD   a2!, {a3,a4,ip,lr}
        STMEA   a1!, {a3,a4,ip,lr}
        LDMFD   a2, {ip,lr}
        STMEA   a1, {ip,lr}
        STR     v5, [sp, #24]
        STR     v5, [sp, #28]
        LDR     a1, [v2, #0]
        ADD     a3, a1, #44
        LDR     a2, [v2, #16]
        MOV     a1, sp
        BL      trfm_point
        MOV     a4, #0
        ADD     a3, sp, #8
        MOV     a2, #0
        LDR     a1, [sp, #4]
        CMPS    a1, #0
        ADDLE   a1, a1, #255
        MOV     a1, a1, ASR #8
        STMFD   sp!, {a1,a2,a3,a4}
        LDR     a1, [v2, #0]
        ADD     a2, a1, #52
        LDR     a4, [sp, #16]
        CMPS    a4, #0
        ADDLE   a4, a4, #255
        MOV     a4, a4, ASR #8
        LDRB    a1, [sp, #48]
        MOV     a3, #336
        BL      xfont_paint
        ADD     sp, sp, #16
        MOVS    v1, a1
|L000944.J18.render_text|
        CMPS    v4, #0
        BEQ     |L00095c.J27.render_text|
        LDRB    a1, [sp, #32]
        BL      xfont_lose_font
        CMPS    v1, #0
        MOVEQ   v1, a1
|L00095c.J27.render_text|
        LDR     a1, [v2, #28]
        CMPS    a1, #0
        STREQ   v1, [v2, #28]
        CMPS    v1, #0
        MOVNE   a1, v5
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,v4,v5,v6,fp,sp,pc}^

        IMPORT  xdraw_fill
        IMPORT  xdraw_stroke
        EXPORT  render_path
render_path
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,v4,v5,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        SUB     sp, sp, #16
        MOV     v3, #0
        MOV     v2, v3
        MOV     v1, a2
        LDR     a1, [v1, #20]
        CMPS    a1, #0
        BEQ     |L0009c0.J5.render_path|
        LDR     a1, [v1, #0]
        ADD     a2, a1, #8
        LDR     a1, [v1, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L000b68.J19.render_path|
|L0009c0.J5.render_path|
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #1
        BEQ     |L0009dc.J8.render_path|
        LDR     a1, [v1, #0]
        LDR     a2, [v1, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L0009dc.J8.render_path|
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #2
        BNE     |L000b68.J19.render_path|
        LDR     a1, [v1, #0]
        LDRB    a1, [a1, #36]
        AND     a1, a1, #3
        STRB    a1, [sp, #0]
        LDR     a1, [v1, #0]
        LDRB    a2, [a1, #36]
        MOV     a1, #48
        AND     a1, a1, a2, ASR #4
        STRB    a1, [sp, #2]
        LDR     a1, [v1, #0]
        LDRB    a2, [a1, #36]
        MOV     a1, #12
        AND     a1, a1, a2, ASR #2
        STRB    a1, [sp, #1]
        STRB    v3, [sp, #3]
        MOV     a1, #&a0000
        STR     a1, [sp, #4]
        LDR     a1, [v1, #0]
        LDRB    a1, [a1, #38]
        MOV     a2, a1, ASL #4
        STRB    a2, [sp, #12]
        MOV     a1, a2, ASR #8
        STRB    a1, [sp, #13]
        STRB    a2, [sp, #8]
        STRB    a1, [sp, #9]
        LDR     a1, [v1, #0]
        LDRB    a1, [a1, #39]
        MOV     a2, a1, ASL #4
        STRB    a2, [sp, #14]
        MOV     a1, a2, ASR #8
        STRB    a1, [sp, #15]
        STRB    a2, [sp, #10]
        STRB    a1, [sp, #11]
        LDR     a1, [v1, #0]
        LDRB    a2, [a1, #36]
        ANDS    a2, a2, #128
        BEQ     |L000a98.J12.render_path|
        ADD     a2, a1, #40
        MOV     v5, a2
        LDR     a4, [a2, #4]
        MOV     a3, #8
        ADD     a3, a3, a4, ASL #2
        ADD     v4, a3, a2
        B       |L000aa0.J14.render_path|
|L000a98.J12.render_path|
        MOV     v5, v3
        ADD     v4, a1, #40
|L000aa0.J14.render_path|
        LDR     a1, [a1, #24]
        CMNS    a1, #1
        BEQ     |L000b00.J15.render_path|
        MOV     a4, #0
        STMFD   sp!, {a4}
        MOV     a4, #0
        MOV     a3, #0
        MOV     a2, #256
        BL      xcolourtrans_set_gcol
        ADD     sp, sp, #4
        MOVS    v2, a1
        BNE     |L000b68.J19.render_path|
        LDR     a1, [v1, #0]
        LDR     a3, [v1, #16]
        LDR     a4, [v1, #24]
        LDRB    a1, [a1, #36]
        ANDS    a1, a1, #64
        MOVEQ   a1, v3
        MOVNE   a1, #2
        ORR     a2, a1, #48
        MOV     a1, v4
        BL      xdraw_fill
        MOVS    v2, a1
        BNE     |L000b68.J19.render_path|
|L000b00.J15.render_path|
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #28]
        CMNS    a1, #1
        BEQ     |L000b68.J19.render_path|
        MOV     a4, #0
        STMFD   sp!, {a4}
        MOV     a4, #0
        MOV     a3, #0
        MOV     a2, #256
        BL      xcolourtrans_set_gcol
        ADD     sp, sp, #4
        MOVS    v2, a1
        BNE     |L000b68.J19.render_path|
        MOV     a4, v5
        MOV     a3, sp
        STMFD   sp!, {a3,a4}
        LDR     a1, [v1, #0]
        LDR     a4, [a1, #32]
        STMFD   sp!, {a4}
        LDR     a3, [v1, #16]
        LDR     a4, [v1, #24]
        MOV     a1, v4
        MOV     a2, #56
        BL      xdraw_stroke
        ADD     sp, sp, #12
        MOVS    v2, a1
|L000b68.J19.render_path|
        LDR     a1, [v1, #28]
        CMPS    a1, #0
        STREQ   v2, [v1, #28]
        CMPS    v2, #0
        MOVNE   a1, v3
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,v4,v5,fp,sp,pc}^

        IMPORT  xosspriteop_read_sprite_size
        IMPORT  muldiv
        EXPORT  render_sprite
render_sprite
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        SUB     sp, sp, #72
        MOV     v3, #0
        MOV     v2, v3
        MOV     v1, a2
        LDR     a1, [v1, #20]
        CMPS    a1, #0
        BEQ     |L000bcc.J5.render_sprite|
        LDR     a1, [v1, #0]
        ADD     a2, a1, #8
        LDR     a1, [v1, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L000d70.J12.render_sprite|
|L000bcc.J5.render_sprite|
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #1
        BEQ     |L000be8.J8.render_sprite|
        LDR     a1, [v1, #0]
        LDR     a2, [v1, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L000be8.J8.render_sprite|
        MOV     a4, #0
        MOV     a3, #0
        ADD     a2, sp, #56
        STMFD   sp!, {a2,a3,a4}
        LDR     a1, [v1, #0]
        ADD     a3, a1, #24
        ADD     a4, sp, #72
        MOV     a2, #255
        MOV     a1, #512
        BL      xosspriteop_read_sprite_size
        ADD     sp, sp, #12
        MOVS    v2, a1
        BNE     |L000d70.J12.render_sprite|
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #2
        BNE     |L000d70.J12.render_sprite|
        LDR     a1, [sp, #60]
        CMPS    a1, #0
        BLE     |L000d70.J12.render_sprite|
        LDR     a1, [sp, #56]
        CMPS    a1, #0
        BLE     |L000d70.J12.render_sprite|
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #64]
        ADD     a4, sp, #52
        ADD     a3, sp, #68
        MOV     a2, #4
        BL      xos_read_mode_variable
        MOVS    v2, a1
        BNE     |L000d70.J12.render_sprite|
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #64]
        ADD     a4, sp, #48
        ADD     a3, sp, #64
        MOV     a2, #5
        BL      xos_read_mode_variable
        MOVS    v2, a1
        BNE     |L000d70.J12.render_sprite|
        LDR     a1, [sp, #52]
        LDR     a2, [sp, #48]
        ORR     a1, a1, a2
        ANDS    a1, a1, #&20000000
        BEQ     |L000cd8.J21.render_sprite|
        SUB     sp, sp, #12
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #64]
        MOV     a1, sp
        MOV     a4, #1
        MOV     a3, #0
        BL      riscos_format_dec
        MOV     a3, a1
        ADD     a2, pc, #L000cd0-.-8
        MOV     a1, #4
        ADD     a1, a1, #&20c00
        BL      main_error_lookup
        MOV     v2, a1
        ADD     sp, sp, #12
        B       |L000d70.J12.render_sprite|
L000cd0
        DCB     &42,&61,&64,&4d
        DCB     &6f,&64,&65,&00
|L000cd8.J21.render_sprite|
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #16]
        LDR     a1, [a1, #8]
        SUB     a1, a2, a1
        LDR     a2, [sp, #60]
        MOV     a3, a2, ASL #8
        LDR     a2, [sp, #68]
        MOV     a3, a3, ASL a2
        MOV     a2, #&10000
        BL      muldiv
        STMEA   sp, {a1,v3}
        STR     v3, [sp, #8]
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #20]
        LDR     a1, [a1, #12]
        SUB     a1, a2, a1
        LDR     a2, [sp, #56]
        MOV     a3, a2, ASL #8
        LDR     a2, [sp, #64]
        MOV     a3, a3, ASL a2
        MOV     a2, #&10000
        BL      muldiv
        STR     a1, [sp, #12]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #8]
        STR     a1, [sp, #16]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #12]
        STR     a1, [sp, #20]
        LDR     a2, [v1, #16]
        MOV     a3, sp
        ADD     a1, sp, #24
        BL      trfm_mul
        LDR     a1, [v1, #0]
        ADD     a1, a1, #24
        ADD     a2, sp, #24
        BL      Sprite
        MOVS    v2, a1
|L000d70.J12.render_sprite|
        LDR     a1, [v1, #28]
        CMPS    a1, #0
        STREQ   v2, [v1, #28]
        CMPS    v2, #0
        MOVNE   a1, v3
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,fp,sp,pc}^

        EXPORT  render_group
render_group
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,v4,v5,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        SUB     sp, sp, #4
        MOV     v3, #0
        MOV     v2, v3
        MOV     v1, a2
        LDR     a1, [v1, #20]
        CMPS    a1, #0
        BEQ     |L000dd4.J5.render_group|
        LDR     a1, [v1, #0]
        ADD     a2, a1, #8
        LDR     a1, [v1, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L000e50.J4.render_group|
|L000dd4.J5.render_group|
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #1
        BEQ     |L000df0.J8.render_group|
        LDR     a1, [v1, #0]
        LDR     a2, [v1, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L000df0.J8.render_group|
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #4]
        ADD     v4, a1, a2
        ADD     a1, a1, #36
        STR     a1, [sp, #0]
        LDR     v5, [pc, #L000594-.-8]
        LDR     ip, [sl, #0]
        ADD     v5, ip, v5
        B       |L000e44.J11.render_group|
|L000e14.J10.render_group|
        STR     a1, [v1, #0]
        LDR     a4, [a1, #0]
        MOV     a2, v1
        LDR     a1, [v5, #0]
        MOV     a3, #1
        BL      callback
        MOV     a1, sp
        LDR     a2, [sp, #0]
        LDR     a2, [a2, #4]
        LDR     a3, [a1, #0]
        ADD     a2, a2, a3
        STR     a2, [a1, #0]
|L000e44.J11.render_group|
        LDR     a1, [sp, #0]
        CMPS    a1, v4
        BLT     |L000e14.J10.render_group|
|L000e50.J4.render_group|
        LDR     a1, [v1, #28]
        CMPS    a1, #0
        STREQ   v2, [v1, #28]
        CMPS    v2, #0
        MOVNE   a1, v3
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,v4,v5,fp,sp,pc}^

        EXPORT  render_tagged
render_tagged
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        MOV     v3, #0
        MOV     v2, v3
        MOV     v1, a2
        LDR     a3, [v1, #0]
        ADD     a1, a3, #28
        MOV     a2, a1
        LDR     a4, [a3, #4]
        ADD     a3, a3, a4
        LDR     a4, [a1, #4]
        ADD     a1, a4, a1
        CMPS    a1, a3
        BLE     |L000ed0.J4.render_tagged|
        ADD     a2, pc, #L000ec8-.-8
        MOV     a1, #7
        ADD     a1, a1, #&20c00
        BL      main_error_lookup
        MOV     v2, a1
        B       |L000ef4.J6.render_tagged|
L000ec8
        DCB     &42,&61,&64,&54
        DCB     &61,&67,&00,&00
|L000ed0.J4.render_tagged|
        STR     a2, [v1, #0]
        LDR     a4, [a2, #0]
        MOV     a2, v1
        LDR     a1, [pc, #L000594-.-8]
        LDR     ip, [sl, #0]
        ADD     a1, ip, a1
        LDR     a1, [a1, #0]
        MOV     a3, #1
        BL      callback
|L000ef4.J6.render_tagged|
        LDR     a1, [v1, #28]
        CMPS    a1, #0
        STREQ   v2, [v1, #28]
        CMPS    v2, #0
        MOVNE   a1, v3
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,fp,sp,pc}^

        IMPORT  textarea_render
        EXPORT  render_text_area
render_text_area
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        MOV     v3, #0
        MOV     v2, v3
        MOV     v1, a2
        LDR     a1, [v1, #20]
        CMPS    a1, #0
        BEQ     |L000f54.J5.render_text_area|
        LDR     a1, [v1, #0]
        ADD     a2, a1, #8
        LDR     a1, [v1, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L000f90.J14.render_text_area|
|L000f54.J5.render_text_area|
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #1
        BEQ     |L000f70.J8.render_text_area|
        LDR     a1, [v1, #0]
        LDR     a2, [v1, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L000f70.J8.render_text_area|
        LDR     a4, [v1, #12]
        ANDS    a1, a4, #2
        BNE     |L000f90.J14.render_text_area|
        LDR     a1, [v1, #0]
        ADD     a3, v1, #16
        LDMFD   a3, {a2,a3}
        BL      textarea_render
        MOVS    v2, a1
|L000f90.J14.render_text_area|
        LDR     a1, [v1, #28]
        CMPS    a1, #0
        STREQ   v2, [v1, #28]
        CMPS    v2, #0
        MOVNE   a1, v3
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,fp,sp,pc}^

        EXPORT  render_trfm_text_system
render_trfm_text_system
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,v4,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        SUB     sp, sp, #48
        MOV     v2, #0
        MOV     v3, v2
        MOV     v1, a2
        LDR     a1, [v1, #20]
        CMPS    a1, #0
        BEQ     |L000ff4.J5.render_trfm_text_system|
        LDR     a1, [v1, #0]
        ADD     a2, a1, #8
        LDR     a1, [v1, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L001168.J21.render_trfm_text_system|
|L000ff4.J5.render_trfm_text_system|
        LDR     a1, [v1, #0]
        ADD     a1, a1, #80
        BL      strlen
        MOV     v4, a1
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #1
        BEQ     |L001020.J8.render_trfm_text_system|
        LDR     a1, [v1, #0]
        LDR     a2, [v1, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L001020.J8.render_trfm_text_system|
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #52]
        CMNS    a2, #1
        BEQ     |L001168.J21.render_trfm_text_system|
        LDR     a2, [v1, #12]
        ANDS    a2, a2, #2
        BNE     |L001168.J21.render_trfm_text_system|
        CMPS    v4, #0
        BLE     |L001168.J21.render_trfm_text_system|
        LDRB    a2, [a1, #60]
        CMPS    a2, #0
        BNE     |L0010f0.J14.render_trfm_text_system|
        SUB     sp, sp, #48
        LDR     a1, [a1, #64]
        MOV     a1, a1, ASL #4
        STR     a1, [sp, #24]
        STR     v2, [sp, #28]
        STR     v2, [sp, #32]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #68]
        MOV     a1, a1, ASL #3
        STR     a1, [sp, #36]
        STR     v2, [sp, #40]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #68]
        RSB     a1, a1, #0
        CMPS    a1, #0
        ADDLE   a1, a1, #7
        MOV     a1, a1, ASR #3
        STR     a1, [sp, #44]
        LDR     a1, [v1, #0]
        ADD     a2, a1, #24
        ADD     a3, sp, #24
        MOV     a1, sp
        BL      trfm_mul
        MOV     a1, #&10000
        STR     a1, [sp, #24]
        STR     v2, [sp, #28]
        STR     a1, [sp, #36]
        STR     v2, [sp, #32]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #72]
        STR     a1, [sp, #40]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #76]
        STR     a1, [sp, #44]
        MOV     a3, sp
        ADD     a2, sp, #24
        ADD     a1, sp, #48
        BL      trfm_mul
        ADD     sp, sp, #48
        B       |L001140.J18.render_trfm_text_system|
|L0010f0.J14.render_trfm_text_system|
        LDR     a2, [a1, #16]
        LDR     a1, [a1, #8]
        SUB     a1, a2, a1
        MOV     a2, a1, ASL #4
        MOV     a1, v4
        BL      |x$divide|
        STMEA   sp, {a1,v2}
        STR     v2, [sp, #8]
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #20]
        LDR     a1, [a1, #12]
        SUB     a1, a2, a1
        MOV     a1, a1, ASL #3
        STR     a1, [sp, #12]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #8]
        STR     a1, [sp, #16]
        LDR     a1, [v1, #0]
        LDR     a1, [a1, #12]
        STR     a1, [sp, #20]
|L001140.J18.render_trfm_text_system|
        LDR     a2, [v1, #16]
        MOV     a3, sp
        ADD     a1, sp, #24
        BL      trfm_mul
        LDR     a1, [v1, #0]
        LDR     a2, [a1, #52]
        ADD     a1, a1, #80
        ADD     a3, sp, #24
        BL      Text_System
        MOVS    v3, a1
|L001168.J21.render_trfm_text_system|
        LDR     a1, [v1, #28]
        CMPS    a1, #0
        STREQ   v3, [v1, #28]
        CMPS    v3, #0
        MOVNE   a1, v2
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,v4,fp,sp,pc}^

        IMPORT  memcpy
        EXPORT  render_trfm_text
render_trfm_text
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,v4,v5,v6,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        LDR     a1, [a2, #0]
        LDRB    a1, [a1, #60]
        CMPS    a1, #0
        MOVEQ   a1, #0
        LDMEQEA fp, {v1,v2,v3,v4,v5,v6,fp,sp,pc}^
        SUB     sp, sp, #36
        MOV     v3, #0
        MOV     v5, v3
        MOV     v1, v3
        MOV     v2, a2
        LDR     a1, [v2, #20]
        CMPS    a1, #0
        BEQ     |L0011e4.J8.render_trfm_text|
        LDR     a1, [v2, #0]
        ADD     a2, a1, #8
        LDR     a1, [v2, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L0013e8.J18.render_trfm_text|
|L0011e4.J8.render_trfm_text|
        LDR     a1, [v2, #12]
        ANDS    a1, a1, #1
        BEQ     |L001200.J11.render_trfm_text|
        LDR     a1, [v2, #0]
        LDR     a2, [v2, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L001200.J11.render_trfm_text|
        LDR     a1, [v2, #0]
        LDR     a2, [v2, #8]
        LDRB    a1, [a1, #60]
        BL      verify_lookup_font_index
        MOV     v6, a1
        LDR     v4, [v2, #0]
        LDR     a1, [v4, #52]
        CMNS    a1, #1
        BEQ     |L0013e8.J18.render_trfm_text|
        LDR     a1, [v2, #12]
        ANDS    a1, a1, #2
        BNE     |L0013e8.J18.render_trfm_text|
        SUB     sp, sp, #4
        MOV     a4, #0
        MOV     a3, #0
        ADD     a2, sp, #36
        MOV     a1, #0
        STMFD   sp!, {a1,a2,a3,a4}
        LDR     a2, [v4, #68]
        MOV     a1, #40
        BL      |x$divide|
        MOV     v1, a1
        LDR     a2, [v4, #64]
        MOV     a1, #40
        BL      |x$divide|
        MOV     a2, a1
        MOV     a1, v6
        MOV     a4, #0
        MOV     a3, v1
        BL      xfont_find_font
        ADD     sp, sp, #16
        MOVS    v1, a1
        BNE     |L0013e4.J39.render_trfm_text|
        MOV     v5, #1
        MOV     a4, #0
        MOV     a3, #0
        MOV     a2, #0
        STMFD   sp!, {a2,a3,a4}
        LDR     a1, [v2, #0]
        LDR     a2, [a1, #56]
        LDR     a3, [a1, #52]
        LDRB    a1, [sp, #48]
        MOV     a4, #14
        BL      xcolourtrans_set_font_colours
        ADD     sp, sp, #12
        MOVS    v1, a1
        BNE     |L0013e4.J39.render_trfm_text|
        LDR     a1, [v2, #0]
        ADD     a3, a1, #24
        LDR     a2, [v2, #16]
        ADD     a1, sp, #12
        BL      trfm_mul
        ADD     a1, sp, #28
        LDR     a2, [a1, #0]
        CMPS    a2, #0
        ADDLE   a2, a2, #255
        MOV     a2, a2, ASR #8
        STR     a2, [a1, #0]
        ADD     a1, sp, #32
        LDR     a2, [a1, #0]
        CMPS    a2, #0
        ADDLE   a2, a2, #255
        MOV     a2, a2, ASR #8
        STR     a2, [a1, #0]
        LDR     a1, [v2, #0]
        ADD     a3, a1, #72
        LDR     a2, [v2, #16]
        ADD     a1, sp, #4
        BL      trfm_point
        LDR     a1, [v2, #0]
        ADD     v4, a1, #80
        LDR     a1, [a1, #48]
        ANDS    a1, a1, #4
        BEQ     |L001354.J25.render_trfm_text|
        SUB     a2, v4, #3
        MOV     v4, a2
        MOV     a1, sp
        MOV     a3, #3
        BL      memcpy
        MOV     a1, #25
        STRB    a1, [v4, #0]
        MOV     a1, #231
        STRB    a1, [v4, #1]
        MOV     a1, #15
        STRB    a1, [v4, #2]
|L001354.J25.render_trfm_text|
        MOV     a4, #0
        ADD     a3, sp, #12
        MOV     a2, #0
        LDR     a1, [sp, #8]
        CMPS    a1, #0
        ADDLE   a1, a1, #255
        MOV     a1, a1, ASR #8
        STMFD   sp!, {a1,a2,a3,a4}
        LDR     a1, [v2, #0]
        LDR     a1, [a1, #48]
        ANDS    a2, a1, #1
        MOVEQ   a2, v3
        MOVNE   a2, #512
        ORR     a2, a2, #336
        ANDS    a1, a1, #2
        MOVEQ   a1, v3
        MOVNE   a1, #1024
        ORR     a3, a2, a1
        LDR     a4, [sp, #20]
        CMPS    a4, #0
        ADDLE   a4, a4, #255
        MOV     a4, a4, ASR #8
        MOV     a2, v4
        LDRB    a1, [sp, #52]
        BL      xfont_paint
        ADD     sp, sp, #16
        MOV     v1, a1
        LDR     a1, [v2, #0]
        LDR     a1, [a1, #48]
        ANDS    a1, a1, #4
        BEQ     |L0013e0.J37.render_trfm_text|
        MOV     a2, sp
        MOV     a1, v4
        MOV     a3, #3
        BL      memcpy
|L0013e0.J37.render_trfm_text|
        CMPS    v1, #0
|L0013e4.J39.render_trfm_text|
        ADD     sp, sp, #4
|L0013e8.J18.render_trfm_text|
        CMPS    v5, #0
        BEQ     |L001400.J41.render_trfm_text|
        LDRB    a1, [sp, #32]
        BL      xfont_lose_font
        CMPS    v1, #0
        MOVEQ   v1, a1
|L001400.J41.render_trfm_text|
        LDR     a1, [v2, #28]
        CMPS    a1, #0
        STREQ   v1, [v2, #28]
        CMPS    v1, #0
        MOVNE   a1, v3
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,v4,v5,v6,fp,sp,pc}^

        EXPORT  render_trfm_sprite
render_trfm_sprite
        MOV     ip, sp
        STMFD   sp!, {v1,v2,v3,fp,ip,lr,pc}
        SUB     fp, ip, #4
        CMPS    sp, sl
        BLLT    |x$stack_overflow|
        SUB     sp, sp, #24
        MOV     v3, #0
        MOV     v2, v3
        MOV     v1, a2
        LDR     a1, [v1, #20]
        CMPS    a1, #0
        BEQ     |L001464.J5.render_trfm_sprite|
        LDR     a1, [v1, #0]
        ADD     a2, a1, #8
        LDR     a1, [v1, #20]
        BL      verify_overlap
        CMPS    a1, #0
        BEQ     |L0014b4.J14.render_trfm_sprite|
|L001464.J5.render_trfm_sprite|
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #1
        BEQ     |L001480.J8.render_trfm_sprite|
        LDR     a1, [v1, #0]
        LDR     a2, [v1, #16]
        ADD     a1, a1, #8
        BL      Bbox
|L001480.J8.render_trfm_sprite|
        LDR     a1, [v1, #12]
        ANDS    a1, a1, #2
        BNE     |L0014b4.J14.render_trfm_sprite|
        LDR     a1, [v1, #0]
        ADD     a3, a1, #24
        LDR     a2, [v1, #16]
        MOV     a1, sp
        BL      trfm_mul
        LDR     a1, [v1, #0]
        ADD     a1, a1, #48
        MOV     a2, sp
        BL      Sprite
        MOVS    v2, a1
|L0014b4.J14.render_trfm_sprite|
        LDR     a1, [v1, #28]
        CMPS    a1, #0
        STREQ   v2, [v1, #28]
        CMPS    v2, #0
        MOVNE   a1, v3
        MOVEQ   a1, #1
        LDMEA   fp, {v1,v2,v3,fp,sp,pc}^

        AREA |C$$data|

|x$dataseg|
        DCD     &0000008c
        DCD     &00000001
        DCD     &00000010
        DCD     &0000008c
        DCD     &0000007c
        DCD     &00000074
        %       8
        DCD     &00000000
        DCD     &00000007
        DCD     &00000000
        DCD     &00000007
        DCD     &0000003c
        DCD     &0000005c
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &00000000
        DCD     &ffffffff
        DCD     &ffffffff
        DCD     &ffffffff
        DCD     &ffffffff
        DCD     &ffffffff
        DCD     &ffffffff
        DCD     &ffffffff
        DCD     &ffffffff
        DCD     &00001000
        DCD     &00000000
        DCD     &00000012
        DCD     &00cc0617
        DCD     &00cc00cc
        DCD     &000000cc

        END
