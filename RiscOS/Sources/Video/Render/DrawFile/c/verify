/*verify.c - verify stuff*/

/*From CLib*/
#include <stddef.h>
#include <string.h>

/*From OSLib*/
#include "macros.h"
#include "os.h"

/*From Support*/
#include "riscos.h"
#include "trace.h"

/*Local*/
#include "drawfile.h"
#include "main.h"
#include "verify.h"

typedef
   struct
   {  drawfile_object *object;
      drawfile_diagram *diagram;
      drawfile_object *font_table;
   }
   State;

/*------------------------------------------------------------------------*/
bool verify_overlap (os_box *box1, os_box *box2)

{  return MAX (box1->x0, box2->x0) <= MIN (box1->x1, box2->x1) &&
         MAX (box1->y0, box2->y0) <= MIN (box1->y1, box2->y1);
}
/*------------------------------------------------------------------------*/
char *verify_lookup_font_index (byte font_no, drawfile_object *font_table)

{  drawfile_font_def *font_def, *end;

   end = (drawfile_font_def *) &((byte *) font_table) [font_table->size];

   for (font_def = font_table->data AS font_table.font_def; font_def < end
         && font_def->font_index != 0; *(byte **) &font_def +=
         drawfile_SIZEOF_FONT_DEF (strlen (font_def->font_name) + 1))
      if (font_def->font_index == font_no)
         return font_def->font_name;

   return NULL;
}
/*------------------------------------------------------------------------*/
os_error *verify_diagram (drawfile_diagram *diagram, int size)

{  os_error *error = NULL;
   State state;
   drawfile_object *o, *end;

   state.object     = NULL;
   state.diagram    = diagram;
   state.font_table = NULL;

   if (size < offsetof (drawfile_diagram, objects) ||
         *(int *) diagram->tag != *(int *) "Draw")
   {  error = main_error_lookup (error_DRAW_FILE_NOT_DRAW, "NotDraw");
      goto finish;
   }

   if (diagram->major_version > 201)
   {  char s [DEC_WIDTH + 1];

      error = main_error_lookup (error_DRAW_FILE_VERSION, "Version",
            riscos_format_dec (s, diagram->major_version, 0, 1));
      goto finish;
   }

   tracef ("verify: despatching\n");
   end = (drawfile_object *) &((byte *) diagram) [size];
   for (o = diagram->objects; o < end; *(byte **) &o += o->size)
   {  if ((drawfile_object *) &((byte *) o) [o->size] > end)
      {  error = main_error_lookup (error_DRAW_FILE_BAD_FILE, "BadFile");
         goto finish;
      }

      tracef ("verifying object type %d\n" _ o->type);
      state.object = o;
      if ((error = callback (main_verification_callback, &state, NULL, 1,
            o->type)) != NULL)
         goto finish;
   }

finish:
   /*If an error was found while an object was current, report it using the
      approved wording.*/
   if (error != NULL && state.object != NULL)
   {  char s [HEX_WIDTH + 1];

      error = main_error_lookup (error->errnum, "Error", error->errmess,
            riscos_format_hex (s, (char *) state.object -
            (char *) state.diagram, 0, 1));
   }

   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_font_table (void *null, void *s, bool *unclaimed)

{  State *state = (State *) s; /*save typing*/
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_font_table\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_FONT_TABLE);
   #else
      null = null;
   #endif

   /*Save the pointer.*/
   if (state->font_table != NULL)
   {  error = main_error_lookup (error_DRAW_FILE_FONT_TAB, "FontTab");
      goto finish;
   }

   state->font_table = state->object;

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_group (void *null, void *s, bool *unclaimed)

{  State *state = (State *) s /*save typing*/;
   drawfile_object *o, *end;
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_group\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_GROUP);
   #else
      null = null;
   #endif

   end = (drawfile_object *) &((byte *) state->object)
         [state->object->size];
   for (o = (drawfile_object *) &state->object->data AS group.objects;
         o < end; *(byte **) &o += o->size)
   {  tracef ("o 0x%X, end 0x%X\n" _ o _ end);

      if ((drawfile_object *) &((byte *) o) [o->size] > end)
      {  error = main_error_lookup (error_DRAW_FILE_BAD_GROUP, "BadGroup");
         goto finish;
      }

      tracef ("verifying object type %d\n" _ o->type);
      state->object = o;
      if ((error = callback (main_verification_callback, state, NULL, 1,
            o->type)) != NULL)
         goto finish;
   }
   tracef ("o 0x%X, end 0x%X\n" _ o _ end);

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_text (void *null, void *s, bool *unclaimed)

{  State *state = (State *) s; /*save typing*/
   char *font_name;
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_text\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_TEXT);
   #else
      null = null;
   #endif

   if (state->object->data AS text.style.font_index != font_SYSTEM)
   {  /*Check the font table pointer.*/
      if (state->font_table == NULL || (font_name = verify_lookup_font_index
            (state->object->data AS text.style.font_index,
            state->font_table)) == NULL)
      {  char s [DEC_WIDTH + 1];

         error = main_error_lookup (error_DRAW_FILE_BAD_FONT_NO,
               "BadFontNo", riscos_format_hex (s, state->object->data AS
               text.style.font_index, 0, 1));
         goto finish;
   }  }

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_tagged (void *null, void *s, bool *unclaimed)

{  State *state = (State *) s /*save typing*/;
   drawfile_object *o, *end;
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_tagged\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_TAGGED);
   #else
      null = null;
   #endif

   o = (drawfile_object *) &state->object->data AS tagged.object;
   end = (drawfile_object *) &((byte *) state->object)
         [state->object->size];
   if ((drawfile_object *) &((byte *) o) [o->size] > end)
   {  error = main_error_lookup (error_DRAW_FILE_BAD_TAG, "BadTag");
      goto finish;
   }

   tracef ("verifying object type %d\n" _ o->type);
   state->object = o;
   if ((error = callback (main_verification_callback, state, NULL, 1,
         o->type)) != NULL)
      goto finish;

finish:
   return error;
}
/*------------------------------------------------------------------------*/
os_error *verify_trfm_text (void *null, void *s, bool *unclaimed)

{  char *font_name;
   State *state = (State *) s; /*save typing*/
   os_error *error = NULL;

   NOT_USED (unclaimed)

   tracef ("verify_trfm_text\n");
   #ifdef TEST
      riscos_assert (null == NULL);
      riscos_assert (state->object->type == drawfile_TYPE_TRFM_TEXT);
   #else
      null = null;
   #endif

   if (state->object->data AS trfm_text.style.font_index != font_SYSTEM)
   {  /*Check the font table pointer.*/
      if (state->font_table == NULL || (font_name = verify_lookup_font_index
            (state->object->data AS trfm_text.style.font_index,
            state->font_table)) == NULL)
      {  char s [DEC_WIDTH + 1];

         error = main_error_lookup (error_DRAW_FILE_BAD_FONT_NO,
               "BadFontNo", riscos_format_dec (s, state->object->data AS
               trfm_text.style.font_index, 0, 1));
         goto finish;
   }  }

finish:
   return error;
}
