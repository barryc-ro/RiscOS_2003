
Diff directories 'Tools.DrawFile.c' and 'Share::VBox.$.Build4.Sources.OS_Core.Video.Render.DrawFile.c'

Diff files 'Tools.DrawFile.c.verify' and 'Render.DrawFile.c.verify'
Tools.DrawFile.c.verify and Render.DrawFile.c.verify identical

Diff files 'Tools.DrawFile.c.textarea' and 'Render.DrawFile.c.textarea'
change Tools.DrawFile.c.textarea, line 714 to 714
  line  714:                                font_GIVEN_TRFM | font_GIVEN_LENGTH | (state->flags & font_BLEND_FONT),
to Render.DrawFile.c.textarea, line 607 to 607
  line  607:                font_GIVEN_TRFM | font_GIVEN_LENGTH,
change Tools.DrawFile.c.textarea, line 724 to 724
  line  724:                                font_GIVEN_TRFM | font_GIVEN_LENGTH | (state->flags & font_BLEND_FONT), pt.x, pt.y,
to Render.DrawFile.c.textarea, line 617 to 617
  line  617:                font_GIVEN_TRFM | font_GIVEN_LENGTH, pt.x, pt.y,

Diff files 'Tools.DrawFile.c.render' and 'Render.DrawFile.c.render'
change Tools.DrawFile.c.render, line 54 to 55
  line   54:    /* The value '0' here (which allows the Draw module to use a
  line   55:       default of its own choice) results in poor rendering. */
to Render.DrawFile.c.render, line 62 to 63
  line   62:    /*The value '0' here (which allows the Draw module to use a default
  line   63:       of its own choice) results in poor rendering.*/
change Tools.DrawFile.c.render, line 60 to 61
  line   60: {
  line   61:   os_error *error = NULL;
to Render.DrawFile.c.render, line 68 to 68
  line   68:             {  os_error *error = NULL;
change Tools.DrawFile.c.render, line 69 to 70
  line   69: {
  line   70:     if ((error = xcolourtrans_select_table_for_sprite
to Render.DrawFile.c.render, line 76 to 76
  line   76:    {  if ((error = xcolourtrans_select_table_for_sprite
change Tools.DrawFile.c.render, line 88 to 89
  line   88: {
  line   89:       char s[DEC_WIDTH + 1];
to Render.DrawFile.c.render, line 94 to 94
  line   94:       {  char s [DEC_WIDTH + 1];
change Tools.DrawFile.c.render, line 101 to 102
  line  101: /* Fix MED-4786: use the right entries for palettes < 16 entries. J R 
  line  102:    C 6th Mar 1995 */
to Render.DrawFile.c.render, line 106 to 107
  line  106:       /*Fix MED-4786: use the right entries for palettes < 16 entries. J R C
  line  107:          6th Mar 1995*/
change Tools.DrawFile.c.render, line 104 to 105
  line  104: {
  line  105:     case 0:
to Render.DrawFile.c.render, line 109 to 109
  line  109:       {  case 0:
change Tools.DrawFile.c.render, line 135 to 136
  line  135:    /* Create a sprite, clear it to the text colour, and write the
  line  136:       character into the mask. */
to Render.DrawFile.c.render, line 139 to 140
  line  139:    /*Create a sprite, clear it to the text colour, and write the character
  line  140:       into the mask.*/
change Tools.DrawFile.c.render, line 138 to 139
  line  138: {
  line  139:   typedef
to Render.DrawFile.c.render, line 142 to 142
  line  142: {  typedef
change Tools.DrawFile.c.render, line 141 to 142
  line  141: {
  line  142:     osspriteop_area area;
to Render.DrawFile.c.render, line 144 to 144
  line  144:       {  osspriteop_area area;
change Tools.DrawFile.c.render, line 176 to 179
  line  176: {
  line  177:       { /* on */ SKIP,
  line  178:                                        /* off */ SKIP
  line  179:                                        /* filled in with real colour */
to Render.DrawFile.c.render, line 178 to 179
  line  178:       {  {  /*on*/        SKIP,
  line  179:             /*off*/       SKIP /*filled in with real colour*/
change Tools.DrawFile.c.render, line 182 to 183
  line  182:                                        /* off */ SKIP
  line  183:                                        /* never seen */
to Render.DrawFile.c.render, line 182 to 182
  line  182:             /*off*/       SKIP /*never seen*/
change Tools.DrawFile.c.render, line 194 to 195
  line  194:   os_coord base =
  line  195:   {16 * draw_OS_UNIT, 0}, step;
to Render.DrawFile.c.render, line 193 to 193
  line  193:    os_coord base = {16*draw_OS_UNIT, 0}, step;
change Tools.DrawFile.c.render, line 198 to 199
  line  198:   static char gcol0[] =
  line  199:   {os_VDU_SET_GCOL, os_ACTION_OVERWRITE, 0};
to Render.DrawFile.c.render, line 196 to 196
  line  196:    static char gcol0 [] = {os_VDU_SET_GCOL, os_ACTION_OVERWRITE, 0};
change Tools.DrawFile.c.render, line 210 to 211
  line  210: {
  line  211:     tracef("Text_System: osspriteop_switch_output_to_mask\n");
to Render.DrawFile.c.render, line 207 to 207
  line  207:    {  tracef ("Text_System: osspriteop_switch_output_to_mask\n");
change Tools.DrawFile.c.render, line 236 to 237
  line  236: /* Now we can plot the sprite. We use the internal sprite renderer
  line  237:    which makes a translation table. */
to Render.DrawFile.c.render, line 232 to 233
  line  232:       /*Now we can plot the sprite. We use the internal sprite renderer which
  line  233:          makes a translation table.*/
change Tools.DrawFile.c.render, line 248 to 249
  line  248: {
  line  249:     os_error *error1 = xosspriteop_unswitch_output(r0, r1, r2, r3);
to Render.DrawFile.c.render, line 244 to 244
  line  244:    {  os_error *error1 = xosspriteop_unswitch_output (r0, r1, r2, r3);
change Tools.DrawFile.c.render, line 251 to 252
  line  251:     if (error == NULL)
  line  252:       error = error1;
to Render.DrawFile.c.render, line 246 to 246
  line  246:       if (error == NULL) error = error1;
change Tools.DrawFile.c.render, line 259 to 260
  line  259: {
  line  260:   os_error *error = NULL;
to Render.DrawFile.c.render, line 253 to 253
  line  253:             {  os_error *error = NULL;
change Tools.DrawFile.c.render, line 263 to 264
  line  263:   char set_dot_style[] =
  line  264:   {os_VDU_MISC, os_MISC_SET_DOT_STYLE, 0xCC, 0,
to Render.DrawFile.c.render, line 256 to 256
  line  256:    char set_dot_style [] = {os_VDU_MISC, os_MISC_SET_DOT_STYLE, 0xCC, 0,
change Tools.DrawFile.c.render, line 273 to 274
  line  273: {
  line  274:     trfm_point(&t[i], trfm, &u[i]);
to Render.DrawFile.c.render, line 265 to 265
  line  265:    {  trfm_point (&t [i], trfm, &u [i]);
change Tools.DrawFile.c.render, line 300 to 301
  line  300: {
  line  301:   os_error *error = NULL;
to Render.DrawFile.c.render, line 291 to 291
  line  291:             {  os_error *error = NULL;
change Tools.DrawFile.c.render, line 311 to 315
  line  311:   {                                    /* Transform the clipping box
  line  312:                                           given back to the
  line  313:                                           coordinates it would have
  line  314:                                           had in paper coordinates,
  line  315:                                           and rebound it there. */
to Render.DrawFile.c.render, line 301 to 302
  line  301:    {  /*Transform the clipping box given back to the coordinates it would
  line  302:          have had in paper coordinates, and rebound it there.*/
change Tools.DrawFile.c.render, line 339 to 340
  line  339: {
  line  340:     state.object = o;
to Render.DrawFile.c.render, line 326 to 326
  line  326:    {  state.object = o;
change Tools.DrawFile.c.render, line 346 to 347
  line  346: {
  line  347:       if ((error = xservice_draw_object_render(o->type, &state, NULL)) !=
to Render.DrawFile.c.render, line 332 to 332
  line  332:       {  if ((error = xservice_draw_object_render (o->type, &state, NULL)) !=
change Tools.DrawFile.c.render, line 359 to 362
  line  359: {
  line  360:   os_error *error = NULL;
  line  361:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line  362:                                                                   typing */
to Render.DrawFile.c.render, line 344 to 345
  line  344:             {  os_error *error = NULL;
  line  345:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 378 to 379
  line  378:   if (state->error == NULL)
  line  379:     state->error = error;
to Render.DrawFile.c.render, line 361 to 361
  line  361:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 387 to 390
  line  387: {
  line  388:   os_error *error = NULL;
  line  389:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line  390:                                                                   typing */
to Render.DrawFile.c.render, line 369 to 370
  line  369:             {  os_error *error = NULL;
  line  370:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 403 to 404
  line  403: {
  line  404:     int len = strlen(text->text);
to Render.DrawFile.c.render, line 383 to 383
  line  383:    {  int len = strlen (text->text);
change Tools.DrawFile.c.render, line 411 to 422
  line  411:     {                                  /* If the text is REALLY in
  line  412:                                           system font, we honour the
  line  413:                                           baseline and size fields in 
  line  414:                                           the definition; otherwise,
  line  415:                                           we simply scale system text 
  line  416:                                           to fit inside the bbox the
  line  417:                                           font claims to have. This
  line  418:                                           gives better results than
  line  419:                                           Draw's treatment, since
  line  420:                                           system text is usually much 
  line  421:                                           wider for a given nominal x 
  line  422:                                           size than an outline font. */
to Render.DrawFile.c.render, line 390 to 395
  line  390:       {  /*If the text is REALLY in system font, we honour the baseline and
  line  391:             size fields in the definition; otherwise, we simply scale system
  line  392:             text to fit inside the bbox the font claims to have. This gives
  line  393:             better results than Draw's treatment, since system text is
  line  394:             usually much wider for a given nominal x size than an outline
  line  395:             font.*/
change Tools.DrawFile.c.render, line 425 to 427
  line  425:       {                                /* Get the trfm needed to
  line  426:                                           scale the text to paper
  line  427:                                           coords. */
to Render.DrawFile.c.render, line 398 to 398
  line  398:          {  /*Get the trfm needed to scale the text to paper coords.*/
change Tools.DrawFile.c.render, line 438 to 439
  line  438:       {                                /* Which trfm takes the text
  line  439:                                           into its bounding box? */
to Render.DrawFile.c.render, line 409 to 409
  line  409:          {  /*Which trfm takes the text into its bounding box?*/
change Tools.DrawFile.c.render, line 455 to 456
  line  455:   }
  line  456:   }
to Render.DrawFile.c.render, line 425 to 425
  line  425:    }  }
change Tools.DrawFile.c.render, line 461 to 462
  line  461:   if (state->error == NULL)
  line  462:     state->error = error;
to Render.DrawFile.c.render, line 430 to 430
  line  430:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 470 to 472
  line  470: {
  line  471:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line  472:                                                                   typing */
to Render.DrawFile.c.render, line 438 to 438
  line  438: {  drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 491 to 494
  line  491: {
  line  492:   if (state->clip == NULL || verify_overlap(state->clip, &text->bbox))
  line  493: {
  line  494:     if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
to Render.DrawFile.c.render, line 457 to 458
  line  457:    {  if (state->clip == NULL || verify_overlap (state->clip, &text->bbox))
  line  458:       {  if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
change Tools.DrawFile.c.render, line 506 to 507
  line  506: {
  line  507:         tracef("finding font \"%s\", size (%d, %d)\n" _
to Render.DrawFile.c.render, line 470 to 470
  line  470:          {  tracef ("finding font \"%s\", size (%d, %d)\n" _
change Tools.DrawFile.c.render, line 521 to 523
  line  521: /* For bitmapped fonts, the font manager can't cope with translations 
  line  522:    in the matrix ... so move the translation part out of the matrix
  line  523:    into the baseline origin. */
to Render.DrawFile.c.render, line 484 to 486
  line  484:             /*For bitmapped fonts, the font manager can't cope with
  line  485:                translations in the matrix ... so move the translation part
  line  486:                out of the matrix into the baseline origin.*/
change Tools.DrawFile.c.render, line 538 to 538
  line  538:                      font_GIVEN_TRFM | font_GIVEN_FONT | (state->flags & font_BLEND_FONT), base.x / draw_OS_UNIT,
to Render.DrawFile.c.render, line 501 to 501
  line  501:                   font_GIVEN_TRFM | font_GIVEN_FONT, base.x/draw_OS_UNIT,
change Tools.DrawFile.c.render, line 549 to 552
  line  549: {
  line  550:     os_error *error1 = xfont_lose_font(f);
  line  551:     if (error == NULL)
  line  552:       error = error1;
to Render.DrawFile.c.render, line 512 to 513
  line  512:    {  os_error *error1 = xfont_lose_font (f);
  line  513:       if (error == NULL) error = error1;
change Tools.DrawFile.c.render, line 555 to 556
  line  555:   if (state->error == NULL)
  line  556:     state->error = error;
to Render.DrawFile.c.render, line 516 to 516
  line  516:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 564 to 567
  line  564: {
  line  565:   os_error *error = NULL;
  line  566:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line  567:                                                                   typing */
to Render.DrawFile.c.render, line 524 to 525
  line  524:             {  os_error *error = NULL;
  line  525:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 583 to 584
  line  583: {
  line  584:     tracef("clipping rectangle given as ((%d, %d), (%d, %d))\n" _
to Render.DrawFile.c.render, line 541 to 541
  line  541:    {  tracef ("clipping rectangle given as ((%d, %d), (%d, %d))\n" _
change Tools.DrawFile.c.render, line 596 to 597
  line  596: {
  line  597:     if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
to Render.DrawFile.c.render, line 553 to 553
  line  553:       {  if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
change Tools.DrawFile.c.render, line 601 to 602
  line  601: {
  line  602:   int i;
to Render.DrawFile.c.render, line 557 to 557
  line  557:    {  int i;
change Tools.DrawFile.c.render, line 611 to 613
  line  611:     {                                  /* Convert the
  line  612:                                           drawfile_path_style into a
  line  613:                                           draw_line_style. */
to Render.DrawFile.c.render, line 566 to 566
  line  566:       {  /*Convert the drawfile_path_style into a draw_line_style.*/
change Tools.DrawFile.c.render, line 631 to 632
  line  631: {
  line  632:         pattern = &state->object->data AS path_with_pattern.pattern;
to Render.DrawFile.c.render, line 584 to 584
  line  584:          {  pattern = &state->object->data AS path_with_pattern.pattern;
change Tools.DrawFile.c.render, line 637 to 638
  line  637: {
  line  638:         pattern = NULL;
to Render.DrawFile.c.render, line 589 to 589
  line  589:          {  pattern = NULL;
change Tools.DrawFile.c.render, line 643 to 644
  line  643: {
  line  644:         if ((error = xcolourtrans_set_gcol(path->fill,
to Render.DrawFile.c.render, line 594 to 594
  line  594:          {  if ((error = xcolourtrans_set_gcol (path->fill,
change Tools.DrawFile.c.render, line 658 to 659
  line  658: {
  line  659:         if ((error = xcolourtrans_set_gcol(path->outline,
to Render.DrawFile.c.render, line 608 to 608
  line  608:          {  if ((error = xcolourtrans_set_gcol (path->outline,
change Tools.DrawFile.c.render, line 665 to 666
  line  665: {
  line  666:   int i;
to Render.DrawFile.c.render, line 614 to 614
  line  614:    {  int i;
change Tools.DrawFile.c.render, line 678 to 680
  line  678:   }
  line  679:   }
  line  680:   }
to Render.DrawFile.c.render, line 626 to 626
  line  626:    }  }  }
change Tools.DrawFile.c.render, line 685 to 686
  line  685:   if (state->error == NULL)
  line  686:     state->error = error;
to Render.DrawFile.c.render, line 631 to 631
  line  631:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 694 to 697
  line  694: {
  line  695:   os_error *error = NULL;
  line  696:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line  697:                                                                   typing */
to Render.DrawFile.c.render, line 639 to 640
  line  639:             {  os_error *error = NULL;
  line  640:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 712 to 713
  line  712: {
  line  713:     if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
to Render.DrawFile.c.render, line 655 to 655
  line  655:       {  if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
change Tools.DrawFile.c.render, line 723 to 724
  line  723: {
  line  724:       if ((error = xos_read_mode_variable(sprite->header.mode,
to Render.DrawFile.c.render, line 665 to 665
  line  665:       {  if ((error = xos_read_mode_variable (sprite->header.mode,
change Tools.DrawFile.c.render, line 733 to 734
  line  733: {
  line  734:       char s[DEC_WIDTH + 1];
to Render.DrawFile.c.render, line 674 to 674
  line  674:       {  char s [DEC_WIDTH + 1];
change Tools.DrawFile.c.render, line 757 to 758
  line  757:   }
  line  758:   }
to Render.DrawFile.c.render, line 697 to 697
  line  697:    }  }
change Tools.DrawFile.c.render, line 763 to 764
  line  763:   if (state->error == NULL)
  line  764:     state->error = error;
to Render.DrawFile.c.render, line 702 to 702
  line  702:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 772 to 775
  line  772: {
  line  773:   os_error *error = NULL;
  line  774:   drawfile_render_state *state = (drawfile_render_state *) s  /* save 
  line  775:                                                                  typing */ ;
to Render.DrawFile.c.render, line 710 to 711
  line  710:             {  os_error *error = NULL;
  line  711:    drawfile_render_state *state = (drawfile_render_state *) s /*save typing*/;
change Tools.DrawFile.c.render, line 789 to 790
  line  789: {
  line  790:     if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
to Render.DrawFile.c.render, line 725 to 725
  line  725:       {  if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
change Tools.DrawFile.c.render, line 797 to 798
  line  797: {
  line  798:       state->object = o;
to Render.DrawFile.c.render, line 732 to 732
  line  732:       {  state->object = o;
change Tools.DrawFile.c.render, line 804 to 805
  line  804: {
  line  805:         if ((error = xservice_draw_object_render(o->type, state, NULL))
to Render.DrawFile.c.render, line 738 to 738
  line  738:          {  if ((error = xservice_draw_object_render (o->type, state, NULL))
change Tools.DrawFile.c.render, line 809 to 810
  line  809:   }
  line  810:   }
to Render.DrawFile.c.render, line 742 to 742
  line  742:    }  }
change Tools.DrawFile.c.render, line 815 to 816
  line  815:   if (state->error == NULL)
  line  816:     state->error = error;
to Render.DrawFile.c.render, line 747 to 747
  line  747:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 824 to 827
  line  824: {
  line  825:   os_error *error = NULL;
  line  826:   drawfile_render_state *state = (drawfile_render_state *) s  /* save 
  line  827:                                                                  typing */ ;
to Render.DrawFile.c.render, line 755 to 756
  line  755:             {  os_error *error = NULL;
  line  756:    drawfile_render_state *state = (drawfile_render_state *) s /*save typing*/;
change Tools.DrawFile.c.render, line 844 to 845
  line  844: {
  line  845:     error = main_error_lookup(error_DRAW_FILE_BAD_TAG, "BadTag");
to Render.DrawFile.c.render, line 773 to 773
  line  773:    {  error = main_error_lookup (error_DRAW_FILE_BAD_TAG, "BadTag");
change Tools.DrawFile.c.render, line 855 to 856
  line  855: {
  line  856:     if ((error = xservice_draw_object_render(o->type, state, NULL)) !=
to Render.DrawFile.c.render, line 783 to 783
  line  783:    {  if ((error = xservice_draw_object_render (o->type, state, NULL)) !=
change Tools.DrawFile.c.render, line 864 to 865
  line  864:   if (state->error == NULL)
  line  865:     state->error = error;
to Render.DrawFile.c.render, line 791 to 791
  line  791:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 873 to 876
  line  873: {
  line  874:   os_error *error = NULL;
  line  875:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line  876:                                                                   typing */
to Render.DrawFile.c.render, line 799 to 800
  line  799:             {  os_error *error = NULL;
  line  800:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 888 to 889
  line  888: {
  line  889:     if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
to Render.DrawFile.c.render, line 812 to 812
  line  812:       {  if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
change Tools.DrawFile.c.render, line 901 to 902
  line  901:   if (state->error == NULL)
  line  902:     state->error = error;
to Render.DrawFile.c.render, line 824 to 824
  line  824:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 910 to 913
  line  910: {
  line  911:   os_error *error = NULL;
  line  912:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line  913:                                                                   typing */
to Render.DrawFile.c.render, line 832 to 833
  line  832:             {  os_error *error = NULL;
  line  833:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 926 to 927
  line  926: {
  line  927:     int len = strlen(trfm_text->text);
to Render.DrawFile.c.render, line 846 to 846
  line  846:    {  int len = strlen (trfm_text->text);
change Tools.DrawFile.c.render, line 934 to 951
  line  934:     {                                  /* If the text is REALLY in
  line  935:                                           system font, we honour the
  line  936:                                           baseline, transformation
  line  937:                                           and size fields in the
  line  938:                                           definition; otherwise, we
  line  939:                                           simply scale system text to 
  line  940:                                           fit inside the bbox the
  line  941:                                           font claims to have,
  line  942:                                           without making any attempt
  line  943:                                           to apply the
  line  944:                                           transformation. To scale
  line  945:                                           the text to fit inside the
  line  946:                                           bounding box WITH the
  line  947:                                           transformation applied
  line  948:                                           would involve solving a
  line  949:                                           linear optimisation problem 
  line  950:                                           (for the font width) with
  line  951:                                           eight constraints. */
to Render.DrawFile.c.render, line 853 to 860
  line  853:       {  /*If the text is REALLY in system font, we honour the baseline,
  line  854:             transformation and size fields in the definition; otherwise, we
  line  855:             simply scale system text to fit inside the bbox the font claims
  line  856:             to have, without making any attempt to apply the transformation.
  line  857:             To scale the text to fit inside the bounding box WITH the
  line  858:             transformation applied would involve solving a linear
  line  859:             optimisation problem (for the font width) with eight
  line  860:             constraints.*/
change Tools.DrawFile.c.render, line 954 to 957
  line  954:       {                                /* Get the trfm needed to
  line  955:                                           scale the text to the
  line  956:                                           coords it would have if it
  line  957:                                           were a "real" font. */
to Render.DrawFile.c.render, line 863 to 864
  line  863:          {  /*Get the trfm needed to scale the text to the coords it would
  line  864:                have if it were a "real" font.*/
change Tools.DrawFile.c.render, line 981 to 982
  line  981:       {                                /* Which trfm takes the text
  line  982:                                           into its bounding box? */
to Render.DrawFile.c.render, line 888 to 888
  line  888:          {  /*Which trfm takes the text into its bounding box?*/
change Tools.DrawFile.c.render, line 999 to 1000
  line  999:   }
  line 1000:   }
to Render.DrawFile.c.render, line 905 to 905
  line  905:    }  }
change Tools.DrawFile.c.render, line 1005 to 1006
  line 1005:   if (state->error == NULL)
  line 1006:     state->error = error;
to Render.DrawFile.c.render, line 910 to 910
  line  910:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 1014 to 1017
  line 1014: {
  line 1015:   os_error *error = NULL;
  line 1016:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line 1017:                                                                   typing */
to Render.DrawFile.c.render, line 918 to 919
  line  918:             {  os_error *error = NULL;
  line  919:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 1034 to 1035
  line 1034: {
  line 1035:     if (state->clip == NULL || verify_overlap(state->clip,
to Render.DrawFile.c.render, line 936 to 936
  line  936:    {  if (state->clip == NULL || verify_overlap (state->clip,
change Tools.DrawFile.c.render, line 1037 to 1038
  line 1037: {
  line 1038:     if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
to Render.DrawFile.c.render, line 938 to 938
  line  938:       {  if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
change Tools.DrawFile.c.render, line 1050 to 1051
  line 1050: {
  line 1051:         char tmp[3], *text;
to Render.DrawFile.c.render, line 950 to 950
  line  950:          {  char tmp [3], *text;
change Tools.DrawFile.c.render, line 1077 to 1078
  line 1077: {
  line 1078:           text -= 3;
to Render.DrawFile.c.render, line 976 to 976
  line  976:             {  text -= 3;
change Tools.DrawFile.c.render, line 1087 to 1088
  line 1087:                     font_GIVEN_FONT | (state->flags & font_BLEND_FONT)
  line 1088:                     | ((trfm_text->flags & drawfile_TEXT_KERN)
to Render.DrawFile.c.render, line 985 to 985
  line  985:                   font_GIVEN_FONT | ((trfm_text->flags & drawfile_TEXT_KERN)
change Tools.DrawFile.c.render, line 1103 to 1106
  line 1103: {
  line 1104:     os_error *error1 = xfont_lose_font(f);
  line 1105:     if (error == NULL)
  line 1106:       error = error1;
to Render.DrawFile.c.render, line 1000 to 1001
  line 1000:    {  os_error *error1 = xfont_lose_font (f);
  line 1001:       if (error == NULL) error = error1;
change Tools.DrawFile.c.render, line 1109 to 1110
  line 1109:   if (state->error == NULL)
  line 1110:     state->error = error;
to Render.DrawFile.c.render, line 1004 to 1004
  line 1004:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 1120 to 1123
  line 1120: {
  line 1121:   os_error *error = NULL;
  line 1122:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line 1123:                                                                   typing */
to Render.DrawFile.c.render, line 1014 to 1015
  line 1014:             {  os_error *error = NULL;
  line 1015:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 1137 to 1138
  line 1137: {
  line 1138:     if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
to Render.DrawFile.c.render, line 1029 to 1029
  line 1029:       {  if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
change Tools.DrawFile.c.render, line 1142 to 1145
  line 1142:     {                                  /* Multiply the matrix in the
  line 1143:                                           sprite by the given matrix
  line 1144:                                           to get the matrix  to plot
  line 1145:                                           through. */
to Render.DrawFile.c.render, line 1033 to 1034
  line 1033:       {  /*Multiply the matrix in the sprite by the given matrix to get the
  line 1034:    matrix to plot through. */
change Tools.DrawFile.c.render, line 1150 to 1151
  line 1150:   }
  line 1151:   }
to Render.DrawFile.c.render, line 1039 to 1039
  line 1039:    }  }
change Tools.DrawFile.c.render, line 1156 to 1157
  line 1156:   if (state->error == NULL)
  line 1157:     state->error = error;
to Render.DrawFile.c.render, line 1044 to 1044
  line 1044:                if (state->error == NULL) state->error = error;
change Tools.DrawFile.c.render, line 1165 to 1168
  line 1165: {
  line 1166:   os_error *error = NULL;
  line 1167:   drawfile_render_state *state = (drawfile_render_state *) s;  /* save 
  line 1168:                                                                   typing */
to Render.DrawFile.c.render, line 1052 to 1053
  line 1052:             {  os_error *error = NULL;
  line 1053:    drawfile_render_state *state = (drawfile_render_state *) s; /*save typing*/
change Tools.DrawFile.c.render, line 1181 to 1182
  line 1181: {
  line 1182:     if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
to Render.DrawFile.c.render, line 1066 to 1066
  line 1066:       {  if ((state->flags & drawfile_RENDER_BBOXES) != NONE)
change Tools.DrawFile.c.render, line 1186 to 1189
  line 1186:     {                                  /* Multiply the matrix in the
  line 1187:                                           JPEG by the given matrix to 
  line 1188:                                           get the matrix  to plot
  line 1189:                                           through. */
to Render.DrawFile.c.render, line 1070 to 1071
  line 1070:       {  /*Multiply the matrix in the JPEG by the given matrix to get the
  line 1071:    matrix to plot through. */
change Tools.DrawFile.c.render, line 1195 to 1196
  line 1195:   }
  line 1196:   }
to Render.DrawFile.c.render, line 1077 to 1077
  line 1077:    }  }
change Tools.DrawFile.c.render, line 1201 to 1202
  line 1201:   if (state->error == NULL)
  line 1202:     state->error = error;
to Render.DrawFile.c.render, line 1082 to 1082
  line 1082:                if (state->error == NULL) state->error = error;

Diff files 'Tools.DrawFile.c.main' and 'Render.DrawFile.c.main'
change Tools.DrawFile.c.main, line 32 to 37
  line   32: typedef struct
  line   33: {
  line   34:   int object_type;
  line   35:   callback_fn *fn;
  line   36: }
  line   37: Association;
to Render.DrawFile.c.main, line 32 to 32
  line   32: typedef struct {int object_type; callback_fn *fn;} Association;
change Tools.DrawFile.c.main, line 44 to 45
  line   44: {
  line   45:   {drawfile_TYPE_FONT_TABLE, &verify_font_table},
to Render.DrawFile.c.main, line 39 to 39
  line   39:    {  {drawfile_TYPE_FONT_TABLE,  &verify_font_table},
change Tools.DrawFile.c.main, line 53 to 54
  line   53: {
  line   54:   {drawfile_TYPE_FONT_TABLE, &render_font_table},
to Render.DrawFile.c.main, line 47 to 47
  line   47:    {  {drawfile_TYPE_FONT_TABLE,  &render_font_table},
change Tools.DrawFile.c.main, line 69 to 70
  line   69: {
  line   70:   {drawfile_TYPE_FONT_TABLE, &declare_font_table},
to Render.DrawFile.c.main, line 62 to 62
  line   62:    {  {drawfile_TYPE_FONT_TABLE,  &declare_font_table},
change Tools.DrawFile.c.main, line 76 to 81
  line   76: static os_trfm Identity =
  line   77: {
  line   78: {
  line   79:     {0x10000, 0},
  line   80:     {0, 0x10000},
  line   81:     {0, 0}}};
to Render.DrawFile.c.main, line 68 to 68
  line   68: static os_trfm Identity = {{{0x10000, 0}, {0, 0x10000}, {0, 0}}};
change Tools.DrawFile.c.main, line 83 to 83
  line   83: callback_l main_verification_callback = NULL, main_render_callback = NULL, main_declaration_callback = NULL;
to Render.DrawFile.c.main, line 70 to 71
  line   70: callback_l main_verification_callback = NULL, main_render_callback = NULL,
  line   71:       main_declaration_callback = NULL;
change Tools.DrawFile.c.main, line 88 to 90
  line   88: {
  line   89:   (void) main_terminate(SKIP, SKIP, SKIP);
  line   90: }
to Render.DrawFile.c.main, line 76 to 76
  line   76:       {(void) main_terminate (SKIP, SKIP, SKIP);}
change Tools.DrawFile.c.main, line 96 to 97
  line   96: {
  line   97:   os_error *error = NULL;
to Render.DrawFile.c.main, line 82 to 82
  line   82: {  os_error *error = NULL;
change Tools.DrawFile.c.main, line 112 to 113
  line  112:   if (l_out != NULL)
  line  113:     *l_out = l;
to Render.DrawFile.c.main, line 97 to 97
  line   97:    if (l_out != NULL) *l_out = l;
change Tools.DrawFile.c.main, line 117 to 118
  line  117: {
  line  118:     if (done_new)
to Render.DrawFile.c.main, line 101 to 101
  line  101:    {  if (done_new)
change Tools.DrawFile.c.main, line 128 to 129
  line  128: {
  line  129:   os_error *error = NULL;
to Render.DrawFile.c.main, line 111 to 111
  line  111: {  os_error *error = NULL;
change Tools.DrawFile.c.main, line 166 to 169
  line  166: {
  line  167:     if ((Message_Data = m_ALLOC(size)) == NULL)
  line  168: {
  line  169:       error = main_error_lookup(1, "NoMem");
to Render.DrawFile.c.main, line 148 to 149
  line  148:    {  if ((Message_Data = m_ALLOC (size)) == NULL)
  line  149:       {  error = main_error_lookup (1, "NoMem");
change Tools.DrawFile.c.main, line 171 to 172
  line  171: }
  line  172: }
to Render.DrawFile.c.main, line 151 to 151
  line  151:    }  }
change Tools.DrawFile.c.main, line 195 to 196
  line  195: {
  line  196:     callback_delete(main_declaration_callback);
to Render.DrawFile.c.main, line 174 to 174
  line  174:    {  callback_delete (main_declaration_callback);
change Tools.DrawFile.c.main, line 201 to 204
  line  201: {
  line  202:       os_error *error1 = xmessagetrans_close_file(&Control_Block);
  line  203:       if (error == NULL)
  line  204:         error = error1;
to Render.DrawFile.c.main, line 179 to 180
  line  179:       {  os_error *error1 = xmessagetrans_close_file (&Control_Block);
  line  180:          if (error == NULL) error = error1;
change Tools.DrawFile.c.main, line 211 to 212
  line  211: {
  line  212:       os_error *error1 = xresourcefs_deregister_files
to Render.DrawFile.c.main, line 187 to 187
  line  187:       {  os_error *error1 = xresourcefs_deregister_files
change Tools.DrawFile.c.main, line 214 to 215
  line  214:       if (error == NULL)
  line  215:         error = error1;
to Render.DrawFile.c.main, line 189 to 189
  line  189:          if (error == NULL) error = error1;
change Tools.DrawFile.c.main, line 225 to 226
  line  225: {
  line  226:   fatal = fatal, instance = instance, workspace = workspace;
to Render.DrawFile.c.main, line 199 to 199
  line  199: {  fatal = fatal, instance = instance, workspace = workspace; /**/
change Tools.DrawFile.c.main, line 244 to 245
  line  244: {
  line  245:   os_error *error = NULL;
to Render.DrawFile.c.main, line 217 to 217
  line  217: {  os_error *error = NULL;
change Tools.DrawFile.c.main, line 255 to 256
  line  255: {
  line  256:   case DrawFile_Render & 0x1F:
to Render.DrawFile.c.main, line 227 to 227
  line  227:    {  case DrawFile_Render & 0x1F:
after Render.DrawFile.c.main line  263:                                  void *workspace)
remove Tools.DrawFile.c.main line  293: {
remove Tools.DrawFile.c.main line  294:   bool unclaimed = TRUE;
remove Tools.DrawFile.c.main line  295:   os_error *error = NULL;
change Tools.DrawFile.c.main, line 297 to 297
  line  297:   workspace = workspace;
to Render.DrawFile.c.main, line 265 to 265
  line  265: {  workspace = workspace;
change Tools.DrawFile.c.main, line 300 to 301
  line  300: {
  line  301:   case Service_ResourceFSStarting:
to Render.DrawFile.c.main, line 268 to 268
  line  268:    {  case Service_ResourceFSStarting:
after Render.DrawFile.c.main line  275:     break;
remove Tools.DrawFile.c.main line  309: 
remove Tools.DrawFile.c.main line  310:   case DrawFile_Render:
remove Tools.DrawFile.c.main line  311:     switch (regs->r[0])
remove Tools.DrawFile.c.main line  312: {
remove Tools.DrawFile.c.main line  313:     case drawfile_TYPE_FONT_TABLE:
remove Tools.DrawFile.c.main line  314:       render_font_table(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  315:     break;
remove Tools.DrawFile.c.main line  316: 
remove Tools.DrawFile.c.main line  317:     case drawfile_TYPE_TEXT:
remove Tools.DrawFile.c.main line  318:       render_text(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  319:     break;
remove Tools.DrawFile.c.main line  320: 
remove Tools.DrawFile.c.main line  321:     case drawfile_TYPE_PATH:
remove Tools.DrawFile.c.main line  322:       render_path(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  323:     break;
remove Tools.DrawFile.c.main line  324: 
remove Tools.DrawFile.c.main line  325:     case drawfile_TYPE_SPRITE:
remove Tools.DrawFile.c.main line  326:       render_sprite(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  327:     break;
remove Tools.DrawFile.c.main line  328: 
remove Tools.DrawFile.c.main line  329:     case drawfile_TYPE_GROUP:
remove Tools.DrawFile.c.main line  330:       render_group(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  331:     break;
remove Tools.DrawFile.c.main line  332: 
remove Tools.DrawFile.c.main line  333:     case drawfile_TYPE_TAGGED:
remove Tools.DrawFile.c.main line  334:       render_tagged(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  335:     break;
remove Tools.DrawFile.c.main line  336: 
remove Tools.DrawFile.c.main line  337:     case drawfile_TYPE_TEXT_AREA:
remove Tools.DrawFile.c.main line  338:       render_text_area(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  339:     break;
remove Tools.DrawFile.c.main line  340: 
remove Tools.DrawFile.c.main line  341:     case drawfile_TYPE_TRFM_TEXT:
remove Tools.DrawFile.c.main line  342:       render_trfm_text(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  343:     break;
remove Tools.DrawFile.c.main line  344: 
remove Tools.DrawFile.c.main line  345:     case drawfile_TYPE_TRFM_SPRITE:
remove Tools.DrawFile.c.main line  346:       render_trfm_sprite(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  347:     break;
remove Tools.DrawFile.c.main line  348: 
remove Tools.DrawFile.c.main line  349:     case drawfile_TYPE_JPEG:
remove Tools.DrawFile.c.main line  350:       render_jpeg(NULL, (void *) regs->r[2], &unclaimed);
remove Tools.DrawFile.c.main line  351:     break;
remove Tools.DrawFile.c.main line  352: }
remove Tools.DrawFile.c.main line  353:     if (!unclaimed)
remove Tools.DrawFile.c.main line  354:       regs->r[1] = 0;
remove Tools.DrawFile.c.main line  355:     break;
remove Tools.DrawFile.c.main line  356: 
remove Tools.DrawFile.c.main line  357:   default:
remove Tools.DrawFile.c.main line  358:     error = main_error_lookup(0x1E8, "BadService", "DrawFile");
remove Tools.DrawFile.c.main line  359:     break;
change Tools.DrawFile.c.main, line 362 to 362
  line  362:   return((_kernel_oserror *) error);
to Render.DrawFile.c.main, line 278 to 278
  line  278:   return NULL;
change Tools.DrawFile.c.main, line 367 to 368
  line  367: {
  line  368:   os_error *error = NULL;
to Render.DrawFile.c.main, line 283 to 284
  line  283: 
  line  284: {  os_error *error = NULL;
change Tools.DrawFile.c.main, line 373 to 374
  line  373: {
  line  374:   case main_COMMAND_RENDER:
to Render.DrawFile.c.main, line 289 to 289
  line  289:    {  case main_COMMAND_RENDER:
change Tools.DrawFile.c.main, line 377 to 384
  line  377:       struct
  line  378: {
  line  379:         char *file, *m[3][2];
  line  380:         bool bbox, suppress;
  line  381:         char *flatness;
  line  382:         char argd[1024];
  line  383: }
  line  384:       argl;
to Render.DrawFile.c.main, line 292 to 293
  line  292:          struct {char *file, *m [3] [2]; bool bbox, suppress; char *flatness;
  line  293:                char argd [1024];} argl;
change Tools.DrawFile.c.main, line 388 to 391
  line  388:       static int Scale[3][2] =
  line  389: {
  line  390:         {1 << 16, 1 << 16},
  line  391:         {1 << 16, 1 << 16},
to Render.DrawFile.c.main, line 297 to 297
  line  297:          static int Scale [3] [2] = {{1 << 16, 1 << 16}, {1 << 16, 1 << 16},
change Tools.DrawFile.c.main, line 419 to 420
  line  419: {
  line  420:         error = xosfile_make_error(argl.file, obj_type);
to Render.DrawFile.c.main, line 325 to 325
  line  325:          {  error = xosfile_make_error (argl.file, obj_type);
change Tools.DrawFile.c.main, line 444 to 445
  line  444: {
  line  445:         error = main_error_lookup(os_GLOBAL_NO_MEM, "NoMem");
to Render.DrawFile.c.main, line 349 to 349
  line  349:          {  error = main_error_lookup (os_GLOBAL_NO_MEM, "NoMem");
change Tools.DrawFile.c.main, line 473 to 474
  line  473: {
  line  474:   va_list list;
to Render.DrawFile.c.main, line 377 to 377
  line  377: {  va_list list;
change Tools.DrawFile.c.main, line 483 to 484
  line  483:   for (i = 0; i < 4; i++)
  line  484:     p[i] = va_arg(list, char *);
to Render.DrawFile.c.main, line 386 to 386
  line  386:    for (i = 0; i < 4; i++) p [i] = va_arg (list, char *);

Diff files 'Tools.DrawFile.c.declare' and 'Render.DrawFile.c.declare'
Tools.DrawFile.c.declare and Render.DrawFile.c.declare identical

Diff files 'Tools.DrawFile.c.bbox' and 'Render.DrawFile.c.bbox'
Tools.DrawFile.c.bbox and Render.DrawFile.c.bbox identical
