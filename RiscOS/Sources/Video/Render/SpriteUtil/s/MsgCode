
; Message file handling code


; Workspace definition - workspace in this module is only used when accessing
; the Messages file. Furthermore, it is allocated on demand the first time
; we need the Messages file.

                        ^ 0, r12
message_file_block      #       16              ; File handle for MessageTrans
message_file_open       #       4               ; Opened message file flag
workspace_size          *       :INDEX:@


; Size of temporary block for when we do a lookup with subsitution.

temp_block_size         *       512


; Module die entry. Close the Messages file and flag it as closed, iff
; we have any workspace.

sprite_util_die ROUT
        MOV     r6, lr
        LDR     r12, [r12]
        TEQ     r12, #0
        MOVEQ   pc, r6                          ; No workspace

; OSS Close the Messages file if it is open, and then flag it as closed.
; OK so even if it is closed I flag it as closed, but this is hardly speed
; critical code.

        LDR     r0, message_file_open
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile
        SUBS    r0, r0, r0                      ; clear V
        STR     r0, message_file_open
        MOV     pc, r6                          ; Don't refuse to die


; OSS Print a GS Transed string with no parameters from the Messages file
; In    r0 -> token
; Out   r7-r11 preserved (always called last in *command handlers)
;       All other registers may be trashed

gs_lookup_print_string_zero ROUT
        MOV     r1, #0                          ; No %0
        MOV     r2, #0                          ; No %1
        MOV     r3, #0                          ; No %2
        MOV     r4, #0                          ; No %3

; Drop through to next routine having set registers for no substitution


; OSS Print a GS Transed subsituted string from the Messages file
; Temporarily claims a block of RMA for the buffer
; In    r0 -> token
;       r1-r4 -> %0-%3
; Out   r7-r11 preserved (always called last in *command handlers)
;       All other registers may be trashed

gs_lookup_print_string_four Entry "r7"
        BL      open_message_file_workspace
        EXIT    VS

; Move input parameters. "Fortunately", OS_Module Claim needs r0, r2 and r3
; which just "happen" to be the ones we don't need yet. (I spy careful design
; of the MessageTrans interface!)

        MOV     r4, r1                          ; -> %0
        MOV     r5, r2                          ; -> %1
        MOV     r6, r3                          ; -> %2
        MOV     r7, r4                          ; -> %3
        MOV     r1, r0                          ; Message token

; Claim the temporary block

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #temp_block_size
        SWI     XOS_Module
        EXIT    VS

; r2 -> block, r3 = size of block as required by MessageTrans

        ADR     r0, message_file_block          ; Message file handle
        SWI     XMessageTrans_GSLookup
        MOVVS   r6, r0                          ; Squirrel error away
        BVS     free_block
        MOV     r6, #0                          ; Flag no error

; Now print the string from the block

        MOV     r0, r2                          ; Resulting string
        MOV     r1, r3                          ; String length
        SWI     XOS_WriteN
        MOVVS   r6, r0                          ; Squirrel error away

free_block ; r2 still points to the block!

        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module
        TEQ     r6, #0                          ; Was there an earlier error?
        MOVNE   r0, r6                          ; Restore it and set V
        SETV    NE

; If there was no earlier error (ie. r6 = 0) then any error from the
; OS_Module Free call is returned.

        EXIT


message_filename
        DCB     "Resources:$.Resources.SpriteUtil.Messages", 0
        ALIGN


open_message_file_workspace Entry "r1-r3"
        MOV     r6, r0                          ; Save message token
        LDR     r2, [r12]                       ; Got workspace yet?
        TEQ     r2, #0
        MOVNE   r12, r2
        BNE     got_workspace

        MOV     r0, #ModHandReason_Claim        ; No, so claim it
        MOV     r3, #workspace_size
        SWI     XOS_Module
        EXIT    VS                              ; Exit with R0 -> claim error
        STR     r2, [r12]                       ; Save address in private word
        MOV     r12, r2
        MOV     r1, #0
        STR     r1, message_file_open           ; Flag the file as closed
        B       open_file                       ; and try to open it

got_workspace
        LDR     r1, message_file_open
        TEQ     r1, #0
        EXIT    NE                              ; R0 has NOT been trashed here
open_file
        ADR     r0, message_file_block
        ADR     r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        EXIT    VS                              ; Exit with R0 -> open error
        MOV     r1, #1
        STR     r1, message_file_open
        MOV     r0, r6                          ; Restore message token
        EXIT

        END
