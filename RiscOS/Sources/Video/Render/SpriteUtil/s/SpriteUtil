        TTL     > <wini>arm.SpriteUtil.SpriteUtil

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Name  Description
; ----       ----  -----------
; 01-Jun-88  SKS   1.01 -> Tokenised text for Arthur2 version
; 07-Jun-88  SKS   1.02 -> Fixed bug introduced when compacting code
; 14-Jun-88  SKS   1.03 -> Even shorter!
; 22-Jul-88  TMD/SKS 1.04 -> SINFO works when no space!

; ---- Released for Arthur 2.00 ----

; 23-Nov-89  TMD   1.04 -> Modified module offsets for use with AAsm which
;                          now complains about DCD relative - no change to
;                          object file.

; 08-Mar-91  OSS   1.05 -> Internationalised.
;
; 01-Apr-91  OSS   1.06 -> Twiddled with MsgCode, change Messages file.
; 18-Apr-91  OSS   1.07 -> Minor bug fixes.
; 10-Dec-91  SMC   1.08 -> Removed comments from Messages & shortened tokens.

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        GET     Hdr:ListOpts  ; These first three must be in this order
        GET     Hdr:Macros
        GET     Hdr:System

        GET     Hdr:ModHand
        GET     Hdr:Proc
        GET     Hdr:Tokens
        GET     Hdr:MsgTrans
        GET     Hdr:Sprite

        GET     VersionASM

        AREA    |SpriteUtils$$Code|, CODE, READONLY, PIC

; *************************** Module starts here ******************************

Module_BaseAddr
        DCD     0 ; SpriteUtils_Start
        DCD     0 ; SpriteUtils_Init
        DCD     sprite_util_die      - Module_BaseAddr
        DCD     0 ; SpriteUtils_Service
        DCD     SpriteUtils_Title    - Module_BaseAddr
        DCD     SpriteUtils_HelpStr  - Module_BaseAddr
        DCD     SpriteUtils_HC_Table - Module_BaseAddr
        DCD     0                    ; No SWI Chunk
        DCD     0
        DCD     0
        DCD     0
 [ International_Help <> 0
        DCD     message_filename     - Module_BaseAddr
 |
        DCD     0
 ]
 [ :LNOT: No32bitCode
        DCD     SpriteUtils_Flags    - Module_BaseAddr
 ]

SpriteUtils_HC_Table ; Name Max Min

        Command SChoose,   1,  1, International_Help
        Command SGet,      1,  1, International_Help
        Command SFlipX,    1,  1, International_Help
        Command SFlipY,    1,  1, International_Help

        Command SDelete, 255,  1, International_Help
        Command SList,     0,  0, International_Help
        Command SLoad,     1,  1, International_Help
        Command SMerge,    1,  1, International_Help
        Command SNew,      0,  0, International_Help
        Command SSave,     1,  1, International_Help
        Command SInfo,     0,  0, International_Help
        Command SRename,   2,  2, International_Help
        Command SCopy,     2,  2, International_Help
        Command ScreenSave,1,  1, International_Help
        Command ScreenLoad,1,  1, International_Help
        DCB     0                       ; That's all folks !

SpriteUtils_Title
        DCB     "SpriteUtils", 0

SpriteUtils_HelpStr
        DCB     "SpriteUtils"
        DCB     9
        DCB     "$Module_HelpVersion", 0

        GET     s.TokHelpSrc

        ALIGN

 [ :LNOT: No32bitCode
SpriteUtils_Flags DCD ModuleFlag_32bit
 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0-r6 trashable

; Ones that all have r0 -> name

SChoose_Code ROUT

        MOV     r6, #SpriteReason_SelectSprite


50 ; Common entry point

        Entry
        MOV     r2, r0                  ; Pointer to name
        MOV     r0, r6                  ; rc
        SWI     XOS_SpriteOp
        EXIT

; .............................................................................

SLoad_Code ; NOROUT

        MOV     r6, #SpriteReason_LoadSpriteFile
        B       %BA50

; .............................................................................

SMerge_Code ; NOROUT

        MOV     r6, #SpriteReason_MergeSpriteFile
        B       %BA50

; .............................................................................

SSave_Code ; NOROUT

        MOV     r6, #SpriteReason_SaveSpriteFile
        B       %BA50

; .............................................................................

SFlipX_Code ; NOROUT

        MOV     r6, #SpriteReason_FlipAboutXAxis
        B       %BA50

; .............................................................................

SFlipY_Code ; NOROUT

        MOV     r6, #SpriteReason_FlipAboutYAxis
        B       %BA50

; .............................................................................
; Doesn't actually need to pass in command tail^, but doesn't matter either!

SNew_Code ; NOROUT

        MOV     r6, #SpriteReason_ClearSprites
        B       %BA50

; .............................................................................
; Ones that use r3 as well

SGet_Code ; NOROUT

        MOV     r6, #SpriteReason_GetSprite
        MOV     r3, #0                  ; Exclude palette data
        B       %BA50

; .............................................................................

ScreenLoad_Code ; NOROUT

        MOV     r6, #SpriteReason_ScreenLoad

60      MOV     r3, #1                  ; Include palette data
        B       %BA50

; .............................................................................

ScreenSave_Code ; NOROUT

        MOV     r6, #SpriteReason_ScreenSave
        B       %BA60

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0-r6 trashable

SRename_Code ROUT

        MOV     r6, #SpriteReason_RenameSprite

50 ; Common entry point

        Entry
        BL      TwoNamePtrs
        MOV     r0, r6
        SWI     XOS_SpriteOp
        EXIT

; .............................................................................

SCopy_Code ; NOROUT

        MOV     r6, #SpriteReason_CopySprite
        B       %BA50

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0-r6 trashable

SDelete_Code Entry

        MOV R2,R0               ;Pointer to name

SDelete_Cod10
        MOV R0,#SpriteReason_DeleteSprite
        SWI XOS_SpriteOp
        BVS SDelete_Cod40

SDelete_Cod20
        LDRB R3,[R2],#1         ;Skip name
        CMP R3,#" "
        BGT SDelete_Cod20
        BLT SDelete_Cod40       ;Char < " " terminates string

SDelete_Cod30
        LDRB R3,[R2],#1         ;Skip spaces
        CMP R3,#" "
        BEQ SDelete_Cod30
        SUBGT R2,R2,#1          ;Start of next name
        BGT SDelete_Cod10       ; so delete it

SDelete_Cod40                   ;String terminator found
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0-r6 trashable

SInfo_Code Entry
        MOV     r0, #SpriteReason_ReadAreaCB
        SWI     XOS_SpriteOp
        BVC     SInfo_Cod10

; Error code shared with *SList

00      ADR     r0, NoSpriteMemoryBlock
        CLRV                            ; V is always set when we get here!
        BL      gs_lookup_print_string_zero
        EXIT

NoSpriteMemoryBlock
        =       "NoSpMem",0
        ALIGN

; OSS This is a completely new implementation of SInfoCod10 for internationalisation.

SInfo_Cod10
        SUB     sp, sp, #40             ; Claim 40 bytes of stack as a buffer for the three numbers
                                        ; Each number is max chars 10 plus minus sign plus null = 12 * 3
        SUB     r4, r2, r5              ; Get sprite area bytes free into R4 before R2 is trashed

        ADD     r0, r2, #16             ; 4 word gap at end of sprite area
        MOV     r0, r0, LSR #10         ; Change sprite area size from bytes to Kbytes
        MOV     r1, sp                  ; Pointer to buffer in R1, on return points to trailing null
        MOV     r2, #40                 ; Size of buffer in R2, on return is free space remaining
        SWI     XOS_ConvertInteger4     ; Get sprite workspace size in KBytes as a string
        MOVVC   r6, r0                  ; Save pointer to string size in R6

        MOVVC   r0, r4                  ; Get bytes free back from R4 where we stashed it
        ADDVC   r1, r1, #1              ; Move on past null to next free byte in buffer
        SWIVC   XOS_ConvertInteger4     ; Get bytes free in sprite area as a string
        MOVVC   r5, r0                  ; Save pointer to string free space in R5

        MOVVC   r0, r3                  ; Number of sprites defined in area
        ADDVC   r1, r1, #1              ; Move on to next free byte in buffer
        SWIVC   XOS_ConvertInteger4     ; Get number of sprites defined as a string

        MOVVC   r4, #0                  ; There is no %3
        MOVVC   r3, r0                  ; Number of sprites is %2, which we just got in R0
        MOVVC   r2, r5                  ; Free space bytes is %1, which we stashed in R5
        MOVVC   r1, r6                  ; Total size Kbytes is %0, which we stashed in R6
        ADRVC   r0, Message_SInfo       ; The message file token
        BLVC    gs_lookup_print_string_four

        ADD     sp, sp, #40             ; Put the string buffer back onto the stack
        EXIT                            ; Return. V is already set if there was an error

Message_SInfo
        DCB     "SInfo",0
        ALIGN


; .............................................................................
; In    r0-r6 trashable

SList_Code ALTENTRY

        MOV     r0, #SpriteReason_ReadAreaCB
        SWI     XOS_SpriteOp
        BVS     %BT00                   ; [no sprite memory]

        MOVS    r5, r3                  ; Number of sprites
        BNE     SList_Cod20

        ADR     r0, NoSpritesDefinedBlock
        BL      gs_lookup_print_string_zero
        EXIT

NoSpritesDefinedBlock
        =       "NoSpDef",0
        ALIGN


SList_Cod20
        SUB     sp, sp, #16
        MOV R4,#1

SList_Cod30
        MOV R2,R13
        MOV R3,#16

        MOV R0,#SpriteReason_ReturnName
        SWI XOS_SpriteOp
        BVS SList_Cod40

        MOV R0,R2
        SWI XOS_Write0
        BVS SList_Cod40
        SWI XOS_NewLine
        BVS SList_Cod40

        CMP R5,R4
        ADDNE R4,R4,#1
        BNE SList_Cod30

SList_Cod40
        ADD     sp, sp, #16
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

TwoNamePtrs
        MOV R2,R0                       ;Ptr to first parameter
        MOV R3,R0
TwoNam10
        LDRB R0,[R3],#1
        CMP R0,#" "
        BGT TwoNam10
TwoNam20                                ;R3 points at first space
        LDRB R0,[R3],#1
        CMP R0,#" "
        BEQ TwoNam20 ; was LE
        SUB R3,R3,#1
        MOV pc,lr                       ;R3 points at second parameter

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        GET     MsgCode.s

        END
