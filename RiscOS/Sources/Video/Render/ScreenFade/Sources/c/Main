#include <time.h>
#include <string.h>

#ifdef PROFILE
	#include "time.h"
#endif

#include "swis.h"

#include "Header.h"

#include "Desk.GFX.h"
#include "Desk.Error2.h"
#include "Desk.LinkList.h"
#include "Desk.Debug.h"
#include "Desk.Wimp.h"
#include "Desk.DeskMem.h"
#include "Desk.Screen.h"
#include "Desk.Str.h"

#include "MemCheck.MemCheck.h"

#include "Line16bpp.h"
#include "Line32bpp.h"
#include "Line8bpp.h"

#include "PlainArgv.PlainArgv.h"







#if 1
	
	#include "swis.h"
	
	#include "Desk.Wimp.h"
	#include "Desk.SWI.h"
	#include "Desk.Screen.h"
	#include "Desk.KernelSWIs.h"
	#include "Desk.Error2.h"
	#include "Desk.Debug.h"
	
	/*
	JS 02 Apr 1995
	Support for DLLs
	*/
	
	
	int        	Desk_screen_mode  = -1;
	Desk_wimp_point Desk_screen_size;
	Desk_wimp_point Desk_screen_eig;
	Desk_wimp_point Desk_screen_delta;
	int        	Desk_screen_bpp;
	
	#ifdef _DLL
	int		*Desk_Screen__Ref_mode( void)	{ return &Desk_screen_mode;	}
	Desk_wimp_point	*Desk_Screen__Ref_size( void)	{ return &Desk_screen_size;	}
	Desk_wimp_point	*Desk_Screen__Ref_eig( void)	{ return &Desk_screen_eig;	}
	Desk_wimp_point	*Desk_Screen__Ref_delta( void)	{ return &Desk_screen_delta;	}
	int		*Desk_Screen__Ref_bpp( void)	{ return &Desk_screen_bpp;	}
	
	#endif
	
	
	
	/*#define ReadModeVar(m, v, r) Desk_SWI2(3, 3, 0x0035, (m), (v), 0,   0, 0, (r))*/
	
	extern Desk_bool Desk_Screen_CacheModeInfo(void)
	{
	 // int oldmode = Desk_screen_mode;
	
	Desk_Debug_Printf( Desk_error_PLACE "Desk_Screen_CacheModeInfo called\n");
	
	  /*Desk_SWI2(1, 3, Desk_SWI_OS_Byte, 135,   NULL, NULL, &Desk_screen_mode);*/
	  Desk_Error2_CheckOS(
	  	_swix( OS_Byte, _IN(0)|_OUT(2), 135, &Desk_screen_mode)
	  	);
	/*
	  if (oldmode == Desk_screen_mode)	{
	    Desk_Debug_Printf( Desk_error_PLACE "Desk_Screen_CacheModeInfo, old mode == new mode = %i\n", oldmode);
	    return(Desk_bool_FALSE);
	  	}
	*/
	  Desk_OS_ReadModeVariable( -1, Desk_modevar_LOG2BPP, &Desk_screen_bpp);
	  Desk_screen_bpp = 1 << Desk_screen_bpp;
	
	  Desk_OS_ReadModeVariable( -1, Desk_modevar_XEIGFACTOR, &Desk_screen_eig.x);
	  Desk_OS_ReadModeVariable( -1, Desk_modevar_YEIGFACTOR, &Desk_screen_eig.y);
	
	  Desk_screen_delta.x = 1 << Desk_screen_eig.x;
	  Desk_screen_delta.y = 1 << Desk_screen_eig.y;
	
	  Desk_OS_ReadModeVariable( -1, Desk_modevar_XWINDOWLIMIT, &Desk_screen_size.x);
	  Desk_screen_size.x = (Desk_screen_size.x + 1) << Desk_screen_eig.x;
	
	  Desk_OS_ReadModeVariable( -1, Desk_modevar_YWINDOWLIMIT, &Desk_screen_size.y);
	  Desk_screen_size.y = (Desk_screen_size.y + 1) << Desk_screen_eig.y;
	
	  return(Desk_bool_TRUE);
	}
#endif

















#define	FADE_VALUE( c, count, max_count)	((c)*((max_count)-(count)-1)/((max_count)-(count)))


typedef enum	{
	fade_type_LINES = 0
	}
	fade_type;


typedef struct	{
	Desk_linklist_header	header;
	void*			client_ref;
	Desk_wimp_rect		rect;		// OS coors
	/*
	int			count;
	int			max_count;
	
	int			time_delay;
	*/
	int			time_max;
	int			time_current;
	int			time_start;
	
	fade_type		type;
	
	Desk_palette_entry	targetcolour;
	
	union	{
		struct	{
			int			line_step;
			
			#ifdef PROFILE
			struct	{
				int	total;
				int	nocalc;
				int	nomem;
				int	total_n;
				int	nocalc_n;
				int	nomem_n;
				}
				time;
			#endif
			#ifdef Desk_DEBUG
				int	numlines;
			#endif
			
			int	progress;
			/*
			int	min255change;	// If 255->0 would be changed by less than this, the fade is not done.
						// This is to prevent many small changes producing no effect during the first part of the fade.
			*/
			int	time_colourlastchanged[ 256];
			}
			lines;
		/*
		struct	{
			int		linelength;	// Number of pixels faded together.
			int		step;		// Distance between each line that is faded.
			int		numpixels;	// Number of OS pixels in rect.
			int		pixel;		// starting pixel number (increased by step, then % numpixels).
			int		numpixelsdone;	// Total number of pixels faded.
			}
			coprime;
		*/
		}
		typedata;
	}
	fader_block;


typedef struct	{
	char*		start;
	size_t		size;
	char*		end;
	size_t		linememory;	// Memory of one line of pixels.
	Desk_bool	outofdate;
	}
	screen_info;


typedef struct	{
	Desk_linklist_header	faderblocks;
	int			processorbandwidthpercentage;	// Actually from 1-255 inclusive, rather than 1-100.
	screen_info		screen;
	}
	globals_block;

static globals_block	globals = {{ NULL, NULL}, 255};



static void	RemoveFade2( fader_block* fade, void* pw)
/*
Removes specified fade, even if it has a client reference.
 */
	{
	Desk_Debug_Printf( Desk_error_PLACE "RemoveFade called, fade=0x%p\n", fade);
	
	if ( !fade)	return;
	
	if ( Desk_LinkList_InList( &globals.faderblocks, &fade->header))
		Desk_LinkList_Unlink( &globals.faderblocks, &fade->header);
	
	#ifdef Desk__MODULE_CLIENT
		if ( NULL==Desk_LinkList_FirstItem( &globals.faderblocks))	{
		// This was the only fade...
			Desk_Debug_Print( Desk_error_PLACE "Removing ticker event...\n");
			_swix( OS_RemoveCallBack, _INR(0,1), TickHandler2, pw);	// This is just in case a transient callback is pending.
			Desk_Error2_CheckOS( _swix( OS_RemoveTickerEvent, _INR(0,1), TickHandler, pw));
			Desk_Debug_Print( Desk_error_PLACE "Removed ticker event...\n");
			}
	#endif
	
	Desk_Debug_Printf( Desk_error_PLACE "RemoveFade called, fade=0x%p\n", fade);
	
	#ifdef PROFILE
		{
		Desk_Debug_Printf( Desk_error_PLACE "Stats:\n");
		Desk_Debug_Printf( Desk_error_PLACE "total n=%i, t=%i. nocalc n=%i, t=%i. nomem n=%i, t=%i\n",
			fade->time.total_n, fade->time.total,
			fade->time.nocalc_n, fade->time.nocalc,
			fade->time.nomem_n, fade->time.nomem
			);
		if ( fade->time.total_n != 0)	Desk_Debug_Printf( Desk_error_PLACE "total av time normal=%ius (n=%i)\n", 
									10000 * fade->time.total / fade->time.total_n,
									fade->time.total_n
									);
		if ( fade->time.nocalc_n != 0)	Desk_Debug_Printf( Desk_error_PLACE "total av time nocalc=%ius (n=%i)\n", 
									10000 * fade->time.nocalc / fade->time.nocalc_n,
									fade->time.nocalc_n
									);
		if ( fade->time.nomem_n != 0)	Desk_Debug_Printf( Desk_error_PLACE "total av time nomem=%ius (n=%i)\n", 
									10000 * fade->time.nomem / fade->time.nomem_n,
									fade->time.nomem_n
									);
		}
	#endif
	
	Desk_DeskMem_Free( fade);
	
	#ifdef Desk_DEBUG
		{
		Desk_linklist_header*	h;
		Desk_Debug_Printf( Desk_error_PLACE "Fade blocks are:\n");
		for ( h=Desk_LinkList_FirstItem( &globals.faderblocks); h; h=Desk_LinkList_NextItem( h))	{
			Desk_Debug_Printf( Desk_error_PLACE "fade block at 0x%p\n", h);
			}
		}
	#endif
	
	#ifndef Desk__MODULE_CLIENT
		Desk_UNUSED( pw);
	#endif
	}


static void	RemoveFade( fader_block* fade, void* pw)
/*
Only removes specified fade if it doesn't have a client reference.
 */
	{
	if ( NULL == fade->client_ref)	RemoveFade2( fade, pw);
	}



#ifdef Desk__MODULE_CLIENT
	static void	RemoveAllFades( void* pw)
		{
		fader_block*	fade;
		for	(
			fade=Desk_LinkList_FirstItem( &globals.faderblocks);
			fade;
			)
			{
			fader_block*	next = Desk_LinkList_NextItem( &fade->header);
			RemoveFade( fade, pw);
			fade = next;
			}
		}
#endif




static void	GetScreenInfo( void* pw)
	{
	globals.screen.outofdate = Desk_bool_FALSE;
	
	Desk_Screen_CacheModeInfo();
	globals.screen.start	= (char*) 148;
	globals.screen.size	= 150;
	globals.screen.end	= (char*) -1;
	Desk_Error2_CheckOS( _swix( OS_ReadVduVariables, _INR(0,1), &globals.screen, &globals.screen));
	globals.screen.end = globals.screen.start + globals.screen.size;
	Desk_Error2_CheckOS( _swix( OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 6, &globals.screen.linememory));
	Desk_Debug_Printf( Desk_error_PLACE "screen mem is 0x%p-0x%p (%i), linememory=%i, size=%i*%i, bpp=%i\n", 
		globals.screen.start,
		globals.screen.end,
		globals.screen.size,
		globals.screen.linememory,
		Desk_screen_size.x,
		Desk_screen_size.y,
		Desk_screen_bpp
		);
	//MemCheck_RegisterMiscBlock( sm->start, sm->size);
	Desk_UNUSED( pw);
	}





typedef union	{
	int value;
	struct
		{
		char red;
		char green;
		char blue;
		char dummy;
		} data;
	}
	Desk_palette_memoryentry;
/*
This holds a RGB colour in the form used in VRAM (note differet from
Desk_palette_entry).
 */




typedef struct	{
	unsigned int	r_low		: 5;
	unsigned int	g_low		: 5;
	unsigned int	b_low		: 5;
	unsigned int	spare_low	: 1;
	unsigned int	r_high		: 5;
	unsigned int	g_high		: 5;
	unsigned int	b_high		: 5;
	unsigned int	spare_high	: 1;
	}
	word_16bpp;


typedef struct	{
	unsigned int	r_0		: 5;
	unsigned int	g_0		: 5;
	unsigned int	b_0		: 5;
	unsigned int	spare_0		: 1;
	unsigned int	r_1		: 5;
	unsigned int	g_1		: 5;
	unsigned int	b_1		: 5;
	unsigned int	spare_1		: 1;
	unsigned int	r_2		: 5;
	unsigned int	g_2		: 5;
	unsigned int	b_2		: 5;
	unsigned int	spare_2		: 1;
	unsigned int	r_3		: 5;
	unsigned int	g_3		: 5;
	unsigned int	b_3		: 5;
	unsigned int	spare_3		: 1;
	}
	word2_16bpp;


typedef struct	{
	unsigned int	r_0		: 5;
	unsigned int	g_0		: 5;
	unsigned int	b_0		: 5;
	unsigned int	spare_0		: 1;
	unsigned int	r_1		: 5;
	unsigned int	g_1		: 5;
	unsigned int	b_1		: 5;
	unsigned int	spare_1		: 1;
	unsigned int	r_2		: 5;
	unsigned int	g_2		: 5;
	unsigned int	b_2		: 5;
	unsigned int	spare_2		: 1;
	unsigned int	r_3		: 5;
	unsigned int	g_3		: 5;
	unsigned int	b_3		: 5;
	unsigned int	spare_3		: 1;
	unsigned int	r_4		: 5;
	unsigned int	g_4		: 5;
	unsigned int	b_4		: 5;
	unsigned int	spare_4		: 1;
	unsigned int	r_5		: 5;
	unsigned int	g_5		: 5;
	unsigned int	b_5		: 5;
	unsigned int	spare_5		: 1;
	unsigned int	r_6		: 5;
	unsigned int	g_6		: 5;
	unsigned int	b_6		: 5;
	unsigned int	spare_6		: 1;
	unsigned int	r_7		: 5;
	unsigned int	g_7		: 5;
	unsigned int	b_7		: 5;
	unsigned int	spare_7		: 1;
	}
	word4_16bpp;

/*
// C version of DrawLine_32bpp_C

static void	DrawLine_32bpp_C( char* start, char* end, int* convertions)
	{
	Desk_palette_memoryentry*	p;
	
	#ifdef Desk_DEBUG
	if ( start < globals.screen.start || start > globals.screen.end)
		Desk_Error2_HandleTextf( Desk_error_PLACE "Bad address 0x%p\n", end);
	#endif
	
	for ( p=(Desk_palette_memoryentry*)start; p<(Desk_palette_memoryentry*)end; p++)	{
		Desk_palette_memoryentry	pp = *p;
		pp.data.red	= convertions[ pp.data.red + 0*256];
		pp.data.green	= convertions[ pp.data.green + 1*256];
		pp.data.blue	= convertions[ pp.data.blue + 2*256];
		*p = pp;
		}
	}
*/


static void	HandleNonAligned8bpp( char* start, char* end, int* convertions)
	{
	char*	p;
	
	#ifdef Desk_DEBUG
	if ( start < globals.screen.start || start > globals.screen.end)
		Desk_Error2_HandleTextf( Desk_error_PLACE "Bad address 0x%p\n", end);
	#endif
	
	for ( p=(char*) start; p<(char*) end; p++)	{
		*p = convertions[ *p];
		}
	}
static void	HandleNonAligned16( char* start, char* end, int* convertions)
	{
	short int*	p;
	
	#ifdef Desk_DEBUG
	if ( start < globals.screen.start || start > globals.screen.end)
		Desk_Error2_HandleTextf( Desk_error_PLACE "Bad address 0x%p\n", end);
	if ( ((int) start) & 1)	Desk_Error2_HandleTextf( Desk_error_PLACE "start not half-word aligned - 0x%p\n", start);
	#endif
	
	for ( p=(short int*) start; p<(short int*) end; p++)	{
		int	pp	= *p;
		int	r	= (pp>> 0) & 31;
		int	g	= (pp>> 5) & 31;
		int	b	= (pp>>10) & 31;
		
		r = convertions[ r + 0*3];
		g = convertions[ g + 1*32];
		b = convertions[ b + 2*32];
		
		*p = ( r + (g<<5) + (b<<10));
		}
	}


#define	ScreenMem_Address( X, Y)								\
	(											\
		globals.screen.start								\
		+										\
		((Desk_screen_size.y-(Y)) >> Desk_screen_eig.y) * globals.screen.linememory	\
		+ 										\
		((X) >> Desk_screen_eig.x) * Desk_screen_bpp / 8				\
	)


#define	NewPixelValue( value, target, numerator, denominator)	\
	(							\
		(target)					\
		+ 						\
		(						\
			( (value) - (target) )			\
			*					\
			(numerator)				\
			+ 					\
			(denominator) / 2			\
		)						\
		/						\
		(denominator)					\
	)



#define	NewPixelValue2( value, target, newcols)				\
	(								\
		( (target) > (value) ) ?				\
			(target) - (newcols)[ (target) - (value)]	\
			:						\
			(target) + (newcols)[ (value) - (target)]	\
	)


#define	NewPixelValue3( value, target, tcurrent, tlast, tmax)	\
	(							\
	((tmax)==(tlast)) ?					\
		(target)					\
		:						\
		(target)					\
		+ 						\
		(						\
			( (value) - (target) )			\
			*					\
			( (tmax) - (tcurrent) )			\
			+ 					\
			( (tmax) - (tlast) ) / 2		\
		)						\
		/						\
		( (tmax) - (tlast) )				\
	)


/*
#define	NewPixelValue4( value, target, tcurrent, tlast_array, tmax)	\
	NewPixelValue3( value, target, tcurrent, tlast_array[ ((target)>(value)) ? (target)-(value) : (value)-(target)], tmax)
*/


static void	DoFade( fader_block* fade, void *pw)
	{
	char*	linestart;
	char*	lineend;
	char*	lastline;
	
	int	ratio_numerator;
	int	ratio_denominator;
	
	int	newcols[ 256];
	
	clock_t	lastt;
	
	Desk_Debug_Printf( Desk_error_PLACE "DoFade called for fade 0x%p\n", fade);
	
	if ( globals.screen.outofdate)	GetScreenInfo( pw);
	
	linestart		= ScreenMem_Address( fade->rect.min.x, fade->rect.max.y);
	lineend			= ScreenMem_Address( fade->rect.max.x, fade->rect.max.y);
	lastline		= ScreenMem_Address( fade->rect.max.x, fade->rect.min.y);
	
	lastt = fade->time_current;
	
	Desk_Debug_Printf( Desk_error_PLACE "screen mem is 0x%p-0x%p (%i), linememory=%i, size=%i*%i, bpp=%i\n", 
		globals.screen.start,
		globals.screen.end,
		globals.screen.size,
		globals.screen.linememory,
		Desk_screen_size.x,
		Desk_screen_size.y,
		Desk_screen_bpp
		);
	
	fade->time_current = clock() - fade->time_start;
	if ( fade->time_current == 0)			fade->time_current = 10;	// Otherwise first pass always has no effect.
	if ( fade->time_current > fade->time_max)	fade->time_current = fade->time_max;
	
	ratio_numerator		= fade->time_max - fade->time_current;
	ratio_denominator	= fade->time_max - lastt;
		
	if ( 0==ratio_denominator)	return;	// Fade has finished, and is waiting for client to release it.
	
	
	Desk_Debug_Printf( Desk_error_PLACE "lastt=%i, NewPixelValue( 0, 255, ratio_numerator, ratio_denominator) = %i\n",
		lastt,
		NewPixelValue( 0, 255, ratio_numerator, ratio_denominator)
		);
	
	/*
	if ( NewPixelValue( 0, 255, ratio_numerator, ratio_denominator) < fade->typedata.lines.min255change)	{
		
		//Change in brightness is too small - no pixels would change, 
		//which results in the rectangle not fading until near the end of 
		//the fade, when it fades very quickly.
		
		fade->time_current = lastt;
		return;
		}
	*/
	Desk_Debug_Printf( Desk_error_PLACE "n=%i, d=%i\n", ratio_numerator, ratio_denominator);
	
	Desk_Debug3_Printf( Desk_error_PLACE "DoFade called\n");
	
	Desk_Debug3_Printf( Desk_error_PLACE "Handling fade 0x%p, bpp=%i\n", fade, Desk_screen_bpp);
	
	if ( Desk_screen_bpp == 8)	{
		int			convertions[256];
		int			left_margin	= DrawLine_8bpp_BYTE_STEPSIZE - ((int) linestart & (DrawLine_8bpp_BYTE_STEPSIZE-1));
		int			right_margin	= (int) lineend & (DrawLine_8bpp_BYTE_STEPSIZE-1);
		Desk_palette_entry	palette[ 256];
		int			i;
		
		Desk_Error2_CheckOS( _swix( ColourTrans_ReadPalette, _INR(0,4), -1, -1, palette, 256*sizeof( Desk_palette_entry), 0));
		
		for ( i=0; i<256; i++)	{
			// Find new colour for colour number i, which is 0xbbggrrxx=palette[i].
			int			newcolournumber;
			Desk_palette_entry	newpalette;
			newpalette.value = palette[ i].value;
			
			newpalette.data.red	= NewPixelValue3( 
							newpalette.data.red, 
							fade->targetcolour.data.red, 
							fade->time_current, 
							fade->typedata.lines.time_colourlastchanged[i], 
							fade->time_max
							);
			newpalette.data.green	= NewPixelValue3( 
							newpalette.data.green, 
							fade->targetcolour.data.green, 
							fade->time_current, 
							fade->typedata.lines.time_colourlastchanged[i], 
							fade->time_max
							);
			newpalette.data.blue	= NewPixelValue3( 
							newpalette.data.blue, 
							fade->targetcolour.data.blue, 
							fade->time_current, 
							fade->typedata.lines.time_colourlastchanged[i], 
							fade->time_max
							);
			
			Desk_Error2_CheckOS( _swix( ColourTrans_ReturnColourNumber, _IN(0)|_OUT(0), newpalette.value, &newcolournumber));
			Desk_Debug4_Printf( Desk_error_PLACE "Colour %i -> %i, t=(%i, %i, %i)\n", 
				i,
				newcolournumber,
				fade->typedata.lines.time_colourlastchanged[ i],
				fade->time_current,
				fade->time_max
				);
			if ( newcolournumber != i)	{
				fade->typedata.lines.time_colourlastchanged[ i] = fade->time_current;
				//Should maybe be:
				//fade->typedata.lines.time_colourlastchanged[ newcolournumber] = fade->time_current;
				}
			convertions[i] = newcolournumber;
			//Desk_Error2_CheckOS( _swix( ColourTrans_ReturnColourNumber, _IN(0)|_OUT(0), palette[i].value, &convertions[i]));
			}
		
		if ( fade->type == fade_type_LINES)	{
			int	offset;
			for ( offset=0; offset<fade->typedata.lines.line_step; offset++)	{
				
				char*	linestart2	= linestart	+ offset * globals.screen.linememory;
				char*	lineend2	= lineend	+ offset * globals.screen.linememory;
				
				for ( ; lineend2 < lastline;)	{
					
					HandleNonAligned8bpp( linestart2, linestart2+left_margin, convertions);
					DrawLine_8bpp( linestart2+left_margin, lineend2-right_margin, convertions);
					HandleNonAligned8bpp( lineend2-right_margin, lineend2, convertions);
					
					//HandleNonAligned8bpp( linestart2, lineend2, convertions);
					linestart2	+= fade->typedata.lines.line_step * globals.screen.linememory;
					lineend2	+= fade->typedata.lines.line_step * globals.screen.linememory;
					}
				}
			}
		}
	
	else	{	// Set up lastcol for simple 256 rgb component.
		int	i;
		Desk_Debug_Printf( Desk_error_PLACE "Setting up newcols for 16/32 bpp mode\n");
		for ( i=0; i<256; i++)	{
			newcols[i] = NewPixelValue3( i, 0, fade->time_current, fade->typedata.lines.time_colourlastchanged[i], fade->time_max);
			if ( newcols[i] != i)	{
				fade->typedata.lines.time_colourlastchanged[i] = fade->time_current;
				Desk_Debug_Printf( Desk_error_PLACE "newcols[%i] = %i*\n", i, newcols[i]);
				}
			else	Desk_Debug_Printf( Desk_error_PLACE "newcols[%i] = %i\n", i, newcols[i]);
			}
		}
	
	if ( Desk_screen_bpp == 32)	{
	
		int	convertions[3][256];
		int	p;
		/*
		Set up table of conversions for each 8-bit primary-colour value.
		There are separate 256-entry tables for each of red, green and
		blue components.
		 */
		for ( p=0; p<256; p++)	{
			convertions[2][p] = NewPixelValue2( p, fade->targetcolour.data.blue, newcols);
			convertions[1][p] = NewPixelValue2( p, fade->targetcolour.data.green, newcols);
			convertions[0][p] = NewPixelValue2( p, fade->targetcolour.data.red, newcols);
			}
		
		if ( fade->type == fade_type_LINES)	{
			int	offset;
			
			for ( offset=0; offset<fade->typedata.lines.line_step; offset++)	{
				char*	linestart2	= linestart	+ offset * globals.screen.linememory;
				char*	lineend2	= lineend	+ offset * globals.screen.linememory;
				
				for ( ; lineend2 < lastline;)	{
					
					DrawLine_32bpp( linestart2, lineend2, (int*) convertions);
					
					linestart2	+= fade->typedata.lines.line_step * globals.screen.linememory;
					lineend2	+= fade->typedata.lines.line_step * globals.screen.linememory;
					}
				}
			}
		}
	
	else if ( Desk_screen_bpp == 16)	{
		/* 
		This is slightly more complicated than the 32 bpp case - we have to deal
		with non word-aligned pixels, and use the fast assembler DrawLine_16bpp()
		for the rest.
		 */
		int	convertions[6][32];
		int	p;
		int	left_margin	= DrawLine_16bpp_BYTE_STEPSIZE - ((int) linestart & (DrawLine_16bpp_BYTE_STEPSIZE-1));
		int	right_margin	= (int) lineend & (DrawLine_16bpp_BYTE_STEPSIZE-1);
			// left/right_margin are the sizes (in bytes) of the non word-aligned left and right parts of the line
		
		Desk_Debug3_Printf( Desk_error_PLACE "16bpp\n");
		
		for ( p=0; p<32; p++)	{
			
			//Desk_Debug_Assert( fade->time_max != fade->typedata.lines.time_colourlastchanged[ p]);
			
			convertions[2][p] = convertions[5][p] = NewPixelValue2( p, fade->targetcolour.data.blue>>3, newcols);
			convertions[1][p] = convertions[4][p] = NewPixelValue2( p, fade->targetcolour.data.green>>3, newcols);
			convertions[0][p] = convertions[3][p] = NewPixelValue2( p, fade->targetcolour.data.red>>3, newcols);
			
			Desk_Debug_Printf( Desk_error_PLACE "Red convertions[0][%i] = %i, from target %i\n", 
				p, 
				convertions[0][p],
				fade->targetcolour.data.red>>3
				);
			
			}
		
		//_swix( OS_Byte, _IN(0), 19);
		
		if ( fade->type == fade_type_LINES)	{
			int	offset;
			
			for ( offset=0; offset<fade->typedata.lines.line_step; offset++)	{
				char*	linestart2	= linestart	+ offset * globals.screen.linememory;
				char*	lineend2	= lineend	+ offset * globals.screen.linememory;
				
				for ( ; lineend2 < lastline;)	{
					
					HandleNonAligned16( linestart2, linestart2+left_margin, (int*) convertions);
					
					#ifdef PROFILE
						{
						
							{
							clock_t	t = clock();
							DrawLine_16bpp( linestart2+left_margin, lineend2-right_margin, convertions);
							fade->time.total += clock() - t;
							fade->time.total_n++;
							}
						
							{
							clock_t	t = clock();
							DrawLine_16bpp_NoCalc( linestart2+left_margin, lineend2-right_margin, convertions);
							fade->time.nocalc += clock() - t;
							fade->time.nocalc_n++;
							}
						
							{
							clock_t	t = clock();
							DrawLine_16bpp_NoMem( linestart2+left_margin, lineend2-right_margin, convertions);
							fade->time.nomem += clock() - t;
							fade->time.nomem_n++;
							}
						}
					
					#else
						DrawLine_16bpp( linestart2+left_margin, lineend2-right_margin, (int*) convertions);
						//HandleNonAligned16( linestart+left_margin, lineend-right_margin, (int*)  convertions);
					#endif
					
					HandleNonAligned16( lineend2-right_margin, lineend2, (int*) convertions);
					
					linestart2	+= fade->typedata.lines.line_step * globals.screen.linememory;
					lineend2	+= fade->typedata.lines.line_step * globals.screen.linememory;
					}
				}
			}
		/*
		else if ( fade->type == fade_type_COPRIME)	{
			int		numpixelsdone	= 0;
			int		pixel		= fade->typedata.coprime.pixel;
			
			Desk_Debug_Printf( Desk_error_PLACE 
				"Fading coprime, step=%i, numpixels=%i, pixel=%i, numpixelsdone=%i, numpixels>>eig.y=%i\n", 
				fade->typedata.coprime.step,
				fade->typedata.coprime.numpixels,
				fade->typedata.coprime.pixel,
				fade->typedata.coprime.numpixelsdone,
				fade->typedata.coprime.numpixels >> Desk_screen_eig.y
				);
			
			for	(
				; 
				pixel < (fade->typedata.coprime.numpixels >> Desk_screen_eig.y); 
				pixel += fade->typedata.coprime.step
				)
				{
				Desk_wimp_point	pos;
				char*		p;
					{
					//int	start = pixelDesk_screen_delta.x * progress * fade->typedata.coprime.step;
					pos.x = fade->rect.min.x + ( pixel % (fade->rect.max.x-fade->rect.min.x));
					pos.y = fade->rect.max.y - ( pixel / (fade->rect.max.x-fade->rect.min.x)) * Desk_screen_delta.y;
					}
				
				if ( pixel==fade->typedata.coprime.pixel)	{
					Desk_Debug_Printf( Desk_error_PLACE "Initial pos is (%i,%i)\n", pos.x, pos.y);
					}
				
				if ( pos.y < fade->rect.min.y)	break;
				
				p = ScreenMem_Address( pos.x, pos.y);
				
				if ( p < globals.screen.start || p >= globals.screen.end)	break;
				
				//HandleNonAligned16( p, p+fade->typedata.coprime.linelength, convertions);
				DrawLine_16bpp( p, p+fade->typedata.coprime.linelength, (int*) convertions);
				
				numpixelsdone += fade->typedata.coprime.linelength;
				}
			
			Desk_Debug_Printf( Desk_error_PLACE "pixel=%i\n", pixel);
			fade->typedata.coprime.numpixelsdone	+= numpixelsdone;
			fade->typedata.coprime.pixel		= pixel % (fade->typedata.coprime.numpixels >> Desk_screen_eig.y);
			}
		*/
		}
	
	if ( ratio_numerator == 0)	{
		RemoveFade( fade, pw);
		}
	}






_kernel_oserror *TickHandler2_handler(_kernel_swi_regs *r, void *pw)
	{
	fader_block* volatile	fade_volatile = NULL;
	
	Desk_Error2_Try	{
		clock_t		starttime = clock();
		fader_block*	fade;
		fader_block*	next = NULL;
		
		for	(
			fade=Desk_LinkList_FirstItem( &globals.faderblocks);
			fade;
			fade=next
			)
			{
			next		= Desk_LinkList_NextItem( &fade->header);
			fade_volatile	= (fader_block* volatile) fade;
			
			DoFade( fade, pw);
			}
		
		#ifdef Desk__MODULE_CLIENT
			if ( Desk_LinkList_FirstItem( &globals.faderblocks))	{
				clock_t	t = clock() - starttime;
				t = (255-globals.processorbandwidthpercentage) * t / globals.processorbandwidthpercentage;
					// Amount of time to leave before next fade...
				t+=1;
				Desk_Debug_Printf( Desk_error_PLACE "Leaving time %i\n", t);
				_swix( OS_CallAfter, _INR(0,2), t, TickHandler, pw);
				}
		#endif
		
		}
	Desk_Error2_Catch	{
		#ifndef Desk__MODULE_CLIENT
			return Desk_Error2_ConvertToOS2();
		#else
			RemoveFade( (fader_block*) fade_volatile, pw);
		#endif
		}
	Desk_Error2_EndCatch
	
	return NULL;
	Desk_UNUSED( r);
	}


#ifdef Desk__MODULE_CLIENT
	_kernel_oserror *TickHandler_handler(_kernel_swi_regs *r, void *pw)
		{
		_swix( OS_AddCallBack, _INR(0,1), TickHandler2, pw);
		return NULL;
		
		Desk_UNUSED( r);
		}
#endif


static int	GetInt( const char* string)
	{
	//Desk_Debug_Printf( Desk_error_PLACE "string='%s'\n", string);
	if ( '&'==string[0])			return (int) strtoul( string+1, NULL, 16);
	if ( '0'==string[0] && 'x'==string[1])	return (int) strtoul( string+2, NULL, 16);
	else					return (int) strtoul( string, NULL, 10);
	}

#define	ErrorUnrecognisedFlagsInR0( r0)	Desk_Error2_HandleTextf( "Unrecognised flags passed in r0 (r0=0x%08x)", r0)


static fader_block*	AddFade( _kernel_swi_regs* r, void* pw)
	{
	fader_block* volatile	fade_volatile	= NULL;
	fader_block*		fade		= NULL;
	
	Desk_Error2_Try	{
		
		if ( r->r[0] & (~1023))		ErrorUnrecognisedFlagsInR0( r->r[0]);
		
		GetScreenInfo( pw);
		
		fade = Desk_DeskMem_MallocType( fader_block);
		fade_volatile = (fader_block* volatile) fade;
		
		Desk_LinkList_AddToTail( &globals.faderblocks, &fade->header);
		
		fade->rect.min.x		= r->r[1];
		fade->rect.min.y		= r->r[2];
		fade->rect.max.x		= (r->r[3]==-1) ? Desk_screen_size.x : r->r[3];
		fade->rect.max.y		= (r->r[4]==-1) ? Desk_screen_size.y : r->r[4];
		fade->client_ref		= NULL;
		fade->typedata.lines.line_step	= r->r[7];
		fade->typedata.lines.progress	= 0;
		fade->type			= (fade_type) (r->r[0] & 255);
		fade->targetcolour.value	= r->r[6];
		fade->time_max			= r->r[5];
		fade->time_current		= 0;
		fade->time_start			= clock();
		/*fade->typedata.lines.min255change	= (r->r[0] & (1<<9)) ? r->r[8] : 0;*/
			{
			int	i;
			for ( i=0; i<256; i++)	fade->typedata.lines.time_colourlastchanged[i] = 0;
			}
		if ( fade->type != fade_type_LINES)	Desk_Error2_HandleTextf( "Unrecognised fade type %i", fade->type);
		
		Desk_Debug_Printf( Desk_error_PLACE "Created Fade: rect=%i %i %i %i, line_step=%i, targetcolour=0x%08x, time_max=%i\n",
			fade->rect.min.x,
			fade->rect.min.y,
			fade->rect.max.x,
			fade->rect.max.y,
			fade->typedata.lines.line_step,
			fade->targetcolour.value,
			fade->time_max
			);
		
		if ( r->r[0] & (1<<8))	{
			r->r[1]			= (int) fade;
			fade->client_ref	= fade;
			}
		else	r->r[1] = 0;
		r->r[0] = 0;
		
		#define	MakeGE( a, b)	((a)=((a)<(b))?(b):(a))
		#define	MakeLE( a, b)	((a)=((a)>(b))?(b):(a))
		#define	MakeInRange( a, b, c)	do { MakeGE( a, b); MakeLE( a, c);} while (0)
		
		// Make sure fade rectangle is within screen area...
		MakeInRange( fade->rect.min.x, 0, Desk_screen_size.x);
		MakeInRange( fade->rect.max.x, 0, Desk_screen_size.x);
		
		MakeInRange( fade->rect.min.y, 0, Desk_screen_size.y);
		MakeInRange( fade->rect.max.y, 0, Desk_screen_size.y);
		
		#ifdef Desk__MODULE_CLIENT
			if ( NULL==Desk_LinkList_PreviousItem( &fade->header))	{
				TickHandler_handler( NULL, pw);	// Start first fade immediately if we aren't already fading.
				}
		#endif
		}
	Desk_Error2_Catch	{
		RemoveFade2( (fader_block*) fade_volatile, pw);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	return fade;
	}


static fader_block*	GetFade( int clientref)
	{
	fader_block* fade = (fader_block*) clientref;
	if ( Desk_bool_FALSE==Desk_LinkList_InList( &globals.faderblocks, &fade->header))
		Desk_Error2_HandleTextf( "Unrecognised screenfade reference 0x%p", fade);
	return fade;
	}


_kernel_oserror*	SWIHandler( int swi_no, _kernel_swi_regs* r, void* pw)
	{
	Desk_Error2_Try	{
		
		if ( 0)	;
		
		else if ( swi_no==ScreenFade_FadeRectangle-ScreenFade_00)	{
			AddFade( r, pw);
			}
		
		else if ( swi_no==ScreenFade_SetProcessorUsage-ScreenFade_00)	{
			if ( r->r[0] & 0xffffff00)	ErrorUnrecognisedFlagsInR0( r->r[0]);
			globals.processorbandwidthpercentage = r->r[0] & 255;
			if ( globals.processorbandwidthpercentage==0)	globals.processorbandwidthpercentage = 1;
			}
		
		else if ( swi_no==ScreenFade_GetFadeInfo-ScreenFade_00)	{
			fader_block*	fade		= GetFade( r->r[1]);
			int 		progress	= fade->time_current * 255 / fade->time_max;
			r->r[0] = progress;
			}
		
		else if ( swi_no==ScreenFade_ReleaseFade-ScreenFade_00)	{
			if ( r->r[0] != 0)	ErrorUnrecognisedFlagsInR0( r->r[0]);
			RemoveFade2( GetFade( r->r[1]), pw);
			r->r[1] = 0;
			}
		
		else Desk_Error2_HandleTextf( "Unrecognised " Module_Title " SWI number %i", swi_no);
		}
	Desk_Error2_Catch	{
		return Desk_Error2_ConvertToOS2();
		}
	Desk_Error2_EndCatch
	
	return NULL;
	}



static void	AddFade_Command( char** argv, int argc, void* pw)
	{
	_kernel_swi_regs	r;
	int	a;
	
	for ( a=0; a<10; a++)	r.r[a] = 0;
	r.r[8] = 0;
	r.r[7] = 8;	// Default linestep.
	
	for ( a=0; a<argc; a++)	{
		/*
		if ( fade->type!=fade_type_COPRIME && 0 == strncmp( argv[a], "-coprime", strlen( "-coprime")))	{
			fade->type = fade_type_COPRIME;
			fade->typedata.coprime.linelength	= 128;
			fade->typedata.coprime.step		= 17;
			fade->typedata.coprime.numpixels	= (fade->rect.max.x-fade->rect.min.x) * (fade->rect.max.y-fade->rect.min.y);
			fade->typedata.coprime.pixel		= 0;
			fade->typedata.coprime.numpixelsdone	= 0;
			}
		*/
		if (0)	;
		/*
		else if ( 0 == strcmp( argv[a], "-coprime"))	{
			}
		
		else if ( 0 == strcmp( argv[a], "-coprime_step"))	{
			fade->typedata.coprime.step	= atoi( argv[a+1]);
			a += 1;
			}
		
		else if ( 0 == strcmp( argv[a], "-coprime_linelength"))	{
			fade->typedata.coprime.linelength	= atoi( argv[a+1]);
			a += 1;
			}
		*/
		else if ( 0 == strcmp( argv[a], "-rect"))	{
			if ( a >= argc-4)	Desk_Error2_HandleText( "4 parameters needed for '-rect'");
			r.r[1] = atoi( argv[a+1]);
			r.r[2] = atoi( argv[a+2]);
			r.r[3] = atoi( argv[a+3]);
			r.r[4] = atoi( argv[a+4]);
			a += 4;
			}
		
		else if ( 0 == strcmp( argv[a], "-targetcol"))	{
			if ( a >= argc-1)	Desk_Error2_HandleText( "1 parameter needed for '-targetcol'");
			r.r[6] = GetInt( argv[a+1]);
			a += 1;
			}
		else if ( 0 == strcmp( argv[a], "-time"))	{
			if ( a >= argc-1)	Desk_Error2_HandleText( "1 parameter needed for '-time'");
			r.r[5] = atoi( argv[a+1]);
			a += 1;
			}
		else if ( 0 == strcmp( argv[a], "-linestep"))	{
			if ( a >= argc-1)	Desk_Error2_HandleText( "1 parameter needed for '-linestep'");
			r.r[7] = atoi( argv[a+1]);
			a += 1;
			}
		/*
		else if ( 0 == strcmp( argv[a], "-min255change"))	{
			r.r[8] = atoi( argv[a+1]);
			a += 1;
			r.r[0] |= (1<<9);
			}
		*/
		else	Desk_Error2_HandleTextf( "Unrecognised option '%s'", argv[a]);
		}
	
	AddFade( &r, pw);
	}



_kernel_oserror *Command( char *arg_string, int argc, int cmd_no, void *pw)
	{
	PlainArgv_argsblock	args = { 0, 0};
	char* volatile		arg_string2_volatile = NULL;
	
	Desk_Error2_Try	{
		char*	arg_string2 = Desk_Str_strdupcr( arg_string);
		arg_string2_volatile	= arg_string2;
		
		//Desk_Error2_HandleText( "No *commands implemented yet...\n");
		
		PlainArgv_GetArgs( &args, arg_string2);
		
		if ( cmd_no==CMD_ScreenFade_FadeRectangle)	AddFade_Command( args.argv, args.argc, pw);
		
		else if ( cmd_no==CMD_ScreenFade_SetProcessorUsage)	{
			globals.processorbandwidthpercentage = atoi( arg_string2);
			if ( globals.processorbandwidthpercentage < 1)		globals.processorbandwidthpercentage = 1;
			if ( globals.processorbandwidthpercentage > 255)	globals.processorbandwidthpercentage = 255;
			}
		
		#ifdef Desk_DEBUG
			else if ( cmd_no==CMD_ScreenFade_ListFades)	{
				fader_block*	fade;
				printf( "Current fades are:\n");
				for ( fade=Desk_LinkList_FirstItem( &globals.faderblocks); fade; fade=Desk_LinkList_NextItem( &fade->header))	{
					printf( "0x%p ", fade);
					}
				printf( "\n");
				}
				else	Desk_Error2_HandleTextf( "Unrecognised " Module_Title " *command number %i", cmd_no);
		#endif
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_Free( (void*) arg_string2_volatile);
		//if ( args.argc != 0)	Desk_DeskMem_Free( args.argv[0]);
		return Desk_Error2_ConvertToOS2();
		}
	Desk_Error2_EndCatch
	
	if ( args.argc != 0)	Desk_DeskMem_Free( args.argv[0]);
	return NULL;
	
	Desk_UNUSED( argc);
	Desk_UNUSED( arg_string);
	}



#ifdef Desk__MODULE_CLIENT
	_kernel_oserror *Initialise(char *cmd_tail, int podule_base, void *pw)
		{
		/*
		Trace_IgnoreFunctions( "Desk_Debug_*");
		Trace_InterceptAllFunctions();
		*/
		Desk_Debug_RedirectToFilename( "<Wimp$ScrapDir>.faderout");
		Desk_Debug_Printf( Desk_error_PLACE "Initialised, cmd_tail='%s'\n", cmd_tail);
		Desk_Debug_SetLevel( 4);
		Desk_Error2_Init_JumpSig();
		Desk_Error2_TryCatch(
			GetScreenInfo( pw);
			,
			return Desk_Error2_ConvertToOS2();
			)
		return NULL;
		Desk_UNUSED( podule_base);
		Desk_UNUSED( pw);
		}
	
	void	ServiceHandler(int service_number, _kernel_swi_regs *r, void *pw)
		{
		if ( 0x46==service_number)	{
			
			Desk_Error2_Try	{
				Desk_Debug_Printf( Desk_error_PLACE "Service_ModeChange received\n");
				RemoveAllFades( pw);
				#ifdef Desk_DEBUG
					GetScreenInfo( pw);
				#endif
				globals.screen.outofdate = Desk_bool_TRUE;
				}
			Desk_Error2_Catch	{
				}
			Desk_Error2_EndCatch
			
			}
		Desk_UNUSED( r);
		Desk_UNUSED( pw);
		}
	
	_kernel_oserror *Finalise(int fatal, int podule, void *pw)
		{
		Desk_Debug_Printf( Desk_error_PLACE "Finalise called\n");
		
		Desk_Error2_Try	{
			RemoveAllFades( pw);
			}
		Desk_Error2_Catch	{
			}
		Desk_Error2_EndCatch
		
		return NULL;
		
		Desk_UNUSED( podule);
		Desk_UNUSED( fatal);
		}

#else
	#include "Utils.Utils.h"
	
	int	main( int argc, char* argv[])
		{
		Desk_Error2_Init_JumpSig();
		
		MemCheck_Init();
		MemCheck_InterceptSCLStringFunctions();
		MemCheck_RegisterArgs( argc, argv);
		/*
		Trace_IgnoreFunctions( "Desk_Debug_*");
		Trace_InterceptAllFunctions();
		*/
		Desk_Error2_Try	{
			char	argsstring[ 1024] = "";
			int	i;
			GetScreenInfo( NULL);
			
			/*
				{	// test 8bit assembler.
				int	conversions[ 256];
				int	i;
				char	mem1[ 2048], mem2[ 2048];
				for ( i=0; i<256; i++)	conversions[i] = Utils_RndInt( 256);
				for ( i=0; i<2048; i++)	mem1[i] = mem2[i] = Utils_RndInt( 256);
				HandleNonAligned8bpp( mem1, mem1+2048, conversions);
				DrawLine_8bpp( mem2, mem2+2048, conversions);
				for ( i=0; i<2048; i++)	printf( "%i) 0x%08x %s 0x%08x\n", i, mem1[i], (mem1[i]==mem2[i]) ? "  ":"!=", mem2[i]);
				printf( "\n");
				}
			*/
			
			for ( i=1; i<argc; i++)	{
				strcat( argsstring, argv[i]);
				strcat( argsstring, " ");
				}
			argsstring[ strlen( argsstring)] = '\n';
			Command( argsstring, 2, CMD_ScreenFade_FadeRectangle, NULL);
			
			//AddFade( argv+1, argc-1, 0);
			while ( Desk_LinkList_FirstItem( &globals.faderblocks))
				Desk_Error2_CheckOS( TickHandler2_handler( NULL, NULL));
			}
		Desk_Error2_Catch	{
			Desk_Debug_Printf( Desk_error_PLACE "Exiting because of error\n");
			Desk_Error2_VerboseExit( &Desk_Error2_globalblock);
			}
		Desk_Error2_EndCatch
		
		return 0;
		}
#endif
