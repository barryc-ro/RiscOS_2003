/*****************************************************************************
*                                                                            *
*                        Copyright 1993 - 95                                 *
*          as an unpublished work by Bitstream Inc., Cambridge, MA           *
*                                                                            *
*         These programs are the sole property of Bitstream Inc. and         *
*           contain its proprietary and confidential information.            *
*                                                                            *
*****************************************************************************/



/************************* C A C H E M G R . H *******************************
 *                                                                           *
 *  Data, type and constant declarations for cache manager
 *                                                                           *
 ********************** R E V I S I O N   H I S T O R Y **********************
 *                                                                           *
 *  Changes since TrueDoc Release 2.0:                                       *
 *
 *     $Header$
 *                                                                                    
 *     $Log$
 * Revision 4.1  96/03/05  13:44:41  mark
 * Release
 * 
 * Revision 3.1  95/12/29  10:28:14  mark
 * Release
 * 
 * Revision 2.1  95/12/21  09:45:12  mark
 * Release
 * 
 * Revision 1.1  95/08/10  16:46:20  john
 * Initial revision
 * 
 *                                                                           *
 ****************************************************************************/


#include "Bitstream:cm_opt.h"
#define HASHSZ 128

/*  BMAP_ALIGNMENT defines the alignment requirements for pixel rows. */

#ifndef BMAP_ALIGNMENT
#define BMAP_ALIGNMENT 1
#endif

/* BLACK_PIXEL defines the bit value used to represent a black pixel. */

#ifndef BLACK_PIXEL
#define BLACK_PIXEL 1
#endif

/* INVERT_BITMAP is a logical value that indicates if pixel row addresses
   increase as Y increases, or if the bitmap must be inverted */

#ifndef INVERT_BITMAP
#define INVERT_BITMAP 0
#endif

/* CACHE_CAPACITY indicates the number of full em bitmaps we reserve
   space for before disabling the cache for a particular logical font */

#ifndef CACHE_CAPACITY
#define CACHE_CAPACITY 100
#endif

/* Cached Bitmap specifications */

typedef struct cacheSpecs_tag
    {
    long xPos;
    long yPos;
    short xSize;
    short ySize;
    long xEscapement;
    long yEscapement;
    } cacheSpecs_t;

typedef struct chardata_hdr
	{
	struct chardata_hdr *next, *prev;
	struct chardata_hdr *lruprev, *lrunext;
	cacheSpecs_t cacheSpecs;
	} chardata_hdr;

typedef struct memory_seg
	{
	struct memory_seg *next, *prev;
	unsigned long int len;
	} memory_hdr;

typedef struct char_desc_tag
	{
	unsigned short int fontCode;
	unsigned short int charCode;
	} char_desc_t;
	
typedef struct cmGlobals_tag
    {
	ufix32 cacheSize;
    ufix8 *imagedata;
    chardata_hdr *current_char;
    chardata_hdr **hashtable;
    memory_hdr *freelist;
    chardata_hdr *lruhead, *lrutail;
    ufix8 startMasks[8];
    ufix8 endMasks[8];
    ufix8 whiteByte;
    ufix8 blackByte;
    ufix16 bitmapAlignment;
    ufix16 cacheCapacity;
    boolean invertBitmap;
    boolean userEnabled;
    ufix8 blackPixel;
    ufix8 pixelSize;
    ufix16 bytesPerRow;
    } cmGlobals_t; 

GLOBAL_PROTO
void CmOpenBitmap( 
    cspGlobals_t *pCspGlobals,
    long int setwidth_x, 
    long int setwidth_y, 
    long int xorg, 
    long int yorg, 
    short int xsize, 
    short int ysize);

GLOBAL_PROTO
void CmSetBitmapBits(
    cspGlobals_t *pCspGlobals, 
    short y,
    short x1,
    short x2);

GLOBAL_PROTO
void CmSetBitmapPixels(
    cspGlobals_t *pCspGlobals, 
    short y,
    short x,
    short xSize,
    void *pPixels);

GLOBAL_PROTO
void CmCloseBitmap(
    cspGlobals_t *pCspGlobals);

GLOBAL_PROTO
void CmInitializeCache(
    void **pCacheContext,
    long len, 
    char *cacheptr);

GLOBAL_PROTO
void CmInitParams(
    cspGlobals_t *pCspGlobals,
    short int enabled, 
    short int capacity,
    short int pixelColor,
    short int alignment,
    short int inverted);

GLOBAL_PROTO
void CmReinitCache(
    cspGlobals_t *pCspGlobals);

GLOBAL_PROTO
chardata_hdr *CmAllocMem(
    cmGlobals_t *pCmGlobals,
    unsigned short int size);

GLOBAL_PROTO
boolean CmFreeLru(
    cmGlobals_t *pCmGlobals);

GLOBAL_PROTO
chardata_hdr *CmProcessCharacterReq(
    cspGlobals_t *pCspGlobals,
    char_desc_t *preq);

GLOBAL_PROTO
chardata_hdr *CmFindChar(
    cmGlobals_t *pCmGlobals,
    char_desc_t *req);

GLOBAL_PROTO
chardata_hdr *CmMakeChar(
    cspGlobals_t *pCspGlobals,
    cmGlobals_t *pCmGlobals,
    char_desc_t *req);

GLOBAL_PROTO
void CmUpdateLru(
    cmGlobals_t *pCmGlobals,
    chardata_hdr *charptr);


