/*****************************************************************************
*                                                                            *
*                        Copyright 1994 - 95                                 *
*          as an unpublished work by Bitstream Inc., Cambridge, MA           *
*                                                                            *
*         These programs are the sole property of Bitstream Inc. and         *
*           contain its proprietary and confidential information.            *
*                                                                            *
*****************************************************************************/



/************************** S P G L O B A L . H ******************************
 *                                                                           *
 *  Standard Speedo output module global definitions                         *
 *                                                                           *
 ********************** R E V I S I O N   H I S T O R Y **********************
 *                                                                           *
 *  Changes since TrueDoc Release 2.0:                                       *
 *
 *     $Header$
 *                                                                                    
 *     $Log$
 * Revision 4.1  96/03/05  13:47:43  mark
 * Release
 * 
 * Revision 3.1  95/12/29  10:32:14  mark
 * Release
 * 
 * Revision 2.1  95/12/21  09:48:25  mark
 * Release
 * 
 * Revision 1.1  95/08/10  16:53:48  john
 * Initial revision
 * 
 *                                                                           *
 ****************************************************************************/


#ifndef spglobal_h
#define spglobal_h

/* Transformation control block */

typedef struct buff_tag
    {
    ufix8 *org;                   /* Pointer to start of buffer */
    ufix32  no_bytes;              /* Size of buffer in bytes */
    } 
buff_t;                            /* Buffer descriptor */

typedef struct specs_tag
    {
    buff_t *pfont;                 /* Pointer to font data                  */
    fix31   xxmult;                /* Coeff of X orus to compute X pix      */
    fix31   xymult;                /* Coeff of Y orus to compute X pix      */
    fix31   xoffset;               /* Constant to compute X pix             */
    fix31   yxmult;                /* Coeff of X orus to compute Y pix      */
    fix31   yymult;                /* Coeff of Y orus to compute Y pix      */
    fix31   yoffset;               /* Constant to compute Y pix             */
    ufix32  flags;                 /* Mode flags:                           */
                                   /*   Bit  0 - 2: Output module selector: */
                                   /*   Bit  3: Send curves to output module*/
                                   /*   Bit  4: Use linear scaling if set   */
                                   /*   Bit  5: Inhibit constraint table    */
                                   /*   Bit  6: Import set width if set     */
                                   /*   Bit  7:   not used                  */
                                   /*   Bit  8: Squeeze left if set         */
                                   /*   Bit  9: Squeeze right if set        */
                                   /*   Bit 10: Squeeze top if set          */
                                   /*   Bit 11: Squeeze bottom if set       */
                                   /*   Bit 12: Clip left if set            */
                                   /*   Bit 13: Clip right if set           */
                                   /*   Bit 14: Clip top if set             */
                                   /*   Bit 15: Clip bottom if set          */
                                   /*   Bits 16-31   not used               */
    void *out_info;                /* information for output module         */
    }
specs_t;                           /* Specs structure for fw_set_specs      */

typedef struct tcb_tag
    {
    fix31   ctm[4];
    fix15   xxmult;
    fix15   xymult;
    fix31   xoffset;
    fix15   yxmult;
    fix15   yymult;
    fix31   yoffset;
    fix15   xppo;
    fix31   xpos;
    fix15   yppo;
    fix31   ypos;
    fix15   xmode;
    fix15   ymode;
    boolean xHintsActive;
    boolean yHintsActive;
    boolean suppressOvershoots;
    } tcb_t;

typedef struct band_tag
    {
    fix15   band_max;
    fix15   band_min;
    fix15   band_array_offset;
    fix15   band_floor;
    fix15   band_ceiling;
    } band_t;

/* Speedo globals for output module compatibility */
typedef struct sp_globals_tag
    {
    boolean normal;             /* TRUE if 0 obl and mult of 90 deg rot  */
    fix15   multshift;          /* Fixed point shift for multipliers */

    fix15   pixshift;           /* Fixed point shift for sub-pixels */
    fix15   onepix;             /* 1.0 pixels in sub-pixel units */
    fix15   pixrnd;             /* 0.5 in sub-pixel units */
    fix15   pixfix;             /* Mask to remove fractional pixels */

    fix15   mpshift;            /* Fixed point shift for mult to sub-pixels */
    fix31   mprnd;              /* 0.5 sub-pixels in multiplier units */

    fix15   poshift;            /* Left shift from pixel to 16.16 format */

    tcb_t   tcb;                /* Transformation control block */
    fix31   rnd_xmin;           /* Rounded out value of xmin for int-char spac. fix */
        
        struct set_width_tag
        {
        fix31 x;
        fix31 y;
        } set_width;            /* Character escapement vector (16.16 pix) */
   
        band_t  y_band;             /* Y current band(whole pixels) */
    fix15   xmin;               /* Min X value in whole character */
    fix15   xmax;               /* Max X value in whole character */
    fix15   ymin;               /* Min Y value in whole character */
    fix15   ymax;               /* Max Y value in whole character */
    fix15   bmap_xmin;          /* Min X value (sub-pixel units) */
    fix15   bmap_xmax;          /* Max X value (sub-pixel units) */
    fix15   bmap_ymin;          /* Min Y value (sub-pixel units) */
    fix15   bmap_ymax;          /* Max Y value (sub-pixel units) */
    boolean first_pass;         /* TRUE during first pass thru outline data */
    boolean extents_running;    /* T if extent accumulation for each vector */
    fix15   x0_spxl;            /* X coord of current point (sub pixels) */
    fix15   y0_spxl;            /* Y coord of current point (sub pixels) */
    fix15   y_pxl;              /* Y coord of current point (whole pixels) */
        boolean sp_banding_active;  /* Set if current point is outside current band */
        fix15   sp_first_sub_char_offset; /* Index of first intercept in current sub-char */
        fix15   sp_first_contour_offset;  /* Index of first intercept in current contour */
        fix15   sp_sub_band_min;    /* Safe estimate of lowest scanline in current sub_char */
        fix15   sp_sub_band_max;    /* Safe estimate of highest scanline in current sub-char */
        fix15   sp_old_yend;        /* Scanline of last intercept in previous vector */
        boolean sp_clipped_salient; /* Set if salient detected since leaving band */
        boolean sp_clipped_first_salient; /* Set if salient detected outside band before first intercept in current contour */
        boolean sp_intercept_monitoring;  /* Set to test for intercept overflow at each intercept */
        boolean sp_horiz_gap_found; /* Set if horizontal gap detected in current band */
    fix31   no_y_lists;         /* Number of active intercept lists */
    fix15   next_offset;        /* Index of next free list cell */
    boolean intercept_oflo;     /* TRUE if intercepts data lost */
    fix15   max_intercepts;     /* Capacity of intercept list structure */
    fix15  *car;                /* "Car" part of intercept list structure */
    fix15  *cdr;                /* "Cdr" part of intercept list structure */
    ufix8  *inttype;            /* Flags part of intercept list structure */
    } sp_globals_t;

#endif /* ifndef spglobal_h */
/* EOF spglobal.h */

