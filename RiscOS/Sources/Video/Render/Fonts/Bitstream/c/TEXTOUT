/*****************************************************************************
*                                                                            *
*                        Copyright 1993 - 95                                 *
*          as an unpublished work by Bitstream Inc., Cambridge, MA           *
*                                                                            *
*         These programs are the sole property of Bitstream Inc. and         *
*           contain its proprietary and confidential information.            *
*                                                                            *
*****************************************************************************/



/************************** T E X T O U T . C ********************************
 *                                                                           *
 * Character shape player application program interface module.              *
 *                                                                           *
 ********************** R E V I S I O N   H I S T O R Y **********************
 *                                                                           *
 *  Changes since TrueDoc Release 2.0:                                       *
 *
 *     $Header$
 *
 *     $Log$
 * Revision 4.1  96/03/05  13:47:47  mark
 * Release
 *
 * Revision 3.1  95/12/29  10:32:20  mark
 * Release
 *
 * Revision 2.1  95/12/21  09:48:29  mark
 * Release
 *
 * Revision 1.1  95/08/10  16:46:38  john
 * Initial revision
 *
 *                                                                           *
 ****************************************************************************/


#include <stdio.h>
#include "btstypes.h"
#include "csp_api.h"
#include "graphics.h"

#ifndef DEBUG
#define DEBUG   1
#endif

#if DEBUG
#define SHOW(X) printf(#X " = %ld\n", (long)(X))
#define CHECK_STATUS(X) if (status.all) show_status(status, X)
#else
#define SHOW(X)
#define CHECK_STATUS(X)
#endif

#define MAX_BITS        256     /* Max line length of generated bitmap */
#define MAX_BMAP_WIDTH  256
#define MAX_BMAP_HEIGHT 256
#define GRAY_BUFF_SIZE    8

#if REENTRANT
#define USERARG  , userParam
#define USERARG1  userParam
#else
#define USERARG
#define USERARG1
#endif

/* TEMPHACK: Was extern */
static int pixelSize;

static  ufix8   startMask[] = {0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01};
static  ufix8   endMask[]   = {0xff, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe};
static  ufix8   pixelMask[] = {0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};

/* Characters printer for different 3-bit gray levels */
static  char    colorChar[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8'};

static  short int   bmapWidth;      /* Bitmap width  */
static  short int   bmapHeight;     /* Bitmap height */
static  short int   bmapXpos;       /* Bitmap X position */
static  short int   bmapYpos;       /* Bitmap Y position */
static  short int   y_cur;          /* Current y value being generated and printed */
static  char line_of_bits[2 * MAX_BITS]; /* Buffer for row of generated bits */

#if DEBUG
static void ShowBitmap(
    bmapSpecs_t *pBmapSpecs,
    void *pBitmap);
#endif


/******************************************************************************
 *  Stub for initializing graphics output
 ******************************************************************************/
void initiate_graphics (void)
{
}

/******************************************************************************
 * Get dimensions of current display window
 ******************************************************************************/
void GetClipRect(rect_t *clipRect)
{
clipRect->left = 0;
clipRect->top = 0;
clipRect->right = 0;
clipRect->bottom = 0;
}

/******************************************************************************
 * Stub for clearing current display window
 ******************************************************************************/
int clear_graphics(void)
    {
    return 0;
    }

/******************************************************************************
 * Print bitmap image
 ******************************************************************************/
void MySetBitmap(
    bmapSpecs_t bmapSpecs,
	void *pBitmap
    USERPARAM)
/*
 *  This function converts a bitmap into calls to the usual bitmap
 *  painting functions.
 */
{
short   pixPerRow;
short   bytesPerRow;
long    bitsPerRow;
ufix8  *pRow;
ufix8  *pByte;
short   y;
long    bitOffset;
long    bitsLeft;
ufix8   byte;
ufix8   mask;
short   bitsTested;
short   shift;
short   nGrays;
ufix8   buffer[GRAY_BUFF_SIZE];
short   pixOffset, startPixOffset;
short   byteOffset;
ufix8   lastByteMask;
ufix8  *pLastByte;

#if DEBUG >= 2
printf("\nMySetBitmap():\n");
ShowBitmap(&bmapSpecs, pBitmap);
#endif

MyOpenBitmap(bmapSpecs USERARG);

y_cur = bmapSpecs.yPos;         /* Fix y_cur for first scanline */

pixPerRow = bmapSpecs.xSize;
bitsPerRow = (long)bmapSpecs.xSize * pixelSize;
bytesPerRow = (bitsPerRow + 7) / 8; /* Assumes byte alignment */
for(y = 0, pRow = (ufix8 *)pBitmap;
    y < bmapSpecs.ySize;
    y++, pRow += bytesPerRow)   /* For each row... */
    {
    bitOffset = 0L;
    pixOffset = 0;
    pLastByte = pRow + bytesPerRow - 1;
    lastByteMask = endMask[bitsPerRow & 7];

    /* Collect a run of zero or more gray pixels */
L1:
    startPixOffset = pixOffset;
    nGrays = 0;
    while (bitOffset < bitsPerRow)
        {
        byteOffset = bitOffset >> 3;
        pByte = pRow + byteOffset;
        shift = 8 - (bitOffset & 7) - pixelSize;
        if (shift == 0)
            {
            byte = *pByte;
            }
        else if (shift > 0)
            {
            byte = *pByte >> shift;
            }
        else
            {
            byte = (*pByte << -shift) + (*(pByte + 1) >> (8 + shift));
            }
        byte &= pixelMask[pixelSize];
        if ((byte == 0) || (byte == pixelMask[pixelSize]))
            {
            if (nGrays > 0)
                {
                MySetBitmapPixels(
                    bmapSpecs.yPos + y,
                    bmapSpecs.xPos + pixOffset,
                    nGrays,
                    buffer
                    USERARG);
                pixOffset += nGrays;
                }
            if (byte == 0)
                {
                goto L2;
                }
            else
                {
                goto L3;
                }
            }

        buffer[nGrays++] = byte;

        if (nGrays >= GRAY_BUFF_SIZE)
            {
            MySetBitmapPixels(
                bmapSpecs.yPos + y,
                bmapSpecs.xPos + pixOffset,
                nGrays,
                buffer
                USERARG);
            pixOffset += nGrays;
            nGrays = 0;
            }
        bitOffset += pixelSize;
        }
    if (nGrays > 0)
        {
        MySetBitmapPixels(
            bmapSpecs.yPos + y,
            bmapSpecs.xPos + pixOffset,
            nGrays,
            buffer
            USERARG);
        pixOffset += nGrays;
        }
    continue;

    /* Collect a run of at least one white pixel */
L2:
    bitsLeft = bitsPerRow - bitOffset;
    pByte = pRow + (bitOffset >> 3);
    mask = startMask[bitOffset & 0x07];
    bitsTested = 8 - (bitOffset & 0x07);
    while (bitsLeft > 0)
        {
        /* Get byte with irrelevant bits masked to zero */
        if (pByte != pLastByte)
            {
            byte = *(pByte++) & mask;
            }
        else
            {
            byte = *pByte & mask & lastByteMask;
            }

        if (byte != 0)          /* Not all white? */
            {
            bitOffset = bitsPerRow - bitsLeft;
            byte <<= bitOffset & 0x07;
            while ((byte & 0x80) == 0)
                {
                byte <<= 1;
                bitOffset += 1;
                }
            pixOffset = (short)(bitOffset / pixelSize);
            bitOffset = (long)pixOffset * pixelSize;
            goto L1;
            }
        bitsLeft -= bitsTested;
        mask = 0xff;
        bitsTested = 8;
        }
    continue;                   /* Continue with next row */

    /* Collect run of at least one black pixel */
L3:
    startPixOffset = pixOffset;
    bitsLeft = bitsPerRow - bitOffset;
    mask = ~startMask[bitOffset & 0x07];
    bitsTested = 8 - (bitOffset & 0x07);
    pByte = pRow + (bitOffset >> 3);
    while (TRUE)
        {
        if (pByte != pLastByte)
            {
            byte = *(pByte++) | mask;
            }
        else
            {
            byte = *pByte | mask | ~lastByteMask;
            }
        if (byte != 0xff)
            {
            bitOffset = bitsPerRow - bitsLeft;
            byte <<= bitOffset & 0x07;
            while (byte & 0x80)
                {
                byte <<= 1;
                bitOffset += 1;
                }
            pixOffset = (short)(bitOffset / pixelSize);
            bitOffset = (long)pixOffset * pixelSize;

            MySetBitmapBits(
                bmapSpecs.yPos + y,
                bmapSpecs.xPos + startPixOffset,
                bmapSpecs.xPos + pixOffset
                USERARG);

            goto L1;
            }

        bitsLeft -= bitsTested;
        if (bitsLeft <= 0)
            {
            MySetBitmapBits(
                bmapSpecs.yPos + y,
                bmapSpecs.xPos + startPixOffset,
                bmapSpecs.xPos + pixPerRow
                USERARG);
            break;
            }
        mask = 0x00;
        bitsTested = 8;
        }
    continue;
    }

MyCloseBitmap(USERARG1);
}

/******************************************************************************
 * Start bitmap output
 ******************************************************************************/
void MyOpenBitmap(
    bmapSpecs_t bmapSpecs
    USERPARAM)
{
int   i;

#if DEBUG >= 2
printf("\nMyOpenBitmap():\n");
ShowBitmap(&bmapSpecs, NULL);
#endif

printf("\n\nGENERATED BITMAP CHARACTER:\n");
printf("Bitmap origin at (%hd, %hd) pixels\n",
    bmapSpecs.xPos,
    bmapSpecs.yPos);
printf("Bitmap image is %hd pixels wide by %hd pixels high\n",
    bmapSpecs.xSize,
    bmapSpecs.ySize);

printf("\n");
bmapWidth = bmapSpecs.xSize;
bmapHeight = bmapSpecs.ySize;
if ((bmapWidth < MAX_BMAP_WIDTH) &&
    (bmapHeight < MAX_BMAP_HEIGHT))
    {
    for (i = 0; i < bmapWidth; i++)
        {
        line_of_bits[i << 1] = '.';
        line_of_bits[(i << 1) + 1] = ' ';
        }
    line_of_bits[bmapWidth << 1] = '\0';
    y_cur = bmapSpecs.yPos + bmapSpecs.ySize - 1;
    }
else
    {
    printf("Bitmap too big to print\n");
    }
bmapWidth = bmapSpecs.xSize;
bmapHeight = bmapSpecs.ySize;
bmapXpos = bmapSpecs.xPos;
bmapYpos = bmapSpecs.yPos;
y_cur = bmapYpos;
}

/******************************************************************************
 * Print a horizontal row of black pixels as text
 ******************************************************************************/
void MySetBitmapBits(
    short y,
    short xStart,
    short xEnd
    USERPARAM)
{
int   i;

#if DEBUG >= 2
printf("MySetBitmapBits(%hd, %hd, %hd)\n",
    y, xStart, xEnd);
#endif

if ((bmapWidth < MAX_BMAP_WIDTH) &&
    (bmapHeight < MAX_BMAP_HEIGHT))
    {
    while (y_cur != y)
        {
        printf("    %s\n", line_of_bits);
        for (i = 0; i < bmapWidth; i++)
            {
            line_of_bits[i << 1] = '.';
            }
        if (y_cur < y)
            y_cur++;
        else
            y_cur--;
        }
    for (i = xStart; i < xEnd; i++)
        {
        line_of_bits[(i - bmapXpos) << 1] = 'X';
        }
    }
}

/******************************************************************************
 * Print a horizontal row of gray pixels as text
 ******************************************************************************/
void MySetBitmapPixels(
    short y,
    short xStart,
    short xSize,
    void *pPixels
    USERPARAM)
{
unsigned char   color;
int     i;

#if DEBUG >= 2
printf("MySetBitmapPixels(%hd, %hd, %hd)\n",
    y, xStart, xSize);
#endif

if ((bmapWidth < MAX_BMAP_WIDTH) &&
    (bmapHeight < MAX_BMAP_HEIGHT))
    {
    while (y_cur != y)
        {
        printf("    %s\n", line_of_bits);
        for (i = 0; i < bmapWidth; i++)
            {
            line_of_bits[i << 1] = '.';
            }
        if (y_cur < y)
            y_cur++;
        else
            y_cur--;
        }
    for (i = 0; i < xSize; i++)
        {
        int     shift;
        int     round;

        color = *((unsigned char *)pPixels + i);
        shift = pixelSize - 3;
        if (shift >= 0)
            {
            round = (1 << shift) >> 1;
            color = (color + round) >> shift;
            }
        else
            {
            color = color << -shift;
            }
        line_of_bits[(xStart + i - bmapXpos) << 1] = colorChar[color];
        }
    }
}

/******************************************************************************
 * End bitmap output
 ******************************************************************************/
void MyCloseBitmap(USERPARAM1)
{
#if DEBUG >= 2
printf("\nMyCloseBitmap()\n");
#endif

if ((bmapWidth < MAX_BMAP_WIDTH) &&
    (bmapHeight < MAX_BMAP_HEIGHT))
    {
    printf("    %s\n", line_of_bits);
    }
}

/******************************************************************************
 * Terminate graphics mode
 ******************************************************************************/
int terminate_graphics (void)
{
}

#if DEBUG
static void ShowBitmap(
    bmapSpecs_t *pBmapSpecs,
    void *pBitmap)
{
short   ii, jj;
short   bytesPerRow;
ufix8  *pRow;

/* Show bitmap position and dimensions */
printf ("    X position = %d\n", (int)pBmapSpecs->xPos);
printf ("    Y position = %d\n", (int)pBmapSpecs->yPos);
printf ("    X size = %d\n", (int)pBmapSpecs->xSize);
printf ("    Y size = %d\n", (int)pBmapSpecs->ySize);

if (pBitmap == NULL)
    return;

/* Show the bitmap itself */
pRow = pBitmap;
bytesPerRow = ((pBmapSpecs->xSize * pixelSize) + 7) / 8;
for (ii = 0; ii < pBmapSpecs->ySize; ii++)
    {
    printf("%6d: ", ii);
    for (jj = 0; jj < bytesPerRow; jj++)
        {
        printf("%0.2x ", *((ufix8 *)pRow + jj));
        }
    printf("\n");
    pRow += bytesPerRow;
    }
}
#endif


