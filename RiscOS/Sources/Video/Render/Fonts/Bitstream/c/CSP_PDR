/*****************************************************************************
*                                                                            *
*                        Copyright 1993 - 95                                 *
*          as an unpublished work by Bitstream Inc., Cambridge, MA           *
*                                                                            *
*         These programs are the sole property of Bitstream Inc. and         *
*           contain its proprietary and confidential information.            *
*                                                                            *
*****************************************************************************/



/************************* P D R E A D E R . C *******************************
 *                                                                           *
 * TrueDoc portable document interpreter                                     *
 *                                                                           *
 ********************** R E V I S I O N   H I S T O R Y **********************
 *                                                                           *
 *  Changes since TrueDoc Release 2.0:                                       *
 *
 *     $Header$
 *                                                                                    
 *     $Log$
 * Revision 4.1  96/03/05  13:46:15  mark
 * Release
 * 
 * Revision 3.1  95/12/29  10:29:57  mark
 * Release
 * 
 * Revision 2.1  95/12/21  09:46:50  mark
 * Release
 * 
 * Revision 1.1  95/08/10  16:46:00  john
 * Initial revision
 * 
 *                                                                           *
 ****************************************************************************/

#include <string.h>
#include "csp_api.h"
#include "graphics.h"
#include "csp_pdr.h"

extern char	   *pTextBuff;		/* Portable document text buffer */
extern long     textBuffSize;
extern int      pixelSize;      /* Bits per pixel */

long 	xPosPix;        /* Current X position in 16.16 pix */
long  	yPosPix;        /* Current Y position in 16.16 pix */

#if REENTRANT
extern void *pCacheContext;
extern void *pCspContext;
#define PCONT pCspContext,
#else
#define PCONT
#endif

#define PDEOF 0
#define PDPAGESIZE 1
#define PDCOORDUNITS 2
#define PDSEPARATOR 3
#define PDFONT 4
#define PDTEXT 7
#define PDWIDETEXT 8
#define PDUNIMPLEMENTED -1

struct PdTypesTag
    {
    int val;
    char *text;
    } PdTypes[] = {
    PDEOF, "EOF", 
    PDPAGESIZE, "PAGESIZE",
    PDCOORDUNITS, "UNITS",
    PDSEPARATOR , "PAGEBREAK",
    PDFONT, "FONT",
    PDTEXT, "TEXT",
    PDWIDETEXT, "WIDETEXT",
    PDEOF, "FONT RESOURCE"
    };

#define NUMTYPES sizeof(PdTypes) / sizeof (struct PdTypesTag)  

#define MAX_STRING_SIZE 80

static long 	textBuffOffset;

/***** Local function prototypes *****/

LOCAL_PROTO
int PdrSetOutputSpecs(
	long ctm[],
	rect_t *pRect);

LOCAL_PROTO 
int PdrReadInt(void);

LOCAL_PROTO 
int PdrReadType(void);

LOCAL_PROTO 
int PdrFindOpen(void);

LOCAL_PROTO 
unsigned char GetNextChar(void);

LOCAL_PROTO 
unsigned char *GetNextString(
	unsigned char *stringBuff, 
	int maxLength,
	int *pDone);
	
LOCAL_PROTO 
long int GetNextWideChar(void);

LOCAL_PROTO
long LongMult(
    long x,
    long y);

                 

/******************************************************************************
/* Render image of document in test format in current grafport
 ******************************************************************************/
int ShowPortableDoc(
	long baseCtm[],
	rect_t *pRect)
/*
 *  Interprets Bitstream portable document.
 *  Returns:
 *      0: No error
 *      1: CspSetOutputSpecs() returned error
 *      2: CspSetFont() returned error
 *      3: Couldn't find '<' after PDTEXT or PDWIDETEXT header
 *      4: CspDoChar() returned error
 */
{
int 	RecordType;
int		PdUnits;
unsigned short pdFont;
unsigned char 	byte;
long int tmpFix;
long	ctm[6];
short  	xPosDoc;        /* Current X position in whole doc coords */
short 	yPosDoc;        /* Current Y position in whole doc coords */
unsigned char stringBuff[MAX_STRING_SIZE];
int     done;
int		errCode;

/* Set up default output specifications */
xPosPix = yPosPix = 0;
textBuffOffset = 0;
while((RecordType = PdrReadType()) != PDEOF)
    {               
    switch (RecordType)
    	{
    case PDPAGESIZE:
        PdrReadInt();
        PdrReadInt();
        break;
            
    case PDCOORDUNITS:
        PdUnits = PdrReadInt(); /* Doc units per inch */
        ctm[0] = baseCtm[0] / PdUnits;
        ctm[1] = baseCtm[1] / PdUnits;
        ctm[2] = baseCtm[2] / PdUnits;
        ctm[3] = baseCtm[3] / PdUnits;
        ctm[4] = baseCtm[4];
        ctm[5] = baseCtm[5];
        errCode = PdrSetOutputSpecs(ctm, pRect);
        if (errCode != 0)
            return 1;
        break;
            
    case PDFONT:
        pdFont = PdrReadInt();
        errCode = CspSetFont(PCONT pdFont);
        if (errCode != 0)
            return 2;
        break;
            
    case PDSEPARATOR:
        break;
            
    case PDTEXT:
      	xPosDoc = PdrReadInt();
        yPosDoc = PdrReadInt();
        xPosPix = xPosDoc * ctm[0] + yPosDoc * ctm[2] + ctm[4];
#if INCL_TPS
        yPosPix = xPosDoc * ctm[1] + yPosDoc * -ctm[3] + ctm[5];
#else
        yPosPix = xPosDoc * ctm[1] + yPosDoc * ctm[3] + ctm[5];
#endif

        if (PdrFindOpen() != 0)
            return 3;
        done = 0;
        do
        	{
	        errCode = CspDoString(
	            PCONT
	            0,
	            0,
	            (void *)GetNextString(stringBuff, MAX_STRING_SIZE, &done), 
	            &xPosPix, 
	            &yPosPix);
	        
	        if (errCode != 0 && errCode != CSP_CHAR_CODE_ERR)
	            return 4;
	        } while (done == 0);
        break;

    case PDWIDETEXT:
      	xPosDoc = PdrReadInt();
        yPosDoc = PdrReadInt();
        xPosPix = xPosDoc * ctm[0] + yPosDoc * ctm[2] + ctm[4];
#if INCL_TPS
        yPosPix = xPosDoc * ctm[1] + yPosDoc * -ctm[3] + ctm[5];
#else
        yPosPix = xPosDoc * ctm[1] + yPosDoc * ctm[3] + ctm[5];
#endif
        if (PdrFindOpen() != 0)
    		return 3;
       	while((tmpFix = GetNextWideChar()) != -1)
         	{
            errCode = CspDoChar(PCONT (unsigned short)tmpFix, &xPosPix, &yPosPix);
           	if (errCode != 0)
                return 4;
            }
        break;
        }
    }
return 0;
}

/******************************************************************************
 * GetDocExtent
 ******************************************************************************/
void GetDocExtent(
	long baseCtm[],
	unsigned short *xSize,
	unsigned short *ySize)
{
int 	RecordType;
int		PdUnits;
long	ctm[4];           /* offsets are ignored for extent, so only 4 elements */
short  	xPosDoc;        /* Current X position in whole doc coords */
short 	yPosDoc;        /* Current Y position in whole doc coords */
long	scaleFactor;

/* Set up default output specifications */
textBuffOffset = 0;
while((RecordType = PdrReadType()) != PDEOF)
    {               
    switch (RecordType)
       	{
        case PDPAGESIZE:
            xPosDoc = PdrReadInt();
            yPosDoc = PdrReadInt();
            *xSize = (unsigned short)((xPosDoc * ctm[0] + yPosDoc * ctm[2])>>16);
#if INCL_TPS
            *ySize = (unsigned short)((xPosDoc * ctm[1] + yPosDoc * -ctm[3])>>16);
#else
            *ySize = (unsigned short)((xPosDoc * ctm[1] + yPosDoc * ctm[3])>>16);
#endif

            break;
            
        case PDCOORDUNITS:
            PdUnits = PdrReadInt(); /* Doc units per inch */
            scaleFactor = ((1L << 16) + (PdUnits >> 1)) / PdUnits;
            ctm[0] = LongMult(scaleFactor, baseCtm[0]);
            ctm[1] = LongMult(scaleFactor, baseCtm[1]);
            ctm[2] = LongMult(scaleFactor, baseCtm[2]);
            ctm[3] = LongMult(scaleFactor, baseCtm[3]);
            break;
            
        case PDFONT:
            break;
            
        case PDSEPARATOR:
            break;
            
        case PDTEXT:
            break;
        }
    }
}

/******************************************************************************
 * PdrSetOutputSpecs
 ******************************************************************************/
static int PdrSetOutputSpecs(
	long ctm[],
	rect_t *pRect)
{
outputSpecs_t outputSpecs;
int		errCode;

#if INCL_TPS
outputSpecs.outputType = DIRECT_OUTPUT;
outputSpecs.direct.outputMatrix[0] = ctm[0];
outputSpecs.direct.outputMatrix[1] = ctm[1];
outputSpecs.direct.outputMatrix[2] = ctm[2];
outputSpecs.direct.outputMatrix[3] = ctm[3];
outputSpecs.direct.pOptions = NULL;
outputSpecs.direct.InitOut = (void (*)())sp_init_black;
outputSpecs.direct.BeginChar = (void (*)())sp_begin_char_black;
outputSpecs.direct.BeginSubChar = (void (*)())sp_begin_sub_char_out;
outputSpecs.direct.BeginContour = (void (*)())sp_begin_contour_black;
outputSpecs.direct.CurveTo = (void (*)())NULL;
outputSpecs.direct.LineTo = (void (*)())sp_line_black;
outputSpecs.direct.EndContour = (void (*)())sp_end_contour_out;
outputSpecs.direct.EndSubChar = (void (*)())sp_end_sub_char_out;
outputSpecs.direct.EndChar = (void (*)())sp_end_char_black;
#else
#if INCL_ANTIALIASED_OUTPUT
if (pixelSize != 1)
    {
    outputSpecs.outputType = ANTIALIASED_OUTPUT;
    outputSpecs.specs.pixmap.outputMatrix[0] = ctm[0];
    outputSpecs.specs.pixmap.outputMatrix[1] = ctm[1];
    outputSpecs.specs.pixmap.outputMatrix[2] = ctm[2];
    outputSpecs.specs.pixmap.outputMatrix[3] = ctm[3];

    outputSpecs.specs.pixmap.pixelSize = (short)pixelSize;

    outputSpecs.specs.pixmap.outputBBox.xmin = pRect->left;
    outputSpecs.specs.pixmap.outputBBox.ymin = pRect->top;
    outputSpecs.specs.pixmap.outputBBox.xmax = pRect->right;
    outputSpecs.specs.pixmap.outputBBox.ymax = pRect->bottom;

    outputSpecs.specs.pixmap.SetBitmap = MySetBitmap;
    outputSpecs.specs.pixmap.OpenBitmap = MyOpenBitmap;
    outputSpecs.specs.pixmap.SetBitmapBits = MySetBitmapBits;
    outputSpecs.specs.pixmap.CloseBitmap = MyCloseBitmap;
    outputSpecs.specs.pixmap.SetBitmapPixels = MySetBitmapPixels;
    }
else
#endif  /* INCL_ANTIALIASED_OUTPUT */
    {
    outputSpecs.outputType = BITMAP_OUTPUT;
    outputSpecs.specs.bitmap.outputMatrix[0] = ctm[0];
    outputSpecs.specs.bitmap.outputMatrix[1] = ctm[1];
    outputSpecs.specs.bitmap.outputMatrix[2] = ctm[2];
    outputSpecs.specs.bitmap.outputMatrix[3] = ctm[3];

    outputSpecs.specs.bitmap.outputBBox.xmin = pRect->left;
    outputSpecs.specs.bitmap.outputBBox.ymin = pRect->top;
    outputSpecs.specs.bitmap.outputBBox.xmax = pRect->right;
    outputSpecs.specs.bitmap.outputBBox.ymax = pRect->bottom;

    outputSpecs.specs.bitmap.SetBitmap = MySetBitmap;
    outputSpecs.specs.bitmap.OpenBitmap = MyOpenBitmap;
    outputSpecs.specs.bitmap.SetBitmapBits = MySetBitmapBits;
    outputSpecs.specs.bitmap.CloseBitmap = MyCloseBitmap;
    }
#endif

errCode = CspSetOutputSpecs(PCONT &outputSpecs);
if (errCode != 0)
    {
    return 1;
    }
return 0;
}

/******************************************************************************
 * Read integer from portable document 
 ******************************************************************************/
static int PdrReadInt(void)
{
int value = 0;
char byte;

if (PdrFindOpen() != 0)
    return -1;

while ((byte = pTextBuff[textBuffOffset++]) != '>')
    {
    if (byte < '0' || byte > '9')
    	{
        return 0;
        }
    value = value * 10 + byte - '0';
    }
return value;
}

/******************************************************************************
 * Read type record
 ******************************************************************************/
static int PdrReadType(void)
{
int i;
char *pTag;
int		stringLength;

if (PdrFindOpen() != 0)
    return -1;

pTag = &(pTextBuff[textBuffOffset]);
stringLength = 0;
while (pTextBuff[textBuffOffset++] != '>')
	{
	if (textBuffOffset >= textBuffSize)
		{
		return PDEOF;
		}
	stringLength++;	
    }

for (i = 0; i < NUMTYPES; i++)
    {
    if ((strncmp(pTag, PdTypes[i].text, stringLength) == 0) &&
    	(PdTypes[i].text[stringLength] == 0))
        {
        return PdTypes[i].val;
        }
    }
    
return PDUNIMPLEMENTED;
}

/******************************************************************************
 * Find start of record
 ******************************************************************************/
static int PdrFindOpen(void) 
{
while (textBuffOffset < textBuffSize)
	{
	if (pTextBuff[textBuffOffset++] == '<')
		{
		return 0;
		}	
    }
                  
return 1;
} 

/******************************************************************************
 * return next character in a string - check for doubled close angles.
 ******************************************************************************/
static unsigned char GetNextChar(void)
{
unsigned char byte;
if ((byte = pTextBuff[textBuffOffset++]) == '>')
    {
    if (pTextBuff[textBuffOffset] == '>')  /* is it doubled ?? */
        {
        textBuffOffset++;
        }
    else
        byte = '\0';
    }
return byte;
}

/******************************************************************************
 * return next section of a string - check for doubled close angles.
 ******************************************************************************/
static unsigned char *GetNextString(
	unsigned char *stringBuff, 
	int maxLength,
	int *pDone)
{
int ii;
unsigned char byte;

for (ii = 0; ii < maxLength - 1; ii++)
	{
	if ((byte = pTextBuff[textBuffOffset++]) == '>')
    	{
    	if (pTextBuff[textBuffOffset] == '>')  /* is it doubled ?? */
        	{
        	textBuffOffset++;
        	}
    	else
    		{
    		*pDone = 1;
			stringBuff[ii] = '\0';
			return stringBuff;
       	 	}
    	}
    stringBuff[ii] = byte;
    }
    
stringBuff[ii] = '\0';
return stringBuff;
}

/******************************************************************************
 * return next hex encoded wide character in a string.
 ******************************************************************************/
static long int GetNextWideChar(void)
{
long int val = 0;
unsigned char byte;
int i;

if (pTextBuff[textBuffOffset] == '>')
    {
    textBuffOffset++;
    return -1;
    }

for (i = 0; i < 4; i++)
    {
    byte = pTextBuff[textBuffOffset++];
    if (byte > '9')
        val = (val << 4) + (long)(byte - 'A' + 10);
    else
        val = (val << 4) + (long)(byte - '0');
    }
return val;
}

/******************************************************************************
 * Multiply a pair of 16.16 fixed point numbers
 ******************************************************************************/
static long LongMult(
    long x,
    long y)
{
unsigned long xLo;
long xHi;
unsigned long yLo;
long yHi;

xLo = x & 0x0000ffff;
xHi = x >> 16;
yLo = y & 0x0000ffff;
yHi = y >> 16;

return
    ((xLo * yLo) >> 16) +
    (xLo * yHi) +
    (xHi * y);
}

