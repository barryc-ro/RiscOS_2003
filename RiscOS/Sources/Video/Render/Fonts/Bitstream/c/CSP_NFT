/*****************************************************************************
*                                                                            *
*                        Copyright 1995                                      *
*          as an unpublished work by Bitstream Inc., Cambridge, MA           *
*                                                                            *
*         These programs are the sole property of Bitstream Inc. and         *
*           contain its proprietary and confidential information.            *
*                                                                            *
*****************************************************************************/



/*************************** C S P _ N F T . C *******************************
 *                                                                           *
 * Character shape player functions for finding physical fonts by fontID and *
 * creating and disposing of dynamic logical fonts                           *
 *                                                                           *
 ********************** R E V I S I O N   H I S T O R Y **********************
 *                                                                           *
 *  Changes since TrueDoc Release 2.0:                                       *
 *
 *     $Header$
 *                                                                                    
 *     $Log$
 * Revision 4.1  96/03/05  13:46:02  mark
 * Release
 * 
 * Revision 3.1  95/12/29  10:29:42  mark
 * Release
 * 
 * Revision 2.1  95/12/21  09:46:37  mark
 * Release
 * 
 * Revision 1.1  95/08/10  16:45:19  john
 * Initial revision
 * 
 *                                                                           *
 ****************************************************************************/

#ifndef CSP_DEBUG
#define CSP_DEBUG   0
#endif

#if CSP_DEBUG
#include <stdio.h>
#endif

#include "csp_int.h"                    /* Public and internal header */

#if PROC_TRUEDOC || ! INCL_TPS
#if CSP_MAX_DYNAMIC_FONTS > 0

#if INCL_CACHE
#include "cachemgr.h"
#endif

#if CSP_DEBUG
#include "csp_dbg.h"
#endif

/* Multiplier for font ID hash table size */
#ifndef FONT_ID_HASH_FACTOR
#define FONT_ID_HASH_FACTOR     4
#endif


/* Local function prototypes */

LOCAL_PROTO
int ProcFontAttributes(
    fontAttributes_t *pFontAttributes, 
    fix31 scaleFactor);

LOCAL_PROTO
int AdjustNewFontBBox(
    cspGlobals_t *pCspGlobals,
    newFont_t *pNewFont);

LOCAL_PROTO
int AdjustNewFontCharCount(
    cspGlobals_t *pCspGlobals,
    newFont_t *pNewFont);

LOCAL_PROTO
int FindPhysicalFont(
    cspGlobals_t *pCspGlobals,
    ufix8 *pFontID,
    fix31 *pHashIndex);

LOCAL_PROTO
boolean MatchFontID(
    ufix8 *pFontID1,
    ufix8 *pFontID2);

LOCAL_PROTO
int FindNewFontChar(
    cspGlobals_t *pCspGlobals,
    newFont_t *pNewFont,
    ufix16 *pCharCode,
    ufix8 **ppByte);



FUNCTION
fix31 CspSizeNewFontTables(
    pfrHeaderData_t *pPfrHeaderData)
/*
 *  Determines memory requirements for the tables required to support
 *  dynamic font creation.
 *  The tables are:
 *
 *      Physical font table
 *      Font ID table
 *      New font table
 *  
 *  Returns the total bytes of memory needed.
 */
{
fix31   size;

size = 0;

size += 
    pPfrHeaderData->totalPhysFonts * 
    (sizeof(physFont_t) + STRUCTALIGN - 1);

size += 
    pPfrHeaderData->totalPhysFonts * 
    FONT_ID_HASH_FACTOR * 
    (sizeof(ufix16) + STRUCTALIGN - 1);

size +=
    (CSP_MAX_DYNAMIC_FONTS + 1) * 
    (sizeof(newFont_t) + STRUCTALIGN - 1);

return size;
}

FUNCTION
int CspSetupNewFontTables(
    cspGlobals_t *pCspGlobals,
    pfrHeaderData_t *pPfrHeaderData)
/*
 *  Allocates space in the main memory buffer and sets the tables
 *  required to support dynamic font creation.
 *  The tables are:
 *
 *      Physical font table
 *      Font ID table
 *      New font table
 *
 *  Assumes that all of the mechanisms for loading logical and physical 
 *  fonts have been set up prior to calling this function.
 *  
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_BUFFER_OVERFLOW_ERR  2  Memory buffer overflow 
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 */
{
fix31   totalPhysFonts;
fix31   fontIDtableSize;
fix31   ii;
ufix8   pFontID[256];
fix15   jj;
ufix8  *pSource;
ufix8  *pDest;
ufix16  nLogFonts;
ufix16  nPhysFonts;
ufix16  baseFontRefNumber;
fix15   pfrCode;
ufix16  fontCode;
ufix16  nextPhysFont;
fix31   hashIndex;
int     errCode;

/* Allocate space for physical font table */
totalPhysFonts = pPfrHeaderData->totalPhysFonts;
pCspGlobals->pPhysFontTable = (physFont_t *)(CspAllocFixedLo(
    pCspGlobals,
    totalPhysFonts * sizeof(physFont_t)));
if (pCspGlobals->pPhysFontTable == NULL)
    return CSP_BUFFER_OVERFLOW_ERR;

/* Allocate space for font ID table */
fontIDtableSize = totalPhysFonts * FONT_ID_HASH_FACTOR;
pCspGlobals->pFontIDtable = (ufix16 *)(CspAllocFixedLo(
    pCspGlobals,
    fontIDtableSize * sizeof(ufix16)));
if (pCspGlobals->pFontIDtable == NULL)
    return CSP_BUFFER_OVERFLOW_ERR;

/* Allocate space for new font table */
pCspGlobals->pNewFontTable = (newFont_t *)(CspAllocFixedLo(
    pCspGlobals,
    (CSP_MAX_DYNAMIC_FONTS + 1) * sizeof(newFont_t)));
if (pCspGlobals->pNewFontTable == NULL)
    return CSP_BUFFER_OVERFLOW_ERR;

/* Clear physical font table */
for (ii = 0; ii < totalPhysFonts; ii++)
    {
    pCspGlobals->pPhysFontTable[ii].size = 0;
    }

/* Clear font ID table */
for (ii = 0; ii < fontIDtableSize; ii++)
    {
    pCspGlobals->pFontIDtable[ii] = 0xffff;
    }

/* Clear new font table */
for (ii = 0; ii < (CSP_MAX_DYNAMIC_FONTS + 1); ii++)
    {
    pCspGlobals->pNewFontTable[ii].fontCode = 0xffff;
    }
pCspGlobals->nNewFonts = 0;
pCspGlobals->nextNewFontCode = pCspGlobals->nLogicalFonts;

/* Set up physical font directory tables */
baseFontRefNumber = 0;
for (pfrCode = 0; pfrCode < pCspGlobals->nPfrs; pfrCode++)
    {
    nPhysFonts = pCspGlobals->pfrTable[pfrCode].nPhysFonts;
    if (nPhysFonts <= 0)
        continue;
    nLogFonts = pCspGlobals->pfrTable[pfrCode].nLogicalFonts;
    for (fontCode = 0; fontCode < nLogFonts; fontCode++)
        {
        errCode = CspLoadLogicalFont(
            pCspGlobals, 
            pfrCode, 
            (ufix16)(fontCode + pCspGlobals->pfrTable[pfrCode].baseFontCode));
        if (errCode != 0)
            return errCode;
        ii = baseFontRefNumber + pCspGlobals->fontRefNumber;
        if ((pCspGlobals->fontInfo.pFontID != NULL) &&
            (pCspGlobals->pPhysFontTable[ii].size == 0))
            {
            pCspGlobals->pPhysFontTable[ii].nextPhysFont = 0xffff;
            pCspGlobals->pPhysFontTable[ii].pfrCode = pfrCode;
            pCspGlobals->pPhysFontTable[ii].offset = pCspGlobals->physFontOffset;
            pCspGlobals->pPhysFontTable[ii].size = pCspGlobals->physFontSize;

            /* Make copy of font ID (in case physical font disappears) */
            pSource = (ufix8 *)pCspGlobals->fontInfo.pFontID;
            pDest = pFontID;
            for (jj = 0; (jj < 255) && (*pSource != 0); jj++)
                {
                *(pDest++) = *(pSource++);
                }
            *pDest = 0;

            /* Find and load matching physical font */
            errCode = FindPhysicalFont(
                pCspGlobals, 
                pFontID,
                &hashIndex);
            if (errCode != 0)
                return errCode;
            nextPhysFont = pCspGlobals->pFontIDtable[hashIndex];
            if (nextPhysFont != 0xffff)
                {
                pCspGlobals->pPhysFontTable[ii].nextPhysFont =
                    nextPhysFont;
                }
            pCspGlobals->pFontIDtable[hashIndex] = (ufix16)ii;
            }
        }
    baseFontRefNumber += nPhysFonts;
    }

#if CSP_DEBUG
if (baseFontRefNumber != pCspGlobals->nPhysFonts)
    {
    printf("*** SetupPhysFontDir: Internal error\n");
    }
#endif

#if CSP_DEBUG >= 2
ShowPhysFontTable(pCspGlobals);
ShowFontIDtable(pCspGlobals, fontIDtableSize);
#endif

/* Mark no logical font selected */
pCspGlobals->fontCode = 0xffff;

return CSP_NO_ERR;
}



FUNCTION
int CspCreateNewFont(
    cspGlobals_t *pCspGlobals,
    char *pFontID,
    short attrOutlRes,
    fontAttributes_t *pFontAttributes,
    unsigned short *pFontCode)
/*
 *  Creates a new dynamic logical font based on the physical font with 
 *  the specified font ID and the specified attributes.
 *  The values in the attributes structure are based on the specified
 *  attrOutlRes. These values are scaled to be in accordance with 
 *  the actual top-level physical font.
 *  Sets *pFontCode to the global logical font code of the new font.
 *  The newly created font is _not_ selected.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 *      CSP_FONT_STYLE_ERR       9  Illegal value for fontStyle
 *      CSP_LINE_JOIN_TYPE_ERR  10  Illegal value for lineJoinType
 *      CSP_FONT_ID_ERR         12  Font ID not found
 *      CSP_DYN_FONT_OFLO_ERR   13  Dynamic font table overflow
 */
{
fix15   physFontPfrCode;
fix31   physFontOffset;
fix31   physFontSize;
fix31   hashIndex;
ufix16  physFontCode;
ufix16  newFontCode;
fix15   outlineResolution;
newFont_t *pNewFont;
fix31   scaleFactor;
int     errCode;

/* Check there is room for the new font */
if (pCspGlobals->nNewFonts >= CSP_MAX_DYNAMIC_FONTS)
    return CSP_DYN_FONT_OFLO_ERR;

/* Save information about currently selected physical font */
physFontPfrCode = pCspGlobals->physFontPfrCode;
physFontOffset = pCspGlobals->physFontOffset;
physFontSize = pCspGlobals->physFontSize;

/* Get physical font code for specified font ID */
errCode = FindPhysicalFont(
    pCspGlobals, 
    (ufix8 *)pFontID,
    &hashIndex);
if (errCode != 0)
    return errCode;
physFontCode = pCspGlobals->pFontIDtable[hashIndex];
if (physFontCode == 0xffff)     /* Font ID not found? */
    {
    return CSP_FONT_ID_ERR;
    }

/* Assign unique logical font number */
while (TRUE)
    {
    newFontCode = pCspGlobals->nextNewFontCode++;
    if (newFontCode == 0xffff)
        {       
#if INCL_CACHE
        CmReinitCache(pCspGlobals);
#endif
        pCspGlobals->nextNewFontCode = pCspGlobals->nLogicalFonts;
        newFontCode = pCspGlobals->nextNewFontCode++;
        }

    /* Make sure the slot in the new font table is empty */
    hashIndex = newFontCode % (CSP_MAX_DYNAMIC_FONTS + 1);
    if (pCspGlobals->pNewFontTable[hashIndex].fontCode == 0xffff)
        break;
    }

/* Set up the new font record */
pNewFont = pCspGlobals->pNewFontTable + hashIndex;
pNewFont->fontCode = newFontCode;
pNewFont->physFontCode = physFontCode;
pNewFont->fontBBox = pCspGlobals->fontInfo.fontBBox;
pNewFont->nCharacters = pCspGlobals->fontInfo.nCharacters;
outlineResolution = pCspGlobals->fontInfo.outlineResolution;
pNewFont->outlineResolution = outlineResolution;

/* Check and set up the font attributes scaling 
 * them for the actual outline resolution */
pNewFont->fontAttributes = *pFontAttributes;
scaleFactor = 
    (((fix31)outlineResolution << 16) + (attrOutlRes >> 1)) / attrOutlRes;
errCode = ProcFontAttributes(
    &(pNewFont->fontAttributes),
    scaleFactor);
if (errCode != 0)
    return errCode;

/* Adjust the dynamic font bounding box */
errCode = AdjustNewFontBBox(
    pCspGlobals,
    pNewFont);
if (errCode != 0)
    return errCode;

/* Adjust the dynamic font character count */
errCode = AdjustNewFontCharCount(
    pCspGlobals,
    pNewFont);
if (errCode != 0)
    return errCode;

/* Increment current number of dynamic fonts */
pCspGlobals->nNewFonts++;

/* Ensure that the currently selected physical font is loaded */
if (pCspGlobals->fontCode < pCspGlobals->nLogicalFonts)
    {
    errCode = CspLoadPhysicalFont(
        pCspGlobals,
        physFontPfrCode, 
        physFontOffset, 
        physFontSize);
    if (errCode != 0)
        return errCode;
    }

*pFontCode = newFontCode;
return CSP_NO_ERR;
}

FUNCTION
static int ProcFontAttributes(
    fontAttributes_t *pFontAttributes, 
    fix31 scaleFactor)
/*
 *  Scales the specified font attributes by the specified scale factor
 *  for use with a new outline resolution.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_FONT_STYLE_ERR       9  Illegal value for fontStyle
 *      CSP_LINE_JOIN_TYPE_ERR  10  Illegal value for lineJoinType
 */
{
fix15   x;
fix31   xx;
fix31   rnd16 = 0x00008000;

switch (pFontAttributes->fontStyle)
    {
case FILLED_STYLE:
    break;

case STROKED_STYLE:
    x = pFontAttributes->styleSpecs.styleSpecsStroked.strokeThickness;
    xx = CspLongMult((fix31)x << 16, scaleFactor);
    pFontAttributes->styleSpecs.styleSpecsStroked.strokeThickness =
        (short)((xx + rnd16) >> 16);
    x = pFontAttributes->styleSpecs.styleSpecsStroked.lineJoinType;
    if ((x < 0) || (x > 2))
        return CSP_LINE_JOIN_TYPE_ERR;
    xx = pFontAttributes->styleSpecs.styleSpecsStroked.miterLimit;
    if (xx < (1L << 16))
        xx = 1L << 16;
    if (xx > (256L << 16))
        xx = 256L << 16;
    pFontAttributes->styleSpecs.styleSpecsStroked.miterLimit = xx;
    break;

case BOLD_STYLE:
    x = pFontAttributes->styleSpecs.styleSpecsBold.boldThickness;
    xx = CspLongMult((fix31)x << 16, scaleFactor);
    pFontAttributes->styleSpecs.styleSpecsBold.boldThickness =
        (short)((xx + rnd16) >> 16);
    break;

default:
    return CSP_FONT_STYLE_ERR;
    }

return CSP_NO_ERR;
}

FUNCTION
static int AdjustNewFontBBox(
    cspGlobals_t *pCspGlobals,
    newFont_t *pNewFont)
/*
 *  Accumulates and saves the font bounding box for the specified 
 *  dynamic font. The bounding box includes the bounding boxes of 
 *  any component physical fonts.
 *  It is  expressed in the outline resolution units of the top font.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 */
{
physFont_t *pPhysFont;
fix31   scale;
fix31   round;
fix15   xmin, ymin, xmax, ymax;
int     errCode;

/* Expand bounding box for any component physical fonts */
pPhysFont = pCspGlobals->pPhysFontTable + pNewFont->physFontCode;
while (pPhysFont->nextPhysFont != 0xffff)
    {
    pPhysFont = pCspGlobals->pPhysFontTable + pPhysFont->nextPhysFont;
    errCode = CspLoadPhysicalFont(
        pCspGlobals,
        pPhysFont->pfrCode, 
        pPhysFont->offset, 
        pPhysFont->size);
    if (errCode != 0)
        return errCode;

    /* Adjust font bounding box for other component fonts */
    scale = ((fix31)pNewFont->outlineResolution << 16) /
        pCspGlobals->fontInfo.outlineResolution;
    round = 0x00008000;
    xmin = (fix15)(((fix31)pCspGlobals->fontInfo.fontBBox.xmin * scale + round) >> 16);
    ymin = (fix15)(((fix31)pCspGlobals->fontInfo.fontBBox.ymin * scale + round) >> 16);
    xmax = (fix15)(((fix31)pCspGlobals->fontInfo.fontBBox.xmax * scale + round) >> 16);
    ymax = (fix15)(((fix31)pCspGlobals->fontInfo.fontBBox.ymax * scale + round) >> 16);
    if (xmin < pNewFont->fontBBox.xmin)
        pNewFont->fontBBox.xmin = xmin;
    if (ymin < pNewFont->fontBBox.ymin)
        pNewFont->fontBBox.ymin = ymin;
    if (xmax > pNewFont->fontBBox.xmax)
        pNewFont->fontBBox.xmax = xmax;
    if (ymax > pNewFont->fontBBox.ymax)
        pNewFont->fontBBox.ymax = ymax;
    }

return CSP_NO_ERR;
}

FUNCTION
static int AdjustNewFontCharCount(
    cspGlobals_t *pCspGlobals,
    newFont_t *pNewFont)
/*
 *  If the specified dynamic font consists of more than one physical font,
 *  the character count in its font information record is updated to be
 *  the total number of characters in the component physical fonts after 
 *  removing any duplicate characters.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 */
{
physFont_t *pPhysFont;
fix31   nChars;
ufix8  *pByte;
ufix16  charCode;
int     errCode;

/* Exit if there is only one component physical font */
pPhysFont = pCspGlobals->pPhysFontTable + pNewFont->physFontCode;
if (pPhysFont->nextPhysFont == 0xffff)
    {
    return CSP_NO_ERR;
    }

/* Count total number of distict characters available */
nChars = 0;
charCode = 0;
while (TRUE)
    {
    errCode = FindNewFontChar(
        pCspGlobals,
        pNewFont,
        &charCode,
        &pByte);
    if (errCode > 0)
        return errCode;
    if (errCode < -1)
        break;
    charCode++;
    nChars++;
    }

pNewFont->nCharacters = (unsigned short)nChars;

return CSP_NO_ERR;
}

FUNCTION
int CspDisposeNewFont(
    cspGlobals_t *pCspGlobals,
    unsigned short fontCode)
/*
 *  Reverses the result of calling CspCreateNewFont() for the specified 
 *  global font code.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_FONT_CODE_ERR        5  Font code out of range
 */
{
fix31   hashIndex;

/* Check that we have a new font code */
if ((fontCode < pCspGlobals->nLogicalFonts) ||
    (fontCode == 0xffff))
    {
    return CSP_FONT_CODE_ERR;
    }

/* Check that the new font code really exists */
hashIndex = fontCode % (CSP_MAX_DYNAMIC_FONTS + 1);
if (pCspGlobals->pNewFontTable[hashIndex].fontCode != fontCode)
    {
    return CSP_FONT_CODE_ERR;
    }

/* Clear the entry in the new font table */
pCspGlobals->pNewFontTable[hashIndex].fontCode = 0xffff;

/* Decrement current number of new fonts available */
pCspGlobals->nNewFonts--;

/* Mark no font selected if we have just removed the current font */
if (fontCode == pCspGlobals->fontCode)
    {
    pCspGlobals->fontCode = 0xffff;
    }

return CSP_NO_ERR;
}

FUNCTION
int CspSetNewFont(
    cspGlobals_t *pCspGlobals,
    ufix16 fontCode)
/*
 *  Makes the specified dynamic font the current font and copies its
 *  logical font attributes into global varables.
 *  Note that the associated physical font is not loaded because
 *  there may be more than one.
 *
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_FONT_CODE_ERR        5  Font code out of range
 */
{
ufix16  hashIndex;
newFont_t *pNewFont;

/* Check font is a conventional PFR font */
if (fontCode < pCspGlobals->nLogicalFonts)
    {
    return CSP_FONT_CODE_ERR;
    }

/* Find font in new font table */
hashIndex = fontCode % (CSP_MAX_DYNAMIC_FONTS + 1);
if (pCspGlobals->pNewFontTable[hashIndex].fontCode != fontCode)
    {
    return CSP_FONT_CODE_ERR;
    }
pNewFont = pCspGlobals->pNewFontTable + hashIndex;
pCspGlobals->pNewFont = pNewFont;

/* Copy font attributes to global variables */
pCspGlobals->fontAttributes = pNewFont->fontAttributes;

/* Make this the current logical font */
pCspGlobals->fontCode = fontCode;

return CSP_NO_ERR;
}

FUNCTION
int CspGetNewFontSpecs(
    cspGlobals_t *pCspGlobals,
    unsigned short *pFontRefNumber,
    cspFontInfo_t *pFontInfo,
    fontAttributes_t *pFontAttributes)
/*
 *  Loads the physical font associated with the currently selected
 *  dynamic font. If there is more than one physical font associated 
 *  with it, the font from the highest index in the PFR table is loaded.
 *  The font information structure is identical to that of this physical
 *  font except for the font bounding box and the character count.
 *  The bounding box includes other component physical fonts.
 *  The character count is the union of the character sets of all 
 *  component physical fonts.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 */
{
physFont_t *pPhysFont;
int     errCode;

/* Load the associated physical font */
pPhysFont = pCspGlobals->pPhysFontTable + pCspGlobals->pNewFont->physFontCode;
errCode = CspLoadPhysicalFont(
    pCspGlobals,
    pPhysFont->pfrCode, 
    pPhysFont->offset, 
    pPhysFont->size);
if (errCode != 0)
    return errCode;

/* Return font reference number */
*pFontRefNumber = 
    pCspGlobals->pfrTable[pPhysFont->pfrCode].baseFontCode +
    pCspGlobals->fontRefNumber;

/* Deliver the font info with adjusted font bounding box and char count */
*pFontInfo = pCspGlobals->fontInfo;
pFontInfo->fontBBox = pCspGlobals->pNewFont->fontBBox;
pFontInfo->nCharacters = pCspGlobals->pNewFont->nCharacters;

/* Deliver the current font attributes */
*pFontAttributes = pCspGlobals->fontAttributes;

return CSP_NO_ERR;
}



FUNCTION
int CspListNewFontChars(
    cspGlobals_t *pCspGlobals,
    int (*ListCharFn)(
        PCONTEXT
        unsigned short charCode
        USERPARAM))
/*
 *  Calls the specified function once for each character in the
 *  currently selected font. The calls are in increasing order of 
 *  character code.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 *      CSP_LIST_CHAR_FN_ERR     6  ListCharFn() returned error
 */
{
ufix8  *pByte;
ufix16  charCode;
int     errCode;

charCode = 0;
while (TRUE)
    {
    errCode = FindNewFontChar(
        pCspGlobals,
        pCspGlobals->pNewFont,
        &charCode,
        &pByte);
    if (errCode > 0)
        return errCode;

    /* Allow char code >= to current char code */
    if (errCode < -1)
        break;

    errCode = ListCharFn(
#if REENTRANT
        pCspGlobals,
#endif
        charCode 
        USERARG);

    if (errCode != 0)
        return CSP_LIST_CHAR_FN_ERR;
    charCode++;
    }

return CSP_NO_ERR;
}


FUNCTION
int CspLoadTopPhysFont(
    cspGlobals_t *pCspGlobals)
/*
 *  Loads the physical font associated with the currently selected
 *  dynamic font. If there is more than one physical font associated 
 *  with it, the font from the highest index in the PFR table is loaded.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 */
{
physFont_t *pPhysFont;
int     errCode;

/* Load the associated physical font */
pPhysFont = pCspGlobals->pPhysFontTable + pCspGlobals->pNewFont->physFontCode;
errCode = CspLoadPhysicalFont(
    pCspGlobals,
    pPhysFont->pfrCode, 
    pPhysFont->offset, 
    pPhysFont->size);
return errCode;
}

FUNCTION
ufix8 *CspFindNewFontChar(
    cspGlobals_t *pCspGlobals,
    ufix16 charCode)
/*
 *  Seaches the currently selected dynamic font for the specified 
 *  character code.
 *  If successful, loads the appropriate physical font, recomputes the
 *  the transformation constants if the physical font has changed and
 *  returns a pointer to the byte immediatly following the character code 
 *  field of the character record.
 *  Returns NULL if the character is not found.
 */
{
ufix8  *pByte;
int     errCode;

/* Find character, load physical font */
errCode = FindNewFontChar(
    pCspGlobals,
    pCspGlobals->pNewFont,
    &charCode,
    &pByte);
if (errCode != 0)
    return NULL;

/* Setup transformation stuff if physical font has changed */
if (pCspGlobals->physFontPfrCode !=
    pCspGlobals->transFontPfrCode)
    {
    CspSetTrans(pCspGlobals);
    }

return  pByte;
}



FUNCTION
static int FindPhysicalFont(
    cspGlobals_t *pCspGlobals,
    ufix8 *pFontID,
    fix31 *pHashIndex)
/*
 *  Searches the font ID table for a physical font with the specified
 *  name.
 *  Sets *pHashIndex to the first index in the font ID table at which 
 *  a physical font with a matching font ID is found and loads the
 *  physical font data.
 *  If no match is found, *pHashIndex is set to the first free position
 *  in the hash table.
 *
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 */
{
fix31    hashIndex;
fix31    hashTableSize;
ufix8   *pChar;
ufix16   physFontCode;
fix15    pfrCode;
fix31    offset;
fix31    size;
int      errCode;

/* Compute hash code for font ID string */
hashIndex = 0;
pChar = pFontID;
while (*pChar != 0)
    {
    hashIndex = hashIndex + (ufix32)(*(pChar++));
    }
hashTableSize = 
    (fix31)pCspGlobals->nPhysFonts * 
    FONT_ID_HASH_FACTOR;
hashIndex = (ufix32)hashIndex % hashTableSize; 

while ((physFontCode = pCspGlobals->pFontIDtable[hashIndex]) != 0xffff)
    {
    pfrCode = pCspGlobals->pPhysFontTable[physFontCode].pfrCode;
    offset = pCspGlobals->pPhysFontTable[physFontCode].offset;
    size = pCspGlobals->pPhysFontTable[physFontCode].size;
    errCode = CspLoadPhysicalFont(
        pCspGlobals,
        pfrCode,
        offset,
        size);
    if (errCode != 0)
        return errCode;

    if (MatchFontID(pFontID, (ufix8 *)pCspGlobals->fontInfo.pFontID))
        {
        break;
        }

    hashIndex = 
        (hashIndex == 0)? 
        hashTableSize - 1: 
        hashIndex - 1;
    }

*pHashIndex = hashIndex;
return CSP_NO_ERR;
}

FUNCTION 
static boolean MatchFontID(
    ufix8 *pFontID1,
    ufix8 *pFontID2)
/*
 *  Returns TRUE if the specified font ID strings match; 
 *  FALSE otherwise.
 */
{
while (*pFontID1 == *pFontID2)
    {
    if (*pFontID1 == 0)
        {
        return TRUE;
        }

    pFontID1++;
    pFontID2++;
    }

return FALSE;
}

FUNCTION
static int FindNewFontChar(
    cspGlobals_t *pCspGlobals,
    newFont_t *pNewFont,
    ufix16 *pCharCode,
    ufix8 **ppByte)
/*
 *  Searches the specified dynamic font for the smallest character code 
 *  that is greater than or equal to the specified character code.
 *  Sets *pCharCode to the character code found.
 *  Sets *ppByte to the first byte of the character record.
 *  Returns:
 *      CSP_NO_ERR               0  Normal return
 *      CSP_READ_RESOURCE_ERR    3  ReadResourceData() returned error
 *                              -1  Next available char code returned
 *                              -2  No suitable char code found
 */
{
boolean charCodeAvail;
ufix16  physFontCode;
ufix16  bestPhysFontCode;
physFont_t *pPhysFont;
ufix8  *pByte;
ufix8  *bestpByte;
ufix16  charCodeFound;
ufix16  bestCharCodeFound;
fix31   iLow;
fix31   iHigh;
fix31   iMid;
boolean longCharCode;
int     errCode;

charCodeAvail = FALSE;
for (
    physFontCode = pNewFont->physFontCode;
    physFontCode != 0xffff;
    physFontCode = pPhysFont->nextPhysFont)
    {
    pPhysFont = pCspGlobals->pPhysFontTable + physFontCode;
    errCode = CspLoadPhysicalFont(
        pCspGlobals,
        pPhysFont->pfrCode, 
        pPhysFont->offset, 
        pPhysFont->size);
    if (errCode != 0)
        return errCode;

    iLow = 0;
    iHigh = pCspGlobals->fontInfo.nCharacters - 1;
    longCharCode = (pCspGlobals->charFormat & BIT_1) != 0;
    while (iHigh >= iLow)
        {
        iMid = (iLow + iHigh) >> 1;
        pByte = pCspGlobals->pFirstChar + iMid * pCspGlobals->charRecSize;
        charCodeFound = longCharCode?
            (ufix16)NEXT_WORD(pByte):
            (ufix16)NEXT_BYTE(pByte);
        if (charCodeFound == *pCharCode)
            {
            *ppByte = pByte;
            return CSP_NO_ERR;
            }
        if (charCodeFound > *pCharCode)
            {
            if (iHigh == iLow)
                {
                if ((!charCodeAvail) ||
                    (charCodeFound < bestCharCodeFound))
                    {
                    bestPhysFontCode = physFontCode;
                    bestCharCodeFound = charCodeFound;
                    bestpByte = pByte;
                    charCodeAvail = TRUE;
                    }
                break;
                }
            iHigh = iMid;
            }
        else
            {
            if (iHigh == iLow)
                {
                break;
                }
            iLow = iMid + 1;
            }
        }
    }

if (charCodeAvail)
    {
    pPhysFont = pCspGlobals->pPhysFontTable + bestPhysFontCode;
    errCode = CspLoadPhysicalFont(
        pCspGlobals,
        pPhysFont->pfrCode, 
        pPhysFont->offset, 
        pPhysFont->size);
    if (errCode != 0)
        return errCode;
    *pCharCode = bestCharCodeFound;
    *ppByte = bestpByte;
    return -1;
    }

return -2;
}

#endif
#endif

