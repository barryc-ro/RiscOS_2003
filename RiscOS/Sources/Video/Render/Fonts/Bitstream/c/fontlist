/***************************************************************************
 * File:	c.fontlist
 *
 * Purpose:	Font list and sub-list management routines
 *		
 *
 * History:	2/7/96	R Browning	Moved to separate module
 **************************************************************************/
 
/* Includes. */
#include "fontprots.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Defines. */


extern FILE * replog_file;
extern int replog;
 
 
/* Functions. */
_wide_font_entry* FontListInit( void )
{
	_wide_font_entry* new_wfe;
	
	if( replog ) fprintf( replog_file, "Initialising font list\n");
	
	new_wfe = malloc( sizeof( _wide_font_entry ) );
        if( new_wfe != NULL )
        {
		new_wfe->font_head = NULL;
        	new_wfe->next = NULL;
        	new_wfe->wide_font_name = NULL;
        }
        return new_wfe;        
}

_wide_font_entry* FontListFind( _wide_font_entry* fontlisthead, char* fontname )
{
        if( replog ) fprintf(replog_file, "Finding font %s\n", fontname);
        while( fontlisthead != NULL )
        {
                if( strcmp( fontlisthead->wide_font_name, fontname ) == 0 )
                {
                        if( replog ) fprintf(replog_file, "Successful find\n");
                	return fontlisthead;
                }
                if( replog) fprintf(replog_file, "Iterating through search list\n");
                fontlisthead = fontlisthead->next;
        }
        if( replog) fprintf(replog_file, "Unsuccessful find\n");
        return NULL;
}
 
_wide_font_entry* FontListCreate( _wide_font_entry* fontlisthead )
{
        _wide_font_entry *new_wfe;
        
        while( fontlisthead->next != NULL ) fontlisthead = fontlisthead->next;
        new_wfe = malloc( sizeof( _wide_font_entry ) );
        if( new_wfe != NULL )
	{
	        new_wfe->next = NULL;
	        fontlisthead->next = new_wfe;
	        new_wfe->wide_font_name = NULL;
	        new_wfe->font_head = NULL;
	}
        return new_wfe;
}
 
font_l* FontSubFind( _wide_font_entry* font_parent, short font_size )
{
        font_l* c_link;
        
        c_link = font_parent->font_head;
        if( c_link != NULL ) do
        {
                if( c_link->font_size == font_size ) break;
        } while( ( c_link = c_link->next ) != NULL );
        
        return c_link;
}

font_l* FontSubCreate( _wide_font_entry* font_parent, short font_size )
{
        font_l* c_link;
        
        if( ( c_link = FontSubFind( font_parent, font_size ) ) == NULL )
        {
                if( replog ) fprintf(replog_file, "Creating font size %i\n", font_size );
		c_link = font_parent->font_head;
		if( c_link == NULL )
		{
		        font_parent->font_head = malloc( sizeof( font_l ) );
		        c_link = font_parent->font_head;
		        c_link->next = NULL;
		        c_link->font_size = font_size;
		        c_link->uni_conv_tbl = font_parent->uni_conv_tbl;
		        c_link->parent = font_parent;
		}
		else
		{
			while( c_link->next != NULL ) c_link = c_link->next;
			c_link->next = malloc( sizeof( font_l ) );
			c_link->next->font_size = font_size;
			c_link->next->next = NULL;
			c_link->next->uni_conv_tbl = font_parent->uni_conv_tbl;
			c_link->next->parent = font_parent;
			c_link = c_link->next;
		}
	}
	
	return c_link;
}

font_l* FontSubDelete( _wide_font_entry* font_parent, short font_size )
{
        font_l* c_link;
        font_l* start_link;
        
        if( replog ) fprintf( replog_file,
        		      "Deleting %s at size %i\n", font_parent->wide_font_name,
        						  font_size );
        
        if( ( c_link = FontSubFind( font_parent, font_size ) ) != NULL )
        {
                if( replog ) fprintf( replog_file, "Found child\n" );
                start_link = font_parent->font_head;
		if( c_link == start_link )
		{
			c_link = start_link->next;
			free( start_link );
			font_parent->font_head = c_link;
		        if( replog ) fprintf( replog_file, "Child head of list\n" );
			return c_link;		        
		}
		while( start_link->next != c_link ) start_link = start_link->next;
		start_link->next = c_link->next;
		free( c_link );
		/* Successful deletion. */
		return start_link;
	}
	/* No subfont found. */
	return NULL;
}                        


font_l* FontSubRemove( font_l* font_child )
{
        if( font_child == NULL ) return NULL;
        if( font_child->font_handle == NULL ) return NULL;
        
        return( FontSubDelete( font_child->parent, font_child->font_size ) );
}
