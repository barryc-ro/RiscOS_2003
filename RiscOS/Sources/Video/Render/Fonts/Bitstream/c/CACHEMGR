/*****************************************************************************
*                                                                            *
*                        Copyright 1993 - 95                                 *
*          as an unpublished work by Bitstream Inc., Cambridge, MA           *
*                                                                            *
*         These programs are the sole property of Bitstream Inc. and         *
*           contain its proprietary and confidential information.            *
*                                                                            *
*****************************************************************************/



/************************* C A C H E M G R . C *******************************
 *                                                                           *
 *  Bitmap cache manager
 *                                                                           *
 ********************** R E V I S I O N   H I S T O R Y **********************
 *                                                                           *
 *  Changes since TrueDoc Release 2.0:                                       *
 *
 *     $Header$
 *
 *     $Log$
 * Revision 4.1  96/03/05  13:44:37  mark
 * Release
 *
 * Revision 3.1  95/12/29  10:28:10  mark
 * Release
 *
 * Revision 2.1  95/12/21  09:45:08  mark
 * Release
 *
 * Revision 1.2  95/12/12  14:19:07  john
 * Fixed warnings about uncast conversion from short to boolean.
 *
 * Revision 1.1  95/08/10  16:46:15  john
 * Initial revision
 *
 *                                                                           *
 ****************************************************************************/

#include "csp_int.h"
#if INCL_CACHE
#include "cachemgr.h"

#ifndef CSP_DEBUG
#define CSP_DEBUG 2
#endif

#if CSP_DEBUG
#include <stdio.h>
#endif

#ifndef CALCHASHIDX
#define CALCHASHIDX(req) hashidx = ((req->charCode + (req->fontCode<<4))% HASHSZ)
#endif

#ifndef CMPDESC
#define CMPDESC(cur,req,match) match = ((cur->charCode == req->charCode) && \
                                   (cur->fontCode == req->fontCode))
#endif

#define SIZEALIGN(size) size = (((size-1)/STRUCTALIGN)+1)*STRUCTALIGN

/* local function prototypes */

LOCAL_PROTO
void CmAddLru(
    cmGlobals_t *pCmGlobals,
    chardata_hdr *charptr);

LOCAL_PROTO
void InitParams(
    cmGlobals_t *pCmGlobals,
    short int  enabled,
    short int capacity,
    short int pixelColor,
    short int alignment,
    short int inverted,
    short int pixelSize);


/**************************************************************
*
*    CmInitializeCache
*
*       create cache data structures, etc.
*
***************************************************************/

FUNCTION
void CmInitializeCache(
    void **pCacheContext,
    long len,
    char *cacheptr)
{
cmGlobals_t *pCmGlobals;
int i;
chardata_hdr **hashtemp;

if (len < (sizeof(cmGlobals_t) + HASHSZ*sizeof(*hashtemp) + sizeof(memory_hdr)))
    {
    pCmGlobals = NULL;
    }
else
    {
    pCmGlobals = (cmGlobals_t *)cacheptr;
    hashtemp = pCmGlobals->hashtable = (chardata_hdr **)((char *)cacheptr +
                                      sizeof(cmGlobals_t));

    for (i =  0; i < HASHSZ; i++)
        *hashtemp++ = NULL;

    pCmGlobals->freelist = (memory_hdr *)hashtemp;
    pCmGlobals->cacheSize = pCmGlobals->freelist->len =
            len - HASHSZ * sizeof(chardata_hdr *) - sizeof(cmGlobals_t);
    pCmGlobals->freelist->next = pCmGlobals->freelist->prev = NULL;
    pCmGlobals->lruhead = pCmGlobals->lrutail = NULL;
    InitParams(
        pCmGlobals,
        TRUE,
        CACHE_CAPACITY,
        BLACK_PIXEL,
        BMAP_ALIGNMENT,
        INVERT_BITMAP,
        1);
    }

*pCacheContext = (void *)pCmGlobals;
}

/**************************************************************
*
*    CmInitParams
*
*       Set cache control parameters and dependent data structures
*
***************************************************************/

FUNCTION
void CmInitParams(
    cspGlobals_t *pCspGlobals,
    short int  enabled,
    short int capacity,
    short int pixelColor,
    short int alignment,
    short int inverted)
{
InitParams(
    pCspGlobals->pCmGlobals,
    enabled,
    capacity,
    pixelColor,
    alignment,
    inverted,
    1);
}

FUNCTION
static void InitParams(
    cmGlobals_t *pCmGlobals,
    short int enabled,
    short int capacity,
    short int pixelColor,
    short int alignment,
    short int inverted,
    short int pixelSize)
{
ufix8 mask;
fix15 i;

pCmGlobals->userEnabled = enabled != 0;
pCmGlobals->cacheCapacity = capacity;
pCmGlobals->blackPixel = (ufix8)pixelColor;
pCmGlobals->bitmapAlignment = alignment;
pCmGlobals->invertBitmap = inverted != 0;
pCmGlobals->pixelSize = (ufix8)pixelSize;

if (pCmGlobals->blackPixel == 0)
    {
    mask = 0xfe;
    for (i = 7; i >= 0; i--)
        {
        pCmGlobals->startMasks[i] = mask;
        mask = mask << 1;
        }
    mask = 0x7f;
    for (i = 0; i <= 7; i++)
        {
        pCmGlobals->endMasks[i] = mask;
        mask = mask >> 1;
        }
    pCmGlobals->whiteByte = 0xff;
    pCmGlobals->blackByte = 0x00;
    }
else
    {
    mask = 0xff;
    for (i = 0; i <= 7; i++)
        {
        pCmGlobals->startMasks[i] = mask;
        mask = mask >> 1;
        }
    mask = 0xff;
    for (i = 7; i >= 0; i--)
        {
        pCmGlobals->endMasks[i] = mask;
        mask = mask << 1;
        }
    pCmGlobals->whiteByte = 0x00;
    pCmGlobals->blackByte = 0xff;
    }
}

/**************************************************************
*
*    CmReinitCache
*
*       Flush cache contents and recreate cache data structures
*
***************************************************************/

FUNCTION
void CmReinitCache(
    cspGlobals_t *pCspGlobals)
{
int i;
chardata_hdr **hashtemp;

cmGlobals_t *pCmGlobals = pCspGlobals->pCmGlobals;

if (pCmGlobals == NULL)
    return;

hashtemp = pCmGlobals->hashtable = (chardata_hdr **)((char *)pCmGlobals +
                                      sizeof(cmGlobals_t));

for (i =  0; i < HASHSZ; i++)
    *hashtemp++ = NULL;

pCmGlobals->freelist = (memory_hdr *)hashtemp;
pCmGlobals->freelist->len = pCmGlobals->cacheSize;
pCmGlobals->freelist->next = pCmGlobals->freelist->prev = NULL;
pCmGlobals->lruhead = pCmGlobals->lrutail = NULL;

pCmGlobals->pixelSize = (ufix8)pCspGlobals->pixelSize;
}

/**************************************************************
*
*    CmProcessCharacterReq
*
*        get character bitmap from cache, add it if it isn't
*        there yet
*
***************************************************************/

FUNCTION
chardata_hdr *CmProcessCharacterReq(
    cspGlobals_t *pCspGlobals,
    char_desc_t *prequest)
{
chardata_hdr *temp;

cmGlobals_t *pCmGlobals = pCspGlobals->pCmGlobals;

if ((temp=CmFindChar(pCmGlobals, prequest)) != NULL)
    {
    CmUpdateLru(pCmGlobals, temp);
    }
else
    {
    temp = CmMakeChar(pCspGlobals,pCmGlobals, prequest);
    }

return temp;
}

/**************************************************************
*
*    CmFindChar
*
*        see if requested character is already in cache
*
***************************************************************/

FUNCTION
chardata_hdr *CmFindChar(
    cmGlobals_t *pCmGlobals,
    char_desc_t *prequest)
{
unsigned short int hashidx;
chardata_hdr *current;
char_desc_t *curreq;

#if CSP_DEBUG
printf("CmFindChar: font %d char %d \n",prequest->fontCode,prequest->charCode);
#endif

CALCHASHIDX(prequest);

#if CSP_DEBUG
printf("CmFindChar: hashtable %lx \n",pCmGlobals->hashtable[hashidx]);
#endif


if ((current = pCmGlobals->hashtable[hashidx]) == NULL)
    return NULL;

do {
   boolean match;
   curreq = (char_desc_t *)((char *)current + sizeof (chardata_hdr));
   CMPDESC(curreq,prequest,match);
   if (match)
       return (current);
   current = current->next;
   } while (current != NULL);

return NULL;
}

/**************************************************************
*
*     CmMakeChar
*
*         Add requested character to cache
*
***************************************************************/

FUNCTION
chardata_hdr *CmMakeChar(
    cspGlobals_t *pCspGlobals,
    cmGlobals_t *pCmGlobals,
    char_desc_t *prequest)
{
unsigned short int hashidx;
chardata_hdr *temp;
char_desc_t *curreq;

#if CSP_DEBUG
printf("CmMakeChar: font %d char %d \n",prequest->fontCode,prequest->charCode);
#endif



pCmGlobals->current_char = NULL;

CspExecChar(pCspGlobals,prequest->charCode,FALSE);

#if CSP_DEBUG
printf("CmMakeChar: currentChar %lx \n",pCmGlobals->current_char);
#endif


if (pCmGlobals->current_char == NULL)
    return pCmGlobals->current_char;

curreq = (char_desc_t *)((char *)pCmGlobals->current_char +
                                            sizeof(chardata_hdr));
*curreq = *prequest;

CALCHASHIDX(prequest);

temp = pCmGlobals->hashtable[hashidx];
pCmGlobals->hashtable[hashidx] = pCmGlobals->current_char;
pCmGlobals->current_char->next = temp;
pCmGlobals->current_char->prev = NULL;
if (temp != NULL)
    temp->prev = pCmGlobals->current_char;
CmAddLru(pCmGlobals,pCmGlobals->current_char);

#if CSP_DEBUG
printf("CmMakeChar: currentChar->prev %lx, next %lx \n",
    pCmGlobals->current_char->prev,
    pCmGlobals->current_char->next);
#endif


return pCmGlobals->current_char;
}

/**************************************************************
*
*    CmAllocMem
*
*        allocate memory from free list for new character
*
***************************************************************/

FUNCTION
chardata_hdr *CmAllocMem(
    cmGlobals_t *pCmGlobals,
    unsigned short int size)
{
memory_hdr *curseg;
chardata_hdr *temp;

SIZEALIGN(size);

curseg = pCmGlobals->freelist;

while (curseg != NULL)
   {
   if (curseg->len >= (size+sizeof(memory_hdr)))
       {
       temp = (chardata_hdr *)
               ((char *)curseg + curseg->len - size);
       curseg->len -= size;
       return temp;
       }
   curseg = curseg->next;
   }
return NULL;
}

/**************************************************************
*
*     CmAddLru
*
*         add newly created character to head of lru list
*
***************************************************************/

FUNCTION
static void CmAddLru(
    cmGlobals_t *pCmGlobals,
    chardata_hdr *charptr)
{
chardata_hdr *temp;

temp = pCmGlobals->lruhead;
if (temp != NULL)
    temp->lruprev = charptr;
pCmGlobals->lruhead = charptr;
charptr->lrunext = temp;
charptr->lruprev = NULL;
if (pCmGlobals->lrutail == NULL)
   pCmGlobals->lrutail = charptr;

}

/**************************************************************
*
*    CmUpdateLru
*
*        move currently referenced character from its current
*        position to the head of the lru list
*
***************************************************************/

FUNCTION
void CmUpdateLru(
    cmGlobals_t *pCmGlobals,
    chardata_hdr *charptr)
{
chardata_hdr *temp;

if (charptr == pCmGlobals->lruhead)
    return;

if (charptr == pCmGlobals->lrutail)
    pCmGlobals->lrutail = charptr->lruprev;
else
    (charptr->lrunext)->lruprev = charptr->lruprev;

(charptr->lruprev)->lrunext = charptr->lrunext;
temp = pCmGlobals->lruhead;
pCmGlobals->lruhead = charptr;
charptr->lruprev = NULL;
charptr->lrunext = temp;
temp->lruprev = charptr;
}

/**************************************************************
*
*    CmFreeLru
*
*        return character at the tail of the lru list to the
*        free memory list, remove it from the lru list and from
*        it hash list
*
***************************************************************/

FUNCTION
boolean CmFreeLru(cmGlobals_t *pCmGlobals)
{
memory_hdr *freemem, *current;
unsigned short int hashidx;
ufix16 bytesPerRow;
long  size;

if (pCmGlobals->lrutail == NULL)
    return FALSE;

if (pCmGlobals->lrutail->prev == NULL)
    {
    CALCHASHIDX(((char_desc_t *)
               ((unsigned char*)pCmGlobals->lrutail+sizeof(chardata_hdr)))) ;
    pCmGlobals->hashtable[hashidx]=pCmGlobals->lrutail->next;
    }
else
    {
    (pCmGlobals->lrutail->prev)->next = pCmGlobals->lrutail->next;
    }
if (pCmGlobals->lrutail->next != NULL)
    {
    (pCmGlobals->lrutail->next)->prev = pCmGlobals->lrutail->prev;
    }

freemem = (memory_hdr *)pCmGlobals->lrutail;

bytesPerRow = (ufix16)(
    ((((long)pCmGlobals->lrutail->cacheSpecs.xSize *
       (short)pCmGlobals->pixelSize) +
      pCmGlobals->bitmapAlignment * 8 - 1) /
     (pCmGlobals->bitmapAlignment * 8)) *
    pCmGlobals->bitmapAlignment);

size = bytesPerRow * pCmGlobals->lrutail->cacheSpecs.ySize +
    sizeof(chardata_hdr) +
    sizeof(char_desc_t);

SIZEALIGN(size);

pCmGlobals->lrutail = pCmGlobals->lrutail->lruprev;
if (pCmGlobals->lrutail == NULL)
    pCmGlobals->lruhead = NULL;

freemem->len =  size;

current = pCmGlobals->freelist;

while(current->next != NULL && current->next < freemem)
    {
    current = current->next;
    }

if ((memory_hdr *)((char *)freemem + freemem->len)
                         == current->next)
    {
    freemem->len += ((current->next)->len);
    current->next = (current->next)->next;
    if (current->next != NULL)
        (current->next)->prev = current;
    }
if (freemem == (memory_hdr *)
               ((char *)current + current->len))
    {
    current->len += (freemem->len);
    }
else
    {
    freemem->next = current->next;
    current->next = freemem;
    freemem->prev = current;
    if (freemem->next != NULL)
        (freemem->next)->prev = freemem;
    }
return TRUE;
}
#endif
