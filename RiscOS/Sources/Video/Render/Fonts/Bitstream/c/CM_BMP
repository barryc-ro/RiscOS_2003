/*****************************************************************************
*                                                                            *
*                        Copyright 1993 - 95                                 *
*          as an unpublished work by Bitstream Inc., Cambridge, MA           *
*                                                                            *
*         These programs are the sole property of Bitstream Inc. and         *
*           contain its proprietary and confidential information.            *
*                                                                            *
*****************************************************************************/



/***************************** C M _ B M P . C *******************************
 *                                                                           *
 *  Bitmap generation module for cache manager
 *                                                                           *
 ********************** R E V I S I O N   H I S T O R Y **********************
 *                                                                           *
 *  Changes since TrueDoc Release 2.0:                                       *
 *
 *     $Header$
 *                                                                                    
 *     $Log$
 * Revision 4.1  96/03/05  13:44:45  mark
 * Release
 * 
 * Revision 3.1  95/12/29  10:28:18  mark
 * Release
 * 
 * Revision 2.2  95/12/27  18:03:03  john
 * CmSetBitmapBits() now exits if run length <= 0 pixels.
 * 
 * Revision 2.1  95/12/21  09:45:16  mark
 * Release
 * 
 * Revision 1.2  95/09/15  09:29:10  john
 * Replaced % 8 with & 7 in SetBitmapBits index calculations.
 * Replaced / 8 with >> 3 in SetBitmapBits.
 * Results in faster execution on less-than-wondrous compilers.
 * 
 * Revision 1.1  95/08/10  16:46:26  john
 * Initial revision
 * 
 *
 ****************************************************************************/


#include <string.h>
#include "csp_int.h"
#if INCL_CACHE
#include "cachemgr.h"

static ufix8 msBits[] = {0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe};
static ufix8 lsBits[] = {0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01};


/*****************************************************************
 * FUNCTION: sp_open_bitmap
 *
 *****************************************************************/

FUNCTION
void CmOpenBitmap(
    cspGlobals_t *pCspGlobals,
    long int setwidth_x, 
    long int setwidth_y, 
    long int xorg, 
    long int yorg, 
    short int xsize, 
    short int ysize)
{
cmGlobals_t *pCmGlobals = pCspGlobals->pCmGlobals;
ufix16  image_size;

/* Get image width in bytes (including padding) */
pCmGlobals->bytesPerRow = (ufix16)(
    (((xsize * pCmGlobals->pixelSize) + 
      pCmGlobals->bitmapAlignment * 8 - 1) / 
     (pCmGlobals->bitmapAlignment * 8)) * 
    pCmGlobals->bitmapAlignment);

/* Allocate the segment to store the data */
image_size = pCmGlobals->bytesPerRow * ysize;
while (pCmGlobals->current_char == NULL)
    {
    pCmGlobals->current_char = CmAllocMem(
        pCmGlobals, 
        image_size + sizeof(chardata_hdr) + sizeof(char_desc_t));
    if (pCmGlobals->current_char == NULL)
        {
        if (!CmFreeLru(pCmGlobals))
            {
            return;
            }
        }
    }

/* Set up character header in cache */
pCmGlobals->current_char->cacheSpecs.xPos = xorg;
pCmGlobals->current_char->cacheSpecs.yPos = yorg;
pCmGlobals->current_char->cacheSpecs.xSize = xsize;
pCmGlobals->current_char->cacheSpecs.ySize = ysize;
pCmGlobals->current_char->cacheSpecs.xEscapement = setwidth_x;
pCmGlobals->current_char->cacheSpecs.yEscapement = setwidth_y;

/* Save pointer to the current image data */
pCmGlobals->imagedata = 
    (ufix8 *)pCmGlobals->current_char + 
    sizeof(chardata_hdr) + 
    sizeof(char_desc_t);

/* Clear the character image to white */
if (image_size > 0)
    {
	memset(
	    pCmGlobals->imagedata, 
	    pCmGlobals->whiteByte,
	    image_size);
	}
}

/*****************************************************************
 * FUNCTION: sp_set_bitmap_bits
 *
 *****************************************************************/

FUNCTION
void CmSetBitmapBits (
    cspGlobals_t *pCspGlobals,
    short int y, 
    short int x1, 
    short int x2)
{
cmGlobals_t *pCmGlobals = pCspGlobals->pCmGlobals;
ufix16 start_byte;
ufix16 end_byte;
ufix16 i;
ufix16 curr_index;

/* If OpenBitmap() was unable to allocate space for this char, return */
if (pCmGlobals->current_char == NULL)
    return;

/* Return if zero- or negative-length run */
if (x1 >= x2)
    return;

curr_index = (pCmGlobals->invertBitmap)?
    y * pCmGlobals->bytesPerRow:
    (pCmGlobals->current_char->cacheSpecs.ySize - y - 1) *
        (pCmGlobals->bytesPerRow);

if (pCmGlobals->pixelSize != 1)
	{
	x1 *= pCmGlobals->pixelSize;
	x2 *= pCmGlobals->pixelSize;
	}
x2--;

start_byte = x1 >> 3;
end_byte = x2 >> 3;

/* fill scanline */
if (start_byte == end_byte)
    {
    if (pCmGlobals->blackPixel)
        {
      	pCmGlobals->imagedata[curr_index + start_byte] |=
            (pCmGlobals->startMasks[x1 & 7] & pCmGlobals->endMasks[x2 & 7]);
        }
    else
        {
        pCmGlobals->imagedata[curr_index + start_byte] &=
            (pCmGlobals->startMasks[x1 & 7] | pCmGlobals->endMasks[x2 & 7]);
        }
    }
else
    {
    if (pCmGlobals->blackPixel)
        {
        pCmGlobals->imagedata[curr_index + start_byte] |= 
            pCmGlobals->startMasks[x1 & 7];
        pCmGlobals->imagedata[curr_index + end_byte] |=  
            pCmGlobals->endMasks[x2 & 7];
        }
    else
        {
        pCmGlobals->imagedata[curr_index+start_byte] &=  
            pCmGlobals->startMasks[x1 & 7];
        pCmGlobals->imagedata[curr_index+end_byte] &= 
            pCmGlobals->endMasks[x2 & 7];
        }
    for (i = start_byte + 1; i < end_byte; i++)
        {
        pCmGlobals->imagedata[curr_index+i] = pCmGlobals->blackByte;
        }
    }
}

/*****************************************************************
 * FUNCTION: CmSetBitmapPixels
 *
 *****************************************************************/
void CmSetBitmapPixels(
    cspGlobals_t *pCspGlobals, 
    short y,
    short x,
    short xSize,
    void *pPixels)
{
cmGlobals_t *pCmGlobals = pCspGlobals->pCmGlobals;
ufix16 curr_index;
ufix8 *pRow, *pByte;
short  bitOffset;
short  fract;
ufix8  byte;
short  ii;
ufix8  pixValue;
short  shift;

/* if open_bitmap was unable to allocate space for this char, return */
if (pCmGlobals->current_char == NULL)
    return;

curr_index = 
    (pCmGlobals->invertBitmap)?
    y * pCmGlobals->bytesPerRow:
    (pCmGlobals->current_char->cacheSpecs.ySize - y - 1) *
        (pCmGlobals->bytesPerRow);
pRow = pCmGlobals->imagedata + curr_index;

bitOffset = x * pCmGlobals->pixelSize;
pByte = pRow + (bitOffset >> 3);
fract = bitOffset & 7;
byte = *pByte & msBits[fract];

for (ii = 0; ii < xSize; ii++)
    {
    pixValue = (pCmGlobals->blackPixel)?
        *((ufix8 *)pPixels + ii):
        256 - *((ufix8 *)pPixels + ii);
    shift = 8 - fract - pCmGlobals->pixelSize;
    if (shift == 0)
        {
        *(pByte++) = byte + pixValue;
        byte = 0;
        }
    else if (shift > 0)
        {
        byte += pixValue << shift;
        }
    else
        {
        *(pByte++) = byte + (pixValue >> -shift);
        byte = pixValue << (shift + 8);
        }
    bitOffset += pCmGlobals->pixelSize;
    fract = bitOffset & 7;
    }
*pByte = (*pByte & lsBits[fract]) + byte;
}


/*****************************************************************
 * FUNCTION: sp_close_bitmap
 *
 *****************************************************************/

FUNCTION
void CmCloseBitmap(cspGlobals_t *pCspGlobals)
{
}

#endif 

