/*****************************************************************************
*                                                                            *
*                        Copyright 1993 - 94                                 *
*          as an unpublished work by Bitstream Inc., Cambridge, MA           *
*                                                                            *
*         These programs are the sole property of Bitstream Inc. and         *
*           contain its proprietary and confidential information.            *
*                                                                            *
*****************************************************************************/



/*************************** C S P _ C B X . C *******************************
 *                                                                           *
 * Character shape player character bounding box accumulator                 *
 *                                                                           *
 ********************** R E V I S I O N   H I S T O R Y **********************
 *                                                                           *
 *  Changes since TrueDoc Release 2.0:                                       *
 *
 *     $Header$
 *                                                                                    
 *     $Log$
 * Revision 4.1  96/03/05  13:45:08  mark
 * Release
 * 
 * Revision 3.1  95/12/29  10:28:47  mark
 * Release
 * 
 * Revision 2.1  95/12/21  09:45:41  mark
 * Release
 * 
 * Revision 1.1  95/08/10  16:44:33  john
 * Initial revision
 * 
 *                                                                           *
 ****************************************************************************/

#ifndef CSP_DEBUG
#define CSP_DEBUG   0
#endif

#if CSP_DEBUG
#include <stdio.h>
#endif

#include "csp_int.h"                    /* Public and internal header */

#if PROC_TRUEDOC || ! INCL_TPS

#if CSP_DEBUG
#include "csp_dbg.h"
#endif


/* Local function prototypes */
LOCAL_PROTO
void CheckPoint(
    cspGlobals_t *pCspGlobals,
    point_t P);


FUNCTION
boolean CspInitOutBBox(
    cspGlobals_t *pCspGlobals,
    CspSpecs_t *specsarg)
{
return TRUE;
}


FUNCTION
boolean CspBeginCharBBox(
    cspGlobals_t *pCspGlobals,
    point_t Psw, 
    point_t Pmin, 
    point_t Pmax)
{
/* Save escapement vector */
sp_globals.set_width.x = (fix31)Psw.x << sp_globals.poshift;
sp_globals.set_width.y = (fix31)Psw.y << sp_globals.poshift;

sp_globals.xmin = 32000;
sp_globals.xmax = -32000;
sp_globals.ymin = 32000;
sp_globals.ymax = -32000;

return TRUE;
}


FUNCTION
void CspBeginSubCharBBox(
    cspGlobals_t *pCspGlobals,
    point_t Psw, 
    point_t Pmin, 
    point_t Pmax)
{
}


FUNCTION
void CspBeginContourBBox(
    cspGlobals_t *pCspGlobals,
    point_t P1, 
    boolean outside)
{
CheckPoint(pCspGlobals,P1);
}


FUNCTION
void CspLineToBBox(
    cspGlobals_t *pCspGlobals,
    point_t P1)
{
CheckPoint(pCspGlobals,P1);
}


FUNCTION
void CspCurveToBBox(
    cspGlobals_t *pCspGlobals,
    point_t P1, 
    point_t P2, 
    point_t P3, 
    fix15 depth)
{
CheckPoint(pCspGlobals,P1);
CheckPoint(pCspGlobals,P2);
CheckPoint(pCspGlobals,P3);
}


FUNCTION
void CspEndContourBBox(
    cspGlobals_t *pCspGlobals)
{
}


FUNCTION
boolean CspEndSubCharBBox(
    cspGlobals_t *pCspGlobals)
{
return TRUE;
}


FUNCTION
boolean CspEndCharBBox(
    cspGlobals_t *pCspGlobals)
{
if (sp_globals.xmin > sp_globals.xmax)
    {
    sp_globals.xmin = 0;
    sp_globals.ymin = 0;
    sp_globals.xmax = 0;
    sp_globals.ymax = 0;
    }

return TRUE;
}


FUNCTION
static void CheckPoint(
    cspGlobals_t *pCspGlobals,
    point_t P)
{
if (P.x < sp_globals.xmin)
    sp_globals.xmin = P.x;
if (P.y < sp_globals.ymin)
    sp_globals.ymin = P.y;
if (P.x > sp_globals.xmax)
    sp_globals.xmax = P.x;
if (P.y > sp_globals.ymax)
    sp_globals.ymax = P.y;
}
#endif /*PROC_TRUEDOC*/

