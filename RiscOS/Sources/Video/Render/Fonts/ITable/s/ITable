; > s.ITable

; *********************
; ***  CHANGE LIST  ***
; *********************
;
; 08-Dec-95 0.00 DDV Created
; 11-Dec-95	 DDV Added Hourglass display to show that we haven't got stuck.
; 12-Dec-95	 DDV Bug fix: R and B in the table calculator needed swapped to map to VIDC format.
; 12-Dec-95	 DDV Palette write operations cause inverse table to be invalidated.
; 12-Dec-95	 DDV Now use ColourTrans to read palette (should cope with output to sprite).
; 12-Dec-95	 DDV Added check to only recompute inverse-table when palette changes.
; 12-Dec-95	 DDV Support for switching output to a sprite invalidating the tables.
; 13-Dec-95	 DDV Fixed SWI chunk to one from Alan Glover (+ some reformatting).
; 13-Dec-95	 DDV Errors reported out of calculate correctly.
; 13-Dec-95 0.01 DDV Uses a temporary dynamic area for storing inverse table distances buffer - when computing.
; 13-Dec-95 0.02 DDV Conditonally removed use of a dynamic area - causes Font Manager/Wimp to barf!
; 13-Dec-95      DDV Reduced workspace usage, tidied some variables
; 13-Dec-95	 DDV Now uses dynamic areas properly for storing inverse and distance tables.
; 13-Dec-95 0.03 DDV Dynamic area sized to contain distance table and reduced after use.
;

        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System
        GET     hdr:ModHand
        GET     hdr:Proc
        GET     hdr:Services
        GET     hdr:FSNumbers
        GET     Hdr:HighFSI
        GET     hdr:NewErrors
        GET     hdr:Variables
        GET     hdr:VduExt
        GET     hdr:Debug
        GET     hdr:Sprite
        GET     hdr:ColourTran
        GET     hdr:Hourglass
        GET     hdr:NDRDebug
        GET     hdr:PublicWS
        GET     hdr:HostFS
	GET	hdr:PaletteV
	GET	hdr:DDVMacros

	GET	hdr.ITable			; our SWI information
	GET	Version				; and version data


; ------------------------------------------------------------------------------
; Constants, macros and structures
; ------------------------------------------------------------------------------

        	GBLL	true
		GBLL	false
true            SETL	{TRUE}
false		SETL 	{FALSE}

		GBLL	debug
		GBLL	hostvdu
debug		SETL	false
hostvdu		SETL	false

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Constants used for computing table

bits 		* 5				; significan bits per gun used for table index

nbits		* 8 - bits			; DO NOT modify computed from bits
x		* 1 << nbits			; DO NOT modify computed from bits
xsqr		* 1 << ( 2 * nbits )		; DO NOT modify computed from bits
colourmax	* 1 << bits			; DO NOT modify computed from bits


; Workspace allocation

		^ 0, WP
iFlags		# 4				; = flags ( f_xxx )

f_PaletteV	 * &00000001			; = 1 => palette vector has been claimed
f_TableValid	 * &00000002			; = 1 => inverse table is valid for current destination
f_SwitchInvalid	 * &00000004			; = 1 => Switched to a sprite, therefore if calculating the table is invalid

iDynamicArea	# 4				; = ID of our dynamic area

pInverseTable	# 4				; -> current inverse table
pDistanceTable	# 4				; -> distance table

iPalette555	# 4 * 256			; = palette quanitised down to 5,5,5 RGB

ws_required	* :INDEX: @


; Dynamic area allocation

		^ 0
da_iInverseTable  	# colourmax * colourmax * colourmax
da_MinimumSize		* :INDEX: @

da_iDistanceTable	# ( ?da_iInverseTable ) * 4
da_MaximumSize		* :INDEX: @


; ------------------------------------------------------------------------------
; Module header and basic initialisation of the module.
; ------------------------------------------------------------------------------

	LEADR	Module_LoadAddr

module_base
	& 0					; No application entry
	& Init - module_base
	& Die - module_base
	& Service - module_base

	& Title - module_base
	& Help - module_base
	& 0					; no commands

	& &4BF40
	& SWIDespatch - module_base
	& SWINames - module_base
	& 0					; SWI name decode

Help 	= "Inverse Table", 9, "$VString ($Date)"
      [ debug
	= " Development version"
      ]
	= 0
	ALIGN

Title
SWINames
	= "InverseTable", 0			; prefix
	= "Calculate", 0
	= 0
	ALIGN


;; ------------------------------------------------------------------------------
;; Initialise, claim our workspace and set to a sensible state!
;; ------------------------------------------------------------------------------

Init	ENTRY 	"R1-R3"

	LDR	R2, [WP]			; pick up the private word
	TEQ	R2, #0				;   do we already have our workspace?
	BNE	%FT10

	MOV	R0, #ModHandReason_Claim
	LDR	R3, =ws_required
	SWI	XOS_Module			; attempt to claim our workspace block
	EXIT	VS				;   if that fails then return

	STR	R2, [WP]			; set the private word to point at our workspace
10
	MOV	WP, R2

	MOV	R0, #0				; NULL suitable entries
	STR	R0, iFlags
	STR	R0, iDynamicArea
	STR	R0, pInverseTable

	MOV	R0, # -1			; = -1 => invalid 5,5,5 entry
	ADR	R1, iPalette555
	LDR	R2, = ?iPalette555
20
	SUBS	R2, R2, # 4
	STRGE	R0, [ R1 ], # 4
	BGE	%BT20

	BL	claim_vectors			; try to claim the vectors
	EXIT					;   and return any possible errors


;; ------------------------------------------------------------------------------
;; Tidy up as about to die!
;; ------------------------------------------------------------------------------

Die	ENTRY	"R1-R2"

	LDR	WP, [WP]			; do we have a workspace pointer currently?
	TEQ	WP, # 0				;   if not then there is nothing to tidy up
	EXITS	EQ

	LDR	R3, iFlags
	TST	R3, # f_PaletteV		; do we currently have the palette vector claimed?
	MOVNE	R0, # PaletteV
	ADRNE	R1, palVhandler
	MOVNE	R2, WP
	SWINE	XOS_Release

	BL	release_area			; if we have a dynamic area then discard it

	EXIT


;; ------------------------------------------------------------------------------
;; Service calls broadcast, if an interesting one then act on it - but never claim.
;; ------------------------------------------------------------------------------

Service	ROUT

	TEQ	R1, # Service_Reset		; filter out only the ones we want
	TEQNE	R1, # Service_ModeChange
	TEQNE	R1, # Service_SwitchingOutputToSprite
	MOVNES	PC, LR

	ENTRY	"R0-R1"

	LDR	WP, [ WP ]			; get workspace pointer
	LDR	R0, iFlags			;   and current flags word

	TEQ	R1, # Service_Reset
	BNE	%FT10

; It was a reset - therefore reset flags / mark as no dynamic area etc

	BIC	R0, R0, # f_TableValid :OR: f_PaletteV
	STR	R0, iFlags

	MOV	R0, # 0				; remove the dynamic area
	STR	R0, iDynamicArea
	STR	R0, pInverseTable
	STR	R0, pDistanceTable

	BL	claim_vectors			; must claim the vectors again

	EXITS
10
	TEQ	R1, # Service_ModeChange
	BICEQ	R0, R0, # f_TableValid		; mode change, therefore table bad
	TEQ	R1, # Service_SwitchingOutputToSprite
	EOREQ	R0, R0, # f_SwitchInvalid	; output gone to sprite - maybe invalid

	STR	R0, iFlags

	EXITS


;; ------------------------------------------------------------------------------
;; Perform SWI dispatch, first ensuring :
;;
;;  - SWI is within our supported range
;;  - IRQs are enabled as we take some time
;; ------------------------------------------------------------------------------

SWIDespatch ROUT

	LDR	WP, [WP]			; de-reference the workspace pointer
	TEQP	PC, #SVC_mode			;   ensure that IRQ's get re-enabled

	CMP	R11, #( %90-%00 ) / 4		; is the index valid for our swi table
	ADDCC	PC, PC, R11, LSL # 2		;   if it is then despatch
	B	%FT90
00
	B	ITable_Calculate
90
	ADR	R0, ErrorBlock_NaffSWI
	ORRS	PC, LR, #V_bit			; mark that an error occurred

err_badmode
	ADR	R0, ErrorBlock_BadMODE
	ORRS	PC, LR, #V_bit			; mark that an error occurred

	MakeErrorBlock NaffSWI
	MakeErrorBlock BadMODE


;; ------------------------------------------------------------------------------
;; Claim vectors used by the modules
;; ------------------------------------------------------------------------------

claim_vectors ENTRY "R1-R3"

	LDR	R3, iFlags
        TST	R3, # f_PaletteV		; is paletteV claimed currently
	EXITS	EQ

	MOV	R0, #PaletteV
	ADR	R1, palVhandler
	MOV	R2, WP
	SWI	XOS_Claim			; attempt to claim the palette vector
	ORRVC	R3, R3, # f_PaletteV		;  if that worked then mark as claimed

	STR	R3, iFlags

	EXIT

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

palVhandler ROUT

	TEQ	R4, # paletteV_Set
	TEQNE	R4, # paletteV_SetDefaultPalette
	TEQNE	R4, # paletteV_BulkWrite
	MOVNES	PC, LR				; not a modifying palette operation

	ENTRY	"WP"

	TEQ	R4, # paletteV_Set		; are we writing an entry?
	BNE	%FT01

        CMP	R1, # 24			; is it the border or cursor colour?
	EXITS	GE
01
	LDR	LR, iFlags
	BIC	LR, LR, # f_TableValid		; table is no longer valid
	STR	LR, iFlags

	EXITS


;;-----------------------------------------------------------------------------
;; InverseTable_Calculate implementation
;;
;; Return the pointers to the inverse colour table.  If the table is marked
;; as invalid then we must recompute it, also if output has been switched
;; to a sprite we must also recompute it.
;;
;; The table validity is marked by a flag in our flags word (f_TableValid),
;; when this == 1 then the table has been correctly cached, and therefore
;; does not need recomputing.
;;
;  Another bit is used to indicate if output is being swithced to a sprite,
;; this bit is toggled each time output is toggled.  Therefore if this SWI
;; is called and 'f_SwitchInvalid' == 1 then output it redirected to the
;; sprite and we must recompute the inverse table.
;;
;; The two tables returned allow the quick mapping for colour index to
;; 5,5,5 RGB, and 5,5,5 RGB to colour index (the later is often refered
;; to as an inverse table).
;;
;; 5,5,5 RGB contains the data where each gun is represented as 5 bits:
;;
;; 	< b14-10 == B >
;;                     < b9-5 == G >
;;				    < b4-0 == R >
;;
;; So using a colour number as an index into the table at R0 will yeild
;; a 32 bit word containing the above data.
;;
;; To convert that word back to a colour number then the 5,5,5 RGB
;; can be used as an index into the byte array of colour numbers.
;;
;; This SWI should only be called if the mode is == 8 bit per pixel,
;; all other depths will result in a 'Bad MODE error'.
;;
;; NB: If the SWI does error then R1 will be corrupt.
;;
;; in	-
;; out 	R0 -> index to 5,5,5 RGB data
;;	R1 -> 5,5,5 RGB data to index table
;;-----------------------------------------------------------------------------

ITable_Calculate ENTRY "R2"

	MOV	R0, #-1
	MOV	R1, #VduExt_Log2BPP
	SWI	XOS_ReadModeVariable		; read the log2 bits per pixel for this mode
	TEQ	R2, #3				;   if this is not 8 bit then exit
	BLNE	err_badmode
	BNE	%FT90

	LDR	R2, iFlags			; check to see if table is valid
	TST	R2, # f_SwitchInvalid
	BICNE	R2, R2, # f_TableValid :OR: f_SwitchInvalid
	TST	R2, # f_TableValid
	BLEQ	build_itable			; if not valid then build the inverse table

	ADRVC	R0, iPalette555			; -> RGB 5,5,5 table ( index => 5,5,5 )
	LDRVC	R1, pInverseTable		; -> inverse table (5,5,5 => colour number)
90
	EXIT


;; ------------------------------------------------------------------------------
;; Dynamic area management code.
;;
;; We keep the inverse table in a dynamic area, we create this dyanmic area with
;; enough room to grow and contain the distance table as-well, although this is
;; only claimed when the distance table is needed - therefore we can keep
;; our memory footprint nice and small.
;; ------------------------------------------------------------------------------

claim_area ENTRY "R1-R8"

	LDR	R0, iDynamicArea
	CMP	R0, # 0				; have we already allocated our dynamic area?
	EXITS	NE

	MOV	R0, # 0				; = 0 => create dynamic area
	MOV	R1, # -1
	LDR	R2, = da_MinimumSize		; minimum size (size of inverse table)
	MOV	R3, # -1
	MOV	R4, # ( 1:SHL:7)
	LDR	R5, = da_MaximumSize		; maximum size (inverse table + distance table)
	MOV	R6, # 0
	MOV	R7, # 0
	ADR	R8, Title			; -> name for dynamic area (Task Manager)
	SWI	XOS_DynamicArea

	STRVC	R1, iDynamicArea
	STRVC	R3, pInverseTable

	EXIT

release_area ENTRY "R0-R1"

	LDR	R1, iDynamicArea
	TEQ	R1, # 0				; has a dynamic area been created
	EXITS	EQ

	MOV	R0, # 1				; = 1 => discard dynamic area
	SWI	XOS_DynamicArea
	EXITS


;; ------------------------------------------------------------------------------
;; Compute both the inverse colour table, and quantise the 24 bit palette
;; down to its 5,5,5 representation.
;;
;; This code implementes the Incremental Distance algorithm for inverse table generation
;; as outlined in Graphics Gems pp116-119 (see that for the exact details).  Basicly,
;; we have an array which contains the postition within the colour cube of every
;; entry we are going to visit (based on the 5,5,5 indexs).
;;
;; This table is initialised to -1, ie. all entries must match.  We then
;; have three loops (b,g,r in that order).  And we scan along each axis of the
;; cube seeining if the distance for the colour at this point is greater
;; than the previously stored distance for thsi point.  If it is then we
;; replace it.
;;
;; Before we can start computing the table we read the current palette, via
;; ColourTrans - this will cope with output directed to a sprite and return
;; the one for that, or the screen palette expanded to full 24 bit.
;;
;; We then quanitise the palette down, by taking the top 5 bits of each
;; gun and composing the 5,5,5 palette data.  Whilst doing this we compare
;; it to the previous entries we have for the 5,5,5 table, if there is
;; no change then we do not need to compute the inverse table (which is
;; a length process and should be avoided).
;;
;; Assuming we have taken the above steps and have determined that the
;; palette has changed then we compute the inverse table.  We make use of
;; the Hourglass to indicate how far through this process we are - therefore
;; the user gets some impression of how long before their compute comes
;; back to life - the process takes about 7 seconds, on a RPC 600.
;;
;; NB: This code uses scratch space.
;;
;; ------------------------------------------------------------------------------

; Temporary workspace usage

		^ ScratchSpace
scratch_palette	# 256 * 4


; Register allocations

pITable 	RN 0	;			---- always ---
pDistances	RN 1	;			---- always ---

rDist		RN 2 	; (outerloop)
gDist		RN 3	; (outerloop)
bDist		RN 4	; (outerloop)

rInc		RN 5	; (outerloop)
gInc		RN 6	; (outerloop)
bInc		RN 7	; (outerloop)

r		RN 8	;	       (r inner loop)
g		RN 9	;                             (g inner loop)

b		RN 10	; 	                                     (b inner loop)
scratch		RN 10	; (outer loop)

iColours	RN 11	; (outer loop) 			(doubles as return value register)


; Table used to set hourglass percentage values

percent_table
	=  0,  3, 6,   9, 12, 15, 19, 22
	= 25, 28, 31, 35, 38, 41, 44, 47
	= 51, 54, 57, 60, 63, 67, 70, 73
 	= 76, 79, 83, 86, 89, 92, 95, 99
	ALIGN


; Do it....

build_itable ENTRY "R1-R11"

	SWI	XHourglass_On			; this could take some time

; Get palette for current screen mode / destination

	MOV	R0, # -1			; read palette for current destination
	MOV	R1, # -1
	LDR	R2, = scratch_palette		; into this buffer
	LDR	R3, = ?scratch_palette		;   which is so big
	MOV	R4, # 0
	SWI 	XColourTrans_ReadPalette
	BVS	%FT90

; Convert palette from 24 bit RGB to 5,5,5 RGB

	LDR	R0, = scratch_palette
	ADRL	R1, iPalette555
	LDR	R2, = ?scratch_palette
	MOV	R5, # 0				; table has not been modified yet
10
	LDR	R3, [ R0 ], #4			; pick up 24 bit palette entry
	AND 	R4, R3, #&f8000000		;   and convert to 5,5,5 RGB
	AND	LR, R3, #&00f80000
	ORR	R4, R4, LR, LSL # 3
	AND	R3, R3, #&0000f800
	ORR	R3, R4, R3, LSL # 6
	MOV	R3, R3, LSR # 17

	LDR	LR, [ R1 ]
	TEQ	LR, R3				; has the colour changed?
	MOVNE	R5, # 1				;   yes, so must re-compute the inverse table
	STR	R3, [ R1 ], #4

	SUBS	R2, R2, # 4
	BGT	%BT10				; loop until *ENTIRE* palette converted

	CMP	R5, #0				; has the palette actually changed?
	BEQ	%FT85				;   if not then don't bother re-calculating the colour table

; Ensure that we have the dynamic area

	BL	claim_area			; attempt to claim the dynamic area ready to build the table
	BVS	%FT90

	LDR	R0, iDynamicArea
	MOV	R1, # ?da_iDistanceTable
	SWI	XOS_ChangeDynamicArea		; expand to contain our distances table
	BVS	%FT90				;   if that fails then return

	LDR	R0, pInverseTable
	ASSERT	da_iDistanceTable > 0
	ADD	R0, R0, # da_iDistanceTable	; -> distance table in dynamic area
	STR	R0, pDistanceTable

; Initialise the distance table to -1 (assumes R0 points at it!)

	MOV	R1, # -1			; initialise the distances table to -1
	LDR	R2, = ( colourmax * colourmax * colourmax )
15
	SUBS	R2, R2, # 1			; decrease counter
	STRPL	R1, [ R0 ], #4			;   write initial value for distance
	BPL	%BT15				;   and loop...

	MOV	iColours, # 0
20
	CMP	iColours, # ?scratch_palette / 4
	BGE	%FT80

; Compute steps and build inverse table

	LDR	LR, = scratch_palette
	LDR	LR, [ LR, iColours, LSL # 2 ]	; pick up RGB value

	AND	rDist, LR, #&FF00
	MOV	rDist, rDist, LSR # 8
	MOV	rInc, rDist, LSL # nbits	; rInc = rDist (r) << nBits
	RSB	rInc, rInc, # xsqr
	MOV	rInc, rInc, LSL # 1		; rInc = 2 * ( xsqr - ( r << nbits ) )
	SUB	rDist, rDist, # x / 2		; rDist = r - ( x / 2 )

	AND	gDist, LR, #&FF0000
	MOV	gDist, gDist, LSR # 16
	MOV	gInc, gDist, LSL # nbits	; gInc = gDist (g) << nbits
	RSB	gInc, gInc, # xsqr
	MOV	gInc, gInc, LSL # 1		; gInc = 2 * ( xsqr - ( g << nbits ) )
	SUB	gDist, gDist, # x / 2		; gDist = g - ( x / 2 )

	MOV	bDist, LR, LSR # 24
	MOV	bInc, bDist, LSL # nbits	; bInc = bDist (b) << nbits
	RSB	bInc, bInc, # xsqr
	MOV	bInc, bInc, LSL # 1		; bInc = 2 * ( xsqr - ( b << nbits ) )
	SUB	bDist, bDist, # x / 2		; bDist = b - ( x / 2 )

	MOV	scratch, bDist
	MUL	bDist, scratch, bDist		; bDist  = ( bDist * bDist )
	MOV	scratch, gDist
	MLA	bDist, scratch, gDist, bDist	; bDist += ( gDist * gDist )
	MOV	scratch, rDist
	MLA	bDist, scratch, rDist, bDist	; bDist += ( rDist * rDist )

	ADR	R0, percent_table
	LDRB	R0, [ R0, iColours, LSR # 3 ]
	SWI	XHourglass_Percentage		; set the hourglass percentage value

	MOV	b, #0				; b = 0

	LDR	pITable, pInverseTable
	LDR	pDistances, pDistanceTable	; -> distance table

blue_loop
	CMP	b, # colourmax                  ; finished the red loop
	ADDGE	iColours, iColours, # 1		;   iColours += 4
	BGE	%BT20				;     and advance to the next colour

	MOV	gDist, bDist			; gDist = bDist
	MOV	g, #0				; g = 0

	Push	"gInc"

green_loop
	CMP	g, # colourmax			; finished the green loop
	BGE	end_green_loop

	MOV	rDist, gDist			; rDist = gDist
	MOV	r, # 0				; r = 0

	Push	"rInc"

red_loop
	CMP	r, # colourmax			; blue loop finished?
	BGE	end_red_loop

	TEQ	iColours, #0			; is this colour zero?
	STREQ	rDist, [ pDistances ]
	STREQB	iColours, [ pITable ]
	BEQ	%FT30

	LDR	LR, [ pDistances ]
	CMP	LR, rDist                       ; is it closer to this colour
	STRGT	rDist, [ pDistances ]
	STRGTB	iColours, [ pITable ]
30
	ADD	rDist, rDist, rInc		; rDist += rInc
	ADD	r, r, # 1			; r++
	ADD	rInc, rInc, # xsqr * 2		; rInc += xsqr * 2

	ADD	pITable, pITable, # 1		; pITable += 1
	ADD	pDistances, pDistances, # 4	; pDistances += 4

	B	red_loop

end_red_loop
	Pull	"rInc"

	ADD	gDist, gDist, gInc		; gDist += gInc
	ADD	g, g, # 1			; g++
	ADD	gInc, gInc, # xsqr * 2		; gInc += xsqr * 2

	B	green_loop

end_green_loop
	Pull	"gInc"

	ADD	bDist, bDist, bInc		; bDist += bInc
	ADD	b, b, #1			; b++
	ADD	bInc, bInc, # xsqr * 2		; bInc += xsqr * 2

	B	blue_loop

; Handle the exit conditions - removing temporary memory etc

80
	LDR	R0, iDynamicArea
	LDR	R1, = - ( ?da_iDistanceTable )
	SWI	XOS_ChangeDynamicArea		; remove distance table from dynamic area
85
	LDR	LR, iFlags
	ORR	LR, LR, # f_TableValid		; table is now valid
	STR	LR, iFlags
90
	Push	"R0,PC"
	SWI	XHourglass_Off			; remove hourglass
	Pull	"R0,LR"				;   preserving error condition around call
	RestoreMODE LR

	EXIT


      [ debug
	InsertNDRDebugRoutines
      ]

	END
