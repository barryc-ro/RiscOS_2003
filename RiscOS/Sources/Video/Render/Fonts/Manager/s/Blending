; > s.Blending

	GET 	hdr:ITable

; ------------------------------------------------------------------------------
; Blending macro, performs the grunt work of scaling a component by the alpha value.
; ------------------------------------------------------------------------------

;   $mask	=> mask for component within src/destination
;   $destData	=> background colour data
;   $alphaDst	=> alpha value 0-31 for amount of destination to be copied
;   $srcData	=> source colour data
;   $alphaSrc	=> alpha value 0-31 for amount of source to be copied
;   $shift	=> shift value for dealing with high bit guns.

	MACRO
$l	Blend	$mask, $destData, $alphaDst, $srcData, $alphaSrc, $shift
$l
      [ "$shift"=""
	ANDS	R2, $destData, # $mask
      |
	MOVS	R2, $destData, LSR # $shift
      ]
	MULNE	R2, $alphaDst, R2

      [ "$shift"=""
	ANDS	R3, $srcData, # $mask
      |
	MOVS	R3, $srcData, LSR # $shift
      ]
	MLANE	R2, $alphaSrc, R3, R2
	MOV	R2, R2, LSR # 4

      [ "$shift"=""
	CMP	R2, #$mask
	MOVGT	R2, #$mask
	AND	R2, R2, #$mask
	BIC	$destData, $destData, #$mask
	ORR	$destData, $destData, R2
      |
	CMP	R2, #$mask:SHR:$shift
	MOVGT	R2, #$mask:SHR:$shift
	AND	R2, R2, #$mask:SHR:$shift
	BIC	$destData, $destData, # $mask
	ORR	$destData, $destData, R2, LSL # $shift
      ]

	MEND


; ------------------------------------------------------------------------------
; Prime the blending engine ready to do its work, first we validate our state:
;
;	- is the mode supported
;	- has the client asked for blending to be performed
;	- do we have cached blending information
;
; Assuming that the above is passed then we prepare the pixel writing vectors
; and compute suitable table data which we can use when painting the character
; data onto the screen.
; ------------------------------------------------------------------------------

setblendingdata Entry "R0-R3,R10"

      [ :LNOT: blendingOn
	LDR	R0, plottype				; has client requested background blending?
	TST	R0, #paint_blended
	BEQ	%FT80
      ]

	LDR	R10, log2bpp				; log2 depth of output device
	CMP	R10, #5					;   if > 32 bit per pixel then ignore
	BGT	%FT80

	SUBS	R10, R10, #3				; convert to a valid index
	BMI	%FT80					;   and if < 8 bit per pixel then ignore

	ADR	R3, blend_table				; get pointer to blending functions for the depth
	ADD	R0, R3, R10, LSL # 4			;   index via the depth offset
	LDMIA	R0, { R0, R1, R2, R10 }
	ADD	R0, R0, R3
	ADD	R1, R1, R3
	ADD	R2, R2, R3

	Push	"R0-R1"

	TEQ	R10, #32				; check to see what depth we are in:-

	LDR	R0, currentRGB_f			; get the foreground pixel colour
	MOVEQ	R0, R0, LSR # 8				;   if 32 bit per pixel then shift down so aligned to bit 0
	ANDNE	R1, R0, #&f8000000			;   if 16 bit per pixel then generate 5,5,5 from 24 bit colour
	ANDNE	LR, R0, #&00f80000
	ORRNE	R1, R1, LR, LSL # 3
	ANDNE	R0, R0, #&0000f800
	ORRNE	R0, R1, R0, LSL # 6
	ORRNE	R0, R0, R0, LSR # 16
	MOVNE	R0, R0, LSR # 1
	STR	R0, blend_fgvalue

	LDRB	LR, bitsperpixel			; get the real pixel depth
	TEQ	LR, #8					;   is this 8 bit per pixel?
	BNE	%FT95

	SWI	XInverseTable_Calculate			; compute the inverse colour table
	ADRVCL	LR, blend_ctable			;   it worked so store the table pointers
	STMVCIA	LR, { R0, R1 }
	BVC	%FT95

	ADD	SP, SP, # 4*2
80
	ADRL	R0, putdata_mono			; default pointers for functions etc
	ADRL	R1, putdataM_mono
	ADR	R2, outputdata
90
	ADRL	R3, blend_putdata			; and store the table values away
	STMIA	R3, { R0-R1, R2 }

	PExitS
95
	Pull	"R0-R1"
	B	%BT90


; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Function tables for performing the blending, along with the alpha tables
; used to convert from cache data into data that the blending functions
; can sensibly cope with.
;
; 	+0	-> offset to putdata function
;	+4 	-> offset to putdataM function
;	+8	-> offset to alpha table
;	+12 	= bits per pixel (required for 8 bit blending)

blend_table
	&	blend_putdata_8bpp - blend_table	; 8 bpp
	&	blend_putdataM_8bpp - blend_table
	&	alpha_table8 - blend_table
	&	16					; (trick internals into 16 bits per pixel)

	&	blend_putdata_16bpp - blend_table	; 16 bpp blending
	&	blend_putdataM_16bpp - blend_table
	&	alpha_table16 - blend_table
	&	16

	&	blend_putdata_32bpp - blend_table	; 32 bpp blending
	&	blend_putdataM_32bpp - blend_table
	&	alpha_table32 - blend_table
	&	32

alpha_table8
	& &00000000, &01000000, &02000000, &03000000, &04000000, &05000000, &06000000, &07000000
	& &09000000, &0A000000, &0B000000, &0C000000, &0D000000, &0E000000, &0F000000, &10000000

alpha_table16
	& &00000000, &00010000, &00020000, &00030000, &00040000, &00050000, &00060000, &00070000
	& &00090000, &000A0000, &000B0000, &000C0000, &000D0000, &000E0000, &000F0000, &00100000

alpha_table32
	& &00000000, &00000100, &00000200, &00000300, &00000400, &00000500, &00000600, &00000700
	& &00000900, &00000A00, &00000B00, &00000C00, &00000D00, &00000E00, &00000F00, &00001000


; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Output function to cope with outputting no data to the destination buffer,
; resets the flags words and advances the pointer.
;
; out:	outptr += 4
;	outdata = &80000000
;	outmask = &00000000

blend_nodata

	ADD	outptr, outptr, #4			; skip this pixel set
	MOV	outdata, #&80000000			;   and if result is nothing then return
	MOV	outmask, #0

	MOVS	PC, LR


; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Blending methods for 8 bit per pixel, these are more complicated as we
; must attempt to go from 8 bit index to 15 bit RGB.  Having done this we
; can then perform the blend before returning back to 8 bits again.

blend_putdata_8bpp

	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata				;   if none set then write out

	Push	"R1-R3, R6-R7, R10-R11, LR"

	ADRL	R1, blend_fgvalue
	LDMIA	R1, { R1, R10, R11 }			; fg, blend_ctable, blend_itable

	LDR	pchar, [ outptr ]			; pick up the background pixel data
	MOV	R6, #4					; number of pixels to process
10
	ANDS	R9, outdata, #&0000001F			; is this pixel set?
	MOVEQ	pchar, pchar, ROR # 8			;   if not then ignore this pixel
	BEQ	%FT20

	AND	R7, pchar, #&000000FF			; get the palette index for this colour
	LDR	R7, [ R10, R7, LSL # 2 ]		;   and convert to 5,5,5 RGB value

	RSB	LR, R9, # 16				; amount of background to be preserved
	Blend 	&0000001f, R7, LR, R1, R9		;   and combine together blended
	Blend 	&000003e0, R7, LR, R1, R9
	Blend	&00007c00, R7, LR, R1, R9

	LDRB	R7, [ R11, R7 ]				; get the new colour number from the 5,5,5 RGB
	MOV	pchar, pchar, LSR #8			;   clear top bits and combine
	ORR	pchar, pchar, R7, LSL # 24
20
	MOV	outdata, outdata, LSR # 8		; move output data down again

	SUBS	R6, R6, #1				; decrease number of pixels to be processed
	BNE	%BT10					;   and keep looping until all done

	STR	pchar, [ outptr ], #4			; write out the new pixel data to the destination

        MOV     outdata, #&80000000              	; set marker bit ready for next set of pixels
        MOV     outmask, #0

	Pull	"R1-R3, R6-R7, R10-R11, PC",,^

blend_putdataM_8bpp

	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata				;   if none set then write out

	Push	"outptr, R1-R4, R6-R7, R10-R11, R12, LR"

	ADRL	R1, blend_fgvalue
	LDMIA	R1, { R1, R10, R11 }			; fg, blend_ctable, blend_itable

	LDR	R4, this_ymagcnt			; pick up scaling information
	LDR	R12, linelen				;   line advancement value
05
	LDR	pchar, [ outptr ]			; pick up the background pixel data
	MOV	R6, #4					; number of pixels to process
10
	ANDS	R9, outdata, #&0000001F			; is this pixel set?
	MOVEQ	pchar, pchar, ROR # 8			;   if not then ignore this pixel
	BEQ	%FT20

	AND	R7, pchar, #&000000FF			; get the palette index for this colour
	LDR	R7, [ R10, R7, LSL # 2 ]		;   and convert to 5,5,5 RGB value

	RSB	LR, R9, # 16				; amount of background to be preserved
	Blend 	&0000001f, R7, LR, R1, R9		;   and combine together blended
	Blend 	&000003e0, R7, LR, R1, R9
	Blend	&00007c00, R7, LR, R1, R9

	LDRB	R7, [ R11, R7 ]				; get the new colour number from the 5,5,5 RGB
	MOV	pchar, pchar, LSR #8			;   clear top bits and combine
	ORR	pchar, pchar, R7, LSL # 24
20
	MOV	outdata, outdata, ROR # 8		; move output data down again

	SUBS	R6, R6, #1				; decrease number of pixels to be processed
	BNE	%BT10					;   and keep looping until all done

	STR	pchar, [ outptr ], -R12			; write out the new pixel data to the destination

	SUBS	R4, R4, # 1				; decrease the scaling count
	BNE	%BT05

	Pull	"outptr, R1-R4, R6-R7, R10-R11, R12, LR"
	B	blend_nodata				; reset for end of line, and advance

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Blending methods for 16 bit per pixel.

        AlignCd (Urk):MOD:16

blend_putdata_16bpp

	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata

	Push	"R1-R3, LR"

	LDR	R1, blend_fgvalue			; foreground painting colour
        LDR     pchar, [ outptr ]			;   and pick up the current background pixel data

	ANDS	R9, outdata, #&0000001F			; what is the intensity of the pixel we want to plot
	BEQ	%FT20					;   if == 0 then nothing therefore skip

	RSB	LR, R9, # 16				; amount of background to be preserved
	Blend 	&0000001f, pchar, LR, R1, R9		;   and combine together blended
	Blend 	&000003e0, pchar, LR, R1, R9
	Blend	&00007c00, pchar, LR, R1, R9
20
	MOVS	outdata, outdata, LSR # 16		; what is the intensity of the pixel we want to plot
	BEQ	%FT30					;   if == 0 then nothing therefore skip

	RSB	LR, outdata, # 16			; amount of background to blend with
	Blend 	&001f0000, pchar, LR, R1, outdata	;   and do the blending
	Blend	&03e00000, pchar, LR, R1, outdata
	Blend	&7c000000, pchar, LR, R1, outdata, 26
30
        STR     pchar, [ outptr ], #4 			; write the new pixel value out

        MOV     outdata, #&80000000              	; set marker bit ready for next set of pixels
        MOV     outmask, #0

	Pull	"R1-R3, PC",,^

blend_putdataM_16bpp

	ANDS	outdata, outdata, outmask
	BEQ	blend_nodata				; nothing to be blended therefore ignore

	Push	"outptr, R1-R3, R6-R7, LR"

	LDR	R1, blend_fgvalue			; colour value ready to blend into the destination

	LDR	R6, linelen
	LDR	R7, this_ymagcnt			; pick up scaling information
10
        LDR     pchar, [ outptr ]			; and pick up the current background pixel data

	ANDS	R9, outdata, #&0000001F			; what is the intensity of the pixel we want to plot
	BEQ	%FT20					;   if == 0 then nothing therefore skip

	RSB	LR, R9, # 16				; amount of background to be preserved
	Blend 	&0000001f, pchar, LR, R1, R9		;   and combine together blended
	Blend 	&000003e0, pchar, LR, R1, R9
	Blend	&00007c00, pchar, LR, R1, R9
20
	MOVS	R9, outdata, LSR # 16			; what is the intensity of the pixel we want to plot
	BEQ	%FT30					;   if == 0 then nothing therefore skip

	RSB	LR, R9, # 16				; amount of background to blend with
	Blend 	&001f0000, pchar, LR, R1, R9		;   and do the blending
	Blend	&03e00000, pchar, LR, R1, R9
	Blend	&7c000000, pchar, LR, R1, R9, 26
30
        STR     pchar, [ outptr ], -R6 			; write the new pixel value out

	SUBS	R7, R7, # 1				; decrease the counter
	BNE	%BT10					;   and loop again

	Pull	"outptr, R1-R3, R6-R7, LR"
	B	blend_nodata


; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Blend into 32 bit per pixel

        AlignCd (Urk):MOD:16

blend_putdata_32bpp

	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata

	Push	"R1-R3, LR"

	LDR	R1, blend_fgvalue			; get the foreground painting colour

	MOV	outdata, outdata, LSR # 8		; amount of foreground to blend
	RSB	LR, outdata, # 16			;   and the amount of background

        LDR     pchar, [ outptr ]			; and pick up the current background pixel data
	Blend 	&000000FF, pchar, LR, R1, outdata	;   blend them together
	Blend 	&0000FF00, pchar, LR, R1, outdata
	Blend	&00FF0000, pchar, LR, R1, outdata
        STR     pchar, [ outptr ], #4 			; write the new pixel value out

        MOV     outdata, #&80000000              	; set marker bit ready for next set of pixels
        MOV     outmask, #0

	Pull	"R1-R3, PC",,^

blend_putdataM_32bpp

	ANDS	outdata, outdata, outmask
	BEQ	blend_nodata				; nothing to be blended therefore ignore

	Push	"outptr, R1-R3, R6, LR"

	LDR	R1, blend_fgvalue			; get the foreground painting colour
	LDR	R6, linelen				;   and the scaling information
	LDR	R9, this_ymagcnt

	MOV	outdata, outdata, LSR # 8		; amount of foreground to blend
	RSB	LR, outdata, # 16			;   and the amount of background
01
        LDR     pchar, [ outptr ]			; and pick up the current background pixel data
	Blend 	&000000FF, pchar, LR, R1, outdata	;   blend them together
	Blend 	&0000FF00, pchar, LR, R1, outdata
	Blend	&00FF0000, pchar, LR, R1, outdata
        STR     pchar, [ outptr ], -R6 			; write the new pixel value out

	SUBS	R9, R9, #1
	BNE	%BT01

	Pull	"outptr, R1-R3, R6, LR"
	B	blend_nodata


	END
