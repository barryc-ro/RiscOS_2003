; Sources.Encoding

;;----------------------------------------------------------------------------
;; Construct mapping block from two encoding files
;;----------------------------------------------------------------------------

; In    R6 -> font header block
;       [R6,#hdr_encoding] = identifier of encoding
; Out   R1 -> mapping index within map block (in font cache)
;       R1 = 0 if mapping was direct (ie. no remapping required)
;       [R6,#hdr_base] = base encoding or alphabet, depending on whether this is a direct mapping
;       R6 relocated if necessary
;       encoding block is marked newest and brought to the head of its hash chain (essential for deleteblock)

HashIndexSize   *       64

                ^       0
hash_idaddr     #       4
hash_code       #       4
hash_link       #       4
hash_end        #       0

getmapping_fromR6 PEntry Mapping, "R0,R2-R5,R7-R9"

        ADD     R14,R6,#hdr_encoding
        LDMIA   R14,{R2-R4}
        DebugS  enc,"Get mapping for ",R14

        MOVS    R1,R2                           ; mapping is null if encoding name = 0,0,0
        MOVEQ   R14,#-1
        STREQ   R14,[R6,#hdr_base]
        PExitS  EQ

        EOR     R5,R2,R3,ROR #2                 ; this hash function gets all 96 bits involved in bits 0..3
        EOR     R5,R5,R4,ROR #4
        EOR     R5,R5,R5,ROR #16
        EOR     R5,R5,R5,ROR #8
        EOR     R5,R5,R5,ROR #4
        ASSERT  MapIndexSize = 16
        AND     R14,R5,#15                      ; R14 = hash value (0..15)

        Debuga  enc,"Hash value =",R14
        Debug   enc,", registers",R2,R3,R4

        LDR     R5,cacheindex
        ADD     R5,R5,#cache_mapindex
        LDR     R1,[R5,R14,LSL #2]!             ; R1 -> first map block in chain, R5 -> parent link

        MOV     R0,R5                           ; R0 = backlink

61      TEQ     R1,#0
        BEQ     getnewmap

        ADD     R14,R1,#map_encoding
        LDMIA   R14,{R7-R9}
        Debuga  enc,"Map block at",R1
        Debug   enc,", registers",R7,R8,R9
        TEQ     R2,R7
        TEQEQ   R3,R8
        TEQEQ   R4,R9
        ADDNE   R0,R1,#map_link                 ; R0 = backlink
        LDRNE   R1,[R1,#map_link]               ; R1 -> next block
        BNE     %BT61

; bring this block to the front of the age list: must also ensure that it's at the head of the linked list

        TEQ     R0,R5                           ; EQ => this is the first encoding in the list
        BEQ     %FT62

        Debug   enc,"Moving encoding to front of list: prev,curr,head =",R0,R1,R5

        LDR     R7,[R1,#map_link]!              ; remove this block from chain
        STR     R7,[R0]
        TEQ     R7,#0
        STRNE   R0,[R7,#std_anchor]

        LDR     R7,[R5]                         ; we know the chain is not null, as we weren't at the head
        STR     R1,[R7,#std_anchor]
        STR     R7,[R1],#-map_link
        STR     R1,[R5]                         ; put this block at head of list
        STR     R5,[R1,#std_anchor]
62
        MarkAge R1,R7,R8                        ; bring to front of age list

        LDR     R14,[R1,#map_base]
        CMP     R14,#0                          ; [R6,#hdr_base] = base, or alphabet if there isn't one
        LDRLT   R14,[R1,#map_alphabet]
        STR     R14,[R6,#hdr_base]              ; for setleafnames_R6
        ADDGE   R1,R1,#map_index                ; R1 -> lookup table (external -> internal character codes)
        MOVLT   R1,#0                           ; R1 = 0 if direct mapping used
        Debug   enc,"R1 -> map at",R1
        PExitS

; OK, this is the big one!  Construct a map block from an encoding and its base

getnewmap
        Debug   enc,"Get new map"

        BL      grabblock_init                  ; set up pointers for grabblock_claim

        ADD     R1,R6,#hdr_encoding             ; In  R1 -> id of target encoding
        STR     R1,currentencoding
        MOV     R9,#lfff_encoding               ;     R9 => look for encodings, not fonts
        BL      findblockfromID_noqual          ; Out R2 -> encoding block, error if not found

        Debug   enc,"encoding block at",R2

        BLVC    getencodingpath                 ; In R2 -> encoding block, Out R1 -> full filename
        BLVC    getencodingfilelength           ; R4 = length of encoding file

        ADDVC   R3,R4,#1                        ; R3 = space used for first file
        BLVC    grabblock_claim                 ; R2 -> block

        BLVC    loadencodingfile                ; R2 -> where to load file, R4 = length

; now scan through the data, looking for %%RISCOS_BasedOn <n>

        MOVVC   R14,#-1                         ; none found so far
        STRVC   R14,baseencoding
        STRVC   R14,alphabet

        MOVVC   R9,R2                           ; R9 -> start of target encoding (for later)

        BLVC    findidentifier                  ; R2 -> first identifier (error if not found)
        BVS     %FT99

; if no base encoding mentioned, go for a direct mapping

        LDR     R14,baseencoding
        CMP     R14,#0
        BGE     %FT40

        ADD     R1,R6,#hdr_encoding
        LDMIA   R1,{R2,R3,R4}

        PushP   "Saving font header pointer",R6

        MOV     R6,#map_end1                    ; block is much shorter for a direct mapping
        BL      reservecache
        BVS     %FT90

        LDR     R14,baseencoding                ; base encoding (none)
        STR     R14,[R6,#map_base]
        LDR     R14,alphabet                    ; alphabet (must be used, since there's no base encoding)
        STR     R14,[R6,#map_alphabet]
        ADD     R14,R6,#map_encoding
        STMIA   R14,{R2,R3,R4}
        MOV     R14,#mapf_direct
        STR     R14,[R6,#map_flags]
        B       %FT100

; this encoding is based on another - load it in

40      BL      getbaseencodingpath             ; R1 -> filename of base encoding, or error if none
        BLVC    getencodingfilelength           ; R4 = length of this second file

; we are now in a position to work out the required amount of memory in the font cache

        ADDVC   R3,R4,#1                        ; R3 = size required for second file
        BLVC    grabblock_claim
        BLVC    loadencodingfile                ; R2 -> where to load file, R4 = length
        BVS     %FT99

; count number of identifiers in base encoding, so we know how much space to reserve for the hash table

        Push    "R2"
        MOV     R8,#0

        BL      findidentifier                  ; R2 -> first identifier, or error
        ADDVC   R8,R8,#1
01      BLVC    findnextidentifier              ; R2 -> first identifier, or error
        ADDVC   R8,R8,#1
        BVC     %BT01

        Pull    "R2"                            ; go back to the start

        CMP     R8,#MaxChars                    ; we still have a limit, because of the size of the font header
        BLGT    xerr_toomanyids
        BVS     %FT99

; reserve space at end of cache - we need the actual block, plus a 64 word hash table and 12 bytes per entry

        Debuga  enc,"Base encoding contains",R8
        Debug   enc," identifiers"

        PushP   "Saving font header pointer",R6

        MOV     R6,#map_end + HashIndexSize*4
        ASSERT  hash_end = 12
        ADD     R6,R6,R8,LSL #2                 ; add 12 bytes per link
        ADD     R6,R6,R8,LSL #3
        Debug   enc,"Block size with space for hash table is",R6
        BL      reservecache                    ; R6 -> block, size overlarge (will be reduced later)
        BVS     %FT90

; now go through the base encoding, building up a set of hash table entries and links

        ADD     R8,R6,#map_end                  ; R8 -> end of real block (hash table)
        MOV     R14,#0
        MOV     R3,#HashIndexSize-1

02      STR     R14,[R8,R3,LSL #2]
        SUBS    R3,R3,#1
        BPL     %BT02

        ADD     R3,R8,#HashIndexSize*4          ; R3 -> free space for hash links
        MOV     R4,#0
        BL      findidentifier                  ; R2 -> next identifier
03      BLVC    getidentifierhash               ; R0 = hash value of identifier in R2 (0..HashIndexSize-1)
        LDRVC   R14,[R8,R0,LSL #2]              ; R14 = link to next
        STRVC   R3,[R8,R0,LSL #2]               ; store this one at list head
        ASSERT  hash_idaddr = 0
        ASSERT  hash_code = 4
        ASSERT  hash_link = 8
        STMVCIA R3!,{R2,R4,R14}                 ; store pointer to identifier and link to next block
        ADDVC   R4,R4,#1                        ; go on to next char code
        BLVC    findnextidentifier              ; R2 -> next identifier
        BVC     %BT03

      [ debugbrk :LOR: debugenc
        LDR     R14,[R6,#std_size]
        BIC     R14,R14,#size_flags
        ADD     R14,R6,R14
        Debug   enc,"Block end, used up to",R14,R3
        TEQ     R14,R3
        BreakPt "Wrong encoding block size",NE
      ]

; now go through the target encoding, looking up the names in the hash table and extracting the values

        MOV     R2,R9                           ; R2 -> start of target encoding

        PullPx  "Font header ptr",R1
        ADDS    R1,R1,#hdr_encoding             ; R1 -> encoding name (in case of error) - clearing V
        STR     R1,currentencoding              ; for error reporting

        LDMIA   R1,{R3,R7,R9}
        ADD     R14,R6,#map_encoding            ; stash encoding name for next time
        STMIA   R14,{R3,R7,R9}

        LDR     R14,baseencoding                ; for referencing IntMetrics<n> and Outlines<n>
        STR     R14,[R6,#map_base]
        LDR     R14,alphabet                    ; in case there's no outlines<base> file
        STR     R14,[R6,#map_alphabet]
        MOV     R14,#0
        STR     R14,[R6,#map_flags]

        DebugS  enc,"Scanning target encoding ",R1

        ADD     R9,R6,#map_index
        MOV     R7,#256                         ; we require exactly 256 identifiers

        BL      findidentifier
        B       %FT51

05      BL      findnextidentifier              ; R2 -> next identifier
51      BVS     %FT85                           ; report error if reached end

        BL      getidentifierhash               ; R0 = hash value
        LDR     R3,[R8,R0,LSL #2]               ; R3 -> head of list

06      TEQ     R3,#0
        BLEQ    xerr_baseidnotfound
        BVS     %FT85
        LDR     R0,[R3,#hash_idaddr]            ; R0 -> identifier for this block
        BL      compareidentifiers
        LDRNE   R3,[R3,#hash_link]
        BNE     %BT06

        LDR     R14,[R3,#hash_code]             ; store internal character code in final mapping table
        STR     R14,[R9],#4

        SUBS    R7,R7,#1
        BNE     %BT05

        BL      findnextidentifier              ; insist on getting an error here (should have run out)
        BVS     %FT07
        BL      xerr_toofewids
        B       %FT85

; finished - reset size of block to correct value and link into map index

07      SUBS    R14,R9,R6                       ; R14 = size of block (and clear V)
        ORR     R14,R14,#size_claimed           ; treat as permanently claimed for age purposes
        STR     R14,[R6,#std_size]

        Debug   enc,"Reset block to size (end)",R6,R14,R9

        LDR     R14,cacheindex
        STR     R9,[R14,#cache_free]

; comes here from direct map block creation: R6 -> block, font header pushed

100     LDR     R9,[R5]                         ; R5 -> hash chain head (still there!)
        STR     R6,[R5]
        STR     R5,[R6,#std_anchor]
        STR     R9,[R6,#map_link]!              ; R6 -> link in block
        TEQ     R9,#0
        STRNE   R6,[R9,#std_anchor]

        ADD     R1,R6,#map_index - map_link     ; R1 -> map
        Debug   enc,"Map index is at",R1

        PullP   "Recovering font header pointer",R6

        LDR     R14,[R1,#map_base - map_index]
        CMP     R14,#0
        LDRLT   R14,[R1,#map_alphabet - map_index]
        STR     R14,[R6,#hdr_base]
        MOVLT   R1,#0                           ; R1 = 0 if direct mapping used

        BL      grabblock_close                 ; free RMA blocks

        CheckCache "Exit from getmapping_fromR6"

        PExitS

; error exit - discard block and recover R6 from relocation stack

85
        DiscardBlock R6,R2,R14                  ; reset cachefree and remove block from age list
90
        PullP   "Recovering font header pointer",R6
99
        BL      grabblock_close                 ; preserves error state
        STRVS   R0,[sp]
        PExit

;.............................................................................

; In    R1 -> full filename of encoding file being searched
;       R2 -> point in file reached so far
; Out   R2 -> start of identifier after this one, or error if none left
;       [baseencoding] = base encoding number if encountered in a comment

findnextidentifier Entry "R0,R3"

        Debug   enc2,"findnextidentifier: R2 =",R2

01      MOV     R3,R2                   ; R3 -> point reached so far
        BL      getcharfromR2           ; skips comments and analyses them
        BL      isalphanumeric          ; keep going till we've passed the first identifier
        BHI     %BT01
        BEQ     %FT99                   ; error if reached terminator

        MOV     R2,R3                   ; step back so this character is re-read
        BL      findidentifier

        EXIT

99      BL      xerr_toofewids
        STRVS   R0,[sp]
        EXIT

;.............................................................................

; In    R1 -> full filename of encoding file being searched
;       R2 -> point in file reached so far
; Out   R2 -> start of next identifier, or error if none left
;       [baseencoding] = base encoding number if encountered in a comment

findidentifier Entry "R0"

        Debug   enc2,"findidentifier: R2 =",R2

02      BL      getcharfromR2           ; R0 = next char, R2 updated
        TEQ     R0,#"/"                 ; if found "/", we've done it
        EXITS   EQ

        TEQ     R0,#0                   ; error if reached terminator
        BEQ     %FT99

        CMP     R0,#" "                 ; allow ctrl-chars and space as separators
        BLE     %BT02

        SUB     R2,R2,#1
        BL      xerr_idwithoutslash     ; Identifier "xxx" does not start with "/"
        STRVS   R0,[sp]
        EXIT

99      BL      xerr_toofewids
        STRVS   R0,[sp]
        EXIT

;.............................................................................

; In    R2 -> start of identifier
; Out   R0 = hash value for identifier (0..HashIndexSize-1)

getidentifierhash Entry "R2,R3"

        DebugS  enc2,"identifier =",R2

        MOV     R3,#0

01      BL      getcharfromR2           ; R0 = next char in identifier
        BL      isalphanumeric
        MOVHI   R14,R3,LSL #1
        EORHI   R3,R14,R3,LSR #5        ; gradually rotate the bytes WITHIN 6 bits
        EORHI   R3,R0,R3
        BHI     %BT01

; Check that HashIndexSize is a power of 2

        ASSERT  (HashIndexSize :AND: -HashIndexSize) = HashIndexSize

        AND     R0,R3,#HashIndexSize-1   ; R0 = hash value in range 0..HashIndexSize-1

        Debug   enc2,"hash value =",R0

        EXITS

;.............................................................................

; In    R2 -> current position in encoding file
; Out   R0 = next non-comment character in encoding file
;       R2 -> next character after that
;       [baseencoding] updated if "%%RISCOS_BasedOn <n>" encountered
;       [alphabet] updated if "%%RISCOS_Alphabet <n>" encountered

getcharfromR2 ROUT

        LDRB    R0,[R2],#1              ; exit if next char is not the comment symbol
        TEQ     R0,#"%"
        MOVNES  PC,LR

        Entry   "R1,R3"

        ADR     R1,str_riscos
01      LDRB    R14,[R1],#1             ; see if we've matched the whole string yet
        TEQ     R14,#0
        BEQ     %FT03
        LDRB    R0,[R2],#1
        TEQ     R0,R14
        BEQ     %BT01

02      CMP     R0,#32                  ; skip rest of comment (up to control-char)
        LDRGEB  R0,[R2],#1
        BGE     %BT02
        EXITS                           ; return terminator of comment

03      LDRB    R0,[R2]                 ; check to see which one we should carry on with
        TEQ     R0,#"B"
        ADREQ   R1,str_basedon          ; R1 -> string to match with
        ADREQ   R3,baseencoding         ; R3 -> where to store the result
        ADRNE   R1,str_alphabet         ; ditto
        ADRNE   R3,alphabet
31      LDRB    R14,[R1],#1             ; see if we've matched the whole string yet
        TEQ     R14,#0
        BEQ     %FT04
        LDRB    R0,[R2],#1
        TEQ     R0,R14
        BEQ     %BT31
        B       %BT02

04      MOV     R0,#10                  ; R0 = default base (10)
        MOV     R1,R2                   ; R1 -> string
        SWI     XOS_ReadUnsigned        ; R1 -> terminator, R2 = value
        STRVC   R2,[R3]                 ; R3 -> where to store the result
        ADDS    R2,R1,#0                ; just ignore this if not a valid number
        LDRB    R0,[R2],#1              ; continue skipping comment from terminator of number
        B       %BT02

str_riscos      DCB     "%RISCOS_", 0
str_basedon     DCB     "BasedOn ", 0
str_alphabet    DCB     "Alphabet ", 0
                ALIGN

;.............................................................................

; In    R0 = character code
; Out   EQ => character is 0 (EOF)
;       CS => character is alphanumeric
;       CC => character is not alphanumeric

isalphanumeric Entry "R0,R1"

        CMP     R0,#0                   ; EQ, CS => EOF
        EXIT    EQ

        ADR     R1,alphanumtab
        LDRB    R1,[R1,R0,LSR #3]       ; R1 = flag byte
        AND     R0,R0,#7                ; R0 = bit number
        MOV     R1,R1,LSR R0            ; R1 bit 1 = value required
        AND     R1,R1,#1
        MOV     R1,R1,LSL #1
        CMP     R1,#1                   ; HI => alphanumeric, LO => not alphanumeric

        EXIT

; PostScript alphanumeric characters are anything except ( ) < > [ ] { } / % and white space
; Characters 127 and above should not appear in PostScript files - I treat them all as non-alpha

alphanumtab
        DCD     2_00000000000000000000000000000000              ; characters &1F..&00
        DCD     2_10101111111111110111110011011110              ; characters &3F..&20
        DCD     2_11010111111111111111111111111111              ; characters &5F..&40
        DCD     2_11010111111111111111111111111111              ; characters &7F..&60
        DCD     0, 0, 0, 0                                      ; can't use &80..&FF

;.............................................................................

; In    R2 -> start of identifier #1
;       R0 -> start of identifier #2
; Out   EQ => identifiers match, NE => they don't

compareidentifiers Entry "R0,R2,R3,R5"

        DebugS  enc2,"compareIDs: #1 =",R2
        DebugS  enc2,"            #2 =",R0

        MOV     R3,R0                   ; R3 -> identifier #2

01      LDRB    R0,[R2],#1              ; no need to look for comments in here
        BL      isalphanumeric
        MOVLS   R0,#0

        MOV     R5,R0                   ; R5 = character from identifier #1

        LDRB    R0,[R3],#1              ; no need to look for comments in here
        BL      isalphanumeric
        MOVLS   R0,#0                   ; R0 = character from identifier #2

        TEQ     R0,#0
        TEQEQ   R5,#0
        EXIT    EQ                      ; EQ => identifiers match

        TEQ     R0,R5
        BEQ     %BT01

        EXIT                            ; NE => identifiers don't match

;.............................................................................

; In    [baseencoding] = base encoding number (-1 => none)
;       R1 -> full filename of target encoding (in case error message required)
; Out   R1 -> full filename of base encoding

getbaseencodingpath Entry "R2,R9", 32   ; use 32 bytes on the stack (automatically removed by EXIT)

        LDR     R2,baseencoding
        CMP     R2,#0
        BLLT    xerr_nobaseencoding

        ADRVC   R0,str_baseenc
        MOVVC   R1,sp                   ; may need up to 10 + max length of 32-bit cardinal
        BLVC    copy_r0r1_suffixR2      ; R1 -> "/Base<n>" (on stack)
        MOVVC   R9,#lfff_encoding
        BLVC    findblockfromID_noqual  ; R2 -> block for "/Base<n>" (may not be in same directory)
        BLVC    getencodingpath         ; R1 -> full filename of base encoding

        LDMVCIA sp,{R2,R9,R14}
        ADRVC   R0,encbuffer2
        STMVCIA R0,{R2,R9,R14}
        STRVC   R0,currentencoding      ; for subsequent error reporting

        EXIT

str_baseenc     DCB     "/Base", 0
                ALIGN

;.............................................................................

; In    R2 -> encoding block
; Out   R1 -> full filename (in fontfilename)
;
; NB: Does not check for overflow - this can be done when scanning the prefixes

getencodingpath Entry ""

        LDR     R0,[R2,#lff_prefixaddr]        ; R14 -> prefix block
        ADD     R0,R0,#lfpr_prefix
        ADR     R1,fontfilename
        BL      copy_r0r1

        ADR     R0,str_Encodingsdot
        BL      copy_r0r1

        LDR     R0,[R2,#lff_identaddr]
        BL      copy_r0r1

        ADR     R1,fontfilename
        DebugS  enc,"encoding pathname",R1

        EXITS

str_Encodingsdot        DCB     "Encodings.", 0
                        ALIGN

;.............................................................................

; In    R1 -> full filename of encoding file
; Out   R4 = length of encoding file
;       Length returned as 0 if object does not exist, or is a directory

getencodingfilelength Entry "R2,R3,R5"

        MOV     R0,#OSFile_ReadNoPath
        SWI     XOS_File
        TEQ     R0,#object_file         ; if not a file, pretend it's zero-length
        MOVNE   R4,#0                   ; (the load operation should fail)

        Debug   enc,"encoding file length =",R4

        EXIT                            ; can still return errors

;.............................................................................

; In    R1 -> full filename of encoding file
;       R2 -> where to load file
;       R4 = length of buffer
; Out   [R2..] = file contents, with a 0 stuck on the end as a terminator

loadencodingfile Entry "R1-R5"

        Debug   enc,"Loading encoding file at addr,size",R2,R4

        MOV     R0,#OSFile_LoadNoPath
        MOV     R3,#0                   ; load at specified address
        SWI     XOS_File

        LDRVC   R2,[sp,#1*4]
        MOVVC   R14,#0
        STRVCB  R14,[R2,R4]             ; terminate file data

        EXIT

;-----------------------------------------------------------------------------

; Error reporting routines

        MakeErrorBlock FontBadEncodingSize
        MakeErrorBlock FontTooFewIDs
        MakeErrorBlock FontTooManyIDs
        MakeErrorBlock FontNoBaseEncoding
        MakeErrorBlock FontMustHaveSlash
        MakeErrorBlock FontIdentifierNotFound

xerr_nobaseencoding
        ADR     R0,ErrorBlock_FontNoBaseEncoding        ; drop through
        B       XError_with_encoding_noR2

xerr_badsize
        ADR     R0,ErrorBlock_FontBadEncodingSize
        B       XError_with_encoding_noR2

xerr_toofewids
        ADR     R0,ErrorBlock_FontTooFewIDs
        B       XError_with_encoding_noR2

xerr_toomanyids
        ADR     R0,ErrorBlock_FontTooManyIDs
        B       XError_with_encoding_noR2

xerr_idwithoutslash
        ADR     R0,ErrorBlock_FontMustHaveSlash
        B       XError_with_encoding

xerr_baseidnotfound
        ADR     R0,ErrorBlock_FontIdentifierNotFound    ; drop through
;.............................................................................

; In    R0 -> error block, ie. errno followed by "token:default"
;       [currentfont] = font handle
;       [cacheindex] -> font index
;       [fontheader,#hdr_encoding] = encoding
;       R2 -> identifier (if relevant) (denoted by %1)
; Out   VS, R0 -> translated error block (in errorbuffer)

XError_with_encoding Entry "R0-R4,R9", 256       ; buffer on stack for encoding name

XError_with_encoding_altentry

      [ debugxx
        ADD     R14,R0,#4
        DebugS  xx,"XError_with_encoding: ",R14
      ]

        LDR     R1,currentencoding      ; set up earlier - may be base or target encoding

        MOV     R9,#lfff_encoding
        MOV     R3,sp                   ; R3 -> buffer to contain translated name
        BL      get_name_from_id        ; R1 -> encoding name (looked up from list of known encodings)

        MOVS    R3,R2
        BEQ     %FT35

31      LDRB    R0,[R3],#1              ; R0 = next char from identifier
        SUB     R14,R2,R3
        CMP     R14,#-32                ; report 32 chars at most
        CMPGT   R0,#32                  ; stop on next space or ctrl-char
        BGT     %BT31

        MOV     R14,#0                  ; it's OK to terminate this - only non-fatal error occurs at EOF
        STRB    R14,[R3,#-1]

35      LDR     R0,[sp,#256]            ; R0 -> error block
        BL      MyGenerateError_2       ; allows 2 parameters

        STR     R0,[sp,#256]            ; set up return value
        EXIT

; In    as for XError_with_encoding, except R2 is set to 0

XError_with_encoding_noR2 ALTENTRY

        MOV     R2,#0
        B       XError_with_encoding_altentry

;.............................................................................

; In    R1 -> identifier / Font_FindFont string
;       R3 -> buffer to contain name (256 bytes long)
;       R9 = 0 => look for font name
;       R9 = lfff_encoding => look for encoding name
; Out   R1 -> font/encoding name (zero-terminated)
;             this may be held in [R3..]

; encoding name looked up if available:
;       1: in encoding block, if found
;       2: in encoding string, if \e found (with the correct language ID)
;       3: in encoding string, if \E found
;       4: encoding string itself (must be just the identifier)

get_name_from_id Entry "R0-R4"

        DebugS  xx,"get_name_from_id: ",R1

        TEQ     R1,#0                   ; if null, forget it
        EXITS   EQ

        LDRB    R14,semaphore           ; forget it if semaphore set
        Debug   xx,"get_name_from_id: semaphore =",R14
        TEQ     R14,#0
        EXITS   NE                      ; the string on exit will not be used, as MyGenerateError is also semaphored

        MOV     R14,#1
        STRB    R14,semaphore

        BL      findblockfromID         ; VC => R2 -> block, VS => block not found
        MOVVS   R2,#0
        BVS     %FT01

        LDR     R14,territory           ; only use name if territory matches
        LDR     R3,[R2,#lff_territory]
        TEQ     R14,R3
        LDREQ   R1,[R2,#lff_nameaddr]   ; R1 -> font/encoding name
        BEQ     %FT90

01      MOV     R3,R1                   ; R1 -> font/encoding identifier
        MOV     R4,R2                   ; R4 -> block (0 if not found)

        LDR     R1,[sp,#4]              ; now look for name in string provided
        TEQ     R9,#0
        MOVEQ   R2,#"f"
        MOVNE   R2,#"e"
        BL      findfield               ; R1 -> <territory> <name> (if VC)
        BNE     %FT02                   ; NE => not found

        MOV     R0,#10                  ; R0 = default base (10)
        SWI     XOS_ReadUnsigned        ; R1 -> terminator, R2 = value
        BVS     %FT02                   ; use identifier if name not found or invalid number
        LDR     R14,territory
        TEQ     R14,R2                  ; or if name's territory doesn't match the current one
        BNE     %FT02

        ADD     R0,R1,#1                ; skip number terminator
        LDR     R1,[sp,#3*4]            ; R1 -> output buffer
11      LDRB    R14,[R0],#1
        CMP     R14,#"\"
        CMPNE   R14,#" "-1              ; space does not terminate names
        MOVLE   R14,#0
        STRB    R14,[R1],#1
        BGT     %BT11

        B       %FT32

; take identifier from block if found, and string if not

02      TEQ     R4,#0
        MOVEQ   R0,R3                   ; R0 -> identifier in string if block not found
        LDRNE   R0,[R4,#lff_identaddr]  ; R0 -> identifier in block otherwise

; copy identifier to a temporary buffer, reversing if output write direction is right to left

        LDR     R14,territory_writedir
        TST     R14,#WriteDirection_RightToLeft
        BNE     %FT04

03      LDR     R1,[sp,#3*4]            ; R1 -> output buffer
31      LDRB    R14,[R0],#1
        CMP     R14,#"\"
        CMPNE   R14,#" "                ; space terminates identifiers
        MOVLE   R14,#0
        STRB    R14,[R1],#1
        BGT     %BT31

32      LDR     R1,[sp,#3*4]            ; R1 -> output buffer
        B       %FT90

04      LDR     R1,[sp,#3*4]
        ADD     R1,R1,#256              ; R1 -> end of output buffer
        MOV     R14,#0
41      STRB    R14,[R1,#-1]!           ; store identifier reversed (to correct for output)
        LDRB    R14,[R0],#1
        CMP     R14,#"\"
        CMPNE   R14,#" "
        BGT     %BT41

90      STR     R1,[sp,#4]              ; R1 on exit -> identifier / name (0-terminated)
        MOV     R14,#0
        STRB    R14,semaphore

        DebugS  xx,"get_name_from_id returns ",R1

        EXITS                           ; no errors

;.............................................................................

; In    R0 -> error block: number followed by "token:string"
; Out   R0 -> errorbuffer, containing translated error
;       VS

MyGenerateError Entry "R1,R2"

        MOV     R1,#0
        MOV     R2,#0
        BL      MyGenerateError_2

        EXIT

;.............................................................................

; In    R0 -> error block (number followed by "token:string")
;       R1 -> parameter %0
;       R2 -> parameter %1
; Out   R0 -> errorbuffer, containing translated error
;       VS

MyGenerateError_2 Entry "R1-R7"

      [ debugxx
        ADD     R14,R0,#4
        DebugS  xx,"GenerateError: ",R14
      ]

        LDRB    R14,semaphore           ; just return the error straight if we're inside get_name_from_id
        Debug   xx,"GenerateError: semaphore =",R14
        TEQ     R14,#0
        BNE     %FT31

        MOV     R4,R1                   ; R4 -> parameter %0
        MOV     R5,R2                   ; R5 -> parameter %1
        MOV     R6,#0
        MOV     R7,#0

      [ international
        LDR     R1,messagefile          ; R1 -> message control block
        MOV     R2,#0                   ;   and copy into local buffer
        SWI     XMessageTrans_ErrorLookup
        BVS     %FT31
      |
        ADR     R2,errorbuffer
        LDR     R14,[R0],#4
        STR     R14,[R2],#4             ; R2 -> output buffer
        MOV     R1,R0                   ; R1 -> token:default
        MOV     R3,#?errorbuffer-4      ; R3 = buffer size

        LDR     R0,messagefile
        TEQ     R0,#0
        BEQ     %FT01
        SWI     XMessageTrans_Lookup
      ]

03      ADRVC   R0,errorbuffer
31
        PullEnv
        ORRS    PC,LR,#V_bit

; MessageTrans not available - we'll have to do this the hard way

01      LDRB    R14,[R1],#1             ; skip token
        TEQ     R14,#":"
        BNE     %BT01

02      LDRB    R14,[R1],#1             ; copy chars from [R1..] to [R2..]
        TEQ     R14,#"%"                ; look out for %0 and %1
        BEQ     %FT04
21      CMP     R14,#32                 ; it's crap, but then you should have loaded MessageTrans!
        MOVLT   R14,#0
        STRB    R14,[R2],#1
        BLT     %BT03

        SUBS    R3,R3,#1
        BGT     %BT02
        B       %FT90

04      LDRB    R14,[R1],#1
        TEQ     R14,#"0"
        MOVEQ   R0,R4
        BEQ     %FT05
        TEQ     R14,#"1"
        MOVEQ   R0,R5
        BEQ     %FT05
        TEQ     R14,#"%"                ; %% => %, %<other> => %<other>
        MOVNE   R14,#"%"
        SUBNE   R1,R1,#1
        B       %BT21

05      TEQ     R0,#0                   ; just leave as %0 or %1 if parameter is 0
        SUBEQ   R1,R1,#1
        MOVEQ   R14,#"%"
        BEQ     %BT21

06      LDRB    R14,[R0],#1             ; copy parameter in
        CMP     R14,#32
        BLT     %BT02
        SUBS    R3,R3,#1
        STRGTB  R14,[R2],#1
        BGT     %BT06

90      BL      xerr_buffoverflow       ; report "Buffer overflow" instead if error won't fit
        B       %BT03                   ; note that this particular error will never overflow!


;..............................................................................
; FullLookupR0
;
; In:   r0 -> token block (must have default text after token!!)
;       r4-r7 -> possible parameters
;
; Out:  r0 -> block to be returned.
;       r3 = length of text looked up
;       preserves all flags except V (done by Lookup)
;

FullLookupR0 ENTRY "r1,r2"

        MOV     r1, r0
        ADR     r2, errorbuffer
        MOV     r3, #?errorbuffer
        BL      Lookup

        EXIT


;..............................................................................
; LookupR0
;
; In:   r0 -> token block (must have default text after token!!)
;
; Out:  r0 -> block to be returned.
;       preserves all flags except V (done by Lookup)
;

LookupR0 ENTRY "R1-R7"

        DebugS  xx, "Lookup token ", r0

        MOV     r1, r0
        ADR     r2, errorbuffer         ; -> return buffer
        MOV     r3, #?errorbuffer       ;  = size of error buffer
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0                  ; no substitution
        BL      Lookup

        EXIT


Lookup  ENTRY   "r8"

        LDR     R0,messagefile
        TEQ     R0,#0
        BEQ     %01                     ; jump into error trap code for lookup

        SWI     XMessageTrans_Lookup
        EXIT    VS
03
        ADR     R0,errorbuffer

        DebugS  xx, "Returning from lookup sequence ", r0

        PullEnv                         ; Preserve all flags except V.
        BICS    PC,LR,#V_bit

01      LDRB    R14,[R1],#1             ; skip token
        TEQ     R14,#":"
        BNE     %BT01

        MOV     r8, r3
02      LDRB    R14,[R1],#1             ; copy chars from [R1..] to [R2..]
        TEQ     R14,#"%"                ; look out for %0 and %1
        BEQ     %FT04
21      CMP     R14,#32                 ; it's crap, but then you should have loaded MessageTrans!
        MOVLT   R14,#0
        STRB    R14,[R2],#1
        SUBLT   r3, r8, r3
        BLT     %BT03

        SUBS    R3,R3,#1
        BGT     %BT02
        B       %FT90

04      LDRB    R14,[R1],#1
        TEQ     R14,#"0"
        MOVEQ   R0,R4
        BEQ     %FT05
        TEQ     R14,#"1"
        MOVEQ   R0,R5
        BEQ     %FT05
        TEQ     R14,#"%"                ; %% => %, %<other> => %<other>
        MOVNE   R14,#"%"
        SUBNE   R1,R1,#1
        B       %BT21

05      TEQ     R0,#0                   ; just leave as %0 or %1 if parameter is 0
        SUBEQ   R1,R1,#1
        MOVEQ   R14,#"%"
        BEQ     %BT21

06      LDRB    R14,[R0],#1             ; copy parameter in
        CMP     R14,#32
        BLT     %BT02
        SUBS    R3,R3,#1
        STRGTB  R14,[R2],#1
        BGT     %BT06

90      BL      xerr_buffoverflow       ; report "Buffer overflow" instead if error won't fit
        PullEnv                         ; Preserve all flags except V.
        ORRS    PC,LR,#V_bit

        END

