; > Sources.FontsM

;;----------------------------------------------------------------------------
;; Macro definitions
;;----------------------------------------------------------------------------

                        ^       0

Pr_None                 #       1       ; 00

Pr_SWI                  #       1       ; 01

Pr_Metrics              #       1       ; 02  Font_CharBBox, Font_StringWidth etc.

Pr_Painting             #       1       ; 03  Font_Paint
Pr_Paint_Init           #       1       ; 04  paintchars .. paintchar loop
Pr_Paint_Rubout         #       1       ; 05  rubout
Pr_Paint_Underline      #       1       ; 06  underline
Pr_Paint_Char           #       1       ; 07  paintchar
Pr_Paint_Metrics        #       1       ; 08  addcharwidth, calcxcoord
Pr_Paint_BBox           #       1       ; 09  getbbox
Pr_Paint_Palette        #       1       ; 0A
Pr_Paint_Mode           #       1       ; 0B
Pr_Paint_Colours        #       1       ; 0C
Pr_Paint_Char4bpp       #       1       ; 0D
Pr_Paint_Char1bpp       #       1       ; 0E
Pr_Paint_Char1bpp_fast  #       1       ; 0F
Pr_Paint_CharClip       #       1       ; 10
Pr_Paint_CharClipped    #       1       ; 11
Pr_Paint_CharMag        #       1       ; 12
Pr_Paint_CharDraw       #       1       ; 13

Pr_Cac_Metrics          #       1       ; 14
Pr_Cac_MetDisc          #       1       ; 15
Pr_Cac_Pixels           #       1       ; 16
Pr_Cac_PixDisc          #       1       ; 17
Pr_Cac_Hint             #       1       ; 18
Pr_Cac_Draw             #       1       ; 19
Pr_Cac_Super            #       1       ; 1A
Pr_Cac_Strip            #       1       ; 1B
Pr_Cac_Switch           #       1       ; 1C

Pr_Res_Find             #       1       ; 1D  finding a block to delete
Pr_Res_Copy             #       1       ; 1E  copying the cache down
Pr_Res_Reloc            #       1       ; 1F  relocating the pointers

Pr_CheckCache           #       1       ; 20

Pr_FindFont             #       1       ; 21
Pr_Find_Matching        #       1       ; 22
Pr_Find_NewOne          #       1       ; 23
Pr_ParseMatrix          #       1       ; 24
Pr_ListFonts            #       1       ; 25
Pr_Mapping              #       1       ; 26
Pr_TransformPt          #       1       ; 27

;..............................................................................

        GBLS    Profile_Last

        MACRO
$l      ProfIn  $which, $cc
        ASSERT  Pr_$which = Pr_$which
$l
      [ debugprofile
Profile_Last    SETS    "$which"
        Push    "R0,LR", $cc
        MOV$cc  R0,#Pr_$which
        BL$cc   profile_in
        Pull    "R0,LR", $cc
      ]
        MEND

;..............................................................................

        MACRO
$l      ProfOut $type, $cc
$l
     [ debugprofile
        Push    "R0,LR", $cc
      [ "$type"=""
        MOV$cc  R0,#Pr_$Profile_Last
      |
        MOV$cc  R0,#Pr_$type
      ]
        BL$cc   profile_out
        Pull    "R0,LR", $cc
     ]
        MEND

;..............................................................................

        MACRO
$l      PEntry  $which, $regs
$l      Entry   "$regs"
        ProfIn  $which
        MEND

        MACRO
$l      PEntryS $which, $regs
$l      EntryS  "$regs"
        ProfIn  $which
        MEND

        MACRO
$l      PExit   $cc
$l      ProfOut ,$cc
        EXIT    $cc
        MEND

        MACRO
$l      PExitS  $cc
$l      ProfOut ,$cc
        EXITS   $cc
        MEND

;..............................................................................

        MACRO
$l      PullS   $regs
$l
        DebugE  err,"Error return:"
    [ "$regs" = ""
      [ No32bitCode
        Pull    "PC",VC,^
        Pull    "LR"
        ORRS    PC,LR,#V_bit
      |
        Pull    "PC"
      ]
    |
        ASSERT  "$regs":RIGHT:2 <> "PC"
        ASSERT  "$regs":RIGHT:2 <> "LR"
        LCLS    temp
temp    SETS    "$regs":LEFT:2
      [ No32bitCode
        Pull    "$regs,PC",VC,^
      [ $temp = R0
        STRVS   R0,[sp]
      ]
        Pull    "$regs,LR"
        ORRS    PC,LR,#V_bit
      |
      [ $temp = R0
        STRVS   R0,[sp]
      ]
        Pull    "$regs,PC"
      ]
    ]
        MEND

;..............................................................................

        MACRO
$l      PPullS  $regs
$l      ProfOut
        PullS   "$regs"
        MEND

        MACRO
        align   $base,$mask
    [ Version >= 272
        LCLA    temp
      [ "$mask"=""
temp    SETA    4-1
      |
temp    SETA    $mask-1
      ]
        #       ((@-$base + &$temp):AND::NOT:&$temp)-(@-$base)
    |
     [ "$mask"=""
        #       (4-((@-$base):AND:3)):AND:3
     |
      [ ((@-$base):AND:($mask-1)) = 0
        !       0,"align macro wasted $mask bytes"
      ]
        #       $mask-((@-$base):AND:($mask-1))
     ]
    ]
        MEND

;..............................................................................

Urk     *       4

        MACRO
        AlignCd $mod
      [ ((.-Module_BaseAddr):AND:15) <> $mod
        MOV     R0,R0
      ]
      [ ((.-Module_BaseAddr):AND:15) <> $mod
        MOV     R0,R0
      ]
      [ ((.-Module_BaseAddr):AND:15) <> $mod
        MOV     R0,R0
      ]
        ASSERT  ((.-Module_BaseAddr):AND:15) = $mod
        MEND

;..............................................................................

        MACRO
$lab    BreakPt $string,$cc
$lab
      [ debugbrk
        B$cc    %FT01
        B       %FT02
01
        Push    "R0,LR"
        MOV     R0,PC
        Debug   brk,"Breakpoint: $string at ",R0
        Pull    "R0,LR"
        MOV     R14,#0
        LDR     R14,[R14,#-4]           ; force breakpoint
02
      ]
        MEND

;..............................................................................

        MACRO
$label  CLI     $com
$label  Push    "R0,LR"
      [ No32bitCode
        Push    "PC"
      |
        mrs    ,LR,CPSR
        Push    "LR"
      ]
        ADR     R0,%FT01
        SWI     XOS_CLI
        B       %FT02
01
        DCB     "$com",cr
02
        Pull    "LR"
      [ No32bitCode
        TEQP    LR,#0
      |
        msr    ,CPSR_f,LR
      ]
        Pull    "R0,LR"
        MEND

;..............................................................................

        MACRO
$label  Align   $reg
$label  ADD     $reg,$reg,#3
        BIC     $reg,$reg,#3
        MEND

;..............................................................................

        MACRO
        Claim   $vector,$entry
        MOV     R0,#$vector
        ADRL    R1,$entry
        MOV     R2,R12
        SWI     XOS_Claim
        MEND

        MACRO
        Release $vector,$entry
        MOV     R0,#$vector
        ADRL    R1,$entry
        MOV     R2,R12
        SWI     XOS_Release
        MEND

;..............................................................................

        MACRO
        swi     $label
        DCD     $label-FontSWItable
        MEND

        MACRO
        MySWI   $swiname
        ASSERT  MySWIBase+(.-FontSWItable)/4 = $swiname
        B       SWI$swiname
        MEND

;..............................................................................

; Relocation stack handlers - both destroy R14

        MACRO
$lab    PushP   $message,$reg
        ASSERT  $reg <> R14
$lab
      [ debugbrk
        BL      checkrelocfull
      ]
        LDR     R14,relocSP
        STR     $reg,[R14],#4
        STR     R14,relocSP
      [ debugstk
        BL      debugstk_spaces
        Debug   stk,"--> $message",$reg
      ]
        MEND

;..............................................................................

        MACRO
$lab    PullP   $message,$reg
        ASSERT  $reg <> R14
$lab    LDR     R14,relocSP
        LDR     $reg,[R14,#-4]!
        STR     R14,relocSP
      [ debugstk
        BL      debugstk_spaces
        Debug   stk,"<-- $message",$reg
      ]
        MEND

;..............................................................................

        MACRO
$lab    PullPx  $message,$reg,$offset
        ASSERT  $reg <> R14
$lab    LDR     R14,relocSP
      [ "$offset"=""
        LDR     $reg,[R14,#-4]
      |
        LDR     $reg,[R14,#-4-4*($offset)]
      ]
     [ debugstk
        Push    "R1"
      [ "$offset"=""
        SUB     R1,R14,#4
      |
        SUB     R1,R14,#4+4*($offset)
      ]
        BL      debugstk_spaces_R1
        Debug   stk,"<== $message",$reg
        Pull    "R1"
     ]
        MEND

;..............................................................................

        MACRO
$lab    Get12bit_signed $Rptr,$Rx,$Ry,$Rtemp,$cc
$lab
        LDR$cc.B $Rx,[$Rptr],#1
        LDR$cc.B $Ry,[$Rptr],#1
        MOV$cc   $Rtemp,$Ry,LSL #28             ; bottom 4 bits of byte 1
        ORR$cc   $Rx,$Rx,$Rtemp,ASR #20         ; all 8 bits of byte 0

        LDR$cc.B $Rtemp,[$Rptr],#1
        MOV$cc   $Rtemp,$Rtemp,LSL #24          ; all 8 bits of byte 2
        ORR$cc   $Rtemp,$Rtemp,$Ry,LSL #16      ; top 4 bits of byte 1
        MOV$cc   $Ry,$Rtemp,ASR #20             ; sign-extended

        MEND

;..............................................................................

        MACRO
$lab    Get12bit_unsigned $Rptr,$Rx,$Ry,$Rtemp,$cc
$lab
        LDR$cc.B $Rtemp,[$Rptr],#1
        LDR$cc.B $Ry,[$Rptr],#1
        MOV$cc   $Rx,$Ry,LSL #28                ; bottom 4 bits of byte 1
        ORR$cc   $Rx,$Rtemp,$Rx,LSR #20         ; not sign-extended

        LDR$cc.B $Rtemp,[$Rptr],#1
        MOV$cc   $Ry,$Ry,LSR #4                 ; top 4 bits of byte 1
        ORR$cc   $Ry,$Ry,$Rtemp,LSL #4          ; not sign-extended

        MEND

;..............................................................................

        MACRO
$lab    LoadCacheFree $Reg,$temp,$compacted
$lab
        LDR     $Reg,cacheindex
        TEQ     $Reg,#0
        LDREQ   $Reg,fontcache
      [ "$compacted"<>""
        LDRNE   $temp,[$Reg, #cache_deletedamount]
      ]
        LDRNE   $Reg,[$Reg,#cache_free]
      [ "$compacted"<>""
        SUBNE   $Reg,$Reg,$temp
      ]
        MEND

;..............................................................................

        MACRO
$lab    CheckCache_enable
$lab
      [ debugcache
        STR     PC,checkcache_enabled
      ]
        MEND

;..............................................................................

        MACRO
$lab    CheckCache_disable
$lab
      [ debugcache
        Push    "R14"
        MOV     R14,#0
        STR     R14,checkcache_enabled
        Pull    "R14"
      ]
        MEND

;..............................................................................

        MACRO
$lab    CheckCache $message, $nocacheok
$lab
     [ debugcache
        Push    "R0,LR"
        ADR     R0,%FT46
      [ "$nocacheok"<>""
        LDR     R14,cacheindex
        TEQ     R14,#0
        BLNE    checkcache
      |
        BL      checkcache
      ]
        Pull    "R0,LR"
        B       %FT47
46
        DCB     "$message",0
        ALIGN
47
     ]
        MEND

;..............................................................................

; Link a block into the cache, storing the anchor pointer if newcache true

        MACRO
        MakeLink $r6,$r8, $cc
        ASSERT  $r6 = R6
        ASSERT  $r8 = R8
        BL$cc   makelink
        MEND

;..............................................................................

; remove a block from the 2-way ageing linked list

        MACRO
$l      RemLink $rb, $r1,$r2, $cc
$l
        ASSERT  std_link = 4 :LAND: std_backlink = 8
        ASSERT  $r1 < $r2
        LDM$cc.IB $rb,{$r1,$r2}
        STR$cc  $r1,[$r2,#std_link]
        STR$cc  $r2,[$r1,#std_backlink]
        MEND

;..............................................................................

; link a block into the 2-way ageing list, using the links in $r1, $r2

        MACRO
$l      StrLink $rb, $r1,$r2, $cc
$l
        ASSERT  std_link = 4 :LAND: std_backlink = 8
        ASSERT  $r1 < $r2
        STM$cc.IB $rb,{$r1,$r2}
        STR$cc  $rb,[$r2,#std_link]
        STR$cc  $rb,[$r1,#std_backlink]
        MEND

;..............................................................................

; Mark a block 'accessed'

        MACRO
$l      MarkAge $rb, $rt1,$rt2, $cc
$l
        RemLink $rb,$rt1,$rt2,$cc               ; remove block from original list
        LDR$cc  $rt1,ageheadblock_p             ; then insert before tail of list
        LDR$cc  $rt2,[$rt1,#std_backlink]
        StrLink $rb,$rt1,$rt2,$cc
        MEND

;..............................................................................

; Mark block accessed, with time offset if $cc is true

        MACRO
$l      MarkAgeOffset $rb,$ro, $rt1,$rt2, $cc
$l
        MarkAge $rb,$rt1,$rt2           ; ignore time offset
        MEND

;..............................................................................

; Mark block accessed (unless in ROM)

        MACRO
$l      MarkAccessed $rb, $rt, $cc
$l
     [ :LNOT: newcache
        ASSERT  $rb = R6
        ASSERT  $rt = R14
        BL$cc   markaccessed
     ]
        MEND

;..............................................................................

; Get address of block just reserved using reservecache2

        MACRO
$l      GetReservedBlockAddr $rd, $rt, $cc
$l
      [ "$rt"<>""
        LDR$cc  $rt,cacheindex
        LDR$cc  $rd,[$rt,#cache_free]
      |
        LDR$cc  $rd,cacheindex
        LDR$cc  $rd,[$rd,#cache_free]
      ]
        MEND

;..............................................................................

; Get end address of block just reserved using reservecache2

        MACRO
$l      GetReservedBlockEnd $rd, $rs, $rt, $cc, $aligned
$l
        LDR$cc  $rt,fontcachesize
        LDR$cc  $rd,fontcache
        ADD$cc  $rt,$rd,$rt
        SUB$cc  $rd,$rt,$rs

        MEND

;..............................................................................

; Set CacheFree to value in $rb, using $rt as a temporary register

        MACRO
$l      SetCacheFree $rb, $rt, $cc
$l      LDR$cc  $rt,cacheindex
        STR$cc  $rb,[$rt,#cache_free]
        MEND

;..............................................................................

; Discard block pointed to by $rb (must be the last one allocated)

        MACRO
$l      DiscardBlock $rb, $rt1, $rt2, $cc
$l      LDR$cc  $rt1,cacheindex
        STR$cc  $rb,[$rt1,#cache_free]
        RemLink $rb, $rt1, $rt2, $cc
        CheckCache "DiscardBlock"
        MEND

;..............................................................................

; Reset size of last block to the given value

        MACRO
$l      SetBlockSize $rb,$rs,$rt,$cc
$l      ORR     $rt,$rs,#size_claimed           ; assume it's a claimed font
        STR     $rt,[$rb,#std_size]
        ADD     $rs,$rb,$rs
        LDR     $rt,cacheindex
        STR     $rs,[$rt,#cache_free]
        MEND

;..............................................................................

; Reset size of last block so block end = $re

        MACRO
$l      SetBlockEnd  $rb, $re, $rt, $gotit, $cc
$l
      [ "$gotit"="No"
        LDR$cc  $rt,cacheindex
      ]
        STR$cc  $re,[$rt,#cache_free]
      [ "$rb"<>""
        SUB$cc  $rt,$re,$rb
        STR$cc  $rt,[$rb,#std_size]
      ]
        MEND

;..............................................................................

; Discard block if V set, else set block end

        MACRO
$l      DiscardOrSetBlockEnd $rb, $re, $rt1, $rt2
$l
        RemLink $rb, $rt1, $rt2, VS
        LDR     $rt1, cacheindex
        STRVS   $rb, [$rt1, #cache_free]
        STRVC   $re, [$rt1, #cache_free]
        SUBVC   $rt1, $re, $rb
        STRVC   $rt1, [$rb, #std_size]
        MEND

;..............................................................................

; Cache hit/miss types

Hit_Font        *       1               ; font header block
Hit_Metrics     *       2               ; metrics block
Hit_Scaffold    *       3               ; outline font scaffold block
Hit_Pixels      *       4               ; 1-bpp or 4-bpp pixel/char block
Hit_Outlines    *       5               ; outline block
Hit_Sprite      *       6               ; sprite switching

; Increment appropriate cache hit/miss entry

        MACRO
$l      CacheHit $type, $cc
$l
      [ debughits
        Push    "r0,r1,lr"
        MOV     r0, #Hit_$type + Hit_Miss
        MOV$cc  r0, #Hit_$type
        ADR     r1, cache_hits
        LDR     r14, [r1, r0, LSL #2]
        ADD     r14, r14, #1
        STR     r14, [r1, r0, LSL #2]
        Pull    "r0,r1,lr"
      ]
        MEND

;..............................................................................

; Display the contents of a fixed-point matrix

        MACRO
$l      DebugM  $dbg,$string,$reg
$l
      [ debug$dbg
        Push    "R1,LR"
        Debuga  $dbg,"$string"
        MOV     R1,$reg
        BL      debug_matrix
        Pull    "R1,LR"
      ]
        MEND

;..............................................................................

; Display the contents of a floating-point matrix

        MACRO
$l      DebugMF $dbg,$string,$reg
$l
      [ debug$dbg
        Push    "R1,R2,LR"
        Debuga  $dbg,"$string"
        MOV     R1,$reg
        MOV     R2,#:LEN:"$string"
        BL      debug_fpmatrix
        Pull    "R1,R2,LR"
      ]
        MEND

;..............................................................................

; Debugging macro used in convert_xy to show scaffolding dependencies

        MACRO
$l      DebugSc $dbg,$xy,$coord,$index,$offx,$offy,$cc
$l
      [ debug$dbg
        B$cc    %FT61
        Debug   $dbg,"output $xy += x-scaffold index, offset",$coord,$index,$offx
        B       %FT62
61
        Debug   $dbg,"output $xy += y-scaffold index, offset",$coord,$index,$offy
62
      ]
        MEND

;..............................................................................

; Debugging macro used in ScanFontDir to print one of two alternative strings

        MACRO
$l      DebugC  $dbg,$cc,$str1,$str2
$l
      [ debug$dbg
        B$cc    %FT1
        Debuga  $dbg,"$str2"
        B       %FT2
1
        Debuga  $dbg,"$str1"
2
      ]
        MEND

;..............................................................................

; Debugging macro used in ScanFontDir to print resulting leafname

        MACRO
$l      DebugLeafname $dbg,$message,$font,$leaf
$l
      [ debug$dbg
      [ No32bitCode
        Push    "R0,PC"
      |
        mrs    ,LR,CPSR
        Push    "R0,LR"
      ]

        Debuga  $dbg,"$message: font",$font

        LDRB    R14,[$font,#hdr_masterflag]
        TEQ     R14,#msf_master
        DebugC  $dbg,EQ," (master)"," (slave)"

        SUB     R14,$leaf,$font
        TEQ     R14,#hdr1_leafname
        DebugC  $dbg,EQ," 1-bpp"," 4-bpp"

        LDRB    R14,[$leaf]
        CMP     R14,#leaf_fromdisc
        BCS     %f2
        Debug   $dbg," data type =",R14
        B       %f3
2
        DebugS  $dbg," filename ",$leaf,12
3
        Pull    "R0,LR"
      [ No32bitCode
        TEQP    LR,#0                   ; preserve error state!!!
      |
        msr    ,CPSR_f,LR               ; preserve error state!!!
      ]
      ]
        MEND

;..............................................................................

; Debugging macro used to check for unexpected zero divide

        MACRO
$l      ChkDv0  $message, $reg
$l
      [ debugbrk
        TEQ     $reg,#0
        BreakPt "$message: divide by 0",EQ
      ]
        MEND

;..............................................................................

; Macro to set a variable to a given range of set bits (inclusive)

        MACRO
$l      EqBits  $b1,$b2
        LCLA    eqb1
        LCLA    eqb2
        ASSERT  $b1 <= $b2
eqb1    SETA    ((1:SHL:$b1)-1)                         ; set bits 0..($b1-1)
eqb2    SETA    ((1:SHL:$b2)-1) :OR: (1:SHL:$b2)        ; set bits 0..$b2
$l      *       eqb2 :AND: (:NOT: eqb1)                 ; set bits $b1..$b2
        MEND

        END

