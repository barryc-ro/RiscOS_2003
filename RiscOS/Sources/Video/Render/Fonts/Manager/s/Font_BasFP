;> fp

;..................................................................................

; float integer in FACC

IFLT
        Debug   fp,"IFLT in : FACC =",FACC

        MOVS    FSIGN,FACC ;set sign
        BEQ     IFLTZ ;exit if number 0
        AND     FSIGN,FSIGN,#&80000000
        RSBMI   FACC,FACC,#0 ;complement number if rqd
        MOV     FACCX,#&A0 ;initial exponent
IFLTA   CMP     FACC,#&10000
        MOVCC   FACC,FACC,LSL #16
        SUBCC   FACCX,FACCX,#16
        CMP     FACC,#&1000000
        MOVCC   FACC,FACC,LSL #8
        SUBCC   FACCX,FACCX,#8
        CMP     FACC,#&10000000
        MOVCC   FACC,FACC,LSL #4
        SUBCC   FACCX,FACCX,#4
        CMP     FACC,#&40000000
        MOVCC   FACC,FACC,LSL #2
        SUBCC   FACCX,FACCX,#2
        CMP     FACC,#&80000000
        MOVCC   FACC,FACC,LSL #1
        SUBCC   FACCX,FACCX,#1
        Debug   fp,"IFLT out: FACC,FACCX,FSIGN =",FACC,FACCX,FSIGN
        MOVS    PC,LR

IFLTZ   MOV     FACCX,#0
        Debug fp,"IFLT out: FACC,FACCX,FSIGN =",FACC,FACCX,FSIGN
        MOV PC,R14

;..................................................................................

; fix fp number to integer in FACC (rounding to nearest)

INTRND
        Debug   fp,"INTRND in : FACC,FACCX,FSIGN =",FACC,FACCX,FSIGN

        SUBS    FACCX,FACCX,#&80        ; subtract bias
        BCC     FCLR                    ; branch if too small
        MOV     FGRD,FACC,LSL FACCX     ; remaining fraction
        RSBS    FACCX,FACCX,#32         ; decide whether possible
        BLS     FOVR                    ; too large
        MOV     FACC,FACC,LSR FACCX     ; shift by exponent
        TEQ     FGRD,#0
        ADDMI   FACC,FACC,#1
        TEQ     FSIGN,#0                ; check sign
        RSBMI   FACC,FACC,#0            ; negate
        Debug   fp,"INTRND out: FACC =",FACC
        MOVS    PC,LR

;..................................................................................

; FWACC*FACC

FMUL
        Debug   fp,"FMUL in : FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN
        Debug   fp,"FMUL in : FWACC,FWACCX,FWSIGN=",FWACC,FWACCX,FWSIGN

        TEQ     FACC,#0
        TEQNE   FWACC,#0
        BEQ     FCLR                    ; *0 implies zero
        EOR     FSIGN,FSIGN,FWSIGN      ; correct sign
        ADD     FACCX,FACCX,FWACCX      ; calculate exponent
        SUB     FACCX,FACCX,#&80        ; restore bias
        MOV     FWGRD,FACC,LSR #16
        MOV     FWACCX,FWACC,LSR #16
        EOR     FWSIGN,FACC,FWGRD,LSL #16
        EORS    FWACC,FWACC,FWACCX,LSL #16
        MUL     FGRD,FWSIGN,FWACC
        MULNE   FWACC,FWGRD,FWACC
        MUL     FWSIGN,FWACCX,FWSIGN
        MUL     FWACCX,FWGRD,FWACCX
        ADDS    FWSIGN,FWACC,FWSIGN
        ADDCS   FWACCX,FWACCX,#&10000
        ADDS    FGRD,FGRD,FWSIGN,LSL #16
        ADCS    FACC,FWACCX,FWSIGN,LSR #16
        BMI     FMULTIDY
        ADDS    FGRD,FGRD,FGRD
        ADC     FACC,FACC,FACC
        SUB     FACCX,FACCX,#1

FMULTIDY
        CMP     FGRD,#&80000000
        BCC     FMULTRNDT
        BICEQ   FACC,FACC,#1            ; if eq clear bottom bit so add sets it
        ADDS    FACC,FACC,#1
        MOVCS   FACC,FACC,RRX
        ADDCS   FACCX,FACCX,#1

FMULTRNDT
        Debug   fp,"FMUL out: FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN
        CMP     FACCX,#256
        MOVCCS  PC,LR
        TEQ     FACCX,#0
        BMI     FCLR
        B       FOVR

;..................................................................................

; fwacc/facc

FXDIV
        Debug   fp,"FDIV in : FWACC,FWACCX,FWSIGN=",FWACC,FWACCX,FWSIGN
        Debug   fp,"FDIV in : FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN

        TEQ     FACC,#0
        BEQ     ZDIVOR
        TEQ     FWACC,#0
        BEQ     FCLR                    ; if w=0 clear facc and return
FDIVA
        EOR     FSIGN,FSIGN,FWSIGN      ; correct sign
        SUB     FACCX,FWACCX,FACCX      ; calculate final exponent
        ADD     FACCX,FACCX,#&81        ; restore bias
FDIVB
        CMP     FACC,#&80000000
        BEQ     FDIVQUIK
        MOVS    FWSIGN,#256             ; clear carry and init loop count
FDIVC
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx
        MOVS    FWACC,FWACC,ASL #1
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx
        MOVS    FWACC,FWACC,ASL #1
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx
        MOVS    FWACC,FWACC,ASL #1
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx
        MOVS    FWACC,FWACC,ASL #1
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx
        MOVS    FWACC,FWACC,ASL #1
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx
        MOVS    FWACC,FWACC,ASL #1
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx
        MOVS    FWACC,FWACC,ASL #1
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx
        MOVS    FWACC,FWACC,ASL #1
        SUB     FWSIGN,FWSIGN,#64
        TEQ     FWSIGN,#0               ; done like this to preserve carry
        BNE     FDIVC
        TEQ     FWACCX,#0
        BMI     FDIVD                   ; already normalised
        CMPCCS  FWACC,FACC
        SUBCS   FWACC,FWACC,FACC
        ADC     FWACCX,FWACCX,FWACCX    ; rotate 0/1 into fwaccx, thus normalising
        MOVS    FWACC,FWACC,ASL #1
        SUB     FACCX,FACCX,#1
FDIVD   CMPCCS  FWACC,FACC
;       BCC     FDIVF
;       TEQ     FWACC,FACC
;       BICEQ   FWACCX,FWACCX,#1
        ADDCSS  FWACCX,FWACCX,#1
        MOVCS   FWACCX,FWACCX,RRX
        ADDCS   FACCX,FACCX,#1
FDIVF   MOV     FACC,FWACCX
        BICS    FWACCX,FACCX,#255
        Debug   fp,"FDIV out: FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN
        MOVEQS  PC,LR
        BMI     FCLR
        B       FOVR

FDIVQUIK
        MOV     FACC,FWACC
        BICS    FWACCX,FACCX,#255
        Debug   fp,"FDIV out: FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN
        MOVEQS  PC,LR
        BMI     FCLR
        B       FOVR

;..................................................................................

; add two accs (called from Expr fp +). Fwgrd, fgrd irrelevant

FADDW   ROUT

      [ debugfp
        Push    "LR"
        Debug   fp,"FADD in : FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN
        Debug   fp,"FADD in : FWACC,FWACCX,FWSIGN=",FWACC,FWACCX,FWSIGN
        BL      FADDW_inner
        Debug   fp,"FADD out: FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN
        Pull    "PC"

FADDW_inner     ROUT
      ]

        TEQ     FACC,#0                 ; no work needed?
        BEQ     FWTOA                   ; no round
        SUBS    FWACCX,FACCX,FWACCX     ; difference in exponents
        BEQ     %10                     ; no difference means no normalisation
        BHI     %06                     ; FACCX > FWRKX
        RSB     FWACCX,FWACCX,#0        ; negate
        ADD     FACCX,FWACCX,FACCX      ; update result exponent
        RSBS    FGRD,FWACCX,#32
        BCC     FSWTOA                  ; return if shift too large for significance: no round
        TEQ     FSIGN,FWSIGN            ; test   signs
        BMI     %04                     ; signs  different
        MOV     FGRD,FACC,LSL FGRD
02      ADDS    FACC,FWACC,FACC,LSR FWACCX
        BCC     %16                     ; no renorm needed

; renormalise by right shift with guard

        MOVS    FACC,FACC,RRX
        MOV     FGRD,FGRD,RRX
        ADD     FACCX,FACCX,#1
        CMP     FACCX,#256
        BCS     FOVR
        CMP     FGRD,#&80000000         ;  round with no overflow pain
        MOVCCS  PC,LR
        BICEQ   FACC,FACC,#1            ; if eq clear bottom bit so add sets it
        ADDS    FACC,FACC,#1
        MOVCCS  PC,LR
        MOV     FACC,FACC,RRX           ; carry set
        ADD     FACCX,FACCX,#1
        CMP     FACCX,#256
        MOVCCS  PC,LR
        B       FOVR
04      MOV     FWGRD,#0
        SUBS    FGRD,FWGRD,FACC,LSL FGRD
        SBCS    FACC,FWACC,FACC,LSR FWACCX
        MOV     FSIGN,FWSIGN
        BPL     %12
        Debug   fp,"FADD out: FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN
        MOVS    PC,LR

06      RSBS    FWGRD,FWACCX,#32
        MOVCCS  PC,LR                   ; return if shift too large for significance: no round
        TEQ     FSIGN,FWSIGN            ; test signs
        BMI     %08
        MOV     FGRD,FWACC,LSL FWGRD
        ADDS    FACC,FACC,FWACC,LSR FWACCX
        BCC     %16                     ; no renorm needed

; renormalise by right shift with guard

        MOVS    FACC,FACC,RRX
        MOV     FGRD,FGRD,RRX
        ADD     FACCX,FACCX,#1
        CMP     FACCX,#256
        BCS     FOVR
16      CMP     FGRD,#&80000000         ; round with no overflow pain
        MOVCCS  PC,LR
        BICEQ   FACC,FACC,#1            ; if eq clear bottom bit so add sets it
        ADDS    FACC,FACC,#1
        MOVCCS  PC,LR
        MOV     FACC,FACC,RRX           ; carry set
        ADD     FACCX,FACCX,#1
        CMP     FACCX,#256
        MOVCCS  PC,LR
        B       FOVR
08      MOV     FGRD,#0
        SUBS    FGRD,FGRD,FWACC,LSL FWGRD
        SBCS    FACC,FACC,FWACC,LSR FWACCX
        BPL     %12
        Debug   fp,"FADD out: FACC, FACCX, FSIGN =",FACC,FACCX,FSIGN
        MOVS    PC,LR

10      MOV     FGRD,#0
        TEQ     FSIGN,FWSIGN
        BPL     %02                     ; signs same
        SUBS    FACC,FACC,FWACC
        MOVCC   FSIGN,FWSIGN
        RSBCCS  FACC,FACC,#0
        MOVMIS  PC,LR                   ; return if normalised

; renormalise by left shift with guard: had to subtract mantissas

12      BEQ     FNRMB                   ; no answer in facc: no round possible
        ADDS    FGRD,FGRD,FGRD
        ADCS    FACC,FACC,FACC
        BMI     %18
        ADDS    FGRD,FGRD,FGRD
        ADCS    FACC,FACC,FACC
        BPL     %14
        SUB     FACCX,FACCX,#1
18      SUBS    FACCX,FACCX,#1
        BPL     %16
        CMP     FGRD,#&80000000         ; incipient underflow: see if can round up
        BCC     FCLR                    ; no, underflow to zero
        BICEQ   FACC,FACC,#1            ; if eq clear bottom bit so add sets it
        ADDS    FACC,FACC,#1
        MOVCS   FACC,FACC,RRX
        ADDCS   FACCX,FACCX,#1
        TEQ     FACCX,#0
        MOVPLS  PC,LR
        B       FCLR                    ; finally underflow
14      SUB     FACCX,FACCX,#2
        ADDS    FGRD,FGRD,FGRD
        ADCS    FACC,FACC,FACC
        BMI     %18
        ADDS    FGRD,FGRD,FGRD
        ADCS    FACC,FACC,FACC
        BPL     %14
        SUBS    FACCX,FACCX,#2
        BPL     %16
        CMP     FGRD,#&80000000         ; incipient underflow: see if can round up
        BCC     FCLR                    ; no, underflow to zero
        BICEQ   FACC,FACC,#1            ; if eq clear bottom bit so add sets it
        ADDS    FACC,FACC,#1
        MOVCS   FACC,FACC,RRX
        ADDCS   FACCX,FACCX,#1
        TEQ     FACCX,#0
        MOVPLS  PC,LR
        B       FCLR                    ; finally underflow
FWTOA   MOV     FACCX,FWACCX
FSWTOA  MOV     FSIGN,FWSIGN
        MOV     FACC,FWACC
        MOVS    PC,LR

FNRMB   MOVS    FACC,FGRD               ; if facc zero then facc:=fgrd
        BEQ     FCLR
        SUBS    FACCX,FACCX,#32         ; exponent dec by word
        BPL     IFLTA

;..................................................................................

; clear  facc

FCLR    MOV     FACCX,#0
        MOV     FACC,#0
        MOV     FSIGN,#0
        MOV     FGRD,#0
        Debug   fp,"FACC = 0"
        MOVS    PC,LR

;..................................................................................

; overflow

FOVR    ADR     R0,ErrorBlock_FontOverflow
        Debug   err,"Error: overflow"
        B       MyGenerateError
      [ international
        MakeInternatErrorBlock FontOverflow,,"NumOFlo"
      |
        MakeErrorBlock  FontOverflow
      ]

;..................................................................................

; overflow

ZDIVOR  ADR     R0,ErrorBlock_FontDivby0
        Debug   err,"Error: division by 0"
        B       MyGenerateError
        MakeErrorBlock  FontDivby0

        END
