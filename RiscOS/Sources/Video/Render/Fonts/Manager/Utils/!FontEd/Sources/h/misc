/*  Title: > h.misc
 */

/* ---- sundry data types ------------------------------------------------- */


#define e(x,y)   { register os_error *e = y; if (e!=NULL) x; }
#define erx(x)   { register os_error *e = x; if (e!=NULL) errorexit(e); }
#define er(y)    { register os_error *e = y; if (e!=NULL) return(e); }
#define erc(h,y) { register os_error *e = y; if (e!=NULL) { closefile(h); return(e); } }

#define returnerr(err) { static os_error erxxx = { 1, err }; return(&erxxx); }

#define true 1
#define false 0

#define big 0x10000000


/* ---- global variables -------------------------------------------------- */


extern wimp_w      handle;
extern int         mousex,mousey;
extern int         bx,by,
                   xsize,ysize,
                   gx0,gy0,gx1,gy1,
                   x0,y0,x1,y1;
extern int         minx,miny,maxx,maxy;


/* ---- functions --------------------------------------------------------- */


void inithandlers(void);
os_error * front(wimp_w handle);
os_error * openxy(wimp_w handle, int x, int y);
os_error * getwindowstate(wimp_w h);
void invalidate(wimp_w h, int x0, int y0, int x1, int y1);

void finish(char *message);
void errorexit(os_error *e);
void cleanexit(int val);
os_error *erm(const char *debugmess, os_error *err);
void mytracef_open(char *filename);
void mytracef_close(void);
void mytracef(char *,...);

void hourglass_on(void);
void hourglass_off(void);

os_error * osfind(int action, char *filename, int *handlep);
os_error * osgbpb(int action, int file_handle, void *data_addr, int buf_len, int ptr);
os_error * closefile(int h);

int dboxquery(const char *message);
