/*  Title: > h.wlink
 */


#define orrin(x,y,mask) ((x & ~mask) | (y & mask))


/* ---- window types ------------------------------------------------------ */


typedef enum {
  W_FONTINDEX,
  W_TREE,
  W_FULL,
  W_SKELETON,
  W_BITMAP
} wtype;

typedef struct Wind_Link          /* one list, pointed to by Wind_Head */
{
struct Wind_Link * next;
       int         wind_handle;   /* associates window with contents */
       wtype       type;          /* see above                       */
       void      * info;          /* depends on type                 */
} Wind_Link;

typedef enum
{
  FONT_SCALING = 'S' + ('C'<<8) + ('A'<<16) + ('L'<<24),
  FONT_READY   = 'F' + ('O'<<8) + ('N'<<16) + ('T'<<24)
} font_id;


typedef enum
{
  FLG_HSUBPIXEL = 0x01,         /* present in flag word of font header (unless outlines) */
  FLG_VSUBPIXEL = 0x02,         /* and in first word of each chunk (if version >= 7) */
  FLG_FLGINCHUNKS = 0x40,       /* (font header only) */
  FLG_DEPENDENCIES = 0x80,
  FLG_PRESENT = ~0x7FFFFFFF     /* compiler objects to 0x80000000 */
} flagbits;


typedef enum
{
  SCF_16BIT = 1 << 0,           /* 1 => all scaffold entries use 16-bit base chars */
  SCF_MONOCHROME = 1 << 1,      /* 1 => these outlines should not be antialiased */
  SCF_NONZERO = 1 << 2,         /* 1 => these outlines should be filled with non-zero winding */
  OFF_16BIT = 1 << 15           /*      else use bit 15 of offset (I know this should be in here really!) */
} scaff_flags;


typedef struct FFile_FontHdr
{
    font_id fontid;             /* "FONT" */
    char bpp;                   /* bits per pixel (0 ==> outlines) */
    char version;               /* version number of file format (current = 1) */
   short designsize;            /* size of 1 em in the design units, or flags */
   short x0, y0, xs, ys;
     union {
        int offsets[9];         /* offsets to chunks - version < 8 */
        struct {
          int chunkoff;         /* offset to chunk offsets */
          int nchunks;          /* number of chunks in this file */
          int nscaffolds;       /* number of scaffold table index entries */
  scaff_flags scaffoldflags;    /* bit 0 set => ALL scaffold base chars are 16-bit (saves bit 15 of offset) */
          int reserved[5];      /* must all be 0 */
        } new;                  /* Version >= 8 */
     } chunk;
  unsigned short table[1];      /* at least one entry, which is the byte offset to the data afterwards */
  /* then the rest of the table data */
  /* textual description of file contents follows that, as 2 zero-terminated strings */
} FFile_FontHdr;


typedef struct {
    short xpoints;      /* for bitmap fonts */
    short xres;
    short ypoints;      /* table[0] = 10, so these 8 bytes follow it */
    short yres;
} fontsizestr;

#define WID_LTANGENT 254
#define WID_RTANGENT 255

typedef union FFile_coord { char b8; short b16; } FFile_coord;


typedef struct Font_Block
{
struct Font_Block    * parent;          /* outline font master        */
       char            filename[256];   /* font file name             */
       char            filename2[256];  /* metrics file name          */
       int             currchar;        /* next char to uncrunch      */
       FFile_FontHdr * filedata;        /* crunched character data    */
       FFile_FontHdr * basefiledata;    /* crunched character data of base font (for different encodings) */
       sprite_area   * spritedata;      /* sprites representing chars */
       int             nnames;          /* size of the charnames array */
       char         ** charnames;       /* pointer to table of character names */
       int             xpoints,         /* size of font (if 1bpp)     */
                       ypoints,
                       xres,
                       yres;
       int             skeleton_threshold;      /* size below which skeleton lines will be drawn */
  struct {
    int skip;          /* 0 => chunk 0 displayed, 32 => chunk 0 not displayed */
    int across;        /* normally 16 */
  } grid;
  struct {
    int selchar;       /* which char 'owns' the most recently selected scaffold line */
    int index;         /* which line it is (0..15) */
  } scaffold;
  struct {
    int x1, y0;        /* extent of tree window */
  } treebox;
  struct {
    BOOL charnames;    /* display character names in font index window */
    BOOL endpoints;    /* display end points for each path */
  } display;
  int                  nchars;          /* size of the chars array */
  struct Char_Block ** chars;           /* chars being edited      */
} Font_Block;


typedef struct Path_Block
{
struct Pt_Block    * firstpoint;    /* if open, path must start at one end */
struct Path_Block  * nextpath;
} Path_Block;

typedef struct Line_Block
{
struct Pt_Block    *p[4];               /* 4 points makes a line */
} Line_Block;


/* Point types (in heap) */

#define PT_CONTROL      1               /* inner control point            */
#define PT_STRAIGHT     2               /* control point in straight line */
#define PT_HINGED       3               /* endpoint at hinged join        */
#define PT_PARALLEL     4               /* endpoint at parallel join      */
#define PT_INVISIBLE    5               /* don't draw point (or line)     */

typedef char pt_type;

typedef struct Pt_Block
{
       pt_type    type ;         /* (see above)              */
       char       scaffoldx,     /* index of x scaffolding   */
                  scaffoldy;     /* index of y scaffolding   */
       int        x, y ;         /* coordinates              */
struct Pt_Block   * nextpt[2] ;  /* link to neighbours       */
struct Path_Block * path;        /* link to parent path      */
} Pt_Block;

/* For control points, nextpt[0] ==> other control point,
                       nextpt[1] ==> nearest end point
*/

/* Char_Block must come last since Line_Block is a member */

typedef enum
{
  CHARB_12BIT      = 0,                 /* bit positions */
  CHARB_1BPP       = 1,
  CHARB_INITSTATE  = 2,
  CHARB_OUTLINE    = 3,
  CHARB_COMPOSITE1 = 4,                 /* outlines only */
  CHARB_COMPOSITE2 = 5,
  CHARB_16BITCODES = 6,
  CHARB_FVALUE     = 4                  /* bitmaps only */
} charb_flags;

typedef enum
{
  CHAR_12BIT      = 1 << CHARB_12BIT,           /* 12-bit bbox/coords, else 8-bit              */
  CHAR_1BPP       = 1 << CHARB_1BPP,            /* 1-bpp char definition, else 4-bpp           */
  CHAR_INITSTATE  = 1 << CHARB_INITSTATE,       /* initial pixel is black / white              */
  CHAR_OUTLINE    = 1 << CHARB_OUTLINE,         /* char is an outline / bitmap                 */
  CHAR_COMPOSITE1 = 1 << CHARB_COMPOSITE1,      /* char contains composite sections only       */
  CHAR_COMPOSITE2 = 1 << CHARB_COMPOSITE2,      /* char contains an accent as well             */
  CHAR_COMPOSITE  = CHAR_COMPOSITE1 | CHAR_COMPOSITE2,
  CHAR_16BITCODES = 1 << CHARB_16BITCODES,      /* references to composite sections are 16-bit */
  CHAR_FVALUE     = 0xF << CHARB_FVALUE,        /* 0 ==> straight data, else packed            */
  CHAR_FILEFLAGS  = 0xFF,                       /* this byte stored in the file                */
  CHAR_GRIDEDGES  = 1 << 8,                     /* display rectangular grid over char bitmap   */
  CHAR_GRIDCENTRES= 1 << 9,                     /* display diamond grid over char bitmap       */
  CHAR_FLATTENED  = 1 << 10,                    /* display outline after flattening            */
  CHAR_GRID       = CHAR_GRIDEDGES |
                    CHAR_GRIDCENTRES |
                    CHAR_FLATTENED
} char_flags;

typedef enum {
  SEL_NONE,
  SEL_SCAFFOLDX,              /* says which type of scaffold line is selected */
  SEL_SCAFFOLDY
} seltype;

#define NULL_SCAFFOLD -32768

typedef struct Comp_Block
{
  struct Comp_Block *next;
  int charno;                                   /* index of character which is included in this one */
  int xorigin, yorigin;                         /* offset given to character */
} Comp_Block;

typedef struct Char_Block
{
       char        sprname[12];                 /* null ==> no sprite yet defined */
struct Font_Block  *parent;                     /* font which this belongs to */
       int         charno;                      /* 0..65536 */
struct Comp_Block  *composites;                 /* list of extra characters making up the composite char */
struct Comp_Block  *selcomp;                    /* pointer to selected composite section */
       char_flags  flags;                       /* flags in file, plus display options */
       int         flatness;                    /* for converting to bitmap */
       int         orgX, orgY;                  /* for converting to bitmap */
       int         xlowc, ylowc, xupperc, yupperc;  /* bbox of outline */
       wimp_box    origbox;                     /* bbox supplied in metrics file */
       wimp_box    windowbox;                   /* bbox of all control points */
       int         xwidth, ywidth;              /* metrics (1/1000 em) */
       int         magnifierup, magnifierdown;  /* magnification factors (if not variable) */
       char        variable;                    /* set => scale to fit window */
struct {
       int         basechar;                    /* immediate parent for this char's scaffolding */
       int         xchar[8], ychar[8];          /* code of base char containing master copy */
       int         xlink[8], ylink[8];          /* for ensuring that scaffold lines match up */
       int         xcoord[8], ycoord[8];        /* lower coordinate of line */
       int         xwidth[8], ywidth[8];        /* line width (254 ==> L-tangent, 255 ==> R-tangent) */
} scaffold;
struct Line_Block  sline;                       /* selected line descriptor              */
struct Path_Block  *nextpath;                   /* can be suspended (see below)          */
struct Char_Block  *template;                   /* displayed in grey behind the outline  */
       char        backsprite[12];              /* name of background sprite             */
       sprite_pgm  backsprbox;                  /* four corners of background sprite box */
} Char_Block;

#define PATH_SUSPENDED (Path_Block *) 1
#define PATH_BITMAP    (Path_Block *) 2
/* if charptr->nextpath = PATH_SUSPENDED, the data has not yet been expanded */
/* if charptr->nextpath = PATH_BITMAP, it is scaled from another char */


typedef struct scaffoldstr {
  int x[8], y[8];                     /* offsets to give to x- and y- coordinates respectively */
} scaffoldstr;


/* ---- global variables -------------------------------------------------- */


extern Wind_Link   Wind_Head,     /* head pointer of list */
                   *backlink,     /* returned by findwindlink */
                   *menuhandle;   /* used when creating menus */

extern int         fontxpos,fontypos;

extern Font_Block  *thisfont;
extern Char_Block  *thischar;
extern Path_Block  *thispath;

extern char_flags  charflags;


/* ---- functions --------------------------------------------------------- */


os_error * addwindlink(wimp_w handle, wtype type, void *info);
void deletewindlink(Wind_Link *backlink,Wind_Link *wlink);
Wind_Link *findwindlink(wimp_w handle);
Wind_Link *findwindlink2(wimp_w handle);
Wind_Link *findwindinfo(wtype type, void *info);
int nonzerowinding(Char_Block *);

os_error * newfont(Font_Block **fontpp);
os_error * newfontwindow(Font_Block *fontp);
os_error * newchar(Font_Block *, int);
os_error * open_char(int, Char_Block *);

