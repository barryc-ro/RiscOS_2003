/*  Title: > c.misc
 */

#include "h.includes"
#include "h.misc"
#include <signal.h>
#include <kernel.h>

#define sigCLEVER 1
#define sigTRACE 1

/* ---- global variables -------------------------------------------------- */


wimp_w      handle;
int         wimpversion;
int         mousex,mousey;
int         bx,by,
            xsize,ysize,
            gx0,gy0,gx1,gy1,
            x0,y0,x1,y1;
int         minx,miny,maxx,maxy;


/* ---- signal handling (nob off C library) ------------------------------------------- */

typedef void SignalHandler(int);
static SignalHandler *oldhandler;

/* Wimp programs must ignore escape events: they will not happen normally,
   but may happen while (eg) printing is happening; in this case, the
   printer driver will handle the problem, and the wimp program simply
   deals with the returned error */

static void escape_handler(int sig)
{
  (void) signal(sig, &escape_handler);
      /* reinstall ourselves, as SIG_DFL has been restored by the system:
         as defined by the (dumb) ANSI spec! */
}

static void handler(int sig) {
  static char *sigtype[] = { "type = 0",
                                    "abort",
                                    "arithmetic exception",
                                    "illegal instruction",
                                    "escape",
                                    "address exception",
                                    "termination request",
                                    "stack overflow",
                                    "type = 8",
                                    "type = 9" };
  os_error error;
  error.errnum = 0;
  sprintf(
      error.errmess,
      "FontEd has suffered a fatal internal error (%s) and must exit immediately",
      sigtype[sig]);
  wimp_reporterror(&error, 0, "FontEd");
#if sigTRACE
  wimp_closedown();
  bbc_vdu(14);
  oldhandler(sig);    /* get a precious stack backtrace! */
#endif
  cleanexit(0);         /* turns off hourglass */
}


void inithandlers(void)
{
#if sigCLEVER
  oldhandler = signal(SIGABRT, &handler);
  oldhandler = signal(SIGFPE, &handler);
  oldhandler = signal(SIGILL, &handler);
  oldhandler = signal(SIGINT, &escape_handler);
  oldhandler = signal(SIGSEGV, &handler);
  oldhandler = signal(SIGTERM, &handler);
  oldhandler = signal(SIGSTAK, &handler);
#endif
}


os_error * front(wimp_w handle)
{
  wimp_wstate oblk;

  e(return(e),wimp_get_wind_state(handle,&oblk));
  oblk.o.behind = -1;
  return(wimp_open_wind(&oblk.o));
}


os_error * openxy(wimp_w handle, int x, int y)
{
  wimp_wstate oblk;

  e(return(e),wimp_get_wind_state(handle,&oblk));
  oblk.o.behind = -1;
  oblk.o.box.x1 = x + oblk.o.box.x1 - oblk.o.box.x0;
  oblk.o.box.x0 = x;
  oblk.o.box.y0 = y + oblk.o.box.y0 - oblk.o.box.y1;
  oblk.o.box.y1 = y;
  return(wimp_open_wind(&oblk.o));
}


os_error * getwindowstate(wimp_w h)
{
  wimp_wstate oblk;

  e(return(e),wimp_get_wind_state(handle=h,&oblk));
  bx = oblk.o.box.x0 - oblk.o.x;
  by = oblk.o.box.y1 - oblk.o.y;
  xsize = oblk.o.box.x1 - oblk.o.box.x0;
  ysize = oblk.o.box.y1 - oblk.o.box.y0;
  return(NULL);
}


void invalidate(int h,int x0,int y0,int x1,int y1)
{
  wimp_redrawstr rblk;

  rblk.w = h;
  rblk.box.x0 = x0;
  rblk.box.y0 = y0;
  rblk.box.x1 = x1;
  rblk.box.y1 = y1;
  erx(wimp_force_redraw(&rblk));
}


void finish(char *message)
{
  os_error err;

  err.errnum = 1;
  sprintf(err.errmess, "System error: %s", message);
  wimp_reporterror(&err,wimp_ECANCEL | wimp_EHICANCEL,"FontEd");
  cleanexit(0);
}


void errorexit(os_error *e)
{
  os_error err;

  err.errnum = e->errnum;
  sprintf(err.errmess,"System error: %s", e->errmess);
  wimp_reporterror(&err,wimp_ECANCEL | wimp_EHICANCEL,"FontEd");
  cleanexit(0);
}


void cleanexit(int val)
{
  hourglass_off();               /* the hourglass is always on except when Wimp_Poll is called */
  exit(val);
}


os_error *erm(const char *debugmess, os_error *err)
{
  static os_error errbuff;

  if (err != NULL) {
    errbuff.errnum = err->errnum;
    sprintf(errbuff.errmess, "%s: %s", debugmess, err->errmess);
    err = &errbuff;
  }
  return(err);
}


static FILE * tracehandle = NULL;

void mytracef_open(char *filename)
{
  tracehandle = fopen(filename, "w");
}


void mytracef_close(void)
{
  if (tracehandle) fclose(tracehandle);
  tracehandle = NULL;
}


void mytracef(char *format, ...)
{
  va_list args;

  if (tracehandle) {
    va_start(args, format);
    vfprintf(tracehandle, format, args);
    va_end(args);
    fflush(tracehandle);
  }
#if 0
  else
  {
    os_cli("HostVDU");
    bbc_vdu(4);
    va_start(args, format);
    vprintf(format, args);
    va_end(args);
    os_cli("TubeVDU");
  }
#endif
}


void hourglass_on(void) { os_swi0(0x406C0); }
void hourglass_off(void) { os_swi0(0x406C1); }
void hourglass_percentage(int p) { os_swi1(0x406C4, p); }


/* Call OS_Find with action:
 *      0x4C    open file for input, must open, not a directory
 *      0x8C    open file for output, must open, not a directory
 *      0xCC    open file for update, must open, not a directory
 */

os_error * osfind(int action, char *filename, int *handlep)
{
  os_regset r;

  r.r[0] = action;
  r.r[1] = (int) filename;
  er(os_swix(OS_Find,&r));
  *handlep = r.r[0];
  return(NULL);
}


/* Call OS_GBPB with action:
 *      1       write data from given pointer
 *      2       write data at current position
 *      3       read data from given pointer
 *      4       read data from current position
 */

os_error * osgbpb(int action, int file_handle, void *data_addr, int buf_len, int ptr)
{
  os_regset r;

  r.r[0] = action;
  r.r[1] = file_handle;
  r.r[2] = (int) data_addr;
  r.r[3] = buf_len;
  r.r[4] = ptr;
  return(os_swix(OS_GBPB,&r));
}


/* Close a file, given the file handle */

os_error * closefile(int h)
{
  os_regset r;

  r.r[0] = 0;
  r.r[1] = h;
  return(os_find(&r));
}


#define wimp_ENOERRORSTRING (1 << 4)
#define wimp_ENOBEEP        (1 << 7)
#define wimp_ENEWERROR      (1 << 8)
#define wimp_EQUESTION      (4 << 9)

int dboxquery(const char *message, const char *buttons)
{
  os_error err;
  _kernel_swi_regs r;

  err.errnum = 1;
  strcpy(err.errmess, message);

  r.r[0] = (int)&err;
  if (wimpversion >= 322) {
    r.r[1] = wimp_ENOERRORSTRING | wimp_ENOBEEP |
             wimp_ENEWERROR | wimp_EQUESTION;
    r.r[3] = (int) "!fonted";
    r.r[4] = (int) wimp_spritearea;
    r.r[5] = (int) buttons;
  }
  else
    r.r[1] = wimp_EOK | wimp_ECANCEL | wimp_ENOERRORSTRING | wimp_ENOBEEP;
  r.r[2] = (int) "Message from Font Editor";
  erx((os_error *)_kernel_swi(Wimp_ReportError,&r,&r));

  return(r.r[1] & 1);
}

void wimp_seteorcolour(int bg, int fg)
{
  wimp_palettestr pal;
  int fgc, bgc;

  wimp_readpalette(&pal);

  colourtran_return_colournumber(pal.c[fg], &fgc);
  colourtran_return_colournumber(pal.c[bg], &bgc);

  os_swi2(OS_SetColour, 3, fgc ^ bgc);
}
