; > Test.SprDebug
;
; Purpose: Debug Sprite calls
; Author:  Neil Raine
;
; CHANGE LIST:
;
; 21-Feb-90     0.01    File created
;
;----------------------------------------------------------------------------

        GBLA    Version
        GBLS    VString
        GBLS    Date

Version SETA    001
VString SETS    "0.01"
Date    SETS    "21-Feb-90"

        LEADR   Module_LoadAddr

Module_BaseAddr

        GET     &.Hdr.ListOpts
        GET     &.Hdr.Macros
        GET     &.Hdr.System
        GET     &.Hdr.ModHand
        GET     &.Hdr.File
        GET     &.Hdr.NewErrors
        GET     &.Hdr.Draw
        GET     &.Hdr.Proc
        GET     &.Hdr.Sprite
        GET     &.Hdr.NDRDebug

        GBLL    hostvdu
hostvdu SETL    {TRUE}

        GBLL    debug
        GBLL    debugxx

debug   SETL    {TRUE}
debugxx SETL    {TRUE} :LAND: debug

; **************************************************************

        ASSERT  (.=Module_BaseAddr)
        DCD     0               ; Start
        DCD     Init    - Module_BaseAddr
        DCD     Die     - Module_BaseAddr
        DCD     0               ; Service
        DCD     Title   - Module_BaseAddr
        DCD     Helpstr - Module_BaseAddr
        DCD     0               ; Helptable
        DCD     0               ; MySWIBase
        DCD     0               ; MySWIDecode   - Module_BaseAddr
        DCD     0               ; MySWINames    - Module_BaseAddr
        DCD     0
        DCD     0

Title   =       "SpriteDebug",0
Helpstr =       "Sprite Debug",9,"$VString ($Date)",0
        ALIGN

; **************************************************************

Init    ENTRY   "r1-r2"

        MOV     r0, #SpriteV
        ADR     r1, myspritecode
        MOV     r2, r12
        SWI     XOS_Claim

        EXIT

; ..............................................................

Die     ENTRY   "r1-r2"

        MOV     r0, #SpriteV
        ADR     r1, myspritecode
        MOV     r2, r12
        SWI     XOS_Release

        EXIT

; **************************************************************

; In    r0 = sprite reason code + 0 or &100 or &200
;       r1 -> sprite area (if r0 >= &100)
;       r2 -> sprite name / header
;       r3..r7 parameters

myspritecode ENTRY

        Debug   xx,"OS_SpriteOp:",r0,r1,r2,r3,r4,r5

        AND     r14, r0, #&FF
        TEQ     r14, #SpriteReason_PutSpriteTransformed
        BEQ     dbg_putspritetransformed

        EXIT            ; pass it on

; ..............................................................
                                                                
flg_dstispgm    *       1 :SHL: 0
flg_srcbox      *       1 :SHL: 1

        MACRO
$lab    DebugA  $dbg,$string,$regptr,$regs
      [ debug$dbg
$lab    Push    "$regs"
        LDMIA   $regptr,{$regs}
        Debug   $dbg,$string,$regs
        Pull    "$regs"
      ]
        MEND

dbg_putspritetransformed ROUT

        TST     r3, #flg_srcbox
        BEQ     %FT01
        DebugA  xx,"Source rect:",r4,"r1,r2,r3,r4"
01
        TST     r3, #flg_dstispgm
        BNE     %FT02
        DebugA  xx,"Destination matrix:",r6,"r1,r2,r3,r4,r5,r6"
        B       %FT03
02
        DebugA  xx,"Destination parallelogram x0 y0 x1 y1:",r6,"r1,r2,r3,r4"
        ADD     r14, r6, #4*4
        DebugA  xx,"Destination parallelogram x2 y2 x3 y3:",r14,"r1,r2,r3,r4"
03
        EXIT

; **************************************************************

      [ debug
        InsertNDRDebugRoutines
      ]

        END
