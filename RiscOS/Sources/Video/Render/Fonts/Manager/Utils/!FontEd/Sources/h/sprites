/*  Title: > h.sprites
 */


#define SUPERX (32*4-1) * 2
#define SUPERY (16*4-1) * 4

extern BOOL checklinear;       /* flag to getscaffold() */

extern int         xwindlimit,           /* current screen size */
                   ywindlimit,
                   dx, dy,               /* screen pixel sizes */
                   spritemode,           /* mode to create 4-bpp sprites in */
                   xfac, yfac,           /* factors for spritemode */
                   superx, supery;       /* pixel size of 1bpp sprite */

extern sprite_pixtrans pixtrans[];       /* set up by readmodeinfo */

extern sprite_area   * sprstatic;        /* points to spritearea.hdr */
extern sprite_header * sprbpp1;          /* points to 'bpp1' sprite */


os_error * readmodeinfo(void);

os_error * scalefont(Font_Block *infont,
                     int xpoints,int ypoints,int xres,int yres);

void getscaledchardata(Char_Block *);
os_error * getscaffold(Char_Block *, scaffoldstr *, int, int);
os_error * makesprite1bpp(Char_Block *,int);
os_error * makesprite(Char_Block *,int);

os_error * pack1bpp(Char_Block *);
os_error * unpack1bpp(Char_Block *);

os_error * my_sprite_create(Char_Block *, sprite_palflag,int,int,int);
os_error * my_sprite_delete(Font_Block *font, char *sprname);
os_error * ensuresprites(Font_Block *font);
sprite_header *getspriteaddr(sprite_area *,char *);

os_error * loadbacksprite(Char_Block *charptr, char * filename);
os_error * read_sprite_size(Font_Block *font, char *sprname, int *xp, int *yp);
os_error * sprite_alloc(Font_Block *font,int size);
void putspritename(char *buffer, const char *format, Char_Block *charptr);

