/*  Title: > h.suspend
 */

extern Path_Block *frompath, *topath;      /* input to cvpath */
extern Pt_Block *lastpoint;                /* output from cvpath */

typedef enum {
  SCAN_OUTLINES = 1 << 0,                       /* scan closed subpaths only */
  SCAN_SKELETON = 1 << 1,                       /* scan open subpaths only */
  SCAN_ALL = SCAN_OUTLINES | SCAN_SKELETON
} scan_type;

Line_Block * scanchar(Char_Block *,int (*subr)(Line_Block *));
Line_Block * scancharpaths(Char_Block *charptr, int (*subr)(Line_Block *), scan_type scantype);

Pt_Block * scnchrpt(Char_Block *,int (*subr)(Pt_Block *),int flag);
#define scancharpt(ch,sb) scnchrpt(ch,sb,true)
#define scancharendpt(ch,sb) scnchrpt(ch,sb,false)
#define convertpath(p1,p2) frompath=p1;topath=p2;scancharpt(thischar,cvpath);
#define validate(c,m) \
        if (scancharpt(c,validatept)) { debugchar(c,m); restorescreen(); }
int validatept(Pt_Block *);

void mergepaths(Pt_Block *,Pt_Block *);
void deletepathentry(Path_Block *);
int cvpath(Pt_Block *);

os_error * deleteallchars(Font_Block *);
os_error * deletechardata(Font_Block *,unsigned int,unsigned int);
os_error * deletesubpath(Path_Block **head);
os_error * suspendpathdata(Char_Block *);
BOOL displayed(Char_Block *);
os_error * movechardata(Char_Block *,Font_Block *,int);
os_error * copychardata(Char_Block *,Font_Block *,int);
os_error * copysubpath(Path_Block *subpath, Path_Block **newpp,
                       int designsize_new, int designsize_old, int xoffset, int yoffset);

