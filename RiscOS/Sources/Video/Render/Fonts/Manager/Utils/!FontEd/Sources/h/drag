/*  Title: > h.drag
 */

#define bbc_inkey(n) my_inkey(n)      /* bodge cos of RISC OS bug */
int my_inkey(int n);


typedef enum {
  DR_NONE,              /* not dragging */
  DR_FONT,              /* drag select to copy a character */
  DR_FONTMOVE,          /* SHIFT-drag select to move a character */
  DR_COMPOSITE,         /* SHIFT-drag adjust to construct composite character */
  DR_DECOMPOSITE,       /* CTRL-drag adjust to deconstruct composite character */
  DR_BASECHAR,          /* dragging a scaffold set */
  DR_POINT,             /* dragging a control point */
  DR_FILE,              /* dragging a font file */
  DR_FILE2,             /* dragging a metrics file */
  DR_SCAFFOLDX,         /* dragging a scaffold line (vertical) */
  DR_SCAFFOLDY,         /* dragging a scaffold line (horizontal) */
  DR_RECTSCAFFOLD,      /* dragging a rectangle to select some points */
  DR_SPRITEBOX          /* dragging the background sprite box */
} dragtype;


typedef enum {
  SPB_x0y0 = 1,
  SPB_x1y0,             /* the corner bits */
  SPB_x1y1,
  SPB_x0y1,
  SPB_x0,
  SPB_y0,               /* the edge bits */
  SPB_x1,
  SPB_y1,
  SPB_MAIN,             /* dragging whole thing */
  SPB_MIN = SPB_x0y0,   /* extreme values (for enumeration) */
  SPB_MAX = SPB_y1,
  SPB_NONE = 0,
  SPB_ADJUST = 0x80     /* extra bit for dragging with ADJUST */
} spb_type;


typedef struct
{
  dragtype type;
  int          xoff;          /* offset from x,y to actual line */
  int          yoff;
  Wind_Link *wlink;    /* dragging from this window */

  struct {
    int          minx,miny,maxx,maxy;
  } limit;

  union {

    struct {                         /* DR_FONT */
      Char_Block *fromchar;
    } font;

    struct {                         /* DR_POINT */
      Pt_Block   * pt;
    } point;

    struct {                         /* DR_SCAFFOLD */
      int          index, x, y;      /* (last known pointer position) */
    } scaffold;

    struct {                         /* DR_RECTSCAFFOLD */
      int          x0, y0, x1, y1;
    } rectangle;

    struct {
      spb_type     subtype;          /* DR_SPRITEBOX subtype, ie. which corner */
      int          oldhandlex;       /* last position */
      int          oldhandley;
    } spritebox;

  } d;          /* data specific to each type */

} dragboxstr;


/* ---- global variables -------------------------------------------------- */


extern dragboxstr  dragbox;
extern dragboxstr  dragcopy;

extern wimp_box    handlebox;       /* set up in scanhandles() */
extern int         handlex;
extern int         handley;

extern int         showpointer;
extern int         showcoords;
extern int         showwidth;
extern int         showbbox;
extern int         showobox;
extern int         showfbox;
extern int         showsprites;
extern int         showhandles;
extern int         showendpoints;
extern int         showcharnames;


/* ---- functions --------------------------------------------------------- */


#define nullindex(p) ((p->nextpt[0])?((p->nextpt[1])?-1:1):0)
#define findlink(p,p2) ((p->nextpt[0]!=p2)?((p->nextpt[1]!=p2)?-1:1):0)


os_error * event_mouse(wimp_mousestr);
os_error * editbitmap(Wind_Link * wlink, wimp_mousestr * mouse);

os_error * event_dragbox(void);
os_error * draggingpoint(void);
os_error * dragfixedbox(int cx0,int cy0,int cx1,int cy1);

os_error * findchar(Char_Block **charpp, Wind_Link *wlink, int mousex, int mousey);

int scaffoldpoint(Pt_Block *pt);
void scafflink(Pt_Block *pt, int i);

