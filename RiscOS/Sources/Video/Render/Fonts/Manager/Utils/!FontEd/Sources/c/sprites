/*  Title: > c.sprites
 */

#include "h.includes"
#include "h.wlink"
#include "h.misc"

#include "h.sprites"
#include "h.drag"
#include "h.editchar"
#include "h.loadsave"
#include "h.menu"
#include "h.redraw"
#include "h.scaffold"
#include "h.suspend"

#define TR_pack 0
#define TR_unpack 0


os_error *getscaffx(Char_Block *charptr, scaffoldstr *scaffold, char *flags, int i, int xoffset);
os_error *getscaffy(Char_Block *charptr, scaffoldstr *scaffold, char *flags, int i, int yoffset);


/* ---- global variables --------------------------------------------------- */

BOOL checklinear = 0;   /* flag to getscaffold() - only set when called from loadchar() */

int         xwindlimit,
            ywindlimit,
            dx, dy,
            spritemode, xfac, yfac,
            superx, supery;

sprite_pixtrans pixtrans[16] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 };

sprite_area   * sprstatic;        /* points to spritearea.hdr */
sprite_header * sprbpp1;          /* points to 'bpp1' sprite */

static sprite_id spriteid = { NULL, sprite_id_name };


/* ---- Read mode info ----------------------------------------------------- */


static union
{
  sprite_area hdr;
  char c[4096];                 /* sizeof(spritearea) = 4096 */
} spritearea;


os_error * readmodeinfo(void)
{
  static int vdublk[] = { bbc_XWindLimit, bbc_XEigFactor,
                          bbc_YWindLimit, bbc_YEigFactor,
                          bbc_Log2BPP,                    -1 };

  struct { int xlimit, xfac, ylimit, yfac, log2bpp; } results;

  bbc_vduvars(vdublk,(int *)&results);

  xwindlimit = (results.xlimit+1) << results.xfac;
  ywindlimit = (results.ylimit+1) << results.yfac;
  dx = 1 << results.xfac;
  dy = 1 << results.yfac;

  {
    static sprite_area initstatic =
    {
      sizeof(spritearea),     /* size of area           */
      0,                      /* no of sprites          */
      sizeof(sprite_area),    /* offset to first sprite */
      sizeof(sprite_area)     /* offset to free area    */
    };

    int mode;

    spritearea.hdr = initstatic;
    sprstatic = &spritearea.hdr;

    if (dx > 2 || dy > 2) { mode =  0; spritemode = 12; }
                     else { mode = 18; spritemode = 20; }

    xfac = bbc_modevar(mode,bbc_XEigFactor);   /* size of 1 bpp pixels */
    yfac = bbc_modevar(mode,bbc_YEigFactor);

    erx(sprite_create(sprstatic,
                         "bpp1",
               sprite_nopalette,
      superx = (SUPERX >> xfac),
      supery = (SUPERY>>yfac)|3,
                           mode ));

    spriteid.s.name = "bpp1";
    erx(sprite_select_rp(sprstatic, &spriteid, (sprite_ptr *)&sprbpp1));

    sprbpp1 = getspriteaddr(sprstatic,"bpp1");
  }

  /* compute pixtrans */

  {
    wimp_palettestr palette;
    int bgcol,fgcol,c;

    if (results.log2bpp == 3)
    {
      for (c=0;c<16;c++)
      {
        pixtrans[15-c] = 0x1A * (c & 0x08)
                       + 0x0B * (c & 0x04)
                              + (c & 0x03); /* 8-bpp modes */
      }
    }
    else
    {
      erx(wimp_readpalette(&palette));
      bgcol = palette.c[0].word & 0xFF;
      fgcol = palette.c[7].word & 0xFF;
      for (c=0;c<16;c++) { pixtrans[c] = bgcol + (fgcol-bgcol)*c/15; }
    }
  }

  return(NULL);
}


/* ---- Scaling a font to 1 bpp -------------------------------------------- */


os_error * scalefont(Font_Block *infont,
                     int xpoints,int ypoints,int xres,int yres)
{
  int c;
  char buffer1[128], buffer2[128];
  FFile_FontHdr *f;
  fontsizestr *fsiz;

/*
  bbc_vdu(4);
  printf("Scalefont: %dx%d points at %dx%d dpi",xpoints,ypoints,xres,yres);
  bbc_vdu(5);
*/

  er(newfont(&thisfont));

  thisfont->filedata->fontid = FONT_SCALING;     /* filedata not done yet */
  thisfont->filedata->bpp = 1;                               /* 1-bpp font */
  thisfont->filedata->designsize = 0;                       /* flags=0 (no subpixel placement) */
  thisfont->currchar = 0;                                       /* start scanning font */
  thisfont->parent = infont;                                    /* so we can get hold of the outlines */
  thisfont->xpoints = xpoints;
  thisfont->ypoints = ypoints;
  thisfont->xres = xres;
  thisfont->yres = yres;

  er(newfontwindow(thisfont));

  f = infont->filedata;
  strcpy(buffer1, ((char *)f->table) + f->table[0]);    /* copy parent font's name */
  sprintf(buffer2,"%dx%d points at %dx%d dpi",xpoints,ypoints,xres,yres);
  er(changetitle(thisfont, 10, buffer1, buffer2));

  f = thisfont->filedata;
  fsiz = (fontsizestr *)&f->table[1];
  fsiz->xpoints = xpoints * 16;
  fsiz->xres    = xres;
  fsiz->ypoints = ypoints * 16;
  fsiz->yres    = yres;

  /* construct a reasonable filename for this font (search Font$Path to find directory) */
  {
    char buffer[256];
    er(findfontdir(thisfont, buffer, sizeof(buffer)));
    sprintf(thisfont->filename,"%sb%dx%d", buffer, xpoints*16*xres/72, ypoints*16*yres/72);
  }

  for (c=0;c<thisfont->nchars;c++) {
    if (infont->chars[c]!=NULL) {
      er(newchar(thisfont,c));
      thisfont->chars[c]->flags    = CHAR_1BPP;
      thisfont->chars[c]->nextpath = PATH_BITMAP;
      thisfont->chars[c]->template = infont->chars[c];
    }
  }

  return(NULL);
}


/* ---- Sprite routines ---------------------------------------------------- */


#define dividedown(x,y) ((x)<0?((x)-(y)+1)/(y):(x)/(y))

#define Super_Sample4    0x40D81

/*
 * Out: x0,y0,x1,y1 = char bounding box (design units)
 *      xsize,ysize = bitmap size (pixels)
 *      xscale,yscale = scale factors (design units -> pixels << 16)
 *      [result] = design size * 72
 */

void getscaledchardata(Char_Block * charptr)
{
  Font_Block * font = charptr->parent;
  Char_Block * outlinech = charptr->template;
  int ds, orgX, orgY;

  if (outlinech == NULL) {
    ds = 256 * 72;
  } else {
    getcharheader(outlinech);                                      /* we need bbox */
    ds = outlinech->parent->filedata->designsize * 72;
  }
/*
  mytracef("Design size * 72 = %d\n",ds);
*/

  xscale = font->xpoints * font->xres;
  yscale = font->ypoints * font->yres;

  /* global parameters for buildpath */

  orgX = (ds * charptr->orgX) >> 8;
  orgY = (ds * charptr->orgY) >> 8;

  if (outlinech != NULL)
  {
    charptr->xlowc   = dividedown(outlinech->xlowc  *xscale+orgX+ds/2-1, ds)-1;
    charptr->ylowc   = dividedown(outlinech->ylowc  *yscale+orgY+ds/2-1, ds)-1;
    charptr->xupperc = dividedown(outlinech->xupperc*xscale+orgX+ds/2-1, ds)+1;
    charptr->yupperc = dividedown(outlinech->yupperc*yscale+orgY+ds/2-1, ds)+1;
    charptr->xwidth = outlinech->xwidth * font->xpoints;
    charptr->ywidth = outlinech->ywidth * font->ypoints;
/*
    mytracef("getscaledchardata: x0,y0,x1,y1 = %d,%d,%d,%d\n",
        charptr->xlowc, charptr->ylowc, charptr->xupperc, charptr->yupperc);
*/
  }

  x0 = (charptr->xlowc   * ds - orgX) / xscale;
  y0 = (charptr->ylowc   * ds - orgY) / yscale;
  x1 = (charptr->xupperc * ds - orgX) / xscale;
  y1 = (charptr->yupperc * ds - orgY) / yscale;

/*
  mytracef("x0=%d,y0=%d,x1=%d,y1=%d\n",x0,y0,x1,y1);
*/

  xsize = charptr->xupperc - charptr->xlowc;
  ysize = charptr->yupperc - charptr->ylowc;
  if (xsize <= 0) xsize = 1;
  if (ysize <= 0) ysize = 1;

  xscale = (xscale << 16) / ds;
  yscale = (yscale << 16) / ds;
/*
  mytracef("1bpp sprite '%s' is %dx%d pixels\n",
                              charptr->sprname,xsize,ysize);
  mytracef("1bpp: xscale=%d,yscale=%d\n",xscale,yscale);
*/
}


#define SCAFF_NOTDONE 0
#define SCAFF_PENDING  1
#define SCAFF_DONE        2

os_error *getscaffold(Char_Block *charptr, scaffoldstr *scaffold, int xoffset, int yoffset)
{
  register int i;

  if (charptr == NULL) {
    for (i=0;i<8;i++) scaffold->x[i] = 0;
    for (i=0;i<8;i++) scaffold->y[i] = 0;
  } else {
    char flags[8];
    for(i=0;i<8;i++) flags[i] = SCAFF_NOTDONE;
    for(i=0;i<8;i++) if (flags[i]==SCAFF_NOTDONE)
      er(getscaffx(charptr, scaffold, flags, i, xoffset));
    for(i=0;i<8;i++) flags[i] = SCAFF_NOTDONE;
    for(i=0;i<8;i++) if (flags[i]==SCAFF_NOTDONE)
      er(getscaffy(charptr, scaffold, flags, i, yoffset));
  }
/*
  for (i=0;i<8;i++) {
    if (charptr->scaffold.xcoord[i] != NULL_SCAFFOLD) {
      x = (scalex8(charptr->scaffold.xcoord[i]) + scaffold->x[i] ) % 512;
      y = (scalex8(charptr->scaffold.xcoord[i] + charptr->scaffold.xwidth[i]) + scaffold->x[i]) % 512;
      x -= 256;
      y -= 256;
      mytracef("scaffold->x[%d] = %4d : x0 = %4d, x1 = %4d\n", i, scaffold->x[i], x, y);
    }
  }
  for (i=0;i<8;i++) {
    if (charptr->scaffold.ycoord[i] != NULL_SCAFFOLD) {
      x = (scaley8(charptr->scaffold.ycoord[i]) + scaffold->y[i]) % 512;
      y = (scaley8(charptr->scaffold.ycoord[i] + charptr->scaffold.ywidth[i]) + scaffold->y[i]) % 512;
      x -= 256;
      y -= 256;
      mytracef("scaffold->y[%d] = %4d : y0 = %4d, y1 = %4d\n", i, scaffold->y[i], x, y);
    }
  }
*/
  return(NULL);
}


os_error *getscaffx(Char_Block *charptr, scaffoldstr *scaffold, char *flags, int i, int xoffset)
{
  register int x = charptr->scaffold.xcoord[i] + xoffset;
  register int h = charptr->scaffold.xwidth[i];
  register int j;

  flags[i] = SCAFF_PENDING;          /* allows check for infinite loop */
  scaffold->x[i] = 0;
  if (x != NULL_SCAFFOLD) {
    if ((j = charptr->scaffold.xlink[i] & 7) != 0) {
      if (flags[j] == SCAFF_PENDING) returnerr("Cyclic scaffold link!");
      if (flags[j] == SCAFF_NOTDONE) er(getscaffx(charptr, scaffold, flags, j, xoffset));
      if (charptr->scaffold.xlink[i] & 8) {       /* was that a linear link? */
        register int k = charptr->scaffold.xlink[j] & 7;
        register int x1 = charptr->scaffold.xcoord[j] + xoffset;
        register int x2 = charptr->scaffold.xcoord[k] + xoffset;
        register int xx=x, h2;
        if (x1==NULL_SCAFFOLD ||
            x2==NULL_SCAFFOLD) returnerr("Incomplete linear link");
        if ((h2=charptr->scaffold.xwidth[j]) < WID_LTANGENT) x1 += h2 >>1;
        if ((h2=charptr->scaffold.xwidth[k]) < WID_LTANGENT) x2 += h2 >>1;
        if (h < WID_LTANGENT) xx += h >> 1;
        h2 = scaffold->x[k];
        if (checklinear) {
          if ((xx >= x1 && xx >= x2) || (xx <= x1 && xx <= x2)) {
            static os_error err;
            err.errnum = 1;
            sprintf(err.errmess, "Invalid linear link in '%s'", charname(charptr->charno));
            return(&err);
          }
        }
        j = h2 + (scaffold->x[j]-h2)*(xx-x2)/(x1-x2);      /* calculate initial offset */
      } else {
        j = scaffold->x[j];     /* j = initial offset due to first line */
      }
    }

    x = j + (((x-x0)*xscale) >> 8);      /* x0 = offset applied when buildpath called */

    switch(h) {
      case WID_LTANGENT:
        scaffold->x[i] = j + ((x+(4<<6)) & ~0x1FF) + (1<<6) - x;
        break;

      case WID_RTANGENT:
        scaffold->x[i] = j + ((x-(4<<6)) & ~0x1FF) + (7<<6) - x;
        break;

      default:
        x = x>>1;                                   /* compute non-adjusted coord (1/256th pixel) */
        h = (h*xscale)>>9;
        if (h>64) {
          h = -h & 0xFF;        /* extra width to maximise no of pixel centres */
          if (h>=192) h -= 256;
        } else h = -h & 0xFF;   /* don't round down if too thin */
        scaffold->x[i] = j + ((((x-(h>>1)+(1<<7)) & ~0xFF) + (h>>1) - x) << 1);  /* <<1 for OS units */
    }
  }
  flags[i] = SCAFF_DONE;
  return(NULL);
}


os_error *getscaffy(Char_Block *charptr, scaffoldstr *scaffold, char *flags, int i, int yoffset)
{
  register int y = charptr->scaffold.ycoord[i] + yoffset;
  register int h = charptr->scaffold.ywidth[i];
  register int j;

  flags[i] = SCAFF_PENDING;          /* allows check for infinite loop */
  scaffold->y[i] = 0;
  if (y != NULL_SCAFFOLD) {
    if ((j = charptr->scaffold.ylink[i] & 7) != 0) {
      if (flags[j] == SCAFF_PENDING) returnerr("Cyclic scaffold link!");
      if (flags[j] == SCAFF_NOTDONE) er(getscaffy(charptr, scaffold, flags, j, yoffset));
      if (charptr->scaffold.ylink[i] & 8) {       /* was that a linear link? */
        register int k = charptr->scaffold.ylink[j] & 7;
        register int y1 = charptr->scaffold.ycoord[j] + yoffset;
        register int y2 = charptr->scaffold.ycoord[k] + yoffset;
        register int yy=y, h2;
        if (y1==NULL_SCAFFOLD ||
            y2==NULL_SCAFFOLD) returnerr("Incomplete linear link");
        if ((h2=charptr->scaffold.ywidth[j]) < WID_LTANGENT) y1 += h2 >> 1;
        if ((h2=charptr->scaffold.ywidth[k]) < WID_LTANGENT) y2 += h2 >> 1;
        if (h < WID_LTANGENT) yy += h >> 1;
        h2 = scaffold->y[k];
        if (checklinear) {
          if ((yy >= y1 && yy >= y2) || (yy <= y1 && yy <= y2)) {
            static os_error err;
            err.errnum = 1;
            sprintf(err.errmess, "Invalid linear link in '%s'", charname(charptr->charno));
            return(&err);
          }
        }
        j = h2 + (scaffold->y[j]-h2)*(yy-y2)/(y1-y2);    /* calculate initial offset */
      } else {
        j = scaffold->y[j];     /* j = initial offset due to first line */
      }
    }

    y = j + (((y-y1)*yscale) >> 8);    /* y1 = offset applied when buildpath called */

    switch(h) {
      case WID_LTANGENT:
        scaffold->y[i] = j + ((y+(4<<6)) & ~0x1FF) + (1<<6) - y;
        break;

      case WID_RTANGENT:
        scaffold->y[i] = j + ((y-(4<<6)) & ~0x1FF) + (7<<6) - y;
        break;

      default:
        y = y>>1;                                     /* compute non-adjusted coord (1/256th pixel) */
        h = (h*yscale) >> 9;
        if (h>64) {
          h = -h & 0xFF;          /* extra height to maximise no of pixel centres */
          if (h>=192) h -= 256;
        } else h = -h & 0xFF;
        scaffold->y[i] = j + ((((y-(h>>1)+(1<<7)) & ~0xFF) + (h>>1) - y) << 1);  /* <<1 for OS units */
    }
  }
  flags[i] = SCAFF_DONE;
  return(NULL);
}


os_error * makesprite1bpp(Char_Block * charptr, int plotrule)
 {
  er(unsuspendpathdata(charptr->template));  /* do this now to avoid flex movement later */

  getscaledchardata(charptr);

  if (heaptrace) mytracef("create sprite\n");

  er(my_sprite_create(charptr,sprite_nopalette,
                               xsize,ysize,18)   /* use mode 18 always */
   );

  xsize = xsize << 1;   /* correct for mode 18 */
  ysize = ysize << 1;
  xscale = xscale << 1;
  yscale = yscale << 1;

  bx = -(dx>>1);              /* bx,by = top-left coordinate of box */
  by = ysize-(dy>>1);       /* correct for half-pixel adjustment of scalex() and scaley() */

  {
    if (heaptrace)
    mytracef("Switching output to '%s' in area %p ...", charptr->sprname,charptr->parent->spritedata);

    {
      int fillpath[MAXPATH], strokepath[MAXPATH];
      os_error * err;
      sprite_state oldstate;

      spriteid.s.name = charptr->sprname;
      er(sprite_outputtosprite(charptr->parent->spritedata, &spriteid, NULL, &oldstate));

      if (heaptrace) mytracef("switched\n");
      bbc_clg();
      initsize(fillpath); initsize(strokepath);
      err = buildpath(charptr->template, fillpath, strokepath, TRUE);
      if (!err) {
        if (plotrule) {
          drawfill_winding(fillpath, NULL, charptr->flatness);
        }
        else {
          drawfill(fillpath, NULL, charptr->flatness);
        }
        drawstroke(strokepath, NULL, charptr->flatness);
      }
      erx(sprite_restorestate(oldstate));        /* restore state before returning error! */
      if (err) return(err);
    }

  }

  if (heaptrace) mytracef("suspendpathdata\n");

  er(suspendpathdata(charptr->template));

  return(pack1bpp(charptr));    /* make sure it goes into the file data */
}


/*
  To generate a 4bpp sprite from an outline char:

      a) draw character 4x final size into 'bpp1'
      b) use SWI Super_Sample4 to produce image in final sprite
      c) use SpriteReason_PutSpriteScaled with pixtrans to display sprite
*/

os_error * makesprite(Char_Block * charptr, int plotrule)
{
  Font_Block *font = charptr->parent;

  if (heaptrace) mytracef("unsuspendpathdata\n");

  er(unsuspendpathdata(charptr));       /* not usually necessary */

  xsize = SUPERX;              /* used by the drawing code later */
  ysize = SUPERY;

  x0 = -120;                    /* bodge to move char to approx. right place */
  y0 = -20;
  x1 = 300;
  y1 = y0 + font->filedata->designsize;

  xscale = yscale = ((SUPERY-32)<<16)/(y1-y0);

  if (heaptrace) mytracef("4bpp: xscale=%d,yscale=%d\n",xscale,yscale);

  bx = 8-(dx>>1);             /* bx,by = top-left coordinate of box */
  by = ysize-(dy>>1);       /* correct for half-pixel adjustment of scalex8() and scaley8() */

  if (heaptrace)
  mytracef("Switching output to 'bpp1' in area %p ...",sprstatic);

  {
    int fillpath[MAXPATH], strokepath[MAXPATH];
    os_error * err;
    sprite_state oldstate;

    spriteid.s.name = "bpp1";
    er(sprite_outputtosprite(sprstatic, &spriteid, NULL, &oldstate));

    if (heaptrace) mytracef("switched\n");

    bbc_clg();
    initsize(fillpath); initsize(strokepath);
    if (heaptrace) mytracef("buildpath(%p,%p,%p,1)\n",charptr,fillpath,strokepath);
    err = buildpath(charptr, fillpath, strokepath, TRUE);
    if (!err) {
      if (heaptrace) mytracef("drawfill\n");
        if (plotrule) {
          drawfill_winding(fillpath, NULL, charptr->flatness);
        }
        else {
          drawfill(fillpath, NULL, charptr->flatness);
        }
      if (heaptrace) mytracef("drawstroke\n");
      drawstroke(strokepath, NULL, charptr->flatness);
    }
    if (heaptrace) mytracef("restorestate");
    erx(sprite_restorestate(oldstate));        /* restore state before returning error! */
    if (err) return(err);
  }

  /* Create 4-bpp sprite to hold anti-aliased result */

  if (heaptrace) mytracef("Making sprite\n");

  er(my_sprite_create(charptr,sprite_nopalette,superx>>2,supery>>2,spritemode));

  /* Call Super_Sample4 to do the anti-aliasing */
  {
    os_regset r;
    sprite_header *spraddr;

    spraddr = getspriteaddr(font->spritedata,charptr->sprname);

    if (heaptrace)
    mytracef("Super-sampling from %p to %p\n",sprbpp1,spraddr);

    r.r[1] = (int) (((char *)sprbpp1) + sprbpp1->image);
    r.r[2] = 4*(sprbpp1->width+1);
    r.r[3] = sprbpp1->height+1;
    r.r[4] = (int) (((char *)spraddr) + spraddr->image);
    er(os_swix(Super_Sample4, &r));

    if (heaptrace)
    mytracef("Final sprite address = &%p\n",r.r[4]);

  }
  return(NULL);
}


/* ---- 1bpp packing routines --------------------------------------------- */

/*
 * Packed format: a stream of 4-bit numbers, as follows:
 *
 * <packed number> ==
 *         0         followed by n-1 zeroes, followed by n+1 nibbles
 *                   = resulting number + (13-f)*16 + f+1 - 16
 *  i =    1 .. f    i
 *  i =  f+1 .. 13   (i-f-1)*16 + next nibble + f + 1
 *        14         followed by n=<packed number> = repeat count of n
 *        15         repeat count of 1 (ie. 1 extra copy of this row)
 *
 * 1 <= f <= 12, or maybe uncrunched is better
 *
 * Nibbles used for different packed numbers:
 *
 *      .. f               1 nibble        n
 *      .. (13-f)*16+f     2 nibbles       m n
 *      .. 2^8-1           3 nibbles       0 n1 n2
 *
 * Repeat counts operate on the current row,
 * ie. to the row containing the first pixel of the next run to start up.
 *
 */


#define toobig(x) (((x) & 0xFF00) != ((x & 0x80) ? 0xFF00 : 0x0000))


static void putpacked(int n,int f);
static char * outptr;
static int repcount;

static void put12(int x, int y)
{
  *outptr++ = x;
  *outptr++ = ((x >> 8) & 0x0F) | (y << 4);
  *outptr++ = y >> 4;
}


os_error * pack1bpp(Char_Block * charptr)
{
  char scratchbuffer[4096];
  sprite_header * spr;
  int llen,r,w,f,pixcols,
      inword,inshift,limit0,limit1,
      currstate,currcount;
  int *base, *ptr;
  int bestsize,bestf;
  char *startptr;
  BOOL lastone;

  outptr = scratchbuffer;

  spr = getspriteaddr(charptr->parent->spritedata,charptr->sprname);
  llen = spr->width+1;
  base = (((int *)(((char *)spr)+spr->image))) + llen * spr->height;
  currstate = (*base >> spr->lbit) & 1;
  pixcols = 32*llen - spr->lbit - (31-spr->rbit);

  charptr->flags &= ~(CHAR_FVALUE | CHAR_INITSTATE | CHAR_12BIT | CHAR_OUTLINE);

  if (toobig(charptr->xlowc) ||
      toobig(charptr->ylowc) ||
      toobig(charptr->xupperc-charptr->xlowc) ||
      toobig(charptr->yupperc-charptr->ylowc))
  {
    *outptr++ =
    charptr->flags = charptr->flags | CHAR_12BIT | (currstate<<CHARB_INITSTATE);
    put12(charptr->xlowc, charptr->ylowc);
    put12(charptr->xupperc-charptr->xlowc, charptr->yupperc-charptr->ylowc);
  } else {
    *outptr++ =
    charptr->flags = charptr->flags | (currstate<<CHARB_INITSTATE); /* 8-bit coords */
    *outptr++ = charptr->xlowc;
    *outptr++ = charptr->ylowc;
    *outptr++ = charptr->xupperc-charptr->xlowc;
    *outptr++ = charptr->yupperc-charptr->ylowc;
  }

/*
 * Try all possible values of 'f' in turn, to see which is best
 * 
 */

  startptr = outptr;
  bestsize = big;
  lastone = 0;

  for (f=1;f<=12 || lastone;f++) {
    outptr = startptr;
    ptr = base;
    repcount = 0;
    currcount = 0;
    currstate = (*base >> spr->lbit) & 1;
    for (r=0;r<=spr->height;r++) {
      w=0;
      limit0 = spr->lbit;
      if (r && currcount < pixcols) {
        for (w=0;w<=spr->width;w++) {
          if (w<spr->width) limit1 = 31; else limit1 = spr->rbit;
          if (((ptr[w] ^ ptr[w+llen]) >> limit0) << (31-limit1+limit0)) break;
          limit0 = 0;
        }
      }
      if (w>spr->width) {
        repcount ++;
        ptr -= llen;      /* skip this row (same as the last one) */
      } else {
        if (repcount>1) {
          *outptr++=14;
          putpacked(repcount,f);
        } else if (repcount==1) {
          *outptr++=15;
        }
#if TR_pack
        if (repcount && lastone) mytracef("rp %d ",repcount);
#endif
        repcount = 0;
        limit0 = spr->lbit;
        for (w=spr->width;w>=0;w--) {
          inword = *ptr++;
          if (w>0) limit1=31; else limit1=spr->rbit;
          for (inshift=limit0;inshift<=limit1;inshift++) {
            if (((inword >> inshift) & 1) == currstate) {
              currcount ++;
            } else {
#if TR_pack
              if (lastone) mytracef("%c %d ",currstate?'B':'W',currcount);
#endif
              putpacked(currcount,f);
              currcount = 1;
              currstate ^= 1;
            }
          }
          limit0 = 0;
        }
        ptr -= llen << 1;  /* go up 1 row */
      }
    }
    if (repcount>1) {
      *outptr++=14;
      putpacked(repcount,f);
    } else if (repcount==1) {
      *outptr++=15;
    }
#if TR_pack
    if (repcount && lastone) mytracef("rp %d ",repcount);
#endif
    if (currcount) {
#if TR_pack
      if (lastone) mytracef("%c %d ",currstate?'B':'W',currcount);
#endif
      putpacked(currcount,f);
    }
#if TR_pack
    if (lastone) mytracef("\nf=%d, packed char size = %d    ",
                                                            f,
                                       (outptr-startptr+1)>>1);
#endif
    if (outptr-scratchbuffer < bestsize) {
      bestsize = outptr-scratchbuffer;
      bestf = f;
    }
    if (lastone) {              /* must check this first! */
      lastone = 0;
      f=big;
    } else if (f==12) {
      lastone = 1;
      f=bestf-1;           /* NB will be increased by 1 !!! */
    }
  }
#if TR_pack
   mytracef("Unpacked char size = %d\n",
                        ((charptr->xupperc-charptr->xlowc)*
                         (charptr->yupperc-charptr->ylowc) + 7) >> 3);
#endif
  if (outptr-startptr < ((charptr->xupperc-charptr->xlowc)*
                         (charptr->yupperc-charptr->ylowc) + 3) >> 2)
  {
    char *inptr, *optr = startptr;
    for (inptr=startptr;inptr<outptr;)
      *optr++ = (*inptr++ & 0xF) | ((*inptr++) << 4);
    outptr = optr;
    *scratchbuffer |= bestf << 4;  /* mark as 'crunched' */
  } else {
    outptr=startptr;
    ptr = base;
    currstate = 0x80000000;
    for (r=0;r<=spr->height;r++) {
      limit0 = spr->lbit;
      for (w=spr->width;w>=0;w--) {
        inword = *ptr++;
        if (w>0) limit1=31; else limit1=spr->rbit;
        for (inshift=limit0;inshift<=limit1;inshift++) {
          currstate = (((inword >> inshift) & 1)<<7) | (currstate >> 1);
          if (currstate & (1<<23)) {
            *outptr++ = currstate;
            currstate = 0x80000000;
          }
        }
        limit0 = 0;
      }
      ptr -= llen << 1;
    }
    if (currstate != 0x80000000) {
      while ((currstate & (1<<23))==0) currstate = currstate >> 1;
      *outptr++ = currstate;
    }
  }

  return(savechardata(charptr,scratchbuffer,outptr-scratchbuffer));
}


/* Packed number format:
 *         0         followed by n-1 zeroes, followed by n+1 nibbles
 *                   = resulting number + (13-f)*16 + f+1 - 16
 *  i =    1 .. f    i
 *  i =  f+1 .. 13   (i-f-1)*16 + next nibble + f+1
 *           n = (i-f-1)*16 + n2 + f+1
 *           i = (n-f-1) DIV 16 + f+1
 *           n2 = (n-f-1) MOD 16
 */

static void putpacked(int n,int f)
{
  if (n<=f) {
    *outptr++ = n;
  } else if (n <= (13-f)*16+f) {
    *outptr++ = (n-f-1) / 16 + f+1;
    *outptr++ = (n-f-1) % 16;
  } else {
    register int shift;
    for (shift = 0;n >= (16<<shift);shift+=4) *outptr++ = 0;
    for (;shift >= 0;shift-=4) *outptr++ = (n >> shift) & 0xF;
  }
}


/* ---- 1-bpp unpacking --------------------------------------------------- */


static int getpacked(int *ch,int f);
static int getnibble(int *ch);

os_error * unpack1bpp(Char_Block * charptr)
{
  int currstate,currcount,ch,llen,outword,r,w,f;
  int limit0,limit1,shift;
  int *ptr;
  sprite_header *spr;
  Font_Block * font = charptr->parent;
  char_flags oldchflags;

  oldchflags = charptr->flags & CHAR_GRID;
  ch = getcharheader(charptr);    /* ch = offset of data (bytes) */
  xsize = charptr->xupperc - charptr->xlowc;
  ysize = charptr->yupperc - charptr->ylowc;
  charptr->flags = (charptr->flags &~ CHAR_GRID) | oldchflags;

  er(my_sprite_create(charptr,sprite_nopalette,
                               xsize,ysize,18)   /* use mode 18 always */
   );

#if TR_unpack
  mytracef("font->filedata = &%p, ch = &%x, ",font->filedata,ch);
#endif
  ch = (((int)font->filedata) + ch) << 1;  /* ch = nibble pointer */
#if TR_unpack
  mytracef("new ch = &%x, ch/2 = &%x\n",ch,ch>>1);
#endif

  spr = getspriteaddr(charptr->parent->spritedata,charptr->sprname);
  llen = spr->width+1;
  ptr = (((int *)(((char *)spr)+spr->image))) + llen * spr->height;
#if TR_unpack
  mytracef("Unpacking char: flags = &%3x\n",charptr->flags);
  mytracef("spr = %p,llen = %d,base = %p\n",spr,llen,ptr);
#endif

  if ((f = (charptr->flags & CHAR_FVALUE) >> CHARB_FVALUE) != 0) {
    repcount = 0;
    currstate = ((charptr->flags & CHAR_INITSTATE) >> CHARB_INITSTATE) ^ 1;
    currcount = 0;

    for (r=0;r<=spr->height;r++) {
      if (repcount) {
        for (w=0;w<=spr->width;w++) *ptr++ = ptr[llen];
        repcount -= 1;
      } else {
        limit0 = spr->lbit;
        for (w=spr->width;w>=0;w--) {
          outword = 0;
          if (w>0) limit1=31; else limit1=spr->rbit;
          for (shift=limit0;shift<=limit1;shift++) {
            if (currcount==0) {
              currstate ^= 1;
              currcount = getpacked(&ch,f);
#if TR_unpack
              mytracef("%c %d ",currstate?'B':'W',currcount);
#endif
            }
            outword |= currstate << shift;
            currcount -= 1;
          }
          *ptr++ = outword;
        }
      }
      ptr -= llen << 1;
    }
#if TR_unpack
    mytracef("\n");
#endif
  } else {
    char * inptr = (char *)(ch>>1);
    currstate = 1;
    for (r=0;r<=spr->height;r++) {
      limit0 = spr->lbit;
      for (w=spr->width;w>=0;w--) {
        outword = 0;
        if (w>0) limit1=31; else limit1=spr->rbit;
        for (shift=limit0;shift<=limit1;shift++) {
          if (currstate==1) currstate = *inptr++ | 0x100;
          outword |= (currstate & 1) << shift;
          currstate = currstate >> 1;
        }
        *ptr++ = outword;
        limit0 = 0;
      }
      ptr -= llen << 1;
    }
  }
#if TR_unpack
  if ((char *)ptr - (char *)spr != spr->image - llen*sizeof(int))
    mytracef("#### ptr offset should be %p, is actually %p ####\n",
                                                      spr->image-4,
                                         (char *)ptr - (char *)spr);
#endif
  return(NULL);
}


static int getpacked(int *ch,int f)
{
  register int n = getnibble(ch);

  if (n==0) {
    register int count = 1;
    while ((n=getnibble(ch))==0) count++;
    for (;count;count--) n = (n<<4) + getnibble(ch);
    return(n);
  } else if (n <= f) {
    return(n);
  } else if (n < 14) {
    return((n-f-1)*16 + getnibble(ch) + f+1);
  } else {
    if (n==14) repcount = getpacked(ch,f);
    else       repcount = 1;
#if TR_unpack
    mytracef("rp %d ",repcount);
#endif
    return(getpacked(ch,f));
  }
}

static int getnibble(int *ch)
{
  register int n1 = *ch;
  register int n2 = *((char *)(n1>>1));
  register int n3 = (n1 & 1) ? (n2>>4) : (n2 & 0xF);
  *ch += 1;
#if TR_unpack && 0
  mytracef("getnibble: ptr=%p, value=%d\n",(char *)(n1>>1),n3);
#endif
  return(n3);
}


/* ---- general ----------------------------------------------------------- */


os_error * my_sprite_create(Char_Block *charptr, sprite_palflag palflag,
                            int width, int height, int mode)
{
  os_error *e;
  Font_Block * font = charptr->parent;

/*
  mytracef("Creating sprite for block at %p ...", charptr);
*/

  er(ensuresprites(font));          /* make null sprite area if none present yet */

  putspritename(charptr->sprname, "s%x", charptr);    /* construct name */

  e = sprite_create(font->spritedata,charptr->sprname,palflag,width,height,mode);

  while (e && e->errnum == 130)    /* No room to get sprite */
  {
    if (flex_extend((flex_ptr)&font->spritedata,font->spritedata->size+4096)) {
      font->spritedata->size += 4096;
      e = sprite_create(font->spritedata,charptr->sprname,palflag,width,height,mode);
    } else returnerr("Flex area full");
  }
  if (e) charptr->sprname[0] = 0;     /* sprite not created correctly */

  return(e);
}


/* Delete sprite and close up sprite area */

os_error *my_sprite_delete(Font_Block *font, char *sprname)
{

  spriteid.s.name = sprname;

  er(sprite_delete(font->spritedata, &spriteid));

  return(sprite_alloc(font, font->spritedata->freeoff));     /* shrink sprite area */
}


/* Make null sprite area if no sprites present yet */

os_error * ensuresprites(Font_Block *font)
{
  if (font->spritedata == NULL)
  {
    static sprite_area nosprites =
    {
      sizeof(sprite_area),          /* size of area           */
      0,                            /* number of sprites      */
      sizeof(sprite_area),          /* offset to first sprite */
      sizeof(sprite_area)           /* offset to free area    */
    };

    if (!flex_alloc((flex_ptr)&font->spritedata,sizeof(sprite_area)))
      returnerr("Flex full");

    *(font->spritedata) = nosprites;     /* initialise */
  }
  return(NULL);
}


sprite_header *getspriteaddr(sprite_area *areaCBptr, char *name)
{
  sprite_ptr ptr;

  spriteid.s.name = name;
  erx(sprite_select_rp(areaCBptr, &spriteid, &ptr));

  return((sprite_header *)ptr);
}


/* ----------------------------------------------------------------------------------------- */

/* Read in the first sprite from a file, to use as a background
 * Fiddles about using OS_GBPB to read the sprite in
 * The previous sprite is removed - use a null sprite file to remove it
 */

os_error * loadbacksprite(Char_Block *charptr, char * filename)
{
  int h;
  sprite_area sparea;
  sprite_header *spaddr;
  int spritelen;
  Font_Block *font = charptr->parent;
  Wind_Link *wlink;

  if (charptr->backsprite[0]) {
    er(my_sprite_delete(font,charptr->backsprite));
    charptr->backsprite[0] = 0;
  }

  wlink = findwindinfo(W_SKELETON, charptr);
  if (wlink) invalidate(wlink->wind_handle,-big,-big,big,big);

  er(osfind(0x4C, filename, &h));

  erc(h,osgbpb(3,h,&sparea.number,12,0));      /* read file header - size omitted */
  if (sparea.number > 0) {
    erc(h,ensuresprites(font));                     /* make font sprite area non-null */
    erc(h,osgbpb(3,h,&spritelen,4,sparea.sproff-4));
    erc(h,ensuresprites(font));
    erc(h,sprite_alloc(font,font->spritedata->freeoff+spritelen));
    spaddr = (sprite_header *) (((char *)font->spritedata) + font->spritedata->freeoff);
    erc(h,osgbpb(3,h,spaddr,spritelen,sparea.sproff-4));
    font->spritedata->number ++;
    font->spritedata->freeoff += spritelen;

    putspritename(spaddr->name, "b%x", charptr);
    putspritename(charptr->backsprite, "b%x", charptr);

    erc(h,read_sprite_size(font,charptr->backsprite,&charptr->backsprbox.p1[0],&charptr->backsprbox.p3[1]));

    charptr->backsprbox.p0[0] =
    charptr->backsprbox.p0[1] =
    charptr->backsprbox.p3[0] =
    charptr->backsprbox.p1[1] = 0;
    charptr->backsprbox.p2[0] = charptr->backsprbox.p1[0];
    charptr->backsprbox.p2[1] = charptr->backsprbox.p3[1];
  }

  if (wlink) erc(h,setextent(wlink));     /* wlink still set up from earlier */

  return(closefile(h));
}


/* Routine to read the size of a sprite in OS units */

os_error * read_sprite_size(Font_Block *font, char *sprname, int *xp, int *yp)
{
  sprite_info sprinfo;

  spriteid.s.name = sprname;
  er(sprite_readsize(font->spritedata, &spriteid, &sprinfo));

  *xp = sprinfo.width  << bbc_modevar(sprinfo.mode, bbc_XEigFactor);
  *yp = sprinfo.height << bbc_modevar(sprinfo.mode, bbc_YEigFactor);

  return(NULL);
}


/* Routine to set the size of the sprite area
 * Sprite area must NOT be null!
 */

os_error *sprite_alloc(Font_Block *font,int size)
{
  if (flex_extend((flex_ptr)&font->spritedata,size))
       font->spritedata->size = size;
  else returnerr("Flex area full");

  return(NULL);
}


/* Write spritename into a buffer, using the Char_Block address as an identifier */

void putspritename(char *buffer, const char *format, Char_Block *charptr)
{
  int i;
  for (i=0; i<12; i++) buffer[i] = 0;
  sprintf(buffer, format, (int)charptr);
}

