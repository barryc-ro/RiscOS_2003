        TTL     > ProfileSrc

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:EnvNumbers
        GET     Hdr:File
        GET     Hdr:FileTypes
        GET     Hdr:NewErrors

        GET     Hdr:Profiler          ; defines SWI symbols

Module_BaseAddr

;-----------------------------------------------------------------------------

Profile_Addr    *       0               ; Use location 0 for the profile indicator

maxprofile      *       64              ; profile numbers must be in range 0..maxprofile-1

NOT_PROFILING   *       -1              ; must not correspond to a valid domain id
ALL_PROFILING   *       -2              ; ditto

domain_addr     *       &FF8            ; set up by the Wimp

delay           *       &FF00           ; about 1/30th of a second
                ASSERT  delay <= &FFFF  ; Maximum programmable value

;.............................................................................

        ^       0, r12

Counters        #       maxprofile*4
profiling       #       4               ; domain id being profiled (or NOT_PROFILING or ALL_PROFILING)
totaltime       #       4               ; global counter (increments at 2MHz)
starttime       #       4               ; when this index started to be counted
oldindex        #       4               ; item being counted

WSSIZE  *       :INDEX: @

;-----------------------------------------------------------------------------

        ASSERT  . = Module_BaseAddr

        LEADR   Module_LoadAddr

        DCD     0                       ; no Start entry
        DCD     Init - Module_BaseAddr
        DCD     Die - Module_BaseAddr
        DCD     0                       ; no services required - go away on BREAK
        DCD     Title - Module_BaseAddr
        DCD     Help - Module_BaseAddr
        DCD     CommandTable - Module_BaseAddr
        DCD     Module_SWIUserBase + ProfileSWI * Module_SWIChunkSize
        DCD     SWIdecode - Module_BaseAddr
        DCD     SWInames - Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0

Title   DCB     "Profiler", 0

Help    DCB     "Profiler", 9, "0.03 (16 Nov 1990)", 0


CommandTable
        DCB     "Profile_Clear",0
        ALIGN
        DCD     Profile_Clear_Code - Module_BaseAddr
        =       0,0,0,0
        DCD     Profile_Clear_Syntax - Module_BaseAddr
        DCD     Profile_Clear_Help - Module_BaseAddr

        DCB     "Profile_Start",0
        ALIGN
        DCD     Profile_Start_Code - Module_BaseAddr
        =       0,0,1,0
        DCD     Profile_Start_Syntax - Module_BaseAddr
        DCD     Profile_Start_Help - Module_BaseAddr

        DCB     "Profile_Stop",0
        ALIGN
        DCD     Profile_Stop_Code - Module_BaseAddr
        =       0,0,0,0
        DCD     Profile_Stop_Syntax - Module_BaseAddr
        DCD     Profile_Stop_Help - Module_BaseAddr

        DCB     "Profile_Save",0
        ALIGN
        DCD     Profile_Save_Code - Module_BaseAddr
        =       1,0,1,0
        DCD     Profile_Save_Syntax - Module_BaseAddr
        DCD     Profile_Save_Help - Module_BaseAddr

        DCB     0                       ; That's all folks!


Profile_Clear_Help      DCB     "*Profile_Clear clears the profile counters.", 13
Profile_Clear_Syntax    DCB     "Syntax: *Profile_Clear", 0

Profile_Start_Help      DCB     "*Profile_Start starts profiling.", 13
Profile_Start_Syntax    DCB     "Syntax: *Profile_Start [<domain id>]", 0

Profile_Stop_Help       DCB     "*Profile_Stop stops profiling.", 13
Profile_Stop_Syntax     DCB     "Syntax: *Profile_Stop", 0

Profile_Save_Help       DCB     "*Profile_Save saves the profile to a file.", 13
Profile_Save_Syntax     DCB     "Syntax: *Profile_Save <filename>", 0

        ALIGN

;-----------------------------------------------------------------------------

; Module initialisation: claim workspace and initialise it.

Init    ROUT

        MOV     r6, lr

        LDR     r2, [r12]
        TEQ     r2, #0
        BNE     softstart

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #WSSIZE
        SWI     XOS_Module
        ORRVSS  pc, r6, #V_bit
        STR     r2, [r12]

softstart
        MOV     r12, r2

        MOV     r14, #NOT_PROFILING
        STR     r14, profiling

        BL      clearcounters

        MOVS    pc, r6

;.............................................................................

; Module die: get off the vectors.

Die     ROUT

        MOV     r6, lr

        LDR     r12, [r12]

        LDR     r14, profiling
        CMP     r14, #NOT_PROFILING
        BLNE    stopprofiling

        MOVS    pc, r6

;-----------------------------------------------------------------------------

Profile_Clear_Code ROUT

        Push    "lr"
        LDR     r12, [r12]                      ; r12 -> workspace

        BL      clearcounters

        Pull    "pc"

;.............................................................................

; In    r0 -> parameters
;       r1 = number of parameters

Profile_Start_Code ROUT

        Push    "r1-r3,lr"
        LDR     r12, [r12]              ; r12 -> workspace

        LDR     r3, profiling

        CMP     r1, #1                  ; any parameters?
        MOVLT   r2, #ALL_PROFILING
        BLT     %FT01

        MOV     r1, r0                  ; r1 -> string
        MOV     r0, #16                 ; r0 = default base
        SWI     XOS_ReadUnsigned

01      STRVC   r2, profiling           ; r2 = value

        Pull    "r1-r3,pc",VS

        CMP     r3, #NOT_PROFILING
        BLEQ    startprofiling

        Pull    "r1-r3,pc"

;.............................................................................

Profile_Stop_Code ROUT

        Push    "lr"
        LDR     r12, [r12]                      ; r12 -> workspace

        LDR     r14, profiling
        CMP     r14, #NOT_PROFILING
        BLNE    stopprofiling

        MOV     r14, #NOT_PROFILING
        STR     r14, profiling

        Pull    "pc"

;.............................................................................

; In    r0 -> parameters (filename)

Profile_Save_Code ROUT

        Push    "r1-r6,lr"
        LDR     r12, [r12]                      ; r12 -> workspace

        LDR     r6, profiling
        MOV     r14, #NOT_PROFILING             ; turn this off for now
        STR     r14, profiling

        MOV     r1, r0                          ; r1 -> filename
        MOV     r0, #OSFile_SaveStamp
        LDR     r2, =FileType_Data              ; r2 = filetype
        ADR     r4, Counters                    ; r4 = start address
        ADD     r5, r4, #maxprofile*4           ; r5 = end address+1
        SWI     XOS_File

        STR     r6, profiling                   ; restore

        Pull    "r1-r6,pc"
        LTORG

;-----------------------------------------------------------------------------

clearcounters   ROUT

        Push    "r1,r2,lr"

        ADR     r1, Counters
        MOV     r2, #(maxprofile-1)*4
        MOV     r14, #0
01      STR     r14, [r1,r2]
        SUBS    r2, r2, #4
        BPL     %BT01

        MOV     r14, #0
        STR     r14, totaltime
        STR     r14, starttime
        STR     r14, oldindex

        Pull    "r1,r2,pc",,^

;.............................................................................

startprofiling
        Push    "r0-r3,lr"

        MOV     r0, #6                  ; Timer 1
        ADR     r1, MyIrq
        MOV     r2, r12
        SWI     XOS_ClaimDeviceVector
        STRVS   r0, [sp]
        Pull    "r0-r3,pc", VS

        MOV     r3, #IOC
        LDR     r1, =delay
        STRB    r1, [r3, #Timer1LL]
        MOV     r1, r1, LSR #8
        STRB    r1, [r3, #Timer1LH]
        STRB    r1, [r3, #Timer1GO]
        MOV     r1, #timer1_bit         ; Clear any pending IRQ
        STRB    r1, [r3, #IOCIRQCLRA]

        TEQP    pc, #&FC000003          ; Disable FIQ too !
        LDRB    r1, [r3, #IOCIRQMSKA]
        ORR     r1, r1, #timer1_bit
        STRB    r1, [r3, #IOCIRQMSKA]

        Pull    "r0-r3,pc",,^           ; Restore caller's state

;.............................................................................

stopprofiling
        Push    "r0-r4,lr"

        MOV     r2, r12                 ; complete the count of the last one
        BL      SetIndex_Code

        MOV     r3, #IOC
        MOV     r4, psr
        TEQP    pc, #&FC000003          ; Disable FIQ too !
        LDRB    r1, [r3, #IOCIRQMSKA]
        BIC     r1, r1, #timer1_bit
        STRB    r1, [r3, #IOCIRQMSKA]
        MOV     r1, #timer1_bit         ; Clear any pending IRQ
        STRB    r1, [r3, #IOCIRQCLRA]
        TEQP    r4, #0                  ; Back to caller's state

        MOV     r0, #6                  ; Timer 1
        ADR     r1, MyIrq
        MOV     r2, r12
        SWI     XOS_ReleaseDeviceVector

        Pull    "r0-r4,pc",,^           ; No errors please
        LTORG

;-----------------------------------------------------------------------------

; On receipt of the appropriate IRQ, latch counter and increment totaltime
; In    r3 -> IOC, r12 -> workspace

MyIrq   ROUT

        MOV     r0, #timer1_bit
        STRB    r0, [r3, #IOCIRQCLRA]   ; stop interrupt

        LDR     r3, totaltime
        ADD     r3, r3, #delay
        STR     r3, totaltime
        MOV     r3, #IOC
        MOV     pc, lr

;-----------------------------------------------------------------------------
; SWIs
;-----------------------------------------------------------------------------

SWIdecode
        LDR     r12, [r12]
        CMP     r11, #maxswi
        ADDCC   pc, pc, r11, LSL #2
        B       err_nosuchswi
jptable
        B       SWIProfiler_FindRoutines
        B       SWIProfiler_ReadTime
        B       SWIProfiler_AddCounter
        B       SWIProfiler_SetIndex
maxswi  *       (.-jptable)/4

SWInames
        DCB     "Profiler", 0
        DCB     "FindRoutines", 0
        DCB     "ReadTime", 0
        DCB     "AddCounter", 0
        DCB     "SetIndex", 0
        DCB     0
        ALIGN

err_nosuchswi
        ADR     r0, ErrorBlock_NoSuchSWI
        ORRS    pc, lr, #V_bit
        MakeErrorBlock NoSuchSWI

;.............................................................................

; Out   r0 = workspace pointer
;       r1 = address of ReadTime routine
;       r2 = address of AddCounter routine

SWIProfiler_FindRoutines

        MOV     r0, r12
        ADR     r1, ReadTime_Code
        ADR     r2, AddCounter_Code
        ADR     r3, SetIndex_Code

        MOV     pc, lr

;.............................................................................

; Return the current 'time' value which increments at 2MHz
; This is a 4-byte value so it can count up to about 35 minutes

; In    r2 -> workspace (or r12 -> workspace if called via SWI)
;       must be in SVC mode
; Out   r0 = current time value (derived from counter plus Timer1)
;       r2 -> workspace

SWIProfiler_ReadTime
        MOV     r2, r12

ReadTime_Code
        Push    "r3,lr"

        TEQP    PC, #I_bit + SVC_mode   ; disable IRQ

        MOV     r3, #IOC
        STRB    r3, [r3, #Timer1LR]     ; latch count
        LDRB    r14, [r3, #Timer1CL]
        LDRB    r0,  [r3, #Timer1CH]
        ORR     r14, r14, r0, LSL #8    ; r14 = current counter value

        LDRB    r0, [r3, #IOCIRQREQA]
        TST     r0, #timer1_bit         ; if interrupt being requested
        TSTNE   r14, #&8000             ; and counter is quite big
        SUBNE   r14, r14, #delay        ; we're into the next cycle

        MOV     r0, #delay
        SUB     r0, r0, r14                     ; r0 = time this cycle
        LDR     r14, [r2, #:INDEX: totaltime]
        ADD     r0, r0, r14

        Pull    "r3,pc",,^              ; restore to caller's IRQ state

;.............................................................................

; In    r0 = time to add
;       r1 = counter index to add to
;       r2 -> workspace
; Out   [Counters, r1, LSL #2] += r0

SWIProfiler_AddCounter
        MOV     r2, r12

AddCounter_Code
        CMP     r1, #maxprofile
        ADRCS   r0, err_toobig
        ORRCSS  pc, lr, #V_bit

        Push    "r3,lr"

        ADD     r3, r2, #:INDEX: Counters
        LDR     r14, [r3, r1, LSL #2]
        ADDS    r14, r14, r0
        MOVCS   r14, #&FFFFFFFF
        STR     r14, [r3, r1, LSL #2]

        Pull    "r3,pc",,^                      ; don't return V set!

;.............................................................................

; In    [starttime] = time to subtract from current time
;       [oldindex]  = index of item that was being counted
;       r1 = counter index to add to
;       r2 -> workspace
; Out   r0 = amount of time that was added to this item
;       [Counters, r1, LSL #2] += r0

SWIProfiler_SetIndex
        MOV     r2, r12

SetIndex_Code
        CMP     r1, #maxprofile
        ADRCS   r0, err_toobig
        ORRCSS  pc, lr, #V_bit

        Push    "r3,lr"

        BL      ReadTime_Code                   ; R0 = current time

        LDR     r3, [r2, #:INDEX: starttime]    ; swap current and previous times
        STR     r0, [r2, #:INDEX: starttime]

        SUB     r0, r0, r3
        LDR     r14, [r2, #:INDEX: oldindex]    ; swap current and old indices
        STR     r1, [r2, #:INDEX: oldindex]     ; and add to counter of old one
        MOV     r1, r14
        BL      AddCounter_Code

        Pull    "r3,pc",,^

err_toobig
        DCD     1
        DCB     "Index too large", 0
        ALIGN

        LTORG

        END
