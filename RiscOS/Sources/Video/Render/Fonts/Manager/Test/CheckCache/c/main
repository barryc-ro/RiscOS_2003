/* > c.main
 * Authors: Neil Raine, David De Vorchik
 * Title: CheckCache
 * History:
 *      16-Nov-91 DDV 3.01 Adjusted to cope with new font cache structures
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <assert.h>
#include "h.kernel"

#define Version 341
#define MinVersion 341
#define MaxVersion 348

#define CACHEHEADER   0x00000020
#define FONTCACHE    (fontcache_base - CACHEHEADER)
#define LOCKED        0x80000000
#define CLAIMED       0x40000000
#define ISCHAR        0x20000000
#define SIZEFLAGS     0xE0000000
#define MARKER        0x10000000
#define PP_4XPOSNS    0x00000001
#define PP_4YPOSNS    0x00000002
#define PP_SPLITCHUNK 0x00020000
#define MSF_NORMAL    0
#define MSF_RAMSCALED 1
#define MSF_MASTER    2

typedef unsigned int addr;

typedef struct {
        int     size, link, backlink, anchor;
} header;


typedef struct {
        int     size, link, backlink, anchor, flags;
} chunkheader;


typedef struct {
        chunkheader     header;
        addr            index[1];       /* number of items depends on length of block */
} chunk;


typedef struct {
        int     x0, y0, x1, y1;
} box;


typedef struct {
        int     XX, YX, XY, YY, X, Y;
} umatrix;


typedef struct {
        int     XX, YX, XY, YY, X, Y;
#if Version >= 283
        int     coordshift;
#endif
} matrix;


typedef struct {
        int     mantissa, exponent;
} fp;


typedef struct {
        fp      XX, YX, XY, YY, X, Y;
} fpmatrix;


typedef struct {
        header      hdr;
        umatrix     unscaled;
        matrix      metricsmatrix;
        fpmatrix    scaled;
} matrixblock;


#if Version >= 286
typedef struct {
        header          header;
        char            leafname4, leafname1, flags, dummy;
        umatrix         paintmatrix;
        matrix          metricsmatrix;
        matrix          rendermatrix;
        matrix          bboxmatrix;
        box             bbox4, bbox1;
        int             xscale, yscale;
        addr            link;
        addr            PixelsPtrs4[8];
        addr            PixelsPtrs1[8];
} transform;
#endif

typedef struct {
  header        header;
  char          leafptrandname[1];
} pathname;


#if Version >= 341
typedef struct {
        unsigned int    min;
        unsigned int    n:15;
        unsigned int    table:1;
        unsigned int    offset:16;
} lookupentry;
#endif

#if Version >= 288

typedef enum {
  mapf_DIRECT = 0x01    /* direct mapping (ie. there's no index) */
} map_flags;

typedef struct {
        header          header;
        addr            link;
        map_flags       flags;
#if Version < 341
        int             base;
#endif
        int             alphabet;
        char            encoding[12];
#if Version >= 341
        int             base;
        int             entries;
        lookupentry     entry[1];         /* Variable length */
#else
        int             spare[1];
        int             lookup[256];
#endif
} mapblock;
#endif

#if Version >= 341
typedef struct {
        header          header;
        addr            pointers[1];     /* <nchunks> block pointers */
     /* int             offsets[1]; */   /* optional <nchunks+1> file offsets */
} pixoblock;
#endif


typedef struct {
        char    leafname[11];
        char    flags;
#if Version >= 341
        int     PixOffStart;            /* file offset of chunk offset table */
#endif
#if Version >= 288
        int     nchunks;
        int     nscaffolds;
#endif
        addr    address;                /* address of data if in ROM */
        box     box;
#if Version < 341
        int     PixOffsets[9];          /* file offsets of pixel data */
#endif
} fdata;

#if Version >= 301
typedef struct {
        int     threshold1, threshold2, threshold3, threshold4, threshold5;
} thresh;
#endif

typedef struct {
        header  hdr;

        int     usage;

        char    metricshandle;
        char    pixelshandle4;
        char    pixelshandle1;
        char    flags;

        char    name[40];
        int     xsize, ysize;

#if Version >= 288
        int     nchars;
        char    metflags;
#else
        char    nchars;
#endif
        char    masterfont;
        char    masterflag;
        char    skelthresh;

#if Version >= 288
        char    encoding[12];
        int     base;
#endif

        int     xmag, ymag;

        int     xscale, yscale;
        int     xres, yres;
        char    filebbox[4];

#if Version >= 301
        thresh  thresholds;
#endif

        int     MetOffset, MetSize;
        int     PixOffset, PixSize;
        int     scaffoldsize;

        int     designsize;
#if Version >= 280
        matrix  rendermatrix;
        matrix  bboxmatrix;
        fp      resXX, resYY;
#else
        int     shiftdown;
#endif

        int     metaddress;

        fdata   file4;
        fdata   file1;
#if Version >= 288 && Version < 341
        int     extraoffsets[16];
#endif

        addr    MetricsPtr;
#if Version >= 288
        addr    Kerns;
#endif
        addr    Charlist;
        addr    Scaffold;
        addr    PathName, PathName2;
#if Version >= 280
        addr    FontMatrix;
#endif
#if Version >= 341
        addr    maps[4];
#endif
#if Version >= 341
        addr    PixoPtr4;
        addr    PixoPtr1;
#else
        addr    PixelsPtrs4[8];
        addr    PixelsPtrs1[8];
#endif
#if Version >= 286
        addr    transforms[16];
#endif
} fontheader;


typedef struct {
        int     identifier;                     /* "Font" */
  short int     FontManagerVersion;             /* version no of FontManager module that saved this */
  short int     FileVersion;                    /* version no of FontManager required to load this */
        int     thresholds[5];                  /* FontMax1..FontMax5 parameters */
#if Version>=341
        addr    base;                           /* base address of font cache */
#endif
        addr    item[256];                      /* item[0] = end address of cache */
        int     unclaimed_size;
        addr    unclaimed_head, unclaimed_tail;
        addr    age_head, age_tail;
        addr    del_head, del_tail;
        int     deleted;                          /* NB: padded up to 16-byte boundary */
        addr    maps[16];
} fontindex;


typedef enum {
        blk_FontHeader,
        blk_MetricsPtr,
        blk_Kerns,
        blk_Charlist,
        blk_Scaffold,
        blk_PathName,
        blk_PathName2,
        blk_FontMatrix,
        blk_PixoPtr4,
        blk_PixoPtr1,
        blk_4bpp,
        blk_1bpp,
        blk_Outlines,
        blk_Transform,
        blk_Map,
        blk_NumberOf
} blocktype;


/* ---- The program! -------------------------------------------------------- */


static addr fontcache_base;
static addr fontcache_min;
static addr fontcache_min2;
static addr fontcache_max;
static unsigned int size_array[blk_NumberOf];
static unsigned int count_array[blk_NumberOf];
static char * megablock;
static unsigned int filesize;
static int fullinfo = 0;


const char * blockname(blocktype type);
_kernel_oserror * checkagelinks(header * head, unsigned int total_count);
_kernel_oserror * checkcache(const char *filename);
_kernel_oserror * checkaddr(int fontaddr, addr *xp, blocktype type);
_kernel_oserror * checkblock(int fontaddr, int blockno, addr *bxp, blocktype type);
_kernel_oserror * checktransform(int fontaddr, int blockno, addr *bxp, blocktype type);
_kernel_oserror * checkpixo(int fontaddr, addr *bxp, blocktype type, blocktype subtype, int PixOffStart, int nchunks);
_kernel_oserror * checkmap(int fontaddr, int blockno, addr *bxp, blocktype type);
void * fileaddress(addr address);
addr fileoffset(void * pointer);
_kernel_oserror * make_oserror(int errnum, const char *format, ...);
const char *percent(int a, int b, int size);
const char *ratio(int a, int b, int size);
void dump_block(header *block, blocktype type);


int main(int argc, char **argv)
{
  _kernel_oserror *err = NULL;

#if Version >= 341
  assert(sizeof(fontheader) == 448);
#endif

  if (argc < 2 || argc > 3) err = make_oserror(1, "Syntax: *checkcache <filename> [-full]\n");

  fullinfo = (argc>2 && strcmp(argv[2],"-full")==0) ? 1 : 0;

  if (!err) err = checkcache(argv[1]);

  if (err) _kernel_raise_error(err);
  return(0);
}


_kernel_oserror * checkcache(const char *filename)
{
  FILE *infile;
  fontindex *index;
  fontheader *font;
  int i, j, k;
  int total_count, total_size;

  for (i=0; i<blk_NumberOf; i++) count_array[i] = size_array[i] = 0;

  infile = fopen(filename, "r");
  if (infile == 0) {
    return(make_oserror(214,"File '%s' not found\n",filename));
  }

  fseek(infile, 0, SEEK_END);
  filesize = (int)ftell(infile);

  megablock = malloc(filesize);
  if (!megablock) { return(make_oserror(1, "Not enough memory")); }

  fseek(infile, 0, SEEK_SET);
  fread(megablock, filesize, 1, infile);

  index = (fontindex *) megablock;

#if Version>=341
  fontcache_base = index->base;
#else
  fontcache_base = index->item[0] - (filesize - CACHEHEADER);
#endif

  if (index->identifier != *((int *)"Font")) return(make_oserror(1, "Invalid font file"));

  printf("File created by FontManager %d\n", index->FontManagerVersion);
  printf("File format version  = %d\n", index->FileVersion);

  if (index->FileVersion < MinVersion || index->FileVersion > MaxVersion) {
    return(make_oserror(1, "This version of *CheckCache can only decode versions between %d and %d", MinVersion, MaxVersion));
  }

  if (filesize < sizeof(fontindex)) return(make_oserror(1, "Font cache file is empty"));

  fontcache_min = FONTCACHE + sizeof(fontindex);
  fontcache_min2 = FONTCACHE + (char *)&index->unclaimed_size - (char *)index;
  fontcache_max = index->item[0];

  for (i=1; i<256; i++) {
    addr fontaddr = index->item[i];
#if Version >= 341
    int nchunks;
#endif
    if (fontaddr) {
      checkaddr(fontaddr, &index->item[i], blk_FontHeader);

      font = fileaddress(fontaddr);

      checkaddr(fontaddr, &font->MetricsPtr, blk_MetricsPtr);
      checkaddr(fontaddr, &font->Kerns,      blk_Kerns);
      checkaddr(fontaddr, &font->Charlist,   blk_Charlist);
      checkaddr(fontaddr, &font->Scaffold,   blk_Scaffold);
      checkaddr(fontaddr, &font->PathName,   blk_PathName);
      checkaddr(fontaddr, &font->PathName2,  blk_PathName2);
      checkaddr(fontaddr, &font->FontMatrix, blk_FontMatrix);

#if Version >= 341
      for (j=0; j<4; j++) {
        checkmap(fontaddr, j, &font->maps[j], blk_Map);
      }
#endif

#if Version >= 341
      /*if (font->file4.PixOffStart)
        nchunks = font->file4.nchunks;
      else {
        int master = font->masterfont;
        if (master == 0 && font->PixoPtr4) {
          printf("Font at 0x%X: PixOffStart zero, but no master font\n", fontaddr);
        }
        else {
          addr mfontaddr = index->item[master];
          fontheader *mfont = fileaddress(mfontaddr);

          nchunks = mfont->file1.nchunks;
        }
      }*/
      nchunks = font->file4.nchunks;
      checkpixo(fontaddr, &font->PixoPtr4, blk_PixoPtr4, blk_4bpp, font->file4.PixOffStart, nchunks);
#else
      for (j=0; j<8; j++) {
        checkblock(fontaddr, j, &font->PixelsPtrs4[j], blk_4bpp);
      }
#endif

#if Version >= 341
      /*if (font->file1.PixOffStart)
        nchunks = font->file1.nchunks;
      else {
        int master = font->masterfont;
        if (master == 0 && font->PixoPtr1) {
          printf("Font at 0x%X: PixOffStart zero, but no master font\n", fontaddr);
        }
        else {
          addr mfontaddr = index->item[master];
          fontheader *mfont = fileaddress(mfontaddr);

          nchunks = mfont->file1.nchunks;
        }
      }*/
      nchunks = font->file1.nchunks;
      checkpixo(fontaddr, &font->PixoPtr1, blk_PixoPtr1, font->masterflag==MSF_MASTER ? blk_Outlines : blk_1bpp,
                           font->file1.PixOffStart, nchunks);
#else
#if Version >= 286
      k = font->masterflag==MSF_MASTER ? 24 : 8;
#else
      k = 8;
#endif
      for (j=0; j<k; j++) {
        checkblock(fontaddr, j, &font->PixelsPtrs1[j], font->masterflag==MSF_MASTER ? blk_Outlines : blk_1bpp);
      }
#endif

#if Version >= 286
      if (font->masterflag != MSF_MASTER) {
        for (j=0; j<16; j++) {
          checktransform(fontaddr, j, &font->transforms[j], blk_Transform);
        }
      }
#endif
    }
  }

#if Version >= 288
  for (i=0; i<16; i++) {
    checkmap(0, i, &index->maps[i], blk_Map);
  }
#endif

  fclose(infile);

  printf("\n");
  printf("  Size  %% size  Number   %% no   Av.size  Block type\n");
  printf("  ----  ------  ------   ----   -------  ----------\n");

  for (i=0,total_size=0,total_count=0; i<blk_NumberOf; i++) {
    total_size += size_array[i];
    total_count += count_array[i];
  }

  for (i=0; i<blk_NumberOf; i++) {
    printf("%5dK  %s  %5d  %s  %s  %s blocks\n", size_array[i] >> 10,
                                                 percent(size_array[i],total_size,5),
                                                 count_array[i],
                                                 percent(count_array[i],total_count,5),
                                                 ratio(size_array[i],count_array[i],8),
                                                 blockname((blocktype) i));
  }

  printf("  ----  ------  ------   ----   -------  ----------\n");

  printf("%5dK  %s  %5d  %s  %s  Total.\n", total_size >> 10,
                                            percent(total_size,total_size,5),
                                            total_count,
                                            percent(total_count,total_count,5),
                                            ratio(total_size,total_count,8));

  i = index->item[0]-FONTCACHE-sizeof(fontindex)-index->deleted;
  if (i != total_size) {
    printf("\n%5dK          CacheFree value  **** Difference: %d ****\n", i>>10, i-total_size);
  }

  if (index->deleted) {
    printf("\n%5dK          (cache not compacted)\n", index->deleted>>10);
  }

  checkagelinks((header *)(((char *)&index->age_head)-4), total_count);

  return(NULL);
}


_kernel_oserror * checkagelinks(header * head, unsigned int total_count)
{
  int curr_count = 0;
  header *ptr, *nextptr;
  addr ptrlink;

  for (ptr = fileaddress(head->link); ptr != head; ptr=fileaddress(ptr->link)) {
    ptrlink = ptr->link;
    nextptr = fileaddress(ptrlink);
    if (ptrlink < fontcache_min2 || ptrlink >= fontcache_max || fileaddress(nextptr->backlink) != ptr) {
      printf("**** Invalid age link: 0x%X -> 0x%X\n",fileoffset(ptr),ptrlink);
    }
    if ((ptr->size & MARKER) == 0) {
      if (fileoffset(ptr) != fontcache_min2) {
        printf("**** Unclaimed block in age list: 0x%X\n",fileoffset(ptr));
      }
    }
    curr_count++;
  }

  if (curr_count != total_count+1) {       /* allow 1 for unclaimed block marker */
    printf("**** Found %d blocks in age list (total = %d)\n",curr_count,total_count);
  }

  return(NULL);
}


const char *percent(int a, int b, int size)
{
  char * buffer = malloc(size+2);
  char formatstr[8];

  if (!buffer) _kernel_raise_error(make_oserror(1,"Out of memory"));

  if (b) {
    sprintf(formatstr,"%%%dd%%%%",size);
    sprintf(buffer,formatstr,a*100/b);
  } else {
    for (a=0; a<=size; a++) buffer[a] = ' ';
    buffer[size+1] = 0;
  }

  return(buffer);
}


const char *ratio(int a, int b, int size)
{
  char * buffer = malloc(size+1);
  char formatstr[8];

  if (!buffer) _kernel_raise_error(make_oserror(1,"Out of memory"));

  if (b) {
    sprintf(formatstr,"%%%dd",size);
    sprintf(buffer,formatstr,a/b);
  } else {
    for (a=0; a<size; a++) buffer[a] = ' ';
    buffer[size] = 0;
  }

  return(buffer);
}


const char * blockname(blocktype type)
{
  switch(type) {
    case blk_FontHeader : return("font header");
    case blk_MetricsPtr : return("metricsptr");
    case blk_Kerns      : return("kerning");
    case blk_Charlist   : return("charlist");
    case blk_Scaffold   : return("scaffold");
    case blk_PathName   : return("pathname");
    case blk_PathName2  : return("pathname2");
    case blk_FontMatrix : return("fontmatrix");
    case blk_PixoPtr4   : return("4-bpp pixel offsets");
    case blk_PixoPtr1   : return("1-bpp pixel offsets");
    case blk_4bpp       : return("4-bpp pixels");
    case blk_1bpp       : return("1-bpp pixels");
    case blk_Outlines   : return("outlines");
    case blk_Transform  : return("transform");
    case blk_Map        : return("map");
    default: return("<unknown block type>");

  }
}


_kernel_oserror * checkaddr(int fontaddr, addr *xp, blocktype type)
{
  addr x = *xp;
  addr anchor;

  if (x != 0 && x != 1 && (x < fontcache_min || x > fontcache_max)) {
    printf("Block outside cache: Font at 0x%X: %s = 0x%X\n", fontaddr, blockname(type), x);
    return(make_oserror(1, "Cache corrupt"));
  }

  if (x >= fontcache_min) {
    header *blockptr = fileaddress(x);
    int size = blockptr->size;

    if (fullinfo) dump_block(blockptr,type);

    blockptr->size |= MARKER;          /* for checkagelinks */

    if (x+(size & ~SIZEFLAGS) > fontcache_max) {
      printf("Extends outside cache: Font at 0x%X: %s = 0x%X (0x%X)\n", fontaddr, blockname(type), x, size);
      return(make_oserror(1, "Cache corrupt"));
    }

    anchor = blockptr->anchor;
    if (anchor < FONTCACHE || anchor >= fontcache_max || fileaddress(anchor) != xp) {
      printf("Bad anchor: Font at 0x%X: %s = 0x%X (anchor = 0x%X)\n", fontaddr, blockname(type), x, anchor);
    }

    size_array[type] += size & ~SIZEFLAGS;
    count_array[type]++;
  }

  return(NULL);
}


#if Version >= 286
_kernel_oserror * checktransform(int fontaddr, int blockno, addr *bxp, blocktype type)
{
  addr bx = *bxp;

  if (bx < fontcache_min || bx >= fontcache_max) {
    if (bx != 0) {
      printf("Transform outside cache: Font at 0x%X: %s[%d] = 0x%X\n", fontaddr, blockname(type), blockno, bx);
    }
  } else {
    int blocklen, i;
    transform *blockptr;
    addr anchor;

    blockptr = fileaddress(bx);
    blocklen = blockptr->header.size & ~SIZEFLAGS;

    if (fullinfo) dump_block((header *)blockptr,type);

    blockptr->header.size |= MARKER;          /* for checkagelinks */

    if (bx+blocklen > fontcache_max) {
      printf("Transform extends outside cache: Font at 0x%X: %s[%d] = 0x%X (0x%X)\n", fontaddr, blockname(type), blockno, bx, blocklen);
    }

    if (blocklen != sizeof(transform)) {
      printf("Transform block 0x%X size = %d (should be %d)\n",bx,blocklen,sizeof(transform));
    }

    anchor = blockptr->header.anchor;
    if (anchor < fontcache_min || anchor >= fontcache_max || fileaddress(anchor) != bxp) {
      printf("Font at 0x%X: %s[%d] = 0x%X (anchor = 0x%X, should be 0x%X)\n", fontaddr,
                                                                       blockname(type), blockno,
                                                                       bx, anchor, fileoffset(bxp));
    }

    size_array[type] += blocklen;
    count_array[type]++;

    for (i=0; i<8; i++) {
      checkblock(fontaddr, i, &blockptr->PixelsPtrs4[i], blk_4bpp);
    }

    for (i=0; i<8; i++) {
      checkblock(fontaddr, i, &blockptr->PixelsPtrs1[i], blk_1bpp);
    }

    return(checktransform(fontaddr, blockno, &blockptr->link, type));
  }

  return(NULL);
}
#endif


#if Version >= 288
_kernel_oserror * checkmap(int fontaddr, int blockno, addr *bxp, blocktype type)
{
  addr bx = *bxp;
  char fontname[200];
  if (fontaddr) {
    sprintf(fontname, "Font at &%0X: ", fontaddr);
  }
  else
    fontname[0] = '\0';

  if (bx < fontcache_min || bx >= fontcache_max) {
    if (bx != 0) {
      printf("Map block outside cache: %s%s[%d] = 0x%X\n", fontname, blockname(type), blockno, bx);
    }
  } else {
    int blocklen;
    mapblock *blockptr;
    addr anchor;

    blockptr = fileaddress(bx);
    blocklen = blockptr->header.size & ~SIZEFLAGS;

    if (fullinfo) dump_block((header *)blockptr,type);

    blockptr->header.size |= MARKER;          /* for checkagelinks */

    if (bx+blocklen > fontcache_max) {
      printf("Map block extends outside cache: %s%s[%d] = 0x%X (0x%X)\n", fontname, blockname(type), blockno, bx, blocklen);
    }

    /*if (blocklen > sizeof(mapblock)) {
      printf("Map block 0x%X size = %d (should be %d)\n",bx,blocklen,sizeof(mapblock));
    }*/

    anchor = blockptr->header.anchor;
    if (anchor < fontcache_min2 || anchor >= fontcache_max || fileaddress(anchor) != bxp) {
      printf("%s%s[%d] = 0x%X (anchor = 0x%X, should be 0x%X)\n", fontname, blockname(type), blockno,
                                                                        bx, anchor, fileoffset(bxp));
    }

    size_array[type] += blocklen;
    count_array[type]++;

    return(checkmap(fontaddr, blockno, &blockptr->link, type));
  }

  return(NULL);
}
#endif


_kernel_oserror * checkblock(int fontaddr, int blockno, addr *bxp, blocktype type)
{
  addr bx = *bxp;

  if (bx < fontcache_min || bx >= fontcache_max) {
    if (bx != 0 && bx != 1) {
      printf("Font at 0x%X: %s[%d] = 0x%X\n", fontaddr, blockname(type), blockno, bx);
    }
  } else {
    int blocklen, i;
    chunk *blockptr;
    addr anchor;

    blockptr = fileaddress(bx);
    blocklen = blockptr->header.size & ~SIZEFLAGS;

    if (fullinfo) dump_block((header *)blockptr,type);

    blockptr->header.size |= MARKER;          /* for checkagelinks */

    if (bx+blocklen > fontcache_max) {
      printf("Font at 0x%X: %s[%d] = 0x%X (0x%X)\n", fontaddr, blockname(type), blockno, bx, blocklen);
    }

    anchor = blockptr->header.anchor;
    if (anchor < fontcache_min || anchor >= fontcache_max || fileaddress(anchor) != bxp) {
      printf("Font at 0x%X: %s[%d] = 0x%X (anchor = 0x%X)\n", fontaddr,
                                                                       blockname(type), blockno,
                                                                       bx, anchor);
    }

    size_array[type] += blocklen;
    count_array[type]++;

    if (blockptr->header.flags & PP_SPLITCHUNK) {
      int limit = (blocklen-sizeof(chunkheader)) / sizeof(addr);
      for (i=0; i < limit; i++) {
        if (checkaddr(fontaddr, &blockptr->index[i], type)) break;
      }
    } else {
      int min,max,ptr;
      int indexsize = 32;

      if (blockptr->header.flags & PP_4XPOSNS) indexsize *= 4;
      if (blockptr->header.flags & PP_4YPOSNS) indexsize *= 4;

      min = 4*indexsize-1;
      max = blocklen - ((char *)blockptr->index - (char *)blockptr);
      for (i=0;i<indexsize;i++) {
        ptr = blockptr->index[i];
        if (ptr) {
          if (ptr <= min || ptr >= max) {
            printf("Unsplit chunk at 0x%X: index[%d] = 0x%X (anchor = 0x%X)\n", bx,i,ptr,anchor);
          } else {
            min = ptr;
          }
        }
      }
    }
  }

  return(NULL);
}

#if Version>=341
_kernel_oserror * checkpixo(int fontaddr, addr *bxp, blocktype type, blocktype subtype, int PixOffStart, int nchunks)
{
  addr bx = *bxp;

  if (bx < fontcache_min || bx >= fontcache_max) {
    if (bx != 0) {
      printf("Block outside cache: Font at 0x%X: %s = 0x%X\n", fontaddr, blockname(type), bx);
    }
  } else {
    int blocklen, correctsize;
    pixoblock *blockptr;
    addr anchor;
    int i;

    blockptr = fileaddress(bx);
    blocklen = blockptr->header.size & ~SIZEFLAGS;

    if (fullinfo) dump_block((header *)blockptr,type);

    blockptr->header.size |= MARKER;          /* for checkagelinks */

    if (bx+blocklen > fontcache_max) {
      printf("Block extends outside cache: Font at 0x%X: %s = 0x%X (0x%X)\n", fontaddr, blockname(type), bx, blocklen);
    }

    correctsize = sizeof(header) + nchunks * sizeof(addr);
    if (PixOffStart) correctsize += (nchunks+1) * sizeof(int);

    if (blocklen > correctsize) {
      printf("Font at 0x%X: %s 0x%X size = %d (should be %d)\n", fontaddr, blockname(type), bx,blocklen,correctsize);
    }

    anchor = blockptr->header.anchor;
    if (anchor < fontcache_min2 || anchor >= fontcache_max || fileaddress(anchor) != bxp) {
      printf("Bad anchor: Font at 0x%X: %s = 0x%X (anchor = 0x%X)\n", fontaddr, blockname(type), bx, anchor);
    }

    size_array[type] += blocklen;
    count_array[type]++;

    for (i=0; i<nchunks; i++) {
      checkblock(fontaddr, i, &blockptr->pointers[i], subtype);
    }

  }

  return(NULL);
}
#endif


void *fileaddress(addr address)
{
  if (address <= 1) return((void *)0x40000000);

  if (address-FONTCACHE >= filesize) {
    printf("**** Illegal pointer in font cache: 0x%X ****\n",address);
    exit(1);
  }

  return((void *)(megablock + address-FONTCACHE));
}


addr fileoffset(void * pointer)
{
  if (pointer==NULL) return(0);
  if (pointer==(void *)1) return(1);

  return(((char *)pointer)-megablock + FONTCACHE);
}


_kernel_oserror * make_oserror(int errnum, const char *format, ...)
{
  static _kernel_oserror errblk;
  va_list args;

  va_start(args, format);
  errblk.errnum = errnum;
  vsprintf(errblk.errmess, format, args);
  va_end(args);

  return(&errblk);
}


/*
 * ---------------------------------------------------------------------------------
 */


char *readstr(char *string)
{
  static char result[64];
  char *i;
  char *j;

  for (i=string, j=result; *i>=32; i++) *j++=*i; *j=0;

  return(result);
}


void printmatrix(char * title, matrix *mat)
{
  printf("  %s:  %8X %8X %8X %8X %8X %8X (%d)\n",title,
                 mat->XX,mat->YX,mat->XY,mat->YY,mat->X,mat->Y,mat->coordshift);
}


void printumatrix(char * title, umatrix *mat)
{
  printf("  %s:  %8X %8X %8X %8X %8X %8X\n",title,mat->XX,mat->YX,mat->XY,mat->YY,mat->X,mat->Y);
}


void printbbox(char *title, box *b)
{
  printf("  %s:  %d %d %d %d\n", title, b->x0, b->y0, b->x1, b->y1);
}


void printfdata(char *title, fdata * f)
{
  static char buffer[64];

  printf("  %s file data = ", title);
  if (f->leafname[0] < 32) {
    switch (f->leafname[0]) {
      case 0: printf("<none>\n"); break;
      case 1: printf("<undecided>\n"); break;
      case 2: printf("<use 4-bpp master>\n"); break;
      case 3: printf("<use master outlines direct>\n"); break;
      case 4: printf("<make bitmaps (no subpixel)>\n"); break;
      case 5: printf("<make bitmaps (x-subpixel)>\n"); break;
      case 6: printf("<make bitmaps (y-subpixel)>\n"); break;
      case 7: printf("<make bitmaps (x&y-subpixel)>\n"); break;
      default: printf("<unknown (%d)>\n", f->leafname[0]); break;
    }
  } else {
    printf("'%s'",readstr(f->leafname));
    printf("    flags = &%X addr = &%X\n", f->flags, f->address);
  }
  if (f->leafname[0] >= 2) {
#if Version >= 288
    printf("    nchunks = %d, nscaffolds = %d\n",f->nchunks,f->nscaffolds);
#endif
    sprintf(buffer, "%s bbox", title);
    printbbox(buffer, &f->box);
#if Version >= 341
    printf("  PixOffStart = &%X\n", f->PixOffStart);
#else
    if (f->leafname[0] >= 32) {
      printf("  PixOffsets = &%X &%X &%X &%X &%X &%X &%X &%X &%X\n",
              f->PixOffsets[0], f->PixOffsets[1], f->PixOffsets[2], f->PixOffsets[3],
              f->PixOffsets[4], f->PixOffsets[5], f->PixOffsets[6], f->PixOffsets[7],
              f->PixOffsets[8]);
    }
#endif
  }
}


void dump_fontheader(fontheader * font)
{
  printf("  '%s' %d by %d\n", readstr(font->name), font->xsize, font->ysize);
#if Version >= 288
  printf("  nchars=%d metflags=&%X\n", font->nchars, font->metflags);
  printf("  masterfont=%d masterflag=%d skelthresh=%d x/ymag = %d,%d\n",
            font->masterfont, font->masterflag, font->skelthresh, font->xmag, font->ymag);
  printf("  encoding = '%s' base encoding %d\n",font->encoding,font->base);
#else
  printf("  nchars=%d masterfont=%d masterflag=%d skelthresh=%d x/ymag = %d,%d\n",
            font->nchars, font->masterfont, font->masterflag, font->skelthresh, font->xmag, font->ymag);
#endif
#if Version >= 301
  printf("  thresholds=%d,%d,%d,%d,%d\n", font->thresholds.threshold1, font->thresholds.threshold2, font->thresholds.threshold3, font->thresholds.threshold4, font->thresholds.threshold5);
#endif
  if (font->masterflag != 2) {
    printf("  x/yscale=(%d,%d) x/yres=(%d,%d)\n", font->xscale, font->yscale, font->xres, font->yres);
  }
  printf("  filebbox=(%d,%d,%d,%d)\n", font->filebbox[0], font->filebbox[1], font->filebbox[2], font->filebbox[3]);
  if (font->masterflag == 2) {
    printf("  MetOffset,Size = (&%X,&%X), PixOffset,Size = (&%X,&%X), ScaffoldSize = &%X\n",
                   font->MetOffset, font->MetSize, font->PixOffset, font->PixSize, font->scaffoldsize);
    printf("  Designsize = %d\n", font->designsize);
    printf("  metaddress = &%X\n",font->metaddress);
    printfdata("4-bpp master",&font->file4);
    printfdata("outlines    ",&font->file1);
  } else {
    printmatrix("rendermatrix",&font->rendermatrix);
    printmatrix("bboxmatrix  ",&font->bboxmatrix);
    printfdata("4-bpp",&font->file4);
    printfdata("1-bpp",&font->file1);
  }
}


void dump_matrixblock(matrixblock *mtb)
{
  printumatrix("  paintmatrix  ",&mtb->unscaled);
  printmatrix ("  metricsmatrix",&mtb->metricsmatrix);
}


void dump_chunk(chunk *chnk)
{
  printf("  flags = &%8X\n",chnk->header.flags);
}


void dump_transform(transform * trans)
{
  printf("  leafname4 = %d leafname1 = %d flags = &%X\n",
               trans->leafname4, trans->leafname1, trans->flags);
  printumatrix("  paintmatrix  ",&trans->paintmatrix);
  printmatrix ("  metricsmatrix",&trans->metricsmatrix);
  printmatrix ("  rendermatrix ",&trans->rendermatrix);
  printmatrix ("  bboxmatrix   ",&trans->bboxmatrix);
  printbbox("bbox4",&trans->bbox4);
  printbbox("bbox1",&trans->bbox1);
  printf("  x/yscale = (%d,%d)\n",trans->xscale,trans->yscale);
}


void dump_map(mapblock * map)
{
  int i;
  printf("  flags = 0x%X, base = %d, alphabet = %d\n", map->flags, map->base, map->alphabet);
  printf("  encoding name = '%s'\n", map->encoding);
  if ((map->flags & mapf_DIRECT) == 0) {
#if Version < 341
    for (i=0; i<256; i+=16) {
      printf("    %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n",
             map->lookup[i+0], map->lookup[i+1], map->lookup[i+2], map->lookup[i+3],
             map->lookup[i+4], map->lookup[i+5], map->lookup[i+6], map->lookup[i+7],
             map->lookup[i+8], map->lookup[i+9], map->lookup[i+10], map->lookup[i+11],
             map->lookup[i+12], map->lookup[i+13], map->lookup[i+14], map->lookup[i+15]);
    }
#else
    unsigned short *table = (unsigned short *) (map->entry+map->entries);

    printf("  ranges = %d\n", map->entries);
    for (i=0; i<map->entries; i++) {
      printf("    [&%08X..&%08X] -> ", map->entry[i].min, map->entry[i].min + map->entry[i].n - 1);
      if (map->entry[i].table) {
        int j;
        unsigned short *t;
        t = table + map->entry[i].offset;
        for (j=0; j<map->entry[i].n; j++) {
          printf("&%04X ", (map->entry[i].min + j + t[j]) & 0xFFFF);
          if ((j & 7) == 7 && j<map->entry[i].n-1)
          printf("\n                              ");
        }
        printf("\n");
      }
      else {
        printf("[&%04X..&%04X]\n", (map->entry[i].min + map->entry[i].offset) & 0xFFFF,
                                   (map->entry[i].min + map->entry[i].n - 1 + map->entry[i].offset) & 0xFFFF);
      }
    }
#endif
  }
}

#if Version >= 341
void dump_pixo(pixoblock *block)
{
  int i;
  const int *p, *end;

  end = (const int *)((char *) block + (block->header.size & ~SIZEFLAGS));

  printf("  ");
  for (i = 0, p = (int *) block->pointers; p < end; p++, i++) {
    printf("&%X ", *p);
    if ((i & 7) == 7 && p < end - 1)
      printf("\n  ");
  }

  printf("\n");
}
#endif

void dump_pathname(pathname *block)
{
  int i;
  printf("  '%s'\n", block->leafptrandname+1);
  for (i=-3; i < block->leafptrandname[0]; i++)
    putchar(' ');
  printf("^\n");
}

void dump_block(header *block, blocktype type)
{
  printf("%s at &%X: %s\n",blockname(type),fileoffset(block),block->size & LOCKED ? "(locked)" : "");
  switch (type) {
    case blk_FontHeader: dump_fontheader((fontheader *)block); break;
    case blk_FontMatrix: dump_matrixblock((matrixblock *)block); break;
    case blk_4bpp:
    case blk_1bpp:
    case blk_Outlines:   dump_chunk((chunk *)block); break;
    case blk_Transform:  dump_transform((transform *)block); break;
    case blk_Map:        dump_map((mapblock *)block); break;
#if Version >= 341
    case blk_PixoPtr1:
    case blk_PixoPtr4:   dump_pixo((pixoblock *)block); break;
#endif
    case blk_PathName:
    case blk_PathName2:  dump_pathname((pathname *)block); break;
    case blk_MetricsPtr:
    case blk_Kerns:
    case blk_Charlist:
    case blk_Scaffold: break;
  }

  printf("\n");
}


