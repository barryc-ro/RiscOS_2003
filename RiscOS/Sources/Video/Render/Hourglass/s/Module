; > &.Hourglass.Hourglass

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:Hourglass
        GET     Hdr:MsgTrans
;        GET     Hdr:EcoMacros
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors

        GET     Time+Date

bignum          * &3FFFFFFF                             ; A large number to put into PercentageDepth

; The constants defining the hourglass shape and position

HgX             * 4
HgY             * 2
HgSize          * 16
ActiveX         * HgX + (HgSize :SHR: 1)
ActiveY         * HgY + (HgSize :SHR: 1)

; The constants defining the Hourglass time behaviour

UpdateDelay     * 15
StartupDelay    * 33

; These define the things round the hourglass
; nb. keep on byte boundries !

PixelsPerByte   * 4
BytesPerLine    * 6
HeightInPixels  * 30
DataSize        * (BytesPerLine * HeightInPixels + 3):AND: :NOT: 3

PercX           * 0
PercY           * 21
CharWidth       * 8
CharHeight      * 9

DefaultColour1  * &00FFFF00               ; Cyan
DefaultColour3  * &00FF0000               ; Blue

WaitForVSync    * 19

SetPointer      * 106
NoPointer       * 0
PointerOSWord   * 21
WritePalette    * 12

MySWIChunkBase  * Module_SWISystemBase + HourglassSWI * Module_SWIChunkSize
 ASSERT MySWIChunkBase = Hourglass_On

; Workspace

        ^ 0, wp
HourglassData           #       DataSize                ; My Hourglass data is in here
HourglassDataEnd        #       0

OldColour1              #       4
OldColour3              #       4
NewColours              #       0
NewColour1              #       4
NewColour3              #       4
HourglassTimer          #       4
HourglassDepth          #       4
PercentageDepth         #       4
OldPercentage           #       1
NewPercentage           #       1
OldLEDs                 #       1
NewLEDs                 #       1

OldPointer              #       1                       ; Pointer no. the user was using
HourglassState          #       1                       ; State of sand (0..5)

        AlignSpace      4, 2                            ; so that the data ptr in the
                                                        ; OS_Word block is word-aligned

OSWord15Block           #       0                       ; Block for defining pointer shape
Block_ReasonCode        #       1
Block_PointerNumber     #       1
Block_Width             #       1
Block_Height            #       1
Block_ActiveX           #       1
Block_ActiveY           #       1
Block_DataPtr           #       4
        ASSERT  (3 :AND: :INDEX: Block_DataPtr)=0

PointerDirty            #       1                       ; 0 => shape set up etc
                                                        ; 1 => shape not set up etc
UpdateSemaphore         #       1                       ; 0 => not in update code
                                                        ; non0 => in update code

        AlignSpace

RAMSpaceRequired       * :INDEX: @

ModuleStart
        DCD     0                                       ; StartCode
        DCD     InitialisationCode-ModuleStart
        DCD     FinalisationCode-ModuleStart
        DCD     ServiceCall-ModuleStart
        DCD     TitleString-ModuleStart
        DCD     HelpString-ModuleStart
        DCD     0                                       ; HelpAndCommandKeywordTable
        DCD     MySWIChunkBase
        DCD     SWIHandlerCode-ModuleStart
        DCD     SWIDecodingTable-ModuleStart
        DCD     0                                       ; SWIDecodingCode


        [       OldOs
UnknownSWIErrorMsg
        DCD     ErrorNumber_ModuleBadSWI     
        DCB     "SWI value out of range for module "
        ]
SWIDecodingTable
TitleString
        DCB     "Hourglass", 0  ; Share
        DCB     "On", 0
        DCB     "Off", 0
        DCB     "Smash", 0
        DCB     "Start", 0
        DCB     "Percentage", 0
        DCB     "LEDs", 0
        DCB     "Colours", 0
        DCB     0

                GBLS    OsString
        [       OldOs
OsString        SETS    " (2.00)"
        |
OsString        SETS    ""
        ]

HelpString
        DCB     "Hourglass", 9, "2.", CurrentVersion
        [       ReleaseVersion
        !       0, "Assembling Hourglass 2.$CurrentVersion$OsString"
        |
        DCB     "/", CurrentIteration
        !       0, "Assembling Hourglass 2.$CurrentVersion/$CurrentIteration$OsString"
        ]
        DCB     " (", CurrentDate, ")"
        [       :LNOT: ReleaseVersion
        DCB     " assembled  at ", CurrentTime, "."
        ]
        DCB     "$OsString", 0
        ALIGN

InitialisationCode ROUT
        Push    "r0-r2, lr"                             ; Push the same registers as Service
        LDR     r2, [ r12 ]                             ; Is our workspace here already?
        TEQ     r2, #0                                  ; If not this will be zero
        BNE     SoftInitialisation                      ; Don't claim if we already have workspace
        MOV     r0, #ModHandReason_Claim                ; Claim some workspace
        MOV     r3, #RAMSpaceRequired                   ; We need this much free space
        SWI     XOS_Module                              ; Claim RMA
        BVS     ErrorExitInit
        STR     r2, [ r12 ]                             ; Update the private word
SoftInitialisation
        MOV     wp, r2                                  ; Now point to my workspace
InitialiseWorkspace
        MOV     r14, #bignum
        STR     r14, PercentageDepth
        MOV     r14, #0
        STR     r14, HourglassDepth
        STRB    r14, UpdateSemaphore
        ADR     r0, OSWord15BlockData                   ; Set up OSWord block in my workspace
        LDMIA   r0, { r1, r2 }
        ADR     r0, OSWord15Block-2
        STMIA   r0, { r1, r2 }
        ADR     r0, HourglassData
        STR     r0, Block_DataPtr
        ADR     r0, DefaultColours
        LDMIA   r0, { r1, r2 }
        ADR     r0, NewColours
        STMIA   r0, { r1, r2 }
ErrorExitInit
        STRVS   r0, [ sp, #0 ]
ExitInit
        Pull    "r0-r2, pc"

OSWord15BlockData
        DCB     0                                       ; two dummy bytes so that the
        DCB     0                                       ; data pointer is on a word boundary
        DCB     0                                       ; Reason code: program pointer shape
        DCB     3                                       ; Initial pointer number
                                                        ; (this toggles between 3 and 4)
        DCB     BytesPerLine
        DCB     HeightInPixels
        DCB     ActiveX
        DCB     ActiveY
        ALIGN

DefaultColours
        DCD     DefaultColour1
        DCD     DefaultColour3

FinalisationCode ROUT
        LDR     wp, [ r12 ]

        LDR     r0, HourglassDepth                      ; any hourglasses around ?
        CMP     r0, #0
        MOVEQ   pc, lr

        Push    lr
        MOV     r0, #TickerV                            ; get off TickerV
        ADR     r1, MyTickRoutine
        MOV     r2, wp
        SWI     XOS_Release

        MOV     r0, #SetPointer                         ; restore old pointer
        LDRB    r1, OldPointer
        SWI     XOS_Byte

        MOV     r0, #WaitForVSync
        SWI     XOS_Byte                                ; reprogram palette only during flyback

        MOV     r0, #1                                  ; logical Colour 1
        LDR     r1, OldColour1
        BL      SetColour

        MOV     r0, #3                                  ; logical Colour 3
        LDR     r1, OldColour3
        BL      SetColour
        Pull    pc

ServiceCall     ROUT
        CMP     r1, #Service_Reset                      ; is it reset ? EQ,CSet if so
        TEQNE   r1, #Service_Error*4,2                  ; or error ? EQ, CClear if so
        MOVNE   pc, lr

        LDR     wp, [ r12 ]                             ; get my private word
        BCS     DoServiceReset
        B       HourglassSmash                          ; All errors turn off the hourglass

DoServiceReset
        Push    "r0-r2, lr"
        MOV     r0, #253                                ; Now check reset was NOT hard
        MOV     r1, #0                                  ; Read last reset type,
        MOV     r2, #255
        SWI     XOS_Byte                                ; only do reset when it was soft
        BVS     ErrorExitInit
        TEQ     r1, #0                                  ; Was it a soft-reset
        BNE     ExitInit                                ; No, it was hard, so exit
        B       InitialiseWorkspace

SWIHandlerCode  ROUT
        LDR     wp, [ r12 ]
        CMP     r11, #(EndOfJumpTable - SWIJumpTable)/4
        ADDCC   pc, pc, r11, LSL #2
        B       UnknownSWIError
SWIJumpTable
        B       HourglassOn
        B       HourglassOff
        B       HourglassSmash
        B       HourglassStart
        B       HourglassPercentage
        B       HourglassLEDs
        B       HourglassColours
EndOfJumpTable

 ASSERT HourglassSWICheckValue-Hourglass_On=(EndOfJumpTable - SWIJumpTable)/4

UnknownSWIError
        [       OldOs
        ADR     r0, UnknownSWIErrorMsg
        ORRS    pc, lr, #V_bit
        |       ; OldOs
        Push    "r1-r7, lr"
        ADR     r0, ErrorBlock_ModuleBadSWI
        MOV     r1, #0                                  ; No message block
        MOV     r2, #0                                  ; No buffer
        ADR     r4, TitleString
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "r1-r7, pc"

        MakeErrorBlock     ModuleBadSWI
        ]       ; OldOs

; *****************************************************************************
;
;       HourglassOn - Turn on after default startup delay
;
; in:   -
;
; out:  -
;

HourglassOn ROUT
        Push    "r0, lr"
        MOV     r0, #StartupDelay
        BL      HourglassStart
        STRVS   r0, [ sp ]
        Pull    "r0, pc"

; *****************************************************************************
;
;       HourglassStart - Turn on after specified delay
;       If already on, just increment depth count
;
; in:   R0 = delay in centiseconds (0 => never update hourglass)
;
; out:  -
;

HourglassStart ROUT
        LDR     r11, HourglassDepth
        ADD     r11, r11, #1                            ; update my depth count
        STR     r11, HourglassDepth
        CMP     r11, #1                                 ; on 1st entry, really do something
        MOVHI   pc, lr

        Push    "r0-r2, lr"
        STR     r0, HourglassTimer                      ; the startup delay

        MOV     r0, #1
        STRB    r0, PointerDirty                        ; indicate shape needs setting up

        MOV     r0, #0
        STRB    r0, OldLEDs
        STRB    r0, NewLEDs

        MOV     r0, #TickerV                            ; get on TickerV
        ADR     r1, MyTickRoutine                       ; to do things
        MOV     r2, wp
        SWI     XOS_Claim
        STRVS   r0, [ sp ]
        Pull    "r0-r2, pc"

; *****************************************************************************
;
;       HourglassOff - If at outer level, turn off hourglass, else dec depth
;
; in:   -
;
; out:  -
;

HourglassOff ROUT
        Push    "r0-r3, lr"

        LDR     r10, HourglassDepth
        LDR     r14, PercentageDepth                    ; turn off percentage if we're at the controlling depth now
        TEQ     r10, r14
        MOVEQ   r14, #-1
        STREQB  r14, NewPercentage
        MOVEQ   r14, #bignum                            ; also reset PercentageDepth so we can turn it on again next time
        STREQ   r14, PercentageDepth
        SUBS    r10, r10, #1                            ; update my depth count
        STRCS   r10, HourglassDepth                     ; store back if wasn't already zero
        Pull    "r0-r3, pc", NE                         ; if not bottom, leave alone

        MOV     r0, #TickerV                            ; get off TickerV
        ADR     r1, MyTickRoutine
        MOV     r2, wp
        SWI     XOS_Release

        LDRB    r0, PointerDirty                        ; have we set up shape yet ?
        TEQ     r0, #0
        Pull    "r0-r3, pc",NE, ^                       ; no, then exit

        MOV     r0, #SetPointer                         ; restore old pointer
        LDRB    r1, OldPointer
        SWI     XOS_Byte

        LDR     r10, OldColour1
        LDR     r11, OldColour3
        LDR     r3, NewColour3
        TEQ     r11, r3                                 ; Are we changing colour 3?
        LDR     r3, NewColour1
        TEQEQ   r10, r3                                 ; If not are we changing colour 1
        MOVNE   r0, #WaitForVSync                       ; wait until VSync
        SWINE   XOS_Byte                                ; if called R1, R2 trashed

        MOV     r0, #1                                  ; logical Colour 1
        MOV     r1, r10
        TEQ     r1, r3                                  ; NewColour1
        BLNE    SetColour

        MOV     r0, #3                                  ; logical Colour 3
        MOV     r1, r11
        LDR     r10, NewColour3
        TEQ     r1, r10
        BLNE    SetColour

        Pull    "r0-r3, pc",, ^

; *****************************************************************************
;
;       HourglassSmash - Unconditionally turn off hourglass
;
; in:   -
;
; out:  -
;

HourglassSmash ROUT
        Push    "r0, r1, lr"
        ADR     r14, DefaultColours
        LDMIA   r14, { r0, r1 }
        ADR     r14, NewColours
        STMIA   r14, { r0, r1 }
        LDR     r0, HourglassDepth
        CMP     r0, #0                                  ; if at top, ignore

        MOVNE   r0, #1                                  ; depth count becomes one
        STRNE   r0, HourglassDepth
        MOVNE   r0, #bignum
        STRNE   r0, PercentageDepth
        SWINE   XHourglass_Off                          ; to force turn-off
        Pull    "r0, r1, pc"

; *****************************************************************************
;
;       HourglassPercentage - Set percentage figures
;
; in:   R0b = percentage to display, outside 0-99 to turn figures off
;
; out:  -
;

HourglassPercentage ROUT
        Push    "r1, lr"

        LDR     r14, HourglassDepth
        LDR     r1, PercentageDepth
        CMP     r14, r1                                 ; Are we at or below the controlling depth?
        STRLT   r14, PercentageDepth                    ; if so, we can set the percentage
        STRLEB  r0, NewPercentage

        LDRB    r14, NewPercentage                      ; if percentages were turned off,
        CMP     r14, #100                               ; re-enable percentage changes at lower levels
        MOVHS   r14, #bignum
        STRHS   r14, PercentageDepth

        Pull    "r1, pc"

; *****************************************************************************
;
;       HourglassLEDs - Set LED states (currently 2 of them)
;
; in:   R0 = EOR mask
;       R1 = AND mask
;
; out:  R0 = old LED state
;

HourglassLEDs ROUT
        LDRB    r10, NewLEDs                            ; read previous values
        AND     r11, r1, r10
        EOR     r0, r0, r11
        STRB    r0, NewLEDs                             ; store new value
        MOV     r0, r10                                 ; return old value
        MOV     pc, lr

; *****************************************************************************
;
;       HourglassColours - Set the colours used for the hourglass
;
; in:   R0 = New colour to use as colour 1 (-1 for no change)
;       R1 = New colour to use as colour 3 (-1 for no change)
;
; out:  R0 = Old colour that was being used as colour 1
;       R1 = Old colour that was being used as colour 3
;

HourglassColours
        Push    "r0, r1, r14"
        LDR     r14, NewColour1                         ; Save the old value of Colour1
        STR     r14, [ sp, #0 ]                         ; Put old value in exit stack frame
        LDR     r14, NewColour3                         ; Save the old value of Colour3
        STR     r14, [ sp, #4 ]                         ; Put old value in exit stack frame
        CMP     r0, #-1                                 ; Are we changing this colour(1)?
        STRNE   r0, NewColour1                          ; Put down the new value
        CMP     r1, #-1                                 ; Are we changing this colour(3)?
        STRNE   r1, NewColour3                          ; Put down the new value
        Pull    "r0, r1, pc",,^                         ; Return with V clear

; *****************************************************************************
;
;       MyTickRoutine - TickerV routine
;

MyTickRoutine ROUT
        Push    lr
        LDRB    r14, UpdateSemaphore
        TEQ     r14, #0                                 ; Are we already doing this?
        Pull    pc, NE                                  ; Yes, so stay out
        INC     r14
        STRB    r14, UpdateSemaphore
        LDR     r14, HourglassTimer
        SUBS    r14, r14, #1                            ; decrement timer
        MOVEQ   r14, #UpdateDelay                       ; if now zero, reset timer
        STRCS   r14, HourglassTimer                     ; if wasn't zero before, store back
        BNE     ExitTickRoutine                         ; exit if not zero now
        Push    "r0-r6"
        MOV     r6, pc
        TEQP    pc, #3                                  ; must be SVC mode here, Enables Ints
        NOP
        Push    r14                                     ; save SVC r14
        LDRB    r0, PointerDirty                        ; if pointer shape needs setting up
        TEQ     r0, #0
        BLNE    SetupPointer                            ; then do it
        BL      FillHourglass                           ; some sand falls
        BL      SetupPercentage
        BL      SetupLEDs
        BL      ProgramPointer                          ; and show the world
        Pull    r14                                     ; restore SVC r14
        TEQP    r6, #0                                  ; restore the mode
        NOP
        Pull    "r0-r6"
ExitTickRoutine
        MOV     r14, #0
        STRB    r14, UpdateSemaphore
        Pull    pc

; *****************************************************************************
;
;       SetupPointer - Program initial shape of hourglass etc
;
; in:   -
;
; out:  R0-R5 may be corrupted
;

SetupPointer ROUT
        Push    lr

        MOV     r0, #SetPointer                         ; set the pointer
        MOV     r1, #NoPointer
        SWI     XOS_Byte
        STRVCB  r1, OldPointer                          ; so we can read the old one
        SWIVC   XOS_Byte                                ; switch back - we only examine it

        MOV     r0, #1
        MOV     r1, #25
        SWI     XOS_ReadPalette                         ; examine what the cursor colour was
        MOVVC   r2, r2, LSR #8
        STRVC   r2, OldColour1

        MOV     r0, #3
        MOV     r1, #25
        SWI     XOS_ReadPalette                         ; examine what the cursor colour was
        MOVVC   r2, r2, LSR #8
        STRVC   r2, OldColour3

        MOV     r0, #-1
        STRB    r0, OldPercentage
        STRB    r0, NewPercentage

        ADR     r0, HourglassData
        ADR     r1, HourglassShape
        ADR     r2, HourglassShapeEnd
10
        LDR     r3, [r1], #4
        STR     r3, [r0], #4
        TEQ     r1, r2
        BNE     %BT10

        ADR     r2, HourglassDataEnd
        MOV     r3, #0
20
        STR     r3, [r0], #4
        TEQ     r0, r2
        BNE     %BT20

        STRB    r3, HourglassState                      ; zero hourglass state
        STRB    r3, PointerDirty                        ; pointer now clean

        Pull    pc

; *****************************************************************************
;
;       FillHourglass - Go to next state of hourglass
;
; in:   -
;
; out:  R0-R3 corrupted
;

FillHourglass ROUT
        LDRB    r0, HourglassState
        ADD     r0, r0, #1                              ; go to next state
        TEQ     r0, #6                                  ; keep in range 0..5
        MOVEQ   r0, #0
        STRB    r0, HourglassState

        ADR     r1, DiffOffsetTable
        LDR     r0, [r1, r0, LSL #2]                    ; load offset to diff table
        ADD     r0, r0, r1                              ; convert to address
        ADR     r3, HourglassData
        LDR     r1, [r0], #4
10
        MOV     r2, r1, LSR #16
        STRB    r2, [r3, r2, LSR #8]
        EOR     r2, r1, r2, LSL #16
        STRB    r2, [r3, r2, LSR #8]

        LDR     r1, [r0], #4
        TEQ     r1, #0
        BNE     %BT10
        MOV     pc, lr

; *****************************************************************************
;
;       SetupLEDs - Set up LED data in hourglass shape
;
; in:   -
;
; out:  R0-R3 corrupted
;

        ASSERT HgSize = 16
        ASSERT HgY > 0
        ASSERT (HgX :MOD: PixelsPerByte) = 0

SetupLEDs ROUT
        LDRB    r0, OldLEDs
        LDRB    r1, NewLEDs
        TEQ     r0, r1
        MOVEQ   pc, r14

        STRB    r1, OldLEDs
        ADR     r2, HourglassData+(HgX/PixelsPerByte)+((HgY-1)*BytesPerLine)
        TST     r1, #1
        MOVNE   r3, #&FF
        MOVEQ   r3, #&55
        STRB    r3, [r2, #0]
        STRB    r3, [r2, #1]
        STRB    r3, [r2, #2]
        STRB    r3, [r2, #3]

        ADD     r2, r2, #(HgSize+1)*BytesPerLine
        TST     r1, #2
        MOVNE   r3, #&FF
        MOVEQ   r3, #&55
        STRB    r3, [r2, #0]
        STRB    r3, [r2, #1]
        STRB    r3, [r2, #2]
        STRB    r3, [r2, #3]

        MOV     pc, lr

; *****************************************************************************
;
;       SetupPercentage - Set up percentage digits in hourglass shape
;
; in:   -
;
; out:  R0-R3 corrupted
;

SetupPercentage ROUT
        LDRB    r1, OldPercentage
        LDRB    r2, NewPercentage
        TEQ     r1, r2
        MOVEQ   pc, r14

        Push    r14
        STRB    r2, OldPercentage
        CMP     r2, #100
        BHS     %f1                                     ; turn it off
        MOV     r1, #10
        DivRem  r0, r2, r1, r14
        ADR     r3, ChDefNumbers
 ASSERT  CharHeight = 9
        ADD     r1, r0, r0, LSL #3  ; * 9
        ADD     r1, r3, r1, LSL #1
        ADR     r0, HourglassData+(PercX/PixelsPerByte)+(PercY * BytesPerLine)
        BL      SetupChar
        ADD     r1, r2, r2, LSL #3  ; * 9
        ADD     r1, r3, r1, LSL #1
        ADD     r0, r0, #8 / PixelsPerByte
        BL      SetupChar
        ADR     r1, ChDefPercent
        ADD     r0, r0, #8 / PixelsPerByte
        BL      SetupChar
        Pull    pc
1
        ADR     r0, HourglassData+(PercX/PixelsPerByte)+(PercY * BytesPerLine)
        ADR     r1, ChDefSpace
        BL      SetupChar
        ADD     r0, r0, #8 / PixelsPerByte
        BL      SetupChar
        ADD     r0, r0, #8 / PixelsPerByte
        BL      SetupChar
        Pull    pc

; *****************************************************************************
;
;       SetupChar - Copy character definition into hourglass shape
;
; in:   R0 = address of top left of character in hourglass
;       R1 = address of first byte of character definition
;

SetupChar ROUT
        Push    "r0-r2, lr"
        MOV     r2, #9
SetupCharLoop
        LDRB    r14, [r1], #1
        STRB    r14, [r0], #1
        LDRB    r14, [r1], #1
        STRB    r14, [r0], #BytesPerLine-1
        SUBS    r2, r2, #1
        BNE     SetupCharLoop
        Pull    "r0-r2, pc"

; *****************************************************************************
;
;       ProgramPointer - Call OS_Word to define pointer shape
;

ProgramPointer ROUT
        Push    lr

        LDRB    r0, Block_PointerNumber
        EOR     r0, r0, #(3 :EOR: 4)
        STRB    r0, Block_PointerNumber

        MOV     r0, #PointerOSWord
        ADR     r1, OSWord15Block
        SWI     XOS_Word                                ; reprogram our pointer

        MOV     r0, #1                                  ; logical Colour 1
        LDR     r1, NewColour1
        BL      SetColour

        MOV     r0, #3                                  ; logical Colour 3
        LDR     r1, NewColour3
        BL      SetColour

        MOV     r0, #SetPointer                         ; and switch to it
        LDRB    r1, Block_PointerNumber
        SWI     XOS_Byte

        Pull    pc

        LTORG

; *****************************************************************************
;
;       SetColour - Program a pointer colour
;
; in:   R0 = pointer colour to program (1..3)
;       R1 = value to program &00BBGGRR
;
; out:  -
;

SetColour ROUT
        Push    "r0-r1, lr"
        ORR     r0, r0, r1, LSL #16
        ORR     r0, r0, #&1900
        MOV     r14, r1, LSR #16
        Push    "r0, r14"                               ; Put data in to a stack frame
        MOV     r1, sp                                  ; Address of recently stored data
        MOV     r0, #WritePalette
        SWI     XOS_Word
        ADD     sp, sp, #8                              ; Trash stack frame
        Pull    "r0-r1, pc"

; *****************************************************************************

; Shape data

HourglassShape
        DCB     &00, &55, &55, &55, &55, &00
        DCB     &00, &55, &55, &55, &55, &00
        DCB     &00, &55, &55, &55, &55, &00
        DCB     &00, &FD, &FF, &FF, &7F, &00
        DCB     &00, &74, &55, &55, &1D, &00
        DCB     &00, &D0, &55, &55, &07, &00
        DCB     &00, &40, &57, &D5, &01, &00
        DCB     &00, &00, &5D, &75, &00, &00
        DCB     &00, &00, &74, &1D, &00, &00
        DCB     &00, &00, &D0, &07, &00, &00
        DCB     &00, &00, &D0, &07, &00, &00
        DCB     &00, &00, &F4, &1F, &00, &00
        DCB     &00, &00, &FD, &7F, &00, &00
        DCB     &00, &40, &FF, &FF, &01, &00
        DCB     &00, &D0, &FF, &FF, &07, &00
        DCB     &00, &F4, &FF, &FF, &1F, &00
        DCB     &00, &FD, &FF, &FF, &7F, &00
        DCB     &00, &55, &55, &55, &55, &00
        DCB     &00, &55, &55, &55, &55, &00
        DCB     &00, &55, &55, &55, &55, &00
        ALIGN
HourglassShapeEnd

DiffOffsetTable
        &       ShapeDiffs0-DiffOffsetTable
        &       ShapeDiffs1-DiffOffsetTable
        &       ShapeDiffs2-DiffOffsetTable
        &       ShapeDiffs3-DiffOffsetTable
        &       ShapeDiffs4-DiffOffsetTable
        &       ShapeDiffs5-DiffOffsetTable

ShapeDiffs0
        DCB     &74,&19, &55,&1A, &55,&1B, &1D,&1C, &55,&20, &55,&21
        DCB     &57,&26, &D5,&27, &5D,&2C, &75,&2D, &74,&32, &1D,&33
        DCB     &F4,&44, &1F,&45, &FD,&4A, &7F,&4B, &FF,&50, &FF,&51
        DCB     &FF,&56, &FF,&57, &F4,&5B, &FF,&5C, &FF,&5D, &1F,&5E
        DCB     &00,&00, &00,&00

ShapeDiffs1
        DCB     &F4,&19, &FF,&1A, &FF,&1B, &1F,&1C, &7F,&5C, &FD,&5D
        DCB     &00,&00, &00,&00

ShapeDiffs2
        DCB     &FF,&20, &FF,&21, &7F,&56, &FD,&57, &5F,&5C, &F5,&5D
        DCB     &00,&00, &00,&00

ShapeDiffs3
        DCB     &FF,&26, &FF,&27, &7F,&50, &FD,&51, &5F,&56, &F5,&57
        DCB     &57,&5C, &D5,&5D, &00,&00, &00,&00

ShapeDiffs4
        DCB     &FD,&2C, &7F,&2D, &7D,&4A, &7D,&4B, &5F,&50, &F5,&51
        DCB     &57,&56, &D5,&57, &55,&5C, &55,&5D, &00,&00, &00,&00

ShapeDiffs5
        DCB     &F4,&32, &1F,&33, &74,&44, &1D,&45, &5D,&4A, &75,&4B
        DCB     &57,&50, &D5,&51, &55,&56, &55,&57, &74,&5B, &1D,&5E
        DCB     &00,&00, &00,&00

ChDefSpace
        DCD     0, 0, 0, 0, 0

ChDefNumbers
    = &55,&55,&F5,&5F,&7D,&7D,&7D,&7F,&FD,&7F,&FD,&7D,&7D,&7D,&F5,&5F,&55,&55
    = &55,&55,&D5,&57,&F5,&57,&D5,&57,&D5,&57,&D5,&57,&D5,&57,&FD,&7F,&55,&55
    = &55,&55,&F5,&5F,&7D,&7D,&55,&7D,&55,&5F,&D5,&57,&F5,&55,&FD,&7F,&55,&55
    = &55,&55,&F5,&5F,&7D,&7D,&55,&7D,&D5,&5F,&55,&7D,&7D,&7D,&F5,&5F,&55,&55
    = &55,&55,&55,&5F,&D5,&5F,&F5,&5F,&7D,&5F,&FD,&7F,&55,&5F,&55,&5F,&55,&55
    = &55,&55,&FD,&7F,&7D,&55,&FD,&5F,&55,&7D,&55,&7D,&7D,&7D,&F5,&5F,&55,&55
    = &55,&55,&D5,&5F,&F5,&55,&7D,&55,&FD,&5F,&7D,&7D,&7D,&7D,&F5,&5F,&55,&55
    = &55,&55,&FD,&7F,&55,&7D,&55,&5F,&D5,&57,&F5,&55,&F5,&55,&F5,&55,&55,&55
    = &55,&55,&F5,&5F,&7D,&7D,&7D,&7D,&F5,&5F,&7D,&7D,&7D,&7D,&F5,&5F,&55,&55
    = &55,&55,&F5,&5F,&7D,&7D,&7D,&7D,&F5,&7F,&55,&7D,&55,&5F,&F5,&57,&55,&55

ChDefPercent
    = &55,&55,&7D,&55,&7D,&7D,&55,&5F,&D5,&57,&F5,&55,&7D,&7D,&55,&7D,&55,&55

        ALIGN
        END
