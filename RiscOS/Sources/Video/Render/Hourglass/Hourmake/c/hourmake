/*---------------------------------------------------------------------------*/
/* File:    c.hourmake                                                       */
/* Purpose: Generates the data statements for the hourglass module.          */
/* Author:  Richard Leggett                                                  */
/* History: 17-Apr-98: RML: Created.                                         */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "sprite.h"
#include "defines.h"

static sprite_header *spr_header1;              /* Sprite header of first frame */
static int            corrupt[256];
static int            spr_byte_wastage;
static int            hourglass_frames;        /* Frames in hourglass animation */
static int            hourglass_width = -1;    /* Width of hourglass, in bytes */
static int            hourglass_height = -1;   /* Height of hourglass, in lines */

/*---------------------------------------------------------------------------*
 * error_trap                                                                *
 *---------------------------------------------------------------------------*/

static void error_trap(_kernel_oserror *e)
{
    if (!e) return;
    
    printf("Error: %s\n", e->errmess);
    exit(0);
}


/*---------------------------------------------------------------------------*
 * file_length                                                               *
 *                                                                           *
 * Find the length of a file.                                                *
 *                                                                           *
 * In: filename -> name of file.                                             *
 *                                                                           *
 * Returns: length of file, in bytes.                                        *
 *---------------------------------------------------------------------------*/
 
static int file_length(char *filename)
{
    int type;
    int file_length;
    
    _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4),
                   17,
                   filename,
                   &type,
                   &file_length);

    if (type!=1) file_length = 0;

    return file_length;
}


/*---------------------------------------------------------------------------*
 * hourmake_error                                                            *
 *                                                                           *
 * Generate a _kernel_oserror                                                *
 *                                                                           *
 * In: message -> error text.                                                *
 *                                                                           *
 * Returns: _kernel_oserror containing the error message.                    *
 *---------------------------------------------------------------------------*/

static _kernel_oserror* hourmake_error(char* message)
{
    static _kernel_oserror e;
    
    strcpy(e.errmess, message);
    e.errnum = 24;
    
    return &e;
} 


/*---------------------------------------------------------------------------*
 * initialise_and_load_sprite                                                *
 *                                                                           *
 * Initialise a sprite area and load a spritefile into it.                   *
 *                                                                           *
 * In: spr_area -> sprite area                                               *
 *     filename -> name of spritefile to load.                               *
 *                                                                           *
 * Returns: Error if one occurred, else NULL.                                *
 *---------------------------------------------------------------------------*/
 
static _kernel_oserror* initialise_and_load_sprite(sprite_area *spr_area, char *filename)
{
    _kernel_oserror *e;
    
    spr_area->sproff = sizeof(sprite_area);
    e = _swix(OS_SpriteOp, _INR(0,1), 256+Sprite_Initialise, spr_area);
    if (e) return e;
    e = _swix(OS_SpriteOp, _INR(0,2), 256+Sprite_Load, spr_area, filename);
    
    return e;
}


/*---------------------------------------------------------------------------*
 * return_address_of_sprite                                                  *
 *                                                                           *
 * Return the address of a named sprite.                                     *
 *                                                                           *
 * In: spr_area -> sprite area that sprite is in.                            *
 *     sprname -> name of sprite.                                            *
 *                                                                           *
 * Returns: sprite_header pointer.                                           *
 *---------------------------------------------------------------------------*/
 
static sprite_header* return_address_of_sprite(sprite_area *spr_area, char *sprname)
{
    sprite_header *spr_hdr;

    _swix(OS_SpriteOp, _INR(0,2)|_OUT(2), 256 + Sprite_Select,
                                          spr_area,
                                          sprname,
                                          &spr_hdr);
                                          
    return spr_hdr;
}


/*---------------------------------------------------------------------------*
 * num_to_hex                                                                *
 *                                                                           *
 * Turn a 1 byte number into a hex string.                                   *
 *                                                                           *
 * In: i = number to convert.                                                *
 *                                                                           *
 * Returns: pointer to string.                                               *
 *---------------------------------------------------------------------------*/
 
static char* num_to_hex(int i)
{
    static char s[32];
    
    if (i<16) sprintf(s, "&0%x", i);
    else sprintf(s, "&%x", i);
    
    return s;
}


/*---------------------------------------------------------------------------*
 * check_sprite_header                                                       *
 *                                                                           *
 * Check a sprite header and see if the sprite is in a suitable form for     *
 * conversion to an hourglass.                                               *
 *                                                                           *
 * In: spr_hdr -> sprite header.                                             *
 *                                                                           *
 * Returns: Error if sprite not appropriate, else NULL.                      *
 *---------------------------------------------------------------------------*/
 
static _kernel_oserror* check_sprite_header(sprite_header *spr_hdr)
{
    if (spr_hdr->width != spr_header1->width)
        return hourmake_error("Differing width in sprite header.");

    if (spr_hdr->height != spr_header1->height)
        return hourmake_error("Differing height in sprite header.");

    if (spr_hdr->lbit != spr_header1->lbit)
        return hourmake_error("Differing lbit in sprite header.");

    if (spr_hdr->rbit != spr_header1->rbit)
        return hourmake_error("Differing rbit in sprite header.");

    if (spr_hdr->mode != spr_header1-> mode)
        return hourmake_error("Differing mode in sprite header.");

    return NULL;
}    


/*---------------------------------------------------------------------------*
 * read_palette_and_size                                                     *
 *---------------------------------------------------------------------------*/

static _kernel_oserror* read_palette_and_size(FILE *fp)
{
    int          *palette;
    unsigned int  rgb;
    char          string[64];

    /* Check stuff in sprite header is okay */
    if (spr_header1->width > 2)
        return hourmake_error("Wrong width in sprite header.");

    if (spr_header1->height > 22)
        return hourmake_error("Wrong height in sprite header.");

    if (spr_header1->lbit != 0)
        return hourmake_error("Wrong lbit in sprite header.");

    /* Work out width (in bytes) and height (in lines) */
    hourglass_height = spr_header1->height + 1;
    hourglass_width = spr_header1->width * 4;

    switch (spr_header1->rbit)
    {
        case 7:
          hourglass_width += 1;
          spr_byte_wastage = 3;
          break;
        case 15:
          hourglass_width += 2;
          spr_byte_wastage = 2;
          break;
        case 23:
          hourglass_width += 3;
          spr_byte_wastage = 1;
          break;
        case 31: 
          hourglass_width += 4;
          spr_byte_wastage = 0;
          break;
        default:
          return hourmake_error("Wrong value of rbit in sprite.\n"); break;
    }

    sprintf(string, "BytesPerLine    * %d\n", hourglass_width);
    fputs(string, fp);
    fputc(CR, fp);

    /* Write number of frames variable */
    sprintf(string, "HourglassFrames * %d\n", hourglass_frames);
    fputs(string, fp);
    fputc(CR, fp);
        
    /* Deal with palette */    
    palette = (int*) ((char*)spr_header1 + 44);

    rgb = palette[1*2] & 0xFFFFFF00;
    sprintf(string, "DefaultColour1  * &%x\n", rgb>>8);
    fputs(string, fp);

    rgb = palette[2*2] & 0xFFFFFF00;
    sprintf(string, "DefaultColour2  * &%x\n", rgb>>8);
    fputs(string, fp);

    rgb = palette[3*2] & 0xFFFFFF00;
    sprintf(string, "DefaultColour3  * &%x\n", rgb>>8);
    fputs(string, fp);

    fputc(CR, fp);
    fputc(CR, fp);
    fputs(STARS, fp);
    fputs("; Hourglass data\n\n", fp);

    return NULL;
}


/*---------------------------------------------------------------------------*
 *---------------------------------------------------------------------------*/
 
static _kernel_oserror *output_chdef_data(sprite_area *spr_area, FILE *fp)
{
    sprite_header *spr_hdr;
    char          *spr_data;
    char           name[16];
    int            n;
    int            i;
    int            y;
    
    fputc(CR, fp);
    fputc(CR, fp);
    fputs(STARS, fp);
    fputs("; Character definitions\n\n", fp);
    fputs(ALIGN, fp);
    fputs("ChDefSpace\n",fp);
    fputs("        DCD     0, 0, 0, 0, 0\n", fp);
    fputc(CR, fp);
    fputs("ChDefNumbers\n",fp);
    
    for (n=0; n<11; n++)
    {
        if (n==10)
        {
            fputc(CR, fp);
            fputs("ChDefPercent\n",fp);
        }
        
        sprintf(name, "percent%d", n);
        spr_hdr = return_address_of_sprite(spr_area, name);
        spr_data = (char*)spr_hdr + spr_hdr->image;
        fputs("    = ", fp);
        i=0;
        for (y=0; y<9; y++)
        {
            fputs(num_to_hex(spr_data[i]), fp);
            fputc(COMMA, fp);
            fputs(num_to_hex(spr_data[i+1]), fp);
            if (y<8) fputc(COMMA, fp);
            i+=4;
        }
        fputc(CR, fp);
    }
        
    fputc(CR, fp);

    return NULL;
}


/*---------------------------------------------------------------------------*
 * write_initial_hourglass_shape                                             *
 *                                                                           *
 * Writes the data for the first frame of the hourglass animation to the     *
 * file.                                                                     *
 *                                                                           *
 * In: spr_hdr -> sprite header of first frame.                              *
 *     fp = file handle for output file.                                     *
 *---------------------------------------------------------------------------*/
 
static void write_initial_hourglass_shape(FILE *fp)
{
    char *spr_bitmap = (char*)spr_header1 + spr_header1->image;
    int   i;
    int   x;
    int   y;
    
    fputs(ALIGN, fp);
    fputs("HourglassShape\n", fp);
    i=0;
    for (y=0; y<hourglass_height; y++)
    {
        fputs(DCB, fp);

        for (x=0; x<hourglass_width; x++)
        {
            fputs(num_to_hex(spr_bitmap[i++]), fp);
            if (  (x< (DCB_LENGTH - 1))
               && (x < (hourglass_width - 1)) )
            {
                fputs(", ", fp);
            }
        }
        i += spr_byte_wastage;
        fputc(CR, fp);
    }
    fputs(ALIGN, fp);
    fputs("HourglassShapeEnd\n", fp);
    fputc(CR, fp);
}    


/*---------------------------------------------------------------------------*
 * write_diff_offset_table                                                   *
 *                                                                           *
 * Write the table which has the offsets to the diff data.                   *
 *                                                                           *
 * In: fp = file handle of output file.                                      *
 *---------------------------------------------------------------------------*/
 
static void write_diff_offset_table(FILE *fp)
{
    char string[64];
    int  n;
    
    fputc(CR, fp);
    fputs("DiffOffsetTable\n", fp);

    for (n=0; n<=hourglass_frames; n++)
    {
        sprintf(string, "       &       ShapeDiffs%d-DiffOffsetTable\n", n);
        fputs(string, fp);
    }
    fputc(CR, fp);
}


/*---------------------------------------------------------------------------*
 * write_hourglass_diff                                                      *
 *                                                                           *
 * Decide the difference between a given frame and the next frame and write  *
 * that difference to the output file.                                       *
 *                                                                           *
 * In: spr_area -> sprite area containing the hourglass sprites.             *
 *     n = first frame of comparison (n+1 is the other).                     *
 *     fp = file handle of output file.                                      *
 *                                                                           *
 * Returns: Error, if one occurred, else NULL.                               *
 *                                                                           *
 * Globals: corrupt[]                                                        *
 *---------------------------------------------------------------------------*/
 
static _kernel_oserror* write_hourglass_diff(sprite_area *spr_area, int n, FILE *fp)
{
    _kernel_oserror *e;
    sprite_header   *spr_hdr;
    char            *spr_data_a;
    char            *spr_data_b;
    char            *spr_data_1;
    char             string[16];
    int              offset = 0;
    int              value = 0;
    int              i;
    int              j;
    int              x;
    int              y;

    /* Find address of data for nth frame */
    sprintf(string, SPRITE_PREFIX"%d", n);
    spr_hdr = return_address_of_sprite(spr_area, string);
    e = check_sprite_header(spr_hdr);
    if (e) return e;
    spr_data_a = (char*)spr_hdr + spr_hdr->image;

    /* Find address of data for (n+1)th frame */
    sprintf(string, SPRITE_PREFIX"%d", n+1);
    spr_hdr = return_address_of_sprite(spr_area, string);
    e = check_sprite_header(spr_hdr);
    if (e) return e;
    spr_data_b = (char*)spr_hdr + spr_hdr->image;

    /* Find address of image data for 1st frame */
    spr_data_1 = (char*)spr_header1 + spr_header1->image;

    /* Go through comparing data and outputting differences */
    i = 0; /* Byte counter */
    j = 0; /* Counts number of items on current row of data */
    for (y=0; y<hourglass_height; y++)
    {
        for (x=0; x<hourglass_width; x++)
        {
            if (spr_data_b[i] != spr_data_a[i])
            {
                offset = (y * hourglass_width) + x;
                value = spr_data_b[i];
                corrupt[offset] = spr_data_1[i];

                if (j == 0) fputs(DCB, fp);
                else fputs(", ", fp);
                    
                fputs(num_to_hex(value), fp);
                fputc(COMMA, fp);
                fputs(num_to_hex(offset), fp);
                j++;
                
                if (j == DCB_LENGTH)
                {
                    fputc(CR, fp);
                    j = 0;
                }
            }
            i++;
        }
        i+=spr_byte_wastage;
    }

    /* The final word must be 00 00 00 00, so if we're not word aligned at
       this point, we output the last value again. */
    if (j & 1)
    {
        fputs(", ", fp);
        fputs(num_to_hex(value), fp);
        fputc(COMMA, fp);
        fputs(num_to_hex(offset), fp);
    }
        
    /* Output terminating word - 00 00 00 00 */
    if (j != 0) fputc(CR, fp);
    fputs(DCB"&00,&00, &00,&00\n", fp);

    return NULL;
}


/*---------------------------------------------------------------------------*
 * write_shapediffs0                                                         *
 *                                                                           *
 * Write the shapediffs0 data. This contains the original values for ALL     *
 * bytes that have been changed in previous frames.                          *
 *                                                                           *
 * In: fp = file handle of output file.                                      *
 *---------------------------------------------------------------------------*/

static void write_shapediffs0(FILE *fp)
{
    int offset = 0;
    int value = 0;
    int i;
    int j;

    fputc(CR, fp);
    fputs("ShapeDiffs0", fp);
    fputc(CR, fp);
    
    j = 0;
    
    for (i=0; i<255; i++)
    {
        if (corrupt[i] != -1)
        {
            offset = i;
            value = corrupt[i];
            
            if (j == 0) fputs(DCB, fp);
            else fputs(", ", fp);
                
            fputs(num_to_hex(value), fp);
            fputc(COMMA, fp);
            fputs(num_to_hex(offset), fp);
            j++;
            
            if (j == DCB_LENGTH)
            {
                fputc(CR, fp);
                j = 0;
            }
        }
    }

    /* The final word must be 00 00 00 00, so if we're not word aligned at
       this point, we output the last value again. */
    if (j & 1)
    {
        fputs(", ", fp);
        fputs(num_to_hex(value), fp);
        fputc(COMMA, fp);
        fputs(num_to_hex(offset), fp);
    }
        
    /* Output terminating word - 00 00 00 00 */
    if (j != 0) fputc(CR, fp);
    fputs(DCB"&00,&00, &00,&00\n", fp);
}


/*---------------------------------------------------------------------------*
 * output_hourglass_data                                                     *
 *                                                                           *
 * Output the appropriate data for the hourglass sprites.                    *
 *                                                                           *
 * In: spr_area -> sprite area containing hourglass sprites.                 *
 *     fp = file handle of output file.                                      *
 *---------------------------------------------------------------------------*/
 
static _kernel_oserror* output_hourglass_data(sprite_area *spr_area, FILE *fp)
{
    _kernel_oserror *e;
    char             string[16];
    int              i;

    spr_header1 = return_address_of_sprite(spr_area, SPRITE_PREFIX"1");

    e = read_palette_and_size(fp);
    if (e) return e;
    write_initial_hourglass_shape(fp);
    write_diff_offset_table(fp);

    for (i=1; i<=hourglass_frames; i++)
    {
        fputc(CR, fp);
        sprintf(string,"ShapeDiffs%d", i);
        fputs(string, fp);
        fputc(CR, fp);
        e = write_hourglass_diff(spr_area, i, fp);
        if (e) return e;
    }
        
    return NULL;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *---------------------------------------------------------------------------*/
 
int main(int argc, char* argv[])
{
    sprite_area *spr_area;
    FILE        *fp;
    char         source_file[1024];
    char         dest_file[1024];
    char         options[16];
    char        *spr_data;
    int          area_size;
    int          i;

    /* Warn if not enough arguments */
    if (argc<4)
    {
        printf("\n*Hourmake produces a file containing the shape data needed by the\n");
        printf("hourglass module. This includes palette data, hourglass shape data\n");
        printf("and character data (0-9 and %%).\n");
        printf("Options:\n");
        printf("  C(haracters)	Produce character data too.\n");
        printf("Syntax: hourmake <source> <destination> <no. of hourglass frames>");
        printf("[<options>]\n\n");
        exit(0);
    }
    
    /* Keep source filename, destination filename and no. of frames */
    strcpy(source_file, argv[1]);
    strcpy(dest_file, argv[2]);
    hourglass_frames = atoi(argv[3]);
    
    /* Keep options */
    if (argc>4)
    {
        if (strlen(argv[4]) < 15) strcpy(options, argv[4]);
    }

    for (i=0; i<256; i++) corrupt[i] = -1;

    /* Get area to store sprites */
    area_size = file_length(source_file) + 64;
    spr_data = malloc(area_size);
    if (!spr_data)
    {
        printf("Not enough memory to load sprite file.\n");
        exit(0);
    }
    spr_area = (sprite_area*) spr_data;
    spr_area -> size = area_size;

    /* Load sprite file */
    error_trap(initialise_and_load_sprite(spr_area, source_file));
        
    /* Open destination file */
    fp = fopen(dest_file, "w");
    if (!fp)
    {
        printf("Can't open output file.\n");
        exit(0);
    }

     /* Output the data */
    error_trap(output_hourglass_data(spr_area, fp));
    write_shapediffs0(fp);
    if (strstr(options, "C"))
    {
        error_trap(output_chdef_data(spr_area, fp));
    }

    /* Finish off the file */
    fputc(CR, fp);
    fputs("        END", fp);
    fclose(fp);
    
    return 0;
}
