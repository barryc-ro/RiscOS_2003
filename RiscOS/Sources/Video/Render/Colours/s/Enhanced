; > Enhanced

;;-----------------------------------------------------------------------------
;; Routines to cope with 16 and 32 bits per pixel operation
;;-----------------------------------------------------------------------------

;;-----------------------------------------------------------------------------
;; These functions are designed for the Vertical Twist graphics enhancer
;; podule and the VIDC20 platform.  The following variables control the
;; path of assembly to get the relevent bit masks.
;;-----------------------------------------------------------------------------

        GBLL    vidc20
vidc20  SETL    true            ; if true then compiling for VIDC20


;;-----------------------------------------------------------------------------
;; Convert a physical colour word (8 bit red, green and blue) to a value
;; suitable for the graphics hardware we are driving.  The function simply
;; takes the top five bits for each gun and uses them to make a fifteen
;; bit colour word which can be poked into the display memory.
;;
;; VIDC 20:
;;
;;      bits    FEDCBA9876543210
;;      gun     0bbbbbgggggrrrrr
;;
;; Graphics Enhancer:
;;
;;      bits    FEDCBA9876543210
;;      gun     0bgrbbbbggggrrrr
;;  
;; in   R2 = physical colour (bbbbbbbbggggggggrrrrrrrr00000000)
;; out  R2 = colour number
;;-----------------------------------------------------------------------------

worst_colour16bpp ROUT
        Debug buildcolours,"worst_colour16 in:",R2 

        MOV     R2,R2,LSR #8
        MVN     R2,R2,LSL #8            ; simply invert the colour for worst match

best_colour16bpp ROUT

      [ vidc20
        Debug buildcolours,"best_colour16 in:",R2 
            
        ENTRY   "R3,R4"

        MOV     LR,#&1F                 ; suitable mask to extract the relevant bits
        MOV     R3,R2,LSR #8 +3
        AND     R3,R3,LR
        MOV     R4,R2,LSR #16 +3
        AND     R4,R4,LR
        MOV     R2,R2,LSR #24 +3
        AND     R2,R2,LR
        ORR     R3,R3,R4,LSL #5
        ORR     R2,R3,R2,LSL #10
        Debug buildcolours,"best_colour16 out:",R2 

        EXITS

      |

        ENTRY "R0-R1,R3"

        MOV     LR,#&1F                 ; suitable mask for extracting bits
        AND     R0,LR,R2,LSR #8+3       ; extracting the red
        AND     R1,LR,R2,LSR #16+3      ; and then the green
        MOV     R2,R2,LSR #24+3         ; finally the blue
                    
        MOV     LR,R0,LSR #1 
        AND     R3,R0,#1
        ORR     LR,LR,R3,LSL #12        ; pack the red into a sensible place

        MOV     R3,R1,LSR #1
        ORR     LR,LR,R3,LSL #4
        AND     R3,R1,#1
        ORR     LR,LR,R3,LSL #13        ; pack the green into the gun

        MOV     R3,R2,LSR #1
        ORR     LR,LR,R3,LSL #8
        AND     R3,R2,#1        
        ORR     R2,LR,R3,LSL #14        ; finally pack in the blue
                                     
        EXITS

      ]


;;-----------------------------------------------------------------------------
;; Conver the specified colour word into a physcial colour, this is simply
;; a matter of taking the packed word and expanding it out so that all
;; the bits are in the correct order.  Note that we do not attempt compensate
;; for losing 3 bits in the original conversion, this is important to ensure
;; that the dithering is performed correctly.
;;                   
;; In   R2 = colour word:
;; 
;;   VIDC 20:
;;      
;;      bit     FEDCBA9876543210FEDCBA9876543210     
;;                               bbbbbgggggrrrrr
;;
;;   Graphics Enhancer:
;;
;;      bit     FEDCBA9876543210FEDCBA9876543210     
;;                               bgrbbbbggggrrrr
;;
;; Out  R2 = physical colour word:
;;
;;      bit     FEDCBA9876543210FEDCBA9876543210     
;;              bbbbb000ggggg000rrrrr000
;;
;;-----------------------------------------------------------------------------
                                         
get_physical16bpp ROUT

      [ vidc20

        ENTRY   "R3,R4"

        MOV     LR,#2_11111    
        MOV     R3,R2,LSL #3            ; move green, blue to bit 8 and bit 16 respectivly
        MOV     R4,R2,LSL #6        
        AND     R2,R2,LR                ; mask out red
        AND     R3,R3,LR,LSL #8         ;          green
        AND     R4,R4,LR,LSL #16        ;          blue
        ORR     R2,R2,R3
        ORR     R2,R2,R4                ; combine to make red (bit 0), green (bit 8) and blue (bit 16)
        MOV     R2,R2,LSL #11           ; shift so red (bit 11), green (bit 19) and blue (bit 27)
                
        EXITS        

      |

        ENTRY   "R0-R1,R3"
                     
        MOV     R0,R2,LSL #28
        AND     R1,R2,#1:SHL:12        
        ORR     R0,R0,R1,LSL #(27-12)
        MOV     R3,R0,LSR #16           ; red component  

        MOV     R0,R2,LSR #4
        MOV     R0,R0,LSL #28
        AND     R1,R2,#1:SHL:13        
        ORR     R0,R0,R1,LSL #(27-13)
        ORR     R3,R3,R0,LSR #8         ; green component
    
        MOV     R0,R2,LSR #4
        MOV     R0,R0,LSL #28
        AND     R1,R2,#1:SHL:14        
        ORR     R0,R0,R1,LSL #(27-14)
        ORR     R2,R3,R0                ; blue component
                                  
        EXITS

      ]



;;-----------------------------------------------------------------------------
;; This routine copes with generating a suitable colour word for a 32 bit 
;; device.  Currently this generates a VIDC 20 value &00BBGGRR the top bits
;; are left clear.
;;
;; in   R2 = physical colour
;; out  R2 = colour word to be used
;;-----------------------------------------------------------------------------

worst_colour32bpp ROUT
        Debug buildcolours,"worst_colour32 in:",R2 
        MVN     R2,R2                   ; Invert the colour word (gives worst colour)

best_colour32bpp ROUT
        Debug buildcolours,"best_colour32 in:",R2 

        MOV     R2,R2,LSR #8            ; Convert from &BBGGRR00 to &00BGGRR
        Debug buildcolours,"best_colour32 returning:",R2 
        MOVS    PC,LR                   ; Returning having done it
          


        END
