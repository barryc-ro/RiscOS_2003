; > FontColour

;------------------------------------------------------------------------------
;
; ColourTrans_SetFontColours implementation
;
;   Entry: R0 font handle / =0 for no change
;          R1 background physical colour
;          R2 foreground physical colour
;          R3 maximum offset
;
;   Exit:  V =1 => R0 ->Error block
;          else,   R0 preserved
;                  R1,R2,R3 for passing to Font_SetFontColour
;
; This routine will get the font colour parameters and then set the
; colours.
;
;------------------------------------------------------------------------------

SetFontColours_Code ROUT

        Debug   input1,"SetFontColours: R0-R3",R0,R1,R2,R3
        Debug   input2,"SetFontColours: handle, for/back, offset",R0,R1,R2,R3

        Push    "R0-R6,LR"

        MOV     R4,R1
        MOV     R5,R2
        MOV     R6,R3                   ;Take copies of fore, back and offset

        MOV     R10,#-1                 ;Return colours need not preserve colours
        BL      ReturnFontColours_Alt

        ADDVC   LR,SP,#4
        STMVCIA LR,{R1-R3}              ;Store return parameters

        MOVVC   R1,#0                   ;No colour table
        MOVVC   R2,R4                   ;Background physical colour
        MOVVC   R3,R5                   ;Foreground physical colour
        MOVVC   R4,R6                   ;and the offset
        SWIVC   XFont_SetColourTable
        BVC     setfontcolours_exit     ;Leave now because it worked, otherwise fall back to RISC OS 2.00 method

        LDMIA   SP,{R0-R3}
        SWI     XFont_SetFontColours    ;And set it...

setfontcolours_exit
        STRVS   R0,[SP]
        [ debugoutput
        Pull    "R0-R6,LR"
        Debug   output,"Leaving SetFontColours R0-R3",R0,R1,R2,R3
        MOV     PC,LR
        |
        Pull    "R0-R6,PC"              ;Return allowing flags through
        ]

;------------------------------------------------------------------------------
;
; ColourTrans_ReturnFontColours implementation
;
;   Entry: R0 handle
;          R1 background physical colour
;          R2 foreground physical colour
;          R3 offset
;
;   Exit:  V =1 => R0 ->Error block
;          else,   R0 unchanged,
;                  R1-R3 passable to Font_SetFontColours
;
; Return suitable parameters for passing to Font_SetFontColours.  This routine
; checks to see what mode we
;
;------------------------------------------------------------------------------

ReturnFontColours_Code ROUT
        Debug   input1,"ReturnFontColours: R0-R3",R0,R1,R2,R3
        Debug   input2,"ReturnFontColours: handle, back, fore, offset",R0,R1,R2,R3

        MOV     R10,#0                  ;Preserve the font colours at all costs

ReturnFontColours_Alt
      [ bloodyRISCOSLib
        CMP     R0,#-1                  ;Early versions of RISCOS_Lib pass -1 for current handle!
        MOVLE   R0,#0
      ]

        LDRB    R11,[WP,#CachedL2BPP]
        CMP     R11,#3                  ;Is it an 8BPP mode?
        BLT     returnfontcolours_slow

;..............................................................................
;
; Cycle through the pseudo palette entries within the Font Manager setting
; up entries required for the selected colours.
;
; in    R0 handle
;       R1 physical background
;       R2 physical foreground
;       R3 offset
;
; out   V =1 => R0 -> error block
;       else,   as for Font_SetFontColours

returnfontcolours_8bpp
        Push    "R4-R6,LR"

        LDR     R6,=&65757254           ;="True" to tell Font Manager about 24bit values
        MOV     R4,R1
        MOV     R5,R2                   ;Copy physical colours up

        LDRB    LR,[WP,#PseudoPaletteEntry]
        AND     R2,R2,#15
        ADD     LR,R2,#1                ;Cycle through the pseudo palette entries
        STRB    LR,[WP,#PseudoPaletteEntry]

        Push    "R0-R3"

        TEQ     R10,#0                  ;Do I need to preserve the colour settings?
        BEQ     colour_preserve         ;Yes, so do this cleanly

        SWI     XFont_SetPalette
        STRVS   R0,[SP]                 ;Otherwise just set entry
        B       skip_colour_preserve    ;and then exit back to the caller

colour_preserve
        SWI     XFont_CurrentFont


        Push    "R1-R3"                 ;Store the colours and the font
        ADD     LR,SP,#4*4
        LDMIA   LR,{R1-R3}              ;Get the colours to change to
        SWI     XFont_SetPalette        ;Setup the palette entry
        Pull    "R1-R3"
        STRVS   R0,[SP]                 ;Restore back to original

        SavePSR R6
        MOV     R0,#0
        SWI     XFont_SetFontColours    ;Ignore errors when restoring colour
        RestPSR R6,,f                   ;(it may be invalid anyway)

skip_colour_preserve
        [ debugoutput
        Pull    "R0-R6,LR"
        Debug   output,"Leaving ReturnFontColours: R0-R3",R0,R1,R2,R3
        MOV     PC,LR
        |
        Pull    "R0-R6,PC"              ;Finished so return now
        ]

        LTORG

;..............................................................................
;
; Attempt to find the closest set of colours to the specified foreground
; and backgrounds attempting to put in as many anti-aliased colours upto
; the specified limit as specified.
;
; The routine works by performing the following:
;
; It first calculates suitable colour numbers for the foreground and background
; colours.  The background colour number is then stacked as it is not
; needed for any of the future calculations, we then attempt to work out
; how many aliasing colours we can add in, this is handled by two
; specific routines.
;
; We first get the two palette entries for the colours and then attempt to
; divide the difference by the number of steps required, from here
; we can then step from the foreground to the background looking for a suitable
; range of colours.
;
; The first attempt we make is to scan from the background back to the foreground
; by adding the offset to the foreground colour number (if this ends up outside
; the palette we abort as it is invalid) and attempting to calculate the error
; between the two colours (ie. palette entry and required colour) if this is
; <= to the error between each step within the foreground -background /divide
; current offset then we allow it and loop down until the offset is zero.
;
; If the test fails then the routine attempts to perform the same by scanning
; backwards, again if this fails the routine decreases the global offset and
; starts again until the offset is zero when it then abandons and
; anti-aliased text is used.
;
; in    R0 handle
;       R1 physical background
;       R2 physical foreground
;       R3 offset
;
; out   V =1 => R0 -> error block
;       else,   as for Font_SetFontColours

returnfontcolours_slow ROUT

        Push    "R0-R1,R4-R11,LR"

        BIC     R5,R1,#&FF
        BIC     R4,R2,#&FF              ;Setup copies of the foreground/background colours
        MOV     R7,#0                   ;I have not cached the palette yet

        MOV     R0,R5
        BL      TryCache                ;Attempt to locate the background colour in colour cache
        LDREQ   R1,[R1,#CachedColour]
        BEQ     returnfontcolours_gotback

        MOV     R0,#-1                  ;Read the current palette for the current mode
        MOV     R1,#-1
        BuildColoursForBest             ;Attempt to read the palette
        MOV     R7,R0
        MOV     R8,R1                   ;Copy bounds into R7,R8 to be used later on

        MOV     R2,R5
        GetBestColour                   ;Attempt to get the colour we want

        MOV     R0,R2                   ;Colour number
        MOV     R1,R2                   ;GCOL
        MOV     R2,R5                   ;Physical colour
        BL      WriteCacheEntry

returnfontcolours_gotback
        ORR     R5,R5,R1                ;Generate combined physical and logical colour
        STR     R1,[SP,#CallerR1]       ;Store the background colour

        MOV     R0,R4                   ;Now attempt to lookup the foreground colour
        BL      TryCache
        LDREQ   R1,[R1,#CachedColour]   ;Read the associated colour number
        BEQ     returnfontcolours_gotfore

        MOVS    R0,R7
        MOVNE   R1,R8                   ;Has the palette already been cached, if not then re-read
        BNE     returnfontcolours_havepalette

        MOV     R0,#-1
        MOV     R1,#-1
        BuildColoursForBest             ;Read the palette of the current mode
        MOV     R7,R0
        MOV     R8,R1                   ;Take copy of the pointers around the palette

returnfontcolours_havepalette
        MOV     R2,R4
        GetBestColour                   ;Attempt to locate the foreground physical colour

        MOV     R0,R2
        MOV     R1,R2
        MOV     R2,R4
        BL      WriteCacheEntry         ;Write colour number, GCOL and physical colours to cache

returnfontcolours_gotfore
        ORR     R4,R4,R1                ;Munge to make foreground physical colour + colour number

        MOVS    R0,R7                   ;Has it been cached already?
        MOVNE   R1,R8
        BNE     %FT10

        MOV     R0,#-1                  ;...otherwise read for the current mode
        MOV     R1,#-1
        BuildColoursForBest             ;Only re-build if not recached
10
        Debuga  fontcolours,"Palette from",R0
        Debug   fontcolours," to",R1
        Debuga  fontcolours,"User specified offset",R3
        Debuga  fontcolours,", background",R4
        Debug   fontcolours,", foreground",R5

        CMP     R3,#14                  ;Can only have a maximum of 14 different cowlours
        MOVGT   R3,#14                  ;Truncate if too big... then we can boogie!

        MOV     R2,R4,LSR #16
        AND     R2,R2,#&FF00
        AND     R10,R5,#&FF000000
        RSBS    R10,R2,R10,LSR #16
        RSBMI   R10,R10,#0              ;Get the difference between the two blue points (ensure +ve)
        MOV     LR,#0
        ORRMI   LR,LR,#1

        MOV     R2,R4,LSR #8
        AND     R2,R2,#&FF00
        AND     R9,R5,#&FF0000
        RSBS    R9,R2,R9,LSR #8
        RSBMI   R9,R9,#0                ;Get the difference between the two green points (ensure +ve)
        ORRMI   LR,LR,#2

        AND     R2,R4,#&FF00
        AND     R8,R5,#&FF00
        RSBS    R8,R2,R8
        RSBMI   R8,R8,#0                ;Get the difference between the two red points (ensure +ve)
        ORRMI   LR,LR,#4

        ADR     R2,StaticFontColourCode
        ADD     R2,R2,LR,LSL #4           ;4 words of code per case (3 bit selector in LR)
        STR     R2,[WP,#FontColourCodeAt]

returnfontcolours_loop
        Debug   fontcolours3,"Offset before scanning",R3

        CMP     R3,#0                   ;Have we bottomed out?
        MOVLT   R3,#0
        ANDLE   R2,R4,#&FF              ;Yup... so exit (if <0 then convert to monohrome)
        BLT     returnfontcolours_exit

        Push    "R3,R8-R10"

        ADD     R3,R3,#1                ;Try offset of n+1

        AND     R2,R4,#&FF00            ;Get the red starting point
        DivRem  R11,R8,R3,LR            ;..divide by the step value
        ORR     R8,R2,R11,LSL #16       ;..combine to make an nice happy value

      [ :LNOT: checkluminance
        LDR     R7,[WP,#ColourErrorLoading]
        AND     R2,R7,#&FF00
        MOV     R2,R2,LSR #8
        MOV     R11,R11,LSR #8
        MUL     LR,R11,R11
        MUL     R6,LR,R2                ;Convert so that red step = red^2*error loading
      ]

        MOV     R2,R4,LSR #8
        AND     R2,R2,#&FF00
        DivRem  R11,R9,R3,LR
        ORR     R9,R2,R11,LSL #16       ;Get the green step and combine with starting green

      [ :LNOT: checkluminance
        AND     R2,R7,#&FF0000
        MOV     R2,R2,LSR #16
        MOV     R11,R11,LSR #8
        MUL     LR,R11,R11              ;Get the step and multiply by the error loading, square it
        MLA     R6,LR,R2,R6             ;and combine with current value
      ]

        MOV     R2,R4,LSR #16
        AND     R2,R2,#&FF00
        DivRem  R11,R10,R3,LR
        ORR     R10,R2,R11,LSL #16      ;Do the same again but this time for the blue (calculate the step)

      [ :LNOT: checkluminance
        MOV     R2,R7,LSR #24
        MOV     R11,R11,LSR #8
        MUL     LR,R11,R11
        MLA     R6,LR,R2,R6             ;And then play around with the loading for this colour
      ]

        Debuga  fontcolours2,"Step+start red",R8
        Debuga  fontcolours2,", green",R9
        Debug   fontcolours2,", blue",R10
        Debug   fontcolours2 :LAND: checkluminance,"Step as an error",R6

        Pull    "R3"                    ;Restore the step value back to its normal happy self

        CLC
        BL      checkforwards
        BLCC    checkbackwards          ;Scan fowards from current pointer, if that fails look backwards
        BCS     returnfontcolours_altexit

        Debug   fontcolours2,"Failed to match suitable range"

returnfontcolours_failed
        Pull    "R8-R10"
        SUB     R3,R3,#1                ;Decrease the step value
        B       returnfontcolours_loop

returnfontcolours_altexit
        Pull    "R8-R10"                ;Balance the stack ready to exit

returnfontcolours_exit
        Pull    "R0-R1,R4-R11"          ;Restore ready to setup the colours
        TEQ     R10,#0
        SWINE   XFont_SetFontColours    ;If R10<>0 then must set the colours

        Pull    "PC"

;..............................................................................

; in    R0 ->palette table
;       R1 ->end of palette table
;       R3 offset value
;       R4 packed foreground + logical colour
;       R5 packed background + logical colour
;       R8,R9,R10 contain base values + step to next
;
; out   C =1 => suitable match found
;       C =0 => no match found yet

checkforwards ROUT

        Push    "R0,R3-R5,R8-R10,LR"

        AND     R4,R4,#&FF              ;Get the foreground index into the palette
        SUB     R5,R1,R0                ;Get the range of the palette

checkforwards_loop
        ADD     R4,R4,#1                ;Advance the index
        CMP     R4,R5,LSR #2            ;If outside acceptable range then exit
        LDRLT   R11,[R0,R4,LSL #2]      ;Get the physical entry to compare against and compare
        BLLT    advanceRGB
        BGE     checkfnomatch

        SUBS    R3,R3,#1                ;Decrease offset until happy with the result
        BNE     checkforwards_loop

        Pull    "R0,R3-R5,R8-R10,LR"

        Debug   fontcolours,"Check forwards matched with offset",R3

checkprovedok
        AND     R2,R4,#&FF
        RSB     R3,R3,#0
        SUB     R2,R2,R3                ;Calculate meaninful offset + foreground colour
        SEC
        MOV     PC,LR

checkfnomatch
        CLC
        Pull    "R0,R3-R5,R8-R10,PC"

;..............................................................................

; in    R0 ->palette table
;       R1 ->end of palette table
;       R3 offset value
;       R4 packed foreground + logical colour
;       R5 packed background + logical colour
;       R8,R9,R10 contain base values + step to next
;
; out   C =1 => suitable match found
;       C =0 => no match found yet

checkbackwards ROUT

        Push    "R0,R3-R4,R8-R10,LR"

        AND     R4,R4,#&FF              ;Get the foreground logical colour

checkbackwards_loop
        SUBS    R4,R4,#1                ;When we step below zero then we should exit
        BLT     checkbnomatch

        LDR     R11,[R0,R4,LSL #2]      ;Get the physical colour associated with the logical
        BL      advanceRGB              ;and then perform the physical advance and comparison
        BGE     checkbnomatch

        SUBS    R3,R3,#1                ;Decrease the offset and loop until done
        BNE     checkbackwards_loop

        Pull    "R0,R3-R4,R8-R10,LR"
        Debug   fontcolours,"Check backwards matched with offset",R3
        RSB     R3,R3,#0                ;Invert offset before passing to generic exit routine
        B       checkprovedok           ;...and then exit

checkbnomatch
        CLC
        Pull    "R0,R3-R4,R8-R10,PC"

;..............................................................................

; in    R8 packed red + step
;       R9 packed green + step
;       R10 packed green + step
;       R11 physical colour to compare against
;
; out   R2 palette entry calculate converted luminance (0...255)
;       R8,R9,R10 updated

advanceRGB ROUT

      [ checkluminance
        ENTRY   "R0-R1,R3"
      |
        ENTRY   "R0-R1,R3-R5"
      ]

        MOV     R0,R8,LSL #16
        MOV     R0,R0,LSR #16           ;Extract the red
        MOV     R1,R9,LSL #16
        MOV     R1,R1,LSR #16           ;Extract the green
        MOV     R3,R10,LSL #16
        MOV     R3,R3,LSR #16           ;Extract the blue

        Debuga  fontcolours2,"Before adjustment red",R0
        Debuga  fontcolours2,", green",R1
        Debug   fontcolours2,", blue",R3

        Branch  WP,FontColourCodeAt     ;Call routine to modify the three components

        Debuga  fontcolours2,"After adjustment red",R0
        Debuga  fontcolours2,", green",R1
        Debug   fontcolours2,", blue",R3

        MOV     R8,R8,LSR #16
        ORR     R8,R0,R8,LSL #16        ;Remake the red + step value into single word
        MOV     R9,R9,LSR #16
        ORR     R9,R1,R9,LSL #16        ;Remake the green + step value into single word
        MOV     R10,R10,LSR #16
        ORR     R10,R3,R10,LSL #16      ;Remake the blue + step value into single word

      [ checkluminance

        ! 0,"Font colours derived by luminance matching"

        MOV     LR,#77
        MUL     R2,LR,R0                ;77*red
        MOV     LR,#150
        MLA     R2,LR,R1,R2             ;77*red +150*green
        RSB     R3,R3,R3,LSL #3
        ADD     R2,R2,R3,LSL #2         ;77*red +150*green +27*blue (requested as luminance)

        MOV     LR,#&FF
        AND     R0,LR,R11,LSR #8        ;Extract the red value of the colour
        MOV     R1,#77
        MUL     R0,R1,R0                ;77*red
        AND     R3,LR,R11,LSR #16
        MOV     R1,#150
        MLA     R0,R1,R3,R0             ;77*red +150*green
        MOV     R3,R11,LSR #24
        RSB     R3,R3,R3,LSL #3
        ADD     R0,R0,R3,LSL #2         ;77*red +150*green +27*blue (palette as luminance)

        MOV     R1,R8,LSR #24           ;Get the red step value
        MOV     LR,#77
        MUL     R1,LR,R1                ;77*red
        MOV     R3,R9,LSR #24
        MOV     LR,#150
        MLA     R1,R3,LR,R1             ;77*red +150*green
        MOV     R3,R10,LSR #24
        RSB     R3,R3,R3,LSL #3
        ADD     R1,R1,R3,LSL #2         ;77*red +150*green +27*blue (difference as luminance)

        Debug   fontcolours3,"Luminance of entry looking for",R2
        Debug   fontcolours3,"Luminance of entry matching against",R0
        Debug   fontcolours3,"Step value as a luminance",R1

        SUBS    R0,R0,R2,LSR #8
        RSBMI   R0,R0,#0                ;Ensure the colour is valid
        CMP     R0,R1

        Debug   fontcolours3,"Difference between required and match",R0

      |

        LDR     R4,[WP,#ColourErrorLoading]
        MOV     R5,#&FF                 ;Get the error loading value and the mask to be used

        MOV     R0,R0,LSR #8
        AND     LR,R5,R11,LSR #8
        SUBS    R0,R0,LR
        RSBMI   R0,R0,#0
        MUL     LR,R0,R0                ;Get the difference between the two colours and
        AND     R2,R5,R4,LSR #8         ;convert the red component via its error loading
        MUL     R0,R2,LR

        AND     LR,R5,R11,LSR #16
        RSBS    R1,LR,R1,LSR #8
        RSBMI   R1,R1,#0
        MUL     LR,R1,R1
        AND     R2,R5,R4,LSR #16        ;Do the same with the green and combine with current value
        MLA     R0,LR,R2,R0

        MOV     R3,R3,LSR #8
        SUBS    R3,R3,R11,LSR #24
        RSBMI   R3,R3,#0
        MUL     LR,R3,R3
        MOV     R4,R4,LSR #24           ;Finally do the same with the blue and we have a value read to compare
        MLA     R0,LR,R4,R0

        CMP     R0,R6                   ;Compare against the step converted to an error

      ]

        EXIT

;..............................................................................

; in    R0  red value   (8.8 fixed point)
;       R1  green value (8.8 fixed point)
;       R3  blue value  (8.8 fixed point)
;       R8  red step    (8.8 fixed point)
;       R9  green step  (8.8 fixed point)
;       R10 blue step   (8.8 fixed point)


StaticFontColourCode
;2_000
        ADD     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_001
        ADD     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_010
        ADD     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_011
        ADD     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_100
        SUB     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_101
        SUB     R0,R0,R8,LSR #16
        ADD     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_110
        SUB     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        ADD     R3,R3,R10,LSR #16
        MOV     PC,LR
;2_111
        SUB     R0,R0,R8,LSR #16
        SUB     R1,R1,R9,LSR #16
        SUB     R3,R3,R10,LSR #16
        MOV     PC,LR


        END
