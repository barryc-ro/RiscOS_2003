; > DevicePal2

;;-----------------------------------------------------------------------------
;; New Calibration Code for ColourTrans 1.10 and beyond.
;;
;; This code is for use with the Ace Computing Pro-Drivers and the newer
;; versions of PDumper Support provided by Acorn.
;;
;; The code is supplied by Tony Cheal at Ace Computing / Oak Solutions to 
;; replace the exisiting calibration code which was defunct.
;;-----------------------------------------------------------------------------

;;-----------------------------------------------------------------------------
;; ConvertDeviceColour
;;
;; Pass a specified colour word (&bbggrrxx) through the calibration table 
;; yeilding and gamma correct colour value in the same format.
;;
;; in   R1 = colour to convert (&bbggrrxx)
;;      R3 -> table 
;; out  R2 = new colour
;;-----------------------------------------------------------------------------

new_convert_device_colour ROUT

        BIC     LR,LR,#V_bit                            ; prepare for a tidy exit

        TEQ     R3,#0                                   ; any calibration table supplied?
        MOVEQ   R2,R1                                   ; if not then simply pass back the entry colour
        MOVEQS  PC,LR                                   ; and then return

        Push    "R0,R4-R6,LR"

        MOV     LR,#&FF                                 ; mask to use to extract values
        AND     R4,LR,R1,LSR #8                         ; get the red component
        AND     R5,LR,R1,LSR #16                        ; and then the greeen
        MOV     R6,R1,LSR #24                           ; finally the blue

        LDR     R0,[R3,#calib_idealwhite]
        CMP     R0,#&FFFFFF00                           ; is white really white
        BLNE    do_grey_shift                           ; if not then perform a level of compensataion
 
        LDR     R0,[R3,#calib_idealblack]               
        CMP     R0,#&00000000                           ; is black really black?
        [       Version >= 123
        BEQ     %FT10
        |
        BNE     %FT10                                   ; if it is then ignore the requirement to compensate
        ]
        MVN     R0,R0                                   ; ones compliment of the shift value
        EOR     R4,R4,#&FF                              ; and invert the colours
        EOR     R5,R5,#&FF
        EOR     R6,R6,#&FF
        BL      do_grey_shift                           ; perform compensation
        EOR     R4,R4,#&FF                              ; and invert the resulting colours
        EOR     R5,R5,#&FF
        EOR     R6,R6,#&FF
10
        LDR     R0,[R3,#calib_tablecount]               ; get the number of lookup tables
        TEQ     R0,#3                                   ; is there a table for red, green and blue independantly
        ADD     R0,R3,#calib_gammatables
        LDRB    R4,[R0,R4]                              ; pass red through the table
        ADDEQ   R0,R0,#calib_gammasize
        LDRB    R5,[R0,R5]                              ; pass green through the table
        ADDEQ   R0,R0,#calib_gammasize
        LDRB    R6,[R0,R6]                              ; pass blue through the table
        MOV     R2,R6,LSL #24
        ORR     R2,R2,R5,LSL #16
        ORR     R2,R2,R4,LSL #8                         ; combine to make a colour word

        LDR     R0,[R3,#calib_postprocessSWI]           ; get the post processing SWI number
        CMP     R0,#0                                   ; is one defined?
        Pull    "R0,R4-R6,PC",EQ,^                      ; if not then return now!

        MOV     R1,R2
        ADD     R0,R0,#&EF000000                        ; SWI intruction
        ORR     R0,R0,#Auto_Error_SWI_bit               ; ensure if it fails it is not fatal
        ADR     R2,%FT20 -4                             
        SUB     R2,R2,SP
        MOV     R2,R2,LSR #2
        BIC     R2,R2,#&FF000000                        ; bugfix for negative
        ADD     R2,R2,#&EA000000                        ; build into a branch instruction
        Push    "R0,R2"                                 ; push to the stack
        MOV     PC,SP                                   ; and execute on the frame
20
        ADD     SP,SP,#4*2                              ; balance the stack for an easy life
        STRVS   R0,[SP]                                 ; ensure sensible error pointer passed out (if required)
        Pull    "R0,R4-R6,PC"                           ; return passing back error and flags 



;;-----------------------------------------------------------------------------
;; Code to perform compensation for non-real black/white
;;
;; Formula used = newR = oldR * (1 - (min(R,G,B) / max (R,G,B)) * (1 - idealR)
;;                newG = oldG * (1 - (min(R,G,B) / max (R,G,B)) * (1 - idealG)
;;                newB = oldB * (1 - (min(R,G,B) / max (R,G,B)) * (1 - idealB)                
;;
;; in   R0 = ideal red, green, blue (&ibigirxx)
;;      R3 -> calibration table
;;      R4,R5,R6 = red, green, blue
;; out  R4,R5,R6 = red, green, blue (compensated)
;;-----------------------------------------------------------------------------

do_grey_shift ROUT

        Push    "R7-R9,LR"
        MVN     R0,R0                                   ; quicker on complements
                                                                    
        [       Version >= 123
        MOV     R8,R4                                   ; min(R,G,B)
        CMP     R8,R5
        MOVLO   R8,R5
        CMP     R8,R6
        MOVLO   R8,R6 
        |
        MOV     R8,R4                                   ; min(R,G,B)
        CMP     R8,R5
        MOVHI   R8,R5
        CMP     R8,R6
        MOVHI   R8,R6 
        ]
        TEQ     R8,#0                                   ; is it pure black?
        Pull    "R7-R9,PC",EQ,^                         ; if so then return now
         
        [       Version >= 123
        MOV     R7,R4                                   ; max(R,G,B)
        CMP     R7,R5
        MOVHI   R7,R5
        CMP     R7,R6
        MOVHI   R7,R6
        |                                                             
        MOV     R7,R4                                   ; max(R,G,B)
        CMP     R7,R5
        MOVLO   R7,R5
        CMP     R7,R6
        MOVLO   R7,R6
        ]

        TEQ     R7,R8                                   ; check for min/max = 1
        MOVEQ   R9,#1:SHL:8                             ; and if that is the case then avoid divide
        BEQ     %FT10

        MOV     R7,R7,LSL #8
        DivRem  R9,R7,R8,LR                             ; divide out
10
        MOV     LR,R0,LSR #8                            ; get the ideal red
        ANDS    LR,LR,#&FF                              ; check for no change
        BEQ     %FT20                                   ; no red shift

        MUL     LR,R9,LR                                ; bla!
        RSB     LR,LR,#&FF00                            ; 1 is now 255<<8
        MUL     R4,LR,R4                                ; Answer now 255<<8 too big
        [       Version >= 123
        MOVS    R4,R4,LSR #16
        ADDNE   R4,R4,#1                                ; Division is by 256*255
        |
        MOV     R4,R4,LSR #8
        ]
        CMP     R4,#&FF                                 ; just in case!
        MOVHI   R4,#&FF
20
        MOV     LR,R0,LSR #16                           ; get the ideal green
        ANDS    LR,LR,#&FF                              ; check for no change
        BEQ     %FT30                                   ; no green shift

        MUL     LR,R9,LR                                ; bla!
        RSB     LR,LR,#&FF00
        MUL     R5,LR,R5
        [       Version >= 123
        MOVS    R5,R5,LSR #16
        ADDNE   R5,R5,#1
        |
        MOV     R5,R5,LSR #8
        ]
        CMP     R5,#&FF
        MOVHI   R5,#&FF
30
        MOVS    LR,R0,LSR #24                           ; get the ideal blue
        BEQ     %FT40                                   ; no blue shift

        MUL     LR,R9,LR                                ; bla!
        RSB     LR,LR,#&FF00
        [       Version >= 125
        MUL     R6,LR,R6
        |
        MUL     R6,LR,R4
        ]

        [       Version >= 123
        MOVS    R6,R6,LSR #16
        ADDNE   R6,R6,#1
        |
        MOV     R6,R6,LSR #8
        ]
        CMP     R6,#&FF
        MOVHI   R6,#&FF
40
        Pull    "R7-R9,PC",,^                           ; shazam!


        END
