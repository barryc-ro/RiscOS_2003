; > Dither

;..............................................................................
; 
; getpattern 
;
; Return a suitable pattern block based on the specified physical colour,
; the routine will try hitting the cache to see what is allowed and then it
; will return the correct colour table.
;
; in    R2 physical palette entry
;       
; out   R0 GCOL
;       R1 colour number
;       R2 log2bpp of the mode
;       R5 ->pattern block containing four words of pattern data
             
getpattern ROUT
                              
        Push    "R3-R4,R6-R8,R10,LR"
                  
        MOV     R0,R2
        LDRB    R4,[WP,#CachedL2BPP]    ;Get the depth of the current mode

        BL      TryCache                ;Attempt to find in the cache
        MOVEQ   R10,R1
        BEQ     %FT10                   ;Found a suitable cache entry so skip setting one up

        Debug   dither,"Cache does not contain a suitable entry for",R2

        Push    "R0"                    ;Preserve the physical colour
        MOV     R1,#-1
        MOV     R2,#-1                  ;Return for current palette
        BL      ReturnColourNumberForMode_Code
        Pull    "R2"
        BVS     %FT20                   ;Bad idea it went wrong
                 
        TEQ     R4,#3                   ;Is it an 8BPP mode?
        MOV     R1,R0
        BLEQ    ColourNumberToGCOL_Code ;If its an 8BPP mode then setup a suitable GCOL value
        Swap    R0,R1

        Debuga  dither,"Write cache entry for",R2
        Debuga  dither,", GCOL",R0
        Debug   dither,", colour number",R1

        BL      WriteCacheEntry         ;and finally write the cache entry
10
        MOV     R3,R2                   ;Move palette entry to a safe register
        ADD     R5,R10,#CachedPattern   ;->4 word pattern block
                           
        LDR     LR,[R10,#CachedPatternValid]
        CMP     LR,#-1                  ;Is the pattern block valid?
        BNE     %FT20                   ;Yup, so no point building a new copy of it

        MOV     R0,#-1
        MOV     R1,#-1                  ;Return for the current mode
        BuildColoursForBest             ;Assemble the current palette and vector into memory
        
        Debuga  dither,"Current palette from",R0
        Debug   dither," to",R1
        Debug   dither,"Physical palette entry",R3
        Debug   dither,"Log2BPP of mode",R4
                   
        TEQ     R4,#0                   ;Is it a monochrome screen mode
        BLEQ    getpatternmono
        BLNE    getpatterncolour        ;Setup correct pattern block in workspace
        
        STR     R10,[R10,#CachedPatternValid]
20
        LDRB    R0,[R10,#CachedGCOL]    ;Return the colour number and the GCOL value
        LDRB    R1,[R10,#CachedColour] 
        MOV     R2,R4                   ;Return the Log2BPP

        Debug   dither,"GCOL",R0
        Debug   dither,"Colour number",R1
        Debug   dither,"Log2BPP",R2
        Debug   dither,"Pattern at",R5

        Pull    "R3-R4,R6-R8,R10,PC",,^

;..............................................................................
;
; getpatternmono
;
; Generate a pattern based on the current palette and log2bpp.  This routine
; assumes that it is dealing with a 1BPP mode (R4=0) and attempts to genereate
; a pattern from the 16 byte matrix.
;
; The routine first converts the physical colour into a suitable value ranging
; from 0..16, it then scans through the table looking for colours numbers
; which are less than the value calculated and toggles those bits within 
; the pattern block. 
;
; The following 4x4 matrix is used:
;
;                  0   8   2  10
;                 12   4  14   6
;                  3  11   1   9
;                 15   7  13   5 
;
; Before returning the pattern data it is expanded to fill the entrie 32x8
; pixel block.
; 
; in    R0 ->start of palette table
;       R1 ->end of palette table
;       R3 physical palette entry (&BBGGRR00)
;       R4 log2bpp of current mode
;       R5 ->buffer to fill
;
; out   all preserved

getpatternmono ROUT

        Push    "R0-R4,R6,LR"
      
        MOV     R2,#&00000000           ;Background colour for pattern
        GetBestColour
        MOV     R2,R2,LSL #31           ;Shift so in top bit...
        MOV     R2,R2,ASR #31           ;...and back down again (sign extending)

        MOV     R0,#&FF                 ;Suitable mask to get components from palette
        AND     R1,R0,R3,LSR #16        ;Extract the green element
        AND     R0,R0,R3,LSR #8         ;Extract the red element
        MOV     R3,R3,LSR #24           ;Extract the blue element

        MOV     LR,#77
        MUL     LR,R0,LR                ;  77*red
        MOV     R0,#150
        MLA     LR,R1,R0,LR             ;  77*red +150*green    
        RSB     R3,R3,R3,LSL #3         ;  7*blue
        ADD     LR,LR,R3,LSL #2         ;  77*red +150*green +28*blue
        ADD     LR,LR,#&7F
        ADD     LR,LR,LR,LSL #8         ;  &101*X
        ADD     LR,LR,#&100             ;  &101*X +&100
        MOV     R0,LR,LSR #16           ; (&101*X +&100) DIV &10000
        LDR     R1,=&10F5C
        MUL     R0,R1,R0
        MOV     R0,R0,LSR #20           ;((&101*X +&100) DIV &10000)*(16/15)

        Debug   dither2,"Background word",R2
        Debug   dither2,"Intensity",R0

        MOV     R1,#3                   ;Write four lines of pattern data
        MOV     R4,#0                   ;Index into horizontal scan lines
        MOV     R6,#2_1                 ;Bit to toggle
        ADR     R7,pattern
00
        Push    "R2"                    ;Preserve background colour
10
        LDRB    LR,[R7],#1              ;Get a byte from the pattern block
        CMP     R0,LR                   
        EORGT   R2,R2,R6,LSL R4         ;Toggle bit if value > threshold
        ADD     R4,R4,#1
        ANDS    R4,R4,#3                ;Increase bit index and wrap when > 3
        BNE     %BT10                   ;Loop back until a line of pattern data has been compiled

        AND     R2,R2,#&F
        ORR     R2,R2,R2,LSL #4
        ORR     R2,R2,R2,LSL #8
        ORR     R2,R2,R2,LSL #16        ;Combine to make a word of pattern data
        STR     R2,[R5,R1,LSL #2]       ;Which we then store in the specified buffer

        Pull    "R2"                    ;Restore the background word
        SUBS    R1,R1,#1
        BPL     %BT00                   ;Loop back until full pattern has been compiled

        Debug   dither2,"Pattern compiled and at",R5
        
        Pull    "R0-R4,R6,PC",,^

pattern = 15,7,13,5,3,11,1,9,12,4,14,6,0,8,2,10

        ALIGN

;..............................................................................
; 
; getpatterncolour
;                          
; Convert the specified physical colour into a 4x4 dither pattern for the colour
; depth of mode.  This is a general purpose routine designed to cope with 2,4 and
; 8BPP screens.
; 
; The routine generates the 4x4 cell by taking the specified physical palette entry
; and finding the closest entry to it.  It then takes the difference between
; the specified physical colour and the closest and distributes the error to the
; left, and the two pixels bellow, this then gives a block of four pixels that 
; represent the specified colour.
;
; The routine then has to order the pixels within the 4x4 grid to avoid noticeable
; aliasing.  This is done by first sorting the colours based on the &BBGGRR00
; so that the highest value is at the top, this ensures that two physical colours
; the same are then ordered into the correct pixels on the grid.
;
; The routine then attempts to find the closest two colours to place in the
; bottom left and top right (giving the checker board effect).  Then the two
; remaining pixels are placed in the top right and bottom left, the top right
; is filled with the pixel value with a lower error than the other.
; 
; in    R0 ->start of palette table
;       R1 ->end of palette table
;       R3 physical palette entry (&BBGGRR00)
;       R4 log2bpp of current mode
;       R5 ->buffer to fill
;
; out   all preserved

getpatterncolour ROUT

        Push    "R0-R11,LR"

        MOV     LR,#1
        MOV     R4,LR,LSL R4            ;Convert Log2BPP to a suitable shift for replication
        
        MOV     R2,R3                   ;Find colour of top left pixel (based on the specified RGB)
        GetBestColour         
        LDR     R8,[R0,R2,LSL #2] 
        BIC     R8,R8,#&000000FF
        ORR     R8,R8,R2                ;Combine real palette entry and colour number

        MOV     R2,R3,LSR #8            ;Calculate the red error to be passed on
        AND     R2,R2,#&FF              ;as R+R-(Ra)
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF00
        SUBS    R9,R2,LR,LSR #8 
        MOVMI   R9,#0
        CMP     R9,#&FF
        MOVGT   R9,#&FF

        MOV     R2,R3,LSR #16           ;Calculate the green error to be passed on
        AND     R2,R2,#&FF              ;as G+G-(Ga)
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF0000
        SUBS    R2,R2,LR,LSR #16
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF         
        ORR     R9,R9,R2,LSL #8
         
        MOV     R2,R3,LSR #24           ;Calculate the blue error to be passed on
        MOV     R2,R2,LSL #1            ;as B+B-(Ba)
        SUBS    R2,R2,R8,LSR #24
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF         
        ORR     R2,R9,R2,LSL #16

        MOV     R2,R2,LSL #8            ;Combine to make &BBGGRR00     
        GetBestColour                   ;Lookup colour number relating
        LDR     R10,[R0,R2,LSL #2]     
        BIC     R10,R10,#&000000FF
        ORR     R10,R10,R2              ;Get palette entry and combine with colour number

        MOV     R2,R3,LSR #8            ;Calculate the red error to be passed on
        AND     R2,R2,#&FF              ;as R+R-(Ra+Rb)/2
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF00
        AND     R11,R10,#&FF00       
        ADD     R11,R11,LR
        MOV     R11,R11,LSR #8
        SUBS    R9,R2,R11,ASR #1
        MOVMI   R9,#0
        CMP     R9,#&FF
        MOVGT   R9,#&FF

        MOV     R2,R3,LSR #16           ;Calculate the green error to be passed on
        AND     R2,R2,#&FF              ;as G+G-(Ga+Gb)/2
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF0000
        AND     R11,R10,#&FF0000       
        ADD     R11,R11,LR
        MOV     R11,R11,LSR #16
        SUBS    R2,R2,R11,ASR #1
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF
        ORR     R9,R9,R2,LSL #8

        MOV     R2,R3,LSR #24           ;Calculate the blue error to be passed on
        MOV     R2,R2,LSL #1            ;as B+B-(Ba+Bb)/2
        MOV     LR,R8,LSR #24
        ADD     R11,LR,R10,LSR #24
        SUBS    R2,R2,R11,ASR #1
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF
        ORR     R2,R9,R2,LSL #16

        MOV     R2,R2,LSL #8            ;Munge together to make a palette entry
        GetBestColour                   ;Find the closest possible colour to it
        LDR     R11,[R0,R2,LSL #2] 
        BIC     R11,R11,#&000000FF
        ORR     R11,R11,R2              ;Get palette entry and combine with colour number
                                  
        Push    "R4,R5"
        
        MOV     R2,R3,LSR #8            ;Calculate the red error to be passed on
        AND     R2,R2,#&FF              ;as R+R-(Ra+Rb+Rc)/3
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF00
        AND     R6,R10,#&FF00
        AND     R7,R11,#&FF00
        MOV     LR,LR,LSR #8
        ADD     LR,LR,R6,LSR #8
        ADD     LR,LR,R7,LSR #8
        MOV     R6,#3
        DivRem  R4,LR,R6,R7             ;Howible divide by 3!!!!
        SUBS    R9,R2,R4
        MOVMI   R9,#0
        CMP     R9,#255
        MOVGT   R9,#255
     
        MOV     R2,R3,LSR #16           ;Calculate the green error to be passed on
        AND     R2,R2,#&FF              ;as G+G-(Ga+Gb+Gc)/3
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF0000
        AND     R6,R10,#&FF0000
        AND     R7,R11,#&FF0000
        MOV     LR,LR,LSR #16
        ADD     LR,LR,R6,LSR #16
        ADD     LR,LR,R7,LSR #16
        MOV     R6,#3
        DivRem  R4,LR,R6,R7
        SUBS    R2,R2,R4
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF
        ORR     R9,R9,R2,LSL #8
      
        MOV     R2,R3,LSR #24           ;Calculate the green error to be passed on
        MOV     R2,R2,LSL #1            ;as B+B-(Ba+Bb+Bc)/3
        MOV     LR,R8,LSR #24
        ADD     LR,LR,R10,LSR #24
        ADD     LR,LR,R11,LSR #24
        MOV     R6,#3
        DivRem  R4,LR,R6,R7
        SUBS    R2,R2,R4
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF
        ORR     R2,R9,R2,LSL #16
       
        MOV     R2,R2,LSL #8
        GetBestColour                   ;Combine to make physical colour and lookup
        LDR     R9,[R0,R2,LSL #2]
        BIC     R9,R9,#&000000FF

        MOV     R9,R9,LSR #8            ;Convert the physical colour so that top eight bits are clear
        MOV     R3,R2                   ;Setup the colour number for that pixel
        AND     R2,R11,#&FF             ;Get the pixel value for the next one
        MOV     R11,R11,LSR #8          ;And convert the physical colour aswell
        AND     R1,R10,#&FF
        MOV     R10,R10,LSR #8
        AND     R0,R8,#&FF
        MOV     R8,R8,LSR #8            ;and so on until all four pixels have been seperated from their owners
                         
        CMP     R8,R10                  ;Now order the colours based on the &00BBGGRR values of each,
        Swap    R8,R10,LE               ;this should result in R8,R10,R11,R9 containing the values sorted
        Swap    R0,R1,LE                ;so that the highest is in R8.   The colour numbers also have
        CMP     R8,R11                  ;to remain in sync with the original physical colours.
        Swap    R8,R11,LE
        Swap    R0,R2,LE
        CMP     R8,R9                   ; C1 < C2 => Swap C1,C2
        Swap    R8,R9,LE                ; C1 < R3 => Swap C2,C3
        Swap    R0,R3,LE                ; C1 < R4 => Swap C3,R4
        CMP     R10,R11
        Swap    R10,R11,LE              ; C2 < R3 => Swap C2,C3
        Swap    R1,R2,LE                ; C2 < R4 => Swap C2,C4
        CMP     R10,R9
        Swap    R10,R9,LE               ; C3 < C4 => Swap C3,C4
        Swap    R1,R3,LE
        CMP     R11,R9
        Swap    R11,R9,LE
        Swap    R2,R3,LE

        Debug   dither2,"Sorted &0RGB",R8,R10,R11,R9
        Debug   dither2,"          CN",R0,R1,R2,R3

        LDR     R4,[WP,#ColourErrorLoading]
        MOV     R5,#&FF                 ;Get error loading for converting physical colours to error values

        AND     R6,R8,R5                ;Extract the red
        AND     LR,R4,R5,LSL #8
        MOV     LR,LR,LSR #8            ;And then the red error loading
        MUL     R6,LR,R6                ;Multiply them together
        AND     R7,R8,R5,LSL #8
        AND     LR,R4,R5,LSL #16
        MOV     R7,R7,LSR #8
        MOV     LR,LR,LSR #16
        MLA     R6,LR,R7,R6             ;Do the same for the green
        AND     R7,R8,R5,LSL #16
        MOV     R7,R7,LSR #16
        MOV     LR,R4,LSR #24
        MLA     R8,LR,R7,R6             ;And finally the same for the blue replacing the original physical colour

        AND     R6,R10,R5               ;Repeat the process for colour 2
        AND     LR,R4,R5,LSL #8
        MOV     LR,LR,LSR #8
        MUL     R6,LR,R6
        AND     R7,R10,R5,LSL #8
        AND     LR,R4,R5,LSL #16
        MOV     R7,R7,LSR #8
        MOV     LR,LR,LSR #16
        MLA     R6,LR,R7,R6
        AND     R7,R10,R5,LSL #16
        MOV     R7,R7,LSR #16
        MOV     LR,R4,LSR #24
        MLA     R10,LR,R7,R6

        AND     R6,R11,R5               ; ... colour 3
        AND     LR,R4,R5,LSL #8
        MOV     LR,LR,LSR #8
        MUL     R6,LR,R6
        AND     R7,R11,R5,LSL #8
        AND     LR,R4,R5,LSL #16
        MOV     R7,R7,LSR #8
        MOV     LR,LR,LSR #16
        MLA     R6,LR,R7,R6
        AND     R7,R11,R5,LSL #16
        MOV     R7,R7,LSR #16
        MOV     LR,R4,LSR #24
        MLA     R11,LR,R7,R6

        AND     R6,R9,R5                ; ... colour 4
        AND     LR,R4,R5,LSL #8
        MOV     LR,LR,LSR #8
        MUL     R6,LR,R6
        AND     R7,R9,R5,LSL #8
        AND     LR,R4,R5,LSL #16
        MOV     R7,R7,LSR #8
        MOV     LR,LR,LSR #16
        MLA     R6,LR,R7,R6
        AND     R7,R9,R5,LSL #16
        MOV     R7,R7,LSR #16
        MOV     LR,R4,LSR #24
        MLA     R9,LR,R7,R6

        Debug   dither2,"Error numbers",R8,R10,R11,R9
                     
        Pull    "R4"
       
        SUBS    LR,R8,R10               ;Setup the default difference between the first two colours
        RSBMI   LR,LR,#0                ;and then ensure that its +VE
        ORR     R6,R0,R2,LSL R4
        ORR     R7,R3,R1,LSL R4         ;Combine to make a suitable pattern
        BEQ     %FT10                   ;Catch the case of first two rows are the same....
              
        SUBS    R5,R8,R11               ;Get the difference between the top left and bottom left
        RSBMI   R5,R5,#0                ;If <0 then ensure +ve
        CMP     R5,LR
        MOVLT   LR,R5                   ;If less than the current error then build a new colour
        ORRLT   R6,R0,R1,LSL R4
        ORRLT   R7,R3,R2,LSL R4         ;Combine to make a nice pattern
  
        SUBS    R5,R8,R9                ;Get difference between top left and bottom right
        RSBMI   R5,R5,#0                ;If <0 then ensure +Ve
        CMP     R5,LR
        MOVLT   LR,R5                   ;If less than current error then compile a new pattern
        ORRLT   R6,R0,R1,LSL R4
        ORRLT   R7,R2,R3,LSL R4    

        SUBS    R5,R10,R11              ;Get difference between two different values
        RSBMI   R5,R5,#0                ;And play around with them
        CMP     R5,LR
        MOVLT   LR,R5                   ;Yup there less than the current threshold so build a new pattern
        ORRLT   R6,R1,R0,LSL R4
        ORRLT   R7,R3,R2,LSL R4
        
        SUBS    R5,R10,R9
        RSBMI   R5,R5,#0                ;Ensure of a suitable value
        CMP     R5,LR                   ;And ensure that it is valid
        MOVLT   LR,R5
        ORRLT   R6,R1,R0,LSL R4
        ORRLT   R7,R2,R3,LSL R4         ;Combine to make a suitable pattern

        SUBS    R5,R11,R9
        RSBMI   R5,R5,#0                ;Is the final check less than the current threshold
        CMP     R5,LR
        MOVLT   LR,R5                   ;Hummm?? think about this one it could be a trick question!
        ORRLT   R6,R2,R0,LSL R4
        ORRLT   R7,R1,R3,LSL R4
10
        Debug   dither2,"Pattern data",R6,R7
00
        MOV     R4,R4,LSL #1            ;Duplicated pattern within the word again
        ANDS    R4,R4,#31               ;Have we wrapped around yet then?
        ORRNE   R6,R6,R6,LSL R4
        ORRNE   R7,R7,R7,LSL R4         ;Duplicate within word again if not
        BNE     %BT00                   ;Loop back until all copied within the word

        Pull    "R5"                    ;Restore the temporary register
        STMIA   R5!,{R6,R7}             ;Write pattern into the specified buffer
        STMIA   R5!,{R6,R7}

        Pull    "R0-R11,PC",,^

;..............................................................................
; 
; 16 bit per pixel implementation of the colour dithering routine above,
; this has been optimised for this depth of device.
; 
; in    R0 ->start of palette table
;       R1 ->end of palette table
;       R3 physical palette entry (&BBGGRR00)
;       R4 log2bpp of current mode
;       R5 ->buffer to fill
;
; out   all preserved

stack_CN0       * 0
stack_CN1       * 4
stack_CN2       * 8

getpatterncolour16 ROUT

        Push    "R0-R11,LR"

        MOV     LR,#1
        MOV     R4,LR,LSL R4            ;Convert Log2BPP to a suitable shift for replication
        
        MOV     R2,R3                   ;Find colour of top left pixel (based on the specified RGB)
        GetBestColour         
        Push    "R2-R4"                 ;Push the colour number and fill stack with new values
        BL      get_physical16bpp
        MOV     R8,R2,LSR #8

        MOV     R2,R3,LSR #8            ;Calculate the red error to be passed on
        AND     R2,R2,#&FF              ;as R+R-(Ra)
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF
        SUBS    R9,R2,LR
        MOVMI   R9,#0
        CMP     R9,#&FF
        MOVGT   R9,#&FF

        MOV     R2,R3,LSR #16           ;Calculate the green error to be passed on
        AND     R2,R2,#&FF              ;as G+G-(Ga)
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF00
        SUBS    R2,R2,LR,LSR #8
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF         
        ORR     R9,R9,R2,LSL #8
         
        MOV     R2,R3,LSR #24           ;Calculate the blue error to be passed on
        MOV     R2,R2,LSL #1            ;as B+B-(Ba)
        SUBS    R2,R2,R8,LSR #16
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF         
        ORR     R2,R9,R2,LSL #16
                      
        MOV     R2,R2,LSL #8            ;Combine to make &BBGGRR00     
        GetBestColour                   ;Lookup colour number relating
        STR     R2,[sp,#stack_CN1]
        BL      get_physical16bpp
        MOV     R10,R2,LSR #8

        MOV     R2,R3,LSR #8            ;Calculate the red error to be passed on
        AND     R2,R2,#&FF              ;as R+R-(Ra+Rb)/2
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF
        AND     R11,R10,#&FF       
        ADD     R11,R11,LR
        SUBS    R9,R2,R11,ASR #1
        MOVMI   R9,#0
        CMP     R9,#&FF
        MOVGT   R9,#&FF

        MOV     R2,R3,LSR #16           ;Calculate the green error to be passed on
        AND     R2,R2,#&FF              ;as G+G-(Ga+Gb)/2
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF00
        AND     R11,R10,#&FF00
        ADD     R11,R11,LR
        MOV     R11,R11,LSR #8
        SUBS    R2,R2,R11,ASR #1
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF
        ORR     R9,R9,R2,LSL #8

        MOV     R2,R3,LSR #24           ;Calculate the blue error to be passed on
        MOV     R2,R2,LSL #1            ;as B+B-(Ba+Bb)/2
        MOV     LR,R8,LSR #16
        ADD     R11,LR,R10,LSR #16
        SUBS    R2,R2,R11,ASR #1
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF
        ORR     R2,R9,R2,LSL #16
         
        MOV     R2,R2,LSL #8            ;Munge together to make a palette entry
        GetBestColour                   ;Find the closest possible colour to it
        STR     R2,[sp,#stack_CN2]
        BL      get_physical16bpp
        MOV     R11,R2,LSR #8

        Push    "R4,R5"

        MOV     R2,R3,LSR #8            ;Calculate the red error to be passed on
        AND     R2,R2,#&FF              ;as R+R-(Ra+Rb+Rc)/3
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF
        AND     R6,R10,#&FF
        AND     R7,R11,#&FF
        ADD     LR,LR,R6
        ADD     LR,LR,R7
        MOV     R6,#3
        DivRem  R4,LR,R6,R7             ;Howible divide by 3!!!!
        SUBS    R9,R2,R4
        MOVMI   R9,#0
        CMP     R9,#255
        MOVGT   R9,#255
     
        MOV     R2,R3,LSR #16           ;Calculate the green error to be passed on
        AND     R2,R2,#&FF              ;as G+G-(Ga+Gb+Gc)/3
        MOV     R2,R2,LSL #1
        AND     LR,R8,#&FF00
        AND     R6,R10,#&FF00
        AND     R7,R11,#&FF00
        MOV     LR,LR,LSR #8
        ADD     LR,LR,R6,LSR #8
        ADD     LR,LR,R7,LSR #8
        MOV     R6,#3
        DivRem  R4,LR,R6,R7
        SUBS    R2,R2,R4
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF
        ORR     R9,R9,R2,LSL #8
      
        MOV     R2,R3,LSR #24           ;Calculate the green error to be passed on
        MOV     R2,R2,LSL #1            ;as B+B-(Ba+Bb+Bc)/3
        MOV     LR,R8,LSR #16
        ADD     LR,LR,R10,LSR #16
        ADD     LR,LR,R11,LSR #16
        MOV     R6,#3
        DivRem  R4,LR,R6,R7
        SUBS    R2,R2,R4
        MOVMI   R2,#0
        CMP     R2,#&FF
        MOVGT   R2,#&FF
        ORR     R2,R9,R2,LSL #16
                               
        MOV     R2,R2,LSL #8
        GetBestColour                   ;Combine to make physical colour and lookup
        MOV     R3,R2                   ;Take a copy of the colour number word
        BL      get_physical16bpp
        MOV     R9,R2,LSR #8
        
        ADD     R0,sp,#4*2
        LDMIA   R0,{R0-R2}              ;Pick up the colour numbers (previously stacked!)

; R8  = 1st pixel (as physical entry)
; R9  = 4th pixel (as physical entry)
; R10 = 2nd pixel (as physical entry)
; R11 = 3rd pixel (as physical entry)

; R3 = 4th pixel colour number
; R2 = 3rd pixel colour number
; R1 = 2nd pixel colour number
; R0 = 1st pixel colour number
         
        CMP     R8,R10                  ;Now order the colours based on the &00BBGGRR values of each,
        Swap    R8,R10,LE               ;this should result in R8,R10,R11,R9 containing the values sorted
        Swap    R0,R1,LE                ;so that the highest is in R8.   The colour numbers also have
        CMP     R8,R11                  ;to remain in sync with the original physical colours.
        Swap    R8,R11,LE
        Swap    R0,R2,LE
        CMP     R8,R9                   ; C1 < C2 => Swap C1,C2
        Swap    R8,R9,LE                ; C1 < R3 => Swap C2,C3
        Swap    R0,R3,LE                ; C1 < R4 => Swap C3,R4
        CMP     R10,R11
        Swap    R10,R11,LE              ; C2 < R3 => Swap C2,C3
        Swap    R1,R2,LE                ; C2 < R4 => Swap C2,C4
        CMP     R10,R9
        Swap    R10,R9,LE               ; C3 < C4 => Swap C3,C4
        Swap    R1,R3,LE
        CMP     R11,R9
        Swap    R11,R9,LE
        Swap    R2,R3,LE

        Debug   dither2,"Sorted &0RGB",R8,R10,R11,R9
        Debug   dither2,"          CN",R0,R1,R2,R3

        LDR     R4,[WP,#ColourErrorLoading]
        MOV     R5,#&FF                 ;Get error loading for converting physical colours to error values

        AND     R6,R8,R5                ;Extract the red
        AND     LR,R4,R5,LSL #8
        MOV     LR,LR,LSR #8            ;And then the red error loading
        MUL     R6,LR,R6                ;Multiply them together
        AND     R7,R8,R5,LSL #8
        AND     LR,R4,R5,LSL #16
        MOV     R7,R7,LSR #8
        MOV     LR,LR,LSR #16
        MLA     R6,LR,R7,R6             ;Do the same for the green
        AND     R7,R8,R5,LSL #16
        MOV     R7,R7,LSR #16
        MOV     LR,R4,LSR #24
        MLA     R8,LR,R7,R6             ;And finally the same for the blue replacing the original physical colour

        AND     R6,R10,R5               ;Repeat the process for colour 2
        AND     LR,R4,R5,LSL #8
        MOV     LR,LR,LSR #8
        MUL     R6,LR,R6
        AND     R7,R10,R5,LSL #8
        AND     LR,R4,R5,LSL #16
        MOV     R7,R7,LSR #8
        MOV     LR,LR,LSR #16
        MLA     R6,LR,R7,R6
        AND     R7,R10,R5,LSL #16
        MOV     R7,R7,LSR #16
        MOV     LR,R4,LSR #24
        MLA     R10,LR,R7,R6

        AND     R6,R11,R5               ; ... colour 3
        AND     LR,R4,R5,LSL #8
        MOV     LR,LR,LSR #8
        MUL     R6,LR,R6
        AND     R7,R11,R5,LSL #8
        AND     LR,R4,R5,LSL #16
        MOV     R7,R7,LSR #8
        MOV     LR,LR,LSR #16
        MLA     R6,LR,R7,R6
        AND     R7,R11,R5,LSL #16
        MOV     R7,R7,LSR #16
        MOV     LR,R4,LSR #24
        MLA     R11,LR,R7,R6

        AND     R6,R9,R5                ; ... colour 4
        AND     LR,R4,R5,LSL #8
        MOV     LR,LR,LSR #8
        MUL     R6,LR,R6
        AND     R7,R9,R5,LSL #8
        AND     LR,R4,R5,LSL #16
        MOV     R7,R7,LSR #8
        MOV     LR,LR,LSR #16
        MLA     R6,LR,R7,R6
        AND     R7,R9,R5,LSL #16
        MOV     R7,R7,LSR #16
        MOV     LR,R4,LSR #24
        MLA     R9,LR,R7,R6

        Debug   dither2,"Error numbers",R8,R10,R11,R9
                     
        Pull    "R4"
       
        SUBS    LR,R8,R10               ;Setup the default difference between the first two colours
        RSBMI   LR,LR,#0                ;and then ensure that its +VE
        ORR     R6,R0,R2,LSL R4
        ORR     R7,R3,R1,LSL R4         ;Combine to make a suitable pattern
        BEQ     %FT10                   ;Catch the case of first two rows are the same....
              
        SUBS    R5,R8,R11               ;Get the difference between the top left and bottom left
        RSBMI   R5,R5,#0                ;If <0 then ensure +ve
        CMP     R5,LR
        MOVLT   LR,R5                   ;If less than the current error then build a new colour
        ORRLT   R6,R0,R1,LSL R4
        ORRLT   R7,R3,R2,LSL R4         ;Combine to make a nice pattern
  
        SUBS    R5,R8,R9                ;Get difference between top left and bottom right
        RSBMI   R5,R5,#0                ;If <0 then ensure +Ve
        CMP     R5,LR
        MOVLT   LR,R5                   ;If less than current error then compile a new pattern
        ORRLT   R6,R0,R1,LSL R4
        ORRLT   R7,R2,R3,LSL R4    

        SUBS    R5,R10,R11              ;Get difference between two different values
        RSBMI   R5,R5,#0                ;And play around with them
        CMP     R5,LR
        MOVLT   LR,R5                   ;Yup there less than the current threshold so build a new pattern
        ORRLT   R6,R1,R0,LSL R4
        ORRLT   R7,R3,R2,LSL R4
        
        SUBS    R5,R10,R9
        RSBMI   R5,R5,#0                ;Ensure of a suitable value
        CMP     R5,LR                   ;And ensure that it is valid
        MOVLT   LR,R5
        ORRLT   R6,R1,R0,LSL R4
        ORRLT   R7,R2,R3,LSL R4         ;Combine to make a suitable pattern

        SUBS    R5,R11,R9
        RSBMI   R5,R5,#0                ;Is the final check less than the current threshold
        CMP     R5,LR
        MOVLT   LR,R5                   ;Hummm?? think about this one it could be a trick question!
        ORRLT   R6,R2,R0,LSL R4
        ORRLT   R7,R1,R3,LSL R4
10
        Debug   dither2,"Pattern data",R6,R7
00
        MOV     R4,R4,LSL #1            ;Duplicated pattern within the word again
        ANDS    R4,R4,#31               ;Have we wrapped around yet then?
        ORRNE   R6,R6,R6,LSL R4
        ORRNE   R7,R7,R7,LSL R4         ;Duplicate within word again if not
        BNE     %BT00                   ;Loop back until all copied within the word

        Pull    "R5"                    ;Restore the temporary register
        STMIA   R5!,{R6,R7}             ;Write pattern into the specified buffer
        STMIA   R5!,{R6,R7}
                   
        ADD     sp,sp,#4*3              ;Balance the stack
        Pull    "R0-R11,PC",,^



        END           
