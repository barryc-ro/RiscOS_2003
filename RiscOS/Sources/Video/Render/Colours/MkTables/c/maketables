/* maketables.c - makes the colourtrans ROM tables */

#include <stdio.h>
#include "swis.h"
#include <stdlib.h>
#include <string.h>

static unsigned int palette4[16] =
                { 0xffffff00, 0xdddddd00, 0xbbbbbb00, 0x99999900,
                  0x77777700, 0x55555500, 0x33333300, 0x00000000,
                  0x99440000, 0x00eeee00, 0x00cc0000, 0x0000dd00,
                  0xbbeeee00, 0x00885500, 0x00bbff00, 0xffbb0000 };

static unsigned int palette4g[16] =
                { 0xffffff00, 0xdddddd00, 0xbbbbbb00, 0x99999900,
                  0x77777700, 0x55555500, 0x33333300, 0x00000000,
                  0x11111100, 0xcccccc00, 0x66666600, 0x22222200,
                  0xeeeeee00, 0x44444400, 0xaaaaaa00, 0x88888800 };

char *make_32ktable(int *palette, int mode, char *table)
{
   int element;

   for (element=0;element<32768;element++)
   {
      int      palette_entry;
      int      colour;
      int      r,g,b;
//      palette_entry = ((element & 0x7c00) << 17) | ((element & 0x3e0) << 14) | ((element & 0x1f) << 11);
      r = (element >> 10) * 255/31;
      g = ((element >> 5) & 0x1f) * 255/31;
      b = (element & 0x1f) * 255/31;
//printf("rgb = (%d,%d,%d)\n", r, g, b);
      palette_entry = (r << 24) | (g << 16) | (b << 8);
      _swi(ColourTrans_ReturnColourNumberForMode, _IN(0) | _IN(1) | _IN(2) | _OUT(0),
                palette_entry, mode, palette, &colour);
//printf("pal %x = (%d)\n", palette_entry, colour);
      table[element] = (unsigned char)(colour & 0xff);
   }
   return(table);
}

int main(int argc, char *argv[])
{
  int          *palette;
  char         *table;
  unsigned int loop,
               r,g,b;
  char         outfile[256];
  static int   modeselector8bpp[10] = {1, 800, 600, 3, -1, 0, 128, 3, 255, -1}; /* 800x600 8bpp new format mode with
                                                                                   full colour palette */
  static int   modeselector4bpp[6] = {1, 800, 600, 2, -1, -1}; /* 800x600 4bpp new format mode */

  palette = (int *)malloc(256*sizeof(int));
  table = (char *)malloc(32*32*32*sizeof(char));

/* 8bpp desktop */
  printf("Constructing 8bpp desktop tables\n");
  for (loop=0;loop<256;loop++)
  {
    r = g = b = 0;
    if (loop & 0x80) b |= 0x88; /* top bit blue */
    if (loop & 0x40) g |= 0x88; /* top bit green */
    if (loop & 0x20) g |= 0x44; /* 2nd bit green */
    if (loop & 0x10) r |= 0x88; /* top bit red */
    if (loop & 0x08) b |= 0x44; /* 2nd bit blue */
    if (loop & 0x04) r |= 0x44; /* 2nd bit red */
    if (loop & 0x02)
      { r |= 0x22; g |= 0x22; b |= 0x22; } /* 3rd bit, added white */
    if (loop & 0x01)
      { r |= 0x11; g |= 0x11; b |= 0x11; } /* 4th bit, added white */
    palette[loop] = (b<<24) | (g<<16) | (r<<8);
  }
  sprintf(outfile,"%s.Palettes.8desktop",argv[1]);
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, palette, palette+256);
  printf("  - written palette.\n");
  memset(table,0,32*32*32);
  table = make_32ktable(palette, (int)modeselector8bpp, table);
  sprintf(outfile,"%s.Tables.8desktop",argv[1]);
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, table, table+32*32*32);
  printf("  - written table.\n");

/* 8bpp grey */

  printf("Constructing 8bpp grey tables\n");
  for (loop=0;loop<256;loop++)
    palette[loop] = (loop<<24) | (loop<<16) | (loop<<8);
  sprintf(outfile,"%s.Palettes.8greys",argv[1]);
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, palette, palette+256);
  printf("  - written palette.\n");
  memset(table,0,32*32*32);
  table = make_32ktable(palette, (int)modeselector8bpp, table);
  sprintf(outfile,"%s.Tables.8greys",argv[1]);
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, table, table+32*32*32);
  printf("  - written table.\n");

/* 4bpp desktop */

  printf("Constructing 4bpp desktop tables\n");
  sprintf(outfile,"%s.Palettes.4desktop",argv[1]);
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, palette4, palette4+16);
  printf("  - written palette.\n");
  memset(table,0,32*32*32);
  table = make_32ktable((int *)palette4, (int)modeselector4bpp, table);
  sprintf(outfile,"%s.Tables.4desktop",argv[1]);
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, table, table+32*32*32);
  printf("  - written table.\n");

/* 4bpp grey */

  printf("Constructing 4bpp grey tables\n");
  sprintf(outfile,"%s.Palettes.4greys",argv[1]);
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, palette4g, palette4g+16);
  printf("  - written palette.\n");
  memset(table,0,32*32*32);
  table = make_32ktable((int *)palette4g, (int)modeselector4bpp, table);
  sprintf(outfile,"%s.Tables.4greys",argv[1]);
  _swi(OS_File, _IN(0) | _IN(1) | _IN(2) | _IN(4) | _IN(5), 10, outfile, 0xffd, table, table+32*32*32);
  printf("  - written table.\n");

  free(palette);
  free(table);

  return(0);
}
