; > Source
                               
; Use: PaletteV handler for the Serial Port Graphics Enhancer.
; Author: David De Vorchik (dvorchik@acorn.co.uk)
; 
; ©1991 Acorn Computers Ltd, Cambridge, England.                 

; ********************
; *** Changes List ***
; ********************
;
; 09-Apr-91 0.01 DDV Created.
; 14-Apr-91 0.02 DDV Modified only to work in PC arnold modes.
; 16-Mar-92 0.03 DDV Bug fix: resolving workspace properly.
; 26-Mar-92 0.04 DDV Bug fix: finding the palette works again - ha!
;
                GET     hdr:ListOpts
                GET     hdr:Macros
                GET     hdr:System
                GET     hdr:ModHand
                GET     hdr:Services
                GET     hdr:Symbols


; define some new SWIs for graphics card.

XEnhancer_PaletteRead   * &42A43 +Auto_Error_SWI_bit
XEnhancer_ModeValid     * &42A51 +Auto_Error_SWI_bit


; now define workspace

                ^ 0, wp
vectors         # 4                                     ; =0 then vectors not owned, else are
modevalid       # 4                                     ; =0 then mode not valid, else is

workspace       * :INDEX: @


; first we have a module header

module_start    & 0                                     ; not an application
                & init -module_start                    ; -> init code
                & final -module_start                   ; -> finalise code
                & service -module_start                 ; -> service code
                
                & title -module_start                   ; -> title string
                & help -module_start                    ; -> help string
                & 0

title           = "PaletteReader", 0
help            = "Palette Reader", 9, "0.04 (26 Mar 1992)", 0
                ALIGN



; init code, this handles the claiming of the paletteV, the private
; word is used as a vector claimed flag.
;

init            ROUT

                Push    "r1-r3, lr"
                               
                LDR     r2, [wp]
                TEQ     r2, #0                          ; any workspace?
                BNE     %00

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace                  ; = amount of workspace
                SWI     XOS_Module
                Pull    "r1-r3, pc", VS                 ; if could not claim then return

                STR     r2, [wp]                        ; otherwise setup workspace pointer
00              MOV     wp, r2                

                MOV     r0, #0
                STR     r0, vectors                     ; vectors not owned currently

                MOV     r0, #PaletteV
                ADR     r1, palettecode
                MOV     r2, wp
                SWI     XOS_Claim                       ; attempt to claim the vector
                MOVVC   r0, #-1
                STRVC   r0, vectors                     ; if it worked then setup the private word to be non zero
                BLVC    checkmode                       ; validate the mode

                Pull    "r1-r3, pc"


; finalise, this handles closing down the module, if the private word
; is non-zero then we must release the palette vector.
;

final           ROUT

                Push    "r1-r3, lr"
                               
                LDR     wp, [wp]                        ; -> workspace
                                                                      
                LDR     r0, vectors                     ; is the palette vector owned?
                TEQ     r0, #0
                Pull    "r1-r3, pc", EQ, ^

                MOV     r0, #PaletteV
                ADR     r1, palettecode
                MOV     r2, wp
                SWI     XOS_Release                     ; attempt to free it
                MOVVC   r0, #0
                STRVC   r0, [wp]                        ; yes, it worked so release the private word

                Pull    "r1-r3, pc"
                                   

; handle service codes to reset the module, this simply means marking the
; vector as not owned on Service_Reset and then attempting to reclaim.
;

service         ROUT

                LDR     wp, [wp]

                TEQ     r1, #Service_ModeChange
                BEQ     checkmode                       ; if a mode change then validate mode

                TEQ     r1, #Service_Reset
                MOVNES  pc, lr                          ; not a service_reset!

                Push    "r0-r3, lr"
                                
                MOV     r0, #0
                STR     r0, vectors                     ; mark as not owned at the moment

                MOV     r0, #PaletteV
                ADR     r1, palettecode                 ; -> palette routine
                MOV     r2, wp
                SWI     XOS_Claim                       ; attempt to claim the vector
                MOVVC   r0, #-1
                STRVC   r0, vectors                     ; it worked so mark as so for finalise
                BLVC    checkmode

                Pull    "r0-r3, pc",,^



; validate a mode with the graphics enhancer done on a mode change or when the
; module is installed.

checkmode       ROUT

                Push    "r0-r2, lr"

                MOV     r0, #135
                SWI     XOS_Byte                        ; r2  = mode number
                MOVVC   r0, r2
                SWIVC   XEnhancer_ModeValid             ; is the mode valid, r0 =1
                MOVVS   r0, #0
                STR     r0, modevalid                   ; store mode valid flag

                Pull    "r0-r2, pc",,^



; palettecode, this simply handles the reading the palette, this is done
; using the graphics card SWI.
;

palettecode     ROUT

                TEQ     r4, #1                          ; paletteV read?
                MOVNES  pc, lr                          ; no, so pass down the chain

                Push    "r0-r1, lr"   

                LDR     r1, modevalid
                TEQ     r1, #0                          ; is the mode valid?
                BEQ     %00

                SWI     XEnhancer_PaletteRead
                BVS     %00                             ; if fails or not valid then exit

                MOVVC   r4, r1, LSL #8
                ORRVC   r4, r4, r2, LSL #16
                ORRVC   r4, r4, r3, LSL #24             ; munge together to make &BGRx
                MOVVC   r2, r4
                MOVVC   r3, r4                          ; and then setup the colours for flash 1, flash 2
                MOVVC   r4, #0                          ; flag =0, vector claimed

                Pull    "r0-r1, lr, pc",,^              ; return with valid bits
00
                Pull    "r0-r1, pc",,^                  ; don't claim and just try next entry


                END
