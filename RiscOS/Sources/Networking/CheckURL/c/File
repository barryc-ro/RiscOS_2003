/**************************************************************/
/* File   : File.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Configuration file handler.                       */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 08-Mar-2000 (ADH): Imported from Video Control.   */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Area.h"
#include "CheckURL.h"
#include "Generic.h"
#include "Module.h"
#include "URLutils.h"
#include "Utils.h"

#include "File.h"

/* The 'file' struct is used to allow a veneer to be placed over */
/* fgetc and so forth which will either read from a real file or */
/* read from a block of memory behaving as if it were a file.    */

typedef struct file
{
  bool memory;

  union
  {
    FILE * f;
    char * ptr;

  } data;

} file;

/* Local functions */

static _kernel_oserror * file_open_file   (file * f, char * ptr, bool is_filename);
static void              file_close_file  (file * f);

static int               file_getc        (file * f);
static long int          file_ftell       (file * f);
static int               file_fseek       (file * f, long int pos);

static int               file_read_string (file * f, char ** string, bool allow_white);
static int               file_read_line   (file * f, char ** fragment, char ** parameter);

/**************************************************************/
/* file_read_file()                                           */
/*                                                            */
/* Implement CheckURL_ReadFile. See the Check URL             */
/* specification, 2501,846/FS, for more.                      */
/**************************************************************/

_kernel_oserror * file_read_file(_kernel_swi_regs * r)
{
  dprintf(("", "file_read_file: Called\n"));

  if (r->r[1] == 0) return make_error(cu_ERROR_CANNOT_OPEN_CONFIG, 0);

  return file_read_configuration(NULL, (char *) r->r[1], true);
}

/**************************************************************/
/* file_open_file()                                           */
/*                                                            */
/* Open a configuration file either from disc or from RAM.    */
/* Files held in memory are terminated by a NUL byte.         */
/*                                                            */
/* Parameters: Pointer to a file struct to fill in;           */
/*                                                            */
/*             Pointer to a filename or the base of the block */
/*             of memory to 'open';                           */
/*                                                            */
/*             true if the above is a filename, else false.   */
/*                                                            */
/* Returns:    If no error is returned, the given file struct */
/*             is updated and ready for use. Otherwise it is  */
/*             unaltered.                                     */
/**************************************************************/

static _kernel_oserror * file_open_file(file * f, char * ptr, bool is_filename)
{
  if (is_filename == false)
  {
    dprintf(("", "file_open_file: Called for block of memory\n"));

    f->memory   = true;
    f->data.ptr = ptr;
  }
  else
  {
    dprintf(("", "file_open_file: Called for file '%s'\n", ptr));

    f->memory   = false;
    f->data.f   = fopen(ptr, "rb");

    if (f->data.f == NULL)
    {
      dprintf(("", "file_open_file: Can't open file, generating CANNOT_OPEN_CONFIG\n"));
      return make_error(cu_ERROR_CANNOT_OPEN_CONFIG, 0);
    }
  }

  dprintf(("", "file_open_file: Successful\n"));

  return NULL;
}

/**************************************************************/
/* file_close_file()                                          */
/*                                                            */
/* Close a file.                                              */
/*                                                            */
/* Parameters: Pointer to a relevant file struct.             */
/**************************************************************/

static void file_close_file(file * f)
{
  /* Ignore fclose errors */

  if (!f->memory) fclose(f->data.f);
}

/**************************************************************/
/* file_getc()                                                */
/*                                                            */
/* Read a character through the given file struct.            */
/*                                                            */
/* Parameters: Pointer to the file struct to use.             */
/*                                                            */
/* Returns:    Character read or EOF for end of file.         */
/**************************************************************/

static int file_getc(file * f)
{
  if (f->memory)
  {
    char c = *(f->data.ptr);

    if (c == '\0')
    {
      return EOF;
    }
    else
    {
      f->data.ptr++;
      return (int) c;
    }
  }
  else
  {
    return fgetc(f->data.f);
  }
}

/**************************************************************/
/* file_ftell()                                               */
/*                                                            */
/* Return the file pointer for the given file struct.         */
/*                                                            */
/* Parameters: Pointer to the file struct to use.             */
/*                                                            */
/* Returns:    Opaque file pointer (to use with file_fseek)   */
/*             or -1L for an error.                           */
/**************************************************************/

static long int file_ftell(file * f)
{
  if (f->memory)
  {
    return (long int) f->data.ptr;
  }
  else
  {
    return ftell(f->data.f);
  }
}

/**************************************************************/
/* file_fseek()                                               */
/*                                                            */
/* Move the file pointer through a given file struct. There   */
/* is no sanity checking for RAM based items, so be careful.  */
/*                                                            */
/* Parameters: Pointer to the file struct to use;             */
/*                                                            */
/*             Position to seek to (from file_ftell); seeking */
/*             is relative to the start of the file.          */
/*                                                            */
/* Returns:    0 if successful, else there was an error.      */
/**************************************************************/

static int file_fseek(file * f, long int pos)
{
  if (f->memory)
  {
    f->data.ptr = (char *) pos;
    return 0;
  }
  else
  {
    return fseek(f->data.f, pos, SEEK_SET);
  }
}

/**************************************************************/
/* file_read_string()                                         */
/*                                                            */
/* Read a string from a config file. The string is terminated */
/* by EOF or some kinds of white space (see Parameters list). */
/*                                                            */
/* Parameters: file * for the file to read;                   */
/*                                                            */
/*             Pointer to a char * which will be updated to   */
/*             point to a malloced block holding the string,  */
/*             NUL terminated. It is only NULL if no memory   */
/*             could be allocated;                            */
/*                                                            */
/*             true to allow white space (except CR or LF) in */
/*             the string. else false.                        */
/*                                                            */
/* Returns:    Zero or EOF if the file ran out. The file      */
/*             pointer points to the first character after    */
/*             the string. If a memory allocation fails (see  */
/*             Parameters above) the return value is          */
/*             irrelevant and the file pointer is restored to */
/*             its on-entry value.                            */
/*                                                            */
/* Assumes:    All parameters are non-NULL and valid. If the  */
/*             first character the function reads is white    */
/*             space, results are undefined.                  */
/**************************************************************/

static int file_read_string(file * f, char ** string, bool allow_white)
{
  long int pos = file_ftell(f);
  size_t   len = 0;
  size_t   i;
  int      c;

  dprintf(("", "file_read_string: Called\n"));

  /* Find the length */

  for (;;)
  {
    c = file_getc(f);

    if (
         c != EOF &&
         (
           (
             allow_white == false &&
             c > ' '
           )
           ||
           (
             allow_white == true &&
             c != '\r'           &&
             c != '\n'
           )
         )
       )
    {
      len++;
    }
    else
    {
      break;
    }
  }

  dprintf(("", "file_read_string: Length is %d\n", len));

  /* Put the file pointer back */

  if (len > 0) file_fseek(f, pos);

  /* Allocate space for string plus terminator */

  *string = malloc(len + 1);
  if (!*string) return 0;

  /* Read and terminate it */

  for (i = 0; i < len; i++)
  {
    (*string)[i] = file_getc(f);
  }

  (*string)[len] = '\0';

  /* Done */

  dprintf(("", "file_read_string: Ended up with '%s', on-exit c = %d\n", *string, c));

  if (c == EOF) return EOF;
  else          return 0;
}

/**************************************************************/
/* file_read_line()                                           */
/*                                                            */
/* Read a line from a configuration file.                     */
/*                                                            */
/* Parameters: Pointer to the file struct to read through;    */
/*                                                            */
/*             Pointer to a char * which is updated to point  */
/*             to a fragment on this line (malloced);         */
/*                                                            */
/*             Pointer to a char * which is updated to point  */
/*             to a parameter on this line (malloced).        */
/*                                                            */
/* Returns:    It is the callers responsibility to free the   */
/*             fragment and/or parameter strings when no      */
/*             longer needed. EOF is returned for an end of   */
/*             file or in-read error condition, 0 is returned */
/*             if things are OK. If there is no fragment or   */
/*             parameter, the line was empty or a comment. If */
/*             there is no parameter, the line just held a    */
/*             fragment -> interpret as an area name instead. */
/*             Returns 1 for 'out of memory'; this can happen */
/*             for the fragment or parameter string so if the */
/*             caller sees this it may need to free one or    */
/*             the other (the two char * pointers will still  */
/*             be updated and valid/NULL if 1 is returned).   */
/*                                                            */
/* Assumes:    All pointers are non-NULL and valid.           */
/**************************************************************/

static int file_read_line(file * f, char ** fragment, char ** parameter)
{
  int c;
  int r = EOF;

  *fragment = *parameter = NULL;

  /* Skip past any CR or LF characters */

  do
  {
    c = file_getc(f);
  }
  while (c == '\r' || c == '\n');

  /* Examine what we now have */

  if (c == EOF)
  {
    /* Run out of file */

    return EOF;
  }
  else if (c == '#')
  {
    /* This is a comment - search for CR/LF */

    do
    {
      c = file_getc(f);
    }
    while (c != '\r' && c != '\n' && c != EOF);

    if (c == EOF) return EOF;
    else          return 0;
  }
  else
  {
    int loop;

    /* This is not a comment line; read the fragment and parameter */

    for (loop = 0; loop < 2; loop++)
    {
      while (c <= ' ' && c != '\r' && c != '\n' && c != EOF) c = file_getc(f);

      if (c == EOF)                    return EOF;
      else if (c == '\r' || c == '\n') return 0;
      else
      {
        long int l = file_ftell(f);

        if (l > 0) file_fseek(f, l - 1);
      }

      /* Read the fragment */

      switch (loop)
      {
        case 0:
        {
          r = file_read_string(f, fragment, false);
          if (fragment == NULL) return 1;
          c = file_getc(f);
        }
        break;

        case 1:
        {
          r = file_read_string(f, parameter, true);
          if (parameter == NULL) return 1;
        }
        break;
      }

      if (r == EOF) return EOF;
    }
  }

  return 0;
}

/**************************************************************/
/* file_read_configuration()                                  */
/*                                                            */
/* Read a configuration file into a list of config structs.   */
/*                                                            */
/* Parameters: Pointer to a config * updated with the head    */
/*             item of the list (may not be NULL) if the      */
/*             config file contains no areas and you just     */
/*             want to read fragments and parameters, else    */
/*             NULL to create areas as required;              */
/*                                                            */
/*             Pointer to a filename or the base of the block */
/*             of memory to parse;                            */
/*                                                            */
/*             true if the above is a filename, else false.   */
/**************************************************************/

_kernel_oserror * file_read_configuration(config ** head, char * ptr, bool is_filename)
{
  file              f;
  int               c;
  area            * current = NULL;
  config          * new;
  _kernel_oserror * e;

  dprintf(("", "file_read_configuration: For head item %p\n", head));

  e = file_open_file(&f, ptr, is_filename);
  if (e) return e;

  do
  {
    char * fragment;
    char * parameter;

    c = file_read_line(&f, &fragment, &parameter);

    if (c == 1)
    {
      /* Out of memory */

      dprintf(("", "file_read_configuration: Out of memory (string(s))\n"));

      free(fragment);
      free(parameter);

      file_close_file(&f);
      return make_error(cu_ERROR_MEMORY_EXHAUSTED, 0);
    }
    else
    {
      if (fragment != NULL)
      {
        if (parameter != NULL)
        {
          /* If we've a fragment and parameter, want a new config item. */
          /* Trouble is, do we have an area to put it into?             */

          if (current == NULL && head == NULL)
          {
            dprintf(("", "file_read_configuration: Fragment before area, format is invalid\n"));

            free(fragment);
            free(parameter);

            file_close_file(&f);
            return make_error(cu_ERROR_INVALID_CONFIG, 0);
          }

          /* Create the new item */

          new = calloc(1, sizeof(config));

          if (new == NULL)
          {
            dprintf(("", "file_read_configuration: Out of memory (new config)\n"));

            free(fragment);
            free(parameter);

            file_close_file(&f);
            return make_error(cu_ERROR_MEMORY_EXHAUSTED, 0);
          }

          new->fragment  = fragment;
          new->parameter = parameter;

          /* Link it in */

          if (head == NULL)
          {
            new->next     = current->head;
            current->head = new;
          }
          else
          {
            new->next = *head;
            *head     = new;
          }
        }
        else
        {
          area * found;

          /* New area; but are we allowed areas at all? */

          if (head != NULL)
          {
            dprintf(("", "file_read_configuration: Area found but no areas allowed, format is invalid\n"));

            free(fragment);

            file_close_file(&f);

            if (is_filename) return make_error(cu_ERROR_INVALID_CONFIG,    0);
            else             return make_error(cu_ERROR_INVALID_FRAGMENTS, 0);
          }

          /* Add the new area and make it current */

          found = area_find(fragment, NULL);

          if (found == NULL)
          {
            current = area_add(fragment);
          }
          else
          {
            current = found;
          }

          free(fragment);

          if (current == NULL)
          {
            dprintf(("", "file_read_configuration: Out of memory (new area)\n"));

            file_close_file(&f);
            return make_error(cu_ERROR_MEMORY_EXHAUSTED, 0);
          }
        }
      }
    }
  }
  while (c != EOF);

  file_close_file(&f);

  dprintf(("", "file_read_configuration: Successful\n"));

  return NULL;
}

/**************************************************************/
/* file_free_configuration()                                  */
/*                                                            */
/* Free config data in a given list.                          */
/*                                                            */
/* Parameters: Pointer to the config item at the head of the  */
/*             list to free.                                  */
/**************************************************************/

void file_free_configuration(config * head)
{
  config * next;

  dprintf(("", "file_free_configuration: Called for head item %p\n", head));

  while (head != NULL)
  {
    next = head->next;

    free(head->fragment);
    free(head->parameter);
    free(head);

    head = next;
  }

  dprintf(("", "file_free_configuration: Successful\n"));

  return;
}
