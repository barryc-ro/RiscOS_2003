/**************************************************************/
/* File   : Module.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: The CheckURL module matches full URLs against     */
/*          URL fragments. See 2501,846/FS for details.       */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 08-Mar-2000: Created.                             */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Area.h"
#include "Check.h"
#include "CheckURL.h"
#include "CUHdr.h"
#include "File.h"
#include "Utils.h"

#include "Module.h"

/*
 * This macro, when defined, includes the code for the two debugging *-commands
 * You need to enable the commands in the CMHG header file too.
 */

#if CMHG_VERSION < 516

  #define CMHG_CONST

#else

  #define CMHG_CONST const

#endif

/*
 * Turn on to include extra debugging via. *-commands; you will
 * need to modify VCHdr.cmhg too.
 */

#undef TRACE2

/*
 * TinySupport SWIs. This does not work if any library static data
 * is used within the module. This means errno (__errno) and __ctype
 * (as used by any macro call to is.... functions). If you re-enable
 * this SWI call, this module will fail to work at all.
 */

#define NO_TINYSTUBS

#ifdef ROM
  #ifndef NO_TINYSTUBS
    static _kernel_oserror *__ROM;
    #define TinySupport_Share   (0x82c43)
    #define TinySupport_Die     (0x82c41)
  #endif
#endif

#ifndef ROM
  extern int messages_file(void);
#endif

#ifndef ROM
  #ifdef DEFINE_ERRNO
    int __errno;
  #endif
#endif

/* Local variables */

static void * module_wsp                        = NULL;
static bool   clibrary_realloc_routine_is_buggy = false;

#ifdef ROM
  static bool retry_config_load = false;
#endif

/* Local functions */

static void module_check_os_version (void);
static void module_atexit           (void);

/**************************************************************/
/* module_check_os_version()                                  */
/*                                                            */
/* Set clibrary_realloc_routine_is_buggy non zero if the OS   */
/* version is sufficiently old, else set it to zero.          */
/*                                                            */
/* See also module_realloc.                                   */
/**************************************************************/

static void module_check_os_version(void)
{
  int os;

  (void) _swix(OS_Byte,
               _INR(0,2) | _OUT(1),

               129,
               0,
               255,

               &os);

  clibrary_realloc_routine_is_buggy = os <= 0xA4 ? true : false;
}

/**************************************************************/
/* module_init()                                              */
/*                                                            */
/* Startup code, usual initialisation entry point stuff.      */
/*                                                            */
/* Parameters: As normal for a CMHG initialisation function.  */
/**************************************************************/

_kernel_oserror * module_init(CMHG_CONST char * cmd_fail, int podule_base, void * pw)
{
  _kernel_oserror * e;

  module_wsp = pw;

  (void) cmd_fail;
  (void) podule_base;

  #ifdef ROM
    #ifndef NO_TINYSTUBS

      __ROM = _swix(TinySupport_Share,
                    _IN(0),

                    pw);

    #endif
  #endif

  #ifdef TRACE
    {
      debug_device dev = TML_OUTPUT;

      debug_initialise("CheckURL", "ADFS::4.$.CUdebug", NULL);
      debug_atexit();
      debug_set_screen_cornering(FALSE);
      debug_set_unbuffered_files(TRUE);
      debug_set_device(dev);
    }
  #endif

  dprintf(("", "\nHello\n\n"));

  /* Keep this after debuglib initialisation or you won't */
  /* see any debug output from within the atexit handler. */

  atexit(module_atexit);
  module_check_os_version();

  #ifndef ROM

    e = _swix(ResourceFS_RegisterFiles,
              _IN(0),

              messages_file());

    if (e != NULL) return e;

  #endif

  if (getenv(Module_Title "$Path"))
  {
    e = messages_file_open(Module_Title ":Messages");
  }
  else
  {
    e = messages_file_open("Resources:$.Resources.CheckURL.Messages");
  }

  #if CMHG_VERSION < 530

    /*
     * Earlier CMHGs won't call the atexit() handler if we return an
     * error here 'cos its bust. Could work around it but since there
     * is a fixed version available, insist on it.
     */

    #error You need CMHG 5.30 or later to build RTSPMB.

  #else

    if (e != NULL) return e;

  #endif

  /* Read the config file; suppress "can't open" errors, allow */
  /* others (e.g. no memory, bad format)                       */

  e = file_read_configuration(NULL, ConfigFile, true);

  if (
       e != NULL &&
       e->errnum == cu_ERROR_CANNOT_OPEN_CONFIG
     )
  {
    e = NULL;

    #ifdef ROM
      retry_config_load = true;
    #endif
  }

  return e;
}

/**************************************************************/
/* module_atexit()                                            */
/*                                                            */
/* atexit() handler for the module. Note that this is only    */
/* correctly called if the module is built with CMHG 5.30 or  */
/* later.                                                     */
/**************************************************************/

static void module_atexit(void)
{
  dprintf(("", "module_atexit: Called\n"));

  messages_file_close();

  #ifndef ROM

    (void) _swix(ResourceFS_DeregisterFiles,
                 _IN(0),

                 messages_file());

  #endif

  area_delete_all();

  #ifdef ROM
    #ifndef NO_TINYSTUBS
      if(!__ROM) _swix(TinySupport_Die, 0);
    #endif
  #endif
}

/**************************************************************/
/* swi_handler()                                              */
/*                                                            */
/* Simple SWI dispatch table.                                 */
/*                                                            */
/* Parameters: As normal for a CMHG SWI handler.              */
/**************************************************************/

_kernel_oserror * swi_handler(int swi_no, _kernel_swi_regs * r, void * pw)
{
  (void) pw;

  #ifdef ROM
    if (retry_config_load)
    {
      retry_config_load = false;
      file_read_configuration(NULL, ConfigFile, true);
    }
  #endif

  switch(swi_no)
  {
    case CheckURL_Check                  - CheckURL_00: /* CheckURL_Check          */
      return (check_check(r));                          /* Check.c                 */

    case CheckURL_ReadAreaID             - CheckURL_00: /* CheckURL_ReadAreaID     */
      return (area_read_area_id(r));                    /* Area.c                  */

    case CheckURL_ReadFile               - CheckURL_00: /* CheckURL_ReadFile       */
      return (file_read_file(r));                       /* File.c                  */

    case CheckURL_AddArea                - CheckURL_00: /* CheckURL_AddArea        */
      return (area_add_area(r));                        /* Area.c                  */

    case CheckURL_DeleteArea             - CheckURL_00: /* CheckURL_DeleteArea     */
      return (area_delete_area(r));                     /* Area.c                  */

    default:
      return error_BAD_SWI;
  }
}

/**************************************************************/
/* command_line_handler()                                     */
/*                                                            */
/* Straightforward command handler.                           */
/*                                                            */
/* Parameters: As normal for a CMHG command line handler.     */
/**************************************************************/

_kernel_oserror * command_line_handler(CMHG_CONST char * a, int ac, int cmd_no, void * pw)
{
  (void) a;
  (void) ac;
  (void) pw;

  switch (cmd_no)
  {
    case CMD_CheckURLAreas:
      return area_list();

    default:
      break;
  }

  return NULL;
}

/**************************************************************/
/* module_realloc()                                           */
/*                                                            */
/* RISC OS 3.1's SVC mode realloc is broken, so here's our    */
/* own version. Use it if clibrary_realloc_routine_is_buggy   */
/* is set after calling module_check_os_version.              */
/*                                                            */
/* Parameters: As realloc.                                    */
/*                                                            */
/* Returns:    As realloc.                                    */
/**************************************************************/

void * module_realloc(void * ptr, size_t size)
{
  dprintf(("", "module_realloc: Called (&%08X, %d)\n", (int) ptr, size));

  if (clibrary_realloc_routine_is_buggy == false) return realloc(ptr, size);

  if (ptr == NULL)
  {
    return malloc(size);
  }

  if (size == 0)
  {
    free(ptr);
    return NULL;
  }
  else
  {
    const int    * rma_block = ptr;
    const size_t   newsize   = size - (rma_block[-1] - 4);
    char         * newptr;

    if (
         _swix(OS_Module,
               _IN(0) | _INR(2,3) | _OUT(2),

               0xD,
               ptr,
               newsize,

               &newptr)

         != NULL
       )
       return NULL;

    return newptr;
  }
}
