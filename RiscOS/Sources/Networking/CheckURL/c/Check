/**************************************************************/
/* Area   : Check.c                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: URL to URL fragment comparison.                   */
/*                                                            */
/* Author : A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 08-Mar-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Area.h"
#include "CheckURL.h"
#include "File.h"
#include "Generic.h"
#include "ParseURL.h"
#include "URLUtils.h"
#include "Utils.h"

#include "Check.h"

/**************************************************************/
/* check_check()                                              */
/*                                                            */
/* Implement CheckURL_Check. See the Check URL specification, */
/* 2501,846/FS, for more.                                     */
/**************************************************************/

_kernel_oserror * check_check(_kernel_swi_regs * r)
{
  area            * found;
  config          * match;
  url_description * d;
  bool              f = false;

  dprintf(("", "check_check: Called\n"));

  if (r->r[1] == 0 || r->r[2] == 0)
  {
    dprintf(("", "check_check: R1 or R2 are zero! Bailing\n"));
    return NULL;
  }

  if ((r->r[0] & CU_Check_OnEntry_GivenAreaID) != 0)
  {
    /* Area ID to name */

    found = area_resolve(r->r[1]);
    if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);
  }
  else
  {
    /* Name to area ID */

    found = area_find((const char *) r->r[1], NULL);
    if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);
  }

  dprintf(("", "check_check: Area %p\n", found));

  if ((r->r[0] & CU_Check_OnEntry_GivenURLDescriptor) != 0)
  {
    /* Given a URL descriptor */

    d = (url_description *) r->r[2];
  }
  else
  {
    char * canonical;

    /* Construct a URL descriptor */

    dprintf(("", "check_check: Descriptor required for '%s'\n",(const char *) r->r[2]));

    canonical = parseurl_canonicalise(parseurlflags_APPLY_HEX_ENCODE, (char *) r->r[2]);
    d         = NULL;

    if (canonical != NULL) d = urlutils_return_description(canonical);

    free(canonical);

    if (d == NULL || canonical == NULL)
    {
      dprintf(("", "check_check: d or canonical is NULL, out of memory\n"));
      return make_error(cu_ERROR_MEMORY_EXHAUSTED, 0);
    }

    f = true;
  }

  dprintf(("",
           "check_check: URL %p -> '%s', '%s', '%s', '%s'\n",
           d,
           d->host  ? d->host  : "<NULL>",
           d->port  ? d->port  : "<NULL>",
           d->path  ? d->path  : "<NULL>",
           d->query ? d->query : "<NULL>"));

  /* Try to match within the area */

  match = found->head;

  while (match)
  {
    if (match->parameter != NULL)
    {
      char * dupm = Strdup(match->fragment);
      int    result;

      if (dupm == NULL)
      {
        dprintf(("", "check_check: Can't duplicate match fragment, out of memory\n"));

        if (f) urlutils_free_description(d);
        return make_error(cu_ERROR_MEMORY_EXHAUSTED, 0);
      }

      result = urlutils_matches_special(d, dupm);

      free(dupm);

      if (result == 1)
      {
        dprintf(("", "check_check: Matched to '%s'\n",match->fragment));

        if (f) urlutils_free_description(d);

        r->r[0] = CU_Check_OnExit_MatchFound;
        r->r[1] = (int) match->parameter;

        return NULL;
      }
    }

    match = match->next;
  }

  if (f) urlutils_free_description(d);

  r->r[0] = 0;

  dprintf(("", "check_check: No match, exitting\n"));

  return NULL;
}
