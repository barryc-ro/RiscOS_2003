/**************************************************************/
/* Area   : Area.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Area management.                                  */
/*                                                            */
/* Author : A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 08-Mar-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "CheckURL.h"
#include "File.h"
#include "Generic.h"
#include "Utils.h"

#include "Area.h"

/* Local variables */

static area * areas = NULL; /* Base of area array                             */
static int    empty = -1;   /* -1 = array full, else lowest index unused item */
static int    top   = -1;   /* -1 = empty, else highest available valid index */

/* Local functions */

static int  area_extend (void);
static void area_shrink (int index);

#ifdef TRACE
  static void area_dump (void);
#endif

/**************************************************************/
/* area_read_area_id().                                       */
/*                                                            */
/* Implement CheckURL_ReadAreaID. See the Check URL           */
/* specification, 2501,846/FS, for more.                      */
/**************************************************************/

_kernel_oserror * area_read_area_id(_kernel_swi_regs * r)
{
  dprintf(("", "area_read_area_id: Called\n"));

  if ((r->r[0] & CU_ReadAreaID_OnEntry_GivenAreaID) != 0)
  {
    area * found;

    /* Area ID to name */

    found = area_resolve(r->r[1]);
    if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);

    /* Got one */

    r->r[0] = 0;
    r->r[1] = (int) found->name;
  }
  else
  {
    area * found;
    int    foundi;

    /* Name to area ID */

    found = area_find((const char *) r->r[1], &foundi);
    if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);

    /* Got one */

    r->r[0] = 0;
    r->r[1] = (unsigned int) (foundi | ((found->counter) << 24));
  }

  dprintf(("", "area_read_area_id: Successful\n"));

  return NULL;
}

/**************************************************************/
/* area_add_area()                                            */
/*                                                            */
/* Implement CheckURL_AddArea. See the Check URL              */
/* specification, 2501,846/FS, for more.                      */
/**************************************************************/

_kernel_oserror * area_add_area(_kernel_swi_regs * r)
{
  area            * found;
  _kernel_oserror * e = NULL;

  dprintf(("", "area_add_area: Called\n"));

  if ((r->r[0] & CU_AddArea_OnEntry_GivenAreaID) != 0)
  {
    /* Area ID to name */

    found = area_resolve(r->r[1]);
    if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);
  }
  else
  {
    /* Name to area ID */

    found = area_find((const char *) r->r[1], NULL);

    if (found == NULL)
    {
      /* Create a new area with this name */

      found = area_add((const char *) r->r[1]);
    }

    if (found == NULL) return make_error(cu_ERROR_MEMORY_EXHAUSTED, 0);
  }

  if (r->r[2] != 0)
  {
    e = file_read_configuration(&found->head,
                                (char *) r->r[2],
                                (r->r[0] & CU_AddArea_OnEntry_GivenFilename) != 0 ? true : false);
  }

  #ifdef TRACE
    area_dump();
  #endif

  return e;
}

/**************************************************************/
/* area_delete_area()                                         */
/*                                                            */
/* Implement CheckURL_DeleteArea. See the Check URL           */
/* specification, 2501,846/FS, for more.                      */
/**************************************************************/

_kernel_oserror * area_delete_area(_kernel_swi_regs * r)
{
  dprintf(("", "area_delete_area: Called\n"));

  if ((r->r[0] & CU_DeleteArea_OnEntry_DeleteAll) != 0)
  {
    /* Delete all areas */

    area_delete_all();

    dprintf(("", "area_delete_area: All areas deleted, top = %d, empty = %d\n", top, empty));
  }
  else
  {
    area * found;
    int    foundi;

    if ((r->r[0] & CU_DeleteArea_OnEntry_GivenAreaID) != 0)
    {
      /* Area ID given */

      foundi = r->r[1] & 0xffffff;

      if (foundi < 0 || foundi > top) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);
    }
    else
    {
      /* Name to area ID */

      found = area_find((const char *) r->r[1], &foundi);
      if (found == NULL) return make_error(cu_ERROR_AREA_NOT_KNOWN, 0);
    }

    area_shrink(foundi);

    dprintf(("", "area_delete_area: Area %d deleted, top = %d, empty = %d\n", foundi, top, empty));
  }

  #ifdef TRACE
    area_dump();
  #endif

  return NULL;
}

/**************************************************************/
/* area_extend()                                              */
/*                                                            */
/* Add a new area to the areas array, either by extending it  */
/* or by reclaiming a currently unused slot.                  */
/*                                                            */
/* Returns:    Index of the new item or -1 if memory          */
/*             allocation failed. May move the "empty" static */
/*             (see top of this file) to a higher index.      */
/**************************************************************/

static int area_extend(void)
{
  dprintf(("", "area_extend: Called\n"));

  if (empty != -1)
  {
    area * ret  = &areas[empty];
    int    reti = empty;

    /* We can reuse an old area. Increment its counter and set */
    /* the magic word.                                         */

    ret->counter++;
    ret->magic = Area_Magic;

    dprintf(("", "area_extend: Reusing area %d, counter now %d\n", reti, ret->counter));

    /* Search for the next free item. Note that the top item is */
    /* never free by definition - if freed, the array shrinks.  */

    while (empty < top && areas[empty].magic == Area_Magic) empty++;

    /* Nothing found? */

    if (empty >= top) empty = -1;

    dprintf(("", "area_extend: 'empty' forwarded to %d\n", empty));

    /* Return the reclaimed item */

    return reti;
  }
  else
  {
    int    items = top + 2;
    area * new;
    area * ret;

    /* Extend the array */

    dprintf(("", "area_extend: Increasing array size to %d\n", items));

    new = realloc(areas, sizeof(area) * items);
    if (new == NULL) return -1;

    areas = new;

    top++;
    ret = &areas[top];

    /* Initialise the new item */

    memset(ret, 0, sizeof(area));

    ret->magic   = Area_Magic;
    ret->counter = 1;

    /* Return the new item */

    return top;
  }
}

/**************************************************************/
/* area_shrink()                                              */
/*                                                            */
/* Remove an area from active use, shrinking the area array   */
/* if the item is at the top.                                 */
/*                                                            */
/* Parameters: Index of the array item to remove. May move    */
/*             the "empty" static and will alter "top" (see   */
/*             top of this file).                             */
/**************************************************************/

static void area_shrink(int index)
{
  dprintf(("", "area_shrink: Remove index %d (top = %d, empty = %d)\n", index, top, empty));

  if (index < 0 || index > top) return;

  /* Whatever happens, ensure the given item is freed up properly */

  file_free_configuration(areas[index].head);
  areas[index].head  = NULL;
  areas[index].magic = 0;

  if (index == top)
  {
    int items;

    dprintf(("", "area_shrink: Killing top item, scanning back for next used\n"));

    while (--index >= 0 && areas[index].magic != Area_Magic)
    {
      if (index == empty) empty = -1;
    }

    if (index >= 0 && areas[index].magic == Area_Magic) index++;
    else index = 0;

    dprintf(("", "area_shrink: Now cropping to index %d\n",index));

    top   = index - 1;
    items = index;

    if (items <= 0)
    {
      free(areas);
      areas = NULL;

      dprintf(("", "area_shrink: Collapsed all items, array empty; top = %d, empty = %d\n", top, empty));
    }
    else
    {
      area * new;

      new = realloc(areas, sizeof(area) * items);

      if (new == NULL)
      {
        dprintf(("", "area_shrink: Yikes, realloc to shrink just failed; bailing\n"));
        return;
      }

      areas = new;

      dprintf(("", "area_shrink: Shrunk to %d item(s), top = %d, empty = %d\n", items, top, empty));
    }
  }
  else
  {
    /* This isn't the top item - repoint "empty" */

    if (index < empty || empty == -1) empty = index;

    dprintf(("", "area_shrink: Item not at top, empty = %d\n",empty));
  }

  return;
}

/**************************************************************/
/* area_add()                                                 */
/*                                                            */
/* Add a new area with the given area name.                   */
/*                                                            */
/* Parameters: Area name to use.                              */
/*                                                            */
/* Returns:    Pointer to the new area struct or NULL if      */
/*             memory allocation failed.                      */
/**************************************************************/

area * area_add(const char * name)
{
  int newi;

  dprintf(("", "area_add: Add '%s'\n", name ? name : "<NULL>"));

  if (name == NULL || *name == '\0') return NULL;

  newi = area_extend();
  if (newi < 0) return NULL;

  areas[newi].name = Strdup(name);

  if (areas[newi].name == NULL)
  {
    area_shrink(newi);
    return NULL;
  }

  dprintf(("", "area_add: Add successful at index %d\n",newi));

  return &areas[newi];
}

/**************************************************************/
/* area_delete_all()                                          */
/*                                                            */
/* Delete all areas.                                          */
/**************************************************************/

void area_delete_all(void)
{
  dprintf(("", "area_delete_all: Called"));

  while (top != -1) area_shrink(top);

  dprintf(("", "area_delete_all: Successful\n"));

  return;
}

/**************************************************************/
/* area_find()                                                */
/*                                                            */
/* Given an area name, return a pointer to the relevant area  */
/* struct or NULL if the area name is not found.              */
/*                                                            */
/* Parameters: An area name;                                  */
/*                                                            */
/*             Pointer to an int, updated with the array      */
/*             index of the returned area struct.             */
/*                                                            */
/* Returns:    Pointer to the referenced area struct or NULL  */
/*             if the ID is invalid.                          */
/*                                                            */
/* Assumes:    The int pointer may be NULL.                   */
/**************************************************************/

area * area_find(const char * name, int * reti)
{
  int index = 0;

  dprintf(("", "area_find: Called for '%s'\n", name ? name : "<NULL>"));

  if (name == NULL) return NULL;

  while (index <= top)
  {
    if (!strcmp(areas[index].name, name))
    {
      dprintf(("", "area_find: Found at index %d\n",index));

      if (reti != NULL) *reti = index;
      return &areas[index];
    }

    index++;
  }

  dprintf(("", "area_find: No match\n"));

  return NULL;
}

/**************************************************************/
/* area_resolve()                                             */
/*                                                            */
/* Given an area ID, return a pointer to the relevant area    */
/* struct or NULL if the ID is invalid.                       */
/*                                                            */
/* Parameters: An area ID.                                    */
/*                                                            */
/* Returns:    Pointer to the referenced area struct or NULL  */
/*             if the ID is invalid.                          */
/**************************************************************/

area * area_resolve(unsigned int id)
{
  unsigned char counter;
  unsigned int  index;

  index   = (id & 0xffffff);
  counter = (id & 0xff000000) >> 24;

  dprintf(("", "area_resolve: Called for ID &%08X (index %u, counter %u)\n", id, index, counter));

  if (index > top)
  {
    dprintf(("", "area_resolve: Index out of range (max is %d)\n", top));
    return NULL;
  }

  if (areas[index].magic != Area_Magic)
  {
    dprintf(("", "area_resolve: Area magic not set, item is out of use\n"));
    return NULL;
  }

  if (areas[index].counter != counter)
  {
    dprintf(("", "area_resolve: Counters don't match (%u vs %u), ID is stale\n", areas[index].counter, counter));
    return NULL;
  }

  dprintf(("", "area_resolve: ID is valid, returning %p for index %d\n", &areas[index], index));

  return &areas[index];
}

#ifdef TRACE

  /**************************************************************/
  /* area_dump()                                                */
  /*                                                            */
  /* List all areas to the debug device.                        */
  /**************************************************************/

  static void area_dump(void)
  {
    if (top < 0)
    {
      dprintf(("","\nNo areas are in use.\n\n"));
    }
    else
    {
      int      i;
      config * c;

      dprintf(("", "\n"));
      dprintf(("", "==============================================================================\n"));
      dprintf(("", "ID        Use  Name/Fragment                   Parameter                      \n"));
      dprintf(("", "==============================================================================\n"));
      dprintf(("", "\n"));

      for (i = 0; i <= top; i++)
      {
        dprintf(("", "%08X  %s  %-31.31s %-31.31s\n",
                     (unsigned int) i | (areas[i].counter << 24),
                     areas[i].magic == Area_Magic ? "yes"         : "no ",
                     areas[i].magic == Area_Magic ? areas[i].name : "-",
                     "-"));

        if ((c = areas[i].head) != NULL) dprintf(("", "\n"));

        while (c != NULL)
        {
          dprintf(("", "               %-31.31s %-31.31s\n", c->fragment, c->parameter));
          c = c->next;
        }

        if (areas[i].head != NULL && i != top) dprintf(("", "\n"));
      }

      dprintf(("", "\n"));
      dprintf(("", "==============================================================================\n"));
      dprintf(("", "\n"));
    }
  }

#endif
