;
; atmio - input/output routines for atm25 podule
;         done in assembler because the h/w interface is a bit weird


		    AREA		atmio, PIC, CODE, REL
		    EXPORT		convert_ISA
		    EXPORT		inp
		    EXPORT		outp
		    EXPORT		reset_atm_HI
		    EXPORT		reset_atm_LO
		    EXPORT		get_atm_prom
		    EXPORT		get_image_info
		    EXPORT		free_image

		    IMPORT		|ATMimage|
		    IMPORT		|ATMimage_length|

; convert_ISA -- convert an ISA address to an EASI space address. Optionally, invert
;		 the ISA A11 line before conversion, as ATM appear to have added this
;		 as a hack.
;
; On Entry: r0 = ISA address r1=0 to leave ISA_A11 alone, or r1=1 to invert ISA_A11
;
; On Exit: r0 is the EASI equivalent address

convert_ISA	    EOR			r1, r1, r0, LSR#11  ; get A11 and invert if necessary
		    AND			r0, r0, #&1c	    ; isolate ISA[2,3,4]
		    MOV			r0, r0, LSL#4	    ; shift up to EASI[6,7,8]
		    ORR			r0, r0, #&400000    ; set bit 22

; originally, easi_a9 is inverse of isa_a11, like this:
;		    MOV			r1, r1, LSL#9	    ; shift modified A11 up to bit 9

; but if we've got the Panther card with the Blue rats' nest wiring, we need to do
; easi_a11 = inverse of isa_a11 (ie using easi_a11 instead of easi_a9), so:
		    MOV			r1, r1, LSL#11	    ; shift modofied A11 up to bit 11

		    ORR			r0, r0, r1	    ; mask it in
		    ORR			r0, r0, #2	    ; mask in bit 1
		    MOV			pc, r14

;inp 		    Get an 8 bit word (left aligned in a 32 bit word for our case) from the given
;		    ISA bus address. convert_ISA is called to convert it.

; On Entry: r0 = ISA address, r1 = podule number, r2 = address of var to return EASI equiv address

; On Exit: r0 = contents of that address.

inp		    MOV			r3, #&88000000	    ; EASI space base address
		    ORR			r3, r3, r1, LSL#24  ; add offset to relevant podule

		    MOV			r1, #1		    ; we want ISA_A11 inverted before conversion
		    STMDB		sp!, {lr}
		    BL			convert_ISA	    ; convert the address

		    ADD			r0, r0, r3	    ; adjust converted address for podule
		    STR			r0, [r2]	    ; write back EASI equivalent address
		    LDRB		r1, [r0]	    ; get (non-)word aligned
		    ;AND			r0, r1, #&ff	    ; safety
		    MOV			r0, r1
		    LDMIA		sp!, {pc}	    ; return

;outp		    Put an 8 bit word (left aligned in a 32 bit word) into the given ISA bus
;		    address. convert_ISA is called to cnvert the address.

; On Entry:  r0 = ISA address
; 	     r1 = byte to write to it
;	     r2 = podule number

; On Exit: r0 = EASI equivalent address


outp		    MOV			r3, #&88000000	    ; EASI space base address
		    ORR			r3, r3, r2, LSL#24  ; add offset to relevant podule

		    MOV			r2, r1		    ; save the value for later
		    MOV			r1, #1		    ; we want ISA_A11 inverted before conversion
		    STMDB		sp!, {lr}
		    BL			convert_ISA	    ; convert the address

		    ADD			r0, r0, r3	    ; adjust converted address for podule
		    ;AND			r2, r2, #&ff	    ; safety
		    STRB		r2, [r0]	    ; store the value
		    LDMIA		sp!, {pc}

; reset_atm
;
; On Entry:  r0 = podule no.
;
; On Exit: r0 = EASI equiv. address

reset_atm_HI	    MOV			r1, #&88000000
		    ORR			r1, r1, r0, LSL#24
		    ORR			r1, r1, #&400000    ; reset address
		    MOV			r2, #1		    ; set bit 0 HIGH
		    STR			r2, [r1]	    ; reset the card
		    MOV			r0, r1
		    MOV			pc, r14


reset_atm_LO	    MOV			r1, #&88000000
		    ORR			r1, r1, r0, LSL#24
		    ORR			r1, r1, #&400000    ; reset address
		    MOV			r2, #0		    ; set bit 0 LOW
		    STR			r2, [r1]	    ; reset the card
		    MOV			r0, r1
		    MOV			pc, r14

; get_atm_prom
;
; On Entry: r0 = podule number
;           r1 = addr of buffer to save image in
;	    r2 = no. of bytes to read
;
; On Exit:  r0 = number of bytes read

get_atm_prom	    MOV			r0, r0, LSL#24	    ; shift up podule number
		    ADD			r0, r0, #&88000000  ; get EASI space offset
		    STMDB		sp!, {r4}	    ; push v1
		    MOV			r4, #0
get_prom_loop	    LDR			r3, [r0], #4	    ; get word (only d0-d7 of interest)
		    STRB		r3, [r1], #1	    ; save byte
		    ADD			r4, r4, #1
		    SUBS		r2, r2,#1
		    BNE			get_prom_loop
		    MOV			r0, r4		    ; return no. bytes read in a1
		    LDMIA		sp!, {r4}	    ; pop v1
		    MOV 		pc, r14

; get_image - this routine decompresses an in-line image and fills out a structure with the
; start address of the decompressed image, its size in bytes, and a checksum value.
;
; On Entry: r0 -> image_info structure (20 bytes)
;
; On Exit: r0 -> image_info structure (updated by code)
;       or r0 = -1 (not enough memory)
;       or r0 = -2 (bad compressed image)

WINSIZE		    *			4096		    	   ; LZW compression window size
WINBITS		    *			12
WINBIC		    *			&f000
OVERSHOOT	    *			4		    	   ; byte overshoot caused by word rounding
magic_word	    DCD			&30305a4c	    	   ; the string 'LZ00'
image_info_size     DCD			285039 		    ; this is the size of the COMPRESSED data
;hex_buffer	    DCD			0,0,0,0,0,0,0
		    ALIGN

; first word of compressed data is "LZ00"
; 2nd   word of compressed data is original file size

get_image_info
		    STMDB		sp!, {r4-r11, lr}
		    MOV			r11, r0		        ; save wspace pointer


                    ADR			r2, magic_word
;		    ADRL		r1, boson_image_start
		    ADRL		r1, ATMimage
		    LDR			r1, [r1]
		    LDR			r0 ,[r2], #4	    	; get word, advance r2 to image_info_size
;		    LDR			r10, [r2]	        ; r10 = compressed image size
		    ADRL		r10, ATMimage_length
		    LDR			r10, [r10]
		    LDR			r3, [r1], #4	        ; get header, adv. r1 to decomp size
		    CMP			r0, r3		    	; not ATMos compressed image?
		    BNE			bad_image

		    LDR			r3, [r1], #4	        ; r3 = decomp size, r1->comp. data
		    ADD			r3, r3, #3
		    BIC			r3, r3, #3	    	; round up to word boundary
		    STR			r3, [r11, #&c]	    	; save decomp size
		    MOV			r4, r3
		    ADD			r3, r3, #WINSIZE
		    ADD			r3, r3, #OVERSHOOT
		    MOV			r0, #6
		    SWI			&2001E		    	; XOS_Module 6 (claim)
		    BVS			no_memory


		    MOV			r3, r2
		    ADD			r2, r2, #WINSIZE
		    STR			r2, [r11]	        ; save data start
		    MOV			r5, #0

; initialise the lookup table for LZW decompression
init_decomp_loop    STRB		r5, [r3], #1		; Set a byte and step on
		    ADD			r5, r5, #1		; Increment byte value
		    CMP			r3, r2			; Finished?
		    BNE			init_decomp_loop	; Loop if no

		    SUB			r0, r10, #8	        ; r0 = actual size of compressed data (excluding headers)
		    STR			r0, [r11, #&10]	    	; save actual compressed size

; decompress the image
decompress
;		    STMDB		sp!, {r0-r2}
;		    ADR			r1, hex_buffer
;		    MOV			r2, #16
;		    SWI			&D4
;		    MOV			r0, #13
;		    STRB		r0, [r1]
;		    ADR			r0, hex_buffer
;		    SWI			&2
;		    LDMIA		sp!, {r0-r2}

		    LDRB		r3, [r1], #1	    ; LS 8 bits of offset
		    LDRB		r4, [r1], #1	    ; size & rest of offset
		    LDRB		r5, [r1], #1
		    ORR			r3, r3, r4, LSL#8
		    BIC			r4, r3, #WINBIC	    ; r4 = offset
		    MOVS		r3, r3, LSR#WINBITS ; r3 = size
		    BEQ			was_zero

		    SUB			r6, r2, r4
		    SUB			r6, r6, #1

copy_offset	    LDRB		r7, [r6], #1
		    STRB		r7, [r2], #1
		    SUBS		r3, r3, #1
		    BNE			copy_offset

was_zero	    STRB		r5, [r2], #1
		    SUBS		r0, r0, #3
		    BGT			decompress

checksum	    LDR			r0, [r11]
		    LDR			r1, [r11, #&c]
		    MOV			r2, #0
checksum_loop	    LDR			r3, [r0], #4
		    ADD			r2, r2, r3
		    SUBS		r1, r1, #4
		    BNE			checksum_loop
		    STR			r2, [r11, #&8]	    	; save checksum

		    MOV			r0, r11
		    LDMIA		sp!, {r4-r11, pc}^

no_memory	    MVN			r0, #0  	    ; couldn't allocate enough RMA space
		    LDMIA		sp!, {r4-r11, pc}^

bad_image	    MVN			r0, #1		    ; wasn't an ATMos image!
		    LDMIA		sp!, {r4-r11, pc}^

;boson_image_start
;        	    BIN			"ADFS::HardDisc4.$.Cstuff.PlugnPlay.Images.atmcomp"
;		    ALIGN
;boson_image_end
		    DCD			0

; free_image - this routine *MUST* be called to free the workspace claimed by get_image_info
; on entry: r0 -> image_info struct

free_image
		    STMDB		sp!, {r4-r11, lr}
		    LDR			r2, [r0]
		    SUB			r2, r2, #WINSIZE
		    MOV			r0, #7
		    SWI			&2001E		    ; XOS_Module (Free)
		    LDMIA		sp!, {r4-r11, pc}^

		    END

