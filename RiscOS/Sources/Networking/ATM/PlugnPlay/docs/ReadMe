Adapting module to use a new version of the Virata Link on-board software
-------------------------------------------------------------------------

This module is esentially a wrapper for the NIC image - it does the plug
and play initialization of the NIC, and squirts the run-time image into it.

Changing the image USED TO BE a *compile time* alteration - a new module
had to be built. And you had to modify some assembler sources - not pretty.
Now though, I've completely rearranged it all, so all you have to do is
build against different NIC images! Pretty good eh? Full details in the
version 0.07 docs below, plus details of the virata initialisation file
support.

Version 0.03 - 08Nov95
----------------------

This version of the module accepts a number of switches on the rmload
command line. The syntax is:

	RMLoad PnP [-verbose] [-debug] [-zombie]

The switches have the following effects:

	-verbose	print tourist information as the plug'n'play module
                        runs
	-debug		extremely verbose info. for debugging purposes, or
                        reassurance
	-zombie		stops the PnP module automatically dying when it
                        has finished.

The '-zombie' flag warrants further explanation. On a STB, memory is tight,
so the PnP module returns an error on initialization, although in general
it will have completed successfully. This is done in order to free the 250k
or so of RMA space which it takes up. Before exiting, the PnP module sets
the environment variable PnP$Podule to tell the atm25driver the things it
needs to know. On a RiscPC (control server) on the other hand, it is not
usually necessary to have the PnP module die, as memory is not so severely
constrained. Therefore, the '-zombie' flag tells the PnP module to remain
in the RMA, ie to initialize succesfully. In this case, the PnP module does
_not_ set PnP$Podule, and can communicate with the atm25driver using a SWI
message interface. It is useful to have the PnP module in memory for
diagnostic purposes, and in future releases it may pass additional
information to the atm25driver.

Version 0.04 - 25Jan96
----------------------

No changes to the code, but since your typical ATML image for the Virata
Link card has now grown to approx. 600k in size, it has become necessary to
use modsqz to compress the pnp module. The kernel will decompress this as
it loads.

Make sure you have a sufficiently big wimpslot before running makepnp -
modsqz needs plenty of room.

Version 0.05 - 01Feb96
----------------------

The modsqz approach used above tends to fragment RMA quite seriously, which
negates the whole reason for doing it in the first place. The new approach
is to use the ATMos 'compress' utility to squeeze the NIC image *before* it
is built into the Plug'n'Play module. The Plug'n'Play module now contains
decompression code suitable for ATMos compressed images, so it WILL NOT
WORK with uncompressed ATMos images.

[1999-01-08: BAL: this compress tool can be found in the bin directory
inside the Plug'n'Play module].

Version 0.06 - 23Aug96
----------------------

Changed the way Plug and Play enquiries are made to expansion cards. The
Plug'n'Play module no longer probes all expansion cards in an attempt to
determine which support plug'n'play, because some cards take great
exception to this. This version of the module searches for an expansion
card which has the relevant product code (0x11b) in its expansion card ID
for a Panther ATM25 card. Make sure you set the product code accordingly
when making EPROMs for these cards.

Alternatively, if you're softloading, the plug'n'play module now supports a
new command line option following an RMLoad. The new option is:

	RMLoad -podule n

Where (0<=n<8) is the podule slot where the ATM25 card resides. An explicit
podule slot named on the command line will be tried first - if this fails
the module will attempt to locate the card as above.


This means that the plug'n'play module no longer supports initialisation of
multiple plug and play devices in one session.

Version 0.07 - 22Nov96
----------------------

Right, it's all changed again, so pay attention.

The build directory for this module now contains an 'x' directory, which in
turn contains two files:

	ATMimage
   and  ATMinit

The former is an ATMos compressed NIC image, just like before. Use ISA bus
images, not PCI bus images. The latter is a virata.ini file, exactly the
same as used on Wintel boxes. So, to build  your particular variant of the
PnP module, copy the image you want and the init file you want  into the x
directory, call them by the right names, and make. No more fiddling around
with  assembler sources!

Btw, from this version, we are migrating to standard ATML NIC images -
because we now support the virata.ini format, it is no longer necessary for
them to do bespoke image builds for us. In theory, every special case image
that we've needed previously can be achieved by using a  standard release
iamge and suitable virata.ini tweaking.

The flip side of this is that we need to figure out all the virata.ini
options, and details aren't exactly forthcoming at the time of writing.
Also, I'm not sure how these release images behave if you don't send a
virata.ini file, so until I get further clarification on this from ATML, if
you don't want to do any funky configuring stick to an ATMinit file which
just contains the line:

[virata.link.1]

Also, to build this module, you'll need 'datatoaof' in your library.
This is available on the net somewhere.


Ant.
13 Oct 95.
09 Nov 95.
25 Jan 96.
23 Aug 96.
22 Nov 96.
