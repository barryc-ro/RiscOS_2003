/*	MODULE.C

Project : ATML Panther driver
Module: plug'n'play - downloads firmware image into card

Purpose:


History:

Date      Who     Description of change
===========================================
15/1/97    CP     Header added/history started.

                  Tidied up layout, chnaged to use standard libraries.

                  Removed dead code which has been commented out (it was
                  cluttering up some of the constructs, with unterminated
                  braces etc etc).

19/1/97    CP     Clarified some obfuscated code.

1999-01-08 BAL    Got rid of grotty PROTOTYPES_INTERNAL hack.

***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "error.h"
#include "headers.h"
#include "module.h"
#include "atmio.h"
#include "convert.h"
#include "utils.h"
#include "pnpswis.h"
#include "pnp.h"

#include "modhdr.h"

enum
{
    Podule_ReadInfo_ROMBaseAddress  = 0x10,
    Podule_ReadInfo_ProductType     = 0x40,
    Podule_ReadInfo_HardwareAddress = 0x80
};

static IMAGE_INFO image_info;

int range_check;
int quiet;
int debug;
int zombie;
int dump;
int invert_a11;
int run_now;
int pnp_cards;
int podule;
int rd_port;
int default_base;
int default_irq;
int default_irq2;
int pnp_has_run;
int pnp_init_complete;
char *logfile;
void *module_wsp;




_kernel_oserror *module_init(const char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror *e;
    _kernel_swi_regs r;
    static char keyword[] = "verbose/S,debug/S,zombie/S,podule/k/e";
    static int args[10];
    int retcode = 0;
    int cli_podule = -1;
    int number_podules = 0;
    int product_type;


    M_unused (pbase);

    pnp_init_complete = 0;


    module_wsp = pw;

    range_check = RANGE_CHECK_DEFAULT;
    quiet = QUIET_DEFAULT;
    debug = DEBUG_DEFAULT;
    dump = DUMP_DEFAULT;
    invert_a11 = INVERT_A11_DEFAULT;
    run_now = TRUE;
    pnp_cards = 0;
 /*   pnp_has_run = FALSE; 20/1/98:CP:not used */
    zombie = FALSE;

 /*
    some quite important default values -
    need to be able to change these from CLI/SWI
 */
    podule = DEFAULT_PODULE_NUMBER;  /* first podule slot to start scanning at */
    rd_port = PNP_RD_PORT_DEFAULT;
    default_base = PNP_IO_BASE_DEFAULT;
    default_irq = PNP_IRQ_DEFAULT;

    e = (_kernel_oserror *)NULL;


    r.r[0] = (int)keyword;
    r.r[1] = (int)cmd_tail;
    r.r[2] = (int)args;
    r.r[3] = 64;
    _kernel_swi(OS_ReadArgs, &r, &r);

    if(args[0])
    {
       quiet = FALSE;
    }

    if(args[1])
    {
       debug = TRUE;
    }

    if(args[2])
    {
       zombie = TRUE;
    }


 /*
    19/1/97:CP:Clarification of following code segment.
    the -podule CLI argument gives an integer argument.  However, it is stored
    in a slightly different way.  The ptr args[3] points to the start of a
    structure consisting of a 1-byte type identifier, followed by the 4 bytes
    of int data.  Hence the single-byte increment of the ptr.
    Cf PRM 1-468 (OS_ReadArgs; Output buffer)

    Rearranged the statements to make this explicit.
 */
    if(args[3])
    {
      char *argp = (char *)args[3];

      if(*argp == 0) /* check that OS_ReadArgs result is an integer */
      {
        argp++; /* move ptr to start of int value */
        cli_podule = *(int *) argp;
      }
    }


    QUIET printf("Online Media EASI Plug and Play module\n");
    QUIET printf("--------------------------------------\n\n");
    QUIET printf("Plug'n'Play: initialising ATM card...\n");

    /* altered to NOT scan all podules  - Tim's MPEG2 card doesn't like it */
    if(cli_podule>=0)
    {
      podule = cli_podule;
      QUIET printf("Trying explicitly named podule %d...\n", cli_podule);
    }
    else
    {
        QUIET printf("Locating ATM25 podule...\n");

        e = _swix (Podule_ReturnNumber, _OUT (0), &number_podules);
        if (e)
        {
            return e;
        }
        QUIET printf ("Scanning %d podules\n", number_podules);

    /* 19/1/97:CP:clarified code */
        for (podule = 0; podule < number_podules; ++podule)
        {
            QUIET printf ("%d ", podule);
            if (_swix (Podule_ReadInfo,
                       _INR (0, 3),
                       Podule_ReadInfo_ProductType,
                       &product_type,
                       sizeof (int),
                       podule) == NULL && product_type == ATM25_PRODUCT_ID)
            {
               reset_atm_HI(podule);
               reset_atm_LO(podule);
               time_delay(1); /* slight delay - otherwise card doesn't respond for some reason */
               pnp_cards = plug_n_play(range_check, ~quiet, dump, invert_a11);


               if(pnp_cards < 1)
               {
                 pnp_init_complete = -1; /* 19/1/98:CP: WHY?  Exiting module with an error! */
                 return(Error_NoHardware);
               }

               QUIET printf("Found %d Plug'n'Play cards.\n", pnp_cards-1);

               switch(pnp_getid())
               {
                 case BOSON1_VERSIONID:   QUIET printf("Boson1 not supported.\n");
                      		      return(Error_VariantsUnsupported);
                      		      break;

                 case BOSON2_VERSIONID:   QUIET printf("Boson2 detected...\n");
                      		      break;

                 default:                 QUIET printf("Unrecognized card ID.\n");
                 			      return(Error_BadID);
               }

                if(pnp_checksync(SYNC_ATTEMPTS) == 0)
                {
                  QUIET printf("Card synchronization failed.\n");
                  return(Error_SyncFailed);
                }

                else
                {
                   QUIET printf("Card synchronization OK.\n");
                }

                retcode = get_image_info(&image_info);

                if(retcode == -1)
                {
                   return(Error_NoMemory);
                }

                else
                {
                   if(retcode == -2)
                   {
                	   printf("Error!\n");
                	   fflush(stdout);
                	   printf("Got start: 0x%x length: %d\n",
                	   	       (int)ATMimage, ATMimage_length);
                       retcode = * (int *)ATMimage;
                       printf("Got word: 0x%x\n", retcode);
                	   return(Error_InvalidImage);
                   }
                }

                QUIET printf("Image at: 0x%x\nImage size: (%d/%d)\nImage checksum: 0x%x\n",
                	    (int)image_info.start, image_info.comp_size, image_info.size, image_info.csum);


                if(pnp_loadimage(&image_info) < 0)
                {
                   return(Error_ImageDLFailed);
                }

                QUIET printf("loadimage returned\n");


            /*
               this step MUST be performed - it returns a bogus MAC address, but if it is
               omitted, pnp_checkrom will not work.
            */
                if(pnp_getmac() < 0)
                {
                   return(Error_GetMacFailed);
                }

                pnp_go();
                QUIET printf("Entered image.\n");

                if(pnp_ini() < 0)
                {
                   return(Error_INIFailed);  /* transfer of virata.ini data failed for some reason */
                }

                QUIET printf("Init phase completed ok.\n");

                if(pnp_checkrom() < 0)
                {
                   return(Error_CheckROMFailed);
                }

                QUIET printf("RomAck check OK.\n");
            }
        }
    }

    pnp_init_complete = 1;
    free_image(&image_info);

    if(!zombie)
    {
       set_podule_var(podule);
    }

    if(zombie)
    {
       return (e);
    }
    else
    {
       return(Error_Bye);
    }
}

_kernel_oserror *swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    _kernel_oserror *e = NULL;

    M_unused (pw);

    switch (swinum)
    {
        case PnP_RegisterDDI - PnP_00:
            (void) pnp_registerddi (r);
            break;

        default:
            e = error_BAD_SWI;
            break;
    }

    return (e);
}



void set_podule_var(unsigned int podule)
{
  _kernel_swi_regs r;
  static char vname[] = "PnP$Podule\0";

  r.r[0] = (unsigned int) &vname[0];
  r.r[1] = (unsigned int) &podule;
  r.r[2] = 4;
  r.r[3] = 0;
  r.r[4] = 1;

  _kernel_swi(OS_SetVarVal, &r, &r);
  return;
}









