/*	PNP.C

Project : Plug'n'Play

Purpose: Plug'n'Play initialise code - ripped off from ATML's code. Adapted
         to work through the EASI->ISA bus convertor



History:

Date      Who     Description of change
===========================================
??????    Ant     First cut of code

19/12/96  CP      Picked up version 0.08 (?) of sources.

                  Fixed some irritating C warnings (relating to
                  printf mismatches, argument type mismatches and implicit
                  narrowing functions

8/1/97    CP      Fixed annoying bugs in verbose output (backspace '\b' =>
                  '|H' in taskwindow)

9/1/97    CP      Fixed bug in the way that the pnp_ini() function sends the
                  configuration data to the card.  It is downloaded in 4
                  byte chunks, but the pointer was only being incremented
                  by a byte.  Changed the type of pointer, and rewrote the
                  some of the code so that it works properly.

16/1/97	  CP	  Added debug code to actually print out the ini data if
		  verbose requested.

4/2/98    CP      Modified operation of pnp_ini() to read value for upstream
                  bandwidth, then create necessary string to configure card.

***************************************************************************/

#include "headers.h"
#include "convert.h"
#include "pnp.h"
#include "module.h"
#include "atmio.h"
#include "utils.h"

#include <kernel.h>
#include <swis.h>


/****************************************************************************/

/* ATM related CMOS locations */
enum
{
    /* Locations in main CMOS RAM */
    PrimaryServer_ATMAddr_1      = 0x1e,
    PrimaryServer_ATMAddr_1_Size = 12,
    PrimaryServer_ATMAddr_2      = 0x2f,
    PrimaryServer_ATMAddr_2_Size = 8,

    Host_IPAddr                  = 0x6c,
    Host_IPAddr_Octet4           = 0x00,

    Netmask                      = 0x6f,
    Netmask_Shift                = 3,
    Netmask_Mask                 = 0x1f << Netmask_Shift,

    /* This is dodgy and should be moved */
    /* base address of 2 bytes to hold upstream bandwidth limit
     * parameter (in kbps; 0 => no limit)
     */
    UpstreamBandwidth            = 0xd7,

    /* Offsets into podule CMOS RAM */
    PVC                          = 0x0,
    Flags                        = 0x2
};

enum
{
    NSAPAddr_Size = 20
};



static int selected_pnp_address   = 0x300;
static int selected_pnp_interrupt = 1;

void DoMicroDelay (unsigned int); /* from s.DoMicroDelay */

static U8    csn=0 /* , item */;
static U8    irq;
static U8    isol_byte1, isol_byte2;
static U16   addr=0;
static int   /* n, i, c, */ card_found;


static U8  key[32] =
{
    0x6A, 0xB5, 0xDA, 0xED, 0xF6, 0xFB, 0x7D, 0xBE,
    0xDF, 0x6F, 0x37, 0x1B, 0x0D, 0x86, 0xC3, 0x61,
    0xB0, 0x58, 0x2C, 0x16, 0x8B, 0x45, 0xA2, 0xD1,
    0xE8, 0x74, 0x3A, 0x9D, 0xCE, 0xE7, 0x73, 0x39
};

#ifndef M_round_word
#define M_round_word(x) ( ( (x) + (sizeof (unsigned int) - 1) ) &\
                          ~(sizeof (unsigned int) - 1) )
#endif

static int  pnp_ini_write (unsigned int *  ini_data,
                           size_t          num_words);

static char *  pnp_ini_portspeed (char *  ini_ptr);

static char *  pnp_ini_lane (char *  ini_ptr);

static void  read_arp_atm_addr (unsigned char *  atm_addr);

static char *  num_to_sep_str (void *        num,
                               const size_t  num_size,
                               char *        s,
                               char          sep,
                               char *        fmt);



/****************************************************************************/

int plug_n_play( int range_chk, int verbose, int dump, int mod )
{
    U8  c;
    int i;
#ifdef BANANA   /* 15/1/97:CP:WTF does BANANA do?!  */
    char banana[48];
#endif

    M_unused (verbose);
    M_unused (mod);
    M_unused (dump);

#ifndef BANANA
    M_unused (range_chk);
#endif

    /* ================================= */
    /* START OF PLUG AND PLAY INITIATION */
    /* ================================= */

/*     QUIET printf("Resetting ATM card\n"); */
/*     reset_state = reset_atm(podule); */
/*     QUIET printf("Wrote 0x1 to 0x%8x\n", reset_state); */

#ifdef BANANA
    sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
    QUIET printf("Reset initialisation LFSR\n");
/*     time_delay(1); */
    wr_cyc(PNP_ADDR, 0x00);
    wr_cyc(PNP_ADDR, 0x00);

#ifdef BANANA
    sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif

    QUIET printf("send initiation sequence\n");
    for (i = 0; i < 32; i++)
    {
       wr_cyc(PNP_ADDR, key[i] );
    }

    QUIET printf("end of sequence\n");

#ifdef BANANA
        sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif

    QUIET printf("do wake 0 and assume in isolation mode\n");
    wr_cyc(PNP_ADDR,PNP_WAKE);
    wr_cyc(PNP_WR_DATA, 0x00);

#ifdef BANANA
    sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
    QUIET printf("set the read base address 0x%X\n", rd_port);
    wr_cyc(PNP_ADDR,PNP_RD_DATA_PORT);
    wr_cyc(PNP_WR_DATA, (U8)(rd_port>>2));

#ifdef BANANA
    sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
    csn = 0;

    while (1)
    {
      wr_cyc(PNP_ADDR,PNP_SERIAL_ISOL);

      card_found = 0;
      QUIET printf("Reading isolation sequence\n");
/*
   21/1/98:CP:excerpt from Plug and Play ISA Spec v1.0a, May 5th 1994, p12:
   "The software must delay 1 msec prior to starting the first pair of
   isolation reads, and must wait 250 usec between each subsequent pair of
   isolation reads.  This delay gives the ISA card time to access information
   from possibly very slow storage devices"

   Intermittent faults being caused by hitting this protocol too fast; delay
   1ms first
*/
      DoMicroDelay (2000); /* 1 ms delay */

/* isolation protocol loop */
      for (i=0; i < 72; i++)
      {
	isol_byte1 = rd_cyc(rd_port);
	isol_byte2 = rd_cyc(rd_port);

	if ( (isol_byte1 == 0x55) && (isol_byte2 == 0xAA) )
	{
	   card_found = 1;
	}

        DoMicroDelay (500); /* 250 us delay */
      }

#ifdef BANANA
    sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
      if (card_found == 0)
      {
         break;
      }
      else
      {
       csn += 1;
       QUIET printf("\nPNP card %d found:\n", csn );

       QUIET printf("set CSN = %d\n", csn );
       wr_cyc(PNP_ADDR, PNP_CARD_SELECT_NUMBER);
       wr_cyc(PNP_WR_DATA, csn );

#ifdef BANANA
       sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
       QUIET printf ("put card %d into configuration mode\n", csn );
       wr_cyc(PNP_ADDR,PNP_WAKE);
       wr_cyc(PNP_WR_DATA, csn );

#ifdef BANANA
       sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
       QUIET printf("set logical device number\n");
       wr_cyc(PNP_ADDR,PNP_LOGICAL_DEVICE_NUMBER);
       wr_cyc(PNP_WR_DATA,0x00);

#ifdef BANANA
       sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif

      addr = default_base;
      selected_pnp_address = addr;

      QUIET printf("\tbase address = 0x%X\n", addr );
      wr_cyc(PNP_ADDR, PNP_IO_BASE_HIGH_DESC_0);
      wr_cyc(PNP_WR_DATA, (U8)(addr >> 8));
      wr_cyc(PNP_ADDR, PNP_IO_BASE_LOW_DESC_0);
      wr_cyc(PNP_WR_DATA, (U8)(addr & 0xff));

#ifdef BANANA
      sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
      irq = default_irq;
      selected_pnp_interrupt = irq;

      QUIET printf("\tIRQ number   = %d\n", irq );
      wr_cyc(PNP_ADDR, PNP_INTERRUPT_LEVEL_0);
      wr_cyc(PNP_WR_DATA, irq );
      wr_cyc(PNP_ADDR, PNP_INTERRUPT_TYPE_0);
      wr_cyc(PNP_WR_DATA, (U8)(0x03));

#ifdef BANANA
      sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif

      irq = default_irq2;
      QUIET printf("\tIRQ2 number   = %d\n", irq );
      wr_cyc(PNP_ADDR, PNP_INTERRUPT_LEVEL_1);
      wr_cyc(PNP_WR_DATA, irq );
      wr_cyc(PNP_ADDR, PNP_INTERRUPT_TYPE_1);
      wr_cyc(PNP_WR_DATA, (U8)(0x03));


#ifdef BANANA
      sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
      QUIET printf ("put our board into sleep mode\n");
      wr_cyc(PNP_ADDR, PNP_WAKE);
      wr_cyc(PNP_WR_DATA, 0 );

#ifdef BANANA
      sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
      default_base += 16;
      default_irq  += 1;

    }

  }


  if (csn > 0)
  {
   QUIET printf("\n");

   /* ================================= */
   /* wakeup all the plug'n'play cards  */
   /* ================================= */

   for (c = 1; c <= csn; c++)
   {
    QUIET printf("wake and activate card %d - ", c );
    wr_cyc(PNP_ADDR, PNP_WAKE);
    wr_cyc(PNP_WR_DATA, c );

#ifdef BANANA
    sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
    wr_cyc(PNP_ADDR, PNP_ACTIVATE);
    wr_cyc(PNP_WR_DATA, 0x01);
    QUIET printf("OK\n");
   }

#ifdef BANANA
    sprintf(banana,"%d%d", range_chk, verbose); /* ldelay while IO settles down */
#endif
    QUIET printf("set wait for key mode\n");
    wr_cyc(PNP_ADDR,PNP_CONFIG_CONTROL);
    wr_cyc(PNP_WR_DATA, 0x02);
    return c;
  }

  else
  {
     return -1;
  }
}


int pnp_getid(void)
{
  U32 temp;


  temp = r_Boson_Version;
  return(temp);
}



int pnp_checksync(int attempts)
{
  U32 SyncIN = 0, count = 0, temp;
  int SyncOUT = 0;


  do /* while(SyncIN<2 || SyncOUT<2 && --attempts) */
  {
    if(Boson_RX_NotEmpty)
    {
       temp = CommitRead();

       switch(SyncIN)
       {

         case 0:  if(temp == SYNC0)
                  {
              	  	  SyncIN = 1;
              	  	  QUIET printf("Got SYNC0\n");
                  }
                  break;

         case 1:  if(temp == SYNC1)
                  {
              	  	  SyncIN++;
              	  	  QUIET printf("Got SYNC1\n");
         	  }
         	  else
         	  {
         	     SyncIN = 0;
         	  }
         	  break;

         default: SyncIN = 0;
         	  QUIET printf("Read %d bogus FIFO words.\n", count);
         	  break;
       }/* end switch */
    }

    if((Boson_TX_16) && (SyncOUT < 2))
    {
      QUIET printf("Writing %s\n", SyncOUT?"SYNC1":"SYNC0");
      CommitWrite(SyncOUT?SYNC1:SYNC0);
      SyncOUT++;
    }
  } while(SyncIN<2 || SyncOUT<2 && --attempts);


  return(attempts);
}


int pnp_loadimage(IMAGE_INFO *image_info)
{
    char widge[] = "-\\|/";
    int widget = 0;
    unsigned int data;
    unsigned int *start;
    unsigned int count, csum;
    unsigned int chksum = 0;

    start = image_info->start;
    count = (image_info->size)/4;
    csum = image_info->csum;

    QUIET printf("IMAGE: Loading %d bytes (%d words) from 0x%x, csum: 0x%x\n", image_info->size, count, (int)start, csum);

    CommitWrite(BOOT_BOOT);
    CommitWrite(count);

    QUIET printf("downloading...\r\n");

    while (count-- && !timeoutError)
    {
        data = *start++;
        CommitWrite(data);
        chksum += data;


            if ((count & 0xFF) == 0)
            {
                widget = (widget + 1) & 3;
                QUIET printf("\r%c", widge[widget]);
            }
    }

   /* 8/1/97:CP: fixed annoying bug in verbose output, \b=> '|H' in RiscOS task window */
    QUIET printf("\r \n");

    QUIET printf("0x%x == 0x%x ?? \n", csum, chksum);

    CommitWrite(csum);

    if (CommitRead() != BOOT_ACK)
    {
        return -1;
    }

    if(timeoutError)
    {
       return(-1);
    }
    else
    {
       return(0);
    }
}


void pnp_go(void)   /* send command to exit ROM & run downloaded image */
{
  CommitWrite(BOOT_GO);
  return;
}

int pnp_checkrom(void)  /* do the final ROM_ACK */
{
  BlockWrite(ROM_ACK);
  if(BlockRead() != ROM_ACK)
  {
     return(-1);
  }
  else
  {
     return 0;
  }
}


int pnp_getmac(void)
{
  int temp;

  CommitWrite(BOOT_ADDR);
  temp = CommitRead();
  temp = CommitRead();
  if(timeoutError)
  {
     return(-1);
  }
  else
  {
     return(0);
  }
}


/**************************************************************************
pnp_ini - send virata.ini information to card

        Send CONFIG_DATA
        Send word count.
        Send words.

Globals used: ATMinit  (int *) ptr to ATMinit data
              ATMinit_length (unsigned int) length of ATMinit data

**************************************************************************/

int  pnp_ini (void)
{
    enum
    {
        INI_BufferSize  = 4096,
        INI_DynamicSize = 2048
    };
    extern char *   ATMinit;
    extern size_t   ATMinit_length;
    static char     ini_buffer[INI_BufferSize];
    char *          ini_ptr;

    /* Some of the Virata.ini file is static, fixed at compile time and some
     * is generated at run-time.  Requirement to transfer data to Boson a word
     * at a time means it is easiest to copy everything into a contiguous
     * buffer at first and then transfer it all to the Boson.  Buffer is
     * currently 4k: say 2k for complied-in stuff and 2k for dynamic stuff.
     */

    if (ATMinit_length + INI_DynamicSize > INI_BufferSize)
    {
        return -1;
    }

    memcpy (ini_buffer, ATMinit, ATMinit_length);
    ini_ptr = ini_buffer + ATMinit_length;

    ini_ptr = pnp_ini_portspeed (ini_ptr);

    /* If there is no LANE information in the file then make our own */
    if (!strstr (ATMinit, "\r\nlane="))
    {
        ini_ptr = pnp_ini_lane (ini_ptr);
    }

    QUIET printf ("Final Virata.ini being transferred to NIC:\n%s\n", ini_buffer);

    return pnp_ini_write ((unsigned int *) ini_buffer,
                          M_round_word (ini_ptr - ini_buffer) / 4);
}



int  pnp_ini_write (unsigned int *  ini_data,
                    size_t          num_words)
{
    unsigned int  tInit;
    int           gotAck = 0;

    /* 15/1/97:CP: code changed to reflect bosonxfr.c */
    BlockWrite (CONFIG_DATA);

    tInit = MonotonicTime();

    /* loop similar to sample code, bosonxfr.c */
    do
    {
        unsigned int  data;

        data = BlockRead();
        {
            if (data == CONFIG_DATA)
            {
                gotAck = 1;
                QUIET printf("Got CONFIG_DATA word back in acknowledgement\n");
            }
        }
    }
    while (!gotAck && (MonotonicTime() - tInit) < ACK_TIMEOUT);

    if (!gotAck)
    {
        return -1;
    }

    CommitWrite (num_words); /* 19/12/96:CP: CommitWrite takes (int) argument */

    QUIET printf( "downloading...\r\n" );

    while (num_words-- && !timeoutError)
    {
        /* debugging.... */
        QUIET printf("%c", *((char *)  ini_data));
        QUIET printf("%c", *(((char *) ini_data) + 1));
        QUIET printf("%c", *(((char *) ini_data) + 2));
        QUIET printf("%c", *(((char *) ini_data) + 3));

        /* 19/12/96:CP: CommitWrite takes (int) argument */
        /* 05/02/98:CP:timeoutError can be set (incremented) in this
         * function, so quitting the while loop.  Yuk!
         */
        CommitWrite (*ini_data++);
    } /* end while (num_words-- && !timeoutError) */


    QUIET printf("\n");

    return (timeoutError == 0);
}




char *  pnp_ini_portspeed (char *  ini_ptr)
{
    int Vlo;
    int Vhi;
    int UpstreamSpeed; /* read from CMOS */

    /* 5/2/98:CP:create setportspeed string */

    /* read CMOS for value of upstream bandwidth (in kbps) */
    _swix (OS_Byte, _INR (0, 1) | _OUT(2), 161, UpstreamBandwidth, &Vlo);
    _swix (OS_Byte, _INR (0, 1) | _OUT(2), 161, UpstreamBandwidth + 1, &Vhi);
    UpstreamSpeed = ( (Vhi << 8) | Vlo);

    /* convert this value to the form used by the card.
     * Card value = speed in kbps * 1000 / 432.
     */
    UpstreamSpeed *= 1000;
    UpstreamSpeed /= 432;

    ini_ptr += sprintf (ini_ptr, "atm_portspeed=%d\r\n", UpstreamSpeed);

    return ini_ptr;
}




char *  pnp_ini_lane (char *  ini_ptr)
{
    unsigned int   netmask;
    unsigned int   subnet;
    unsigned int   ip_addr;
    int            cmos_byte;
    unsigned char  arp_atm_addr[NSAPAddr_Size];
    int            i;

    /* Create ini file entry to configure SVC based IPOA.
     * For some bizarre reason the Virata.ini documentation states that
     * the IP address of the ARP server is required (why? it just needs
     * the ATM address so an SVC can be created to it, and even then it
     * could still use an InATMARP request to find its IP address).
     * This is used twice in the ini file - once for the configuration
     * of the ARP server and once for the configuration of the IPOA
     * subnet.  As far as I can tell, it's only really used as a
     * mechanism for binding these two bits of configuration information
     * together.  I've tried just using the subnet address as the ARP
     * server address (e.g. x.x.x.0) and this seems to work fine, so
     * this is what we use - saves us having to find more NVRAM in which
     * to store yet another IP address.
     */

    /* Read the host IP address */
    _swix (OS_Byte, _INR (0, 1) | _OUT(2),
           161,
           Host_IPAddr,
           &cmos_byte);
    cmos_byte &= 0xff;
    ip_addr = cmos_byte;

    _swix (OS_Byte, _INR (0, 1) | _OUT(2),
           161,
           Host_IPAddr + 1,
           &cmos_byte);
    cmos_byte &= 0xff;
    ip_addr |= cmos_byte << 8;

    _swix (OS_Byte, _INR (0, 1) | _OUT(2),
           161,
           Host_IPAddr + 2,
           &cmos_byte);
    cmos_byte &= 0xff;
    ip_addr |= cmos_byte << 16;

    _swix (OS_Byte, _INR (0, 1) | _OUT(2),
           161,
           Host_IPAddr_Octet4,
           &cmos_byte);
    cmos_byte &= 0xff;
    ip_addr |= cmos_byte << 24;

    QUIET printf ("IP address: %x\n", ip_addr);

    /* Read the netmask */
    _swix (OS_Byte, _INR (0, 1) | _OUT(2),
           161,
           Netmask,
           &cmos_byte);
    cmos_byte = (cmos_byte & Netmask_Mask) >> Netmask_Shift;

    /* Netmask is actually a 5 bit value containing the number of significant
     * bits in the netmask that are set (0 = 32 because can't have a netmask
     * of all zero).
     */
    cmos_byte &= 0x1f;    /* ensure only 5 bit number */
    if (cmos_byte == 0)
    {
        cmos_byte = 32;
    }

    for (i = 0, netmask = 0;
         i < 32 && cmos_byte;
         ++i, --cmos_byte)
    {
        netmask |= (1 << i);
    }
    QUIET printf ("Netmask: %x\n", netmask);


    /* Work out the subnet */
    subnet = ip_addr & netmask;
    QUIET printf ("Subnet: %x\n", subnet);

    /* Read the ATM address of the ARP server */
    read_arp_atm_addr (arp_atm_addr);

    ini_ptr += sprintf (ini_ptr, "lane=proto:atm/ip:");
    ini_ptr =  num_to_sep_str (&subnet, sizeof (subnet), ini_ptr, '.', "%d");
    ini_ptr += sprintf (ini_ptr, "/atm:");
    ini_ptr =  num_to_sep_str (arp_atm_addr,
                               sizeof (arp_atm_addr),
                               ini_ptr,
                               '.',
                               "%02x");
    ini_ptr += sprintf (ini_ptr, "\r\nlane=proto:sipa/ip:");
    ini_ptr =  num_to_sep_str (&subnet, sizeof (subnet), ini_ptr, '.', "%d");
    ini_ptr += sprintf (ini_ptr, "/mask:");
    ini_ptr =  num_to_sep_str (&netmask, sizeof (netmask), ini_ptr, '.', "%d");
    ini_ptr += sprintf (ini_ptr, "/server:");
    ini_ptr =  num_to_sep_str (&subnet, sizeof (subnet), ini_ptr, '.', "%d");
    ini_ptr += sprintf (ini_ptr, "\r\n");

    return ini_ptr;
}




void  read_arp_atm_addr (unsigned char *  atm_addr)
{
    int  i;
    int  cmos_byte;

    for (i = PrimaryServer_ATMAddr_1;
         i < PrimaryServer_ATMAddr_1 + PrimaryServer_ATMAddr_1_Size;
         ++i)
    {
        _swix (OS_Byte, _INR (0, 1) | _OUT(2),
               161,
               i,
               &cmos_byte);
        *atm_addr++ = (unsigned char) (cmos_byte & 0xff);
    }

    for (i = PrimaryServer_ATMAddr_2;
         i < PrimaryServer_ATMAddr_2 + PrimaryServer_ATMAddr_2_Size;
         ++i)
    {
        _swix (OS_Byte, _INR (0, 1) | _OUT(2),
               161,
               i,
               &cmos_byte);
        *atm_addr++ = (unsigned char) (cmos_byte & 0xff);
    }
}




char *  num_to_sep_str (void *        num,
                        const size_t  num_size,
                        char *        s,
                        char          sep,
                        char *        fmt)
{
    int     i;

    *s = 0;
    if (!fmt)
    {
        fmt = "%02x";
    }

    if (num)
    {
        for (i = 0; i < num_size - 1; ++i)
        {
            s += sprintf (s, fmt, ((unsigned char *) num)[i]);
            *s++ = sep;
        }
        s += sprintf (s, fmt, ((unsigned char *) num)[i]);
    }

    return s;
}
