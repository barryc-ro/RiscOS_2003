/*	ATMIO.C

Project : ATML Panther driver
Module: plug'n'play - downloads firmware image into card

Purpose: Various low level read and write calls to talk to the ATM25 podule's
         registers. Modified quite extensively to accomodate the EASI bus
         address space, not ISA

History:

Date      Who     Description of change
===========================================
15/1/97    CP     Header added/history started.

                  Tidied up layout.

***************************************************************************/

#include "headers.h"
#include "pnp.h"
#include "convert.h"
#include "module.h"
#include "atmio.h"
#include "utils.h"

static U16 DummyValue;
void wr_cyc(U16 addr, U8 data);
U8 rd_cyc(U16 addr);

int timeoutError = 0;

/* ======================================================================== */
/* Define the Boson Configuration memory setup                              */
/* ======================================================================== */

U32 read_cfg_4bytes(void)
{
  U32 data=0;
  U8  status, byte;
  int i;

  for (i=0; i < 4; i++)
  {
    status = 0x00;
    wr_cyc(PNP_ADDR,PNP_STATUS);
    while (status == 0)
    {
       status = rd_cyc(PNP_RD_DATA);
    }

    wr_cyc(PNP_ADDR,PNP_RESOURCE_DATA);
    byte = rd_cyc (PNP_RD_DATA);
    data = data | ((U32)byte << (i*8));
  }

  return((U32)data);
}


U16 read_cfg_2bytes(void)
{
  U16 data=0;
  U8  status, byte;
  int  i;

  for (i=0; i < 2; i++)
  {
    status = 0x00;
    wr_cyc(PNP_ADDR,PNP_STATUS);
    while (status==0)
    {
       status = rd_cyc(PNP_RD_DATA);
    }

    wr_cyc(PNP_ADDR,PNP_RESOURCE_DATA);
    byte = rd_cyc (PNP_RD_DATA);
    data =  data | ((U16)byte << (i*8));
  }

  return((U16)data);
}


U8 read_cfg_1bytes(void)
{
  U8 data=0;
  U8 status;

  status = 0x00;
  wr_cyc(PNP_ADDR,PNP_STATUS);
  while (status==0)
  {
     status = rd_cyc(PNP_RD_DATA);
  }

  wr_cyc(PNP_ADDR,PNP_RESOURCE_DATA);
  data = rd_cyc (PNP_RD_DATA);
  return((U8)data);
}


void wr_cyc(U16 addr, U8 data)
{
  int temp;

 if (invert_a11)
 {
    addr ^= 0x800;
 }

 temp = outp(addr,data, podule);
 DummyValue = data;
}


U8 rd_cyc(U16 addr)
{
 int a;
 unsigned int temp;

 if (invert_a11)
 {
    addr ^= 0x800;
 }

 a = inp(addr, podule, &temp);

 return((U8)(a&0xFF));
}



/* ******************************** */
/* write to various BOSON registers */
/* ******************************** */

/* write word to CommitToARM register */
/* checks for available FIFO space & h/w failure */
void CommitWrite(int w)
{
    static int freeW = 0;
    unsigned int tInit;

    if(timeoutError)
    {
       return;
    }

    tInit = MonotonicTime();
    while (freeW == 0)
    {
        unsigned int s = r_Boson_Status;
        if (s & BosonStatus_Tx384)
        {
            freeW = 384;
        }
        else if (s & BosonStatus_Tx128)
        {
            freeW = 128;
        }
        else if (s & BosonStatus_Tx16)
        {
            freeW = 16;
        }
        else if (MonotonicTime() - tInit > ACCESS_TIMEOUT)
        {
           printf("BlockWrite: Timeout error - no free words in toARM fifo.\n");
           timeoutError++;
           return;
        }
    }


    w_Boson_CommitToARM(w);
    freeW--;
}

/* read word from CommitFromARM register */
/* polls and times out */
unsigned int CommitRead(void)
{
  unsigned int w;
  unsigned int tInit;

  if(timeoutError)
  {
     return -1;
  }

  tInit = MonotonicTime();

  while(!Boson_RX_NotEmpty)
  {
    if(MonotonicTime() - tInit > ACCESS_TIMEOUT)
    {
      QUIET printf("\nTimeout error on commit read op\n");
      timeoutError++;
      return -1;
    }
  }

  w = r_Boson_CommitFromARM;
  return w;
}

/* write word to BlockToARM register  */
/* does FIFO freespace check and h/w timeout */
void BlockWrite(int w)
{
    static int freeW = 0;
    unsigned int tInit;

    if(timeoutError)
    {
       return;
    }

    tInit = MonotonicTime();

    while (freeW == 0)
    {
        unsigned int s = r_Boson_Status;
        if (s & BosonStatus_Tx384)
        {
            freeW = 384;
        }
        else if (s & BosonStatus_Tx128)
        {
            freeW = 128;
        }
        else if (s & BosonStatus_Tx16)
        {
            freeW = 16;
        }
        else if (MonotonicTime() - tInit > ACCESS_TIMEOUT)
        {
           printf("BlockWrite: Timeout error - no free words in toARM fifo.\n");
           timeoutError++;
           return;
        }
    }

    w_Boson_BlockToARM(w);
    freeW--;
}




/* read word from BlockFromARM register */
/* does polling and timeout */
unsigned int BlockRead(void)
{
  unsigned int w;
  unsigned int tInit;

  if(timeoutError)
  {
     return -1;
  }

  tInit = MonotonicTime();

  while (!Boson_RX_NotEmpty)
  {
    if(MonotonicTime() - tInit > ACCESS_TIMEOUT)
    {
      QUIET printf("\nTimeout error on block read op\n");
      timeoutError++;
      return -1;
    }
  }

  w = r_Boson_BlockFromARM;
  return w;
}

