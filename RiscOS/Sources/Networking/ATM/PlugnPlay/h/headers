#ifndef PnP_headers_h
#define PnP_headers_h

/* headers.h  --
   	         do some general includes, and set up all sorts
   	         of grim defines for the Intel code.

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef unsigned int U32;
typedef unsigned short int U16;
typedef unsigned char U8;



#define TRUE         1
#define FALSE 	     0

#define QUIET 	         if(!quiet)
#define DBUG		 if(debug)

#undef HALF_WORD_ACCESSES

#define RANGE_CHECK_DEFAULT       FALSE
#define QUIET_DEFAULT		  TRUE
/*#define QUIET_DEFAULT		  FALSE*/

#define DEBUG_DEFAULT		  FALSE
#define DUMP_DEFAULT		  FALSE
#define INVERT_A11_DEFAULT	  FALSE

#define PNP_RD_PORT_DEFAULT       0x260
#define PNP_IO_BASE_DEFAULT	  0x260
#define PNP_IRQ_DEFAULT		  3
#define DEFAULT_PODULE_NUMBER	  0x00 /* always 1 in STB2 - but change for debugging on RPC */

/* BOSON SYNC phase defined constants */
#define SYNC0			0xf378cd09
#define SYNC1			0xda7b8217
#define BOSON1_VERSIONID        0x30414f42 /* lit. "0A0B" */
#define BOSON2_VERSIONID        0x534f4231 /* lit. "S0B1" */
#define SYNC_ATTEMPTS           128
/*#define TIMEOUT                  500*/
#define ACCESS_TIMEOUT      (8 * 100)
#define ACK_TIMEOUT         (8 * 100)
#define SYNC_TIMEOUT        (2 * 100)

/* BOSON BOOT phase defined commands */
#define BOOT_BOOT		0x426f6f74 /* literally, 'B', 'o', 'o', 't'  */
#define BOOT_ACK		0x41434b20 /* an ACK from NIC->HOST, not really a command, lit "ACK " */
#define BOOT_ADDR		0x41646472 /* lit. "Addr"  */
#define BOOT_GO			0x474f2020 /* lit. "GO  " */

/* BOSON INI phase defined commands */
#define CONFIG_DATA		 0x434f4e46 /* lit. "CONF" */



/* Post image download ack constants  */
#define ROM_ACK	       	   	 0x41544d4c /* lit. "ATML" */

/* BOSON read registers -- 32 bit mode */
#define r_Boson_Version          *(U32 *)(0x88800200 + (podule<<24))
#define r_Boson_FromARM	         *(U32 *)(0x88800240 + (podule<<24))

#ifdef HALF_WORD_ACCESSES
#define r_Boson_BlockFromARM     *(U32 *)(0x88c00280 + (podule<<24)) | (*(U32 *)(0x88c00280 + (podule<<24)) << 16)
#else
#define r_Boson_BlockFromARM     *(U32 *)(0x88800280 + (podule<<24))
#endif

#ifdef HALF_WORD_ACCESSES
#define r_Boson_CommitFromARM     *(U32 *)(0x88c002c0 + (podule<<24)) | (*(U32 *)(0x88c002c0 + (podule<<24)) << 16)
#else
#define r_Boson_CommitFromARM     *(U32 *)(0x888002c0 + (podule<<24))
#endif

#define r_Boson_MaskedStatus	 *(U32 *)(0x88800300 + (podule<<24))
#define r_Boson_Status		 *(U32 *)(0x88800340 + (podule<<24))

/* BOSON write registers - 32 bit mode */
#define w_Boson_ToARM(x)         *(U32 *)(0x88800240 + (podule<<24))=x
#define w_Boson_BlockToARM(x) 	 *(U32 *)(0x88800280 + (podule<<24))=x
#define w_Boson_CommitToARM(x)   *(U32 *)(0x888002c0 + (podule<<24))=x
#define w_Boson_IRQMask(x)	 *(U32 *)(0x88800300 + (podule<<24))=x
#define w_Boson_Command(x)	 *(U32 *)(0x88800340 + (podule<<24))=x

#define w_Boson_CommitToARM16(x) *(U32 *)(0x88c002c0 + (podule<<24))=x

/* some handy macros */
#define Boson_RX_NotEmpty        (*(U32 *)(0x88800340 + (podule<<24)) & 0x10)
#define Boson_TX_384		 (*(U32 *)(0x88800340 + (podule<<24)) & 0x1)
#define Boson_TX_128		 (*(U32 *)(0x88800340 + (podule<<24)) & 0x2)
#define Boson_TX_16		 (*(U32 *)(0x88800340 + (podule<<24)) & 0x4)

/* BOSON status register bits */

#define BosonStatus_Tx384          0x1
#define BosonStatus_Tx128    	   0x2
#define BosonStatus_Tx16     	   0x4
#define BosonStatus_RxBlock	   0x8
#define BosonStatus_NotEmpty 	   0x10
#define BosonStatus_Alarm    	   0x20
#define BosonStatus_Tx384Mask      0x40
#define BosonStatus_Tx128Mask	   0x80
#define BosonStatus_Tx16Mask	   0x100
#define BosonStatus_RxBlockMask	   0x200
#define BosonStatus_NotEmptyMask   0x400
#define BosonStatus_AlarmMask	   0x800
#define BosonStatus_ReadTop16	   0x1000
#define BosonStatus_WriteTop16	   0x2000
#define BosonStatus_ToArmAlarm	   0x4000

#endif
