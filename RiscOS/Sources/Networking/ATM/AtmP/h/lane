//
#ifndef AtmP_lane_h
#define AtmP_lane_h

/* File:    lane.h
   Purpose: LAN Emulation API class
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-04-21: BAL
   Created.
 */




// =============================================================================
// Include header files

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "sys/mbuf.h"
    #include "net/ethernet.h"
}

// Local
#include "boson.h"
#include "service.h"




// =============================================================================
// Constants definitions

enum
{
    ALE_CONFIG_ENABLE_MULTICAST  = 0,
    ALE_CONFIG_DISABLE_MULTICAST = 1
};

enum
{
    Ether_HdrSize       = 14,
    Ether_SrcAddrOffset = 6,
    Ether_DstAddrOffset = 0,
    Ether_TypeOffset    = 12
};




// =============================================================================
// Class declarations

class ATM25LANEDCIInterface;

class LANEService : public Service
{
    // Public methods
    public:
        LANEService (NIC &                    nic,
                     ATM25LANEDCIInterface &  dci_if,
                     struct mbctl &           MBCTL,
                     int &                    error);

        void  TxConfig (const unsigned int  flags);

        void  TxSetMcast (unsigned char  multicast_addr[][ETHER_ADDR_LEN],
                          const int      count);

        int  TxData (struct mbuf *        m,
                     const unsigned int   size);

        virtual MessageHandlerRC  MessageHandler (NICMessage    msg,
                                                  NICExtension  ext);

        void  LANEService::DisplayInfo ();

    // Private methods
    private:

        void  TxOKToRecv ();

        MessageHandlerRC  RxInvalid (NICMessage    msg,
                                     unsigned int  total_size);

        MessageHandlerRC  RxRxDropped (NICMessage  msg,
                                       unsigned int  total_size);

        MessageHandlerRC  RxTxDropped (NICMessage  msg,
                                       unsigned int  total_size);

        MessageHandlerRC  RxOKToRecv (NICMessage    msg,
                                      unsigned int  total_size);

        MessageHandlerRC  RxData (NICMessage    msg,
                                  unsigned int  total_size);

        MessageHandlerRC  RxSetMAC (NICMessage    msg,
                                    unsigned int  total_size);

    // Private data
    private:
        ATM25LANEDCIInterface *  dci_if;
        struct Dib *             dib;

        unsigned int             nic_buffers;
        unsigned int             nic_buffer_exhaustions;
        unsigned int             rx_buffers;
        unsigned int             rx_buffers_lwm;
        unsigned int             rx_dropped;
        unsigned int             tx_dropped;
        struct mbctl &           MBCTL;
};

#endif
