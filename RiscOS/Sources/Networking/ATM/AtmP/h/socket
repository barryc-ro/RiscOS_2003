//
#ifndef AtmP_socket_h
#define AtmP_socket_h

/* File:    socket.h
   Purpose: Interface to socket service
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-23: BAL
   Created.
 */




// =============================================================================
// Include header files

// TCPIPLibs
extern "C"
{
    #include "sys/mbuf.h"
}

// Local
//#include "asyncop.h"
#include "service.h"
//#include "vc.h"




// =============================================================================
// Declare classes

class AsyncOp;
class VC;
class VCReceiver;

class SocketService : public Service
{
    friend class VC;

    // Public data types
    public:
        enum State
        {
            Creating,
            Exists,
            Listening,
            Connecting,
            Requesting,
            Accepting,
            Connected,
            Closing,
            Closed
        };

    // Public methods
    public:
        SocketService (NIC &         nic,
                       VC &          vc,
                       VCReceiver &  vc_receiver,
                       int &         error);

        virtual void  Attach ();

        virtual MessageHandlerRC  MessageHandler (NICMessage    msg,
                                                  NICExtension  ext);

        void  TxBind (const ATML_SOCKADDR_PVC *const  atm_addr);

        void  TxConnect (const ATML_SOCKADDR_ATM *const  atm_addr,
                         size_t                          tx_qos_size,
                         const FLOWSPEC *                tx_qos,
                         size_t                          rx_qos_size,
                         const FLOWSPEC *                rx_qos);

        void  TxListen (const ATML_SOCKADDR_ATM *const  atm_addr);

        int   TxData (const unsigned char *  data,
                      int                    data_bytes);

        int   TxData (struct mbuf *  m,
                      int            data_bytes);

        void  Close ();

        State  GetState ();

    // Protected methods
    protected:

        void  SetState (State  state);

    // Private methods
    private:
        void              TxSocket (const S32  address_family);
        void              TxConnectAck (const S32  status);
        void              TxClose ();
        MessageHandlerRC  RxConnect (NICMessage  msg);
        void              ProcessConnect (NICMessage  msg);
        MessageHandlerRC  RxConnectAck (NICMessage  msg);
        void              ProcessConnectAck (NICMessage  msg);
        MessageHandlerRC  RxClose (NICMessage  msg);
        MessageHandlerRC  RxCloseAck (NICMessage  msg);
        MessageHandlerRC  RxData (NICMessage    msg,
                                  NICExtension  ext);
        MessageHandlerRC  RxDataEnd (NICMessage    msg,
                                     NICExtension  ext);
        MessageHandlerRC  RxDataAbort (NICMessage  msg);
        MessageHandlerRC  RxDataLength (NICMessage  msg);

    // Private attributes
    private:
        VC *          vc;
        VCReceiver *  vc_receiver;
        State         state;
        bool          discarding_packet;
        AsyncOp *     close_op;
};

#endif
