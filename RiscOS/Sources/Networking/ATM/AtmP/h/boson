#ifndef AtmP_boson_h
#define AtmP_boson_h

/* File:    boson.h
   Purpose: Interface to Boson ASIC handling routines
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-02-24: BAL
   Inherited and added this header
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>

/* Local */
#include "module.h"




/* =============================================================================
 * Type definitions
 */

typedef union
{
    /* 'raw' header */
    unsigned int  header;

    /* command message */
    struct
    {
        unsigned int  handle   : 10;
        unsigned int  type     :  1;    /* always 1 for command message */
        unsigned int  command  :  4;
        unsigned int  reserved :  1;    /* zero */
        unsigned int  param    : 16;
    } command;

    /* data message */
    struct
    {
        unsigned int  handle   : 10;
        unsigned int  type     :  1;
        unsigned int  command  :  4;
        unsigned int  first    :  1;
        unsigned int  last     :  1;
        unsigned int  ext      :  1;
        unsigned int  reserved :  3;
        unsigned int  size     : 11;
    } data;

    /* elements common to both */
    struct
    {
        unsigned int  handle   : 10;
        unsigned int  type     :  1;
        unsigned int  command  :  4;
    } common;
} NICMessage;

typedef union
{
    unsigned int  extension;

    struct
    {
        unsigned int  reserved : 16;
        unsigned int  size     : 16;
    } bits;
} NICExtension;




/* =============================================================================
 * Constants definitions
 */

enum
{
    Boson_DataMessage,
    Boson_CommandMessage
};

#define BOSON_FIFO_SIZE 2048

#undef HALF_WORD_ACCESSES

/* BOSON SYNC phase defined constants */
#define SYNC0                    0xf378cd09
#define SYNC1                    0xda7b8217

#define TIMEOUT                  500

/* BOSON BOOT phase defined commands */
#define BOOT_BOOT                0x426f6f74 /* literally, 'B', 'o', 'o', 't'  */
#define BOOT_ACK                 0x41434b20 /* an ACK from NIC->HOST, not really a command, lit "ACK " */
#define BOOT_ADDR                0x41646472 /* lit. "Addr"  */
#define BOOT_GO                  0x474f2020 /* lit. "GO  " */

/* Post image download ack constants  */
#define ROM_ACK                  0x41544d4c

/* BOSON read registers -- 32 bit mode for various FIFO regs */
#define r_Boson_Version          *(volatile unsigned int *) (0x88800200 + (podule<<24))
#define r_Boson_FromARM          *(volatile unsigned int *) (0x88800240 + (podule<<24))
#define r_Boson_BlockFromARM     *(volatile unsigned int *) (0x88800280 + (podule<<24))
#define r_Boson_CommitFromARM    *(volatile unsigned int *) (0x888002c0 + (podule<<24))

/* BOSON read registers -- 16 bit mode for various status regs */
#define r_Boson_MaskedStatus     *(volatile unsigned int *)(0x88c00300 + (podule<<24))
#define r_Boson_Status           *(volatile unsigned int *)(0x88c00340 + (podule<<24))

/* BOSON write registers - 32 bit mode for various FIFO regs */
#define w_Boson_ToARM(x)         *(volatile unsigned int *)(0x88800240 + (podule<<24))=x
#define w_Boson_BlockToARM(x)    *(volatile unsigned int *)(0x88800280 + (podule<<24))=x
#define w_Boson_CommitToARM(x)   *(volatile unsigned int *)(0x888002c0 + (podule<<24))=x

/* BOSON write registers -- 16 bit mode for various status/ctrl regs */
#define w_Boson_IRQMask(x)       *(volatile unsigned int *)(0x88c00300 + (podule<<24))=(x & 0xffff)
#define w_Boson_Command(x)       *(volatile unsigned int *)(0x88c00340 + (podule<<24))=(x & 0xffff)
#define w_Boson_CommitToARM16(x) *(volatile unsigned int *)(0x88c002c0 + (podule<<24))=(x & 0xffff)

/* And the 32bit-mode raw addresses for use by our assembler routines */
#define CommitFromARMAddr         (volatile unsigned int)(0x888002c0 + (podule<<24))
#define BlockFromARMAddr          (volatile unsigned int)(0x88800280 + (podule<<24))
#define BlockToARMAddr            (volatile unsigned int)(0x88800280 + (podule<<24))

/* And the 16bit-mode raw addresses for use by our assembler routines */
#define BosonStatusAddr           (volatile unsigned int)(0x88c00340 + (podule<<24))
#define Boson_MaskedStatusAddr    (volatile unsigned int)(0x88c00300 + (podule<<24))

/* some handy macros -- access the BOSON regs. in 16bit addressing mode */
#define Boson_RX_NotEmpty        (*(volatile unsigned int *)(0x88c00340 + (podule<<24)) & 0x10)
#define Boson_RX_Block           (*(volatile unsigned int *)(0x88c00340 + (podule<<24)) & 0x8)
#define Boson_TX_384             (*(volatile unsigned int *)(0x88c00340 + (podule<<24)) & 0x1)
#define Boson_TX_128             (*(volatile unsigned int *)(0x88c00340 + (podule<<24)) & 0x2)
#define Boson_TX_16              (*(volatile unsigned int *)(0x88c00340 + (podule<<24)) & 0x4)

/* Boson main IRQ flag */  /* defined by the EASI interface, not by the Panther card */
/* these define the address of the register (for OS_DeviceClaimVector) and also a
   macro to read it. NB: the IRQ bit in this register is not latched, and may be
   changing as it is read!!! Use Check_Boson_IRQ repeatedly until 2 reads are the same! */

#define Boson_IRQ                (volatile unsigned int)(0x88400000 + (podule<<24))
#define Check_Boson_IRQ          (*(volatile unsigned int *)(0x88400000 + (podule<<24)) & 0x2)

/* BOSON status register bits */

#define BosonStatus_Tx384          0x1
#define BosonStatus_Tx128          0x2
#define BosonStatus_Tx16           0x4
#define BosonStatus_RxBlock        0x8
#define BosonStatus_NotEmpty       0x10
#define BosonStatus_Alarm          0x20
#define BosonStatus_Tx384Mask      0x40
#define BosonStatus_Tx128Mask      0x80
#define BosonStatus_Tx16Mask       0x100
#define BosonStatus_RxBlockMask    0x200
#define BosonStatus_NotEmptyMask   0x400
#define BosonStatus_AlarmMask      0x800
#define BosonStatus_ReadTop16      0x1000
#define BosonStatus_WriteTop16     0x2000
#define BosonStatus_ToArmAlarm     0x4000

/* BOSON Command register bits */

#define BosonCmd_SetNotEmptyMask   0x0410
#define BosonCmd_ClrNotEmptyMask   0x0400

#define BosonCmd_SetRxBlockMask    0x0208
#define BosonCmd_ClrRxBlockMask    0x0200

#define BosonCmd_SetTX384Mask      0x0041
#define BosonCmd_ClrTX384Mask      0x0040

#define BosonCmd_SetTX128Mask      0x0082
#define BosonCmd_ClrTX128Mask      0x0080

#define BosonCmd_SetTX16Mask       0x0104
#define BosonCmd_ClrTX16Mask       0x0100

#define BosonCmd_ClrAll            0x0fc0  /* clear all interrupt masks */


/* BOSON Masked Status register bits */
#define BosonMaskedStatus_NotEmpty 0x10




/* =============================================================================
 * Macro defintions
 */

#define CMD_MSG(_handle, _cmd, _param) \
 ((_handle & 0x3ff) | 0x400 | ((_cmd & 0xf) << 11) | ((_param & 0xffffU) << 16))

#define ASM_GET_MSG(reg, buf, size)\
    if ((reg) != 0 && (buf) != NULL && (size) != 0) asm_get_msg (reg, buf, size)




/* =============================================================================
 * Global variable declarations
 */

extern int  timeoutError;
extern int  irq_closes;
extern int  irq_closeds;
extern int  irq_errors;
extern int  irq_connects;
extern int  irq_connect_reqs;
extern int  irq_data_ends;
extern int  irq_datas;
extern int  irq_refusals;
extern int  irq_packets;
extern int  irq_rx_discards;
extern int  irq_rx_errors;
extern int  irq_con_req_errors;
extern int  irq_con_ack_errors;
extern int  irq_con_req_acks;
extern int  irq_con_refusals;
extern int  irq_connection_errors;
extern int  irq_bogus_pkts;
extern int  irq_pkt_hiwm;
extern int  irq_buffer_recovers;
extern int  irq_ip_pkts_dropped;
extern int  irq_data_aborts;
extern int  irq_data_lengths;
extern unsigned char  irq_buffer[];




/* =============================================================================
 * Function prototype declarations
 */

extern "C"
{

extern void asm_get_msg (unsigned int     reg,
                         unsigned char *  buf,
                         unsigned int     size);


extern void asm_junk_msg (unsigned int  reg,
                          unsigned int  size);


extern int asm_write_fifo (unsigned int     handle,
                           const int        command,
                           unsigned char *  buf,
                           unsigned int     size,
                           unsigned int     reg);


extern void asm_enable_podule_irqs (unsigned int);
extern void asm_disable_podule_irqs (unsigned int);
extern void asm_buffer_recover (unsigned int);


extern void multi_status (unsigned int,
                          unsigned int *,
                          unsigned int);


extern int ensure_irqs_off (void);
extern int ensure_irqs_on (void);
extern void restore_irqs (int);

} // extern "C"

extern void boson_block_write (unsigned int  w);

extern unsigned int boson_block_read (void);

extern int  boson_fifo_space ();

extern _kernel_oserror *  boson_display_trail (int  argc, char *  argv[]);
extern _kernel_oserror *  boson_display_status (int  argc, char *  argv[]);
extern _kernel_oserror *  boson_display_info (int argc, char *  argv[]);

#endif
