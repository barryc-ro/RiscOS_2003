//
#ifndef AtmP_arp_h
#define AtmP_arp_h

/* File:    arp.h
   Purpose: Interface to ARP / ATMARP handling
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-02-18: BAL
   Inherited.

   1999-04-22: BAL
   Added ATMARP capability
 */




// =============================================================================
// Include header files

// CLib
#include "kernel.h"
#include <stddef.h>

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "netinet/in.h"
    #include "sys/mbuf.h"
}

// Misc
#include "Email/Common/bool.h"

// Local
#include "ip.h"




// =============================================================================
// Constants

enum
{
    ATMARP_ar_hrd = 0x0013
};




// =============================================================================
// Class declarations

class ARP
{
    // Public methods
    public:
        ARP (struct mbctl &  MBCTL);

        bool  Receive (struct mbuf *  m);

    // Private methods
    private:
        void  Request (struct mbuf *  m);

        static _kernel_oserror *  Callback (_kernel_swi_regs *  r,
                                            void *              pw,
                                            void *              handle);

    // Private types
    private:
        struct context
        {
            ARP *          arp;
            struct mbuf *  m;
        };

    // Private data
    private:
        struct mbctl &  MBCTL;
};




class ATMARP
{
    // Public methods
    public:
        ATMARP (const int       unit,
                struct mbctl &  MBCTL);

        Receive (IPConnection *  connection,
                 struct mbuf *   m);

    // Private data types
    private:
        struct header
        {
            u_short  ar_hrd;
            u_short  ar_pro;
            u_char   ar_shtl;
            u_char   ar_sstl;
            u_short  ar_op;
            u_char   ar_spln;
            u_char   ar_thtl;
            u_char   ar_tstl;
            u_char   ar_tpln;
        };

        struct context
        {
            ATMARP *         atmarp;

            header           header;
            unsigned char *  data;

            IPConnection *   connection;

            // The data fields are variable length, so store pointers to them
            // for easy access
            unsigned char *  sha;
            unsigned char *  ssa;
            unsigned char *  spa;
            unsigned char *  tha;
            unsigned char *  tsa;
            unsigned char *  tpa;
        };

    // Private methods
    private:
        void  InATMARPRequest (context *  request);

        void  InATMARPReply (context *  request);

        static _kernel_oserror *  Callback (_kernel_swi_regs *  r,
                                            void *              pw,
                                            void *              handle);

        int   get_if_addr (struct sockaddr *  if_addr);

        void  set_vardata_ptr (unsigned char *&  ptr,
                               unsigned char *&  base,
                               const size_t      size);

        void  write_vardata (unsigned char *&  dest,
                             void *            src,
                             const size_t      size);

    // Private data
    private:
        const int           unit;
        struct mbctl &      MBCTL;
        bool                got_spa;
        struct sockaddr_in  spa;
};

#endif
