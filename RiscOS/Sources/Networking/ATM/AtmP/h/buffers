/*	BUFFERS.H

Project : ATML ATM25 card driver

Purpose: defines structures and parameters used by MPEG buffering


History:

Date      Who     Description of change
===========================================

20/1/97   CP	  Picked up current code.  Added header!

		  Changed struct bs_buffer to cope with variable length
		  payload.  To do this, the bs_data component is now a single
	          int placemarker (int so that the byte-alignment issue is
		  unambiguous).
		  sizeof(actual bs_buffer) =
		          sizeof(bs_buffer) - sizeof(int) + sizeof(payload).
		  bs_offset should be set to &bs_data.

		  Removed #define values BS_BUFFER_SIZE and N_BS_BUFFERS to
		  force errors if an attempt is made to try and use them.
		  These will be replaced with the equivalents bs_buffer_sizeG
		  and number_of_bs_buffersG.

		  Added #defines for default initialisation values for buffer
		  pool.

28/1/97   CP      Removed some unused macros to avoid (reduce?!) confusion.

29/1/97   CP	  Added macro BS_BUFFER_DATA to define space for a header at
		  the start of each bs_buffer structure.  No-one seems quite
		  sure why it's needed, but it is in the original code
		  (MPEG data = 376 bytes, bs_buffer payload defined as 396
		  bytes)

***************************************************************************/
// header file for buffers.c

/* Begin-Prologue */
#ifndef BUFFERS_H
#define BUFFERS_H
#undef DECLARE
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(X) =(X)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */  /* WEIRD NUMBERS ADDED FOR CHRIS */

/* 28/1/97:CP:following aren't used any more */
/*#define MPEG_PDU_SIZE    376  was 376 */
/*#define BS_AAL0_SIZE     384  was 384 */

#define N_WAIT_B 8


/* 20/1/97:CP:superseded macros removed to force compile errors */
/*#define BS_BUFFER_SIZE   396 *//* was 396 */
/*#define N_BS_BUFFERS     850 *//* was 850 */



#define FREE_BUFFER_SWI 0x47b07
#define Send_FullBuffer 0x492c1


struct bs_buffer {                             /* Tim's version of events:                      */
    struct bs_buffer *bs_next;		       /* Link: ptr to next buffer                      */
    int     bs_handle;			       /* FreeRoutine: addr. of routine to free buffer  */
    int     bs_flags;			       /* FreeWkSpace: wdpace pointer for free routine  */
    int     *bs_offset;			       /* Start: start address of bitstream buffer data */
                         /* 20/1/97:CP:changed to int ptr to match bs_data */
    int     bs_len;			       /* Length: length of bitstream buffer in bytes   */
    int     bs_packets;			       /* Packets: no. of unprocessed packets in buffer */
    int     bs_data;  /* 20/1/97:CP:changed this from fixed char array to
				    single int placemarker.  This allows a
				    variable-size payload to be used. Making
                                    it an int makes the size of the structure
				    unambiguous wrt byte alignment */
};

/* 29/1/97:CP:extra buffer space */
#define BS_DATA_HEADER 20

/* 20/1/97:CP:macros added for buffer pool defaults */
#define DEFAULT_BS_BUFFER_PAYLOAD 376 /* 2 x 188 bytes */
#define DEFAULT_MEMORY_POOL (850 * (sizeof(struct bs_buffer) - sizeof(int) + DEFAULT_BS_BUFFER_PAYLOAD + BS_DATA_HEADER))



/* If FreeRoutine is zero, then FreeWkSpace is an XSWI to call instead */

struct bswait {
    struct bs_buffer *w_bufs[N_WAIT_B];
    int w_supply;
    int w_consume;
    int w_inuse;
};

DECLARE struct bswait bsw;




DECLARE void atm_return_empty_buf(struct bs_buffer *);
DECLARE int init_bs_buffers(unsigned int);
DECLARE void reinit_bs_buffers(void);
DECLARE void free_bs_buffers(void);
DECLARE struct bs_buffer *get_empty_buffer(void);
DECLARE void save_full_buf(struct bs_buffer *, int);
DECLARE int bs_empty_q_cnt(void);
DECLARE void send_buffers(void);
DECLARE void bswait_init(void);
DECLARE int bswait_supply(struct bs_buffer *);
DECLARE struct bs_buffer *bswait_consume(void);
DECLARE void send_full_buf (struct bs_buffer *, int, int);


DECLARE struct bs_buffer *bs_fullp INIT(0);
DECLARE struct bs_buffer *bs_full_q INIT(0);
DECLARE struct bs_buffer *bs_empty_q INIT(0);
DECLARE struct bs_buffer *bs_emptyp INIT(0);
DECLARE int bs_sent INIT(0);
DECLARE int bs_received INIT(0);
DECLARE int wasempty INIT(0);
DECLARE int bufs_used INIT(0);
DECLARE int bufs_hiwat INIT(0);


/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

