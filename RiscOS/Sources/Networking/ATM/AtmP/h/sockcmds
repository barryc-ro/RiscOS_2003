/***********************************************************************
 *                                                                     *
 *            sockcmds.h                                               *
 *            ==========                                               *
 *                                                                     *
 *  Definitions for PC-Sockets Command Codes.                          *
 *                                                                     *
 *  (c) 1995 Advanced Telecommunication Modules Ltd.                   *
 *                                                                     *
 ***********************************************************************/

#ifndef SOCKCMDS_H
#define SOCKCMDS_H

#include "address.h"
#include "flowspec.h"


/* Generic QoS parameter information.
 * This combines a structure lengths with the QoS structures
 * theselves.  The lengths must always be rounded up to the next
 * highest 4 byte boundary to guarantee alignment of following
 * structures.
 */
typedef struct
{
    U32 send_len;               /* Length of send QoS structure (bytes) */
    FLOWSPEC send;              /* Send QoS information */
    U32 recv_len;               /* Length of receive QoS structure (bytes) */
    FLOWSPEC recv;              /* Receive QoS information */

} QOS_PARAM;




/* AS_SOCKET parameters.
 */
typedef struct
{
    S32 af;                     /* Address family (AF_) */
    S32 type;                   /* Socket type (SOCK_RAW, SOCK_SEQPACKET) */
    S32 protocol;               /* Protocol (ATMPROTO_AAL5) */
    U32 flags;                  /* Set zero for now */

} AS_SOCKET_PARAMS;



/* AS_BIND parameters.
 */
// typedef struct
// {
//     S32 len;                   /* length of following structure */
//     BYTE address[len];	       /* Variable length SOCKADDR format address */
//
// } AS_BIND_PARAMS;

/* AS_BIND params for PVC type addresses.
   Nice one ATML - what the hell else am I going to BIND?!
 */

typedef struct
{
  S32 len;                    // sizeof(ATML_SOCKADDR_PVC)
  ATML_SOCKADDR_PVC pvc;
} AS_BIND_PVC_PARAMS;


/* AS_CONNECT parameters.
 */
// typedef struct
// {
//     S32 len;                   // length of address data structure (bytes)
//     BYTE address[len];	       // SOCKADDR format address
//     U32 send_len;	       // Length of the transmit FLOWSPEC structure (bytes)
//     BYTE send_qos[send_len];   // Transmit QoS parameters
//     U32 recv_len;	       // Length of the receive FLOWSPEC structure (bytes)
//     BYTE recv_qos[recv_len];   // Receive QoS parameters
// } AS_CONNECT_PARAMS;

/* AS_CONNECT parameters for MSNL type connection
 */

typedef struct
{
  S32 len;                     // sizeof(ATML_SOCKADDR_MSNL)
  ATML_SOCKADDR_MSNL msnl;     // ATML MSNL format address
  U32 send_len;	     	       // == 0
  U32 recv_len;		       // == 0
} AS_CONNECT_MSNL_PARAMS;


/* AS_CONNECT_ACK parameters.
 */
// typedef struct
// {
//     S32 status;                 /* Zero if connect sucessful, else error code (TBD) */
//     U32 send_len;		// Length of the transmit FLOWSPEC structure (bytes)
//     BYTE send_qos[send_len];	// Transmit QoS parameters
//     U32 recv_len;		// Length of the receive FLOWSPEC structure (bytes)
//     BYTE recv_qos[recv_len];	// Receive Qos parameters
// } AS_CONNECT_ACK_PARAMS;


/* AS_LISTEN parameters.
 */
// typedef struct
// {
//     S32 len;                    // Length of address data structure (bytes)
//     BYTE address[len];		// SOCKADDR format address (see below)
// } AS_LISTEN_PARAMS;


/* AS_LISTEN parameters for MSNL type connection
 */

typedef struct
{
  S32 len;                      // sizeof(ATML_SOCKADDR_MSNL)
  ATML_SOCKADDR_MSNL msnl;
} AS_LISTEN_MSNL_PARAMS;


/* AS_SET_QOS parameters.
 */
typedef struct
{
    QOS_PARAM qos;

} AS_SET_QOS_PARAMS;

#endif
