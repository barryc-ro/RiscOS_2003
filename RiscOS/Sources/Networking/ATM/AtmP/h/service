//
#ifndef AtmP_service_h
#define AtmP_service_h

/* File:    service.h
   Purpose: Inteface to Socket Service
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-23: BAL
   Created.
 */




// =============================================================================
// Include header files

// Misc
#include "Email/Common/bool.h"

// Local
//#include "boson.h"
#include "message.h"




// =============================================================================
// Define contants

enum
{
    MaxHandles = 64
};

enum
{
    CMD_SERVICE,
    LAN_SERVICE,
    ECHO_SERVICE = 3,
    SOCK_SERVICE,
    ARP_SERVICE
};




// =============================================================================
// Declare classes

class NIC;
class CommandService;
class ServiceManager;

class Service
{
    // Public methods
    public:
        int  GetHandle () const;
        int  GetNumber () const;

        virtual void  Attach ();
        virtual void  Detach ();

        virtual MessageHandlerRC  MessageHandler (NICMessage    msg,
                                                  NICExtension  ext) = 0;

    // Protected methods
    protected:
        Service (ServiceManager &  service_manager,
                 unsigned int      boson_address,
                 const int         service_number,
                 int &             error);


        ~Service ();

    // Protected attributes
    protected:
        ServiceManager *  service_manager;
        unsigned int      boson_address;
        int               service_number;
        int               handle;
};

class ServiceManager
{
    // Public methods
    public:

        static ServiceManager *  Create  (NIC &  nic,
                                          int &  error);

        ~ServiceManager ();

        CommandService &  GetCommandService () const;

        int   RegisterService (Service &  new_service,
                               int &      handle);
        void  DeregisterService (Service &  service);
        void  AttachService (Service &  service);
        void  DetachService (Service &  service);

        int   GetNumberFree ();
        int   GetNumberInUse ();

        MessageHandlerRC  DespatchMessage (NICMessage    msg,
                                           NICExtension  ext);

    // Protected methods
    protected:
        ServiceManager (int &  error);

        void  SetCommandService (CommandService *  command_service);

    // Private attributes
    private:
        CommandService *  command_service;
        Service *         service[MaxHandles];
        int               next_handle;
};

#endif
