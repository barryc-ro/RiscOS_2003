//
#ifndef AtmP_service_h
#define AtmP_service_h

/* File:    service.h
   Purpose: Inteface to Socket Service
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-03-23: BAL
   Created.
 */




// =============================================================================
// Include header files

// Misc
#include "Email/Common/bool.h"

// Local
#include "boson.h"
#include "message.h"




// =============================================================================
// Define contants

enum
{
    MaxHandles = 64
};

enum
{
    CMD_SERVICE,
    LAN_SERVICE,
    ECHO_SERVICE = 3,
    SOCK_SERVICE,
    ARP_SERVICE
};



// =============================================================================
// Declare global variables

class ServiceManager;
extern ServiceManager *  service_manager;




// =============================================================================
// Declare classes

class Service
{
    // Public methods
    public:
        int  GetHandle ();
        int  GetNumber ();

        virtual void  Attach ();

        virtual MessageHandlerRC  MessageHandler (NICMessage    msg,
                                                  NICExtension  ext) = 0;

    // Protected methods
    protected:
        Service (const int  service_number,
                 int &      error,
                 int        handle = -1);


        ~Service ();

    // Protected attributes
    protected:
        int  handle;
        int  service_number;
};

class ServiceManager
{
    // Public methods
    public:
        static ServiceManager *  Create (int &  error);

        ~ServiceManager ();

        Service *  GetService (const int  handle);

        int   GetHandle (int &  handle);
        void  RegisterService (Service *  service);
        void  DeregisterService (Service *  service);

        int   GetNumberFree ();
        int   GetNumberInUse ();

    // Protected methods
    protected:
        ServiceManager (int &  error);

    // Private attributes
    private:
        static ServiceManager *  instance;
        static Service *         service[];
        static unsigned int      handle_wspace[];

};

#endif
