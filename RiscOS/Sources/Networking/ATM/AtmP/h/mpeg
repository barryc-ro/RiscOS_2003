//
#ifndef AtmP_mpeg_h
#define AtmP_mpeg_h
/*	BUFFERS.H

Project : ATML ATM25 card driver

Purpose: defines structures and parameters used by MPEG buffering


History:

Date      Who     Description of change
===========================================

20/1/97   CP	  Picked up current code.  Added header!

		  Changed struct bs_buffer to cope with variable length
		  payload.  To do this, the bs_data component is now a single
	          int placemarker (int so that the byte-alignment issue is
		  unambiguous).
		  sizeof(actual bs_buffer) =
		          sizeof(bs_buffer) - sizeof(int) + sizeof(payload).
		  bs_offset should be set to &bs_data.

		  Removed #define values BS_BUFFER_SIZE and N_BS_BUFFERS to
		  force errors if an attempt is made to try and use them.
		  These will be replaced with the equivalents bs_buffer_sizeG
		  and number_of_bs_buffersG.

		  Added #defines for default initialisation values for buffer
		  pool.

28/1/97   CP      Removed some unused macros to avoid (reduce?!) confusion.

29/1/97   CP	  Added macro BS_BUFFER_DATA to define space for a header at
		  the start of each bs_buffer structure.  No-one seems quite
		  sure why it's needed, but it is in the original code
		  (MPEG data = 376 bytes, bs_buffer payload defined as 396
		  bytes)

***************************************************************************/


#include "kernel.h"

#ifdef __cplusplus

#include "connection.h"

class MPEGConnection : public Connection
{
    // Public methods
    public:
        static MPEGConnection *  Create (const ATML_SOCKADDR *const  atm_addr,
                                         const Connection::Service   service,
                                         const Connection::Origin    origin,
                                         int &                       error);

        static MPEGConnection *  Get ();

        virtual Connection *  CheckConflict (
                                  const ATML_SOCKADDR *const  atm_addr,
                                  const Connection::Service   service,
                                  const Connection::Origin    origin,
                                  int &                       error);

        virtual int   Data (const unsigned int  data_size);
        virtual void  DataEnd ();
        virtual void  DataLength (const unsigned int  length);
        virtual void  DataAbort ();

        virtual const char *  GetTextService ();

    // Protected methods
    protected:
        MPEGConnection (const ATML_SOCKADDR *const  atm_addr,
                        const Connection::Service   service,
                        const Connection::Origin    origin,
                        int &                       error);

        virtual ~MPEGConnection () {}

    // Private attributes
    private:
        static MPEGConnection *  instance;
        struct bs_buffer *       buffer;
        unsigned int             buffer_offset;
        unsigned int             data_count;
        unsigned int             data_lost;
};

#endif

typedef struct bs_buffer *  mpeg_buffer;

extern void  mpeg_free_buffers (void);
extern void  mpeg_send_buffers(void);

#ifdef __cplusplus
extern "C"
{
#endif

extern void  mpeg_check_feed (void);

#ifdef __cplusplus
}
#endif


extern void  mpeg_empty_buffer (mpeg_buffer  b);

extern void  mpeg_display_buffer_pool (void);

extern _kernel_oserror *  mpeg_display_buffers (int  argc, char *  argv[]);

extern void  mpeg_change_buffers (const unsigned int  new_buffer_payload,
                                  const unsigned int  new_memory_pool);

extern void  mpeg_flush_full_queue (void);

#endif
