//
#ifndef Atmp_dci_h
#define Atmp_dci_h

/* File:    .h
   Purpose:
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-: BAL
   Created.
 */



// =============================================================================
// Include header files

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "net/ethernet.h"
}


#include "DCILib/dciif.h"




// =============================================================================
// Function prototype declarations

#ifdef DEBUGLIB

extern void dump_buf (u_char *  rptr, int pktlen);

extern void dump_mbuf (struct mbuf *m0, int pktlen);

#define ddump_buf  dump_buf
#define ddump_mbuf dump_mbuf

#else

#define ddump_buf(p, l)
#define ddump_mbuf(p, l)

#endif

#ifdef MemCheck_MEMCHECK

extern void memcheck_registermbuf (struct mbuf *  m);
extern void memcheck_registermbufm (struct mbuf *  m);

extern void memcheck_deregistermbuf (struct mbuf *  m);
extern void memcheck_deregistermbufm (struct mbuf *  m);

#else

#define memcheck_registermbuf(m)
#define memcheck_registermbufm(m)
#define memcheck_deregistermbuf(m)
#define memcheck_deregistermbufm(m)

#endif

extern "C" void  callproto (Dib *, struct mbuf *, DCIRxFrameHandler, void *);




// =============================================================================
// Class declarations

class NIC;

class ATM25DCIInterface : public DCIInterface
{
    // Public methods
    public:
        ATM25DCIInterface (NIC &  nic,
                           int &  error);

        ~ATM25DCIInterface ();

        virtual struct mbctl &  GetMBCTL () = 0;

        virtual void            DisplayInfo ();

    // Protected methods
    protected:
        virtual DCIFilter *  CreateFilter (
                                 const unsigned int       flags,
                                 const u_short            frame_type,
                                 const u_short            frame_level,
                                 const int                addr_level,
                                 const int                error_level,
                                 void *const              pw,
                                 const DCIRxFrameHandler  rx_handler,
                                 DCIFilterMulticast *     filter_multicast);

    // Protected data
    protected:
        static unsigned char  hw_bcast_addr[ETHER_ADDR_LEN];

};

#endif
