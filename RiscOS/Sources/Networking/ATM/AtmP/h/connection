//
#ifndef AtmP_connection_h
#define AtmP_connection_h

/* File:    connection.h
   Purpose: Interface to connection handling
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-20: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include "kernel.h"

// Local
#include "atm.h"
#include "flowspec.h"
#include "vc.h"




// =============================================================================
// Class declarations

class ClientConnection;

class Connection : public VCReceiver
{
    // Public data types
    public:
        enum Service
        {
            Service_MPEG_AAL5 = 32,
            Service_IP_LLC    = 33,
            Service_IP_VC     = 56
        };

        enum Origin
        {
            Local,
            Remote
        };

    // Public methods
    public:
        virtual Connection *  CheckConflict (
                                  const ATML_SOCKADDR *const  atm_addr,
                                  const Connection::Service   service,
                                  const Connection::Origin    origin,
                                  int &                       error) = 0;

        virtual int   AddClient (ClientConnection *  client);

        virtual void  RemoveClient (ClientConnection *  client);

        virtual void  StateChanged (const SocketService::State  state);

        virtual void  Connect ();

        virtual int   Listen ();

        virtual void  Close ();

        virtual void  Error (const int   status,
                             const bool  fatal);

        Origin  GetOrigin ();

        VC *    GetVC ();

        int  GetError ();

        bool  Unused ();
        void  Display ();

    // Protected methods
    protected:
        Connection (NIC &                 nic,
                    const ATML_SOCKADDR *const  atm_addr,
                    const Service               service,
                    const Origin                origin,
                    int &                       error);

        virtual ~Connection ();

        virtual const char *  GetTextService () = 0;

        virtual struct in_addr  GetDestIPAddr ();


    // Private methods
    private:

    // Protected data types
    protected:
        struct ClientListItem
        {
            ClientConnection *  client;
            ClientListItem *    next;
        };

    // Protected attributes
    protected:
        int                   usage;
        VC *                  vc;
        SocketService *       socket;
        ClientListItem *      client_list;
        Service               service;
        int                   error;
        Origin                origin;
        bool                  used;
        bool                  immortal_listen;
};




class ConnectionManager
{
    // Public methods
    public:
        ConnectionManager ();

        ~ConnectionManager ();

        void  DisplayAll (void);

        int  Add (Connection *const  connection);

        void  Remove (Connection *const  connection);

        Connection *  Find (const ATML_SOCKADDR *const  atm_addr,
                            const Connection::Service   service,
                            const Connection::Origin    origin,
                            int &                       error);

        void  CloseUnused ();

    // Private data
    private:
        struct ConnectionListItem
        {
            Connection *          connection;
            ConnectionListItem *  next;
        };

        ConnectionListItem *   connection_list;
};




class ClientConnection
{
    // Public methods
    public:
        ClientConnection (NIC &                       nic,
                          const ATML_SOCKADDR *const  atm_addr,
                          const Connection::Service   service,
                          const ATMStatusFn           status_fn,
                          void *const                 status_pw,
                          Connection::Origin          origin,
                          int &                       error);

        ~ClientConnection ();

        Connection *  GetConnection ();

        void  Notify (SocketService::State  state);

    // Private data
    private:
        Connection *         connection;
        ConnectionManager &  connection_manager;

        struct
        {
            ClientConnection *    handle;
            SocketService::State  state;
            ATMStatusFn           status_fn;
            int                   semaphore;
            void *                status_pw;
        } callback_data;
};

#endif
