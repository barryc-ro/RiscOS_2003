//
#ifndef AtmP_ip_h
#define AtmP_ip_h

/* File:    ip.h
   Purpose: IP connections
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-03-30: BAL
   Created.
 */




// =============================================================================
// Include header files

// Local
#include "address.h"
#include "connection.h"
#include "defs.h"
#include "dci.h"
#include "mbuf.h"




// =============================================================================
// Constants definitions

enum
{
    LLC_HDR_SIZE = 8
};




// =============================================================================
// Class declarations

class IPConnection : public Connection
{
    // Public methods
    public:
        static IPConnection *  Create (
                   const ATML_SOCKADDR *const  atm_addr,
                   const Connection::Service   service,
                   const Connection::Origin    origin,
                   int &                       error);

        virtual Connection *  CheckConflict (
                                  const ATML_SOCKADDR *const  atm_addr,
                                  const Connection::Service   service,
                                  const Connection::Origin    origin,
                                  int &                       error);

        virtual void  Close();

        virtual void  StateChanged (const SocketService::State  state);
        virtual int   DataSize (unsigned int  data_size);
        virtual int   Data (unsigned int  data_size);
        virtual void  DataEnd ();
        virtual void  DataLength (unsigned int  length);
        virtual void  DataAbort ();

        int  IPConnection::TxMBufChain (const int       frame_type,
                                        struct mbuf *&  m0,
                                        const bool      free_mbufs);

        virtual const char *  GetTextService ();

    // Protected methods
    protected:
        IPConnection (const ATML_SOCKADDR *const  atm_addr,
                      const Connection::Service   service,
                      const Connection::Origin    origin,
                      int &                       error);

        virtual ~IPConnection ();

        virtual int  Listen ();

    // Protected attributes
    protected:
        mac_map_t *          mac_mapping;
        bool                 llc;
        struct mbuf *        m;							// Current mbuf being used for received data
        struct mbuf **       m_next;						// Pointer to next mbuf to be used for received data
        //unsigned char        buffer[ATM_MTU + LLC_HDR_SIZE];
        //unsigned int         buffer_offset;
        unsigned int         data_count;					// Total amount of data received
        unsigned int         data_lost;						// Total amount of data dropped
        unsigned int         rx_packet_size;					// Size of packet being received
        unsigned int         llc_snap_hdr[M_round_word (LLC_HDR_SIZE)];
        struct mbuf *        llc_snap_mbuf;
        //static unsigned int  txbuf[];
};

#endif
