//
#ifndef AtmP_ip_h
#define AtmP_ip_h

/* File:    ip.h
   Purpose: IP connections
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-30: BAL
   Created.
 */




// =============================================================================
// Include header files

// Local
#include "address.h"
#include "connection.h"
#include "defs.h"




// =============================================================================
// Constants definitions

enum
{
    LLC_HDR_SIZE = 8
};




// =============================================================================
// Class declarations

class NIC;
class ATM25SocketsDCIInterface;

class IPConnection : public Connection
{
    // Public methods
    public:
        static IPConnection *  Create (
                   NIC &                       nic,
                   const ATML_SOCKADDR *const  atm_addr,
                   const Connection::Service   service,
                   const Connection::Origin    origin,
                   int &                       error);

        virtual Connection *  CheckConflict (
                                  const ATML_SOCKADDR *const  atm_addr,
                                  const Connection::Service   service,
                                  const Connection::Origin    origin,
                                  int &                       error);

        virtual void  Close();

        virtual void  StateChanged (const SocketService::State  state);
        virtual int   DataSize (unsigned int  data_size);
        virtual int   Data (unsigned int  data_size);
        virtual void  DataEnd ();
        virtual void  DataLength (unsigned int  length);
        virtual void  DataAbort ();

        int  IPConnection::TxMBufChain (const u_short   frame_type,
                                        struct mbuf *&  m0,
                                        const bool      free_mbufs);

        virtual const char *  GetTextService ();

    // Protected methods
    protected:
        IPConnection (NIC &                       nic,
                      const ATML_SOCKADDR *const  atm_addr,
                      const Connection::Service   service,
                      const Connection::Origin    origin,
                      int &                       error);

        virtual ~IPConnection ();

        virtual int  Listen ();

        struct in_addr  GetDestIPAddr ();

    // Protected attributes
    protected:
        ATM25SocketsDCIInterface &  dci_if;
        IPMap &                     ip_map;
        MACMap &                    mac_map;
        struct mbctl &              MBCTL;
        MACMap::mac_map_t *         mac_mapping;

        const unsigned char *       remote_mac_addr;
        bool                        llc;
        struct mbuf *               m;							// Current mbuf being used for received data
        struct mbuf **              m_next;						// Pointer to next mbuf to be used for received data
        unsigned int                data_count;						// Total amount of data received
        unsigned int                data_lost;						// Total amount of data dropped
        unsigned int                rx_packet_size;					// Size of packet being received
        unsigned int                llc_snap_hdr[M_round_word (LLC_HDR_SIZE)];
        struct mbuf *               llc_snap_mbuf;
};

#endif
