//
#ifndef Atmp_dcisock_h
#define Atmp_dcisock_h

/* File:    .h
   Purpose:
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-: BAL
   Created.
 */



// =============================================================================
// Include header files

#include "DCILib/dciif.h"
#include "DCILib/dcimultilist.h"

// Local
#include "arp.h"
#include "dci.h"




// =============================================================================
// Constants definitions

enum
{
    ATM_MTU = 1536,
    // Used to be 9180, but altered because suspected bug in Virata firmware
    // means it can't cope with some large packet sizes.

    ATM_MRU = 9180
};




// =============================================================================
// Class declarations

class IPMap;
class MACMap;
class NIC;
class IPConnection;
class MbufController;

class ATM25SocketsDCIInterface : public ATM25DCIInterface
{
    // Public methods
    public:
        ATM25SocketsDCIInterface (NIC &  nic,
                                  int &  error);

        virtual   ~ATM25SocketsDCIInterface ();

        IPMap &   GetIPMap ();
        MACMap &  GetMACMap ();

        void      FlushCachedConnection (IPConnection *  connection);

        virtual int  Transmit (const unsigned int     flags,
                               const u_short          frame_type,
                               struct mbuf *          m,
                               const unsigned char *  dest,
                               const unsigned char *  src);

        bool         Broadcast (struct mbuf *    m0,
                                const u_short    frame_type,
                                const u_char **  dest);

        int          Receive (const u_short          frame_type,
                              const unsigned char *  src_addr,
                              struct mbuf *          m,
                              IPConnection *         connection = 0);

        virtual struct mbctl &  GetMBCTL ();

    // Private data
    private:
        IPMap           ip_map;
        MACMap          mac_map;

        IPConnection *  cached_connection;

        ARP             arp;
        ATMARP          atmarp;

        static int               count;
        static struct mbctl      MBCTL;
        static MbufController *  mbuf_controller;
};

#endif
