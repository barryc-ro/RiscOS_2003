//
#ifndef AtmP_vc_h
#define AtmP_vc_h

/* File:    vc.h
   Purpose: Interface to Virtual Circuit handling
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-23: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <stdlib.h>

// Misc
#include "Email/Common/bool.h"

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "sys/mbuf.h"
}

// Local
#include "atm.h"
#include "flowspec.h"
#include "socket.h"




// =============================================================================
// Declare classes

class NIC;

class VCReceiver
{
    // Public methods
    public:
                      VCReceiver (NIC &  nic);
        virtual      ~VCReceiver ();
        virtual void  StateChanged (const SocketService::State  state);
        virtual int   DataSize (unsigned int  data_size);
        virtual int   Data (unsigned int  data_size);
        virtual void  DataEnd ();
        virtual void  DataLength (unsigned int  length);
        virtual void  DataAbort ();
        virtual void  Error (const int   error,
                             const bool  fatal);


    // Protected data
    protected:
        unsigned int  boson_address;
};

class VC
{
    friend class SocketService;

    // Public methods
    public:
        static VC *  Create (NIC &                       nic,
                             const ATML_SOCKADDR *const  atm_addr,
                             VCReceiver &                vc_receiver,
                             int &                       error);

        virtual ~VC ();

        virtual void          Connect () = 0;

        void                  Close ();
        void                  StateChanged (const SocketService::State  state);
        SocketService::State  GetState ();
        void                  ClosedByRemote ();

        int  TxData (const unsigned char *  data,
                     int                    data_bytes);

        int  TxData (struct mbuf *  m,
                     int            data_bytes);

        //SocketService *  GetSocket ();

        virtual int  GetAddressFamily () = 0;
        virtual const ATML_SOCKADDR *  GetATMAddr () = 0;
        virtual const FLOWSPEC *  GetTxQoS () = 0;
        virtual const FLOWSPEC *  GetRxQoS () = 0;

        virtual const char *  GetTextType () = 0;
        virtual const char *  GetTextAddr () = 0;

    // Protected methods
    protected:
        VC (NIC &         nic,
            VCReceiver &  vc_receiver,
            int &         error);

    // Protected attributes
    protected:
        VCReceiver *          vc_receiver;
        SocketService *       socket;
        SocketService::State  state;
};

class PVC : public VC
{
    // Public methods
    public:
        PVC (NIC &                           nic,
             const ATML_SOCKADDR_PVC *const  atm_addr,
             VCReceiver &                    vc_receiver,
             int &                           error);

        virtual void  Connect ();


        virtual int  GetAddressFamily ();
        virtual const ATML_SOCKADDR *  GetATMAddr ();
        virtual const FLOWSPEC *  GetTxQoS ();
        virtual const FLOWSPEC *  GetRxQoS ();

        virtual const char *  GetTextType ();
        virtual const char *  GetTextAddr ();

    // Private attributes
    private:
        ATML_SOCKADDR_PVC  atm_addr;
};

class SVC : public VC
{
    // Public methods
    public:
        SVC (NIC &                           nic,
             const ATML_SOCKADDR_ATM *const  atm_addr,
             VCReceiver &                    vc_receiver,
             int &                           error);

        virtual void  Connect ();

        void          Listen ();

        void  Connected ();

        virtual int  GetAddressFamily ();
        void  SetAddress (const ATML_SOCKADDR_ATM *const  atm_addr);
        void  SetTxQoS (const FLOWSPEC *const  tx_qos);
        void  SetRxQoS (const FLOWSPEC *const  rx_qos);

        virtual const ATML_SOCKADDR *  GetATMAddr ();
        virtual const FLOWSPEC *  GetTxQoS ();
        virtual const FLOWSPEC *  GetRxQoS ();

        virtual const char *  GetTextType ();
        virtual const char *  GetTextAddr ();


    // Private attributes
    private:
        ATML_SOCKADDR_ATM      atm_addr;
        FLOWSPEC               tx_qos;
        FLOWSPEC               rx_qos;
        const static FLOWSPEC  default_qos;
};

#endif
