//
#ifndef AtmP_nic_h
#define AtmP_nic_h

/* File:    nic.h
   Purpose: NIC management
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-04-26: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include "kernel.h"

// TCPIPLibs
#include "sys/types.h"
#include "net/ethernet.h"

// Misc
#include "DCILib/dciif.h"
#include "Email/Common/bool.h"

// Local
#include "boson.h"
#include "defs.h"
#include "nvparams.h"




// =============================================================================
// Constants defintions

enum
{
    ConfigCommand_Status = -1
};




// =============================================================================
// Type definitions

typedef enum
{
    BootConfig_Action_Sanitise,
    BootConfig_Action_Read,
    BootConfig_Action_Validate,
    BootConfig_Action_Update
} bootconfig_action_t;

typedef enum
{
    BootConfig_Data_All,
    BootConfig_Data_PVC,
    BootConfig_Data_PrimaryATM,
    BootConfig_Data_SecondaryATM
} bootconfig_data_t;




// =============================================================================
// Class declarations

class ServiceManager;
class ConnectionManager;
class NVParams;
class ATM25SocketsDCIInterface;
class ATM25LANEDCIInterface;

class NIC
{
    // Public member functions
    public:
        static NIC *                GetNIC ();
        static void                 DestroyAll ();
        static void                 ResetAll ();

                                    NIC (const int           slot,
                                         unsigned int        address,
                                         _kernel_oserror *&  os_error);

        ServiceManager &            GetServiceManager () const;
        ConnectionManager &         GetConnectionManager () const;
        NVParams &                  GetNVParams ();

        ATM25SocketsDCIInterface &  GetSocketsIF () const;
        ATM25LANEDCIInterface &     GetLANEIF () const;

        int                         GetSlot () const;
        unsigned int                GetHardwareAddress () const;

        const unsigned char *       GetUNIAddr ();
        const unsigned char *       GetUNIAddr (int &  error);

        const unsigned char *       GetNetPrefix ();
        const unsigned char *       GetNetPrefix (int &  error);

        const unsigned char *       GetMACAddr ();
        const unsigned char *       GetMACAddr (int &  error);

        void                        DisplayInfo ();

        void                        Reset ();
        void                        EnableInterrupts ();
        void                        DisableInterrupts ();

        void                        SetCircuitWatchInterval (int  interval);

        int                         ConfigurePVC (
                                        const bootconfig_action_t  action,
                                        unsigned int *const        pvc);

        int                         ConfigurePrimaryATM (
                                        const bootconfig_action_t  action,
                                        unsigned char *            atm_addr);

        _kernel_oserror *           ConfigureARP (int     argc,
                                                  char *  argv[]);


        _kernel_oserror *           ConfigureLLC (int  argc,
                                                  char *  argv[]);

        _kernel_oserror *           ConfigureVC (int  argc,
                                                 char *  argv[]);


        _kernel_oserror *           ConfigureUpstreamBandwidth (int argc,
                                                                char *  argv[]);

    // Private member functions
    private:
        ~NIC ();

        void  DisableAllInterrupts ();

        int   ReadNetPrefix ();

        static _kernel_oserror *  TickerHandler (_kernel_swi_regs *  r,
                                                 void *              pw,
                                                 void *              handle);

        void  CloseUnusedCircuits ();



    // Private data members
    private:
        struct NICListItem
        {
            NIC *          nic;
            NICListItem *  next;
        };
        static NICListItem *   nic_list;

        NVParams                    nvparams;

        ServiceManager *            service_manager;
        ConnectionManager *         connection_manager;

        ATM25SocketsDCIInterface *  sockets_if;
        ATM25LANEDCIInterface *     lane_if;

        hardware_context  hw_context;
        int               slot;

        bool           read_mac_addr;
        bool           read_net_prefix;
        unsigned char  uni_addr[NSAPAddr_Size];
        unsigned char  mac_addr[ETHER_ADDR_LEN];
        unsigned char  net_prefix[NSAPAddr_NetPrefix_Size];

        int  ticker_period;    /* cS delay before circuit checker kicks in */
        int  ticker_tally;


};

#endif
