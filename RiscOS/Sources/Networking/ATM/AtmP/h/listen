// header file for listen.c

/* Begin-Prologue */
#ifndef LISTEN_H
#define LISTEN_H
#undef DECLARE
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */
#ifdef OLD_SOCKET_HANDLES
#define INC_SOCK_HANDLE next_free_socket_handle++; \
      			if(next_free_socket_handle > MAX_SOCKET_HANDLE) \
      			  next_free_socket_handle = SOCKET_HANDLE_BASE
#endif

#define LISTENTAB_SIZE 16
#define LISTENTAB_SYSTEM_IP 4

#define L_SYSTEM       0x1  /* This is a device driver listen */
#define L_REANIMATE    0x2  /* Reincarnate this listen after a successful connection */

struct listen {
  unsigned int handle;      /* Panther msg handle for this listen. 0 = free entry */
  unsigned int local_port;  /* Local port on which we are listening */
  unsigned int muxtype;	    /* encapsulation type for multiplexing */
  unsigned int flags;	    /* various L_ flags */
};

DECLARE int init_listen(void);
DECLARE struct listen *locate_listen(unsigned int);
DECLARE struct listen *locate_listen_port(unsigned int);
DECLARE struct listen *add_listen(unsigned int, unsigned int);
DECLARE int reanimate_listen(struct listen *);

DECLARE struct listen listentab[LISTENTAB_SIZE];
#ifdef OLD_SOCKET_HANDLES
DECLARE unsigned int next_free_socket_handle INIT(SOCKET_HANDLE_BASE);
#endif
/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */

