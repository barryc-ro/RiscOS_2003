/* headers.h  --
   	         do some general includes, and set up all sorts
   	         of grim defines for the Intel code.

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef unsigned int U32;
typedef unsigned short int U16;
typedef unsigned char U8;

typedef struct PNP_t {
  char name[40];
  int id;
  int sn;
  int chksum;
  int csn;
  int base;
  int irq;
} PNP_t;

#define TRUE         1
#define FALSE 	     0

#define QUIET 	         if(!quiet)
#define DBUG		 if(debug)
#define UNUSED(x)        (x)=(x)
#define UNUSED_LABEL(x)  {if(0) goto x;}

#undef HALF_WORD_ACCESSES

#define RANGE_CHECK_DEFAULT       FALSE
#define QUIET_DEFAULT		  TRUE
#define DEBUG_DEFAULT		  FALSE
#define DUMP_DEFAULT		  FALSE
#define INVERT_A11_DEFAULT	  FALSE

#define PNP_RD_PORT_DEFAULT       0x260
#define PNP_IO_BASE_DEFAULT	  0x260
#define PNP_IRQ_DEFAULT		  5
#define DEFAULT_PODULE_NUMBER	  0x01 /* always 1 in STB2 - but change for debugging on RPC */

/* BOSON SYNC phase defined constants */
#define SYNC0 	    	    	 0xf378cd09
#define	SYNC1			 0xda7b8217

#define TIMEOUT                  500

/* BOSON BOOT phase defined commands */
#define BOOT_BOOT   	    	 0x426f6f74 /* literally, 'B', 'o', 'o', 't'  */
#define BOOT_ACK		 0x41434b20 /* an ACK from NIC->HOST, not really a command, lit "ACK " */
#define BOOT_ADDR		 0x41646472 /* lit. "Addr"  */
#define BOOT_GO			 0x474f2020 /* lit. "GO  " */

/* Post image download ack constants  */
#define ROM_ACK	       	   	 0x41544d4c

/* BOSON read registers -- 32 bit mode for various FIFO regs */
#define r_Boson_Version          *(U32 *)(0x88800200 + (podule<<24))
#define r_Boson_FromARM	         *(U32 *)(0x88800240 + (podule<<24))
#define r_Boson_BlockFromARM     *(U32 *)(0x88800280 + (podule<<24))
#define r_Boson_CommitFromARM    *(U32 *)(0x888002c0 + (podule<<24))

/* BOSON read registers -- 16 bit mode for various status regs */
#define r_Boson_MaskedStatus	 *(U32 *)(0x88c00300 + (podule<<24))
#define r_Boson_Status		 *(U32 *)(0x88c00340 + (podule<<24))

/* BOSON write registers - 32 bit mode for various FIFO regs */
#define w_Boson_ToARM(x)         *(U32 *)(0x88800240 + (podule<<24))=x
#define w_Boson_BlockToARM(x) 	 *(U32 *)(0x88800280 + (podule<<24))=x
#define w_Boson_CommitToARM(x)   *(U32 *)(0x888002c0 + (podule<<24))=x

/* BOSON write registers -- 16 bit mode for various status/ctrl regs */
#define w_Boson_IRQMask(x)	 *(U32 *)(0x88c00300 + (podule<<24))=(x & 0xffff)
#define w_Boson_Command(x)	 *(U32 *)(0x88c00340 + (podule<<24))=(x & 0xffff)
#define w_Boson_CommitToARM16(x) *(U32 *)(0x88c002c0 + (podule<<24))=(x & 0xffff)

/* And the 32bit-mode raw addresses for use by our assembler routines */
#define CommitFromARMAddr    	  (U32)(0x888002c0 + (podule<<24))
#define BlockFromARMAddr	  (U32)(0x88800280 + (podule<<24))
#define BlockToARMAddr		  (U32)(0x88800280 + (podule<<24))

/* And the 16bit-mode raw addresses for use by our assembler routines */
#define BosonStatusAddr		  (U32)(0x88c00340 + (podule<<24))
#define Boson_MaskedStatusAddr	 (U32)(0x88c00300 + (podule<<24))

/* some handy macros -- access the BOSON regs. in 16bit addressing mode */
#define Boson_RX_NotEmpty        (*(U32 *)(0x88c00340 + (podule<<24)) & 0x10)
#define Boson_RX_Block		 (*(U32 *)(0x88c00340 + (podule<<24)) & 0x8)
#define Boson_TX_384		 (*(U32 *)(0x88c00340 + (podule<<24)) & 0x1)
#define Boson_TX_128		 (*(U32 *)(0x88c00340 + (podule<<24)) & 0x2)
#define Boson_TX_16		 (*(U32 *)(0x88c00340 + (podule<<24)) & 0x4)

/* Boson main IRQ flag */  /* defined by the EASI interface, not by the Panther card */
/* these define the address of the register (for OS_DeviceClaimVector) and also a
   macro to read it. NB: the IRQ bit in this register is not latched, and may be
   changing as it is read!!! Use Check_Boson_IRQ repeatedly until 2 reads are the same! */

#define Boson_IRQ      	      	 (U32)(0x88400000 + (podule<<24))
#define Check_Boson_IRQ		 (*(U32 *)(0x88400000 + (podule<<24)) & 0x2)

/* BOSON status register bits */

#define BosonStatus_Tx384          0x1
#define BosonStatus_Tx128    	   0x2
#define BosonStatus_Tx16     	   0x4
#define BosonStatus_RxBlock	   0x8
#define BosonStatus_NotEmpty 	   0x10
#define BosonStatus_Alarm    	   0x20
#define BosonStatus_Tx384Mask      0x40
#define BosonStatus_Tx128Mask	   0x80
#define BosonStatus_Tx16Mask	   0x100
#define BosonStatus_RxBlockMask	   0x200
#define BosonStatus_NotEmptyMask   0x400
#define BosonStatus_AlarmMask	   0x800
#define BosonStatus_ReadTop16	   0x1000
#define BosonStatus_WriteTop16	   0x2000
#define BosonStatus_ToArmAlarm	   0x4000

/* BOSON Command register bits */

#define BosonCmd_SetNotEmptyMask   0x0410
#define BosonCmd_ClrNotEmptyMask   0x0400

#define BosonCmd_SetRxBlockMask    0x0208
#define BosonCmd_ClrRxBlockMask	   0x0200

#define BosonCmd_SetTX384Mask	   0x0041
#define BosonCmd_ClrTX384Mask	   0x0040

#define BosonCmd_SetTX128Mask	   0x0082
#define BosonCmd_ClrTX128Mask	   0x0080

#define BosonCmd_SetTX16Mask       0x0104
#define BosonCmd_ClrTX16Mask	   0x0100

#define BosonCmd_ClrAll            0x0fc0  /* clear all interrupt masks */


/* BOSON Masked Status register bits */
#define BosonMaskedStatus_NotEmpty 0x10



