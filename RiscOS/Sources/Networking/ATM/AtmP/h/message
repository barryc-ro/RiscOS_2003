#ifndef AtmP_message_h
#define AtmP_message_h

/* File:    message.h
   Purpose: Data types to represent messages sent to / from the NIC.
            Suitable for C or C++ code.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-02: BAL
   Created.
 */




/* =============================================================================
 * Constants definitions
 */

enum
{
    AS_SOCKET      = 0x0,
    AS_BIND        = 0x1,
    AS_CONNECT     = 0x2,
    AS_CONNECT_ACK = 0x3,
    AS_LISTEN      = 0x4,
    AS_CLOSE       = 0x5,
    AS_CLOSE_ACK   = 0x6,
    AS_DATA        = 0x7,
    AS_DATA_END    = 0x8,
    AS_DATA_ABORT  = 0x9,
    AS_SET_QOS     = 0xa,
    AS_DATA_LENGTH = 0xb,
    AS_ADD_PARTY   = 0xc,
    AS_DROP_PARTY  = 0xd,
    /* 0xe reserved */
    AS_ERROR       = 0xf
};

enum
{
    NIC_DataMessage,
    NIC_CommandMessage
};

typedef enum
{
    HandledMsg,
    DiscardMsg,
    FlushFIFO
} MessageHandlerRC;




/* =============================================================================
 * Type definitions
 */

typedef union
{
    /* 'raw' header */
    unsigned int  header;

    /* command message */
    struct
    {
        unsigned int  handle   : 10;
        unsigned int  type     :  1;    /* always 1 for command message */
        unsigned int  command  :  4;
        unsigned int  reserved :  1;    /* zero */
        unsigned int  param    : 16;
    } command;

    /* data message */
    struct
    {
        unsigned int  handle   : 10;
        unsigned int  type     :  1;
        unsigned int  command  :  4;
        unsigned int  first    :  1;
        unsigned int  last     :  1;
        unsigned int  ext      :  1;
        unsigned int  reserved :  3;
        unsigned int  size     : 11;
    } data;

    /* elements common to both */
    struct
    {
        unsigned int  handle   : 10;
        unsigned int  type     :  1;
        unsigned int  command  :  4;
    } common;
} NICMessage;

typedef union
{
    unsigned int  extension;

    struct
    {
        unsigned int  reserved : 16;
        unsigned int  size     : 16;
    } bits;
} NICExtension;

#endif
