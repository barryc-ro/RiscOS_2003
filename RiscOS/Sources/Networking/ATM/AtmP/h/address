//
#ifndef AtmP_address_h
#define AtmP_address_h

/* File:    address.h
   Purpose: Interface to address mapping, conversion etc. routines
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-02-24: BAL
   Created.
 */




// =============================================================================
// Include header files

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "net/ethernet.h"
}

// Misc
#include "DCILib/dcidefs.h"
#include "Email/Common/bool.h"

// Local
#include "atm.h"
//#include "connection.h"




// =============================================================================
// Class declarations

class IPConnection;

class MACMap
{
    // Data types
    public:
        struct  mac_map_t;

    private:
        struct  mac_map_t
        {
            struct mac_map_t *  next;
            unsigned char       mac_addr[ETHER_ADDR_LEN];
            IPConnection *      connection;
        };

    // Public methods
    public:
                        MACMap ();

                       ~MACMap ();

        mac_map_t *     Alloc ();

        int             Add (const unsigned char *const  mac_addr,
                             IPConnection *const         connection,
                             mac_map_t *                 mapping);

        void            Remove (const unsigned char *const  mac_addr,
                                IPConnection *const         connection);

        int             Count (const unsigned char *const  mac_addr);

        IPConnection *  Find (const unsigned char *const  mac_addr);

    // Private methods
    private:
        int             HashMACAddr (const unsigned char *const  mac_addr);

    // Private data
    private:
        enum
        {
            MACMap_TableSize = 43
            /* Size of MAC address mapping hash table. If changing then ensure
             * it remains a prime number.
             */
        };
        mac_map_t *  mac_map_table[MACMap_TableSize];
};

class IPMap
{
    // Private data types
    private:
        struct  ip_map_t
        {
            struct ip_map_t *  next;
            u_long             ip_addr;
            ATML_SOCKADDR      atm_addr;
            unsigned char      mac_addr[ETHER_ADDR_LEN];
        };

    // Public methods
    public:
        IPMap ();
        ~IPMap ();

        int  Add (const u_long                ip_addr,
                  const ATML_SOCKADDR *const  atm_addr);

        void  Remove (const unsigned char *const  mac_addr);

        const unsigned char *  MACFromIP (const u_long  ip_addr);

        u_long  IPFromATM (const ATML_SOCKADDR *const  atm_addr);

        const unsigned char *  MACFromATM (
                                   const ATML_SOCKADDR *const  atm_addr);

    // Private methods
    private:
        const unsigned char *  MACFromPVC (
                                  const ATML_SOCKADDR_PVC *const  atm_addr);


    // Private data
    private:
        ip_map_t *   ip_map_list;
};




// =============================================================================
// Function prototype declarations

extern int  atm_aton (const char *  text_addr,
                      char *        numeric_addr);

extern bool  compare_atm_addresses (const ATML_SOCKADDR *const  atm_addr1,
                                    const ATML_SOCKADDR *const  atm_addr2);

#endif
