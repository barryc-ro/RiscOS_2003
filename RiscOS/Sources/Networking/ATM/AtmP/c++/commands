/*	COMMANDS.C

Project : ATML ATM25 card driver

Purpose: RiscOS module command handlers.


History:

Date      Who     Description of change
===========================================
20/1/97    CP      Picked up existing code, added header.

	 	  Replaced all occurrences of N_BS_BUFFERS with
		  number_of_bs_buffersG

		  Added call to bswait_init after resizing buffers

29/1/97   CP      Added in a header to each bs_buffer structure.  No-one's
	 	  quite sure what it is, but it's length is defined in
		  buffers.h (around 20 bytes)

30/4/98   CP      Changed arguments for various functions to const inorder to
                  protect incoming data/fit with prototypes defined in cmhg.h

***************************************************************************/
/* commands.c */




// =============================================================================
// Include header files

#include "kernel.h"
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

extern "C"
{
    #include "sys/types.h"
    #include "inetlib.h"
}

#include "DebugLib/debuglib.h"

#include "address.h"
#include "atmswis.h"
#include "boson.h"
#include "connection.h"
#include "dcisock.h"
#include "defs.h"
#include "error.h"
#include "lane.h"
#include "module.h"
#include "mpeg.h"
#include "nic.h"
#include "nvparams.h"
#include "socket.h"
#include "utils.h"




// =============================================================================
// Function prototype declarations

static int  open_connection (const Connection::Service   service,
                             const u_long                ip_addr,
                             const ATML_SOCKADDR *const  atm_addr);

static int  close_connection (const Connection::Service   service,
                              const ATML_SOCKADDR *const  atm_addr);




// =============================================================================
// Function definitions

/******* atm_changebufferpool **********************************************

Purpose: Change the size of the bs_buffer chain payload.  This will trash the
	 current set of buffers and recreate the new ones using
	 init_bs_buffers().

Inputs:  char * arguments (0 => display current values)
		-b buffer payload size
		-m memory pool size

Outputs: none

***************************************************************************/

_kernel_oserror *  command_changebufs (int      argc, char *  argv[])
{
    _kernel_oserror *  e;

    if (argc == 0)
    {
        mpeg_display_buffer_pool ();
    }
    else
    {
        unsigned int  memory_pool    = 0;
        unsigned int  buffer_payload = 0;

        while (*argv)
        {
            if ( (*argv)[0] != '-')
            {
                e = M_gen_error (ErrorNumber_Syntax);
                return e;
            }

            switch ((*argv)[1])
            {
                case 'b':    /* change the buffer payload */
                    if (!*(++argv))
                    {
                        e = M_gen_error (ErrorNumber_Syntax);
                        return e;
                    }

                    buffer_payload = (unsigned int) strtoul (*argv, 0, 0);
                    if (buffer_payload == 0) /* validate value */
                    {
                        e = error_gen_tok (Error_ATM_InvalidData, "EBufP");
                        return e;
                    }
                    break;

                case 'm':    /* change the memory pool size */
                    if (!*(++argv))
                    {
                        e = M_gen_error (ErrorNumber_Syntax);
                        return e;
                    }
                    memory_pool = (unsigned int) strtoul (*argv, 0, 0);
                    if (memory_pool == 0) /* validate value */
                    {
                        e = error_gen_tok (Error_ATM_InvalidData, "EBufM");
                        return e;
                    }
                    break;

                default:
                    e = M_gen_error (ErrorNumber_Syntax);
                    return e;
            } /* end switch */

            argv++;
        }; /* end while */

        mpeg_change_buffers (buffer_payload, memory_pool);
    } /* end if */

    return 0;
}




_kernel_oserror *  command_info (int  argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);

    NIC *  nic = NIC::GetNIC ();
    if (!nic)
    {
        return error_int_to_os (Error_ATM_NoNIC);
    }

    nic->DisplayInfo ();

    return 0;
}




_kernel_oserror *  command_boson (int  argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);

    NIC *  nic = NIC::GetNIC ();
    if (!nic)
    {
        return error_int_to_os (Error_ATM_NoNIC);
    }

    boson_display_info (nic->GetHardwareAddress ());
    return 0;
}




#ifdef DEBUG

_kernel_oserror *  command_status (int  argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);

    NIC *  nic = NIC::GetNIC ();
    if (!nic)
    {
        return error_int_to_os (Error_ATM_NoNIC);
    }

    boson_display_status (nic->GetHardwareAddress ());
    return 0;
}

#endif




_kernel_oserror *  command_trail (int  argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);

    NIC *  nic = NIC::GetNIC ();
    if (!nic)
    {
        return error_int_to_os (Error_ATM_NoNIC);
    }

    boson_display_trail (nic->GetHardwareAddress ());
    return 0;
}




/* -----------------------------------------------------------------------------
   command_connections

   Display information about VCs.

   Inputs
   int     argc   : number of command line arguments
   char *  argv[] : 0-terminated array of 0-terminated command line arguments

   Returns
   success : 0
   failure : pointer to RISC OS error block
 */

_kernel_oserror *  command_connections (int  argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);

    NIC *  nic = NIC::GetNIC ();
    if (!nic)
    {
        return error_int_to_os (Error_ATM_NoNIC);
    }
    nic->GetConnectionManager().DisplayAll ();
    return 0;
}




_kernel_oserror *  command_cci (int argc, char * argv[])
{
    _kernel_oserror *  e = 0;

    if (argc == 1)
    {
        NIC *  nic = NIC::GetNIC ();
        if (!nic)
        {
            return error_int_to_os (Error_ATM_NoNIC);
        }

        int  n = atoi (argv[0]);

        if (n < 0 || n > 300)
        {
            e = error_gen_tok (Error_ATM_InvalidData, "ECCIRange");
        }
        else
        {
            nic->SetCircuitWatchInterval (n);
        }
    }

    return e;
}




_kernel_oserror *  command_pvc (int argc, char *  argv[])
{
    int                   error;
    _kernel_oserror *     e = 0;
    ATML_SOCKADDR         atm_addr;
    Connection::Service   service;
    u_long                ip_addr;

    M_unused (argc);

    memset (&atm_addr, 0, sizeof (ATML_SOCKADDR));
    ip_addr = inet_addr (argv[0]);
    service = (Connection::Service) strtoul (argv[1], 0, 0);
    atm_addr.pvc.satm_family = AF_ATML_PVC;
    atm_addr.pvc.satm_pvc = (S32) strtol (argv[2], 0, 0);

    error = open_connection (service, ip_addr, &atm_addr);
    if (error)
    {
        e = error_int_to_os (error);
    }

    return e;
}




_kernel_oserror *  command_pvcdelete (int argc, char *  argv[])
{
    ATML_SOCKADDR          atm_addr;
    Connection *           connection = 0;
    Connection::Service    service;
    int                    error = 0;
    _kernel_oserror *      e = 0;

    M_unused (argc);

    memset (&atm_addr, 0, sizeof (ATML_SOCKADDR));
    atm_addr.pvc.satm_family = AF_ATML_PVC;
    atm_addr.pvc.satm_pvc = (S32) strtol (argv[2], 0, 0);
    service = (Connection::Service) strtoul (argv[1], 0, 0);
    error = close_connection (service, &atm_addr);

    {
        e = error_int_to_os (error);
    }

    return e;
}




_kernel_oserror *  command_svc (int argc, char *  argv[])
{
    int                   error;
    _kernel_oserror *     e = 0;
    ATML_SOCKADDR         atm_addr;
    Connection::Service   service;
    u_long                ip_addr;

    memset (&atm_addr, 0, sizeof (ATML_SOCKADDR));
    ip_addr = inet_addr (argv[0]);
    service = (Connection::Service) strtoul (argv[1], 0, 0);
    error   = atm_aton (argv[2], atm_addr.atm.satm_number.contents);
    if (!error)
    {
        atm_addr.atm.satm_family = AF_ATML_ATM;
        atm_addr.atm.satm_number.type = ATML_NSAP;
        atm_addr.atm.satm_number.numofdigits = NSAPAddr_Size;

        if (argc > 3)
        {
            atm_addr.atm.satm_port = (S32) strtol (argv[3], 0, 0);
        }
        else
        {
            atm_addr.atm.satm_port = 0;
        }

        #if 0
        atm_addr.atm.blli_len = 1;
        atm_addr.atm.blli[0] = 0xcc;
        #endif

        error = open_connection (service, ip_addr, &atm_addr);
    }


    if (error)
    {
        e = error_int_to_os (error);
    }

    return e;
}




_kernel_oserror *  command_svcdelete (int argc, char *  argv[])
{
    ATML_SOCKADDR          atm_addr;
    Connection::Service    service;
    int                    error = 0;
    _kernel_oserror *      e = 0;

    M_unused (argc);

    memset (&atm_addr, 0, sizeof (ATML_SOCKADDR));
    service = (Connection::Service) strtoul (argv[1], 0, 0);
    error   = atm_aton (argv[2], atm_addr.atm.satm_number.contents);
    if (!error)
    {
        atm_addr.atm.satm_family = AF_ATML_ATM;
        atm_addr.atm.satm_number.type = ATML_NSAP;
        atm_addr.atm.satm_number.numofdigits = NSAPAddr_Size;
        error = close_connection (service, &atm_addr);
    }

    if (error)
    {
        e = error_int_to_os (error);
    }

    return e;
}




_kernel_oserror *  command_configure_arp (int argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);
    return 0;
}




_kernel_oserror *  command_configure_llc (int argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);
    return 0;
}




_kernel_oserror *  command_configure_vc (int argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);
    return 0;
}




_kernel_oserror *  command_configure_bw (int argc, char *  argv[])
{
    M_unused (argc);
    M_unused (argv);
    return 0;
}




int  open_connection (const Connection::Service   service,
                      const u_long                ip_addr,
                      const ATML_SOCKADDR *const  atm_addr)
{
    NIC *  nic = NIC::GetNIC ();
    if (!nic)
    {
        return Error_ATM_NoNIC;
    }

    ATM25SocketsDCIInterface &  sockets_if = nic->GetSocketsIF ();
    int  error = sockets_if.GetIPMap().Add (ip_addr, atm_addr);
    if (!error)
    {
        // Don't need to know the handle - user will refer to
        // connection via command line paramters
        ClientConnection *  handle = new ClientConnection (*nic,
                                                           atm_addr,
                                                           service,
                                                           0,
                                                           0,
                                                           Connection::Local,
                                                           error);
        if (handle)
        {
            if (error)
            {
                delete handle;
                handle = 0;
            }
            else
            {
                dprintf (("", "issuing connect\n"));
                Connection *  connection = handle->GetConnection ();
                connection->Connect ();
            }
        }
        else
        {
            error = Error_ATM_NoMemory;
        }
    }

    return error;
}




int  close_connection (const Connection::Service   service,
                       const ATML_SOCKADDR *const  atm_addr)
{
    int           error = 0;
    Connection *  connection = 0;

    NIC *  nic = NIC::GetNIC ();
    if (!nic)
    {
        return Error_ATM_NoNIC;
    }

    ATM25SocketsDCIInterface &  sockets_if = nic->GetSocketsIF ();
    switch (service)
    {
        case Connection::Service_MPEG_AAL5:
            connection = MPEGConnection::Get ();
            break;

        case Connection::Service_IP_LLC:
        case Connection::Service_IP_VC:
        {
            const unsigned char *  mac_addr =
                sockets_if.GetIPMap().MACFromATM (atm_addr);
            if (mac_addr)
            {
                connection =
                    (Connection *) sockets_if.GetMACMap().Find (mac_addr);
            }
            else
            {
                error = Error_ATM_NoSuchConnection;
            }
            break;
        }

        default:
            break;
    }

    if (!error && connection)
    {
        connection->Close ();
    }

    return error;
}
