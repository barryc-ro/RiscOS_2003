/* File:    dcisock.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-09: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "sys/errno.h"
    #include "sys/mbuf.h"
    #include "sys/dcistructs.h"
    #include "inetlib.h"
    #include "netinet/in.h"
    #include "sys/socket.h"
    #include "net/if.h"
    #include "net/if_arp.h"
    #include "netinet/if_ether.h"
}

// Misc
#include "DCILib/dciif.h"
#include "DCILib/dcimultilist.h"
#include "DebugLib/DebugLib.h"

// Local
#include "arp.h"
#include "connection.h"
#include "dcisock.h"
#include "header.h"
#include "mbuf.h"
#include "nic.h"




// =============================================================================
// Constants definitions

#define DIB_Location "Expansion slot"




// =============================================================================
// Static class data

//unsigned int    DCIInterface::next_unit = 0;
//DCIInterface *  DCIInterface::interface[] = 0;

struct mbctl    ATM25SocketsDCIInterface::MBCTL =
{
    0,				// opaque
    sizeof (struct mbctl),	// mbcsize
    MBUF_MANAGER_VERSION,	// mbcvers
    0ul,			// flags
    MINCONTIG,			// advminubs
    M_max (ATM_MTU, ATM_MRU),	// advmaxubs
    MINCONTIG,			// mincontig
    0,				// spare1
    // Rest of structure initialised to zeroes due to trailing comma
};
int               ATM25SocketsDCIInterface::count = 0;
MbufController *  ATM25SocketsDCIInterface::mbuf_controller = 0;




// =============================================================================
// Method definitions

/* -----------------------------------------------------------------------------
   ATM25SocketsDCIInterface::ATM25SocketsDCIInterface

   Constructor.

   Inputs
   const NIC *const  nic   : pointer to NIC object

   Outputs
   int &             error : error code
 */

ATM25SocketsDCIInterface::ATM25SocketsDCIInterface (NIC &  nic,
                                                    int &  error)
    : ATM25DCIInterface (nic, error),
      ip_map (),
      mac_map (),
      cached_connection (0),
      arp (MBCTL),
      atmarp (dib.dib_unit, MBCTL)
{
    if (!error)
    {
        mtu = ATM_MTU;

        stats.st_interface_type = ST_TYPE_ATM25_6;

        for (int i = 0; i < M_array_size (stats.st_last_dest_addr); ++i)
        {
            stats.st_last_dest_addr[i] = 0;
        }

        if (count++ == 0)
        {
            mbuf_controller = new MbufController (&MBCTL);
            if (!mbuf_controller)
            {
                error = Error_ATM_NoMemory;
            }
        }
    }
}




/* -----------------------------------------------------------------------------
   ATM25SocketsDCIInterface::~ATM25SocketsDCIInterface

   Destructor.
 */

ATM25SocketsDCIInterface::~ATM25SocketsDCIInterface ()
{
    if (--count == 0)
    {
        delete mbuf_controller;
    }
}




/* -----------------------------------------------------------------------------
   ATM25SocketsDCIInterface::Transmit

   Send a packet.

   Inputs
   const unsigned int     flags      : flags word
   const u_short          frame_type : frame type
   struct mbuf *          m0         : mbuf chain
   const unsigned char *  dest       : detination MAC address
   const unsigned char *  src        : source MAC address

   Returns  int
   errno error code
 */

int  ATM25SocketsDCIInterface::Transmit(const unsigned int     flags,
                                        const u_short          frame_type,
                                        struct mbuf *          m0,
                                        const unsigned char *  dest,
                                        const unsigned char *  src)
{
    int  error = 0;

    M_unused (src);

    if (memcmp (dest, hw_bcast_addr, ETHER_ADDR_LEN) == 0)
    {
        if (!Broadcast (m0, frame_type, &dest))
        {
            // Packet is being 'dealt' with - don't discard it.
            return 0;
        }
    }
    else
    {
        if (memcmp (dest, stats.st_last_dest_addr, ETHER_ADDR_LEN) != 0 ||
            !cached_connection)
        {
            cached_connection = mac_map.Find (dest);
            if (!cached_connection)
            {
                // Couldn't find / connect to the peer - dump packet
                dprintf (("", "couldn't find connection\n"));
                error = INETERR_TXBLOCKED;
            }
            else
            {
                // store the dest. address
                memcpy (stats.st_last_dest_addr, dest, ETHER_ADDR_LEN);
            }
        }
        else
        {
            dprintf (("", "using cached connection\n"));
        }

        if (!error)
        {
            error = cached_connection->TxMBufChain (
                        frame_type,
                        m0,
                        (bool) !(flags & TX_PROTOSDATA));
        }
    }

    // Free MBuf chain (will only get used if an error/discard has occured,
    // otherwise IPConnection::TxMBufChain will have consumed all the chain.
    struct mbuf *  m;
    while (m0)
    {
        m  = m0;           // keep pointer to current mbuf chain
        m0 = m->m_list;    // point to next mbuf chain in list

        if (!(flags & TX_PROTOSDATA))
        {
            m_freem (m);
        }
    }
    return error;
}




/* -----------------------------------------------------------------------------
   ATM25SocketsDCIInterface::Broadcast

   Handle broadcast packets - just ARP requests at the moment.

   Inputs
   const unsigned int     flags      : flags word
   const u_short          frame_type : frame type
   struct mbuf *          m0         : mbuf chain
   const unsigned char *  dest       : detination MAC address
   const unsigned char *  src        : source MAC address

   Returns  bool
   true  : discard mbufs
   false : don't discard mbufs
 */

bool  ATM25SocketsDCIInterface::Broadcast (struct mbuf *    m0,
                                           const u_short    frame_type,
                                           const u_char **  dest)
{
    bool  discard = true;

    // If configured to access remote arp/broadcast server,
    // filter out broadcast transmissions and re-route
    // to the arpserver address.
    //
    // If not configured for remote arp, loop an ARP message back
    // internally, mapping a remote ip address into a MAC address.

//    if (!do_arp)     // are we processing ARP messages internally?
//    {
        // is it, in fact, an ARP message?
        if (frame_type == ETHERTYPE_ARP)
        {
            discard = arp.Receive (m0);
        }
//    }
//    else
//    {
//        // so redirect this msg to the arpserver */
//        static unsigned char arpserver[] =
//            { 0x00, 0x00, 0xff, 0xff, 0xff, 0xff };
//        *dest = arpserver;
//        bcast_arp_count++;
//    }

    return discard;
}




IPMap &  ATM25SocketsDCIInterface::GetIPMap ()
{
    return  ip_map;
}




MACMap &  ATM25SocketsDCIInterface::GetMACMap ()
{
    return  mac_map;
}




void  ATM25SocketsDCIInterface::FlushCachedConnection (
                                    IPConnection *  connection)
{
    if (cached_connection == connection)
    {
        cached_connection = 0;
    }
}




struct mbctl &  ATM25SocketsDCIInterface::GetMBCTL ()
{
    return MBCTL;
}




int  ATM25SocketsDCIInterface::Receive (const u_short          frame_type,
                                        const unsigned char *  src_addr,
                                        struct mbuf *          m,
                                        IPConnection *         connection)
{
    if (frame_type == ETHERTYPE_ARP)
    {
        u_short  ar_hrd;

        ar_hrd = *mtod (m, u_short *);
        if (ntohs (ar_hrd) == ATMARP_ar_hrd)
        {
            return atmarp.Receive (connection, m);
        }
    }

    DCIFilter *  filter = FindFilter (frame_type);
    if (filter &&
        !(this->*address_filter) (filter->address_level, dib.dib_address))
    {
        ddump_mbuf (m, MBCTL.count_bytes (&MBCTL, m));

        // Allocate a single mbuf for the header
        struct mbuf *  m0 = ALLOC_S (sizeof (RxHdr), 0);
        if (m0)
        {
            // Fill in the header data for the protocol receive handler
            RxHdr *  hdr = mtod (m0, RxHdr *);
            m0->m_len = sizeof (RxHdr);

            hdr->rx_tag = 0;
            if (src_addr)
            {
                memcpy (hdr->rx_src_addr, src_addr, ETHER_ADDR_LEN);
            }
            else
            {
                memset (hdr->rx_src_addr, 0, ETHER_ADDR_LEN);
            }
            memcpy (hdr->rx_dst_addr, dib.dib_address, ETHER_ADDR_LEN);
            hdr->_spad[0] = hdr->_spad[0] = 0;
            hdr->_dpad[0] = hdr->_dpad[0] = 0;
            hdr->rx_error_level = 0;
            hdr->rx_frame_type  = frame_type;

            // Link the header to the start of the data
            m0->m_next = m;

            // Pass packet to protocol module
            callproto (&dib, m0, filter->rx_handler, filter->pw);
            return 0;
        }
        else
        {
            dprintf (("", "single mbuf allocation for header failed\n"));
            return -1;
        }
    }
    else
    {
        return 1;
    }
}
