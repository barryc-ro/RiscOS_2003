/*	ATMSWIS.C

Project : ATML ATM25 VL1000 ('Panther') card driver

Purpose: SWI handling code


Historys:

Date      Who     Description of change
===========================================
31/1/97   CP      Picked up existing code.  Added header :-)


		  Fixed mega-serious linked list bug in atm_empty_buf().  The
		  final entry of the linked list of buffers was not being
		  explicitly set to NULL, so was relying on being in reset
		  memory!!!  Now it's filled in regardless.

13/2/97   CP      Previous mod introduced a slight bug - mustn't mess around
		  with linked lists while IRQs are on, otherwise the changes
		  could be interrupted!! (Friday afternoon coding :-} )

5/6/98    CP      Fixed atm_inquire to return value of dib_inquire.

                  Updated DCI header files to be Acorn's version; fixed
                  resulting mismatches.

28/9/98   CP      Changed error return for atm_setmtu() to conform to
                  DCI 4.04 spec

22/10/98  CP      Added atm_stats() function.

***************************************************************************/
/* swis.c -- swi calls provided by the module */

/* CLib */
#include <assert.h>
#include "kernel.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

/* TCPIPLibs */
extern "C"
{
    #include "sys/types.h"
    #include "sys/dcistructs.h"
    #include "sys/mbuf.h"
}

#include "MemCheck/MemCheck.h"

/* Local */
#include "address.h"
#include "atm.h"
#include "atmswis.h"
//#include "boson.h"
#include "configure.h"
#include "connection.h"
#include "defs.h"
#include "dci.h"
#include "error.h"
#include "flowspec.h"
#include "mbuf.h"
#include "mpeg.h"
#include "module.h"
#include "nic.h"



static int  validate_atm_address (const ATML_SOCKADDR *const  atm_addr);

static int  validate_service (const Connection::Service  service);

static int  validate_qos (const S32         atm_family,
                          const size_t      tx_qos_size,
                          const FLOWSPEC *  tx_qos,
                          const size_t      tx_qos_size,
                          const FLOWSPEC *  tx_qos);

int  swi_get_uni_address (_kernel_swi_regs *  r)
{
    int              error = 0;
    unsigned char *  buffer = (unsigned char *) r->r[1];
    size_t           buffer_size = (size_t) r->r[2];

    if (buffer)
    {
        const unsigned char *  uni_addr;

        uni_addr = (NIC::Instance())->GetUNIAddr (error);

        if (uni_addr && !error)
        {
            if (NSAPAddr_Size < buffer_size)
            {
                buffer_size = NSAPAddr_Size;
            }
            memcpy (buffer, uni_addr, buffer_size);
        }
        else
        {
            buffer_size = 0;
        }
    }
    else
    {
        buffer_size = NSAPAddr_Size;
    }

    r->r[2] = (int) buffer_size;

    return error;
}



/******* atm_empty_buf ****************************************************

Purpose: gives back buffers.  Assumes only one buffer returned at a time
	 (correct on 13/2/97)

Inputs:

Outputs:

***************************************************************************/

int atm_empty_buf (_kernel_swi_regs *r)
{
    mpeg_buffer b = (mpeg_buffer) r->r[2];

    if (b)
    {
        mpeg_empty_buffer (b);
    }

    return 0;
}




int  atm_associateaddress (_kernel_swi_regs *const  r)
{
    const ATML_SOCKADDR *const    atm_addr = (const ATML_SOCKADDR *) r->r[1];
    const u_long                  inet_addr = (u_long) r->r[2];
    int                           error = 0;

    MemCheck_RegisterMiscBlock_Ptr (atm_addr);

    /* Validate input parameters */
    if (atm_addr == NULL)
    {
        error = Error_ATM_InvalidData;
    }
    else
    {
        error = ip_map_add (inet_addr, atm_addr);
    }

    MemCheck_UnRegisterMiscBlock (atm_addr);

    return error;
}




int  atm_vcconnect (_kernel_swi_regs *const  r)
{
    const ATML_SOCKADDR *const  atm_addr     = (ATML_SOCKADDR *)     r->r[1];
    const Connection::Service   service_type = (Connection::Service) r->r[2];
    ATMStatusFn                 status_fn    = (ATMStatusFn)         r->r[3];
    void *const                 status_pw    = (void *)              r->r[4];
    const size_t                tx_qos_size  = (size_t)              r->r[5];
    const FLOWSPEC *const       tx_qos       = (FLOWSPEC *)          r->r[6];
    const size_t                rx_qos_size  = (size_t)              r->r[7];
    const FLOWSPEC *const       rx_qos       = (FLOWSPEC *)          r->r[8];
    ClientConnection *          handle       = 0;
    int                         error;

    MemCheck_RegisterMiscBlock_Ptr (atm_addr);
    #ifdef MemCheck_MEMCHECK
    if (tx_qos_size > 0 && tx_qos)
    {
        MemCheck_RegisterMiscBlock (tx_qos, tx_qos_size);
    }
    if (rx_qos_size > 0 && rx_qos)
    {
        MemCheck_RegisterMiscBlock (rx_qos, rx_qos_size);
    }
    #endif

    error = validate_atm_address (atm_addr);
    if (!error)
    {
        error = validate_service (service_type);
    }
    if (!error)
    {
        validate_qos (atm_addr->satm_family,
                      tx_qos_size,
                      tx_qos,
                      rx_qos_size,
                      rx_qos);
    }
    if (!error)
    {
        handle = new ClientConnection (atm_addr,
                                       service_type,
                                       status_fn,
                                       status_pw,
                                       Connection::Local,
                                       error);

        if (handle)
        {
            if (error)
            {
                delete handle;
                handle = 0;
            }
            else
            {
                Connection *  connection = handle->GetConnection ();
                VC *          vc         = connection->GetVC ();

                if (tx_qos)
                {
                    ((SVC *) vc)->SetTxQoS (tx_qos);
                }
                if (rx_qos)
                {
                    ((SVC *) vc)->SetRxQoS (rx_qos);
                }
                connection->Connect ();
            }
        }
        else
        {
            error = Error_ATM_NoMemory;
        }
    }

    r->r[0] = (int) handle;

    #ifdef MemCheck_MEMCHECK
    if (tx_qos_size > 0 && tx_qos)
    {
        MemCheck_UnRegisterMiscBlock (tx_qos);
    }
    if (rx_qos_size > 0 && rx_qos)
    {
        MemCheck_UnRegisterMiscBlock (rx_qos);
    }
    #endif
    MemCheck_UnRegisterMiscBlock (atm_addr);

    return error;
}




int  atm_vclisten (_kernel_swi_regs *const  r)
{
    const ATML_SOCKADDR *const  atm_addr     = (ATML_SOCKADDR *)     r->r[1];
    const Connection::Service   service_type = (Connection::Service) r->r[2];
    ATMStatusFn                 status_fn    = (ATMStatusFn)         r->r[3];
    void *const                 status_pw    = (void *)              r->r[4];
    ClientConnection *          handle       = 0;
    int                         error;

    MemCheck_RegisterMiscBlock_Ptr (atm_addr);

    error = validate_atm_address (atm_addr);
    if (!error)
    {
        error = validate_service (service_type);
    }
    if (!error)
    {
        handle = new ClientConnection (atm_addr,
                                       service_type,
                                       status_fn,
                                       status_pw,
                                       Connection::Remote,
                                       error);

        if (handle)
        {
            if (error)
            {
                delete handle;
                handle = 0;
            }
            else
            {
                Connection *  connection = handle->GetConnection ();
                connection->Listen ();
            }
        }
        else
        {
            error = Error_ATM_NoMemory;
        }
    }

    r->r[0] = (int) handle;

    MemCheck_UnRegisterMiscBlock (atm_addr);

    return error;
}




int  atm_vcclose (_kernel_swi_regs *const  r)
{
    ClientConnection *const  handle = (ClientConnection *) r->r[1];
    int                      error  = 0;

    if (handle)
    {
        Connection *  connection = handle->GetConnection ();
        connection->Close ();
    }
    else
    {
        error = Error_ATM_NoSuchConnection;
    }

    return error;
}




int  atm_vcstatus (_kernel_swi_regs *const  r)
{
    ClientConnection *  handle      = (ClientConnection *) r->r[1];
    size_t              tx_qos_size = (size_t)             r->r[2];
    FLOWSPEC *const     tx_qos      = (FLOWSPEC *)         r->r[3];
    size_t              rx_qos_size = (size_t)             r->r[4];
    FLOWSPEC *const     rx_qos      = (FLOWSPEC *)         r->r[5];
    ATML_SOCKADDR *     atm_addr    = (ATML_SOCKADDR *)    r->r[6];
    int                 state;
    int                 connection_error = 0;
    int                 error = 0;

    #ifdef MemCheck_MEMCHECK
    if (tx_qos_size > 0 && tx_qos)
    {
        MemCheck_RegisterMiscBlock (tx_qos, tx_qos_size);
    }
    if (rx_qos_size > 0 && rx_qos)
    {
        MemCheck_RegisterMiscBlock (rx_qos, rx_qos_size);
    }
    #endif

    if (handle)
    {
        Connection *  connection = handle->GetConnection ();
        VC *          vc         = connection->GetVC ();

        if (atm_addr)
        {
            *atm_addr = *vc->GetATMAddr ();
        }

        state            = vc->GetState();
        connection_error = connection->GetError ();

        if (tx_qos)
        {
            if (tx_qos_size == sizeof (FLOWSPEC))
            {
                *tx_qos = *vc->GetTxQoS ();
            }
            else
            {
                error = Error_ATM_InvalidData;
            }
        }
        else
        {
            tx_qos_size = sizeof (FLOWSPEC);
        }

        if (rx_qos)
        {
            if (rx_qos_size == sizeof (FLOWSPEC))
            {
                *rx_qos = *vc->GetRxQoS ();
            }
            else
            {
                error = Error_ATM_InvalidData;
            }
        }
        else
        {
            rx_qos_size = sizeof (FLOWSPEC);
        }

        if (!error)
        {
            r->r[0] = (int) state;
            r->r[1] = (int) connection_error;
            r->r[2] = (int) tx_qos_size;
            r->r[4] = (int) rx_qos_size;
        }
    }
    else
    {
        error = Error_ATM_NoSuchConnection;
    }

    #ifdef MemCheck_MEMCHECK
    if (tx_qos_size > 0 && tx_qos)
    {
        MemCheck_UnRegisterMiscBlock (tx_qos);
    }
    if (rx_qos_size > 0 && rx_qos)
    {
        MemCheck_UnRegisterMiscBlock (rx_qos);
    }
    #endif

    return error;
}




int  atm_bootconfig (_kernel_swi_regs *const  r)
{
    const bootconfig_action_t  action = (const bootconfig_action_t) r->r[1];
    const bootconfig_data_t    data   = (const bootconfig_data_t) r->r[2];
    int                        error  = 0;


    switch (data)
    {
        case BootConfig_Data_All:
            /* Special case - only valid for 'Sanitise' */
            if (action == BootConfig_Action_Sanitise)
            {
                configure_pvc (action, NULL);
                configure_primary_atm (action, NULL);
                /* configure_secondary_atm (action, NULL); */
            }
            else
            {
                error = Error_ATM_InvalidOption;
            }
            break;

        case BootConfig_Data_PVC:
            configure_pvc (action, (unsigned int *) r->r[3]);
            break;

        case BootConfig_Data_PrimaryATM:
            configure_primary_atm (action, (unsigned char *) r->r[3]);
            break;

        case BootConfig_Data_SecondaryATM:
            /* Not supported yet - return error */
            error = Error_ATM_InvalidOption;
            break;

        default:
            error = Error_ATM_InvalidOption;
            break;
    }

    return error;
}




static int  validate_atm_address (const ATML_SOCKADDR *const  atm_addr)
{
    int  error = 0;

    switch (atm_addr->satm_family)
    {
        case AF_ATML_ATM:
        case AF_ATML_PVC:
            break;

        default:
            error = Error_ATM_UnsupportedAddr;
            break;
    }

    return error;
}




static int  validate_service (const Connection::Service  service)
{
    int  error = 0;

    switch (service)
    {
        case Connection::Service_MPEG_AAL5:
        case Connection::Service_IP_LLC:
        case Connection::Service_IP_VC:
            break;

        default:
            error = Error_ATM_InvalidData;
            break;
    }

    return error;
}




static int  validate_qos (const S32         atm_family,
                          const size_t      tx_qos_size,
                          const FLOWSPEC *  tx_qos,
                          const size_t      rx_qos_size,
                          const FLOWSPEC *  rx_qos)
{
    int  error = 0;

    if (atm_family != AF_ATML_ATM ||
        (tx_qos && tx_qos_size != sizeof (FLOWSPEC)) ||
        (rx_qos && rx_qos_size != sizeof (FLOWSPEC)))
    {
        error = Error_ATM_InvalidData;
    }

    return error;
}
