/* File:    asyncop.c++
   Purpose: IMplementation of AsyncOp class - operations that complete
            asynchronously but for which we want the 'foreground' to wait for.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-30: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

// Misc
#include "DebugLib/debuglib.h"

// Local
#include "asyncop.h"
#include "defs.h"
#include "utils.h"




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
 */

AsyncOp::AsyncOp (const unsigned int  timeout,
                  unsigned char *     buffer,
                  const size_t        buffer_size)
    : buffer (buffer),
      buffer_size (buffer_size),
      status (Waiting)
{
    end_time = timeout + MonotonicTime () + 1;
}




int  AsyncOp::Wait ()
{
    int  error;

    while (GetStatus() == Waiting &&
           end_time > MonotonicTime ())
    {
        //dprintf (("", "w\n"));
    }

    switch (GetStatus ())
    {
        case Waiting:
            dprintf (("", "asyncop timedout\n"));
            error = Error_ATM_AsyncTimeout;
            break;

        case Aborted:
            dprintf (("", "asyncop aborted\n"));
            error = Error_ATM_AsyncAbort;
            break;

        default:
            error = 0;
            break;
    }

    return error;
}




void  AsyncOp::Completed (unsigned char *const   data,
                          const size_t           data_size)
{
    memcpy (buffer, data, M_min (data_size, buffer_size));
    Completed ();
}




void  AsyncOp::Completed ()
{
    dprintf (("", "asyncop completed\n"));
    status = CompletedSuccess;
}



void  AsyncOp::Abort ()
{
    status = Aborted;
}




// Have to have this to get around lack of volatile in our C++
AsyncOp::Status  AsyncOp::GetStatus ()
{
    return status;
}
