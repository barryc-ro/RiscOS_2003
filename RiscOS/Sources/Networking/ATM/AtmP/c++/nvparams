/* File:    nvparams.c++
   Purpose: Centralised reading/writing of non-volatile configuration parameters
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-02-19: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include "swis.h"

// Local
#include "nvparams.h"




// =============================================================================
// Constants definitions

enum
{
    // Locations in main CMOS RAM
    PrimaryServer_ATMAddr_1      = 0x1e,
    PrimaryServer_ATMAddr_1_Size = 12,
    PrimaryServer_ATMAddr_2      = 0x2f,
    PrimaryServer_ATMAddr_2_Size = 8,

    Server_IPAddr                = 0x38,
    Gateway_IPAddr               = 0xe0,
    Netmask                      = 0x6f,
    Netmask_Shift                = 3,
    Netmask_Mask                 = 0x1f << Netmask_Shift,

    // This is dodgy and should be moved
    UpstreamBandwidth            = 0xd7,

    // Offsets into podule CMOS RAM
    PVC                          = 0x0,
    Flags                        = 0x2
};

enum
{
    Flags_Config     = 0x1,
    Flags_TFTPBoot   = 0x2,
    Flags_DynamicARP = 0x4,
    Flags_VCMux      = 0x8
};

enum
{
    Podule_ReadInfo_CMOS = (1 << 2)
};




// =============================================================================
// Function prototype declarations

extern "C"
{
    unsigned int  read_nvram_bit   (unsigned int, unsigned int);
    void          write_nvram_bit  (unsigned int, unsigned int, unsigned int);
    unsigned int  read_nvram_byte  (unsigned int);
    void          write_nvram_byte (unsigned int, unsigned int);
    unsigned int  read_nvram_word  (unsigned int);
    void          write_nvram_word (unsigned int, unsigned int);
};




// =============================================================================
// Function definitions

/* -----------------------------------------------------------------------------
 */

NVParams::NVParams (const int  podule)
{
    _swix (Podule_ReadInfo,
           _INR (0, 3),

           Podule_ReadInfo_CMOS,
           &podule_cmos,
           sizeof (podule_cmos),
           podule);
}




int  NVParams::ReadPVC (void) const
{
    return (read_nvram_byte (podule_cmos + PVC) |
            read_nvram_byte (podule_cmos + PVC + 1) << 8);
}




void  NVParams::WritePVC (const int  pvc)
{
    write_nvram_byte (podule_cmos + PVC, pvc & 0xff);
    write_nvram_byte (podule_cmos + PVC + 1, (pvc & 0xff00) >> 8);
}




void  NVParams::ReadPrimaryServer (unsigned char *  atm_addr) const
{
    int  c;
    int  i;

    for (c = 0, i = PrimaryServer_ATMAddr_1;
         c < PrimaryServer_ATMAddr_1_Size;
         ++c, ++i)
    {
        *atm_addr++ = read_nvram_byte (i);
    }

    for (c = 0, i = PrimaryServer_ATMAddr_2;
         c < PrimaryServer_ATMAddr_2_Size;
         ++c, ++i)
    {
        *atm_addr++ = read_nvram_byte (i);
    }
}




void  NVParams::WritePrimaryServer (const unsigned char *  atm_addr)
{
    int  c;
    int  i;

    for (c = 0, i = PrimaryServer_ATMAddr_1;
         c < PrimaryServer_ATMAddr_1_Size;
         ++c, ++i)
    {
        write_nvram_byte (i, *atm_addr++);
    }

    for (c = 0, i = PrimaryServer_ATMAddr_2;
         c < PrimaryServer_ATMAddr_2_Size;
         ++c, ++i)
    {
        write_nvram_byte (i, *atm_addr++);
    }
}




int  NVParams::ReadDynamicARP (void) const
{
    return read_nvram_bit (podule_cmos + Flags, Flags_DynamicARP);
}




void  NVParams::WriteDynamicARP (const int  dynamic_arp)
{
    write_nvram_bit (podule_cmos + Flags, dynamic_arp, Flags_DynamicARP);
}




int  NVParams::ReadMultiProtoEnc () const
{
    return read_nvram_bit (podule_cmos + Flags, Flags_VCMux);
}




void  NVParams::WriteMultiProtoEnc (const int  multiproto_enc)
{
    write_nvram_bit (podule_cmos + Flags, multiproto_enc, Flags_VCMux);
}




unsigned int  NVParams::ReadUpstreamBandwidth (void) const
{
    return ( (read_nvram_byte (UpstreamBandwidth + 1) << 8) |
              read_nvram_byte (UpstreamBandwidth) );
}




void  NVParams::WriteUpstreamBandwidth (unsigned int  upstream_bandwidth)
{
    write_nvram_byte (UpstreamBandwidth, upstream_bandwidth & 0xff);
    write_nvram_byte (UpstreamBandwidth + 1,
                      (upstream_bandwidth & 0xff00) >> 8);
}




unsigned int  NVParams::ReadGateway (void) const
{
    return read_nvram_word (Gateway_IPAddr);
}




unsigned int  NVParams::ReadServer (void) const
{
    return read_nvram_word (Server_IPAddr);
}




unsigned int  NVParams::ReadNetmask (void) const
{
    return ( (read_nvram_byte (Netmask) & Netmask_Mask) >> Netmask_Shift );
}
