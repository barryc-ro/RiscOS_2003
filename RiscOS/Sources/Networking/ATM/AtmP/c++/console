/* File:    console.c++
   Purpose: Implementation of Console class - very primitive at the moment
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-03-26: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <stdio.h>
#include <string.h>

#include "DebugLib/DebugLib.h"

// Local
#include "asyncop.h"
#include "boson.h"
#include "console.h"
#include "defs.h"
#include "vc.h"



// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
 */

#if 0
_kernel_oserror *  Console::Test (int argc, char *argv[])
{
    int i;
    char s[256] = "";

    for (i = 0; i < argc - 1; ++i)
    {
        strcat (s, argv[i]);
        strcat (s, " ");
    }
    strcat (s, argv[i]);
    console->DoCommand (s);
    return 0;
}
#endif



Console::Console (int &  error)
    : op (0)
{
    ATML_SOCKADDR_PVC  addr;

    error = 0;
    memset (&addr, 0, sizeof (ATML_SOCKADDR_PVC));
    addr.satm_family = AF_ATML_SNMP;
    //addr.satm_pvc = 16;

    pvc = new PVC (&addr, this, error);
    if (pvc)
    {
        if (error)
        {
            delete (VC *) pvc;
            pvc = 0;
        }
        else
        {
            pvc->Connect ();
            //socket = ((VC *) pvc)->GetSocket ();
            //socket->Attach ();
            //socket->TxBind (&addr);
        }
    }
    else
    {
        error = Error_ATM_NoMemory;
    }
}




Console::~Console ()
{
    pvc->Close ();
    delete (VC *) pvc;
}




int  Console::DoCommand (const char *const  command,
                         char *const        buffer,
                         const size_t       buffer_size)
{
    int  error = 0;

    if (!op)
    {
        size_t  command_len = strlen (command) + strlen ("`!!!!> 1 ") + 1;
        char *s = new char[command_len + 1];

        if (s)
        {
            dprintf (("", "%p\n", buffer));

            this->buffer = buffer;
            this->buffer_size = buffer_size;
            this->buffer_offset = 0;

            sprintf (s, "`!!!!> 1 %s\n", command);
            dprintf (("", "%s\n", s));
            op = new AsyncOp (500, (unsigned char *) buffer, buffer_size);
            pvc->TxData ((unsigned int *) s, command_len);
            delete s;
            if (op)
            {
                error = op->Wait ();
            }

            AsyncOp *  temp_op = op;
            op = 0;
            delete temp_op;
        }
    }

    return error;
}




int  Console::Data (const unsigned int  data_size)
{
    unsigned int  bytes_left = buffer_size - buffer_offset;
    int           rc = 0;

    if (op && data_size <= bytes_left)
    {
        ASM_GET_MSG (CommitFromARMAddr,
                     (unsigned char *) buffer + buffer_offset,
                     data_size);
        buffer_offset += data_size;
    }
    else
    {
        rc = 1;
    }

    return rc;
}



void  Console::DataEnd ()
{
    static const char    reply_prefix[] = "`!!!!< 1 ";
    enum
    {
        ReplyPrefixLen = sizeof (reply_prefix) - 1
    };

    // This is really grim, but we only need this console for one thing at the
    // moment, so I don't feel inclined to create a whole new set of SNMP
    // related classes to deal with it 'properly'.

    if (op)
    {
        buffer[buffer_offset++] = 0;
        dprintf (("", "%s\n", buffer));

        if (strncmp (buffer, reply_prefix, ReplyPrefixLen) == 0)
        {
            memmove (buffer,
                     buffer + ReplyPrefixLen,
                     buffer_offset - ReplyPrefixLen);
        }

        op->Completed ();
    }

    buffer_offset = 0;
}




void  Console::DataLength (const unsigned int  length)
{
    buffer_offset = length;
}



void  Console::DataAbort ()
{
    buffer_offset = 0;
}




void  Console::Error (const int   error,
                      const bool  fatal)
{
    M_unused (error);
    M_unused (fatal);

    if (op)
    {
        op->Abort ();
    }
}
