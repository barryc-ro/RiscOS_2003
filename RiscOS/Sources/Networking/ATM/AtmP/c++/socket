/* File:    socket.c++
   Purpose: Socket service
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-03-23: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

#include "DebugLib/DebugLib.h"

// Local
#include "atm.h"
#include "boson.h"
#include "defs.h"
#include "flowspec.h"
#include "service.h"
#include "vc.h"



// =============================================================================
// Constants definitions

enum
{
    SOCK_RAW,
    SOCK_SEQPACKET
};

/* Maximum size of NIC messages, rounded up to nearest whole word */
#define MAX_CONNECT_SIZE M_round_word (sizeof (S32) +\
                                       sizeof (ATML_SOCKADDR_ATM) +\
                                       sizeof (U32) +\
                                       sizeof (FLOWSPEC) +\
                                       sizeof (U32) +\
                                       sizeof (FLOWSPEC))

#define MAX_BIND_SIZE M_round_word (sizeof (S32) +\
                                    sizeof (ATML_SOCKADDR_PVC))

#define MAX_LISTEN_SIZE M_round_word (sizeof (S32) +\
                                      sizeof (ATML_SOCKADDR_ATM))

#define MAX_CONNECTACK_SIZE M_round_word (sizeof (S32) +\
                                          sizeof (U32) +\
                                          sizeof (FLOWSPEC) +\
                                          sizeof (U32) +\
                                          sizeof (FLOWSPEC))

#define MAX_CLOSE_SIZE M_round_word (sizeof (S32))




// =============================================================================
// Type definitions

typedef struct
{
    S32 status;
} AS_CLOSE_PARAMS;




// =============================================================================
// Macro definitions




// =============================================================================
// Global variable declarations

const static FLOWSPEC  default_qos =
{
    -1,
    -1,
    -1,
    -1,
    -1,
    BestEffortService,
    0,
    0
};




// =============================================================================
// Function prototype declarations




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
 */

SocketService::SocketService (VC *          vc,
                              VCReceiver *  vc_receiver,
                              int &         error)
    : Service (SOCK_SERVICE, error),
      vc (vc),
      vc_receiver (vc_receiver),
      state (Creating),
      close_op (0)
{
}




void  SocketService::Attach ()
{
    Service::Attach ();
    TxSocket ((S32) vc->GetAddressFamily());
}




void  SocketService::TxSocket (const S32  af)
{
    struct
    {
        S32 af;                     /* Address family (AF_) */
        S32 type;                   /* Socket type (SOCK_RAW, SOCK_SEQPACKET) */
        S32 protocol;               /* Protocol (ATMPROTO_AAL5) */
        U32 flags;                  /* Set zero for now */
    } socket_message;

    dprintf (("", "TxSocket %d\n", handle));

    socket_message.af       = af;
    socket_message.type     = SOCK_SEQPACKET;
    socket_message.protocol = ATMPROTO_AAL5;
    socket_message.flags    = 0;

    SetState (Exists);

    /* Send message to NIC */
    asm_write_fifo (handle,
                    AS_SOCKET,
                    (unsigned char *) &socket_message,
                    sizeof (socket_message),
                    Boson_BlockToARMAddr);
}




void  SocketService::TxBind (const ATML_SOCKADDR_PVC *const  atm_addr)
{
    struct
    {
        S32 len;
        ATML_SOCKADDR_PVC pvc;
    } bind_message;

    dprintf (("", "TxBind %d\n", handle));

    /* Write size of address structure into message */
    bind_message.len = sizeof (ATML_SOCKADDR_PVC);

    /* Write address structure info message */
    memcpy (&bind_message.pvc, atm_addr, sizeof (ATML_SOCKADDR_PVC));

    SetState (Connected);

    /* Send message to NIC */
    asm_write_fifo (handle,
                    AS_BIND,
                    (unsigned char *) &bind_message,
                    sizeof (bind_message),
                    Boson_BlockToARMAddr);
}




void  SocketService::TxConnect (const ATML_SOCKADDR_ATM *const  atm_addr,
                                size_t                          tx_qos_size,
                                const FLOWSPEC *                tx_qos,
                                size_t                          rx_qos_size,
                                const FLOWSPEC *                rx_qos)
{
    unsigned int     connect_message[MAX_CONNECT_SIZE / sizeof (unsigned int)];
    unsigned char *  raw_message = (unsigned char *) connect_message;
    size_t           addr_size = 64; //= sizeof (ATML_SOCKADDR_ATM);

    if (atm_addr->blli_len)
    {
        addr_size += sizeof (U8) + atm_addr->blli_len;
    }

    dprintf (("", "TxConnect %d\n", handle));
    dprintf (("", "ATM address size %d bytes\n", addr_size));

    // Write size of address structure into message
    memcpy (raw_message, &addr_size, sizeof (S32));
    raw_message += sizeof (S32);

    // Write address structure info message
    memcpy (raw_message, atm_addr, addr_size);
    raw_message += addr_size;

    if (tx_qos_size == 0 && tx_qos == NULL)
    {
        dprintf (("", "using defaults for TX QoS\n"));
        tx_qos_size = sizeof (FLOWSPEC);
        tx_qos      = &default_qos;
    }

    // Write length of TX QoS structure into message
    memcpy (raw_message, &tx_qos_size, sizeof (U32));
    raw_message += sizeof (U32);

    // Write TX Qos structure into message
    memcpy (raw_message, tx_qos, tx_qos_size);
    raw_message += tx_qos_size;

    if (rx_qos_size == 0 && rx_qos == NULL)
    {
        dprintf (("", "using defaults for RX QoS\n"));
        rx_qos_size = sizeof (FLOWSPEC);
        rx_qos      = &default_qos;
    }

    /* Write length of RX QoS structure into message */
    memcpy (raw_message, &rx_qos_size, sizeof (U32));
    raw_message += sizeof (U32);

    /* Write RX Qos structure into message */
    memcpy (raw_message, rx_qos, rx_qos_size);
    raw_message += rx_qos_size;

    SetState (Connecting);

    /* Send message to NIC */
    asm_write_fifo (handle,
                    AS_CONNECT,
                    (unsigned char *) connect_message,
                    (unsigned int) raw_message -
                        (unsigned int) connect_message,
                    Boson_BlockToARMAddr);
}




void  SocketService::TxConnectAck (const S32  status)
{
    unsigned int     connectack_message[MAX_CONNECTACK_SIZE /
                                        sizeof (unsigned int)];
    unsigned char *  raw_message = (unsigned char *) connectack_message;

    dprintf (("", "TxConnectAck %d\n", handle));

    /* Write status code into message */
    memcpy (raw_message, &status, sizeof (S32));
    raw_message += sizeof (S32);

    /* No QoS for now */

    /* Write TX QoS size into message */
    memset (raw_message, 0, sizeof (U32));
    raw_message += sizeof (U32);

    /* Write RX QoS size into message */
    memset (raw_message, 0, sizeof (U32));
    raw_message += sizeof (U32);

    SetState (Accepting);

    asm_write_fifo (handle,
                    AS_CONNECT_ACK,
                    (unsigned char *) connectack_message,
                    (unsigned int) raw_message -
                        (unsigned int) connectack_message,
                    Boson_BlockToARMAddr);
}




void  SocketService::TxListen (const ATML_SOCKADDR_ATM *const  atm_addr)
{
    unsigned int     listen_message[MAX_LISTEN_SIZE / sizeof (unsigned int)];
    unsigned char *  raw_message = (unsigned char *) listen_message;
    size_t           addr_size = 65; // = sizeof (ATML_SOCKADDR_ATM);

    dprintf (("", "TxListen %d\n", handle));

    // Force blli_len to be zero
    ((ATML_SOCKADDR_ATM *) atm_addr)->blli_len = 0;

    // Write size of address structure into message
    memcpy (raw_message, &addr_size, sizeof (S32));
    raw_message += sizeof (S32);

    // Write address structure info message
    memcpy (raw_message, atm_addr, addr_size);
    raw_message += addr_size;

    SetState (Listening);

    /* Send message to NIC */
    asm_write_fifo (handle,
                    AS_LISTEN,
                    (unsigned char *) listen_message,
                    (unsigned int) raw_message -
                        (unsigned int) listen_message,
                    Boson_BlockToARMAddr);
}




int  SocketService::TxData (const unsigned int *  data,
                            int                   data_bytes)
{
    return boson_tx_data (handle, data, data_bytes);
}




void  SocketService::Close ()
{
    // Blocking close
    if (!close_op)
    {
        close_op = new AsyncOp (100, 0, 0);
        TxClose ();
        if (close_op)
        {
            int  error = close_op->Wait ();
            AsyncOp *  temp_op = close_op;
            close_op = 0;
            delete (temp_op);
        }
    }
}



void  SocketService::TxClose ()
{
    AS_CLOSE_PARAMS  close_message;

    dprintf (("", "TxClose %d\n", handle));

    close_message.status = 0;

    SetState (Closing);

    asm_write_fifo (handle,
                    AS_CLOSE,
                    (unsigned char *) &close_message,
                    sizeof (AS_CLOSE_PARAMS),
                    Boson_BlockToARMAddr);
}



MessageHandlerRC  SocketService::MessageHandler (NICMessage          msg,
                                                 const unsigned int  total_size)
{
    MessageHandlerRC  rc = HandledMsg;

    M_unused (total_size);

    if (msg.common.type == NIC_CommandMessage)
    {
        switch (msg.command.command)
        {
            case AS_ERROR:
                ++irq_errors;
                vc_receiver->Error (msg.command.param, true);
                break;

            default:
                rc = DiscardMsg;
                break;
        }
    }
    else
    {
        switch (msg.command.command)
        {
            case AS_CONNECT:
                rc = RxConnect (msg);
                break;

            case AS_CONNECT_ACK:
                rc = RxConnectAck (msg);
                break;

            case AS_CLOSE:
                rc = RxClose (msg);
                break;

            case AS_CLOSE_ACK:
                rc = RxCloseAck (msg);
                break;

            case AS_DATA:
                rc = RxData (msg);
                break;

            case AS_DATA_END:
                rc = RxDataEnd (msg);
                break;

            case AS_DATA_ABORT:
                rc = RxDataAbort (msg);
                break;

            case AS_DATA_LENGTH:
                rc = RxDataLength (msg);
                break;

            case AS_SET_QOS:
            case AS_ADD_PARTY:
            case AS_DROP_PARTY:
                /* These commands are valid, but we're not interested in
                 * them. Just read the data out of the FIFO and DiscardMsg it.
                 */
                rc = DiscardMsg;
                break;

            default:
                /* Unrecognised command for this service, but it appears
                 * to be a valid packet in so far as it is on a recognised
                 * service on a recognised handle.
                 */
                rc = DiscardMsg;
                break;
        }
    }

    return rc;
}




MessageHandlerRC  SocketService::RxConnect (NICMessage  msg)
{
    MessageHandlerRC  rc = HandledMsg;

    dprintf (("", "RxConnect %d\n", msg.common.handle));

    switch (state)
    {
        case Listening:
            ProcessConnect (msg);
            break;

        default:
            dprintf (("", "Received unexpected Connect in state %d\n", state));
            rc = DiscardMsg;
            break;
    }

    return rc;
}



void  SocketService::ProcessConnect (NICMessage  msg)
{
    const unsigned char *  raw_message = irq_buffer;
    size_t                 addr_size;
    const ATML_SOCKADDR *  atm_addr;
    size_t                 tx_qos_size = 0;
    size_t                 rx_qos_size = 0;
    FLOWSPEC *             tx_qos      = 0;
    FLOWSPEC *             rx_qos      = 0;


    ASM_GET_MSG (Boson_CommitFromARMAddr, irq_buffer, msg.data.size);

    /* Read size of address structure from message */
    memcpy (&addr_size, raw_message, sizeof (S32));
    raw_message += sizeof (S32);

    /* Store pointer to ATM address */
    atm_addr = (ATML_SOCKADDR *) raw_message;
    raw_message += addr_size;

    /* Read length of TX QoS structure from message */
    memcpy (&tx_qos_size, raw_message, sizeof (U32));
    raw_message += sizeof (U32);

    /* Store pointer to TX Qos structure (if any) */
    if (tx_qos_size > 0)
    {
        tx_qos = (FLOWSPEC *) raw_message;
        raw_message += tx_qos_size;
    }

    /* Read length of RX QoS structure from message */
    memcpy (&rx_qos_size, raw_message, sizeof (U32));
    raw_message += sizeof (U32);

    /* Store pointer to TX Qos structure (if any) */
    if (rx_qos_size > 0)
    {
        rx_qos = (FLOWSPEC *) raw_message;
        raw_message += rx_qos_size;
    }

    #if 0
    // Never reject
    irq_con_refusals++;
    SetState (Listening);
    TxConnectAck (1);
    #endif

    irq_connect_reqs++;

    SVC *  svc = (SVC *) vc;
    svc->SetAddress (&atm_addr->atm);
    if (tx_qos)
    {
        svc->SetTxQoS (tx_qos);
    }
    if (rx_qos)
    {
        svc->SetRxQoS (rx_qos);
    }
    SetState (Accepting);
    TxConnectAck (0);
}




MessageHandlerRC  SocketService::RxConnectAck (NICMessage  msg)
{
    MessageHandlerRC  rc = HandledMsg;

    dprintf (("", "RxConnectAck %d\n", msg.common.handle));
    switch (state)
    {
        case Connecting:
        case Accepting:
            ProcessConnectAck (msg);
            break;

        default:
            dprintf (("", "Received unexpected ConnectAck in state %d\n",
                      state));
            rc = DiscardMsg;
            break;
    }

    return  rc;
}




void  SocketService::ProcessConnectAck (NICMessage  msg)
{
    const unsigned char *  raw_message = irq_buffer;
    int                    status;
    size_t                 tx_qos_size = 0;
    size_t                 rx_qos_size = 0;
    const unsigned char *  tx_qos = NULL;
    const unsigned char *  rx_qos = NULL;

    ASM_GET_MSG (Boson_CommitFromARMAddr, irq_buffer, msg.data.size);

    /* Extract error code from message */
    memcpy (&status, raw_message, sizeof (int));
    raw_message += sizeof (S32);

    if (status == 0)    /* Connection accepted */
    {
        dprintf (("", "connection accepted\n"));
        /* Extract size of TX QoS parameters from message */
        memcpy (&tx_qos_size, raw_message, sizeof (size_t));
        raw_message += sizeof (U32);

        /* Store pointer to TX QoS parameters */
        tx_qos = raw_message;
        raw_message += tx_qos_size;

        /* Extract size of RX QoS parameters from message */
        memcpy (&rx_qos_size, raw_message, sizeof (size_t));
        raw_message += sizeof (U32);

        /* Store pointer to RX QoS parameters */
        rx_qos = raw_message;
        raw_message += rx_qos_size;

        irq_connects++;
        SetState (Connected);
    }
    else
    {
        dprintf (("", "connection rejected with error code %d\n", status));
        irq_refusals++;
        vc_receiver->Error (status, false);
        switch (state)
        {
            case Connecting:
                SetState (Exists);
                break;

            case Accepting:
                SetState (Listening);
                break;
        }
    }
}




MessageHandlerRC  SocketService::RxClose (NICMessage  msg)
{
    int  status;

    dprintf (("", "RxClose %d\n", msg.common.handle));
    ASM_GET_MSG (Boson_CommitFromARMAddr, irq_buffer, msg.data.size);
    memcpy (&status, irq_buffer, sizeof (int));

    if (status != 0)
    {
        dprintf (("", "error %d\n", status));
        vc_receiver->Error (status, false);
    }

    SetState (Closed);
    irq_closes++;

    vc->ClosedByRemote ();

    return HandledMsg;
}




MessageHandlerRC  SocketService::RxCloseAck (NICMessage  msg)
{
    dprintf (("", "RxCloseAck %d\n", msg.common.handle));

    /* There is a parameter which indicates the reason for closure, but we're
     * not interested in it.
     */
    ASM_GET_MSG (Boson_CommitFromARMAddr, irq_buffer, msg.data.size);
    SetState (Closed);
    irq_closeds++;

    if (close_op)
    {
        close_op->Completed ();
    }

    return HandledMsg;
}



MessageHandlerRC  SocketService::RxData (NICMessage  msg)
{
    MessageHandlerRC  rc;

    if (vc_receiver->Data (msg.data.size))
    {
        rc = DiscardMsg;
    }
    else
    {
        rc = HandledMsg;
    }
    ++irq_datas;
    return rc;
}




MessageHandlerRC  SocketService::RxDataEnd (NICMessage  msg)
{
    MessageHandlerRC  rc;

    ++irq_data_ends;

    if (!vc_receiver->Data (msg.data.size))
    {
        if (msg.data.last)
        {
            vc_receiver->DataEnd ();
        }

        rc = HandledMsg;
    }
    else
    {
        rc = DiscardMsg;
    }

    return rc;
}




MessageHandlerRC  SocketService::RxDataAbort (NICMessage  msg)
{
    M_unused (msg);
    vc_receiver->DataAbort ();
    ++irq_data_aborts;
    return HandledMsg;
}




MessageHandlerRC  SocketService::RxDataLength (NICMessage  msg)
{
    unsigned int  length;

    M_unused (msg);
    ++irq_data_lengths;
    /* Read true length of streamed data */
    ASM_GET_MSG (Boson_CommitFromARMAddr, (unsigned char *) &length, sizeof (length));
    vc_receiver->DataLength (length);
    vc_receiver->DataEnd ();
    return HandledMsg;
}




SocketService::State  SocketService::GetState ()
{
    return state;
}




void  SocketService::SetState (SocketService::State  state)
{
    if (this->state != state)
    {
        dprintf (("", "state %d -> %d\n", this->state, state));
        this->state = state;
        vc_receiver->StateChanged (state);
        vc->StateChanged (state);
    }
}
