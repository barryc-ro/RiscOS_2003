/* File:    command.c++
   Purpose: Command service
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-24: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

// Miscellaneous
#include "DebugLib/DebugLib.h"

// Local
#include "address.h"
#include "asyncop.h"
#include "boson.h"
#include "command.h"
#include "defs.h"




// =============================================================================
// Constants definitions

enum
{
    SO_ATTACH  = 0x1,
    SO_ATTACHX = 0x8,
    SO_DETACH  = 0x2,
    SO_GET_MAC = 0x5,
    SO_SET_MAC = 0x6
};




// =============================================================================
// Function prototype declarations




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
 */

CommandService::CommandService (ServiceManager &  service_manager,
                                unsigned int      boson_address,
                                int &             error)
    : Service (service_manager,
               boson_address,
               CMD_SERVICE,
               error),
      get_mac_op (0)
{
}



void  CommandService::Attach ()
{
    // Command service is pre-attached - do nothing
}



void  CommandService::Detach ()
{
    // Command service is pre-attached - do nothing
}




void  CommandService::TxAttachx (const int  service,
                                 const int  handle)
{
    boson_block_write (
        boson_address,
        CMD_MSG (this->handle, SO_ATTACHX, (service << 12) | handle));
}




void  CommandService::TxDetach (const int  handle)
{
    boson_block_write (boson_address, CMD_MSG (this->handle, SO_DETACH, handle));
}




int  CommandService::GetMAC (unsigned char *  mac_addr)
{
    int  error = 0;

    if (!get_mac_op)
    {
        get_mac_op = new AsyncOp (50, mac_addr, ETHER_ADDR_LEN);
        if (get_mac_op)
        {
            TxGetMAC ();
            error = get_mac_op->Wait ();
            AsyncOp *  temp_op = get_mac_op;
            get_mac_op = 0;
            delete (temp_op);
        }
        else
        {
            error = Error_ATM_NoMemory;
        }
    }

    return error;
}




void  CommandService::TxGetMAC ()
{
    boson_block_write (boson_address, CMD_MSG (this->handle, SO_GET_MAC, 0));
}




MessageHandlerRC  CommandService::MessageHandler (NICMessage    msg,
                                                  NICExtension  ext)
{
    MessageHandlerRC  rc;

    M_unused (ext);

    if (msg.common.type == NIC_DataMessage)
    {
        switch (msg.command.command)
        {
            case SO_SET_MAC:
                boson_rx_data (boson_address, irq_buffer, msg.data.size);
                if (msg.data.size == ETHER_ADDR_LEN &&
                    get_mac_op)
                {
                    dprintf (("", "rx SO_SET_MAC\n"));
                    get_mac_op->Completed (irq_buffer, msg.data.size);
                }
                rc = HandledMsg;
                break;

            default:
                rc = DiscardMsg;
                break;
        }
    }
    else
    {
        rc = DiscardMsg;
    }

    return rc;
}
