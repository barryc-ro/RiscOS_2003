/* File:    service.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-24: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <limits.h>

#include "DebugLib/DebugLib.h"

// Local
#include "atm.h"
#include "command.h"
#include "nic.h"
#include "service.h"
#include "utils.h"




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
   ServiceManager_DespatchMessage

   This function provides the interface between the C code that receives
   data from the hardware and the C++ code that processes it.

   Find out which service a message is destined for and despatch it.
 */

extern "C"  MessageHandlerRC  ServiceManager_DespatchMessage (
                                  NICMessage        msg,
                                  NICExtension      ext,
                                  ServiceManager *  service_manager)
{
    return service_manager->DespatchMessage (msg, ext);
}




ServiceManager *  ServiceManager::Create (NIC &  nic,
                                          int &  error)
{
    ServiceManager *  service_manager = new ServiceManager (error);
    if (service_manager)
    {
        if (error)
        {
            delete service_manager;
            service_manager = 0;
        }
    }
    else
    {
        error = Error_ATM_NoMemory;
    }

    if (!error)
    {
        CommandService *  command_service =
            new CommandService (*service_manager,
                                nic.GetHardwareAddress (),
                                error);
        if (command_service)
        {
            if (error)
            {
                delete command_service;
                command_service = 0;
            }
            else
            {
                service_manager->SetCommandService (command_service);
            }
        }
        else
        {
            error = Error_ATM_NoMemory;
        }

        if (error)
        {
            delete service_manager;
            service_manager = 0;
        }
    }

    return service_manager;
}




ServiceManager::ServiceManager (int &  error)
{
    error = 0;

    for (int i = 0; i < MaxHandles; ++i)
    {
        service[i] = 0;
    }

    next_handle = 1;    // 0 pre-allocated to command service
}




ServiceManager::~ServiceManager ()
{
    if (command_service)
    {
        delete command_service;
    }
}




int  ServiceManager::RegisterService (Service &  new_service,
                                      int &      handle)
{
    int  error  = 0;

    handle = -1;

    int  service_number = new_service.GetNumber();
    if (service_number == CMD_SERVICE)
    {
        handle = 0;
        service[0] = &new_service;
    }
    else
    {
        // Must have interrupts off whilst trying to allocate handle so
        // a foreground allocation can't get interrupted by a background
        // allocation, with both ending up trying to use the same
        // handle (foreground one would end up overwriting background one).
        int  irq_state      = ensure_irqs_off ();
        int  start_handle   = next_handle;
        do
        {
            handle = next_handle++;
            if (next_handle == MaxHandles)
            {
                next_handle = 1;    // skip pre-allocated command service handle
            }
        }
        while (service[handle] != 0 && next_handle != start_handle);

        if (service[handle] == 0)
        {
            service[handle] = &new_service;
        }
        else
        {
            // No free handles
            handle = -1;
            error  = Error_ATM_HandleAlloc;
        }
        restore_irqs (irq_state);
    }

    dprintf (("", "handle %d -> service %d\n",
              handle, service_number));

    return error;
}




void  ServiceManager::DeregisterService (Service &  service)
{
    int  handle = service.GetHandle ();
    if (handle > 0 && handle < MaxHandles)
    {
        service.Detach ();
        this->service[handle] = 0;
    }
}




void  ServiceManager::AttachService (Service &  service)
{
    command_service->TxAttachx (service.GetNumber(), service.GetHandle());
}




void  ServiceManager::DetachService (Service &  service)
{
    command_service->TxDetach (service.GetHandle());
}




int  ServiceManager::GetNumberFree ()
{
    int  count = 0;

    for (int i = 0; i < MaxHandles; ++i)
    {
        if (service[i] == 0)
        {
            ++count;
        }
    }
    return count;
}




int  ServiceManager::GetNumberInUse ()
{
    return ( MaxHandles - GetNumberFree() );
}




MessageHandlerRC  ServiceManager::DespatchMessage (NICMessage    msg,
                                                   NICExtension  ext)
{
    MessageHandlerRC  rc;

    if (msg.common.handle < MaxHandles && service[msg.common.handle])
    {
        rc = service[msg.common.handle]->MessageHandler (msg, ext);
    }
    else
    {
        // Unknown / unsupported service - no sockets bound to it so
        // should be impossible - probably junk data.
        rc = FlushFIFO;
    }

    return rc;
}



void  ServiceManager::SetCommandService (CommandService *  command_service)
{
    this->command_service = command_service;
}




CommandService &  ServiceManager::GetCommandService () const
{
    return *command_service;
}




Service::Service (ServiceManager &  service_manager,
                  unsigned int      boson_address,
                  const int         service_number,
                  int &             error)
    : service_manager (&service_manager),
      boson_address (boson_address),
      service_number (service_number)
{
    error = service_manager.RegisterService (*this, handle);
    dprintf (("", "handle is %d\n", handle));
}




Service::~Service ()
{
    service_manager->DeregisterService (*this);
}




void  Service::Attach ()
{
    service_manager->AttachService (*this);
}




void  Service::Detach ()
{
    service_manager->DetachService (*this);
}




int  Service::GetNumber () const
{
    return service_number;
}




int  Service::GetHandle () const
{
    return handle;
}
