/* File:    dhcp.c++
   Purpose: Dynamic booting (NEC specific at time of writing)
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-03-29: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <stdlib.h>
#include <string.h>

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "net/if.h"
    #include "protocols/dhcp.h"

    #include "inetlib.h"
}

// Miscellaneous
#include "dhcp.h"
#include "Email/Common/bool.h"

// Local
#include "address.h"
#include "atm.h"
#include "connection.h"
#include "dci.h"
#include "dhcpboot.h"
#include "nvparams.h"
#include "utils.h"




// =============================================================================
// Constants definitions

enum
{
    NEC_Opt_ClientATMAddr = 1,
    NEC_Opt_ServerATMAddr
};

enum
{
    NEC_VSI_Request_Size = 22,
    NEC_VSI_Offer_Size = 44
};

static const char *  InetGateway = "Inet$Gateway";




// =============================================================================
// Function prototype declarations

static bool  decode_dhcp_request (char *  const  nsap_addr);




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
 */

void  dhcp_discover (unsigned char *const  dhcp_req,
                     const size_t          dhcp_req_size,
                     size_t                dhcp_opt_end_offset)
{
    // Construct Vendor Specific Information to add to DHCP request

    unsigned char    nec_vsi[NEC_VSI_Request_Size];
    unsigned char *  vsi_ptr = nec_vsi;

    nec_vsi[0] = NEC_Opt_ClientATMAddr;
    nec_vsi[1] = 20;    // size of ATM address
    memcpy (&nec_vsi[2], g_atm_address, sizeof (g_atm_address));

    // Add vendor specific option to the DHCP request
    if (!dhcp_set_option (0,
                          atm_ifname,
                          OPTION_VENDORSPECIFIC,
                          nec_vsi,
                          NEC_VSI_Request_Size,
                          NULL))
    {
        // Read the boot server ATM address stored in non-volatile memory and
        // create an SVC to it.

        ATML_SOCKADDR_ATM  atm_addr;

        memset (&atm_addr, 0, sizeof (ATML_SOCKADDR_ATM));
        atm_addr.satm_family = AF_ATML_ATM;
        atm_addr.satm_number.type = ATML_NSAP;
        atm_addr.satm_number.numofdigits = 20;

        #if 0
        nvparams_read_primary_server (
            (unsigned char *) atm_addr.satm_number.contents);
        #else
        unsigned char test_addr[] =
        {
            /* Network segment of address */
            0x47, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x2b,
            0x01, 0x04, 0x4e,

            /* ESI (End System Identifier- MAC address) */
            0x00, 0x00, 0x4c, 0xc1, 0x36, 0x94,

            /* Selector byte */
            0x00
        };

        memcpy (atm_addr.satm_number.contents, test_addr, sizeof (test_addr));
        #endif

        atm_addr.satm_port = 0; //(int) Connection::Service_IP_LLC;

        int  error;
        Connection *  connection =
            Connection::Create ((ATML_SOCKADDR *) &atm_addr,
                                Connection::Service_IP_LLC,
                                NULL,
                                NULL,
                                0,
                                NULL,
                                0,
                                NULL,
                                error);
    }
}




void  dhcp_request (unsigned char *  dhcp_req,
                    size_t           dhcp_req_size,
                    unsigned char *  dhcp_offer,
                    size_t           dhcp_offer_size)
{
    ATML_SOCKADDR_ATM  atm_addr;

    memset (&atm_addr, 0, sizeof (ATML_SOCKADDR_ATM));

    if (!decode_dhcp_request (atm_addr.satm_number.contents))
    {
        // Establish an SVC to the boot server.

        atm_addr.satm_family = AF_ATML_ATM;
        atm_addr.satm_number.type = ATML_NSAP;
        atm_addr.satm_number.numofdigits =
            sizeof (atm_addr.satm_number.contents);
        atm_addr.satm_port = (int) Connection::Service_IP_LLC;

        int  error;
        Connection *  connection =
            Connection::Create ((ATML_SOCKADDR *) &atm_addr,
                                Connection::Service_IP_LLC,
                                NULL,
                                NULL,
                                0,
                                NULL,
                                0,
                                NULL,
                                error);

        // Server will have filled in values for system varaibles:
        // Inet$Gateway
        // Inet$EtherIPMask
        // Inet$EtherIPAddr

        // The relay server configured in NV memory also acts as an IP router,
        // so add an IP address <-> MAC address mapping between Inet$Gateway and
        // the ESI in relay server, so that when we're asked to do an ARP for it
        // we can give a result.

        u_long        ip_addr;
        const char *  ip_addr_string;

        ip_addr_string = getenv (InetGateway);
        if (ip_addr_string)
        {
            ip_addr = inet_addr (ip_addr_string);
            if (ip_addr != -1)
            {
                atm_addr.satm_family = AF_ATML_ATM;
                atm_addr.satm_number.type = ATML_NSAP;
                atm_addr.satm_number.numofdigits =
                    sizeof (atm_addr.satm_number.contents);
                nvparams_read_primary_server (
                    (unsigned char *) atm_addr.satm_number.contents);

                ip_map_add (ip_addr, (ATML_SOCKADDR *) &atm_addr);
            }
        }
    }
}




bool  decode_dhcp_request (char *  const  nsap_addr)
{
    bool error = true;

    // Extract the Boot server ATM address from the accepted DHCP offer
    // and establish an SVC to it.

    // Extract vendor specific information
    size_t  vsi_size = 0;

    if (!dhcp_get_option (0,
                          atm_ifname,
                          OPTION_VENDORSPECIFIC,
                          NULL,
                          &vsi_size,
                          NULL) && vsi_size >= NEC_VSI_Offer_Size)
    {
        vsi_size = -vsi_size;
        unsigned char *  vsi = new unsigned char[vsi_size];

        if (vsi)
        {
            if (!dhcp_get_option (0,
                                  atm_ifname,
                                  OPTION_VENDORSPECIFIC,
                                  vsi,
                                  &vsi_size,
                                  NULL))
            {
                // Parse NEC Vendor Specific Information, and if it's
                // OK, establish an SVC to the Boot Server.

                if (vsi[22] == NEC_Opt_ServerATMAddr &&
                    vsi[23] == 20)
                {
                    memcpy (nsap_addr, &vsi[24], (int) vsi[23]);
                    error = false;
                }
            }

            delete vsi;
        }
    }

    return error;
}
