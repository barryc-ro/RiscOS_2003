/* File:    .c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-09: BAL
   Created.
 */




// =============================================================================
// Include header files

#include <string.h>

#include "kernel.h"
#include "swis.h"

extern "C"
{
    #include "sys/types.h"
    #include "sys/mbuf.h"
}

#include "callx/callx.h"
#include "DCILib/dciif.h"

#include "defs.h"
#include "module.h"
#include "mbuf.h"




// =============================================================================
// Static class data

bool  MbufController::started = false;




// =============================================================================
// Method definitions

void  MbufController::Start ()
{
    if (IsStarted ())
    {
        callx_add_callback (Callback, 0);
    }
}


bool  MbufController::IsStarted ()
{
    if (!started)
    {
        // the control SWI with reason code 0 should *always* succeed if the
        // mbuf manager is loaded.
        if (_swix (Mbuf_Control, _IN (0), 0) == 0)
        {
            started = true;
        }
    }

    return started;
}

/* handle_managerstatus - deal with a MbufManagerStatus service call -
   this routine is called if a service call of type MbufManaerStatus_Started is
   called - ie the MbufManager was not present when the driver module was loaded
   but has since become alive, and is now advertising its presence. This allows
   us to register with it and use its resources.
*/

void  MbufController::ManagerStatus (const int  reason_code)
{
    switch (reason_code)
    {
        case MbufManagerStatus_Started:
            if (!started)
            {
                started  = true;
                callx_add_callback (Callback, 0);
            }
            break;

        case MbufManagerStatus_Stopping:
            break;

        case MbufManagerStatus_Scavenge:
            break;

        default:
            break;
    }
}




_kernel_oserror *  MbufController::Callback (_kernel_swi_regs *  r,
                                             void *              pw,
                                             void *              handle)
{
    M_unused (r);
    M_unused (pw);
    M_unused (handle);

    DCIInterface::StartDrivers ();
    return 0;
}




MbufController::MbufController (struct mbctl *  MBCTL)
    : MBCTL (MBCTL)
{
    if (IsStarted ())
    {
        _swix (Mbuf_OpenSession, _IN (0), MBCTL);
    }
}




MbufController::~MbufController ()
{
    if (MBCTL && IsStarted ())
    {
        _swix (Mbuf_CloseSession, _IN (0), MBCTL);
    }
}
