/*	BUFFERS.C

Project : ATML ATM25 VL1000 ('Panther') card driver

Purpose: MPEG player buffering routines.


History:

Date      Who     Description of change
===========================================

20/1/97   CP	  Picked up existing code.  Added header :-)

		  Commented reinit_bs_buffers to make more sense.

		  Added global variables for sizeof and number of
		  bs_buffer(s).

		  Made the bprotos variable static ('cos it's only needed in
	 	  this file).

	 	  Replaced all occurrences of N_BS_BUFFERS with
		  number_of_bs_buffersG

29/1/97   CP      Removed payload size from call to init_bs_buffers.  It can
		  get all the data it needs from globals kept by commands.c.
		  (There may also be more tidying possible).

31/1/97   CP      Found and corrected serious bug in the linked lists used
		  for mpeg buffering.  The lists were not being terminated
		  properly (p->bs_next not being explicitly set to NULL).
		  It's a miracle it didn't show up earlier!  The current fix
		  is to shoot from the hip, and wherever a list is modified,
		  set the final bs_next ptr to NULL.  A better long-term fix
		  would be to completely rethink the buffering strategy?

3/2/97    CP      Must always re-initialise buffers after a size change
		  otherwise ptrs can move without realising!

***************************************************************************/

/* buffers.c -- handle MPEG buffers */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include <assert.h>
#include "kernel.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

/* Local */
#include "boson.h"
#include "defs.h"
extern "C"
{
    #include "header.h"
}
#include "module.h"
#include "mpeg.h"



// =============================================================================
// Constants definitions

/* WEIRD NUMBERS ADDED FOR CHRIS */

/* 28/1/97:CP:following aren't used any more */
/*#define MPEG_PDU_SIZE    376  was 376 */
/*#define BS_AAL0_SIZE     384  was 384 */

#define N_WAIT_B 8


/* 20/1/97:CP:superseded macros removed to force compile errors */
/*#define BS_BUFFER_SIZE   396 *//* was 396 */
/*#define N_BS_BUFFERS     850 *//* was 850 */



#define Send_FullBuffer 0x492c1


/* 29/1/97:CP:extra buffer space */
#define BS_DATA_HEADER 20

/* 20/1/97:CP:macros added for buffer pool defaults */
#define DEFAULT_BS_BUFFER_PAYLOAD 376 /* 2 x 188 bytes */
#define DEFAULT_MEMORY_POOL (850 * (sizeof (struct bs_buffer) - sizeof (int) +\
                                    DEFAULT_BS_BUFFER_PAYLOAD + BS_DATA_HEADER))




// =============================================================================
// Type definitions

/* Tim's version of events: */
struct bs_buffer
{
    /* Link: ptr to next buffer */
    struct bs_buffer *  bs_next;

    /* FreeRoutine: addr. of routine to free buffer */
    int                 bs_handle;

    /* FreeWkSpace: wdpace pointer for free routine */
    int                 bs_flags;

    /* Start: start address of bitstream buffer data  */
    /* 20/1/97:CP:changed to int ptr to match bs_data */
    int     *           bs_offset;

    /* Length: length of bitstream buffer in bytes */
    int                 bs_len;

    /* Packets: no. of unprocessed packets in buffer */
    int                 bs_packets;

    /* 20/1/97:CP:changed this from fixed char array to single int
     * placemarker.  This allows a variable-size payload to be used.
     * Making it an int makes the size of the structure unambiguous wrt
     * byte alignment.
     */
    int                 bs_data;
};

/* If FreeRoutine is zero, then FreeWkSpace is an XSWI to call instead */

struct bswait
{
    struct bs_buffer *  w_bufs[N_WAIT_B];
    int                 w_supply;
    int                 w_consume;
    int                 w_inuse;
};




// =============================================================================
// Class statics

MPEGConnection *  MPEGConnection::instance = 0;




// =============================================================================
// Global variable declarations

static struct bswait        bsw;
static struct bs_buffer **  bprotos = NULL;

static struct bs_buffer *   bs_fullp = 0;
static struct bs_buffer *   bs_full_q = 0;
static struct bs_buffer *   bs_empty_q = 0;
static struct bs_buffer *   bs_emptyp = 0;
static int                  bs_sent = 0;
static int                  bs_received = 0;
static int                  wasempty = 0;
static int                  bufs_used = 0;
static int                  bufs_hiwat = 0;

#ifdef USE_DYNAMIC_AREAS
static unsigned int         dynamic_area_handle = 0;
static unsigned int         buffer_payload      = DEFAULT_BS_BUFFER_PAYLOAD;
static unsigned int         memory_pool         = DEFAULT_MEMORY_POOL;
#endif


/* OK - starting to get desperate!

Set of macros to check for memory leaks and other such stuff */

#ifndef NDEBUG
static struct bs_buffer *   first_bs_bufferG = NULL;
static struct bs_buffer *   last_bs_bufferG = NULL;
#endif



/* 20/1/97:CP:globals needed for rest of code.  Should expand to a constant! */
/* size of a FULL bs_buffer (including header and payload) */
static unsigned int         bs_buffer_sizeG =
    sizeof (struct bs_buffer) - sizeof (int) +
    DEFAULT_BS_BUFFER_PAYLOAD + BS_DATA_HEADER;

/* number of bs_buffers available - ie. however many full bs_buffers fit into
 * the memory pool.  Got to initialise it like this since it needs to be a
 * constant.  Messy.
 */
unsigned int                number_of_bs_buffersG =
    DEFAULT_MEMORY_POOL / (sizeof (struct bs_buffer) - sizeof(int) +
                           DEFAULT_BS_BUFFER_PAYLOAD + BS_DATA_HEADER);

/** 20/1/97:CP:end of added code **/




/* =============================================================================
 * Function prototype declarations
 */

static int  mpeg_alloc_init_buffers (void);
static void  reinit_bs_buffers(void);
static void save_full_buf (struct bs_buffer *b, int datalost);
static void  bswait_init (void);
static int  bswait_supply  (struct bs_buffer *  b);
static struct bs_buffer *  bswait_consume (void);
static struct bs_buffer *  get_empty_buffer (void);




/* =============================================================================
 * Function definitions
 */

MPEGConnection *  MPEGConnection::Create (const ATML_SOCKADDR *const  atm_addr,
                                          const Connection::Service   service,
                                          const Connection::Origin    origin,
                                          int &                       error)
{
    error = 0;
    if (!instance)
    {
        instance = new MPEGConnection (atm_addr, service, origin, error);
        if (instance)
        {
            if (error)
            {
                delete instance;
                instance = 0;
            }
        }
        else
        {
            error = Error_ATM_NoMemory;
        }
    }
    else
    {
        error = Error_ATM_MultipleMPEG;
    }

    return instance;
}



MPEGConnection::MPEGConnection (const ATML_SOCKADDR *const  atm_addr,
                                const Connection::Service   service,
                                const Connection::Origin    origin,
                                int &                       error)
    : Connection (atm_addr, service, origin, error),
      buffer_offset (0),
      data_count (0),
      data_lost (0)
{
    if (!error)
    {
        if (mpeg_alloc_init_buffers() == -1)
        {
            error = Error_ATM_NoMemory;
        }
        reinit_bs_buffers ();
        buffer = get_empty_buffer ();
    }
}




Connection *  MPEGConnection::CheckConflict (
                    const ATML_SOCKADDR *const  atm_addr,
                    const Connection::Service   service,
                    const Connection::Origin    origin,
                    int &                       error)
{
    M_unused (atm_addr);
    M_unused (origin);

    error = 0;
    if (service == Service_MPEG_AAL5 && instance)
    {
        error = Error_ATM_MultipleMPEG;
    }

    return 0;
}




MPEGConnection *  MPEGConnection::Get ()
{
    return instance;
}




int  MPEGConnection::Data (unsigned int  data_size)
{
    int  rc = 0;

    if (buffer)
    {
        unsigned int        bytes_left;

        bytes_left = bs_buffer_sizeG - buffer_offset;
        if (data_size > bytes_left)
        {
            /* 1999-02-22: BAL
             * Is this really correct? i.e. keeping current
             * contents of MPEG buffer valid even if we
             * 'discard' this new data?
             */

            buffer->bs_len = buffer_offset;
            buffer_offset = 0;
            /* bs->bs_handle = m->m_streamhandle; */
            buffer->bs_handle = streamhandle;
            save_full_buf (buffer, 0);
            buffer = get_empty_buffer ();
            mpeg_discards2++;

#if 0
            /* 1999-02-22: BAL
             * This code was immediately after a continue statement,
             * it could never have been executed.
             */
            bs = (struct bs_buffer *) buffer->rbuf;
            /* m->m_datacount = 0; */
            bytes_left = bs_buffer_sizeG;

            if(packet_bytes > bs_buffer_sizeG)
            {
                mpeg_discards3++;
            }
#endif
            rc = 1;
        }
        else
        {
            /* 28/1/97:CP:bs->bs_data is no longer an array,
             * so need to explicitly define address
             */
            ASM_GET_MSG (Boson_CommitFromARMAddr,
                         (unsigned char *) buffer->bs_data + buffer_offset,
                         data_size);
            buffer_offset += data_size;
            data_count += data_size;
        }
    }
    else
    {
        ++mpeg_discards1;
        buffer = get_empty_buffer ();
        buffer_offset = 0;
        rc = 1;
    }

    return rc;
}



void  MPEGConnection::DataEnd ()
{
    buffer->bs_len = buffer_offset;
    /* bs->bs_handle = m->m_streamhandle; */
    buffer->bs_handle = streamhandle;
    save_full_buf (buffer, 0);
    buffer_offset = 0;
    buffer = get_empty_buffer();
}




void MPEGConnection::DataLength (unsigned int  length)
{
    buffer_offset = length;
}



void MPEGConnection::DataAbort ()
{
    buffer_offset = 0;
}




const char *  MPEGConnection::GetTextService ()
{
    return "MPEG";
}




/******* init_bs_buffers ***************************************************

Purpose: To initialise the memory used by the bs_buffers.

         Note that it is assumed thst the values presented have been
         pre-checked.

         Routine extensively modified CP 20/1/97 to allow variable bs_buffer
         payload sizes.

Inputs: (unsigned int) size of memory pool (bytes)

Outputs: 0 if OK, -1 if an error occurred

Globals: Uses number_of_bs_buffersG
	      size_of_bs_buffersG

***************************************************************************/

#ifdef USE_DYNAMIC_AREAS
static int mpeg_alloc_init_buffers (void)
{
  _kernel_swi_regs r;
  int loop;
  int b;

  static unsigned int current_pool_size;
  static int start_of_dynamic_area;


  if(bprotos != NULL)
  {
    free(bprotos);
  }

  bprotos = (struct bs_buffer **)malloc(number_of_bs_buffersG * sizeof(struct bs_buffer *));

  if(dynamic_area_handle != 0)
  { /* dynamic area exists, change its size */
     r.r[0] = dynamic_area_handle;
     r.r[1] = (int) ((long) memory_pool - current_pool_size); /* amount to change size */

    if(_kernel_swi(XOS_Bit | OS_ChangeDynamicArea, &r, &r))
    {
      return(-1);
    }

    current_pool_size = memory_pool;
  }

  else
  { /* dynamic area doesn't exist yet - create it */
    r.r[0] = 0; /* create new dynamic area */
    r.r[1] = -1; /* reserved */
    r.r[2] = memory_pool;  /* initial size */
    r.r[3] = -1; /* reserved */
    r.r[4] = 128; /* not draggable */
    r.r[5] = -1;   /* maximum size of area */
    r.r[6] = 0; /* no dynamic area routine */
    r.r[7] = 0; /* pointer to workspace */
    r.r[8] = (int) "ATM25 Buffers";

    if(_kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r))
    {
      return(-1);
    }

    current_pool_size = memory_pool;
    start_of_dynamic_area = r.r[3];
    dynamic_area_handle = r.r[1];
  }

  b = start_of_dynamic_area;

  for (loop = 0; loop < number_of_bs_buffersG; loop++)
  {
    bprotos[loop] = (struct bs_buffer *)b;

#ifndef NDEBUG
    last_bs_bufferG = (struct bs_buffer *)b;
#endif

    b += bs_buffer_sizeG;
  }

#ifndef NDEBUG
  first_bs_bufferG = (struct bs_buffer *)start_of_dynamic_area;

  printf("Buffer checking turned ON\n");
#endif

  assert(((int)last_bs_bufferG - (int)first_bs_bufferG + bs_buffer_sizeG) == current_pool_size);


  /* 3/2/97:CP:always re-init buffers when the size changes */
  reinit_bs_buffers();

  return(0);
}

#else

{
    struct bs_buffer *b;
    int i;

    for (i = 0; i < number_of_bs_buffersG; i++) {
        b = (struct bs_buffer *)malloc(sizeof(struct bs_buffer));
        if (!b) break;
        bprotos[i] = b;
    }
    return (1);
}

#endif



static void  reset_bs_buffer (struct bs_buffer *const  b)
{
    b->bs_handle = 0;
    b->bs_flags = 0;
    b->bs_packets = 0;
}




/******* reinit_bs_buffers *************************************************

Purpose: Re-initialises the various bs_buffer structures, and the chain
	 pointers.

Inputs:  None

Outputs: None
                              \
Globals:  bprotos->bs_handle   |
	  	 ->bs_flags    |
		 ->bs_packets   }       all reset to 0
	  bs_received          |
	  bufs_used            |
                              /

          bs_emptyp  changed - points to final buffer in LL on exit
	  bs_empty_q changed - points to first buffer in LL on exit

***************************************************************************/

void reinit_bs_buffers(void)
{
    struct bs_buffer *b;
    int i;


    assert (number_of_bs_buffersG > 0);

    /* First buffer in list is special case
     * because there is no 'next' pointer to it
     * from a previous buffer.
     */

    /* Initialise the queue of empty buffers */
    bs_empty_q = bprotos[0];        /* head of queue */
    reset_bs_buffer (bprotos[0]);
    bs_emptyp = bs_empty_q;         /* tail of queue */


    for (i = 1; i < number_of_bs_buffersG; i++)
    {
        b = bprotos[i];
        if (!b) break;  /* don't try to access the rest! */

        assert (b >= first_bs_bufferG);
        assert (b <= last_bs_bufferG);

        reset_bs_buffer (b);

        /* Make the previous buffer's next pointer point to
         * this buffer.
         */
        bs_emptyp->bs_next = b;

        /* Make this buffer the tail of the empty queue */
        bs_emptyp = b;

    } /* endfor (i = 0; i < number_of_bs_buffersG; i++) */

    bs_emptyp->bs_next = NULL; /* 31/1/97:CP:Terminate linked list correctly */

    bs_received = 0;
    bufs_used   = 0;

    bs_full_q = NULL;
    bs_fullp  = NULL;

    bswait_init ();
}




#ifdef USE_DYNAMIC_AREAS
void mpeg_free_buffers (void)
{
  _kernel_swi_regs r;

  r.r[0] = 1; /* reason code FREE */
  r.r[1] = dynamic_area_handle; /* get our area handler */
  _kernel_swi(XOS_Bit | OS_DynamicArea, &r, &r); /* do it */

  bs_empty_q = 0;
  bs_emptyp = 0;
  bs_full_q = 0;
  bs_fullp = 0;

  free(bprotos); /* 20/1/97:CP:free memory used by array of pointers */
}

#else

void mpeg_free_buffers (void)
{
    struct bs_buffer *b;

    while ((b = bs_empty_q) != 0)
    {
        assert(b >= first_bs_bufferG);
        assert(b <= last_bs_bufferG);

        bs_empty_q = b->bs_next;
        free((char *)b);
    }
    bs_fullp = 0;
}

#endif

struct bs_buffer *  get_empty_buffer (void)
{
    struct bs_buffer *b = bs_empty_q;
    int irq_state;

    if (b == NULL) {
        wasempty++;
        return ((struct bs_buffer *)NULL);
    }

    assert(b >= first_bs_bufferG);
    assert(b <= last_bs_bufferG);

    irq_state = ensure_irqs_off();
    bs_empty_q = b->bs_next;

    if (bs_empty_q == NULL) /* no more buffers on emptybuffer linked list */
    {
      bs_emptyp = NULL;
    }

    b->bs_next = NULL;
    b->bs_len = 0;
    b->bs_offset = &b->bs_data; /* 20/1/97:CP:bs_data is now an int used as a
        				      placemarker */

    if (++bufs_used > bufs_hiwat) bufs_hiwat = bufs_used;
    restore_irqs(irq_state);
    return (b);
}

static void save_full_buf (struct bs_buffer *b, int datalost)
{
    int irq_state;

    assert(b >= first_bs_bufferG);
    assert(b <= last_bs_bufferG);

    irq_state = ensure_irqs_off();
    b->bs_next = NULL;
    b->bs_offset = &b->bs_data; /* 20/1/97:CP:bs_data is now an int used as a
					      placemarker */
				/* haven't we already done this? cf get_empty_buffer() */
    /* b->bs_handle set to streamhandle on entry */
    b->bs_handle = 0;
    b->bs_packets = 0;
    b->bs_flags = XOS_Bit | ATM_EmptyBuffer;
    bs_sent++;

    if (bs_fullp == NULL)
    {
      bs_full_q = b;
    }
    else
    {
      bs_fullp->bs_next = b;
    }

    bs_fullp = b;
    bs_fullp->bs_next = NULL;

    restore_irqs(irq_state);

    M_unused (datalost);
}

void  mpeg_send_buffers(void)
{
/*     struct bs_buffer *b, *bb; */
/*     int handle, datalost; */
    struct bs_buffer *b;
    _kernel_swi_regs r;

    while ((b = bswait_consume()) != 0)
    {
      assert(b >= first_bs_bufferG);
      assert(b <= last_bs_bufferG);

/*         handle = b->bs_handle; */
/*         datalost = 0; */
/*         for (bb = b; bb; bb = bb->bs_next) { */
/*             if (bb->bs_flags != 0) */
/*                 datalost = 1; */
/*             bb->bs_handle = 0; */
/*             bb->bs_packets = 0; */
/*             bb->bs_flags = XOS_Bit | FREE_BUFFER_SWI; */
/*             bs_sent++; */

/*         } */
/*         send_full_buf(b, datalost, handle); */
      r.r[0] = 0;
      r.r[1] = streamhandle;
      r.r[2] = (int)b;
      _kernel_swi(XOS_Bit | Send_FullBuffer, &r, &r);

    }
}

void  bswait_init (void)
{
    memset((char *)&bsw, 0, sizeof(bsw));
}


static int bswait_supply  (struct bs_buffer *  b)
{
    if (bsw.w_inuse) return (0);
    if (bsw.w_bufs[bsw.w_supply] == 0) {
        bsw.w_bufs[bsw.w_supply++] = b;
        if (bsw.w_supply == N_WAIT_B) bsw.w_supply = 0;
        return (1);
    }
    return (0);
}

static struct bs_buffer *  bswait_consume (void)
{
    struct bs_buffer *b;

    bsw.w_inuse = 1; /* stop the world from changing under us (cf bswait_supply) */
    b = bsw.w_bufs[bsw.w_consume];
    if (b) {
        bsw.w_bufs[bsw.w_consume++] = 0;
        if (bsw.w_consume == N_WAIT_B)
            bsw.w_consume = 0;
    }
    bsw.w_inuse = 0;
    return (b);
}




extern "C" void  mpeg_check_feed (void)
{
    if(bs_full_q && bswait_supply(bs_full_q))
    {
        bs_full_q = NULL;
        bs_fullp = NULL;
        setcallback();
    }
}


void  mpeg_empty_buffer (struct bs_buffer *  b)
{
    int  irq_state = ensure_irqs_off();

    bs_received++;
    bufs_used--;

    if (bs_emptyp == 0)
    {
        bs_empty_q = b;
    }
    else
    {
        bs_emptyp->bs_next = b;
    }
    bs_emptyp = b;

    bs_emptyp->bs_next = NULL; /* 13/2/97:CP:Terminate linked list correctly
                                * and in the correct place! MUST have IRQs
                                * off while buggering around with the
                                * buffering linked lists!!!!
                                */
    restore_irqs(irq_state);
}



void  mpeg_display_buffer_pool (void)
{
    /* no tokens, so print current values */
    printf ("MPEG Buffer Pool details:\n");

    printf ("\tBuffer payload %u bytes (overall size of a buffer %u bytes)\n",
            buffer_payload, bs_buffer_sizeG);

    printf ("\tTotal memory available for MPEG buffers %u bytes\n",
            memory_pool);

    printf ("\tTotal number of buffers available %u\n",
            number_of_bs_buffersG);
}



_kernel_oserror *  mpeg_display_buffers (int  argc, char *  argv[])
{
    unsigned int        full_bufs = 0;
    unsigned int        empty_bufs = 0;
    struct bs_buffer *  b;

    M_unused (argc);
    M_unused (argv);

    printf ("ATM25 MPEG Buffers:\n");

    printf ("bs_empty_q = %p\n", bs_empty_q);

    for (b = bs_empty_q; b; b = b->bs_next)
    {
        printf ("b = %p\t", b);
        printf ("b->bs_next = %p\n", b->bs_next);
        empty_bufs++;
    }

    for (b = bs_full_q; b; b = b->bs_next)
    {
        full_bufs++;
    }

    printf ("Total buffers: %u, Available buffers: %u, Full buffers: %u\n",
            number_of_bs_buffersG, empty_bufs, full_bufs);

    printf ("Buffers returned: %d, Buffers sent: %d\n",
            bs_received, bs_sent);

    printf("Buffers used: %d, Hiwatermark: %d, Fails: %d\n",
            bufs_used, bufs_hiwat, wasempty);

    printf("wait_supply state: %d, wait_consume_state: %d\n",
            bsw.w_supply, bsw.w_consume);

    printf ("Full buffer head: %p, tail: %p\n",
            bs_full_q, bs_fullp);

    printf ("Empty buffer head: %p, tail: %p\n",
            bs_empty_q, bs_emptyp);

    return NULL;
}




void mpeg_change_buffers (const unsigned int  new_buffer_payload,
                          const unsigned int  new_memory_pool)
{
    if (new_buffer_payload > 0)
    {
        buffer_payload = new_buffer_payload;
    }

    if (new_memory_pool > 0)
    {
        memory_pool = new_memory_pool;
    }

    /* work out the size of a bs_buffer with given payload, then find out how
     * many whole bs_buffers fit into the memory pool, then shrink the memory
     * pool to get rid of any bytes due to fractions
     */
    bs_buffer_sizeG = sizeof (struct bs_buffer) -
                      sizeof (int) +
                      buffer_payload +
                      BS_DATA_HEADER;

    number_of_bs_buffersG = memory_pool / bs_buffer_sizeG;

    memory_pool = bs_buffer_sizeG * number_of_bs_buffersG;
    /* got minimal memory now! */

    mpeg_alloc_init_buffers ();
}




void  mpeg_flush_full_queue (void)
{
    if (bs_full_q && bswait_supply (bs_full_q))
    {
        bs_full_q = 0;
        bs_fullp = 0;
        setcallback();
    }
}
