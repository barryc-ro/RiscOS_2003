/* File:    dcilane.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-09: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "sys/errno.h"
    #include "sys/mbuf.h"
    #include "sys/dcistructs.h"
    #include "inetlib.h"
    #include "netinet/in.h"
    #include "sys/socket.h"
    #include "net/if.h"
    #include "net/if_arp.h"
    #include "netinet/if_ether.h"
}

// Misc
#include "DCILib/dciif.h"
#include "DCILib/dcimultilist.h"
#include "DebugLib/DebugLib.h"
#include "MemCheck/MemCheck.h"

// Local
#include "arp.h"
#include "connection.h"
#include "dcilane.h"
#include "header.h"
#include "mbuf.h"
#include "nic.h"




// =============================================================================
// Static class data

struct mbctl    ATM25LANEDCIInterface::MBCTL =
{
    0,				// opaque
    sizeof (struct mbctl),	// mbcsize
    MBUF_MANAGER_VERSION,	// mbcvers
    0ul,			// flags
    MINCONTIG,			// advminubs
    ETHERMTU,			// advmaxubs
    MINCONTIG,			// mincontig
    0,				// spare1
    // Rest of structure initialised to zeroes due to trailing comma
};

int               ATM25LANEDCIInterface::count = 0;
MbufController *  ATM25LANEDCIInterface::mbuf_controller = 0;




// =============================================================================
// Class declarations


class LANEInterfaceMulticast : public DCIInterfaceMulticastList
{
    // Public methods
    public:
        LANEInterfaceMulticast (LANEService &  lane_service);

        virtual DCIFilterMulticast *  CreateFilterMulticast ();

        virtual void   ConfigureHardware ();

    // Private data
    private:
        enum
        {
            MaxMulticastAddrs = 16
        };

        LANEService *  lane_service;
};

class LANEFilterMulticast : public DCIFilterMulticastList
{
    // Public methods
    public:
        LANEFilterMulticast (LANEInterfaceMulticast *  if_multicast);

        //virtual ~LANEFilterMulticast ();
};




// =============================================================================
// Method definitions

/* -----------------------------------------------------------------------------
   ATM25LANEDCIInterface::ATM25LANEDCIInterface

   Constructor

   Inputs
   LANEInterfaceMulticast *  if_multicast : pointer to object to deal with
                                            multicast filtering at the
                                            interface level.
 */

ATM25LANEDCIInterface::ATM25LANEDCIInterface (NIC &  nic,
                                              int &  error)
    : ATM25DCIInterface (nic, error),
      lane_service (0)
{
    // If we get to this far then memory has been allocated for the object
    // and our data has been initialised.  Should anything go wrong, set the
    // error code and rely on the caller deleting the object to clean up...

    if (error)
    {
        return;
    }

    lane_service = new LANEService (nic, *this, MBCTL, error);
    if (!lane_service)
    {
        error = Error_ATM_NoMemory;
    }

    if (error)
    {
        return;
    }

    lane_multicast = new LANEInterfaceMulticast (*lane_service);
    if (!lane_multicast)
    {
        error = Error_ATM_NoMemory;
        return;
    }

    SetInterfaceMulticast (*lane_multicast);


    mtu = ETHERMTU;

    if (count++ == 0)
    {
        mbuf_controller = new MbufController (&MBCTL);
        if (!mbuf_controller)
        {
            error = Error_ATM_NoMemory;
            return;
        }
    }

    dib.dib_inquire |= INQ_MULTICAST | INQ_VIRTUAL | INQ_FILTERMCAST;
    //dib.dib_inquire |= INQ_MULTICAST | INQ_FILTERMCAST;


    stats_mask.st_tx_frames         = 0xffffffff;
    stats_mask.st_tx_bytes          = 0xffffffff;
    stats_mask.st_tx_general_errors = 0xffffffff;

    memset (stats_mask.st_last_dest_addr,
            0xff,
            sizeof (stats_mask.st_last_dest_addr));

    stats_mask.st_dropped_frames  = 0xffffffff;
    stats_mask.st_unwanted_frames = 0xffffffff;
    stats_mask.st_rx_frames       = 0xffffffff;
    stats_mask.st_rx_bytes        = 0xffffffff;
    memset (stats_mask.st_last_src_addr,
            0xff,
            sizeof (stats_mask.st_last_src_addr));

    stats.st_interface_type    = ST_TYPE_ATMFLANE;
    //stats.st_interface_type    = ST_TYPE_ATM25_6;

    stats.st_tx_frames         = 0;
    stats.st_tx_bytes          = 0;
    stats.st_tx_general_errors = 0;

    memset (stats_mask.st_last_dest_addr,
            0,
            sizeof (stats_mask.st_last_dest_addr));

    stats.st_dropped_frames  = 0;
    stats.st_unwanted_frames = 0;
    stats.st_rx_frames       = 0;
    stats.st_rx_bytes        = 0;
    memset (stats_mask.st_last_src_addr,
            0xff,
            sizeof (stats_mask.st_last_src_addr));
    return;
}




/* -----------------------------------------------------------------------------
   ATM25SocketsDCIInterface::~ATM25SocketsDCIInterface

   Destructor.
 */

ATM25LANEDCIInterface::~ATM25LANEDCIInterface ()
{
    if (lane_service)
    {
        delete lane_service;
        lane_service = 0;
    }

    if (--count == 0)
    {
        delete mbuf_controller;
    }
}




/* -----------------------------------------------------------------------------
   ATM25LANEDCIInterface::SetNetworkMTU

   Set the MTU for this interface

   Inputs
   const unsigned int  flags : flags word
   const int           mtu   : MTU

   Returns  int
   ENOTTY - illegal operation for this device
 */

ATM25LANEDCIInterface::SetNetworkMTU (const unsigned int  flags,
                                      const int           mtu)
{
    M_unused (flags);
    M_unused (mtu);

    return ENOTTY;
}




/* -----------------------------------------------------------------------------
   ATM25LANEDCIInterface::Transmit

   Transmit data across the network interface

   Inputs
   const unsigned int     flags      : flags word
   const u_short          frame_type : frame type
   struct mbuf *          m          : mbuf chain containing data to transmit
   const unsigned char *  dest       : destination hardware address
   const unsigned char *  src        : source hardware address

   Returns  int
   success : 0
   failure : errno error code
 */

int  ATM25LANEDCIInterface::Transmit (const unsigned int     flags,
                                      const u_short          frame_type,
                                      struct mbuf *          m,
                                      const unsigned char *  dest,
                                      const unsigned char *  src)
{
    unsigned int   size = 0;
    int            error = 0;
    int            first_error = 0;
    struct mbuf *  m_prev;
    //static bool    sema = false;
    //int            irq_state;

    //irq_state = ensure_irqs_off ();
    //if (sema)
    //{
    //    error = INETERR_TXBLOCKED;
    //    dprintf (("", "transmit re-entered\n"));
    //}
    //else
    //{
    //    sema = true;
    //}
    //restore_irqs (irq_state);

    MemCheck_RegisterMiscBlock (dest, ETHER_ADDR_LEN);
    MemCheck_RegisterMiscBlock (src, ETHER_ADDR_LEN);

    do
    {
        memcheck_registermbufm (m);

        if (!error)
        {
            size = MBCTL.count_bytes (&MBCTL, m);
            dprintf (("", "%d byte payload\n", size));
            if (size > ETHERMTU)
            {
                error = EMSGSIZE;
            }
            else
            {
                // Add Ethernet header to start of data
                if (m->m_off - m->m_inioff < Ether_HdrSize)
                {
                    dprintf (("", "only %d bytes in first mbuf - allocating own\n",
                              m->m_off - m->m_inioff));
                    // Not enough space at start of current mbuf chain.
                    // Need to allocate another mbuf to hold header.
                    struct mbuf *  m_hdr = ALLOC_S (Ether_HdrSize, 0);
                    memcheck_registermbuf (m_hdr);
                    m_hdr->m_len = Ether_HdrSize;

                    m_hdr->m_list = m->m_list;
                    m = CAT (m_hdr, m);
                }
                else
                {
                    // Can store header in existing mbuf chain -
                    // adjust data pointer.
                    m->m_off -= Ether_HdrSize;
                    m->m_len += Ether_HdrSize;
                }

                u_char *  header_data = mtod (m, u_char *);
                memcpy (header_data + Ether_DstAddrOffset, dest, ETHER_ADDR_LEN);
                if (flags & TX_FAKESOURCE)
                {
                    memcpy (header_data + Ether_SrcAddrOffset, src, ETHER_ADDR_LEN);
                }
                else
                {
                    memcpy (header_data + Ether_SrcAddrOffset,
                            dib.dib_address,
                            ETHER_ADDR_LEN);
                }
                header_data[Ether_TypeOffset]     = (frame_type & 0xff00) >> 8;
                header_data[Ether_TypeOffset + 1] = frame_type & 0x00ff;

                //ddump_mbuf (m, size + Ether_HdrSize);
                error = lane_service->TxData (m, size + Ether_HdrSize);
                if (!error)
                {
                    ++stats.st_tx_frames;
                }
            }
        }

        m_prev = m;       // keep pointer to current mbuf chain
        m = m->m_list;    // point to next mbuf chain in list

        memcheck_deregistermbufm (m_prev);

        if (!(flags & TX_PROTOSDATA))
        {
            m_freem (m_prev);
        }

        if (error && !first_error)
        {
            first_error = error;
        }
    } while (m);

    //if (error != INETERR_TXBLOCKED)
    //{
    //    sema = false;
    //}

    MemCheck_UnRegisterMiscBlock (dest);
    MemCheck_UnRegisterMiscBlock (src);

    return first_error;
}




/* -----------------------------------------------------------------------------
   ATM25LANEDCIInterface::SetHardwareReceiveLevel

   Set the level of filtering done by the hardware.

   Inputs
   const int  address_level : address level to filter at
 */

void  ATM25LANEDCIInterface::SetHardwareReceiveLevel (const int  address_level)
{
    // LANE interface can either operate in 'normal' mode (broadcasts +
    // specific only) or multicast mode (broadcasts + multicasts + specific).

    switch (address_level)
    {
        case ADDRLVL_SPECIFIC:
        case ADDRLVL_NORMAL:
            // Don't want any multicast frames, so *enable* hardware multicast
            // filtering, but provide an empty list of addresses so that all
            // multicast frames get filtered.
            lane_service->TxSetMcast (0, 0);
            break;

        case ADDRLVL_MULTICAST:
            // Want some / all multicast frames
            lane_multicast->ConfigureHardware ();
            break;

        default:
            break;
    }
}




struct mbctl &  ATM25LANEDCIInterface::GetMBCTL ()
{
    return MBCTL;
}




/* -----------------------------------------------------------------------------
   ATM25LANEDCIInterface::DisplayInfo

   Display information and statistics about this interface.
 */

void  ATM25LANEDCIInterface::DisplayInfo ()
{
    // Do common stuff in superclass first.
    ATM25DCIInterface::DisplayInfo ();

    // Do LANE-specific stuff.
    lane_service->DisplayInfo ();
}





/* -----------------------------------------------------------------------------
   LANEInterfaceMulticast::LANEInterfaceMulticast

   Constructor.

   Inputs
   LANEService *  lane_service : LANE service
 */

LANEInterfaceMulticast::LANEInterfaceMulticast (LANEService &  lane_service)
    : DCIInterfaceMulticastList (),
      lane_service (&lane_service)
{
}




/* -----------------------------------------------------------------------------
   LANEInterfaceMulticast::CreateFilterMulticast

   Create an object to deal with multicast requests / releases at the filter
   level.

   Returns  DCIFilterMulticast *
   success : pointer to DCIFilterMulticast object
   failure : 0 (no memory)
 */

DCIFilterMulticast *  LANEInterfaceMulticast::CreateFilterMulticast ()
{
    return new LANEFilterMulticast (this);
}




/* -----------------------------------------------------------------------------
   LANEInterfaceMulticast::ConfigureHardware

   Alter the multicast filtering being done by the hardware.
 */

void  LANEInterfaceMulticast::ConfigureHardware ()
{
    unsigned char  multicast_addr[MaxMulticastAddrs][ETHER_ADDR_LEN];
    int            count = 0;

    // Hardware can filter at most 16 multicast addresses - any more then
    // we have to disable multicast filtering so that we receive all
    // multicast frames and the protocol modules have to sort things out
    // in software.

    if (!claim_alls)
    {
        for (InterfaceAddr *  addr = address;
             address && count <= MaxMulticastAddrs - 1;
             address = address->GetNext())
        {
            memcpy (&multicast_addr[count++], addr->GetAddr(), ETHER_ADDR_LEN);
        }
    }

    if (claim_alls || count > MaxMulticastAddrs - 1)
    {
        lane_service->TxConfig (ALE_CONFIG_DISABLE_MULTICAST);
    }
    else
    {
        lane_service->TxSetMcast (multicast_addr, count);
    }
}




/* -----------------------------------------------------------------------------
   LANEFilterMulticast::LANEFilterMulticast

   Constructor

   Inputs
   LANEInterfaceMulticast *  if_multicast : pointer to object to deal with
                                            multicast filtering at the
                                            interface level.
 */

LANEFilterMulticast::LANEFilterMulticast (
                         LANEInterfaceMulticast *  if_multicast)
    : DCIFilterMulticastList (if_multicast)
{
}
