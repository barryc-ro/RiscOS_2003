/* File:    .c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-09: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "sys/errno.h"
    #include "sys/mbuf.h"
    #include "sys/dcistructs.h"
}

// Misc
#include "DCILib/dciif.h"
#include "DCILib/dcimultilist.h"
#include "DebugLib/DebugLib.h"
#include "MemCheck/MemCheck.h"

// Local
#include "dci.h"
#include "error.h"
#include "header.h"
#include "mbuf.h"
#include "nic.h"
#include "utils.h"




// =============================================================================
// Constants definitions

#define DIB_Location "Expansion slot"




// =============================================================================
// Class variables

unsigned char  ATM25DCIInterface::hw_bcast_addr[ETHER_ADDR_LEN] =
                   { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };





// =============================================================================
// Class declarations

class ATM25DCIFilter : public DCIFilter
{
    // Public methods
    public:
        ATM25DCIFilter (unsigned int          flags,
                        const u_short         frame_type,
                        const short int       frame_level,
                        const int             address_level,
                        const int             error_level,
                        void *const           pw,
                        DCIRxFrameHandler     rx_handler,
                        DCIFilterMulticast *  multicast,
                        DCIInterface &        interface)
            : DCIFilter (flags,
                         frame_type,
                         frame_level,
                         address_level,
                         error_level,
                         pw,
                         rx_handler,
                         multicast,
                         interface) {}

        ATM25DCIFilter *  Next ()
        {
            return (ATM25DCIFilter *) next;
        }

        void  DisplayInfo ()
        {
            printf ("Type=%4hx FrmLvl=%hu AddrLvl=%d ErrLvl=%d Handler=%p\n",
                    frame_type,
                    frame_level,
                    address_level,
                    error_level,
                    rx_handler);
        }
};




// =============================================================================
// Method definitions

/* -----------------------------------------------------------------------------
   ATM25DCIInterface::ATM25DCIInterface

   Constructor.

   Inputs
   NIC &  nic : NIC object

   Outputs
   int &             error : error code
 */

ATM25DCIInterface::ATM25DCIInterface (NIC &  nic,
                                      int &  error)
    : DCIInterface (error)
{
    if (!error)
    {
        dib.dib_swibase            = ATM_00;
        dib.dib_name               = (unsigned char *) "ap";
        dib.dib_address            = (unsigned char *) nic.GetMACAddr ();
        dib.dib_module             = (unsigned char *) Module_Title;
        dib.dib_slot.sl_slotid     = nic.GetSlot ();
        dib.dib_slot.sl_minor      = 0;
        dib.dib_slot.sl_pcmciaslot = 0;
        dib.dib_slot.sl_mbz        = 0;
        dib.dib_inquire            = INQ_HWADDRVALID | INQ_HASSTATS;

        dib.dib_location = new unsigned char[strlen (DIB_Location) + 3];
        if (dib.dib_location)
        {
            sprintf ((char *) dib.dib_location,
                     "%s %1d",
                     DIB_Location,
                     dib.dib_slot.sl_slotid);

            stats_mask.st_interface_type = 0xff;

            setenv ("Inet$EtherType", "ap0", 1);
        }
        else
        {
            error = Error_ATM_NoMemory;
        }
    }
}



/* -----------------------------------------------------------------------------
   ATM25DCIInterface::~ATM25DCIInterface

   Destructor.

 */

ATM25DCIInterface::~ATM25DCIInterface ()
{
    delete[] dib.dib_location;
}



/* -----------------------------------------------------------------------------
   ATM25DCIInterface::DisplayInfo

   Display useful information about an ATM25DCIInterface.
 */

void  ATM25DCIInterface::DisplayInfo ()
{
    bool any_filters = false;

    printf ("\n\nInterface: %s%d\n\n", dib.dib_name, dib.dib_unit);
    printf ("Software filter address level: %d\n\n", address_level);
    printf ("Frame filters:\n");

    ATM25DCIFilter *  specific_filter;

    for (specific_filter = (ATM25DCIFilter *) filter[FRMLVL_E2SPECIFIC - 1];
         specific_filter;
         specific_filter = specific_filter->Next())
    {
        any_filters = true;
        specific_filter->DisplayInfo ();
    }

    for (int i = FRMLVL_E2SINK - 1; i < FRMLVL_IEEE - 1; ++i)
    {
        if (filter[i])
        {
            any_filters = true;
            ( (ATM25DCIFilter *) filter[i] )->DisplayInfo ();
        }
    }

    if (!any_filters)
    {
        printf ("none");
    }
    printf ("\n");
}




/* -----------------------------------------------------------------------------
   ATM25DCIInterface::CreateFilter

   Helper for DCIInterface to create an ATM25DCIFilter.

   Inputs
   const unsigned int       flags            : flags word
   const u_short            frame_type       : frame type
   const u_short            frame_level      : frame level
   const int                addr_level       : address level
   const int                error_level      : error level
   void *const              pw               : receive handler's private word
   const DCIRxFrameHandler  rx_handler       : receive handler
   DCIFilterMulticast *     filter_multicast : multicast handler for filter

 */

DCIFilter *  ATM25DCIInterface::CreateFilter (
                                    const unsigned int       flags,
                                    const u_short            frame_type,
                                    const u_short            frame_level,
                                    const int                addr_level,
                                    const int                error_level,
                                    void *const              pw,
                                    const DCIRxFrameHandler  rx_handler,
                                    DCIFilterMulticast *     filter_multicast)
{
    return new ATM25DCIFilter (flags,
                               frame_type,
                               frame_level,
                               addr_level,
                               error_level,
                               pw,
                               rx_handler,
                               filter_multicast,
                               *this);
}




#ifdef DEBUGLIB

#define MAX_DUMP_BYTES  9180

void dump_buf (u_char *  rptr, int pktlen)
{
    static char buf[3*MAX_DUMP_BYTES+4];
    char *bp = buf;
    static const char digits[] = "0123456789abcdef";

    while (pktlen--)
    {
        if (bp > buf + sizeof(buf) - 3)
            goto done;
        *bp++ = digits[*rptr >> 4]; /* convert byte to ascii hex */
        *bp++ = digits[*rptr++ & 0xf];
        *bp++ = ' ';
    }

done:
    *bp = 0;
    dprintf (("", "%s\n", buf));
}




void dump_mbuf (struct mbuf *m0, int pktlen)
{
    static char buf[3*MAX_DUMP_BYTES+4];
    char *bp = buf;
    struct mbuf *m;
    static const char digits[] = "0123456789abcdef";

    for (m = m0; m && pktlen; m = m->m_next)
    {
        int l = m->m_len;
        u_char *rptr = mtod(m, u_char *);

        if (pktlen > 0)
        {
            if (l > pktlen)
                l = pktlen;
            pktlen -= l;
        }
        while (l--)
        {
            if (bp > buf + sizeof(buf) - 4)
                goto done;
            *bp++ = digits[*rptr >> 4]; /* convert byte to ascii hex */
            *bp++ = digits[*rptr++ & 0xf];
            *bp++ = ' ';
        }

        if (m->m_next)
        {
            if (bp > buf + sizeof(buf) - 3)
                goto done;
            *bp++ = '|';
        }
        else
            *bp++ = ' ';
    }
done:
    if (m && pktlen)
        *bp++ = '>';
    *bp = 0;
    dprintf (("", "%s\n", buf));
}

#endif

#ifdef MemCheck_MEMCHECK

void memcheck_registermbuf (struct mbuf *  m)
{
    MemCheck_RegisterMiscBlock_Ptr (m);
    MemCheck_RegisterMiscBlock ((u_char *) m + m->m_inioff, m->m_inilen);
}

void memcheck_deregistermbuf (struct mbuf *  m)
{
    MemCheck_UnRegisterMiscBlock ((u_char *) m + m->m_inioff);
    MemCheck_UnRegisterMiscBlock (m);
}

void memcheck_registermbufm (struct mbuf *  m)
{
    MemCheck_RegisterMiscBlock_Ptr (m);
    MemCheck_RegisterMiscBlock ((u_char *) m + m->m_inioff, m->m_inilen);

    while (m->m_next)
    {
        m = m->m_next;
        MemCheck_RegisterMiscBlock_Ptr (m);
        MemCheck_RegisterMiscBlock ((u_char *) m + m->m_inioff, m->m_inilen);
    }
}

void memcheck_deregistermbufm (struct mbuf *  m)
{
    struct mbuf *  m_prev = m;
    MemCheck_UnRegisterMiscBlock ((u_char *) m + m->m_inioff);
    m = m->m_next;
    while (m)
    {
        MemCheck_UnRegisterMiscBlock ((u_char *) m + m->m_inioff);
        MemCheck_UnRegisterMiscBlock (m_prev);
        m_prev = m;
        m = m->m_next;
    }
    MemCheck_UnRegisterMiscBlock (m_prev);
}

#endif
