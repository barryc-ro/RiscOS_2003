/* File:    arp.h
   Purpose: Interface to ARP / ATMARP handling
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1998-06-05: CP
   Header added
   Converted to use Acorn's DCI headers

   1999-04-22: BAL
   Changed header for consistency with other files
   Added ATMARP capability
 */




// =============================================================================
// Include header files

// CLib
#include "kernel.h"
#include <stdio.h>
#include <string.h>
#include "swis.h"

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "inetlib.h"
    #include "netinet/in.h"
    #include "sys/socket.h"
    #include "net/if.h"
    #include "net/if_arp.h"
    #include "netinet/if_ether.h"
    #include "sys/dcistructs.h"
    #include "sys/socket.h"
    #include "sys/sockio.h"
    #include "socklib.h"
}

// Misc
#include "callx/callx.h"
#include "DebugLib/debuglib.h"

// Local
#include "address.h"
#include "arp.h"
#include "dcisock.h"
#include "defs.h"
#include "ip.h"
#include "module.h"
#include "nic.h"
#include "utils.h"




// =============================================================================
// Constants

enum
{
    ATMARP_Request   = 1,
    ATMARP_Reply     = 2,
    InATMARP_Request = 8,
    InATMARP_Reply   = 9,
    ATMARP_NAK       = 10
};




// =============================================================================
// Macros

// Access type in ATMARP type & length field
#define M_TL_Type(x) ( ((x) & 0x40) >> 6)

// Access length in ATMARP type & length field
#define M_TL_Length(x) ((x) & 0x3f)




// =============================================================================
// Function definitions

ARP::ARP (struct mbctl &  MBCTL)
    : MBCTL (MBCTL)
{
}




bool  ARP::Receive (struct mbuf *   m)
{
    bool  discard = true;
    struct ether_arp *  ea;

    arp_count++;
    local_arp_count++;

    PULLUP (m, sizeof (struct ether_arp));

    ea = mtod (m, struct ether_arp *);
    u_short  op = ntohs (ea->arp_op);

    // Ensure it's an ARP Request.
    if (ntohs (ea->arp_op) == ARPOP_REQUEST)
    {
        context *  arp = new context ();
        if (arp)
        {
            arp->arp = this;
            arp->m   = m;
            discard  = false;
            callx_add_callback (Callback, arp);
        }
    }

    return discard;
}




_kernel_oserror *  ARP::Callback (_kernel_swi_regs *  r,
                                  void *              pw,
                                  void *              handle)
{
    M_unused (r);
    M_unused (pw);

    context *  arp = (context *) handle;
    arp->arp->Request (arp->m);
    delete arp;
    return 0;
}




void  ARP::Request (struct mbuf *   m)
{
    bool                free_mbuf = true;
    struct ether_arp *  ea = mtod (m, struct ether_arp *);

    // Don't handle ARP requests for our own IP address.
    if (memcmp (ea->arp_spa, ea->arp_tpa, sizeof (ea->arp_spa)) != 0)
    {
        #ifdef DEBUGLIB
        char  spa[16];
        char  tpa[16];
        char  sha[18];
        char  tha[18];

        num_to_sep_str (ea->arp_spa, 4, spa, '.');
        num_to_sep_str (ea->arp_tpa, 4, tpa, '.');

        num_to_sep_str (ea->arp_sha, ETHER_ADDR_LEN, sha, ':');
        num_to_sep_str (ea->arp_tha, ETHER_ADDR_LEN, tha, ':');

        dprintf (("", "spa=%s, sha=%s\ntpa=%s, tha=%s\n", spa, sha, tpa, tha));
        #endif

        u_long                 ip_addr;
        const unsigned char *  mac_addr;

        memcpy (&ip_addr, ea->arp_tpa, 4);

        NIC *  nic = NIC::GetNIC();
        mac_addr = nic->GetSocketsIF().GetIPMap().MACFromIP (ip_addr);
        if (mac_addr)
        {
            dprintf (("", "found IP<->MAC mapping\n"));

            // Construct 'fake' ARP REPLY
            memcpy (ea->arp_spa, ea->arp_tpa, 4);
            memcpy (ea->arp_sha, mac_addr, ETHER_ADDR_LEN);
            ea->arp_op = htons (ARPOP_REPLY);

            // Send the ARP REPLY back up the stack
            nic->GetSocketsIF().Receive (ETHERTYPE_ARP,
                                         ea->arp_spa,
                                         m);
            free_mbuf = false;
        }
    }

    if (free_mbuf)
    {
        m_free (m);
    }
}




ATMARP::ATMARP (const int       unit,
                struct mbctl &  MBCTL)
    : unit (unit),
      MBCTL (MBCTL),
      got_spa (false)
{
}




int  ATMARP::Receive (IPConnection *  connection,
                      struct mbuf *   m)
{
    bool discard = true;

    PULLUP (m, MBCTL.count_bytes (&MBCTL, m));
    unsigned char *  data = mtod (m, unsigned char *);

    // If protocol isn't IP then give up straight away
    if (ntohs ( ((header *) data)->ar_pro) != ETHERTYPE_IP)
    {
        return 0;
    }

    if (!got_spa)
    {
        // Don't know our own interface's IP address yet
        if (get_if_addr ((struct sockaddr *) &spa) || spa.sin_family != PF_INET)
        {
            dprintf (("", "rejecting PF %d\n", spa.sin_family));
            return 0;
        }
        got_spa = true;
        dprintf (("", "spa %s\n", inet_ntoa (spa.sin_addr)));
    }

    context *  atmarp = new context ();
    if (!atmarp)
    {
        return -1;
    }

    memcpy (&atmarp->header, data, sizeof (header));

    data += sizeof (header);
    atmarp->data = data;

    atmarp->connection = connection;

    set_vardata_ptr (atmarp->sha, data, M_TL_Length (atmarp->header.ar_shtl));
    set_vardata_ptr (atmarp->ssa, data, M_TL_Length (atmarp->header.ar_sstl));
    set_vardata_ptr (atmarp->spa, data, atmarp->header.ar_spln);
    set_vardata_ptr (atmarp->tha, data, M_TL_Length (atmarp->header.ar_thtl));
    set_vardata_ptr (atmarp->tsa, data, M_TL_Length (atmarp->header.ar_tstl));
    set_vardata_ptr (atmarp->tpa, data, atmarp->header.ar_tpln);

    switch (ntohs (atmarp->header.ar_op))
    {
        case ATMARP_Request:
            break;

        case ATMARP_Reply:
            break;

        case InATMARP_Request:
            discard = false;
            callx_add_callback (Callback, atmarp);
            break;

        case InATMARP_Reply:
            break;

        case ATMARP_NAK:
            break;

        default:
            break;
    }

    if (discard)
    {
        delete atmarp;
    }

    return 0;
}




_kernel_oserror *  ATMARP::Callback (_kernel_swi_regs *  r,
                                     void *              pw,
                                     void *              handle)
{
    M_unused (r);
    M_unused (pw);

    context *  atmarp = (context *) handle;

    atmarp->atmarp->InATMARPRequest (atmarp);
    free (atmarp);

    return 0;
}




void  ATMARP::InATMARPRequest (context *  request)
{
    // Only reply to requests matching our ATM address
    if (memcmp (request->tha,
                NIC::GetNIC()->GetUNIAddr(),
                M_TL_Length (request->header.ar_thtl)) == 0)
    {
        InATMARPReply (request);
    }
}




void  ATMARP::InATMARPReply (context *  request)
{
    size_t  reply_size = sizeof (header);

    size_t  shl = M_TL_Length (request->header.ar_shtl);
    size_t  ssl = M_TL_Length (request->header.ar_sstl);
    size_t  thl = M_TL_Length (request->header.ar_thtl);
    size_t  tsl = M_TL_Length (request->header.ar_tstl);

    reply_size += shl;
    reply_size += ssl;
    reply_size += request->header.ar_spln;
    reply_size += thl;
    reply_size += tsl;
    reply_size += sizeof (struct in_addr);

    struct mbuf *  m = ALLOC_S (reply_size, 0);
    if (m)
    {
        header *  reply = mtod (m, header *);
        memcpy (reply, &request->header, sizeof (header));
        reply->ar_op = htons (InATMARP_Reply);

        unsigned char *  reply_data = (unsigned char *) (reply + 1);

        write_vardata (reply_data, request->tha, thl);
        write_vardata (reply_data, request->tsa, tsl);
        write_vardata (reply_data,
                       (void *) &spa.sin_addr,
                       sizeof (struct in_addr));
        write_vardata (reply_data, request->sha, shl);
        write_vardata (reply_data, request->ssa, ssl);
        write_vardata (reply_data, request->spa, request->header.ar_spln);

        request->connection->TxMBufChain (ETHERTYPE_ARP, m, true);
    }
}




int  ATMARP::get_if_addr (struct sockaddr *  if_addr)
{
    int           s;
    struct ifreq  ifr;
    char          ifr_name[4];

    // assume only one unit for now
    s = socket (PF_INET, SOCK_DGRAM, 0);
    if (s >= 0)
    {
        (void) sprintf (ifr_name, "ap%d", unit);
        (void) strncpy (ifr.ifr_name, ifr_name, sizeof (ifr.ifr_name));
        if (socketioctl (s, SIOCGIFADDR, &ifr) >= 0)
        {
            memcpy (if_addr, &ifr.ifr_addr, ifr.ifr_addr.sa_len);
        }

        (void) socketclose (s);
        return 0;
    }

    return  1;
}




void  ATMARP::set_vardata_ptr (unsigned char *&  ptr,
                               unsigned char *&  base,
                               const size_t      size)
{
    if (size > 0)
    {
        ptr = base;
        base += size;
    }
    else
    {
        ptr = 0;
    }
}



void  ATMARP::write_vardata (unsigned char *&  dest,
                             void *            src,
                             const size_t      size)
{
    if (size > 0)
    {
        memcpy (dest, src, size);
        dest += size;
    }
}
