/* File:    nic.c++
   Purpose: Manage Network Interface Card
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-04-26: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include "kernel.h"
#include <stdio.h>
#include <string.h>
#include "swis.h"

//#include "sys/types.h"

// Misc
#include "callx/callx.h"
#include "DebugLib/debuglib.h"

// Local
#include "dcilane.h"
#include "dcisock.h"
#include "defs.h"
#include "command.h"
#include "connection.h"
#include "console.h"
#include "error.h"
extern "C"
{
    #include "header.h"
}
#include "module.h"
#include "nic.h"
#include "pnp.h"
#include "utils.h"
#include "boson.h"



// =============================================================================
// Constants definitions

#define NetPrefix_Cmd "getnext ilmi"
#define NetPrefix_OID "1.3.6.1.4.1.353.2.7.1.1.3"




// =============================================================================
// Class statics

NIC::NICListItem *  NIC::nic_list = 0;




// =============================================================================
// Declare function prototypes

extern "C"
{
    extern void asm_enable_podule_irqs (unsigned int);
    extern void asm_disable_podule_irqs (unsigned int);
}




// =============================================================================
// Class member function definitions

#if 0
int panther_happy(void)
{
    #define HAPPY_PANTHER     0xffff7c01
    // check NIC is happy by waiting for magick word to be echoed
    // do not use before init_panther() has been called, or the check will fail
    int temp;

    // it's probably best not to use this when the IRQ handler is running too
    boson_block_write (HAPPY_PANTHER); // write this to the echo service
    timeoutError = 0;
    temp = boson_block_read ();     // read it back

    if(timeoutError) return -1; // timed out? return error

    if(temp != HAPPY_PANTHER) return -1;
    // didn't get what we expected? return error

    return 1;
}
#endif




NIC *  NIC::GetNIC ()
{
    NIC *  nic = 0;

    for (NICListItem *  item = nic_list; item && item->next; item = item->next)
    {
    }

    if (item->nic)
    {
        nic = item->nic;
    }

    return nic;
}



void  NIC::DestroyAll ()
{
    NICListItem *  next = 0;

    for (NICListItem *  item = nic_list; item; item = next)
    {
        next = item->next;
        delete item->nic;
        delete item;
    }
}




void  NIC::ResetAll ()
{
    for (NICListItem *  item = nic_list; item; item = item->next)
    {
        item->nic->Reset();
    }
}




NIC::NIC (const int           slot,
          unsigned int        address,
          _kernel_oserror *&  os_error)
    : nvparams (slot),
      service_manager (0),
      connection_manager (0),
      sockets_if (0),
      lane_if (0),
      slot (slot),
      read_mac_addr (false),
      read_net_prefix (false),
      ticker_period (0),
      ticker_tally (0)
{
    int            error = 0;
    bool           first = (bool) (nic_list == 0);
    NICListItem *  item;

    os_error = 0;

    item = new NICListItem ();
    if (!item)
    {
        error = Error_ATM_NoMemory;
        goto internal_error;
    }

    hw_context.boson_address   = address;
    hw_context.workspace       = module_wsp;

    service_manager = ServiceManager::Create (*this, error);
    if (!service_manager)
    {
        if (!error)
        {
            error = Error_ATM_NoMemory;
        }
        goto internal_error;
    }
    hw_context.service_manager = service_manager;

    // Ensure NIC can't generate IRQs to start with.
    boson_disable_all_interrupts (address);
    os_error = boson_claim_interrupts (&hw_context, slot);
    if (os_error)
    {
        return;
    }

    boson_enable_interrupts (address);


    // Get UNI address - don't care about the result for now, can try again
    // later if it doesn't work.
    GetUNIAddr ();

    // Create network interfaces
    if (first)
    {
        // Only support one sockets service until we sort out the ATM specific
        // API to allow access to multiple NICs.

        connection_manager = new ConnectionManager ();
        if (!connection_manager)
        {
            error = Error_ATM_NoMemory;
            goto internal_error;
        }

        sockets_if = new ATM25SocketsDCIInterface (*this, error);
        if (!sockets_if)
        {
            error = Error_ATM_NoMemory;
            goto internal_error;
        }
    }

    lane_if = new ATM25LANEDCIInterface (*this, error);
    if (!lane_if)
    {
        error = Error_ATM_NoMemory;
        goto internal_error;
    }

    // Link ourselves to head of NIC list.
    item->nic = this;
    item->next = nic_list;
    nic_list = item;

    return;

internal_error:
    dprintf (("", "error %d\n", error));
    os_error = error_int_to_os (error);
}




NIC::~NIC ()
{
    boson_disable_all_interrupts (hw_context.boson_address);

    (void) boson_release_interrupts (&hw_context, slot);

    if (lane_if)
    {
        delete  lane_if;
    }

    if (sockets_if)
    {
        delete sockets_if;
    }

    if (connection_manager)
    {
        delete connection_manager;
    }

    if (service_manager)
    {
        delete (service_manager);
    }
}




ServiceManager &  NIC::GetServiceManager () const
{
    return *service_manager;
}




ConnectionManager &  NIC::GetConnectionManager () const
{
    return *connection_manager;
}



NVParams &  NIC::GetNVParams ()
{
    return nvparams;
}




ATM25SocketsDCIInterface &  NIC::GetSocketsIF () const
{
    return *sockets_if;
}




ATM25LANEDCIInterface &  NIC::GetLANEIF () const
{
    return *lane_if;
}




int  NIC::GetSlot () const
{
    return slot;
}




unsigned int  NIC::GetHardwareAddress () const
{
    return hw_context.boson_address;
}




void  NIC::Reset ()
{
    boson_disable_interrupts (hw_context.boson_address);
}




const unsigned char *  NIC::GetUNIAddr ()
{
    int  error;

    return GetUNIAddr (error);
}




const unsigned char *  NIC::GetUNIAddr (int &  error)
{
    error = 0;
    if (!read_mac_addr || !read_net_prefix)
    {
        const unsigned char *  net_prefix = GetNetPrefix (error);
        if (!error)
        {
            const unsigned char *  mac_addr = GetMACAddr (error);
            if (!error)
            {
                // Network prefix
                memcpy (&uni_addr[0], net_prefix, NSAPAddr_NetPrefix_Size);

                // End System Identifier
                memcpy (&uni_addr[NSAPAddr_NetPrefix_Size],
                        mac_addr,
                        ETHER_ADDR_LEN);

                // Selector byte
                uni_addr[NSAPAddr_Size - 1] = 0;
            }
        }
    }

    if (!error)
    {
        #ifdef DEBUGLIB
        for (int i = 0; i < sizeof (uni_addr) - 1; i++)
        {
            dprintf (("", "%02x.", uni_addr[i]));
        }
        dprintf (("", "%02x\n", uni_addr[i]));
        #endif
    }

    return &uni_addr[0];
}




const unsigned char *  NIC::GetNetPrefix ()
{
    int  error;

    return GetNetPrefix (error);
}




const unsigned char *  NIC::GetNetPrefix (int &  error)
{
    error = 0;
    if (!read_net_prefix)
    {
        error = ReadNetPrefix ();
        if (error)
        {
            return 0;
        }

        read_net_prefix = true;
    }

    return net_prefix;
}




const unsigned char *  NIC::GetMACAddr ()
{
    int  error;

    return GetMACAddr (error);
}




const unsigned char *  NIC::GetMACAddr (int &  error)
{
    error = 0;
    if (!read_mac_addr)
    {
        error = service_manager->GetCommandService().GetMAC (mac_addr);
        if (error)
        {
            return 0;
        }

        read_mac_addr = true;
    }

    return mac_addr;
}




int  NIC::ReadNetPrefix ()
{
    enum
    {
        NetPrefix_CmdLen = sizeof (NetPrefix_Cmd) - 1,
        NetPrefix_OIDLen = sizeof (NetPrefix_OID) - 1
    };

    int  error;

    Console *  console = new Console (*this, error);
    if (!console)
    {
        return Error_ATM_NoMemory;
    }
    else if (error)
    {
        delete console;
        return error;
    }

    // Query SNMP service on card to find network prefix

    // The network prefix table is indexed by atmfNetPrefixPort (an
    // integer) and atmfNetPrefixPrefix (see ATM Forum ILMI spec. for
    // details), so the reply we get back when querying the next object
    // after the table is the first entry in the table ie.
    // getnext ilmi 1.3.6.1.4.1.353.2.7.1.1.3.<port>.<prefix>

    char buffer[256];
    error = console->DoCommand (NetPrefix_Cmd " " NetPrefix_OID,
                                buffer,
                                sizeof (buffer));
    if (!error)
    {
        dprintf (("", "%s\n", buffer));

        error = Error_ATM_NetPrefixRead;
        char *  s = buffer;
        bool  valid_reply = false;

        if (strncmp (s, NetPrefix_Cmd, NetPrefix_CmdLen) == 0)
        {
            s += NetPrefix_CmdLen;
            dprintf (("", "%s\n", s));
            if (*s++ == ' ')
            {
                if (strncmp (s, NetPrefix_OID, NetPrefix_OIDLen) == 0)
                {
                    s += NetPrefix_OIDLen;
                    dprintf (("", "%s\n", s));
                    if (*s++ == ' ')
                    {
                        valid_reply = true;
                    }
                }
            }
        }

        if (valid_reply)
        {
            // Skip past the part of the OID we already know (because
            // we requested it) to the table index.
            if (strncmp (s, NetPrefix_OID, NetPrefix_OIDLen) == 0)
            {
                s += NetPrefix_OIDLen;

                // s now points to the part of the OID which is the index
                // of the next (first and only, we're replying on!!) element
                // in the netprefix table

                // skip over port (read past 2 '.' characters)
                int  skip = 2;
                do
                {
                    s = strchr (s, '.');
                    if (s)
                    {
                        ++s;
                        --skip;
                    }
                }
                while (s && skip);

                if (s)
                {
                    // rest of reply should now be if form of
                    // <var length netprefix> <type> <value>
                    //
                    // where we're expecting type to be 'i' for integer and
                    // value to be 0 or 1 depending on whether the network
                    // prefix is valid yet
                    char *  type = strchr (s, ' ') + 1;

                    bool  valid = (bool) strtol (strchr (type, ' '), 0, 0);
                    dprintf (("", "type %c, valid = %d\n",
                              *type, valid));
                    if (*type == 'i' && valid)
                    {
                        // The network prefix is a variable length
                        // string, so the first octet specified the
                        // length of network prefix that follows.
                        // Don't care - just keep reading until the
                        // end
                        s = strchr (s, '.');
                        if (s)
                        {
                            sep_str_to_num (s + 1, net_prefix, 0);
                        }
                        error = 0;
                    }
                    else
                    {
                        error = Error_ATM_NetPrefixRead;
                    }
                }
                else
                {
                    dprintf (("", "reply parse error\n"));
                }
            }
            else
            {
                dprintf (("", "OID mismatch\n"));
            }
        }
        else
        {
            dprintf (("", "invalid SNMP response\n"));
        }
    }

    delete console;

    return error;
}




void  NIC::DisplayInfo ()
{
    char  mac_addr[ETHER_ADDR_LEN * 3] = "unknown";
    num_to_sep_str (GetMACAddr (), ETHER_ADDR_LEN, mac_addr, ':');
    printf ("MAC address: %s\n", mac_addr);

    char  uni_addr[NSAPAddr_Size * 3] = "unknown";
    num_to_sep_str (GetUNIAddr(), NSAPAddr_Size, uni_addr, '.');
    printf ("UNI address: %s\n", uni_addr);

    if (nvparams.ReadMultiProtoEnc())
    {
        printf ("IP encapsulation: VC\n\n");
    }
    else
    {
        printf ("IP encapsulation: LLC_SNAP\n\n");
    }

    printf ("Unused circuit check interval: ");
    if (ticker_period)
    {
        printf("%d cS  done %d checks\n", ticker_period, ticker_tally);
    }
    else
    {
        printf("off\n");
    }

    #if 0
    printf ("IP service handle: %d, ECHO service handle: %d, "
            "MPEG service handle:%d\n",
            ip_listen,
            ip_echo,
            mpeg_listen);
    #endif

    printf ("Free socket handles: %d Busy socket handles: %d\n\n",
            service_manager->GetNumberFree(),
            service_manager->GetNumberInUse());

    printf ("IP frames rx: %d (discards: %d, errors: %d, pkts dropped: %d) "
            "tx: %d\n",
            ip_rx, irq_rx_discards, irq_rx_errors,
            irq_ip_pkts_dropped, ip_tx);

    printf ("MPEG frames rx: %d (discards: %d + %d + %d= %d) tx: %d\n\n",
            mpeg_rx,
            mpeg_discards1,
            mpeg_discards2,
            mpeg_discards3,
            mpeg_discards1 + mpeg_discards2 + mpeg_discards3,
            mpeg_tx);

    printf ("ARP: requests: %d (local: %d  discard: %d  bcast: %d)\n\n",
            arp_count,
            local_arp_count,
            discard_arp_count,
            bcast_arp_count);

    printf ("Callbacks: %d (startups: %d echo_acks: %d arps: %d)\n",
            callbs,
            callb_startups,
            callb_echos,
            callb_arps);

    printf ("\nIRQ packets: %d (Cmd: %d, Msg: %d)\n\n",
            boson_rx_pkts,
            boson_cmd_pkts,
            boson_msg_pkts);

    printf ("CloseREQs: %d, CloseACKs: %d, Errors: %d\n"
            "ConnectACKs: %d (refusals: %d, error: %d)\n"
            "ConnectREQs: %d (error: %d, refused: %d, acks: %d)\n"
            "Data: %d, Dataend: %d\n"
            "Errors: %d, Bogus packets: %d\n",
            irq_closes,
            irq_closeds,
            irq_errors,
            irq_connects,
            irq_refusals,
            irq_con_ack_errors,
            irq_connect_reqs,
            irq_con_req_errors,
            irq_con_refusals,
            irq_con_req_acks,
            irq_datas,
            irq_data_ends,
            irq_connection_errors,
            irq_bogus_pkts);

    printf ("IRQ word: %d, Packet HIWM: %d\n",
            irq_packets,
            irq_pkt_hiwm);

    printf ("\nATM Connections: %d, ATM Listens: %d\n",
            atm_connections,
            atm_listens);

    if (sockets_if)
    {
        sockets_if->DisplayInfo ();
    }

    if (lane_if)
    {
        lane_if->DisplayInfo ();
    }
}




/* -----------------------------------------------------------------------------
 */


int  NIC::ConfigurePVC (const bootconfig_action_t  action,
                        unsigned int *const        pvc)
{
    int  error = 0;

    if (action != BootConfig_Action_Sanitise && pvc == NULL)
    {
        error = Error_ATM_InvalidOption;
    }
    else
    {
        switch (action)
        {
            case BootConfig_Action_Sanitise:
                /* Nothing we can do */
                break;

            case BootConfig_Action_Read:
                *pvc = nvparams.ReadPVC ();
                break;

            case BootConfig_Action_Validate:
                /* Nothing we can do */
                break;

            case BootConfig_Action_Update:
                nvparams.WritePVC (*pvc);
                break;

            default:
                error = Error_ATM_InvalidOption;
                break;
        }
    }

    return error;
}




int  NIC::ConfigurePrimaryATM (const bootconfig_action_t  action,
                               unsigned char *            atm_addr)
{
    int  error = 0;

    if (action != BootConfig_Action_Sanitise && atm_addr == NULL)
    {
        error = Error_ATM_InvalidOption;
    }
    else
    {
        switch (action)
        {
            case BootConfig_Action_Sanitise:
                /* Nothing we can do */
                break;

            case BootConfig_Action_Read:
                nvparams.ReadPrimaryServer (atm_addr);
                break;

            case BootConfig_Action_Validate:
                /* Nothing we can do */
                break;

            case BootConfig_Action_Update:
                if (atm_addr == NULL)
                {
                    error = Error_ATM_InvalidOption;
                }
                else
                {
                    nvparams.WritePrimaryServer (atm_addr);
                }
                break;

            default:
                error = Error_ATM_InvalidOption;
                break;
        }
    }

    return error;
}




_kernel_oserror *  NIC::ConfigureARP (int  argc, char *  argv[])
{
    _kernel_oserror *  e = NULL;
    int                do_config;

    switch (argc)
    {
        case ConfigCommand_Status:
        {
            do_config = nvparams.ReadDynamicARP ();
            printf("ATM25arp\t%s\n", do_config ? "on" : "off");
            break;
        }

        case 0:
            e = M_gen_error (ErrorNumber_Syntax);
            /* return syntax error as message rather than just printing it */
            break;

        case 1:
            if (strcmp (argv[1], "on") == 0)
            {
                do_config = 1;
            }
            else if (strcmp (argv[1], "off") == 0)
            {
                do_config = 0;
            }
            else
            {
                do_config = -1;
            }

            if (do_config >= 0)
            {
                nvparams.WriteDynamicARP (do_config);
            }
            else
            {
                e = M_gen_error (ErrorNumber_Syntax);
            }
            break;

        default:
            e = configure_TOO_MANY_PARAMS;
            break;
    }

    return e;
}




_kernel_oserror *  NIC::ConfigureLLC (int  argc, char *  argv[])
{
    _kernel_oserror *  e = NULL;

    M_unused (argv);

    switch (argc)
    {
        case ConfigCommand_Status:
        {
            int is_vc = nvparams.ReadMultiProtoEnc ();
            printf ("ATM25llc\t%s\n", is_vc ? "off" : "on");
            break;
        }

        case 0:
            nvparams.WriteMultiProtoEnc (0);
            break;

        default:
            e = configure_TOO_MANY_PARAMS;
            break;
    }

    return e;
}




_kernel_oserror *  NIC::ConfigureVC (int  argc, char *  argv[])
{
    _kernel_oserror *  e = NULL;

    M_unused (argv);

    switch (argc)
    {
        case ConfigCommand_Status:
        {
            int is_vc = nvparams.ReadMultiProtoEnc ();
            printf ("ATM25vc\t%s\n", is_vc ? "on" : "off");
            break;
        }

        case 0:
            nvparams.WriteMultiProtoEnc (1);
            break;

        default:
            e = configure_TOO_MANY_PARAMS;
            break;
    }

    return e;
}




/******* atm_changeupstreambandwidth ***************************************

Purpose: Modifies/displays NVRAM holding rate pacing parameters

Inputs: char * argument string

            if ((int) args == 0)
            {*configure called with no parameters, return syntax string}

            if ((int) args == 1)
            {*status called, print value}

            else
            {args is a pointer to the argument(s) from the CLI}

Cf. PRMs, 1-215, "Information Word".  Specifically, bit 30.....the cmhg
veneer checks this bit when 'configure:' is defined in the CLI table entry,
and sorts everything out to the CLI handler.

Outputs: none

***************************************************************************/

_kernel_oserror *  NIC::ConfigureUpstreamBandwidth (int argc, char *  argv[])
{
    unsigned int  bandwidth;
    _kernel_oserror *   e = NULL;

    switch (argc)
    {
        case ConfigCommand_Status:
            bandwidth = nvparams.ReadUpstreamBandwidth ();
            printf ("ATM25bw\t");

            if (bandwidth == 0)
            {
                printf("unlimited\n");
            }

            else
            {
                printf("%d kb/s\n", bandwidth);
            }
            break;

        case 1:
            bandwidth = (unsigned int) strtoul (argv[1], NULL, 0);
            nvparams.WriteUpstreamBandwidth (bandwidth);
            break;

        default:
            e = configure_TOO_MANY_PARAMS;
            break;
    }

    return e;
}





/* This routine can be called periodically to close any unused connections */
_kernel_oserror *  NIC::TickerHandler (_kernel_swi_regs *  r,
                                       void *              pw,
                                       void *              handle)
{
    M_unused (r);
    M_unused (pw);
    M_unused (handle);

    ((NIC *) handle)->CloseUnusedCircuits ();
    return 0;
}



void  NIC::CloseUnusedCircuits ()
{
    ticker_tally++;
    connection_manager->CloseUnused ();
}




void  NIC::SetCircuitWatchInterval (int  interval)
{
    // Kill the timer if it's already running
    if (ticker_period)
    {
        callx_remove_callevery (TickerHandler, this);
    }

    if (interval)
    {
        ticker_period = interval * 100;
        callx_add_callevery (ticker_period, TickerHandler, this);
    }
}
