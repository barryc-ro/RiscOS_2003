/* File:    vc.c++
   Purpose: Virtual Circuit handling
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-03-23: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <stdio.h>
#include <string.h>

// Local
#include "atmlsock.h"
#include "defs.h"
#include "utils.h"
#include "vc.h"




// =============================================================================
// Class statics

const FLOWSPEC  SVC::default_qos =
{
    -1,
    -1,
    -1,
    -1,
    -1,
    BestEffortService,
    0,
    0
};




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
 */

VCReceiver::~VCReceiver ()
{
}




void  VCReceiver::StateChanged (const SocketService::State  state)
{
    M_unused (state);
}



int  VCReceiver::DataSize (unsigned int  data_size)
{
    M_unused (data_size);
    // Just ignore by default and assume that the Data method is going to
    // handle everything, so don't return an error.
    return 0;
}



int  VCReceiver::Data (unsigned int  data_size)
{
    M_unused (data_size);
    // Return non-success code so the data just gets discarded.
    return 1;
}




void  VCReceiver::DataEnd ()
{
}




void  VCReceiver::DataLength (unsigned int  length)
{
    M_unused (length);
}




void  VCReceiver::DataAbort ()
{
}




void  VCReceiver::Error (const int   error,
                         const bool  fatal)
{
    M_unused (error);

    if (fatal)
    {
        delete this;
    }
}




VC *  VC::Create (const ATML_SOCKADDR *const  atm_addr,
                  VCReceiver *                vc_receiver,
                  int &                       error)
{
    VC *  vc = 0;

    error = 0;

    switch (atm_addr->satm_family)
    {
        case AF_ATML_PVC:
        case AF_ATML_SNMP:
            vc = new PVC (&atm_addr->pvc,
                          vc_receiver,
                          error);
            break;

        case AF_ATML_ATM:
            vc = new SVC (&atm_addr->atm,
                          vc_receiver,
                          error);
            break;

        default:
            error = Error_ATM_UnsupportedAddr;
            break;
    }

    if (vc)
    {
        if (error)
        {
            delete vc;
            vc = 0;
        }
    }
    else
    {
        error = Error_ATM_NoMemory;
    }

    return vc;
}




VC::VC (VCReceiver *  vc_receiver,
        int &         error)
    : vc_receiver (vc_receiver),
      state (SocketService::Creating)
{
    socket = new SocketService (this, vc_receiver, error);
    if (socket)
    {
        if (error)
        {
            delete socket;
            socket = 0;
        }
    }
    else
    {
        error = Error_ATM_NoMemory;
    }
}




VC::~VC ()
{
    if (socket)
    {
        delete socket;
    }
}




void  VC::StateChanged (const SocketService::State  state)
{
    this->state = state;
}




void  VC::Close ()
{
    socket->Close ();
}




SocketService::State  VC::GetState ()
{
     return state;
}




int  VC::TxData (const unsigned int *  data,
                 int                   data_bytes)
{
     return socket->TxData (data, data_bytes);
}




int  VC::TxData (struct mbuf *  m,
                 int            data_bytes)
{
     return socket->TxData (m, data_bytes);
}




void  VC::ClosedByRemote ()
{
    //delete socket;
    //socket = 0;
}




PVC::PVC (const ATML_SOCKADDR_PVC *const  atm_addr,
          VCReceiver *                    vc_receiver,
          int &                           error)
    : VC (vc_receiver, error),
      atm_addr (*atm_addr)
{
    if (!error)
    {
        socket->Attach ();
    }
}




void  PVC::Connect ()
{
    switch (socket->GetState())
    {
        case SocketService::Exists:
        case SocketService::Closed:
            socket->TxBind (&atm_addr);
            break;

        default:
            break;
    }
}




int  PVC::GetAddressFamily ()
{
    return atm_addr.satm_family;
}




const ATML_SOCKADDR *  PVC::GetATMAddr ()
{
    return (const ATML_SOCKADDR *) &atm_addr;
}




const FLOWSPEC *  PVC::GetTxQoS ()
{
    return 0;
}




const FLOWSPEC *  PVC::GetRxQoS ()
{
    return 0;
}




const char *  PVC::GetTextType ()
{
    return "PVC";
}




const char *  PVC::GetTextAddr ()
{
    static char  vci[10];

    sprintf (vci, "%d", atm_addr.satm_pvc);
    return (const char *) vci;
}




SVC::SVC (const ATML_SOCKADDR_ATM *const  atm_addr,
          VCReceiver *                    vc_receiver,
          int &                           error)
    : VC (vc_receiver, error),
      atm_addr (*atm_addr)
{
    if (!error)
    {
        SetTxQoS (&default_qos);
        SetRxQoS (&default_qos);
        socket->Attach ();
    }
}




void  SVC::Connect ()
{
    switch (socket->GetState())
    {
        case SocketService::Exists:
        case SocketService::Closed:
            socket->TxConnect (&atm_addr,
                              sizeof (FLOWSPEC),
                              &tx_qos,
                              sizeof (FLOWSPEC),
                              &rx_qos);
            break;

        default:
            break;
    }
}



void  SVC::Listen ()
{
    socket->TxListen (&atm_addr);
}




int  SVC::GetAddressFamily ()
{
    return atm_addr.satm_family;
}




void  SVC::SetAddress (const ATML_SOCKADDR_ATM *const  atm_addr)
{
    this->atm_addr = *atm_addr;
}




void  SVC::SetTxQoS (const FLOWSPEC *const  tx_qos)
{
    this->tx_qos = *tx_qos;
}




void  SVC::SetRxQoS (const FLOWSPEC *const  rx_qos)
{
    this->rx_qos = *rx_qos;
}




const ATML_SOCKADDR *  SVC::GetATMAddr ()
{
    return (const ATML_SOCKADDR *) &atm_addr;
}




const FLOWSPEC *  SVC::GetTxQoS ()
{
    return &tx_qos;
}




const FLOWSPEC *  SVC::GetRxQoS ()
{
    return &rx_qos;
}





const char *  SVC::GetTextType ()
{
    return "SVC";
}




const char *  SVC::GetTextAddr ()
{
    static char  nsap_addr[60];
    num_to_sep_str ((unsigned char *) atm_addr.satm_number.contents,
                    NSAPAddr_Size,
                    nsap_addr,
                    '.');
    return (const char *) nsap_addr;
}
