/* File:    .c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-03-: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

#include "DebugLib/DebugLib.h"

/* TCPIPLibs */
extern "C"
{
    #include "sys/types.h"
    #include "sys/errno.h"
    #include "inetlib.h"
    #include "netinet/in.h"
    #include "sys/socket.h"
    #include "net/if.h"
    #include "netinet/if_ether.h"
    #include "sys/dcistructs.h"
    #include "sys/mbuf.h"
}

// Local
#include "address.h"
#include "dcisock.h"
#include "defs.h"
#include "ip.h"
#include "nic.h"
#include "socket.h"
#include "utils.h"




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
 */

Connection *  IPConnection::CheckConflict (
                    const ATML_SOCKADDR *const  atm_addr,
                    const Connection::Service   service,
                    const Connection::Origin    origin,
                    int &                       error)
{
    // Due to the fact that the only piece of information we get from the DCI4
    // transmit interface that we can use to distinguish differerent connections
    // is the destination MAC address, we can't have more than one connection
    // to a given ATM end station.  [The fact that we 'fake' a MAC address for
    // the destination when using PVC means that we can allow a single PVC
    // and SVC, but when we use ATMARP this would break, so it shouldn't be
    // done.
    //
    // There are certain rules that we must follow to determine whether we
    // create a new connection.
    // Connections originated by us:
    // * If there is not currently a connection to the given end station then
    //   create the connection.
    // * If there is already a connection to the given address and the new
    //   address (*all* fields of the address structure) and service type are
    //   the same, then return the handle to the existing connection.  Otherwise
    //   return an error to indicate that the connection cannot be created.
    //
    // Connections originated by a remote host:
    // We can have any number of these, assuming that they are only used to
    // receive data.  When transmitting data, a connection originated by us
    // will be used in preference to any connections created by a remote host.
    // If there are no connections originated by us then the first 'listening'
    // connection will be used.

    Connection *  connection = 0;

    error = 0;
    if (origin == Connection::Local &&
        this->origin == Connection::Local &&
        (service == Service_IP_LLC || service == Service_IP_VC) &&
        compare_atm_addresses (vc->GetATMAddr(), atm_addr))
    {
        if (service == this->service)
        {
            connection = this;
        }
        else
        {
            dprintf (("", "forbidding connection\n"));
            error = Error_ATM_DuplicateConnection;
        }
    }

    return connection;
}




IPConnection *  IPConnection::Create (NIC &                 nic,
                                      const ATML_SOCKADDR *const  atm_addr,
                                      const Connection::Service   service,
                                      const Connection::Origin    origin,
                                      int &                       error)
{
    error = 0;

    // Force blli to required values for IPOA
    ((ATML_SOCKADDR *) atm_addr)->atm.blli_len = 1;
    ((ATML_SOCKADDR *) atm_addr)->atm.blli[0] = 0xcc;

    IPConnection *  connection =
        new IPConnection (nic, atm_addr, service, origin, error);
    if (connection)
    {
        if (error)
        {
            delete connection;
            connection = 0;
        }
    }
    else
    {
        error = Error_ATM_NoMemory;
    }

    return connection;
}




IPConnection::IPConnection (NIC &                       nic,
                            const ATML_SOCKADDR *const  atm_addr,
                            const Connection::Service   service,
                            const Connection::Origin    origin,
                            int &                       error)
    : Connection (nic, atm_addr, service, origin, error),
      dci_if (nic.GetSocketsIF()),
      ip_map (dci_if.GetIPMap()),
      mac_map (dci_if.GetMACMap()),
      MBCTL (dci_if.GetMBCTL ()),
      mac_mapping (0),
      remote_mac_addr (0),
      m (0),
      m_next (&m),
      rx_packet_size (0),
      data_count (0),
      data_lost (0)
{
    if (!error)
    {
        if (service == Connection::Service_IP_LLC)
        {
            llc = true;

            unsigned char *  p = (unsigned char *) llc_snap_hdr;

            // LLC value indicating SNAP header is present*/
            *p++ = 0xAA;
            *p++ = 0xAA;
            *p++ = 0x03;

            // SNAP header
            *p++ = 0;
            *p++ = 0;
            *p++ = 0;

            // Last two bytes change on a per-frame basis

            // Allocate an unsafe mbuf for the LLC/SNAP header and set
            // it to point to our own data.
            llc_snap_mbuf = ALLOC_U (sizeof (llc_snap_hdr),
                                     llc_snap_hdr);
        }
        else
        {
            llc = false;
        }

        if (origin == Connection::Local)
        {
            // Extract MAC address from ATM address
            remote_mac_addr = ip_map.MACFromATM (atm_addr);
            if (remote_mac_addr)
            {
                error = mac_map.Add (remote_mac_addr, this, 0);
            }
            else
            {
                error = Error_ATM_NoMAC;
            }
        }
    }
}




IPConnection::~IPConnection ()
{
    const unsigned char *  mac_addr = ip_map.MACFromATM (vc->GetATMAddr());
    if (mac_addr)
    {
        mac_map.Remove (mac_addr, this);

        if (mac_map.Count (mac_addr) == 0)
        {
            /* No other connections to this address, so can remove
             * IP<->ATM address mapping for this address.
             */
            ip_map.Remove (mac_addr);
        }
    }

    if (llc_snap_mbuf)
    {
        llc_snap_mbuf->m_next = 0;
        m_free (llc_snap_mbuf);
    }

    dci_if.FlushCachedConnection (this);
}




void  IPConnection::Close ()
{
    if (--usage == 0)
    {
        Connection::Close ();
    }
}




int  IPConnection::Listen ()
{
    int  error;

    // Pre-allocate MAC mapping to avoid having to try to allocate memory
    // in the interrupt handler (difficult to sort out at that point if it
    // fails).
    mac_mapping = mac_map.Alloc ();
    if (mac_mapping)
    {
        error = Connection::Listen ();
    }
    else
    {
        error = Error_ATM_NoMemory;
    }

    return error;
}




void  IPConnection::StateChanged (const SocketService::State  state)
{
    if (state == SocketService::Connected && GetOrigin() == Remote)
    {
        // Get the MAC address of the calling party
        remote_mac_addr = ip_map.MACFromATM (vc->GetATMAddr ());

        if (mac_map.Find (remote_mac_addr) == 0)
        {
            (void) mac_map.Add (remote_mac_addr, this, mac_mapping);
        }
    }

    Connection::StateChanged (state);
}




int  IPConnection::DataSize (unsigned int  data_size)
{
    int  rc = 0;

    dprintf (("", "allocating %d byte mbuf chain\n", data_size));
    *m_next = ALLOC (data_size, NULL);
    if (*m_next)
    {
        (*m_next)->m_type = MT_DATA;
        (*m_next)->m_len = 0;
    }
    else
    {
        rc = -1;
    }

    return rc;
}




int  IPConnection::Data (unsigned int  data_size)
{
    int             bytes;

    data_count += data_size;
    rx_packet_size += data_size;

    while (data_size)
    {
        dprintf (("", "%d bytes remaining\n", data_size));

        // Work out how much data we can transfer in one go - either all the
        // data will fill into current mbuf, or just fill the current mbuf.
        dprintf (("", "data_size=%d, mbuf space=%d\n",
                  data_size,  (*m_next)->m_inilen - (*m_next)->m_len));
        bytes = M_min (data_size, (*m_next)->m_inilen - (*m_next)->m_len);

        dprintf (("", "copying %d bytes\n", bytes));
        boson_rx_data (boson_address,
                       mtod (*m_next, unsigned char *) + (*m_next)->m_len,
                       bytes);
        (*m_next)->m_len += bytes;

        // If we've filled the current mbuf then move on to the next
        if ( (*m_next)->m_len == (*m_next)->m_inilen)
        {
            dprintf (("", "advancing to next mbuf\n"));
            m_next = &( (*m_next)->m_next);
            if (*m_next)
            {
                (*m_next)->m_type = MT_DATA;
                (*m_next)->m_len = 0;
            }
        }

        data_size -= bytes;
    }

    return 0;
}




void  IPConnection::DataEnd ()
{
    u_short  frame_type;

    if (llc)
    {
        // Extract frame type from LLC header and remove the entire
        // header from the start of the data so we're just left with
        // the IP packet.
        unsigned char *  llc_hdr;
        PULLUP (m, LLC_HDR_SIZE);
        llc_hdr = mtod (m, unsigned char *);
        frame_type = (llc_hdr[6] << 8) | llc_hdr[7];
        TRIM (m, LLC_HDR_SIZE, NULL);
    }
    else
    {
        // VC multiplexing
        frame_type = ETHERTYPE_IP;
    }

    int  rc = dci_if.Receive (frame_type, remote_mac_addr, m, this);
    if (rc < 0)
    {
        DataAbort ();
    }
    else if (rc > 0)
    {
        m_freem (m);
    }

    ++dci_if.stats.st_rx_frames;
    m = 0;
    m_next = &m;
    rx_packet_size = 0;
}



void  IPConnection::DataLength (unsigned int  length)
{
    int  trim_length = (int) rx_packet_size - (int) length;

    TRIM (m, -trim_length, NULL);
    data_count -= trim_length;
}




void  IPConnection::DataAbort ()
{
    data_lost += MBCTL.count_bytes (&MBCTL, m);
    m_freem (m);
    m = 0;
    m_next = &m;
}




const char *  IPConnection::GetTextService ()
{
    if (llc)
    {
        return "IP/LLC";
    }
    else
    {
        return "IP/VC";
    }
}




// Safe for this routine to return mid-way without freeing mbufs
// as caller will free if we don't.

int  IPConnection::TxMBufChain (const u_short    frame_type,
                                struct mbuf *&   m0,
                                const bool       free_mbufs)
{
    struct mbuf *    m;

    if (vc->GetState () != SocketService::Connected)
    {
        vc->Connect ();

        unsigned int  end_t = MonotonicTime() + 10;
        while (vc->GetState() != SocketService::Connected &&
               MonotonicTime () < end_t)
        {
        }

        if (vc->GetState() != SocketService::Connected)
        {
             /* this connection is not yet established - drop the packet */
             dprintf (("", "can't transmit - not connected\n"));
             return INETERR_TXBLOCKED;
        }
    }

    if (llc)
    {
        dprintf (("", "inserting LLC/SNAP header\n"));

        ((unsigned char *) llc_snap_hdr)[6] = (frame_type >> 8) & 0xff;
        ((unsigned char *) llc_snap_hdr)[7] = frame_type & 0xff;
    }

    int  datalen;
    do
    {
        datalen = (MBCTL.count_bytes) (&MBCTL, m0);

        if (datalen > ATM_MTU)    // Too much? Dump it
        {
            dprintf (("", "ATM_MTU exceeded.\n"));
            return EMSGSIZE;
        }

        dprintf (("", "size: %d\n", datalen));

        if (llc)
        {
            llc_snap_mbuf->m_len = LLC_HDR_SIZE;
            llc_snap_mbuf->m_next = m0;
            m0 = llc_snap_mbuf;
            datalen += LLC_HDR_SIZE;
        }

        //ddump_mbuf (m0, datalen);

        if (vc->TxData (m0, datalen) < 0)
        {
            dprintf (("", "ran out of FIFO space!\n"));
            error = ENOBUFS;
            // Consider doing interrupt-driven write-out if not enough
            // space straight away?
        }
        else
        {
            dci_if.stats.st_tx_frames++;
            used = true;
        }

        if (llc)
        {
            // Unchain original, static LLC/SNAP header mbuf
            m0 = m0->m_next;
        }

        m  = m0;           // keep pointer to current mbuf chain
        m0 = m->m_list;    // point to next mbuf chain in list

        if (free_mbufs)
        {
            m_freem (m);
        }
    } while (m0);

    return 0;
}




struct in_addr  IPConnection::GetDestIPAddr ()
{
    struct in_addr  ip_addr;

    ip_addr.s_addr = ip_map.IPFromATM (vc->GetATMAddr ());
    return ip_addr;
}
