	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Proc
	GET	Hdr:HostFS
	GET	Hdr:NdrDebug
	GET	Hdr:DDVMacros
	GET	Hdr:Machine.<Machine>
	$GetIO

	GET	s.ddi_macros

	AREA	|C$$Code|, CODE, READONLY

	IMPORT	|boson_irq_entry|

	EXPORT	|boson_irq_pre_entry|
	EXPORT	|boson_rx_data|
	EXPORT	|boson_tx_data|
	EXPORT	|boson_junk_data|
	EXPORT	|boson_recover_fifo|
	[ DEBUG
	EXPORT	|boson_multi_status|
	]


	GBLL	debug
	GBLL	hostvdu

	; have kept this separate from DEBUG - the latter is for knocking out
	; or including entire routines
debug	SETL	false
hostvdu	SETL	true

xfer	SETD	true


DATA_FIRST		*	&8000
DATA_LAST		*	&10000
DATA_EXTEND		*	&20000

Base16			*	&c00000
Base32			*	&800000

BlockToARM		*	&280
CommitFromARM		*	&2c0
CommitToARM		*	&2c0
Status			*	&340

Status_TX384		*	&1
Status_RXBlock		*	&8
Status_RXNotEmpty	*	&10




; ------------------------------------------------------------------------------
; boson_irq_pre_entry
;
; Setup registers for the interrupt handler before entry into the CMHG veneer.
;
; On entry
; r12 = workspace pointer

|boson_irq_pre_entry|
	LDMIA		r12, { r0, r1, r12 }
	B		boson_irq_entry




; ------------------------------------------------------------------------------
; boson_rx_data
;
; Read data from the Boson FIFO.
; The destination address must be 32bit or 16bit aligned.
; If the destination address and number of bytes to read indicate that there
; is an 'incomplete' word at the end then the caller must allow for up to 3
; bytes of wastage.
;
; On entry
; r0 = base address of hardware
; r1 = address of buffer to store data in
; r2 = number of bytes to read

|boson_rx_data|
	TEQ	r2, #0
	MOVEQS	pc, lr

	STMDB	sp!, {r4-r11, lr}	; stash APCS stuff

	ADD	r0, r0, #Base32
	ADD	r0, r0, #CommitFromARM

	ANDS	r3, r1, #3
	BNE	Rx_Unaligned

	Debug	xfer, "aligned"
	Debug	xfer, "ragged bytes", r2
	ADD	r2, r2, #3
	MOV	r2, r2, LSR#2		; round up to word boundary
	Debug	xfer, "rounded words", r2

; Boson is only 2k and we'll already have read a header word,
; so this should be impossible.
;bit9	TST	r2, #512
;	BEQ	bit8
;	Read11	46
;	LDMIA	r0, {r3-r8}
;	STMIA	r1!, {r3-r8}

bit8	TST	r2, #256
	BEQ	bit7
	Debug	xfer, "256"
	Read11	23
	LDMIA	r0, {r3-r5}
	STMIA	r1!, {r3-r5}

bit7	TST	r2, #128
	BEQ	bit6
	Debug	xfer, "128"
	Read11	11
	LDMIA	r0, {r3-r9}
	STMIA	r1!, {r3-r9}

bit6	TST	r2, #64
	BEQ	bit5
	Debug	xfer, "64"
	Read11	5
	LDMIA	r0, {r3-r11}
	STMIA	r1!, {r3-r11}

bit5	TST	r2, #32
	BEQ	bit4
	Debug	xfer, "32"
	Read11	2
	LDMIA	r0, {r3-r12}
	STMIA	r1!, {r3-r12}

bit4	TST	r2, #16
	BEQ	bit3
	Debug	xfer, "16"
	Read11	1
	LDMIA	r0, {r3-r7}
	STMIA	r1!, {r3-r7}

bit3	TST	r2, #8
	BEQ	bit2
	Debug	xfer, "8"
	LDMIA	r0, {r3-r10}
	STMIA	r1!, {r3-r10}

bit2	TST	r2, #4
	BEQ	bit1
	Debug	xfer, "4"
	LDMIA	r0, {r3-r6}
	STMIA	r1!, {r3-r6}

bit1	TST	r2, #2
	BEQ	bit0
	Debug	xfer, "2"
	LDMIA	r0, {r3, r4}
	STMIA	r1!, {r3, r4}

bit0	TST	r2, #1
	DebugIf	NE, xfer, "1"
	LDRNE	r3, [r0]
	STRNE	r3, [r1]!

	LDMIA	sp!, {r4-r11, pc}^

Rx_Unaligned
	; Read the first word from the Boson
	BIC	r1, r1, #3		; round dest address down to word boundary
	LDR	lr, [r0]
	CMP	r3, #2			; check precice alignment
	BGT	Rx_OneByte		; 1 leading byte
	BEQ	Rx_TwoBytes		; 2 leading bytes

	; 3 leading bytes
Rx_ThreeBytes
	Debug	xfer, "3 initial"
	RxUnaligned	3
	LDMIA	sp!, {r4-r11, pc}^

Rx_TwoBytes
	Debug	xfer, "2 initial"
	RxUnaligned	2
	LDMIA	sp!, {r4-r11, pc}^

Rx_OneByte
	Debug	xfer, "1 initial"
	RxUnaligned	1
	LDMIA	sp!, {r4-r11, pc}^




; ------------------------------------------------------------------------------
; boson_junk_data
;
; Junk data from the Boson FIFO.
;
; Code for junking blocks is similar to reading, but happily faster, because we
; don't need to store anything, just get it out of the FIFO.  As an additional
; bonus, we only have 2 args, so we get an extra register to use in the block
; move ops.
;
; So we have:
;             23 instruction pre/post-amble (2 MemOps)
;             91 instructions for special case transfer (all MemOps)
;              9 instructions for special case branching
;            ---
;            123 instructions (93 MemOps)
;           =492 bytes of code
;
; Worst case (all bits in r2 set, ie junk the entire FIFO, heaven forbid) we
; execute 131 instructions (93 MemOps, 18 branches, +arithemetic).
;
; On entry
; r0 = base address of hardware
; r1 = number of bytes to junk

|boson_junk_data|
	STMDB	sp!, {r4-r11, lr}	; stash APCS stuff

	ADD	r0, r0, #Base32
	ADD	r0, r0, #CommitFromARM

	ADD	r2, r1, #3
	MOV	r2, r2, LSR#2		; round up to word boundary

jbit9	TST	r2, #512
	BEQ	jbit8
	Junk12	42
	LDMIA	r0, {r3-r10}

jbit8	TST	r2, #256
	BEQ	jbit7
	Junk12	21
	LDMIA	r0, {r3-r6}

jbit7	TST	r2, #128
	BEQ	jbit6
	Junk12	10
	LDMIA	r0, {r3-r10}

jbit6	TST	r2, #64
	BEQ	jbit5
	Junk12	5
	LDMIA	r0, {r3-r6}

jbit5	TST	r2, #32
	BEQ	jbit4
	Junk12	2
	LDMIA	r0, {r3-r10}

jbit4	TST	r2, #16
	BEQ	jbit3
	Junk12	1
	LDMIA	r0, {r3-r6}

jbit3	TST	r2, #8
	BEQ	jbit2
	LDMIA	r0, {r3-r10}

jbit2	TST	r2, #4
	BEQ	jbit1
	LDMIA	r0, {r3-r6}

jbit1	TST	r2, #2
	BEQ	jbit0
	LDMIA	r0, {r3, r4}

jbit0	TST	r2, #1
	LDRNE	r3, [r0]

	LDMIA	sp!, {r4-r11, pc}^




; ------------------------------------------------------------------------------
; boson_recover_fifo
;
; In the event that we have got out of step with the FIFO, this routine
; attempts to revert to a sane state. While there are words still in the
; FIFO, but no Blocks are registered, we junk the FIFO data. As soon as
; the FIFO is empty, or a Block appears, we stop.
;
; On entry
; r0 = base address of hardware

|boson_recover_fifo|

	ADD	r2, r0, #Base16
	ADD	r2, r2, #Status

	ADD	r0, r0, #Base32
	ADD	r0, r0, #CommitFromARM

10	LDR	r1, [r2]		; get status register

	; mask out the 2 bits we want
	AND	r1, r1, #(Status_RXBlock:OR:Status_RXNotEmpty)

	; ensure a new block hasn't arrived
	TEQ	r1, #Status_RXNotEmpty
	MOVNE	pc, lr
	LDR	r1, [r0]		; junk word
	B	%BT10




; ------------------------------------------------------------------------------
; boson_tx_data
;
; Write data from memory to the Boson FIFO.
;
; If the source address and amount of data to be written are such that there is
; an incomplete word at the end of data, then the caller must allow for up to 3
; bytes wastage.
;
; On entry
; r0 = base address of hardware
; r1 = source address of data in memory
; r2 = number of bytes to write
; r3 = last data in block? (0 = no)

|boson_tx_data|
	TEQ	r2, #0
	MOVEQS	pc, lr

	STMDB	sp!, {r4-r11, lr}	; stash APCS stuff

	ADD	r0, r0, #Base32
	ADD	r0, r0, #CommitToARM

	ANDS	r4, r1, #3		; check alignment
	BNE	Tx_Unaligned

	; Source address is word aligned

	Debug	xfer, "aligned"
	; Round down to whole number of words
	Debug	xfer, "length", r2
	SUB	r2, r2, #1
	BIC	r2, r2, #3		; round down to whole word
	Debug	xfer, "rounded length", r2

	STMDB	sp!, {r3}

	; Try 256 bytes
	SUBS	r2, r2, #256
	BMI	%F10
1	LDMIA	r1!, {r3-r12, lr}
	Debug	xfer, "256"
	STMIA	r0, {r3-r12, lr}
	LDMIA	r1!, {r3-r12, lr}
	STMIA	r0, {r3-r12, lr}
	LDMIA	r1!, {r3-r12, lr}
	STMIA	r0, {r3-r12, lr}
	LDMIA	r1!, {r3-r12, lr}
	STMIA	r0, {r3-r12, lr}
	LDMIA	r1!, {r3-r12, lr}
	STMIA	r0, {r3-r12, lr}
	LDMIA	r1!, {r3-r11}
	STMIA	r0, {r3-r11}
	SUBS	r2, r2, #256
	BGE	%B1

	; Try 64 bytes
10	ADDS	r2, r2, #256-64
	BMI	%F20
11	LDMIA	r1!, {r3-r12, lr}
	Debug	xfer, "64"
	STMIA	r0, {r3-r12, lr}
	LDMIA	r1!, {r3-r7}
	STMIA	r0, {r3-r7}
	SUBS	r2, r2, #64
	BGE	%B11

	; Try 16 bytes
20	ADDS	r2, r2, #64-16
	BMI	%F30
21	LDMIA	r1!, {r3-r6}
	Debug	xfer, "16"
	STMIA	r0, {r3-r6}
	SUBS	r2, r2, #16
	BGE	%B21

	; Try 4 bytes
30	ADDS	r2, r2, #16-4
	BMI	%F40
31	LDR	r3, [r1], #4
	Debug	xfer, "4"
	STR	r3, [r0]
	SUBS	r2, r2, #4
	BGE	%B31

40	LDMIA	sp!, {r3}
	LDR	r4, [r1], #4
	CMP	r3, #0			; last data in block?
	DebugIf	NE, xfer, "last word block"
	STRNE	r4, [r0, #BlockToARM-CommitToARM]	; yes? use BlockToARM
	DebugIf	EQ, xfer, "last word commit"
	STREQ	r4, [r0]		; no? use CommitToARM as normal

	Debug	xfer, "finished"

	LDMIA	sp!, {r4-r11, pc}^

Tx_Unaligned
	BIC	r1, r1, #3		; round down to word boundary
	LDR	lr, [r1], #4		; read first word: 1-3 useful bytes
	CMP	r4, #2
	BGT	Tx_OneByte		; one leading byte
	BEQ	Tx_TwoBytes		; two leading bytes

	; three leading bytes
Tx_ThreeBytes
	Debug	xfer, "3 initial"
	TxUnaligned	1		; one byte offset
	LDMIA	sp!, {r4-r11, pc}^

Tx_TwoBytes
	Debug	xfer, "2 initial"
	TxUnaligned	2		; two byte offset
	LDMIA	sp!, {r4-r11, pc}^


Tx_OneByte
	Debug	xfer, "1 initial"
	TxUnaligned	3		; three byte offset
	LDMIA	sp!, {r4-r11, pc}^




; multi_status investigates weird goings-on with the status register
;
; On entry
; r0 = base address of hardware
; r1 = buffer to store results
; r2 = no. words to read

	[ DEBUG
|boson_multi_status|
	STMDB	sp!, {r4-r11, lr}
	MOV	lr, pc			;Hold current I_bit & F_bit &Mode
	SWI	XOS_EnterOS
	;Disable IRQs &FIRQs
	TEQP	pc, #I_bit+F_bit+SVC_mode

	ADD	r0, r0, #Status
multi_loop
	LDR	r3, [r0]
	STR	r3, [r1], #4
	SUBS	r2, r2, #1
	BNE	multi_loop
	TEQP	pc, lr			;Restore original I_bit & F_bit
	MOV	r0, r0			;And mode.
	LDMIA	sp!, {r4-r11, pc}^
	]

	[ debug
	InsertNDRDebugRoutines
	]

	LTORG

	END


