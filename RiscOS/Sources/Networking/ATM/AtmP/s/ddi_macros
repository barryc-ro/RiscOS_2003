; Macros which are used by the Boson FIFO data transfer routines


; DO_ELEVEN - reads blocks of 11 words from the FIFO address, and
;             stores with address update

	MACRO
$label	Read11	$n
$label
	LCLA	count
count	SETA	$n
	WHILE	count > 0

	LDMIA	r0, {r3-r12, lr}
	STMIA	r1!, {r3-r12, lr}

count	SETA	count-1
	WEND
	MEND




; Read12 - reads blocks of 12 words from the FIFO address, and
;             discards them

	MACRO
$label	Junk12	$n
$label
	LCLA	count
count	SETA	$n
	WHILE	count > 0

	LDMIA	r0, {r2-r12, lr}

count	SETA	count-1
	WEND
	MEND



; ------------------------------------------------------------------------------
; XferUnaligned
;
; Transfer data between hardware (always word access) and unaligned memory.
;
; On entry
;   r2 = number of bytes to write
; $src = register containing source address to read from
; $dst = rehister containing destination address to write to
; $num = number of valid bytes in the first source word
;
; The register parameter containing unaligned memory address should have
; writeback set. e.g. if transferring from memory to hardware, with halfword
; aligned memory address in r1 to hardware address in r0
;
; XferUnaligned r1!, r0, 2
;
; r3-r12, lr must be available as scratch registers for this macro to use

	MACRO
$label	XferUnaligned	$src, $swb = {FALSE}, $dst, $dwb = {FALSE}, $num

$label
	LCLA	ls		; number of bit to shift towards low-end by
	LCLA	hs		; number of bit to shift towards low-end by
	LCLS	m_src		; source register for multi-word reads
	LCLS	m_dst		; dest register for multi-word writes
	LCLA	src_inc		; post-increment for single word reads
	LCLA	dst_inc		; post-increment for multi word writes

ls	SETA	8 * (4 - $num)
hs	SETA	8 * $num

	[ $swb
m_src	SETS	"$src" :CC: "!"
src_inc	SETA	4
	|
m_src	SETS	"$src"
	]

	[ $dwb
m_dst	SETS	"$dst" :CC: "!"
dst_inc	SETA	4
	|
m_dst	SETS	"$dst"
	]

	; Increase number of bytes so partial words at end 'become' whole
	; words - don't round off though, because want to adjust at end
	; to get number of trailing bytes remaining.
	ADD	r2, r2, #3 - $num

	Debug	xfer, "remain", r2

	SUBS	r2, r2, #40		; at least 40 bytes left?
	BMI	%FT10			; no? try something less


	; Loop doing 40 bytes at a time.
	; There are currently $num useful bytes in lr.
0	MOV	r3, lr, LSR #ls
	Debug	xfer, "40"
	LDMIA	$m_src, {r4-r12, lr}
	ORR	r3, r3, r4, LSL #hs	; word 1
	MOV	r4, r4, LSR #ls
	ORR	r4, r4, r5, LSL #hs	; word 2
	MOV	r5, r5, LSR #ls
	ORR	r5, r5, r6, LSL #hs	; word 3
	MOV	r6, r6, LSR #ls
	ORR	r6, r6, r7, LSL #hs	; word 4
	MOV	r7, r7, LSR #ls
	ORR	r7, r7, r8, LSL #hs	; word 5
	MOV	r8, r8, LSR #ls
	ORR	r8, r8, r9, LSL #hs	; word 6
	MOV	r9, r9, LSR #ls
	ORR	r9, r9, r10, LSL #hs	; word 7
	MOV	r10, r10, LSR #ls
	ORR	r10, r10, r11, LSL #hs	; word 8
	MOV	r11, r11, LSR #ls
	ORR	r11, r11, r12, LSL #hs	; word 9
	MOV	r12, r12, LSR #ls
	ORR	r12, r12, lr, LSL #hs	; word 10
	STMIA	$m_dst, {r3 - r12}
	SUBS	r2, r2, #40		; at least 40 bytes left?
	BPL	%BT0			; yes? repeat loop

	Debug	xfer, "remain", r2

10	ADDS	r2, r2, #40-16		; at least 16 bytes left?
	BMI	%FT20			; no? try something less

	; Loop doing 16 bytes at a time.
11	MOV	r3, lr, LSR #ls		; first two bytes
	Debug	xfer, "16"
	LDMIA	$m_src, {r4-r6, lr}
	ORR	r3, r3, r4, LSL #hs	; word 1
	MOV	r4, r4, LSR #ls
	ORR	r4, r4, r5, LSL #hs	; word 2
	MOV	r5, r5, LSR #ls
	ORR	r5, r5, r6, LSL #hs	; word 3
	MOV	r6, r6, LSR #ls
	ORR	r6, r6, lr, LSL #hs	; word 4
	STMIA	$m_dst, {r3 - r6}
	SUBS	r2, r2, #16		; at least 16 bytes left?
	BPL	%BT11			; yes? repeat loop

	Debug	xfer, "remain", r2

	; Down to < 16 bytes
20	ADDS	r2, r2, #16 - 4		; at least 4 bytes left?
	BMI	%FT30			; finished

21	MOV	r3, lr, LSR #ls
	Debug	xfer, "4"
	LDR	lr, [$src], #src_inc
	ORR	r3, r3, lr, LSL #hs
	STR	r3, [$dst], #dst_inc
	SUBS	r2, r2, #4
	Debug	xfer, "remain", r2
	BPL	%BT21

	; On exit, lr contains unused trailing bytes, r2 contains number of trailing bytes
30	ADD	r2, r2, #1 + $num
	Debug	xfer, "remain", r2
	Debug	xfer, "finished"
	MEND

	MACRO
$label	TxUnaligned	$num

$label
	LCLA	ls
	LCLA	hs
ls	SETA	8 * (4 - $num)
hs	SETA	8 * $num

	Debug	xfer, "length", r2

	SUBS	r2, r2, #$num		; already read $num useful bytes
	BEQ	%FT0

	STMFD	sp!, {r3}
	XferUnaligned	r1, {TRUE}, r0, {FALSE}, $num	; now $num useful byte in first word
	LDMFD	sp!, {r3}

	CMP	r2, #0					; trailing bytes?
0	MOV	r2, lr, LSR #ls
	DebugIf	GT, xfer, "additional read for last word write"
	LDRGT	lr, [r1]
	ORRGT	r2, r2, lr, LSL #hs

	; Do we need special case for last word?
	CMP	r3, #0
	DebugIf	NE, xfer, "last word block"
	STRNE	r2, [r0, #BlockToARM-CommitToARM]
	DebugIf	EQ, xfer, "last word commit"
	STREQ	r2, [r0]

	MEND



	MACRO
$label	RxUnaligned	$num

$label
	LCLA	ls
	LCLA	hs
ls	SETA	8 * (4 - $num)
hs	SETA	8 * $num

	MOV	r3, lr, LSL #hs
	STR	r3, [r1], #4

	Debug	xfer, "length", r2

	SUBS	r2, r2, #$num		; written $num useful bytes
	BEQ	%FT0			; already done all writes

	XferUnaligned	r0, {FALSE}, r1, {TRUE}, $num	; now $num useful byte in first word

	; transfer any trailing bytes
	CMP	r2, #0
	MOVGT	lr, lr, LSR #ls
	STRGT	lr, [r1]

0
	MEND



	END
