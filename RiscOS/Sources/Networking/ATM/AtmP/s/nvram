; Ant's ARM code for manipulating non-volatile RAM
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	GET	Hdr:CMOS

	AREA	|C$$Code|, CODE, READONLY

	EXPORT	read_nvram_bit
	EXPORT	write_nvram_bit
	EXPORT	read_nvram_byte
	EXPORT	write_nvram_byte
	EXPORT	read_nvram_word
	EXPORT	write_nvram_word

; read byte from nvram and mask out relevant bit
; on entry, r0 = nvram location to read
;	    r1 = bit mask
; on exit,  r0 = result
read_nvram_bit
	STMDB	sp!, {r4-r11, lr}
	MOV	r3, r1			; preserve bit mask across swi
	MOV	r1, r0
	MOV	r0, #ReadCMOS
	SWI	XOS_Byte
	ANDS	r0, r2, r3
	MOVNE	r0, #1			; return result
	LDMIA	sp!, {r4-r11, pc}^

; read byte from nvram
; on entry, r0 = location to read
; on exit,  r0 = result
read_nvram_byte
	STMDB	sp!, {r4-r11, lr}
	MOV	r1, r0
	MOV	r0, #ReadCMOS
	SWI	XOS_Byte
	MOV	r0, r2
	LDMIA	sp!, {r4-r11, pc}^

; write bit to nvram
; on entry, r0 = location to write
;           r1 = bit value to write (1 or 0)
;           r2 = bitmask
write_nvram_bit
	STMDB	sp!, {r4-r11, lr}
	CMP	r1, #0
	MVNNE	r1, #0
	ANDNE	r1, r1, r2		; mask out relevant bit
	MOV	r3, r1
	MOV	r4, r2			; copy bitmask
	MOV	r1, r0
	MOV	r0, #ReadCMOS
	SWI	XOS_Byte
	BIC	r2, r2, r4		; clear relevant bit
	ORR	r2, r2, r3		; and mask in new value
	MOV	r0, #WriteCMOS
	SWI	XOS_Byte
	LDMIA	sp!, {r4-r11, pc}^

; write byte to nvram
; on enty, r0 = location to write
;          r1 = byte to write
write_nvram_byte
	STMDB	sp!, {r4-r11, lr}
	MOV	r2, r1
	MOV	r1, r0
	MOV	r0, #WriteCMOS
	SWI	XOS_Byte
	LDMIA	sp!, {r4-r11, pc}^

; read word from nvram
; on entry, r0 = base location to read
; on exit,  r0 = result
read_nvram_word
	STMDB	sp!, {r4-r11, lr}
	MOV	r3, #0			; partial result
	MOV	r4, #4			; byte count
	MOV	r1, r0
	MOV	r0, #ReadCMOS

read_nvram_word_loop
	SWI	XOS_Byte
	ADD	r1, r1, #1		; next nvram location
	MOV	r3, r3, ROR#8		; shift r3 up
	ORR	r3, r3, r2		; mask in latest byte
	SUBS	r4, r4, #1		; dec. byte count
	BNE	read_nvram_word_loop
	MOV	r0, r3, ROR#8
	LDMIA	sp!, {r4-r11, pc}^


; write word to nvram
; on enty, r0 = base location to write
;          r1 = word to write
write_nvram_word
	STMDB	sp!, {r4-r11, lr}
	MOV	r3, r1			; working reg.
	MOV	r4, #4			; byte count
	MOV	r1, r0
	MOV	r0, #WriteCMOS
write_nvram_word_loop
	AND	r2, r3, #&ff		; mask out bottom byte
	MOV	r3, r3, LSR#8		; rotate work reg.
	SWI	XOS_Byte
	ADD	r1, r1, #1		; move to next nvram location
	SUBS	r4, r4, #1
	BNE	write_nvram_word_loop
	LDMIA	sp!, {r4-r11, pc}^

	END


