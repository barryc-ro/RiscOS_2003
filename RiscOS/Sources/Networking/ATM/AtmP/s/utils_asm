	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Machine.<Machine>
	$GetIO

	AREA	|C$$Code|, CODE, READONLY

	EXPORT	|callproto|
	EXPORT	|status_changed|
	EXPORT	|enable_podule_irqs|
	EXPORT	|ensure_irqs_on|
	EXPORT	|ensure_irqs_off|
	EXPORT	|restore_irqs|

|callproto|
	MOV	R12, R3
	MOV	R15, R2

|status_changed|
	STMFD	sp!, {r0-r3, r12, lr}

	LDMIA	r12!, {r1-r3}
	MOV	r0, #0
	STR	r0, [r12], #4
	LDR	r12, [r12]

	MOV	lr, pc
	ADD	lr, lr, #return-.-4

	MOV	pc, r3

return
	LDMFD	sp!, {r0-r3, r12, lr}

	MOVS	pc, lr




; stuff to turn on podule IRQs.
; Used to enable type C memory cycles for our podule, but this does not appear
; to work, and SWI Podule_SetSpeed should be used from the C code anyway.
;
; On entry
; r0 = podule slot number

|enable_podule_irqs|
	STMDB	sp!, {lr}

	MOV	lr, pc			;Hold current I_bit & F_bit & Mode
	SWI	XOS_EnterOS

	;Disable IRQs & FIRQs
	TEQP	pc, #I_bit+F_bit+SVC_mode

	MOV	r0, #IOC		;whilst enabling Podule IRQs

	LDRB	r1, [r0, #IOCIRQMSKB]	;in IOC
	ORR	r1, r1, #podule_IRQ_bit
	STRB	r1, [r0, #IOCIRQMSKB]
	TEQP	pc, lr			;Restore original I_bit & F_bit
	NOP				;And mode.
	LDMIA	sp!, {pc}^

|ensure_irqs_on|
	AND	r0, lr, # I_bit		; irqs on, previous state in r0
	BICS	pc, lr, # I_bit

|ensure_irqs_off|
	AND	r0, lr, # I_bit		; irqs off, previous state in r0
	ORRS	pc, lr, # I_bit

|restore_irqs|
	BIC	lr, lr, # I_bit		; restore previous state from r0
	ORRS	pc, lr, r0

	END


