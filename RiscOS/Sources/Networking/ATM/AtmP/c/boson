/* File:    boson.c
   Purpose: Talk to the Boson ASIC.  Must be C becuase our C++ implementation
            doesn't support volatile.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-02: BAL
   Created.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stdio.h>
#include <string.h>
#include "swis.h"

/* Miscellaneous */
#include "DebugLib/DebugLib.h"
#include "Email/Common/bool.h"

/* Local */
#include "boson.h"
#include "defs.h"
#include "header.h"
#include "message.h"
#include "module.h"
#include "mpeg.h"
#include "utils.h"




/* =============================================================================
 * Constants definitions
 */

#ifdef DEBUG_TRAIL
enum
{
    MESSAGE_TRAIL_SIZE = 2048
};
#endif

enum
{
    DiscardMsg_MESSAGE = 1,
    FLUSH_FIFO
};

#define ACCESS_TIMEOUT 2

/* Addressing regions.  Requires 'address' to be an unsigned int holding the
 * base address of the expansion card.
 */
#define Base32       (0x800000 + boson_address)
#define Base16       (0xc00000 + boson_address)
#define BasePnP      (0x400000 + boson_address)
#define BaseCSR      (0x400000 + boson_address)    /* Control & Status Register */
#define BasePROM     (0x000000 + boson_address)

/* 32bit-mode raw addresses */
#define Boson_VersionAddr       ((volatile unsigned int *)(Base32 + 0x200))
#define Boson_FromARMAddr       ((volatile unsigned int *)(Base32 + 0x240))
#define Boson_ToARMAddr         ((volatile unsigned int *)(Base32 + 0x240))
#define Boson_BlockFromARMAddr  ((volatile unsigned int *)(Base32 + 0x280))
#define Boson_BlockToARMAddr    ((volatile unsigned int *)(Base32 + 0x280))
#define Boson_CommitFromARMAddr ((volatile unsigned int *)(Base32 + 0x2c0))
#define Boson_CommitToARMAddr   ((volatile unsigned int *)(Base32 + 0x2c0))

/* 16bit-mode raw addresses */
#define Boson_MaskedStatusAddr  ((volatile unsigned int *)(Base16 + 0x300))
#define Boson_StatusAddr        ((volatile unsigned int *)(Base16 + 0x340))
#define Boson_CommandAddr       ((volatile unsigned int *)(Base16 + 0x340))

/* Boson IRQ flag
 *
 * Defined by the EASI interface, not by the Panther card.
 *
 * These macros define the address of the register (for
 * OS_DeviceClaimVector) and also a macro to read it. NB: the IRQ bit in
 * this register is not latched, and may be changing as it is read!!!
 * Use Check_Boson_IRQ repeatedly until 2 reads are the same!
 */

#define Boson_IRQ       ((volatile unsigned char *)(BaseCSR))
#define Check_Boson_IRQ (*Boson_IRQ & 0x2)


#define BOSON_FIFO_SIZE 2048

/* BOSON status register bits */
enum
{
    Boson_Status_Tx384        = 0x0001,
    Boson_Status_Tx128        = 0x0002,
    Boson_Status_Tx16         = 0x0004,
    Boson_Status_RxBlock      = 0x0008,
    Boson_Status_NotEmpty     = 0x0010,
    Boson_Status_Alarm        = 0x0020,
    Boson_Status_Tx384Mask    = 0x0040,
    Boson_Status_Tx128Mask    = 0x0080,
    Boson_Status_Tx16Mask     = 0x0100,
    Boson_Status_RxBlockMask  = 0x0200,
    Boson_Status_NotEmptyMask = 0x0400,
    Boson_Status_AlarmMask    = 0x0800,
    Boson_Status_ReadTop16    = 0x1000,
    Boson_Status_WriteTop16   = 0x2000,
    Boson_Status_ToArmAlarm   = 0x4000
};


/* BOSON Command register bits */
enum
{
    Boson_Cmd_SetNotEmptyMask = 0x0410,
    Boson_Cmd_ClrNotEmptyMask = 0x0400,
    Boson_Cmd_SetRxBlockMask  = 0x0208,
    Boson_Cmd_ClrRxBlockMask  = 0x0200,
    Boson_Cmd_SetTX384Mask    = 0x0041,
    Boson_Cmd_ClrTX384Mask    = 0x0040,
    Boson_Cmd_SetTX128Mask    = 0x0082,
    Boson_Cmd_ClrTX128Mask    = 0x0080,
    Boson_Cmd_SetTX16Mask     = 0x0104,
    Boson_Cmd_ClrTX16Mask     = 0x0100,
    Boson_Cmd_ClrAll          = 0x0fc0  /* clear all interrupt masks */
};


/* BOSON Masked Status register bits */
enum
{
    Boson_MaskedStatus_NotEmpty = 0x0010
};




/* =============================================================================
 * Macro definitions
 */

/* BOSON read registers -- 32 bit mode for various FIFO regs */
#define r_Boson_Version          *Boson_VersionAddr
#define r_Boson_FromARM          *Boson_FromARMAddr
#define r_Boson_BlockFromARM     *Boson_BlockFromARMAddr
#define r_Boson_CommitFromARM    *Boson_CommitFromARMAddr

/* BOSON read registers -- 16 bit mode for various status regs */
#define r_Boson_MaskedStatus     *Boson_MaskedStatusAddr
#define r_Boson_Status           *Boson_StatusAddr

/* BOSON write registers - 32 bit mode for various FIFO regs */
#define w_Boson_ToARM(x)         *Boson_ToARMAddr       = (x)
#define w_Boson_BlockToARM(x)    *Boson_BlockToARMAddr  = (x)
#define w_Boson_CommitToARM(x)   *Boson_CommitToARMAddr = (x)

/* BOSON write registers -- 16 bit mode for various status/ctrl regs */
#define w_Boson_IRQMask(x)       *Boson_IRQMaskAddr     = ((x) & 0xffff)
#define w_Boson_Command(x)       *Boson_CommandAddr     = ((x) & 0xffff)
#define w_Boson_CommitToARM16(x) *Boson_CommitToARMAddr = ((x) & 0xffff)

/* some handy macros -- access the BOSON regs. in 16bit addressing mode */
#define Boson_RX_NotEmpty        (r_Boson_Status & Boson_Status_NotEmpty)
#define Boson_RX_Block           (r_Boson_Status & Boson_Status_RxBlock)
#define Boson_TX_384             (r_Boson_Status & Boson_Status_Tx384)
#define Boson_TX_128             (r_Boson_Status & Boson_Status_Tx128)
#define Boson_TX_16              (r_Boson_Status & Boson_Status_Tx16)




/* =============================================================================
 * Type definitions
 */

typedef struct
{
    NICMessage    msg;
    NICExtension  ext;
} message_trail;




/* =============================================================================
 * Global variable declarations
 */

/* int timeoutError = 0; */

int irq_closes = 0;
int irq_closeds = 0;
int irq_errors = 0;
int irq_connects = 0;
int irq_connect_reqs = 0;
int irq_data_lengths = 0;
int irq_data_aborts = 0;
int irq_data_ends = 0;
int irq_datas = 0;
int irq_refusals = 0;
int irq_packets = 0;
int irq_rx_discards = 0;
int irq_rx_errors = 0;
int irq_con_req_errors = 0;
int irq_con_ack_errors = 0;
int irq_con_req_acks = 0;
int irq_con_refusals = 0;
int irq_connection_errors = 0;
int irq_bogus_pkts = 0;
int irq_pkt_hiwm = 0;
int irq_buffer_recovers = 0;
int irq_ip_pkts_dropped = 0;

int boson_rx_pkts = 0;
int boson_cmd_pkts = 0;
int boson_msg_pkts = 0;

unsigned char    irq_buffer[BOSON_FIFO_SIZE];

#ifdef DEBUG_TRAIL
static message_trail    msg_trail[MESSAGE_TRAIL_SIZE];
static message_trail *  msg_trail_next = msg_trail;
static unsigned int     msg_trail_num = 0;
static unsigned int     msg_trail_lock = 0;
#endif




/* =============================================================================
 * Function prototype declarations
 */

/* This function is the interface to the C++ code */
extern MessageHandlerRC  ServiceManager_DespatchMessage (NICMessage    msg,
                                                         NICExtension  ext,
                                                         void *        service_manager);

#ifdef DEBUGLIB
static void  ddisplay_message_trail_entry (const message_trail *const  m);
#endif

/* Some assembler routines */
extern void enable_podule_irqs (unsigned int);
extern void boson_recover_fifo (unsigned int);

#ifdef DEBUG
extern void boson_multi_status (unsigned int,
                                unsigned int *,
                                unsigned int);
#endif

extern void  boson_irq_pre_entry (void);

static int boson_timed_write (volatile unsigned int *  boson_register,
                              unsigned int             boson_address,
                              unsigned int             word);

extern void boson_tx_data (unsigned int           boson_address,
                           const unsigned char *  data,
                           unsigned int           size,
                           bool                   last_data_in_block);




/* =============================================================================
 * Function definitions
 */

/* -----------------------------------------------------------------------------
 */




_kernel_oserror *  boson_irq_handler  (_kernel_swi_regs *  r,
                                       void *              pw)
{
    void *        service_manager = (void *) r->r[0];
    unsigned int  boson_address     = (unsigned int) r->r[1];
    NICMessage    msg;
    NICExtension  ext;
    int           irq_state;

    M_unused (pw);

    // Prevent the NIC from generating interrupts
    w_Boson_Command (Boson_Cmd_ClrRxBlockMask);    // mask out the NotEmpty bit

    // Enable system interrupts
    irq_state = ensure_irqs_on ();

    while (Boson_RX_Block)    /* IRQ triggered on RxBlock */
    {
        boson_rx_pkts++;

        msg.header = r_Boson_BlockFromARM; /* get msg header */

        if (msg.common.type == NIC_DataMessage)
        {
            if (msg.data.ext)
            {
                unsigned int  ext_attempts = 0;

                do
                {
                    /* read extension word */
                    ext.extension = r_Boson_CommitFromARM;
                    ++ext_attempts;
                }
                while (ext_attempts < 8 && ext.bits.reserved != 0);

                if (ext.bits.reserved != 0)
                {
                    continue; /* abort */
                }
            } /* endif data extend */
            else
            {
                ext.bits.size = msg.data.size;
            }

            irq_packets = msg.data.size;
            boson_msg_pkts++;
            if (msg.data.size > irq_pkt_hiwm)
            {
                irq_pkt_hiwm = msg.data.size;
            }
        }
        else
        {
            ext.bits.size = 0;
            boson_cmd_pkts++;
        }

        #ifdef DEBUG_TRAIL
        if (msg_trail_lock == 0)
        {
            msg_trail_next->msg = msg;
            if (msg.common.type == NIC_DataMessage && msg.data.ext)
            {
                msg_trail_next->ext = ext;
            }

            #ifdef DEBUGLIB
            ddisplay_message_trail_entry (msg_trail_next);
            #endif

            msg_trail_next++;
            msg_trail_num++;

            if (msg_trail_next >= msg_trail + MESSAGE_TRAIL_SIZE)
            {
                msg_trail_next = msg_trail;
            }
        }
        #endif

        /* Find out what service this handle is bound to (if it is even
         * bound at all.
         */
        switch (ServiceManager_DespatchMessage (msg, ext, service_manager))
        {
            case HandledMsg:
                break;

            case DiscardMsg:
                boson_junk_data (boson_address, msg.data.size);
                /* boson_rx_data (boson_address, irq_buffer, msg.data.size); */
                break;

            case FlushFIFO:
                irq_bogus_pkts++;
                dprintf (("", "FIFO recovery\n"));
                boson_recover_fifo (boson_address);
                irq_buffer_recovers++;
                break;

            default:
                break;
        }
    } /* endof FIFO RX Block loop */

    /* does MPEG system need feeding? */
    mpeg_check_feed ();

    #ifdef FIFO_RECOVER
    /* 1999-02-03: BAL
     * This strikes me as a dodgy thing to do - what guarantee is
     * there that valid new data will not arrive in the FIFO between
     * the RXBlock check at the top of the above while loop and the
     * RXNotEmpty check here?
     */
    if (Boson_RX_NotEmpty)
    {
        boson_recover_fifo (boson_address);
        irq_buffer_recovers++;
    }
    #endif

    restore_irqs (irq_state);

    // Allow the NIC to generate interrupts again
    w_Boson_Command (Boson_Cmd_SetRxBlockMask);

    return NULL;

} /* end of irq handler */




/* -----------------------------------------------------------------------------
   boson_block_write

   write word to BlockToARM register
   does FIFO freespace check and h/w timeout
 */

int  boson_block_write (unsigned int  boson_address,
                        unsigned int  word)
{
    return boson_timed_write (Boson_BlockToARMAddr, boson_address, word);
}




/* -----------------------------------------------------------------------------
   boson_commit_write

   write word to CommitToARM register
   does FIFO freespace check and h/w timeout
 */

int boson_commit_write (unsigned int  boson_address,
                        unsigned int  word)
{
    return boson_timed_write (Boson_CommitToARMAddr, boson_address, word);
}




/* -----------------------------------------------------------------------------
   boson_timed_write

   write word to a boson register
   does FIFO freespace check and h/w timeout
 */

static int boson_timed_write (volatile unsigned int *  boson_register,
                              unsigned int             boson_address,
                              unsigned int             word)
{
    int           free_words = 0;
    unsigned int  start_time;
    unsigned int  s;

    start_time = MonotonicTime();
    do
    {
        s = r_Boson_Status;

        if (s & Boson_Status_Tx384)
        {
            free_words = 384;
        }
        else if (s & Boson_Status_Tx128)
        {
            free_words = 128;
        }
        else if (s & Boson_Status_Tx16)
        {
            free_words = 16;
        }
        else if (MonotonicTime() - start_time > ACCESS_TIMEOUT)
        {
            dprintf (("", "Timeout error - no free words in to ARM fifo %08x.\n", s));
            return -1;
        }
    } while (free_words == 0);

    dprintf (("", "TX FIFO %d %08x\n", free_words * 4, s));
    *boson_register = word;
    return 0;
}




/* -----------------------------------------------------------------------------
   boson_block_read

   read word from BlockFromARM register
   does polling and timeout
 */
int  boson_block_read (unsigned int    boson_address,
                       unsigned int *  word)
{
    unsigned int  start_time;

    start_time = MonotonicTime();
    while (!Boson_RX_NotEmpty)
    {
        if (MonotonicTime() - start_time > ACCESS_TIMEOUT)
        {
            dprintf (("", "Timeout error on block read op\n"));
            return -1;
        }
    }

    *word = r_Boson_BlockFromARM;
    return 0;
}




/* Number of bytes free in FIFO */
int  boson_fifo_space (unsigned int  boson_address)
{
    unsigned int  s;

    for (;;)
    {
        s = r_Boson_Status;

        if (s & Boson_Status_Tx384)
        {
            return (384 * 4);
        }

        else if (s & Boson_Status_Tx128)
        {
            return (128 * 4);
        }

        else if (s & Boson_Status_Tx16)
        {
            return (16 * 4);
        }
    }
}




/* -----------------------------------------------------------------------------
   boson_tx_msg

   Send a packet of data to the Virata NIC.

   This does not behave as specified in the "Virata Link Hardware Interface"
   document due to a suspected bug in the Virata code.  The Virata
   documentation could also be clearer as to what messages to use in what
   circumstances.

   Firstly, we do not make use of the AS_DATA command at all.  This is for
   streaming data, where you don't know how much data is in the packet when
   you start sending it.  Protocol modules always give us complete packets
   via the DCI-4 Transmit interface.

   We always use AS_DATA_END, which is used either to transfer the final
   data for a streaming operation when you finally do know the amount of data
   in the packet (so this is not applicable to us), or if you know that you
   have the whole packet right from the outset (as we do).

   The largest amount of data that can be transferred across the Virata Link
   interface at one time is 1536 bytes (including message headers), so if
   we have a large packet then we need to split it into sub-blocks as
   described in the Virata Link Hardware Interface document and send an
   AS_DATA_END message for each block.

   It is in doing this sub-block fragmentation that we run into problems...
   The Link Hardware Interface does not impose any requirements on the data
   size for AS_DATA_END commands, whereas it states that AS_DATA commands
   may only send data blocks of 48 byte multiples (even though the Viarata
   firmware clearly does not obey this when sending data to us using AS_DATA).

   When we fragment data into sub-blocks, the largest amount that can be sent
   in the first sub-block is 1528 bytes.  Everything works fine for packets
   with a total size of up to 1624 bytes inclusive (note that this is 96 bytes
   (2 * 48) beyond the first sub-block of 1528 bytes.  At this point, and at
   every 48 byte interval thereafter, there is an 8 range of total packet size
   that the card appears to not transmit (e.g. 1625 <= packet size <= 1632 does
   not work, neither does 1673 <= packet size <= 1680 etc.).

   A work-around was found after some experimentation.  As much data as possible
   (still up to 1528 bytes) is sent in the first sub-block.  Any middle blocks
   only send 48 byte multiples of data.  The last block sends whatever's left
   (always <= 48 bytes).

   Another proviso for this work-around is that it only works if we wait
   for 1536 bytes to become free in the Boson FIFO - if we try to use smaller
   blocks then things break again!  This was only found once the debugging
   code had been removed, when the time between attempts to write to the FIFO
   shortened...
 */

int  boson_tx_msg (unsigned int           boson_address,
                   const int              handle,
                   const int              command,
                   const unsigned char *  data,
                   int                    data_bytes)
{
    int         fifo_bytes = 0;
    NICMessage  msg;

    dprintf (("", "tx: %d\n", data_bytes));

    msg.header       = 0;
    msg.data.handle  = handle;
    msg.data.type    = NIC_DataMessage;
    msg.data.command = command;
    msg.data.first   = 1;

    // Must prevent the NIC from generating interrupts - received data may
    // require some sort of handshaking involving sending data to the NIC,
    // which corrupts our transmit.
    w_Boson_Command (Boson_Cmd_ClrRxBlockMask);

    fifo_bytes = boson_fifo_space (boson_address);
    if (data_bytes > fifo_bytes - sizeof (NICMessage))
    {
        int           block_bytes;
        NICExtension  ext;

        ext.extension = 0;

        // First block can do maximum of (fifo_space - 8) words (accounting for
        // message header and extension word).
        block_bytes = fifo_bytes - (sizeof (NICMessage) +
                                    sizeof (NICExtension));

        msg.data.ext     = 1;
        msg.data.size    = block_bytes;
        ext.bits.size    = data_bytes;

        dprintf (("", "%d ", block_bytes));

        // Number of bytes that will remain after this block
        data_bytes -= block_bytes;

        // Write message
        w_Boson_CommitToARM (msg.header);

        // Write extenstion word
        w_Boson_CommitToARM (ext.extension);

        // Write data
        boson_tx_data (boson_address, data, block_bytes, true);
        data += block_bytes;

        msg.data.first   = 0;
        msg.data.ext     = 0;

        fifo_bytes = boson_fifo_space (boson_address);

        while (data_bytes > fifo_bytes - sizeof (NICMessage))
        {
            // Middle blocks can do maximum of (fifo_space - 4) bytes
            // (accounting for message header), and must be multiples of 48
            // bytes.
            block_bytes  = fifo_bytes - sizeof (NICMessage);
            msg.data.size = block_bytes;

            dprintf (("", "%d ", block_bytes));

            // Number of bytes that will remain after this block
            data_bytes -= block_bytes;

            // Write message header
            w_Boson_CommitToARM (msg.header);

            // Write data
            boson_tx_data (boson_address, data, block_bytes, true);
            data += block_bytes;

            fifo_bytes = boson_fifo_space (boson_address);
        }
    }

    // Either sending all data in one go, or last block of multi-block message.
    // If the latter then data size is always <= 48 bytes.
    msg.data.last    = 1;
    msg.data.size    = data_bytes;

    dprintf (("", "%d\n\n", data_bytes));

    if (data_bytes)
    {
        // Write message header
        w_Boson_CommitToARM (msg.header);

        // Write data
        boson_tx_data (boson_address, data, data_bytes, true);
    }
    else
    {
        // Write message header (no data so use BlockToARM)
        w_Boson_BlockToARM (msg.header);
    }

    // Allow the NIC to generate interrupts again
    w_Boson_Command (Boson_Cmd_SetRxBlockMask);

    return 0;
}




int  boson_tx_msg_mbuf (unsigned int   boson_address,
                        const int      handle,
                        const int      command,
                        struct mbuf *  m,
                        int            data_bytes)
{
    int              fifo_bytes = 0;
    int              bytes;
    unsigned char *  data = mtod (m, unsigned char *);
    NICMessage       msg;
    bool             last_data_in_block = false;

    dprintf (("", "tx_mbuf: %d bytes\n", data_bytes));

    msg.header       = 0;
    msg.data.handle  = handle;
    msg.data.type    = NIC_DataMessage;
    msg.data.command = command;
    msg.data.first   = 1;

    // Must prevent the NIC from generating interrupts - received data may
    // require some sort of handshaking involving sending data to the NIC,
    // which corrupts our transmit.
    w_Boson_Command (Boson_Cmd_ClrRxBlockMask);

    fifo_bytes = boson_fifo_space (boson_address);
    if (data_bytes > fifo_bytes - sizeof (NICMessage))
    {
        NICExtension  ext;

        dprintf (("", "Fragmenting data\n"));

        ext.extension = 0;

        // First block can do maximum of (fifo_space - 8) words (accounting for
        // message header and extension word).

        msg.data.size    = fifo_bytes - (sizeof (NICMessage) +
                                         sizeof (NICExtension));
        msg.data.ext     = 1;
        ext.bits.size    = data_bytes;

        dprintf (("", "block size %d\n", msg.data.size));

        // Number of bytes that will remain after this block
        data_bytes -= msg.data.size;

        // Write message
        w_Boson_CommitToARM (msg.header);

        // Write extenstion word
        w_Boson_CommitToARM (ext.extension);

        while (msg.data.size)
        {
            bytes = M_min (m->m_len, msg.data.size);
            dprintf (("", "doing %d, mbuf len %d\n", bytes, m->m_len));
            m->m_len -= bytes;
            msg.data.size -= bytes;
            if (msg.data.size == 0)
            {
                last_data_in_block = true;
            }
            boson_tx_data (boson_address, data, bytes, last_data_in_block);
            data += bytes;

            if (m->m_len == 0)
            {
                // Advance to next mbuf
                dprintf (("", "moving to next mbuf\n"));
                m = m->m_next;
                data = mtod (m, unsigned char *);
            }
        }
        last_data_in_block = false;

        msg.data.first   = 0;
        msg.data.ext     = 0;

        fifo_bytes = boson_fifo_space (boson_address);
        dprintf (("", "%d bytes free in FIFO\n", fifo_bytes));
        while (data_bytes > fifo_bytes - sizeof (NICMessage))
        {
            // Middle blocks can do maximum of (fifo_space - 4) bytes
            // (accounting for message header), and must be multiples of 48
            // bytes.
            msg.data.size  = fifo_bytes - sizeof (NICMessage);

            dprintf (("", "%d\n", msg.data.size));

            // Number of bytes that will remain after this block
            data_bytes -= msg.data.size;

            // Write message
            w_Boson_CommitToARM (msg.header);

            // Write all but last word of block
            while (msg.data.size)
            {
                bytes = M_min (m->m_len, msg.data.size);
                m->m_len -= bytes;
                msg.data.size -= bytes;
                if (msg.data.size == 0)
                {
                    last_data_in_block = true;
                }
                boson_tx_data (boson_address, data, bytes, last_data_in_block);
                data += bytes;
                if (m->m_len == 0)
                {
                    // Advance to next mbuf
                    m = m->m_next;
                    data = mtod (m, unsigned char *);
                }
            }
            last_data_in_block = false;

            fifo_bytes = boson_fifo_space (boson_address);
        }
    }

    // Either sending all data in one go, or last block of multi-block message.
    // If the latter then data size is always <= 48 bytes.
    msg.data.last    = 1;
    msg.data.size    = data_bytes;

    dprintf (("", "%d\n", data_bytes));

    if (data_bytes)
    {
        // Write message */
        w_Boson_CommitToARM (msg.header);

        while (data_bytes)
        {
            bytes = M_min (m->m_len, data_bytes);
            dprintf (("", "doing %d, mbuf len %d\n", bytes, m->m_len));
            m->m_len -= bytes;
            data_bytes -= bytes;
            if (data_bytes == 0)
            {
                last_data_in_block = true;
            }
            boson_tx_data (boson_address, data, bytes, last_data_in_block);
            if (m->m_len == 0)
            {
                // Advance to next mbuf
                dprintf (("", "moving to next mbuf\n"));
                m = m->m_next;
                data = mtod (m, unsigned char *);
            }
        }
    }
    else
    {
        // Write message header - no data so use BlockToARM
        w_Boson_BlockToARM (msg.header);
    }


    dprintf (("", "done\n\n"));

    // Allow the NIC to generate interrupts again
    w_Boson_Command (Boson_Cmd_SetRxBlockMask);

    return 0;
}

#ifdef DEBUG_TRAIL

#ifdef DEBUGLIB

void  ddisplay_message_trail_entry (const message_trail *const  m)
{
    dprintf (("", "0x%08x [%s cmd:%02d, hndl:%02d",
              m->msg.header,
              m->msg.common.type == NIC_CommandMessage ? "CMD, " : "DATA,",
              m->msg.common.command,
              m->msg.common.handle));

    if (m->msg.common.type == NIC_DataMessage)
    {
        dprintf (("", ", E: %s, L: %s, F: %s, bytes: %d]\n",
                  m->msg.data.ext   ? "Y" : "N",
                  m->msg.data.last  ? "Y" : "N",
                  m->msg.data.first ? "Y" : "N",
                  m->msg.data.size));
    }
    else
    {
        dprintf (("", "]\n"));
    }

    if (m->msg.data.ext)
    {
        dprintf (("", "0x%08x [EXT,  bytes: %d]\n",
                  m->ext.extension,
                  m->ext.bits.size));
    }
}

#endif

static void  display_message_trail_entry (const message_trail *const  m)
{
    printf ("0x%08x [%s cmd:%02d, hndl:%02d",
            m->msg.header,
            m->msg.common.type == NIC_CommandMessage ? "CMD, " : "DATA,",
            m->msg.common.command,
            m->msg.common.handle);

    if (m->msg.common.type == NIC_DataMessage)
    {
        printf (", E: %s, L: %s, F: %s, bytes: %d]\n",
                m->msg.data.ext   ? "Y" : "N",
                m->msg.data.last  ? "Y" : "N",
                m->msg.data.first ? "Y" : "N",
                m->msg.data.size);
    }
    else
    {
        printf ("]\n");
    }

    if (m->msg.data.ext)
    {
        printf ("0x%08x [EXT,  bytes: %d]\n",
                m->ext.extension,
                m->ext.bits.size);
    }
}



void  boson_display_trail (unsigned int  boson_address)
{
    message_trail *  m;


    /* Don't want to add entries to the trail while we're displaying it or
     * our loops could go wrong (msg_trail_next could change under our feet).
     */
    msg_trail_lock = 1;

    printf ("BOSON MESSAGE TRAIL\n"
            "Displaying %d messages of %d received\n",
            msg_trail_num > MESSAGE_TRAIL_SIZE ? MESSAGE_TRAIL_SIZE :
                                                 msg_trail_num,
            msg_trail_num);

    /* If > MESSAGE_TRAIL_SIZE messages have been received then the *start* of
     * the trail will most likely not be at the start of the trail array.
     */
    if (msg_trail_num > MESSAGE_TRAIL_SIZE)
    {
        for (m = msg_trail_next;
             m < msg_trail + MESSAGE_TRAIL_SIZE;
             m++)
        {
            display_message_trail_entry (m);
        }
    }

    for (m = msg_trail; m < msg_trail_next; m++)
    {
        display_message_trail_entry (m);
    }

    msg_trail_lock = 0;
}

#else

void  boson_display_trail (unsigned int  boson_address)
{
    printf ("BOSON MESSAGE TRAIL disabled in this build\n");
}

#endif





#ifdef DEBUG

void  boson_display_status (unsigned int  boson_address)
{
    int           i;
    unsigned int  status[256];

    boson_multi_status (boson_address, status, M_array_size (status));
    for (i = 0; i < M_array_size (status); i++)
    {
        printf ("%08x\n", status[i]);
    }
}

#endif




void  boson_display_info (unsigned int  boson_address)
{
    int w = 0;

    w = boson_fifo_space (boson_address) / (sizeof (unsigned int));

    printf ("There are %d words free in the TX FIFO\n", w);

    printf ("There are %spending words in the RX FIFO\n",
            Boson_RX_NotEmpty ? "" : "no ");

    printf ("There are %spending blocks in the RX FIFO\n",
            Boson_RX_Block ? "" : "no ");

    printf ("Attempted %d Boson FIFO recovers.\n",
            irq_buffer_recovers);

    if (!Boson_RX_Block && Boson_RX_NotEmpty)
    {
        printf ("\nThe Boson FIFO is in an inconsistent state.\n");
    }
    else
    {
        printf ("\nThe Boson FIFO is in a valid state.\n");
    }
}




_kernel_oserror *  boson_claim_interrupts (hardware_context *  context,
                                           const int           slot)
{
    _kernel_oserror *  e;
    unsigned int       boson_address = context->boson_address;

    e = _swix (OS_ClaimDeviceVector,
               _INR (0, 4),

               13,    // expansion card device number
               boson_irq_pre_entry,
               context,
               Boson_IRQ,
               0x2);    // 0x2 bit 1 is interrupt request
    if (!e)
    {
        enable_podule_irqs (slot);
        //_swix (Podule_SetSpeed,
        //       _IN (0) | _IN (3),
        //       3,
        //       slot);
    }

    return e;
}




_kernel_oserror *  boson_release_interrupts (hardware_context *  context,
                                             const int           slot)
{
    unsigned int       boson_address = context->boson_address;

    // Mustn't disable podule IRQs at this point incase other Podule IRQ
    // handlers are installed - system takes care of it.

    return _swix (OS_ReleaseDeviceVector,
                  _INR (0, 4),

                  13,    // expansion card device number
                  boson_irq_pre_entry,
                  context,
                  Boson_IRQ,
                  0x2);    // 0x2 bit 1 is interrupt request
}




void  boson_enable_interrupts (unsigned int  boson_address)
{
    // use the command register to mask in the NotEmpty bit IRQ thus generated
    // when NIC has data available
    w_Boson_Command (Boson_Cmd_SetRxBlockMask);
}




void  boson_disable_interrupts (unsigned int  boson_address)
{
    w_Boson_Command (Boson_Cmd_ClrRxBlockMask);    // mask out the NotEmpty bit
}




void  boson_disable_all_interrupts (unsigned int  boson_address)
{
    w_Boson_Command (Boson_Cmd_ClrAll);    // mask out all NIC interrupts
}
