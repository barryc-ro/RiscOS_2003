
 /* atmsock.c -- basic socket service routines */

#include "headers.h"
#include "atmio.h"
#include "services.h"
#include "utils.h"
#include "sockcmds.h"
#include "macros.h"
#include "kernel.h"
#include "swis.h"
#include "module.h"
#include "boson.h"
#include "ipconv.h"

#define PROTOTYPES_INTERNAL
#include "atmsock.h"

int sock_connect(unsigned int handle, unsigned char *msnl_addr, unsigned int msnl_port) /* attempt to connect to a server socket */
{

  AS_SOCKET_PARAMS socketcall;
  AS_CONNECT_MSNL_PARAMS connect_call;




  BlockWrite(CMD_MSG(CMD_HANDLE, SO_ATTACHX, (SOCK_SERVICE << 12) | handle));
/*   printf("Attached handle.\n"); */


  socketcall.af       = AF_ATML_MSNL;
  socketcall.type     = SOCK_RAW;
  socketcall.protocol = ATMPROTO_AAL5;
  socketcall.flags    = 0;

  connect_call.len = sizeof(ATML_SOCKADDR_MSNL);
  connect_call.msnl.satm_family = AF_ATML_MSNL;
  ipuctos(msnl_addr+2, connect_call.msnl.msnl_address, 4, '.');
  ipuitos(msnl_port, connect_call.msnl.msnl_port, '.');
  connect_call.send_len = 0;
  connect_call.recv_len = 0;
#ifdef DEBUG
  printf("sock_connect: connecting to %s at %s\n", connect_call.msnl.msnl_address, connect_call.msnl.msnl_port);
#endif
//  connect_call.address.sockaddr.satm_family = AF_ATML_MSNL;
//  connect_call.address.sockaddr.address.msnl.satm_msnl = msnl_addr;
//  connect_call.address.sockaddr.address.msnl.satm_port = msnl_port;
//  connect_call.address.len = sizeof(connect_call.address.sockaddr);

  if(asm_write_fifo(handle, AS_SOCKET, (unsigned char *)&socketcall, sizeof(socketcall),BlockToARMAddr)<0) {
#ifdef DEBUG
    printf("Failed to issue AS_SOCKET call for socket.\n");
#endif
    return -1;
  }
/*   else printf("AS_SOCKET succeeded for socket.\n"); */

  if(asm_write_fifo(handle, AS_CONNECT, (unsigned char *)&connect_call, sizeof(connect_call),BlockToARMAddr)<0) {
#ifdef DEBUG
    printf("Failed to issue AS_CONNECT call for socket.\n");
#endif
    return -1;
  }
#ifdef DEBUG
  else printf("AS_CONNECT succeeded for socket.\n");
#endif
  atm_connections++;

  return 0;

}

/* sock_listen attaches a new handle to the sockets service, and instructs the NIC to
   start listening on that socket handle.  */
int sock_listen(unsigned int handle, unsigned char *msnl_addr, unsigned int msnl_port)
{

  AS_SOCKET_PARAMS socketcall;
  AS_LISTEN_MSNL_PARAMS listen_call;



  BlockWrite(CMD_MSG(CMD_HANDLE, SO_ATTACHX, (SOCK_SERVICE << 12) | handle));
/*   printf("LISTEN: Attached handle.\n"); */


  socketcall.af       = AF_ATML_MSNL;
  socketcall.type     = SOCK_RAW;
  socketcall.protocol = ATMPROTO_AAL5;
  socketcall.flags    = 0;

  listen_call.len = sizeof(ATML_SOCKADDR_MSNL);
  listen_call.msnl.satm_family = AF_ATML_MSNL;
  ipuctos(msnl_addr, listen_call.msnl.msnl_address, 4, '.');
  ipuitos(msnl_port, listen_call.msnl.msnl_port, '.');


//  listen_call.address.sockaddr.satm_family = AF_ATML_MSNL;
//  listen_call.address.sockaddr.address.msnl.satm_msnl = msnl_addr; /* not actually needed */
//  listen_call.address.sockaddr.address.msnl.satm_port = msnl_port;
//  listen_call.address.len = sizeof(listen_call.address.sockaddr);


  if(asm_write_fifo(handle, AS_SOCKET, (unsigned char *)&socketcall, sizeof(socketcall),BlockToARMAddr)<0) {
/*     printf("LISTEN: Failed to issue AS_SOCKET call for socket.\n"); */
    return -1;
  }
/*   else printf("LISTEN: AS_SOCKET succeeded for socket.\n"); */

  if(asm_write_fifo(handle, AS_LISTEN, (unsigned char *)&listen_call, sizeof(listen_call),BlockToARMAddr)<0) {
/*     printf("LISTEN: Failed to issue AS_LISTEN call for socket.\n"); */
    return -1;
  }
  atm_listens++;
/*   else printf("LISTEN: AS_LISTEN succeeded for socket.\n"); */


 return 0;

}
