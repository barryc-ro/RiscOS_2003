/* File:    utils.c
   Purpose: Various bits and pieces
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-02-12: BAL
   Inherited and added this header.
   Removed local definition of functions which are implemented in InetLib:
     ntohl, htonl, inet_addr, htons, ntohs
   Removed unused functions:
     min
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include <ctype.h>
#include "kernel.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

/* TCPIPLibs */
#include "sys/types.h"

/* Miscellaneous */
#include "DebugLib/DebugLib.h"
#include "dhcp.h"

/* Local */
#include "atm.h"
#include "error.h"
#include "utils.h"




/* =============================================================================
 * Global variables
 */

static struct
{
    unsigned int  descriptor[4];
    int           open;
} messages_file;




/* =============================================================================
 * Function definitions
 */

unsigned int MonotonicTime(void)
{
  _kernel_swi_regs r;

  _kernel_swi(OS_ReadMonotonicTime, &r, &r);
  return ((unsigned int)(r.r[0]));
}




unsigned int FileStat(char *s)
{
  _kernel_swi_regs r;

  r.r[0] = 17;
  r.r[1] = (int)s;

  _kernel_swi(OS_File, &r, &r);
  return((unsigned int)(r.r[4]));
}




void time_delay(const int timeout)
{
  int time_then;

  time_then = MonotonicTime();

  while((MonotonicTime() - time_then) < timeout);
  return;
}




int caseless_strcmp(char *a, char *b)
{
    int d;

    while ( *a || *b ) {
        d = toupper( *(a++) ) - toupper( *(b++) );
        if ( d )
            return d;
    }
    return 0;
}



/* convert a SIX byte (not FOUR!) unsigned char MAST address */
/* to an ATML packed decimal format address */

unsigned int chtoui(unsigned char *s)
{
  unsigned int w;    /* 00.00.a.b.c.d => 0xDDCCBBAA */
  s = s + 2;         /* skip past initial 2 zero bytes */
  w = *s++;
  w |= (*s++ << 8);
  w |= (*s++ << 16);
  w |= (*s++ << 24);
  return(w);
}




/* does the reverse - returned char * is only valid between calls */
/* copy it if you need a safe version */
unsigned char *uitoch(unsigned int i)
{
  static unsigned char s[6];

  s[0] = 0;
  s[1] = 0;
  s[2] = i & 0xff;
  s[3] = (i & 0xff00) >> 0x8;
  s[4] = (i & 0xff0000) >> 0x10;
  s[5] = (i & 0xff000000) >> 0x18;
  return(s);
}



/* convert a Binary Packed Decimal port word to our */
/* internal format */
unsigned int portword(unsigned int i)
{
   static unsigned int w;

   w = ((i & 0xff000000) >> 24) |
       ((i & 0x00ff0000) >> 8)  |
       ((i & 0x0000ff00) << 8)  |
       ((i & 0x000000ff) << 24);

   return(w);
}




/* convert internal port number to Binary Packed Decimal  */
/* as understood by the nic */
unsigned int portpacked(unsigned int i)
{

   static unsigned int w;

   w = ((i & 0x000000ff) << 24) |
       ((i & 0x00ff0000) << 8)  |
       ((i & 0x0000ff00) >> 8)  |
       ((i & 0x000000ff) >> 24);

   return(w);
}




char *ether_sprintf(register unsigned char *ap)
{
    register i;
    static char etherbuf[18];
    register char *cp = etherbuf;
    static char digits[] = "0123456789abcdef";

    for (i = 0; i < 6; i++) {
        *cp++ = digits[*ap >> 4];
        *cp++ = digits[*ap++ & 0xf];
        *cp++ = ':';
    }
    *--cp = 0;
    return (etherbuf);
}




void  sep_str_to_num (const char *     str,
                      unsigned char *  num,
                      int              base)
{
    //int     count = 0;
    char *  s;
    long    l;

    while (l = strtol (str, &s, base), s > str)
    {
        *num++ = (unsigned char) l;
        str = s + 1;
    };
}




void  num_to_sep_str (const unsigned char *  num,
                      const size_t           num_size,
                      char *                 str,
                      char                   sep)
{
    char *  s = str;
    int     i;

    *str = 0;

    if (num)
    {
        for (i = 0; i < num_size - 1; ++i)
        {
            s += sprintf (s, "%02x%c", num[i], sep);
        }
        sprintf (s, "%02x", num[i]);
    }
}




_kernel_oserror *  message_open_file (void)
{
    _kernel_oserror *  e = NULL;

    if (!messages_file.open)
    {
        e = _swix (MessageTrans_OpenFile,
                   _INR (0, 2),

                   &messages_file.descriptor,
                   MESSAGES_FILE,
                   0);
        if (!e)
        {
            messages_file.open = 1;
        }
    }

    return e;
}




_kernel_oserror *  message_close_file (void)
{
    _kernel_oserror *  e = NULL;

    if (messages_file.open)
    {
        e = _swix (MessageTrans_CloseFile,
                   _IN (0),

                   &messages_file.descriptor);

        if (!e)
        {
            messages_file.open = 0;
        }
    }

    return e;
}



const char *  message_lookup (const char *const  token)
{
    const char *       message;

    if (_swix (MessageTrans_Lookup,
               _INR (0, 2) | _OUT (2),

               &messages_file.descriptor,
               token,
               0,

               &message))
    {
        message = NULL;
    }
    else
    {
        dprintf (("", "%s -> %s\n", token, message));
    }

    return message;
}




_kernel_oserror *  message_error_lookup (_kernel_oserror *const  token_e)
{
    _kernel_oserror *  e;


    dprintf (("", "token error: %p %d, %s\n",
              token_e, token_e->errnum, token_e->errmess));

    e = _swix (MessageTrans_ErrorLookup,
               _INR (0, 3),

               token_e,
               &messages_file.descriptor,
               &g_error,
               sizeof (_kernel_oserror));
    if (e->errnum != token_e->errnum)
    {
        e = token_e;
    }

    dprintf (("", "trans error: %p %d, %s\n", e, e->errnum, e->errmess));

    return e;
}




extern int  setenv (const char *const  name,
                    const char *const  value,
                    const int          overwrite)
{
    if (!overwrite)
    {
        _kernel_swi_regs  r;

        /* Check if variable already exists, and if so do nothing */

        /* Must use _kernel_swi for this because the SWI always generates
         * an error if the variable exists, and _swix doesn't fill in the
         * output parameters if an error is generated.
         */
        r.r[0] = (int) name;
        r.r[1] = (int) NULL;
        r.r[2] = (int) (1U << 31);
        r.r[3] = 0;
        r.r[4] = 0;

        _kernel_swi (OS_ReadVarVal, &r, &r);
        if (r.r[2] < 0)
        {
            return 0;
        }
    }

    return (_swix (OS_SetVarVal,
                   _INR (0, 4),

                   name,
                   value,
                   strlen (value),
                   0,
                   0 /* OS_GSTrans'd string type variable */) ? -1 : 0);
}




#ifdef DHCP
_kernel_oserror *  dhcp_set_option (const unsigned int   flags,
                                    const char *const    if_name,
                                    const unsigned int   option_id,
                                    const void *const    buffer,
                                    const size_t         buffer_size,
                                    unsigned int *const  if_status)
{
    if (if_status)
    {
        return _swix (DHCP_SetOption,
                      _INR (0, 4) | _OUT (2),
                      flags,
                      if_name,
                      option_id,
                      buffer,
                      buffer_size,
                      if_status);
    }
    else
    {
        return _swix (DHCP_SetOption,
                      _INR (0, 4),
                      flags,
                      if_name,
                      option_id,
                      buffer,
                      buffer_size);
    }
}



_kernel_oserror *  dhcp_get_option (const unsigned int   flags,
                                    const char *const    if_name,
                                    const unsigned int   option_id,
                                    const void *const    buffer,
                                    const size_t *       buffer_size,
                                    unsigned int *const  if_status)
{
    if (if_status)
    {
        return _swix (DHCP_GetOption,
                      _INR (0, 4) | _OUT (2) | _OUT (4),
                      flags,
                      if_name,
                      option_id,
                      buffer,
                      *buffer_size,
                      if_status,
                      buffer_size);
    }
    else
    {
        return _swix (DHCP_GetOption,
                      _INR (0, 4) | _OUT (4),
                      flags,
                      if_name,
                      option_id,
                      buffer,
                      *buffer_size,
                      buffer_size);
    }
}

#endif
