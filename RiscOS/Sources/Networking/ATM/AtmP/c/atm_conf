/*	ATM_CONF.C

Project : ATML Panther card driver

Purpose:


History:

Date      Who     Description of change
===========================================
20/6/97    CP     Added control header

                  Tidied up formatting.

6/2/98     CP     Added function atm_changeupstreambandwidth() to cope with
                  new NVRAM allocation for configuring upstream
                  bandwidth/ratepacing of card.

***************************************************************************/

#include "stdio.h"
#include "stdlib.h"
#include "strings.h"
#include "ctype.h"
#include "kernel.h"
#include "swis.h"
#include "sys/types.h"
#include "module.h"
#include "nvram.h"
#define PROTOTYPES_INTERNAL
#include "atm_conf.h"

void atm_conf_arp(const char *arg)
{
  int doconfig;
  char *cp;

  if((int)arg == 0)
  {  /* *configure issued with no args */
    printf("ATM25arp   on|off\n");
    return;
  }

  if ((int)arg == 1)
  { /* *status issued */
    doconfig = read_nvram_bit(BOOTPARAMLOC, DYNAMICARP_BIT);
    printf("ATM25arp   %s\n", doconfig ? "on" : "off");
    return;
  }

  for(cp=(char *)arg; *cp; cp++)
  {
    if (!isalpha(*cp))
    {
       *cp = 0;
       break;
    }
  }

  doconfig = strncmp(arg, "on",2)?0:1;

  write_nvram_bit(BOOTPARAMLOC, doconfig, DYNAMICARP_BIT);
}

void atm_conf_llc(const char *arg)
{
  int is_vc;

  if((int)arg == 1)
  { /* *status issued */
    is_vc = read_nvram_bit(BOOTPARAMLOC, VCMUX_BIT);
    printf("ATM25llc   %s\n", is_vc ? "off" : "on");
    return;
  }

  write_nvram_bit(BOOTPARAMLOC, 0, VCMUX_BIT);
}

void atm_conf_vc(const char *arg)
{
  int is_vc;

  if((int)arg == 1)
  { /* *status issued */
    is_vc = read_nvram_bit(BOOTPARAMLOC, VCMUX_BIT);
    printf("ATM25vc    %s\n", is_vc ? "on" : "off");
    return;
  }

  write_nvram_bit(BOOTPARAMLOC, 1, VCMUX_BIT);
}

void atm_conf_pvc(const char *arg)
{
  int pvc;
  char *cp;

  if((int)arg == 0)
  { /* *configure issued with no params */
    printf("ATM25pvcboot <vci>\n");
    return;
  }

  if((int)arg == 1)
  { /* *status called */
    pvc = ((read_nvram_byte(PVCPARAMLOC_HIGH)<<8) | read_nvram_byte(PVCPARAMLOC_LOW));

    if(pvc == 0)
    {
      printf("ATM25pvcboot   off\n");
      return;
    }

    else
    {
      printf("ATM25pvcboot   %d\n", pvc);
      return;
    }
  }

  for( cp = (char *)arg; *cp; cp++ )
  {
    if (!isalnum(*cp))
    {
       *cp = 0;
       break;
    }
  }

  if(strcmp(arg, "off")==0)
  {
    write_nvram_byte(PVCPARAMLOC_LOW, 0);
    write_nvram_byte(PVCPARAMLOC_HIGH, 0);
    return;
  }

  pvc = atoi(arg);

  if((pvc<0) ||(pvc>65535))
  {
    pvc = 0;
  }

  write_nvram_byte(PVCPARAMLOC_LOW, pvc & 0xff);
  write_nvram_byte(PVCPARAMLOC_HIGH, (pvc & 0xff00)>>8);
  printf("Wrote: %d as %d and %d\n", pvc, (pvc & 0xff), (pvc & 0xff00)>>8);
}

/******* atm_changeupstreambandwidth ***************************************

Purpose: Modifies/displays NVRAM holding rate pacing parameters

Inputs: char * argument string

            if ((int) args == 0)
            {*configure called with no parameters, return syntax string}

            if ((int) args == 1)
            {*status called, print value}

            else
            {args is a pointer to the argument(s) from the CLI}

Cf. PRMs, 1-215, "Information Word".  Specifically, bit 30.....the cmhg
veneer checks this bit when 'configure:' is defined in the CLI table entry,
and sorts everything out to the CLI handler.

Outputs: none

***************************************************************************/

void atm_changeupstreambandwidth (const char *arg_string)
{
  unsigned int bandwidth;

  switch ( (int) arg_string )
  {
     case 1: /* print value */
        bandwidth = ( (read_nvram_byte (UPSTREAM_BANDLIMIT + 1) << 8) |
                       read_nvram_byte (UPSTREAM_BANDLIMIT) );

        printf("ATM25bw      ");

        if (0 == bandwidth)
        {
           printf("unlimited\n");
        }

        else
        {
           printf("%d kb/s\n", bandwidth);
        }
     break;

     case 0: /* syntax error, no parameter */
        printf("Syntax: configure atm25bw <bandwidth in kbps>\n");
     break;

     default: /* new value */
        bandwidth = atoi (arg_string);

        write_nvram_byte (UPSTREAM_BANDLIMIT, bandwidth & 0xff);
        write_nvram_byte (UPSTREAM_BANDLIMIT + 1, (bandwidth & 0xff00) >> 8);
  }
}
