/* File:    nvparams.c
   Purpose: Centralised reading/writing of non-volatile configuration parameters
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-02-19: BAL
   Created.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "swis.h"

/* Local */
#include "nvparams.h"




/* =============================================================================
 * Constants definitions
 */

enum
{
    /* Locations in main CMOS RAM */
    PrimaryServer_ATMAddr_1      = 0x1e,
    PrimaryServer_ATMAddr_1_Size = 12,
    PrimaryServer_ATMAddr_2      = 0x2f,
    PrimaryServer_ATMAddr_2_Size = 8,

    Server_IPAddr                = 0x38,
    Gateway_IPAddr               = 0xe0,
    Netmask                      = 0x6f,
    Netmask_Shift                = 3,
    Netmask_Mask                 = 0x1f << Netmask_Shift,

    /* This is dodgy and should be moved */
    UpstreamBandwidth            = 0xd7,

    /* Offsets into podule CMOS RAM */
    PVC                          = 0x0,
    Flags                        = 0x2
};

enum
{
    Flags_Config     = 0x1,
    Flags_TFTPBoot   = 0x2,
    Flags_DynamicARP = 0x4,
    Flags_VCMux      = 0x8
};

enum
{
    Podule_ReadInfo_CMOS = (1 << 2)
};




/* =============================================================================
 * Global variables
 */

static unsigned int  podule_cmos;




/* =============================================================================
 * Function prototype declarations
 */

extern unsigned int read_nvram_bit(unsigned int, unsigned int);
extern void write_nvram_bit(unsigned int, unsigned int, unsigned int);
extern unsigned int read_nvram_byte(unsigned int);
extern void write_nvram_byte(unsigned int, unsigned int);
extern unsigned int read_nvram_word(unsigned int);
extern void write_nvram_word(unsigned int, unsigned int);




/* =============================================================================
 * Function definitions
 */

/* -----------------------------------------------------------------------------
 */

int nvparams_init (unsigned int  podule)
{
    return (_swix (Podule_ReadInfo,
                   _INR (0, 3),

                   Podule_ReadInfo_CMOS,
                   &podule_cmos,
                   sizeof (podule_cmos),
                   podule) ? 1 : 0);
}

int nvparams_read_pvc (void)
{
    return (read_nvram_byte (podule_cmos + PVC) |
            read_nvram_byte (podule_cmos + PVC + 1) << 8);
}

void nvparams_write_pvc (const int  pvc)
{
    write_nvram_byte (podule_cmos + PVC, pvc & 0xff);
    write_nvram_byte (podule_cmos + PVC + 1, (pvc & 0xff00) >> 8);
}

void nvparams_read_primary_server (unsigned char *  atm_addr)
{
    int  c;
    int  i;

    for (c = 0, i = PrimaryServer_ATMAddr_1;
         c < PrimaryServer_ATMAddr_1_Size;
         ++c, ++i)
    {
        *atm_addr++ = read_nvram_byte (i);
    }

    for (c = 0, i = PrimaryServer_ATMAddr_2;
         c < PrimaryServer_ATMAddr_2_Size;
         ++c, ++i)
    {
        *atm_addr++ = read_nvram_byte (i);
    }
}

void nvparams_write_primary_server (const unsigned char *  atm_addr)
{
    int  c;
    int  i;

    for (c = 0, i = PrimaryServer_ATMAddr_1;
         c < PrimaryServer_ATMAddr_1_Size;
         ++c, ++i)
    {
        write_nvram_byte (i, *atm_addr++);
    }

    for (c = 0, i = PrimaryServer_ATMAddr_2;
         c < PrimaryServer_ATMAddr_2_Size;
         ++c, ++i)
    {
        write_nvram_byte (i, *atm_addr++);
    }
}

int nvparams_read_dynamic_arp (void)
{
    return read_nvram_bit (podule_cmos + Flags, Flags_DynamicARP);
}

void nvparams_write_dynamic_arp (const int  dynamic_arp)
{
    write_nvram_bit (podule_cmos + Flags, dynamic_arp, Flags_DynamicARP);
}

int nvparams_read_multiproto_enc (void)
{
    return read_nvram_bit (podule_cmos + Flags, Flags_VCMux);
}

void nvparams_write_multiproto_enc (const int  multiproto_enc)
{
    write_nvram_bit (podule_cmos + Flags, multiproto_enc, Flags_VCMux);
}

unsigned int nvparams_read_upstream_bandwidth (void)
{
    return ((read_nvram_byte (UpstreamBandwidth + 1) << 8) |
             read_nvram_byte (UpstreamBandwidth));
}

void nvparams_write_upstream_bandwidth (unsigned int  upstream_bandwidth)
{
    write_nvram_byte (UpstreamBandwidth, upstream_bandwidth & 0xff);
    write_nvram_byte (UpstreamBandwidth + 1,
                      (upstream_bandwidth & 0xff00) >> 8);
}

unsigned int  nvparams_read_gateway (void)
{
    return read_nvram_word (Gateway_IPAddr);
}

unsigned int  nvparams_read_server (void)
{
    return read_nvram_word (Server_IPAddr);
}

unsigned int  nvparams_read_netmask (void)
{
    return ((read_nvram_byte (Netmask) & Netmask_Mask) >> Netmask_Shift);
}
