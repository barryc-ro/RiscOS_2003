#include "kernel.h"
#include "swis.h"
#include "types.h"
#include "module.h"
#define PROTOTYPES_INTERNAL
#include "mbuf.h"

#include "mbuftypes.h"

struct mbctl mbctl =
{
    0,                              /* opaque */
    sizeof(struct mbctl),           /* mbcsize */
    MBUF_MANAGER_VERSION,           /* mbcvers */
    0ul,                            /* flags */
    MINCONTIG,                      /* advminubs */
    ATM_BUFSIZE,                    /* advmaxubs */
    MINCONTIG,                      /* mincontig */
    0ul,                            /* spare1 */
    /*
     * Rest of the structure gets initialised
     * to zeroes due to the trailing comma
     */
};



/* register our mbctl structure with the mbufmanager - ie start a session */
_kernel_oserror *mb_entryinit(void)
{
    _kernel_swi_regs r;

    r.r[0] = (int) &mbctl;
    return _kernel_swi( XOS_Bit | Mbuf_OpenSession, &r, &r);
}

/*
 * mb_present - check whether the mbuf manager is present or not,
 * using the Mbuf_Control SWI to do so.  returns 1 if manager
 * present, else 0.
 */
int mb_present(void)
{
    _kernel_swi_regs r;

    /*
     * the control SWI with reason code 0 should *always*
     * succeed if the mbuf manager is loaded.
     */
    r.r[0] = 0;
    return((_kernel_swi(XOS_Bit | Mbuf_Control, &r, &r) == 0) ? 1 : 0);
}

/* deregister our mbctl structure, ie close the session */
extern _kernel_oserror *mb_closesession(void)
{
    _kernel_swi_regs r;

    r.r[0] = (int) &mbctl;
    return _kernel_swi( XOS_Bit | Mbuf_CloseSession, &r, &r);
}

/* handle_managerstatus - deal with a MbufManagerStatus service call -
   this routine is called if a service call of type MbufManaerStatus_Started is
   called - ie the MbufManager was not present when the driver module was loaded
   but has since become alive, and is now advertising its presence. This allows
   us to register with it and use its resources.
*/

void handle_managerstatus(_kernel_swi_regs *r)
{
    switch( r->r[0] ) {
      case MbufManagerStatus_Started:
        if( !managerstarted ) {
            if( mb_entryinit() == NULL ) {
                managerstarted = 1;
                do_start = 1;
                setcallback();
            }
        }
        break;

      case MbufManagerStatus_Stopping:
        break;
      case MbufManagerStatus_Scavenge:
        /* do nothing */
        break;

      default:
        break;
    }
}

/* EOF mbuf.c */
