/* File:    error.c
   Purpose: Errors
   Author:  Ben Laughton

   Copyright 1999 Element 14 Ltd.

   This material is the confidential trade secret and proprietary information
   of Element 14 Ltd. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Element 14 Ltd.
   All rights reserved.

   History:

   1999-02-16: BAL
   Created.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include <string.h>

/* TCPIPLibs */
#include "sys/dcistructs.h"

#include "DebugLib/DebugLib.h"

/* Local */
#include "atm.h"
#include "defs.h"
#include "error.h"
#include "utils.h"




/* =============================================================================
 * Define constants
 */

enum
{
    Error_ATM_Unknown
};




/* =============================================================================
 * Define macros
 */

#define M_error_struct(name, text)\
        static struct\
        {\
            int   errnum;\
            char  errmess[sizeof (text) + 1];\
        } name =\
        {\
            Error_ATM_##name,\
            text\
        }




/* =============================================================================
 * Declare global variables
 */

M_error_struct (InvalidOption, "EOption");
M_error_struct (InvalidData, "EData");
M_error_struct (UnsupportedAddr, "EAddr");
M_error_struct (NoMemory, "EMem");
M_error_struct (NoSocket, "ENoSock");
M_error_struct (ConnectionInUse, "EConnUsed");
M_error_struct (NoSuchConnection, "ENoConn");
M_error_struct (BadState, "EState");
M_error_struct (PantherInit, "EPantherInit");
M_error_struct (TickerAlloc, "ETicker");
M_error_struct (PnPComms, "EPnPComms");
M_error_struct (PnPUninit, "EPnPUninit");
M_error_struct (NoCards, "ENoCards");
M_error_struct (ServiceManager, "EServiceManager");
M_error_struct (HandleAlloc, "EHandleAlloc");
M_error_struct (DuplicateConnection, "EDupConn");
M_error_struct (NoMAC, "ENoMAC");
M_error_struct (Unknown, "EUnknown");

static _kernel_oserror *  error_table[] =
{
    (_kernel_oserror *) &InvalidOption,
    (_kernel_oserror *) &InvalidData,
    (_kernel_oserror *) &UnsupportedAddr,
    (_kernel_oserror *) &NoMemory,
    (_kernel_oserror *) &NoSocket,
    (_kernel_oserror *) &ConnectionInUse,
    (_kernel_oserror *) &NoSuchConnection,
    (_kernel_oserror *) &BadState,
    (_kernel_oserror *) &PantherInit,
    (_kernel_oserror *) &TickerAlloc,
    (_kernel_oserror *) &PnPComms,
    (_kernel_oserror *) &PnPUninit,
    (_kernel_oserror *) &NoCards,
    (_kernel_oserror *) &ServiceManager,
    (_kernel_oserror *) &HandleAlloc,
    (_kernel_oserror *) &DuplicateConnection,
    (_kernel_oserror *) &NoMAC
};

_kernel_oserror  g_error;




/* =============================================================================
 * Function definitions
 */

/* -----------------------------------------------------------------------------
 */

_kernel_oserror *  error_int_to_os (int  error)
{
    _kernel_oserror *  os_error = NULL;


    dprintf (("", "error %d\n", error));

    if (error)
    {
        /* If the error is in our error block then return that block.
         * Otherwise have to make do with stuffing the error number in the
         * generic "ATM25 module error" block and return this.
         */
        if (error >= ErrorBase_ATM &&
            error - ErrorBase_ATM < M_array_size (error_table))
        {
            os_error = message_error_lookup (
                           error_table[error - ErrorBase_ATM]);
        }
        else
        {
            /* If it's one of the Unix-style errors offset from 0 then convert
             * it into something in the DCI4 error block.
             */
            if (error < SPECIFICOFFSET)
            {
                REALLYSETDCI4ERRNO (Unknown.errnum, error);
            }
            else
            {
                Unknown.errnum = error;
            }

            os_error = message_error_lookup ((_kernel_oserror *) &Unknown);
        }
    }

    return  os_error;
}




/* -----------------------------------------------------------------------------
 */

_kernel_oserror *  error_gen_tok (const int          error,
                                  const char *const  token)
{
    static _kernel_oserror  token_e;
    _kernel_oserror *       e;

    token_e.errnum = error;
    strncpy (token_e.errmess,
             token,
             sizeof (token_e.errmess) - 1);
    token_e.errmess[sizeof (token_e.errmess) - 1] = 0;

    e = message_error_lookup (&token_e);

    return e;
}

