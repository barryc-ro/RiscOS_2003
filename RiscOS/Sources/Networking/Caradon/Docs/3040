
I will be changing the values presented by the NCRegistry service call
and NCRegistry_Status SWI. The new format will be:

Service Call 0xba
-----------------

r0 = 0xba
r1 = smartcard boot block status
r2 = network boot block status
r3 = last modified bits in smartcard boot block status
r4 = last modified bits in network boot block status

r3 and r4 now reflect exactly which bits have changed, prompting the
service call in the first place.

SWI NCRegistry_Status
---------------------

On exit:

r0 = smartcard boot block status
r1 = network boot block status
r2 = last modified bits in smartcard boot block status
r3 = last modified bits in network boot block status

Finally, I've messed around with which bits do what in the status words,
so that they make more sense. So, status words now have the following
bit values:

#define BB_STATUS_INSERTED 0x1  // smartcard inserted(1) / extracted(0)
#define BB_STATUS_SC_VALID 0x2  // smartcard validated by low level
				   transport 
#define BB_STATUS_BB_VALID 0x4  // boot block data validated by
				   registry 
#define BB_STATUS_PIN      0x8  // smartcard is PIN protected 
#define BB_STATUS_LOCKED   0x10 // smartcard is locked 

B_STATUS_INSERTED means 'loaded' when referring to the network boot
block. BB_STATUS_SC_VALID means Rich's smartcard driver is happy with
the card - this doesn't necessarily mean the registry is happy with 
what's on it. Registry happiness is indicated by the BB_STATUS_BB_VALID
bit being set. BB_STATUS_PIN means the smartcard is using password
protection, BB_STATUS_LOCKED indicates the current state of this
protection.

Finally, tags returned by the Registry_Enquiry SWI which involve IP
addresses now return them in network byte order, not host byte order.

Ant
-- 
                                  _  _
Ant Skelton                        \/                        ant@ant.org
ant@nc.acorn.co.uk                (`')               http://www.ant.org/
Acorn Network Computing            ()              ant@eerie.demon.co.uk


