/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 *
 * Copyright (c) 1991 Acorn Computers Ltd., Cambridge, England
 */

/*
 * Definitions related to sockets: types, address families, options.
 */

/*
 * Types
 */
#define SOCK_STREAM     1               /* stream socket */
#define SOCK_DGRAM      2               /* datagram socket */
#define SOCK_RAW        3               /* raw-protocol interface */

/*
 * Option flags per-socket.
 */
#define SO_ACCEPTCONN   0x0002          /* socket has had listen() */
#define SO_REUSEADDR    0x0004          /* allow local address reuse */
#define SO_KEEPALIVE    0x0008          /* keep connections alive */
#define SO_DONTROUTE    0x0010          /* just use interface addresses */
#define SO_BROADCAST    0x0020          /* permit sending of broadcast msgs */
#define SO_USELOOPBACK  0x0040          /* bypass hardware when possible */
#define SO_LINGER       0x0080          /* linger on close if data present */
#define SO_OOBINLINE    0x0100          /* leave received OOB data in line */

/*
 * Additional options, not kept in so_options.
 */
#define SO_SNDBUF       0x1001          /* send buffer size */
#define SO_RCVBUF       0x1002          /* receive buffer size */
#define SO_SNDLOWAT     0x1003          /* send low-water mark */
#define SO_RCVLOWAT     0x1004          /* receive low-water mark */
#define SO_SNDTIMEO     0x1005          /* send timeout */
#define SO_RCVTIMEO     0x1006          /* receive timeout */
#define SO_ERROR        0x1007          /* get error status and clear */
#define SO_TYPE         0x1008          /* get socket type */

/*
 * Structure used for manipulating linger option.
 */
struct  linger {
        int     l_onoff;                /* option on/off */
        int     l_linger;               /* linger time */
};

/*
 * Level number for (get/set)sockopt() to apply to socket itself.
 */
#define SOL_SOCKET      0xffff          /* options for socket level */

/*
 * Address families. (Actually only Internet!)
 */

#define AF_INET         2               /* internetwork: UDP, TCP, etc. */

#define AF_MAX          1

/*
 * Structure used by kernel to store most
 * addresses.
 */
struct sockaddr {
        unsigned short sa_family;              /* address family */
        char    sa_data[14];            /* up to 14 bytes of direct address */
};

/*
 * Structure used by kernel to pass protocol
 * information in raw sockets.
 */
struct sockproto {
        unsigned short sp_family;              /* address family */
        unsigned short sp_protocol;            /* protocol */
};

/*
 * Protocol families, same as address families for now.
 */
#define PF_INET         AF_INET

#define PF_MAX          AF_MAX

/*
 * Maximum queue length specifiable by listen.
 */
#define SOMAXCONN       5

/*
 * Message header for recvmsg and sendmsg calls.
 */
struct msghdr {
        char    *msg_name;               /* optional address */
        int     msg_namelen;            /* size of address */
        struct  iovec *msg_iov;         /* scatter/gather array */
        int     msg_iovlen;             /* # elements in msg_iov */
        char    *msg_accrights;          /* access rights sent/received */
        int     msg_accrightslen;
};

#define MSG_OOB         0x1             /* process out-of-band data */
#define MSG_PEEK        0x2             /* peek at incoming message */
#define MSG_DONTROUTE   0x4             /* send without using routing tables */

#define MSG_MAXIOVLEN   16


int socket(int domain, int type, int protocol);
int bind(int socket, struct sockaddr *name, int namelen);
int listen(int socket, int backlog);
int accept(int socket, struct sockaddr *addr, int *addrlen);
int connect(int socket, struct sockaddr *name, int namelen);
int sendto(int socket, char *msg, int len, int flags, struct sockaddr *to, int tolen);
int send(int socket, char *msg, int len, int flags);
int sendmsg(int socket, struct msghdr msg[], int flags);
int recvfrom(int socket, char *buf, int len, int flags, struct sockaddr *from, int *fromlen);
int recv(int socket, char *buf, int len, int flags);
int recvmsg(int socket, struct msghdr msg[], int flags);
int shutdown(int socket, int how);
int setsockopt(int socket, int level, int optname, char *optval, int optlen);
int getsockopt(int socket, int level, int optname, char *optval, int *optlen);
int getsockname(int socket, struct sockaddr *name, int *namelen);
int getpeername(int socket, struct sockaddr *name, int *namelen);
int socketclose(int socket);
int socketioctl(int socket, long cmd, void *argp);


/*
 * Select uses bit masks of file descriptors in longs.
 * These macros manipulate such bit fields.
 */

#define FD_SETSIZE      32  /* maximum number of socket descriptors */

typedef long    fd_mask;
#define NFDBITS (sizeof(fd_mask) * 8)        /* bits per mask */
#ifndef howmany
#define howmany(x, y)   (((x)+((y)-1))/(y))
#endif

typedef struct fd_set {
        fd_mask fds_bits[howmany(FD_SETSIZE, NFDBITS)];
} fd_set;

#define FD_SET(n, p)    ((p)->fds_bits[(n)/NFDBITS] |= (1 << ((n) % NFDBITS)))
#define FD_CLR(n, p)    ((p)->fds_bits[(n)/NFDBITS] &= ~(1 << ((n) % NFDBITS)))
#define FD_ISSET(n, p)  ((p)->fds_bits[(n)/NFDBITS] & (1 << ((n) % NFDBITS)))
#define FD_ZERO(p)      bzero((char *)(p), sizeof(*(p)))

int select(int ndfs, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, void *timeout);

/*
 * Note: ndfs should not exceed FD_SETSIZE 
 */


