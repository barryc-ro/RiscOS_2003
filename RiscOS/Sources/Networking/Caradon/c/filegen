#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "defs.h"
/* #include "inlines.h" */
#include "screen.h"
#include "smartcard.h"
#include "swis.h"

#include "Sockets/in.h"

ErrorPtr err;

#ifdef MODEM
extern char *enternnpc, *proceed, *proceedc;
#else
extern char *enternpc;
#endif

extern BOOL redial;

extern void osmodfree(char *);
extern char *osmodget(int);
extern char *cmos_number(void);
extern int  ncregenq(char *, void *, int);
extern void oscli(char *);

typedef struct
{
  unsigned int cntrl;
  char *string;
  void *next;
} script_list;

char *quote(char *in, char *out)
{
  char c;
  int inl = 0, outl = 0;

  do
  {
    c = in[inl];

    switch (c)
    {
    case '<':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'l';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    case '>':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'g';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    case '&':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'a';
      out[outl++] = 'm';
      out[outl++] = 'p';
      out[outl++] = ';';
      break;

    case '"':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'q';
      out[outl++] = 'u';
      out[outl++] = 'o';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    default:
      out[outl++] = in[inl++];
      break;
    }
  } while (c);
  
  return(out);
}

BOOL CreateFiles(carddata *scard)
{
  BOOL exitstat = FALSE;
  FILE *out;
  int scstatus, length;
  char *ht_id = NULL, *ht_pw = NULL;
#ifdef MODEM
  char buffer[512], dns2[80], *ht_num = NULL; 
  int big, byte;
  struct in_addr ina, inb;
#endif

  _swix(NCRegistry_Status, _OUT(0), &scstatus);
  if ((scstatus & 0x05) == 0) /* No Card or not valid */
  {
    if ((screen_size.x >> screen_eig.x) >= 1024)
    {
      NewPage("file:/WWWRoot:InsertCVB");
    }
    else if ((screen_size.x >> screen_eig.x) >= 800)
    {
      NewPage("file:/WWWRoot:InsertCB");
    }
    else
    {
      NewPage("file:/WWWRoot:InsertC");
    }
    goto genexit;
  }
 if ((scstatus & 0x10) != 0) /* Card Locked */
  {
    NewPage("file:/WWWRoot:EnterC");
    goto genexit;
  }
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>", 75))
    goto genexit;
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>.Sennen", 75))
    goto genexit;
#ifdef MODEM
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>.Sennen.Files", 75))
    goto genexit;
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>.Sennen.Files.PPP", 75))
    goto genexit;

  if (scard->loginid)
    free(scard->loginid);
  length = ncregenq("LOGIN_ID", scard->loginid, 0);
  scard->loginid = malloc(length + 4);
  if (length == 0 || scard->loginid == NULL)
  {
    goto genexit;
  }
  ncregenq("LOGIN_ID", scard->loginid, length + 2);
  ht_id = malloc(3 * length + 4);
  if (ht_id == NULL)
  {
    goto genexit;
  }
  quote(scard->loginid, ht_id);

  if (scard->loginsecret)
    free(scard->loginsecret);
  length = ncregenq("LOGIN_SECRET", scard->loginsecret, 0);
  scard->loginsecret = malloc(length + 4);
  if (length == 0 || scard->loginsecret == NULL)
  {
    goto genexit;
  }
  ncregenq("LOGIN_SECRET", scard->loginsecret, length + 2);
  ht_pw = malloc(3 * length + 4);
  if (ht_pw == NULL)
  {
    goto genexit;
  }
  quote(scard->loginsecret, ht_pw);

  if (!redial)
  {
    ncregenq("DNS_PRIMARY", &ina.s_addr, 16);
    ncregenq("DNS_BACKUP", &inb.s_addr, 16);
    if (inb.s_addr == 0)
      inb.s_addr = ina.s_addr;
    strcpy(dns2, inet_ntoa(inb));
    sprintf(buffer, "Set Inet$Resolvers %s %s", inet_ntoa(ina), dns2);
    oscli(buffer);
    ncregenq("ISP_DOMAIN", dns2, 80);
    sprintf(buffer, "Set Inet$LocalDomain %s", dns2);
    oscli(buffer);
    strcpy(dns2, scard->loginid);
    {
      char *c = dns2;
  
      while(*c)
      {
        if (!isalnum(*c) && *c != '_')
          *c = '_';
        c++;
      }
    }
    sprintf(buffer, "Set Inet$HostName %s", dns2);
    oscli(buffer);
    oscli("ResolverConfig");
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Files.PPP.Options", "w"), out)
  {
    fprintf(out, "ModemCard:0\n115200\nname %s\nnoipdefault\n", scard->loginid);
    if (ncregenq("STATIC_IP", &ina.s_addr, 16), ina.s_addr)
      fprintf(out, "%s:\n", inet_ntoa(ina));
    fprintf(out, "defaultroute\nmodem\ncrtscts\nasyncmap 0\n");
#ifndef NO_MIN_MTU    
    fprintf(out, "mtu 296\nmru 296\n");
#endif    
    _swix(OS_Byte, _IN(0) | _IN(1) | _OUT(2), 161, 0xA2, &byte);
    if (byte & 0x3F)
      fprintf(out, "idle-disconnect %d\n", (byte & 0x3F) * 60);
    fclose(out);
  }
  else
  {
    goto genexit;
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Files.Script", "w"), out)
  {
    char *scrbuff;
    script_list *list;

    big = ncregenq("SEND_EXPECT", buffer, 0);
    if (scrbuff = osmodget(big + 10), scrbuff == NULL)
    {
      fclose(out);
      goto genexit;
    }

    ncregenq("SEND_EXPECT", scrbuff, big + 10);
    for (list = (script_list *) scrbuff; list != NULL; list = list->next)
    {
      if ((list->cntrl & 0xFF) < 3)
        fprintf(out, "%s\n", list->string ? list->string : "");
    }
    osmodfree(scrbuff);

    fclose(out);
  }
  else
  {
    exitstat = FALSE;
    goto genexit;
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Files.PPP.PAPSecrets", "w"), out)
  {
    fprintf(out, "%s * %s\n", scard->loginid, scard->loginsecret); 
    fclose(out);
  }
  else
  {
    goto genexit;
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Files.PPP.CHAPSecret", "w"), out)
  {
    fprintf(out, "%s * %s\n", scard->loginid, scard->loginsecret); 
    fclose(out);
  }
  else
  {
    goto genexit;
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.EnterNNPC", "w"), out)
  {
    if (scard->pstnnum)
      free(scard->pstnnum);
    length = ncregenq("PSTN_NUM", scard->pstnnum, 0);
    scard->pstnnum = malloc(length + 4);
    if (length == 0 || scard->pstnnum == NULL)
    {
      goto genexit;
    }
    ncregenq("PSTN_NUM", scard->pstnnum, length + 2);
    ht_num = malloc(3 * length + 4);
    if (ht_num == NULL)
    {
      goto genexit;
    }
    quote(scard->pstnnum, ht_num);

    fprintf(out, enternnpc, ht_num, ht_id, ht_pw);
    fclose(out);
    _swix(OS_File, _INR(0, 2), 18, "<Wimp$ScrapDir>.Sennen.EnterNNPC", 0xFAF);
  }
  else
  {
    goto genexit;
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Proceed", "w"), out)
  {
    fprintf(out, proceed, ht_id);
    fclose(out);
    _swix(OS_File, _INR(0, 2), 18, "<Wimp$ScrapDir>.Sennen.Proceed", 0xFAF);
  }
  else
  {
    goto genexit;
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.ProceedC", "w"), out)
  {
    fprintf(out, proceedc, ht_id);
    fclose(out);
    _swix(OS_File, _INR(0, 2), 18, "<Wimp$ScrapDir>.Sennen.ProceedC", 0xFAF);
    exitstat = TRUE;
  }
  else
  {
    goto genexit;
  }
#else
  if (scard->loginid)
    free(scard->loginid);
  length = ncregenq("LOGIN_ID", scard->loginid, 0);
  scard->loginid = malloc(length + 4);
  if (length == 0 || scard->loginid == NULL)
  {
    goto genexit;
  }
  ncregenq("LOGIN_ID", scard->loginid, length + 2);
  ht_id = malloc(3 * length + 4);
  if (ht_id == NULL)
  {
    goto genexit;
  }
  quote(scard->loginid, ht_id);

  if (scard->loginsecret)
    free(scard->loginsecret);
  length = ncregenq("LOGIN_SECRET", scard->loginsecret, 0);
  scard->loginsecret = malloc(length + 4);
  if (length == 0 || scard->loginsecret == NULL)
  {
    goto genexit;
  }
  ncregenq("LOGIN_SECRET", scard->loginsecret, length + 2);
  ht_pw = malloc(3 * length + 4);
  if (ht_pw == NULL)
  {
    goto genexit;
  }
  quote(scard->loginsecret, ht_pw);

  if (out = fopen("<Wimp$ScrapDir>.Sennen.EnterNPC", "w"), out)
  {
    fprintf(out, enternpc, ht_id, ht_pw);
    fclose(out);
    _swix(OS_File, _INR(0, 2), 18, "<Wimp$ScrapDir>.Sennen.EnterNPC", 0xFAF);
    exitstat = TRUE;
  }
  else
  {
    goto genexit;
  }
#endif
genexit:
  if (ht_id)
    free(ht_id);
  if (ht_pw)
    free(ht_pw);
#ifdef MODEM
  if (ht_num)
    free(ht_num);
#endif    
  return(exitstat);
}
