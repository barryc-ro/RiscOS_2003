#include <stdio.h>
#include <string.h>

#include "defs.h"
#include "inlines.h"
#include "smartcard.h"
#include "swicall.h"

#include "Sockets/in.h"

ErrorPtr err;

extern char *enternnpc, *proceed, *proceedc;

extern void osmodfree(char *);
extern char *osmodget(int);
extern char *cmos_number(void);
extern int  ncregenq(char *, void *, int);

typedef struct
{
  unsigned int cntrl;
  char *string;
  void *next;
} script_list;

BOOL CreateFiles(carddata *scard)
{
  char buffer[512], dns2[40];
  FILE *out;
  int big, scstatus;
  struct in_addr ina, inb;

  swi(NCRegistry_Status, OUT, R0, &scstatus, END);
  if ((scstatus & 0x10) != 0) /* Card Not Locked */
  {
    oscli("Set Sennen$Newpage file:/WWWRoot:EnterC");
    return(FALSE);
  }
  if (swi(OS_File, R0, 8, R1, "<Wimp$ScrapDir>", R4, 75, END))
    return(FALSE);
  if (swi(OS_File, R0, 8, R1, "<Wimp$ScrapDir>.Sennen", R4, 75, END))
    return(FALSE);
  if (swi(OS_File, R0, 8, R1, "<Wimp$ScrapDir>.Sennen.Files", R4, 75, END))
    return(FALSE);
  if (swi(OS_File, R0, 8, R1, "<Wimp$ScrapDir>.Sennen.Files.PPP", R4, 75, END))
    return(FALSE);

  ncregenq("DNS_PRIMARY", &ina.s_addr, 16);
  ncregenq("DNS_BACKUP", &inb.s_addr, 16);
  strcpy(dns2, inet_ntoa(inb));
  sprintf(buffer, "Set Inet$Resolvers %s %s", inet_ntoa(ina), dns2);
  oscli(buffer);

  ncregenq("LOGIN_ID", scard->loginid, 40);
  ncregenq("LOGIN_SECRET", scard->loginsecret, 40);

  if (out = fopen("<Wimp$ScrapDir>.Sennen.Files.PPP.Options", "w"), out)
  {
    fprintf(out, "ModemCard:0\n115200\nname %s\nnoipdefault\n", scard->loginid);
    if (ncregenq("STATIC_IP", &ina.s_addr, 16), ina.s_addr)
      fprintf(out, "%s:\n", inet_ntoa(ina));
    fprintf(out, "defaultroute\nmodem\ncrtscts\n");
    fprintf(out, "asyncmap 0\nmtu 296\nmru 296\nidle-disconnect 300\n");
    fclose(out);
  }
  else
  {
    return(FALSE);
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Files.Script", "w"), out)
  {
    char *scrbuff;
    script_list *list;

    big = ncregenq("SEND_EXPECT", buffer, 0);
    if (scrbuff = osmodget(big + 10), scrbuff == NULL)
    {
      fclose(out);
      return(FALSE);
    }

    ncregenq("SEND_EXPECT", scrbuff, big + 10);
    for (list = (script_list *) scrbuff; list != NULL; list = list->next)
    {
      if ((list->cntrl & 0xFF) < 3)
        fprintf(out, "%s\n", list->string);
    }
    osmodfree(scrbuff);

    fclose(out);
  }
  else
  {
    return(FALSE);
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Files.PPP.PAPSecrets", "w"), out)
  {
    fprintf(out, "%s * %s\n", scard->loginid, scard->loginsecret); 
    fclose(out);
  }
  else
  {
    return(FALSE);
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Files.PPP.CHAPSecret", "w"), out)
  {
    fprintf(out, "%s * %s\n", scard->loginid, scard->loginsecret); 
    fclose(out);
  }
  else
  {
    return(FALSE);
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.EnterNNPC", "w"), out)
  {
    ncregenq("PSTN_NUM", scard->pstnnum, 40);
    fprintf(out, enternnpc, scard->pstnnum, scard->loginid, scard->loginsecret);
    fclose(out);
    swi(OS_File, R0, 18, R1, "<Wimp$ScrapDir>.Sennen.EnterNNPC", R2, 0xFAF, END);
  }
  else
  {
    return(FALSE);
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.Proceed", "w"), out)
  {
    fprintf(out, proceed, scard->loginid);
    fclose(out);
    swi(OS_File, R0, 18, R1, "<Wimp$ScrapDir>.Sennen.Proceed", R2, 0xFAF, END);
  }
  else
  {
    return(FALSE);
  }
  if (out = fopen("<Wimp$ScrapDir>.Sennen.ProceedC", "w"), out)
  {
    fprintf(out, proceedc, scard->loginid);
    fclose(out);
    swi(OS_File, R0, 18, R1, "<Wimp$ScrapDir>.Sennen.ProceedC", R2, 0xFAF, END);
  }
  else
  {
    return(FALSE);
  }
  return(TRUE);
}
