#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

#include "cmhg_defs.h"
#include "driver.h"
#include "inlines.h"
#include "kernel.h"
#include "screen.h"
#include "smartcard.h"
#include "swicall.h"

#include "Sockets/in.h"

#ifndef TRUE
#define FALSE 0
#define TRUE (!FALSE)
#endif

extern int RD_callback_entry  (_kernel_swi_regs *r, void *pw);
extern int RD_callafter_entry (_kernel_swi_regs *r, void *pw);

extern void *resources_base(void);

extern void render(char *, int, int *);
extern void osmodfree(char *);
extern char *osmodget(int);
extern void callback(void *, void *);
extern int  ncregenq(char *, void *, int);

#define Service_ResourceFSStarting 0x60
#define Service_ShutdownComplete   0x80
#define Service_NCRegistryStatus   0xBA

#define int16 short
#define int32 long

typedef void (*P_FSStartingFN)(void *r0);

extern char *resourcefs;

extern int matrix[], mini[];

extern char *backdrop,    *connect,     *onhook,    *offhook,    *ppp;
extern int   backdrop_len, connect_len,  onhook_len, offhook_len, ppp_len;

void *pwp;

/* extern int s; */
int now;

int pingcount = 0, rxcount = 0;

char *incoming;
char *buffer;

char *driver_name = "ModemCard";
int driver_dev    = 0;
int driver_baud   = 115200;

BOOL restart   = FALSE;
BOOL firstcall = TRUE;
BOOL redial    = FALSE;

carddata card;

struct in_addr innfs;

extern block_driver driver;

void DoDial(void);

extern char *dialscr[][2];

static char *Rip(char *text)
{
  char *c;

  while (c = strchr(text, '\n'), c)
    *c = '\0';
  while (c = strchr(text, '\r'), c)
    *c = '\0';
  return(text);
}

char *stristr (char *s, char *t)
{
  char *ss, *tt;
  int ls, lt;

  ls = strlen(s);
  lt = strlen(t);

  ss = s;
  tt = t;

  while (ls >= lt)
  {
    s = ss++;
    ls--;
    t = tt;

    while ((tolower(*s) == tolower(*t)) && *t != '\0')
    {
      s++;
      t++;
    }
    if ( *t == '\0' )
      return(--ss);
    else if ( *s == '\0' )
      return(0);
  }
  return(0);
}

BOOL Driver_Get(char *expect)
{
  int c;
  static int rxchars = 0;

  if ((c = (*driver) (DRIVER_GETBYTE, driver_dev)) >= 0)
  {
#ifndef SILENT
    printf("%c", c);
#endif
    incoming[rxchars++] = c;
    incoming[rxchars]   = '\0';

    if (expect)
    {
      if (stristr(incoming, expect) != NULL)
      {
        rxchars = 0;
        return(TRUE);
      }
      if (c == '\r' || c == '\n')
      {
#ifdef ANIMAL    
        if (strstr(incoming, "CONNECT") != NULL)
        {
          if (atoi(&incoming[8]) < 9600)
            render(tortoise, tortoise_len, scale());
          else
            render(hare, hare_len, scale());
        }
#endif      
        rxchars = 0;
      }
    }
    if (strstr(incoming, "BUSY") != NULL ||
        strstr(incoming, "NO CARR") != NULL ||
        strstr(incoming, "NO DIAL") != NULL)
    {
      restart = TRUE;
      rxchars = 0;
    }
  }
  return(strlen(expect) == 0);
}

void pause(int cs)
{
  int now, start = monotonic_time();

  do
  {
    now = monotonic_time();
    (*driver) (DRIVER_POLL, driver_dev);
  } while ((now - start) < cs);
}

void delay(int sleep)
{
  int now = monotonic_time();
 
  while ((monotonic_time() - now) < sleep)
  {
    (*driver) (DRIVER_POLL, driver_dev);
    Driver_Get("");
  }
}

void Twiddle(void)
{
  (*driver) (DRIVER_CONTROLLINES, driver_dev, 0);
  delay(100);
  (*driver) (DRIVER_CONTROLLINES, driver_dev, 3);
  delay(50);
}

void DumpIt(void)
{
  int lines;

  if (innfs.s_addr)
  {
    swi(NFS_Dismount, R0, 0, R1, "NFSBoot", END);
  }
  lines = ((*driver) (DRIVER_MODEMCONTROL, driver_dev));
  if (lines & 8) /* DCD - Online */
  {
    oscli("PPPDisconnect");
    pause(100);
    Twiddle();
  }
}

static BOOL DoNFS(struct in_addr ina)
{
  char mount[80];

  ncregenq("NFS_MOUNT", mount, 80);
  if (swi(NFS_SetUser, R0, inet_ntoa(ina), R1, "nobody", R2, "", END))
    return(FALSE);

  if (swi(NFS_Mount, R0, inet_ntoa(ina), R1, "NFSBoot", R2, mount, END))
    return(FALSE);

  return(TRUE);
}

static int dialplease = 0;

int RD_callback_handler (_kernel_swi_regs *r, void *pw)
{
  switch(dialplease)
  {
  case 5:
    {
      int ret;
      static int tries = 0;
    
      err = swi(NCRegistry_Write, R0, 0, R1, 0, R2, 0, OUT, R0, &ret, END);
      if (err == NULL && ret == -7 && tries < 10)
      {
        dialplease = 5;
        callafter(100, (void *) RD_callafter_entry, pwp);
      }
      else if (err != NULL || tries > 9)
      {
        oscli("Set Sennen$Newpage file:/WWWRoot:DamageCrd");
        tries = 0;
      }
      else
      {
        tries = 0;
      }
    }
    break;

  case 4:
    oscli("Set Sennen$Newpage file:/WWWRoot:ServerNR");
    break;

  case 1:
    {
      dialplease = 0;
      DoDial();
    }
    break;

  case 2:
    {
      dialplease = 0;
      removeticker((void *) RD_callafter_entry, pw);

#ifndef SILENT
      printf(" Up\n");
#endif
      render(connect, connect_len, scale());

      if (!redial)
      {
        char url[80];
        int nfsfl;
        struct in_addr ina;
      
        ncregenq("URL_INIT", url, 80);
        sprintf(buffer, "Set Sennen$NewPage %s", url);
        oscli(buffer);
        sprintf(buffer, "Set NCFresco$Home %s", url);
        oscli(buffer);

        ncregenq("NFS_TYPE", &nfsfl, 4);
        if (nfsfl)
        {
          ncregenq("FSERV_PRIMARY", &ina.s_addr, sizeof(struct in_addr));
          if (DoNFS(ina))
          {
            innfs = ina;
          }
          else
          {
            ncregenq("FSERV_BACKUP", &ina.s_addr, sizeof(struct in_addr));
            if (DoNFS(ina))
              innfs = ina;
            else
              memset(&innfs, '\0', sizeof(struct in_addr));
          }
          if (innfs.s_addr)
            oscli("Obey NFS::NFSBoot.$.!NFSBoot.!Run");
        }
      }
    }
    break;
  }
  return(TRUE);
}

int RD_callafter_handler (_kernel_swi_regs *r, void *pw)
{
  callback((void *) RD_callback_entry, pwp);

  return(TRUE);
}

void Driver_Send(char *string)
{
  int loop;
 
  for (loop = 0; loop < strlen(string); loop++)
  {
    while ((*driver) (DRIVER_PUTBYTE, driver_dev, string[loop]) == -1)
      (*driver) (DRIVER_POLL, driver_dev);
  }
}

char *cmos_number(void)
{
  static char phone[20];
  int byte;

  swi(OS_Byte, R0, 161, R1, 0x9E, OUT, R2, &byte, END);
  if (byte & 0x20)
    phone[0] = 'P';
  else
    phone[0] = 'T';
  if (byte & 0x0F)
  {
    phone[1] = (byte & 0x0F) - 1 + 0x30;
    if (byte & 0x10)
      phone[2] = 'W';
    else
      phone[2] = ',';
    phone[3] = '\0';
  }
  else
  {
    phone[1] = '\0';
  }
  return(phone);
}

void DoDial(void)
{
  char expect[24], send[44];
  FILE *fin;
  int step = 0;

#ifndef SLIENT
  vdu4();
#endif 

  Screen_CacheModeInfo(matrix, mini);
  render(backdrop, backdrop_len, scale());

  if (CreateFiles(&card) == FALSE)
    return;

  if (redial == FALSE)
  {
    (*driver) (DRIVER_INITIALISE,   driver_dev);
    (*driver) (DRIVER_WORDFORMAT,   driver_dev, 0);
    (*driver) (DRIVER_CONTROLLINES, driver_dev, 3);
    (*driver) (DRIVER_TXSPEED,      driver_dev, driver_baud);
    (*driver) (DRIVER_RXSPEED,      driver_dev, driver_baud);
  }

  delay(50);
  if (fin = fopen("<Wimp$ScrapDir>.Sennen.Files.Script", "r"), fin == NULL)
    return;

  render(onhook, onhook_len, scale());
  delay(50);
  do
  {
    step = 0;
    if (restart)
    {
      render(onhook, onhook_len, scale());
      Twiddle();
      restart = FALSE;
      delay(500);
    }
    render(offhook, offhook_len, scale());
   
    fseek(fin, 0, SEEK_SET);
    while (!restart && fgets(expect, 20, fin))
    {
      Rip(expect);
      fgets(send, 40, fin);
      Rip(send);
      do
      {
        (*driver) (DRIVER_POLL, driver_dev);
      } while (!Driver_Get(expect) && !restart);
 
      if (!restart && strlen(send) > 0)
      {
        delay(50);
        Driver_Send(send);
        if (strcmp(send, "ATDT") == 0)
        {
          Driver_Send(cmos_number());
          Driver_Send(card.pstnnum);
        }
        Driver_Send("\r");
      }
    }
  } while (FALSE && restart);
  fclose(fin);

  if (!restart)
  { 
    render(ppp, ppp_len, scale());
 
    oscli("PPPConnect");
 
    dialplease = 4;
    restart = TRUE;
    callafter(3000, (void *) RD_callafter_entry, pwp);
  }
  else
  {
    oscli("Set Sennen$Newpage file:/WWWRoot:ServerB");
  }
}

/* undo URL translation of '+' for ' ' in place */
void plus_to_space(char *linebuff, int len)
{
  for (; len; linebuff++, len--)
  {
    if (*linebuff == '+')
      *linebuff = 0x20;
  }
}

/* undo URL translation of special chars to %xx format in place -
returns new string length */
char *UnEscape(char *i)
{
  char hex, *l, *o = i;
  int bytes, len;

  len = strlen(i);
  plus_to_space(i, len);
 
  while (len)
  {
    if (*i++ == '%')
    {
      hex = (*i >= 'A' ? ((*i & 0xdf) - 'A') + 10 : *i - '0') * 16 + (*(i + 1) >= 'A' ? ((*(i + 1) & 0xdf) - 'A') + 10 : *(i + 1) - '0');
      *(++i - 2) = hex;

      for (l = ++i, bytes = len - 3; bytes; bytes--,l++)
        *(l-2) = *l;
      len -= 3;
      i   -= 2;
      continue;
    }
    len--;
  }
  *i = 0;
  return(o);
}

/* Standard module routines */

_kernel_oserror *Caradon_cmd (char *arg_string, int argc, int cmd_no, void *pw)
{
  switch (cmd_no)
  {
  case CMD_ReDial:
    {
      dialplease = 1;
      restart = (atoi(arg_string) > 0);
      redial  = (atoi(arg_string) > 0);
      callafter(100, (void *) RD_callafter_entry, pwp);
    }
    break;

  case CMD_Twiddle:
    {
      int lines = ((*driver) (DRIVER_MODEMCONTROL, driver_dev));
     
      if (lines & 8) /* DCD - Online */
      {
        oscli("PPPDisconnect");
        pause(100);
      }
      Twiddle();
    }
    break;

  case CMD_MWait:
    {
      pause(500);
    }
    break;

  case CMD_CDN_StartUp:
    {
      dialplease = 2;
      swi(OS_ServiceCall, R1, 0xB4, R2, 4, END); /* Going up */
      callafter(10, (void *) RD_callafter_entry, pwp);
    }
    break;

  case CMD_CDN_GoingDown:
    {
      swi(OS_ServiceCall, R1, 0xB4, R2, 0, END); /* Going down */
    }
    break;

  case CMD_CDN_Dial:
    {
      dialplease = 1;
      restart = FALSE;
      redial  = FALSE;
      callafter(100, (void *) RD_callafter_entry, pwp);
    }
    break;

  case CMD_CDN_Change:
    {
      BOOL needssaving = FALSE;
      char *and, *endbit, *nextbit, *value;
      char buffer[256], code1[20], code2[20];
      int codes = 0, length, scstatus, ret;
   
      strcpy(buffer, strchr(arg_string, '?') + 1);
      Rip(buffer);
      nextbit = buffer;
      endbit  = buffer + strlen(buffer);
   
      oscli("Set Sennen$Newpage file:/WWWDyn:ProceedC");

      while (nextbit < endbit)
      {
        if (and = strchr(nextbit, '&'), and != NULL)
          *and = '\0';
        length = strlen(nextbit);
     
        if (strncmp(nextbit, "num=", strlen("num=")) == NULL)
        {
          value = nextbit + strlen("num=");
          strcpy(card.pstnnum, UnEscape(value));
          swi(NCRegistry_Write, R0, "PSTN_NUM", R1, card.pstnnum, R2, strlen(card.pstnnum) + 1, OUT, R0, &ret, END);
          needssaving = TRUE;
        }
        else if (strncmp(nextbit, "name=", strlen("name=")) == NULL)
        {
          value = nextbit + strlen("name=");
          strcpy(card.loginid, UnEscape(value));
          swi(NCRegistry_Write, R0, "LOGIN_ID", R1, card.loginid, R2, strlen(card.loginid) + 1, OUT, R0, &ret, END);
          needssaving = TRUE;
        }
        else if (strncmp(nextbit, "pass=", strlen("pass=")) == NULL)
        {
          value = nextbit + strlen("pass=");
          strcpy(card.loginsecret, UnEscape(value));
          swi(NCRegistry_Write, R0, "LOGIN_SECRET", R1, card.loginsecret, R2, strlen(card.loginsecret) + 1, OUT, R0, &ret, END);
          needssaving = TRUE;
        }
        else if (strncmp(nextbit, "code=", strlen("code=")) == NULL)
        {
          value = nextbit + strlen("code=");
          UnEscape(value);
          swi(NCRegistry_Authenticate, R0, value, R1, strlen(value), END);
        }
        else if (strncmp(nextbit, "code1=", strlen("code1=")) == NULL)
        {
          value = nextbit + strlen("code1=");
          strcpy(code1, value);
          codes |= 1;
        }
        else if (strncmp(nextbit, "code2=", strlen("code2=")) == NULL)
        {
          value = nextbit + strlen("code2=");
          strcpy(code2, value);
          codes |= 2;
        }
        nextbit += (length + 1);
      }
      if (needssaving)
      {
        swi(NCRegistry_Write, R0, 0, R1, 0, R2, 0, OUT, R0, &ret, END);
        if (ret == -7)
        {
          dialplease = 5;
          callafter(50, (void *) RD_callafter_entry, pwp);
        }
      }

      if (codes == 3)
      {
        if (strcmp(code1, code2) == NULL)
        {
          codes = 4; /* Write locking code */
          swi(NCRegistry_ChangeSmartCardCHV, R0, 1, R1, code1, R2, strlen(code1), END);
          oscli("Set Sennen$Newpage file:/WWWDyn:ProceedC");
        }
        else
        {
          oscli("Set Sennen$Newpage file:/WWWRoot:BadCodes");
        }
      }
      else
      {
        swi(NCRegistry_Status, OUT, R0, &scstatus, END);
        if ((scstatus & 0x08) == 0) /* Card Not Locked */
        {
          oscli("Set Sennen$Newpage file:/WWWRoot:SaveCode");
        }
      }
      CreateFiles(&card);
    }
    break;

  case CMD_CDN_MakeFiles:
    {
      CreateFiles(&card);
    }
    break;
  }
  return (NULL);
}

_kernel_oserror *Caradon_modfinal (int fatal, int podule, void *pw)
{
  swi(ResourceFS_DeregisterFiles, R0, resources_base(), END);
  osmodfree(incoming);
  osmodfree(buffer);
  return(NULL);
}

_kernel_oserror *main_service(int service, _kernel_swi_regs *r,
                              void *workspace)
{
  int scstatus, scchange;
 
  workspace = workspace;

  switch (service)
  {
  case Service_ResourceFSStarting:
    ((P_FSStartingFN)(r->r[2]))(resources_base());
    break;

  case Service_NCRegistryStatus:
    scstatus = r->r[2];
    scchange = r->r[4];
    if ((scstatus & 0x01) == 0) /* No card */
    {
      DumpIt();
      oscli("Set Sennen$Newpage file:/WWWRoot:InsertC");
    }
    else if ((scstatus & 0x10 & scchange) != 0) /* Card Locked */
    {
      oscli("Set Sennen$Newpage file:/WWWRoot:EnterC");
    }
    else if ((scstatus & 0x100 & scchange) != 0) /* Bad Auth */
    {
      oscli("Set Sennen$Newpage file:/WWWRoot:InvalidCde");
    }
    else if ((scstatus & 0x20 & scchange) != 0)
    {
      if ((scstatus & 0x08) == 0)
        oscli("Set Sennen$Newpage file:/WWWRoot:SaveCode");
    }
    else if ((scstatus & 0x04 & scchange) != 0) /* Card inserted and valid */
    {
      char loginid[40], pstnnum[40];
      int cardwrite;
 
      CreateFiles(&card);
     
      if (ncregenq("CLIENT_UPDATE", &cardwrite, 4) < 0)
      {
        oscli("Set Sennen$Newpage file:/WWWRoot:DamageCrd");
        break;
      }

      ncregenq("LOGIN_ID", loginid, 40);
      ncregenq("PSTN_NUM", pstnnum, 40);
 
      if (strlen(loginid) == 0 || strlen(pstnnum) == 0)
        oscli("Set Sennen$Newpage file:/WWWDyn:EnterNNPC");
      else if (cardwrite)
        oscli("Set Sennen$Newpage file:/WWWDyn:ProceedC");
      else
        oscli("Set Sennen$Newpage file:/WWWDyn:Proceed");
    }
    else
    {
      oscli("Set Sennen$Newpage file:/WWWRoot:InvalidCrd");
    }
    break;

  case Service_ShutdownComplete:
    DumpIt();
    break;
  }

  return(NULL);
}

_kernel_oserror *Caradon_modinit (char *cmd_tail, int podule_base, void *pw)
{
  pwp = pw;

  swi(ResourceFS_RegisterFiles, R0, resources_base(), END);
  incoming = osmodget(256);
  buffer   = osmodget(BUFSIZ);

  return(NULL);
}
