#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

#ifdef ETHERNET
#include "cmhg_ether.h"
#else
#include "cmhg_modem.h"
#endif
#include "driver.h"
/* #include "inlines.h" */
#include "kernel.h"
#include "screen.h"
#include "smartcard.h"
#include "swis.h"
#include "wimp.h"

#include "Sockets/in.h"

#ifndef TRUE
#define FALSE 0
#define TRUE (!FALSE)
#endif

extern int CDN_callback_entry  (_kernel_swi_regs *r, void *pw);
extern int CDN_callafter_entry (_kernel_swi_regs *r, void *pw);
extern int CDN_upcall_entry    (_kernel_swi_regs *r, void *pw);

extern void *resources_base(void);

extern void render(char *, int, int *);
extern void osmodfree(char *);
extern char *osmodget(int);
extern void callback(int (*irq_entry)(), void *);
extern void callafter(int, int (*irq_entry)(), void *);
extern void removeticker(int (*irq_entry)(), void *);
extern int  ncregenq(char *, void *, int);
extern int  monotonic_time(void);
extern void oscli(char *);

#define vdu4() _swix(0x104, 0)
#define os_removecursors()  _swix(OS_RemoveCursors, 0)
#define os_restorecursors() _swix(OS_RestoreCursors, 0)

#define Service_ModeChange         0x46
#define Service_ResourceFSStarting 0x60
#define Service_ShutDown           0x7E
#define Service_ShutdownComplete   0x80
#define Service_DiallerStatus      0xB4
#define Service_NCRegistryStatus   0xBA
 
#define int16 short
#define int32 long

typedef void (*P_FSStartingFN)(void *r0);

extern int matrix[], mini[];

#ifdef MODEM
extern char *backdrop,    *connect,     *onhook,    *offhook,    *ppp;
extern int   backdrop_len, connect_len,  onhook_len, offhook_len, ppp_len;

char *driver_name = "ModemCard";
int driver_dev    = 0;
int driver_baud   = 115200;
#endif

void *pwp;

/* extern int s; */
int now;

int oldptr = 1;

int dialplease = CALLBACK_NOOP;

char *incoming;
char *buffer;

char goodcode[20], lastcode[20];
char *nocode = "\xFFSaDdEAd";

BOOL restart   = FALSE;
BOOL online    = FALSE;
BOOL redial    = FALSE;
BOOL silent    =  TRUE;
BOOL doingit   = FALSE;
BOOL semaphore = FALSE;

carddata card;

struct in_addr innfs;

extern block_driver driver;

void DoDial(void);

extern char *dialscr[][2];

static char *Rip(char *text)
{
  char *c;

  while (c = strchr(text, '\n'), c)
    *c = '\0';
  while (c = strchr(text, '\r'), c)
    *c = '\0';
  return(text);
}

char *stristr (char *s, char *t)
{
  char *ss, *tt;
  int ls, lt;

  ls = strlen(s);
  lt = strlen(t);

  ss = s;
  tt = t;

  while (ls >= lt)
  {
    s = ss++;
    ls--;
    t = tt;

    while ((tolower(*s) == tolower(*t)) && *t != '\0')
    {
      s++;
      t++;
    }
    if ( *t == '\0' )
      return(--ss);
    else if ( *s == '\0' )
      return(0);
  }
  return(0);
}

#ifdef MODEM
BOOL Driver_Get(char *expect)
{
  int c;
  static int rxchars = 0;

  while (c = ((*driver) (DRIVER_GETBYTE, driver_dev)), c >= 0 && !restart)
  {
    if (!silent)
      printf("%c", c);

    incoming[rxchars++] = c;
    incoming[rxchars]   = '\0';

    if (expect)
    {
      if (stristr(incoming, expect) != NULL)
      {
        rxchars = 0;
        return(TRUE);
      }
      if (c == '\r' || c == '\n')
      {
        rxchars = 0;
      }
    }
    if (strstr(incoming, "BUSY") != NULL)
    {
      NewPage("file:/WWWRoot:ServerB");
      restart = TRUE;
      rxchars = 0;
    }
    else if (strstr(incoming, "NO CARRIER") != NULL)
    {
      NewPage("file:/WWWRoot:ErrorNC");
      restart = TRUE;
      rxchars = 0;
    }
    else if (strstr(incoming, "NO DIALTONE") != NULL)
    {
      NewPage("file:/WWWRoot:ErrorDT");
      restart = TRUE;
      rxchars = 0;
    }
  }
  return(strlen(expect) == 0);
}

void pause(int cs)
{
  int now, start = monotonic_time();

  do
  {
    now = monotonic_time();
    (*driver) (DRIVER_POLL, driver_dev);
  } while ((now - start) < cs);
}

void delay(int sleep)
{
  int now = monotonic_time();
 
  while ((monotonic_time() - now) < sleep)
  {
    (*driver) (DRIVER_POLL, driver_dev);
    Driver_Get("");
  }
}

void Twiddle(void)
{
  (*driver) (DRIVER_CONTROLLINES, driver_dev, 0);
  delay(50);
  (*driver) (DRIVER_CONTROLLINES, driver_dev, 3);
  delay(50);
}

void DumpIt(BOOL filestoo)
{
  restart = TRUE;
  if (dialplease != CALLBACK_NOOP)
  {
    removeticker(CDN_callafter_entry, pwp);
    dialplease = CALLBACK_NOOP;
  }
  if (innfs.s_addr && filestoo)
  {
    _swix(NFS_Dismount, _INR(0, 1), 0, "NFSBoot");
    _swix(NFS_Dismount, _INR(0, 1), 0, "NCDHome");
  }

  oscli("PPPDisconnect");
  pause(100);
  Twiddle();
  pause(100);
  _swix(OS_Module, _INR(0, 1), 3, "PPP");
  doingit = FALSE;
}

static BOOL DoNFS(struct in_addr ina)
{
  char mount[80];

  ncregenq("NFS_MOUNT", mount, 80);
  if (_swix(NFS_SetUser, _INR(0, 2), inet_ntoa(ina), "nobody", ""))
    return(FALSE);

  if (_swix(NFS_Mount,   _INR(0, 2), inet_ntoa(ina), "NFSBoot", mount))
    return(FALSE);

  return(TRUE);
}
#else
void pause(int cs)
{
  int now, start = monotonic_time();

  do
  {
    now = monotonic_time();
  } while ((now - start) < cs);
}

static void DumpIt(BOOL filestoo)
{
  if (dialplease != CALLBACK_NOOP)
  {
    removeticker(CDN_callafter_entry, pwp);
    dialplease = CALLBACK_NOOP;
  }
  if (filestoo)
    _swix(NFS_Dismount, _INR(0, 1), 0, "NCDHome");
}

static BOOL DoNFS(struct in_addr ina)
{
  char mount[80], loginid[40], passwd[40];

  ncregenq("LOGIN_ID",     loginid, 40);
  ncregenq("LOGIN_SECRET", passwd,  40);
  ncregenq("NFS_MOUNT",    mount,   80);

  if (_swix(NFS_SetUser, _INR(0, 2), inet_ntoa(ina), loginid, passwd))
    return(FALSE);

  if (_swix(NFS_Mount, _INR(0, 2), inet_ntoa(ina), "NCDHome", mount))
    return(FALSE);

  return(TRUE);
}
#endif

void NFS_Init(void)
{
  char url[80];
  int nfsfl;
  proxy server;
  struct in_addr ina;

  if (!redial)
  {
    ncregenq("URL_INIT", url, 80);
    NewPage(url);
    sprintf(buffer, "-url %s", url);
    _swix(OS_SetVarVal, _INR(0, 2) | _IN(4), "NCFresco$Home",
                      buffer, strlen(buffer), 0);
    _swix(OS_SetVarVal, _INR(0, 2) | _IN(4), "NCFresco$Welcome",
                      buffer, strlen(buffer), 0);
  }
  ncregenq("NFS_TYPE", &nfsfl, 4);
  if (nfsfl)
  {
    ncregenq("FSERV_PRIMARY", &server, sizeof(proxy));
    ina.s_addr = server.addr;
    if (DoNFS(ina))
    {
      innfs = ina;
    }
    else
    {
      ncregenq("FSERV_BACKUP", &server, sizeof(proxy));
    ina.s_addr = server.addr;
      if (DoNFS(ina))
        innfs = ina;
      else
        memset(&innfs, '\0', sizeof(struct in_addr));
    }
    if (innfs.s_addr)
    {
      message_block mb;

      memset (&mb, '\0', sizeof(message_block));
      mb.header.size   = 32;
      mb.header.action = 0x4AF84;
      _swix(TaskModule_SendMessage, _INR(0, 5), 0, &mb, 0, 0, 0, 0);
      if (redial)
      {
        if (!silent)
          vdu4();
#ifdef ETHERNET
        _swix(TaskModule_StartTask, _INR(0, 2),
              "Obey -c NFS::NCDHome.$.!Redial", 0, 0);
#else
        _swix(TaskModule_StartTask, _INR(0, 2),
              "Obey -c NFS::NFSBoot.$.!NFSBoot.!Redial", 0, 0);
#endif
      }
      else
      {
#ifdef ETHERNET
        _swix(TaskModule_StartTask, _INR(0, 2),
              "Obey -c NFS::NCDHome.$.!Run", 0, 0);
#else
        _swix(TaskModule_StartTask, _INR(0, 2),
              "Obey -c NFS::NFSBoot.$.!NFSBoot.!Run", 0, 0);
#endif
      }
    }
  }
}

int CDN_callback_handler (_kernel_swi_regs *r, void *pw)
{
  if (pw != pwp)
    return(1);
    
  switch(dialplease)
  {
  case CALLBACK_WRITE:
    {
      int ret;
      static int tries = 0;
    
      err = _swix(NCRegistry_Write, _INR(0, 2) | _OUT(0),
                                    0, 0, 0, &ret);
      if (err == NULL && ret == -7 && tries < 10)
      {
        dialplease = CALLBACK_WRITE;
        callafter(100, CDN_callafter_entry, pwp);
      }
      else if (err != NULL || tries > 9)
      {
        NewPage("file:/WWWRoot:DamageCrd");
        tries = 0;
      }
      else
      {
        tries = 0;
      }
    }
    break;

  case CALLBACK_BADCARD:
    NewPage("file:/WWWRoot:InvalidCrd");
    dialplease = CALLBACK_NOOP;
    semaphore  = FALSE;
    break;

  case CALLBACK_NOSERVER:
    NewPage("file:/WWWRoot:ServerNR");
    dialplease = CALLBACK_NOOP;
    doingit = FALSE;
    break;

#ifdef MODEM
  case CALLBACK_DODIAL:
    {
      dialplease = CALLBACK_NOOP;
      DoDial();
    }
    break;

  case CALLBACK_SAYUP:
    dialplease = CALLBACK_NOOP;
    _swix(OS_ServiceCall, _INR(1, 2), Service_DiallerStatus, 4); /* Up */
    screen_redraw(-1);
    NFS_Init();
    break;

  case CALLBACK_CONNECT:
    {
      doingit = FALSE;
      render(connect, connect_len, scale());
      removeticker(CDN_callafter_entry, pw);

      if (!silent)
        printf(" Up\n");

      dialplease = CALLBACK_SAYUP;
      callafter(500, CDN_callafter_entry, pwp);
    }
    break;
#endif
  }
  return(1);
}

int CDN_upcall_handler (_kernel_swi_regs *r, void *pw)
{
  if (r->r[0] == 0x0E && doingit)
  {
    restart = TRUE;
  }
  return(1);
}

int CDN_callafter_handler (_kernel_swi_regs *r, void *pw)
{
  if (pw == pwp)
    callback(CDN_callback_entry, pw);

  return(1);
}

#ifdef MODEM
void Driver_Send(char *string)
{
  int loop;
 
  for (loop = 0; loop < strlen(string); loop++)
  {
    while ((*driver) (DRIVER_PUTBYTE, driver_dev, string[loop]) == -1)
      (*driver) (DRIVER_POLL, driver_dev);
  }
}

char *cmos_number(void)
{
  static char phone[20];
  int byte;

  _swix(OS_Byte, _INR(0, 1) | _OUT(2), 161, 0x9E, &byte);
  if (byte & 0x20)
    phone[0] = 'P';
  else
    phone[0] = 'T';
  if (byte & 0x0F)
  {
    if ((byte & 0x0F) < 11)
      phone[1] = (byte & 0x0F) - 1 + 0x30;
    else if ((byte & 0x0F) == 11)
      phone[1] = '*';
    else if ((byte & 0x0F) == 12)
      phone[1] = '#';
    if (byte & 0x10)
      phone[2] = 'W';
    else
      phone[2] = ',';
    phone[3] = '\0';
  }
  else
  {
    phone[1] = '\0';
  }
  return(phone);
}

void DoDial(void)
{
  char expect[24], send[44];
  FILE *fin;
  int step = 0, state;

  if (!silent)
  {
    vdu4();
  }

  Screen_CacheModeInfo();
  render(backdrop, backdrop_len, scale());

  if (CreateFiles(&card) == FALSE)
  {
    doingit = FALSE;
    return;
  }

  os_removecursors();
  if (redial == FALSE)
  {
    (*driver) (DRIVER_INITIALISE,   driver_dev);
    (*driver) (DRIVER_WORDFORMAT,   driver_dev, 0);
    (*driver) (DRIVER_CONTROLLINES, driver_dev, 3);
    (*driver) (DRIVER_TXSPEED,      driver_dev, driver_baud);
    (*driver) (DRIVER_RXSPEED,      driver_dev, driver_baud);
  }

  delay(50);
  if (fin = fopen("<Wimp$ScrapDir>.Sennen.Files.Script", "r"), fin == NULL)
  {
    doingit = FALSE;
    return;
  }

  render(onhook, onhook_len, scale());
  delay(50);
  do
  {
    step = 0;
    if (restart)
    {
      render(onhook, onhook_len, scale());
      Twiddle();
      restart = FALSE;
      delay(500);
    }
    render(offhook, offhook_len, scale());
   
    fseek(fin, 0, SEEK_SET);
    while (!restart && fgets(expect, 20, fin))
    {
      int sentat = monotonic_time();
      
      Rip(expect);
      fgets(send, 40, fin);
      Rip(send);
      do
      {
        (*driver) (DRIVER_POLL, driver_dev);
        if ((monotonic_time() - sentat) > 6000)
        {
          restart = TRUE;
          NewPage("file:/WWWRoot:ServerB");
        }
        _swix(Standby_State, _IN(0) | _OUT(0), 0, &state);
        restart |= state;
      } while (!Driver_Get(expect) && !restart);
 
      if (!restart && strlen(send) > 0)
      {
        delay(50);
        Driver_Send(send);
        if (strcmp(send, "ATDT") == 0)
        {
          Driver_Send(cmos_number());
          Driver_Send(card.pstnnum);
        }
        Driver_Send("\r");
      }
    }
  } while (FALSE && restart);
  fclose(fin);

  if (!restart)
  { 
    render(ppp, ppp_len, scale());
 
    oscli("PPPConnect");

    dialplease = CALLBACK_NOSERVER;
    callafter(3000, CDN_callafter_entry, pwp);
    restart = TRUE;
  }
  else /* if (!redial) */
  {
    dialplease = CALLBACK_NOOP;
    doingit = FALSE;
    _swix(OS_ServiceCall, _INR(1, 2), Service_DiallerStatus, 0); /* down */
  }
  os_restorecursors();
}
#endif

/* undo URL translation of '+' for ' ' in place */
void plus_to_space(char *linebuff, int len)
{
  for (; len; linebuff++, len--)
  {
    if (*linebuff == '+')
      *linebuff = 0x20;
  }
}

/* undo URL translation of special chars to %xx format in place -
returns new string length */
char *UnEscape(char *i)
{
  char hex, *l, *o = i;
  int bytes, len;

  len = strlen(i);
  plus_to_space(i, len);
 
  while (len)
  {
    if (*i++ == '%')
    {
      hex = (*i >= 'A' ? ((*i & 0xdf) - 'A') + 10 : *i - '0') * 16 + (*(i + 1) >= 'A' ? ((*(i + 1) & 0xdf) - 'A') + 10 : *(i + 1) - '0');
      *(++i - 2) = hex;

      for (l = ++i, bytes = len - 3; bytes; bytes--,l++)
        *(l-2) = *l;
      len -= 3;
      i   -= 2;
      continue;
    }
    len--;
  }
  *i = 0;
  return(o);
}

/* Standard module routines */

_kernel_oserror *Caradon_cmd (char *arg_string, int argc, int cmd_no, void *pw)
{
  switch (cmd_no)
  {
#ifdef MODEM  
  case CMD_ReDial:
    if (doingit)
    {
      NewPage("file:/WWWRoot:BahHumbug"); 
    }
    else
    {
      int lines = ((*driver) (DRIVER_MODEMCONTROL, driver_dev));

      if ((lines & 8) == 0) /* DCD - Offline */
      {
        dialplease = CALLBACK_DODIAL;
        restart = FALSE;
        redial  = TRUE;
        doingit = TRUE;
        callafter(100, CDN_callafter_entry, pwp);
      }
      else
      {
        _swix(OS_ServiceCall, _INR(1, 2), Service_DiallerStatus, 4); /* Up */
      }
    }
    break;

  case CMD_Twiddle:
    {
      int lines = ((*driver) (DRIVER_MODEMCONTROL, driver_dev));
     
      if (lines & 8) /* DCD - Online */
      {
        oscli("PPPDisconnect");
        pause(100);
        _swix(OS_ServiceCall, _INR(1, 2), Service_DiallerStatus, 0); /* down */
      }
      Twiddle();
    }
    break;

  case CMD_CDN_StartUp:
    {
      dialplease = CALLBACK_CONNECT;
      callafter(10, CDN_callafter_entry, pwp);
      online = TRUE;
    }
    break;

  case CMD_CDN_GoingDown:
    {
      _swix(OS_ServiceCall, _INR(1, 2), Service_DiallerStatus, 0); /* down */
      online = FALSE;
    }
    break;

  case CMD_CDN_Dial:
    if (doingit)
    {
      NewPage("file:/WWWRoot:BahHumbug"); 
    }
    else
    {
      dialplease = CALLBACK_DODIAL;
      restart = FALSE;
      redial  = FALSE;
      doingit = TRUE;
      callafter(100, CDN_callafter_entry, pwp);
    }
    break;

#endif
  case CMD_MWait:
    {
      pause(500);
    }
    break;

#ifdef ETHERNET
  case CMD_CDN_StartNFS:
    {
      NFS_Init();
    }
    break;
#endif
  case CMD_CDN_Change:
    {
      BOOL needssaving = FALSE;
      char *and, *endbit, *nextbit, *value;
      char buffer[256], code1[20], code2[20], codec[20];
      int codes = 0, length, ret;
   
      strcpy(buffer, strchr(arg_string, '?') + 1);
      Rip(buffer);
      nextbit = buffer;
      endbit  = buffer + strlen(buffer);
#ifdef MODEM   
      NewPage("file:/WWWDyn:ProceedC");
#endif   
      while (nextbit < endbit)
      {
        if (and = strchr(nextbit, '&'), and != NULL)
          *and = '\0';
        length = strlen(nextbit);
     
        if (strncmp(nextbit, "num=", strlen("num=")) == NULL)
        {
          value = nextbit + strlen("num=");
          strcpy(card.pstnnum, UnEscape(value));
          _swix(NCRegistry_Write, _INR(0, 2) | _OUT(0),
                "PSTN_NUM", card.pstnnum, strlen(card.pstnnum) + 1, &ret);
          needssaving = TRUE;
        }
        else if (strncmp(nextbit, "name=", strlen("name=")) == NULL)
        {
          value = nextbit + strlen("name=");
          strcpy(card.loginid, UnEscape(value));
          _swix(NCRegistry_Write, _INR(0, 2) | _OUT(0),
                "LOGIN_ID", card.loginid, strlen(card.loginid) + 1, &ret);
          needssaving = TRUE;
        }
        else if (strncmp(nextbit, "pass=", strlen("pass=")) == NULL)
        {
          value = nextbit + strlen("pass=");
          strcpy(card.loginsecret, UnEscape(value));
          _swix(NCRegistry_Write, _INR(0, 2) | _OUT(0),
                "LOGIN_SECRET", card.loginsecret, strlen(card.loginsecret) + 1, &ret);
          needssaving = TRUE;
        }
        else if (strncmp(nextbit, "code=", strlen("code=")) == NULL)
        {
          value = nextbit + strlen("code=");
          UnEscape(value);
          _swix(NCRegistry_Authenticate, _INR(0, 1), value, strlen(value));
          strcpy(lastcode, value);
          NewPage("file:/WWWRoot:Checking");
          if (!semaphore)
          {
            semaphore  = TRUE;
            dialplease = CALLBACK_BADCARD;
            callafter(1000, CDN_callafter_entry, pwp);
          }
        }
        else if (strncmp(nextbit, "code1=", strlen("code1=")) == NULL)
        {
          value = nextbit + strlen("code1=");
          strcpy(code1, value);
          codes |= 1;
        }
        else if (strncmp(nextbit, "code2=", strlen("code2=")) == NULL)
        {
          value = nextbit + strlen("code2=");
          strcpy(code2, value);
          codes |= 2;
        }
        else if (strncmp(nextbit, "codec=", strlen("codec=")) == NULL)
        {
          value = nextbit + strlen("codec=");
          strcpy(codec, value);
          codes |= 4;
        }
        nextbit += (length + 1);
      }
      if (needssaving)
      {
        _swix(NCRegistry_Write, _INR(0, 2) | _OUT(0), 0, 0, 0, &ret);
        if (ret == -7)
        {
          dialplease = CALLBACK_WRITE;
          callafter(50, CDN_callafter_entry, pwp);
        }
        CreateFiles(&card);
      }

      if (codes == 7)
      {
        if (strcmp(code1, code2) || strcmp(codec, goodcode))
        {
          NewPage("file:/WWWRoot:BadCodes");
        }
        else
        {
          codes = 8; /* Write locking code */
          _swix(NCRegistry_ChangeSmartCardCHV, _INR(0, 2), 1, code1, strlen(code1));
#ifdef MODEM
          NewPage("file:/WWWDyn:ProceedC");
#else
          NewPage("ncfrescointernal:close");
#endif
        }
      }
    }
    break;

  case CMD_CDN_MakeFiles:
    {
      CreateFiles(&card);
    }
    break;

  case CMD_CDN_Repoint:
    {
      message_block mb;

      memset (&mb, '\0', sizeof(message_block));
      mb.header.size   = 32;
      mb.header.action = 0x4AF84;
      _swix(TaskModule_SendMessage, _INR(0, 5), 0, &mb, 0, 0, 0, 0);
    }
    break;

  case CMD_CDN_Silent:
    {
      silent = (atoi(arg_string) != 0);
    }
    break;
  }
  return (NULL);
}

_kernel_oserror *Caradon_modfinal (int fatal, int podule, void *pw)
{
  _swix(ResourceFS_DeregisterFiles, _IN(0), resources_base());
  _swix(OS_Release, _INR(0,2), UpCallV, CDN_upcall_entry, pw);
  osmodfree(incoming);
  osmodfree(buffer);
  return(NULL);
}

_kernel_oserror *main_service(int service, _kernel_swi_regs *r, void *pw)
{
  int scstatus, scchange;
 
  switch (service)
  {
  case Service_ResourceFSStarting:
    ((P_FSStartingFN)(r->r[2]))(resources_base());
    break;

  case Service_NCRegistryStatus:
    scstatus = r->r[2];
    scchange = r->r[4];
    if (semaphore && (scstatus & scchange) != 0)
    {
      removeticker(CDN_callafter_entry, pw);
      semaphore = FALSE;
    }
    if (!silent)
    {
      vdu4();
      printf("Status %02X Delta %02X\n", scstatus, scchange);
    }
#if FALSE
    {
      FILE *fout;
      if (fout = fopen("<Wimp$ScrapDir>.Sennen.Service", "a"), fout != NULL)
      {
        fprintf(fout, "Status %02X Delta %02X\n", scstatus, scchange);
        fclose(fout);
      }
    }
#endif
    if ((scstatus & 0x01) == 0) /* No card */
    {
      DumpIt(TRUE);
      strcpy(goodcode, nocode);
      strcpy(lastcode, nocode);
      if ((screen_size.x >> screen_eig.x) >= 1024)
      {
        NewPage("file:/WWWRoot:InsertCVB");
      }
      else if ((screen_size.x >> screen_eig.x) >= 800)
      {
        NewPage("file:/WWWRoot:InsertCB");
      }
      else
      {
        NewPage("file:/WWWRoot:InsertC");
      }
      _swix(Wimp_CreateMenu, _IN(1), -1);
      _swix(OS_Module, _INR(0, 1), 3, "PPP");
    }
    else if ((scstatus & 0x10 & scchange) != 0) /* Card Locked */
    {
      NewPage("file:/WWWRoot:EnterC");
    }
    else if ((scstatus & 0x01 & scchange) != 0) /* Card just inserted */
    {
      NewPage("file:/WWWRoot:Checking");
      if (!semaphore)
      {
        semaphore  = TRUE;
        dialplease = CALLBACK_BADCARD;
        callafter(1000, CDN_callafter_entry, pwp);
      }
    }
    else if ((scstatus & 0x20 & scchange) != 0)
    {
      if ((scstatus & 0x08) == 0)
        NewPage("file:/WWWRoot:SaveCode");
    }
    else if ((scstatus & 0x100 & scchange) != 0) /* Bad Auth */
    {
      if ((scstatus & 0x08) == 0)
      {
        NewPage("file:/WWWRoot:DamageCrd");
      }
      else
      {
        NewPage("file:/WWWRoot:InvalidCde");
      }
    }
    else if ((scstatus & 0x04 & scchange) != 0) /* Card inserted and valid */
    {
      char loginid[40], pstnnum[40];
      int cardwrite;
 
      if (strcmp(lastcode, nocode) == NULL)
      {
        lastcode[0] = '\0';
      }
      strcpy(goodcode, lastcode);
    
      CreateFiles(&card);
     
      if (ncregenq("CLIENT_UPDATE", &cardwrite, 4) < 0)
      {
        NewPage("file:/WWWRoot:DamageCrd");
        break;
      }

      ncregenq("LOGIN_ID", loginid, 40);
#ifdef MODEM
      ncregenq("PSTN_NUM", pstnnum, 40);
#else
      ncregenq("LOGIN_SECRET", pstnnum, 40);
#endif
 
      if (strlen(loginid) == 0 || strlen(pstnnum) == 0)
      {
#ifdef MODEM
        NewPage("file:/WWWDyn:EnterNNPC");
#else
        NewPage("file:/WWWDyn:EnterNPC");
#endif
      }
#ifdef MODEM
      else if (cardwrite)
      {
        NewPage("file:/WWWDyn:ProceedC");
      }
      else
      {
        NewPage("file:/WWWDyn:Proceed");
      }
#else
      else
      {
        _swix(OS_SetVarVal, _IN(0) | _IN(2) | _IN(4), "Sennen$Newpage", -1, 0);
        NFS_Init();
      }
#endif
    }
    else if ((scstatus & scchange) != 0)
    {
      NewPage("file:/WWWRoot:InvalidCrd");
    }
    break;

  case Service_ModeChange:
    Screen_CacheModeInfo();
    break;

  case Service_ShutDown:
    if (doingit)
    {
      r->r[1] = 0;
    }
    break;

  case Service_ShutdownComplete:
    DumpIt(FALSE);
    break;
  }

  return(NULL);
}

_kernel_oserror *Caradon_modinit (char *cmd_tail, int podule_base, void *pw)
{
  pwp = pw;

  _swix(ResourceFS_RegisterFiles, _IN(0), resources_base());
  _swix(OS_Claim,  _INR(0,2), UpCallV, CDN_upcall_entry, pw);
  incoming = osmodget(256);
  buffer   = osmodget(BUFSIZ);
  Screen_CacheModeInfo();

  return(NULL);
}
