/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * Test harness for new serial driver
 *
 * Modification History
 *---------------------
 * 14-May-96 RWB Created
 */
#include "kernel.h"
#include "swis.h"
#include "serial.h"
#include "string.h"
/* #include "serial_ven.h" */
/* #include "arm.h" */
/* #include "sci_api.h" */
/* #include "sci_int.h" */
/* #include "module.h" */
#include "irqs.h"

extern void debug(char *, ...);


/*
 * open a stream on the given filename
 */
int serial_open_stream(char *strFilename, int iRights)
{
 int handle;

  if (_swix(OS_Find, _INR(0, 1) | _OUT(0), iRights, strFilename, &handle))
    return (0);

  return (handle);
}

/*
 * close stream specified by handle
 */
void serial_close_stream(int iHandle)
{
  _swix(OS_Find, _INR(0, 1), 0, iHandle);
}


/*	Flush Serial Stream
	-------------------

Use IOctl 10 to flush serial I/O stream.
Only implemented on ISDN at time of writing (Mon 28th July 1997).

*/

void serial_flush(int iHandle)
{
  ioctl_t param;

  memset(&param, '\0', sizeof(ioctl_t));
  param.reason = 10;
  param.write = 1;
  _swix(OS_Args, _INR(0, 2), 9, iHandle, &param);
}

/*
 * execute an ioctl and return the data
 */
unsigned int serial_ioctl(int iHandle, ioctl_t *pIOCtlBlock)
{
  _swix(OS_Args, _INR(0, 2),9, iHandle, pIOCtlBlock);

  return (pIOCtlBlock->data);
}

/*
 * Fill buffer with as much data as will fit, or as much as is in the rx stream.
 * Return amount of data read.
 */
int serial_read_stream(int iHandle, char *pchDataBlock, int iSize)
{
  int iRxDataSize;
  int old_irqs = irqs_off();

  /* get amount of data in buffer */
  if (_swix(OS_Args, _INR(0,1) | _OUT(2), 2, iHandle, &iRxDataSize))
  {
    irqs_on(old_irqs);
    return (-1);
  }

  if (iRxDataSize > 0)
  {
    if (iRxDataSize > iSize)
      iRxDataSize = iSize;

    if (_swix(OS_GBPB, _INR(0,3), 4, iHandle, pchDataBlock, iRxDataSize))
    {
      irqs_on(old_irqs);
      return (-1);
    }
  }
  irqs_on(old_irqs);

  return (iRxDataSize);
}

/*
 * Get a single byte from the serial stream. Will return -1 for failure.
 */
int serial_read_byte(int iHandle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  int iCarry;
  /* int old_irqs = irqs_off(); */

  /* debug ("RB "); */
  reg.r[0] = 5;                    /* read eof */
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Args,&reg,&reg);
  if (err || reg.r[2])
    goto exit_gracefully;

  /* debug ("BG "); */
  err = _kernel_swi_c(OS_BGet,&reg,&reg,&iCarry);
  if (err || iCarry)
    goto exit_gracefully;

  /* irqs_on(old_irqs); */
  /* debug ("C:%d\n", reg.r[0]); */
  return (reg.r[0]);

exit_gracefully:
  /* irqs_on(old_irqs); */
  return (-1);
}

/*	Write String to Serial tx Stream
	--------------------------------

Write to tx stream as much data as given or as much as will fit in the
stream. Return amount of data written or -1 if no data could be written.

*/
int serial_write_stream(int iHandle, char *pchDataBlock, int iSize)
{
  int iTxFreeSize;
  int old_irqs = irqs_off();

  /* get amount of free space in buffer */
  if (_swix(OS_Args, _INR(0,1) | _OUT(2), 2, iHandle, &iTxFreeSize))
  {
    irqs_on(old_irqs);
    return (-1);
  }
  if (iTxFreeSize==0)
  {
    iSize = 0;
  }
  else
  {
    if (iSize>iTxFreeSize)
      iSize = iTxFreeSize;

    if (_swix(OS_GBPB, _INR(0,3), 2, iHandle, pchDataBlock, iSize))
    {
      irqs_on(old_irqs);
      return (-1);
    }
  }
  irqs_on(old_irqs);

  return (iSize);
}

/*
 * Send a single byte to the serial stream. Will return 1 for success
 */
int serial_write_byte(int iHandle, char chData)
{
  if (_swix(OS_BPut, _INR(0, 1), chData, iHandle))
    return (-1);

  return (1);
}

/*
 * Return free space/amount of data
 */
int serial_size(int iHandle)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = 2;
  reg.r[1] = iHandle;
  err = _kernel_swi(OS_Args,&reg,&reg);
  if (err)
    return (-1);

  return (reg.r[2]);
}

