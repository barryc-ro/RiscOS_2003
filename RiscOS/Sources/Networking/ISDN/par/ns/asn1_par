
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - asn1_par.ns
 *
 * $Revision$
 *
 * $Date$
 *
 * Header module for the compilation options and parameters used
 *		in ASN1 implementation specific to NS use of ASN1 Module.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    ASN1 language notation encoding/decoding library |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1996 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* typedef used for structures associated with ASN1 Types */
		/* ------------------------------------------------------ */

typedef uchar	asn1_tag_nb_t;					/* C type for tag number in ASN1 Type */
typedef ushort	asn1_obj_id_component_t;		/* C type for OBJECT IDENTIFIER component */
typedef uchar	asn1_node_id_t;					/* C type for an identifier of a node = all OBJECT IDENTIFIERs shall have 1 unique identifier */

/*--------------------------------------------------------------------------*/

		/* compilation flags used in ASN1 implementation */
		/* --------------------------------------------- */

	/*
		This flag is set to ON if the tag number in ASN1 descriptions
		may overflow the maximum value permitted of asn1_tag_nb_t type.
		In this case, an extension mechanism enables to describe
		the tag number using p_tag_nb pointer in the C structure
		associated with the ASN1 Type.
	*/

#define ASN1_TAG_NB_EXTENSION_MECHANISM		OFF

#define ASN1_BER_USED						ON		/* use of BER to encode or decode ASN1 values */

	/*	Pass storage contexts onto ASN1 mechanism during ASN1 process
		(encoding/decoding) via a user function if no more contexts in
		global list. If set to ON, another dynamic flag enables or not
		this process using Asn1_dynamic_ctx_used Macro.
	*/

#define ASN1_DYNAMIC_STORE_CTX_USED			OFF

	/*	Update storage contexts during ASN1 decoding via a user function
		for sub-identifiers appended to a received OBJECT IDENTIFIER value.
		If set to ON, another dynamic flag enables or not this process using
		Asn1_dynamic_append_ctx_used Macro. The function may update the
		"address" field of storage contexts to be used so that the last
		sub-identifiers shall be considered as an octet string.
	*/

#define ASN1_DYNAMIC_APPEND_CTX_USED		OFF

	/*	Use of OPTIONAL keyword in ASN1 descriptions */

#define ASN1_OPTIONAL_USED					ON

/*--------------------------------------------------------------------------*/

		/* sizing constants used in ASN1 implementation */
		/* -------------------------------------------- */

#define ASN1_MX_SIZE_DATA					255		/* Maximum size of ASN1 encoded data */

#define ASN1_MX_IMBRICATION_LEVEL			7		/* Maximum level of imbrications in ASN1 Type description */
#define ASN1_MX_CHOICE_LEVEL				4		/* Maximum level of imbrications in an ASN1 CHOICE of Types with type_id set to TYPE ID NIL or CHOICE
														if a type T has not its type id set to CHOICE or TYPE ID NIL, it and the types that are possibly
														"type fields" of T shall not be taken into account */

#define ASN1_MX_APPEND_SUBID				1		/* Maximum number of appended sub-identifiers for OBJECT IDENTIFIER values */


/* EOF */
