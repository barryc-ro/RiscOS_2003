/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - config.h
 *
 * $Revision$
 *
 * $Date$
 *
 *		ISDN-BRICKS configuration file .
 *
 *		This file includes all necessary "conf_xx.h" files.
 *		for ACORN version
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1996 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "conf_srv.h"	    /* Services configuration */

#include "cc_int.h" 	    /* Call Control interface */
#include "acu_int.h" 	    /* ACU interface */
#include "ap_par.h" 	    /* Application parameters */
#include "conf_cc.h"	    /* Call Control configuration */

#include "ns_int.h" 	    /* Network Signalling Layer  interface */
#include "conf_ns.h" 	    /* Network Signalling Layer configuration */

#include "conf_vs.h"	    /* VS (V120) configuration */

#include "dl_int.h"	    /* Data Link Layer interface */

#if DL_V120 == ON
#	include "v120_par.h"	    /* V120 parameters */
#endif

#include "conf_dl.h"	    /* Data Link Layer configuration */
#include "ph_b_int.h"
#include "ph_d_int.h"
#include "conf_it.h"	    /* Interrupt services configuration */

#if MULTILINK_PPP_SUPPORT == ON /* { */
#    include "mppp_int.h"       /* Multilink PPP Layer interface */
#    if MPPP_PH == ON
#        include "ph_int.h"
#    endif
#    if MPPP_DL == ON
#        include "dl_int.h"
#    endif
#include "conf_ppp.h"       /* Multilink PPP Layer configuration */ 
#endif /* } */

/*----------------------------------------------------------------------------
 *				CONFIGURATION UPDATE PARAMETERS
 *----------------------------------------------------------------------------*/
#if CONFIG_UPDATE_MANAGEMENT == ON

struct mem_param_descriptor CONST_ARRAY p_mem_param [] ={

/* 	update ID 		total parameter maximum size */
/*-------------------*/
/* Global parameters */
/*-------------------*/
	Mem_param_integer_0_FD			(UPDATE_OPERATOR_ID),
	Mem_param_integer_0_FDFF		(UPDATE_COUNTRY_ID),

/*-----------------------*/
/* CC UPDATE IDENTIFIERS */
/*-----------------------*/

	Mem_param_digit_string			(UPDATE_CALLING_NB_ID
						,CC_MX_SZ_CALLING_NB+1),
	Mem_param_digit_string			(UPDATE_CALLING_SUB_ADD_ID
						,CC_MX_SZ_CALLING_SUB_ADD+1),
	Mem_param_integer_0_FD			(UPDATE_USE_SPID_ID),
	Mem_param_digit_string			(UPDATE_LOCAL_NB_SPID_1_ID
						,CC_MX_SZ_CALLED_NB+1),
	Mem_param_digit_string			(UPDATE_LOCAL_NB_SPID_2_ID
						,CC_MX_SZ_CALLED_NB+1),

	Mem_param_digit_string			(UPDATE_LOCAL_NB_PPP_ID
						,CC_MX_SZ_CALLED_NB+1),
	Mem_param_digit_string			(UPDATE_LOCAL_SUB_ADD_PPP_ID
						,CC_MX_SZ_CALLED_SUB_ADD+1),
	Mem_param_integer_0_FD			(UPDATE_PRIORITY_PPP_ID),
	Mem_param_digit_string			(UPDATE_LOCAL_NB_V120_ID
						,CC_MX_SZ_CALLED_NB+1),
	Mem_param_digit_string			(UPDATE_LOCAL_SUB_ADD_V120_ID
						,CC_MX_SZ_CALLED_SUB_ADD+1),
	Mem_param_integer_0_FD			(UPDATE_PRIORITY_V120_ID),

/*-----------------------*/
/* NS UPDATE IDENTIFIERS */
/*-----------------------*/
	Mem_param_integer_0_FDFF		(UPDATE_SUBSCRIPTION_ID),
	Mem_param_integer_0_FD			(UPDATE_NS_NA_NB_ID),
	Mem_param_byte_string			(UPDATE_SPID_1_ID
						,NS_MX_SZ_SPID+1),
	Mem_param_byte_string			(UPDATE_SPID_2_ID
						,NS_MX_SZ_SPID+1),

/*-------------------------*/
/* PH_D UPDATE IDENTIFIERS */
/*-------------------------*/
	Mem_param_integer_0_FD			(UPDATE_PH_D_LAYER1_ID),
	Mem_param_integer_0_FD			(UPDATE_PH_D_TEST_MODE_ID),
	Mem_param_integer_0_FD			(UPDATE_PH_D_TRANSCEIVER_ID),

/*---------*/
/* The End */
/*---------*/

	{UPDATE_ID_NIL},

};

#endif

/*----------------------------------------------------------------------------
 *				CONFIGURATION SENDING DESCRIPTORS
 *----------------------------------------------------------------------------*/


struct config_descriptor s_config_cc = {
#if OM_CODE_TYPE == OM_RELOCATABLE
	ENT_CC,
	P_NIL,
	(uchar *)&cc_config_data,
	sizeof (cc_config_data),
	(struct cfg_update FAR *)p_update_cc,
	OFF
#endif
};

#if CC_PROFILE_CONFIG == ON
    struct config_descriptor s_config_cc_profile = {
#   if OM_CODE_TYPE == OM_RELOCATABLE
    	ENT_CC,
	P_NIL,
	(uchar *)&cc_profile_config_data,
	sizeof (cc_profile_config_data),
	(struct cfg_update FAR *)p_update_cc_profile,
	OFF
#   endif
    };
#endif

struct config_descriptor s_config_ns = {
#if OM_CODE_TYPE == OM_RELOCATABLE
	ENT_MNS,
	P_NIL,
	(uchar *)&ns_config_data,
	sizeof (ns_config_data),
	(struct cfg_update FAR *)p_update_ns,
	OFF
#endif
};

	/*-------------------------------------------------------------------*/
	/* 	APPLICATION 						     */
	/*-------------------------------------------------------------------*/
CONST uchar ap_config_data [10];


struct cfg_update CONST_ARRAY p_update_ap [] = {
	{UPDATE_ID_NIL},
};

struct config_descriptor s_config_ap = {
#if OM_CODE_TYPE == OM_RELOCATABLE
	ENT_APPLI,
	P_NIL,
	(uchar *)&ap_config_data,
	sizeof (ap_config_data),
	(struct cfg_update FAR *)p_update_ap,
	OFF
#endif
};

	/*-------------------------------------------------------------------*/
	/* 	VS (V.120) 						     */
	/*-------------------------------------------------------------------*/

struct config_descriptor s_config_vs = {
#if OM_CODE_TYPE == OM_RELOCATABLE
	ENT_VS,
	P_NIL,
   	(uchar *)&vs_config_data,
	sizeof (vs_config_data),
	(struct cfg_update FAR *)p_update_vs,
	OFF
#endif
};

	/*-------------------------------------------------------------------*/
	/* 	DL 						     */
	/*-------------------------------------------------------------------*/

struct config_descriptor s_config_dl = {
#if OM_CODE_TYPE == OM_RELOCATABLE
	ENT_MDL,
	P_NIL,
   	(uchar *)&dl_config_data,
	sizeof (dl_config_data),
	(struct cfg_update FAR *)p_update_dl,
	OFF
#endif
};

	/*-------------------------------------------------------------------*/
	/* 	PH_D 						     */
	/*-------------------------------------------------------------------*/

extern  struct ph_d_config ph_d_config_data;
extern  struct cfg_update p_update_ph_d[];

struct config_descriptor s_config_ph_d = {
#if OM_CODE_TYPE == OM_RELOCATABLE
	ENT_MPH_D,
	P_NIL,
	(uchar *)&ph_d_config_data,
	sizeof (ph_d_config_data),
	(struct cfg_update FAR *)p_update_ph_d,
	OFF
#endif

};
	/*-------------------------------------------------------------------*/
	/* 	PH_B 						     */
	/*-------------------------------------------------------------------*/

extern  struct ph_b_config ph_b_config_data;
extern  struct cfg_update p_update_ph_b [];

struct config_descriptor s_config_ph_b = {
#if OM_CODE_TYPE == OM_RELOCATABLE
	ENT_MPH_B,
	P_NIL,
	(uchar *)&ph_b_config_data,
	sizeof (ph_b_config_data),
	(struct cfg_update FAR *)p_update_ph_b,
	OFF
#endif

};
#if MULTILINK_PPP_SUPPORT == ON /* { */

	/* Member Link(s) configuration descriptor */
	
struct config_descriptor s_config_sppp = {
#	if OM_CODE_TYPE == OM_RELOCATABLE
		ENT_MPPP,
		P_NIL,
   		(uchar *)&sppp_config_data,
		sizeof (sppp_config_data),
		(struct cfg_update FAR *)p_update_sppp,
		OFF
#	endif
};

	/* Bundle's configuration descriptor */
	
struct config_descriptor s_config_mppp = {
#	if OM_CODE_TYPE == OM_RELOCATABLE
		ENT_MPPP,
		P_NIL,
   		(uchar *)&mppp_config_data,
		sizeof (mppp_config_data),
		(struct cfg_update FAR *)p_update_mppp,
		OFF
#	endif
	
};

#endif /* } */

struct config_descriptor FAR * t_config [] = {
#if OM_CODE_TYPE == OM_RELOCATABLE
    (struct config_descriptor *)(&s_config_ap),
    (struct config_descriptor *)(&s_config_mppp),
    (struct config_descriptor *)(&s_config_cc),
    (struct config_descriptor *)(&s_config_ns),
    (struct config_descriptor *)(&s_config_vs),
    (struct config_descriptor *)(&s_config_dl),
    (struct config_descriptor *)(&s_config_ph_d),
    (struct config_descriptor *)(&s_config_ph_b),
#   if MULTILINK_PPP_SUPPORT == ON /* { */
	(struct config_descriptor *)(&s_config_sppp),
	(struct config_descriptor *)(&s_config_mppp),	
#   endif /* } */
#else
    P_NIL,
    P_NIL,
    P_NIL,
    P_NIL,
    P_NIL,
    P_NIL,
    P_NIL,
#   if MULTILINK_PPP_SUPPORT == ON /* { */
        P_NIL,
        P_NIL,
#   endif
#endif
    P_NIL,
};

#if OM_CODE_TYPE == OM_PIC

#	if CONFIG_UPDATE_MANAGEMENT == ON
#		define Init_config_descriptor(name,ent)    	\
   		 	Paste(s_config_,name).entity_id = ent;	\
   		 	Paste(s_config_,name).config_address = Paste3((uchar *)&,name,_config_data);	\
    			Paste(s_config_,name).config_size = sizeof(Paste(name,_config_data));	\
    			Paste(s_config_,name).p_update = (struct cfg_update FAR *) Paste3(&p_update_,name,[0]);	\
    			Paste(s_config_,name).wait_flag = OFF;
#else
#		define Init_config_descriptor(name,ent)    	\
   		 	Paste(s_config_,name).entity_id = ent;	\
   		 	Paste(s_config_,name).config_address = Paste3((uchar *)&,name,_config_data);	\
    			Paste(s_config_,name).config_size = sizeof(Paste(name,_config_data));	\
    			Paste(s_config_,name).p_update = P_NIL;	\
    			Paste(s_config_,name).wait_flag = OFF;

#endif

#define Init_config_descriptors_array(name)    	\
    	t_config [i++]    = (struct config_descriptor *)(Paste(&s_config_,name));
#define Init_config_descriptors_array_end()    	\
    	t_config [i++]    = P_NIL;

#if OM_CODE_TYPE == OM_PIC

#undef Cfg_update
#define Cfg_update(update_id, field)	\
		p_cfg_update->p_val = (uchar FAR *)&field; p_cfg_update++;

#endif

void pic_init_config_descriptors()
{
    uchar i;
    struct cfg_update FAR *p_cfg_update;    
    
    Init_config_descriptor (ap, ENT_APPLI);
    Init_config_descriptor (cc, ENT_CC);
#   if CC_PROFILE_CONFIG == ON
    	Init_config_descriptor (cc_profile, ENT_CC);
#   endif
    Init_config_descriptor (ns, ENT_MNS);
    Init_config_descriptor (vs, ENT_VS);
    Init_config_descriptor (dl, ENT_MDL);
    Init_config_descriptor (ph_d, ENT_MPH_D);
    Init_config_descriptor (ph_b, ENT_MPH_B);
#   if MULTILINK_PPP_SUPPORT == ON
        Init_config_descriptor (sppp, ENT_MPPP);
        Init_config_descriptor (mppp, ENT_MPPP);
#   endif
    i = 0;
    Init_config_descriptors_array (ap);
    Init_config_descriptors_array (cc);
#   if CC_PROFILE_CONFIG == ON
    	Init_config_descriptors_array (cc_profile);
#   endif
    Init_config_descriptors_array (ns);
    Init_config_descriptors_array (vs);
    Init_config_descriptors_array (dl);
    Init_config_descriptors_array (ph_d);
    Init_config_descriptors_array (ph_b);
#   if MULTILINK_PPP_SUPPORT == ON
        Init_config_descriptors_array (sppp);
        Init_config_descriptors_array (mppp);
#   endif
    Init_config_descriptors_array_end ();

#if OM_CODE_TYPE == OM_PIC

	/* UPDATE configuration array initialization */

    p_cfg_update = (struct cfg_update FAR *)&p_update_cc[0];
#   include "upd_cc.h"
    p_cfg_update = (struct cfg_update FAR *)&p_update_ns[0];
#   include "upd_ns.h"   
    p_cfg_update = (struct cfg_update FAR *)&p_update_ph_d[0];
#   include "upd_ph_d.h"
#endif
}
#endif

/*EOF*/
