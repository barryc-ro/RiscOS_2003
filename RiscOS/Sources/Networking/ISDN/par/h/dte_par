
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dte_par.h
 *
 * $Revision$
 *
 * $Date$
 *
 *		COMPILE-TIME PARAMETERS for the DTE interface (DTE_INT) entity.
 *
 *
 *		***************************************************************
 *		*** 	THIS IS A SAMPLE FILE, WHICH NEEDS BE MODIFIED 		***
 *		***					FOR EACH IMPLEMENTATION 				***
 *		***************************************************************
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    TR29-PACK                                        |*/
/*|    DTE_INT Entity                                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef	_DTE_PAR_H
#define	_DTE_PAR_H

/*---------------------------------------------------------------------------
 *		FUNCTIONAL PARAMETERS
 *---------------------------------------------------------------------------
 *	All theses compilation options are INDEPENDENT, except otherwise
 *	indicated.
 *
 *	DTE_VOICE : support of voice functions.
 *		ON:  compile code which supports the voice functions.
 *		OFF: do not compile.
 *
 *	DTE_RAW_DATA : support of raw data functions.
 *		ON:  compile code which supports the raw data functions.
 *		OFF: do not compile.
 *
 *	DTE_RAW_TELEPHONY : support of raw telephony functions.
 *		ON:  compile code which supports the raw telephony functions.
 *		OFF: do not compile.
 *
 *	DTE_MODEM : support of modem functions.
 *		ON:  compile code which supports the modem functions.
 *		OFF: do not compile.
 *
 *	DTE_V34 : support of V.34 modem functions. Default is OFF.
 *		ON:  compile code which supports the V.34 modem functions.
 *		OFF: do not compile (supported modulations are V.21, V.22, V.22bis,
 *			 V.23)
 *
 *	DTE_FAX : support of group 3 fax functions (TR-29).
 *		ON:  compile code which supports the fax functions.
 *		OFF: do not compile.
 *
 *	DTE_V17 : support of V.17 (fax) modem functions. Default is OFF.
 *		ON:  compile code which supports the V.17 modem functions.
 *		OFF: do not compile (default supported modulations are V.21, V.27ter
 *			 and V.29)
 *
 *	DTE_V33 : support of V.33 (fax) modem functions. Default is OFF.
 *		ON:  compile code which supports the V.33 modem functions.
 *		OFF: do not compile (default supported modulations are V.21, V.27ter
 *			 and V.29)
 *
 *	DTE_EXT_CALL : support of ISDN extended call commands (AT*).
 *		ON:  compile code which supports the extended call commands.
 *			 DTE_ISDN_CC must also be set to ON.
 *		OFF: do not compile.
 *
 *	DTE_EXT_CALLING_PARTY : support of extensions for calling party processing
 *		(display of RING: with multiple calling parties and processing of
 *		presentation attribute, support of *D command with multiple calling
 *		party numbers, etc.). Default is OFF.
 *		ON : compile code, which enables support of extensions for calling
 *			 party processing.
 *		OFF: do not compile
 *
 *	DTE_EXT_CALLED_PARTY : support of extensions for called party processing
 *		(display of RING: with redirection number, etc.)
 *		Default is OFF.
 *		ON : compile code, which enables support of extensions for called
 *			 party processing.
 *		OFF: do not compile
 *
 *	DTE_SPF_FACILITY : support of ISDN network dependent facilities.
 *		ON:  compile code which supports the ISDN network dependent
 *			 facilities.
 *		OFF: do not compile.
 *
 *	DTE_SUSPEND_FACILITY : support of ISDN suspend/resume facility.
 *		ON:  compile code which supports the ISDN suspend/resume facility.
 *		OFF: do not compile.
 *
 *	DTE_EXT_CNF : support of extended configuration commands (AT#).
 *		ON:  compile code which supports the extended configuration commands.
 *		OFF: do not compile.
 *
 *	DTE_EXT_CNF_USER : support of user functions, triggered by extended
 *		configuration commands (AT#).
 *		ON:  compile code which supports the user functions
 *		OFF: do not compile (this saves space).
 *		This option is only relevant if DTE_EXT_CNF is ON.
 *		Default is OFF.
 *
 *	DTE_PAD : support of PAD functions.
 *		ON:  compile code which supports the PAD functions.
 *			 DTE_X25 must also be set to ON.
 *		OFF: do not compile.
 *
 *	DTE_X25 : support of X.25 functions.
 *			  If DTE_PAD is set to ON, DTE_X25 must be set to ON too.
 *		ON:  compile code which supports the X25 functions.
 *		OFF: do not compile.
 *
 *	DTE_DATA_RELAY : support of data relay functions (e.g. transparent
 *				   or HDLC data transfer over B channels).
 *		ON:  compile code which supports the data relay functions
 *		OFF: do not compile.
 *		(Obsolete name : DTE_DATA_XPT, which can still be used)
 *
 *	DTE_V14 : support of V.14 data transfer on B-channel or leased line.
 *		ON:  compile code which supports the V.14 functions
 *		OFF: do not compile.
 *
 *	DTE_V110 : support of V.110 data transfer on B-channel or leased line,
 *			   using PH_R.
 *		ON:  compile code which supports the V.110 functions
 *		OFF: do not compile.
 *
 *	DTE_PH_V110 : support of V.110 data transfer on B-channel, using
 *				  only PH_B, not PH_R.
 *		ON:  compile code which supports these V.110 functions
 *		OFF: do not compile.
 *
 *	DTE_CF_V110 : support of CF (including LAP-M) over V.110.
 *		ON:  compile code which supports these CF over V.110 functions
 *		OFF: do not compile.
 *
 *	DTE_V120 : support of V.120 data transfer on B-channel or leased line.
 *		ON:  compile code which supports the V.120 functions
 *		OFF: do not compile.
 *
 *	DTE_ASYN_TO_PH : support of asynchronous over physical transmission.
 *				     asynchronous 'frames' (e.g. SLIP or PPP) received on
 *					 the DTE junction are forwarded into a B-channel or
 *					 leased line.
 *		ON:  compile code which supports the asynchronous over physical
 *			 functions.
 *		OFF: do not compile.
 *
 *	DTE_PPP : support of asynchronous PPP functions.
 *			  For use with DTE_ASYN_TO_PH set to ON.
 *		ON:  compile code which supports the asynchronous PPP functions.
 *		OFF: do not compile.
 *
 *	DTE_ISDN_CC : support of ISDN lines.
 *		ON:  compile code which supports the ISDN lines (Call Control)
 *			 functions.
 *		OFF: do not compile.
 *
 *	DTE_AGGREGATED_ISDN_CC : support of ISDN lines, with call aggregation.
 *		ON:  compile code which supports the ISDN lines with call aggregation
 *			 (Extended Call Control, CCE) functions.
 *			 DTE_ISDN_CC must also be set to ON.
 *		OFF: do not compile.
 *
 *	DTE_ISDN_HARSH : support of harsh ('#') characters in ISDN numbers
 *		ON:  compile code which supports '#' characters in ISDN numbers
 *		OFF: do not compile.
 *		As far as we know, this feature is only useful for US
 *		switches. Note that the digits are sent in Q.931 "keypad" IEs.
 *		This option should be OFF in all other cases.
 *
 *	DTE_ISDN_STAR : support of star ('*') characters in ISDN numbers
 *		ON:  compile code which supports '*' characters in ISDN numbers
 *		OFF: do not compile.
 *		As far as we know, this feature is only useful for US
 *		switches. Note that the digits are sent in Q.931 "keypad" IEs.
 *		Please also not that this option disables the use of subaddresses for
 *		outgoing calls, as the star is used as a syntactic separator.
 *		This option should be OFF in all other cases.
 *
 *	DTE_ANALOG_ACU : support of analog GSTN lines.
 *		ON:  compile code which supports the analog lines (Automatic Call
 *			 Unit) functions.
 *		OFF: do not compile.
 *
 *	DTE_PERMANENT_LINK : support of permanent lines (leased lines)
 *		ON:  compile code which supports the permanent lines functions
 *			 (no ACU, no CC).
 *		OFF: do not compile.
 *
 *	DTE_SWITCH : support of ISDN switch functions.
 *		ON:  compile code which supports the ISDN switch functions.
 *		OFF: do not compile.
 *
 *	DTE_TEST : support of test functions
 *		ON:  compile code which supports the test functions.
 *		OFF: do not compile.
 *
 *	DTE_NO_TEST_MODEM_FAX : support of test functions for fax and modem
 *		ON:  do not compile code which supports the test functions for fax
 *			 and modem.
 *		OFF: do compile.
 *		This flag is significant only if DTE_TEST is ON. Default is OFF.
 *		Setting this flag to OFF disables the AT commands for setting modem
 *		output level, setting test duration, sending tones and DTMF,
 *		detecting tones and DTMF.
 *
 *	DTE_COMM_PORT_SYNC : support of synchronous communication ports
 *		ON:  compile code which supports the synchronous communication ports
 *		OFF: do not compile.
 *		If this option is set to ON, you must also have :
 *			- DTE_MX_COMM_PORT set to a non-zero value,
 *			- DTE_MX_CFG_COMM_PORT set to a non-zero value,
 *			- one of the options DTE_Q2_DTR_POLL or DTR_Q2_DTR_PH_R set to ON.
 *
 *	DTE_Q2_DTR_POLL : support of synchronous communication ports DTR monitor
 *					  in AT&Q1 or &Q2 modes by POLLING
 *		ON:  compile code which supports monitoring of the synchronous
 *			 communication ports' DTR by POLLING, when in AT&Q1 or &Q2 modes.
 *		OFF: do not compile.
 *			 This is the recommended option.
 *
 *	DTE_Q2_DTR_PH_R : support of synchronous communication ports DTR monitor
 *					  in AT&Q1 or &Q2 modes by PH_R primitives.
 *		ON:  compile code which supports monitoring of the synchronous
 *			 communication ports' DTR by PH_R primitives, when in AT&Q1 or
 *			 &Q2 modes.
 *		OFF: do not compile.
 *			 This is not the recommended option.
 *
 *	DTE_SPEAKER : support of speaker functions (by the GSTN entity)
 *		ON:  compile code which supports the speaker functions.
 *		OFF: do not compile.
 *
 *	DTE_DIR : support of phone directory functions
 *		ON:  compile code which supports the phone directory functions.
 *		OFF: do not compile.
 *
 *	DTE_DIR_LIST : support of dialing using a list of numbers in directory
 *		ON:  compile code which supports dialing with list
 *		OFF: do not compile.
 *		See also the macro Dte_end_of_call_list() below.
 *
 *	DTE_AT_EXTERNAL : support of AT external commands, processed in separate
 *					  entities
 *		ON:  compile code which supports the AT external commands mechanisms.
 *		OFF: do not compile.
 *
 *	DTE_INTERNAL : support of AT commands giving access to the internal
 *		state of the OMNITEL-BRICKS software.
 *		ON:  compile code which supports the 'internal' AT commands.
 *		OFF: do not compile.
 *
 *	DTE_DYN_OUT_SERVICE : support of dynamic (at configuration time) setting
 *		of outgoing call services descriptions.
 *		ON:  compile code which supports dynamic setting of outgoing calls
 *			 service descriptions
 *		OFF: do not compile.
 *
 *	DTE_STS : support of stable storage functions. Stable storage is
 *			  typically used for saving equipment configuration parameters,
 *			  profiles, etc.
 *			  These functions are managed by the ENT_STS entity, for example
 *			  with EEPROM hardware.
 *		ON:  compile code which supports access to stable storage functions
 *		OFF: do not compile.
 *
 *	DTE_SM_CFG_UPDATE : support update of configuration structure by SM
 *		ON:  compile code which supports primitive exchange with SM
 *		OFF: do not compile.
 *
 *	DTE_SM_REPORT : support processing of SM reports and statistics
 *		ON:  compile code which supports SM reports and statistics
 *		OFF: do not compile.
 *
 *	DTE_HELP : support display of help information text (#H, #I, #V)
 *		ON:  compile code which supports display of help information text
 *		OFF: do not compile.
 *
 *	DTE_ASSERT : assertion checks.
 *		ON:	 compile assertion checks (consistency tests). If the test fails,
 *			 a trap occurs. May be useful when porting or in simulation.
 *		OFF: do not compile.
 *
 *	DTE_ASSERT_NO_STRING : assertion checks, without strings for Trap().
 *		This option is useful for saving space. It is only checked if
 *		DTE_ASSERT is ON.
 *		ON : compile assertion checks, without strings in calls to Trap().
 *		OFF: compile assertion checks, with    strings in calls to Trap().
 *
 *	DTE_TRACE : traces in memory
 *		ON:	 compile code, which enables traces in a circular buffer.
 *		OFF: do not compile.
 *
 *	DTE_TRACE_IN_VIDEO : trace in a PC video RAM.
 *		ON : trace is stored in video RAM (format : data byte, attribute),
 *			 starting from address DTE_TRACE_VIDEO_ADDRESS, over
 *			 2*DTTR_BUFSIZE bytes.
 *		OFF: trace is stored in an internal buffer.
 *		Significant only if DTE_TRACE is ON.
 *
 *	DTE_TRACE_VIDEO_ADDRESS : address of the video RAM.
 *		Typical value : 0xB8000000+25*80*2 (VGA RAM address).
 *		Significant only if DTE_TRACE_IN_VIDEO is ON.
 *
 *	DTE_MATRA_TA_INTERFACE : support of Matra TA modified AT interface
 *		ON : compile code, which enables Matra TA modified AT interface
 *		OFF: do not compile
 *
 *	DTE_SEC_REMOTE_ID : support of security functions based on the remote
 *		caller id.
 *		ON : compile code, which enables security functions based on the
 *			 remote caller id.
 *		OFF: do not compile
 *
 *	DTE_SIMPLE_CHANNEL_ADDRESSING : simple selection of DTE channel (upon
 *		incoming call) based on addressing and UUI.
 *		ON : compile code, which enables simple selection of DTE channel
 *			 (upon incoming call) based on addressing and UUI
 *		OFF: do not compile
 *
 *	DTE_TIME_SLOT : support of time slots for calls filtering
 *		ON : compile code, which enables filtering of calls based on time
 *			 intervals (time slots)
 *		OFF: do not compile
 *
 *	DTE_MESSAGE_INTERFACE : support of DTE_INT message interface
 *		a user entity is able to dialog with the AT interpreter, to send
 *		data, etc.
 *		ON : compile code, which enables processing of user messages
 *		OFF: do not compile
 *
 *	DTE_API : support of OMNITEL API
 *		ON : compile code, which enables processing in relation with
 *			 OMNITEL API
 *		OFF: do not compile
 *
 *	DTE_OVERLAP_SENDING : support of dialing in overlap sending mode
 *		ON : compile code, which enables overlap sending processing
 *		OFF: do not compile
 *
 *	DTE_PAD_V120_COMPRESSION : support of data compression for PAD and/or
 *		V.120 data transfer.
 *		ON : compile code, which enables PAD and/or V.120 data compression
 *		OFF: do not compile
 *
 *	DTE_NO_PLUS_PLUS_PLUS : no support of '+++' escape sequence
 *		ON : do not compile code, which enables '+++' processing
 *		OFF: compile
 *
 *	DTE_LOG : support of log functions
 *		ON : compile code, which enables log functions
 *		OFF: do not compile
 *
 *	DTE_USER_COMMANDS : support of user commands (extension commands
 *		$A, $B, etc.).
 *		ON : compile code, which enables $A, $B, etc. user commands processing
 *		OFF: do not compile
 *		(See also the macro Dte_user_command_expand)
 *
 *	DTE_ARINC_EXTENSIONS : support of ARINC extensions
 *		ON : compile code, which enables support of ARINC extensions
 *		OFF: do not compile
 *
 *	DTE_STAC_LZS : support of STAC LZS data compression
 *		ON : compile code, which enables Stac Lzs compression
 *		OFF: do not compile
 *
 *--------------------------------------------------------------------------*/

#define		DTE_VOICE						ON
#define		DTE_RAW_DATA					ON
#define		DTE_RAW_TELEPHONY				ON
#define		DTE_MODEM						ON
#define		DTE_V34								OFF
#define		DTE_FAX							ON
#define		DTE_V17								OFF
#define		DTE_V33								OFF
#define		DTE_EXT_CALL					ON
#define		DTE_EXT_CALLING_PARTY				OFF
#define		DTE_EXT_CALLED_PARTY				OFF
#define		DTE_SPF_FACILITY				ON
#define		DTE_SUSPEND_FACILITY			ON
#define		DTE_EXT_CNF						ON
#define		DTE_EXT_CNF_USER					OFF
#define		DTE_PAD							ON
#define		DTE_X25							ON
#define		DTE_DATA_RELAY					ON
#define		DTE_V14							ON
#define		DTE_V110						ON
#define		DTE_PH_V110							OFF
#define		DTE_CF_V110							OFF
#define		DTE_V120						ON
#define		DTE_ASYN_TO_PH						OFF
#define		DTE_PPP								ON
#define		DTE_ISDN_CC						ON
#define		DTE_AGGREGATED_ISDN_CC			ON
#define		DTE_ISDN_HARSH						OFF
#define		DTE_ISDN_STAR						OFF
#define		DTE_ANALOG_ACU					ON
#define		DTE_PERMANENT_LINK					OFF
#define		DTE_SWITCH							OFF
#define		DTE_TEST						ON
#define		DTE_NO_TEST_MODEM_FAX				OFF
#define		DTE_COMM_PORT_SYNC				ON
#define		DTE_Q2_DTR_POLL					ON
#define		DTE_Q2_DTR_PH_R					ON
#define		DTE_SPEAKER						ON
#define		DTE_DIR							ON
#define		DTE_DIR_LIST					ON
#define		DTE_AT_EXTERNAL						OFF
#define		DTE_INTERNAL					ON
#define		DTE_DYN_OUT_SERVICE				ON
#define		DTE_STS							ON
#define		DTE_SM_CFG_UPDATE				ON
#define		DTE_SM_REPORT						OFF
#define		DTE_HELP						ON
#define		DTE_ASSERT						ON
#define		DTE_ASSERT_NO_STRING				OFF
#define		DTE_TRACE						    OFF
#define		DTE_TRACE_IN_VIDEO					OFF
#define		DTE_TRACE_VIDEO_ADDRESS			(0xB8000000+25*80*2)
#define		DTE_MATRA_TA_INTERFACE				OFF
#define		DTE_SEC_REMOTE_ID					OFF
#define		DTE_SIMPLE_CHANNEL_ADDRESSING	ON
#define		DTE_TIME_SLOT						OFF
#define		DTE_MESSAGE_INTERFACE				OFF
#define		DTE_API								OFF
#define		DTE_OVERLAP_SENDING				ON
#define		DTE_PAD_V120_COMPRESSION			OFF
#define		DTE_NO_PLUS_PLUS_PLUS				OFF
#define		DTE_LOG								OFF
#define		DTE_USER_COMMANDS				ON
#define		DTE_ARINC_EXTENSIONS				OFF
#define		DTE_STAC_LZS						OFF

/*---------------------------------------------------------------------------
 *		SIZING PARAMETERS
 *---------------------------------------------------------------------------
 *	DTE_MX_SERVICES			: maximum total number of services supported
 *	DTE_MX_DTE				: maximum total number of DTE-DCE links managed
 *	DTE_MX_CFG_DTE			: maximum number of DTE-DCE links which can be
 *							  declared in a configuration structure
 *	DTE_MX_CONN				: maximum total number of connections managed.
 *							  Must be equal to DTE_MX_CH.
 *	DTE_MX_NA				: maximum total number of network accesses managed
 *	DTE_MX_CFG_NA			: maximum number of network accesses which can be
 *							  declared in a configuration structure
 *	DTE_MX_CH				: maximum total number of DTE channels managed
 *	DTE_MX_CFG_CH			: maximum number of DTE channels which can be
 *							  declared in a 'main' configuration structure
 *	DTE_MX_2_CFG_CH			: maximum number of DTE channels which can be
 *							  declared in a 'DTE channels list' configuration
 *							  structure
 *	DTE_MX_CALL_PER_CH		: maximum number of calls managed per DTE
 *							  channel
 *	DTE_MX_CC_CALL_PER_LINE	: maximum number of calls managed by CC/CCE/ACU
 *							  for each (analog or ISDN) network access.
 *							  1 for analog GSTN, 2 for BRI, 32 for PRI, etc.
 *							  default value : 32.
 *	DTE_MX_COMM_PORT		: maximum number of (auxiliary) communication
 *							  ports (minimum 1, even if no comm port is used)
 *	DTE_MX_CFG_COMM_PORT	: maximum number of (auxiliary) communication
 *							  ports which can be declared in a configuration
 *							  structure.
 *	DTE_MX_ASS_NA_PER_CH	: maximum number of associated network accesses
 *							  per DTE channel.
 *							  If not #defined, defaults to 1.
 *	DTE_MX_CFG_MX_OUTGOING_SERVICES : maximum number of 'outgoing services'
 *							  descriptions which may be present in a single
 *							  configuration structure (struct
 *							  dte_config_out_service).
 *	DTE_MX_DIR_ENTRY		: maximum number of directory entries.
 *	DTE_MX_DIR_DS_SIZE		: maximum size of the dial string in a directory
 *							  entry.
 *	DTE_MX_EXT_AT_PREFIX_SIZE : maximum length of an AT external command
 *							  prefix (without terminating '\0')
 *	DTE_MX_CFG_EXT_AT		: maximum number of AT external commands prefix
 *							  in a configuration structure.
 *	DTE_MX_PAD_STRING_SIZE	: maximum size of a PAD command line (including
 *							  VC establishment command), without the line
 *							  terminator.
 *	DTE_MX_CFG_PAD_STRING_SIZE	: maximum size of a PAD command line
 *							  (including VC establishment command), without
 *							  the line terminator, which can be included in
 *							  a configuration structure.
 *	DTTR_BUFSIZE 			: size of the internal trace buffer.
 *	DTE_MX_REMOTE_CALLERS	: maximum number of callers descriptions present
 *							  in a remote callers authentification list
 *	DTE_MX_REMOTE_CALLERS_LISTS	: maximum number of callers authentification
 *							  lists present in a configuration structure.
 *	DTE_CHECK_ISDN_ADDR_SIZE: maximum length of an ISDN address used
 *							  for authentification.
 *							  must be less or equal to DTE_ISDN_ADDR_SIZE
 *	DTE_CHECK_ISDN_SUB_ADDR_SIZE: maximum length of an ISDN subaddress used
 *							  for authentification.
 *							  must be less or equal to DTE_ISDN_SUB_ADDR_SIZE
 *	DTE_ISDN_PASSWORD_SIZE	: maximum length of a password (exchanged in UUI).
 *							  must be less or equal to DTE_ISDN_UUI_SIZE
 *	DTE_SCA_ISDN_ADDR_SIZE	: maximum length of an ISDN or X.25 address used
 *							  for simple DTE channel selection.
 *							  must be less or equal to DTE_ISDN_ADDR_SIZE
 *	DTE_SCA_ISDN_SUB_ADDR_SIZE: maximum length of an ISDN subaddress used
 *							  for simple DTE channel selection
 *							  must be less or equal to DTE_ISDN_SUB_ADDR_SIZE
 *	DTE_SCA_UUI_SIZE		: maximum length of an UUI used for simple DTE channel
 *							  selection
 *							  must be less or equal to DTE_ISDN_UUI_SIZE
 *	DTE_MX_SLOT_ENTRY		: maximum number of time slot descriptions present
 *							  in a configuration structure
 *	DTE_MX_SLOT_STR_SIZE	: maximum size (without the terminating '\0') of
 *							  a time slot string.
 *	DTE_MX_TIME_STR_SIZE	: maximum size (without the terminating '\0') of
 *							  a time string. Suggested value: 25.
 *	DTE_CH_NAME_SIZE		: size of the "litterary name" of a DTE channel
 *
 *--------------------------------------------------------------------------*/

	/* Example : 1 ISDN S0 basic access */

#define		DTE_MX_SERVICES					8
#define		DTE_MX_DTE						1
#define		DTE_MX_CFG_DTE					1
#define		DTE_MX_CONN						DTE_MX_CH
#define		DTE_MX_NA						1
#define		DTE_MX_CFG_NA					1
#define		DTE_MX_CH						1
#define		DTE_MX_CFG_CH					1
#define		DTE_MX_2_CFG_CH					1
#define		DTE_MX_CALL_PER_CH				2
#define		DTE_MX_CC_CALL_PER_LINE			2
#define		DTE_MX_COMM_PORT				2
#define		DTE_MX_CFG_COMM_PORT			2
#define		DTE_MX_ASS_NA_PER_CH			1
#define		DTE_MX_CFG_MX_OUTGOING_SERVICES 1
#define		DTE_MX_DIR_ENTRY				4
#define		DTE_MX_DIR_DS_SIZE				40
#define		DTE_MX_EXT_AT_PREFIX_SIZE 		1
#define		DTE_MX_CFG_EXT_AT				1
#define		DTE_MX_PAD_STRING_SIZE			30
#define		DTE_MX_CFG_PAD_STRING_SIZE		8
#define		DTTR_BUFSIZE					480

#define		DTE_MX_REMOTE_CALLERS			 8
#define		DTE_MX_REMOTE_CALLERS_LISTS		 2
#define		DTE_CHECK_ISDN_ADDR_SIZE		23
#define		DTE_CHECK_ISDN_SUB_ADDR_SIZE	10
#define		DTE_ISDN_PASSWORD_SIZE			16

#define		DTE_SCA_ISDN_ADDR_SIZE			23
#define		DTE_SCA_ISDN_SUB_ADDR_SIZE		10
#define		DTE_SCA_UUI_SIZE				16

#define		DTE_MX_SLOT_ENTRY				1
#define		DTE_MX_SLOT_STR_SIZE			128
#define		DTE_MX_TIME_STR_SIZE			25

#define		DTE_CH_NAME_SIZE				28


/*---------------------------------------------------------------------------
 *		DEFAULT HARDWARE-RELATED PARAMETERS
 *---------------------------------------------------------------------------
 *	DTE_68302_BASE_ADDR	: default MC 68302 base address (if not specified
 *						  in the configuration)
 *
 *	DTE_SCC_NB			: maximum number of SCCs in the system
 *						  more precisely, maximum number of UART SCC interrupt
 *						  routines. Each interrupt routine has an associated
 *						  index, from 0 to DTE_SCC_NB-1.
 *
 *--------------------------------------------------------------------------*/
#define		DTE_68302_BASE_ADDR				((uchar FAR *)0x700000)
#define		DTE_SCC_NB						3


/*---------------------------------------------------------------------------
 *		MORE OPTIMIZATION
 *---------------------------------------------------------------------------
 *	These compilation options allow further suppression of unused code.
 *
 *	DTE_NO_SW_POLLING	: polling for modem or V.120 mode
 *							ON : data reception (from DTE) is not performed
 *								 using a software polling, but using a PDTE
 *								 mechanism.
 *							OFF: data reception is performed using a software
 *								 polling.
 *							May be set to ON for a MC68302 UART, else to OFF.
 *							Suggested value: OFF.
 *--------------------------------------------------------------------------*/
#define	DTE_NO_SW_POLLING		OFF


/*---------------------------------------------------------------------------
 *		AT parser configuration
 *---------------------------------------------------------------------------
 *	DTE_PIB_SIZE	: AT parser input buffer size.
 *					  Suggested value : 256.
 *					  An AT command must also fit in a single OMNITEL-BRICKS
 *					  buffer.
 *
 *	DTE_UUI_SIZE			: maximum length of an ISDN UUI field.
 *
 *	DTE_ISDN_ADDR_SIZE		: maximum length of an ISDN address field.
 *	DTE_ISDN_SUB_ADDR_SIZE	: maximum length of an ISDN subaddress field.
 *	AT_WORK_SIZE			: maximum length of an AT string.
 *							  Must be greater than the length of the longest
 *							  string sent to DTE (eg ATI, ATI3)
 *					  		  Suggested value : 256 or 512.
 *							  If not defined, set to DTE_PIB_SIZE.
 *
 *	AT_PREFIX_EXT_CNF		: single character prefix for extended
 *							  configuration commands.
 *							  ASCII constant. Suggested value : '#'.
 *--------------------------------------------------------------------------*/

#define	DTE_PIB_SIZE			256
#define	DTE_UUI_SIZE			128
#define	DTE_ISDN_ADDR_SIZE		32
#define	DTE_ISDN_SUB_ADDR_SIZE	21
#define	AT_WORK_SIZE			512

#define	AT_PREFIX_EXT_CNF		'#'

/*---------------------------------------------------------------------------
 *				PRODUCT RESET
 *---------------------------------------------------------------------------
 *	One of the two following macros (At_z2 or At_z) must be defined :
 *
 *	[1]	At_z2 (jn_id, at_cmd_addr, at_cmd_lgth) :
 *			uchar		jn_id		: DTE junction identifier
 *			uchar FAR * at_cmd_addr	: address of the AT command to execute
 *						  			  after ATZ/AT&F execution
 *			uchar		at_cmd_lgth	: length of the AT command to execute
 *									  after ATZ/AT&F execution
 *
 *	[2] At_z (jn_id) :  same, without the AT command-related arguments
 *						(This is an obsolete form).
 *
 *	The At_z2 macro allows to implement the execution of commands like
 *	'ATZ&O2E0Q0V1'.
 *	The AT command string to execute after ATZ/AT&F execution has to be saved
 *	by the At_z2 macro. The startup code can then supply it, after restart,
 *	to the DTE_INT entity (by sending it a DTE_INT_DA_RQ primitive).
 *
 *	Examples:
 *	[Ex.1]
 *		#define	At_z2(jn_id, at_cmd_addr, at_cmd_lgth)
 *	[Ex.2]
 *		#define	At_z2(jn_id, at_cmd_addr, at_cmd_lgth)	Trap (0, "At_z")
 *	[Ex.3]
 *		#if NEW_FCT_STYLE == ON
 *			extern 	void 	my_reboot (uchar, uchar FAR *, uchar);
 *		#else
 *			extern 	void 	my_reboot ();
 *		#endif
 *		#define	At_z2(jn_id, at_cmd_addr, at_cmd_lgth)	my_reboot (jn_id, at_cmd_addr, at_cmd_lgth)
 *
 *--------------------------------------------------------------------------*/
#define		At_z2(jn_id, at_cmd_addr, at_cmd_lgth)


/*---------------------------------------------------------------------------
 *				INCOMING CALL FILTERING
 *---------------------------------------------------------------------------
 *	uchar	Dte_check_incoming_call (ent_id) :
 *						check if incoming call can be accepted
 *			ent_id:			ENT_CC : check ISDN or analog telephony incoming
 *									 call
 *							ENT_X25: check (D-channel) X.25 incoming call
 *			return value:	OK : incoming call may be accepted, subject to
 *								 time slot checking
 *							CONTINUE: incoming call may be accepted, skip
 *								 time slot checking
 *							NOK: incoming call is rejected
 *	This macro is called, once or several times, upon occurrence of
 *	an incoming call which can be accomodated by a DTE channel.
 *
 *--------------------------------------------------------------------------*/
#define	Dte_check_incoming_call(ent_id)			(OK)

/*---------------------------------------------------------------------------
 *				OUTGOING CALL FILTERING
 *---------------------------------------------------------------------------
 *	uchar	Dte_check_outgoing_call (ent_id) :
 *						check if outgoing call can be performed
 *			ent_id:			ENT_CC : check ISDN or analog telephony outgoing
 *									 call
 *							ENT_X25: check (D-channel) X.25 outgoing call
 *			return value:	OK : outgoing call may be performed, subject to
 *								 time slot checking
 *							CONTINUE: outgoing call may be performed, skip
 *								 time slot checking
 *							NOK: outgoing call is rejected
 *	This macro is called, once or several times, when a request for
 *	an outgoing call is being processed by the DTE_INT entity.
 *
 *--------------------------------------------------------------------------*/
#define	Dte_check_outgoing_call(ent_id)			(OK)

/*---------------------------------------------------------------------------
 *				CALL CLEARING FILTERING
 *---------------------------------------------------------------------------
 *	uchar	Dte_check_call_clearing (call_user_id, ch_id) :
 *						check if call clearing can be performed
 *			call_user_id:	call identifier (user)
 *			ch_id:			DTE channel identifier
 *			return value:	OK : call clearing may be performed
 *							NOK: call clearing may not be performed
 *	This macro is called in some cases when a call clearing may have to be
 *	performed.
 *
 *--------------------------------------------------------------------------*/
#define	Dte_check_call_clearing(call_user_id, ch_id)			(OK)

/*---------------------------------------------------------------------------
 *				DATE/TIME MANAGEMENT
 *---------------------------------------------------------------------------
 *	long	Dte_current_time ()	: returns the current date/time, in minutes,
 *								  since the origin of time.
 *	long	Dte_current_week_time () : returns the current date/time, in
 *								   minutes, since the beginning of the week.
 *	uchar	Dte_current_year ()	: returns the current year (from 0 to 99,
 *								  binary)
 *
 *	The origin of time must be the origin of time used in SLOT.C.
 *
 *	These macros are only used if DTE_TIME_SLOT is set to ON.
 *---------------------------------------------------------------------------
 *	void	Dte_set_time (struct dte_time FAR *p_dte_time)
 *		set the system time. p_dte_time is the address of a dte_time
 *		structure, defined in DTE_INT.H.
 *
 *	void	Dte_get_time (struct dte_time FAR *p_dte_time)
 *		get the system time. p_dte_time is the address of a dte_time
 *		structure, defined in DTE_INT.H.
 *		The data structure at p_dte_time is filled with the time information.
 *
 *	These macros are only used if DTE_TIME_SLOT is set to ON.
 *--------------------------------------------------------------------------*/

#if DTE_TIME_SLOT == ON
#	define	Dte_current_time()	 		(1L)	/* 1 minute after origin */
#	define	Dte_current_week_time()	 	(0L)	/* 1 minute after origin */
#	define	Dte_current_year()			(94)	/* 1994 */
#endif
#if DTE_TIME_SLOT == ON
#	define	Dte_set_time(p_dte_time)
#	define	Dte_get_time(p_dte_time)
#endif


/*---------------------------------------------------------------------------
 *				CALLS AND X.25 VIRTUAL CIRCUITS LOG
 *---------------------------------------------------------------------------
 *	These macros are used when a call is started, connected, cleared, or
 *	rejected (call barred).
 *
 *	The compilation option DTE_LOG does not need to be ON.
 *
 *	Dte_log_call_in (calling_nb, length) : incoming call (ACU_CONN_IN)
 *		calling_nb:		address of a buffer containing the calling number
 *					 	(not nul terminated)
 *		length:			length of this buffer
 *	Dte_log_rej_call_in (p_msg) : rejected incoming call (ACU_CONN_IN)
 *		p_msg:			points at the ACU_CONN_IN message
 *	Dte_log_call_rq (called_nb, length) : outgoing call (ACU_CONN_RQ)
 *		called_nb:		address of a buffer containing the called number
 *					 	(not nul terminated)
 *		length:			length of this buffer
 *	Dte_log_call_co () : call connected (ACU_CONN_CO)
 *		called_nb:		address of a buffer containing the called number
 *					 	(not nul terminated)
 *		length:			length of this buffer
 *	Dte_log_clear_rq (cause) : clear request (ACU_CLEAR_RQ)
 *		cause:			uchar, clear cause
 *	Dte_log_clear_co (cause, cost) : clear confirmation (ACU_CLEAR_CO)
 *		cause:			uchar, clear cause
 *		cost:			short or long, total communication cost
 *	Dte_log_call_barred() : outgoing call cannot be established, call is
 *						barred (due to time slot checks).
 *	Dte_log_est_exp() : outgoing call could not be established, S7 timer
 *						expiration
 *
 *	Dte_log_x25_vc_established () : X.25 virtual circuit established
 *	Dte_log_x25_vc_cleared () : X.25 virtual circuit cleared
 *
 *---------------------------------------------------------------------------
 *	The following macros are used only for dumping the log file, with the
 *	DTE_LOG compilation option set to ON.
 *
 *	Dte_log_get_nb_of_records()	: returns an int, total number of records in
 *		the log
 *	Dte_log_fmt_buffer(p_buffer, ix, nb) : fills a buffer, with formatted
 *		log information
 *			p_buffer	: (in/out) address of the buffer to fill.
 *						  Buffer_data_offset and Bufer_data_size are significant.
 *			ix			: (in) index of the first record to process
 *			nb			: (in) number of records to process
 *		return value: number of records processed.
 *	Dte_log_purge(n)	: purge log. n is currently unused.
 *						  return value : OK, NOK.
 *
 *--------------------------------------------------------------------------*/
#define	Dte_log_call_in(calling_nb, length)
#define	Dte_log_rej_call_in(p_msg)
#define	Dte_log_call_rq(called_nb, length)
#define	Dte_log_call_co()
#define	Dte_log_clear_rq(cause)
#define	Dte_log_clear_co(cause, cost)
#define	Dte_log_call_barred()
#define	Dte_log_est_exp()

#define	Dte_log_x25_vc_established()
#define	Dte_log_x25_vc_cleared()

#define	Dte_log_fmt_buffer(p_buffer, ix, nb)	(nb)
#define	Dte_log_get_nb_of_records()				(0)
#define	Dte_log_purge(n)						(OK)

/*---------------------------------------------------------------------------
 *				CALL LISTS MANAGEMENT
 *---------------------------------------------------------------------------
 *	Dte_end_of_call_list () :
 *		This macro is called when all the tries for a call list have been
 *		done, unsuccessfully.
 *		This macro returns nothing.
 *--------------------------------------------------------------------------*/
#define	Dte_end_of_call_list()


/*---------------------------------------------------------------------------
 *				USER COMMANDS MACROS
 *---------------------------------------------------------------------------
 *	Dte_user_command_expand :
 *		This macro is called by the AT parser when it has encountered
 *		an invokation of a user command (for example AT$A, AT$B1, etc.)
 *
 *	char FAR *Dte_user_command_expand (ascii_command, num_arg) :
 *		ascii_command	: uchar, ASCII character by which the command
 *						  was invoked
 *		num_arg			: uchar, argument [0..255] of the command.
 *
 *	The macro shall return P_NIL or a pointer to a nul-terminated
 *	character string.
 *	If return is P_NIL, the command is expanded to an errored string,
 *	that is, it will trigger an 'ERROR' message from the AT interpreter.
 *	If return is a nul terminated string, the command is expanded to this
 *	string. A string like "" or " " is acceptable.
 *	This character string is immediately copied in the AT context
 *	(return by value, not address)
 *	The contents of the returned character string should be in
 *	uppercase. It should not contain the 'AT' prefix, only the command.
 *
 *	Example of returned string : "$D 0 L 100"
 *
 *	If this macro is not #defined, it will be taken as P_NIL.
 *--------------------------------------------------------------------------*/
#define	Dte_user_command_expand(ascii_command, num_arg)		P_NIL


/*---------------------------------------------------------------------------
 *				PRODUCT INFORMATION STRING MACROS
 *---------------------------------------------------------------------------
 *	Product information strings (for example, the answer to the AT command
 *	'ATI') can be defined :
 *		- either by a call to a macro, with returns a string
 *		  (for example 'Dte_at_i()').
 *		  This allows the identification string to be computed dynamically.
 *		- or by a call to another macro, with returns a list of chained
 *		  buffers (for example 'Dte_at_i5_buffers()').
 *		  This allows the identification string to be computed dynamically,
 *		  and the string can be very big.
 *		- or by a constant string #defined at compile time (for example
 *		  'PRODUCT_INFORMATIONS'). The definition is of the identification
 *		  string is therefore static.
 *
 *	Example for the 'ATI5' commands (similar logic for the other commands):
 *		- if 'Dte_at_i5_buffers' is #defined, it is used,
 *		- else if 'Dte_at_i5' is #defined, it is used,
 *		- else if 'PRODUCT_I5' is #defined, it is used,
 *		- else a default string is used.
 *
 *	uchar FAR *Dte_at_i(),
 *	PRODUCT_INFORMATIONS	: product code.
 *							  answer to AT I0.
 *	uchar FAR *Dte_at_mfr(),
 *	PRODUCT_MANUFACTURER	: name of the manufacturer.
 *							  answer to AT +MFR, AT +FMFR.
 *	uchar FAR *Dte_at_mdl(),
 *	PRODUCT_MODEL			: name of the equipment.
 *							  answer to AT +MDL, AT +FMDL.
 *	uchar FAR *Dte_at_rev(),
 *	PRODUCT_REVISION		: revision number.
 *							  answer to AT +REV, AT	+FREV.
 *	uchar FAR *Dte_at_i1()	: ROM checksum
 *							  answer to AT I1.
 *	uchar FAR *Dte_at_i3(),
 *	PRODUCT_I3				: part number and revision level.
 *							  answer to AT I3.
 *	uchar FAR *Dte_at_i4(),
 *	PRODUCT_I4				: encoded product information
 *							  answer to AT I4.
 *	uchar FAR *Dte_at_cap(),
 *	PRODUCT_CAPABILITIES	: product capabilities.
 *							  answer to AT +CAP.
 *	struct buffer FAR *Dte_at_i5_buffers(),
 *	uchar FAR *Dte_at_i5(),
 *	PRODUCT_I5				: supplementary product information
 *							  answer to AT I5.
 *	uchar FAR *Dte_at_i6(),
 *	PRODUCT_I6				: detailed hardware identification
 *							  answer to AT I6.
 *	uchar FAR *Dte_at_i254(),
 *	PRODUCT_I254			: supplier information
 *							  answer to AT I254.
 *--------------------------------------------------------------------------*/

#define		PRODUCT_INFORMATIONS	"OMNITEL-BRICKS - Copyright (c) OMNITEL SA 1989-1996"
#define		PRODUCT_MANUFACTURER	"OMNITEL SA - 31 rue Jean Rostand  91893 ORSAY - FRANCE - tel: 33 1 69331250"
#define		PRODUCT_MODEL			"OMNITEL-BRICKS Software Product (c) OMNITEL SA"
#define		PRODUCT_REVISION		"V1.0"
#define		PRODUCT_I3				PRODUCT_REVISION
#define		PRODUCT_I4				"OMNITEL SA - 31 rue Jean Rostand  91893 ORSAY - FRANCE - tel: 33 1 69331250"
#define		PRODUCT_CAPABILITIES	"OMNITEL-BRICKS Software Product"
#define		PRODUCT_I5				"OMNITEL SA - 31 rue Jean Rostand  91893 ORSAY - FRANCE - tel: 33 1 69331250"
#define		PRODUCT_I6				"00"
#define		PRODUCT_I254			"OMNITEL-BRICKS, Copyright (c) OMNITEL SA 1989-1996 - Tel: 33 1 69331250"


/*---------------------------------------------------------------------------
 *		COMPILATION OPTIONS, FOR SMOOTH TRANSITION BETWEEN VERSIONS
 *---------------------------------------------------------------------------
 *	DTE_USE_PAD_V1				: use of PAD version V1.xx
 *								  ON : the DTE_INT entity in compiled with an
 *									   (old) PAD component, version V1.xx
 *								  OFF: the DTE_INT entity is compiled with the
 *									   current (last) PAD version.
 *	  DTE_USE_PAD_V1 shold normally be set to OFF, or not #defined.
 *
 *	ENT_PH_FAX					: name of the Physical Modem/Fax entity
 *								  if not #defined, defaults to ENT_PH_MODEM.
 *								  Normally, no need to #define this parameter.
 *--------------------------------------------------------------------------*/
#define		DTE_USE_PAD_V1			OFF
#define		ENT_PH_FAX				ENT_PH_MODEM


/*---------------------------------------------------------------------------
 *				INTERNAL DEFAULT VALUES
 *---------------------------------------------------------------------------
 *		These values are used if they are not specified in the corresponding
 *		configuration structure.
 *
 *	DTE_DEF_DTR_POLL_INTERVAL 	: default DTR poll interval, for communication
 *								  ports. Suggested value : 1 second.
 *	DTE_DEF_MEM_LENGTH			: number of bytes displayed, for dump command.
 *								  Suggested value : 8 lines of 16 bytes.
 *--------------------------------------------------------------------------*/

#define	DTE_DEF_DTR_POLL_INTERVAL		(1*SECOND)
#define	DTE_DEF_MEM_LENGTH				(16)

/*---------------------------------------------------------------------------
 *		VARIOUS MINOR HOOKS
 *---------------------------------------------------------------------------
 *
 *	The following macros are called by the DTE_INT code upon certain
 *	occasions.
 *	None of the following macros need be #defined.
 *
 *		Dte_sts_end_of_dollar_z()
 *			called upon successful termination of the AT$Z command.
 *		Dte_config_status()
 *			return value :
 *				NOK:	an error during system configuration has been
 *						detected (DTE_INT will then send a message...)
 *				OK:		system configuration is ok.
 *
 *--------------------------------------------------------------------------*/

#define	Dte_sts_end_of_dollar_z()
#define	Dte_config_status()					(OK)

/*---------------------------------------------------------------------------
 *		VARIOUS MINOR CUSTOMIZATIONS : AT &V format, S8 effect
 *---------------------------------------------------------------------------
 *	DTE_AND_V_NO_S115: suppress display of the S115 register in AT&V
 *		ON : suppress display of S115 in AT&V
 *		OFF: do not suppress [default]
 *	DTE_NO_WRITE_S008: setting of S8 has no effect
 *		ON : the command ATS8=xxx has no effect.
 *		OFF: this command is fully operative [default]
 *--------------------------------------------------------------------------*/
#define	DTE_AND_V_NO_S115			OFF
#define	DTE_NO_WRITE_S008			OFF

/*---------------------------------------------------------------------------
 *		VARIOUS MINOR CUSTOMIZATIONS, FOR SAVING *CODE* SPACE
 *---------------------------------------------------------------------------
 *	DTE_NO_CHANNEL_LIST_INIT: no use of DTE_INT configuration with 'channel
 *							  lists'
 *		ON : do not compile code which allows configuration of DTE_INT using
 *			 'lists of DTE channels'
 *		OFF: compile [default]
 *	DTE_NO_RI_SUPPORT: no use of RI (Ring Indicator) junction signal
 *		ON : do not compile code which supports driving of the Ring Indicator
 *			 junction signal
 *		OFF: compile [default]
 *	DTE_NO_AT_B: no support for the ATB command
 *		ON : do not compile code which supports ATB processing
 *		OFF: compile [default]
 *	DTE_NO_S122_254: no support for S122=254 (when S122==254, ATZ restores the
 *					 values of the parameters for the current DTE channel)
 *		ON : do not compile code which supports ATZ processing with S122=254
 *		OFF: compile [default]
 *	DTE_NO_CARRIER_MESSAGES: no support for display of 'CARRIER' messages
 *		ON : do not compile code which supports display of 'CARRIER' messages
 *		OFF: compile [default]
 *	DTE_NO_PROTOCOL_MESSAGES: no support for display of 'PROTOCOL' messages
 *		ON : do not compile code which supports display of 'PROTOCOL' messages
 *		OFF: compile [default]
 *	DTE_NO_COMPRESSION_MESSAGES: no support for display of 'COMPRESSION' messages
 *		ON : do not compile code which supports display of 'COMPRESSION' messages
 *		OFF: compile [default]
 *	DTE_NO_ARQ_MESSAGES: no support for display of 'CONNECT xxx/ARQ' messages
 *		ON : do not compile code which supports display of 'CONNECT xxx/ARQ'
 *			 messages
 *		OFF: compile [default]
 *--------------------------------------------------------------------------*/
#define	DTE_NO_CHANNEL_LIST_INIT	OFF
#define	DTE_NO_RI_SUPPORT			OFF
#define	DTE_NO_AT_B					OFF
#define	DTE_NO_S122_254				OFF
#define	DTE_NO_CARRIER_MESSAGES		OFF
#define	DTE_NO_PROTOCOL_MESSAGES	OFF
#define	DTE_NO_COMPRESSION_MESSAGES	OFF
#define	DTE_NO_ARQ_MESSAGES			OFF

#endif			/* _DTE_PAR_H */

/*EOF*/

