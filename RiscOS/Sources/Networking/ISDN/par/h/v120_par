
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - v120_par.h
 *
 * $Revision$
 *
 * $Date$
 *
 *		COMPILE-TIME PARAMETERS for the VS (V.120) component or entity.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef VS_PAR_H
#define VS_PAR_H

/*---------------------------------------------------------------------------
 *		NAMES
 *---------------------------------------------------------------------------
 *	ENT_VS : name of the VS entity, if the software is to be compiled as an
 *			 entity.
 *		Suggested value: ENT_L3.
 *		It should not be ENT_DTE_INT, nor any value associated to some other
 *		entity present in the system.
 *
 *--------------------------------------------------------------------------*/
#define	ENT_VS			ENT_IB

/*---------------------------------------------------------------------------
 *		FUNCTIONAL PARAMETERS
 *---------------------------------------------------------------------------
 *	VS_TERMINAL_ENTITY : name of entity which hosts the VS/V.120 routines.
 *		Two possible values :
 *		ENT_DTE_INT : the entity is ENT_DTE_INT
 *			The software is compiled as a library of routines which are
 *			called by code from the DTE_INT entity.
 *		 	In this case vs.c shall not be compiled.
 *		ENT_VS : the entity is ENT_VS
 *			The software is compiled as the code for an entity plus
 *			a library of routines.
 *		 	In this case vs.c shall be compiled.
 *
 *	VS_TERMINAL_IT_ENTITY : name of entity which supplies and gets the
 *		user data.
 *		If VS_TERMINAL_ENTITY is ENT_DTE_INT, VS_TERMINAL_IT_ENTITY must
 *			be ENT_DTE_INT_IT.
 *		If VS_TERMINAL_ENTITY is ENT_VS, VS_TERMINAL_IT_ENTITY is the name
 *			of the user 'application' entity (typically: ENT_APPLI)
 *
 *	VS_V42B_NEGOTIATION	: V.42bis negotiation support
 *		ON : compile code, which support V.42bis negotiation over V.120.
 *		OFF: do not compile.
 *
 *	VS_RESET_CONFIG : enable SM_RESET_CONFIG_RQ processing
 *		ON : compile code, which processes SM_RESET_CONFIG_RQ
 *		OFF: do not compile
 *		If VS_RESET_CONFIG is not defined, it defaults to RESET_CONFIG.
 *
 *	VS_ASSERT : assertion checks
 *		ON : compile code, which performs assertion checks
 *		OFF: do not compile
 *
 *--------------------------------------------------------------------------*/
#define		VS_TERMINAL_ENTITY		ENT_VS			/* or ENT_DTE_INT */

#if	VS_TERMINAL_ENTITY == ENT_VS
#	define	VS_TERMINAL_IT_ENTITY	ENT_APPLI
#endif
#if	VS_TERMINAL_ENTITY == ENT_DTE_INT
#	define	VS_TERMINAL_IT_ENTITY	ENT_DTE_INT_IT
#endif

#define		VS_V42B_NEGOTIATION		ON

#if SIMULATION == ON
#	define	VS_ASSERT				ON
#else
#	define	VS_ASSERT					OFF
#endif

#define	VS_RESET_CONFIG				ON

/*---------------------------------------------------------------------------
 *		CONFIGURATION DATA SIZE PARAMETERS
 *---------------------------------------------------------------------------
		These parameters reserve place in each configuration buffer for :
		---------------------------------------------------------------

		A number of network access configuration contexts which contain
			a number of service access configuration contexts which contain
				a number of service access configuration contexts.
		A number of VS parameters profiles.
		A number of terminal configuration contexts.

		WARNING :
		-------

		The first buffer of configuration must contain a minimum of
		informations to enable VS to start : i.e. at least one network
		access context which contains at least one service access context
		which contains at least one connection context; at least the default
		parameter profile context; and at least one terminal context.

		Additional (Network, service, connection, profile, or terminal)
		contexts can be added at any time using other SM_SET_CONFIG_RQ.

		Configuration context can be supplied several times.
		Each new description in a SM_SET_CONFIG_RQ supersedes the previous
		one.

		You can also add a new sub-context inside a context whenever you
		want (ex: service access context is a sub-context inside network
		access context) by giving the existing context reference with
		information fields unchanged and a new sub-context reference.

		Having following parameters precisely set will reduce memory
		requirements for configuration structures.

	VS_CONFIG_MAX_NB_CFG_TERMINAL	: maximum number of terminals
			in a configuration structure.
	VS_CONFIG_MAX_NB_CFG_NETWORK	: maximum number of NA (network accesses)
			in a configuration structure.
	VS_CONFIG_MAX_NB_CFG_SERVICE	: maximum number of NSAP per NA
			in a configuration structure.
	VS_CONFIG_MAX_NB_CFG_CONNECTION	: maximum number of connection per NSAP
			in a configuration structure.
	VS_CONFIG_MAX_NB_CFG_PROFILE	: maximum number of profiles
			in a configuration structure.
	VS_CONFIG_MAX_NB_CFG_SERVPROF	: maximum number of service profiles
			in a configuration structure.
 *
 *	V120_MX_PH_CHANNEL	: maximum number of B channels for a V.120
 *			connection (possibly multilink V.120).
 *			Suggested values :
 *				1	if only single link V.120 is used
 *				2   (or more) if multilink V.120 is used
 *			Default value : 2
 *
 *--------------------------------------------------------------------------*/
#define	VS_CONFIG_MAX_NB_CFG_TERMINAL		2
#define	VS_CONFIG_MAX_NB_CFG_NETWORK		1
#define	VS_CONFIG_MAX_NB_CFG_SERVICE		1
#define	VS_CONFIG_MAX_NB_CFG_CONNECTION		1
#define	VS_CONFIG_MAX_NB_CFG_PROFILE		3
#define	VS_CONFIG_MAX_NB_CFG_SERVPROF		3

#define	V120_MX_PH_CHANNEL					2

/*--------------------------------------------------------------------------*/

#endif  /* ifndef VS_PAR */

/*EOF*/
