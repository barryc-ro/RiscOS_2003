
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - pdte_par.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- contains global compile time parameters definition for asynchronous
 *		  serial handler.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    TR29-PACK                                        |*/
/*|    PDTE Entity                                      |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef PDTE_PAR
#define PDTE_PAR

/*---------------------------------------------------------------------------
 *		Supported UARTs : type and access from the host
 *---------------------------------------------------------------------------
 *	UART	: type of the UART :
 *		WD16452			: Western Digital 16452 UART (with fifos)
 *		IN8250			: 8250 compatible UART
 *		MOTO302			: Motorola 68302 chip's SCC
 *		MOTO3xx_WITH_16550: Motorola 68xxx in 16550 emulation mode,
 *						  including Motorola MC68PM302
 *		MOTO2681		: Motorola 2681 and compatible DUART
 *		PH2691			: Philips 2691 and compatible UART
 *		PH26C92			: Philips 26C92 and compatible DUART (with fifos)
 *		UART_API		: No UART, UART is replaced by an API
 *
 *	UART_IO	: i/o mode, defines the access to the UART's registers.
 *		UART_IO_MAPPED		: the UART is mapped in the i/o address space.
 *		UART_MEMORY_MAPPED	: the UART is mapped in the memory address space.
 *
 *		Must not be specified when the UART is UART_API.
 *
 *	UART_ALIGNMENT : alignment of the UART registers.
 *		Possible values : 0, 1, 2
 *		0 : UART registers 0..1F are at adresses 0, 1, 2,.. 1F (byte
 *			alignment)
 *		1 : UART registers 0..1F are at adresses 0, 2, 4,.. 3F (word
 *			alignment)
 *		2 : UART registers 0..1F are at adresses 0, 4, 8,.. 7F
 *			(doubleword alignment)
 *--------------------------------------------------------------------------*/
#define	UART								UART_API
#define	UART_ALIGNMENT						0


/*---------------------------------------------------------------------------
 *	Some PDTE parameters related to communication with OMNITEL-BRICKS entities
 *---------------------------------------------------------------------------
 *	PDTE_ENTITY : identification of the default entity to which to send
 *				  characters received by handler
 *				  (may be changed at configuration time)
 *
 *	PDTE_RCV_BUFFER_HOLE_SIZE : size of the hole, to be left at the beginning
 *		of the received buffers.
 *--------------------------------------------------------------------------*/
#define	PDTE_ENTITY							ENT_DTE_INT
#define	PDTE_RCV_BUFFER_HOLE_SIZE			15


/*---------------------------------------------------------------------------
 *		PDTE assertions (consistency). Useful at integration times.
 *---------------------------------------------------------------------------
 *	PDTE_ASSERT : compile assertion checks
 *		ON : compile code, which performs assertion checks
 *		OFF: do not compile.
 *			 If this compilation option is not defined, PDTE_ASSERT defaults
 *			 to ASSERT.
 *--------------------------------------------------------------------------*/
#define	PDTE_ASSERT						ASSERT


/*---------------------------------------------------------------------------
 *		Support for automatic baud rate detection
 *---------------------------------------------------------------------------
 *	PDTE_AUTOBAUD : support of automatic baud rate detection
 *		ON : compile code, which enables automatic baud rate detection
 *		OFF: do not compile
 *--------------------------------------------------------------------------*/
#define	PDTE_AUTOBAUD				OFF

/*---------------------------------------------------------------------------
 *		V.14/V.110 parameters, UART independent
 *---------------------------------------------------------------------------
 *	PDTE_RA_BREAK	: break support
 *					  ON : BREAK sent by the DTE is processed,
 *						   'break condition' received from the line generates
 *						   a BREAK to the DTE.
 *					  OFF : BREAK sent by the DTE is ignored.
 *						   'break condition' received from the line is also
 *							ignored.
 *					  Default is OFF.
 *--------------------------------------------------------------------------*/
#define	PDTE_RA_BREAK				OFF

/*---------------------------------------------------------------------------
 *		PDTE internal trace. May be useful at integration time.
 *---------------------------------------------------------------------------
 *	HDL_TRACE : enable traces in memory
 *		ON : compile code for traces in memory.
 *		OFF: do not compile code for traces in memory.
 *
 *	PDTE_TRACE_IN_VIDEO : trace in a PC video RAM.
 *		ON : trace is stored in video RAM (format : data byte, attribute),
 *			 starting from address PDTE_TRACE_VIDEO_ADDRESS, over
 *			 2*HTR_BUFSIZE bytes.
 *		OFF: trace is stored in an internal buffer.
 *		Significant only if HTR_TRACE is ON.
 *
 *	PDTE_TRACE_VIDEO_ADDRESS : address of the video RAM.
 *		Typical value : 0xB8000000 (VGA RAM address).
 *		Significant only if PDTE_TRACE_IN_VIDEO is ON.
 *
 *	HDL_TRACE_BYTE : enable traces of most sent and received bytes.
 *		May slow processing.
 *		Significant only if HDL_TRACE is ON.
 *--------------------------------------------------------------------------*/
#define	HDL_TRACE						ASSERT
#define	PDTE_TRACE_IN_VIDEO			OFF
#define	PDTE_TRACE_VIDEO_ADDRESS			(0xB8000000 + 25*2*80)
#define	HDL_TRACE_BYTE				OFF

/*---------------------------------------------------------------------------
 *		Flow control (of PDTE by the DTE) parameters
 *--------------------------------------------------------------------------*/
#define	PDTE_DEF_TO_DTE_FIFO_LOW	0	/* flow control (of PDTE by the DTE) default low mark */
#define	PDTE_DEF_TO_DTE_FIFO_HIGH	4	/* flow control (of PDTE by the DTE) default high mark */


/*---------------------------------------------------------------------------
 *		Send message from PDTE interrupt routine
 *---------------------------------------------------------------------------
 *	Definition of the macro 'Pdte_it_send_message', send message from
 *	interrupt routine.
 *
 *	This macro should normally be set to the 'Send_message' macro.
 *--------------------------------------------------------------------------*/
#define	Pdte_it_send_message(p_msg)		Send_message (p_msg)

/*---------------------------------------------------------------------------
 *		Monitoring of UART activity (currently used only for 68302)
 *---------------------------------------------------------------------------
 *	Pd_xmt_led_on  (jn_id, scc_id)
 *	Pd_xmt_led_off (jn_id, scc_id)
 *		jn_id	: junction id
 *		scc_id	: SCC id (interrupt routine index)
 *
 *	These macros are called when the SCC starts (on) and stops (off)
 *	transmitting to the DTE
 *
 *--------------------------------------------------------------------------*/
#define	Pd_xmt_led_on(jn_id, scc_id)
#define	Pd_xmt_led_off(jn_id, scc_id)

/*---------------------------------------------------------------------------
 *		End of transmission
 *---------------------------------------------------------------------------
 *	Hdl_process_end_xmit (jn_id, scc_id)
 *		jn_id	: junction id
 *		scc_id	: SCC id (interrupt routine index)
 *
 *	This macro is called when the UART has signalled us, in general through a
 *	'transmit interrupt', an 'end of transmission' and no more data are to
 *	be sent to the DTE
 *	For user-specific processing.
 *
 *--------------------------------------------------------------------------*/
#define	Hdl_process_end_xmit(jn_id, scc_id)


/*---------------------------------------------------------------------------
 *		Definition of junction ports : DTR, DTS - CTS, DSR, CD, RI, AUX
 *---------------------------------------------------------------------------
 *	These macros allow to define customer specific processing for the
 *	junction ports (for example if junction ports are implemented in an
 *	exotic way). Entry points are :
 *		- read the state of the DTR and RTS signals
 *		- drive the CTS, DSR, CD, RI and 'AUX' signals
 *
 *	In general, these macros need not be #defined.
 *	If these macros are not #defined, the standard PDTE processing is used
 *	(using hdl_get_jn() and hdl_set_jn() routines).
 *
 *	In the following macros, 'p_pdte_ctxt' is the address of the PDTE context.
 *	The field 'id' of each PDTE context (normally accessed through the
 *	'Hdl_mgt_id' macro) is the identifier of the junction.
 *
 *	Note : for 68302, the port names in the configuration should be set to
 *		   PO_EXTERNAL_PORT	(or PO_NO_PORT).
 *---------------------------------------------------------------------------
 *	uchar Hdl_get_dtr(p_pdte_ctxt) : get DTR state
 *		return value :
 *			JSIG_UNKNOWN : signal state is not known
 *			JSIG_ON		 : signal is ON  (present, logical state)
 *			JSIG_OFF	 : signal is OFF (absent)
 *---------------------------------------------------------------------------
 *	uchar Hdl_get_rts(p_pdte_ctxt) : get RTS state
 *		return value : JSIG_UNKNOWN, JSIG_ON, JSIG_OFF
 *---------------------------------------------------------------------------
 *	void Hdl_set_cts(p_pdte_ctxt, uchar new_state) : set CTS state
 *		new_state :	ON	: signal is present (logical state)
 *					OFF	: signal is absent
 *---------------------------------------------------------------------------
 *	void Hdl_set_dsr(p_pdte_ctxt, uchar new_state) : set DSR state
 *		new_state :	ON, OFF
 *---------------------------------------------------------------------------
 *	void Hdl_set_cd(p_pdte_ctxt, uchar new_state) : set CD state
 *		new_state :	ON, OFF
 *---------------------------------------------------------------------------
 *	void Hdl_set_ri(p_pdte_ctxt, uchar new_state) : set RI state
 *		new_state :	ON, OFF
 *---------------------------------------------------------------------------
 *	void Hdl_set_aux(p_pdte_ctxt, uchar new_state) : set AUX state
 *		new_state :	ON, OFF
 *--------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
 *		Various constants, all UARTS
 *---------------------------------------------------------------------------
 *	HDL_ATABORT_TLATENCY : duration for which not to process incoming
 *						   characters when in AT mode (abortable AT command).
 *	HDL_RAWFMT_TPOLLING : duration of the forward polling timer, in 'raw'
 *						  data mode
 *--------------------------------------------------------------------------*/
#define		HDL_ATABORT_TLATENCY		(125*MILLISECOND)
#define		HDL_RAWFMT_TPOLLING			(100*MILLISECOND)


/*--------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
 *		68302 SCCM access macros
 *---------------------------------------------------------------------------
 *	An occasional problem occurs with Motorola 68302-based designs.
 *	When there is a high load of SCC interrupts, something occurs,
 *	when the CPU sofware accesses the SCCM, which breaks the 302 (usually a
 *	processor reset is observed).
 *
 *	Up to now, this problem has only been observed in rare cases.
 *	It has been observed with several, unrelated designs.
 *
 *  It is very likely that the problem occurs when the 68302 begins to
 *	process the interrupt, while an access to SCCM is being made by the CPU.
 *	There is some embarassed text in the Motorola documentations, around
 *	SCCM and SCCE (for example in Motorola 68302 User's Manual, 'IMR',
 *	paragraph 3.2.5.3)
 *
 *	To alleviate this problem, the macros Lock_sccm() and Unlock_sccm()
 *	are called when the PDTE software wants to modify the SCCM.
 *
 *	For designs exhibiting the problem, these macros should be set,
 *	for example, to It_disable() and It_enable().
 *
 *	For designs exhibiting the problem :
 *		#define	Lock_sccm()		It_disable ()
 *		#define	Unlock_sccm()	It_enable ()
 *	For designs not exhibiting the problem :
 *		#define	Lock_sccm()
 *		#define	Unlock_sccm()
 *--------------------------------------------------------------------------*/
#define	Lock_sccm()
#define	Unlock_sccm()

/*---------------------------------------------------------------------------
 *		V.14 DEFAULT parameters for 68302
 *---------------------------------------------------------------------------
 *
 *	PDTE_DEF_V14_N_R_BD				: number of BDs to use for reception
 *	PDTE_DEF_V14_N_X_BD				: number of BDs to use for transmission
 *	PDTE_DEF_V14_SYNC_BLOCK_SIZE	: size of V.14 synchronous block
 *	PDTE_DEF_V14_X_BD_SIZE			: size of V.14 transmit block
 *	PDTE_DEF_V14_NB_IDLE			: number of idle characters before closing
 *									  a V.14 receive BD
 *	PDTE_DEF_V14_FC_LOW_MARK		: CTS flow control low mark.
 *									  Suggested value : 20.
 *--------------------------------------------------------------------------*/
#define	PDTE_DEF_V14_N_R_BD				8
#define	PDTE_DEF_V14_N_X_BD				8
#define	PDTE_DEF_V14_R_SYNC_BLOCK_SIZE	64
#define	PDTE_DEF_V14_X_BD_SIZE			UART_MX_OUT_CHAR
#define	PDTE_DEF_V14_NB_IDLE			3
#define	PDTE_DEF_V14_FC_LOW_MARK		20

/*---------------------------------------------------------------------------
 *		Asynchronous V.110 DEFAULT parameters for 68302
 *---------------------------------------------------------------------------
 *
 *	PDTE_DEF_V110_N_R_BD			: number of BDs to use for reception
 *	PDTE_DEF_V110_N_X_BD			: number of BDs to use for transmission
 *	PDTE_DEF_V110_X_BD_SIZE			: size of V.110 transmit block
 *	PDTE_DEF_V110_NB_IDLE			: number of idle characters before closing
 *									  a V.110 receive BD
 *--------------------------------------------------------------------------*/
#define	PDTE_DEF_V110_N_R_BD				8
#define	PDTE_DEF_V110_N_X_BD				8
#define	PDTE_DEF_V110_X_BD_SIZE				UART_MX_OUT_CHAR
#define	PDTE_DEF_V110_NB_IDLE				3

/*---------------------------------------------------------------------------
 *		Loop parameters for 68302
 *---------------------------------------------------------------------------
 *
 *	PD_NB_BREAK_LOOPS_1200	: number of loops to execute after starting
 *							  transmission of a break signal.
 *							  This duration is used to tune the duration of
 *							  the break.
 *	N_POLL_CR_FLG			: number of pollings of the CR register before
 *							  giving up
 *--------------------------------------------------------------------------*/
#define	PD_NB_BREAK_LOOPS_1200	0x0A00	/* suitable value for a 68302 at 18.432 MHz */
#define	N_POLL_CR_FLG			1000

/*---------------------------------------------------------------------------
 *		CPU rates support for 68302
 *---------------------------------------------------------------------------
 *	PDTE_CPU_BY_CONFIG		: system rate may be supplied in the configuration
 *							  structure (in the field 'clock_frequency')
 *							  Default is ON.
 *
 *	PDTE_CPU_SYSTEM_RATE	: support for run-time computation of the CPU
 *							  and baud rate.
 *							  Default is OFF.
 *							  For 68302 only.
 *		ON : compile code, which supports computation of the CPU rate and
 *			 baud rate using the System_rate_Hz macro.
 *			 'System_rate_Hz' is a 'unsigned long', which holds the
 *			 representation of the CPU rate, in Hz (Hertz)
 *		OFF: do not compile.
 *
 *	At least one of the two options PDTE_CPU_BY_CONFIG and
 *	PDTE_CPU_SYSTEM_RATE must be defined. Both may be.
 *---------------------------------------------------------------------------
 *	If PDTE_CPU_BY_CONFIG is ON, it is possible to reduce the size taken by
 *	the various tables by using the following compilation flags.
 *	If none is defined, all supported clock rates are compiled.
 *	Each flag suppress the code and table which supports a particular clock
 *	rate.
 *
 *		PD_CLK_NO_1_8	: do not compile for clock rate of  1.8432 MHz
 *		PD_CLK_NO_15_3	: do not compile for clock rate of 15.36   MHz
 *		PD_CLK_NO_16_0	: do not compile for clock rate of 16.0    MHz
 *		PD_CLK_NO_16_3	: do not compile for clock rate of 16.384  MHz
 *		PD_CLK_NO_16_5	: do not compile for clock rate of 16.588  MHz
 *		PD_CLK_NO_16_6	: do not compile for clock rate of 16.667  MHz
 *		PD_CLK_NO_18_4	: do not compile for clock rate of 18.432  MHz
 *		PD_CLK_NO_20_0	: do not compile for clock rate of 20.0    MHz
 *		PD_CLK_NO_22_1	: do not compile for clock rate of 22.184  MHz
 *		PD_CLK_NO_25_0	: do not compile for clock rate of 25.0    MHz
 *
 *--------------------------------------------------------------------------*/
#define	PDTE_CPU_SYSTEM_RATE		OFF
#define	PDTE_CPU_BY_CONFIG				ON

#if PDTE_CPU_SYSTEM_RATE == ON

	extern 	ulong 			system_rate_Hz;	/* this variable should contain, at execution time, the CPU rate value, in Hz */
#	define	System_rate_Hz	(system_rate_Hz)

#endif	/* PDTE_CPU_SYSTEM_RATE == ON */

/*---------------------------------------------------------------------------
 *		Definition for 16550 emulation, for 68302
 *---------------------------------------------------------------------------
 *	PDTE_16550_UART_CLOCK : Clock of the emulated UART 16550
 *							given in Hz
 *  PDTE_16550_UART_WA_1  : fixes a hardware bug in the component:
 *                          the actual baud rate performed by the chip is
 *                          approximately 8 times faster than the programmed
 *                          one. Set this parameter to ON to fix this problem.
 *--------------------------------------------------------------------------*/
#define	PDTE_16550_UART_CLOCK				1843200L
#define PDTE_16550_UART_WA_1				ON


/*--------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------
 *		PDTE Simulation
 *---------------------------------------------------------------------------
 *	PDTE_JN_SIMUL : junction signal simulation
 *		ON : compile code, which allows simulation of DTR and RTS change
 *			 by special characters (CTRL-A, CTRL-B)
 *		OFF: do not compile.
 *
 *	PDTE_JN_CP_SIMUL : junction signal simulation, for synchronous
 *					   communication ports
 *		ON : compile code, which allows simulation of DTR change
 *			 for communication ports by special characters (CTRL-C, CTRL-D)
 *		OFF: do not compile.
 *
 *	PDTE_JN_PANEL : junction signal panel.
 *		ON : compile code, which allows driving of a panel showing the
 *			 junction signals (macros Pd_jn_panel_init() and
 *			 Pd_jn_panel_update_xx()).
 *		OFF: do not compile.
 *
 *	PDTE_JN_PANEL_IN_VIDEO : junction signal panel in a PC video RAM.
 *		ON : panel is stored in video RAM (format : data byte, attribute),
 *			 starting from address PDTE_JN_PANEL_VIDEO_ADDRESS.
 *			 There is no need to #define the macros Pd_jn_panel_init()
 *			 and Pd_jn_panel_update_xx().
 *		OFF: panel is implemented differently.
 *			 In this case the macros Pd_jn_panel_init() and
 *			 Pd_jn_panel_update_xx() must be #defined here.
 *		Significant only if PDTE_JN_PANEL is ON.
 *
 *	PDTE_JN_PANEL_VIDEO_ADDRESS : address of the video RAM for junction
 *		signal panel.
 *		Typical value : 0xB8000000 + 8*2*80.
 *		Significant only if PDTE_JN_PANEL_IN_VIDEO is ON.
 *--------------------------------------------------------------------------*/
#define	PDTE_JN_SIMUL				OFF
#define	PDTE_JN_CP_SIMUL			OFF
#define	PDTE_JN_PANEL   			OFF
#define	PDTE_JN_PANEL_IN_VIDEO		OFF
#define	PDTE_JN_PANEL_VIDEO_ADDRESS			(0xB8000000 + 8*2*80)
/*
	#	define	Pd_jn_panel_init(jn_id)									??
	#	define	Pd_jn_panel_update_dtr(jn_id, dtr)						??
	#	define	Pd_jn_panel_update_rts(jn_id, rts)						??
	#	define	Pd_jn_panel_update_dsr(jn_id, dsr)						??
	#	define	Pd_jn_panel_update_cts(jn_id, cts)						??
	#	define	Pd_jn_panel_update_cd(jn_id, cd)						??
	#	define	Pd_jn_panel_update_ri(jn_id, ri)						??
	#	define	Pd_jn_panel_update_aux(jn_id, ri)						??
*/

/*--------------------------------------------------------------------------*/

#endif

/*EOF*/
