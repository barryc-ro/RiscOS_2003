
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - sm_par.h
 *
 * $Revision$
 *
 * $Date$
 *
 *		Contains the SM entity parameters.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    SM Entity (System Management)                    |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1996 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*     Configuration structures    */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#include "config.h"

#if NEW_FCT_STYLE == ON
    void    sm_load_p_config_descriptor (struct config_descriptor FAR **, uchar);
#else
    void    sm_load_p_config_descriptor ();
#endif

#define Sm_load_first_p_config_descriptor(p_p_descriptor, p_i)	sm_load_p_config_descriptor (p_p_descriptor, *(p_i) = 0)
#define Sm_load_next_p_config_descriptor(p_p_descriptor, p_i)	sm_load_p_config_descriptor (p_p_descriptor, (++*(p_i)) )


			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/* Configuration update functions  */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

		/*

			Cfg_move_config_par (update_id, a_update_value, update_value_mx_sz) :
			---------------------------------------------------------------------
			Cfg_move_update_par (update_id, a_update_value, update_value_mx_sz) :
			---------------------------------------------------------------------

			These functions are user dependent and are used by the SM entity
			to transfer an initial value (for Cfg_move_config_par) or an
			updated value (for Cfg_move_update_par) of the configuration
			constant data into the buffer to be sent to the destination entity.

				uint       update_id          : ID of the update value,
				uchar FAR *a_update_value     : address where to store the
												update value,
				ushort     update_value_mx_sz : size of the update value.

		*/

#if CONFIG_UPDATE_MANAGEMENT == ON

#	define	Cfg_move_update_par(update_id, a_update_value, update_value_size) \
			sm_move_update_par (update_id, a_update_value, update_value_size)

#	define	Cfg_move_config_par(update_id, a_update_value, update_value_size) \
			sm_move_config_par (update_id, a_update_value, update_value_size)

#endif

		/*

			Cfg_set_update_par (update_id, a_update_value) :
			------------------------------------------------

			This function is user dependent and is used by an entity
			to save an update value in the safe memory area
			(this area is pointed to by 'p_sm_ram_mem' if SM_RAM.C or
			SM_STS.C is used).

				uint       update_id      : ID of the update value,
				uchar FAR *a_update_value : address of the update value to be
											copied in the safe memory area.

		*/

#if CONFIG_UPDATE_MANAGEMENT == ON

#	define	Cfg_set_update_par(update_id, a_update_value) \
			sm_set_update_par (update_id, a_update_value)

#endif

/*--------------------------------------------------------------------------
 *	SM_MAX_NB_TRIGGERS : maximum number of triggers (activated and
 *						 deactivated by SM_SET_REPORT_IN) which can be
 *						 simultaneously active.
 *--------------------------------------------------------------------------*/

#define	SM_MAX_NB_TRIGGERS	1

/*EOF*/
