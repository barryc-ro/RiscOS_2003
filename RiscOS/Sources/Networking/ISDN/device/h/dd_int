/*	Interface for Device Driver
	---------------------------

These functions represent the interface between the Omnitel ISDN stack and
the Acorn ISDN device driver code.

In addition to the functions listed below the device driver will initiate
actions such as dialling and hang up by sending a message to the relevant
entity.

When sending a dial message the dial string has this format:

	number*subaddress&secondaddress

The "*subaddress" part and/or the "&secondaddress" part may be omitted.
The service is not sent as part of the dial string as it is sent in a 
separate field.


Paul Skirrow, Wed 19th March 1997

*/


/*	Receive ISDN Data
	-----------------
	
isdndata_receive(unsigned char* buffer, int numbytes)

The Omnitel code should call this function to pass on a block of
received data to the device driver interface. 

When receiving data in V120 mode (or async/sync mode) the device driver
will put the data into the ISDNdata receive buffer which is handled by the
buffer manager, and it doesn't care about packet boundaries.

When using the proposed PPP packet system the data will be sent as a packet
to PPP.
*/

void isdndata_receive(unsigned char *, int);	/* Receive block of data from ISDN receive */


/*	Flow Control
	------------
	
isdndata_tx_flowcontrol(int busy)	

The Omnitel code MUST call this function to control the flow of transmitted
data. The device driver will send data as fast as it can until it is told
that the Omnitel system is busy. It will then wait until the busy is cleared
before sending any more data.

It is essential that all Omnitel modes use this function to avoid congestion and
to avoid running out of buffers/RAM.

V120 offers its own end to end handshaking and the Omnitel code may use
that handshaking information to decide when to control the flow of data
but it is not essential (if the remote V120 system says it is not ready
for more data it is not neceesary for the Omnitel code to immediately 
pass that fact on unless the Omnitel transmit buffers are full in which
case it should).
*/

void isdndata_tx_flowcontrol(int);	/* ISDN tx flow control, TRUE when busy, false when no longer busy */

/*	Process Call Control Message
	----------------------------

isdnctrl_process_cc_msg(struct message FAR *msg, struct buffer FAR *buffer, uchar service)

The Omnitel code should call this function when the application entity receives a call
control message. It allows the device driver to decode the message and take any
appropriate action (usually it will send some status text to the ISDNctrl stream).
*/

void isdnctrl_process_cc_msg(struct message FAR *, struct buffer FAR *, uchar);  /* Process cc message for ISDNctrl */


/*	Send Pending Transmit Data
	--------------------------


int isdndata_sendpending(void)
	
Rather than sending data in a message as soon as the device driver receives
it we hold it in the buffer manager buffer until the Omnitel system is
ready to process it in a callback. Before calling the Omnitel_server
the callback routine should call isdndata_sendpending to fill an Omnitel
buffer and send a transmit message.

Returns TRUE if there is more data to send. If there is more data it is
important that the Omnitel server is called before sending a further 
message in case it wants to assert busy through isdndata_tx+flowcontrol.
*/

int isdndata_sendpending(void);

/*	ISDN Activated/Deactivated
	--------------------------

These calls are made by the Omnitel system to notify the device
driver when the ISDN system is going active or inactive.

We set isdndata_active flag to TRUE when the data path is ready for 	
data reception or transmission (and to false when it is deactivated).

The isdndata_activated call is also used to pass the protocol_hole_size
value and maximum data size that is used in all transmitted data packets 
(we need to to it here as the hole and data size depends on the protocol being used).
*/

void isdndata_activated (int ,int);
void isdndata_deactivated (void);


/*	Auto Answer Control
	-------------------

autoanswer variable corresponds to register s0.
If it is -1 ignore all incoming calls and don't generate RING or send an alerting message.
If it is 0 generate RING and send alerting to network.
If it is >0 send alerting message and then answer straight away.

This needs to be global so appli can access it and decide when to ring

*/

extern int isdnctrl_autoanswer;

#define AUTOANSWER_NORING (-1)
#define AUTOANSWER_NOANSWER (0)


/*	Max String Length
	-----------------

*/

#define ISDNCTRL_MAX_NUMBER 32
#define ISDNCTRL_MAX_SUBADDRESS 20
#define ISDNCTRL_MAX_SPID 20


/*	Configuration Structure
	-----------------------

We set up the ISDN configurations in this structure and pass it to the 
omnitel_config routine before the first dial command. Note that these
settings should not be changed once omnitel_config has been called
as many are used to initialise the Omnitel system.


*/

typedef struct
{
  uchar interface;   /* 'U' for ISDN interface or 'S' for S/T interface */
  int country;       /* Country code, 44=UK, 33=France, 1000 for Europe/ETSI, as in services.h */
  int operator;      /* Operator code, as listed in services.h */
  uchar calling_number[2] [ISDNCTRL_MAX_NUMBER+1];  /* Our calling number for each B channel*/
  uchar calling_subaddress[2] [ISDNCTRL_MAX_SUBADDRESS+1];  /* Our sub-address for each b channel */
  uchar spid[2] [ISDNCTRL_MAX_SPID+1];   /* SPID for US operators */

  uchar local_number_ppp [ISDNCTRL_MAX_NUMBER+1];  /* Our local number for PPP service */
  uchar local_subaddress_ppp [ISDNCTRL_MAX_SUBADDRESS+1];  /* Our sub-address for PPP service */
  uchar priority_ppp;  /* Priority for PPP service */

  uchar local_number_v120 [ISDNCTRL_MAX_NUMBER+1];  /* Our local number for V120 service */
  uchar local_subaddress_v120 [ISDNCTRL_MAX_SUBADDRESS+1];  /* Our sub-address for V120 service */
  uchar priority_v120;  /* Priority for V120 service */

  uchar local_number_mppp_syn [ISDNCTRL_MAX_NUMBER+1];  /* Our local number for PPP service */
  uchar local_subaddress_mppp_syn [ISDNCTRL_MAX_SUBADDRESS+1];  /* Our sub-address for PPP service */
  uchar priority_mppp_syn;  /* Priority for PPP service */

  uchar local_number_mppp_asyn [ISDNCTRL_MAX_NUMBER+1];  /* Our local number for PPP service */
  uchar local_subaddress_mppp_asyn [ISDNCTRL_MAX_SUBADDRESS+1];  /* Our sub-address for PPP service */
  uchar priority_mppp_asyn;  /* Priority for PPP service */

  int sent;          /* True when omnitel_config has been called */
} isdnctrl_configs;
  

#define Isdnctrl_configs_interface		((isdnctrl_configs *)p_isdnctrl_configs)-> interface  
#define Isdnctrl_configs_country		((isdnctrl_configs *)p_isdnctrl_configs)-> country
#define Isdnctrl_configs_operator		((isdnctrl_configs *)p_isdnctrl_configs)-> operator
#define Isdnctrl_configs_calling_number		((isdnctrl_configs *)p_isdnctrl_configs)-> calling_number[0][0]
#define Isdnctrl_configs_calling_number_1	((isdnctrl_configs *)p_isdnctrl_configs)-> calling_number[0][0]
#define Isdnctrl_configs_calling_number_2	((isdnctrl_configs *)p_isdnctrl_configs)-> calling_number[1][0]
#define Isdnctrl_configs_calling_subaddress	((isdnctrl_configs *)p_isdnctrl_configs)-> calling_subaddress[0][0]
#define Isdnctrl_configs_calling_subaddress_1	((isdnctrl_configs *)p_isdnctrl_configs)-> calling_subaddress[0][0]
#define Isdnctrl_configs_calling_subaddress_2	((isdnctrl_configs *)p_isdnctrl_configs)-> calling_subaddress[1][0]
#define Isdnctrl_configs_spid			((isdnctrl_configs *)p_isdnctrl_configs)-> spid[0][0]
#define Isdnctrl_configs_spid_1			((isdnctrl_configs *)p_isdnctrl_configs)-> spid[0][0]
#define Isdnctrl_configs_spid_2			((isdnctrl_configs *)p_isdnctrl_configs)-> spid[1][0]
#define Isdnctrl_configs_local_number_ppp	((isdnctrl_configs *)p_isdnctrl_configs)-> local_number_ppp[0]
#define Isdnctrl_configs_local_subaddress_ppp	((isdnctrl_configs *)p_isdnctrl_configs)-> local_subaddress_ppp[0]
#define Isdnctrl_configs_priority_ppp		((isdnctrl_configs *)p_isdnctrl_configs)-> priority_ppp

#define Isdnctrl_configs_local_number_v120	((isdnctrl_configs *)p_isdnctrl_configs)-> local_number_v120[0]
#define Isdnctrl_configs_local_subaddress_v120	((isdnctrl_configs *)p_isdnctrl_configs)-> local_subaddress_v120[0]
#define Isdnctrl_configs_priority_v120		((isdnctrl_configs *)p_isdnctrl_configs)-> priority_v120

#define Isdnctrl_configs_local_number_mppp_syn		((isdnctrl_configs *)p_isdnctrl_configs)-> local_number_mppp_syn[0]
#define Isdnctrl_configs_local_subaddress_mppp_syn	((isdnctrl_configs *)p_isdnctrl_configs)-> local_subaddress_mppp_syn[0]
#define Isdnctrl_configs_priority_mppp_syn		((isdnctrl_configs *)p_isdnctrl_configs)-> priority_mppp_syn
#define Isdnctrl_configs_local_number_mppp_asyn		((isdnctrl_configs *)p_isdnctrl_configs)-> local_number_mppp_asyn[0]
#define Isdnctrl_configs_local_subaddress_mppp_asyn	((isdnctrl_configs *)p_isdnctrl_configs)-> local_subaddress_mppp_asyn[0]
#define Isdnctrl_configs_priority_mppp_asyn		((isdnctrl_configs *)p_isdnctrl_configs)-> priority_mppp_asyn

#define Isdnctrl_configs_sent			((isdnctrl_configs *)p_isdnctrl_configs)-> sent


/*	Omnitel Configure Function
	--------------------------

We call omnitel_config to set the configurations. It is only called once after
module initialisation. The Omnitel code is responsible for using the configuration
fields to initialise the relevant entities. 

This function will always be called before the first dial message is issued
(the dial command checks to see if it has already been sent and sends it if not).
	
*/

extern void omnitel_config(isdnctrl_configs *);	/* Send configuration data to Omnitel system */
extern void omnitel_reset_config(isdnctrl_configs *);	/* Send configuration data to Omnitel system */


/*	TX Data Pending Flag
	--------------------
	
isdndata_tx_pending indicates that the device driver has transmit data pending
in the buffer manager buffer. The Omnitel callback would normally call
isdndata_sendpending to send a block of this data before calling the
server to process the messages.
*/

extern int isdndata_tx_pending;		/* Flag we have tx data pending */


/*	TX Busy Flag
	------------

This flag is reflects the flow control status as set by the last
isdndata_tx_flowcontrol control.

*/

extern int isdntxbusy;			/* True when ISDN tx system is busy */
extern int isdndata_active;		/* Flag that there is a physical path for data (rx or tx) */


/*	MSN/Sub-Address Matching
	------------------------

*/

extern int call_matches (char *called_numsub);	/* Return true if call matches our configs */


/*	ISDNctrl Timer
	--------------

Timer function called every n cs and used by ISDNctrl to force a hangup
if call is not answered.
*/

void isdnctrl_timer(void);

/*	Timer Frequency in ms
	---------------------

Defined in "conf_srv.h", but we can't #include that as it contains
a static structure (ugh).
*/


/* #define TIMER_SYSTEM_TICK 50	 */
