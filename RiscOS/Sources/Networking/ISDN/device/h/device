/*  Device interface

device_init should be called during module initialisation to initialise
the assembler routines (workspace etc) and to declare the device driver
to DeviceFS.

device_final should be called when the module is closing down to
declare that the device driver is no longer valid and to free workspace.

device_service should be called when the module receives a module service
entry. It will process DeviceFS service calls.
*/

_kernel_oserror *device_init(void *);
_kernel_oserror *device_final(void);
_kernel_oserror *device_service(int, _kernel_swi_regs *, void *);

/* Note devicetype numbers are significant as we use them for fast lookup
in the handler code. DO NOT CHANGE THE VALUES */
typedef enum { DATATYPE=0, CTRLTYPE=2 } devicetype;

/*	Buffer Sizes
	------------

We need big buffers for the ISDNdata device which may be running at 6.4kbytes/s.

ISDNctrl needs smaller buffers but they should still be large enough to
hold the longest command and the largest amount of returned data which
may include a status report (AT#?) with lots of long strings.

If the end of the buffer is reached when filling it with received data (or
ISDNctrl responses) subsequent data will be discarded.

*/

#define CTRLBUFFER 1024    /* Size of ISDNctrl buffer in buffer manager */
#define DATABUFFER 32768   /* Approx 8kbytes/s or 16kbytes/s using two ISDN channels, so 32K=4s*/


/*	Device Special Field Parameters
	-------------------------------

DeviceFS allows us to specify special fields when the device is
opened.
	
A validation string is used when registering the ISDNdata device.
It is used to specify the special fields which may be specified when
opening the device (see PRM 2-422).

We currently allow one special field which is used to specify that 
the ISDNdata stream should be used for ISDNctrl AT type commands.

This is done by opening the file devices#ctrl:$.ISDNdata

Characters send to ISDNdata will now be routed to the ISDNctrl command
interpreter until the ISDN connection is open, and they will then be
send to the ISDN system in the normal way.

Similarly, the responses from the ISDNctrl system will be returned on
the ISDNdata stream when this option has been specified.
*/

#define ISDNDATAVALIDATION "ctrl/S"	/* ISDNdata validation string */
#define ISDNDATA_CTRLFIELD 0		/* Field 0 is 0 if ctrl specified or &DEADDEAD if not */
