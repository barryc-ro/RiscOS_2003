/*  Handler functions

Handler functions handle the device handler calls from DeviceFS
and transfer data between the ISDN system and the DeviceFS and BufferManager
modules.

*/


#ifndef FALSE
#define FALSE (0)
#endif
#ifndef TRUE
#define TRUE (1)
#endif

void handler_init(void);	/* Intialise handler code */


/*	Structure for Calling Buffer Manager
	------------------------------------

For speed we call the Buffer Manager service routine directly using the
address of the routine and the address of its workspace that we obtain
using Buffer_InternalInfo (PRM 5a-226). These two values are guaranteed to
be the same for all streams so we only need to store them once although they
will be read with every Buffer_InternalInfo call.
*/

/* Address of Buffer Manager service routine: */
typedef int (*bufferman_serviceroutine) (struct bufferman *, int, char *, int);

typedef struct bufferman
{
  void *workspace;			/* Pointer to bufferman workspace */
  bufferman_serviceroutine service;	/* Address of service routine */
} buffermanstruct;



/*	Stream Structure
	----------------

We have four numbered streams in total:
	0  ISDNdata rx
	1  ISDNdata tx
	2  ISDNctrl rx
	3  ISDNctrl tx

Each stream is allocated a DeviceFS stream handle (passed on DeviceDriver
initialise - PRM 2-599) and also an Buffer Manager internal buffer ID
which we use when calling the Buffer Manager service routine. We get the
internal buffer ID by calling Buffer_InternalInfo (PRM 5a-226) when we
are allocated a buffer handle by the DeviceDriver Stream Created call.

*/

typedef struct
{
  int handle;		 /* DevicsFS stream handle passed on driver initialise */
  int bufferman_id;	 /* Buffer manager internal ID for this strea, */
  int *special; /* Pointer to special field parameters - see PRM 2-422 and 2-599) */
  int open;
} streamstruct;

/* Note numbering in this enum is crucial and must not be changed */
typedef enum streamtype
  { ISDNDATARX=DATATYPE, ISDNDATATX=DATATYPE+1, ISDNCTRLRX=CTRLTYPE, ISDNCTRLTX=CTRLTYPE+1} streamtype;

#define MAXSTREAMS 4       /* Maximum number of streams we support - as listed above */

extern streamstruct streams[MAXSTREAMS];
extern buffermanstruct bufferman_call;

/*	Flag ISDN active
	----------------
	
Flag to indicate when ISDN is active (ie when we have an ISDN connection to
a remote system). We use this flag to prevent certain operations (send data,
hang up etc) from happening when we are not connected.
*/

extern int isdn_active;


/*	IOctl Parameter Block
	---------------------
*/

typedef struct {
  unsigned int reason  :16;	/* ioctl reason code */
  unsigned int group   : 8;	/* ioctl group code */
  unsigned int reserved: 6;	/* should be 0 */
  unsigned int read    : 1;	/* read flag */
  unsigned int write   : 1;     /* write flag */
  unsigned int data;            /* actual data */
} ioctl_t;


/*	IOctl Reason Codes
	------------------
	
*/

#define IOCTL_BAUD         (1)
#define IOCTL_FORMAT       (2)
#define IOCTL_HANDSHAKE    (3)
#define IOCTL_BUFFER_SIZE  (4)
#define IOCTL_BUFFER_THRES (5)
#define IOCTL_CTRL_LINES   (6)
#define IOCTL_FIFO_TRIG    (7)
#define IOCTL_FLUSH	   (10)

/*	IOctl Control Line Bits
	-----------------------

These bits refer to the handshake/control lines on a modem
serial port and are accessed via IOctl 6.

We provide emulation of these lines as follows:
	DTR	If set to 0 we perform a hang up
	RTS	If set to 0 we set Omnitel RX handshake to busy, or
		if set to 1 we set Omnitel RX handshake to ready (only
		available in V120, and ot implemented yet).
	CTS	When read returns 0 if ISDN TX stream is busy or
		returns 1 if ISDN TX stream is ready for more data.
	DSR	When read always returns 1
	DCD	When read returns 1 when ISDN connection is open or 0 otherwise

CTS, DSR and DCD are read only.

These signals can be used by the PPP module, as follows. When PPP wants to
disconnect it sets DTR to 0. If the remote system has hung up or the conection
is cleared DCD will go to 0.
*/


#define DTRFLAGBIT (1)		/* DTR=1 indicates Data Terminal Ready */
#define RTSFLAGBIT (1<<1)	/* RTS=1 indicates ready to receive data */
#define CTSFLAGBIT (1<<16)	/* CTS=1 indicates ready to send data */
#define DSRFLAGBIT (1<<17)	/* DSR always returns 1 when read */
#define RIFLAGBIT  (1<<18)	/* Ring Indicator is unused */
#define DCDFLAGBIT (1<<19)	/* DCD=1 indicates data carrier detect */
