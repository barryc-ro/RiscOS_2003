;
;      ISDN Device Interface
;      ---------------------
;  
;  
;  
;	Author:		Paul Skirrow
;			Octopus Systems
;			9 Randwell Close
;			IPSWICH  IP4 5ES
;  
;	Tel:		01473 728943
;	Fax:		01473 270643
;	Email:		pskirrow@octosys.co.uk
;	WWW:		www.octosys.co.uk
;  
;	Version:	0.05, Fri 18th April 1997
;  
;	Created:	28th January 1997
;  
;	Assembler:	Objasm v3.06 (we need to link with C code which aasm cannot do)
;  
;	Description:	Assembler interface for device driver
;
;	HISTORY
;	-------
;	Fri 18th April 1997
;	Added Buffer_Purge code
;

		GET	Hdr:ListOpts
                GET     Hdr:NdrDebug		; definition of true
                GET     Hdr:Macros		; system wide macro definitions
                GET     Hdr:System		; swis and hardware declarations
		GET     Hdr:Symbols		; constants TRUE, FALSE, VFlag
		GET	Hdr:Buffer		; Buffer Manager 
		GET	s.macros		; some useful macros
;
;
; 	Device Driver Entry
;	-------------------
;
;	DeviceFS calls driver_entry to communicate with our ISDN device.
;	On entry:
;		r0	Reason code (0-14)
;		r8	Driver private word set up when registered (unused)
;		r12	Module private word set up when registered (needed for entry to C)
;
;	On exit:	V set indicates an error with R0 pointing to error block.
;
;	See PRM2-599 for driver entry details and RISC OS 3 PRM Appendix C, page 4-393 for 
;	APCS details.
;
;	This is an entry veneer used to pass the parameters on to a C function.
;	We don't use a CMHG generated entry veneer as it offers no control over the V flag.
;
;	Specify C$$code area so we can link with C generated code:

	        AREA    |C$$code|, CODE, READONLY


		IMPORT  driver_handler
driver_entry
		EXPORT driver_entry
		STMFD   sp!, {r0-r9, sl, fp, lr}  ; Save regs on IRQ | SVC stack
		MOV	r2,#12
		MOV	r0, sp		; Set up _kernel_swi_regs * argument
		MOV	r6, pc
		BIC	r3, r6, #3	; *** Was BIC r6,r6,#3
		TEQP	r3, #3		; To SVC mode, preserve IRQ / FIQ state
		MOV	r0, r0		; NOP
		MOV	fp, #0		; Halt C backtrace at this stack level
		MOV	r7, lr		; Save SVC lr
		MOV	sl, sp, LSR #20
		MOV	sl, sl, ASL #20	; Get LWM of SVC stack
		LDMIA   sl, {r4, r5}	; Save static data relocations across fn call
		MOV	r1, r12		; Set up private workspace argument
		LDR	r12, [r12]	; Get pointer to static relocations for module
		LDMIB   r12, {r12, fp}	; *** was r12,lr IB skips first word
		STMIA   sl, {r12, fp}	; *** Was r12, lr ***Set up static data relocations
		ADD	sl, sl, #540	; 540 = size of stack chunk structure

		BL	driver_handler	; C driver_handler

		SUB	sl, sl, #540	; Point back to base of SVC stack (was 512+40)
		STMIA   sl, {r4, r5}	; Restore old static data relocations
		MOV	lr, r7		; Restore SVC lr
		TEQP	r6, #0		; Back to entry mode
		MOV     r0,r0		; NOP
;		
		ADD	sp, sp, #4	; Drop original r0 from stack and return new r0
		LDMFD	sp!, {r1-r9, sl, fp, lr}  ; Restore registers (except r0)
		BIC	lr, lr, #VFlag	; Clear V flag (indicates no error on exit)
		CMP	r0, #0		; Error if r0 is non-zero
		ORRNE	lr, lr, #VFlag	; Set V flag to indicate error if r0 is non-zero
		MOVS	pc, lr		; Return with V flag set and r0->error block (or 0 if no error)
;
;
;	Remove Block from Buffer
;	------------------------
;
;	Function to be called from C to read bytes from buffer:
;
;	int Buffer_RemoveBlock(buffermanstruct bms, int bufferID, char *dest, int *numbytes);
;
;	Returns number of bytes remaining in buffer
;	On exit: number of bytes actually read in *numbytes
;
;	struct buffermanstruct
;	{
;	  void *bufferman_workspace; 	Pointer to bufferman workspace
;	  void *bufferman_read;		Address of bufferman read
;	} bms;
;
;	On entry:
;		r0 points to bufferman struct (values obtained from Buffer_InternalInfo)
;		r1 holds internal buffer ID
;		r2 pointer to destination area to copy data to
;		r3 pointer to int holding number of bytes to remove
;
;	On exit:
;		r0 contains number of bytes not removed
;		r3 points to int holding actual number of bytes removed
;		r1, r2, ip corrupted, other registers preserved
;
;	Call buffer manager remove block routine with:
;		r0=3 reason code
;		r1   internal buffer ID
;		r2   pointer to destination area
;		r3   number of bytes to remove
;
;	PRM 5a-217
;
Buffer_RemoveBlock
		EXPORT Buffer_RemoveBlock

		STMFD	sp!, {r2, r3, r12, lr}	; Save return address and r12
		MOV	ip, r0			; Take copy of r0 (points to buffermanstruct)
		MOV	r0, #BufferReason_RemoveBlock  ; Reason code in r0
		LDR	r3,[r3]			; Number of bytes to read
		MOV	lr, pc			; Return address (PC+8) in lr
		LDMIA	ip, {r12, pc}		; Call buffer manager routine with r12=workspace

		MOV 	r0, r3			; Number of bytes remaining in buffer returned in r0
		LDMFD	sp!, {r1, r3}		; Restore original r3 and get ptr to dest area in r1
		SUB	r2, r2, r1		; Number of bytes actually removed
		STR	r2, [r3]		; Returned in int pointed to by r3
		LDMFD	sp!, {r12, pc}^		; Restore r12 and return


;	Insert Block into Buffer
;	------------------------
;
;	Function to be called from C to insert bytes into buffer:
;
;	int Buffer_InsertBlock(buffermanstruct bms, int bufferID, char *source, int *numbytes);
;
;	Returns number of bytes inserted
;	On exit: number of bytes actually read in *numbytes
;
;	struct buffermanstruct
;	{
;	  void *bufferman_workspace; 	Pointer to bufferman workspace
;	  void *bufferman_read;		Address of bufferman read
;	} bms;
;
;	On entry:
;		r0 points to bufferman struct (values obtained from Buffer_InternalInfo)
;		r1 holds internal buffer ID
;		r2 pointer to destination area to copy data to
;		r3 pointer to int holding number of bytes to remove
;
;	On exit:
;		r0 contains number of bytes actually inserted
;		r1, r2, ip corrupted, other registers preserved
;
;	Call buffer manager remove block routine with:
;		r0=3 reason code
;		r1   internal buffer ID
;		r2   pointer to source area
;		r3   number of bytes to insert
;
Buffer_InsertBlock
		EXPORT Buffer_InsertBlock

		STMFD	sp!, {r12, lr}		; Save return address and r12
		MOV	ip, r0			; Take copy of r0 (points to buffermanstruct)
		MOV	r0, #BufferReason_InsertBlock  ; Reason code in r0
		LDR	r3,[r3]			; Number of bytes to insert
		MOV	lr, pc			; Return address (PC+8) in lr
		LDMIA	ip, {r12, pc}		; Call buffer manager routine with r12=workspace

		MOV 	r0, r3			; Number of bytes remaining in buffer returned in r0
		LDMFD	sp!, {r12, pc}^		; Restore r12 and return

;
;	Remove Byte from Buffer
;	-----------------------
;
;	Function to be called from C to read bytes from buffer:
;
;	int Buffer_RemoveByte(buffermanstruct bms, int bufferID);
;
;	Returns byte or -1 if unable to remove byte.

;	On entry:
;		r0 points to bufferman struct (values obtained from Buffer_InternalInfo)
;		r1 holds internal buffer ID
;
;	On exit:
;		r0 contains byte read or -1 if unable to remove byte
;		r1, r2, ip corrupted, other registers preserved
;
;	Call buffer manager remove block routine with:
;		r0=2 reason code
;		r1   internal buffer ID
;
;	PRM 5a-217
;
Buffer_RemoveByte
		EXPORT Buffer_RemoveByte

		STMFD	sp!, {r12, lr}		; Save return address and r12
		MOV	ip, r0			; Take copy of r0 (points to buffermanstruct)
		MOV	r0, #BufferReason_RemoveByte  ; Reason code in r0
		MOV	lr, pc			; Return address (PC+8) in lr
		LDMIA	ip, {r12, pc}		; Call buffer manager routine with r12=workspace

		MOV 	r0, r2			; Return byte in r0
		MOVCS	r0, #-1			;  or -1 if unable to remove byte
		LDMFD	sp!, {r12, pc}^		; Restore r12 and return

;	Purge Buffer
;	------------
;
;	Function to be called from C to purge buffer:
;
;	void Buffer_Purge(buffermanstruct bms, int bufferID);
;
;	On entry:
;		r0 points to bufferman struct (values obtained from Buffer_InternalInfo)
;		r1 holds internal buffer ID

;	Call buffer manager remove block routine with:
;		r0=8 reason code
;		r1   internal buffer ID
;
;	PRM 5a-219
;
Buffer_Purge
		EXPORT Buffer_Purge

		STMFD	sp!, {r12, lr}		; Save return address and r12
		MOV	ip, r0			; Take copy of r0 (points to buffermanstruct)
		MOV	r0, #BufferReason_PurgeBuffer  ; Reason code in r0
		MOV	lr, pc			; Return address (PC+8) in lr
		LDMIA	ip, {r12, pc}		; Call buffer manager routine with r12=workspace
		LDMFD	sp!, {r12, pc}^		; Restore r12 and return


		END
		
