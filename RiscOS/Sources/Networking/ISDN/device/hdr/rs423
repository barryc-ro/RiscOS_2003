; > hdr:RS423

; *********************************************
; *** Changes List (better late than never) ***
; *********************************************

; 31-Mar-91 DDV Muddled around with control bits, correct minor bug in SF_Mod..
; 31-Mar-91 DDV Added RTS, CTS bits.
; 31-Mar-91 DDV Added TIControl bits.
; 29-May-91 TMD Messed around with SerialFlags bits
; 01-Aug-91 TMD Renamed RTSHigh bit as UserRTSHigh
;               Changed RXEnable bit to RXDisable, added TXDisable
; 02-Aug-91 TMD Added TXDormant
; 05-Aug-91 TMD Removed RXDisable, TXDisable, moved TXDormant (I wish I could make up my mind about all this!)
; 21-Aug-91 TMD Added NoSplitBaudRates bit, made HeXOFFedMe writeable.
; 25-Jun-93 SMC Added new baud rates (38400, 57600, 115200)
;               Added SF_UseFIFOs
;               Fixed bug from 3.11 - in SF_ModifyBits, (SF_RXIgnore) should have been (1:SHL:SF_RXIgnore)
; 21-Jan-94 SMC Made SF_UseFIFOs program selectable ie. can enable/disable FIFOs.
;               Added SF_FIFOsEnabled (not selectable) to reflect the true state of the FIFOs.
; 16-Feb-94 SMC Renamed SF_FIFOsEnabled to SF_FillTXFIFO due to change in TX strategy.
;

ACIA    *       &033B0000

; ACIA offsets

        ^       0, R11
ACIARxData #    0       ; address 0 read
ACIATxData #    0       ; address 0 write
        #       4
ACIAStatus #    0       ; address 4 read
ACIAReset  #    0       ; address 4 write
        #       4
ACIACommand #   0       ; address 8 read/write
        #       4
ACIAControl #   0       ; address C read/write

; Bits in the status register

ACIAIrq          * &80  ; 1 => IRQ has occurred
ACIADSR          * &40  ; 1 => not ready
ACIADCD          * &20  ; 1 => no carrier
ACIATDRE         * &10  ; 1 => transmit register empty
ACIARDRF         * &08  ; 1 => receive register full
ACIAOverRun      * &04  ; 1 => overrun
ACIAFramingError * &02  ; 1 => framing error
ACIAParityError  * &01  ; 1 => parity error

; The last three do not cause interrupts when they occur
; They are automatically cleared by reading data

ACIADSRBit       * 6    ; Bit position of DSR bit
ACIADCDBit       * 5    ; Bit position of DCD bit

; Bits in the command register

ACIAPMC1        * &80   ; Parity mode control
ACIAPMC0        * &40   ; 00 - odd, 01 - even,
                        ; 10 - mark, no check, 11 - space, no check
ACIAPME         * &20   ; 1 => parity mode enabled
ACIAREM         * &10   ; Receiver echo mode, 1 => enabled
ACIATIC1        * &08   ; Transmitter interrupt control 
ACIATIC0        * &04   ; 00 - RTS off, TxIRQ disabled  
                        ; 01 - RTS on,  TxIRQ enabled
                        ; 10 - RTS on,  TxIRQ disabled
                        ; 11 - RTS on,  TxIRQ disabled, break
ACIARIRD        * &02   ; 1 => RxIRQ disabled
ACIADTR         * &01   ; 1 => DTR on

RoffTdis        * 0
RonTena         * ACIATIC0
RonTdis         * ACIATIC1
RonBreak        * ACIATIC1 :OR: ACIATIC0

CommandBits7e2  *       ACIAPMC0 :OR: 0        :OR: ACIAPME
CommandBits7o2  *       0        :OR: 0        :OR: ACIAPME
CommandBits7e1  *       ACIAPMC0 :OR: 0        :OR: ACIAPME
CommandBits7o1  *       0        :OR: 0        :OR: ACIAPME
CommandBits8n2  *       0        :OR: 0        :OR: 0
CommandBits8n1  *       0        :OR: 0        :OR: 0
CommandBits8e1  *       ACIAPMC0 :OR: 0        :OR: ACIAPME
CommandBits8o1  *       0        :OR: 0        :OR: ACIAPME

; Bits in the control register

ACIASBN *       &80     ; Number of stop bits. Depends on other bits as well
ACIAWL1 *       &40     ; word length
ACIAWL0 *       &20     ; (00 - 8, 01 - 7, 10 - 6, 11 - 5)
ACIAWSB *       ACIASBN :OR: ACIAWL1 :OR: ACIAWL0

ACIARCS *       &10     ; 0 => external RX clock

ControlBits7e2  *       ACIAWL0 :OR: 0       :OR: ACIASBN
ControlBits7o2  *       ACIAWL0 :OR: 0       :OR: ACIASBN
ControlBits7e1  *       ACIAWL0 :OR: 0       :OR: 0
ControlBits7o1  *       ACIAWL0 :OR: 0       :OR: 0
ControlBits8n2  *       0       :OR: 0       :OR: ACIASBN
ControlBits8n1  *       0       :OR: 0       :OR: 0
ControlBits8e1  *       0       :OR: 0       :OR: 0
ControlBits8o1  *       0       :OR: 0       :OR: 0

; Bottom four bits control internal baud rate generator as follows

; 0000 -    ext/16
; 0001 -    50
; 0010 -    75
; 0011 -   109.92
; 0100 -   134.58
; 0101 -   150
; 0110 -   300
; 0111 -   600
; 1000 -  1200
; 1001 -  1800
; 1010 -  2400
; 1011 -  3600
; 1100 -  4800
; 1101 -  7200
; 1110 -  9600
; 1111 - 19200
;

BaudUndef *     0
Baud50   *      1
Baud75   *      2
Baud110  *      3
Baud135  *      4
Baud150  *      5
Baud300  *      6
Baud600  *      7
Baud1200 *      8
Baud1800 *      9
Baud2400 *      10
Baud3600 *      11
Baud4800 *      12
Baud7200 *      13
Baud9600 *      14
Baud19200 *     15

Baud38400 *     16              ; only valid for new hardware
Baud57600 *     17
Baud115200 *    18

; 6850 control bits (for BBC compatibility stuff)

RXEN6850 *      &80             ; if set, receive interrupt enabled

RTBITS6850 *    &60
RHIBRK6850 *    &60
RLOTXD6850 *    &40
RHITXE6850 *    &20
RHITXD6850 *    &00

WSB6850 *       &1C             ; word select bits in 6850
WSBSHIFT *      2               ; number of bits to LSR bits by

DIVBITS6850 *   &03             ; mask for divider bits
DIVRESET6850 *  &03             ; value of those bits, meaning reset

; Serial flag bit numbers

SF_XONXOFFOn    * 0
SF_DCDIgnore    * 1
SF_DSRIgnore    * 2
SF_DTROff       * 3
SF_CTSIgnore    * 4
SF_NoRTSHandshake * 5
SF_RXIgnore     * 6             ; throw received characters away (apart from XON/XOFF)
SF_UserRTSHigh  * 7
SF_UseFIFOs     * 8             ; use serial FIFO hardware

SF_HeXOFFedMe   * 16
SF_IXOFFedHim   * 17
SF_DCDHigh      * 18
SF_DSRHigh      * 19
SF_Ringing      * 20
SF_CTSHigh      * 21
SF_UserXOFFedHim * 22
SF_Thresholded  * 23            ; set if not many spaces in RX buffer
SF_NoSplitBaudRates * 24

; Internal bits in SerialFlags

SF_FillTXFIFO    * 28           ; set when TX rate > 19200 ie. we need to use TX FIFO
SF_TXDormant     * 29           ; no normal chars to transmit (excluding breaks or XON/XOFF)
SF_BreakOn       * 30           ; trying to transmit a break
SF_StoppingBreak * 31           ; set on 710 machines when trying to stop a break
                                ; ie letting transmitter empty

SF_ModifyBits   * (1:SHL:SF_XONXOFFOn):OR:(1:SHL:SF_DCDIgnore):OR:(1:SHL:SF_DSRIgnore):OR:(1:SHL:SF_DTROff):OR:(1:SHL:SF_CTSIgnore):OR:(1:SHL:SF_NoRTSHandshake):OR:(1:SHL:SF_RXIgnore):OR:(1:SHL:SF_UserRTSHigh):OR:(1:SHL:SF_UseFIFOs):OR:(1:SHL:SF_HeXOFFedMe)

        ASSERT  SF_DSRHigh-SF_DCDHigh = ACIADSRBit-ACIADCDBit

DCDDSRShift * SF_DSRHigh-ACIADSRBit

XONChar  * &11
XOFFChar * &13

; Bits in r1 in RS423 error event

SerialError_Parity  * 1:SHL:5
SerialError_Overrun * 1:SHL:4
SerialError_Framing * 1:SHL:3
SerialError_DSR     * 1:SHL:2
SerialError_DCD     * 1:SHL:1

        END
