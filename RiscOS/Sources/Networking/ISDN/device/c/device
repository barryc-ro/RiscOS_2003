/*	DeviceFS Interface
	------------------

*/

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "device.h"
#include "deviceFS.h"
#include "handler.h"
#include "isdnctrl.h"

#define IGNORE(p) (p=p)


/*  Device List Structure
    ---------------------

Structure used when declaring devices to DeviceFS.
See PRM 2-429
*/


#define DeviceFlag_BufferedDevice 1
#define DeviceFlag_DefinePathVariable 2


typedef struct
{
  int name_offset;	/* Offset to device name */
  int flags;		/* Device driver flags */
  			/* Device flags */
  int rxflags;		/* Receive buffer flags */
  int rxbuffer;		/* Receive buffer size in bytes */
  int txflags;		/* Transmit flags */
  int txbuffer;		/* Transmit buffer size in bytes */
  int reserved;		/* Reserved must be 0 */
  int terminator;	/* End of list */
} device_defn;

/*	Structure for Our Devices
	-------------------------

This structure is used to keep track of our ISDNdata and ISDNctrl devices.
It is not passed to the OS.
*/

typedef struct
{
  int handle;
  int registered;
} devicedriver;

extern void driver_entry(void);

static devicedriver isdndata = {0,FALSE};	/* Handle 0 and flag not registered */
static devicedriver isdnctrl = {0,FALSE};

#if 0
static char *workspace=NULL;	/* Workspace for assembler device driver */
#endif



/*	Register Ourselves with DeviceFS
	--------------------------------

Register device with DeviceFS.
PRM 2-428

Note that each device driver (ISDNdata and ISDNctrl) has to be registered separately.
*/

_kernel_oserror *device_register(char *devicename, devicetype type, devicedriver *driver, 
  void (*device_entry) (), int buffersize, char *validation, void *pw)
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;
  device_defn device;

  /* Set up device structure for this device (PRM 2-429) */
  device.name_offset=(int) devicename - (int) &device.name_offset;
  device.flags=DeviceFlag_BufferedDevice + DeviceFlag_DefinePathVariable;
  device.rxflags=device.txflags=8;  /* Supports IOctls */
  device.rxbuffer=device.txbuffer=buffersize;
  device.reserved=device.terminator=0;  

  reg.r[0] = DeviceFSregister_FullDuplex;	/* Character device, not full duplex */
  reg.r[1] = (int) &device;			/* Device list (contains one device) */
  reg.r[2] = (int) device_entry;		/* Device entry point (assember routine) */
  reg.r[3] = (int) type;			/* Driver's private word used to distinguish data/ctrl devices */
  reg.r[4] = (int) pw;				/* Module private word passed in R12 on driver entry */
  reg.r[5] = (int) validation;			/* Validation string specifies [options] in device name (see PRM 2-422) */
  reg.r[6] = 1;					/* Maximum number of RX devices */
  reg.r[7] = 1;					/* Maximum number of TX devices */
  err = _kernel_swi(DeviceFS_Register, &reg, &reg);
  
  driver->handle=reg.r[0];
  if (!err) driver->registered=TRUE;		/* Flag that this device is registered */
  return err;
}

/*	De-Register Ourselves with DeviceFS
	-----------------------------------

*/

_kernel_oserror *device_deregister(devicedriver *driver)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
 
  if (driver->registered)				/* Only deregister device if it is registered */
  {
    reg.r[0] = driver->handle;
    err=_kernel_swi(DeviceFS_Deregister, &reg, &reg);
    if (!err) driver->registered=FALSE;			/* Flag that this device is not registered */
  }
  
  return err;
}


/*	Register Our Devices with DeviceFS
	----------------------------------

*/
static _kernel_oserror *register_devices(void *private_word)
{
  _kernel_oserror *err;

  /* printf("Registering data\n"); */
  err=device_register("ISDNdata", DATATYPE, &isdndata, driver_entry, DATABUFFER, ISDNDATAVALIDATION, private_word);
  if (!err) 
  {
    /* printf("Registering ctrl\n"); */
    err=device_register("ISDNctrl", CTRLTYPE, &isdnctrl, driver_entry, CTRLBUFFER, NULL, private_word);
    /* if (err) printf("ERROR\n"); else printf("OK\n"); */
  }
  return err;
}

/*	Device Driver Initialisation
	----------------------------

Must be called when module is initialised, before enabling interrupts.
Call handler_startup here to give it an opportunity to initialise workspace.

Return no error even if the device registration fails (DeviceFS may not be
ready yet and if we return an error our module will be killed - DeviceFS
will issue a service call when it wants us to register our devices). 
*/

_kernel_oserror *device_init(void *private_word)
{
  handler_init();
  isdnctrl_init();
  register_devices(private_word);
  return NULL;
}

/*	Device Finalisation
	-------------------

Module is about to be killed, so deregister devices and free workspace.
*/

_kernel_oserror *device_final()
{
  _kernel_oserror *err;
  
  err=device_deregister(&isdndata); /* De-register ISDNdata deviceFS */
  err=device_deregister(&isdnctrl); /* De-register ISDNctrl deviceFS */

  return NULL;
}


/*	Device Service Call
	-------------------

Handle DeviceFS service calls.

When DeviceFS issues a DeviceFSStarting service we register our devices with it.
When it issues a DeviceFSDead we flag that the device is no longer registered.
*/

_kernel_oserror *device_service(int service_number, _kernel_swi_regs *regs, void *pw)
{
  
  if (service_number==Service_DeviceFSStarting)
    return register_devices(pw);  /* Re-register with DeviceFS */
 
  if (service_number==Service_DeviceDead)
  {
    if (regs->r[2]==isdndata.handle) isdndata.registered=FALSE;
    if (regs->r[2]==isdnctrl.handle) isdnctrl.registered=FALSE;
  }
  return NULL;  /* Return no error */
}
