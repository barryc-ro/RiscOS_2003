/*	Driver Handler Functions
	------------------------

All driver calls from DeviceFS are passed to this driver_handler via the
assembler veneer driver_entry which sets up the module workspace etc.
The routines handle driver initialisation, finalisation, stream control
etc.

Streams
-------
We will have four streams in total:
	ISDNdata tx
	ISDNdata rx
	ISDNctrl tx
	ISDNctrl rx

Each stream is allocated a buffer (with the buffer manager).

Data sent to the ISDNctrl stream is interpreted as AT type commands and
executed immediately.

Note on Interrupts
------------------
Note that this handler code may be called from within an interrupt routine
(although it is unlikely). For example, imagine the scnario where we are
accepting data from another device (say a serial port or network card)
which interrupts the processor. The interrupt handler may process incoming
data and pass it on to the ISDN device immediately (while within the
interrupt routine).

This is important as it means we must not use malloc to allocate buffers for
the Omnitel message system.

History
-------
Fri 18th April 1997
If ISDN connection is not open bytes to ISDNdata are discarded, and nothing is
passed to Omnitel code.
Added isdndata_activated call in appli.c when ACU_V120_SERVICE connects
Removed isdndata_connected which has effectively been replaced by isdndata_activated.

Wed 23rd April 1997
Option to use commands on ISDNdata stream (use devices#ctrl:$.ISDNdata)

Wed 30th April 1997
Buffer protocol_hole_size is now passed in isdndata_activated and used when 
sending data packets (it can depend on the protocol being used so we need
to pass it here in isdndata_activated).

Mon 16th June 1997
A copy of the DTR flag bit is stored internally in case it is read.
If read using IOctl6 it returns the last value that was set.
If DTR is left at 0 the system will still work - it is only the action
of writing the DTR line low that actually causes ISDN to disconnect. 

Thu 19th June 1997
IOctls now work on ISDNctrl in exactly the same was as ISDNdata
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>

#include "kernel.h"
#include "swis.h"

#include "testmode.h"

/* OMNITEL includes files */

#if TEST
#define uchar char
#define BUFFER_DATA_LGTH 256
#else

#include "services.h"
#define SERVICES_INIT
#include "conf_srv.h"
/*
#include "ob_int.h"
#include "cc_int.h"
#include "acu_int.h"
*/
#include "ap_par.h"
#include "ph_int.h"
#include "it.h"
#include "dd_int.h"	/* Device driver interface for Omnitel code */
#include "ob_int.h"	/* Callback installer */
#endif

/* Our include files: */

#include "deviceFS.h"
#include "device.h"
#include "handler.h"
#include "driver.h"
#include "isdnctrl.h"


#define module_trace_string(x)  module_trace_string((unsigned char *) x)

/*	ISDN Status Flags
	-----------------
	
*/

int isdntxbusy=FALSE;		/* Flag whether ISDN tx system is busy */
int isdndata_tx_pending=FALSE;	/* Flag that there is data in buffer manager buffer to transmit */
int isdndata_active=FALSE;	/* Flag that there is a physical path for data (rx or tx) */

/*	ISDN Hole Size
	--------------

When sending data in a packet we leave a "hole" at the start of the buffer
to allow the Omnitel code to prepend headers to the packet as it travels
down the ISDN protocol layers.

A different hole size is used depending on the protocol, and he Omnitel
system notifies us of the hole size in the isdndata_activated call

*/

static int protocol_hole_size=V120_HOLE_SIZE;  /* Use V120 hole size as default */
static int protocol_data_size=DEF_V120_FRAME_SIZE;  /* Use V120 data size as default */

/*	Device Streams
	--------------

We have two streams of ISDNdata and two for ISDNctrl (transmit and receive).
indexed by streamtype.

The streams array holds the DeviceFS stream handle for each stream.
*/

streamstruct streams[MAXSTREAMS];

/*	Structure for Buffer Manager Call
	---------------------------------

Structure holding address of buffer manager service routine and workspace address.
Passed to assembler routine when accessing buffer manager.
*/

buffermanstruct bufferman_call;

/*	Halt ISDN Received Data
	-----------------------

Tell ISDN system to stop receiving data (our input buffer is becoming full)
*/

static void isdndata_rx_halt(void)
{
}

/*	Resume ISDN Received Data
	-------------------------

Tell ISDN system to resume receiving data (our input buffer is no longer full full)
*/


static void isdndata_rx_resume(void)
{
}


/*	Set ISDN Data Active Flag
	-------------------------

Indicates the ISDN data path is ready for transmission or reception

*/


void isdndata_activated (int hole_size, int mx_data_size)
{
Trace_string("isdndata_activated\n");  
	isdnctrl_msg("CONNECT");
	isdnctrl_newline();
	isdndata_active = TRUE;  
	protocol_hole_size= hole_size;  	/* Copy hole size for this protocol */
	protocol_data_size= mx_data_size;  	/* Copy max. data size for this protocol */
}

/*	Reset ISDN Data Active Flag
	---------------------------

Indicates the ISDN data path is no longer ready for transmission or reception

*/


void isdndata_deactivated(void)
{
Trace_string("isdndata_deactivated\n");  
	isdndata_active = FALSE;  
	/* isdnctrl_msg("isdn deactivated");
	isdnctrl_newline(); */
}


/*	ISDN Handshake 
	--------------

ISDN systems calls ISDNdata_handshake when it wants to stop us
sending data or when it wants us to resume.

If it is ready to resume and we have more data to send from
the buffer manager then we request a callback to ensure that 
it will be sent.
*/

void isdndata_tx_flowcontrol(int busy)
{
  isdntxbusy=busy;	/* Copy the busy flag */
#if !TEST
  if (!busy && isdndata_tx_pending)
    os_install_callback();	/* Request a callback */
#endif    
}


/*	Receive ISDN Block
	------------------

The data we receive is put into the buffer. It must fit since
we us handshaking to stop more data being sent if it wouldn't fit,
but we should still check it here and raise a buffer overflow event
if it failed.

Note that we cannot do anything about buffer overflow as flow
control is not available.

If the buffer overflows we will lose data and expect the higher
level layers to sort out the problem...
*/

void isdndata_receive(uchar *buffer, int numbytes)
{
  int sent;

#if !TEST
  Trace_string("RX ");  Trace_int(numbytes);
#endif
  /* If buffer manager routine is known and stream is open */
  if (streams[ISDNDATARX].open)
    sent=Buffer_InsertBlock(&bufferman_call, streams[ISDNDATARX].bufferman_id, buffer, &numbytes);
  /* Debug code to print incoming data:
  {int i;
  for (i=0; i<numbytes; i++)
    putchar(*buffer++); 
  } */
}


/*	Send ISDN Block
	---------------

isdndata_send attempts to read data from the Buffer Manager using the
Buffer_RemoveBlock call and send it to the ISDN output stream by sending a
PH_DA_RQ message to USER_DATA_SAPI.

It only sends a PH_DA_RQ message if data was successfully read from the Buffer
Manager.

It read from the Acorn buffer manager a maximum of DEF_V120_FRAME_SIZE bytes
into a buffer allocated by Alloc_buffer (which as a limit of
Buffer_data_lgth). If no bytes were read the Alloc_buffer is freed
and no message is sent.

On exit:	returns number of bytes sent
		or 0 if Buffer Manager buffer is empty (or ISDN data connection not open)
		or -1 if bytes could not be sent (ie buffers could not be allocated)
*/

static int isdndata_sendblock(void)
{
#if TEST
  int i, numbytes=0;
  uchar buffer[BUFFER_DATA_LGTH];

  numbytes=BUFFER_DATA_LGTH;
  if (streams[ISDNDATATX].open)
    Buffer_RemoveBlock(&bufferman_call, streams[ISDNDATATX].bufferman_id, buffer, &numbytes);
  for (i=0; i<numbytes; i++)
    putchar(buffer[i]);

#else

  /* Alloc buffers using malloc */

  int numbytes;				/* Number of bytes read from Buffer Manager */
  uchar FAR * p_data;			/* Pointer to data buffer for Send_message */
  struct message FAR *p_snd_msg;	/* Keep local pointer to the message and */
  struct buffer FAR *p_buffer;		/* local pointer to the buffer, so that */
					/* we don't corrupt the global one */
  sapi_t sapi = USER_DATA_SAPI;
  code_t code = PH_DA_RQ;

  if (!isdndata_active || !streams[ISDNDATATX].open)
  {
    /* ISDN connection isn't open or file stream isn't open so discard data
    in buffer (if there is one) and return -1 to indicate that no data could be sent */
    if (streams[ISDNDATATX].open)
      Buffer_Purge(&bufferman_call, streams[ISDNDATATX].bufferman_id);
    return -1;
  }

  /* Allocate a message */
  p_buffer = Alloc_buffer ();		/* Allocate an Omnitel buffer */

  if (p_buffer==NULL)
  {
	return -1;  /* Unable to send any bytes, so need to try again later */
  }
  else
  {
	Buffer_data_offset += protocol_hole_size; /* add a hole in front of data for header (size depends on protocol) */
	p_data = Buffer_a_start_data;		/* Data area starting address inside the buffer */
	numbytes = protocol_data_size;		/* Request as many bytes as Omnitel Send_message allows */
	
	/* Read data from buffer manager directly into message buffer for Send_message call: */
	
        Buffer_RemoveBlock(&bufferman_call, streams[ISDNDATATX].bufferman_id, p_data, &numbytes);
	if (numbytes)
	{
		Trace_string("TX "); Trace_int(numbytes);
	        p_snd_msg	= Alloc_msg ();
	        if (p_snd_msg==NULL)
	        {
		        Free_buffer(p_buffer);		/* No message buffer available so free p_buffer */
			Trace_string("*** p_snd_msg is NULL\n");
			return -1;  /* Unable to send any bytes, so need to try again later */
		}
		else
		{
			S_msg_from	= ENT_USER;	/* dummy origin entity to force OS sending */
			S_msg_to	= ENT_APPLI;	/* Local version of User entity : send the message to the Appli itself */
			S_msg_code 	= code;	
			S_msg_nai 	= USER_NAI;
			S_msg_sapi 	= sapi;
			S_msg_conn_id 	= USER_CONN_ID;
		
			S_msg_init_link_buffer;		/* Link the buffer to the message */
		
		
			Buffer_data_size = numbytes;	/* Update buffer data size field */
			Send_message (p_snd_msg); 	/* Send the message */
			p_snd_msg = P_NIL;
		}
	  }
	  else {
	        Free_buffer(p_buffer);		/* No bytes read so free the buffer */
	  }
  }
#endif
  return numbytes;  			/* Return number of bytes sent */
}



/*	Send ISDN Data
	--------------

If we have tx data pending in the buffer manager (isdntx_data_pending) and
the Omnitel system is not busy (!isdntxbusy) we use isdndata_sendblock to
read a block from the buffer manager and send it using a PH_DA_RQ message. 

It is called from the Callback routine to send a message.

Returns number of bytes remaining to be sent
(ie bytes in the buffer manager buffer)

*/

int isdndata_sendpending(void)
{
  int numbytes;  /* Number of bytes sent, or -1 if unable to send */

  if (!isdntxbusy /* && isdndata_tx_pending*/ )
  {
    numbytes=isdndata_sendblock();
    if (numbytes==0)
      isdndata_tx_pending=FALSE;	/* We have sent all the data from the buffer manager */
  }
  return numbytes;
}


/*	Device Initialise
	-----------------

Record stream handle and special field pointer for later use.
*/

static _kernel_oserror *driver_initialise(_kernel_swi_regs *reg)
{
  streamtype stream;

  stream = (streamtype) (reg->r[8] + ( reg->r[3] & 1)); /* Stream type (ISDNdata=0 or ISDNctrl=2) plus 0 for read or 1 for write */

  /* printf("Initialise for stream %d\n", stream); */

  streams[stream].handle=reg->r[2];    /* Save handle for this stream */
  streams[stream].special=(int *) reg->r[6];     /*  and also pointer to special field */

  return NULL;
}


/*	Find Stream from Handle
	-----------------------

DeviceFS stream handle is usually passed in R2.
We compare this handle with each of the possible four handles that we have
been assigned for each of our four streams and return the corresponding stream
type.

Returns stream=MAXSTREAMS if handle doesn't match any stream.
*/

int findstream(int handle)
{
  int stream;

  /* Which of our four streams does this handle refer to? */

  stream=0;
  while (stream<MAXSTREAMS && streams[stream].handle!=handle)
    stream++;

  return stream;
}

/*	Flush a Stream
	--------------

Flush the buffer corresponding to the specified stream handle.
*/

static void flush_stream(int handle)
{
  int stream;
  
  stream=findstream(handle);		/* Find our stream type */
  if (stream<MAXSTREAMS && streams[stream].open)  /* If its valid and its open... */
    Buffer_Purge(&bufferman_call, streams[stream].bufferman_id);  /* Flush the buffer */
}



/*	Finalise
	--------

Stream is being closed, so mark it as closed.
If stream handle is 0 close all streams.

Warning: We must flush the buffer before the stream is clsed
otherwise the OS will wait until the output stream is empty
before closing the stream. While it is waiting callbacks will be
suspended so it would never empty.

(Alternatively we could wait until the output buffer has emptied,
but since the stream is being closed it is unlikely that the data
is important and it is safer to flush it in case the remote system
is bocking reception with V120 handshaking protocols).
*/

static _kernel_oserror *driver_finalise(_kernel_swi_regs *reg)
{
  int stream;

  flush_stream(reg->r[2]);	/* Ensure buffer is empty */

  if (reg->r[2])  /* Close specified stream */
  {
    stream=findstream(reg->r[2]);
    if (stream<MAXSTREAMS) streams[stream].open=FALSE;
  }
  else  /* Close all streams */
    for (stream=0; stream<MAXSTREAMS; stream++)
      streams[stream].open=FALSE;

  return NULL;
}


/*	Wake up for TX Data
	-------------------

On entry:	r2 contains device driver stream handle
		r8 contains device type

Stream handle should correspond to ISDNDATATX or ISDNCTRLTX stream.
This routine will do nothing if requested to send data on another stream.

If the buffer manager has data to send on the ISDNdata tx stream we 
set the isdndata_tx_pending flag to indicate this and request a callback.
We don't send a message now as we may only have 1 or 2 bytes and it is
very inefficient to send lots of messages with small buffers when we
know they won't be processed until the callback is executed. By setting
a flag we indicate that we have data to send and the Callback can read
a large block of data and send it as a message.

In the case of PPP the Callback will not normally be executed until PPP
has finished sending a packet to the buffer manager (or reached a buffer
full in the buffer manager).

If the ctrl field was specified when ISDNdata was opened then ISDN AT 
commands are allowed on the ISDndata stream until the ISDN connection is
opened, an tx data is sent to the ISDN command interpreter instead of
the ISDN data system.

PRM  2-600.
*/

static _kernel_oserror *driver_wakeuptx(_kernel_swi_regs *reg)
{
  /* Find out which stream it is and do nothing if it isn't the ISDNDATATX
     or ISDNCTRLTX stream */
  if (reg->r[2]==streams[ISDNDATATX].handle)
  {
    /* If ISDN data connection is not active and the special field is set
       to enable commands on the ISDNdata stream then we pass this to
       the command interpreter)
    */
    if (!isdndata_active && streams[ISDNDATATX].special[ISDNDATA_CTRLFIELD]==0)
      isdncmds(ISDNDATATX);
    else 
    {
      isdndata_tx_pending=TRUE;	/* Flag that we have data to send */
#if !TEST
      os_install_callback();	/* Request a callback */
#endif
    }
  }
  else
    if (reg->r[2]==streams[ISDNCTRLTX].handle)
      isdncmds(ISDNCTRLTX);  /* Process AT type commands */

  return NULL;
}


/*	Device Driver Stream Created
	----------------------------

This call indicates that a stream has been created.
We use this opportunity to read the Buffer manager internal buffer ID
for fast access to the stream's buffer.

On entry:	r2 = device driver stream handle
		r3 = buffer handle
PRM 2-605
*/

static _kernel_oserror *driver_streamcreated(_kernel_swi_regs *reg)
{
   _kernel_oserror *err=NULL;
  _kernel_swi_regs breg;
  int stream;

  /* Get buffer manager service routine address and internal buffer ID:  */
  breg.r[0]=reg->r[3];
  if ( (err=_kernel_swi(Buffer_InternalInfo, &breg, &breg))==NULL)
  {
    bufferman_call.service=(bufferman_serviceroutine) breg.r[1];    /* Address of buffer manager service routine */
    bufferman_call.workspace=(void *) breg.r[2];  /* Address to pass in r12 to buffer manager service routine  */
  }
  /* printf("Buffer man service at %x\n", (int) bufferman_call.service); */

  /* Which of our four streams does this handle refer to? */

  stream=findstream(reg->r[2]);
  if (stream<MAXSTREAMS)
  {
    /* printf("Internal buffer for stream %d, handle %d is %d\n", stream, reg->r[2], breg.r[0]); */

    streams[stream].bufferman_id=breg.r[0];  /* Buffer manager internal buffer ID for this stream */
    streams[stream].open=TRUE;
  }
  /*
  else
  {
    printf("ISDN: No stream for handle\n");
  }
  */
  return err;
}


/*	Device Halt
	-----------

This call indicates that free buffer space has dropped below
the specified threshold. If this is the ISDN rx stream We should try and
prevent more data being received

On entry:	r2 = device driver stream handle

PRM 2-603
*/

static _kernel_oserror *driver_halt(_kernel_swi_regs *reg)
{
  if (reg->r[2]==streams[ISDNDATARX].handle)
     isdndata_rx_halt();
  return NULL;
}

/*	Device Resume
	-------------

This call indicates that buffer space is above the threshold
so we can resume data rx if this is the ISDN rx stream.

On entry:	r2 = device driver stream handle

PRM 2-604
*/

static _kernel_oserror *driver_resume(_kernel_swi_regs *reg)
{
  if (reg->r[2]==streams[ISDNDATARX].handle)
     isdndata_rx_resume();
  return NULL;
}

/*	Create rx Buffer
	----------------

Creating rx buffer.

On entry:	r2 = device driver stream handle
		r3 = suggested flags for buffer
		r4 = suggested buffer size
		r5 = suggested buffer handle
		r6 = suggested threshold for buffer
PRM 2-602
*/

static _kernel_oserror *driver_createrxbuffer(_kernel_swi_regs *reg)
{
  /* Can fix threshold here if necessary:
  if (reg->r[2]==streams[ISDNDATARX].handle)
     reg->r[6]=1024;
  */
  return NULL;
}

/*	Driver IOCtl
	------------

On entry:
	r0=14	Reason code
	r1	File handle
	r2	Stream handle
	r3	ioctl parameter block, as passed in r2 of OS_Args

If IOctl write flag is set then set parameter from IOctl->data.
If IOctl read flag is set return the current value (return the new value if
and write both set).

If DTR line is set to 0 we clear the call.

When control line flags are read, we return:
	DTR	Set by default, or as last set by IOctl write
	DCD	Set if we can send data to remote system or clear if not
	DSR	Always set

*/

static _kernel_oserror *driver_ioctl(_kernel_swi_regs *reg)
{
  ioctl_t *ioctl;
  devicetype device;
  static int ctrlflags=DTRFLAGBIT;	/* Store DTR flag setting (initially set) for IOctl reads */
  
  if (reg->r[2]==streams[ISDNDATATX].handle || reg->r[2]==streams[ISDNDATARX].handle)
    device=DATATYPE;
  else
    device=CTRLTYPE;  

  ioctl=(ioctl_t *) reg->r[3];
  
  /* printf("ISDN.device.driver_ioctl:\n");
  printf("ioctl stream %d, reason %d, read %d, write %d\n", reg->r[2], ioctl->reason, ioctl->read, ioctl->write);  */

  switch (ioctl->reason)
  {
    case IOCTL_CTRL_LINES:			/* IOctl 6 is used to read/write control lines */
      if (ioctl->write) 			/* Used to check for data device:  && device==DATATYPE) */
      {
        ctrlflags=ioctl->data & DTRFLAGBIT;	/* Record new DTR setting so we can return it if requested */
        if ((ioctl->data & DTRFLAGBIT)==0) 
          cmd_hook();	/* Hang up if DTR=0. cmd_hook does nothing if not already connected */
      }
      
      if (ioctl->read)
      {
#if 0
      /* Check which stream is being used, ISDNdata or ISDNctrl.
         Note if ISDNdata is using ctrl flag and ISDN is not active then treat that as ISDNctrl: */
        if (device==CTRLTYPE || (streams[ISDNDATATX].special[ISDNDATA_CTRLFIELD]==0 && !isdndata_active))
          ioctl->data = DSRFLAGBIT;				/* Never give DTR DCD or RTS on ISDNctrl, */
                    						/*  but always set DSR */
        else  /* ISDNdata stream */
#endif        
	/* ioctls now work in the same way whether ISDNctrl or ISDNdata device is used */

          ioctl->data= (isdndata_active ? DCDFLAGBIT : 0)	/* Set DCD if ISDN is activated */
                     + (ctrlflags)				/* Return our copy of control flags (DTR) as last set IOctl */
                     + (isdntxbusy ? 0 : CTSFLAGBIT)		/* Set CTS if ready to send */ 
                     + DSRFLAGBIT;				/* Always set DSR */
      }   
      break;
    
    case IOCTL_FLUSH:			/* IOctl 10 is used to flush the data buffers */
      /* If stream is open then purge the corresponding buffer */
      if (ioctl->write) flush_stream(reg->r[2]);
      break;
      
    default:
      if (ioctl->read) 
        ioctl->data=0;
      }

  return NULL;
}

/*	Driver Handler
	--------------

All driver calls from DeviceFS are passed to this driver_handler via the
assembler veneer driver_entry which sets up the module workspace etc.

Return NULL if successful, otherwise return a pointer to an error block
and the veneer will set the V flag as appropriate.

Device action is specified in r0 and other parameters depend on the action.

Note that reg structure should be preserved or modified as required (PRM 2-599).
*/


_kernel_oserror *driver_handler(_kernel_swi_regs *reg, void *pw)
{
  devicetype device;
  _kernel_oserror *err=NULL;

  device=(devicetype) reg->r[8];
  /* printf("Device %d action %d\n", reg->r[8], reg->r[0]); */

  switch (reg->r[0])
    {
      case DeviceCall_WakeUpTX:
        err=driver_wakeuptx(reg);
        break;
     case DeviceCall_Initialise:
        err=driver_initialise(reg);
        break;
      case DeviceCall_Finalise:
        err=driver_finalise(reg);
        break;
      case DeviceCall_WakeUpRX:
        break;
      case DeviceCall_SleepRX:
        break;
      case DeviceCall_EnumDir:
        break;
      case DeviceCall_CreateBufferTX:
        break;
      case DeviceCall_CreateBufferRX:
        driver_createrxbuffer(reg);
        break;
      case DeviceCall_Halt:
        err=driver_halt(reg);
        break;
      case DeviceCall_Resume:
        err=driver_resume(reg);
        break;
      case DeviceCall_EndOfData:
        break;
      case DeviceCall_StreamCreated:
        err=driver_streamcreated(reg);
        break;
      case DeviceCall_MonitorTX:
        break;
      case DeviceCall_MonitorRX:
        break;
      case DeviceCall_IOCtl:
        err=driver_ioctl(reg);
        break;
      case DeviceCall_ExternalBase:
        break;
      /* Ignore unknown or unused device calls */
    }
  /* printf("Handler OK\n\n"); */
  /* if (err) printf("Error"); */
  return err;
}

/*	Handler Start Up Code
	---------------------

handler_startup() must be called when module initialises.
before
*/

void handler_init()
{
  int i;

  for (i=0; i<MAXSTREAMS; i++)
  {
    streams[i].handle=0;    /* Clear handles to 0 to indicate streams not initialised */
    streams[i].open=FALSE;  /* Flag stream not open */
  }
  bufferman_call.service=NULL;     /* Buffer manager service address not known */
}
