/*
    ISDN Device Interface
    ---------------------



Author:       Paul Skirrow
              Octopus Systems
              9 Randwell Close
              IPSWICH  IP4 5ES

Tel:          01473 728943
Fax:          01473 270643
Email:        pskirrow@octosys.co.uk
WWW:          www.octosys.co.uk

Version:      0.03

Created:      28th January 1997

Compiler:     Acorn C release 5

Description:  Device interface for Omnitel ISDN code 

Manuals:      All PRM references refer to the RISC OS 3 PRM volumes 1-4 and 5a

Overview: 

The source in this directory forms part of the ISDN module and acts as an
interface between RISC OS and the Omnitel ISDN code. The source is split as
follows:

	main	This file contains the test code to produce a stand-alone
		module which can be tested without linking with the rest
		of the ISDN source. The resulting module doesn't work with
		the ISDN hardware but it can be used for basic debugging
		of the device driver.
		
	Device	Code to interface with DeviceFS and declare devices.
	
	handler	Handler for device driver entry point
	
	isdnctrl  AT command interpreter for ISDNctrl device.

When the ISDN module is initialised it declares two serial type devices
to DeviceFS. The ISDNctrl device driver is used to control ISDN calls
while the ISDNdata device driver is used to pass data over the ISDN
B channel(s).

The ISDNctrl device uses a simple command set using Hayes AT type commands
to initiate and terminate calls. The module interprets these commands
and acts upon them - the calling application has no direct access to the
ISDN D channel.

The ISDN system is configured using AT commands and this must be done
before using the ISDNctrl channel to initiate a call.


HISTORY
-------

Created:	28 Jan 97

v0.2:		24 Feb 97
Implemented AT like commands on ISDNctrl device.


*/

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "device.h"

#define IGNORE(p) (p=p)
void *private;  /* Private word pointer */


/*	Module Initialisation
	---------------------

Called when module is initialised.
Cll driver_init here to give it an opportunity to claim workspace.
*/

_kernel_oserror *module_init(char *cmd_tail, int podule_base, void *pw)
{
  private=pw;  /* Take a copy of the private word pointer */
  return device_init(private);
}


/*	Module Finalisation
	-------------------

Called when module is about to be killed.
*/

_kernel_oserror * module_final(int fatal, int podule, void *pw)
{
  _kernel_oserror *err;
  err=device_final();
  return err;
}


/*	Module * Command
	----------------
	
*/

_kernel_oserror * Module_Command( char *arg_string, int argc, int cmd_no, void *pw)
{
        IGNORE( arg_string );
        IGNORE( argc );
        IGNORE( cmd_no );
        IGNORE( pw );


        return NULL;
}


/*	Module Service Call
	-------------------
	
*/

_kernel_oserror *module_service(int service_number, _kernel_swi_regs *regs, void *pw)
{
  return device_service(service_number, regs, pw);
}


/*	Debug Code
	----------
*/

void module_trace_string(char *msg)
{
}

void module_trace_int(int num)
{
}

