;----------------------------------------------------------------------------*
;                       M O D U L E   H E A D E R
;
; filename - motorola.s
;
; $Revision$
;
; $Date$
;
;     !!!------------------------------------------!!!
;     !!! For use with the DIAB-Data compiler only !!!
;     !!!------------------------------------------!!!
;
; function(s)
;
;   it_enable_68:   enable all interruptions
;   it_disable_68: disable all interruptions
;
;   fast_memcpy : fast copy of a memory area.
;   fast_memset : fast fill of a memory area.
;
;----------------------------------------------------------------------------*

;[]---------------------------------------------------[]
;|                                                     |
;|    OMNITEL-BRICKS Services                          |
;|                                                     |
;|    Copyright (c) 1989-1997 by OMNITEL SA            |
;|    All Rights Reserved.                             |
;|                                                     |
;[]---------------------------------------------------[]

;------------------------------------------------------------------------
; ASSEMBLER DIRECTIVES TO TURN ON CASE SENSITIVITY AND TO PLACE THE
; ASSEMBLED CODE IN THE "code" SEGMENT.  "code" IS THE MICROTEC
; EQUIVALENT OF ".text".
;------------------------------------------------------------------------

;       SECTION 9

;------------------------------------------------------------------------

;------------------------------------------------------------------------
; HERE ARE THE ACTUAL SERVICES ROUTINES.  IT IS ASSUMED THAT THE PROPER
; PARAMETERS FOR EACH CALL ARE ALREADY ON THE STACK WHEN THIS MODULE
; IS ENTERED.  THUS FOR EACH CALL, IT IS ONLY NECESSARY TO LOAD D0 WITH
; THE FUNCTION CODE FOR THE DESIRED SERVICE AND BRANCH TO THE SMALL
; PIECE OF "COMMON" CODE AT THE END OF THIS MODULE.
;------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;
;   it_disable_68: disable all interruptions
;
;-----------------------------------------------------------------------------

	XDEF    _it_disable_68
	XDEF    _it_enable_68
	XDEF    _it_mgt_store_status_reg

	.bss

_it_mgt_store_status_reg:
	DS.B   2

	.text

_it_disable_68:
	MOVE    sr,-(a7)                        ; put current SR in stack
	ORI.W             #$0600,sr             ; set level to 6 or 7
	CMPI.W  #0,_it_mgt_store_status_reg     ; interrupts already disabled
	BNE             IT_DISABLED             ; yes, exit
	MOVE.W  (a7),_it_mgt_store_status_reg   ; save SR and remember interrupts are disabled
	ORI.W   #$1,_it_mgt_store_status_reg    ; ensure that the saved SR is non zero

IT_DISABLED:
	ADDA.l  #$2,a7                          ; restore stack

	RTS

;-----------------------------------------------------------------------------
;
;   it_enable_68:   enable all interruptions
;
;-----------------------------------------------------------------------------

_it_enable_68:

	MOVE    sr,-(a7)                        ; put 'entry' SR in stack
	ORI.W             #$0600,sr             ; set level to 6 or 7
	CMPI.w  #$0,_it_mgt_store_status_reg    ; interrupts already enabled
	BEQ             IT_ENABLED              ; yes, exit
	MOVE.w  _it_mgt_store_status_reg,-(a7)  ; put saved SR in stack
	MOVE.w  #$0,_it_mgt_store_status_reg    ; remember we are enabled
	MOVE    (a7)+,sr                        ; restore status register with saved value
	;                                       ; that is, reenable interrupts to previous level
	;                                       ; note that the carry bit is set
	ADDA.l  #$2,a7                          ; restore stack
	BRA             IT_ENABLE_EXIT          ; return

IT_ENABLED:
	MOVE    (a7)+,sr                        ; restore 'entry' SR

IT_ENABLE_EXIT:

	RTS

;-----------------------------------------------------------------------------
;
; fast_memcpy (to far pointer, from far pointer ,nbytes)
;
; to        far pointer to the destination string
; from      far pointer to the origination string
; nbytes    unsigned short number of bytes to be transfered
;
;-----------------------------------------------------------------------------

DATA_SIZE_THRESHOLD     EQU     16          ; data size under this value will be always executed in byte mode

_fast_memcpy:

	LINK    A6,#0
	MOVEM.L A1/A2/D0-D2,-(A7)               ; save registers to be used

;   GET INPUT ARGUMENTS
;   ---------------------

	CLR.L   D0
	MOVE.W  18(A6),D0                       ; get 3th argument  : data size
	BEQ     MEMCPY_END                      ; if no data to transfer goto MEMCPY_END

	MOVEA.L 8(A6),A1                        ; get 1st argument  : destination pointer
	MOVEA.L 12(A6),A2                       ; get 2nd argument  : source pointer

	CMPI.W  #DATA_SIZE_THRESHOLD,D0         ; if data size is under DATA_SIZE_THRESHOLD bytes
	BLT     MEMCPY_BYTE                     ; use byte transfer sub-routine

;   CHECK IF BOTH ADDRESS HAVE SAME PARITY
;   ----------------------------------------

	MOVE.W  A1,D1                           ; get destination address
	MOVE.W  A2,D2                           ; get source address
	EOR.B   D2,D1                           ; XOR between source and destination address
	LSR.B   #1,D1                           ; get result of XOR between address parities
	BCS     MEMCPY_BYTE                     ; address have different parities : can't move in double word

;   BOTH ADDRESS HAVE SAME PARITY -> EVEN PARITY ALIGNMENT
;   --------------------------------------------------------

	MOVE.L  D0,D1                           ; duplicate data_size for both double word move and byte move
	LSR.B   #1,D2                           ; get address parity
	BCC     MEMCPY_LONG                     ; both address have even parity -> execute double word transfer
	MOVE.B  (A2)+,(A1)+                     ; copy the first byte from source to destination
	SUBQ.W  #1,D0                           ; --data_size
	BEQ     MEMCPY_END                      ; if no more data in byte to transfer goto MEMCPY_END
	SUBQ.W  #1,D1                           ; --data_size

;   DOUBLE WORDS TRANSFER
;   -----------------------

MEMCPY_LONG
	LSR.L   #2,D1                           ; data_size / 4 -> D1
	BEQ     MEMCPY_BYTE                     ; if no data in double word to transfer goto COPY_BYTE
	SUBQ.W  #1,D1                           ; because the following loop execute data moving before testing

MEMCPY_LONG_REPEAT
	MOVE.L  (A2)+,(A1)+                     ; copy long data from source to destination
	DBF     D1,MEMCPY_LONG_REPEAT           ; long data size

;   BYTES TRANSFER
;   ----------------

	ANDI.L  #3,D0                           ; data_size % 4 -> D1
	BEQ     MEMCPY_END                      ; if no data in byte to transfer goto MEMCPY_END

MEMCPY_BYTE
	SUBQ.W  #1,D0                           ; because the following loop execute data moving before testing

MEMCPY_BYTE_REPEAT
	MOVE.B  (A2)+,(A1)+                     ; copy data in byte from source to destination
	DBF     D0,MEMCPY_BYTE_REPEAT           ; data size in byte

MEMCPY_END
	MOVEM.L (A7)+,A1/A2/D0-D2               ; restore registers
	UNLK    A6
	RTS

;-----------------------------------------------------------------------------
;
; fast_memset (to far pointer, char val ,nbytes)
;
; to        far pointer to the destination
; val       value to be set
; nbytes    number of bytes to be transfered
;
;-----------------------------------------------------------------------------

_fast_memset:

	LINK    A6,#0
	MOVEM.L A0/D1-D4,-(A7)                  ; save registers to be used

;   GET INPUT ARGUMENTS
;   ---------------------

	CLR.L   D3
	MOVE.W  18(A6),D3                       ; get 3th argument  : data size
	BEQ     MEMSET_END                      ; if no data to transfer goto MEMSET_END

	MOVEA.L 8(A6),A0                        ; get 1st argument  : destination pointer
	CLR.L   D2
	MOVE.B  15(A6),D2                       ; get 2nd  argument : character to set

	CMPI.W  #DATA_SIZE_THRESHOLD,D3         ; if data size is under 32 bytes
	BLT     MEMSET_BYTE                     ; use byte set sub-routine

;    EVEN PARITY ALIGNMENT
;   -----------------------

	MOVE.W  A0,D1                           ; get destination address
	MOVE.L  D3,D4                           ; duplicate data_size for both double word move and byte move
	LSR.B   #1,D1                           ; get address parity
	BCC     MEMSET_LONG                     ; address has even parity -> execute double word transfer
	MOVE.B  D2,(A0)+                        ; set destination data
	SUBQ.W  #1,D3                           ; --data_size
	BEQ     MEMSET_END                      ; if no more data goto MEMSET_END
	SUBQ.W  #1,D4                           ; --data_size

;   DOUBLE WORDS TRANSFER
;   -----------------------

MEMSET_LONG
	LSR.L   #2,D4                           ; data_size / 4 -> D4
	BEQ     MEMSET_BYTE                     ; if no data in double word to transfer goto COPY_BYTE
	SUBQ.W  #1,D4                           ; because the following loop execute data moving before testing
	MOVE.L  D2,D1                           ; duplicate setting character

	LSL.L   #8,D1                           ; shift the character to the left size
	OR.L    D2,D1                           ; duplicate character to the empty LSByte
	LSL.L   #8,D1                           ; shift characters to the left size
	OR.L    D2,D1                           ; duplicate character to the empty LSByte
	LSL.L   #8,D1                           ; shift the character(s) to the left size
	OR.L    D2,D1                           ; duplicate character to the empty LSByte

MEMSET_LONG_REPEAT
	MOVE.L  D1,(A0)+                        ; copy long data from source to destination
	DBF     D4,MEMSET_LONG_REPEAT           ; long data size

;   BYTES TRANSFER
;   ----------------

	ANDI.L  #3,D3                           ; data_size % 4 -> D3
	BEQ     MEMSET_END                      ; if no data in byte to transfer goto MEMSET_END

MEMSET_BYTE
	SUBQ.W  #1,D3                           ; becuase the following loop execute data moving before testing

MEMSET_BYTE_REPEAT
	MOVE.B  D2,(A0)+                        ; copy data in byte from source to destination
	DBF     D3,MEMSET_BYTE_REPEAT           ; data size in byte

MEMSET_END
	MOVEM.L (A7)+,A0/D1-D4                  ; restore registers
	UNLK    A6
	RTS

;----------------------------------------------------------------------------

	SECTION 9
	ALIGN   4
	END
