
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - to_proc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) :
 *
 *     timer_alloc - allocation of a timer cell.
 *     timer_free  - release of a timer cell.
 *
 *     timer_start - starting or restarting of a timer.
 *     periodic_timer_start - starting or restarting
 *                   of a periodic timer.
 *     timer_stop  - implements the stop of a timer.
 *
 *     timer_process - implements the cyclic timer process.
 *     timer_it    - implements the timer IT handler.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS Services                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"
#include "ctx_ext.h"
#include "it.h"

		/* Copyright */

CONST char 	to_copyright[]	= "Copyright (c) 1989 - 1993 by OMNITEL SA - All Rights Reserved";
CONST char 	to_licence[]	= LICENSE_NBER;

#if ((SIMULATION == OFF) && ((OS == OS9) || (OS == UNIX)))
#	define ONE_TIMER_THREAD		ON
#else
#	define ONE_TIMER_THREAD		OFF
#endif

			/* Global variables : loaded by services_init function */

ushort	timer_cell_nb;							/* number of timer cells */
struct  timer_head FAR * VOLATILE p_timer_slot;	/* timer slot table */
ushort	timer_slot_size;						/* size of the timer slot table */
ushort	timer_system_tick;						/* value of the system tick */
ushort	timer_precision;						/* timer precision */

#if TIMER_IT == OFF
	ushort	timer_period_tick;					/* timer tick : number of system ticks per Omnitel tick */
#endif

ushort	timer_period_val;						/* timer tick : duration of the timer period in ms */

			/* Current hand clock position */

ushort 	VOLATILE	timer_x_hand_clock;			/* hand clock value */
ulong 	VOLATILE	timer_last_time_clock;		/* last current system tick */

#if TIMER_IT == OFF

			/* Resource identifier */

	extern int	sem_timer;						/* resource ID to protect shared timer data */

#endif

#if SIMULATION == ON
	long	current_time;

#else

#	if TIMER_IT == ON
		long	current_time;
#	endif

#endif

	/* Concurrent access to timer shared memory */

#if ONE_TIMER_THREAD == ON

#	define Lock_timer_data()
#	define Unlock_timer_data()

#else

#	if TIMER_IT == OFF
#		define Lock_timer_data()	Lock_resource 	(sem_timer)
#		define Unlock_timer_data()	Unlock_resource (sem_timer)

#	else

#		define Lock_timer_data()	It_disable ()
#		define Unlock_timer_data()	It_enable ()
#	endif

#endif

	/* Null thread index */

#define X_NIL				0x7fff

	/* Parameters */

#if TIMER_IT == OFF
#	define MINI_DELTA		4					/* if only MINI_DELTA slot --> no ajust */
#	define PER_CENT_APPROX	5					/* per cent ajust */
#endif

	/* Internal functions prototypes */

#if NEW_FCT_STYLE == ON
	void timer_insert			(uchar FAR *p_cell, timer_val_t to_val);
#else
	void timer_insert			();
#endif

/*-------------------------------------------------------------------------*/

ushort read_timer_system_tick ()
{
	return (timer_system_tick);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            timer_alloc and timer_free - implement the allocation of
				a cell to a timer and the liberation of a previously
				allocated cell.

Usage           uchar FAR *timer_alloc (uchar entity_id, nai_t nai, sapi_t sapi,
										uchar add);

				void timer_free (uchar FAR *timer_id)

Related
functions usage Alloc_timer_cell (); 			memory space allocation
				Free_timer_cell (timer_id); 	memory space release

Return value    timer_alloc returns the allocated timer identification (address
				of the allocated cell)

Common constants and declarations : services.h

*--------------------------------------------------------------------------*/

uchar FAR *timer_alloc (entity_id, nai, sapi, add)
	uchar				entity_id;			/* entity ID */
	nai_t				nai;				/* network access ID */
	sapi_t				sapi;				/* service access point ID */
	add_t				add;				/* connection address */
{
	struct timer_cell	FAR *p_cell;		/* temporary pointer to the current timer cell */

		/* Get a free cell */

	if ((p_cell = Alloc_timer_cell ()) == P_NIL) return (P_NIL);

		/* Init the allocated cell */

	Cell_nai 		= nai;					/* originator NA ID */
	Cell_sapi 		= sapi;					/* originator SAP ID */
	Cell_add 		= add;					/* originator ADD */
	Cell_entity_id 	= entity_id;			/* entity ID */

	Cell_next		= Cell_prior = P_NIL;	/* pointers to NIL */
	Cell_x_head		= X_NIL;				/* index to NIL */

	return ((uchar FAR *)p_cell);			/* return timer ID (address of the cell) */

}

/*-------------------------------------------------------------------------*/

void timer_free (p_cell)
	uchar				FAR *p_cell;		/* pointer on the cell to release */
{

		/* Free timer ? */

	if (p_cell == TIMER_ID_NIL) return;

		/* If the cell is in a thread removes it */

	timer_stop (p_cell);

		/* Release the cell */

	Free_timer_cell ((struct timer_cell FAR *)p_cell);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            timer_start - implements the starting of a previously
				allocated timer.

				timer_stop - implements the stoping of a pending timer

Usage           timer_start	(uchar FAR *timer_id,timer_val_t to_val,
							 uchar sn, code_t ev_id);

				timer_stop	(uchar FAR *timer_id)

Return value    void

Common constants and declarations : services.h

Common objects	: timer_head[] table containing the thread top pointer

				  timer_x_hand_clock containing the current position of the
				  hand clock (index of timer_head[]).

*--------------------------------------------------------------------------*/

void timer_start (p_cell, to_val, sn, ev_id)
	uchar 				FAR *p_cell;		/* timer ID = address of the cell */
	timer_val_t			to_val;				/* time-out value */
	uchar				sn;					/* sequence number */
	code_t				ev_id;				/* event identifier to use if time-out failed */
{

	if (p_cell == P_NIL) return;

		/* Lock the shared data */

	Lock_timer_data ();

			/* If already linked --> stop timer */

		if (Cell_x_head != X_NIL) {
			Unlock_timer_data 	();
			timer_stop			(p_cell);
			Lock_timer_data		();
		}

			/* Set : time-out value, sequence numbering and event ID */

		Cell_period_flag = OFF;		/* Reset periodic timer flag */
		Cell_sn 		 = sn;
		Cell_ev_id 		 = ev_id;

			/* insert the timer cell into the timer thread */

		timer_insert (p_cell, to_val);

		/* Unlock data timer */

	Unlock_timer_data ();

#	if TIMER_IT == ON

			/* Check the message stack marks */

		It_stack_msg_mgt ();

#	endif

}

/*-------------------------------------------------------------------------*/

void timer_stop (p_cell)
	uchar 			FAR *p_cell;		/* timer ID = address of the cell */
{

	if (p_cell == P_NIL) return;

		/* Lock the shared data */

	Lock_timer_data ();

			/* Is the cell in a thread ? */

		if (Cell_x_head == X_NIL) {
			Unlock_timer_data ();
			return;
		}

			/* Yes - remove from the thread */

		if (Cell_next != P_NIL) {
			Prior (Cell_next) = Cell_prior;
		}

		if (Cell_prior != P_NIL) {
			Next (Cell_prior) = Cell_next;

		} else {

#			if ONE_TIMER_THREAD == ON

					/* stop OS timer */

				Os_stop_timer ();

					/* the running timer is stopped */

				if ((Head_first (0) = Cell_next) != P_NIL) {
					Prior (Cell_next) = P_NIL;

						/* start next timer in thread */

					Os_start_timer (((Cell_next) -> to_clock) - System_time ());
				}

#			else

				Head_first (Cell_x_head) = Cell_next;

#			endif

		}

		/* Unlock the shared data */

	Unlock_timer_data ();

		/* Reset the cell pointers */

	Cell_next 	= Cell_prior = P_NIL;
	Cell_x_head = X_NIL;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            periodic_timer_start - implements the starting of a previously
				allocated periodic timer.

Usage           periodic_timer_start (uchar FAR *timer_id,
									  timer_val_t to_val,
									  void (FAR *p_fct) (ulong param),
									  ulong fct_param);

Return value    void

Common constants and declarations : services.h

Common objects	:

*--------------------------------------------------------------------------*/

void periodic_timer_start (p_cell, to_val, p_fct, fct_param)
	uchar 				FAR *p_cell;		/* timer ID = address of the cell */
	timer_val_t			to_val;				/* time-out value */

#	if NEW_FCT_STYLE == ON
		void (FAR *p_fct) (ulong param);    /* pointer to the user function called periodically at timer expiration */
#	else
		void (FAR *p_fct) ();
#	endif

	ulong				fct_param;			/* parameter passed to the function */
{

	if (p_cell == P_NIL) return;

		/* Lock the shared data */

	Lock_timer_data ();

			/* If already linked --> stop timer */

		if (Cell_x_head != X_NIL) {
			Unlock_timer_data 	();
			timer_stop			(p_cell);
			Lock_timer_data		();
		}

		Cell_period_flag = ON;			/* Set periodic timer flag */
		Cell_to_val		 = to_val;		/* save time-out value for next starting */
		Cell_p_fct		 = p_fct;
		Cell_fct_param	 = fct_param;

			/* insert the timer cell into the timer thread */

		timer_insert (p_cell, to_val);

		/* Unlock data timer */

	Unlock_timer_data ();

}

	/*================= not ONE_TIMER_THREAD specific ====================*/

#if ONE_TIMER_THREAD == OFF	/* { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            timer_insert - inserts a cell into the timer threads.

Usage           timer_insert (uchar FAR *timer_id, timer_val_t to_val);

Return value    void

Related
functions		called by timer_start() and
				periodic_timer_start() functions.

Common constants and declarations : services.h

Common objects	: - timer_head[] table containing the thread top pointer
				  - timer_x_hand_clock contains the current position of the
					hand clock (index of timer_head[]).

	WARNING : the shared timer data must be locked before calling this
			  function ('Lock_timer_data()').

*--------------------------------------------------------------------------*/

void timer_insert (p_cell, to_val)
	uchar 				FAR *p_cell;		/* timer ID = address of the cell */
	timer_val_t			to_val;				/* time-out value */
{
	ushort delta;

		/* Evaluate the hand clock position */

	Cell_to_clock	= ((ulong)to_val / (ulong)timer_system_tick) + System_time ();	/* time_out absolute time */

#	if TIMER_IT == OFF

		delta = (ushort)((Cell_to_clock - timer_last_time_clock) / timer_period_tick);

		if (delta > MINI_DELTA) {

				/* Evaluate the maximum error and substract */

			delta = (ushort)((long)(delta) * (long)(100 - PER_CENT_APPROX)/100);

		} else if (delta < 2) {

			delta = 2;
		}

#	else

		delta = (ushort)(Cell_to_clock - timer_last_time_clock);

		if (delta < 2) {
			delta = 2;
		}

#	endif

	if (delta >= timer_slot_size) {

			/*
				'delta' is beyond the nb of slots :
				Chain the cell in the current (already processed) slot,
				so that it will be processed in timer_slot_nb ticks.
			*/

		Cell_x_head = timer_x_hand_clock;

	} else {

		delta += timer_x_hand_clock;

		if (delta >= timer_slot_size) {
			delta -= timer_slot_size;
		}

		Cell_x_head = delta;
	}

		/* Insert the cell into the top of the thread */

	Cell_next	= Head_first (Cell_x_head);
	Cell_prior	= P_NIL;

	if (Head_first (Cell_x_head) != P_NIL) {
		Prior (Head_first (Cell_x_head)) = (struct timer_cell FAR *)p_cell;
	}

	Head_first (Cell_x_head) = (struct timer_cell FAR *)p_cell;

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            timer_process - implements the cyclic process which increments
				the current hand clock position by one and processes the
				pending time_out.

Usage           void timer_process (void);

Related
functions usage Timer_delay (long delay); put the process in the waiting state
				during 'delay' time.

				Send_message (p_msg);

Return value    void

Common objects	: timer_head[] table contains the thread top pointer.

				  timer_x_hand_clock contains the current position of the
				  hand clock (index of timer_head[]).

				  timer_last_time_clock contains the system clock time of the last
				  delay expiration.


*--------------------------------------------------------------------------*/

#if TIMER_IT == OFF	/* { */

#if OS == AMX
	void	timer_process ()
#else
	int		timer_process ()
#endif

{
	struct timer_cell 	FAR * VOLATILE p_cell_new;	/* temporary timer cell pointer */
	struct timer_cell 	FAR * VOLATILE p_cell;     	/* temporary timer cell pointer */
	struct message 		FAR	* VOLATILE p_msg;		/* send message pointer */
	ushort 				delta;						/* number of slot to wait */

		/* Loop infinitly */

#	if SIMULATION == OFF

	for ( ; ; ) {

#	endif
			/* Lock the shared data */

		Lock_timer_data ();

			/* Get the current time and increment the hand_clock position */

#		if SIMULATION == ON
			current_time += timer_period_tick;
#		endif

			/* Update the current time */

		timer_last_time_clock += timer_period_tick;

		if (++timer_x_hand_clock == timer_slot_size) {
			timer_x_hand_clock = 0;
		}

			/* Any cell linked to the current slot ? */

		if ((p_cell = Head_first (timer_x_hand_clock)) != P_NIL) {

				/* The slot is not empty */

				/* Reset the head of thread */

			Head_first (timer_x_hand_clock) = P_NIL;

				/* Unlock the shared data */

			Unlock_timer_data ();

				/* Scan the cell thread */

			while (p_cell != P_NIL) {

				p_cell_new = Cell_next;

				if (timer_last_time_clock + timer_period_tick > Cell_to_clock) {

						/* This timer will expire during the current tick */

					if (Cell_period_flag == ON) {

							/*
								Periodic timer : call the user function
								and restart the timer.
							*/

						(*Cell_p_fct) (Cell_fct_param);

							/* Re-insert the timer cell into the timer thread. */

						timer_insert ((uchar FAR *)p_cell, Cell_to_val);

					} else {

							/* Allocate a message */

						p_msg = Alloc_msg ();

							/* Load the message header and data */

						L_msg_from 		= ENT_TI;			/* from Timer process */
						L_msg_to 		= Cell_entity_id;	/* to requestor */
						L_msg_code 		= Cell_ev_id;		/* event ID */
						L_msg_nai 		= Cell_nai;			/* NA ID */
						L_msg_sapi 		= Cell_sapi;		/* SAP ID */
						L_msg_add 		= Cell_add;			/* complementary address */

						L_msg_inf0 		= Cell_sn;			/* sequence number */
						L_msg_data_size	= INF_SIZE;

							/* Send the time-out message to the entity */

						Send_message (p_msg);

							/*
							   Set the cell pointers to NIL  and also
							   the head index.
							*/

						Cell_next	= Cell_prior = P_NIL;	/* reset cell pointers */
						Cell_x_head = X_NIL;            	/* reset the head index */

					}

				} else {

						/*
							The timer does not expire at this tick:
							Insert into a further clock slot.
						*/

						/* Reevaluate the hand clock position */

					if ((delta = (ushort)((Cell_to_clock - timer_last_time_clock) / timer_period_tick)) > MINI_DELTA) {

							/* Adjust delta */

						if ((delta = (ushort)((long)delta * (long)(100 - PER_CENT_APPROX) / 100)) == 0) {
							delta = 1;
						}

					}

						/*
						   If delta >= total number of slots, put the
						   cell in the x_hand_clock thread.
						*/

					if (delta >= timer_slot_size) {
						Cell_x_head = timer_x_hand_clock;

					} else {

						delta += timer_x_hand_clock;

						if (delta >= timer_slot_size) {
							delta -= timer_slot_size;
						}

						Cell_x_head = delta;

					}

						/* Insert the cell into the top of the thread */

					Cell_next	= Head_first (Cell_x_head);
					Cell_prior	= P_NIL;

					if (Head_first (Cell_x_head) != P_NIL) {
						Prior (Head_first (Cell_x_head)) = (struct timer_cell FAR *)p_cell;
					}

					Head_first (Cell_x_head) = (struct timer_cell FAR *)p_cell;

				} /* End else */

					/* Next cell */

				p_cell = p_cell_new;

			} /* While p cell != P_NIL */

		} else {

				/* The slot is empty */

				/* Unlock the shared data */

			Unlock_timer_data ();

		}

			/* If SIMULATION ---> break  else wait */

#	if SIMULATION == OFF

			/*
				Loop until all slots preceeding the
				current system tick have been processed,
				then wait for one Omnitel tick.
			*/

		if (timer_last_time_clock + timer_period_tick > System_time ()) {
			Timer_delay ((long)timer_period_tick);
		}

	} /* for ( ; ; ) */

#	endif

#if OS != AMX
	return (0);
#endif

}

#else	/* } TIMER_IT ON { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            timer_it - implements the timer IT handler function which
				incrementsthe system time counter and the current hand
				clock position by one and processes the	pending time_out.

				This function shall be called in a timer IT each time the
				period expire.

				At the calling time the interrupts are supposed to be in
				enable state.


Usage           void timer_it (void);

Related
functions usage Send_message (p_msg);

Return value    void

Common objects	: timer_head[] table contains the thread top pointer.

				  timer_x_hand_clock contains the current position of the
				  hand clock (index of timer_head[]).

				  timer_last_time_clock contains the system clock time of the last
				  delay expiration.


*--------------------------------------------------------------------------*/

void timer_it ()

{
	struct timer_cell 	FAR * VOLATILE p_cell_new;	/* temporary timer cell pointer */
	struct timer_cell 	FAR * VOLATILE p_cell;     	/* temporary timer cell pointer */
	struct message 		FAR	* VOLATILE p_msg;		/* message pointer */
	ushort 							   delta;		/* number of slot to wait */

		/* Update the current time */

	timer_last_time_clock = ++current_time;

		/* Lock the shared data */

	Lock_timer_data ();

		/* Increment the hand_clock position */

	if (++timer_x_hand_clock == timer_slot_size) {
		timer_x_hand_clock = 0;
	}

		/* Time_out failed ? */

	if ((p_cell = Head_first (timer_x_hand_clock)) != P_NIL) {
		Head_first (timer_x_hand_clock) = P_NIL;	/* start of thread to NIL */

			/* Unlock data timer */

		Unlock_timer_data ();

			/* Scan the thread of timer cell */

		while (p_cell != P_NIL) {
			p_cell_new = Cell_next;

			if ((ulong)current_time >= Cell_to_clock) {

				if (Cell_period_flag == ON) {

						/*
							Periodic timer : call the user function
							and restart the timer.
						*/

					(*Cell_p_fct) (Cell_fct_param);

						/* Re-insert the timer cell into the timer thread. */

					timer_insert ((uchar FAR *)p_cell, Cell_to_val);

				} else {

						/* Get a message from the stack of free messages */

					It_get_msg (p_msg);

						/* check if empty stack */

					if (p_msg != P_NIL) {

							/* Load the message header anf data */

						L_msg_header_init;
						L_msg_lib 		= ON;					/* Lib flag = ON */
						L_msg_p_buffer	= P_NIL;				/* P_buffer pointer to NIL */
						L_msg_from 		= ENT_TI;				/* from Timer process */
						L_msg_to 		= Cell_entity_id;		/* to requestor */
						L_msg_code 		= Cell_ev_id;			/* event ID */
						L_msg_nai 		= Cell_nai;				/* NA ID */
						L_msg_sapi 		= Cell_sapi;			/* SAP ID */
						L_msg_add 		= Cell_add;				/* complementary address */

						L_msg_inf0 		= Cell_sn;				/* sequence number */
						L_msg_data_size	= sizeof (L_msg_inf0);	/* data size */

							/* Send the time-out message to the entity */

						Send_message (p_msg);

							/* Set the cell pointers to NIL  and also the head index. */

						Cell_next	= Cell_prior = P_NIL;	/* reset cell pointers */
						Cell_x_head = X_NIL;            	/* reset the head index */

					} else {

							/* Message missing in the stack --> link to next slot */
							/* ('delta' is used as temporary variable) */

						delta = timer_x_hand_clock + 1;

						if (delta == timer_slot_size) {
							delta = 0;
						}

						Cell_x_head = delta;

							/* Insert the cell into the top of the thread */

						goto insert_top_thread;
					}

				}

			} else {

					/* Insert into a further clock slot */

					/* Reevaluate the hand clock position */

				delta = (ushort)(Cell_to_clock - timer_last_time_clock);

					/*
					   If delta >= total number of slots, put the
					   cell in the x_hand_clock thread.
					*/

				if (delta >= timer_slot_size) {
					Cell_x_head = timer_x_hand_clock;

				} else {

					delta += timer_x_hand_clock;

					if (delta >= timer_slot_size) {
						delta -= timer_slot_size;
					}

					Cell_x_head = delta;

				}

					/* Insert the cell into the top of the thread */

			insert_top_thread :

				Lock_timer_data ();

					Cell_next	= Head_first (Cell_x_head);
					Cell_prior	= P_NIL;

					if (Head_first (Cell_x_head) != P_NIL) {
						Prior (Head_first (Cell_x_head)) = (struct timer_cell FAR *)p_cell;
					}

					Head_first (Cell_x_head) = (struct timer_cell FAR *)p_cell;

				Unlock_timer_data ();

			} /* End else */

				/* Next cell */

			p_cell = p_cell_new;

		} /* While p cell != P_NIL */

	} else {

		Unlock_timer_data ();
	}

}

#endif /* } TIMER_IT ON */

#else	/* } ============== ONE_TIMER_THREAD specific =============== { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            timer_insert - inserts a cell into the timer threads.

Usage           timer_insert (uchar FAR *timer_id, timer_val_t to_val);

Return value    void

Related
functions		called by timer_start() and
				periodic_timer_start() functions.

Common constants and declarations : services.h

Common objects	: - timer_head[] table containing the thread top pointer
				  - timer_x_hand_clock contains the current position of the
					hand clock (index of timer_head[]).

	WARNING : the shared timer data must be locked before calling this
			  function ('Lock_timer_data()').

*--------------------------------------------------------------------------*/

	/* ONE_TIMER_THREAD specific */

void timer_insert (p_cell, to_val)
	uchar 				FAR *p_cell;		/* timer ID = address of the cell */
	timer_val_t			to_val;				/* time-out value */
{
	struct timer_cell	FAR *p_cell_thread;	/* address of a cell in the thread */
	struct timer_cell	FAR *p_cell_last;	/* address of a cell in the thread */
	ulong					 cell_to_clock;	/* local Time-out clock value */
	ulong					 tick_to_val;	/* Time-out value in ticks */

		/* Mark the cell active */

	Cell_x_head	= (!X_NIL);

		/* Evaluate the timeout clock */

	tick_to_val		= (ulong)to_val / (ulong)timer_system_tick;
	Cell_to_clock	= tick_to_val + System_time ();	/* time_out absolute time */

		/* Insert the cell into the thread */

	if ((p_cell_thread = Head_first (0)) == P_NIL) {

			/* new running timer */

		new_running_timer :

			Head_first (0)	= (struct timer_cell FAR *)p_cell;
			Os_start_timer (tick_to_val);

	} else {

		cell_to_clock = Cell_to_clock;

		if (cell_to_clock < (p_cell_thread -> to_clock)) {

				/* current running timer is longer than the new one */

			Prior (Head_first (0)) = (struct timer_cell FAR *)p_cell;
			Next ((struct timer_cell FAR *)p_cell) = Head_first (0);
			Os_stop_timer ();
			goto new_running_timer;

		} else {

				/* insert the cell in queue */

			do {
				p_cell_last		= p_cell_thread;
				p_cell_thread	= Next (p_cell_thread);
			} while ((p_cell_thread != P_NIL) && (cell_to_clock > p_cell_thread -> to_clock));

			Cell_prior			= p_cell_last;
			Next (p_cell_last)	= (struct timer_cell FAR *)p_cell;

			if (p_cell_thread != P_NIL) {
				Cell_next				= p_cell_thread;
				Prior (p_cell_thread)	= (struct timer_cell FAR *)p_cell;
			}

		}

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            timer_handler - implements the cyclic process which increments
				the current hand clock position by one and processes the
				pending time_out.

Usage           void timer_handler (void);

Related
functions usage Timer_delay (long delay); put the process in the waiting state
				during 'delay' time.

				Send_message (p_msg);

Return value    void

Common objects	: timer_head[] table contains the thread top pointer.

*--------------------------------------------------------------------------*/

	/* ONE_TIMER_THREAD specific */

void timer_handler ()
{
	struct timer_cell 	FAR * VOLATILE p_cell_new;	/* temporary timer cell pointer */
	struct timer_cell 	FAR * VOLATILE p_cell;     	/* temporary timer cell pointer */
	struct message 		FAR	* VOLATILE p_msg;		/* send message pointer */
	ulong							   time;		/* current time */

		/* Time_out failed ? */

	if ((p_cell = Head_first (0)) != P_NIL) {

			/* Get the current time */

		time = System_time ();

			/* Scan the cell thread */

		while (p_cell != P_NIL) {

				/* test if timeout is valid for the current cell */

			if (time >= Cell_to_clock) {

				p_cell_new = Cell_next;

				if (Cell_period_flag == ON) {

						/*
							Periodic timer : call the user function
							and restart the timer.
						*/

					(*Cell_p_fct) (Cell_fct_param);

						/* reset the timer cell and remove it from thread */

					Cell_next			= Cell_prior = P_NIL;	/* reset cell pointers */
					Cell_x_head 		= X_NIL;            	/* reset the head index */

					if ((Head_first (0)	= (struct timer_cell FAR *)p_cell_new) != P_NIL) {
						Prior (p_cell_new)	= P_NIL;
					}

						/* Re-insert the timer cell into the timer thread. */

					timer_insert ((uchar FAR *)p_cell, Cell_to_val);

					p_cell_new			= Head_first (0);

				} else {

						/* Allocate a free message */

					p_msg			= Alloc_msg ();

						/* Load the message header and data */

					L_msg_from 		= ENT_TI;				/* from Timer process */
					L_msg_to 		= Cell_entity_id;		/* to requestor */
					L_msg_code 		= Cell_ev_id;			/* event ID */
					L_msg_nai 		= Cell_nai;				/* NA ID */
					L_msg_sapi 		= Cell_sapi;			/* SAP ID */
					L_msg_add 		= Cell_add;				/* complementary address */

					L_msg_inf0 		= Cell_sn;				/* sequence number */
					L_msg_data_size	= INF_SIZE;

						/* Send the time-out message to the entity */

					Send_message (p_msg);

						/*
						   Set the cell pointers to NIL and also
						   the head index.
						*/

					Cell_next		= Cell_prior = P_NIL;	/* reset cell pointers */
					Cell_x_head 	= X_NIL;            	/* reset the head index */

				}

					/* Next cell */

				p_cell				= p_cell_new;

			} else {

					/* start the next timer in thread */

				Head_first (0)	= (struct timer_cell FAR *)p_cell;
				Cell_prior		= P_NIL;
				Os_start_timer	(Cell_to_clock - time);
				return;

			} /* End else */

		} /* While p_cell != P_NIL */

		Head_first (0)	= P_NIL;

	} /* If time-out expiry */

}

#endif /* } ============== not ONE_TIMER_THREAD specific ===============*/

/*EOF*/
