
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - it_proc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *  implements the communication functions with interrupt routines.
 *
 *     it_init - init the communication functions data resources.
 *
 *     it_stack_msg_mgt - it_stack_buffer_mgt refill or empty the message
 *                        and buffer stacks.
 *
 *     it_var_init - init of it stacks global variables.
 *
 *     it_disable_68 - Disable Interrupts for MOTOROLA processor
 *     it_enable_68  - Enable  Interrupts for MOTOROLA processor
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS Services                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include	"services.h"
#include	"it.h"

/*------------------------- IT DISABLE/ENABLE counter ----------------------*/

	it_mask_t	VOLATILE it_mask_all_flag;

/*--------------------------------------------------------------------------*/

/*
								STACK MANAGEMENT MODEL

									|           |
									|           |
			  High_mark		  ----->|           |
									|           |
									|           |
			  Middle_mark	  ----->|           |
									|           |
									|           |
			  Low_mark		  ----->|           |
									|           |
		  cong_high_mark      ----->|           |
									|           |
		  cong_low_mark 	  ----->|           |
									|           |
									-------------
*/

					/* Empty message management */

			ushort		it_stack_msg_low_mark;			/* empty message stack low mark */
			ushort		it_stack_msg_middle_mark;		/* empty message stack middle mark */
			ushort		it_stack_msg_high_mark;			/* empty message highn mark */
			ushort		it_stack_msg_cong_high_mark;	/* IT stack CPU congestion high mark */
			ushort		it_stack_msg_cong_low_mark;		/* IT stack CPU congestion low mark */

			struct message 	FAR *VOLATILE p_it_stack_msg;		/* stack pointer*/

					/* Empty buffer management */

			ushort		it_stack_buffer_low_mark;		/* empty buffer stack low mark */
			ushort		it_stack_buffer_middle_mark;	/* empty buffer stack middle mark */
			ushort		it_stack_buffer_high_mark;		/* empty buffer stack high mark */
			ushort		it_stack_buffer_cong_high_mark;	/* IT stack CPU congestion high mark */
			ushort		it_stack_buffer_cong_low_mark;	/* IT stack CPU congestion low mark */

			struct buffer 	FAR	*VOLATILE p_it_stack_buffer;		/* stack pointer */

		/* Function declarations */

#if NEW_FCT_STYLE == ON
	struct message	FAR *it_trap_get_msg	(void);
	struct buffer	FAR *it_trap_get_buffer	(void);

#else

	struct message	FAR *it_trap_get_msg	();
	struct buffer 	FAR	*it_trap_get_buffer	();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	it_init - initialize the interrupt communication
							  functions	of the OMNITEL IT services modules.

Usage            	uchar it_init (struct it_init	FAR *p_it_init );
						- p_it_init : initialization parameters pointer.

Related
functions usage : 	Mem_alloc;
					Mem_free;

Return code			= OK initialization done,
					= NOK initialization not done, erroneous parameter.

Common 			 	stack variables.

*--------------------------------------------------------------------------*/

uchar it_init (p_it_init)
	struct it_init	FAR	*p_it_init;		/* init data structure pointer */

{

	if (it_stack_msg_high_mark != 0) {
		return (NOK);				/* already initialized */
	}

	it_stack_msg_nb					=
	it_stack_buffer_nb				= 0;

	it_stack_msg_low_mark 			= (ushort)Set_default (It_init_stack_msg_low_mark,          IT_STACK_D_MSG_LOW_MARK);
	it_stack_msg_middle_mark		= (ushort)Set_default (It_init_stack_msg_middle_mark,       IT_STACK_D_MSG_MIDDLE_MARK);
	it_stack_msg_high_mark			= (ushort)Set_default (It_init_stack_msg_high_mark,         IT_STACK_D_MSG_HIGH_MARK);

	it_stack_buffer_low_mark 		= (ushort)Set_default (It_init_stack_buffer_low_mark,       IT_STACK_D_BUFFER_LOW_MARK);
	it_stack_buffer_middle_mark		= (ushort)Set_default (It_init_stack_buffer_middle_mark,    IT_STACK_D_BUFFER_MIDDLE_MARK);
	it_stack_buffer_high_mark		= (ushort)Set_default (It_init_stack_buffer_high_mark,      IT_STACK_D_BUFFER_HIGH_MARK);

	it_stack_msg_cong_high_mark		= (ushort)Set_default (It_init_stack_cong_msg_high_mark,    IT_STACK_D_MSG_CONG_HIGH_MARK);
	it_stack_msg_cong_low_mark		= (ushort)Set_default (It_init_stack_cong_msg_low_mark,     IT_STACK_D_MSG_CONG_LOW_MARK);

	it_stack_buffer_cong_high_mark	= (ushort)Set_default (It_init_stack_cong_buffer_high_mark, IT_STACK_D_BUFFER_CONG_HIGH_MARK);
	it_stack_buffer_cong_low_mark	= (ushort)Set_default (It_init_stack_cong_buffer_low_mark,  IT_STACK_D_BUFFER_CONG_LOW_MARK);

	it_stack_msg_cong_flag			=
	it_stack_buffer_cong_flag		= OFF;

	it_stack_msg_cong_nb			=
	it_stack_buffer_cong_nb			= 0;

	p_it_stack_msg					= P_NIL;
	p_it_stack_buffer				= P_NIL;

		/* Check the consistency of the marks */

	if ((it_stack_msg_low_mark 			> it_stack_msg_middle_mark) ||
		(it_stack_msg_middle_mark 		> it_stack_msg_high_mark)) {
		return (NOK);
	}

	if ((it_stack_buffer_low_mark 		> it_stack_buffer_middle_mark) ||
		(it_stack_buffer_middle_mark 	> it_stack_buffer_high_mark)) {
		return (NOK);
	}

	if ((it_stack_msg_cong_low_mark		> it_stack_msg_cong_high_mark) ||
		(it_stack_msg_cong_high_mark	> it_stack_msg_low_mark)) {
		return (NOK);
	}

	if ((it_stack_buffer_cong_low_mark	> it_stack_buffer_cong_high_mark) ||
		(it_stack_buffer_cong_high_mark	> it_stack_buffer_low_mark)) {
		return (NOK);
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             it_stack_msg_mgt and it_stack_buffer_mgt - fill or empty
				 the message or buffer stacks.

Usage            void it_stack_msg_mgt 		(void);
				 void it_stack_buffer_mgt 	(void);

Related
functions usage : 	Alloc_msg;
					Free_msg;
					Alloc_buffer;
					Free_buffer;
					It_enable;
					It_disable;

Common 				message and buffer pointers, message and buffer
					stack variables.

*--------------------------------------------------------------------------*/

			/* ----------- Message stack management ---------------- */

#if MESSAGE_CONG_CONTROL == ON
	extern	uchar	VOLATILE	message_cong_flag;		/* MESSAGE CONGESTION flag */
#endif

void it_stack_msg_mgt ()
{
	struct message FAR	*p_msg;		/* local pointer to a message */

		/* If low mark reached : allocate until middle mark */

	if (it_stack_msg_nb < it_stack_msg_low_mark) {

		while (it_stack_msg_nb <= it_stack_msg_middle_mark) {

			if (
#				if MESSAGE_CONG_CONTROL == ON
					(message_cong_flag == ON)
#				else
					((p_msg = Alloc_msg ()) == P_NIL)
#				endif

				) {
				break;
			}

#			if MESSAGE_CONG_CONTROL == ON
				p_msg = Alloc_msg ();
#			endif

			It_disable ();

			if (it_stack_msg_nb <= it_stack_msg_middle_mark) {

					/* Put in the stack */

				Lifo_put_msg (p_it_stack_msg, p_msg);
				It_stack_test_and_reset_congestion (it_stack_msg_nb, it_stack_msg_cong_high_mark, it_stack_msg_cong_flag);
				It_enable ();

			} else {

				It_enable ();
				Free_msg (p_msg);
			}

		}

	}
		/* If high mark reached : deallocate until middle mark */

	else if (it_stack_msg_nb > it_stack_msg_high_mark) {

		while (it_stack_msg_nb > it_stack_msg_middle_mark) {
			It_disable ();

			if (it_stack_msg_nb > it_stack_msg_middle_mark) {

					/* Get from the stack */

				Lifo_get_msg (p_it_stack_msg, p_msg);
				it_stack_msg_nb--;
				It_enable ();
				Free_msg (p_msg);

			} else {

				It_enable ();
			}

		}

	}

}


/*--------------------------------------------------------------------------*/

				/* -------- Buffer stack management ------- */

#if BUFFER_CONG_CONTROL == ON
	extern	uchar	VOLATILE	buffer_cong_flag;		/* BUFFER CONGESTION flag */
#endif

void it_stack_buffer_mgt ()
{
	struct buffer  FAR	*p_buffer; 	/* local pointer to a buffer */

		/* If low mark reached : allocate until middle mark */

	if (it_stack_buffer_nb <= it_stack_buffer_low_mark) {

		while (it_stack_buffer_nb < it_stack_buffer_middle_mark) {

			if (

#				if BUFFER_CONG_CONTROL == ON
					(buffer_cong_flag == ON)
#				else
					((p_buffer = Alloc_buffer ()) == P_NIL)
#				endif

			  ) {

				break;              		/* No buffer available */
			}

#			if BUFFER_CONG_CONTROL == ON
				p_buffer = Alloc_buffer ();
#			endif

			It_disable ();

			if (it_stack_buffer_nb <= it_stack_buffer_middle_mark) {

					/* Put in the stack */

				Lifo_put_buffer(p_it_stack_buffer, p_buffer);
				It_stack_test_and_reset_congestion (it_stack_buffer_nb, it_stack_buffer_cong_high_mark, it_stack_buffer_cong_flag);
				It_enable ();

			} else {

				It_enable ();
				Buffer_p_next = P_NIL;
				Free_buffer (p_buffer);
			}

		}

	}
		/* If high mark reached : deallocate until middle mark */

	else if (it_stack_buffer_nb > it_stack_buffer_high_mark) {

		while (it_stack_buffer_nb > it_stack_buffer_middle_mark) {
			It_disable ();

			if (it_stack_buffer_nb > it_stack_buffer_middle_mark) {

					/* Get from the stack */

				Lifo_get_buffer (p_it_stack_buffer, p_buffer);

				it_stack_buffer_nb--;

				It_enable ();
				Buffer_p_next = P_NIL;
				Free_buffer (p_buffer);

			} else {

				It_enable ();
			}

		}

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            it_disable_68

Usage           void it_disable_68 (void);

Description  :	disable all interruptions (MOTOROLA only)

Return value :	none

common constants and declarations :

*--------------------------------------------------------------------------*/

#if (C_COMPILER == MT68) || (C_COMPILER == CC68)

#	if (C_COMPILER == MT68)
#		define Asm		asm
#	else
#		define Asm		__asm
#	endif

		/*
			WARNING : the following global variable is defined in C,
			but is only used in the following assembly code (it_enable_68()
			and it_disable_68() functions). It is assumed that the compiler
			adds un underbar in front of every global identifier. If your
			compiler does not generate this underbar, or generates a dot or
			other leading character, then you should modify the assembly
			instructions related with this variable.
		*/

	ushort it_mgt_store_status_reg;

	void it_disable_68 (void)
	{

		Asm("	move	sr,-(a7)						; put current SR in stack						");
		Asm("	ori		#$0600,sr						; set level to 6 or 7							");
													/*	; we are now protected							*/
		Asm("	cmpi.w	#0,_it_mgt_store_status_reg		; interrupts already disabled ?					");
		Asm("	bne		IT_DISABLED						; yes, exit										");
		Asm("	move	(a7),_it_mgt_store_status_reg	; save SR and remember interrupts are disabled	");
		Asm("	ori.w	#$1,_it_mgt_store_status_reg		; ensure that the saved SR is non zero			");
													/*	; this will set the carry bit when SR will be restored 	*/
		Asm("IT_DISABLED:																				");
		Asm("	adda.l	#$2,a7							; restore stack									");

	}

#endif

#if C_COMPILER == GNU68

#	define Asm		__asm__

	ushort it_mgt_store_status_reg;

	void it_disable_68 (void)
	{

		Asm("	move	%sr,%a7@- 							");
		Asm("	ori		#0x0600,%sr							");
		Asm("	cmpiw	#0,it_mgt_store_status_reg			");
		Asm("	bne		IT_DISABLED							");
		Asm("	movew	%a7@,it_mgt_store_status_reg	    ");
		Asm("	oriw	#1,it_mgt_store_status_reg		    ");
		Asm("IT_DISABLED:									");
		Asm("	addal	#2,%a7								");

	}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            it_enable_68

Usage           void it_enable_68 (void);

Description  :	enable all interruptions (MOTOROLA only)

Return value :	none

common constants and declarations :

*--------------------------------------------------------------------------*/

#if (C_COMPILER == MT68) || (C_COMPILER == CC68)

	void it_enable_68 (void)
	{

		Asm("	move	sr,-(a7)						; put 'entry' SR in stack						");
		Asm("	ori		#$0600,sr						; set level to 6 or 7							");
													/*	; we are now protected								*/
		Asm("	cmpi.w	#$0,_it_mgt_store_status_reg		; interrupts already enabled ?					");
		Asm("	beq		IT_ENABLED                      ; yes, exit										");
		Asm("	move.w	_it_mgt_store_status_reg,-(a7)	; put saved SR in stack							");
		Asm("	move.w	#$0,_it_mgt_store_status_reg		; remember we are enabled						");
		Asm("	move	(a7)+,sr						; restore status register with saved value		");
													/*  ; that is, reenable interrupts to previous level	*/
													/*	; note that the carry bit is set					*/
		Asm("	adda.l	#$2,a7							; restore stack									");
		Asm("	bra		IT_ENABLE_EXIT					; return										");
		Asm("IT_ENABLED:																				");
		Asm("	move	(a7)+,sr						; restore 'entry' SR 							");
		Asm("IT_ENABLE_EXIT:																			");

	}

#endif

#if C_COMPILER == GNU68

	void it_enable_68 (void)
	{

		Asm("	move	%sr,%a7@- 						");
		Asm("	ori		#0x0600,%sr						");
		Asm("	cmpiw	#0,it_mgt_store_status_reg	    ");
		Asm("	beq		IT_ENABLED                      ");
		Asm("	movew	it_mgt_store_status_reg,%a7@-	");
		Asm("	movew	#0,it_mgt_store_status_reg	    ");
		Asm("	move	%a7@+,%sr						");
		Asm("	adda.l	#2,%a7						    ");
		Asm("	bra		IT_ENABLE_EXIT				    ");
		Asm("IT_ENABLED:							    ");
		Asm("	move	%a7@+,%sr						");
		Asm("IT_ENABLE_EXIT:						    ");

	}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				it_var_init - init of It stacks global variables.

Usage            	void it_var_init ();

Return value :		void

*--------------------------------------------------------------------------*/

void it_var_init ()
{

	it_stack_msg_high_mark = 0;

#	if (C_COMPILER == MT68) || (C_COMPILER == CC68)
		Asm("	move.w	#$0,_it_mgt_store_status_reg	; remember we are enabled");
#	endif

#	if C_COMPILER == GNU68
		Asm("	movew	#0,it_mgt_store_status_reg		");
#	endif

}

/*EOF*/
