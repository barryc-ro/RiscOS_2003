
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - sm_sts.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *     sm_mem_init         - initialize stable storage (STS entity)
 *     sm_mem_read         - read a value from stable storage (STS entity)
 *     sm_mem_write        - write a value in stable storage (STS entity)
 *     sm_process_user_msg - process a message received and unexpected by SM
 *     sm_sts_read         - send a 'read' primitive to STS entity
 *     sm_sts_reset        - send a 'reset' primitive to STS entity
 *     sm_sts_write        - send a 'write' primitive to STS entity
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    SM Entity (System Management)                    |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"

#ifdef CONFIG_UPDATE_MANAGEMENT

#	if CONFIG_UPDATE_MANAGEMENT == ON

#		include "sts_int.h"

#		if NEW_FCT_STYLE == ON
			void sm_sts_read 	(ushort, uchar);
			void sm_sts_reset 	(uchar);
			void sm_sts_write 	(ushort, uchar FAR *, ushort, uchar);
#		else
			void sm_sts_read 	();
			void sm_sts_reset 	();
			void sm_sts_write 	()
#		endif


#		ifndef MEM_FLAG
#			define 	MEM_FLAG				0x5A
#		endif

#		ifndef Sm_mem_can_be_read
#			define	Sm_mem_can_be_read()	ON
#		endif

		extern 	uchar 		sts_cache [];					/* Cache memory */
		extern	short CONST	sts_cache_size;					/* Cache memory size */

		short		sm_sts_nb_updates_in_progress;			/* ON if STS updates are in progress */
		uchar		sm_sts_cache_updated; 					/* ON if cache updated, EEPROM needs update */

		short		sm_sts_io_size;							/* length of an i/o to STS */

		uchar CONST sm_sts_mem_flag				= MEM_FLAG;	/* Validity flag, may be patched if necessary */
		uchar CONST	sm_sts_def_profile_id		= 0;		/* Default profile id */

#		define	TRAP_SM_MEM_WRITE_CACHE_SIZE	2011		/* Invalid cache size */
#		define	TRAP_SM_MEM_WRITE_OUT			2012		/* Write out of bound */
#		define	TRAP_SM_MEM_READ_CACHE_SIZE		2013		/* Invalid cache size */
#		define	TRAP_SM_MEM_READ_OUT			2014		/* Read out of bound */
#		define	TRAP_SM_MEM_WRITE_COUNT			2015		/* Write inconsistency */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 			sm_mem_init : initialize stable storage

Usage : 		uchar sm_mem_init (ushort size)
							- size			: size of the stable storage
Return value :	OK or NOK

Description : 	initialize stable storage

*--------------------------------------------------------------------------*/

uchar sm_mem_init (size)
ushort	size;
{
	sm_sts_io_size	= Buffer_data_lgth - Rnd_sizeof (struct buffer) -
					  Sts_write_rq_co_size (1, 1) - 4;	/* -4 for safety */
	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 			sm_mem_read : read a value from stable storage (STS entity)

Usage : 		uchar sm_mem_read (uchar FAR   *p_value,
								   ushort		p_rel_add,
								   uchar		val_size)
							- p_value		: memory address where to copy value
							- p_rel_add		: STS address of the stored value
							- val_size		: size of the value to copy

Return value :	OK or NOK

Description : 	Read the value from stable storage

*--------------------------------------------------------------------------*/

uchar sm_mem_read (p_value, p_rel_add, val_size)
uchar	FAR *p_value;
ushort		 p_rel_add;
uchar		 val_size;
{

		/* Check validity of the request */

	if (sts_cache_size == 0) {
		Trap (TRAP_SM_MEM_READ_CACHE_SIZE, "sm_mem_read: sts_cache_size");
		return (NOK);
	}

	if (p_rel_add + val_size > sts_cache_size) {
		Trap (TRAP_SM_MEM_READ_OUT, "sm_mem_read: out of bound");
		return (NOK);;
	}

	if (!(Sm_mem_can_be_read ())) {
		return (NOK);
	}

	/* Check EEPROM and cache are valid */

	if (*sts_cache != sm_sts_mem_flag) {

			/* Reset cache and EEPROM */

		Memset_far ((char FAR*)sts_cache, 0xFF, sts_cache_size);/* cache */
		sm_sts_reset (0);										/* EEPROM */

		sts_cache [0] = sm_sts_mem_flag;						/* cache */
		sts_cache [1] = sm_sts_def_profile_id;					/* cache */
		sm_sts_write (0, sts_cache, 2, ON);						/* EEPROM */
		++sm_sts_nb_updates_in_progress;
		sm_sts_cache_updated 		= OFF;

			/* Return special value */

		Memset_far ((char FAR*)p_value, 0xFF, val_size);

	} else {

			/* Read cache */

		Memcpy_far ((char FAR *)p_value, (char FAR *)(sts_cache + p_rel_add), val_size);

	}

	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 			sm_mem_write : write a value in stable storage (STS entity)

Usage : 		void sm_mem_write (ushort		p_rel_add,
								   uchar FAR   *p_value,
								   uchar		val_size,
								   uchar		wait)
							- p_rel_add		: STS address where to store value
							- p_value		: memory address of the value
							- val_size		: size of the value to store
							- wait			: ON : wait before performing i/o
											  OFF: i/o may be performed
												   immediately
Return value :	OK or NOK

Description : 	Write the value in STS storage

*--------------------------------------------------------------------------*/

uchar sm_mem_write (p_rel_add, p_value, val_size, wait)
ushort		 p_rel_add;
uchar	FAR *p_value;
uchar		 val_size;
uchar		 wait;
{
	short		length;
	short		rem_length;

		/* Check validity of the request */

	if (sts_cache_size == 0) {
		Trap (TRAP_SM_MEM_WRITE_CACHE_SIZE, "sm_mem_write: sts_cache_size");
		return (NOK);
	}

	if (p_rel_add + val_size > sts_cache_size) {
		Trap (TRAP_SM_MEM_WRITE_OUT, "sm_mem_write: out of bound");
		return (NOK);
	}

		/* Check EEPROM and cache are valid */

	if (*sts_cache != sm_sts_mem_flag) {

		/* Reset cache and EEPROM */

		Memset_far ((char FAR*)sts_cache, 0xFF, sts_cache_size);		/* cache */
		sm_sts_reset (0);										/* EEPROM */

		sts_cache [0] = sm_sts_mem_flag;						/* cache */
		sts_cache [1] = sm_sts_def_profile_id;					/* cache */
		sm_sts_write (0, sts_cache, 2, ON);						/* EEPROM */
		++sm_sts_nb_updates_in_progress;
		sm_sts_cache_updated 		= OFF;
	}


	if (Memcmp_far ((char FAR *)(sts_cache + p_rel_add),
					(char FAR *)p_value, val_size) == 0) {

		/* no change to apply to cache */

		if (sm_sts_cache_updated == OFF) {	/* and cache is clean */
			return (OK);
		}
	}
	else {		/* Update cache */

		Memcpy_far ((char FAR *)(sts_cache + p_rel_add),
					(char FAR *)p_value, val_size);
	}

		/*
			Request full update of EEPROM with current cache value,
			if such an update is not already in progress.
			Else remember a EEPROM update has to be performed.
		 */

	if ((wait == OFF) && (sm_sts_nb_updates_in_progress == 0)) {

		for (rem_length = sts_cache_size, p_rel_add = 0;
			 rem_length > 0; rem_length -= length, p_rel_add += length) {

			length	= (rem_length > sm_sts_io_size) ? sm_sts_io_size :
													  rem_length;
			sm_sts_write (p_rel_add, sts_cache + sts_cache_size - rem_length,
						  length, ON);
			++sm_sts_nb_updates_in_progress;
		}
		sm_sts_cache_updated 		= OFF;

	} else {

		sm_sts_cache_updated = ON;
	}

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 			sm_process_user_msg : process a message received and
									  unexpected by SM

Usage : 		void sm_process_user_msg (p_msg)

Return value :	none

Description : 	Prepare and send a 'write' message to the STS entity

*--------------------------------------------------------------------------*/

void sm_process_user_msg (p_msg)
struct message FAR		*p_msg;
{
	short		length;
	short		rem_length;

	switch (L_msg_from) {
	default:
		break;

	case ENT_STS:
		switch (L_msg_code) {
		default:
			break;

		case STS_WRITE_CO:

				/* A STS update request has been acknowledged */

			--sm_sts_nb_updates_in_progress;
			if (sm_sts_nb_updates_in_progress < 0) {
				Trap (TRAP_SM_MEM_WRITE_COUNT, "sm_process_user_msg: count error");
			}
			if ((sm_sts_nb_updates_in_progress == 0) &&
				(sm_sts_cache_updated == ON)) {
				Free_msg (p_msg); p_msg = P_NIL;

				for (rem_length = sts_cache_size; rem_length > 0;
					 rem_length -= length) {
					length	= (rem_length > sm_sts_io_size) ? sm_sts_io_size :
															  rem_length;
					sm_sts_write (0, sts_cache + sts_cache_size - rem_length,
									 length, ON);
					++sm_sts_nb_updates_in_progress;
				}
				sm_sts_cache_updated 		= OFF;
			}
			break;
		}

	}

	Free_msg (p_msg);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 			sm_sts_read : send a 'read' primitive to STS entity

Usage : 		void sm_sts_read (ushort 		p_rel_add,
								   uchar		val_size)
							- p_rel_add	: relative address in STS address
										  space of data to read
							- val_size	: data size

Return value :	none

Description : 	Prepare and send a 'read' message to the STS entity

*--------------------------------------------------------------------------*/

#if	0
void sm_sts_read (p_rel_add, val_size)	/* this routine is not used */
ushort 		p_rel_add;
uchar		val_size;
{
	uchar FAR 				*p_data;
	struct message FAR		*p_snd_msg;
	struct buffer FAR		*p_buffer;
	struct sts_range		*p_r;

	p_snd_msg	= Alloc_msg ();
	p_buffer	= Alloc_buffer ();
	S_msg_init_link_buffer;

	p_data 		= Buffer_a_start_data;
	p_r 		= Sts_read_rq_a_first_range;

	S_msg_code					= STS_READ_RQ;
	Sts_read_rq_co_mode			= 0;
	Sts_read_rq_co_nb_ranges	= 1;
	Sts_range_addr (p_r)		= (sts_address)p_rel_add;
	Sts_range_length (p_r)		= val_size;
	Buffer_data_size			= Sts_read_rq_size (1);

	Confirm_ret_code			= OFF;		/* request confirmation */

	S_msg_nai     	= NAI_NIL;
	S_msg_sapi    	= SAPI_NIL;
	S_msg_add     	= CONN_ID_NIL;
	S_msg_to   		= ENT_STS;
	S_msg_from 		= ENT_SM;

	Send_message (p_snd_msg);
}
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 			sm_sts_reset : send a 'reset' primitive to STS entity

Usage : 		void sm_sts_reset (uchar chip_id)

Return value :	none

Description : 	Prepare and send a 'reset' message to the STS entity

*--------------------------------------------------------------------------*/

void sm_sts_reset (chip_id)
uchar		chip_id;
{
	uchar FAR 				*p_data;
	struct message FAR		*p_snd_msg;

	p_snd_msg				= Alloc_msg ();
	S_msg_header_init;
	S_msg_data_size 		= Sts_test_rq_co_size;

	p_data 					= S_msg_a_start_data;

	S_msg_code				= STS_TEST_RQ;
	Sts_test_rq_co_mode		= STS_TEST_ERASE_ALL;
	Sts_test_rq_co_chip_ix	= chip_id;

	Confirm_ret_code		= ON;	/* request NO confirmation */

	S_msg_nai     	= NAI_NIL;
	S_msg_sapi    	= SAPI_NIL;
	S_msg_add     	= CONN_ID_NIL;
	S_msg_to   		= ENT_STS;
	S_msg_from 		= ENT_SM;

	Send_message (p_snd_msg);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 			sm_sts_write : send a 'write' primitive to STS entity

Usage : 		void sm_sts_write (ushort 		p_rel_add,
								   uchar FAR 	*p_value,
								   ushort		val_size
								   uchar		confirm)
							- p_rel_add	: relative address in STS address space
							- p_value	: memory address of data to write
							- val_size	: data size
							- confirm	: ON if primitive confirm requested

Return value :	none

Description : 	Prepare and send a 'write' message to the STS entity

*--------------------------------------------------------------------------*/

void sm_sts_write (p_rel_add, p_value, val_size, confirm)
ushort 		p_rel_add;
uchar FAR 	*p_value;
ushort		val_size;
uchar		confirm;
{
	uchar FAR 				*p_data;
	struct message FAR		*p_snd_msg;
	struct buffer FAR		*p_buffer;
	struct sts_range_value	*p_rv;
	short					 i;

	p_snd_msg	= Alloc_msg ();
	p_buffer	= Alloc_buffer ();
	S_msg_init_link_buffer;

	p_data 		= Buffer_a_start_data;
	p_rv 		= Sts_write_rq_co_a_first_range_val;

	S_msg_code					= STS_WRITE_RQ;
	Sts_write_rq_co_mode		= 0;

	Sts_write_rq_co_nb_ranges	= 1;
	Sts_range_val_addr (p_rv)	= (sts_address)p_rel_add;
	Sts_range_val_length (p_rv)	= val_size;

	for (i = 0; i < val_size; ++i) {
		Sts_range_val (p_rv, i)	= p_value [i];
	}

	Buffer_data_size			= Sts_write_rq_co_size (1, val_size);

	Confirm_ret_code			= (confirm != ON) ? ON : OFF;

	S_msg_nai     	= NAI_NIL;
	S_msg_sapi    	= SAPI_NIL;
	S_msg_add     	= CONN_ID_NIL;
	S_msg_to   		= ENT_STS;
	S_msg_from 		= ENT_SM;

	Send_message (p_snd_msg);
}

#	endif

#endif

/*EOF*/
