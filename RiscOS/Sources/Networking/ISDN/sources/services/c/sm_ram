
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - sm_ram.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *     sm_mem_init         - initialize permanent RAM
 *     sm_mem_read         - read a value in permanent RAM
 *     sm_mem_write        - write a value in permanent RAM
 *     sm_mem_reset        - reset permanent RAM
 *     sm_process_user_msg - process a message received and unexpected by SM
 *
 *   Compilation options :
 *     CONFIG_UPDATE_MANAGEMEMT must be set to ON to compile this module.
 *
 *     Sm_mem_can_be_read (): test is SM memory can be read.
 *         Returns ON or OFF.
 *         If not #defined, is set here to ON.
 *
 *     MEM_FLAG: version id of the structure of the permanent RAM. uchar.
 *         If not #defined, is set here to 0x5A.
 *
 *     SM_RAM_ADDRESS: address of the permanent RAM.
 *         If not #defined, the permanent RAM is simulated, and allocated
 *         dynamically at initialization time (sm_mem_init).
 *
 *     SM_RAM_ALIGNMENT: alignment factor of the permanent RAM.
 *         0: byte alignment, 1: word alignment, 2: double word alignement.
 *         If not defined, is set here to 0.
 *
 *     SM_RAM_INIT_VALUE: permanent RAM initial value. uchar.
 *         If not defined, is set here to 0x00.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    SM Entity (System Management)                    |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"

#ifdef CONFIG_UPDATE_MANAGEMENT

#	if CONFIG_UPDATE_MANAGEMENT == ON

#		ifndef MEM_FLAG
#			define 	MEM_FLAG				0x5A
#		endif

#		ifndef SM_RAM_ALIGNMENT
#			define 	SM_RAM_ALIGNMENT		0
#		endif

#		ifndef SM_RAM_INIT_VALUE
#			define 	SM_RAM_INIT_VALUE		0x00
#		endif

#		ifndef Sm_mem_can_be_read
#			define	Sm_mem_can_be_read()	ON
#		endif

		uchar CONST 	sm_ram_mem_flag	 		= MEM_FLAG;	/* Validity flag, may be patched if necessary */
		uchar CONST		sm_ram_def_profile_id	= 0;		/* Default profile id */
		uchar CONST		sm_ram_alignment 		= (SM_RAM_ALIGNMENT);
		uchar CONST		sm_ram_offset	 		= (1 << (SM_RAM_ALIGNMENT));
		uchar CONST		sm_ram_init_value		= SM_RAM_INIT_VALUE;

		ushort		 	sm_ram_mem_size;

#		ifndef SM_RAM_ADDRESS
			uchar	FAR *p_sm_ram_mem;
#		else

			/* Fixed area, for example in the dual-port memory of a Motorola 68302 */

			uchar	FAR * CONST p_sm_ram_mem  = (uchar FAR *)SM_RAM_ADDRESS;

#		endif

			/* Functions prototypes */

#		if NEW_FCT_STYLE == ON
			void sm_mem_reset (void);
#		else
			void sm_mem_reset ();
#		endif

/*---------------------------------------------------------------------------
 *	Macros for updating permanent RAM:
 *  read/write from/to the RAM according to required physical alignment
 *  ('sm_ram_offset' gives the RAM alignment: every byte, or every 2 bytes,
 *  etc...)
 *--------------------------------------------------------------------------*/

#define	To_ram_cpy_far(to, from, lg)									\
	{ uchar FAR *_to   = (uchar FAR *)(to);								\
	  uchar FAR *_from = (uchar FAR *)(from); ushort _lg = (lg);		\
		while (_lg-- > 0) {												\
			*_to	 =	*_from++;										\
			 _to	+=  sm_ram_offset;									\
		}																\
	}

#define	From_ram_cpy_far(to, from, lg)									\
	{ uchar FAR *_to   = (uchar FAR *)(to);								\
	  uchar FAR *_from = (uchar FAR *)(from); ushort _lg = (lg);		\
		while (_lg-- > 0) {												\
			*_to++	 =	*_from;											\
			 _from	+=  sm_ram_offset;									\
		}																\
	}

#define	Ram_set_far(to, val, lg)										\
	{ uchar FAR *_to = (uchar FAR *)(to);								\
	  uchar _val = (val); ushort _lg = (lg);							\
		while (_lg-- > 0) {												\
			*_to	 =	_val;											\
			 _to	+=  sm_ram_offset;									\
		}																\
	}

/*--------------------------------------------------------------------------*/

void sm_mem_reset ()
{

		/* Reset the SM RAM */

	Ram_set_far ((char FAR *)p_sm_ram_mem, sm_ram_init_value,
				 sm_ram_mem_size);

	p_sm_ram_mem [0]	= sm_ram_mem_flag;
	p_sm_ram_mem [1]	= sm_ram_def_profile_id;

}

/*--------------------------------------------------------------------------*/

uchar sm_mem_init (size)
	ushort	size;		/* memory size */
{

	sm_ram_mem_size = size;

#	ifndef SM_RAM_ADDRESS

		if ((p_sm_ram_mem = Mem_alloc (sm_ram_mem_size, PID_VL)) == P_NIL) {
			return (NOK);
		}

			/* Reset the RAM */

		sm_mem_reset ();

#	endif

	return (OK);

}

/*--------------------------------------------------------------------------*/

uchar sm_mem_read (p_value, p_rel_add, val_size)
	uchar	FAR *p_value;
	ushort		 p_rel_add;
	uchar		 val_size;
{

	if ((!(Sm_mem_can_be_read ())) || (p_sm_ram_mem == P_NIL)) {
		return (NOK);
	}

	if (*p_sm_ram_mem != sm_ram_mem_flag) {

			/*
				The SM RAM descriptor has not been initialized or has been
				modified : reset the RAM.
			*/

		sm_mem_reset ();
	}

	if ((p_rel_add + val_size) <= sm_ram_mem_size) {

		From_ram_cpy_far ((char FAR *)p_value,
						  (char FAR *)(p_sm_ram_mem +
									  (p_rel_add << sm_ram_alignment)),
						  val_size);

	} else {

		Trap (2000, "sm_mem_read/sm_ram");
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar sm_mem_write (p_rel_add, p_value, val_size, wait)
	ushort		 p_rel_add;
	uchar	FAR *p_value;
	uchar		 val_size;
	uchar		 wait;
{

	if (p_sm_ram_mem == P_NIL) {

			/* No memory allocated for the SM RAM */

		return (NOK);
	}

	if (*p_sm_ram_mem != sm_ram_mem_flag) {

			/*
				The SM RAM descriptor has not been initialized or has been
				modified : reset the RAM.
			*/

		sm_mem_reset ();
	}

		/* Write update value in the SM RAM if enough room */

	if ((p_rel_add + val_size) <= sm_ram_mem_size) {

		To_ram_cpy_far ((char FAR *)(p_sm_ram_mem +
									(p_rel_add << sm_ram_alignment)),
						(char FAR *)p_value, val_size);

	} else {

		Trap (2000, "sm_mem_write/sm_ram");
	}

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 			sm_process_user_msg : process a message received and
									  unexpected by SM

Usage : 		void sm_process_user_msg (p_msg)

Return value :	none

Description : 	Free the message

*--------------------------------------------------------------------------*/

void sm_process_user_msg (p_msg)
struct message FAR		*p_msg;
{
	Free_msg (p_msg);
}


/*--------------------------------------------------------------------------*/

#	endif

#endif

/*EOF*/
