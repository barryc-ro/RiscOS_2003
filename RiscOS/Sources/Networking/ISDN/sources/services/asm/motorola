*----------------------------------------------------------------------------*
*                       M O D U L E   H E A D E R
*
* filename - motorola.asm
*
* $Revision$
*
* $Date$
*
*     implements the fast-executing memory-related functions
*     for M68000 CPU family compilers.
*
* function(s)
*
*     fast_memcpy : fast copy of a memory area.
*     fast_memset : fast fill of a memory area.
*
*----------------------------------------------------------------------------*

*[]---------------------------------------------------[]*
*|                                                     |*
*|    OMNITEL-BRICKS Services                          |*
*|                                                     |*
*|    Copyright (c) 1989-1997 by OMNITEL SA            |*
*|    All Rights Reserved.                             |*
*|                                                     |*
*[]---------------------------------------------------[]*

	SECTION   code,,C

	XDEF		fast_memcpy
	XDEF		_fast_memcpy
	XDEF		.fast_memcpy

	XDEF		fast_memset
	XDEF		_fast_memset
	XDEF		.fast_memset

DATA_SIZE_THRESHOLD		EQU		16			* data size under this value will be always executed in byte mode

******************************************************************************
*
* fast_memcpy (to far pointer, from far pointer ,nbytes)
*
* to        far pointer to the destination string
* from      far pointer to the origination string
* nbytes    unsigned short number of bytes to be transfered
*
******************************************************************************

fast_memcpy:
_fast_memcpy:
.fast_memcpy:

	LINK    A6,#0
	MOVEM.L A1/A2/D0-D2,-(A7)				* save registers to be used

*	GET INPUT ARGUMENTS
*	---------------------

	CLR.L	D0
	MOVE.W	18(A6),D0						* get 3th argument	: data size
	BEQ		MEMCPY_END						* if no data to transfer goto MEMCPY_END

	MOVEA.L	8(A6),A1						* get 1st argument	: destination pointer
	MOVEA.L	12(A6),A2						* get 2nd argument	: source pointer

	CMPI.W	#DATA_SIZE_THRESHOLD,D0			* if data size is under DATA_SIZE_THRESHOLD bytes
	BLT		MEMCPY_BYTE						* use byte transfer sub-routine

*	CHECK IF BOTH ADDRESS HAVE SAME PARITY
*	----------------------------------------

	MOVE.W	A1,D1							* get destination address
	MOVE.W	A2,D2							* get source address
	EOR.B	D2,D1							* XOR between source and destination address
	LSR.B	#1,D1							* get result of XOR between address parities
	BCS		MEMCPY_BYTE						* address have different parities : can't move in double word

*	BOTH ADDRESS HAVE SAME PARITY -> EVEN PARITY ALIGNMENT
*	--------------------------------------------------------

	MOVE.L	D0,D1							* duplicate data_size for both double word move and byte move
	LSR.B	#1,D2							* get address parity
	BCC		MEMCPY_LONG						* both address have even parity -> execute double word transfer
	MOVE.B	(A2)+,(A1)+						* copy the first byte from source to destination
	SUBQ.W	#1,D0							* --data_size
	BEQ		MEMCPY_END						* if no more data in byte to transfer goto MEMCPY_END
	SUBQ.W	#1,D1							* --data_size

*	DOUBLE WORDS TRANSFER
*	-----------------------

MEMCPY_LONG
	LSR.L	#2,D1							* data_size / 4 -> D1
	BEQ		MEMCPY_BYTE						* if no data in double word to transfer goto COPY_BYTE
	SUBQ.W	#1,D1							* because the following loop execute data moving before testing

MEMCPY_LONG_REPEAT
	MOVE.L	(A2)+,(A1)+						* copy long data from source to destination
	DBF		D1,MEMCPY_LONG_REPEAT			* long data size

*	BYTES TRANSFER
*	----------------

	ANDI.L	#3,D0							* data_size % 4 -> D1
	BEQ		MEMCPY_END						* if no data in byte to transfer goto MEMCPY_END

MEMCPY_BYTE
	SUBQ.W	#1,D0							* because the following loop execute data moving before testing

MEMCPY_BYTE_REPEAT
	MOVE.B	(A2)+,(A1)+						* copy data in byte from source to destination
	DBF		D0,MEMCPY_BYTE_REPEAT			* data size in byte

MEMCPY_END
	MOVEM.L (A7)+,A1/A2/D0-D2				* restore registers
	UNLK    A6
	RTS

******************************************************************************
*
* fast_memset (to far pointer, char val ,nbytes)
*
* to        far pointer to the destination
* val       value to be set
* nbytes    number of bytes to be transfered
*
******************************************************************************

fast_memset:
_fast_memset:
.fast_memset:

	LINK    A6,#0
	MOVEM.L A0/D1-D4,-(A7)					* save registers to be used

*	GET INPUT ARGUMENTS
*	---------------------

	CLR.L	D3
	MOVE.W	18(A6),D3						* get 3th argument	: data size
	BEQ		MEMSET_END						* if no data to transfer goto MEMSET_END

	MOVEA.L	8(A6),A0						* get 1st argument	: destination pointer
	CLR.L	D2
	MOVE.B	15(A6),D2						* get 2nd  argument	: character to set

	CMPI.W	#DATA_SIZE_THRESHOLD,D3			* if data size is under 32 bytes
	BLT		MEMSET_BYTE						* use byte set sub-routine

*	 EVEN PARITY ALIGNMENT
*	-----------------------

	MOVE.W	A0,D1							* get destination address
	MOVE.L	D3,D4							* duplicate data_size for both double word move and byte move
	LSR.B	#1,D1							* get address parity
	BCC		MEMSET_LONG						* address has even parity -> execute double word transfer
	MOVE.B	D2,(A0)+						* set destination data
	SUBQ.W	#1,D3							* --data_size
	BEQ		MEMSET_END						* if no more data goto MEMSET_END
	SUBQ.W	#1,D4							* --data_size

*	DOUBLE WORDS TRANSFER
*	-----------------------

MEMSET_LONG
	LSR.L	#2,D4							* data_size / 4 -> D4
	BEQ		MEMSET_BYTE						* if no data in double word to transfer goto COPY_BYTE
	SUBQ.W	#1,D4							* because the following loop execute data moving before testing
	MOVE.L	D2,D1							* duplicate setting character

	LSL.L	#8,D1							* shift the character to the left size
	OR.L	D2,D1							* duplicate character to the empty LSByte
	LSL.L	#8,D1							* shift characters to the left size
	OR.L	D2,D1							* duplicate character to the empty LSByte
	LSL.L	#8,D1							* shift the character(s) to the left size
	OR.L	D2,D1							* duplicate character to the empty LSByte

MEMSET_LONG_REPEAT
	MOVE.L	D1,(A0)+						* copy long data from source to destination
	DBF		D4,MEMSET_LONG_REPEAT			* long data size

*	BYTES TRANSFER
*	----------------

	ANDI.L	#3,D3							* data_size % 4 -> D3
	BEQ		MEMSET_END						* if no data in byte to transfer goto MEMSET_END

MEMSET_BYTE
	SUBQ.W	#1,D3							* becuase the following loop execute data moving before testing

MEMSET_BYTE_REPEAT
	MOVE.B	D2,(A0)+						* copy data in byte from source to destination
	DBF		D3,MEMSET_BYTE_REPEAT			* data size in byte

MEMSET_END
	MOVEM.L (A7)+,A0/D1-D4					* restore registers
	UNLK    A6
	RTS

*EOF
