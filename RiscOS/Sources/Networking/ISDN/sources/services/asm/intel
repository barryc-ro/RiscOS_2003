;/*--------------------------------------------------------------------------*
; *                       M O D U L E   H E A D E R
; *
; * filename - intel.asm
; *
; * $Revision$
; *
; * $Date$
; *
; *    implements the fast-executing memory-related functions
; *    for i80x86 CPU family and Borland C, Microsoft C and Intel C compilers.
; *
; * function(s)
; *
; *     fast_memcpy : fast copy of a memory area.
; *     fast_memset : fast fill of a memory area.
; *
; *-------------------------------------------------------------------------*/
;
;/*[]---------------------------------------------------[]*/
;/*|                                                     |*/
;/*|    OMNITEL-BRICKS Services                          |*/
;/*|                                                     |*/
;/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
;/*|    All Rights Reserved.                             |*/
;/*|                                                     |*/
;/*[]---------------------------------------------------[]*/
;

;
;      Start Code segment
;      ==================

_TEXT SEGMENT PUBLIC 'CODE'

assume		cs:_TEXT
assume		ds:nothing


;     Definition of Publics
;     =====================

public     _fast_memcpy
public      fast_memcpy

public	   _fast_memset
public	    fast_memset

;*********************************************************
;                                                        *
; fast_memcpy (to far pointer, from far pointer ,nbytes) *
;                                                        *
; to        far pointer to the destination string        *
; from      far pointer to the origination string        *
; nbytes    number of bytes to be transfered             *
;                                                        *
;*********************************************************


_fast_memcpy proc far
 fast_memcpy proc far
	  push   bp
	  mov    bp,sp
	  push   ds
	  push   es
	  push   di
	  push   si
	  push   ax
	  push   cx

	  mov    si,[bp+10]   ; get offset of origination 	(from)
	  mov    ax,[bp+12]   ; get segment of origination	(from) --> DS
	  mov    ds,ax

	  mov    di,[bp+6]    ; get offset of destination    (to)
	  mov    ax,[bp+8]    ; get segment of destination   (to) --> ES
	  mov    es,ax

	  mov    cx,[bp+14]   ; get number of bytes

	  jcxz   L1

	  cld
	  rep 	 movsb

L1:
	  pop    cx
	  pop	 ax
	  pop    si
	  pop    di
	  pop    es
	  pop    ds
	  mov    sp,bp
	  pop    bp
	  ret
 fast_memcpy endp
_fast_memcpy endp


;*********************************************************
;                                                        *
; fast_memset (to far pointer, char val ,nbytes)         *
;                                                        *
; to        far pointer to the destination               *
; val       value to be set                              *
; nbytes    number of bytes to be transfered             *
;                                                        *
;*********************************************************

_fast_memset proc far
 fast_memset proc far
	  push   bp
	  mov    bp,sp
	  push   es
	  push   di
	  push   ax
	  push   cx

	  mov    di,[bp+6]    ; get offset  of destination   (to)
	  mov    ax,[bp+8]    ; get segment of destination   (to) --> DS
	  mov    es,ax

	  mov    al,[bp+10]   ; get val

	  mov    cx,[bp+12]   ; get number of bytes

	  jcxz   L2

	  cld
	  rep 	 stosb
L2:
	  pop    cx
	  pop    ax
	  pop    di
	  pop    es
	  mov    sp,bp
	  pop    bp
	  ret
 fast_memset endp
_fast_memset endp

_TEXT	ends

end

