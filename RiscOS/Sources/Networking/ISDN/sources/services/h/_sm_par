
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - _sm_par.h
 *
 * $Revision$
 *
 * $Date$
 *
 *		Contains the SM entity parameters.
 *
 *		This file should be renamed as 'sm_par.h'.
 *
 *		This module is a generic module which may be used as
 *		a basis for any application containing the SM entity.
 *
 *		It contains an example for MDL/DL and MNS/NS entities.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    SM Entity (System Management)                    |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1996 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*       Entities' interfaces      */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#include "dl_int.h"
#include "ns_int.h"

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*     Configuration structures    */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#include "config.h"

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*    Configuration update IDs     */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#define UPDATE_TEI_ID		200			/* TEI update ID */

#define UPDATE_NA_COUNTRY	300			/* Network access country */
#define UPDATE_NA_OPERATOR	301			/* Network access operator */

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*    Configuration update lists   */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

	/*
		These tables must be used only if the configuration management has
		to be used.

		There should exist at most one table for each entity listed in the
		configuration table.

		These tables list the configuration updates that are permitted for
		the corresponding entity. Each entry of the table contains the
		update id used to reference a particular update, and the address and
		the size of the field of the configuration structure to be updated.

		One update id may appear more than once in the same table, or in
		several tables, each entry discribing different locations in the
		configuration structures. This allows to update more than one field
		with only one update order. But all the updated fields corresponding
		to only one update id will be set to the same value.

		An example of use of this facility would be to update a field that
		appears in several Network access descriptions (like a TEI value in
		the DL configuration), which should be set to the same value,
		regardless to the NAI.

	*/

struct cfg_update CONST_ARRAY t_dl_cfg_update [] = {

	/* Update ID		update location in the xxx_config_data */

	{UPDATE_TEI_ID,		(uchar FAR *)&dl_config_data.object[0].na.tei[2],
						sizeof (dl_config_data.object[0].na.tei[2])},

	{UPDATE_TEI_ID,		(uchar FAR *)&dl_config_data.object[1].na.tei[2],
						sizeof (dl_config_data.object[1].na.tei[2])},

	{UPDATE_ID_NIL},		/* end of list */
};

struct cfg_update CONST_ARRAY t_ns_cfg_update [] = {

	/* Update ID		update location in the xxx_config_data */

	{UPDATE_NA_COUNTRY, (uchar FAR *)&ns_config_data.i_country,
						sizeof (ns_config_data.i_country)},

	{UPDATE_NA_OPERATOR,(uchar FAR *)&ns_config_data.i_operator_type,
						sizeof (ns_config_data.i_operator_type)},


	{UPDATE_ID_NIL},		/* end of list */
};

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*       Configuration table       */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

	/*
		The 't_config[]' table contains the list of entities that need to
		receive a configuration message when the system gets started.
		The configuration messages are sent by the SM entity to the listed
		entities.
		An entity may appear more than once if more than one configuration
		structure must be sent to it.

		In the following example, the YYY entity does not need to be updated :
		its configuration update list address is set to P_NIL. On the other
		hand, the XXX entity's configuration structure may be modified, so we
		need to give the address of the list of possible updates.
	*/

struct config_descriptor CONST_ARRAY t_config [] = {

	{
		ENT_MDL,							/* entity id */
			(uchar FAR *)&dl_config_data,	/* address of configuration structure */
			sizeof (dl_config_data),		/* size of configuration structure */
			(struct cfg_update FAR *)&t_dl_cfg_update,
											/* address of configuration update list */
			OFF,							/* wait flag */
	},

	{
		ENT_MNS,							/* entity id */
			(uchar FAR *)&ns_config_data,	/* address of configuration structure */
			sizeof (ns_config_data),		/* size of configuration structure */
			(struct cfg_update FAR *)&t_ns_cfg_update,
											/* address of configuration update list */
			OFF,							/* wait flag */
	},

	{ENT_NIL}, 				/* end of table */
};

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*                                    */
			/* Configuration Table access macros  */
			/*                                    */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	/*

		Sm_load_first_p_config_descriptor (p_p_descriptor, p_i)
		-------------------------------------------------------
		Sm_load_next_p_config_descriptor  (p_p_descriptor, p_i)
		-------------------------------------------------------

		These macros are used to access to one element of the configuration
		table (t_config[]).

			struct config_descriptor FAR * FAR *p_p_descriptor :
				current configuration descriptor address (passed by address)

			p_i : current index in the configuration table (passed by address)

	*/

#define Sm_load_first_p_config_descriptor(p_p_descriptor, p_i)	*p_p_descriptor = (struct config_descriptor FAR *)&t_config [0]
#define Sm_load_next_p_config_descriptor(p_p_descriptor, p_i)  	++*p_p_descriptor

#if API_CONFIG_UPDATE_MANAGEMENT == ON /* { */

struct config_descriptor CONST_ARRAY t_config_api [] = {

	/*   entity id	configuration address			configuration size			configuration update list */

	{ENT_MPH,	(uchar *)&ph_config_data,		sizeof (ph_config_data),		&t_ph_cfg_update[0]},
	{ENT_MDL,	(uchar *)&dl_config_data_1,		sizeof (dl_config_data),		&t_dl_cfg_update[0]},
	{ENT_MX25,	(uchar *)&x25_config_data,		sizeof (x25_config_data),		&t_x25_cfg_update[0]},
	{ENT_API,	(uchar *)&ocapi_config_data,	sizeof (struct ocapi_config),	&t_ocapi_cfg_update[0]},

	{ENT_NIL}, 				/* end of table */
};

	/* extended macros for 2 config_descriptor tables access */

#   define Sm_load_first_p_config_descriptor(p_p_descriptor, p_i)	    \
		   *p_p_descriptor = (sm_api_config_update == OFF ?             \
						(struct config_descriptor FAR *)&t_config [0] : \
						(struct config_descriptor FAR *)&t_config_api [0] )

#   define Sm_load_next_p_config_descriptor(p_p_descriptor, p_i)  	++*p_p_descriptor

		/*

			Sm_check_config_rq () :
			-----------------------

			This function is system dependent and is called by SM when
			processing a SM_SET_CONFIG_RQ from API entity.

			It may process configuration structures consistency or
			check hardware consistency.

			WARNING:
			--------

			This function shall return OK or NOK

			Example :
			---------

			#define	Sm_check_config_rq()	sm_check_config_rq()

			Do not #define this macro if nothing have to be processed.

		 */

#endif /* } */

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*   Updates storage description   */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

	/*
		The 'p_mem_param[]' table lists all the existing update ids, giving
		for each of them the maximum size of the related update value,
		including the sizeof a mandatory field used internally by the SM
		configuration update process (PARAM_LENGTH_SIZE).
	*/

struct mem_param_descriptor CONST_ARRAY p_mem_param [] = {

	/* 	Update ID			total parameter maximum size (length + value) */

/*----------------------------------*/
/* DL update parameters description	*/
/*----------------------------------*/
	{	UPDATE_TEI_ID,     		1 + PARAM_LENGTH_SIZE},

/*----------------------------------*/
/* NS update parameters description	*/
/*----------------------------------*/
	{	UPDATE_NA_COUNTRY, 		2 + PARAM_LENGTH_SIZE},
	{	UPDATE_NA_OPERATOR,		1 + PARAM_LENGTH_SIZE},

	{UPDATE_ID_NIL},		/* end of list */
};

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/* Configuration update functions  */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

		/*

			Cfg_move_config_par (update_id, a_update_value, update_value_mx_sz) :
			---------------------------------------------------------------------
			Cfg_move_update_par (update_id, a_update_value, update_value_mx_sz) :
			---------------------------------------------------------------------

			These functions are user dependent and are used by the SM entity
			to transfer an initial value (for Cfg_move_config_par) or an
			updated value (for Cfg_move_update_par) of the configuration
			constant data into the buffer to be sent to the destination entity.

				uint       update_id          : ID of the update value,
				uchar FAR *a_update_value     : address where to store the
												update value,
				ushort     update_value_mx_sz : size of the update value.

		*/

#if CONFIG_UPDATE_MANAGEMENT == ON

#	define	Cfg_move_update_par(update_id, a_update_value, update_value_size) \
			sm_move_update_par (update_id, a_update_value, update_value_size)

#	define	Cfg_move_config_par(update_id, a_update_value, update_value_size) \
			sm_move_config_par (update_id, a_update_value, update_value_size)

#endif

		/*

			Cfg_set_update_par (update_id, a_update_value) :
			------------------------------------------------

			This function is user dependent and is used by an entity
			to save an update value in the safe memory area
			(this area is pointed to by 'p_sm_ram_mem' if SM_RAM.C or
			SM_STS.C is used).

				uint       update_id      : ID of the update value,
				uchar FAR *a_update_value : address of the update value to be
											copied in the safe memory area.

		*/

#if CONFIG_UPDATE_MANAGEMENT == ON

#	define	Cfg_set_update_par(update_id, a_update_value) \
			sm_set_update_par (update_id, a_update_value)

#endif

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*                              */
			/* SM messages processing hooks */
			/*                              */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

		/*
		 *	The following macros can be defined to introduce processing
		 *	hooks into the SM entity:
		 *
		 *	- Sm_hook_before_config (p_msg):
		 *		called by SM when it receives its first message, just before
		 *		starting the configuration cycle.
		 *
		 *	- Sm_hook_after_config (p_msg):
		 *		called by SM when it receives the last configuration
		 *		confirmation message.
		 *
		 *	- Sm_hook_any_msg (p_msg):
		 *		called by SM for each received message after the
		 *		configuration cycle.
		 *
		 *	- Sm_hook_sm_report_in (p_msg):
		 *		called by SM when it receives an SM_REPORT_IN message.
		 *
		 *	- Sm_process_user_msg (p_msg):
		 *		called by SM when it does not recognize a received message.
		 *
		 *	If any macro is undefined, then the related hook is not
		 *	performed.
		 *
		 *	See the detailed descriptions below.
		 */

				/*--------------------------------*/
				/* SM "before configuration" hook */
				/*--------------------------------*/

		/*
		 *
		 *	Sm_hook_before_config (p_msg) :
		 *	-------------------------------
		 *
		 *
		 *	Called by SM when it receives its first message, just
		 *	before starting the configuration cycle.
		 *
		 *	Parameter:
		 *		struct message FAR *p_msg: pointer to the first message
		 *		received by SM.
		 *
		 *	Return code: OK: continue normal processing
		 *				 other: Trap.
		 *
		 *	Example :
		 *
		 *	#define Sm_hook_before_config(p_msg) sm_hook_before_config (p_msg)
		 *
		 */

#if SIMULATION == ON		/* example */

#include "simul.h"

#if NEW_FCT_STYLE == ON
	uchar sm_hook_before_config (struct message FAR *p_msg);
#else
	uchar sm_hook_before_config ();
#endif


uchar sm_hook_before_config (p_msg)
	struct message FAR *p_msg;
{
	fprintf (f_out, "\n-------------SM HOOK: Before Config-------------\n");
	return (OK);
}

#define Sm_hook_before_config(p_msg) sm_hook_before_config (p_msg)

#endif

				/*-------------------------------*/
				/* SM "after configuration" hook */
				/*-------------------------------*/

		/*
		 *
		 *	Sm_hook_after_config (p_msg) :
		 *	------------------------------
		 *
		 *	Called by SM when it receives the last configuration
		 *		confirmation message.
		 *
		 *	Parameter:
		 *		struct message FAR *p_msg: pointer to the last configuration
		 *		confirmation message received by SM.
		 *
		 *	Return code: OK: continue normal processing
		 *				 other: Trap.
		 *
		 *	Example :
		 *
		 *	#define Sm_hook_after_config(p_msg) sm_hook_after_config (p_msg)
		 *
		 */

#if SIMULATION == ON		/* example */

#if NEW_FCT_STYLE == ON
	uchar sm_hook_after_config (struct message FAR *p_msg);
#else
	uchar sm_hook_after_config ();
#endif

uchar sm_hook_after_config (p_msg)
	struct message FAR *p_msg;
{
	fprintf (f_out, "\n-------------SM HOOK: After Config-------------\n");
	return (OK);
}

#define Sm_hook_after_config(p_msg)	sm_hook_after_config (p_msg)

#endif

				/*-----------------------*/
				/* SM "any message" hook */
				/*-----------------------*/

		/*
		 *
		 *	Sm_hook_any_msg (p_msg) :
		 *	-------------------------
		 *
		 *	It is called by SM for each received message after the
		 *		configuration cycle.
		 *
		 *	Parameter:
		 *		struct message FAR *p_msg: pointer to the received message.
		 *
		 *	Return code: STOP or CONTINUE.
		 *		if it returns STOP, then SM does not perform the default
		 *		processing for this message, and exits.
		 *		The message is freed by SM before exiting.
		 *
		 *	Example :
		 *
		 *	#define Sm_hook_any_msg(p_msg)  sm_hook_any_msg (p_msg)
		 *
		 */

#if SIMULATION == ON		/* example */

#if NEW_FCT_STYLE == ON
	uchar sm_hook_any_msg (struct message FAR *p_msg);
#else
	uchar sm_hook_any_msg ();
#endif

uchar sm_hook_any_msg (p_msg)
	struct message FAR *p_msg;
{
	fprintf (f_out, "\n-------------SM HOOK: Any msg-------------\n");
	return (CONTINUE);
}

#define Sm_hook_any_msg(p_msg)	sm_hook_any_msg (p_msg)

#endif

				/*--------------------------------*/
				/* SM "unrecognised message" hook */
				/*--------------------------------*/

		/*
		 *
		 *	Sm_process_user_msg (p_msg) :
		 *	-----------------------------
		 *
		 *	Called by SM when it does not recognize a received message.
		 *
		 *	Parameter:
		 *		struct message FAR *p_msg : pointer to the received message.
		 *
		 *	Return code: void
		 *
		 *	WARNING:
		 *	--------
		 *
		 *	The message MUST be consumed by the macro, i.e. it must be
		 *	freed before exiting (by using the 'Free_msg()' macro).
		 *
		 *	Example :
		 *
		 *	#define Sm_process_user_msg(p_msg)  sm_process_user_msg (p_msg)
		 *
		 */

#if SIMULATION == ON		/* example */

#define Sm_process_user_msg(p_msg)  fprintf (f_out, "\n-------------SM HOOK: Unknown message-------------\n")

#endif

				/*-------------------*/
				/* SM_REPORT_IN hook */
				/*-------------------*/

		/*
		 *
		 *	Sm_hook_sm_report_in (p_msg) :
		 *	------------------------------
		 *
		 *	Called by SM when it receives an SM_REPORT_IN message.
		 *
		 *	Parameter:
		 *		struct message FAR *p_msg : pointer to the received message.
		 *
		 *	Return code: void
		 *
		 *	This hook is called in addition to the "any message" hook
		 *	(Sm_hook_any_msg()).
		 *
		 *	Example :
		 *
		 *	#define Sm_hook_sm_report_in(p_msg) sm_hook_sm_report_in (p_msg)
		 *
		 */

#if SIMULATION == ON		/* example */

#define Sm_hook_sm_report_in(p_msg) fprintf (f_out, "\n-------------SM HOOK: SM_REPORT_IN-------------\n")

#endif

/*--------------------------------------------------------------------------
 *	SM_MAX_NB_TRIGGERS : maximum number of triggers (activated and
 *						 deactivated by SM_SET_REPORT_IN) which can be
 *						 simultaneously active.
 *--------------------------------------------------------------------------*/

#define	SM_MAX_NB_TRIGGERS	1

/*EOF*/
