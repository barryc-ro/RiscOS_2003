
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - sm.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the commmon declarations of the SM functions.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    SM Entity (System Management)                    |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"


		/* SM entity defines */

#if SIMULATION == OFF
#	define	event_id		event_id_sm		/* event identifier */
#	define	ret_code		ret_code_sm		/* return code */
#	define 	p_snd_msg		p_snd_msg_sm	/* pointer on the current message to send if any */
#	define 	p_rcv_msg		p_rcv_msg_sm	/* pointer on the current received message if any */
#	define 	p_buffer		p_buffer_sm		/* pointer on the curent buffer if any */
#	define 	p_buffer_end	p_buffer_end_sm	/* pointers on the end of the current buffer if any */
#	define 	os_err			os_err_sm		/* OS error code */

#endif

#define SM_CONFIG_INIT_FIRST		'F'
#define SM_CONFIG_INIT_CONTINUE		'C'

/*--------------------------------------------------------------------------*/

		/* Update parameter constants */

#define P_REL_ADD_PROFILE		1
#define PROFILE_SIZE			1

#define P_REL_ADD_FIRST_PARAM   P_REL_ADD_PROFILE + PROFILE_SIZE

#define PARAM_LENGTH_SIZE		1				/* Parameter length field size */

/*--------------------------------------------------------------------------*/

		/* Update parameter descriptor */

struct mem_param_descriptor {
	uint	id;					/* update identification */
	uchar	size;				/* maximum number of bytes used for storage */
	uchar	repr;				/* item representation */
};
#define Mem_param_id			p_mem_param_descriptor -> id
#define Mem_param_repr			p_mem_param_descriptor -> repr
#define Mem_param_size			p_mem_param_descriptor -> size

	/* Value representations codes */

#define	MEM_PARAM_BYTE_STRING			 0	/* String of bytes. First byte contains the used number of data bytes (not counting this first byte) */
											/* 'size' contains the maximum total length, including the first byte */
#define	MEM_PARAM_PACKED_DIGIT_STRING	'd'	/* String of packed digits */
											/*	First byte :
											 *	0x00, 0xFF : string is empty. Else, first nibble :
											 *  0x1y..0xCy : number of digits is 0..11.
											 *  0xDy, 0xEy : number of digits is 2*y+first nibble-1. y is 0..E. Value F for y is reserved for future use.
											 *	Digits are stored one by nibble. Digits 0 is represented by 0x0, digit 9 by 0x9. Digits 'a'..'f' and 'A'..'F' are supported, and stored as 0xA..0xF.
											 * 	No terminating '\0' is stored. However, the 'number of digits' stored in the first nibble/byte counts an implied terminating '\0'.
											 *	Short form: max number of digits stored is 12, for a max storage of 7  [1+nb_digits/2]
											 *	Long form : max number of digits stored is 42, for a max storage of 21 [1+nb_digits/2]
											 *	Examples:
											 *	"5" is stored as '25', "67" as '36 7X', "01234567890" as 'C0 12 34 56 78 90',
											 *	"*" is stored as '2A', "*" as '2B',
											 *	"012345678901"  as 'D0 01 23 45 67 89 01',
											 *	"0123456789012" as 'E0 01 23 45 67 89 01 2X'
											 * 	"" as '1X'
											 * 	<no value> as '00' or 'FF'
											 */
#define	Stored_packed_digits_sizeof(nb_digits)		(1 + ((nb_digits) / 2))

#define	MEM_PARAM_INTEGER_0_FD			'c'	/* 	Integer in 0..253. Stored on 1 byte.
											 * 	0x00, 0xFF : no value. 0x01..0xFE represent values 0..253.
											 */
#define	MEM_PARAM_INTEGER_0_FDFF		's'	/* 	Integer in 0..62023. Stored on 2 bytes.
											 * 	1st byte: 0x00, 0xFF : no value.
											 * 	else 0x0100..0xFEFF represent values 0..62023.
											 */
	/* Macros for initializing p_mem_param */

#define	Mem_param_byte_string(update_id, nb_bytes)		{ update_id, nb_bytes + PARAM_LENGTH_SIZE, 		MEM_PARAM_BYTE_STRING		 	}
#define	Mem_param_integer(update_id, type)				{ update_id, sizeof (type) + PARAM_LENGTH_SIZE, MEM_PARAM_BYTE_STRING 			}
#define	Mem_param_digit_string(update_id, nb_digits)	{ update_id, ((nb_digits) / 2) + 1, 			MEM_PARAM_PACKED_DIGIT_STRING 	}
#define	Mem_param_integer_0_FD(update_id)				{ update_id, 1, 								MEM_PARAM_INTEGER_0_FD 			}
#define	Mem_param_integer_0_FDFF(update_id)				{ update_id, 2, 								MEM_PARAM_INTEGER_0_FDFF 		}


#define	Nat_to_int_0_FD(val)			((val) + 1)
#define	Int_0_FD_to_nat(x)				((x) - 1)

#define	Nat_to_int_0_FDFF(val)			((val) + 0x100)
#define	Int_0_FDFF_to_nat(x)			((x) - 0x100)

#define	Sm_nibble_to_asc_digit(nibble)		(((nibble) <= 9) ? ('0' + (nibble)) : ((nibble) == 0x0A) ? ('*') : ((nibble) == 0x0B) ? ('#') : ('A' - 10 + (nibble)))
#define	Sm_asc_digit_to_nibble(asc_digit)	(uchar)((((asc_digit) >= '0') && ((asc_digit) <= '9')) ? ((asc_digit) - '0') : ((asc_digit) == '*') ? 0x0A : ((asc_digit) == '#') ? 0x0B : (((asc_digit) >= 'a') && ((asc_digit) <= 'f')) ? ((asc_digit) - 'a' + 0x0A) : ((asc_digit) - 'A' + 0x0A))

#define	Left_nibble(byte)				(((byte) >> 4) & 0x0F)
#define	Right_nibble(byte)				((byte) & 0x0F)
#define	Byte_from_nibbles(left, right)	((uchar)(((left) << 4) | ((right) & 0x0F)))

/*--------------------------------------------------------------------------*/

				/* Include the configuration */
#include "sm_par.h"

/*--------------------------------------------------------------------------*/

		/* Local function prototypes */

#if NEW_FCT_STYLE == ON
	uchar	sm_init 						(uchar code);
	uchar	sm_init_send 					(uchar to, uchar FAR *p_config, ushort size, struct cfg_update FAR *p_cfg_update);
	uchar	sm_entity_in_cfg_descriptor		(ent_id_t entity);
	void	sm_send_info					(void);
	uchar	sm_send_config_confirm			(void);
	void	sm_get_info						(uchar FAR *);
	void	sm_resource_congestion 			(code_t primitive_code);
	void	sm_retransmit					(code_t code, ent_id_t to);
	void 	sm_copy_received_msg_and_send 	(code_t code, ent_id_t to);
	void 	sm_config_update 				(uchar FAR *p_config, struct cfg_update FAR *p_cfg_update);
	uchar	sm_trf_cfg_update_value 		(uchar FAR *p_data, uchar FAR *p_end_data);

	uchar 	sm_init_update_par 				(void);
	uchar	sm_set_update_par 				(ushort update_id, uchar FAR *p_update);
	uchar 	sm_move_update_par 				(ushort update_id, uchar FAR *p_update, 	ushort max_size);
	uchar 	sm_move_config_par 				(ushort update_id, uchar FAR *p_update, 	ushort max_size);

	uchar 	sm_mem_init 					(ushort mem_size);
	uchar 	sm_mem_read 					(uchar	FAR *p_value, 	ushort p_rel_add, 		uchar val_size);
	uchar 	sm_mem_write 					(ushort p_rel_add, 		uchar	FAR *p_value, 	uchar val_size, uchar wait);

#else

	uchar	sm_init 						();
	uchar	sm_init_send 					();
	uchar	sm_entity_in_cfg_descriptor		();
	void	sm_send_info					();
	uchar	sm_send_config_confirm			();
	void	sm_get_info						();
	void	sm_resource_congestion			();
	void	sm_retransmit					();
	void 	sm_copy_received_msg_and_send 	();
	void 	sm_config_update 				();
	uchar	sm_trf_cfg_update_value 		();

	uchar 	sm_init_update_par 				();
	uchar	sm_set_update_par 				();
	uchar 	sm_move_update_par 				();
	uchar 	sm_move_config_par 				();

	uchar 	sm_mem_init 					();
	uchar 	sm_mem_read 					();
	uchar 	sm_mem_write 					();

#endif

/*--------------------------------------------------------------------------*/

/*EOF*/
