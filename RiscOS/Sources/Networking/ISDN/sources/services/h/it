
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - it.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the common declarations for communication between interrupt
 * and non-interrupt routines.
 *
 *		It_put_msg		- put a message in stack (non-interrupt routine)
 *		It_get_msg		- get a message from stack (interrupt routine)
 *
 *		It_put_buffer	- put a buffer in stack (non-interrupt routine)
 *		It_get_buffer	- get a buffer from stack (interrupt routine)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS Services                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef IT_
#define IT_

#include "it_par.h"						/* options and parameters */

					/* External global variable */

extern	uchar	VOLATILE	it_stack_msg_cong_flag;	 		/* IT stack message congestion flag */
extern	uchar	VOLATILE	it_stack_buffer_cong_flag;		/* IT stack Buffer congestion flag */

extern	ushort	VOLATILE	it_stack_msg_cong_nb;	 		/* IT stack message congestion counter */
extern	ushort	VOLATILE	it_stack_buffer_cong_nb;		/* IT stack Buffer congestion counter */

extern	ushort				it_stack_msg_cong_high_mark;	/* IT stack CPU congestion high mark */
extern	ushort				it_stack_msg_cong_low_mark;		/* IT stack CPU congestion low mark */
extern	ushort	VOLATILE	it_stack_msg_nb; 				/* current number of message in the stack */

extern	ushort				it_stack_buffer_cong_high_mark;	/* IT stack CPU congestion high mark */
extern	ushort				it_stack_buffer_cong_low_mark;	/* IT stack CPU congestion low mark */
extern	ushort	VOLATILE	it_stack_buffer_nb;	 			/* current number of buffer in the stack */

extern	ushort				it_stack_msg_low_mark;			/* empty message stack low mark */
extern	ushort				it_stack_msg_middle_mark;		/* empty message stack middle mark */
extern	ushort				it_stack_msg_high_mark;			/* empty message highn mark */

extern	ushort				it_stack_buffer_low_mark;		/* empty buffer stack low mark */
extern	ushort				it_stack_buffer_middle_mark;	/* empty buffer stack middle mark */
extern	ushort				it_stack_buffer_high_mark;		/* empty buffer stack high mark */


extern	struct message FAR * VOLATILE p_it_stack_msg;
extern	struct buffer  FAR * VOLATILE p_it_stack_buffer;

		/* Init structure */

struct it_init {
	ushort			stack_msg_low_mark;					/* empty message stack low mark */
	ushort			stack_msg_middle_mark;				/* empty message stack middle mark */
	ushort			stack_msg_high_mark;				/* empty message highn mark */

	ushort			stack_buffer_low_mark;				/* empty buffer stack low mark */
	ushort			stack_buffer_middle_mark;			/* empty buffer stack middle mark */
	ushort			stack_buffer_high_mark;				/* empty buffer stack high mark */

	ushort			stack_congestion_msg_low_mark;		/* message congestion stack low mark */
	ushort			stack_congestion_msg_high_mark;		/* message congestion stack high mark */

	ushort			stack_congestion_buffer_low_mark;	/* buffer congestion stack low mark */
	ushort			stack_congestion_buffer_high_mark;	/* buffer congestion stack high mark */
};

#define	It_init_stack_msg_low_mark			((struct it_init FAR *)p_it_init) -> stack_msg_low_mark
#define	It_init_stack_msg_middle_mark		((struct it_init FAR *)p_it_init) -> stack_msg_middle_mark
#define	It_init_stack_msg_high_mark			((struct it_init FAR *)p_it_init) -> stack_msg_high_mark

#define	It_init_stack_buffer_low_mark		((struct it_init FAR *)p_it_init) -> stack_buffer_low_mark
#define	It_init_stack_buffer_middle_mark	((struct it_init FAR *)p_it_init) -> stack_buffer_middle_mark
#define	It_init_stack_buffer_high_mark		((struct it_init FAR *)p_it_init) -> stack_buffer_high_mark

#define	It_init_stack_cong_msg_high_mark 	((struct it_init FAR *)p_it_init) -> stack_congestion_msg_high_mark
#define	It_init_stack_cong_msg_low_mark		((struct it_init FAR *)p_it_init) -> stack_congestion_msg_low_mark

#define	It_init_stack_cong_buffer_high_mark	((struct it_init FAR *)p_it_init) -> stack_congestion_buffer_high_mark
#define	It_init_stack_cong_buffer_low_mark	((struct it_init FAR *)p_it_init) -> stack_congestion_buffer_low_mark

/*-------------------------------------------------------------------------*/

				/* Macros to access message and buffer stacks */

				/* IT initialization procedure */

#define It_init(p_it_init) \
	it_init (p_it_init)

				/* IT stacks management : messages and buffers */


#define It_stack_mgt() 		\
	It_stack_msg_mgt (); 	\
	It_stack_buffer_mgt ()

				/* IT messages management */

#define It_stack_msg_mgt() \
	it_stack_msg_mgt ()

				/* IT buffers management */

#define It_stack_buffer_mgt() \
	it_stack_buffer_mgt ()

				/* Put a message in the IT stack */

#define	It_put_msg(p_msg)																						\
	It_disable ();																								\
	Lifo_put_msg (p_it_stack_msg, p_msg);																		\
	It_stack_test_and_reset_congestion (it_stack_msg_nb, it_stack_msg_cong_high_mark, it_stack_msg_cong_flag);	\
	It_enable ()

				/* Get a message from the IT stack */

#define It_get_msg(p_msg) 																						\
	It_disable ();																								\
	Lifo_get_msg (p_it_stack_msg, p_msg);																		\
	if (p_msg != P_NIL) {																						\
		It_stack_test_and_set_congestion (it_stack_msg_nb, it_stack_msg_cong_low_mark, it_stack_msg_cong_flag, it_stack_msg_cong_nb);	\
	}																											\
	It_enable ()

				/* Put a buffer in the IT stack */

#define	It_put_buffer(p_buffer)																							\
	It_disable ();																										\
	Lifo_put_buffer (p_it_stack_buffer, p_buffer);																		\
	It_stack_test_and_reset_congestion (it_stack_buffer_nb, it_stack_buffer_cong_high_mark, it_stack_buffer_cong_flag);	\
	It_enable ()

				/* Get a buffer from the IT stack */

#define It_get_buffer(p_buffer) 																						\
	It_disable ();																										\
	Lifo_get_buffer (p_it_stack_buffer, p_buffer);																		\
	if (p_buffer != P_NIL) {																							\
		It_stack_test_and_set_congestion (it_stack_buffer_nb, it_stack_buffer_cong_low_mark, it_stack_buffer_cong_flag, it_stack_buffer_cong_nb);\
	}																													\
	It_enable ()

				/* Free buffer using the link count */

#define It_free_buffer(p_buffer) 												\
	It_disable (); 																\
	if ((p_buffer -> link_count == 0) || (--(p_buffer -> link_count) == 0)) { 	\
		It_enable (); 															\
		It_put_buffer (p_buffer); 												\
	} else { 																	\
		It_enable (); 															\
	}

				/* Test between low and high marks (message and buffer) */

#define It_stack_in_mark() 										\
		(it_stack_msg_nb 	> it_stack_msg_low_mark)		&& 	\
		(it_stack_msg_nb 	< it_stack_msg_high_mark)		&& 	\
		(it_stack_buffer_nb > it_stack_buffer_low_mark) 	&& 	\
		(it_stack_buffer_nb	< it_stack_buffer_high_mark)

				/* Message Stack too LOW : under the low mark */

#define It_stack_msg_too_low() 		(it_stack_msg_nb < it_stack_msg_low_mark)

				/* Buffer stack too low : under the low mark */

#define It_stack_buffer_too_low() 	(it_stack_buffer_nb < it_stack_buffer_low_mark)

				/* Check transmit FIFO consistancy */

#define It_xmt_check(counter, p_first, p_last, trap_code, location) { 	\
			struct message FAR *p_check_next  = p_first; 				\
			struct message FAR *p_check_prior = P_NIL; 					\
			counter = 0; 												\
			while (p_check_next != P_NIL) { 							\
				counter++;												\
				p_check_prior 	= p_check_next; 						\
				p_check_next 	= X_msg_p_services (p_check_next); 		\
			} 															\
			if (p_check_prior != p_last) { 								\
				Trap (trap_code, location);								\
			} 															\
		}

/*-------------------------------------------------------------------------*/

				/*
					Increment the block counter and
					check to the threshold. If ON
					call the reset congestion procedure.
				*/

#define It_stack_test_and_reset_congestion(it_stack_nb,it_stack_cong_high_mark,it_stack_cong_flag) 	\
	it_stack_nb++;																					\
	if ((it_stack_cong_flag == ON) && (it_stack_nb == it_stack_cong_high_mark)) {					\
		it_stack_cong_flag = OFF;																	\
		test_and_reset_congestion (ON);																\
	}

				/*
					Decrement the block counter and
					check to the threshold. If ON
					call the set congestion procedure.
				*/

#define It_stack_test_and_set_congestion(it_stack_nb,it_stack_cong_low_mark,it_stack_cong_flag,counter) \
	it_stack_nb--;																						\
	if ((it_stack_cong_flag == OFF) && (it_stack_nb == it_stack_cong_low_mark)) {						\
		it_stack_cong_flag = ON;																		\
		counter++;																						\
		test_and_set_congestion (ON);																	\
	}

/*-------------------------------------------------------------------------*/

							/* Trap codes */

#define TRAP_IT_STACK_MSG_OVERFLOW		90
#define TRAP_IT_STACK_MSG_EMPTY			91

#define TRAP_IT_STACK_BUFFER_OVERFLOW	92
#define TRAP_IT_STACK_BUFFER_EMPTY		93

#define TRAP_IT_DISABLE					94
#define TRAP_IT_ENABLE					95

/*-------------------------------------------------------------------------*/

					/* INTERRUPT MANAGEMENT */

	/* Interrupt Controller chips defines */

#define ITC_8259		1		/* Intel 8259 it controller chip */
#define ITC_80186		2		/* Intel 80186/80188 integrated it controller */
#define ITC_68302		3		/* Motorola 68302 it controller */
#define ITC_68901		4		/* Motorola 68901 it controller */
#define ITC_MVP			5		/* TMS320 MVP processor it controller */
#define ITC_68360		6		/* Motorola 68360 CPIC it controller */
#define ITC_68307		7		/* Motorola 68307 it controller */
#define ITC_8259_SLAVE	8		/* Intel 8259 it controller chip - SLAVE mode */
#define ITC_IOC			9		/* ACORN IOC controller chip */
#define ITC_PRIVATE		255 	/* Other It controller */

/*---------------------------------------------------------*/

	/* Compiler-specific header files and macros for interrupt management */

#if C_COMPILER == TC
#	include <dos.h>
#endif

#if C_COMPILER == MSC
#	include <dos.h>
#	include <conio.h>
#endif

#if C_COMPILER == IC86
#	include <i86.h>
#	define inp(port)			inbyte(port)
#	define inpw(port)			inword(port)
#	define outp(port,value)		outbyte(port,value)
#	define outpw(port,value)	outword(port,value)
#endif

#if C_COMPILER == HIGHC
#   ifndef inp
#	define inp(port)			_inb(port)
#   endif
#   ifndef inpw
#	define inpw(port)			_inw(port)
#   endif
#   ifndef outp
#	define outp(port,value)		_outb(port,value)
#   endif
#   ifndef outpw
#	define outpw(port,value)	_outw(port,value)
#   endif
#endif

/*---------------------------------------------------------*/

	/* Interrupt management according to the Interrupt Controller */

#ifdef IT_CONTROLLER

			/*------------ i8259 it controller ---------------*/

#	if (IT_CONTROLLER == ITC_8259) || (IT_CONTROLLER == ITC_8259_SLAVE)

				/* IT controller 8259 for IBM-PC/AT */

		typedef	unsigned char	it_mask_t;

#		define	IRQ_MASK_8259(it_mask)		(1 << it_mask)						/* IRQ disabling mask  */
#		define	EOI_MASK_8259(it_mask)		(G_8(0,1,1,0,0,0,0,0) | it_mask) 	/* IRQ End of Interrupt mask */

					/* Master 8259 registers addresses */

#		define	FIRST_INT_8259				(0x08)								/* Master 8259 first INT nb */
#		define	OCW1_ADD_8259				(0x21)								/* Operation cmd word 1 */
#		define	OCW2_ADD_8259				(0x20)								/* Operation cmd word 2 */

					/* Slave 8259 registers addresses */

#		define	FIRST_INT_8259_SLAVE		(0x70)								/* Slave 8259 first INT nb */
#		define	OCW1_ADD_8259_SLAVE			(0xA1)								/* Operation cmd word 1 */
#		define	OCW2_ADD_8259_SLAVE			(0xA0)								/* Operation cmd word 2 */

#	endif

			/*------------ i8259 it controller ---------------*/

#	if IT_CONTROLLER == ITC_8259

			/* These macros mask an interrupt level via the 8259 interrupt controller */

#		define It_mask(mask_level, old_value) 											\
			old_value = (it_mask_t) inp (OCW1_ADD_8259); 								\
			outp (OCW1_ADD_8259, (old_value | (1 << mask_level)))

#		define It_unmask(mask_level) 													\
			{ 																			\
				unsigned char tmp_result; 												\
				tmp_result = (it_mask_t) inp (OCW1_ADD_8259);							\
				outp (OCW1_ADD_8259, (tmp_result & ~(1 << mask_level))); 				\
			}

#		define It_ldmask(old_value) 													\
			outp (OCW1_ADD_8259, old_value)

#	endif

			/*------------ i8259 Slave it controller ---------------*/

#	if IT_CONTROLLER == ITC_8259_SLAVE

			/* These macros mask an interrupt level via the 8259 interrupt controller */

#		define It_mask(mask_level, old_value) 											\
			old_value = (it_mask_t) inp (OCW1_ADD_8259_SLAVE);							\
			outp (OCW1_ADD_8259_SLAVE, (old_value | (1 << mask_level)))

#		define It_unmask(mask_level) 													\
			{ 																			\
				unsigned char tmp_result; 												\
				tmp_result = (it_mask_t) inp (OCW1_ADD_8259_SLAVE);						\
				outp (OCW1_ADD_8259_SLAVE, (tmp_result & ~(1 << mask_level))); 			\
			}

#		define It_ldmask(old_value) 													\
			outp (OCW1_ADD_8259_SLAVE, old_value)

#	endif

			/*------------ i80186/80188 it controller ---------------*/

#	if IT_CONTROLLER == ITC_80186

		typedef	unsigned short	it_mask_t;

			/*
				These macros mask an interrupt level via the interrupt controller
				using the Mask Register (address 28h).
			*/

#		define It_mask(mask_level, old_value) 											\
			old_value = (it_mask_t) inpw (ITC_BASE_ADD + 0x28); 						\
			outpw(ITC_BASE_ADD + 0x28, (it_mask_t) (old_value | (1 << mask_level)))

#		define It_unmask(mask_level) 													\
			{																			\
				unsigned short tmp_result;												\
				tmp_result = (it_mask_t) inpw (ITC_BASE_ADD + 0x28); 					\
				outpw (ITC_BASE_ADD + 0x28, (it_mask_t) (tmp_result & ~(1 << mask_level)));\
			}

#		define It_ldmask(old_value) outpw (ITC_BASE_ADD + 0x28,(it_mask_t) old_value)

#	endif

			/*------------ MC68302 it controller ---------------*/

#	if IT_CONTROLLER == ITC_68302

#	  if 0

		typedef		unsigned short		it_mask_t;
		extern    	it_mask_t VOLATILE	it_mask_all_flag;

#		define It_mask(mask_level, old_mask) 	It_disable (); 							\
												old_mask 			= it_mask_all_flag; \
												it_mask_all_flag 	= 0xffff

#		define It_unmask(mask_level)			it_mask_all_flag 	= 0; 				\
												It_enable ()

#		define It_ldmask(old_mask) 				if (old_mask == 0) { 					\
													it_mask_all_flag = 0; 				\
													It_enable (); 						\
												}
#	  else

		typedef		unsigned short		it_mask_t;			/* IT mask typdef 	*/
		extern    	unsigned short 		*a_imr_cpu_68302;	/* IMR address 		*/
		extern    	it_mask_t VOLATILE	it_mask_all_flag;	/* current mask 	*/

#		define It_mask(mask_it, old_mask) 	It_disable (); 											\
											if (mask_it != 0) {										\
												old_mask 			= (*a_imr_cpu_68302) | 1;		\
												*a_imr_cpu_68302	= (old_mask & ~(mask_it)); 		\
												It_enable ();										\
											} else {												\
												old_mask 			= it_mask_all_flag; 			\
												it_mask_all_flag 	= (it_mask_t)(~0);				\
											}


#		define It_unmask(mask_it)           if (mask_it != 0) {										\
												It_disable (); 										\
												*a_imr_cpu_68302 |= (it_mask_t)(mask_it);			\
											} else {												\
												it_mask_all_flag = 0; 								\
											}                                               		\
											It_enable ()

#		define It_ldmask(old_mask_it)       if (old_mask_it == 0) {									\
												it_mask_all_flag = 0; 								\
												It_enable (); 										\
											} else if (old_mask_it != (it_mask_t)(~0)) {  			\
												It_disable (); 										\
												*a_imr_cpu_68302 = old_mask_it & (it_mask_t)(~1);	\
												It_enable ();										\
											}
#	  endif

#	endif

			/*------------ MC68360 IT controller ---------------*/

#	if IT_CONTROLLER == ITC_68360

		typedef		unsigned long		 it_mask_t;			/* IT mask typdef 	*/
		extern    	unsigned long 		*a_cimr_cpu_68360;	/* CIMR address 	*/

		extern    	it_mask_t VOLATILE	 it_mask_all_flag;	/* current mask 	*/

#		define It_mask(mask_it, old_mask) 	It_disable (); 											\
											if (mask_it != 0) {										\
												old_mask 			= (*a_cimr_cpu_68360) | 1;		\
												*a_cimr_cpu_68360	= (old_mask & ~(mask_it)); 		\
												It_enable ();										\
											} else {												\
												old_mask 			= it_mask_all_flag; 			\
												it_mask_all_flag 	= (it_mask_t)(~0);				\
											}


#		define It_unmask(mask_it)           if (mask_it != 0) {										\
												It_disable (); 										\
												*a_cimr_cpu_68360 |= (it_mask_t)(mask_it);			\
											} else {												\
												it_mask_all_flag = 0; 								\
											}                                               		\
											It_enable ()

#		define It_ldmask(old_mask_it)       if (old_mask_it == 0) {									\
												it_mask_all_flag = 0; 								\
												It_enable (); 										\
											} else if (old_mask_it != (it_mask_t)(~0)) {  			\
												It_disable (); 										\
												*a_cimr_cpu_68360 = old_mask_it & (it_mask_t)(~1);	\
												It_enable ();										\
											}
#	endif

			/*------------ MC68901 it controller ---------------*/

#	if IT_CONTROLLER == ITC_68901

#		ifndef ITC_REG_OFFSET
#			define ITC_REG_OFFSET	1
#		endif

		typedef		unsigned char it_mask_t;

#		define It_mask(mask_level, old_value) 											\
			old_value = (it_mask_t) inp (ITC_BASE_ADD + ITC_REG_OFFSET*0x15); 							\
			outp (ITC_BASE_ADD + ITC_REG_OFFSET*0x15, (it_mask_t) (old_value & ~(1 << mask_level)))

#		define It_unmask(mask_level) 													\
			{ 																			\
				it_mask_t tmp_result; 													\
				tmp_result = (it_mask_t) inp (ITC_BASE_ADD + ITC_REG_OFFSET*0x15); 					\
				outp (ITC_BASE_ADD + ITC_REG_OFFSET*0x15, (it_mask_t) (tmp_result | (1 << mask_level))); \
			}

#		define It_ldmask(old_value) outp (ITC_BASE_ADD + ITC_REG_OFFSET*0x15, (it_mask_t) old_value)

#	endif

			/*---------- TMS320 MVP it controller ------------*/

#	if IT_CONTROLLER == ITC_MVP

		typedef	unsigned long		it_mask_t;

#		define It_mask(mask, old_mask) 	IE = (old_mask = It_disable ()) & ~(mask)

#		define It_unmask(mask)		IE = It_disable () | (mask)

#		define It_ldmask(old_mask)	It_disable (); IE = old_mask

#	endif	/* ITC_MVP */

			/*------------ MC68307 IT controller ---------------*/

#	if IT_CONTROLLER == ITC_68307

		typedef		unsigned short		it_mask_t;			/* IT mask typdef 	*/
		extern    	unsigned short		*a_pbcnt_cpu_68307;	/* PBCNT address 		*/
		extern    	it_mask_t VOLATILE	it_mask_all_flag;	/* current mask 	*/

#		define It_mask(mask_it, old_mask) 	It_disable (); 											\
											if (mask_it != 0) {										\
												old_mask 			= (*a_pbcnt_cpu_68307);		\
												*a_pbcnt_cpu_68307	&= (old_mask & ~(mask_it)); 		\
												It_enable ();										\
											} else {												\
												old_mask 			= it_mask_all_flag; 			\
												it_mask_all_flag 	= (it_mask_t)(~0);				\
											}


#		define It_unmask(mask_it)           if (mask_it != 0) {										\
												It_disable (); 										\
												*a_pbcnt_cpu_68307 |= (it_mask_t)(mask_it);			\
											} else {												\
												it_mask_all_flag = 0; 								\
											}                                               		\
											It_enable ()

#		define It_ldmask(old_mask_it)       if (old_mask_it == 0) {									\
												it_mask_all_flag = 0; 								\
												It_enable (); 										\
											} else if (old_mask_it != (it_mask_t)(~0)) {  			\
												It_disable (); 										\
												*a_pbcnt_cpu_68307 |= old_mask_it;	\
												It_enable ();										\
											}
#	endif

			/*------------ ACORN IOC it controller ---------------*/

#	if IT_CONTROLLER == ITC_IOC

		typedef	unsigned char	it_mask_t;

			/*
				These macros mask an interrupt level via the interrupt controller
			*/

#		define It_mask(mask_level, old_value) 	    old_value = (it_mask_t) isdn_card_cr_val;	\
    	    	    	    	    	    	    	    Isdn_card_it_disable()
#		define It_unmask(mask)		            Isdn_card_it_enable()
#		define It_ldmask(old_mask)	            isdn_card_cr_val = (it_mask_t) old_mask;	\
    	    	    	    	    	    	    	    Isdn_card_cr_write (isdn_card_cr_val)

#   	endif

			/*------------ Other it controller ---------------*/
			/*------------  User defined set   ---------------*/

#	if IT_CONTROLLER == ITC_PRIVATE

		typedef		unsigned short		it_mask_t;
		extern    	it_mask_t VOLATILE	it_mask_all_flag;

#		define It_mask(mask_level, old_mask) 	It_disable (); 							\
												old_mask = it_mask_all_flag; 			\
												it_mask_all_flag = ON

#		define It_unmask(mask_level)			it_mask_all_flag = OFF; 				\
												It_enable ()

#		define It_ldmask(old_mask) 				if (old_mask == OFF) { 					\
													it_mask_all_flag = OFF; 			\
													It_enable (); 						\
												}
#	endif /* IT_CONTROLLER */

#else
	typedef			unsigned short		it_mask_t;
	extern 	   		it_mask_t VOLATILE	it_mask_all_flag;
#endif

/*-------------------------------------------------------------------------*/

					/* Function declarations */

#if NEW_FCT_STYLE == ON
	uchar 				it_init 			(struct it_init FAR *);
	void 				it_stack_msg_mgt	(void);
	void 				it_stack_buffer_mgt	(void);

	void				it_var_init			(void);

	void				it_disable_68		(void);
	void				it_enable_68		(void);

#else
	uchar 				it_init 			();
	void 				it_stack_msg_mgt	();
	void 				it_stack_buffer_mgt	();

	void				it_var_init			();

	void				it_disable_68		();
	void				it_enable_68		();

#endif

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
