
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dte_ppp.h
 *
 * $Revision$
 *
 * $Date$
 *
 *		Declarations for asynchronous PPP processing
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    TR29-PACK                                        |*/
/*|    DTE_INT Entity                                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef	_DTE_PPP
#define _DTE_PPP

/*---------------------------------------------------------------------------
 *			Frame parsing error codes
 *-------------------------------------------------------------------------*/
#define	DTE_PPP_ERR_NO_CONTEXT			'!'	/* dec,enc: invalid context address */
#define	DTE_PPP_ERR_INV_STATE			's'	/* dec,enc: invalid state */
#define	DTE_PPP_ERR_STOPPED				'S'	/* dec,enc: encoder/decoder is stopped */
#define	DTE_PPP_ERR_FRAME_TOO_SHORT		'-'	/* dec    : frame too short */
#define	DTE_PPP_ERR_FRAME_TOO_LONG		'+'	/* dec    : frame too long */
#define	DTE_PPP_ERR_FCS_ERROR			'F'	/* dec    : FCS error */
#define	DTE_PPP_ERR_FRAME_ABORTED		'A'	/* dec    : frame aborted */
#define	DTE_PPP_ERR_NULL_INPUT			'i'	/*     enc: null input supplied */
#define	DTE_PPP_ERR_INTERNAL			'?'	/*     enc: internal error */

/*---------------------------------------------------------------------------
 *			PPP link description
 *-------------------------------------------------------------------------*/
#define	P3_NB_BITS_IN_ACCM_FROM		32
#define	P3_NB_BYTES_IN_ACCM_FROM	((P3_NB_BITS_IN_ACCM_FROM + 7) / 8)

#define	P3_NB_BITS_IN_ACCM_TO		256			/* this value MUST be at least 127. It may be necessary to map 0x7d and 0x7E */
#define	P3_NB_BYTES_IN_ACCM_TO		((P3_NB_BITS_IN_ACCM_TO + 7) / 8)

#if	P3_NB_BITS_IN_ACCM_TO < 128
#	undef	P3_NB_BITS_IN_ACCM_TO
#	define	P3_NB_BITS_IN_ACCM_TO		128
#endif

struct ppp_link {				/* description of a PPP link */

	struct ppp_link FAR		*p_relayed;		/* address of the other, relayed link */

	struct {								/* configuration parameters */
		uchar	sdu_format;						/* SDU format */
#				define	P3_SDU_ASYN_OCTET	'a'		/* asynchronous format : SDU is presented in several blocks. Asynchronous link */
#				define	P3_SDU_SYNC_OCTET	'o'		/* synchronous format, octet-oriented : SDU is presented in one block. Synchronous link */
#				define	P3_SDU_SYNC_BIT		'b'		/* synchronous format, bit-oriented : SDU is presented in one block. Synchronous link */
	}	cfg;

	struct {					/* default PPP parameters */
		short	mru_loc;			/* MRU size, for all data (LOCAL constraints : buffer size, etc.) */

		short	mru_from;			/* MRU size, for data we receive FROM the remote */
		uchar	accm_from			/* default ACCM, representing processing on data received FROM the remote */
					[P3_NB_BYTES_IN_ACCM_FROM];

		short	mru_to;				/* MRU size, for data we send TO the remote */
		uchar	accm_to				/* default ACCM, representing processing on data to send TO the remote */
				  [P3_NB_BYTES_IN_ACCM_TO];
	}	def_ppp;

	struct {					/* current PPP parameters */
		short	mru_loc;			/* MRU size, for all data (LOCAL constraints : buffer size, etc.) */

		short	mru_from;			/* MRU size, for data we receive FROM the remote */
		uchar	accm_from			/* current ACCM, representing processing on data received FROM the remote */
					[P3_NB_BYTES_IN_ACCM_FROM];

		uchar	hole_size_to;		/* size of the hole in buffers to send to the remote */
		short	mru_to;				/* MRU size, for data we send TO the remote */
		short	sum_accm_to;		/* sum of all bytes in ACCM 'to' */
		uchar	accm_to				/* current ACCM, representing processing on data to send TO the remote */
					[P3_NB_BYTES_IN_ACCM_TO];
	}	cur_ppp;

};	/* end struct ppp_link */

#define		P_link						(p_ppp_link)
#define		Link_p_relayed				(P_link -> p_relayed)
#define		Link_cfg_sdu_format			(P_link -> cfg . sdu_format)

#define		Link_def_mru_loc			(P_link -> def_ppp . mru_loc)
#define		Link_def_accm_from			(P_link -> def_ppp . accm_from)
#define		Link_def_mru_from			(P_link -> def_ppp . mru_from)
#define		Link_def_accm_to			(P_link -> def_ppp . accm_to)
#define		Link_def_mru_to				(P_link -> def_ppp . mru_to)

#define		Link_cur_mru_loc			(P_link -> cur_ppp . mru_loc)
#define		Link_cur_accm_from			(P_link -> cur_ppp . accm_from)
#define		Link_cur_mru_from			(P_link -> cur_ppp . mru_from)
#define		Link_cur_sum_accm_to		(P_link -> cur_ppp . sum_accm_to)
#define		Link_cur_accm_to			(P_link -> cur_ppp . accm_to)
#define		Link_cur_mru_to				(P_link -> cur_ppp . mru_to)
#define		Link_cur_hole_size_to		(P_link -> cur_ppp . hole_size_to)

/*
 *	NOTE:
 *		In the following macros, the character 'c' is masked with 0xFF.
 *	  	Although normally unnecessary, this masking is necessary for
 *	  	getting the code to do what is is supposed to,
 *	  	working around the deficiencies of some compilers (e.g. Microtec 4.1).
 */
#define		Is_in_accm_from(c)			((((c) & 0xFF) <= (P3_NB_BITS_IN_ACCM_FROM-1)) && ((Link_cur_accm_from [((c) & 0xFF) / 8] & ppp_accm_bit_tab [((c) & 0xFF) % 8]) != 0))
#define		Copy_in_accm_from(src)		Memcpy_far ((char FAR *)Link_cur_accm_from, (char FAR *)(src), LCP_CO_SIZE_ACCM)

#define		_Accm_to_sum()				{ uchar _i; Link_cur_sum_accm_to = 0; for (_i = 0; _i < P3_NB_BYTES_IN_ACCM_TO; ++_i) { Link_cur_sum_accm_to += Link_cur_accm_to [_i]; } }
#define		Set_in_accm_to(c)			if (((c) & 0xFF) <= (P3_NB_BITS_IN_ACCM_TO-1)) { Link_cur_accm_to [((c) & 0xFF) / 8] |=  ppp_accm_bit_tab [((c) & 0xFF) % 8]; _Accm_to_sum(); }
#define		Reset_in_accm_to(c)			if (((c) & 0xFF) <= (P3_NB_BITS_IN_ACCM_TO-1)) { Link_cur_accm_to [((c) & 0xFF) / 8] &= ~ppp_accm_bit_tab [((c) & 0xFF) % 8]; _Accm_to_sum();}
#define		Is_in_accm_to(c)			((((c) & 0xFF) <= (P3_NB_BITS_IN_ACCM_TO-1)  ) && ((Link_cur_accm_to [((c) & 0xFF) / 8] & ppp_accm_bit_tab [((c) & 0xFF) % 8]) != 0))
#define		Is_accm_to_empty()			(Link_cur_sum_accm_to == 0)

#define		Copy_full_accm_to(src)		Memcpy_far ((char FAR *)Link_cur_accm_to,	(char FAR *)(src), P3_NB_BYTES_IN_ACCM_TO);_Accm_to_sum()
#define		Copy_in_accm_to(src)		Memcpy_far ((char FAR *)Link_cur_accm_to,   (char FAR *)(src), LCP_CO_SIZE_ACCM); _Accm_to_sum()

#define		Set_in_def_accm_to(c)		if (((c) & 0xFF) <= (P3_NB_BITS_IN_ACCM_TO-1)) { Link_def_accm_to [((c) & 0xFF) / 8] |=  ppp_accm_bit_tab [((c) & 0xFF) % 8]; }
#define		Reset_in_def_accm_to(c)		if (((c) & 0xFF) <= (P3_NB_BITS_IN_ACCM_TO-1)) { Link_def_accm_to [((c) & 0xFF) / 8] &= ~ppp_accm_bit_tab [((c) & 0xFF) % 8]; }

#define		Copy_in_accm_tmp(dest, src)	Memcpy_far ((char FAR *)(dest),   			(char FAR *)(src), LCP_CO_SIZE_ACCM)



/*---------------------------------------------------------------------------
 *			PPP frame description
 *-------------------------------------------------------------------------*/
typedef	ushort	ppp_protocol_id_t;

#define	P3_NB_CONFIGURE_OPTIONS	20			/* number of options in CONFIGURE_xxx */
#define	P3_NB_BYTES_IN_OPTIONS	80			/* number of unprocessed data bytes in CONFIGURE_xxx options */
#if P3_NB_BYTES_IN_OPTIONS > 255
#	define	ppp_opt_off_t	ushort
#else
#	define	ppp_opt_off_t	uchar
#endif

#define	P3_MAX_NB_BYTES_FOR_HOLE	20		/* OMNITEL-BRICKS Maximum number of bytes for holes in buffers */

struct ppp_fr_dsc {							/* PPP frame description */
	struct ppp_link FAR	*p_ppp_link;	/* PPP link which sent or received the frame */
	struct buffer FAR	*p_buffer;		/* address of the buffer containing frame data */
	uchar FAR			*p_first_byte;	/* address of the first byte of the frame */

	uchar				 error_code;	/* frame error code. 0: no error */
#		define	P3_FRR_PROTOCOL_ID_TOO_LONG			0x01	/* PPP protocol identifier is too long */
#		define	P3_FRR_LCP_FR_SIZE_RECEIVED_DATA	0x11	/* LCP-protocol declared frame size is greater than received data */
#		define	P3_FRR_LCP_FR_SIZE_MRU				0x12	/* LCP-protocol declared frame size is greater than the MRU */
#		define	P3_FRR_LCP_FR_SIZE_4				0x13	/* LCP-protocol declared frame size is less than 4 */
#		define	P3_FRR_LCP_OPT_SIZE_RECEIVED_2		0x21	/* total LCP CONFIGURE_xxx received option size is less than 2 */
#		define	P3_FRR_LCP_OPT_SIZE_DECLARED_2		0x22	/* total LCP CONFIGURE_xxx declared option size is less than 2 */
#		define	P3_FRR_LCP_OPT_SIZE_RECEIVED_SHORT	0x23	/* total LCP CONFIGURE_xxx received option size is too short */
#		define	P3_FRR_LCP_ACCM_SIZE				0x24	/* ACCM option size declared incorrect */
#		define	P3_FRR_LCP_MRU_SIZE					0x25	/* MRU  option size declared incorrect */

#		define	P3_FRR_CFG_LCP_NB_OPTS				0xF1	/* too many options in a LCP CONFIGURE_xxx frame (not enough descriptors available) */
#		define	P3_FRR_CFG_LCP_NB_BYTES_FOR_OPTS	0xF2	/* too many options in a LCP CONFIGURE_xxx frame (not enough storage for data available) */

	ushort				 error_offset;	/* in general, offset in the frame where the error is detected */

	struct {							/* PPP framing description */
		uchar				acf_present;	/* ON: address and control fields are present */
		uchar				pf_compressed;	/* ON: protocol field is compressed */
		ppp_protocol_id_t	protocol_id;	/* protocol identifier */
		short				info_off;		/* offset of the first information byte, with respect to p_first_byte */
	} ppp;

	union {
		uchar	dummy;

		struct {							/* LCP protocol */
			short			fr_length;			/* LCP frame length (starting at code) */
			uchar			code;				/* LCP code */
			uchar			identifier;			/* LCP identifier */

			struct {								/* CONFIGURE_xxx description */
				uchar		accm_present;		/* ACCM option present */
				uchar		mru_present;		/* MRU option present */
				uchar		accm_val [4];		/* ACCM value - in internal form, compatible with our internal representation */
				short		mru_val;			/* MRU value */

				uchar			nb_options;			/* number of options present */
				ppp_opt_off_t	next_offset;	/* offset of the next available offset, in opt_data */
				struct {    					/* options, in the order in which they are present in the frame */
					uchar			type;		/* option type */
					uchar			length;		/* length of the value, in opt_data */
					ppp_opt_off_t	offset;		/* offset of the value, in opt_data */
				} opt_dsc [P3_NB_CONFIGURE_OPTIONS];

				uchar 		opt_data [P3_NB_BYTES_IN_OPTIONS];	/* unprocessed options data */

			} configure;
		} lcp;
	} u;
};

#define		Ppp_fr_dsc_size	(sizeof (struct ppp_fr_dsc))

#define		P_fr_dsc				(p_fr_dsc)
#define		Fr_p_buffer				(P_fr_dsc -> p_buffer)
#define		Fr_p_ppp_link			(P_fr_dsc -> p_ppp_link)
#define		Fr_p_first_byte			(P_fr_dsc -> p_first_byte)
#define		Fr_error_code			(P_fr_dsc -> error_code)
#define		Fr_error_offset			(P_fr_dsc -> error_offset)

#define		Fr_ppp_acf_present		(P_fr_dsc -> ppp . acf_present)
#define		Fr_ppp_pf_compressed	(P_fr_dsc -> ppp . fr_compressed)
#define		Fr_ppp_protocol_id		(P_fr_dsc -> ppp . protocol_id)
#define		Fr_ppp_info_off			(P_fr_dsc -> ppp . info_off)

#define		Fr_lcp_fr_length		(P_fr_dsc -> u.lcp.fr_length)
#define		Fr_lcp_code				(P_fr_dsc -> u.lcp.code)
#define		Fr_lcp_identifier		(P_fr_dsc -> u.lcp.identifier)

#define		Fr_lcp_cfg_accm_present	(P_fr_dsc -> u.lcp.configure.accm_present)
#define		Fr_lcp_cfg_accm_val		(P_fr_dsc -> u.lcp.configure.accm_val)
#define		Fr_lcp_cfg_mru_present	(P_fr_dsc -> u.lcp.configure.mru_present)
#define		Fr_lcp_cfg_mru_val		(P_fr_dsc -> u.lcp.configure.mru_val)
#define		Fr_lcp_cfg_nb_options	(P_fr_dsc -> u.lcp.configure.nb_options)
#define		Fr_lcp_cfg_next_offset	(P_fr_dsc -> u.lcp.configure.next_offset)

#define		Fr_lcp_cfg_opt_type(ix)		(P_fr_dsc -> u.lcp.configure.opt_dsc[(ix)].type)
#define		Fr_lcp_cfg_opt_offset(ix)	(P_fr_dsc -> u.lcp.configure.opt_dsc[(ix)].offset)
#define		Fr_lcp_cfg_opt_length(ix)	(P_fr_dsc -> u.lcp.configure.opt_dsc[(ix)].length)

#define		Fr_lcp_cfg_opt_data		(P_fr_dsc -> u.lcp.configure.opt_data)

/*---------------------------------------------------------------------------
 *			General purpose macros
 *-------------------------------------------------------------------------*/
#define	Get_short_from_p(p_from)		((((p_from)[0]) * 256) + ((p_from)[1]))
#define	Put_short_to_p(p_to, short_val)	(p_to)[0] = (short_val) / 256; (p_to)[1] = (short_val);




/*---------------------------------------------------------------------------
 *			Encoding/decoding context
 *-------------------------------------------------------------------------*/
struct dte_ppp_asyn_ctxt {

	struct ppp_link			link_1;			/* description of first link : asynchronous DTE side */
	struct ppp_link			link_2;			/* description of second link : synchronous, network side */

	struct {								/* Decoding context */
		uchar				state;			/* decoding state */
		uchar				err_code;		/* last decode error code */
		uchar				check_fcs;		/* ON: check received FCS. OFF: do not check. */
		ushort				received_fcs;	/* last received FCS */
		ushort				computed_fcs;	/* last computed FCS */
		ushort				*p_fcs_tab;		/* address of the FCS table */
	} dec;
	struct {								/* Encoding context */
		uchar				state;			/* encoding state */
		uchar				err_code;		/* last encode error code */
		ushort				computed_fcs;	/* computed FCS */
		ushort				*p_fcs_tab;		/* address of the FCS table */
	} enc;
};

#define		P_ppp_asyn	(p_ppp_asyn)
#define		Ppp_ctxt_size				(sizeof (struct dte_ppp_asyn_ctxt))

#define		Ppp_a_dec_check_fcs			(P_ppp_asyn -> dec.check_fcs)
#define		Ppp_a_dec_computed_fcs		(P_ppp_asyn -> dec.computed_fcs)
#define		Ppp_a_dec_received_fcs		(P_ppp_asyn -> dec.received_fcs)
#define		Ppp_a_dec_state				(P_ppp_asyn -> dec.state)
#define		Ppp_a_dec_err_code			(P_ppp_asyn -> dec.err_code)
#define		Ppp_a_dec_fcs_tab			(P_ppp_asyn -> dec.p_fcs_tab)

#define		Ppp_a_enc_computed_fcs		(P_ppp_asyn -> enc.computed_fcs)
#define		Ppp_a_enc_err_code			(P_ppp_asyn -> enc.err_code)
#define		Ppp_a_enc_state				(P_ppp_asyn -> enc.state)
#define		Ppp_a_enc_fcs1				((Ppp_a_enc_computed_fcs >> 8) & 0xFF)
#define		Ppp_a_enc_fcs2				(Ppp_a_enc_computed_fcs & 0xFF)
#define		Ppp_a_enc_fcs_tab			(P_ppp_asyn -> enc.p_fcs_tab)

#define		Ppp_a_link_1				(&(P_ppp_asyn -> link_1))
#define		Ppp_a_link_2				(&(P_ppp_asyn -> link_2))

/*---------------------------------------------------------------------------
 *			Routines
 *-------------------------------------------------------------------------*/
#if NEW_FCT_STYLE == ON
	void 	dte_ppp_asyn_dec_abort	 	(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn);
	uchar 	dte_ppp_asyn_dec_err_code 	(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn);
	void 	dte_ppp_asyn_dec_init 		(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn,
										 uchar				 check_fcs,
										 ushort FAR			*p_fcs_tab);
	void 	dte_ppp_asyn_dec_stop 		(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn);
	uchar 	dte_ppp_asyn_decode 		(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn,
										 struct buffer FAR 	*p_in_asyn_buf,
										 struct buffer FAR	*p_out_frm_buf);
	void 	dte_ppp_asyn_enc_abort	 	(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn,
										 struct buffer FAR	*p_out_asyn_buf);
	uchar 	dte_ppp_asyn_enc_err_code 	(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn);
	void 	dte_ppp_asyn_enc_init 		(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn,
										 ushort FAR			*p_fcs_tab);
	void 	dte_ppp_asyn_enc_stop 		(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn);
	uchar 	dte_ppp_asyn_encode 		(struct ppp_link FAR *p_ppp_link,
										 struct dte_ppp_asyn_ctxt FAR *p_ppp_asyn,
										 struct buffer FAR 	*p_in_frm_buf,
										 struct buffer FAR	*p_out_asyn_buf);
	void 	dte_ppp_asyn_init	 		(struct dte_ppp_asyn_ctxt 	*p_ppp_asyn);
	uchar	dte_ppp_sync_decode 		(struct ppp_link FAR *p_ppp_link, struct buffer FAR *p_in_out_sync_buf);
	uchar	dte_ppp_sync_encode 		(struct ppp_link FAR *p_ppp_link, struct buffer FAR * FAR *p_p_in_out_buffer);
	void 	p3_fr_parse 				(struct ppp_link FAR *p_ppp_link,
										 struct ppp_fr_dsc FAR *p_fr_dsc,
										 struct buffer FAR *p_buffer);
#else
	void 	dte_ppp_asyn_dec_abort	 	();
	uchar 	dte_ppp_asyn_dec_err_code 	();
	void 	dte_ppp_asyn_dec_init 		();
	void 	dte_ppp_asyn_dec_stop 		();
	uchar 	dte_ppp_asyn_decode 		();
	void 	dte_ppp_asyn_enc_abort	 	();
	uchar 	dte_ppp_asyn_enc_err_code 	();
	void 	dte_ppp_asyn_enc_init 		();
	void 	dte_ppp_asyn_enc_stop 		();
	uchar 	dte_ppp_asyn_encode 		();
	void 	dte_ppp_asyn_init 			();
	uchar	dte_ppp_sync_decode 		();
	uchar	dte_ppp_sync_encode 		();
	void 	p3_fr_parse 				();
#endif


/*---------------------------------------------------------------------------
 *			Definitions from PPP RFCs
 *
 *	RFC 1661 : The Point-to-Point Protocol (PPP) - July 1994
 *			   Standards track, STD 51
 *			   Obsoletes RFC 1548.
 *	RFC 1662 : PPP in HDLC-like Framing - July 1994
 *			   Standards track, STD 51
 *			   Obsoletes RFC 1549
 *	RFC 2043 : The PPP SNA Control Protocol (SNACP) - October 1996
 *			   Standards track
 *	RFC 1570 : PPP LCP Extensions - January 1994
 *			   Standards track
 *
 *-------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------
 *			PPP special characters - for transparency control
 *-------------------------------------------------------------------------*/
#define		P3_FLAG_CHAR					0x7E			/* PPP flag character */
#define		P3_CONTROL_ESCAPE_CHAR			0x7D			/* PPP control escape character */

#define		P3_XOR_BIT						0x20			/* PPP 'xor' bit for transparency */

/*---------------------------------------------------------------------------
 *			PPP frame format bytes
 *-------------------------------------------------------------------------*/
#define		P3_ADDRESS_BYTE					0xFF			/* PPP HDLC 'address' byte */
#define		P3_CONTROL_BYTE					0x03			/* PPP HDLC 'control' byte */

/*---------------------------------------------------------------------------
 *			PPP protocol field
 *
 *	From RFC 1661:
 *	  0xxx to 3xxx	: network layer protocols
 *	  4xxx to 7xxx	: protocols with low voulme traffic, without associated
 *					  NCP
 *	  8xxx to Bxxx	: associated Network Control Protocols (NCPs)
 *	  Cxxx to Fxxx	: link layer Control Protocols
 *-------------------------------------------------------------------------*/
#define		P3PROT_PADDING		0x0001	/* RFC 1661 : Padding Protocol */
										/* 0003..001f : reserved (transparency inefficient) */
#define		P3PROT_SNA_802_2	0x004B	/* RFC 2043   : SNA over LLC 802.2 */
#define		P3PROT_SNA			0x004D	/* RFC 2043   : SNA */
										/* 007D       : reserved (Control Escape) */
										/* 00CF       : reserved (PPP NLPID) */
										/* 00FF       : reserved (compression inefficient) */
										/* 8001..800F : unused */
#define		P3PROT_SNACP_802_2	0x804B	/* RFC 2043   : SNA Control Protocol over LLC 802.2 */
#define		P3PROT_SNACP		0x804D	/* RFC 2043   : SNA Control Protocol */
										/* 807D       : unused (NCP for 007D) */
										/* 80CF       : unused (NCP for 00CF) */
#define		P3PROT_IL_CCP		0x80FB	/* RFC 1962   : Individual Link Compression Control Protocol (in multilink control) */
#define		P3PROT_CCP			0x80FD	/* RFC 1962   : Compression Control Protocol */
										/* 80FF       : unused (NCP for 00FF) */
#define		P3PROT_LCP			0xC021	/* RFC 1661 : LCP, Link Control Protocol */
#define		P3PROT_PAP			0xC023	/* RFC 1661 : PAP, Password Authentication Protocol */
#define		P3PROT_LQR			0xC025	/* RFC 1661 : LQR, Link Quality Report */
#define		P3PROT_CHAP			0xC223	/* RFC 1661 : CHAP, Challenge Handshake Authentication Protocol */
										/* C26F is an authentication protocol */
/*---------------------------------------------------------------------------
 *			LCP code fields.
 *			Defined in RFC 1661, except otherwise indicated
 *-------------------------------------------------------------------------*/
#define		LCP_CONFIGURE_REQUEST	 1
#define		LCP_CONFIGURE_ACK		 2
#define		LCP_CONFIGURE_NAK		 3
#define		LCP_CONFIGURE_REJECT	 4
#define		LCP_TERMINATE_REQUEST	 5
#define		LCP_TERMINATE_ACK		 6
#define		LCP_CODE_REJECT			 7
#define		LCP_PROTOCOL_REJECT		 8
#define		LCP_ECHO_REQUEST		 9
#define		LCP_ECHO_REPLY			10
#define		LCP_DISCARD_REQUEST		11
#define		LCP_IDENTIFICATION		12	/* RFC1570 : Identification */
#define		LCP_TIME_REMAINING		13	/* RFC1570 : Time-Remaining */

/*---------------------------------------------------------------------------
 *			LCP Configuration Option field
 *			Defined in RFC 1661, except otherwise indicated
 *-------------------------------------------------------------------------*/
#define		LCP_CO_ZERO				 0	/*           reserved */
#define		LCP_CO_MRU				 1	/*           Maximum-Receive-Unit */
#define		LCP_CO_ACCM				 2	/* RFC 1662: ACCM : Async-Control-Character-Map */
#define		LCP_CO_AUTHENTICATION	 3	/*           Authentication-Protocol */
#define		LCP_CO_QUALITY			 4	/*           Quality-Protocol */
#define		LCP_CO_MAGIC_NUMBER		 5	/*           Magic-Number */
										/* 6 */
#define		LCP_CO_PFC				 7	/*           Protocol-Field-Compression */
#define		LCP_CO_ACFC				 8	/*           Address-and-Control-Field-Compression */
#define		LCP_CO_FCS				 9	/* RFC1570: FCS-Alternatives */
#define		LCP_CO_SDP				10	/* RFC1570: Self-Describing-Padding */
#define		LCP_CO_CALLBACK			13	/* RFC1570: Callback */
#define		LCP_CO_COMPOUND			15	/* RFC1570: Compound-Frames */

#define		LCP_CO_SIZE_ACCM		 4	/* Size of the ACCM option */

#define		LCP_DEFAULT_MRU		  1500	/* Default MRU */


#endif 	/* _DTE_PPP */

/*EOF*/
