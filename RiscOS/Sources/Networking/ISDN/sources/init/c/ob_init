/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ob_init.c
 *
 * $Revision$
 *
 * $Date$
 *
 *		Omnitel Bricks initialization using RISC OS kernels.
 *
 * functions :
 *
 *		omnitel_init - OMNITEL-BRICKS initialisation procedure.
 *		omnitel_config - OMNITEL-BRICKS configuration sending procedure.
 *		omnitel_reset_config - OMNITEL-BRICKS reset configuration sending procedure.
 *		omnitel_final - OMNITEL-BRICKS finalisation procedure.
 *		load_config_update_parameters - configuration update parameters loading  
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|														|*/
/*|	OMNITEL-BRICKS 										|*/
/*|														|*/
/*|														|*/
/*|	Copyright (c) 1993 by OMNITEL SA					|*/
/*|	All Rights Reserved.								|*/
/*|														|*/
/*[]---------------------------------------------------[]*/

#include "services.h"
#include "ob_int.h"
#include "it.h"
#include "dd_int.h"
#include "ph_d_int.h"

						/*-=-=-=-=-=-=-=-=-=-=-=-=-=*/
						/*                          */
						/*   system configuration   */
						/*                          */
						/*-=-=-=-=-=-=-=-=-=-=-=-=-=*/


#include "conf_ob.h"	/* Omnitel Bricks server/entity configuration data */
#include "string.h"

						/*-=-=-=-=-=-=-=-=-=-=-=-=-=*/
						/*                          */
						/*   global  declarations   */
						/*                          */
						/*-=-=-=-=-=-=-=-=-=-=-=-=-=*/

extern CONST struct i_service 	 i_service;				/* Init Omnitel services control block (config.h) */
extern struct it_init   		 it_init_data;			/* IT init control block (config.h) */
extern uchar					 ext_msg_count;			/* number of messages in the external queue (messages from Timer or NIL entities) */
extern uchar	    	    	    	    	 server_first_time;

extern struct message 		FAR *p_fifo_ext_first;		/* external fifo pointer */
extern struct message 		FAR *p_fifo_ext_last;		/* external fifo pointer */
extern _kernel_oserror      	module_e;


						/*-=-=-=-=-=-=-=-=-=-=-=-=-=*/
						/*                          */
						/*   functions prototypes   */
						/*                          */
						/*-=-=-=-=-=-=-=-=-=-=-=-=-=*/

#if NEW_FCT_STYLE == ON

#	if CONFIG_UPDATE_MANAGEMENT == ON
		uchar	sm_init_update_par				(void);
		void	load_config_update_parameters	(struct message FAR *p_msg, isdnctrl_configs *p_isdnctrl_configs);
#	endif

#else

#	if CONFIG_UPDATE_MANAGEMENT == ON
		uchar	sm_init_update_par				();
		void	load_config_update_parameters	();
#	endif

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		omnitel_init () - OMNITEL-BRICKS initialization procedure.

Usage		void omnitel_init (void)

*--------------------------------------------------------------------------*/

_kernel_oserror *omnitel_init ()
{
    struct message 		FAR *p_snd_msg;	/* pointer on message to transmit */
    _kernel_oserror *e;

		/*----------- Init the OMNITEL-BRICKS services -------------------*/
    services_var_init ();

    if (Services_init ((struct i_service FAR *)&i_service) == NOK) {
    	module_e.errnum = ISDN_SERVICES_INIT_ERROR;
	strcpy(module_e.errmess, "ISDN services init error");
    	return ((_kernel_oserror *)&module_e);
    }



		/*----------- Init the OMNITEL-BRICKS IT services ----------------*/

    it_var_init ();


    if (It_init ((struct it_init FAR *) &it_init_data) == NOK) {
    	module_e.errnum = ISDN_IT_INIT_ERROR;
	strcpy(module_e.errmess, "ISDN it init error");
    	return ((_kernel_oserror *)&module_e);
    }

    	    	    	/*
				number of messages in the external queue
				(messages from Timer or NIL entities)
				and queue pointers.
			*/

    ext_msg_count		= 0;

    p_fifo_ext_first	=
    p_fifo_ext_last		= P_NIL;


		/*----------- Init the OMNITEL-BRICKS update management -----------*/

#   if CONFIG_UPDATE_MANAGEMENT == ON
	sm_init_update_par ();
#   endif
         /**********/
    	    /* install ISDN interrupt routine  */

    if ((e = os_install_isdn_it ()) != P_NIL) {
    	return (e);
    }

		/* install timer interrupt routine */

    if ((e = os_install_timer_it ()) != P_NIL) {
    	return (e);
    }

    return (e);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		omnitel_config () - OMNITEL-BRICKS configuration sending procedure.

Usage		void omnitel_config (void)

*--------------------------------------------------------------------------*/

void omnitel_config (p_isdnctrl_configs)
isdnctrl_configs *p_isdnctrl_configs;
{
    struct message 		FAR *p_snd_msg;	/* pointer on message to transmit */

		/*------ Start the OMNITEL-BRICKS System Management entity --------*/

    p_snd_msg 	= Alloc_msg ();

    S_msg_from	= ENT_NIL;
    S_msg_to	= ENT_SM;

#	if CONFIG_UPDATE_MANAGEMENT == ON

			/* Process here the configuration update management if necessary */

		load_config_update_parameters (p_snd_msg, p_isdnctrl_configs);	/* ACORN SPECIFIC */

#	endif

    server_first_time = ON;

	    /* Send to SM : starting event */

    Os_send_message (0, p_snd_msg);	/* qid is meaningless here (from ENT_NIL) */

}
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		omnitel_reset_config () - OMNITEL-BRICKS configuration sending procedure.

Usage		void omnitel_reset_config (void)

*--------------------------------------------------------------------------*/

void omnitel_reset_config (p_isdnctrl_configs)
isdnctrl_configs *p_isdnctrl_configs;
{
    struct message 		FAR *p_snd_msg;	/* pointer on message to transmit */

		/*------ Start the OMNITEL-BRICKS System Management entity --------*/

    p_snd_msg 	= Alloc_msg ();

    S_msg_from	= ENT_NIL;
    S_msg_to	= ENT_SM;
    S_msg_code	= SM_RESET_CONFIG_RQ;

#	if CONFIG_UPDATE_MANAGEMENT == ON

			/* Process here the configuration update management if necessary */

		load_config_update_parameters (p_snd_msg, p_isdnctrl_configs);	/* ACORN SPECIFIC */

#	endif

	    /* Send to SM : re-starting event */

    Send_message (p_snd_msg);	

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		omnitel_final () - OMNITEL-BRICKS finalisation procedure.

Usage		void omnitel_final (void)

*--------------------------------------------------------------------------*/

_kernel_oserror *omnitel_final ()
{
    _kernel_oserror *e;

	/* remove callback function */

    e = os_remove_callback (); 

    	/* remove timer it event */

    e = os_remove_timer_it ();

    	/* remove ISDN card it event */

    e = os_remove_isdn_it ();

    return (e);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		load_config_update_parameters - load the configuration update
			parameters into the first message to be sent to ENT_SM.

	WARNING :	This function is an example of what can be done. You should
	---------
				modify it to your own needs.

*--------------------------------------------------------------------------*/

#if CONFIG_UPDATE_MANAGEMENT == ON

		/* Usefull macros */

	/* Store Confirmation entity id */

#define Set_confirm_ent_id(ent_id)	Set_update_octet (ent_id)

	/* Store Update_id */

#define Set_update_id(update_id)	Set_update_octet ((update_id) >> 8); \
									Set_update_octet (update_id)

	/* Macros used to store basic types update values */

#define Set_update_length(l)		*p_data++ = l

#define Set_update_octet(val)		*p_data++ = (uchar)(val)

#define Set_update_char(val)		Set_update_length (1);             \
									Set_update_octet (val)

#define Set_update_short(val)		Set_update_length (2);             \
									Set_update_octet ((val) & 0xff);	\
									Set_update_octet ((val) >> 8);     

#define Set_update_long(val)		Set_update_length (4);          Set_update_octet (val);   \
									Set_update_octet ((val) >> 8);     \
									Set_update_octet ((val) >> (2*8)); \
									Set_update_octet ((val) >> (3*8)); 
									

#define Set_update_block(block_length,block_address)                   \
									Set_update_length (block_length);  \
									Memcpy_far ((char FAR *)p_data, (char FAR *)block_address, block_length);\
									p_data   += block_length

void  load_config_update_parameters (p_msg, p_isdnctrl_configs)
	struct message FAR *p_msg;
	isdnctrl_configs   *p_isdnctrl_configs;
{
	uchar 		FAR *p_data;
	struct buffer	FAR *p_buffer;
	short		country;
	char		operator;
	uchar		spid_1 [ISDNCTRL_MAX_SPID],
			spid_2 [ISDNCTRL_MAX_SPID];
	short		spid_1_length, 
			spid_2_length;
	uchar		nb_spids;
	uchar		l;	/* length of strings parameters */			
	
		/*-------------------------------------------------------------------*/
		/*	1 - The message has already been allocated, but you might need a */
		/*		buffer to store the update commands !                        */
		/*-------------------------------------------------------------------*/

	p_buffer	= Alloc_buffer ();

	if (p_buffer != P_NIL) {
		p_data		= Buffer_a_first_data;

			/*-------------------------------------------------------------------*/
			/*	2 - Store the entity id which will receive the SM_SET_CONFIG_CO  */
			/*		message after configuration phase.                           */
			/*		ENT_NIL means "no confirmation".                             */
			/*-------------------------------------------------------------------*/

		Set_confirm_ent_id (ENT_APPLI);

			/*-------------------------------------------------------------------*/
			/*	3 - Store the update commands :                                  */
			/*	                                                                 */
			/*	  For each update command, do :                                  */
			/*	                                                                 */
			/*	    a. store the update id                                       */
			/*	    b. store the size of the updated value                       */
			/*	    c. store the updated value, according to its type            */
			/*	                                                                 */
			/*-------------------------------------------------------------------*/
		country = Isdnctrl_configs_country;
		operator = Isdnctrl_configs_operator;
			
			/* check country code with compiled variants */
			
		switch (country) {
			case AUSTRALIA :
#				if F_AU1 == ON			
					country 	= AUSTRALIA;
					operator	= AUSTEL_1; 
#				else
					country 	= CFG_DEF_COUNTRY;
					operator	= CFG_DEF_OPERATOR; 
#				endif				 
								
				break;

			case HONG_KONG :
			case INDIA :
			case NEW_ZEALAND :

#				if F_ETS == ON			
					country 	= EUROPE;
					operator	= ETSI; 
#				else
					country 	= CFG_DEF_COUNTRY;
					operator	= CFG_DEF_OPERATOR; 
#				endif				 

				break;
			
			case EUROPE :  /* USE VN6 if it is compiled */ 
			case BELGIUM : /* USE ETSI if it is compiled */
#				if F_VN6 == ON			
					operator	= FT_VN6; 
					break;
#				endif				 
#				if F_ETS == ON			
					operator	= ETSI; 
					break;
#				endif				 
				country 	= CFG_DEF_COUNTRY;
				operator	= CFG_DEF_OPERATOR; 
				break;
				
			case AUSTRIA :	/* other european country: use ETSI protocol */
			case DENMARK :
			case FINLAND :
			case IRLANDE :
			case ITALY :
			case LUXEMBOURG :
			case NETHERLANDS :
			case NORWAY :
			case PORTUGAL :
			case SPAIN :
			case SWEDEN :
			case SWITZERLAND :
			case UK :
			case USSR :
#				if F_VN6 == ON			
					country 	= EUROPE;
					operator	= FT_VN6; 
					break;
#				endif				 
#				if F_ETS == ON			
					operator	= ETSI; 
					break;
#				endif				 
				country 	= CFG_DEF_COUNTRY;
				operator	= CFG_DEF_OPERATOR; 
				break;
			
			case FRANCE :
				switch (operator) {
					default :
#						if F_VN6 == ON			
							operator	= FT_VN6; 
							break;
#						endif				 
#						if F_VN3 == ON			
							operator	= FT_VN3; 
							break;
#						endif				 
#						if F_VN2 == ON			
							operator	= FT_VN2; 
							break;
#						endif				 
#						if F_ETS == ON			
							country 	= EUROPE;
							operator	= ETSI; 
#						else
							country 	= CFG_DEF_COUNTRY;
							operator	= CFG_DEF_OPERATOR; 
#						endif				 
#					if F_VN2 == ON			
						case FT_VN2 :
						break;
#					endif							
#					if F_VN3 == ON			
						case FT_VN3 :
						break;
#					endif							
#					if F_VN6 == ON			
						case FT_VN6 :
						break;
#					endif							
				}   
				break;
			
			case GERMANY :
				switch (operator) {
					default :
#						if F_TR6 == ON
							operator	= DT_1TR6; 
                        	                        break;
#						endif
#						if F_VN6 == ON			
							operator	= FT_VN6; 
							country 	= EUROPE;
							break;
#						endif				 
#						if F_ETS == ON			
							operator	= ETSI; 
#						else
							country 	= CFG_DEF_COUNTRY;
							operator	= CFG_DEF_OPERATOR; 
#						endif			
#					if F_TR6 == ON
						case DT_1TR6 :
							break;
#					endif
				}		
				break;
			
			case USA : /* USA, Canada */
				switch (operator) {
				
					default :
#						if F_NI2 == ON
							operator	= N_ISDN2; 
			                  	        break;
#						endif
#						if F_E10 == ON
							operator	= ATT_5E10; 
			                  	        break;
#						endif
#						if F_AT9 == ON
							operator	= ATT_5E9; 
			                  	        break;
#						endif
#						if F_NI1 == ON
							operator	= N_ISDN1; 
			                  	        break;
#						endif
#						if F_AT5 == ON
							operator	= ATT_5E5; 
			                  	        break;
#						endif
#						if F_DMS == ON
							operator	= NT_DMS100; 
			                  	        break;
#						endif
						country 	= CFG_DEF_COUNTRY;
						operator	= CFG_DEF_OPERATOR; 
						break;

#					if F_NI2 == ON
						case N_ISDN2 :
							break;
#					endif							

#					if F_NI1 == ON
						case N_ISDN1 :
							break;
#					endif							

#					if F_AT5 == ON
						case ATT_5E5 :
							break;
#					endif							

#					if F_AT9 == ON
						case ATT_5E9 :
							break;
#					endif							

#					if F_E10 == ON
						case ATT_5E10 :
							break;
#					endif							

#					if F_DMS == ON
						case NT_DMS100 :
							break;
#					endif							

			        } /* switch (operator) { */
				break;			
			case JAPAN :
				switch (operator) {
				
					default :
#						if F_NTT == ON
							operator	= NTT; 
			                  	        break;
#						endif
#						if F_KDD == ON
							operator	= KDD; 
			                  	        break;
#						endif
#						if F_VN6 == ON
							operator	= FT_VN6; 
							country 	= EUROPE;
			                  	        break;
#						endif
#						if F_ETS == ON
							country 	= EUROPE;
							operator	= ETSI; 
#						else
							country 	= CFG_DEF_COUNTRY;
							operator	= CFG_DEF_OPERATOR; 
#						endif
						break;

#						if F_NTT == ON
							case NTT : 
			                  	        	break;
#						endif

#						if F_KDD == ON
							case KDD : 
			                  	        	break;
#						endif
						
				} /* switch (operator) { */			
				break;
					
			default :	/* undefined country : take default value */
				country		= CFG_DEF_COUNTRY; 
				operator	= CFG_DEF_OPERATOR; 
			        break;
		}  
		
		Set_update_id (UPDATE_COUNTRY_ID); 
		Set_update_short  (country);
		Set_update_id (UPDATE_OPERATOR_ID); 
		Set_update_char (operator);


			/* if Country or operator changed: update it */

		if (country != Isdnctrl_configs_country) {
			Isdnctrl_configs_country = country;
		}  

		if (operator != Isdnctrl_configs_operator) {
			Isdnctrl_configs_operator = operator;
		}  


		switch (operator) {
			case AT5 :
			case E10 :
				Set_update_id (UPDATE_SUBSCRIPTION_ID); 
				Set_update_short  (SUBSCRIPTION_D);
				break;
			default :
				Set_update_id (UPDATE_SUBSCRIPTION_ID); 
				Set_update_short  (ALL_SERVICES);
				break;
		}  
		/****************************************/
		/* 					*/
		/* 	INCOMING CALLS PARAMETERS	*/
		/* 					*/
		/****************************************/
		

		if ((l = strlen((char *)&Isdnctrl_configs_local_number_ppp)) != 0) {		
			Set_update_id (UPDATE_LOCAL_NB_PPP_ID); 
			Set_update_block (l+1, &Isdnctrl_configs_local_number_ppp);
		} 		  	
		
		if ((l = strlen((char *)&Isdnctrl_configs_local_subaddress_ppp)) != 0) {		
			Set_update_id (UPDATE_LOCAL_SUB_ADD_PPP_ID); 
			Set_update_block (l+1, &Isdnctrl_configs_local_subaddress_ppp);
		} 		  	
	
		
		if (Isdnctrl_configs_priority_ppp != DEFAULT_PRIORITY_PPP) {
			Set_update_id (UPDATE_PRIORITY_PPP_ID); 
			Set_update_char (Isdnctrl_configs_priority_ppp);
		
		}  
		
		if ((l = strlen((char *)&Isdnctrl_configs_local_number_v120)) != 0) {		
			Set_update_id (UPDATE_LOCAL_NB_V120_ID); 
			Set_update_block (l+1, &Isdnctrl_configs_local_number_v120);
		} 		  	
	
		if ((l = strlen((char *)&Isdnctrl_configs_local_subaddress_v120)) != 0) {		
			Set_update_id (UPDATE_LOCAL_SUB_ADD_V120_ID); 
			Set_update_block (l+1, &Isdnctrl_configs_local_subaddress_v120);
		} 		  	
	
		if (Isdnctrl_configs_priority_v120 != DEFAULT_PRIORITY_V120) {
			Set_update_id (UPDATE_PRIORITY_V120_ID); 
			Set_update_char (Isdnctrl_configs_priority_v120);
                }
		/********************************/
		/* 				*/
		/* 	SPIDS PARAMETERS	*/
		/* 				*/
		/********************************/
                
		if (country != USA) {
			nb_spids = 0;
	  
		} else 	{
			spid_1_length = Strcpy_far((char FAR *)&spid_1, 
					(char FAR *)&Isdnctrl_configs_spid_1, 
					ISDNCTRL_MAX_SPID) - 1;		
			spid_2_length = Strcpy_far((char FAR *)&spid_2, 
					(char FAR *)&Isdnctrl_configs_spid_2, 
					ISDNCTRL_MAX_SPID) - 1;

			if ((spid_1_length + spid_2_length) == 0) {
				nb_spids = 0;

			} else if (spid_1_length == 0) { /* SPID2 present SPID1 absent */
				nb_spids = 1;

			} else if (spid_2_length == 0) { /* SPID1 present SPID2 absent */	
				nb_spids = 1;

			} else {			/* SPID1 present SPID2 present */
			        nb_spids = 2;
	
			        	/* if SPIDs are identical use the 'one SPID ' case */
		        	
			        if ((spid_1_length == spid_2_length) 
			        && (Memcmp_far((char FAR *)spid_1, 
			         	       (char FAR *)spid_2, spid_1_length) == 0)) {
					nb_spids = 1;
		        
		        	}
			}       
		}
		
		switch (nb_spids) {
			case 0 :	/* NO USA or USA no SPIDs */

				Set_update_id (UPDATE_USE_SPID_ID); 
				Set_update_char (OFF);
				Set_update_id (UPDATE_NS_NA_NB_ID); 
				Set_update_char (1);
				break;

			case 1 :	/* 1 SPID */

				Set_update_id (UPDATE_USE_SPID_ID); 
				Set_update_char (ON);
		
				if (spid_1_length != 0) {
					Set_update_id (UPDATE_NS_NA_NB_ID); 
					Set_update_char (1);
					Set_update_id (UPDATE_SPID_1_ID); 
					Set_update_block (spid_1_length+1, &Isdnctrl_configs_spid_1);
					
					if ((l = strlen((char *)&Isdnctrl_configs_calling_number_1)) != 0) {		
						Set_update_id (UPDATE_LOCAL_NB_SPID_1_ID); 
						Set_update_block (l+1, &Isdnctrl_configs_calling_number_1);
					} 		  	
		
				
				} else {
					Set_update_id (UPDATE_NS_NA_NB_ID); 
					Set_update_char (2);
					Set_update_id (UPDATE_SPID_2_ID); 
					Set_update_block (spid_2_length+1, &Isdnctrl_configs_spid_2);
					
					if ((l = strlen((char *)&Isdnctrl_configs_calling_number_2)) != 0) {		
						Set_update_id (UPDATE_LOCAL_NB_SPID_2_ID); 
						Set_update_block (l+1, &Isdnctrl_configs_calling_number_2);
					} 		  	
				
				}    
				break;
				
			case 2 :	/* 2 SPIDs */

				Set_update_id (UPDATE_USE_SPID_ID); 
				Set_update_char (ON);
				Set_update_id (UPDATE_NS_NA_NB_ID); 
				Set_update_char (2);
				Set_update_id (UPDATE_SPID_1_ID); 
				Set_update_block (spid_1_length+1, &Isdnctrl_configs_spid_1);
					
				if ((l = strlen((char *)&Isdnctrl_configs_calling_number_1)) != 0) {		
					Set_update_id (UPDATE_LOCAL_NB_SPID_1_ID); 
					Set_update_block (l+1, &Isdnctrl_configs_calling_number_1);
				} 		  	
		
				Set_update_id (UPDATE_SPID_2_ID); 
				Set_update_block (spid_2_length+1, &Isdnctrl_configs_spid_2);
					
				if ((l = strlen((char *)&Isdnctrl_configs_calling_number_2)) != 0) {		
					Set_update_id (UPDATE_LOCAL_NB_SPID_2_ID); 
					Set_update_block (l+1, &Isdnctrl_configs_calling_number_2);
				} 		  	
	
				break;
	
		}  

#		if PH_D_U == ON

			if (Isdnctrl_configs_interface == 'U') {
				Set_update_id (UPDATE_PH_D_LAYER1_ID);
				Set_update_char (PH_IEC); 			
				Set_update_id (UPDATE_PH_D_TEST_MODE_ID);
				Set_update_char (PH_TEM_PFS_TEST_MODE); 			
				Set_update_id (UPDATE_PH_D_TRANSCEIVER_ID);
				Set_update_char (U_TE);

#   				if ISDN_CARD_VERSION == 1	/* only one bit in version 1 */
				    	Isdn_card_s_u_enable();
#   				else				/* 2 bits from version 2 */
								/* enable S and U chips */
				    	Isdn_card_s_enable();
				    	Isdn_card_u_enable();

#				endif    	
							 			
			} else { /* (Isdnctrl_configs_interface == 'S') */
		
				Set_update_id (UPDATE_PH_D_LAYER1_ID);
				Set_update_char (PH_SBC); 			
				Set_update_id (UPDATE_PH_D_TEST_MODE_ID);
				Set_update_char (PH_TEM_PFS_NO_PREFILTER); 			
				Set_update_id (UPDATE_PH_D_TRANSCEIVER_ID);
				Set_update_char (ST_TE); 			

#   				if ISDN_CARD_VERSION == 1	/* enable only S chip */
				    	Isdn_card_s_u_enable();
#   				else
				    	Isdn_card_s_enable();

#				endif    	
		
			}
#		else /* if PH_D_U == ON */
				
				/* enable only S chip */
				
#			if ISDN_CARD_VERSION == 1
			    	Isdn_card_s_u_enable();
#			else
			    	Isdn_card_s_enable();
#			endif    	
			    
#		endif/* if PH_D_U == ON */			    

			/*-------------------------------------------------------------------*/
			/*	4 - Mark the end of the update list with an UPDATE_ID_NIL        */
			/*-------------------------------------------------------------------*/

		Set_update_id (UPDATE_ID_NIL);

			/*-------------------------------------------------------------------*/
			/*	5 - Set the buffer data size                                     */
			/*	    and link the buffer to the message                           */
			/*-------------------------------------------------------------------*/

		Buffer_data_size = (ushort) (p_data - Buffer_a_start_data);
		L_msg_init_link_buffer;

	} /* if (p_buffer != P_NIL) { */
}

#endif

/*EOF*/
