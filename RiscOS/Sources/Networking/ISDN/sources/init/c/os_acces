
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - os_acces.c
 *
 * $Revision$
 *
 * $Date$
 *
 *		OS routines called by Omnitel Bricks initialization sequence or
 *      in timer RISC OS implementation.
 *
 *  os_install_timer_it	- install timer it routine
 *  os_remove_timer_it	- de-install timer it routine
 *
 *  os_install_callback	- install callback routine
 *  os_remove_callback	- de-install callback routine
 *
 *  os_install_isdn_it	- install ISDN ph  it routine
 *  os_remove_isdn_it	- de-install ISDN ph it routine
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|														|*/
/*|	OMNITEL-BRICKS 										|*/
/*|														|*/
/*|														|*/
/*|	Copyright (c) 1993 by OMNITEL SA					|*/
/*|	All Rights Reserved.								|*/
/*|														|*/
/*[]---------------------------------------------------[]*/

#include "services.h"
#define SERVICES_INIT
#include "conf_srv.h"
#include "ctx_ext.h"

		/*------------------------ RISC_OS ---------------------------*/

#if OS != RISC_OS

ERROR !!

#endif

#include "ob_int.h"

		/* variables declaration */
	uchar					ext_msg_count;			/* number of messages in the external queue (messages from Timer or NIL entities) */

    	extern void *module_wsp;


#	include "string.h"
#   	include "kernel.h"
#   	include "swis.h"




#if NEW_FCT_STYLE == ON
extern	int 	isdn_irq_entry	    	    	(void);
extern 	int 	timer_it_entry	    	    	(void);
extern 	int 	isdn_callback_entry	     	(void);
#else

extern	int 	isdn_irq_entry	    	    	();
extern	int 	timer_it_entry	    	    	();
extern 	int 	isdn_callback_entry	     	();
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name        os_install_handler - request OS to install signal handler.

Usage		void os_install_handler ()

*--------------------------------------------------------------------------*/

_kernel_oserror *os_remove_isdn_it ()
{

    	/* remove ISDN card IT routine */

    return(_swix(OS_ReleaseDeviceVector, _INR(0,4),
    	    	ISDN_CARD_DEVICE_NUMBER,    /* R0 : device number */
    	    	isdn_irq_entry,   	    /* R1 : device driver routine address */
    	    	module_wsp,  	     	    /* R2 : R12 value at driver call */
    	    	isdn_card_isr_address,	    /* R3 : interrupt status register */
    	    	ISDN_CARD_INTERRUPT_MASK)); /* R4 : interrupt mask */
}

_kernel_oserror *os_remove_timer_it ()
{

    return (_swix(OS_RemoveTickerEvent, _INR(0,1),
    	    	timer_it_entry,
    	    	module_wsp));
}

_kernel_oserror *os_remove_callback()
{

    return (_swix(OS_RemoveCallBack, _INR(0,1),
    	isdn_callback_entry,
    	module_wsp));
}

_kernel_oserror *os_install_timer_it ()
{

    	/* calls timer IT every N centiseconds */

    return (_swix(OS_CallEvery, _INR(0,2),
    	    	(TIMER_SYSTEM_TICK/10)- 1,
    	    	timer_it_entry,
    	    	module_wsp));
}

_kernel_oserror *os_install_isdn_it ()
{

    	/* install ISDN IT routine */


    return (_swix(OS_ClaimDeviceVector, _INR(0,4),
    	    	ISDN_CARD_DEVICE_NUMBER,    /* R0 : device number */
    	    	isdn_irq_entry,   	    /* R1 : device driver routine address */
    	    	module_wsp,    	    	    /* R2 : R12 value at driver call */
    	    	isdn_card_isr_address,	    /* R3 : interrupt status register */
    	    	ISDN_CARD_INTERRUPT_MASK)); /* R4 : interrupt mask to use */

}
extern int callback_pending;		/* TRUE if callback routine is pending */

_kernel_oserror *os_install_callback()
{
    if (callback_pending) { /* Do nothing if callback is pending */
        return NULL;
    }
    callback_pending = TRUE;	
    return (_swix(OS_AddCallBack, _INR(0,1),
    	isdn_callback_entry,
    	module_wsp));
}


/*EOF*/

