
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_build.vn6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		vn6_cc_build_to_ns - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *		vn6_net_checking_service - determines the requested service from the
 *							   received message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	uchar	vn6_build_other_pr			(code_t prim_code, uchar FAR *p_data);
	uchar	vn6_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar	vn6_build_other_pr			();
	uchar	vn6_cc_load_ns_test			();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn6_cc_build_to_ns - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar vn6_cc_build_to_ns (code_t primitive_code);
							- primitive_code 	= code of the primitive to send,

Return value : 	vn6_cc_build_to_ns returns = OK
									   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar vn6_cc_build_to_ns (prim_code, p_data)
	code_t		prim_code;		/* primitive code */
	uchar  FAR *p_data;
{
	CONST struct cc_service FAR	*p_cc_service;
	uchar	cc_store_layer_1, cc_store_5b_5c;

		/* Switch according to the primitive to be sent */

	switch (prim_code) {

			/*------------------- CONNECTION REQUEST ---------------------*/

		case  NS_CONN_RQ :
			Isdn_init_vn6_ctx_rq_rs				(conn_rq,
											 p_data
											);

			p_cc_service = Cc_call_p_cc_service;

			if (Cc_service_hlc_teleservice != BYTE_VAL_NIL) {
				Isdn_vn6_store_hlc_CCITT	(conn_rq,
											 INTER_CCITT_CEPT,
											 Cc_service_hlc_teleservice
											);
			}

			if (p_rq_address != P_NIL) {

				Isdn_vn6_store_called_nb	(conn_rq,
											 cc_called_nb_type,
											 cc_called_nb_plan,
											 p_rq_address
											);

			}

				/*
					Store the Sending_complete IE if:
						- requested by the user,
						- or an address is beeing sent and CC is configured
						  in automatic sending_complete.
				*/

			if ((cc_sending_complete == ON) ||
				((p_rq_address != P_NIL) &&
				 !(Cc_na_out_calls_behaviour & CC_USER_SENDING_COMPLETE))
			   ) {
				Isdn_vn6_store_sending_complete	(conn_rq);
			}

			if (p_rq_subaddress != P_NIL) {

				uchar sub_add_size;

				sub_add_size = (uchar)cc_strlen (p_rq_subaddress);

#				ifdef CC_CALLED_SUB_ADD_WA
					if (p_rq_subaddress [sub_add_size-1] == '$') {
						p_rq_subaddress [sub_add_size-1] = '\0';
					}
#				endif

				if (Cc_na_country == BELGIUM) {

						/* For BELGIUM, use SUB_ADD_USER type */

					Isdn_vn6_store_called_sub_add_u(conn_rq,
													SUB_ADD_ODD,
													p_rq_subaddress,
													sub_add_size
												   );

				} else {

						/* For other countries, use SUB_ADD_OSI type */

					Isdn_vn6_store_called_sub_add  (conn_rq,
													SUB_ADD_OSI,
													SUB_ADD_ODD,
													p_rq_subaddress
												   );
				}

			}

			if (p_calling_address != P_NIL) {

				Isdn_vn6_store_calling_nb	(conn_rq,
											 cc_calling_nb_type,
											 PLAN_UNKNOWN,
											 cc_calling_nb_pres,
											 cc_calling_nb_screen,
											 p_calling_address
											);
			}

#			if CC_PAR_MULTIPLE_CALLING_NB == ON

					/* Second calling_nb if any */

				if (p_calling_address2 != P_NIL) {

					Isdn_vn6_store_calling_nb	(conn_rq,
												 cc_calling_nb2_type,
												 PLAN_UNKNOWN,
												 cc_calling_nb2_pres,
												 cc_calling_nb2_screen,
												 p_calling_address2
												);
				}

#			endif

			if (p_calling_subaddress != P_NIL) {

				Isdn_vn6_store_calling_sub_add(conn_rq,
											   SUB_ADD_OSI,
											   SUB_ADD_ODD,
											   p_calling_subaddress
											  );

			}


			cc_store_layer_1 = (Cc_service_bc_protocol_id_1 != BYTE_VAL_NIL);
			cc_store_5b_5c   = cc_store_layer_1 && (Cc_call_stop_bits != BYTE_VAL_NIL);

			Isdn_vn6_store_bc				(conn_rq,\
											 Cc_service_bc_trf_cap,\
											 Cc_service_bc_trf_mode,\
											 Cc_service_bc_trf_rate,\
											 Cc_service_bc_structure,\
											 Cc_service_bc_dest_rate,\
											 Cc_service_bc_protocol_id_1,\
					/* octet 5a */			 Cc_call_syn_asyn,\
											 Cc_service_bc_negotiation,\
											 cc_store_layer_1 ? Cc_call_user_rate     : BYTE_VAL_NIL,\
					/* octet 5b (V110) */	 cc_store_5b_5c ? INTER_RA_UNUSED         : BYTE_VAL_NIL,	/* inter_rate */\
											 cc_store_5b_5c ? NIC_NOT_RQ_TX_DATA      : BYTE_VAL_NIL,	/* nic_tx */\
											 cc_store_5b_5c ? NIC_NOT_ACCEPT_DATA     : BYTE_VAL_NIL,	/* nic_rx */\
											 cc_store_5b_5c ? FLOW_NOT_RQ_TX_DATA     : BYTE_VAL_NIL,	/* fc_tx  */\
											 cc_store_5b_5c ? FLOW_CANNOT_ACCEPT_DATA : BYTE_VAL_NIL,	/* fc_rx  */\
					/* octet 5c */			 cc_store_5b_5c ? Cc_call_stop_bits       : BYTE_VAL_NIL,	/* stop bits */\
											 cc_store_5b_5c ? Cc_call_data_bits       : BYTE_VAL_NIL,	/* data bits */\
											 cc_store_5b_5c ? Cc_call_parity          : BYTE_VAL_NIL,	/* parity */\
					/* octet 5d */			 BYTE_VAL_NIL,	/* duplex */\
											 BYTE_VAL_NIL,	/* modem */\
					/* octets 6+7 */		 Cc_service_bc_protocol_id_2,\
											 Cc_service_bc_protocol_id_3
											);

			cc_store_layer_1 = (Cc_service_llc_protocol_id_1 != BYTE_VAL_NIL);
			cc_store_5b_5c   = cc_store_layer_1 && (Cc_call_stop_bits != BYTE_VAL_NIL);

			if (Cc_service_llc_trf_cap != BYTE_VAL_NIL) {
				Isdn_vn6_store_llc_1_4		(conn_rq,
											 CODING_STD_CCITT,
											 Cc_service_llc_trf_cap,
											 OUT_BAND_NOT_POSSIBLE,
											 Cc_service_llc_trf_mode,
											 Cc_service_llc_trf_rate,
											 Cc_service_llc_structure,
											 Cc_service_llc_dest_rate
											);

				Isdn_vn6_store_llc_5_7		(Cc_service_llc_protocol_id_1,\
					/* octet 5a */			 Cc_call_syn_asyn,\
											 Cc_service_llc_negotiation,\
											 cc_store_layer_1 ? Cc_call_user_rate     : BYTE_VAL_NIL,\
					/* octet 5b, V110 */	 BYTE_VAL_NIL,	/* inter_rate */\
											 BYTE_VAL_NIL,	/* nic_tx */\
											 BYTE_VAL_NIL,	/* nic_rx */\
											 BYTE_VAL_NIL,	/* fc_tx  */\
											 BYTE_VAL_NIL,	/* fc_rx  */\
					/* octet 5b, V120 */	 cc_store_5b_5c ? HEADER_NOT_INCLUDED     : BYTE_VAL_NIL,	/* hdr    */\
											 cc_store_5b_5c ? MULTI_FRAME_NOT_SUPPORTED: BYTE_VAL_NIL,	/* multiframe */\
											 cc_store_5b_5c ? BIT_TRANSPARENT         : BYTE_VAL_NIL,	/* op_mode */\
											 cc_store_5b_5c ? DEFAULT_LLI             : BYTE_VAL_NIL,	/* lli_nogot */\
											 cc_store_5b_5c ? DEFAULT_ASSIGNEE        : BYTE_VAL_NIL,	/* assign */\
											 cc_store_5b_5c ? LL0                     : BYTE_VAL_NIL,	/* band_negot */\
					/* octet 5c */	 		 cc_store_5b_5c ? Cc_call_stop_bits       : BYTE_VAL_NIL,	/* stop bits */\
											 cc_store_5b_5c ? Cc_call_data_bits       : BYTE_VAL_NIL,	/* data bits */\
											 cc_store_5b_5c ? Cc_call_parity          : BYTE_VAL_NIL,	/* parity */\
					/* octet 5d */			 BYTE_VAL_NIL,	/* duplex */\
											 BYTE_VAL_NIL,	/* modem */\
					/* octet 6 */			 Cc_service_llc_protocol_id_2,\
											 BYTE_VAL_NIL,\
					/* octet 7 */			 Cc_service_llc_protocol_id_3,\
											 BYTE_VAL_NIL
											);
			}

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_vn6_store_chan_id_BRI	(conn_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_vn6_store_chan_id_PRI	(conn_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif

				}

			}

			if (p_cc_uui != P_NIL) {

				Isdn_vn6_store_uui			(conn_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

#			if CC_SPF_FAC == ON

					/* Charging request ? */

				if (cc_spf_facility_code != NIL) {

					Isdn_vn6_store_spf_fac		(conn_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 cc_spf_facility_code,
												 p_cc_empty_string
												);
				}

#			endif

#			if CC_SUPP_SERVICES == ON

				if (cc_facility_size != 0) {

					Isdn_vn6_store_t_facility	(conn_rq,
												 p_cc_facility,
												 cc_facility_size
												);
				}

#			endif

			break;

			/*------------------- CONNECTION RESPONSE --------------------*/

		case  NS_CONN_RS :
			Isdn_init_vn6_ctx_rq_rs 		(conn_rs,
											 p_data
											);


			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_vn6_store_chan_id_BRI	(conn_rs,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_vn6_store_chan_id_PRI	(conn_rs,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif

				}

			}

			if (p_cc_uui != P_NIL) {

				Isdn_vn6_store_uui			(conn_rs,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

#			if CC_PAR_DATE_TIME == ON

				if (cc_date_time.available != OFF) {

					Isdn_vn6_store_date_time	(conn_rs,
												 cc_date_time.year,
												 cc_date_time.month,
												 cc_date_time.day,
												 cc_date_time.hour,
												 cc_date_time.minute
												);
				}

#			endif

#			if CC_SUPP_SERVICES == ON

				if (cc_facility_size != 0) {

					Isdn_vn6_store_t_facility	(conn_rs,
												 p_cc_facility,
												 cc_facility_size
												);
				}

#			endif

			break;

			/*---------------- CONNECTION CLEAR REQUEST ------------------*/

		case  NS_CLEAR_RQ :
			Isdn_init_vn6_ctx_rq_rs			(clear_rq,
											 p_data
											);

			Isdn_vn6_store_cause			(clear_rq,
											 CODING_STD_CCITT,
											 LOCATION_USER,
											 RECOMMENDATION_Q931,
											 cc_error_class,
											 cc_error_value,
											 A_NIL
											);

			if (p_cc_uui != P_NIL) {

				Isdn_vn6_store_uui			(clear_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

#			if CC_SPF_FAC == ON

				if (cc_spf_facility_action != NIL) {
					p_cc_service = Cc_call_p_cc_service;
					Isdn_vn6_store_spf_fac		(clear_rq,
												 cc_spf_facility_action,
												 cc_spf_facility_code,
												 p_cc_empty_string
												);

					if (p_rq_address != P_NIL) {
						Isdn_vn6_store_called_nb(clear_rq,
												 NB_UNKNOWN,
												 PLAN_UNKNOWN,
												 p_rq_address
												);
					}

					if (p_rq_subaddress != P_NIL) {

						uchar sub_add_size;

						sub_add_size = (uchar)cc_strlen (p_rq_subaddress);

#						ifdef CC_CALLED_SUB_ADD_WA
							if (p_rq_subaddress [sub_add_size-1] == '$') {
								p_rq_subaddress [sub_add_size-1] = '\0';
							}
#						endif

						Isdn_vn6_store_called_sub_add_u(clear_rq,
														SUB_ADD_ODD,
														p_rq_subaddress,
														sub_add_size
													   );
					}

				}

#			endif

#			if CC_SUPP_SERVICES == ON

				if (cc_facility_size != 0) {

					Isdn_vn6_store_t_facility	(clear_rq,
												 p_cc_facility,
												 cc_facility_size
												);
				}

#			endif

			break;

			/*---------------- CONNECTION CLEAR RESPONSE -----------------*/

		case  NS_CLEAR_RS :
			Isdn_init_vn6_ctx_rq_rs			(clear_rs,
											 p_data
											);

			if (p_cc_uui != P_NIL) {

				Isdn_vn6_store_uui			(clear_rs,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

#			if CC_SUPP_SERVICES == ON

				if (cc_facility_size != 0) {

					Isdn_vn6_store_t_facility	(clear_rs,
												 p_cc_facility,
												 cc_facility_size
												);
				}

#			endif

			break;

		default :

			if (vn6_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}


				/*----------------------------------------*/

uchar vn6_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{
	switch (prim_code) {

			/*---------------- INFO REQUEST (digits) -------------------*/

		case  NS_INFO_RQ :
			Isdn_init_vn6_ctx_rq_rs			(info_rq,
											 p_data
											);

			if (cc_sending_complete != OFF) {
				Isdn_vn6_store_sending_complete (info_rq);
			}

			if (p_rq_address != P_NIL) {

				Isdn_vn6_store_called_nb	(info_rq,
											 NB_UNKNOWN,
											 PLAN_UNKNOWN,
											 p_rq_address
											);
			}

#			if CC_PAR_KEYPAD_IE == ON

				if (p_cc_keypad != P_NIL) {

					Isdn_vn6_store_keypad	(info_rq,
											 p_cc_keypad
											);
				}

#			endif

			break;

				/*---------------- ALERTING REQUEST ----------------------*/

		case  NS_ALERT_RQ :
			Isdn_init_vn6_ctx_rq_rs			(alert_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_vn6_store_chan_id_BRI	(alert_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_vn6_store_chan_id_PRI	(alert_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif

				}

			}

			if (p_cc_uui != P_NIL) {

				Isdn_vn6_store_uui			(alert_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

#			if CC_SUPP_SERVICES == ON

				if (cc_facility_size != 0) {

					Isdn_vn6_store_t_facility	(alert_rq,
												 p_cc_facility,
												 cc_facility_size
												);
				}

#			endif

			break;

				/*------------- CALL PROCEEDING REQUEEST ---------------*/

		case NS_CALL_PROC_RQ :

			Isdn_init_vn6_ctx_rq_rs			(call_proc_rq,
											 p_data
											);


			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_vn6_store_chan_id_BRI	(call_proc_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_vn6_store_chan_id_PRI	(call_proc_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif

				}

			}

			break;

			/*---------------- SETUP ACKNOWLEDGE REQUEST -------------------*/

		case NS_SETUP_ACK_RQ :

			Isdn_init_vn6_ctx_rq_rs			(setup_ack_rq,
											 p_data
											);


			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_vn6_store_chan_id_BRI	(setup_ack_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_vn6_store_chan_id_PRI	(setup_ack_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif

				}

			}

			break;

#	if CC_RESTART_PROCEDURE == ON /* { */

				/*---------------- RESTART_RQ */

		case NS_RESTART_RQ :
			Isdn_init_vn6_ctx_rq_rs			(restart_rq,
											 p_data
											);

			break;

				/*---------------- RESTART_RS */

		case NS_RESTART_RS :
			Isdn_init_vn6_ctx_rq_rs			(restart_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_vn6_store_chan_id_BRI	(restart_rs,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_sel
													);

						if (cc_chan_id[1] != NO_CHAN) {

							Isdn_vn6_store_chan_id_BRI	(restart_rs,
														 cc_chan_excl,
														 NOT_D_CHAN,
														 cc_chan_id[1]
														);
						}

#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_vn6_store_chan_id_PRI	(restart_rs,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_sel,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif

				}

			}

			Isdn_vn6_store_restart_ind		(restart_rs,
											 cc_restart_indicator
											);


			cc_chan_id[0] = NO_CHAN;

			break;

#	endif /* CC_RESTART_PROCEDURE == ON } */

	/*---------------- SUSPEND REQUEST --------------------------*/

		case  NS_SUSPEND_RQ :
			Isdn_init_vn6_ctx_rq_rs			(suspend_rq,
											 p_data
											);

			Isdn_vn6_store_call_id			(suspend_rq,
											 p_call_id
											);

			break;

	/*---------------- RESUME REQUEST --------------------------*/

		case  NS_RESUME_RQ :
			Isdn_init_vn6_ctx_rq_rs			(resume_rq,
											 p_data
											);

			Isdn_vn6_store_call_id			(resume_rq,
											 p_call_id
											);

			break;


	/*---------------- NATIONAL REGISTRATION REQUEST -------------*/

#	if CC_SPF_FAC == ON

		case  NS_SPF_REGISTRATION_RQ :
			Isdn_init_vn6_ctx_rq_rs			(spf_reg_rq,
											 p_data
											);

			Isdn_vn6_store_spf_fac			(spf_reg_rq,
											 cc_spf_facility_action,
											 cc_spf_facility_code,
											 p_rq_address
											);

			break;

#	endif

	/*---------------- NATIONAL FACILITY REQUEST -------------------*/

#	if CC_SPF_FAC == ON

		case  NS_SPF_FACILITY_RQ :
			Isdn_init_vn6_ctx_rq_rs			(spf_facility_rq,
											 p_data
											);

			Isdn_vn6_store_spf_fac			(spf_facility_rq,
											 cc_spf_facility_action,
											 cc_spf_facility_code,
											 p_cc_empty_string
											);

			break;

#	endif

	/*---------------- USER INFORMATION ----------------------------*/

		case NS_USER_INFO_RQ :
			Isdn_init_vn6_ctx_rq_rs			(user_info_rq,
											 p_data
											);


			if (p_cc_uui != P_NIL) {
				Isdn_vn6_store_uui			(user_info_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

			break;


				/*---------------- UNKNOWN primitive ---------------------*/

		default :
			return (NOK);
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn6_net_checking_service - implements the checking of a received
				call to determine the service requested.

Usage           uchar vn6_net_checking_service ();

Return value : 	vn6_net_checking_service returns a service code or UNKNOWN_SERVICE.

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar vn6_net_checking_service ()
{

	if (Get_ie_vn6 (conn_in, progress_ind) == PRESENT) {
		cc_interworking = ON;
	}

		/* Dispatch according to the transfer capability */

	switch (Isdn_get_val_vn6 (conn_in, bc, trf_cap)) {

			/*---------------*/
			/*     Speech    */
			/*---------------*/

		case TRF_CAP_SPEECH :
			return (CC_SRV_VOICE);

			/*---------------*/
			/* Audio 3.1 kHz */
			/*---------------*/

		case TRF_CAP_3_1_AUDIO :

			if (cc_interworking == ON) {
				return (CC_SRV_VOICE);
			}

			switch (Isdn_get_val_vn6 (conn_in, hlc, teleservice)) {

				case FAX_3 :
					return (CC_SRV_FAX);

				case TELEPHONY :
					return (CC_SRV_MODEM);

				default :
					return (CC_SRV_VOICE);

			}

			/*---------------*/
			/*  Audio 7 kHz  */
			/*---------------*/

		case TRF_CAP_7_AUDIO :
			return (CC_SRV_AUDIO_7);

			/*---------------*/
			/* Unrestricted  */
			/*---------------*/

		case TRF_CAP_UNRESTRICTED :

				/* Search for multi-channels rates */

			switch (Isdn_get_val_vn6 (conn_in, bc, trf_rate)) {

				case TRF_RATE_2x64KBS :
					return (CC_SRV_DATA_128KBS);

				case TRF_RATE_384KBS :
					return (CC_SRV_DATA_H0);

				case TRF_RATE_1536KBS :
					return (CC_SRV_DATA_H11);

				case TRF_RATE_1920KBS :
					return (CC_SRV_DATA_H12);

			}

				/* Dispatch according to layer 1 protocol */

			switch (Isdn_get_val_vn6 (conn_in, bc, protocol_id_1)) {

					/* X25 Application */

				case PROTOCOL_ID_1_X31 :
					return (CC_SRV_X25);

					/* Non CCITT rate adaptation */

				case PROTOCOL_ID_1_RA_NON_CCITT :
					return (CC_SRV_DATA);

					/* Rate adaptation CCITT V.110 */

				case PROTOCOL_ID_1_V110 :
					cc_layer_1_info.user_rate = Isdn_get_val_vn6 (conn_in, bc, user_rate);
					cc_layer_1_info.syn_asyn  = Isdn_get_val_vn6 (conn_in, bc, syn_asyn);

					if ((cc_layer_1_info.user_rate == RA_56KBS) &&
						(cc_layer_1_info.syn_asyn  == SYN)
					   ) {
						return (CC_SRV_DATA_56KBS);

					} else {

						cc_layer_1_info.stop_bits = Isdn_get_val_vn6 (conn_in, bc, stop_bit);
						cc_layer_1_info.data_bits = Isdn_get_val_vn6 (conn_in, bc, data_bit);
						cc_layer_1_info.parity    = Isdn_get_val_vn6 (conn_in, bc, parity);
						return (CC_SRV_V110);
					}

					/* None : use the LLC IE */

				case BYTE_VAL_NIL :

						/* Test if 'protocol_id_3' is coded X25_3 */

					if (Isdn_get_val_vn6 (conn_in, bc, protocol_id_3) ==
						PROTOCOL_ID_3_X25_PL) {

						return (CC_SRV_X25);
					}

					if (Get_ie_vn6 (conn_in, llc) == PRESENT) {

							/* Search for multi-channels rates */

						switch (Isdn_get_val_vn6 (conn_in, llc, trf_rate)) {

							case TRF_RATE_2x64KBS :
								return (CC_SRV_DATA_128KBS);

							case TRF_RATE_384KBS :
								return (CC_SRV_DATA_H0);

							case TRF_RATE_1536KBS :
								return (CC_SRV_DATA_H11);

							case TRF_RATE_1920KBS :
								return (CC_SRV_DATA_H12);

						}

								/* Dispatch according to layer 1 protocol */

						switch (Isdn_get_val_vn6 (conn_in, llc, protocol_id_1)) {

								/* X25 Application */

							case PROTOCOL_ID_1_X31 :
								return (CC_SRV_X25);

								/* Rate adaptation CCITT V.110 */

							case PROTOCOL_ID_1_V110 :
								cc_layer_1_info.user_rate = Isdn_get_val_vn6 (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_vn6 (conn_in, llc, syn_asyn);

								if ((cc_layer_1_info.user_rate == RA_56KBS) &&
									(cc_layer_1_info.syn_asyn  == SYN)
								   ) {
									return (CC_SRV_DATA_56KBS);

								} else {

									cc_layer_1_info.stop_bits = Isdn_get_val_vn6 (conn_in, llc, stop_bit);
									cc_layer_1_info.data_bits = Isdn_get_val_vn6 (conn_in, llc, data_bit);
									cc_layer_1_info.parity    = Isdn_get_val_vn6 (conn_in, llc, parity);
									return (CC_SRV_V110);
								}

							case PROTOCOL_ID_1_V120 :
								cc_layer_1_info.user_rate = Isdn_get_val_vn6 (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_vn6 (conn_in, llc, syn_asyn);
								cc_layer_1_info.stop_bits = Isdn_get_val_vn6 (conn_in, llc, stop_bit);
								cc_layer_1_info.data_bits = Isdn_get_val_vn6 (conn_in, llc, data_bit);
								cc_layer_1_info.parity    = Isdn_get_val_vn6 (conn_in, llc, parity);
								return (CC_SRV_V120);

						}

					}

			}

			switch (Isdn_get_val_vn6 (conn_in, hlc, teleservice)) {

				case FAX_4 :
					return (CC_SRV_FAX_4);

			}

			return (CC_SRV_DATA);

			/*---------------*/
			/*     Video     */
			/*---------------*/

		case TRF_CAP_VIDEO :
			return (CC_SRV_VIDEO);

		default :
			break;

	}

	return (CC_SRV_NIL);

}

#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar	vn6_cc_load_ns_test	(p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
