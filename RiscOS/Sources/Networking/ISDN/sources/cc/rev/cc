		/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
		/*                            */
		/*  CC versions descriptions  */
		/*                            */
		/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

Revision_string (_CC_VERSION, "(@)CC v6.11a (04 Jul 97)")

#if 0

v6.11a (04 Jul 97)
------------------
	- corrected 56k-related changes done in v6.11:
	  when the ACU_CONN_RQ was sent with a ph_rate of 56k, but a different
	  user_rate, then CC would not send a V110/SYN/56k BC to NS.
	  Now CC sends a V110/SYN/56k BC as soon as it gets a ph_rate of 56k,
	  regardless to the user_rate nor other layer_1_info fields.
	  (cc_state.c, cc_proc.c)

	- simulation:
		- added a new scenario file for 56k calls tests: acu_56k.s
		- added printing of the 'ph_rate' field. (ana_acu.c)
		- modified building of ACU_CONN_RQ to test 56k combinations.
		  (sim_appl.c)

v6.11 (02 Jul 97)
-----------------
	- when receiving a Data-class call with a progress-indicator IE
	  coded as "Non end-to-end ISDN call" (description=1), then assume
	  that the call is a 56kbs call. This is to detect incoming USA 56kbs
	  calls in the ETSI-like variants.
	  (cc_proc.c)

	- send the ph_rate in MPH_B_INIT_RQ if the call is a Data-like call.
	  (cc_proc.c, cc_state.c)

	- the V110 service is not a RELAY service. Fixed. (cc.c)

	- ARINC: added DATA_56KBS services descriptions. (cc_serv.*)

	- ETS+VN6:
	  added reading of Progress-Indicator IE in NS_CONN_IN, NS_SETUP_ACK_IN,
	  NS_CALL_PROC_IN, NS_ALERT_IN, and NS_CONN_CO, and stored it in the
	  related ACU primitives: ACU_CONN_IN, ACU_ALERT_IN, ACU_PROGRESS_IN.
	  (ACU_CONN_CO does not provide the progress-ind IE at the moment).
	  (cc_proc.ets+vn6, cc_state.c)

	- US networks:
	  removed following modification done in version v6.0:
	  "when requesting for an outgoing DATA-type call with 'ph_rate' set to
	  RA_56KBS, then use the ACU_SERVICE_56KBS to code the Q.931 message."
	  This modification is now done for ALL operators in cc_state.c.
	  (cc_build.*)

	- simulation:

		- added '2' in the list of values for the 'H' flag.
		  This allows to print out both the full ACU info and the hex dump.
		  (s34.c+ana_acu.c)
		- allowed to specify ph_rate of 56k for ANY service by using the
		  following syntax for the called number string:
		  "123456*789at56" (appending "at56").

v6.10 (01 Jul 97)
-----------------
	- ALL variants except TR6+AT5+ARINC:
	  added processing of Calling Number IE, including the Screening
	  Indicator field, and multiple occurencies.
	  (cc_proc.*)

	- QSI: corrected compilation error occuring when NS_SUPP_SERVICES is ON.

v6.9 (20 Jun 97)
----------------
	- ACU interface: replaced 'progress_loc' and 'progress_descr' fields by
	  the 'acu_progress_ind' sub-structure, allowing to perform multiple
	  progress indicator IEs.

	- cc_par.h: added 'ACU_MX_PROGRESS_IND' parameter: max nb of progress
	  indicator IEs stored in the ACU primitives.

	- A17 : fixed a compilation pb (cc_build.a17, appeared in v6.6a)
	- AT4 : fixed a compilation pb (cc_proc.at4, appeared in v6.7)

v6.8a (12 Jun 97)
-----------------
	- do not send NS_CLEAR_RQ to reject an NS_ERR_IN.
	  This was generating an infinite message exchange between NS and CC
	  (NS_ERR_IN/NS_CLEAR_RQ) when the NS_ERR_IN message was received on
	  an unknown nai/conn_id. Appeared in v6.8.
	  (cc_rcv.c)

v6.8 (11 Jun 97)
----------------
	- reject any message coming from NS with a context error (no more free
	  context available, or erroneous nai or conn_id).
	  The rejection is done with NS_CLEAR_RQ [cause User-busy].
	  (cc_rcv.c)

	- ETS: fixed processing of 'Retrieve' facility:
	  in case of a reject from the network, CC would send ACU_FACILITY_CO
	  with ACU_CO_ACK (acknowledged) instead of ACU_CO_REJ (rejected).
	  Now CC sends it with ACU_CO_REJ.
	  (cc_proc.ets)

v6.7 (30 May 97)
-----------------
	- NTT : added reading of Progress-Indicator IE in NS_ALERT_IN.
	  (cc_proc.ntt)

	- Added 'plan' field in the 'acu_called_nb' structure (acu_int.h).

	  The available values are :
		ACU_NB_PLAN_UNKNOWN		G_4 (0,0,0,0) : unknown
		ACU_NB_PLAN_ISDN		G_4 (0,0,0,1) : ISDN/telephony numbering plan
		ACU_NB_PLAN_TELEPHONE	G_4 (0,0,1,0) : telephony - not in CEPT
		ACU_NB_PLAN_DATA		G_4 (0,0,1,1) : data numbering plan (CCITT X.121)
		ACU_NB_PLAN_TELEX		G_4 (0,1,0,0) : telex numbering plan (CCITT F.69)
		ACU_NB_PLAN_NATIONAL	G_4 (1,0,0,0) : national standard numbering plan
		ACU_NB_PLAN_PRIVATE		G_4 (1,0,0,1) : private numbering plan
		ACU_NB_PLAN_RESERVED	G_4 (1,1,1,1) : reserved for extension

	- ETS+VN6: added reading of Called-nb-plan field. (cc_proc.*)

	- AU1+AT4+AT5+AT9+BIP+DMS+E10+NI1+NI2:
	  added reading of Called-nb-type in NS_CONN_IN. (cc_proc.*)

	- E10+NI2+DMS: (FG_NT_TE, BRI)

	  Added transparent process of the SPID :

		- acu_int.h :
			. Added 'acu_endpoint_id' structure in ACU_CONN_RQ and in
			  ACU_INFORMATION_RQ/IN.
			. Added SPID and CES information in ACU_INFORMATION_RQ/IN.

		- Added recognition of ACU_INFORMATION_RQ on ACU_SAPI_MGT,
		- E10+NI2+DMS: added recognition of the endpoint Id and SPID info.

		* ACU (FG_NT_TE)           CC                            NS
		*
		*    (ACU_SAPI_MGT)              (CONN_ID_MANAGEMENT)
		*    ACU_INFORMATION_IN          NS_INFO_IN (with SPID)
		*    <==================         <=================
		*
		*    (ACU_SAPI_MGT)              (CONN_ID_MANAGEMENT)
		*    ACU_INFORMATION_RQ          NS_INFO_RQ (with Endpoint Id or error)
		*    ==================>         =================>

		The ACU_INFORMATION_IN contains :
			- The SPID sent by the terminal
			- The CES on which the SPID was received.

		The ACU_INFORMATION_RQ 'action' may contain :
			ACU_ACTION_NO_ENDPOINT_ID      : structure is meaningless.
			ACU_ACTION_SND_USID            : SPID was OK.
			ACU_ACTION_NO_SPID_NEGOTIATION : negotiation is not supported.
			ACU_ACTION_INVALID_SPID        : The received SPID is wrong.
			ACU_ACTION_PROMPT_INFO         : Need a SPID from the terminal.

		The CES received in the ACU_INFORMATION_IN must be returned.

		A NT may specify a Endpoint Id in the ACU_CONN_RQ to select a terminal.

	- E10+NI2+DMS (FG_NT_TE, BRI):
	  Send the digits of a NS_CONN_RQ in a called number instead of in
	  a keypad.

v6.6b (23 May 97)
-----------------
	- allowed more than 1 held call per access on BRI interface. It was
	  limited to only one held call.
	  (cc_state.c)

v6.6a (14 May 97)
-----------------
	- modified conditions for sending the 'sending complete' IE in
	  NS_CONN_RQ: it could not be sent if no 'called_nb' was sent.
	  (cc_build.A17,HKT,NTT,ETS,QSI,VN3,VN6,BT2,AT5, sim_appl.c, ana_acu.c)

v6.6 (14 May 97)
----------------
	- added 'Progress Indicator' IE in ACU_CLEAR_IN:
		- added 'progress_loc' and 'progress_descr' fields in ACU_CLEAR_IN
		  (acu_int.h)
		- added reading of 'Progress Indicator' IE from NS_CLEAR_IN.
		  (cc_switc.c, cc_proc.AU1,HKT,KDD,NTT,BV1,ETS,SWD,VN6)

	- added tests on 'CC_PAR_PROGRESS_IND_IE' parameter.
	  Reduces the code when it is set to OFF. No functional impact.
	  (cc_proc.*)

v6.5b (05 May 97)
-----------------
	- PARAMETERS:
	  removed useless CC_MX_NA parameter. (cc_par.h, cc_int.h)

	- removed tests against Na_nb for the NAIs listed in the configuration
	  structure. They were useless. (cc_accss.c)

	- VN6: fixed compile-time bug appeared in v6.1 (20 Mar 97).
	  (cc_undef.h, cc_proc.c, cc_rcv.c, cc_state.c, cc_switc.c)

v6.5a (30 Apr 97)
-----------------
	- NTT:
		Added the offset initialization when building a NS_RESTART_RQ.
		This allows the right data size computation. (cc_build.ntt)

	- fixed some minor warnings (cc_proc.c, cc_state.c, cc_build.*)

v6.5 (25 Apr 97)
----------------
	- AU1, HKT, KDD, NTT, ETS, VN6, QSI, AT4, AT5, AT9, E10, DMS, NI1, NI2:
	  Added missing reading of channel_id information element in NS_ALERT_IN,
	  causing undefined B-channel number to be used when receiving
	  NS_ALERT_IN as the first answer to an outgoing call request.
	  (cc_proc.*)

	- AU1:
	  Added missing reading of channel_id information element in NS_CONN_CO.
	  (cc_proc.au1)

	- HKT:
	  Added missing reading of channel_id information element in NS_RESUME_CO.
	  (cc_proc.hkt)

v6.4a (18 Apr 97)
-----------------
	- AT5:
		- modified service checking function to read the layer-1
		  information (syn_asyn, user_rate) when a V.110 LLC is received.
		- Removed AUDIO_7 and VIDEO services (not available in AT5).
	  (cc_build.at5)

v6.4 (16 Apr 97)
----------------

	- INTERFACE:

	  Added new services:

		- CC_SERVICE_RAW_TELEPHONY (= ACU_RAW_TELEPHONY_SERVICE):
		  identical to CC_SERVICE_TELEPHONY (= ACU_VOICE_SERVICE),
		  but does not generate MPH_B_INIT_RQ/STOP_RQ messages.

		- CC_SERVICE_RAW_DATA      (= ACU_RAW_DATA_SERVICE):
		  identical to CC_SERVICE_DATA_HDLC (= ACU_DATA_SERVICE),
		  but does not generate MPH_B_INIT_RQ/STOP_RQ messages.

	  These services are for use with calls where no B-channel driver
	  is to be used.

	  (cc_int.h, acu_int.h, cc.c, cc_proc.c, ana_cc.c)

	- CONFIGURATION STRUCTURE: (cc_int.h):
	  Added 'sapi_user' field in the additional local nb
	  lists: allows to send the ACU_CONN_IN/CC_RING_IN message to a
	  particular upper entity, according to the address filtering result.
	  (cc_int.h, cc.h, cc.c, cc_rcv.c, cc_switc.c)

	- check against voice-class instead of VOICE/TELEPHONY services to
	  send NS_ALERT_RQ or NS_CONN_RS on incoming calls when required by
	  the configuration (CC_DATA_ALERT_RQ, CC_VOICE_ALERT_RQ,
	  CC_DATA_CONN_RS and CC_VOICE_CONN_RS behaviours).
	  MODEM or RAW_TELEPHONY incoming calls would not generate NS_ALERT_RQ
	  or NS_CONN_RS even if required by the 'in_calls_behaviour'
	  configuration field.
	  (cc_state.c)

	- E10: bug fix: no overlap sending call could be made if CC_SPF_FAC
	  was set to OFF. Fixed. (cc_build.e10)

v6.3a (15 Apr 97)
-----------------
	- AU1+AT4+AT9+E10+NI1+NI2+DMS+BIP:
	  Added reading of V.110 and V.120 layer-1 information out of the BC
	  or LLC information elements when receiving an NS_CONN_IN.
	  This information was not provided to the user for these operators.
	  (cc_build.*)

v6.3 (14 Apr 97)
----------------
	- ETS:
	  added generation of 'Explicit Call Transfer' facility (ECT) in
	  accordance with the existing ACU interface for the
	  'Supervised transfer' facility.
	  (cc.c, cc_state.c, cc_switc.c, cc_proc.c, cc.h, cc_build.ets)

	- added missing tests on CC_UUI compile-time parameter to reduce code
	  size when it is set to OFF.

	- fixed problem in CC interface mode, occuring when CC sends back an
	  NS_CLEAR_RQ because of an error detected in a message received from
	  NS (e.g. a call received with a B-channel already allocated),
	  containing some UUI: the NS_CLEAR_RQ would contain a wrong UUI info.
	  (cc_proc.c)

	- Simulation: added ability to disable facility IE generation in
	  outgoing ACU primitives (bit #2 of 'C' flag). (s34.c, sim_appl.c)

v6.2 (07 Avr 97)
----------------

	- ACU INTERFACE: (acu_int.h)
	  added redir_nb field in ACU_CONN_CO and ACU_ALERT_IN primitives.

	- AT4, AT9, E10, DMS, NI2:
	  added processing of 'redir_nb' IE in ACU_CONN_IN, ACU_CONN_CO,
	  and ACU_ALERT_IN primitives. (cc_proc.*, cc_state.c, cc_proc.c, cc.h)

	- corrected processing of NS_USER_INFO_IN: the Acu_user_info_uui_size
	  field was not set properly (remained set to 0).
	  (cc_state.c)

v6.1b (25 Mar 97)
-----------------
	- Restart procedure :
	  fixed bug: a Restart received with 1 Channel ID indicating
	  "Any Channel" was not processed properly.
	  (cc_switc.c, cc_proc.c, cc_proc.*, cc_build.ets+vn6)

	- optimized use of Buffer_a_first_data macro in building functions.
	  (cc_snd.c, cc_build.*, cc_fct.*)

	- AT4: corrected compilation error appeared in v6.1. (cc_build.at4)

	- ana_acu.c: corrected compilation error when ARINC networks are used.
	  Appeared in v6.1.

v6.1a (24 Mar 97)
-----------------
	- ETS: corrected compilation problems appeared in v6.1 when CC_SPF_FAC
	  is ON and NS_HOLD_RETRIEVE is OFF, or NS_SUPP_SERVICES is OFF.
	  (cc_build.ets)

	- fixed link problem appeared in v6.1 when ACU_INTERFACE is OFF.
	  (cc_state.c)

v6.1 (20 Mar 97)
----------------
	- Restart procedure (PRI): (cc_switc.c)
	  fixed bug: a Restart received with a list of B-channels was not
	  processed properly: all received B-channels were not disconnected.

	- Parameters: (cc_par.h)
	  added 'CC_PAR_SIGNAL_IE' and 'CC_PAR_PROGRESS_IND_IE' flags (ON/OFF)
	  to enable processing of Signal and Progress-Indicator IEs.
	  Only available for NI2, E10, DMS and ARINC networks at the moment.

	- Configuration structure (cc_int.h):
	  added 'CC_SEND_DIGIT_CO_ON_PROGRESS' bit value for the
	  'out_calls_behaviour' field. See cc_int.h for details.

	- fixed bug with Display IE processing: if a Display IE is received
	  from NS, and CC automatically answers to NS, then a NULL pointer
	  access occured, generating a dummy (invalid) Display IE to be sent
	  in the answer. Fixed. Bug appeared in v5.57. (cc_proc.c)

	- NI2+E10+DMS:
	  extended processing of Signal and Progress-Indicator IEs. (cc_proc.*)

	- E10 (cc_build.e10)
	  Allowed recognition of an incoming AUDIO 3.1 service with BRI.

	- AT4: when making an H0 (resp. H11) outgoing call, set the
	  chan_id/chan_type field to H0_CHAN (resp. H11_CHAN) instead
	  of B_CHAN. (cc_build.at4)

	- VN6: send back NS_CLEAR_RS automatically when receiving an NS_CLEAR_IN
	  after having sent NS_CLEAR_RQ (clearing collision) for FRANCE country
	  only: the NS_CLEAR_RQ could have been ignored by NS if the state of
	  the call was u7 (alerting).

	- ETS+VN6+VN3+VN2:
	  in the service checking function, removed the test on 'interworking'
	  for 'unrestricted' BC so that all available service information
	  is taken into account.

v6.0a (24 Jan 97)
-----------------
	- AT5+E10 :
		Added tests on XXX_SUPPLEMENTARY_SERVICES to avoid compilation
		errors if it is set to OFF in ns\usa\net_par.xxx

v6.0 (23 Jan 97)
----------------

	-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	NEW BASE VERSION NUMBER : 6.*
	-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	- added support of PIC code (Position-Independant Code).
		  !!! Requires Services version >= v3.54 !!!
	  (cc.c, cc_proc.c, cc_fct.h, cc_serv.*, cc_fct.*)

	- declared signed 'char' variables explicitly ('signed char'). With some
	  compilers, the 'char' type would default to 'unsigned char'.
	  (cc_proc.c, cc_rcv.c, cc_snd.c, cc_state.c, cc_switc.c,
	  cc.h, cc_build.*)

	- US operators:
	  when requesting for an outgoing DATA-type call with 'ph_rate' set to
	  RA_56KBS, then use the ACU_SERVICE_56KBS to code the Q.931 message.
	  (cc_build.*)

*****************************************************************************

v5.59 (07 Jan 97)
-----------------

!!!! This version requires NS version >= v5.25 for Restart procedures !!!!

	- cc_par.h : Added some more comments for the AT&T versions
	  (CUSTOM versus NATIONAL).

	- Bug fix: appeared in v5.55 (09 Dec 96):
	  in NT side, no NS_CONN_RS was generated anymore after having generated
	  an ACU_CONN_CO. This would prevent the NT from establishing outgoing
	  calls. (cc_state.c)

	- Added BRI version of E10.

	- Do not send a NS_RESTART_RQ anymore when receiving a NS_RESTART_IN
	  indicating "RI_ALL_INTERFACES" : now handled internally by NS.

v5.58 (23 Dec 96)
-----------------
	- VN6: fixed problem appeared in v5.55: the charging value extracted
	  from the Specific-Facility IE was corrupted. (cc_proc.c)

v5.57 (19 Dec 96)
-----------------
	- ACU interface:
		- added 'display' fields (struct acu_display_list) in the
		  following primitives:
		  ACU_CONN_RQ, ACU_CALL_PROC_RQ, ACU_ALERT_RQ, ACU_CONN_RS,
		  ACU_CLEAR_RQ, ACU_CLEAR_RS, ACU_FACILITY_RQ, ACU_INFORMATION_RQ.
		  (cc_state.c, cc_switc.c, cc_proc.c, cc_rcv.c, cc.h)

	- ETS: implemented 'display' IE in ACU_..._RQ/RS primitives, usable
	  for NT-side only.

	- Simulation:
		- corrected analysis of ASN1 facility IEs. (ana_acu.c)
		- corrected printing of 'semi_permanent' call context
		  field. (ana_cc.c)

v5.56 (16 Dec 96)
-----------------
	- ETSI ASN1 facilities: (AOC and CUG)
		- added missing processing of ASN1 facility IE in ACU_USER_INFO_RQ
		  and ACU_FACILITY_RQ. (cc_state.c)

	- ACU interface: (acu_int.h):
		- added 'cause', 'progress_loc' and 'progress_descr' fields in
		  ACU_PROGRESS_IN[ACUEV_INTERWORKING] (i.e. from NS_PROGRESS_IN)
		  for all networks that provide them. (cc_state.c, cc_proc.*)

	- bug fix: if CC did not automatically send back an answer on
	  an incoming call (driven by configuration), then, upon receipt of
	  an ACU_CALL_PROC_RQ, ACU_ALERT_RQ or ACU_CONN_RS with no B channel
	  id, no B channel would be allocated by CC. (cc_state.c, cc_proc.c)

	- VN3/VN6: fixed bug occuring when using the Hold/Retrieve mechanism:
	  when a call using a B-channel attached to 2 different call contexts
	  due to a hold condition was cleared, the reference to the B-channel
	  inside the call context was not reset. This would make CC ignore the
	  B-channel given in a further call using that call context.

	- bug fix: when using the buffered OVERLAP_RECEIVING mode, an
	  incompatible incoming call would unlikely be accepted if the number
	  of digits received is less than the minimum required to generate
	  an immediate ACU_CONN_IN.

v5.55 (09 Dec 96)
-----------------
	- ETSI ASN1 facilities: (AOC and CUG)
		- added missing processing of Facility message with ASN1
		  facility IE (NS_FAC_IN): sends an ACU_INFORMATION_IN to the user.
		  (acu_int.h, cc_switc.c)
		- added missing processing of ASN1 facility IE in ACU_USER_INFO_IN
		  (from NS_USER_INFO_IN), ACU_PROGRESS_IN (from NS_CALL_PROC_IN)
		  (acu_int.h, cc_state.c)
		- corrected computation of the size of the ACU_CONN_CO primitive
		  when an ASN1 facility is beeing sent: the size was lower
		  than the actual data stored into the message/buffer.
		  It could cause a message overflow.

	- Semi-permanent circuits:
	  Modified storing of Acu_conn_in_semi_permanent_circuit field: the
	  value was 0xff instead of OFF for other operators than AU1
	  (Australia). (cc_rcv.c, ana_acu.c)

	- Charging information: bugs fixes:
		- The charging value was always 0 in ACU_CLEAR_IN instead of beeing
		  the actual charging value. (cc_switc.c)
		- Set 'Acu_..._charging_type' field to ACU_BYTE_VAL_NIL when
		  no charging information is available, instead of setting
		  'Acu_..._charging' field (i.e. the value itself).
		  (cc_switc.c, cc_state.c)
		- VN2+VN3+VN6: only the least significant byte of the charging
		  value (which is a 'long') was read from the
		  'Specific-Facility' IE. (cc_proc.*)

	- optimizations: (cc.c, cc.h, cc_rcv.c, cc_switc.c, cc_state.c)
		- removed useless calls to 'R_a_data' and 'Isdn_init_ctx_in_co()'.
		- reading of the 'exclusive' field of the 'chan-id'
		  from NS primitives.
		- processing of NS_USER_INFO_IN (added a function).
		- reading of the 'display' IE from NS primitives (added a function).
		- storing of extended parameters in ACU primitives (added a function).
		- replaced several 'goto' statements by functions (cc_state.c).

	- fixed compilation bug appeared in previous version (v5.54) occuring
	  only with CC_OVERLAP_RECEIVING set to ON. (cc_state.c)

v5.54 (02 Dec 96)
-----------------
	- ACU INTERFACE: (acu_int.h) moved 'ACU_SAPI_MULTI_CHAN' definition
	  from cce_int.h to acu_int.h.

	- Implemented 'semi-permanent circuit' calls
	  for AU1 operator variant only at the moment, on TE-side.

		!!! This feature requires NS version >= v5.21 !!!

		- PARAMETERS: (cc_par.h)
		  Added 'CC_PAR_SEMI_PERMANENT_CIRCUIT' parameter
		  (ON/OFF, default is OFF).

		- ACU INTERACE: (acu_int.h)
		  Added Acu_conn_in_semi_permanent_circuit field in
		  ACU_CONN_IN primitive (ON/OFF).

	- Keypad facility on NT side: (CC_PAR_KEYPAD_IE ON):
	  added processing of ACU_INFORMATION_IN during dialling phase in
	  transparent overlap receiving mode.

	- ACU_INFORMATION_IN primitive: set 'Acu_information_charging_type'
	  to ACU_BYTE_VAL_NIL when no charging information is available,
	  instead of setting 'Acu_information_charging' (the value itself).
	  (cc_switc.c, cc_state.c)

	- AT4: cc_build.at4, cc_serv.at4: modified coding of X25, FAX_3 and
	  AUDIO_MODEM services.

	- cc_build.h: added a 'Cc_bc_3_1_audio_nil' macro to be able to
	  send a BC with no protocol_id_1 (required for AT4).

	- optimized reading of cause, called_nb, called_sub_add, facility,
	  keypad, progress_ind, signal, credit_card_nb and credit_card_status
	  IEs from NS primitives (use functions instead of direct fields reading
	  macros).
	  (cc_rcv.c, cc_proc.c, cc_state.c, cc_switc.c, cc.h, cc.c)

	- simulation: upgraded s34.c to fit with the new 'S' simulator command
	  (Set-flag-values). !!! This requires SIMUL version >= v2.5 !!!

v5.53 (22 Nov 96)
-----------------
	- ACU interface, all networks:
		- added channel-id list & chan_id_excl fields in ACU_ALERT_IN
		  primitive (Acu_alert_in_chani_... macros).
		  (cc_state.c, cc_proc.*)

	- When in overlap-receiving mode, do not send automatically
	  ACU_ALERT_IN after ACU_CONN_IN if not required by configuration.
	  (cc_state.c)

	- added processing of ACU_INFORMATION_RQ in the Overlap-Sending state
	  to allow Keypad features invocation during dialling phase.
	  (cc_state.c)

	- VN6: Hold/transfer processing: fixed problem: CC would not send an
	  outgoing call specifying a B-channel already used by another call
	  which would be held, preventing from requesting the "transfer"
	  facility. (cc_state.c)

	- simulation: added printing of CC version string (if compiled).

v5.52a (15 Nov 96)
------------------
	- ETSI ASN1 facilities:
		- bug fix: in case of an automatic answer
		  generated by CC (e.g. NS_ALERT_RQ after NS_CONN_IN), then the
		  received ASN1 facility was sent back in the answer.
		  (cc_snd.c, cc_switc.c, cc_state.c, cc_rcv.c, cc_proc.c)

		- added analysis of the ETSI ASN1 facilities elements in the
		  ACU primitives. (ana_acu.c)

v5.52 (14 Nov 96)
-----------------
	- ACU interface: added support of ETSI ASN1 facility Information
	  Element. (acu_int.h)

	- Added file: acu_ss.h, containing ETSI ASN1 facility-related
	  structures and macros.

	- Parameters: (cc_par.h)
		- added ACU_PAR_EXT_FAC_ASN1 parameter (ON/OFF);
		- updated to fit with ns_par.h for M34 simulator;

	- Bug fix: when CC_PAR_KEYPAD_IE is ON, then a 'dummy' Keypad IE could
	  be sent to NS when processing an ACU_DIGIT_RQ, due to a lack of
	  pointer initialization. (cc_rcv.c, cc_state.c)

	- Modified files: cc.h, cc.c, cc_proc.c, cc_snd.c, cc_switc.c,
	  cc_state.c, ana_acu.c, sim_appl.c.

v5.51 (06 Nov 96)
-----------------
	- corrected a possible reading in P_NIL when receiving an incompatible
	  incoming call after having processed a compatible call. (cc_state.c)

	- removed useless test in 'cc_rcv()'. (cc_rcv.c)

	- DMS: for 'TELEPHONY' and 'TELEPHONY_GCI' services, send BC=speech
	  instead of 3.1 Audio. (cc_serv.dms)

	- DMS+AT4+AT9+E10+NI2: corrected xxx_net_checking_service() for X25,
	  V110, V120 and VIDEO services detection. (cc_build.*)

v5.50 (30 Oct 96)
-----------------
	- added processing of CUG ETSI-ASN1 and 1TR6 facility in ACU interface
	  (extended IE).
	  (cc_proc.ets+tr6, cc_build.ets+tr6)

	- calls originated by the Network have precedance over calls originated
	  by the terminals, in case of B-channel conflicts.
	  When receiving an incoming call from the Network indicating the same
	  B-channel as the one of an outgoing call in progress, reject the
	  incoming call only if the network has sent at least one answer to the
	  outgoing call request, otherwise, clear the outgoing call (from TE)
	  and accept the incoming one (from Network).
	  (cc_state.c)

	- Fixed missing process of change of operator in RESET CONFIGURATION
	  procedure (it could cause a Trap when trying to configure a new
	  operator). (cc.c, cc_proc.c, cc_fct.h, cc.h)

v5.49 (24 Oct 96)
-----------------
	- added capability to handle "extended" information elements within
	  ACU_CONN_IN and ACU_CONN_RQ primitives only, for ETS variant only.

	- changes description:

		- ACU INTERFACE: (acu_int.h)
			  - Modified primitives: ACU_CONN_RQ and ACU_CONN_IN.
			  - Added elements: "extended LLC".

		- PARAMETERS: (cc_par.h)
			- added ACU_PAR_EXTENDED_PRIM (ON/OFF) parameter to
			  enable/disable extended information elements processing.

		- *.c and *.h files modified:
		  cc.c, cc_state.c, cc_proc.c, cc.h, cc_ie.h.

		- ETS: added extended information elements processing.
		  (cc_proc.ets, cc_build.ets)

		- enhanced simulation files for extended information elements
		  processing. (ana_acu.c, sim_appl.c)

v5.48 (14 Oct 96)
-----------------

	!!! Requires NS >= v5.13 for UUI in NI2 !!!

	- NTT: fixed incoming calls service determination routine: was not
	  working for BC=V110 or V120. (cc_build.ntt)

	- HKT: fixed incoming calls service determination routine: was not
	  working for BC=V120. (cc_build.hkt)

	- NI2: added processing of UUI Information Element. 
          (cc_proc.ni2, cc_build.ni2)


v5.47 (03 Oct 96)
-----------------
	- cc_rcv.c : added missing process of NS_SPF_FACILITY_CO received on
	  CONN_ID_MANAGEMENT.

	- ETS+VN6: use Isdn_store_ets_llc_1_4() and
	  Isdn_store_ets_llc_5_7() macros instead of Isdn_store_ets_llc()
	  which is causing problems to some compilers due to the high number of
	  parameters. (cc_build.*)

	- SIMULATION: added capability of building non-standard SM messages on
	  a byte per byte basis. (sim_appl.c)

v5.46 (25 Sep 96)
-----------------
	- cc_par.h:
		- added CC_PAR_SECOND_CALLING_NB parameter (ON/OFF, OFF by default)
		  to enable processing of the second calling number if it is
		  available (VN6 only).

		- added CC_PAR_REDIR_NB parameter (ON/OFF, OFF by default)
		  to enable processing of the 'redirection' number if it is
		  available (VN6 only).

	- ETS+VN6: implemented 'calling_nb_screen' field in ACU_CONN_IN.

	- VN6: implemented second calling number in ACU_CONN_IN.
	  (!!! requires NS version >= v5.11 !!!)

	- VN6: implemented 'redir_nb' (digits string and related fields: type, pres,
	  screen, reason) (VN6 only).

	- ETS+VN6: implemented 'date_time' in ACU_CONN_RS (it was already
	  available in ACU_CONN_CO since version v5.43).
	  In both ACU_CONN_RS and ACU_CONN_CO, the Acu_conn_rs/co_date_available
	  field is used to specify if the date_time parameters are available (ON)
	  or not (OFF). (cc_state.c, acu_int.h, cc_build.*).

	- acu_int.h:
		- updated 'acu_conn_rq_args' structure:
			- replaced 'called_nb_type' and 'called_nb_size' fields by
			  'acu_called_nb' structured field (compatible with previous
			  definitions)
		- updated 'acu_conn_in_args' structure:
			- replaced 'called_nb_type' and 'called_nb_size' fields by
			  'acu_called_nb' structured field (compatible with previous
			  definitions)
			- replaced 'redir_nb_size' field by 'acu_redir_nb' structured
			  field: the following macros are now available:
				- Acu_conn_in_redir_nb_pres:   presentation
				- Acu_conn_in_redir_nb_type:   type of number
				- Acu_conn_in_redir_nb_screen: screening indicator
				- Acu_conn_in_redir_nb_reason: reason for redirection
				- Acu_conn_in_redir_nb_size
				- Acu_conn_in_a_redir_nb:      size and address of digits string.

v5.45 (10 Sep 96)
-----------------
	- cc_par.h:
		- added CC_PAR_KEYPAD_IE parameter (ON/OFF, OFF by default):
		  processing of Keypad Information Element in
		  ACU_INFORMATION_RQ/IN.
		- set CC_F_ETS flag to ON so that the M34 simulator (NS+CC)
		  compiles properly.

	- acu_int.h:

		!!! NOT IMPLEMENTED YET, only interface definitions !!!
		- added redirection number (size and address) in ACU_CONN_IN
		  primitive: available in VN3 and VN6 only.

	- ETS+VN6: implemented Keypad IE processing
	  (cc_switc.c, cc.c, cc.h, cc_ie.h, cc_proc.ets+vn6)

	- VN6: enhanced incoming calls service_id determination:
		- added detection of multi-rate services coded within LLC IE;
		- moved FAX-Group 4 detection out of LLC checking.

	- AT5: send cause #34 instead of cause #44 (which is not allowed)
	  (cc_state.c, cc_proc.c)

v5.44 (29 Aug 96)
-----------------
	- cc_par.h: added CC_PAR_PCS_USER_INFO parameter (ON/OFF) to process
	  'User to PCS' and 'PCS to User' Information Elements (VN6 only).

	- acu_int.h:

	!!! NOT IMPLEMENTED YET, only interface definitions !!!

		- added 'pcs_user_size' field in ACU_CONN_RQ/IN/RS/CO,
		  ACU_CONN_RQ/IN/RS/CO, ACU_ALERT_RQ/IN, ACU_CALL_PROC_RQ,
		  ACU_PROGRESS_IN, ACU_FACILITY_RQ/IN/CO primitives.
		  They are used to code either the 'User to PCS' or 'PCS to User'
		  Information Elements, depending on the side of the interface
		  (Network or Terminal).

		- added 'calling_nb2' fields for a secong calling number
		  request/indication in ACU_CONN_RQ/IN and ACU_FACILITY_RQ/IN/CO:

		- added 'calling_nb_screen' and 'calling_nb2_screen' fields:
		  contain the 'screening indicator' information. Related symbolic
		  values: 'ACU_NB_SCREEN_...'

	- cc_state.c: corrected compilation problem occuring if ACU_INTERFACE is
	  set to OFF. Problem appeared in version v5.40.

v5.43 (31 Jul 96)
-----------------
	- cc_par.h: added new parameter: CC_PAR_DATE_TIME ON/OFF, to enable
	  processing of 'Date_time' IE in ACU_CONN_RS/CO. OFF by default.

	- implemented 'Date_time' IE in ACU_CONN_CO.
	  (cc_state.c, cc.c, cc_proc.c, cc.h, cc_ie.h, cc_int.h)

	- ETS+VN6: implemented 'Date_time' IE in ACU_CONN_CO. (cc_proc.*)

	- NTT: corrected coding of NS_RESTART_RS: the Restart-Indicator was not
	  set to the one received in NS_RESTART_IN, but always coded
	  'ALL_INTERFACES'. (cc_build.ntt)

	- VN3: corrected compilation error in cc_build.vn3 if
	  CC_RESTART_PROCEDURE is ON.

v5.42 (24 Jul 96)
-----------------
	- ACU INTERFACE: (acu_int.h)
		- added 'called_nb_type' field in ACU_CONN_RQ and ACU_CONN_IN.

	- kernel:
		- implemented 'called_nb_type' and 'calling_nb_type' fields.
		  (cc_rcv.c, cc_state.c)
		- moved all global variables definitions from cc_proc.c, cc_state.c
		  and cc_switc.c into cc.c.

	- ETS+VN6: implemented 'called_nb_type' and 'calling_nb_type' fields.
	  (cc_proc.*, cc_build.*)

v5.41 (17 Jul 96)
-----------------
	!!! Requires Services version >= v3.46 for AT4 support !!!
	!!! Requires NS       version >= 5.8   for AT4 support !!!

	- Added AT&T 4ESS support.
	  This version is based on the AT&T TR-41459 August 1995.

	- cc_par.h : Added CC_F_AT4 flag (ON/OFF).

	- AT4:
		- added *.at4 files in USA sub-directory
		- added cc_at4.c

v5.40 (28 Jun 96)
-----------------
	- NEW PARAMETERS: (cc_par.h)

		- added CC_PAR_CHARGING_INFO parameter (ON/OFF) to process or
		  ignore the charging information in messages (Advice-of-charge IE).
		  (cc_par.h, cc.c, cc_proc.c, cc_rcv.c, cc_state.c, cc_switc.c,
		   cc.h, cc_proc.ets/vn2/vn3/vn6)

		- added 'CC_PAR_DISPLAY_IE' parameter (ON/OFF) to allow to
		  discard all 'Display' IE-related code.

	- ACU INTERFACE: (acu_int.h)
		- added 'charging_info' field (type is 'struct acu_charging_info')
		  in ACU_INFORMATION_IN message.
		- replaced the charging information-related fields with
		  'struct acu_charging_info charging_info' fields.
		- added 'calling_nb_pres' field in ACU_CONN_RQ and ACU_CONN_IN,
		  with their related symbolic values ('ACU_NB_PRES_...').
		- the 'display_list' structure is now called 'acu_display_list'.
		- added 'acu_date_time' field in ACU_CONN_RS and ACU_CONN_CO
		  (NOT IMPLEMENTED YET).
		- added 'calling_nb_type' field in ACU_CONN_RQ, ACU_CONN_IN, with
		  their related symbolic values ('ACU_NB_TYPE_...').
		  (implemented in v5.42).
		- added keypad information in ACU_INFORMATION_IN.
		  (NOT IMPLEMENTED YET).

	- Added CLIP/CLIR facility: added ability to send the calling nb
	  presentation field in ACU_CONN_RQ and ACU_CONN_IN primitives.

	- Do not switch the B-channel before NS_CONN_CO on outgoing voice calls
	  on TE-side, because this would corrupt the B channel signals before the
	  call is active.

	- added 'CC_PAR_DISPLAY_IE' parameter usage to discard all 'Display'
	  IE-related code when it is set to OFF.
	  (cc.c, cc_proc.c, cc_rcv.c, cc.h, ALL NETWORKS: cc_proc.*)

	- When receiving NS_CONN_CO after having sent an ACU_CONN_CO (this may
	  occur when CC has sent an ACU_CONN_CO upon receipt of an
	  NS_PROGRESS_IN), then send an ACU_INFORMATION_IN so that the
	  informations stored in the NS_CONN_CO are not lost (charging
	  information). (cc_state.c)

	- Go to state Outgoing_call_proc when receiving NS_ALERT_IN in state
	  Call_init, otherwise a following NS_PROGRESS_IN message would not be
	  properly processed. (cc_state.c)

	- ETS: extended processing of Advice-Of-Charge IE to codeset 5 for
	  Belgium. (Requires NS version >= v5.6).

v5.39 (20 Jun 96)
-----------------

	- Restart procedures: corrected processing of NS_RESTART_IN message
	  indicating a particular B channel to be restarted (the general case
	  is all interface restart indication). (cc_switc.c)

	- all networks: surrounded restart messages building parts with
	  "#if CC_RESTART_PROCEDURE == ON ... #endif" sentences to save code.
	  (cc_build.*)

	- AT5: Achieved HCDT support. (cc_state.c, cc_build.at5)

	- VN3: added restart messages building. (cc_build.vn3)

	- A17 (ARINC): corrected storing of 'signal' IE in NS_CLEAR_RQ.
	  (cc_build.a17)

	- Simulation: Added conn_id gathering on ACU_FACILITY_RQ for
	  ACU_FAC_TRF facility code when running HCDT. (sim_appl.c)

v5.38 (13 Jun 96)
-----------------
	- ACU_TEST_RQ/CO: if the loop-back was activated for 2 B-channels at a
	  time, then it could not be cleared for both. It worked only for one
	  channel loop-back activation/clearing at a time. Corrected.
	  (cc_switc.c)

	- VN2/3/6: corrected a problem when requesting ACU_FAC_HOLD facility:
	  the ACU_FACILITY_CO message was indicating 'ACU_FAC_RETRIEVE' instead
	  of 'ACU_FAC_HOLD' in some cases, due to the ATT's facilities
	  implementation.
	  Bug appeared in CC version v5.17 (30 Nov 95). (cc_state.c)

	- NTT: the Sending-complete IE is not supported anymore. (cc_build.ntt)

v5.37 (11 Jun 96)
-----------------
	- cc_state.c: force the optionally B-channel-id sent in the first
	  response to the NS_CONN_IN to be exclusive to enhance compatibility
	  with terminals that reject a 'preferred' channel-id in the first
	  response.

v5.36 (10 Jun 96)
-----------------
	- cc_rcv.c : added a test on congestion. If the congestion is reached,
	  then reject the current message coming from the application layer.

	- cc_switc.c : process a RESTART message indicating 'RI_ALL_INTERFACES'
	  as for 'RI_SINGLE_INTERFACE' to avoid from restarting NAIs which are
	  not concerned (e.g. Network-side NAIs).

	- NT-side: (cc_proc.c): we now allocate the B channels starting from
	  the lowest available so that the NT and TE sides do not try to allocate
	  the same B channels (TE-side still allocates from the highest).

	- KDD:
		- allowed the restart procedures for KDD (cc_prof.h, cc_build.kdd).
		- added ALERT and RESTART process (cc_build.kdd, cc_proc.kdd).

	- NTT: only T1/1544kbs PRI is supported. Updated NTT profile to use
	  a 23B+D PRI instead of 30B+D.

	- NI2: (cc_prof.h) send a B channel in a SETUP message in order to
	  enlarge the compatibility with NI2 switches.

	- DMS: enabled network side processing.

	- TR6: Added network side compliance.

v5.35 (05 Jun 96)
-----------------
	- NTT: added processing of MAP-coded channel-id IE for PRI.
	  (requires NS version >= v5.4).

v5.34 (07 May 96)
-----------------
	- cc_proc.c: corrected a P_NIL access occuring when processing an
	  ACU_TEST_RQ primitive, when building the MPH_B_SWITCH_RQ primitive.
	  This problem appeared in CC version v5.24 (cc_proc.c Revision 5.15).

v5.33 (25 Apr 96)
-----------------
	- acu_int.h:
	  extended the ACU_CONN_RQ primitive to allow the application to
	  send multiple called-nb*sub-address strings for multiple B-channels
	  calls (supported by the CCE entity only).

	  WARNING: when using CCE for a multiple B-channels call, if no 'other'
	  called_nb is to be specified by the application, then the first 'size'
	  field of the 'other' called-numbers MUST be set to 0.

v5.32 (18 Apr 96)
-----------------
	- B-channel switching on incoming calls:
	  (cc_state.c) on incoming voice calls, switch the B-channel right
	  after having processed the NS_CONN_IN message, so that the T interface
	  side of an NT2 (looking at the network) can hear any tones that
	  would come from the network and retransmit them to the S-interface
	  side (the terminals connected to the NT2).

	- MPH_B_INIT_RQ message for V.120 calls:
	  (cc_proc.c) when building the MPH_B_INIT_RQ message for V.120 calls,
	  do not send the received 'user_rate' value as is, but use only
	  RATE_56KBS or 0 (=64kbs).

	- ETS+VN6: 'BELGIUM' with 'FT_VN6' or 'ETSI':
	  (cc_proc.c) allowed to set the country code to 'BELGIUM' when the
	  operator-code is set to 'FT_VN6'.

	- ETS+VN6: type of 'called sub-address':
	  the type of 'called sub-address' is now coded 'OSI' instead of
	  'user-specific' in order to be more compliant with the ETSI standard
	  recommendations.
	  We are now coding the called sub-address as 'user-specific' only if
	  the country-code is set to BELGIUM.

	- sim_appl.c (simulation only): modified 'get_simul_net_op()' call so
	  that the 'country-code' fields of the configuration structures are NOT
	  modified if there is no 'n=...' string on the command line.
	  This is to allow to set-up any country/operator combination in the
	  configuration structure under simulation.
	  (Requires NS version >= v5.1).

v5.31 (05 Apr 96)
-----------------
	(Requires NS version >= v5.0)

	- cc.h, cc_switc.c : Added NS interface context pointers specific to CC
	  to remain compatible with NS. This allows other entities to use
	  NS interface Macros along with CC.

v5.30 (01 Apr 96)
-----------------
	- acu_int.h: corrected compilation error with Microsoft C compiler
	  (unexpected coma in macro definition).
	- cc_state.c: corrected processing of CC_ALERT_RQ when CC_SUPP_SERVICES
	  is ON.

	- VN6: corrected compilation error when CC_SUPP_SERVICES is ON.
	- AU1: return "voice" service-type when receiving a 3.1kHz-Audio incoming
	  call (CC was rejecting it if no LLC IE was present in the NS_CONN_IN).

	- TE-side (A11,AT9,E10,DMS,NI1,QSI only) and
	  NT-side (all networks): cc_state.c + cc_proc.c:
	  corrected allocation of B-channels on outgoing calls: the allocated
	  B-channel was not released at the end of the call.

v5.29 (13 Mar 96)
-----------------
	- send the service-id in ACU_SETUP_REPORT_IN instead of ACU_NO_SERVICE.
	- bug fix: if an outgoing call was sent after having sent an
	  ACU_SETUP_REPORT_IN, then the call profile pointer was not set-up
	  properly, generating a NULL pointer access afterwards.
	- removed useless 'from_sapi' global variable.
	- added 'cc_service_id' and 'cc_service_class' global variables (now
	  in more than one module).

v5.28 (06 Mar 96)
-----------------
	- cc_par.h: added CC_USE_ACU_SET_MODE_RQ_CO	parameter (ON/OFF):
	  use of ACU_SET_MODE_RQ/_CO primitive (ACU interface only).

	- acu_int.h: added ACU_SET_MODE_RQ and ACU_SET_MODE_CO primitives:
	  used to allow/forbid usage of contexts objects, such as all NAs, a
	  particular NA, a call, or a B-channel.
	  See acu_int.h for implementation details.

	- cc_state.c: when using the CC_OVERLAP_RECEIVING option, do not send
	  automatically an NS_CALL_PROC_RQ if all the digits have been received
	  in the NS_CONN_IN, but use the 'in_calls_behaviour' configuration
	  field.

v5.27 (05 Mar 96)
-----------------
	- cc_state.c: corrected a problem occuring when using the buffured
	  overlap receiving mode on NT-side: on an NS_CONN_IN containing less
	  digits than the 'nb_digits_to_route' configuration field, but with
	  a 'Sending-complete' information element, CC was not sending the
	  channel-id in the NS_CALL_PROC_RQ message. Now, CC rejects this
	  incoming call with cause 28 ('Invalid number format').

v5.26 (01 Mar 96)
-----------------
	- replaced use of MX_SZ_... constants (previously defined in ns_par.h)
	  with CC_MX_... ones.
	- Do not clear the call if ns sends NS_ERR_IN [ERR_U_CONGESTION_BUSY]
	  (due to a system congestion state detected by NS), send an
	  ACU_ERR_IN [cause ACUER_CONGESTION] instead.
	- Use PH_SAPI_B instead of PH_SAPI_MPH for messages sent to MPH.

v5.25 (16 Feb 96)
-----------------
	- acu_int.h: added 'ph_rate' field in the 'layer_1_info' structure:
	  used in place of the 'user_rate' field for information sent to the
	  physical driver within MPH_B_INIT_RQ/MPH_B_STOP_RQ. The 'user_rate'
	  field is now only used to code the BC/LLC Information Elements that
	  are sent to the peer terminal. Allows to select a physical rate of
	  56kbs, when no 64kbs-to-56kbs conversion is performed by the network
	  (example: a call from Europe to USA).

	  The Application MUST fill-in the 'ph_rate' field when specifying the
	  'user_rate' field. A value of 0 means '64kbs'.

	- ETS: cc_proc.ets: corrected access to 'chan_id' information element
	  in an NS_NOTIFY_IN message.

v5.24 (14 Feb 96)
-----------------
	(Requires NS version v4.50 when used with E10 operator)

	- cc_par.h: added CC_TYPE_BRI and CC_TYPE_PRI parameters (ON/OFF) to
	  save some code if BRI and PRI types are not used together.

	- cc_rcv.c: fixed reading in P_NIL when the Application requests for a
	  service that is not allowed in the current operator.

	- AT9 + NI2 + E10: added processing of H0 channels calls.
	- AT5 + NI2: do not send 'Call Appearance' IE if Acu_conn_rq_call_appear
	  is BYTE_VAL_NIL.

v5.23 (02 Feb 96)
-----------------
	- acu_int.h: removed extra #define ACU_MX_DISPLAY.
	- cc_proc.c: use 'Prepare_data_to_send()' for MPH_B_SWITCH_RQ and
	  MPH_B_INIT_RQ messages, because the size of the data might be
	  greater than the size of the message data area (would have caused a
	  Trap (TRAP_MSG_DATA=21) at sending time).

	- AT5: (cc_serv.at5) some AT&T 5E5 switches do not accept the '3.1 Audio'
	  coding in BC IE. This code has been replaced by 'speech'.

v5.22 (18 Jan 96)
-----------------
	- VN6: (cc_prof.h) allowed overlap receiving mode.

v5.21 (29 Dec 95)
-----------------
	- CONFIGURATION (cc_int.h):
		- added 'nb_digits_to_route' configuration field at the end of the
		  'na' sub-structure: replaces the static (compile-time) parameter
		  'CC_NB_DIGIT_TO_ROUTE', used in the buffered overlap receiving
		  mode only.
		- added the 'CC_TRUNCATE_NB' bit in the 'in_calls_behaviour' field:
		  replaces the static (compile-time) parameter 'CC_TRUNCATE_NB'.

	- cc_par.h: removed 'CC_NB_DIGIT_TO_ROUTE' and 'CC_TRUNCATE_NB'
	  parameters: they are replaced by appropriate configuration fields.

	- cc_rcv.c: corrected problem in FT_VN6 'Hold' facility introduced in
	  version v5.17.

	- cc_state.c: corrected building of ACU_FACILITY_CO when a facility
	  request is rejected (it was not sending back the facility code).

	- ana_acu.c: improved some messages decoding.

v5.20 (27 Dec 95)
-----------------
	- INTERFACE:
		- acu_int.h: added ACU_VOICE_GCI_SERVICE and ACU_VOICE_GCI_RELAY_SERVICE
		  services: same Q.931-coding as ACU_VOICE_SERVICE (_RELAY), but
		  selects the GCI bus instead of the Audio bus in MPH.
		- cc_int.h: added CC_SERVICE_TELEPHONY_GCI and
		  CC_SERVICE_TELEPHONY_GCI_RELAY services (same as for acu_int.h).

	- HKT: updated for NS version v4.45 changes.

v5.19 (27 Dec 95)
-----------------
	- NI2 : Added call appearance setting in a VOICE connection request.

	- cc_state.c : Added a 'cc_chan_id_from_user=ON' when we have to
		allocate a B channel in case of the one included in the NS_CONN_IN
		is already in use.

v5.18 (05 Dec 95)
-----------------
	- cc_par.h: added 'CC_MULTI_CHAN_CALLS' parameter (ON/OFF):
	  used to merge CC and CCE entities into one entity only, to avoid
	  multiple message sending between these two entities. The external
	  message exchange mechanism has been replaced by an internal message
	  queue. The CCE code is then not an entity anymore, but part of the CC
	  entity.
	  (see cc_par.h for details).

v5.17 (30 Nov 95)
-----------------
	- *.c+*.h+AT5:
		- Added voice supplementary services (HCDT) for AT&T5ESS5 (AT5).

	- cc_swit.c:
		- Set display length to 0 in the automatic ACU_FACILITY_CO sending.
		- Corrected a bug appeared in CC version v5.13 in the restart
		  procedure. (That caused an infinite loop upon receipt of an
		  NS_RESTART_IN when the indicated channel was not already allocated).

	- HKT: Added 'screening indicator' field in the calling_nb.
	  (requires NS version >= v4.45).

	- ETS+VN6: Added transparent facility encoding for ETSI and FT_VN6
	  (use of ACU_FAC_TRANSPARENT facility code in the ACU_FACILITY_RQ).
	  This provides a means of sending and receiving ASN1 encoding using a
	  transparent manner.
	  Requires CC_SUPP_SERVICES option set to ON and NS version >= v4.45.

	- NTT: improved PRI-format channel_id IE reading.

	- NT side: force an NS_CALL_PROC_RQ on incoming calls if needed by the
	  protocol.

v5.16 (20 Nov 95)
-----------------
	- cc_state.c: put a channel_id in the NS_SETUP_ACK_RQ sent in
	  buffered Overlap Receiving mode.

v5.15 (10 Nov 95)
-----------------
	- cc_state.c: force sending of channel_id IE in the first response to
	an incoming call on NT side.

v5.14 (27 Oct 95)
-----------------
	- Added VN6 in the EUROPE list.

v5.13 (19 Oct 95)
-----------------
	- *.c, *.h: check incoming B-channel id on outgoing calls.
	- *.c, *.h: Improved restart procedure management. Each instance
	of channel Id is taken into account instead of the first only.

	- ALL: Added multiple display management.

	- VN6: cc_build.vn6: corrected coding of PRI-type channel-id in 
	NS_CONN_RQ.

	- DMS (in cc_state.c): reject call with cause #17 when a NS_CONN_IN
	indicates a B channel already in use (instead of #44 or #34)

	- NTT: cc_build.ntt : delete the progress_indicator test on DATA setup.
	Test upon Mu law instead of A-law to detect telephony calls.

	- KDD: cc_build.kdd : accept Mu-law as well as A-law for Voice calls.

v5.12 (10 Oct 95)
-----------------
	- cc_stat.c and cc_proc.c:
		- added test on p_cc_profile to avoid from reading at P_NIL address.
		- Corrected NT2 code to avoid from sending a NS_CALL_PROC_RQ in
		overlap receiving mode.
	- cc_stat.c/cc_swit.c : Corrected Acu_clear_xxx_total_cost affectation.
	Caused the charging information to be corrupted in VN3.
	- sim_appl.c: corrected help printing for SM messages.
	- BT2 : Corrected data service detection: return ACU_DATA_SERVICE when
	the Protocol_id_1 field of BC is not recognised.

v5.11 (12 Sep 95)
-----------------
	- cc_state.c: corrected p_cc_profile variable use
	when cc_setup_report == ON (incoming call service not supported).

v5.10 (30 Aug 95)
-----------------
	- cc.c: corrected allocation of B channels contexts for BRI only.
	Appeared in version v5.8.

	- VN6: added use of CC_V120_CODING flag for coding the V120 service: 
	use DATA coding for LLC because	V120 LLC is not accepted by the 
	BT-ISDN2 network (same as ETSI version).

v5.9 (21 Aug 95)
----------------
	- cc_state.c: corrected cc_process_conn_in () function.

	- cc_rcv.c: corrected a Trap occuring in A17 because the cause #34 is
	not allowed.

	- Corrected cc_current_ent_user affectation. If it equals 0, then
	set it to the default value which is the one specified at the top
	of the Na description.

	- cc_prof.h:
		- added a parameter to know what time-slot is used as the
		D-channel (16 or 24).
		- Added a parameter giving the cause class and value used to reject
		an incompatible incoming call (the most frequent one is cause #88).

	- AT9 + DMS: (cc_prof.h) in PRI, force setting of CHAN_ID in NS_CONN_RQ.

	- AU1:
		- Modified channel Id setting. Requires NS Version >= v4.37
		- Chan_id is mandatory in the first response to NS_CONN_IN (PRI only).

	- A17: (in cc_state.c) send cause #44 instead of cause #34.

	- sim_appl.c: modified building of SM_SET_CONFIG_RQ primitive so that
	the 'n' command line flag is taken into account whilst using the default
	configuration structure.

v5.8 (07 Aug 95)
----------------

	- cc_state.c :

		- Added cc_process_conn_in (a_chan_id) function, because of
		compilation pb (the 'case NS_CONN_IN' was too large).

		- Corrected ARINC_NETWORKS part :

			- initialize cc_flight_op_id_size and cc_flight_number_size with
				0 instead of 0xff,
			- initialize p_cc_flight_op_id and p_cc_flight_number with the
				values set in the ACU_CONN_RQ primitive, only if the size
				of the corresponding fields is not 0.

	- ARINC, A11 : Store notif indicator IE only if 'cc_notif_descr' does not
		equal BYTE_VAL_NIL instead of 0.

v5.7 (02 Aug 95)
----------------

	- INTERFACE:
		- Added new services for Primary Rate Interface:
			- ACU_DATA_H0_SERVICE        (H0-channel:  384kbs)
			- ACU_DATA_H11_SERVICE       (H11-channel: 1536kbs)
			- ACU_DATA_H12_SERVICE       (H12-channel: 1920kbs)
			- ACU_DATA_MULTIRATE_SERVICE (Multirate-channels: 2..30 * 64kbs)

		- And for Basic Rate Interface:
			- ACU_DATA_128KBS_SERVICE    (2*64kbs)

	- AU1 : Replaced NB_NATIONAL with NB_UNKNOWN in cc_build.au1.
	- Updated NI1 version according NWT-SR 1953.
	- cc_prof.h : Updated QSI & A17 profile.

v5.6 (20 Jul 95)
----------------
	- cc_par.h: removed useless 'CC_MX_CALL' parameter.

	- Use ACU_MX_SZ_CALLED_NB/SUB_ADD instead of CC_MX_SZ_CALLED_NB/SUB_ADD
	for interface-related elements.
	- Use CC_MX_SZ_CALLED_NB/SUB_ADD only for configuration fields.

v5.5 (18 Jul 95)
----------------
	- CONFIGURATION: replaced 'Trap (TRAP_CC_INIT,...);' calls with a
	configuration return code, so that there is no Trap during the
	configuration of CC. Error codes have been added to cc_int.h.

	- cc_proc.c : Added ETSI for Australia and HONG KONG countries as an
	 available network. Added also South Africa country with ETSI and
	 ATT_5E10 for USA.

	- cc_state.c: accept an ACU_CONN_RQ requesting for a B channel aleady
	in use for another call if that call is held.

	- ARINC/A17 modifications:
		Added progress_loc, progress_descr, signal_val in
		ACU_ALERT_RQ progress_loc, progress_descr in ACU_CALL_PROC_RQ,
		credit card number in ACU_INFORMATION_RQ/IN primitives.

v5.4 (12 Jul 95)
----------------

	(REQUIRES SERVICES.H WITH Revision >= 3.56)

	- INTERFACE:
		- Added specific fields in the messages for ARINC operators (A11/A17).

	- cc_proc.c : Added ETSI spec for Australia and HONG KONG countries as an
	available network. Added also south africa country with ETSI.

	- cc kernel  :

		- Added AT&T 5ESS-10 network.
			Note : This network is for PRI only. 5E10 BRI specification
			is not available before November 95, AT&T said.

	- HKT : Added BRI interface.
	- TR6 : corrected VIDEO service coding.

v5.3 (11 Jul 95)
----------------
	- ETS + kernel : Added process of "Advice of charge" IE in ACU_CONN_CO,
	ACU_CLEAR_IN/CO and ACU_INFORMATION_IN messages.
	
v5.2 (03 Jul 95)
----------------
	- acu_int.h:
		- added 'chan_id_excl' field in all primitives where a channel id
		can be specified, so that the application can request the coding
		of this field: if ON => exclusive, if OFF => preferred.

		- modified Analogue ACU entity configuration structure (not used
		in ISDN Call Control).

	- *.c,*.h,cc_build.*:
		added a parameter (in cc_prof.h) to know if a chan_id IE must be sent
		in the first response to NS_CONN_IN (mandatory for most USA operators)

v5.1 (20 Jun 95)
----------------
	- Extended processing of French Facilities for PRI access (multiple
	held calls on the same network access).

	- KDD: replaced coding of A-law by Mu-law for voice-type calls.
	- KDD+NTT: replaced 3.1kHz-Audio coding by Speech for Telephony calls.

	- VN3: updated coding of HLC IE. Requires NS v4.31.

v5.0 (16 Jun 95)
----------------

	-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	NEW BASE VERSION NUMBER : 5.*
	-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	This new base version number has been introduced to reflect the major
	developments done since version v4.39.

	The version v5.0 is strictly identical to version v4.43, except for the
	files' revision numbers.

*****************************************************************************

v4.43 (16 Jun 95)
-----------------
	- CONFIGURATION STRUCTURE:
		- replaced 'auto_answer' field by 'in_calls_behaviour':
		determines the behaviour of CC for incoming calls (transparent
		processing of overlap receiving mode, automatic sending
		of NS_CALL_PROC_RQ, NS_ALERT_RQ or NS_CONN_RS messages after
		dialling completion);
		- replaced 'no_conn_co_on_progress' field by 'out_calls_behaviour':
		determines the behaviour of CC for outgoing calls (automatic sending
		of ACU_CONN_CO on NS_PROGRESS_IN, automatic generation of the
		'Sending-complete' information element in ACU_CONN_RQ).

		(see cc_int.h for details).

	- acu_int.h:
		Added new messages:
			- ACU_CALL_PROC_RQ
			- ACU_ALERT_RQ
			- ACU_DIGIT_IN (for transparent overlap receiving only).

		Added new services:
			- ACU_FAX_4_SERVICE:   Fax G4 service
			- ACU_AUDIO_7_SERVICE: 7kHz Audio service

	- Added 'Transparent overlap receiving' capability: no buffering of the
	received digits: the additional digits are transmitted to the application
	through ACU_DIGIT_IN messages.

	- cc_build.*: removed sending of 'More data' IE in NS_USER_INFO_RQ
	messages (optional); added detection of FAX G4 and 7kHz Audio services.

	- cc_serv.*: added coding of FAX G4 and 7kHz Audio services.


v4.42 (02 Jun 95)
-----------------
	- NEW FILES:
		- cc_undef.h;
		- one *.c file for each network operator:
		cc_a11.c, cc_a17.c, cc_at5.c, cc_at9.c, cc_au1.c, cc_bip.c, cc_dms.c,
		cc_ets.c, cc_hkt.c, cc_kdd.c, cc_ni1.c, cc_ni2.c, cc_ntt.c, cc_qsi.c,
		cc_swd.c, cc_tr6.c, cc_vn2.c, cc_vn3.c, cc_vn6.c.
		These files replace the cc_build.c and cc_bld_*.c files. They have
		been created to avoid compilers blow out when compiling many operators
		at once.

	- REMOVED FILES:
		cc_build.c, cc_bld_*.c.

	- cc_rcv.c + cc_state.c + cc_build.ntt: corrected access to profile
	fields.

	- cc_build.kdd: corrected compilation pb.


v4.41 (30 May 95)
-----------------

	- NEW FEATURE: PROFILES

		Added capability to configure some additional 'profiles' through a
		specific configuration structure sent to the Call Control entity.

		A 'profile' is an object which associates a 'service id' (CC or ACU)
		with some additional parameters. These parameters allow to define
		the behaviour of the Call Control entity concerning the sending of
		the MPH_B_SWITCH_RQ and MPH_B_INIT_RQ/MPH_B_STOP_RQ primitives.
		Each of these messages can be enabled (default behaviour) or disabled.
		For MPH_B_INIT_RQ, the layer 2 and layer 3 entities ids must be
		specified.

		The services ids defined in cc_int.h and acu_int.h can be used
		as profile ids. They are considered as the default built-in profiles.
		For those profiles, CC will behave as for the previous versions,
		that is, it will send the MPH_B_..._RQ primitives to MPH.

		The user can use either a profile id or a service id to specify a
		profile, in the configuration structure as well as in the ACU_CONN_RQ
		and ACU_CONN_RS primitives. If it is a service id, then it will
		behave as for the previous versions.

		CC will indicate in the ACU_CONN_IN the profile id of the first
		profile which fits to the detected service.

		The CC configuration structure may contain a list of profiles ids as
		well as services ids in the list of services, or a mix of both.

		New profiles are configurable by sending a configuration message to
		CC, but using the 'cc_profile_config' structure in addition to the
		'cc_config' one. If the standard CC configuration makes references to
		some user-defined profile ids, then the profiles configuration
		structure must be sent BEFORE the CC standard configuration.

		A user-defined profile id is a char value that must be greater than
		or equal to 128.

		If the profile id is set to 0, then the corresponding profile
		description is ignored.

		See conf_cc.h for an example of user-defined profiles configuration.

		This 'profiles' process is enabled by setting the 'CC_PROFILE_CONFIG'
		flag to ON in cc_par.h. The 'CC_MX_CONFIG_PROFILES' parameter defines
		the maximum number of profile descriptions present in each
		profile configuration structure.

		This modification does not affect the network-specific files.

	- cc_int.h: modified CC_SERVICE_... defines to fit with the
	ACU_SERVICE_... This allows to list the services in the configuration
	structure as CC_SAPIs ones or ACU_SAPIs ones without any distinction.


v4.40 (23 May 95)
-----------------
	- ACU INTERFACE ENHANCEMENT:
		- added a new message: ACU_ERR_IN, sent upon receipt of an NS_ERR_IN
		from NS, instead of a Trap() call.
		It contains an error cause (type of error, ACUER_... symbols) and a
		diagnostic (errored information element, or bad primitive code,
		ACUERDIAG_... symbols).
		If this message corresponds to a previous ACU_CONN_RQ, then an
		ACU_CLEAR_CO is sent back just after to indicate the call clearing.
		- added a 'network_cause' field in ACU_SUSPEND_CO and ACU_RESUME_CO
		primitives.
		- ACU_CONN_IN message: added 'sending_complete' field: ON if the
		"Sending Complete" information element has been received.

	- Added processing of ACU_USER_INFO_RQ/IN messages
	(cc_state.c+cc_proc.*+cc_build.*)
	- cc_proc.c: added 'cc_retrieve_previous_state()' function.
	- cc_snd.c: modified 'cc_snd_to_ns()' function to send an ACU_ERR_IN when
	a message cannot be built. Added 'cc_snd_acu_err_in()' function.
	- cc_state.c+cc_switc.c: modified processing of ACU_FACILITY_RQ for
	networks which do not support it.
	- cc_switc.c: modified processing of NS_ERR_IN: sends an ACU_ERR_IN
	instead of calling Trap().
	- cc_rcv.c: corrected writing at P_NIL when receiving NS_CONN_IN
	specifying 'no channel available' (appeared in CC version v4.35).

	- ARINC : Forced implicit values for 'credit card number' in the
	NS_CONN_RQ. This is a temporary modification until this field is
	reachable thru the ACU interface and AT command set.


v4.39 (05 May 95)
-----------------
	- cc_state.c: Added B-channels allocation handling for outgoing calls.
	It was only done for incoming calls, so it could happen that a particular
	B-channel used for an outgoing call be indicated in a further incoming
	call, and CC would not reject it because it has not been reserved.

	- cc_proc.c: Suppressed character filter in the sub-address to allow all
	ASCII characters (for ETSI-like operators mainly).

	- ana_cc.c: added B channels allocation/deallocation printing functions.

	- AU1 :
		- cc_build.au1 : DATA-type service checking is made upon BC instead
		of LLC.
		- Modified PRI channel Id storage.

	- AU1+AT9+NI2+ARINC : Improved restart procedures.


v4.38 (20 Apr 95)
-----------------
	- Corrected RESET_CONFIG part (memory deallocation problem).
	- Optimized B channel contexts allocation.


v4.37 (14 Apr 95)
-----------------
	- ARINC: Added allocation of a B channel id on TE side in NS_CONN_RQ.
	- Optimized reading of channel id from NS messages.


v4.36 (07 Apr 95)
-----------------
	- cc_par.h: added CC_F_A11 and CC_F_A17 flags for ARINC protocols.

	- cc_int.h: added CC_SERVICE_TDD service id.

	- acu_int.h: added ACU_TDD_SERVICE service id.

	- cc_swit.c : Corrected restart procedure process. In case of multiple
	Nai to be restarted, NS_RESTART_RS was always sent on nai 0.

	- VN6 :
		- Enabled restart procedure mechanism.
		- Added 'interpretation' field at NS interface for HLC.

	- Added ARINC A11 and A17 protocols.


v4.35 (06 Apr 95)
-----------------
	- Added ACU_VIDEO_SERVICE service id.
	- Added RESET_CONFIG part.
	- Added processing of B-channels allocations on incoming calls.
	- corrected UUI generation in NS_CLEAR_RQ sent on uncompatible NS_CONN_IN.
	- AT9+NI2: Added analysis of restart messages contents.
	- AT9: improved Isdn_at9_store_bc() macro call (see NS v4.26).
	- VN3: corrected coding of chan_id IE in PRI mode.


v4.34 (02 Mar 95)
-----------------
	- configuration: added 'no_conn_co_on_progress' field at the end of
	  the configuration structure:
		- ON : do not send ACU_CONN_CO when receiving NS_PROGRESS_IN
		- OFF: send ACU_CONN_CO when receiving NS_PROGRESS_IN (same behaviour
		as previous versions).
	  This flag might be set to ON for some networks which always send a
	  CONNECT message after a PROGRESS message. For some special numbers (such
	  as '11'), the France-Telecom network may send the CONNECT message only
	  several minutes after having sent the PROGRESS message, so CC used to
	  consider the call as established upon receipt of the PROGRESS message.

	- Added process of NS_PROGRESS_IN message in Overlap_sending and Call_init
	  states (interworking indication on outgoing calls).

	- USA: we cannot rely on the 'progress_ind' IE to determine if the baud
	  rate is 64k or not.


v4.33 (27 Feb 95)
-----------------
	- cc_proc.c: added layer 1 information fields in MPH_B_INIT_RQ.

	- cc_build.*: replaced p_empty by p_cc_empty_string.

	- NTT: corrected coding of BC/LLC for voice services (u-law instead of
	  A-law).

	- NI2: Chan_id is "exclusive" in NS_ALERT_RQ for BRI (AMERITECH tests).

	- AT9: (in cc_prof.h) Allowed restart procedure.


v4.32 (14 Feb 95)
-----------------
	- cc_build.c is split into cc_build.c, cc_bld_1.c, cc_bld_2.c,
	cc_bld_3.c, cc_bld_4.c files for compiler memory problems.

	- cc_build.h: new file (included in cc_build.c and cc_bld_*.c).

	- AT9 + NI2: send CHAN_PREFerred instead of CHAN_EXCLusive in CHAN_ID IE.

	- AT9: modified the channel ID IE for PRI. Added the interface ID
		   selection in Isdn_at9_store_chan_id() macros.

	- DMS: corrected the sending of a NS_CONN_RQ: KEYPAD is sent in BRI,
	and CALLED_NB in PRI.


v4.31 (09 Feb 95)
-----------------
	- cc_par.h (+cc_int.h):
		- Added parameters to be able to reduce the size of the configuration
		structure. The default values are the following ones:
			CC_MX_SZ_CALLING_NB			32	Maximum size for calling nb
			CC_MX_SZ_CALLING_SUB_ADD	20	Maximum size for calling sub address
			CC_MX_SZ_CALLED_NB      	32	Maximum size for called nb
			CC_MX_SZ_CALLED_SUB_ADD		20	Maximum size for called sub address
			CC_MX_SZ_UUI				128	Maximum size for UUI
			CC_MX_SERVICES				19	Maximum number of services

	- cc_proc.c: corrected compilation warning.
	- cc_serv.*: Added process of V120 service for all networks where it was
	not done (coded as DATA service).


v4.30 (02 Feb 95)
-----------------
	- cc_par.h:
		- added CC_V120_CODING parameter: (used for ETSI operator only)
			- ON: (default value) the V.120 service is coded as V.120;
			- OFF: the V.120 service is coded as for ACU_DATA_SERVICE.

	- cc_int.h (and other files):
		- configuration: added 'ent_user' field in the additional local nb
		lists: allows to send the ACU_CONN_IN/CC_RING_IN message to a
		particular upper entity, according to the address filtering result.

	- cc_serv.*:
		- added V.110 coding for networks where it was missing, coded as DATA.
		- the V.110 services now send B_MODE_DATA_V110 mode to the layer 1,
		instead of B_MODE_DATA_HDLC.

	- Added test when trying to redirect incoming NS_CONN_IN to another
	NS-upper entity: do not redirect the message if the destination entity
	is already ENT_CC.


v4.29 (27 Jan 95)
-----------------
	- Added reporting of 'display' Information Element in ACU_SAPI.

	- acu_int.h:
		- corrected Acu_user_info_a_fac macro
		- added 'display' variable length information in the following
		primitives:
			ACU_CONN_IN/CO, ACU_CLEAR_IN/CO, ACU_DIGIT_CO,
			ACU_ALERT_IN, ACU_PROGRESS_IN, ACU_SUSPEND_CO,
			ACU_RESUME_CO, ACU_FACILITY_IN/CO, ACU_INFORMATION_IN

	- VN6: Added missing Facilities part.

	- AT9: cc_build.at9 : modified the NS_CONN_RQ building
		- keypad IE not used in PRI,
		- allowed HLC in BRI only.


v4.28 (12 Jan 95)
-----------------
	- acu_int.h: updated for analog ACU entity.
	- ana_acu.c: updated chan_id lists decoding.


v4.27 (05 Jan 95)
-----------------

	- acu_int.h:

		- replaced the 'data_chani' field in the ACU_CONN_RQ/IN/RS/CO and
		ACU_PROGRESS_IN primitives by a list of channel ids. This new
		feature is compatible with the previous one for the
		Acu_.._data_chani macros. The usage of the other fields in the list
		are for further study. They will be used to indicate multiple
		B-channel ids (in the Primary rate interface for instance).
		In this case, the macros Acu_.._data_chani_nb and
		Acu_.._data_chani_tab(x) will allow to access to all the B-channel
		ids. For the moment, the Acu_.._data_chani_nb macro will always be 1.
		The related parameter (ACU_MX_CHANI) can be defined to 1 to save
		space in the messages. The compatibility with the previous versions
		is kept even if it is greater than 1.

	- cc_par.h:

		- added parameter CC_SUB_ADDRESS_DELIMITER, defining the delimiter
		to be used between the address and the sub-address in the address
		string (ACU interface only).
		- added parameter ACU_MX_CHANI used to size the array of B-channel
		ids in the ACU_CONN_RQ/IN/RS/CO and ACU_PROGRESS_IN primitives.

	- Corrected some attemps to read in P_NIL area.
	- Added a TRAP_CC_BUILD_ERROR trap code used when the ..._build_to_ns()
	function returns NOK (meaning that CC is trying to send a message to NS
	that is not available for the selected network).
	- cc_proc.c: modified determination of the size of the
	t_cc_service_convert[] array.

	- Overlap-receiving mode:
		- removed process during address filtering procedure
		- added sending of NS_SETUP_ACK_RQ upon receipt of NS_CONN_IN.

	- DMS: corrected service id returned to detect 56kb/s incoming calls.
	- AT5: modified numbering type in the Calling_nb IE (NB_LOCAL).


v4.26.1 (19 Dec 94)
-------------------
	- cc.h: corrected linking pb due to usage of 'ns_int.c' file (v4.26).


v4.26 (12 Dec 94)
-----------------
	(Requires NS version >= v4.16)

	- acu_int.h: Added layer 1 information fields in ACU_CONN_RQ/IN/RS
	primitives for ACU_V110_SERVICE and ACU_V120_SERVICE services :

			- syn_asyn, user_rate, stop_bits, data_bits, parity.

	The different available values are also defined in acu_int.h
	(see 'struct layer_1_info' definition).

	- Added use of 'ns_int.c' to define the NS interface-related macros.


v4.25.2 (06 Dec 94)
-------------------
	- acu_int.h: corrected Acu_..._a_facility' macros (used in QSIG only).


v4.25.1 (02 Dec 94)
-------------------
	- cc_par.h: modified default value of CC_NETWORK_NB.


v4.25 (29 Nov 94)
-----------------
	- NI2:
		added Restart procedures,
		modified PRI process.


v4.24 (22 Nov 94)
-----------------
	- cc_par.h: replaced CC_F_VN4 with CC_F_VN6 (=EURONUMERIS) flag.


v4.23 (21 Nov 94)
-----------------
	- acu_int.h: added ACU_VOICE_TRANS_SERVICE service id
		(= voice service with B_MODE_TRANSPARENT physical mode).


v4.22 (17 Nov 94)
-----------------
	- VN3: corrected facility problems.


v4.21 (14 Nov 94)
-----------------
	- acu_int.h: added 'interworking' field in ACU_CONN_IN primitive to
	indicate an interworking situation to the application.
	- modified V.120-related part.


v4.20 (08 Nov 94)
-----------------
	- acu_int.h: corrected definition of 'acu_init_rq_args' structure.


v4.19 (21 Oct 94)
-----------------
	- cc_par.h: added CC_F_NI2 operator.


v4.18 (21 Oct 94)
-----------------
	- Removed sending of MPH_B_SWITCH_RQ message before receipt of NS_CONN_CO
	for Data-class calls to avoid double switching in AT9 and NI2 operators.


v4.17.1 (11 Oct 94)
-------------------
	- Modified processing of sub-address string in ACU_CONN_RQ:
	replace a trailing '$' character with a '\0' that will be transmitted on
	the line to keep compatibility with previous ETSI versions coding with
	SUB_ADD_OSI type of sub-address and also transmitting a '\0' on the line.


v4.17 (07 Oct 94)
-----------------
	- interface: added priority checking in the configuration lists.
	- ETS: modified coding of sub-addressing info (new type: SUB_ADD_USER) to
	avoid conflicts with BT-ISDN2 network.


v4.16 (06 Oct 94)
-----------------
	- configuration:
		- Added 'b_chan_id' field in each address list for
		BT_ISDN2 network to allow requesting of a particular B channel id
		associated with a particular service.
		- Added 'service_list_id' field in aech address list to identify
		the selected list to the application in ACU_CONN_IN.


v4.15 (28 Sep 94)
-----------------
	- configuration: modified signification of the 'nai' field (AT9).


v4.14 (22 Sep 94)
-----------------
	- Added '\0' at the end of the sub-address string if not present in
	NS_CONN_IN.
	- ignore any 'P' character in front of the sub-address string to avoid
	problems between ETSI version and Belgium network.


v4.13 (14 Sep 94)
-----------------
	- acu_int.h: corrected 'Acu_progress_in_facility_size' macro.
	- modified 'sub_add_type' field (=SUB_ADD_OSI).


v4.12 (30 Aug 94)
-----------------
	- acu_int.h: added ACU_V110_SERVICE and ACU_V120_SERVICE services ids,
	with user rate given by the application in the 'user_rate' field of
	ACU_CONN_RQ. Added also 'user_rate' field in ACU_CONN_IN.
	- AT9: added coding of channel_id.


v4.11 (25 Aug 94)
-----------------
	- configuration (AT9): modified processing of SPIDs.
	- ETS+AT9: corrected Calling_nb coding.

#endif

/*EOF*/
