/*--------------------------------------------------------------------------*
 *						M O D U L E	H E A D E R
 *
 * filename - cc_fct.vn3
 *
 * $Revision$
 *
 * $Date$
 *
 *	  - Implements the FT_VN3 internal specific function definition
 *		of the NETWORK SIGNALLING layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* Table for the specific VN3 functions used in the kernel */

#if NEW_FCT_STYLE == ON
	void	vn3_cc_state_driven			(void);
	void	vn3_cc_build_fct			(void);
	uchar	vn3_cc_switch				(void);
	uchar	vn3_net_checking_service	(void);
	uchar	vn3_cc_build_to_ns			(code_t prim_code, uchar FAR *p_data);
	uchar 	vn3_get_ie 					(uchar pr, uchar ie);
	uchar 	vn3_isdn_lgth_str			(uchar pr, uchar ie);
	uchar 	vn3_cc_get_chan_id			(uchar pr, uchar ie);
	uchar	vn3_get_remaining_ie_instance (uchar pr, uchar ie);
	uchar	vn3_set_to_next_ie_instance	(uchar pr, uchar ie);
	uchar 	vn3_isdn_get_val			(uchar pr, uchar ie, uchar field);
	uchar FAR *vn3_isdn_p_str			(uchar pr, uchar ie);
	uchar FAR *vn3_p_start_val_ns		(uchar pr, uchar ie);
#else
	void	vn3_cc_state_driven			();
	void	vn3_cc_build_fct			();
	uchar	vn3_cc_switch				();
	uchar	vn3_net_checking_service	();
	uchar	vn3_cc_build_to_ns			();
	uchar 	vn3_get_ie 					();
	uchar	vn3_isdn_lgth_str			();
	uchar 	vn3_cc_get_chan_id			();
	uchar	vn3_get_remaining_ie_instance();
	uchar	vn3_set_to_next_ie_instance	();
	uchar 	vn3_isdn_get_val			();
	uchar FAR *vn3_isdn_p_str			();
	uchar FAR *vn3_p_start_val_ns		();
#endif

extern struct cc_service CONST_ARRAY VN3_T_CC_SERVICES[];
extern CONST struct cc_param VN3_CC_PARAM_TAB;

						/*-=-=--=-=-=-=-=-=-=-*/


CONST struct cc_uchar_fct_table		VN3_CC_UCHAR_FCT_TAB[] = {

	Put_cc_fct (F_UC_NET_CHECKING_SERVICE,		vn3_net_checking_service),

};

CONST struct cc_uchar_fct_1p_table	VN3_CC_UCHAR_FCT_1P_TAB[] = {

	Put_cc_fct (F_UC_1P_CC_BUILD_TO_NS,			vn3_cc_build_to_ns),
};

CONST struct cc_uchar_fct_2uc_table	VN3_CC_UCHAR_FCT_2UC_TAB[] = {

	Put_cc_fct (F_UC_2UC_GET_IE,				vn3_get_ie),
	Put_cc_fct (F_UC_2UC_ISDN_LGTH_STR,			vn3_isdn_lgth_str),
	Put_cc_fct (F_UC_2UC_CC_GET_CHAN_ID,		vn3_cc_get_chan_id),
	Put_cc_fct (F_UC_2UC_SET_TO_NEXT_IE_INSTANCE,vn3_set_to_next_ie_instance),
	Put_cc_fct (F_UC_2UC_GET_REMAINING_IE_INSTANCE,vn3_get_remaining_ie_instance),

};

CONST struct cc_uchar_fct_3uc_table	VN3_CC_UCHAR_FCT_3UC_TAB[] = {

	Put_cc_fct	(F_UC_3UC_ISDN_GET_VAL,			vn3_isdn_get_val),

};

CONST struct cc_p_fct_2uc_table		VN3_CC_P_FCT_2UC_TAB[] = {

	Put_cc_fct (F_P_2UC_ISDN_P_STR,				vn3_isdn_p_str),
};


/*--------------------------------------------------------------------------*/
void vn3_cc_build_fct ()
{

	if (cc_vn3 == NIL) return;

	Spf_cc_param_tab	(cc_vn3)	= (uchar FAR *)&VN3_CC_PARAM_TAB;
	Spf_cc_uchar_fct	(cc_vn3)	= (uchar FAR *)&VN3_CC_UCHAR_FCT_TAB;
	Spf_cc_uchar_fct_1p	(cc_vn3)	= (uchar FAR *)&VN3_CC_UCHAR_FCT_1P_TAB;
	Spf_cc_uchar_fct_2uc(cc_vn3)	= (uchar FAR *)&VN3_CC_UCHAR_FCT_2UC_TAB;
	Spf_cc_uchar_fct_3uc(cc_vn3)	= (uchar FAR *)&VN3_CC_UCHAR_FCT_3UC_TAB;
	Spf_cc_p_fct_2uc	(cc_vn3)	= (uchar FAR *)&VN3_CC_P_FCT_2UC_TAB;
	Spf_cc_services		(cc_vn3)	= (struct cc_service FAR *)&VN3_T_CC_SERVICES[0];
}

/*EOF*/
