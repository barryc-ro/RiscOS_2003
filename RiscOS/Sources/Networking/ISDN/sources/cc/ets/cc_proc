/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_proc.ets
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		ets_cc_get_chan_id - implements the extraction of the channel
 *			ID given by the network.
 *
 * 		ets_cc_test_address_match - tests if received address/sub-address
 *				matches one of the registered NA addresses.
 *
 *		ets_p_start_val_ns (pr, ie) - pointer to the val_ns start for 'ie' IE.
 *
 *		ets_get_ie (pr, ie) - return PRESENT/ABSENT
 *
 *		ets_isdn_p_str (pr, ie) - return pointer to the string field
 *			of 'ie' IE of 'pr' Primitive
 *
 * 		ets_isdn_lgth_str (pr, ie) - return length of the string field
 *			of 'ie' IE of 'pr' Primitive
 *
 * 		ets_isdn_get_val (pr, ie, field) - return value of the 'field'
 *		field of 'ie' IE of 'pr' Primitive
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ets_p_start_val_ns -

Usage           uchar ets_p_start_val_ns (pr, ie);

Return value	: pointer to the val_ns start for 'ie' IE.

*--------------------------------------------------------------------------*/

uchar FAR *ets_p_start_val_ns (pr, ie)
	uchar pr;
	uchar ie;
{
	if (ie == IE_CHAN_ID) {

		switch (pr) {

			case NS_CONN_IN :
				return ((uchar FAR *)P_start_val_ns_ets (conn_in, chan_id));

			case NS_CONN_CO :
				return ((uchar FAR *)P_start_val_ns_ets (conn_co, chan_id));

			case NS_SETUP_ACK_IN :
				return ((uchar FAR *)P_start_val_ns_ets (setup_ack_in, chan_id));

			case NS_CALL_PROC_IN :
				return ((uchar FAR *)P_start_val_ns_ets (call_proc_in, chan_id));

			case NS_ALERT_IN :
				return ((uchar FAR *)P_start_val_ns_ets (alert_in, chan_id));

			case NS_RESUME_CO :
				return ((uchar FAR *)P_start_val_ns_ets (resume_co, chan_id));

			case NS_RESTART_IN :
				return ((uchar FAR *)P_start_val_ns_ets (restart_in, chan_id));
		}

	}

	return (P_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ets_get_ie -

Usage           uchar ets_get_ie (pr, ie);

Return value	: PRESENT/ABSENT

*--------------------------------------------------------------------------*/


uchar ets_get_ie (pr, ie)
	uchar pr;
	uchar ie;
{

	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_ets (conn_in, chan_id));

				case IE_UUI :
					return (Get_ie_ets (conn_in, uui));

				case IE_CALLING_NB :
					return (Get_ie_ets (conn_in, calling_nb));

				case IE_CALLING_SUB_ADD :
					return (Get_ie_ets (conn_in, calling_sub_add));

				case IE_CALLED_NB :
					return (Get_ie_ets (conn_in, called_nb));

				case IE_CALLED_SUB_ADD :
					return (Get_ie_ets (conn_in, called_sub_add));

				case IE_SENDING_COMPLETE :
					return (Get_ie_ets (conn_in, sending_complete));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_ets (conn_in, display));
#			  endif

				case IE_FACILITY :

					if (Get_ie_ets (conn_in, facility) == PRESENT) {
#						if _ACU_PAR_EXT_FACILITY == ON
							Isdn_get_ss_first_comp_ets (conn_in, facility);
							cc_ext_fac_asn1_lgth = Isdn_get_val_ets (conn_in, facility, size);
							cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (conn_in, facility, component_nb);
							p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
#						endif
						return (PRESENT);
					}
					break;

				case IE_LLC :
					return (Get_ie_ets (conn_in, llc));

#			  if CC_PAR_PROGRESS_IND_IE == ON
				case IE_PROGRESS_IND:
					return (Get_ie_ets (conn_in, progress_ind));
#			  endif

			}

			break;

		case NS_CONN_CO :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_ets (conn_co, chan_id));

				case IE_UUI :
					return (Get_ie_ets (conn_co, uui));

#			  if CC_PAR_CHARGING_INFO == ON
				case IE_CHARGING :

					if ((Get_ie_ets (conn_co, advice_charge)   == PRESENT) ||
						(Get_ie_ets (conn_co, advice_charge_5) == PRESENT)
					   ) {
						return (PRESENT);

					} else {

						return (ABSENT);
					}
#			  endif

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_ets (conn_co, display));
#			  endif

#			  if CC_PAR_DATE_TIME == ON
				case IE_DATE_TIME:
					return (Get_ie_ets (conn_co, date_time));
#			  endif

				case IE_FACILITY :

					if (Get_ie_ets (conn_co, facility) == PRESENT) {
#						if _ACU_PAR_EXT_FACILITY == ON
							Isdn_get_ss_first_comp_ets (conn_co, facility);
							cc_ext_fac_asn1_lgth = Isdn_get_val_ets (conn_co, facility, size);
							cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (conn_co, facility, component_nb);
							p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
#						endif
						return (PRESENT);
					}
					break;

#			  if CC_PAR_PROGRESS_IND_IE == ON
				case IE_PROGRESS_IND:
					return (Get_ie_ets (conn_co, progress_ind));
#			  endif

			}

			break;

		case NS_INFO_IN :

			switch (ie) {

				case IE_CALLED_NB :
					return (Get_ie_ets (info_in, called_nb));

				case IE_SENDING_COMPLETE :
					return (Get_ie_ets (info_in, sending_complete));

#			  if CC_PAR_CHARGING_INFO == ON
				case IE_CHARGING :

					if ((Get_ie_ets (info_in, advice_charge)   == PRESENT) ||
						(Get_ie_ets (info_in, advice_charge_5) == PRESENT)
					   ) {
						return (PRESENT);

					} else {

						return (ABSENT);
					}
#			  endif

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_ets (info_in, display));
#			  endif

#			  if CC_PAR_KEYPAD_IE == ON
				case IE_KEYPAD :
					return (Get_ie_ets (info_in, keypad));
#			  endif

			}

			break;

		case NS_CLEAR_IN :

			switch (ie) {

				case IE_UUI :
					return (Get_ie_ets (clear_in, uui));

#			  if CC_PAR_CHARGING_INFO == ON
				case IE_CHARGING :

					if ((Get_ie_ets (clear_in, advice_charge)   == PRESENT) ||
						(Get_ie_ets (clear_in, advice_charge_5) == PRESENT)
					   ) {
						return (PRESENT);

					} else {

						return (ABSENT);
					}
#			  endif

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_ets (clear_in, display));
#			  endif

				case IE_FACILITY :

					if (Get_ie_ets (clear_in, facility) == PRESENT) {
#						if _ACU_PAR_EXT_FACILITY == ON
							Isdn_get_ss_first_comp_ets (clear_in, facility);
							cc_ext_fac_asn1_lgth = Isdn_get_val_ets (clear_in, facility, size);
							cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (clear_in, facility, component_nb);
							p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
#						endif
						return (PRESENT);
					}
					break;

#			  if CC_PAR_PROGRESS_IND_IE == ON
				case IE_PROGRESS_IND:
					return (Get_ie_ets (clear_in, progress_ind));
#			  endif

			}

			break;

		case NS_CLEAR_CO :

			switch (ie) {

				case IE_UUI :
					return (Get_ie_ets (clear_co, uui));

				case IE_CAUSE :
					return (Get_ie_ets (clear_co, cause));

#			  if CC_PAR_CHARGING_INFO == ON
				case IE_CHARGING :

					if ((Get_ie_ets (clear_co, advice_charge)   == PRESENT) ||
						(Get_ie_ets (clear_co, advice_charge_5) == PRESENT)
					   ) {
						return (PRESENT);

					} else {

						return (ABSENT);
					}
#			  endif

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_ets (clear_co, display));
#			  endif

				case IE_FACILITY :

					if (Get_ie_ets (clear_co, facility) == PRESENT) {
#						if _ACU_PAR_EXT_FACILITY == ON
							Isdn_get_ss_first_comp_ets (clear_co, facility);
							cc_ext_fac_asn1_lgth = Isdn_get_val_ets (clear_co, facility, size);
							cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (clear_co, facility, component_nb);
							p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
#						endif
						return (PRESENT);
					}
					break;

			}

			break;

		case NS_ALERT_IN :
			if (ie == IE_CHAN_ID)	return (Get_ie_ets (alert_in, chan_id));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_ets (alert_in, display));
#		  endif
			if (ie == IE_UUI)		return (Get_ie_ets (alert_in, uui));
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (alert_in, facility) == PRESENT) {
#					if _ACU_PAR_EXT_FACILITY == ON
						Isdn_get_ss_first_comp_ets (alert_in, facility);
							cc_ext_fac_asn1_lgth = Isdn_get_val_ets (alert_in, facility, size);
							cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (alert_in, facility, component_nb);
							p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
#					endif
					return (PRESENT);
				}
			}

#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_ets (alert_in, progress_ind));
#		  endif
			break;

		case NS_CALL_PROC_IN :
			if (ie == IE_CHAN_ID)	return (Get_ie_ets (call_proc_in, chan_id));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_ets (call_proc_in, display));
#		  endif
#		  if _ACU_PAR_EXT_FACILITY == ON
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (call_proc_in, facility) == PRESENT) {
					Isdn_get_ss_first_comp_ets (call_proc_in, facility);
					cc_ext_fac_asn1_lgth = Isdn_get_val_ets (call_proc_in, facility, size);
					cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (call_proc_in, facility, component_nb);
					p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
					return (PRESENT);
				}
			}
#		  endif

#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_ets (call_proc_in, progress_ind));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_ets (progress_in, display));
#		  endif
			if (ie == IE_CAUSE)			return (Get_ie_ets (progress_in, cause));
#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_ets (progress_in, progress_ind));
#		  endif
#		  if _ACU_PAR_EXT_FACILITY == ON
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (progress_in, facility) == PRESENT) {
					Isdn_get_ss_first_comp_ets (progress_in, facility);
					cc_ext_fac_asn1_lgth = Isdn_get_val_ets (progress_in, facility, size);
					cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (progress_in, facility, component_nb);
					p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
					return (PRESENT);
				}
			}
#		  endif

			break;

		case NS_SETUP_ACK_IN :
			if (ie == IE_CHAN_ID)	return (Get_ie_ets (setup_ack_in, chan_id));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_ets (setup_ack_in, display));
#		  endif
#		  if _ACU_PAR_EXT_FACILITY == ON
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (setup_ack_in, facility) == PRESENT) {
					Isdn_get_ss_first_comp_ets (setup_ack_in, facility);
					cc_ext_fac_asn1_lgth = Isdn_get_val_ets (setup_ack_in, facility, size);
					cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (setup_ack_in, facility, component_nb);
					p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
					return (PRESENT);
				}
			}
#		  endif

#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_ets (setup_ack_in, progress_ind));
#		  endif
			break;

		case NS_SUSPEND_CO :
			if (ie == IE_CAUSE)		return (Get_ie_ets (suspend_co, cause));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_ets (suspend_co, display));
#		  endif
#		  if _ACU_PAR_EXT_FACILITY == ON
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (suspend_co, facility) == PRESENT) {
					Isdn_get_ss_first_comp_ets (suspend_co, facility);
					cc_ext_fac_asn1_lgth = Isdn_get_val_ets (suspend_co, facility, size);
					cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (suspend_co, facility, component_nb);
					p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
					return (PRESENT);
				}
			}
#		  endif

			break;

		case NS_RESUME_CO :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_ets (resume_co, chan_id));

				case IE_CAUSE :
					return (Get_ie_ets (resume_co, cause));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_ets (resume_co, display));
#			  endif

#			  if _ACU_PAR_EXT_FACILITY == ON
				case IE_FACILITY :

					if (Get_ie_ets (resume_co, facility) == PRESENT) {
						Isdn_get_ss_first_comp_ets (resume_co, facility);
						cc_ext_fac_asn1_lgth = Isdn_get_val_ets (resume_co, facility, size);
						cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (resume_co, facility, component_nb);
						p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
						return (PRESENT);
					}
					break;
#			  endif

			}
			break;

		case NS_RESTART_IN:
			if (ie == IE_CHAN_ID)	return (Get_ie_ets (restart_in, chan_id));
#		  if _ACU_PAR_EXT_FACILITY == ON
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (restart_in, facility) == PRESENT) {
					Isdn_get_ss_first_comp_ets (restart_in, facility);
					cc_ext_fac_asn1_lgth = Isdn_get_val_ets (restart_in, facility, size);
					cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (restart_in, facility, component_nb);
					p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
					return (PRESENT);
				}
			}
#		  endif

			break;

		case NS_USER_INFO_IN :
			if (ie == IE_UUI)		return (Get_ie_ets (user_info_in, uui));
#		  if _ACU_PAR_EXT_FACILITY == ON
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (user_info_in, facility) == PRESENT) {
					Isdn_get_ss_first_comp_ets (user_info_in, facility);
					cc_ext_fac_asn1_lgth = Isdn_get_val_ets (user_info_in, facility, size);
					cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (user_info_in, facility, component_nb);
					p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
					return (PRESENT);
				}
			}
#		  endif

			break;

		case NS_NOTIFY_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_ets (notify_in, display));
#		  endif
			break;

		case NS_FAC_IN :
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (fac_in, facility) == PRESENT) {
#					if _ACU_PAR_EXT_FACILITY == ON
						Isdn_get_ss_first_comp_ets (fac_in, facility);
						cc_ext_fac_asn1_lgth = Isdn_get_val_ets (fac_in, facility, size);
						cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (fac_in, facility, component_nb);
						p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
#					endif
					return (PRESENT);
				}
			}

			break;

		case NS_FAC_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_ets (fac_co, display));
#		  endif
			if (ie == IE_FACILITY) {

				if (Get_ie_ets (fac_co, facility) == PRESENT) {
#					if _ACU_PAR_EXT_FACILITY == ON
						Isdn_get_ss_first_comp_ets (fac_co, facility);
						cc_ext_fac_asn1_lgth = Isdn_get_val_ets (fac_co, facility, size);
						cc_ext_fac_asn1_comp_nb = Isdn_get_val_ets (fac_co, facility, component_nb);
						p_cc_ext_fac_asn1    = ns_int_ctx.p__ss_data;
#					endif
					return (PRESENT);
				}
			}

			break;

#		if NS_HOLD_RETRIEVE == ON

			case NS_HOLD_CO :

				switch (ie) {

					case IE_CAUSE :
						return (Get_ie_ets (hold_co, cause));

				}

				break;

			case NS_RET_CO :

				switch (ie) {

					case IE_CAUSE :
						return (Get_ie_ets (ret_co, cause));

				}

				break;

#		endif

	}

	return (ABSENT);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ets_isdn_p_str -

Usage           uchar ets_isdn_p_str (pr, ie);

Return value	: pointer to the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar FAR *ets_isdn_p_str (pr, ie)
	uchar	pr;
	uchar   ie;
{
	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_UUI:
					return (Isdn_p_str_ets (conn_in, uui, text));
				case IE_CALLING_NB:
					return (Isdn_p_str_ets (conn_in, calling_nb, nb));
				case IE_CALLING_SUB_ADD:
					return (Isdn_p_str_ets (conn_in, calling_sub_add, sub_add));
				case IE_CALLED_NB :
					return (Isdn_p_str_ets (conn_in, called_nb, nb));
				case IE_CALLED_SUB_ADD :
					return (Isdn_p_str_ets (conn_in, called_sub_add, sub_add));
#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_p_str_ets (conn_in, display, text));
#			  endif
#			  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
				case IE_FACILITY :
					return (Isdn_p_str_ets (conn_in, facility, invoke_id));
#			  endif
			}

			break;

		case NS_CONN_CO :
			if (ie == IE_UUI)		return (Isdn_p_str_ets (conn_co, uui, text));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (conn_co, display, text));
#		  endif
#		  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
			if (ie == IE_FACILITY) 	return (Isdn_p_str_ets (conn_co, facility, invoke_id));
#		  endif
			break;

		case NS_ALERT_IN :
			if (ie == IE_UUI)		return (Isdn_p_str_ets (alert_in, uui, text));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (alert_in, display, text));
#		  endif
#		  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
			if (ie == IE_FACILITY) 	return (Isdn_p_str_ets (alert_in, facility, invoke_id));
#		  endif
			break;

		case NS_CALL_PROC_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (call_proc_in, display, text));
#		  endif
			break;

		case NS_CLEAR_IN :
			if (ie == IE_UUI)		return (Isdn_p_str_ets (clear_in, uui, text));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (clear_in, display, text));
#		  endif
#		  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
			if (ie == IE_FACILITY) 	return (Isdn_p_str_ets (clear_in, facility, invoke_id));
#		  endif
			break;

		case NS_CLEAR_CO :
			if (ie == IE_UUI)		return (Isdn_p_str_ets (clear_co, uui, text));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (clear_co, display, text));
#		  endif
#		  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
			if (ie == IE_FACILITY) 	return (Isdn_p_str_ets (clear_co, facility, invoke_id));
#		  endif
			break;

		case NS_INFO_IN :
			if (ie == IE_CALLED_NB)	return (Isdn_p_str_ets (info_in, called_nb, nb));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (info_in, display, text));
#		  endif
#		  if CC_PAR_KEYPAD_IE == ON
			if (ie == IE_KEYPAD)	return (Isdn_p_str_ets (info_in, keypad, text));
#		  endif
			break;

		case NS_NOTIFY_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (notify_in, display, text));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (progress_in, display, text));
#		  endif
			break;

		case NS_SETUP_ACK_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (setup_ack_in, display, text));
#		  endif
			break;

		case NS_SUSPEND_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (suspend_co, display, text));
#		  endif
			break;

		case NS_RESUME_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_p_str_ets (resume_co, display, text));
#		  endif
			break;

		case NS_USER_INFO_IN :
			if (ie == IE_UUI)		return (Isdn_p_str_ets (user_info_in, uui, text));
			break;

		case NS_FAC_IN :
#		  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
			if (ie == IE_FACILITY) 	return (Isdn_p_str_ets (fac_in, facility, invoke_id));
#		  endif
			break;

		case NS_FAC_CO :
#		  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
			if (ie == IE_FACILITY) 	return (Isdn_p_str_ets (fac_co, facility, invoke_id));
#		  endif
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Isdn_p_str_ets (fac_co, display, text));
#		  endif
			break;

	}

	return (P_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ets_isdn_lgth_str -

Usage           uchar ets_isdn_lgth_str (pr, ie);

Return value	: length of the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar ets_isdn_lgth_str (pr, ie)
	uchar	pr;
	uchar   ie;
{
#if CC_PAR_CHARGING_INFO == ON
	uchar	lgth;
#endif

	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_UUI:
					return (Isdn_lgth_str_ets (conn_in, uui, text));

				case IE_CALLING_NB:
					return (Isdn_lgth_str_ets (conn_in, calling_nb, nb));

				case IE_CALLING_SUB_ADD:
					return (Isdn_lgth_str_ets (conn_in, calling_sub_add, sub_add));

				case IE_CALLED_NB :
					return (Isdn_lgth_str_ets (conn_in, called_nb, nb));

				case IE_CALLED_SUB_ADD :
					return (Isdn_lgth_str_ets (conn_in, called_sub_add, sub_add));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_lgth_str_ets (conn_in, display, text));
#			  endif

#			  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
				case IE_FACILITY :
					return (Isdn_lgth_str_ets (conn_in, facility, invoke_id));
#			  endif
			}

			break;

		case NS_CONN_CO :

			switch (ie) {

				case IE_UUI :
					return (Isdn_lgth_str_ets (conn_co, uui, text));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_lgth_str_ets (conn_co, display, text));
#			  endif

#			  if CC_PAR_CHARGING_INFO == ON
				case IE_CHARGING :

						/* Try to get from codeset 6 first */

					if ((lgth = Isdn_lgth_str_ets (conn_co, advice_charge, value)) != 0) {
						return (lgth);
					}

					return (Isdn_lgth_str_ets (conn_co, advice_charge_5, value));
#			  endif

#			  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
				case IE_FACILITY :
					return (Isdn_lgth_str_ets (conn_co, facility, invoke_id));
#			  endif
			}

			break;

		case NS_ALERT_IN :

			switch (ie) {

				case IE_UUI :
					return (Isdn_lgth_str_ets (alert_in, uui, text));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_lgth_str_ets (alert_in, display, text));
#			  endif

#			  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
				case IE_FACILITY :
					return (Isdn_lgth_str_ets (alert_in, facility, invoke_id));
#			  endif
			}

			break;

		case NS_CALL_PROC_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_ets (call_proc_in, display, text));
#		  endif
			break;

		case NS_CLEAR_IN :

			switch (ie) {

				case IE_UUI :
					return (Isdn_lgth_str_ets (clear_in, uui, text));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_lgth_str_ets (clear_in, display, text));
#			  endif

#			  if CC_PAR_CHARGING_INFO == ON
				case IE_CHARGING :

						/* Try to get from codeset 6 first */

					if ((lgth = Isdn_lgth_str_ets (clear_in, advice_charge, value)) != 0) {
						return (lgth);
					}

					return (Isdn_lgth_str_ets (clear_in, advice_charge_5, value));
#			  endif

#			  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
				case IE_FACILITY :
					return (Isdn_lgth_str_ets (clear_in, facility, invoke_id));
#			  endif
			}

			break;

		case NS_CLEAR_CO :

			switch (ie) {

				case IE_UUI :
					return (Isdn_lgth_str_ets (clear_co, uui, text));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_lgth_str_ets (clear_co, display, text));
#			  endif

#			  if CC_PAR_CHARGING_INFO == ON
				case IE_CHARGING :

						/* Try to get from codeset 6 first */

					if ((lgth = Isdn_lgth_str_ets (clear_co, advice_charge, value)) != 0) {
						return (lgth);
					}

					return (Isdn_lgth_str_ets (clear_co, advice_charge_5, value));
#			  endif

#			  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
				case IE_FACILITY :
					return (Isdn_lgth_str_ets (clear_co, facility, invoke_id));
#			  endif
			}

			break;

		case NS_INFO_IN :

			switch (ie) {

				case IE_CALLED_NB :
					return (Isdn_lgth_str_ets (info_in, called_nb, nb));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_lgth_str_ets (info_in, display, text));
#			  endif

#			  if CC_PAR_CHARGING_INFO == ON
				case IE_CHARGING :

						/* Try to get from codeset 6 first */

					if ((lgth = Isdn_lgth_str_ets (info_in, advice_charge, value)) != 0) {
						return (lgth);
					}

					return (Isdn_lgth_str_ets (info_in, advice_charge_5, value));
#			  endif

#			  if CC_PAR_KEYPAD_IE == ON
				case IE_KEYPAD :
					return (Isdn_lgth_str_ets (info_in, keypad, text));
#			  endif

			}
			break;

		case NS_NOTIFY_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_ets (notify_in, display, text));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_ets (progress_in, display, text));
#		  endif
			break;

		case NS_SETUP_ACK_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_ets (setup_ack_in, display, text));
#		  endif
			break;

		case NS_SUSPEND_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_ets (suspend_co, display, text));
#		  endif
			break;

		case NS_RESUME_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_ets (resume_co, display, text));
#		  endif
			break;

		case NS_USER_INFO_IN :
			if (ie == IE_UUI)		return (Isdn_lgth_str_ets (user_info_in, uui, text));
			break;

		case NS_FAC_IN :
#		  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
			if (ie == IE_FACILITY) 	return (Isdn_lgth_str_ets (fac_in, facility, invoke_id));
#		  endif
			break;

		case NS_FAC_CO :

			switch (ie) {

				case IE_FACILITY :
#				  if (CC_SUPP_SERVICES == ON) && (_ACU_PAR_EXT_FACILITY == OFF)
					return (Isdn_lgth_str_ets (fac_co, facility, invoke_id));
#				  endif

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_lgth_str_ets (fac_co, display, text));
#			  endif

				default:
					break;
			}
			break;

	}

	return (NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ets_isdn_get_val -

Usage           uchar ets_isdn_get_val (pr, ie, field);

Return value	: value of the 'field' field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar ets_isdn_get_val (pr, ie, field)
	uchar pr;
	uchar ie;
	uchar field;
{
#if CC_PAR_CHARGING_INFO == ON
	uchar val;
	uchar index;
#endif

	switch (ie) {

		case IE_CAUSE :

			switch (pr) {

				case NS_CLEAR_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_ets (clear_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_ets (clear_in,cause,cause_class));
					}

					break;

				case NS_CLEAR_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_ets (clear_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_ets (clear_co,cause,cause_class));
					}

					break;

				case NS_SUSPEND_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_ets (suspend_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_ets (suspend_co,cause,cause_class));
					}

					break;

				case NS_RESUME_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_ets (resume_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_ets (resume_co,cause,cause_class));
					}

					break;

				case NS_PROGRESS_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_ets (progress_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_ets (progress_in,cause,cause_class));
					}

					break;

#			if NS_HOLD_RETRIEVE == ON

				case NS_HOLD_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_ets (hold_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_ets (hold_co,cause,cause_class));
					}

					break;

				case NS_RET_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_ets (ret_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_ets (ret_co,cause,cause_class));
					}

					break;

#			endif

			}

			break;

		case IE_RESTART_IND :

			if ((pr == NS_RESTART_IN) && (field == FLD_RESTART_CLASS)) {
				return (Isdn_get_val_ets (restart_in, restart_ind, restart_class));
			}

			break;

#	if CC_PAR_CHARGING_INFO == ON /* { */

		case IE_CHARGING :

			switch (pr) {

				case NS_CONN_CO :

					switch (field) {

						case FLD_CHARGING_TYPE :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (conn_co, advice_charge, charge_type)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (conn_co, advice_charge_5, charge_type));

						case FLD_CHARGING_PERIOD :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (conn_co, advice_charge, charge_period)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (conn_co, advice_charge_5, charge_period));

						case FLD_CHARGING_MULTI :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (conn_co, advice_charge, charge_period_m)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (conn_co, advice_charge_5, charge_period_m));


						case FLD_CHARGING_VAL1 :
							index = 1;

					conn_co_charging_val:

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (conn_co, advice_charge, value[index])) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (conn_co, advice_charge_5, value[index]));

						case FLD_CHARGING_VAL2 :
							index = 2;
							goto conn_co_charging_val;

						case FLD_CHARGING_VAL3 :
							index = 3;
							goto conn_co_charging_val;

					}

					break;

				case NS_CLEAR_IN :

					switch (field) {

						case FLD_CHARGING_TYPE :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (clear_in, advice_charge, charge_type)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (clear_in, advice_charge_5, charge_type));

						case FLD_CHARGING_PERIOD :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (clear_in, advice_charge, charge_period)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (clear_in, advice_charge_5, charge_period));

						case FLD_CHARGING_MULTI :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (clear_in, advice_charge, charge_period_m)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (clear_in, advice_charge_5, charge_period_m));


						case FLD_CHARGING_VAL1 :
							index = 1;

					clear_in_charging_val:

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (clear_in, advice_charge, value[index])) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (clear_in, advice_charge_5, value[index]));

						case FLD_CHARGING_VAL2 :
							index = 2;
							goto clear_in_charging_val;

						case FLD_CHARGING_VAL3 :
							index = 3;
							goto clear_in_charging_val;

					}

					break;

				case NS_CLEAR_CO :

					switch (field) {

						case FLD_CHARGING_TYPE :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (clear_co, advice_charge, charge_type)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (clear_co, advice_charge_5, charge_type));

						case FLD_CHARGING_PERIOD :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (clear_co, advice_charge, charge_period)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (clear_co, advice_charge_5, charge_period));

						case FLD_CHARGING_MULTI :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (clear_co, advice_charge, charge_period_m)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (clear_co, advice_charge_5, charge_period_m));


						case FLD_CHARGING_VAL1 :
							index = 1;

					clear_co_charging_val:

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (clear_co, advice_charge, value[index])) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (clear_co, advice_charge_5, value[index]));

						case FLD_CHARGING_VAL2 :
							index = 2;
							goto clear_co_charging_val;

						case FLD_CHARGING_VAL3 :
							index = 3;
							goto clear_co_charging_val;

					}

					break;

				case NS_INFO_IN :

					switch (field) {

						case FLD_CHARGING_TYPE :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (info_in, advice_charge, charge_type)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (info_in, advice_charge_5, charge_type));

						case FLD_CHARGING_PERIOD :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (info_in, advice_charge, charge_period)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (info_in, advice_charge_5, charge_period));

						case FLD_CHARGING_MULTI :

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (info_in, advice_charge, charge_period_m)) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (info_in, advice_charge_5, charge_period_m));


						case FLD_CHARGING_VAL1 :
							index = 1;

					info_in_charging_val:

								/* Try to get from codeset 6 first */

							if ((val = Isdn_get_val_ets (info_in, advice_charge, value[index])) != BYTE_VAL_NIL) {
								return (val);
							}

							return (Isdn_get_val_ets (info_in, advice_charge_5, value[index]));

						case FLD_CHARGING_VAL2 :
							index = 2;
							goto info_in_charging_val;

						case FLD_CHARGING_VAL3 :
							index = 3;
							goto info_in_charging_val;

					}

					break;

			}

			break;

#	endif	/* CC_PAR_CHARGING_INFO == ON } */

		case IE_CALLING_NB:

			switch (pr) {

				case NS_CONN_IN :

					switch (field) {

						case FLD_NB_PRES:
							return (Isdn_get_val_ets (conn_in, calling_nb, pres));

						case FLD_NB_TYPE:
							return (Isdn_get_val_ets (conn_in, calling_nb, nb_type));

						case FLD_NB_SCREEN:
							return (Isdn_get_val_ets (conn_in, calling_nb, screen_ind));

					}
					break;

			}
			break;

		case IE_CALLED_NB:

			switch (pr) {

				case NS_CONN_IN :

					switch (field) {

						case FLD_NB_TYPE:
							return (Isdn_get_val_ets (conn_in, called_nb, nb_type));

						case FLD_NB_PLAN:
							return (Isdn_get_val_ets (conn_in, called_nb, plan_id));

					}
					break;

			}
			break;

#	if CC_PAR_DATE_TIME == ON /* { */

		case IE_DATE_TIME:

				/*
					Special case for 'Date_time' IE:
					get ALL IE fields in one operation only,
					and fill-in the CC internal structure (cc_date_time)
				*/

			switch (pr) {

				case NS_CONN_CO :
					cc_date_time.year   = Isdn_get_val_ets (conn_co, date_time, year);
					cc_date_time.month  = Isdn_get_val_ets (conn_co, date_time, month);
					cc_date_time.day    = Isdn_get_val_ets (conn_co, date_time, day);
					cc_date_time.hour   = Isdn_get_val_ets (conn_co, date_time, hour);
					cc_date_time.minute = Isdn_get_val_ets (conn_co, date_time, minute);
					cc_date_time.second = 0; /* no second in this IE */
					return (BYTE_VAL_NIL);

			}
			break;

#	endif	/* CC_PAR_DATE_TIME == ON } */

#	if ACU_PAR_EXT_LLC == ON /* { */

		case IE_EXT_LLC:

				/*
					Special case for 'LLC' IE:
					get ALL IE fields in one operation only,
					and fill-in the CC internal structure (cc_ext_llc)
				*/

			switch (pr) {

				case NS_CONN_IN :
					cc_ext_llc.coding_std  = Isdn_get_val_ets (conn_in, llc, coding_std);
					cc_ext_llc.trf_cap     = Isdn_get_val_ets (conn_in, llc, trf_cap);
					cc_ext_llc.out_band_neg= Isdn_get_val_ets (conn_in, llc, out_band_neg);
					cc_ext_llc.trf_mode    = Isdn_get_val_ets (conn_in, llc, trf_mode);
					cc_ext_llc.trf_rate    = Isdn_get_val_ets (conn_in, llc, trf_rate);
					cc_ext_llc.structure   = Isdn_get_val_ets (conn_in, llc, structure);
					cc_ext_llc.config      = CONFIG_POINT_TO_POINT;
					cc_ext_llc.establish   = EST_DEMAND;
					cc_ext_llc.symmetry    = BIDIRECTIONAL_SYMMETRY;
					cc_ext_llc.dest_rate   = Isdn_get_val_ets (conn_in, llc, dest_rate);
					cc_ext_llc.l1_protocol = Isdn_get_val_ets (conn_in, llc, protocol_id_1);
					cc_ext_llc.syn_asyn    = Isdn_get_val_ets (conn_in, llc, syn_asyn);
					cc_ext_llc.negotiation = Isdn_get_val_ets (conn_in, llc, negotiation);
					cc_ext_llc.user_rate   = Isdn_get_val_ets (conn_in, llc, user_rate);
					cc_ext_llc.inter_rate  = Isdn_get_val_ets (conn_in, llc, inter_rate);
					cc_ext_llc.nic_tx      = Isdn_get_val_ets (conn_in, llc, nic_tx);
					cc_ext_llc.nic_rx      = Isdn_get_val_ets (conn_in, llc, nic_rx);
					cc_ext_llc.fc_tx       = Isdn_get_val_ets (conn_in, llc, fc_tx);
					cc_ext_llc.fc_rx       = Isdn_get_val_ets (conn_in, llc, fc_rx);
					cc_ext_llc.ra_hdr      = Isdn_get_val_ets (conn_in, llc, hdr);
					cc_ext_llc.multi_frame = Isdn_get_val_ets (conn_in, llc, multi_frame);
					cc_ext_llc.op_mode     = Isdn_get_val_ets (conn_in, llc, op_mode);
					cc_ext_llc.lli_negot   = Isdn_get_val_ets (conn_in, llc, lli_negot);
					cc_ext_llc.assign      = Isdn_get_val_ets (conn_in, llc, assign);
					cc_ext_llc.band_negot  = Isdn_get_val_ets (conn_in, llc, band_negot);
					cc_ext_llc.stop_bits   = Isdn_get_val_ets (conn_in, llc, stop_bit);
					cc_ext_llc.data_bits   = Isdn_get_val_ets (conn_in, llc, data_bit);
					cc_ext_llc.parity      = Isdn_get_val_ets (conn_in, llc, parity);
					cc_ext_llc.duplex      = Isdn_get_val_ets (conn_in, llc, duplex);
					cc_ext_llc.modem       = Isdn_get_val_ets (conn_in, llc, modem);
					cc_ext_llc.l2_protocol = Isdn_get_val_ets (conn_in, llc, protocol_id_2);
					cc_ext_llc.l2_option   = Isdn_get_val_ets (conn_in, llc, option_2);
					cc_ext_llc.l3_protocol = Isdn_get_val_ets (conn_in, llc, protocol_id_3);
					cc_ext_llc.l3_option   = Isdn_get_val_ets (conn_in, llc, option_3);
					return (BYTE_VAL_NIL);

			}
			break;

#	endif /* ACU_PAR_EXT_LLC == ON } */

#	if CC_PAR_PROGRESS_IND_IE == ON
		case IE_PROGRESS_IND :

			switch (pr) {

				case NS_CONN_IN :
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (Get_ie_ets (conn_in, progress_ind) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_ets (conn_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_ets (conn_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_ets (conn_in, progress_ind);
						cc_progress_ind.nb++;
					}

					break;

				case NS_SETUP_ACK_IN :
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (Get_ie_ets (setup_ack_in, progress_ind) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_ets (setup_ack_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_ets (setup_ack_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_ets (setup_ack_in, progress_ind);
						cc_progress_ind.nb++;
					}

					break;

				case NS_CALL_PROC_IN :
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (Get_ie_ets (call_proc_in, progress_ind) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_ets (call_proc_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_ets (call_proc_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_ets (call_proc_in, progress_ind);
						cc_progress_ind.nb++;
					}

					break;

				case NS_ALERT_IN :
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (Get_ie_ets (alert_in, progress_ind) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_ets (alert_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_ets (alert_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_ets (alert_in, progress_ind);
						cc_progress_ind.nb++;
					}

					break;

				case NS_PROGRESS_IN :
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (Get_ie_ets (progress_in, progress_ind) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_ets (progress_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_ets (progress_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_ets (progress_in, progress_ind);
						cc_progress_ind.nb++;
					}

					break;

				case NS_CONN_CO :
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (Get_ie_ets (conn_co, progress_ind) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_ets (conn_co, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_ets (conn_co, progress_ind, progress_descr);
						Set_to_next_ie_instance_ets (conn_co, progress_ind);
						cc_progress_ind.nb++;
					}

					break;

				case NS_CLEAR_IN :
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (Get_ie_ets (clear_in, progress_ind) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_ets (clear_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_ets (clear_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_ets (clear_in, progress_ind);
						cc_progress_ind.nb++;
					}

					break;

			}

			break;
#	endif

	}

	return (BYTE_VAL_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ets_cc_get_chan_id - implements the estraction of the channel
				ID given by the network.

Usage           uchar ets_cc_get_chan_id ();

Return value	: chan_id or NO_CHAN

*--------------------------------------------------------------------------*/

#define	Ets_int_type					((P_val_ns_ets(chan_id))p_start_val_ns) -> int_type
#define	Ets_bri_selected_channel		((P_val_ns_ets(chan_id))p_start_val_ns) -> chan_sel
#define	Ets_channel_pref_excl			((P_val_ns_ets(chan_id))p_start_val_ns) -> pref_excl
#define	Ets_pri_selected_channel(xx)	((uchar FAR *)p_start_val_ns + Offsetof (val_ns_ets_chan_id, chan_nb))[xx]

uchar ets_cc_get_chan_id (pr, ie)
	uchar pr;
	uchar ie;
{

	uchar FAR *p_start_val_ns;
	uchar i,j,k;

	p_start_val_ns = ets_p_start_val_ns (pr,ie);


		/*
			If 'chan_sel' is NO_CHAN, return NO_CHAN.

			If 'int_type' field is INT_TYPE_BRI,
				return 'chan_sel' field,	(<=> Basic Rate access)
			else
				return 'chan_nb' field.     (<=> Primary Rate access)
		*/

	if ((p_start_val_ns == P_NIL) || (Ets_bri_selected_channel == NO_CHAN)) {
		return (OK);
	}

    	/* read the fields 'Channel selection' and 'Preferred/Exclusive' */

	cc_chan_excl  = Ets_channel_pref_excl;
	cc_chan_sel = Ets_bri_selected_channel;

	if (pr != NS_RESTART_IN) {

		if (Ets_int_type == INT_TYPE_BRI) {

				/* Basic rate : chan_id is in 'chan_sel' field */

			cc_chan_nb    = 1;
			cc_chan_id[0] = Ets_bri_selected_channel;

		} else {

				/*
				 * Primary rate.
				 * We select the first one.
				 */

			cc_chan_nb    = 1;
			cc_chan_id[0] = Ets_pri_selected_channel (1);
		}

	} else {

			/* Get all channel ID occurences */

		Get_remaining_ie_instance_nb_ets (restart_in, chan_id, &i);

		for (j = 0; (j < i) && (j < CC_NB_CHAN_ID_SENT); j++) {

			if (Ets_int_type == INT_TYPE_BRI) {
				cc_chan_id[j] = Ets_bri_selected_channel;

			} else {

				for (k = 0; k < Ets_pri_selected_channel (0); k++) {
					cc_chan_id[j+k] = Ets_pri_selected_channel (k+1);
				}
			}

			Set_to_next_ie_instance (ets_restart_in, ets_chan_id);
			p_start_val_ns = ets_p_start_val_ns (pr, IE_CHAN_ID);

		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ets_get_remaining_ie_instance -

Usage           uchar ets_get_remaining_ie_instance (pr, ie);

Return value	: nb of remaining IE instance.

*--------------------------------------------------------------------------*/

uchar ets_get_remaining_ie_instance (pr, ie)
	uchar pr;
	uchar ie;
{
	uchar instance_nb = 0;

	switch (ie) {

#	  if CC_PAR_DISPLAY_IE == ON
		case IE_DISPLAY :
			if (pr == NS_CONN_IN)		{Get_remaining_ie_instance_nb_ets (conn_in, display, &instance_nb); 		break;}
			if (pr == NS_CONN_CO)		{Get_remaining_ie_instance_nb_ets (conn_co, display, &instance_nb);     	break;}
			if (pr == NS_CLEAR_IN)		{Get_remaining_ie_instance_nb_ets (clear_in, display, &instance_nb);    	break;}
			if (pr == NS_CLEAR_CO)		{Get_remaining_ie_instance_nb_ets (clear_co, display, &instance_nb);    	break;}
			if (pr == NS_ALERT_IN)		{Get_remaining_ie_instance_nb_ets (alert_in, display, &instance_nb);    	break;}
			if (pr == NS_CALL_PROC_IN)	{Get_remaining_ie_instance_nb_ets (call_proc_in, display, &instance_nb);	break;}
			if (pr == NS_SETUP_ACK_IN)	{Get_remaining_ie_instance_nb_ets (setup_ack_in, display, &instance_nb);	break;}
			if (pr == NS_INFO_IN) 		{Get_remaining_ie_instance_nb_ets (info_in, display, &instance_nb);     	break;}
			if (pr == NS_PROGRESS_IN)	{Get_remaining_ie_instance_nb_ets (progress_in, display, &instance_nb); 	break;}
			if (pr == NS_SUSPEND_CO)	{Get_remaining_ie_instance_nb_ets (suspend_co, display, &instance_nb); 		break;}
			if (pr == NS_RESUME_CO)		{Get_remaining_ie_instance_nb_ets (resume_co, display, &instance_nb); 		break;}
			if (pr == NS_NOTIFY_IN)		{Get_remaining_ie_instance_nb_ets (notify_in, display, &instance_nb); 		break;}
			break;
#	  endif

		default:
			break;
	}

	return (instance_nb);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ets_set_to_next_ie_instance -

Usage           uchar ets_set_to_next_ie_instance (pr, ie);

Return value	: set to the next IE's instance.

*--------------------------------------------------------------------------*/

uchar ets_set_to_next_ie_instance(pr, ie)
	uchar pr;
	uchar ie;
{

	switch (ie) {

#	  if CC_PAR_DISPLAY_IE == ON
		case IE_DISPLAY :
			if (pr == NS_CONN_IN)		{Set_to_next_ie_instance_ets (conn_in, display);	break;}
			if (pr == NS_CONN_CO)		{Set_to_next_ie_instance_ets (conn_co, display);	break;}
			if (pr == NS_CLEAR_IN)		{Set_to_next_ie_instance_ets (clear_in, display);	break;}
			if (pr == NS_CLEAR_CO)		{Set_to_next_ie_instance_ets (clear_co, display);	break;}
			if (pr == NS_ALERT_IN)		{Set_to_next_ie_instance_ets (alert_in, display);	break;}
			if (pr == NS_CALL_PROC_IN)	{Set_to_next_ie_instance_ets (call_proc_in, display);break;}
			if (pr == NS_SETUP_ACK_IN)	{Set_to_next_ie_instance_ets (setup_ack_in, display);break;}
			if (pr == NS_INFO_IN) 		{Set_to_next_ie_instance_ets (info_in, display);	break;}
			if (pr == NS_PROGRESS_IN)	{Set_to_next_ie_instance_ets (progress_in, display);break;}
			if (pr == NS_SUSPEND_CO)	{Set_to_next_ie_instance_ets (suspend_co, display);	break;}
			if (pr == NS_RESUME_CO)		{Set_to_next_ie_instance_ets (resume_co, display);	break;}
			if (pr == NS_NOTIFY_IN)		{Set_to_next_ie_instance_ets (notify_in, display);	break;}
			break;
#	  endif

#	  if CC_PAR_MULTIPLE_CALLING_NB == ON
		case IE_CALLING_NB :
			if (pr == NS_CONN_IN)		{Set_to_next_ie_instance_ets (conn_in, calling_nb);	break;}
			break;
#	  endif

		default:
			break;
	}

	return (NIL);

}

/*EOF*/
