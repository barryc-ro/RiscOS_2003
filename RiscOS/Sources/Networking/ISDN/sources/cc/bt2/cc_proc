/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_proc.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		bt2_cc_get_chan_id - implements the extraction of the channel
 *			ID given by the network.
 *
 * 		bt2_cc_test_address_match - tests if received address/sub-address
 *				matches one of the registered NA addresses.
 *
 *		bt2_p_start_val_ns (pr, ie) - pointer to the val_ns start for 'ie' IE.
 *
 *		bt2_get_ie (pr, ie) - return PRESENT/ABSENT
 *
 *		bt2_isdn_p_str (pr, ie) - return pointer to the string field
 *			of 'ie' IE of 'pr' Primitive
 *
 * 		bt2_isdn_lgth_str (pr, ie) - return length of the string field
 *			of 'ie' IE of 'pr' Primitive
 *
 * 		bt2_isdn_get_val (pr, ie, field) - return value of the 'field'
 *		field of 'ie' IE of 'pr' Primitive
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_p_start_val_ns -

Usage           uchar bt2_p_start_val_ns (pr, ie);

Return value	: pointer to the val_ns start for 'ie' IE.

*--------------------------------------------------------------------------*/

uchar FAR *bt2_p_start_val_ns (pr, ie)
	uchar pr;
	uchar ie;
{
	if (ie == IE_CHAN_ID) {

		switch (pr) {

			case NS_CONN_IN :
				return ((uchar FAR *)P_start_val_ns_bt2 (conn_in, chan_id));

			case NS_CONN_CO :
				return ((uchar FAR *)P_start_val_ns_bt2 (conn_co, chan_id));

			case NS_SETUP_ACK_IN :
				return ((uchar FAR *)P_start_val_ns_bt2 (setup_ack_in, chan_id));

			case NS_CALL_PROC_IN :
				return ((uchar FAR *)P_start_val_ns_bt2 (call_proc_in, chan_id));

			case NS_RESUME_CO :
				return ((uchar FAR *)P_start_val_ns_bt2 (resume_co, chan_id));
		}

	}

	return (P_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_get_ie -

Usage           uchar bt2_get_ie (pr, ie);

Return value	: PRESENT/ABSENT

*--------------------------------------------------------------------------*/


uchar bt2_get_ie (pr, ie)
	uchar pr;
	uchar ie;
{

	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_bt2 (conn_in, chan_id));

				case IE_CALLING_NB :
					return (Get_ie_bt2 (conn_in, calling_nb));

				case IE_CALLED_NB :
					return (Get_ie_bt2 (conn_in, called_nb));

				case IE_CALLED_SUB_ADD :
					return (Get_ie_bt2 (conn_in, called_sub_add));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_bt2 (conn_in, display));
#			  endif
			}

			break;

		case NS_CONN_CO :

			if (ie == IE_CHAN_ID) return (Get_ie_bt2 (conn_co, chan_id));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Get_ie_bt2 (conn_co, display));
#		  endif
			break;

		case NS_CLEAR_CO :

			if (ie == IE_CAUSE) 	return (Get_ie_bt2 (clear_co, cause));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_bt2 (clear_co, display));
#		  endif
			break;

		case NS_CLEAR_IN :

#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_bt2 (clear_in, display));
#		  endif
			break;

		case NS_CALL_PROC_IN :
			if (ie == IE_CHAN_ID) 	return (Get_ie_bt2 (call_proc_in, chan_id));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) 	return (Get_ie_bt2 (call_proc_in, display));
#		  endif
			break;

		case NS_SETUP_ACK_IN :
			if (ie == IE_CHAN_ID) return (Get_ie_bt2 (setup_ack_in, chan_id));
			break;

		case NS_ALERT_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Get_ie_bt2 (alert_in, display));
#		  endif
			break;

		case NS_INFO_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Get_ie_bt2 (info_in, display));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Get_ie_bt2 (progress_in, display));
#		  endif
			if (ie == IE_CAUSE)			return (Get_ie_bt2 (progress_in, cause));
#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_bt2 (progress_in, progress_ind));
#		  endif
			break;

		case NS_NOTIFY_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Get_ie_bt2 (notify_in, display));
#		  endif
			break;

		case NS_SUSPEND_CO :
			if (ie == IE_CAUSE) return (Get_ie_bt2 (suspend_co, cause));
			break;

		case NS_RESUME_CO :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_bt2 (resume_co, chan_id));

				case IE_CAUSE :
					return (Get_ie_bt2 (resume_co, cause));

			}
			break;

	}

	return (ABSENT);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_isdn_p_str -

Usage           uchar bt2_isdn_p_str (pr, ie);

Return value	: pointer to the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar FAR *bt2_isdn_p_str (pr, ie)
	uchar	pr;
	uchar   ie;
{
	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_CALLING_NB:
					return (Isdn_p_str_bt2 (conn_in, calling_nb, nb));
				case IE_CALLED_NB :
					return (Isdn_p_str_bt2 (conn_in, called_nb, nb));
				case IE_CALLED_SUB_ADD :
					return (Isdn_p_str_bt2 (conn_in, called_sub_add, sub_add));
#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_p_str_bt2 (conn_in, display, text));
#			  endif
			}

			break;

		case NS_CONN_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_p_str_bt2 (conn_co, display, text));
#		  endif
			break;

		case NS_CALL_PROC_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_p_str_bt2 (call_proc_in, display, text));
#		  endif
			break;

		case NS_ALERT_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_p_str_bt2 (alert_in, display, text));
#		  endif
			break;

		case NS_CLEAR_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_p_str_bt2 (clear_in, display, text));
#		  endif
			break;

		case NS_CLEAR_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_p_str_bt2 (clear_co, display, text));
#		  endif
			break;

		case NS_NOTIFY_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_p_str_bt2 (notify_in, display, text));
#		  endif
			break;

		case NS_INFO_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_p_str_bt2 (info_in, display, text));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_p_str_bt2 (progress_in, display, text));
#		  endif
			break;

	}

	return (P_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_isdn_lgth_str -

Usage           uchar bt2_isdn_lgth_str (pr, ie);

Return value	: length of the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar bt2_isdn_lgth_str (pr, ie)
	uchar	pr;
	uchar   ie;
{
	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_CALLING_NB:
					return (Isdn_lgth_str_bt2 (conn_in, calling_nb, nb));
				case IE_CALLED_NB :
					return (Isdn_lgth_str_bt2 (conn_in, called_nb, nb));
				case IE_CALLED_SUB_ADD :
					return (Isdn_lgth_str_bt2 (conn_in, called_sub_add, sub_add));
#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Isdn_lgth_str_bt2 (conn_in, display, text));
#			  endif
			}

			break;

		case NS_CONN_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_lgth_str_bt2 (conn_co, display, text));
#		  endif
			break;

		case NS_CALL_PROC_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_lgth_str_bt2 (call_proc_in, display, text));
#		  endif
			break;

		case NS_ALERT_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_lgth_str_bt2 (alert_in, display, text));
#		  endif
			break;

		case NS_CLEAR_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_lgth_str_bt2 (clear_in, display, text));
#		  endif
			break;

		case NS_CLEAR_CO :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_lgth_str_bt2 (clear_co, display, text));
#		  endif
			break;

		case NS_NOTIFY_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_lgth_str_bt2 (notify_in, display, text));
#		  endif
			break;

		case NS_INFO_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_lgth_str_bt2 (info_in, display, text));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY) return (Isdn_lgth_str_bt2 (progress_in, display, text));
#		  endif
			break;

	}

	return (NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_isdn_get_val -

Usage           uchar bt2_isdn_get_val (pr, ie, field);

Return value	: value of the 'field' field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar bt2_isdn_get_val (pr, ie, field)
	uchar pr;
	uchar ie;
	uchar field;
{
	switch (ie) {

		case IE_CAUSE :

			switch (pr) {

				case NS_CLEAR_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_bt2 (clear_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_bt2 (clear_in,cause,cause_class));
					}

					break;

				case NS_CLEAR_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_bt2 (clear_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_bt2 (clear_co,cause,cause_class));
					}

					break;

				case NS_SUSPEND_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_bt2 (suspend_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_bt2 (suspend_co,cause,cause_class));
					}

					break;

				case NS_RESUME_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_bt2 (resume_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_bt2 (resume_co,cause,cause_class));
					}

					break;

				case NS_PROGRESS_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_bt2 (progress_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_bt2 (progress_in,cause,cause_class));
					}

					break;
			}

			break;

#	if CC_PAR_PROGRESS_IND_IE == ON
		case IE_PROGRESS_IND :

			switch (pr) {

				case NS_PROGRESS_IN :
                    cc_progress_ind.nb = 0;
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (bt2_get_ie (NS_PROGRESS_IN,IE_PROGRESS_IND) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_bt2 (progress_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_bt2 (progress_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_bt2 (progress_in, progress_ind);
                    	cc_progress_ind.nb++;
                    }

					break;

			}

			break;
#	endif

		case IE_CALLING_NB:

			switch (pr) {

				case NS_CONN_IN :

					switch (field) {

						case FLD_NB_PRES:
							return (Isdn_get_val_bt2 (conn_in, calling_nb, pres));

						case FLD_NB_SCREEN:
							return (Isdn_get_val_bt2 (conn_in, calling_nb, screen_ind));

					}
					break;

			}
			break;

	}

	return (BYTE_VAL_NIL);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_cc_get_chan_id - implements the estraction of the channel
				ID given by the network.

Usage           uchar bt2_cc_get_chan_id ();

Return value	: chan_id or NO_CHAN

*--------------------------------------------------------------------------*/

#define	Bt2_int_type					((P_val_ns_bt2(chan_id))p_start_val_ns) -> int_type
#define	Bt2_bri_selected_channel		((P_val_ns_bt2(chan_id))p_start_val_ns) -> chan_sel
#define	Bt2_channel_pref_excl			((P_val_ns_bt2(chan_id))p_start_val_ns) -> pref_excl
#define	Bt2_pri_selected_channel		*((uchar FAR *)p_start_val_ns + Offsetof (val_ns_bt2_chan_id, chan_nb))

uchar bt2_cc_get_chan_id (pr, ie)
	uchar pr;
	uchar ie;
{

	uchar FAR *p_start_val_ns;

	p_start_val_ns = bt2_p_start_val_ns (pr, ie);


		/*
			If 'chan_sel' is NO_CHAN, return NO_CHAN.

			If 'int_type' field is INT_TYPE_BRI,
				return 'chan_sel' field,	(<=> Basic Rate access)
			else
				return 'chan_nb' field.     (<=> Primary Rate access)
		*/

	if ((p_start_val_ns == P_NIL) || (Bt2_bri_selected_channel == NO_CHAN)) {
		return (OK);
	}

    	/* read the fields 'Channel selection' and 'Preferred/Exclusive' */

	cc_chan_excl  = Bt2_channel_pref_excl;
	cc_chan_sel = Bt2_bri_selected_channel;

	if (Bt2_int_type == INT_TYPE_BRI) {

			/* Basic rate : chan_id is in 'chan_sel' field */

		cc_chan_nb    = 1;
		cc_chan_id[0] = Bt2_bri_selected_channel;

	} else {

			/*
			 * Primary rate.
			 * We select the first one.
			 */

		cc_chan_nb    = 1;
		cc_chan_id[0] = Bt2_pri_selected_channel;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_get_remaining_ie_instance -

Usage           uchar bt2_get_remaining_ie_instance (pr, ie);

Return value	: nb of remaining IE instance.

*--------------------------------------------------------------------------*/

uchar bt2_get_remaining_ie_instance (pr, ie)
	uchar pr;
	uchar ie;
{
	uchar instance_nb = 0;

	switch (ie) {

#	  if CC_PAR_DISPLAY_IE == ON
		case IE_DISPLAY :
			if (pr == NS_CONN_IN)		{Get_remaining_ie_instance_nb_bt2 (conn_in, display, &instance_nb); 		break;}
			if (pr == NS_CONN_CO)		{Get_remaining_ie_instance_nb_bt2 (conn_co, display, &instance_nb);     	break;}
			if (pr == NS_CLEAR_IN)		{Get_remaining_ie_instance_nb_bt2 (clear_in, display, &instance_nb);    	break;}
			if (pr == NS_CLEAR_CO)		{Get_remaining_ie_instance_nb_bt2 (clear_co, display, &instance_nb);    	break;}
			if (pr == NS_ALERT_IN)		{Get_remaining_ie_instance_nb_bt2 (alert_in, display, &instance_nb);    	break;}
			if (pr == NS_CALL_PROC_IN)	{Get_remaining_ie_instance_nb_bt2 (call_proc_in, display, &instance_nb);	break;}
			if (pr == NS_NOTIFY_IN)		{Get_remaining_ie_instance_nb_bt2 (notify_in, display, &instance_nb);		break;}
			if (pr == NS_INFO_IN) 		{Get_remaining_ie_instance_nb_bt2 (info_in, display, &instance_nb);     	break;}
			if (pr == NS_PROGRESS_IN)	{Get_remaining_ie_instance_nb_bt2 (progress_in, display, &instance_nb); 	break;}
			break;
#	  endif

		default:
			break;
	}

	return (instance_nb);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_set_to_next_ie_instance -

Usage           uchar bt2_set_to_next_ie_instance (pr, ie);

Return value	: set to the next IE's instance.

*--------------------------------------------------------------------------*/

uchar bt2_set_to_next_ie_instance(pr, ie)
	uchar pr;
	uchar ie;
{

	switch (ie) {

#	  if CC_PAR_DISPLAY_IE == ON
		case IE_DISPLAY :
			if (pr == NS_CONN_IN)		{Set_to_next_ie_instance_bt2 (conn_in, display);	break;}
			if (pr == NS_CONN_CO)		{Set_to_next_ie_instance_bt2 (conn_co, display);	break;}
			if (pr == NS_CLEAR_IN)		{Set_to_next_ie_instance_bt2 (clear_in, display);	break;}
			if (pr == NS_CLEAR_CO)		{Set_to_next_ie_instance_bt2 (clear_co, display);	break;}
			if (pr == NS_ALERT_IN)		{Set_to_next_ie_instance_bt2 (alert_in, display);	break;}
			if (pr == NS_CALL_PROC_IN)	{Set_to_next_ie_instance_bt2 (call_proc_in, display);break;}
			if (pr == NS_NOTIFY_IN)		{Set_to_next_ie_instance_bt2 (notify_in, display);break;}
			if (pr == NS_INFO_IN) 		{Set_to_next_ie_instance_bt2 (info_in, display);	break;}
			if (pr == NS_PROGRESS_IN)	{Set_to_next_ie_instance_bt2 (progress_in, display);break;}
			break;
#	  endif

#	  if CC_PAR_MULTIPLE_CALLING_NB == ON
		case IE_CALLING_NB :
			if (pr == NS_CONN_IN)		{Set_to_next_ie_instance_bt2 (conn_in, calling_nb);	break;}
			break;
#	  endif

		default:
			break;
	}

	return (NIL);

}

/*EOF*/
