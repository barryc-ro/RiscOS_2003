
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_build.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		vn2_cc_build_to_ns - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *		vn2_net_checking_service - determines the requested service from the
 *							   received message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#if NEW_FCT_STYLE == ON
	uchar	vn2_build_other_pr			(code_t prim_code, uchar FAR *p_data);
	uchar	vn2_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar	vn2_build_other_pr			();
	uchar	vn2_cc_load_ns_test			();
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_cc_build_to_ns - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar vn2_cc_build_to_ns (code_t primitive_code);
							- primitive_code 	= code of the primitive to send,

Return value : 	vn2_cc_build_to_ns returns = OK
									   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar vn2_cc_build_to_ns (prim_code, p_data)
	code_t		prim_code;		/* primitive code */
	uchar  FAR *p_data;
{
	CONST struct cc_service FAR	*p_cc_service;
	char                         bri_type;

	p_cc_service = Cc_call_p_cc_service;	/* prepare for service information access */

		/* Switch according to the primitive to send */

	switch (prim_code) {

	/*---------------- CONNECTION REQUEST -------------------*/

		case  NS_CONN_RQ :
			Isdn_init_vn2_ctx_rq_rs 		(conn_rq,
											 p_data
											);

			Isdn_vn2_store_hlc				(conn_rq,
											 Cc_service_hlc_code,
											 Cc_service_hlc_teleservice
											);

			if (cc_store_chan_id == ON) {

				bri_type = (Cc_na_type == BRI);

				Isdn_vn2_store_chan_id		(conn_rq,
											 bri_type ? INT_TYPE_BRI : INT_TYPE_PRI,
											 cc_chan_excl,
											 bri_type ? cc_chan_id[0]: AS_INDICATED,
											 bri_type ? BYTE_VAL_NIL : cc_chan_id[0]
											);

			}

			if (p_rq_address != P_NIL) {

				Isdn_vn2_store_called_nb	(conn_rq,
											 BLOC_SENDING,
											 PLAN_UNKNOWN,
											 p_rq_address
											);
			}

			if (p_rq_subaddress != P_NIL) {

				Isdn_vn2_store_called_sub_add(conn_rq,
											  SUB_ADD_OSI,
											  p_rq_subaddress
											 );
			}

			if (p_calling_address != P_NIL) {

				Isdn_vn2_store_calling_nb	(conn_rq,
											 cc_calling_nb_type,
											 PLAN_UNKNOWN,
											 USER_PROVIDED,
											 p_calling_address
											);

			}

			if (p_calling_subaddress != P_NIL) {

				Isdn_vn2_store_calling_sub_add(conn_rq,
											   SUB_ADD_OSI,
											   p_calling_subaddress
											  );

			}

			Isdn_vn2_store_bc				(conn_rq,
											 Cc_service_bc_trf_cap
											);

			if (p_cc_uui != P_NIL) {

				Isdn_vn2_store_uui			(conn_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

#			if CC_SPF_FAC == ON

					/* Charging request ? */

				if (cc_spf_facility_code != NIL) {

					Isdn_vn2_store_spf_fac		(conn_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 cc_spf_facility_code,
												 p_cc_empty_string
												);
				}

#			endif

			if (Cc_service_llc_trf_cap == BYTE_VAL_NIL) break;

			switch (Cc_service_llc_protocol_id_1) {

				case PROTOCOL_ID_1_V110 :
					Isdn_vn2_store_llc_v110_syn	(conn_rq,
												 NEGOTIATION_NOT_IN_BAND,
												 (Cc_service_id == CC_SERVICE_V110) ? Cc_call_user_rate : Cc_service_llc_user_rate,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL,
												 Cc_service_llc_protocol_id_2,
												 Cc_service_llc_protocol_id_3
												);
					break;

				case PROTOCOL_ID_1_V120 :
					Isdn_vn2_store_llc_v120		(conn_rq,
												 Cc_service_llc_syn_asyn,
												 Cc_service_llc_negotiation,
												 Cc_call_user_rate,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL
												);
					break;

				case PROTOCOL_ID_1_X31 :
					Isdn_vn2_store_llc_no_ra	(conn_rq,
												 Cc_service_llc_trf_cap,
												 Cc_service_llc_trf_mode,
												 Cc_service_llc_trf_rate,
												 STRUCTURE_DEFAULT,
												 Cc_service_llc_protocol_id_1,
												 Cc_service_llc_protocol_id_2,
												 Cc_service_llc_protocol_id_3
												);
					break;
			}

			break;

	/*---------------- CONNECTION RESPONSE ---------------------*/

		case  NS_CONN_RS :
			Isdn_init_vn2_ctx_rq_rs  		(conn_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				bri_type = (Cc_na_type == BRI);

				Isdn_vn2_store_chan_id		(conn_rs,
											 bri_type ? INT_TYPE_BRI : INT_TYPE_PRI,
											 cc_chan_excl,
											 bri_type ? cc_chan_id[0]: AS_INDICATED,
											 bri_type ? BYTE_VAL_NIL : cc_chan_id[0]
											);

			}

			if (p_cc_uui != P_NIL) {
				Isdn_vn2_store_uui			(conn_rs,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

			break;

	/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_vn2_ctx_rq_rs 		(clear_rq,
											 p_data
											);

			Isdn_vn2_store_cause			(clear_rq,
											 cc_error_class,
											 cc_error_value,
											 LOCATION_USER,
											 P_NIL
											);

			if (p_cc_uui != P_NIL) {
				Isdn_vn2_store_uui			(clear_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

#			if CC_SPF_FAC == ON

				if (cc_spf_facility_action != NIL) {

					Isdn_vn2_store_spf_fac		(clear_rq,
												 cc_spf_facility_action,
												 cc_spf_facility_code,
												 p_cc_empty_string
												);

					if (p_rq_address != P_NIL) {
						Isdn_vn2_store_called_nb(clear_rq,
												 BLOC_SENDING,
												 PLAN_UNKNOWN,
												 p_rq_address
												);
					}

					if (p_rq_subaddress != P_NIL) {

						Isdn_vn2_store_called_sub_add(clear_rq,
													  SUB_ADD_OSI,
													  p_rq_subaddress
													 );
					}

				}

#			endif

			break;

	/*---------------- CONNECTION CLEAR RESPONSE -----------------*/

		case  NS_CLEAR_RS :
			Isdn_init_vn2_ctx_rq_rs			(clear_rs,
											 p_data
											);

			if (p_cc_uui != P_NIL) {
				Isdn_vn2_store_uui			(clear_rs,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

			break;

		default :

			if (vn2_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}

				/*----------------------------------------*/

uchar vn2_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{
	switch (prim_code) {

	/*---------------- INFO REQUEST (digits) -------------------*/

#	if ACU_INTERFACE == ON

		case  NS_INFO_RQ :
			Isdn_init_vn2_ctx_rq_rs 		(info_rq,
											 p_data
											);

			if (p_rq_address != P_NIL) {

				Isdn_vn2_store_called_nb	(info_rq,
											 OVERLAP_SENDING,
											 PLAN_UNKNOWN,
											 p_rq_address
											);
			}

			break;

#	endif

	/*---------------- ALERTING REQUEST --------------------------*/

		case  NS_ALERT_RQ :
			Isdn_init_vn2_ctx_rq_rs 		(alert_rq,
											 p_data
											);

			/* No chan_id in ALERT */

			if (p_cc_uui != P_NIL) {
				Isdn_vn2_store_uui			(alert_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

			break;

	/*---------------- SUSPEND REQUEST --------------------------*/

		case  NS_SUSPEND_RQ :
			Isdn_init_vn2_ctx_rq_rs 		(suspend_rq,
											 p_data
											);

			Isdn_vn2_store_call_id			(suspend_rq,
											 p_call_id
											);

			break;

	/*---------------- RESUME REQUEST --------------------------*/

		case  NS_RESUME_RQ :
			Isdn_init_vn2_ctx_rq_rs 		(resume_rq,
											 p_data
											);

			Isdn_vn2_store_call_id			(resume_rq,
											 p_call_id
											);

			break;


	/*---------------- NATIONAL REGISTRATION REQUEST -------------*/

#	if CC_SPF_FAC == ON

		case  NS_SPF_REGISTRATION_RQ :
			Isdn_init_vn2_ctx_rq_rs 		(spf_reg_rq,
											 p_data
											);

			Isdn_vn2_store_spf_fac			(spf_reg_rq,
											 cc_spf_facility_action,
											 cc_spf_facility_code,
											 p_rq_address
											);

			break;

#	endif

	/*---------------- NATIONAL FACILITY REQUEST -------------------*/

#	if CC_SPF_FAC == ON

		case  NS_SPF_FACILITY_RQ :
			Isdn_init_vn2_ctx_rq_rs 		(spf_facility_rq,
											 p_data
											);

			Isdn_vn2_store_spf_fac			(spf_facility_rq,
											 cc_spf_facility_action,
											 cc_spf_facility_code,
											 p_cc_empty_string
											);

			break;

#	endif

	/*---------------- USER INFORMATION ----------------------------*/

		case NS_USER_INFO_RQ :
			Isdn_init_vn2_ctx_rq_rs			(user_info_rq,
											 p_data
											);

			if (p_cc_uui != P_NIL) {
				Isdn_vn2_store_uui			(user_info_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
			}

			break;


				/*---------------- UNKNOWN primitive ---------------------*/

		default :
			return (NOK);
	}

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_net_checking_service - implements the checking of a received
				call to determine the service requested.

Usage           uchar vn2_net_checking_service ();

Return value : 	vn2_net_checking_service returns a service code or UNKNOWN_SERVICE.

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar vn2_net_checking_service ()
{
	uchar service_id = CC_SRV_NIL;

	if ((Get_ie_vn2 (conn_in, hlc) == PRESENT) &&
		(Isdn_get_val_vn2 (conn_in,hlc, hlc_id_code) == NS_TELESERVICE_CEPT)
	   ) {
		cc_interworking = ON;
	}

	switch (Isdn_get_val_vn2 (conn_in,bc,trf_cap)) {

			/*---------------*/
			/*     Speech    */
			/*---------------*/

		case TRF_CAP_SPEECH :

			interworking:

			if (Get_ie_vn2 (conn_in, hlc) == PRESENT) {

				if (Isdn_get_val_vn2 (conn_in,hlc,teleservice) == TELEPHONY) {
					return (CC_SRV_VOICE);
				}

			}

			return (CC_SRV_VOICE);

			/*---------------*/
			/* Audio 3.1 kHz */
			/*---------------*/

		case TRF_CAP_3_1_AUDIO :

			if (cc_interworking == ON) {
				goto interworking;
			}

			if (Get_ie_vn2 (conn_in, hlc) == PRESENT) {

				switch (Isdn_get_val_vn2 (conn_in,hlc, teleservice)) {

					case TELEPHONY :
						return (CC_SRV_VOICE);

					case FAX_3 :

						if (Isdn_get_val_vn2 (conn_in,hlc, hlc_id_code) == NS_TELESERVICE_CCITT) {
							return (CC_SRV_FAX);

						} else {

							return (CC_SRV_NIL);
						}

					default :
						return (CC_SRV_MODEM);

				}
			}

			break;

			/*---------------*/
			/*  Audio 7 kHz  */
			/*---------------*/

		case TRF_CAP_7_AUDIO :
			return (CC_SRV_AUDIO_7);

			/*---------------*/
			/* Unrestricted  */
			/*---------------*/

		case TRF_CAP_UNRESTRICTED :

			if (cc_interworking == ON) {
				service_id = CC_SRV_DATA;
			}

			if (Get_ie_vn2 (conn_in, hlc) == PRESENT) {

				switch (Isdn_get_val_vn2 (conn_in, hlc, hlc_id_code)) {

					case NS_TELESERVICE_NATIONAL :

						switch (Isdn_get_val_vn2 (conn_in, hlc, teleservice)) {

							case NON_NORMALISE :
								service_id = CC_SRV_DATA;
								break;

							default :
								break;
						}
						break;

					case NS_TELESERVICE_CCITT :

						switch (Isdn_get_val_vn2 (conn_in, hlc, teleservice)) {

							case FAX_4 :
								return (CC_SRV_FAX_4);

						}
						break;

				}

			} else {

				service_id = CC_SRV_DATA;
			}

			if (Get_ie_vn2 (conn_in, llc) == PRESENT) {

					/* Search for multi-channels rates */

				switch (Isdn_get_val_vn2 (conn_in, llc, trf_rate)) {

					case TRF_RATE_2x64KBS :
						return (CC_SRV_DATA_128KBS);

					case TRF_RATE_384KBS :
						return (CC_SRV_DATA_H0);

					case TRF_RATE_1536KBS :
						return (CC_SRV_DATA_H11);

					case TRF_RATE_1920KBS :
						return (CC_SRV_DATA_H12);

				}

				switch (Isdn_get_val_vn2 (conn_in,llc, protocol_id_1)) {

					case PROTOCOL_ID_1_V110 :
						cc_layer_1_info.user_rate = Isdn_get_val_vn2 (conn_in, llc, user_rate);
						cc_layer_1_info.syn_asyn  = Isdn_get_val_vn2 (conn_in, llc, syn_asyn);

						if ((cc_layer_1_info.user_rate == RA_56KBS) &&
							(cc_layer_1_info.syn_asyn  == SYN)
						   ) {
							return (CC_SRV_DATA_56KBS);

						} else {

							cc_layer_1_info.stop_bits = Isdn_get_val_vn2 (conn_in, llc, stop_bit);
							cc_layer_1_info.data_bits = Isdn_get_val_vn2 (conn_in, llc, data_bit);
							cc_layer_1_info.parity    = Isdn_get_val_vn2 (conn_in, llc, parity);
							return (CC_SRV_V110);
						}

					case PROTOCOL_ID_1_V120 :
						cc_layer_1_info.user_rate = Isdn_get_val_vn2 (conn_in, llc, user_rate);
						cc_layer_1_info.syn_asyn  = Isdn_get_val_vn2 (conn_in, llc, syn_asyn);
						cc_layer_1_info.stop_bits = Isdn_get_val_vn2 (conn_in, llc, stop_bit);
						cc_layer_1_info.data_bits = Isdn_get_val_vn2 (conn_in, llc, data_bit);
						cc_layer_1_info.parity    = Isdn_get_val_vn2 (conn_in, llc, parity);
						return (CC_SRV_V120);

					case PROTOCOL_ID_1_X31 :

						if ((Isdn_get_val_vn2(conn_in,llc, protocol_id_2) == PROTOCOL_ID_2_X25_LL) &&
							(Isdn_get_val_vn2(conn_in,llc, protocol_id_3) == PROTOCOL_ID_3_X25_PL)) {
							return (CC_SRV_X25);
						}
						break;

				}

			}

			return (service_id);

			/*---------------*/
			/*     Video     */
			/*---------------*/

		case TRF_CAP_VIDEO :
			return (CC_SRV_VIDEO);

		default :
			break;

	}

	return (CC_SRV_NIL);

}

#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar	vn2_cc_load_ns_test	(p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
