
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - config.h
 *
 * $Revision$
 *
 * $Date$
 *
 *		NS and DL test configurations included into the SM_SET_CONFIG_xx
 *      procedures of System management entity.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


				/* SERVICES SIZING CONTANTS */

					/* Message */

#define MESSAGE_DATA_LGTH	30				/* maximum data bytes in the data area of a message (must be >= 4) */
#define MESSAGE_NB      	20				/* maximum number of message */
#define MESSAGE_LOW_MARK	6				/* message low mark */
#define MESSAGE_HIGH_MARK	10				/* message high mark */

					/* Buffer */

#define BUFFER_DATA_LGTH	265 			/* maximum size of the data buffer area */
#define BUFFER_NB			20				/* maximum number of buffer */
#define BUFFER_LOW_MARK		6				/* low mark buffer */
#define BUFFER_HIGH_MARK	10				/* high mark buffer */

					/* Timer */

#define TIMER_CELL_NB		200				/* maximum number of timer cells */
#define TIMER_SYSTEM_TICK	25*M_SCD		/* system tick in millisecond */
#define TIMER_PRECISION		50*M_SCD		/* precision of a time_out +- 5% (NET 3) */
#define TIMER_SLOT_SIZE		100				/* number of timer slots in the timer clock (CPU) */

					/* Server */

#define SERVER_NB			5				/* maximum number of server */

					/* Network access */

#define NA_NB				32				/* maximum number of network acess */

					/* Conditional sizing parameters */

#if MESSAGE_CACHE == ON
#	define	MESSAGE_CACHE_SIZE MESSAGE_NB	/* size of the message cache */
#else
#	define	MESSAGE_CACHE_SIZE 0
#endif

#if BUFFER_CACHE == ON
#	define BUFFER_CACHE_SIZE BUFFER_NB		/* buffer cache size */
#else
#	define BUFFER_CACHE_SIZE 0
#endif

#if TIMER_CELL_CACHE == ON
#	define TIMER_CELL_CACHE_SIZE TIMER_CELL_NB/* maximum element in the timer cell cache stack */
#else
#	define TIMER_CELL_CACHE_SIZE 0
#endif

/*-------------------------------------------------------------------------*/

#if (SIM_BUILDER == ON) || defined(SERVICES_INIT)

		/* SERVICES CONFIGURATION */

struct i_service i_service = {
	0,											/* address of the static memory */
	0,											/* size of the static memory */

	MESSAGE_HEADER_SIZE + MESSAGE_DATA_LGTH,    /* message length */
	MESSAGE_NB,                                 /* number of messages */
	MESSAGE_CACHE_SIZE,                         /* size of the message cache */
	MESSAGE_LOW_MARK,							/* message low mark */
	MESSAGE_HIGH_MARK,							/* message high mark */
	MESSAGE_AUDIT_SIZE,                         /* size of the message audit array */

	BUFFER_HEADER_SIZE + BUFFER_DATA_LGTH,      /* buffer length */
	BUFFER_NB,                                  /* number of buffers */
	BUFFER_CACHE_SIZE,                          /* size of the buffer caches */
	BUFFER_LOW_MARK,                            /* congestion control : low mark buffer */
	BUFFER_HIGH_MARK,                           /* congestion control : high mark buffer */

	TIMER_CELL_NB,                              /* number of timer cells */
	TIMER_CELL_CACHE_SIZE,						/* size of the timer cell caches */
	TIMER_SYSTEM_TICK,                          /* system tick in milliseconds */
	TIMER_PRECISION,                            /* precision of a timer in milliseconds */
	TIMER_SLOT_SIZE,                            /* number of timer slots */

	SERVER_NB,                                  /* number of servers */

	NA_NB,                                      /* maximum number of network access */
};

#endif

/*=========================================================================*/

#if (SIM_BUILDER == ON) || !defined(SERVICES_INIT)

/*							Functional Grouping
							-------------------

					 TE                              NT1
				----------------	0 BRI   	----------------
				|              |----------------|   Public     |
				|  FG_TE_NET   |----------------|   Network    |
				|              |    1 PRI       |              |
				----------------                ----------------
					  User <======================>  Network

*/

/*-------------------------------------------------------------------------*/

			/* DL and MDL configuation structure : empty */

		CONST struct dl_config dl_config_data = {0};

/*-------------------------------------------------------------------------*/

			/* NS & MNS configuation structure : TERMINAL */

		CONST struct ns_config ns_config_data = {

			{0},							/* confirm */

			2,								/* number of network access */

				/* Network access table */

			{

					/* first access */

				{
					0,						/* nai */
					BRI,					/* type */
					FG_TE_NET,				/* function grouping */
					2,						/* nb of B channels */
					0,						/* nb of outgoing calls */
					0,						/* nb of incoming calls */
					2,						/* nb of mixed calls */
				},

					/* second access */

				{
					1,						/* nai */
					BRI,					/* type */
					FG_TE_NET,				/* function grouping */
					2,						/* nb of B channels */
					0,						/* nb of outgoing calls */
					0,						/* nb of incoming calls */
					3,						/* nb of mixed calls */
				},

			}

		};

/*-------------------------------------------------------------------------*/

#endif	/* SIM_BUILDER or ! SERVICES_INIT */

/*EOF*/
