
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ACU_INT.H
 *
 * $Revision$
 *
 * $Date$
 *
 *		- Call Control Automatic Calling Unit Interface header compatible
 *        with the TR29 ACU_INT. For Analog and ISDN Call Control.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef ACU_INT
#	define ACU_INT

/*----------------------------------------------------------------------------
 *				Adressing constants
 *--------------------------------------------------------------------------*/

#define	ACU_SAPI					'a'			/* SAP for ACU interface primitives */
#define	ACU_SAPI_CED_CNG			'b'			/* SAP for CED/CNG signalling */
#define	ACU_SAPI_MGT				'A'			/* SAP for Management primitives */

#define ACU_SAPI_MULTI_CHAN			'X'			/* Multi-channel SAPI */

/*--------------------------------------------------------------------------*/

			/* Network-specific compilation parameters */

#define	ACU_MX_SZ_CALLING_NB		32			/* Maximum size for calling nb */
#define	ACU_MX_SZ_CALLING_SUB_ADD	20			/* Maximum size for calling sub address */
#define	ACU_MX_SZ_CALLED_NB      	32          /* Maximum size for called nb */
#define	ACU_MX_SZ_CALLED_SUB_ADD	20          /* Maximum size for called sub address */
#define ACU_MX_SZ_UUI				128			/* Maximum size for UUI */
#define ACU_MX_SZ_CALL_ID			4			/* Maximum size for called ID */
#define ACU_MX_SZ_USER_FAC			7			/* Maximum size for user facility information */
#define ACU_MX_SZ_FACILITY			250			/* Maximum size for facility information */
#define ACU_MX_SZ_DISPLAY			128			/* Maximum size for display information */
#define	ACU_PREFIX_SIZE				5			/* Maximum length of a phone number prefix */
												/* (for accessing public or private telephone network, */
												/* international network, etc.) */

/*----------------------------------------------------------------------------
 *				Default selections
 *--------------------------------------------------------------------------*/

#ifndef CC_F_A11
#	define	CC_F_A11				OFF
#endif
#ifndef CC_F_A17
#	define	CC_F_A17				OFF
#endif

#if (CC_F_A11 == ON) || (CC_F_A17 == ON)
#	define ARINC_NETWORKS 			ON
#else
#	define ARINC_NETWORKS 			OFF
#endif

#ifndef	ACU_PH_ENTITY
#	define	ACU_PH_ENTITY			ENT_PH_GSTN	/* For Analog ACU only */
#endif

#ifndef ACU_PAR_EXTENDED_PRIM
#	define ACU_PAR_EXTENDED_PRIM	OFF
#endif

#ifndef ACU_PAR_EXT_LLC
#	define ACU_PAR_EXT_LLC			OFF
#endif

#ifndef ACU_PAR_EXT_CUG
#	define ACU_PAR_EXT_CUG			OFF
#endif

#ifndef ACU_PAR_EXT_FAC_ASN1
#	define ACU_PAR_EXT_FAC_ASN1		OFF
#endif

#ifndef _CC_SPID_INFO
#	define _CC_SPID_INFO				OFF
#endif

/*----------------------------------------------------------------------------
 *				Primitives sent and received to/from ACU by a user entity
 *--------------------------------------------------------------------------*/

#define	ACU_CONN_RQ			'A'		/* request establishment of an outgoing call */
#define	ACU_CONN_IN			'a'		/* indiacte an incoming call */
#define	ACU_CONN_RS			'B'		/* request answering to an incoming call */
#define	ACU_CONN_CO			'b'		/* indicate termination of an incoming or outgoing call */

#define	ACU_CLEAR_RQ		'C'		/* request release of the connection */
#define	ACU_CLEAR_IN		'c'		/* connection released indication */
#define	ACU_CLEAR_RS		'D'		/* response to the release of the connection */
#define	ACU_CLEAR_CO		'd'		/* connection released confirmation */

#define	ACU_ALERT_RQ		'E'		/* alert request */
#define	ACU_ALERT_IN		'e'		/* alert indication (ex: incoming ring) */

#define	ACU_PROGRESS_RQ		'F'		/* events for the progression of the call */
#define	ACU_PROGRESS_IN		'f'		/* events from the progressing outgoing call */

#define	ACU_INFO_RQ			'G'		/* information request */
#define	ACU_INFO_CO			'g'		/* information confirmation */

#define	ACU_INIT_RQ			'H'		/* initialization request */
#define	ACU_INIT_CO			'h'		/* initialization confirmation */

#define	ACU_SETPARM_RQ		'I'		/* set parameter request */
#define	ACU_SETPARM_CO		'i'		/* parameter confirmation */

#define	ACU_USER_INFO_RQ	'J'		/* request user to user information */
#define	ACU_USER_INFO_IN	'j'		/* indicate user to user information */

#define	ACU_SUSPEND_RQ		'K'		/* request suspension */
#define	ACU_SUSPEND_CO		'k'		/* confirm suspension */

#define	ACU_RESUME_RQ		'L'		/* request resume */
#define	ACU_RESUME_CO		'l'		/* confirm resume */

#define	ACU_TEST_RQ			'M'		/* request test */
#define	ACU_TEST_CO			'm'		/* confirm test */

#define	ACU_DIGIT_RQ		'N'		/* send several called nb digits in Overlap Sending mode */
#define	ACU_DIGIT_IN		'v'		/* receive several called nb digits in Overlap Receiving mode */
#define	ACU_DIGIT_CO		'n'		/* confirm end-of-called-nb-reached in Overlap Sending mode */

#define	ACU_FACILITY_RQ		'O'		/* request specific facility */
#define	ACU_FACILITY_IN		'o'		/* indicate specific facility */
#define	ACU_FACILITY_CO		'p'		/* confirm specific facility */

#define	ACU_SET_MODE_RQ		'Q'		/* request setting of a particular mode */
#define	ACU_SET_MODE_CO		'q'		/* confirm setting of a particular mode */

#define	ACU_RS_MODE_RQ		'R'		/* request response mode to incoming call */
#define	ACU_RS_MODE_CO		'r'		/* confirm response mode to incoming call */

#define	ACU_INFORMATION_RQ	'S'		/* request information */
#define	ACU_INFORMATION_IN	's'		/* indicate information */

#define ACU_SETUP_REPORT_IN	't'		/* indicate incompatible incoming call */

#define	ACU_CALL_PROC_RQ	'U'		/* events for the progression of the call */

#define	ACU_ERR_IN			'?'		/* Error indication */

/*------------------------------------------------------
 * Type of the 'size' fields within the ACU primitives.
 *-----------------------------------------------------*/

typedef uchar acu_size_t;

/*----------------------------------------------------------------------------
 * Layer 1 information structure and fields values used in ACU_CONN_RQ/IN/RS
 * Used for V.110 and V.120 services only.
 *
 * Fields used by the physical drivers (available for all services):
 *   ph_rate:     physical rate
 *
 * Fields used for the ISDN coding (BC/LLC Information Elements):
 * (for ACU_V110_SERVICE and ACU_V120_SERVICE services only)
 *   user_rate:   user rate
 *   syn_asyn:    synchronous/asynchronous
 *   stop_bits:   nb of stop bits
 *   data_bits:   nb of data bits
 *   parity:      parity
 *
 *--------------------------------------------------------------------------*/

struct layer_1_info {
	uchar	ph_rate;		/* physical rate */
	uchar	user_rate;		/* user rate */
	uchar	syn_asyn;		/* synchronous/asynchronous */
	uchar	stop_bits;		/* nb of stop bits */
	uchar	data_bits;		/* nb of data bits */
	uchar	parity;			/* parity */
};

	/* Same values as CCITT */

#define ACU_BYTE_VAL_NIL		(uchar)(~0)				/* NIL byte value */

	/* User rates */

#define ACU_RA_50				G_5 (1,1,0,0,1)			/* 0.050 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_75				G_5 (1,1,0,1,0) 		/* 0.075 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_75_1200 			G_5 (1,0,1,1,1)			/* 0.075/1.2 kbits/s CCITT V.6 and x.1 */
#define ACU_RA_100				G_5 (1,0,1,1,0)			/* 0.100 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_110				G_5 (1,1,0,1,1)			/* 0.110 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_134				G_5 (1,0,1,0,1)			/* 0.1345 kbits/s CCITT X.1 */
#define ACU_RA_150				G_5 (1,1,1,0,0)			/* 0.150 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_200				G_5 (1,1,1,0,1)			/* 0.200 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_300				G_5 (1,1,1,1,0)			/* 0.300 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_600				G_5 (0,0,0,0,1)			/* 0.6 kbits/s CCITT V.6 and x.1 */
#define ACU_RA_1200				G_5 (0,0,0,1,0)			/* 1.2 kbits/s CCITT V.6 */
#define ACU_RA_1200_75 			G_5 (1,1,0,0,0)			/* 1.2/0.075 kbits/s CCITT V.6 and x.1 */
#define ACU_RA_2400				G_5 (0,0,0,1,1)			/* 2.4 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_3600				G_5 (0,0,1,0,0)			/* 3.6 kbits/s CCITT V.6 */
#define ACU_RA_4800				G_5 (0,0,1,0,1)			/* 4.8 kbits/s CCITT V.6 and x.1 */
#define ACU_RA_7200				G_5 (0,0,1,1,0)			/* 7.2 kbits/s CCITT V.6 */
#define ACU_RA_8000				G_5 (0,0,1,1,1)			/* 8 kbits/s CCITT I.460 */
#define ACU_RA_9600				G_5 (0,1,0,0,0)			/* 9.6 kbits/s  CCITT V.6 and x.1 */
#define ACU_RA_12000			G_5 (1,1,1,1,1)			/* 12 kbits/s CCITT V.6 */
#define ACU_RA_14400			G_5 (0,1,0,0,1)			/* 14.4 kbits/s CCITT V.6 */
#define ACU_RA_16000			G_5 (0,1,0,1,0)			/* 16 kbits/s CCITT I.460 */
#define ACU_RA_19200			G_5 (0,1,0,1,1)			/* 19.2 kbits/s CCITT V.6 */
#define ACU_RA_32000			G_5 (0,1,1,0,0)			/* 32 kbits/s CCITT I.460 */
#define ACU_RA_38400			G_5 (1,0,0,0,1)			/* 38.4 kbits/s extended V.14 */
#define ACU_RA_38400_NO_ETSI	G_5 (0,1,1,0,1)			/* 38.4 kbits/s extended V.14 (VN3) NON ETSI */
#define ACU_RA_48000			G_5 (0,1,1,1,0)			/* 48 kbits/s CCITT V.6 and X.1 */
#define ACU_RA_56000			G_5 (0,1,1,1,1)			/* 56 kbits/s CCITT V.6 */
#define ACU_RA_57600			G_5 (1,0,0,1,0)			/* 57.6 kbits/s extended V.14 (VN3) NON ETSI NON CCITT */
#define ACU_RA_64000			G_5 (1,0,0,0,0)			/* 64 kbits/s CCITT I.460 */

	/* Sync/Async */

#define ACU_SYN					G_1 (0)					/* synchronous */
#define ACU_ASYN				G_1 (1)					/* asynchronous */

	/* Stop bits */

#define ACU_STOP_BIT_1			G_2 (0,1)				/* 1 bit */
#define ACU_STOP_BIT_1_5		G_2 (1,0)				/* 1.5 bit */
#define ACU_STOP_BIT_2			G_2 (1,1)				/* 2 bits */

	/* Data bits */

#define ACU_DATA_BIT_5			G_2 (0,1)				/* 5 bits */
#define ACU_DATA_BIT_7			G_2 (1,0)				/* 7 bits */
#define ACU_DATA_BIT_8			G_2 (1,1)				/* 8 bits */

	/* Parity */

#define ACU_ODD					G_3 (0,0,0)				/* odd */
#define ACU_EVEN				G_3 (0,1,0)				/* even */
#define ACU_NO_PARITY			G_3 (0,1,1)				/* none */

/*----------------------------------------------------------------------------
 * B channels ids structure used to report B channels to the user
 *--------------------------------------------------------------------------*/

#ifndef ACU_MX_CHANI
#	define ACU_MX_CHANI			1	/* default maximum number of B-channel ids in the lists inside the primitives */
#endif

struct chani_tab {
	nai_t   nai;
	uchar   chan_id;
};

struct chani_list {
	uchar   nb;				/* number of channel ids in the list */
	uchar	chan_id_excl;	/* chan_ids are preferred (OFF) or exclusive (ON) */
	struct chani_tab tab[ACU_MX_CHANI];
};

/*----------------------------------------------------------------------------
 * Called number related information sub-structure
 *----------------------------------------------------------------------------*/

struct acu_called_nb {
	uchar		type;		/* called nb type */
	uchar		plan;		/* called nb plan */
	acu_size_t	size;		/* size of the called number in bytes */
};

/*----------------------------------------------------------------------------
 * Calling number related information sub-structure
 *----------------------------------------------------------------------------*/

struct acu_calling_nb {
	uchar		pres;		/* calling nb presentation */
	uchar		type;		/* calling nb type */
	uchar		screen;		/* calling nb screening indicator */
	acu_size_t	size;		/* size of the calling number in bytes */
};

/*----------------------------------------------------------------------------
 * Redirected number related information sub-structure
 *----------------------------------------------------------------------------*/

struct acu_redir_nb {
	uchar		pres;		/* redirected nb presentation */
	uchar		type;		/* redirected nb type */
	uchar		screen;		/* redirected nb screening indicator */
	uchar		reason;		/* reason for redirection */
	acu_size_t	size;		/* size of the redirected number in bytes */
};

/*----------------------------------------------------------------------------
 * Progress-indicator IE related information sub-structure
 *----------------------------------------------------------------------------*/

#ifndef ACU_MX_PROGRESS_IND
#	define	ACU_MX_PROGRESS_IND		1
#endif

struct acu_progress_ind {

	uchar nb;					/* number of progress_ind elements in the table */

	struct {
		uchar	loc;			/* progress location */
		uchar	descr;			/* progress description */
	} t [ACU_MX_PROGRESS_IND];
};

/*----------------------------------------------------------------------------
 * Multiple display management.
 *--------------------------------------------------------------------------*/

#ifndef ACU_MX_DISPLAY
#	define	ACU_MX_DISPLAY			5
#endif

struct acu_display_list {
	uchar 		nb;							/* Nb of present occurences */
	uchar		total_size;					/* total size of the stored strings */
	uchar 		type	 [ACU_MX_DISPLAY];	/* Type of display */
	char FAR *	p_display[ACU_MX_DISPLAY];	/* Pointer to the occurences */
	uchar 		size	 [ACU_MX_DISPLAY];	/* Size of the occurences */
};

#define	Acu_display_nb				p_display -> nb
#define	Acu_display_total_size		p_display -> total_size
#define	Acu_display_type(xx)		p_display -> type[xx]
#define	Acu_display_p_display(xx)	p_display -> p_display[xx]
#define	Acu_display_size(xx)		p_display -> size[xx]

/*----------------------------------------------------------------------------
 * Date/Time information
 *--------------------------------------------------------------------------*/

struct acu_date_time {
	uchar available;		/* ON if the information is available, else OFF */
	uchar year;				/* year */
	uchar month;			/* month */
	uchar day;				/* day */
	uchar hour;				/* hour */
	uchar minute;			/* minute */
	uchar second;			/* second */
};

/*----------------------------------------------------------------------------
 * Charging information
 *--------------------------------------------------------------------------*/

struct acu_charging_info {
	long  value;			/* charging value (nb of units) */
	uchar type;				/* charging type */
	uchar period;			/* charging period */
	uchar multi;			/* charging multiplier */
};

/*---------------------------------------------------------------------------
 * Voice supplementary services management.
 *--------------------------------------------------------------------------*/

struct voice_supp_service {
	uchar   button_type;    /* Unknown, call appear or feature */
	uchar   module_nb;      /* 0-7, call appear buttons are assigned to module 0 */
	uchar   button_nb;      /* 1-254, 0 and 255 are reserved */
	uchar	call_appear;    /* selected call appearence */
	uchar	switchhook;     /* switchhook indication */
	uchar	conn_id;        /* CONFERENCE : Conn_id of the active call */
};

/*---------------------------------------------------------------------------
 * SPID / ENDPOINT ID management.
 *--------------------------------------------------------------------------*/

#if _CC_SPID_INFO == ON

	struct acu_endpoint_id {
		uchar action;		/* Action */
		uchar usid;			/* User Id */
		uchar tid;			/* Terminal Id */
		uchar interpreter;	/* Intrepreter */
	};

#endif

/*----------------------------------------------------------------------------
 * ACU primitives extension descriptor structure
 *----------------------------------------------------------------------------*/

#if ACU_PAR_EXTENDED_PRIM == ON

	/* 1. Extension descriptor, placed in the ACU primitives structures */

struct acu_ext_descr {
	ushort		nb;			/* number of options in list. */
	ushort		lgth;		/* total length of list */
	uchar FAR *	address;	/* ptr to option list */
};

#define Acu_ext_descr_nb		((struct acu_ext_descr FAR *)p_data) -> nb
#define Acu_ext_descr_lgth		((struct acu_ext_descr FAR *)p_data) -> lgth
#define Acu_ext_descr_address	((struct acu_ext_descr FAR *)p_data) -> address

	/*-----------*/

	/* 2. Extension header placed in each extension structure */

struct acu_ext_hdr {
	ushort		id;			/* identifier */
	ushort		lgth;		/* length in bytes of the contents */
};

	/* Access macros thru 'p_ext_data' pointing to the extension header */

#define Acu_ext_id			((struct acu_ext_hdr FAR *)p_ext_data) -> id
#define Acu_ext_lgth		((struct acu_ext_hdr FAR *)p_ext_data) -> lgth

	/* Extended elements identifiers */

#define ACU_EXT_LLC					0x0001	/* low layer compatibility */

#define ACU_EXT_FAC_ASN1			0x0100	/* ASN1 Facility element */

#define ACU_EXT_FAC_RETURN_ERR		0x0101	/* Facility Return Error */
#define ACU_EXT_FAC_REJECT			0x0102	/* Facility Reject */

#define ACU_EXT_CUG					0x0201	/* Closed User Group */

	/*-----------*/

	/* 3. Extension structures */

		/* 3a. LOW LAYER COMPATIBILITY (LLC) */

struct acu_ext_llc {
	struct acu_ext_hdr hdr;	/* extension header */

		/* octet 3 */

	uchar	coding_std;		/* coding standard */
	uchar	trf_cap;		/* information transfer capability */

			/* 3a */
	uchar	out_band_neg;	/* negotiation indicator */

		/* octets 4,4a,4b */

	uchar	trf_mode;		/* transfer mode */
	uchar	trf_rate;		/* information transfer rate */

			/* 4a */
	uchar	structure;		/* 4a: structure */
	uchar	config;			/* 4a: configuration */
	uchar	establish;		/* 4a: establishment */

			/* 4b */
	uchar	symmetry;		/* 4b: symmetry */
	uchar	dest_rate;		/* 4b: information transfer rate, dest->orig */

		/* octets 5,5a,5b,5c,5d: Layer-1 info */

	uchar	l1_protocol;	/* user info L1 protocol */

			/* 5a */
	uchar	syn_asyn;		/* 5a: synchronous/asynchronous */
	uchar	negotiation;	/* 5a: negotiation */
	uchar	user_rate;		/* 5a: user rate */

			/* 5b for l1_protocol=V.110 */
	uchar	inter_rate;		/* 5b/V.110: intermediate rate */
	uchar	nic_tx;			/* 5b/V.110: Network Independent Clock on Tx */
	uchar	nic_rx;			/* 5b/V.110: Network Independent Clock on Rx */
	uchar	fc_tx;			/* 5b/V.110: Flow Control on Tx */
	uchar	fc_rx;			/* 5b/V.110: Flow Control on Rx */

			/* 5b for l1_protocol=V.120 */
	uchar	ra_hdr;			/* 5b/V.120: rate adaption header/no header */
	uchar	multi_frame;	/* 5b/V.120: multi-frame establishment support in data-link */
	uchar	op_mode;		/* 5b/V.120: mode of operation */
	uchar	lli_negot;		/* 5b/V.120: Logical Link Identifier negotiation */
	uchar	assign;			/* 5b/V.120: assignor/assignee */
	uchar	band_negot;		/* 5b/V.120: in-band/out-band negotiation */

			/* 5c (only if l1_protocol=V.110 or V.120) */
	uchar	stop_bits;		/* 5c: nb of stop bits */
	uchar	data_bits;		/* 5c: nb of data bits */
	uchar	parity;			/* 5c: parity */

			/* 5d (only if l1_protocol=V.110 or V.120) */
	uchar	duplex;			/* 5d: duplex mode */
	uchar	modem;			/* 5d: modem type */

		/* octets 6,6a: Layer-2 info */

	uchar	l2_protocol;	/* user info L2 protocol */

			/* 6a */
	uchar	l2_option;		/* optional user specified L2 parameter */

		/* octets 7,7a: Layer-3 info */

	uchar	l3_protocol;	/* user info L3 protocol */

			/* 7a */
	uchar	l3_option;		/* optional user specified L3 parameter */
};

#define Acu_ext_llc(field)	(((struct acu_ext_llc FAR *)p_ext_data) -> field)
#define Acu_ext_llc_size	Rnd_sizeof (struct acu_ext_llc)

		/* 3b. ASN1 Facility element structure */

struct acu_ext_fac_asn1 {
	struct acu_ext_hdr hdr;	/* extension header */

	ushort	component_nb;	/* nb of ASN1 components in the following facility */

		/* followed by the ASN1 facility element */
};

#define Acu_ext_fac_asn1(field)		(((struct acu_ext_fac_asn1 FAR *)p_ext_data) -> field)
#define Acu_ext_fac_asn1_size		Rnd_sizeof (struct acu_ext_fac_asn1)

		/* 3c. Facility "Return Error" structure */

struct acu_ext_fac_return_err {
	struct acu_ext_hdr hdr;	/* extension header */

	short	invoke_id;		/* service invoke reference id */
	uchar	error_id;		/* error identifier */
};

#define Acu_ext_fac_return_err(field)	(((struct acu_ext_fac_return_err FAR *)p_ext_data) -> field)
#define Acu_ext_fac_return_err_size		Rnd_sizeof (struct acu_ext_fac_return_err)

		/* 3d. Facility "Reject" structure */

struct acu_ext_fac_reject {
	struct acu_ext_hdr hdr;	/* extension header */

	uchar	present;		/* invoke_id present ? */
	short	invoke_id;		/* service invoke reference id */
	uchar	pb_type;		/* problem type */
	uchar	pb_val;			/* problem value */
};

#define Acu_ext_fac_reject(field)	(((struct acu_ext_fac_reject FAR *)p_ext_data) -> field)
#define Acu_ext_fac_reject_size		Rnd_sizeof (struct acu_ext_fac_reject)

		/* 3e. Facility - CLOSED USER GROUPS (CUG) component */

struct acu_ext_cug {
	struct acu_ext_hdr hdr;	/* extension header */

	short	invoke_id;		/* service invoke reference id */
	uchar	out_access_rq;	/* outgoingAccessRequest : TRUE/FALSE or 0xFF if not present */
	ushort	index;			/* cUGIndex : INTEGER (0..32767) or 0xFFFF if not present */
};

#define Acu_ext_cug(field)	(((struct acu_ext_cug FAR *)p_ext_data) -> field)
#define Acu_ext_cug_size	Rnd_sizeof (struct acu_ext_cug)

#define ACU_COMP_INVOKE			1	/* invoke component */
#define ACU_COMP_RETURN_ERROR	3	/* return error component */
#define ACU_COMP_REJECT			4	/* reject component */

#endif /* ACU_PAR_EXTENDED_PRIM == ON */

/*----------------------------------------------------------------------------
 *		Analog ACU entity configuration
 *----------------------------------------------------------------------------*/

#ifndef	ACU_CONFIG_MX_NA
#	define	ACU_CONFIG_MX_NA	1
#endif

struct acu_config {		/* ACU entity configuration */

	struct confirm 	acu_confirm;		/* confirmation structure */

	uchar			nlines;				/* number of managed lines */

	ent_id_t		user_entity;		/* default user entity */

	uchar			can_ph_num_max_size;/* max size of a canonical phone num */
	uchar			cmd_max_num;		/* max size of a command sequence */

	struct acu_config_na {				/* NA description */
		uchar			nai;					/* network access identifier */
		struct {								/* modem chip / PH entity description */
			ent_id_t	ph_ent_id;				/* Name of the PH entity. 0: use default, compiled value */
			sapi_t		ph_sapi;				/* Name of the PH sapiy. 0: use default, compiled value */
			uchar		detect_complete_ri_train;/* ON : the modem chip (PH entity) signals the last RI train when the final silence has expired */
												/* OFF: the modem chip signals the last RI train before, as soon as the signal has disappeared (at the beginning of the silence) */
												/* for Rockwell RC9623: ON */
			uchar		ced_data_by_chip;		/* ON : the modem chip (PH entity) sends CED automatically in data mode */
												/* OFF: the modem chip does not. CED transmisssion is managed by ACU */
												/* for Rockwell RC9623: ON */
			uchar		ced_fax_by_chip;		/* ON : the modem chip (PH entity) sends CED automatically in fax mode */
												/* OFF: the modem chip does not. CED transmisssion is managed by ACU */
												/* for Rockwell RC9623: OFF */
		} ph;
		short			max_rings;			/* (default) maximum number of
											   rings before answering.
											   > 255 : no autoanswer.
											 */
		uchar           dial_mode;			/* default dial mode */

		uchar			no_check;				/* ON if no check of phone numbers against regulation */
												/* and also no check of parameters (regmax_call_delay, regmin_call_delay) against regulation */

		uchar			direct_seizing;		/* ON if direct line seizing */
		uchar			direct_dialing;		/* ON if direct dialing (no wait for proceed tone) */
		uchar			dial_if_no_proceed;	/* ON if dial even if proceed tone not present */

		timer_val_t		init_delay;				/* ACU entity init delay */
		timer_val_t		intercall_delay;		/* outgoing calls intercall delay */
		timer_val_t		before_seizing_delay;	/* duration for listening before line seizing */
		timer_val_t		proceed_delay;			/* delay for waiting for proceed indication */
		timer_val_t		international_delay;	/* delay for waiting for international proceed indication */
		timer_val_t		interregional_delay;	/* delay for waiting for interregional proceed indication */
		timer_val_t		call_delay;				/* outgoing call max delay */
		timer_val_t		dial_pause_delay;		/* first dial pause duration */
		timer_val_t		comma_pause_delay;		/* 'comma' dial pause duration */
		timer_val_t		dtmf_duration;			/* 'DTMF duration */
		timer_val_t		watchdog_delay;			/* watchdog delay */
		timer_val_t		no_ring_delay;			/* delay after which ring synchronization is lost */
		timer_val_t		before_ced_delay;		/* delay before sending CED */
		timer_val_t		after_ced_delay;		/* delay after sending CED */

		timer_val_t		regmax_call_delay;		/* regulation-specified maximum 'maximum duration for establishment of an outgoing call' */
		timer_val_t		regmin_dial_pause_delay;/* regulation-specified minimum dial pause delay */
		timer_val_t		regmax_dial_pause_delay;/* regulation-specified maximum dial pause delay */
		timer_val_t		regmax_comma_pause_delay;/* regulation-specified maximum comma pause delay */

		timer_val_t		regmin_dtmf_duration;	/* regulation-specified minimum DTMF duration */
		timer_val_t		regmax_dtmf_duration;	/* regulation-specified maximum DTMF duration */
		uchar			regmin_max_rings;		/* regulation-specified minimum number of rings before answering */
		uchar			regmax_max_rings;		/* regulation-specified maximum number of rings before answering */

		uchar			gstn_prefix			 [ACU_PREFIX_SIZE + 1];	/* (PABX) prefix to access the network */
		uchar			international_prefix [ACU_PREFIX_SIZE + 1];	/* international prefix */
		uchar			interregional_prefix [ACU_PREFIX_SIZE + 1];	/* interregional prefix */

		timer_val_t		regmin_call_delay;		/* regulation-specified minimum 'maximum duration for establishment of an outgoing call' */

	} acu_config_na [ACU_CONFIG_MX_NA];
};

#define		Cfig_can_ph_num_max_size		(P_acu_config->can_ph_num_max_size)
#define		Cfig_nlines						(P_acu_config->nlines)
#define		Cfig_cmd_max_num				(P_acu_config->cmd_max_num)
#define		Cfig_user_entity				(P_acu_config->user_entity)

#define		Cfig_a_na_config(i)				(&(P_acu_config->acu_config_na [i]))

#define		Cfig_nai						(p_acu_config_na->nai)
#define		Cfig_ph_ent_id					(p_acu_config_na->ph.ph_ent_id)
#define		Cfig_ph_sapi					(p_acu_config_na->ph.ph_sapi)
#define		Cfig_detect_complete_ri_train	(p_acu_config_na->ph.detect_complete_ri_train)
#define		Cfig_ced_data_by_chip			(p_acu_config_na->ph.ced_data_by_chip)
#define		Cfig_ced_fax_by_chip			(p_acu_config_na->ph.ced_fax_by_chip)

#define		Cfig_dial_mode					(p_acu_config_na->dial_mode)
#define		Cfig_direct_dialing				(p_acu_config_na->direct_dialing)
#define		Cfig_direct_seizing				(p_acu_config_na->direct_seizing)
#define		Cfig_dial_if_no_proceed			(p_acu_config_na->dial_if_no_proceed)
#define		Cfig_max_rings					(p_acu_config_na->max_rings)
#define		Cfig_no_check					(p_acu_config_na->no_check)

#define		Cfig_after_ced_delay			(p_acu_config_na->after_ced_delay)
#define		Cfig_before_ced_delay			(p_acu_config_na->before_ced_delay)
#define		Cfig_init_delay					(p_acu_config_na->init_delay)
#define		Cfig_intercall_delay			(p_acu_config_na->intercall_delay)
#define		Cfig_before_seizing_delay		(p_acu_config_na->before_seizing_delay)
#define		Cfig_call_delay					(p_acu_config_na->call_delay)
#define		Cfig_dial_pause_delay			(p_acu_config_na->dial_pause_delay)
#define		Cfig_comma_pause_delay			(p_acu_config_na->comma_pause_delay)
#define		Cfig_dtmf_duration				(p_acu_config_na->dtmf_duration)
#define		Cfig_no_ring_delay				(p_acu_config_na->no_ring_delay)
#define		Cfig_proceed_delay				(p_acu_config_na->proceed_delay)
#define		Cfig_international_delay		(p_acu_config_na->international_delay)
#define		Cfig_interregional_delay		(p_acu_config_na->interregional_delay)
#define		Cfig_watchdog_delay				(p_acu_config_na->watchdog_delay)
#define		Cfig_regmin_dial_pause_delay	(p_acu_config_na->regmin_dial_pause_delay)
#define		Cfig_regmax_dial_pause_delay	(p_acu_config_na->regmax_dial_pause_delay)
#define		Cfig_regmin_call_delay			(p_acu_config_na->regmin_call_delay)
#define		Cfig_regmax_call_delay			(p_acu_config_na->regmax_call_delay)
#define		Cfig_regmax_comma_pause_delay	(p_acu_config_na->regmax_comma_pause_delay)
#define		Cfig_regmin_dtmf_duration		(p_acu_config_na->regmin_dtmf_duration)
#define		Cfig_regmax_dtmf_duration		(p_acu_config_na->regmax_dtmf_duration)
#define		Cfig_regmin_max_rings			(p_acu_config_na->regmin_max_rings)
#define		Cfig_regmax_max_rings			(p_acu_config_na->regmax_max_rings)

#define		Cfig_gstn_prefix				(p_acu_config_na->gstn_prefix)
#define		Cfig_international_prefix		(p_acu_config_na->international_prefix)
#define		Cfig_interregional_prefix		(p_acu_config_na->interregional_prefix)


/*----------------------------------------------------------------------------
 *			DETAILED DESCRIPTION OF PRIMITIVES SENT TO ACU ENTITY
 *--------------------------------------------------------------------------*/

		/* length of a 'size' field within a ACU primitive */

#define ACU_SIZE_FIELD_LGTH					sizeof (acu_size_t)

/*---------------------------------------------------------------------------
 *
 *	ACU_CONN_RQ			request establishment of an outgoing call.
 *
 *	Arguments :
 *		Acu_conn_rq_priority 			: phone call priority normal/urgent
 *		Acu_conn_rq_auto_dial 			: automatical dialing (ON) or
 *										  just go off hook (OFF)
 *		Acu_conn_rq_service				: requested (tele)service
 *		Acu_conn_rq_sending_complete	: Sending-complete IE to be generated (ON/OFF)
 *		Acu_conn_rq_ph_rate 			: physical rate (for all services)
 *		Acu_conn_rq_user_rate			: requested user rate (for V.110 and V.120 services only)
 *		Acu_conn_rq_syn_asyn 			: synchronous/asynchronous (for V.110 and V.120 services only)
 *		Acu_conn_rq_stop_bits   		: nb of stop bits (for V.110 and V.120 services only)
 *		Acu_conn_rq_data_bits   		: nb of data bits (for V.110 and V.120 services only)
 *		Acu_conn_rq_parity      		: parity (for V.110 and V.120 services only)
 *      Acu_conn_rq_data_chani_nb		: nb of elements in the chani_list.tab field
 *      Acu_conn_rq_data_chani  		: data channel to use (B1, B2, etc, D, or 0 for any)
 *		Acu_conn_rq_charging_rq			: charging info requested
 *		Acu_conn_rq_transfer_rq 		: transfer requested
 *		Acu_conn_rq_transfer_con_id 	: conn_id of the call to be transfered
 *		Acu_conn_rq_ident_denied_rq 	: identity denied requested
 *		Acu_conn_rq_identification_denied_rq : alias macro for Acu_conn_rq_ident_denied_rq
 *		Acu_conn_rq_calling_nb_type		: calling nb type
 *		Acu_conn_rq_calling_nb_screen	: calling nb screening indicator
 *		Acu_conn_rq_calling_nb2_type	: 2nd calling nb type
 *		Acu_conn_rq_calling_nb2_screen	: 2nd calling nb screening indicator
 *		Acu_conn_rq_called_nb_type		: called nb type
 *		Acu_conn_rq_called_nb_plan		: called nb plan
 *		Acu_conn_rq_called_nb_size		: called number size in bytes
 *		Acu_conn_rq_a_called_nb			: address of the called number.
 *		(Acu_conn_rq_ph_num_size		: alias for Acu_conn_rq_called_nb_size)
 *		(Acu_conn_rq_a_ph_num 			: alias for Acu_conn_rq_a_called_nb)
 *		Acu_conn_rq_calling_nb_size,
 *		Acu_conn_rq_a_calling_nb		: calling number.
 *		Acu_conn_rq_calling_nb2_size,
 *		Acu_conn_rq_a_calling_nb2		: 2nd calling number.
 *		Acu_conn_rq_uui_size,
 *		Acu_conn_rq_a_uui				: ISDN user to User Information
 *		Acu_conn_rq_facility_size,
 *		Acu_conn_rq_a_facility			: ISDN facility
 *		Acu_conn_rq_pcs_user_size,
 *		Acu_conn_rq_a_pcs_user			: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_conn_rq_call_appear			: call_appearance
 *		Acu_conn_rq_progress_location	: progress description
 *		Acu_conn_rq_progress_description: progress location
 *
 *		ARINC SPECIFIC :
 *		Acu_conn_rq_notif_descr			: notify description
 *		Acu_conn_rq_spf_fac_id			: spf facility Id
 *		Acu_conn_rq_spf_fac_val			: spf_facility value
 *		Acu_conn_rq_departure_year		: year of departure
 *		Acu_conn_rq_departure_month		: month of departure
 *		Acu_conn_rq_departure_day		: day of departure
 *		Acu_conn_rq_service_class_id	: service class Id
 *		Acu_conn_rq_nats_route_ind		: nats route
 *		Acu_conn_rq_satcom_route_ind	: stacom route
 *		Acu_conn_rq_tfts_route_ind		: tfts route
 *
 *		Acu_conn_rq_track_1_size		: size of the track #1
 *		Acu_conn_rq_track_2_size        : size of the track #2
 *		Acu_conn_rq_flight_op_id_size	: size of the fligth op Id
 *		Acu_conn_rq_flight_number_size	: size of the flight digits
 *
 *		Acu_conn_rq_a_track_1			: address of the track #1
 *		Acu_conn_rq_a_track_2           : address of the track #2
 *		Acu_conn_rq_a_flight_op_id		: address of op Id
 *		Acu_conn_rq_a_flight_number		: address of flight digits
 *
 *		Warning : when building this primitive, the phone number field must
 *		be filled BEFORE the CALLING_NB field.
 *
 *--------------------------------------------------------------------------*/

struct acu_conn_rq_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	priority;					/* phone call priority */
	uchar	auto_dial;					/* OFF: go off hook only; ON: dial number */
	uchar	service;					/* requested service */
	uchar	sending_complete;			/* Sending-complete information element generation */
	struct layer_1_info layer_1_info;	/* layer 1 information field */
	struct chani_list   chani_list;		/* list of channel ids to use for data transfer */
	uchar	charging_rq;				/* request charging ON or OFF */
	uchar	transfer_rq;				/* request transfer ON or OFF */
	add_t	conn_id;					/* transfer conn_id */
	uchar	ident_denied_rq;			/* request identity denied ON or OFF */
	uchar	call_appear;				/* Call appearence */

	struct acu_called_nb  called_nb;	/* called nb information */
	struct acu_calling_nb calling_nb;	/* calling nb information */
	struct acu_calling_nb calling_nb2;	/* second calling nb information */
	acu_size_t uui_size;				/* size of the ISDN User to User information field */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	struct acu_progress_ind progress_ind;/* progress indicator */

#	if ARINC_NETWORKS == ON
		uchar	notif_descr;			/* notify description */

#		if CC_SPF_FAC == ON
			uchar	spf_fac_id;			/* facility identifier */
			uchar	spf_fac_val;		/* facility value */
#		endif

		uchar	departure_year;			/* departure year */
		uchar	departure_month;    	/* departure  month */
		uchar	departure_day;      	/* departure day */
		uchar	service_class_id;		/* service class identifier defined by each airline */

		uchar 	nats_route_ind;			/* nats route indication */
		uchar 	satcom_route_ind;		/* satcom route indication */
		uchar 	tfts_route_ind;			/* tfts route indication */

		acu_size_t track_1_size;		/* information of track 1 */
		acu_size_t track_2_size;		/* information of track 2 */

		acu_size_t flight_op_id_size;	/* flight operator identity size */
		acu_size_t flight_number_size;	/* flight number size */

#	endif

#	if _CC_SPID_INFO == ON
		struct acu_endpoint_id endpoint_id;	/* Endpoint Id */
#	endif

										/* phone number is just here */
										/* then the calling number */
										/* then the UUI */
										/* then facility */
										/* then display strings */
										/* then pcs_user */
										/* then track 1 info */
										/* then track 2 info */
										/* then flight operator id */
										/* then flight number */
};

#define	Acu_conn_rq_					((struct acu_conn_rq_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_conn_rq_ext_parms_nb		Acu_conn_rq_ ext_descr.nb
#	define Acu_conn_rq_ext_parms_lgth	Acu_conn_rq_ ext_descr.lgth
#	define Acu_conn_rq_a_ext_parms		Acu_conn_rq_ ext_descr.address
#endif

#define	Acu_conn_rq_priority			Acu_conn_rq_ priority
#define	Acu_conn_rq_auto_dial			Acu_conn_rq_ auto_dial

#define	Acu_conn_rq_service				Acu_conn_rq_ service
#define	Acu_conn_rq_sending_complete	Acu_conn_rq_ sending_complete

#define	Acu_conn_rq_a_layer_1_info		((struct layer_1_info FAR *)&Acu_conn_rq_ layer_1_info)
#define	Acu_conn_rq_ph_rate				Acu_conn_rq_ layer_1_info.ph_rate
#define	Acu_conn_rq_user_rate			Acu_conn_rq_ layer_1_info.user_rate
#define	Acu_conn_rq_syn_asyn			Acu_conn_rq_ layer_1_info.syn_asyn
#define	Acu_conn_rq_stop_bits			Acu_conn_rq_ layer_1_info.stop_bits
#define	Acu_conn_rq_data_bits			Acu_conn_rq_ layer_1_info.data_bits
#define	Acu_conn_rq_parity				Acu_conn_rq_ layer_1_info.parity

#define Acu_conn_rq_data_chani_nb       Acu_conn_rq_ chani_list.nb
#define Acu_conn_rq_data_chani          Acu_conn_rq_ chani_list.tab[0].chan_id
#define Acu_conn_rq_data_chani_nai      Acu_conn_rq_ chani_list.tab[0].nai
#define Acu_conn_rq_data_chani_tab(i)   Acu_conn_rq_ chani_list.tab[i].chan_id
#define Acu_conn_rq_data_chani_tab_nai(i) Acu_conn_rq_ chani_list.tab[i].nai
#define Acu_conn_rq_data_chani_excl     Acu_conn_rq_ chani_list.chan_id_excl

#define	Acu_conn_rq_charging_rq			Acu_conn_rq_ charging_rq
#define	Acu_conn_rq_transfer_rq			Acu_conn_rq_ transfer_rq
#define	Acu_conn_rq_transfer_conn_id	Acu_conn_rq_ conn_id
#define	Acu_conn_rq_ident_denied_rq		Acu_conn_rq_ ident_denied_rq
#define	Acu_conn_rq_identification_denied_rq	Acu_conn_rq_ident_denied_rq

#define Acu_conn_rq_call_appear			Acu_conn_rq_ call_appear

#define	Acu_conn_rq_called_nb_type		Acu_conn_rq_ called_nb.type
#define	Acu_conn_rq_called_nb_plan		Acu_conn_rq_ called_nb.plan
#define	Acu_conn_rq_called_nb_size		Acu_conn_rq_ called_nb.size
#define	Acu_conn_rq_ph_num_size			Acu_conn_rq_called_nb_size

#define	Acu_conn_rq_calling_nb_pres		Acu_conn_rq_ calling_nb.pres
#define	Acu_conn_rq_calling_nb_type		Acu_conn_rq_ calling_nb.type
#define	Acu_conn_rq_calling_nb_screen	Acu_conn_rq_ calling_nb.screen
#define	Acu_conn_rq_calling_nb_size		Acu_conn_rq_ calling_nb.size

#define	Acu_conn_rq_calling_nb2_pres	Acu_conn_rq_ calling_nb2.pres
#define	Acu_conn_rq_calling_nb2_type	Acu_conn_rq_ calling_nb2.type
#define	Acu_conn_rq_calling_nb2_screen	Acu_conn_rq_ calling_nb2.screen
#define	Acu_conn_rq_calling_nb2_size	Acu_conn_rq_ calling_nb2.size

#define	Acu_conn_rq_uui_size			Acu_conn_rq_ uui_size
#define	Acu_conn_rq_facility_size		Acu_conn_rq_ facility_size
#define	Acu_conn_rq_display_size		Acu_conn_rq_x_display_total_size
#define Acu_conn_rq_pcs_user_size		Acu_conn_rq_ pcs_user_size

#define Acu_conn_rq_x_display_nb		Acu_conn_rq_ display.nb
#define Acu_conn_rq_x_display_total_size Acu_conn_rq_ display.total_size
#define Acu_conn_rq_x_p_display(i) 		Acu_conn_rq_ display.p_display[i]
#define Acu_conn_rq_x_display_type(i)	Acu_conn_rq_ display.type[i]
#define Acu_conn_rq_x_display_size(i)	Acu_conn_rq_ display.size[i]
#define Acu_conn_rq_a_display_list      &(Acu_conn_rq_ display)

#define	Acu_conn_rq_a_called_nb			((char FAR *)p_data        + Acu_conn_rq_size)
#define	Acu_conn_rq_a_ph_num			Acu_conn_rq_a_called_nb

#define	Acu_conn_rq_a_calling_nb		(Acu_conn_rq_a_called_nb   + Acu_conn_rq_called_nb_size + 1)
#define	Acu_conn_rq_a_calling_nb2		(Acu_conn_rq_a_calling_nb  + Acu_conn_rq_calling_nb_size + 1)
#define	Acu_conn_rq_a_uui				(Acu_conn_rq_a_calling_nb2 + Acu_conn_rq_calling_nb2_size + 1)
#define	Acu_conn_rq_a_facility			(Acu_conn_rq_a_uui         + Acu_conn_rq_uui_size + 1)
#define	Acu_conn_rq_a_display			(Acu_conn_rq_a_facility    + Acu_conn_rq_facility_size + 1)
#define Acu_conn_rq_a_pcs_user			(Acu_conn_rq_a_display	   + Acu_conn_rq_display_size + 1)

#define	Acu_conn_rq_progress_ind_nb		Acu_conn_rq_ progress_ind.nb
#define	Acu_conn_rq_progress_location	Acu_conn_rq_progress_loc
#define	Acu_conn_rq_progress_description Acu_conn_rq_progress_descr
	/* aliases */
#define	Acu_conn_rq_progress_loc		Acu_conn_rq_ progress_ind.t[0].loc
#define	Acu_conn_rq_progress_descr		Acu_conn_rq_ progress_ind.t[0].descr
	/* access to other occurencies */
#define	Acu_conn_rq_progress_loc_x(i)	Acu_conn_rq_ progress_ind.t[i].loc
#define	Acu_conn_rq_progress_descr_x(i)	Acu_conn_rq_ progress_ind.t[i].descr

#if ARINC_NETWORKS == ON
#	define	Acu_conn_rq_notif_descr			Acu_conn_rq_ notif_descr
#	define	Acu_conn_rq_spf_fac_id			Acu_conn_rq_ spf_fac_id
#	define	Acu_conn_rq_spf_fac_val			Acu_conn_rq_ spf_fac_val
#	define	Acu_conn_rq_departure_year		Acu_conn_rq_ departure_year
#	define	Acu_conn_rq_departure_month		Acu_conn_rq_ departure_month
#	define	Acu_conn_rq_departure_day		Acu_conn_rq_ departure_day
#	define	Acu_conn_rq_service_class_id	Acu_conn_rq_ service_class_id
#	define	Acu_conn_rq_nats_route_ind 		Acu_conn_rq_ nats_route_ind
#	define	Acu_conn_rq_satcom_route_ind 	Acu_conn_rq_ satcom_route_ind
#	define	Acu_conn_rq_tfts_route_ind 		Acu_conn_rq_ tfts_route_ind

#	define	Acu_conn_rq_track_1_size		Acu_conn_rq_ track_1_size
#	define	Acu_conn_rq_track_2_size		Acu_conn_rq_ track_2_size
#	define	Acu_conn_rq_flight_op_id_size	Acu_conn_rq_ flight_op_id_size
#	define	Acu_conn_rq_flight_number_size	Acu_conn_rq_ flight_number_size

#	define	Acu_conn_rq_a_track_1			(Acu_conn_rq_a_pcs_user		+ Acu_conn_rq_pcs_user_size + 1)
#	define	Acu_conn_rq_a_track_2			(Acu_conn_rq_a_track_1		+ Acu_conn_rq_track_1_size + 1)
#	define	Acu_conn_rq_a_flight_op_id		(Acu_conn_rq_a_track_2		+ Acu_conn_rq_track_2_size + 1)
#	define	Acu_conn_rq_a_flight_number		(Acu_conn_rq_a_flight_op_id + Acu_conn_rq_flight_op_id_size + 1)
#	define	Acu_conn_rq_a_first_other		(Acu_conn_rq_a_flight_number + Acu_conn_rq_flight_number_size + 1)
#else
#	define	Acu_conn_rq_a_first_other		(Acu_conn_rq_a_pcs_user		+ Acu_conn_rq_pcs_user_size + 1)
#endif

#define Acu_conn_rq_a_end_strings			(uchar FAR *)Round((ulong)Acu_conn_rq_a_first_other)

#if _CC_SPID_INFO == ON
#	define	Acu_conn_rq_p_endpoint_id		Acu_conn_rq_ endpoint_id
#	define	Acu_conn_rq_endpoint_action		Acu_conn_rq_ endpoint_id.action
#	define	Acu_conn_rq_usid				Acu_conn_rq_ endpoint_id.usid
#	define	Acu_conn_rq_tid					Acu_conn_rq_ endpoint_id.tid
#	define	Acu_conn_rq_interpreter			Acu_conn_rq_ endpoint_id.interpreter
#endif

#define	Acu_conn_rq_size					(Rnd_sizeof (struct acu_conn_rq_args))

	/*--------------------------
	 *
	 *            =========================================
	 *             Specifying multiple 'called_nb' fields:
	 *            =========================================
	 *
	 * When calling with multiple B-channels, e.g. aggregated channels,
	 * the user might have to specify multiple called numbers.
	 * The first called number is stored using the
	 * 'Acu_conn_rq_called_nb_size' and 'Acu_conn_rq_a_called_nb' macros,
	 * as for a single-called-nb call.
	 * The additional 'called-nb' strings must be stored AFTER having stored
	 * the last variable-length field (i.e. 'facility', or 'flight_number'
	 * for ARINC networks).
	 * The format for each additional 'called_nb' is:
	 *     - one byte for the exact size of the string,
	 *     - immediately followed by the string itself.
	 *
	 * The additional called-numbers will appear in the data area as follows:
	 *
	 * |-----------|
	 * |-----------| (fixed-length fields)
	 * |-----------|
	 * |-----------|
	 * |           |
	 * |           | (variable-length fields, e.g. 'called_nb', 'calling_nb',
	 * |           | etc...)
	 * |           |
	 * |-----------|
	 * |   last    |
	 * | variable  | ('facility', or 'flight_number' for ARINC networks).
	 * |  length   |
	 * |  field    |
	 * |-----------|
	 * |  size #1  | (size of first additional called-nb string)
	 * |-----------|
	 * |           |
	 * |  called   | (digits, ended with a '\0' or not)
	 * |    nb     |
	 * |    #1     |
	 * |           |
	 * |-----------|
	 * |  size #2  | (size of second additional called-nb string)
	 * |-----------|
	 * |  called   |
	 * |    nb     | (digits, ended with a '\0' or not)
	 * |    #2     |
	 * |-----------|
	 * |     0     | (indicates the end of the called-nb strings list)
	 * -------------
	 *
	 *
	 * The address of the 'size #1' field is given by the
	 * 'Acu_conn_rq_a_first_other' macro.
	 *
	 * The 'size' fields are 1 byte long; their type is 'acu_size_t', their
	 * length is given by the 'ACU_SIZE_FIELDS_LENGTH' macro.
	 *
	 * If p points to an 'other' 'size' field, then one can use the following
	 * macro to determine the address of the next 'other' 'size' field:
	 *
	 *     Acu_a_next_other (p);
	 *
	 * ===============
	 * !!! WARNING !!!
	 * ===============
	 *
	 * If no 'other' called_nb is to be specified by the application, then
	 * the first 'size' field of the 'other' called-numbers MUST be set to 0.
	 *
	 *--------------------------*/

#define Acu_a_next_other(p_current_other) \
	p_current_other += (ACU_SIZE_FIELD_LGTH + *(acu_size_t FAR *)p_current_other)

#define Acu_conn_rq_other_called_nb_size(idx,size)          \
		{                                                   \
			char FAR *address;                              \
			Acu_conn_rq_a_other_called_nb (idx, address);   \
			size = *(address - ACU_SIZE_FIELD_LGTH);        \
		}

#define Acu_conn_rq_a_other_called_nb(idx,ret_address)      \
		{													\
			uchar i;                                        \
			ret_address = Acu_conn_rq_a_first_other;        \
			for (i = 1; i < idx; i++) {                     \
				Acu_a_next_other (ret_address);             \
			}                                               \
			ret_address += ACU_SIZE_FIELD_LGTH;             \
		}

/*---------------------------------------------------------------------------
 *
 *	ACU_CONN_IN		signal an incoming call.
 *
 *	Arguments :
 *		Acu_conn_in_service 		: service requested by the remote
 *		Acu_conn_in_service_list_id : service list id associated with the selected services list
 *		Acu_conn_in_ph_rate 		: physical rate (for all services)
 *		Acu_conn_in_user_rate		: user rate (for V.110 and V.120 services only)
 *		Acu_conn_in_syn_asyn  		: synchronous/asynchronous (for V.110 and V.120 services only)
 *		Acu_conn_in_stop_bits   	: nb of stop bits (for V.110 and V.120 services only)
 *		Acu_conn_in_data_bits   	: nb of data bits (for V.110 and V.120 services only)
 *		Acu_conn_in_parity      	: parity (for V.110 and V.120 services only)
 *		Acu_conn_in_interworking	: interworking indication (ON/OFF)
 *		Acu_conn_in_sending_complete: Sending-complete IE received (ON/OFF)
 *      Acu_conn_in_data_chani_nb   : nb of elements in the chani_list field
 *      Acu_conn_in_data_chani      : data channel to use (B1, B2, etc, D)
 *		Acu_conn_in_calling_nb_pres	: calling nb presentation
 *		Acu_conn_in_calling_nb_type	: calling nb type
 *		Acu_conn_in_calling_nb_screen	: calling nb screening indicator
 *		Acu_conn_in_calling_nb_size	: calling number size in bytes
 *		Acu_conn_in_a_calling_nb	: address of the calling number.
 *		Acu_conn_in_calling_nb2_pres: 2nd calling nb presentation
 *		Acu_conn_in_calling_nb2_type: 2nd calling nb type
 *		Acu_conn_in_calling_nb2_screen	: 2nd calling nb screening indicator
 *		Acu_conn_in_calling_nb2_size: 2nd calling number size in bytes
 *		Acu_conn_in_a_calling_nb2	: address of the 2nd calling number.
 *		Acu_conn_in_ph_num_size		: alias for Acu_conn_in_calling_nb_size
 *		Acu_conn_in_a_ph_num 		: alias for Acu_conn_in_a_calling_nb
 *		Acu_conn_in_called_nb_type	: called nb type
 *		Acu_conn_in_called_nb_plan	: called nb plan
 *		Acu_conn_in_called_nb_size	: called number*sub-address size in bytes
 *		Acu_conn_in_a_called_nb 	: address of the called number*sub-address.
 *		Acu_conn_in_uui_size,
 *		Acu_conn_in_a_uui			: ISDN user to User Information
 *		Acu_conn_in_facility_size,
 *		Acu_conn_in_a_facility		: ISDN facility
 *		Acu_conn_in_display_size,
 *		Acu_conn_in_a_display		: ISDN display Information
 *		Acu_conn_in_pcs_user_size,
 *		Acu_conn_in_a_pcs_user		: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_conn_in_dest_call_appear: destination call_appearance
 *		Acu_conn_in_progress_location		: progress description
 *		Acu_conn_in_progress_description	: progress location
 *
 *		ARINC SPECIFIC :
 *
 *		Acu_conn_in_notif_descr				: notify description
 *		Acu_conn_in_spf_fac_id				: spf facility Id
 *		Acu_conn_in_spf_fac_val				: spf_facility value
 *		Acu_conn_in_departure_year			: year of departure
 *		Acu_conn_in_departure_month			: month of departure
 *		Acu_conn_in_departure_day			: day of departure
 *		Acu_conn_in_service_class_id		: service class Id
 *		Acu_conn_in_nats_route_ind			: nats route
 *		Acu_conn_in_satcom_route_ind		: stacom route
 *		Acu_conn_in_tfts_route_ind			: tfts route
 *
 *		Acu_conn_in_track_1_size			: size of the track #1
 *		Acu_conn_in_track_2_size            : size of the track #2
 *		Acu_conn_in_flight_op_id_size		: size of the fligth op Id
 *		Acu_conn_in_flight_number_size		: size of the flight digits
 *
 *		Acu_conn_in_a_track_1				: address of the track #1
 *		Acu_conn_in_a_track_2               : address of the track #2
 *		Acu_conn_in_a_flight_op_id			: address of op Id
 *		Acu_conn_in_a_flight_number			: address of flight digits
 *
 *		Warning : when building this primitive, the phone number field must
 *		be filled BEFORE the UUI field.
 *
 *--------------------------------------------------------------------------*/

struct acu_conn_in_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	service;					/* (tele)service requested by the remote */
	uchar	service_list_id;			/* service list id associated with the selected services list */
	struct layer_1_info layer_1_info;	/* layer 1 information field */
	uchar	interworking;				/* interworking indication (ON/OFF) */
	uchar	sending_complete;			/* Sending-complete information element reception */
	struct chani_list chani_list;		/* list of channel ids to use for data transfer */
	struct acu_calling_nb calling_nb;	/* calling nb information */
	struct acu_calling_nb calling_nb2;	/* second calling nb information */
	struct acu_called_nb  called_nb;	/* called nb information */
	struct acu_redir_nb   redir_nb;		/* redirected nb information */

	acu_size_t uui_size;				/* size of the ISDN User to User information field */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	struct acu_progress_ind progress_ind;/* progress indicator */

#	if ARINC_NETWORKS == ON
		uchar	notif_descr;			/* notify description */

#		if CC_SPF_FAC == ON
			uchar	spf_fac_id;			/* facility identifier */
			uchar	spf_fac_val;		/* facility value */
#		endif

		uchar	departure_year;			/* departure year */
		uchar	departure_month;    	/* departure  month */
		uchar	departure_day;      	/* departure day */
		uchar	service_class_id;		/* service class identifier defined by each airline */
		uchar 	nats_route_ind;			/* nats route indication */
		uchar 	satcom_route_ind;		/* satcom route indication */
		uchar 	tfts_route_ind;			/* tfts route indication */

		acu_size_t track_1_size;		/* information of track 1 */
		acu_size_t track_2_size;		/* information of track 2 */

		acu_size_t flight_op_id_size;	/* flight operator identity size */
		acu_size_t flight_number_size;	/* flight number size */
#	endif

	uchar	dest_call_appear;			/* Destination call appearence */
	uchar	semi_permanent_circuit;		/* semi-permanent circuit indication (ON/OFF) */
										/* phone number is just here */
										/* then the UUI */
										/* then facility */
										/* then display strings */
										/* then pcs_user */
										/* then track 1 info */
										/* then track 2 info */
										/* then flight operator id */
										/* then flight number */
};

#define	Acu_conn_in_					((struct acu_conn_in_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_conn_in_ext_parms_nb		Acu_conn_in_ ext_descr.nb
#	define Acu_conn_in_ext_parms_lgth	Acu_conn_in_ ext_descr.lgth
#	define Acu_conn_in_a_ext_parms		Acu_conn_in_ ext_descr.address
#endif

#define	Acu_conn_in_service				Acu_conn_in_ service
#define Acu_conn_in_service_list_id		Acu_conn_in_ service_list_id

#define	Acu_conn_in_a_layer_1_info		((struct layer_1_info FAR *)&Acu_conn_in_ layer_1_info)
#define	Acu_conn_in_ph_rate				Acu_conn_in_ layer_1_info.ph_rate
#define	Acu_conn_in_user_rate			Acu_conn_in_ layer_1_info.user_rate
#define	Acu_conn_in_syn_asyn			Acu_conn_in_ layer_1_info.syn_asyn
#define	Acu_conn_in_stop_bits			Acu_conn_in_ layer_1_info.stop_bits
#define	Acu_conn_in_data_bits			Acu_conn_in_ layer_1_info.data_bits
#define	Acu_conn_in_parity				Acu_conn_in_ layer_1_info.parity

#define	Acu_conn_in_interworking		Acu_conn_in_ interworking
#define	Acu_conn_in_sending_complete	Acu_conn_in_ sending_complete

#define Acu_conn_in_data_chani_nb       Acu_conn_in_ chani_list.nb
#define Acu_conn_in_data_chani          Acu_conn_in_ chani_list.tab[0].chan_id
#define Acu_conn_in_data_chani_nai      Acu_conn_in_ chani_list.tab[0].nai
#define Acu_conn_in_data_chani_tab(i)   Acu_conn_in_ chani_list.tab[i].chan_id
#define Acu_conn_in_data_chani_tab_nai(i) Acu_conn_in_ chani_list.tab[i].nai
#define Acu_conn_in_data_chani_excl     Acu_conn_in_ chani_list.chan_id_excl

#define	Acu_conn_in_calling_nb_pres		Acu_conn_in_ calling_nb.pres
#define	Acu_conn_in_calling_nb_type		Acu_conn_in_ calling_nb.type
#define	Acu_conn_in_calling_nb_screen	Acu_conn_in_ calling_nb.screen
#define	Acu_conn_in_calling_nb_size		Acu_conn_in_ calling_nb.size
#define	Acu_conn_in_ph_num_size			Acu_conn_in_calling_nb_size

#define	Acu_conn_in_calling_nb2_pres	Acu_conn_in_ calling_nb2.pres
#define	Acu_conn_in_calling_nb2_type	Acu_conn_in_ calling_nb2.type
#define	Acu_conn_in_calling_nb2_screen	Acu_conn_in_ calling_nb2.screen
#define	Acu_conn_in_calling_nb2_size	Acu_conn_in_ calling_nb2.size

#define	Acu_conn_in_called_nb_type		Acu_conn_in_ called_nb.type
#define	Acu_conn_in_called_nb_plan		Acu_conn_in_ called_nb.plan
#define	Acu_conn_in_called_nb_size		Acu_conn_in_ called_nb.size

#define	Acu_conn_in_redir_nb_pres		Acu_conn_in_ redir_nb.pres
#define	Acu_conn_in_redir_nb_type		Acu_conn_in_ redir_nb.type
#define	Acu_conn_in_redir_nb_screen		Acu_conn_in_ redir_nb.screen
#define	Acu_conn_in_redir_nb_reason		Acu_conn_in_ redir_nb.reason
#define	Acu_conn_in_redir_nb_size		Acu_conn_in_ redir_nb.size

#define	Acu_conn_in_uui_size			Acu_conn_in_ uui_size
#define	Acu_conn_in_facility_size		Acu_conn_in_ facility_size
#define	Acu_conn_in_display_size		Acu_conn_in_x_display_total_size
#define Acu_conn_in_pcs_user_size		Acu_conn_in_ pcs_user_size

#define Acu_conn_in_x_display_nb		Acu_conn_in_ display.nb
#define Acu_conn_in_x_display_total_size Acu_conn_in_ display.total_size
#define Acu_conn_in_x_p_display(i) 		Acu_conn_in_ display.p_display[i]
#define Acu_conn_in_x_display_type(i)	Acu_conn_in_ display.type[i]
#define Acu_conn_in_x_display_size(i)	Acu_conn_in_ display.size[i]
#define Acu_conn_in_a_display_list      &(Acu_conn_in_ display)

#define	Acu_conn_in_a_calling_nb		((char FAR *)p_data       + Acu_conn_in_size)
#define	Acu_conn_in_a_ph_num			Acu_conn_in_a_calling_nb
#define	Acu_conn_in_a_calling_nb2		(Acu_conn_in_a_calling_nb + Acu_conn_in_calling_nb_size)
#define	Acu_conn_in_a_called_nb			(Acu_conn_in_a_calling_nb2+ Acu_conn_in_calling_nb2_size)
#define	Acu_conn_in_a_redir_nb			(Acu_conn_in_a_called_nb  + Acu_conn_in_called_nb_size)
#define	Acu_conn_in_a_uui				(Acu_conn_in_a_redir_nb   + Acu_conn_in_redir_nb_size)
#define	Acu_conn_in_a_facility			(Acu_conn_in_a_uui        + Acu_conn_in_uui_size)
#define	Acu_conn_in_a_display			(Acu_conn_in_a_facility   + Acu_conn_in_facility_size)
#define Acu_conn_in_a_pcs_user			(Acu_conn_in_a_display    + Acu_conn_in_display_size)

#define	Acu_conn_in_progress_ind_nb		Acu_conn_in_ progress_ind.nb
#define	Acu_conn_in_progress_location	Acu_conn_in_progress_loc
#define	Acu_conn_in_progress_description Acu_conn_in_progress_descr
	/* aliases */
#define	Acu_conn_in_progress_loc		Acu_conn_in_ progress_ind.t[0].loc
#define	Acu_conn_in_progress_descr		Acu_conn_in_ progress_ind.t[0].descr
	/* access to other occurencies */
#define	Acu_conn_in_progress_loc_x(i)	Acu_conn_in_ progress_ind.t[i].loc
#define	Acu_conn_in_progress_descr_x(i)	Acu_conn_in_ progress_ind.t[i].descr

#if ARINC_NETWORKS == ON
#	define	Acu_conn_in_notif_descr			Acu_conn_in_ notif_descr
#	define	Acu_conn_in_spf_fac_id			Acu_conn_in_ spf_fac_id
#	define	Acu_conn_in_spf_fac_val			Acu_conn_in_ spf_fac_val
#	define	Acu_conn_in_departure_year		Acu_conn_in_ departure_year
#	define	Acu_conn_in_departure_month		Acu_conn_in_ departure_month
#	define	Acu_conn_in_departure_day		Acu_conn_in_ departure_day
#	define	Acu_conn_in_service_class_id	Acu_conn_in_ service_class_id
#	define	Acu_conn_in_nats_route_ind 		Acu_conn_in_ nats_route_ind
#	define	Acu_conn_in_satcom_route_ind 	Acu_conn_in_ satcom_route_ind
#	define	Acu_conn_in_tfts_route_ind 		Acu_conn_in_ tfts_route_ind

#	define	Acu_conn_in_track_1_size		Acu_conn_in_ track_1_size
#	define	Acu_conn_in_track_2_size		Acu_conn_in_ track_2_size
#	define	Acu_conn_in_flight_op_id_size	Acu_conn_in_ flight_op_id_size
#	define	Acu_conn_in_flight_number_size	Acu_conn_in_ flight_number_size

#	define	Acu_conn_in_a_track_1			(Acu_conn_in_a_pcs_user		+ Acu_conn_in_pcs_user_size)
#	define	Acu_conn_in_a_track_2			(Acu_conn_in_a_track_1		+ Acu_conn_in_track_1_size)
#	define	Acu_conn_in_a_flight_op_id		(Acu_conn_in_a_track_2		+ Acu_conn_in_track_2_size)
#	define	Acu_conn_in_a_flight_number		(Acu_conn_in_a_flight_op_id + Acu_conn_in_flight_op_id_size)

#	define	Acu_conn_in_a_end_strings		(uchar FAR *)Round((ulong)Acu_conn_in_a_flight_number + Acu_conn_in_flight_number_size)

#else

#	define	Acu_conn_in_a_end_strings		(uchar FAR *)Round((ulong)Acu_conn_in_a_pcs_user + Acu_conn_in_pcs_user_size)

#endif

#define Acu_conn_in_dest_call_appear		Acu_conn_in_ dest_call_appear
#define Acu_conn_in_semi_permanent_circuit	Acu_conn_in_ semi_permanent_circuit

#define	Acu_conn_in_size					(Rnd_sizeof (struct acu_conn_in_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_SETUP_REPORT_IN		signals an incompatible incoming call.
 *
 *	WARNING : this message is generated when an incompatible incoming call
 *			  has been received. It uses the ACU_SAPI_MGT sapi. Its structure
 *			  is the same as an ACU_CONN_IN. It is used as an information
 *			  report only, no action should be taken in order to answer the
 *			  call. It is only generated in an ISDN context.
 *
 *	Arguments : use the Acu_conn_in_... macros.
 *
 *--------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
 *
 *	ACU_CONN_RS			request answering to an incoming call.
 *
 *	Arguments :
 *		Acu_conn_rs_priority		: answer priority (ACU_PHIGH, ACU_PLOW)
 *		Acu_conn_rs_service			: requested (tele)service
 *		Acu_conn_rs_ph_rate			: physical rate (for all services)
 *		Acu_conn_rs_user_rate		: user rate (for V.110 and V.120 services only)
 *		Acu_conn_rs_syn_asyn  		: synchronous/asynchronous (for V.110 and V.120 services only)
 *		Acu_conn_rs_stop_bits   	: nb of stop bits (for V.110 and V.120 services only)
 *		Acu_conn_rs_data_bits   	: nb of data bits (for V.110 and V.120 services only)
 *		Acu_conn_rs_parity      	: parity (for V.110 and V.120 services only)
 *      Acu_conn_rs_data_chani_nb   : nb of elements in the chani_list field
 *      Acu_conn_rs_data_chani  	: data channel to use (B1, B2, etc, D, or 0 for any)
 *		Acu_conn_rs_year			: year
 *		Acu_conn_rs_month;			: month
 *		Acu_conn_rs_day;			: day
 *		Acu_conn_rs_hour;			: hour
 *		Acu_conn_rs_minute;			: minute
 *		Acu_conn_rs_second;			: second
 *
 *		Acu_conn_rs_uui_size,
 *		Acu_conn_rs_a_uui			: ISDN user to User Information
 *		Acu_conn_rs_facility_size,
 *		Acu_conn_rs_a_facility		: ISDN facility
 *		Acu_conn_rs_pcs_user_size,
 *		Acu_conn_rs_a_pcs_user		: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_conn_rs_signal_val 		: signal value
 *
 *--------------------------------------------------------------------------*/

struct acu_conn_rs_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	priority;					/* phone call priority */
	uchar	service;					/* requested service */
	struct layer_1_info layer_1_info;	/* layer 1 information field */
	struct chani_list   chani_list;		/* list of channel ids to use for data transfer */
	struct acu_date_time date_time;		/* date and time */

	acu_size_t uui_size;				/* size of the ISDN User to User information field */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	uchar	signal_val;					/* signal value */

										/* UUI is just here */
										/* then the facility */
										/* then the display strings */
										/* and finally the pcs_user */
};

#define	Acu_conn_rs_					((struct acu_conn_rs_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_conn_rs_ext_parms_nb		Acu_conn_rs_ ext_descr.nb
#	define Acu_conn_rs_ext_parms_lgth	Acu_conn_rs_ ext_descr.lgth
#	define Acu_conn_rs_a_ext_parms		Acu_conn_rs_ ext_descr.address
#endif

#define	Acu_conn_rs_priority			Acu_conn_rs_ priority
#define	Acu_conn_rs_service				Acu_conn_rs_ service
#define	Acu_conn_rs_a_layer_1_info		((struct layer_1_info FAR *)&Acu_conn_rs_ layer_1_info)
#define	Acu_conn_rs_ph_rate				Acu_conn_rs_ layer_1_info.ph_rate
#define	Acu_conn_rs_user_rate			Acu_conn_rs_ layer_1_info.user_rate
#define	Acu_conn_rs_syn_asyn			Acu_conn_rs_ layer_1_info.syn_asyn
#define	Acu_conn_rs_stop_bits			Acu_conn_rs_ layer_1_info.stop_bits
#define	Acu_conn_rs_data_bits			Acu_conn_rs_ layer_1_info.data_bits
#define	Acu_conn_rs_parity				Acu_conn_rs_ layer_1_info.parity
#define Acu_conn_rs_data_chani_nb       Acu_conn_rs_ chani_list.nb
#define Acu_conn_rs_data_chani          Acu_conn_rs_ chani_list.tab[0].chan_id
#define Acu_conn_rs_data_chani_nai      Acu_conn_rs_ chani_list.tab[0].nai
#define Acu_conn_rs_data_chani_tab(i)   Acu_conn_rs_ chani_list.tab[i].chan_id
#define Acu_conn_rs_data_chani_tab_nai(i) Acu_conn_rs_ chani_list.tab[i].nai
#define Acu_conn_rs_data_chani_excl     Acu_conn_rs_ chani_list.chan_id_excl
#define	Acu_conn_rs_date_available		Acu_conn_rs_ date_time.available
#define	Acu_conn_rs_year				Acu_conn_rs_ date_time.year
#define	Acu_conn_rs_month				Acu_conn_rs_ date_time.month
#define	Acu_conn_rs_day					Acu_conn_rs_ date_time.day
#define	Acu_conn_rs_hour				Acu_conn_rs_ date_time.hour
#define	Acu_conn_rs_minute				Acu_conn_rs_ date_time.minute
#define	Acu_conn_rs_second				Acu_conn_rs_ date_time.second
#define	Acu_conn_rs_a_date_time			&(Acu_conn_rs_ date_time)

#define	Acu_conn_rs_uui_size			Acu_conn_rs_ uui_size
#define	Acu_conn_rs_facility_size		Acu_conn_rs_ facility_size
#define	Acu_conn_rs_display_size		Acu_conn_rs_x_display_total_size
#define Acu_conn_rs_pcs_user_size		Acu_conn_rs_ pcs_user_size

#define Acu_conn_rs_x_display_nb		Acu_conn_rs_ display.nb
#define Acu_conn_rs_x_display_total_size Acu_conn_rs_ display.total_size
#define Acu_conn_rs_x_p_display(i) 		Acu_conn_rs_ display.p_display[i]
#define Acu_conn_rs_x_display_type(i)	Acu_conn_rs_ display.type[i]
#define Acu_conn_rs_x_display_size(i)	Acu_conn_rs_ display.size[i]
#define Acu_conn_rs_a_display_list      &(Acu_conn_rs_ display)

#define	Acu_conn_rs_a_uui				((char FAR *)p_data + Acu_conn_rs_size)
#define	Acu_conn_rs_a_facility			(Acu_conn_rs_a_uui  + Acu_conn_rs_uui_size + 1)
#define	Acu_conn_rs_a_display			(Acu_conn_rs_a_facility + Acu_conn_rs_facility_size + 1)
#define Acu_conn_rs_a_pcs_user			(Acu_conn_rs_a_display  + Acu_conn_rs_display_size  + 1)

#define Acu_conn_rs_signal_val 			Acu_conn_rs_ signal_val

#define Acu_conn_rs_a_end_strings		(uchar FAR *)Round((ulong)Acu_conn_rs_a_pcs_user + Acu_conn_rs_pcs_user_size + 1)

#define	Acu_conn_rs_size				(Rnd_sizeof (struct acu_conn_rs_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_CONN_CO		signal successful connection of an incoming or outgoing
 *					call.
 *
 *	Arguments:
 *		Acu_conn_co_service 		: service finally agreed
 *      Acu_conn_co_data_chani_nb	: nb of elements in the chani_list field
 *      Acu_conn_co_data_chani  	: data channel to use (B1, B2, etc, D)
 *		Acu_conn_co_charging_value	: charging value (nb of units)
 *		Acu_conn_co_charging_type	: charging type
 *		Acu_conn_co_charging_period	: charging period
 *		Acu_conn_co_charging_multi	: charging multiplier
 *		Acu_conn_co_year			: year
 *		Acu_conn_co_month;			: month
 *		Acu_conn_co_day;			: day
 *		Acu_conn_co_hour;			: hour
 *		Acu_conn_co_minute;			: minute
 *		Acu_conn_co_second;			: second
 *
 *		Acu_conn_co_uui_size,
 *		Acu_conn_co_a_uui			: ISDN user to User Information
 *		Acu_conn_co_facility_size,
 *		Acu_conn_co_a_facility		: ISDN facility
 *		Acu_conn_co_display_size,
 *		Acu_conn_co_a_display		: ISDN display Information
 *		Acu_conn_co_pcs_user_size,
 *		Acu_conn_co_a_pcs_user		: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_conn_co_signal_val 		: signal value
 *
 *--------------------------------------------------------------------------*/

struct acu_conn_co_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	service;					/* agreed (tele)service */
	struct chani_list    chani_list;    /* list of channel ids to use for data transfer */
	struct acu_charging_info charging_info;	/* charging information */
	struct acu_date_time date_time;		/* date and time */
	struct acu_redir_nb   redir_nb;		/* redirected nb information */

	acu_size_t uui_size;				/* size of the ISDN User to User information field */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	uchar	signal_val;	 				/* signal value */

										/* UUI is just here */
										/* then the facility */
										/* then the display strings */
										/* and finally the pcs_user */
};

#define	Acu_conn_co_					((struct acu_conn_co_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_conn_co_ext_parms_nb		Acu_conn_co_ ext_descr.nb
#	define Acu_conn_co_ext_parms_lgth	Acu_conn_co_ ext_descr.lgth
#	define Acu_conn_co_a_ext_parms		Acu_conn_co_ ext_descr.address
#endif

#define	Acu_conn_co_service				Acu_conn_co_ service
#define Acu_conn_co_data_chani_nb       Acu_conn_co_ chani_list.nb
#define Acu_conn_co_data_chani          Acu_conn_co_ chani_list.tab[0].chan_id
#define Acu_conn_co_data_chani_nai      Acu_conn_co_ chani_list.tab[0].nai
#define Acu_conn_co_data_chani_tab(i)   Acu_conn_co_ chani_list.tab[i].chan_id
#define Acu_conn_co_data_chani_tab_nai(i) Acu_conn_co_ chani_list.tab[i].nai
#define Acu_conn_co_data_chani_excl     Acu_conn_co_ chani_list.chan_id_excl
#define Acu_conn_co_charging_value     	Acu_conn_co_ charging_info.value
#define Acu_conn_co_charging_type     	Acu_conn_co_ charging_info.type
#define Acu_conn_co_charging_period    	Acu_conn_co_ charging_info.period
#define Acu_conn_co_charging_multi     	Acu_conn_co_ charging_info.multi
#define Acu_conn_co_charging	     	Acu_conn_co_charging_value	/* alias */
#define	Acu_conn_co_date_available		Acu_conn_co_ date_time.available
#define	Acu_conn_co_year				Acu_conn_co_ date_time.year
#define	Acu_conn_co_month				Acu_conn_co_ date_time.month
#define	Acu_conn_co_day					Acu_conn_co_ date_time.day
#define	Acu_conn_co_hour				Acu_conn_co_ date_time.hour
#define	Acu_conn_co_minute				Acu_conn_co_ date_time.minute
#define	Acu_conn_co_second				Acu_conn_co_ date_time.second
#define	Acu_conn_co_a_date_time			&(Acu_conn_co_ date_time)
#define	Acu_conn_co_redir_nb_pres		Acu_conn_co_ redir_nb.pres
#define	Acu_conn_co_redir_nb_type		Acu_conn_co_ redir_nb.type
#define	Acu_conn_co_redir_nb_screen		Acu_conn_co_ redir_nb.screen
#define	Acu_conn_co_redir_nb_reason		Acu_conn_co_ redir_nb.reason
#define	Acu_conn_co_redir_nb_size		Acu_conn_co_ redir_nb.size

#define	Acu_conn_co_uui_size			Acu_conn_co_ uui_size
#define	Acu_conn_co_facility_size		Acu_conn_co_ facility_size
#define	Acu_conn_co_display_size		Acu_conn_co_x_display_total_size
#define Acu_conn_co_pcs_user_size		Acu_conn_co_ pcs_user_size

#define Acu_conn_co_x_display_nb		Acu_conn_co_ display.nb
#define Acu_conn_co_x_display_total_size Acu_conn_co_ display.total_size
#define Acu_conn_co_x_p_display(i) 		Acu_conn_co_ display.p_display[i]
#define Acu_conn_co_x_display_type(i)	Acu_conn_co_ display.type[i]
#define Acu_conn_co_x_display_size(i)	Acu_conn_co_ display.size[i]
#define Acu_conn_co_a_display_list      &(Acu_conn_co_ display)

#define	Acu_conn_co_a_redir_nb			((char FAR *)p_data + Acu_conn_co_size)
#define	Acu_conn_co_a_uui				(Acu_conn_co_a_redir_nb + Acu_conn_co_redir_nb_size)
#define	Acu_conn_co_a_facility			(Acu_conn_co_a_uui  + Acu_conn_co_uui_size)
#define	Acu_conn_co_a_display			(Acu_conn_co_a_facility + Acu_conn_co_facility_size)
#define Acu_conn_co_a_pcs_user			(Acu_conn_co_a_display + Acu_conn_co_display_size)

#define	Acu_conn_co_signal_val 			Acu_conn_co_ signal_val

#define Acu_conn_co_a_end_strings		(uchar FAR *)Round((ulong)Acu_conn_co_a_pcs_user + Acu_conn_co_pcs_user_size)

#define	Acu_conn_co_size				(Rnd_sizeof (struct acu_conn_co_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_DIGIT_RQ	Send Called Number digits in Overlap Sending mode.
 *					(ISDN only)
 *
 *	Arguments :
 *		Acu_digit_rq_sending_complete: Sending-complete IE to be sent (ON/OFF)
 *		Acu_digit_rq_digit_size,
 *		Acu_digit_rq_a_digit		: digits string size/address.
 *		Acu_digit_rq_display_size,
 *		Acu_digit_rq_a_display		: ISDN display Information
 *
 *	ARINC SPECIFIC :
 *		Acu_digit_rq_dtmf_digit		: dtmf digit,
 *		Acu_digit_rq_up_down		: up/down indication,
 *		Acu_digit_rq_dtmf_duration	: dtmf duration in step of 40ms.
 *
 *--------------------------------------------------------------------------*/

struct acu_digit_rq_args {
	uchar	sending_complete;			/* Sending-complete IE to be sent (ON/OFF) */

	acu_size_t digit_size;  			/* digits string size. */
	struct acu_display_list display;	/* display list */

#	if ARINC_NETWORKS == ON

		uchar	dtmf_digit;				/* digit */
		uchar	up_down_flag;			/* Up/Down flag */
		uchar	dtmf_duration;			/* duration in step of 40ms */

#	endif

										/* digits are just here */
										/* and finally the display strings */
};

#define	Acu_digit_rq_					((struct acu_digit_rq_args FAR *)p_data) ->
#define	Acu_digit_rq_sending_complete	Acu_digit_rq_ sending_complete

#define	Acu_digit_rq_digit_size			Acu_digit_rq_ digit_size
#define	Acu_digit_rq_display_size		Acu_digit_rq_x_display_total_size

#define Acu_digit_rq_x_display_nb		Acu_digit_rq_ display.nb
#define Acu_digit_rq_x_display_total_size Acu_digit_rq_ display.total_size
#define Acu_digit_rq_x_p_display(i) 	Acu_digit_rq_ display.p_display[i]
#define Acu_digit_rq_x_display_type(i)	Acu_digit_rq_ display.type[i]
#define Acu_digit_rq_x_display_size(i)	Acu_digit_rq_ display.size[i]
#define Acu_digit_rq_a_display_list     &(Acu_digit_rq_ display)

#define	Acu_digit_rq_a_digit			((char FAR *)p_data   + Acu_digit_rq_size)
#define	Acu_digit_rq_a_display			(Acu_digit_rq_a_digit + Acu_digit_rq_digit_size + 1)

#if ARINC_NETWORKS == ON

#	define	Acu_digit_rq_dtmf_digit		(((struct acu_digit_rq_args FAR *)p_data) -> dtmf_digit)
#	define	Acu_digit_rq_up_down		(((struct acu_digit_rq_args FAR *)p_data) -> up_down_flag)
#	define	Acu_digit_rq_dtmf_duration	(((struct acu_digit_rq_args FAR *)p_data) -> dtmf_duration)

#endif

#define	Acu_digit_rq_size				(Rnd_sizeof (struct acu_digit_rq_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_DIGIT_IN	Receive Called Number digits in Overlap Receiving mode.
 *					(ISDN only)
 *
 *	Arguments :
 *		Acu_digit_in_sending_complete: Sending-complete IE received (ON/OFF)
 *		Acu_digit_in_digit_size,
 *		Acu_digit_in_a_digit		: digits string size/address.
 *		Acu_digit_in_display_size,
 *		Acu_digit_in_a_display		: ISDN display Information
 *
 *	ARINC SPECIFIC :
 *		Acu_digit_in_dtmf_digit		: dtmf digit,
 *		Acu_digit_in_up_down		: up/down indication,
 *		Acu_digit_in_dtmf_duration	: dtmf duration in step of 40ms.
 *
 *
 *--------------------------------------------------------------------------*/

struct acu_digit_in_args {
	uchar	sending_complete;			/* Sending-complete IE to be sent (ON/OFF) */

	acu_size_t digit_size;  			/* digits string size. */
	struct acu_display_list display;	/* display list */

#	if ARINC_NETWORKS == ON
		uchar	dtmf_digit;				/* digit */
		uchar	up_down_flag;			/* Up/Down flag */
		uchar	dtmf_duration;			/* duration in step of 40ms */
#	endif

										/* digits are just here */
										/* and finally the display strings */
};



#define	Acu_digit_in_					((struct acu_digit_in_args FAR *)p_data) ->

#define	Acu_digit_in_sending_complete	Acu_digit_in_ sending_complete

#define	Acu_digit_in_digit_size			Acu_digit_in_ digit_size
#define	Acu_digit_in_display_size		Acu_digit_in_x_display_total_size

#define Acu_digit_in_x_display_nb		Acu_digit_in_ display.nb
#define Acu_digit_in_x_display_total_size Acu_digit_in_ display.total_size
#define Acu_digit_in_x_p_display(i) 	Acu_digit_in_ display.p_display[i]
#define Acu_digit_in_x_display_type(i)	Acu_digit_in_ display.type[i]
#define Acu_digit_in_x_display_size(i)	Acu_digit_in_ display.size[i]
#define Acu_digit_in_a_display_list     &(Acu_digit_in_ display)

#define	Acu_digit_in_a_digit			((char FAR *)p_data   + Acu_digit_in_size)
#define	Acu_digit_in_a_display			(Acu_digit_in_a_digit + Acu_digit_in_digit_size)

#if ARINC_NETWORKS == ON
#	define	Acu_digit_in_dtmf_digit		Acu_digit_in_ dtmf_digit
#	define	Acu_digit_in_up_down		Acu_digit_in_ up_down_flag
#	define	Acu_digit_in_dtmf_duration	Acu_digit_in_ dtmf_duration
#endif

#define	Acu_digit_in_size				(Rnd_sizeof (struct acu_digit_in_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_DIGIT_CO	Confirm end-of-called-nb-reached in Overlap Sending mode.
 *
 *	Arguments :
 *		Acu_digit_co_display_size,
 *		Acu_digit_co_a_display		: ISDN display Information
 *
 *--------------------------------------------------------------------------*/

struct acu_digit_co_args {
	struct acu_display_list display;	/* display list */

										/* display strings are just here */
};

#define	Acu_digit_co_					((struct acu_digit_co_args FAR *)p_data) ->
#define	Acu_digit_co_display_size		Acu_digit_co_x_display_total_size

#define Acu_digit_co_x_display_nb		Acu_digit_co_ display.nb
#define Acu_digit_co_x_display_total_size Acu_digit_co_ display.total_size
#define Acu_digit_co_x_p_display(i) 	Acu_digit_co_ display.p_display[i]
#define Acu_digit_co_x_display_type(i)	Acu_digit_co_ display.type[i]
#define Acu_digit_co_x_display_size(i)	Acu_digit_co_ display.size[i]
#define Acu_digit_co_a_display_list     &(Acu_digit_co_ display)

#define	Acu_digit_co_a_display			((char FAR *)p_data + Acu_digit_co_size)

#define	Acu_digit_co_size				(Rnd_sizeof (struct acu_digit_co_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_CALL_PROC_RQ		Call Proceeding Request
 *
 *	Arguments :
 *      Acu_call_proc_rq_data_chani_nb			: nb of elements in the chani_list.tab field
 *      Acu_call_proc_rq_data_chani   			: data channel to use (B1, B2, etc, D, or 0 for any)
 *		Acu_call_proc_rq_display_size,
 *		Acu_call_proc_rq_a_display    			: ISDN display Information
 *		Acu_call_proc_rq_pcs_user_size,
 *		Acu_call_proc_rq_a_pcs_user				: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_call_proc_rq_progress_location 		: progress location
 *		Acu_call_proc_rq_progress_description	: progress description
 *
 *--------------------------------------------------------------------------*/

struct acu_call_proc_rq_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	struct chani_list chani_list;		/* list of channel ids to use for data transfer */

	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	struct acu_progress_ind progress_ind;/* progress indicator */

										/* display strings are here */
										/* and finally pcs_user */

};

#define	Acu_call_proc_rq_						((struct acu_call_proc_rq_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_call_proc_rq_ext_parms_nb		Acu_call_proc_rq_ ext_descr.nb
#	define Acu_call_proc_rq_ext_parms_lgth		Acu_call_proc_rq_ ext_descr.lgth
#	define Acu_call_proc_rq_a_ext_parms			Acu_call_proc_rq_ ext_descr.address
#endif

#define Acu_call_proc_rq_data_chani_nb			Acu_call_proc_rq_ chani_list.nb
#define Acu_call_proc_rq_data_chani				Acu_call_proc_rq_ chani_list.tab[0].chan_id
#define Acu_call_proc_rq_data_chani_nai			Acu_call_proc_rq_ chani_list.tab[0].nai
#define Acu_call_proc_rq_data_chani_tab(i)		Acu_call_proc_rq_ chani_list.tab[i].chan_id
#define Acu_call_proc_rq_data_chani_tab_nai(i)	Acu_call_proc_rq_ chani_list.tab[i].nai
#define Acu_call_proc_rq_data_chani_excl    	Acu_call_proc_rq_ chani_list.chan_id_excl

#define	Acu_call_proc_rq_display_size			Acu_call_proc_rq_x_display_total_size
#define Acu_call_proc_rq_pcs_user_size			Acu_call_proc_rq_ pcs_user_size

#define Acu_call_proc_rq_x_display_nb			Acu_call_proc_rq_ display.nb
#define Acu_call_proc_rq_x_display_total_size	Acu_call_proc_rq_ display.total_size
#define Acu_call_proc_rq_x_p_display(i) 		Acu_call_proc_rq_ display.p_display[i]
#define Acu_call_proc_rq_x_display_type(i)		Acu_call_proc_rq_ display.type[i]
#define Acu_call_proc_rq_x_display_size(i)		Acu_call_proc_rq_ display.size[i]
#define Acu_call_proc_rq_a_display_list     	&(Acu_call_proc_rq_ display)

#define	Acu_call_proc_rq_a_display				((char FAR *)p_data + Acu_call_proc_rq_size)
#define Acu_call_proc_rq_a_pcs_user				(Acu_call_proc_rq_a_display + Acu_call_proc_rq_display_size + 1)

#define	Acu_call_proc_rq_progress_ind_nb		Acu_call_proc_rq_ progress_ind.nb
#define	Acu_call_proc_rq_progress_location		Acu_call_proc_rq_progress_loc
#define	Acu_call_proc_rq_progress_description	Acu_call_proc_rq_progress_descr
	/* aliases */
#define	Acu_call_proc_rq_progress_loc			Acu_call_proc_rq_ progress_ind.t[0].loc
#define	Acu_call_proc_rq_progress_descr			Acu_call_proc_rq_ progress_ind.t[0].descr
	/* access to other occurencies */
#define	Acu_call_proc_rq_progress_loc_x(i)		Acu_call_proc_rq_ progress_ind.t[i].loc
#define	Acu_call_proc_rq_progress_descr_x(i)	Acu_call_proc_rq_ progress_ind.t[i].descr

#define Acu_call_proc_rq_a_end_strings			(uchar FAR *)Round((ulong)Acu_call_proc_rq_a_pcs_user + Acu_call_proc_rq_pcs_user_size + 1)

#define	Acu_call_proc_rq_size					(Rnd_sizeof (struct acu_call_proc_rq_args))

/*----------------------------------------------------------------------------
 *
 *	ACU_PROGRESS_IN/ACU_PROGRESS_RQ: 		progress indication/request
 *
 *	Arguments :
 *		Acu_progress_in_event      			: detected event
 *		Acu_progress_in_cause      			: cause value
 *		Acu_progress_in_progress_location 	: progress location
 *		Acu_progress_in_progress_description: progress description
 *      Acu_progress_in_data_chani_nb		: nb of elements in the chani_list field
 *      Acu_progress_in_data_chani  		: channel id
 *		Acu_progress_in_facility_size,
 *		Acu_progress_in_a_facility			: ISDN facility
 *		Acu_progress_in_display_size,
 *		Acu_progress_in_a_display			: ISDN display Information
 *		Acu_progress_in_pcs_user_size,
 *		Acu_progress_in_a_pcs_user			: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_progress_in_signal_val 			: signal value
 *
 *--------------------------------------------------------------------------*/

struct acu_progress_in_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar				event;			/* event parameter */

	uchar				cause;			/* cause value */

	struct acu_progress_ind progress_ind;/* progress indicator */

	uchar				signal_val;		/* signal value */

	struct chani_list	chani_list;		/* list of channel ids to use for data transfer */

	acu_size_t	facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

										/* facility is just here */
										/* then display strings */
										/* and finally the pcs_user */
};

#define	Acu_progress_in_						((struct acu_progress_in_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_progress_in_ext_parms_nb			Acu_progress_in_ ext_descr.nb
#	define Acu_progress_in_ext_parms_lgth		Acu_progress_in_ ext_descr.lgth
#	define Acu_progress_in_a_ext_parms			Acu_progress_in_ ext_descr.address
#endif

#define	Acu_progress_in_event					Acu_progress_in_ event
#define	Acu_progress_in_cause					Acu_progress_in_ cause

#define	Acu_progress_in_progress_ind_nb			Acu_progress_in_ progress_ind.nb
#define	Acu_progress_in_progress_location		Acu_progress_in_progress_loc
#define	Acu_progress_in_progress_description	Acu_progress_in_progress_descr
	/* aliases */
#define	Acu_progress_in_progress_loc			Acu_progress_in_ progress_ind.t[0].loc
#define	Acu_progress_in_progress_descr			Acu_progress_in_ progress_ind.t[0].descr
	/* access to other occurencies */
#define	Acu_progress_in_progress_loc_x(i)		Acu_progress_in_ progress_ind.t[i].loc
#define	Acu_progress_in_progress_descr_x(i)		Acu_progress_in_ progress_ind.t[i].descr

#define Acu_progress_in_data_chani_nb   		Acu_progress_in_ chani_list.nb
#define Acu_progress_in_data_chani      		Acu_progress_in_ chani_list.tab[0].chan_id
#define Acu_progress_in_data_chani_nai  		Acu_progress_in_ chani_list.tab[0].nai
#define Acu_progress_in_data_chani_tab(i)    	Acu_progress_in_ chani_list.tab[i].chan_id
#define Acu_progress_in_data_chani_tab_nai(i)	Acu_progress_in_ chani_list.tab[i].nai
#define Acu_progress_in_data_chani_excl 		Acu_progress_in_ chani_list.chan_id_excl

#define	Acu_progress_in_facility_size			Acu_progress_in_ facility_size
#define	Acu_progress_in_display_size			Acu_progress_in_x_display_total_size
#define Acu_progress_in_pcs_user_size			Acu_progress_in_ pcs_user_size

#define Acu_progress_in_x_display_nb			Acu_progress_in_ display.nb
#define Acu_progress_in_x_display_total_size	Acu_progress_in_ display.total_size
#define Acu_progress_in_x_p_display(i) 			Acu_progress_in_ display.p_display[i]
#define Acu_progress_in_x_display_type(i)		Acu_progress_in_ display.type[i]
#define Acu_progress_in_x_display_size(i)		Acu_progress_in_ display.size[i]
#define Acu_progress_in_a_display_list          &(Acu_progress_in_ display)

#define	Acu_progress_in_a_facility				((char FAR *)p_data + Acu_progress_in_size)
#define	Acu_progress_in_a_display				(Acu_progress_in_a_facility + Acu_progress_in_facility_size)
#define Acu_progress_in_a_pcs_user				(Acu_progress_in_a_display + Acu_progress_in_display_size)

#define	Acu_progress_in_signal_val				Acu_progress_in_ signal_val

#define Acu_progress_in_a_end_strings			(uchar FAR *)Round((ulong)Acu_progress_in_a_pcs_user + Acu_progress_in_pcs_user_size)

#define	Acu_progress_in_size					(Rnd_sizeof (struct acu_progress_in_args))

/*----------------------------------------------------------------------------
 *
 *	ACU_ALERT_RQ		alert request
 *
 *	Arguments :
 *		Acu_alert_rq_uui_size,
 *		Acu_alert_rq_a_uui		: ISDN facility
 *		Acu_alert_rq_display_size,
 *		Acu_alert_rq_a_display	: ISDN display Information
 *		Acu_alert_rq_pcs_user_size,
 *		Acu_alert_rq_a_pcs_user	: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_alert_rq_signal_val 			: signal value
 *		Acu_alert_rq_progress_location 		: progress location
 *		Acu_alert_rq_progress_description	: progress description
 *
 *--------------------------------------------------------------------------*/

struct acu_alert_rq_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	struct chani_list chani_list;		/* list of channel ids to use for data transfer */

	acu_size_t uui_size;				/* uui size */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	uchar	signal_val;					/* signal value */

	struct acu_progress_ind progress_ind;/* progress indicator */

										/* UUI is just here */
										/* then display */
										/* and finally pcs_user */
};

#define	Acu_alert_rq_							((struct acu_alert_rq_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_alert_rq_ext_parms_nb			Acu_alert_rq_ ext_descr.nb
#	define Acu_alert_rq_ext_parms_lgth			Acu_alert_rq_ ext_descr.lgth
#	define Acu_alert_rq_a_ext_parms				Acu_alert_rq_ ext_descr.address
#endif

#define Acu_alert_rq_data_chani_nb				Acu_alert_rq_ chani_list.nb
#define Acu_alert_rq_data_chani					Acu_alert_rq_ chani_list.tab[0].chan_id
#define Acu_alert_rq_data_chani_nai				Acu_alert_rq_ chani_list.tab[0].nai
#define Acu_alert_rq_data_chani_tab(i)			Acu_alert_rq_ chani_list.tab[i].chan_id
#define Acu_alert_rq_data_chani_tab_nai(i)		Acu_alert_rq_ chani_list.tab[i].nai
#define Acu_alert_rq_data_chani_excl        	Acu_alert_rq_ chani_list.chan_id_excl

#define Acu_alert_rq_x_display_nb				Acu_alert_rq_ display.nb
#define Acu_alert_rq_x_display_total_size		Acu_alert_rq_ display.total_size
#define Acu_alert_rq_x_p_display(i) 			Acu_alert_rq_ display.p_display[i]
#define Acu_alert_rq_x_display_type(i)			Acu_alert_rq_ display.type[i]
#define Acu_alert_rq_x_display_size(i)			Acu_alert_rq_ display.size[i]
#define Acu_alert_rq_a_display_list				&(Acu_alert_rq_ display)

#define	Acu_alert_rq_uui_size					Acu_alert_rq_ uui_size
#define	Acu_alert_rq_display_size				Acu_alert_rq_x_display_total_size
#define Acu_alert_rq_pcs_user_size				Acu_alert_rq_ pcs_user_size

#define	Acu_alert_rq_a_uui						((char FAR *)p_data + Acu_alert_rq_size)
#define	Acu_alert_rq_a_display					(Acu_alert_rq_a_uui + Acu_alert_rq_uui_size + 1)
#define Acu_alert_rq_a_pcs_user					(Acu_alert_rq_a_display + Acu_alert_rq_display_size + 1)

#define	Acu_alert_rq_signal_val					Acu_alert_rq_ signal_val

#define	Acu_alert_rq_progress_ind_nb			Acu_alert_rq_ progress_ind.nb
#define	Acu_alert_rq_progress_location			Acu_alert_rq_progress_loc
#define	Acu_alert_rq_progress_description		Acu_alert_rq_progress_descr
	/* aliases */
#define	Acu_alert_rq_progress_loc				Acu_alert_rq_ progress_ind.t[0].loc
#define	Acu_alert_rq_progress_descr				Acu_alert_rq_ progress_ind.t[0].descr
	/* access to other occurencies */
#define	Acu_alert_rq_progress_loc_x(i)			Acu_alert_rq_ progress_ind.t[i].loc
#define	Acu_alert_rq_progress_descr_x(i)		Acu_alert_rq_ progress_ind.t[i].descr

#define Acu_alert_rq_a_end_strings				(uchar FAR *)Round((ulong)Acu_alert_rq_a_pcs_user + Acu_alert_rq_pcs_user_size + 1)

#define	Acu_alert_rq_size						(Rnd_sizeof (struct acu_alert_rq_args))

/*----------------------------------------------------------------------------
 *
 *	ACU_ALERT_IN		alert indication
 *
 *	Arguments :
 *		Acu_alert_in_alert 					: detected alert (Alert code)
 *		Acu_alert_in_a_facility				: ISDN facility
 *		Acu_alert_in_facility_size,
 *		Acu_alert_in_a_facility				: ISDN facility
 *		Acu_alert_in_display_size,
 *		Acu_alert_in_a_display				: ISDN display Information
 *		Acu_alert_in_pcs_user_size,
 *		Acu_alert_in_a_pcs_user				: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_alert_in_signal_val 			: signal value
 *		Acu_alert_in_progress_location 		: progress location
 *		Acu_alert_in_progress_description	: progress description
 *
 *--------------------------------------------------------------------------*/

struct acu_alert_in_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	alert;						/* event parameter */

	struct chani_list chani_list; 		/* list of channel ids to use for data transfer */
	struct acu_redir_nb   redir_nb;		/* redirected nb information */

	acu_size_t uui_size;				/* uui size */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	uchar	signal_val;					/* signal value */

	struct acu_progress_ind progress_ind;/* progress indicator */

										/* UUI is just here */
										/* then the facility */
										/* then the display strings */
										/* and finally the pcs_user */
};

#define	Acu_alert_in_							((struct acu_alert_in_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_alert_in_ext_parms_nb			Acu_alert_in_ ext_descr.nb
#	define Acu_alert_in_ext_parms_lgth			Acu_alert_in_ ext_descr.lgth
#	define Acu_alert_in_a_ext_parms				Acu_alert_in_ ext_descr.address
#endif

#define	Acu_alert_in_alert						Acu_alert_in_ alert

#define Acu_alert_in_data_chani_nb				Acu_alert_in_ chani_list.nb
#define Acu_alert_in_data_chani					Acu_alert_in_ chani_list.tab[0].chan_id
#define Acu_alert_in_data_chani_nai				Acu_alert_in_ chani_list.tab[0].nai
#define Acu_alert_in_data_chani_tab(i)			Acu_alert_in_ chani_list.tab[i].chan_id
#define Acu_alert_in_data_chani_tab_nai(i)		Acu_alert_in_ chani_list.tab[i].nai
#define Acu_alert_in_data_chani_excl        	Acu_alert_in_ chani_list.chan_id_excl

#define	Acu_alert_in_redir_nb_pres				Acu_alert_in_ redir_nb.pres
#define	Acu_alert_in_redir_nb_type				Acu_alert_in_ redir_nb.type
#define	Acu_alert_in_redir_nb_screen			Acu_alert_in_ redir_nb.screen
#define	Acu_alert_in_redir_nb_reason			Acu_alert_in_ redir_nb.reason
#define	Acu_alert_in_redir_nb_size				Acu_alert_in_ redir_nb.size

#define	Acu_alert_in_uui_size					Acu_alert_in_ uui_size
#define	Acu_alert_in_facility_size				Acu_alert_in_ facility_size
#define	Acu_alert_in_display_size				Acu_alert_in_x_display_total_size
#define Acu_alert_in_pcs_user_size				Acu_alert_in_ pcs_user_size

#define Acu_alert_in_x_display_nb				Acu_alert_in_ display.nb
#define Acu_alert_in_x_display_total_size		Acu_alert_in_ display.total_size
#define Acu_alert_in_x_p_display(i) 			Acu_alert_in_ display.p_display[i]
#define Acu_alert_in_x_display_type(i)			Acu_alert_in_ display.type[i]
#define Acu_alert_in_x_display_size(i)			Acu_alert_in_ display.size[i]
#define Acu_alert_in_a_display_list   		  &(Acu_alert_in_ display)

#define	Acu_alert_in_a_redir_nb					((char FAR *)p_data + Acu_alert_in_size)
#define	Acu_alert_in_a_uui						(Acu_alert_in_a_redir_nb + Acu_alert_in_redir_nb_size)
#define	Acu_alert_in_a_facility					(Acu_alert_in_a_uui + Acu_alert_in_uui_size)
#define	Acu_alert_in_a_display					(Acu_alert_in_a_facility + Acu_alert_in_facility_size)
#define Acu_alert_in_a_pcs_user					(Acu_alert_in_a_display + Acu_alert_in_display_size)

#define	Acu_alert_in_signal_val					Acu_alert_in_ signal_val

#define	Acu_alert_in_progress_ind_nb			Acu_alert_in_ progress_ind.nb
#define	Acu_alert_in_progress_location			Acu_alert_in_progress_loc
#define	Acu_alert_in_progress_description		Acu_alert_in_progress_descr
	/* aliases */
#define	Acu_alert_in_progress_loc				Acu_alert_in_ progress_ind.t[0].loc
#define	Acu_alert_in_progress_descr				Acu_alert_in_ progress_ind.t[0].descr
	/* access to other occurencies */
#define	Acu_alert_in_progress_loc_x(i)			Acu_alert_in_ progress_ind.t[i].loc
#define	Acu_alert_in_progress_descr_x(i)		Acu_alert_in_ progress_ind.t[i].descr

#define Acu_alert_in_a_end_strings				(uchar FAR *)Round((ulong)Acu_alert_in_a_pcs_user + Acu_alert_in_pcs_user_size)

#define	Acu_alert_in_size						(Rnd_sizeof (struct acu_alert_in_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_USER_INFO_RQ/IN		User Information (ISDN only).
 *
 *--------------------------------------------------------------------------*/

struct acu_user_info {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	fac_protocol_discr;			/* user facility protocol discriminator */
	acu_size_t uui_size;				/* uui size */
	acu_size_t fac_size;				/* user facility size */

										/* UUI is just here */
										/* and finally the facility */
};

#define	Acu_user_info_				((struct acu_user_info FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_user_info_ext_parms_nb	Acu_user_info_ ext_descr.nb
#	define Acu_user_info_ext_parms_lgth	Acu_user_info_ ext_descr.lgth
#	define Acu_user_info_a_ext_parms	Acu_user_info_ ext_descr.address
#endif

#define	Acu_user_info_fac_protocol_discr	Acu_user_info_ fac_protocol_discr

#define	Acu_user_info_uui_size		Acu_user_info_ uui_size
#define	Acu_user_info_fac_size		Acu_user_info_ fac_size

#define	Acu_user_info_a_uui			((char FAR *)p_data  + Acu_user_info_size)
#define	Acu_user_info_a_fac			(Acu_user_info_a_uui + Acu_user_info_uui_size + 1)

#define Acu_user_info_a_end_strings	(uchar FAR *)Round((ulong)Acu_user_info_a_fac + Acu_user_info_fac_size)

#define	Acu_user_info_size			(Rnd_sizeof (struct acu_user_info))

/*----------------------------------------------------------------------------
 *
 *	ACU_CLEAR_RQ			request call clearing.
 *
 *	Arguments :
 *		Acu_clear_rq_priority   : call clear priority normal/urgent (ACU_PHIGH/ACU_PLOW)
 *		Acu_clear_rq_cause		: call clearing cause value to be sent
 *								  (if 0, "Normal Clearing" (16) is sent).
 *		Acu_clear_rq_uui_size,
 *		Acu_clear_rq_a_uui		: ISDN user to User Information
 *		Acu_clear_rq_facility_size,
 *		Acu_clear_rq_facility	: facility
 *		Acu_clear_rq_pcs_user_size,
 *		Acu_clear_rq_a_pcs_user	: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_clear_rq_signal_val	: signal value
 *
 *--------------------------------------------------------------------------*/

struct acu_clear_rq_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	priority;					/* phone call priority */
	uchar	cause;						/* clearing cause value */

	acu_size_t uui_size;				/* size of the ISDN User to User information field */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	uchar	signal_val;					/* signal value */

										/* UUI is just here */
										/* then the facility */
										/* then the display strings */
										/* and finally the pcs_user */
};

#define	Acu_clear_rq_					((struct acu_clear_rq_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_clear_rq_ext_parms_nb	Acu_clear_rq_ ext_descr.nb
#	define Acu_clear_rq_ext_parms_lgth	Acu_clear_rq_ ext_descr.lgth
#	define Acu_clear_rq_a_ext_parms		Acu_clear_rq_ ext_descr.address
#endif

#define	Acu_clear_rq_priority			Acu_clear_rq_ priority
#define	Acu_clear_rq_cause				Acu_clear_rq_ cause

#define	Acu_clear_rq_uui_size			Acu_clear_rq_ uui_size
#define	Acu_clear_rq_facility_size		Acu_clear_rq_ facility_size
#define	Acu_clear_rq_display_size		Acu_clear_rq_x_display_total_size
#define Acu_clear_rq_pcs_user_size		Acu_clear_rq_ pcs_user_size

#define Acu_clear_rq_x_display_nb		Acu_clear_rq_ display.nb
#define Acu_clear_rq_x_display_total_size Acu_clear_rq_ display.total_size
#define Acu_clear_rq_x_p_display(i) 	Acu_clear_rq_ display.p_display[i]
#define Acu_clear_rq_x_display_type(i)	Acu_clear_rq_ display.type[i]
#define Acu_clear_rq_x_display_size(i)	Acu_clear_rq_ display.size[i]
#define Acu_clear_rq_a_display_list		&(Acu_clear_rq_ display)

#define	Acu_clear_rq_a_uui				((char FAR *)p_data + Acu_clear_rq_size)
#define	Acu_clear_rq_a_facility			(Acu_clear_rq_a_uui + Acu_clear_rq_uui_size + 1)
#define	Acu_clear_rq_a_display			(Acu_clear_rq_a_facility + Acu_clear_rq_facility_size + 1)
#define Acu_clear_rq_a_pcs_user			(Acu_clear_rq_a_display  + Acu_clear_rq_display_size  + 1)

#define	Acu_clear_rq_signal_val			Acu_clear_rq_ signal_val

#define Acu_clear_rq_a_end_strings		(uchar FAR *)Round((ulong)Acu_clear_rq_a_pcs_user + Acu_clear_rq_pcs_user_size + 1)

#define	Acu_clear_rq_size				(Rnd_sizeof (struct acu_clear_rq_args))

/*----------------------------------------------------------------------------
 *
 *	ACU_CLEAR_IN			call cleared indication.
 *
 *	Arguments :
 *		Acu_clear_in_ret_code 		: return code (ACURC_BUSY, etc., described
 *								  		below)
 *		Acu_clear_in_charging_vlaue	: charging value (nb of units)
 *		Acu_clear_in_charging_type	: charging type
 *		Acu_clear_in_charging_period: charging period
 *		Acu_clear_in_charging_multi	: charging multiplier
 *		Acu_clear_in_total_cost     : alias for charging field
 *		Acu_clear_in_uui_size,
 *		Acu_clear_in_a_uui			: ISDN user to User Information
 *		Acu_clear_in_facility_size,
 *		Acu_clear_in_a_facility		: ISDN facility
 *		Acu_clear_in_display_size,
 *		Acu_clear_in_a_display		: ISDN display Information
 *		Acu_clear_in_pcs_user_size,
 *		Acu_clear_in_a_pcs_user		: ISDN PCS-to-User/User-to-PCS Info.
 *		Acu_clear_in_signal_val		: signal value
 *
 *--------------------------------------------------------------------------*/

struct acu_clear_in_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	return_code;				/* clear cause code */
	uchar	network_cause;				/* Network-provided clear cause value */
	struct acu_charging_info charging_info;	/* charging information */

	acu_size_t uui_size;				/* size of the ISDN User to User information field */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */
	uchar	signal_val;					/* signal value */
	struct acu_progress_ind progress_ind;/* progress indicator */

										/* UUI is just here */
										/* then the facility */
										/* then the display strings */
										/* and finally the pcs_user */
};

#define	Acu_clear_in_					((struct acu_clear_in_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_clear_in_ext_parms_nb	Acu_clear_in_ ext_descr.nb
#	define Acu_clear_in_ext_parms_lgth	Acu_clear_in_ ext_descr.lgth
#	define Acu_clear_in_a_ext_parms		Acu_clear_in_ ext_descr.address
#endif

#define	Acu_clear_in_ret_code			Acu_clear_in_ return_code
#define	Acu_clear_in_network_cause		Acu_clear_in_ network_cause

#define Acu_clear_in_charging_value     Acu_clear_in_ charging_info.value
#define Acu_clear_in_charging_type     	Acu_clear_in_ charging_info.type
#define Acu_clear_in_charging_period    Acu_clear_in_ charging_info.period
#define Acu_clear_in_charging_multi     Acu_clear_in_ charging_info.multi
#define Acu_clear_in_charging	     	Acu_clear_in_charging_value	/* alias */
#define	Acu_clear_in_total_cost			Acu_clear_in_charging /* alias */

#define	Acu_clear_in_uui_size			Acu_clear_in_ uui_size
#define	Acu_clear_in_facility_size		Acu_clear_in_ facility_size
#define	Acu_clear_in_display_size		Acu_clear_in_x_display_total_size
#define Acu_clear_in_pcs_user_size		Acu_clear_in_ pcs_user_size

#define Acu_clear_in_x_display_nb		Acu_clear_in_ display.nb
#define Acu_clear_in_x_display_total_size Acu_clear_in_ display.total_size
#define Acu_clear_in_x_p_display(i) 	Acu_clear_in_ display.p_display[i]
#define Acu_clear_in_x_display_type(i)	Acu_clear_in_ display.type[i]
#define Acu_clear_in_x_display_size(i)	Acu_clear_in_ display.size[i]
#define Acu_clear_in_a_display_list   	&(Acu_clear_in_ display)

#define	Acu_clear_in_a_uui				((char FAR *)p_data + Acu_clear_in_size)
#define	Acu_clear_in_a_facility			(Acu_clear_in_a_uui + Acu_clear_in_uui_size)
#define	Acu_clear_in_a_display			(Acu_clear_in_a_facility + Acu_clear_in_facility_size)
#define Acu_clear_in_a_pcs_user			(Acu_clear_in_a_display  + Acu_clear_in_display_size)

#define	Acu_clear_in_signal_val			Acu_clear_in_ signal_val

#define	Acu_clear_in_progress_ind_nb	Acu_clear_in_ progress_ind.nb
#define	Acu_clear_in_progress_location	Acu_clear_in_progress_loc
#define	Acu_clear_in_progress_description Acu_clear_in_progress_descr
	/* aliases */
#define	Acu_clear_in_progress_loc		Acu_clear_in_ progress_ind.t[0].loc
#define	Acu_clear_in_progress_descr		Acu_clear_in_ progress_ind.t[0].descr
	/* access to other occurencies */
#define	Acu_clear_in_progress_loc_x(i)	Acu_clear_in_ progress_ind.t[i].loc
#define	Acu_clear_in_progress_descr_x(i) Acu_clear_in_ progress_ind.t[i].descr

#define Acu_clear_in_a_end_strings		(uchar FAR *)Round((ulong)Acu_clear_in_a_pcs_user + Acu_clear_in_pcs_user_size)

#define	Acu_clear_in_size				(Rnd_sizeof (struct acu_clear_in_args))

/*----------------------------------------------------------------------------
 *
 *	ACU_CLEAR_RS			call clearing response.
 *
 *	Arguments :
 *		Acu_clear_rs_priority   : primitive priority (ACU_PHIGH/ACU_PLOW)
 *		Acu_clear_rs_uui_size,
 *		Acu_clear_rs_a_uui		: ISDN user to User Information
 *		Acu_clear_rs_facility_size,
 *		Acu_clear_rs_facility	: facility
 *		Acu_clear_rs_pcs_user_size,
 *		Acu_clear_rs_a_pcs_user	: ISDN PCS-to-User/User-to-PCS Info.
 *
 *--------------------------------------------------------------------------*/

struct acu_clear_rs_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	priority;					/* phone call priority */

	acu_size_t uui_size;				/* size of the ISDN User to User information field */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

										/* UUI is just here */
										/* then the facility */
										/* then the display strings */
										/* and finally the pcs_user */
};

#define	Acu_clear_rs_					((struct acu_clear_rs_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_clear_rs_ext_parms_nb	Acu_clear_rs_ ext_descr.nb
#	define Acu_clear_rs_ext_parms_lgth	Acu_clear_rs_ ext_descr.lgth
#	define Acu_clear_rs_a_ext_parms		Acu_clear_rs_ ext_descr.address
#endif

#define	Acu_clear_rs_priority			Acu_clear_rs_ priority

#define	Acu_clear_rs_uui_size			Acu_clear_rs_ uui_size
#define	Acu_clear_rs_facility_size		Acu_clear_rs_ facility_size
#define	Acu_clear_rs_display_size		Acu_clear_rs_x_display_total_size
#define Acu_clear_rs_pcs_user_size		Acu_clear_rs_ pcs_user_size

#define Acu_clear_rs_x_display_nb		Acu_clear_rs_ display.nb
#define Acu_clear_rs_x_display_total_size Acu_clear_rs_ display.total_size
#define Acu_clear_rs_x_p_display(i) 	Acu_clear_rs_ display.p_display[i]
#define Acu_clear_rs_x_display_type(i)	Acu_clear_rs_ display.type[i]
#define Acu_clear_rs_x_display_size(i)	Acu_clear_rs_ display.size[i]
#define Acu_clear_rs_a_display_list		&(Acu_clear_rs_ display)

#define	Acu_clear_rs_a_uui				((char FAR *)p_data + Acu_clear_rs_size)
#define	Acu_clear_rs_a_facility			(Acu_clear_rs_a_uui + Acu_clear_rs_uui_size + 1)
#define	Acu_clear_rs_a_display			(Acu_clear_rs_a_facility + Acu_clear_rs_facility_size + 1)
#define Acu_clear_rs_a_pcs_user			(Acu_clear_rs_a_display  + Acu_clear_rs_display_size  + 1)

#define Acu_clear_rs_a_end_strings		(uchar FAR *)Round((ulong)Acu_clear_rs_a_pcs_user + Acu_clear_rs_pcs_user_size + 1)

#define	Acu_clear_rs_size				(Rnd_sizeof (struct acu_clear_rs_args))

/*----------------------------------------------------------------------------
 *
 *	ACU_CLEAR_CO			call cleared confirmation.
 *
 *	Arguments :
 *		Acu_clear_co_ret_code 		: return code (ACURC_BUSY, etc., see ACU_CLEAR_IN)
 *		Acu_clear_co_network_cause	: clear cause, as provided by the network
 *		Acu_clear_co_charging		: charging (nb of units)
 *		Acu_clear_co_charging_type	: charging type
 *		Acu_clear_co_charging_period: charging period
 *		Acu_clear_co_charging_multi	: charging multiplier
 *		Acu_clear_co_total_cost     : alias for charging field
 *		Acu_clear_co_uui_size,
 *		Acu_clear_co_a_uui			: ISDN User to User Information
 *		Acu_clear_co_facility_size,
 *		Acu_clear_co_a_facility		: ISDN facility
 *		Acu_clear_co_display_size,
 *		Acu_clear_co_a_display		: ISDN display Information
 *		Acu_clear_co_pcs_user_size,
 *		Acu_clear_co_a_pcs_user		: ISDN PCS-to-User/User-to-PCS Info.
 *
 *	ARINC SPECIFIC :
 * 		Acu_clear_co_credit_card_status	: credit card status
 *
 *--------------------------------------------------------------------------*/

struct acu_clear_co_args {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	return_code;				/* clear cause code */
	uchar	network_cause;				/* Network-provided clear cause value */
	struct acu_charging_info charging_info;	/* charging information */

	acu_size_t uui_size;				/* size of the ISDN User to User information field */
	acu_size_t facility_size;			/* size of the facility */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

#	if ARINC_NETWORKS == ON
		uchar	credit_card_status;		/* credit card status */
#	endif

										/* UUI is just here */
										/* then the facility */
										/* then the display strings */
										/* and finally the pcs_user */
};

#define	Acu_clear_co_					((struct acu_clear_co_args FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_clear_co_ext_parms_nb	Acu_clear_co_ ext_descr.nb
#	define Acu_clear_co_ext_parms_lgth	Acu_clear_co_ ext_descr.lgth
#	define Acu_clear_co_a_ext_parms		Acu_clear_co_ ext_descr.address
#endif

#define	Acu_clear_co_ret_code			Acu_clear_co_ return_code
#define	Acu_clear_co_network_cause		Acu_clear_co_ network_cause

#define Acu_clear_co_charging_value     Acu_clear_co_ charging_info.value
#define Acu_clear_co_charging_type     	Acu_clear_co_ charging_info.type
#define Acu_clear_co_charging_period    Acu_clear_co_ charging_info.period
#define Acu_clear_co_charging_multi     Acu_clear_co_ charging_info.multi
#define Acu_clear_co_charging	     	Acu_clear_co_charging_value	/* alias */
#define	Acu_clear_co_total_cost		 	Acu_clear_co_charging /* alias */

#define	Acu_clear_co_uui_size			Acu_clear_co_ uui_size
#define	Acu_clear_co_facility_size		Acu_clear_co_ facility_size
#define	Acu_clear_co_display_size		Acu_clear_co_x_display_total_size
#define Acu_clear_co_pcs_user_size		Acu_clear_co_ pcs_user_size

#define Acu_clear_co_x_display_nb		Acu_clear_co_ display.nb
#define Acu_clear_co_x_display_total_size Acu_clear_co_ display.total_size
#define Acu_clear_co_x_p_display(i) 	Acu_clear_co_ display.p_display[i]
#define Acu_clear_co_x_display_type(i)	Acu_clear_co_ display.type[i]
#define Acu_clear_co_x_display_size(i)	Acu_clear_co_ display.size[i]
#define Acu_clear_co_a_display_list   	&(Acu_clear_co_ display)

#define	Acu_clear_co_a_uui				((char FAR *)p_data + Acu_clear_co_size)
#define	Acu_clear_co_a_facility			(Acu_clear_co_a_uui + Acu_clear_co_uui_size)
#define	Acu_clear_co_a_display			(Acu_clear_co_a_facility + Acu_clear_co_facility_size)
#define Acu_clear_co_a_pcs_user			(Acu_clear_co_a_display + Acu_clear_co_display_size)

#if ARINC_NETWORKS == ON
#	define Acu_clear_co_credit_card_status	Acu_clear_co_ credit_card_status
#endif

#define Acu_clear_co_a_end_strings		(uchar FAR *)Round((ulong)Acu_clear_co_a_pcs_user + Acu_clear_co_pcs_user_size)

#define	Acu_clear_co_size				(Rnd_sizeof (struct acu_clear_co_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_INFO_RQ		Get a Automatic Call Unit parameter (Analog ACU only)
 *
 *	Arguments :
 *		Acu_info_rq_name : parameter reference (ACU_NRINGS, ACU_PULSE, etc)
 *
 *--------------------------------------------------------------------------*/

struct acu_info_rq_args {
	uchar	name;		/* parameter name */
};

#define	Acu_info_rq_name			(((struct acu_info_rq_args FAR *)p_data) -> name)

#define	Acu_info_rq_size			(Rnd_sizeof (struct acu_info_rq_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_INFO_CO		confirmation with informations (Analog ACU only).
 *
 *	Arguments :
 *		Acu_info_co_name	 : parameter name (ACU_NRINGS, ACU_PULSE, etc)
 *		Acu_info_co_value	 : parameter value (ushort).
 *
 *--------------------------------------------------------------------------*/

struct acu_info_co_args {
	uchar			name;			/* parameter name */
	ushort			value;			/* parameter value */
	uchar			ratio;			/* pulse dialing break ratio, 0..100 */
	uchar			rate;			/* pulse dialing rate, 1..20 */
	uchar			p_map;			/* pulse dialing map, 0..2 */
	timer_val_t		interdigit;		/* pulse dialing interdigit duration */
};

#define	Acu_info_co_				((struct acu_info_co_args FAR *)p_data) ->
#define	Acu_info_co_name			Acu_info_co_ name
#define	Acu_info_co_value			Acu_info_co_ value

#define	Acu_info_co_ratio			Acu_info_co_ ratio
#define	Acu_info_co_rate			Acu_info_co_ rate
#define	Acu_info_co_p_map			Acu_info_co_ p_map
#define	Acu_info_co_inter_digit		Acu_info_co_ interdigit

#define Acu_info_co_size			(Rnd_sizeof (struct acu_info_co_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_INIT_RQ			initialize a 'primitive path'.
 *
 *	Arguments :
 *		Acu_init_rq_priority 	: primitive priority normal/urgent
 *		Acu_init_rq_new_user 	: name of the new user entity on the Network Access
 *		Acu_init_rq_new_sapi 	: name of the new sapi on the Network Access
 *
 *--------------------------------------------------------------------------*/

struct acu_init_rq_args {
	uchar			priority;		/* primitive priority */
	ent_id_t		new_user;		/* new user entity */
	sapi_t			new_sapi;		/* new sapi */
};

#define	Acu_init_rq_				((struct acu_init_rq_args FAR *)p_data) ->
#define	Acu_init_rq_priority		Acu_init_rq_ priority
#define	Acu_init_rq_new_user		Acu_init_rq_ new_user
#define	Acu_init_rq_new_sapi		Acu_init_rq_ new_sapi

#define	Acu_init_rq_size			(Rnd_sizeof (struct acu_init_rq_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_INIT_CO		'primitive path' initialization confirmation
 *
 *	Arguments :
 *		Acu_init_co_ret_code	: return code (OK/NOK)
 *      Acu_init_co_diagnostic	: diagnostic
 *
 *--------------------------------------------------------------------------*/

struct acu_init_co_args {
	struct confirm 		confirm;	/* confirmation structure */
};

#define	Acu_init_co_				((struct acu_init_co_args FAR *)p_data) ->
#define	Acu_init_co_ret_code		Acu_init_co_ confirm.return_code
#define	Acu_init_co_diagnostic		Acu_init_co_ confirm.diagnostic

#define	Acu_init_co_size			(Rnd_sizeof (struct acu_init_co_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_SETPARM_RQ		Set a Automatic Call Unit parameter (Analog ACU only).
 *
 *	Arguments :
 *		Acu_setparm_rq_name		: parameter name (ACU_NRINGS, ACU_TPULSE, etc).
 *		Acu_setparm_rq_value	: parameter value (ushort)
 *
 *--------------------------------------------------------------------------*/

struct acu_setparm_rq_args {
	uchar			name;			/* parameter name */
	ushort			value;			/* parameter value */
	uchar			ratio;			/* pulse dialing break ratio, 0..100 */
	uchar			rate;			/* pulse dialing rate, 1..20 */
	uchar			p_map;			/* pulse dialing map, 0..2 */
	timer_val_t		inter_digit;	/* pulse dialing interdigit duration */
};

#define	Acu_setparm_rq_				((struct acu_setparm_rq_args FAR *)p_data) ->
#define	Acu_setparm_rq_name			Acu_setparm_rq_ name
#define	Acu_setparm_rq_value		Acu_setparm_rq_ value
#define	Acu_setparm_rq_ratio		Acu_setparm_rq_ ratio
#define	Acu_setparm_rq_rate			Acu_setparm_rq_ rate
#define	Acu_setparm_rq_p_map		Acu_setparm_rq_ p_map
#define	Acu_setparm_rq_inter_digit	Acu_setparm_rq_ inter_digit

#define	Acu_setparm_rq_size			(Rnd_sizeof (struct acu_setparm_rq_args))

/*---------------------------------------------------------------------------
 *
 *	ACU_SETPARM_CO		confirm that parameter has been set.
 *
 *  Arguments : none
 *
 *--------------------------------------------------------------------------*/

struct acu_setparm_co_args {
	uchar	dummy;
};

#define	Acu_setparm_co_size			(Rnd_sizeof (struct acu_setparm_co_args))

/*---------------------------------------------------------------------------
 *
 *  ACU_SET_MODE_RQ/CO  request/confirm setting of a particular mode.
 *
 *  (uses the ACU_SAPI_MGT sapi) (ISDN only).
 *
 *  Arguments:
 *
 *  ACU_SET_MODE_RQ:
 *
 *      Acu_set_mode_action = { ACU_RQ_ACTIVATE, ACU_RQ_CLEAR, ACU_RQ_ENQUIRY }
 *
 *      Acu_set_mode_code   = {
 *
 *          - ACU_MODE_ALL_NA_OUT_OF_ORDER: allow/forbid calls on all NAIs.
 *
 *          - ACU_MODE_NA_OUT_OF_ORDER: allow/forbid calls on NAI given by
 *              R_msg_nai.
 *
 *          - ACU_MODE_CALL_OUT_OF_ORDER: allow/forbid calls on NAI/CONN_ID
 *              given by R_msg_nai/R_msg_conn_id.
 *
 *          - ACU_MODE_CHANI_OUT_OF_ORDER: allow/forbid usage of the
 *              B-channel given by Acu_set_mode_data_chani.
 *
 *  ACU_SET_MODE_CO:
 *
 *      Acu_set_mode_action: { ACU_CO_ACK, ACU_CO_REJ }
 *
 *--------------------------------------------------------------------------*/

struct acu_set_mode {
	uchar 	action;
	uchar	code;

	uchar	data_chani;
};

#define	Acu_set_mode_					((struct acu_set_mode FAR *)p_data) ->
#define	Acu_set_mode_action				Acu_set_mode_ action
#define	Acu_set_mode_code				Acu_set_mode_ code
#define	Acu_set_mode_data_chani			Acu_set_mode_ data_chani

#define	Acu_set_mode_size				(Rnd_sizeof (struct acu_set_mode))

/*---------------------------------------------------------------------------
 *
 *	ACU_RS_MODE_RQ/CO		Response mode (global connection). ISDN only.
 *
 *--------------------------------------------------------------------------*/

struct acu_rs_mode {
	uchar	service;					/* select the service */
	uchar	mode;						/* response mode */
	uchar	fac_protocol_discr;			/* user facility protocol discriminator */
	uchar	reserved;					/* for fields alignment */
	char	fac[ACU_MX_SZ_USER_FAC+1];	/* user facility */
	acu_size_t uui_size;				/* uui size */
};

#define	Acu_rs_mode_					((struct acu_rs_mode FAR *)p_data) ->
#define	Acu_rs_mode_service				Acu_rs_mode_ service
#define	Acu_rs_mode_value				Acu_rs_mode_ mode
#define	Acu_rs_mode_fac_protocol_discr	Acu_rs_mode_ fac_protocol_discr
#define	Acu_rs_mode_a_fac				(&Acu_rs_mode_ fac[0])
#define	Acu_rs_mode_uui_size			Acu_rs_mode_ uui_size
#define	Acu_rs_mode_a_uui				((char FAR *)p_data + Acu_rs_mode_size)

#define	Acu_rs_mode_size				(Rnd_sizeof (struct acu_rs_mode))

/*---------------------------------------------------------------------------
 *
 *	ACU_SUSPEND_RQ/CO	Suspend a call. ISDN only.
 *
 *--------------------------------------------------------------------------*/

struct acu_suspend {
	uchar	return_code;				/* return code : OK or NOK */
	uchar	network_cause;				/* Network-provided reject cause value */
	char	call_id[ACU_MX_SZ_CALL_ID+1];	/* call identity */
	struct acu_display_list display;	/* display list */

										/* display strings are just here */
};

#define	Acu_suspend_					((struct acu_suspend FAR *)p_data) ->
#define	Acu_suspend_ret_code			Acu_suspend_ return_code
#define	Acu_suspend_network_cause		Acu_suspend_ network_cause
#define	Acu_suspend_a_call_id	   		Acu_suspend_ call_id

#define	Acu_suspend_display_size		Acu_suspend_x_display_total_size

#define Acu_suspend_x_display_nb		Acu_suspend_ display.nb
#define Acu_suspend_x_display_total_size Acu_suspend_ display.total_size
#define Acu_suspend_x_p_display(i) 		Acu_suspend_ display.p_display[i]
#define Acu_suspend_x_display_type(i)	Acu_suspend_ display.type[i]
#define Acu_suspend_x_display_size(i)	Acu_suspend_ display.size[i]
#define Acu_suspend_a_display_list   	&(Acu_suspend_ display)

#define	Acu_suspend_a_display			((char FAR *)p_data + Acu_suspend_size)

#define	Acu_suspend_size				(Rnd_sizeof (struct acu_suspend))

/*---------------------------------------------------------------------------
 *
 *	ACU_RESUME_RQ/CO	Resume a call. ISDN only.
 *
 *--------------------------------------------------------------------------*/

struct acu_resume {
	uchar	return_code;				/* return code : OK or NOK */
	uchar	network_cause;				/* Network-provided reject cause value */
	uchar	service;					/* service to use for resume_RQ */
	uchar	data_chani;					/* B channel id used (_CO only) */
	uchar	chan_id_excl;				/* chan_id preferred (OFF) or exclusive (ON) */
	char	call_id[ACU_MX_SZ_CALL_ID+1];	/* call identity (_RQ only) */
	struct acu_display_list display;	/* display list */

										/* display strings are just here */
};

#define	Acu_resume_						((struct acu_resume FAR *)p_data) ->
#define	Acu_resume_ret_code				Acu_resume_ return_code
#define	Acu_resume_network_cause		Acu_resume_ network_cause
#define	Acu_resume_service				Acu_resume_ service
#define	Acu_resume_data_chani			Acu_resume_ data_chani
#define Acu_resume_data_chani_excl  	Acu_resume_ chan_id_excl
#define	Acu_resume_a_call_id	    	Acu_resume_ call_id
#define	Acu_resume_display_size			Acu_resume_x_display_total_size

#define Acu_resume_x_display_nb			Acu_resume_ display.nb
#define Acu_resume_x_display_total_size Acu_resume_ display.total_size
#define Acu_resume_x_p_display(i) 		Acu_resume_ display.p_display[i]
#define Acu_resume_x_display_type(i)	Acu_resume_ display.type[i]
#define Acu_resume_x_display_size(i)	Acu_resume_ display.size[i]
#define Acu_resume_a_display_list   	&(Acu_resume_ display)

#define	Acu_resume_a_display			((char FAR *)p_data + Acu_resume_size)

#define	Acu_resume_size					(Rnd_sizeof (struct acu_resume))

/*---------------------------------------------------------------------------
 *
 *	ACU_FACILITY_RQ/IN/CO	Facility. ISDN only.
 *
 *--------------------------------------------------------------------------*/

struct acu_facility {

#	if ACU_PAR_EXTENDED_PRIM == ON
		struct acu_ext_descr ext_descr;	/* extended parameters descriptor */
#	endif

	uchar	service;					/* service if global connection ID */
	uchar 	action;						/* action code */
	uchar	code;						/* facility code */
	uchar	network_cause;				/* Network-provided facility reject cause value */

	char	called_address[ACU_MX_SZ_CALLED_NB + 1 + ACU_MX_SZ_CALLED_SUB_ADD + 1];	/* called address */
	acu_size_t facility_size;			/* size of the facility */
	acu_size_t calling_nb_size;			/* size of the calling nb */
	acu_size_t calling_nb2_size;		/* size of the 2nd calling nb */
	struct acu_display_list display;	/* display list */
	acu_size_t pcs_user_size;			/* size of the PCS-to-User or User-to-PCS information */

	struct voice_supp_service voice;	/* voice supplementary services management */
	uchar	data_chani;					/* B channel to be used */

										/* facility is just here */
										/* then the calling nb */
										/* then the second calling nb */
										/* then the display strings */
										/* and finally the pcs_user */
};

#define	Acu_facility_					((struct acu_facility FAR *)p_data) ->

#if ACU_PAR_EXTENDED_PRIM == ON
#	define Acu_facility_ext_parms_nb	Acu_facility_ ext_descr.nb
#	define Acu_facility_ext_parms_lgth	Acu_facility_ ext_descr.lgth
#	define Acu_facility_a_ext_parms		Acu_facility_ ext_descr.address
#endif

#define	Acu_facility_service			Acu_facility_ service
#define	Acu_facility_action				Acu_facility_ action
#define	Acu_facility_code				Acu_facility_ code
#define	Acu_facility_network_cause		Acu_facility_ network_cause
#define	Acu_facility_a_called_address	(&(Acu_facility_ called_address[0]))
#define	Acu_facility_data_chani			Acu_facility_ data_chani

#define	Acu_facility_facility_size		Acu_facility_ facility_size
#define	Acu_facility_calling_nb_size	Acu_facility_ calling_nb_size
#define	Acu_facility_calling_nb2_size	Acu_facility_ calling_nb2_size
#define	Acu_facility_display_size		Acu_facility_x_display_total_size
#define Acu_facility_pcs_user_size		Acu_facility_ pcs_user_size

#define Acu_facility_x_display_nb		Acu_facility_ display.nb
#define Acu_facility_x_display_total_size Acu_facility_ display.total_size
#define Acu_facility_x_p_display(i) 	Acu_facility_ display.p_display[i]
#define Acu_facility_x_display_type(i)	Acu_facility_ display.type[i]
#define Acu_facility_x_display_size(i)	Acu_facility_ display.size[i]
#define Acu_facility_a_display_list   	&(Acu_facility_ display)

#define	Acu_facility_a_facility			((char FAR *)p_data + Acu_facility_size)
#define	Acu_facility_a_calling_nb		(Acu_facility_a_facility + Acu_facility_facility_size + 1)
#define	Acu_facility_a_calling_nb2		(Acu_facility_a_calling_nb + Acu_facility_calling_nb_size + 1)
#define	Acu_facility_a_display			(Acu_facility_a_calling_nb2 + Acu_facility_calling_nb2_size + 1)
#define Acu_facility_a_pcs_user			(Acu_facility_a_display + Acu_facility_display_size + 1)

#define	Acu_facility_button_type		Acu_facility_ voice.button_type
#define	Acu_facility_module_nb			Acu_facility_ voice.module_nb
#define	Acu_facility_button_nb			Acu_facility_ voice.button_nb
#define	Acu_facility_call_appear		Acu_facility_ voice.call_appear
#define	Acu_facility_switchhook			Acu_facility_ voice.switchhook
#define	Acu_facility_conn_id			Acu_facility_ voice.conn_id

#define Acu_facility_a_first_other		(Acu_facility_a_pcs_user + Acu_facility_pcs_user_size + 1)

#define Acu_facility_a_end_strings		(uchar FAR *)Round((ulong)Acu_facility_a_first_other)

#define	Acu_facility_size				(Rnd_sizeof (struct acu_facility))

/*---------------------------------------------------------------------------
 *
 *	ACU_TEST_RQ/CO	:	(with ACU_SAPI_MGT)
 *
 *--------------------------------------------------------------------------*/

struct acu_test {
	uchar 	action;						/* Action code */
	uchar	code;						/* test code */
	uchar	response_code;				/* response code */
	uchar	b_chan_nb;					/* loop-back B channel nb */
};

#define	Acu_test_						((struct acu_test FAR *)p_data) ->
#define	Acu_test_action					Acu_test_ action
#define	Acu_test_code					Acu_test_ code
#define	Acu_test_response_code			Acu_test_ response_code
#define	Acu_test_b_chan_loop_back_nb	Acu_test_ b_chan_nb

#define	Acu_test_size					(Rnd_sizeof (struct acu_test))

/*---------------------------------------------------------------------------
 *
 *	ACU_INFORMATION_RQ/IN	Facility. ISDN only.
 * Arguments :
 *
 * 	Acu_information_charging		 		: charging
 * 	Acu_information_end_of_three_party		: end-of-three-party
 * 	Acu_information_display_size			: display size
 * 	Acu_information_keypad_size				: keypad size
 *	Acu_information_signal_val				: signal value
 *
 *	ARINC SPECIFIC :
 * 		Acu_information_credit_card_status	: credit card status
 * 		Acu_information_nats_avail			: nats_avail
 * 		Acu_information_satcom_avail		: satcom_avail
 * 		Acu_information_tfts_avail			: tfts_avail
 * 		Acu_information_nats_pos			: nats_position
 * 		Acu_information_satcom_pos			: satcom_position
 * 		Acu_information_tfts_pos			: tfts_position
 *		Acu_information_track_1_size		: size of the track #1
 *		Acu_information_track_2_size        : size of the track #2
 *
 *	US-BRI Network side specific :
 * 		Acu_information_ces					; Connection Endpoint Suffix on which the SPID was received. (_IN)
 * 		Acu_information_tid					: Terminal Endpoint Id (_RQ)
 * 		Acu_information_usid				: User Id (_RQ)
 * 		Acu_information_interpreter			: Interpreter (_RQ)
 *--------------------------------------------------------------------------*/

struct acu_information {
	uchar	end_of_three_party;				/* end of three party : ON or OFF */
	struct acu_charging_info charging_info;	/* charging information */

	struct acu_display_list display;		/* display list */
	acu_size_t keypad_size;					/* keypad size */

	uchar	signal_val;						/* signal value */

#	if ARINC_NETWORKS == ON
		uchar	credit_card_status;			/* credit card status */
		uchar	nats_avail;					/* nats bearer system types available */
		uchar	satcom_avail;				/* satcom bearer system types available */
		uchar	tfts_avail;					/* tfts bearer system types available */
		uchar	nats_position; 				/* queue position of nats */
		uchar	satcom_position;			/* queue position of satcom */
		uchar	tfts_position; 				/* queue position of tfts */
		acu_size_t track_1_size;			/* information of track 1 */
		acu_size_t track_2_size;			/* information of track 2 */
#	endif

#	if _CC_SPID_INFO == ON
    	add_t 	ces;						/* Connection Endpoint Suffix */
		struct 	acu_endpoint_id endpoint_id;/* Endpoint Id information */
		uchar	spid_size;					/* SPID size */
#	endif
											/* display strings are just here */
											/* then the keypad */
											/* then the track 1 info */
											/* then the track 2 info */
											/* then the SPID info */

};

#define	Acu_information_					((struct acu_information FAR *)p_data) ->
#define	Acu_information_end_of_three_party	Acu_information_ end_of_three_party

#define Acu_information_charging_value     	Acu_information_ charging_info.value
#define Acu_information_charging_type     	Acu_information_ charging_info.type
#define Acu_information_charging_period    	Acu_information_ charging_info.period
#define Acu_information_charging_multi     	Acu_information_ charging_info.multi
#define Acu_information_charging	     	Acu_information_charging_value	/* alias */

#define	Acu_information_display_size		Acu_information_x_display_total_size
#define	Acu_information_keypad_size			Acu_information_ keypad_size

#define Acu_information_x_display_nb		Acu_information_ display.nb
#define Acu_information_x_display_total_size Acu_information_ display.total_size
#define Acu_information_x_p_display(i) 		Acu_information_ display.p_display[i]
#define Acu_information_x_display_type(i)	Acu_information_ display.type[i]
#define Acu_information_x_display_size(i)	Acu_information_ display.size[i]
#define Acu_information_a_display_list   	&(Acu_information_ display)
#define	Acu_information_a_display			((char FAR *)p_data + Acu_information_size)
#define	Acu_information_a_keypad			(Acu_information_a_display + Acu_information_display_size + 1)

#define	Acu_information_signal_val			Acu_information_ signal_val

#if ARINC_NETWORKS == ON
#	define	Acu_information_credit_card_status	Acu_information_ credit_card_status
#	define	Acu_information_nats_avail		Acu_information_ nats_avail
#	define	Acu_information_satcom_avail	Acu_information_ satcom_avail
#	define	Acu_information_tfts_avail		Acu_information_ tfts_avail
#	define	Acu_information_nats_pos		Acu_information_ nats_position
#	define	Acu_information_satcom_pos		Acu_information_ satcom_position
#	define	Acu_information_tfts_pos		Acu_information_ tfts_position
#	define	Acu_information_track_1_size	Acu_information_ track_1_size
#	define	Acu_information_track_2_size	Acu_information_ track_2_size

#	define	Acu_information_a_track_1		((char FAR *)p_data       + Acu_information_size)
#	define	Acu_information_a_track_2		(Acu_information_a_track_1+ Acu_information_track_1_size + 1)

#	if _CC_SPID_INFO == ON
#		define	Acu_information_spid_size	Acu_information_ spid_size
#		define	Acu_information_a_spid		(Acu_information_a_track_2 + Acu_information_track_2_size + 1)
#	endif

#else
		/* ARINC_NETWORKS OFF */

#	if _CC_SPID_INFO == ON
#		define	Acu_information_spid_size	Acu_information_ spid_size
#		define	Acu_information_a_spid		(Acu_information_a_keypad + Acu_information_keypad_size + 1)
#	endif

#endif

#if _CC_SPID_INFO == ON
#	define	Acu_information_p_endpoint_id	Acu_information_ endpoint_id
#	define	Acu_information_ces				Acu_information_ ces
#	define	Acu_information_tid				Acu_information_ endpoint_id.tid
#	define	Acu_information_usid	   		Acu_information_ endpoint_id.usid
#	define	Acu_information_interpreter		Acu_information_ endpoint_id.interpreter
#	define	Acu_information_endpoint_action	Acu_information_ endpoint_id.action
#endif

#define	Acu_information_size				(Rnd_sizeof (struct acu_information))

/*---------------------------------------------------------------------------
 *
 *	ACU_ERR_IN	Error indication. ISDN only.
 *
 *	Arguments:
 *
 *		Acu_err_in_cause:      error cause;
 *		Acu_err_in_diagnostic: error diagnostic;
 *
 *		See "DATA TYPES" section for symbolic values used in these fields.
 *
 *--------------------------------------------------------------------------*/

struct acu_err_in {
	uchar	cause;					/* error cause */
	uchar	diagnostic;				/* diagnostic */
};

#define	Acu_err_in_					((struct acu_err_in FAR *)p_data) ->
#define	Acu_err_in_cause			Acu_err_in_ cause
#define	Acu_err_in_diagnostic		Acu_err_in_ diagnostic

#define	Acu_err_in_size				(Rnd_sizeof (struct acu_err_in))

/*--------------------------------------------------------------------------
 *		MISCELLANEOUS DATA TYPES AND CONSTANTS EXCHANGED IN PRIMITIVES
 *-------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------
 *	ACU parameters names (ACU_SETPARM_RQ, ACU_INFO_RQ)
 *	Not used in ISDN interface
 *-------------------------------------------------------------------------*/

#	define	ACU_NRINGS						'a'	/* number of rings before answering (ATS0) */
#	define	ACU_TPULSE						'b'	/* tone or pulse dialing (ATD, ATP) */
#	define	ACU_WB4_BLINDDIAL				'c'	/* delay to wait before blind dialing (AT S6) */
#	define	ACU_CONN_DEL					'd'	/* max delay between the completion of dialing */
												/* and the establishment of the connection (AT S7) */
#	define	ACU_PAUSE_DEL					'e'	/* pause duration (AT S8) */
#	define	ACU_SIGDIGIT_DUR				'f'	/* DTMF duration (AT S11) */
#	define	ACU_NRINGS_DET					'g'	/* Number of rings detected (AT S1) */
#	define	ACU_PULSE_PARM					'h'	/* ACU pulse parameters */
#	define	ACU_DIAL_NO_PROCEED				'i'	/* dial without waiting for proceed tone (AT X0) */
# 	define	ACU_DIAL_PROCEED				'j'	/* dial, waiting for proceed tone (AT X4, etc.) */

/*--------------------------------------------------------------------------
 *	Primitive priority (ACU_CONN_RQ/RS, ACU_CLEAR_RQ/RS, ACU_INIT_RQ)
 *	Not used in ISDN interface
 *-------------------------------------------------------------------------*/

#	define	ACU_PHIGH						'H'	/* urgent */
#   define	ACU_PLOW						'L'	/* normal */

/*--------------------------------------------------------------------------
 *	Incoming or outgoing (tele)service (ACU_CONN_IN/RQ/RS)
 *-------------------------------------------------------------------------*/

#	define	ACU_FAX_SERVICE					'F'	/* call for G3 facsimile service */
#	define	ACU_FAX_4_SERVICE				'4'	/* call for G4 facsimile service */
#	define	ACU_DATA_SERVICE				'D'	/* call for 'data' service */
#	define	ACU_DATA_GCI_SERVICE			ACU_DATA_SERVICE	/* call for 'data' service on GCI bus */
#	define	ACU_DATA_56KBS_SERVICE			'K'	/* call for 'data at 56 KBS' service */
#	define	ACU_RAW_DATA_SERVICE			'!' /* call for 'raw data' service on GCI bus: no MPH_B_INIT_RQ is generated (i.e. no B-channel driver is associated) */
#	define	ACU_DATA_TRANS_SERVICE			'T'	/* call for transparent data service */
#	define	ACU_MODEM_SERVICE				'M'	/* call for modem data service */
#	define	ACU_AUDIO_7_SERVICE				'7'	/* call for 7kHz Audio service */
#	define	ACU_X25_SERVICE					'X'	/* call for X.25 circuit-mode service */
#	define	ACU_X25_PACKET_SERVICE			'P'	/* call for X.25 packet-mode service */
#	define	ACU_VOICE_SERVICE				'V'	/* call for voice service */
#	define	ACU_VOICE_GCI_SERVICE			'G'	/* call for voice service on GCI bus */
#	define	ACU_RAW_TELEPHONY_SERVICE		':' /* call for 'raw telephony' service on GCI bus: no MPH_B_INIT_RQ is generated (i.e. no B-channel driver is associated) */
#	define	ACU_VOICE_TRANS_SERVICE			'W'	/* call for transparent voice service */
#	define	ACU_V110_SERVICE				'1' /* call for V.110 service */
#	define	ACU_V120_SERVICE				'2' /* call for V.120 service */
#	define	ACU_VIDEO_SERVICE				'O' /* call for VIDEO service */
#	define	ACU_TDD_SERVICE					'Q' /* call for TDD service */
#	define	ACU_DATA_H0_SERVICE				'0' /* call for Data using H0  (384kbs)  channel service (PRI only) */
#	define	ACU_DATA_H11_SERVICE			'H' /* call for Data using H11 (1536kbs) channel service (PRI only) */
#	define	ACU_DATA_H12_SERVICE			'I' /* call for Data using H12 (1536kbs) channel service (PRI only) */
#	define	ACU_DATA_MULTIRATE_SERVICE		'R' /* call for Data using Multirate (2..30*64kbs) channel service (PRI only) */
#	define	ACU_DATA_128KBS_SERVICE			'S' /* call for Data using 2*64kbs channel service (BRI only) */

		/* Services for use with 'Physical Relay' process */

#	define	ACU_FAX_RELAY_SERVICE			'f'	/* call for G3 facsimile service */
#	define	ACU_DATA_RELAY_SERVICE			'd'	/* call for 'data' service */
#	define	ACU_DATA_56KBS_RELAY_SERVICE	'k'	/* call for 'data at 56 KBS' service */
#	define	ACU_DATA_TRANS_RELAY_SERVICE	't'	/* call for 'data transparent' service */
#	define	ACU_MODEM_RELAY_SERVICE			'm'	/* call for modem data service */
#	define	ACU_X25_RELAY_SERVICE			'x'	/* call for X.25 circuit-mode service */
#	define	ACU_VOICE_RELAY_SERVICE			'v'	/* call for voice service */
#	define	ACU_VOICE_GCI_RELAY_SERVICE		'g' /* call for voice service on GCI bus */

#	define	ACU_NO_SERVICE					'U'	/* undefined service */

/*--------------------------------------------------------------------------
 *	Calling number presentation (ACU_CONN_RQ/IN, 'calling_nb_pres' field)
 *-------------------------------------------------------------------------*/

#	define	ACU_NB_PRES_ALLOWED				G_2 (0,0)	/* presentation allowed */
#	define	ACU_NB_PRES_RESTRICTED			G_2 (0,1)	/* presentation restricted */
#	define	ACU_NB_PRES_NOT_AVAILABLE		G_2 (1,0)	/* number not available due to interworking */

/*--------------------------------------------------------------------------
 *	Calling(ed) number type (ACU_CONN_RQ/IN, 'calling(ed)_nb_type' field)
 *-------------------------------------------------------------------------*/

#	define	ACU_NB_TYPE_UNKNOWN				G_3 (0,0,0)	/* unknown */
#	define	ACU_NB_TYPE_INTERNATIONAL		G_3 (0,0,1)	/* international number */
#	define	ACU_NB_TYPE_NATIONAL			G_3 (0,1,0)	/* national number */
#	define	ACU_NB_TYPE_NET_SPF				G_3 (0,1,1)	/* network specific number */
#	define	ACU_NB_TYPE_SUBSCRIBER			G_3 (1,0,0)	/* subscriber number */
#	define	ACU_NB_TYPE_LOCAL				G_3 (1,0,0)	/* AT5 - local (directory) number */
#	define	ACU_NB_TYPE_ABBREVIATED			G_3 (1,1,0)	/* abbreviated number */

/*--------------------------------------------------------------------------
 *	Called Number plan (ACU_CONN_RQ/IN, 'called_nb_plan' field)
 *-------------------------------------------------------------------------*/

#	define ACU_NB_PLAN_UNKNOWN				G_4 (0,0,0,0) /* unknown */
#	define ACU_NB_PLAN_ISDN					G_4 (0,0,0,1) /* ISDN/telephony numbering plan (CCITT E.164/E.163) */
#	define ACU_NB_PLAN_TELEPHONE			G_4 (0,0,1,0) /* telephony - not in CEPT */
#	define ACU_NB_PLAN_DATA					G_4 (0,0,1,1) /* data numbering plan (CCITT X.121) */
#	define ACU_NB_PLAN_TELEX				G_4 (0,1,0,0) /* telex numbering plan (CCITT F.69) */
#	define ACU_NB_PLAN_NATIONAL				G_4 (1,0,0,0) /* national standard numbering plan */
#	define ACU_NB_PLAN_PRIVATE				G_4 (1,0,0,1) /* private numbering plan */
#	define ACU_NB_PLAN_RESERVED				G_4 (1,1,1,1) /* reserved for extension */

/*--------------------------------------------------------------------------
 *	Calling number screening indicator (ACU_CONN_RQ/IN, 'calling_nb_screen'
 *  and 'calling_nb2_screen' fields)
 *-------------------------------------------------------------------------*/

#	define ACU_NB_SCREEN_USER_PROVIDED		G_2 (0,0)	/* user-provided, not screened */
#	define ACU_NB_SCREEN_USER_PASSED		G_2 (0,1)	/* user-provided, verified and passed */
#	define ACU_NB_SCREEN_USER_FAILED		G_2 (1,0)	/* user-provided, verified and failed */
#	define ACU_NB_SCREEN_NETWORK_PROVIDED 	G_2 (1,1)	/* network provided */

/*--------------------------------------------------------------------------
 *	Redirected number reason (ACU_CONN_IN/CO, ACU_ALERT_IN, 'redir_nb_reason' field)
 *-------------------------------------------------------------------------*/

#	define ACU_NB_REASON_UNKNOWN							G_4 (0,0,0,0)	/* unknown (VN6) */
#	define ACU_NB_REASON_CALL_FORWARDING_BUSY				G_4 (0,0,0,1)	/* call forwarding busy (VN6) */
#	define ACU_NB_REASON_CALL_FORWARDING_NO_REPLY			G_4 (0,0,1,0)	/* call forwarding no reply (VN6) */
#	define ACU_NB_REASON_CALL_FORWARDING_DTE_OUT			G_4 (1,0,0,1)	/* call forwarding DTE out of order */
#	define ACU_NB_REASON_CALL_FORWARDING_BY_CALLED			G_4 (1,0,1,0)	/* call forwarding by the called equipment (VN6) */
#	define ACU_NB_REASON_CALL_TRANSFER						G_4 (1,1,0,1)	/* call transfer */
#	define ACU_NB_REASON_CALL_PICKUP						G_4 (1,1,1,0)	/* call pickup */
#	define ACU_NB_REASON_CALL_FORWARDING_UNCONDITIONAL		G_4 (1,1,1,1)	/* call forwarding unconditional (VN6) */

/*--------------------------------------------------------------------------
 *	Network-provided clearing causes (ACU_CLEAR_IN/CO, ACU_SUSPEND_RQ/CO,
 *	ACU_RESUME_RQ/CO, ACU_FACILITY_RQ/CO, 'network_cause' field)
 *-------------------------------------------------------------------------*/

#	define	ACU_NETWORK_CAUSE_NIL			0xFF

/*--------------------------------------------------------------------------
 *	Alert codes (ACU_ALERT_IN)
 *-------------------------------------------------------------------------*/

#	define	ACUAC_RING						'R'	/* ring detected */
#	define	ACUAC_REMOTE_ALERTED			'A'	/* Remote equipment alerted */

/*--------------------------------------------------------------------------
 *	Progress events (ACU_PROGRESS_IN)
 *-------------------------------------------------------------------------*/

#	define	ACUEV_DIAL_TONE					'T'	/* Received B-channel id on outgoing calls (Dial tone available in channel, received Setup-Ack or Call-Proceeding message) */
#	define	ACUEV_INTERWORKING				'I'	/* Received Progress message (interworking) */

/*--------------------------------------------------------------------------
 *	Clear codes (ACU_CLEAR_RQ/IN/RS/CO)
 *-------------------------------------------------------------------------*/

#	define	ACURC_BUSY						'b'	/* busy */
#	define	ACURC_NOPROCEED					'p'	/* no proceed indication (dial tone) */
#	define	ACURC_NOANSWER					'a'	/* no answer */
#	define	ACURC_NOAUTOANSWER				't'	/* no auto-answer tone detected */
#	define	ACURC_CONGESTED					'c'	/* GSTN or System is congested */
#	define	ACURC_INCOMING					'i'	/* incoming call detected while try to dial */
#	define	ACURC_NOLINE					'l'	/* (analog) line is seized by another equipment */
												/* (ISDN) Wrong Addressing info, or context already used */
#	define	ACURC_ERRNUM					'e'	/* errored number */
#	define	ACURC_INHNUM					'n'	/* inhibited number */
#	define	ACURC_2MNUM						'2'	/* too many errored/inhibited numbers */
#	define	ACURC_HUNGUP					'h'	/* remote has hung up or incident on connection */
#	define	ACURC_NETWORK_ERROR				'N'	/* (ISDN) network disconnected us */
#	define	ACURC_TIMEOUT					'T'	/* time-out error */
#	define	ACURC_BAD_SERVICE				'S'	/* Bad Service-id in ACU_CONN_RQ/RS */
#	define	ACURC_INTERNAL					'I'	/* other internal error */

	/*
	 *	The following codes are never sent in an ACU_CLEAR_xx message
	 */

#	define	ACURC_OK						0	/* No error */
#	define	ACURC_BL_TIMEOUT				1	/* BL time-out error */
#	define	ACURC_IN_CALL					2	/* BL error, still in call */
#	define	ACURC_CLEAR_RQ					3	/* User entity requested CLEAR */

/*--------------------------------------------------------------------------
 *	Dialing modes
 *-------------------------------------------------------------------------*/

#	define	ACU_PULSE_DIAL					'P'	/* loop disconnect pulse dialing */
#	define	ACU_TONE_DIAL					'T'	/* DTMF tone dialing */

/*--------------------------------------------------------------------------
 * 	Exchange time codes (not used)
 *-------------------------------------------------------------------------*/

#	define	UUI_ALERT						'a'	/* to transmit at ALERT time */
#	define	UUI_CLEAR						'b'	/* to transmit at CLEAR time */
#	define	UUI_USER_INFORMATION    		'c'	/* immediatly in a user information message */

/*--------------------------------------------------------------------------
 *	Response mode codes (ACU_RS_MODE_RQ/CO)
 *-------------------------------------------------------------------------*/

#	define RS_MODE_ALERT					'a'	/* ALERT   requested on incoming call */
#	define RS_MODE_CONNECT					'b'	/* CONNECT requested on incoming call */
#	define RS_MODE_CLEAR					'c'	/* CLEAR   requested on incoming call */

/*--------------------------------------------------------------------------
 *	Facility codes (ACU_FACILITY_RQ/IN/CO)
 *-------------------------------------------------------------------------*/

#	define ACU_FAC_CALL_FORWARDING			21	/* premise transfer */
#	define ACU_FAC_CALL_DEFLECTION			22	/* terminal transfer */
#	define ACU_FAC_CHARGING					23	/* charging */
#	define ACU_FAC_CHARGING_TOTAL			24	/* charging total cost */
#	define ACU_FAC_HOLD						25	/* call hold */
#	define ACU_FAC_RETRIEVE					26	/* call retrieve */
#	define ACU_FAC_ALTERNATE				27	/* to and from facility */
#	define ACU_FAC_TRF						28	/* transfer */
#	define ACU_FAC_THREE_PARTY				29	/* conferencing */
#	define ACU_FAC_MALICIOUS_CALL_ID		32	/* malicious call identification */

#	define ACU_FAC_RECALL					50	/* Recall facility (ETSI) */

#	define ACU_FAC_TRANSPARENT				100	/* transparent facility for CC&NS */

#	define ACU_FAC_CALL_APPEAR				200	/* Call appearence request */
#	define ACU_FAC_FEATURE_ACT				201	/* Feature activation request */
#	define ACU_FAC_DROP						202	/* Drop call */

/*--------------------------------------------------------------------------
 *	Action codes (ACU_FACILITY_RQ/IN/CO, ACU_TEST_RQ/CO, ACU_SET_MODE_RQ/CO)
 *-------------------------------------------------------------------------*/

#	define ACU_RQ_ACTIVATE					'A'	/* activate or register action */
#	define ACU_RQ_CLEAR						'C'	/* deactivate or clear action */
#	define ACU_RQ_ENQUIRY					'E'	/* enquiry action */

#	define ACU_IN_TX						't'	/* transmission */

#	define ACU_CO_ACK						'a'	/* acknowledgement */
#	define ACU_CO_REJ						'r'	/* reject */

/*--------------------------------------------------------------------------
 *	Test codes (ACU_TEST_RQ/CO)
 *-------------------------------------------------------------------------*/

#	define ACU_TEST_B_CHAN_LOOP_BACK		'L'	/* loop back B channel */

/*--------------------------------------------------------------------------
 *	ACU_SET_MODE_RQ/CO (codes)
 *-------------------------------------------------------------------------*/

#	define ACU_MODE_NA_OUT_OF_ORDER			'a' /* allow/forbid calls on NAI given by R_msg_nai. */
#	define ACU_MODE_CALL_OUT_OF_ORDER		'b' /* allow/forbid calls on NAI/CONN_ID given by R_msg_nai/R_msg_conn_id. */
#	define ACU_MODE_CHANI_OUT_OF_ORDER		'c' /* allow/forbid usage of the B-channel given by Acu_set_mode_data_chani. */
#	define ACU_MODE_ALL_NA_OUT_OF_ORDER		'd' /* allow/forbid calls on all NAIs. */

/*--------------------------------------------------------------------------
 *	ACU_ERR_IN cause codes
 *-------------------------------------------------------------------------*/

#	define ACUER_PRIMITIVE_CODE				'a'	/* unknown primitive code */
#	define ACUER_PARAM_VAL					'b'	/* invalid parameter */
#	define ACUER_MANDATORY_PARAM_MISSING	'c'	/* mandatory parameter missing */
#	define ACUER_PARAM_TYPE					'd'	/* incorrect parameter type */
#	define ACUER_PARAM_LGTH					'e'	/* incorrect parameter length */
#	define ACUER_UNEXPECTED_PRIMITIVE		'f'	/* unexpected primitive */
#	define ACUER_PRIMITIVE_NOT_IMPLEMENTED 	'j'	/* SSDU primitive not implemented */
#	define ACUER_NO_TIMER_AVAILABLE			'q'	/* no more space to allocate new timer cells */
#	define ACUER_CONGESTION					'm'	/* resource congestion */

/*--------------------------------------------------------------------------
 *	ACU_ERR_IN cause diagnostics
 *-------------------------------------------------------------------------*/

	/*
		For ACUER_PRIMITIVE_CODE
		and ACUER_PRIMITIVE_NOT_IMPLEMENTED
		errors:

		the diagnostic is the ACU primitive code that has generated the error.
	*/

	/*
		For ACUER_PARAM_VAL,
			ACUER_MANDATORY_PARAM_MISSING,
			ACUER_PARAM_TYPE,
		and ACUER_PARAM_LGTH,
		errors:
	*/

#	define ACUERDIAG_CHAN_ID				0x18	/* Chan_id Information */
#	define ACUERDIAG_DISPLAY				0x28	/* Display Information */
#	define ACUERDIAG_KEYPAD					0x2c	/* Keypad Information */
#	define ACUERDIAG_CALLING_NB				0x6c	/* Calling number Information */
#	define ACUERDIAG_CALLING_SUB_ADD		0x6d	/* Calling sub-address Information */
#	define ACUERDIAG_CALLED_NB				0x70	/* Called number Information */
#	define ACUERDIAG_CALLED_SUB_ADD			0x71	/* Called sub-address Information */
#	define ACUERDIAG_UUI					0x7e	/* UUI Information */

	/*
		For ACUER_NO_TIMER_AVAILABLE and ACUER_CONGESTION errors:
		No diagnostic.
	*/

/*--------------------------------------------------------------------------
 *	Button management (voice supplementary services)
 *-------------------------------------------------------------------------*/

		/* Button type */

#define ACU_BUTTON_TYPE_UNKNOWN					0
#define ACU_CALL_APPEAR_BUTTON					1
#define ACU_FEATURE_BUTTON						2
#define ACU_NON_APPLICABLE						3

		/* Module number */

#define ACU_MODULE_0							0
#define ACU_MODULE_1							1
#define ACU_MODULE_2							2
#define ACU_MODULE_3							3
#define ACU_MODULE_4							4
#define ACU_MODULE_5							5
#define ACU_MODULE_6							6
#define ACU_MODULE_7							7

		/* Switchhook */

#define ACU_HOOK_ON								0		/* on-hook */
#define ACU_HOOK_OFF							1		/* off-hook */

/*--------------------------------------------------------------------------
 *	DTMF dialing up/down flag (ACU_DIGIT_RQ/IN)
 *-------------------------------------------------------------------------*/

#define	ACUKEY_DOWN								0x00	/* key down */
#define	ACUKEY_UP								0x01	/* key up */

/*--------------------------------------------------------------------------
 *	Notify description (ACU_CONN_RQ/IN)
 *-------------------------------------------------------------------------*/

#define	ACUNO_DESCRIPTION						0xFF	/* Empty field */
#define	ACUUSER_RESUMED							0x01	/* User resumed */

/*--------------------------------------------------------------------------
 *	SPF facility Id (ACU_CONN_RQ/IN)
 *-------------------------------------------------------------------------*/

#define ACUSPF_FAC_ABSENT						0xff	/* No SPF FAC */
#define ACUSPF_FAC_GES_PRIV_NET_SELECT			0x00	/* GES private network selection */
#define ACUSPF_FAC_GES_SPECIAL_SERVICE			0x01	/* GES special services */
#define ACUSPF_FAC_GES_SELECTION				0x03	/* GES selection */


/*--------------------------------------------------------------------------
 *	Progress description (ACU_CONN_RQ/IN, ACU_ALERT_IN, ACU_PROGRESS_IN)
 *-------------------------------------------------------------------------*/

#define	ACUNO_PROGRESS_DESCR					0xff	/* no progress info to be stored */

#define	ACUPROGRESS_DESCR_NON_END_TO_END_ISDN	0x01	/* call is not end-to-end ISDN, further call progress information may be available */
#define	ACUPROGRESS_DESCR_CALL_RETURNED_ISDN	0x04	/* call has returned to the ISDN */
#define	ACUPROGRESS_DESCR_IN_BAND_NOW			0x08	/* in-band information or appropriate pattern now available */

/*--------------------------------------------------------------------------
 *	Progress location (ACU_CONN_RQ/IN, ACU_ALERT_IN, ACU_PROGRESS_IN)
 *-------------------------------------------------------------------------*/

#define	ACUPROGRESS_LOC_USER					0x00		/* user */
#define	ACUPROGRESS_LOC_PU_REMOTE_USER			0x04		/* public network sering the remote user */
#define	ACUPROGRESS_LOC_PR_REMOTE_USER			0x05		/* private network serving the remote user */
#define	ACUPROGRESS_BEYONG_IWP					0x0a		/* network beyong interworking point */

/*--------------------------------------------------------------------------
 *	Route selection for SATCOM, TFTS and NATS (ACU_CONN_RQ/IN)
 *-------------------------------------------------------------------------*/

	/* NATS */

#define	ACUNATS_REMOVE_USER						0x00		/* remove user from NATS queue */
#define	ACUNATS_REQUEST_Q_USER					0x01		/* Request NATS queue */

	/* SATCOM */

#define	ACUSATCOM_REMOVE_USER					0x00		/* remove user from SATCOM queue */
#define	ACUSATCOM_REQUEST_Q_USER                0x01		/* Request SATCOM queue */

	/* TFTS */

#define	ACUTFTS_REMOVE_USER                    	0x00		/* remove user from TFTS queue */
#define	ACUTFTS_REQUEST_Q_USER                  0x01		/* Request TFTS queue */

/*--------------------------------------------------------------------------------------
 *	Signal values (ACU_ALERT_IN, ACU_CLEAR_RQ/IN, ACU_CONN_RS/CO, ACU_INFORMATION_RQ/IN)
 *-------------------------------------------------------------------------*/

#define ACUDIAL_ON								0x00		/* dial tone on */
#define ACURING_BACK_ON							0x01		/* ring back tone on */
#define ACUNET_CONGEST_ON						0x03		/* network congest tone on */
#define ACUBUSY_ON								0x04		/* busy tone on */
#define ACUTONES_OFF							0x3f		/* tones off */
#define ACUALERTING_OFF							0x4f		/* alerting off */
#define	ACUCREDIT_CARD_TONE_ON					0x40		/* credit card tone ON */
#define	ACUOUT_OF_RANGE_TONE_ON					0x41		/* out of range tone ON */
#define	ACUQUEUING_TONE_ON						0x42		/* queuing tone ON */
#define	ACUAUDIBLE_TONE_ON						0x44		/* audible tone ON */
#define	ACUVISUAL_ALERT_1_ON					0x45		/* visual alert #1 ON */
#define	ACUVISUAL_ALERT_2_ON					0x46		/* visual alert #2 ON */
#define	ACUSATCOM_CALL_NOTIFY					0x47		/* SATCOM call notify */

/*--------------------------------------------------------------------------------------
 *	Credit card status (ACU_INFORMATION_RQ/IN)
 *-------------------------------------------------------------------------*/

#define	ACUCARD_NB_ACCEPTED						0x00		/* credit card number accepted */
#define	ACUCARD_TYPE_INVALID					0x01		/* credit card type invalid */
#define	ACUCARD_NB_INVALID_LUHN_CHECK			0x02		/* credit card number invalid based on Luhn check */
#define	ACUCARD_START_DATE_INVALID				0x03		/* credit card start date invalid */
#define	ACUCARD_EXPIRATION_DATE_INVALID			0x06		/* credit card expiration date invalid */
#define	ACUCARD_VENDOR_RESERVED_1				0x07		/* vendor reserved 1 */
#define	ACUCARD_VENDOR_RESERVED_2				0x08		/* vendor reserved 2 */
#define	ACUCARD_REJECT							0x09		/* credit card reject no specific cause */

/*--------------------------------------------------------------------------------------
 *	Queue information (ACU_INFORMATION_RQ/IN)
 *-------------------------------------------------------------------------*/

#define	ACUNATS_AVAILABLE						0x01		/* available */
#define	ACUNATS_NOT_AVAILABLE					0x00		/* not available */
#define	ACUSATCOM_AVAILABLE						0x01		/* available */
#define	ACUSATCOM_NOT_AVAILABLE					0x00		/* not available */
#define	ACUTFTS_AVAILABLE						0x01		/* available */
#define	ACUTFTS_NOT_AVAILABLE					0x00		/* not available */

#define	ACUNATS_QUEUED							0x01		/* queued */
#define	ACUNATS_NOT_QUEUED						0x00		/* not queued */
#define	ACUSATCOM_QUEUED						0x02		/* queued */
#define	ACUSATCOM_NOT_QUEUED					0x00		/* not queued */
#define	ACUTFTS_QUEUED							0x04		/* queued */
#define	ACUTFTS_NOT_QUEUED						0x00		/* not queued */

/*-------------------------------------------------------------------------
 *	Endpoint Id (ACU_INFORMATION_RQ/IN and ACU_CONN_RQ)
 *------------------------------------------------------------------------*/

#if _CC_SPID_INFO == ON

		/* Action field */

#	define ACU_ACTION_NO_ENDPOINT_ID			0			/* Don't send any Endpoint Id (ACU_CONN_RQ) */
#	define ACU_ACTION_SND_USID					1			/* SPID was OK, send the Endpoint Id info */
#	define ACU_ACTION_NO_SPID_NEGOTIATION		2			/* SPID negotiation is not supported */
#	define ACU_ACTION_INVALID_SPID				3			/* The received SPID is wrong */
#	define ACU_ACTION_PROMPT_INFO				4			/* Need a SPID from the terminal */

		/* Interpreter field */

#	define ACU_INTERPRETER_0					0			/* Terminal is selected if it is assigned the indicated TID and USID value */
#	define ACU_INTERPRETER_1					1			/* Terminal is selected if it is NOT assigned the indicated TID but is assigned the indicated USID value */

#endif

/*-------------------------------------------------------------------------
 *	ACU and CC entities entry point prototypes
 *------------------------------------------------------------------------*/

#if NEW_FCT_STYLE == ON
	uchar acu (struct message FAR *);
	uchar cc  (struct message FAR *);
#else
	uchar acu ();
	uchar cc  ();
#endif

/*-------------------------------------------------------------------------
 *		Simulation routines prototypes
 *------------------------------------------------------------------------*/

#if SIMULATION == ON

#	if NEW_FCT_STYLE == ON

		uchar 	ana_sdu_acu 			(struct message FAR *p_msg);
		uchar	build_sdu_dte_to_acu 	(void);
		uchar	build_sdu_acu_to_dte	(void);

#	else

		uchar 	ana_sdu_acu 			();
		uchar	build_sdu_dte_to_acu 	();
		uchar	build_sdu_acu_to_dte	();

#	endif

#endif

/*------------------------------------------------------------------------*/

#endif

/*EOF*/
