
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 *	filename - cc_int.h
 *
 * $Revision$
 *
 * $Date$
 *
 *	Header implementing the	upper interface of the Call Control entity of the
 *	ISDN_BRICKS package, designed for the provided Call Control responder
 *	example.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef CC_INT
#define CC_INT

#include "cc_par.h"

	/* Check defines to ensure compatibility with previous CC_PAR.H */

#ifndef    CC_TYPE_BRI
#	define CC_TYPE_BRI			ON
#endif

#ifndef    CC_TYPE_PRI
#	define CC_TYPE_PRI			ON
#endif

#ifndef    CC_MULTI_CHAN_CALLS
#	define CC_MULTI_CHAN_CALLS	OFF
#endif

#ifndef    CC_MX_ADD_LOCAL_NB
#	define CC_MX_ADD_LOCAL_NB	0			/* list of additional called number-services associations */
#endif

#ifndef    CC_PAR_CHARGING_INFO
#	define CC_PAR_CHARGING_INFO	ON			/* process charging information */
#endif

#ifndef    CC_PAR_DISPLAY_IE
#	define CC_PAR_DISPLAY_IE	ON			/* process 'Display' Information Element */
#endif

#ifndef    CC_PAR_DATE_TIME
#	define CC_PAR_DATE_TIME		OFF			/* do not process 'Date_time' Information Element */
#endif

#if ACU_INTERFACE == OFF
#	undef  CC_PAR_DATE_TIME
#	define CC_PAR_DATE_TIME		OFF			/* 'Date_time' is only available in ACU interface */
#endif

#ifndef    CC_PAR_KEYPAD_IE
#	define CC_PAR_KEYPAD_IE		OFF			/* do not process 'Keypad' Information Element */
#endif

#ifndef    CC_PAR_MULTIPLE_CALLING_NB
#	define CC_PAR_MULTIPLE_CALLING_NB	OFF	/* do not process multiple 'Calling_nb' Information Elements: only one */
#endif

#ifndef    CC_PAR_REDIR_NB
#	define CC_PAR_REDIR_NB		OFF			/* do not process 'Redir_nb' Information Element */
#endif

	/* CC Parameters integrity checking */

#if (CC_F_VN2 != ON) && (CC_F_VN3 != ON) && (CC_F_VN6 != ON) && (CC_F_ETS != ON) && (CC_F_QSI != ON)  && (CC_F_A11 != ON) && (CC_F_AT5 != ON) && (CC_F_AT4 != ON) && (CC_F_E10 != ON)
#	undef	CC_SPF_FAC
#	define	CC_SPF_FAC			OFF		/* No facilities for other Networks than FT_VN2/3/6, ETSI, QSIG and A11 */
#endif

#if (CC_F_AT5 == ON) || (CC_F_NI2 == ON)  || (CC_F_E10 == ON)
#	define	CC_ATT_HCDT			ON		/* HCDT for ATT_5ESS5/5ESS10 CUSTOM */
#else
#	define	CC_ATT_HCDT			OFF		/* No HCDT for Networks other than ATT_5ESS5 */
#endif

#if (EQUIPMENT == NT2) && (CC_TYPE_BRI == ON) && ((CC_F_DMS == ON) || (CC_F_NI2 == ON) || (CC_F_E10 == ON))
#	define 	_CC_SPID_INFO 		ON
#else
#	define 	_CC_SPID_INFO 		OFF
#endif

/*-------------------------------------------------------------------------*/

	/* Include the CCE interface if the Multi-channel option is used */

#if CC_MULTI_CHAN_CALLS == ON
#	include "cce_int.h"
#endif

/*-------------------------------------------------------------------------*/

			/*
				CC SAPI definition :
				used by the user entities to determine wether
				the CC entity is used as an ISDN Call Control (CC)
				or as an analog Automatic Call Unit (ACU).
			*/

#define CC_SAPI					'C'		/* messages sent or received by CC */

	/* internal CC SAPIs used to determine absolute events */

#define CC_SAPI_X25				'x'		/* messages received from X25 */
#define CC_SAPI_MX25			'X'		/* messages received from MX25 */
#define CC_SAPI_GSTN			'G'		/* messages received from PH_GSTN */

/*-------------------------------------------------------------------------*/

					/* COMMUNICATION MESSAGE CODES */

						/* PRIMITIVE CODES */

#define CC_ALERT_RQ				'A'				/* CC alert request */
#define CC_ALERT_IN				'a'				/* CC alert indication */

#define CC_INIT_RQ				'I'				/* CC set config request */
#define CC_INIT_CO				'i'				/* CC set config confirm */

#define CC_HOOK_OFF_RQ			'H'				/* CC hook off request */
#define CC_HOOK_OFF_CO			'c'				/* CC hook off confirm */

#define CC_HOOK_ON_RQ			'O'				/* CC hook on request */
#define CC_HOOK_ON_IN			'o'				/* CC hook on indication */
#define CC_HOOK_ON_RS			'P'				/* CC hook on response */
#define CC_HOOK_ON_CO			'p'				/* CC hook on confirm */

#define CC_DIAL_RQ				'D'				/* CC dial request */

#define CC_RING_IN				'r'				/* CC ring indication */

#define CC_ASSIGN_CHANNEL_IN	'd'				/* Assign channel indication */

#define CC_INFO_IN				'b'				/* information indication */

#define CC_USER_BUSY_RQ			'U'				/* CC user busy request */
#define CC_USER_BUSY_CO			'u'				/* CC user busy confirm */
#define CC_USER_CLEAR_BUSY_RQ	'V'				/* CC user clear busy request */
#define CC_USER_CLEAR_BUSY_CO	'v'				/* CC user clear busy confirm */

#define CC_ERR_IN				'?'				/* response to an erroneous CC primitive */

/*-------------------------------------------------------------------------*/

					/* Call Control error codes */

#define ERR_CC_INIT				1				/* no init done before dialing */
#define ERR_CC_LINE_BUSY		2				/* the line is busy */
#define ERR_CC_WRONG_LINE		3				/* wrong line id (nai, conn_id, or non existent call) */
#define ERR_CC_CONGESTION		4				/* congestion occurred */
#define ERR_CC_BAD_SERVICE		5				/* requested service is not implemented or erronous */
#define ERR_CC_OVERLAP_SENDING	6				/* overlap sending mode is not implemented : wrong nb of digits in CC_DIAL_RQ */
#define ERR_CC_ADDRESSING		7				/* Addressing error (wrong NAI or CONN_ID, ...) */
#define ERR_CC_PROTOCOL			8				/* Protocol error (message coding) */

/*-------------------------------------------------------------------------*/

			/* Network-specific compilation parameters */

#ifndef CC_MX_SZ_CALLING_NB
#	define	CC_MX_SZ_CALLING_NB			32		/* Maximum size for calling nb */
#endif

#ifndef CC_MX_SZ_CALLING_SUB_ADD
#	define	CC_MX_SZ_CALLING_SUB_ADD	20		/* Maximum size for calling sub address */
#endif

#ifndef CC_MX_SZ_CALLED_NB
#	define	CC_MX_SZ_CALLED_NB      	32		/* Maximum size for called nb */
#endif

#ifndef CC_MX_SZ_CALLED_SUB_ADD
#	define	CC_MX_SZ_CALLED_SUB_ADD		20		/* Maximum size for called sub address */
#endif

#ifndef CC_MX_SZ_UUI
#	define CC_MX_SZ_UUI					128		/* Maximum size for UUI */
#endif

/*-------------------------------------------------------------------------*/

					/* CC_RING_IN information fields */

	struct cc_ring_in {
		uchar	b_chan_id;						/* Channel ID */
		uchar	service_id;						/* Service ID */
		uchar	user_rate;						/* user rate (for V110 and V120 only) */
		uchar	reserved;
		uchar	calling_nb[CC_MX_SZ_CALLING_NB+1];
		uchar	calling_sub_add[CC_MX_SZ_CALLING_SUB_ADD+1];
		uchar	uui[CC_MX_SZ_UUI+1];
	};

		/* access thru p_cc_data pointer */

#	define Cc_ring_in_b_chan_id			((struct cc_ring_in FAR *)p_cc_data)->b_chan_id
#	define Cc_ring_in_service_id		((struct cc_ring_in FAR *)p_cc_data)->service_id
#	define Cc_ring_in_user_rate			((struct cc_ring_in FAR *)p_cc_data)->user_rate
#	define Cc_ring_in_a_calling_nb		((struct cc_ring_in FAR *)p_cc_data)->calling_nb
#	define Cc_ring_in_a_calling_sub_add	((struct cc_ring_in FAR *)p_cc_data)->calling_sub_add
#	define Cc_ring_in_a_uui				((struct cc_ring_in FAR *)p_cc_data)->uui
#	define Cc_ring_in_size				sizeof (struct cc_ring_in)

/*-------------------------------------------------------------------------*/

					/* CC_DIAL_RQ information fields */

	struct cc_dial_rq {
		uchar	service_id;                     /* Service digit */
		uchar	user_rate;						/* user rate (for V110 and V120 only) */
		uchar	called_nb[CC_MX_SZ_CALLED_NB+1];
		uchar	called_sub_add[CC_MX_SZ_CALLED_SUB_ADD+1];
		uchar	calling_nb[CC_MX_SZ_CALLING_NB+1];
		uchar	calling_sub_add[CC_MX_SZ_CALLING_SUB_ADD+1];
		uchar	uui[CC_MX_SZ_UUI+1];
	};

		/* access thru p_cc_data pointer */

#	define Cc_dial_rq_service_id		((struct cc_dial_rq FAR *)p_cc_data)->service_id
#	define Cc_dial_rq_user_rate			((struct cc_dial_rq FAR *)p_cc_data)->user_rate
#	define Cc_dial_rq_a_called_nb		((struct cc_dial_rq FAR *)p_cc_data)->called_nb
#	define Cc_dial_rq_a_called_sub_add	((struct cc_dial_rq FAR *)p_cc_data)->called_sub_add
#	define Cc_dial_rq_a_calling_nb		((struct cc_dial_rq FAR *)p_cc_data)->calling_nb
#	define Cc_dial_rq_a_calling_sub_add	((struct cc_dial_rq FAR *)p_cc_data)->calling_sub_add
#	define Cc_dial_rq_a_uui				((struct cc_dial_rq FAR *)p_cc_data)->uui
#	define Cc_dial_rq_size				sizeof (struct cc_dial_rq)

/*-------------------------------------------------------------------------*/

					/* CC_ALERT_IN information fields */

	struct cc_alert {
		uchar	uui[CC_MX_SZ_UUI+1];
	};

		/* access thru p_cc_data pointer */

#	define Cc_alert_a_uui				((struct cc_alert FAR *)p_cc_data)->uui
#	define Cc_alert_size				sizeof (struct cc_alert)

/*-------------------------------------------------------------------------*/

					/* CC_ASSIGN_CHANNEL_IN information fields */

	struct cc_assign_channel_in {
		uchar	b_chan_id;						/* channel ID */
	};

		/* access thru p_cc_data pointer */

#	define Cc_assign_channel_in_b_chan_id	((struct cc_assign_channel_in FAR *)p_cc_data)->b_chan_id
#	define Cc_assign_channel_in_size		sizeof (struct cc_assign_channel_in)

/*-------------------------------------------------------------------------*/

					/* CC_HOOK_OFF_RQ information fields */

	struct cc_hook_off_rq {
		uchar	uui[CC_MX_SZ_UUI+1];
	};

		/* access thru p_cc_data pointer */

#	define Cc_hook_off_rq_a_uui		((struct cc_hook_off_rq FAR *)p_cc_data)->uui
#	define Cc_hook_off_rq_size		sizeof (struct cc_hook_off_rq)

/*-------------------------------------------------------------------------*/

					/* CC_HOOK_OFF_CO information fields */

	struct cc_hook_off_co {
		uchar	b_chan_id;						/* channel ID */
		uchar	reserved;						/* for fields alignment */
		uchar	uui[CC_MX_SZ_UUI+1];
	};

		/* access thru p_cc_data pointer */

#	define Cc_hook_off_co_b_chan_id	((struct cc_hook_off_co FAR *)p_cc_data)->b_chan_id
#	define Cc_hook_off_co_a_uui		((struct cc_hook_off_co FAR *)p_cc_data)->uui
#	define Cc_hook_off_co_size		sizeof (struct cc_hook_off_co)

/*-------------------------------------------------------------------------*/

					/* CC_HOOK_ON_RQ information fields */

	struct cc_hook_on_rq {
		uchar	uui[CC_MX_SZ_UUI+1];
	};

		/* access thru p_cc_data pointer */

#	define Cc_hook_on_rq_a_uui		((struct cc_hook_on_rq FAR *)p_cc_data)->uui
#	define Cc_hook_on_rq_size		sizeof (struct cc_hook_on_rq)

/*-------------------------------------------------------------------------*/

					/* CC_HOOK_ON_IN information fields */

	struct cc_hook_on_in {
		uchar	cause_class;				/* cause class */
		uchar	cause_val;					/* cause value */
		uchar	uui[CC_MX_SZ_UUI+1];
	};

		/* access thru p_cc_data pointer */

#	define Cc_hook_on_in_cause_class	((struct cc_hook_on_in FAR *)p_cc_data)->cause_class
#	define Cc_hook_on_in_cause_val		((struct cc_hook_on_in FAR *)p_cc_data)->cause_val
#	define Cc_hook_on_in_a_uui			((struct cc_hook_on_in FAR *)p_cc_data)->uui
#	define Cc_hook_on_in_size			sizeof (struct cc_hook_on_in)

/*-------------------------------------------------------------------------*/

					/* CC_HOOK_ON_RS information fields */

	struct cc_hook_on_rs {
		uchar	uui[CC_MX_SZ_UUI+1];
	};

		/* access thru p_cc_data pointer */

#	define Cc_hook_on_rs_a_uui			((struct cc_hook_on_rs FAR *)p_cc_data)->uui
#	define Cc_hook_on_rs_size			sizeof (struct cc_hook_on_rs)

/*-------------------------------------------------------------------------*/

					/* CC_HOOK_ON_CO information fields */

	struct cc_hook_on_co {
		uchar	cause_class;				/* cause class */
		uchar	cause_val;					/* cause value */
	};

		/* access thru p_cc_data pointer */

#	define Cc_hook_on_co_cause_class	((struct cc_hook_on_co FAR *)p_cc_data)->cause_class
#	define Cc_hook_on_co_cause_val		((struct cc_hook_on_co FAR *)p_cc_data)->cause_val
#	define Cc_hook_on_co_size			sizeof (struct cc_hook_on_co)

/*-------------------------------------------------------------------------*/

					/* CC init structure definition */

struct cc_init {

	struct confirm	confirm;					/* confirm structure */

	ent_id_t		new_entity;					/* entity ID */
};

#define Cc_init_ret_code				p_cc_data -> confirm.return_code	/* return code */
#define Cc_init_cause					p_cc_data -> confirm.cause			/* cause */
#define Cc_init_diagnostic				p_cc_data -> confirm.diagnostic		/* diagnostic */

#define Cc_init_new_entity				p_cc_data -> new_entity				/* new entity using the NAI */

/*-------------------------------------------------------------------------*/

				/* CC configuration structure definitions */

					/* available services id's */

#define CC_SERVICE_TELEPHONY			'V'
#define CC_SERVICE_TELEPHONY_GCI		'G'
#define	CC_SERVICE_RAW_TELEPHONY		':' /* call for 'raw telephony' service on GCI bus: no MPH_B_INIT_RQ is generated (i.e. no B-channel driver is associated) */
#define CC_SERVICE_X25					'X'
#define CC_SERVICE_X25_PACKET			'P'
#define CC_SERVICE_FAX_3				'F'
#define CC_SERVICE_FAX_4				'4'
#define CC_SERVICE_DATA_HDLC			'D'
#define CC_SERVICE_DATA_GCI				CC_SERVICE_DATA_HDLC
#define	CC_SERVICE_RAW_DATA				'!' /* call for 'raw data' service on GCI bus: no MPH_B_INIT_RQ is generated (i.e. no B-channel driver is associated) */
#define CC_SERVICE_DATA_TRANSPARENT		'T'
#define	CC_SERVICE_DATA_56KBS			'K'
#define	CC_SERVICE_DATA_H0				'0'
#define	CC_SERVICE_DATA_H11				'H'
#define	CC_SERVICE_DATA_H12				'I'
#define	CC_SERVICE_DATA_MULTIRATE		'R'
#define	CC_SERVICE_DATA_128KBS			'S'
#define CC_SERVICE_TRANSPARENT			'W'
#define CC_SERVICE_AUDIO_MODEM			'M'
#define CC_SERVICE_AUDIO_7				'7'
#define CC_SERVICE_V110					'1'
#define CC_SERVICE_V120					'2'
#define CC_SERVICE_VIDEO				'O'
#define CC_SERVICE_TDD					'Q'

#define CC_SERVICE_TELEPHONY_RELAY		'v'
#define CC_SERVICE_TELEPHONY_GCI_RELAY	'g'
#define CC_SERVICE_X25_RELAY			'x'
#define CC_SERVICE_FAX_3_RELAY			'f'
#define CC_SERVICE_DATA_HDLC_RELAY		'd'
#define CC_SERVICE_DATA_TRANS_RELAY		't'
#define	CC_SERVICE_DATA_56KBS_RELAY		'k'
#define CC_SERVICE_TRANSPARENT_RELAY	'r'
#define CC_SERVICE_AUDIO_MODEM_RELAY	'm'

#ifndef CC_MX_SERVICES
#	define CC_MX_SERVICES				21		/* maximum number of services */
#endif

#define CC_SERVICE_NIL					'U'

	/* Configuration error causes */

#define CC_CFG_OK						0	/* no error ! */
#define CC_CFG_ERR_NAI					1	/* Wrong NAI */
#define CC_CFG_ERR_SAPI					2	/* Bad SAPI */
#define CC_CFG_ERR_SERVICE				3	/* Bad service id in the services list */
#define CC_CFG_ERR_EMPTY_SERVICE_LIST	4	/* empty services list */
#define CC_CFG_ERR_MEMORY_FULL			5	/* not enough VL storage for context allocation */
#define CC_CFG_ERR_NA_OPERATOR			10	/* cc_check_network (): All Nai must have the same OPERATOR value */
#define CC_CFG_ERR_OP_NOT_COMPILED		11	/* cc_get_net_idx (): OPERATOR was not compiled */
#define CC_CFG_ERR_TOO_MANY_OP			12	/* cc_get_net_idx (): too many different operators for NETWORK_NB definition */
#define CC_CFG_ERR_PROFILE_ID_NOT_FOUND	20	/* profile id not found in the list */
#define CC_CFG_ERR_PROFILE_ID_EXISTS	21	/* profile id already exists */
#define CC_CFG_ERR_PROFILE_ID_RANGE		22	/* profile id not in range */

		/* CC configuration structure */

struct cc_config {

	struct	confirm	cc_confirm;					/* config confirmation structure */

#	if (CC_PROFILE_CONFIG == ON) || (CC_MULTI_CHAN_CALLS == ON)

		struct	{
			uchar	config_type;				/* Type of CC configuration structure */
		} config_type_list;

#	endif

	uchar 			na_nb;						/* number of network access */

	struct cc_config_na {
		nai_t		nai;						/* NAI */
		ent_id_t	ent_user;					/* user entity used for incoming calls */
		sapi_t      sapi_user;					/* SAPI used for incoming calls */
		uchar 		nb_calls;					/* number of call contexts */
		ushort		in_calls_behaviour;			/* Incoming calls behaviour */
		uchar		local_nb[CC_MX_SZ_CALLED_NB+1];/* local nb for address filtering */
		uchar		local_sub_add[CC_MX_SZ_CALLED_SUB_ADD+1]; /* local sub address for sub address filtering */
		uchar		calling_nb[CC_MX_SZ_CALLING_NB+1];/* calling nb for outgoing calls */
		uchar		calling_sub_add[CC_MX_SZ_CALLING_SUB_ADD+1]; /* caling sub address for outgoing calls */

		uchar		uui_recognition;			/* UUI recognition flag for CC interface */

		uchar		cc_services_list[CC_MX_SERVICES+1];	/* list of available services (+1 for CC_SERVICE_NIL) */

		uchar		add_local_nb_service_nb;	/* number of following additional called number-services associations */

#		if (CC_MX_ADD_LOCAL_NB > 0)

			struct called_nb_service {
				uchar		local_nb[CC_MX_SZ_CALLED_NB+1];			/* local nb */
				uchar		local_sub_add[CC_MX_SZ_CALLED_SUB_ADD+1];	/* local sub address */
				uchar		cc_services_list[CC_MX_SERVICES+1];		/* list of available services for this number (+1 for CC_SERVICE_NIL) */
				ent_id_t	ns_upper_ent;							/* NS upper entity id for NS_CONN_IN redirection */
				uchar		priority;								/* service list priority (0..254 : Enabled, 255 : Disabled) */
				uchar		b_chan_id;								/* Associated B channel id if needed (0 means 'any channel') */
				uchar		service_list_id;						/* service list id associated with the services list */
				ent_id_t	ent_user;								/* user entity used for incoming calls (if 0, use the general one) */
				sapi_t      sapi_user;								/* SAPI used for incoming calls (if 0, use the general one) */
			} called_nb_service_tab[CC_MX_ADD_LOCAL_NB];			/* list of additional called number-services associations */

#		endif

		ushort		na_country;					/* country for Na operator */
		uchar		na_operator;				/* operator for Na */

		uchar		type;						/* access type (BRI/PRI) */
		uchar		function;					/* functional grouping (FG_TE_NT/FG_NT_TE) */

		ent_id_t	ns_upper_ent;				/* NS upper entity id for NS_CONN_IN redirection */

		uchar		priority;					/* service list priority (0..255) */

		uchar		use_spid;					/* use of SPID */
		nai_t		mph_nai;					/* nai when interfacing physical entity */

		uchar		b_chan_id;					/* Associated B channel id if needed (0 means 'any channel') */

		uchar		service_list_id;			/* service list id associated with the services list */

		ushort		out_calls_behaviour;		/* Outgoing calls behaviour */

		uchar		nb_digits_to_route;			/* nb of digits to route the call */

	} cc_config_na[CC_CONFIG_MX_NA];

	ushort			country;					/* country for config operator */
	uchar			operator;					/* operator (applies when no na_operator */

};

			/* Manipulation macro's thru p_cc_config and p_cc_config_na pointers */

#define Cc_config_ret_code			p_cc_config -> cc_confirm.return_code
#define Cc_config_cause				p_cc_config -> cc_confirm.cause
#define Cc_config_diagnostic		p_cc_config -> cc_confirm.diagnostic

#define Cc_config_type				p_cc_config -> config_type_list.config_type

#define Cc_config_operator			p_cc_config -> operator
#define Cc_config_country			p_cc_config -> country

#define Cc_config_na_nb				p_cc_config -> na_nb					/* number of network access */

#define Cc_config_na_a(xx)			(struct cc_config_na FAR *)&(p_cc_config -> cc_config_na[xx]) /* address of cc_na */

#define Cc_config_nai 				p_cc_config_na -> nai
#define Cc_config_na_type 			p_cc_config_na -> type
#define Cc_config_function			p_cc_config_na -> function
#define Cc_config_ent_user 			p_cc_config_na -> ent_user
#define Cc_config_sapi_user 		p_cc_config_na -> sapi_user
#define Cc_config_call_nb			p_cc_config_na -> nb_calls
#define Cc_config_in_calls_behaviour	p_cc_config_na -> in_calls_behaviour
#define Cc_config_a_calling_nb		p_cc_config_na -> calling_nb
#define Cc_config_a_calling_sub_add	p_cc_config_na -> calling_sub_add
#define Cc_config_uui_recognition	p_cc_config_na -> uui_recognition

#define Cc_config_a_local_nb		p_cc_config_na -> local_nb
#define Cc_config_a_local_sub_add	p_cc_config_na -> local_sub_add
#define Cc_config_service_id(i)		p_cc_config_na -> cc_services_list[i]
#define Cc_config_ns_upper_ent		p_cc_config_na -> ns_upper_ent
#define Cc_config_priority			p_cc_config_na -> priority
#define Cc_config_b_chan_id			p_cc_config_na -> b_chan_id
#define Cc_config_service_list_id	p_cc_config_na -> service_list_id
#define Cc_config_out_calls_behaviour	p_cc_config_na -> out_calls_behaviour
#define Cc_config_nb_digits_to_route	p_cc_config_na -> nb_digits_to_route

#define Cc_config_use_spid			p_cc_config_na -> use_spid
#define Cc_config_mph_nai			p_cc_config_na -> mph_nai

	/*
		Access to additional called_nb-services associations
		thru (struct called_nb_service FAR *)p_cc_called_nb_service.
	*/

#define Cc_config_nb_add_local_nb		p_cc_config_na -> add_local_nb_service_nb
#define Cc_config_a_first_add_local_nb	((struct called_nb_service FAR *)&(p_cc_config_na -> called_nb_service_tab[0]))
#define Cc_config_a_add_local_nb		p_cc_called_nb_service -> local_nb
#define Cc_config_a_add_local_sub_add	p_cc_called_nb_service -> local_sub_add
#define Cc_config_add_service_id(i)		p_cc_called_nb_service -> cc_services_list[i]
#define Cc_config_add_ns_upper_ent		p_cc_called_nb_service -> ns_upper_ent
#define Cc_config_add_priority			p_cc_called_nb_service -> priority
#define Cc_config_add_b_chan_id			p_cc_called_nb_service -> b_chan_id
#define Cc_config_add_service_list_id	p_cc_called_nb_service -> service_list_id
#define Cc_config_add_ent_user			p_cc_called_nb_service -> ent_user
#define Cc_config_add_sapi_user			p_cc_called_nb_service -> sapi_user

#define Cc_config_na_operator		p_cc_config_na -> na_operator
#define Cc_config_na_country		p_cc_config_na -> na_country

			/* CC configuration types definitions */

#	if (CC_PROFILE_CONFIG == ON) || (CC_MULTI_CHAN_CALLS == ON)
#	define CC_CONFIG_TYPE_STANDARD		0		/* standard CC configuration structure (struct cc_config) */
#	define CC_CONFIG_TYPE_PROFILES		1		/* profiles CC configuration structure (struct cc_profile_config) */
#	define CC_CONFIG_TYPE_MULTI_CHAN	2		/* multi-channel calls configuration structure (see cce_int.h) */
#endif

			/* Address and Sub address filtering null constants */

#define CC_LOCAL_NB_NIL				{0}			/* null char table */
#define CC_LOCAL_SUB_ADD_NIL        {0}
#define CC_CALLING_NB_NIL			{0}			/* null char table */
#define CC_CALLING_SUB_ADD_NIL		{0}

	/*
		Service list 'priorities':

		- [0..254]: the list is enabled, 0 is the highest priority.
		- 255: (=CC_PRIORITY_DISABLE) the list is disabled (i.e. ignored).
	*/

#define CC_PRIORITY_DISABLE			255			/* list is disabled (i.e. ignored) */
#define CC_PRIORITY_ENABLE			0			/* list is enabled */

	/*
		Incoming calls behaviour:

		This configuration field is a bit field:

		- CC_SEND_ALERT_IN bit:
			automatic sending of ACU_ALERT_IN after ACU_CONN_IN:
			if this bit is set, then CC generates an ACU_ALERT_IN after
			having sent an ACU_CONN_IN. This message is used to keep
			compatibility with DTE_INT entity.

		- CC_SEND_CALL_PROC_RQ bit:
			automatic sending of NS_CALL_PROC_RQ on incoming calls:
			if this bit is set, then CC sends an NS_CALL_PROC_RQ on an
			incoming call. Otherwise, the application will have to send
			ACU_CALL_PROC_RQ for this (this message is optional anyway).

		- CC_VOICE_ALERT_RQ bit:
			automatic sending of NS_ALERT_RQ on TELEPHONY incoming calls:
			if this bit is set, then CC sends an NS_ALERT_RQ on a TELEPHONY
			incoming call.

		- CC_DATA_ALERT_RQ bit:
			automatic sending of NS_ALERT_RQ on not TELEPHONY incoming calls:
			if this bit is set, then CC sends an NS_ALERT_RQ on a
			NOT TELEPHONY incoming call.

		- CC_VOICE_CONN_RS bit:
			automatic answering on TELEPHONY incoming calls:
			if this bit is set, then CC sends an NS_CONN_RS to NS on
			TELEPHONY incoming calls.

		- CC_DATA_CONN_RS bit:
			automatic answering on NOT TELEPHONY incoming calls:
			if this bit is set, then CC sends an NS_CONN_RS to NS on
			NOT TELEPHONY incoming calls.

		- CC_TRANSPARENT_OVERLAP_RCV bit:
			transparent processing of overlap receiving mode:
			if this bit is set, then CC sends an ACU_CONN_IN to the user
			even if the number is not full (i.e. the 'Sending Complete' IE
			is not present); and CC sends the additional incoming digits
			into ACU_DIGIT_IN messages.
			If this bit is not set, then CC waits for at least
			'nb_digits_to_route' digits (see the configuration structure) to
			come in before sending an ACU_CONN_IN message to the user.
			The additional digits coming into NS_INFO_IN messages are ignored.

		- CC_TRUNCATE_NB bit:
			meaningful only in buffered Overlap Receiving mode.
			If this bit is set, then the called number is truncated to the
			number of digits specified by the 'nb_digits_to_route'
			configuration field.

		- CC_BEHAVIOUR_NIL bit:
			if this bit is set, then CC acts as if none of the previous
			bits where set.

		-* The default value if this field is set to 0 (=OFF) is:
		   (former 'No auto-answer' behaviour)

			(CC_SEND_ALERT_IN | CC_VOICE_ALERT_RQ | CC_DATA_ALERT_RQ)

		-* The default value if this field is set to 1 (=ON) is:
		   (former 'Auto-answer' behaviour)

			(CC_SEND_ALERT_IN | CC_VOICE_ALERT_RQ | CC_DATA_CONN_RS)

	*/

#define CC_SEND_ALERT_IN			0x0002
#define CC_SEND_CALL_PROC_RQ		0x0004
#define CC_DATA_ALERT_RQ			0x0008
#define CC_VOICE_ALERT_RQ			0x0010
#define CC_DATA_CONN_RS				0x0020
#define CC_VOICE_CONN_RS			0x0040
#define CC_TRANSPARENT_OVERLAP_RCV	0x0080
#define CC_TRUNCATE_NB				0x0100
#define CC_BEHAVIOUR_NIL			0x8000

	/*
		Outgoing calls behaviour:

		This configuration field is a bit field:

		- CC_USER_SENDING_COMPLETE bit:
			automatic generation of 'Sending-complete' information element
			in ACU_CONN_RQ:
			if this bit is set, then CC does not generate automatically the
			'Sending-complete' information element: the user application
			must request it in the ACU_CONN_RQ primitive. Otherwise, CC
			will generate it automatically in the ACU_CONN_RQ only.
			This bit does not affect the ACU_DIGIT_RQ primitive (the user
			application must specify explicitly the
			'Acu_digit_rq_sending_complete' field value).

		- CC_SEND_CONN_CO_ON_PROGRESS bit:
			if this bit is set, then CC sends ACU_CONN_CO when it receives
			NS_PROGRESS_IN for a VOICE call; otherwise it waits for NS_CONN_CO
			to send ACU_CONN_CO.

		- CC_SEND_DIGIT_CO_ON_PROGRESS bit:
			if this bit is set, then CC sends ACU_DIGIT_CO before
			ACU_PROGRESS_IN when it receives NS_CALL_PROC_IN without having
			received NS_SETUP_ACK_IN before, otherwise it only sends
			ACU_PROGRESS_IN (default behaviour).

		- CC_BEHAVIOUR_NIL bit:
			if this bit is set, then CC acts as if none of the previous
			bits where set.

		-* The default value if this field is set to 0 (=OFF) is:
		   (former 'send ACU_CONN_CO on PROGRESS' behaviour, with automatic
		   storing of sending complete element)

			(CC_SEND_CONN_CO_ON_PROGRESS)

		-* The default value if this field is set to 1 (=ON) is:
		   (former 'do not send ACU_CONN_CO on PROGRESS' behaviour, with
		   automatic storing of sending complete element)

			(CC_BEHAVIOUR_NIL)

	*/

#define CC_USER_SENDING_COMPLETE		0x0002
#define CC_SEND_CONN_CO_ON_PROGRESS		0x0004
#define CC_SEND_DIGIT_CO_ON_PROGRESS	0x0008

/*-------------------------------------------------------------------------*/

				/* CC profiles configuration structure */

#if CC_PROFILE_CONFIG == ON

struct cc_profile_config {

	struct	confirm	cc_confirm;					/* config confirmation structure */

	struct	{
		uchar	config_type;					/* Type of CC configuration structure */
	} config_type_list;

	uchar			profile_nb;					/* nb of profiles in the structure */

	struct cc_profile_config_list {

		uchar profile_id;						/* profile id */

		uchar service_id;						/* associated service id */

			/* MPH_B_SWITCH_RQ-related parameters */

		struct cc_mph_switch_rq_parms {

			uchar    enable;					/* enable sending of MPH_B_SWITCH_RQ (ON) or not (OFF) */

		} cc_mph_switch_rq_parms;

			/* MPH_B_INIT_RQ-related parameters */

		struct cc_mph_init_rq_parms {

			uchar    enable;					/* enable sending of MPH_B_INIT_RQ (ON) or not (OFF) */
			ent_id_t l2_ent_id;					/* layer 2 entity id */
			ent_id_t l3_ent_id;					/* layer 3 entity id */

		} cc_mph_init_rq_parms;

	} t_cc_profile_config [CC_MX_CONFIG_PROFILES];

};

			/* Manipulation macro's thru p_cc_config and p_cc_config_na pointers */

#define Cc_prof_cfg_ret_code			p_cc_prof_cfg -> cc_confirm.return_code
#define Cc_prof_cfg_cause				p_cc_prof_cfg -> cc_confirm.cause
#define Cc_prof_cfg_diagnostic			p_cc_prof_cfg -> cc_confirm.diagnostic

#define Cc_prof_cfg_type				p_cc_prof_cfg -> config_type_list.config_type

#define Cc_prof_cfg_nb					p_cc_prof_cfg -> profile_nb

	/* access to the profiles descriptions using 'p_cc_prof_cfg_elem' */

#define Cc_prof_cfg_a(xx)				(struct cc_profile_config_list FAR *)&(p_cc_prof_cfg -> t_cc_profile_config[xx])

#define Cc_prof_cfg_profile_id			p_cc_prof_cfg_elem -> profile_id
#define Cc_prof_cfg_service_id			p_cc_prof_cfg_elem -> service_id

#define Cc_prof_cfg_switch_rq_enable	p_cc_prof_cfg_elem -> cc_mph_switch_rq_parms.enable

#define Cc_prof_cfg_init_rq_enable		p_cc_prof_cfg_elem -> cc_mph_init_rq_parms.enable
#define Cc_prof_cfg_init_rq_l2_ent_id	p_cc_prof_cfg_elem -> cc_mph_init_rq_parms.l2_ent_id
#define Cc_prof_cfg_init_rq_l3_ent_id	p_cc_prof_cfg_elem -> cc_mph_init_rq_parms.l3_ent_id

#endif /* CC_PROFILE_CONFIG == ON */

/*-------------------------------------------------------------------------*/

					/* FUNCTION DECLARATION */

#	if NEW_FCT_STYLE == ON
		uchar	cc					(struct message FAR *p_msg);
		void	cc_var_init			(void);
		uchar 	build_sdu_appli_to_cc(void);
		uchar 	build_sdu_sm_to_cc	(void);
		uchar	ana_sdu_cc			(struct message FAR *p_msg);
#	else
		uchar 	cc					();
		void	cc_var_init			();
		uchar 	build_sdu_appli_to_cc();
		uchar 	build_sdu_sm_to_cc	();
		uchar	ana_sdu_cc			();
#	endif

#endif

/*EOF*/
