/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_proc.at4
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		at4_cc_get_chan_id - implements the estraction of the channel
 *			ID given by the network.
 *
 * 		at4_cc_test_address_match - tests if received address/sub-address
 *				matches one of the registered NA addresses.
 *
 *		at4_p_start_val_ns (pr, ie) - pointer to the val_ns start for 'ie' IE.
 *
 *		at4_get_ie (pr, ie) - return PRESENT/ABSENT
 *
 *		at4_isdn_p_str (pr, ie) - return pointer to the string field
 *			of 'ie' IE of 'pr' Primitive
 *
 * 		at4_isdn_lgth_str (pr, ie) - return length of the string field
 *			of 'ie' IE of 'pr' Primitive
 *
 * 		at4_isdn_get_val (pr, ie, field) - return value of the 'field'
 *		field of 'ie' IE of 'pr' Primitive
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_p_start_val_ns -

Usage           uchar at4_p_start_val_ns (pr, ie);

Return value	: pointer to the val_ns start for 'ie' IE.

*--------------------------------------------------------------------------*/

uchar FAR *at4_p_start_val_ns (pr, ie)
	uchar pr;
	uchar ie;
{
	if (ie == IE_CHAN_ID) {

		switch (pr) {

			case NS_CONN_IN :
				return ((uchar FAR *)P_start_val_ns_at4 (conn_in, chan_id));

			case NS_CONN_CO :
				return ((uchar FAR *)P_start_val_ns_at4 (conn_co, chan_id));

			case NS_CALL_PROC_IN :
				return ((uchar FAR *)P_start_val_ns_at4 (call_proc_in, chan_id));

			case NS_ALERT_IN :
				return ((uchar FAR *)P_start_val_ns_at4 (alert_in, chan_id));

			case NS_RESTART_IN :
				return ((uchar FAR *)P_start_val_ns_at4 (restart_in, chan_id));
		}
	}

	return (P_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_get_ie -

Usage           uchar at4_get_ie (pr, ie);

Return value	: PRESENT/ABSENT

*--------------------------------------------------------------------------*/

uchar at4_get_ie (pr, ie)
	uchar pr;
	uchar ie;
{

	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_at4 (conn_in, chan_id));
				case IE_CALLING_NB :
					return (Get_ie_at4 (conn_in, calling_nb));
				case IE_CALLED_NB :
					return (Get_ie_at4 (conn_in, called_nb));
				case IE_UUI :
					return (Get_ie_at4 (conn_in, uui));

#				if CC_PAR_REDIR_NB == ON
					case IE_REDIR_NB :
						return (Get_ie_at4 (conn_in, redir_nb));
#				endif
			}

			break;

		case NS_CONN_CO :

			if (ie == IE_CHAN_ID)		return (Get_ie_at4 (conn_co, chan_id));
			if (ie == IE_UUI)			return (Get_ie_at4 (conn_co, uui));
#			if CC_PAR_REDIR_NB == ON
				if (ie == IE_REDIR_NB)	return (Get_ie_at4 (conn_co, redir_nb));
#			endif
			break;

		case NS_CLEAR_IN :
			if (ie == IE_UUI) return (Get_ie_at4 (clear_in, uui));

			break;

		case NS_CLEAR_CO :

			switch (ie) {

				case IE_CAUSE :
					return (Get_ie_at4 (clear_co, cause));
			}

			break;

		case NS_ALERT_IN :
			if (ie == IE_CHAN_ID) return (Get_ie_at4 (alert_in, chan_id));
			if (ie == IE_UUI)			return (Get_ie_at4 (alert_in, uui));
#			if CC_PAR_REDIR_NB == ON
				if (ie == IE_REDIR_NB) return (Get_ie_at4 (alert_in, redir_nb));
#			endif
			break;

		case NS_CALL_PROC_IN :
			if (ie == IE_CHAN_ID) return (Get_ie_at4 (call_proc_in, chan_id));
			break;

		case NS_RESTART_IN:
			if (ie == IE_CHAN_ID) return (Get_ie_at4 (restart_in, chan_id));
			break;

		case NS_PROGRESS_IN :
			if (ie == IE_CAUSE)			return (Get_ie_at4 (progress_in, cause));
#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_at4 (progress_in, progress_ind));
#		  endif
			break;

	}

	return (ABSENT);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_isdn_p_str -

Usage           uchar at4_isdn_p_str (pr, ie);

Return value	: pointer to the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar FAR *at4_isdn_p_str (pr, ie)
	uchar	pr;
	uchar   ie;
{
	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_UUI:
					return (Isdn_p_str_at4 (conn_in, uui, text));
				case IE_CALLING_NB:
					return (Isdn_p_str_at4 (conn_in, calling_nb, nb));
				case IE_CALLED_NB :
					return (Isdn_p_str_at4 (conn_in, called_nb, nb));
			}

			break;

		case NS_CONN_CO :
			if (ie == IE_UUI)			return (Isdn_p_str_at4 (conn_co, uui, text));
			break;

		case NS_ALERT_IN :
			if (ie == IE_UUI)			return (Isdn_p_str_at4 (alert_in, uui, text));
			break;

		case NS_CLEAR_IN :
			if (ie == IE_UUI)		return (Isdn_p_str_at4 (clear_in, uui, text));
			break;

	}

	return (P_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_isdn_lgth_str -

Usage           uchar at4_isdn_lgth_str (pr, ie);

Return value	: length of the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar at4_isdn_lgth_str (pr, ie)
	uchar	pr;
	uchar   ie;
{
	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_CALLING_NB:
					return (Isdn_lgth_str_at4 (conn_in, calling_nb, nb));
				case IE_CALLED_NB :
					return (Isdn_lgth_str_at4 (conn_in, called_nb, nb));
				case IE_UUI:
					return (Isdn_lgth_str_at4 (conn_in, uui, text));
			}

			break;

		case NS_CONN_CO :
			if (ie == IE_UUI)			return (Isdn_lgth_str_at4 (conn_co, uui, text));
			break;

		case NS_ALERT_IN :
			if (ie == IE_UUI)			return (Isdn_lgth_str_at4 (alert_in, uui, text));
			break;

		case NS_CLEAR_IN :
			if (ie == IE_UUI)	return (Isdn_lgth_str_at4 (clear_in, uui, text));
			break;

	}

	return (NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_isdn_get_val -

Usage           uchar at4_isdn_get_val (pr, ie, field);

Return value	: value of the 'field' field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar at4_isdn_get_val (pr, ie, field)
	uchar pr;
	uchar ie;
	uchar field;
{
	switch (ie) {

		case IE_CAUSE :

			switch (pr) {

				case NS_CLEAR_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_at4 (clear_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_at4 (clear_in,cause,cause_class));
					}

					break;

				case NS_CLEAR_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_at4 (clear_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_at4 (clear_co,cause,cause_class));
					}

					break;

				case NS_PROGRESS_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_at4 (progress_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_at4 (progress_in,cause,cause_class));
					}

					break;
			}

			break;

		case IE_RESTART_IND :

			if ((pr == NS_RESTART_IN) && (field == FLD_RESTART_CLASS)) {
				return (Isdn_get_val_at4 (restart_in, restart_ind, restart_class));
			}

			break;

#	if CC_PAR_PROGRESS_IND_IE == ON
		case IE_PROGRESS_IND :

			switch (pr) {

				case NS_PROGRESS_IN :
                    cc_progress_ind.nb = 0;
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (at4_get_ie (NS_PROGRESS_IN,IE_PROGRESS_IND) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_at4 (progress_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_at4 (progress_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_at4 (progress_in, progress_ind);
                    	cc_progress_ind.nb++;
                    }

					break;
			}

			break;
#	endif

#	if CC_PAR_REDIR_NB == ON /* { */

		case IE_REDIR_NB:

			switch (pr) {

				case NS_CONN_IN :
					cc_redir_nb_pres   = Isdn_get_val_at4 (conn_in, redir_nb, pres);
					cc_redir_nb_type   = Isdn_get_val_at4 (conn_in, redir_nb, nb_type);
					cc_redir_nb_screen = Isdn_get_val_at4 (conn_in, redir_nb, screen_ind);
					cc_redir_nb_reason = Isdn_get_val_at4 (conn_in, redir_nb, reason);
					cc_redir_nb_size   = Isdn_lgth_str_at4(conn_in, redir_nb, nb);
					p_redir_address    = (char FAR *)Isdn_p_str_at4   (conn_in, redir_nb, nb);
					break;

				case NS_ALERT_IN :
					cc_redir_nb_pres   = Isdn_get_val_at4 (alert_in, redir_nb, pres);
					cc_redir_nb_type   = Isdn_get_val_at4 (alert_in, redir_nb, nb_type);
					cc_redir_nb_screen = Isdn_get_val_at4 (alert_in, redir_nb, screen_ind);
					cc_redir_nb_reason = Isdn_get_val_at4 (alert_in, redir_nb, reason);
					cc_redir_nb_size   = Isdn_lgth_str_at4(alert_in, redir_nb, nb);
					p_redir_address    = (char FAR *)Isdn_p_str_at4   (alert_in, redir_nb, nb);
					break;

				case NS_CONN_CO :
					cc_redir_nb_pres   = Isdn_get_val_at4 (conn_co, redir_nb, pres);
					cc_redir_nb_type   = Isdn_get_val_at4 (conn_co, redir_nb, nb_type);
					cc_redir_nb_screen = Isdn_get_val_at4 (conn_co, redir_nb, screen_ind);
					cc_redir_nb_reason = Isdn_get_val_at4 (conn_co, redir_nb, reason);
					cc_redir_nb_size   = Isdn_lgth_str_at4(conn_co, redir_nb, nb);
					p_redir_address    = (char FAR *)Isdn_p_str_at4   (conn_co, redir_nb, nb);
					break;

			}
			break;

#	endif	/* CC_PAR_REDIR_NB == ON } */

		case IE_CALLED_NB:

			switch (pr) {

				case NS_CONN_IN :

					switch (field) {

						case FLD_NB_TYPE:
							return (Isdn_get_val_at4 (conn_in, called_nb, nb_type));

						case FLD_NB_PLAN:
							return (Isdn_get_val_at4 (conn_in, called_nb, plan_id));

					}
					break;

			}
			break;

		case IE_CALLING_NB:

			switch (pr) {

				case NS_CONN_IN :

					switch (field) {

						case FLD_NB_PRES:
							return (Isdn_get_val_at4 (conn_in, calling_nb, pres));

						case FLD_NB_TYPE:
							return (Isdn_get_val_at4 (conn_in, calling_nb, nb_type));

						case FLD_NB_SCREEN:
							return (Isdn_get_val_at4 (conn_in, calling_nb, screen_ind));

					}
					break;

			}
			break;

	}

	return (BYTE_VAL_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_cc_get_chan_id

Description     implements the extraction of the channel
				ID given by the network.

Usage           uchar at4_cc_get_chan_id ();

Return value	: chan_id or NO_CHAN

*--------------------------------------------------------------------------*/

#define	At4_int_type					((P_val_ns_at4(chan_id))p_start_val_ns) -> int_type
#define	At4_bri_selected_channel		((P_val_ns_at4(chan_id))p_start_val_ns) -> chan_sel
#define	At4_channel_pref_excl			((P_val_ns_at4(chan_id))p_start_val_ns) -> pref_excl
#define	At4_pri_nb_map					((P_val_ns_at4(chan_id))p_start_val_ns) -> nb_map
#define	At4_pri_map_lgth				((P_val_ns_at4(chan_id))p_start_val_ns) ->
#define	At4_pri_selected_channel(xx)	((uchar FAR *)p_start_val_ns + Offsetof (val_ns_at4_chan_id, chan_nb))[xx]

uchar at4_cc_get_chan_id (pr, ie)
	uchar pr;
	uchar ie;
{

	uchar FAR *p_start_val_ns;

	p_start_val_ns = at4_p_start_val_ns (pr, ie);

		/*
			If 'chan_sel' is NO_CHAN, return NO_CHAN.

			If 'int_type' field is INT_TYPE_BRI,
				return 'chan_sel' field,	(<=> Basic Rate access)
			else
				return 'chan_nb' field.     (<=> Primary Rate access)
		*/

	if ((p_start_val_ns == P_NIL) || (At4_bri_selected_channel == NO_CHAN)) {
		return (OK);
	}

    	/* read the fields 'Channel selection' and 'Preferred/Exclusive' */

	cc_chan_excl  = At4_channel_pref_excl;
	cc_chan_sel = At4_bri_selected_channel;

#	if CC_TYPE_PRI == ON

			/*
			 * Primary rate.
			 */

		if (At4_pri_nb_map == CHAN_NUMBER) {

				/* channel id is a channel number */

			cc_chan_nb    = 1;
			cc_chan_id[0] = At4_pri_selected_channel (1);

		} else {

				/* channel ids given by a map */

			cc_chani_map_to_list (At4_pri_selected_channel (0),
								  (uchar FAR *)&(At4_pri_selected_channel (1)));
		}

#	endif

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_get_remaining_ie_instance -

Usage           uchar at4_get_remaining_ie_instance (pr, ie);

Return value	: nb of remaining IE instance.

*--------------------------------------------------------------------------*/

uchar at4_get_remaining_ie_instance (pr, ie)
	uchar pr;
	uchar ie;
{

	return (NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_set_to_next_ie_instance -

Usage           uchar at4_set_to_next_ie_instance (pr, ie);

Return value	: set to the next IE's instance.

*--------------------------------------------------------------------------*/

uchar at4_set_to_next_ie_instance(pr, ie)
	uchar pr;
	uchar ie;
{

	return (NIL);

}

/*EOF*/
