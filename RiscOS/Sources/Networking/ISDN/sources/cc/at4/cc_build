
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_build.at4
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		at4_cc_build_to_ns - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *		at4_net_checking_service - determines the requested service from the
 *							   received message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	uchar	at4_build_other_pr			(code_t prim_code, uchar FAR *p_data);
	uchar	at4_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar	at4_build_other_pr			();
	uchar	at4_cc_load_ns_test			();
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			at4_cc_build_to_ns - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar at4_cc_build_to_ns (code_t primitive_code);
							- primitive_code 	= code of the primitive to send,

Return value : 	at4_cc_build_to_ns returns = OK
									   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar at4_cc_build_to_ns (prim_code, p_data)
	code_t		prim_code;		/* primitive code */
	uchar  FAR *p_data;
{
	CONST struct cc_service FAR	*p_cc_service;
	uchar	cc_store_layer_1, cc_store_5b_5c;

		/* Switch according to the primitive to be sent */

	switch (prim_code) {

			/*------------------- CONNECTION REQUEST ---------------------*/

		case  NS_CONN_RQ :
			Isdn_init_at4_ctx_rq_rs			(conn_rq,
											 p_data
											);

			p_cc_service = Cc_call_p_cc_service;

			Isdn_at4_store_bc				(conn_rq,
											 Cc_service_bc_trf_cap,
											 Cc_service_bc_trf_mode,
											 Cc_service_bc_trf_rate,
											 Cc_service_bc_dest_rate,
											 Cc_service_bc_protocol_id_1,
											 Cc_service_bc_protocol_id_2,
											 Cc_service_bc_protocol_id_3
											);

			if (p_calling_address != P_NIL) {

				Isdn_at4_store_calling_nb	(conn_rq,
											 NB_NATIONAL,
											 PLAN_UNKNOWN,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 p_calling_address
											);

			}

			if (p_rq_address != P_NIL) {

				Isdn_at4_store_called_nb	(conn_rq,
											 NB_NATIONAL,
											 cc_called_nb_plan,
											 p_rq_address
											);
			}

			if (cc_store_chan_id == ON) {

#				if CC_TYPE_PRI == ON

					if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

							/* Coding for 1 B-channel */

						Isdn_at4_store_chan_id_NB_PRI(conn_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 cc_chan_id
													);

					} else {

							/* Coding for H0 or MULTIRATE channels */

							/* convert the list into a map */

						cc_chani_list_to_map ();

							/*
								We are only using the last 3 octets of
								the map (a maximum of 24 B-channels).
							*/

						Isdn_at4_store_chan_id_MAP_PRI(conn_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 Cc_service_id == CC_SERVICE_DATA_H0 ? H0_CHAN : Cc_service_id == CC_SERVICE_DATA_H11 ? H11_CHAN : B_CHAN,
													 &cc_chan_map[1],
													 3
													);

					}

#				endif

				if (Cc_service_hlc_teleservice != BYTE_VAL_NIL) {

					Isdn_at4_store_hlc			(conn_rq,
												 CODING_STD_CCITT,
												 Cc_service_hlc_teleservice,
												 BYTE_VAL_NIL
												);
				}

				if (Cc_service_llc_trf_cap != BYTE_VAL_NIL) {
					Isdn_at4_store_llc_1_4		(conn_rq,
												 CODING_STD_CCITT,
												 Cc_service_llc_trf_cap,
												 OUT_BAND_NOT_POSSIBLE,
												 Cc_service_llc_trf_mode,
												 Cc_service_llc_trf_rate,
												 BYTE_VAL_NIL,
												 Cc_service_llc_structure,
												 Cc_service_llc_dest_rate
												);

					cc_store_layer_1 = (Cc_service_llc_protocol_id_1 != BYTE_VAL_NIL);
					cc_store_5b_5c   = cc_store_layer_1 && (Cc_call_stop_bits != BYTE_VAL_NIL);

					Isdn_at4_store_llc_5_7		(Cc_service_llc_protocol_id_1,\
						/* octet 5a */			 Cc_call_syn_asyn,\
												 Cc_service_llc_negotiation,\
												 cc_store_layer_1 ? Cc_call_user_rate     : BYTE_VAL_NIL,\
						/* octet 5b, V110 */	 BYTE_VAL_NIL,	/* inter_rate */\
												 BYTE_VAL_NIL,	/* nic_tx */\
												 BYTE_VAL_NIL,	/* nic_rx */\
												 BYTE_VAL_NIL,	/* fc_tx  */\
												 BYTE_VAL_NIL,	/* fc_rx  */\
						/* octet 5b, V120 */	 cc_store_5b_5c ? HEADER_NOT_INCLUDED     : BYTE_VAL_NIL,	/* hdr    */\
												 cc_store_5b_5c ? MULTI_FRAME_NOT_SUPPORTED: BYTE_VAL_NIL,	/* multiframe */\
												 cc_store_5b_5c ? BIT_TRANSPARENT         : BYTE_VAL_NIL,	/* op_mode */\
												 cc_store_5b_5c ? DEFAULT_LLI             : BYTE_VAL_NIL,	/* lli_nogot */\
												 cc_store_5b_5c ? DEFAULT_ASSIGNEE        : BYTE_VAL_NIL,	/* assign */\
												 cc_store_5b_5c ? LL0                     : BYTE_VAL_NIL,	/* band_negot */\
						/* octet 5c */	 		 cc_store_5b_5c ? Cc_call_stop_bits       : BYTE_VAL_NIL,	/* stop bits */\
												 cc_store_5b_5c ? Cc_call_data_bits       : BYTE_VAL_NIL,	/* data bits */\
												 cc_store_5b_5c ? Cc_call_parity          : BYTE_VAL_NIL,	/* parity */\
						/* octet 5d */			 BYTE_VAL_NIL,	/* duplex */\
												 BYTE_VAL_NIL,	/* modem */\
						/* octet 6 */			 Cc_service_llc_protocol_id_2,\
												 BYTE_VAL_NIL,\
						/* octet 7 */			 Cc_service_llc_protocol_id_3,\
												 BYTE_VAL_NIL
												);

				}
			}

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_at4_ctx_rq_rs			(conn_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {


#				if CC_TYPE_PRI == ON

					if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

								/* Coding for 1 B-channel */

					Isdn_at4_store_chan_id_NB_PRI(conn_rs,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 cc_chan_id
													);

					} else {

							/* Coding for H0 or MULTIRATE channels */

							/* convert the list into a map */

						cc_chani_list_to_map ();

							/*
								We are only using the last 3 octets of
								the map (a maximum of 24 B-channels).
							*/

						Isdn_at4_store_chan_id_MAP_PRI(conn_rs,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 &cc_chan_map[1],
													 3
													);

					}

#				endif

			}

			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_at4_ctx_rq_rs			(clear_rq,
											 p_data
											);

			Isdn_at4_store_cause			(clear_rq,
											 CODING_STD_CCITT,
											 LOCATION_USER,
											 cc_error_class,
											 cc_error_value,
											 A_NIL
											);

			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_at4_ctx_rq_rs			(clear_rs,
											 p_data
											);

			break;

		default :

			if (at4_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}

				/*----------------------------------------*/

uchar at4_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{
	switch (prim_code) {


/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_at4_ctx_rq_rs			(alert_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

#				if CC_TYPE_PRI == ON

					if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

							/* Coding for 1 B-channel */

						Isdn_at4_store_chan_id_NB_PRI(alert_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 cc_chan_id
													);

					} else {

							/* Coding for H0 or MULTIRATE channels */

							/* convert the list into a map */

						cc_chani_list_to_map ();

							/*
								We are only using the last 3 octets of
								the map (a maximum of 24 B-channels).
							*/

						Isdn_at4_store_chan_id_MAP_PRI(alert_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 &cc_chan_map[1],
													 3
													);

					}

#				endif

			}

			break;

/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_at4_ctx_rq_rs			(call_proc_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

#				if CC_TYPE_PRI == ON

					if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

							/* Coding for 1 B-channel */

						Isdn_at4_store_chan_id_NB_PRI(call_proc_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 cc_chan_id
													);

					} else {

							/* Coding for H0 or MULTIRATE channels */

							/* convert the list into a map */

						cc_chani_list_to_map ();

							/*
								We are only using the last 3 octets of
								the map (a maximum of 24 B-channels).
							*/

						Isdn_at4_store_chan_id_MAP_PRI(call_proc_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 &cc_chan_map[1],
													 3
													);

					}

#				endif
			}

			break;

				/*---------------- RESTART_RQ */

#	if CC_RESTART_PROCEDURE == ON /* { */

		case NS_RESTART_RQ :
			Isdn_init_at4_ctx_rq_rs			(restart_rq,
											 p_data
											);

			break;

#	endif /* CC_RESTART_PROCEDURE == ON } */

				/*---------------- RESTART_RS */

#	if CC_RESTART_PROCEDURE == ON /* { */

		case NS_RESTART_RS :
			Isdn_init_at4_ctx_rq_rs			(restart_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

#				if CC_TYPE_PRI == ON

					if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

							/* Coding for 1 B-channel */

						Isdn_at4_store_chan_id_NB_PRI(restart_rs,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 cc_chan_id
													);

					} else {

							/* Coding for H0 or MULTIRATE channels */

							/* convert the list into a map */

						cc_chani_list_to_map ();

							/*
								We are only using the last 3 octets of
								the map (a maximum of 24 B-channels).
							*/

						Isdn_at4_store_chan_id_MAP_PRI(restart_rs,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 BYTE_VAL_NIL,
													 B_CHAN,
													 &cc_chan_map[1],
													 3
													);

					}

#				endif

			}

			Isdn_at4_store_restart_ind		(restart_rs,
											 cc_restart_indicator
											);


			cc_chan_id[0] = NO_CHAN;
			break;

#	endif /* CC_RESTART_PROCEDURE == ON } */

				/*---------------- UNKNOWN primitive ---------------------*/

		default :
			return (NOK);
	}

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			at4_net_checking_service - implements the checking of a received
				call to determine the service requested.

Usage           uchar at4_net_checking_service ();

Return value : 	at4_net_checking_service returns a service code or UNKNOWN_SERVICE.

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar at4_net_checking_service ()
{

		/* Dispatch according to the transfer capability */

	switch (Isdn_get_val_at4 (conn_in, bc, trf_cap)) {

			/* Speech */
			/* Audio 3.1 kHz */

		case TRF_CAP_SPEECH :
		case TRF_CAP_3_1_AUDIO :
			return (CC_SRV_VOICE);

			/* Unrestricted / Restricted */

		case TRF_CAP_UNRESTRICTED :
		case TRF_CAP_RESTRICTED :

				/* Search for multi-channels rates */

			switch (Isdn_get_val_at4 (conn_in, bc, trf_rate)) {

				case TRF_RATE_384KBS :
					return (CC_SRV_DATA_H0);

				case TRF_RATE_1536KBS :
					return (CC_SRV_DATA_H11);

			}

				/* Dispatch according to layer protocol */

			switch (Isdn_get_val_at4 (conn_in, bc, protocol_id_1)) {

					/* DATA FROM 56 KBS */

				case PROTOCOL_ID_1_V110:
					cc_layer_1_info.user_rate = RA_56KBS;
					cc_layer_1_info.syn_asyn  = SYN;
					return (CC_SRV_DATA_56KBS);

				default :

					if (Get_ie_at4 (conn_in, llc) == PRESENT) {

							/* Search for multi-channels rates */

						switch (Isdn_get_val_at4 (conn_in, llc, trf_rate)) {

							case TRF_RATE_384KBS :
								return (CC_SRV_DATA_H0);

							case TRF_RATE_1536KBS :
								return (CC_SRV_DATA_H11);

						}

								/* Dispatch according to layer protocol */

						switch (Isdn_get_val_at4 (conn_in, llc, protocol_id_1)) {

								/* X25 Application */

							case PROTOCOL_ID_1_X31 :
								return (CC_SRV_X25);

							case PROTOCOL_ID_1_V110 :
								cc_layer_1_info.user_rate = Isdn_get_val_at4 (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_at4 (conn_in, llc, syn_asyn);

								if ((cc_layer_1_info.user_rate == RA_56KBS) &&
									(cc_layer_1_info.syn_asyn  == SYN)
								   ) {
									return (CC_SRV_DATA_56KBS);

								} else {

									cc_layer_1_info.stop_bits = Isdn_get_val_at4 (conn_in, llc, stop_bit);
									cc_layer_1_info.data_bits = Isdn_get_val_at4 (conn_in, llc, data_bit);
									cc_layer_1_info.parity    = Isdn_get_val_at4 (conn_in, llc, parity);
									return (CC_SRV_V110);
								}


							case PROTOCOL_ID_1_V120 :
								cc_layer_1_info.user_rate = Isdn_get_val_at4 (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_at4 (conn_in, llc, syn_asyn);
								cc_layer_1_info.stop_bits = Isdn_get_val_at4 (conn_in, llc, stop_bit);
								cc_layer_1_info.data_bits = Isdn_get_val_at4 (conn_in, llc, data_bit);
								cc_layer_1_info.parity    = Isdn_get_val_at4 (conn_in, llc, parity);
								return (CC_SRV_V120);

							case PROTOCOL_ID_1_VIDEO :
								return (CC_SRV_VIDEO);

						}

					}

					return (CC_SRV_DATA);

			}
			break;

		default :
			break;

	}

	return (CC_SRV_NIL);


}

#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar	at4_cc_load_ns_test	(p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/

