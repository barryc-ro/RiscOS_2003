
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_snd.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *			cc_snd_to_ns - implements the sending of a NS_xxx_RQ/RS
 *			primitive to the NS entity.
 *
 *			cc_snd_to_mph - implements the sending of a
 *			message from CC to MPH entity.
 *
 *			cc_retransmit_to_user -  implements the RETRANSMISSION of a
 *			message received with a new primitive code and the SAME DATA.
 *
 *			cc_snd_to_user -  implements the TRANSMISSION of a	message.
 *
 *			cc_alloc_data - implements the allocation of a message or a
 *			buffer according to the data size.
 *
 *			cc_snd_acu_err_in - builds and sends an ACU_ERR_IN to the user.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "cc.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "ctx_ext.h"

#include "ph_int.h"

#if NEW_FCT_STYLE == ON
	void cc_build_to_ns	(code_t primitive_code);
#else
	void cc_build_to_ns	();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			cc_snd_to_ns - implements the sending of a test
							   message from CC to NS entity.

Usage           void cc_snd_to_ns (code_t code);
							- code	 	: primitive code,

Related
functions usage cc_build_to_ns (code);
				void Send_message(p_msg);

Common constants and declarations : services.h

*--------------------------------------------------------------------------*/

uchar cc_snd_to_ns (code)
	code_t		code;		/* primitive code ID */
{
		/* save the requested primitive code */

	if (p_cc_call != P_NIL) {
		Cc_call_last_msg_to_ns     = code;

		if (R_msg_from == Cc_call_ent_user) {
			Cc_call_last_msg_from_user = R_msg_code;
		}
	}

		/* Allocate a new message for sending (p_snd_msg) */

	p_snd_msg = Alloc_msg ();

		/* Allocate a new buffer and initialize the buffer header */

	p_buffer = Alloc_buffer ();

		/* Build the message according to the code and the NETWORK */

	if (Cc_build_to_ns (code, Buffer_a_first_data) != OK) {

		switch (cc_current_sapi_user) {

#			if CC_INTERFACE == ON

				case CC_SAPI :
					Trap (TRAP_CC_BUILD_ERROR, "cc_snd_to_ns");
					return (NOK);
#			endif

#			if ACU_INTERFACE == ON

				case ACU_SAPI :

					if (p_cc_call != P_NIL) {
						cc_snd_acu_err_in (ACUER_PRIMITIVE_NOT_IMPLEMENTED, (uchar)R_msg_code);
						return (NOK);
					}
					break;
#			endif

		}

	}

		/* Send the message to the NS entity */

	Send_message (p_snd_msg); p_snd_msg = P_NIL; p_buffer = P_NIL;
	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			cc_snd_to_mph - implements the sending of a
								message from CC to MPH entity.

Usage           void cc_snd_cmd_to_mph (code);
					- code : primitive code of the message to transmit to MPH entity.

Related
functions usage void Send_message (p_msg);

Common constants and declarations : services.h

*--------------------------------------------------------------------------*/

void cc_snd_to_mph (code)
	code_t	code;		/* primitive code */
{

#if SIMULATION == OFF
	if (Entity_in_system (ENT_MPH) == ON) {
#endif

		S_msg_from	= ENT_CC;			/* from Call Control entity */
		S_msg_to	= ENT_MPH;			/* to Physical Management entity */
		S_msg_nai   = Na_mph_nai;		/* MPH Network access ID */
		S_msg_sapi  = PH_SAPI_B;		/* B-channel SAPI */
		S_msg_chani = PH_CHANI_NIL;		/* No particular channel */

		S_msg_code  = code; 		    /* Command request code */

			/* Transmit the message to MPH entity */

		Send_message (p_snd_msg);

#if SIMULATION == OFF
	} else {

		Free_msg (p_snd_msg);

	}
#endif

	p_snd_msg = P_NIL;

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			cc_retransmit_to_user - implements the RETRANSMISSION of a reveived
								message pointed by p_rcv_msg.

Usage           void cc_retransmit_to_user (code_t pr_id)
						- pr_id : primitive ID.

Related
functions usage void Send_message(p_msg);

Common constants and declarations : services.h

*--------------------------------------------------------------------------*/

void cc_retransmit_to_user (pr_id)
	code_t		pr_id;
{

	R_msg_from	= ENT_CC;
	R_msg_to	= cc_current_ent_user;
	R_msg_code	= pr_id;

	Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			cc_snd_to_user - implements the TRANSMISSION of a
							  message pointed to by p_snd_msg and with a
							  buffer pointed to by p_buffer if necessary.

				IMPORTANT :	  The transmission is done to cc_current_ent_user
							  using cc_current_sapi_user.

Usage           void cc_snd_to_user (code_t pr_id)
						- pr_id 	: primitive ID,

Related
functions usage void Send_message(p_msg);

Common constants and declarations : services.h

*--------------------------------------------------------------------------*/

void cc_snd_to_user (pr_id)
	code_t		pr_id;
{
	S_msg_from		= ENT_CC;
	S_msg_to		= cc_current_ent_user;
	S_msg_code		= pr_id;
	S_msg_nai		= cc_current_nai;
	S_msg_sapi		= cc_current_sapi_user;
	S_msg_conn_id	= cc_current_conn_id;

	S_msg_init_link_buffer;

#	if CC_MULTI_CHAN_CALLS == ON

			/*
				If the message if sent using the ACU SAPIs then
					queue it in the internal queue, so that it is
					processed by cce();
				else
					send it.
			*/

		if (cc_current_sapi_user != CC_SAPI) {
			cc_in_queue (p_snd_msg);

		} else {

			Send_message (p_snd_msg);
		}

#	else

		Send_message (p_snd_msg);

#	endif

	p_snd_msg = P_NIL; p_buffer = P_NIL;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			cc_alloc_data - implements the allocation of a message
				pointed to by p_snd_msg, and of a buffer if the given data
				size needs it. It returns the address of the actual data area.

Usage           uchar FAR *cc_alloc_data (ushort size);
					- size   : size of the data area.

Return 			address of the data area , p_buffer = buffer pointer or P_NIL

Common constants and declarations : services.h

Common objects : message and buffer context.

*--------------------------------------------------------------------------*/

uchar FAR *cc_alloc_data (size)
	ushort	size;
{
	uchar FAR *p_data;

	S_msg_alloc;

	if (size > (ushort)Message_data_lgth) {
		Buffer_alloc;
		S_msg_init_link_buffer;
		Buffer_data_size	= size;
		p_data				= Buffer_a_first_data;

	} else {

		S_msg_data_size		= (uchar)size;
		p_data				= S_msg_a_first_data;
		p_buffer			= P_NIL;
	}

		/* Clear the data area */

	Memset_far ((char FAR *)p_data, 0, size);

	return (p_data);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_snd_acu_err_in

Description     builds and sends an ACU_ERR_IN message to the user.

Usage           void cc_snd_acu_err_in (cause, diag)
					uchar cause: error cause,
					uchar diag : error diagnostic.

Return value    none

*--------------------------------------------------------------------------*/

#if ACU_INTERFACE == ON

void cc_snd_acu_err_in (cause, diag)
	uchar cause;
	uchar diag;
{
	uchar FAR *p_data;

	Acu_alloc_data (Acu_err_in_size);
	Acu_err_in_cause      = cause;
	Acu_err_in_diagnostic = diag;

	cc_snd_to_user (ACU_ERR_IN);
}

#endif

/*EOF*/
