
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_rcv.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		cc_rcv - implements the processing of a message addressed to
 *				 the Call Control entity.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "cc.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "cc_ie.h"
#include "ctx_ext.h"

#include "cc_undef.h"
#include "ns_mac.h"
#include "cc_undef.h"	/* restore ns_par.h flags */

	Isdn_ctx_ext;

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_rcv - implements the processing of a message adressed
						 to the CC entity.

Usage           uchar cc_rcv (void);

Return value    return code = OK/CONTINUE valid message/continue processing,
							= NOK/STOP    invalid message/end of process.

Common constants and declarations : cc.h

*--------------------------------------------------------------------------*/

uchar cc_rcv ()
{

#	if ACU_INTERFACE == ON
		uchar				FAR *p_data;
#	endif

	uchar					FAR *p_cc_data;
	CONST struct cc_service	FAR *p_cc_service;
	ent_id_t					cc_from_id;				/* origination of received msg */
	signed char					x_local_nb;
	uchar						address_list_found;
	uchar						i;

#	if ACU_INTERFACE == ON
		p_data			=
#	endif

	p_cc_data			= p_data_cc;

	cc_from_id			= R_msg_from;

		/* Get the SAPI that will be used to determine absolute events */

	cc_from_sapi = R_msg_sapi;

	switch (cc_from_id) {

		case ENT_MX25 :
			cc_from_sapi = CC_SAPI_MX25;
			break;

		case ENT_X25 :
			cc_from_sapi = CC_SAPI_X25;
			break;

		case ENT_PH_GSTN :
			cc_from_sapi = CC_SAPI_GSTN;
			break;
	}

	cc_current_nai		= R_msg_nai;
	cc_current_conn_id	=
	cc_other_conn_id	= R_msg_conn_id;
	event_id			= R_msg_code;
	cc_event_id 		= Event (cc_from_sapi, event_id);

	cc_current_ent_user = cc_from_id;	/* default value, used by error */
										/* processing. It will be fixed */
										/* to the actual value when all */
										/* checking are done.			*/

		/* Set no received address/sub-address */

	p_rq_address		= P_NIL;
	p_rq_subaddress 	= P_NIL;

		/* Set no facility */

	cc_spf_facility_action	= NIL;
	cc_facility_size		= 0;
	p_cc_facility			= P_NIL;

		/* Set no UUI */

#	if CC_UUI == ON
		p_cc_uui			= P_NIL;
		cc_uui_size			= 0;
#	endif

		/* Set no CHAN_ID */

	cc_chan_nb = 0;

	for (i = 0; i < CC_NB_CHAN_ID_SENT; i++) {
		cc_chan_id[i]		= NO_CHAN;
	}

	cc_chan_map_lgth = 0;

	for (i = 0; i < 4; i++) {
		cc_chan_map[i]		= 0;
	}

	cc_store_chan_id		= OFF;
	cc_chan_excl            = OFF;
	cc_chan_id_from_user	= OFF;

#	if ACU_PAR_EXTENDED_PRIM == ON
		p_cc_i_ext          = &t_cc_i_ext[0];
		cc_i_ext_lgth       = 0;			/* internal extended data total lgth */
		cc_i_ext_nb         = 0;			/* nb of items in the internal extended data buffer */
#	endif

#	if ACU_PAR_EXT_FAC_ASN1 == ON
		cc_ext_fac_asn1_lgth = 0;
#	endif

#	if (ACU_INTERFACE == ON) && (CC_PAR_DISPLAY_IE == ON)
		p_cc_display_list	= P_NIL;
#	endif

#	if CC_PAR_KEYPAD_IE == ON
		p_cc_keypad			= P_NIL;
#	endif

#	if CC_PAR_CHARGING_INFO == ON
		cc_charging_type	= ACU_BYTE_VAL_NIL;	/* charging type */
		cc_charging_period	= 0;        		/* charging period */
		cc_charging_multi	= 0;				/* charging multiplier */
		cc_charging			= 0L;				/* charging (nb of units) */
#	endif

#	if CC_PAR_SIGNAL_IE == ON
		cc_signal_val		= ACU_BYTE_VAL_NIL;
#	endif

#	if CC_PAR_PROGRESS_IND_IE == ON
		cc_progress_ind.nb         = 0;
		cc_progress_ind.t[0].loc   = ACU_BYTE_VAL_NIL;
		cc_progress_ind.t[0].descr = ACU_BYTE_VAL_NIL;
#	endif

#	if ARINC_NETWORKS == ON

		cc_dtmf_digit		=
		cc_up_down_flag		=
		cc_dtmf_duration	=
		cc_notif_descr		=
		cc_spf_fac_code		=
		cc_spf_fac_id		=
		cc_departure_year	=
		cc_departure_month	=
		cc_departure_day	=
		cc_service_class_id	=
		cc_nats_route_ind	=
		cc_satcom_route_ind	=
		cc_tfts_route_ind	=
		cc_credit_card_status=
		cc_nats_avail		=
		cc_satcom_avail		=
		cc_tfts_avail		=
		cc_nats_pos			=
		cc_satcom_pos		=
		cc_tfts_pos			= ACU_BYTE_VAL_NIL;

		cc_track_1_size		=
		cc_track_2_size		=
		cc_flight_op_id_size=
		cc_flight_number_size = 0;

		p_cc_track_1		=
		p_cc_track_2		=
		p_cc_flight_op_id	=
		p_cc_flight_number	= P_NIL;

#	endif

		cc_spid_size		= 0;

#	if _CC_SPID_INFO == ON
        p_spid				= P_NIL;
        cc_ces				= 0;
        cc_usid				= 0;
        cc_tid				= 0;
        cc_interpreter		= 0;
        cc_endpoint_action	= ACU_ACTION_NO_ENDPOINT_ID;
#	endif

		/* Init call pointer */

	p_cc_call = P_NIL;

#	if CC_ONE_NETWORK != ON

			/* Update CC data Na context pointers */

		if (cc_access_na (cc_current_nai) == OK) {
			cc_build_p_table ();
		}

#	endif

		/*
		 * Don't process the received message if the congestion
		 * is reached.
		 */

	if (Congestion_busy == ON) {

		switch (cc_from_sapi) {

#			if CC_INTERFACE == ON

				case CC_SAPI :
					Cc_set_cc_error (ERR_CC_CONGESTION);
					return (NOK);
#			endif

#			if ACU_INTERFACE == ON

				case ACU_SAPI :
					cc_snd_acu_err_in (ACUER_CONGESTION, 0);
					return (NOK);
#			endif
		}

	}

	switch (cc_from_sapi) {

				/*-------------------------------------------------------*/
				/*                                                       */
				/*             From NS, CC or ACU entities               */
				/*                                                       */
				/*-------------------------------------------------------*/

		case NS_SAPI_SIG :

				/* Initialize the NS interface pointers to read NS messages */

			Isdn_init_ctx_in_co (p_cc_data);

#		  if CC_INTERFACE == ON
			case CC_SAPI     :
#		  endif

#		  if ACU_INTERFACE == ON
			case ACU_SAPI    :
			case ACU_SAPI_MGT :
#		  endif

				/*----------------------------*/
				/*     Management Messages    */
				/*----------------------------*/

#			if ACU_INTERFACE == ON

				if (cc_event_id == Event (ACU_SAPI_MGT, ACU_SET_MODE_RQ)) {
					return (OK);
				}

#			endif

				/*----------------------------*/
				/*        Check for NAI       */
				/*----------------------------*/

			if (cc_access_na (cc_current_nai) == NOK) {

			  context_error :

					/* Wrong nai or conn_id */

				switch (cc_from_sapi) {

					case NS_SAPI_SIG :

							/*
								Nothing to answer to NS_CLEAR_CO : ignore it
								It may be due to a previous NS_CLEAR_RQ sent to abort
								the call because of some call resource overflow :
									example :
									- incoming NS_CONN_IN but no more call context
										available ---> return NS_CLEAR_RQ;
									- NS sends back a NS_CLEAR_CO to confirm the
										call clearing,
									- but we should NOT answer NS_CLEAR_RQ once
										again (same cause : no call context for
										the incoming NS_CLEAR_CO !!!)
										so we just ignore it.
							*/

							/*
								And ignore any other NS message with bad nai
								or conn_id.
							*/

						switch (cc_event_id) {

							case Event (NS_SAPI_SIG, NS_CLEAR_CO):
								break;

							case Event (NS_SAPI_SIG, NS_ERR_IN) :
								return (OK);	/* processed in cc_switch () */

							default:

								if (Cc_na_network == cc_tr6) {
									Cc_set_ns_error (C_C_011, C_V_USER_BUSY);

								} else {

									Cc_set_ns_error (C_C_NORMAL_EVENT, C_V_USER_BUSY_17);
								}

								break;

						}

						return (NOK);

#				  if CC_INTERFACE == ON

					case CC_SAPI :
						Cc_set_cc_error (ERR_CC_WRONG_LINE);
						return (NOK);
#				  endif

#				  if ACU_INTERFACE == ON

					case ACU_SAPI :
						Cc_set_acu_error (ACURC_NOLINE);
						return (NOK);

					default :
						return (NOK);

#				  endif
				}

			}

#			if (ACU_INTERFACE == ON) && (CC_PAR_DISPLAY_IE == ON)

					/*
					 *	For each messages coming from ENT_NS, get display
					 *	information if included.
					 */

				if (cc_from_id == ENT_NS) {
					cc_read_display_from_ns (event_id);
				}

#			endif

			switch (cc_event_id) {

					/*----------------------------*/
					/*     NA-related Messages    */
					/*----------------------------*/

#			  if ACU_INTERFACE == ON

#				if _CC_SPID_INFO == ON
					case Event (ACU_SAPI_MGT, ACU_INFORMATION_RQ) :
#				endif

				case Event (ACU_SAPI_MGT, ACU_FACILITY_RQ) :
				case Event (ACU_SAPI_MGT, ACU_TEST_RQ) :
				case Event (ACU_SAPI, ACU_SETPARM_RQ) :
				case Event (ACU_SAPI, ACU_INIT_RQ) :

#				if CC_RESTART_PROCEDURE == ON
					case Event (NS_SAPI_SIG, NS_RESTART_IN) :
#				endif

					return (OK);

#				if CC_SUPP_SERVICES == ON

					case Event (NS_SAPI_SIG, NS_FAC_CO) :

						if (Sup_services_used == ON) {

								/* NS_FAC_CO related with transparent facility */

							return (OK);
						}

							/* NS_FAC_CO related with a call context */

						goto label_other_messages;

#				endif

#			  endif

#			  if CC_SPF_FAC == ON

				case Event (NS_SAPI_SIG, NS_SPF_FACILITY_CO) :

					if (R_msg_conn_id == CONN_ID_MANAGEMENT) {

						return (OK);

					}

					goto label_other_messages;
#			  endif

#			  if _CC_SPID_INFO == ON

				case Event (NS_SAPI_SIG, NS_INFO_IN) :

					if (R_msg_conn_id == CONN_ID_MANAGEMENT) {
						cc_current_ent_user  = Cc_na_ent_user  (0);
						cc_current_sapi_user = Cc_na_sapi_user (0);

						return (OK);

					}

					goto label_other_messages;

#			  endif

					/*-------------------------------*/
					/*  Call Establishment Messages  */
					/*-------------------------------*/

				case Event (NS_SAPI_SIG, NS_CONN_IN) :

						if (Cc_na_state == STATE_OUT_OF_ORDER) {

							if (Cc_na_network == cc_tr6) {
								Cc_set_ns_error (C_C_011, C_V_USER_BUSY);

							} else {

								Cc_set_ns_error (C_C_NORMAL_EVENT, C_V_USER_BUSY_17);
							}

							return (NOK);

						}

						cc_setup_report_in		= OFF;

						cc_current_sapi_user	= Cc_na_sapi_user (0);

							/* extract the CC service id out of the NS service */

						cc_reset_temp_layer_1_info ();

						cc_interworking			= OFF;

						cc_service_id    = Net_checking_service ();
						cc_service_class = cc_service_to_class (cc_service_id);


						/*----------------------------------------------*/
						/*                                              */
						/*              ADDRESS  FILTERING              */
						/*         AND NS UPPER ENTITY SELECTION        */
						/*                                              */
						/*----------------------------------------------*/


						/*
						   Check the matching of the incoming call's called
						   number and/or sub_address with the local
						   defined called number and/or sub_address.
						*/

							/*---------------------------*/
							/* Get Called-nb information */
							/*---------------------------*/

						cc_read_called_nb_from_ns (NS_CONN_IN);

							/*--------------------------------*/
							/* Get Called-sub_add information */
							/*--------------------------------*/

						cc_read_called_sub_add_from_ns (NS_CONN_IN);

							/*---------------------------*/
							/* Get B chan_id information */
							/*---------------------------*/

						cc_read_chan_id_from_ns (NS_CONN_IN);

						if ((cc_chan_sel == NO_CHAN) &&
							(cc_service_id != CC_SERVICE_X25_PACKET)

#							if EQUIPMENT == NT2
								&& (Cc_na_function != FG_NT_TE)
#							endif
						   ) {

								/* No channel provided : reject the call */

							if (Cc_na_network != cc_tr6) {

								if (Cc_na_network == cc_a17) {
									Cc_set_ns_error (C_C_RESOURCE_UNAVAILABLE, C_V_REQUESTED_CIRCUIT_NOT_AVAILABLE_44);

								} else {

									Cc_set_ns_error (C_C_RESOURCE_UNAVAILABLE, C_V_NO_CIRCUIT_AVAILABLE_34);
								}

								if ((cc_access_conn_id (cc_current_conn_id) == NOK) &&
									(p_cc_call != P_NIL)) {
									Cc_call_ent_user  = Cc_na_ent_user (0);
									Cc_call_sapi_user = cc_current_sapi_user;
									Cc_set_state (STATE_RELEASE_NS);
								}
							}

							return (NOK);
						}

							/*---------------------------*/
							/* Process Called-nb/sub-add */
							/*    or B chan filtering    */
							/*---------------------------*/

							/* Filtering to be done */

						x_local_nb = 0;
						address_list_found = OFF;

					check_next_address_list :

						x_local_nb++;

						if ((x_local_nb = cc_address_filtering (x_local_nb)) == (signed char)-1) {

								/*
									No more address-compatible list :
									reject the call
								*/

							if (address_list_found == ON) {

									/*
										An address-compatible list has been
										found, but it was not service-
										compatible, so reject the call for
										'incompatible service' cause.
									*/

								goto reject_call;
							}

								/*
									Else the address is not compatible at all,
									ignore the call.
								*/

							if (Cc_na_network != cc_tr6) {
								Cc_set_ns_error (C_C_NORMAL_EVENT, C_V_NO_ANSWER_19);

							} else {

								Cc_set_ns_error (C_C_011, C_V_NO_USER_RESPONDING);
							}

							return (NOK);
						}

							/* Found a list with compatible address and B channel */

							/*
								Check if CC is the final destination
								of the call according to the addressing
								information. If not, redirect the incoming
								call to NS, specifying the new destination.
							*/

						if ((Cc_na_ns_upper_ent (x_local_nb) != 0) &&
							(Cc_na_ns_upper_ent (x_local_nb) != R_msg_to)
						   ) {

								/*
									Retransmit the NS_CONN_IN primitive
									to NS with the new upper entity id,
									so that NS will register the new
									entity.
								*/

							R_msg_from	= ENT_CC;
							R_msg_to	= ENT_NS;
							R_msg_code	= NS_REDIR_CONN_RQ;

							R_msg_inf0	= Cc_na_ns_upper_ent (x_local_nb);

							Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;

							return (STOP);
						}

							/*
								Otherwise, continue processing as any
								call establishment primitive.
							*/

						cc_current_ent_user  = Cc_na_ent_user  (x_local_nb);
						cc_current_sapi_user = Cc_na_sapi_user (x_local_nb);
						goto process_establishment_primitive;

#			  if CC_INTERFACE == ON
				case Event (CC_SAPI, CC_DIAL_RQ)     :
				case Event (CC_SAPI, CC_USER_BUSY_RQ):
#			  endif

#			  if ACU_INTERFACE == ON

				case Event (ACU_SAPI, ACU_CONN_RQ)   :

#				  if CC_SUSPEND_RESUME == ON
					case Event (ACU_SAPI, ACU_RESUME_RQ) :
#				  endif

#				  if CC_SPF_FAC == ON
					case Event (ACU_SAPI, ACU_FACILITY_RQ) :
#				  endif

#			  endif

					cc_setup_report_in = OFF;

				process_establishment_primitive:

					if (cc_access_conn_id (cc_current_conn_id) == OK) {

#						if (ACU_INTERFACE == ON) && (CC_SPF_FAC == ON)

								/*
									The ACU_FACILITY_RQ may occur either on
									an allocated or unallocated call context.
								*/

							if (cc_event_id == Event (ACU_SAPI, ACU_FACILITY_RQ)) {
								goto label_other_messages;
							}

#						endif

							/* the line is busy (already allocated to a call) */

#					  	if (ACU_INTERFACE == ON) && (CC_SUSPEND_RESUME == ON)

							if ((Suspend_resume_used == ON) &&
								(cc_event_id == Event (ACU_SAPI, ACU_RESUME_RQ))) {

									/* Reject the resume request */

								Acu_alloc_data (Acu_resume_size);
								Acu_resume_ret_code = NOK;
								cc_snd_to_user (ACU_RESUME_CO);
								return (NOK);
							}

#						endif

							/*
								Reject the outgoing call request :
								(with cause ACURC_INCOMING in case of call
								collision).
							*/

						if (Cc_na_network == cc_tr6) {
							Cc_set_error (cc_from_sapi, C_C_011, C_V_USER_BUSY, ERR_CC_LINE_BUSY, (uchar)(Cc_call_previous_state == STATE_NULL) ? ACURC_INCOMING : ACURC_NOLINE);

						} else {

							Cc_set_error (cc_from_sapi, C_C_NORMAL_EVENT, C_V_USER_BUSY_17, ERR_CC_LINE_BUSY, (uchar)(Cc_call_previous_state == STATE_NULL) ? ACURC_INCOMING : ACURC_NOLINE);
						}

						return (NOK);

					} else {

							/* allocate the call */

						if (p_cc_call == P_NIL) {

								/* No free context available */

							goto context_error;

						}

#						if (ACU_INTERFACE == ON) && (CC_SPF_FAC == ON)

							if (cc_event_id == Event (ACU_SAPI, ACU_FACILITY_RQ)) {
								Cc_call_ent_user	= cc_current_ent_user	= cc_from_id;
								Cc_call_sapi_user	= cc_current_sapi_user	= ACU_SAPI;
								return (OK);
							}

#						endif

						if (cc_event_id == Event (NS_SAPI_SIG, NS_CONN_IN)) {

								/* Set Call's service_list index */

							Cc_call_x_current_service_list = x_local_nb;

						}


							/*----------------------------------------------*/
							/*                                              */
							/*                SERVICE  CHECKING             */
							/*                                              */
							/*----------------------------------------------*/

							/* Check the validity of the service id to be used */

						switch (cc_from_sapi) {

							case NS_SAPI_SIG :

									/*
										If the selected service list is the
										DEFAULT one, then the requested service
										shall belong to the service list. If it
										does not, the call is rejected.

										If the selected service list is NOT the
										DEFAULT one, then the requested service
										may belong to the service list. If it
										does not, then search for the first service
										which belongs to the same class as the
										received Setup.

									*/

								if ((p_cc_service = get_p_cc_service (CC_CHECK_SERVICE, cc_service_id)) == P_NIL) {

										/*
											Service not found in the list :
											look for the first class-compatible
											service in the list.
										*/

									if ((Cc_call_x_current_service_list == X_DEFAULT_SERVICE_LIST) ||
										((p_cc_service = get_p_cc_service (CC_CHECK_CLASS, cc_service_class)) == P_NIL)
									   ) {

											/*
												If the service list is not the default
												one, then try to find another
												address-compatible list
											*/

										if (Cc_call_x_current_service_list != X_DEFAULT_SERVICE_LIST) {

												/*
													Remember that an address-compatible list
													has been found, and try next lists
												*/

											address_list_found = ON;
											goto check_next_address_list;
										}

											/* DEFAULT list, or no service of the same class. */

									reject_call :

										cc_setup_report_in = ON;

										Cc_set_ns_error (Class_incompatible, Val_incompatible);

										if ((cc_from_sapi != NS_SAPI_SIG)

#								  		  if CC_INTERFACE == ON
											|| (cc_current_sapi_user == CC_SAPI)
#										  endif

											) {
													/* No SETUP_REPORT_IN */

												return (NOK);
											}

									} else {

											/* Force to the found class-compatible service id */

										cc_service_class = cc_service_to_class (Cc_service_id);
									}

								}

#								if CC_PAR_SEMI_PERMANENT_CIRCUITS == ON
									Cc_call_semi_permanent_circuit = Net_isdn_get_val (NS_CONN_IN, IE_BC, FLD_ESTABLISH) == EST_PERMANENT ? ON : OFF;
#								endif

								break;

#						  if CC_INTERFACE == ON

							case CC_SAPI :

								if ((p_cc_profile = cc_access_profile ((event_id == CC_DIAL_RQ) ? Cc_dial_rq_service_id : CC_SERVICE_DATA_HDLC)) == P_NIL) {
									Cc_set_cc_error (ERR_CC_BAD_SERVICE);
									return (NOK);
								}

								cc_service_id			= Cc_profile_service_id;
								p_cc_service			= cc_access_service (cc_service_id);

								if (p_cc_service == P_NIL) {
									Cc_set_cc_error  (ERR_CC_BAD_SERVICE);
									return (NOK);
								}

								cc_current_ent_user		= cc_from_id;
								cc_current_sapi_user	= CC_SAPI;
								break;
#						  endif

#						  if ACU_INTERFACE == ON

							case ACU_SAPI :

								switch (cc_event_id) {

									case Event (ACU_SAPI, ACU_CONN_RQ)   :

										if ((p_cc_profile = cc_access_profile (Acu_conn_rq_service)) == P_NIL) {
											Cc_set_acu_error  (ACURC_BAD_SERVICE);
											return (NOK);
										}

										break;

#									if CC_SUSPEND_RESUME == ON

										case Event (ACU_SAPI, ACU_RESUME_RQ) :

											if ((p_cc_profile = cc_access_profile (Acu_resume_service)) == P_NIL) {
												Cc_set_acu_error  (ACURC_BAD_SERVICE);
												return (NOK);
											}

											break;

#									endif

								}

								cc_service_id			= Cc_profile_service_id;
								p_cc_service			= cc_access_service (cc_service_id);

								if (p_cc_service == P_NIL) {
									Cc_set_acu_error  (ACURC_BAD_SERVICE);
									return (NOK);
								}

								cc_current_ent_user		= cc_from_id;
								cc_current_sapi_user	= ACU_SAPI;
								break;

#						  endif

						}

						if (cc_setup_report_in == OFF) {
							Cc_call_p_cc_profile      = p_cc_profile;
							Cc_call_p_cc_service      = p_cc_service;
							Cc_call_service_class	  =	cc_service_to_class (Cc_service_id);
						}

#						if SIMULATION == ON
							pr_cc_service_id ();
#						endif

						Cc_call_ent_user	= cc_current_ent_user;
						Cc_call_sapi_user	= cc_current_sapi_user;
						return (OK);

					}

					/*----------------------------*/
					/*       Other Messages       */
					/*----------------------------*/

				default :

				label_other_messages :

					if (cc_access_conn_id (cc_current_conn_id) != OK) {

							/* Wrong Conn_id */

						goto context_error;

					} else {

							/* adjust current CC variables */

						p_cc_profile			= Cc_call_p_cc_profile;

						cc_current_ent_user		= Cc_call_ent_user;
						cc_current_sapi_user	= Cc_call_sapi_user;
						return (OK);
					}

			}

		case CC_SAPI_MX25 :
		case CC_SAPI_X25  :
			return (OK);

		default :
			return (NOK);
	}

}

/*EOF*/
