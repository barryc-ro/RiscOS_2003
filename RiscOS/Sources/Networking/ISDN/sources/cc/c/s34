
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - s34.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        main - implements the main function of a server composed of
 *		         MNS, NS, and CC entities (Layer 3 and 4 entities).
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "services.h"

#include "cc_int.h"
#include "acu_int.h"
#include "ns_int.h"
#include "dl_int.h"

#if SIMULATION == ON
#	include "simul.h"
#endif

		/* Common */

	Server_common;

		/* Server definition */

CONST struct server_def p_server_def_s34[] = {

	/* entity ID,   entry point, congestion processing, global vars init function */

		{ENT_CC,		cc,				OFF,	OFF,	cc_var_init},
		{ENT_ACU,		cc,				OFF,	OFF},	/* ACU and CC are the same entities */

		{ENT_NS,		ns,				OFF,	OFF,	ns_var_init},
		{ENT_MNS, 		mns,			OFF,	OFF,	mns_var_init},

		{ENT_SM,		sm,				OFF,	OFF,	sm_var_init},

#if SIMULATION == ON
		{ENT_TI,		FCT_NIL,		OFF},
#endif

		{ENT_NIL},
};

		/* Server queue ID */

uint		qid_s34;

#if SIMULATION == ON

		/* Global data */

uint		cc_ana_sdu_decoded = ON;	/* CC: print data area in hex or decoded */
uint		cc_sim_flag        = 0;		/* CC: simulation flag (bit-field) */

uint		ns_pdu_2 		= OFF;		/* NS pdu 1 or 2 */
uint		ns_pr_object 	= OFF;		/* NS print all objects */
uint		ns_pr_state 	= ON;		/* NS print current objects */
uint		ns_pr_dl_sdu_ie = ON;		/* DL print NS IE contained in SDU */
uint		ns_pr_cc_sdu_ie	= ON;		/* NS print CC IE contained in SDU */
uint		ns_t309			= ON;		/* NS timer 309 */

#	if NS_SUPP_SERVICES == ON
		uint ns_pr_sdu_ss	= OFF;		/* NS print Supplementary Services data contained in SDU */
#	endif

		/* Server's specific flags list */

struct server_flag s34_flag_list [] = {
		{'H',		FCT_NIL, &cc_ana_sdu_decoded, "Decode CC SDUs: 0=no(hex), 1=yes, 2=both"},
		{'C',		FCT_NIL, &cc_sim_flag,        "CC: simulation bit-field: |1=generate Display IE, |2=do not generate Facility IE"},

		{'3',		FCT_NIL, &ns_t309,            "T309 option"},
		{'4',		FCT_NIL, &ns_pr_dl_sdu_ie,    "Print IEs in DL-SDU"},
		{'5',		FCT_NIL, &ns_pr_object,       "Print all NS objects"},
		{'6',		FCT_NIL, &ns_pr_state,        "Print NS state info"},
		{'7',		FCT_NIL, &ns_pr_cc_sdu_ie,    "Print IEs in NS-SDU"},
		{'8',		FCT_NIL, &ns_pdu_2,           "NS PDU 2"},
#		if NS_SUPP_SERVICES == ON
			{'9',	FCT_NIL, &ns_pr_sdu_ss,       "Print NS SS SDUs"},
#		endif

		{FLAG_NIL}
};

		/* Server "to" lists */

CONST struct server_simul_to p_sm_to [] = {
		{ENT_SM,	ana_sdu_sm, 		FCT_NIL},
		{ENT_MNS,	ana_sdu_sm, 		FCT_NIL},
		{ENT_CC,	ana_sdu_sm, 		build_sdu_sm_to_cc},
		{ENT_ACU,	ana_sdu_sm, 		build_sdu_sm_to_cc},
		{ENT_NIL},
};


CONST struct server_simul_to p_ti_to [] = {
		{ENT_NS,	ana_sdu_ti_ns, 		FCT_NIL},
		{ENT_NIL},
};


CONST struct server_simul_to p_dl_d_to [] = {
		{ENT_NS,	ana_sdu_dl, 		build_sdu_dl_to_n},
		{ENT_NIL},
};

CONST struct server_simul_to p_ns_to [] = {
		{ENT_DL_D,	ana_sdu_dl, 		FCT_NIL},
		{ENT_MNS,	ana_sdu_mns, 		FCT_NIL},
		{ENT_CC,	ana_sdu_ns, 		FCT_NIL},
		{ENT_ACU,	ana_sdu_ns, 		FCT_NIL},
		{ENT_NIL},
};

CONST struct server_simul_to p_mns_to [] = {
		{ENT_SM,	ana_sdu_sm, 		FCT_NIL},
		{ENT_NS,	ana_sdu_mns, 		FCT_NIL},
		{ENT_NIL},
};

CONST struct server_simul_to p_cc_to [] = {
		{ENT_SM,	ana_sdu_sm, 		FCT_NIL},
		{ENT_NS,	ana_sdu_ns, 		FCT_NIL},
		{ENT_APPLI,	ana_sdu_cc, 		FCT_NIL},
		{ENT_DTE_INT,ana_sdu_cc, 		FCT_NIL},
		{ENT_MPH,	FCT_NIL, 			FCT_NIL},
		{ENT_NIL},
};


CONST struct server_simul_to p_appli_to [] = {
		{ENT_CC,	ana_sdu_cc, 		build_sdu_appli_to_cc},
		{ENT_ACU,	ana_sdu_cc, 		build_sdu_dte_to_acu},
		{ENT_NIL},
};

CONST struct server_simul_to p_dte_to [] = {
		{ENT_CC,	ana_sdu_cc, 		build_sdu_appli_to_cc},
		{ENT_ACU,	ana_sdu_cc, 		build_sdu_dte_to_acu},
		{ENT_NIL},
};


		/* Server "from" list */

CONST struct server_simul_from p_from [] = {
		{ENT_SM,	"System Management",				p_sm_to},
		{ENT_TI,	"Timer Management",					p_ti_to},
		{ENT_MNS,	"Management Network Signalling",	p_mns_to},
		{ENT_NS,	"Network Signalling",				p_ns_to},
		{ENT_DL_D,	"Data Link lap D",					p_dl_d_to},
		{ENT_CC,	"Call Control",						p_cc_to},
		{ENT_ACU,	"ACU Call Control",					p_cc_to},
		{ENT_APPLI,	"User Application",					p_appli_to},
		{ENT_DTE_INT,"DTE interface",					p_dte_to},
		{ENT_NIL},
};

#endif

/*-------------------------------------------------------------------------*/

	Server_main(

		s34,					/* name of the server's main function */
		p_server_def_s34,		/* pointer on the server's definition list */
		qid_s34,				/* variable containing the queue identifier */
		0,						/* size of the external FIFO queue (0 means implicit value) */
		p_from,					/* pointer on the messages origination
								   entities' list (used for simulation only) */
		s34_flag_list			/* pointer on the server's flags list */

		)

/*-------------------------------------------------------------------------*/

#if SIMULATION == ON

				/* Called but not used functions */

ushort 	build_pdu_ns_2 ()
{
	return (OK);
}

#endif
