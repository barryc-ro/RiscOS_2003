/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		cc - implements a call control entity entry point.
 *
 *      cc_config - implements the configuration of the CC entity.
 *
 *      cc_build_object - implements the building of all the call
 *		contexts objects.
 *
 *		cc_var_init - init of DL entity's global variables.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "cc.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "ph_int.h"

#if REVISION_STRING == ON
#	include "rev.cc"
#endif

		/* Common variables : CC context */

	Entity_common (cc);									/* common CC entity variables */

		/* Global CC variables */

	nai_t						cc_current_nai;     	/* CC current nai */
	sapi_t						cc_current_sapi_user;	/* CC current sapi of user entity */
	conn_id_t					cc_current_conn_id;		/* CC current conn_id */
	ent_id_t					cc_current_ent_user;	/* current user entity using the CC */

	sapi_t						cc_from_sapi;  			/* sapi of received msg */
	ushort						cc_event_id;			/* absolute event id out of SAPI and msg_code */

	uchar						cc_service_id;			/* service id */
	uchar						cc_service_class;		/* service class */

	struct node				FAR *p_cc_tree;				/* pointer to the top of Network Access structures list */
	struct cc_na			FAR *p_cc_na;				/* pointer to the current Network Access structure */
	struct cc_call			FAR	*p_cc_call;				/* current CC call context pointer */

	struct cc_profile		FAR *p_cc_profiles_tree;	/* top node of the profiles list */
	struct cc_profile		FAR *p_cc_profile;			/* current profile pointer */

	uchar						cc_error_class;			/* error class code to be sent (for NS only) */
	uchar						cc_error_value;			/* error value code to be sent */
	ent_id_t					cc_error_to;			/* destination entity of the error code */
	sapi_t						cc_error_sapi;			/* CC sapi for the error primitive */

	code_t						cc_tmp_prim_code;		/* temporary primitive code (used in some cc_build.*) */

	uchar						cc_cause;				/* cause value (class+val) */
	uchar						cc_cause_class;			/* cause class */
	uchar						cc_cause_val;			/* cause value in the class */

	uchar					FAR *p_data_cc;				/* pointer to the received data */

	uchar						cc_calling_nb_size;		/* calling number size */
	uchar						cc_calling_nb_type;		/* calling number type */
	uchar						cc_calling_nb_pres;		/* calling number presentation */
	uchar						cc_calling_nb_screen;	/* calling number screening indicator */
	char					FAR *p_calling_address;		/* pointer on the calling number string */
	char					FAR *p_calling_subaddress;	/* pointer on the calling sub address string */

#	if CC_PAR_MULTIPLE_CALLING_NB == ON
		uchar					cc_calling_nb2_size;	/* second calling number size */
		uchar					cc_calling_nb2_type;	/* second calling number type */
		uchar					cc_calling_nb2_pres;	/* second calling number presentation */
		uchar					cc_calling_nb2_screen;	/* second calling number screening indicator */
		char				FAR *p_calling_address2;	/* pointer on the second calling number string */
		char				FAR *p_calling_subaddress2;	/* pointer on the second calling sub address string */
#	endif

	uchar						cc_called_nb_type;		/* called nb type */
	uchar						cc_called_nb_plan;		/* called nb plan */
	uchar						cc_called_nb_size;		/* called nb+sub address size */
	uchar					FAR *p_called_nb;			/* pointer on the received called nb string */
	char					FAR *p_rq_address;			/* pointer on the called number field */

	uchar						cc_called_sub_add_size;	/* received called nb+sub address size */
	uchar					FAR *p_called_sub_add;		/* pointer on the called sub address string */
	char					FAR *p_rq_subaddress;		/* pointer on the called sub address field */

#	if CC_PAR_REDIR_NB == ON
		uchar					cc_redir_nb_size;		/* redirected number size */
		uchar					cc_redir_nb_type;		/* redirected number type */
		uchar					cc_redir_nb_pres;		/* redirected number presentation */
		uchar					cc_redir_nb_screen;		/* redirected number screening indicator */
		uchar					cc_redir_nb_reason;		/* reason for redirection */
		char				FAR *p_redir_address;		/* pointer on the redirected number string */
#	endif

	uchar						cc_sending_complete;	/* sending complete PRESENT->ON, ABSENT->OFF */

#	if CC_PAR_DISPLAY_IE == ON
		uchar					cc_display_size[ACU_MX_DISPLAY];	/* array of received display information size */
		uchar					cc_display_type[ACU_MX_DISPLAY];	/* array of received display type size */
		char				FAR *p_cc_display[ACU_MX_DISPLAY];	/* array of pointer on the received display string */
		uchar					cc_display_instance_nb;	/* display instance number */
		uchar					cc_display_total_size;	/* sum of all display sizes */
#		if ACU_INTERFACE == ON
			struct acu_display_list FAR *p_cc_display_list;	/* address of the received ACU display_list */
#		endif
#	endif

	char					FAR *p_call_id;				/* pointer on the ACU_SUSPEND/RESUME_RQ call_id field */

#	if CC_UUI == ON
		char				FAR *p_cc_uui;				/* pointer on the UUI information */
		uchar					cc_uui_size;			/* size of the UUI information */
#	endif

	uchar						cc_restart_indicator;	/* restart indicator */

	uchar						cc_spf_facility_action;	/* specific facility action */
	uchar						cc_spf_facility_code;	/* specific facility code */

	uchar						cc_facility_size;		/* facility size */
	char					FAR *p_cc_facility;				/* pointer on the facility information */

	uchar						cc_setup_report_in;		/* send-report-in flag */

	uchar						cc_interworking;		/* interworking situation detected in the NS_CONN_IN ? (ON/OFF) */

	struct layer_1_info			cc_layer_1_info;		/* internal temporary layer 1 information */

	signed char					cc_chan_nb;				/* number of channels in cc_chan_id[] */
	signed char					cc_chan_id[CC_NB_CHAN_ID_SENT + 1];	/* list of channels */
	uchar						cc_chan_excl;			/* 'pref/excl' field value in 'chan_id' IE */
	uchar						cc_chan_sel;			/* channel selection field */
	uchar						cc_chan_map_lgth;		/* length of the B-channels map */
	uchar						cc_chan_map[4];			/* B-channels map (32 slots) */
	uchar						cc_store_chan_id;		/* set to ON if the 'chan_id' IE is to be stored in the next message */
	uchar						cc_chan_id_from_user;	/* set to ON if channel id is received from the User */

#	if CC_PAR_PROGRESS_IND_IE == ON
		struct acu_progress_ind cc_progress_ind;		/* progress-indicator */
#	endif

#	if CC_PAR_DATE_TIME == ON
		struct acu_date_time	cc_date_time;			/* date and time information */
#	endif

#	if ACU_PAR_EXTENDED_PRIM == ON
		ushort					cc_ext_lgth;			/* extended IEs total lgth */

		uchar               FAR *p_cc_i_ext;			/* pointer to internal extended data buffer */
		uchar                   t_cc_i_ext[ACU_SZ_I_EXT];/* internal extended data buffer */
		ushort                  cc_i_ext_lgth;			/* internal extended data total lgth */
		ushort                  cc_i_ext_nb;			/* nb of items in the internal extended data buffer */
#	endif

#	if ACU_PAR_EXT_LLC == ON
		struct acu_ext_llc      cc_ext_llc;				/* extended LLC information */
#	endif

#	if _ACU_PAR_EXT_FACILITY == ON
		uchar               FAR *p_cc_ext_fac_asn1;		/* pointer to the ASN1 facility data */
		ushort                  cc_ext_fac_asn1_lgth;	/* size of the ASN1 facility data */
		ushort                  cc_ext_fac_asn1_comp_nb;/* nb of components in the ASN1 facility data */
#	endif

#	if ACU_PAR_EXT_CUG == ON
		uchar               FAR *p_cc_ext_cug;			/* pointer to the 'acu_ext_cug' structure */
#	endif

#	if CC_PAR_CHARGING_INFO == ON
		uchar					cc_charging_type;		/* charging type */
		uchar					cc_charging_period;     /* charging period */
		uchar					cc_charging_multi;		/* charging multiplier */
		long					cc_charging;			/* charging (nb of units) */
#	endif

#	if CC_PAR_KEYPAD_IE == ON
		char				FAR *p_cc_keypad;			/* keypad information */
		uchar					cc_keypad_size;			/* keypad size */
#	endif

#	if CC_ATT_HCDT == ON
		uchar					cc_button_type;			/* Button type */
		uchar					cc_module_nb;			/* Module nb */
		uchar					cc_button_nb;			/* Button nb */
		uchar					cc_switchhook;			/* Switchhook indication */
#	endif

#	if CC_PAR_SIGNAL_IE == ON
		uchar					cc_signal_val;			/* Signal IE */
#	endif

#	if ARINC_NETWORKS == ON
		uchar 					cc_dtmf_digit;
		uchar 					cc_up_down_flag;
		uchar 					cc_dtmf_duration;
		uchar 					cc_notif_descr;
		uchar					cc_spf_fac_code;
		uchar					cc_spf_fac_id;
		uchar			 		cc_departure_year;
		uchar					cc_departure_month;
		uchar					cc_departure_day;
		uchar					cc_service_class_id;
		uchar					cc_nats_route_ind;
		uchar					cc_satcom_route_ind;
		uchar					cc_tfts_route_ind;
		uchar					cc_credit_card_status;
		uchar					cc_nats_avail;
		uchar					cc_satcom_avail;
		uchar					cc_tfts_avail;
		uchar					cc_nats_pos;
		uchar					cc_satcom_pos;
		uchar					cc_tfts_pos;

		uchar					cc_track_1_size;
		uchar					cc_track_2_size;
		uchar					cc_flight_op_id_size;
		uchar					cc_flight_number_size;

		char				FAR *p_cc_track_1;
		char				FAR *p_cc_track_2;
		char				FAR	*p_cc_flight_op_id;
		char				FAR	*p_cc_flight_number;
#	endif

#	if CC_ATT_HCDT == ON
		uchar 					cc_call_appear;			/* Call appearence */
		uchar 					cc_dest_call_appear;	/* Destination call appearence (incoming call) */
#	endif

	conn_id_t					cc_other_conn_id;		/* Conn_id used for CONFERENCE feature. It indicates the conn_id of the active call. */

	struct cc_param					*p_cc_param;
	struct cc_uchar_fct_table		*p_cc_uchar_fct_table;
	struct cc_uchar_fct_1p_table	*p_cc_uchar_fct_1p_table;
	struct cc_uchar_fct_2uc_table	*p_cc_uchar_fct_2uc_table;
	struct cc_uchar_fct_3uc_table	*p_cc_uchar_fct_3uc_table;
	struct cc_p_fct_2uc_table		*p_cc_p_fct_2uc_table;

	uchar						cc_net_idx;				/* Number of implemented networks */
	uchar						cc_operator;			/* to save the Cc_na_network in order to check the consistancy of the config. */
	uchar						cc_select_op;			/* Current selected operator */

	struct cc_fct_table			t_cc_net_spf_fct[CC_MX_NETWORK_NB];

#	if RESET_CONFIG == ON
		struct cc_net_config	t_cc_net_config [MX_OPERATOR_NB];
#	else
		uchar					t_cc_net_config	[MX_OPERATOR_NB];
#	endif

	uchar						cc_a17;         		/* index for ARINC A17	operator */
	uchar						cc_a11;         		/* index for ARINC A11	operator */
	uchar						cc_swd;					/* index for SWD_TVKT	operator */
	uchar						cc_bv1;					/* index for BG_V1		operator */
	uchar						cc_au1;					/* index for AUSTEL_1	operator */
	uchar						cc_tr6;					/* index for DT_1TR6	operator */
	uchar						cc_vn2;					/* index for FT_VN2		operator */
	uchar						cc_vn3;					/* index for FT_VN3		operator */
	uchar						cc_vn6;					/* index for FT_VN6		operator */
	uchar						cc_ets;					/* index for ETSI		operator */
	uchar						cc_at4;					/* index for ATT_4ESS	operator */
	uchar						cc_at5;					/* index for ATT_5E5	operator */
	uchar						cc_at9;					/* index for ATT_5E9	operator */
	uchar						cc_e10;					/* index for ATT_5E10	operator */
	uchar						cc_bip;					/* index for BELLCORE	operator */
	uchar						cc_bt2;					/* index for BT_ISDN2	operator */
	uchar						cc_dms;					/* index for NT_DMS100	operator */
	uchar						cc_kdd;					/* index for KDD 		operator */
	uchar						cc_ni1;					/* index for N_ISDN1	operator */
	uchar						cc_ni2;					/* index for N_ISDN2	operator */
	uchar						cc_ntt;					/* index for NTT		operator */
	uchar						cc_hkt;					/* index for HK_TEL		operator */
	uchar						cc_qsi;					/* index for ECMA_QSIG	operator */

	char			FAR * CONST p_cc_empty_string = "";

		/* cc.c local variables */

	struct cc_config		FAR	*p_cc_config;			/* global CC configuration pointer */
	uchar						cc_init_flag;			/* CC configuration done or not */
	uchar						cc_state;				/* current CC call state for external audit */

    uchar						cc_spid_size;			/* SPID string size */

#	if _CC_SPID_INFO == ON
        uchar FAR *				p_spid;					/* pointer to the SPID */
        uchar 					cc_ces;					/* CES on which the SPID was received */
        uchar 					cc_usid;				/* User Id */
        uchar 					cc_tid;					/* Terminal Id */
        uchar 					cc_interpreter;			/* Intrepreter */
		uchar 					cc_endpoint_action;		/* Action to be taken on the Endpoint Id */
#	endif

/*-------------------------------------------------------------------------*/

					/* Function prototypes */

#if NEW_FCT_STYLE == ON

	void	cc_process				(void);

	uchar	cc_config				(struct	cc_config FAR *p_config);

#	if CC_PROFILE_CONFIG == ON
		uchar	cc_config_profiles	(struct cc_profile_config FAR *p_cc_config);
		uchar	cc_profile_insert	(struct cc_profile_config_list FAR *p_cc_prof_cfg_elem);
#	endif

#	if CC_MULTI_CHAN_CALLS == ON
		uchar	cce_config			(struct	cce_config FAR *p_config);
#	endif

#else

	void	cc_process				();

	uchar	cc_config				();

#	if CC_PROFILE_CONFIG == ON
		uchar	cc_config_profiles	();
		uchar	cc_profile_insert	();
#	endif

#	if CC_MULTI_CHAN_CALLS == ON
		uchar	cce_config			();
#	endif

#endif

/*-------------------------------------------------------------------------*/

					/* Constants */

			/*
				t_default_cc_profiles[] table:
				default profiles definition.
				All additional profiles, described in the profile
				configuration structure, will be linked on head of this
				linked list of profiles.
				Each element of this table is a cc_profile structure,
				pointing to the next element in the table thru the first
				field.
				The last element MUST point to P_NIL.
			*/

#define Cc_p_next_profile(x_next) Pic_address ((struct cc_profile FAR *)&t_default_cc_profiles[x_next])

PIC_CONST_ARRAY struct cc_profile t_default_cc_profiles[] = {

	/* pointer to next entry       Profile_id               Base service_id           SWITCH   INIT  l2_ent_id     l3_ent_id */

	{ Cc_p_next_profile (1),  CC_SERVICE_TELEPHONY,         CC_SERVICE_TELEPHONY,        ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (2),  CC_SERVICE_TELEPHONY_GCI,     CC_SERVICE_TELEPHONY_GCI,    ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (3),  CC_SERVICE_RAW_TELEPHONY,     CC_SERVICE_TELEPHONY_GCI,    ON,    OFF,  ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (4),  CC_SERVICE_DATA_HDLC,         CC_SERVICE_DATA_HDLC,        ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (5),  CC_SERVICE_RAW_DATA,          CC_SERVICE_DATA_HDLC,        ON,    OFF,  ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (6),  CC_SERVICE_X25,               CC_SERVICE_X25,              ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (7),  CC_SERVICE_FAX_3,             CC_SERVICE_FAX_3,            ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (8),  CC_SERVICE_FAX_4,             CC_SERVICE_FAX_4,            ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (9),  CC_SERVICE_AUDIO_MODEM,       CC_SERVICE_AUDIO_MODEM,      ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (10), CC_SERVICE_AUDIO_7,       	CC_SERVICE_AUDIO_7, 	     ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (11), CC_SERVICE_DATA_TRANSPARENT,  CC_SERVICE_DATA_TRANSPARENT, ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (12), CC_SERVICE_DATA_56KBS,        CC_SERVICE_DATA_56KBS,       ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (13), CC_SERVICE_TRANSPARENT,       CC_SERVICE_TRANSPARENT,      ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (14), CC_SERVICE_X25_PACKET,        CC_SERVICE_X25_PACKET,       ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (15), CC_SERVICE_VIDEO,             CC_SERVICE_VIDEO,            ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (16), CC_SERVICE_TDD,               CC_SERVICE_TDD,              ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (17), CC_SERVICE_DATA_H0,           CC_SERVICE_DATA_H0,          ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (18), CC_SERVICE_DATA_H11,          CC_SERVICE_DATA_H11,         ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (19), CC_SERVICE_DATA_H12,          CC_SERVICE_DATA_H12,         ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (20), CC_SERVICE_DATA_MULTIRATE,    CC_SERVICE_DATA_MULTIRATE,   ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (21), CC_SERVICE_DATA_128KBS,       CC_SERVICE_DATA_128KBS,      ON,    ON,   ENT_NIL,       ENT_NIL },
	{ Cc_p_next_profile (22), CC_SERVICE_V110,              CC_SERVICE_V110,             ON,    ON,   ENT_NIL,       ENT_NIL },

		/* V.120 profile */

	{ Cc_p_next_profile (23), CC_SERVICE_V120,              CC_SERVICE_V120,             ON,    ON,   ENT_DL_V120,   ENT_NIL },

		/* 'Relay' type profiles */

	{ Cc_p_next_profile (24), CC_SERVICE_TELEPHONY_RELAY,   CC_SERVICE_TELEPHONY,        ON,    ON,   ENT_PH_R,      ENT_NIL },
	{ Cc_p_next_profile (25), CC_SERVICE_DATA_HDLC_RELAY,   CC_SERVICE_DATA_HDLC,        ON,    ON,   ENT_PH_R,      ENT_NIL },
	{ Cc_p_next_profile (26), CC_SERVICE_X25_RELAY,         CC_SERVICE_X25,              ON,    ON,   ENT_PH_R,      ENT_NIL },
	{ Cc_p_next_profile (27), CC_SERVICE_FAX_3_RELAY,       CC_SERVICE_FAX_3,            ON,    ON,   ENT_PH_R,      ENT_NIL },
	{ Cc_p_next_profile (28), CC_SERVICE_AUDIO_MODEM_RELAY, CC_SERVICE_AUDIO_MODEM,      ON,    ON,   ENT_PH_R,      ENT_NIL },
	{ Cc_p_next_profile (29), CC_SERVICE_DATA_TRANS_RELAY,  CC_SERVICE_DATA_TRANSPARENT, ON,    ON,   ENT_PH_R,      ENT_NIL },
	{ Cc_p_next_profile (30), CC_SERVICE_DATA_56KBS_RELAY,  CC_SERVICE_DATA_56KBS,       ON,    ON,   ENT_PH_R,      ENT_NIL },

		/* Last element in the table: it MUST point to P_NIL */

	{ P_NIL,                  CC_SERVICE_TRANSPARENT_RELAY, CC_SERVICE_TRANSPARENT,      ON,    ON,   ENT_PH_R,      ENT_NIL },
};

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc - implements a Call Control entity entry point.

Usage           uchar cc (p_msg);

*--------------------------------------------------------------------------*/

uchar cc (p_msg)
	struct message 		FAR *p_msg;				/* pointer on received message */
{
	struct cc_config 	FAR *p_cc_config;		/* local pointer to the received configuration structure */

		/* Init the entity pointers */

	p_rcv_msg 	= p_msg;						/* received message pointer */
	p_buffer 	= R_msg_p_buffer;				/* asociated buffer */
	p_snd_msg 	= P_NIL;						/* send buffer to NIL */

	p_data_cc	= R_a_data;						/* Set pointer to received data */

		/* Where does the message come from ? */

	if (R_msg_from == ENT_SM) {

			/* From SM: */

		switch (R_msg_code) {

			case SM_SET_CONFIG_RQ:

					/* Build the CC objects */

				p_cc_config	= (struct cc_config FAR *)p_data_cc;

				if ((Cc_config_cause = cc_config (p_cc_config)) == CC_CFG_OK)  {
					Cc_config_ret_code = OK;
					cc_init_flag       = ON;				/* set init done */

				} else {

					Cc_config_ret_code = NOK;
				}

				Cc_config_diagnostic	= ENT_CC;		/* in CC entity */

				cc_current_ent_user		= ENT_SM;
				cc_retransmit_to_user (SM_SET_CONFIG_CO);
				break;

#		if RESET_CONFIG == ON

			case SM_RESET_CONFIG_RQ:

					/* send back a confirm to MPH */

				p_cc_config	= (struct cc_config FAR *)p_data_cc;

				Cc_config_ret_code		= cc_reset_config ();
				Cc_config_diagnostic	= ENT_CC;

				cc_current_ent_user		= ENT_SM;
				cc_retransmit_to_user (SM_RESET_CONFIG_CO);
				break;

#		endif

			case SM_STOP_RQ:
				cc_current_ent_user		= ENT_SM;
				cc_retransmit_to_user (SM_STOP_CO);
				break;

		}

	} else {

			/* Is configuration already done ? */

		if (cc_init_flag == ON) {

#			if CC_MULTI_CHAN_CALLS == OFF

				cc_process ();

#			else

					/*
						First, process the message coming from the user:
					*/

					/* Get the SAPI that will be used to determine absolute events */

				switch (R_msg_from) {

						/*
							Message coming from lower entities:
							the destination is always CC:
						*/

					case ENT_NS:
					case ENT_MX25:
					case ENT_X25:
					case ENT_PH_GSTN:
						break;

						/*
							Message coming from the Timer entity:
							the destination is always CCE:
							Set the destination entity to ENT_CCE
						*/

					case ENT_TI:
						R_msg_to = ENT_CCE;
						break;

						/*
							Message coming from a user entity:
						*/

					default:

						if (R_msg_sapi != CC_SAPI) {

								/*
									Message using the ACU SAPIs:
									Set the destination entity to ENT_CCE
								*/

							R_msg_to = ENT_CCE;
						}

						break;

				}

					/* Queue the received message to be processed by the loop */

				cc_in_queue (p_rcv_msg);

					/* Process the internal message queue */

				while ((p_rcv_msg = cc_out_queue ()) != P_NIL) {

					if (R_msg_to == ENT_CCE) {

							/* Message to be processed by cce() */

						cce (p_rcv_msg);

					} else {

							/* Message to be processed by CC */

						cc_process ();

					}

				} /* end while (cc_out_queue()) */

#			endif

		} /* end if (cc_init_flag == ON) */

#		if SIMULATION == ON
			pr_cc_state ();
#		endif

			/* External audit */

		cc_state = Cc_call_current_exist ? Cc_call_state : STATE_NULL;

	}

		/* Free the remaining messages if necessary */

	Free_msg (p_rcv_msg);
	Free_msg (p_snd_msg);

		/* Return */

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_process - process a CC message.

Usage           void cc_process ();

Return value	none

*--------------------------------------------------------------------------*/

void cc_process ()
{

		/* Yes - process the received message */

	cc_error_to = ENT_NIL;	/* initialize the error processing */

		/* check the received message */

	ret_code  = cc_rcv ();

		/* Dispatch according to the return code */

	switch (ret_code) {

			/*
				OK or CONTINUE ---> continue to process
				the received message.
			*/

		case OK :
		case CONTINUE :

			if ((ret_code = cc_switch ()) == CONTINUE) {
				cc_state_driven  ();
			}
			break;

			/* NOK or STOP : no more to do */

		case NOK :
		case STOP :
			break;

	}

		/* Process an eventual error occurrency */

	if (cc_error_to != ENT_NIL) {
		cc_error_process ();
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_config - implements the configuration of the CC entity.

Usage           uchar cc_config (p_config);
					- p_config : pointer to the configuration data.

Return value	CC_CFG_OK if correct, or config error diagnostic;

*--------------------------------------------------------------------------*/

uchar cc_config (p_cc_config)
	struct cc_config	FAR *p_cc_config;
{
	uchar						 nai, i;
	uchar						 x_na_service, x_config_service;

	struct cc_b_chan		FAR *p_cc_b_chan;
	CONST struct cc_service	FAR *p_cc_service;
	struct cc_config_na		FAR *p_cc_config_na;

#	if (CC_MX_ADD_LOCAL_NB > 0)
		struct called_nb_service FAR *p_cc_called_nb_service;
		struct called_nb_service FAR *p_cc_called_nb_service_high;
		uchar						 x_na_list, cfg_list_counter, cfg_list_counter_high;
		uchar						 highest_priority;
#	endif

	if (cc_init_flag == OFF) {

		cc_init_flag = ON;				/* set init done */

		cc_reset_op_idx ();				/* Reset operator indexes */

			/* Initialize the profiles pointer */

		p_cc_profiles_tree = (struct cc_profile FAR *)&t_default_cc_profiles[0];

#		if SIMULATION == ON
			pr_cc_version ();
#		endif

	}

#	if CC_PROFILE_CONFIG == ON

		if (Cc_config_type == CC_CONFIG_TYPE_PROFILES) {
			return (cc_config_profiles ((struct cc_profile_config FAR *)p_cc_config));
		}

#	endif

#	if CC_MULTI_CHAN_CALLS == ON

		if (Cc_config_type == CC_CONFIG_TYPE_MULTI_CHAN) {
			return (cce_config ((struct cce_config FAR *)p_cc_config));
		}

#	endif

		/* ---- Build the call contexts objects ----- */

	if ((ret_code = cc_build_object (p_cc_config)) != CC_CFG_OK) {
		return (ret_code);
	}

		/* ---------- Init the CC objects ----------- */

	for (nai = 0; nai < Cc_config_na_nb; nai++) {

		p_cc_config_na = Cc_config_na_a (nai);

		if (cc_access_na (Cc_config_nai) == NOK) {
			return (CC_CFG_ERR_NAI);
		}

			/* Set in Na context, the nai used when interfacing physical layers */

		Na_mph_nai				= Cc_config_mph_nai;

		Cc_na_ent_user  (0)		= Cc_config_ent_user;
		Cc_na_sapi_user (0)		= Cc_config_sapi_user;

		Cc_na_state				= STATE_ACTIVE;

#		if EQUIPMENT == TE
			Cc_na_function		= FG_TE_NT;
#		else
			Cc_na_function		= (Cc_config_function != 0) ? Cc_config_function : FG_TE_NT;
#		endif

		if ((ret_code = cc_check_network (Cc_config_na_operator, Cc_config_operator, Cc_config_na_country, Cc_config_country)) != CC_CFG_OK) {
			return (ret_code);
		}

		cc_build_fct     (cc_select_op);

		cc_build_p_table ();

#		if ASSERT == ON

			switch (Cc_na_sapi_user (0)) {

#			  if CC_INTERFACE == ON
				case  CC_SAPI :
#			  endif

#			  if ACU_INTERFACE == ON
				case ACU_SAPI :
#			  endif

					break;

				default :
					return (CC_CFG_ERR_SAPI);
			}

#		endif

			/* B_CHAN loop */

		if (Cc_na_type == PRI) {

				/* 'B_chan_nb' is now available, so update the NA field */

			Cc_na_nb_b_chan = B_chan_nb;
		}

		for (i = Cc_na_nb_b_chan; i > 0; i--) {
			Cc_access_b_chan (i);
			Cc_b_chan_used		    = CC_B_CHAN_FREE;
			Cc_b_chan_mode		    = B_MODE_NIL;
			Cc_b_chan_init_code	    = MPH_B_STOP_RQ;
			Cc_b_chan_p_active_call =
			Cc_b_chan_p_held_call   = P_NIL;
		}

		Cc_na_call_nb				= Cc_config_call_nb;
		Cc_na_uui_recognition       = Cc_config_uui_recognition;

		switch (Cc_config_in_calls_behaviour) {

			case OFF :	/* former 'No auto-answer' behaviour */
				Cc_na_in_calls_behaviour =
					(CC_SEND_ALERT_IN  |
					 CC_VOICE_ALERT_RQ |
					 CC_DATA_ALERT_RQ);
				break;

			case ON :	/* former 'Auto-answer' behaviour */
				Cc_na_in_calls_behaviour =
					(CC_SEND_ALERT_IN  |
					 CC_VOICE_ALERT_RQ |
					 CC_DATA_CONN_RS);
				break;

			case CC_BEHAVIOUR_NIL :	/* reset all behaviour bits */
				Cc_na_in_calls_behaviour = 0;
				break;

			default :
				Cc_na_in_calls_behaviour = Cc_config_in_calls_behaviour;
				break;

		}

		switch (Cc_config_out_calls_behaviour) {

			case OFF :	/* former 'send ACU_CONN_CO on PROGRESS' behaviour */
				Cc_na_out_calls_behaviour = (CC_SEND_CONN_CO_ON_PROGRESS);
				break;

			case ON :	/* former 'do not send ACU_CONN_CO on PROGRESS' behaviour */
			case CC_BEHAVIOUR_NIL :
				Cc_na_out_calls_behaviour = 0;
				break;

			default :
				Cc_na_out_calls_behaviour = Cc_config_out_calls_behaviour;
				break;

		}

#		if CC_OVERLAP_RECEIVING == ON
			Cc_na_nb_digits_to_route = Cc_config_nb_digits_to_route;
#		endif

			/* load calling nb and sub-address */

		Strcpy_far ((char FAR *)Cc_na_a_calling_nb,
					(char FAR *)Cc_config_a_calling_nb, CC_MX_SZ_CALLING_NB+1);

		Strcpy_far ((char FAR *)Cc_na_a_calling_sub_add,
					(char FAR *)Cc_config_a_calling_sub_add, CC_MX_SZ_CALLING_SUB_ADD+1);

			/* --------- Load main Local_nb-Services association ---------- */

		if ((Cc_na_priority(0) = Cc_config_priority) != CC_PRIORITY_DISABLE) {

			Strcpy_far ((char FAR *)Cc_na_a_local_nb(0),
						(char FAR *)Cc_config_a_local_nb, CC_MX_SZ_CALLED_NB+1);

			Strcpy_far ((char FAR *)Cc_na_a_local_sub_add(0),
						(char FAR *)Cc_config_a_local_sub_add, CC_MX_SZ_CALLED_SUB_ADD+1);

			Cc_na_ns_upper_ent		(0) = Cc_config_ns_upper_ent;
			Cc_na_b_chan_id			(0) = Cc_config_b_chan_id;
			Cc_na_service_list_id	(0) = Cc_config_service_list_id;

				/*
					Enable the services provided by the user configuration
					structure.
				*/

			for (x_na_service = x_config_service = 0;
				 Cc_config_service_id (x_config_service) != CC_SERVICE_NIL;
				 x_config_service++) {

					/* Search for the concerned profile */

				if ((p_cc_profile = cc_access_profile (Cc_config_service_id (x_config_service))) == P_NIL) {
					return (CC_CFG_ERR_PROFILE_ID_NOT_FOUND);
				}

					/* Search for the service id in the services list */

				if ((p_cc_service = cc_access_service (Cc_profile_service_id)) != P_NIL) {

						/* Mark it enabled */

					Cc_na_p_cc_service (0,x_na_service) = p_cc_service;
					Cc_na_p_cc_profile (0,x_na_service) = p_cc_profile;
					x_na_service++;
				}

			}

				/* Mark the end of the NA default services list */

			Cc_na_p_cc_service (0, x_na_service) = P_NIL;
			Cc_na_p_cc_profile (0, x_na_service) = P_NIL;

		}

#		if (CC_MX_ADD_LOCAL_NB > 0)

				/* --------- Load Additional Local_nb-Services association ---------- */

			x_na_list = 1;
			cfg_list_counter = Cc_config_nb_add_local_nb;

			while (cfg_list_counter-- != 0) {

					/* Find the list with the highest priority */

				p_cc_called_nb_service = Cc_config_a_first_add_local_nb;
				cfg_list_counter_high  = Cc_config_nb_add_local_nb;
				highest_priority       = CC_PRIORITY_DISABLE;

				while (cfg_list_counter_high-- != 0) {

					if (Cc_config_add_priority < highest_priority) {

							/*
								Save list pointer and update highest
								priority.
							*/

						highest_priority = Cc_config_add_priority;
						p_cc_called_nb_service_high = p_cc_called_nb_service;
					}

					p_cc_called_nb_service++;
				}

				if (highest_priority == CC_PRIORITY_DISABLE) {

						/* No list found : exit config lists loop */

					break;
				}

					/* Found a list : mark it disabled for next search */

				p_cc_called_nb_service = p_cc_called_nb_service_high;
				Cc_config_add_priority = CC_PRIORITY_DISABLE;

					/* Get list parameters */

				Strcpy_far ((char FAR *)Cc_na_a_local_nb (x_na_list),
							(char FAR *)Cc_config_a_add_local_nb, CC_MX_SZ_CALLED_NB+1);

				Strcpy_far ((char FAR *)Cc_na_a_local_sub_add(x_na_list),
							(char FAR *)Cc_config_a_add_local_sub_add, CC_MX_SZ_CALLED_SUB_ADD+1);

				Cc_na_ns_upper_ent		(x_na_list) = Cc_config_add_ns_upper_ent;
				Cc_na_ent_user			(x_na_list) = Set_default (Cc_config_add_ent_user,  Cc_na_ent_user  (0));
				Cc_na_sapi_user			(x_na_list) = Set_default (Cc_config_add_sapi_user, Cc_na_sapi_user (0));
				Cc_na_b_chan_id			(x_na_list) = Cc_config_add_b_chan_id;
				Cc_na_service_list_id	(x_na_list) = Cc_config_add_service_list_id;

					/* Check sapi_user integrity */

#				if ASSERT == ON

					switch (Cc_na_sapi_user (x_na_list)) {

#					  if CC_INTERFACE == ON
						case  CC_SAPI :
#					  endif

#					  if ACU_INTERFACE == ON
						case ACU_SAPI :
#					  endif

							break;

						default :
							return (CC_CFG_ERR_SAPI);
					}

#				endif

					/*
						Enable the services provided by the user configuration
						structure.
					*/

				for (x_na_service = x_config_service = 0;
					 Cc_config_add_service_id (x_config_service) != CC_SERVICE_NIL;
					 x_config_service++) {

						/* Search for the concerned profile */

					if ((p_cc_profile = cc_access_profile (Cc_config_add_service_id (x_config_service))) == P_NIL) {
						return (CC_CFG_ERR_PROFILE_ID_NOT_FOUND);
					}

						/* Search for the service id in the services list */

					if ((p_cc_service = cc_access_service (Cc_profile_service_id)) != P_NIL) {

							/* Mark it enabled */

						Cc_na_p_cc_service (x_na_list, x_na_service) = p_cc_service;
						Cc_na_p_cc_profile (x_na_list, x_na_service) = p_cc_profile;
						x_na_service++;
					}

				}

					/* Mark the end of the services list */

				Cc_na_p_cc_service (x_na_list, x_na_service) = P_NIL;
				Cc_na_p_cc_profile (x_na_list, x_na_service) = P_NIL;

				x_na_list++;

			}

				/* set total number of local_nb/services associations */

			Cc_na_local_nb_service_nb = x_na_list;

#		else

				/* set total number of local_nb/services associations */

			Cc_na_local_nb_service_nb = 0;

#		endif

			/* --- CALL loop --- */

		cc_access_first_call ();

		while (p_cc_call != P_NIL) {

			Cc_call_clear ();

			cc_access_next_call ();

		} /* End of CALL loop */

	}

	return (CC_CFG_OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_reset_config - resets the configuration of the one NA.

Usage           uchar cc_reset_config ();

Return value	OK if correct, or NOK;

*--------------------------------------------------------------------------*/

#if RESET_CONFIG == ON

uchar cc_reset_config ()
{
	struct node FAR *p_node_prior;
	struct node FAR *p_node;

	if (p_cc_tree == P_NIL) {
		return (NOK);
	}

	p_node_prior = P_NIL;

	for (p_node = p_cc_tree ; p_node != P_NIL; p_node = Next_node) {
		p_cc_na = (struct cc_na FAR *) (p_node + 1);

		if (Nai == R_msg_nai) {

				/* Decrement the nb of time the specification is used */

			cc_dec_net_idx (Cc_na_network);

				/* Free the CALL contexts */

			cc_del_tree (p_node -> p_dp);

				/* Update the NA link */

			if (p_node_prior == P_NIL) {
				p_cc_tree = Next_node;

			} else {

				Next (p_node_prior) = Next_node;
			}

				/* And free the memory block */

			Mem_free ((char FAR *)p_node, PID_VL);
			return (OK);
		}

		p_node_prior = p_node;

	}

	return (NOK);

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_del_tree - deletes a tree structure.

Usage           void cc_del_tree (p_tree_node);
					- p_tree_node: pointer to the first node of the tree.

Return value	none.

*--------------------------------------------------------------------------*/

#if RESET_CONFIG == ON

void cc_del_tree (p_node)
	struct node FAR *p_node;
{
	struct node  FAR *p_next_node;		/* node pointer */

	while (p_node != P_NIL) {

			/* Delete the sub-tree if it exists */

		cc_del_tree (Down_node);

			/* Save 'p_next' pointer */

		p_next_node = Next_node;

			/* Free the block of memory */

		Mem_free ((char FAR *)p_node, PID_VL);

			/* Point to the next node */

		p_node = p_next_node;

	}

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_config_profiles - configuration of profiles

Usage           uchar cc_config_profiles (p_cc_prof_cfg);
					- p_cc_prof_cfg: pointer on the profiles configuration
					structure.

Return value	CC_CFG_OK or CC_CFG_ERR_...

*--------------------------------------------------------------------------*/

#if CC_PROFILE_CONFIG == ON

uchar cc_config_profiles (p_cc_prof_cfg)
	struct cc_profile_config FAR *p_cc_prof_cfg;
{
	uchar prof_cfg_nb;

	for (prof_cfg_nb = 0; prof_cfg_nb < Cc_prof_cfg_nb; prof_cfg_nb++) {

		if ((ret_code = cc_profile_insert (Cc_prof_cfg_a (prof_cfg_nb))) != CC_CFG_OK) {
			return (ret_code);
		}

	}

	return (CC_CFG_OK);

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_profile_insert - insert a new profile in the profile list.

Usage           uchar cc_profile_insert (p_cc_prof_cfg_elem);
					- p_cc_prof_cfg_elem: pointer on the profile configuration
					sub-structure.

Return value	OK/NOK

*--------------------------------------------------------------------------*/

#if CC_PROFILE_CONFIG == ON

uchar cc_profile_insert (p_cc_prof_cfg_elem)
	struct cc_profile_config_list FAR *p_cc_prof_cfg_elem;
{

		/* Ignore a profile which id is 0 */

	if (Cc_prof_cfg_profile_id == 0) {
		return (CC_CFG_OK);
	}

	if (Cc_prof_cfg_profile_id < 128) {
		return (CC_CFG_ERR_PROFILE_ID_RANGE);
	}

		/* Reject any already defined profile */

	if (cc_access_profile (Cc_prof_cfg_profile_id) != P_NIL) {
		return (CC_CFG_ERR_PROFILE_ID_EXISTS);
	}

		/* Allocate memory for the profile */

	if ((p_cc_profile = (struct cc_profile FAR *)Mem_alloc (Rnd_sizeof (struct cc_profile), PID_VL)) == A_NIL) {
		return (CC_CFG_ERR_MEMORY_FULL);
	}

		/* Record the profile parameters */

	Cc_profile_id                = Cc_prof_cfg_profile_id;
	Cc_profile_service_id        = Cc_prof_cfg_service_id;

	Cc_profile_switch_rq_enable  = Cc_prof_cfg_switch_rq_enable;

	Cc_profile_init_rq_enable    = Cc_prof_cfg_init_rq_enable;
	Cc_profile_init_rq_l2_ent_id = Cc_prof_cfg_init_rq_l2_ent_id;
	Cc_profile_init_rq_l3_ent_id = Cc_prof_cfg_init_rq_l3_ent_id;

		/* Insert the profile in the queue */

	Lifo_put (p_cc_profiles_tree, p_cc_profile);

	return (CC_CFG_OK);
}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				cc_var_init - init of CC entity's global variables.

Usage            	void cc_var_init ();

Return value :		void

Common constants and declarations : cc.h

Common objects : CC global variables.

*--------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC

#include "cc_fct.h"

void pic_init_t_default_cc_profiles (void)
{
	uchar i;

	Pic_init_index ();

	for (i = 1; i <= Sizeof_table (t_default_cc_profiles) - 1; i++) {
		Pic_init_struct_array_next (t_default_cc_profiles, p_next, &t_default_cc_profiles[i]);
	}
}

#   if NEW_FCT_STYLE == ON
		void pic_init_t_default_cc_profiles (void);
		void pic_init_t_cc_operator_var (void);
#   else
		void pic_init_t_default_cc_profiles ();
		void pic_init_t_cc_operator_var ();
#   endif

#endif

void cc_var_init ()
{

	cc_init_flag			= OFF;
	p_cc_tree				= P_NIL;
	cc_state				= 0;

		/* Initialise the CCE global variables */

#	if CC_MULTI_CHAN_CALLS == ON
		cce_var_init ();
#	endif

#	if OM_CODE_TYPE == OM_PIC
		pic_init_t_default_cc_profiles ();
		pic_init_t_cc_operator_var ();
#	endif

}

/*EOF*/
