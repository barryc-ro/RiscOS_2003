
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ana_acu.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		ana_sdu_acu     - analysis of an ACU message.
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "services.h"
#include "cc_int.h"
#include "acu_int.h"

#if C_COMPILER == TC
#	pragma  hdrstop
#endif

#if SIMULATION == ON
#	include "simul.h"

extern uint	cc_ana_sdu_decoded;	/* CC: print data area in hex or decoded */

uchar	g_acu_conn_in_service;

#if NEW_FCT_STYLE == ON

	void pr_acu_aircraft_info			(uchar year, uchar month, uchar day, uchar class_id, uchar op_id_size, uchar digit_size, char FAR *a_op_id, char FAR *a_digit);
	void pr_acu_alert_event				(uchar event);
	void pr_acu_called_nb				(uchar nb_size, char FAR *a_nb, uchar nb_type);
	void pr_acu_calling_nb				(uchar nb_size, char FAR *a_nb, uchar calling_nb_type, uchar nb_pres, uchar screen);
	void pr_acu_call_appear 			(uchar call_appear);
	void pr_acu_cause					(uchar cause);
	void pr_acu_chani_list				(struct chani_list FAR *p_chani_list);
	void pr_acu_chan_id					(uchar data_chani);
	void pr_acu_chan_id_excl			(uchar pref_excl);
	void pr_acu_charging 				(uchar type, uchar period, uchar multi, long charging);
	void pr_acu_charging_rq				(uchar charging_rq);
	void pr_acu_credit_card_nb 			(uchar track_1_size, uchar track_2_size, char FAR *a_track_1, char FAR *a_track_2);
	void pr_acu_credit_card_status		(uchar credit_card_status);
	void pr_acu_date_time				(struct acu_date_time FAR *a_date_time);
	void pr_acu_digit					(uchar digit_size, char FAR *a_digit);
	void pr_acu_display					(uchar display_size, char FAR *a_display);
	void pr_acu_dtmf_digit  			(uchar dtmf_digit, uchar up_down_flag, uchar dtmf_duration, uchar digit_size, char FAR *a_digit);
	void pr_acu_err_in					(uchar error_cause, uchar error_diag);
#	if CC_PAR_SEMI_PERMANENT_CIRCUITS == ON
		void pr_acu_establish			(uchar establish);
#	endif
#	if ACU_PAR_EXTENDED_PRIM == ON
		void pr_acu_ext_parms			(uchar FAR *p_data);
		void pr_acu_ext_element			(uchar FAR *p_ext_data);
#	endif
	void pr_acu_facility				(uchar facility_size, char FAR *a_facility);
	void pr_acu_fac_action 				(uchar action);
	void pr_acu_fac_code 				(uchar code);
	void pr_acu_identification_denied_rq(uchar identification_denied_rq);
	void pr_acu_interworking			(uchar interworking);
	void pr_acu_keypad					(uchar keypad_size, char FAR *a_keypad);
	void pr_acu_layer_1_info			(uchar service, struct layer_1_info FAR *);
	void pr_acu_nb_pres					(uchar nb_pres);
	void pr_acu_nb_reason				(uchar nb_reason);
	void pr_acu_nb_screen				(uchar nb_screen);
	void pr_acu_nb_type					(uchar nb_type);
	void pr_acu_notif_ind   			(uchar notif_descr);
	void pr_acu_ok_nok					(uchar ok_nok);
	void pr_acu_progress_event			(uchar event);
	void pr_acu_progress_ind 			(uchar descr, uchar loc);
	void pr_acu_progress_ind_list		(struct acu_progress_ind FAR *a_prog);
	void pr_acu_queue_info				(uchar nats_avail, uchar satcom_avail, uchar tfts_avail, uchar nats_pos, uchar satcom_pos, uchar tfts_pos);
	void pr_acu_raw_data				(uchar size, char FAR *a_str);
	void pr_acu_redir_nb				(struct acu_redir_nb FAR *p_acu_redir_nb, char FAR *p_acu_redir_nb_string);
	void pr_acu_ret_code				(uchar ret_code);
	void pr_acu_route_select 			(uchar nats_route_ind, uchar satcom_route_ind, uchar tfts_route_ind);
	void pr_acu_sending_complete		(uchar on_off);
	void pr_acu_service					(uchar service);
	void pr_acu_signal 					(uchar signal_val);
	void pr_acu_spf_fac 				(uchar spf_fac_id, uchar spf_fac_val);
	void pr_acu_string					(uchar str_size, char FAR *a_str);
	void pr_acu_transfer_rq				(uchar transfer_rq, add_t transfer_conn_id);
	void pr_acu_uui						(uchar uui_size, char FAR *a_uui);
	void pr_acu_x_display   			(struct acu_display_list FAR *display_list);

#	if _CC_SPID_INFO == ON
		void pr_acu_spid 				(uchar spid_size, char FAR *a_spid);
        void pr_acu_endpoint_id			(struct acu_endpoint_id p_endpoint_id);
		void pr_acu_ces 				(uchar ces);
#	endif


#else

	void pr_acu_aircraft_info			();
	void pr_acu_alert_event				();
	void pr_acu_called_nb				();
	void pr_acu_calling_nb				();
	void pr_acu_call_appear 			();
	void pr_acu_cause					();
	void pr_acu_chani_list				();
	void pr_acu_chan_id					();
	void pr_acu_chan_id_excl			();
	void pr_acu_charging 				();
	void pr_acu_charging_rq				();
	void pr_acu_credit_card_nb 			();
	void pr_acu_credit_card_status		();
	void pr_acu_date_time				();
	void pr_acu_digit					();
	void pr_acu_display					();
	void pr_acu_dtmf_digit  			();
	void pr_acu_err_in					();
#	if CC_PAR_SEMI_PERMANENT_CIRCUITS == ON
		void pr_acu_establish			();
#	endif
#	if ACU_PAR_EXTENDED_PRIM == ON
		void pr_acu_ext_parms			();
		void pr_acu_ext_element			();
#	endif
	void pr_acu_facility				();
	void pr_acu_fac_action 				();
	void pr_acu_fac_code 				();
	void pr_acu_identification_denied_rq();
	void pr_acu_interworking			();
	void pr_acu_keypad					();
	void pr_acu_layer_1_info			();
	void pr_acu_nb_pres					();
	void pr_acu_nb_reason				();
	void pr_acu_nb_screen				();
	void pr_acu_nb_type					();
	void pr_acu_notif_ind   			();
	void pr_acu_ok_nok					();
	void pr_acu_progress_event			();
	void pr_acu_progress_ind 			();
	void pr_acu_progress_ind_list		();
	void pr_acu_queue_info				();
	void pr_acu_raw_data				();
	void pr_acu_redir_nb				();
	void pr_acu_ret_code				();
	void pr_acu_route_select 			();
	void pr_acu_sending_complete		();
	void pr_acu_service					();
	void pr_acu_signal 					();
	void pr_acu_spf_fac 				();
	void pr_acu_string					();
	void pr_acu_transfer_rq				();
	void pr_acu_uui						();
	void pr_acu_x_display   			();

#	if _CC_SPID_INFO == ON
		void pr_acu_spid 				();
        void pr_acu_endpoint_id			();
		void pr_acu_ces 				();
#	endif

#endif

/*-------------------------------------------------------------------------*/

			/* ACU primitives list */

CONST struct code_text acu_prim[] = {
	{ACU_CONN_RQ,				"ACU_CONN_RQ"},
	{ACU_CONN_RS,				"ACU_CONN_RS"},
	{ACU_CLEAR_RQ,				"ACU_CLEAR_RQ"},
	{ACU_CLEAR_RS,				"ACU_CLEAR_RS"},
	{ACU_INFO_RQ,				"ACU_INFO_RQ"},
	{ACU_INIT_RQ,				"ACU_INIT_RQ"},
	{ACU_SETPARM_RQ,			"ACU_SETPARM_RQ"},
	{ACU_DIGIT_RQ,				"ACU_DIGIT_RQ"},
	{ACU_CALL_PROC_RQ,			"ACU_CALL_PROC_RQ"},
	{ACU_ALERT_RQ,				"ACU_ALERT_RQ"},
	{ACU_USER_INFO_RQ,			"ACU_USER_INFO_RQ"},
	{ACU_FACILITY_RQ,			"ACU_FACILITY_RQ"},
	{ACU_SET_MODE_RQ,			"ACU_SET_MODE_RQ"},
	{ACU_SUSPEND_RQ,			"ACU_SUSPEND_RQ"},
	{ACU_RESUME_RQ,				"ACU_RESUME_RQ"},
	{ACU_TEST_RQ,				"ACU_TEST_RQ"},
	{ACU_INFORMATION_RQ,		"ACU_INFORMATION_RQ"},

	{ACU_CONN_IN,				"ACU_CONN_IN"},
	{ACU_CONN_CO,				"ACU_CONN_CO"},
	{ACU_CLEAR_IN,				"ACU_CLEAR_IN"},
	{ACU_CLEAR_CO,				"ACU_CLEAR_CO"},
	{ACU_ALERT_IN,				"ACU_ALERT_IN"},
	{ACU_USER_INFO_IN,			"ACU_USER_INFO_IN"},
	{ACU_INFORMATION_IN,		"ACU_INFORMATION_IN"},
	{ACU_PROGRESS_IN,			"ACU_PROGRESS_IN"},
	{ACU_DIGIT_IN,				"ACU_DIGIT_IN"},
	{ACU_DIGIT_CO,				"ACU_DIGIT_CO"},
	{ACU_FACILITY_IN,			"ACU_FACILITY_IN"},
	{ACU_FACILITY_CO,			"ACU_FACILITY_CO"},
	{ACU_SET_MODE_CO,			"ACU_SET_MODE_CO"},
	{ACU_SUSPEND_CO,			"ACU_SUSPEND_CO"},
	{ACU_RESUME_CO,				"ACU_RESUME_CO"},
	{ACU_TEST_CO,				"ACU_TEST_CO"},
	{ACU_SETUP_REPORT_IN,		"ACU_SETUP_REPORT_IN"},
	{ACU_ERR_IN,				"ACU_ERR_IN"},

	{0,							"NONAME"},
};

	/*--------------------------------------*/

CONST struct code_text t_acu_service_id [] = {

	{ACU_X25_SERVICE,				"ACU_X25_SERVICE"},
	{ACU_MODEM_SERVICE,				"ACU_MODEM_SERVICE"},
	{ACU_AUDIO_7_SERVICE,			"ACU_AUDIO_7_SERVICE"},
	{ACU_FAX_SERVICE,				"ACU_FAX_SERVICE"},
	{ACU_FAX_4_SERVICE,				"ACU_FAX_4_SERVICE"},
	{ACU_DATA_SERVICE,				"ACU_DATA_SERVICE"},
	{ACU_DATA_TRANS_SERVICE,		"ACU_DATA_TRANS_SERVICE"},
	{ACU_VOICE_SERVICE,				"ACU_VOICE_SERVICE"},
	{ACU_VOICE_TRANS_SERVICE,		"ACU_VOICE_TRANS_SERVICE"},
	{ACU_VOICE_GCI_SERVICE,			"ACU_VOICE_GCI_SERVICE"},
	{ACU_DATA_56KBS_SERVICE,		"ACU_DATA_56KBS_SERVICE"},
	{ACU_V110_SERVICE,				"ACU_V110_SERVICE"},
	{ACU_V120_SERVICE,				"ACU_V120_SERVICE"},
	{ACU_VIDEO_SERVICE,				"ACU_VIDEO_SERVICE"},
	{ACU_X25_PACKET_SERVICE,        "ACU_X25_PACKET_SERVICE"},
	{ACU_TDD_SERVICE, 		        "ACU_TDD_SERVICE"},
	{ACU_DATA_H0_SERVICE,           "ACU_DATA_H0_SERVICE"},
	{ACU_DATA_H11_SERVICE,          "ACU_DATA_H11_SERVICE"},
	{ACU_DATA_H12_SERVICE,          "ACU_DATA_H12_SERVICE"},
	{ACU_DATA_MULTIRATE_SERVICE,    "ACU_DATA_MULTIRATE_SERVICE"},
	{ACU_DATA_128KBS_SERVICE,       "ACU_DATA_128KBS_SERVICE"},

	{ACU_X25_RELAY_SERVICE,			"ACU_X25_RELAY_SERVICE"},
	{ACU_MODEM_RELAY_SERVICE,		"ACU_MODEM_RELAY_SERVICE"},
	{ACU_FAX_RELAY_SERVICE,			"ACU_FAX_RELAY_SERVICE"},
	{ACU_DATA_RELAY_SERVICE,		"ACU_DATA_RELAY_SERVICE"},
	{ACU_DATA_TRANS_RELAY_SERVICE,	"ACU_DATA_TRANS_RELAY_SERVICE"},
	{ACU_VOICE_RELAY_SERVICE,		"ACU_VOICE_RELAY_SERVICE"},
	{ACU_VOICE_GCI_RELAY_SERVICE,	"ACU_VOICE_GCI_RELAY_SERVICE"},
	{ACU_DATA_56KBS_RELAY_SERVICE,	"ACU_DATA_56KBS_RELAY_SERVICE"},

	{0,								"NONAME"},
};

	/*--------------------------------------*/

CONST struct code_text t_acu_facility_code [] = {

	{ACU_FAC_CALL_FORWARDING,		"ACU_FAC_CALL_FORWARDING"},
	{ACU_FAC_CALL_DEFLECTION,		"ACU_FAC_CALL_DEFLECTION"},
	{ACU_FAC_CHARGING,				"ACU_FAC_CHARGING"},
	{ACU_FAC_CHARGING_TOTAL,		"ACU_FAC_CHARGING_TOTAL"},
	{ACU_FAC_HOLD,					"ACU_FAC_HOLD"},
	{ACU_FAC_RETRIEVE,				"ACU_FAC_RETRIEVE"},
	{ACU_FAC_ALTERNATE,				"ACU_FAC_ALTERNATE"},
	{ACU_FAC_TRF,					"ACU_FAC_TRF"},
	{ACU_FAC_THREE_PARTY,			"ACU_FAC_THREE_PARTY"},
	{ACU_FAC_MALICIOUS_CALL_ID,		"ACU_FAC_MALICIOUS_CALL_ID"},
	{ACU_FAC_TRANSPARENT,			"ACU_FAC_TRANSPARENT"},
	{ACU_FAC_CALL_APPEAR,			"ACU_FAC_CALL_APPEAR"},
	{ACU_FAC_FEATURE_ACT,			"ACU_FAC_FEATURE_ACT"},
	{ACU_FAC_DROP,					"ACU_FAC_FEATURE_DROP"},

	{0,								"NONAME"},
};

	/*--------------------------------------*/

CONST struct code_text t_acu_facility_action [] = {

	{ACU_RQ_ACTIVATE,				"ACU_RQ_ACTIVATE"},
	{ACU_RQ_CLEAR,					"ACU_RQ_CLEAR"},
	{ACU_RQ_ENQUIRY,				"ACU_RQ_ENQUIRY"},

	{ACU_IN_TX,						"ACU_IN_TX"},

	{ACU_CO_ACK,					"ACU_CO_ACK"},
	{ACU_CO_REJ,					"ACU_CO_REJ"},
	{ACU_FAC_DROP,					"ACU_FAC_DROP"},

	{0,								"NONAME"},
};

	/*--------------------------------------*/

CONST struct code_text t_acu_alert_event [] = {

	{ACUAC_RING,					"ACUAC_RING"},
	{ACUAC_REMOTE_ALERTED,			"ACUAC_REMOTE_ALERTED"},

	{0,								"NONAME"},
};

	/*--------------------------------------*/

CONST struct code_text t_acu_progress_event [] = {

	{ACUEV_DIAL_TONE,				"ACUEV_DIAL_TONE"},
	{ACUEV_INTERWORKING,			"ACUEV_INTERWORKING"},

	{0,								"NONAME"},
};

	/*--------------------------------------*/

CONST struct code_text t_ret_code [] = {

	{ACURC_BUSY,					"ACURC_BUSY"},
	{ACURC_NOPROCEED,				"ACURC_NOPROCEED"},
	{ACURC_NOANSWER,				"RC_NOANSWER"},
	{ACURC_NOAUTOANSWER,			"ACURC_NOAUTOANSWER"},
	{ACURC_CONGESTED,				"ACURC_CONGESTED"},
	{ACURC_INCOMING,				"ACURC_INCOMING"},
	{ACURC_NOLINE,					"ACURC_NOLINE"},
	{ACURC_ERRNUM,					"ACURC_ERRNUM"},
	{ACURC_INHNUM,					"ACURC_INHNUM"},
	{ACURC_2MNUM,					"ACURC_2MNUM"},
	{ACURC_HUNGUP,					"ACURC_HUNGUP"},
	{ACURC_NETWORK_ERROR,			"ACURC_NETWORK_ERROR"},
	{ACURC_TIMEOUT,					"ACURC_TIMEOUT"},
	{ACURC_BAD_SERVICE,				"ACURC_BAD_SERVICE"},
	{ACURC_INTERNAL,				"ACURC_INTERNAL"},

	{0,								"NONAME"},
};

	/*--------------------------------------*/

CONST struct code_text t_acu_err_in_cause [] = {

	{ACUER_PRIMITIVE_CODE,				"ACUER_PRIMITIVE_CODE"},
	{ACUER_PARAM_VAL,					"ACUER_PARAM_VAL"},
	{ACUER_MANDATORY_PARAM_MISSING,		"ACUER_MANDATORY_PARAM_MISSING"},
	{ACUER_PARAM_TYPE,					"ACUER_PARAM_TYPE"},
	{ACUER_PARAM_LGTH,					"ACUER_PARAM_LGTH"},
	{ACUER_UNEXPECTED_PRIMITIVE,		"ACUER_UNEXPECTED_PRIMITIVE"},
	{ACUER_PRIMITIVE_NOT_IMPLEMENTED,	"ACUER_PRIMITIVE_NOT_IMPLEMENTED"},
	{ACUER_NO_TIMER_AVAILABLE,			"ACUER_NO_TIMER_AVAILABLE"},

	{0,									"NONAME"},
};

	/*--------------------------------------*/

CONST struct code_text t_acu_err_in_diag [] = {

	{ACUERDIAG_CHAN_ID,					"ACUERDIAG_CHAN_ID"},
	{ACUERDIAG_DISPLAY,					"ACUERDIAG_DISPLAY"},
	{ACUERDIAG_KEYPAD,					"ACUERDIAG_KEYPAD"},
	{ACUERDIAG_CALLING_NB,				"ACUERDIAG_CALLING_NB"},
	{ACUERDIAG_CALLING_SUB_ADD,			"ACUERDIAG_CALLING_SUB_ADD"},
	{ACUERDIAG_CALLED_NB,				"ACUERDIAG_CALLED_NB"},
	{ACUERDIAG_CALLED_SUB_ADD,			"ACUERDIAG_CALLED_SUB_ADD"},
	{ACUERDIAG_UUI,						"ACUERDIAG_UUI"},

	{0,									"NONAME"},
};

/*-------------------------------------------------------------------------*/

uchar ana_sdu_acu (p_msg)
	struct message FAR *p_msg;
{
	uchar         FAR *p_data;
	struct buffer FAR *p_buffer;

		/* Print message header */

	fprintf (f_out, "from = %c to = %c code = %s nai = %1d sapi = %c conn_id = %-3d",
			L_msg_from, L_msg_to, Code_to_text (acu_prim, L_msg_code),
			L_msg_nai, L_msg_sapi, L_msg_conn_id);

	if (cc_ana_sdu_decoded == OFF) {
		return (CONTINUE);
	}

		/* Print message contents */

	p_data = L_a_data;

	switch (L_msg_code) {

	case ACU_CONN_RQ :
		pr_acu_service     (Acu_conn_rq_service);
		pr_acu_layer_1_info(Acu_conn_rq_service, Acu_conn_rq_a_layer_1_info);
		pr_acu_chani_list  ((struct chani_list FAR *)&Acu_conn_rq_data_chani_nb);
		pr_acu_chan_id_excl(Acu_conn_rq_data_chani_excl);
		pr_acu_charging_rq (Acu_conn_rq_charging_rq);
		pr_acu_transfer_rq (Acu_conn_rq_transfer_rq, Acu_conn_rq_transfer_conn_id);
		pr_acu_identification_denied_rq (Acu_conn_rq_identification_denied_rq);
		pr_acu_called_nb   (Acu_conn_rq_called_nb_size, Acu_conn_rq_a_called_nb, Acu_conn_rq_called_nb_type);
		pr_acu_sending_complete (Acu_conn_rq_sending_complete);
		pr_acu_calling_nb  (Acu_conn_rq_calling_nb_size, Acu_conn_rq_a_calling_nb,  Acu_conn_rq_calling_nb_type,  Acu_conn_rq_calling_nb_pres,  Acu_conn_rq_calling_nb_screen);
		pr_acu_calling_nb  (Acu_conn_rq_calling_nb2_size,Acu_conn_rq_a_calling_nb2, Acu_conn_rq_calling_nb2_type, Acu_conn_rq_calling_nb2_pres, Acu_conn_rq_calling_nb2_screen);
		pr_acu_uui         (Acu_conn_rq_uui_size, Acu_conn_rq_a_uui);
		pr_acu_facility    (Acu_conn_rq_facility_size, Acu_conn_rq_a_facility);
		pr_acu_x_display   ((struct acu_display_list FAR *) Acu_conn_rq_a_display_list);

#		if ARINC_NETWORKS == ON
			pr_acu_notif_ind   (Acu_conn_rq_notif_descr);

#			if CC_SPF_FAC == ON

				pr_acu_spf_fac (Acu_conn_rq_spf_fac_id, Acu_conn_rq_spf_fac_val);

#			endif

			pr_acu_credit_card_nb (Acu_conn_rq_track_1_size, Acu_conn_rq_track_2_size, Acu_conn_rq_a_track_1, Acu_conn_rq_a_track_2);
			pr_acu_aircraft_info (Acu_conn_rq_departure_year, Acu_conn_rq_departure_month, Acu_conn_rq_departure_day, Acu_conn_rq_service_class_id, Acu_conn_rq_flight_op_id_size, Acu_conn_rq_flight_number_size, Acu_conn_rq_a_flight_op_id, Acu_conn_rq_a_flight_number);
#		endif

#		if CC_PAR_PROGRESS_IND_IE == ON
			pr_acu_progress_ind_list ((struct acu_progress_ind FAR *)&(Acu_conn_rq_ progress_ind));
#		endif

#		if ARINC_NETWORKS == ON
			pr_acu_route_select (Acu_conn_rq_nats_route_ind, Acu_conn_rq_satcom_route_ind, Acu_conn_rq_tfts_route_ind);

#		endif

		pr_acu_call_appear (Acu_conn_rq_call_appear);

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

#		if _CC_SPID_INFO == ON
			pr_acu_endpoint_id (Acu_conn_rq_p_endpoint_id);
#		endif

		break;

	case ACU_CONN_IN :
	case ACU_SETUP_REPORT_IN :
		g_acu_conn_in_service = Acu_conn_in_service;
		pr_acu_interworking	(Acu_conn_in_interworking);
		pr_acu_service     	(Acu_conn_in_service);
		pr_acu_layer_1_info	(Acu_conn_in_service, Acu_conn_in_a_layer_1_info);
#		if CC_PAR_SEMI_PERMANENT_CIRCUITS == ON
			pr_acu_establish(Acu_conn_in_semi_permanent_circuit);
#		endif
		pr_acu_chani_list  	((struct chani_list FAR *)&Acu_conn_in_data_chani_nb);
		pr_acu_chan_id_excl (Acu_conn_in_data_chani_excl);
		pr_acu_calling_nb  	(Acu_conn_in_calling_nb_size, Acu_conn_in_a_calling_nb, Acu_conn_in_calling_nb_type, Acu_conn_in_calling_nb_pres, Acu_conn_in_calling_nb_screen);
		pr_acu_calling_nb  	(Acu_conn_in_calling_nb2_size, Acu_conn_in_a_calling_nb2, Acu_conn_in_calling_nb_type, Acu_conn_in_calling_nb2_pres, Acu_conn_in_calling_nb2_screen);
		pr_acu_called_nb   	(Acu_conn_in_called_nb_size, Acu_conn_in_a_called_nb, Acu_conn_in_called_nb_type);
		pr_acu_redir_nb		((struct acu_redir_nb FAR *)&(Acu_conn_in_ redir_nb), Acu_conn_in_a_redir_nb);
		pr_acu_uui         	(Acu_conn_in_uui_size, Acu_conn_in_a_uui);
		pr_acu_facility    	(Acu_conn_in_facility_size, Acu_conn_in_a_facility);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_conn_in_a_display_list);

#		if ARINC_NETWORKS == ON
			pr_acu_notif_ind   (Acu_conn_in_notif_descr);

#			if CC_SPF_FAC == ON

				pr_acu_spf_fac (Acu_conn_in_spf_fac_id, Acu_conn_in_spf_fac_val);

#			endif

			pr_acu_credit_card_nb (Acu_conn_in_track_1_size, Acu_conn_in_track_2_size, Acu_conn_in_a_track_1, Acu_conn_in_a_track_2);
			pr_acu_aircraft_info (Acu_conn_in_departure_year, Acu_conn_in_departure_month, Acu_conn_in_departure_day, Acu_conn_in_service_class_id, Acu_conn_in_flight_op_id_size, Acu_conn_in_flight_number_size, Acu_conn_in_a_flight_op_id, Acu_conn_in_a_flight_number);
#		endif

#		if CC_PAR_PROGRESS_IND_IE == ON
			pr_acu_progress_ind_list ((struct acu_progress_ind FAR *)&(Acu_conn_in_ progress_ind));
#		endif

#		if ARINC_NETWORKS == ON
			pr_acu_route_select (Acu_conn_in_nats_route_ind, Acu_conn_in_satcom_route_ind, Acu_conn_in_tfts_route_ind);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_CONN_RS :
		pr_acu_service     (Acu_conn_rs_service);
		pr_acu_layer_1_info(Acu_conn_rs_service, Acu_conn_rs_a_layer_1_info);
		pr_acu_chani_list  ((struct chani_list FAR *)&Acu_conn_rs_data_chani_nb);
		pr_acu_chan_id_excl(Acu_conn_rs_data_chani_excl);
		pr_acu_uui         (Acu_conn_rs_uui_size, Acu_conn_rs_a_uui);
		pr_acu_facility    (Acu_conn_rs_facility_size, Acu_conn_rs_a_facility);
		pr_acu_x_display   ((struct acu_display_list FAR *) Acu_conn_rs_a_display_list);
		pr_acu_date_time   (Acu_conn_rs_a_date_time);

#		if CC_PAR_SIGNAL_IE == ON
			pr_acu_signal	(Acu_conn_rs_signal_val);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_CONN_CO :
		pr_acu_service     	(Acu_conn_co_service);
		pr_acu_chani_list  	((struct chani_list FAR *)&Acu_conn_co_data_chani_nb);
		pr_acu_chan_id_excl (Acu_conn_co_data_chani_excl);
		pr_acu_redir_nb		((struct acu_redir_nb FAR *)&(Acu_conn_co_ redir_nb), Acu_conn_co_a_redir_nb);
		pr_acu_uui         	(Acu_conn_co_uui_size, Acu_conn_co_a_uui);
		pr_acu_facility    	(Acu_conn_co_facility_size, Acu_conn_co_a_facility);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_conn_co_a_display_list);
		pr_acu_charging		(Acu_conn_co_charging_type, Acu_conn_co_charging_period, Acu_conn_co_charging_multi, Acu_conn_co_charging);
		pr_acu_date_time	(Acu_conn_co_a_date_time);

#		if CC_PAR_SIGNAL_IE == ON
			pr_acu_signal	(Acu_conn_co_signal_val);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_DIGIT_RQ :
#		if ARINC_NETWORKS == ON
			pr_acu_dtmf_digit  	(Acu_digit_rq_dtmf_digit, Acu_digit_rq_up_down, Acu_digit_rq_dtmf_duration, Acu_digit_rq_digit_size, Acu_digit_rq_a_digit);
#		else
			pr_acu_digit       	(Acu_digit_rq_digit_size, Acu_digit_rq_a_digit);
			pr_acu_sending_complete (Acu_digit_rq_sending_complete);
			pr_acu_display		(Acu_digit_rq_display_size, Acu_digit_rq_a_display);
#		endif

		pr_acu_x_display		((struct acu_display_list FAR *) Acu_digit_rq_a_display_list);
		break;

	case ACU_DIGIT_IN :
		pr_acu_digit       	(Acu_digit_in_digit_size, Acu_digit_in_a_digit);
		pr_acu_sending_complete (Acu_digit_in_sending_complete);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_digit_in_a_display_list);

#		if ARINC_NETWORKS == ON
			pr_acu_dtmf_digit  	(Acu_digit_in_dtmf_digit, Acu_digit_in_up_down, Acu_digit_in_dtmf_duration, 0, 0);
#		endif

		break;

	case ACU_DIGIT_CO :
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_digit_co_a_display_list);

		break;

	case ACU_CALL_PROC_RQ :
		pr_acu_chani_list  	((struct chani_list FAR *)&Acu_call_proc_rq_data_chani_nb);
		pr_acu_chan_id_excl (Acu_call_proc_rq_data_chani_excl);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_call_proc_rq_a_display_list);

#		if CC_PAR_PROGRESS_IND_IE == ON
			pr_acu_progress_ind_list ((struct acu_progress_ind FAR *)&(Acu_call_proc_rq_ progress_ind));
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_ALERT_RQ :
		pr_acu_chani_list  	((struct chani_list FAR *)&Acu_alert_rq_data_chani_nb);
		pr_acu_chan_id_excl (Acu_alert_rq_data_chani_excl);
		pr_acu_uui         	(Acu_alert_rq_uui_size, Acu_alert_rq_a_uui);
		pr_acu_x_display    ((struct acu_display_list FAR *) Acu_alert_rq_a_display_list);

#		if CC_PAR_PROGRESS_IND_IE == ON
			pr_acu_progress_ind_list ((struct acu_progress_ind FAR *)&(Acu_alert_rq_ progress_ind));
#		endif

#		if CC_PAR_SIGNAL_IE == ON
			pr_acu_signal		(Acu_alert_rq_signal_val);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_ALERT_IN :
		pr_acu_alert_event	(Acu_alert_in_alert);
		pr_acu_redir_nb		((struct acu_redir_nb FAR *)&(Acu_alert_in_ redir_nb), Acu_alert_in_a_redir_nb);
		pr_acu_uui         	(Acu_alert_in_uui_size, Acu_alert_in_a_uui);
		pr_acu_facility    	(Acu_alert_in_facility_size, Acu_alert_in_a_facility);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_alert_in_a_display_list);

#		if CC_PAR_PROGRESS_IND_IE == ON
			pr_acu_progress_ind_list ((struct acu_progress_ind FAR *)&(Acu_alert_in_ progress_ind));
#		endif

#		if CC_PAR_SIGNAL_IE == ON
			pr_acu_signal		(Acu_alert_in_signal_val);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_PROGRESS_IN :
		pr_acu_progress_event(Acu_progress_in_event);
		pr_acu_chani_list	((struct chani_list FAR *)&Acu_progress_in_data_chani_nb);
		pr_acu_chan_id_excl	(Acu_progress_in_data_chani_excl);
		pr_acu_facility		(Acu_progress_in_facility_size, Acu_progress_in_a_facility);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_progress_in_a_display_list);

		if (Acu_progress_in_event == ACUEV_INTERWORKING) {
			pr_acu_cause       	(Acu_progress_in_cause);

		}

#		if CC_PAR_PROGRESS_IND_IE == ON
			pr_acu_progress_ind_list ((struct acu_progress_ind FAR *)&(Acu_progress_in_ progress_ind));
#		endif

#		if CC_PAR_SIGNAL_IE == ON
			pr_acu_signal		(Acu_progress_in_signal_val);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_CLEAR_RQ :
		pr_acu_cause		(Acu_clear_rq_cause);
		pr_acu_uui			(Acu_clear_rq_uui_size, Acu_clear_rq_a_uui);
		pr_acu_facility		(Acu_clear_rq_facility_size, Acu_clear_rq_a_facility);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_clear_rq_a_display_list);

#		if CC_PAR_SIGNAL_IE == ON
			pr_acu_signal	(Acu_clear_rq_signal_val);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_CLEAR_IN :
		pr_acu_ret_code    	(Acu_clear_in_ret_code);
		pr_acu_cause       	(Acu_clear_in_network_cause);
		pr_acu_uui         	(Acu_clear_in_uui_size, Acu_clear_in_a_uui);
		pr_acu_facility    	(Acu_clear_in_facility_size, Acu_clear_in_a_facility);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_clear_in_a_display_list);
		pr_acu_charging		(Acu_clear_in_charging_type, Acu_clear_in_charging_period, Acu_clear_in_charging_multi, Acu_clear_in_charging);

#		if CC_PAR_PROGRESS_IND_IE == ON
			pr_acu_progress_ind_list ((struct acu_progress_ind FAR *)&(Acu_clear_in_ progress_ind));
#		endif

#		if CC_PAR_SIGNAL_IE == ON
			pr_acu_signal	(Acu_clear_in_signal_val);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_CLEAR_RS :
		pr_acu_uui			(Acu_clear_rs_uui_size, Acu_clear_rs_a_uui);
		pr_acu_facility		(Acu_clear_rs_facility_size, Acu_clear_rs_a_facility);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_clear_rs_a_display_list);

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_CLEAR_CO :
		pr_acu_ret_code    	(Acu_clear_co_ret_code);
		pr_acu_cause       	(Acu_clear_co_network_cause);
		pr_acu_uui         	(Acu_clear_co_uui_size, Acu_clear_co_a_uui);
		pr_acu_facility    	(Acu_clear_co_facility_size, Acu_clear_co_a_facility);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_clear_co_a_display_list);
		pr_acu_charging		(Acu_clear_co_charging_type, Acu_clear_co_charging_period, Acu_clear_co_charging_multi, Acu_clear_co_charging);

#		if ARINC_NETWORKS == ON
			pr_acu_credit_card_status	(Acu_clear_co_credit_card_status);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_USER_INFO_RQ :
	case ACU_USER_INFO_IN :
		pr_acu_uui			(Acu_user_info_uui_size, Acu_user_info_a_uui);
		pr_acu_facility		(Acu_user_info_fac_size, Acu_user_info_a_fac);

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_SUSPEND_RQ :
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_suspend_a_display_list);
		break;

	case ACU_SUSPEND_CO :
		pr_acu_ok_nok		(Acu_suspend_ret_code);
		pr_acu_cause		(Acu_suspend_network_cause);
		pr_acu_x_display  	((struct acu_display_list FAR *) Acu_suspend_a_display_list);
		break;

	case ACU_RESUME_RQ :
		pr_acu_service		(Acu_resume_service);
		pr_acu_x_display  	((struct acu_display_list FAR *) Acu_resume_a_display_list);
		break;

	case ACU_RESUME_CO :
		pr_acu_service		(Acu_resume_service);
		pr_acu_ok_nok		(Acu_resume_ret_code);
		pr_acu_cause		(Acu_resume_network_cause);
		pr_acu_x_display  	((struct acu_display_list FAR *) Acu_resume_a_display_list);
		break;

	case ACU_FACILITY_RQ :
		pr_acu_fac_code		(Acu_facility_code);
		pr_acu_fac_action 	(Acu_facility_action);
		pr_acu_called_nb   	(ACU_MX_SZ_CALLED_NB + 1 + ACU_MX_SZ_CALLED_SUB_ADD + 1, Acu_facility_a_called_address, 0);
		pr_acu_cause		(Acu_facility_network_cause);
		pr_acu_x_display  	((struct acu_display_list FAR *) Acu_facility_a_display_list);
		pr_acu_call_appear 	(Acu_facility_call_appear);

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_FACILITY_IN :
		pr_acu_fac_code		(Acu_facility_code);
		pr_acu_fac_action 	(Acu_facility_action);
		pr_acu_called_nb   	(ACU_MX_SZ_CALLED_NB + 1 + ACU_MX_SZ_CALLED_SUB_ADD + 1, Acu_facility_a_called_address, 0);
		pr_acu_cause		(Acu_facility_network_cause);
		pr_acu_x_display   	((struct acu_display_list FAR *) Acu_facility_a_display_list);
		pr_acu_call_appear 	(Acu_facility_call_appear);

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_FACILITY_CO :
		pr_acu_fac_code 	(Acu_facility_code);
		pr_acu_fac_action 	(Acu_facility_action);
		pr_acu_called_nb   	(ACU_MX_SZ_CALLED_NB + 1 + ACU_MX_SZ_CALLED_SUB_ADD + 1, Acu_facility_a_called_address, 0);
		pr_acu_cause		(Acu_facility_network_cause);
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_facility_a_display_list);
		pr_acu_call_appear	(Acu_facility_call_appear);

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

		break;

	case ACU_INFORMATION_RQ :

#		if ARINC_NETWORKS == ON
			pr_acu_credit_card_nb 		(Acu_information_track_1_size, Acu_information_track_2_size, Acu_information_a_track_1, Acu_information_a_track_2);
			pr_acu_credit_card_status	(Acu_information_credit_card_status);
			pr_acu_queue_info			(Acu_information_nats_avail, Acu_information_satcom_avail, Acu_information_tfts_avail, Acu_information_nats_pos, Acu_information_satcom_pos, Acu_information_tfts_pos);
#		endif

		pr_acu_x_display	((struct acu_display_list FAR *) Acu_information_a_display_list);

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

#		if _CC_SPID_INFO == ON
			pr_acu_endpoint_id (Acu_information_p_endpoint_id);
			pr_acu_ces   	   (Acu_information_ces);
#		endif
		break;

	case ACU_INFORMATION_IN :
		pr_acu_x_display	((struct acu_display_list FAR *) Acu_information_a_display_list);
		pr_acu_charging		(Acu_information_charging_type, Acu_information_charging_period, Acu_information_charging_multi, Acu_information_charging);
		pr_acu_keypad		(Acu_information_keypad_size, Acu_information_a_keypad);

#		if ARINC_NETWORKS == ON
			pr_acu_credit_card_nb 		(Acu_information_track_1_size, Acu_information_track_2_size, Acu_information_a_track_1, Acu_information_a_track_2);
			pr_acu_credit_card_status	(Acu_information_credit_card_status);
			pr_acu_queue_info			(Acu_information_nats_avail, Acu_information_satcom_avail, Acu_information_tfts_avail, Acu_information_nats_pos, Acu_information_satcom_pos, Acu_information_tfts_pos);
#		endif

#		if ACU_PAR_EXTENDED_PRIM == ON
			pr_acu_ext_parms (p_data);
#		endif

#		if _CC_SPID_INFO == ON
			pr_acu_spid   	(Acu_information_spid_size, Acu_information_a_spid);
			pr_acu_ces   	(Acu_information_ces);
#		endif
		break;

	case ACU_INFO_RQ :
		break;

	case ACU_INIT_RQ :
		break;

	case ACU_INIT_CO :
		break;

	case ACU_SETPARM_RQ :
		break;

	case ACU_SETPARM_CO :
		break;

	case ACU_RS_MODE_RQ :
		break;

	case ACU_RS_MODE_CO :
		break;

	case ACU_TEST_RQ :
		break;

	case ACU_TEST_CO :
		break;

	case ACU_ERR_IN :
		pr_acu_err_in		(Acu_err_in_cause, Acu_err_in_diagnostic);
		break;

	}

	if (cc_ana_sdu_decoded == ON) {
		return (STOP);
	}

		/* Both decoded and hex dump */

	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

void pr_acu_interworking (interworking)
	uchar interworking;
{
	if (interworking == ON) {
		fprintf (f_out, "\n\t\t\t             (Interworking)");
	}
}

	/*--------------*/

void pr_acu_service (service)
	uchar service;
{
	fprintf (f_out, "\n\t\t\tService    : %s", Code_to_text (t_acu_service_id, service));
}

	/*--------------*/

void pr_acu_layer_1_info (service, p_layer_1_info)
	uchar service;
	struct layer_1_info FAR *p_layer_1_info;
{

	if ((service == ACU_V110_SERVICE) ||
		(service == ACU_V120_SERVICE) ||
		(service == ACU_DATA_56KBS_SERVICE)
	   ) {

		fprintf (f_out, "\n\t\t\t\tPh rate    : 0x%x", p_layer_1_info -> ph_rate);
		fprintf (f_out, "\n\t\t\t\tUser rate  : 0x%x", p_layer_1_info -> user_rate);
		fprintf (f_out, "\n\t\t\t\tSyn/asyn   : 0x%x", p_layer_1_info -> syn_asyn);
		fprintf (f_out, "\n\t\t\t\tStop bits  : 0x%x", p_layer_1_info -> stop_bits);
		fprintf (f_out, "\n\t\t\t\tData bits  : 0x%x", p_layer_1_info -> data_bits);
		fprintf (f_out, "\n\t\t\t\tParity     : 0x%x", p_layer_1_info -> parity);
	}
}

	/*--------------*/

#if CC_PAR_SEMI_PERMANENT_CIRCUITS == ON

void pr_acu_establish (establish)
	uchar establish;
{
	if (establish) {
		fprintf (f_out, "\n\t\t\tEstablish  : Semi-permanent circuit");
	}
}

#endif

	/*--------------*/

void pr_acu_chan_id (data_chani)
	uchar data_chani;
{
	if (data_chani == 0) {
		fprintf (f_out, "\n\t\t\tChan id    : --");

	} else {

		fprintf (f_out, "\n\t\t\tChan id    : B%d", data_chani);
	}
}

	/*--------------*/

void pr_acu_chan_id_excl (pref_excl)
	uchar pref_excl;
{
	fprintf (f_out, pref_excl == OFF ? "-preferred" : "-exclusive");
}

	/*--------------*/

void pr_acu_chani_list (p_chani_list)
	struct chani_list FAR *p_chani_list;
{
	uchar i;

	if ((p_chani_list -> nb == 0) && (p_chani_list -> tab[0].chan_id == 0)) {
		fprintf (f_out, "\n\t\t\tChani list : (empty)");
		return;
	}

	fprintf (f_out, "\n\t\t\tChani list : ");

	i = 0;

	do {

		fprintf (f_out, "(%d,B%d) ", p_chani_list -> tab[i].nai, p_chani_list -> tab[i].chan_id);
		i++;

	} while ((i < p_chani_list -> nb) &&
			 (i < ACU_MX_CHANI)       &&
			 (p_chani_list -> tab[i].chan_id != 0));

}

	/*--------------*/

void pr_acu_charging_rq (charging_rq)
	uchar charging_rq;
{
	if (charging_rq == ON) {
		fprintf (f_out, "\n\t\t\tCharging requested");
	}
}

	/*--------------*/

void pr_acu_charging (type, period, multi, charging)
	uchar type;
	uchar period;
	uchar multi;
	long charging;
{

	if (type != 0xff) {
		fprintf (f_out, "\n\t\t\tCharging type       : %x", type);
		fprintf (f_out, "\n\t\t\tCharging period     : %x", period);
		fprintf (f_out, "\n\t\t\tCharging multiplier : %x", multi);
		fprintf (f_out, "\n\t\t\tCharging nb of units: %lu", charging);
	}
}

	/*--------------*/

void pr_acu_date_time (a_date_time)
	struct acu_date_time FAR *a_date_time;
{

	if (a_date_time -> available != OFF) {
		fprintf (f_out, "\n\t\t\tDate/Time  : %02d/%02d/%02d, %02dh%02dmn%02ds",
				 a_date_time -> day,
				 a_date_time -> month,
				 a_date_time -> year,
				 a_date_time -> hour,
				 a_date_time -> minute,
				 a_date_time -> second
				 );
	}
}

	/*--------------*/

void pr_acu_transfer_rq (transfer_rq, transfer_conn_id)
	uchar transfer_rq;
	add_t transfer_conn_id;
{
	if (transfer_rq == ON) {
		fprintf (f_out, "\n\t\t\tTransfer requested (%d)", transfer_conn_id);
	}
}

	/*--------------*/

void pr_acu_identification_denied_rq (identification_denied_rq)
	uchar identification_denied_rq;
{
	if (identification_denied_rq == ON) {
		fprintf (f_out, "\n\t\t\tIdentification denied requested");
	}
}

	/*--------------*/

void pr_acu_string (str_size, a_str)
	uchar str_size;
	char FAR *a_str;
{
	fprintf (f_out, "'");

	while ((str_size != 0) && (*a_str != 0)) {
		fprintf (f_out, "%c", *a_str);
		str_size--;
		a_str++;
	}

	fprintf (f_out, "'");
}

	/*--------------*/

void pr_acu_called_nb (nb_size, a_nb, nb_type)
	uchar nb_size;
	char FAR *a_nb;
	uchar nb_type;
{
	if (nb_size != 0) {
		fprintf (f_out, "\n\t\t\tCalled nb  : ");
		pr_acu_string  (nb_size, a_nb);
		pr_acu_nb_type (nb_type);
	}
}

	/*--------------*/

#if _CC_SPID_INFO == ON /* { */

void pr_acu_endpoint_id (p_endpoint_id)
	struct acu_endpoint_id p_endpoint_id;
{
	if (p_endpoint_id.action != 0) {
	    fprintf (f_out, "\n\t\t\tAction       : %x", p_endpoint_id.action);
	    fprintf (f_out, "\n\t\t\tUSID         : %x", p_endpoint_id.usid);
	    fprintf (f_out, "\n\t\t\tTID          : %x", p_endpoint_id.tid);
	    fprintf (f_out, "\n\t\t\tInterpreter  : %x", p_endpoint_id.interpreter);
	}
}

void pr_acu_spid (spid_size, a_spid)
	uchar spid_size;
	char FAR *a_spid;
{
	if (spid_size != 0) {
		fprintf (f_out, "\n\t\t\tSPID  : ");
		pr_acu_string  (spid_size, a_spid);
	}
}

void pr_acu_ces (ces)
	uchar ces;
{
	fprintf (f_out, "\n\t\t\tCES   : %x", ces);
}

#endif /* } */

	/*--------------*/

void pr_acu_digit (digit_size, a_digit)
	uchar digit_size;
	char FAR *a_digit;
{
	if (digit_size != 0) {
		fprintf (f_out, "\n\t\t\tDigits     : ");
		pr_acu_string (digit_size, a_digit);
	}
}

	/*--------------*/

void pr_acu_calling_nb (nb_size, a_nb, nb_type, nb_pres, nb_screen)
	uchar nb_size;
	char FAR *a_nb;
	uchar nb_type;
	uchar nb_pres;
	uchar nb_screen;
{
	if ((nb_size != 0) || (nb_pres != ACU_NB_PRES_ALLOWED)) {
		fprintf (f_out, "\n\t\t\tCalling nb : ");
		pr_acu_string    (nb_size, a_nb);
		pr_acu_nb_pres   (nb_pres);
		pr_acu_nb_type   (nb_type);
		pr_acu_nb_screen (nb_screen);
	}
}

	/*--------------*/

void pr_acu_redir_nb (p_acu_redir_nb, p_acu_redir_nb_string)
	struct acu_redir_nb FAR *p_acu_redir_nb;
	char                FAR *p_acu_redir_nb_string;
{
	if (p_acu_redir_nb -> size != 0) {
		fprintf (f_out, "\n\t\t\tRedir nb   : ");
		pr_acu_string    (p_acu_redir_nb -> size, p_acu_redir_nb_string);
		pr_acu_nb_pres   (p_acu_redir_nb -> pres);
		pr_acu_nb_type   (p_acu_redir_nb -> type);
		pr_acu_nb_screen (p_acu_redir_nb -> screen);
		pr_acu_nb_reason (p_acu_redir_nb -> reason);
	}
}

	/*--------------*/

CONST struct code_text acu_nb_type[] = {
	{ACU_NB_TYPE_INTERNATIONAL, "International"},
	{ACU_NB_TYPE_NATIONAL,      "National"},
	{ACU_NB_TYPE_NET_SPF,       "Network-specific"},
	{ACU_NB_TYPE_SUBSCRIBER,    "Subscriber"},
	{ACU_NB_TYPE_ABBREVIATED,   "Abbreviated"},
	{ACU_NB_TYPE_UNKNOWN,       "Unknown"},				/* = 0 */
};

void pr_acu_nb_type (nb_type)
	uchar nb_type;
{
	fprintf (f_out, " (Type:%s)", Code_to_text (acu_nb_type, nb_type));
}

	/*--------------*/

CONST struct code_text acu_nb_screen[] = {
	{ACU_NB_SCREEN_NETWORK_PROVIDED, "Network-provided"},
	{ACU_NB_SCREEN_USER_PASSED,      "User-provided/Passed"},
	{ACU_NB_SCREEN_USER_FAILED,      "User-provided/Failed"},
	{ACU_NB_SCREEN_USER_PROVIDED,    "User-provided"},	/* = 0 */
};

void pr_acu_nb_screen (nb_screen)
	uchar nb_screen;
{
	fprintf (f_out, " (%s)", Code_to_text (acu_nb_screen, nb_screen));
}

	/*--------------*/

CONST struct code_text acu_nb_pres[] = {
	{ACU_NB_PRES_RESTRICTED,      "restricted"},
	{ACU_NB_PRES_NOT_AVAILABLE,   "not available"},
	{G_2 (1,1),                   "reserved"},
	{ACU_NB_PRES_ALLOWED,         "allowed"},			/* = 0 */
};

void pr_acu_nb_pres (nb_pres)
	uchar nb_pres;
{
	if (nb_pres != ACU_NB_PRES_ALLOWED) {
		fprintf (f_out, " (Presentation %s)", Code_to_text (acu_nb_pres, nb_pres));
	}
}

	/*--------------*/

CONST struct code_text acu_nb_reason[] = {
	{ACU_NB_REASON_CALL_FORWARDING_BUSY,      "busy"},
	{ACU_NB_REASON_CALL_FORWARDING_NO_REPLY,  "no reply"},
	{ACU_NB_REASON_CALL_FORWARDING_DTE_OUT,   "DTE out"},
	{ACU_NB_REASON_CALL_FORWARDING_BY_CALLED, "by called"},
	{ACU_NB_REASON_CALL_TRANSFER,             "transfer"},
	{ACU_NB_REASON_CALL_PICKUP,               "pickup"},
	{ACU_NB_REASON_CALL_FORWARDING_UNCONDITIONAL,"unconditional"},
	{ACU_NB_REASON_UNKNOWN,                   "unknown"},/* = 0 */
};

void pr_acu_nb_reason (nb_reason)
	uchar nb_reason;
{
	fprintf (f_out, " (Reason: %s)", Code_to_text (acu_nb_reason, nb_reason));
}

	/*--------------*/

void pr_acu_display (display_size, a_display)
	uchar display_size;
	char FAR *a_display;
{
	if (display_size != 0) {
		fprintf (f_out, "\n\t\t\tDisplay    : ");
		pr_acu_string (display_size, a_display);
	}
}

	/*--------------*/

void pr_acu_x_display (a_display)
	struct acu_display_list FAR *a_display;
{
	uchar i;

	if (a_display->nb != 0) {

		for (i = 0; i < a_display->nb; i++) {

			if (a_display->size[i] != 0) {

				if (i == 0) {
					fprintf (f_out, "\n\t\t\tDisplay    : ");

				} else {

					fprintf (f_out, "\n\t\t\tDisplay #%d   : ", i);
				}

				pr_acu_string (a_display->size [i],(char FAR *)a_display->p_display[i]);
			}
		}
	}
}

	/*--------------*/

void pr_acu_keypad (keypad_size, a_keypad)
	uchar keypad_size;
	char FAR *a_keypad;
{
	if (keypad_size != 0) {
		fprintf (f_out, "\n\t\t\tKeypad     : ");
		pr_acu_string (keypad_size, a_keypad);
	}
}

	/*--------------*/

void pr_acu_call_appear (call_appear)
	uchar call_appear;
{


	if (call_appear != 0) {

		fprintf (f_out, "\n\t\t\tCall appear: %d", call_appear);
	}
}

	/*--------------*/

void pr_acu_facility (facility_size, a_facility)
	uchar facility_size;
	char FAR *a_facility;
{
	if (facility_size != 0) {
		fprintf (f_out, "\n\t\t\tFacility   : ");
		pr_acu_string (facility_size, a_facility);
	}
}

	/*--------------*/

void pr_acu_uui (uui_size, a_uui)
	uchar uui_size;
	char FAR *a_uui;
{
	if (uui_size != 0) {
		fprintf (f_out, "\n\t\t\tUUI        : ");
		pr_acu_string (uui_size, a_uui);
	}
}

	/*--------------*/

void pr_acu_sending_complete (on_off)
	uchar on_off;
{
	if (on_off != OFF) {
		fprintf (f_out, "\n\t\t\tSending-complete");
	}
}

	/*--------------*/

void pr_acu_alert_event (event)
	uchar event;
{
	fprintf (f_out, "\n\t\t\tEvent      : %s", Code_to_text (t_acu_alert_event, event));
}

	/*--------------*/

void pr_acu_progress_event (event)
	uchar event;
{
	fprintf (f_out, "\n\t\t\tEvent      : %s", Code_to_text (t_acu_progress_event, event));
}

	/*--------------*/

void pr_acu_cause (cause)
	uchar cause;
{
	fprintf (f_out, "\n\t\t\tCause      : 0x%x", cause);
}

	/*--------------*/

void pr_acu_ret_code (ret_code)
	uchar ret_code;
{
	fprintf (f_out, "\n\t\t\tReturn code: %s", Code_to_text (t_ret_code, ret_code));
}

	/*--------------*/

void pr_acu_ok_nok (ok_nok)
	uchar ok_nok;
{
	fprintf (f_out, "\n\t\t\tReturn code: %s", ok_nok == OK ? "OK" : "NOK");
}

	/*--------------*/

void pr_acu_err_in (error_cause, error_diag)
	uchar error_cause;
	uchar error_diag;
{
	fprintf (f_out, "\n\t\t\tError cause: %s", Code_to_text (t_acu_err_in_cause, error_cause));

	switch (error_cause) {

		case ACUER_PRIMITIVE_CODE:
		case ACUER_PRIMITIVE_NOT_IMPLEMENTED:
		case ACUER_UNEXPECTED_PRIMITIVE:
			fprintf (f_out, "\n\t\t\tError diag : %s", Code_to_text (acu_prim, error_diag));
			break;

		case ACUER_NO_TIMER_AVAILABLE:
			break;

		default:
			fprintf (f_out, "\n\t\t\tError diag : %s", Code_to_text (t_acu_err_in_diag, error_diag));
			break;
	}

}

	/*--------------*/

void pr_acu_fac_code (code)
	uchar code;
{
	fprintf (f_out, "\n\t\t\tFac code   : %s", Code_to_text (t_acu_facility_code, code));
}

	/*--------------*/

void pr_acu_fac_action (action)
	uchar action;
{
	fprintf (f_out, "\n\t\t\tFac action : %s", Code_to_text (t_acu_facility_action, action));
}

	/*--------------*/

void pr_acu_progress_ind (descr, loc)
	uchar descr;
	uchar loc;
{
	if (loc != ACU_BYTE_VAL_NIL) {
		fprintf (f_out, "\n\t\t\tProgress location   : %x", loc);
		fprintf (f_out, "\n\t\t\tProgress description: %x", descr);
	}
}

	/*--------------*/
    
void pr_acu_progress_ind_list (a_prog)
	struct acu_progress_ind FAR *a_prog;
{
	uchar i;

	if (a_prog->nb != 0) {

		for (i = 0; i < a_prog->nb; i++) {

			pr_acu_progress_ind (a_prog->t[i].descr,a_prog->t[i].loc);
		}
	}
}

	/*--------------*/

void pr_acu_signal (signal_val)
	uchar signal_val;
{
	fprintf (f_out, "\n\t\t\tSignal value : %x", signal_val);
}

/*--------------------------------------------------------------------------*/

#if ACU_PAR_EXTENDED_PRIM == ON /* { */

#if NEW_FCT_STYLE == ON
	void pr_acu_ext_fac_asn1                (uchar FAR *p_data);
	void pr_acu_ext_fac_asn1_component      (uchar FAR *p_ss_component);
	void pr_acu_ext_fac_asn1_operation      (uchar FAR *p_ss_component);
	void pr_acu_ext_fac_asn1_reject_problem (uchar FAR *p_ss_component);
	void pr_acu_aoc_recorded_u_list         (uchar FAR *p_ss_component, uchar FAR *p_ss_info);
	void pr_acu_aocs_cur_info_list          (uchar FAR *p_ss_component, uchar FAR *p_ss_info);
#else
	void pr_acu_ext_fac_asn1                ();
	void pr_acu_ext_fac_asn1_component      ();
	void pr_acu_ext_fac_asn1_operation      ();
	void pr_acu_ext_fac_asn1_reject_problem ();
	void pr_acu_aoc_recorded_u_list         ();
	void pr_acu_aocs_cur_info_list          ();
#endif

#include "acu_ss.h"

void pr_acu_ext_parms (p_data)
	uchar FAR *p_data;
{
	uchar FAR *p_ext_data;
	uchar i;

	if (Acu_ext_descr_nb == 0) {
		return;
	}

		/* 1. display acu_ext_descr structure */

	fprintf (f_out, "\n\t\t\tExtended parms: %d parms, total lgth = %d",
					Acu_ext_descr_nb, Acu_ext_descr_lgth);

		/* 2. display each extended parameter */

	p_ext_data = Acu_ext_descr_address;

	for (i = Acu_ext_descr_nb; i > 0; i--) {
		pr_acu_ext_element (p_ext_data);
		p_ext_data += Acu_ext_lgth;
	}

		/* check that the general descriptor is coherent with each parameter */

	if ((p_ext_data - Acu_ext_descr_address) != Acu_ext_descr_lgth) {
		fprintf (f_out, "\n\n\t\t\t!!!EXTENDED DATA ERROR !!!\n\n\n");
	}

}

	/*----*/

void pr_acu_ext_element (p_ext_data)
	uchar FAR *p_ext_data;
{

	switch (Acu_ext_id) {

		case ACU_EXT_LLC :	/* LLC extended data */
			fprintf (f_out, "\n\t\t\t\tEXT_LLC: (lgth = %d)", Acu_ext_lgth);
			fprintf (f_out, "\n\t\t\t\t\tcoding_std  = %d", Acu_ext_llc(coding_std));
			fprintf (f_out, "\n\t\t\t\t\ttrf_cap     = %d", Acu_ext_llc(trf_cap));
			fprintf (f_out, "\n\t\t\t\t\tout_band_neg= %d", Acu_ext_llc(out_band_neg));
			fprintf (f_out, "\n\t\t\t\t\ttrf_mode    = %d", Acu_ext_llc(trf_mode));
			fprintf (f_out, "\n\t\t\t\t\ttrf_rate    = %d", Acu_ext_llc(trf_rate));
			fprintf (f_out, "\n\t\t\t\t\tstructure   = %d", Acu_ext_llc(structure));
			fprintf (f_out, "\n\t\t\t\t\tconfig      = %d", Acu_ext_llc(config));
			fprintf (f_out, "\n\t\t\t\t\testablish   = %d", Acu_ext_llc(establish));
			fprintf (f_out, "\n\t\t\t\t\tsymmetry    = %d", Acu_ext_llc(symmetry));
			fprintf (f_out, "\n\t\t\t\t\tdest_rate   = %d", Acu_ext_llc(dest_rate));
			fprintf (f_out, "\n\t\t\t\t\tl1_protocol = %d", Acu_ext_llc(l1_protocol));
			fprintf (f_out, "\n\t\t\t\t\tsyn_asyn    = %d", Acu_ext_llc(syn_asyn));
			fprintf (f_out, "\n\t\t\t\t\tnegotiation = %d", Acu_ext_llc(negotiation));
			fprintf (f_out, "\n\t\t\t\t\tuser_rate   = %d", Acu_ext_llc(user_rate));
			fprintf (f_out, "\n\t\t\t\t\tinter_rate  = %d", Acu_ext_llc(inter_rate));
			fprintf (f_out, "\n\t\t\t\t\tnic_tx      = %d", Acu_ext_llc(nic_tx));
			fprintf (f_out, "\n\t\t\t\t\tnic_rx      = %d", Acu_ext_llc(nic_rx));
			fprintf (f_out, "\n\t\t\t\t\tfc_tx       = %d", Acu_ext_llc(fc_tx));
			fprintf (f_out, "\n\t\t\t\t\tfc_rx       = %d", Acu_ext_llc(fc_rx));
			fprintf (f_out, "\n\t\t\t\t\tra_hdr      = %d", Acu_ext_llc(ra_hdr));
			fprintf (f_out, "\n\t\t\t\t\tmulti_frame = %d", Acu_ext_llc(multi_frame));
			fprintf (f_out, "\n\t\t\t\t\top_mode     = %d", Acu_ext_llc(op_mode));
			fprintf (f_out, "\n\t\t\t\t\tlli_negot   = %d", Acu_ext_llc(lli_negot));
			fprintf (f_out, "\n\t\t\t\t\tassign      = %d", Acu_ext_llc(assign));
			fprintf (f_out, "\n\t\t\t\t\tband_negot  = %d", Acu_ext_llc(band_negot));
			fprintf (f_out, "\n\t\t\t\t\tstop_bits   = %d", Acu_ext_llc(stop_bits));
			fprintf (f_out, "\n\t\t\t\t\tdata_bits   = %d", Acu_ext_llc(data_bits));
			fprintf (f_out, "\n\t\t\t\t\tparity      = %d", Acu_ext_llc(parity));
			fprintf (f_out, "\n\t\t\t\t\tduplex      = %d", Acu_ext_llc(duplex));
			fprintf (f_out, "\n\t\t\t\t\tmodem       = %d", Acu_ext_llc(modem));
			fprintf (f_out, "\n\t\t\t\t\tl2_protocol = %d", Acu_ext_llc(l2_protocol));
			fprintf (f_out, "\n\t\t\t\t\tl2_option   = %d", Acu_ext_llc(l2_option));
			fprintf (f_out, "\n\t\t\t\t\tl3_protocol = %d", Acu_ext_llc(l3_protocol));
			fprintf (f_out, "\n\t\t\t\t\tl3_option   = %d", Acu_ext_llc(l3_option));
			break;

		case ACU_EXT_FAC_ASN1 :	/* CUG extended data */
			fprintf (f_out, "\n\t\t\t\tEXT_FAC_ASN1: (lgth = %d)", Acu_ext_lgth);
			fprintf (f_out, "\n\t\t\t\t\tcomponent_nb = %d", Acu_ext_fac_asn1(component_nb));
			pr_acu_ext_fac_asn1 (p_ext_data + Acu_ext_fac_asn1_size);
/*			pr_data (p_ext_data + Acu_ext_fac_asn1_size, Acu_ext_lgth - Acu_ext_fac_asn1_size, Acu_ext_lgth - Acu_ext_fac_asn1_size);*/
			break;

		case ACU_EXT_CUG :	/* CUG extended data */
			fprintf (f_out, "\n\t\t\t\tEXT_CUG: (lgth = %d)", Acu_ext_lgth);
			fprintf (f_out, "\n\t\t\t\t\tinvoke_id   = 0x%x", Acu_ext_cug(invoke_id));
			fprintf (f_out, "\n\t\t\t\t\toutAccessRq = 0x%x", Acu_ext_cug(out_access_rq));
			fprintf (f_out, "\n\t\t\t\t\tindex       = 0x%x", Acu_ext_cug(index));
			break;

		case ACU_EXT_FAC_RETURN_ERR :	/* 'Facility RETURN ERROR' extended data */
			fprintf (f_out, "\n\t\t\t\tEXT_FAC_RETURN_ERR: (lgth = %d)", Acu_ext_lgth);
			fprintf (f_out, "\n\t\t\t\t\tinvoke_id   = 0x%x", Acu_ext_fac_return_err(invoke_id));
			fprintf (f_out, "\n\t\t\t\t\terror_id    = %d", Acu_ext_fac_return_err(error_id));
			break;

		case ACU_EXT_FAC_REJECT :	/* 'Facility REJECT' extended data */
			fprintf (f_out, "\n\t\t\t\tEXT_FAC_RETURN_ERR: (lgth = %d)", Acu_ext_lgth);
			if (Acu_ext_fac_reject(present)) {
				fprintf (f_out, "\n\t\t\t\t\tinvoke_id   = 0x%x", Acu_ext_fac_reject(invoke_id));
			} else {
				fprintf (f_out, "\n\t\t\t\t\tNo invoke_id");
			}
			fprintf (f_out, "\n\t\t\t\t\tpb_type     = 0x%x", Acu_ext_fac_reject(pb_type));
			fprintf (f_out, "\n\t\t\t\t\tpb_val      = 0x%x", Acu_ext_fac_reject(pb_val));
			break;

		default:
			fprintf (f_out, "\n\t\t\t\tEXT_???: (lgth = %d)", Acu_ext_lgth);
			break;

	}

}

	/*----*/

void pr_acu_ext_fac_asn1 (p_data)
	uchar FAR *p_data;
{
	uchar FAR *p_ss_component;		/* component pointer */

		/*
		 * acu_ss.h/2.2:
		 * a. Set p_ss_component to point to the component header;
		 */

	p_ss_component = p_data;

	while (1) {

			/*
			 * b. Use the 'Acu_ss_component(field_name)' macros to read the fields
			 *	of the component header;
			 *
			 * c. if 'Acu_ss_is_operation_available()' is true
			 *	  then
			 *      // an operation is available;
			 *      read the operation; // See 3.2.
			 *	  else
			 *      // no operation is attached to the component
			 */

		pr_acu_ext_fac_asn1_component (p_ss_component);

			/*
			 * d. if 'Acu_ss_is_next_comp_available()' is true
			 *    then
			 *      // another component is available;
			 *      call 'Acu_ss_get_next_comp_address()' to update the
			 *      'p_ss_component' pointer to point to the next
			 *      component header;
			 *      go to b.;
			 *    else
			 *      // no more component to be read,
			 *      // end of facility processing.
			 */

		if (!Acu_ss_is_next_comp_available()) {
			break;
		}

		Acu_ss_get_next_comp_address ();

	} /* end while ()*/

}

	/*-------*/

			/* component tag */

CONST_ARRAY struct code_text ACU_SS_COMPONENT_TAG_TEXT[] = {
	{FAC_INVOKE,			"Invoke"},
	{FAC_RETURN_RESULT,		"ReturnResult"},
	{FAC_RETURN_ERROR,		"ReturnError"},
	{FAC_REJECT,			"Reject"},

	{0,						"NONAME"}
};

			/* error value in ReturnErrorComponent */

CONST_ARRAY struct code_text ACU_SS_ERROR_VAL_TEXT[] = {

#  if ACU_PAR_EXT_CUG == ON
	{SS_ERR_CUG_INV_OR_UNREG_INDEX,			"invalid or unregistered CUG index"},
	{SS_ERR_CUG_RQ_SRV_VIOL_CONSTR,			"requested service violates CUG Constraints"},
	{SS_ERR_CUG_OUT_CALL_BARRED,			"outgoing calls barred within CUG"},
	{SS_ERR_CUG_INC_CALL_BARRED,			"incoming calls barred within CUG"},
	{SS_ERR_CUG_USER_NOT_MEMBER,			"user not member of CUG"},
	{SS_ERR_CUG_FAC_SUB_CL_INCONS,			"inconsistency in facility and subscriber class"},
#  endif

	{SS_ERR_AOC_NO_CH_INF_AVAIL,			"no charging info available"},

	{SS_ERR_NOT_AVAILABLE,					"SS not available"},
	{SS_ERR_NOT_IMPLEMENTED,				"SS not implemented"},
	{SS_ERR_INVALID_SERVED_NB,				"invalid served user number"},
	{SS_ERR_INVALID_CALL_STATE,				"invalid call state"},
	{SS_ERR_SERVICE_NOT_PROVIDED,			"basic service not provided"},
	{SS_ERR_NOT_INCOMING_CALL,				"not incoming call"},
	{SS_ERR_INTERAC_NOT_ALLOWED,			"SS interaction not allowed"},
	{SS_ERR_RESOURCE_UNAVAILABLE,			"resource not available"},
	{SS_ERR_NOT_SUBSCRIBED,					"service not subscribed"},

	{0,										"NONAME"}
};

void pr_acu_ext_fac_asn1_component (p_ss_component)
	uchar FAR *p_ss_component;
{
	uchar      component_tag;		/* component tag */

		/*
		 * acu_ss.h/2.2:
		 *
		 * b. Use the 'Acu_ss_component(field_name)' macros to read the fields
		 *	of the component header;
		 *
		 * c. if 'Acu_ss_is_operation_available()' is true
		 *	  then
		 *      // an operation is available;
		 *      read the operation; // See 3.2.
		 *	  else
		 *      // no operation is attached to the component
		 */

	component_tag = Acu_ss_component (component_tag);

	fprintf (f_out, "\n\n\tCOMPONENT: %s {\n\t\t", Code_to_text (ACU_SS_COMPONENT_TAG_TEXT, component_tag));

	switch (component_tag) {

			/*--------------------------------------------------------*
			 * FAC_INVOKE component:
			 *
			 * - 'invoke_id': invoke id;
			 * - if 'inv_or_lk_id_or_res_presence' == PRESENT
			 *   then
			 *      'lk_id_or_pb_tag' is the Linked-id;
			 *   else
			 *      no Linked-id
			 *
			 * - 'op_err_pb_identifier': Operation-id;
			 * - read the Operation data.
			 *
			 *--------------------------------------------------------*/

		case FAC_INVOKE:
			fprintf (f_out, "invoke id = %d", Acu_ss_component (invoke_id));

				/* display the Linked-id if present */

			if (Acu_ss_component (inv_or_lk_id_or_res_presence) == PRESENT) {
				fprintf (f_out, ", linked id = %d", Acu_ss_component (lk_id_or_pb_tag));

			} else {

				fprintf (f_out, ", No linked ID");
			}

				/* display the Operation-id and Operation data */

			pr_acu_ext_fac_asn1_operation (p_ss_component);
			break;

			/*--------------------------------------------------------*
			 * FAC_RETURN_RESULT component:
			 *
			 * - 'invoke_id': invoke id;
			 * - if 'inv_or_lk_id_or_res_presence' == PRESENT
			 *   then
			 *      some data is present:
			 *      - 'op_err_pb_identifier': Operation-id;
			 * 		- read the Operation data.
			 *   else
			 *      No additional data (no Operation)
			 *
			 *--------------------------------------------------------*/

		case FAC_RETURN_RESULT :
			fprintf (f_out, "invoke id = %d", Acu_ss_component (invoke_id));

			if (Acu_ss_component (inv_or_lk_id_or_res_presence) == ABSENT) {
				fprintf (f_out, ", no data");
				break;
			}

				/* display the Operation-id and Operation data */

			pr_acu_ext_fac_asn1_operation (p_ss_component);
			break;

			/*--------------------------------------------------------*
			 * FAC_RETURN_ERROR component:
			 *
			 * - 'invoke_id': invoke id;
			 * - 'op_err_pb_identifier': Error-id;
			 * No additional data (no Operation)
			 *
			 *--------------------------------------------------------*/

		case FAC_RETURN_ERROR :
			fprintf (f_out, "invoke id = %d", Acu_ss_component (invoke_id));
			fprintf (f_out, ", error = %s", Code_to_text (ACU_SS_ERROR_VAL_TEXT, Acu_ss_component (op_err_pb_identifier)));
			break;

			/*--------------------------------------------------------*
			 * FAC_REJECT component:
			 *
			 * - if 'inv_or_lk_id_or_res_presence' == PRESENT
			 *   then
			 *      - 'invoke_id': invoke id;
			 *   else
			 *      no Invoke-id
			 *
			 * - 'lk_id_or_pb_tag': Problem-tag;
			 * - 'op_err_pb_identifier': Problem-value,
			 *                           according to Problem-tag
			 * No additional data (no Operation)
			 *
			 *--------------------------------------------------------*/

		case FAC_REJECT :

				/* display the Invoke-id if present */

			if (Acu_ss_component (inv_or_lk_id_or_res_presence) == PRESENT) {
				fprintf (f_out, "invoke id = %d", Acu_ss_component (invoke_id));

			} else {

				fprintf (f_out, "no invoke id");
			}

				/* set code-text pointer to Table of strings for Problem Value according to Problem type */

			pr_acu_ext_fac_asn1_reject_problem (p_ss_component);
			break;

		default:
			break;

	}

	fprintf (f_out, "\n\t}");

}

	/*-----------*/

			/* operation identifiers */

CONST_ARRAY struct code_text ACU_SS_OP_VAL_TEXT[] = {

#  if ACU_PAR_EXT_CUG == ON
	{ACU_OP_CUG_CALL,			"Closed User Group Call"},
#  endif

	{ACU_OP_AOC_CHARGING_RQ,	"AOC Charging Request"},

	{ACU_OP_AOCS_CURRENCY,		"AOC-S Currency"},
	{ACU_OP_AOCS_SPECIAL_ARR,	"AOC-S Special Arr"},

	{ACU_OP_AOCD_CURRENCY,		"AOC-D Currency"},
	{ACU_OP_AOCD_CHARGING_UNIT,	"AOC-D Charging"},

	{ACU_OP_AOCE_CURRENCY,		"AOC-E Currency"},
	{ACU_OP_AOCE_CHARGING_UNIT,	"AOC-E Charging"},

	{0,							"NONAME"}
};

			/* ChargingCase in AOC Charging Request operation */

CONST_ARRAY struct code_text ACU_AOC_CHARGING_CASE_TEXT[] = {

	{ACU_AOC_CHARGING_DURING_CALL,	"during a call"},
	{ACU_AOC_CHARGING_CALL_END,		"at the end of a call"},
	{ACU_AOC_CHARGING_CALL_SETUP,	"at call set-up"},

	{0,								"NONAME"}
};

			/* type of RESULT in AOC Charging Request operation */

CONST_ARRAY struct code_text ACU_AOC_CHARGING_RQ_RES_TEXT[] = {

	{ACU_AOCS_SPECIAL_ARR_INFO,		"AOCS special arr info"},
	{ACU_AOCS_CURRENCY_INFO_RQ,		"AOCS currency info list"},
	{ACU_AOC_CHARGING_INFO_FOLLOWS,	"charging info follows"},

	{0,								"NONAME"}
};

			/* type of ARGUMENT in AOCS Currency operation */

CONST_ARRAY struct code_text ACU_AOCS_CUR_ARG_TYPE_TEXT[] = {

	{ACU_AOCS_CURRENCY_INFO,			"Currency Info List"},
	{ACU_AOCS_CHARG_NOT_AVAIL,       	"charge not available"},

	{0,									"NONAME"}
};

			/* type of ARGUMENT in AOCS Special Arr operation */

CONST_ARRAY struct code_text ACU_AOCS_SPEC_ARR_TYPE_TEXT[] = {

	{ACU_AOCS_SP_ARR_INFO,              "Special Arr Info"},
	{ACU_AOCS_SP_ARR_CHARG_NOT_AVAIL,	"charge not available"},

	{0,									"NONAME"}
};

			/* type of ARGUMENT in AOCD Currency operation */

CONST_ARRAY struct code_text ACU_AOCD_CUR_ARG_TYPE_TEXT[] = {

	{ACU_AOCD_CURR_FREE_OF_CHARGE,		"free of charge"},
	{ACU_AOCD_SPECIFIC_CURRENCY,		"specific currency"},
	{ACU_AOCD_CHARGE_NOT_AVAILABLE,		"charge not available"},

	{0,									"NONAME"}
};

			/* type of ARGUMENT in AOCD ChargingUnit operation */

CONST_ARRAY struct code_text ACU_AOCD_CH_U_ARG_TYPE_TEXT[] = {

	{ACU_AOCD_FREE_OF_CHARGE,			"free of charge"},
	{ACU_AOCD_SPECIFIC_CHARGING_UNIT,	"specific charging units"},
	{ACU_AOCD_CHARGING_NOT_AVAILABLE,	"charge not available"},

	{0,									"NONAME"}
};

			/* AOCD Billing ID */

CONST_ARRAY struct code_text ACU_AOCD_BILL_ID_TEXT[] = {

	{255,								"no Billing ID"},
	{ACU_AOCD_BILL_ID_REVERSE,			"reverse charging"},
	{ACU_AOCD_BILL_ID_CREDIT_CARD,		"credit card charging"},
	{ACU_AOCD_BILL_ID_NORMAL,			"normal charging"},

	{0,									"NONAME"}
};

			/* type of ARGUMENT in AOCE Currency operation */

CONST_ARRAY struct code_text ACU_AOCE_CUR_ARG_TYPE_TEXT[] = {

	{ACU_AOCE_CURR_FREE_OF_CHARGE,		"free of charge"},
	{ACU_AOCE_SPECIFIC_CURRENCY,		"specific currency"},
	{ACU_AOCE_CHARGE_NOT_AVAILABLE,		"charge not available"},

	{0,									"NONAME"}
};

			/* type of ARGUMENT in AOCE ChargingUnit operation */

CONST_ARRAY struct code_text ACU_AOCE_CH_U_ARG_TYPE_TEXT[] = {

	{ACU_AOCE_FREE_OF_CHARGE,			"free of charge"},
	{ACU_AOCE_SPECIFIC_CHARGING_UNIT,	"specific charging units"},
	{ACU_AOCE_CHARGING_NOT_AVAILABLE,	"charge not available"},

	{0,									"NONAME"}
};

			/* AOCE Billing ID */

CONST_ARRAY struct code_text ACU_AOCE_BILL_ID_TEXT[] = {

	{255,								"no Billing ID"},
	{ACU_AOCE_BILL_ID_REVERSE,			"reverse charging"},
	{ACU_AOCE_BILL_ID_CREDIT_CARD,		"credit card charging"},
	{ACU_AOCE_BILL_ID_FORWARD_UNC,		"call forwarding unconditional"},
	{ACU_AOCE_BILL_ID_FORWARD_BUSY,		"call forwarding busy"},
	{ACU_AOCE_BILL_ID_FORWARD_NOR,		"call forwarding no reply"},
	{ACU_AOCE_BILL_ID_DEFLECTION,		"call deflection"},
	{ACU_AOCE_BILL_ID_TRANSFER,			"call transfer"},
	{ACU_AOCE_BILL_ID_NORMAL,			"normal charging"},

	{0,									"NONAME"}
};

			/* BOOLEAN type */

CONST_ARRAY struct code_text ACU_SS_BOOLEAN_TEXT[] = {
	{TRUE,					"TRUE"},
	{FALSE,					"FALSE"},

	{0,						"NONAME"}
};

void pr_acu_ext_fac_asn1_operation (p_ss_component)
	uchar FAR *p_ss_component;
{
	acu_ss_op_id_t op_id;				/* Operation id */
	uchar FAR      *p_ss_operation;		/* Operation pointer */
	uchar FAR      *p_ss_info;			/* Additional information pointer */

		/* display the Operation-id */

	op_id = Acu_ss_component (op_err_pb_identifier);
	fprintf (f_out, "\n\t\toperation id = %s", Code_to_text (ACU_SS_OP_VAL_TEXT, op_id));

		/* display the Operation data */

	fprintf (f_out, "\n\n\t\tOPERATION: ");

	if (!Acu_ss_is_operation_available ()) {
		fprintf (f_out, "(none)");
		return;
	}

	Acu_ss_get_operation_address ();

		/* print data according to operation ID */

	switch (op_id) {

			/*----------------------------------------*/
			/*       AOCChargingRequest Operation     */
			/*----------------------------------------*/

		case ACU_OP_AOC_CHARGING_RQ :

			if (Acu_ss_component (component_tag) == FAC_INVOKE) {

					/* Invoke component -> read operation ARGUMENT */

				fprintf (f_out, " charging case = %s",
					Code_to_text (ACU_AOC_CHARGING_CASE_TEXT, Acu_aoc_charging_rq (charging_case)));

			} else {

					/* ReturnResult component -> read operation RESULT */

				fprintf (f_out, " type of RESULT = %s, special arr info = %u",
							Code_to_text (ACU_AOC_CHARGING_RQ_RES_TEXT, Acu_aoc_charging_rq_res (result_type)),
							Acu_aoc_charging_rq_res (aocs_special_arr_info));

				if (Acu_aoc_charging_rq_res (aocs_first_cur_info) != OFFSET_NIL) {

						/* print AOCSCurrencyInfoList */

					p_ss_info = p_ss_component + Acu_aoc_charging_rq_res (aocs_first_cur_info);
					pr_acu_aocs_cur_info_list (p_ss_component, p_ss_info);
				}

			}	/* end of ReturnResult component */

			break;

			/*----------------------------------------*/
			/*        AOCSCurrency Operation          */
			/*----------------------------------------*/

		case ACU_OP_AOCS_CURRENCY :
			fprintf (f_out, " type of ARGUMENT = %s",
				Code_to_text (ACU_AOCS_CUR_ARG_TYPE_TEXT, Acu_aocs_currency (type)));

			if (Acu_aocs_currency (first_cur_info) != OFFSET_NIL) {

					/* print AOCSCurrencyInfoList */

				p_ss_info = p_ss_component + Acu_aocs_currency (first_cur_info);
				pr_acu_aocs_cur_info_list (p_ss_component, p_ss_info);
			}

			break;

			/*----------------------------------------*/
			/*       AOCSSpecialArr Operation         */
			/*----------------------------------------*/

		case ACU_OP_AOCS_SPECIAL_ARR :
			fprintf (f_out, " type of ARGUMENT = %s, special arr info = %u",
				Code_to_text (ACU_AOCS_SPEC_ARR_TYPE_TEXT, Acu_aocs_special_arr (type)),
				Acu_aocs_special_arr (arr_info));
			break;

			/*----------------------------------------*/
			/*        AOCDCurrency Operation          */
			/*----------------------------------------*/

		case ACU_OP_AOCD_CURRENCY :
			fprintf (f_out, " type of ARGUMENT = %s, charging type = %u",
				Code_to_text (ACU_AOCD_CUR_ARG_TYPE_TEXT, Acu_aocd_currency (arg_type)),
				Acu_aocd_currency (type_of_charging));

			fprintf (f_out, ", billing id = %s, amount = %lu, multiplier = %u, currency size = %u",
				Code_to_text (ACU_AOCD_BILL_ID_TEXT, Acu_aocd_currency (billing_id)),
				Acu_aocd_currency (amount),
				Acu_aocd_currency (amount_multiplier),
				Acu_aocd_currency (currency_size));
			break;

			/*----------------------------------------*/
			/*      AOCDChargingUnit Operation        */
			/*----------------------------------------*/

		case ACU_OP_AOCD_CHARGING_UNIT :
			fprintf (f_out, " type of ARGUMENT = %s, type of charging = %u, billing id = %s",
				Code_to_text (ACU_AOCD_CH_U_ARG_TYPE_TEXT, Acu_aocd_charging_unit (arg_type)),
				Acu_aocd_charging_unit (type_of_charging),
				Code_to_text (ACU_AOCD_BILL_ID_TEXT, Acu_aocd_charging_unit (billing_id)));

			if (Acu_aocd_charging_unit (first_recorded_unit) != OFFSET_NIL) {

					/* print RecordedUnitsList */

				p_ss_info = p_ss_component + Acu_aocd_charging_unit (first_recorded_unit);
				pr_acu_aoc_recorded_u_list (p_ss_component, p_ss_info);
			}

			break;

			/*----------------------------------------*/
			/*        AOCECurrency Operation          */
			/*----------------------------------------*/

		case ACU_OP_AOCE_CURRENCY :
			fprintf (f_out, " type of ARGUMENT = %s, billing id = %s",
				Code_to_text (ACU_AOCE_CUR_ARG_TYPE_TEXT, Acu_aoce_currency (arg_type)),
				Code_to_text (ACU_AOCE_BILL_ID_TEXT, Acu_aoce_currency (billing_id)));

			fprintf (f_out, "\n\t\t\tamount = %lu, multiplier = %u, currency size = %u",
				Acu_aoce_currency (amount),
				Acu_aoce_currency (amount_multiplier),
				Acu_aoce_currency (currency_size));

			fprintf (f_out, "\n\t\t\ttype of charging association = %u, charge id = %d",
				Acu_aoce_currency (charg_assoc_type),
				Acu_aoce_currency (charg_identifier));

			fprintf (f_out, "\n\t\t\ttype of PartyNumber = %u, type of Number = %u, number size = %u",
				Acu_aoce_currency (party_nb_type),
				Acu_aoce_currency (type_of_nb),
				Acu_aoce_currency (nb_digits_size));
			break;

			/*----------------------------------------*/
			/*      AOCEChargingUnit Operation        */
			/*----------------------------------------*/

		case ACU_OP_AOCE_CHARGING_UNIT :
			fprintf (f_out, " type of ARGUMENT = %s, billing id = %s",
				Code_to_text (ACU_AOCE_CH_U_ARG_TYPE_TEXT, Acu_aoce_charging_unit (arg_type)), Code_to_text (ACU_AOCE_BILL_ID_TEXT, Acu_aoce_charging_unit (billing_id)));

			fprintf (f_out, "\n\t\t\ttype of charging association = %u, charge id = %d",
				Acu_aoce_charging_unit (charg_assoc_type), Acu_aoce_charging_unit (charg_identifier));

			fprintf (f_out, "\n\t\t\ttype of PartyNumber = %u, type of Number = %u, number size = %u",
				Acu_aoce_charging_unit (party_nb_type), Acu_aoce_charging_unit (type_of_nb),
				Acu_aoce_charging_unit (nb_digits_size));

			if (Acu_aoce_charging_unit (first_recorded_unit) != OFFSET_NIL) {

					/* print RecordedUnitsList */

				p_ss_info = p_ss_component + Acu_aoce_charging_unit (first_recorded_unit);
				pr_acu_aoc_recorded_u_list (p_ss_component, p_ss_info);
			}

			break;

			/*----------------------------------------*/
			/*       ClosedUserGroup Operation        */
			/*----------------------------------------*/

#		if ACU_PAR_EXT_CUG == ON		/* Closed User Group SS supported */
			case ACU_OP_CUG_CALL :
				fprintf (f_out, " outgoingAccessRequest = %s, CUG Index = 0x%x",
					Code_to_text (ACU_SS_BOOLEAN_TEXT, Acu_cug_call (out_access_rq)),
					Acu_cug_call (cug_index));
				break;
#		endif
	}

}

	/*-----------*/

void pr_acu_aoc_recorded_u_list (p_ss_component, p_ss_info)
	uchar FAR *p_ss_component;
	uchar FAR *p_ss_info;
{
		/* loop on all RecordedUnits instances inside list */

	while (1) {

		fprintf (f_out, "\n        -type of unit = %u   -number of units = %lu",
			Acu_aoc_recorded_unit (type_of_unit),
			Acu_aoc_recorded_unit (number_of_units));

			/* Stop when reached the last RecordedUnits structure */

		if (Acu_aoc_recorded_unit (next_unit_info) == OFFSET_NIL) {
			return;
		}

			/* Point to the next RecordedUnits structure and loop */

		p_ss_info = p_ss_component + Acu_aoc_recorded_unit (next_unit_info);

	}

}

	/*-----------*/

void pr_acu_aocs_cur_info_list (p_ss_component, p_ss_info)
	uchar FAR *p_ss_component;
	uchar FAR *p_ss_info;
{
		/* loop on all AOCSCurrencyInfo instances inside list */

	while (1) {

		fprintf (f_out, "\n\t\t\tcharged item = %u, currency info type = %u",
			Acu_aocs_currency_info (charged_item),
			Acu_aocs_currency_info (currency_info_type));

		fprintf (f_out, "\n\t\t\tspecial charging code = %u, amount = %lu",
			Acu_aocs_currency_info (special_charging_code),
			Acu_aocs_currency_info (amount));

		fprintf (f_out, "\n\t\t\tmultiplier = %u, volume unit or charge type = %u",
			Acu_aocs_currency_info (amount_multiplier),
			Acu_aocs_currency_info (volume_unit_or_charg_type));

		fprintf (f_out, "\n\t\t\ttime unit = %lu, scale = %u, granularity time unit = %lu, granularity scale = %u, currency size = %u",
			Acu_aocs_currency_info (length_of_time_unit),
			Acu_aocs_currency_info (scale));

		fprintf (f_out, "\n\t\t\tgranularity time unit = %lu, granularity scale = %u, currency size = %u",
			Acu_aocs_currency_info (granularity_lg_time_u),
			Acu_aocs_currency_info (granularity_scale));

		fprintf (f_out, "\n\t\t\tcurrency size = %u",
			Acu_aocs_currency_info (currency_size));

			/* Stop when reached the last AOCSCurrencyInfo structure */

		if (Acu_aocs_currency_info (next_currency_info) == OFFSET_NIL) {
			return;
		}


			/* Point to the next RecordedUnits structure and loop */

		p_ss_info = p_ss_component + Acu_aocs_currency_info (next_currency_info);

	}

}

	/*-----------*/

			/* Problem tag in RejectComponent */

CONST_ARRAY struct code_text ACU_SS_PB_TAG_TEXT[] = {

	{REJ_INVOKE_PB_TAG,			"InvokeProblem"},
	{REJ_RET_RESULT_PB_TAG,		"ReturnResultProblem"},
	{REJ_RET_ERROR_PB_TAG,		"ReturnErrorProblem"},
	{REJ_GENERAL_PB_TAG,		"GeneralProblem"},

	{0,							"NONAME"}
};

			/* Problem identifiers for General Problem */

CONST_ARRAY struct code_text ACU_SS_GENERAL_PB_VAL_TEXT[] = {

	{GEN_PB_MISTYPED_COMP,			"mistyped comp"},
	{GEN_PB_BAD_STRUCT_COMP,		"badly structured comp"},
	{GEN_PB_UNRECOGNIZED_COMP,		"unrecognized comp"},

	{0,								"NONAME"}
};

			/* Problem identifiers for Invoke Problem */

CONST_ARRAY struct code_text ACU_SS_INVOKE_PB_VAL_TEXT[] = {

	{INV_PB_UNRECOGNIZED_OP,		"unrecognized operation"},
	{INV_PB_MISTYPED_ARG,			"mistyped argument"},
	{INV_PB_RESOURCE_LIMIT,			"resource limitation"},
	{INV_PB_INITIATOR_RELEASE,		"initiator releasing"},
	{INV_PB_UNRECOGNIZED_LK_ID,		"unrecognized linked ID"},
	{INV_PB_LK_RS_UNEXPECTED,		"linked response unexpected"},
	{INV_PB_UNEXPECTED_CHILD_OP,	"unexpected child operation"},
	{INV_PB_DUPLICATE,				"duplicate invocation"},

	{0,								"NONAME"}
};

			/* Problem identifiers for ReturnResult Problem */

CONST_ARRAY struct code_text ACU_SS_RETRES_PB_VAL_TEXT[] = {

	{RET_RES_PB_RES_RS_UNEXPECTED,	"result response unexpected"},
	{RET_RES_PB_MISTYPED_RESULT,	"mistyped result"},
	{RET_RES_PB_UNRECOGNIZED_INV,	"unrecognized invocation"},

	{0,								"NONAME"}
};

			/* Problem identifiers for ReturnError Problem */

CONST_ARRAY struct code_text ACU_SS_RETERR_PB_VAL_TEXT[] = {

	{RET_ERR_PB_ERR_RS_UNEXPECTED,	"error response unexpected"},
	{RET_ERR_PB_UNRECOGNIZED_ERR,	"unrecognized error"},
	{RET_ERR_PB_UNEXPECTED_ERR,		"unexpected error"},
	{RET_ERR_PB_MISTYPED_PARAM,		"mistyped parameter"},
	{RET_ERR_PB_UNRECOGNIZED_INV,	"unrecognized invocation"},

	{0,								"NONAME"}
};

void pr_acu_ext_fac_asn1_reject_problem (p_ss_component)
	uchar FAR *p_ss_component;
{
	struct code_text FAR	*p_code_text;		/* pointer to current code-text association Table */

		/* set code-text pointer to Table of strings for Problem Value according to Problem type */

	switch (Acu_ss_component (lk_id_or_pb_tag)) {

		case REJ_GENERAL_PB_TAG :
		default :
			p_code_text = (struct code_text FAR *)ACU_SS_GENERAL_PB_VAL_TEXT;
			break;

		case REJ_INVOKE_PB_TAG :
			p_code_text = (struct code_text FAR *)ACU_SS_INVOKE_PB_VAL_TEXT;
			break;

		case REJ_RET_RESULT_PB_TAG :
			p_code_text = (struct code_text FAR *)ACU_SS_RETRES_PB_VAL_TEXT;
			break;

		case REJ_RET_ERROR_PB_TAG :
			p_code_text = (struct code_text FAR *)ACU_SS_RETERR_PB_VAL_TEXT;
			break;
	}

	fprintf (f_out, ", Problem : type = %s, value = %s",
				Code_to_text (ACU_SS_PB_TAG_TEXT, Acu_ss_component (lk_id_or_pb_tag)),
				Code_to_text (p_code_text, Acu_ss_component (op_err_pb_identifier)));
}

	/*-----------*/

#endif /* ACU_PAR_EXTENDED_PRIM == ON } */

/*-------------------------------------------------------------------------*/

#if ARINC_NETWORKS == ON

	/*--------------*/

void pr_acu_raw_data (size, a_str)
	uchar size;
	char FAR *a_str;
{
	fprintf (f_out, "'");

	while (size != 0) {
		fprintf (f_out, "0x%02x ", *a_str);
		size--;
		a_str++;
	}

	fprintf (f_out, "'");
}

	/*--------------*/

void pr_acu_dtmf_digit	(dtmf_digit, up_down_flag, dtmf_duration, digit_size, a_digit)
	uchar dtmf_digit;
	uchar up_down_flag;
	uchar dtmf_duration;
	uchar digit_size;
	char FAR *a_digit;
{
	fprintf (f_out, "\n\t\t\tDigit      : %c", dtmf_digit);
	fprintf (f_out, "\n\t\t\tUp/down    : %x", up_down_flag);
	fprintf (f_out, "\n\t\t\tDuration   : %x", dtmf_duration);

	if (digit_size != 0) {
		fprintf (f_out, "\n\t\t\tDigits     : ");
		pr_acu_string (digit_size, a_digit);
	}
}
	/*--------------*/

void pr_acu_notif_ind (notif_descr)
	uchar notif_descr;
{
	fprintf (f_out, "\n\t\t\tNotif descr: %x", notif_descr);
}

	/*--------------*/

void pr_acu_spf_fac (spf_fac_id, spf_fac_val)
	uchar spf_fac_id;
	uchar spf_fac_val;
{
	fprintf (f_out, "\n\t\t\tSpf fac Id : %x", spf_fac_id);
	fprintf (f_out, "\n\t\t\tSpf fac Val: %x", spf_fac_val);
}

	/*--------------*/

void pr_acu_credit_card_nb	(track_1_size, track_2_size, a_track_1, a_track_2)
	uchar track_1_size;
	uchar track_2_size;
	char FAR *a_track_1;
	char FAR *a_track_2;
{
	if (track_1_size != 0) {
		fprintf (f_out, "\n\t\t\tTrack 1    : ");
		pr_acu_raw_data (track_1_size, a_track_1);
	}

	if (track_2_size != 0) {
		fprintf (f_out, "\n\t\t\tTrack 2    : ");
		pr_acu_raw_data (track_2_size, a_track_2);
	}
}
	/*--------------*/

void pr_acu_aircraft_info (year, month, day, class_id, op_id_size, digit_size, a_op_id, a_digit)
	uchar year;
	uchar month;
	uchar day;
	uchar class_id;
	uchar op_id_size;
	uchar digit_size;
	char FAR *a_op_id;
	char FAR *a_digit;
{

	fprintf (f_out, "\n\t\t\tDeparture year    : %d", year);
	fprintf (f_out, "\n\t\t\tDeparture month   : %d", month);
	fprintf (f_out, "\n\t\t\tDeparture day     : %d", day);
	fprintf (f_out, "\n\t\t\tService class id  : %d", class_id);

	if (op_id_size != 0) {
		fprintf (f_out, "\n\t\t\tOp ID             : ");
		pr_acu_string (op_id_size, a_op_id);
	}

	if (digit_size != 0) {
		fprintf (f_out, "\n\t\t\tFlight nb         : ");
		pr_acu_string (digit_size, a_digit);
	}
}

	/*--------------*/

void pr_acu_route_select (nats_route_ind, satcom_route_ind, tfts_route_ind)
	uchar nats_route_ind;
	uchar satcom_route_ind;
	uchar tfts_route_ind;
{
	fprintf (f_out, "\n\t\t\tNats route   : %x", nats_route_ind);
	fprintf (f_out, "\n\t\t\tSatcom route : %x", satcom_route_ind);
	fprintf (f_out, "\n\t\t\tTfts route   : %x", tfts_route_ind);
}

	/*--------------*/

void pr_acu_credit_card_status (credit_card_status)
	uchar credit_card_status;
{
	fprintf (f_out, "\n\t\t\tCredit card status : %x", credit_card_status);
}

	/*--------------*/

void pr_acu_queue_info	(nats_avail, satcom_avail, tfts_avail, nats_pos, satcom_pos, tfts_pos)
	uchar nats_avail;
	uchar satcom_avail;
	uchar tfts_avail;
	uchar nats_pos;
	uchar satcom_pos;
	uchar tfts_pos;
{
	fprintf (f_out, "\n\t\t\tNats available  : %x", nats_avail);
	fprintf (f_out, "\n\t\t\tSatcom available: %x", satcom_avail);
	fprintf (f_out, "\n\t\t\tTfts available  : %x", tfts_avail);
	fprintf (f_out, "\n\t\t\tNats position   : %x", nats_pos);
	fprintf (f_out, "\n\t\t\tSatcom position : %x", satcom_pos);
	fprintf (f_out, "\n\t\t\tTfts position   : %x", tfts_pos);
}

#endif	/* ARINC */

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
