/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_accss.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *     cc_build_object - build all call contexts objects.
 *
 *     cc_access_na, cc_access_first/next_na - access to the NA objects.
 *
 *     cc_access_first/next_call - access to the CALL objects.
 *
 *     cc_in_queue  - Put a message into CC internal queue.
 *     cc_out_queue - Get a message from CC internal queue.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "cc.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_build_object - implements the building of all the call
				contexts objects.

Usage           uchar cc_build_object (p_cc_config);

Return value	CC_CFG_OK if correct, or config error diagnostic;

*--------------------------------------------------------------------------*/

uchar cc_build_object (p_cc_config)
	struct cc_config 	FAR	*p_cc_config;			/* pointer on the configuration data */
{
	ushort 						i,j;				/* index */
	ushort						object_size;		/* temporary object size for Mem_alloc() */
	uchar						na_type;			/* NA type */
	uchar						nb_b_chan;			/* nb of B channel contexts */
	struct cc_config_na		FAR	*p_cc_config_na;	/* pointer on the current na object of
													   the configuration data */
	struct node 			FAR *p_current;			/* memory alloc current pointer */
	struct node				FAR *p_node_na;			/* NA node pointer */
	struct node				FAR *p_node_call;		/* CALL node pointer */
	struct node				FAR *p_top_node = P_NIL;/* current top node pointer */

		/* Object occurence building */

	for (i = 0; i < Cc_config_na_nb; i++) {

		p_cc_config_na = Cc_config_na_a (i);

			/* Check the NAI validity. If present --> error */

		if (cc_access_na (Cc_config_nai) == OK) {
			return (CC_CFG_ERR_NAI);
		}

		na_type   = Set_default (Cc_config_na_type, BRI);
		nb_b_chan = (na_type == BRI) ? 2 : 30+1;	/* 30+1 because channel 16 is D chan */

		object_size = Rnd_sizeof (struct node)  +
					  Rnd_sizeof (struct cc_na) +
					  Rnd_sizeof (struct cc_b_chan) * (nb_b_chan-1);

			/* Memory allocation */

		if ((p_current = (struct node FAR *)Mem_alloc (object_size, PID_VL)) == A_NIL) {
			return (CC_CFG_ERR_MEMORY_FULL);
		}

		if (p_top_node == P_NIL) {
			p_top_node = p_current;
		}

			/* Init the node structure pointers */

		if (i != 0) {
			p_node_na -> p_next = p_current;
		}

		p_node_na				= p_current;
		p_node_na -> p_next 	= P_NIL;
		p_node_na -> p_dp 		= P_NIL;

		p_cc_na					= (struct cc_na FAR *)P_from_node (p_node_na);

			/* Set already determined fields */

		Cc_na_type      = na_type;
		Cc_na_nb_b_chan = nb_b_chan;

				/* Set NS/CC interface nai */

		if (Cc_config_use_spid == OFF) {

				/*
				 * No SPID is provided -->
				 * CC/NS interface nai and physical nai are the same.
				 */

			Nai	= Cc_config_mph_nai = Cc_config_nai;

		} else {

			Nai	= Cc_config_nai;
		}

			/* CALL loop */

		for (j = 0; j < Cc_config_call_nb; j++) {

				/* Allocate memory */

			if ((p_current = (struct node FAR *)Mem_alloc (Rnd_sizeof (struct cc_call) + Rnd_sizeof (struct node), PID_VL)) == P_NIL) {
				return (CC_CFG_ERR_MEMORY_FULL);
			}

				/* Init pointers */

				/* Set next pointer into the previous node */

			if (j != 0) {
				p_node_call -> p_next = p_current;

			} else {

					/* Set down pointer in NA node */

				p_node_na -> p_dp = p_current;
			}

			p_node_call 			= p_current;
			p_node_call -> p_next 	= P_NIL;
			p_node_call -> p_dp  	= P_NIL;

				/* Init access pointers */

			p_cc_call = (struct cc_call FAR *)P_from_node (p_node_call);		/* current pointer on call occurrence */

		}

	} /* end of NA loop */

		/* Set the NA links */

	if (p_cc_tree == P_NIL) {
		p_cc_tree = p_top_node;

	} else {

			/* Link the new NA thread to the existing one */

		for (p_node_na = p_cc_tree; Next (p_node_na) != P_NIL; p_node_na = Next (p_node_na));

		Next (p_node_na) = p_top_node;
	}

	return (CC_CFG_OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_access_na - implement the direct access to the na,
				cc_access_conn_id - direct access to the call context,
				cc_access_first_call and cc_access_next_call - access to the
				first/next objects

Usage           uchar cc_access_na			(nai_t nai);
				uchar cc_access_conn_id		(conn_id_t conn_id);
				uchar cc_access_first_call	();
				uchar cc_access_next_call	();

Return value    return code = OK found : the context pointer points to the
								found object.

							= NOK not found.


Common constants and declarations : cc.h

Common objects	:	na and call object.

*--------------------------------------------------------------------------*/

uchar cc_access_na (nai)
	register	nai_t 			nai;			/* nai */
{
	register	struct node 	FAR *p_node;	/* current node pointer */

		/* Scan the na occurrences and test matching with nai */

	for (p_node = p_cc_tree ; p_node != P_NIL; p_node = Next_node) {
		p_cc_na = (struct cc_na FAR *) P_from_node (p_node);

		if (Nai == nai) {
			return (OK);
		}
	}

	p_cc_na = P_NIL;
	return (NOK);

}

	/*---------*/

#if (ACU_INTERFACE == ON) && (CC_USE_ACU_SET_MODE_RQ_CO == ON)

void cc_access_first_na ()
{
	p_cc_na = (struct cc_na FAR *)P_from_node (p_cc_tree);
}

	/*---*/

void cc_access_next_na ()
{
	struct node FAR *p_node;

	if (p_cc_na != P_NIL) {

		p_node = Node_from_p (p_cc_na);

		if ((p_node = Next_node) != P_NIL) {
			p_cc_na = (struct cc_na FAR *)P_from_node (p_node);

		} else {

			p_cc_na = P_NIL;
		}

	}
}

#endif

/*-------------------------------------------------------------------------*/

	/*
		Return codes for cc_access_conn_id :

			- OK  : p_cc_call points to the call context,
			- NOK : p_cc_call points to a free context if available,
					else P_NIL.
	*/


uchar cc_access_conn_id (conn_id)
	register conn_id_t conn_id;
{
	struct cc_call FAR *p_free_call = P_NIL;	/* free call context pointer */

	cc_access_first_call ();

	while (p_cc_call != P_NIL) {

		if (Cc_call_state != STATE_NULL) {

			if (Cc_call_conn_id == conn_id) {
				return (OK);
			}

		} else {

			p_free_call = p_cc_call;	/* save free call context pointer */
		}

		cc_access_next_call ();

	}

	if ((p_cc_call = p_free_call) != P_NIL) {
		Cc_call_conn_id = conn_id;
	}

	return (NOK);

}

/*-------------------------------------------------------------------------*/

	/* p_cc_na points to the current NA */

void cc_access_first_call ()
{
	struct node FAR *p_node;

	if (p_cc_na != P_NIL) {
		p_node = Node_from_p (p_cc_na);

		if ((p_node = Down_node) != P_NIL) {
			p_cc_call = (struct cc_call FAR *)P_from_node (p_node);
			return;
		}

	}

	p_cc_call = P_NIL;

}

/*-------------------------------------------------------------------------*/

		/* p_cc_call points on the current call */

void cc_access_next_call ()
{
	register	struct node 	FAR *p_node;		/* current node pointer */

	if (p_cc_call != P_NIL) {

			/* Pointer on the node of the current call context */

		p_node = Node_from_p (p_cc_call);

		if ((p_node = Next_node) != P_NIL) {
			p_cc_call = (struct cc_call FAR *)P_from_node (p_node);

		} else {

			p_cc_call = P_NIL;
		}

	}
}

/*-------------------------------------------------------------------------*/

struct cc_profile FAR *cc_access_profile (profile_id)
	register uchar profile_id;
{
	struct cc_profile FAR *p_cc_profile;

	p_cc_profile = p_cc_profiles_tree;

	while (p_cc_profile != P_NIL) {

		if (Cc_profile_id == profile_id) {
			return (p_cc_profile);
		}

		p_cc_profile = Next (p_cc_profile);
	}

	return (P_NIL);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            cc_in_queue  - Put a message into CC internal queue.
				cc_out_queue - Get a message from CC internal queue.

				Internal queueing process:

				This process is used only when the CCE entity is used
				in conjunction with CC, and is seen as beeing part of it,
				instead of beeing an entity on its own.
				The queue is used to exchange messages between CC and CCE.
				One can 'put' or 'get' a message into or from the queue.
				The queue is implemented as a message FIFO.

Prototype       void                 cc_in_queue  (struct message FAR *p_msg);
				struct message FAR * cc_out_queue (void);

Return value	none.

*--------------------------------------------------------------------------*/

#if MESSAGE_AUDIT == ON

#	if ASSERT == ON

#		define Msg_audit_in(direction, p_msg)		\
			if (performance == OFF) { 				\
				msg_audit_in (direction, p_msg); 	\
			} 										\
			Msg_capture  (direction, p_msg)
#	else

#		define Msg_audit_in(direction, p_msg)		\
			msg_audit_in (direction, p_msg); 		\
			Msg_capture  (direction, p_msg)
#	endif

#else

#	define Msg_audit_in(direction, p_msg)			\
			Msg_capture  (direction, p_msg)
#endif

#if CC_MULTI_CHAN_CALLS == ON

struct queue_mgt cc_queue;		/* CC queue structure */

void cc_in_queue (p_msg)
	struct message FAR *p_msg;
{
		/* Queue the message */

	Fifo_put_msg (&cc_queue.p_first, &cc_queue.p_last, p_msg);

		/* Audit the message */

	Msg_audit_in ('i', p_msg);
}

	/*------------*/

struct message FAR *cc_out_queue (void)
{
	struct message FAR *p_msg;

		/* Get a message from the queue */

	Fifo_get_msg (&cc_queue.p_first, &cc_queue.p_last, p_msg);

		/* Audit the message */

	Msg_audit_in ('I', p_msg);

		/* Return the message pointer */

	return (p_msg);
}

#endif /* CC_MULTI_CHAN_CALLS == ON */

/*EOF*/
