
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ana_cc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		ana_sdu_cc            - print the message header of a CC message.
 *
 *		pr_cc_version         - print CC version string.
 *
 *		pr_cc_state           - print current call state.
 *
 *		pr_cc_service_id      - print requested CC service id.
 *
 *		pr_cc_x_address_list  - print address/services list number.
 *
 *		pr_cc_wrong_b_chan    - print 'Wrong b chan' indication.
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "cc.h"

#if C_COMPILER == TC
#	pragma  hdrstop
#endif

#if SIMULATION == ON
#	include "simul.h"

#if NEW_FCT_STYLE == ON
	static void pr_cc_b_chan_ctx (void);
	static void cc_b_chan_ctx_integrity_check (void);
#else
	static void pr_cc_b_chan_ctx ();
	static void cc_b_chan_ctx_integrity_check ();
#endif

/*-------------------------------------------------------------------------*/

			/* Call control primitives list */

CONST struct code_text cc_prim[] = {
	{CC_HOOK_OFF_RQ,			"CC_HOOK_OFF_RQ"},
	{CC_DIAL_RQ,				"CC_DIAL_RQ"},
	{CC_HOOK_ON_RQ,				"CC_HOOK_ON_RQ"},
	{CC_HOOK_ON_RS,				"CC_HOOK_ON_RS"},
	{CC_INIT_RQ, 				"CC_INIT_RQ"},

	{CC_RING_IN,				"CC_RING_IN"},
	{CC_ASSIGN_CHANNEL_IN,		"CC_ASSIGN_CHANNEL_IN"},
	{CC_HOOK_OFF_CO,			"CC_HOOK_OFF_CO"},
	{CC_HOOK_ON_IN,				"CC_HOOK_ON_IN"},
	{CC_HOOK_ON_CO,				"CC_HOOK_ON_CO"},
	{CC_INIT_CO, 				"CC_INIT_CO"},
	{CC_INFO_IN, 				"CC_INFO_IN"},
	{CC_ERR_IN, 				"CC_ERR_IN"},

	{0,							"NONAME"},
};

CONST struct code_text t_cc_service_id [] = {

	{CC_SERVICE_X25,				"CC_SERVICE_X25"},
	{CC_SERVICE_X25_PACKET,			"CC_SERVICE_X25_PACKET"},
	{CC_SERVICE_AUDIO_MODEM,		"CC_SERVICE_AUDIO_MODEM"},
	{CC_SERVICE_FAX_3,				"CC_SERVICE_FAX_3"},
	{CC_SERVICE_DATA_HDLC,			"CC_SERVICE_DATA_HDLC"},
	{CC_SERVICE_RAW_DATA,			"CC_SERVICE_RAW_DATA"},
	{CC_SERVICE_DATA_TRANSPARENT,	"CC_SERVICE_DATA_TRANSPARENT"},
	{CC_SERVICE_TRANSPARENT,		"CC_SERVICE_TRANSPARENT"},
	{CC_SERVICE_TELEPHONY,			"CC_SERVICE_TELEPHONY"},
	{CC_SERVICE_RAW_TELEPHONY,		"CC_SERVICE_RAW_TELEPHONY"},
	{CC_SERVICE_TELEPHONY_GCI,		"CC_SERVICE_TELEPHONY_GCI"},
	{CC_SERVICE_DATA_56KBS,			"CC_SERVICE_DATA_56KBS"},
	{CC_SERVICE_V110,				"CC_SERVICE_V110"},
	{CC_SERVICE_V120,				"CC_SERVICE_V120"},
	{CC_SERVICE_VIDEO,				"CC_SERVICE_VIDEO"},
	{CC_SERVICE_DATA_H0,			"CC_SERVICE_DATA_H0"},
	{CC_SERVICE_DATA_H11,			"CC_SERVICE_DATA_H11"},
	{CC_SERVICE_DATA_H12,			"CC_SERVICE_DATA_H12"},
	{CC_SERVICE_DATA_MULTIRATE,		"CC_SERVICE_DATA_MULTIRATE"},
	{CC_SERVICE_DATA_128KBS,		"CC_SERVICE_DATA_128KBS"},

	{CC_SERVICE_X25_RELAY,			"CC_SERVICE_X25_RELAY"},
	{CC_SERVICE_AUDIO_MODEM_RELAY,	"CC_SERVICE_AUDIO_MODEM_RELAY"},
	{CC_SERVICE_FAX_3_RELAY,		"CC_SERVICE_FAX_3_RELAY"},
	{CC_SERVICE_DATA_HDLC_RELAY,	"CC_SERVICE_DATA_HDLC_RELAY"},
	{CC_SERVICE_DATA_TRANS_RELAY,	"CC_SERVICE_DATA_TRANS_RELAY"},
	{CC_SERVICE_TRANSPARENT_RELAY,	"CC_SERVICE_TRANSPARENT_RELAY"},
	{CC_SERVICE_TELEPHONY_RELAY,	"CC_SERVICE_TELEPHONY_RELAY"},
	{CC_SERVICE_TELEPHONY_GCI_RELAY,"CC_SERVICE_TELEPHONY_GCI_RELAY"},
	{CC_SERVICE_DATA_56KBS_RELAY,	"CC_SERVICE_DATA_56KBS_RELAY"},

	{0,								"NONAME"},
};

CONST struct code_text t_cc_call_states[] = {

	{STATE_CALL_INIT,			"CALL_INIT"},
	{STATE_OVERLAP_SENDING,		"OVERLAP_SENDING"},
	{STATE_OUTGOING_CALL_PROC,	"OUTGOING_CALL_PROC"},
	{STATE_RINGING,				"RINGING"},
	{STATE_HOOKED_OFF,			"HOOKED_OFF"},
	{STATE_ACTIVE,				"ACTIVE"},
	{STATE_RELEASE_IN,			"RELEASE_IN"},
	{STATE_RELEASE_USER,		"RELEASE_USER"},
	{STATE_RELEASE_NS,			"RELEASE_NS"},
	{STATE_RELEASE_RQ,			"RELEASE_RQ"},
	{STATE_SUSPEND_RQ,			"SUSPEND_RQ"},
	{STATE_RESUME_RQ,			"RESUME_RQ"},
	{STATE_SPF_FACILITY_RQ,		"FACILITY_RQ"},
	{STATE_ERROR_IN,			"ERROR_IN"},
	{STATE_SPF_REGISTRATION_RQ,	"REGISTRATION_RQ"},
	{STATE_AWAIT_DIGIT,			"AWAIT DIGIT"},
	{STATE_AWAIT_ADDITIONAL_DIGIT,	"AWAIT ADDITIONAL DIGIT"},
	{STATE_NULL,				"NULL"},

	{0,							"NONAME"},
};

/*-------------------------------------------------------------------------*/

uchar ana_sdu_cc (p_msg)
	struct message FAR *p_msg;
{

	if (L_msg_sapi != CC_SAPI) {
		return (ana_sdu_acu (p_msg));
	}

	fprintf (f_out, "from = %c to = %c code = %s nai = %1d sapi = %c conn_id = %-3d",
			L_msg_from, L_msg_to, Code_to_text (cc_prim, L_msg_code),
			L_msg_nai, L_msg_sapi, L_msg_conn_id);

	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

void pr_cc_state ()
{

	if (print_flag == ON) {
		fprintf (f_out,  "\n\nCC CALL   ");

		if (p_cc_na == P_NIL) {
			fprintf (f_out,  "[NULL]\n");
			return;
		}

		fprintf (f_out,  "nai = %1d", Nai);

		if (p_cc_call == P_NIL) {
			fprintf (f_out,  " [NULL]\n");
			return;
		}

		fprintf (f_out, " sapi = %c conn_id = %-3d state = %s",
						Cc_call_sapi_user,
						Cc_call_conn_id,
						Code_to_text (t_cc_call_states, Cc_call_state));

		if (Cc_call_b_chan_id != 0) {
			fprintf (f_out, " (B%d)", Cc_call_b_chan_id);
		}

		if (Cc_call_hold_state != OFF) {
			fprintf (f_out,  "(HELD)");
		}

#		if CC_PAR_SEMI_PERMANENT_CIRCUITS == ON

			if (Cc_call_semi_permanent_circuit) {
				fprintf (f_out,  " [SEMI-PERMANENT-CIRCUIT]");
			}

#		endif

		fprintf (f_out,  "\n");

		pr_cc_b_chan_ctx ();

	}

}

/*-------------------------------------------------------------------------*/

#if ACU_INTERFACE == ON
	extern CONST struct code_text t_acu_service_id [];
#endif

void pr_cc_service_id ()
{
	char					FAR *p_text;


	if (print_flag != ON) {
		return;
	}

	if (p_cc_profile != P_NIL) {

		if (Cc_call_sapi_user == CC_SAPI) {

#		  if CC_INTERFACE == ON

			p_text = Code_to_text (t_cc_service_id, Cc_profile_id);

#		  endif

		} else {

#		  if ACU_INTERFACE == ON

			p_text = Code_to_text (t_acu_service_id, Cc_profile_id);

#		  endif

		}

	} else {

		p_text = "No service";
	}

	fprintf (f_out, "\n\t\t\t(Required service : %s%s.)\n", p_text, (cc_interworking == ON ? " (INTERWORKING)" : ""));

}

/*-------------------------------------------------------------------------*/

void pr_cc_x_address_list (x_local_nb)
	uchar x_local_nb;
{
	if (print_flag == ON) {
		fprintf (f_out, "\n\n\t\t\t(Address list #%d.)", x_local_nb);
	}

}

/*-------------------------------------------------------------------------*/

static void pr_cc_b_chan_ctx (void)
{
	short                 chan_id;
	struct cc_b_chan FAR *p_cc_b_chan;

	for (chan_id = 1; chan_id <= Cc_na_nb_b_chan; chan_id++) {

		Cc_access_b_chan (chan_id);

		if (Cc_b_chan_used != CC_B_CHAN_FREE) {

			fprintf (f_out, "B%d:", chan_id);

			if (Cc_b_chan_used & CC_B_CHAN_USED) {
				fprintf (f_out, " Used on conn_id %d", Cc_b_chan_p_active_call -> conn_id);

					/* check integrity  */

				if (chan_id != Cc_b_chan_p_active_call -> b_chan_list [0]) {
					Trap (TRAP_CC_B_CHAN, "B-chan context integrity");
				}

			}

			if (Cc_b_chan_used & CC_B_CHAN_HELD) {
				fprintf (f_out, " Held on conn_id %d", Cc_b_chan_p_held_call -> conn_id);

					/* check integrity  */

				if (chan_id != Cc_b_chan_p_held_call -> b_chan_list [0]) {
					Trap (TRAP_CC_B_CHAN, "B-chan context integrity");
				}

			}

			fprintf (f_out, "\n");
		}
	}

	cc_b_chan_ctx_integrity_check ();

}

/*-------------------------------------------------------------------------*/

static void cc_b_chan_ctx_integrity_check (void)
{
	short                 i;
	short                 chan_id;
	struct cc_b_chan FAR *p_cc_b_chan;
	struct cc_call   FAR *p_cc_call;

	for (chan_id = 1; chan_id <= Cc_na_nb_b_chan; chan_id++) {

		Cc_access_b_chan (chan_id);

		if (Cc_b_chan_used & CC_B_CHAN_USED) {

				/* check that the chan_id is part of the call chan_list */

			p_cc_call = Cc_b_chan_p_active_call;

			for (i = Cc_call_b_chan_nb; i >= 0; i--) {

				if (chan_id == Cc_call_b_chan(i)) {
					break;	/* found */
				}
			}

			if (i < 0) {
				goto error;
			}

		} else {

			if (Cc_b_chan_p_active_call != P_NIL) {
				goto error;
			}
		}

		if (Cc_b_chan_used & CC_B_CHAN_HELD) {

				/* check that the chan_id is part of the call chan_list */

			p_cc_call = Cc_b_chan_p_held_call;

			for (i = Cc_call_b_chan_nb; i >= 0; i--) {

				if (chan_id == Cc_call_b_chan(i)) {
					break;	/* found */
				}
			}

			if (i < 0) {
				goto error;
			}

		} else {

			if (Cc_b_chan_p_held_call != P_NIL) {
				goto error;
			}
		}

	}

	return;

error:

	Trap (TRAP_CC_B_CHAN, "B-chan context integrity");
}

/*-------------------------------------------------------------------------*/

void pr_cc_wrong_b_chan ()
{
	if (print_flag == ON) {
		fprintf (f_out, "\t(Wrong B channel)");
	}
}

/*-------------------------------------------------------------------------*/

void pr_cc_alloc_b_chan (chan_id)
	uchar chan_id;
{

	if (print_flag == ON) {
		fprintf (f_out,  "\n\n+++ B%d allocated +++", chan_id);
	}

}

/*-------------------------------------------------------------------------*/

void pr_cc_free_b_chan (chan_id)
	uchar chan_id;
{

	if (print_flag == ON) {
		fprintf (f_out,  "\n\n+++ B%d free +++", chan_id);
	}

}

/*-------------------------------------------------------------------------*/

void pr_cc_version ()
{

#	if REVISION_STRING == ON

		extern char CONST_ARRAY _CC_VERSION[];

		if (print_flag == ON) {
			fprintf (f_out,  "\n************ CC version: %s", _CC_VERSION);
		}

#	endif

}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
