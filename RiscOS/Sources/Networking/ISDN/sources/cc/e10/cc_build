
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_build.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		e10_cc_build_to_ns - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *		e10_net_checking_service - determines the requested service from the
 *							   received message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	uchar	e10_build_other_pr			(code_t prim_code, uchar FAR *p_data);
	uchar	e10_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar	e10_build_other_pr			();
	uchar	e10_cc_load_ns_test			();
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			e10_cc_build_to_ns - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar e10_cc_build_to_ns (code_t primitive_code);
							- primitive_code 	= code of the primitive to send,

Return value : 	e10_cc_build_to_ns returns = OK
									   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar e10_cc_build_to_ns (prim_code, p_data)
	code_t		prim_code;		/* primitive code */
	uchar  FAR *p_data;
{
	CONST struct cc_service FAR	*p_cc_service;

		/* Switch according to the primitive to be sent */

	switch (prim_code) {

			/*------------------- CONNECTION REQUEST ---------------------*/

		case  NS_CONN_RQ :
			Isdn_init_e10_ctx_rq_rs			(conn_rq,
											 p_data
											);

			p_cc_service = Cc_call_p_cc_service;

#			if CC_TYPE_PRI == ON

				if ((Cc_na_type == PRI) && (Cc_service_id == CC_SERVICE_X25)) {

						/* X25 for PRI is like DATA */

					p_cc_service = cc_access_service (CC_SERVICE_DATA_HDLC);
				}

#			endif

			_Isdn_e10_store_bc				(conn_rq,\
											 Cc_service_bc_trf_cap,\
											 Cc_service_bc_trf_mode,\
											 Cc_service_bc_trf_rate,\
											 (Cc_na_type == PRI) ? BYTE_VAL_NIL : Cc_service_bc_layer_nb,\
											 (Cc_na_type == PRI) ? BYTE_VAL_NIL : Cc_service_bc_layer_id,\
											 (Cc_na_type == PRI) ? BYTE_VAL_NIL : Cc_service_bc_protocol_id,\
											 (Cc_na_type == PRI) ? BYTE_VAL_NIL : Cc_service_bc_add_layer_id,\
											 (Cc_na_type == PRI) ? BYTE_VAL_NIL : Cc_service_bc_add_protocol_id,\
											 (Cc_na_type != PRI) ? BYTE_VAL_NIL : Cc_service_bc_trf_rate,\
											 BYTE_VAL_NIL,\
											 (Cc_na_type != PRI) ? BYTE_VAL_NIL : Cc_service_bc_protocol_id
											);

			if (p_calling_address != P_NIL) {

				Isdn_e10_store_calling_nb	(conn_rq,
											 cc_calling_nb_type,
											 PLAN_ISDN,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 p_calling_address
											);

			}

			if (p_rq_address != P_NIL) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

                        if (Cc_na_function != FG_NT_TE) {

                            Isdn_e10_store_keypad	(conn_rq,
                                                     p_rq_address
                                                    );
                        } else {
                            Isdn_e10_store_called_nb(conn_rq,
                                                     cc_called_nb_type,
                                                     cc_called_nb_plan,
                                                     p_rq_address
                                                    );
                        }

#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_e10_store_called_nb(conn_rq,
												 cc_called_nb_type,
												 cc_called_nb_plan,
												 p_rq_address
												);
#					endif
				}
			}

#			if CC_TYPE_BRI == ON /* { */

				if (p_rq_subaddress != P_NIL) {

					Isdn_e10_store_called_sub_add(conn_rq,
												 SUB_ADD_OSI,
												 SUB_ADD_EVEN,
												 p_rq_subaddress
												);
				}

#			endif /* } */

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_e10_store_chan_id_BRI	(conn_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

								/* Coding for 1 B-channel */

							Isdn_e10_store_chan_id_NB_PRI(conn_rq,
														 INT_ID_IMPLICIT,
														 cc_chan_excl,
														 BYTE_VAL_NIL,
														 cc_chan_id
														);

						} else {

								/* Coding for H0 or MULTIRATE channels */

								/* convert the list into a map */

							cc_chani_list_to_map ();

								/*
									We are only using the last 3 octets of
									the map (a maximum of 24 B-channels).
								*/

							Isdn_e10_store_chan_id_MAP_PRI(conn_rq,
														 INT_ID_IMPLICIT,
														 cc_chan_excl,
														 BYTE_VAL_NIL,
														 &cc_chan_map[1],
														 3
														);

						}

#					endif


				}

#				if (CC_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)

					if ((Cc_service_bc_protocol_id == PROTOCOL_ID_1_G711_u) &&
						(Cc_na_type == BRI)									&&
						(cc_call_appear != BYTE_VAL_NIL)) {

							/* Voice service */

						Isdn_e10_store_ori_call_appear (conn_rq, cc_call_appear);
					}

#				endif


			}

#			if CC_TYPE_PRI == ON

				if (p_cc_uui != P_NIL) {
					Isdn_e10_store_uui		(conn_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
				}

#			endif

#			if _CC_SPID_INFO == ON

				if (Cc_na_function == FG_NT_TE) {

                    if (cc_endpoint_action != ACU_ACTION_NO_ENDPOINT_ID) {

                        Isdn_e10_store_endpoint_id (conn_rq,
                                                    cc_usid,
                                                    cc_tid,
                                                    cc_interpreter,
                                                    0
                                                    );
                    }
                }

#			endif

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_e10_ctx_rq_rs			(conn_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_e10_store_chan_id_BRI	(conn_rs,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

								/* Coding for 1 B-channel */

							Isdn_e10_store_chan_id_NB_PRI(conn_rs,
														 INT_ID_IMPLICIT,
														 cc_chan_excl,
														 BYTE_VAL_NIL,
														 cc_chan_id
														);

						} else {

								/* Coding for H0 or MULTIRATE channels */

								/* convert the list into a map */

							cc_chani_list_to_map ();

								/*
									We are only using the last 3 octets of
									the map (a maximum of 24 B-channels).
								*/

							Isdn_e10_store_chan_id_MAP_PRI(conn_rs,
														 INT_ID_IMPLICIT,
														 cc_chan_excl,
														 BYTE_VAL_NIL,
														 &cc_chan_map[1],
														 3
														);

						}

#					endif

				}


			}

#			if CC_TYPE_PRI == ON

				if (p_cc_uui != P_NIL) {
					Isdn_e10_store_uui		(conn_rs,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
				}

#			endif

			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_e10_ctx_rq_rs			(clear_rq,
											 p_data
											);

			Isdn_e10_store_cause			(clear_rq,
											 CODING_STD_CCITT,
											 LOCATION_USER,
											 cc_error_class,
											 cc_error_value,
											 A_NIL
											);


#			if CC_TYPE_PRI == ON

				if (p_cc_uui != P_NIL) {
					Isdn_e10_store_uui		(clear_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
				}

#			endif

			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_e10_ctx_rq_rs			(clear_rs,
											 p_data
											);

			break;

		default :

			if (e10_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}

				/*----------------------------------------*/

uchar e10_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{

#	if CC_SPF_FAC == ON
		uchar cc_fac;
#	endif

	switch (prim_code) {

	/*---------------- INFORMATION REQUEST */

#	if CC_TYPE_BRI == ON /* { */

		case  NS_INFO_RQ :
			Isdn_init_e10_ctx_rq_rs			(info_rq,
											 p_data
											);

#			if CC_SPF_FAC == ON

				switch (cc_spf_facility_code) {

					case ACU_FAC_CALL_APPEAR :

						Isdn_e10_store_switchhook (info_rq, cc_switchhook);
						return (OK);

					case ACU_FAC_FEATURE_ACT :

						Isdn_e10_store_feature_act (info_rq,
													cc_button_type,
													cc_module_nb,
													cc_button_nb
												);
						return (OK);
				}


#			endif

#			if _CC_SPID_INFO == ON

				if (Cc_na_function == FG_NT_TE) {

                    switch (cc_endpoint_action) {

                    	case ACU_ACTION_NO_ENDPOINT_ID :
                        	break;

                        case ACU_ACTION_PROMPT_INFO :

                            Isdn_e10_store_endpoint_id (info_rq,
                                                            cc_usid,
                                                            cc_tid,
                                                            cc_interpreter,
                                                            cc_ces
                                                        );

	                        Isdn_e10_store_information_rq 	(info_rq,
                                                             INFO_TYPE_TERMINAL_ID,
                            								 PROMPT_FOR_ADD_INFO
                            								 );

                            break;

                        default :

                            Isdn_e10_store_endpoint_id (info_rq,
                                                            cc_usid,
                                                            cc_tid,
                                                            cc_interpreter,
                                                            cc_ces
                                                        );

                            if (cc_error_class != BYTE_VAL_NIL) {

                                Isdn_e10_store_cause  (info_rq,
                                                      	CODING_STD_CCITT,
                                                        LOCATION_PU_NET_LOC_USER,
                                                        C_C_PROTOCOL_ERROR,
                                                        C_V_INVALID_IE_CONTENT_100,
                                                        A_NIL
                                                        );
                            }

                        break;

                    }
				}

#			endif

			if (p_rq_address != P_NIL) {
				Isdn_e10_store_keypad		(info_rq,
											 p_rq_address
											);
			}

			break;

#	endif /* } */

/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_e10_ctx_rq_rs			(alert_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_e10_store_chan_id_BRI	(alert_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

								/* Coding for 1 B-channel */

							Isdn_e10_store_chan_id_NB_PRI(alert_rq,
														 INT_ID_IMPLICIT,
														 cc_chan_excl,
														 BYTE_VAL_NIL,
														 cc_chan_id
														);

						} else {

								/* Coding for H0 or MULTIRATE channels */

								/* convert the list into a map */

							cc_chani_list_to_map ();

								/*
									We are only using the last 3 octets of
									the map (a maximum of 24 B-channels).
								*/

							Isdn_e10_store_chan_id_MAP_PRI(alert_rq,
														 INT_ID_IMPLICIT,
														 cc_chan_excl,
														 BYTE_VAL_NIL,
														 &cc_chan_map[1],
														 3
														);

						}

#					endif

				}

			}

#			if CC_TYPE_PRI == ON

				if (p_cc_uui != P_NIL) {
					Isdn_e10_store_uui		(alert_rq,
											 PROTOCOL_DISCR_IA5,
											 p_cc_uui
											);
				}

#			endif

			break;

/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_e10_ctx_rq_rs			(call_proc_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_e10_store_chan_id_BRI	(call_proc_rq,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

								/* Coding for 1 B-channel */

							Isdn_e10_store_chan_id_NB_PRI(call_proc_rq,
														 INT_ID_IMPLICIT,
														 cc_chan_excl,
														 BYTE_VAL_NIL,
														 cc_chan_id
														);

						} else {

								/* Coding for H0 or MULTIRATE channels */

								/* convert the list into a map */

							cc_chani_list_to_map ();

								/*
									We are only using the last 3 octets of
									the map (a maximum of 24 B-channels).
								*/

							Isdn_e10_store_chan_id_MAP_PRI(call_proc_rq,
														 INT_ID_IMPLICIT,
														 cc_chan_excl,
														 BYTE_VAL_NIL,
														 &cc_chan_map[1],
														 3
														);

						}

#					endif
				}

			}

			break;

#	if (CC_RESTART_PROCEDURE == ON) && (CC_TYPE_PRI == ON) /* { */

				/*---------------- RESTART_RQ */

		case NS_RESTART_RQ :
			Isdn_init_e10_ctx_rq_rs			(restart_rq,
											 p_data
											);

			break;

				/*---------------- RESTART_RS */

		case NS_RESTART_RS :
			Isdn_init_e10_ctx_rq_rs			(restart_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_call_service_class != CC_SRV_CLASS_MULTI_CHAN) {

						/* Coding for 1 B-channel */

					Isdn_e10_store_chan_id_NB_PRI(restart_rs,
												 INT_ID_IMPLICIT,
												 cc_chan_excl,
												 BYTE_VAL_NIL,
												 cc_chan_id
												);

				} else {

						/* Coding for H0 or MULTIRATE channels */

						/* convert the list into a map */

					cc_chani_list_to_map ();

						/*
							We are only using the last 3 octets of
							the map (a maximum of 24 B-channels).
						*/

					Isdn_e10_store_chan_id_MAP_PRI(restart_rs,
												 INT_ID_IMPLICIT,
												 cc_chan_excl,
												 BYTE_VAL_NIL,
												 &cc_chan_map[1],
												 3
												);

				}

			}

			Isdn_e10_store_restart_ind		(restart_rs,
											 cc_restart_indicator
											);


			cc_chan_id[0] = NO_CHAN;
			break;

#	endif /* CC_RESTART_PROCEDURE == ON } */

#	if (CC_SPF_FAC == ON) && (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)

		case  NS_SPF_FACILITY_RQ :
			Isdn_init_e10_ctx_rq_rs			(spf_fac_rq,
											 p_data
											);

			switch (cc_spf_facility_code) {

				case ACU_FAC_TRF :

					if (cc_current_conn_id != cc_other_conn_id) {

							/* Indicate the held conn_id */

						Isdn_e10_store_other_call_ref	(spf_fac_rq,
														 cc_current_conn_id
														);

							/* Send the message on the ACTIVE call */

						cc_current_conn_id = cc_other_conn_id;

					}

					cc_fac = DA_TRANS;
					break;

				case ACU_FAC_HOLD :
					cc_fac = DA_HOLD;
					break;

				case ACU_FAC_RETRIEVE :
					cc_fac = DA_RECONN;
					break;

				case ACU_FAC_DROP :
					cc_fac = DA_DROP;
					break;

				case ACU_FAC_THREE_PARTY :

					cc_fac = DA_CONF;

					if (cc_current_conn_id != cc_other_conn_id) {

							/* Indicate the held conn_id */

						Isdn_e10_store_other_call_ref	(spf_fac_rq,
														 cc_current_conn_id
														);

							/* Send the message on the ACTIVE call */

						cc_current_conn_id = cc_other_conn_id;

					}

					break;
			}

			Isdn_e10_store_service_id (spf_fac_rq, cc_fac);

			break;

#	endif
				/*---------------- UNKNOWN primitive ---------------------*/

		default :
			return (NOK);
	}

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			e10_net_checking_service - implements the checking of a received
				call to determine the service requested.

Usage           uchar e10_net_checking_service ();

Return value : 	e10_net_checking_service returns a service code or UNKNOWN_SERVICE.

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar e10_net_checking_service ()
{

	uchar bc_proto_1, bc_trf_rate;

	if (Cc_na_type == BRI) {
		bc_proto_1 = Isdn_get_val_e10 (conn_in, bc, protocol_id);
		bc_trf_rate= Isdn_get_val_e10 (conn_in, bc, trf_rate2);
	} else {
		bc_proto_1 = Isdn_get_val_e10 (conn_in, bc, protocol_id_1);
		bc_trf_rate= Isdn_get_val_e10 (conn_in, bc, trf_rate);
	}

		/* Dispatch according to the transfer capability */

	switch (Isdn_get_val_e10 (conn_in, bc, trf_cap)) {

			/* Speech */

		case TRF_CAP_SPEECH :
			return (CC_SRV_VOICE);

			/* Audio 3.1 kHz */

		case TRF_CAP_3_1_AUDIO :

			if (Get_ie_e10 (conn_in, progress_ind) == PRESENT) {
				return (CC_SRV_VOICE);
			}

				/* Dispatch according to layer 1 protocol */

			switch (bc_proto_1) {

					/* u law */

				case PROTOCOL_ID_1_G711_u :
					return (CC_SRV_VOICE);

					/* Unknown : use the HLC teleservice field */

				case BYTE_VAL_NIL :

					return (CC_SRV_NIL);

				default :
					return (CC_SRV_NIL);

			}

			/* Unrestricted */

		case TRF_CAP_UNRESTRICTED :

				/* Search for multi-channels rates */

			switch (bc_trf_rate) {

				case TRF_RATE_2x64KBS :
					return (CC_SRV_DATA_128KBS);

				case TRF_RATE_384KBS :
					return (CC_SRV_DATA_H0);

				case TRF_RATE_1536KBS :
					return (CC_SRV_DATA_H11);

				case TRF_RATE_1920KBS :
					return (CC_SRV_DATA_H12);

				case TRF_RATE_MULTI_RATE :
					return (CC_SRV_DATA_MULTIRATE);

			}

				/* Dispatch according to layer protocol */

			switch (bc_proto_1) {

					/* DATA FROM 56 KBS */

				case PROTOCOL_ID_1_V110:
					cc_layer_1_info.user_rate = RA_56KBS;
					cc_layer_1_info.syn_asyn  = SYN;
					return (CC_SRV_DATA_56KBS);

				default :

					if (Get_ie_e10 (conn_in, llc) == PRESENT) {

							/* Search for multi-channels rates */

						switch (Isdn_get_val_e10 (conn_in, llc, trf_rate)) {

							case TRF_RATE_2x64KBS :
								return (CC_SRV_DATA_128KBS);

							case TRF_RATE_384KBS :
								return (CC_SRV_DATA_H0);

							case TRF_RATE_1536KBS :
								return (CC_SRV_DATA_H11);

							case TRF_RATE_1920KBS :
								return (CC_SRV_DATA_H12);

							case TRF_RATE_MULTI_RATE :
								return (CC_SRV_DATA_MULTIRATE);

						}

								/* Dispatch according to layer protocol */

						switch (Isdn_get_val_e10 (conn_in, llc, protocol_id_1)) {

							case PROTOCOL_ID_1_X31 :
								return (CC_SRV_X25);

							case PROTOCOL_ID_1_V110 :
								cc_layer_1_info.user_rate = Isdn_get_val_e10 (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_e10 (conn_in, llc, syn_asyn);

								if ((cc_layer_1_info.user_rate == RA_56KBS) &&
									(cc_layer_1_info.syn_asyn  == SYN)
								   ) {
									return (CC_SRV_DATA_56KBS);

								} else {

									cc_layer_1_info.stop_bits = Isdn_get_val_e10 (conn_in, llc, stop_bit);
									cc_layer_1_info.data_bits = Isdn_get_val_e10 (conn_in, llc, data_bit);
									cc_layer_1_info.parity    = Isdn_get_val_e10 (conn_in, llc, parity);
									return (CC_SRV_V110);
								}


							case PROTOCOL_ID_1_V120 :
								cc_layer_1_info.user_rate = Isdn_get_val_e10 (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_e10 (conn_in, llc, syn_asyn);
								cc_layer_1_info.stop_bits = Isdn_get_val_e10 (conn_in, llc, stop_bit);
								cc_layer_1_info.data_bits = Isdn_get_val_e10 (conn_in, llc, data_bit);
								cc_layer_1_info.parity    = Isdn_get_val_e10 (conn_in, llc, parity);
								return (CC_SRV_V120);

							case PROTOCOL_ID_1_VIDEO :
								return (CC_SRV_VIDEO);

						}

					}

					return (CC_SRV_DATA);

			}

		default :
			break;

	}

	return (CC_SRV_NIL);

}

#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar	e10_cc_load_ns_test	(p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/

