/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_proc.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		at5_cc_get_chan_id - implements the estraction of the channel
 *			ID given by the network.
 * 		at5_cc_test_address_match - tests if received address/sub-address
 *				matches one of the registered NA addresses.
 *
 *		at5_p_start_val_ns (pr, ie) - pointer to the val_ns start for 'ie' IE.
 *
 *		at5_get_ie (pr, ie) - return PRESENT/ABSENT
 *
 *		at5_isdn_p_str (pr, ie) - return pointer to the string field
 *			of 'ie' IE of 'pr' Primitive
 *
 * 		at5_isdn_lgth_str (pr, ie) - return length of the string field
 *			of 'ie' IE of 'pr' Primitive
 *
 * 		at5_isdn_get_val (pr, ie, field) - return value of the 'field'
 *			field of 'ie' IE of 'pr' Primitive
 *
 *		at5_get_remaining_ie_instance - return the nb of remaining IE instance.
 *
 *		at5_set_to_next_ie_instance - set to the next IE's instance.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at5_p_start_val_ns -

Usage           uchar at5_p_start_val_ns (pr, ie);

Return value	: pointer to the val_ns start for 'ie' IE.

*--------------------------------------------------------------------------*/

uchar FAR *at5_p_start_val_ns (pr, ie)
	uchar pr;
	uchar ie;
{
	if (ie == IE_CHAN_ID) {

		switch (pr) {

			case NS_CONN_IN :
				return ((uchar FAR *)P_start_val_ns_at5 (conn_in, chan_id));

			case NS_CONN_CO :
				return ((uchar FAR *)P_start_val_ns_at5 (conn_co, chan_id));

			case NS_SETUP_ACK_IN :
				return ((uchar FAR *)P_start_val_ns_at5 (setup_ack_in, chan_id));

			case NS_CALL_PROC_IN :
				return ((uchar FAR *)P_start_val_ns_at5 (call_proc_in, chan_id));

			case NS_ALERT_IN :
				return ((uchar FAR *)P_start_val_ns_at5 (alert_in, chan_id));

#			if AT5_SUPPLEMENTARY_SERVICES == ON
				case NS_SPF_FACILITY_CO :
					return ((uchar FAR *)P_start_val_ns_at5 (spf_fac_co, chan_id));
#			endif

		}

	}

	return (P_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at5_get_ie -

Usage           uchar at5_get_ie (pr, ie);

Return value	: PRESENT/ABSENT

*--------------------------------------------------------------------------*/


uchar at5_get_ie (pr, ie)
	uchar pr;
	uchar ie;
{

	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

#				if AT5_SUPPLEMENTARY_SERVICES == ON
					case IE_DEST_CALL_APPEAR :
						return (Get_ie_at5 (conn_in, dest_call_appear));
#				endif

				case IE_CHAN_ID :
					return (Get_ie_at5 (conn_in, chan_id));

#				if AT5_SUPPLEMENTARY_SERVICES == ON
					case IE_UUI :
						return (Get_ie_at5 (conn_in, uui));
#				endif

				case IE_CALLING_NB :
					return (Get_ie_at5 (conn_in, calling_nb));

				case IE_CALLED_NB :
					return (Get_ie_at5 (conn_in, called_nb));

#			  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				case IE_DISPLAY :

					if (Get_ie_at5 (conn_in, display_fld) == ABSENT) {
						return (Get_ie_at5 (conn_in, display));
					}

					return (PRESENT);
#			  endif
			}

			break;

		case NS_CONN_CO :

			if (ie == IE_CHAN_ID)	return (Get_ie_at5 (conn_co, chan_id));

#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI)		return (Get_ie_at5 (conn_co, uui));
#			endif

#		    if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Get_ie_at5 (conn_co, display_fld));
#			endif

			break;

		case NS_CLEAR_IN :

#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Get_ie_at5 (clear_in, uui));
#			endif

#			if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Get_ie_at5 (clear_in, display_fld));
#			endif

			break;

		case NS_CLEAR_CO :

			switch (ie) {

#				if AT5_SUPPLEMENTARY_SERVICES == ON
					case IE_UUI :
						return (Get_ie_at5 (clear_co, uui));
#				endif

				case IE_CAUSE :
					return (Get_ie_at5 (clear_co, cause));

#			    if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
					case IE_DISPLAY :
						return (Get_ie_at5 (clear_co, display_fld));
#			  	endif
			}

			break;

		case NS_ALERT_IN :
			if (ie == IE_CHAN_ID) 	return (Get_ie_at5 (alert_in, chan_id));
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Get_ie_at5 (alert_in, uui));
#			endif

#			if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Get_ie_at5 (alert_in, display_fld));
#		  	endif
			break;

		case NS_CALL_PROC_IN :
			if (ie == IE_CHAN_ID) 	return (Get_ie_at5 (call_proc_in, chan_id));

#			if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Get_ie_at5 (call_proc_in, display_fld));
#		  	endif
			break;

		case NS_SETUP_ACK_IN :
			if (ie == IE_CHAN_ID) 	return (Get_ie_at5 (setup_ack_in, chan_id));

#	  	    if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Get_ie_at5 (setup_ack_in, display_fld));
#			endif

			break;

		case NS_INFO_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Get_ie_at5 (info_in, display_fld));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY) 	return (Get_ie_at5 (progress_in, display_fld));
#		  endif
			if (ie == IE_CAUSE)			return (Get_ie_at5 (progress_in, cause));
#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_at5 (progress_in, progress_ind));
#		  endif
			break;

#		if AT5_SUPPLEMENTARY_SERVICES == ON

			case NS_SPF_FACILITY_CO :
				if (ie == IE_CAUSE) 	return (Get_ie_at5 (spf_fac_co, cause));
				if (ie == IE_CHAN_ID) 	return (Get_ie_at5 (spf_fac_co, chan_id));
#			  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
					if (ie == IE_DISPLAY) 	return (Get_ie_at5 (spf_fac_co, display_fld));
#		  		endif
				if (ie == IE_SERVICE_ID)return (Get_ie_at5 (spf_fac_co, service_id));
				if (ie == IE_OTHER_CALL_REF)return (Get_ie_at5 (spf_fac_co, other_call_ref));
				break;
#		endif
	}

	return (ABSENT);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at5_isdn_p_str -

Usage           uchar at5_isdn_p_str (pr, ie);

Return value	: pointer to the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar FAR *at5_isdn_p_str (pr, ie)
	uchar	pr;
	uchar   ie;
{
	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

#				if AT5_SUPPLEMENTARY_SERVICES == ON
					case IE_UUI:
						return (Isdn_p_str_at5 (conn_in, uui, text));
#				endif
				case IE_CALLING_NB:
					return (Isdn_p_str_at5 (conn_in, calling_nb, nb));
				case IE_CALLED_NB :
					return (Isdn_p_str_at5 (conn_in, called_nb, nb));
#			  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)

					case IE_DISPLAY :

						if (Isdn_p_str_at5 (conn_in, display_fld, info) == P_NIL) {
							return (Isdn_p_str_at5 (conn_in, display, info));
						}

						return (Isdn_p_str_at5 (conn_in, display_fld, info));
#			 	 endif
			}

			break;

		case NS_CONN_CO :
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Isdn_p_str_at5 (conn_co, uui, text));
#			endif
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (conn_co, display_fld, info));
#		  	endif
			break;

		case NS_ALERT_IN :
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Isdn_p_str_at5 (alert_in, uui, text));
#			endif
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (alert_in, display_fld, info));
#		  	endif
			break;

		case NS_CLEAR_IN :
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Isdn_p_str_at5 (clear_in, uui, text));
#			endif
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (clear_in, display_fld, info));
#		  	endif
			break;

		case NS_CLEAR_CO :
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Isdn_p_str_at5 (clear_co, uui, text));
#			endif
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (clear_co, display_fld, info));
#		  	endif
			break;

		case NS_CALL_PROC_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (call_proc_in, display_fld, info));
#		  endif
			break;

		case NS_SETUP_ACK_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (setup_ack_in, display_fld, info));
#		  endif
			break;

		case NS_INFO_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (info_in, display_fld, info));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (progress_in, display_fld, info));
#		  endif
			break;

#		if AT5_SUPPLEMENTARY_SERVICES == ON

			case NS_SPF_FACILITY_CO :
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_p_str_at5 (spf_fac_co, display_fld, info));
#		  	endif
			break;
#		endif
	}

	return (P_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at5_isdn_lgth_str -

Usage           uchar at5_isdn_lgth_str (pr, ie);

Return value	: length of the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar at5_isdn_lgth_str (pr, ie)
	uchar	pr;
	uchar   ie;
{
	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_UUI:
#				if AT5_SUPPLEMENTARY_SERVICES == ON
					return (Isdn_lgth_str_at5 (conn_in, uui, text));
#				endif

				case IE_CALLING_NB:
					return (Isdn_lgth_str_at5 (conn_in, calling_nb, nb));
				case IE_CALLED_NB :
					return (Isdn_lgth_str_at5 (conn_in, called_nb, nb));
#			  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				case IE_DISPLAY :

					if (Isdn_lgth_str_at5 (conn_in, display_fld, info) == NIL) {
						return (Isdn_lgth_str_at5 (conn_in, display, info));
					}

					return (Isdn_lgth_str_at5 (conn_in, display_fld, info));
#			  endif

			}

			break;

		case NS_CONN_CO :
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Isdn_lgth_str_at5 (conn_co, uui, text));
#			endif
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (conn_co, display_fld, info));
#		  	endif
			break;

		case NS_ALERT_IN :
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Isdn_lgth_str_at5 (alert_in, uui, text));
#			endif
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (alert_in, display_fld, info));
#		  	endif
			break;

		case NS_CLEAR_IN :
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Isdn_lgth_str_at5 (clear_in, uui, text));
#			endif
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (clear_in, display_fld, info));
#		  	endif
			break;

		case NS_CLEAR_CO :
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (ie == IE_UUI) 		return (Isdn_lgth_str_at5 (clear_co, uui, text));
#			endif
#		  	if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
				if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (clear_co, display_fld, info));
#		  	endif
			break;

		case NS_CALL_PROC_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (call_proc_in, display_fld, info));
#		  endif
			break;

		case NS_SETUP_ACK_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (setup_ack_in, display_fld, info));
#		  endif
			break;

		case NS_INFO_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (info_in, display_fld, info));
#		  endif
			break;

		case NS_PROGRESS_IN :
#		  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
			if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (progress_in, display_fld, info));
#		  endif
			break;

#		if AT5_SUPPLEMENTARY_SERVICES == ON
			case NS_SPF_FACILITY_CO :
#		  		if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
					if (ie == IE_DISPLAY)	return (Isdn_lgth_str_at5 (spf_fac_co, display_fld, info));
#		  		endif
				break;
#		endif
	}

	return (NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at5_isdn_get_val -

Usage           uchar at5_isdn_get_val (pr, ie, field);

Return value	: value of the 'field' field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar at5_isdn_get_val (pr, ie, field)
	uchar pr;
	uchar ie;
	uchar field;
{
	switch (ie) {

		case IE_CAUSE :

			switch (pr) {

				case NS_CLEAR_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_at5 (clear_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_at5 (clear_in,cause,cause_class));
					}

					break;

				case NS_CLEAR_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_at5 (clear_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_at5 (clear_co,cause,cause_class));
					}

					break;

#				if AT5_SUPPLEMENTARY_SERVICES == ON
					case NS_SPF_FACILITY_CO :

						switch (field) {

							case FLD_CAUSE_VAL :
								return (Isdn_get_val_at5 (spf_fac_co,cause,cause_val));

							case FLD_CAUSE_CLASS :
								return (Isdn_get_val_at5 (spf_fac_co,cause,cause_class));
						}

						break;
#				endif

				case NS_PROGRESS_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_at5 (progress_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_at5 (progress_in,cause,cause_class));
					}

					break;
			}

			break;

#	  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
		case IE_DISPLAY :

			switch (pr) {

				case NS_CONN_IN :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (conn_in,display_fld,display_fld_type));
					break;

				case NS_CONN_CO :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (conn_co,display_fld,display_fld_type));
					break;

				case NS_CLEAR_IN :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (clear_in,display_fld,display_fld_type));
					break;

				case NS_CLEAR_CO :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (clear_co,display_fld,display_fld_type));
					break;

				case NS_ALERT_IN :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (alert_in,display_fld,display_fld_type));
					break;

				case NS_CALL_PROC_IN :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (call_proc_in,display_fld,display_fld_type));
					break;

				case NS_SETUP_ACK_IN :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (setup_ack_in,display_fld,display_fld_type));
					break;

				case NS_INFO_IN :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (info_in,display_fld,display_fld_type));
					break;

				case NS_PROGRESS_IN :
					if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (progress_in,display_fld,display_fld_type));
					break;

#				if AT5_SUPPLEMENTARY_SERVICES == ON
					case NS_SPF_FACILITY_CO :
						if (field == FLD_DISPLAY_TYPE)	return (Isdn_get_val_at5 (spf_fac_co,display_fld,display_fld_type));
						break;
#				endif
			}

			break;

#		  endif

		case IE_OTHER_CALL_REF :

			switch (pr) {

#				if AT5_SUPPLEMENTARY_SERVICES == ON
					case NS_SPF_FACILITY_CO :
						if (field == FLD_OTHER_CALL_REF) return (Isdn_get_val_at5 (spf_fac_co, other_call_ref, conn_id));
						break;
#				endif
			}

			break;

#		if AT5_SUPPLEMENTARY_SERVICES == ON

			case IE_DEST_CALL_APPEAR :

				switch (pr) {

					case NS_CONN_IN :
						if (field == FLD_DEST_CALL_APPEAR) return (Isdn_get_val_at5 (conn_in, dest_call_appear, button_nb));
						break;
				}

				break;

			case IE_SEL_CALL_APPEAR :

				switch (pr) {

					case NS_SPF_FACILITY_CO :
						if (field == FLD_CALL_APPEAR) return (Isdn_get_val_at5 (spf_fac_co, sel_call_appear, button_nb_call_appear));
						break;
				}

				break;

			case IE_SERVICE_ID :

				switch (pr) {

					case NS_SPF_FACILITY_CO :
						if (field == FLD_SERVICE_ID) return (Isdn_get_val_at5 (spf_fac_co, service_id, service_id));
						break;
				}

			break;

#		endif

#	if CC_PAR_PROGRESS_IND_IE == ON
		case IE_PROGRESS_IND :

			switch (pr) {

				case NS_PROGRESS_IN :

                    cc_progress_ind.nb = 0;
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (at5_get_ie (NS_PROGRESS_IN,IE_PROGRESS_IND) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_at5 (progress_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_at5 (progress_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_at5 (progress_in, progress_ind);
                    	cc_progress_ind.nb++;
                    }

					break;
			}

			break;
#	endif

		case IE_CALLED_NB:

			switch (pr) {

				case NS_CONN_IN :

					switch (field) {

						case FLD_NB_TYPE:
							return (Isdn_get_val_at5 (conn_in, called_nb, nb_type));

						case FLD_NB_PLAN:
							return (Isdn_get_val_at5 (conn_in, called_nb, plan_id));

					}
					break;

			}
			break;
	}

	return (BYTE_VAL_NIL);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at5_cc_get_chan_id - implements the estraction of the channel
				ID given by the network.

Usage           uchar at5_cc_get_chan_id ();

Return value	: chan_id or NO_CHAN

*--------------------------------------------------------------------------*/

#define	At5_int_type					((P_val_ns_at5(chan_id))p_start_val_ns) -> int_type
#define	At5_bri_selected_channel		((P_val_ns_at5(chan_id))p_start_val_ns) -> chan_sel
#define	At5_channel_pref_excl			((P_val_ns_at5(chan_id))p_start_val_ns) -> pref_excl
#define	At5_pri_selected_channel(xx)	((uchar FAR *)p_start_val_ns + Offsetof (val_ns_at5_chan_id, chan_nb))[xx]

uchar at5_cc_get_chan_id (pr, ie)
	uchar pr;
	uchar ie;
{

	uchar FAR *p_start_val_ns;

	p_start_val_ns = at5_p_start_val_ns (pr, ie);


		/*
			If 'chan_sel' is NO_CHAN, return NO_CHAN.

			If 'int_type' field is INT_TYPE_BRI,
				return 'chan_sel' field,	(<=> Basic Rate access)
			else
				return NO_CHAN
		*/

	if ((p_start_val_ns == P_NIL) || (At5_bri_selected_channel == NO_CHAN)) {
		return (OK);
	}

    	/* read the fields 'Channel selection' and 'Preferred/Exclusive' */

	cc_chan_excl  = At5_channel_pref_excl;
	cc_chan_sel = At5_bri_selected_channel;

	if (At5_int_type == INT_TYPE_BRI) {

			/* Basic rate : chan_id is in 'chan_sel' field */

		cc_chan_nb    = 1;
		cc_chan_id[0] = At5_bri_selected_channel;

	} else {

		cc_chan_nb    = 1;
		cc_chan_id[0] = At5_pri_selected_channel (1);
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at5_get_remaining_ie_instance -

Usage           uchar at5_get_remaining_ie_instance (pr, ie);

Return value	: nb of remaining IE instance.

*--------------------------------------------------------------------------*/

uchar display;

uchar at5_get_remaining_ie_instance (pr, ie)
	uchar pr;
	uchar ie;
{
	uchar instance_nb 	= 0;
	display				= FALSE;

	switch (ie) {

#	  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
		case IE_DISPLAY :

			if (pr == NS_CONN_IN) {

				Get_remaining_ie_instance_nb_at5 (conn_in, display_fld, &instance_nb);

				if (instance_nb == 0) {
					display = TRUE;
					Get_remaining_ie_instance_nb_at5 (conn_in, display, &instance_nb);
				}

				break;
			}

			if (pr == NS_CONN_CO)		{Get_remaining_ie_instance_nb_at5 (conn_co, display_fld, &instance_nb);     	break;}
			if (pr == NS_CLEAR_IN)		{Get_remaining_ie_instance_nb_at5 (clear_in, display_fld, &instance_nb);    	break;}
			if (pr == NS_CLEAR_CO)		{Get_remaining_ie_instance_nb_at5 (clear_co, display_fld, &instance_nb);    	break;}
			if (pr == NS_ALERT_IN)		{Get_remaining_ie_instance_nb_at5 (alert_in, display_fld, &instance_nb);    	break;}
			if (pr == NS_CALL_PROC_IN)	{Get_remaining_ie_instance_nb_at5 (call_proc_in, display_fld, &instance_nb);	break;}
			if (pr == NS_SETUP_ACK_IN)	{Get_remaining_ie_instance_nb_at5 (setup_ack_in, display_fld, &instance_nb);	break;}
			if (pr == NS_INFO_IN) 		{Get_remaining_ie_instance_nb_at5 (info_in, display_fld, &instance_nb);     	break;}
			if (pr == NS_PROGRESS_IN)	{Get_remaining_ie_instance_nb_at5 (progress_in, display_fld, &instance_nb); 	break;}
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (pr == NS_SPF_FACILITY_CO){Get_remaining_ie_instance_nb_at5 (spf_fac_co, display_fld, &instance_nb); 	break;}
#			endif
			break;
#	  endif

		default:
			break;
	}

	return (instance_nb);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at5_set_to_next_ie_instance -

Usage           uchar at5_set_to_next_ie_instance (pr, ie);

Return value	: set to the next IE's instance.

*--------------------------------------------------------------------------*/

uchar at5_set_to_next_ie_instance(pr, ie)
	uchar pr;
	uchar ie;
{

	switch (ie) {

#	  if (CC_PAR_DISPLAY_IE == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)
		case IE_DISPLAY :

			if (pr == NS_CONN_IN)		{

				if (display == FALSE) {
					Set_to_next_ie_instance_at5 (conn_in, display_fld);

				} else {

					Set_to_next_ie_instance_at5 (conn_in, display);

				}

				break;
			}

			if (pr == NS_CONN_CO)		{Set_to_next_ie_instance_at5 (conn_co, display_fld);	break;}
			if (pr == NS_CLEAR_IN)		{Set_to_next_ie_instance_at5 (clear_in, display_fld);	break;}
			if (pr == NS_CLEAR_CO)		{Set_to_next_ie_instance_at5 (clear_co, display_fld);	break;}
			if (pr == NS_ALERT_IN)		{Set_to_next_ie_instance_at5 (alert_in, display_fld);	break;}
			if (pr == NS_CALL_PROC_IN)	{Set_to_next_ie_instance_at5 (call_proc_in, display_fld);break;}
			if (pr == NS_SETUP_ACK_IN)	{Set_to_next_ie_instance_at5 (setup_ack_in, display_fld);break;}
			if (pr == NS_INFO_IN) 		{Set_to_next_ie_instance_at5 (info_in, display_fld);	break;}
			if (pr == NS_PROGRESS_IN)	{Set_to_next_ie_instance_at5 (progress_in, display_fld);break;}
#			if AT5_SUPPLEMENTARY_SERVICES == ON
				if (pr == NS_SPF_FACILITY_CO){Set_to_next_ie_instance_at5 (spf_fac_co, display_fld); break;}
#			endif
			break;
#	  endif

		default:
			break;
	}

	return (NIL);

}

/*EOF*/
