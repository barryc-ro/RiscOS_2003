
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_build.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		at5_cc_build_to_ns - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *		at5_net_checking_service - determines the requested service from the
 *							   received message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	uchar	at5_build_other_pr			(code_t prim_code, uchar FAR *p_data);
	uchar	at5_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar	at5_build_other_pr			();
	uchar	at5_cc_load_ns_test			();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			at5_cc_build_to_ns - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar ets_cc_build_to_ns (code_t primitive_code);
							- primitive_code 	= code of the primitive to send,

Return value : 	ets_cc_build_to_ns returns = OK
									   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar at5_cc_build_to_ns (prim_code, p_data)
	code_t		prim_code;		/* primitive code */
	uchar  FAR *p_data;
{
	CONST struct cc_service FAR	*p_cc_service;
	uchar                        i;

		/* Switch according to the primitive to be sent */

	switch (prim_code) {

			/*------------------- CONNECTION REQUEST ---------------------*/

		case  NS_CONN_RQ :
			Isdn_init_at5_ctx_rq_rs			(conn_rq,
											 p_data
											);

			p_cc_service = Cc_call_p_cc_service;

			_Isdn_at5_store_bc				(conn_rq,
												Cc_service_bc_trf_cap,
												Cc_service_bc_trf_mode,
												Cc_service_bc_trf_rate,
												Cc_service_bc_layer_nb,
												Cc_service_bc_layer_id,
												Cc_service_bc_protocol_id,
												Cc_service_bc_add_layer_id,
												Cc_service_bc_add_protocol_id
											);

			if (Cc_service_llc_layer_nb != 0) {
				_Isdn_at5_store_llc 			(conn_rq,\
												TRF_CAP_UNRESTRICTED,\
												TRF_MODE_PACKET,\
												TRF_RATE_PACKET_MODE,\
												STRUCTURE_SDU_INT,\
												BIDIRECTIONAL_SYMMETRY,\
												TRF_RATE_PACKET_MODE,\
												Cc_service_bc_layer_nb,\
												Cc_service_bc_layer_id,\
												Cc_service_bc_protocol_id,\
												BYTE_VAL_NIL,\
												BYTE_VAL_NIL,\
												Cc_service_bc_add_layer_id,\
												Cc_service_bc_add_protocol_id
											);
			}


#			if AT5_SUPPLEMENTARY_SERVICES == ON

				if ((Cc_service_bc_protocol_id == PROTOCOL_ID_1_G711_u) &&
					(cc_call_appear != BYTE_VAL_NIL)) {

						/* Voice service */

					Isdn_at5_store_ori_call_appear (conn_rq, cc_call_appear);
				}

#			endif

			if (p_calling_address != P_NIL) {

				Isdn_at5_store_calling_nb	(conn_rq,
											 cc_calling_nb_type,
											 PLAN_ISDN,
											 p_calling_address
											);
			}

			if (p_rq_address != P_NIL) {

				Isdn_at5_store_keypad		(conn_rq,
											 p_rq_address
											);

			}

				/*
					Store the Sending_complete IE if:
						- requested by the user,
						- or an address is beeing sent and CC is configured
						  in automatic sending_complete.
				*/

			if ((cc_sending_complete == ON) ||
				((p_rq_address != P_NIL) &&
				 !(Cc_na_out_calls_behaviour & CC_USER_SENDING_COMPLETE))
			   ) {
				Isdn_at5_store_sending_complete	(conn_rq);
			}

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_at5_store_chan_id_BRI	(conn_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_at5_store_chan_id_PRI	(conn_rq,
													 cc_chan_excl,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif

				}

			}

#			if AT5_SUPPLEMENTARY_SERVICES == ON

				if (p_cc_uui != P_NIL) {
					Isdn_at5_store_uui		(conn_rq,
											 p_cc_uui
											);
				}

#			endif

			break;

	/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_at5_ctx_rq_rs 		(conn_rs,
											 p_data
											);

#			if AT5_SUPPLEMENTARY_SERVICES == ON

				if (p_cc_uui != P_NIL) {
					Isdn_at5_store_uui		(conn_rs,
											 p_cc_uui
											);
				}

#			endif

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_at5_store_chan_id_BRI	(conn_rs,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_at5_store_chan_id_PRI	(conn_rs,
													 cc_chan_excl,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif
				}

			}

			break;

	/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_at5_ctx_rq_rs			(clear_rq,
											 p_data
											);

			Isdn_at5_store_cause			(clear_rq,
											 LOCATION_USER,
											 cc_error_class,
											 cc_error_value,
											 0,
											 DIAGNOSTIC_NIL
											);

#			if AT5_SUPPLEMENTARY_SERVICES == ON

				if (p_cc_uui != P_NIL) {
					Isdn_at5_store_uui		(clear_rq,
											 p_cc_uui
											);
				}

#			endif

			break;

	/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_at5_ctx_rq_rs			(clear_rs,
											 p_data
											);

			break;

		default :

			if (at5_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}

				/*----------------------------------------*/

uchar at5_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{

#	if CC_SPF_FAC == ON
		uchar cc_fac;
#	endif

	switch (prim_code) {

	/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_at5_ctx_rq_rs			(info_rq,
											 p_data
											);

#			if CC_SPF_FAC == ON

				switch (cc_spf_facility_code) {

					case ACU_FAC_CALL_APPEAR :

						Isdn_at5_store_switchhook (info_rq, cc_switchhook);
						return (OK);

					case ACU_FAC_FEATURE_ACT :

						Isdn_at5_store_feature_act (info_rq,
													cc_button_type,
													cc_module_nb,
													cc_button_nb
												);
						return (OK);
				}


#			endif

			if (cc_sending_complete != OFF) {
				Isdn_at5_store_sending_complete (info_rq);
			}

			if (p_rq_address != P_NIL) {
				Isdn_at5_store_keypad		(info_rq,
											 p_rq_address
											);
			}

			break;

	/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_at5_ctx_rq_rs			(alert_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_at5_store_chan_id_BRI	(alert_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_at5_store_chan_id_PRI	(alert_rq,
													 cc_chan_excl,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif
				}

			}

#			if AT5_SUPPLEMENTARY_SERVICES == ON

				if (p_cc_uui != P_NIL) {
					Isdn_at5_store_uui (alert_rq, p_cc_uui);
				}

#			endif

			break;

	/*---------------- CALL PROCEEDING REQUEST */

		case  NS_CALL_PROC_RQ :
			Isdn_init_at5_ctx_rq_rs			(call_proc_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_at5_store_chan_id_BRI	(call_proc_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_at5_store_chan_id_PRI	(call_proc_rq,
													 cc_chan_excl,
													 AS_INDICATED,
													 CODING_STD_CCITT,
													 B_CHAN,
													 cc_chan_id
													);
#					endif
				}

			}

			break;

#	if (CC_SPF_FAC == ON) && (AT5_SUPPLEMENTARY_SERVICES == ON)

		case  NS_SPF_FACILITY_RQ :
			Isdn_init_at5_ctx_rq_rs			(spf_fac_rq,
											 p_data
											);

			switch (cc_spf_facility_code) {

				case ACU_FAC_TRF :

					if (cc_current_conn_id != cc_other_conn_id) {

							/* Indicate the held conn_id */

						Isdn_at5_store_other_call_ref	(spf_fac_rq,
														 cc_current_conn_id
														);

							/* Send the message on the ACTIVE call */

						cc_current_conn_id = cc_other_conn_id;

					}

					cc_fac = DA_TRANS;
					break;

				case ACU_FAC_HOLD :
					cc_fac = DA_HOLD;
					break;

				case ACU_FAC_RETRIEVE :
					cc_fac = DA_RECONN;
					break;

				case ACU_FAC_DROP :
					cc_fac = DA_DROP;
					break;

				case ACU_FAC_THREE_PARTY :

					cc_fac = DA_CONF;

					if (cc_current_conn_id != cc_other_conn_id) {

							/* Indicate the held conn_id */

						Isdn_at5_store_other_call_ref	(spf_fac_rq,
														 cc_current_conn_id
														);

							/* Send the message on the ACTIVE call */

						cc_current_conn_id = cc_other_conn_id;

					}

					break;
			}

			Isdn_at5_store_service_id (spf_fac_rq, cc_fac);

			break;

#	endif

				/*---------------- UNKNOWN primitive ---------------------*/

		default :
			return (NOK);
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			at5_net_checking_service - implements the checking of a received
				call to determine the service requested.

Usage           uchar at5_net_checking_service ();

Return value : 	at5_net_checking_service returns a service code or UNKNOWN_SERVICE.

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar at5_net_checking_service ()
{

		/* Dispatch according to the transfer capability */

	switch (Isdn_get_val_at5 (conn_in, bc, trf_cap)) {

			/*---------------*/
			/*     Speech    */
			/*---------------*/

		case TRF_CAP_SPEECH :
			return (CC_SRV_VOICE);

			/*---------------*/
			/* Audio 3.1 kHz */
			/*---------------*/

		case TRF_CAP_3_1_AUDIO :

			if (Get_ie_at5 (conn_in, progress_ind) == PRESENT) {
				return (CC_SRV_VOICE);
			}

				/* Dispatch according to layer 1 protocol */

			switch (Isdn_get_val_at5 (conn_in, bc, protocol_id)) {

					/* u law */

				case PROTOCOL_ID_1_G711_u :
					return (CC_SRV_VOICE);

					/* Unknown : use the HLC teleservice field */

				default :
					return (CC_SRV_NIL);

			}

			/*---------------*/
			/* Unrestricted  */
			/*---------------*/

		case TRF_CAP_UNRESTRICTED :

				/* Dispatch according to layer protocol */

			switch (Isdn_get_val_at5 (conn_in, bc, protocol_id)) {

					/* X25 Application */

				case PROTOCOL_ID_2_X25_LL :
					return (CC_SRV_X25);


					/* Data from 56KBS */

				case PROTOCOL_ID_1_RA_I461 :
                	cc_layer_1_info.syn_asyn  = SYN;
					return (CC_SRV_DATA_56KBS);

					/* None : use the LLC IE */

				case BYTE_VAL_NIL :

					if (Get_ie_at5 (conn_in, llc) == PRESENT) {

								/* Dispatch according to layer protocol */

						switch (Isdn_get_val_at5 (conn_in, llc, protocol_id)) {

								/* X25 Application */

							case PROTOCOL_ID_2_X25_LL :
								return (CC_SRV_X25);

							case PROTOCOL_ID_1_V110 :
								cc_layer_1_info.user_rate = Isdn_get_val_at5 (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_at5 (conn_in, llc, syn_asyn);

								if ((cc_layer_1_info.user_rate == RA_56KBS) &&
									(cc_layer_1_info.syn_asyn  == SYN)
								   ) {
									return (CC_SRV_DATA_56KBS);
								}

								return (CC_SRV_V110);
						}

					}

					return (CC_SRV_DATA);

				default :
					return (CC_SRV_DATA);

			}

		default :
			break;

	}

	return (CC_SRV_NIL);

}


#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar	at5_cc_load_ns_test	(p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
