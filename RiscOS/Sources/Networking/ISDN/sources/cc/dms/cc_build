
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - build_cc.dms
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		dms_cc_build_to_ns - implements the loading of a NS test primitive
 *			ready to be sent to the Network Signalling function.
 *
 *		dms_net_checking_service - determines the requested service from the
 *							   received message.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	uchar	dms_build_other_pr			(code_t prim_code, uchar FAR *p_data);
	uchar	dms_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar	dms_build_other_pr			();
	uchar	dms_cc_load_ns_test			();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			dms_cc_build_to_ns - implements the sending of a test primitive
								  to the NS entity.

Usage			uchar dms_cc_build_to_ns (code_t primitive_code);
							- primitive_code 	= code of the primitive to send,

Return value : 	dms_cc_build_to_ns returns OK

common constants and declarations : ns.h, isdn.h

common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar dms_cc_build_to_ns (prim_code, p_data)
	code_t		prim_code;		/* primitive code */
	uchar  FAR *p_data;
{
	CONST struct cc_service FAR	*p_cc_service;

		/* Switch according to the primitive to send */

	switch (prim_code) {

/*==========================================================================*/

		/*========== primitives as seen from TE side ==========*/

/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :

			Isdn_init_dms_ctx_rq_rs			(conn_rq,
											 p_data
											);

			p_cc_service = Cc_call_p_cc_service;

			Isdn_dms_store_bc				(conn_rq,
											 Cc_service_bc_trf_cap,
											 Cc_service_bc_protocol_id_1
											);

			if (Cc_na_type == BRI) {

#				if CC_TYPE_BRI == ON

					if (Cc_na_function != FG_NT_TE) {

                        if (p_rq_address != P_NIL) {
                            Isdn_dms_store_keypad	(conn_rq,
                                                     p_rq_address
                                                    );
                        }

                    } else {

						Isdn_dms_store_called_nb  (conn_rq,
												 cc_called_nb_type,
												 cc_called_nb_plan,
												 p_rq_address
												);
                    }

					if (p_calling_subaddress != P_NIL) {

						Isdn_dms_store_calling_sub_add	(conn_rq,
											 SUB_ADD_OSI,
											 SUB_ADD_ODD,
											 p_calling_subaddress
											);
					}

					if (p_rq_subaddress != P_NIL) {
						Isdn_dms_store_called_sub_add(conn_rq,
												 SUB_ADD_OSI,
												 SUB_ADD_EVEN,
												 p_rq_subaddress
												);
					}

#				endif

			} else {

#				if CC_TYPE_PRI == ON

					if (p_rq_address != P_NIL) {

						Isdn_dms_store_called_nb	(conn_rq,
												 cc_called_nb_type,
												 cc_called_nb_plan,
												 p_rq_address
												);
					}
#				endif
			}

			if (p_calling_address != P_NIL) {

				Isdn_dms_store_calling_nb	(conn_rq,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 p_calling_address
											);

			}

			if (Cc_service_hlc_teleservice != BYTE_VAL_NIL) {

				Isdn_dms_store_hlc_CCITT	(conn_rq,
											 Cc_service_hlc_teleservice,
											 BYTE_VAL_NIL
											);
			}

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_dms_store_chan_id_BRI	(conn_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_dms_store_chan_id_PRI	(conn_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 BYTE_VAL_NIL,
													 cc_chan_id[0]
													);
#					endif

				}

			}

#			if _CC_SPID_INFO == ON

				if (Cc_na_function == FG_NT_TE) {

                    if (cc_endpoint_action != ACU_ACTION_NO_ENDPOINT_ID) {

                        Isdn_dms_store_endpoint_id (conn_rq,
                                                    cc_usid,
                                                    cc_tid,
                                                    cc_interpreter,
                                                    0
                                                    );
                    }
                }

#			endif

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_dms_ctx_rq_rs 		(conn_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_dms_store_chan_id_BRI	(conn_rs,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_dms_store_chan_id_PRI	(conn_rs,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 BYTE_VAL_NIL,
													 cc_chan_id[0]
													);
#					endif

				}

			}

			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_dms_ctx_rq_rs			(clear_rq,
											 p_data
											);

			Isdn_dms_store_cause			(clear_rq,
											 CODING_STD_CCITT,
											 LOCATION_USER,
											 cc_error_class,
											 cc_error_value,
											 "0"	/* shall not appear in SPDU */
											);

			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_dms_ctx_rq_rs			(clear_rs,
											 p_data
											);


			break;

		default :

			if (dms_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}

				/*----------------------------------------*/

uchar dms_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{

#	if _CC_SPID_INFO == ON

        uchar p_diag[2];

        p_diag [0] = 0;
        p_diag [1] = 0;

#	endif

	switch (prim_code) {


/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_dms_ctx_rq_rs			(info_rq,
											 p_data
											);

#			if _CC_SPID_INFO == ON

				if (Cc_na_function == FG_NT_TE) {

                    switch (cc_endpoint_action) {

                    	case ACU_ACTION_NO_ENDPOINT_ID :
                        	break;

                        case ACU_ACTION_PROMPT_INFO :

                            Isdn_dms_store_endpoint_id (info_rq,
                                                            cc_usid,
                                                            cc_tid,
                                                            cc_interpreter,
                                                            cc_ces
                                                        );

	                        Isdn_dms_store_information_rq 	(info_rq,
                                                             INFO_TYPE_TERMINAL_ID,
                            								 PROMPT_FOR_ADD_INFO,
                        									 BYTE_VAL_NIL
                                                            );

                            break;

                        default :

                            Isdn_dms_store_endpoint_id (info_rq,
                                                            cc_usid,
                                                            cc_tid,
                                                            cc_interpreter,
                                                            cc_ces
                                                        );

                            if (cc_error_class != BYTE_VAL_NIL) {

                            		/* The diagnostic is the SPID (0x3A) */
                                    
						        p_diag [0] = 0x3A;
                                Isdn_dms_store_cause  (info_rq,
                                                      	CODING_STD_CCITT,
                                                        LOCATION_PU_NET_LOC_USER,
                                                        cc_error_class,
                                                        cc_error_value,
                                                        p_diag
                                                        );
                            }

                        break;

                    }
				}

#			endif

			if (p_rq_address != P_NIL) {

				Isdn_dms_store_keypad			(info_rq,
												 p_rq_address
												);
            }

			break;

/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_dms_ctx_rq_rs			(alert_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_dms_store_chan_id_BRI	(alert_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_dms_store_chan_id_PRI	(alert_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 BYTE_VAL_NIL,
													 cc_chan_id[0]
													);
#					endif

				}

			}

			break;


/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_dms_ctx_rq_rs			(call_proc_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_dms_store_chan_id_BRI	(call_proc_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_dms_store_chan_id_PRI	(call_proc_rq,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 BYTE_VAL_NIL,
													 cc_chan_id[0]
													);
#					endif

				}

			}

			break;

#	if CC_RESTART_PROCEDURE == ON /* { */

/*---------------- RESTART_RQ */

		case NS_RESTART_RQ :
			Isdn_init_dms_ctx_rq_rs			(restart_rq,
											 p_data
											);

			break;

/*---------------- RESTART_RS */

		case NS_RESTART_RS :
			Isdn_init_dms_ctx_rq_rs			(restart_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_dms_store_chan_id_BRI	(restart_rs,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_dms_store_chan_id_PRI	(restart_rs,
													 INT_ID_IMPLICIT,
													 cc_chan_excl,
													 NOT_D_CHAN,
													 AS_INDICATED,
													 BYTE_VAL_NIL,
													 cc_chan_id[0]
													);
#					endif

				}

			}

			Isdn_dms_store_restart_ind		(restart_rs,
											 cc_restart_indicator
											);


			cc_chan_id[0] = NO_CHAN;

			break;

#	endif /* CC_RESTART_PROCEDURE == ON } */

/*==========================================================================*/

				/*---------------- UNKNOWN primitive ---------------------*/

		default :
			return (NOK);
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			dms_net_checking_service - implements the checking of a received
				call to determine the service requested.

Usage           uchar dms_net_checking_service ();

Return value : 	dms_net_checking_service returns a service code or UNKNOWN_SERVICE.

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar dms_net_checking_service ()
{

		/* Dispatch according to the transfer capability */

	switch (Isdn_get_val_dms (conn_in, bc, trf_cap)) {

			/*---------------*/
			/*     Speech    */
			/*---------------*/

		case TRF_CAP_SPEECH :
			return (CC_SRV_VOICE);

			/*---------------*/
			/* Audio 3.1 kHz */
			/*---------------*/

		case TRF_CAP_3_1_AUDIO :

			if (Get_ie_dms (conn_in, progress_ind) == PRESENT) {
				return (CC_SRV_VOICE);
			}

				/* Dispatch according to layer 1 protocol */

			switch (Isdn_get_val_dms (conn_in, bc, protocol_id_1)) {

					/* u law */

				case PROTOCOL_ID_1_G711_u :
					return (CC_SRV_VOICE);

					/* Unknown : use the HLC teleservice field */

				case BYTE_VAL_NIL :

					if (Isdn_get_val_dms (conn_in, hlc, teleservice) == FAX_3) {
						return (CC_SRV_FAX);

					} else {

						return (CC_SRV_NIL);
					}

				default :
					return (CC_SRV_NIL);

			}

			/*---------------*/
			/*  Audio 7 kHz  */
			/*---------------*/

		case TRF_CAP_7_AUDIO :
			return (CC_SRV_AUDIO_7);

			/*---------------*/
			/* Unrestricted  */
			/*---------------*/

		case TRF_CAP_UNRESTRICTED :

				/* Dispatch according to layer 1 protocol */

			switch (Isdn_get_val_dms (conn_in, bc, protocol_id_1)) {

					/* X25 Application */

				case PROTOCOL_ID_1_V110 :
					cc_layer_1_info.user_rate = RA_56KBS;
					cc_layer_1_info.syn_asyn  = SYN;
					return (CC_SRV_DATA_56KBS);

					/* None : use the LLC IE */

				case BYTE_VAL_NIL :

					if (Get_ie_dms (conn_in, llc) == PRESENT) {

							/* Search for multi-channels rates */

						switch (Isdn_get_val_dms (conn_in, llc, trf_rate)) {

							case TRF_RATE_2x64KBS :
								return (CC_SRV_DATA_128KBS);

							case TRF_RATE_384KBS :
								return (CC_SRV_DATA_H0);

							case TRF_RATE_1536KBS :
								return (CC_SRV_DATA_H11);

							case TRF_RATE_1920KBS :
								return (CC_SRV_DATA_H12);

						}

								/* Dispatch according to layer 1 protocol */

						switch (Isdn_get_val_dms (conn_in, llc, protocol_id_1)) {

								/* X25 Application */

							case PROTOCOL_ID_1_X31 :
								return (CC_SRV_X25);

							case PROTOCOL_ID_1_V110 :
								cc_layer_1_info.user_rate = Isdn_get_val_dms (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_dms (conn_in, llc, syn_asyn);

								if ((cc_layer_1_info.user_rate == RA_56KBS) &&
									(cc_layer_1_info.syn_asyn  == SYN)
								   ) {
									return (CC_SRV_DATA_56KBS);

								} else {

									cc_layer_1_info.stop_bits = Isdn_get_val_dms (conn_in, llc, stop_bit);
									cc_layer_1_info.data_bits = Isdn_get_val_dms (conn_in, llc, data_bit);
									cc_layer_1_info.parity    = Isdn_get_val_dms (conn_in, llc, parity);
									return (CC_SRV_V110);
								}


							case PROTOCOL_ID_1_V120 :
								cc_layer_1_info.user_rate = Isdn_get_val_dms (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_dms (conn_in, llc, syn_asyn);
								cc_layer_1_info.stop_bits = Isdn_get_val_dms (conn_in, llc, stop_bit);
								cc_layer_1_info.data_bits = Isdn_get_val_dms (conn_in, llc, data_bit);
								cc_layer_1_info.parity    = Isdn_get_val_dms (conn_in, llc, parity);
								return (CC_SRV_V120);

						}

					}

					return (CC_SRV_DATA);

			}

			switch (Isdn_get_val_dms (conn_in, hlc, teleservice)) {

				case FAX_4 :
					return (CC_SRV_FAX_4);

			}

			break;

			/*---------------*/
			/*     Video     */
			/*---------------*/

		case TRF_CAP_VIDEO :
			return (CC_SRV_VIDEO);

		default :
			break;

	}

	return (CC_SRV_NIL);

}

#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar	dms_cc_load_ns_test	(p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
