
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_build.bip
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		bip_cc_build_to_ns - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *		bip_net_checking_service - determines the requested service from the
 *							   received message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	uchar	bip_build_other_pr			(code_t prim_code, uchar FAR *p_data);
	uchar	bip_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar	bip_build_other_pr			();
	uchar	bip_cc_load_ns_test			();
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bip_cc_build_to_ns - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar bip_cc_build_to_ns (code_t primitive_code);
							- primitive_code 	= code of the primitive to send,

Return value : 	bip_cc_build_to_ns returns = OK
									   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar bip_cc_build_to_ns (prim_code, p_data)
	code_t		prim_code;		/* primitive code */
	uchar  FAR *p_data;
{
	CONST struct cc_service FAR	*p_cc_service;

		/* Switch according to the primitive to be sent */

	switch (prim_code) {

			/*------------------- CONNECTION REQUEST ---------------------*/

		case  NS_CONN_RQ :
			Isdn_init_bip_ctx_rq_rs			(conn_rq,
											 p_data
											);

			p_cc_service = Cc_call_p_cc_service;

			Isdn_bip_store_bc				(conn_rq,
											 Cc_service_bc_trf_cap,
											 Cc_service_bc_trf_mode,
											 Cc_service_bc_protocol_id_1,
											 Cc_service_bc_protocol_id_2
											);

			if (p_calling_address != P_NIL) {

				Isdn_bip_store_calling_nb	(conn_rq,
											 PLAN_ISDN,
											 NB_LOCAL,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 p_calling_address
											);

			}

			if (p_calling_subaddress != P_NIL) {

				Isdn_bip_store_calling_sub_add	(conn_rq,
											 SUB_ADD_OSI,
											 SUB_ADD_ODD,
											 p_calling_subaddress
											);
			}

			if (p_rq_address != P_NIL) {

				Isdn_bip_store_called_nb	(conn_rq,
											 cc_called_nb_plan,
											 cc_called_nb_type,
											 p_rq_address
											);
			}

			if (p_rq_subaddress != P_NIL) {

				Isdn_bip_store_called_sub_add	(conn_rq,
											 SUB_ADD_OSI,
											 SUB_ADD_EVEN,
											 p_rq_subaddress
											);
			}

			if (Cc_service_hlc_teleservice != BYTE_VAL_NIL) {

				Isdn_bip_store_hlc_CCITT	(conn_rq,
											 Cc_service_hlc_teleservice,
											 BYTE_VAL_NIL
											);
			}


				/* Channel ID is mandatory */

			Isdn_bip_store_chan_id_PRI		(conn_rq,
												INT_ID_IMPLICIT,
												cc_chan_excl,
												AS_INDICATED,
												BYTE_VAL_NIL,
												cc_chan_id
											);

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_bip_ctx_rq_rs			(conn_rs,
											 p_data
											);



			if (cc_chan_id[0] != NIL) {


				Isdn_bip_store_chan_id_PRI	(conn_rs,
												INT_ID_IMPLICIT,
												cc_chan_excl,
												AS_INDICATED,
												BYTE_VAL_NIL,
												cc_chan_id
											);

			}


			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_bip_ctx_rq_rs			(clear_rq,
											 p_data
											);

			Isdn_bip_store_cause			(clear_rq,
											 CODING_STD_CCITT,
											 LOCATION_USER,
											 cc_error_class,
											 cc_error_value,
											 A_NIL
											);

			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_bip_ctx_rq_rs			(clear_rs,
											 p_data
											);

			break;

		default :

			if (bip_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}

				/*----------------------------------------*/

uchar bip_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{
	switch (prim_code) {

/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_bip_ctx_rq_rs			(alert_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				Isdn_bip_store_chan_id_PRI	(alert_rq,
												INT_ID_IMPLICIT,
												cc_chan_excl,
												AS_INDICATED,
												BYTE_VAL_NIL,
												cc_chan_id
											);

			}

			break;

/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_bip_ctx_rq_rs			(call_proc_rq,
											 p_data
											);


			if (cc_chan_id[0] != NIL) {


				Isdn_bip_store_chan_id_PRI	(call_proc_rq,
												INT_ID_IMPLICIT,
												cc_chan_excl,
												AS_INDICATED,
												BYTE_VAL_NIL,
												cc_chan_id
											);

			}

			break;

				/*---------------- UNKNOWN primitive ---------------------*/

		default :
			return (NOK);
	}

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bip_net_checking_service - implements the checking of a received
				call to determine the service requested.

Usage           uchar bip_net_checking_service ();

Return value : 	bip_net_checking_service returns a service code or UNKNOWN_SERVICE.

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar bip_net_checking_service ()
{

		/* Dispatch according to the transfer capability */

	switch (Isdn_get_val_bip (conn_in, bc, trf_cap)) {

			/*---------------*/
			/*     Speech    */
			/*---------------*/

		case TRF_CAP_SPEECH :

				/* Check trf rate and mode and protocol id also */

			if (Isdn_get_val_bip (conn_in, bc, trf_mode) == TRF_MODE_CIRCUIT) {
				return (CC_SRV_VOICE);

			} else {

				return (CC_SRV_NIL);
			}

			/*---------------*/
			/* Audio 3.1 kHz */
			/*---------------*/

		case TRF_CAP_3_1_AUDIO :

			if ((Get_ie_bip (conn_in, progress_ind) == PRESENT) &&
				 (Isdn_get_val_bip (conn_in, bc, trf_mode) == TRF_MODE_CIRCUIT)) {
				return (CC_SRV_VOICE);
			}

				/* Dispatch according to layer 1 protocol */

			switch (Isdn_get_val_bip (conn_in, bc, protocol_id_1)) {

					/* u law */

				case PROTOCOL_ID_1_G711_u :
					return (CC_SRV_VOICE);

					/* Unknown : use the HLC teleservice field */

				case BYTE_VAL_NIL :

					if ((Get_ie_bip (conn_in, hlc) == PRESENT) &&
						(Isdn_get_val_bip (conn_in, hlc, teleservice) == FAX_3)) {
						return (CC_SRV_FAX);

					} else {

						return (CC_SRV_NIL);
					}

				default :
					return (CC_SRV_NIL);

			}

			/*---------------*/
			/*  Audio 7 kHz  */
			/*---------------*/

		case TRF_CAP_7_AUDIO :
			return (CC_SRV_AUDIO_7);

			/*---------------*/
			/* Unrestricted  */
			/*---------------*/

		case TRF_CAP_UNRESTRICTED :

				/* Dispatch according to layer protocol */

			switch (Isdn_get_val_bip (conn_in, bc, protocol_id_1)) {

					/* DATA FROM 56 KBS */

				case PROTOCOL_ID_1_V110:
					cc_layer_1_info.user_rate = RA_56KBS;
					cc_layer_1_info.syn_asyn  = SYN;
					return (CC_SRV_DATA_56KBS);

				default :

					if (Get_ie_bip (conn_in, llc) == PRESENT) {

							/* Search for multi-channels rates */

						switch (Isdn_get_val_bip (conn_in, llc, trf_rate)) {

							case TRF_RATE_2x64KBS :
								return (CC_SRV_DATA_128KBS);

							case TRF_RATE_384KBS :
								return (CC_SRV_DATA_H0);

							case TRF_RATE_1536KBS :
								return (CC_SRV_DATA_H11);

							case TRF_RATE_1920KBS :
								return (CC_SRV_DATA_H12);

						}

							/* Dispatch according to layer 1 protocol */

						switch (Isdn_get_val_bip (conn_in, llc, protocol_id_1)) {

								/* X25 Application */

							case PROTOCOL_ID_1_X31 :
								return (CC_SRV_X25);

								/* Rate adaptation CCITT V.110 */

							case PROTOCOL_ID_1_V110 :
								cc_layer_1_info.user_rate = Isdn_get_val_bip (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_bip (conn_in, llc, syn_asyn);

								if ((cc_layer_1_info.user_rate == RA_56KBS) &&
									(cc_layer_1_info.syn_asyn  == SYN)
								   ) {
									return (CC_SRV_DATA_56KBS);

								} else {

									cc_layer_1_info.stop_bits = Isdn_get_val_bip (conn_in, llc, stop_bit);
									cc_layer_1_info.data_bits = Isdn_get_val_bip (conn_in, llc, data_bit);
									cc_layer_1_info.parity    = Isdn_get_val_bip (conn_in, llc, parity);
									return (CC_SRV_V110);
								}

							case PROTOCOL_ID_1_V120 :
								cc_layer_1_info.user_rate = Isdn_get_val_bip (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_bip (conn_in, llc, syn_asyn);
								cc_layer_1_info.stop_bits = Isdn_get_val_bip (conn_in, llc, stop_bit);
								cc_layer_1_info.data_bits = Isdn_get_val_bip (conn_in, llc, data_bit);
								cc_layer_1_info.parity    = Isdn_get_val_bip (conn_in, llc, parity);
								return (CC_SRV_V120);

						}

					}

					return (CC_SRV_DATA);

			}

			/*---------------*/
			/*     Video     */
			/*---------------*/

		case TRF_CAP_VIDEO :
			return (CC_SRV_VIDEO);

		default :
			break;

	}

	return (CC_SRV_NIL);


}

#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar	bip_cc_load_ns_test	(p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
