
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_build.hkt
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      hkt_cc_build_to_ns - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *      hkt_net_checking_service - determines the requested service from the
 *                             received message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	uchar   hkt_build_other_pr          (code_t prim_code, uchar FAR *p_data);
    uchar   hkt_cc_load_ns_test         (code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar   hkt_build_other_pr          ();
    uchar   hkt_cc_load_ns_test         ();
#endif


/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            hkt_cc_build_to_ns - implements the sending of a test primitive
                                  to the NS entity.

Usage           uchar hkt_cc_build_to_ns (code_t primitive_code);
                            - primitive_code    = code of the primitive to send,

Return value :  hkt_cc_build_to_ns returns = OK
                                       = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar hkt_cc_build_to_ns (prim_code, p_data)
	code_t      prim_code;      /* primitive code */
	uchar  FAR *p_data;
{
    CONST struct cc_service FAR *p_cc_service;

        /* Switch according to the primitive to be sent */

    switch (prim_code) {

            /*------------------- CONNECTION REQUEST ---------------------*/

        case  NS_CONN_RQ :
			Isdn_init_hkt_ctx_rq_rs         (conn_rq,
											 p_data
                                            );

            p_cc_service = Cc_call_p_cc_service;

            if (Cc_service_hlc_teleservice != BYTE_VAL_NIL) {
                Isdn_hkt_store_hlc          (conn_rq,
                                             Cc_service_hlc_teleservice,
                                             BYTE_VAL_NIL
                                            );
            }

            if (p_rq_address != P_NIL) {

                Isdn_hkt_store_called_nb    (conn_rq,
                                             p_rq_address
                                            );

			}

				/*
					Store the Sending_complete IE if:
						- requested by the user,
						- or an address is beeing sent and CC is configured
						  in automatic sending_complete.
				*/

			if ((cc_sending_complete == ON) ||
				((p_rq_address != P_NIL) &&
				 !(Cc_na_out_calls_behaviour & CC_USER_SENDING_COMPLETE))
			   ) {
				Isdn_hkt_store_sending_complete	(conn_rq);
			}

			if (p_rq_subaddress != P_NIL) {

                Isdn_hkt_store_called_sub_add(conn_rq,
                                             SUB_ADD_OSI,
                                             SUB_ADD_ODD,
                                             p_rq_subaddress
                                            );
            }

            if (p_calling_address != P_NIL) {

				Isdn_hkt_store_calling_nb   (conn_rq,
											 cc_calling_nb_type,
											 PLAN_UNKNOWN,
											 cc_calling_nb_pres,
											 cc_calling_nb_screen,
											 p_calling_address
											);
			}

            if (p_calling_subaddress != P_NIL) {

                Isdn_hkt_store_calling_sub_add(conn_rq,
                                               SUB_ADD_OSI,
                                               BYTE_VAL_NIL,
                                               p_calling_subaddress
                                              );

            }


			Isdn_hkt_store_bc               (conn_rq,\
											 Cc_service_bc_trf_cap,\
											 Cc_service_bc_trf_rate,\
											 Cc_service_bc_structure,\
											 Cc_service_bc_protocol_id_1,\
											 Cc_service_bc_syn_asyn,\
											 Cc_service_bc_negotiation,\
											 Cc_service_bc_user_rate,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 BYTE_VAL_NIL,\
											 Cc_service_bc_protocol_id_2,\
                                             Cc_service_bc_protocol_id_3
                                            );

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_hkt_store_chan_id_BRI  (conn_rq,
												 cc_chan_excl,
												 cc_chan_id[0]
												);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_hkt_store_chan_id_PRI  (conn_rq,
												 INT_ID_IMPLICIT,
												 cc_chan_excl,
												 AS_INDICATED,
												 BYTE_VAL_NIL,
												 CHAN_NUMBER,
												 cc_chan_id
												);
#					endif

				}

			}

			break;

			/*------------------- CONNECTION RESPONSE --------------------*/

		case  NS_CONN_RS :
			Isdn_init_hkt_ctx_rq_rs         (conn_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_hkt_store_chan_id_BRI  (conn_rs,
												 cc_chan_excl,
												 cc_chan_id[0]
												);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_hkt_store_chan_id_PRI  (conn_rs,
												 INT_ID_IMPLICIT,
												 cc_chan_excl,
												 AS_INDICATED,
												 BYTE_VAL_NIL,
												 CHAN_NUMBER,
												 cc_chan_id
												);
#					endif

				}

			}

			break;

			/*---------------- CONNECTION CLEAR REQUEST ------------------*/

		case  NS_CLEAR_RQ :
			Isdn_init_hkt_ctx_rq_rs         (clear_rq,
											 p_data
											);

			Isdn_hkt_store_cause            (clear_rq,
											 LOCATION_USER,
											 cc_error_class,
											 cc_error_value,
											 A_NIL
											);

			break;

			/*---------------- CONNECTION CLEAR RESPONSE -----------------*/

		case  NS_CLEAR_RS :
			Isdn_init_hkt_ctx_rq_rs         (clear_rs,
											 p_data
											);

			break;


		default :

			if (hkt_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}


                /*----------------------------------------*/

uchar hkt_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{
	switch (prim_code) {

            /*---------------- INFO REQUEST (digits) -------------------*/

#   if ACU_INTERFACE == ON

        case  NS_INFO_RQ :
			Isdn_init_hkt_ctx_rq_rs         (info_rq,
											 p_data
                                            );

			if (cc_sending_complete != OFF) {
				Isdn_hkt_store_sending_complete (info_rq);
			}

			Isdn_hkt_store_called_nb        (info_rq,
											 p_rq_address
                                            );

            break;

#   endif

                /*---------------- ALERTING REQUEST ----------------------*/

        case  NS_ALERT_RQ :
			Isdn_init_hkt_ctx_rq_rs         (alert_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_hkt_store_chan_id_BRI  (alert_rq,
												 cc_chan_excl,
												 cc_chan_id[0]
												);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_hkt_store_chan_id_PRI  (alert_rq,
												 INT_ID_IMPLICIT,
												 cc_chan_excl,
												 AS_INDICATED,
												 BYTE_VAL_NIL,
												 CHAN_NUMBER,
												 cc_chan_id
												);
#					endif

				}

			}

			break;

				/*------------- CALL PROCEEDING REQUEEST ---------------*/

		case NS_CALL_PROC_RQ :

			Isdn_init_hkt_ctx_rq_rs         (call_proc_rq,
											 p_data
											);


			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_hkt_store_chan_id_BRI  (call_proc_rq,
												 cc_chan_excl,
												 cc_chan_id[0]
												);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_hkt_store_chan_id_PRI  (call_proc_rq,
												 INT_ID_IMPLICIT,
												 cc_chan_excl,
												 AS_INDICATED,
												 BYTE_VAL_NIL,
												 CHAN_NUMBER,
												 cc_chan_id
												);
#					endif

				}

			}

			break;

#	if CC_RESTART_PROCEDURE == ON /* { */

				/*---------------- RESTART_RQ */

		case NS_RESTART_RQ :
			Isdn_init_hkt_ctx_rq_rs         (restart_rq,
											 p_data
											);

			break;

				/*---------------- RESTART_RS */

		case NS_RESTART_RS :
			Isdn_init_hkt_ctx_rq_rs         (restart_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_hkt_store_chan_id_BRI  (restart_rs,
												 cc_chan_excl,
												 cc_chan_id[0]
												);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_hkt_store_chan_id_PRI  (restart_rs,
												 INT_ID_IMPLICIT,
												 cc_chan_excl,
												 AS_INDICATED,
												 BYTE_VAL_NIL,
												 CHAN_NUMBER,
												 cc_chan_id
												);
#					endif

				}

			}

			Isdn_hkt_store_restart_ind      (restart_rs,
											 cc_restart_indicator
											);

			cc_chan_id[0] = NIL;

			break;

#	endif /* CC_RESTART_PROCEDURE == ON } */

	/*---------------- SUSPEND REQUEST --------------------------*/

		case  NS_SUSPEND_RQ :
			Isdn_init_hkt_ctx_rq_rs			(suspend_rq,
											 p_data
											);

			Isdn_hkt_store_call_id			(suspend_rq,
											 p_call_id
											);

			break;

	/*---------------- RESUME REQUEST --------------------------*/

		case  NS_RESUME_RQ :
			Isdn_init_hkt_ctx_rq_rs			(resume_rq,
											 p_data
											);

			Isdn_hkt_store_call_id			(resume_rq,
											 p_call_id
											);

			break;

				/*---------------- UNKNOWN primitive ---------------------*/

        default :
            return (NOK);
    }

    return (OK);

}

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            hkt_net_checking_service - implements the checking of a received
                call to determine the service requested.

Usage           uchar hkt_net_checking_service ();

Return value :  hkt_net_checking_service returns a service code or UNKNOWN_SERVICE.

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar hkt_net_checking_service ()
{

        /* Dispatch according to the transfer capability */

    switch (Isdn_get_val_hkt (conn_in, bc, trf_cap)) {

			/*---------------*/
			/*     Speech    */
			/*---------------*/

		case TRF_CAP_SPEECH :

			if (Isdn_get_val_hkt (conn_in, bc, trf_rate) == TRF_RATE_64KBS) {

				if (Get_ie_hkt (conn_in, hlc) == PRESENT) {

					if (Isdn_get_val_hkt (conn_in, hlc, teleservice) == TELEPHONY) {
						return (CC_SRV_VOICE);

					} else {

						return (CC_SRV_NIL);
					}

				} else {

					return (CC_SRV_VOICE);
				}
			}

			return (CC_SRV_NIL);

			/*---------------*/
			/* Audio 3.1 kHz */
			/*---------------*/

		case TRF_CAP_3_1_AUDIO :

            if (Get_ie_hkt (conn_in, progress_ind) == PRESENT) {
				return (CC_SRV_VOICE);
            }

                /* Dispatch according to layer 1 protocol */

            switch (Isdn_get_val_hkt (conn_in, bc, protocol_id_1)) {

                    /* A law */

                case PROTOCOL_ID_1_G711_A :
					return (CC_SRV_VOICE);

                    /* Unknown : use the HLC teleservice field */

                case BYTE_VAL_NIL :

                    if (Isdn_get_val_hkt (conn_in, hlc, teleservice) == FAX_3) {
						return (CC_SRV_FAX);

					} else {

						return (CC_SRV_NIL);
                    }

                default :
					return (CC_SRV_NIL);

			}

			/*---------------*/
			/*  Audio 7 kHz  */
			/*---------------*/

		case TRF_CAP_7_AUDIO :
			return (CC_SRV_AUDIO_7);

			/*---------------*/
			/* Unrestricted  */
			/*---------------*/

		case TRF_CAP_UNRESTRICTED :

			if (Get_ie_hkt (conn_in, progress_ind) == PRESENT) {
				return (CC_SRV_DATA);
			}

				/* Search for multi-channels rates */

			switch (Isdn_get_val_hkt (conn_in, bc, trf_rate)) {

				case TRF_RATE_2x64KBS :
					return (CC_SRV_DATA_128KBS);

				case TRF_RATE_384KBS :
					return (CC_SRV_DATA_H0);

				case TRF_RATE_1536KBS :
					return (CC_SRV_DATA_H11);

				case TRF_RATE_1920KBS :
					return (CC_SRV_DATA_H12);

			}

				/* Dispatch according to layer 1 protocol */

            switch (Isdn_get_val_hkt (conn_in, bc, protocol_id_1)) {

                    /* X25 Application */

                case PROTOCOL_ID_1_X31 :
					return (CC_SRV_X25);

                    /* Non CCITT rate adaptation */

                case PROTOCOL_ID_1_RA_NON_CCITT :
					return (CC_SRV_DATA);

					/* Rate adaptation CCITT V.110 */

				case PROTOCOL_ID_1_V110 :
					cc_layer_1_info.user_rate = Isdn_get_val_hkt (conn_in, bc, user_rate);
					cc_layer_1_info.syn_asyn  = Isdn_get_val_hkt (conn_in, bc, syn_asyn);

					if ((cc_layer_1_info.user_rate == RA_56KBS) &&
						(cc_layer_1_info.syn_asyn  == SYN)
					   ) {
						return (CC_SRV_DATA_56KBS);

					} else {

						cc_layer_1_info.stop_bits = Isdn_get_val_hkt (conn_in, bc, stop_bit);
						cc_layer_1_info.data_bits = Isdn_get_val_hkt (conn_in, bc, data_bit);
						cc_layer_1_info.parity    = Isdn_get_val_hkt (conn_in, bc, parity);
						return (CC_SRV_V110);
					}

					case PROTOCOL_ID_1_V120 :
						cc_layer_1_info.user_rate = Isdn_get_val_hkt (conn_in, bc, user_rate);
						cc_layer_1_info.syn_asyn  = Isdn_get_val_hkt (conn_in, bc, syn_asyn);
						cc_layer_1_info.stop_bits = Isdn_get_val_hkt (conn_in, bc, stop_bit);
						cc_layer_1_info.data_bits = Isdn_get_val_hkt (conn_in, bc, data_bit);
						cc_layer_1_info.parity    = Isdn_get_val_hkt (conn_in, bc, parity);
						return (CC_SRV_V120);

					/* None : use the LLC IE */

				case BYTE_VAL_NIL :

					if (Get_ie_hkt (conn_in, llc) == PRESENT) {

							/* Dispatch according to layer 1 protocol */

						switch (Isdn_get_val_hkt (conn_in, llc, protocol_id_1)) {

								/* X25 Application */

							case PROTOCOL_ID_1_X31 :
								return (CC_SRV_X25);

								/* Rate adaptation CCITT V.110 */

							case PROTOCOL_ID_1_V110 :
								cc_layer_1_info.user_rate = Isdn_get_val_hkt (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_hkt (conn_in, llc, syn_asyn);

								if ((cc_layer_1_info.user_rate == RA_56KBS) &&
									(cc_layer_1_info.syn_asyn  == SYN)
								   ) {
									return (CC_SRV_DATA_56KBS);

								} else {

									cc_layer_1_info.stop_bits = Isdn_get_val_hkt (conn_in, llc, stop_bit);
									cc_layer_1_info.data_bits = Isdn_get_val_hkt (conn_in, llc, data_bit);
									cc_layer_1_info.parity    = Isdn_get_val_hkt (conn_in, llc, parity);
									return (CC_SRV_V110);
								}

							case PROTOCOL_ID_1_V120 :
								cc_layer_1_info.user_rate = Isdn_get_val_hkt (conn_in, llc, user_rate);
								cc_layer_1_info.syn_asyn  = Isdn_get_val_hkt (conn_in, llc, syn_asyn);
								cc_layer_1_info.stop_bits = Isdn_get_val_hkt (conn_in, llc, stop_bit);
								cc_layer_1_info.data_bits = Isdn_get_val_hkt (conn_in, llc, data_bit);
								cc_layer_1_info.parity    = Isdn_get_val_hkt (conn_in, llc, parity);
								return (CC_SRV_V120);

						}

					}
					break;

			}

			switch (Isdn_get_val_hkt (conn_in, hlc, teleservice)) {

				case FAX_4 :
					return (CC_SRV_FAX_4);

			}

			return (CC_SRV_DATA);

			/*---------------*/
			/*     Video     */
			/*---------------*/

		case TRF_CAP_VIDEO :
			return (CC_SRV_VIDEO);

		default :
            break;

    }

	return (CC_SRV_NIL);

}

#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar   hkt_cc_load_ns_test (p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
