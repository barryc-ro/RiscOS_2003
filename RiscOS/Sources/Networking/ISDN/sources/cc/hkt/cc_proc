/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_proc.hkt
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      hkt_cc_get_chan_id - implements the extraction of the channel
 *          ID given by the network.
 *
 *      hkt_cc_test_address_match - tests if received address/sub-address
 *              matches one of the registered NA addresses.
 *
 *      hkt_p_start_val_ns (pr, ie) - pointer to the val_ns start for 'ie' IE.
 *
 *      hkt_get_ie (pr, ie) - return PRESENT/ABSENT
 *
 *      hkt_isdn_p_str (pr, ie) - return pointer to the string field
 *          of 'ie' IE of 'pr' Primitive
 *
 *      hkt_isdn_lgth_str (pr, ie) - return length of the string field
 *          of 'ie' IE of 'pr' Primitive
 *
 *      hkt_isdn_get_val (pr, ie, field) - return value of the 'field'
 *      field of 'ie' IE of 'pr' Primitive
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            hkt_p_start_val_ns -

Usage           uchar hkt_p_start_val_ns (pr, ie);

Return value    : pointer to the val_ns start for 'ie' IE.

*--------------------------------------------------------------------------*/

uchar FAR *hkt_p_start_val_ns (pr, ie)
    uchar pr;
    uchar ie;
{
    if (ie == IE_CHAN_ID) {

        switch (pr) {

            case NS_CONN_IN :
                return ((uchar FAR *)P_start_val_ns_hkt (conn_in, chan_id));

            case NS_CONN_CO :
                return ((uchar FAR *)P_start_val_ns_hkt (conn_co, chan_id));

            case NS_SETUP_ACK_IN :
                return ((uchar FAR *)P_start_val_ns_hkt (setup_ack_in, chan_id));

            case NS_CALL_PROC_IN :
                return ((uchar FAR *)P_start_val_ns_hkt (call_proc_in, chan_id));

			case NS_ALERT_IN :
				return ((uchar FAR *)P_start_val_ns_hkt (alert_in, chan_id));

			case NS_RESTART_IN :
                return ((uchar FAR *)P_start_val_ns_hkt (restart_in, chan_id));

			case NS_RESUME_CO :
				return ((uchar FAR *)P_start_val_ns_hkt (resume_co, chan_id));
		}

    }

    return (P_NIL);
}

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            hkt_get_ie -

Usage           uchar hkt_get_ie (pr, ie);

Return value    : PRESENT/ABSENT

*--------------------------------------------------------------------------*/


uchar hkt_get_ie (pr, ie)
	uchar pr;
	uchar ie;
{

	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_hkt (conn_in, chan_id));

				case IE_UUI :
					return (Get_ie_hkt (conn_in, uui));

				case IE_CALLING_NB :
					return (Get_ie_hkt (conn_in, calling_nb));

				case IE_CALLING_SUB_ADD :
					return (Get_ie_hkt (conn_in, calling_sub_add));

				case IE_CALLED_NB :
					return (Get_ie_hkt (conn_in, called_nb));

				case IE_CALLED_SUB_ADD :
					return (Get_ie_hkt (conn_in, called_sub_add));

				case IE_SENDING_COMPLETE :
					return (Get_ie_hkt (conn_in, sending_complete));
			}

			break;

		case NS_CONN_CO :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_hkt (conn_co, chan_id));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_hkt (conn_co, display));
#			  endif

				case IE_UUI :
					return (Get_ie_hkt (conn_co, uui));
			}

			break;

		case NS_INFO_IN :

			switch (ie) {

				case IE_SENDING_COMPLETE :
					return (Get_ie_hkt (info_in, sending_complete));

#			  if CC_PAR_DISPLAY_IE == ON
				case IE_DISPLAY :
					return (Get_ie_hkt (info_in, display));
#			  endif

			}

			break;

		case NS_CLEAR_IN :

			if (ie == IE_UUI) 		return (Get_ie_hkt (clear_in, uui));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Get_ie_hkt (clear_in, display));
#		  endif
#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_hkt (clear_in, progress_ind));
#		  endif

			break;

		case NS_CLEAR_CO :

			switch (ie) {

				case IE_CAUSE :
					return (Get_ie_hkt (clear_co, cause));
			}

			break;

		case NS_SETUP_ACK_IN :
			if (ie == IE_CHAN_ID)   return (Get_ie_hkt (setup_ack_in, chan_id));
			break;

		case NS_CALL_PROC_IN :
			if (ie == IE_CHAN_ID)   return (Get_ie_hkt (call_proc_in, chan_id));
			break;

		case NS_ALERT_IN :
			if (ie == IE_CHAN_ID)   return (Get_ie_hkt (alert_in, chan_id));
			break;

		case NS_SUSPEND_CO :
			if (ie == IE_CAUSE)		return (Get_ie_hkt (suspend_co, cause));
			break;

		case NS_RESUME_CO :

			switch (ie) {

				case IE_CHAN_ID :
					return (Get_ie_hkt (resume_co, chan_id));

				case IE_CAUSE :
					return (Get_ie_hkt (resume_co, cause));

			}
			break;

		case NS_RESTART_IN:
			if (ie == IE_CHAN_ID)   return (Get_ie_hkt (restart_in, chan_id));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)	return (Get_ie_hkt (restart_in, display));
#		  endif
			break;

		case NS_PROGRESS_IN :
			if (ie == IE_CAUSE)			return (Get_ie_hkt (progress_in, cause));
#		  if CC_PAR_PROGRESS_IND_IE == ON
			if (ie == IE_PROGRESS_IND)	return (Get_ie_hkt (progress_in, progress_ind));
#		  endif
			break;

	}

	return (ABSENT);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            hkt_isdn_p_str -

Usage           uchar hkt_isdn_p_str (pr, ie);

Return value    : pointer to the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar FAR *hkt_isdn_p_str (pr, ie)
	uchar   pr;
	uchar   ie;
{
	switch (pr) {

		case NS_CONN_IN :

			switch (ie) {

				case IE_UUI:
					return (Isdn_p_str_hkt (conn_in, uui, text));
				case IE_CALLING_NB:
					return (Isdn_p_str_hkt (conn_in, calling_nb, nb));
				case IE_CALLING_SUB_ADD:
					return (Isdn_p_str_hkt (conn_in, calling_sub_add, sub_add));
				case IE_CALLED_NB :
					return (Isdn_p_str_hkt (conn_in, called_nb, nb));
			}

			break;

		case NS_CONN_CO :
			if (ie == IE_UUI    )   return (Isdn_p_str_hkt (conn_co, uui, text));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)   return (Isdn_p_str_hkt (conn_co, display, text));
#		  endif
			break;

		case NS_CLEAR_IN :
			if (ie == IE_UUI)       return (Isdn_p_str_hkt (clear_in, uui, text));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)   return (Isdn_p_str_hkt (clear_in, display, text));
#		  endif
			break;

		case NS_INFO_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)   return (Isdn_p_str_hkt (info_in, display, text));
#		  endif
			break;

		case NS_RESTART_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)   return (Isdn_p_str_hkt (restart_in, display, text));
#		  endif
			break;

	}

    return (P_NIL);
}

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            hkt_isdn_lgth_str -

Usage           uchar hkt_isdn_lgth_str (pr, ie);

Return value    : length of the string field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar hkt_isdn_lgth_str (pr, ie)
    uchar   pr;
    uchar   ie;
{
    switch (pr) {

        case NS_CONN_IN :

            switch (ie) {

                case IE_UUI:
                    return (Isdn_lgth_str_hkt (conn_in, uui, text));
                case IE_CALLING_NB:
                    return (Isdn_lgth_str_hkt (conn_in, calling_nb, nb));
                case IE_CALLING_SUB_ADD:
                    return (Isdn_lgth_str_hkt (conn_in, calling_sub_add, sub_add));
                case IE_CALLED_NB :
                    return (Isdn_lgth_str_hkt (conn_in, called_nb, nb));
                case IE_CALLED_SUB_ADD :
                    return (Isdn_lgth_str_hkt (conn_in, called_sub_add, sub_add));
            }

            break;

        case NS_CONN_CO :
            if (ie == IE_UUI)       return (Isdn_lgth_str_hkt (conn_co, uui, text));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)   return (Isdn_lgth_str_hkt (conn_co, display, text));
#		  endif
			break;

		case NS_CLEAR_IN :
			if (ie == IE_UUI)       return (Isdn_lgth_str_hkt (clear_in, uui, text));
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)   return (Isdn_lgth_str_hkt (clear_in, display, text));
#		  endif
			break;

		case NS_INFO_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)   return (Isdn_lgth_str_hkt (info_in, display, text));
#		  endif
			break;

		case NS_RESTART_IN :
#		  if CC_PAR_DISPLAY_IE == ON
			if (ie == IE_DISPLAY)   return (Isdn_lgth_str_hkt (restart_in, display, text));
#		  endif
			break;
	}

    return (NIL);
}

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            hkt_isdn_get_val -

Usage           uchar hkt_isdn_get_val (pr, ie, field);

Return value    : value of the 'field' field of 'ie' IE of 'pr' Primitive

*--------------------------------------------------------------------------*/

uchar hkt_isdn_get_val (pr, ie, field)
    uchar pr;
    uchar ie;
    uchar field;
{
    switch (ie) {

        case IE_CAUSE :

            switch (pr) {

                case NS_CLEAR_IN :

                    switch (field) {

                        case FLD_CAUSE_VAL :
                            return (Isdn_get_val_hkt (clear_in,cause,cause_val));

                        case FLD_CAUSE_CLASS :
							return (Isdn_get_val_hkt (clear_in,cause,cause_class));
					}

					break;

				case NS_CLEAR_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_hkt (clear_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_hkt (clear_co,cause,cause_class));
					}

					break;

				case NS_SUSPEND_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_hkt (suspend_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_hkt (suspend_co,cause,cause_class));
					}

					break;

				case NS_RESUME_CO :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_hkt (resume_co,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_hkt (resume_co,cause,cause_class));
					}

					break;

				case NS_PROGRESS_IN :

					switch (field) {

						case FLD_CAUSE_VAL :
							return (Isdn_get_val_hkt (progress_in,cause,cause_val));

						case FLD_CAUSE_CLASS :
							return (Isdn_get_val_hkt (progress_in,cause,cause_class));
					}

					break;
			}

			break;

		case IE_CALLING_NB:

			switch (pr) {

				case NS_CONN_IN :

					switch (field) {

						case FLD_NB_PRES:
							return (Isdn_get_val_hkt (conn_in, calling_nb, pres));

						case FLD_NB_TYPE:
							return (Isdn_get_val_hkt (conn_in, calling_nb, nb_type));

						case FLD_NB_SCREEN:
							return (Isdn_get_val_hkt (conn_in, calling_nb, screen_ind));

					}
					break;

			}
			break;

		case IE_RESTART_IND :

			if ((pr == NS_RESTART_IN) && (field == FLD_RESTART_CLASS)) {
				return (Isdn_get_val_hkt (restart_in, restart_ind, restart_class));
			}

			break;

#	if CC_PAR_PROGRESS_IND_IE == ON
		case IE_PROGRESS_IND :

			switch (pr) {

				case NS_PROGRESS_IN :
                    cc_progress_ind.nb = 0;
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (hkt_get_ie (NS_PROGRESS_IN,IE_PROGRESS_IND) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_hkt (progress_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_hkt (progress_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_hkt (progress_in, progress_ind);
                    	cc_progress_ind.nb++;
                    }

					break;

				case NS_CLEAR_IN :
                    cc_progress_ind.nb = 0;
					while ((cc_progress_ind.nb < ACU_MX_PROGRESS_IND) && (hkt_get_ie (NS_CLEAR_IN,IE_PROGRESS_IND) == PRESENT)) {
						cc_progress_ind.t[cc_progress_ind.nb].loc   = Isdn_get_val_hkt (clear_in, progress_ind, progress_loc);
						cc_progress_ind.t[cc_progress_ind.nb].descr = Isdn_get_val_hkt (clear_in, progress_ind, progress_descr);
						Set_to_next_ie_instance_hkt (clear_in, progress_ind);
                    	cc_progress_ind.nb++;
                    }

					break;

			}

			break;
#	endif

	}

    return (BYTE_VAL_NIL);
}

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            hkt_cc_get_chan_id - implements the estraction of the channel
                ID given by the network.

Usage           uchar hkt_cc_get_chan_id ();

Return value    : chan_id or NO_CHAN

*--------------------------------------------------------------------------*/

#define Hkt_nb_map                      ((P_val_ns_hkt(chan_id))p_start_val_ns) -> nb_map
#define Hkt_map_lgth                    ((((uchar FAR *)p_start_val_ns + Offsetof (val_ns_hkt_chan_id, chan_nb))[0]) - 1)
#define Hkt_int_type                    ((P_val_ns_hkt(chan_id))p_start_val_ns) -> int_type
#define Hkt_bri_selected_channel        ((P_val_ns_hkt(chan_id))p_start_val_ns) -> chan_sel
#define	Hkt_channel_pref_excl			((P_val_ns_hkt(chan_id))p_start_val_ns) -> pref_excl
#define Hkt_pri_selected_channel(xx)    ((uchar FAR *)p_start_val_ns + Offsetof (val_ns_hkt_chan_id, chan_nb))[xx]

uchar hkt_cc_get_chan_id (pr, ie)
    uchar pr;
    uchar ie;
{

    uchar FAR *p_start_val_ns;
    uchar       chan_nb, i;

    p_start_val_ns = hkt_p_start_val_ns (pr, ie);

		/*
            If 'chan_sel' is NO_CHAN, return NO_CHAN.

            If 'int_type' field is INT_TYPE_BRI,
                return 'chan_sel' field,    (<=> Basic Rate access)

            If Chan_nb
				return 'chan_nb[1]' field.  (<=> Primary Rate access)

            If Map
                return (lowest value indicated)
        */

	if ((p_start_val_ns == P_NIL) || (Hkt_bri_selected_channel == NO_CHAN)) {
		return (OK);
	}

    	/* read the fields 'Channel selection' and 'Preferred/Exclusive' */

	cc_chan_excl  = Hkt_channel_pref_excl;
	cc_chan_sel = Hkt_bri_selected_channel;

	if (Hkt_int_type == INT_TYPE_BRI) {

			/* Basic rate : chan_id is in 'chan_sel' field */
			/*      Should never happen */

		cc_chan_nb    = 1;
		cc_chan_id[0] = Hkt_bri_selected_channel;
		return (OK);
	}


	if (Hkt_nb_map == CHAN_NUMBER) {

			/*
			 * Primary rate with channel number.
			 * We select the first one.
			 */

		cc_chan_nb    = 1;
		cc_chan_id[0] = Hkt_pri_selected_channel (1);

	} else {

		/*
		 * Channel selection is done with the following mapping :
		 *
		 *                              Bits
		 *
		 *      7       6       5       4       3       2       1       0
		 *   ---------------------------------------------------------------
		 *  |   24  |   23  |   22  |   21  |   20  |   19  |   18  |   17  |
		 *   ---------------------------------------------------------------
		 *  |   16  |   15  |   14  |   13  |   12  |   11  |   10  |   9   |
		 *   ---------------------------------------------------------------
		 *  |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |
		 *   ---------------------------------------------------------------
		 *                              1544 kbits/s
		 *
		 *  Primary rate interface of 2048 kbits/s
		 *  and H0-Channel H1-Channel are not supported.
		 *
		 *  We select the smallest value.
		 */


		cc_chan_nb = 1;
		chan_nb = Hkt_pri_selected_channel (Hkt_map_lgth);


		/*
		 * Find first bit from the lowest one which is not null.
		 * (i+1) will tell the bit position in a 1-8 range.
		 */

		i = 0;
		while ((Get_bits (chan_nb, i, 1) != 1) || (i < 8)) {
			i++;
		}

		if (i == 8) {

				/* No channel was selected. (should never happen...) */

			chan_nb = NO_CHAN;

		} else {

			chan_nb = (i+1) + (8 * (HKT_MX_SZ_MAP - Hkt_map_lgth));
		}

		cc_chan_id[0] = chan_nb;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            hkt_get_remaining_ie_instance -

Usage           uchar hkt_get_remaining_ie_instance (pr, ie);

Return value	: nb of remaining IE instance.

*--------------------------------------------------------------------------*/

uchar hkt_get_remaining_ie_instance (pr, ie)
	uchar pr;
	uchar ie;
{
	uchar instance_nb = 0;

	switch (ie) {

#	  if CC_PAR_DISPLAY_IE == ON
		case IE_DISPLAY :
			if (pr == NS_CONN_CO)		{Get_remaining_ie_instance_nb_hkt (conn_co, display, &instance_nb);     	break;}
			if (pr == NS_CLEAR_IN)		{Get_remaining_ie_instance_nb_hkt (clear_in, display, &instance_nb);    	break;}
			if (pr == NS_INFO_IN) 		{Get_remaining_ie_instance_nb_hkt (info_in, display, &instance_nb);     	break;}
			if (pr == NS_RESTART_IN)	{Get_remaining_ie_instance_nb_hkt (restart_in, display, &instance_nb); 		break;}
			break;
#	  endif

		default:
			break;
	}

	return (instance_nb);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            hkt_set_to_next_ie_instance -

Usage           uchar hkt_set_to_next_ie_instance (pr, ie);

Return value	: set to the next IE's instance.

*--------------------------------------------------------------------------*/

uchar hkt_set_to_next_ie_instance(pr, ie)
	uchar pr;
	uchar ie;
{

	switch (ie) {

#	  if CC_PAR_DISPLAY_IE == ON
		case IE_DISPLAY :
			if (pr == NS_CONN_CO)		{Set_to_next_ie_instance_hkt (conn_co, display);	break;}
			if (pr == NS_CLEAR_IN)		{Set_to_next_ie_instance_hkt (clear_in, display);	break;}
			if (pr == NS_INFO_IN) 		{Set_to_next_ie_instance_hkt (info_in, display);	break;}
			if (pr == NS_RESTART_IN)	{Set_to_next_ie_instance_hkt (restart_in, display);	break;}
			break;
#	  endif

#	  if CC_PAR_MULTIPLE_CALLING_NB == ON
		case IE_CALLING_NB :
			if (pr == NS_CONN_IN)		{Set_to_next_ie_instance_hkt (conn_in, calling_nb);	break;}
			break;
#	  endif

		default:
			break;
	}

	return (NIL);

}
/*EOF*/
