
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - cc_build.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		tr6_cc_build_to_ns - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *		tr6_net_checking_service - determines the requested service from the
 *							   received message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Call Control (CC) Entity                         |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	uchar	tr6_build_other_pr			(code_t prim_code, uchar FAR *p_data);
	uchar	tr6_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
#else
	uchar	tr6_build_other_pr			();
	uchar	tr6_cc_load_ns_test			();
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			tr6_cc_build_to_ns - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar tr6_cc_build_to_ns (code_t primitive_code);
							- primitive_code 	= code of the primitive to send,

Return value : 	tr6_cc_build_to_ns returns = OK
									   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar tr6_cc_build_to_ns (prim_code, p_data)
	code_t		prim_code;		/* primitive code */
	uchar  FAR *p_data;
{
	CONST struct cc_service FAR	*p_cc_service;

		/* Switch according to the primitive to send */

	switch (prim_code) {

	/*---------------- CONNECTION REQUEST -------------------*/

		case  NS_CONN_RQ :
			p_cc_service = Cc_call_p_cc_service;

			Isdn_init_tr6_ctx_rq_rs			(conn_rq,
											 p_data
											);


			if (p_rq_address != P_NIL) {

				Isdn_tr6_store_called_nb	(conn_rq,
											 cc_called_nb_type,
											 cc_called_nb_plan,
											 p_rq_address
											);
			}

			if (p_calling_address != P_NIL) {

				Isdn_tr6_store_calling_nb	(conn_rq,
											 cc_calling_nb_type,
											 PLAN_UNKNOWN,
											 p_calling_address
											);

			}

			if (Cc_service_id != CC_SERVICE_DATA_56KBS) {

				Isdn_tr6_store_service_ind	(conn_rq,
											 Cc_service_service_ind_service,
											 Cc_service_service_ind_add_info
											);

			} else {

				Isdn_tr6_store_service_ind_64_SYN(conn_rq,
												  ADD_PROTOCOL_ID_1_V110_X30,
												  ADD_56000);
			}

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_tr6_store_chan_id_BRI	(conn_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_tr6_store_chan_id_PRI	(conn_rq,
													 cc_chan_excl,
													 AS_INDICATED,
													 cc_chan_id[0]
													);
#					endif

				}

			}

#			if ACU_PAR_EXT_CUG == ON

				if (p_cc_ext_cug != P_NIL) {

					uchar FAR *p_ext_data;
					uchar cug_index_MSB;
					uchar cug_index_LSB;

					p_ext_data = p_cc_ext_cug;

					cug_index_MSB = (uchar) (Acu_ext_cug(index)/10 + '0');
					cug_index_LSB = (uchar) (Acu_ext_cug(index)%10 + '0');

					Isdn_tr6_store_spf_fac_CUG	(conn_rq,
												 Cc_service_service_ind_service,
												 cug_index_MSB,
												 cug_index_LSB);
				}

#			endif

			break;

	/*---------------- CONNECTION RESPONSE  */

		case  NS_CONN_RS :
			Isdn_init_tr6_ctx_rq_rs 		(conn_rs,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_tr6_store_chan_id_BRI	(conn_rs,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_tr6_store_chan_id_PRI	(conn_rs,
													 cc_chan_excl,
													 AS_INDICATED,
													 cc_chan_id[0]
													);
#					endif

				}

			}

			if (Cc_na_function == FG_NT_TE) {
				Isdn_tr6_store_date				(conn_rs,
												"00.00.00-00:00"
												);
			}

			break;

	/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_tr6_ctx_rq_rs			(clear_rq,
											 p_data
											);

			Isdn_tr6_store_cause			(clear_rq,
											 cc_error_class,
											 cc_error_value,
											 LOCATION_NOT_MEANINGFUL
											);

			break;

	/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_tr6_ctx_rq_rs			(clear_rs,
											 p_data
											);

			break;

		default :

			if (tr6_build_other_pr (prim_code, p_data) == NOK) {
				return (NOK);
			}
	 }

		/*
			Load the communication message :
				- primitive code,
				- NA ID SAP,
				- ID CONN ID
		*/

	Store_message (prim_code, cc_current_nai, NS_SAPI_SIG, cc_current_conn_id, p_buffer);

		/*
			Load the buffer header :
				- data size
		*/

	Buffer_data_size = (ushort)(Get_p_val - p_data);

		/* Return OK : message ready to be sent */

	return (OK);
}

				/*----------------------------------------*/

uchar tr6_build_other_pr (prim_code, p_data)
	code_t prim_code;
	uchar  FAR *p_data;
{
	switch (prim_code) {

	/*---------------- INFO REQUEST (digits) -------------------*/

#	if ACU_INTERFACE == ON

		case  NS_INFO_RQ :
			Isdn_init_tr6_ctx_rq_rs			(info_rq,
											 p_data
											);

			if (p_rq_address != P_NIL) {

				Isdn_tr6_store_called_nb	(info_rq,
											 BLOC_SENDING,
											 PLAN_UNKNOWN,
											 p_rq_address
											);
			}

			break;

#	endif

	/*---------------- ALERTING REQUEST --------------------------*/

		case  NS_ALERT_RQ :
			Isdn_init_tr6_ctx_rq_rs			(alert_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_tr6_store_chan_id_BRI	(alert_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_tr6_store_chan_id_PRI	(alert_rq,
													 cc_chan_excl,
													 AS_INDICATED,
													 cc_chan_id[0]
													);
#					endif

				}

			}

			if (Cc_na_function == FG_NT_TE) {
				Isdn_tr6_store_called_status	(alert_rq,
												 NO_ACTION
												);
			}

			break;

	/*---------------- CALL PROCEEDING REQUEST --------------------------*/

		case  NS_CALL_PROC_RQ :
			Isdn_init_tr6_ctx_rq_rs			(call_proc_rq,
											 p_data
											);

			if (cc_store_chan_id == ON) {

				if (Cc_na_type == BRI) {

#					if CC_TYPE_BRI == ON

						Isdn_tr6_store_chan_id_BRI	(call_proc_rq,
													 cc_chan_excl,
													 cc_chan_id[0]
													);
#					endif

				} else {

#					if CC_TYPE_PRI == ON

						Isdn_tr6_store_chan_id_PRI	(call_proc_rq,
													 cc_chan_excl,
													 AS_INDICATED,
													 cc_chan_id[0]
													);
#					endif

				}

			}

			if (Cc_na_function == FG_NT_TE) {
				Isdn_tr6_store_display			(call_proc_rq,
												 ""
												);
			}

			break;

	/*---------------- USER INFORMATION --------------------------*/

		case NS_USER_INFO_RQ :
			Isdn_init_tr6_ctx_rq_rs			(user_info_rq,
											 p_data
											);

			if (p_cc_uui != P_NIL) {
				Isdn_tr6_store_uui			(user_info_rq,
											 p_cc_uui
											);
			}

			break;


				/*---------------- UNKNOWN primitive ---------------------*/

		default :
			return (NOK);
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			tr6_net_checking_service - implements the checking of a received
				call to determine the service requested.

Usage           uchar tr6_net_checking_service ();

Return value : 	service code or CC_SRV_NIL.

Common constants and declarations : ns_mac.h, isdn.h

Common objects : Isdn_ctx

*--------------------------------------------------------------------------*/

uchar tr6_net_checking_service ()
{
	switch (Isdn_get_val_tr6 (conn_in, service_ind, service)) {

		case SERVICE_IND_FERNSPRECHEN :
			return (CC_SRV_VOICE);

		case SERVICE_IND_DATA_TRANSFER :

			if ((Isdn_get_val_tr6 (conn_in, service_ind, user_rate) == ADD_56000) &&
				(Isdn_get_val_tr6 (conn_in, service_ind, protocol_id_1) == ADD_PROTOCOL_ID_1_V110_X30)) {

				return (CC_SRV_DATA_56KBS);

			}

			return (CC_SRV_DATA);

		case SERVICE_IND_X25 :
			return (CC_SRV_X25);

		case SERVICE_IND_A_B :

			switch (Isdn_get_val_tr6 (conn_in, service_ind, add_info)) {

				case ADD_INFO_FAX_3 :
					return (CC_SRV_FAX);

				case ADD_INFO_MODEM_DATEN :
					return (CC_SRV_MODEM);
			}

		case SERVICE_IND_BILDTELEFON :

			switch (Isdn_get_val_tr6 (conn_in, service_ind, add_info)) {

				case ADD_INFO_BILD :
					return (CC_SRV_VIDEO);

			}

			break;

		default :
			break;

	}

	return (CC_SRV_NIL);

}

#if SIMULATION == ON

/*-------------------------------------------------------------------------*/

uchar	tr6_cc_load_ns_test	(p1, p2, p3, p4)
	code_t p1; nai_t p2; sapi_t p3; conn_id_t p4;
{
	return (OK);
}

/*-------------------------------------------------------------------------*/
#endif

/*EOF*/
