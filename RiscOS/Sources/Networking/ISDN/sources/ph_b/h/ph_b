
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ph_b.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the common declarations of the SIEMENS HSCX PH functions.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Siemens HSCX for B-channels Driver               |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"   /* OMNITEL-BRICKS services header */
#include "ph_b_int.h"   /* PH upper interface */
#include "dl_int.h"     /* DL upper interface */
#include "it.h"         /* interrupt routines communication interface */

 /* access to peripheral devices (in IO space):
	===========================================

    - in IO             (e.g. 8088 ÊP):
      the devices are accessed via special IO commands
      (in ASM : 'inp' and 'outp'). From C source level the
      library functions inp () and outp () are used:

         INPUT:   byte_value = inp ([port address]);

         OUTPUT:  outp([port address], byte_value);


   - memory mapped IO   (e.g. 80188 ÊC or ÊC without IO port)

	 the devices are (virtually) in the memory space and can be
	 accessed via pointers. The inp () and outp () functions are
	 substituted by the follwing macros.

			#define  inp(port) *port
			#define  outp(port,byte_val) *port=byte_val

	=============================================================          */

#if PH_MEMORY_MAPPED_IO == ON
									   /* memory mapped IO                 */
	typedef char FAR *IO_PORT;         /* pointer to IO devices possible   */
									   /* the type IO_PORT is defined as   */
									   /* far pointer to a BYTE            */
									   /* ==============================   */

#	define  Rd_hscx(p_port)                 *p_port
#	define  Wr_hscx(p_port,byte_val)        *p_port=byte_val

#   if PH_B_FIFO_MOVE == ON

#		if (CPU == MOTOROLA_1) || (CPU == MOTOROLA_2)
#			define  String_in(p_to,p_from,cnt)  string_in_mem  (p_to,   (IO_PORT)p_from, cnt)
#			define  String_out(p_from,p_to,cnt) string_out_mem (p_from, (IO_PORT)p_to,   cnt)
#		else
#			define  String_in(p_to,p_from,cnt)  Memcpy_far  (p_to, (IO_PORT)p_from, cnt)
#			define  String_out(p_from,p_to,cnt) Memcpy_far  (p_to, (IO_PORT)p_from, cnt)
#		endif

#	else

#		define  String_in(p_to,p_from,cnt)  {  			\
			register char 	FAR *p_current = p_to;  	\
			register char 	FAR *p_fifo    = p_from;  	\
			register ushort 	 remainder = cnt;		\
			while (remainder--) {               		\
				*p_current++ = *p_fifo;         		\
			}                                   		\
}

#		define  String_out(p_from,p_to,cnt) {       	\
			register char 	FAR *p_current = p_from;	\
			register char 	FAR *p_fifo    = p_to; 		\
			register ushort remainder      = cnt;   	\
			while (remainder--) {              	 		\
				*p_fifo = *p_current++;           		\
			}                                   		\
}

#   endif

#else
									   /* 'normal' IO via the reserved     */
									   /* instructions IN/OUT coded in     */
									   /* ASM                              */

	typedef ushort  IO_PORT;           /* the type IO_PORT is defined as   */
									   /* 'unsigned short' (= 2 bytes) to  */
									   /* cover the 64k range of the IO    */
									   /* space                            */

									   /* devices in the IO space are      */
									   /* programmed using the MSC library */
									   /* functions inp() and outp()       */

#if C_COMPILER == TC
#   include <dos.h>
#endif

#if C_COMPILER == MSC
#   include <dos.h>
#   include <conio.h>
#endif

#   define  Rd_hscx(a_port)              	inp  ((int)a_port)
#   define  Wr_hscx(a_port,byte_val)     	outp ((int)a_port, byte_val)

#   if PH_B_FIFO_MOVE == ON
#       define  String_in(p_to,port,cnt)    string_in_io  (p_to,   (IO_PORT)port, cnt)
#       define  String_out(p_from,port,cnt) string_out_io (p_from, (IO_PORT)port, cnt)

#   else

#       define  String_in(p_to,port,cnt)    {			\
			register char 	FAR *p_current = p_to;		\
			register int		 fifo      = (int)port;	\
			register ushort 	 remainder = cnt;		\
			while (remainder--) {                	   	\
				*p_current++ = inp ((int)fifo);  	  	\
			}                                    	    \
}

#       define  String_out(p_from,port,cnt) {          	\
			register char FAR *p_current = p_from;  	\
			register int		 fifo    = (int)port;	\
			register ushort    remainder = cnt;     	\
			while (remainder--) {                   	\
				outp ((int)fifo, *p_current++);     	\
			}                                       	\
}

#   endif

#endif

#include "def.h"
#include "basic.h"

/*-------------------------------------------------------------------------*/

						/* HSCX CONSTANTS */

#define Chani_to_x(chani)       (chani-1)
#define X_to_chani(i)           (i+ 1)

				/* Interrupt event ID */

#define EV_TX_DONE              'a'             /* Transmit done */
#define EV_RX_DONE              'b'             /* receive done */
#define EV_TX_ERR               'c'             /* erroneous transmission */
#define EV_RX_ERR               'd'             /* erroneous reception */
#define EV_TX_RETRY             'e'             /* erroneous transmission --> retry possible */
#define EV_TX_TO                'f'             /* watch dog timer expiration */
#define EV_TX_RESET             'g'             /* transmit reset */

				/* FIFO size */

#define RFIFO_SIZE              PH_B_FIFO_SIZE  /* Receive FIFO size */
#define XFIFO_SIZE              PH_B_FIFO_SIZE  /* Transmit FIFO size */

				/* Direction constants */

#define PH_B_RX					'R'
#define PH_B_TX					'T'

/*-------------------------------------------------------------------------*/

						/* PH GENERAL COMMON VARIABLES */

#if SIMULATION == OFF

#   if ENTITY ==  ENT_PH_B

#       define  event_id        event_id_ph_b       /* event identifier */
#       define  ret_code        ret_code_ph_b       /* return code */
#       define  p_snd_msg       p_snd_msg_ph_b      /* pointer on the current message to send if any */
#       define  p_rcv_msg       p_rcv_msg_ph_b      /* pointer on the current received message if any */
#       define  p_buffer        p_buffer_ph_b       /* pointer on the curent buffer if any */
#       define  p_buffer_end    p_buffer_end_ph_b   /* pointers on the end of the current buffer if any */
#       define  os_err          os_err_ph_b         /* OS error code */
#   endif

#   if ENTITY == ENT_MPH_B

#       define  event_id        event_id_mph_b      /* event identifier */
#       define  ret_code        ret_code_mph_b      /* return code */
#       define  p_snd_msg       p_snd_msg_mph_b     /* pointer on the current message to send if any */
#       define  p_rcv_msg       p_rcv_msg_mph_b     /* pointer on the current received message if any */
#       define  p_buffer        p_buffer_mph_b      /* pointer on the curent buffer if any */
#       define  p_buffer_end    p_buffer_end_mph_b  /* pointers on the end of the current buffer if any */
#       define  os_err          os_err_mph_b        /* OS error code */

#   endif

#endif

/*-------------------------------------------------------------------------*/

		/* IMPLICIT PARAMATERS (if not defined in PH_B_PAR.H) */

#ifndef PH_B_V14
#	define PH_B_V14					OFF		/* V.14 facility */
#endif

#ifndef PH_B_V110
#	define PH_B_V110				OFF		/* V.110 facility */
#endif

#if (PH_B_V14 == ON) || (PH_B_V110 == ON)
#	undef  PH_B_STREAM
#	define PH_B_STREAM				ON		/* Stream : ON */
#endif

/*-------------------------------------------------------------------------*/


						/*  PH B macro's */

#	if PH_B_FC == ON
#		define 	Ph_b_mark_fc_inc(p_ctx)			ph_b_mark_fc_inc (p_ctx)
#		define	Ph_b_mark_fc_dec(p_ctx)			ph_b_mark_fc_dec (p_ctx)
#		define	Ph_b_mark_fc_reset()			Ph_b_out_fc_mark = 0; Ph_b_out_fc_state = FREE

#	else

#		define 	Ph_b_mark_fc_inc(p_ctx)
#		define 	Ph_b_mark_fc_dec(p_ctx)
#		define 	Ph_b_mark_fc_reset()
#	endif

		/* Put a message into the transmit FIFO */

#define It_put_xmt(p_msg, old_mask)											\
	It_disable_hscx (old_mask);												\
		Ph_b_mark_fc_inc (p_ph_b_chan);										\
		Fifo_put_msg (&(Ph_b_p_it_xmt_first), &(Ph_b_p_it_xmt_last), p_msg);\
	It_enable_hscx (old_mask)

		/* Fetch a message from the transmit FIFO */

#define It_get_xmt(p_msg, old_mask) 										\
	It_disable_hscx (old_mask);												\
		Ph_b_mark_fc_dec (p_ph_b_chan);										\
		Fifo_get_msg (&(Ph_b_p_it_xmt_first), &(Ph_b_p_it_xmt_last), p_msg);\
	It_enable_hscx (old_mask)

		/* Read the first message pointer of the transmit FIFO */

#define It_read_first_xmt(p_msg, old_mask) 									\
	It_disable_hscx (old_mask);												\
		p_msg = Ph_b_p_it_xmt_first;										\
	It_enable_hscx (old_mask)

/*-------------------------------------------------------------------------*/

#if PH_B_TX_WATCHDOG_TIMER == ON

					/* PH CHANNEL : TIMER MANAGEMENT */

#   define T199                 0                   /* TX watch dog timer */
#   define MX_TIMER             1                   /* maximum number of timer used simultaneously */
#   define Ti_ev_id(xx)         PH_B_TI_EV_ID[xx]   /* timer ID table */

#endif

#define PH_B_T199_I             (900 * MILLISECOND) /* Watch dog timer default value */
#define PH_B_WD_TIMER_NIL       (uchar)(~0)

/*-------------------------------------------------------------------------*/

						/* PH B NA context */

struct ph_b_na_object {
	nai_t                               nai;                /* NA ID */
	struct peitab                  FAR *p_peitab;           /* pei table pointer */
	uchar                               hscx_id;            /* HSCX_ID in the system */
	uchar                          FAR *p_mem_blk;          /* memory block pointer */
	ent_id_t							ent_up_default;		/* upper layer default entity ID */
	Bound

	struct ph_b_chan_object {
		struct peitab       p_peitab;                       /* pei table */
		long                error_counter;                  /* error counter */
		struct message  FAR * VOLATILE  p_it_xmt_first;     /* TX FIFO */
		struct message  FAR * VOLATILE  p_it_xmt_last;      /* TX FIFO */
		struct message  FAR * VOLATILE  p_xmit_msg;         /* current XMIT message */

		add_t                           chani;              /* access key : Channel ID */
		uint                            ts_tx;              /* Time Slot number Transmit */
		uint                            ts_rx;              /* Time slot number Receive */
		nai_t                           nai;                /* NAI */
		uchar                           hscx_id;            /* HSCX_ID in the system */
		uchar                           init_mode;          /* initialization mode of the B channel */
		uchar							congestion;			/* congestion flag */
		ent_id_t						ent_up;				/* upper layer entity ID */
		ent_id_t						layer_3_ent_id;		/* layer 3 entity ID */
		uchar							wait_commit_flag;	/* commitment flag */

#       if PH_B_TX_WATCHDOG_TIMER == ON
			struct message         FAR *p_msg_xmit;         /* XMIT message pointer */
			timer_val_t                 ti[MX_TIMER];       /* timer values */
			struct timer                timer_table[MX_TIMER];/* timer table  */
#       endif

#		if PH_B_FC == ON
			struct	ph_b_fc_cell	FAR *p_ph_fc_tx;		/* Tx flow control cell or P_NIL */
			struct	ph_b_fc_cell	FAR *p_ph_fc_rx;		/* Rx flow control cell or P_NIL */
#		endif

#		if PH_B_FC == ON
			uchar   					in_fc_state;		/* incoming flow control state : FREE or BUSY */

			uchar   					out_fc_state;		/* outgoing flow control state : FREE or BUSY */
			uchar						out_fc_mark;		/* outgoing flow control current mark */
#		endif

	} ph_b_chan_object [PH_BRI_MX_CHANI];

#	if PH_B_FC == ON
		uchar							out_fc_low_mark;	/* outgoing flow control low mark */
		uchar							out_fc_high_mark;	/* outgoing flow control high mark */
#	endif

};

#define Ph_b_nai                p_ph_b_na   -> nai
#define Ph_b_hscx_id            p_ph_b_na   -> hscx_id
#define Ph_b_p_peitab           p_ph_b_na   -> p_peitab
#define Ph_b_p_mem_blk          p_ph_b_na   -> p_mem_blk
#define Ph_b_ent_up_default		p_ph_b_na   -> ent_up_default
#define Ph_b_a_chan(xx)         &(p_ph_b_na -> ph_b_chan_object[xx])
#define Ph_b_size               Rnd_sizeof (struct ph_b_na_object)

#define Ph_b_out_fc_low_mark	p_ph_b_na 	-> out_fc_low_mark
#define Ph_b_out_fc_high_mark 	p_ph_b_na	-> out_fc_high_mark


#define Ph_b_chan_nai           ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> nai
#define Ph_b_chani              ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> chani
#define Ph_b_a_peitab           &(((struct ph_b_chan_object FAR *)p_ph_b_chan) -> p_peitab)
#define Ph_b_ts_tx              ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> ts_tx
#define Ph_b_ts_rx              ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> ts_rx
#define Ph_b_init_mode          ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> init_mode
#define Ph_b_ent_up             ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> ent_up
#define Ph_b_layer_3_ent_id 	((struct ph_b_chan_object FAR *)p_ph_b_chan) -> layer_3_ent_id

#define Ph_b_wait_commit_flag	((struct ph_b_chan_object FAR *)p_ph_b_chan) -> wait_commit_flag

#define Ph_b_p_it_xmt_first     ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> p_it_xmt_first
#define Ph_b_p_it_xmt_last      ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> p_it_xmt_last
#define Ph_b_p_xmit_msg         ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> p_xmit_msg

#define Ph_b_error_counter      ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> error_counter

#define Ph_b_congestion         ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> congestion

#define Ph_b_p_ph_fc_tx         ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> p_ph_fc_tx
#define Ph_b_p_ph_fc_rx         ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> p_ph_fc_rx

#define Ph_b_in_fc_state	 	((struct ph_b_chan_object FAR *)p_ph_b_chan) -> in_fc_state

#define Ph_b_out_fc_mark		((struct ph_b_chan_object FAR *)p_ph_b_chan) -> out_fc_mark
#define Ph_b_out_fc_state	 	((struct ph_b_chan_object FAR *)p_ph_b_chan) -> out_fc_state

		/* Access to PH timer management values */

#define Ti_val(xx)              ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> ti[xx]
#define Ti_state(xx)            ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> timer_table[xx].state
#define Ti_id(xx)               ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> timer_table[xx].id
#define Ti_sn(xx)               ((struct ph_b_chan_object FAR *)p_ph_b_chan) -> timer_table[xx].sn

		/* Transmit busy flag */

#define Transmitter_busy        (((struct peitab FAR *)Ph_b_a_peitab) -> pt_state & (PT_TX_WORKS | PT_HDLC_RESET))

#define Ph_b_a_peitab_to_ph_b_chan(p_pt)    \
	(struct ph_b_chan_object FAR *)(p_pt)

/*   - Offsetof (ph_b_chan_object, p_peitab)) */

			/* Entity control flow state */

#define FREE					'F'				/* free entity */
#define BUSY					'B'				/* busy entity */

/*-------------------------------------------------------------------------*/


						/* Function declarations */

#if NEW_FCT_STYLE == ON
	uchar   ph_b_config             (struct ph_b_config FAR *p_ph_b_config);
	void    ph_b_retransmit         (ent_id_t to, code_t code);
	void    ph_b_transmit           (ent_id_t to, code_t code);
	uchar   ph_b_access_nai         (nai_t nai);
	void    ph_b_access_first_na    (void);
	void    ph_b_access_next_na     (void);
	uchar   ph_b_access_chani       (nai_t nai, add_t chani);
	uchar   ph_b_build_object       (struct ph_b_config FAR *p_ph_b_config);
	void    ph_b_init               (struct peitab FAR *p_peitab, struct mph_b_init FAR *p_data, uchar chani);
	void    ph_b_stop               (struct peitab FAR *p_peitab);
	uchar   ph_b_start_xmit         (ent_id_t entity_id, struct ph_b_chan_object FAR *p_ph_b_chan);
	void    ph_b_discard_xmt        (void);

	void    hscx_init_peitab        (struct peitab FAR *p_peitab, IO_PORT address, uchar delta);
	uchar   hscx_send_frame         (struct peitab FAR *p_peitab, int data_size, uchar FAR *p_data);
	void    hscx_reset_tx_channel   (struct peitab FAR *p_peitab);
	void    hscx_init               (struct peitab FAR *p_peitab, uchar mode);
	void    hscx_assign_ts          (struct peitab FAR *p_peitab, uint dir, uint slot, uint size, uint ass_store);
	void    hscx_reset              (struct peitab FAR *p_peitab);
	void 	hscx_stop 				(struct peitab   FAR *p_peitab);
	void 	ph_b_transmit_ph_tx_done (struct message FAR *p_msg);

	void 	ph_b_stream_init 		(struct peitab FAR *p_peitab, uchar x_ph_stream, struct ph_b_stream	FAR *p_ph_b_stream);
	void	ph_b_stream_reset 		(struct peitab FAR *p_peitab);

#else

	uchar   ph_b_config             ();
	void    ph_b_retransmit         ();
	void    ph_b_transmit           ();
	uchar   ph_b_access_nai         ();
	void    ph_b_access_first_na    ();
	void    ph_b_access_next_na     ();
	uchar   ph_b_access_chani       ();
	uchar   ph_b_build_object       ();
	void    ph_b_init               ();
	void    ph_b_stop               ();
	uchar   ph_b_start_xmit         ();
	void    ph_b_discard_xmt        ();

	void    hscx_init_peitab        ();
	uchar   hscx_send_frame         ();
	void    hscx_reset_tx_channel   ();
	void    hscx_init               ();
	void    hscx_assign_ts          ();
	void    hscx_reset              ();
	void 	hscx_stop 				();
	void 	ph_b_transmit_ph_tx_done ();

	void 	ph_b_stream_init 		();
	void	ph_b_stream_reset 		();

#endif



#if NEW_FCT_STYLE == ON
    uchar   ph_b                            (struct message FAR *p_msg);
    uchar   ph_b_start_xmit                 (ent_id_t entity_id,             struct ph_b_chan_object FAR *p_ph_b_chan);
    void    ph_b_start_tx_watchdog_timer    (struct message FAR *p_msg_xmit, struct ph_b_chan_object FAR *p_ph_b_chan);
    void    ph_b_clear_xmt                  (struct message FAR *p_msg_clear);
	uchar   ph_b_access                     (nai_t nai, sapi_t sapi, add_t chani);
	void 	ph_b_mark_fc_inc 				(struct ph_b_chan_object	FAR *p_ph_b_chan);
	void 	ph_b_mark_fc_dec 				(struct ph_b_chan_object	FAR *p_ph_b_chan);

	void    string_in_io                    (char FAR *p_to,   IO_PORT port, ushort cnt);
	void    string_in_mem                   (char FAR *p_to,   IO_PORT port, ushort cnt);
	void    string_out_io                   (char FAR *p_from, IO_PORT port, ushort cnt);
	void    string_out_mem                  (char FAR *p_from, IO_PORT port, ushort cnt);

	void    hscx_it                         (uchar hscx_id);

#else

	uchar   ph_b                            ();
	uchar   ph_b_start_xmit                 ();
	void    ph_b_start_tx_watchdog_timer    ();
	void    ph_b_clear_xmt                  ();
	uchar   ph_b_access                     ();
	void 	ph_b_mark_fc_inc 				();
	void 	ph_b_mark_fc_dec 				();

	void    string_in_io                    ();
	void    string_in_mem                   ();
	void    string_out_io                   ();
	void    string_out_mem                  ();

	void    hscx_it                         ();
#endif

/*EOF*/
