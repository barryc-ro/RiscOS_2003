
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - def.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Siemens HSCX for B-channels Driver               |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/***************************************************************************
 *                                                                         *
 *    Siemens ISDN-Userboard  (c) 1989                                     *
 *    ======================                                               *  
 *                                                                         *
 *    Firmware:   common definitions                                       *
 *    File:       def.h                                                    *
 *    created:    Nov. 1987                                                *
 *    author:     Peter Mueller                                            *
 *    compiled:   Microsoft C-Compiler                                     *
 *                                                                         *
 * $Revision$
 *
 * $Date$
 *
 ***************************************************************************/

   /* History
      ======================================================================
      date     author   reason
                     
            1989

      --------------------------------------------------------------------*/


#define  SIPB              0           /* the compiler switch SIPB must    */
									   /* be set only in conjunction with  */
									   /* the SIPB userboard AND the IOS   */

#define  IOM1              1
#define  IOM2              2


			/* **************
			   *** Macros ***
			   ************** */

#define  SetResp(queue,cmd,r1,r2,r3,r4,r5,r6) {(queue)[6] = (cmd);\
											  (queue)[5] =  (r1);\
											  (queue)[4] =  (r2);\
											  (queue)[3] =  (r3);\
											  (queue)[2] =  (r4);\
											  (queue)[1] =  (r5);\
											  (queue)[0] =  (r6);}



									   /* type conversions:                */
									   /* extract the low and high byte    */
									   /* from a double byte (=word)       */
									   /* value                            */
#define  LOBYTE(i)   ((uchar)i&0xFF)
#define  HIBYTE(i)   ((uchar)(i>>8))


			/* *********************************
			   mailbox error codes after startup
               (only important for the SIPB)
               ********************************* */

#define  ERR_NONE          0x00  /* No basic hardware error detected       */

#define  ERR_TIMING        0x01  /* No clocking in NT-Demo mode 
                                    i.e. TIMING module   not present 
                                                or not operational         */

#define  ERR_LAY2          0x02  /* D channel controller not present
												or not operational         */

#define  ERR_LAY1          0x03  /* LAYER 1 device not operational
												or not present             */

#define  ERR_RAM           0x05  /* RAM error. An inconsistency was
									detected during the SIPB RAM test      */



			/* **********************
			   module table structure
			   ********************** */


struct modul_table
{
   uchar              mod_name[6];      /* name of add on module         */
   unsigned int      mod_cmp_ptr,      /* number of the first component
											 on that module                */
					 mod_cmp_cnt;      /* total number of components on
											 the module                    */
   uchar 		FAR *mod_start_addr;   /* pointer to module EPROM       */
   IO_PORT           mod_start_io;     /* pointer to module start IO
											 location                      */
   unsigned int      mod_nr,           /* slot number   { 0, 1, 2};     */
					 mod_id;           /* module identifier             */
   uchar              mod_version;      /* version of description EPROM  */
   int               (*mod_fint)();    /* interrupt service routine     */
   int               mod_int_parm;     /* parameter for int. serv. rout.*/
   unsigned char     mod_reserved[4];
};
typedef struct modul_table MODTABLE;



            /* ******************************
               mailbox signalling byte values
               ****************************** */


                        /*  values  and      meaning                       */
                        /*  ------           -------                       */

#define  ACK_DONE             0        /* command executed successfully    */

#define  ACK_WRONG_CMD        1        /* wrong (= unknown) command        */

#define  ACK_NO_MEMORY        2        /* no memory free for temporary     */
                                       /* storage of a 'long' command's    */
									   /* data bytes                       */

#define  ACK_WRONG_PARM       3        /* wrong parameters                 */

#define  ACK_RESERVED0        4        /* not used                         */
#define  ACK_RESERVED1        5        /* not used                         */
#define  ACK_INIT_ERROR       6        /* not used                         */

#define  ACK_ACCESS_FAULT     7        /* access fault:                    */
                                       /* - device not operational         */
                                       /* - device cannot be accessed      */
                                       /*   because it is still busy       */
									   /*   (e.g. sending data)            */

#define  ACK_WRONG_MODUL_MODE 8
#define  ACK_NOT_SUPPORTED    9
#define  ACK_DOWNLOAD_FAILED  0x0A
#define  ACK_NEW_FRAME        0xFF



			   /* **********************************************
				  structures to map the mailboxes for different
							  command frames
				  ********************************************** */

			   /* *** long command frame ***
				  ( e.g. for CMD #71 )       */

struct message_long_frame
{
   uchar 	FAR *ms71_frame;             /* 4 byte pointer to data bytes     */
   ushort      	ms71_cnt;               /* 2 byte data byte counter         */
   uchar       	ms71_cmd;               /* 1 byte command specifier         */
   uchar       	ms71_sig_byte;
};
typedef struct message_long_frame MESS71;


			   /* *** 'normal' command frame  ***
				  *******************************
				  ( e.g. for CMD #70 )          */
struct message7
{
   uchar       ms_p6,
			   ms_p5,
			   ms_p4,
			   ms_p3,
			   ms_pei,
			   ms_sub_type,
			   ms_cmd,
			   ms_sig_byte;
};
typedef struct message7 MESS;


			   /* command structure of commands
				  #10 and #11
				  ***************************** */
struct message1
{
   ushort      ms1_rw,
			   ms1_reg;
   uchar       ms1_pei,
			   ms1_sub_type,
			   ms1_cmd,
			   ms1_sig_byte;
};
typedef struct message1 MESS1;


#define  NONE_MAILBOX         0
#define  PC_MAILBOX           1
#define  IOS_MAILBOX          2

/*EOF*/
