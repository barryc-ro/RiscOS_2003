;/*--------------------------------------------------------------------------*
; *                       M O D U L E   H E A D E R
; *
; * filename - fifo.asm
; *
; * $Revision$
; *
; * $Date$
; *
; *			   implements the I/O-related functions
; *			   for i80x86 CPU family.
; *
; * function(s)
; *
; *		- string_in_io
; *
; *		- string_out_io
; *
; *-------------------------------------------------------------------------*/
;
;*[]---------------------------------------------------[]*
;*|                                                     |*
;*|    OMNITEL-BRICKS                                   |*
;*|    Siemens HSCX for B-channels Driver               |*
;*|                                                     |*
;*|    Copyright (c) 1989-1997 by OMNITEL SA            |*
;*|    All Rights Reserved.                             |*
;*|                                                     |*
;*[]---------------------------------------------------[]*
;

.286	; outsb and insb are not supported by i8086 CPU.


;      Start Code segment
;      ==================

_TEXT SEGMENT PUBLIC 'CODE'

assume		cs:_TEXT
assume		ds:nothing


;     Definition of Publics
;     =====================

public     _string_out_io
public     _string_in_io

;********************************************************
;                                                       *
; string_out_io (data_ptr,port,nbytes)                  *
;                                                       *
; data_ptr  character pointer to block of data to be    *
;         transfered (32-bit pointer)                   *
; port      IO port for the data to be transfered to    *
;           (2 byte address for normal IO)              *
; nbytes    number of bytes to be transfered            *
;                                                       *
; This routine will transfer a block of data from       *
; memory pointed to by                                  *
; data_ptr to the port using a output string            *
; instruction                                           *
;********************************************************

_string_out_io proc far

	push	bp
	mov		bp,sp
	push	ax
	push	cx
	push	dx
	push	ds
	push	si

	mov		si,[bp+6]            ;get memory offset
	mov		ax,[bp+8]            ;get memory segment
	mov		ds,ax

	mov		dx,[bp+10]           ;get output port address
	mov		cx,[bp+12]           ;get byte count

	jcxz	NO_BYTES

	cld
	rep		outsb

;L1:
;	inc		dx
;	loop	L1

NO_BYTES:
	pop		si
	pop		ds
	pop		dx
	pop		cx
	pop		ax
	mov		sp,bp
	pop		bp
	ret

_string_out_io endp

; ------


;********************************************************
;                                                       *
; string_in_io (data_ptr,port,nbytes)                   *
;                                                       *
; data_ptr  character pointer to block of data to be    *
;         transfered (32-bit pointer)                   *
; port      IO port for the data to be transfered to    *
; nbytes    number of bytes to be transfered            *
;                                                       *
; This routine will transfer a block of data to memory  *
; pointed to by                                         *
; data_ptr from the port using a input string           *
; instruction                                           *
;********************************************************

_string_in_io proc far

	push	bp
	mov		bp,sp
	push	ax
	push	cx
	push	dx
	push	es
	push	di

	mov		di,[bp+6]		;get memory offset
	mov		ax,[bp+8]		;get memory segment
	mov		es,ax

	mov		dx,[bp+10]		;get output port address
	mov		cx,[bp+12]		;get byte count

	jcxz	ZERO_BYTES

	cld
	rep		insb			;for 286 and upper only

;L2:
;	inc		dx
;	loop	L2

ZERO_BYTES:
	pop		di
	pop		es
	pop		dx
	pop		cx
	pop		ax
	mov		sp,bp
	pop		bp
	ret

_string_in_io endp

_TEXT	ends

end

;EOF
