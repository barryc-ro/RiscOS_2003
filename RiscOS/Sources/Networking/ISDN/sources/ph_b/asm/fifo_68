*----------------------------------------------------------------------------*
*                       M O D U L E   H E A D E R
*
* filename - fifo_68.asm
*
* $Revision$
*
* $Date$
*
*			   implements the fast-executing memory-related functions
*			   for M68000 CPU family compilers.
*
* function(s)
*
*----------------------------------------------------------------------------*

*[]---------------------------------------------------[]*
*|                                                     |*
*|    OMNITEL-BRICKS                                   |*
*|    Siemens HSCX for B-channels Driver               |*
*|                                                     |*
*|    Copyright (c) 1989-1997 by OMNITEL SA            |*
*|    All Rights Reserved.                             |*
*|                                                     |*
*[]---------------------------------------------------[]*

	SECTION   code,,C

	XDEF		_string_in_mem
	XDEF		_string_out_mem

******************************************************************************
*
* ----- (memory mapped I/O) FIFO read & write -----
*
* string_in_mem (to, from (fixed address), nbytes)
* string_out_mem (from, to (fixed address), nbytes)
*
* to		destination far pointer
* from      source far pointer
* nbytes    number of bytes to be transfered
*
******************************************************************************

_string_in_mem:
									* void rd_fifo (to, from, nbytes)
	LINK    A6,#0					*	uchar FAR *to, uchar FAR *from, ushort nbytes,
	MOVEM.L A1/A2/D0,-(A7)			*
									* {
	CLR.L	D0						*	ushort			_nbytes = 0;
									*
	MOVE.W	18(A6),D0				*	if ((_nbytes = nbytes) == 0) {
	BEQ		RD_FIFO_END				*	} else {
	MOVEA.L	8(A6),A1				*		char FAR *	_to		= to;
	MOVEA.L	12(A6),A2				*		char FAR *	_from	= from;
									*
	SUBQ.W	#1,D0					*		--_nbytes;
									*
RD_FIFO_LOOP
									*		while (TRUE) {
	MOVE.B	(A2),(A1)+				*			*_to++ = *_from;
	DBF		D0,RD_FIFO_LOOP			*			if (_nbytes-- == 0) break;
									*		}
									*	}
RD_FIFO_END
									* }
	MOVEM.L (A7)+,A1/A2/D0			*
	UNLK    A6						*
	RTS								*
									*
************************************* /*------------------------------------*/
									*
_string_out_mem:
									* void wr_fifo (from, to, nbytes)
	LINK    A6,#0					*	uchar FAR *from, uchar FAR *to, ushort count;
	MOVEM.L A1/A2/D0,-(A7)			*
									* {
	CLR.L	D0						*	ushort			_nbytes = 0;
									*
	MOVE.W	18(A6),D0				* 	if ((_nbytes = nbytes) == 0) {
	BEQ		WR_FIFO_END				*	} else {
	MOVEA.L	8(A6),A1				*		char FAR *	_from	= from;
	MOVEA.L	12(A6),A2				*		char FAR *	_to		= to;
									*
	SUBQ.W	#1,D0					*		--_nbytes;
									*
WR_FIFO_LOOP
									*		while (TRUE) {
	MOVE.B	(A1)+,(A2)				*			*_to = *_from++;
	DBF		D0,WR_FIFO_LOOP			*			if (_nbytes-- == 0) break;
									*		}
									*	}
WR_FIFO_END
									* }
	MOVEM.L (A7)+,A1/A2/D0			*
	UNLK    A6						*
	RTS								*

*EOF*
