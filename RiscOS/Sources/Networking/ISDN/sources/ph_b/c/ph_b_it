
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ph_b_it.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *       ph_b_it - implements the PHysical B channel interruption in
 *       ISDN-BRICKS for SIEMENS HSCX LLD.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Siemens HSCX for B-channels Driver               |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_PH_B_IT

#include "ph_b.h"
#include "it.h"

CONST char  ph_b_it_copyright[] = "Copyright (c) 1990 - 1991 by OMNITEL SA - All Rights Reserved";
CONST char  ph_b_it_licence[]   = LICENSE_NBER;

    /* External global data */


    /* Macro instead of function for performance mainly (IT) */

    /* send a message from PH_B_IT entity to PH_B entity */

#define Ph_b_it_send_to_ph_b(p_msg, code)   \
    L_msg_from  = ENT_PH_B_IT;              \
    L_msg_to    = ENT_PH_B;                 \
    L_msg_nai   = Ph_b_chan_nai;            \
    L_msg_sapi  = PH_SAPI_B;                \
    L_msg_chani = Ph_b_chani;               \
    L_msg_code  = code;                     \
    Send_message (p_msg)

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            hscx_event - implements the PH_B_IT entity reception
                part for a SIEMENS HSCX LLD. Runs under IT level.

Usage            hscx_event (event_id, p_peitab);
                    - event_id : event ID from interrupt service routine,
                    - p_peitab : PEITAB.

common constants and declarations : ph.h

common objects : p_snd_msg, p_buffer pointers.

*--------------------------------------------------------------------------*/

void hscx_event (event_id, p_peitab)
	uchar                        event_id;
	struct peitab           FAR *p_peitab;
{
	it_mask_t                    old_mask;      /* HSCX IT old mask */
	struct message          FAR *p_msg;         /* current message pointer */
	struct buffer           FAR *p_buffer;      /* buffer pointer */
	struct ph_b_chan_object FAR *p_ph_b_chan;   /* channel context */

#	if PH_B_FC == ON
		struct ph_b_fc_cell	FAR *p_ph_b_fc;		/* flow control cell pointer */
#	endif


			/* Access to the HSCX context */

	p_ph_b_chan = Ph_b_a_peitab_to_ph_b_chan(p_peitab);

			/* Load the parameter block */

	switch (event_id) {

			/* Buffer transmitted without error or as transmitted */

		case EV_TX_DONE  :
		case EV_TX_TO    :
		case EV_TX_RESET :

				/* Get the first message of the transmit FIFO */

			It_get_xmt (p_msg, old_mask);

			if (p_msg != P_NIL) {

#				if PH_B_FC == ON

					/* Message, or message plus buffer sent : */
					/* Adjust relay flow control */

					It_disable ();
						Ph_b_relay_fc_dec (Ph_b_p_ph_fc_tx);
					It_enable ();

#				endif

#				if PH_B_TX_DONE == ON

						 /* Send PH_IT_XMIT_IN to PH D */

					Ph_b_it_send_to_ph_b (p_msg, PH_B_IT_XMIT_IN);

						/*
							Restart transmitter if the transmit
							FIFO is not empty.
						*/

					ph_b_start_xmit (ENT_PH_B_IT, p_ph_b_chan);

#				else
						/* Message and buffer shall be released ? */

					if (L_msg_lib == ON) {

								/* Yes - Release the buffer if any */

						if (L_msg_p_buffer != P_NIL) {

							It_free_buffer (L_msg_p_buffer);
							L_msg_p_buffer = P_NIL;

						}


							/*
								If soft watch dog timer --> send XMIT to
								PH_B entity.
							*/

#						if PH_B_TX_WATCHDOG_TIMER == ON

								/*
									Out of low and high mark :
									   - send the transmitted message to PH_B
										 entity for updating the IT stacks
										 (out of IT level).
								*/

							Ph_b_it_send_to_ph_b (p_msg, PH_B_IT_XMIT_IN);

#   	                else

#							if PH_B_AUDIT == ON

								Ph_b_it_send_to_ph_b (p_msg, PH_B_IT_XMIT_IN);

#							else

									/*
										Check the stack current levels
										(message and buffer) according
										to the low and high marks.
									*/

								if (It_stack_in_mark ()) {

										/*
											Current levels inside the low and high mark :
											 - Free the transmitted message and buffer.
										*/

									It_put_msg (p_msg);

								} else {

										/*
											Out of low and high mark :
											   - send the transmitted message to PH_B
												 entity for updating the IT stacks
												 (out of IT level).
										*/

									Ph_b_it_send_to_ph_b (p_msg, PH_B_IT_XMIT_IN);
								}

#							endif

# 	                  endif

							/*
								Restart transmitter if the transmit
								FIFO is not empty.
							*/

						ph_b_start_xmit (ENT_PH_B_IT, p_ph_b_chan);

					} else {

							/* Reset the in ph entity mark */

						Msg_reset_in_ph_fifo_mark (p_msg);

#               	    if PH_B_TX_WATCHDOG_TIMER == ON


								/*
									Restart the transmitter and if not
									restarted transmit XMITDONE to PH_B entity.
								*/

							if (ph_b_start_xmit (ENT_PH_B_IT, p_ph_b_chan) == STOP) {
									It_get_msg (p_msg);

									if (p_msg != P_NIL) {
										L_msg_header_init;
										L_msg_lib 		= ON;
										L_msg_p_buffer 	= P_NIL;

										Ph_b_it_send_to_ph_b (p_msg, PH_B_IT_XMIT_IN);
									}

							}

#                   	else

							ph_b_start_xmit (ENT_PH_B_IT, p_ph_b_chan);
#                   	endif

					}

#  				endif

			}

			break;

		case EV_RX_DONE :

				/*
					Frame received without error :
						- get the buffer pointer from PEITAB,
                        - get data size from PEITAB.
                */

			if (p_peitab -> pt_rx_start != P_NIL) {
				p_buffer = Buffer_a_from_a_start_data (p_peitab -> pt_rx_start - p_peitab -> pt_rx_offset);

					/*
						If congestion management and congestion busy
						situation ---> discard the received frame.*
					*/

				if ((Ph_b_congestion == ON) && (Congestion_busy)) {
					It_free_buffer (p_buffer);
					break;
				}

#				if PH_B_FC == ON

						/*
							If PH flow control and too many buffers in use
							discarded the received frame.
						*/

					if ((p_ph_b_fc = Ph_b_p_ph_fc_rx) != P_NIL) {
						Ph_b_relay_fc_inc (p_ph_b_fc);

						if (Ph_b_relay_fc_overflow (p_ph_b_fc)) {
							Ph_b_relay_fc_dec (p_ph_b_fc);
							It_put_buffer (p_buffer);
							break;

						}

					}

#				endif

				Buffer_data_size = p_peitab -> pt_rx_cnt;

					/* Report received frame */

				Ph_b_rx_report_end_rx (p_peitab -> chani, Buffer_data_size);

					/* Get a message from the message IT stack */

				It_get_msg (p_msg);

				if (p_msg != P_NIL) {

						/* Init the message header */

					L_msg_header_init;

						   /* Link the buffer to the message to sent to PH_B entity */

					L_msg_init_link_buffer;

						/*
							Send the received frame to PH_B
							entity for processing.
						*/

					Ph_b_it_send_to_ph_b (p_msg, PH_B_IT_RCV_IN);

				} else {

					It_put_buffer (p_buffer);
				}

			}

			break;

			/* Transmit error : retry */

		case EV_TX_RETRY :

				/*  Restart transmitter */

			ph_b_start_xmit (ENT_PH_B_IT, p_ph_b_chan);
			break;

				/* Error indication primitive : for statistics only */

		case EV_TX_ERR :
		case EV_RX_ERR :

				/* Increment error counter */

			Ph_b_error_counter++;
			break;

		default :
			Trap (TRAP_EVENT_UNKNOWN, "hscx_event");

	}

}

/*------------------------------------------------------------------------*/

#if PH_B_TX_WATCHDOG_TIMER == ON

void ph_b_start_tx_watchdog_timer (p_msg_xmit, p_ph_b_chan)
	struct message          FAR *p_msg_xmit;    /* data */
	struct ph_b_chan_object FAR *p_ph_b_chan;   /* channel context pointer */
{
	struct message          FAR *p_msg;         /* message to send */
	struct message          FAR *FAR *p_data;   /* data area pointer in the message */

	It_get_msg (p_msg);                         /* allocate a message */

	if (p_msg != P_NIL) {
		L_msg_header_init;                      /* mesage header init */
		L_msg_p_buffer = P_NIL;

		p_data          = (struct message FAR * FAR *)L_msg_a_start_data;
		*p_data         = p_msg_xmit;
		L_msg_data_size = sizeof (struct message FAR *);

			/* Send to PH_B entity */

		Ph_b_it_send_to_ph_b (p_msg, PH_B_IT_START_WD_IN);
	}

}

#endif


/*EOF*/
