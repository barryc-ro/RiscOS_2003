
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mph_b.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         mph_b - implements the PHysical Management entity in ISDN-BRICKS
 *         when using SIEMENS Low-level Device Driver.
 *
 *         mph_b_retransmit_event - implements the retansmission of a
 *         received event to another entity.
 *
 *		   mph_b_var_init - init of MPH_B entity's global variables.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Siemens HSCX for B-channels Driver               |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_MPH_B

#include "ph_b.h"

CONST   char            mph_b_copyright[]   = "Copyright (c) 1990 - 1991 by OMNITEL SA - All Rights Reserved";
CONST   char            mph_b_licence[]     = LICENSE_NBER;

			/* Common variables */

		Entity_common   (mph_b);            /* MPH B entity common variables */

/*--------------------------------------------------------------------------*/

						/* Local function declarations */

#if NEW_FCT_STYLE == ON
	void    mph_b_retransmit_event          (ent_id_t to, code_t code);
#else
	void    mph_b_retransmit_event          ();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            mph_b - implements the PHysical Management B entity when
				using SIEMENS HSCX with SIEMENS Low-level Device Driver.

Usage           uchar mph_b (struct message FAR *p_msg);
						- p_msg : message to process.

Return value :  returns = OK
						= NOK

common constants and declarations : ph.h

common objects : p_rcv_msg, p_snd_msg, p_buffer pointers.

*--------------------------------------------------------------------------*/

uchar mph_b (p_msg)
	struct message  FAR *p_msg;             /* pointer on received message */
{

		/* Set the MPH B entity current pointers */

	p_rcv_msg = p_msg;
	p_buffer  = R_msg_p_buffer;
	p_snd_msg = P_NIL;

		/* Init event ID */

	event_id  = R_msg_code;

		/* Dispatcher : from entity */

	switch (R_msg_from) {

			/*--------------- FROM SYSTEM MANAGEMENT ENTITY ----------------*/

        case ENT_SM :

            /* Dispatcher : from incoming event */

            switch (event_id) {

                    /* Set configuration and init hardware */

                case SM_SET_CONFIG_RQ :

                        /* Send configuration message to PH B entity */

                    mph_b_retransmit_event (ENT_PH_B, MPH_B_SET_CONFIG_RQ);
                    break;

                    /* STOP request */

                case SM_STOP_RQ :
                    mph_b_retransmit_event (ENT_PH_B, MPH_B_STOP_RQ);
                    break;

                    /* Reset configuration request */

#				if RESET_CONFIG == ON

					case SM_RESET_CONFIG_RQ :
						mph_b_retransmit_event (ENT_PH_B, MPH_B_RESET_CONFIG_RQ);
						break;

#				endif

			}
            break;

            /*------------------- FROM PH_B ENTITY -----------------*/

        case ENT_PH_B :

            /* Dispatcher : from incoming event */

            switch (event_id) {

                        /* PH_B init confirmation received */

                case MPH_B_SET_CONFIG_CO :

                        /* Confirm init from PH entities */

                    mph_b_retransmit_event (ENT_SM, SM_SET_CONFIG_CO);
                    break;

                    /* Init confirm */

                case MPH_INIT_CO :
                    mph_b_retransmit_event (ENT_SM, SM_INIT_CO);
                    break;

                        /* Stop confirm */

                case MPH_B_STOP_CO :
                    mph_b_retransmit_event (ENT_SM, SM_INIT_CO);
                    break;

                        /* Reset configuration confirm */

#				if RESET_CONFIG == ON

					case MPH_B_RESET_CONFIG_CO :
						mph_b_retransmit_event (ENT_SM, SM_RESET_CONFIG_CO);
						break;

#				endif

			}
            break;


            /*----------------------- FROM TIMER ENTITY --------------------*/

        case ENT_TI :


                /* Dispatcher : event code */

            switch (event_id) {
            }
            break;

            /*------------- FROM MPH (CALL CONTROL) ENTITY -----------------*/

        case ENT_MPH :

            switch (event_id) {

                    /* Connect B channel */

                case MPH_B_INIT_RQ :
                case MPH_B_STOP_RQ :
                    mph_b_retransmit_event (ENT_PH_B, R_msg_code);
                    break;


                default :
                    break;
            }
            break;


            /*------------------- FROM ? -----------------*/

        default :
            break;

    }


        /* Free the remaining messages if necessary */

    Free_msg (p_rcv_msg);
    Free_msg (p_snd_msg);

        /* Return */

    return (OK);
}


/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name             mph_b_retransmit_event - implements the retansmission of a
                 received message to another entity with another primitive
                 code.

Usage            uchar mph_b_retransmit_event (entity_t to, code_t code)
                    - to    : destination entity,
                    - code  : primitive code.

Return value    return code = OK  LLD received the information
                            = NOK LLD did not ack. the information

common constants and declarations  ph.h

common : message/buffer pointers.

*--------------------------------------------------------------------------*/

void mph_b_retransmit_event (to, code)
    ent_id_t    to;     /* destination entity */
    code_t      code;   /* primitive code */
{

        /* Address */

    R_msg_from  = ENT_MPH_B;        /* origination entity ID */
    R_msg_to    = to;               /* destination entity ID */

    R_msg_sapi  = PH_SAPI_B;        /* MPH B SAPI */

        /* Event ID */

    R_msg_code  = code;

        /* Send the message */

    Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				mph_b_var_init - init of MPH_B entity's global variables.

Usage            	void mph_b_var_init ();

Return value :		void

*--------------------------------------------------------------------------*/

void mph_b_var_init ()
{

}
/*EOF*/
