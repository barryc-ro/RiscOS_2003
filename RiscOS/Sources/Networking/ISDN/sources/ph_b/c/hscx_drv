
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - hscx_drv.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	hscx_init_peitab - initialize the PEITAB table entry for an HSCX channel
 *
 *	hscx_init - Initialization of one HDLC channel of an HSCX
 *	and programming of the operating-mode ( auto, non-auto, ..).
 *	HDLC controller reset is not done.
 *
 *	Loop_HSCX - switches an HSCX channel into testloop
 *
 *	hscx_assign_ts - assign the HSCX to timeslots (clock mode 5)
 *
 *	Hscx_send_frame - Initiate transmission of HDLC frames ( S, U, I, UI )
 *	'frame' must point to an IOS intercommunication frame
 *	which consists of frame header section and data section
 *	HDLC S and U (i.e. 'short') frames have only a header
 *	UI and I (i.e. 'long') frames have header + data section
 *	transparent frames have only a data section
 *
 *	hscx_reset - reset HDLC controller addressed with 'p_peitab'
 *
 *  hscx_stop : stop HDLC controller addressed with 'p_peitab'
 *
 *	hscx_exec_cmdr - implements the execution of a CMDR for
 *	SIEMENS HSCX.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Siemens HSCX for B-channels Driver               |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_PH_B
#include "ph_b.h"

/***************************************************************************
 *                                                                         *
 *    SIEMENS ISDN-Userboard  (c) 1987-1989                                *
 *    ======================                                               *
 *                                                                         *
 *    Firmware:   device driver functions for HSCX only                    *
 *    File    :   hscx.c                                                   *
 *    created :   Aug. 1989                                                *
 *    author  :   Peter Mueller                                            *
 *    compiled:   Microsoft C compiler  5.1 (Small)                        *
 *                                                                         *
 ***************************************************************************/

#if PH_B_AUDIT == ON
#   define   Read_register() \
	g_star = Rd_hscx (p_peitab -> pt_r_star);\
	g_mode = Rd_hscx (p_peitab -> pt_r_mode);\
	g_timr = Rd_hscx (p_peitab -> pt_r_timr);\
	g_rbcl = Rd_hscx (p_peitab -> pt_r_rbcl);\
	g_rsta = Rd_hscx (p_peitab -> pt_r_rsta);\
	g_rhcr = Rd_hscx (p_peitab -> pt_r_rhcr);\
	g_ccr2 = Rd_hscx (p_peitab -> pt_r_ccr2);\
	g_rbch = Rd_hscx (p_peitab -> pt_r_rbch);\
	g_cr1  = Rd_hscx (p_peitab -> pt_r_ccr1)

	uchar g_star;
	uchar g_mode;
	uchar g_timr;
	uchar g_rbcl;
	uchar g_rsta;
	uchar g_rhcr;
	uchar g_ccr2;
	uchar g_rbch;
	uchar g_cr1;

#else

#   define Read_register()
#endif

   /*  Function
	   ========  */

#if NEW_FCT_STYLE == ON
	void    it_hscx_chan            (uchar ista,    struct peitab FAR *p_peitab);
	long    it_hscx_chan_rx         (uchar rfp,         struct peitab FAR *p_peitab);
	void    hscx_full_transp        (uchar ista,    struct peitab FAR *p_peitab);
	void    hscx_event              (uchar event,   struct peitab FAR *p_peitab);
	void    RespStatus_BASIC        (struct peitab FAR *p_peitab, long state);
	void    hscx_assign_ts          (struct peitab FAR *pt, uint dir, uint slot, uint size, uint ass_store);
	void    hscx_reset              (struct peitab FAR *pt);
	void 	hscx_exec_cmdr 			(struct peitab FAR *pt, uchar cmd);

#else

	void    it_hscx_chan            ();
	long    it_hscx_chan_rx         ();
	void    hscx_full_transp        ();
	void    hscx_event              ();
	void    RespStatus_BASIC        ();
	void    hscx_assign_ts          ();
	void    hscx_reset              ();
	void 	hscx_exec_cmdr 			();
#endif

/***************************************************************************
 *                                                                         *
 *    Function: hscx_init_peitab ()                                        *
 *    Parms   : pointer to the PEITAB table entry to be initialized        *
 *              base address of HSCX                                       *
 *    purpose : initialize the PEITAB table entry for an HSCX channel      *
 *                                                                         *
 ***************************************************************************/

void hscx_init_peitab (p_peitab, base, delta)
   register struct peitab   FAR *p_peitab;
   IO_PORT                      base;
   uchar                        delta;
{
   p_peitab -> pt_io_base = base;
   p_peitab -> pt_device  = PT_HSCX;

   p_peitab -> pt_r_fifo = base + HSCX_FIFO*delta;
   p_peitab -> pt_r_ista = base + HSCX_ISTA*delta;
   p_peitab -> pt_r_mask = base + HSCX_MASK*delta;
   p_peitab -> pt_r_star = base + HSCX_STAR*delta;
   p_peitab -> pt_r_cmdr = base + HSCX_CMDR*delta;
   p_peitab -> pt_r_mode = base + HSCX_MODE*delta;
   p_peitab -> pt_r_timr = base + HSCX_TIMR*delta;
   p_peitab -> pt_r_exir = base + HSCX_EXIR*delta;
   p_peitab -> pt_r_xad1 = base + HSCX_XAD1*delta;
   p_peitab -> pt_r_xad2 = base + HSCX_XAD2*delta;
   p_peitab -> pt_r_rbcl = base + HSCX_RBCL*delta;
   p_peitab -> pt_r_sap1 = base + HSCX_RAH1*delta;
   p_peitab -> pt_r_sap2 = base + HSCX_RAH2*delta;
   p_peitab -> pt_r_rsta = base + HSCX_RSTA*delta;
   p_peitab -> pt_r_tei1 = base + HSCX_RAL1*delta;
   p_peitab -> pt_r_tei2 = base + HSCX_RAL2*delta;
   p_peitab -> pt_r_rhcr = base + HSCX_RHCR*delta;
   p_peitab -> pt_r_xbcl = base + HSCX_XBCL*delta;
   p_peitab -> pt_r_bgr  = base + HSCX_BGR *delta;
   p_peitab -> pt_r_ccr2 = base + HSCX_CCR2*delta;
   p_peitab -> pt_r_rbch = base + HSCX_RBCH*delta;
   p_peitab -> pt_r_xbch = base + HSCX_XBCH*delta;
   p_peitab -> pt_r_rlcr = base + HSCX_RLCR*delta;
   p_peitab -> pt_r_ccr1 = base + HSCX_CCR1*delta;
   p_peitab -> pt_r_tsax = base + HSCX_TSAX*delta;
   p_peitab -> pt_r_tsar = base + HSCX_TSAR*delta;
   p_peitab -> pt_r_xccr = base + HSCX_XCCR*delta;
   p_peitab -> pt_r_rccr = base + HSCX_RCCR*delta;
}

/***************************************************************************
 *                                                                         *
 *    Function: hscx_init ()                                               *
 *    purpose:                                                             *
 *    Initialization of one HDLC channel of an HSCX                        *
 *    and programming of the operating-mode ( auto, non-auto, ..).         *
 *    HDLC controller reset is not done.                                   *
 *                                                                         *
 *    The parameters are:                                                  *
 *                                                                         *
 *     'p_peitab'                                                                *
 *                                                                         *
 *                                                                         *
 *     'mode'      operating mode. (automode, non automode, etc.)          *
 *                 The possible values are defined in file BASIC.H:        *
 *                 'values of pt_op_mode'                                  *
 *                                                                         *
 *    Special implementation:                                              *
 *       If the user reprograms the layer 2 controller from AUTOMODE to    *
 *       NON AUTOMODE the correct transmission and acknowledgement of an   *
 *       I frame which is currently sent is not assured.                   *
 *       Switching from AUTOMODE to NON AUTOMODE causes an I frame to be   *
 *       transmitted completely by the controller. But the transmit        *
 *       acknowledge response in NON AUTOMODE only indicates that the      *
 *       controller has sent the frame out of the FIFO. It indicates not   *
 *       the successful transmission of the frame as in the AUTOMODE !     *
 *       (no timer supervision, no polling for acknowledge frames!)        *
 *       Therefore the response #74 'loss of I frame' is transferred to    *
 *       the higher protocol software to inform it about that 'I frame may *
 *       have been lost' state. The response is sent if the 'transmit path'*
 *       to the controller is still blocked, i.e. if the controller is     *
 *       still transmitting the frame or waiting for an acknowledge frame  *
 *       from the opposite station.                                        *
 *                                                                         *
 ***************************************************************************/

void hscx_init (p_peitab, mode)
	uchar                       mode;
	register struct peitab  FAR *p_peitab;
{
	uchar                       mode_reg, ccr1;
	struct buffer           FAR *p_buffer;

		/* 	Disable Interrupt during initialization :
			except interrupt relaying.
		*/

	Wr_hscx (p_peitab -> pt_r_mask, (uchar) ~(ISTA_ICA | ISTA_EXA));

		mode_reg = 0;

		switch (mode)  {                /* select OPERATING MODE                  */
										/* *********************                  */
			case PT_MD_EXT_TRANSP:      /* no address recognition                 */
										/* Transparent Mode 0                     */

				mode_reg       |= (MODE_MDS1 | MODE_RAC);
				Wr_hscx (p_peitab -> pt_r_timr, 0x00);

				if ( ! (p_peitab -> pt_state & PT_RX_WORKS)) {

						/* Preallocate a Rx buffer */

					It_get_buffer (p_buffer);

					if (p_buffer != P_NIL) {

							/* Init buffer header */

						Buffer_header_init;

							/* Load frame offset with a hole */

						Buffer_data_offset += p_peitab -> pt_rx_offset;

							/* Load PEITAB context */

						p_peitab -> pt_rx_curr = p_peitab -> pt_rx_start = (uchar FAR *)Buffer_a_start_data;
						p_peitab -> pt_state  |= PT_RX_WORKS;

					} else {

						p_peitab -> pt_rx_start = P_NIL;
						p_peitab -> pt_state   &= ~PT_RX_WORKS;
					}

				}

				p_peitab -> pt_rx_frame = 0;

				break;

			case PT_MD_FULL_TRANSP:     /* full transparent mode                  */
										/* in full transparent mode               */
										/* registers XAD1 and XAD2 must be 0xFF ! */

				if (p_peitab -> pt_rx_start) {    /* release receive frame pointer    */
												  /* and deallocate the frame buffer  */

					Free_buffer (Buffer_a_from_a_start_data (p_peitab -> pt_rx_start - p_peitab -> pt_rx_offset));
					p_peitab -> pt_rx_start = P_NIL;
				}

				Wr_hscx (p_peitab -> pt_r_xad1, 0xFF);
				Wr_hscx (p_peitab -> pt_r_xad2, 0xFF);
				Wr_hscx (p_peitab -> pt_r_sap2, 0xFF);

				mode_reg |= (MODE_MDS1 | MODE_MDS0 | MODE_ADM);

				p_peitab -> pt_rec_state = 0;
				break;

			default:
				Wr_hscx (p_peitab -> pt_r_mask, 0x00);
				return;
		}

		p_peitab -> pt_op_mode = mode;  /* store the value of MODE */

			/* initialize the HSCX by setting DEFAULT */
			/* values                                 */

		Wr_hscx (p_peitab -> pt_r_xbch, 0x00);      /* disable DMA, NRM, CAS */

		Wr_hscx (p_peitab -> pt_r_rlcr, 0x00);      /* disable receive lenght check feature   */

			/*
				Open drain outputs,
				interframe time fill FLAGS (automode)
				or IDLE  (full transp.),
				clock mode 5  ( timeslot op. mode ).
			*/

		ccr1 = Rd_hscx (p_peitab -> pt_r_ccr1);

		if (p_peitab -> pt_op_mode == PT_MD_FULL_TRANSP) {
			Wr_hscx (p_peitab -> pt_r_ccr1, (ccr1 & 0x85) | 0x05);

		} else {

			Wr_hscx (p_peitab -> pt_r_ccr1, ccr1 | CCR1_ITF | 0x05);
		}

		Wr_hscx (p_peitab -> pt_r_mode, mode_reg);  /* program MODE register */

		if (p_peitab -> pt_op_mode == PT_MD_FULL_TRANSP) {  /* reset HSCX if FULL TRANSPARENT */
			p_peitab -> pt_state   |= PT_HDLC_RESET;
			hscx_exec_cmdr (p_peitab, (uchar)(CMDR_RMC | CMDR_RHR | CMDR_XRES));
		}

		/* Enable interrupt */

	Wr_hscx (p_peitab -> pt_r_mask, 0x00);
}

/***************************************************************************
 *                                                                         *
 *    Function: hscx_loop ()                                               *
 *    Parms   : on: = 1  test loop TRUE     ,  = FALSE test loop off       *
 *    Purpose : switches an HSCX channel into testloop                     *
 *                                                                         *
 *    Return Value                                                         *
 *                1 = successfully switched                                *
 *                0 = failed;                                              *
 *                                                                         *
 ***************************************************************************/

int hscx_loop (p_peitab, on)
   register struct peitab   FAR *p_peitab;
   int                          on;
{
   int                          size, slot;

   if (on) {                                    /* TEST LOOP ON                     */

	  if (p_peitab -> pt_state & PT_LOOP) {     /* Loop already switched            */
		 return (OK);
	  }

			/* set the TLP bit in register MODE */

	  Wr_hscx (p_peitab -> pt_r_mode, Rd_hscx (p_peitab -> pt_r_mode) | MODE_TLP);

		/* if the HSCX is operating in      */
		/* clock mode 5 (timeslot system)   */
		/* transmit and receive timeslots   */
		/* must be identical                */

	  if ((Rd_hscx (p_peitab -> pt_r_ccr1) & 0x07) == 0x05) {
		 slot = p_peitab -> pt_txass_slot;
		 size = p_peitab -> pt_txass_size;

		 if (size == 0) {              /* no previous assignment !         */
									   /* use default values               */
			size = 8;
			slot = 7;

			if (p_peitab -> pt_state & PT_DEV_AT_SLD) {

					/* channel A to B1 at SLD           */
					/* channel B to B2 at SLD           */

			   slot = ((p_peitab -> pt_pei & 0xC0) == 0x40) ? 32 : (32 + 8);
			}

		 }

			/* assign the HSCX receive and      */
			/* transmit timeslots without       */
			/* storing these values ('FALSE')   */

		 hscx_assign_ts (p_peitab, PH_B_TX, slot, size, FALSE);
		 hscx_assign_ts (p_peitab, PH_B_RX, slot, size, FALSE);
	  }

	  p_peitab -> pt_state |= PT_LOOP;

	  return (OK);
   }

		/* TEST LOOP OFF                    */

   if (!(p_peitab -> pt_state & PT_LOOP)) {
	  return (OK);
   }

   p_peitab -> pt_state &= ~PT_LOOP;

		/* reset TLP bit in MODE            */

   Wr_hscx (p_peitab -> pt_r_mode, Rd_hscx (p_peitab -> pt_r_mode) & ~MODE_TLP);

		/* Restore the original values of   */
		/* TX and RX timeslots if the HSCX  */
		/* is operating in clock mode 5     */
		/* (the values have been store in   */
		/* the corresponding PEITAB table   */
		/* entry)                           */

   if ((Rd_hscx (p_peitab -> pt_r_ccr1) & 0x07) == 0x05) {
	  hscx_assign_ts (p_peitab, PH_B_TX, p_peitab -> pt_txass_slot, p_peitab -> pt_txass_size, TRUE);
	  hscx_assign_ts (p_peitab, PH_B_RX, p_peitab -> pt_rxass_slot, p_peitab -> pt_rxass_size, TRUE);
   }

   return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: hscx_assign_ts (p_peitab, dir, slot, size, ass_store)      *
 *    Parms   :                                                            *
 *             'p_peitab' pointer to corresponding entry of the PEITAB     *
 *             'dir' direction   1 = assignment for transmit direction     *
 *                               2 = assignment for receive  direction     *
 *             'slot' start timeslot   (# of clock cycles after the        *
 *                                        frame synch. signal )            *
 *             'size' size of the timeslot window                          *
 *             'ass_store'  TRUE  = store the values for timeslot and size *
 *                          FALSE = do not store values                    *
 *                                                                         *
 *    Purpose : assign the HSCX to timeslots (clock mode 5)                *
 *                                                                         *
 *    NOTE: The HSCX gets POWER UP if the timeslot size 'size' is > 0      *
 *                                                                         *
 ***************************************************************************/

void hscx_assign_ts (p_peitab, dir, slot, size, ass_store)
   register struct peitab   FAR *p_peitab;
			uint        		 dir;
			uint				 slot;
			uint				 size;
			uint				 ass_store;
{

   if (ass_store) {

	  if (dir == PH_B_TX) {
		 p_peitab -> pt_txass_slot = slot;
		 p_peitab -> pt_txass_size = size;

	  } else {

		 p_peitab -> pt_rxass_slot = slot;
		 p_peitab -> pt_rxass_size = size;
	  }

	}

		/* assignment with size 0 is        */
		/* interpreted as request to power  */
		/* down the HSCX                    */

   if ( ! size) {

		/* No power down because B channel manages A Interrupts */

#	  if 0
		Wr_hscx (p_peitab -> pt_r_ccr1, Rd_hscx (p_peitab -> pt_r_ccr1) & ~CCR1_PU);
#	  endif

	  return;
   }

   if (dir == PH_B_TX) {               /* program timeslot for transmit    */
									   /* direction                        */
	  Wr_hscx (p_peitab -> pt_r_tsax, (uchar) (slot >> 1));

	  if (slot & 0x01) {
		 Wr_hscx (p_peitab -> pt_r_ccr2, Rd_hscx (p_peitab -> pt_r_ccr2) | CCR2_XCS0 | 0x08);

	  } else {

		 Wr_hscx (p_peitab -> pt_r_ccr2, (Rd_hscx (p_peitab -> pt_r_ccr2) | 0x08) & ~CCR2_XCS0);
	  }

	  Wr_hscx (p_peitab -> pt_r_xccr, (uchar) (size - 1));
	  Wr_hscx (p_peitab -> pt_r_ccr1, Rd_hscx (p_peitab -> pt_r_ccr1) | CCR1_PU);

   } else if (dir == PH_B_RX) {       /* program the receive timeslot     */

	  Wr_hscx (p_peitab -> pt_r_tsar, (uchar) (slot >> 1));

	  if (slot & 0x01) {
		 Wr_hscx (p_peitab -> pt_r_ccr2, Rd_hscx (p_peitab -> pt_r_ccr2) | CCR2_RCS0);

	  } else {

		 Wr_hscx (p_peitab -> pt_r_ccr2, Rd_hscx (p_peitab -> pt_r_ccr2) & ~CCR2_RCS0);
	  }

	  Wr_hscx (p_peitab -> pt_r_rccr, (uchar) (size - 1));
	  Wr_hscx (p_peitab -> pt_r_ccr1, Rd_hscx (p_peitab -> pt_r_ccr1) | CCR1_PU);
   }

}

/***************************************************************************
 *                                                                         *
 *    Function:   hscx_send_frame ()                                       *
 *    Parms   :   counter (cnt), pointer (frame) to a memory area with a   *
 *                data frame to be sent                                    *
 *                                                                         *
 *    purpose :   Initiate transmission of HDLC frames ( S, U, I, UI )     *
 *                'frame'.
 *                                                                         *
 ***************************************************************************/

#if ASSERT == ON
	extern	long ph_tx_byte_counter;
	extern	long ph_tx_frame_counter;
#endif

uchar hscx_send_frame (p_peitab, cnt, p_frame)
	register	struct peitab   FAR *p_peitab;
				ushort               cnt;
				uchar           FAR *p_frame;
{
				uchar               cmd;

		/* last transfer not finished yet   */
		/* this way is not allowed in clear */
		/* B channel operating mode         */


	if (p_peitab -> pt_state & PT_TX_WORKS) {
		return (NOK);
	}

#   if ASSERT == ON

		if (p_peitab -> pt_op_mode == PT_MD_FULL_TRANSP) {
			Trap (TRAP_TX_MODE_ERROR, "hscx_send_frame");
		}

		if (cnt == 0) {
			Trap (TRAP_TX_CNT_ERROR, "hscx_send_frame");
		}

			/* Update transmit counters */

		ph_tx_byte_counter += cnt + 3;
		ph_tx_frame_counter++;

#   endif

		/* data can not be written into the */
		/* XFIFO (XFW = 0); XFIFO blocked.  */

   if (!(Rd_hscx (p_peitab -> pt_r_star) & 0x40)) {
	  return (NOK);
   }
		/* mark the HDLC controller as      */
		/* working in transmit direction    */

   p_peitab -> pt_state   |= PT_TX_WORKS;

   p_peitab -> pt_tx_start = p_frame;          /* start pointer to the data frame  */

		/* Now output the data bytes to the */
		/* controller's XFIFO               */

   if ((p_peitab -> pt_tx_cnt = cnt) > XFIFO_SIZE)  {
		cnt = XFIFO_SIZE;
   }

   String_out ((char FAR *)p_frame, p_peitab -> pt_r_fifo, cnt);

   p_peitab -> pt_tx_cnt  -= cnt;

		/* Prepare command */

   cmd = CMDR_XTF;

			/* when the frame fits completely   */
			/* into the XFIFO the XME command   */
			/* must be given                    */

   if ( ! (p_peitab -> pt_tx_cnt)) {
	  cmd |= CMDR_XME;

   } else {

	   p_peitab -> pt_tx_curr  = p_frame + cnt;
   }

   hscx_exec_cmdr (p_peitab, cmd);    			/* now output the command byte to   */
											/* the CMDR register                */
   Read_register ();

   return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: hscx_reset ()                                              *
 *    Parms   : p_peitab                                                   *
 *    purpose : reset HDLC controller addressed with 'p_peitab'            *
 *                                                                         *
 ***************************************************************************/

void hscx_reset (p_peitab)
   register struct peitab   FAR *p_peitab;
{

	Wr_hscx (p_peitab -> pt_r_mask, (uchar) ~(ISTA_ICA | ISTA_EXA));

		/* reset transmitter */

	p_peitab -> pt_tx_cnt = 0;
	p_peitab -> pt_state &= ~PT_TX_WORKS;

	if (p_peitab -> pt_op_mode != PT_MD_FULL_TRANSP) {

		if (p_peitab -> pt_rx_start) {    /* release receive frame pointer    */
										  /* and deallocate the frame buffer  */

			Free_buffer (Buffer_a_from_a_start_data (p_peitab -> pt_rx_start - p_peitab -> pt_rx_offset));
			p_peitab -> pt_rx_start = P_NIL;
		}

	}

	p_peitab -> pt_state    &= ~PT_RX_WORKS;
	p_peitab -> pt_rec_state = 0;

		/* set PT_HDLC_RESET flag to        */
		/* 'controller reset' condition     */
		/* immediately after the reset      */
		/* command a XPR interrupt is       */
		/* generated which can be           */
		/* interpreted correctly with this  */
		/* flag                             */

	p_peitab -> pt_state |= PT_HDLC_RESET;

		/* the reset commands:              */
		/* - receive message complete (RME) */
		/* - reset hdlc receiver      (RHR) */
		/* - transmitter reset        (XRES)*/

	hscx_exec_cmdr (p_peitab, (uchar)(CMDR_RMC | CMDR_RHR | CMDR_XRES));

	Wr_hscx (p_peitab -> pt_r_mask, 0);         /* now allow all interrupts again   */
}

/*-------------------------------------------------------------------------*/

void hscx_reset_tx_channel (p_peitab)
   register struct peitab   FAR *p_peitab;
{

	Wr_hscx (p_peitab -> pt_r_mask, (uchar) ~(ISTA_ICA | ISTA_EXA));

	p_peitab -> pt_tx_cnt    = 0;
	p_peitab -> pt_state    &= ~PT_TX_WORKS;

		/* set PT_HDLC_RESET flag to        */
		/* 'controller reset' condition     */
		/* immediately after the reset      */
		/* command a XPR interrupt is       */
		/* generated which can be           */
		/* interpreted correctly with this  */
		/* flag                             */

	p_peitab -> pt_state |= PT_HDLC_RESET;

		/* Transmit continuous IDLE now */

	Wr_hscx (p_peitab -> pt_r_ccr1, (Rd_hscx (p_peitab -> pt_r_ccr1) & ~CCR1_ITF));

		/* the reset commands:              */
		/* - transmitter reset        (XRES)*/

	hscx_exec_cmdr (p_peitab, (uchar)(CMDR_XRES));


	Wr_hscx (p_peitab -> pt_r_mask, 0); /* now allow all interrupts again   */
}

/***************************************************************************
 *                                                                         *
 *    Function: hscx_stop ()                                               *
 *    Parms   : p_peitab                                                   *
 *    purpose : stop HDLC controller addressed with 'p_peitab'             *
 *                                                                         *
 ***************************************************************************/

void hscx_stop (p_peitab)
   register struct peitab   FAR *p_peitab;
{

		/* Transmit continuous IDLE now */

	Wr_hscx (p_peitab -> pt_r_ccr1, (Rd_hscx (p_peitab -> pt_r_ccr1) & ~CCR1_ITF));

		/* Reset */

	hscx_reset (p_peitab);
}

/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            hscx_exec_cmdr - implements the execution of a CMDR for
				SIEMENS HSCX.

Usage           void falc_exec_cmdr (struct falc FAR *p_falc, uchar cmdr);
						- p_peitab 	: Context pointer
						- cmdr      : cmdr value.

common constants and declarations : falc.h

common objects : hscx context pointer.

*---------------------------------------------------------------------------*/

void hscx_exec_cmdr (p_peitab, cmd)
   register struct peitab   FAR *p_peitab;
   uchar						 cmd;
{
	long						 i;

		/* Wait previous execution if necessary (at least 2.5 ms) */
		/* and than execute command */


	for (i = 0;
		 ((i < PH_B_CMD_LOOP_MAX) && ((Rd_hscx (p_peitab -> pt_r_star) & STAR_CEC)));
		 i++
		);

		/* Write the command now */

	Wr_hscx (p_peitab -> pt_r_cmdr, cmd);
}


/*EOF*/
