
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mph_it.c
 *
 * $Revision$
 *
 * $Date$
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens IEC-Q V5.1 Driver                        |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_MPH_IT

#include "ph_d.h"

#if PH_D_U == ON

	extern struct 	PI_tab FAR *FAR *p_tab_PI_tab;	/* Monitor channel pointer table and C/I context table of SCC */
	extern  struct  mph_d_na    FAR *p_mph_d_na;

#	if PH_D_AUDIT == ON
#		define   Read_register 											\
		Mph_d_u_br_r(U_MOR_R) 	= Rd_iec (p_PI_tab -> pt_r_mox);		\
		Mph_d_u_br_r(U_DRU_R) 	= Rd_iec (p_PI_tab -> pt_r_dxu);		\
		Mph_d_u_br_r(U_RB1U_R) 	= Rd_iec (p_PI_tab -> pt_r_xb1u);		\
		Mph_d_u_br_r(U_RB2U_R) 	= Rd_iec (p_PI_tab -> pt_r_xb2u);		\
		Mph_d_u_br_r(U_MOSR_R) 	= Rd_iec (p_PI_tab -> pt_r_mocr)
#	else

#		define Read_register
#	endif

#	define Mph_d_it_send_to_mph_d(p_msg, code)	\
	L_msg_from 	= ENT_MPH_IT;					\
	L_msg_to	= ENT_MPH_D;					\
	L_msg_nai 	= Mph_d_nai;					\
	L_msg_sapi	= SAPI_NIL;						\
	L_msg_chani	= 0; 			     			\
	L_msg_code 	= code;							\
	Send_message (p_msg)

#	if ASSERT == ON
		uint			  it_mph_d_nb;		/* channel D it counter */
#	endif

#if PH_D_MODE == MODE_IT

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             iec_it - implements the interrupt service routine
				 of a SIEMENS monitor channel interrupt or a C/I interrupt.

Usage            void iec_it (uchar PI_tab_id)
					- PI_tab_id = PI ID (index in IT table).

common constants and declarations  psb21910.h

common : SCC channel context.

*--------------------------------------------------------------------------*/

void iec_it (PI_tab_id)
	uchar				PI_tab_id;         /* Device Identification */
{
	struct PI_tab 		FAR *p_PI_tab;		/* PI context pointer */
	struct message 		FAR *p_msg;     	/* current message pointer */

		/* Load the PI context pointer */

	if ((p_PI_tab = p_tab_PI_tab [PI_tab_id]) == P_NIL) {
		return;
	}

#	if PH_D_AUDIT == ON
/*		Read_register; */
#	endif

	Mph_d_u_br_r(U_ISTA_R) = Rd_iec(p_PI_tab -> pt_r_ista);

	if (Mph_d_u_br_r(U_ISTA_R) & U_ISTA_R_MDR_IT) {

			/* Get a message from the message IT stack */

		It_get_msg (p_msg);

		if (p_msg != P_NIL) {

				/* Init the message header */

			L_msg_header_init;

			if (rd_mon (p_PI_tab, (uchar FAR *)&(L_msg_inf0), INF_SIZE) == OK) {

				L_msg_data_size = INF_SIZE;

					/*
						Send the received frame to MPH_D
						entity for processing.
					*/

				Mph_d_it_send_to_mph_d (p_msg, PH_D_IT_RCV_IN);
			}

#			if ASSERT == ON
				it_mph_d_nb++;
#			endif

		} else {

				/* Ignored */
		}
	}

	if (Mph_d_u_br_r(U_ISTA_R) & U_ISTA_R_CICU_IT) {

		It_get_msg (p_msg);

		if (p_msg != P_NIL) {

				/* Init the message header */

			L_msg_header_init;

				/* Load the CI code in the message */
#			if PH_D_AUDIT == ON
				Mph_d_u_br_r(U_CIRU_R) = Rd_iec(p_PI_tab -> pt_r_cixu);
				L_msg_inf0 		= Get_field(Mph_d_u_br_r(U_CIRU_R), U_CIRU_R_CI);
#			else
				L_msg_inf0 		= Get_field(Rd_iec(p_PI_tab -> pt_r_cixu), U_CIRU_R_CI);
#			endif
			L_msg_data_size = INF_SIZE;

				/*
					Send the received frame to MPH_D
					entity for processing.
				*/

			Mph_d_it_send_to_mph_d (p_msg, PH_D_IT_EVENT_IN);

#			if ASSERT == ON
				it_mph_d_nb++;
#			endif

		} else {

				/* Ignored */
		}
	}

	if (Mph_d_u_br_r(U_ISTA_R) & U_ISTA_R_CICI_IT) {

		Mph_d_u_br_r(U_CIRI_R) 	= Rd_iec (p_PI_tab -> pt_r_cixi);
	}
}

#endif

#if PH_D_MODE == MODE_TIMER

/************************************************************************/
/*                                                                      */
/*      MODULE NAME:    iec_status()                                    */
/*                                                                      */
/*      DESCRIPTION:    This routine reports any ISTA state       		*/
/*                      changes.  Interrupts should be masked during    */
/*                      this routine.                                   */
/*                                                                      */
/*      SYNTAX:         void FAR iec_status()                           */
/*                                                                      */
/*      INPUTS:         None                                            */
/*                                                                      */
/*      OUTPUTS:        None                                            */
/*                                                                      */
/*      RETURN CODES:   None                                            */
/*                                                                      */
/*      CALLED ROUTINES:        None                                    */
/*                                                                      */
/************************************************************************/

void iec_status (p_PI_tab)
	register	struct PI_tab		FAR	*p_PI_tab;				/* Current DSC context */
{
	struct message 		FAR *p_msg;     	/* current message pointer */
	uchar					 old_state;			/* previous state */

	It_disable ();

			/* Already inside an interrupt routine ? */

		if (p_PI_tab -> it_flag == ON) {

				/*
					YES - do nothing to avoid cascaded IT
					(exclusive access under IT)
				*/

			It_enable (); 

			return;
		}

		p_PI_tab -> it_flag = ON;

	It_enable ();

		/* Load previous state --> old_state */

	old_state = p_PI_tab -> old_ista_state;

	Mph_d_u_br_r(U_ISTA_R) = Rd_iec(p_PI_tab -> pt_r_ista);

	if ((Mph_d_u_br_r(U_ISTA_R) & U_ISTA_R_MDR_IT) != (old_state & U_ISTA_R_MDR_IT)) {

#if 0
			/* Get a message from the message IT stack */

		It_get_msg (p_msg);

		if (p_msg != P_NIL) {

				/* Init the message header */

			L_msg_header_init;

			if (rd_mon (p_PI_tab, (uchar FAR *)&(L_msg_inf0), INF_SIZE) == OK) {

				L_msg_data_size = INF_SIZE;

					/*
						Send the received frame to MPH_D
						entity for processing.
					*/

				Mph_d_it_send_to_mph_d (p_msg, PH_D_IT_RCV_IN);
			}

#			if ASSERT == ON
				it_mph_d_nb++;
#			endif

		} else {

				/* Ignored */
		}
#endif
	}

	if ((Mph_d_u_br_r(U_ISTA_R) & U_ISTA_R_CICU_IT) != (old_state & U_ISTA_R_CICU_IT)) {


		It_get_msg (p_msg);

		if (p_msg != P_NIL) {

				/* Init the message header */

			L_msg_header_init;

				/* Load the CI code in the message */
#			if PH_D_AUDIT == ON
				Mph_d_u_br_r(U_CIRU_R) = Rd_iec(p_PI_tab -> pt_r_cixu);
				L_msg_inf0 		= Get_field(Mph_d_u_br_r(U_CIRU_R), U_CIRU_R_CI);
#			else
				L_msg_inf0 		= Get_field(Rd_iec(p_PI_tab -> pt_r_cixu), U_CIRU_R_CI);
#			endif
			L_msg_data_size = INF_SIZE;

				/*
					Send the received frame to MPH_D
					entity for processing.
				*/

			Mph_d_it_send_to_mph_d (p_msg, PH_D_IT_EVENT_IN);

#			if ASSERT == ON
				it_mph_d_nb++;
#			endif

		} else {

				/* Ignored */
		}
	}

	if (Mph_d_u_br_r(U_ISTA_R) & U_ISTA_R_CICI_IT) {


		Mph_d_u_br_r(U_CIRI_R) 	= Rd_iec (p_PI_tab -> pt_r_cixi);
	}

	p_PI_tab -> old_ista_state = Mph_d_u_br_r(U_ISTA_R);

	It_disable ();

		p_PI_tab -> it_flag =	OFF;

	It_enable ();


}   /*  End of iec_status() */

#endif  /* end of #if PH_D_MODE == MODE_TIMER */


#endif

/*EOF*/

