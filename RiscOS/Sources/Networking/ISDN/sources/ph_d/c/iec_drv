
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - iec_drv.c
 *
 * $Revision$
 *
 * $Date$
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens IEC-Q V5.1 Driver                        |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_MPH

   /* Include Files
          =============  */

#include "ph_d.h"

#if PH_D_U == ON

                        /* MPH context pointer */

        extern  struct mph_d_na   FAR                                   *p_mph_d_na;            /* MPH D NA pointer */


   /* Variables
          =========   */

/*****************************************************************************
 *                                                                               *
 *    Function: iec_init_PI_tab ()                                               *
 *    Parms   : *p_PI_tab   pointer to a PI_tab table entry to be initialized*
 *              base  address of detected IEC-Q                                  *
 *    purpose : initialize the PEITAB table entry for an IEC-Q                   *
 *                                                                               *
 *****************************************************************************/

void iec_init_PI_tab (p_PI_tab, base, delta)
        register struct PI_tab          FAR     *p_PI_tab;
                        IO_PORT                         base;
                        uchar                                   delta;
{
                        uchar                           version;

        p_PI_tab -> pt_io_base  = base;                                 /* base address                  */

                /* store the register IO addresses  */
                /* for ISTA, MASK, etc.      */

        p_PI_tab -> pt_r_ista   = base + U_ISTA_R*delta;
        p_PI_tab -> pt_r_mask   = base + U_MASK_W*delta;
        p_PI_tab -> pt_r_stcr   = base + U_STCR_W*delta;
        p_PI_tab -> pt_r_mox    = base + U_MOR_R*delta;     /* MOX (w)  MOR (r) registers       */
        p_PI_tab -> pt_r_dxu    = base + U_DRU_R*delta;         /* DWU (w) Write D to U register        */
                                                                                                                 /* DRU (r) Read D from U register      */
        p_PI_tab -> pt_r_adf2   = base + U_ADF2_W*delta;    /* add. feature register 2                  */

        p_PI_tab -> pt_r_xb1u   = base + U_RB1U_R*delta;        /* WB1U (w) Write B1 to U register      */
                                                                                                                 /* RB1U (r) Read B1 from U register    */

        p_PI_tab -> pt_r_xb2u   = base + U_RB2U_R*delta;    /* WB2U (w) Write B2 to U register  */
                                                                                                                 /* RB2U (r) Read B2 from U register    */

        p_PI_tab -> pt_r_xb1i   = base + U_RB1I_R*delta;        /* WB1I (w) Write B1 to IOM-2 register  */
                                                                                                                 /* RB1I (r) Read B1 from IOM-2 register        */

        p_PI_tab -> pt_r_xb2i   = base + U_RB2I_R*delta;    /* WB2I (w) Write B2 to IOM-2 register      */
                                                                                                                 /* RB2I (r) Read B2 from IOM-2 register        */

        p_PI_tab -> pt_r_mocr   = base + U_MOSR_R*delta;        /* monitor control (w), status (r)  */

        p_PI_tab -> pt_r_dxi    = base + U_DRI_R*delta;         /* DWI (w) Write D to IOM-2 register    */
                                                                                                                 /* DRI (r) Read D from IOM-2 register  */

        p_PI_tab -> pt_r_cixu   = base + U_CIRU_R*delta;        /* CIWU (w)  CIRU (r) registers     */

        p_PI_tab -> pt_r_cixi   = base + U_CIRI_R*delta;        /* CIWI (w)  CIRI (r) registers     */

        p_PI_tab -> pt_r_adf    = base + U_ADF_W*delta;         /* add. feature register                */

        p_PI_tab -> pt_r_swst   = base + U_SWST_W*delta;        /* Switch Status Register                       */

}

/***************************************************************************
 *                                                                         *
 *    Function: iec_init ()                                                *
 *                                                                         *
 *    Parms   : PI_tab pointer, mode of operation                          *
 *                                                                             *
 *    purpose : initialize the IEC for correct operation with                      *
 *              the IEC at the IOM2 interface and reset the IEC            *
 *                                                                         *
 ***************************************************************************/

int iec_init (p_PI_tab, mode_type)
   register struct      PI_tab  FAR     *p_PI_tab;                      /* PEITAB pointer */
                        uchar                           mode_type;                      /* mode of operation */

{
                        uchar               r_mode;

                /* initialize : all interrupts masked */

        It_mask_2091(0xFF);

                /* initialize : Monitor channel inactive */

        Mph_d_u_br_w(U_MOCR_W) = 0;

        Wr_iec (p_PI_tab -> pt_r_adf, Sfi (U_ADF_W_PCL, p_PI_tab -> pcl) |
                                                                  ((p_PI_tab -> uvd == ON) ? U_ADF_W_UVD : 0) |
                                                                  ((p_PI_tab -> bcl == ON) ? U_ADF_W_BCL : 0));

        It_unmask_2091(U_MASK_W_CICU_IT);

                /* Reset the component */

        Wr_iec (p_PI_tab -> pt_r_cixu, U_CI_NT_RQ_RES);

        if (p_PI_tab -> pt_state & PT_IOM2) {            /* IOM 2 mode ?                     */

                        /* set Monitor channel access to mode 2 */

                Wr_iec(p_PI_tab -> pt_r_swst, (U_SWST_W_MON | U_SWST_W_CI));

                switch (mode_type) {

                        case PT_MM_LT_S:
                        case PT_MM_LT_T         :
#                               if  PH_D_EOC == OFF
                                        Wr_iec (p_PI_tab -> pt_r_stcr,  (U_STCR_W_LT | U_STCR_TM_NORMAL | U_STCR_AUTO_MODE));
#                               else
                                        Wr_iec (p_PI_tab -> pt_r_stcr,  (U_STCR_W_LT | U_STCR_TM_NORMAL));
#                               endif
                                break;

                        case PT_MM_TE           :
#                               if  PH_D_EOC == OFF
                                        Wr_iec (p_PI_tab -> pt_r_stcr,  U_STCR_TM_NORMAL | Sfi(U_STCR_W_TS, 2) | U_STCR_AUTO_MODE);
#                               else
                                       Wr_iec (p_PI_tab -> pt_r_stcr,  U_STCR_TM_NORMAL | Sfi(U_STCR_W_TS, 2) );
#                               endif
                                break;
                }

                if (p_PI_tab -> iom_ods == 0) {

                  Wr_iec(p_PI_tab -> pt_r_adf2, (U_ADF2_W_MIN | U_ADF2_W_DOD | U_ADF2_MTO_DISABLE));    /* IOM2 mode and opend drain      */

                } else {

                  Wr_iec(p_PI_tab -> pt_r_adf2, U_ADF2_W_MIN | U_ADF2_MTO_DISABLE);                                     /* IOM2 mode and tristate         */
                }

        }  else {

                Wr_iec(p_PI_tab -> pt_r_swst, (U_SWST_W_MON));

                        /* set Monitor channel access to mode 1 */

                if (p_PI_tab -> iom_ods == 0) {

                  Wr_iec(p_PI_tab -> pt_r_adf2, (U_ADF2_W_TE1 | U_ADF2_W_DOD | U_ADF2_MTO_DISABLE));    /* IOM1 mode and opend drain      */

                } else {

                  Wr_iec(p_PI_tab -> pt_r_adf2, (U_ADF2_W_TE1 | U_ADF2_MTO_DISABLE));                                   /* IOM1 mode and tristate         */
                }

        }

#       if PH_D_WA_2 == ON
                /* WA : toggle MOCR.MER bit */

                Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) &= (~U_MOCR_W_MRE)));
#       endif

                /* set control bits MRC and MXC to 1 (temporarily internally controlled) */

        Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) |= (U_MOCR_W_MRC | U_MOCR_W_MXC | U_MOCR_W_MRE | U_MOCR_W_MXE)));

        It_unmask_2091(U_MASK_W_MDR_IT | U_MASK_W_MDA_IT | U_MASK_W_CICU_IT);

		return (OK);

}

#endif /* if PH_D_U == ON */

/*EOF*/
