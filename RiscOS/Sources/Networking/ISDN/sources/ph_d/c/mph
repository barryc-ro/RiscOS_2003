
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mph.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         mph_d - implements the PHysical Management entity in ISDN-BRICKS
 *         when using SIEMENS ISAC-S chip.
 *
 *         mph_d_config - implements the configuration and initialization
 *         of the physical layer entities.
 *
 *         mph_d_retransmit_event - implements the retansmission of a
 *         received event to another entity.
 *
 *         mph_d_send_report_to_sm - implements the transmission of a
 *		   report message to the system management entity.
 *
 *         mph_d_net_sequencer - implements the I.430 sequencer
 *         state machine (Figure 5 network side).
 *
 *		   mph_d_var_init - init of MPH_D entity's global variables.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_MPH

#include "ph_d.h"

CONST   char    mph_d_copyright[]   = "Copyright (c) 1990 - 1996 by OMNITEL SA - All Rights Reserved";
CONST   char    mph_d_licence[]     = LICENSE_NBER;

			/* Common variables */

		Entity_common           (mph_d);                /* MPH D entity common variables */
		struct  node        FAR *p_mph_d_top_node;
		struct  mph_d_na    FAR *p_mph_d_na;

#       if OPTIMIZATION == SPEED
			struct mph_d_na FAR *FAR *p_mph_d_na_tab;   /* NA index table */
#       endif

#		if PH_D_U == ON
			   /* MPH timer event ID */

			CONST_ARRAY	uchar MPH_TI_EV_ID [] = {

#	         	if (EQUIPMENT != TE)
					TI_101,
					TI_102,
#				endif

				TI_103,
				TI_104,

#				if PH_D_WA_1 == ON
				   TI_198,
#				endif

#				if PH_D_POWER_S == ON
				   TI_105,
#				endif

#				if (PH_D_MODE == MODE_TIMER)
					TI_999
#				endif

			};

			struct PI_tab 		FAR *FAR 	*p_tab_PI_tab;			/* Monitor channel pointer table and C/I context table of SCC */
#		endif

		uchar					layer1_init_flag;		/* layer 1 init flag */

/*-------------------------------------------------------------------------*/

						/* Local function declarations */

#if NEW_FCT_STYLE == ON
	uchar   mph_d_config                    (struct ph_d_config FAR *p_ph_d_config);
	void    mph_d_retransmit_event          (ent_id_t to, code_t code);
	void    mph_d_switch_b_chan             (uchar FAR *p_data);
	void    mph_d_net_sequencer             (code_t code);
	void 	mph_d_send_report_to_sm 		(code_t code);

#else

	uchar   mph_d_config                    ();
	void    mph_d_retransmit_event          ();
	void    mph_d_switch_b_chan             ();
	void    mph_d_net_sequencer             ();
	void 	mph_d_send_report_to_sm 		();
#endif

#if PH_D_MODE == MODE_TIMER

#	if NEW_FCT_STYLE == ON
		extern void iec_status (struct PI_tab 		FAR *p_PI_tab);

#	else

		extern void iec_status	();
#	endif

	void (* p_iec_status) ();

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            mph_d - implements the PHysical Management entity when using
					  SIEMENS ISAC-S chip.

Usage           uchar mph_d (struct message FAR *p_msg);
						- p_msg : message to process.

Return value :  returns = OK
						= NOK

common constants and declarations : ph.h

common objects : p_rcv_msg, p_snd_msg, p_buffer pointers.

*--------------------------------------------------------------------------*/

uchar mph_d (p_msg)
	struct message      FAR *p_msg;         /* pointer on received message */
{
	uchar               FAR *p_data;        /* pointer on first received data */
	struct  ph_d_config FAR *p_ph_d_config; /* configuration data structure */

#if RESET_CONFIG == ON
	struct  mph_d_na    FAR *p_na_prior;    /* NA prior pointer */
#endif

	code_t				     code;			/* primitive code */
	nai_t					 nai;			/* Nai */
	ent_id_t				 from;			/* From entity ID */

		/* Set the MPH entity current pointers */

	p_rcv_msg = p_msg;
	p_buffer  = R_msg_p_buffer;
	p_snd_msg = P_NIL;
	event_id  = EV_NIL;

	nai       = R_msg_nai;
	from	  = R_msg_from;
	code	  = event_id  = R_msg_code;

		/* Access to received data */

	p_data = R_a_data;

		/* Dispatcher : from entity */

	switch (from) {

			/*--------------- FROM SYSTEM MANAGEMENT ENTITY ----------------*/

		case ENT_SM :

			/* Dispatcher : from incoming event */

			switch (code) {

					/* Set configuration and init hardware */

				case SM_SET_CONFIG_RQ :
					p_ph_d_config = (struct ph_d_config FAR *) R_a_data;
					Ph_d_config_ret_code = ret_code = mph_d_config (p_ph_d_config);

					if (ret_code != OK) {

							/* Confirm init from PH to SM */

						mph_d_retransmit_event (ENT_SM, SM_SET_CONFIG_CO);

					} else {

							/* Transmit set_config request message to PH D entity */

						mph_d_retransmit_event (ENT_PH_D, MPH_SET_CONFIG_RQ);
					}

						/* Free the remaining messages if necessary */

					Free_msg (p_rcv_msg);
					Free_msg (p_snd_msg);
					return (ret_code);

				case SM_STOP_RQ :

					if (mph_d_access_nai (nai) == OK) {
						mph_d_retransmit_event (ENT_PH_D, MPH_STOP_RQ);
					}
					break;

					/* Reset configuration request */

#				if RESET_CONFIG == ON

					case SM_RESET_CONFIG_RQ :
						mph_d_retransmit_event (ENT_PH_D, MPH_RESET_CONFIG_RQ);
						break;

#				endif

					/*
						DLCI address management :

							- inf0 : code : DL_TEI_ASIGNMENT or DL_TEI_REMOVE
							- inf1 : SAPI
							- inf2 : TEI
					*/

#               if PH_FRAME_ADD_RECOGNITION == ON

					case SM_DL_DLCI_RQ :

						if (mph_d_access_nai (nai) == OK) {
							mph_d_retransmit_event (ENT_PH_D, MPH_DL_DLCI_RQ);
						}
						break;

#               endif

#               if EQUIPMENT == NT2

						/* Deactivation request from System Management */

					case MPH_DEA_RQ :

						switch (Mph_d_fct) {

							case FG_NT_TE :
							mph_d_net_sequencer (MPH_DR);
							break;
					}

#               endif

					/* Information request */

				case SM_INFO_RQ :
					mph_d_retransmit_event (ENT_PH_D, MPH_INFO_RQ);
					break;

			}
			break;

			/*------------------- FROM PH_D ENTITY -----------------*/

		case ENT_PH_D :

			switch (code) {

					/* Stop confirm */

				case MPH_STOP_CO :
					if (mph_d_access_nai (R_msg_nai) == OK) {
						mph_d_retransmit_event (ENT_SM, SM_STOP_CO);
					}
					goto mph_d_exit;

					/* PH_D init confirmation received ? */

				case MPH_SET_CONFIG_CO :
					mph_d_retransmit_event (ENT_SM, SM_SET_CONFIG_CO);
					layer1_init_flag = ON;
					goto mph_d_exit;

#			  if RESET_CONFIG == ON

				case MPH_RESET_CONFIG_CO :

						/* Access to the MPH NA object */

					p_na_prior = P_NIL;

					for (mph_d_access_first_na (); p_mph_d_na != P_NIL; mph_d_access_next_na ()) {

						if (Mph_d_nai == nai) {

#							if OPTIMIZATION == SPEED
								p_mph_d_na_tab[nai]   = P_NIL;
#							endif

								/* Update the NA link */

							if (p_na_prior == P_NIL) {
								p_mph_d_top_node = (((struct node FAR *)p_mph_d_na) - 1) -> p_next;

							} else {

								(((struct node FAR *)p_na_prior) - 1) -> p_next =  (((struct node FAR *)p_mph_d_na) - 1) -> p_next;
							}

								/* Free the NA memory block and exit */

							Mem_free ((char FAR *)Mph_d_p_mem_blk, PID_VL);
							break;
						}

						p_na_prior = p_mph_d_na;

					}

						/* send back a confirm to SM */

					Confirm_ret_code = OK;
					mph_d_retransmit_event (ENT_SM, SM_RESET_CONFIG_CO);
					goto mph_d_exit;

#			  endif

#				if PH_D_U == ON

						/* Activation requested */

					case MPH_AR :

						if (mph_d_access_nai (R_msg_nai) == OK) {

								/* Process the U event */

							mph_d_state_machine (EV_PH_AR);
						}
						break;
#				endif
						/* Information confirm */

				case MPH_INFO_CO :
					mph_d_retransmit_event 		(ENT_SM, SM_INFO_CO);
					goto mph_d_exit;

							/* Device confirm */

				case MPH_B_DEVICE_CO :

					if (Entity_in_system (Ph_device_rq_entity_id) == ON) {
						mph_d_retransmit_event	(Ph_device_rq_entity_id, MPH_B_DEVICE_CO);
					}
					break;

#				if PH_D_AUDIT == ON

					case MPH_B_DEVICE_RQ :
						Ph_device_rq_entity_id = from;	/* requestor entity ID */
						mph_d_retransmit_event	(ENT_PH_D, MPH_B_DEVICE_RQ);
						break;

#				endif

			}

			if (mph_d_access_nai (nai) == OK) {

					/* Dispatcher : from incoming event */

				switch (code) {

						/*  Activation/Deactivation */

					case MPH_AI     :

#           	        if EQUIPMENT == NT2

							switch (Mph_d_fct) {

									/* User side */

								case FG_TE_NET :
								case FG_TE_NT  :
								case FG_NT_NET :
									break;

									/* Network side */

								case FG_NT_TE :
									mph_d_net_sequencer (code);
									break;
							}

#           	        endif

						mph_d_retransmit_event (Mph_d_ent_mdl, MPH_AI);

							/* Report to SM entity */

						Mph_report_to_sm (code);
						break;

					case MPH_DI     :

#           	        if EQUIPMENT == NT2

							switch (Mph_d_fct) {

									/* User side */

								case FG_TE_NET :
								case FG_TE_NT  :
								case FG_NT_NET :
									break;

									/* Network side */

								case FG_NT_TE :
									mph_d_net_sequencer (code);
									break;
							}

#           	        endif

						mph_d_retransmit_event (Mph_d_ent_mdl, MPH_DI);

							/* Report to SM entity */

						Mph_report_to_sm (code);
						break;

						/* Error/Information events */

					case MPH_EI1    :
					case MPH_EI2    :

#        	           if EQUIPMENT == NT2

							switch (Mph_d_fct) {

									/* User side */

								case FG_TE_NET :
								case FG_TE_NT  :
								case FG_NT_NET :
									break;

									/* Network side */

								case FG_NT_TE :
									mph_d_net_sequencer (code);
									break;
							}

#               	    endif

							/* Report to SM entity */

						Mph_report_to_sm (code);
						break;

						/* Line connected */

					case MPH_II_C   :
						mph_d_retransmit_event (ENT_SM, SM_NA_POWER_ON_IN);

							/* Report to SM entity */

						Mph_report_to_sm (code);
						break;

						/* Line disconnected */

					case MPH_II_D   :
						mph_d_retransmit_event (ENT_SM, SM_NA_POWER_OFF_IN);

							/* Report to SM entity */

						Mph_report_to_sm (code);
						break;

				}

			} else {

				if (((code == MPH_II_C) || (code == MPH_II_D)) && (layer1_init_flag == OFF))  {

						/* wait for end of configuration of PH_D entity:  */
						/* put the message in receive queue */

					Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;

				}
			}
			break;

			/*------------------------ FROM MDL ----------------------------*/

		case ENT_MDL :

				/* Dispatcher : event code */

			switch (code) {

				case MPH_AR :
					mph_d_retransmit_event 		(ENT_PH_D, MPH_AR);
					break;

			}

			break;

#if		PH_D_U == ON
				/*------------ From MPH_D interrupt pseudo entity ---------------*/

			case ENT_MPH_IT :

					/* Set context pointer */

				if (mph_d_access_nai (R_msg_nai) == OK) {

						/* Dispatcher : event code */

					switch (event_id) {

							/* U Power changed PS1 and PS2 */

						case PH_D_IT_STATUS_IN :
							if (R_msg_data_size == INF_SIZE) {
								Mph_d_nt_ps = R_msg_inf0;

								switch (Mph_d_transceiver_mode) {

#									if (EQUIPMENT == TE)

										case U_TE :
											mph_d_nt_ps_u_te ();
											break;

#									endif

#									if (EQUIPMENT == NT1) || (EQUIPMENT == NT1_PLUS)

										case U_NT :
											mph_d_nt_ps_u_nt ();
											break;

#									endif

								}

							}
							break;

							/* Monitor message transmitted */

						case PH_D_IT_XMIT_IN :
							break;

							/* Monitor message received */

						case PH_D_IT_RCV_IN :

							switch (Mph_d_transceiver_mode) {

#								if (EQUIPMENT == TE)

									case U_TE :
										mph_d_rx_mc_u_te (p_data);
										break;

#								endif

#								if (EQUIPMENT == NT2) || (EQUIPMENT == LE)

									case U_LT :
										mph_d_rx_mc_u_te (p_data);
										break;

#								endif


							}
							break;

								/* C/I indication received */

						case PH_D_IT_EVENT_IN :

							if (R_msg_data_size == INF_SIZE) {

									/* Execute I.430 state machine for extra events */

#               	        	if (EQUIPMENT != TE)

									switch (Mph_d_fg) {

										case FG_TE_NT 	:
										case FG_TE_NET 	:

#											if PH_D_POWER_S == ON

												if (Mph_d_power_s == ON) {

													switch (R_msg_inf0) {

														case EV_LOSS_OF_POWER :
															Start_timer (T105);
															break;

														case EV_DETECTION_OF_POWER :

															if (State_timer (T105) == ON) {
																Stop_timer (T105);

															}
															break;

														default :
															break;

													}

												} else {

													mph_d_state_machine (mph_d_convert (R_msg_inf0));
												}

#											else

												mph_d_state_machine (mph_d_convert (R_msg_inf0));
#											endif

											break;

#			               	        	if (EQUIPMENT == NT1) || (EQUIPMENT == NT1_PLUS)

											case FG_NT_NET :    /* U side : NT --> LT */
												mph_d_state_machine (EV_NIL);
												break;

#										endif

									}

#          		     	        else

									mph_d_state_machine (mph_d_convert (R_msg_inf0));

#                    		  	endif

							}
							break;

					}

				}
				break;
#		endif /* if	PH_D_U == ON */

			/*----------------------- FROM TIMER ENTITY --------------------*/

		case ENT_TI :

			if (mph_d_access_nai (nai) == OK) {

#				if	PH_D_U == ON
						/* Dispatcher : event code */

					switch (R_msg_code) {

							/* Activation timer */

						case TI_103 :

							if (Valid_time_out (T103)) {
								State_timer (T103) 	= OFF;
								mph_d_state_machine (EV_TI_103);
							}
							break;

							/* Permanent Deactivation timer */

						case TI_104 :

							if (Valid_time_out (T104)) {
								State_timer (T104) 	= OFF;
								mph_d_state_machine (EV_TI_104);
							}
							break;


#						if PH_D_WA_1 == ON

								/* T198 Work around 1 timer expiry */

							case TI_198 :

								if (Valid_time_out (T198)) {
									State_timer (T198) = OFF;
									mph_d_state_machine (EV_TI_198);
								}
								break;

#						endif

					}
#				endif

			}
			break;

			/*---------- FROM UPPER LAYER (CALL CONTROL) ENTITY ------------*/

		default :

			if (mph_d_access_nai (nai) == OK) {

				if (Mph_d_ent_up == from) {

					switch (code) {

							/* Set strobe bit and Connect B channel */

						case MPH_B_SWITCH_RQ :

#							if PH_D_U == ON
								if ((Mph_d_transceiver_mode == U_NT) ||
									(Mph_d_transceiver_mode == U_TE) ||
									(Mph_d_transceiver_mode == U_LT)) {
									if (Mph_b_switch_mode == B_MODE_LOOP_BACK_ON) {

											/* B channel loopback ON */

										mph_d_b_chan_loopback_4 (Mph_b_switch_chan_id, ON);

									} else if (Mph_b_switch_mode == B_MODE_LOOP_BACK_OFF) {

											/* B channel loopback OFF */

										if ((Mph_b_switch_chan_id == B1_CHANNEL) || (Mph_b_switch_chan_id == B2_CHANNEL)) {

												/* B channel loopback OFF */

											mph_d_b_chan_loopback_4 (Mph_b_switch_chan_id, OFF);

										}

									} else {

										mph_d_b_switch ((struct mph_b_switch FAR *)p_data);
									}
									break;

								} else {
#							endif
								/* Load SAPI and CHANI */

							R_msg_sapi  = PH_SAPI_B;
							R_msg_chani = Mph_b_switch_chan_id;

								/* Send to PH D */

							R_msg_from  = ENT_MPH;
							R_msg_to    = ENT_PH_D;

							Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;
							break;
#							if PH_D_U == ON
								}
#							endif

							/* Init or stop B channel */

						case MPH_B_INIT_RQ :
						case MPH_B_STOP_RQ :

							if ((Mph_b_activation_mode == B_MODE_DATA_HDLC) ||
								(Mph_b_activation_mode == B_MODE_DATA_V110) ||
								(Mph_b_activation_mode == B_MODE_DATA_TRANSPARENT)) {

								if (Entity_in_system (ENT_MPH_B)) {

										/* Load SAPI and CHANI */

									R_msg_sapi  = PH_SAPI_B;
									R_msg_chani = Mph_b_activation_chan_id;

										/* send to MPH B */

									R_msg_from  = ENT_MPH;
									R_msg_to    = ENT_MPH_B;

									Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;
								}

							} else if (Mph_b_activation_mode == B_MODE_AUDIO) {

									/* Transmit to the Modem driver if any */

								if (Entity_in_system (ENT_MPH_GSTN)) {
									mph_d_retransmit_event	(ENT_MPH_GSTN, code);
								}

							}
							break;

							/* Unknown primitive code */

						default :
							break;
					}

				}

#				if PH_D_U == ON
					 else if (Mph_d_ent_mdl == from) {

								   /* FROM MDL for activation request */

							   switch (R_msg_code) {

									   /* Activation request */

								   case MPH_AR :
									   mph_d_state_machine (EV_PH_AR);
									   break;
							   }

						  }
#				else

					switch (code) {

							/* Device request */

						case MPH_B_DEVICE_RQ :

								/* Codec management : supported by PH_D entity */

							Ph_device_rq_entity_id =  from;	/* requestor entity ID */

							mph_d_retransmit_event	(ENT_PH_D, MPH_B_DEVICE_RQ);
							break;

							/* Deactivation Request */

						case MPH_DEA_RQ :
							mph_d_retransmit_event	(ENT_PH_D, MPH_DEA_RQ);
							break;
					}
#				endif

			}
			break;

	}

mph_d_exit:

		/* Free the remaining messages if necessary */

	Free_msg (p_rcv_msg);
	Free_msg (p_snd_msg);

		/* Message and buffer stacks management (update) */

	It_stack_mgt ();

		/* Return */

	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_config - implements the configuration and initialization
				 of the physical layer entities.

Usage            uchar mph_d_config (p_ph_d_config);
					 - p_ph_d_config : pointer on the ph_d_config data structure


Description      mph_d_config implements :

Return value    return code = OK  init done,
							= NOK error - init not done.

common constants and declarations  ph.h

common : entity common pointers

*--------------------------------------------------------------------------*/

uchar mph_d_config (p_ph_d_config)
	struct  ph_d_config     FAR *p_ph_d_config;     /* configuration data structure */
{
	struct ph_d_na_config   FAR *p_ph_d_na_config;  /* configuration data structure */
	short                       i;                  /* current index */
#	if PH_D_U == ON
		struct PI_tab				FAR *p_PI_tab;
#	endif

		/* NA_NB validity */

	if (Ph_d_config_na_nb > PH_D_CONFIG_MX_NA) {
		return (NOK);
	}

		/* Build the object tree structures */

	if (mph_d_build_object (p_ph_d_config) == NOK) {
		return (PH_D_CFG_ERR_BUILD_OBJECT + ret_code);
	}
		/* For each NAI */

	for (i = 0; i < Ph_d_config_na_nb; i++) {

			/* Initialize message and buffer stacks management */

		It_stack_mgt ();

		p_ph_d_na_config = Ph_d_config_a_na (i);

		if (mph_d_access_nai (Ph_d_config_nai) == NOK) {
			return (PH_D_CFG_ERR_ACCESS_NA);
		}

		Mph_d_fct   	= Ph_d_config_fct;
		Mph_d_state 	= MPH_D_INFO_TRF_NOT_AVAILABLE;
		Mph_d_ent_mdl	= (Ph_d_config_ent_mdl == 0) ? ENT_MDL : Ph_d_config_ent_mdl;
		Mph_d_ent_up	= (Ph_d_config_ent_up  == 0) ? ENT_CC  : Ph_d_config_ent_up;

#		if PH_D_U == ON

			p_PI_tab = Mph_d_a_PI_tab;

			if ((Mph_d_layer1 = Ph_d_config_layer1) == PH_IEC) {

				Mph_d_transceiver_mode      = U_TE;				/* by default */

				Mph_d_device_id				= Ph_d_config_iec_id;

					/* Force the TE I.430 state machine in F1 or F2 */

				switch (Mph_d_transceiver_mode) {

#					if (EQUIPMENT == TE)

						case U_TE :
							Mph_d_state = F2;
							break;

#					endif


				}

				if (Ph_d_config_tem_pfs != PT_ADF1_TM) { /* test mode for U_X functionality necessary */

					return(NOK);
				}

				mph_d_reset_image_reg_u (p_mph_d_na);

					/* Setup the D chip for C/I channel processing and
						Monitor channel handling through Processor Interface */

					/* Set interrupt relay */

					/* Connect IT : load IT access table */

					/* IT already connected ? */

				if (p_tab_PI_tab [Mph_d_device_id] != P_NIL) {
					return (NOK);
				}

					/* Connect IT : load IT access table */

				p_tab_PI_tab [Mph_d_device_id] = p_PI_tab;

					/* Module mode */

				switch (Mph_d_fct = Ph_d_config_fct) {

					case FG_TE_NT 	:
					case FG_TE_NET 	:
						p_PI_tab -> pt_ModulMode = PT_MM_TE;
						break;

#					if EQUIPMENT == NT2

						case FG_NT_NET 	:
							p_PI_tab -> pt_ModulMode = PT_MM_LT_T;
							break;

						case FG_NT_TE :
							p_PI_tab -> pt_ModulMode = PT_MM_LT_S;
							break;

#					endif

					default :
						 return (NOK);

				}

					/* Set bus mode */

				switch (Ph_d_config_bus_mode) {

					case PH_IOM1 :
						p_PI_tab -> pt_state = PT_DEV_AT_SLD;
						break;

					case PH_IOM2 :
						p_PI_tab -> pt_state = PT_IOM2;
						break;

					default :
								return (NOK);
				}
					/* Init IT mask in PITAB */

				p_PI_tab -> it_mask    	= Ph_d_config_iec_it_mask;

				p_PI_tab -> pcl			= Ph_d_config_pcl;
				p_PI_tab -> iom_ods		= Ph_d_config_iom_ods;
				p_PI_tab -> uvd			= Ph_d_config_uvd;
				p_PI_tab -> bcl			= Ph_d_config_bcl;

				p_PI_tab -> it_flag		= OFF;

					/* Init Processor Interface of IEC-Q */

				iec_init_PI_tab (p_PI_tab, (IO_PORT)Ph_d_config_iec_base_add, Ph_d_config_iec_delta_add);

						/* Start the transceiver */

				mph_d_reinit ();

					/* Timer T103 : Deactivation timer */

				Ti_val (T103)	= Set_default (Ph_d_config_ti_103, PH_D_T103_I);
				Ti_state (T103)	= OFF;

				if ((Ti_id (T103) = Timer_alloc (ENT_MPH, Mph_d_nai, PH_SAPI_MPH, PH_CHANI_NIL)) == P_NIL) {
					return (NOK);
				}

						/* Timer T104 : Permanent deactivation timer */

				Ti_val (T104)	= Set_default (Ph_d_config_ti_104, PH_D_T104_I);
				Ti_state (T104)	= OFF;

				if ((Ti_id (T104) = Timer_alloc (ENT_MPH, Mph_d_nai, PH_SAPI_MPH, PH_CHANI_NIL)) == P_NIL) {
					return (NOK);
				}

#				if PH_D_POWER_S == ON

					switch (Mph_d_transceiver_mode) {

#					if (EQUIPMENT == TE)
						case U_TE 		:
							Mph_d_power_s = OFF;
							break;
#					endif

#					if (EQUIPMENT == LE)
						case U_LT 		:
							Mph_d_power_s = OFF;
							break;
#					endif

							Mph_d_power_s = Ph_d_config_power_s;
							break;

					}

					if (Mph_d_power_s == ON) {

							/* Timer T105 : Permanent loss of power timer */

						Ti_val (T105)	= PH_D_T105_I;
						Ti_state (T105)	= OFF;

						if ((Ti_id (T105) = Timer_alloc (ENT_MPH, Mph_d_nai, PH_SAPI_MPH, PH_CHANI_NIL)) == P_NIL) {
							return (NOK);
						}

					}

#				endif

#				if PH_D_WA_1 == ON				/* SIEMENS Workaround 1 to avoid "Lost framing" event upon receipt of INFO_0 in F6 */

						/* Timer T198 : to avoid "Lost framing" event upon receipt of INFO_0 in F6 */

					Ti_val (T198)   = PH_D_T198_I;
					Ti_state (T198) = OFF;

					if ((Ti_id (T198) = Timer_alloc (ENT_MPH, Mph_d_nai, PH_SAPI_MPH, PH_CHANI_NIL)) == P_NIL) {
						return (NOK);
					}

#				endif

#				if PH_D_MODE == MODE_TIMER
						/* Timer T999 : LIU scheduling TO */

					Ti_val (T999)   = PH_D_T999_I;
					Ti_state (T999) = OFF;

					if ((Ti_id (T999) = Timer_alloc (ENT_MPH, Mph_d_nai, PH_SAPI_MPH, PH_CHANI_NIL)) == P_NIL) {
						return (NOK);
					}
#				endif
					/* Loop back B1 and B2 at configuration time */

				if (Ph_d_config_chan_loop_back == ON) {
						/* B channel loopback ON */

					mph_d_b_chan_loopback_4 (1, ON);
					mph_d_b_chan_loopback_4 (2, ON);

				}
#				if PH_D_MODE == MODE_TIMER

					p_iec_status = (void (FAR *)())iec_status;

						/* Start poll timer */
					Periodic_timer_start (Ti_id (T999), Ti_val (T999), p_iec_status, (ulong)p_PI_tab);

#				endif
			} else {

				Mph_d_transceiver_mode = ST_TE;	/* by default */
			}
#		else

			Mph_d_transceiver_mode = ST_TE;	/* by default */

#		endif /* if PH_D_U == ON */
	}
		/* Return */

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_retransmit_event - implements the retransmission of a
				 received message to another entity with another primitive
				 code.

Usage            uchar mph_d_retransmit_event (entity_t to, code_t code)
					- to    : destination entity,
					- code  : primitive code.

Return value    return code = OK  LLD received the information
							= NOK LLD did not ack. the information

common constants and declarations  ph.h

common : message/buffer pointers.

*--------------------------------------------------------------------------*/

void mph_d_retransmit_event (to, code)
	ent_id_t    to;     /* destination entity */
	code_t      code;   /* primitive code */
{

	if (p_rcv_msg != P_NIL) {

			/* Address */

		R_msg_from  = ENT_MPH;          /* origination entity ID */
		R_msg_to    = to;               /* destination entity ID */

		R_msg_sapi  = PH_SAPI_MPH;      /* MPH SAPI */
		R_msg_chani = PH_CHANI_D;       /* D channel */

			/* Event ID */

		R_msg_code  = code;

			/* Send the message */

		Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;
	}

}

#if PH_REPORTING_TO_SM == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_send_report_to_sm - implements the transmission of a
				 report message to the system management entity.

Usage            uchar mph_d_send_report_to_sm (code_t code)
					- code  : primitive code.


common constants and declarations  ph.h

common : message/buffer pointers.

*--------------------------------------------------------------------------*/

void mph_d_send_report_to_sm (code)
	code_t				code;		/* cause of the report */
{
	uchar			FAR *p_data;	/* data pointer */
	struct message	FAR *p_msg;    	/* current snd message pointer */
	struct buffer	FAR *p_buff;	/* current bufer pointer */

	p_msg 	= P_NIL;
	p_data	= P_NIL;
	p_buff 	= P_NIL;

	Prepare_data_to_send (p_msg, p_buff, Mph_d_report_size, p_data);

	if (p_data != P_NIL) {

			/* Load the data */

		Mph_d_report_entity_origination	= ENT_MPH;
		Mph_d_report_report_type		= REPORT_TYPE_ERROR;

		Mph_d_report_na_type			= BRI;
		Mph_d_report_na_fct				= Mph_d_fct;
		Mph_d_report_cause				= code;
		Mph_d_report_state				= Mph_d_state;

			/* Send the message to the SM entity */

		L_msg_from	= ENT_MPH;
		L_msg_to	= ENT_SM;

		L_msg_nai	= Mph_d_nai;
		L_msg_sapi	= PH_SAPI_D;
		L_msg_add	= PH_CHANI_D;

		L_msg_code	= SM_REPORT_IN;

		Send_message (p_msg);
	}

}

#endif

#if EQUIPMENT == NT2

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_net_sequencer - implements the I.430 sequencer
				 state machine (Figure 5 network side).

Usage            uchar mph_d_net_sequencer (code)
					- code  : primitive code.

common constants and declarations :  ph.h

common : Mph_d context.

*--------------------------------------------------------------------------*/

void mph_d_net_sequencer (code)
	code_t  code;
{

		/* Switch according to the line state */

	switch (Mph_d_state) {

			/* Information transfer not available */

		case MPH_D_INFO_TRF_NOT_AVAILABLE :

			switch (code) {

				case MPH_AI :
					Mph_d_state = MPH_D_INFO_TRF_AVAILABLE;
					break;
			}

			break;

			/* Information transfer interrupted */

		case MPH_D_INFO_TRF_INTERRUPTED :

			switch (code) {

				case MPH_DR :
					mph_d_retransmit_event (ENT_PH_D, MPH_DR);
					Mph_d_state = MPH_D_INFO_TRF_NOT_AVAILABLE;
					break;

				case MPH_AI :
					Mph_d_state = MPH_D_INFO_TRF_AVAILABLE;
					break;

			}

			break;

			/* Information transfer available */

		case MPH_D_INFO_TRF_AVAILABLE :

			switch (code) {

				case MPH_DR :
					Mph_d_state = MPH_D_INFO_TRF_NOT_AVAILABLE;
					break;

				case MPH_AI :
				case MPH_DI :
					Mph_d_state = MPH_D_INFO_TRF_INTERRUPTED;
					break;
			}

			break;

	}

}

#endif

#if PH_D_U == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_convert - implements the convertion of a
				 IOM-2 indication coming from the U transceiver in TE mode.

Usage            void uchar mph_d_convert (event)
						event = transceiver reported event.

common constants and declarations  ph.h,

common : mph_d current context.

*--------------------------------------------------------------------------*/

uchar mph_d_convert (event)
	uchar	event;
{
		/* Switch according to the tranceiver used */

	switch (Mph_d_transceiver_mode) {

#		if (EQUIPMENT == TE)

			case U_TE :

					/* Convert the U event */

				return (mph_d_convert_u_te (event));
#		endif

	}

	return (EV_NIL);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_state_machine - implements activation/deactivation
				 state machine.

Usage            uchar mph_d_state_machine (uchar event)
					- event : indication received from the component.

common constants and declarations  ph.h

common : MPH na context.

*--------------------------------------------------------------------------*/

void mph_d_state_machine (event)
	uchar	event;
{
		/* Switch according to the tranceiver used */

	switch (Mph_d_transceiver_mode) {

#		if (EQUIPMENT == TE)

			case U_TE :

					/* Process the U event */

				mph_d_te_state_machine_u_te (event);
				break;

#		endif

#		if (EQUIPMENT == NT1_PLUS) || (EQUIPMENT == NT1)

			case U_NT :
				mph_d_nt1_state_machine_u_nt (event);
				break;

#		endif

#		if (EQUIPMENT == NT2) || (EQUIPMENT == LE)

			case U_LT :
				mph_d_lt_state_machine_u_lt (event);
				break;

#		endif

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_b_switch - implements the switching of a B
				 channel to a device port.

Usage            uchar mph_d_b_switch (p_data)
					p_data : pointer on the switch structure.

common constants and declarations  ph.h

common : mph d current context

*--------------------------------------------------------------------------*/

uchar mph_d_b_switch (p_data)
	struct mph_b_switch 	FAR *p_data;
{

	add_t						chan_id;
	uchar						mode;

	chan_id = Mph_b_switch_chan_id;
	mode	= Mph_b_switch_mode;

			/* Voice and audio handling */

	if (((mode == B_MODE_VOICE)  ||
		 (mode == B_MODE_AUDIO)
		) &&
		((chan_id == B1_CHANNEL) ||
		 (chan_id == B2_CHANNEL)
		)
	   ) {

		if (Mph_d_state == F7) {


/*			Mph_d_audio_enable (Mph_d_device_id, chan_id); */
		}

	} else {

/*		Mph_d_audio_disable (Mph_d_device_id, chan_id); */
	}


	switch (Mph_d_transceiver_mode) {

#			if (EQUIPMENT == TE)

				case U_TE :

						/* Enable or Disable B channel */

					if (mode != B_MODE_NIL) {
						mph_d_enable_b_u_te (chan_id);

					} else {

						mph_d_disable_b_u_te (chan_id);
					}
					break;

#			endif


#			if (EQUIPMENT == LE)

				case U_LT :
					break;

#			endif
	}

	return (ret_code);
}

void mph_d_send_to_ph_d (code)
	code_t	code;
{
	S_msg_alloc;

	if (p_snd_msg != P_NIL) {
		S_msg_from 	= ENT_MPH;
		S_msg_to	= ENT_PH_D;

		S_msg_nai	= Mph_d_nai;
		S_msg_sapi	= PH_SAPI_D;

		S_msg_chani	= PH_CHANI_D;

		S_msg_code	= code;

		Send_message (p_snd_msg); p_snd_msg = P_NIL;
	}

}

/*--------------------------------------------------------------------------*/

void mph_d_send_to_mdl (code)
	code_t	code;
{
	S_msg_alloc;

	if (p_snd_msg != P_NIL) {
		S_msg_from 	= ENT_MPH;
		S_msg_to	= Mph_d_ent_mdl;

		S_msg_nai	= Mph_d_nai;
		S_msg_sapi	= PH_SAPI_D;
		S_msg_chani	= PH_CHANI_D;

		S_msg_code	= code;

		Send_message (p_snd_msg); p_snd_msg = P_NIL;
	}
}

/*--------------------------------------------------------------------------*/

void mph_d_send_to_sm (code)
	code_t	code;
{
	S_msg_alloc;

	if (p_snd_msg != P_NIL) {

		S_msg_from 	= ENT_MPH;
		S_msg_to	= ENT_SM;

		S_msg_nai	= Mph_d_nai;
		S_msg_sapi	= PH_SAPI_D;
		S_msg_chani	= PH_CHANI_D;

		S_msg_code	= code;

		Send_message (p_snd_msg); p_snd_msg = P_NIL;
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_process_event - implements the processing of an
				 MPH INDICATION event.

Usage            void uchar mph_d_process_event (code)
						code = MPH INDICATION primitive code (CCITT I.430).

common constants and declarations  ph.h

common : mph_d current context.

*--------------------------------------------------------------------------*/

void mph_d_process_event (code)
	code_t	code;
{

	switch (code) {

			/* Line connected */

		case MPH_II_C	:
			mph_d_send_to_sm (SM_NA_POWER_ON_IN);
			break;

			/* Line disconnected */

		case MPH_II_D 	:

				/* Report to SM */

			mph_d_send_to_sm (SM_NA_POWER_OFF_IN);
			break;

			/* Activation indication */

		case MPH_AI :
			mph_d_send_to_mdl 	(MPH_AI);
			break;

			/* Deactivation indication */

		case MPH_DI :
			mph_d_send_to_mdl 	(MPH_DI);
			break;

			/* Error information or recovery from error */

		case MPH_EI1 :
		case MPH_EI2 :
			break;

		default :
			break;
	}

		/* Report to SM */

	Mph_report_to_sm (code);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_b_chan_loopback_4 - implements the programming of B
				 channels loop back according to CCITT loop 4:
						B1 TX = B1 RX or
						B2 TX = B2 RX

Usage            uchar mph_d_b_channel_loopback_4 (chan_id, action)
					- chan_id : channel Id,
					- action  : ON or OFF.

common constants and declarations  ph.h

common : mph d current context

*--------------------------------------------------------------------------*/

uchar mph_d_b_chan_loopback_4 (chan_id, action)
	add_t		chan_id;	/* Channel ID to loopback */
	uchar		action;		/* action : ON or OFF */
{

	switch (Mph_d_transceiver_mode) {
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_reinit - implements the reinitialization of the
				 U interface transceiver in IOM-2 mode.

Usage            void uchar mph_d_reinit ()

common constants and declarations  ph.h

common : mph_d current context.

*--------------------------------------------------------------------------*/

void mph_d_reinit ()
{

	switch (Mph_d_transceiver_mode) {

#		if (EQUIPMENT == TE)

			case U_TE :

					/* Reinit the U interface transceiver */

				mph_d_reinit_u_te ();
				break;

#		endif

#		if (EQUIPMENT == NT1) || (EQUIPMENT == NT1_PLUS)

			case U_NT :

					/* Reinit the U interface transceiver */

				mph_d_reinit_u_nt ();
				break;
#		endif

	}

}

#endif /* #if PH_D_U == ON */


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				mph_d_var_init - init of MPH_D entity's global variables.

Usage            	void mph_d_var_init ();

Return value :		void

*--------------------------------------------------------------------------*/

void mph_d_var_init ()
{
		p_mph_d_top_node 	= P_NIL;    /* Top node pointer */

#		if PH_D_U == ON
			p_tab_PI_tab		= P_NIL;	/* Monitor channel pointer table and C/I context table of SCC */
#		endif

#       if OPTIMIZATION == SPEED
			p_mph_d_na_tab	= P_NIL;   	/* NA index table */
#       endif

		layer1_init_flag = OFF;			/* layer 1 init flag OFF */
}

/*EOF*/
