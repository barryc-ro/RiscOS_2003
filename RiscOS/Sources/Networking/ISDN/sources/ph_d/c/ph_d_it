
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ph_d_it.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *       ph_d_it - implements the PHysical D channel interruption in
 *       ISDN-BRICKS for SIEMENS ISAC-S chip.
 *
 *       isac_event - implements the PH_D_IT entity reception part for
 *       a SIEMENS ISAC-S chip.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_PH_D

#include "ph_d.h"

CONST char  ph_d_it_copyright []= "Copyright (c) 1990 - 1996 by OMNITEL SA - All Rights Reserved";
CONST char  ph_d_it_licence[]   = LICENSE_NBER;

    /* Macro instead of function for performance mainly (IT) */

    /* send a message from PH_D_IT entity to PH_D entity */

#define Ph_d_it_send_to_ph_d(code)  \
    L_msg_from  = ENT_PH_D_IT;      \
    L_msg_to    = ENT_PH_D;         \
    L_msg_nai   = Ph_d_nai;         \
    L_msg_sapi  = PH_SAPI_D;        \
    L_msg_chani = PH_CHANI_D;       \
    L_msg_code  = code;             \
    Send_message (p_msg)

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            isac_event - implements the PH_D_IT entity reception part for
                          an SIEMENS ISAC-S chip. Runs under ISAC-S IT level.

Usage           void isac_event (struct peitab FAR *p_peitab, uchar event_id);
					- p_peitab : PEITAB pointer,
                    - event_id : event to process.

common constants and declarations : ph.h

common objects : p_msg, p_buffer pointers.

*--------------------------------------------------------------------------*/

void isac_event (p_peitab, event_id)
	struct  peitab      FAR *p_peitab;      /* peitab pointer */
    uchar                    event_id;      /* event to process */
{
	struct message      FAR *p_msg;         /* local message pointer */
	struct buffer       FAR *p_buffer;      /* local buffer pointer */
	struct ph_d_na      FAR *p_ph_d_na;     /* channel context */
	it_mask_t                old_mask;      /* IT old mask */
	uchar					 state_new;		/* new PH state */

#	if PH_TX_WATCHDOG_TIMER == ON
		struct message 	FAR *p_msg_2;  		/* current message pointer 2 */
#	endif

			/* Access to the NA context */

	p_ph_d_na   = Ph_d_a_peitab_to_ph_d_na (p_peitab);

			/* Load the parameter block */

	switch (event_id) {

			/* Reset IT */

		case EV_TX_RESET :

			/* Frame transmitted without error or as transmitted */

		case EV_TX_DONE :
		case EV_TX_TO   :

				/* Get the first message of the transmit FIFO */

			It_get_xmt (p_msg, old_mask);

			if (p_msg != P_NIL) {

#				if PH_TX_DONE == ON

#					if PH_TX_WATCHDOG_TIMER == ON

							/* Stop or Restart T199 */

						It_read_first_xmt (L_msg_p_services, old_mask);
#					endif

						 /* Send PH_IT_XMIT_IN to PH D */

					Ph_d_it_send_to_ph_d (PH_IT_XMIT_IN);

						/*
							Restart transmitter if the transmit
							FIFO is not empty.
						*/

					ph_d_start_xmit (ENT_PH_D_IT, p_ph_d_na, STOP);

#				else

						/* Message and buffer shall be released ? */

					if (L_msg_lib == ON) {

								/* Yes - Release the buffer if any */

						if (L_msg_p_buffer != P_NIL) {
							It_free_buffer (L_msg_p_buffer);
							L_msg_p_buffer = P_NIL;
						}

#               	    if PH_TX_WATCHDOG_TIMER == OFF

#							if PH_D_AUDIT == ON

								Ph_d_it_send_to_ph_d (PH_IT_XMIT_IN);

#							else

									/*
										Check the stack current levels
										(message and buffer) according
										to the low and high marks.
									*/

								if (It_stack_in_mark ()) {

										/*
												Current levels inside the low and high mark :
											 - Free the transmitted message and buffer.
										*/

									It_put_msg (p_msg);

								} else {

										/*
											Out of low and high mark :
											   - send the transmitted message to PH_D
												 entity for updating the IT stacks
												 (out of IT level).
										*/

									Ph_d_it_send_to_ph_d (PH_IT_XMIT_IN);
								}

#							endif

#                   	else

							It_read_first_xmt (p_msg_2, old_mask);

								/*
									If Tx FIFO empty
										report to PH in order to stop the T199 timer
									else
										wait for the timer restart message (PH_IT_START_WD_IN)
								*/

							if (p_msg_2 == P_NIL) {

									/* Report to upper layer entity for stopping T199 */

								Ph_d_it_send_to_ph_d (PH_IT_XMIT_IN);

							} else {

									/* Free the transmitted message */

								It_put_msg (p_msg);

							}

#						endif

							/*
								Restart transmitter if the transmit
								FIFO is not empty.
							*/

						ph_d_start_xmit (ENT_PH_D_IT, p_ph_d_na, STOP);

					} else {

							/* Reset the in ph entity mark */

						Msg_reset_in_ph_fifo_mark (p_msg);

#           	   	    if PH_TX_WATCHDOG_TIMER == ON

								/*
									Restart the transmitter and if not
									restarted transmit XMITDONE to PH_D entity.
								*/

							if (ph_d_start_xmit (ENT_PH_D_IT, p_ph_d_na, STOP) == STOP) {
								It_get_msg (p_msg);

								if (p_msg != P_NIL) {
									L_msg_header_init;
									L_msg_lib 		= ON;
									L_msg_p_buffer 	= P_NIL;
									Ph_d_it_send_to_ph_d (PH_IT_XMIT_IN);
								}

							}

#           	  		else

							ph_d_start_xmit (ENT_PH_D_IT, p_ph_d_na, STOP);
#           	       	endif


					}

#          	   	endif

			}

			break;

			/* Frame received */

		case EV_RX_DONE :

				/*
					Frame received without error :
						- get the buffer pointer from PEITAB,
						- reset the rx_start pointer in PEITAB,
						- get data size from PEITAB.
				*/

			if (p_peitab -> pt_rx_start != P_NIL) {
				p_buffer 			= Buffer_a_from_a_start_data (p_peitab -> pt_rx_start);
				Buffer_data_size 	= p_peitab -> pt_rx_cnt;

					/* Get a message from the message IT stack */

				It_get_msg (p_msg);

				if (p_msg != P_NIL) {
					L_msg_header_init;

						/* Link the buffer to the message to sent to PH_D entity */

					L_msg_init_link_buffer;

						/*
							Send the received frame to PH_D
							entity for processing.
						*/

					Ph_d_it_send_to_ph_d (PH_IT_RCV_IN);

				} else {

					It_put_buffer (p_buffer);
				}

			}
			break;

			/* Transmit error ---> retry possible */

		case EV_TX_RETRY :

					/* Restart transmitter and continue the watchdog timer */

			ph_d_start_xmit (ENT_PH_D_IT, p_ph_d_na, CONTINUE);
			break;

			/* Erroneous receive or transmit : statistics only */

		case EV_TX_ERR  :
		case EV_RX_ERR  :
		case EV_ERR_IND :
		case EV_ERR_CLK :

				/* Increment the error counter */

			Ph_d_error_counter++;
			break;

				/* PH line event : Activation / Deactivation */

					/* Event for stable state : never ignored */

		case EV_INFO_0       :
			state_new = F3;
			goto A;

		case EV_INFO_4_8     :
		case EV_INFO_4_10    :
			state_new = F7;

			A:

				/* If the stable state if already set Ignore the event */

			if ( ! ((Ph_d_state_pipe_counter == 0) && (state_new == Ph_d_state))) {

				It_get_msg (p_msg) ;

				if (p_msg != P_NIL) {
					L_msg_header_init;
					L_msg_p_buffer  = P_NIL;

						/* Load the event ID in the message */

					L_msg_inf0      = event_id;
					L_msg_data_size = sizeof (L_msg_inf0);

						/* Send the message to PH_D entity */

					Ph_d_it_send_to_ph_d (PH_IT_EVENT_IN);

						/* Update pipe counter */

					Ph_d_state_pipe_counter++;
				}

			}

			break;

				/* Event for unstable state : ignored if too many in the pipe */

		case EV_INFO_1       :
		case EV_INFO_2       :
		case EV_INFO_3       :
		case EV_LOST_FRAMING :
		case EV_ANY_SIGNAL   :

				/* If too many state changes --> ignored */

			if (Ph_d_state_pipe_counter <= PH_D_MX_STATE_PIPE_LGTH) {

					/*
						Get a message from the IT stack.
						If empty ignore the event.
					*/

				It_get_msg (p_msg) ;

				if (p_msg != P_NIL) {
					L_msg_header_init;
					L_msg_p_buffer  = P_NIL;

						/* Load the event ID in the message */

					L_msg_inf0      = event_id;
					L_msg_data_size = sizeof (L_msg_inf0);

						/* Send the message to PH_D entity */

					Ph_d_it_send_to_ph_d (PH_IT_EVENT_IN);

						/* Update pipe counter */

					Ph_d_state_pipe_counter++;
				}

			}
			break;

		case EV_NIL :
			break;

		default :
			Trap (TRAP_EVENT_UNKNOWN, "ph_d_it");

	}

}

/*------------------------------------------------------------------------*/

#if (PH_TX_WATCHDOG_TIMER == ON) && (PH_TX_DONE == OFF)

void ph_d_start_tx_watchdog_timer (p_ph_d_na, p_msg_xmit)
	struct ph_d_na  FAR *p_ph_d_na;
	struct message  FAR *p_msg_xmit;
{
	struct message  FAR      *p_msg;
	struct message  FAR *FAR *p_data;

	It_get_msg (p_msg);

	if (p_msg != P_NIL) {
		L_msg_header_init;
		L_msg_p_buffer  = P_NIL;

		p_data          = (struct message FAR * FAR *)L_msg_a_start_data;
		*p_data         = p_msg_xmit;
		L_msg_data_size = sizeof (struct message FAR *);

			/* Send to PH_D entity */

		Ph_d_it_send_to_ph_d (PH_IT_START_WD_IN);
	}

}

#endif

/*EOF*/
