
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - arcofisp.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 * 	arcofi_cmd_set_w arcofi_cmd_set_r - load CMDR for read or
 *	write operation in ARCOFI SP.
 *
 *	arcofi_sop_r arcofi_sop_w - read or	write SOP register
 *	in ARCOFI SP.
 *
 *	arcofi_cop_r arcofi_cop_w - read or	write COP array
 *	in ARCOFI SP.
 *
 *	arcofi_init - implements the initialization of a SIEMENS
 *	ARCOFI SP chip.
 *
 * 	arcofi_update - implements the updating of a SIEMENS
 *	ARCOFI SP chip.
 *
 *	arcofi_power - power-up and power-down of a SIEMENS
 *	ARCOFI SP chip.
 *
 * 	arcofi_assign - assign B channel to a SIEMENS
 *	ARCOFI SP chip and set Power-Up.
 *
 * 	arcofi_cmd_set_w arcofi_cmd_set_r - load CMDR for read or
 *	write operation in ARCOFI SP.
 *
 *	arcofi_sop_r arcofi_sop_w - read or	write SOP register
 *	in ARCOFI SP.
 *
 *	arcofi_cop_r arcofi_cop_w - read or	write COP array
 *	in ARCOFI SP.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

   /* Include Files
	  =============  */

#define ENTITY ENT_PH_D

#include "ph_d.h"
#include "arcofi.h"

	External_common;

#if (PH_CODEC == ARCOFI_2163) || (PH_CODEC == ARCOFI_2165) /* { */

static CONST_ARRAY uchar ARCOFI_COP_SIZE [] = {
				CMDR_ADD_COP_0_SIZE ,
				CMDR_ADD_COP_1_SIZE,
				CMDR_ADD_COP_2_SIZE,
				CMDR_ADD_COP_3_SIZE,
				CMDR_ADD_COP_4_SIZE,
				CMDR_ADD_COP_5_SIZE,
				CMDR_ADD_COP_6_SIZE,
				CMDR_ADD_COP_7_SIZE,
				CMDR_ADD_COP_8_SIZE,
				CMDR_ADD_COP_9_SIZE,
				CMDR_ADD_COP_A_SIZE,
				CMDR_ADD_COP_B_SIZE,
				CMDR_ADD_COP_C_SIZE,
				CMDR_ADD_COP_D_SIZE,
				CMDR_ADD_COP_E_SIZE,
				CMDR_ADD_COP_F_SIZE
			};

		   /* Local Functions
			  ===============   */

#if NEW_FCT_STYLE == ON
	uchar 			arcofi_cmdr_set_r 	(struct peitab 	FAR *p_peitab, uchar operation, uchar address);
	uchar 			arcofi_cmdr_set_w 	(struct peitab 	FAR *p_peitab, uchar operation, uchar address);
	uchar 			arcofi_sop_r 		(struct peitab 	FAR *p_peitab, uchar address);
	uchar 			arcofi_sop_w 		(struct peitab 	FAR *p_peitab, uchar address, uchar val);
	uchar 			arcofi_cop_r 		(struct peitab 	FAR *p_peitab, uchar address, uchar	FAR *p_arcofi_value);
	uchar 			arcofi_cop_w 		(struct peitab 	FAR *p_peitab, uchar address, uchar	FAR *p_arcofi_value);
	uchar 			arcofi_read_all 	(struct peitab 	FAR *p_peitab);


#else

	uchar 			arcofi_cmdr_set_r 	();
	uchar 			arcofi_cmdr_set_w 	();
	uchar 			arcofi_sop_r 		();
	uchar 			arcofi_sop_w 		();
	uchar 			arcofi_cop_r 		();
	uchar 			arcofi_cop_w 		();
	uchar 			arcofi_read_all 	();

#endif

#if PH_D_AUDIT == ON
	uchar	reg_sop_init [10]={0,0,0,0,0,0,0,0,0,0};	/* Sequence array */
	uchar	reg_sop_deb  [10]={0,0,0,0,0,0,0,0,0,0};	/* Sequence array */
	uchar	reg_sop_fin  [10]={0,0,0,0,0,0,0,0,0,0};	/* Sequence array */
	uchar	cop_0  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_1  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_2  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_3  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_4  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_5  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_6  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_7  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_8  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_9  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_a  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_b  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_c  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_d  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_e  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
	uchar	cop_f  		 [9] ={0,0,0,0,0,0,0,0,0};		/* Sequence array */
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            arcofi_init - implements the initialization of a SIEMENS
				ARCOFI SP chip.

Usage           uchar arcofi_init (struct peitab FAR *p_peitab, uchar arcofi_id);
						p_peitab		: context pointer,
						arcofi			: ARCOFI address,
						p_arcofi_sop   	: SOP values (<TFCR>...<GCR>)
						p_arcofi_tg1	: Tone genetator 1 : <ON/OFF> <F1>..<GD1>..
						p_arcofi_tg2	: Tone genetator 2 : <ON/OFF> <F2>..<GD2>..
						p_arcofi_tg3	: Tone genetator 3 : <ON/OFF> <F3>..<GD3>..
						p_arcofi_tf		: Tone filter : <ON/OFF> <K>..<GE>
						p_arcofi_cg		: Control Generator : <ON/OFF> <TON>..<TOFF>
						p_arcofi_gain	: Gain : <ON/OFF> <GX>..<GR>...
						p_arcofi_sg		: Sidetone gain : <ON/OFF> <GZ>...
						p_arcofi_cffx	: correction filter FX : <ON/OFF> <FX1>..<FX12>
						p_arcofi_cffr	: correction filter FR : <ON/OFF> <FR1>..<FR12>
						p_arcofi_coefsp	: coefficient for speakerphone : <ON/OFF> <SP1>..<SP32>
						p_arcofi_agc_tx	: AGC Tx : <ON/OFF> <AGCX1>..<AGCX8>
						p_arcofi_agc_rx	: AGC Rx : <ON/OFF> <AGCR1>..<AGCR8>

Return value :  returns = OK
						= NOK

common constants and declarations : ph.h

common objects : p_peitab context pointer.

*--------------------------------------------------------------------------*/

uchar arcofi_init (p_peitab, arcofi_id, p_arcofi_sop, p_arcofi_tg1, p_arcofi_tg2, p_arcofi_tg3, p_arcofi_tf, p_arcofi_cg, p_arcofi_gain, p_arcofi_sg, p_arcofi_cffx, p_arcofi_cffr, p_arcofi_coefsp, p_arcofi_agc_tx, p_arcofi_agc_rx)
	register struct peitab 	FAR *p_peitab;
	uchar						 arcofi_id;
	uchar 					FAR *p_arcofi_sop;
	uchar 					FAR *p_arcofi_tg1;
	uchar 					FAR *p_arcofi_tg2;
	uchar 					FAR *p_arcofi_tg3;
	uchar 					FAR *p_arcofi_tf;
	uchar 					FAR *p_arcofi_cg;
	uchar 					FAR *p_arcofi_gain;
	uchar 					FAR *p_arcofi_sg;
	uchar 					FAR *p_arcofi_cffx;
	uchar 					FAR *p_arcofi_cffr;
	uchar 					FAR *p_arcofi_coefsp;
	uchar 					FAR *p_arcofi_agc_tx;
	uchar 					FAR *p_arcofi_agc_rx;
{
	uchar						 id_code 	[2];
	uchar						 sequence 	[9];

		/* 1 ------ init ARCOFI address and reset--------------*/

	ret_code = 1;

	addr_mon1 (p_peitab, (uchar)(arcofi_id | 1));

#if 0

		/* Software reset */

	sequence [0] = arcofi_cmdr_set_w (p_peitab, CMDR_OP_XOP, CMDR_ADD_XOP_E);

			/* Execute channel monitor command : write XOP */

	wr_mon1 (p_peitab, sequence, CMDR_ADD_XOP_SIZE);

#endif

		/* 2 ------------ Request and read ARCOFI ID ------------*/

	ret_code = 2;

	mon1_ident (p_peitab, (Mon1_addr & Mask_field (IDENT_ADDRESS)), id_code);

	if ((Get_field (id_code [1], IDENT_ID) != IDENT_ID_ARCOFI_SP_2163) &&
		(Get_field (id_code [1], IDENT_ID) != IDENT_ID_ARCOFI_SP_2161)) {
		return (NOK);
	}


		/* 3 ---- init SOP values (<GCR>...<TFCR>) ---------------------*/

	ret_code = 3;

	if (p_arcofi_sop [0] == ON) {
		Memcpy_far ((char FAR *)sequence, (char FAR *)p_arcofi_sop, CMDR_SOP_ALL_SIZE);

		sequence [0] = arcofi_cmdr_set_w (p_peitab, CMDR_OP_SOP, CMDR_ADD_SOP_F_ALL);

		if (wr_mon1 (p_peitab, sequence, CMDR_SOP_ALL_SIZE) == NOK) {
			return (NOK);
		}

		if (arcofi_sop_w (p_peitab, CMDR_ADD_SOP_A_XCR, p_arcofi_sop [9]) == NOK) {
			return (NOK);
		}

	}

		/* 4 ---- init Tone genetator 1 : <ON/OFF> <F1>..<GD1>.. -------*/

	ret_code = 4;

	if (p_arcofi_tg1 [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_0, &p_arcofi_tg1 [1]) == NOK) {
			return (NOK);
		}

	}

		/* 5 ---- Tone genetator 2 : <ON/OFF> <F2>..<GD2>.. ------------*/

	ret_code = 5;

	if (p_arcofi_tg2 [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_1, &p_arcofi_tg2 [1]) == NOK) {
			return (NOK);
		}

	}

		/* 6 ---- Tone genetator 3 : <ON/OFF> <F3>..<GD3>.. ------------*/

	ret_code = 6;

	if (p_arcofi_tg3 [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_2, &p_arcofi_tg3 [1]) == NOK) {
			return (NOK);
		}

	}

		/* 7 ---- Tone filter : <ON/OFF> <K>..<GE> ---------------------*/

	ret_code = 7;

	if (p_arcofi_tf [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_3, &p_arcofi_tf [1]) == NOK) {
			return (NOK);
		}

	}

		/* 8 ---- Control Generator : <ON/OFF> <TON>..<TOFF> -----------*/

	ret_code = 8;

	if (p_arcofi_cg [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_4, &p_arcofi_cg [1]) == NOK) {
			return (NOK);
		}

	}

		/* 9 ---- Transmit and receive gain : <ON/OFF> <GX>..<GR>... ---*/

	ret_code = 9;

	if (p_arcofi_gain [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_5, &p_arcofi_gain [1]) == NOK) {
			return (NOK);
		}


	}

		/* 10 --- Sidetone gain : <ON/OFF> <GZ>... ---------------------*/

	ret_code = 10;

	if (p_arcofi_sg [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_6, &p_arcofi_sg [1]) == NOK) {
			return (NOK);
		}

	}

		/* 11 --- correction filter FX : <ON/OFF> <FX1>..<FX12> --------*/

	ret_code = 11;

	if (p_arcofi_cffx [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_7, &p_arcofi_cffx [1]) == NOK) {
			return (NOK);
		}


		if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_8, sequence) == NOK) {
			return (NOK);
		}


		Memcpy_far ((char FAR *)sequence, (char FAR *)&p_arcofi_cffx [9], 4);

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_8, sequence) == NOK) {
			return (NOK);
		}


	}
		/* 12 --- correction filter FX FR : <ON/OFF> <FR1>..<FR12> -----*/

	ret_code = 12;

	if (p_arcofi_cffr [0] == ON) {

		if (p_arcofi_cffx [0] == ON) {

			if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_8, sequence) == NOK) {
				return (NOK);
			}

		}

		Memcpy_far ((char FAR *)&sequence [4], (char FAR *)&p_arcofi_cffr [1], 4);

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_8, sequence) == NOK) {
			return (NOK);
		}

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_9, &p_arcofi_cffr [5]) == NOK) {
			return (NOK);
		}


	}

		/* 13 --- coefficient for speakerphone : <ON/OFF> <SP1>..<SP32>-*/

	ret_code = 13;

	if (p_arcofi_coefsp [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_A, &p_arcofi_coefsp [1]) == NOK) {
			return (NOK);
		}

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_B, &p_arcofi_coefsp [9]) == NOK) {
			return (NOK);
		}

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_C, &p_arcofi_coefsp [17]) == NOK) {
			return (NOK);
		}

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_D, &p_arcofi_coefsp [25]) == NOK) {
			return (NOK);
		}


	}

		/* 14 --- AGC Tx : <ON/OFF> <AGCX1>..<AGCX8> -------------------*/

	ret_code = 14;

	if (p_arcofi_agc_tx [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_E, &p_arcofi_agc_tx [1]) == NOK) {
			return (NOK);
		}


	}

		/* 15 --- AGC Rx : <ON/OFF> <AGCR1>..<AGCR8> -------------------*/

	ret_code = 15;

	if (p_arcofi_agc_rx [0] == ON) {

		if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_F, &p_arcofi_agc_rx [1]) == NOK) {
			return (NOK);
		}

	}


		/* 16 - INIT PCI CTX value */

	Arcofi_pci_curr_value = G_6 (1,1, 1,1,1,1);

		/* return */

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            arcofi_update - implements the updating of a SIEMENS
				ARCOFI SP chip from a list of requests.

Usage           uchar arcofi_update (struct peitab FAR *p_peitab, uchar FAR *p_data);
						p_peitab		: context pointer,
						p_data			: arcofi structure  pointer

Return value :  returns = OK
						= NOK

common constants and declarations : ph.h

common objects : p_peitab context pointer.

*--------------------------------------------------------------------------*/

uchar arcofi_update (p_peitab, p_data)
	register struct peitab 	FAR *p_peitab;		/* Context pointer */
	uchar					FAR *p_data;		/* Arcofi structure data pointer */
{
	uchar						  sequence [8];	/* Sequence array */
	uint						  i;			/* index */
	uchar						  ret_code;		/* return code */
	uchar					FAR  *p_rq;			/* request pointer */
	uchar					FAR  *p_op;			/* operation pointer */
	uchar						  value;		/* temporary value */

	ret_code = OK;

	for (p_rq = (uchar FAR *)Arcofi_a_first_rq; ; p_rq += Arcofi_rq_next) {

		p_op = Arcofi_a_operation;

		switch (Arcofi_type_operation) {

				/* WRITE SOP ONE REGISTER */

			case ARCOFI_TYPE_SOP_W :
				ret_code = (arcofi_sop_w (p_peitab,
										  Arcofi_sop_address,
										  ((arcofi_sop_r (p_peitab, Arcofi_sop_address) & (~Arcofi_sop_mask)) | (Arcofi_sop_value & Arcofi_sop_mask))
										 )
						   );
				break;

				/* WRITE SOP ALL REGISTERS */

			case ARCOFI_TYPE_SOP_ALL_W :

				if (rd_mon1 (p_peitab, arcofi_cmdr_set_r (p_peitab, CMDR_OP_SOP, CMDR_ADD_SOP_F_ALL), &sequence [1], CMDR_SOP_ALL_SIZE - 1) == NOK) {
					return (NOK);
				}

					/* Update */

				for (i = 1; i < CMDR_SOP_ALL_SIZE; i++) {
					sequence [i] = ((sequence [i] & (~Arcofi_sop_all_mask (i))) | (Arcofi_sop_all_value (i) & (Arcofi_sop_all_mask (i))));
				}
					/* Load Command */

				sequence [0] = arcofi_cmdr_set_w (p_peitab, CMDR_OP_SOP, CMDR_ADD_SOP_F_ALL);

				ret_code = wr_mon1 (p_peitab, sequence, CMDR_SOP_ALL_SIZE);
				break;

				/* WRITE COEFFICIENTS */

			case ARCOFI_TYPE_COP_W :

				switch (Arcofi_cop_id) {

					case ARCOFI_COP_ID_TG1 :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_0, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_TG2 :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_1, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_TG3 :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_2, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_TF :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_3, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_CG :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_4, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_GAIN :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_5, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_SG :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_6, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_FX :

						if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_7, Arcofi_cop_a_value) == NOK) {
							return (NOK);
						}

						if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_8, sequence) == NOK) {
							return (NOK);
						}

						Memcpy_far ((char FAR *)sequence, (char FAR *)&Arcofi_cop_value (8), 4);
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_8, sequence);
						break;

					case ARCOFI_COP_ID_FR :

						if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_8, sequence) == NOK) {
							return (NOK);
						}

						Memcpy_far ((char FAR *)&sequence [4], (char FAR *)Arcofi_cop_a_value, 4);

						if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_8, Arcofi_cop_a_value) == NOK) {
							return (NOK);
						}

						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_9, &Arcofi_cop_value (4));
						break;

					case ARCOFI_COP_ID_SP :

						if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_A, &Arcofi_cop_value (0)) == NOK) {
							return (NOK);
						}

						if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_B, &Arcofi_cop_value (8)) == NOK) {
							return (NOK);
						}

						if (arcofi_cop_w (p_peitab, CMDR_ADD_COP_C, &Arcofi_cop_value (16)) == NOK) {
							return (NOK);
						}

						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_D, &Arcofi_cop_value (24));
						break;

					case ARCOFI_COP_ID_AGC_TX :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_E, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_AGC_RX :
						ret_code = arcofi_cop_w (p_peitab, CMDR_ADD_COP_F, Arcofi_cop_a_value);
						break;
				}

				/* READ SOP ONE REGISTER */

			case ARCOFI_TYPE_SOP_R :
				Arcofi_sop_value =  arcofi_sop_r (p_peitab, Arcofi_sop_address);
				break;

				/* READ SOP ALL REGISTERS */

			case ARCOFI_TYPE_SOP_ALL_R :

				if (rd_mon1 (p_peitab, arcofi_cmdr_set_r (p_peitab, CMDR_OP_SOP, CMDR_ADD_SOP_F_ALL), Arcofi_sop_all_a_value, CMDR_SOP_ALL_SIZE - 1) == NOK) {
					return (NOK);
				}
				break;

				/* Read COEFFICIENTS */

			case ARCOFI_TYPE_COP_R :

				switch (Arcofi_cop_id) {

					case ARCOFI_COP_ID_TG1 :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_0, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_TG2 :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_1, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_TG3 :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_2, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_TF :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_3, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_CG :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_4, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_GAIN :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_5, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_SG :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_6, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_FX :

						if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_7, Arcofi_cop_a_value) == NOK) {
							return (NOK);
						}

						if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_8, sequence) == NOK) {
							return (NOK);
						}

						Memcpy_far ((char FAR *)&Arcofi_cop_value (8), (char FAR *)sequence, 4);
						break;

					case ARCOFI_COP_ID_FR :

						if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_8, sequence) == NOK) {
							return (NOK);
						}

						Memcpy_far ((char FAR *)Arcofi_cop_a_value, (char FAR *)&sequence [4], 4);

						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_9, &Arcofi_cop_value (4));
						break;

					case ARCOFI_COP_ID_SP :

						if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_A, &Arcofi_cop_value (0)) == NOK) {
							return (NOK);
						}

						if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_B, &Arcofi_cop_value (8)) == NOK) {
							return (NOK);
						}

						if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_C, &Arcofi_cop_value (16)) == NOK) {
							return (NOK);
						}

						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_D, &Arcofi_cop_value (24));
						break;

					case ARCOFI_COP_ID_AGC_TX :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_E, Arcofi_cop_a_value);
						break;

					case ARCOFI_COP_ID_AGC_RX :
						ret_code = arcofi_cop_r (p_peitab, CMDR_ADD_COP_F, Arcofi_cop_a_value);
						break;
				}

				/* WRITE EXTENDED OPERATION : XOP */

			case ARCOFI_TYPE_XOP_W :
				arcofi_cmdr_set_w (p_peitab, CMDR_OP_XOP, Arcofi_xop_address);

					/* Execute channel monitor command : write XOP */

				ret_code = wr_mon1 (p_peitab, (uchar FAR *) &Arcofi_cmdr, CMDR_ADD_XOP_SIZE);
				break;

				/* PCI write (SA, SB, SC, SD) */

			case ARCOFI_TYPE_PCI_W :
				value = Arcofi_pci_curr_value;
				Wr_sbc (p_peitab -> pt_r_cix1, ((Arcofi_pci_curr_value = (value & (~Arcofi_pci_mask)) |
												(Arcofi_pci_value & Arcofi_pci_mask)) << 2)
					   );
				break;

				/* PCI read (SA, SB, SC, SD) */

			case ARCOFI_TYPE_PCI_R :
				Arcofi_pci_value 		=
				(Rd_sbc (p_peitab -> pt_r_cix1) & CODX_CI_BITS) >> 2;
				break;
		}

		if (Arcofi_rq_next == ARCOFI_EORQ) {
			break;
		}

	}

#	if PH_D_AUDIT == ON

			/* Read the SOP registers */

		reg_sop_fin [0] = arcofi_cmdr_set_r (p_peitab, CMDR_OP_SOP, CMDR_ADD_SOP_F_ALL);

		if (rd_mon1 (p_peitab, reg_sop_fin [0], &reg_sop_fin [1], CMDR_SOP_ALL_SIZE - 1) == NOK) {
			return (NOK);
		}

#	endif

	return (ret_code);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            arcofi_power - power-up and power-down of a SIEMENS
				ARCOFI SP chip.

Usage           uchar arcofi_power (struct peitab FAR *p_peitab, uchar pu);
						p_peitab	: context pointer,
						pu			= ON 	: Power Up
									= OFF  	: power-down

Return value :  returns = OK
						= NOK

common constants and declarations : ph.h

common objects : p_peitab context pointer.

*--------------------------------------------------------------------------*/

uchar arcofi_power (p_peitab, pu)
	register struct peitab 	FAR *p_peitab;
	uchar						 pu;
{
	uchar						 op;
	uchar						 sequence [2];

		/*
			ON	: Power-Up mode
			OFF	: Power-Down mode
		*/

	if (pu == ON) {
		op = CMDR_ADD_XOP_1;

	} else if (pu == OFF) {

		op = CMDR_ADD_XOP_0;

	} else {

		return (NOK);
	}

	sequence [0] = arcofi_cmdr_set_w (p_peitab, CMDR_OP_XOP, op);

		/* Execute channel monitor command : write XOP */

	return (wr_mon1 (p_peitab, sequence, CMDR_ADD_XOP_SIZE));
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            arcofi_assign - assign B channel to a SIEMENS
				ARCOFI SP chip and set Power-Up.

Usage           uchar arcofi_assign (struct peitab FAR *p_peitab, uchar chani);
						p_peitab	context pointer,
						chani		channel ID or NIL (power-down).

Return value :  returns = OK  - done
						= NOK - error

common constants and declarations : ph.h

common objects : p_peitab context pointer.

*--------------------------------------------------------------------------*/

int arcofi_assign_voice (p_peitab, chani)
	register struct peitab 	FAR *p_peitab;
	uchar              			 chani;
{
	uchar						 gcr;

		/* Return if no there is no CODEC   */

	if (p_peitab -> pt_Codec == NOT_PRESENT) {
		return (FALSE);
	}

#	if PH_D_AUDIT

			/* Read SOP registers */

		reg_sop_deb [0] = arcofi_cmdr_set_r (p_peitab, CMDR_OP_SOP, CMDR_ADD_SOP_F_ALL);

		if (rd_mon1 (p_peitab, reg_sop_deb [0], &reg_sop_deb [1], CMDR_SOP_ALL_SIZE - 1) == NOK) {
			return (NOK);
		}

#	endif

		/*
			Write EVX  = DISABLE (NO_CHANNEL) or ENABLE (B1 or B2) in GCR.
			Write SLOT = channel 0 in GCR.
		*/

	gcr = arcofi_sop_r (p_peitab, CMDR_ADD_SOP_0_GCR);

	if (chani == NO_CHANNEL) {

		gcr = Mf (gcr, GCR_EVX, GCR_EVX_DISABLE);

	} else {

		gcr = Mf (gcr, GCR_EVX, GCR_EVX_ENABLE);
	}

	gcr = Mf (gcr, GCR_SLOT, GCR_SLOT_CHANNEL_0);

	if (arcofi_sop_w (p_peitab, CMDR_ADD_SOP_0_GCR, gcr) == NOK) {
		return (NOK);
	}

		/* Set WRITE NOP in cmdr */

	arcofi_cmdr_set_w (p_peitab, CMDR_OP_XOP, CMDR_ADD_XOP_F);

	switch (chani) {

		case NO_CHANNEL :

# 			if PH_D_CODEC_POWER_DOWN == ON

					/* No B channel assignment -> power down */

				arcofi_power (p_peitab, OFF);
#			endif

			return (OK);

		case B1_CHANNEL :
			Arcofi_cmdr = Mf (Arcofi_cmdr, CMDR_RCM, CMDR_RCM_B1);
			break;

		case B2_CHANNEL :
			Arcofi_cmdr = Mf (Arcofi_cmdr, CMDR_RCM, CMDR_RCM_B2);
			break;

		default :
			return (NOK);
	}

		/* Write CMDR Reverse channel mode */

	if (wr_mon1 (p_peitab, (uchar FAR *) &Arcofi_cmdr, CMDR_ADD_XOP_SIZE) == NOK) {
		return (NOK);
	}

#	if PH_D_CODEC_POWER_UP == ON

			/* Power-Up */

		arcofi_power (p_peitab, ON);
#	endif

#	if PH_D_AUDIT == ON

			/* Read the SOP registers */

		reg_sop_fin [0] = arcofi_cmdr_set_r (p_peitab, CMDR_OP_SOP, CMDR_ADD_SOP_F_ALL);

		if (rd_mon1 (p_peitab, reg_sop_fin [0], &reg_sop_fin [1], CMDR_SOP_ALL_SIZE - 1) == NOK) {
			return (NOK);
		}

#	endif

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            arcofi_cmd_set_w arcofi_cmd_set_r - load CMDR for read or
				write operation in ARCOFI SP.

Usage           uchar arcofi_cmd_set_x (struct peitab FAR *p_peitab,
										uchar operation,
										uchar address
									   );
						p_peitab	: context pointer,
						operation	: CMDR operation code
						address		: CMDR address

common constants and declarations : ph.h

common objects : p_peitab context pointer.

*--------------------------------------------------------------------------*/

uchar arcofi_cmdr_set_w (p_peitab, operation, address)
	register struct peitab 	FAR *p_peitab;
	uchar						 operation;
	uchar						 address;
{
	uchar						 cmdr;

	cmdr = Sfi (CMDR_RW, 	CMDR_RW_WRITE)	|
		   Sfi (CMDR_OP, 	operation)  	|
		   Sfi (CMDR_ADD,	address);

	Arcofi_cmdr &= (~(Mask_field (CMDR_RW) | Mask_field (CMDR_OP) | Mask_field (CMDR_ADD)));
	Arcofi_cmdr |= cmdr;

	return (Arcofi_cmdr);
}

/*-------------------------------------------------------------------------*/

uchar arcofi_cmdr_set_r (p_peitab, operation, address)
	register struct peitab 	FAR *p_peitab;
	uchar						 operation;
	uchar						 address;
{
	uchar						 cmdr;

	cmdr = Sfi (CMDR_RW, 	CMDR_RW_READ)	|
		   Sfi (CMDR_OP, 	operation)  	|
		   Sfi (CMDR_ADD,	address);

	Arcofi_cmdr &= (~(Mask_field (CMDR_RW) | Mask_field (CMDR_OP) | Mask_field (CMDR_ADD)));
	Arcofi_cmdr |= cmdr;

	return (Arcofi_cmdr);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            arcofi_sop_r arcofi_sop_w - read or	write SOP register
				in ARCOFI SP.

Usage           uchar arcofi_sop_x (struct peitab FAR *p_peitab,
									uchar address
								   );
						p_peitab	: context pointer,
						address		: CMDR address

common constants and declarations : ph.h

common objects : p_peitab context pointer.

*--------------------------------------------------------------------------*/

uchar arcofi_sop_r (p_peitab, address)
	register struct peitab 	FAR *p_peitab;
	uchar						 address;
{
	uchar						 sop;

	rd_mon1 (p_peitab,
			 arcofi_cmdr_set_r (p_peitab, CMDR_OP_SOP, address),
			 &sop,
			 1
			);
	return (sop);
}

/*-------------------------------------------------------------------------*/

uchar arcofi_sop_w (p_peitab, address, val)
	register struct peitab 	FAR *p_peitab;
	uchar						 address;
	uchar						 val;
{
	uchar						 sop [CMDR_SOP_SIZE];

	sop [0] = arcofi_cmdr_set_w (p_peitab, CMDR_OP_SOP, address);
	sop [1] = val;

	return (wr_mon1 (p_peitab, sop, CMDR_SOP_SIZE));
}

/*--------------------------------------------------------------------------*r
					 F U N C T I O N   H E A D E R

Name            arcofi_cop_r arcofi_cop_w - read or	write COP array
				in ARCOFI SP.

Usage           uchar arcofi_cop_x (struct peitab FAR *p_peitab,
									uchar address,
									uchar fAR *p_value
								   );
						p_peitab	: context pointer,
						address		: COP address
						p_value		: pointer on the coefficient values

common constants and declarations : ph.h

common objects : p_peitab context pointer.

*--------------------------------------------------------------------------*/

uchar arcofi_cop_w (p_peitab, address, p_arcofi_value)
	register struct peitab 	FAR *p_peitab;
	uchar						 address;
	uchar					FAR *p_arcofi_value;
{
	uchar						 sequence [9];

	Memcpy_far ((char FAR *)&sequence [1], (char FAR *)p_arcofi_value, ARCOFI_COP_SIZE [address] - 1);
	sequence [0] = arcofi_cmdr_set_w (p_peitab, CMDR_OP_COP, address);

	if (wr_mon1 (p_peitab, sequence, ARCOFI_COP_SIZE [address]) == NOK) {
		return (NOK);
	}

	return (OK);
}


/*-------------------------------------------------------------------------*/

uchar arcofi_cop_r (p_peitab, address, p_arcofi_value)
	register struct peitab 	FAR *p_peitab;
	uchar						 address;
	uchar					FAR *p_arcofi_value;
{

	if (rd_mon1 (	p_peitab,
					arcofi_cmdr_set_r (p_peitab, CMDR_OP_COP, address),
					p_arcofi_value,
					(ARCOFI_COP_SIZE [address] - 1)
				) == NOK) {
		return (NOK);
	}

	return (OK);
}


/*--------------------------------------------------------------------------*r
					 F U N C T I O N   H E A D E R

Name            arcofi_read_all - read SOP Registers and COP parameters.

Usage           uchar arcofi_read_all (struct peitab FAR *p_peitab)
						p_peitab	: context pointer,

common constants and declarations : ph.h

common objects : p_peitab context pointer.

*--------------------------------------------------------------------------*/

#if PH_D_AUDIT == ON /* { */

	uchar 	seq;

uchar arcofi_read_all (p_peitab)
	register struct peitab 	FAR *p_peitab;

{

	   /* Read SOP registers and Coefficients after Initialization */

	seq = 255;

	reg_sop_init [0] = arcofi_cmdr_set_r (p_peitab, CMDR_OP_SOP, CMDR_ADD_SOP_F_ALL);

	if (rd_mon1 (p_peitab, reg_sop_init [0], &reg_sop_init [1], CMDR_SOP_ALL_SIZE - 1) == NOK) {
		return (NOK);
	}

	seq = 0;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_0, cop_0) == NOK) {
	   return (NOK);
	}

	seq = 1;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_1, cop_1) == NOK) {
	   return (NOK);
	}

	seq = 2;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_2, cop_2) == NOK) {
	   return (NOK);
	}

	seq = 3;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_3, cop_3) == NOK) {
	   return (NOK);
	}

	seq = 4;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_4, cop_4) == NOK) {
	   return (NOK);
	}

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_5, cop_5) == NOK) {
	   return (NOK);
	}

	seq = 5;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_6, cop_6) == NOK) {
	   return (NOK);
	}

	seq = 7;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_7, cop_7) == NOK) {
	   return (NOK);
	}

	seq = 8;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_8, cop_8) == NOK) {
	   return (NOK);
	}

	seq = 9;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_9, cop_9) == NOK) {
	   return (NOK);
	}

	seq = 10;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_A, cop_a) == NOK) {
	   return (NOK);
	}

	seq = 11;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_B, cop_b) == NOK) {
	   return (NOK);
	}

	seq = 12;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_C, cop_c) == NOK) {
	   return (NOK);
	}

	seq = 13;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_D, cop_d) == NOK) {
	   return (NOK);
	}

	seq = 14;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_E, cop_e) == NOK) {
	   return (NOK);
	}

	seq = 15;

	if (arcofi_cop_r (p_peitab, CMDR_ADD_COP_F, cop_f) == NOK) {
	   return (NOK);
	}

	return (OK);

}

#endif /* PH_D_AUDIT == ON } */

/*-----------------------------------------------------------------------*/

#endif /* (PH_CODEC == ARCOFI_2163) || (PH_CODEC == ARCOFI_2165) } */

/*EOF*/
