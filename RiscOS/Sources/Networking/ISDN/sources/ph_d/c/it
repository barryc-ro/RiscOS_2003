/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - it.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *
 *      - implements the interrupt functions of the ISDN CONTROLLER
 *
 *		it_isdn_controller			- ISDN CONTROLLER interrupt routine
 *		it_isdn_controller_install	- declare the handler to the environment.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include	"ph_d.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

		/*
			Global variables to be filled with their real value
			at system launch time.
		*/

	ushort	isdn_controller_it_mask;
	ushort	isdn_controller_it_vector_nb;

#if NEW_FCT_STYLE == ON
	void	it_isdn_controller			(void);
	void	isac_it						(uchar isac_id);
	void	hscx_it						(uchar hscx_id);

#	if PH_D_U == ON
		void	iec_it					(uchar iec_id);
#	endif

#else
	void	it_isdn_controller			();
	void	isac_it						();
	void	hscx_it						();

#	if PH_D_U == ON
		void	iec_it					();
#	endif

#endif

		/* End Of Interrupt : */
		/* Interrupt controller acknowledgement */

#if IT_CONTROLLER == ITC_8259

# if 0
		/* Non-specific EOI (8259) */
#	define It_controller_ack(it_vector_nb,it_mask)		outp (OCW2_ADD_8259, 0x20)
# else
		/* Specific EOI (8259) */
#	define It_controller_ack(it_vector_nb,it_mask)		outp (OCW2_ADD_8259, EOI_MASK_8259 (it_mask))
# endif

#endif

#if IT_CONTROLLER == ITC_80186

		/* Specific EOI for i80188/80186 */

#	define It_controller_ack(it_vector_nb,it_mask)		outpw (ITC_BASE_ADD + 0x22, it_vector_nb)

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            it_isdn_controller process an ISDN controller interrupt

				it_install declares the ISDN CONTROLLER IT driver to the
				environment

Usage           uchar it_isdn_controller (void);
				uchar it_isdn_controller_install (void);

Description  :	declares the ISDN CONTROLLER driver to the environment,
				or performs	other environment related initializations

Return value : 	returns OK if init has been performed
						NOK else.

common constants and declarations :

*--------------------------------------------------------------------------*/

#if OS == IMECOM_OS
#	define INTERRUPT	interrupt
#else
#	define INTERRUPT
#endif

extern uchar	g_interface_mode;

#define ST_INTERFACE  	'S'
#define U_INTERFACE  	'U'

void INTERRUPT it_isdn_controller (void)
{

#	if PH_D_U == ON

		if (g_interface_mode == ST_INTERFACE) {
#	endif
			/* Process IT HSCX chip ID 0 (A and B) */

		hscx_it (0);

			/* Process IT ISAC-S chip ID 0 */

		isac_it (0);

			/* Process IT HSCX chip ID 0 (A and B) */

		hscx_it (0);

			/* Process IT ISAC-S chip ID 0 */

		isac_it (0);

#	if PH_D_U == ON

		} else {

			iec_it (0);
		}
#	endif

		It_controller_ack (isdn_controller_it_vector_nb, isdn_controller_it_mask);

}

/*--------------------------------------------------------------------------*/

	/* ------------- INSTALL BOARD INTERRUPT ROUTINE -------------- */

static void (FAR *old_vector) ();		/* saved vector nb */

#if OS == AMX

#  	if (OS_RELEASE == I86_V2)
		int it_area_amx[16]; /* for AMX root ISP */
#	endif

#	if (OS_RELEASE == MC68000_V2) || (OS_RELEASE == I86_V3)
		struct amxisps it_area_amx; /* for AMX root ISP */
#	endif

#endif

uchar 	it_isdn_controller_install ()
{

#if SIMULATION == ON
	return(OK);
#else

	uchar			old_value;

#	if (OS_RELEASE == I86_V2)
		void (FAR *FAR *p_vector) ();
#	endif

	It_mask (isdn_controller_it_mask, old_value);

#	if OS == AMX

#	  	if (OS_RELEASE == I86_V2)
			p_vector	= (void (FAR * FAR *)())(4 * isdn_controller_it_vector_nb);
			old_vector 	= *p_vector;
			ajiptr (isdn_controller_it_vector_nb, it_isdn_controller, it_area_amx);
#	  	endif

#		if (OS_RELEASE == MC68000_V2) || (OS_RELEASE == I86_V3)
			ajispm (it_isdn_controller, (struct amxisps FAR *)&it_area_amx);
			ajivtx (isdn_controller_it_vector_nb, (void (FAR *)())&it_area_amx, (void (FAR * FAR *)())&old_vector);
#		endif

#	endif

#	if OS == IMECOM_OS

		set_int_func_addr (isdn_controller_it_vector_nb, (void (far *)()) it_isdn_controller);

#	endif

		/* Acknowledge the It controller in case it was not done */

	It_controller_ack (isdn_controller_it_vector_nb, isdn_controller_it_mask);

	It_unmask (isdn_controller_it_mask);

		/* return */

	return (OK);

#endif

}

/*--------------------------------------------------------------------------*/

uchar 	shut_down_ph_layer ()
{
	it_mask_t	old_value;

#if SIMULATION == ON
	return(OK);
#endif

#if OS == AMX

#	if (OS_RELEASE == I86_V2)
		void (FAR *FAR *p_vector) ();
#	endif

		/* ------ mask ISDN controller interrupt ----- */

	Isdn_controller_mask (isdn_controller_it_mask, old_value);

		/* Re-install old interrupt routine entry point */

#  	if (OS_RELEASE == I86_V2)
		p_vector	= (void (FAR * FAR *)())(4 * isdn_controller_it_vector_nb);
		*p_vector	= old_vector;
#	endif

#	if (OS_RELEASE == MC68000_V2) || (OS_RELEASE == I86_V3)
		ajivtw (isdn_controller_it_vector_nb, old_vector);
#	endif

	return (OK);

#endif

}

/*--------------------------------------------------------------------------*/

/*EOF*/
