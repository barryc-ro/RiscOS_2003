
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mon_drv.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens IEC-Q V5.1 Driver                        |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_MPH

   /* Include Files
	  =============  */

#include "ph_d.h"

#if PH_D_U == ON

			/* MPH context pointer */

	extern	struct mph_d_na   FAR 					*p_mph_d_na;   		/* MPH D NA pointer */

#include "PSB21910.h"

	/* Local Functions
	   ===============   */

#if NEW_FCT_STYLE == ON
	uchar         check_stat_mon (struct PI_tab FAR *);

#else

	uchar         check_stat_mon ();
#endif

/***************************************************************************
 *                                                                         *
 *    Function :  rd_mon ()                               	               *
 *    Parms    :                                                           *
 *    purpose  :  read data from IOM2 monitor channel		               *
 ***************************************************************************/

int rd_mon (p_PI_tab, p_parm, cnt)
	struct PI_tab FAR 	*p_PI_tab;
	uchar			FAR *p_parm;
	int         		 cnt;
{
	unsigned int     	state, i = 0, busy, exec_status = OK;
	int               	Cnt = cnt, rep_cnt = 0;
	uchar              	dummy, dev_id, mstat, err_flags = 0x00;

	if (cnt <= 0) {
		return (NOK);
	}

	It_disable_iec (state);
	It_unmask_2091(U_MASK_W_MDR_IT);

	do {

		err_flags   = 0x00;
		exec_status = OK;

			/* Cnt is the real number of bytes  */
			/* to read.                         */
			/* Cnt must be decremented to get   */
			/* with the right offset when       */
			/* using 'p_parm [Cnt]'               */

		Cnt         = cnt;
		Cnt--;

			/* Prepare the read access          */
			/* the MON data acknowledge and     */
			/* the 'data received' indication   */
			/* do not arrive simultanously.     */
			/* Therefore following contruction  */

			/* Enable MON handshake in receive direction */

		Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) |= U_MOCR_W_MRE | U_MOCR_W_MRC));

		busy = TRUE;

		do  {

				/* That is the do-while loop where  */
				/* the bytes are read from MON 1    */

			mstat = check_stat_mon (p_PI_tab);

			switch (mstat & U_MOSR_MASK) {

					/* End of reception */

				case U_MOSR_R_MER:
					busy 	= FALSE;
					rep_cnt = 10;
					break;

					/* Unexpected response */

				default:
					exec_status = NOK;
					err_flags  |= 0x04;

					/* Data Received */

				case U_MOSR_R_MDR:

						/* Read data */

					p_parm [Cnt] = Rd_iec (p_PI_tab -> pt_r_mox);

						/* End of Transmission ? */

					if (Cnt <= 0) {

							/* Yes - check until End of Data */

						busy = FALSE;

#						if PH_D_AUDIT == ON

							for (;;) {

								if ((mstat = check_stat_mon (p_PI_tab)) != U_MOSR_R_MER) {
									dummy = Rd_iec (p_PI_tab -> pt_r_mox);

								} else {

									break;
								}

							}

#						endif


					} else {

						Cnt--;
					}
#					if PH_D_WA_3 == ON
							/* WA : toggle MOCR.MER bit */

						Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) &= (~U_MOCR_W_MRE)));
#					endif


					Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) |= (U_MOCR_W_MRE | U_MOCR_W_MRC)));

					break;
			}

		} while (busy);

		if (err_flags) {
			rep_cnt++;

		} else {

			rep_cnt = 10;
		}

#		if PH_D_WA_2 == ON
			/* WA : toggle MOCR.MER bit */

			Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) &= (~U_MOCR_W_MRE)));
#		endif

		Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) &= (~U_MOCR_W_MRC)));

			/* Repeat the reading when          */
			/* errors have occurred and while   */
			/* the repeat count 'rep_cnt' is    */
			/* not expired !!!                  */

	} while (rep_cnt < 10);

	It_unmask_2091(U_MASK_W_MDR_IT);
	It_enable_iec (state);

			/* Reverse byte order               */

	for (i = 0, Cnt = cnt; i < (Cnt / 2); i++) {
		uchar     b;

		b        				= p_parm [i];
		p_parm [i]  			= p_parm [Cnt - 1 - i];
		p_parm [Cnt - 1 - i] 	= b;
	}

	return (exec_status);
}

/***************************************************************************
 *                                                                         *
 *    Function :  wr_mon ()                                               *
 *    Parms    :  parameter-array, counter for parameters                  *
 *    purpose  :  write to MONITOR                                            *
 *                                                                         *
 ***************************************************************************/
int wr_mon (p_PI_tab, p_parm, byte_count)
	struct PI_tab 		FAR	*p_PI_tab;
	uchar				FAR	*p_parm;
	register int   			 byte_count;
{
	int            			 rep_cnt, exec_status = OK;
	register int   			 cnt = byte_count;
	unsigned int   			 i, state;
	uchar           		 mstat, dummy, err_flags = 0x00;

		/* Reverse byte order               */

	for (i = 0; i < (cnt / 2); i++) {
		uchar     b;

		b         			 = p_parm [i];
		p_parm [i]  		 = p_parm [cnt - 1 - i];
		p_parm [cnt - 1 - i] = b;
	}

		/* Decrement the pointer to the     */
		/* data bytes to get the right      */
		/* offset when using 'parm [cnt]'   */
		/* ( 'cnt' is always the real       */
		/* number of data bytes )           */

	p_parm--;

	It_disable_iec (state);
	It_unmask_2091(U_MASK_W_MDA_IT);

	rep_cnt = 0;		/* Init repeat count */

	do {
		err_flags   = 0x00;
		exec_status = OK;
		cnt         = byte_count;

			/* check status of transmission */

		mstat = Rd_iec (p_PI_tab -> pt_r_mocr);    /* read status MOSR (same address as MOCR) */

			/* Active ?        */

		if (mstat & U_MOSR_R_MAC) {

				/* YES: return with error */
			rep_cnt++;
			err_flags   = 0x01;
			exec_status = NOK;
			continue;
		}


		do {

				/* Write the data bytes to MONITOR     */

			Wr_iec (p_PI_tab -> pt_r_mox, p_parm [cnt]);

			Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) |= (U_MOCR_W_MXC | U_MOCR_W_MXE)));

			mstat = check_stat_mon (p_PI_tab);

			if (mstat & U_MOSR_R_MAB) {
				rep_cnt++;
				err_flags  |= 0x02;
				cnt 		= 1;
				exec_status = NOK;
			}

		} while (--cnt);


			/* Tranmit End Of Transmission */

		Wr_iec (p_PI_tab -> pt_r_mocr, (Mph_d_u_br_w(U_MOCR_W) &= (~(U_MOCR_W_MXC | U_MOCR_W_MXE))));

		if ( ! err_flags) {
			rep_cnt = 5;	/* Force exit */
		}

			/* Repeat the write procedure when  */
			/* errors have occurred and while   */
			/* the repeat count 'rep_cnt' is    */
			/* not expired !!!                  */

	} while (rep_cnt < 3);

	It_unmask_2091(U_MASK_W_MDR_IT);

	It_enable_iec (state);
	return (exec_status);
}

/***************************************************************************
 *                                                                         *
 *    Function :  check_stat_mon ()                                       *
 *    Parms    :  'p_PI_tab' pointer to PEITAB table element                     *
 *    purpose  :  poll EXIR to detect MON channel status changes           *
 *                                                                         *
 ***************************************************************************/

uchar check_stat_mon (p_PI_tab)
	struct PI_tab				FAR *p_PI_tab;
{
	register unsigned long   	 	 i = 0;
	uchar                    		 dummy, mocr, ista;

	while (i++ < 100000L) {

			/* Wait for ISTA:MDR or ISTA:MDA or timeout */

		ista = Rd_iec (p_PI_tab -> pt_r_ista);

		if ((ista & U_ISTA_R_MDR_IT) || (ista & U_ISTA_R_MDA_IT)) {
			break;
		}

	}

	mocr = Rd_iec (p_PI_tab -> pt_r_mocr);    /* read status MOSR (same address as MOCR) */

		/* Return Monitor Channel Status */

	return (mocr);
}


#endif

/*EOF*/

