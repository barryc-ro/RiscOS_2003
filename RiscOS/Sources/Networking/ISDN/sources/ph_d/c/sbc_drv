
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - sbc_drv.c
 *
 * $Revision$
 *
 * $Date$
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/***************************************************************************
 *                                                                         *
 *    SIEMENS ISDN-Userboard  (c) 1987-1989                                *
 *    ======================                                               *
 *                                                                         *
 *    Firmware:   layer 1 device driver functions for SBC                  *
 *    File    :   sbc.c                                                    *
 *    created :   August 1989                                              *
 *    author  :   Frank Dowling, Peter Mueller                             *
 *    compiled:   Microsoft C compiler 5.1 (small memory model)            *
 *                                                                         *
 ***************************************************************************/

#define ENTITY ENT_PH_D

   /* Include Files
	  =============  */

#include "ph_d.h"

   /* Variables
	  =========   */

/***************************************************************************
 *                                                                         *
 *    Function: sbc_enable_clock ()                                        *
 *                                                                         *
 *    Parms   : pointer to PEITAB                                          *
 *                                                                         *
 *    purpose : enable clocks for TE configurations                        *
 *                                                                         *
 ***************************************************************************/

int sbc_enable_clock (p_peitab)
   register struct peitab   	FAR	*p_peitab;				/* PEITAB pointer */
{
			unsigned int   			count;
			long					i;
			uchar            		BitSet, spcr;

	   /* Test to see if clocks are        */
	   /* actually there. Because the SBC  */
	   /* after reset does not deactivate  */
	   /* its clocks immediately we will   */
	   /* make pretty sure that the        */
	   /* clocks are there before we       */
	   /* leave this routine               */

   BitSet = Rd_sbc (p_peitab -> pt_r_star) & STAR_BVS;
   count  = 0;

	   /* we test to see if 6 changes in   */
	   /* the STAR:BVS bit indicating the  */
	   /* reception of at least 3 frames   */
	   /* (6 B channels). If at any time   */
	   /* we fail to find a bit change     */
	   /* and the counter i reaches its    */
	   /* maximum then we assume that      */
	   /* clocks are no longer present     */

   for (i = 0; i < SBC_WAIT_COUNT_CLOCK; i++) {

		if ((Rd_sbc (p_peitab -> pt_r_star) & STAR_BVS) != BitSet) {

				/* Of course we have to reset our   */
				/* counter every time a bit change  */
				/* bit change the same amount of    */
				/* is observed to give the next     */

			 if (++count > 6) {
				return (FALSE);
			 }

			   /* time in which to occur !!!       */

			 i = 0;
			 BitSet = Rd_sbc (p_peitab -> pt_r_star) & STAR_BVS;
		}

   }

		   /* ICC B2 requires one edge at FSC  */
		   /* Otherwise the setting of the SPU */
		   /* has no effect (result: no clock) */
		   /* The IOM direction control bit    */
		   /* IDC in the SQXR register         */
		   /* is set before and reset after    */
		   /* the system is clocking           */

   if (p_peitab -> pt_device == PT_ICC_B) {

	  switch (p_peitab-> pt_ModulMode) {

		 case PT_MM_LT_S:
			Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0xe0) | 0x80));
			break;

		 case PT_MM_LT_T 	:
			Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0xe0) | 0x8f));
			break;

		 case PT_MM_TE		:
			Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0xe0) | 0x8f));
			break;
	  }
   }

   spcr = Rd_sbc(p_peitab -> pt_r_spcr);
   Wr_sbc (p_peitab -> pt_r_spcr, spcr | SPCR_SPU);

   if (p_peitab -> pt_state & PT_IOM2) {
	 Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_TIM | 0x03);

   } else {

	  Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_TIM);
   }

   i = 0;

		   /* Wait for power up indication     */

   while ((Rd_sbc(p_peitab -> pt_r_cixr) & CODX_ALL_BITS) != CODX_PU) {

		if (++i > SBC_WAIT_COUNT_POWER_UP)  {
			 break;								/* time out */
		}

   }

   Wr_sbc (p_peitab -> pt_r_spcr, spcr);

   if (p_peitab -> pt_device == PT_ICC_B) {
	  Wr_sbc (p_peitab -> pt_r_adfr, ((p_peitab -> tem_pfs) & 0x03) << 4);
   }

	   /* reset SQXR.IDC bit */

   switch (p_peitab-> pt_ModulMode) {

	  case PT_MM_LT_S:
		 Wr_sbc (p_peitab -> pt_r_sqxr, (Rd_sbc (p_peitab -> pt_r_sqxr) & 0x60));
		 break;

	  case PT_MM_LT_T 	:
		 Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0x60)) | 0x0f);
		 break;

	  case PT_MM_TE		:
		 Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0x60)) | 0x0f);
		 break;
   }

   return (TRUE);
}

/***************************************************************************
 *                                                                         *
 *    Function: sbc_iom2_switch   ()		                               *
 *                                                                         *
 *    Parms   : pointer to PEITAB                                          *
 *				flag ON or OFF											   *
 *                                                                         *
 *    purpose : switch IOM2 interface to configuration values			   *
 *				ON: set to power down									   *
 *				OFF:set to power up										   *
 *                                                                         *
 ***************************************************************************/

int sbc_iom2_switch (p_peitab, flag)
   register struct peitab   	FAR	*p_peitab;				/* PEITAB pointer */
   register uchar					flag;
{
	struct ph_d_na      FAR *p_ph_d_na;     /* channel context */

	p_ph_d_na   = Ph_d_a_peitab_to_ph_d_na (p_peitab);

	if ((p_peitab -> pt_state & PT_IOM2) &&        	 /* IOM 2 mode ?                     */

	   (p_peitab -> pt_ModulMode == PT_MM_TE)) {

		if (flag == ON) {


				/* set SQXR.CFS bit to ON */

			switch (p_peitab-> pt_ModulMode) {

			   case PT_MM_LT_S:
				  Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0xe0) | 0x40));
				  break;

			   case PT_MM_LT_T 	:
				  Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0xe0) | 0x4f));
				  break;

			   case PT_MM_TE		:
				  Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0xe0) | 0x4f));
				  break;
			}

		} else {

				/* set SQXR.CFS bit to OFF */

			switch (p_peitab-> pt_ModulMode) {

			   case PT_MM_LT_S:
				  Wr_sbc (p_peitab -> pt_r_sqxr, (Rd_sbc (p_peitab -> pt_r_sqxr) & 0xa0));
				  break;

			   case PT_MM_LT_T 	:
				  Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0xa0)) | 0x0f);
				  break;

			   case PT_MM_TE		:
				  Wr_sbc (p_peitab -> pt_r_sqxr, ((Rd_sbc (p_peitab -> pt_r_sqxr) & 0xa0)) | 0x0f);
				  break;
			}
		}
   }

   return (TRUE);
}

/***************************************************************************
 *                                                                         *
 *    Function: sbc_init ()                                                *
 *                                                                         *
 *    Parms   : peitab pointer, mode of operation                          *
 *	                                                                       *
 *    purpose : initialize the ICC / ISAC-S for correct operation with     *
 *              the SBC at the IOM interface and reset the SBC             *
 *                                                                         *
 ***************************************************************************/

int sbc_init (p_peitab, mode_type)
   register struct	peitab 	FAR	*p_peitab;			/* PEITAB pointer */
			uchar      		 	mode_type;			/* mode of operation */

{
			uchar               r_mode;

   Wr_sbc (p_peitab -> pt_r_mask, 0xFF);

	   /* Timing mode 0 is used on the     */
	   /* SIPB for TE and NT-S configu-    */
	   /* ration                           */

   r_mode = Rd_sbc (p_peitab -> pt_r_mode);

   switch (mode_type) {

		case PT_MM_TE :
			Wr_sbc (p_peitab -> pt_r_mode, (r_mode & ~(MODE_HMD2 | MODE_HMD1)) | MODE_HMD0);
			break;

		case PT_MM_LT_T :
			Wr_sbc (p_peitab -> pt_r_mode, (r_mode & ~(MODE_HMD2)) | MODE_HMD1 | MODE_HMD0);
			break;

		case PT_MM_LT_S :
			Wr_sbc (p_peitab -> pt_r_mode, (r_mode & ~(MODE_HMD2 | MODE_HMD1 | MODE_HMD0)));
			break;
   }

   if (p_peitab -> pt_state & PT_IOM2) {       	 /* IOM 2 mode ?                     */

	  if (p_peitab -> iom_ods == 0) {
		Wr_sbc (p_peitab -> pt_r_adf2, 0x80);    /* IOM2 mode and opend drain      */

	  } else {

		Wr_sbc (p_peitab -> pt_r_adf2, 0x88);    /* IOM2 mode and tristate         */
	  }

	  switch (mode_type) {

		 case PT_MM_LT_S:
			Wr_sbc (p_peitab -> pt_r_spcr, 0x20);   /* non-terminal mode             */
			Wr_sbc (p_peitab -> pt_r_stcr, 0x00);   /* No terminal specific functions   */

			Wr_sbc (p_peitab -> pt_r_mode, (r_mode & ~(MODE_HMD2 | MODE_HMD0)) | MODE_HMD1);

			if (p_peitab -> pt_device == PT_ICC_B) {
				Wr_sbc (p_peitab -> pt_r_adfr, ((((p_peitab -> iom_csel) 	& 0x07) << 1) |
												(((p_peitab -> tem_pfs) 	& 0x03) << 4)
											   )
					   );
			}

				/* set SQXRX */

			Wr_sbc (p_peitab -> pt_r_sqxr, 0x00);
			break;

		 case PT_MM_LT_T 	:
			Wr_sbc (p_peitab -> pt_r_spcr, 0x20);   /* non-terminal mode             */
			Wr_sbc (p_peitab -> pt_r_stcr, 0x00);   /* TIC bus address '0'           */

			if (p_peitab -> pt_device == PT_ICC_B) {
				Wr_sbc (p_peitab -> pt_r_adfr, ((((p_peitab -> iom_csel) 	& 0x07) << 1) |
												(((p_peitab -> tem_pfs) 	& 0x03) << 4)
											   )
					   );
			}

			Wr_sbc (p_peitab -> pt_r_sqxr, 0x0f);
			break;

		 case PT_MM_TE		:
			Wr_sbc (p_peitab -> pt_r_spcr, 0x00);   /* terminal mode                 */
			Wr_sbc (p_peitab -> pt_r_stcr, 0x70);   /* TIC bus address '7'           */
			Wr_sbc (p_peitab -> pt_r_sqxr, 0x0f);
			break;
	  }

   }  else {

	  Wr_sbc (p_peitab -> pt_r_adf2, 0x00);    		/* IOM1 mode      */

	  Wr_sbc (p_peitab -> pt_r_stcr, 0x70);         /* program TIC bus address          */

	  switch (mode_type) {

		 case PT_MM_LT_S	:

			   /* Set SPCR.SPM for timing mode 1 */

			Wr_sbc (p_peitab -> pt_r_spcr, 0x20);
			break;

		 case PT_MM_TE		:
			Wr_sbc (p_peitab -> pt_r_spcr, 0x00);   /* terminal mode */
			break;

		 case PT_MM_LT_T 	:
			Wr_sbc (p_peitab -> pt_r_spcr, 0x20);   /* non-terminal mode */
			break;
	  }

   }

   Wr_sbc (p_peitab -> pt_r_mask, 0x00);

   return (sbc_reset (p_peitab));

}

/***************************************************************************
 *                                                                         *
 *    Function: sbc_act ()                                                 *
 *                                                                         *
 *    Parms   : PEITAB pointer                                             *
 *                                                                         *
 *    purpose : establish L1 link   (= activation)                         *
 *                                                                         *
 ***************************************************************************/

int sbc_act (p_peitab, priority)
   register struct	peitab   	FAR	*p_peitab;
   uchar							 priority;
{

	switch (((p_peitab -> pt_CI_rec = Rd_sbc(p_peitab -> pt_r_cixr)) & CODX_ALL_BITS)) {

			/* ACT 8 */

		case CODX_ACT_IND :

			if (priority != PH_D_PRIORITY_CLASS_1_NORMAL) {

				if (p_peitab -> pt_state & PT_IOM2) {
					Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ10 | 0x03);

				} else {

					Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ10);
				}

			}

			return (OK);

			/* ACT 10 */

		case CODX_ACT_IND10 :

			if (priority == PH_D_PRIORITY_CLASS_1_NORMAL) {

				if (p_peitab -> pt_state & PT_IOM2) {
					Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ | 0x03);

				} else {

					Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ);
				}

			 }

			 return (OK);


			 /* Not Activated */

		default :

				/* Reset old event */

			p_peitab -> event = 0;

			switch (p_peitab -> pt_ModulMode) {

				case PT_MM_TE 	:
				case PT_MM_LT_T :
					sbc_enable_clock (p_peitab);
					break;

			}

			if (priority == PH_D_PRIORITY_CLASS_1_NORMAL) {

				if (p_peitab -> pt_state & PT_IOM2) {
					Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ | 0x03);

				} else {

					Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ);
				}

			} else {

				if (p_peitab -> pt_state & PT_IOM2) {
					Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ10 | 0x03);

				} else {

					Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ10);
				}

			}

			return (NOK);

	}

}

/*-------------------------------------------------------------------------*/

uchar sbc_info_4 (p_peitab)
   register struct	peitab   	FAR	*p_peitab;
{

   if (p_peitab -> pt_ModulMode != PT_MM_LT_S) {
	  return (NOK);
   }

		/* Reset old event */

	p_peitab -> event = 0;

	if (p_peitab -> pt_state & PT_IOM2) {
		Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_IND | 0x03);

	} else {

		Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_IND);
	}

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: sbc_act_local_loop ()                                      *
 *                                                                         *
 *    Parms   : PEITAB pointer                                             *
 *                                                                         *
 *    purpose : activate local loop                                        *
 *                                                                         *
 ***************************************************************************/

int sbc_act_local_loop (p_peitab)
   register struct	peitab   	FAR	*p_peitab;
{

	switch (p_peitab -> pt_ModulMode) {

		case PT_MM_TE 	:
		case PT_MM_LT_T :
			sbc_enable_clock (p_peitab);
			break;

	}

	if (p_peitab -> pt_state & PT_IOM2) {
		Wr_sbc (p_peitab -> pt_r_cixr, 0x6B);

	} else {

		Wr_sbc (p_peitab -> pt_r_cixr, 0x68);
	}

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: sbc_act_local_loop3 ()                                     *
 *                                                                         *
 *    Parms   : PEITAB pointer                                             *
 *                                                                         *
 *    purpose : activate local loop3                                       *
 *                                                                         *
 ***************************************************************************/

int sbc_act_local_loop3 (p_peitab)
   register struct	peitab   	FAR	*p_peitab;
{
	long					i;

	switch (p_peitab -> pt_ModulMode) {

		case PT_MM_TE 	:
		case PT_MM_LT_T :
			sbc_enable_clock (p_peitab);
			break;

	}

	if (p_peitab -> pt_state & PT_IOM2) {
		Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ARL3 | 0x03);

	} else {

		Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ARL3);
	}

	i = 0;
			/* Wait for Awake test indication */

	while ((Rd_sbc(p_peitab -> pt_r_cixr) & CODX_ALL_BITS) != CODX_TI) {

		 if (++i > SBC_WAIT_COUNT_POWER_UP)  {

			  return (NOK);                 	/* time out */
		 }

	}

		/* Loop ON                          */

	p_peitab -> pt_state |= PT_LOOP;

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: sbc_reset_local_loop3 ()                                   *
 *                                                                         *
 *    Parms   : PEITAB pointer                                             *
 *                                                                         *
 *    purpose : stop local loop3	                                       *
 *                                                                         *
 ***************************************************************************/

int sbc_reset_local_loop3 (p_peitab)
   register struct	peitab   	FAR	*p_peitab;
{
	long					i;

	if (!((p_peitab -> pt_state) & PT_LOOP)) {

		return(NOK);
	}

	if (p_peitab -> pt_state & PT_IOM2) {
		Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ10 | 0x03);

	} else {

		Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ10);
	}

	p_peitab -> pt_state &= ~PT_LOOP;

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: sbc_dea                                                    *
 *                                                                         *
 *    Parms   : PEITAB pointer                                             *
 *                                                                         *
 *    purpose : release L1 link                                            *
 *                                                                         *
 ***************************************************************************/

int sbc_dea (p_peitab)
   register struct	peitab   	FAR	*p_peitab;
{

	if (p_peitab -> pt_ModulMode != PT_MM_LT_S) {
		return (NOK);
	}

	if (((p_peitab -> pt_CI_rec = Rd_sbc (p_peitab -> pt_r_cixr)) & CODX_ALL_BITS) != CODX_DIU) {

		/* Reset old event */

		p_peitab -> event = 0;

		if (p_peitab -> pt_state & PT_IOM2) {
			Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_DEA_REQ | 0x03);

		} else {

			Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_DEA_REQ);
		}

		return (NOK);
	}

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: sbc_reset ()                                               *
 *                                                                         *
 *    Parms   : pointer to PEITAB table entry                              *
 *                                                                         *
 *    purpose : Reset SBC                                                  *
 *              (also used for device test)                                *
 *                                                                         *
 ***************************************************************************/

int sbc_reset (p_peitab)
   register struct peitab   	FAR	*p_peitab;
{
			int      				state, failed = FALSE;
			long					i;
			uchar      				ForceCommand, NewState, ReleaseCommand, Loop, r_spcr;

		/* Reset old event */

   p_peitab -> event = 0;

   switch (p_peitab -> pt_ModulMode) {

	  case PT_MM_TE		:
	  case PT_MM_LT_T 	:
		 ForceCommand 	= CODX_RS;     /* send the RES (reset) code        */
		 NewState     	= CODX_EI;     /* and wait for a change to the EI  */
									   /* state                            */

		 ReleaseCommand = CODX_DIU;    /* then send DIU                    */
		 break;

	  case PT_MM_LT_S:
		 ForceCommand 	= CODX_DEA_REQ; /* send the deactivation request    */
										/* code                             */
		 NewState     	= CODX_DIU;     /* and wait for DIU                 */
		 ReleaseCommand = CODX_DID;    	/* then send DID to deactivate the  */
										/* SBC                              */
		 break;

	  default:

		 if (p_peitab -> pt_Lay1id == SBC_LAY1) {
			p_peitab -> pt_Lay1id = UNK_LAY1;
		 }

		 return (NOK);
   }

   if (p_peitab -> pt_state & PT_IOM2) {
	  ReleaseCommand |= 0x03;
	  ForceCommand   |= 0x03;
   }

   It_disable_sbc (state);         			/* disable SBC interrupts    */

		/* if testloop mode was programmed  */
		/* switch it off to enable L1       */
		/* status recognition               */

   r_spcr = Rd_sbc (p_peitab -> pt_r_spcr);

   if ((Loop = (r_spcr & SPCR_TPL)) != 0) {
	  Wr_sbc (p_peitab -> pt_r_spcr, (r_spcr & ~SPCR_TPL));
   }

   Wr_sbc (p_peitab -> pt_r_mask, ~ISTA_CIC);    /* allow only C/I interrupts        */

   switch (p_peitab -> pt_ModulMode) {

		case PT_MM_TE 	:
		case PT_MM_LT_T :
			sbc_enable_clock (p_peitab);
			break;

   }

	   /* Write_out the command code          */

   Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | ForceCommand);

	   /* Wait for the expected state      */

   i = 0;

   while (((Rd_sbc(p_peitab -> pt_r_cixr) & CODX_ALL_BITS) != NewState)
#		if PH_D_U == ON
			 &&	(p_peitab -> tem_pfs != PT_ADF1_TM) /* don't wait in test mode */
#		endif
													) {

		if (i++ > SBC_WAIT_COUNT_NEW_STATE) {
			failed = TRUE;
			break;
		}

   }

   Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | ReleaseCommand);

   switch (p_peitab -> pt_ModulMode) {

		case PT_MM_TE 	:
		case PT_MM_LT_T	:

				/* TE mode ?                        */
				/* Wait for DIU or AIU because      */
				/* it can cause problems for the    */
				/* enable clock routine if the      */
				/* clocks disappear mid routine     */
				/* due to an earlier reset          */

			for (i = 0; i < SBC_WAIT_COUNT_DIU_AIU; i++) {
				p_peitab -> pt_CI_rec = Rd_sbc (p_peitab -> pt_r_cixr) & CODX_ALL_BITS;

				if ((p_peitab -> pt_CI_rec == CODX_DIU) || (p_peitab -> pt_CI_rec == CODX_ACT_IND)) {
					break;
				}

			}

			if ((p_peitab -> pt_state & PT_IOM2) && (p_peitab -> pt_CI_rec == CODX_ACT_IND)) {
				Wr_sbc (p_peitab -> pt_r_cixr, CIXR_TBC | CODX_ACT_REQ | 0x03);
			}

			break;

   }

   if (Loop)  {

			/* restore original value of SPCR   */

		Wr_sbc (p_peitab -> pt_r_spcr, r_spcr);
   }

   Wr_sbc (p_peitab -> pt_r_mask, 0x00); /* enable interrupts again  */

   It_enable_sbc (state);

   if (failed) {

	  if (p_peitab -> pt_Lay1id == SBC_LAY1) {
		 p_peitab -> pt_Lay1id = UNK_LAY1;
	  }

	  return (NOK);

   } else {

	  return (OK);
   }

}

/*EOF*/
