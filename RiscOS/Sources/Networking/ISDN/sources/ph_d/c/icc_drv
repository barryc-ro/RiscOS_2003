
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - icc_drv.c
 *
 * $Revision$
 *
 * $Date$
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/***************************************************************************
 *                                                                         *
 *    SIEMENS ISDN-Userboard  (c) 1987-1989                                *
 *    ======================                                               *
 *                                                                         *
 *    Firmware:   L2 device driver functions for ICC/ISAC-S                *
 *    File    :   icc.c                                                    *
 *    created :   Aug. 1989                                                *
 *    author  :   Peter Mueller                                            *
 *    compiled:   Microsoft C compiler  5.1 (Small)                        *
 *                                                                         *
 ***************************************************************************/

#define ENTITY ENT_PH_D

	/* Include Files
		=============  */

#include "ph_d.h"                       /* general definitions              */

/***************************************************************************
 *                                                                         *
 *    Function: icc_init_peitab ()                                         *
 *    Parms   : *p_peitab   pointer to a peitab table entry to be initialized    *
 *              base  address of detected ICC/ISAC                         *
 *    purpose : initialize the PEITAB table entry for an ICC / ISAC-S      *
 *                                                                         *
 ***************************************************************************/

void icc_init_peitab (p_peitab, base, delta)
	register struct	peitab   	FAR	*p_peitab;
			IO_PORT           		base;
			uchar					delta;
{
#	if PH_PEB_MODEL == PH_PEB2085
			uchar        			version;
#	endif

	IO_PORT     reg_rbch = base + ICC_RBCH*delta;

		/* and set the device identifier    */

#	if PH_PEB_MODEL == PH_PEB2085

			/* read the ICC/ISAC-S version      */
			/* number                           */
			/* 0 for version A1, A2, ..         */
			/* 1 and greater for version B1,B2..*/

		version = Rd_icc (reg_rbch);

		if (version == 0) {
			p_peitab -> pt_device = PT_ICC;

		} else {

			p_peitab -> pt_device = PT_ICC_B;
		}

#	else

		p_peitab -> pt_device = PT_ICC_B;
#	endif

	p_peitab -> pt_io_base = base;              /* store the base (IO) address      */

		/* store the register IO addresses  */
		/* for FIFOs, ISTA, MASK, etc.      */

	p_peitab -> pt_r_fifo = base + ICC_FIFO*delta;
	p_peitab -> pt_r_ista = base + ICC_ISTA*delta;
	p_peitab -> pt_r_mask = base + ICC_MASK*delta;
	p_peitab -> pt_r_star = base + ICC_STAR*delta;
	p_peitab -> pt_r_cmdr = base + ICC_CMDR*delta;
	p_peitab -> pt_r_mode = base + ICC_MODE*delta;
	p_peitab -> pt_r_timr = base + ICC_TIMR*delta;
	p_peitab -> pt_r_exir = base + ICC_EXIR*delta;
	p_peitab -> pt_r_xad1 = base + ICC_XAD1*delta;
	p_peitab -> pt_r_xad2 = base + ICC_XAD2*delta;
	p_peitab -> pt_r_sap1 = base + ICC_SAP1*delta;
	p_peitab -> pt_r_sap2 = base + ICC_SAP2*delta;
	p_peitab -> pt_r_rsta = base + ICC_RSTA*delta;
	p_peitab -> pt_r_tei1 = base + ICC_TEI1*delta;
	p_peitab -> pt_r_tei2 = base + ICC_TEI2*delta;
	p_peitab -> pt_r_rhcr = base + ICC_RHCR*delta;
	p_peitab -> pt_r_spcr = base + ICC_SPCR*delta;
	p_peitab -> pt_r_stcr = base + ICC_STCR*delta;
	p_peitab -> pt_r_cixr = base + ICC_CIXR*delta;    /* = CIX0/CIR0 in IOM2              */
	p_peitab -> pt_r_monr = base + ICC_MONR*delta;    /* = MOX0/MOR0 in IOM2              */
	p_peitab -> pt_r_adfr = base + ICC_ADFR*delta;    /* = ADF1      in IOM2              */

	p_peitab -> pt_r_c1r  = base + ICC_C1R *delta;    /* C1R			                     */
	p_peitab -> pt_r_c2r  = base + ICC_C2R *delta;    /* C1R			                     */

		/* Registers of ICC / ISAC-S        */
		/* version >= B1 in IOM2 mode       */

	p_peitab -> pt_r_rbcl = base + ICC_RFBC*delta;
	p_peitab -> pt_r_rbch = base + ICC_RBCH*delta;
	p_peitab -> pt_r_mox1 = base + ICC_MOX1*delta;
	p_peitab -> pt_r_mocr = base + ICC_MOCR*delta;    /* = MOSR (read access)             */
	p_peitab -> pt_r_cix1 = base + ICC_CIX1*delta;    /* CIX1 and CIR1 register           */
	p_peitab -> pt_r_adf2 = base + ICC_ADF2*delta;

		/* IOM1 mode                        */

	p_peitab -> pt_r_rfbc = base + ICC_RFBC*delta;
	p_peitab -> pt_r_sfcr = base + ICC_SFCR*delta;
	p_peitab -> pt_r_sscx = base + ICC_SSGX*delta;

	p_peitab -> pt_r_sqxr = base + ISAC_SQXR*delta;
}

/***************************************************************************
 *                                                                         *
 *    Function: icc_init ()                                                *
 *    Parameters:                                                          *
 *                                                                         *
 *     p_peitab peitab pointer                                             *
 *                                                                         *
 *     'modulo'    0    modulo 8 (TR6)                                     *
 *                 1    modulo 128 (CCITT)                                 *
 *                                                                         *
 *     'mode'      operating mode. (automode, non automode, etc.)          *
 *                 The possible values are defined in file BASIC.H:        *
 *                 'values of pt_op_mode'                                  *
 *                                                                         *
 *                                                                         *
 *    Purpose:  Initialization of the HDLC   controller                    *
 *    Note:     No HDLC controller reset is done.                          *
 *              After InitLay2_ICC is called the TEI values for            *
 *              the Broadcast Link are programmed.                         *
 *                                                                         *
 *    Special implementation:                                              *
 *       If the user reprograms the layer 2 controller from AUTOMODE to    *
 *       NON AUTOMODE the correct transmission and acknowledgement of an   *
 *       I frame which is currently sent is not assured.                   *
 *       Switching from AUTOMODE to NON AUTOMODE causes an I frame to be   *
 *       transmitted completely by the controller. But the transmit        *
 *       acknowledge response in NON AUTOMODE only indicates that the      *
 *       controller has sent the frame out of the FIFO. It indicates not   *
 *       the successful transmission of the frame as in the AUTOMODE !     *
 *       (no timer supervision, no polling for acknowledge frames!)        *
 *       Therefore the response #74 'loss of I frame' is transferred to    *
 *       the higher protocol software to inform it about that 'I frame may *
 *       have been lost' state. The response is sent if the 'transmit path'*
 *       to the controller is still blocked, i.e. if the controller is     *
 *       still transmitting the frame or waiting for an acknowledge frame  *
 *       from the opposite station.                                        *
 *                                                                         *
 ***************************************************************************/

int icc_init (p_peitab, modulo, mode)
	register struct	peitab   	FAR *p_peitab;
			uchar     				 modulo, mode;
{
			uchar              		 mode_reg;

	Wr_icc (p_peitab -> pt_r_mask, 0xFF);   /* no interrupts during initialization    */

	mode_reg  = Rd_icc (p_peitab -> pt_r_mode) & (MODE_HMD2 | MODE_HMD1 | MODE_HMD0);

	switch (mode) {               /* select OPERATING MODE                  */
								 /* *********************                  */

		case PT_MD_NON_AUTO:       /* HDLC NON AUTO MODE                     */
			mode_reg      |= (MODE_MDS0 | MODE_RAC | MODE_ADM);
			Wr_icc (p_peitab -> pt_r_timr, 0x00);

			if ((p_peitab -> pt_state & PT_TX_WORKS) &&
				(p_peitab -> pt_tx_frame == PT_FR_I) &&
				(p_peitab -> pt_op_mode == PT_MD_AUTO)) {
					icc_reset (p_peitab);
			}

			break;

		case PT_MD_TRANSP:         /* transparent mode,
									   SAPI-address (high-byte) recognition   */
									/* Extended Transparent Mode 1            */

			mode_reg |= (MODE_MDS1 | MODE_MDS0 | MODE_RAC | MODE_ADM);
			Wr_icc (p_peitab -> pt_r_timr, 0x00);
			break;

		case PT_MD_EXT_TRANSP:      /* extended transparent mode,
									   no address recognition                 */
									/* Extended Transparent Mode 0            */

			mode_reg |= (MODE_MDS1 | MODE_MDS0 | MODE_RAC);
			Wr_icc (p_peitab -> pt_r_timr, 0x00);
			break;

		default:
			Wr_icc (p_peitab -> pt_r_mask, 0x00);
			return (NOK);
	}

	p_peitab -> pt_op_mode = mode;  /* store selected operation mode          */
									/* modulo: 1 = (mod 128); 0 = (mod 8)     */

	Wr_icc (p_peitab -> pt_r_sap2, modulo ? 0x02 : 0x00);
	Wr_icc (p_peitab -> pt_r_tei2, 0xFF);

	if (modulo) {
		p_peitab -> pt_state |= PT_M128;

	} else {

		p_peitab -> pt_state &= ~PT_M128;
	}

		/* rewrite MODE with new value            */

	Wr_icc (p_peitab -> pt_r_mode, mode_reg);
	Wr_icc (p_peitab -> pt_r_mask, 0x00);

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: icc_loop ()                                                *
 *    Parms   : p_peitab                                                   *
 *              'on'    TRUE    -> test-loop on                            *
 *                      FALSE   -> test-loop off                           *
 *    purpose: switch testloop on/off                                      *
 *                                                                         *
 ***************************************************************************/

int icc_loop (p_peitab, on_off, chan_id)
	register 	struct	peitab  FAR *p_peitab;
				uchar   	 		 on_off;     	/* ON or OFF */
				add_t				 chan_id;		/* Channel address */
{
				uchar     	 		 r_spcr;

	if (on_off == ON) {

			/* Loop ON                          */

		p_peitab -> pt_state |= PT_LOOP;

		/* enable clocks in TE mode         */

		if (p_peitab -> pt_ModulMode == PT_MM_TE) {

				/*
					Dummy value in the cixr register
					prevents a false interpretation of
					the incoming (looped) C/I channel.
				*/

			if (sbc_enable_clock (p_peitab)) {
				Wr_icc (p_peitab -> pt_r_cixr, 0x6F);
			}

		}

		r_spcr = Rd_icc (p_peitab -> pt_r_spcr);

		if (chan_id == 1) {
			Wr_icc (p_peitab -> pt_r_spcr, r_spcr | (SPCR_B1C1 | SPCR_B1C0));

		} else {

			Wr_icc (p_peitab -> pt_r_spcr, r_spcr | (SPCR_B2C1 | SPCR_B2C0));

		}

	} else {

			/* Loop OFF */

		if (chan_id == 1) {
			r_spcr = Rd_icc (p_peitab -> pt_r_spcr) & ~(SPCR_B1C1 | SPCR_B1C0);

		} else {

			r_spcr = Rd_icc (p_peitab -> pt_r_spcr) & ~(SPCR_B2C1 | SPCR_B1C0);
		}

		Wr_icc (p_peitab -> pt_r_spcr, r_spcr);

		p_peitab -> pt_state &= ~PT_LOOP;

			/* Disable clocks in TE mode */

		if ((p_peitab -> pt_ModulMode == PT_MM_TE)) {

			   /* Wait for dummy value to disappear */

			while ((Rd_icc (p_peitab -> pt_r_cixr) & CODX_ALL_BITS) == 0x2C);

			if ((Rd_icc (p_peitab -> pt_r_cixr) & CODX_ALL_BITS) == CODX_PU) {
				sbc_reset (p_peitab);

			} else {

					/* IBC power down problem */

				if (p_peitab -> pt_Lay1id == IBC_LAY1 || p_peitab -> pt_Lay1id == IBC_A3_LAY1) {

					if ((Rd_icc(p_peitab -> pt_r_cixr) & CODX_ALL_BITS) == CODX_DIU) {
						sbc_reset (p_peitab);
					}

				}

			}

		}

	}

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: icc_b_switch ()                                            *
 *    purpose : switch the B-channels in IOM1 configurations               *
 *                                                                         *
 *        -  to a Data Port ( SSI or SLD depending on module )             *
 *        -  to a Voice Port (SLD)                                         *
 *        -  Loop back to Network                                          *
 *                                                                         *
 *      Refer to the command / response mailbox interface specification    *
 *      for the encoding of the 'chan_ctrl' which is the parameter 1       *
 *      in the CMD #75 sub type 01 'B channel switching TERMINAL'          *                                                                    *
 *                                                                         *
 ***************************************************************************/

int icc_b_switch (p_peitab, chan_ctrl, sip_act)
	register struct	peitab   	FAR	*p_peitab;
			uchar					 chan_ctrl, sip_act;
{
			uchar					 r_spcr;

#	if PH_D_AUDIT == ON
		if (chan_ctrl > 0x0F)
			return (NOK);
#	endif

	if ( ! (p_peitab -> pt_state & PT_IOM2)) {
		r_spcr = Rd_icc (p_peitab -> pt_r_spcr) & 0xF0;

		if (sip_act) {                    /* activate SIP ?                   */
			r_spcr |= SPCR_SAC;           /*  yes, set SAC bit                */

		} else {

			r_spcr &= ~SPCR_SAC;          /*  no, clear SAC bit               */
		}

		Wr_icc (p_peitab -> pt_r_spcr, r_spcr | chan_ctrl);
	}

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function: icc_reset ()  and icc_reset_tx_channel ()                  *
 *    Parms   : p_peitab pointer                                           *
 *    purpose : reset HDLC controller addressed with 'p_peitab'            *
 *                                                                         *
 ***************************************************************************/

int icc_reset (p_peitab)
	register struct peitab	FAR	*p_peitab;
{
			struct buffer	FAR *p_buffer;

		/* Mask the ISAC IT */

	Wr_icc (p_peitab  -> pt_r_mask, 0xFF);

		/* Set transmitter OFF */

	p_peitab  -> pt_tx_cnt = 0;
	p_peitab  -> pt_state &= ~PT_TX_WORKS;

	if (p_peitab  -> pt_rx_start)  {  	/* release receive frame pointer    */
										/* and deallocate the frame buffer  */

		p_buffer = Buffer_a_from_a_start_data (p_peitab  -> pt_rx_start);
		It_free_buffer (p_buffer);
		p_peitab  -> pt_rx_start = P_NIL;
	}

	p_peitab  -> pt_state    &= ~PT_RX_WORKS;
	p_peitab  -> pt_rec_state = 0;

		/* set PT_HDLC_RESET flag to        */
		/* 'controller reset' condition     */
		/* immediately after the reset      */
		/* command a XPR interrupt is       */
		/* generated which can be           */
		/* interpreted correctly with this  */
		/* flag                             */

	p_peitab  -> pt_state |= PT_HDLC_RESET;

		/* the reset commands:              */
		/* - receive message complete (RME) */
		/* - reset hdlc receiver      (RHR) */
		/* - transmitter reset        (XRES)*/

	Wr_icc (p_peitab  -> pt_r_cmdr, CMDR_RMC | CMDR_RHR | CMDR_XRES);

	Wr_icc (p_peitab  -> pt_r_mask, 0);          /* now allow all interrupts again   */

	return (OK);
}

/*--------------------------------------------------------------------------*/

int icc_reset_tx_channel (p_peitab)
	register struct peitab	FAR	*p_peitab;
{

	Wr_icc (p_peitab  -> pt_r_mask, 0xFF);

		/* Set transmitter OFF */

	p_peitab  -> pt_tx_cnt = 0;
	p_peitab  -> pt_state &= ~PT_TX_WORKS;

		/* set PT_HDLC_RESET flag to        */
		/* 'controller reset' condition     */
		/* immediately after the reset      */
		/* command a XPR interrupt is       */
		/* generated which can be           */
		/* interpreted correctly with this  */
		/* flag                             */

	p_peitab  -> pt_state |= PT_HDLC_RESET;

		/* the reset commands:              */
		/* - transmitter reset        (XRES)*/

	Wr_icc (p_peitab  -> pt_r_cmdr, CMDR_XRES);

	Wr_icc (p_peitab  -> pt_r_mask, 0);        /* now allow all interrupts again   */

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function:   icc_send_frame ( )                                       *
 *    Parms   :   counter (cnt), pointer (frame) to a memory area with a   *
 *                data frame to be sent and the flag 'free' to indicate    *
 *                whether the used memory area must be deallocated or not  *
 *    purpose :   Initiate transmission of HDLC frames ( S, U, I, UI )     *
 *                'frame' must point to an IOS intercommunication frame    *
 *                which consists of                                        *
 *                   frame header section and data section                 *
 *                HDLC S and U (i.e. 'short') frames have only a header    *
 *                UI and I (i.e. 'long') frames have header + data section *
 *                transparent frames have only a data section              *
 *                                                                         *
 ***************************************************************************/

uchar icc_send_frame (p_peitab, cnt, p_frame)
	register struct peitab   	FAR *p_peitab;
			ushort        			 cnt;
			uchar				FAR	*p_frame;
{
			uchar                	 cmd;

#	if ASSERT == ON

			/* last transfer not finished yet   */

		if (p_peitab  -> pt_state & PT_TX_WORKS)  {
			return (NOK);
		}

#	endif

		/* data can not be written into the */
		/* XFIFO (XFW = 0); XFIFO blocked.  */

	if (! (Rd_icc (p_peitab  -> pt_r_star) & 0x40)) {
		icc_reset_tx_channel (p_peitab);
	}

		/* This way is not allowed in clear */
		/* B channel operating mode         */

		/* mark the HDLC controller as      */
		/* working in transmit direction    */

	p_peitab  -> pt_state   |= PT_TX_WORKS;
	p_peitab  -> pt_tx_start = p_frame;          /* start pointer to the data frame  */

		/* Now output the data bytes to the */
		/* controller's XFIFO               */

	cmd = CMDR_XTF;

	if (cnt <= PH_FIFO_SIZE) {

			/* if the number of bytes is <= PH_FIFO_SIZE */
			/* the frame can be shifted                  */
			/* completely into the XFIFO                 */

		String_out ((char FAR *)p_frame, p_peitab  -> pt_r_fifo, cnt);
		p_peitab  -> pt_tx_cnt = 0;

		cmd |= CMDR_XME;

	} else {

			/* if the number of bytes is        				*/
			/* greater PH_FIFO_SIZE the first PH_FIFO_SIZE are 	*/
			/* shifted itno the XFIFO, the      				*/
			/* remaining are sent later         				*/
			/* (interrupt service routine)      				*/

		String_out ((char FAR *)p_frame, p_peitab  -> pt_r_fifo, PH_FIFO_SIZE);
		p_peitab  -> pt_tx_cnt  = cnt - PH_FIFO_SIZE;
		p_peitab  -> pt_tx_curr = p_frame + PH_FIFO_SIZE;
	}

	Wr_icc (p_peitab  -> pt_r_cmdr, cmd);  	/* now output the command byte to   */
											 /* the CMDR register                */
		/* Return */

	return (OK);
}

/***************************************************************************
 *                                                                         *
 *    Function:   icc_switch_b_channel ( )                                 *
 *    Parms   :   channel ID set to high during the good time slot         *
 *    purpose :   set the good time slot according to the channel ID       *
 ***************************************************************************/

void icc_switch_b_channel (p_peitab, chan_id)
	register struct peitab   FAR *p_peitab;		/* PEITAB pointer */
			add_t				 chan_id;		/* Channel ID */
{
			uchar				 adf2_reg;

	adf2_reg = Rd_icc (p_peitab -> pt_r_adf2);

	switch (chan_id)	{

				/* B1 */

		case 1 :
			adf2_reg |= PT_ADF2_D1C0;
			break;

				/* B2 */

		case 2 :
			adf2_reg |= PT_ADF2_D1C1;
			break;

				/* NO connection */

		default :
			adf2_reg &= ~(PT_ADF2_D1C0 | PT_ADF2_D1C1 | PT_ADF2_D1C2);
			break;

	}

	Wr_icc (p_peitab -> pt_r_adf2, adf2_reg);
}

/*EOF*/
