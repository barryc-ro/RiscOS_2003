
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mph_u.c
 *
 * $Revision$
 *
 * $Date$
 *
 * For Siemens PEB20xx and compatible transceivers
 *
 * function(s)
 *
 *			mph_d_reset_image_reg_u - implements the RESET of the
 *			image of the chipset registers.
 *
 *		   	mph_d_convert_u_te - implements the conversion of a IOM-2
 *		   	indication coming from the U interface.
 *
 *			mph_d_te_state_machine_u_te - implements activation/
 *		 	deactivation state machine for TE connected to a
 *		 	U-interface transceiver.
 *
 *			mph_d_tx_rq_to_cm_mon_x_u - implements the building
 *			of a channel monitor message for the Siemens IEC-Q
 *			U-interface transceiver in IOM-2 mode.
 *
 *		   	mph_d_reinit_u_te - implements the reinitialization of the
 *		   	Siemens IEC-Q U-interface transceiver in IOM-2 mode.
 *
 *			mph_d_enable_b_u_te - mph_d_disable_b_u_te - implements
 *		 	the B-enabling dans disable of the Siemens IEC-Q
 *			U-interface transceiver in IOM-2 mode.
 *
 *          mph_d_nt_ps_u_te - implements the Power Source update inside
 *			EOC.
 *
 *			mph_d_rq_corrupted_crc_u_te - implements the corrupted CRC
 *			action : ON or OFF
 *
 *			mph_d_write_eoc_u_te - implements the updating of EOC bits.
 *
 *          mph_d_rx_mc_u_te - implements the reception of a Channel
 *		    monitor message from U-interface transceiver in IOM-2 mode.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens IEC-Q V5.1 Driver                        |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_MPH

#include "ph_d.h"

#if PH_D_U == ON

			/* Common variables */

	External_common;
	extern 	struct node					FAR			*p_mph_d_top_node;		/* MPH D tree structure */
	extern	struct PI_tab 				FAR *FAR 	*p_tab_PI_tab;			/* Monitor channel pointer table SCC */

			/* MPH context pointer */

	extern	struct mph_d_na   FAR 					*p_mph_d_na;   		/* MPH D NA pointer */

			/* MPH context pointer */

#	if OPTIMIZATION == SPEED
		extern	struct mph_d_na	FAR * FAR *p_mph_d_na_tab;	/* NA access index table */
#	endif

			/* MPH timer event ID */

extern CONST_ARRAY	uchar MPH_TI_EV_ID [];

#if NEW_FCT_STYLE == ON
	uchar mph_d_tx_rq_to_cm_mon_0_u (uchar address, uchar eoc);
	uchar mph_d_tx_rq_to_cm_mon_1_u (uchar sq, uchar m);
	uchar mph_d_tx_rq_to_cm_mon_2_u (uchar eoc);
	uchar mph_d_tx_rq_to_cm_mon_8_u (uchar reg, uchar command);

#else

	uchar mph_d_tx_rq_to_cm_mon_0_u ();
	uchar mph_d_tx_rq_to_cm_mon_1_u ();
	uchar mph_d_tx_rq_to_cm_mon_2_u ();
	uchar mph_d_tx_rq_to_cm_mon_8_u ();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_reset_image_reg_u - implements the RESET of the
				 image of the chipset registers.

Usage            void uchar mph_d_reset_image_reg_u (p_mph_d_na)
					- p_mph_d_na : context pointer;


common constants and declarations  ph.h, peb2091.h

common : mph_d current context.

*--------------------------------------------------------------------------*/
void mph_d_reset_image_reg_u (p_mph_d_na)
	struct mph_d_na		FAR *p_mph_d_na;
{
	Mph_d_u_mon_0_eoc			=
	Mph_d_u_mon_1_sq_code		=
	Mph_d_u_mon_8_local         =
	Mph_d_u_mon_8_internal_coef =
	Mph_d_u_mon_2_eoc           = 0;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_convert_u_te - implements the convertion of a
				 C/I indication coming from the U interface.

Usage            void uchar mph_d_convert_u_te (event)
						event = NT C/I indication.

common constants and declarations  ph.h, peb2091.h

common : mph_d current context.

*--------------------------------------------------------------------------*/

uchar mph_d_convert_u_te (event)
	uchar			event;		/* IOM-2 NT indication code */
{
		/*
			Convert U event to TE INFO x according to
			Siemens IEC-Q.
		*/

	switch (event) {

		case U_CI_NT_IN_DR :
			event_id = EV_INFO_0;
			break;

		case U_CI_NT_IN_PU :
			event_id = EV_INFO_1;
			break;

		case U_CI_NT_IN_EI1 :
			event_id = EV_LOST_FRAMING;
			break;

		case U_CI_NT_IN_AR :
			event_id = EV_INFO_2;
			break;

		case U_CI_NT_IN_AI :
			event_id = EV_INFO_4;
			break;

		case U_CI_NT_IN_DC :
			event_id = EV_INFO_0;
			break;
	}

	return (event_id);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_te_state_machine_u_te - implements activation/
				 deactivation state machine for TE connected to a
				 U-interface transceiver.

Usage            uchar mph_d_te_state_machine_u_te (uchar event)
					- event : indication received from the component.

common constants and declarations  ph.h, peb2091.h

common : MPH na context.

*--------------------------------------------------------------------------*/

		/* Conformance with the ETSI ----- */

void mph_d_te_state_machine_u_te (event)
	uchar		event;					/* new event detected by the component */
{
	uchar		state;	/* New state */

	state = Mph_d_state;

			/* +++++ Event driven state machine ++++++ */

	switch (event) {

			/*------------------- Loss of power --------------------*/

		case EV_LOSS_OF_POWER :

			Stop_timer							(T103);

			switch (state) {

				case F2 :
					state						= F1;
					break;

				case F3 :
					mph_d_process_event		 	(MPH_II_D);
					state						= F1;
					break;

				case F4 :
				case F5 :
				case F8 :
					mph_d_process_event		 	(MPH_II_D);
					mph_d_process_event			(MPH_DI);
					mph_d_send_to_ph_d			(MPH_DI);
					Mph_d_ci_action ( Mph_d_a_PI_tab, U_CI_NT_RQ_DI);
					state						= F1;
					break;

				case F6 :
				case F7 :
					break;
			}
			break;

			/*------------------- Detection of power --------------------*/

		case EV_DETECTION_OF_POWER :

			switch (state) {

				case F1 :
					state						= F2;
					break;

			}
			break;

			/*------------------- Activate request --------------------*/

		case EV_PH_AR :

			switch (state) {

				case F1 :
				case F2 :
				case F3 :
					Start_timer 				(T103);
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_TIM);
					state						= F4;
					break;

				case F5 :
				case F6 :
					Start_timer 				(T103);
					break;

				case F7 :
					mph_d_send_to_ph_d			(MPH_AI);
					mph_d_process_event			(MPH_AI);
					break;

			}
			break;

			/*------------------- Expiry timer T3 ---------------------*/

		case EV_TI_103 :

			switch (state) {

				case F8 :
					mph_d_process_event		 	(MPH_EI2);

				case F4 :
				case F5 :
					mph_d_process_event		 	(MPH_DI);
					mph_d_send_to_ph_d		  	(MPH_DI);
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_DI);
					state						= F3;
					break;

				case F6 :
					mph_d_process_event		 	(MPH_DI);
					mph_d_send_to_ph_d		  	(MPH_DI);
					break;

			}
			break;

			/*----------------- Expiry ETSI timer T4 ------------------*/

		case EV_TI_104 :

			if (state != F7) {
				mph_d_process_event			 	(MPH_DI);
				mph_d_send_to_ph_d			  	(MPH_DI);
			}
			break;

			/*-------------------- Receiving INFO 0 --------------------*/

		case EV_INFO_0 :

			switch (state) {

				case F1 :
				case F2 :
				case F3 :
					mph_d_process_event		 	(MPH_II_C);
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_DI);
					state						= F3;
					break;

				case F8 :
					mph_d_process_event			(MPH_EI2);

				case F7 :
					Start_timer 				(T104);
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_DI);
					state						= F3;
					break;

				case F4 :
				case F6 :
					mph_d_process_event		 	(MPH_DI);
					mph_d_send_to_ph_d		  	(MPH_DI);
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_DI);
					state						= F3;
					break;

			}
			break;

			/*-------------------- Receiving INFO 1 --------------------*/

		case EV_INFO_1 :

			switch (state) {

				case F1 :
				case F2 :
					mph_d_process_event		 	(MPH_II_C);
					state						= F3;
					break;
				case F4 :
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_AR);
					break;
			}

			/*------------------- Receiving any signal -----------------*/

		case EV_ANY_SIGNAL :

			switch (state) {

				case F4 :
					state						= F5;
					break;

			}
			break;

			/*--------------------  Receiving INFO 2 -------------------*/

		case EV_INFO_2 :

			switch (state) {

				case F2 :
					mph_d_process_event			(MPH_II_C);

				case F3 :
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_AI);
					state 						= F6;
					break;

				case F4 :
				case F5 :
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_AI);
					state 						= F6;
					break;

				case F7 :
				case F8 :
					mph_d_process_event			(MPH_EI1);
					Mph_d_ci_action (Mph_d_a_PI_tab, U_CI_NT_RQ_AR);
					state						= F6;
					break;

			}
			break;

			/*--------------------- Receiving INFO 4 -------------------*/

		case EV_INFO_4 :

					/* Active state : stop CCITT T3 and ETSI timer T4 */

			Stop_timer							(T103);
			Stop_timer							(T104);

			mph_d_process_event					(MPH_II_C);

			switch (state) {

				case F1 :
				case F2 :
				case F3 :
				case F4 :
				case F5 :
					mph_d_send_to_ph_d			(MPH_AI);
					mph_d_process_event			(MPH_AI);
					state						= F7;
					break;

				case F6 :
				case F8 :
					mph_d_send_to_ph_d			(MPH_AI);
					mph_d_process_event			(MPH_AI);
					mph_d_process_event			(MPH_EI2);
					state	 					= F7;
					break;

			}
			break;

			/*---------------------- Lost framing ---------------------*/

		case EV_LOST_FRAMING :

			switch (state) {

				case F6 :
				case F7 :
					mph_d_process_event			(MPH_EI1);
					state						= F8;
					break;

			}
			break;

			/*------------------------ NIL ----------------------------*/

		default :
			break;
	}

	Mph_d_state = state;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_tx_rq_to_cm_mon_x_u - implements the building
				 of a channel monitor message for the Siemens IEC-Q
				 U-interface transceiver in IOM-2 mode.

Usage            void uchar mph_d_tx_rq_to_cm_mon_0_u (address, eoc)
				 void uchar mph_d_tx_rq_to_cm_mon_1_u (sq, m)
				 void uchar mph_d_tx_rq_to_cm_mon_2_u (eoc)
				 void uchar mph_d_tx_rq_to_cm_mon_8_u (reg, command)

common constants and declarations  ph.h, peb2091.h

common : mph_d current context.

*--------------------------------------------------------------------------*/

uchar mph_d_tx_rq_to_cm_mon_0_u (address, eoc)
	uchar				address;			/* Address */
	uchar				eoc;				/* eoc */
{
	uchar     			parm [2];

		/* setup the command */

	parm[0]		= (uchar)(	Sfi (U_MC_CODE, 			U_MC_CODE_MON_0) |
							Sfi (U_MC_MON_0_ADDRESS, 	address)		 |
							Sfi (U_MC_MON_0_DM, 		1));

	parm[1]		= (uchar)	Sfi (U_MC_MON_0_EOC,		eoc);

		/* transmit the command */

	return(wr_mon (Mph_d_a_PI_tab, (uchar FAR *)parm, 2));

}

/*--------------------------------------------------------------------------*/

uchar mph_d_tx_rq_to_cm_mon_1_u (sq, m)
	uchar				sq;					/* S/Q-code */
	uchar				m;					/* M-bits */
{
	uchar     			parm [2];

		/* setup the command */

	parm[0]		= (uchar)(	Sfi (U_MC_CODE, 			U_MC_CODE_MON_1) |
							Sfi (U_MC_MON_1_PAD, 		G_4 (0,0,0,0)));

	parm[1]		= (uchar)	Sfi (U_MC_MON_1_SQ_CODE,	sq) |
							Sfi (U_MC_MON_1_M,			m);
		/* transmit the command */

	return(wr_mon (Mph_d_a_PI_tab, (uchar FAR *)parm, 2));

}

/*--------------------------------------------------------------------------*/

uchar mph_d_tx_rq_to_cm_mon_2_u (eoc)
	uchar				eoc;				/* EOC */
{
	uchar     			parm [2];

		/* setup the command */

	parm[0]		= (uchar)(	Sfi (U_MC_CODE, 			U_MC_CODE_MON_2) |
							Sfi (U_MC_MON_2_OBH, 		(eoc >> 8)));

	parm[1]		= (uchar)	Sfi (U_MC_MON_2_OBL,		((uchar)(eoc)));

		/* transmit the command */

	return(wr_mon (Mph_d_a_PI_tab, (uchar FAR *)parm, 2));

}

/*--------------------------------------------------------------------------*/

uchar mph_d_tx_rq_to_cm_mon_8_u (reg, command)
	uchar				reg;				/* local or internal */
	uchar				command;			/* command or coefficient address */
{
	uchar     			parm [2];

		/* setup the command */

	parm[0]		=   (uchar)(	Sfi (U_MC_CODE, 			U_MC_CODE_MON_8) |
								Sfi (U_MC_MON_8_REGISTER, 	reg)			 |
								Sfi (U_MC_MON_8_ADDRESS, 	0));

	parm[1]		=   (uchar)	Sfi (U_MC_MON_8_LOCAL_CODE,	command);

		/* transmit the command */

	return(wr_mon (Mph_d_a_PI_tab, (uchar FAR *)parm, 2));

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_nt_ps_u_te - implements the Power Source update inside
				 EOC.

Usage            void mph_d_nt_ps_u_te ()

common constants and declarations  ph.h, mc145572.h

common : mph d current context : Mph_d_nt_ps = PS EOC bits

*--------------------------------------------------------------------------*/

						/* U  Power management */

void mph_d_nt_ps_u_te ()
{
}

#if PH_D_EOC ==	ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_rq_corrupted_crc_u_te - implements the corrupted CRC
				 action : ON or OFF

Usage            void mph_d_rq_corrupted_crc_u_te ()

common constants and declarations  ph.h, mc145572.h

common : mph d current context

*--------------------------------------------------------------------------*/

void mph_d_rq_corrupted_crc_u_te (on_off)
	uchar	on_off;
{
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_write_eoc_u_te - implements the updating of EOC bits.

Usage            void  mph_d_write_eoc_u_te (eoc)
					- eoc : new EOC value (12 bits)

common constants and declarations  ph.h, mc145572.h

common : mph d current context

*--------------------------------------------------------------------------*/

void mph_d_write_eoc_u_te (eoc)
	ushort 		eoc;
{
		/* Write EOC */

	mph_d_tx_rq_to_cm_mon_1_u (0, (eoc >> 8));
	mph_d_tx_rq_to_cm_mon_2_u ((uchar)eoc);
}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_reinit_u_te - implements the reinitialization of the
				 Siemens IEC-Q U-interface transceiver in IOM-2 mode.

Usage            void uchar mph_d_reinit_u_te ()

common constants and declarations  ph.h, peb2091.h

common : mph_d current context.

*--------------------------------------------------------------------------*/

void mph_d_reinit_u_te ()
{
	struct PI_tab				FAR *p_PI_tab = Mph_d_a_PI_tab;

		/* Wake-up and set-up IOM-2 */

		/* Init the IEC-Q in transceiver mode */

	if (iec_init (p_PI_tab, p_PI_tab -> pt_ModulMode) == NOK) {

#		if ASSERT == ON
			Trap (TRAP_MPH_INIT, "mph_d_reinit_u_te");
#		endif

	}

		/* Disable B1 and B2 access */

	mph_d_disable_b_u_te (B1_CHANNEL);
	mph_d_disable_b_u_te (B2_CHANNEL);

		/* Read chip id to check monitor channel */

	mph_d_tx_rq_to_cm_mon_8_u (U_MC_MON_8_REGISTER_LOCAL, U_MC_MON_8_LOCAL_CODE_RID);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_enable_b_u_te - mph_d_disable_b_u_te - implements
				 the B-enabling or disable of the Siemens IEC-Q
				 U-interface transceiver in IOM-2 mode.

Usage            void uchar mph_d_enable_b_u_te  (chan_id)

				 void uchar mph_d_disable_b_u_te (chan_id)
					- chan_id : channel Id.

common constants and declarations  ph.h

common : mph_d current context.

*--------------------------------------------------------------------------*/

void mph_d_disable_b_u_te (chan_id)
	uchar		chan_id;
{

	switch (chan_id) {

		case B1_CHANNEL :
			break;

		case B2_CHANNEL :
			break;
	}

		/* NOP ! */
}

/*--------------------------------------------------------------------------*/

void mph_d_enable_b_u_te (chan_id)
	uchar		chan_id;
{

	switch (chan_id) {

		case B1_CHANNEL :
			break;

		case B2_CHANNEL :
			break;
	}
		/* NOP ! */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_stop_u_te - implements the reinitialization of the
				 Siemens IEC-Q U-interface transceiver in IOM-2 mode.

Usage            void uchar mph_d_stop_u_te ()

common constants and declarations  ph.h, peb2091.h

common : mph_d current context.

*--------------------------------------------------------------------------*/

void mph_d_stop_u_te ()
{

			/* Disable B1 and B2 */

		mph_d_disable_b_u_te (B1_CHANNEL);
		mph_d_disable_b_u_te (B2_CHANNEL);

			/*
				Load the U interface transceiver registers
				using the monitor channel through SMC1.
			*/

			/* STOP the U interface state machine */

		Mph_d_ci_action(Mph_d_a_PI_tab, U_CI_NT_RQ_DI);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mph_d_rx_mc_u_te - implements the reception of a Channel
				 monitor message from U-interface transceiver in IOM-2 mode.

Usage            void uchar mph_d_rx_mc_u_te  (p_data)
					- p_data : pointer on data.


common constants and declarations  ph.h

common : mph_d current context.

*--------------------------------------------------------------------------*/

void mph_d_rx_mc_u_te (p_data)
	uchar 	FAR *p_data; 	/* message data pointer */
{
		/* Switch according to operation code */

	switch (Get_field (*p_data, U_MC_CODE)) {

		case U_MC_CODE_MON_0 :
			if (Get_field (*p_data++, U_MC_MON_0_ADDRESS) == U_MC_MON_0_ADDRESS_NT) {
				Mph_d_u_mon_0_eoc = Get_field (*p_data, U_MC_MON_0_EOC);
			}
			break;

		case U_MC_CODE_MON_1 :
			Mph_d_u_mon_1_sq_code = Get_field (*++p_data, U_MC_MON_1_SQ_CODE);
			break;

		case U_MC_CODE_MON_2 :
			Mph_d_u_mon_2_eoc = (Get_field (*p_data++, 	U_MC_MON_2_OBH) << 8) |
								(Get_field (*p_data, 	U_MC_MON_2_OBL));
			break;

		case U_MC_CODE_MON_8 :

			switch (Get_field (*p_data++, U_MC_MON_8_REGISTER)) {

				case U_MC_MON_8_REGISTER_LOCAL		:
					Mph_d_u_mon_8_local = Get_field (*p_data, 	U_MC_MON_8_LOCAL_CODE);
					break;

				case U_MC_MON_8_REGISTER_INTERNAL	:
					Mph_d_u_mon_8_internal_coef = Get_field (*p_data, 	U_MC_MON_8_INTERNAL_COEF);
					break;
			}

			break;

		default :
/*			Trap (TRAP_RX_ERROR, "mph_d_rx_mc_u_te"); */
			break;

	}

}

#endif

/*EOF*/
