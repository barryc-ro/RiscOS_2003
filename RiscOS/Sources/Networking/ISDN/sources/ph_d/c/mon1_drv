
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mon1_drv.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/***************************************************************************
 *                                                                         *
 *    SIEMENS ISDN-Userboard  (c) 1987-1989                                *
 *    ======================                                               *
 *                                                                         *
 *    Firmware:   SLD + MON access                                         *
 *    File    :   mofc.c                                                   *
 *    created :   July 1989                                                *
 *    author  :   Frank Dowling, Peter Mueller                             *
 *    compiled:   Microsoft C compiler Rel. 5.1 (Small memory model)       *
 *                                                                         *
 ***************************************************************************/

   /* History
	  ======================================================================
	  date  author   reason

	  --------------------------------------------------------------------*/

#define ENTITY ENT_MPH

   /* Include Files
	  =============  */

#include "ph_d.h"

#if (PH_CODEC == ARCOFI_2160) || (PH_CODEC == ARCOFI_2163) || (PH_CODEC == ARCOFI_2165)

#include "arcofi.h"

#define TEST  	1

	/* Local Functions
	   ===============   */

#if NEW_FCT_STYLE == ON
	uchar         check_stat_mon1 (struct peitab FAR *);

#else

	uchar         check_stat_mon1 ();
#endif

/***************************************************************************
 *                                                                         *
 *    Function :  rd_mon1 ()                                               *
 *    Parms    :                                                           *
 *    purpose  :  read data from MON1 (IOM2)                               *
 ***************************************************************************/

int rd_mon1 (p_peitab, cmd, parm, cnt)
	struct peitab FAR 	*p_peitab;
	uchar        		 cmd;
	uchar			FAR *parm;
	int         		 cnt;
{
	unsigned int     	state, i = 0, busy, exec_status = OK;
	int               	Cnt = cnt, rep_cnt = 0;
	uchar              	dummy, dev_id, mstat, err_flags = 0x00;

	if (cnt <= 0) {
		return (NOK);
	}

	if (p_peitab -> pt_ModulMode == PT_MM_TE) {
		sbc_enable_clock (p_peitab);
	}

	It_disable_sbc (state);

	Wr_sbc (p_peitab -> pt_r_mask, ~MASK_EXI);

	do {

		Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1));

		err_flags   = 0x00;
		exec_status = OK;

			/* Cnt is the real number of bytes  */
			/* to read.                         */
			/* Cnt must be decremented to get   */
			/* with the right offset when       */
			/* using 'parm [Cnt]'               */

		Cnt         = cnt;
		Cnt--;

			/* clear CIR1 and MOSR              */

		dummy = Rd_sbc (p_peitab -> pt_r_cix1);
		dummy = Rd_sbc (p_peitab -> pt_r_cix1);
		dummy = Rd_sbc (p_peitab -> pt_r_mocr);
		dummy = Rd_sbc (p_peitab -> pt_r_mocr);

			/* Write address device at MON1    */

		Wr_sbc (p_peitab -> pt_r_mox1, Mon1_addr);

		Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1 | MOCR_MXC1));

		mstat = check_stat_mon1 (p_peitab);

			/* No acknowledge or data abort ?   */

		if ( ( ! (mstat & MOSR_MDA1)) || (mstat & MOSR_MAB1)) {
			exec_status = NOK;
			err_flags 	= 0x01;
			rep_cnt++;
			continue;
		}

		Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1 | MOCR_MXC1));

			/* Write the command byte */

		Wr_sbc (p_peitab -> pt_r_mox1, cmd);

			/* Prepare the read access          */
			/* the MON data acknowledge and     */
			/* the 'data received' indication   */
			/* do not arrive simultanously.     */
			/* Therefore following contruction  */

		mstat = check_stat_mon1 (p_peitab);

		if ((mstat & MOSR_MASK1) != (MOSR_MDR1 | MOSR_MDA1)) {
			mstat |= check_stat_mon1 (p_peitab);
		}

		if ((mstat & MOSR_MASK1) != (MOSR_MDR1 | MOSR_MDA1)) {
		}

		dev_id = Rd_sbc (p_peitab -> pt_r_mox1);   /* read the MON channel 1 data      */
												   /* first byte is device ID          */

		if ((dev_id & Mask_field (IDENT_ADDRESS))  != (Mon1_addr & Mask_field (IDENT_ADDRESS))) {
			err_flags  |= 0x02;
			exec_status = NOK;
			rep_cnt++;
			continue;
		}

			/* Enable MON handshake in receive direction */

		Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MRC1 | MOCR_MXE1 | MOCR_MXC1));

		busy = TRUE;

		do  {

				/* That is the do-while loop where  */
				/* the bytes are read from MON 1    */

			mstat = check_stat_mon1 (p_peitab);

			switch (mstat & MOSR_MASK1) {

					/* End of reception */

				case MOSR_MER1:
					busy 	= FALSE;
					rep_cnt = 10;
					break;

					/* Unexpected response */

				default:
					exec_status = NOK;
					err_flags  |= 0x04;

					/* Data Received */

				case MOSR_MDR1:

						/* Read data */

					parm [Cnt] = Rd_sbc (p_peitab -> pt_r_mox1);

						/* End of Transmission ? */

					if (Cnt <= 0) {

							/* Yes - check until End of Data */

						busy = FALSE;

#						if PH_D_AUDIT == ON

							for (;;) {

								if ((mstat = check_stat_mon1 (p_peitab)) != MOSR_MER1) {
									dummy = Rd_sbc (p_peitab -> pt_r_mox1);

								} else {

									break;
								}

							}

#						endif


					} else {

						Cnt--;
					}
					break;
			}

		} while (busy);

		if (err_flags) {
			rep_cnt++;

		} else {

			rep_cnt = 10;
		}

		Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1));

			/* Repeat the reading when          */
			/* errors have occurred and while   */
			/* the repeat count 'rep_cnt' is    */
			/* not expired !!!                  */

	} while (rep_cnt < 10);

	Wr_sbc (p_peitab -> pt_r_mask, 0x00);
	It_enable_sbc (state);

			/* Reverse byte order               */

	for (i = 0, Cnt = cnt; i < (Cnt / 2); i++) {
		uchar     b;

		b        			= parm [i];
		parm [i]  			= parm [Cnt - 1 - i];
		parm [Cnt - 1 - i] 	= b;
	}

	return (exec_status);
}

/***************************************************************************
 *                                                                         *
 *    Function :  wr_mon1 ()                                               *
 *    Parms    :  parameter-array, counter for parameters                  *
 *    purpose  :  write to MON1                                            *
 *                                                                         *
 ***************************************************************************/
int wr_mon1 (p_peitab, p_parm, byte_count)
	struct peitab 		FAR	*p_peitab;
	uchar				FAR	*p_parm;
	register int   			 byte_count;
{
	int            			 rep_cnt, exec_status = OK;
	register int   			 cnt = byte_count;
	unsigned int   			 i, state;
	uchar           		 mstat, dummy, err_flags = 0x00;

	if (p_peitab -> pt_ModulMode == PT_MM_TE) {
		sbc_enable_clock (p_peitab);
	}

		/* Reverse byte order               */

	for (i = 0; i < (cnt / 2); i++) {
		uchar     b;

		b         			 = p_parm [i];
		p_parm [i]  		 = p_parm [cnt - 1 - i];
		p_parm [cnt - 1 - i] = b;
	}

		/* Decrement the pointer to the     */
		/* data bytes to get the right      */
		/* offset when using 'parm [cnt]'   */
		/* ( 'cnt' is always the real       */
		/* number of data bytes )           */

	p_parm--;

	It_disable_sbc (state);

	Wr_sbc (p_peitab -> pt_r_mask, ~MASK_EXI);

	rep_cnt = 0;		/* Init repeat count */

	do {
		err_flags   = 0x00;
		exec_status = OK;
		cnt         = byte_count;

		Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1));

			/* Clear CIR1 and MOSR */

		dummy = Rd_sbc (p_peitab -> pt_r_cix1);
		dummy = Rd_sbc (p_peitab -> pt_r_cix1);
		dummy = Rd_sbc (p_peitab -> pt_r_mocr);
		dummy = Rd_sbc (p_peitab -> pt_r_mocr);

			/* Write address device at MON1 */

		Wr_sbc (p_peitab -> pt_r_mox1, Mon1_addr);

		Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1 | MOCR_MXC1));

		mstat = check_stat_mon1 (p_peitab);

			/* No acknowledge or Abort ?        */

		if ( ( ! (mstat & MOSR_MDA1)) || (mstat & MOSR_MAB1)) {
			rep_cnt++;
			err_flags   = 0x01;
			exec_status = NOK;
			continue;
		}

		do {

				/* Write the data bytes to MON1     */

			Wr_sbc (p_peitab -> pt_r_mox1, p_parm [cnt]);

			mstat = check_stat_mon1 (p_peitab);

			if ( ( ! (mstat & MOSR_MDA1)) || (mstat & MOSR_MAB1)) {
				rep_cnt++;
				err_flags  |= 0x02;
				cnt 		= 1;
				exec_status = NOK;
			}

		} while (--cnt);


			/* Tranmit End Of Transmission */

		Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1));

		if ( ! err_flags) {
			rep_cnt = 5;	/* Force exit */
		}

			/* Repeat the write procedure when  */
			/* errors have occurred and while   */
			/* the repeat count 'rep_cnt' is    */
			/* not expired !!!                  */

	} while (rep_cnt < 3);

	Wr_sbc (p_peitab -> pt_r_mask, 0x00);

	It_enable_sbc (state);

	return (exec_status);
}

/***************************************************************************
 *                                                                         *
 *    Function :  addr_mon1 ()                                             *
 *    Parms    :  'mon_address'    byte to address a device at MON1        *
 *    purpose  :  program MON1 address                                     *
 ***************************************************************************/

void addr_mon1 (p_peitab, mon_address)
	struct peitab 			FAR *p_peitab;
	uchar     					 mon_address;
{
	Mon1_addr   = mon_address;
}

/***************************************************************************
 *                                                                         *
 *    Function :  check_stat_mon1 ()                                       *
 *    Parms    :  'p_peitab' pointer to PEITAB table element                     *
 *    purpose  :  poll EXIR to detect MON channel status changes           *
 *                                                                         *
 ***************************************************************************/

uchar check_stat_mon1 (p_peitab)
	struct peitab				FAR *p_peitab;
{
	register unsigned long   	 	 i = 0;
	uchar                    		 dummy, mocr, exir;

		/* Read register CIR1 twice         */
		/* (B1/2 problems ! )               */

	dummy = Rd_sbc (p_peitab -> pt_r_cix1);
	dummy = Rd_sbc (p_peitab -> pt_r_cix1);

	while (i++ < 100000L) {

			/* Wait for EXIR:MOS or timeout */

		exir = Rd_sbc (p_peitab -> pt_r_exir);

		if (exir & EXIR_MOS) {
			break;
		}

	}

	mocr = Rd_sbc (p_peitab -> pt_r_mocr);    /* read status MOSR (same address as MOCR) */

		/* Return Monitor Channel Status */

	return (mocr);
}

/***************************************************************************
 *                                                                         *
 *    Function :  mon1_ident ()                                            *
 *    Parms    :                                                           *
 *    purpose  :  request identifier of devices via MON1                   *
 ***************************************************************************/

uchar mon1_ident (p_peitab, id_cmd, id_code)
	struct peitab 			FAR *p_peitab;
	uchar           		 	 id_cmd;
	uchar 			  		FAR	*id_code;
{
	int                  		 failed = FALSE;
	unsigned int         		 state;
	uchar                		 dummy, mstat;

	if (p_peitab -> pt_ModulMode == PT_MM_TE) {
		sbc_enable_clock (p_peitab);
	}

	Wr_sbc (p_peitab -> pt_r_mask, ~MASK_EXI);
	It_disable_sbc (state);

		/* Read MOSR to prevent any misinterpretations */

	Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1));

	dummy = Rd_sbc (p_peitab -> pt_r_cix1);
	dummy = Rd_sbc (p_peitab -> pt_r_cix1);
	dummy = Rd_sbc (p_peitab -> pt_r_mocr);
	dummy = Rd_sbc (p_peitab -> pt_r_mocr);

	Wr_sbc (p_peitab -> pt_r_mox1, id_cmd);

	Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1 | MOCR_MXC1)); /* MON1 interrupts enabled */

	mstat = check_stat_mon1 (p_peitab);

		/* Wait for MON status change and   */
		/* request status byte              */
		/* transmission aborted ?           */
		/* no reaction at all ?             */

	if ( ( ! (mstat & MOSR_MDA1)) || (mstat & MOSR_MAB1)) {

			/* Then try again */

		mstat |= check_stat_mon1 (p_peitab);

		if ( ( ! (mstat & MOSR_MDA1)) || (mstat & MOSR_MAB1)) {
			failed = TRUE;
		}

	}

		/* Send the 0x00 after the ID       */
		/* command byte.					*/
		/* the data acknowledge and data    */
		/* receive indications may not      */
		/* arrive simultanuously ->         */
		/* check twice                      */

	Wr_sbc (p_peitab -> pt_r_mox1, 0x00);

	mstat  = check_stat_mon1 (p_peitab);

	if ((mstat & MOSR_MASK1) != (MOSR_MDR1 | MOSR_MDA1)) {
		mstat |= check_stat_mon1 (p_peitab);
	}

		/* Transmission aborted ?           */
		/* no transmit acknowledge ?        */
		/* MDR indication ?                 */

	if ((mstat & MOSR_MASK1) != (MOSR_MDR1 | MOSR_MDA1)) {
		failed = TRUE;
	}

		/* Here is looking at the first     */
		/* ID byte of the addressed device  */
		/* (!!!!)                           */

	id_code [0] = Rd_sbc (p_peitab -> pt_r_mox1);

		/* Read the first byte of the ID    */
		/* after the first byte the ICC is  */
		/* enabled to handle the MON        */
		/* channel data transfer itself     */

	Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MRC1 | MOCR_MXE1 | MOCR_MXC1));

		/* MX1/MR1 bits controlled by ICC   */
		/* to enable reception of the next  */
		/* ID byte                          */

	mstat = check_stat_mon1 (p_peitab);

	if ( ! (mstat & MOSR_MDR1) ) {
		failed = TRUE;
	}

		/* Read the second byte of the ID   */

	id_code [1] = Rd_sbc (p_peitab -> pt_r_mox1);

	if ( ! (mstat & MOSR_MER1) ) {
		mstat = check_stat_mon1 (p_peitab);

		if ( ! (mstat & MOSR_MER1) ) {
			failed = TRUE;
		}

	}

	Wr_sbc (p_peitab -> pt_r_mocr, (MOCR_MRE1 | MOCR_MXE1));

	Wr_sbc (p_peitab -> pt_r_mask, 0x00);

	It_enable_sbc (state);

	if (failed) {

		return (NOK);

	} else {

		return (OK);
	}

}

/***************************************************************************
 *                                                                         *
 *    Function :  mon1_acc ()                                              *
 *    Parms    :  2 parameter-array (input and output), count of paramters *
 *    purpose  :  It allows the writing of data to the IOM 2 monitor       *
 *                channel 1                                                *
 *                                                                         *
 ***************************************************************************/

int mon1_acc (p_peitab, cnt, cmd_low, cmd_high, r_type)
	struct peitab   FAR 	*p_peitab;
	uchar           		 cmd_low, cmd_high, r_type;
	uint            		 cnt;
{
	uint            		 i, j, state, send, ack;
	uchar           		 resp [2], mstat;

	if (p_peitab -> pt_ModulMode == PT_MM_TE) {
		sbc_enable_clock (p_peitab);
	}

	i = 0;

			/*    *****  I O M 2  *****         */
			/* dont want IEC itself preventing  */
			/* its own access but want it to be */
			/* ready to receive                 */

	Wr_sbc (p_peitab -> pt_r_mocr, 0xA0);

		/* Flush out monitor registers      */

	if (Rd_sbc (p_peitab -> pt_r_mocr) & 0x10) {
		Wr_sbc (p_peitab -> pt_r_mocr, 0x00);
		Wr_sbc (p_peitab -> pt_r_mocr, 0xA0);
	}

	mstat = Rd_sbc (p_peitab -> pt_r_mox1);

		/* Wait if a transmission in MON0   */
		/* is still in progress             */
		/* (STAR:MAC0)                      */

	while (Rd_sbc (p_peitab -> pt_r_star) & 0x04) {

		if (i++ > 30000) {
			Wr_sbc (p_peitab -> pt_r_mocr, 0x00);
			return (NOK);
		}

	}

		/* This handshake is time critical  */
		/* in the IEC-Q case ...therefore   */

	It_disable_sbc (state);	/* disable processor interrupts     */

	switch (cnt) {

		case 1:                       	/* one word exchange (cnt = 1)      */
			i	= 0;
			j	= 0;
			ack = 0;

			resp [0] = 0xFF;           	/* dummy value                      */
			resp [1] = 0xFF;

				/* mask all interrupts except the   */
				/* extended register interrupt      */

			Wr_sbc (p_peitab -> pt_r_mask, ~MASK_EXI);

			Wr_sbc (p_peitab -> pt_r_mox1, cmd_high);
			send = TRUE;

				/* MXC0=1, MIE0 & MRE0 enabled      */

			Wr_sbc (p_peitab -> pt_r_mocr, 0xB0);

				/* check for MDA indication in MOSR */

			while (j < 16) {     		/* make 16 attempts for a response  */

				mstat = check_stat_mon1 (p_peitab);

				if (mstat == 0x00) {   		/* Monitor channel end of           */
											/* reception                        */
					j++;
					continue;
				}

				if (mstat & 0x10) {    /* Monitor channel data abort       */
					Wr_sbc (p_peitab -> pt_r_mocr, 0x00);
					Wr_sbc (p_peitab -> pt_r_mask, 0x00);
					It_enable_sbc (state);
					return (NOK);
				}

				if (mstat & 0x20) {    /* monitor channel data             */
										/* acknowledge                      */
					ack++;

					if (send) {
						Wr_sbc (p_peitab -> pt_r_mox1, cmd_low);
						send = FALSE;

					} else {

						Wr_sbc (p_peitab -> pt_r_mocr, 0xA0);
					}

				}

				if (mstat & 0x80) {    /* Monitor channel data received    */

					if (i < 2) {        /* We can handle up to two          */
										/* responses only                   */

						resp[i] = Rd_sbc (p_peitab -> pt_r_mox1);

						if (i == 0) {   /* enable receiver MRC              */
							Wr_sbc (p_peitab -> pt_r_mocr, 0xE0);
						}

						i++;
					}

				}

				if (mstat & 0x40) {  	/* Monitor channel end of           */
										/* reception                        */

					Wr_sbc (p_peitab -> pt_r_mocr, 0x00);
					break;            	/* get out of while                 */
				}

			}
			break;

		case 0:                       	/* all IEC-Q EOC commands require   */

		default:                      	/* a two byte exchange protocol     */

			Wr_sbc (p_peitab -> pt_r_mask, 0x00);
			Wr_sbc (p_peitab -> pt_r_mocr, 0x00);
			It_enable_sbc (state);
			return (NOK);
	}

	if (ack != 2) {
		Wr_sbc (p_peitab -> pt_r_mask, 0x00);
		Wr_sbc (p_peitab -> pt_r_mocr, 0x00);
		It_enable_sbc (state);
		return (NOK);
	}

	Wr_sbc (p_peitab -> pt_r_mask, 0x00);
	Wr_sbc (p_peitab -> pt_r_mocr, 0x00);

	switch (r_type) {

		case 0x10:

		case 0x80:
			break;

		case 0x11:
		default:
			break;
	}

   It_enable_sbc (state);

   return (OK);
}

#endif

/*EOF*/

