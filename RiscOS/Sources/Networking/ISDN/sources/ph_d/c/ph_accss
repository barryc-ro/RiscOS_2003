
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ph_accss.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         ph_d_build - implements the building of the physical D channel
 *         entity (PH D) objects and access mechanisms.
 *
 *         ph_d_access_nai - implements the access to the NA object of the
 *         PH D entity.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY ENT_PH_D

#include "ph_d.h"

            /* Common external variables */

    External_common;
    extern  struct  node        FAR *p_ph_d_top_node;
	extern  struct  ph_d_na     FAR *p_ph_d_na;
	extern  struct 	peitab FAR * FAR *p_tab_peitab_isac;

#if OPTIMIZATION == SPEED
	extern	struct ph_d_na FAR *FAR *p_ph_d_na_tab;		/* NA access index table */
#endif

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            ph_d_build_object - implements the building of the ph_d
									entity objects.

Usage           ph_d_build_object (struct ph_d_config FAR *p_ph_d_config);
                    - p_ph_d_config : pointer on the data configuration.

Description     ph_d_build_object implements the building of the physical B
                objects (na) on a structure allocated inside
                the Variable Length partition memory :

                           | (p_ph_d_top_node
                           v
                    na --> na --> na ..... --> na

                Each occurrence of object is initialized to NIL value.

Return value    uchar return code = OK  done
                                  = NOK failed

Common constants and declarations : ph.h, ph_int.h

Common objects :

*--------------------------------------------------------------------------*/

uchar ph_d_build_object (p_ph_d_config)
    struct ph_d_config  FAR *p_ph_d_config;         /* pointer on the configuration data */
{
    uchar                       i;                  /* index */
    struct ph_d_na_config   FAR *p_ph_d_na_config;  /* pointer on the current na object of
                                                       the configuration data */
    uchar                   FAR *p_current;         /* memory alloc current pointer */
    struct node             FAR *p_node_na;         /* node pointer */
    struct node             FAR *p_top_node = P_NIL;/* current top node pointer */
    uchar                   FAR *p_blk;             /* memory block pointer */

        /* Object occurence building */

#   if OPTIMIZATION == SPEED

            /* Build a  NA access table if not done */

        if (p_ph_d_na_tab == P_NIL) {

            if ((p_ph_d_na_tab = (struct ph_d_na FAR *FAR *)Mem_alloc (sizeof (struct ph_d_na FAR *) * Na_nb, PID_VL)) == P_NIL) {
                return (NOK);
            }

        }

#   endif

        /* Build IT access tables to PH context */

    if ((p_tab_peitab_isac == P_NIL) && (Ph_d_config_isac_nb != 0)) {

            if ((p_tab_peitab_isac = (struct peitab FAR *FAR *)Mem_alloc (sizeof (struct peitab FAR *) * Ph_d_config_isac_nb, PID_VL)) == P_NIL) {
                return (NOK);
            }

    }

                        /* NA LOOP */

    for (i = 0; i < Ph_d_config_na_nb; i++) {

        p_ph_d_na_config = Ph_d_config_a_na (i);

            /* Check the NAI validity. If already present --> error */

        if ((Ph_d_config_nai >= Na_nb) || (ph_d_access_nai (Ph_d_config_nai) == OK)) {
            return (NOK);
        }

            /* Memory allocation */

        if ((p_blk = p_current = Mem_alloc (Rnd_sizeof (struct node) + Ph_d_size, PID_VL)) == A_NIL) {
            return (NOK);
        }

        if (p_top_node == P_NIL) {
            p_top_node = (struct node FAR *)p_current;
        }

            /* Init the node structure pointers */

        if ( i != 0) {
            p_node_na -> p_next = (struct node FAR *) p_current;
        }

        p_node_na               = (struct node FAR *) p_current;
        p_node_na -> p_next     = P_NIL;
        p_node_na -> p_dp       = P_NIL;

        p_ph_d_na               = (struct ph_d_na FAR *) (p_node_na +1);

            /* Load the access key */

        Ph_d_nai                = Ph_d_config_nai;          /* network access ID */

            /*  Load the memory block pointer */

        Ph_d_p_mem_blk          = p_blk;

#       if OPTIMIZATION == SPEED

                /* Load Na pointer into NA index table */

			p_ph_d_na_tab[Ph_d_nai]  = p_ph_d_na;
#       endif

    }

        /* Set the NA links */

    if (p_ph_d_top_node == P_NIL) {
        p_ph_d_top_node = p_top_node;
    } else {

            /* Link the new NA thread to the existing one */

        for (p_node_na  = p_ph_d_top_node; Next(p_node_na) != P_NIL; p_node_na = Next(p_node_na));

        Next(p_node_na) = p_top_node;
    }

    return (OK);
}

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name             ph_d_access_nai, - implements the access to the MPH D
                 data structures using NAI.

Usage            uchar ph_d_access_nai (nai)
                    - nai   : Network access ID.

Return value    return code = OK  found,
                            = NOK not found.

common constants and declarations  ph.h

common : p_ph_d_na_tab, p_ph_d_top_node, p_ph_d_na.

*---------------------------------------------------------------------------*/

uchar   ph_d_access_nai (nai)
    nai_t           nai;    /* Network access ID */
{

#   if OPTIMIZATION != SPEED
        struct node     FAR *p_node;
#   endif

        /* Check Nai validity */

    if (nai >= Na_nb) {
        return (NOK);
    }

#   if OPTIMIZATION == SPEED

        if ((p_ph_d_na = p_ph_d_na_tab[nai]) == P_NIL) {
            return (NOK);
        } else {
            return (OK);
        }

#   else

            /*
                Init the starting address of the node structure
                and the tree scanning.
            */

        for (p_node = p_ph_d_top_node; p_node != P_NIL; p_node = Next_node) {
            p_ph_d_na = (struct ph_d_na FAR *) (p_node + 1);

            if (Ph_d_nai == nai) {
                return (OK);
            }

        }

            /* Not found */

        p_ph_d_na   = P_NIL;
        return (NOK);

#   endif

}

/*-------------------------------------------------------------------------*/

void ph_d_access_first_na ()
{
    struct node     FAR *p_node;    /* temporary pointer on a node */

    if ((p_node = p_ph_d_top_node) != P_NIL) {
        p_ph_d_na = (struct ph_d_na FAR *) (p_node + 1);

    } else {
        p_ph_d_na = P_NIL;
    }

}

/*-------------------------------------------------------------------------*/

void ph_d_access_next_na ()
{
    struct node     FAR *p_node;    /* temporary pointer on a node */

    if (p_ph_d_na != P_NIL) {
        p_node = (struct node FAR *)p_ph_d_na - 1;

        if ((p_node = Next_node) == P_NIL) {
                p_ph_d_na = P_NIL;
        } else {
            p_ph_d_na = (struct ph_d_na FAR *) (p_node + 1);
        }


    }

}

/*EOF*/
