
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ph_d_int.h
 *
 * $Revision$
 *
 * $Date$
 *
 *  Header implementing the upper interface of the PHYSICAL layer of
 *  the OMNITEL_BRICKS packages with a SIEMENS ISAC-S ARCOFI SP chips.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens ISAC-S Driver                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef PH_D_INT
#define PH_D_INT

#define ARCOFI_2160			'0'
#define ARCOFI_2161			'1'
#define ARCOFI_2163         '3'
#define ARCOFI_2165         '5'
#define PH_CODEC_NIL        'X'

#define PH_PEB2085			5
#define PH_PEB2086			60
#define PH_PEB2186			61

#include "ph_d_par.h"

#include "ph_int.h"

#ifndef PH_TX_DONE
#	define PH_TX_DONE				OFF			/* send of PH_TX_DONE_IN to DL : ON or OFF */
#endif

#ifndef PH_PEB_MODEL
#	define PH_PEB_MODEL				PH_PEB2086	/* default PEB chip model */
#endif

#ifndef PH_D_CODEC_POWER_UP
#	define PH_D_CODEC_POWER_UP		ON			/* CODEC Power Up management : ON by default */
#endif

#ifndef PH_D_CODEC_POWER_DOWN
#	define PH_D_CODEC_POWER_DOWN	ON			/* CODEC Power Up/down management : ON by default */
#endif

#include "it.h"

#if (PH_CODEC == ARCOFI_2163) || (PH_CODEC == ARCOFI_2165)
#	include "arcofi.h"
#endif

#ifndef PH_D_U
#	define PH_D_U					OFF
#endif

#ifndef PH_D_MODE
#	define PH_D_MODE				MODE_IT
#endif

#if (PH_D_MODE == MODE_TIMER) && (PH_D_U == ON)
#	define TI_999					'9'					/* LIU schedule timer ID */
#endif

#ifndef PH_D_EOC
#	define PH_D_EOC					OFF
#endif

#ifndef PH_D_WA_2
#	define PH_D_WA_2				OFF
#endif

#ifndef PH_D_WA_3
#	define PH_D_WA_3				OFF
#endif

#ifndef Ph_b_init_codec_voice
#	define Ph_b_init_codec_voice(device_id,chan_id)
#endif

#ifndef Ph_b_init_codec_audio
#	define Ph_b_init_codec_audio(device_id,chan_id)
#endif

#ifndef Ph_b_stop_codec
#	define Ph_b_stop_codec(device_id,chan_id)
#endif

/*-------------------------------------------------------------------------*/

					/* PH configuration structure */

struct ph_d_config {

	struct  confirm ph_d_confirm;           /* confirmation structure */

	nai_t   na_nb;                          /* number of NA in the configuration message */
	uchar	device_nb;						/* Maximum number of chipset in the system */
											/* e.g. number of ISAC-S chips */

	struct ph_d_na_config {
		nai_t       nai;                    /* NAI */

			/* Component addresses */

		uchar       isac_id;                /* ISAC chip ID */
		long        isac_base_add;          /* ISAC base address */
		uchar       isac_delta_add;         /* ISAC delta address */
		it_mask_t   isac_it_mask;           /* ISAC IT mask */

			/* PH layer */

		uchar       layer1;                 /* layer1 component : PH_SBC, PH_IBC, PH_IEC */
		uchar       fct;                    /* fonctional grouping : FG_TE_NT, FG_NT_TE, FG_TE_NET, FG_NT_NET */
		uchar       bus_mode;               /* bus mode : PH_IOM2, PH_IOM1 */
		uchar		tem_pfs;				/* test mode and prefilter select :
														00 no filter,
														01 prefilter delay 520 ns,
														11 prefilter delay 910 ns,
														10 test mode */
		uchar		iom_ods;				/* IOM output driver selection :
														1 tristate,
														0 open drain */
		uchar       chan_loop_back;         /* B channel loop back : ON or OFF */

		timer_val_t ti_101;                 /* value for CCITT I.430 NT T1 timer or 0 (implicit value) */
		timer_val_t ti_102;                 /* value for CCITT I.430 NT T2 timer or 0 (implicit value) */
		timer_val_t ti_103;                 /* value for CCITT I.430 TE T3 timer or 0 (implicit value) */
		timer_val_t ti_104;                 /* value for ETSI T4 TE timer or 0 (implicit value) */

			/*  Data link init buffer structure */

		ushort      mx_fr_size;             /* Maximum frame size                  */
		timer_val_t ti_199;                 /* value for TX watchdog timer or 0    */

			/* CODEC : Arcofi */

		uchar       arcofi_id;              /* ARCOFI ID */

		ent_id_t	ent_dl;					/* Data link layer entity ID (ENT_DL_D) */
		ent_id_t	ent_mdl;				/* Upper layer management entity ID (ENT_MDL) */
		ent_id_t	ent_up;					/* Upper layer entity ID (ENT_CC) */

#		if (PH_CODEC == ARCOFI_2163) || (PH_CODEC == ARCOFI_2165)
			struct arcofi_config {
				uchar sop    [10];			/* Status Operation Register initial value (SOP) <ON/OFF> <TFCR>...<GCR> <XCR> */
				uchar tg1    [9];			/* Tone genetator 1 : <ON/OFF> <F1>..<GD1>.. */
				uchar tg2    [9];			/* Tone genetator 2 : <ON/OFF> <F2>..<GD2>.. */
				uchar tg3    [9];			/* Tone genetator 3 : <ON/OFF> <F3>..<GD3>.. */
				uchar tf     [5];			/* Tone filter : <ON/OFF> <K>..<GE> */
				uchar cg     [5];			/* Control Generator : <ON/OFF> <TON>..<TOFF> */
				uchar gain   [9];			/* Gain : <ON/OFF> <GX>..<GR>... */
				uchar sg     [5];			/* Sidetone gain : <ON/OFF> <GZ>... */
				uchar cffx   [13];			/* correction filter FX : <ON/OFF> <FX1>..<FX12> */
				uchar cffr   [13];			/* correction filter FR : <ON/OFF> <FR1>..<FR12> */
				uchar coefsp [33];			/* coefficient for speakerphone : <ON/OFF> <SP1>..<SP32> */
				uchar agc_tx [9];			/* AGC Tx : <ON/OFF> <AGCX1>..<AGCX8> */
				uchar agc_rx [9];			/* AGC Rx : <ON/OFF> <AGCR1>..<AGCR8> */
			} arcofi;

#		endif

		uchar		iom2_power_down;		/* IOM2 to POWER DOWN : ON or OFF */
		uchar		iom2_chani;				/* IOM2 channel ID for non TE : 0 to 7 */

#		if PH_D_U == ON

			struct ph_d_u_config {
				uchar		transceiver_mode;   /* type of ISDN transceiver : U_NET, U_TE, ST_TE, ST_NET, AUTO_TE, AUTO_NET */
				uchar       iec_id;             /* IEC-Q chip ID */
				long        iec_base_add;       /* IEC-Q base address */
				uchar       iec_delta_add;      /* IEC-Q delta address */
				it_mask_t   iec_it_mask;        /* IEC-Q IT mask */
				uchar		pcl;				/* prescaler select : frequency at
																00 	7.68 Mhz,
																01 	3.84 Mhz,
																11 	1.92 Mhz,
																10 	0.96 Mhz */
				uchar		uvd;				/* enable undervoltage detector ON or OFF */
				uchar		bcl;				/* bit clock mode ON: changes the DCL-output into the bit clock mode */
												/* bit clock mode OFF: gives the doubled bit clock on the DCL-output */
			} u_config;

#		endif

	} ph_d_na_config [PH_D_CONFIG_MX_NA];

};

	/* Manipulation macro's thru p_ph_d_config pointer */

#define Ph_d_config_ret_code        p_ph_d_config -> ph_d_confirm.return_code   /* return code */
#define Ph_d_config_cause           p_ph_d_config -> ph_d_confirm.cause         /* cause */
#define Ph_d_config_diagnostic      p_ph_d_config -> ph_d_confirm.diagnostic    /* diagnostic */

#define Ph_d_config_na_nb           p_ph_d_config -> na_nb                      /* number of NA in the configuration message */
#define Ph_d_config_device_nb       p_ph_d_config -> device_nb                    /* number of NA in the configuration message */
#define Ph_d_config_isac_nb       	Ph_d_config_device_nb

#define Ph_d_config_a_na(xx)        &(p_ph_d_config -> ph_d_na_config[xx])      /* number of NA in the configuration message */

#define Ph_d_config_nai             p_ph_d_na_config -> nai                     /* NAI */
#define Ph_d_config_isac_id         p_ph_d_na_config -> isac_id
#define Ph_d_config_isac_base_add   p_ph_d_na_config -> isac_base_add
#define Ph_d_config_isac_delta_add  p_ph_d_na_config -> isac_delta_add
#define Ph_d_config_isac_it_mask    p_ph_d_na_config -> isac_it_mask

#define Ph_d_config_layer1          p_ph_d_na_config -> layer1                  /* PH layer 1 type of component */
#define Ph_d_config_fct             p_ph_d_na_config -> fct                     /* PH fonctional grouping */
#define Ph_d_config_bus_mode        p_ph_d_na_config -> bus_mode                /* PH bus mode */
#define Ph_d_config_tem_pfs         p_ph_d_na_config -> tem_pfs                 /* test mode and prefilter select */
#define Ph_d_config_iom_ods         p_ph_d_na_config -> iom_ods                 /* PH IOM output driver selection */
#define Ph_d_config_chan_loop_back  p_ph_d_na_config -> chan_loop_back          /* B channel loop back */

#define Ph_d_config_ti_101          p_ph_d_na_config -> ti_101
#define Ph_d_config_ti_102          p_ph_d_na_config -> ti_102
#define Ph_d_config_ti_103          p_ph_d_na_config -> ti_103
#define Ph_d_config_ti_104          p_ph_d_na_config -> ti_104

#define Ph_d_config_mx_fr_size      p_ph_d_na_config -> mx_fr_size
#define Ph_d_config_ti_199          p_ph_d_na_config -> ti_199

#define Ph_d_config_arcofi_id       p_ph_d_na_config -> arcofi_id

#define Ph_d_config_ent_dl  		p_ph_d_na_config -> ent_dl
#define Ph_d_config_ent_mdl  		p_ph_d_na_config -> ent_mdl
#define Ph_d_config_ent_up  		p_ph_d_na_config -> ent_up

#define Ph_d_config_a_arcofi_sop  	&(p_ph_d_na_config -> arcofi.sop    [0])
#define Ph_d_config_a_arcofi_tg1	&(p_ph_d_na_config -> arcofi.tg1    [0])
#define Ph_d_config_a_arcofi_tg2	&(p_ph_d_na_config -> arcofi.tg2    [0])
#define Ph_d_config_a_arcofi_tg3	&(p_ph_d_na_config -> arcofi.tg3    [0])
#define Ph_d_config_a_arcofi_tf		&(p_ph_d_na_config -> arcofi.tf     [0])
#define Ph_d_config_a_arcofi_cg		&(p_ph_d_na_config -> arcofi.cg     [0])
#define Ph_d_config_a_arcofi_gain	&(p_ph_d_na_config -> arcofi.gain   [0])
#define Ph_d_config_a_arcofi_sg		&(p_ph_d_na_config -> arcofi.sg     [0])
#define Ph_d_config_a_arcofi_cffx	&(p_ph_d_na_config -> arcofi.cffx   [0])
#define Ph_d_config_a_arcofi_cffr	&(p_ph_d_na_config -> arcofi.cffr   [0])
#define Ph_d_config_a_arcofi_coefsp	&(p_ph_d_na_config -> arcofi.coefsp [0])
#define Ph_d_config_a_arcofi_agc_tx	&(p_ph_d_na_config -> arcofi.agc_tx [0])
#define Ph_d_config_a_arcofi_agc_rx	&(p_ph_d_na_config -> arcofi.agc_rx [0])

#define Ph_d_config_iom2_power_down	p_ph_d_na_config -> iom2_power_down
#define Ph_d_config_iom2_chani		p_ph_d_na_config -> iom2_chani

#if PH_D_U == ON
#	define Ph_d_config_transceiver_mode p_ph_d_na_config -> u_config.transceiver_mode
#	define Ph_d_config_iec_id           p_ph_d_na_config -> u_config.iec_id
#	define Ph_d_config_iec_base_add     p_ph_d_na_config -> u_config.iec_base_add
#	define Ph_d_config_iec_delta_add    p_ph_d_na_config -> u_config.iec_delta_add
#	define Ph_d_config_iec_it_mask      p_ph_d_na_config -> u_config.iec_it_mask
#	define Ph_d_config_pcl         		p_ph_d_na_config -> u_config.pcl                 /* prescaler value */
#	define Ph_d_config_uvd				p_ph_d_na_config -> u_config.uvd
#	define Ph_d_config_bcl				p_ph_d_na_config -> u_config.bcl
#endif

		/* Siemens layer 1 component */

#define PH_SBC                      1
#define PH_IBC                      2
#define PH_IEC                      3

		/* Time slot bus */

#define PH_IOM1                     1
#define PH_IOM2                     2

			/* Configuration Error codes */

#define	PH_D_CFG_OK						OK
#define	PH_D_CFG_ERR_NA					10		/* wrong NAI */
#define	PH_D_CFG_ERR_ACCESS_NA			11		/* wrong NAI */
#define	PH_D_CFG_ERR_ENTITY_IN_SYSTEM	12		/* wrong entity id */
#define	PH_D_CFG_ERR_SCC_BASE_ADD		14		/* wrong SCC base address */
#define	PH_D_CFG_ERR_STREAM_SUPERVISION	15		/* */
#define	PH_D_CFG_ERR_TIMER_RESOURCE		16		/* not enough timer cells */
#define	PH_D_CFG_ERR_ALLOC_RESOURCE		17		/* not enough memory */
#define	PH_D_CFG_ERR_FC_MARKS			18		/* wrong flow control marks */
#define	PH_D_CFG_ERR_BUILD_OBJECT		100		/* error during context objects building */

			/* Transceiver mode */

#define	U_LT 							1		/*  U-Transceiver LT mode */
#define	U_NT                            2		/*  U-Transceiver NT mode */
#define	U_TE                            3		/*  U-Transceiver NT mode */
#define	U_NET 							U_LT	/*  U-Transceiver LT mode */

#define	ST_LT                           11      /* ST-Transceiver LT mode */
#define	ST_NT                           12		/* ST-Transceiver NT mode */
#define	ST_TE                           13      /* ST-Transceiver TE mode */
#define	ST_NET                          ST_LT	/* ST-Transceiver LT mode */

#define	AUTO_NET 						100		/*  U-Transceiver LT mode */
#define	AUTO_TE                         200		/*  U-Transceiver NT mode */

		/* TEM and PFS : test mode and prefilter select */

#define PH_TEM_PFS_NO_PREFILTER		G_2 (0, 0)
#define PH_TEM_PFS_DELAY_520		G_2 (0, 1)
#define PH_TEM_PFS_DELAY_910		G_2 (1, 1)
#define PH_TEM_PFS_TEST_MODE		G_2 (1, 0)

/*-------------------------------------------------------------------------*/

						/* Device Management */

struct ph_device	{
	struct  confirm 	ph_device_confirm;  /* confirmation structure */
	ent_id_t			rq_entity_id;		/* Entity Id of the requestor */
	uchar				device_fct;			/* Device function */

#	if (PH_CODEC == ARCOFI_2163) || (PH_CODEC == ARCOFI_2165)

			/* Arcofi extension structure */

		struct arcofi {

				/* Requests structure */

			struct rq {
				ushort			next;				/* Next request delta address or 0 if End of request */
				uchar			type_operation;		/* Type of operation */

				union operation {

					struct sop {
						uchar	address;			/* SOP Register address */
						uchar	mask;				/* SOP Register mask */
						uchar	value;				/* SOP Register value */
					} sop;

					struct sop_all {
						uchar	mask  [8];			/* SOP all masks : <TFCR>...<GCR> */
						uchar	value [8];			/* SOP all values :<TFCR>...<GCR> */
					} sop_all;

					struct  cop {
						uchar	id;					/* COP Id */
						uchar	value [32];			/* coefficient array */
					} cop;

					struct  xop {
						uchar	address;			/* XOP address */
					} xop;

					struct  pci {
						uchar	mask;				/* PCI mask */
						uchar	value;				/* PCI value */
					} pci;

				} operation;

			} rq;

		} arcofi;

#	endif

};

#define Ph_device_ret_code        		((struct ph_device FAR *)p_data) -> ph_device_confirm.return_code /* return code */
#define Ph_device_cause           		((struct ph_device FAR *)p_data) -> ph_device_confirm.cause       /* cause */
#define Ph_device_diagnostic      		((struct ph_device FAR *)p_data) -> ph_device_confirm.diagnostic  /* diagnostic */
#define Ph_device_rq_entity_id    	   	((struct ph_device FAR *)p_data) -> rq_entity_id  				  /* requestor entity ID */
#define Ph_device_fct 			   	   	((struct ph_device FAR *)p_data) -> device_fct  				  /* Device function ID */

						/* Device Function */

#define PH_DEVICE_FCT_ARCOFI_MGT		'a'		/* ARCOFI Management */
#define PH_DEVICE_FCT_ISAC_POWER_UP		'u'		/* ISAC POWER UP */
#define PH_DEVICE_FCT_ISAC_POWER_DOWN	'd'		/* ISAC POWER DOWN */
#define PH_DEVICE_FCT_CODEC_POWER_UP	'U'		/* CODEC POWER UP */
#define PH_DEVICE_FCT_CODEC_POWER_DOWN	'D'		/* CODEC POWER DOWN */
#define PH_DEVICE_FCT_ISAC_TLP3			'3'		/* ACTIVATE TEST LOOP 3 */
#define PH_DEVICE_FCT_ISAC_TLP3_STOP	'4'		/* RESET TEST LOOP 3 */

#if (PH_CODEC == ARCOFI_2163) || (PH_CODEC == ARCOFI_2165)

						/* CODEC dynamic management */

#	define Ph_device_a_arcofi 	   		(uchar FAR *)&(((struct ph_device FAR *)p_data) -> arcofi)

#	define Arcofi_ret_code				Ph_device_ret_code
#	define Arcofi_cause                 Ph_device_cause
#	define Arcofi_diagnostic            Ph_device_diagnostic
#	define Arcofi_rq_entity_id          Ph_device_rq_entity_id

#	define Arcofi_a_first_rq     	   (uchar FAR *)&(((struct arcofi FAR *)p_data) -> rq)

#	define Arcofi_rq_next 				((struct rq FAR *)p_rq) -> next
#	define Arcofi_type_operation		((struct rq FAR *)p_rq) -> type_operation
#	define Arcofi_a_operation		    (uchar FAR *)&((struct rq FAR *)p_rq) -> operation

#	define Arcofi_sop_address    	 	((struct sop FAR *)p_op) -> address
#	define Arcofi_sop_mask     			((struct sop FAR *)p_op) -> mask
#	define Arcofi_sop_value     		((struct sop FAR *)p_op) -> value

#	define Arcofi_sop_all_mask(xx)     	((struct sop_all FAR *)p_op) -> mask  [xx]
#	define Arcofi_sop_all_value(xx)    	((struct sop_all FAR *)p_op) -> value [xx]
#	define Arcofi_sop_all_a_value      &((struct sop_all FAR *)p_op) -> value [0]

#	define Arcofi_cop_id	    		((struct cop FAR *)p_op) -> id
#	define Arcofi_cop_value(xx)   		((struct cop FAR *)p_op) -> value [xx]
#	define Arcofi_cop_a_value   	   &((struct cop FAR *)p_op) -> value [0]

#	define Arcofi_xop_address    		((struct xop FAR *)p_op) -> address

#	define Arcofi_pci_mask     			((struct pci FAR *)p_op) -> mask
#	define Arcofi_pci_value     		((struct pci FAR *)p_op) -> value

			/* End of List of Requests */

#	define ARCOFI_EORQ					((ushort)(~0))

			/* Type of update operation */

#	define ARCOFI_TYPE_SOP_W		1	/* Write : Status Operation Registers */
#	define ARCOFI_TYPE_SOP_ALL_W	2	/* Write : <TFCR> ... <GCR> Registers */
#	define ARCOFI_TYPE_COP_W		3	/* Write : Coefficient operation */
#	define ARCOFI_TYPE_SOP_R		4	/* Read : status Operation Registers */
#	define ARCOFI_TYPE_SOP_ALL_R	5	/* Read : <TFCR> ... <GCR> Registers */
#	define ARCOFI_TYPE_COP_R		6	/* Read : Coefficient operation */
#	define ARCOFI_TYPE_XOP_W		7	/* Write : extended operation */
#	define ARCOFI_TYPE_PCI_W		8	/* Write : PCI */
#	define ARCOFI_TYPE_PCI_R		9	/* Read : PCI */

			/* Coefficient Id */

#	define ARCOFI_COP_ID_TG1	   	1	/* Tone Generator parameter set 1 */
#	define ARCOFI_COP_ID_TG2       	2	/* Tone Generator parameter set 2; Tone generator level adjustment */
#	define ARCOFI_COP_ID_TG3       	3	/* Tone Generator parameter set 3; Parameter set for DTMF generator */
#	define ARCOFI_COP_ID_TF        	4	/* Tone Filter */
#	define ARCOFI_COP_ID_CG        	5	/* Control Generator */
#	define ARCOFI_COP_ID_GAIN      	6	/* Receive and Transmit Gain */
#	define ARCOFI_COP_ID_SG        	7	/* Sidetone Gain */
#	define ARCOFI_COP_ID_FX        	8	/* Transmit Correction Filter coefficients */
#	define ARCOFI_COP_ID_FR        	9	/* Receive Correction Filter Coefficients */
#	define ARCOFI_COP_ID_SP        	10	/* Parameter set for receive and Transmit speech and SpeakerPhone control Unit */
#	define ARCOFI_COP_ID_AGC_TX    	11	/* Parameter set for Transmit AGC */
#	define ARCOFI_COP_ID_AGC_RX    	12	/* Parameter set for receive AGC */

#endif

/*-------------------------------------------------------------------------*/

					/* PH Trap codes */

#define TRAP_TX_FIFO_ERROR          104				/* TX FIFO error */
#define TRAP_EVENT_UNKNOWN          105				/* Unknown primitive code or event */
#define TRAP_MPH_INIT               106             /* MPH init error */
#define TRAP_STATE                  107             /* inconsistent states (MPH and LLD) */
#define TRAP_TX_ERROR               108             /* transmit frame error */
#define TRAP_RX_ERROR               109             /* receive monitor message error */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/* Function prototypes */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#   if NEW_FCT_STYLE == ON
		void isac_it		(uchar isac_id);
#	else
		void isac_it		();
#   endif

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
