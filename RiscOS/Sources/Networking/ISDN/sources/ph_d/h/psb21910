
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - psb21910.h
 *
 * $Revision$
 *
 * $Date$
 *
 *	Header implementing the	parameters interface of the SIEMENS PEB2091 V5.1
 *	or PSB21910 V5.1 ISDN U-Interface Transceivers used in Microprocessor Bus Interface mode.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Siemens IEC-Q V5.1 Driver                        |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef PSB21910
#define PSB21910

#include "ph_d.h"

#if PH_D_U == ON

/*--------------------------------------------------------------------------*/

					/* Register Description */

/*--------------------------------------------------------------------------*/

	/* Interrupt Status Register */

#define U_ISTA_R							0
#define U_ISTA_R_D_CHAN_IT					G_8 (1,0,0,0, 0,0,0,0)	/* D channel interrupt */
#define U_ISTA_R_CICI_IT					G_8 (0,1,0,0, 0,0,0,0)	/* C/I channel interrupt from IOM-2 */
#define U_ISTA_R_CICU_IT					G_8 (0,0,1,0, 0,0,0,0)	/* C/I channel interrupt from U interface */
#define U_ISTA_R_SF							G_8 (0,0,0,1, 0,0,0,0)	/* Superframe Marker received */
#define U_ISTA_R_MDR_IT						G_8 (0,0,0,0, 1,0,0,0)	/* Monitor Data Receive Interrupt */
#define U_ISTA_R_B1_IT						G_8 (0,0,0,0, 0,1,0,0)	/* B1 channel Interrupt */
#define U_ISTA_R_B2_IT						G_8 (0,0,0,0, 0,0,1,0)	/* B2 channel Interrupt */
#define U_ISTA_R_MDA_IT						G_8 (0,0,0,0, 0,0,0,1)	/* Monitor Data Transmit Interrupt */

	/* Interrupt Mask Register */

#define U_MASK_W							0
#define U_MASK_W_D_CHAN_IT					G_8 (1,0,0,0, 0,0,0,0)	/* D channel mask */
#define U_MASK_W_CICI_IT					G_8 (0,1,0,0, 0,0,0,0)	/* C/I channel mask from IOM-2 */
#define U_MASK_W_CICU_IT					G_8 (0,0,1,0, 0,0,0,0)	/* C/I channel mask from U interface */
#define U_MASK_W_SF							G_8 (0,0,0,1, 0,0,0,0)	/* Superframe Marker mask */
#define U_MASK_W_MDR_IT						G_8 (0,0,0,0, 1,0,0,0)	/* Monitor Data Receive Interrupt */
#define U_MASK_W_B1_IT						G_8 (0,0,0,0, 0,1,0,0)	/* B1 channel Interrupt */
#define U_MASK_W_B2_IT						G_8 (0,0,0,0, 0,0,1,0)	/* B2 channel Interrupt */
#define U_MASK_W_MDA_IT						G_8 (0,0,0,0, 0,0,0,1)	/* Monitor Data Transmit Interrupt */

	/* Status Control Register */

#define U_STCR_W							1
#define U_STCR_W_BURST						G_8 (1,0,0,0, 0,0,0,0)	/* Selection of burst modes */
#define U_STCR_BURST_MODE					G_1 (1)					/* Burst mode */
#define U_STCR_NON_BURST_MODE				G_1 (0)					/* Non-burst mode */

#define U_STCR_W_LT							G_8 (0,1,0,0, 0,0,0,0)	/* Selection of LT modes */
#define U_STCR_W_TS_P						3						/* Time slot assignment for IOM-2 */
#define U_STCR_W_TS_L						3						/* Time slot assignment for IOM-2 */
#define U_STCR_W_TM_1						G_8 (0,0,0,0, 0,1,0,0)	/* Test Mode Bit 1 */
#define U_STCR_W_TM_2						G_8 (0,0,0,0, 0,0,1,0)	/* Test Mode Bit 2 */
#define U_STCR_TM_NORMAL					U_STCR_W_TM_1			/* Test Mode: Normal mode */
#define U_STCR_TM_SINGLE_PULSE				(U_STCR_W_TM_1 | U_STCR_W_TM_2)	/* Test Mode: send Single-Pulses */
#define U_STCR_TM_DATA_THROUGH				U_STCR_W_TM_2			/* Test Mode: Data through */

#define U_STCR_W_AUTO_TRANS_SEL				G_8 (0,0,0,0, 0,0,0,1)	/* Selection between auto- and transparent mode */
#define U_STCR_AUTO_MODE					G_1 (1)					/* Selection of automode */
#define U_STCR_TRANS_MODE					G_1 (0)					/* Selection of transparent mode */

	/* Read Monitor Data Register */

#define U_MOR_R								2

	/* Write Monitor Data Register */

#define U_MOX_W								2

	/* Read D from U Register */

#define U_DRU_R								3

	/* Write D from U Register */

#define U_DWU_W								3

	/* Additional Features Register 2 */

#define U_ADF2_W							4
#define U_ADF2_W_TE1						G_8 (1,0,0,0, 0,0,0,0)	/* Terminal Equipment Channel 1 */
#define U_ADF2_W_MTO						G_8 (0,1,0,0, 0,0,0,0)	/* Monitor Procedure Timeout */
#define U_ADF2_MTO_ENABLE					G_8 (0,0,0,0, 0,0,0,0)					/* Enables the internal 6ms monitor timeout */
#define U_ADF2_MTO_DISABLE					G_8 (0,1,0,0, 0,0,0,0)	/* Disables the internal 6ms monitor timeout */

#define U_ADF2_W_DOD						G_8 (0,0,1,0, 0,0,0,0)	/* Dout Open Drain */
#define U_ADF2_W_MIN						G_8 (0,0,0,0, 1,0,0,0)	/* Monitor In Bit */

	/* Read B1 from U Register */

#define U_RB1U_R							6

	/* Write B1 to U Register */

#define U_WB1U_W							6

	/* Read B2 from U Register */

#define U_RB2U_R							7

	/* Write B2 to U Register */

#define U_WB2U_W							7

	/* Read B1 from IOM-2 Register */

#define U_RB1I_R							8

	/* Write B1 to IOM-2 Register */

#define U_WB1I_W							8

	/* Read B2 from IOM-2 Register */

#define U_RB2I_R							9

	/* Write B2 to IOM-2 Register */

#define U_WB2I_W							9

	/* Monitor Status Register */

#define U_MOSR_R							10
#define U_MOSR_R_MDR						G_8 (1,0,0,0, 0,0,0,0)	/* Monitor Channel Data Received Interrupt */
#define U_MOSR_R_MER						G_8 (0,1,0,0, 0,0,0,0)	/* Monitor Channel End of Reception Interrupt */
#define U_MOSR_R_MDA						G_8 (0,0,1,0, 0,0,0,0)	/* Monitor Channel Data Acknowledged */
#define U_MOSR_R_MAB						G_8 (0,0,0,1, 0,0,0,0)	/* Monitor Channel Data Abort */
#define U_MOSR_R_MAC						G_8 (0,0,0,0, 1,0,0,0)	/* Monitor Channel Active */

#define U_MOSR_MASK		(U_MOSR_R_MDR | U_MOSR_R_MER | U_MOSR_R_MDA | U_MOSR_R_MAB)

	/* Monitor Control Register */

#define U_MOCR_W							10
#define U_MOCR_W_MRE						G_8 (1,0,0,0, 0,0,0,0)	/* Monitor Receive Interrupt Enable */
#define U_MOCR_W_MRC						G_8 (0,1,0,0, 0,0,0,0)	/* Monitor Channel Receive Control */
#define U_MOCR_W_MXE						G_8 (0,0,1,0, 0,0,0,0)	/* Monitor Transmit Interrupt Enable */
#define U_MOCR_W_MXC						G_8 (0,0,0,1, 0,0,0,0)	/* Monitor Channel Transmit Control */

#define U_MOCR_MASK		(U_MOCR_W_MRE | U_MOCR_W_MRC | U_MOCR_W_MXE | U_MOCR_W_MXC)

	/* Read D from IOM-2 Register */

#define U_DRI_R								11

	/* Write D to IOM-2 Register */

#define U_DWI_W								11

	/* Read C/I code from U Register */

#define U_CIRU_R							12
#define U_CIRU_R_CI_P						2						/* C/I indication coming from the U-interface */
#define U_CIRU_R_CI_L						4

	/* Write C/I code to U Register */

#define U_CIWU_W							12
#define U_CIWU_W_CI_P						2						/* C/I indication going to the U-interface */
#define U_CIWU_W_CI_L						4
#define U_CIWU_W_CI_MASK					G_8 (1,1,0,0, 0,0,1,1)

	/* Read C/I code from IOM-2 Register */

#define U_CIRI_R							13
#define U_CIRI_R_CI_P						2						/* C/I indication coming from IOM-2 */
#define U_CIRI_R_CI_L						4

	/* Write C/I code to IOM-2 Register */

#define U_CIWI_W							13
#define U_CIWI_W_CI_P						2						/* C/I indication going to IOM-2 */
#define U_CIWI_W_CI_L						4

	/* Additional Features Register */

#define U_ADF_W								14
#define U_ADF_W_WTC2						G_8 (1,0,0,0, 0,0,0,0)	/* Watchdog Controller Bit 2 */
#define U_ADF_W_WTC1						G_8 (0,1,0,0, 0,0,0,0)	/* Watchdog Controller Bit 1 */

#define U_ADF_W_PCL_P						4						/* Prescaler Bits 0 and 1 */
#define U_ADF_W_PCL_L						2

#define U_ADF_MCLK_7_68						G_2 (0,0)				/* 7.68 Mhz*/
#define U_ADF_MCLK_3_84						G_2 (0,1)				/* 3.84 Mhz*/
#define U_ADF_MCLK_1_92						G_2 (1,0)				/* 1.92 Mhz*/
#define U_ADF_MCLK_0_96						G_2 (1,1)				/* 0.96 Mhz*/

#define U_ADF_W_UVD							G_8 (0,0,0,0, 0,1,0,0)	/* Undervoltage Detector */
#define U_ADF_W_BCL							G_8 (0,0,0,0, 0,0,1,0)	/* Bit Clock */
#define U_ADF_W_CBAC						G_8 (0,0,0,0, 0,0,0,1)	/* Control BAC */

	/* Switch Status Register */

#define U_SWST_W							15
#define U_SWST_W_WT							G_8 (1,0,0,0, 0,0,0,0)	/* Watchdog Timer */
#define U_SWST_W_B1							G_8 (0,1,0,0, 0,0,0,0)	/* B1 channel processing */
#define U_SWST_W_B2							G_8 (0,0,1,0, 0,0,0,0)	/* B2 channel processing */
#define U_SWST_W_D							G_8 (0,0,0,1, 0,0,0,0)	/* D channel processing */

#define U_SWST_W_CI							G_8 (0,0,0,0, 1,0,0,0)	/* C/I channel processing */
#define U_SWST_W_MON						G_8 (0,0,0,0, 0,1,0,0)	/* Monitor channel processing */

#define U_SWST_W_BS							G_8 (0,0,0,0, 0,0,1,0)	/* BS bit */
#define U_SWST_W_SGL						G_8 (0,0,0,0, 0,0,0,1)	/* Stop/Go bit */

#define U_BR_MAX							16

					/* Monitor Channel Messages */

					/* BYTE 1 */

						/* Operation code */

#define U_MC_CODE_P							4
#define U_MC_CODE_L							4
#define U_MC_CODE_MON_0						G_4 (0,0,0,0)
#define U_MC_CODE_MON_1						G_4 (0,0,0,1)
#define U_MC_CODE_MON_2						G_4 (0,0,1,0)
#define U_MC_CODE_MON_8						G_4 (1,0,0,0)

						/* MON-0 : address, D/M */

#define U_MC_MON_0_ADDRESS_P				1
#define U_MC_MON_0_ADDRESS_L				3
#define U_MC_MON_0_ADDRESS_NT				G_3 (0,0,0)
#define U_MC_MON_0_ADDRESS_REPEATER_1		G_3 (0,0,1)
#define U_MC_MON_0_ADDRESS_REPEATER_2		G_3 (0,1,0)
#define U_MC_MON_0_ADDRESS_REPEATER_3		G_3 (0,1,1)
#define U_MC_MON_0_ADDRESS_REPEATER_4		G_3 (1,0,0)
#define U_MC_MON_0_ADDRESS_REPEATER_5		G_3 (1,0,1)
#define U_MC_MON_0_ADDRESS_REPEATER_6		G_3 (1,1,0)
#define U_MC_MON_0_ADDRESS_BROADCAST			G_3 (1,1,1)

#define U_MC_MON_0_DM_P						0
#define U_MC_MON_0_DM_L						1
#define U_MC_MON_0_DM_DATA					G_1 (0)
#define U_MC_MON_0_DM_MESSAGE				G_1 (1)

					/* MON-1 */

#define U_MC_MON_1_PAD_P					0
#define U_MC_MON_1_PAD_L					4

					/* MON-2 : Overhead Bits */

#define U_MC_MON_2_OBH_P					0
#define U_MC_MON_2_OBH_L					4

					/* MON-8 : Register, Address */

#define U_MC_MON_8_REGISTER_P				3
#define U_MC_MON_8_REGISTER_L				1
#define U_MC_MON_8_REGISTER_LOCAL			G_1 (0)
#define U_MC_MON_8_REGISTER_INTERNAL		G_1 (1)

#define U_MC_MON_8_ADDRESS_P				0
#define U_MC_MON_8_ADDRESS_L				3

					/* BYTE 2 */

						/* MON-0 - EOC Value */

#define U_MC_MON_0_EOC_P					0
#define U_MC_MON_0_EOC_L					8
#define U_MC_MON_0_EOC_H					0x00		/* Hold */
#define U_MC_MON_0_EOC_LBBD					0x50		/* Close complete Loop */
#define U_MC_MON_0_EOC_LB1					0x51		/* Close loop B1 */
#define U_MC_MON_0_EOC_LB2					0x52		/* Close loop B2 */
#define U_MC_MON_0_EOC_RCC					0x53		/* Request corrupt CRC */
#define U_MC_MON_0_EOC_NCC					0x54		/* Notify of corrupt CRC */
#define U_MC_MON_0_EOC_UTC					0xaa		/* Unable to comply */
#define U_MC_MON_0_EOC_RTN					0xff		/* return to normal */

						/* MON-1 */

							/* S/Q Code */

#define U_MC_MON_1_SQ_CODE_P				4
#define U_MC_MON_1_SQ_CODE_L				4
#define U_MC_MON_1_SQ_CODE_ST				G_4 (0,0,0,1)
#define U_MC_MON_1_SQ_CODE_STP				G_4 (0,0,1,0)
#define U_MC_MON_1_SQ_CODE_FEBE				G_4 (0,1,0,0)
#define U_MC_MON_1_SQ_CODE_NEBE				G_4 (1,0,0,0)
#define U_MC_MON_1_SQ_CODE_FNBE				G_4 (1,1,0,0)
#define U_MC_MON_1_SQ_CODE_NORM				G_4 (1,1,1,1)

							/* M-Bits */

#define U_MC_MON_1_M_P						0
#define U_MC_MON_1_M_L						4
#define U_MC_MON_1_M_NTM					G_4 (1,0,0,0)
#define U_MC_MON_1_M_NORM					G_4 (1,1,1,1)

						/* MON-2 */

#define U_MC_MON_2_OBL_P					0
#define U_MC_MON_2_OBL_L					8

#define U_MC_MON_2_OBH_M41_P                3
#define U_MC_MON_2_OBH_M41_L				1

#define U_MC_MON_2_OBH_M51_P                2
#define U_MC_MON_2_OBH_M51_L				1

#define U_MC_MON_2_OBH_M61_P                1
#define U_MC_MON_2_OBH_M61_L				1

#define U_MC_MON_2_OBH_M42_P                1
#define U_MC_MON_2_OBH_M42_L				1

#define U_MC_MON_2_OBL_M52_P                7
#define U_MC_MON_2_OBL_M52_L				1

#define U_MC_MON_2_OBL_M62_P                6
#define U_MC_MON_2_OBL_M62_L				1

#define U_MC_MON_2_OBL_M43_P                5
#define U_MC_MON_2_OBL_M43_L				1

#define U_MC_MON_2_OBL_M44_P                4
#define U_MC_MON_2_OBL_M44_L				1

#define U_MC_MON_2_OBL_M45_P                3
#define U_MC_MON_2_OBL_M45_L				1

#define U_MC_MON_2_OBL_M46_P                2
#define U_MC_MON_2_OBL_M46_L				1

#define U_MC_MON_2_OBL_M47_P                1
#define U_MC_MON_2_OBL_M47_L				1

#define U_MC_MON_2_OBL_M48_P                0
#define U_MC_MON_2_OBL_M48_L				1

						/* MON-8 */

#define U_MC_MON_8_LOCAL_CODE_P				0
#define U_MC_MON_8_LOCAL_CODE_L				8
#define U_MC_MON_8_LOCAL_CODE_PACE			G_8 (1,0,1,1, 1,1,1,0)
#define U_MC_MON_8_LOCAL_CODE_PACA			G_8 (1,0,1,1, 1,1,1,1)
#define U_MC_MON_8_LOCAL_CODE_CRCC			G_8 (1,1,1,1, 0,0,0,0)
#define U_MC_MON_8_LOCAL_CODE_LB1			G_8 (1,1,1,1, 0,1,0,0)
#define U_MC_MON_8_LOCAL_CODE_LB2			G_8 (1,1,1,1, 0,0,1,0)
#define U_MC_MON_8_LOCAL_CODE_LBBD			G_8 (1,1,1,1, 0,0,0,1)
#define U_MC_MON_8_LOCAL_CODE_NORM			G_8 (1,1,1,1, 1,1,1,1)
#define U_MC_MON_8_LOCAL_CODE_RBEN			G_8 (1,1,1,1, 1,0,1,1)
#define U_MC_MON_8_LOCAL_CODE_RBEF			G_8 (1,1,1,1, 1,0,1,0)
#define U_MC_MON_8_LOCAL_CODE_RPFC			G_8 (1,1,1,1, 1,0,0,0)
#define U_MC_MON_8_LOCAL_CODE_WCI			G_8 (0,1,1,0, 0,0,0,0)
#define U_MC_MON_8_LOCAL_CODE_RCI			G_8 (0,1,0,0, 0,0,0,0)
#define U_MC_MON_8_LOCAL_CODE_RID			G_8 (0,0,0,0, 0,0,0,0)
#define U_MC_MON_8_LOCAL_CODE_SFB			G_8 (1,1,1,1, 1,0,0,1)

#define U_MC_MON_8_INTERNAL_COEF_P			0
#define U_MC_MON_8_INTERNAL_COEF_L			8

/*--------------------------------------------------------------------------*/

					/* Command/Indicate channel operation */

							/* LT mode : COMMAND (RQ) */

#define U_CI_LT_RQ_DR						G_4 (0,0,0,0)
#define U_CI_LT_RQ_RES						G_4 (0,0,0,1)
#define U_CI_LT_RQ_LTD						G_4 (0,0,1,1)
#define U_CI_LT_RQ_RES1						G_4 (0,1,0,0)
#define U_CI_LT_RQ_SSP						G_4 (0,1,0,1)
#define U_CI_LT_RQ_DT						G_4 (0,1,1,0)
#define U_CI_LT_RQ_UAR						G_4 (0,1,1,1)
#define U_CI_LT_RQ_AR						G_4 (1,0,0,0)
#define U_CI_LT_RQ_ARL						G_4 (1,0,1,0)
#define U_CI_LT_RQ_AR0						G_4 (1,1,0,1)
#define U_CI_LT_RQ_DC						G_4 (1,1,1,1)

							/* LT mode : INDICATION (IN) */

#define U_CI_LT_IN_DEAC						G_4 (0,0,0,1)
#define U_CI_LT_IN_FJ						G_4 (0,0,1,0)
#define U_CI_LT_IN_HI						G_4 (0,0,1,1)
#define U_CI_LT_IN_RSY						G_4 (0,1,0,0)
#define U_CI_LT_IN_EI2						G_4 (0,1,0,1)
#define U_CI_LT_IN_INT						G_4 (0,1,1,0)
#define U_CI_LT_IN_UAI						G_4 (0,1,1,1)
#define U_CI_LT_IN_AR						G_4 (1,0,0,0)
#define U_CI_LT_IN_ARM						G_4 (1,0,0,1)
#define U_CI_LT_IN_EI3						G_4 (1,0,1,1)
#define U_CI_LT_IN_AI						G_4 (1,1,0,0)
#define U_CI_LT_IN_LSL						G_4 (1,1,0,1)
#define U_CI_LT_IN_DI						G_4 (1,1,1,1)

							/* NT mode : COMMAND (RQ) */

#define U_CI_NT_RQ_TIM						G_4 (0,0,0,0)
#define U_CI_NT_RQ_RES						G_4 (0,0,0,1)
#define U_CI_NT_RQ_DU						G_4 (0,0,1,1)
#define U_CI_NT_RQ_EI1						G_4 (0,1,0,0)
#define U_CI_NT_RQ_SSP						G_4 (0,1,0,1)
#define U_CI_NT_RQ_DT						G_4 (0,1,1,0)
#define U_CI_NT_RQ_AR						G_4 (1,0,0,0)
#define U_CI_NT_RQ_ARL						G_4 (1,0,1,0)
#define U_CI_NT_RQ_AI						G_4 (1,1,0,0)
#define U_CI_NT_RQ_DI						G_4 (1,1,1,1)

							/* NT mode : INDICATION (IN) */

#define U_CI_NT_IN_DR						G_4 (0,0,0,0)
#define U_CI_NT_IN_FJ						G_4 (0,0,1,0)
#define U_CI_NT_IN_EI1						G_4 (0,1,0,0)
#define U_CI_NT_IN_INT						G_4 (0,1,1,0)
#define U_CI_NT_IN_PU						G_4 (0,1,1,1)
#define U_CI_NT_IN_AR						G_4 (1,0,0,0)
#define U_CI_NT_IN_AI						G_4 (1,1,0,0)
#define U_CI_NT_IN_AI						G_4 (1,1,0,0)
#define U_CI_NT_IN_DC						G_4 (1,1,1,1)

   /* Structures
	  ==========  */

	/* the following structure has been
	   defined to hold all specific
	   information about a device in Processor Interface (PI) mode */

struct PI_tab
{
   unsigned int         pt_op_mode,       /* operation mode of the HDLC    */
										  /* controller (AUTOMODE, ..)     */
						pt_state;         /* device status                 */

   uchar                pt_ModulMode;     /* current mode:                 */
										  /* TE, NTs/LT-S                  */

   uchar                pt_CI_rec,        /* received CI code (L1 device   */
										  /*  status if one is adapted)    */

						pt_tim_mode;   /* timer value for auto-mode        */

		   /* the following structure          */
		   /* elements hold the addresses      */
		   /* (pointers) to the device         */
		   /* registers                        */

   IO_PORT              pt_io_base;       /* base address                  */

   IO_PORT              pt_r_ista;
   IO_PORT              pt_r_mask;
   IO_PORT              pt_r_stcr;
   IO_PORT              pt_r_mox;      	/* MOX (w)  MOR (r) registers       */
   IO_PORT				pt_r_dxu;       /* DWU (w) Write D to U register 	*/
										/* DRU (r) Read D from U register	*/
   IO_PORT              pt_r_adf2;     	/* add. feature register 2     		*/

   IO_PORT				pt_r_xb1u;      /* WB1U (w) Write B1 to U register 	*/
										/* RB1U (r) Read B1 from U register	*/

   IO_PORT				pt_r_xb2u;      /* WB2U (w) Write B2 to U register 	*/
										/* RB2U (r) Read B2 from U register	*/

   IO_PORT				pt_r_xb1i;      /* WB1I (w) Write B1 to IOM-2 register 	*/
										/* RB1I (r) Read B1 from IOM-2 register	*/

   IO_PORT				pt_r_xb2i;      /* WB2I (w) Write B2 to IOM-2 register 	*/
										/* RB2I (r) Read B2 from IOM-2 register	*/

   IO_PORT              pt_r_mocr;     /* monitor control (w), status (r)  */

   IO_PORT				pt_r_dxi;       /* DWI (w) Write D to IOM-2 register 	*/
										/* DRI (r) Read D from IOM-2 register	*/

   IO_PORT              pt_r_cixu;     /* CIWU (w)  CIRU (r) registers     */

   IO_PORT              pt_r_cixi;     /* CIWI (w)  CIRI (r) registers     */

   IO_PORT              pt_r_adf;     	/* add. feature register     		*/

   IO_PORT				pt_r_swst;		/* Switch Status Register			*/

			/* OMNITEL EXTRA */

   ushort				mx_fr_size;	   /* maximum frame size */
   it_mask_t			it_mask;	   /* IT mask */
   uchar				it_flag;	   /* IT ON or OFF */
   uchar				old_ista_state;/* old ISTA state */
   uchar				event;		   /* old event */
   uchar				pcl;	   	   /* prescaler value */
   uchar				iom_ods;	   /* ODS */
   uchar				uvd;		   /* enable undervoltage detector ON or OFF */
   uchar				bcl;		   /* bit clock mode ON: changes the DCL-output into the bit clock mode */
									   /* bit clock mode OFF: gives the doubled bit clock on the DCL-output */
   uchar				iom_power_down;/* IOM2 to POWER DOWN : ON or OFF */

};

typedef struct PI_tab PITAB;

#define It_mask_2091(mask) 										\
		Mph_d_u_br_w(U_MASK_W) |= mask;							\
		Wr_iec (p_PI_tab -> pt_r_mask, Mph_d_u_br_w(U_MASK_W))

#define It_unmask_2091(mask)									\
		Mph_d_u_br_w(U_MASK_W) &= ~(mask);						\
		Wr_iec (p_PI_tab -> pt_r_mask, Mph_d_u_br_w(U_MASK_W))

/*--------------------------------------------------------------------------*/

#endif /* if PH_D_U == ON */

/*--------------------------------------------------------------------------*/

#endif

/*EOF*/

