
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - serv_por.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- Defines the macros accessing to the porting-dependent
 *		  services functions of the OMNITEL-BRICKS family product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/* 

   This header module is used to isolate the OS access functions and the
   Omnitel access to the common functions. The way used to communicate
   between these functions and the outside is OS and TOOLS (Linker and
   loader) dependent.


*                -------------------------------
*               |                         |     |
*               |  ISOLATION : serv_por.h |     |
*      -------  |                         |  S  |
*     |      ===============================>   |
*    -------  | |                         |  E  |
*   |       | | |  --------------------   |     |
*  -------  | | | |     COM_PROC.C     |  |  R  |
* |       | | | | |                   ======>   |       ----------
* | O  S  | | | | |    OMNITEL common  |  |  V  |      |          |
* | M  E  ==========>                  |  |     |      |          |
* | N  R  | | | | |      functions     |  |  I  |      |          |
* | I  V  | | | | |                    |  |    =======>|   O  S   |
* | T  E  | |-  | |--------------------|  |  C  |      |          |
* | E  R  |-    | |                    |  |     |      |          |
* | L  S  ==========>  OMNITEL timer  ======>E  |      |          |
* |       |     | |                    |  |     |       ----------
*  -------      | |      functions     |  |  S  |
*               | |                    |  |     |
*               | |        ------------|  |  .  |
*               | |       |   timer   ======>   |
*               | |       |  process   |  |  C  |
*               |  --------------------   |     |
*               |                         |     |
*               |                         |     |
*                -------------------------------
*/


		/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
		/*                                       */
		/* Macros accessing COM_PROC.C functions */
		/*                                       */
		/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

					/* Messages/Buffers management */

#define Alloc_msg()								alloc_msg			()
#define Free_msg(p_msg)							free_msg			(p_msg)

#define Message_lgth							read_message_lgth 	()

#define Alloc_buffer()							alloc_buffer 		()
#define Free_buffer(p_buffer)					free_buffer 		(p_buffer)

#define Buffer_lgth								read_buffer_lgth 	()

#define Msg_or_buffer(p_buffer, hole_size)		msg_or_buffer 		(p_buffer, hole_size)

#define Prepare_data_to_send(p_msg, p_buffer, data_lgth, p_data)			\
			prepare_data_to_send ((struct message FAR * FAR *)&p_msg,		\
								  (struct buffer  FAR * FAR *)&p_buffer,	\
								  (ushort)					   data_lgth,	\
								  (uchar          FAR * FAR *)&p_data)

					/* String managemement */

#if ( ((OM_CPU == INTEL_1) || (OM_CPU == INTEL_2)) && ((C_COMPILER == TC) || (C_COMPILER == MSC) || (C_COMPILER == IC86)) ) || (((OM_CPU == MOTOROLA_1) || (OM_CPU == MOTOROLA_2)) && (C_COMPILER != GNU68))

#	if (OS == WINDOWS_NT) || (OS == WINDOWS_95) || (NO_FAST_MEM_ACCESS)


		/* Use C functions from COM_PROC.C for other OM_CPU-COMPILERs. */

#		define Memcpy_far(p_to, p_from, n)			memcpy_far			(p_to, p_from, n)
#		define Memset_far(p_to, c, n)				memset_far			(p_to, c, n)
#
#	else

		/*
			Use Assembly functions from INTEL.ASM or MOTOROLA.ASM
			instead of C functions from COM_PROC.C
		*/

#		define Memcpy_far(p_to, p_from, n)			fast_memcpy			(p_to, p_from, n)
#		define Memset_far(p_to, c, n)				fast_memset			(p_to, c, n)
#		define FAST_MEM_ACCESS						/* Do not generate C functions in COM_PROC.C */

#	endif

#else

		/* Use C functions from COM_PROC.C for other OM_CPU-COMPILERs. */

#	define Memcpy_far(p_to, p_from, n)			memcpy_far			(p_to, p_from, n)
#	define Memset_far(p_to, c, n)				memset_far			(p_to, c, n)

#endif

#define Memcmp_far(p_to, p_from, n)				memcmp_far			(p_to, p_from, n)
#define Strcmp_far(s1, s2)						strcmp_far			(s1, s2)
#define Strcpy_far(p_to, p_from, n)				move_str_far		(p_to, p_from, n)

					/* Random functions */

#define Srand_omnitel(x)						srand_omnitel		(x)
#define Rand_omnitel()							rand_omnitel		()

					/* Simulation related */

#if C_COMPILER == MSC
#	define Kbhit()								_kbhit				()
#else
#	define Kbhit()								kbhit				()
#endif

					/* Send/receive message */

#define Send_message(p_snd_msg) 				o_send_message 		(p_snd_msg)
#define Receive_message(qid)					receive_message 	(qid)

					/* Services initialization */

#define Services_init(p_i_service)				services_init		(p_i_service)
#define Read_i_services(p_i_service)			read_i_services		(p_i_service)

					/* Server */

#if OS == PSOS
#	define Server_init(qid,p_entity)			PSOS_F_SUPER_P ();					\
												server_init			(qid, p_entity)

#else

#	define Server_init(qid,p_entity)			server_init			(qid, p_entity)
#endif

#if (OS == MS_WINDOWS) || (OS == WINDOWS_NT) || (OS == WINDOWS_95)
#	define Server_release(qid,p_entity)			server_release (qid, p_entity)
#endif

					/* Time management */

#define Difftime(new_time, old_time)			difftime			(new_time, old_time)

					/* Access to general information */

#define Na_nb									read_na_nb			()
#define Congestion_busy							congestion_busy		()
#define Get_entity_p_fct(ent_id)				get_entity_p_fct(ent_id)
#define Entity_to_server_access(ent_id)			entity_to_server_access(ent_id)
#define Entity_congestion_flag(ent_id,type)		entity_congestion_flag(ent_id, type)

					/* Message audit functions */

#if MESSAGE_AUDIT == ON

#	if ASSERT == ON

#		define Msg_audit_in(direction, p_msg)		\
			if (performance == OFF) { 				\
				msg_audit_in (direction, p_msg); 	\
			} 										\
			Msg_capture  (direction, p_msg)
#	else

#		define Msg_audit_in(direction, p_msg)		\
			msg_audit_in (direction, p_msg); 		\
			Msg_capture  (direction, p_msg)
#	endif

#else

#	define Msg_audit_in(direction, p_msg)			\
			Msg_capture  (direction, p_msg)

#endif


		/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
		/*                                      */
		/* Macros accessing TO_PROC.C functions */
		/*                                      */
		/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/


#define Free_timer_cell(p_cell)					free_timer_cell 	(p_cell)
#define Alloc_timer_cell()						alloc_timer_cell	()

#define	Timer_alloc(entity_id, nai, sapi, add)	timer_alloc 		(entity_id, nai, sapi, add)
#define Timer_free(timer_id)					timer_free 			(timer_id)

#define Timer_start(timer_id,to_val, ns, ev_id)	timer_start 		(timer_id,to_val, ns, ev_id)
#define Timer_stop(timer_id)					timer_stop 			(timer_id)
#define Periodic_timer_start(timer_id,to_val,p_fct,fct_param)	periodic_timer_start (timer_id,to_val, p_fct, fct_param)

#define Timer_it()								timer_it ()

#define Timer_system_tick						read_timer_system_tick()

		/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
		/*                                       */
		/* Macros accessing SERVICES.C functions */
		/*                                       */
		/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/


					/* Memory management */

#define Mem_alloc(lgth, pid)					mem_alloc			(lgth, pid)
#define Mem_free(p_add, pid)					mem_free			(p_add, pid)

					/* Send/receive message */

#define Os_send_message(qid, p_snd_msg)			os_send_message 	(qid, p_snd_msg)
#define Os_receive_message(qid)					os_receive_message	(qid)

					/* Time-related functions */

#define System_time()							system_time			()
#define Timer_delay(duration)					timer_delay			(duration)

#define Os_start_timer(nb_ticks)				os_start_timer		(nb_ticks)
#define Os_stop_timer()							os_stop_timer		()

					/* Resource management */

#if (SIMULATION == OFF) && ((OS == UNIX) || (OS == OS9))
#	define Lock_resource(resource_id)
#	define Unlock_resource(resource_id)

#else

#	define Lock_resource(resource_id)			lock_resource		(resource_id)
#	define Unlock_resource(resource_id)			unlock_resource		(resource_id)
#endif


					/* Trap management */

#if (SIMULATION == ON) || (ASSERT == ON)
#	if OS == MVP_ME
#		define Trap(cause, diagnostic)			otrap				(cause, diagnostic)
#	else
#		define Trap(cause, diagnostic)			trap				(cause, diagnostic)
#	endif
#else
#	if OS == MVP_ME
#		define Trap(cause, diagnostic)			otrap				(cause)
#	else
#		define Trap(cause, diagnostic)			trap				(cause)
#	endif
#endif

					/* Audit tools */

#if MESSAGE_CAPTURE == ON
#	define Msg_capture(direction, p_msg)		msg_capture (direction, p_msg)
#else
#	define Msg_capture(direction, p_msg)
#endif

#define Msg_audit_filtering(direction, p_msg)	msg_audit_filtering (direction, p_msg)


		/*-=-=-=-=-=-=-=-=-=-=-=*/
		/*                      */
		/* Miscellaneous Macros */
		/*                      */
		/*-=-=-=-=-=-=-=-=-=-=-=*/

					/*
						Interrupts management :
						enable and disable interrupts
					*/

#if SIMULATION == ON
	extern int interrupt_state;					/* Simulation of interrupt state */

#	define It_disable()	interrupt_state++
#	define It_enable()	if (interrupt_state-- == 0) Trap (TRAP_IT_ENABLE, "It_enable")

#else

#	if OS == AMX

#		if (OS_RELEASE == I86_V2)
#			include "amx871sd.h"				/* AMX structures */
#			include	"amx871ec.h"				/* AMX error codes */
#			include "amx871cf.h"				/* AMX C interface */
#		endif

#		if (OS_RELEASE == I86_V3)
#			include "amx831sd.h"				/* AMX structures */
#			include	"amx831ec.h"				/* AMX error codes */
#			include "amx831cf.h"				/* AMX C interface */
#		endif

#		if (OS_RELEASE == I386_V1)
#			include "amx881sd.h"				/* AMX structures */
#			include	"amx881ec.h"				/* AMX error codes */
#			include "amx881cf.h"				/* AMX C interface */
#		endif

#		if (OS_RELEASE == MC68000_V2)
#			include "amx581sd.h"				/* AMX structures */
#			include "amx581cf.h"				/* AMX C interface */
#			include	"amx581cv.h"				/* AMX C interfaces - complement */
#			include	"amx581ec.h"				/* AMX error codes */
#		endif

#		if (OS_RELEASE == MC68000_V3)
#			include	"cjzzz.h"
#		endif

#	endif

#	if (C_COMPILER == TC) || (C_COMPILER == MSC)

#		if OS == WINDOWS_NT
#			define	It_disable()
#			define	It_enable()
#		else
#			define	It_disable()			asm  { cli ; }
#			define	It_enable()				asm  { sti ; }
#		endif

#	else

#		if OS == AMX
#			if (C_COMPILER == MT68) || (C_COMPILER == CC68)
#				define	It_disable()    it_disable_68 ()
#				define	It_enable()		it_enable_68  ()
#			else
#				if (OS_RELEASE != MC68000_V3)
#					define	It_disable()	ajdi ()
#					define	It_enable()		ajei ()
#				endif
#				if (OS_RELEASE == MC68000_V3)
#					define	It_disable()	cjcfdi ()
#					define	It_enable()		cjcfei ()
#				endif
#			endif
#		endif

#		if OS == MTR86
#			define 	It_disable()		cli	 ()
#			define 	It_enable()			sti	 ()
#		endif

#		if OS == KOS
#			include "kos.h"
#			define 	It_disable()		Kos_It_Disable()
#			define 	It_enable()			Kos_It_Enable()
#		endif

#		if OS == OS_IOPOS
#			define	It_disable()		it_disable ()
#			define	It_enable()			it_enable ()
#		endif

#		if OS == PSOS
#			define	It_disable()    	it_disable_68 ()
#			define	It_enable()			it_enable_68  ()
#		endif

#		if OS == PSOS_PLUS
#			define	It_disable()    	it_disable_68 ()
#			define	It_enable()			it_enable_68  ()
#		endif

#		if OS == VXWORKS
#			if C_COMPILER == GNU68
#			    define	It_disable()    it_disable_68 ()
#			    define	It_enable()		it_enable_68  ()
#           endif
#		endif

#		if OS == UNIX
#			include <sys/types.h>
#			define	It_disable()
#			define	It_enable()
#		endif

#		if OS == OS9
#			include <types.h>
#			define	It_disable()
#			define	It_enable()
#		endif

#		if OS == MVP_ME
#			include <mvp.h>         /* MP hardware functions */
#			include <mp_ppcmd.h>    /* MP side of PP command interface */
#			include <mp_int.h>      /* MP interrupts */

			extern	unsigned long		saved_IE;

#			define	It_disable()		saved_IE = disable ()
#			define	It_enable()         IE       = saved_IE
#		endif

#		if OS == OSE_OS68

#			if (C_COMPILER == MT68) || (C_COMPILER == CC68)
#				define	It_disable()    it_disable_68 ()
#				define	It_enable()		it_enable_68  ()
#			endif

#		endif

#	endif

#endif

#if (OS == MS_WINDOWS) || (OS == WINDOWS_NT) || (OS == WINDOWS_95)

#		ifndef STRICT
#			define	STRICT				/* Force the STRICT syntax checking */
#		endif

#       undef TRUE
#       undef FALSE
#       undef SIZE
#		undef STATUS_PENDING
#		undef IN

#       include <windows.h>
#		if (OS == WINDOWS_NT) || (OS == WINDOWS_95)
#			include <windowsx.h>
#		endif

			/*
				Restore OMNITEL services.h values
				Windows API defined TRUE/FALSE values
				are required in calls to OS functions (services.c)
			*/

#       undef SIZE
#		undef STATUS_PENDING
#		undef IN
#		undef PARITY_ODD
#		undef PARITY_EVEN
#		undef PARITY_SPACE
#		undef PARITY_MARK
#		undef TEXT

#       define SIZE                     2
#endif

#if OS == RISC_OS
#   include "sys/types.h"
#   include "kernel.h"

    	    	        	/* _N and _C are both defined in ACORN "swis.h" and services.h" */

#    	    	undef _N
#      	    	undef _C
#   		include "swis.h"
#   	    	undef _N
#           	undef _C
#   	    	define _N	_IS_DIG	    /* digit */
#   	    	define _C	_IS_CTL	    /* control */

		extern int irq_cnt;	/* counts irq off */

#	    	define	It_disable()	{if (irq_cnt == 0) {_kernel_irqs_off();Trace_string("irqoff\n"); }}
#		define	It_enable() 	{if (irq_cnt == 0) {_kernel_irqs_on ();Trace_string("irqon\n"); }}
#endif

/*EOF*/
