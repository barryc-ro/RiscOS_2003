
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - sm_par.h
 *
 * $Revision$
 *
 * $Date$
 *
 * 			  Contains the SM entity paramaters
 *			  for the OMNITEL-BRICKS simulation servers.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*       Entities' interfaces      */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#include "mppp_int.h"

/*-------------------------------------------------------------------------*/
/*																		   */
/*							STANDARD UPDATE ID							   */
/*																		   */
/*-------------------------------------------------------------------------*/

#define UPDATE_START_CONFIG_ID			0			/* start of configuration procedure (SM)*/
#define UPDATE_STOP_CONFIG_ID			1			/* stop of configuration procedure (SM)*/

#define UPDATE_SELECT_PROFILE_ID		2			/* Select the profile to use at reset time (DTE_INT)*/
#define UPDATE_STORE_PROFILE_ID			3			/* store profile number (DTE_INT) */

#define UPDATE_TEI_ID					200			/* TEI update ID (PAD) */
#define UPDATE_PACKET_SIZE_ID  			300			/* packet size update ID (PAD) */

/*-------------------------------------------------------------------------*/
/*																		   */
/*							USER UPDATE ID   							   */
/*																		   */
/*-------------------------------------------------------------------------*/

#define UPDATE_DEVICE_NUMBER_ID			400
#define UPDATE_DEVICE_SUB_ADDRESS_ID	401

/*-------------------------------------------------------------------------*/

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*     Configuration structures    */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#include "config.h"

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*    Configuration update IDs     */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#define UPDATE_TEI_ID		200			/* DL TEI update ID */

#define UPDATE_NA_COUNTRY	300			/* NS+CC Network access country */
#define UPDATE_NA_OPERATOR	301			/* NS+CC Network access operator */

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*    Configuration update lists   */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/


			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*       Configuration table       */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

struct config_descriptor CONST_ARRAY t_config [] = {

	{
		ENT_MPPP,							/* entity id */
			(uchar FAR *)&sppp_config_data,	/* address of configuration structure */
			sizeof (sppp_config_data),		/* size of configuration structure */
			P_NIL,   						/* address of configuration update list */
			OFF,							/* wait flag */
	},

	{
		ENT_MPPP,							/* entity id */
			(uchar FAR *)&mppp_config_data,	/* address of configuration structure */
			sizeof (mppp_config_data),		/* size of configuration structure */
			P_NIL,   						/* address of configuration update list */
			OFF,							/* wait flag */
	},

	{ENT_NIL}, 				/* end of table */
};

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*                                    */
			/* Configuration Table access macros  */
			/*                                    */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	/*

		Sm_load_first_p_config_descriptor (p_p_descriptor, p_i)
		-------------------------------------------------------
		Sm_load_next_p_config_descriptor  (p_p_descriptor, p_i)
		-------------------------------------------------------

		These macros are used to access to one element of the configuration
		table (t_config[]).

			struct config_descriptor FAR * FAR *p_p_descriptor :
				current configuration descriptor address (passed by address)

			p_i : current index in the configuration table (passed by address)

	*/

#define Sm_load_first_p_config_descriptor(p_p_descriptor, p_i)	*p_p_descriptor = (struct config_descriptor FAR *)&t_config [0]
#define Sm_load_next_p_config_descriptor(p_p_descriptor, p_i)  	++*p_p_descriptor

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/*   Updates storage description   */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

	/*
		The 'p_mem_param[]' table lists all the existing update ids, giving
		for each of them the maximum size of the related update value,
		including the sizeof a mandatory field used internally by the SM
		configuration update process (PARAM_LENGTH_SIZE).
	*/

struct mem_param_descriptor CONST_ARRAY p_mem_param [] = {

	/* 	Update ID		total parameter maximum size (length + value) */

	{UPDATE_ID_NIL},	/* end of list */
};

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
			/*                                 */
			/* Configuration update functions  */
			/*                                 */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

		/*

			Cfg_move_config_par (update_id, a_update_value, update_value_mx_sz) :
			---------------------------------------------------------------------
			Cfg_move_update_par (update_id, a_update_value, update_value_mx_sz) :
			---------------------------------------------------------------------

			These functions are user dependent and are used by the SM entity
			to transfer an initial value (for Cfg_move_config_par) or an
			updated value (for Cfg_move_update_par) of the configuration
			constant data into the buffer to be sent to the destination entity.

				uint       update_id          : ID of the update value,
				uchar FAR *a_update_value     : address where to store the
												update value,
				ushort     update_value_mx_sz : size of the update value.

		*/

#if CONFIG_UPDATE_MANAGEMENT == ON

#	define	Cfg_move_update_par(update_id, a_update_value, update_value_size) \
			sm_move_update_par (update_id, a_update_value, update_value_size)

#	define	Cfg_move_config_par(update_id, a_update_value, update_value_size) \
			sm_move_config_par (update_id, a_update_value, update_value_size)

#endif

		/*

			Cfg_set_update_par (update_id, a_update_value) :
			------------------------------------------------

			This function is user dependent and is used by an entity
			to save an update value in the safe memory area
			(this area is pointed to by 'p_sm_ram_mem' if SM_RAM.C or
			SM_STS.C is used).

				uint       update_id      : ID of the update value,
				uchar FAR *a_update_value : address of the update value to be
											copied in the safe memory area.

		*/

#if CONFIG_UPDATE_MANAGEMENT == ON

#	define	Cfg_set_update_par(update_id, a_update_value) \
			sm_set_update_par (update_id, a_update_value)

#endif

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*                                    */
			/* User messages processing function  */
			/*                                    */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

		/*

			Sm_process_user_msg (p_msg) :
			-----------------------------

			This function is user dependent and is called by SM when it
			does not recognize a received message.

				struct message FAR *p_msg : received message.

			WARNING:
			--------

			The message MUST be consumed by the macro, i.e. it must be
			freed before exiting (by using the 'Free_msg()' macro).

			Example :

			#define	Sm_process_user_msg(p_msg)	sm_process_user_msg (p_msg)

			Do not #define this macro if these messages are not to be
			processed.

		 */

/*EOF*/
