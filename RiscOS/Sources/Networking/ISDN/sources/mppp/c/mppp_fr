
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_fr.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		mppp_async_to_sync - implements the conversion of an ASYNC PPP frame
 *			to a SYNC PPP frame.
 *		mppp_sync_to_async - implements the conversion of a SYNC PPP frame
 *			to an ASYNC PPP frame.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"

/*-------------------------------------------------------------------------*/
	/*
		LOCAL VARIABLES
	*/

static CONST_ARRAY ushort mppp_async_fcs_tab [] = {
	0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
	0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
	0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
	0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
	0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
	0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
	0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
	0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
	0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
	0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
	0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
	0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
	0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
	0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
	0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
	0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
	0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
	0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
	0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
	0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
	0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
	0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
	0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
	0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
	0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
	0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
	0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
	0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
	0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
	0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
	0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
	0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 mppp_async_to_sync
					- implements the conversion of asynchronous PPP frames.

Usage			 struct message FAR *mppp_async_to_sync ()

common constants and declarations  mppp.h

common : message/buffer pointers.

*--------------------------------------------------------------------------*/

struct message FAR *mppp_async_to_sync ()
{
	MPPP_DBG_FUNC ("mppp_async_to_sync()")

	uchar			FAR *p_data_to;		/* destination data pointer */
	uchar			FAR *p_data_from;	/* source data pointer */
	signed long			data_size;		/* SIGNED data size */
	ushort				frame_size;		/* frame size */
	ushort				fcs;			/* Frame Check Sequence */
	ushort				data_lgth;		/* length in buffer for data storing */
	ushort				data_offset;	/* offset in data buffer */
	uchar				frame_start;	/* starting of a new frame */
	uchar				rcv_ok;			/* good frame */
	struct message	FAR *p_msg;			/* message pointer */

	struct buffer	FAR *p_buffer;		/* buffer pointer */

	MPPP_DBG_ENTER ();

	p_data_from = R_a_data;				/* set assembling data source address */
	data_size	= R_data_size;

	rcv_ok		= FALSE;


	MPPP_DBG_NOTICE ("RFS=");
	MPPP_DBG_NOTICE_BYTE (Sppp_cep_rcv_frame_state);

	if (Sppp_cep_rcv_frame_state == PPP_RFS_FIRST_FRAME_START) {

		if (*p_data_from != PPP_FLAG) {
			data_size = 0;
		} else {
			Sppp_cep_rcv_frame_state = PPP_RFS_FRAME_START;		/* switch to frame start state */
		}

	}


		/* Received inter-frame single PPP Flag ? */

	if ((data_size == 1) &&
		(*p_data_from == PPP_FLAG) && (Sppp_cep_rcv_frame_state == PPP_RFS_FRAME_START)) {

		data_size = 0;

	} else {

		data_offset = Max (R_data_offset, BUFFER_HEADER_SIZE);

			/* Check the additional header for MP frames */

		if (Mppp_cep_mp_enabled == ON) {

			if ((data_offset - BUFFER_HEADER_SIZE) < MPPP_DATA_HEADER_SIZE) {
				data_offset	+= MPPP_DATA_HEADER_SIZE;
			}

		}

		data_lgth	= (ushort)(Buffer_lgth - data_offset);	/* Set output buffer data length to input 's */
	}

	while (data_size > 0) {

		if (Sppp_cep_rcv_frame_state == PPP_RFS_FRAME_START) {

			MPPP_DBG_NOTICE ("RFS_START");

				/* Default setting for frame escape */

			Sppp_cep_ass_frame_escape	= FALSE;


				/*
					Detection of control character overlap :
					Escape character in the first buffer,
					Complemented control character in the second.
				*/

			if (p_data_from [(ushort)(data_size - 1)] == PPP_CTRL_ESC) {

					/*
						The last byte of the buffer is the escape character,
						save this information
					*/

				Sppp_cep_ass_frame_escape	= TRUE;

				MPPP_DBG_NOTICE ("frame escape detected");

				if (--data_size == 0) {		/* remove it from the buffer */
					break;					/* Empty buffer */
				}

			}

				/* Variables initialization */

			MPPP_DBG_NOTICE ("INIT_FCS");

			frame_size				= 0;
			Sppp_cep_ass_frame_fcs	=
			fcs						= PPP_FCS_INIT_VAL; /* FCS initial value */

				/*
					We allocate a message and a
					buffer for multiple data messages reception
				*/

			Sppp_cep_ass_frame_p_msg	= p_msg		= Alloc_msg ();
			p_buffer					= Alloc_buffer ();
			L_msg_init_link_buffer;
			Buffer_data_offset			= data_offset;
			p_data_to					= (uchar FAR *)Buffer_a_start_data;

				/* Set message references */

			L_msg_from	= R_msg_from;		/* origination entity ID */
			L_msg_to	= R_msg_to;			/* destination entity ID */
			L_msg_nai	= R_msg_nai;		/* NAI */
			L_msg_sapi	= R_msg_sapi;		/* SAPI */
			L_msg_add	= R_msg_add;		/* channel number/connection ID	 */
			L_msg_code	= R_msg_code;		/* primitive code */

				/* Switch to frame receiving state */

			Sppp_cep_rcv_frame_state	= PPP_RFS_FRAME_RECEIVING;

				/* Set assembled data storing address */

			frame_start = TRUE;

		} else {

			frame_start	= FALSE;

#			if ASSERT == ON

				if (Sppp_cep_ass_frame_p_msg == P_NIL) {
					Trap (TRAP_MPPP_NULL_POINTER, "mppp_async_to_sync");
				}

#			endif

			fcs			= Sppp_cep_ass_frame_fcs;						/* assembling frame FCS */
			p_msg		= Sppp_cep_ass_frame_p_msg;					/* set to assembling frame address */
			p_buffer	= L_msg_p_buffer;
			frame_size	= Buffer_data_size;
			frame_start = FALSE;
			p_data_to	= (uchar FAR *)Buffer_a_start_data + Buffer_data_size;

			if (Sppp_cep_ass_frame_escape == TRUE) {
				goto PPP_ASYN_CTRL_CHAR_OVL_ENTRY;
			}

		}

			/* Character analysing */

		if (frame_start == TRUE) {

			while ((*p_data_from == PPP_FLAG) && (data_size > 0)) {
				++p_data_from; --data_size;
			}

		}

		while (data_size-- > 0) {

			if (*p_data_from == PPP_CTRL_ESC) {			/* Control Escape character ? */

				++p_data_from;

				PPP_ASYN_CTRL_CHAR_OVL_ENTRY :			/* control character overlap processing entry point */

				--data_size;

				if (*p_data_from == PPP_FLAG) {		/* Control Escape followed by PPP flag ? */

					++p_data_from;

						/* frame is aborted */
						/* Release aborted frame */

					Free_msg (Sppp_cep_ass_frame_p_msg);
					Sppp_cep_ass_frame_p_msg	= P_NIL;

					Sppp_cep_ass_frame_escape	= FALSE;
					Sppp_cep_rcv_frame_state	= PPP_RFS_FRAME_START;

					MPPP_DBG_WARNING ("frame aborted");

					break;		/* Continue to receive next frame */

				} else {

						/* calculate FCS */

					if (frame_size++ < data_lgth) {
						*p_data_to = *p_data_from++ ^ PPP_CTRL_CHAR_CMPL_MASK;
						fcs = (fcs >> 8) ^ mppp_async_fcs_tab [(uchar)(fcs ^ *p_data_to++)];
					} else {
						fcs = (fcs >> 8) ^ mppp_async_fcs_tab [(uchar)
									(fcs ^ (*p_data_from++ ^ PPP_CTRL_CHAR_CMPL_MASK))];
					}

				}

			} else {

				if (*p_data_from == PPP_FLAG) {

					if (Mppp_fcs_check_ok (fcs)) {

						MPPP_DBG_NOTICE ("FCS OK");

						Buffer_data_size = Min (frame_size - 2, data_lgth);
						rcv_ok	= TRUE;

					} else {

						MPPP_DBG_ERROR ("wrong FCS(");
						MPPP_DBG_ERROR_HEX (fcs);
						MPPP_DBG_ERROR_STR (")");

							/* release message which contain erroneous frame */

						Free_msg (Sppp_cep_ass_frame_p_msg);

						Sppp_cep_ass_frame_p_msg	= P_NIL;

					}

					Sppp_cep_ass_frame_escape	= FALSE;
					Sppp_cep_rcv_frame_state	= PPP_RFS_FRAME_START;

					break;		/* Continue to receive next frame */

				} else {

					if (frame_size++ < data_lgth) {
						*p_data_to++ = *p_data_from;
					}

						/* calculate FCS */

					fcs = (fcs >> 8) ^ mppp_async_fcs_tab [(uchar)(fcs ^ *p_data_from++)];

				}

			}

		}


		if (Sppp_cep_rcv_frame_state == PPP_RFS_FRAME_RECEIVING) {

			Buffer_data_size		= Min (data_lgth, frame_size);	/* update assembled data size */
			Sppp_cep_ass_frame_fcs	= fcs;							/* save partial frame FCS */

			MPPP_DBG_NOTICE ("RFS_RECEIVING");

			MPPP_DBG_WARNING ("rcvd partial frame");


		}

	}

	Free_msg (p_rcv_msg);
	p_rcv_msg	= P_NIL;

	MPPP_DBG_LEAVE ();

	if (rcv_ok == TRUE) {
		return (p_msg);		/* frame completely decoded from ASYNC to SYNC */
	} else {
		return (P_NIL);		/* frame decoding failed or still in progress */
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			struct message FAR *mppp_sync_to_async
					- implements the generation of asynchronous PPP frames.

Usage			struct message FAR *mppp_sync_to_async (p_msg_in,accm_map,hole_size,add_flags)
					struct message FAR *p_msg_in;	input message
					ulong				accm_map;	ACCM map to use
					uchar				hole_size;	additional hole size
					uchar				add_flags;	FCS and HDLC Flags to add ?

Return value	address of the first message in queue.
				P_NIL.

common constants and declarations  mppp.h

common : message/buffer pointers.

*--------------------------------------------------------------------------*/

struct message FAR *mppp_sync_to_async (p_msg_in,accm_map,hole_size,add_flags)
	struct message	FAR *p_msg_in;		/* input message pointer */
	ulong				accm_map;		/* async control characters map */
	uchar				hole_size;		/* hole size in data buffer */
	uchar				add_flags;	/* indicates whether we add HDLC FCS and Flags */
{
	MPPP_DBG_FUNC ("mppp_sync_to_async()")

	struct message	FAR *p_msg;				/* message pointer */
	struct message	FAR *p_msg_first;		/* first message pointer */
	struct message	FAR *p_msg_last;		/* last message pointer */
	struct buffer	FAR *p_buffer;			/* buffer pointer */
	uchar			FAR *p_data_to;			/* destination data pointer */
	uchar			FAR *p_data_from;		/* source data pointer */
	uchar			FAR *a_last_data_to;	/* limited address of destination data buffer */
	uchar			FAR *a_last_data_from;	/* address of last byte in source buffer */
	ushort				fcs;				/* Frame Check Sequence */
	uchar				half_fcs;			/* one byte of Frame Check Sequence */
	uchar				i;
	uchar				frame_start = TRUE; /* starting of a new frame */

	MPPP_DBG_ENTER ();

	p_data_from			= X_a_data (p_msg_in);					/* set data source address */
	a_last_data_from	= p_data_from + X_data_size (p_msg_in); /* set source data last byte address */
	fcs					= PPP_FCS_INIT_VAL;


	MPPP_DBG_NOTICE ("accm_map=");
	MPPP_DBG_NOTICE_HEX  (accm_map);

	MPPP_DBG_NOTICE ("add_flags=");
	MPPP_DBG_NOTICE_INT  ((uchar)add_flags);

		/*
			Loop until all input data processed
		*/

	while (p_data_from < a_last_data_from) {					/* loop until end of source buffer */

			/*
				Allocate a message and a buffer
			*/

		p_msg						= Alloc_msg ();				/* allocate a new message */
		L_msg_p_buffer = p_buffer	= Alloc_buffer ();			/* allocate a new buffer */
		Buffer_data_offset			+= hole_size;						/* add the required hole */

			/*
				Set working pointers / insert PPP flag for starting frame
			*/

		p_data_to			= Buffer_a_start_data;					/* set destination data pointer */
		a_last_data_to		= p_data_to + Buffer_data_lgth - 4;		/* reserve 4 bytes : 1 reserved for possible control character expansion,
																	2 for FCS and 1 for end-frame PPP flag */
		if (frame_start == TRUE) {					/* frame start ? */
			frame_start		= FALSE;
			if (add_flags == ON) {
				*p_data_to++	= PPP_FLAG;				/* frame start with a PPP flag */
			}
			p_msg_first		= p_msg_last = p_msg;	/* save first and set message address */
		} else {
			p_msg_last	= X_msg_p_next (p_msg_last) = p_msg;	/* link new message to the previous last one */
		}

			/*
				Loop until either all input data processed or
				output buffer capacity reached.
			*/

		while ( (p_data_from	<	a_last_data_from) &&		/* first condition	: loop until end of source buffer */
				(p_data_to		<	a_last_data_to	)) {		/* second condition : loop until reaching destination buffer capacity.
																	Beware : 2 bytes at least have to be free in destination buffer
																	for possible control escape insertion */
			if (add_flags == ON) {
				fcs = (fcs >> 8) ^ mppp_async_fcs_tab [
									(uchar)(fcs ^ *p_data_from)];	/* calculate FCS */
			}

			if (Mppp_is_ctrl_char (*p_data_from)) {				/* Search for a control character */

					/*
						Control characters (0-1F)
					*/

				if (Mppp_char_to_escape ((*p_data_from), accm_map)) {

						/*
							This control character should be complemented
							Insert control escape
							Insert complemented control character
						*/

					*p_data_to++ = PPP_CTRL_ESC;
					*p_data_to++ = *p_data_from++ ^ PPP_CTRL_CHAR_CMPL_MASK;

				} else {
					*p_data_to++ = *p_data_from++;
				}

			} else {

					/*
						PPP flag (7E) & PPP control escape (7D)
					*/

				if (*p_data_from == PPP_FLAG) {		/* Search for PPP flag */

						/*
							This control character should be complemented
							Insert control escape
							Insert complemented control character
						*/

					*p_data_to++ = PPP_CTRL_ESC;
					*p_data_to++ = PPP_FLAG ^ PPP_CTRL_CHAR_CMPL_MASK;

				} else {

					*p_data_to++ = *p_data_from;	/* copy character to destination */

					if (*p_data_from == PPP_CTRL_ESC) {

						/*
							This control character should be complemented
							Inserted control escape (already done)
							Insert complemented control character
						*/

						*p_data_to++ = PPP_CTRL_ESC ^ PPP_CTRL_CHAR_CMPL_MASK;
					}

				}

				++p_data_from;
			}

		}

		Buffer_data_size = (ushort)(p_data_to - Buffer_a_start_data);		/* set buffer data size */

	}
		/*
			End of frame : insert FCS and flag
		*/

	if (add_flags == ON) {

		fcs ^= 0xFFFF;									/* Complement */

		half_fcs = (uchar)(fcs);						/* low order FCS byte */

		for (i = 0; i < 2; ++i) {						/* high then low order FCS byte processing */

			if (Mppp_is_ctrl_char (half_fcs)) {			/* Search for a control character */

					/*
						Control characters (0-1F)
					*/

				if (Mppp_char_to_escape (half_fcs, accm_map)) {

						/*
							This control character should be complemented
							Insert control escape
							Insert complemented control character
						*/

					*p_data_to++ = PPP_CTRL_ESC;
					*p_data_to++ = half_fcs ^ PPP_CTRL_CHAR_CMPL_MASK;

				} else {
					*p_data_to++ = half_fcs;		/* transparent character */
				}

			} else {

				if (half_fcs == PPP_FLAG) {						/* Search for PPP flag */

						/*
							This control character should be complemented
							Insert control escape
							Insert complemented control character
						*/

					*p_data_to++ = PPP_CTRL_ESC;
					*p_data_to++ = PPP_FLAG ^ PPP_CTRL_CHAR_CMPL_MASK;

				} else {

					*p_data_to++ = half_fcs;		/* copy high order FCS to destination */

					if (half_fcs == PPP_CTRL_ESC) {

							/*
								This control character should be complemented
								Insert control escape
								Insert complemented control character
							*/

						*p_data_to++ = PPP_CTRL_ESC ^ PPP_CTRL_CHAR_CMPL_MASK;

					}

				}

			}

			half_fcs = (uchar)(fcs >> 8);					/* high order FCS byte */
		}

		*p_data_to++ = PPP_FLAG;							/* insert PPP end-frame flag */

	}

	Buffer_data_size = (ushort)(p_data_to - Buffer_a_start_data);	/* set buffer data size */
	X_msg_init_link_buffer (p_msg_last);

	X_msg_p_next (p_msg_last) = P_NIL;					/* to indicate the last message */

		/*
			Release the input message
		*/

	if (X_msg_lib (p_msg_in) == ON) {					/* can the message be freed ? */
		Free_msg (p_msg_in);							/* yes free it */
	}

		/*
			Return the first queued message
		*/

	MPPP_DBG_LEAVE ();

	return (p_msg_first);
}


/*-------------------------------------------------------------------------*/

/* EOF */


