
/*---------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_snd.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		mppp_snd - implements the sending of a message from the ML PPP entity.
 *
 *		mppp_snd_data_msg_to_peer - implements the sending of a data message
 *					to an underlying entity.
 *
 *		mppp_snd_data_msg_to_local - implements the sending of a data message
 *					to the local user entity.
 *
 *		mppp_snd_error_in - implements the formatting and sending of error
 *					indication  message
 *
 *		mppp_snd_ext_add_link_in_co - implements the formatting and sending
 *					ADD LINK indication/confirmation message
 *
 *		mppp_snd_ext_drop_link_in_co - implements the formatting and sending
 *					DROP LINK indication/confirmation message
 *
 *		mppp_act_dea_lower_layer - implements the formatting and sending of a
 *					layer specific ACTIVATE/DEACTIVATE request message.
 *
 *		mppp_busy_to_lower_layer - implements the formatting and sending of a
 *					layer specific BUSY_RQ/CLEAR_BUSY_RQ message.
 *
 *		mppp_retransmit - retransmission of current received message.
 *
 *---------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"

			/* Additional header files */

#include "mp.h"

#if MPPP_PH == ON
#	include "ph_int.h"
#endif

#if MPPP_DL == ON
#	include "dl_int.h"
#endif

#if MPPP_X25 == ON
#	include "x25_int.h"
#endif

#if MPPP_CC == ON
#	include "cc_int.h"
#	include "acu_int.h"
#endif


/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				mppp_snd_xxx - implement the sending of a message from the
					ML PPP entity to the upper and lower layer entities.

Usage				void mppp_snd_xxx (entity_id_t entity_to, code_t msg_id);

Related
functions usage		void Send_message (struct message *p_snd_msg);
						sends the p_snd_msg message

Description			mppp_snd_xxx implement the sending of a message generated
					by the ML PPP entity to the upper and lower layer entity
					as declared in the ML PPP configuration.

Return value		void

Common constants and declarations : mppp.h

Common objects		current mppp_cep object and p_snd_msg pointer

*---------------------------------------------------------------------------*/

void mppp_snd (to, msg_id)
	code_t			msg_id;						/* message code */
	ent_id_t		to;							/* destination entity ID */

{
	MPPP_DBG_FUNC ("mppp_snd()")

	MPPP_DBG_ENTER ();

#	if	ASSERT == ON

		if (p_snd_msg == P_NIL) {

			MPPP_DBG_ERROR ("cannot send P_NIL");
			Trap (TRAP_MPPP_NULL_POINTER, "mppp_snd");
		}

#	endif

	S_msg_from	= ENT_MPPP;
	S_msg_to	= to;
	S_msg_code	= msg_id;

		/* Send the message */

	Send_message (p_snd_msg); p_snd_msg = P_NIL; p_buffer = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/

uchar mppp_snd_data_msg_to_peer (entity, accm_map)
	ent_id_t	entity;
	ulong		accm_map;
{
	MPPP_DBG_FUNC ("mppp_snd_data_msg_to_peer()")

	struct message	FAR		*p_msg;		/* pointer to local message */
	code_t					code;		/* appropriate data message code */

	MPPP_DBG_ENTER ();


		/* Get the 1st message from the Tx fifo */

	if (mppp_out_sppp_tx_queue () != OK) {

			/* No message to send or outgoing FC in BUSY state */

		MPPP_DBG_WARNING ("no msg to send or FC BUSY(ref=");
		MPPP_DBG_WARNING_INT (Sppp_cep_ref);
		MPPP_DBG_WARNING_STR (")");

		MPPP_DBG_LEAVE ();

		return (NOK);

	}

	code	  = EV_NIL;

	switch (entity) {

#		if MPPP_PH == ON
			case ENT_PH_B:
				code	= PH_DA_RQ;
				break;
#		endif

#		if MPPP_DL == ON
			case ENT_DL:
			case ENT_DL_B:
			case ENT_DL_V120:
				if (Mppp_sap_data_ui == ON) {
					code = DL_U_DA_RQ;
				} else {
					code = DL_DA_RQ;
				}
				break;
#		endif

#		if MPPP_X25 == ON
			case ENT_X25:
				code	= X25_DA_RQ;
				break;
#		endif

		default:
			MPPP_DBG_ERROR ("unknown entity ID");
			break;

	}

	if (code == EV_NIL) {

		MPPP_DBG_ERROR ("no message code found");

		MPPP_DBG_LEAVE ();
		return (NOK);


	} else {

		if (Sppp_cep_link_mode == SPPP_MODE_ASYN) {

				/* Convert data according to the peer's requested ACCM */

			p_msg	= mppp_sync_to_async (p_snd_msg, accm_map, Sppp_cep_data_hole_size, Sppp_cep_data_check_flags);

			while (p_msg != P_NIL) {

					/* Load message addressing information */

				L_msg_nai		= Sppp_cep_data_nai;
				L_msg_sapi		= Sppp_cep_data_sapi;
				L_msg_conn_id	= Sppp_cep_data_conn_id;

				p_snd_msg	= p_msg;
				p_msg		= L_msg_p_next;

				MPPP_DBG_NOTICE ("sent ASYN data size = ");
				MPPP_DBG_NOTICE_INT (S_data_size);

				mppp_snd (entity, code);

			}

		} else {

				/* Load message addressing information */

			S_msg_nai		= Sppp_cep_data_nai;
			S_msg_sapi		= Sppp_cep_data_sapi;
			S_msg_conn_id	= Sppp_cep_data_conn_id;

			MPPP_DBG_NOTICE ("sent SYNC data size = ");
			MPPP_DBG_NOTICE_INT (S_data_size);

			mppp_snd (entity, code);

		}

	}


	MPPP_DBG_LEAVE ();

	return (OK);

}


/*--------------------------------------------------------------------------*/


void mppp_snd_data_msg_to_local (entity, accm_map)
	ent_id_t	entity;
	ulong		accm_map;
{
	MPPP_DBG_FUNC ("mppp_snd_data_msg_to_local()")

	struct message	FAR *p_msg; 		/* pointer to local message */
	uchar			FAR *p_curr;		/* pointer used for put and increment */
	uchar				header_size;	/* actual MP header size */

	MPPP_DBG_ENTER ();


	if (mppp_current_ppp_pid == PPP_PROT_MP) {


			/* Set the kind of MP header we receive from the peer */

		if (Mppp_cep_peer_ack_negot & LCP_NEG_SSNHF) {
			header_size		= MP_SHORT_HEADER_SIZE;
		} else {
			header_size		= MP_LONG_HEADER_SIZE;
		}

		if (Mppp_cep_first_frag_pfc == ON) {
			header_size--;
		}


			/*
				There MUST NOT be a valid p_snd_msg pointer
				in this case.
			*/


#		if ASSERT == ON

			if (p_snd_msg != P_NIL) {

				MPPP_DBG_ERROR ("p_snd_msg MUST be P_NIL");

				Trap (TRAP_MPPP_P_MSG, "mppp_snd_data_msg_to_local");

			}

#		endif

		if (p_buffer  != P_NIL) {

				/* Use the current received buffer */

			if (p_rcv_msg != P_NIL) {
				R_msg_p_buffer = P_NIL;
			}

				/*
					Remove the MP frame header, but keep a hole for
					the PPP UI Address and Control fields (2 octets).
				*/

			Buffer_data_offset 	+= (header_size-PPP_UI_ADD_CTRL_LGTH);		/* discard the header by changing */
			Buffer_data_size	-= (header_size-PPP_UI_ADD_CTRL_LGTH);		/* substract the header size */
			Buffer_link_count	 = 0;					/* reset buffer link count */

				/* Set up the pointer to PPP UI Address/Control location */

			p_curr				= Buffer_a_start_data;

				/* Allocate a message */

			S_msg_alloc;

				/* Link the buffer (if any) to the message to be sent. */

			S_msg_init_link_buffer;

		} else {

				/* The received message must be used */

			p_snd_msg			= p_rcv_msg;
			p_rcv_msg 			= P_NIL;

			S_msg_p_buffer		= P_NIL;

				/*
					Remove the MP frame header, but keep a hole for
					the PPP UI Address and Control fields (2 octets).
				*/

			S_msg_data_offset	+= (header_size-PPP_UI_ADD_CTRL_LGTH);
			S_msg_data_size		-= (header_size-PPP_UI_ADD_CTRL_LGTH);


				/* Set up the pointer to PPP UI Address/Control location */

			p_curr				= S_msg_a_start_data;

		}


			/*
				Add the PPP frame address and Control fields
				FF 03
			*/

		Mppp_put_char (PPP_UI_ADD_VAL, p_curr);
		Mppp_put_char (PPP_UI_CTRL_VAL, p_curr);

	}

	if (Mppp_sap_data_sapi == MPPP_SAPI_DATA_ASYN) {

			/*
				Convert data according to the local PPP's requested ACCM.
				Last parameter ON --> add FCS and FLAGS
			*/

		p_msg	= mppp_sync_to_async (p_snd_msg, accm_map, 0, ON);

		while (p_msg != P_NIL) {

			p_snd_msg	= p_msg;

				/* Set the message pointer for the next round (if any) */

			p_msg		= L_msg_p_next;

				/* Load message addressing information */

			S_msg_nai		= Mppp_na_nai;
			S_msg_sapi		= Mppp_sap_data_sapi;
			S_msg_conn_id	= Mppp_cep_ces;

			MPPP_DBG_NOTICE ("sending ASYN to local, data_size = ");
			MPPP_DBG_NOTICE_INT (S_data_size);


			mppp_snd (entity, MPPP_DA_IN);


		}

	} else {


				/* Load message addressing information */

		S_msg_nai		= Mppp_na_nai;
		S_msg_sapi		= Mppp_sap_data_sapi;
		S_msg_conn_id	= Mppp_cep_ces;

		MPPP_DBG_NOTICE ("sending SYNC to local, data_size = ");
		MPPP_DBG_NOTICE_INT (S_data_size);

		mppp_snd (entity, MPPP_DA_IN);

	}

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/


void mppp_snd_msg_to_user (entity, sapi, code)
	ent_id_t	entity;
	sapi_t		sapi;
	code_t		code;
{
	MPPP_DBG_FUNC ("mppp_snd_msg_to_user()")

	MPPP_DBG_ENTER ();

		/* Load message addressing information */

	S_msg_nai		= Mppp_na_nai;
	S_msg_sapi		= sapi;
	S_msg_conn_id	= Mppp_cep_ces;

	MPPP_DBG_NOTICE ("sending to user");

	mppp_snd (entity, code);

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/

void mppp_snd_error_in (cause_val, diag_val, sapi)
	mppp_cause_t	cause_val;
	mppp_diag_t		diag_val;
	sapi_t			sapi;
{
	MPPP_DBG_FUNC ("mppp_snd_error_in()")

	uchar			FAR *p_data;	/* pointer to primitive data area */
	struct buffer	FAR *p_buffer;	/* local buffer pointer */
	code_t				ev_code;	/* message event code to send */

	MPPP_DBG_ENTER ();

	ev_code	= EV_NIL;

	if (mppp_error_entity_id != ENT_NIL) {

			/* We allocate a new message (and buffer) for error indication */

		p_buffer	= Alloc_buffer ();

		p_data	= Buffer_a_start_data;

		Memset_far ((char FAR *)p_data, 0, Max (Mppp_ext_error_in_size,Mppp_error_in_size));

		if (sapi == MPPP_SAPI_EXT_EVENTS) {

			ev_code	= MPPP_EXT_ERROR_IN;

			Mppp_ext_error_in_data_sapi		= (p_mppp_sap != P_NIL) ? Mppp_sap_data_sapi : SAPI_NIL;
			Mppp_ext_error_in_data_ces		= (p_mppp_cep != P_NIL) ? Mppp_cep_ces : ADD_NIL;
			Mppp_ext_error_in_sppp_ref		= (p_sppp_cep != P_NIL) ? Sppp_cep_ref : SPPP_REF_NIL;
			Mppp_ext_error_in_cause			= cause_val;
			Mppp_ext_error_in_diag			= diag_val;

				/* Set the buffer size */

			Buffer_data_size				= Mppp_ext_error_in_size;

		} else {

			ev_code	= MPPP_ERROR_IN;

			Mppp_error_in_data_sapi		= (p_mppp_sap != P_NIL) ? Mppp_sap_data_sapi : SAPI_NIL;
			Mppp_error_in_data_ces		= (p_mppp_cep != P_NIL) ? Mppp_cep_ces : ADD_NIL;
			Mppp_error_in_sppp_ref		= (p_sppp_cep != P_NIL) ? Sppp_cep_ref : SPPP_REF_NIL;
			Mppp_error_in_cause			= cause_val;
			Mppp_error_in_diag			= diag_val;

				/* Set the buffer size */

			Buffer_data_size			= Mppp_error_in_size;

		}

		p_snd_msg	= Msg_or_buffer (p_buffer, 0);

			/* Load message addressing information */

		S_msg_nai		= mppp_error_nai;
		S_msg_sapi		= mppp_error_sapi;
		S_msg_conn_id	= mppp_error_ces;

			/* Send the message */

		mppp_snd (mppp_error_entity_id, ev_code);

	}

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/


void mppp_snd_ext_add_link_in_co (ev_code)
	code_t	ev_code;
{
	MPPP_DBG_FUNC ("mppp_snd_ext_add_link_in_co()")

	uchar			FAR *p_data;	/* pointer to the primitive data area */
	struct buffer	FAR *p_buffer;	/* pointer to a local buffer */

	MPPP_DBG_ENTER ();

		/*
			Send the Add Link indication/confirmation to the
			upper entity
		*/

	p_buffer	= Alloc_buffer ();

	p_data	= Buffer_a_start_data;

	Memset_far ((char FAR *)p_data, 0, Max (Mppp_ext_add_link_in_size, Mppp_ext_add_link_co_size));

	switch (ev_code) {

		case MPPP_EXT_ADD_LINK_IN:
			Mppp_ext_add_link_in_data_sapi	= Mppp_sap_data_sapi;
			Mppp_ext_add_link_in_data_ces	= Mppp_cep_ces;
			Mppp_ext_add_link_in_sppp_ref	= Sppp_cep_ref;
			Mppp_ext_add_link_in_speed		= Sppp_cep_link_speed;
			Mppp_ext_add_link_in_type		= Sppp_cep_link_type;
			Buffer_data_size				= Mppp_ext_add_link_in_size;
			break;

		case MPPP_EXT_ADD_LINK_CO:
			Mppp_ext_add_link_co_data_sapi	= Mppp_sap_data_sapi;
			Mppp_ext_add_link_co_data_ces	= Mppp_cep_ces;
			Mppp_ext_add_link_co_sppp_ref	= Sppp_cep_ref;
			Mppp_ext_add_link_co_speed		= Sppp_cep_link_speed;
			Mppp_ext_add_link_co_type		= Sppp_cep_link_type;
			Buffer_data_size				= Mppp_ext_add_link_co_size;
			break;

		default:

			MPPP_DBG_ERROR ("bad event code");

			Free_buffer (p_buffer); p_buffer = P_NIL;

			Trap (TRAP_MPPP_EVENT_ID, "mppp_snd_ext_add_link_in_co");
			break;

	}

	if (p_buffer != P_NIL) {

		p_snd_msg	= Msg_or_buffer (p_buffer, 0);

		mppp_snd_msg_to_user (Mppp_sap_data_upper_entity_id,
								MPPP_SAPI_EXT_EVENTS,
								ev_code);

	}

	Sppp_cep_link_add_rq_flag	= OFF;

	MPPP_DBG_LEAVE ();

}

/*--------------------------------------------------------------------------*/


void mppp_snd_ext_drop_link_in_co (ev_code, cause_val, diag_val, drop_origin)
	code_t			ev_code;		/* event code of the message to format */
	mppp_cause_t	cause_val;		/* PPP cause value */
	mppp_diag_t		diag_val;		/* PPP diagnostic value */
	uchar			drop_origin;	/* drop origin */
{
	MPPP_DBG_FUNC ("mppp_snd_ext_drop_link_in_co()")

	uchar			FAR *p_data;	/* pointer to the primitive data area */
	struct buffer	FAR *p_buffer;	/* pointer to a local buffer */

	MPPP_DBG_ENTER ();

		/*
			Send the Drop Link indication/confirmation to the
			upper entity
		*/

	p_buffer = Alloc_buffer ();

	p_data	= Buffer_a_start_data;

	Memset_far ((char FAR *)p_data, 0, Max (Mppp_ext_drop_link_in_size, Mppp_ext_drop_link_co_size));

	switch (ev_code) {

		case MPPP_EXT_DROP_LINK_IN:
			Mppp_ext_drop_link_in_data_sapi	= Mppp_sap_data_sapi;
			Mppp_ext_drop_link_in_data_ces	= Mppp_cep_ces;
			Mppp_ext_drop_link_in_sppp_ref	= Sppp_cep_ref;
			Mppp_ext_drop_link_in_speed		= Sppp_cep_link_speed;
			Mppp_ext_drop_link_in_type		= Sppp_cep_link_type;
			Mppp_ext_drop_link_in_origin	= drop_origin;
			Mppp_ext_drop_link_in_cause		= cause_val;
			Mppp_ext_drop_link_in_diag		= diag_val;
			Buffer_data_size				= Mppp_ext_drop_link_in_size;
			break;

		case MPPP_EXT_DROP_LINK_CO:
			Mppp_ext_drop_link_co_data_sapi	= Mppp_sap_data_sapi;
			Mppp_ext_drop_link_co_data_ces	= Mppp_cep_ces;
			Mppp_ext_drop_link_co_sppp_ref	= Sppp_cep_ref;
			Mppp_ext_drop_link_co_speed		= Sppp_cep_link_speed;
			Mppp_ext_drop_link_co_type		= Sppp_cep_link_type;
			Buffer_data_size				= Mppp_ext_drop_link_co_size;
			break;

		default:

			MPPP_DBG_ERROR ("bad event code");

			Free_buffer (p_buffer); p_buffer = P_NIL;

			Trap (TRAP_MPPP_EVENT_ID, "mppp_snd_ext_drop_link_in_co");
			break;

	}

	if (p_buffer != P_NIL) {

		p_snd_msg	= Msg_or_buffer (p_buffer, 0);

		mppp_snd_msg_to_user (Mppp_sap_data_upper_entity_id,
								MPPP_SAPI_EXT_EVENTS,
								ev_code);

	}

	Sppp_cep_link_drop_rq_flag	= OFF;

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/


void mppp_act_dea_lower_layer (entity, act_flag)
	ent_id_t	entity;		/* destination entity */
	uchar		act_flag;	/* activation flag: ON --> activate, OFF->deactivate */
{
	MPPP_DBG_FUNC ("mppp_activate_lower_layer()")

	code_t				code;	/* appropriate data message code */
	struct message	FAR *p_msg; /* pointer to local message */

	MPPP_DBG_ENTER ();

	code	= EV_NIL;

#	if MPPP_CC == ON	/* { */

			/*
				We'll not try to (de)activate the data layer
				if the signalling connection (when used) is not established.
			*/

		if ((Sppp_cep_cc_entity_id != ENT_NIL) &&
			(Sppp_cep_cc_state != MPPP_CC_STATE_ACTIVE)) {

			MPPP_DBG_WARNING ("call not active");

			MPPP_DBG_LEAVE ();

			return;


		}

#	endif	/* MPPP_CC } */

	p_msg	= Alloc_msg ();

	if (act_flag == ON) {

		if ((Sppp_cep_data_state == SPPP_RELEASED) &&
			(Sppp_cep_cc_entity_id == ENT_NIL)) {

				/*
					If no Signalling, then we update the number of
					member links in use.
				*/

			Mppp_cep_used_sppp_nb++;

		}

	} else {

		if ((Sppp_cep_data_state == SPPP_ESTABLISHED) &&
			(Sppp_cep_cc_entity_id == ENT_NIL)) {

				/*
					If no Signalling, then we update the number of
					member links in use.
				*/

			Mppp_cep_used_sppp_nb--;

		}

	}

	switch (entity) {

#		if MPPP_PH == ON	/* { */

			case ENT_PH_B:
			case ENT_PH:
				code	= (act_flag == ON) ? PH_ACT_RQ : PH_DEA_RQ;
				break;

#		endif	/* MPPP_PH } */

#		if MPPP_DL == ON	/* { */

			case ENT_DL:
			case ENT_DL_B:
			case ENT_DL_V120:

				if (act_flag == ON) {	/*$$$ FIXME: other processing ?? */

					if (Mppp_sap_data_ui == ON) {
						code = DL_U_EST_RQ;
					} else {
						code = DL_EST_RQ;
					}

				} else {

					code = DL_REL_RQ;

				}
				break;

#		endif	/* MPPP_DL } */

#		if MPPP_X25 == ON	/* { */

			case ENT_X25:
				code	= (act_flag == ON) ? X25_CALL_RQ : X25_CLEAR_RQ;

					/*$$$ FIXME - Format the correct message (with buffer) */

				break;

#		endif	/* MPPP_X25 } */

		default:
			MPPP_DBG_ERROR ("unknown entity ID");
			break;

	}

	if (code == EV_NIL) {

		Free_msg (p_msg);

		MPPP_DBG_ERROR ("no message code found");

	} else {

		p_snd_msg	= p_msg;

			/* Load message addressing information */

		S_msg_nai		= Sppp_cep_data_nai;
		S_msg_sapi		= Sppp_cep_data_sapi;
		S_msg_conn_id	= Sppp_cep_data_conn_id;

			/* Update the data connection state */

		if (act_flag == ON) {
			Sppp_cep_data_state = SPPP_AWAITING_EST;
		} else {
			Sppp_cep_data_state = SPPP_AWAITING_REL;
		}

		mppp_snd (entity, code);

	}

	p_msg = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/

void mppp_busy_to_lower_layer (entity_to, busy_flag)
	ent_id_t	entity_to;
	uchar		busy_flag;
{

	MPPP_DBG_FUNC ("mppp_busy_to_lower_layer()")

	code_t				code;	/* appropriate data message code */
	struct message	FAR *p_msg; /* pointer to local message */

	MPPP_DBG_ENTER ();

	code	= EV_NIL;

	p_msg	= Alloc_msg ();

	switch (entity_to) {

#		if MPPP_DL == ON	/* { */

			case ENT_DL:
			case ENT_DL_B:
			case ENT_DL_V120:

				if (busy_flag == BUSY) {	/*$$$ FIXME: other processing ?? */
					code = DL_BUSY_RQ;
				} else {
					code = DL_CLEAR_BUSY_RQ;
				}
				break;

#		endif	/* MPPP_DL } */

#		if MPPP_X25 == ON	/* { */

			case ENT_X25:

				if (busy_flag == BUSY) {	/*$$$ FIXME --- format msg here */
					code = X25_BUSY_RQ;
				} else {
					code = X25_CLEAR_BUSY_RQ;
				}
				break;

#		endif	/* MPPP_X25 } */

		default:
			MPPP_DBG_ERROR ("unknown entity ID");
			break;

	}

	if (code == EV_NIL) {

		Free_msg (p_msg);

		MPPP_DBG_ERROR ("no message code found");

	} else {

		p_snd_msg	= p_msg;

			/* Load message addressing information */

		S_msg_nai		= Sppp_cep_data_nai;
		S_msg_sapi		= Sppp_cep_data_sapi;
		S_msg_conn_id	= Sppp_cep_data_conn_id;

			/* Update the incoming data flow control state */

		if (busy_flag == BUSY) {
			Sppp_cep_data_out_busy = ON;
		} else {
			Sppp_cep_data_out_busy = OFF;
		}

		mppp_snd (entity_to, code);

	}

	p_msg = P_NIL;

	MPPP_DBG_LEAVE ();

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_retransmit - implements the retransmission of a
					received message.

Usage			void mppp_retransmit (code_t code, ent_id_t to);
					- code : new primitive code,
					- to   : destination entity.

Related
functions usage void Send_message (struct message FAR p_msg);

Common constants and declarations : mppp.h

Common objects : p_rcv_msg pointer.

*--------------------------------------------------------------------------*/

void mppp_retransmit (code, to)
	code_t		code;		/* primitive code */
	ent_id_t	to;			/* entity Id */
{

	MPPP_DBG_FUNC ("mppp_retransmit()")

	MPPP_DBG_ENTER ();

#	if ASSERT == ON

		if (p_rcv_msg == P_NIL) {
			Trap (TRAP_MPPP_NULL_POINTER, "mppp_retransmit");
		}

#	endif

	R_msg_code	= code;
	R_msg_to	= to;
	R_msg_from	= ENT_MPPP;

	Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/


/* EOF */

