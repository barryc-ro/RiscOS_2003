
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_dl.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		mppp_rcv_dl - implements the layer specific processing of the messages
 *			to be sent to, or received from the DL layer.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"

#if MPPP_DL == ON /* { */

#include "dl_int.h"		/* Data-Link layer upper interface */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 mppp_rcv_dl - implements the DL layer specific processing on
						the received messages.

Usage			 uchar mppp_rcv_dl ();

Related
functions usage

Description		mppp_rcv_dl implements the first processing of a received
					message from DL layers. It sets the current context
					for the following processing, particularily the event
					identifier is set according to the message
					code, and the internal event type is set according
					to the internal SAP Id and the the message code.

Return value	mppp_rcv_dl returns a code :

					= OK  : valid message. The context pointers are set.

					= NOK : Invalid message.

					= STOP: no more processing to do.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: received message and buffer,
				  current contexts,

*--------------------------------------------------------------------------*/

uchar mppp_rcv_dl ()
{
	MPPP_DBG_FUNC ("mppp_rcv_dl()")

	struct message	FAR *p_msg;
	uchar			FAR *p_data;
	ushort				data_size;
	uchar				result;

	MPPP_DBG_ENTER ();

	if (mppp_access_sppp_data_object (R_msg_from, R_msg_nai, R_msg_sapi, R_msg_conn_id) != OK) {

		MPPP_DBG_ERROR ("access_DL_sppp_data_object failed");
		MPPP_DBG_LEAVE ();

		return (NOK);
	}

		/* Is the Single Link NA still active ? */

	if (Sppp_na_active == OFF) {

		MPPP_DBG_NOTICE ("Single link NA not active");
		MPPP_DBG_LEAVE ();

		return (STOP);
	}


		/* We set the MPPP context pointers */

	p_mppp_na		= Sppp_cep_p_mppp_na;
	p_mppp_sap		= Sppp_cep_p_mppp_sap;
	p_mppp_cep		= Sppp_cep_p_mppp_cep;

		/* Set up error messages addressing information */

	mppp_error_nai			= Mppp_na_nai;
	mppp_error_sapi 		= Mppp_sap_data_sapi;
	mppp_error_ces  		= Mppp_cep_ces;
	mppp_error_entity_id	= Mppp_sap_data_upper_entity_id;

		/* Set up the message direction */

	Mppp_cep_msg_direction	= MPPP_FROM_PEER;

	switch (R_msg_from) {

		case ENT_DL_V120:
			mppp_local_sapi = MPPP_L_SAPI_DL_V120;
			break;

		case ENT_DL_B:
			mppp_local_sapi = MPPP_L_SAPI_DL_LAPB;
			break;

		case ENT_DL_D:
			mppp_local_sapi = MPPP_L_SAPI_DL_LAPD;
			break;

		default:

			MPPP_DBG_ERROR ("unknown DL entity");
			MPPP_DBG_LEAVE ();

			Trap (TRAP_MPPP_ENTITY_FROM, "mppp_rcv_dl");

	}


	switch (event_id) {

		case DL_EST_IN :
		case DL_EST_CO :
		case DL_U_EST_IN :
			mppp_c_prot_event_id = MPPP_CP_EV_UP;

			if ((Sppp_cep_data_state == SPPP_RELEASED) &&
				(Sppp_cep_cc_entity_id == ENT_NIL) &&
				((event_id == DL_EST_IN) || (event_id == DL_EST_IN)) {

					/*
						If no Signalling, then we update the number of
						member links in use.
					*/

				Mppp_cep_used_sppp_nb++;

			}

			if (Is_sppp_first_in_bundle ()) {
				Mppp_cep_data_state	= MPPP_ESTABLISHED;
			}


			/* Pass through. No break */

		case DL_REL_IN :
		case DL_REL_CO :

				/* Set information for the LCP state machine */

			if (mppp_c_prot_event_id == EV_NIL) {

				if (((Sppp_cep_data_state == SPPP_ESTABLISHED) || (Sppp_cep_data_state == SPPP_AWAITING_EST))
						&&
					(Sppp_cep_cc_entity_id == ENT_NIL) &&
					(event_id == DL_REL_IN)) {

						/*
							If no Signalling, then we update the number of
							member links in use.
						*/

					Mppp_cep_used_sppp_nb--;

				}

				mppp_c_prot_event_id = MPPP_CP_EV_DOWN;

				if (Is_sppp_first_in_bundle ()) {
					Mppp_cep_data_state	= MPPP_RELEASED;
				}

			}

			p_mppp_c_prot		= Sppp_cep_p_lcp_info;
			mppp_event_type		= MPPP_EV_TYPE_LCP;
			break;


		case DL_DA_IN:
		case DL_U_DA_IN:

			if (event_id == DL_DA_IN) {
				MPPP_DBG_NOTICE ("DL_DA_IN (");
			} else {
				MPPP_DBG_NOTICE ("DL_U_DA_IN (");
			}
			MPPP_DBG_NOTICE_INT (R_data_size);
			MPPP_DBG_NOTICE_STR (")");

			if (Sppp_cep_link_mode == SPPP_MODE_ASYN) {

					/*
						Decode the received frame
						Parameter (ON/OFF) --> checking of FCS and FLAGs
					*/

				if ((p_msg = mppp_async_to_sync ()) == P_NIL) {

					MPPP_DBG_ERROR ("async-to-sync failed or partial frame");
					MPPP_DBG_LEAVE ();

					return (STOP);

				} else {

					MPPP_DBG_NOTICE ("async-to-sync OK(");

					p_rcv_msg	= p_msg;
					p_msg		= P_NIL;

					p_data		= R_a_data;
					data_size	= R_data_size;

					MPPP_DBG_NOTICE_INT (data_size);
					MPPP_DBG_NOTICE_STR (")");

				}

			} else {

				p_data		= R_a_data;
				data_size	= R_data_size;

			}

				/*
					Remove any additional header information,
					up to the PPP header.
					(3rd parameter = OFF --> not from User)
				*/

			result = mppp_dispatch_frame (&p_data, &data_size, OFF);

			if (result != OK) {

				if (result == NOK) {

					MPPP_DBG_ERROR ("failed to dispatch frame(");
					MPPP_DBG_ERROR_INT (data_size);
					MPPP_DBG_ERROR_STR (")");

						/*
							Send an error indication to the user entity
						*/

					mppp_snd_error_in (MPPP_CAUSE_FRAME_DISCARDED,
											MPPP_DIAG_NO_INFO, Mppp_sap_data_sapi);

				}

				MPPP_DBG_LEAVE ();
				return (STOP);
			}
			break;

		case DL_BUSY_IN:

			MPPP_DBG_WARNING ("received DL_BUSY_IN");

			if (Sppp_cep_data_out_busy == OFF) {
				Sppp_cep_data_out_busy	= ON;
				Mppp_cep_busy_sppp_nb++;
			}
			break;

		case DL_CLEAR_BUSY_IN:

			MPPP_DBG_WARNING ("received DL_CLEAR_BUSY_IN");

			if (Sppp_cep_data_out_busy == ON) {

				Sppp_cep_data_out_busy	= OFF;
				Mppp_cep_busy_sppp_nb--;

			}

				/*
					Restart the sending of queued messages on
					this member link
				*/

			mppp_process_pending_sppp_tx ();
			break;

		case DL_INT_SYNC_CO:
		case DL_COMMIT_CO:
			break;

		default:	/* Other DL events */
			break;

	}

	MPPP_DBG_LEAVE ();

	return (OK);
}


/*-----------------------------------------------------------------------*/


#endif	/* MPPP_DL == ON } */


/* EOF */

