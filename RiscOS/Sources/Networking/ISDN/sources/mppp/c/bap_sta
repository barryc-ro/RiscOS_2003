
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - bap_sta.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) : state driven automaton
 *		- bap_state_proc implements the processing of an event according
 *			to the BAP automaton state.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|    Bandwidth Allocation Protocol                    |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_BAP == ON	/* { */

#include "mppp_ext.h"
#include "bap.h"		/* BAP definitions */


/*-------------------------------------------------------------------------*/

		/* Macros used to load BAP Datagram Options */

		/*-=-=-=-=-=-= LINK TYPE Option =-=-=-=-=-=-=*/
		
#define	Bap_opt_LINK_TYPE(_p_curr,_speed,_type)	\
				{													\
					Mppp_put_char(BAP_OPT_LINK_TYPE, _p_curr);		\
					Mppp_put_char(BAP_OPT_SZ_LINK_TYPE,_p_curr);	\
					Mppp_put_short(_speed,_p_curr);					\
					Mppp_put_char(_type, _p_curr);					\
				}

		/*-=-=-=-=-=-= PHONE DELTA Option =-=-=-=-=-=-=*/
		
#define	Bap_opt_PHONE_DELTA(_p_curr,_ud,_nb_lgth,_p_nb,_sa_lgth,_p_sa)	\
				{													\
					uchar _pd_lgth;										\
					Mppp_put_char(BAP_OPT_PHONE_DELTA, _p_curr);		\
					if (_sa_lgth > 0) {								\
						_pd_lgth = ((BAP_OPT_SZ_NULL)+(BAP_OPT_SZ_BYTE)+(BAP_OPT_SZ_NULL+_nb_lgth)+(BAP_OPT_SZ_NULL+_sa_lgth));	\
					} else {										\
						_pd_lgth = ((BAP_OPT_SZ_NULL)+(BAP_OPT_SZ_BYTE)+(BAP_OPT_SZ_NULL+_nb_lgth));	\
					}												\
					Mppp_put_char(_pd_lgth,_p_curr);	\
					Mppp_put_char(BAP_SUB_OPT_UNIQUE_DIGITS, _p_curr);		\
					Mppp_put_char(BAP_OPT_SZ_BYTE, _p_curr);		\
					Mppp_put_char(_ud, _p_curr);		\
					Mppp_put_char(BAP_SUB_OPT_SUBSCRIBER_NUMBER, _p_curr);		\
					Mppp_put_char(_nb_lgth+2, _p_curr);		\
					Memcpy_far ((char FAR *)_p_curr, (char FAR *)_p_nb, (uint)_nb_lgth);	\
					Mppp_inc_ptr(_nb_lgth, _p_curr);		\
					if (_sa_lgth > 0) {						\
  						Mppp_put_char(BAP_SUB_OPT_PHONE_SUB_ADDRESS, _p_curr);		\
						Mppp_put_char(_sa_lgth+2, _p_curr);		\
						Memcpy_far ((char FAR *)_p_curr, (char FAR *)_p_sa, (uint)_sa_lgth);	\
						Mppp_inc_ptr(_sa_lgth, _p_curr);		\
					}											\
				}


		/*-=-=-=-=-=-= NO PHONE NUMBER NEEDED Option =-=-=-=-=-=-=*/
		
#define	Bap_opt_NO_PHONE_NUMBER(_p_curr)	\
				{													\
					if (Mppp_cep_bap_no_phone_number == ON) {		\
						Mppp_put_char(BAP_OPT_NO_PHONE_NUMBER, _p_curr);	\
						Mppp_put_char(BAP_OPT_SZ_NULL, _p_curr);			\
					}												\
				}


		/*-=-=-=-=-=-= REASON Option =-=-=-=-=-=-=*/
		
#define	Bap_opt_REASON(_p_curr,_rea_lgth,_p_rea)	\
				{										\
					if (_rea_lgth > 0) {						\
  						Mppp_put_char(BAP_OPT_REASON, _p_curr);		\
						Mppp_put_char(_rea_lgth+2, _p_curr);		\
						Memcpy_far ((char FAR *)_p_curr, (char FAR *)_p_rea, (uint)_rea_lgth);	\
						Mppp_inc_ptr(_rea_lgth, _p_curr);		\
					}											\
				}


		/*-=-=-=-=-=-= LINK DISCRIMINATOR Option =-=-=-=-=-=-=*/
		
#define	Bap_opt_LINK_DISCRIMINATOR(_p_curr,_val)	\
				{													\
					Mppp_put_char(BAP_OPT_LINK_DISCRIMINATOR, _p_curr);		\
					Mppp_put_char(BAP_OPT_SZ_SHORT, _p_curr);		\
					Mppp_put_short(_val, _p_curr);					\
				}


		/*-=-=-=-=-=-= CALL STATUS Option =-=-=-=-=-=-=*/
		
#define	Bap_opt_CALL_STATUS(_p_curr,_status,_action)	\
				{													\
					Mppp_put_char(BAP_OPT_CALL_STATUS, _p_curr);	\
					Mppp_put_char(BAP_OPT_SZ_SHORT, _p_curr);		\
					Mppp_put_char(_status, _p_curr);				\
					Mppp_put_char(_action, _p_curr);				\
				}

	
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bap_state_machine	- BAP state machine.

Usage			void bap_state_machine (void);

Return value :	returns void

common constants and declarations : mppp.h, bacp.h, bap.h

common objects : current contexts pointers

*--------------------------------------------------------------------------*/

void bap_state_machine ()
{
	MPPP_DBG_FUNC ("bap_state_machine()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 All the following functions implement the execution of a
				 received event (external or internal, servicing queue,
				 expiry of timers, receiver busy condition) according to the
				 current state.

Usage			 void  bap_xxxxxx ();
				 uchar bap_xxxxxx ();

Description


Return value	 void

Common constants and declarations : mppp.h, bap.h

Common objects : current contexts (thru access macros).

*--------------------------------------------------------------------------*/

uchar bap_nothing_to_do_uchar ()
{
	MPPP_DBG_FUNC ("bap_nothing_to_do_uchar()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_WARNING ("no action implemented");

	MPPP_DBG_LEAVE ();

	return (OK);

}

/*-------------------------------------------------------------------------*/

void bap_nothing_to_do ()
{
	MPPP_DBG_FUNC ("bap_nothing_to_do()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_WARNING ("no action implemented");

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bap_init_restart_counter ()
{
	MPPP_DBG_FUNC ("bap_init_restart_counter()")

	MPPP_DBG_ENTER ();

	Mppp_c_prot_terminate_count = Mppp_c_prot_mx_terminate;
	Mppp_c_prot_configure_count = Mppp_c_prot_mx_configure;
	Mppp_c_prot_failure_count   = 0;

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bap_zero_restart_counter ()
{
	MPPP_DBG_FUNC ("bap_zero_restart_counter()")

	MPPP_DBG_ENTER ();

	Mppp_c_prot_terminate_count = 0;
	Mppp_c_prot_configure_count = 0;
	Mppp_c_prot_failure_count   = Mppp_c_prot_mx_failure;

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bap_send_call_request ()
{
	MPPP_DBG_FUNC ("bap_send_call_request()")

	uchar			FAR *p_curr;
	uchar			FAR *p_curr_start;
	uchar			FAR *p_data_start;
	struct buffer	FAR *p_buffer;
	ushort				data_size;
	uchar				link_type_mask;

	MPPP_DBG_ENTER ();

	mppp_current_ppp_pid = PPP_PROT_BAP;

	link_type_mask	= 0;

	switch (Sppp_cep_link_type) {

		case SPPP_LINK_X25:
			link_type_mask	|= Bap_link_type_x25_mask;
			break;

		case SPPP_LINK_ANALOG:
			link_type_mask	|= Bap_link_type_analog_mask;
			break;

		case SPPP_LINK_SW_DIGITAL:
			link_type_mask	|= Bap_link_type_sw_digital_mask;
			break;

		case SPPP_LINK_ISDN_B:
		case SPPP_LINK_ISDN_D:
		default:
			link_type_mask	|= Bap_link_type_isdn_mask;
			break;

	}

	p_buffer = Alloc_buffer ();

	p_data_start	= Buffer_a_start_data;
	p_curr			=
	p_curr_start	= (p_data_start+PPP_PACKET_HEADER_LGTH+PPP_FRAME_HEADER_LGTH);

		/* The link speed in kilobits per second */

	Bap_opt_LINK_TYPE		(p_curr, Sppp_cep_link_speed, link_type_mask);
	Bap_opt_NO_PHONE_NUMBER	(p_curr);
	Bap_opt_REASON			(p_curr, Mppp_cep_bap_reason_lgth, Mppp_cep_bap_p_reason);

		/*
			Update the PPP packet identifier
			As stated in RFC 2125,
			upon expiration of the restart timer, the implementation
			MUST retransmit the Request or Indication, with an
			IDENTICAL identification number.
		*/

	if (mppp_c_prot_event_id != MPPP_CP_EV_TIMEOUT) {
		Mppp_c_prot_s_packet_id++;
	}

		/* Update the PPP packet identifier */

	if (Mppp_c_prot_s_packet_id == PPP_MX_PACKET_ID_VAL) {
		Mppp_c_prot_s_packet_id	= 0;
	} else {
		Mppp_c_prot_s_packet_id++;
	}

		/* Prepare the PPP frame for sending */

	data_size	= mppp_prepare_packet_to_send (PPP_PROT_BAP,
												BAP_PCK_CALL_RQ,
												Mppp_c_prot_s_packet_id,
												p_data_start,
												(p_curr - p_curr_start));

		/* Set the buffer size, and allocate a message for sending */

	Buffer_data_size	= data_size;
	p_snd_msg			= Msg_or_buffer (p_buffer, 0);

		/*
			BAP Datagram MUST NOT be queued
			Send a data message to the lower entity
		*/

	mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

		/* Decrement the Request count, and start the restart timer */

	Mppp_c_prot_configure_count--;
	Mppp_c_prot_start_timer (MPPP_BAP_TI_X_RESTART);

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bap_send_call_response ()
{
	MPPP_DBG_FUNC ("bap_send_call_response()")

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

#endif	/* MPPP_BAP == ON } */

/* EOF */


