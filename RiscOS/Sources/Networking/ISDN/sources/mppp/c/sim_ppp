
/*-----------------------------------------------------------------------
 *						 M O D U L E   H E A D E R
 *
 * filename - sim_ppp.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      build_xxx_packet - implements the building of PPP packets
 *
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_SIM_BUILDER == ON	/* { */
#	include "simul.h"
#	include "sim_ppp.h"

/*--------------------------------------------------------------------------*/

				/* COMMON VARIABLES AND EXTERNAL */
				/*-------------------------------*/

ushort	g_ppp_pid;				/* PPP protocol ID */
ushort	g_ppp_packet_type;		/* PPP packet type */
ushort	g_ppp_packet_id;		/* PPP packet identifier */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             build_ppp_packet - implements the building of a PPP packet

Usage            ushort build_ppp_packet (p_data,pid,pack_type);

Common constants and declarations : mppp.h

Common objects   : message current context.

*-------------------------------------------------------------------------*/

#define	Load_packet_header(_p,ppp_pid,pack_type,pack_id,pack_lgth)	\
				Mppp_put_char (PPP_UI_ADD_VAL,_p);			\
				Mppp_put_char (PPP_UI_CTRL_VAL,_p);			\
				Mppp_put_short (ppp_pid,_p);				\
				Mppp_put_char (pack_type,_p);					\
				Mppp_put_char (pack_id,_p);					\
				Mppp_put_short (pack_lgth,_p)


ushort build_ppp_packet (p_data)
	uchar	FAR *p_data;
{
	MPPP_DBG_FUNC ("build_ppp_packet()")

	uchar	FAR *p_curr;		/* current position in the packet */
	ushort		data_size;
	ushort		i, j;
	ushort		echo_data_size;
	uchar		init_echo_byte;


	MPPP_DBG_ENTER ();

	echo_data_size	= 70;
	init_echo_byte	= 0x01;

		/*
			Get PPP packet header information:
			PPP protocol ID, PPP packet type, PPP packet identifier
		*/

	mg_ppp_pid 			();

	if (Mppp_is_prot (g_ppp_pid)) {

		mg_ppp_packet_type	();
		mg_ppp_packet_id	();

		data_size	= 0;
		p_curr		= (uchar FAR *)(p_data + PPP_FRAME_HEADER_LGTH + PPP_PACKET_HEADER_LGTH);

		if ((g_ppp_pid == PPP_PROT_LCP) &&
			((g_ppp_packet_type == MPPP_CP_PCK_ECHO_RQ) ||
				(g_ppp_packet_type == MPPP_CP_PCK_ECHO_REPLY))) {

			for (i = 0; i < echo_data_size; i++) {
				*p_curr++ = (uchar)(init_echo_byte++);
			}

			data_size	= echo_data_size;

		} else {

			data_size	= mg_hexa (p_curr);

		}

		p_curr		= p_data;

		data_size	+= PPP_PACKET_HEADER_LGTH;

		Load_packet_header (p_curr, g_ppp_pid, g_ppp_packet_type, g_ppp_packet_id, data_size);

		data_size	+= PPP_FRAME_HEADER_LGTH;

	} else {

#if 1

		*p_data++	= PPP_UI_ADD_VAL;
		*p_data++	= PPP_UI_CTRL_VAL;
		Mppp_put_short (PPP_PROT_IP, p_data);

		*p_data++	= 0x45;

		data_size	= 43;

		data_size	+= 5;

		for (i = 0, j = 0x00; i < data_size; i++) {
			*p_data++	= (uchar)j++;
		}
#else

		p_curr		= p_data;

		*p_curr++	= PPP_UI_ADD_VAL;
		*p_curr++	= PPP_UI_CTRL_VAL;
		*p_curr++	= 0xc0;
		*p_curr++	= 0x21;
		*p_curr++	= 0x01;
		*p_curr++	= 0x03;
		*p_curr++	= 0x00;
		*p_curr++	= 0x14;
		*p_curr++	= 0x01;
		*p_curr++	= 0x04;
		*p_curr++	= 0x05;
		*p_curr++	= 0xdc;
		*p_curr++	= 0x02;
		*p_curr++	= 0x06;
		*p_curr++	= 0x00;
		*p_curr++	= 0x00;
		*p_curr++	= 0x00;
		*p_curr++	= 0x00;
		*p_curr++	= 0x05;
		*p_curr++	= 0x06;
		*p_curr++	= 0x74;
		*p_curr++	= 0x12;
		*p_curr++	= 0xac;
		*p_curr++	= 0xc2;

		data_size	= (p_curr - p_data);
#endif

	}

	MPPP_DBG_LEAVE ();

	return (data_size);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mg_xxx - get one parameter needed for the
						 building of a PPP frame.

Usage           void mg_xxx ()

Common constants and declarations : services.h and simul.h

*--------------------------------------------------------------------------*/

void mg_ppp_pid ()
{
	Prompt	("   PPP Protocol ID (hex)", 4x, g_ppp_pid);
	Scan 	(4x, &g_ppp_pid);
	Echo	(4x, g_ppp_pid);
}

/*-------------------------------------------------------------------------*/

void mg_ppp_packet_type ()
{
	Prompt	("   PPP Packet type (hex)", x, g_ppp_packet_type);
	Scan 	(x, &g_ppp_packet_type);
	Echo	(x, g_ppp_packet_type);
}

/*-------------------------------------------------------------------------*/

uint v_packet_id;

void mg_ppp_packet_id ()
{
	Prompt	("           PPP Packet ID", u, g_ppp_packet_id);
	Scan 	(d, &v_packet_id);

	switch (v_packet_id) {

		case -1:	/* increment the packet ID value */
			g_ppp_packet_id = ((g_ppp_packet_id == 255) ? 0 : ++g_ppp_packet_id);
			break;

		case -2:	/* reuse the current value */
			break;

		default:
			g_ppp_packet_id = v_packet_id;
			break;

	}

	Echo	(u, g_ppp_packet_id);
}

/*-------------------------------------------------------------------------*/


#endif	/* MPPP_SIM_BUILDER == ON } */

/* EOF */
