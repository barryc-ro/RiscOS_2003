
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - lcp.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|    Link Control Protocol                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"
#include "lcp.h"		/* LCP definitions */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				lcp_context_config - configure the LCP context within the
						ML PPP

Usage				void lcp_context_config (p_mppp_config_cep);
						struct mppp_cfg_cep FAR *p_mppp_config_cep;

Return value :		void

Common constants and declarations : mppp.h

Common objects : p_mppp_cep pointer.

*--------------------------------------------------------------------------*/

void lcp_context_config ()
{
	MPPP_DBG_FUNC ("lcp_context_config()")

	MPPP_DBG_ENTER ();

		/* Check the validity of the ML PPP CEP pointer */

	if (p_sppp_cep != P_NIL) {

			/* Set up the pointer used by the access macros */

		p_mppp_c_prot						= Sppp_cep_p_lcp_info;

			/* Set the PPP Protocol ID value */

		Mppp_c_prot_ppp_pid					= PPP_PROT_LCP;

			/* Finite-State Automaton (FSA) Actions Functions */

		Mppp_c_prot_illegal_event				= lcp_illegal_event;
		Mppp_c_prot_this_layer_up				= lcp_this_layer_up;
		Mppp_c_prot_this_layer_down				= lcp_this_layer_down;
		Mppp_c_prot_this_layer_started			= lcp_this_layer_started;
		Mppp_c_prot_this_layer_finished			= lcp_this_layer_finished;
		Mppp_c_prot_init_restart_counter		= lcp_init_restart_counter;
		Mppp_c_prot_zero_restart_counter		= lcp_zero_restart_counter;
		Mppp_c_prot_send_configure_request		= lcp_send_configure_request;
		Mppp_c_prot_send_configure_ack			= lcp_send_configure_ack;
		Mppp_c_prot_send_configure_nak_rej		= lcp_send_configure_nak_rej;
		Mppp_c_prot_send_terminate_request		= lcp_send_terminate_request;
		Mppp_c_prot_send_terminate_ack			= lcp_send_terminate_ack;
		Mppp_c_prot_send_code_reject			= lcp_send_code_reject;
		Mppp_c_prot_send_echo_reply				= lcp_send_echo_reply;
		Mppp_c_prot_is_reject_fatal				= lcp_is_reject_fatal;
		Mppp_c_prot_check_configure_request		= lcp_check_configure_request;
		Mppp_c_prot_check_configure_ack_nak_rej = lcp_check_configure_ack_nak_rej;

		Strcpy_far ((char FAR *)&Mppp_c_prot_name[0], "LCP", MPPP_SZ_PROT_NAME);

	}

	MPPP_DBG_LEAVE ();

}


/*-----------------------------------------------------------------------*/


/*EOF*/

