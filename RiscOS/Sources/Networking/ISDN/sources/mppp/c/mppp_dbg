/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_dbg.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	  This module contains code to support entity debugging.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_DEBUG == ON	/* { */

		ushort			MpppDbgFlags;
		CONST	char	MpppDbgID [8] = "\nDbg:";


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_dbg_print - dumps data to the debug display formated
						in hex and ascii for easy viewing

Usage			void mppp_dbg_print (p_data, num_bytes, offset)

					uchar	FAR *p_data;	pointer to the buffer of data
											to be displayed

					ushort		num_bytes;	number of bytes to display

					ushort		offset;		beginning offset to be displayed
											before each line

					uchar		tx_flag;	indicates TX or RX packet.

  Return Value: None

*--------------------------------------------------------------------------*/

#if MPPP_DEBUG_PRINTF == ON /* { */

	void mppp_dbg_print (p_data, num_bytes, offset, tx_flag)
		uchar	FAR *p_data;
		ushort		num_bytes;
		ushort		offset;
		uchar		tx_flag;
	{
		uint	i, j;

		if (tx_flag == ON) {
			MpppDbgPrint(MPPP_F_OUT "\n*** Tx Packet ***\n");
		} else {
			MpppDbgPrint(MPPP_F_OUT "\n*** Rx Packet ***\n");
		}

		if (num_bytes > MPPP_DBG_MAX_BYTES_TO_PRINT) {
			num_bytes	= MPPP_DBG_MAX_BYTES_TO_PRINT;
		}

		for (i = 0; i < num_bytes; i += 16)
		{
			MpppDbgPrint(MPPP_F_OUT "%04lx: ", (ulong)(i + offset));

				/*
					Output the hex bytes
				*/

			for (j = i; j < (i+16); j++) {

				if (j < num_bytes) {
					MpppDbgPrint (MPPP_F_OUT "%02x ",(uint)((uchar)*(p_data+j)));
				} else {
					MpppDbgPrint(MPPP_F_OUT "   ");
				}
			}

			MpppDbgPrint(MPPP_F_OUT "  ");

				/*
					Output the ASCII bytes
				*/

			for (j = i; j < (i+16); j++) {

				if (j < num_bytes) {

					char c = *(p_data+j);

					if (c < ' ' || c > 'Z') {
						c = '.';
					}

					MpppDbgPrint(MPPP_F_OUT "%c", (uint)c);

				} else {

					MpppDbgPrint(MPPP_F_OUT " ");

				}
			}

			MpppDbgPrint(MPPP_F_OUT "\n");
		}
	}


#else /* } NOT MPPP_DEBUG_PRINTF { */


	void mppp_dbg_print (p_data, num_bytes, offset, tx_flag)
		uchar	FAR *p_data;
		ushort		num_bytes;
		ushort		offset;
		uchar		tx_flag;
	{
		uint	i, j;

		if (tx_flag == ON) {
			MpppTraceStr ("\n*** Tx Packet ***\n");
		} else {
			MpppTraceStr ("\n*** Rx Packet ***\n");
		}

		if (num_bytes > MPPP_DBG_MAX_BYTES_TO_PRINT) {
			num_bytes	= MPPP_DBG_MAX_BYTES_TO_PRINT;
		}

		for (i = 0; i < num_bytes; i += 16)
		{
			MpppTracePtr ((ulong)(i + offset));
			MpppTraceStr (": ");

				/*
					Output the hex bytes
				*/

			for (j = i; j < (i+16); j++) {

				if (j < num_bytes) {
					MpppTracePtr (((uchar)*(p_data+j)));
					MpppTraceStr (" ");
				} else {
					MpppTraceStr ("   ");
				}
			}

			MpppTraceStr ("  ");

				/*
					Output the ASCII bytes
				*/

			for (j = i; j < (i+16); j++) {

				if (j < num_bytes) {

					char c = *(p_data+j);

					if (c < ' ' || c > 'Z') {
						c = '.';
					}

					MpppTraceByte ((uint)c);

				} else {

					MpppTraceStr (" ");

				}
			}

			MpppTraceStr ("\n");
		}
	}

#endif	/* MPPP_DEBUG_PRINTF } */

/*---------------------------------------------------------------------*/

#endif	/* MPPP_DEBUG == ON } */

/* EOF */



