
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_x25.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		mppp_rcv_x25 - implements the layer specific processing of the messages
 *			to be sent to, or received from the X25 layer.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"

#if MPPP_X25 == ON /* { */

#include "x25_int.h"		/* X25 PLP interface file */
#include "mx25_int.h"		/* MX25 interface files */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 mppp_rcv_x25 - implements the X25 layer specific processing on
						the received messages.

Usage			 uchar mppp_rcv_x25 ();

Related
functions usage

Description		mppp_rcv_x25 implements the first processing of a received
						message from X25 layer. It sets the current context
						for the following processing, particularily the event
						identifier is set according to the message
						code, and the internal event type is set according
						to the internal SAP Id and the the message code.

Return value	mppp_rcv_x25 returns a code :

					= OK  : valid message. The context pointers are set.

					= NOK : Invalid message.

					= STOP: no more processing to do.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: received message and buffer,
				  current contexts,

*--------------------------------------------------------------------------*/

uchar mppp_rcv_x25 ()
{
	MPPP_DBG_FUNC ("mppp_rcv_x25()")

	struct message	FAR *p_msg;
	uchar			FAR *p_data;
	ushort				data_size;
	uchar				result;

	MPPP_DBG_ENTER ();

	if (mppp_access_sppp_data_object (R_msg_from, R_msg_nai, R_msg_sapi, R_msg_conn_id) != OK) {

		MPPP_DBG_ERROR ("access_X25_sppp_data_object failed");
		MPPP_DBG_LEAVE ();

		return (NOK);
	}

		/* Is the Single Link NA still active ? */

	if (Sppp_na_active == OFF) {

		MPPP_DBG_NOTICE ("Single link NA not active");
		MPPP_DBG_LEAVE ();

		return (STOP);
	}



		/* We set the MPPP context pointers */

	p_mppp_na	= Sppp_cep_p_mppp_na;
	p_mppp_sap	= Sppp_cep_p_mppp_sap;
	p_mppp_cep	= Sppp_cep_p_mppp_cep;

		/* Set up error messages addressing information */

	mppp_error_nai			= Mppp_na_nai;
	mppp_error_sapi 		= Mppp_sap_data_sapi;
	mppp_error_ces  		= Mppp_cep_ces;
	mppp_error_entity_id	= Mppp_sap_data_upper_entity_id;

		/* Is the bundle's NA still active ? */

	if (Mppp_na_active == OFF) {

		MPPP_DBG_NOTICE ("Bundle's NA not active");
		MPPP_DBG_LEAVE ();

		return (STOP);
	}


	if (R_msg_from == ENT_X25) {

		mppp_local_sapi = MPPP_L_SAPI_X25;

		switch (event_id) {

			case X25_CALL_IN :
			case X25_CLEAR_IN : /* send a response !!! $$$ FIXME */
			case X25_CALL_CO :
			case X25_CLEAR_CO :

				p_mppp_c_prot			= Sppp_cep_p_lcp_info;
				mppp_event_type			= MPPP_EV_TYPE_LCP;

				if ((event_id == X25_CALL_IN) || (event_id == X25_CALL_CO)) {

						/* Set information for the LCP state machine */

					mppp_c_prot_event_id 	= MPPP_CP_EV_UP;

					if (event_id == X25_CALL_IN) {

							/* Send a response !!! $$$ FIXME */

					}


					if (Is_sppp_first_in_bundle ()) {
						Mppp_cep_data_state	= MPPP_ESTABLISHED;
					}

				}

				if ((event_id == X25_CLEAR_IN) || (event_id == X25_CLEAR_CO)) {

						/* Set information for the LCP state machine */

					mppp_c_prot_event_id 	= MPPP_CP_EV_DOWN;

					if (event_id == X25_CLEAR_IN) {

						if (((Sppp_cep_data_state == SPPP_ESTABLISHED) || (Sppp_cep_data_state == SPPP_AWAITING_EST))
								&&
							(Sppp_cep_cc_entity_id == ENT_NIL)) {


								/*
									If no Signalling, then we update the number of
									member links in use.
								*/

							Mppp_cep_used_sppp_nb--;

						}

							/* Send a response !!! $$$ FIXME */

					}


					if (Is_sppp_first_in_bundle ()) {
						Mppp_cep_data_state	= MPPP_RELEASED;
					}

				}
				break;


			case X25_DA_IN:

				MPPP_DBG_NOTICE ("X25_DA_IN (");
				MPPP_DBG_NOTICE_INT (R_data_size);
				MPPP_DBG_NOTICE_STR (")");

				if (Sppp_cep_link_mode == SPPP_MODE_ASYN) {

						/*
							Decode the received frame
						*/

					if ((p_msg = mppp_async_to_sync ()) == P_NIL) {

						MPPP_DBG_ERROR ("async-to-sync failed or partial frame");
						MPPP_DBG_LEAVE ();

						return (STOP);

					} else {

						MPPP_DBG_NOTICE ("async-to-sync OK(");

						p_rcv_msg	= p_msg;
						p_msg		= P_NIL;

						p_data		= R_a_data;
						data_size	= R_data_size;

						MPPP_DBG_NOTICE_INT (data_size);
						MPPP_DBG_NOTICE_STR (")");

					}

				} else {

					p_data		= R_a_data;
					data_size	= R_data_size;

				}


					/*
						Remove any additional header information,
						up to the PPP header.
						(3rd parameter = OFF --> not from User)
					*/

				result = mppp_dispatch_frame (&p_data, &data_size, OFF);

				if (result != OK) {

					if (result == NOK) {

						MPPP_DBG_ERROR ("failed to dispatch frame(");
						MPPP_DBG_ERROR_INT (data_size);
						MPPP_DBG_ERROR_STR (")");

							/*
								Send an error indication to the user entity
							*/

						mppp_snd_error_in (MPPP_CAUSE_FRAME_DISCARDED,
												MPPP_DIAG_NO_INFO, Mppp_sap_data_sapi);

					}

					MPPP_DBG_LEAVE ();
					return (STOP);
				}
				break;

			case X25_BUSY_IN:

				MPPP_DBG_WARNING ("received X25_BUSY_IN");

				if (Sppp_cep_data_out_busy == OFF) {
					Sppp_cep_data_out_busy	= ON;
					Mppp_cep_busy_sppp_nb++;
				}
				break;

			case X25_CLEAR_BUSY_IN:

				MPPP_DBG_WARNING ("received X25_CLEAR_BUSY_IN");

				if (Sppp_cep_data_out_busy == ON) {

					Sppp_cep_data_out_busy	= OFF;
					Mppp_cep_busy_sppp_nb--;
				}

					/*
						Restart the sending of queued messages on
						this member link
					*/

				mppp_process_pending_sppp_tx ();
				break;

			case X25_INT_SYNC_CO:
			case X25_COMMIT_CO:
				break;

			default:	/* Other X25 events */
				break;

		}

	}

	MPPP_DBG_LEAVE ();

	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif	/* MPPP_X25 == ON } */


/* EOF */

