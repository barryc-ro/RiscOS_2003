
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - bap.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|    Bandwidth Allocation Protocol                    |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_BAP == ON	/* { */

#include "mppp_ext.h"
#include "bap.h"		/* BAP definitions */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				bap_context_config - configure the BAP context within the
						ML PPP

Usage				void bap_context_config (p_mppp_config_cep);
						struct mppp_cfg_cep FAR *p_mppp_config_cep;

Return value :		void

Common constants and declarations : mppp.h

Common objects : p_mppp_cep pointer.

*--------------------------------------------------------------------------*/

void bap_context_config ()
{
	MPPP_DBG_FUNC ("bap_context_config()")

	MPPP_DBG_ENTER ();

		/* Check the validity of the ML PPP CEP pointer */

	if (p_mppp_cep != P_NIL) {

			/* Set up the pointer used by the access macros */

		p_mppp_c_prot						= &Mppp_cep_bap_info;

			/* Set the PPP Protocol ID value */

		Mppp_c_prot_ppp_pid					= PPP_PROT_BACP;

			/* Finite-State Automaton (FSA) Actions Functions */

		Mppp_c_prot_illegal_event				= bap_nothing_to_do;
		Mppp_c_prot_this_layer_up				= bap_nothing_to_do;
		Mppp_c_prot_this_layer_down				= bap_nothing_to_do;
		Mppp_c_prot_this_layer_started			= bap_nothing_to_do;
		Mppp_c_prot_this_layer_finished			= bap_nothing_to_do;
		Mppp_c_prot_init_restart_counter		= bap_init_restart_counter;
		Mppp_c_prot_zero_restart_counter		= bap_zero_restart_counter;
		Mppp_c_prot_send_configure_request		= bap_nothing_to_do;
		Mppp_c_prot_send_configure_ack			= bap_nothing_to_do;
		Mppp_c_prot_send_configure_nak_rej		= bap_nothing_to_do;
		Mppp_c_prot_send_terminate_request		= bap_nothing_to_do;
		Mppp_c_prot_send_terminate_ack			= bap_nothing_to_do;
		Mppp_c_prot_send_code_reject			= bap_nothing_to_do;
		Mppp_c_prot_send_echo_reply				= bap_nothing_to_do;
		Mppp_c_prot_is_reject_fatal				= bap_nothing_to_do_uchar;
		Mppp_c_prot_check_configure_request		= bap_nothing_to_do_uchar;
		Mppp_c_prot_check_configure_ack_nak_rej = bap_nothing_to_do_uchar;

		Strcpy_far ((char FAR *)&Mppp_c_prot_name[0], "BAP", MPPP_SZ_PROT_NAME);

	}

	MPPP_DBG_LEAVE ();

}

/*-----------------------------------------------------------------------*/

#endif	/* MPPP_BAP } */

/*EOF*/
