
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_cc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		mppp_rcv_cc - implements the layer specific processing of the messages
 *			to be sent to, or received from the CC layer.
 *
 *		mppp_make_cc_call_rq - implements the formatting and the sending of a
 *			CONNECT REQUEST message to the Call Manager.
 *
 *		mppp_clear_cc_call_rq - implements the formatting and the sending of a
 *			CLEAR REQUEST message to the Call Manager.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"

#if MPPP_CC == ON	/* { */

#include "cc_int.h"			/* Call Control interface */
#include "acu_int.h"		/* Call Control ACU interface */



/*-----------------------------------------------------------------------*/

		/*
			Local macros for 'other' called number use.
		*/


#define	Mppp_get_other_called_nb_size(_p)		((acu_size_t)*(_p))
#define	Mppp_get_p_other_called_nb(_p)			((char FAR *)_p + ACU_SIZE_FIELD_LGTH)
#define	Mppp_set_p_next_other_called_nb(_p)		_p = ((uchar FAR *)_p + ACU_SIZE_FIELD_LGTH + (acu_size_t)(*_p))


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 mppp_rcv_cc - implements the CC layer specific processing on
						the received messages.

Usage			 uchar mppp_rcv_cc ();

Related
functions usage

Description		mppp_rcv_cc implements the first processing of a received
					message from CC layer. It sets the current context
					for the following processing, particularily the event
					identifier is set according to the message
					code, and the internal event type is set according
					to the internal SAP Id and the the message code.

Return value	mppp_rcv_cc returns a code :

					= OK  : valid message. The context pointers are set.

					= NOK : Invalid message.

					= STOP: no more processing to do.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: received message and buffer,
				  current contexts,

*--------------------------------------------------------------------------*/

uchar mppp_rcv_cc ()
{
	MPPP_DBG_FUNC ("mppp_rcv_cc()")

	uchar	FAR *p_data;	/* pointer to CC primitives data */
	ent_id_t	ent_to;		/* destination entity */

	MPPP_DBG_ENTER ();

		/* Set the global event type */

	mppp_event_type = MPPP_EV_TYPE_SIGNALLING;

	if (mppp_access_sppp_cc_object (MPPP_ACC_TYPE_SIG, R_msg_from, R_msg_nai, R_msg_sapi, R_msg_conn_id) != OK) {

		if (p_sppp_cep != P_NIL) {

			MPPP_DBG_NOTICE ("access_sppp_cc NOK & p_sppp_cep not NIL");

			if (Sppp_cep_cc_state == MPPP_CC_STATE_NULL) {

				MPPP_DBG_NOTICE ("cc_state NULL");

				if (event_id == ACU_CONN_IN) {

						/*
							Note from the RFC 1618 ("PPP over ISDN")
							If the LCP has not had the administrative OPEN event,
							the incoming call MUST be rejected.
							Receivers MUST NOT accept an incoming call, only to
							close the circuit or ignore packets from the circuit.
						*/

					Sppp_cep_cc_conn_id = R_msg_conn_id;

						/* Set up the pointers to the bundle's context */

					p_mppp_na	= Sppp_cep_p_mppp_na;
					p_mppp_sap	= Sppp_cep_p_mppp_sap;
					p_mppp_cep	= Sppp_cep_p_mppp_cep;

						/*
							If the AUTOMATIC OPEN event has been set for
							this bundle, then the LCP should be in the
							STARTING state.
						*/

					p_mppp_c_prot = Sppp_cep_p_lcp_info;

						/*
							If this is not the first member link, then we force
							the LCP state to "STARTING"
						*/

					if (! (Is_sppp_first_in_bundle ())) {
						Set_c_prot_state_starting;
					}

					if (Mppp_c_prot_state == MPPP_CP_STATE_INITIAL) {

						MPPP_DBG_WARNING ("rejecting ISDN call. No OPEN event");

							/*
								No OPEN event has been signaled to the MPPP
								entity.

								Send ACU_CLEAR_RQ with "CALL REJECTED" cause value
								(See RFC 1618 "PPP over ISDN")
							*/

						p_data	= R_a_data;

						Memset_far ((void FAR *)p_data, 0, Acu_clear_rq_size);

						Acu_clear_rq_cause	= MPPP_CC_CAUSE_CALL_REJECTED;

							/* No variable length paameters */

						if (p_buffer != P_NIL) {
							Buffer_data_size	= Acu_clear_rq_size;
						} else {

							R_msg_data_size		= Acu_clear_rq_size;
						}

							/* Set up the message addressing information */

						ent_to		= R_msg_from;

						p_snd_msg	= p_rcv_msg;
						p_rcv_msg	= P_NIL;

							/* Set the call state */

						Sppp_set_cc_state (MPPP_CC_STATE_DISC_RQ);

							/* Send the message to the originating entity */

						mppp_snd (ent_to, ACU_CLEAR_RQ);

						MPPP_DBG_LEAVE ();

						return (STOP);


					}

				} else {

						/*
							The call is in NULL state, and we've recived a message
							not for an incoming call
							---> Fail
						*/

					p_sppp_na	= P_NIL;
					p_sppp_cep	= P_NIL;

					goto acc_mgt;

				}

			}

		} else {

acc_mgt:
				/* Could be a Signalling Management message */

			if (mppp_access_sppp_cc_object (MPPP_ACC_TYPE_SIG_MGT,R_msg_from,
							R_msg_nai, R_msg_sapi, R_msg_conn_id) != OK) {

				MPPP_DBG_ERROR ("access_sppp_cc_object failed");
				MPPP_DBG_LEAVE ();

				return (STOP);

			}

		}

	}

	MPPP_DBG_NOTICE ("access_sppp_cc OK");

		/* Set up the pointers to the bundle's context */

	p_mppp_na	= Sppp_cep_p_mppp_na;
	p_mppp_sap	= Sppp_cep_p_mppp_sap;
	p_mppp_cep	= Sppp_cep_p_mppp_cep;

		/* Set up the pointer to the Link Control Protocol context */

	p_mppp_c_prot	= Sppp_cep_p_lcp_info;

	if ((event_id == ACU_CONN_IN) && (Mppp_cep_auto_open_flag == ON)) {
		Set_c_prot_state_starting;
	}

		/* Set up the message direction */

	Mppp_cep_msg_direction	= MPPP_FROM_PEER;

		/* Context found */

	if (R_msg_sapi == ACU_SAPI) {

		mppp_local_sapi = MPPP_L_SAPI_ACU;
		MPPP_DBG_NOTICE ("ACU_SAPI");

	} else if (R_msg_sapi == ACU_SAPI_MULTI_CHAN) {

		mppp_local_sapi = MPPP_L_SAPI_ACU_MULTI_CHAN;
		MPPP_DBG_NOTICE ("ACU_SAPI_MULTI_CHAN");

	} else if (R_msg_sapi == ACU_SAPI_MGT) {

		mppp_local_sapi = MPPP_L_SAPI_ACU_MGT;
		MPPP_DBG_NOTICE ("ACU_SAPI_MGT");

	} else {

		MPPP_DBG_ERROR ("unexpected ACU Sapi");
		MPPP_DBG_LEAVE ();

		return (NOK);
	}

	MPPP_DBG_LEAVE ();

	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 mppp_make_cc_call_rq - implements the formatting and sending
					of CONNECT request message

Usage			 uchar mppp_make_cc_call_rq ();

Related
functions usage

Description		mppp_make_cc_call_rq uses a copy of the original message as
					sent by the user entity, and request an additional call
					establishment.

					All the needed pointers to contexts MUST be set prior to
					calling this routine.

Return value	mppp_make_cc_call_rq returns a code :
					= OK  : message sent
					= NOK : error detected.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: saved connect request message and buffer,
				  current contexts,

*--------------------------------------------------------------------------*/

uchar mppp_make_cc_call_rq ()
{
	MPPP_DBG_FUNC ("mppp_make_cc_call_rq()")

	MPPP_DBG_ENTER ();

#	if ASSERT == ON /* { */

		if (p_mppp_cep == P_NIL) {

			MPPP_DBG_ERROR ("no bundle");
			MPPP_DBG_LEAVE ();

			return (NOK);
		}

		if (Mppp_cep_p_msg_conn_rq == P_NIL) {

			MPPP_DBG_ERROR ("no connect_rq message saved");
			MPPP_DBG_LEAVE ();

			return (NOK);

		}

		if (p_sppp_cep == P_NIL) {

			MPPP_DBG_ERROR ("no member link context");
			MPPP_DBG_LEAVE ();

			return (NOK);
		}

#	endif	/* ASSERT } */


		/* Copy the saved message for sending */

	p_snd_msg	= Alloc_msg ();

	if (Mppp_copy_msg_and_buffer (p_snd_msg, Mppp_cep_p_msg_conn_rq) == OK) {

		S_msg_nai			= Sppp_cep_cc_nai;
		S_msg_sapi			= Sppp_cep_cc_sapi;
		S_msg_conn_id		=
		Sppp_cep_cc_conn_id	= Mppp_cep_used_sppp_nb;

			/* Reset the link phase */

		Set_sppp_cep_link_phase (SPPP_LINK_PHASE_DEAD);

			/* Increment the number od used SL PPPs */

		Mppp_cep_used_sppp_nb++;

			/* Set the call state */

		Sppp_set_cc_state (MPPP_CC_STATE_CALL_INIT);

			/* Send the message now */

		mppp_snd (Sppp_cep_cc_entity_id, ACU_CONN_RQ);

			/*
				Set up the pointer to the 'other' called-nb for
				the next call
			*/

		if (Mppp_cep_p_current_other_called_nb != P_NIL) {

			Mppp_set_p_next_other_called_nb (Mppp_cep_p_current_other_called_nb);
		}

	} else {

		MPPP_DBG_ERROR ("copy_msg_and_buffer failed");

		Free_msg (p_snd_msg); p_snd_msg = P_NIL;

		MPPP_DBG_LEAVE ();

		return (NOK);

	}

	MPPP_DBG_LEAVE ();

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_clear_cc_call_rq - implements the formatting and sending
					of DISCONNECT request message

Usage			uchar mppp_clear_cc_call_rq ();

Related
functions usage

Description		All the needed pointers to contexts MUST be set prior to
				calling this routine.

Return value	mppp_clear_cc_call_rq returns a code :
					= OK  : message sent
					= NOK : error detected.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: saved connect request message and buffer,
				  current contexts,

*--------------------------------------------------------------------------*/

uchar mppp_clear_cc_call_rq ()
{
	MPPP_DBG_FUNC ("mppp_clear_cc_call_rq()")

	uchar	result;

	MPPP_DBG_ENTER ();

	result		= NOK;

#	if ASSERT == ON /* { */

		if (p_mppp_cep == P_NIL) {

			MPPP_DBG_ERROR ("no bundle");
			MPPP_DBG_LEAVE ();

			return (NOK);
		}

		if (p_sppp_cep == P_NIL) {

			MPPP_DBG_ERROR ("no member link context");
			MPPP_DBG_LEAVE ();

			return (NOK);
		}

#	endif	/* ASSERT } */


		/* Allocate a message for sending */

	p_snd_msg	= Alloc_msg ();

	if ((result = Mppp_copy_msg_and_buffer (p_snd_msg, p_rcv_msg)) == OK) {

		S_msg_nai			= Sppp_cep_cc_nai;
		S_msg_sapi			= Sppp_cep_cc_sapi;
		S_msg_conn_id		= Sppp_cep_cc_conn_id;

			/* Set the call state */

		Sppp_set_cc_state (MPPP_CC_STATE_DISC_RQ);

			/* Send the message now */

		mppp_snd (Sppp_cep_cc_entity_id, ACU_CLEAR_RQ);

	} else {

		MPPP_DBG_ERROR ("failed to clear the call");

		Free_msg (p_snd_msg); p_snd_msg = P_NIL;

	}


	MPPP_DBG_LEAVE ();

	return (result);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_save_conn_rq_info - implements the saving o the original
					ACU_CONN_RQ message information.

Usage			uchar mppp_save_conn_rq_info (p_msg_in);
					struct message FAR *p_msg_in;	input message

Related
functions usage

Description		This routine copies the original ACU_CONN_RQ information to
				the bundle's context, for later use in member links
				connection establishment.


Return value	mppp_save_conn_rq_info returns a code :
					= OK  : information copied.
					= NOK : error detected.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: pointer to message and buffer,
				  current contexts

*--------------------------------------------------------------------------*/

uchar mppp_save_conn_rq_info (p_msg_conn_rq)
	struct message	FAR *p_msg_conn_rq;
{

	MPPP_DBG_FUNC ("mppp_save_conn_rq_info()")

	uchar		FAR *p_data;

	MPPP_DBG_ENTER ();

		/* Allocate a message */

	Mppp_cep_p_msg_conn_rq	= Alloc_msg ();

	if (Mppp_copy_msg_and_buffer (Mppp_cep_p_msg_conn_rq, p_msg_conn_rq) != OK) {

			/* Free the message */

		Free_msg (Mppp_cep_p_msg_conn_rq);

			/* Reset pointers */

		Mppp_cep_p_msg_conn_rq 				= P_NIL;

		Mppp_cep_p_first_other_called_nb	=
		Mppp_cep_p_current_other_called_nb	= P_NIL;


		MPPP_DBG_ERROR ("copy_msg_and_buffer failed");

		MPPP_DBG_LEAVE ();

		return (NOK);

	}

		/* Set up the pointer used by Acu_conn_rq_xxx macros */

	p_data	= X_a_data (Mppp_cep_p_msg_conn_rq);

		/*
			We initialize the pointers to the first and current 'other'
			called number.

			The 'other called numbers' area is a Length-Value formatted
			zone of null terminated strings.

			The end of the zone is marked by a length value set to 0.

			<Length1><CalledNumber1>0x00<Length2><CalledNumber2>0x00 ...
			up to the last one <Length i><CalledNumber i>0x00 0x00
		*/

	if (Mppp_cep_sppp_nb > 1) {

			/* Set the pointers to 'other' called-nb length field */

		Mppp_cep_p_first_other_called_nb	=
		Mppp_cep_p_current_other_called_nb	= Acu_conn_rq_a_end_strings;

	}

	MPPP_DBG_LEAVE ();

	return (OK);

}


/*-----------------------------------------------------------------------*/

#endif	/* MPPP_CC == ON } */

/* EOF */

