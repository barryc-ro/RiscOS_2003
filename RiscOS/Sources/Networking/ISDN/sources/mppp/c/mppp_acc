
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_acc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		mppp_build_object - implements the building of the ML PPP
 *			layer objects.
 *
 *		mppp_build_sl_ppp_object - implements the building of the SL PPP
 *			objects.
 *
 *		mppp_build_ml_ppp_object - implements the building of the ML PPP
 *			objects.
 *
 *		mppp_access_object - implements the direct access function to
 *		   the ML PPP objects according to access key values
 *
 *		mppp_access_sppp_cc_object - implements the access to signalling context
 *			objects
 *
 *		mppp_access_first_xxx, mppp_access_next_xxx - implements the
 *		   sequential access to the NA, CEP objects.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"


/*--------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_build_sl_ppp_object - implements the building of the
						SL PPP objects.

Usage			mppp_build_sl_ppp_object (struct sppp_config FAR *p_sppp_cfg);
					- p_sppp_cfg : pointer on the data configuration.

Description		mppp_build_sl_ppp_object implements the building of the SL PPP
				objects (sppp_na, sppp_cep) on a tree
				structure allocated inside the variable length (VL)
				partition memory:

						   | (p_sppp_na)
						   v
					sppp_na --> sppp_na --> ... --> sppp_na
						   |
						   v
					sppp --> sppp --> ..... --> sppp

				Each occurrence of object is initialized to NIL values.

Return value	uchar return code = OK	done
								  = NOK failed

Common constants and declarations : mppp.h

Common objects : SL PPP configuration from System management

*--------------------------------------------------------------------------*/

uchar mppp_build_sl_ppp_object (p_sppp_cfg)
	struct sppp_config FAR	*p_sppp_cfg;		/* pointer on the configuration data */
{
	MPPP_DBG_FUNC ("mppp_build_sl_ppp_object()")

	uchar					 i,j, k;				/* index */
	ushort					 na_size;				/* size of the mppp_na object */
	struct sppp_cfg_na	FAR *p_sppp_cfg_na;			/* pointer on the current NA object of
													   the configuration data */
	struct sppp_cfg_cep FAR *p_sppp_cfg_cep;		/* pointer on the current CEP object of
															   the init configuration */

	ushort					 object_size;			/* total size needed by the object tre structure */
	uchar				FAR *p_current;				/* pointer on the current free location
													   inside the object area */
	uchar				FAR *p_mem_blk;				/* pointer on the allocated memory block */
	uchar				FAR *p_top_node = P_NIL;	/* top of the first allocated node */
	struct node			FAR *p_node_na	= P_NIL;	/* pointer on an NA node */
	struct node			FAR *p_node_cep = P_NIL;	/* pointer on a CEP node */

	struct sppp_na	FAR *p_sppp_na_save;			/* saved pointer */

	MPPP_DBG_ENTER ();

#	if OPTIMIZATION == SPEED

			/* Build a	SL PPP NA access table if not done */

		if (p_sppp_na_tab == P_NIL) {

			if ((p_sppp_na_tab = (struct sppp_na FAR *FAR *)Mem_alloc (sizeof (struct sppp_na FAR *) * Na_nb, PID_VL)) == P_NIL) {

				ret_code = MPPP_CFG_ERR_MEMORY;

				MPPP_DBG_LEAVE ();

				return (NOK);
			}

		}

#	endif

		/*+++++++++++ SL PPP OBJECT OCCURENCE BUILDING +++++++++++*/


		/* ----------------------- SL PPP NA LOOP -----------------------------*/

	for (i = 0; i < Sppp_cfg_na_nb; i++) {

		p_sppp_cfg_na = &Sppp_cfg_object_na (i);

			/* Calculate the area size needed to store the objects */

		object_size		= na_size = Rnd_sizeof (struct node) + Rnd_sizeof (struct sppp_na);

		for (k = 0; k < Sppp_cfg_na_cep_nb; k++) {
			object_size		+= Rnd_sizeof (struct node) + Rnd_sizeof (struct sppp_cep);
		}

			/* Memory allocation in variable length partition (VL) */

		if ((p_mem_blk = p_current = Mem_alloc (object_size, PID_VL)) == P_NIL) {

			ret_code = MPPP_CFG_ERR_MEMORY;

			MPPP_DBG_LEAVE ();

			return (NOK);
		}

		if (p_top_node == P_NIL) {
			p_top_node = p_current;
		}

			/*
				Check the NAI validity

				Must be in the range and not used yet.
			*/

		if ((Sppp_cfg_na_nai >= Na_nb) || (mppp_access_sppp_na (Sppp_cfg_na_nai) == OK)) {

			ret_code = MPPP_CFG_ERR_WRONG_SPPP_NAI;

			MPPP_DBG_LEAVE ();

			return (NOK);
		}

			/* Init the node structure */

		if (i != 0) {
			p_node_na -> p_next = (struct node FAR *) p_current;
		}

		p_node_na				= (struct node FAR *) p_current;
		p_node_na -> p_next = P_NIL;
		p_current					+= na_size;

			/* Initialize NA memory block and access key */

		p_sppp_na			= (struct sppp_na FAR *) (p_node_na +1);
		Sppp_na_p_mem_blk	= p_mem_blk;
		Sppp_na_nai			= Sppp_cfg_na_nai;		/* network access ID */
		Sppp_na_type		= Sppp_cfg_na_type;		/* network access type */

		p_node_na -> p_dp	= (struct node FAR *) p_current;

#		if OPTIMIZATION == SPEED
			p_sppp_na_tab [Sppp_na_nai] = p_sppp_na;
#		endif

			/*---------------------------- SL PPP CEP LOOP ------------------------*/

		for (j = 0; j < Sppp_cfg_na_cep_nb; j++) {

			if (j != 0) {
				p_node_cep -> p_next = (struct node FAR *) p_current;
			}

				/*
				   - current node on current location,
				   - set next pointer and prior pointer to nil,
				   - set new current location.
				*/

			p_sppp_cfg_cep			= &Sppp_cfg_object_cep (i, j);

			p_node_cep				= (struct node FAR *) p_current;
			p_node_cep -> p_next	= P_NIL;
			p_current				+= Rnd_sizeof (struct node) + Rnd_sizeof (struct sppp_cep);
			p_node_cep -> p_dp		= (struct node FAR *) p_current;

				/*
					Verify that the SL PPP's reference value is
					UNIQUE.

					WARNING!!!!
					Save the p_sppp_na pointer before checking the
					validity of the SL PPP's reference value.
				*/

			p_sppp_na_save	= p_sppp_na;

			if (mppp_access_sppp_ref (Sppp_cfg_cep_ref) == OK) {

				ret_code = MPPP_CFG_ERR_DUP_SPPP_REF;

				MPPP_DBG_LEAVE ();

				return (NOK);
			}

				/* Restore the p_sppp_na pointer */

			p_sppp_na	= p_sppp_na_save;

				/* Initialize current SL PPP SAP/CEP access keys */

			p_sppp_cep	= (struct sppp_cep FAR *) (p_node_cep + 1);

				/* Store the UNIQUE SL PPP reference value */

			Sppp_cep_ref	= Sppp_cfg_cep_ref;

			Sppp_cep_p_mppp_cep = P_NIL;	/* No ML PPP pointer yet */

		} /* End of SL PPP CEP loop */

	}	/* End SL PPP NA loop */

		/* Is it the first configuration message */

	if (p_sppp_tree == P_NIL) {

			/* Init the SL PPP objects tree pointer */

		p_sppp_tree = (struct node FAR *)p_top_node;

	} else {

			/* Link the new NA thread to the existing one */

		for (p_node_na = p_sppp_tree;
				Next(p_node_na) != P_NIL;
				p_node_na = Next(p_node_na));

		Next(p_node_na) = (struct node FAR *)p_top_node;
	}

	MPPP_DBG_LEAVE ();

	return (OK);

}



/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_build_ml_ppp_object - implements the building of the
						ML PPP objects.

Usage			mppp_build_ml_ppp_object (struct mppp_config FAR *p_mppp_cfg);
					- p_mppp_cfg : pointer on the data configuration.

Description		mppp_build_ml_ppp_object implements the building of the ML PPP
				objects (mppp_na, mppp_sap, mppp_cep) on a tree
				structure allocated inside the variable length (VL)
				partition memory:


						   | (p_mppp_na)
						   v
					mppp_na --> mppp_na --> mppp_na ..... --> mppp_na
						   |
						   v
					   mppp_sap --> mppp_sap --> ..... --> mppp_sap
						   |
						   v
					   mppp_cep --> mppp_cep --> ..... --> mppp_cep
						   |
						   v
						  sppp_ref [MPPP_MX_SPPP]

				Each occurrence of object is initialized to NIL values.

Return value	uchar return code = OK	done
								  = NOK failed

Common constants and declarations : mppp.h

Common objects : SL PPP configuration from System management

*--------------------------------------------------------------------------*/

uchar mppp_build_ml_ppp_object (p_mppp_cfg)
	struct mppp_config FAR	*p_mppp_cfg;		/* pointer on the configuration data */
{
	MPPP_DBG_FUNC ("mppp_build_ml_ppp_object()")

	uchar					 i,j, k;				/* index */
	ushort					 na_size;				/* size of the mppp_na object */
	struct mppp_cfg_na		FAR *p_mppp_cfg_na;		/* pointer on the current NA object of
													   the configuration data */
	struct mppp_cfg_sap		FAR *p_mppp_cfg_sap;	/* pointer on the current SAP object of
													   the configuration data */
	struct mppp_cfg_cep		FAR *p_mppp_cfg_cep;	/* pointer on the current CEP object of
													   the init configuration */

	ushort					 object_size;			/* total size needed by the object tre structure */
	uchar				FAR *p_current;				/* pointer on the current free location
													   inside the object area */
	uchar				FAR *p_mem_blk;				/* pointer on the allocated memory block */
	uchar				FAR *p_top_node = P_NIL;	/* top of the first allocated node */
	struct node			FAR *p_node_na	= P_NIL;	/* pointer on an NA node */
	struct node			FAR *p_node_sap = P_NIL;	/* pointer on a SAP node */
	struct node			FAR *p_node_cep = P_NIL;	/* pointer on a CEP node */

	MPPP_DBG_ENTER ();

#	if OPTIMIZATION == SPEED

			/* Build a	ML PPP NA access table if not done */

		if (p_mppp_na_tab == P_NIL) {

			if ((p_mppp_na_tab = (struct mppp_na FAR *FAR *)Mem_alloc (sizeof (struct mppp_na FAR *) * Na_nb, PID_VL)) == P_NIL) {

				ret_code = MPPP_CFG_ERR_MEMORY;

				MPPP_DBG_LEAVE ();

				return (NOK);
			}

		}

#	endif


		/*+++++++++++ ML PPP OBJECT OCCURENCE BUILDING +++++++++++*/

		/* ----------------------- MPPP NA LOOP -----------------------------*/

	for (i = 0; i < Mppp_cfg_mppp_na_nb; i++) {

		p_mppp_cfg_na = &Mppp_cfg_object_na (i);

			/* Calculate the area size needed to store the objects */

		object_size		= na_size = Rnd_sizeof (struct node) + Rnd_sizeof (struct mppp_na);

		for (j = 0; j < Mppp_cfg_na_mppp_sap_nb; j++) {

			p_mppp_cfg_sap	 = &Mppp_cfg_object_sap (i, j);

			object_size		+= Rnd_sizeof (struct node) + Rnd_sizeof (struct mppp_sap);

			for (k = 0; k < Mppp_cfg_sap_mppp_cep_nb; k++) {
				object_size		+= Rnd_sizeof (struct node) + Rnd_sizeof (struct mppp_cep);
			}

		}

			/* Memory allocation in variable length partition (VL) */

		if ((p_mem_blk = p_current = Mem_alloc (object_size, PID_VL)) == P_NIL) {

			ret_code = MPPP_CFG_ERR_MEMORY;

			MPPP_DBG_LEAVE ();

			return (NOK);
		}

		if (p_top_node == P_NIL) {
			p_top_node = p_current;
		}

			/* Check the NAI validity */

		if ((Mppp_cfg_na_nai >= Na_nb) || (mppp_access_na (Mppp_cfg_na_nai) == OK)) {

			ret_code = MPPP_CFG_ERR_WRONG_NAI;

			MPPP_DBG_LEAVE ();

			return (NOK);
		}

			/* Init the node structure */

		if (i != 0) {
			p_node_na -> p_next = (struct node FAR *) p_current;
		}

		p_node_na				= (struct node FAR *) p_current;
		p_node_na -> p_next		= P_NIL;
		p_current			   += na_size;

			/* Initialize NA memory block and access key */

		p_mppp_na				= (struct mppp_na FAR *) (p_node_na +1);
		Mppp_na_p_mem_blk		= p_mem_blk;
		Mppp_na_nai				= Mppp_cfg_na_nai;			/* network access ID */

		p_node_na -> p_dp		= (struct node FAR *) p_current;

#		if OPTIMIZATION == SPEED
			p_mppp_na_tab [Mppp_na_nai] = p_mppp_na;
#		endif

			/*---------------------------- ML PPP SAP LOOP ------------------------*/

		for (j = 0; j < Mppp_cfg_na_mppp_sap_nb; j++) {

			if (j != 0) {
				p_node_sap -> p_next = (struct node FAR *) p_current;
			}

				/* Set up the pointer to ML PPP SAP object configuration */

			p_mppp_cfg_sap			= &Mppp_cfg_object_sap (i,j);

			p_node_sap				= (struct node FAR *) p_current;
			p_node_sap -> p_next	= P_NIL;
			p_current			   += Rnd_sizeof (struct node) + Rnd_sizeof (struct mppp_sap);
			p_node_sap -> p_dp		= (struct node FAR *) p_current;

				/* Initialize current ML PPP SAP access key */

			p_mppp_sap				= (struct mppp_sap FAR *) (p_node_sap + 1);
			Mppp_sap_sig_sapi		= Mppp_cfg_sap_sig_sapi;
			Mppp_sap_sig_sapi_mgt	= Mppp_cfg_sap_sig_sapi_mgt;
			Mppp_sap_data_sapi		= Mppp_cfg_sap_data_sapi;

				/*---------------------------- ML PPP CEP LOOP ------------------------*/

			for (k = 0; k < Mppp_cfg_sap_mppp_cep_nb; k++) {

				if (k != 0) {
					p_node_cep -> p_next = (struct node FAR *) p_current;
				}

					/*
					   - current node on current location,
					   - set next pointer and prior pointer to nil,
					   - set new current location.
					*/

				p_mppp_cfg_cep			= &Mppp_cfg_object_cep (i, j, k);

				p_node_cep				= (struct node FAR *) p_current;
				p_node_cep -> p_next	= P_NIL;
				p_current			   += Rnd_sizeof (struct node) + Rnd_sizeof (struct mppp_cep);
				p_node_cep -> p_dp		= (struct node FAR *) p_current;

					/* Initialize current ML PPP CEP access key */

				p_mppp_cep				= (struct mppp_cep FAR *) (p_node_cep + 1);
				Mppp_cep_ces			= Mppp_cfg_cep_ces;

			} /* End of ML PPP CEP loop */

		}	/* End of ML PPP SAP loop */

	}	/* End ML PPP NA loop */

		/* Is it the first configuration message */

	if (p_mppp_tree == P_NIL) {

			/* Init the ML PPP objects tree pointer */

		p_mppp_tree = (struct node FAR *)p_top_node;

	}	else {

			/* Link the new NA thread to the existing one */

		for (p_node_na	= p_mppp_tree; Next(p_node_na) != P_NIL; p_node_na = Next(p_node_na));

		Next(p_node_na) = (struct node FAR *)p_top_node;
	}

	MPPP_DBG_LEAVE ();

	return (OK);
}



/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_build_object - implements the building of the MPPP
						entity objects.

Usage			mppp_build_object (struct mppp_config FAR *p_mppp_cfg);
					- p_mppp_cfg : pointer on the data configuration.

Description		mppp_build_object calls either the SL or the ML objects
				building routines.

Return value	uchar return code = OK	done
								  = NOK failed

Common constants and declarations : mppp.h

Common objects : ML/SL PPP configuration from System management

*--------------------------------------------------------------------------*/

uchar mppp_build_object (p_mppp_cfg)
	struct mppp_config FAR	*p_mppp_cfg;					/* pointer on the configuration data */
{
	MPPP_DBG_FUNC ("mppp_build_object()")

	uchar	result;

		/*
			Dispatch the configuration data according to
			the configuration type
		*/

	if (Mppp_cfg_type == MPPP_CFG_TYPE_MEMBER_LINK) {

		MPPP_DBG_NOTICE ("member link config type");

		result = mppp_build_sl_ppp_object ((struct sppp_config FAR *)p_mppp_cfg);

	} else if (Mppp_cfg_type == MPPP_CFG_TYPE_BUNDLE) {

		MPPP_DBG_NOTICE ("bundle config type");

		result = mppp_build_ml_ppp_object ((struct mppp_config FAR *)p_mppp_cfg);

	} else {

			/*
				We should never reach this point, since
				a checking is done before.
			*/


			/* Unknown configuration type */

		ret_code	= MPPP_CFG_ERR_UNKNOWN_TYPE;
		result		= NOK;

		MPPP_DBG_ERROR ("unknown config type");


	}


	MPPP_DBG_LEAVE ();

	return (result);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 mppp_access_object - implements the direct access to the
							ML PPP objects according to the key values.

Usage			 uchar mppp_access_object (uchar type, nai_t nai, sapi_t sapi,
										conn_id_t ces);
						- type	  : access-key type,
						- nai	  : NA ID,
						- sapi	  : SAP ID,
						- ces	  : CES/CHANI.

Description		mppp_access_object implements the pointer access to na, sap
				and mppp_cep according to the na identifier (nai) the sap
				identifier (sapi) and to the mppp_cep address which is	a
				connection endpoint suffix (ces) or a channel identifier.

				The tree structure is used to scan the object's occurence.
				For the access with a chani an access table is used to
				accelerate the scanning :

						   | (p_mppp_na)
						   v
					na --> na --> na ..... --> na
						   |
						   | (p_mppp_cep)
						   v
						  mppp_cep --> mppp_cep -->	 ... --> mppp_cep
									|
									v
									sppp [MLPPP_MX_SPPP]

				The result of this function is the positioning of the current
				object common pointers p_mppp_na, p_mppp_cep, p_sppp.

				It is important to note that this function is the only one
				that modify the current object pointers.

Return value	mppp_access_object returns a code :

				   = OK if all the objects have been found,
				   = NOK if one object cannot be found.

Common constants and declarations : mppp.h

Common objects	objects	 : mppp_na, mppp_sap, mppp_cep
				pointers : p_mppp_na, p_mppp_sap, p_mppp_cep

*--------------------------------------------------------------------------*/

uchar mppp_access_na (nai)
	nai_t				nai;		/* network access ID */
{
	MPPP_DBG_FUNC ("mppp_access_na()")

#	if OPTIMIZATION != SPEED
		struct node		FAR *p_node;
#	endif

	MPPP_DBG_ENTER ();

		/* Check Nai validity */

	if (nai >= Na_nb) {

		MPPP_DBG_LEAVE ();

		return (NOK);
	}

#	if OPTIMIZATION == SPEED

			/* Use NA index table */

		if ((p_mppp_na = p_mppp_na_tab [nai]) == P_NIL) {

			MPPP_DBG_LEAVE ();

			return (NOK);

		} else {

			MPPP_DBG_LEAVE ();

			return (OK);
		}

#	else

			/*
				Init the starting address of the node structure
				and the tree scanning.
			*/

		for (p_node = p_mppp_tree; p_node != P_NIL; p_node = Next_node) {
			p_mppp_na = (struct mppp_na FAR *) (p_node + 1);

			if (Mppp_na_nai == nai) {

				MPPP_DBG_LEAVE ();

				return (OK);
			}

		}

		p_mppp_na = P_NIL;

		MPPP_DBG_LEAVE ();

		return (NOK);							/* end of na thread */

#	endif

}

/*------------------------------------------------------------------------*/

uchar mppp_access_sppp_na (nai)
	nai_t				nai;		/* network access ID */
{
	MPPP_DBG_FUNC ("mppp_access_sppp_na()")

#	if OPTIMIZATION != SPEED
		struct node		FAR *p_node;
#	endif

	MPPP_DBG_ENTER ();

		/* Check Nai validity */

	if (nai >= Na_nb) {

		MPPP_DBG_LEAVE ();

		return (NOK);
	}

#	if OPTIMIZATION == SPEED

			/* Use NA index table */

		if ((p_sppp_na = p_sppp_na_tab [nai]) == P_NIL) {

			MPPP_DBG_LEAVE ();

			return (NOK);

		} else {

			MPPP_DBG_LEAVE ();

			return (OK);
		}

#	else

			/*
				Init the starting address of the node structure
				and the tree scanning.
			*/

		for (p_node = p_sppp_tree; p_node != P_NIL; p_node = Next_node) {

			p_sppp_na = (struct sppp_na FAR *) (p_node + 1);

			if (Sppp_na_nai == nai) {

				MPPP_DBG_LEAVE ();

				return (OK);
			}

		}

		p_sppp_na = P_NIL;

		MPPP_DBG_LEAVE ();

		return (NOK);							/* end of na thread */

#	endif

}

/*------------------------------------------------------------------------*/

uchar mppp_access_object (type, nai, sapi, ces)
	uchar			type;		/* signalling/data access type */
	nai_t			nai;		/* network access ID */
	sapi_t			sapi;		/* service access point ID */
	add_t			ces;		/* CES/CHANI/CONN ID */
{
	MPPP_DBG_FUNC ("mppp_access_object()")

	struct mppp_cep FAR *p_free_mppp_cep;	/* pointer to a free context */
	struct mppp_sap FAR *p_free_mppp_sap;	/* pointer to a free context */
	uchar				condition_val;		/* condition to be tested (TRUE/FALSE) */

	MPPP_DBG_ENTER ();

		/* Initialize free context pointers to P_NIL */

	p_free_mppp_cep = P_NIL;
	p_free_mppp_sap = P_NIL;

		/* Access to mppp_na object : load p_mppp_na */

	if (mppp_access_na (nai) == NOK) {

		MPPP_DBG_LEAVE ();

		return (NOK);
	}

	mppp_access_first_sap ();

#	if MPPP_CC == ON	/* { */

		condition_val	= (((type == MPPP_ACC_TYPE_SIG) && (Mppp_sap_sig_sapi == sapi)) ||
							((type == MPPP_ACC_TYPE_SIG_MGT) && (Mppp_sap_sig_sapi_mgt == sapi)) ||
							((type == MPPP_ACC_TYPE_DATA) && (Mppp_sap_data_sapi == sapi)));

#	else	/* } { */

		condition_val	= ((type == MPPP_ACC_TYPE_DATA) && (Mppp_sap_data_sapi == sapi));

#	endif	/*  MPPP_CC == ON } */

	while (p_mppp_sap != P_NIL) {

		if (condition_val) {

			mppp_access_first_cep ();

			while (p_mppp_cep != P_NIL) {

				if (Mppp_cep_ces == ces) {

					MPPP_DBG_LEAVE ();

					return (OK);

				} else {

					mppp_access_next_cep ();

				}

			}

				/* The SAP was good, but we did not found the CEP object */

			break;

		}

		mppp_access_next_sap ();

	}

		/* Retrieve the free contexts pointers */

	p_mppp_cep	= p_free_mppp_cep;
	p_mppp_sap	= p_free_mppp_sap;

	MPPP_DBG_LEAVE ();

	return (NOK);	/* end of SAP/CEP thread */

}


/*------------------------------------------------------------------------*/

uchar mppp_access_sppp_data_object (entity, nai, sapi, cid)
	ent_id_t		entity;		/* entity ID */
	nai_t			nai;		/* network access ID */
	sapi_t			sapi;		/* service access point ID */
	add_t			cid;		/* CES/CHANI/CONN ID */
{
	MPPP_DBG_FUNC ("mppp_access_sppp_data_object()")

	MPPP_DBG_ENTER ();

		/* Access to sppp_na object : load p_sppp_na */

	mppp_access_first_sppp_na ();

	while (p_sppp_na != P_NIL) {

		mppp_access_first_sppp_cep ();

		while (p_sppp_cep != P_NIL) {

			if ((Sppp_cep_data_entity_id == entity) &&
				(Sppp_cep_data_nai == nai)			&&
				(Sppp_cep_data_sapi == sapi)		&&
				(Sppp_cep_data_conn_id == cid)) {

				MPPP_DBG_LEAVE ();

				return (OK);

			} else {			/* SAPI,CES do not match */

				mppp_access_next_sppp_cep ();

			}

		}

		mppp_access_next_sppp_na ();
	}

	MPPP_DBG_LEAVE ();

	return (NOK);

}


/*------------------------------------------------------------------------*/

uchar mppp_access_sppp_cc_object (acc_type, entity, nai, sapi, cid)
	uchar			acc_type;	/* type of access */
	ent_id_t		entity;		/* entity ID */
	nai_t			nai;		/* network access ID */
	sapi_t			sapi;		/* service access point ID */
	add_t			cid;		/* CES/CHANI/CONN ID */
{
	MPPP_DBG_FUNC ("mppp_access_sppp_cc_object()")

	struct sppp_na	FAR *p_free_sppp_na;	/* pointer to a free NA */
	struct sppp_cep FAR *p_free_sppp_cep;	/* pointer to a free CEP */

	MPPP_DBG_ENTER ();


	if ((acc_type != MPPP_ACC_TYPE_SIG) && (acc_type != MPPP_ACC_TYPE_SIG_MGT)) {

			/* Invalid access type */

		MPPP_DBG_ERROR ("invalid acc_type");

		p_sppp_na	= P_NIL;
		p_sppp_cep	= P_NIL;

		MPPP_DBG_LEAVE ();

		return (NOK);

	}


		/* Initialize the p_free_sppp_xxx pointers */

	p_free_sppp_na	= P_NIL;
	p_free_sppp_cep = P_NIL;

		/* Access to sppp_na object : load p_sppp_na */

	mppp_access_first_sppp_na ();

	while (p_sppp_na != P_NIL) {

		mppp_access_first_sppp_cep ();

		while (p_sppp_cep != P_NIL) {

			if ((Sppp_cep_cc_entity_id == entity)	&&
				(Sppp_cep_cc_nai == nai)) {

				if (acc_type == MPPP_ACC_TYPE_SIG) {

					if (Sppp_cep_cc_sapi == sapi) {

						if (Sppp_cep_cc_conn_id == cid) {

							MPPP_DBG_LEAVE ();

							return (OK);

						} else if (Sppp_cep_cc_state == MPPP_CC_STATE_NULL) {

							if (p_free_sppp_cep == P_NIL) {
								p_free_sppp_na	= p_sppp_na;
								p_free_sppp_cep = p_sppp_cep;
							}

						}

					}

				} else if (acc_type == MPPP_ACC_TYPE_SIG_MGT) {

					if (Sppp_cep_cc_sapi_mgt == sapi) {

						MPPP_DBG_LEAVE ();

						return (OK);

					}

				}

			}

				/* SAPI,CES do not match */

			mppp_access_next_sppp_cep ();


		}

		mppp_access_next_sppp_na ();

	}

	p_sppp_na	= p_free_sppp_na;
	p_sppp_cep	= p_free_sppp_cep;

	MPPP_DBG_LEAVE ();

	return (NOK);

}

/*------------------------------------------------------------------------*/

uchar mppp_access_sppp_ref (ref)
	sppp_ref_t	ref;		/* SL PPP unique reference */
{
	MPPP_DBG_FUNC ("mppp_access_sppp_ref()")

	MPPP_DBG_ENTER ();

		/* Check the validity of the Single PPP Link reference */

	if (ref == SPPP_REF_NIL) {

		p_sppp_na	= P_NIL;
		p_sppp_cep	= P_NIL;

		MPPP_DBG_LEAVE ();
		return (NOK);
	}

	for (mppp_access_first_sppp_na ();
			p_sppp_na != P_NIL;
				mppp_access_next_sppp_na ()) {

		for (mppp_access_first_sppp_cep ();
				p_sppp_cep != P_NIL;
					mppp_access_next_sppp_cep ()) {

			if (Sppp_cep_ref == ref) {

				MPPP_DBG_LEAVE ();

				return (OK);

			}

		}

	}	/* End sppp_na for */

	MPPP_DBG_LEAVE ();

	return (NOK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_access_first_xxx and mppp_access_next_xxx - implements
				the sequential access to the MLP data link objects NA and CEP.

Usage			void mppp_access_first_mlpxxx (void);
				void mppp_access_next_mlpxxx  (void);

Description		mppp_access_first_mlpxxx implements the access to the first object
				of the thread starting from the upper object.
				mppp_access_next_mlpxxx implements the sequential scanning of the
				object thread.

Return value	void

Common constants and declarations : mlp.h

Common objects	objects	 : na, sap, mppp_cep
				pointers : p_mppp_na, p_mppp_cep

*--------------------------------------------------------------------------*/

void mppp_access_first_na ()
{
	MPPP_DBG_FUNC ("mppp_access_first_na()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if ((p_node = p_mppp_tree) != P_NIL) {

		p_mppp_na = (struct mppp_na FAR *) (p_node + 1);

	} else {

		p_mppp_na = P_NIL;
	}

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/

void mppp_access_first_sppp_na ()
{
	MPPP_DBG_FUNC ("mppp_access_first_sppp_na()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if ((p_node = p_sppp_tree) != P_NIL) {
		p_sppp_na = (struct sppp_na FAR *) (p_node + 1);

	} else {

		p_sppp_na = P_NIL;
	}

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mppp_access_next_na ()
{
	MPPP_DBG_FUNC ("mppp_access_next_na()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if (p_mppp_na != P_NIL) {

		p_node = (struct node FAR *)p_mppp_na - 1;

		if ((p_node = Next_node) == P_NIL) {

			p_mppp_na = P_NIL;

		} else {

			p_mppp_na = (struct mppp_na FAR *) (p_node + 1);
		}

	}

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mppp_access_next_sppp_na ()
{
	MPPP_DBG_FUNC ("mppp_access_next_sppp_na()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if (p_sppp_na != P_NIL) {

		p_node = (struct node FAR *)p_sppp_na - 1;

		if ((p_node = Next_node) == P_NIL) {

			p_sppp_na = P_NIL;

		} else {

			p_sppp_na = (struct sppp_na FAR *) (p_node + 1);
		}

	}

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mppp_access_first_sap ()
{
	MPPP_DBG_FUNC ("mppp_access_first_sap()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if (p_mppp_na == P_NIL) {

		p_mppp_sap = P_NIL;

	} else {

		p_node = (struct node FAR *)p_mppp_na - 1;

		if ((p_node = Down_node) == P_NIL) {

			p_mppp_sap = P_NIL;

		} else {

			p_mppp_sap = (struct mppp_sap FAR *) (p_node + 1);

		}

	}

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/

void mppp_access_next_sap ()
{
	MPPP_DBG_FUNC ("mppp_access_next_sap()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if (p_mppp_sap != P_NIL) {

		p_node = (struct node FAR *)p_mppp_sap - 1;

		if ((p_node = Next_node) == P_NIL) {

				p_mppp_sap = P_NIL;

		} else {

			p_mppp_sap = (struct mppp_sap FAR *) (p_node + 1);
		}

	}

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/

void mppp_access_first_cep ()
{
	MPPP_DBG_FUNC ("mppp_access_first_cep()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if (p_mppp_sap == P_NIL) {

		p_mppp_cep = P_NIL;

	} else {

		p_node = (struct node FAR *)p_mppp_sap - 1;

		if ((p_node = Down_node) == P_NIL) {

			p_mppp_cep = P_NIL;

		} else {

			p_mppp_cep = (struct mppp_cep FAR *) (p_node + 1);

		}

	}

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/

void mppp_access_first_sppp_cep ()
{
	MPPP_DBG_FUNC ("mppp_access_first_sppp_cep()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if (p_sppp_na == P_NIL) {

		p_sppp_cep = P_NIL;

	} else {

		p_node = (struct node FAR *)p_sppp_na - 1;

		if ((p_node = Down_node) == P_NIL) {

			p_sppp_cep = P_NIL;

		} else {

			p_sppp_cep = (struct sppp_cep FAR *) (p_node + 1);

		}

	}

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/

void mppp_access_next_cep ()
{
	MPPP_DBG_FUNC ("mppp_access_next_cep()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if (p_mppp_cep != P_NIL) {

		p_node = (struct node FAR *)p_mppp_cep - 1;

		if ((p_node = Next_node) == P_NIL) {

			p_mppp_cep = P_NIL;

		} else {

			p_mppp_cep = (struct mppp_cep FAR *) (p_node + 1);
		}

	}

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/

void mppp_access_next_sppp_cep ()
{
	MPPP_DBG_FUNC ("mppp_access_next_sppp_cep()")

	struct node		FAR *p_node;	/* temporary pointer on a node */

	MPPP_DBG_ENTER ();

	if (p_sppp_cep != P_NIL) {

		p_node = (struct node FAR *)p_sppp_cep - 1;

		if ((p_node = Next_node) == P_NIL) {

			p_sppp_cep = P_NIL;

		} else {

			p_sppp_cep = (struct sppp_cep FAR *) (p_node + 1);

		}

	}

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/

void mppp_access_first_sppp_in_bundle ()
{
	MPPP_DBG_FUNC ("mppp_access_first_sppp_in_bundle()")

	MPPP_DBG_ENTER ();

	if (p_mppp_cep == P_NIL) {

		p_sppp_cep = P_NIL;

	} else {

		if (Sppp_is_list_empty (&Mppp_cep_sppp_list_head)) {

			p_sppp_cep = P_NIL;

		} else {

			p_sppp_cep	= Sppp_get_first_in_list (&Mppp_cep_sppp_list_head);

		}

	}

	MPPP_DBG_LEAVE ();
}


/*-------------------------------------------------------------------------*/

void mppp_access_next_sppp_in_bundle ()
{
	MPPP_DBG_FUNC ("mppp_access_next_sppp_in_bundle()")

	MPPP_DBG_ENTER ();

	if (p_sppp_cep != P_NIL) {

		p_sppp_cep	= Sppp_get_next_in_list (p_sppp_cep);

	}

	MPPP_DBG_LEAVE ();
}

/*-------------------------------------------------------------------------*/

/* EOF */

