
/*-----------------------------------------------------------------------
 *						 M O D U L E   H E A D E R
 *
 * filename - sim_ph.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      build_sdu_ph_to_mppp - implements the building of PH frames
 *
 *		pr_ph_to_user_code - implements the printing of the PH IN/CO primitive
 *       	 			   code.
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_SIM_BUILDER == ON	/* { */
#	include "simul.h"
#	include "ph_int.h"
#	include "sim_ppp.h"

/*--------------------------------------------------------------------------*/

				/* COMMON VARIABLES AND EXTERNAL */
				/*-------------------------------*/


extern	CONST struct code_text t_mppp_ph_prim[];


/*--------------------------------------------------------------------------*/

				/* FUNCTIONS PROTOTYPES */
				/*----------------------*/


#if NEW_FCT_STYLE == ON
	void		pr_ph_to_user_code		(void);
	ushort		build_ph_da_in			(uchar FAR *p_data);
#else
	void		pr_ph_to_user_code		();
	ushort		build_ph_da_in			();
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             build_sdu_ph_to_mppp - implements the building of a
					PH service message for the PH-User entity.

Usage            uchar build_sdu_ph_to_mppp (p_data);

Common constants and declarations : ph_int.h

Common objects   : message current context.

*-------------------------------------------------------------------------*/

uchar build_sdu_ph_to_mppp ()
{
	MPPP_DBG_FUNC ("build_sdu_ph_to_mppp()")

	uchar FAR *	p_data;
	ushort		data_size;

	MPPP_DBG_ENTER ();

	data_size	= 0;

		/* Get message header parameters */

	mg_nai		();
	mg_sapi		();
	mg_chani	();
	mg_code		();

	while (g_code[0] == '?') {
		pr_ph_to_user_code ();
		mg_code ();
	}


		/* Allocate a buffer */

	Buffer_alloc;

	p_data = Buffer_a_start_data;

	if (g_sapi == PH_SAPI_B) {

		switch (g_code[0]) {

			case PH_B_ACT_IN :
				data_size = Ph_b_act_size;
				break;

			case PH_B_DEA_IN :
				break;


			case PH_B_DA_IN :
				data_size = build_ppp_packet (p_data);
				Buffer_data_offset	+= mppp_offset_delta;
				break;

			default:
				break;


		}

	}

	S_msg_from		= (ent_id_t)g_from[0];
	S_msg_to		= (ent_id_t)g_to[0];
	S_msg_code 		= (code_t)g_code[0];
	S_msg_nai 		= (nai_t)g_nai;
	S_msg_sapi 		= (sapi_t)g_sapi;
	S_msg_conn_id 	= (add_t)g_conn_id;

	if (data_size == 0) {

		Free_buffer (p_buffer); p_buffer = P_NIL;

	} else {

		Buffer_data_size = data_size;
		S_msg_init_link_buffer;

	}

	MPPP_DBG_LEAVE ();

	return (OK);

}

/*-------------------------------------------------------------------------*/

void pr_ph_to_user_code ()
{

	MPPP_DBG_FUNC ("pr_ph_to_user_code()")

	struct code_text *p_prim;
	uchar i = 0;

	MPPP_DBG_ENTER ();

	fprintf (f_out, "    PH Layer primitives codes \n");

	p_prim = (struct code_text *)t_mppp_ph_prim;

	for (i = 0; p_prim[i].code != 0; i++);

	while (p_prim[i].code != 0) {
		fprintf (f_out, "\n\t%c : %s",p_prim[i].code,p_prim[i].p_text);
		i++;
	}

	fprintf (f_out, "\n");
	fflush (f_out);

	MPPP_DBG_LEAVE ();


}


/*-------------------------------------------------------------------------*/


#endif	/* MPPP_SIM_BUILDER == ON } */

/* EOF */

