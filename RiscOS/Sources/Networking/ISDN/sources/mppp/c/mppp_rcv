
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_rcv.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		mppp_rcv - implements the dispatching of a message received by
 *		  the ML PPP entity, according to its addressing information
 *		  and its primitive code.
 *
 *		mppp_dispatch_frame - implements the first step dispatching
 *					of a PPP frame
 *
 *		mppp_check_ppp_packet_header - implements the checking of a PPP
 *				packet header information.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"

			/* Additional header files */

#include "mp.h"

/*-----------------------------------------------------------------------*/

	/* Local Functions Prototypes */

#if NEW_FCT_STYLE == ON
	uchar	mppp_check_ppp_packet_header	(uchar FAR * FAR *a_p_data, uchar FAR *a_packet_code, uchar FAR *a_packet_id, ushort FAR *a_packet_lgth, ushort fr_size);
#else
	uchar	mppp_check_ppp_packet_header	();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 mppp_rcv - implements the dispatching and the first
						  processing of a message received by the
						  ML PPP entity.

Usage			 uchar mppp_rcv ();

Related
functions usage uchar mppp_access_object (uchar type, nai_t nai, sapi_t sapi,
								uchar type, conn_id_t add);

Description		mppp_rcv implements the first processing of a received
						message. It sets the current context for the
						following processing, particularily the event
						identifier is set according to the message
						code, and the internal event type is set according
						to the internal SAP Id and the the message code.


Return value	mppp_rcv returns a code :

					= OK  : valid message. The context pointers are set.

					= NOK : Invalid message.

					= STOP: no more processing to do.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: received message and buffer,
				  current contexts,

*--------------------------------------------------------------------------*/

uchar mppp_rcv ()
{
	MPPP_DBG_FUNC ("mppp_rcv()")

	uchar			FAR *p_data;		/* pointer to data area */
	struct message	FAR *p_msg;			/* pointer to a local message */
	ushort				data_size;		/* received fame data size */
	sapi_t				sapi;			/* SAPI storage */
	add_t				ces;			/* CES storage */
	sppp_ref_t			sppp_ref;		/* Single link unique reference */
	uchar				result;			/* result code storage */
	ent_id_t			entity_from;	/* 'FROM' entity */
	mppp_cause_t		cause_code;		/* MPPP cause value */
	mppp_diag_t			diag_code;		/* MPPP diagnostic value */

	MPPP_DBG_ENTER ();

		/* Set the error addressing information */

	mppp_error_nai			= NAI_NIL;
	mppp_error_sapi			= SAPI_NIL;
	mppp_error_ces			= ADD_NIL;
	mppp_error_entity_id	= ENT_NIL;

		/* Initialize local variables */

	cause_code				= MPPP_CAUSE_SUCCESS;
	diag_code				= MPPP_DIAG_NO_INFO;

		/* Set the event ID */

	event_id					= R_msg_code;
	result						= OK;

	entity_from					= R_msg_from;

	mppp_current_ppp_pid		= 0xFFFE;	/* not a valid PPP protocol ID */
	mppp_c_prot_rej_packet_code = MPPP_PPP_PCK_NIL;
	mppp_c_prot_event_id		= EV_NIL;

		/*
			This routine will set the pointers on the right contexts.
		*/

	mppp_event_type		= EV_NIL;
	mppp_local_sapi		= SAPI_NIL;

	switch (entity_from) {

		case ENT_TI:
			mppp_process_ti_msg ();
			MPPP_DBG_LEAVE ();
			return (STOP);


#		if MPPP_CC == ON	/* { */

			case ENT_CCE:
			case ENT_CC:
				result	= mppp_rcv_cc ();
				break;

#		endif	/* } */

#		if MPPP_PH == ON	/* { */

			case ENT_PH:
			case ENT_PH_B:
				result	= mppp_rcv_ph ();
				break;

#		endif /* MPPP_PH == ON } */

#		if MPPP_DL == ON	/* { */

			case ENT_DL_B:
			case ENT_DL_D:
			case ENT_DL_V120:
				result	= mppp_rcv_dl ();
				break;

#		endif /* MPPP_DL == ON } */

#		if MPPP_X25 == ON	/* { */

			case ENT_X25:
				result	= mppp_rcv_x25 ();
				break;

			case ENT_MX25:	/* e.g. attach/detach for ISDN $$$ FIXME */
				break;

#		endif /* MPPP_X25 == ON } */


				/*=======================================

					Messages coming from UPPER entities

				========================================*/

		default:


				/*
					Retrieve message addressing information
					(Signalling or Data)
				*/

			sapi	= R_msg_sapi;
			ces		= R_msg_ces;

				/* Set the error addressing information */

			mppp_error_nai			= R_msg_nai;
			mppp_error_sapi			= R_msg_sapi;
			mppp_error_ces			= R_msg_add;
			mppp_error_entity_id	= R_msg_from;


				/* Access to the contexts according to the SAPI */

			switch (sapi) {

#				if MPPP_CC == ON	/* { */

							/* Signalling messages */

					case MPPP_SAPI_SIG :
						result = mppp_access_object (MPPP_ACC_TYPE_SIG, R_msg_nai, sapi, ces);
						break;

							/* Signalling management messages */

					case MPPP_SAPI_SIG_MGT :
						result = mppp_access_object (MPPP_ACC_TYPE_SIG_MGT, R_msg_nai, sapi, ces);
						break;

#				endif	/* MPPP_CC == ON } */


						/* SYNC/ASYN data transfer messages */

				case MPPP_SAPI_DATA_SYNC :
				case MPPP_SAPI_DATA_ASYN :
					result	= mppp_access_object (MPPP_ACC_TYPE_DATA, R_msg_nai, sapi, ces);
					break;

				case MPPP_SAPI_EXT_EVENTS:

						/* External Commands/Events related messages */

					p_data		= R_a_data;
					sapi		= Mppp_addr_data_sapi;
					ces			= Mppp_addr_data_ces;
					sppp_ref	= Mppp_addr_sppp_ref;

						/*
							Access the bundle and member link context
							When adding a member link, the member link
							reference is not required.
						*/

					if ((event_id != MPPP_EXT_ADD_LINK_RQ) && (sppp_ref != SPPP_REF_NIL)) {

						if (mppp_access_sppp_ref (sppp_ref) == OK) {

							p_mppp_na	= Sppp_cep_p_mppp_na;
							p_mppp_sap	= Sppp_cep_p_mppp_sap;
							p_mppp_cep	= Sppp_cep_p_mppp_cep;

							p_mppp_c_prot	= Sppp_cep_p_lcp_info;


								/* Is the Single Link NA still active ? */

							if ((Mppp_na_active == OFF) || (Sppp_na_active == OFF)) {

								MPPP_DBG_NOTICE ("NA not active");

									/*
										Set the cause and diagnistic values for the error
										indication
									*/

								cause_code	= MPPP_CAUSE_REQUEST_REFUSED;
								diag_code	= MPPP_DIAG_NA_STOPPED;

								goto send_error_in;

							}

						} else {

								/* Indicate this error to the upper entity */

							MPPP_DBG_ERROR ("access_sppp_ref failed");

								/*
									Set the cause and diagnistic values for the error
									indication
								*/

							cause_code	= MPPP_CAUSE_REQUEST_REFUSED;
							diag_code	= MPPP_DIAG_NO_MEMBER_LINK;

							goto send_error_in;

						}

					} else {

						if (mppp_access_object (MPPP_ACC_TYPE_DATA, R_msg_nai, sapi, ces) != OK) {

								/* Indicate this error to the upper entity */

							MPPP_DBG_ERROR ("ext events access_object failed");

								/*
									Set the cause and diagnistic values for the error
									indication
								*/

							cause_code	= MPPP_CAUSE_REQUEST_REFUSED;
							diag_code	= MPPP_DIAG_NO_CONTEXT;

							goto send_error_in;

						}

					}

						/* Is the Bundle's NA still active ? */

					if (Mppp_na_active == OFF) {

						MPPP_DBG_NOTICE ("NA not active");

							/*
								Set the cause and diagnistic values for the error
								indication
							*/

						cause_code	= MPPP_CAUSE_REQUEST_REFUSED;
						diag_code	= MPPP_DIAG_NA_STOPPED;

						goto send_error_in;
					}

					if (cause_code == MPPP_CAUSE_SUCCESS) {

							/* Set up the message direction */

						Mppp_cep_msg_direction	= MPPP_FROM_LOCAL_USER;

						mppp_local_sapi			= MPPP_L_SAPI_EXT_EVENTS;

							/* Process this external event message */

						result = mppp_process_ext_events ();

					} else {

							/*
								Send an error indication to the user entity
							*/

						goto send_error_in;

					}

					MPPP_DBG_LEAVE ();
					return (result);


					/*
						Unknown SAPI in the message --> error
						Signal this error to the user entity
					*/

				default:

					MPPP_DBG_ERROR ("access_object failed, bad sapi");

						/*
							Send an error indication to the user entity
						*/

					cause_code	= MPPP_CAUSE_UNEXPECTED;
					diag_code	= MPPP_DIAG_NO_CONTEXT;

					goto send_error_in;
			}

			if (result == NOK) {

				if (p_mppp_cep != P_NIL) {

						/*
							Should be a request for an outgoing connection
						*/

#					if MPPP_CC == ON	/* { */

						if ((R_msg_sapi == Mppp_sap_sig_sapi) && (R_msg_code == MPPP_ACU_CONN_RQ)) {

								/*
									It's time to allocate THE FIRST SPPP object
									in bundle for this request.

									This MUST be the first call for this bundle.
									The upper entity's call MUST be associated
									to the first member link in the bundle.
								*/

							mppp_access_first_sppp_in_bundle ();

							if (p_sppp_cep != P_NIL) {

								if ((Sppp_cep_cc_state == MPPP_CC_STATE_NULL) &&
										(Sppp_cep_cc_entity_id != ENT_NIL)) {

										/* Set the connection ID to the Call Manager */

									Sppp_cep_cc_conn_id = R_msg_conn_id;

										/* Valid context, update the result code */

									result = OK;

								} else {

										/* Reset the context pointer */

									p_sppp_cep	= P_NIL;
								}

							} else {

								MPPP_DBG_ERROR ("missing 1st SPPP in bundle");
								
								Trap (TRAP_MPPP_NULL_POINTER, "mppp_rcv");

								MPPP_DBG_LEAVE ();

								return (STOP);

							}

						} else 
						
#					endif	/* MPPP_CC == ON } */
						
								/* !!! No code here : "else" */
						
					{


							/*
								Send an error indication to the user entity
							*/

						cause_code	= MPPP_CAUSE_UNEXPECTED;
						diag_code	= MPPP_DIAG_NO_CONNECTION;

						goto send_error_in;

					}

				}

			}

				/* Successful access to contexts */

			if (result == OK) {

					/* Is the NA still active ? */

				if (Mppp_na_active == OFF) {

					MPPP_DBG_NOTICE ("NA not active");
					MPPP_DBG_LEAVE ();

					return (STOP);
				}

					/* Set up the message direction */

				Mppp_cep_msg_direction	= MPPP_FROM_LOCAL_USER;

					/* Set up the pointer to the first Single Link object */

				mppp_access_first_sppp_in_bundle ();

				if (R_msg_sapi == Mppp_sap_sig_sapi) {

#					if MPPP_CC == ON	/* { */

						mppp_event_type = MPPP_EV_TYPE_SIGNALLING;
						mppp_local_sapi = MPPP_L_SAPI_SIG;

						p_mppp_c_prot	= Sppp_cep_p_lcp_info;

#					else	/* } { */

							/* Signal this error to the user entity */

						MPPP_DBG_ERROR ("signalling not available");

							/*
								Send an error indication to the user entity
							*/

						cause_code	= MPPP_CAUSE_REQUEST_REFUSED;
						diag_code	= MPPP_DIAG_NO_SIGNALLING;

						goto send_error_in;

#					endif	/* MPPP_CC == ON } */

				} else if (R_msg_sapi == Mppp_sap_data_sapi) {

					mppp_local_sapi = (R_msg_sapi == MPPP_SAPI_DATA_SYNC) ? MPPP_L_SAPI_DATA_SYNC : MPPP_L_SAPI_DATA_ASYN;

					switch (event_id) {

						case MPPP_DA_RQ:

							if (Mppp_cep_data_state != MPPP_ESTABLISHED) {

									/* We're not ready to process data message */

								MPPP_DBG_NOTICE ("data channel not established");

								cause_code	= MPPP_CAUSE_REQUEST_REFUSED;
								diag_code	= MPPP_DIAG_LINK_NOT_ACTIVE;

								goto send_error_in;
							}

							if (R_msg_sapi == MPPP_SAPI_DATA_ASYN) {

									/*
										Decode the received frame
									*/

								if ((p_msg = mppp_async_to_sync ()) == P_NIL) {

									MPPP_DBG_ERROR ("async-to-sync failed or partial frame");
									MPPP_DBG_LEAVE ();

									return (STOP);

								} else {

									MPPP_DBG_NOTICE ("async-to-sync OK(");

									p_rcv_msg	= p_msg;
									p_msg		= P_NIL;

									p_data		= R_a_data;
									data_size	= R_data_size;

									MPPP_DBG_NOTICE_INT (data_size);
									MPPP_DBG_NOTICE_STR (")");

								}

							} else {

									/* Synchronous PPP frame */

								p_data		= R_a_data;
								data_size	= R_data_size;

							}

								/*
									p_data MUST be pointing to the Address field of
									the frame.
									The following routine will set the EVENT TYPE
									(LCP, BACP, ...)
								*/

								/*
									Remove any additional header information,
									up to the PPP header.
									(3rd parameter = ON --> from User)
								*/

							result = mppp_dispatch_frame (&p_data, &data_size, ON);

							if (result != OK) {

								if (result == NOK) {

									MPPP_DBG_ERROR ("failed to dispatch frame(");
									MPPP_DBG_ERROR_INT (data_size);
									MPPP_DBG_ERROR_STR (")");

								}

								MPPP_DBG_LEAVE ();
								return (STOP);
							}
							break;

								/* Activation / Deactivation requests */

						case MPPP_ACT_RQ:
						case MPPP_DEA_RQ:
							mppp_event_type	= MPPP_EV_TYPE_LCP;
							p_mppp_c_prot	= Sppp_cep_p_lcp_info;

							if (event_id == MPPP_ACT_RQ) {

									/*
										We force the transition to the INITIAL
										state for a clean starting.
									*/

								Set_c_prot_state_initial;
								mppp_c_prot_event_id	= MPPP_CP_EV_OPEN;

							} else {

								mppp_c_prot_event_id	= MPPP_CP_EV_CLOSE;

							}
							break;


#						if MPPP_FC == ON	/* { */

								/* Upper layer flow control primitives */

									/* No more traffic to upper layer */

							case MPPP_BUSY_RQ :

								MPPP_DBG_WARNING ("received MPPP_BUSY_RQ");

								for ( ;p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle()) {
									mppp_busy_to_lower_layer (Sppp_cep_data_entity_id, BUSY);
								}

								Mppp_cep_own_receiver_state = BUSY;

								MPPP_DBG_LEAVE ();
								return (STOP);


									/* Restart traffic if no system busy condition */

							case MPPP_CLEAR_BUSY_RQ :

								MPPP_DBG_WARNING ("received MPPP_CLEAR_BUSY_RQ");

								if (Mppp_na_system_state == FREE) {

									if (Mppp_cep_own_receiver_state == BUSY) {

										for ( ;p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle()) {
											mppp_busy_to_lower_layer (Sppp_cep_data_entity_id, FREE);
										}

										Mppp_cep_own_receiver_state	= FREE;
									}

								}

								MPPP_DBG_LEAVE ();
								return (STOP);

#						endif	/* MPPP_FC == ON } */


							/* Interface synchronization */

						case MPPP_INT_SYNC_RQ :
							mppp_retransmit (MPPP_INT_SYNC_CO, entity_from);

							MPPP_DBG_LEAVE ();
							return (STOP);


						default:


								/*
									Other MPPP events.
								*/


							return (STOP);
					}

				}

			} else {


					/* Signal this error to the user entity */

				MPPP_DBG_ERROR ("access_object failed");

					/*
						Send an error indication to the user entity
					*/

				cause_code	= MPPP_CAUSE_UNEXPECTED;
				diag_code	= MPPP_DIAG_NO_CONNECTION;

				goto send_error_in;

			}
			break;	/* end of default */

	}

send_error_in:

	if (cause_code != MPPP_CAUSE_SUCCESS) {

			/*
				Format and send the error indication to the upper
				entity.
			*/

		mppp_snd_error_in (cause_code, diag_code, mppp_error_sapi);
		result	= STOP;

	}

	MPPP_DBG_LEAVE ();

	return (result);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_dispatch_frame - implements the first step dispatching
					of a PPP frame

Usage			uchar mppp_dispatch_frame (pp_data, p_size, from_user)
				uchar FAR * FAR *pp_data;address of the pointer to frame data
				ushort		FAR *p_size; address of the frame size storage
				uchar			from_user;		from user entity

Related
functions usage

Description		mppp_dispatch_frame checks an input frame and finds out the
				protocol information.

				Any additional header should have been removed, before calling
				this routine. In other words, we expect a Multi/Single link
				PPP frame starting with the PPP Address and Control fields.

Return value	mppp_dispatch_frame returns a code :
					= OK  : valid frame
					= NOK : Invalid frame.
					= STOP: no more processing to do.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: received message and buffer,
				  current contexts,

*--------------------------------------------------------------------------*/

uchar mppp_dispatch_frame (pp_data, p_size, from_user)
	uchar	FAR *	FAR *pp_data;	/* address of the pointer to PPP frame data */
	ushort			FAR *p_size;	/* pointer to the PPP frame data size */
	uchar				from_user;	/* message from user entities ? (ON/OFF) */
{

	MPPP_DBG_FUNC ("mppp_dispatch_frame()")

	uchar	FAR *p_data;			/* pointer for packet parsing */
	ushort		data_size;			/* data size to pass to MP */
	ushort		ppp_pid;			/* storage for the PPP protocol ID */
	ushort		packet_lgth;		/* received packet "length" field value */
	uchar		packet_code;		/* received packet code */
	uchar		packet_id;			/* received packet ID */
	uchar		use_mp_with_lcp;	/* indicator for using MP header with LCP packets */

	MPPP_DBG_ENTER ();


		/* No ACFC, no PFC */

	Mppp_cep_frag_pfc	=
	Mppp_cep_frag_acfc	= OFF;


		/*
			p_data must be pointing to the PPP address field.
		*/

	if (*p_size < PPP_FRAME_HEADER_LGTH) {

			/*
				Although it is explicitely forbidden in RFC 1990 (MP)
				to include the Address and Control fields (usually, the
				two bytes FF 03) in the material to be fragmented, it is
				a good defensive programming practice to accept the packet
				anyway, ignoring the two bytes if present, as that is what
				RFC 1661 (PPP)	specifies.
			*/

		if (Mppp_cep_mp_enabled == OFF) {

				/*
					Frame too short, we don't know how to
					handle it.
					--> Discard it.
				*/

			MPPP_DBG_NOTICE ("Received short PPP frame");
			MPPP_DBG_LEAVE ();

			return (NOK);

		}

	} else {

		if ((*(*pp_data) == PPP_UI_ADD_VAL) && (*((*pp_data)+1) == PPP_UI_CTRL_VAL)) {

			(*pp_data)	+= 2;	/* done with address and control fields */
			(*p_size)	-= 2;

		} else {

				/* ACFC has been applied to this frame */

			Mppp_cep_frag_acfc	= ON;

		}

	}

		/* We MUST ignore all the leading zeros of the protocol ID */

	while ((*(*pp_data) == 0) && (*((*pp_data)+1) == 0)) {
		(*p_size)--;
		(*pp_data)++;
	}


		/*
			Set up p_data and data_size for MP
			Get the PPP protocol ID and advance the data pointer
		*/

	p_data		= (*pp_data);
	data_size	= (*p_size);

	if (Mppp_is_prot (*p_data)) {

			/* Compressed Protocol ID on one octet */

		ppp_pid		= (ushort)(*(*pp_data));

		(*pp_data)++;
		(*p_size)--;

			/* PFC has been applied to this frame */

		Mppp_cep_frag_pfc	= ON;

	} else {

			/* Protocol ID on 2 octets */

		Mppp_get_short (ppp_pid, (*pp_data));
		(*p_size)	-= 2;

	}

		/* Load the global PPP PID value */

	mppp_current_ppp_pid	= ppp_pid;

		/*
			All the control protocols packets from the user entity
			are sent on the first single member link in the bundle.

			CHAP Response Packets are sent on the link over which we
			receive the CHAP Challenge.
		*/

	if ((from_user == ON) && (Mppp_is_c_prot (ppp_pid)) &&
			(! Is_sppp_first_in_bundle ())) {

		mppp_access_first_sppp_in_bundle ();

	}

	if (p_sppp_cep == P_NIL) {

		MPPP_DBG_ERROR ("no member link for the packet");
		MPPP_DBG_LEAVE ();
		return (NOK);

	} else {

			/*
				All non-LCP packets received before LCP has reached
				the OPENED state, or after Authentication failure and
				before Terminate-Request, are silently discarded.
			*/

		p_mppp_c_prot	= Sppp_cep_p_lcp_info;

		if ((ppp_pid != PPP_PROT_LCP) &&
			((Mppp_c_prot_state != MPPP_CP_STATE_OPENED) ||
				(Sppp_cep_link_phase == SPPP_LINK_PHASE_TERMINATION))) {

			MPPP_DBG_WARNING ("received non-LCP packet and LCP not OPENED");

				/*
					May be a collision with a Terminate-Request Packet
					we've sent while in LCP-OPENED state
				*/

			if ((Mppp_c_prot_state != MPPP_CP_STATE_CLOSING) &&
				(Mppp_c_prot_state != MPPP_CP_STATE_STOPPING)) {

				MPPP_DBG_LEAVE ();

				return (STOP);

			}

		}

	}

		/*
			Find the protocol we are dealing with, and set the
			correct variables to be used in the state machine.
		*/

	p_mppp_c_prot	= P_NIL;

	switch (ppp_pid) {

		case PPP_PROT_LCP:	/* Link Control Protocol */
			p_mppp_c_prot	= Sppp_cep_p_lcp_info;
			mppp_event_type = MPPP_EV_TYPE_LCP;
			break;

		case PPP_PROT_MP:	/* Multilink Protocol */
			mppp_event_type = MPPP_EV_TYPE_MP;
			break;

		case PPP_PROT_CHAP:	/* Challenge Handshake Authentication Protocol */
			mppp_event_type = MPPP_EV_TYPE_CHAP;
			break;

		case PPP_PROT_PAP:	/* Password Authentication Protocol */
			mppp_event_type = MPPP_EV_TYPE_PAP;
			break;

#		if MPPP_BAP == ON	/* { */

			case PPP_PROT_BAP:	/* Bandwidth Allocation Protocol */
				p_mppp_c_prot	= Mppp_cep_p_bap_info;
				mppp_event_type = MPPP_EV_TYPE_BAP;
				break;

			case PPP_PROT_BACP:	/* Bandwidth Allocation Control Protocol */
				p_mppp_c_prot	= Mppp_cep_p_bacp_info;
				mppp_event_type = MPPP_EV_TYPE_BACP;
				break;

#		endif	/* } */

		default:	/* Other events */
			mppp_event_type = MPPP_EV_TYPE_OTHER;
			break;

	}

		/*
			Set the data pointer and size within the context.
			The frame is then parsed from the packet code field.

		*/

	if (mppp_event_type == MPPP_EV_TYPE_OTHER) {

			/*
				We don't know how to process this protocol datagram.
				We retransmit it as is, to the upper/lower layer entity.
			*/

		MPPP_DBG_WARNING ("unknown protocol ID in packet(");
		MPPP_DBG_WARNING_HEX (ppp_pid);
		MPPP_DBG_WARNING_STR (")");


		if (from_user == ON) {

				/* We avoid using MP header with unkown Control Protocols */

			if ((Mppp_cep_mp_enabled == ON) &&
				(! Mppp_is_c_prot (mppp_current_ppp_pid))) {

					/*
						"from user" flag is ON.

						WARNING!!!
						The routines called by MP process functions
						use p_rcv_msg pointer.
					*/

				p_data		= R_a_data;
				data_size	= R_data_size;


				MPPP_DBG_NOTICE ("to mp_process, data size= ");
				MPPP_DBG_NOTICE_INT (data_size);

					/*
						3rd parameter ON --> from User
					*/

				mp_process (p_data, data_size, from_user);

			} else {

				p_snd_msg	= p_rcv_msg;
				p_rcv_msg	= P_NIL;

				S_msg_nai	= Sppp_cep_data_nai;
				S_msg_sapi	= Sppp_cep_data_sapi;
				S_msg_add	= Sppp_cep_data_conn_id;

					/* Queue this message */

				mppp_in_sppp_tx_queue ();

				mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

			}

		} else	{

			p_snd_msg	= p_rcv_msg;
			p_rcv_msg	= P_NIL;

				/* Forward the message to the upper entity */

			mppp_snd_data_msg_to_local (Mppp_sap_data_upper_entity_id, Mppp_cep_accm_to_local);
		}

		MPPP_DBG_LEAVE ();
		return (STOP);

	} else {

			/* Recognized protocol ID */

		if (mppp_event_type == MPPP_EV_TYPE_MP) {

			MPPP_DBG_NOTICE ("received MP fragment");

			mp_process (p_data, data_size, from_user);

			MPPP_DBG_LEAVE ();
			return (STOP);

		} else {

			if ((p_mppp_c_prot != P_NIL) || (ppp_pid == PPP_PROT_PAP) || (ppp_pid == PPP_PROT_CHAP)) {

				if (p_mppp_c_prot != P_NIL) {

						/* PPP Control Protocol packet */

					Mppp_c_prot_p_data		= *pp_data;
					Mppp_c_prot_data_size	= *p_size;

				}

				p_data	= *pp_data;

					/*
						Check the syntax of the PPP header information
						and retrieve useful information:
						Packet Code,
						Packet Id,
						Packet Length.
					*/

				if (mppp_check_ppp_packet_header (&p_data, &packet_code, &packet_id, &packet_lgth, (*p_size)) != OK) {

					if (p_mppp_c_prot != P_NIL) {
						Mppp_c_prot_data_size	= 0;
						Mppp_c_prot_p_data		= P_NIL;
					}

						/*
							Incorrect PPP packet header
							---> PPP frame discarded
						*/

					MPPP_DBG_LEAVE ();
					return (NOK);

				}

					/*
						For CHAP Response Packets from the local PPP,
						we access the right member link context.
					*/

				if ((from_user == ON)			&&
					(ppp_pid == PPP_PROT_CHAP)	&&
					(packet_code == MPPP_CP_PCK_CHAP_RESPONSE)) {

					if (mppp_access_sppp_ref (Mppp_cep_chap_link_ref) == OK) {

						p_mppp_na	= Sppp_cep_p_mppp_na;
						p_mppp_sap	= Sppp_cep_p_mppp_sap;
						p_mppp_cep	= Sppp_cep_p_mppp_cep;

						MPPP_DBG_NOTICE ("link ctx OK for CHAP-Response");

					} else {

						MPPP_DBG_ERROR ("link ctx not found for CHAP-Response");

						Trap (TRAP_MPPP_NO_CONTEXT, "mppp_dispatch_frame");

					}

				}

					/*
						At this stage, the packet header is valid.
						We subtract the header length for the following
						processing
					*/

				packet_lgth	-= PPP_PACKET_HEADER_LGTH;

				if (p_mppp_c_prot != P_NIL) {

					Mppp_c_prot_r_packet_code	= packet_code;
					Mppp_c_prot_r_packet_id		= packet_id;
					Mppp_c_prot_p_data			= p_data;
					Mppp_c_prot_data_size		= packet_lgth;

						/*
							Set the Control Protocol global event ID
							MUST be called after the PPP packet Code is set.
						*/

					Mppp_set_c_prot_event (Mppp_c_prot_r_packet_code);

				}

					/*
						We MAY overwrite the previous mppp_c_prot_event_id
						value, since CHAP MAY have p_mppp_c_prot != P_NIL.
					*/

				if ((ppp_pid == PPP_PROT_PAP) || (ppp_pid == PPP_PROT_CHAP)) {

						/*
							Set the Authentication Protocol global event ID
							MUST be called after the PPP packet Code is set.
						*/

					Sppp_set_auth_event (ppp_pid, packet_code);

						/* Set up the authenticator context */

					Sppp_set_auth_context (mppp_c_prot_event_id, from_user);

					if (p_sppp_auth == P_NIL) {

							/* Failed to set the authenticator context */

						MPPP_DBG_ERROR ("failed to set AUTH context");
						MPPP_DBG_LEAVE ();

						return (NOK);

					}

						/*
							Save packet header information before
							trying to stop timer.
						*/

					Sppp_auth_r_packet_code		= packet_code;
					Sppp_auth_r_packet_id		= packet_id;
					Sppp_auth_p_data			= p_data;
					Sppp_auth_data_size			= packet_lgth;

				}


					/*

						Do not use MP header to convey Control Protocol frames
						that have control functions associated with changing
						the defaults for the bundle itself !!!

						LCP Code-Reject, Protocol-Reject, Echo-Request,
						Echo-Reply and Discard-Request packets MAY be transmitted
						using the MP header.

					*/

				use_mp_with_lcp = ((mppp_current_ppp_pid == PPP_PROT_LCP) &&
								   ((packet_code == MPPP_CP_PCK_CODE_REJ)     ||
									(packet_code == MPPP_CP_PCK_PROTOCOL_REJ) ||
									(packet_code == MPPP_CP_PCK_ECHO_RQ)      ||
									(packet_code == MPPP_CP_PCK_ECHO_REPLY)   ||
									(packet_code == MPPP_CP_PCK_DISCARD_RQ)
								   )
								  );

					/*
						For MP packets received from the peer, the processing
						is done above
					*/

				if ((Mppp_cep_mp_enabled == ON) &&
					(from_user == ON) &&
					(use_mp_with_lcp)) {

						/*
							WARNING!!!
							The routines called by MP process functions
							use p_rcv_msg pointer.
						*/

					p_data		= R_a_data;
					data_size	= R_data_size;

					MPPP_DBG_NOTICE ("LCP packet to mp_process - code=");
					MPPP_DBG_NOTICE_INT (packet_code);
					MPPP_DBG_NOTICE (",data size=");
					MPPP_DBG_NOTICE_INT (data_size);

						/*
							3rd parameter --> from User (ON/OFF)
						*/

					mp_process (p_data, data_size, from_user);

					MPPP_DBG_LEAVE ();
					return (STOP);

				}


					/*
						Now, we can continue the processing with the
						state machine.
					*/

			}

		}

	}

	MPPP_DBG_LEAVE ();

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_check_ppp_packet_header - implements the checking of a
					PPP packet header information

Usage			uchar mppp_check_ppp_packet_header (a_p_data, a_packet_code,
								a_packet_id, a_packet_lgth, fr_size)
				uchar	FAR*FAR	*a_p_data;	address of the pointer to the frame data 
				uchar	FAR		*a_packet_code;  pointer to the packet code location 
				uchar	FAR		*a_packet_id;	 pointer to the packet Id location 
				ushort	FAR		*a_packet_lgth;	 pointer to the packet length location 
				ushort			fr_size;	frame size

Related
functions usage

Description		mppp_check_ppp_packet_header checks an input PPP frame without
				frame header information (Address+Control+Protocol Id) and finds
				out the useful packet information (Packet code, Packet Id,
				Packet length).

Return value	mppp_check_ppp_packet_header returns a code :
					= OK  : valid frame header
					= NOK : Invalid frame header.

Common constants and declarations : mppp.h, mppp_ext.h

Common objects	: received message and buffer,
				  current contexts,

*--------------------------------------------------------------------------*/

uchar mppp_check_ppp_packet_header (a_p_data, a_packet_code, a_packet_id, a_packet_lgth, fr_size)
	uchar	FAR	*	FAR	*a_p_data;	/* address of the pointer to the frame data */
	uchar	FAR			*a_packet_code; /* pointer to the packet code location */
	uchar	FAR			*a_packet_id;	/* pointer to the packet Id location */
	ushort	FAR			*a_packet_lgth;	/* pointer to the packet length location */
	ushort				fr_size;	/* frame size */
{
	MPPP_DBG_FUNC ("mppp_check_ppp_packet_header()")

	MPPP_DBG_ENTER ();

		/*
			We parse the packet header information
		*/

	if (fr_size < PPP_PACKET_HEADER_LGTH) {

			/*
				This frame is too short, and cannot contain
				packet code + packet id + packet length information
				---> discard it
			*/

		MPPP_DBG_ERROR ("PPP packet too short");
		MPPP_DBG_LEAVE ();

		return (NOK);

	}

		/*
			Retrieve the PPP packet code (1 octet),
			and PPP packer Id (1 octet)
		*/

	Mppp_get_char ((*a_packet_code), (*a_p_data));
	Mppp_get_char ((*a_packet_id), (*a_p_data));

		/* Get the packet length (2 octets) */

	Mppp_get_short ((*a_packet_lgth), (*a_p_data));

	if ((*a_packet_lgth) < PPP_PACKET_HEADER_LGTH) {

			/* This value is wrong --> discard the packet */

		MPPP_DBG_ERROR ("wrong PPP packet length");
		MPPP_DBG_LEAVE ();

		return (NOK);
	}

		/* Check the packet length consistency */

	if ((*a_packet_lgth) > fr_size) {

			/*
				The PPP packet is longer than
				the received frame !!!
			*/

		MPPP_DBG_ERROR ("PPP packet longer than the frame");
		MPPP_DBG_LEAVE ();

		return (NOK);
	
	}

	MPPP_DBG_LEAVE ();
	return (OK);

}

/*-----------------------------------------------------------------------*/

/* EOF */	/* MPPP_RCV.C */

