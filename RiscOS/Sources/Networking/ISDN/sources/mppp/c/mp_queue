
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mp_queue.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		 the following functqions or macro manage the message queues
 *		 (pointing on an UI or I frame) of a data link	connection.
 *		 The manipulated queue is located in the dlcep current context.
 *
 *		 . mp_in_tx_queue - implements the queuing of a message to the end of the
 *		   Tx queue.
 *
 *		 . mp_out_tx_queue - implements the extraction of the first message from
 *		   the Tx queue.
 *
 *		 . mp_discard_tx_queue	- implements the clearing of the Tx queue.
 *
 *		 . mp_get_next_i_tx_queue_entry - implements the positioning of p_rcv_msg on
 *		   the next message to send.
 *
 *		 . mp_ack_tx_queue - implements the positionning of the sent pointer
 *		   on the last sent message.
 *
 *-------------------------------------------------------------------------*/

 /*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"					/* MPPP header module */

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"
#include "it.h"
#include "mp.h"			/* MP definitions */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_in_tx_queue, mp_out_tx_queue, mp_discard_tx_queue,
				mp_get_next_i_tx_queue_entry,	mp_set_tx_last_sent,
				mp_ack_tx_queue,
				are functions or macro that manage the queues of a
				MP link connection context.

Usage			void mp_in_tx_queue						();
				uchar return_code  mp_out_tx_queue	();
				void mp_discard_tx_queue				();
				void mp_get_next_i_tx_queue_entry		();
				macro mp_set_last_sent					();

Description		The Tx queue is organized by bundle connection as
				follow :

				P_FIRST <---> message <----> message <---> .... <---> message.
																	 |
				P_LAST------------------------------------------------

				for the I queue P_SENT points to the last sent message.

				The functions or macros are the only functions or macros
				that manipulate the queues.

				Manipulations are :

					- adding an element at the end of the queue (in_queue).

					- accepting a message from the top of the queue
					  (out_queue).

					- clearing the queue (discard_queue).

					- pick-up the next message to send
					  (get_next_i_queue_entry).

					- set the P_SENT pointer to the last sent
					  (set_last_sent).

					- extract and release acknowledged message from
					  the queue(set_acknowledged).

					- set the last sent and not acknowledged message
					  to the to send state (reset_acknowledged).

					- get the last transmitted I frame
					  (get_last_transmitted_i_frame).

*--------------------------------------------------------------------------*/

		/* p_rcv_msg points the message to queue */

void mp_in_tx_queue ()
{
	MPPP_DBG_FUNC ("mp_in_tx_queue()")

	struct	message		FAR *p_msg;		/* temporary pointer to received message */

	MPPP_DBG_ENTER ();

		/* If link count EQ 0 force to 1 */

	if (((p_buffer = R_msg_p_buffer) != P_NIL) && (Buffer_link_count == 0)) {
		Buffer_link_count = 1;
	}

		/*
			If the message has a lib flag set to OFF
			it can not be reused and the linked buffer
			is going to point on one more message.
		*/

	if (R_msg_lib == OFF) {

			/* Save the received message pointer */

		p_msg = p_rcv_msg;

			/* Allocate a new message and initialize it */

		p_rcv_msg	= Alloc_msg ();

			/* Copy usefull data from *p_msg to *p_rcv_msg */

		Memcpy_far ((char FAR *)p_rcv_msg,
					(char FAR *)p_msg,
					 L_msg_data_offset + L_msg_data_size);

			/* Increment the message counter in the buffer */

		if (p_buffer != P_NIL) {
			It_disable ();
				Buffer_link_count++;
			It_enable ();
		}

	}

		/* Put the p_rcv_msg in MP Tx queue */

	if (Mppp_cep_tx_last == P_NIL) {

		Next  (p_rcv_msg)	= Prior (p_rcv_msg) = P_NIL;
		Mppp_cep_tx_first	= Mppp_cep_tx_last	= p_rcv_msg;

	} else {

		Next  (p_rcv_msg)			= P_NIL;
		Prior (p_rcv_msg)			= Mppp_cep_tx_last;
		Next  (Mppp_cep_tx_last)	= p_rcv_msg;
		Mppp_cep_tx_last			= p_rcv_msg;
	}

#	if MPPP_FC == ON	/* { */

			/*
				Update the Flow control current mark
				and compare to the high mark.
			*/

		if ((Mppp_sap_data_out_fc_high_mark != 0)					&&
			(++Mppp_cep_out_fc_mark == Mppp_sap_data_out_fc_high_mark)	&&
			(Mppp_cep_out_fc_state != BUSY)) {

				/* Set FC mark state to BUSY */

			Mppp_cep_out_fc_state	= BUSY;

				/* Send a MPPP_BUSY_IN to the upper layer */

			p_msg			= p_snd_msg;	/* Save current send pointer */
			p_snd_msg		= P_NIL;		/* send pointer to NIL */

			p_snd_msg		= Alloc_msg ();

			S_msg_nai		= Mppp_na_nai;
			S_msg_sapi		= Mppp_sap_data_sapi;
			S_msg_ces		= Mppp_cep_ces;

				/* Send MPPP_BUSY_IN to upper layer */

			mppp_snd_msg_to_user (Mppp_sap_data_upper_entity_id, Mppp_sap_data_sapi, MPPP_BUSY_IN);

			p_snd_msg		= p_msg;		/* restore send pointer */
		}

#	endif	/* MPPP_FC == ON } */

	p_rcv_msg = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*-------------------------------------------------------------------------*/

uchar mp_out_tx_queue ()
{
	MPPP_DBG_FUNC ("mp_out_tx_queue()")

#	if MPPP_FC == ON
		struct	message		FAR *p_msg; /* temporary pointer to received message */
#	endif

	MPPP_DBG_ENTER ();

		/* Release the current received message before using p_rcv_msg */

	Free_msg (p_rcv_msg);

		/* First message of the queue */

	if ((p_rcv_msg = Mppp_cep_tx_first) == P_NIL) {

		MPPP_DBG_LEAVE ();
		return (NOK);
	}

		/* Extract and rebuild the queue */

	if (Next (Mppp_cep_tx_first) == P_NIL) {

		Mppp_cep_tx_first = Mppp_cep_tx_last = P_NIL;

	} else {

		Prior (Next (Mppp_cep_tx_first))	= P_NIL;
		Mppp_cep_tx_first					= Next (p_rcv_msg);
	}

#	if MPPP_FC == ON	/* { */

			/*
				Update the Flow control current mark
				and compare to the high mark.
			*/

		if ((Mppp_sap_data_out_fc_high_mark != 0)						&&
			(--Mppp_cep_out_fc_mark == Mppp_sap_data_out_fc_low_mark)	&&
			(Mppp_cep_out_fc_state == BUSY)) {

				/* Reset FC mark state */

			Mppp_cep_out_fc_state	= FREE;

				/* Send a MPPP_CLEAR_BUSY_IN to the upper layer */

			p_msg			= p_snd_msg;	/* Save current send pointer */
			p_snd_msg		= P_NIL;		/* send pointer to NIL */

			p_snd_msg		= Alloc_msg ();
			S_msg_nai		= Mppp_na_nai;
			S_msg_sapi		= Mppp_sap_data_sapi;
			S_msg_ces		= Mppp_cep_ces;

				/* Send MPPP_CLEAR_BUSY_IN to upper layer */

			mppp_snd_msg_to_user (Mppp_sap_data_upper_entity_id, Mppp_sap_data_sapi,MPPP_CLEAR_BUSY_IN);

			p_snd_msg		= p_msg;		/* restore send pointer */
		}


#	endif	/* if MPPP_FC == ON } */

	if (p_rcv_msg != P_NIL) {

			/* Reset the pointer to the next message */

		Next (p_rcv_msg)	= P_NIL;

	}

	MPPP_DBG_LEAVE ();

	return (OK);

}


/*-------------------------------------------------------------------------*/

void mp_discard_tx_queue ()
{
	MPPP_DBG_FUNC ("mp_discard_tx_queue()")

	struct message	FAR *p_msg, FAR *p_old;		/* temporary message pointers */

	MPPP_DBG_ENTER ();

	for (p_msg = Mppp_cep_tx_first; p_msg != P_NIL; ) {

		p_old		= p_msg;
		p_msg		= Next (p_old);

			/* Message waiting to be processed by the MP */

		Free_msg (p_old);
	}

	Mppp_cep_tx_first = Mppp_cep_tx_last = Mppp_cep_tx_sent = P_NIL;

#	if MPPP_FC == ON	/* { */

			/* Clear the out mark */

		Mppp_cep_out_fc_mark		= 0;

			/* Reset the Flow control current mark. */

		if ((Mppp_sap_data_out_fc_high_mark != 0)		&&
			(Mppp_cep_out_fc_state == BUSY)) {

				/* Reset the current mark */

			Mppp_cep_out_fc_state	= FREE;

				/* Send a MPPP_CLEAR_BUSY_IN to the upper layer */

			p_msg			= p_snd_msg;		/* Save current send pointer */
			p_snd_msg		= P_NIL;			/* send pointer to NIL */

			p_snd_msg		= Alloc_msg ();

			S_msg_nai		= Mppp_na_nai;
			S_msg_ces		= Mppp_cep_ces;

				/* Send MPPP_CLEAR_BUSY_IN to upper layer */

			mppp_snd_msg_to_user (Mppp_sap_data_upper_entity_id, Mppp_sap_data_sapi, MPPP_CLEAR_BUSY_IN);

			p_snd_msg	= p_msg;			/* restore send pointer */
		}

#	endif	/* if MPPP_FC == ON } */

	MPPP_DBG_LEAVE ();

}


/*-------------------------------------------------------------------------*/

void mp_get_next_i_tx_queue_entry ()
{
	MPPP_DBG_FUNC ("mp_get_next_i_tx_queue_entry()")

	MPPP_DBG_ENTER ();

		/* Release the current received message */

	Free_msg (p_rcv_msg);

		/* Pick up next to send */

	if (Mppp_cep_tx_sent == P_NIL) {
		p_rcv_msg = Mppp_cep_tx_first;
	} else {
		p_rcv_msg = Next (Mppp_cep_tx_sent);
	}

		/* Update the p_sent pointer if necessary */

	if (p_rcv_msg != P_NIL) {

		Mppp_cep_tx_sent  = p_rcv_msg;				/* sent queue */

			/* Reset the pointer to the next message */

		Next (p_rcv_msg) = P_NIL;

	}

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/

void mp_in_rx_queue (mns)
	mppp_modulo_t	mns;			/* sequence number */
{
	MPPP_DBG_FUNC ("mp_in_rx_queue()")

	struct message	FAR *p_msg;		/* current message pointer */
	struct message	FAR *p_msg_ins; /* current message pointer */
	uchar			FAR *p_data;	/* current data pointer */
	ushort				 queue_mns; /* MNS of the queued frame */

	MPPP_DBG_ENTER ();

		/* Put the p_rcv_msg in MLP Rx queue in sequence */

			/* Empty queue ? */

	if (Mppp_cep_rx_last == P_NIL) {

		Next  (p_rcv_msg)	= Prior (p_rcv_msg) = P_NIL;
		Mppp_cep_rx_first	= Mppp_cep_rx_last	= p_rcv_msg;

	} else {

			/* Find out the right position for insertion */

		for (p_msg = Mppp_cep_rx_last; p_msg != P_NIL; p_msg = Prior (p_msg)) {

			p_data		= L_a_data;

			queue_mns	= Get_r_mp_mns;


				/* Find out the insert point in the queue */

			p_msg_ins = p_msg;

			if (queue_mns > mns) {

				if ((queue_mns - mns) > Mppp_sap_data_w) {

						/* Insert before */

					p_msg_ins = Next (p_msg);
					break;

				}

			} else {

				if ((mns - queue_mns) <= Mppp_sap_data_w) {

						/* Insert before */

					p_msg_ins = Next (p_msg);
					break;
				}

			}

		}

		if (p_msg_ins == P_NIL) {

			Next  (p_rcv_msg)			= P_NIL;
			Prior (p_rcv_msg)			= Mppp_cep_rx_last;
			Next  (Mppp_cep_rx_last)	= p_rcv_msg;
			Mppp_cep_rx_last			= p_rcv_msg;

		} else {

			Prior	(p_rcv_msg)		= Prior (p_msg_ins);
			Next	(p_rcv_msg)		= p_msg_ins;
			Prior	(p_msg_ins)		= p_rcv_msg;

			if (Prior (p_rcv_msg) != P_NIL) {
				Next (Prior (p_rcv_msg)) = p_rcv_msg;
			} else {
				Mppp_cep_rx_first = p_rcv_msg;
			}

		}

	}

	p_rcv_msg = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/

uchar mp_out_rx_queue ()
{

	MPPP_DBG_FUNC ("mp_out_rx_queue()")

	MPPP_DBG_ENTER ();

		/* Release the current received message before using p_rcv_msg */

	Free_msg (p_rcv_msg);

		/* First message of the queue */

	if ((p_rcv_msg = Mppp_cep_rx_first) == P_NIL) {
		return (NOK);
	}

		/* Extract and rebuild the queue */

	if (Next (Mppp_cep_rx_first ) == P_NIL) {
		Mppp_cep_rx_first = Mppp_cep_rx_last = P_NIL;
	} else {
		Prior (Next (Mppp_cep_rx_first))	= P_NIL;
		Mppp_cep_rx_first					= Next (p_rcv_msg);
	}

	MPPP_DBG_LEAVE ();

	return (OK);
}


/*------------------------------------------------------------------------*/

void mp_discard_rx_queue ()
{
	MPPP_DBG_FUNC ("mp_discard_rx_queue()")

	struct message	FAR *p_msg, FAR *p_old;		/* temporary message pointers */

	MPPP_DBG_ENTER ();

	for (p_msg = Mppp_cep_rx_first; p_msg != P_NIL; ) {

		p_old		= p_msg;

			/* Next message */

		p_msg		= Next (p_old);

			/* Free current message */

		Free_msg	(p_old);
	}

	Mppp_cep_rx_first = Mppp_cep_rx_last = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/

struct message FAR *mp_faq_get_first_msg ()
{
	MPPP_DBG_FUNC ("mp_faq_get_first_msg()")

	struct message	FAR *p_msg;		/* temporary message pointers */

	MPPP_DBG_ENTER ();

		/* First message of the queue */

	if ((p_msg = Mppp_cep_rx_faq_first) != P_NIL) {

			/* Extract and rebuild the queue */

		if (Next (Mppp_cep_rx_faq_first ) == P_NIL) {
			Mppp_cep_rx_faq_first = Mppp_cep_rx_faq_last = P_NIL;
		} else {
			Prior (Next (Mppp_cep_rx_faq_first))	= P_NIL;
			Mppp_cep_rx_faq_first					= Next (p_msg);
		}

	}

	MPPP_DBG_LEAVE ();

	return (p_msg);
}


/*--------------------------------------------------------------------------*/

uchar mp_put_in_faq ()
{
	MPPP_DBG_FUNC ("mp_put_in_faq()")

	uchar	FAR *p_data;	/* data pointer */

	MPPP_DBG_ENTER ();

		/* Put the p_rcv_msg Rx fragment assembly queue */

	if (Mppp_cep_rx_faq_last == P_NIL) {
		Next  (p_rcv_msg)	= Prior (p_rcv_msg) = P_NIL;
		Mppp_cep_rx_faq_first	= Mppp_cep_rx_faq_last	= p_rcv_msg;
	} else {
		Next  (p_rcv_msg)		= P_NIL;
		Prior (p_rcv_msg)		= Mppp_cep_rx_faq_last;
		Next  (Mppp_cep_rx_faq_last)	= p_rcv_msg;
		Mppp_cep_rx_faq_last			= p_rcv_msg;
	}

	p_data		= R_a_data;
	p_rcv_msg	= P_NIL;

		/*
			Save the PFC status of the first fragment for the
			merging process.
		*/

	if (Get_r_mp_b) {
		Mppp_cep_first_frag_pfc = Mppp_cep_frag_pfc;
	}


	if (Get_r_mp_e) {

		MPPP_DBG_LEAVE ();
		return (STOP);

	} else {

		MPPP_DBG_LEAVE ();
		return (CONTINUE);
	}

}


/*--------------------------------------------------------------------------*/

void mp_discard_faq ()
{
	MPPP_DBG_FUNC ("mp_discard_faq()")

	struct message	FAR *p_msg;				/* Message pointer temporary */
	struct message	FAR *p_msg_old;			/* Old message pointer temporary */

	MPPP_DBG_ENTER ();

		/* Discard Frame Assembly Queue */

	for (p_msg = mp_faq_get_first_msg (); p_msg != P_NIL;) {
		p_msg_old	= p_msg;
		p_msg		= mp_faq_get_first_msg ();
		Free_msg	(p_msg_old);
	}

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/

#if ASSERT == ON	/* { */

void mp_check_tx_queue ()
{
	MPPP_DBG_FUNC ("mp_check_tx_queue()")

	struct message		FAR *p_msg;				/* current message */
	struct message		FAR *p_prior;			/* prior message */
	uchar					 sent;				/* Sent pointer flag */
	uchar					 nb_msg;			/* message counter */

	MPPP_DBG_ENTER ();

	sent	= FALSE;
	nb_msg	= 0;

	for (p_prior = P_NIL, p_msg = Mppp_cep_tx_first; p_msg != P_NIL; p_prior	= p_msg, p_msg = Next (p_prior)) {

		if (p_prior !=	Prior (p_msg)) {
			Trap (TRAP_MPPP_QUEUE_CHECK, "mp_check_tx_queue:prior");
		}

		if (p_msg == Mppp_cep_tx_sent) {
			sent = TRUE;
		}

		nb_msg++;

	}

	if (Mppp_cep_tx_last != p_prior) {
		Trap (TRAP_MPPP_QUEUE_CHECK, "mp_check_tx_queue:last");
	}

	if ((sent == FALSE) && (Mppp_cep_tx_sent != P_NIL)) {
		Trap (TRAP_MPPP_QUEUE_CHECK, "mp_check_tx_queue:sent");
	}

#	if MPPP_FC == ON	/* { */

		if ((Mppp_sap_data_out_fc_high_mark != 0) && (Mppp_cep_out_fc_mark != nb_msg)) {
			Trap (TRAP_MPPP_QUEUE_CHECK, "mp_check_tx_queue:nb");
		}

#	endif	/* } */

	MPPP_DBG_LEAVE ();

}

#endif	/* if ASSERT == ON } */

/*--------------------------------------------------------------------------*/

#if ASSERT == ON	/* { */

void mp_check_rx_queue ()
{
	MPPP_DBG_FUNC ("mp_check_rx_queue()")

	struct message		FAR *p_msg;				/* current message */
	struct message		FAR *p_prior;			/* prior message */

	MPPP_DBG_ENTER ();

	for (p_prior = P_NIL, p_msg = Mppp_cep_rx_first; p_msg != P_NIL; p_prior	= p_msg, p_msg = Next (p_prior)) {

		if (p_prior !=	Prior (p_msg)) {
			Trap (TRAP_MPPP_QUEUE_CHECK, "mp_check_rx_queue:prior");
		}

	}

	if (Mppp_cep_rx_last != p_prior) {
		Trap (TRAP_MPPP_QUEUE_CHECK, "mp_check_rx_queue:last");
	}

	MPPP_DBG_LEAVE ();

}

#endif	/* if ASSERT == ON } */

/*--------------------------------------------------------------------------*/

#if ASSERT == ON	/* { */

void mp_check_faq_queue ()
{
	MPPP_DBG_FUNC ("mp_check_faq_queue()")

	struct message		FAR *p_msg;				/* current message */
	struct message		FAR *p_prior;			/* prior message */

	MPPP_DBG_ENTER ();

	for (p_prior = P_NIL, p_msg = Mppp_cep_rx_faq_first; p_msg != P_NIL; p_prior	= p_msg, p_msg = Next (p_prior)) {

		if (p_prior !=	Prior (p_msg)) {
			Trap (TRAP_MPPP_QUEUE_CHECK, "mp_check_faq_queue:prior");
		}

	}

	if (Mppp_cep_rx_faq_last != p_prior) {
		Trap (TRAP_MPPP_QUEUE_CHECK, "mp_check_faq_queue:last");
	}

	MPPP_DBG_LEAVE ();

}

#endif	/* if ASSERT == ON } */


/*--------------------------------------------------------------------------*/

/* EOF */

