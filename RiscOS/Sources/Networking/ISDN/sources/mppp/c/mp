
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mp.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) : processing of Multilink (Control) Protocol frames.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"
#include "mp.h"				/* MP definitions */

/*--------------------------------------------------------------------------*/

struct	mp_upfh			 receive_fr_mp;			/* MP frame header structure of a received frame */
struct	mp_upfh			 send_fr_mp;			/* MP frame header structure of frame to send */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_process - implements the processing of a connection
						message primitive related to PPP MP.

Usage			void mp_process (uchar FAR *p_data, ushort data_size, uchar from_user);

Common constants and declarations : mppp.h

Common objects : context pointers.

*--------------------------------------------------------------------------*/

void mp_process (p_data, data_size, from_user)
	uchar	FAR *p_data;
	ushort		data_size;
	uchar		from_user;
{
	struct message	FAR *p_msg;
	mppp_modulo_t		receiving_modulo;
	mppp_modulo_t		sending_modulo;

	MPPP_DBG_FUNC ("mp_process()")

	MPPP_DBG_ENTER ();

		/* Set the kind of MP header we expect */

	if (Mppp_cep_peer_ack_negot & LCP_NEG_SSNHF) {
		receiving_modulo	= MP_MX_SHORT_MODULO;
	} else {
		receiving_modulo	= MP_MX_LONG_MODULO;
	}

		/* Set the kind of MP header we MUST send */

	if (Mppp_cep_ack_negot & LCP_NEG_SSNHF) {
		sending_modulo	= MP_MX_SHORT_MODULO;
	} else {
		sending_modulo	= MP_MX_LONG_MODULO;
	}

		/*
			RFC 1990: PPP Multilink

			It is forbidden to include the Address and Control
			fields (usually the two bytes FF 03) in the material
			to be fragmented.

			However, it is a good defensive programming practice
			to accept the packets anyway, ignoring the two bytes
			if present, as that is what RFC 1661 specifies.
		*/

	if (p_data != R_a_data) {
		p_data		= R_a_data;
		data_size	= R_data_size;
	}

	if ((*p_data == PPP_UI_ADD_VAL) && (*(p_data+1) == PPP_UI_CTRL_VAL)) {

		p_data		+= 2;
		data_size	-= 2;

		if (p_buffer != P_NIL) {
			Buffer_data_offset	+= 2;
			Buffer_data_size	-= 2;
		} else {
			R_msg_data_offset	+= 2;
			R_msg_data_size		-= 2;
		}

	}

	if (from_user == OFF) {

		MPPP_DBG_NOTICE ("MP packet from Net");

			/*=================================================

				Multilink Protocol Packet from lower entities

			==================================================*/

			/* Unpack the MP header */

		if (mp_unpack (p_data, data_size) == NOK) {

				/* No splitting */

			mppp_snd_data_msg_to_local (Mppp_sap_data_upper_entity_id, Mppp_cep_accm_to_local);

		} else {

				/*
					Mv (t) older expected sequence number.
				*/

				/* Splitting and sequence numbering */


					/* Expected fragment ? */

expected_frag:

			if (Ru_mp_mns == Mppp_cep_mvt) {


				if (Mppp_cep_first_frag_received == OFF) {

						/* Note that we have received the first fragment */

					Mppp_cep_first_frag_received = ON;

				}

					/* Yes - Update Single Link current Rx sequence number */

				Sppp_cep_data_rx_mvr = Ru_mp_mns;

					/*
						Yes - put the fragment in
						the fragment assembly queue
						and check END of fragment bit.
					*/

				if (mp_put_in_faq () == STOP) {

						/* End bit fragment found ? */

					mp_merge_fragment ();

						/* Resulting recombined message ? */

					if (p_buffer != P_NIL) {

						if (Buffer_data_size != 0) {


								/* Report to upper layer */

							mppp_snd_data_msg_to_local (Mppp_sap_data_upper_entity_id, Mppp_cep_accm_to_local);

						}

					}

				}

					/* Update next expected sequence number */

				Mp_inc_v_modulo (Mppp_cep_mvt, receiving_modulo);

					/*
						Others received fragments awaiting
						in the Rx queue ?
					*/

				while ((p_msg = Mppp_cep_rx_first) != P_NIL) {

					p_data = L_a_data;

						/* Sequenced fragments ? */

					if ((mppp_modulo_t)(R_mp_mns) == Mppp_cep_mvt) {

							/* Extract from the Rx queue */

						if (mp_out_rx_queue () == OK) {

								/*
									Yes - Put the fragment in
									the fragment assembly queue.
								*/

							if (mp_put_in_faq () == STOP) {

								mp_merge_fragment ();

									/* Resulting recombined message ? */

								if (p_buffer != P_NIL) {

									if (Buffer_data_size != 0) {

											/* Report to upper layer */

										mppp_snd_data_msg_to_local (Mppp_sap_data_upper_entity_id, Mppp_cep_accm_to_local);
									}

								}

							}
								/* Update next expected sequence number */

							Mp_inc_v_modulo (Mppp_cep_mvt, receiving_modulo);
						}

					} else {

							/* Continue */

						break;
					}

				}

			} else {

					/*
						If this fragment is the first one on this bundle,
						then it is likely that our peer is running a
						RFC 1717 implementation.

						Unlike RFC 1990, RFC 1717 does not require
						that the first fragment transmitted on the bundle
						be numbered 0.

					*/

				if ((Mppp_cep_first_frag_received == OFF) && (R_mp_b)) {

						/* Update next expected sequence number */

					Mp_inc_v_modulo (Mppp_cep_mvt, receiving_modulo);

					goto expected_frag;
				}


					/*
						Valid sequence number but fragment
						not in sequence.
					 */

					/* Update Single Link current Rx sequence number */

				Sppp_cep_data_rx_mvr = Ru_mp_mns;

					/* Queue to the Rx queue */

				mp_in_rx_queue (Ru_mp_mns);

					/* Check loss of fragment */

				if ( ! Mp_check_sn (Mppp_cep_mvt, Ru_mp_mns)) {

						/* Lost fragment */

					mp_discard_faq ();

						/* Update the mv (t) */

					Mp_inc_v_modulo (Mppp_cep_mvt, receiving_modulo);

					while ((p_msg = Mppp_cep_rx_first) != P_NIL) {

						p_data = L_a_data;

							/* Sequenced fragments ? */

						if ((mppp_modulo_t)(R_mp_mns) == Mppp_cep_mvt) {

								/* Extract from the Rx queue */

							if (mp_out_rx_queue () == OK) {

									/*
										Yes - Put the fragment in
										the fragment assembly queue.
									*/

								if (mp_put_in_faq () == STOP) {

									mp_merge_fragment ();

										/* Resulting recombined message ? */

									if (p_buffer != P_NIL) {

										if (Buffer_data_size != 0) {

												/* Report to upper layer */

											mppp_snd_data_msg_to_local (Mppp_sap_data_upper_entity_id, Mppp_cep_accm_to_local);

										}

									}

								}
									/* Update next expected sequence number */

								Mp_inc_v_modulo (Mppp_cep_mvt, receiving_modulo);
							}

						} else {

								/* Continue */

							break;

						}

					}

				}

			}

		}

	} else {

		MPPP_DBG_NOTICE ("Packet from user");

			/*=================================================

				Data Packet from upper entities (to split)

			==================================================*/

			/* Queue the incoming data request */

		mp_in_tx_queue ();

		switch (Mppp_cep_data_state) {

			case MPPP_ESTABLISHED :

				if (Mppp_cep_busy_sppp_nb == Mppp_cep_opened_sppp_nb) {

						/* All the member links are in FC BUSY state */

					MPPP_DBG_WARNING ("all member links busy");
					break;
				}

				if (Mppp_sap_data_split_flag == ON) {

						/* Check if Tx is possible */

					for ( ; ; ) {

							/* Split the received frame */

						if (mp_split_frame () == OK) {

								/* Transmit frames prepared in the Single Link context */

							mp_tx_frame ();

						} else {

							break;
						}

					}

				} else {

					for ( ; ; ) {

							/* Transmit the awaiting MP frames if any */

						if (mp_build_tx_data_rq () == OK) {

								/* Increment the MV (S) */

							Mp_inc_v_modulo (Mppp_cep_mvs, sending_modulo);

						} else {

							break;
						}

					}

				}
				break;


			default:
				MPPP_DBG_NOTICE ("MPPP data connection not ready");
				break;


		}


	}

#	if ASSERT == ON

			/* Check the queues consistency */

		if (p_mppp_cep != P_NIL) {
			mp_check_tx_queue	();
			mp_check_rx_queue	();
			mp_check_faq_queue	();
		}

#	endif

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_restart_tx - restarts the sending of queued MP
					frames due to lower layers flow control BUSY state.

Usage			void mp_restart_tx ();

Common constants and declarations : mppp.h

Common objects : context pointers.

*--------------------------------------------------------------------------*/

void mp_restart_tx ()
{

	MPPP_DBG_FUNC ("mp_restart_tx()")

	mppp_modulo_t		sending_modulo;

	MPPP_DBG_ENTER ();

		/* Set the kind of MP header we have to send */

	if (Mppp_cep_ack_negot & LCP_NEG_SSNHF) {
		sending_modulo	= MP_MX_SHORT_MODULO;
	} else {
		sending_modulo	= MP_MX_LONG_MODULO;
	}

	switch (Mppp_cep_data_state) {

		case MPPP_ESTABLISHED :

			if (Mppp_cep_busy_sppp_nb == Mppp_cep_opened_sppp_nb) {

				MPPP_DBG_WARNING ("all member links busy");

					/* All the member links are in FC BUSY state */

				break;
			}

			if (Mppp_sap_data_split_flag == ON) {

					/* Check if Tx is possible */

				for ( ; ; ) {

						/* Split the received frame */

					if (mp_split_frame () == OK) {

							/* Transmit frames prepared in the Single Link context */

						mp_tx_frame ();

					} else {

						break;
					}

				}

			} else {

				for ( ; ; ) {

						/* Transmit the awaiting MP frames if any */

					if (mp_build_tx_data_rq () == OK) {

							/* Increment the MV (S) */

						Mp_inc_v_modulo (Mppp_cep_mvs, sending_modulo);

					} else {

						break;
					}

				}

			}
			break;


		default:
			MPPP_DBG_NOTICE ("MPPP data connection not ready");
			break;


	}

#	if ASSERT == ON

			/* Check the queues consistency */

		if (p_mppp_cep != P_NIL) {
			mp_check_tx_queue	();
			mp_check_rx_queue	();
			mp_check_faq_queue	();
		}

		if (p_sppp_cep != P_NIL) {
			mppp_check_sppp_tx_queue	();
		}

#	endif


	MPPP_DBG_LEAVE ();

}


/*------------------------------------------------------------------------*/

/* EOF */

