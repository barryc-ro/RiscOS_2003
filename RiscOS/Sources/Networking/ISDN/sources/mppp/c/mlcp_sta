
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mlcp_sta.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) : state driven automaton
 *		- mlcp_xxx routines implement the processing of an event according
 *			to the MLCP automaton state.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|    Multi Link Control Protocol                      |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if 0	/*$$$ NOT USED { */

#include "mppp_ext.h"
#include "mlcp.h"		/* MLCP definitions */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 All the following functions implement the execution of a
				 received event (external or internal, servicing queue,
				 expiry of timers, receiver busy condition) according to the
				 state of the automaton.

Usage			 void mlcp_xxxxxx ();

Description


Return value	 void

Common constants and declarations : mppp.h

Common objects : current contexts (thru access macros).

*--------------------------------------------------------------------------*/


void mlcp_illegal_event ()
{
	MPPP_DBG_FUNC ("mlcp_illegal_event()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_this_layer_up ()
{
	MPPP_DBG_FUNC ("mlcp_this_layer_up()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_this_layer_down ()
{
	MPPP_DBG_FUNC ("mlcp_this_layer_down()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_this_layer_started ()
{
	MPPP_DBG_FUNC ("mlcp_this_layer_started()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_this_layer_finished ()
{
	MPPP_DBG_FUNC ("mlcp_this_layer_finished()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_init_restart_counter ()
{
	MPPP_DBG_FUNC ("mlcp_init_restart_counter()")

	MPPP_DBG_ENTER ();

	Mppp_c_prot_terminate_count = Mppp_c_prot_mx_terminate;
	Mppp_c_prot_configure_count = Mppp_c_prot_mx_configure;

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_zero_restart_counter ()
{
	MPPP_DBG_FUNC ("mlcp_zero_restart_counter()")

	MPPP_DBG_ENTER ();

	Mppp_c_prot_terminate_count = 0;
	Mppp_c_prot_configure_count = 0;

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_send_configure_request ()
{
	MPPP_DBG_FUNC ("mlcp_send_configure_request()")

	MPPP_DBG_ENTER ();

	if (Mppp_c_prot_configure_count > 0) {

		--Mppp_c_prot_configure_count;

	} else {

	}

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_send_configure_ack ()
{
	MPPP_DBG_FUNC ("mlcp_send_configure_ack()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_send_configure_nak_rej ()
{
	MPPP_DBG_FUNC ("mlcp_send_configure_nak()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_send_terminate_request ()
{
	MPPP_DBG_FUNC ("mlcp_send_terminate_request()")

	MPPP_DBG_ENTER ();

	if (Mppp_c_prot_terminate_count > 0) {

		--Mppp_c_prot_terminate_count;

	} else {

	}

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_send_terminate_ack ()
{
	MPPP_DBG_FUNC ("mlcp_send_terminate_ack()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_send_code_reject ()
{
	MPPP_DBG_FUNC ("mlcp_send_code_reject()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void mlcp_send_echo_reply ()
{
	MPPP_DBG_FUNC ("mlcp_send_echo_reply()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

uchar mlcp_is_reject_fatal ()
{
	MPPP_DBG_FUNC ("mlcp_is_reject_fatal()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

	return (FALSE);
}

/*-------------------------------------------------------------------------*/

uchar mlcp_check_configure_request ()
{
	MPPP_DBG_FUNC ("mlcp_check_configure_request()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

	return (OK);
}

/*-------------------------------------------------------------------------*/

uchar mlcp_check_configure_ack_nak_rej ()
{
	MPPP_DBG_FUNC ("mlcp_check_configure_ack_nak_rej()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

	return (OK);
}

/*-------------------------------------------------------------------------*/

#endif /*$$$ NOT USED } */

/* EOF */


