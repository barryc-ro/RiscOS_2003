
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - bacp_sta.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) : state driven automaton
 *		- bacp_xxx routines implement the processing of an event according
 *			to the BACP automaton state.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|    Bandwidth Allocation Control Protocol            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_BAP == ON	/* { */

#include "mppp_ext.h"
#include "bacp.h"		/* BACP definitions */


/*-------------------------------------------------------------------------*/

			/* Local functions prototypes */

#if NEW_FCT_STYLE == ON
	uchar	bacp_check_configure_ack		(void);
	uchar	bacp_check_configure_nak		(void);
	uchar	bacp_check_configure_rej		(void);
#else
	uchar	bacp_check_configure_ack		();
	uchar	bacp_check_configure_nak		();
	uchar	bacp_check_configure_rej		();
#endif

/*-------------------------------------------------------------------------*/


		/*
			The following macros are used in this way:

			Bacp_opt_REQ_xxx	loads an option in a Configure-Request
								packet to be sent

			Bacp_opt_ACK_xxx	checks an option present in a received
								Configure-Ack packet.
								ML PPP specific options are removed from
								the original Configure-Ack packet

			Bacp_opt_NAK_xxx	checks an option present in a received
								Configure-Nak packet

			Bacp_opt_REJ_xxx	checks an option present in a received
								Configure-Rej packet

		*/


		/*-=-=-=-=-=-= FAVP Option =-=-=-=-=-=-=*/

#define Bacp_opt_REQ_FAVP(_p_curr,_val)								\
				{													\
					if ((Mppp_cep_bacp_rejected == OFF) && (Mppp_cep_peer_ack_negot & BACP_NEG_FAVP)) {	\
						Mppp_put_char(BACP_OPT_FAVP, _p_curr);		\
						Mppp_put_char(BACP_OPT_SZ_LONG,_p_curr);	\
						Mppp_put_long(_val,_p_curr);				\
					}												\
				}

#define Bacp_opt_ACK_FAVP(_p_curr,_val)								\
				{													\
					if (Mppp_cep_peer_ack_negot & BACP_NEG_FAVP) {	\
						if ((pack_lgth -= BACP_OPT_SZ_LONG) >= 0) { \
							Mppp_get_char(opt_type,_p_curr);		\
							Mppp_get_char(opt_lgth,_p_curr);		\
							if ((opt_lgth == BACP_OPT_SZ_LONG) && (opt_type == BACP_OPT_FAVP)) {	\
								Mppp_get_long(opt_val_ulong,_p_curr); \
								if (opt_val_ulong != _val) {		\
									goto opt_ack_error;				\
								}									\
							} else {								\
								goto opt_ack_error;					\
							}										\
						} else {									\
							goto opt_ack_error;						\
						}											\
					}												\
				}

#define Bacp_opt_NAK_FAVP(_p_curr,_val)								\
				{													\
					if (Mppp_cep_peer_ack_negot & BACP_NEG_FAVP) {	\
						if ((pack_lgth -= BACP_OPT_SZ_LONG) >= 0) { \
							Mppp_get_char(opt_type,_p_curr);		\
							Mppp_get_char(opt_lgth,_p_curr);		\
							if ((opt_lgth == BACP_OPT_SZ_LONG) && (opt_type == BACP_OPT_FAVP)) {	\
								Mppp_get_long(opt_val_ulong,_p_curr); \
								Mppp_cep_peer_ack_negot &= (~BACP_NEG_FAVP);	\
							} else {								\
								goto opt_nak_error;					\
							}										\
						} else {									\
							goto opt_nak_error;						\
						}											\
					}												\
				}

#define Bacp_opt_REJ_FAVP(_p_curr,_val)								\
				{													\
					if (Mppp_cep_peer_ack_negot & BACP_NEG_FAVP) {	\
						if ((pack_lgth -= BACP_OPT_SZ_LONG) >= 0) { \
							Mppp_get_char(opt_type,_p_curr);		\
							Mppp_get_char(opt_lgth,_p_curr);		\
							if ((opt_lgth == BACP_OPT_SZ_LONG) && (opt_type == BACP_OPT_FAVP)) {	\
								Mppp_get_long(opt_val_ulong,_p_curr); \
								if (opt_val_ulong != _val) {		\
									goto opt_rej_error;				\
								}									\
								Mppp_cep_peer_ack_negot &= (~BACP_NEG_FAVP);	\
							} else {								\
								goto opt_rej_error;					\
							}										\
						} else {									\
							goto opt_rej_error;						\
						}											\
					}												\
				}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			 All the following functions implement the execution of a
				 received event (external or internal, servicing queue,
				 expiry of timers, receiver busy condition) according to the
				 state of the automaton.

Usage			 void bacp_xxxxxx ();

Description


Return value	 void

Common constants and declarations : mppp.h

Common objects : current contexts (thru access macros).

*--------------------------------------------------------------------------*/

void bacp_illegal_event ()
{
	MPPP_DBG_FUNC ("bacp_illegal_event()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_this_layer_up ()
{
	MPPP_DBG_FUNC ("bacp_this_layer_up()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_this_layer_down ()
{
	MPPP_DBG_FUNC ("bacp_this_layer_down()")

	MPPP_DBG_ENTER ();

		/* Stop the BACP Restart timer */

	Mppp_c_prot_stop_timer (MPPP_BACP_TI_X_RESTART);

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_this_layer_started ()
{
	MPPP_DBG_FUNC ("bacp_this_layer_started()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_this_layer_finished ()
{
	MPPP_DBG_FUNC ("bacp_this_layer_finished()")

	MPPP_DBG_ENTER ();

		/* Stop the BACP Restart timer */

	Mppp_c_prot_stop_timer (MPPP_BACP_TI_X_RESTART);

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_init_restart_counter ()
{
	MPPP_DBG_FUNC ("bacp_init_restart_counter()")

	MPPP_DBG_ENTER ();

	Mppp_c_prot_terminate_count = Mppp_c_prot_mx_terminate;
	Mppp_c_prot_configure_count = Mppp_c_prot_mx_configure;
	Mppp_c_prot_failure_count   = 0;

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_zero_restart_counter ()
{
	MPPP_DBG_FUNC ("bacp_zero_restart_counter()")

	MPPP_DBG_ENTER ();

	Mppp_c_prot_terminate_count = 0;
	Mppp_c_prot_configure_count = 0;
	Mppp_c_prot_failure_count   = Mppp_c_prot_mx_failure;

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_send_configure_request ()
{
	MPPP_DBG_FUNC ("bacp_send_configure_request()")

	uchar			FAR *p_curr;
	uchar			FAR *p_curr_start;
	uchar			FAR *p_data_start;
	ushort				data_size;
	struct buffer	FAR *p_buffer;

	MPPP_DBG_ENTER ();

	mppp_current_ppp_pid = PPP_PROT_BACP;

	p_buffer = Alloc_buffer ();

	p_data_start	= Buffer_a_start_data;
	p_curr			=
	p_curr_start	= (p_data_start+PPP_PACKET_HEADER_LGTH+PPP_FRAME_HEADER_LGTH);

	Bacp_opt_REQ_FAVP	(p_curr, Mppp_cep_peer_ack_favp);


#	if 0	/*$$$ NOT USED */

			/*
				Update the PPP packet identifier
				As stated in RFC 1661,
				for retransmissions, the Identifier MAY remain
				unchanged.
				We think it's better to change the identifier, so that
				any extra-Ack, due to collision, will be discarded.
			*/

		if (mppp_c_prot_event_id != MPPP_CP_EV_TIMEOUT) {
			Mppp_c_prot_s_packet_id++;
		}

#	endif

		/* Update the PPP packet identifier */

	if (Mppp_c_prot_s_packet_id == PPP_MX_PACKET_ID_VAL) {
		Mppp_c_prot_s_packet_id	= 0;
	} else {
		Mppp_c_prot_s_packet_id++;
	}

		/* Prepare the PPP frame for sending */

	data_size	= mppp_prepare_packet_to_send (PPP_PROT_BACP,
												MPPP_CP_PCK_CONFIG_RQ,
												Mppp_c_prot_s_packet_id,
												p_data_start,
												(p_curr - p_curr_start));

		/* Set the buffer size, and allocate a message for sending */

	Buffer_data_size	= data_size;
	p_snd_msg			= Msg_or_buffer (p_buffer, 0);

		/* Queue this message */

	mppp_in_sppp_tx_queue ();


		/* Send a data message to the lower entity */

	mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

		/* Decrement the configure count, and start the restart timer */

	Mppp_c_prot_configure_count--;
	Mppp_c_prot_start_timer (MPPP_BACP_TI_X_RESTART);

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_send_configure_ack ()
{
	MPPP_DBG_FUNC ("bacp_send_configure_ack()")

	uchar	FAR	*p_data_start;
	ushort		data_size;

	MPPP_DBG_ENTER ();

	mppp_current_ppp_pid = PPP_PROT_BACP;

		/* Try to reuse the received message */

	if ((p_rcv_msg == P_NIL) ||
		((p_rcv_msg != P_NIL) && (R_msg_lib == OFF))) {

		p_snd_msg	= Alloc_msg ();

	} else {

		p_snd_msg	= p_rcv_msg;
		p_rcv_msg	= P_NIL;

	}

	p_data_start	= S_a_data;

		/* Prepare the PPP frame for sending */

	data_size	= mppp_prepare_packet_to_send (PPP_PROT_BACP,
												MPPP_CP_PCK_CONFIG_ACK,
												Mppp_c_prot_r_packet_id,
												p_data_start,
												Mppp_c_prot_data_size);

	if (p_buffer != P_NIL) {
		Buffer_data_size =
		S_msg_frag_size  = data_size;
	} else {
		S_msg_data_size	= (uchar)data_size;
	}

		/* Queue this message */

	mppp_in_sppp_tx_queue ();


		/* Send this packet to the peer system */

	mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

	if (Mppp_c_prot_state == MPPP_CP_STATE_ACK_RECEIVED) {

		if ((Mppp_cep_ack_negot & BACP_NEG_FAVP) && (Mppp_cep_peer_ack_negot & BACP_NEG_FAVP)) {

				/* Set the BACP as enabled */

			Mppp_cep_bacp_enabled	= ON;

			MPPP_DBG_NOTICE ("BACP successfully negotiated");

		}

	}

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_send_configure_nak_rej ()
{
	MPPP_DBG_FUNC ("bacp_send_configure_nak_rej()")

	uchar	FAR	*p_data_start;
	ushort		data_size;
	uchar		code;


	MPPP_DBG_ENTER ();

	mppp_current_ppp_pid = PPP_PROT_BACP;

	if ((Mppp_c_prot_rej_flag == ON) ||
		(++Mppp_c_prot_failure_count > Mppp_c_prot_mx_failure)) {

			/* Send Configure Reject instead of Configure Nak */

		code = MPPP_CP_PCK_CONFIG_REJ;

		MPPP_DBG_NOTICE ("sending CONFIG REJ");

	} else {

			/*
				Send Configure Nak or Configure-Reject,
				if a requested Configuration Option is not recognized
				or not implemented.
			*/


		code = MPPP_CP_PCK_CONFIG_NAK;

		MPPP_DBG_NOTICE ("sending CONFIG NAK");

	}

		/* Try to reuse the received message */

	if ((p_rcv_msg == P_NIL) ||
		((p_rcv_msg != P_NIL) && (R_msg_lib == OFF))) {

		p_snd_msg	= Alloc_msg ();

	} else {

		p_snd_msg	= p_rcv_msg;
		p_rcv_msg	= P_NIL;

	}

	p_data_start	= S_a_data;

		/* Prepare the PPP frame for sending */

	data_size	= mppp_prepare_packet_to_send (PPP_PROT_BACP,
												code,
												Mppp_c_prot_r_packet_id,
												p_data_start,
												Mppp_c_prot_data_size);

	if (p_buffer != P_NIL) {
		Buffer_data_size =
		S_msg_frag_size  = data_size;
	} else {
		S_msg_data_size	= (uchar)data_size;
	}

		/* Queue this message */

	mppp_in_sppp_tx_queue ();

	mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

		/* Reset the reject flag */

	Mppp_c_prot_rej_flag	= OFF;

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_send_terminate_request ()
{
	MPPP_DBG_FUNC ("bacp_send_terminate_request()")

	struct buffer	FAR *p_buffer;

	uchar	FAR	*p_data_start;
	ushort		data_size;

	MPPP_DBG_ENTER ();

	mppp_current_ppp_pid = PPP_PROT_BACP;

	p_buffer = Alloc_buffer ();

	p_data_start	= Buffer_a_start_data;

#	if 0	/*$$$ NOT USED */


			/*
				Update the PPP packet identifier
				As stated in RFC 1661,
				for retransmissions, the Identifier MAY remain
				unchanged.
				We think it's better to change the identifier, so that
				any extra-Ack, due to collision, will be discarded.
			*/

		if (mppp_c_prot_event_id != MPPP_CP_EV_TIMEOUT) {
			Mppp_c_prot_s_packet_id++;
		}

#	endif

		/* Update the PPP packet identifier */

	if (Mppp_c_prot_s_packet_id == PPP_MX_PACKET_ID_VAL) {
		Mppp_c_prot_s_packet_id	= 0;
	} else {
		Mppp_c_prot_s_packet_id++;
	}

		/* Prepare the PPP frame for sending */

	data_size	= mppp_prepare_packet_to_send (PPP_PROT_BACP,
												MPPP_CP_PCK_TERM_RQ,
												Mppp_c_prot_s_packet_id,
												p_data_start,
												0);

	Buffer_data_size	= data_size;

	p_snd_msg	= Msg_or_buffer (p_buffer, 0);

		/* Queue this message */

	mppp_in_sppp_tx_queue ();

	mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

	Mppp_c_prot_terminate_count--;
	Mppp_c_prot_start_timer (MPPP_BACP_TI_X_RESTART);

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_send_terminate_ack ()
{
	MPPP_DBG_FUNC ("bacp_send_terminate_ack()")

	uchar	FAR *p_data_start;
	ushort		data_size;

	MPPP_DBG_ENTER ();

	mppp_current_ppp_pid = PPP_PROT_BACP;

		/* Try to reuse the received message */

	if ((p_rcv_msg == P_NIL) ||
		((p_rcv_msg != P_NIL) && (R_msg_lib == OFF))) {

		p_snd_msg	= Alloc_msg ();

	} else {

		p_snd_msg		= p_rcv_msg;
		p_rcv_msg		= P_NIL;


	}

	p_data_start	= S_a_data;


		/* Prepare the PPP frame for sending */

	data_size	= mppp_prepare_packet_to_send (PPP_PROT_BACP,
												MPPP_CP_PCK_TERM_ACK,
												Mppp_c_prot_r_packet_id,
												p_data_start,
												0);

	if (p_buffer != P_NIL) {
		Buffer_data_size	= data_size;
	} else {
		S_msg_data_size		= (uchar)data_size;
	}

		/* Queue this message */

	mppp_in_sppp_tx_queue ();

	mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_send_code_reject ()
{
	MPPP_DBG_FUNC ("bacp_send_code_reject()")

	uchar	FAR *p_data_start;
	ushort		data_size;

	MPPP_DBG_ENTER ();

	mppp_current_ppp_pid = PPP_PROT_BACP;

		/* Try to reuse the received message */

	if ((p_rcv_msg == P_NIL) ||
		((p_rcv_msg != P_NIL) && (R_msg_lib == OFF))) {

		p_snd_msg	= Alloc_msg ();

	} else {

		p_snd_msg		= p_rcv_msg;
		p_rcv_msg		= P_NIL;


	}

	p_data_start	= S_a_data;


		/* Prepare the PPP frame for sending */

	data_size	= mppp_prepare_packet_to_send (PPP_PROT_BACP,
												MPPP_CP_PCK_CODE_REJ,
												Mppp_c_prot_s_packet_id,
												p_data_start,
												0);

	if (p_buffer != P_NIL) {
		Buffer_data_size	= data_size;
	} else {
		S_msg_data_size		= (uchar)data_size;
	}

		/* Queue this message */

	mppp_in_sppp_tx_queue ();

	mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

void bacp_send_echo_reply ()
{
	MPPP_DBG_FUNC ("bacp_send_echo_reply()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

uchar bacp_is_reject_fatal ()
{
	MPPP_DBG_FUNC ("bacp_is_reject_fatal()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

	return (FALSE);
}

/*-------------------------------------------------------------------------*/

uchar bacp_check_configure_request ()
{
	MPPP_DBG_FUNC ("bacp_check_configure_request()")

	uchar	FAR *p_octet;		/* pointer to next octet to parse */
	uchar	FAR *p_curr_out;	/* pointer to current output octet */
	uchar	FAR *p_curr_opt;	/* pointer to current option */
	uchar	FAR *p_next_opt;	/* pointer to next option */
	uchar	FAR *p_lgth;		/* pointer to the packet length address */
	uchar		opt_lgth;		/* option length */
	uchar		opt_type;		/* option type */
	ulong		opt_val_ulong;	/* option 'ulong' value */
	uchar		opt_retcode;	/* option return code (ACK/NAK/REJ) */
	uchar		pack_retcode;	/* whole packet return code (ACK/NAK/REJ) */
	long		lgth;			/* length left to parse */

	MPPP_DBG_ENTER ();

		/*
			At this stage, the packet header is valid.
			We subtract the header length for the following processing
		*/

		/*
			Set up the pointer to the beginning of the output packet
			and the packet length.
		*/

	p_curr_out	= Mppp_c_prot_p_data;
	lgth		= Mppp_c_prot_data_size;
	p_lgth		= (uchar FAR *)(Mppp_c_prot_p_data - 2);

		/*
			We reset the information about the options we ack'd
		*/

	Sppp_cep_ack_negot	&= (~BACP_NEG_FAVP);

		/*
			Let's go through the BACP options
		*/

	p_next_opt			 = Mppp_c_prot_p_data;
	pack_retcode		 = MPPP_CP_PCK_CONFIG_ACK;	/* default to success */
	Mppp_c_prot_rej_flag = OFF;	/* default to no Reject packet to send */

		/* Loop until no more option to process */

	while (lgth > 0) {

		opt_retcode = MPPP_CP_PCK_CONFIG_ACK;	/* default to success */
		p_curr_opt	= p_octet = p_next_opt;


			/*
				Check the consistency of this option
				1- is there enough data for the option ?
				2- is the option length field >= 2
				3- is the option length > the remaining data length ?
			*/

		if ((lgth < 2) || (p_curr_opt[1] < 2) || (p_curr_opt[1] > lgth)) {

				/*
					This option is bad, the remaining options in the
					packet will be rejected.
				*/

			MPPP_DBG_ERROR ("wrong BACP option length");

			opt_retcode =  MPPP_CP_PCK_CONFIG_REJ;		/* bad option */
			opt_lgth	= lgth; /* reject all the remaining options */
			lgth		= 0;	/* no more loop to run */
			goto opt_terminated;
		}

			/* Get the option type (1 octet) */

		Mppp_get_char (opt_type, p_octet);

			/* Get the option length (1 octet) */

		Mppp_get_char (opt_lgth, p_octet);

			/* Update the remaining length */

		lgth -= opt_lgth;

			/* Set up the pointer to the next option */

		p_next_opt += opt_lgth;

			/* Forward processing according to the option type */

		switch (opt_type) {

				/*=========================
					Favored-Peer (FAVP)
				==========================*/

			case BACP_OPT_FAVP:
				MPPP_DBG_DISPLAY ("received FAVP(");

				if (opt_lgth != BACP_OPT_SZ_LONG) {
					opt_retcode = MPPP_CP_PCK_CONFIG_REJ;
					break;
				}

					/* Get the FAVORED-PEER value (= a Magic Number) */

				Mppp_get_long (opt_val_ulong, p_octet);
				MPPP_DBG_DISPLAY_HEX (opt_val_ulong);
				MPPP_DBG_DISPLAY_STR (")");

					/*
						The peer's magic number must be different from ours
						0 is not a valid magic number.
					*/

				if (opt_val_ulong == 0) {
					opt_retcode = MPPP_CP_PCK_CONFIG_REJ;
					break;
				}

				if (Sppp_cep_peer_ack_magic == opt_val_ulong) {

					opt_retcode = MPPP_CP_PCK_CONFIG_NAK;
					Mppp_dec_ptr (sizeof(long), p_octet);

						/*
							We generate a new value for the
							Config-Nak packet, in order to detect a
							link loopback
						*/

					opt_val_ulong = Mppp_gen_magic ();
					Mppp_put_long (opt_val_ulong, p_octet);
					break;
				}

					/* Save the favored-peer magic number value */

				Mppp_cep_ack_favp = opt_val_ulong;

					/*
						Note that the peer negotiated the FAVORED-PEER
						Magic Number
					*/

				Sppp_cep_ack_negot	|= BACP_NEG_FAVP;
				break;


			default:
				MPPP_DBG_WARNING ("received unknown option(");
				MPPP_DBG_WARNING_INT (opt_type);
				MPPP_DBG_WARNING_STR (")");

				opt_retcode = MPPP_CP_PCK_CONFIG_REJ;
				break;

		}	/* end of switch */


opt_terminated:

			/*
				The "pack_retcode" reminds us the final return code for
				this packet.

				Unacceptable options are processed in the following order:
				1- Config-REJ'd options ONLY
				2- Config-NAK'd options ONLY
				3- Config-ACK'd options ONLY
			*/

		if ((opt_retcode == MPPP_CP_PCK_CONFIG_ACK) &&
			(pack_retcode != MPPP_CP_PCK_CONFIG_ACK)) {

				/*
					The current option is OK,
					but the previous one wasn't
					--> this current option will not be sent to the peer.
				*/

			continue;

		}

		if (opt_retcode == MPPP_CP_PCK_CONFIG_NAK) {

			if (pack_retcode == MPPP_CP_PCK_CONFIG_REJ) {

					/*
						We want to send back this option in Config-NAK,
						but a previous option must be sent in a
						Config-REJ
						--> this current option will not be sent with the REJ
					*/

				continue;
			}

			if (pack_retcode == MPPP_CP_PCK_CONFIG_ACK) {

					/*
						Up to now, all the options were to be ACK'd,
						but the current option is unacceptable, will be
						NAK'd
						--> the global return code for this packet
						is then set to NAK
					*/

				pack_retcode = MPPP_CP_PCK_CONFIG_NAK;

					/*
						Rewind the output pointer to the beginning
						of the packet, because the type of the packet
						has changed (ACK->NAK)
						--> by now, any option previously added to this packet
						will be ignore
					*/

				p_curr_out	= Mppp_c_prot_p_data;

			}

		}

			/*
				The current option must be Config-REJ'd
				If we have not rejected any option before, in this packet,
				then we need to rewind the output pointer to the beginning
				of the packet
			*/

		if ((opt_retcode == MPPP_CP_PCK_CONFIG_REJ) &&
			(pack_retcode != MPPP_CP_PCK_CONFIG_REJ))	{

			pack_retcode = MPPP_CP_PCK_CONFIG_REJ;
			p_curr_out	= Mppp_c_prot_p_data;

				/* Note that we MUST send a Configure-Reject packet */

			Mppp_c_prot_rej_flag	= ON;

		}

				/*
					If the pointer to the current output location is different
					from the pointer to the current option, then the
					current option must be moved up within the
					packet
				*/

		if (p_curr_out != p_curr_opt) {
			Memcpy_far ((char FAR *)p_curr_out, (char FAR *)p_curr_opt, opt_lgth);
		}

			/* We set the pointer to the next output location */

		if (p_curr_out != p_next_opt) {
			Mppp_inc_ptr (opt_lgth, p_curr_out);
		}


	}	/* end of while */


		/*
			Any additional options to be NAK'd, for unsent configuration
			options can be added here.
			This allow us to prompt the peer to include that option in its
			next Configure-Request packet.
		*/

		/* Let's compute the length of the formatted packet */

	Mppp_c_prot_data_size	= (ushort)(p_curr_out - Mppp_c_prot_p_data);

		/* Load the final packet length */

	Mppp_put_short ((Mppp_c_prot_data_size+PPP_PACKET_HEADER_LGTH), p_lgth);

	if (pack_retcode == MPPP_CP_PCK_CONFIG_ACK) {

		MPPP_DBG_LEAVE ();

			/* ACK */

		return (OK);

	} else {

		MPPP_DBG_LEAVE ();

			/* NAK or REJ */

		return (NOK);
	}

}


/*-------------------------------------------------------------------------*/

uchar bacp_check_configure_ack ()
{
	MPPP_DBG_FUNC ("bacp_check_configure_ack()")

	uchar	FAR *p_curr;		/* parsing pointer */
	ulong		opt_val_ulong;	/* option 'ulong' value */
	int			pack_lgth;		/* remaining length in the packet */
	uchar		opt_type;		/* configuration option type */
	uchar		opt_lgth;		/* configuration option length */
	uchar		result;			/* return code */

	MPPP_DBG_ENTER ();

		/*
			The acknowledged Configuration Options MUST NOT be reordered
			or modified in any way.
		*/

	p_curr		= Mppp_c_prot_p_data;
	pack_lgth	= Mppp_c_prot_data_size;


		/* Check the Ack'd options */

	Bacp_opt_ACK_FAVP	(p_curr, Mppp_cep_peer_ack_favp);

		/*
			We must have parsed all the Configuration Options we requested.
		*/

	if (pack_lgth != 0) {
		MPPP_DBG_ERROR ("extra options in Config-Ack");
		result	= NOK;
	} else {
		result	= OK;
	}

		/*
			Update the length of the Configure-Ack packet, since we
			should have removed ML PPP specific options
		*/

	Mppp_c_prot_data_size	= (ushort)(p_curr - Mppp_c_prot_p_data);

	if (result == OK) {

		if (Mppp_c_prot_state == MPPP_CP_STATE_ACK_SENT) {

			if ((Mppp_cep_ack_negot & BACP_NEG_FAVP) && (Mppp_cep_peer_ack_negot & BACP_NEG_FAVP)) {

					/* Set the BACP as enabled */

				Mppp_cep_bacp_enabled	= ON;

				MPPP_DBG_NOTICE ("BACP enabled");

			}

		}

	}

	MPPP_DBG_LEAVE ();

	return (result);

opt_ack_error:

		/*
			We detected an error in an Ack'd option (length or values)
		*/

	MPPP_DBG_ERROR ("bad Ack'd option(");
	MPPP_DBG_ERROR_INT   (opt_type);
	MPPP_DBG_ERROR_STR   (")");

	MPPP_DBG_LEAVE ();

	return (NOK);

}

		/*-------------------------------------*/

uchar bacp_check_configure_nak ()
{
	MPPP_DBG_FUNC ("bacp_check_configure_nak()")

	int			pack_lgth;		/* (signed) remaining length in the packet */
	uchar		opt_type;		/* configuration option type */
	uchar		opt_lgth;		/* configuration option length */
	ulong		opt_val_ulong;	/* option 'ulong' value */
	uchar	FAR *p_curr;		/* parsing pointer */
	uchar	FAR *p_next_opt;	/* pointer to the next option */
	uchar		result;			/* return code */

	MPPP_DBG_ENTER ();


		/*
			The Nak'd Configuration Options MUST NOT be reordered
		*/

	p_curr		= Mppp_c_prot_p_data;
	pack_lgth	= Mppp_c_prot_data_size;

		/* Check the Nak'd options */

	Bacp_opt_NAK_FAVP	(p_curr, Mppp_cep_peer_ack_favp);


		/*
			We must have parsed all the Configuration Options we requested.
			The peer may have added some Options it wants us to add in the
			next Configure-Request.
			We don't support this, it is the responsability of the local
			PPP stack to accept this.
		*/

	while (pack_lgth >= BACP_OPT_SZ_NULL) {

		Mppp_get_char (opt_type, p_curr);	/* get the option type */
		Mppp_get_char (opt_lgth, p_curr);	/* get the option length */

		if ((pack_lgth -= opt_lgth) < 0) {
			goto opt_nak_error;
		}

		p_next_opt	= p_curr + opt_lgth - 2;
		p_curr		= p_next_opt;
	}

		/* At this stage, all the packet must have been processed */

	if (pack_lgth != 0) {
		MPPP_DBG_ERROR ("Config-Nak inconsistent packet length");
		result	= NOK;
	} else {
		result	= OK;
	}

	MPPP_DBG_LEAVE ();
	return (result);

opt_nak_error:

		/*
			We detected an error in an Nak'd option (length or values)
		*/

	MPPP_DBG_ERROR ("error in Nak'd option");
	MPPP_DBG_LEAVE ();
	return (NOK);

}

		/*-------------------------------------*/

uchar bacp_check_configure_rej ()
{
	MPPP_DBG_FUNC ("bacp_check_configure_rej()")

	int			pack_lgth;		/* remaining length in the packet */
	uchar		opt_type;		/* configuration option type */
	uchar		opt_lgth;		/* configuration option length */
	ulong		opt_val_ulong;	/* option 'ulong' value */
	uchar	FAR *p_curr;		/* parsing pointer */
	uchar		result;			/* return code */

	MPPP_DBG_ENTER ();

		/*
			The rejected Configuration Options MUST NOT be reordered
			or modified in any way.
		*/

	p_curr		= Mppp_c_prot_p_data;
	pack_lgth	= Mppp_c_prot_data_size;

		/* Check the Rej'd options */

	Bacp_opt_REJ_FAVP	(p_curr, Mppp_cep_peer_ack_favp);

		/*
			We must have parsed all the Configuration Options we requested.
		*/

	if (pack_lgth != 0) {
		MPPP_DBG_ERROR ("extra options in Config-Rej");
		result	= NOK;
	} else {
		result	= OK;
	}

	MPPP_DBG_LEAVE ();
	return (result);

opt_rej_error:

		/*
			We detected an error in an Ack'd option (length or values)
		*/

	MPPP_DBG_ERROR ("error in Rej'd option");
	MPPP_DBG_LEAVE ();
	return (NOK);

}

		/*-------------------------------------*/

uchar bacp_check_configure_ack_nak_rej ()
{
	MPPP_DBG_FUNC ("bacp_check_configure_ack_nak_rej()")
	uchar	result;

	MPPP_DBG_ENTER ();

	result	= NOK;

	if (Mppp_c_prot_r_packet_id == Mppp_c_prot_s_packet_id) {

			/*
				The packet ID MUST match that of the last transmitted
				Config-Req
			*/

			/* Check Configure-Ack */

		if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_CFG_ACK) {
			result = bacp_check_configure_ack ();
		}

			/* Check Configure-Nak */

		if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_CFG_NAK) {
			result = bacp_check_configure_nak ();
		}

			/* Check Configure-Rej */

		if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_CFG_REJ) {
			result = bacp_check_configure_rej ();
		}

	}

	MPPP_DBG_LEAVE ();

	return (result);

}

/*-------------------------------------------------------------------------*/

#endif	/* MPPP_BAP == ON } */

/* EOF */

