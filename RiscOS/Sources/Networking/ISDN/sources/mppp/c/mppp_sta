
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_sta.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) : state driven automaton
 *		- mppp_state_proc implements the processing of an event according
 *			to the ML PPP automaton state.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"


			/* Additional header files */

#include "mp.h"

#if MPPP_CC == ON
#	include "cc_int.h"
#	include "acu_int.h"
#endif

#if MPPP_BAP == ON
#	include "bacp.h"	/* BACP definitions */
#endif


/*-------------------------------------------------------------------------*/

			/* Local functions prototypes */

#if NEW_FCT_STYLE == ON
	void	mppp_start_bacp		(uchar prev_link_phase);
#else
	void	mppp_start_bacp		();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_state_proc - ML PPP state automaton.

Usage			void mppp_state_proc (void);

Return value :	returns void

common constants and declarations : mppp.h

common objects : current contexts pointers

*--------------------------------------------------------------------------*/

void mppp_state_proc ()
{
	MPPP_DBG_FUNC ("mppp_state_proc()")

	ent_id_t	entity_up;
	ent_id_t	entity_down;
	code_t		code;

#	if MPPP_BAP == ON
		uchar	prev_link_phase;
#	endif

	MPPP_DBG_ENTER ();

	entity_up		=
	entity_down 	= ENT_NIL;

#	if MPPP_BAP == ON
		prev_link_phase	= Sppp_cep_link_phase;
#	endif


	switch (mppp_event_type) {

		case MPPP_EV_TYPE_LCP:

#		if MPPP_BAP == ON	/* { */
			case MPPP_EV_TYPE_BACP:
#		endif	/* } */

				/* Standard Control Protocols we are interested in */

			mppp_c_prot_state_machine ();

#			if MPPP_BAP == ON	/* { */

				mppp_start_bacp (prev_link_phase);

#			endif	/* } */
			break;

		case MPPP_EV_TYPE_CHAP:
		case MPPP_EV_TYPE_PAP:

				/* Call the authentication state machine */

			mppp_auth_state_machine (mppp_current_ppp_pid);

#			if MPPP_BAP == ON	/* { */

				mppp_start_bacp (prev_link_phase);

#			endif	/* } */
			break;

#		if MPPP_BAP == ON	/* { */
			case MPPP_EV_TYPE_BAP:
				break;
#		endif	/* } */

#		if MPPP_CC == ON	/* { */
			case MPPP_EV_TYPE_SIGNALLING:

					/* SIGNALLING event (Call Manager) */

				mppp_state_signalling ();
				break;
#		endif	/* } */

		default:

				/*====================================

					NON-SIGNALLING OTHER MESSAGES
						(Retransmitted as is)

				======================================*/

			switch (mppp_local_sapi) {

#				if MPPP_PH == ON	/* { */
					case MPPP_L_SAPI_PH_B:
					case MPPP_L_SAPI_PH:

							/*
								Set up the ML PPP SAPI to be used for PH
								originated messages
							*/

						R_msg_sapi	= Mppp_sap_data_sapi;
						code		= Mppp_code_from_ph_code (event_id);
						entity_up	= Mppp_sap_data_upper_entity_id;
						break;
#				endif	/* MPPP_PH == ON } */

#				if MPPP_DL == ON	/* { */

					case MPPP_L_SAPI_DL_LAPB:
					case MPPP_L_SAPI_DL_LAPD:
					case MPPP_L_SAPI_DL_V120:

							/*
								Set up the ML PPP SAPI to be used for DL
								originated messages
							*/

						R_msg_sapi	= Mppp_sap_data_sapi;
						code		= Mppp_code_from_dl_code (event_id);
						entity_up	= Mppp_sap_data_upper_entity_id;
						break;

#				endif	/* MPPP_DL == ON } */

#				if MPPP_X25 == ON	/* { */

					case MPPP_L_SAPI_X25:

							/*
								Set up the ML PPP SAPI to be used for X25
								originated messages
							*/

						R_msg_sapi	= Mppp_sap_data_sapi;
						code		= Mppp_code_from_x25_code (event_id);
						entity_up	= Mppp_sap_data_upper_entity_id;
						break;

#				endif	/* MPPP_X25 == ON } */


					/*=======================================

						DATA MESSAGES FROM UPPER ENTITIES

					=========================================*/

				case MPPP_L_SAPI_DATA_SYNC:
				case MPPP_L_SAPI_DATA_ASYN:

						/* Set up the SAPI for PH/DL/X25 messages */

					R_msg_sapi	= Sppp_cep_data_sapi;

#					if MPPP_PH == ON /* { */

						if ((Sppp_cep_data_entity_id == ENT_PH_B) || (Sppp_cep_data_entity_id == ENT_PH)) {
							code	= Mppp_ph_code_from_mppp_code (event_id);
						}

#					endif	/* MPPP_PH == ON } */

#					if MPPP_DL == ON /* { */

						else if ((Sppp_cep_data_entity_id == ENT_DL_B)    ||
									(Sppp_cep_data_entity_id == ENT_DL_D) ||
									(Sppp_cep_data_entity_id == ENT_DL_V120)) {

							code	= Mppp_dl_code_from_mppp_code (event_id);

						}

#					endif	/* MPPP_DL == ON } */

#					if MPPP_X25 == ON /* { */

						else if (Sppp_cep_data_entity_id == ENT_X25) {
							code	= Mppp_x25_code_from_mppp_code (event_id);
						}

#					endif	/* MPPP_X25 == ON } */


					R_msg_nai	= Sppp_cep_data_nai;
					entity_down = Sppp_cep_data_entity_id;
					break;


				case MPPP_L_SAPI_EXT_EVENTS:
				case MPPP_L_SAPI_BAP :
					break;

				default :
					MPPP_DBG_ERROR ("wrong local SAPI value");
					Trap (TRAP_MPPP_ERROR, "mppp_state_proc()");
					break;

			}	/* switch local_sapi */
			break;

	}	/* switch mppp_event_type */

		/* Forward the message (UP or DOWN) */

	if ((entity_down != ENT_NIL) || (entity_up != ENT_NIL)) {

			/* Set up the p_snd_msg pointer for the send routine */

		p_snd_msg	= p_rcv_msg;
		p_rcv_msg	= P_NIL;
		S_msg_code	= code;

		if (entity_down != ENT_NIL) {

				/* Queue this message */

			mppp_in_sppp_tx_queue ();

				/* Apply the ACCM requested by the peer system */

			mppp_snd_data_msg_to_peer (entity_down, Mppp_cep_accm_to_peer);
		}

		if (entity_up != ENT_NIL) {

			if (code == MPPP_DA_IN)  {

					/* Apply the ACCM requested by the local PPP stack */

				mppp_snd_data_msg_to_local (entity_up, Mppp_cep_accm_to_local);

			}
		}

	}

	MPPP_DBG_LEAVE ();
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_state_signalling - Signalling state machine.

Usage			void mppp_state_signalling (void);

Return value :	returns void

common constants and declarations : mppp.h

common objects : current contexts pointers

*--------------------------------------------------------------------------*/

#if MPPP_CC == ON	/* { */

	void mppp_state_signalling ()
	{
		MPPP_DBG_FUNC ("mppp_state_signalling()")

		uchar		FAR *p_data;			/* pointer to data area */
		ent_id_t		entity_to;			/* destination entity */
		code_t			code;				/* message code to be sent */
		code_t			ext_event_code;		/* Add/Drop Link indiction/confirmation event */
		uchar			send_drop_in_co;	/* sending of Link Drop indication/confirmation */
		uchar			drop_origin;		/* drop origination */
		uchar			service_id;			/* Call Control service ID */
		add_t			channel_id;			/* Call Control channel ID */
		uchar			ph_rate;			/* Layer 1 information: data rate */

		MPPP_DBG_ENTER ();

		entity_to		= ENT_NIL;
		send_drop_in_co	= OFF;
		ext_event_code	= EV_NIL;
		service_id		= 0;
		channel_id		= ADD_NIL;
		ph_rate			= 0;

		switch (mppp_local_sapi) {

				/*====================================================

					Signalling messages from the Call Manager entity

				=====================================================*/

			case MPPP_L_SAPI_ACU_MULTI_CHAN :
			case MPPP_L_SAPI_ACU :
			case MPPP_L_SAPI_ACU_MGT:

				if (Is_sppp_first_in_bundle ()) {

						/* Set up the ML PPP SAPI to be used for CC originated messages */

					if (mppp_local_sapi == MPPP_L_SAPI_ACU_MGT) {
						R_msg_sapi		= Mppp_sap_sig_sapi_mgt;
					} else {
						R_msg_sapi		= Mppp_sap_sig_sapi;
					}

					code			= Mppp_code_from_cc_code (event_id);
					entity_to		= Mppp_sap_sig_upper_entity_id;
					R_msg_conn_id	= Mppp_cep_ces;			/* Always */

				}

					/* Set up the pointer to Call Manager primitive data */

				p_data		= R_a_data;

				switch (event_id) {

					case ACU_CONN_IN :

							/* Save the channel ID (could be the conn ID also) */

						Sppp_cep_data_chani = Acu_conn_in_data_chani;

						if ((Sppp_cep_data_entity_id == ENT_PH_B) || (Sppp_cep_data_entity_id == ENT_PH)) {
							Sppp_cep_data_conn_id = Sppp_cep_data_chani;
						}

							/* Reset the link phase */

						Set_sppp_cep_link_phase (SPPP_LINK_PHASE_DEAD);

							/* Increment the number of used SL PPPs */

						Mppp_cep_used_sppp_nb++;


							/* Set the connection state */

						Sppp_set_cc_state (MPPP_CC_STATE_CALL_IN);

						MPPP_DBG_NOTICE ("ACU_CONN_IN(");
						MPPP_DBG_NOTICE_INT (Sppp_cep_data_chani);
						MPPP_DBG_NOTICE_STR (")");

							/*
								When we receive a call indication on NOT-first
								member link, we send back a response to Call Control.
							*/

						if (! Is_sppp_first_in_bundle ()) {

							p_data		= R_a_data;

							service_id	= Acu_conn_in_service;
							channel_id	= Acu_conn_in_data_chani;
							ph_rate		= Acu_conn_in_ph_rate;

							code		= ACU_CONN_RS;

								/* Reset the primitive data area */

							Memset_far ((void FAR *)p_data, 0, Acu_conn_rs_size);

							Acu_conn_rs_service			= service_id;
							Acu_conn_rs_data_chani		= channel_id;
							Acu_conn_rs_ph_rate			= ph_rate;
							Acu_conn_rs_uui_size		= 0;
							Acu_conn_rs_facility_size 	= 0;

							if (p_buffer != P_NIL) {
								Buffer_data_size	= Acu_conn_rs_size;
							} else {
								R_msg_data_size		= Acu_conn_rs_size;
							}

								/* Update the call state */

							Sppp_set_cc_state (MPPP_CC_STATE_CALL_RS);

								/* Set the CC entity ID */

							entity_to	= Sppp_cep_cc_entity_id;
						}
						break;

					case ACU_ALERT_IN:
					case ACU_PROGRESS_IN:

							/* Save the information to be used for data transfer */

						if (event_id == ACU_ALERT_IN) {
							Sppp_cep_data_chani = Acu_alert_in_data_chani;
						} else {
							Sppp_cep_data_chani = Acu_progress_in_data_chani;
						}

						if ((Sppp_cep_data_entity_id == ENT_PH_B) || (Sppp_cep_data_entity_id == ENT_PH)) {
							Sppp_cep_data_conn_id = Sppp_cep_data_chani;
						}
						break;

					case ACU_CONN_CO:

							/* Save the information to be used for data transfer */

						Sppp_cep_data_chani = Acu_conn_co_data_chani;

						if ((Sppp_cep_data_entity_id == ENT_PH_B) || (Sppp_cep_data_entity_id == ENT_PH)) {
							Sppp_cep_data_conn_id = Sppp_cep_data_chani;
						}

						if (Is_sppp_first_in_bundle ()) {

								/* The bundle is active */

							Mppp_cep_sig_state	= MPPP_ESTABLISHED;

						}

						Sppp_set_cc_state (MPPP_CC_STATE_ACTIVE);

						MPPP_DBG_NOTICE ("ACU_CONN_CO(");
						MPPP_DBG_NOTICE_INT (Sppp_cep_data_chani);
						MPPP_DBG_NOTICE_STR (")");
						break;

					case ACU_CLEAR_IN:

							/* Update the call state */

						Sppp_set_cc_state (MPPP_CC_STATE_DISC_IN);

						MPPP_DBG_NOTICE ("ACU_CLEAR_IN(");
						MPPP_DBG_NOTICE_INT (Sppp_cep_data_chani);
						MPPP_DBG_NOTICE_STR (")");

						if (Is_sppp_first_in_bundle ()) {

								/*
									The 1st member link call is being cleared.
									We clear the other connections.
								*/

							mppp_access_next_sppp_in_bundle ();

							for ( ;p_sppp_cep != P_NIL;mppp_access_next_sppp_in_bundle ()) {

								p_mppp_c_prot = Sppp_cep_p_lcp_info;

								if ((Sppp_cep_cc_state != MPPP_CC_STATE_NULL) &&
									(Sppp_cep_cc_state != MPPP_CC_STATE_DISC_IN) &&
									(Sppp_cep_cc_state != MPPP_CC_STATE_DISC_RQ)) {

									if (mppp_clear_cc_call_rq () == OK) {

											/* Done with this call */

										MPPP_DBG_NOTICE ("call clear requested");

									} else {

										MPPP_DBG_ERROR ("failed to clear the call");

									}

								}

							}

								/* Restore the initial member link context */

							mppp_access_first_sppp_in_bundle ();

							p_mppp_c_prot	= Sppp_cep_p_lcp_info;
							p_buffer		= R_msg_p_buffer;

						} else {

							p_data		= R_a_data;

							code		= ACU_CLEAR_RS;

								/* Reset the primitive data area */

							Memset_far ((void FAR *)p_data, 0, Acu_clear_rs_size);

							if (p_buffer != P_NIL) {
								Buffer_data_size	= Acu_clear_rs_size;
							} else {
								R_msg_data_size		= Acu_clear_rs_size;
							}

								/* Update the call state */

							Sppp_set_cc_state (MPPP_CC_STATE_DISC_RS);

								/* Set the CC entity ID */

							entity_to	= Sppp_cep_cc_entity_id;

						}

						if ((send_drop_in_co == ON) && (ext_event_code != EV_NIL)) {


								/*
									Send the Link Drop message to the
									upper entity
								*/

							mppp_snd_ext_drop_link_in_co (ext_event_code,
															MPPP_CAUSE_DISC_NORM,
															MPPP_DIAG_NO_INFO,
															MPPP_ORIGIN_PEER);

						}
						break;


					case ACU_CLEAR_CO:

						MPPP_DBG_NOTICE ("ACU_CLEAR_CO(");
						MPPP_DBG_NOTICE_INT (Sppp_cep_data_chani);
						MPPP_DBG_NOTICE_STR (")");

							/* Reset the member link Tx queue */

						mppp_discard_sppp_tx_queue ();

							/* Reset the connection ID to the Call Manager */

						Sppp_cep_cc_conn_id = ADD_NIL;
						Sppp_cep_data_chani = ADD_NIL;

							/* Reset the link phase */

						Set_sppp_cep_link_phase (SPPP_LINK_PHASE_DEAD);

							/* Stop the LCP Restart timer */

						Mppp_c_prot_stop_timer (MPPP_LCP_TI_X_RESTART);

						if ((Sppp_cep_data_entity_id == ENT_PH_B) ||
							(Sppp_cep_data_entity_id == ENT_PH)) {

							Sppp_cep_data_conn_id = ADD_NIL;

						}

							/* Update the number of used SL PPPs */

						if (Sppp_cep_cc_state != MPPP_CC_STATE_NULL) {

							Mppp_cep_used_sppp_nb--;

								/* Send Drop event */

							if (! Is_sppp_first_in_bundle ()) {

								if (Sppp_cep_link_drop_rq_flag == ON) {

									ext_event_code	= MPPP_EXT_DROP_LINK_CO;

								} else if (Sppp_cep_cc_state == MPPP_CC_STATE_ACTIVE) {

									ext_event_code	= MPPP_EXT_DROP_LINK_IN;

								}

							}

							if (ext_event_code != EV_NIL) {

								send_drop_in_co	= ON;

							}

						}


							/*
								If the last member link connection is cleared,
								we must free the saved ACU_CONN_RQ message.
							*/

						if (Mppp_cep_used_sppp_nb == 0) {

							MPPP_DBG_NOTICE ("last call cleared");

							Free_msg (Mppp_cep_p_msg_conn_rq);

							Mppp_cep_p_msg_conn_rq				= P_NIL;
							Mppp_cep_p_first_other_called_nb	=
							Mppp_cep_p_current_other_called_nb	= P_NIL;

							Mppp_cep_sig_state	=
							Mppp_cep_data_state	= MPPP_RELEASED;

								/* Reset the bundle's MP counters */

							mp_reinit_ctx ();

								/* Discard CHAP queue */

							mppp_reset_chap_info ();

								/* Set the MP as NOT enabled and NOT rejected */

							Mppp_cep_mp_enabled		=
							Mppp_cep_mp_rejected	= OFF;

#							if MPPP_BAP == ON
								Mppp_cep_bacp_enabled	=
								Mppp_cep_bacp_rejected	= OFF;
#							endif

						}

							/* Reset the connection ID */

						Sppp_cep_cc_conn_id = ADD_NIL;

							/* Update the call state */

						Sppp_set_cc_state (MPPP_CC_STATE_NULL);

						if (Is_sppp_first_in_bundle ()) {

							Mppp_cep_sig_state	=
							Mppp_cep_data_state	= MPPP_RELEASED;

								/*
									The 1st member link call is cleared.
									We clear the other connections.
								*/

							mppp_access_next_sppp_in_bundle ();

							for ( ;p_sppp_cep != P_NIL;mppp_access_next_sppp_in_bundle ()) {

								p_mppp_c_prot = Sppp_cep_p_lcp_info;

								if ((Sppp_cep_cc_state != MPPP_CC_STATE_NULL) &&
									(Sppp_cep_cc_state != MPPP_CC_STATE_DISC_IN) &&
									(Sppp_cep_cc_state != MPPP_CC_STATE_DISC_RQ)) {

									if (mppp_clear_cc_call_rq () == OK) {

											/* Done with this call */

										MPPP_DBG_NOTICE ("call clear requested");

									} else {

										MPPP_DBG_ERROR ("failed to clear the call");

									}

								}

							}

								/* Restore the initial member link context */

							mppp_access_first_sppp_in_bundle ();
							p_mppp_c_prot = Sppp_cep_p_lcp_info;

						}

							/* Send Link Drop event */

						if ((send_drop_in_co == ON) && (ext_event_code != EV_NIL)) {

								/*
									Send the Link Drop message to the
									upper entity
								*/

							if (ext_event_code == MPPP_EXT_DROP_LINK_CO) {
								drop_origin	= MPPP_ORIGIN_USER;
							} else {
								drop_origin	= MPPP_ORIGIN_PEER;
							}
							mppp_snd_ext_drop_link_in_co (ext_event_code,
															MPPP_CAUSE_DISC_NORM,
															MPPP_DIAG_NO_INFO,
															drop_origin);


						}
						break;


					default:  	/* Other ACU messages */
						break;


				}
				break;


				/*==============================================

					Signalling messages from upper entities

				===============================================*/

			case MPPP_L_SAPI_SIG:

					/* Set up the Call Manager SAPI/CONN_ID to be used */

				R_msg_sapi		= Sppp_cep_cc_sapi;
				code			= Mppp_cc_code_from_mppp_code(event_id);
				entity_to		= Sppp_cep_cc_entity_id;
				R_msg_conn_id	= (event_id == MPPP_ACU_CONN_RQ) ? Mppp_cep_used_sppp_nb : Sppp_cep_cc_conn_id;

					/* Set up the pointer to Call Manager primitive data */

				p_data		= R_a_data;

				switch (event_id) {

					case MPPP_ACU_CONN_RQ:

						MPPP_DBG_NOTICE ("MPPP_ACU_CONN_RQ");

						if (Sppp_cep_cc_state == MPPP_CC_STATE_NULL) {

								/* Set the bundle's signalling state */

							Mppp_cep_sig_state		= MPPP_AWAITING_EST;

								/* Reset the number of used/opened SPPPs */

							Mppp_cep_used_sppp_nb	=
							Mppp_cep_opened_sppp_nb	= 0;

								/* Reset the bundle's CP options we ack'd */

							Mppp_cep_reset_ack_cp_opt ();

								/* Reset the bundle's CP options the peer ack'd */

							Mppp_cep_reset_peer_ack_cp_opt ();

								/* Reset the ML-PPP flags related to use of MP, SSNHF, EDO */

							mppp_reset_mp_flags ();

								/* Reset the link phase */

							Set_sppp_cep_link_phase (SPPP_LINK_PHASE_DEAD);

								/* Reset the total bandwidth value */

							Mppp_cep_sppp_total_link_speed = 0;

								/* We assume that an OPEN event has occured */

							Mppp_cep_open_rq_flag	= ON;
							Mppp_cep_close_rq_flag	= OFF;

								/*
									We keep a copy of this message & buffer
									for the next ACU_CONN_RQ message(s) we are
									going to send, to establish additional
									links in the bundle.
								*/

#							if ASSERT == ON

								if (Mppp_cep_p_msg_conn_rq != P_NIL) {

									MPPP_DBG_ERROR ("saved conn_rq should be P_NIL");

									Trap (TRAP_MPPP_P_MSG, "mppp_sate_signalling");
								}

#							endif

								/* Save all the message and buffer information */

							if (mppp_save_conn_rq_info (p_rcv_msg) != OK) {

								MPPP_DBG_ERROR ("failed to save conn_rq info");

							}

								/* Set the connection ID to be sent */

							Sppp_cep_cc_conn_id = Mppp_cep_used_sppp_nb;

								/* Increment the number of used SL PPPs */

							Mppp_cep_used_sppp_nb++;


								/* Update the call state */

							Sppp_set_cc_state (MPPP_CC_STATE_CALL_INIT);

								/*
									If the AUTOMATIC OPEN event has been set for
									this bundle, then the LCP should be in the
									STARTING state.
								*/

							p_mppp_c_prot = Sppp_cep_p_lcp_info;

							if (Mppp_cep_auto_open_flag == ON) {
								Set_c_prot_state_starting;
							}

						} else {

							MPPP_DBG_NOTICE ("unexpected CONN_RQ");

							entity_to	= ENT_NIL;

						}
						break;

					case MPPP_ACU_CONN_RS:

						MPPP_DBG_NOTICE ("MPPP_ACU_CONN_RS");

						if (Sppp_cep_cc_state == MPPP_CC_STATE_CALL_IN) {

								/* Update the call state */

							Sppp_set_cc_state (MPPP_CC_STATE_CALL_RS);

						} else {

							MPPP_DBG_NOTICE ("unexpected CONN_RS");

							entity_to	= ENT_NIL;

						}
						break;

					case MPPP_ACU_CLEAR_RQ:

						MPPP_DBG_NOTICE ("MPPP_ACU_CLEAR_RQ");

						if (Sppp_cep_cc_state == MPPP_CC_STATE_ACTIVE) {

								/*
									All the member links are going to
									be dropped

									Discard the Transmit queue
								*/

							mp_discard_tx_queue ();

							mppp_reset_chap_info ();

						}

						if ((Sppp_cep_cc_state != MPPP_CC_STATE_DISC_IN) &&
							(Sppp_cep_cc_state != MPPP_CC_STATE_DISC_RQ) &&
							(Sppp_cep_cc_state != MPPP_CC_STATE_NULL)) {

							Mppp_cep_sig_state	= MPPP_AWAITING_REL;

								/* We assume that a CLOSE event has occured */

							Mppp_cep_close_rq_flag	= ON;

								/* Update the call state */

							Sppp_set_cc_state (MPPP_CC_STATE_DISC_RQ);

								/*
									The 1st member link call is being cleared.
									We clear the other connections.
								*/

							mppp_access_next_sppp_in_bundle ();

							for ( ;p_sppp_cep != P_NIL;mppp_access_next_sppp_in_bundle ()) {

								p_mppp_c_prot = Sppp_cep_p_lcp_info;

								if ((Sppp_cep_cc_state != MPPP_CC_STATE_NULL) &&
									(Sppp_cep_cc_state != MPPP_CC_STATE_DISC_IN)) {

									if (mppp_clear_cc_call_rq () == OK) {

											/* Done with this call */

										MPPP_DBG_NOTICE ("call clear requested");

									} else {

										MPPP_DBG_ERROR ("failed to clear the call");

									}

								}

							}

								/* Restore the initial member link context */

							mppp_access_first_sppp_in_bundle ();
							p_mppp_c_prot = Sppp_cep_p_lcp_info;

						} else {

							MPPP_DBG_NOTICE ("unexpected CLEAR_RQ");

							entity_to	= ENT_NIL;

						}
						break;

					case MPPP_ACU_CLEAR_RS:

						MPPP_DBG_NOTICE ("MPPP_ACU_CLEAR_RS");

						if (Sppp_cep_cc_state == MPPP_CC_STATE_DISC_IN) {

								/* Update the call state */

							Sppp_set_cc_state (MPPP_CC_STATE_DISC_RS);

						} else {

							MPPP_DBG_NOTICE ("unexpected CLEAR_RS");

							entity_to	= ENT_NIL;

						}
						break;

					default:
						MPPP_DBG_NOTICE ("other MPPP_ACU_xxx event(");
						MPPP_DBG_NOTICE_BYTE (event_id);
						MPPP_DBG_NOTICE_STR (")");
						break;

				}
				break;


				/*========================

					Signalling Management

				==========================*/

			case MPPP_L_SAPI_SIG_MGT:

					/* Set up the Call Manager SAPI/CONN_ID to be used */

				R_msg_sapi		= Sppp_cep_cc_sapi_mgt;
				code			= Mppp_cc_code_from_mppp_code(event_id);
				entity_to		= Sppp_cep_cc_entity_id;
				break;

			default:

				MPPP_DBG_ERROR ("unknown local SAPI");

				Trap (TRAP_MPPP_ERROR, "mppp_state_signalling");
				break;


		}

		if (entity_to == ENT_NIL) {

			MPPP_DBG_WARNING ("no entity_to. Msg not forwarded");

		} else {

				/* Set up the p_snd_msg pointer for the send routine */

			p_snd_msg	= p_rcv_msg;
			p_rcv_msg	= P_NIL;

			mppp_snd (entity_to, code);

		}

		MPPP_DBG_LEAVE ();
	}

#endif	/* MPPP_CC == ON } */


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_auth_state_machine - Authentication state machine.

Usage			void mppp_auth_state_machine (prot_id);
					ushort prot_id;

Return value :	returns void

common constants and declarations : mppp.h

common objects : current contexts pointers

*--------------------------------------------------------------------------*/

void mppp_auth_state_machine (prot_id)
	ushort	prot_id;
{
	MPPP_DBG_FUNC ("mppp_auth_state_machine()")

	uchar		pap_success;
	uchar		was_opened;
	uchar	FAR *p_curr;
	ushort		lgth;
	code_t		initial_event_id;
	uchar		send_to_user;

	MPPP_DBG_ENTER ();

	pap_success			= FALSE;
	initial_event_id	= EV_NIL;

	p_curr				= R_a_data;
	lgth				= R_data_size;

	send_to_user 		= ON;

		/* Display the TX/RX (4th parameter: ON->Tx OFF->Rx) packet data */

	MPPP_DBG_PACKETS (p_curr, lgth, 0, (Mppp_cep_msg_direction == MPPP_FROM_PEER) ? OFF : ON);

	if (p_sppp_auth == P_NIL) {

		MPPP_DBG_ERROR ("p_sppp_auth is P_NIL");

		Trap (TRAP_MPPP_NO_CONTEXT, "mppp_auth_state_machine");

		MPPP_DBG_LEAVE ();
		return;
	}

		/*
			Set the OPENED state indicator which is used to detect any
			change in the bundle's bandwidth
		*/

	was_opened	= (Sppp_cep_link_phase == SPPP_LINK_PHASE_NETWORK) ? TRUE : FALSE;

		/*
			Process the event here, and update the protocol state.
		*/

	switch (prot_id) {

		case PPP_PROT_PAP:

			if (Is_sppp_first_in_bundle ()) {

				if ((mppp_c_prot_event_id == MPPP_CP_EV_RCV_PAP_AUTH_RQ) &&
					(Mppp_cep_msg_direction == MPPP_FROM_LOCAL_USER)) {

						/*
							We copy the Username/Password values for PAP replay.
							The packet header has been checked before.
						*/

					p_curr	= Sppp_auth_p_data;
					lgth	= Sppp_auth_data_size;

					Mppp_get_char (Mppp_cep_username_lgth, p_curr);
					Memcpy_far ((char FAR *)Mppp_cep_p_username, (char FAR *)p_curr, Mppp_cep_username_lgth);
					p_curr	+= Mppp_cep_username_lgth;

					Mppp_get_char (Mppp_cep_password_lgth, p_curr);
					Memcpy_far ((char FAR *)Mppp_cep_p_password, (char FAR *)p_curr, Mppp_cep_password_lgth);
					p_curr	+= Mppp_cep_password_lgth;

				}

				if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_PAP_AUTH_ACK) {

					Set_auth_state_success;

						/* Save the initial event Id */

					initial_event_id	=  mppp_c_prot_event_id;

						/* Update the link phase */

					Set_sppp_cep_link_phase (SPPP_LINK_PHASE_NETWORK);

add_link_now:

						/* Reset bundle's counters */

					mp_reinit_ctx ();

					if ((Mppp_cep_mp_enabled == ON) &&
						(Mppp_cep_used_sppp_nb < Mppp_cep_min_sppp_nb)) {

							/*
								The 1st member link is just OPENED
								Try another connection now.
							*/

						mppp_access_next_sppp_in_bundle ();

						for ( ;((p_sppp_cep != P_NIL) && (Mppp_cep_used_sppp_nb < Mppp_cep_min_sppp_nb));
								mppp_access_next_sppp_in_bundle ()) {

							p_mppp_c_prot = Sppp_cep_p_lcp_info;

#							if MPPP_CC == ON /* { */

								if (Sppp_cep_cc_entity_id != ENT_NIL) {

									if (Sppp_cep_cc_state == MPPP_CC_STATE_NULL) {

											/* Make another call */

										if (mppp_make_cc_call_rq () == OK) {

												/* Signal the OPEN event to the state machine */

											mppp_event_type = MPPP_EV_TYPE_LCP;
											mppp_c_prot_event_id = MPPP_CP_EV_OPEN;

											mppp_c_prot_state_machine ();

										}

									}

								} else

#							endif	/* MPPP_CC == ON } */

								/* No additional code here */

							{

									/*
										No call to make
										Signal the OPEN event to
										the state machine
									*/

								Set_c_prot_state_initial;

									/* Reset the link Phase */

								Set_sppp_cep_link_phase (SPPP_LINK_PHASE_DEAD);

								mppp_c_prot_event_id = MPPP_CP_EV_OPEN;

								mppp_c_prot_state_machine ();

							}

						}

							/* Restore the initial member link context */

						mppp_access_first_sppp_in_bundle ();
						p_mppp_c_prot = Sppp_cep_p_lcp_info;

							/* Restore the initial event ID */

						mppp_c_prot_event_id	= initial_event_id;

					}

				} else if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_PAP_AUTH_NAK) {

					Set_auth_state_failure;

						/*
							Update the link phase. The peer will send us a
							LCP Terminate-Request packet.
						*/

					Set_sppp_cep_link_phase (SPPP_LINK_PHASE_TERMINATION);

				} else if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_PAP_AUTH_RQ) {

					if (Mppp_cep_msg_direction == MPPP_FROM_PEER) {
						Set_auth_state_request_received;
					} else {
						Set_auth_state_request_sent;
					}

				}

			} else {

					/* Not the 1st member link */

				if (mppp_c_prot_event_id == MPPP_CP_EV_TIMEOUT) {

					if (Sppp_auth_count > 0) {

							/* Retransmit the Authenticate-Request packet */

						MPPP_DBG_NOTICE ("sent PAP Auth-Req (cause Timeout)");
						mppp_c_prot_send_pap_auth_request ();

					} else {
			
						MPPP_DBG_WARNING ("reached PAP Auth-Req max count");
						
							/*
								No more packet to transmit
								--> Signal the CLOSE event to
								terminate the Link
							*/

						p_mppp_c_prot			= Sppp_cep_p_lcp_info;
						mppp_current_ppp_pid	= PPP_PROT_LCP;
						mppp_c_prot_event_id	= MPPP_CP_EV_CLOSE;
						mppp_event_type 		= MPPP_EV_TYPE_LCP;

							/* Call the Control Protocol state machine for LCP */

						mppp_c_prot_state_machine ();

						MPPP_DBG_LEAVE ();

						return;
					}

						/* Leave this case */

					break;
					
				}

					/* Ack/Nak from the peer, and not the 1st member link */

				if (Mppp_cep_msg_direction == MPPP_FROM_PEER) {

					pap_success	= (mppp_c_prot_event_id == MPPP_CP_EV_RCV_PAP_AUTH_ACK);

					if ((mppp_c_prot_event_id == MPPP_CP_EV_RCV_PAP_AUTH_ACK) ||
						(mppp_c_prot_event_id == MPPP_CP_EV_RCV_PAP_AUTH_NAK)) {

						if ((Sppp_auth_state == MPPP_CP_STATE_AUTH_SENT) &&
							(Sppp_auth_s_packet_id == Sppp_auth_r_packet_id)) {

								/* Stop the Retransmit Timer */

							Sppp_auth_stop_timer (MPPP_PAP_TI_X_RESTART);

							if (pap_success) {

								MPPP_DBG_NOTICE ("received PAP Auth-Ack from peer");

								Set_auth_state_success;

									/* Update the link phase */

								Set_sppp_cep_link_phase (SPPP_LINK_PHASE_NETWORK);

							} else {

								MPPP_DBG_NOTICE ("received PAP Auth-Nak from peer");

								Set_auth_state_failure;

									/*
										Update the link phase. The peer will send us a
										LCP Terminate-Request packet.
									*/

								Set_sppp_cep_link_phase (SPPP_LINK_PHASE_TERMINATION);

									/*
										Send an error indication to the user entity
									*/

								mppp_snd_error_in (MPPP_CAUSE_AUTH_FAILED,
												MPPP_DIAG_NO_INFO, Mppp_sap_data_sapi);

							}


						}

					} else {

						if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_PAP_AUTH_RQ) {

								/*
									Received Authenticate-Request  from the peer,
									---> We are the authenticator.
								*/


								/*$$$ FIXME --- We are the authenticator */
						}
						
					}

				}

			}
			break;

		case PPP_PROT_CHAP:

				/*
					$$$ FIXME --- Bypass all the packets,
					but update states.

					$$$ FIXME - We process Client Side Events ONLY
				*/

			if (Mppp_cep_msg_direction == MPPP_FROM_PEER) {

				if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_CHAP_SUCCESS) {

					MPPP_DBG_NOTICE ("received CHAP Success from peer");

					Set_auth_state_success;

						/* Update the link phase */

					if (Sppp_cep_link_phase == SPPP_LINK_PHASE_AUTHENTICATE) {

						Set_sppp_cep_link_phase (SPPP_LINK_PHASE_NETWORK);

							/*
								This is the first time the first member link
								receive CHAP Success
							*/

						if (Is_sppp_first_in_bundle ()) {

								/* Save the initial event Id */

							initial_event_id	=  mppp_c_prot_event_id;

							goto add_link_now;

						}

					}

				} else if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_CHAP_FAILURE) {

					MPPP_DBG_NOTICE ("received CHAP Failure from peer");

					Set_auth_state_failure;

						/*
							Update the link phase. The peer will send us a
							LCP Terminate-Request packet.
						*/

					Set_sppp_cep_link_phase (SPPP_LINK_PHASE_TERMINATION);

						/*
							Send an error indication to the user entity
						*/

					mppp_snd_error_in (MPPP_CAUSE_AUTH_FAILED,
									MPPP_DIAG_NO_INFO, Mppp_sap_data_sapi);

				} else if (mppp_c_prot_event_id == MPPP_CP_EV_RCV_CHAP_CHALLENGE) {

						/* Set the Authenticate state */

					Set_auth_state_challenge_received;

						/*
							Copy the link reference in the message.
							It will be retrieved when this message will be
							sent to the local PPP.
						*/

					R_msg_inf0	= Sppp_cep_ref;

					if ((Mppp_cep_chap_state == MPPP_CP_STATE_CHALLENGE_RECEIVED) &&
						(Sppp_cep_ref != Mppp_cep_chap_link_ref)) {

							/*
								If we receive a CHAP Challenge, while
								waiting for a CHAP Response from the Local
								PPP, then we stop the processing of the
								CHAP Challenge now.

							*/

						mppp_in_chap_queue ();

						send_to_user = OFF;

					} else {


							/* Update the bundle's CHAP state */

						Mppp_cep_chap_state		= MPPP_CP_STATE_CHALLENGE_RECEIVED;
						Mppp_cep_chap_link_ref	= R_msg_inf0;


					}

				}


			}
			break;

	}

		/* Check if the bundle bandwidth must be updated */

	mppp_c_prot_update_bandwidth (was_opened);

		/* Forward the PAP/CHAP packet */

	if (Mppp_cep_msg_direction == MPPP_FROM_LOCAL_USER) {

		MPPP_DBG_NOTICE ("PAP/CHAP packet forwarded down");

		p_snd_msg	= p_rcv_msg;
		p_rcv_msg	= P_NIL;

		S_msg_nai	= Sppp_cep_data_nai;
		S_msg_sapi	= Sppp_cep_data_sapi;
		S_msg_add	= Sppp_cep_data_conn_id;

			/* Queue this message */

		mppp_in_sppp_tx_queue ();

		mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

			/*
				When we receive a CHAP Response, we check the Challenge queue,
				and we forward up the next waiting Challenge message.
			*/

		if ((mppp_current_ppp_pid == PPP_PROT_CHAP) &&
			(mppp_c_prot_event_id == MPPP_CP_EV_RCV_CHAP_RESPONSE)) {

				/* Update the bundle's CHAP state */

			Mppp_cep_chap_state		= MPPP_CP_STATE_RESPONSE_SENT;

				/*$$$
					We should expect retransmissions of Response packet
					Mppp_cep_chap_link_ref	= SPPP_REF_NIL;
				*/

			if (mppp_out_chap_queue () == OK) {

				Mppp_cep_chap_state		= MPPP_CP_STATE_CHALLENGE_RECEIVED;
				Mppp_cep_chap_link_ref	= R_msg_inf0;

				send_to_user = ON;
				goto send_msg_up;

			}


		}

	} else if (Mppp_cep_msg_direction == MPPP_FROM_PEER) {

		if ((Is_sppp_first_in_bundle ()) || (mppp_current_ppp_pid == PPP_PROT_CHAP)) {

send_msg_up:

			if (send_to_user == ON) {

				MPPP_DBG_NOTICE ("PAP/CHAP packet forwarded up");

					/* We bypass all the CHAP packets to the local user */

				p_snd_msg	= p_rcv_msg;
				p_rcv_msg	= P_NIL;

					/* Forward the message to the upper entity */

				mppp_snd_data_msg_to_local (Mppp_sap_data_upper_entity_id, Mppp_cep_accm_to_local);

			}

		}

	}

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/


#if MPPP_BAP == ON	/* { */

	void mppp_start_bacp (prev_link_phase)
		uchar	prev_link_phase;
	{

		MPPP_DBG_FUNC ("mppp_start_bacp")

		MPPP_DBG_ENTER ();

		if ((Mppp_cep_bacp_usage == ON) &&
			(Is_sppp_first_in_bundle ()) &&
			(prev_link_phase != SPPP_LINK_PHASE_NETWORK) &&
			(Sppp_cep_link_phase == SPPP_LINK_PHASE_NETWORK)) {

				/*
					If the Bandwith Allocation Protocol
					can be negotiated, it's time to send
					BACP Configure-Request Packet.

					BACP is negotiated once per Multilink bundle.
				*/

				/*
					Set up the pointer to the BACP information
					context
				*/

			p_mppp_c_prot = Mppp_cep_p_bacp_info;

				/*
					We signal the following events in turn:
					CLOSE
					OPEN
					UP
					for a clean start of the BACP
				*/

			mppp_event_type 		= MPPP_EV_TYPE_BACP;
			mppp_c_prot_event_id	= MPPP_CP_EV_CLOSE;

			for ( ; ; ) {

				mppp_c_prot_state_machine ();

				if (mppp_c_prot_event_id == MPPP_CP_EV_CLOSE) {

					mppp_c_prot_event_id = MPPP_CP_EV_OPEN;

				} else if (mppp_c_prot_event_id == MPPP_CP_EV_OPEN) {

					mppp_c_prot_event_id = MPPP_CP_EV_UP;

				} else {

					break;

				}

			}

		}

		MPPP_DBG_LEAVE ();
	}

#endif	/* } */


/*--------------------------------------------------------------------------*/

/* EOF */


