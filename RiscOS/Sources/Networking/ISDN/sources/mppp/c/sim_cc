
/*-----------------------------------------------------------------------
 *						 M O D U L E   H E A D E R
 *
 * filename - sim_cc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      build_sdu_cc_to_mppp - implements the building of CC SDU.
 *
 *		pr_cc_to_user_code - implements the printing of the CC IN/CO primitive
 *       	 			   code.
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_SIM_BUILDER == ON	/* { */
#	include "simul.h"
#	include "cc_int.h"
#	include "acu_int.h"

/*--------------------------------------------------------------------------*/

				/* COMMON VARIABLES AND EXTERNAL */
				/*-------------------------------*/

uchar	g_service_id [2]= {' '};
uchar	g_acu_ret_code [2]= {' '};
uint	g_b_chan_id;
uint	g_net_cause;
uint	g_acu_charging = 0;

uchar	g_calling_nb [80];

extern	CONST struct code_text t_mppp_cc_prim[];

CONST struct code_text t_mppp_acu_ret_code [] = {

	{ACURC_BUSY,					"ACURC_BUSY"},
	{ACURC_NOPROCEED,				"ACURC_NOPROCEED"},
	{ACURC_NOANSWER,				"RC_NOANSWER"},
	{ACURC_NOAUTOANSWER,			"ACURC_NOAUTOANSWER"},
	{ACURC_CONGESTED,				"ACURC_CONGESTED"},
	{ACURC_INCOMING,				"ACURC_INCOMING"},
	{ACURC_NOLINE,					"ACURC_NOLINE"},
	{ACURC_ERRNUM,					"ACURC_ERRNUM"},
	{ACURC_INHNUM,					"ACURC_INHNUM"},
	{ACURC_2MNUM,					"ACURC_2MNUM"},
	{ACURC_HUNGUP,					"ACURC_HUNGUP"},
	{ACURC_NETWORK_ERROR,			"ACURC_NETWORK_ERROR"},
	{ACURC_TIMEOUT,					"ACURC_TIMEOUT"},
	{ACURC_BAD_SERVICE,				"ACURC_BAD_SERVICE"},
	{ACURC_INTERNAL,				"ACURC_INTERNAL"},

	{0,								"NONAME"},
};


/*--------------------------------------------------------------------------*/

				/* FUNCTIONS PROTOTYPES */
				/*----------------------*/


#if NEW_FCT_STYLE == ON
	void		pr_cc_to_user_code		(void);
	void		pr_acu_ret_code			(void);
	void		mg_b_chan_id			(void);
	void		mg_net_cause			(void);
	void		mg_acu_ret_code			(void);
	ushort		build_acu_conn_in		(uchar FAR *p_data);
	ushort		build_acu_progress_in	(uchar FAR *p_data);
	ushort		build_acu_conn_co 		(uchar FAR *p_data);
	ushort		build_acu_clear_co		(uchar FAR *p_data);
	ushort		build_acu_clear_in		(uchar FAR *p_data);
	ushort		build_acu_info_in		(uchar FAR *p_data);
#else
	void		pr_cc_to_user_code		();
	void		pr_acu_ret_code			();
	void		mg_b_chan_id			();
	void		mg_net_cause			();
	void		mg_acu_ret_code			();
	ushort		build_acu_conn_in		();
	ushort		build_acu_progress_in	();
	ushort		build_acu_conn_co 		();
	ushort		build_acu_clear_co		();
	ushort		build_acu_clear_in		();
	ushort		build_acu_info_in		();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             build_sdu_cc_to_mppp - implements the building of a
				 CC service message for the CC-User entity.

Usage            uchar build_sdu_cc_to_mppp ();

Common constants and declarations : cc_int, acu_int.h

Common objects   : message current context.

*-------------------------------------------------------------------------*/

uchar build_sdu_cc_to_mppp ()
{
	MPPP_DBG_FUNC ("build_sdu_cc_to_mppp()")

	uchar FAR *	p_data;
	ushort		data_size = 0;

	MPPP_DBG_ENTER ();

		/* Get message header parameters */

	mg_nai		();
	mg_sapi		();
	mg_conn_id	();
	mg_code		();

	while (g_code[0] == '?') {
		pr_cc_to_user_code ();
		mg_code ();
	}


		/* Allocate a buffer */

	Buffer_alloc;

	p_data = Buffer_a_start_data;

	if (g_sapi == ACU_SAPI) {

		switch (g_code[0]) {

			case ACU_CONN_IN :
				data_size = build_acu_conn_in (p_data);
				break;

			case ACU_PROGRESS_IN :
				data_size = build_acu_progress_in (p_data);
				break;

			case ACU_CONN_CO :
				data_size = build_acu_conn_co (p_data);
				break;

			case ACU_CLEAR_CO :
				data_size = build_acu_clear_co (p_data);
				break;

			case ACU_CLEAR_IN :
				data_size = build_acu_clear_in (p_data);
				break;

			case ACU_INFORMATION_IN :
				data_size = build_acu_info_in (p_data);
				break;


		}

	}


	S_msg_from		= (ent_id_t)g_from[0];
	S_msg_to		= (ent_id_t)g_to[0];
	S_msg_code 		= (code_t)g_code[0];
	S_msg_nai 		= (nai_t)g_nai;
	S_msg_sapi 		= (sapi_t)g_sapi;
	S_msg_conn_id 	= (add_t)g_conn_id;

	Buffer_data_size = data_size;
	S_msg_init_link_buffer;

	MPPP_DBG_LEAVE ();

	return (OK);
}

/*-------------------------------------------------------------------------*/

void pr_cc_to_user_code ()
{

	MPPP_DBG_FUNC ("pr_cc_to_user_code()")

	struct code_text *p_prim;
	uchar i = 0;

	MPPP_DBG_ENTER ();

	fprintf (f_out, "    Call Control primitives codes \n");

	p_prim = (struct code_text *)t_mppp_cc_prim;

	for (i = 0; p_prim[i].code != 0; i++);

	while (p_prim[i].code != 0) {
		fprintf (f_out, "\n\t%c : %s",p_prim[i].code,p_prim[i].p_text);
		i++;
	}

	fprintf (f_out, "\n");
	fflush (f_out);

	MPPP_DBG_LEAVE ();


}

/*-------------------------------------------------------------------------*/

void pr_acu_ret_code ()
{
	MPPP_DBG_FUNC ("pr_acu_ret_code()")

	struct code_text *p_prim;
	uchar i = 0;

	MPPP_DBG_ENTER ();

	fprintf (f_out, "    ACU Return Codes \n");

	p_prim = (struct code_text *)t_mppp_acu_ret_code;

	for (i = 0; p_prim[i].code != 0; i++);

	while (p_prim[i].code != 0) {
		fprintf (f_out, "\n\t%c : %s",p_prim[i].code,p_prim[i].p_text);
		i++;
	}

	fprintf (f_out, "\n");
	fflush (f_out);

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			build_xxx_in/co - get all the parameters needed for the
									  building of a ACU_???_IN/CO primitive.

Usage           void build_xxx_in/co (p_data)
					- uchar FAR *p_data: address of the current position
					  within the data area of the ACU_???_IN/CO primitive.
Related
functions usage void mg_zzz();

Common constants and declarations : services.h and simul.h

*--------------------------------------------------------------------------*/

ushort build_acu_conn_in (p_data)
	uchar FAR *p_data;
{

	MPPP_DBG_FUNC ("build_acu_conn_in()")

	MPPP_DBG_ENTER ();

	Memset_far ((void FAR *)p_data, 0, Acu_conn_in_size);

	mg_b_chan_id ();

	Acu_conn_in_service			= ACU_DATA_SERVICE;
	Acu_conn_in_data_chani		= (add_t)g_b_chan_id;
	Acu_conn_in_ph_num_size		= 16;
	Acu_conn_in_called_nb_size	= 16;
	Acu_conn_in_uui_size		= 0;
	Acu_conn_in_facility_size	= 0;

	Strcpy_far ((char FAR *)Acu_conn_in_a_ph_num, "1234567890*4321", ACU_MX_SZ_CALLING_NB+ACU_MX_SZ_CALLING_SUB_ADD+1);
	Strcpy_far ((char FAR *)Acu_conn_in_a_called_nb, "0987654321*1234", ACU_MX_SZ_CALLED_NB+ACU_MX_SZ_CALLED_SUB_ADD+1);

	MPPP_DBG_LEAVE ();

	return ((ushort)(Acu_conn_in_size +
					Acu_conn_in_ph_num_size +
					Acu_conn_in_called_nb_size +
					Acu_conn_in_uui_size +
					Acu_conn_in_facility_size)
			);

}

/*---------------*/

ushort build_acu_progress_in (p_data)
	uchar FAR *p_data;
{

	MPPP_DBG_FUNC ("build_acu_progress()")

	MPPP_DBG_ENTER ();

	Memset_far ((void FAR *)p_data, 0, Acu_progress_in_size);

	mg_b_chan_id ();

	Acu_progress_in_event		= ACUEV_DIAL_TONE;
	Acu_progress_in_data_chani	= (add_t)g_b_chan_id;

	MPPP_DBG_LEAVE ();

	return (Acu_progress_in_size);
}

/*---------------*/


ushort build_acu_conn_co (p_data)
	uchar FAR *p_data;
{
	MPPP_DBG_FUNC ("build_acu_conn_co()")

	MPPP_DBG_ENTER ();

	Memset_far ((void FAR *)p_data, 0, Acu_conn_co_size);

	mg_b_chan_id ();

	Acu_conn_co_service			= ACU_DATA_SERVICE;
	Acu_conn_co_data_chani		= (add_t)g_b_chan_id;
	Acu_conn_co_uui_size		= 0;
	Acu_conn_co_facility_size	= 0;

	MPPP_DBG_LEAVE ();

	return ((ushort)(Acu_conn_co_size +
					Acu_conn_co_uui_size +
					Acu_conn_co_facility_size)
			);
}

/*---------------*/

ushort build_acu_clear_in (p_data)
	uchar FAR *p_data;
{

	MPPP_DBG_FUNC ("build_acu_clear_in()")

	MPPP_DBG_ENTER ();

	Memset_far ((void FAR *)p_data, 0, Acu_clear_in_size);

	mg_net_cause ();

	if (g_net_cause == 0) {

		mg_acu_ret_code ();

		while (g_acu_ret_code[0] == '?') {
			pr_acu_ret_code ();
			mg_acu_ret_code ();
		}

	}

	Acu_clear_in_ret_code		= g_acu_ret_code[0];
	Acu_clear_in_network_cause	= (uchar)g_net_cause;
	Acu_clear_in_total_cost		= 0;
	Acu_clear_in_uui_size		= 0;
	Acu_clear_in_facility_size	= 0;

	MPPP_DBG_LEAVE ();

	return ((ushort)(Acu_clear_in_size +
					Acu_clear_in_uui_size +
					Acu_clear_in_facility_size)
			);
}

/*---------------*/

ushort build_acu_info_in (p_data)
	uchar FAR *p_data;
{
	MPPP_DBG_FUNC ("build_acu_info_in()")

	MPPP_DBG_ENTER ();

	Memset_far ((void FAR *)p_data, 0, Acu_information_size);

	Acu_information_charging		= ++g_acu_charging;

	MPPP_DBG_LEAVE ();

	return (Acu_information_size);
}


/*---------------*/

ushort build_acu_clear_co (p_data)
	uchar FAR *p_data;
{
	MPPP_DBG_FUNC ("build_acu_clear_co()")

	MPPP_DBG_ENTER ();

	Memset_far ((void FAR *)p_data, 0, Acu_clear_co_size);

	mg_net_cause ();

	if (g_net_cause == 0) {

		mg_acu_ret_code ();

		while (g_acu_ret_code[0] == '?') {
			pr_acu_ret_code ();
			mg_acu_ret_code ();
		}

	}

	Acu_clear_co_ret_code		= g_acu_ret_code[0];
	Acu_clear_co_network_cause	= (uchar)g_net_cause;
	Acu_clear_co_total_cost		= 0;
	Acu_clear_co_uui_size		= 0;
	Acu_clear_co_facility_size	= 0;

	MPPP_DBG_LEAVE ();

	return ((ushort)(Acu_clear_co_size +
					Acu_clear_co_uui_size +
					Acu_clear_co_facility_size)
			);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mg_xxx - get one parameter needed for the
						 building of a CC_???_IN/CO primitive.

Usage           void mg_xxx ()

Common constants and declarations : services.h and simul.h

*--------------------------------------------------------------------------*/

void mg_b_chan_id ()
{
	Prompt	("            B channel ID", u, g_b_chan_id);
	Scan 	(d, &g_b_chan_id);
	Echo	(u, g_b_chan_id);
}

/*-------------------------------------------------------------------------*/

void mg_net_cause ()
{
	Prompt	("    Network Cause (hexa)", 2.2x, g_net_cause);
	Scan 	(x, &g_net_cause);
	Echo	(2.2x, g_net_cause);
}

/*-------------------------------------------------------------------------*/

void mg_acu_ret_code ()
{
	Prompt	("          ACU return code", c, g_acu_ret_code[0]);
	Scan	(1s, g_acu_ret_code);
	Echo	(c, g_acu_ret_code[0]);
}


#endif	/* MPPP_SIM_BUILDER == ON */

/*EOF*/

