
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_uti.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *		mppp_prepare_packet_to_send - loads the PPP packet header and PPP
 *										frame header information.
 *
 *		mppp_copy_msg_and_buffer - copies a message and its buffer
 *
 *		mppp_in_sppp_tx_queue,
 *		mppp_out_sppp_tx_queue,
 *		mppp_discard_sppp_tx_queue,
 *		mppp_in_chap_queue,
 *		mppp_out_chap_queue,
 *		mppp_discard_chap_queue - functions or macro that manage the
 *									queues of a single link PPP link connection
 *									context.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				mppp_prepare_packet_to_send - loads the PPP packet header
						and PPP frame header information.

Usage				uchar mppp_copy_msg_and_buffer (p_to,p_from)
						p_to;	destination message
						p_from; source message

Usage				ushort mppp_prepare_packet_to_send (prot_id,pck_code,
											pck_id,p_start,data_size)
						ushort		prot_id;	protocol ID
						uchar		pck_code;	PPP packet code
						uchar		pck_id;		packet ID
						uchar	FAR *p_start;	start address for address+control info
						ushort		data_size;	currently formatted data size

Description			The p_start and data_size parameters give the starting
					address and the size of the PPP packet data, without the
					PPP header (packet code, packet id, packet length), nor
					the PPP frame header (address, control)


Return value :		returns the complete PPP frame size.

Common constants and declarations : mppp.h

Common objects :

*--------------------------------------------------------------------------*/

ushort mppp_prepare_packet_to_send (prot_id,pck_code,pck_id,p_start,data_size)
	ushort		prot_id;	/* protocol ID */
	uchar		pck_code;	/* PPP packet code */
	uchar		pck_id;		/* packet ID */
	uchar	FAR *p_start;	/* start address for address+control info */
	ushort		data_size;	/* currently formatted data size */
{
	MPPP_DBG_FUNC ("mppp_prepare_packet_to_send()")

	uchar	FAR *p_data_start;		/* for packet display */
	ushort		frame_data_size;	/* whole frame data size */

	MPPP_DBG_ENTER ();

		/* Set the starting data address */

	p_data_start = p_start;

		/*
			1- Load the PPP frame header
				FF 03 <ProtocolID>

			2- Load the PPP packet header
				<PacketCode> <PacketID> <PacketLength>

		*/

	Mppp_load_ppp_header (p_start, prot_id);
	Mppp_put_char (pck_code, p_start);
	Mppp_put_char (pck_id, p_start);
	Mppp_put_short ((data_size+PPP_PACKET_HEADER_LGTH), p_start);

		/* Set the frame data size */

	frame_data_size	= data_size+PPP_PACKET_HEADER_LGTH+PPP_FRAME_HEADER_LGTH;

		/* Display the TX (4th parameter is ON) packet data */

	MPPP_DBG_PACKETS (p_data_start, frame_data_size, 0, ON);

		/* Update the sent packet code for control protocols */

	if ((p_mppp_c_prot != P_NIL) && (prot_id == Mppp_c_prot_ppp_pid)) {
		Mppp_c_prot_s_packet_code	= pck_code;
	}

	MPPP_DBG_LEAVE ();

	return (frame_data_size);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				mppp_copy_msg_and_buffer - copies a message and its buffer

Usage				uchar mppp_copy_msg_and_buffer (p_to,p_from)
						p_to;	destination message
						p_from; source message

Return value :		OK or NOK

Common constants and declarations : mppp.h

Common objects :

*--------------------------------------------------------------------------*/

uchar mppp_copy_msg_and_buffer (p_msg_to, p_msg_from)
	struct message	FAR *p_msg_to;
	struct message	FAR *p_msg_from;
{

	MPPP_DBG_FUNC ("mppp_copy_msg_and_buffer()")

	uchar			FAR *p_data_from;	/* from pointer to source data, in copy */
	struct buffer	FAR *p_buffer;		/* local buffer pointer */
	ushort				data_offset;	/* data offset value in message or buffer */
	ushort				data_size;		/* data size value in message or buffer */


	MPPP_DBG_ENTER ();


#	if ASSERT == ON

		if ((p_msg_from == P_NIL) || (p_msg_to == P_NIL)) {

			MPPP_DBG_ERROR ("P_NIL pointer passed to copy");
			MPPP_DBG_LEAVE ();

			return (NOK);
		}

#	endif

		/*
			If a buffer is associated to the original message,
			then we'll update the buffer address according
			to the newly allocated one.
		*/

	Memcpy_far ((char FAR *)p_msg_to, (char FAR *)p_msg_from, MESSAGE_HEADER_SIZE);

		/*
			We don't need to update the addressing information
			now.

			From,To,Nai,Sapi,ConnID will be updated later.
		*/

	if (X_msg_data_size(p_msg_from) > 0) {

		Memcpy_far ((char FAR *)X_msg_a_start_data(p_msg_to),
					(char FAR *)X_msg_a_start_data(p_msg_from),
					X_msg_data_size(p_msg_from));

	}

	if ((p_buffer = X_msg_p_buffer (p_msg_from)) != P_NIL) {

			/*
				Retrieve useful header information from
				the original buffer
			*/

		data_offset		= Buffer_data_offset;
		data_size		= Buffer_data_size;

		p_data_from		= Buffer_a_start_data;


			/* Allocate a buffer */

		p_buffer			= Alloc_buffer ();

		Buffer_data_offset	= data_offset;
		Buffer_data_size	= data_size;

			/* Copy the data in the buffer */

		Memcpy_far ((char FAR *)Buffer_a_start_data,
					(char FAR *)p_data_from,
					data_size);

			/* Link the new message to the new buffer */

		X_msg_init_link_buffer (p_msg_to);


	}

	MPPP_DBG_LEAVE ();

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_in_sppp_tx_queue, mppp_out_sppp_tx_queue, mppp_discard_sppp_tx_queue,
				are functions or macro that manage the queues of a
				SL PPP link connection context.

Usage			void mppp_in_sppp_tx_queue			();
				uchar mppp_out_sppp_tx_queue			();
				void mppp_discard_sppp_tx_queue		();

Description		The Tx queue is organized by member link connection as
				follow :

				P_FIRST <---> message <----> message <---> .... <---> message.
																	 |
				P_LAST------------------------------------------------

				The functions or macros are the only functions or macros
				that manipulate the queues.

				Manipulations are :

					- adding an element at the end of the queue (in_queue).

					- accepting a message from the top of the queue
					  (out_queue).

					- clearing the queue (discard_queue).

					- pick-up the next message to send
					  (get_next_queue_entry).

*--------------------------------------------------------------------------*/

		/* p_snd_msg points the message to queue */

void mppp_in_sppp_tx_queue ()
{
	MPPP_DBG_FUNC ("mppp_in_sppp_tx_queue()")

	MPPP_DBG_ENTER ();

		/* Put the p_snd_msg in member link Tx queue */

	if (Sppp_cep_data_tx_last == P_NIL) {

		Next  (p_snd_msg)		= Prior (p_snd_msg) 	= P_NIL;
		Sppp_cep_data_tx_first	= Sppp_cep_data_tx_last	= p_snd_msg;

	} else {

		Next  (p_snd_msg)				= P_NIL;
		Prior (p_snd_msg)				= Sppp_cep_data_tx_last;
		Next  (Sppp_cep_data_tx_last)	= p_snd_msg;
		Sppp_cep_data_tx_last			= p_snd_msg;
	}

	p_snd_msg = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*-------------------------------------------------------------------------*/

uchar mppp_out_sppp_tx_queue ()
{
	MPPP_DBG_FUNC ("mppp_out_sppp_tx_queue()")

	MPPP_DBG_ENTER ();

#	if MPPP_FC == ON	/* { */

		if (Sppp_cep_data_out_busy == ON) {

				/* This member link is in outgoing FC BUSY state */

			MPPP_DBG_LEAVE ();
			return (NOK);

		}

#	endif	/* } */


		/* Free any message to send */

	Free_msg (p_snd_msg);

		/* First message of the queue */

	if ((p_snd_msg = Sppp_cep_data_tx_first) == P_NIL) {

		MPPP_DBG_LEAVE ();
		return (NOK);
	}

		/* Extract and rebuild the queue */

	if (Next (Sppp_cep_data_tx_first) == P_NIL) {

		Sppp_cep_data_tx_first = Sppp_cep_data_tx_last = P_NIL;

	} else {

		Prior (Next (Sppp_cep_data_tx_first))	= P_NIL;
		Sppp_cep_data_tx_first					= Next (p_snd_msg);
	}

		/*
			p_snd_msg is not P_NIL
			Reset the pointer to the next message
		*/

	Next (p_snd_msg) = P_NIL;

	MPPP_DBG_LEAVE ();

	return (OK);

}


/*-------------------------------------------------------------------------*/

void mppp_discard_sppp_tx_queue ()
{
	MPPP_DBG_FUNC ("mppp_discard_sppp_tx_queue()")

	struct message	FAR *p_msg, FAR *p_old;		/* temporary message pointers */

	MPPP_DBG_ENTER ();

	for (p_msg = Sppp_cep_data_tx_first; p_msg != P_NIL; ) {

		p_old		= p_msg;
		p_msg		= Next (p_old);

			/* Message waiting to be processed by the MP */

		Free_msg (p_old);
	}

	Sppp_cep_data_tx_first = Sppp_cep_data_tx_last = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*/

#if ASSERT == ON	/* { */

void mppp_check_sppp_tx_queue ()
{
	MPPP_DBG_FUNC ("mppp_check_sppp_tx_queue()")

	struct message		FAR *p_msg;		/* current message */
	struct message		FAR *p_prior;	/* prior message */

	MPPP_DBG_ENTER ();

	for (p_prior = P_NIL, p_msg = Sppp_cep_data_tx_first; p_msg != P_NIL; p_prior = p_msg, p_msg = Next (p_prior)) {

		if (p_prior !=	Prior (p_msg)) {
			Trap (TRAP_MPPP_QUEUE_CHECK, "mppp_check_sppp_tx_queue:prior");
		}

	}

	if (Sppp_cep_data_tx_last != p_prior) {
		Trap (TRAP_MPPP_QUEUE_CHECK, "mppp_check_sppp_tx_queue:last");
	}

	MPPP_DBG_LEAVE ();

}

#endif	/* if ASSERT == ON } */


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mppp_in_chap_queue, mppp_out_chap_queue, mppp_discard_chap_queue,
				are functions or macro that manage the queues of a
				CHAP Challenge messages.

Usage			void mppp_in_chap_queue			();
				uchar mppp_out_chap_queue		();
				void mppp_discard_chap_queue	();

Description		The CHAP queue is organized by bundle connection as
				follow :

				P_FIRST <---> message <----> message <---> .... <---> message.
																	 |
				P_LAST------------------------------------------------

				The functions or macros are the only functions or macros
				that manipulate the queues.

				Manipulations are :

					- adding an element at the end of the queue (in_queue).

					- accepting a message from the top of the queue
					  (out_queue).

					- clearing the queue (discard_queue).

*--------------------------------------------------------------------------*/

		/* p_rcv_msg points the message to queue */

void mppp_in_chap_queue ()
{
	MPPP_DBG_FUNC ("mppp_in_chap_queue()")

	MPPP_DBG_ENTER ();

		/* Put the p_rcv_msg in CHAP queue */

	if (Mppp_cep_chap_last == P_NIL) {

		Next  (p_rcv_msg)	= Prior (p_rcv_msg) 	= P_NIL;
		Mppp_cep_chap_first	= Mppp_cep_chap_last	= p_rcv_msg;

	} else {

		Next  (p_rcv_msg)			= P_NIL;
		Prior (p_rcv_msg)			= Mppp_cep_chap_last;
		Next  (Mppp_cep_chap_last)	= p_rcv_msg;

		Mppp_cep_chap_last			= p_rcv_msg;
	}

	p_rcv_msg = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*-------------------------------------------------------------------------*/

uchar mppp_out_chap_queue ()
{
	MPPP_DBG_FUNC ("mppp_out_chap_queue()")

	MPPP_DBG_ENTER ();

		/* Free any received message */

	Free_msg (p_rcv_msg);

		/* First message of the queue */

	if ((p_rcv_msg = Mppp_cep_chap_first) == P_NIL) {

		MPPP_DBG_LEAVE ();
		return (NOK);
	}

		/* Extract and rebuild the queue */

	if (Next (Mppp_cep_chap_first) == P_NIL) {

		Mppp_cep_chap_first = Mppp_cep_chap_last = P_NIL;

	} else {

		Prior (Next (Mppp_cep_chap_first))	= P_NIL;
		Mppp_cep_chap_first					= Next (p_rcv_msg);
	}

		/*
			p_rcv_msg is not P_NIL
			Reset the pointer to the next message
		*/

	Next (p_rcv_msg) = P_NIL;

	MPPP_DBG_LEAVE ();

	return (OK);

}


/*-------------------------------------------------------------------------*/

void mppp_discard_chap_queue ()
{
	MPPP_DBG_FUNC ("mppp_discard_chap_queue()")

	struct message	FAR *p_msg, FAR *p_old;		/* temporary message pointers */

	MPPP_DBG_ENTER ();

	for (p_msg = Mppp_cep_chap_first; p_msg != P_NIL; ) {

		p_old		= p_msg;
		p_msg		= Next (p_old);

			/* Message waiting to be processed by the MP */

		Free_msg (p_old);
	}

	Mppp_cep_chap_first = Mppp_cep_chap_last = P_NIL;

	MPPP_DBG_LEAVE ();

}


/*-----------------------------------------------------------------------*/


/* EOF */


