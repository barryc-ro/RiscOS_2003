
/*-----------------------------------------------------------------------
 *						 M O D U L E   H E A D E R
 *
 * filename - sim_mppp.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		build_mppp_frame	- building of PPP protocoles frames
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_SIM_BUILDER == ON	/* { */
#	include "simul.h"
#	include "sim_ppp.h"

#	include "cc_int.h"
#	include "acu_int.h"

#	if MPPP_PH == ON
#		include "ph_int.h"
#	endif

/*--------------------------------------------------------------------------*/

				/* COMMON VARIABLES AND EXTERNAL */
				/*-------------------------------*/


extern	CONST struct code_text t_mppp_sig_prim		[];
extern	CONST struct code_text t_mppp_sig_mgt_prim	[];
extern	CONST struct code_text t_mppp_data_prim		[];
extern	CONST struct code_text t_mppp_ext_prim		[];

extern	uint	g_b_chan_id;

sppp_ref_t		g_sppp_ref;			/* member link reference */
uint			g_data_sapi;
uint			g_data_conn_id;
char			g_config_type[2];	/* configuration type */

/*--------------------------------------------------------------------------*/

				/* FUNCTIONS PROTOTYPES */
				/*----------------------*/


#if NEW_FCT_STYLE == ON

	void		pr_mppp_sig_code			(void);
	void		pr_mppp_sig_mgt_code		(void);
	void		pr_mppp_data_code			(void);
	void		pr_mppp_ext_events_code		(void);

	void		mg_sppp_ref 				(void);
	void		mg_data_sapi				(void);
	void		mg_data_conn_id				(void);
	void		mg_config_type				(void);

	extern	void	mg_b_chan_id			(void);

	ushort		build_sdu_mppp_sig			(uchar FAR *p_data);
	ushort		build_sdu_mppp_sig_mgt		(uchar FAR *p_data);
	ushort		build_sdu_mppp_data			(uchar FAR *p_data);
	ushort		build_sdu_mppp_ext_events	(uchar FAR *p_data);

#else

	void		pr_mppp_sig_code			();
	void		pr_mppp_sig_mgt_code		();
	void		pr_mppp_data_code			();
	void		pr_mppp_ext_events_code		();

	void		mg_sppp_ref 				();
	void		mg_data_sapi				();
	void		mg_data_conn_id				();
	void		mg_config_type				();

	extern	void	mg_b_chan_id			();

	ushort		build_sdu_mppp_sig			();
	ushort		build_sdu_mppp_sig_mgt		();
	ushort		build_sdu_mppp_data			();
	ushort		build_sdu_mppp_ext_events	();

#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			build_sdu_sm_to_mppp : simulation of SM entity sending message
						to MPPP entity.

Usage           uchar build_sdu_sm_to_mppp (void);

Related
functions usage ();

Description :

Return value : 	returns OK

common constants and declarations :mppp_int.h

common objects :

*--------------------------------------------------------------------------*/

extern	CONST struct mppp_config	mppp_config_data;
extern	CONST struct sppp_config	sppp_config_data;

uchar build_sdu_sm_to_mppp ()
{

		/* input of network access */

		/* get message header parameters */

	mg_nai		();					/* NAI */

start:
	mg_code		();					/* SM primitive code */

	S_msg_nai		= g_nai;
	S_msg_code		= g_code[0];
	S_msg_to		= ENT_MPPP;
	S_msg_from		= ENT_SM;
	S_msg_sapi  	= SAPI_NIL;
	S_msg_conn_id 	= ADD_NIL;

		/* building of primitive according to its code */

	switch (g_code[0]) {

		case '?' :
			fprintf (f_out, "\n            PRIMITIVE IDENTIFIER\n");
			fprintf (f_out, "		%c : SM_SET_CONFIG_RQ primitive",	SM_SET_CONFIG_RQ);
			fprintf (f_out, "		%c : SM_STOP_RQ primitive",	SM_STOP_RQ);
			fprintf (f_out, "		%c : SM_RESET_CONFIG_RQ primitive",	SM_RESET_CONFIG_RQ);
			fprintf (f_out,"\n\n");
			goto start;

		case SM_STOP_RQ :
		case SM_BUSY_RQ :
		case SM_CLEAR_BUSY_RQ :
			break;

		case SM_RESET_CONFIG_RQ :
			break;

		case SM_SET_CONFIG_RQ :

			if (g_nai == NAI_NIL) {

				mg_config_type ();

				if (g_config_type[0] == 'M') {

					Buffer_alloc;

						/* Init buffer header */

					Buffer_data_size = sizeof (sppp_config_data);

						/* Move objects to the buffer */

					Memcpy_far ((char FAR *)Buffer_a_start_data,
								(char FAR *)&sppp_config_data,
								(ushort)sizeof(sppp_config_data));

					S_msg_nai 		= NAI_NIL;			/* null network access ID */
					S_msg_add		= ADD_NIL;			/* address = NIL */
					S_msg_init_link_buffer;

				} else 	if (g_config_type[0] == 'B') {

					Buffer_alloc;

						/* Init buffer header */

					Buffer_data_size = sizeof (mppp_config_data);

						/* Move objects to the buffer */

					Memcpy_far ((char FAR *)Buffer_a_start_data,
								(char FAR *)&mppp_config_data,
								(ushort)sizeof(mppp_config_data));

					S_msg_nai 		= NAI_NIL;			/* null network access ID */
					S_msg_add		= ADD_NIL;			/* address = NIL */
					S_msg_init_link_buffer;

				}

			}
			break;

	}

	return (OK);
}


/*-------------------------------------------------------------------------*/

uchar build_sdu_appli_to_mppp ()
{
	MPPP_DBG_FUNC ("build_sdu_appli_to_mppp()")

	uchar 			FAR *p_data;
	struct message	FAR *p_msg;
	ushort				data_size = 0;

	MPPP_DBG_ENTER ();

		/* Get message header parameters */

	mg_nai		();
	mg_sapi		();
	mg_conn_id	();

		/* Allocate a buffer */


	Buffer_alloc;

	p_data 	= Buffer_a_start_data;
	p_msg	= P_NIL;

	switch (g_sapi) {

		case MPPP_SAPI_EXT_EVENTS:
			data_size	= build_sdu_mppp_ext_events (p_data);
			break;

		case MPPP_SAPI_SIG:
			data_size	= build_sdu_mppp_sig  (p_data);
			break;

		case MPPP_SAPI_SIG_MGT:
			data_size	= build_sdu_mppp_sig_mgt (p_data);
			break;

		case MPPP_SAPI_DATA_SYNC:

			mg_code				();

			while (g_code[0] == '?') {
				pr_mppp_data_code ();
				mg_code	();
			}

			if (g_code[0] == MPPP_DA_RQ) {
				Buffer_data_offset	+= MPPP_DATA_HEADER_SIZE;	/* mandatory hole for ML PPP */
				p_data		= Buffer_a_start_data;
				data_size	= build_sdu_mppp_data (p_data);
			}
			break;

		case MPPP_SAPI_DATA_ASYN:
			p_data		= Buffer_a_start_data;
			data_size	= build_sdu_mppp_data (p_data);

			Buffer_data_size = data_size;
			S_msg_init_link_buffer;

			p_msg	= mppp_sync_to_async (p_snd_msg, 0xFFFFFFFFL, 0, ON);

			break;

		default:
			break;

	}


	if (p_msg != P_NIL) {

		while (p_msg != P_NIL) {

			p_snd_msg		= p_msg;

			S_msg_from		= (ent_id_t)g_from[0];
			S_msg_to		= ENT_MPPP;
			S_msg_nai 		= (nai_t)g_nai;
			S_msg_sapi 		= (sapi_t)g_sapi;
			S_msg_conn_id 	= (add_t)g_conn_id;
			S_msg_code 		= (code_t)g_code[0];

			if ((p_msg = L_msg_p_next) == P_NIL) {
				break;
			} else {
				Send_message (p_snd_msg); p_snd_msg = P_NIL;
			}

		}

	} else {

		Buffer_data_size = data_size;

		S_msg_p_buffer	= P_NIL;

		Free_msg (p_snd_msg);
		p_snd_msg = P_NIL;

		p_snd_msg		= Msg_or_buffer (p_buffer, MPPP_DATA_HEADER_SIZE);

		S_msg_from		= (ent_id_t)g_from[0];
		S_msg_to		= ENT_MPPP;
		S_msg_nai 		= (nai_t)g_nai;
		S_msg_sapi 		= (sapi_t)g_sapi;
		S_msg_conn_id 	= (add_t)g_conn_id;
		S_msg_code 		= (code_t)g_code[0];

	}

	MPPP_DBG_LEAVE ();

	return (OK);

}

/*-------------------------------------------------------------------------*/

ushort build_sdu_mppp_ext_events (p_data)
	uchar	FAR *p_data;
{
	MPPP_DBG_FUNC ("build_sdu_mppp_ext_events()")

	ushort	data_size;

	MPPP_DBG_ENTER ();

	mg_data_sapi	();
	mg_data_conn_id	();
	mg_code			();

	while (g_code[0] == '?') {
		pr_mppp_ext_events_code ();
		mg_code	();
	}

	switch (g_code[0]) {

		case MPPP_EXT_OPEN_RQ:
		case MPPP_EXT_CLOSE_RQ:
			break;

		case MPPP_EXT_ADD_LINK_RQ:
			Mppp_ext_add_link_rq_data_sapi	= (sapi_t)g_data_sapi;
			Mppp_ext_add_link_rq_data_ces	= (add_t)g_data_conn_id;
			Mppp_ext_add_link_rq_sppp_ref	= SPPP_REF_NIL;
			data_size	= Mppp_ext_add_link_rq_size;
			break;

		case MPPP_EXT_DROP_LINK_RQ:
			mg_sppp_ref		();

			Mppp_ext_drop_link_rq_data_sapi	= (sapi_t)g_data_sapi;
			Mppp_ext_drop_link_rq_data_ces	= (add_t)g_data_conn_id;
			Mppp_ext_drop_link_rq_sppp_ref	= g_sppp_ref;
			data_size	= Mppp_ext_drop_link_rq_size;
			break;

	}

	g_sapi		= MPPP_SAPI_EXT_EVENTS;
	g_conn_id	= ADD_NIL;

	MPPP_DBG_LEAVE ();

	return (data_size);

}


/*-------------------------------------------------------------------------*/

ushort build_sdu_mppp_sig (p_data)
	uchar	FAR *p_data;
{
	MPPP_DBG_FUNC ("build_sdu_mppp_sig()")

	uchar	FAR	*p_other_data;
	ushort		data_size, other_size;

	MPPP_DBG_ENTER ();

	mg_code ();

	while (g_code[0] == '?') {
		pr_mppp_sig_code ();
		mg_code ();
	}

	switch (g_code[0]) {

		case MPPP_ACU_CONN_RQ:

			Memset_far ((void FAR *)p_data, 0, Acu_conn_rq_size);

				/* Fill in with new values. */

			Acu_conn_rq_service 			= ACU_DATA_SERVICE;
			Acu_conn_rq_charging_rq			= OFF;
			Acu_conn_rq_transfer_rq			= OFF;
			Acu_conn_rq_ph_num_size 		= 10;
			Acu_conn_rq_calling_nb_size 	= 10;

				/* Called address and sub-address */

			Strcpy_far ((char FAR *)Acu_conn_rq_a_ph_num, (char FAR *)"0123456789", (ACU_MX_SZ_CALLED_NB+1));

				/* Calling address and sub-address */

			Strcpy_far ((char FAR *)Acu_conn_rq_a_calling_nb, (char FAR *)"9876543210", ACU_MX_SZ_CALLING_NB+1);

				/* Store Other Called Number */

			p_other_data	= Acu_conn_rq_a_end_strings;

#if 0	/*$$$ FIXME "Other Called Nbs" */

			other_size		= 10;

			*p_other_data++	= other_size;

			Strcpy_far ((char FAR *)p_other_data, (char FAR *)"1122334455", (ACU_MX_SZ_CALLED_NB+1));

				/*
					Load 0 at the next 'size' entry to mark the end of
					the list of other called numbers
				*/

			*(p_other_data + other_size + 1)	= 0;


			data_size	= ((ushort)(Acu_conn_rq_a_end_strings - p_data) +
							ACU_SIZE_FIELD_LGTH + other_size + 1 + 1);

#else
			other_size		= 0;
			*p_other_data	= 0;

			data_size	= ((ushort)(Acu_conn_rq_a_end_strings - p_data) +
							ACU_SIZE_FIELD_LGTH + other_size + 1 + 1);

#endif

			break;


		case MPPP_ACU_CONN_RS:

			Memset_far ((void FAR *)p_data, 0, Acu_conn_rs_size);

			mg_b_chan_id ();

			Acu_conn_rs_service			= ACU_DATA_SERVICE;
			Acu_conn_rs_data_chani		= (add_t)g_b_chan_id;
			Acu_conn_rs_uui_size		= 0;
			Acu_conn_rs_facility_size 	= 0;

			data_size	= (Acu_conn_rs_size +
									Acu_conn_rs_uui_size +
									Acu_conn_rs_facility_size);

			break;


		case MPPP_ACU_CLEAR_RQ:

			Memset_far ((void FAR *)p_data, 0, Acu_clear_rq_size);

			data_size	= Acu_clear_rq_size;
			break;


		case MPPP_ACU_CLEAR_RS:

			Memset_far ((void FAR *)p_data, 0, Acu_clear_rs_size);

			data_size	= Acu_clear_rs_size;
			break;

		default:
			data_size = 0;
			break;


	}

	MPPP_DBG_LEAVE ();

	return (data_size);

}


/*-------------------------------------------------------------------------*/

ushort build_sdu_mppp_sig_mgt (p_data)
	uchar	FAR *p_data;
{
	MPPP_DBG_FUNC ("build_sdu_mppp_sig_mgt()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

	return (0);

}


/*-------------------------------------------------------------------------*/

ushort build_sdu_mppp_data (p_data)
	uchar	FAR *p_data;
{
	MPPP_DBG_FUNC ("build_sdu_mppp_data()")

	ushort	data_size;

	MPPP_DBG_ENTER ();

	data_size	= build_ppp_packet (p_data);


	MPPP_DBG_LEAVE ();

	return (data_size);

}


/*-------------------------------------------------------------------------*/

uchar build_sdu_ti_to_mppp ()
{
	MPPP_DBG_FUNC ("build_sdu_ti_to_mppp()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

	return (OK);

}


/*-------------------------------------------------------------------------*/

void pr_mppp_sig_code ()
{
	MPPP_DBG_FUNC ("pr_mppp_sig_code()")

	struct code_text *p_prim;
	uchar i = 0;

	MPPP_DBG_ENTER ();

	fprintf (f_out, "    MPPP Signalling primitives codes \n");

	p_prim = (struct code_text *)t_mppp_sig_prim;

	for (i = 0; p_prim[i].code != 0; i++);

	while (p_prim[i].code != 0) {
		fprintf (f_out, "\n\t%c : %s",p_prim[i].code,p_prim[i].p_text);
		i++;
	}

	fprintf (f_out, "\n");
	fflush (f_out);

	MPPP_DBG_LEAVE ();

}


/*-------------------------------------------------------------------------*/

void pr_mppp_sig_mgt_code ()
{
	MPPP_DBG_FUNC ("pr_mppp_sig_mgt_code()")

	struct code_text *p_prim;
	uchar i = 0;

	MPPP_DBG_ENTER ();

	fprintf (f_out, "    MPPP Signalling Management primitives codes \n");

	p_prim = (struct code_text *)t_mppp_sig_mgt_prim;

	for (i = 0; p_prim[i].code != 0; i++);

	while (p_prim[i].code != 0) {
		fprintf (f_out, "\n\t%c : %s",p_prim[i].code,p_prim[i].p_text);
		i++;
	}

	fprintf (f_out, "\n");
	fflush (f_out);

	MPPP_DBG_LEAVE ();

}


/*-------------------------------------------------------------------------*/

void pr_mppp_data_code ()
{
	MPPP_DBG_FUNC ("pr_mppp_data_code()")

	struct code_text *p_prim;
	uchar i = 0;

	MPPP_DBG_ENTER ();

	fprintf (f_out, "    MPPP Data primitives codes \n");

	p_prim = (struct code_text *)t_mppp_data_prim;

	for (i = 0; p_prim[i].code != 0; i++);

	while (p_prim[i].code != 0) {
		fprintf (f_out, "\n\t%c : %s",p_prim[i].code,p_prim[i].p_text);
		i++;
	}

	fprintf (f_out, "\n");
	fflush (f_out);

	MPPP_DBG_LEAVE ();

}


/*-------------------------------------------------------------------------*/

void pr_mppp_ext_events_code ()
{
	MPPP_DBG_FUNC ("pr_mppp_ext_events_code()")

	struct code_text *p_prim;
	uchar i = 0;

	MPPP_DBG_ENTER ();

	fprintf (f_out, "    MPPP External Events primitives codes \n");

	p_prim = (struct code_text *)t_mppp_ext_prim;

	for (i = 0; p_prim[i].code != 0; i++);

	while (p_prim[i].code != 0) {
		fprintf (f_out, "\n\t%c : %s",p_prim[i].code,p_prim[i].p_text);
		i++;
	}

	fprintf (f_out, "\n");
	fflush (f_out);

	MPPP_DBG_LEAVE ();

}



/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mg_xxx - get one parameter needed for the
						 building of a message

Usage           void mg_xxx ()

Common constants and declarations : services.h and simul.h

*--------------------------------------------------------------------------*/

void mg_sppp_ref ()
{
	Prompt	("   member link reference", u, g_sppp_ref);
	Scan 	(d, &g_sppp_ref);
	Echo	(d, g_sppp_ref);
}


/*-------------------------------------------------------------------------*/

void mg_data_sapi ()
{
	Prompt	("               data sapi", u, g_sapi);
	Scan	(d, &g_data_sapi);
	Echo	(u, g_data_sapi);
}


/*-------------------------------------------------------------------------*/

void mg_config_type ()
{
	Prompt	("   config. type (B or M)", c, g_config_type[0]);
	Scan 	(1s, g_config_type);
	Echo	(c, g_config_type[0]);
}

/*-------------------------------------------------------------------------*/

uint	v_data_conn_id;

void mg_data_conn_id ()
{
	Prompt	("            data conn_id", u, g_data_conn_id);
	Scan	(d, &v_data_conn_id);

	switch (v_data_conn_id) {

			case -1 :
				g_data_conn_id = ((++g_data_conn_id == 255) ? 1 : g_data_conn_id);
				break;

			case -2 :
				break;

			default :
				g_data_conn_id = v_data_conn_id;

	}

	Echo	(u, g_data_conn_id);

}

/*-------------------------------------------------------------------------*/


#endif	/* MPPP_SIM_BUILDER == ON } */

/* EOF */

