
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mp_proc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		mp_unpack and mp_pack - implements the unpacking and the
 *		packing of a MultiLink control field (MLC) to and from a
 *		mp_upfh common structure (receive (Ru) and send (Su)).
 *		of a connection.
 *
 *		mp_dcod_frame - implements the decoding of a multilink
 *		control field.
 *
 *		mp_build_tx_data_rq - implements the MLC building of the first MLP
 *		frame of the tx queue (if any) and it transmission to the least
 *		loaded SLP connection.
 *
 *		mp_split_frame split a frame into several frames according
 *		to the speed factor of each Single Link and add a MP frame header.
 *
 *		mp_merge_frame merge data from the frame assembly queue to
 *		the p_snd_msg recombined structure.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "mppp.h"					/* MPPP header module */

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "mppp_ext.h"
#include "it.h"
#include "mp.h"			/* MP definitions */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_unpack and mp_pack - implements the unpacking and the
				packing of a MultiLink control field (MLC) to and from a
				mp_upfh common structure (receive (Ru) and send (Su)).
				of a connection.

Usage			void mp_unpack (p_data, size);
					- p_data	: frame pointer,
					- size		: frame size.

				void mp_pack	(p_data)
					- p_data	: frame pointer,

Common constants and declarations : mp.h

Common objects : . receive_fr_mp - MP frame header structure of a
				   received frame,
				 . send_fr_mp - MP frame header structure of frame to send.

*--------------------------------------------------------------------------*/

uchar mp_unpack (p_data, size)
	uchar	FAR *p_data;	/* MP frame pointer */
	ushort		 size;		/* MP frame size */
{
	MPPP_DBG_FUNC ("mp_unpack()")

	MPPP_DBG_ENTER ();

		/* Reset the unpacked information storage */

	Ru_mp_mns	= 0;
	Ru_mp_be	= 0;

	if (Mppp_cep_frag_pfc == ON) {

		if (size >= (MP_SHORT_HEADER_SIZE - 1)) {

				/*
					We get the actual MP header format from the
					MP negotiation bit-mask information, within
					the R_mp_xxx macros.
				*/

			Ru_mp_mns	= R_mp_mns_pfc;
			Ru_mp_be	= R_mp_be_pfc;		/* Begin End bits */

		} else {

			MPPP_DBG_LEAVE ();
			return (NOK);

		}

	} else {

		if (size >= MP_SHORT_HEADER_SIZE) {

				/*
					We get the actual MP header format from the
					MP negotiation bit-mask information, within
					the R_mp_xxx macros.
				*/

			Ru_mp_mns	= R_mp_mns;
			Ru_mp_be	= R_mp_be;		/* Begin End bits */

		} else {

			MPPP_DBG_LEAVE ();
			return (NOK);

		}

	}

	MPPP_DBG_LEAVE ();
	return (OK);
}

/*--------------------------------------------------------------------------*/

void mp_pack (p_data)
	uchar	FAR *p_data;	/* MP frame pointer */
{
	MPPP_DBG_FUNC ("mp_pack()")

	uchar	use_short_header;	/* flag indicating the usage of MP short header */

	MPPP_DBG_ENTER ();

		/* If we Ack'd the SSNHF LCP option, then we send short header */

	if (Mppp_cep_ack_negot & LCP_NEG_SSNHF) {
		use_short_header	= ON;
	} else {
		use_short_header	= OFF;
	}

		/*
			Build the MP control field
			Load PPP PID header

			FF 03 PID(H) PID(L)

		*/

	Mppp_put_char (PPP_UI_ADD_VAL, p_data);
	Mppp_put_char (PPP_UI_CTRL_VAL, p_data);

	S_mp_load_pid (PPP_PROT_MP);

		/* Load the BE bits and the sequence number */

	if (use_short_header == ON) {
		S_mp_load_short (Sppp_cep_data_be, Mppp_cep_mvs);
	} else {
		S_mp_load_long (Sppp_cep_data_be, Mppp_cep_mvs);
	}

	MPPP_DBG_LEAVE ();

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_dcod_frame - implements the decoding of a multilink
				control field.

Usage			void mp_dcod_frame (p_data, size);
					- p_data	: frame pointer,
					- size		: frame size.

Common constants and declarations : mp.h

Common objects : . receive_fr_mp - MP frame header structure of a
				   received frame,
				 . send_fr_mp - MP frame header structure of frame to send.


*--------------------------------------------------------------------------*/

uchar mp_dcod_frame (p_data, data_size)
	uchar	FAR *p_data;		/* MP frame pointer */
	ushort		 data_size;		/* MP frame size */
{
	MPPP_DBG_FUNC ("mp_dcod_frame()")

	MPPP_DBG_ENTER ();

		/* Unpack */

	if (mp_unpack (p_data, data_size) == OK) {

			/* MP data frame */

		MPPP_DBG_LEAVE ();
		return (MPPP_DA_IN);

	} else {

		MPPP_DBG_LEAVE ();
		return (EV_NIL);
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_build_tx_data_rq - implements the MLC building of the
				first MP frame of the tx queue (if any) and its transmission
				to the least loaded Single Link.

Usage			void mp_build_tx_data_rq ();

Common constants and declarations : mp.h

Common objects : . send_fr_mp - MP frame header structure of frame to send,


*--------------------------------------------------------------------------*/

uchar mp_build_tx_data_rq ()
{
	MPPP_DBG_FUNC ("mp_build_tx_data_rq()")

	struct message FAR *p_msg;				/* temporary message pointer */
	struct sppp_cep FAR *p_sppp_cep_min;	/* saved pointer */
	long				min_byte_count;		/* temporary byte count */
	long				min_frame_count;	/* temporary byte count */
	ushort				data_size;			/* data size */
	uchar				header_size;		/* actual MP header size */

	MPPP_DBG_ENTER ();

		/* Set the extra offset we need for transmission */

	if (Mppp_cep_ack_negot & LCP_NEG_SSNHF) {
		header_size	= MP_SHORT_HEADER_SIZE;
	} else {
		header_size	= MP_LONG_HEADER_SIZE;
	}

		/* Get the next MP frame not transmitted */

	mp_get_next_i_tx_queue_entry ();

		/* Check the extracted message ? */

	if (p_rcv_msg != P_NIL) {

			/* MP control field values */

		Su_mp_mns	= Mppp_cep_mvs;

			/*
			   Reuse the received message which may contain
			   a pointer on the data buffer.
			*/

		if ((p_msg = p_rcv_msg) == P_NIL) {
			Trap (TRAP_MPPP_NULL_POINTER, "mp_build_tx_data_rq");
		}

		p_rcv_msg	= p_snd_msg;	/* exchange the contents of
										   p_snd_msg and p_rcv_msg */
		p_snd_msg	= p_msg;

			/* Reset the liberation flag and PH queue mark */

		S_msg_lib	= OFF;				/* liberation flag = OFF ==> no release to be done */

		if ((p_buffer = S_msg_p_buffer) != P_NIL) {

			data_size			 =
			Buffer_data_size	+= (header_size+PPP_UI_ADD_CTRL_LGTH);		/* ajust the data size */
			Buffer_data_offset	-= (header_size+PPP_UI_ADD_CTRL_LGTH);		/* adjust data offset */

#			if ASSERT == ON

				if (Buffer_data_offset < BUFFER_HEADER_SIZE) {
					MPPP_DBG_ERROR ("no hole in the buffer");
					Trap (TRAP_MPPP_NO_HOLE, "mp_build_tx_data_rq");
				}

#			endif

				/* Build the MP control field */

			mp_pack ((uchar FAR *)Buffer_a_start_data); /* MP frame address */

		} else {

			data_size			 =
			S_msg_data_size		+= (header_size+PPP_UI_ADD_CTRL_LGTH);		/* adjust the data size */
			S_msg_data_offset	-= (header_size+PPP_UI_ADD_CTRL_LGTH);		/* adjust data offset */

#			if ASSERT == ON

				if (S_msg_data_offset < MESSAGE_HEADER_SIZE) {
					MPPP_DBG_ERROR ("no hole in the message");
					Trap (TRAP_MPPP_NO_HOLE, "mp_build_tx_data_rq");
				}

#			endif

				/* Build the MP control field */

			mp_pack ((uchar FAR *)S_msg_a_start_data); /* frame address */
		}

			/*
				Transmit the MP frame according to
				the load of each member link in the bundle
			*/

		min_byte_count = MP_MX_BYTE_COUNT;	  /* Max value */

			/* Search for the least loaded member link connection */

		for (mppp_access_first_sppp_in_bundle ();
				p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle ()) {

			p_mppp_c_prot	= Sppp_cep_p_lcp_info;

			if ((Sppp_cep_data_state == SPPP_ESTABLISHED) &&
/*				(Sppp_cep_data_out_busy == OFF) && */
				(Sppp_cep_link_phase == SPPP_LINK_PHASE_NETWORK)) {

					/* Minimum load ? */

				if (Sppp_cep_data_tx_byte_count < min_byte_count) {

						/* Yes - update min count */

					min_byte_count	= Sppp_cep_data_tx_byte_count;

						/* Save this context pointer */

					p_sppp_cep_min	= p_sppp_cep;

					min_frame_count = Sppp_cep_data_tx_frame_count;

				} else if (Sppp_cep_data_tx_byte_count == min_byte_count) {

					if (Sppp_cep_data_tx_frame_count < min_frame_count) {

							/* Yes - update min count */

						min_frame_count = Sppp_cep_data_tx_frame_count;

							/* Save this context pointer */

						p_sppp_cep_min	= p_sppp_cep;

					}

				}

			}

		}

			/* Member link to be used to transmit the MLP frame */

		p_sppp_cep		= p_sppp_cep_min;
		p_mppp_c_prot	= Sppp_cep_p_lcp_info;

			/* Update the byte and frame TX count */

		Sppp_cep_data_tx_byte_count += data_size;

		if (++Sppp_cep_data_tx_frame_count > MP_MX_FRAME_COUNT) {

				/* Reset */

			for (mppp_access_first_sppp_in_bundle ();
					p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle ()) {

				Sppp_cep_data_tx_frame_count = 0;

			}

				/* Restore the pointer to the member link context */

			p_sppp_cep		= p_sppp_cep_min;
			p_mppp_c_prot	= Sppp_cep_p_lcp_info;

		}

			/* Transmit DATA frame */

		S_msg_nai		= Sppp_cep_data_nai;
		S_msg_sapi		= Sppp_cep_data_sapi;
		S_msg_conn_id	= Sppp_cep_data_conn_id;

		mppp_snd (Sppp_cep_data_entity_id, S_msg_code);

			/* Return OK */

		MPPP_DBG_LEAVE ();
		return (OK);

	} else {

			/* Return NOK */

		MPPP_DBG_LEAVE ();
		return (NOK);
	}

}

/*--------------------------------------------------------------------------*/

void mp_reset_mv ()
{
	MPPP_DBG_FUNC ("mp_reset_mv()")

	MPPP_DBG_ENTER ();

	Mppp_cep_mvs = Mppp_cep_mvt = Mppp_cep_mvr = 0;

		/* 1st fragment not received yet */

	Mppp_cep_first_frag_received = OFF;

		/* No ACFC, no PFC */

	Mppp_cep_frag_pfc	=
	Mppp_cep_frag_acfc	= OFF;

	MPPP_DBG_LEAVE ();

}

/*--------------------------------------------------------------------------*/

void mp_clear_exception_conditions ()
{
	MPPP_DBG_FUNC ("mp_clear_exception_conditions()")

	MPPP_DBG_ENTER ();

	Mppp_cep_remote_receiver_state	= FREE;		/* remote receiver state free */
	Mppp_cep_own_receiver_state		= FREE;		/* local receiver  free */
	Mppp_cep_commit_rq				= OFF;		/* local upper layer awaiting acknowledgment (check point) */

	MPPP_DBG_LEAVE ();

}

/*--------------------------------------------------------------------------*/

void mp_reinit_ctx ()
{
	mp_reset_mv						();
	mp_clear_exception_conditions	();
	mp_discard_tx_queue				();
	mp_discard_rx_queue				();
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_split_frame split a frame into several fragment according
				to the speed factor of each member link and add a MP frame header.

Usage			mp_spit_frame	();
					p_rcv_msg points on the message to slpit.

Return code		OK a frame has been found
				NOK a frame has not been found
Common : mp context.

*--------------------------------------------------------------------------*/

uchar mp_split_frame ()
{
	MPPP_DBG_FUNC ("mp_split_frame()")

	struct message		FAR *p_msg;					/* message pointer */
	struct buffer		FAR *p_buffer_rel;			/* buffer to release pointer */
	uchar				FAR *p_data;				/* data pointer */
	uchar				FAR *p_data_to;				/* destination data pointer */
	uchar				FAR *p_sppp_data;			/* SPPP data pointer */
	struct sppp_cep 	FAR *p_sppp_cep_min;		/* saved pointer */
	struct sppp_cep 	FAR *p_sppp_cep_last;		/* last valid  pointer */
	struct mppp_c_prot	FAR *p_mppp_c_prot_last;	/* last valid pointer */
	ushort				 	data_size;				/* data size */
	ushort				 	data_offset;			/* data offset */
	ushort				 	sppp_data_size;			/* SPPP data size */
	long				 	remaining_data_size;	/* remaining data size */
	long				 	min_byte_count;			/* temporary byte count */
	long				 	min_frame_count;		/* temporary frame count */
	uchar					header_size;			/* actual MP header size */


	MPPP_DBG_ENTER ();


		/* Set the extra offset we need for transmission */

	if (Mppp_cep_ack_negot & LCP_NEG_SSNHF) {
		header_size	= MP_SHORT_HEADER_SIZE;
	} else {
		header_size	= MP_LONG_HEADER_SIZE;
	}

		/* Get the next frame of the Tx queue */

	if (mp_out_tx_queue () == NOK) {

		MPPP_DBG_LEAVE ();
		return (NOK);
	}


#	if ASSERT == ON

			/* Check the total bandwidth to avoid divide by zero */

		if (Mppp_cep_sppp_total_link_speed == 0) {

			MPPP_DBG_ERROR ("total bandwidth is 0");

			Trap (TRAP_MPPP_BUNDLE_CHECK, "mp_split_frame");
		}

#	endif

	p_buffer_rel	= P_NIL;

	if ((p_buffer = R_msg_p_buffer) != P_NIL) {

		data_size	= Buffer_data_size;
		p_data		= Buffer_a_start_data;
		data_offset	= Buffer_data_offset - BUFFER_HEADER_SIZE;

	} else {

		data_size	= R_msg_data_size;
		p_data		= R_msg_a_start_data;
		data_offset	= R_msg_data_offset - MESSAGE_HEADER_SIZE;
	}

		/* Check the data offset */

	if (data_offset < (header_size+PPP_UI_ADD_CTRL_LGTH)) {

			/* No room for the MP header */

		MPPP_DBG_WARNING ("no room for MP header, moving data");

		p_buffer_rel	= p_buffer;

		Buffer_alloc;

		Buffer_data_offset	+= (header_size+PPP_UI_ADD_CTRL_LGTH);	/* total header size */
		p_data_to			= Buffer_a_start_data;

		Memcpy_far ((char FAR *)p_data_to, (char FAR *)p_data, data_size);
		Buffer_data_size	= data_size;

		R_msg_init_link_buffer;

		if (p_buffer_rel != P_NIL) {
			Free_buffer (p_buffer_rel);
			p_buffer_rel	= P_NIL;
		}

			/* Set the p_data pointer to the actual location of moved data */

		p_data	= Buffer_a_start_data;


	}


		/* Check if splitting is necessary */

	if (data_size <= Mppp_sap_data_no_split_max_size) {

			/*
				No - Transmit the MP frame according to
				the load of each member link.
			*/

		min_byte_count = MP_MX_BYTE_COUNT;	/* Max value */

			/* Search for the least loaded member link connection */

		for (mppp_access_first_sppp_in_bundle ();
				p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle ()) {

			p_mppp_c_prot	= Sppp_cep_p_lcp_info;

			if ((Sppp_cep_data_state == SPPP_ESTABLISHED) &&
/*				(Sppp_cep_data_out_busy == OFF) && */
				(Sppp_cep_link_phase == SPPP_LINK_PHASE_NETWORK)) {

				Sppp_cep_data_p_msg = P_NIL;

					/* Minimum load ? */

				if (Sppp_cep_data_tx_byte_count < min_byte_count) {

						/* Yes - update min count */

					min_byte_count	= Sppp_cep_data_tx_byte_count;

						/* Save the pointer to this context */

					p_sppp_cep_min	= p_sppp_cep;

					min_frame_count = Sppp_cep_data_tx_frame_count;

				} else if (Sppp_cep_data_tx_byte_count == min_byte_count) {

					if (Sppp_cep_data_tx_frame_count < min_frame_count) {

							/* Yes - update min count */

						min_frame_count		= Sppp_cep_data_tx_frame_count;

							/* Save the pointer to this context */

						p_sppp_cep_min	= p_sppp_cep;

					}

				}

			}

		}

			/* Member link to be used to transmit the MP frame */

		p_sppp_cep			= p_sppp_cep_min;
		p_mppp_c_prot		= Sppp_cep_p_lcp_info;

		Sppp_cep_data_p_msg = p_rcv_msg;
		p_rcv_msg			= P_NIL;

			/* Beging and End bits */

		Sppp_cep_data_be	= MP_BE_BEGIN_END;

			/* Return OK */

		MPPP_DBG_LEAVE ();

		return (OK);
	}

		/* Initialize the last valid context pointers */

	p_sppp_cep_last		= P_NIL;
	p_mppp_c_prot_last	= P_NIL;

		/* This frame should be splitted before transmission */

	for (mppp_access_first_sppp_in_bundle ();
			p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle ()) {

		p_mppp_c_prot	= Sppp_cep_p_lcp_info;

		if ((Sppp_cep_data_state == SPPP_ESTABLISHED) &&
/*			(Sppp_cep_data_out_busy == OFF) && */
			(Sppp_cep_link_phase == SPPP_LINK_PHASE_NETWORK)) {

			p_sppp_cep_last		= p_sppp_cep;
			p_mppp_c_prot_last	= p_mppp_c_prot;

			Sppp_cep_data_p_msg	= P_NIL;

				/*
					If first member link, reuse the received
					message if LIB	ON
				*/

			if (Is_sppp_first_in_bundle ()) {

				if (R_msg_lib == ON) {

						/* Reuse the received buffer */

					Sppp_cep_data_p_msg = p_rcv_msg;
					p_rcv_msg			= P_NIL;

				} else {

						/* Allocate a new message */

					p_msg = Sppp_cep_data_p_msg = Alloc_msg ();

						/* Copy usefull data from *p_rcv_msg to *p_msg */

					Memcpy_far ((char FAR *)p_msg,
								(char FAR *)p_rcv_msg,
								(uint)(R_msg_data_offset + R_msg_data_size));

						/* Increment the message counter in the buffer */

					if ((p_buffer = R_msg_p_buffer) != P_NIL) {
						It_disable ();
							Buffer_link_count++;
						It_enable ();
					}

					p_rcv_msg = P_NIL;
				}

					/* BEGIN bit */

				Sppp_cep_data_be	= MP_BE_BEGIN;

			} else {

					/*
						Not the first member link in the bundle.
						Allocate a new message
					*/

				if ((Sppp_cep_data_p_msg = Alloc_msg ()) != P_NIL) {

						/* Middle bits */

					Sppp_cep_data_be = MP_BE_NEXT;

				}

			}

		}

	}

		/* END bit */

	p_sppp_cep		= p_sppp_cep_last;
	p_mppp_c_prot	= p_mppp_c_prot_last;

#	if ASSERT == ON

			/* We should not fail here */

		if ((p_sppp_cep == P_NIL) || (p_mppp_c_prot == P_NIL)) {
			Trap (TRAP_MPPP_NULL_POINTER, "mp_split_frame");
		}

#	endif

	Sppp_cep_data_be |= MP_BE_END;

		/* Splitting process */

	remaining_data_size = data_size;

	for (mppp_access_first_sppp_in_bundle ();
			p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle ()) {

		p_mppp_c_prot	= Sppp_cep_p_lcp_info;

		if ((Sppp_cep_data_state == SPPP_ESTABLISHED) &&
/*			(Sppp_cep_data_out_busy == OFF) && */
			(Sppp_cep_link_phase == SPPP_LINK_PHASE_NETWORK)) {

			if (Is_sppp_first_in_bundle ()) {

				sppp_data_size			= (ushort)((((ulong)data_size *	 Sppp_cep_link_speed)) / Mppp_cep_sppp_total_link_speed);
				remaining_data_size	   -= sppp_data_size;

#				if MESSAGE_SEND_DATA == ON	/* { */

						/* Message or buffer */

/*$$$*/				if (sppp_data_size <= (ushort)(Message_data_lgth - header_size - PPP_UI_ADD_CTRL_LGTH)) {

						p_msg = Sppp_cep_data_p_msg;

						if (p_buffer != P_NIL) {

							L_msg_data_offset	   += (header_size+PPP_UI_ADD_CTRL_LGTH);
							p_sppp_data				= L_msg_a_start_data;
							L_msg_data_size			= sppp_data_size;

								/* Copy the fragment data in message or buffer data area */

							Memcpy_far ((char FAR *)p_sppp_data,
										(char FAR *)p_data,
										(uint)sppp_data_size);

							L_msg_p_buffer	= P_NIL;

							if (p_buffer_rel != P_NIL) {
								Free_buffer (p_buffer_rel);
							}
							p_buffer_rel	= p_buffer;

						} else {

							L_msg_data_offset	   += (header_size+PPP_UI_ADD_CTRL_LGTH);
							L_msg_data_size			= sppp_data_size;
							p_buffer_rel			= P_NIL;
						}

					} else

#				endif	/* MESSAGE_SEND_DATA } */

					/* Do not add any code here !!! */

				{

						/* Update the  buffer header */

					if ((Buffer_data_offset - BUFFER_HEADER_SIZE) < (header_size+PPP_UI_ADD_CTRL_LGTH)) {
						Buffer_data_offset	+= (header_size+PPP_UI_ADD_CTRL_LGTH);
					}

					p_sppp_data				= Buffer_a_start_data;
					Buffer_data_size		= sppp_data_size;
				}

			} else {

				if ((p_msg = Sppp_cep_data_p_msg) != P_NIL) {

					sppp_data_size	= (ushort)((((ulong)data_size *	 Sppp_cep_link_speed)) / Mppp_cep_sppp_total_link_speed);

						/* Rectify round error if any */

					if (((remaining_data_size -= sppp_data_size) > 0) &&
						 (remaining_data_size < Mppp_cep_used_sppp_nb)) {
						sppp_data_size += (ushort)remaining_data_size;
					}

#					if MESSAGE_SEND_DATA == ON	/* { */

							/* Message or buffer */

						if (sppp_data_size <= (ushort)(Message_data_lgth - header_size - PPP_UI_ADD_CTRL_LGTH)) {

							L_msg_data_offset	   += (header_size+PPP_UI_ADD_CTRL_LGTH);
							p_sppp_data				= L_msg_a_start_data;
							L_msg_data_size			= sppp_data_size;

						} else

#					endif	/* MESSAGE_SEND_DATA } */

						/* Do not add any code here */

					{

							/* Allocate a new buffer */

						p_buffer				= Alloc_buffer ();
						Buffer_data_offset	   += (header_size+PPP_UI_ADD_CTRL_LGTH);
						p_sppp_data				= Buffer_a_start_data;
						Buffer_data_size		= sppp_data_size;
						L_msg_init_link_buffer;					/* init the linked buffer address or P_NIL */
					}

						/* Copy the fragment data in message or buffer data area */

					Memcpy_far ((char FAR *)p_sppp_data,
									(char FAR *)p_data,
										(uint)sppp_data_size);

				}

			}

		}

			/* Next data to split pointer */

		p_data += sppp_data_size;
	}


		/* Release Buffer ? */

	if (p_buffer_rel != P_NIL) {
		Free_buffer (p_buffer_rel);
	}

	MPPP_DBG_LEAVE ();
	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_tx_frame - implements the MP frame transmission on each
				selected member link connection.

Usage			void mp_tx_frame ();

Common constants and declarations : mp.h

Common objects : . send_fr_mp - MP frame header structure of frame to send,

*--------------------------------------------------------------------------*/

void mp_tx_frame ()
{
	MPPP_DBG_FUNC ("mp_tx_frame()")

	uchar			FAR *p_data;			/* data pointer */
	struct sppp_cep FAR *p_sppp_cep_save;	/* saved pointer */
	struct buffer	FAR *p_buffer;			/* pointer to local buffer */
	mppp_modulo_t		sending_modulo;
	uchar				header_size;		/* actual MP header size */

	MPPP_DBG_ENTER ();

		/* Set the kind of MP header we have to send */

	if (Mppp_cep_ack_negot & LCP_NEG_SSNHF) {
		sending_modulo	= MP_MX_SHORT_MODULO;
		header_size		= MP_SHORT_HEADER_SIZE;
	} else {
		sending_modulo	= MP_MX_LONG_MODULO;
		header_size		= MP_LONG_HEADER_SIZE;
	}

	for (mppp_access_first_sppp_in_bundle ();
		p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle ()) {

		p_mppp_c_prot	= Sppp_cep_p_lcp_info;

		if ((Sppp_cep_data_state == SPPP_ESTABLISHED) &&
/*			(Sppp_cep_data_out_busy == OFF) && */
			(Sppp_cep_link_phase == SPPP_LINK_PHASE_NETWORK)) {

				/* Message to Tx on this Single Link ? */

			if ((p_snd_msg = Sppp_cep_data_p_msg) != P_NIL) {

				if ((p_buffer = S_msg_p_buffer) != P_NIL) {

					Buffer_data_size	+= (header_size+PPP_UI_ADD_CTRL_LGTH);		/* ajust the data size */
					Buffer_data_offset	-= (header_size+PPP_UI_ADD_CTRL_LGTH);		/* adjust data offset */

#					if ASSERT == ON

						if (Buffer_data_offset < BUFFER_HEADER_SIZE) {
							Trap (TRAP_MPPP_NO_HOLE, "mp_tx_frame");
						}

#					endif

					p_data	= Buffer_a_start_data;

				} else {

					if ((S_msg_data_size + (header_size+PPP_UI_ADD_CTRL_LGTH)) < Message_data_lgth) {

						S_msg_data_size		+= (header_size+PPP_UI_ADD_CTRL_LGTH);		/* adjust the data size */
						S_msg_data_offset	-= (header_size+PPP_UI_ADD_CTRL_LGTH);		/* adjust data offset */

#						if ASSERT == ON

							if (S_msg_data_offset < MESSAGE_HEADER_SIZE) {
								Trap (TRAP_MPPP_NO_HOLE, "mp_tx_frame");
							}

#						endif

						p_data = S_msg_a_start_data;

					} else {

							/* A buffer is necessary to convey data */

						p_buffer			= Alloc_buffer ();

						Buffer_data_size 	= (S_msg_data_size + (header_size+PPP_UI_ADD_CTRL_LGTH));		/* adjust the data size */
						S_msg_data_size		= 0;

						Memcpy_far ((char FAR *)Buffer_a_start_data,
										(char FAR *)S_msg_a_start_data,
											(uint)Buffer_data_size);

						S_msg_init_link_buffer;

					}

				}

					/*
						Build the MP control field
						Load PPP PID header

						FF 03 PID(H) PID(L)
					*/

				Mppp_put_char (PPP_UI_ADD_VAL, p_data);
				Mppp_put_char (PPP_UI_CTRL_VAL, p_data);

				S_mp_load_pid (PPP_PROT_MP);

					/* Load the BE bits and the sequence number */

				if (Mppp_cep_ack_negot & LCP_NEG_SSNHF) {
					S_mp_load_short (Sppp_cep_data_be, Mppp_cep_mvs);
				} else {
					S_mp_load_long (Sppp_cep_data_be, Mppp_cep_mvs);
				}

					/*
						Transmit the MP frame
						Update the byte TX count
					*/

				if (((Sppp_cep_data_tx_byte_count += S_data_size) > MP_MX_BYTE_COUNT) ||
					(++Sppp_cep_data_tx_frame_count > MP_MX_FRAME_COUNT)) {

						/* Save the pointer to the context */

					p_sppp_cep_save = p_sppp_cep;

					for (mppp_access_first_sppp_in_bundle ();
						p_sppp_cep != P_NIL; mppp_access_next_sppp_in_bundle ()) {

						p_mppp_c_prot	= Sppp_cep_p_lcp_info;

						if ((Sppp_cep_data_state == SPPP_ESTABLISHED) &&
/*							(Sppp_cep_data_out_busy == OFF) && */
							(Sppp_cep_link_phase == SPPP_LINK_PHASE_NETWORK)) {

							if (Sppp_cep_data_tx_byte_count > MP_MX_BYTE_COUNT) {
								Sppp_cep_data_tx_byte_count	 = 0;
							}
							if (Sppp_cep_data_tx_frame_count > MP_MX_FRAME_COUNT) {
								Sppp_cep_data_tx_frame_count  = 0;
							}

						}

					}

						/* Restore the pointer to the context */

					p_sppp_cep		= p_sppp_cep_save;
					p_mppp_c_prot	= Sppp_cep_p_lcp_info;

				}

					/* Transmit DATA frame */

				S_msg_nai		= Sppp_cep_data_nai;
				S_msg_sapi		= Sppp_cep_data_sapi;
				S_msg_conn_id	= Sppp_cep_data_conn_id;

					/* Queue this message */

				mppp_in_sppp_tx_queue ();

				mppp_snd_data_msg_to_peer (Sppp_cep_data_entity_id, Mppp_cep_accm_to_peer);

					/* Increment the MV (S) */

				Mp_inc_v_modulo (Mppp_cep_mvs, sending_modulo);
			}

		}

	}

	MPPP_DBG_LEAVE ();

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mp_merge_fragment merges fragmented data from the fragment
				assembly queue to the p_snd_msg recombined data.
				All the fragments which are in the assembly queue are
				ordered.

Usage			void mp_merge_fragment	();

Return code		p_buffer points the recombined data.

Common : mp context, p_snd_data.

*--------------------------------------------------------------------------*/

void mp_merge_fragment ()
{
	MPPP_DBG_FUNC ("mp_merge_fragment()")

	struct message	FAR *p_msg;				/* Message pointer temporary */
	uchar			FAR *p_data;			/* Data pointer temporary */
	uchar			FAR *p_start_data;		/* first data pointer  */
	uchar			FAR *p_merge_data;		/* current merging data pointer	 */
	struct buffer	FAR *p_buff_recombined; /* Buffer pointer block 0 */
	ushort				data_size;			/* current data size */
	uchar				nb;					/* fragment counter */
	uchar				header_size;		/* actual MP header size */

	MPPP_DBG_ENTER ();


		/* Set the kind of MP header we receive from the peer */

	if (Mppp_cep_peer_ack_negot & LCP_NEG_SSNHF) {
		header_size		= MP_SHORT_HEADER_SIZE;
	} else {
		header_size		= MP_LONG_HEADER_SIZE;
	}


		/*
			Process the fragment assembly queue
			(ordered queue finishing with a END bit).
		*/


	Free_msg (p_rcv_msg);
	p_rcv_msg			= P_NIL;
	p_buff_recombined	= P_NIL;

	p_msg = mp_faq_get_first_msg ();

mp_merge_fragment_restart:

	for (nb = 0; p_msg != P_NIL; nb++, p_msg = mp_faq_get_first_msg ()) {

			/* Data fragment in buffer or message ? */

		if ((p_buffer = L_msg_p_buffer) != P_NIL) {

				/* Data in buffer */

			p_data			= Buffer_a_start_data;
			data_size		= Buffer_data_size;

		} else {

				/* Data in message */

			p_data			= L_msg_a_start_data;
			data_size		= L_msg_data_size;
		}
			/* First fragment of the thread ? */

		if (nb == 0) {

				/* Check BEGIN bit */

			if (Get_r_mp_b) {

					/*
						First fragment : if no buffer, allocate one and
						copy the first fragment data into it.
					*/

				if (p_buffer == P_NIL) {

					p_buffer = Alloc_buffer ();


						/* Copy data in the buffer */

					Memcpy_far ((char FAR *)Buffer_a_first_data,
								(char FAR *)p_data,
								data_size);

				} else {

					L_msg_p_buffer = P_NIL;

				}

					/* Init starting variables */

				p_start_data		= Buffer_a_start_data;
				p_merge_data		= p_start_data + data_size;

					/* Return message and buffer */

				p_rcv_msg			= p_msg;
				p_buff_recombined	= p_buffer;

			} else {

					/* Discard until BEGIN bit or end of queue */

				break;
			}

		} else {

			if (Get_r_mp_b) {

					/* BEGIN fragment : restart the merge process */

				goto mp_merge_fragment_restart;

			} else {

					/*
						Check for enough room in the buffer
						for moving the data.
					*/

				if ((ushort)((p_merge_data + data_size - header_size) - p_start_data) < (Buffer_data_lgth + BUFFER_HEADER_SIZE - Buffer_data_offset)) {

						/* Copy the fragment data in the merging buffer */

					Memcpy_far ((char FAR *)p_merge_data,
								(char FAR *)p_data + header_size,
								data_size - header_size);

						/* Update the merging pointer */

					p_merge_data += (data_size - header_size);

						/* Free the current fragment data message and buffer */

					Free_msg (p_msg);

				} else {

						/* Merging buffer overflow --> discard */

					break;
				}

			}

		}

	}

		/* End of fragment assembly queue ? */

	if (p_msg == P_NIL) {

		p_buffer = p_buff_recombined;

			/* Yes - calculate the total data size */

		Buffer_data_size = (ushort)(p_merge_data - p_start_data);

	} else {

			/* No */

			/*
				Discard the current buffer and
				the remaining message of the fragment
				assembly queue until a BEGIN bit.
			*/

		Free_buffer (p_buff_recombined); p_buffer = P_NIL;

		for (p_msg = mp_faq_get_first_msg (); p_msg != P_NIL; p_msg = mp_faq_get_first_msg ()) {

			p_data = L_a_data;

				/* If BEGIN bit - restart the merging process */

			if (Get_r_mp_b) {
				goto mp_merge_fragment_restart;
			} else {
				Free_msg (p_msg); p_buffer = P_NIL;
			}

		}

	}

	MPPP_DBG_LEAVE ();
}


/* EOF */


