
/*-----------------------------------------------------------------------
 *						 M O D U L E   H E A D E R
 *
 * filename - ana_mppp.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		ana_sdu_mppp	- analysis of an ML PPP packet.
 *
 *		pr_mppp_object - implements the printing of the ML PPP objects.
 *
 *		pr_mppp_state - implements the printing of the current occurrences
 *						 of the ML PPP objects.
 *
 *		pr_mppp_cep - implements the printing of the current mppp_cep
 *					  occurrence.
 *
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "mppp.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if MPPP_SIM_ANALYSER == ON

#	include "simul.h"

#	include "mppp_ext.h"
#	include "lcp.h"

#	if MPPP_BAP == ON
#		include "bacp.h"
#	endif

#if MPPP_PH == ON
#	include "ph_int.h"
#endif

#if MPPP_DL == ON
#	include "dl_int.h"
#endif

#if MPPP_X25 == ON
#	include "x25_int.h"
#endif

#if MPPP_CC == ON
#	include "cc_int.h"
#	include "acu_int.h"
#endif

/*-------------------------------------------------------------------------*/

					/* Flags external */
					/*----------------*/

extern	uint	mppp_pr_object;				/* print objects */
extern	uint	mppp_pr_state;				/* print state */
extern	uint	mppp_decode_packet_flag;	/* decoding of PPP packets */

/*-------------------------------------------------------------------------*/

					/* FUNCTIONS PROTOTYPES */
					/*----------------------*/

#if NEW_FCT_STYLE == ON

	void	mppp_decode_packet 	(uchar FAR *p_data, ushort data_size);

#else

	void	mppp_decode_packet 	();

#endif

/*-------------------------------------------------------------------------*/

					/* Objects printing formats */
					/*--------------------------*/

#define	Pr_mppp_na()	fprintf (f_out, "\n\n\tMPPP NA   nai=%d active=%s", \
									Mppp_na_nai, (Mppp_na_active == ON) ? "ON" : "OFF")


#define	Pr_mppp_cep()	fprintf (f_out, "\n\tMPPP CEP  ces=%d sppp_nb=%d used_nb=%d busy_nb=%d bandwidth=%lu\n\t          s_state=%s d_state=%s", \
									Mppp_cep_ces, Mppp_cep_sppp_nb, Mppp_cep_used_sppp_nb, Mppp_cep_busy_sppp_nb, Mppp_cep_sppp_total_link_speed,	\
									Code_to_text (t_mppp_states,Mppp_cep_sig_state),	\
									Code_to_text (t_mppp_states,Mppp_cep_data_state))


#define	Pr_sppp_na()	fprintf (f_out, "\n\tSPPP NA   nai=%d active=%s", \
									Sppp_na_nai, (Sppp_na_active == ON) ? "ON" : "OFF")


#define	Pr_sppp_cep_1()	fprintf (f_out, "\n\tSPPP CEP  ref=%d type=%s mode=%s s_ent=%s d_ent=%s", \
														Sppp_cep_ref, Code_to_text(t_link_types,Sppp_cep_link_type),	\
														Code_to_text(t_link_modes, Sppp_cep_link_mode),	\
														Code_to_text(t_entity_ids,Sppp_cep_cc_entity_id),	\
														Code_to_text(t_entity_ids,Sppp_cep_data_entity_id))

#define	Pr_sppp_cep_2()	fprintf (f_out, "\n\t          s_sapi=%d d_sapi=%d s_cid=%d d_cid=%d",	\
														Sppp_cep_cc_sapi, Sppp_cep_data_sapi, Sppp_cep_cc_conn_id, Sppp_cep_data_conn_id)

#define	Pr_sppp_cep_3()	fprintf (f_out, "\n\t          s_state=%s d_state=%s d_busy=%s phase=%s", \
														Code_to_text (t_sig_states,Sppp_cep_cc_state),	\
														Code_to_text (t_data_states,Sppp_cep_data_state),	\
														(Sppp_cep_data_out_busy == ON) ? "ON" : "OFF",		\
														Code_to_text (t_ppp_link_phases,Sppp_cep_link_phase))

#define	Pr_sppp_auth()	fprintf (f_out, "\n\tSPPP AUTH L_active=%s L_state=%s P_active=%s P_state=%s", \
														Sppp_cep_p_local_auth_info->active == ON ? "ON" : "OFF",	\
														Code_to_text (t_c_prot_states,Sppp_cep_p_local_auth_info->state),	\
														Sppp_cep_p_peer_auth_info->active == ON ? "ON" : "OFF",	\
														Code_to_text (t_c_prot_states,Sppp_cep_p_peer_auth_info->state))

#define	Pr_sppp_cep()	{Pr_sppp_cep_1();Pr_sppp_cep_2();Pr_sppp_cep_3(); Pr_sppp_auth();}


#define	Pr_mppp_c_prot()	fprintf (f_out, "\n\tCTRL PROT name=%s state=%s", \
														Mppp_c_prot_name,	\
														Code_to_text (t_c_prot_states,Mppp_c_prot_state))


/*-------------------------------------------------------------------------*/

			/* PPP Protocol IDs */

CONST struct code_text t_mppp_pid [] = {
	{PPP_PROT_LCP,		"LCP"},
	{PPP_PROT_BACP,		"BACP"},
	{PPP_PROT_BAP,		"BAP"},
	{PPP_PROT_PAP,		"PAP"},
	{PPP_PROT_CHAP,		"CHAP"},
	{PPP_PROT_MP,		"MP"},
	{PPP_PROT_IPCP,		"IPCP"},
	{PPP_PROT_IP,		"IP"},
	{0,					"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* PPP CP Packet types */

CONST struct code_text t_mppp_c_prot_packet [] = {
	{MPPP_CP_PCK_CONFIG_RQ,			"CONFIGURE REQUEST"},
	{MPPP_CP_PCK_CONFIG_ACK,		"CONFIGURE ACK"},
	{MPPP_CP_PCK_CONFIG_NAK,		"CONFIGURE NAK"},
	{MPPP_CP_PCK_CONFIG_REJ,		"CONFIGURE REJECT"},
	{MPPP_CP_PCK_TERM_RQ,			"TERMINATE REQUEST"},
	{MPPP_CP_PCK_TERM_ACK,			"TERMINATE ACK"},
	{MPPP_CP_PCK_CODE_REJ,			"CODE REJECT"},
	{MPPP_CP_PCK_PROTOCOL_REJ,		"PROTOCOL REJECT"},
	{MPPP_CP_PCK_ECHO_RQ,			"ECHO REQUEST"},
	{MPPP_CP_PCK_ECHO_REPLY,		"ECHO REQUEST"},
	{MPPP_CP_PCK_DISCARD_RQ,		"DISCARD REQUEST"},
	{MPPP_CP_PCK_IDENTIFICATION,	"IDENTIFICATION"},
	{MPPP_CP_PCK_TIME_REMAINING,	"TIME_REMAINING"},
	{0,								"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* PPP PAP Packet types */

CONST struct code_text t_mppp_pap_packet [] = {
	{MPPP_CP_PCK_PAP_AUTH_RQ,		"AUTHENTICATE REQUEST"},
	{MPPP_CP_PCK_PAP_AUTH_ACK,		"AUTHENTICATE ACK"},
	{MPPP_CP_PCK_PAP_AUTH_NAK,		"AUTHENTICATE NAK"},
	{0,								"NONAME"},
};

/*-------------------------------------------------------------------------*/

			/* PPP CHAP Packet types */

CONST struct code_text t_mppp_chap_packet [] = {
	{MPPP_CP_PCK_CHAP_CHALLENGE,	"CHALLENGE"},
	{MPPP_CP_PCK_CHAP_RESPONSE,		"RESPONSE"},
	{MPPP_CP_PCK_CHAP_SUCCESS,		"SUCCESS"},
	{MPPP_CP_PCK_CHAP_FAILURE,		"FAILURE"},
	{0,								"NONAME"},
};

/*-------------------------------------------------------------------------*/

			/* PPP LCP Configuration Options */

CONST struct code_text t_mppp_lcp_opt [] = {
	{LCP_OPT_MRU,				"MRU"},
	{LCP_OPT_ACCM,				"ACCM"},
	{LCP_OPT_AUTH,				"AUTH"},
	{LCP_OPT_LQM,				"LQM"},
	{LCP_OPT_MAGIC,				"MACIC"},
	{LCP_OPT_PFC,				"PFC"},
	{LCP_OPT_ACFC,				"ACFC"},
	{LCP_OPT_FCS,				"FCS ALT"},
	{LCP_OPT_PADDING,			"PADDING"},
	{LCP_OPT_NUMBERED,			"NUMBERED"},
	{LCP_OPT_CBACK,				"CALLBACK"},
	{LCP_OPT_COMPOUND,			"COMPOUND"},
	{LCP_OPT_MRRU,				"MRRU"},
	{LCP_OPT_SSNHF,				"SSNHF"},
	{LCP_OPT_EDO,				"EDO"},
	{LCP_OPT_LDO,				"LDO"},
	{0,							"NONAME"},
};

/*-------------------------------------------------------------------------*/

			/* PPP BACP Configuration Options */

CONST struct code_text t_mppp_bacp_opt [] = {

#	if MPPP_BAP == ON
		{BACP_OPT_FAVP,		"FAVP"},
#	endif

	{0,					"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* ML PPP  states */

CONST struct code_text t_mppp_states [] = {

	{MPPP_RELEASED,				"RELEASED"},
	{MPPP_ESTABLISHED,			"ESTABLISHED"},
	{MPPP_AWAITING_EST,			"AWAITING EST"},
	{MPPP_AWAITING_REL,			"AWAITING REL"},
	{MPPP_AWAITING_SPPP_EST,	"AWAITING SPPP EST"},
	{MPPP_AWAITING_SPPP_REL,	"AWAITING SPPP REL"},
	{MPPP_AWAITING_RESET_CO,	"AWAITING RESET CO"},
	{0,							"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* Control protocol options negotiation states */

CONST struct code_text t_c_prot_states [] = {

	{MPPP_CP_STATE_INITIAL,				"INITIAL_0"},
	{MPPP_CP_STATE_STARTING,			"STARTING_1"},
	{MPPP_CP_STATE_CLOSED,				"CLOSED_2"},
	{MPPP_CP_STATE_STOPPED,				"STOPPED_3"},
	{MPPP_CP_STATE_CLOSING,				"CLOSING_4"},
	{MPPP_CP_STATE_STOPPING,			"STOPPING_5"},
	{MPPP_CP_STATE_REQUEST_SENT,		"REQ-SENT_6"},
	{MPPP_CP_STATE_ACK_RECEIVED,		"ACK-RECEIVED_7"},
	{MPPP_CP_STATE_ACK_SENT,			"ACK-SENT_8"},
	{MPPP_CP_STATE_OPENED,				"OPENED_9"},
	{MPPP_CP_STATE_REQUEST_RECEIVED,	"REQ-RECEIVED_a"},
	{MPPP_CP_STATE_TERM_RECEIVED,		"TERM-RECEIVED_b"},
	{MPPP_CP_STATE_AUTH_SENT,			"AUTH-REQ-SENT_c"},
	{MPPP_CP_STATE_AUTH_RECEIVED,		"AUTH-REQ-RECEIVED_d"},
	{MPPP_CP_STATE_CHALLENGE_SENT,		"CHALLENGE-SENT_e"},
	{MPPP_CP_STATE_CHALLENGE_RECEIVED,	"CHALLENGE-RECEIVED_f"},
	{MPPP_CP_STATE_RESPONSE_SENT,		"RESPONSE-SENT_g"},
	{MPPP_CP_STATE_RESPONSE_RECEIVED,	"RESPONSE-RECEIVED_h"},
	{MPPP_CP_STATE_AUTH_SUCCESS,		"AUTH-SUCCESS_i"},
	{MPPP_CP_STATE_AUTH_FAILURE,		"AUTH-FAILURE_j"},

	{0,									"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* PPP link states */

CONST struct code_text t_ppp_link_phases [] = {

	{SPPP_LINK_PHASE_DEAD,			"DEAD"},
	{SPPP_LINK_PHASE_ESTABLISHMENT,	"ESTABLISHMENT"},
	{SPPP_LINK_PHASE_AUTHENTICATE,	"AUTHENTICATE"},
	{SPPP_LINK_PHASE_NETWORK,		"NETWORK"},
	{SPPP_LINK_PHASE_TERMINATION,	"TERMINATION"},

	{0,								"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* Member links types */

CONST struct code_text t_link_types [] = {


	{SPPP_LINK_ISDN_D,				"D-Channel"},
	{SPPP_LINK_ISDN_B,				"B-Channel"},
	{SPPP_LINK_X25,					"X25 VC"},
	{SPPP_LINK_ANALOG,				"Analog"},
	{SPPP_LINK_SW_DIGITAL,			"Switched Digital (non ISDN)"},

	{0,								"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* Member links modes */

CONST struct code_text t_link_modes [] = {


	{SPPP_MODE_SYNC,			"Synchronous"},
	{SPPP_MODE_ASYN,			"Asynchronous"},

	{0,							"NONAME"},
};


/*-------------------------------------------------------------------------*/

		/* Signalling connection states */


CONST struct code_text t_sig_states [] = {

	{MPPP_CC_STATE_NULL,			"NULL"},
	{MPPP_CC_STATE_CALL_INIT,		"CALL INIT"},
	{MPPP_CC_STATE_CALL_IN,			"CALL IN"},
	{MPPP_CC_STATE_CALL_RS,			"CALL RS"},
	{MPPP_CC_STATE_ACTIVE,			"CALL ACTIVE"},
	{MPPP_CC_STATE_DISC_RQ,			"DISC RQ"},
	{MPPP_CC_STATE_DISC_IN,			"DISC IN"},
	{MPPP_CC_STATE_DISC_RS,			"DISC RS"},
	{0,								"NONAME"},

};


/*-------------------------------------------------------------------------*/

		/* Data connection states */


CONST struct code_text t_data_states [] = {

	{SPPP_ESTABLISHED,				"ESTABLISHED"},
	{SPPP_RELEASED,					"RELEASED"},
	{SPPP_AWAITING_EST,				"AWAITING EST"},
	{SPPP_AWAITING_REL,				"AWAITING REL"},
	{0,								"NONAME"},

};


/*-------------------------------------------------------------------------*/

			/* Entities names list */

CONST struct code_text t_entity_ids [] = {
	{ENT_APPLI,				"APPLI"},
	{ENT_MPPP,				"ML-PPP"},
	{ENT_DTE_INT,			"DTE-INT"},
	{ENT_CC,				"CC"},
	{ENT_X25,				"X25"},
	{ENT_MX25,				"M25"},
	{ENT_DL,				"DL"},
	{ENT_DL_D,				"DLD"},
	{ENT_DL_B,				"DLB"},
	{ENT_PH,				"PH"},
	{ENT_PH_B,				"PHB"},
	{ENT_SM,				"SM"},
	{ENT_TI,				"TI"},
	{ENT_NIL,				"ENT_NIL"},
	{0,						"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* Timer events */

CONST struct code_text t_ti_events [] = {

	{MPPP_LCP_TI_RESTART,		"TI-LCP-RESTART"},
	{MPPP_PAP_TI_RESTART,		"TI-PAP-RESTART"},

#	if MPPP_BAP == ON
		{MPPP_BACP_TI_RESTART,	"TI-BACP-RESTART"},
#	endif

	{0,							"NONAME"},
};

/*-------------------------------------------------------------------------*/

		/* Call Control interface messages */

CONST struct code_text t_mppp_cc_prim[] = {

#if MPPP_CC == ON

	{ACU_CONN_RQ,				"ACU_CONN_RQ"},
	{ACU_CONN_RS,				"ACU_CONN_RS"},
	{ACU_CLEAR_RQ,				"ACU_CLEAR_RQ"},
	{ACU_CLEAR_RS,				"ACU_CLEAR_RS"},
	{ACU_INFO_RQ,				"ACU_INFO_RQ"},
	{ACU_INIT_RQ,				"ACU_INIT_RQ"},
	{ACU_SETPARM_RQ,			"ACU_SETPARM_RQ"},
	{ACU_DIGIT_RQ,				"ACU_DIGIT_RQ"},
	{ACU_FACILITY_RQ,			"ACU_FACILITY_RQ"},
	{ACU_SUSPEND_RQ,			"ACU_SUSPEND_RQ"},
	{ACU_RESUME_RQ,				"ACU_RESUME_RQ"},
	{ACU_TEST_RQ,				"ACU_TEST_RQ"},

	{ACU_CONN_IN,				"ACU_CONN_IN"},
	{ACU_CONN_CO,				"ACU_CONN_CO"},
	{ACU_CLEAR_IN,				"ACU_CLEAR_IN"},
	{ACU_CLEAR_CO,				"ACU_CLEAR_CO"},
	{ACU_ALERT_IN,				"ACU_ALERT_IN"},
	{ACU_INFORMATION_IN,		"ACU_INFORMATION_IN"},
	{ACU_PROGRESS_IN,			"ACU_PROGRESS_IN"},
	{ACU_DIGIT_CO,				"ACU_DIGIT_CO"},
	{ACU_FACILITY_IN,			"ACU_FACILITY_IN"},
	{ACU_FACILITY_CO,			"ACU_FACILITY_CO"},
	{ACU_SUSPEND_CO,			"ACU_SUSPEND_CO"},
	{ACU_RESUME_CO,				"ACU_RESUME_CO"},
	{ACU_TEST_CO,				"ACU_TEST_CO"},
	{ACU_SETUP_REPORT_IN,		"ACU_SETUP_REPORT_IN"},

#endif

	{0,							"NONAME"},
};

/*-------------------------------------------------------------------------*/

		/* PH entity interface messages */


CONST struct code_text t_mppp_ph_prim [] = {

#if MPPP_PH == ON

	{PH_ACT_RQ,				"PH_ACT_RQ"},
	{PH_ACT_IN,				"PH_ACT_IN"},

	{PH_DEA_RQ,				"PH_DEA_RQ"},
	{PH_DEA_IN,				"PH_DEA_IN"},

	{PH_DA_RQ,				"PH_DA_RQ"},
	{PH_DA_IN,				"PH_DA_IN"},

	{PH_INT_SYNC_RQ,		"PH_INT_SYNC_RQ"},
	{PH_INT_SYNC_CO,		"PH_INT_SYNC_CO"},

	{PH_BUSY_RQ,			"PH_BUSY_RQ"},
	{PH_BUSY_IN,			"PH_BUSY_IN"},
	{PH_CLEAR_BUSY_RQ,		"PH_CLEAR_BUSY_RQ"},
	{PH_CLEAR_BUSY_IN,		"PH_CLEAR_BUSY_IN"},

#endif

	{0,						"NONAME"},
};


/*-------------------------------------------------------------------------*/

		/* DL entity interface messages */


CONST struct code_text t_mppp_dl_prim [] = {

#if MPPP_DL == ON

	{DL_EST_RQ,				"DL_EST_RQ"},
	{DL_EST_IN,				"DL_EST_IN"},
	{DL_EST_CO,				"DL_EST_CO"},
	{DL_REL_RQ,				"DL_REL_RQ"},
	{DL_REL_IN,				"DL_REL_IN"},
	{DL_REL_CO,				"DL_REL_CO"},
	{DL_DA_RQ,				"DL_DA_RQ"},
	{DL_DA_IN,				"DL_DA_IN"},
	{DL_COMMIT_RQ,			"DL_COMMIT_RQ"},
	{DL_COMMIT_CO,			"DL_COMMIT_CO"},
	{DL_BUSY_RQ,			"DL_BUSY_RQ"},
	{DL_CLEAR_BUSY_RQ,		"DL_CLEAR_BUSY_RQ"},
	{DL_BUSY_IN,			"DL_BUSY_IN"},
	{DL_CLEAR_BUSY_IN,		"DL_CLEAR_BUSY_IN"},
	{DL_INT_SYNC_RQ,		"DL_INT_SYNC_RQ"},
	{DL_INT_SYNC_CO,		"DL_INT_SYNC_CO"},

#endif

	{0,						"NONAME"}
};

/*-------------------------------------------------------------------------*/

			/* ML PPP Control Protocol interface mesages */

CONST struct code_text t_mppp_ext_prim [] = {

	{MPPP_EXT_OPEN_RQ,			"MPPP_EXT_OPEN_RQ"},
	{MPPP_EXT_OPEN_IN,			"MPPP_EXT_OPEN_IN"},
	{MPPP_EXT_OPEN_CO,			"MPPP_EXT_OPEN_CO"},

	{MPPP_EXT_CLOSE_RQ,			"MPPP_EXT_CLOSE_RQ"},
	{MPPP_EXT_CLOSE_IN,			"MPPP_EXT_CLOSE_IN"},
	{MPPP_EXT_CLOSE_CO,			"MPPP_EXT_CLOSE_CO"},

	{MPPP_EXT_ADD_LINK_RQ,		"MPPP_EXT_ADD_LINK_RQ"},
	{MPPP_EXT_ADD_LINK_IN,		"MPPP_EXT_ADD_LINK_IN"},
	{MPPP_EXT_ADD_LINK_CO,		"MPPP_EXT_ADD_LINK_CO"},

	{MPPP_EXT_DROP_LINK_RQ,		"MPPP_EXT_DROP_LINK_RQ"},
	{MPPP_EXT_DROP_LINK_IN,		"MPPP_EXT_DROP_LINK_IN"},
	{MPPP_EXT_DROP_LINK_CO,		"MPPP_EXT_DROP_LINK_CO"},

	{MPPP_EXT_ERROR_IN,			"MPPP_EXT_ERROR_IN"},

	{0,							"NONAME"},
};


/*-------------------------------------------------------------------------*/

			/* ML PPP signalling interface mesages */

CONST struct code_text t_mppp_sig_prim [] = {

#if MPPP_CC == ON

	{MPPP_ACU_CONN_RQ,				"MPPP_ACU_CONN_RQ"},
	{MPPP_ACU_CONN_RS,				"MPPP_ACU_CONN_RS"},
	{MPPP_ACU_CLEAR_RQ,				"MPPP_ACU_CLEAR_RQ"},
	{MPPP_ACU_CLEAR_RS,				"MPPP_ACU_CLEAR_RS"},
	{MPPP_ACU_INFO_RQ,				"MPPP_ACU_INFO_RQ"},
	{MPPP_ACU_INIT_RQ,				"MPPP_ACU_INIT_RQ"},
	{MPPP_ACU_SETPARM_RQ,			"MPPP_ACU_SETPARM_RQ"},
	{MPPP_ACU_DIGIT_RQ,				"MPPP_ACU_DIGIT_RQ"},
	{MPPP_ACU_FACILITY_RQ,			"MPPP_ACU_FACILITY_RQ"},
	{MPPP_ACU_SUSPEND_RQ,			"MPPP_ACU_SUSPEND_RQ"},
	{MPPP_ACU_RESUME_RQ,			"MPPP_ACU_RESUME_RQ"},

	{MPPP_ACU_CONN_IN,				"MPPP_ACU_CONN_IN"},
	{MPPP_ACU_CONN_CO,				"MPPP_ACU_CONN_CO"},
	{MPPP_ACU_CLEAR_IN,				"MPPP_ACU_CLEAR_IN"},
	{MPPP_ACU_CLEAR_CO,				"MPPP_ACU_CLEAR_CO"},
	{MPPP_ACU_ALERT_IN,				"MPPP_ACU_ALERT_IN"},
	{MPPP_ACU_INFORMATION_IN,		"MPPP_ACU_INFORMATION_IN"},
	{MPPP_ACU_PROGRESS_IN,			"MPPP_ACU_PROGRESS_IN"},
	{MPPP_ACU_DIGIT_CO,				"MPPP_ACU_DIGIT_CO"},
	{MPPP_ACU_FACILITY_IN,			"MPPP_ACU_FACILITY_IN"},
	{MPPP_ACU_FACILITY_CO,			"MPPP_ACU_FACILITY_CO"},
	{MPPP_ACU_SUSPEND_CO,			"MPPP_ACU_SUSPEND_CO"},
	{MPPP_ACU_RESUME_CO,			"MPPP_ACU_RESUME_CO"},

#endif

	{0,								"NONAME"},

};

/*-------------------------------------------------------------------------*/

			/* ML PPP signalling management */

CONST struct code_text t_mppp_sig_mgt_prim [] = {

#if MPPP_CC == ON

	{MPPP_ACU_TEST_RQ,				"MPPP_ACU_TEST_RQ"},
	{MPPP_ACU_TEST_CO,				"MPPP_ACU_TEST_CO"},
	{MPPP_ACU_SETUP_REPORT_IN,		"MPPP_ACU_SETUP_REPORT_IN"},

#endif

	{0,								"NONAME"},

};

/*-------------------------------------------------------------------------*/

			/* ML PPP data interface mesages */

CONST struct code_text t_mppp_data_prim [] = {

	{MPPP_ACT_RQ,			"MPPP_ACT_RQ"},
	{MPPP_ACT_IN,			"MPPP_ACT_IN"},

	{MPPP_DEA_RQ,			"MPPP_DEA_RQ"},
	{MPPP_DEA_IN,			"MPPP_DEA_IN"},

	{MPPP_DA_RQ,			"MPPP_DA_RQ"},
	{MPPP_DA_IN,			"MPPP_DA_IN"},

	{MPPP_INT_SYNC_RQ,		"MPPP_INT_SYNC_RQ"},
	{MPPP_INT_SYNC_CO,		"MPPP_INT_SYNC_CO"},

	{MPPP_BUSY_RQ,			"MPPP_BUSY_RQ"},
	{MPPP_BUSY_IN,			"MPPP_BUSY_IN"},
	{MPPP_CLEAR_BUSY_RQ,	"MPPP_CLEAR_BUSY_RQ"},
	{MPPP_CLEAR_BUSY_IN,	"MPPP_CLEAR_BUSY_IN"},

	{MPPP_ERROR_IN,			"MPPP_ERROR_IN"},

	{0,						"NONAME"},
};


/*-------------------------------------------------------------------------*/

uchar ana_sdu_mppp (p_msg)
	struct message FAR *p_msg;
{
	MPPP_DBG_FUNC ("ana_sdu_mppp()")

	uchar				FAR *p_data;
	struct code_text	FAR *p_prim;
	ushort					data_size;

	MPPP_DBG_ENTER ();

	p_prim		= P_NIL;
	p_data		= L_a_data;
	data_size	= L_data_size;

	if ((L_msg_sapi == MPPP_SAPI_SIG) || (L_msg_sapi == MPPP_SAPI_SIG_MGT)) {
		p_prim = (struct code_text *)t_mppp_sig_prim;
	}

	if ((L_msg_sapi == MPPP_SAPI_DATA_SYNC) ||
		((L_msg_sapi == MPPP_SAPI_DATA_ASYN))) {

		p_prim = (struct code_text *)t_mppp_data_prim;
	}

	if (L_msg_sapi == MPPP_SAPI_EXT_EVENTS) {
		p_prim = (struct code_text *)t_mppp_ext_prim;
	}

	if (p_prim != P_NIL) {

		fprintf (f_out, "from=%s to=%s code=%s nai=%-1u sapi=%-d conn_id=%-1u",\
					Code_to_text (t_entity_ids,L_msg_from),
					Code_to_text (t_entity_ids, L_msg_to),
					Code_to_text (p_prim,L_msg_code), L_msg_nai, L_msg_sapi, L_msg_conn_id);

		if ((L_msg_sapi == MPPP_SAPI_DATA_SYNC) || ((L_msg_sapi == MPPP_SAPI_DATA_ASYN))) {

			if ((mppp_decode_packet_flag == ON) &&
				((L_msg_code == MPPP_DA_RQ) ||
				(L_msg_code == MPPP_DA_IN))) {

				mppp_decode_packet (p_data, data_size);
			}
		}

	}

	MPPP_DBG_LEAVE ();

	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

uchar ana_sdu_cc_mppp (p_msg)
	struct message FAR *p_msg;
{
	MPPP_DBG_FUNC ("ana_sdu_cc_mppp()")

	MPPP_DBG_ENTER ();

	fprintf (f_out, "from=%s to=%s code=%s nai=%-1u sapi=%-d conn_id=%-1u",\
				Code_to_text (t_entity_ids,L_msg_from),
				Code_to_text (t_entity_ids, L_msg_to),
				Code_to_text (t_mppp_cc_prim,L_msg_code),
				L_msg_nai, L_msg_sapi, L_msg_conn_id);

	MPPP_DBG_LEAVE ();

	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

uchar ana_sdu_ph_mppp (p_msg)
	struct message FAR *p_msg;
{
	MPPP_DBG_FUNC ("ana_sdu_ph_mppp()")

	MPPP_DBG_ENTER ();

	fprintf (f_out, "from=%s to=%s code=%s nai=%-1u sapi=%-d conn_id=%-1u",\
				Code_to_text (t_entity_ids,L_msg_from),
				Code_to_text (t_entity_ids, L_msg_to),
				Code_to_text (t_mppp_ph_prim,L_msg_code),
				L_msg_nai, L_msg_sapi, L_msg_conn_id);

	if ((mppp_decode_packet_flag == ON) &&
		((L_msg_code == PH_DA_RQ) ||
		(L_msg_code == PH_DA_IN))) {

		mppp_decode_packet (L_a_data, L_data_size);
	}

	MPPP_DBG_LEAVE ();

	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

uchar ana_sdu_dl_mppp (p_msg)
	struct message FAR *p_msg;
{
	MPPP_DBG_FUNC ("ana_sdu_dl_mppp()")

	MPPP_DBG_ENTER ();

	fprintf (f_out, "from=%s to=%s code=%s nai=%-1u sapi=%-d conn_id=%-1u",\
				Code_to_text (t_entity_ids,L_msg_from),
				Code_to_text (t_entity_ids, L_msg_to),
				Code_to_text (t_mppp_dl_prim,L_msg_code),
				L_msg_nai, L_msg_sapi, L_msg_conn_id);

	MPPP_DBG_LEAVE ();

	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

uchar ana_sdu_ti_mppp (p_msg)
	struct message FAR *p_msg;
{
	MPPP_DBG_FUNC ("ana_sdu_ti_mppp()")

	MPPP_DBG_ENTER ();

	fprintf (f_out, "from=%s to=%s code=%s nai=%-1u sapi=%-d conn_id=%-1u",\
				Code_to_text (t_entity_ids,L_msg_from),
				Code_to_text (t_entity_ids, L_msg_to),
				Code_to_text (t_ti_events,L_msg_code),
				L_msg_nai, L_msg_sapi, L_msg_conn_id);

	MPPP_DBG_LEAVE ();

	return (CONTINUE);
}

/*------------------------------------------------------------------------*/

#define	Ppp_pid_to_text(pid)				Code_to_text (t_mppp_pid,pid)
#define	Ppp_cp_packet_type_to_text(type)	Code_to_text (t_mppp_c_prot_packet,type)
#define	Ppp_pap_packet_type_to_text(type)	Code_to_text (t_mppp_pap_packet,type)
#define	Ppp_chap_packet_type_to_text(type)	Code_to_text (t_mppp_chap_packet,type)
#define	Ppp_lcp_opt_to_text(type)			Code_to_text (t_mppp_lcp_opt,type)
#define	Ppp_bacp_opt_to_text(type)			Code_to_text (t_mppp_bacp_opt,type)

void mppp_decode_packet (p_data, data_size)
	uchar	FAR *p_data;
	ushort		data_size;
{
	MPPP_DBG_FUNC ("mppp_decode_packet()")

	uchar	FAR *p_octet;		/* pointer to the currently  parsed octet */
	uchar	FAR *p_next_opt;	/* pointer to the next option */
	ushort		opt_val_ushort; /* option 'ushort' value */
	ushort		ppp_pid; 		/* PPP PID */
	int			lgth;			/* remaining length to parse */
	uchar		opt_type;		/* current option type */
	uchar		opt_lgth;		/* current option length */
	uchar		opt_val_uchar;	/* option 'uchar' value */

	MPPP_DBG_ENTER ();

			/* Initialize the parsing variables */

	lgth	= data_size;
	p_octet	= p_data;

		/* Get the PPP Protocol ID, Packet ID, Packet type, Packet length */

	if ((*p_octet == PPP_UI_ADD_VAL) && (*(p_octet+1) == PPP_UI_CTRL_VAL)) {
		p_octet	+= 2;
		lgth	-= 2;
	}

	Mppp_get_short (ppp_pid, p_octet);

	if (! Mppp_is_prot (ppp_pid)) {

		MPPP_DBG_LEAVE ();
		return;

	}

	lgth	-= 2;
	fprintf (f_out, "\n\tPPP Protocol      = %s\n", Ppp_pid_to_text (ppp_pid));

	Mppp_get_char (opt_val_uchar, p_octet);
	lgth--;

	switch (ppp_pid) {

		case PPP_PROT_LCP:
		case PPP_PROT_BACP:
			fprintf (f_out, "\tPPP Packet Type   = %s\n", Ppp_cp_packet_type_to_text (opt_val_uchar));
			break;

		case PPP_PROT_PAP:
			fprintf (f_out, "\tPPP Packet Type   = %s\n", Ppp_pap_packet_type_to_text (opt_val_uchar));
			break;

		case PPP_PROT_CHAP:
			fprintf (f_out, "\tPPP Packet Type   = %s\n", Ppp_chap_packet_type_to_text (opt_val_uchar));
			break;

		default:
			fprintf (f_out, "\tPPP Packet Type   = Unknown\n");
			break;
	}


	Mppp_get_char (opt_val_uchar, p_octet);
	lgth--;
	fprintf (f_out, "\tPPP Packet Id     = %d\n", opt_val_uchar);

	Mppp_get_short (opt_val_ushort, p_octet);
	lgth	-= 2;
	fprintf (f_out, "\tPPP Packet length = %d\n", opt_val_ushort);

	p_next_opt = p_octet;

	while (lgth > 0) {

		if (! Mppp_is_c_prot (ppp_pid)) {
			break;
		}

		p_octet	= p_next_opt;

			/*
				Check the consistency of this option
				1- is there enough data for the option ?
				2- is the option length field >= 2
				3- is the option length > the remaining data length ?
			*/

		if ((lgth < 2) || (p_octet[1] < 2) || (p_octet[1] > lgth)) {

				/*
					This option is bad, the remaining options in the
					packet will not be parsed.
				*/

			MPPP_DBG_ERROR ("wrong option length");
			MPPP_DBG_LEAVE ();

			return;
		}

			/* Get the option type (1 octet) */

		Mppp_get_char (opt_type, p_octet);

			/* Get the option length (1 octet) */

		Mppp_get_char (opt_lgth, p_octet);

		if (ppp_pid == PPP_PROT_LCP) {
			fprintf (f_out, "\t\t[%-20s] ", Ppp_lcp_opt_to_text (opt_type));
		} else if (ppp_pid == PPP_PROT_BACP) {
			fprintf (f_out, "\t\t[%-20s] ", Ppp_bacp_opt_to_text (opt_type));
		}

			/* Update the remaining length */

		lgth -= opt_lgth;

			/* Set up the pointer to the next option */

		p_next_opt += opt_lgth;

			/* Forward processing according to the option type */

		switch (opt_type) {

				/*$$$ FIXME --- Decode some values */

			default:
				break;

		}

		fprintf (f_out, "\n");

	}

	MPPP_DBG_LEAVE ();

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			pr_mppp_object, pr_mppp_state, pr_mppp_cep - implements the
				printing of ML PPP state.
				pr_mppp_object prints all the objects of the ML PPP
				configuration.
				pr_mppp_state prints the current state of the object
				occurrences pointed by the ML PPP pointer context.
				pr_mppp_cep prints the current state of a ML PPP connection
				Endpoint.

Usage			void pr_mppp_object ();
				void pr_mppp_state	();
				void pr_mppp_cep	();

common constants and declarations : mppp.h

Common objects :	ML PPP objects and ML PPP pointer context

*--------------------------------------------------------------------------*/

		/* Print the state of all the objects of ML PPP configuration */

void pr_mppp_object ()
{
	MPPP_DBG_FUNC ("pr_mppp_object()")

	MPPP_DBG_ENTER ();

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

		/*
			Print the current state of the ML PPP objects
			pointed by p_mppp_na, p_mppp_sap, p_mppp_cep.
		*/

void pr_mppp_state ()
{
	MPPP_DBG_FUNC ("pr_mppp_state()")

	MPPP_DBG_ENTER ();

	if ((mppp_pr_state == ON) && (print_flag == ON)) {

		if (p_mppp_na != P_NIL) {

			Pr_mppp_na ();

			if (p_mppp_cep != P_NIL) {
				Pr_mppp_cep ();
			}

			if (p_sppp_na != P_NIL) {
				Pr_sppp_na ();
			}

			if (p_sppp_cep != P_NIL) {
				Pr_sppp_cep ();
			}

			if (p_mppp_c_prot != P_NIL) {
				Pr_mppp_c_prot ();
			}

		}

	}

	MPPP_DBG_LEAVE ();

}

/*-------------------------------------------------------------------------*/

#endif		/* MPPP_SIM_ANALYSER } */

/*EOF*/
