
/*-------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - s_mppp.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		  main - implements the main function of a server composed of
 *				 the :
 *
 *					MPPP (Multi Link Point-to-Point Protocol entity)
 *					+ SM + TI.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

					/* Include files */
					/*---------------*/

#include "mppp.h"

#if SIMULATION == ON
#	include "simul.h"
#endif

					/* Common */
					/*--------*/

Server_common;

					/* Server definition */
					/*-------------------*/

CONST struct server_def p_server_def_s_mppp [] = {

	/* entity ID	entry point		congestion processing
										busy OFF	busy ON */

		{ENT_SM,		sm,				OFF},
		{ENT_MPPP,		mppp,			OFF,		OFF,	mppp_var_init},

#	if SIMULATION == ON
		{ENT_TI,		FCT_NIL,		OFF},
#	endif

		{ENT_NIL},
};

				/* ------------ Server queue ID ------------ */

uint		qid_s_mppp;

				/* ----- Server's specific flags list ------ */

#if SIMULATION == ON

#	if	NEW_FCT_STYLE == ON
		uchar	s_mppp_flag (uchar flag_val, char code);
#	else
		uchar	s_mppp_flag ();
#	endif

#	if MPPP_DEBUG == ON

		struct server_flag s_mppp_flag_list [] = {
			{'C',		s_mppp_flag},		/* Trace ON */
			{'D',		s_mppp_flag},		/* Decode PPP packets */
			{'E',		s_mppp_flag},		/* Error ON */
			{'K',		s_mppp_flag},		/* Break ON */
			{'N',		s_mppp_flag},		/* Notice ON */
			{'P',		s_mppp_flag},		/* Packets Content ON */
			{'W',		s_mppp_flag},		/* Warning ON */
			{FLAG_NIL}
		};

#	else

		struct server_flag s_mppp_flag_list [] = {
			{FLAG_NIL}
		};

#	endif

#endif

				/* -- Message building and analysing functions lists -- */

#if (MPPP_SIM_ANALYSER == ON) || (MPPP_SIM_BUILDER == ON)

				/* ---- Global data ---- */

	uint		mppp_pr_object			= OFF;		/* print all objects */
	uint		mppp_pr_state			= ON;		/* print current objects state */
	uint		mppp_decode_packet_flag	= OFF;		/* decoding of PPP packets */

		/* ---- Server "to" lists ---- */

	CONST struct server_simul_to p_sm_to [] = {
		{ENT_SM,	ana_sdu_sm,			FCT_NIL},
		{ENT_MPPP,	ana_sdu_sm,			build_sdu_sm_to_mppp},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_ti_to [] = {
		{ENT_MPPP,	ana_sdu_ti_mppp,	FCT_NIL},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_appli_to [] = {
		{ENT_MPPP,	ana_sdu_mppp,		build_sdu_appli_to_mppp},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_mppp_to [] = {
		{ENT_SM,	ana_sdu_sm,			FCT_NIL},
		{ENT_APPLI, ana_sdu_mppp,		FCT_NIL},
		{ENT_CC,	ana_sdu_cc_mppp,	FCT_NIL},
		{ENT_PH_B,	ana_sdu_ph_mppp,	FCT_NIL},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_cc_to [] = {
		{ENT_MPPP,	ana_sdu_cc_mppp,	build_sdu_cc_to_mppp},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_ph_b_to [] = {
		{ENT_MPPP,	ana_sdu_ph_mppp,	build_sdu_ph_to_mppp},
		{ENT_NIL},
	};

		/* ---- Server "from" list ---- */

	CONST struct server_simul_from p_from [] = {
		{ENT_SM,	"System Management",				(struct server_simul_to *)p_sm_to},
		{ENT_TI,	"Timer Management",					(struct server_simul_to *)p_ti_to},
		{ENT_APPLI, "User Local Application",			(struct server_simul_to *)p_appli_to},
		{ENT_MPPP,	"Multi Link PPP Entity",			(struct server_simul_to *)p_mppp_to},
		{ENT_PH_B,	"PH-B Physical Layer Entity",		(struct server_simul_to *)p_ph_b_to},
		{ENT_CC,	"Call Control",						(struct server_simul_to *)p_cc_to},

		{ENT_NIL},
	};

#endif

/*-------------------------------------------------------------------------*/

	Server_main(

		s_mppp,								/* name of the server's main function */
		p_server_def_s_mppp,					/* pointer on the server's definition list */
		qid_s_mppp,							/* variable containing the queue identifier */
		0,									/* size of the external FIFO queue (0 means implicit value) */
		(struct server_simul_from *)p_from, /* pointer on the messages origination
												entities' list (used for simulation only) */
		s_mppp_flag_list						/* pointer on the server's flags list */

		)

/*-------------------------------------------------------------------------*/

#if SIMULATION == ON

uchar s_mppp_flag (flag_val, code)
	uchar	flag_val;			/* ON or OFF */
	char	code;				/* flag code */
{
	switch (code) {

		case 'D':
			mppp_decode_packet_flag	= flag_val;
			break;

#		if MPPP_DEBUG == ON /* { */


			case 'C':
				MpppDbgFlags	|= MPPP_DBG_TRACE_ON;	/* Display ENTER/TRACE/LEAVE messages */
				break;

			case 'E':
				MpppDbgFlags	|= MPPP_DBG_ERROR_ON;	/* Display MPPP_DBG_ERROR messages */
				break;

			case 'K':
				MpppDbgFlags	|= MPPP_DBG_BREAK_ON;	/* Enable breakpoints */
				break;

			case 'N':
				MpppDbgFlags	|= MPPP_DBG_NOTICE_ON;	/* Display MPPP_DBG_NOTICE messages */
				break;

			case 'P':
				MpppDbgFlags	|= MPPP_DBG_PACKETS_ON;	/* Display MPPP_DBG_PACKETS messages */
				break;

			case 'W':
				MpppDbgFlags	|= MPPP_DBG_WARNING_ON; /* Display MPPP_DBG_WARNING messages */
				break;

#		endif	/* } */

		default:
			break;
	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/		/* S_MPPP.C */

