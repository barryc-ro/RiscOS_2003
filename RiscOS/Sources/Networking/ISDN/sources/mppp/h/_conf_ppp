
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - conf_ppp.h
 *
 * $Revision$
 *
 * $Date$
 *
 *		Multi Link PPP configuration included into the SM_SET_CONFIG_xx
 *      procedures of System management entity.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*-------------------------------------------------------------------------*/

#if (SIMULATION == ON) || !defined(SERVICES_INIT)


	/*=================================================================


		The MEMBER LINKS MUST BE CONFIGURED BEFORE THE BUNDLE ITSELF


	==================================================================*/

CONST struct sppp_config sppp_config_data = {

	{0,0,0},					/* confirmation structure */
	{
		MPPP_CFG_TYPE_MEMBER_LINK,	/* configuration type: MEMBER LINK */
	},

	1,				/* number of SL PPP NA */

		/*  SL PPPs objects description */

	{	/* sppp_object[] array */

		{	/* sppp_object[0] description */

			{	/* sppp_na description */

				0,		/* SL PPP NAI */
				BRI,	/* SL PPP network access type */
				2,		/* number of SL PPPs in this configuration */

#				if MPPP_FC == ON
					2,		/* outgoing flow control low mark */
					6,		/* outgoing flow control high mark */
#				endif

			},	/* end of sppp_na description */

			{	/* sppp_cep[] array */

				{	/* sppp_cep[0] description */

					1,				/* SL PPP reference ( > SPPP_REF_NIL) */
					0,				/* link type */
					0,				/* Link speed in kbps */
					SPPP_MODE_SYNC,	/* Link mode (SYNC, ASYN) */
					{
						ENT_CC,			/* underlying entity for signalling */
						0,				/* NAI for signalling */
						ACU_SAPI,		/* SAPI for signalling */
						ACU_SAPI_MGT,	/* SAPI for signalling Management */
					},
					{
						ENT_PH_B,	/* underlying entity for data transfer */
						0,			/* NAI for data transfer */
						PH_SAPI_B,	/* SAPI for data transfer */
						0,			/* DL CES or PH CHANI for data transfer */
						0,			/* additional header size for xxx_DA_RQ */
						OFF,		/* checking of PPP frame FLAG and FCS */
					},

#					if ((MPPP_LCP_EXTENSIONS == ON) && (MPPP_CALLBACK_PER_LINK == ON))	/* { */

						{
							0,		/* CallBack operation */
							0,		/* CallBack message length */
							{0},	/* CallBack message */
						},

#					endif	/* } */


				},	/* end of sppp_cep[0] description */

				{	/* sppp_cep[1] description */

					2,				/* SL PPP reference ( > SPPP_REF_NIL) */
					0,				/* link type */
					0,				/* Link speed in kbps */
					SPPP_MODE_SYNC,	/* Link mode (SYNC, ASYN) */
					{
						ENT_CC,			/* underlying entity for signalling */
						0,				/* NAI for signalling */
						ACU_SAPI,		/* SAPI for signalling */
						ACU_SAPI_MGT,	/* SAPI for signalling Management */
					},
					{
						ENT_PH_B,	/* underlying entity for data transfer */
						0,			/* NAI for data transfer */
						PH_SAPI_B,	/* SAPI for data transfer */
						0,			/* DL CES or PH CHANI for data transfer */
						0,			/* additional header size for xxx_DA_RQ */
						OFF,		/* checking of PPP frame FLAG and FCS */
					},

#					if ((MPPP_LCP_EXTENSIONS == ON) && (MPPP_CALLBACK_PER_LINK == ON))	/* { */

						{
							0,		/* CallBack operation */
							0,		/* CallBack message length */
							{0},	/* CallBack message */
						},

#					endif	/* } */

				},	/* end of sppp_cep[1] description */

			},	/* end of sppp_cep[] array */

		},	/* end of sppp_object[0] description */

	}	/* end of sppp_object[] array */

};


			/* BUNDLE'S CONFIGURATION DATA */


CONST struct mppp_config mppp_config_data = {

	{0,0,0},				/* confirmation structure */
	{
		MPPP_CFG_TYPE_BUNDLE,	/* configuration type: BUNDLE */
	},

	1,				/* number of ML PPP NA */

	{	/* mppp_object[] array */

		{	/* mppp_object[0] description */


			{	/* mppp_na description */

				0,		/* NAI value */
				1,		/* number of ML PPP SAPs into the access */

			},	/* end of mppp_na description */


			{	/* mppp_sap[] array */

				{	/* mppp_sap[0] description */

					1,		/* number of ML PPP bundles for this SAPI */

					{
						MPPP_SAPI_SIG,		/* ML PPP sapi for signalling */
						MPPP_SAPI_SIG_MGT,	/* ML PPP sapi for signalling management */
						ENT_APPLI,			/* upper entity id for signalling */
					},

					{
						MPPP_SAPI_DATA_SYNC,	/* ML PPP sapi for data transfer */
						ENT_APPLI,				/* upper entity id for data transfer */

						ON,		/* ON : UI only */
						1024,	/* max size for non splitted frame */
						ON,		/* ON : congestion is managed / OFF : no congestion management */

						0x1000000L,	/* modulo */
						0,			/* window size (I) or maximum advance fragment if splitted (UI) */
						0,			/* guard size */
						8,			/* header size */

#						if MPPP_FC == ON
							2,	/* outgoing flow control low mark */
							6,	/* outgoing flow control high mark */
#						endif

					},

					{	/* mppp_cep[] array */

						{	/* mppp_cep[0] description */

							0,	/* ML PPP CES Id */
							ON,	/* automatic OPEN event */

							{
								1500,	/* Minimum MRRU we allow the peer to negotiate */
								1500,	/* Our MRRU */
								OFF,	/* Use of Bandwidth Allocation Control Protocol */
								OFF,	/* Endpoint discriminator Option usage in Config-Request (ON/OFF) */
								1,		/* Endpoint discriminator class (0 ... 5)*/
								20,		/* length of the EDO address */
								{
									0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,
									0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
								},

#								if ((MPPP_LCP_EXTENSIONS == ON) && (MPPP_CALLBACK_PER_LINK == OFF))	/* { */

									{
										ON,		/* LCP extensions usage */
										0,		/* CallBack operation */
										0,		/* CallBack message length */
										{0},	/* CallBack message */
									},

#								endif	/* } */

								{
									OFF,	/* Multilink Protocol disabled (ON/OFF) */
								},

							},

								/* List of Single Link protocol (SLP) Connection */

							2,	/* number of SL PPP objects in this bundle */
							1,	/* minimum number of SL PPP objects required for this bundle */

							{	/* sppp_ref_tab[] array */
								1,	/* SL PPP object reference */
								2,	/* SL PPP object reference */
							},	/* end of sppp_ref_tab[] array */

							{	/* mppp_c_prot description */

								0,	/* maximum number of Terminate-Request before Terminate-Ack */
								0,	/* maximum number of Configure-Request before Configure-Ack/Nak/Reject */
								0,	/* maximum number of Configure-Nak before Configure-Reject (*/
								{0,0},	/* timers values */

							},	/* end of mppp_c_prot description */

						},	/* end of mppp_cep[0] description */

					},	/* end of mppp_cep[] array */

				},	/* end of mppp_sap[0] description */

			},	/* end of mppp_sap[] array */

		},	/* end of mppp_object[0] description */

	}	/* end of mppp_object[] array */

};

/*-------------------------------------------------------------------------*/

#endif	/* } SIMULATION or ! SERVICES_INIT */

/* EOF */

