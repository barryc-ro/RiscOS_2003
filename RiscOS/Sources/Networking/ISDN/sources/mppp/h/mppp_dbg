
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_dbg.h
 *
 * $Revision$
 *
 * $Date$
 *
 *	 This file contains generic debug macros for software development.
 *	 If (MPPP_DEBUG == OFF) no code is generated; Otherwise macros will
 *	 expand.
 *
 *	 MPPP_DBG.C must be linked into the entity's code to support output.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#ifndef _MPPP_DBG_H
#define _MPPP_DBG_H

/*-----------------------------------------------------------------------*/

				/* DEBUG FLAG DEFINITIONS */


#define MPPP_DBG_ERROR_ON		 0x0001		/* Display MPPP_DBG_ERROR messages */
#define MPPP_DBG_WARNING_ON		 0x0002		/* Display MPPP_DBG_WARNING messages */
#define MPPP_DBG_NOTICE_ON		 0x0004		/* Display MPPP_DBG_NOTICE messages */
#define MPPP_DBG_TRACE_ON		 0x0008		/* Display ENTER/TRACE/LEAVE messages */
#define MPPP_DBG_REQUEST_ON		 0x0010		/* Enable request display */
#define MPPP_DBG_PARAMS_ON		 0x0020		/* Enable function parameter display */
#define MPPP_DBG_HEADERS_ON		 0x0040		/* Enable Tx/Rx header display */
#define MPPP_DBG_PACKETS_ON		 0x0080		/* Enable Tx/Rx packet display */
#define MPPP_DBG_FILTER1_ON		 0x0100		/* Display MPPP_DBG_FILTER 1 messages */
#define MPPP_DBG_FILTER2_ON		 0x0200		/* Display MPPP_DBG_FILTER 2 messages */
#define MPPP_DBG_FILTER3_ON		 0x0400		/* Display MPPP_DBG_FILTER 3 messages */
#define MPPP_DBG_FILTER4_ON		 0x0800		/* Display MPPP_DBG_FILTER 4 messages */
#define MPPP_DBG_BREAK_ON		 0x1000		/* Enable breakpoints */


				/* Debug Print function prototype */

#if NEW_FCT_STYLE == ON
	void	mppp_dbg_print		(uchar FAR *p_d, ushort n_b, ushort offs, uchar tx_flag);
#else
	void	mppp_dbg_print		();
#endif


#if MPPP_DEBUG == ON	/* { */

			/* Global variables for debugging */

		extern			ushort	MpppDbgFlags;
		extern	CONST	char	MpppDbgID[];

#	ifndef MPPP_DBG_MAX_BYTES_TO_PRINT
#		define	MPPP_DBG_MAX_BYTES_TO_PRINT	32	/* maximum number of packet bytes to print */
#	endif


#	if MPPP_DEBUG_PRINTF == ON	/* { */

#		include <stdio.h>

		extern	FILE	*f_out;			/* output file stream */

#		define	MPPP_F_OUT	f_out,

#		define	MpppDbgPrint	fprintf

			/*
				S - is a "printf" string
					e.g. MPPP_DBG_PRINT("ERR=%d",err);
				F - is a function name
					e.g. MPPP_DBG_FUNC("FunctionName")
				C - is a C conditional
					e.g. MPPP_DBG_ASSERT(a <= b)
			*/

#		if C_COMPILER == TC
#			define	ASM__		asm
#		endif
#		if C_COMPILER == MSC
#			define	ASM__		__asm
#		endif

#		define MPPP_DBG_BREAKPOINT	{ASM__ int 3}

#		define MPPP_DBG_FUNC(F)		static CONST char __FUNC__[] = F;

#		define MPPP_DBG_BREAK()		{if (MpppDbgFlags & MPPP_DBG_BREAK_ON) MPPP_DBG_BREAKPOINT}

#		define MPPP_DBG_PRINT(S)	{MpppDbgPrint(MPPP_F_OUT "%s---%s @ %s:%d",MpppDbgID,__FUNC__,__FILE__,__LINE__);MpppDbgPrint(MPPP_F_OUT S);}

#		define MPPP_DBG_ENTER()		{if (MpppDbgFlags & MPPP_DBG_TRACE_ON)	 \
										{MpppDbgPrint(MPPP_F_OUT "%s{>>>%s",MpppDbgID,__FUNC__);}}

#		define MPPP_DBG_TRACE()		{if (MpppDbgFlags & MPPP_DBG_TRACE_ON)	 \
										{MpppDbgPrint(MPPP_F_OUT "%s---%s:%d",MpppDbgID,__FUNC__,__LINE__);}}

#		define MPPP_DBG_LEAVE()		{if (MpppDbgFlags & MPPP_DBG_TRACE_ON)	 \
										{MpppDbgPrint(MPPP_F_OUT "%s<<<}%s",MpppDbgID,__FUNC__);}}

#		define MPPP_DBG_ERROR(S)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
										{MpppDbgPrint(MPPP_F_OUT "%s---%s: ERROR: ",MpppDbgID,__FUNC__);MpppDbgPrint(MPPP_F_OUT S);}}

#		define MPPP_DBG_WARNING(S)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON) \
										{MpppDbgPrint(MPPP_F_OUT "%s---%s: WARNING: ",MpppDbgID,__FUNC__);MpppDbgPrint(MPPP_F_OUT S);}}

#		define MPPP_DBG_NOTICE(S)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
										{MpppDbgPrint(MPPP_F_OUT "%s---%s: NOTICE: ",MpppDbgID,__FUNC__);MpppDbgPrint(MPPP_F_OUT S);}}

#		define MPPP_DBG_FILTER(M,S) {if (MpppDbgFlags & (M))			\
										{MpppDbgPrint(MPPP_F_OUT "%s---%s: ",MpppDbgID,__FUNC__);MpppDbgPrint(MPPP_F_OUT S);}}

#		define MPPP_DBG_DISPLAY(S)	{MpppDbgPrint(MPPP_F_OUT "\n---%s: ",__FUNC__); MpppDbgPrint(MPPP_F_OUT S);}


#		define MPPP_DBG_ERROR_INT(V)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%d", V);}}

#		define MPPP_DBG_ERROR_HEX(V)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%x", V);}}

#		define MPPP_DBG_ERROR_STR(S)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%s", S);}}

#		define MPPP_DBG_ERROR_BYTE(B)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%c", B);}}

#		define MPPP_DBG_WARNING_INT(V)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%d", V);}}

#		define MPPP_DBG_WARNING_HEX(V)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%x", V);}}

#		define MPPP_DBG_WARNING_STR(S)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%s", S);}}

#		define MPPP_DBG_WARNING_BYTE(B)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%c", B);}}

#		define MPPP_DBG_NOTICE_INT(V)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%d", V);}}

#		define MPPP_DBG_NOTICE_HEX(V)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%-x", V);}}

#		define MPPP_DBG_NOTICE_STR(S)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%s", S);}}

#		define MPPP_DBG_NOTICE_BYTE(B)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
											{MpppDbgPrint(MPPP_F_OUT "%c", B);}}

#		define MPPP_DBG_DISPLAY_INT(V)	{MpppDbgPrint(MPPP_F_OUT "%d", V);}

#		define MPPP_DBG_DISPLAY_HEX(V)	{MpppDbgPrint(MPPP_F_OUT "%x", V);}

#		define MPPP_DBG_DISPLAY_STR(S)	{MpppDbgPrint(MPPP_F_OUT "%s", S);}

#		define MPPP_DBG_DISPLAY_BYTE(B)	{MpppDbgPrint(MPPP_F_OUT "%c", B);}


#		ifdef MPPP_DBG_ASSERT
#			undef MPPP_DBG_ASSERT
#		endif

#		define MPP_DBG_ASSERT(C)		if (!(C)) { \
											MpppDbgPrint(MPPP_F_OUT "\n---%s: ASSERT(%s) FAILED!\n%s #%d\n", \
												 __FUNC__, #C, __FILE__, __LINE__); \
											MPPP_DBG_BREAKPOINT \
										}

#		define MPPP_DBG_PACKETS(_pd,_nb,_off,_flag)	{if (MpppDbgFlags & MPPP_DBG_PACKETS_ON) \
															{mppp_dbg_print (_pd,_nb,_off,_flag);}}


#	else	/* NOT PRINTF } { */


			/* Global variables defined in the (simulation) server file */

		extern			ushort	MpppDbgFlags;

			/*
				We use any TRACE Tool defined at porting time
				(The following macros MUST be defined in mppp_par.h)

				* MpppTraceByte(val)	Single byte value
				* MpppTraceInt(val)		Numeric value
				* MpppTracePtr(ptr)		Long pointer
				* MpppTraceStr(str)		Null terminated string

			*/

#		define MPPP_DBG_BREAKPOINT

#		define MPPP_DBG_FUNC(F)		static CONST char __FUNC__[] = F;

#		define MPPP_DBG_BREAK()		{if (MpppDbgFlags & MPPP_DBG_BREAK_ON) MPPP_DBG_BREAKPOINT}

#		define MPPP_DBG_PRINT(S)	{MpppTraceStr(__FUNC__);MpppTraceStr("---");MpppTraceStr(__FILE__); \
										MpppTraceInt(__LINE__);MpppTraceStr(S);}

#		define MPPP_DBG_ENTER()		{if (MpppDbgFlags & MPPP_DBG_TRACE_ON)	 \
										{MpppTraceStr("\n{>>>");MpppTraceStr(__FUNC__);}}

#		define MPPP_DBG_TRACE()		{if (MpppDbgFlags & MPPP_DBG_TRACE_ON)	 \
										{MpppTraceStr("\n");MpppTraceStr(__FUNC__);MpppTraceStr("---");MpppTraceInt(__LINE__);}}

#		define MPPP_DBG_LEAVE()		{if (MpppDbgFlags & MPPP_DBG_TRACE_ON)	 \
										{MpppTraceStr("\n<<<}");MpppTraceStr(__FUNC__);}}

#		define MPPP_DBG_ERROR(S)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
										{MpppTraceStr("\n---");MpppTraceStr(__FUNC__);MpppTraceStr(" :ERROR: ");MpppTraceStr(S);}}

#		define MPPP_DBG_WARNING(S)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON) \
										{MpppTraceStr("\n---");MpppTraceStr(__FUNC__);MpppTraceStr(" :WARNING: ");MpppTraceStr(S);}}

#		define MPPP_DBG_NOTICE(S)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
										{MpppTraceStr("\n---");MpppTraceStr(__FUNC__);MpppTraceStr(" :NOTICE: ");MpppTraceStr(S);}}

#		define MPPP_DBG_FILTER(M,S) {if (MpppDbgFlags & (M))  \
										{MpppTraceStr("\n---");MpppTraceStr(__FUNC__);MpppTraceStr(": ");MpppTraceStr(S);}}

#		define MPPP_DBG_DISPLAY(S)	{MpppTraceStr("\n---");MpppTraceStr(__FUNC__);MpppTraceStr(": ");MpppTraceStr(S);}


#		define MPPP_DBG_ERROR_INT(V)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
											{MpppTraceInt(V);}}

#		define MPPP_DBG_ERROR_HEX(V)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
											{MpppTracePtr(V);}}

#		define MPPP_DBG_ERROR_STR(S)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
											{MpppTraceStr(S);}}

#		define MPPP_DBG_ERROR_BYTE(B)	{if (MpppDbgFlags & MPPP_DBG_ERROR_ON)	 \
											{MpppTraceByte(B);}}


#		define MPPP_DBG_WARNING_INT(V)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON)	 \
											{MpppTraceInt(V);}}

#		define MPPP_DBG_WARNING_HEX(V)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON)	 \
											{MpppTracePtr(V);}}

#		define MPPP_DBG_WARNING_STR(S)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON)	 \
											{MpppTraceStr(S);}}

#		define MPPP_DBG_WARNING_BYTE(B)	{if (MpppDbgFlags & MPPP_DBG_WARNING_ON)	 \
											{MpppTraceByte(B);}}


#		define MPPP_DBG_NOTICE_INT(V)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
											{MpppTraceInt(V);}}

#		define MPPP_DBG_NOTICE_HEX(V)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
											{MpppTracePtr(V);}}

#		define MPPP_DBG_NOTICE_STR(S)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
											{MpppTraceStr(S);}}

#		define MPPP_DBG_NOTICE_BYTE(B)	{if (MpppDbgFlags & MPPP_DBG_NOTICE_ON)	 \
											{MpppTraceByte(B);}}


#		define MPPP_DBG_DISPLAY_INT(V)		{MpppTraceInt(V);}

#		define MPPP_DBG_DISPLAY_HEX(V)		{MpppTracePtr(V);}

#		define MPPP_DBG_DISPLAY_STR(S)		{MpppTraceStr(S);}

#		define MPPP_DBG_DISPLAY_BYTE(B)		{MpppTraceByte(B);}


#		ifdef MPPP_DBG_ASSERT
#			undef MPPP_DBG_ASSERT
#		endif

#		define MPP_DBG_ASSERT(C)		{ if (!(C)) { \
											MpppTraceStr("\n---");MpppTraceStr(__FUNC__);	\
											MpppTraceStr(": ASSERT(");MpppTraceStr(__FILE__);	\
											MpppTraceInt(__LINE__);MpppTraceStr("FAILED)");	\
											MPPP_DBG_BREAKPOINT \
										}

#		define MPPP_DBG_PACKETS(_pd,_nb,_off,_flag)	{if (MpppDbgFlags & MPPP_DBG_PACKETS_ON) \
														{mppp_dbg_print (_pd,_nb,_off,_flag);}}


#	endif	/* not MPPP_DEBUG_PRINTF == ON } */

#else	/* } { */

#	define MPPP_DBG_BREAKPOINT
#	define MPPP_DBG_FUNC(F)
#	define MPPP_DBG_BREAK
#	define MPPP_DBG_PRINT(S)
#	define MPPP_DBG_ENTER()
#	define MPPP_DBG_TRACE()
#	define MPPP_DBG_LEAVE()
#	define MPPP_DBG_ERROR(S)
#	define MPPP_DBG_WARNING(S)
#	define MPPP_DBG_NOTICE(S)
#	define MPPP_DBG_FILTER(M,S)
#	define MPPP_DBG_DISPLAY(S)
#	define MPPP_DBG_ASSERT(C)

#	define MPPP_DBG_ERROR_INT(V)
#	define MPPP_DBG_ERROR_HEX(V)
#	define MPPP_DBG_ERROR_STR(S)
#	define MPPP_DBG_ERROR_BYTE(B)

#	define MPPP_DBG_WARNING_INT(V)
#	define MPPP_DBG_WARNING_HEX(V)
#	define MPPP_DBG_WARNING_STR(S)
#	define MPPP_DBG_WARNING_BYTE(B)

#	define MPPP_DBG_NOTICE_INT(V)
#	define MPPP_DBG_NOTICE_HEX(V)
#	define MPPP_DBG_NOTICE_STR(S)
#	define MPPP_DBG_NOTICE_BYTE(B)

#	define MPPP_DBG_DISPLAY_INT(V)
#	define MPPP_DBG_DISPLAY_HEX(V)
#	define MPPP_DBG_DISPLAY_STR(S)
#	define MPPP_DBG_DISPLAY_BYTE(B)

#	define MPPP_DBG_PACKETS(_pd,_nb,_off,_flag)

#endif	/* not MPPP_DEBUG == ON } */

#endif	/* ifndef _MPPP_DBG_H  } */

/* EOF */


