
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mp.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the commmon declarations of the Multilink Protocol
 * functions (MP)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#ifndef _MP_H	/* { */
#define _MP_H

/*-----------------------------------------------------------------------*/

extern	struct	mp_upfh			 receive_fr_mp;			/* MP frame header structure of a received frame */
extern	struct	mp_upfh			 send_fr_mp;			/* MP frame header structure of frame to send */

/*-----------------------------------------------------------------------*/

				/*
					Multilink frame header size,
					from PID to Sequence Number
					(short/long sequence number)

					1) LONG SEQUENCE NUMBER FRAGMENT FORMAT
					   ------------------------------------

								+---------------+---------------+
					PPP Header	| Address 0xff	| Control 0x03	|
								+---------------+---------------+
								| PID(H)  0x00	| PID(L)  0x3d	|
								+-+-+-+-+-+-+-+-+---------------+
					MP Header	|B|E|0|0|0|0|0|0|sequence number|
								+-+-+-+-+-+-+-+-+---------------+
								|		sequence number (L)		|
								+-------------------------------+
								|		   fragment data		|
								|				 *				|
								|				 *				|
								|				 *				|
								+----------------+--------------+
					PPP FCS		|				FCS				|
								+----------------+--------------+


					2) SHORT SEQUENCE NUMBER FRAGMENT FORMAT
					   -------------------------------------

								+---------------+---------------+
					PPP Header	| Address 0xff	| Control 0x03	|
								+---------------+---------------+
								| PID(H)  0x00	| PID(L)  0x3d	|
								+-+-+-+-+-------+---------------+
					MP Header	|B|E|0|0|	 sequence number	|
								+-+-+-+-+-------+---------------+
								|		   fragment data		|
								|				 *				|
								|				 *				|
								|				 *				|
								+----------------+--------------+
					PPP FCS		|				FCS				|
								+----------------+--------------+


				*/

#define MP_LONG_SIZE				6		/* long sequence number */
#define MP_LONG_HEADER_SIZE			6		/* long sequence number */

#define MP_SHORT_SIZE				4		/* short sequence number */
#define MP_SHORT_HEADER_SIZE		4		/* short sequence number */

#define MP_MX_SHORT_MODULO			0x1000L		/* highest modulo for a short sequence number */
#define MP_MX_LONG_MODULO			0x1000000L	/* highest modulo for a long sequence number */

#define MP_MX_BYTE_COUNT			0x7fffffffL /* highest value for byte counter */
#define MP_MX_FRAME_COUNT			0x7fffffffL /* highest value for frame counter */

/*-------------------------------------------------------------------------*/


struct mp_header {
	uchar		octet_0;				/* PID (H) */
	uchar		octet_1;				/* PID (L) */
	uchar		octet_2;				/* BE */
	uchar		octet_3;				/* | MNL (S) | */
	uchar		octet_4;				/* | MNL (S) | */
	uchar		octet_5;				/* | MNL (S) | */
};


				/* Access to a received frame using p_data */

#define R_mp_octet_0		((struct mp_header FAR *)p_data) -> octet_0
#define R_mp_octet_1		((struct mp_header FAR *)p_data) -> octet_1
#define R_mp_octet_2		((struct mp_header FAR *)p_data) -> octet_2
#define R_mp_octet_3		((struct mp_header FAR *)p_data) -> octet_3
#define R_mp_octet_4		((struct mp_header FAR *)p_data) -> octet_4
#define R_mp_octet_5		((struct mp_header FAR *)p_data) -> octet_5

#define R_mp_pid			(((R_mp_octet_0) << 8) | R_mp_octet_1)
#define R_mp_b				(Get_bits (R_mp_octet_2, 7, 1))
#define R_mp_e				(Get_bits (R_mp_octet_2, 6, 1))
#define R_mp_be				(Get_bits (R_mp_octet_2, 6, 2))
#define R_mp_smns			(((Get_bits (R_mp_octet_2, 0, 4)) << 8) | (R_mp_octet_3))
#define R_mp_lmns			(((((R_mp_octet_3) << 8) | (R_mp_octet_4)) << 8) | (R_mp_octet_5))
#define R_mp_mns			((Mppp_cep_peer_ack_negot & LCP_NEG_SSNHF) ? R_mp_smns : R_mp_lmns)

				/* Access to a sending frame using p_data */

#define S_mp_octet_0		(((struct mp_header FAR *)p_data) -> octet_0)
#define S_mp_octet_1		(((struct mp_header FAR *)p_data) -> octet_1)
#define S_mp_octet_2		(((struct mp_header FAR *)p_data) -> octet_2)
#define S_mp_octet_3		(((struct mp_header FAR *)p_data) -> octet_3)
#define S_mp_octet_4		(((struct mp_header FAR *)p_data) -> octet_4)
#define S_mp_octet_5		(((struct mp_header FAR *)p_data) -> octet_5)

#define S_mp_pid			(((S_mp_octet_0) << 8) | S_mp_octet_1)
#define S_mp_b				(Get_bits (S_mp_octet_2, 7, 1))
#define S_mp_e				(Get_bits (S_mp_octet_2, 6, 1))
#define S_mp_be				(Get_bits (S_mp_octet_2, 6, 2))
#define S_mp_smns			(((Get_bits (S_mp_octet_2, 0, 4)) << 8) | (S_mp_octet_3))
#define S_mp_lmns			(((S_mp_octet_3 << 8) | (S_mp_octet_4) << 8) | S_mp_octet_5)

				/* Load control field of Send frame */

#define S_mp_load_pid(pid)										\
							S_mp_octet_0 = (uchar)((pid) >> 8); \
							S_mp_octet_1 = (uchar)(pid)

#define S_mp_load_short(be, mns)													\
							S_mp_octet_2 = (uchar)(((be) << 6) | ((mns) >> 8)); \
							S_mp_octet_3 = (uchar)(mns)

#define S_mp_load_long(be, mns)											\
							S_mp_octet_2 = (uchar)((be) << 6);		\
							S_mp_octet_3 = (uchar)((mns) >> 16);		\
							S_mp_octet_4 = (uchar)((mns) >> 8);		\
							S_mp_octet_5 = (uchar)(mns)

#define MP_BE_BEGIN			G_2 (1, 0)
#define MP_BE_NEXT			G_2 (0, 0)
#define MP_BE_END			G_2 (0, 1)
#define MP_BE_BEGIN_END		G_2 (1, 1)

/*-------------------------------------------------------------------------*/

			/*
			   Unpacked frame header structure (each field is store
			   into one byte).
			*/

struct mp_upfh {
	uchar			be;					/* BE bits */
	mppp_modulo_t	mns;				/* multilink sequence number*/
};

			/* Receive Unpacked (Ru_...) values */

#define Ru_mp_be			receive_fr_mp.be
#define Ru_mp_mns			receive_fr_mp.mns

			/* Send Unpacked (Su_...) values */

#define Su_mp_be			(send_fr_mp.be)
#define Su_mp_mns			(send_fr_mp.mns)

/*-------------------------------------------------------------------------*/

							/* MP Macro's */

#define Mp_inc_v_modulo(xx,yy)		if(++(xx) == (yy)) (xx) = 0				/* increment variable with modulo */

#define Mp_dec_v_modulo(xx,yy)		((xx) == 0 ? (xx) = (yy) - 1 : --(xx))	/* decrement variable */

#define Mp_max_v_modulo(xx,yy)		((xx > yy) ? (((xx - yy) > Mppp_sap_data_x) ? yy : xx) : (((yy - xx) > Mppp_sap_data_x) ? xx : yy))

#define Mp_check_sn(vmin,v)			((vmin > v) ? ((vmin - v + Mppp_sap_data_modulo) > Mppp_sap_data_x ? FALSE : TRUE) : ((v - vmin) > Mppp_sap_data_x) ? FALSE : TRUE)

/*-------------------------------------------------------------------------*/

						/* MP : TIMER MANAGEMENT */

			/* MP timer table : index assigned to timers */

#define MP_T1					0		/* timer MT1 */
#define MP_T2					1		/* timer MT2 */
#define MP_T3					2		/* timer MT3 */
#define MP_MX_TIMER				3		/* maximum number of timer used simultaneously */


			/* Start timer */

#define Mp_start_timer(xx)		Timer_start (Mp_ti_id(xx), Mp_ti_val(xx),					\
									++(Mp_ti_sn(xx)), Mp_ti_ev_id(xx)); Mp_ti_state(xx) = ON

#define Mp_start_timer_val(xx,val)		Timer_start (Mp_ti_id(xx), val, ++(Mp_ti_sn(xx)),		\
											Mp_ti_ev_id(xx)); Mp_ti_state(xx) = ON

			/* Restart timer = start timer */

#define Mp_restart_timer(xx)		Timer_start (Mp_ti_id(xx), Mp_ti_val(xx),						\
										++(Mp_ti_sn(xx)), Mp_ti_ev_id(xx)); Mp_ti_state(xx) = ON

			/* Stop timer */

#define Mp_stop_timer(xx)			Timer_stop (Mp_ti_id(xx)); Mp_ti_state(xx) = OFF

			/* Timer state access */

#define Mp_state_timer(xx)			Mp_ti_state(xx)

			/* Check timer event validity according to the sequence number */

#define Mp_valid_time_out(xx)		((Mp_ti_state(xx) == ON) && (R_msg_inf0 == Mp_ti_sn (xx)))

#define Mp_ti_ev_id(xx)				MP_TI_EV_ID[xx] /* timer ID table */

/*-----------------------------------------------------------------------*/

					/* FUNCTION DECLARATIONS */

#if NEW_FCT_STYLE == ON /* { */

		/* process function */

	void	mp_process							(uchar FAR *p_data, ushort data_size, uchar flag);
	uchar	mp_unpack							(uchar FAR *p_data, ushort size);
	void	mp_pack								(uchar FAR *p_data);
	void	mp_reset_mv							(void);
	void	mp_clear_exception_conditions		(void);
	uchar	mp_dcod_frame						(uchar	FAR *p_data, ushort data_size);
	void	mp_reset_procedure					(void);
	void	mp_tx_reset_rq						(void);
	void	mp_tx_reset_co						(void);
	uchar	mp_build_tx_data_rq					(void);
	uchar	mp_split_frame						(void);
	void	mp_tx_frame							(void);
	void	mp_merge_fragment					(void);

		/* Queue management */

	void	mp_in_tx_queue						(void);
	uchar	mp_out_tx_queue						(void);
	void	mp_discard_tx_queue					(void);
	void	mp_get_next_i_tx_queue_entry		(void);
	void	mp_ack_tx_queue						(uchar FAR *p_data, ushort data_size);
	void	mp_check_tx_queue					(void);
	struct message FAR *mp_faq_get_first_msg	(void);
	uchar	mp_put_in_faq						(void);
	void	mp_discard_faq						(void);

	void	mp_in_rx_queue						(mppp_modulo_t mns);
	uchar	mp_out_rx_queue						(void);
	void	mp_discard_rx_queue					(void);
	void	mp_check_rx_queue					(void);
	void	mp_check_faq_queue					(void);
	void	mp_reinit_ctx						(void);
	void	mp_restart_tx						(void);

#else

	void	mp_process							();
	uchar	mp_unpack							();
	void	mp_pack								();
	void	mp_reset_mv							();
	void	mp_clear_exception_conditions		();
	uchar	mp_dcod_frame						();
	void	mp_reset_procedure					();
	void	mp_tx_reset_rq						();
	void	mp_tx_reset_co						();
	uchar	mp_build_tx_data_rq					();
	uchar	mp_split_frame						();
	void	mp_tx_frame							();
	void	mp_merge_fragment					();

		/* Queue management */

	void	mp_in_tx_queue						();
	uchar	mp_out_tx_queue						();
	void	mp_discard_tx_queue					();
	void	mp_get_next_i_tx_queue_entry		();
	void	mp_ack_tx_queue						();
	void	mp_check_tx_queue					();
	struct message FAR *mp_faq_get_first_msg	();
	uchar	mp_put_in_faq						();
	void	mp_discard_faq						();

	void	mp_in_rx_queue						();
	uchar	mp_out_rx_queue						();
	void	mp_discard_rx_queue					();
	void	mp_check_rx_queue					();
	void	mp_check_faq_queue					();
	void	mp_reinit_ctx						();
	void	mp_restart_tx						();

#endif	/* not NEW_FCT_STYLE } */

/*-----------------------------------------------------------------------*/


#endif	/* _MP_H } */

/*EOF*/

