
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mlcp.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the commmon declarations of the Multi Link Control Protocol
 * functions (MLCP)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|    Multi Link Control Protocol                      |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef _MLCP_H /* { */
#define _MLCP_H

/*-----------------------------------------------------------------------*/

					/* FUNCTION DECLARATIONS */

#if NEW_FCT_STYLE == ON /* { */

	void	mlcp_context_config					(void);

	void	mlcp_illegal_event					(void);
	void	mlcp_this_layer_up					(void);
	void	mlcp_this_layer_down				(void);
	void	mlcp_this_layer_started				(void);
	void	mlcp_this_layer_finished			(void);
	void	mlcp_init_restart_counter			(void);
	void	mlcp_zero_restart_counter			(void);
	void	mlcp_send_configure_request			(void);
	void	mlcp_send_configure_ack				(void);
	void	mlcp_send_configure_nak_rej			(void);
	void	mlcp_send_terminate_request			(void);
	void	mlcp_send_terminate_ack				(void);
	void	mlcp_send_code_reject				(void);
	void	mlcp_send_echo_reply				(void);
	uchar	mlcp_is_reject_fatal				(void);
	uchar	mlcp_check_configure_request		(void);
	uchar	mlcp_check_configure_ack_nak_rej	(void);

#else

	void	mlcp_context_config					();

	void	mlcp_illegal_event					();
	void	mlcp_this_layer_up					();
	void	mlcp_this_layer_down				();
	void	mlcp_this_layer_started				();
	void	mlcp_this_layer_finished			();
	void	mlcp_init_restart_counter			();
	void	mlcp_zero_restart_counter			();
	void	mlcp_send_configure_request			();
	void	mlcp_send_configure_ack				();
	void	mlcp_send_configure_nak_rej			();
	void	mlcp_send_terminate_request			();
	void	mlcp_send_terminate_ack				();
	void	mlcp_send_code_reject				();
	void	mlcp_send_echo_reply				();
	uchar	mlcp_is_reject_fatal				();
	uchar	mlcp_check_configure_request		();
	uchar	mlcp_check_configure_ack_nak_rej	();

#endif	/* not NEW_FCT_STYLE } */

/*-----------------------------------------------------------------------*/


#endif	/* _MLCP_H } */

/*EOF*/

