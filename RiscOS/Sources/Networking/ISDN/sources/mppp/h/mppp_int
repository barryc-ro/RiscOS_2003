
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - mppp_int.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- Implements the upper interface of the Multi Link Point-to-Point
 *		  Protocol (ML PPP) of the OMNITEL-BRICKS family product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef _MPPP_INT_H /* { */
#define _MPPP_INT_H

#include "mppp_par.h"		/* Parameters file */


/*-----------------------------------------------------------------------*/

#if SIMULATION == OFF	/* { */

			/*
				Checking of compile options that MUST be turned ON/OFF
				in this software release.
			*/

#	if MPPP_CC == OFF
#		error	MPPP_CC option MUST be turned ON for this release
#	endif

#	if MPPP_BAP == ON
#		error	MPPP_BAP option MUST be turned OFF for this release
#	endif

#	if MPPP_PH_ASYN == ON
#		error	MPPP_PH_ASYN option MUST be turned OFF for this release
#	endif

#	if MPPP_DL_V120 == ON
#		error	MPPP_DL_V120 option MUST be turned OFF for this release
#	endif

#	if MPPP_DL_LAPB == ON
#		error	MPPP_DL_LAPB option MUST be turned OFF for this release
#	endif

#	if MPPP_DL_LAPD == ON
#		error	MPPP_DL_LAPD option MUST be turned OFF for this release
#	endif

#	if MPPP_X25 == ON
#		error	MPPP_X25 option MUST be turned OFF for this release
#	endif

#	if MPPP_LCP_EXTENSIONS == ON
#		error	MPPP_LCP_EXTENSIONS option MUST be turned OFF for this release
#	endif

#	if	MPPP_CALLBACK_PER_LINK == ON
#		error	MPPP_CALLBACK_PER_LINK option MUST be turned OFF for this release
#	endif

#endif	/* SIMULATION == OFF } */


/*-----------------------------------------------------------------------*/

			/*
				ML PPP SAPIs definitions.
			*/

#define MPPP_SAPI_SIG			(uchar)'a'		/* SAPI for ACU messages (from upper entity) */
#define MPPP_SAPI_SIG_MGT		(uchar)'A'		/* SAPI for ACU Management messages (from upper entity) */
#define MPPP_SAPI_DATA_SYNC		(uchar)'D'		/* SAPI for SYNC data transfer */
#define MPPP_SAPI_DATA_ASYN		(uchar)'d'		/* SAPI for ASYN data transfer */

#define MPPP_SAPI_EXT_EVENTS	(uchar)'E'		/* SAPI for external events from/to user entity */

/*-----------------------------------------------------------------------*/

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*													          */
			/*	  Message codes to be used on MPPP_SAPI_EXT_EVENTS SAPI	  */
			/*													          */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

					/* Administrative Open/Close (Control Protocols) */

#define MPPP_EXT_OPEN_RQ		'A'			/* request for opening the lower Layer */
#define MPPP_EXT_OPEN_IN		'a'			/* indication of Layer opened */
#define MPPP_EXT_OPEN_CO		'b'			/* confirm opening of the lower layer */

#define MPPP_EXT_CLOSE_RQ		'C'			/* request for closing the lower layer */
#define MPPP_EXT_CLOSE_IN		'c'			/* indication of Layer closed */
#define MPPP_EXT_CLOSE_CO		'd'			/* confirmation of closing of the lower layer */

					/* Add/Drop member links */

#define MPPP_EXT_ADD_LINK_RQ	'E'			/* request for adding a member link to a bundle */
#define MPPP_EXT_ADD_LINK_IN	'f'			/* indication of adding a member link to a bundle */
#define MPPP_EXT_ADD_LINK_CO	'g'			/* confirm adding a member link to a bundle */

#define MPPP_EXT_DROP_LINK_RQ	'H'			/* request for dropping a member link from a bundle */
#define MPPP_EXT_DROP_LINK_IN	'h'			/* indication of dropping a member link from a bundle */
#define MPPP_EXT_DROP_LINK_CO	'i'			/* confirmation of dropping a member link from a bundle */

					/* Error indication */

#define MPPP_EXT_ERROR_IN		'?'			/* Control Protocol error indication */

/*-----------------------------------------------------------------------*/

			/* Single Link reference type definition */

typedef unsigned short		sppp_ref_t;

			/* NIL Single Link reference */

#define SPPP_REF_NIL		((sppp_ref_t)0)


/*-----------------------------------------------------------------------*/

			/* Multilink PPP Cause and Diagnostic type definition */

typedef unsigned char		mppp_cause_t;
typedef unsigned char		mppp_diag_t;

/*-----------------------------------------------------------------------*/

			/* Additional offset in Data message sent to MPPP */

#define	MPPP_DATA_HEADER_SIZE			8

/*-----------------------------------------------------------------------*/

			/*
				The following data structure is used to convey addressing
				information related to the multilink bundle and the related
				single link (if any).
			*/

typedef struct mppp_addr {
	sapi_t		data_sapi;		/* Data SAPI of the related PPP bundle */
	add_t		data_ces;		/* CES of the related PPP bundle */
	sppp_ref_t	sppp_ref;		/* Single Link PPP unique reference */
} mppp_addr_t;

#define Mppp_addr_data_sapi			(((mppp_addr_t FAR *)p_data) -> data_sapi)
#define Mppp_addr_data_ces			(((mppp_addr_t FAR *)p_data) -> data_ces)
#define Mppp_addr_sppp_ref			(((mppp_addr_t FAR *)p_data) -> sppp_ref)


			/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

				Primitives data structures and access macros,
				using the p_data pointer.

			=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/


						/* MPPP_EXT_OPEN_RQ */

struct mppp_ext_open_rq {
	mppp_addr_t	addr;			/* multilink addressing information */
};

#define Mppp_ext_open_rq_data_sapi		(((struct mppp_ext_open_rq FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_open_rq_data_ces		(((struct mppp_ext_open_rq FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_open_rq_sppp_ref		(((struct mppp_ext_open_rq FAR *)p_data) -> addr.sppp_ref)

#define Mppp_ext_open_rq_size			(sizeof (struct mppp_ext_open_rq))

						/* MPPP_EXT_OPEN_IN */

struct mppp_ext_open_in {
	mppp_addr_t	addr;			/* multilink addressing information */
};

#define Mppp_ext_open_in_data_sapi		(((struct mppp_ext_open_in FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_open_in_data_ces		(((struct mppp_ext_open_in FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_open_in_sppp_ref		(((struct mppp_ext_open_in FAR *)p_data) -> addr.sppp_ref)

#define Mppp_ext_open_in_size			(sizeof (struct mppp_ext_open_in))

						/* MPPP_EXT_OPEN_CO */

struct mppp_ext_open_co {
	mppp_addr_t	addr;			/* multilink addressing information */
};

#define Mppp_ext_open_co_data_sapi		(((struct mppp_ext_open_co FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_open_co_data_ces		(((struct mppp_ext_open_co FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_open_co_sppp_ref		(((struct mppp_ext_open_co FAR *)p_data) -> addr.sppp_ref)

#define Mppp_ext_open_co_size			(sizeof (struct mppp_ext_open_co))


						/* MPPP_EXT_CLOSE_RQ */

struct mppp_ext_close_rq {
	mppp_addr_t	addr;			/* multilink addressing information */
};

#define Mppp_ext_close_rq_data_sapi		(((struct mppp_ext_close_rq FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_close_rq_data_ces		(((struct mppp_ext_close_rq FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_close_rq_sppp_ref		(((struct mppp_ext_close_rq FAR *)p_data) -> addr.sppp_ref)

#define Mppp_ext_close_rq_size			(sizeof (struct mppp_ext_close_rq))


						/* MPPP_EXT_CLOSE_IN */

struct mppp_ext_close_in {
	mppp_addr_t	addr;			/* multilink addressing information */
};

#define Mppp_ext_close_in_data_sapi		(((struct mppp_ext_close_in FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_close_in_data_ces		(((struct mppp_ext_close_in FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_close_in_sppp_ref		(((struct mppp_ext_close_in FAR *)p_data) -> addr.sppp_ref)

#define Mppp_ext_close_in_size			(sizeof (struct mppp_ext_close_in))

						/* MPPP_EXT_CLOSE_CO */

struct mppp_ext_close_co {
	mppp_addr_t	addr;			/* multilink addressing information */
};

#define Mppp_ext_close_co_data_sapi		(((struct mppp_ext_close_co FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_close_co_data_ces		(((struct mppp_ext_close_co FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_close_co_sppp_ref		(((struct mppp_ext_close_co FAR *)p_data) -> addr.sppp_ref)

#define Mppp_ext_close_co_size			(sizeof (struct mppp_ext_close_co))


						/* MPPP_EXT_ADD_LINK_RQ */

struct mppp_ext_add_link_rq {
	mppp_addr_t	addr;			/* multilink addressing information */
};

#define Mppp_ext_add_link_rq_data_sapi		(((struct mppp_ext_add_link_rq FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_add_link_rq_data_ces		(((struct mppp_ext_add_link_rq FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_add_link_rq_sppp_ref		(((struct mppp_ext_add_link_rq FAR *)p_data) -> addr.sppp_ref)

#define Mppp_ext_add_link_rq_size			(sizeof (struct mppp_ext_add_link_rq))


						/* MPPP_EXT_ADD_LINK_IN */

struct mppp_ext_add_link_in {
	mppp_addr_t	addr;			/* multilink addressing information */
	ulong		speed;			/* link speed (in kbps) */
	uchar		type;			/* link type (see definitions in this file) */
};

#define Mppp_ext_add_link_in_data_sapi		(((struct mppp_ext_add_link_in FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_add_link_in_data_ces		(((struct mppp_ext_add_link_in FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_add_link_in_sppp_ref		(((struct mppp_ext_add_link_in FAR *)p_data) -> addr.sppp_ref)
#define Mppp_ext_add_link_in_speed			(((struct mppp_ext_add_link_in FAR *)p_data) -> speed)
#define Mppp_ext_add_link_in_type			(((struct mppp_ext_add_link_in FAR *)p_data) -> type)

#define Mppp_ext_add_link_in_size			(sizeof (struct mppp_ext_add_link_in))


						/* MPPP_EXT_ADD_LINK_CO */

struct mppp_ext_add_link_co {
	mppp_addr_t	addr;			/* multilink addressing information */
	ulong		speed;			/* link speed (in kbps) */
	uchar		type;			/* link type (see definitions in this file) */

};

#define Mppp_ext_add_link_co_data_sapi		(((struct mppp_ext_add_link_co FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_add_link_co_data_ces		(((struct mppp_ext_add_link_co FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_add_link_co_sppp_ref		(((struct mppp_ext_add_link_co FAR *)p_data) -> addr.sppp_ref)
#define Mppp_ext_add_link_co_speed			(((struct mppp_ext_add_link_co FAR *)p_data) -> speed)
#define Mppp_ext_add_link_co_type			(((struct mppp_ext_add_link_co FAR *)p_data) -> type)

#define Mppp_ext_add_link_co_size			(sizeof (struct mppp_ext_add_link_co))


						/* MPPP_EXT_DROP_LINK_RQ */

struct mppp_ext_drop_link_rq {
	mppp_addr_t	addr;			/* multilink addressing information */
};

#define Mppp_ext_drop_link_rq_data_sapi		(((struct mppp_ext_drop_link_rq FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_drop_link_rq_data_ces		(((struct mppp_ext_drop_link_rq FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_drop_link_rq_sppp_ref		(((struct mppp_ext_drop_link_rq FAR *)p_data) -> addr.sppp_ref)

#define Mppp_ext_drop_link_rq_size			(sizeof (struct mppp_ext_drop_link_rq))


						/* MPPP_EXT_DROP_LINK_IN */

struct mppp_ext_drop_link_in {
	mppp_addr_t		addr;			/* multilink addressing information */
	ulong			speed;			/* link speed (in kbps) */
	uchar			type;			/* link type (see definitions in this file) */
	uchar			origin;			/* drop origin */
	mppp_cause_t	cause;			/* PPP cause */
	mppp_diag_t		diag;			/* PPP diagnostic */
};

#define Mppp_ext_drop_link_in_data_sapi		(((struct mppp_ext_drop_link_in FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_drop_link_in_data_ces		(((struct mppp_ext_drop_link_in FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_drop_link_in_sppp_ref		(((struct mppp_ext_drop_link_in FAR *)p_data) -> addr.sppp_ref)
#define Mppp_ext_drop_link_in_speed			(((struct mppp_ext_drop_link_in FAR *)p_data) -> speed)
#define Mppp_ext_drop_link_in_type			(((struct mppp_ext_drop_link_in FAR *)p_data) -> type)
#define Mppp_ext_drop_link_in_origin		(((struct mppp_ext_drop_link_in FAR *)p_data) -> origin)
#define Mppp_ext_drop_link_in_cause			(((struct mppp_ext_drop_link_in FAR *)p_data) -> cause)
#define Mppp_ext_drop_link_in_diag			(((struct mppp_ext_drop_link_in FAR *)p_data) -> diag)

#define Mppp_ext_drop_link_in_size			(sizeof (struct mppp_ext_drop_link_in))


						/* MPPP_EXT_DROP_LINK_CO */

struct mppp_ext_drop_link_co {
	mppp_addr_t		addr;			/* multilink addressing information */
	ulong			speed;			/* link speed (in kbps) */
	uchar			type;			/* link type (see definitions in this file) */
};

#define Mppp_ext_drop_link_co_data_sapi		(((struct mppp_ext_drop_link_co FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_drop_link_co_data_ces		(((struct mppp_ext_drop_link_co FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_drop_link_co_sppp_ref		(((struct mppp_ext_drop_link_co FAR *)p_data) -> addr.sppp_ref)
#define Mppp_ext_drop_link_co_speed			(((struct mppp_ext_drop_link_co FAR *)p_data) -> speed)
#define Mppp_ext_drop_link_co_type			(((struct mppp_ext_drop_link_co FAR *)p_data) -> type)

#define Mppp_ext_drop_link_co_size			(sizeof (struct mppp_ext_drop_link_co))

						/* MPPP_EXT_ERROR_IN */

struct mppp_ext_error_in {
	mppp_addr_t		addr;			/* multilink addressing information */
	mppp_cause_t	cause;			/* PPP cause */
	mppp_diag_t		diag;			/* PPP diagnostic */
};

#define Mppp_ext_error_in_data_sapi		(((struct mppp_ext_error_in FAR *)p_data) -> addr.data_sapi)
#define Mppp_ext_error_in_data_ces		(((struct mppp_ext_error_in FAR *)p_data) -> addr.data_ces)
#define Mppp_ext_error_in_sppp_ref		(((struct mppp_ext_error_in FAR *)p_data) -> addr.sppp_ref)
#define Mppp_ext_error_in_cause			(((struct mppp_ext_error_in FAR *)p_data) -> cause)
#define Mppp_ext_error_in_diag			(((struct mppp_ext_error_in FAR *)p_data) -> diag)

#define Mppp_ext_error_in_size			(sizeof (struct mppp_ext_error_in))


/*-----------------------------------------------------------------------*/

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*													    */
			/*	  Message codes to be used on MPPP_SAPI_DATA SAPIs  */
			/*			(PH-like interface messages)			    */
			/*													    */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/


#define MPPP_ACT_RQ			'A'		/* request activation of the physical layer */
#define MPPP_ACT_IN			'a'		/* indication of activation of the physical layer */

#define MPPP_DEA_RQ			'B'		/* request deactivation of the physiacl layer */
#define MPPP_DEA_IN			'b'		/* indication of deactivation of the physical layer */

#define MPPP_DA_RQ			'C'		/* request passing message unit containing frames to the physical layer */
#define MPPP_DA_IN			'c'		/* indication of passing message unit containing frames from physical layer */

#define MPPP_DETECTION_RQ	'D'		/* request detection phase */
#define MPPP_DETECTION_IN	'd'		/* indicate detection phase */

#define MPPP_CLEAR_RQ		'E'		/* request clearance of the TX queue */
#define MPPP_CLEAR_CO		'e'		/* confirm clearance of the TX queue */

#define MPPP_BUSY_RQ		'('		/* busy request */
#define MPPP_BUSY_IN		')'		/* busy indication */

#define MPPP_CLEAR_BUSY_RQ	'['		/* clear busy request */
#define MPPP_CLEAR_BUSY_IN	']'		/* clear busy indication */

#define MPPP_INT_SYNC_RQ	'+'		/* request flow interface synchronization */
#define MPPP_INT_SYNC_CO	'-'		/* confirm flow interface synchronisation */

#define MPPP_COMMIT_RQ		'X'		/* request commitment */
#define MPPP_COMMIT_CO		'x'		/* commitment confirm */

#define MPPP_POLL_RQ		'V'		/* request starting of multipoint PH polling cycle */
#define MPPP_POLL_CO		'v'		/* confirm end of multipoint PH polling cycle */

#define MPPP_EVENT_IN		'y'		/* Event indication */

#define MPPP_TX_DONE_IN		'z'		/* indicate transmit done (for optional T200 delaying) */

#define MPPP_ERROR_IN		'?'		/* error indication */


						/* MPPP_ERROR_IN */

struct mppp_error_in {
	mppp_addr_t		addr;			/* multilink addressing information */
	mppp_cause_t	cause;			/* cause */
	mppp_diag_t		diag;			/* diagnostic */
};

#define Mppp_error_in_data_sapi		(((struct mppp_error_in FAR *)p_data) -> addr.data_sapi)
#define Mppp_error_in_data_ces		(((struct mppp_error_in FAR *)p_data) -> addr.data_ces)
#define Mppp_error_in_sppp_ref		(((struct mppp_error_in FAR *)p_data) -> addr.sppp_ref)
#define Mppp_error_in_cause			(((struct mppp_error_in FAR *)p_data) -> cause)
#define Mppp_error_in_diag			(((struct mppp_error_in FAR *)p_data) -> diag)

#define Mppp_error_in_size			(sizeof (struct mppp_error_in))


/*-----------------------------------------------------------------------*/

				/* ML-PPP Causes */

#define MPPP_CAUSE_SUCCESS				0		/* success */

#define MPPP_CAUSE_UNDEFINED			1		/* undefined error situation */
#define MPPP_CAUSE_DISC_NORM			2		/* disconnection - normal condition */
#define MPPP_CAUSE_HOST_UNREACHABLE		3		/* connection rejected - host not responding */
#define MPPP_CAUSE_CFG_NOT_CONVERGING	4		/* connection rejected - configurations cannot match */
#define MPPP_CAUSE_PROTOCOL_ERROR		5		/* protocol error */
#define MPPP_CAUSE_FRAGMENT_LOST		6		/* lost of fragment in multilink */
#define MPPP_CAUSE_REQUEST_REFUSED		7		/* the request is refused */
#define MPPP_CAUSE_UNEXPECTED			8		/* unexpected message */
#define MPPP_CAUSE_FRAME_DISCARDED		9		/* discarded a PPP frame */
#define MPPP_CAUSE_AUTH_FAILED			10		/* authentication failed */

				/* ML-PPP Diagnostics */

#define MPPP_DIAG_SUCCESS				0		/* OBSOLETED by MPPP_DIAG_NO_INFO: success */
#define MPPP_DIAG_NO_INFO				0		/* no more information */
#define MPPP_DIAG_LINK_ACTIVE			1		/* member link already active in the bundle */
#define MPPP_DIAG_LINK_NOT_ACTIVE		2		/* member link not active */
#define MPPP_DIAG_NOT_FIRST_LINK		3		/* only the first link should be referenced */
#define MPPP_DIAG_NO_MEMBER_LINK		4		/* member link expected and not found */
#define MPPP_DIAG_NO_CONNECTION			5		/* no connection established */
#define MPPP_DIAG_BUNDLE_BUSY			6		/* all the member links are in use */
#define	MPPP_DIAG_FIRST_LINK_NOT_OPENED	7		/* first member link not opened yet */
#define	MPPP_DIAG_NO_MULTILINK			8		/* multilink PPP not available */
#define MPPP_DIAG_NO_REPLY				9		/* reached the maximum number of retransmissions */
#define MPPP_DIAG_NO_SIGNALLING			10		/* no signalling supported */
#define MPPP_DIAG_NA_STOPPED			11		/* the network access is stopped */
#define MPPP_DIAG_NO_CONTEXT			12		/* addressing information does not match with existing contexts */


				/* PPP disconnection origin */

#define MPPP_ORIGIN_PEER				'P'		/* ML PPP peer */
#define MPPP_ORIGIN_USER				'U'		/* ML PPP local user */
#define MPPP_ORIGIN_PROVIDER			'V'		/* ML PPP entity itself */

/*-----------------------------------------------------------------------*/

			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*															*/
			/*	  Message codes to be used on MPPP_SAPI_SIG SAPI		*/
			/*	  Signalling messages formatted as defined in ACU_INT.H */
			/*															*/
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

#define MPPP_ACU_CONN_RQ			'A'		/* request establishment of an outgoing call */
#define MPPP_ACU_CONN_IN			'a'		/* indiacte an incoming call */
#define MPPP_ACU_CONN_RS			'B'		/* request answering to an incoming call */
#define MPPP_ACU_CONN_CO			'b'		/* indicate termination of an incoming or outgoing call */

#define MPPP_ACU_CLEAR_RQ			'C'		/* request release of the connection */
#define MPPP_ACU_CLEAR_IN			'c'		/* connection released indication */
#define MPPP_ACU_CLEAR_RS			'D'		/* response to the release of the connection */
#define MPPP_ACU_CLEAR_CO			'd'		/* connection released confirmation */

#define MPPP_ACU_ALERT_RQ			'E'		/* alert request */
#define MPPP_ACU_ALERT_IN			'e'		/* alert indication (ex: incoming ring) */

#define MPPP_ACU_PROGRESS_RQ		'F'		/* events for the progression of the call */
#define MPPP_ACU_PROGRESS_IN		'f'		/* events from the progressing outgoing call */

#define MPPP_ACU_INFO_RQ			'G'		/* information request */
#define MPPP_ACU_INFO_CO			'g'		/* information confirmation */

#define MPPP_ACU_INIT_RQ			'H'		/* initialization request */
#define MPPP_ACU_INIT_CO			'h'		/* initialization confirmation */

#define MPPP_ACU_SETPARM_RQ			'I'		/* set parameter request */
#define MPPP_ACU_SETPARM_CO			'i'		/* parameter confirmation */

#define MPPP_ACU_USER_INFO_RQ		'J'		/* request user to user information */
#define MPPP_ACU_USER_INFO_IN		'j'		/* indicate user to user information */

#define MPPP_ACU_SUSPEND_RQ			'K'		/* request suspension */
#define MPPP_ACU_SUSPEND_CO			'k'		/* confirm suspension */

#define MPPP_ACU_RESUME_RQ			'L'		/* request resume */
#define MPPP_ACU_RESUME_CO			'l'		/* confirm resume */

#define MPPP_ACU_TEST_RQ			'M'		/* request test */
#define MPPP_ACU_TEST_CO			'm'		/* confirm test */

#define MPPP_ACU_DIGIT_RQ			'N'		/* send several called nb digits in Overlap Sending mode */
#define MPPP_ACU_DIGIT_IN			'v'		/* receive several called nb digits in Overlap Receiving mode */
#define MPPP_ACU_DIGIT_CO			'n'		/* confirm end-of-called-nb-reached in Overlap Sending mode */

#define MPPP_ACU_FACILITY_RQ		'O'		/* request specific facility */
#define MPPP_ACU_FACILITY_IN		'o'		/* indicate specific facility */
#define MPPP_ACU_FACILITY_CO		'p'		/* confirm specific facility */

#define MPPP_ACU_SET_MODE_RQ		'Q'		/* request setting of a particular mode */
#define MPPP_ACU_SET_MODE_CO		'q'		/* confirm setting of a particular mode */

#define MPPP_ACU_RS_MODE_RQ			'R'		/* request response mode to incoming call */
#define MPPP_ACU_RS_MODE_CO			'r'		/* confirm response mode to incoming call */

#define MPPP_ACU_INFORMATION_RQ		'S'		/* request information */
#define MPPP_ACU_INFORMATION_IN		's'		/* indicate information */

#define MPPP_ACU_SETUP_REPORT_IN	't'		/* indicate incompatible incoming call */

#define MPPP_ACU_CALL_PROC_RQ		'U'		/* events for the progression of the call */

#define MPPP_ACU_ERR_IN				'?'		/* Error indication */


/*-----------------------------------------------------------------------*/

typedef unsigned long		mppp_modulo_t;	/* ML PPP modulo range */

/*-----------------------------------------------------------------------*/

						/* ML PPP Control Protocols timer events */

#define MPPP_LCP_TI_RESTART			'0'		/* LCP restart timer expired */
#define MPPP_BACP_TI_RESTART		'1'		/* BACP restart timer expired */
#define MPPP_PAP_TI_RESTART			'2'		/* PAP restart timer expired */
#define MPPP_BAP_TI_RESTART			'3'		/* BAP restart timer expired */

/*-----------------------------------------------------------------------*/

			/*
				ML PPP configuration error codes returned in
				Confirm_cause field.
			*/

#define MPPP_CFG_ERR_MEMORY				1		/* lack of memory resource */
#define MPPP_CFG_ERR_WRONG_NAI			2		/* NAI out of range or duplicated */
#define MPPP_CFG_ERR_UNKNOWN_NAI		3		/* NAI not configured yet */
#define MPPP_CFG_ERR_SPPP_NB			4		/* inconsistent value of SL PPP number */
#define MPPP_CFG_ERR_TI_ALLOC			5		/* Timer allocation failure */
#define MPPP_CFG_ERR_WRONG_SPPP_NAI		6		/* SL PPP NAI out of range or duplicated */
#define MPPP_CFG_ERR_UNKNOWN_SPPP_NAI	7		/* SL PPP NAI not configured yet */
#define MPPP_CFG_ERR_DUP_SPPP_REF		8		/* duplicated SL PPP reference value */
#define MPPP_CFG_ERR_MISSING_SLPPP		9		/* missing SL PPP object */
#define MPPP_CFG_ERR_FC_LEVEL			10		/* wrong flow control level setting */
#define MPPP_CFG_ERR_SLPPP_IN_BUNDLE	11		/* SL PPP already associated to another bundle */
#define MPPP_CFG_ERR_WINDOW_SIZE		12		/* Wrong window size */
#define MPPP_CFG_ERR_GUARD_SIZE			13		/* Wrong MLP window guard region size */
#define MPPP_CFG_ERR_EDO_CLASS			14		/* Wrong LCP Endpoint Discriminator class value */
#define MPPP_CFG_ERR_UNKNOWN_TYPE		15		/* unknown configuration type */
#define	MPPP_CFG_ERR_EDO_ADD_LGTH		16		/* wrong length of EDO address */
#define	MPPP_CFG_ERR_CALLBACK_LGTH		17		/* wrong length of Callback message */
#define	MPPP_CFG_ERR_LCP_INIT			18		/* LCP context initialization failed */
#define	MPPP_CFG_ERR_BAP_INIT			19		/* BAP context initialization failed */
#define	MPPP_CFG_ERR_BACP_INIT			20		/* BACP context initialization failed */
#define	MPPP_CFG_ERR_AUTH_INIT			21		/* PAP/CHAP context initialization failed */
#define	MPPP_CFG_ERR_DIFFERENT_NAI		22		/* RESET_CONFIG is ON and Member link NAI not the same as bundle's NAI */

/*-----------------------------------------------------------------------*/

			/*
				Single PPP Links types
			*/

#define SPPP_LINK_ISDN_D		'D'		/* ISDN D channel */
#define SPPP_LINK_ISDN_B		'B'		/* ISDN B channel */
#define SPPP_LINK_X25			'X'		/* X25 virtual circuit */
#define SPPP_LINK_ANALOG		'A'		/* GSTN analog link */
#define SPPP_LINK_SW_DIGITAL	'S'		/* switched digital (non ISDN) */

			/*
				Single PPP Links Modes
			*/

#define SPPP_MODE_SYNC			'S'		/* synchronous mode */
#define SPPP_MODE_ASYN			'A'		/* asynchronous block mode */


			/*
				PPP Link Speed
			*/

#define SPPP_SPEED_64KBPS		64000L	/* speed = 64000 kbps */


/*-----------------------------------------------------------------------*/

			/*
				High level compile time options, based on simple options
				defined in MPPP_PAR.H
			*/


			/*
				- Support of asynchronous member links in the bundle
				- Support of direct PHysical layer links
				- Support of Data Link layer links
			*/

#define MPPP_ASYN_SPPP			((MPPP_PH_ASYN == ON) || (MPPP_DL_V120 == ON))
#define MPPP_PH					((MPPP_PH_ASYN == ON) || (MPPP_PH_SYNC == ON))
#define MPPP_DL					((MPPP_DL_LAPB == ON) || (MPPP_DL_LAPD == ON) || (MPPP_DL_V120 == ON))

/*-----------------------------------------------------------------------*/

			/* Configuration types */


#define MPPP_CFG_TYPE_BUNDLE		'B'		/* bundle's configuration data */
#define MPPP_CFG_TYPE_MEMBER_LINK	'M'		/* bundle's member link configuration data */


struct	mppp_cfg_type {
	uchar	cfg_type;			/* configuration type: MPPP_CFG_TYPE_BUNDLE or MPPP_CFG_TYPE_MEMBER_LINK */
};


/*-----------------------------------------------------------------------*/

			/* Endpoint discriminator parameters */

#ifndef MPPP_MX_SZ_EDO_ADD
#	define MPPP_MX_SZ_EDO_ADD		20	/* maximum size of the endpoint discrimitor */
#endif

			/* Endpoint discriminator classes */

#define MPPP_LCP_EDO_CLASS_0		0	/* Null class */
#define MPPP_LCP_EDO_CLASS_1		1	/* Locally Assigned Address */
#define MPPP_LCP_EDO_CLASS_2		2	/* Internet Protocol (IP) address */
#define MPPP_LCP_EDO_CLASS_3		3	/* IEEE 802.1 Globally assigned MAC address */
#define MPPP_LCP_EDO_CLASS_4		4	/* PPP Magic-Number Block */
#define MPPP_LCP_EDO_CLASS_5		5	/* Public Switched Network Directory Number */

/*-----------------------------------------------------------------------*/

			/* Callback message size */


#ifndef MPPP_MX_SZ_CALLBACK_MSG
#	define	MPPP_MX_SZ_CALLBACK_MSG		20	/* maximum size of the Callback message */
#endif

			/* Callback operations code */

#define MPPP_LCP_CALLBACK_0				0	/* Location is determined by user authentication */
#define MPPP_LCP_CALLBACK_1				1	/* Dialing string */
#define MPPP_LCP_CALLBACK_2				2	/* Location identifier */
#define MPPP_LCP_CALLBACK_3				3	/* E.164 number */
#define MPPP_LCP_CALLBACK_4				4	/* Distinguished name */


/*-----------------------------------------------------------------------*/

			/* Timers array */

#define MPPP_MX_CP_TIMER			3	/* maximum number of timers used simultaneously by PPP CP (LCP/BAP/BAP) */

#define MPPP_MX_AUTH_TIMER			1	/* maximum number of timer used simultaneously for Authentication */

/*-----------------------------------------------------------------------*/

		/* Multilink PPP LCP configuration options */

struct mppp_cfg_lcp_opt {
	ushort		min_mrru;		/* minimum Multilink Max Receive Reconstructed Unit */
	ushort		mrru;			/* Multilink Max Receive Reconstructed Unit */
	uchar		bacp_usage;		/* Bandwidth Allocation Control Protocol usage (ON/OFF) */
	uchar		edo_usage;		/* EDO usage (ON/OFF) */
	uchar		edo_class;		/* Endpoint discriminator option class (0 ... 5) */
	uchar		edo_add_lgth;	/* Endpoint discriminator option address size */
	uchar		edo_add[MPPP_MX_SZ_EDO_ADD+1];	/* Endpoint discriminator option */

#	if MPPP_LCP_EXTENSIONS == ON

		struct lcp_ext_cfg {
			uchar	ext_usage;			/* LCP extensions usage (ON/OFF) */
			uchar	callback_op;		/* CallBack operation */
			uchar	callback_msg_lgth;	/* CallBack message length */
			uchar	callback_msg[MPPP_MX_SZ_CALLBACK_MSG+1];	/* CallBack message */
		} lcp_ext;

#	endif
		
	struct tag_cfg_other_info {
		uchar	mp_disabled;	/* Multilink Protocol disabled (ON/OFF) */
	} cfg_other_info;

};


/*-----------------------------------------------------------------------*/

		/* SL PPP connection configuration */

struct sppp_cfg_cep {
	uchar		ref;			/* SL PPP's UNIQUE reference */
	uchar		link_type;		/* link type (see definitions above) */
	ulong		link_speed;		/* link speed in kbps */
	uchar		link_mode;		/* link mode (SYNC, ASYNC) */

	struct cc_cfg_info {
		ent_id_t	entity_id;	/* underlying entity for signalling */
		nai_t		nai;		/* NAI for signalling */
		sapi_t		sapi;		/* SAPI for signalling */
		sapi_t		sapi_mgt;	/* SAPI for signalling Maganement */
	} cc_info;

	struct data_cfg_info {
		ent_id_t	entity_id;		/* underlying entity for data transfer */
		nai_t		nai;			/* NAI for data transfer */
		sapi_t		sapi;			/* SAPI for data transfer */
		add_t		conn_id;		/* DL CES or PH CHANI for data transfer */
		uchar		hole_size;		/* additional hole size in xxx_DA_RQ messages */
		uchar		check_flags;	/* checking of PPP frame FLAG and FCS */
	} data_info;

#	if ((MPPP_LCP_EXTENSIONS == ON) && (MPPP_CALLBACK_PER_LINK == ON))

		struct lcp_ext_info {
			uchar	callback_op;		/* CallBack operation */
			uchar	callback_msg_lgth;	/* CallBack message length */
			uchar	callback_msg[MPPP_MX_SZ_CALLBACK_MSG+1];	/* CallBack message */
		} lcp_ext;

#	endif

};

		/*++++++++++++++++++++++++++++++++++++++++++++++

			BUNDLE'S configuration structure (ML PPP)

		+++++++++++++++++++++++++++++++++++++++++++++++*/


struct mppp_config {

	struct	confirm mppp_confirm;	/* confirmation structure */

	struct	mppp_cfg_type cfg_type; /* configuration type: MPPP_CFG_TYPE_BUNDLE or MPPP_CFG_TYPE_MEMBER_LINK */

	nai_t	na_nb;					/* number of ML PPP's network access in the configuration message */

	struct mppp_cfg_object {

			/* Network Acess (NA) */

		struct mppp_cfg_na {
			nai_t			nai;			/* ML PPP NAI value */
			sapi_t			mppp_sap_nb;	/* number of ML PPP SAPs into the access */
		} mppp_na;

		struct mppp_cfg_sap {

				/* Multi Link PPP SAP */

			add_t			mppp_cep_nb;	 /* number of ML PPP bundles into the SAP */

			struct _tag_sig {
				sapi_t			sapi;				/* ML PPP signalling SAPI */
				sapi_t			sapi_mgt;			/* ML PPP signalling management SAPI */
				ent_id_t		upper_entity_id;	/* upper entity id for signalling */
			} sig;

			struct _tag_data {
				sapi_t			sapi;				/* ML PPP data SAPI */
				ent_id_t		upper_entity_id;	/* upper entity id for signalling */
				uchar			ui;					/* ON = UI only */
				ushort			no_split_max_size;	/* max size of packet not slpitted */
				uchar			congestion_mgt;		/* ON : congestion is managed / OFF : no congestion management */
				ulong			modulo;				/* modulo */
				ulong			w;					/* window size (I) or maximum advance fragment if splitted (UI) */
				ulong			x;					/* guard size */
				uchar			header_size;		/* header size */

#				if MPPP_FC == ON
					uchar		out_fc_low_mark;	/* outgoing flow control low mark */
					uchar		out_fc_high_mark;	/* outgoing flow control high mark */
#				endif

			} data;

				/* Multi Link PPP CONNECTION */

			struct mppp_cfg_cep {
				add_t			ces;				/* ML PPP CES Id */
				uchar			auto_open;			/* ML PPP automatic OPEN event (ON/OFF) */

					/* Multilink PPP LCP Options */

				struct mppp_cfg_lcp_opt opt;

					/*
						List of SL PPP references
						Valid references ( > SPPP_REF_NIL)
					*/

				uchar			sppp_nb;			/* number of SL PPP objects in this bundle */
				uchar			min_sppp_nb;		/* minimum number of SL PPP objects in this bundle */
				sppp_ref_t		sppp_ref_tab[MPPP_MX_SPPP];

					/*
						Control Protocols parameters (0 ==> implicit value)
						These values apply to all Control Protocols.
					*/

				struct mppp_cfg_c_prot {
					uchar			mx_terminate;	/* maximum number of Terminate-Request before Terminate-Ack */
					uchar			mx_configure;	/* maximum number of Configure-Request before Configure-Ack/Nak/Reject */
					uchar			mx_failure;		/* maximum number of Configure-Nak before Configure-Reject (*/
					timer_val_t		ti_val[MPPP_MX_CP_TIMER];	/* timers values */
				} mppp_c_prot;

			} mppp_cep [MPPP_CONFIG_MX_CEP];

		} mppp_sap [MPPP_CONFIG_MX_SAP];

	} mppp_object [MPPP_CONFIG_MX_NA];

};


	/*

			BUNDLE's Configuration type data

		Manipulation macro's thru the following pointers:
		p_mppp_config, p_mppp_cfg_na, p_mppp_cfg_sap,
		p_mppp_cfg_cep.

	*/

#define Mppp_cfg_ret_code				p_mppp_cfg -> mppp_confirm.return_code		/* return code */
#define Mppp_cfg_cause					p_mppp_cfg -> mppp_confirm.cause			/* cause */
#define Mppp_cfg_diagnostic				p_mppp_cfg -> mppp_confirm.diagnostic		/* diagnostic */

#define Mppp_cfg_type					p_mppp_cfg -> cfg_type.cfg_type		/* configuration type */

#define Mppp_cfg_mppp_na_nb				p_mppp_cfg -> na_nb			/* number of ML PPP network access */

#define Mppp_cfg_object_na(xx)			p_mppp_cfg -> mppp_object[xx].mppp_na		/* NA */
#define Mppp_cfg_object_sap(xx,yy)		p_mppp_cfg -> mppp_object[xx].mppp_sap[yy]	/* ML PPP */
#define Mppp_cfg_object_cep(xx,yy,zz)	p_mppp_cfg -> mppp_object[xx].mppp_sap[yy].mppp_cep[zz] /* ML PPP */

#define Mppp_cfg_na_nai					p_mppp_cfg_na -> nai						/* ML PPP NAI */
#define Mppp_cfg_na_mppp_sap_nb			p_mppp_cfg_na -> mppp_sap_nb				/* number of ML PPP SAPs */

			/* ML PPP SAP information */

#define Mppp_cfg_sap_mppp_cep_nb			p_mppp_cfg_sap -> mppp_cep_nb			/* number of ML PPP bundles */

#define Mppp_cfg_sap_sig_sapi				p_mppp_cfg_sap -> sig.sapi				/* sapi for ML PPP signalling */
#define Mppp_cfg_sap_sig_sapi_mgt			p_mppp_cfg_sap -> sig.sapi_mgt			/* sapi for ML PPP signalling management */
#define Mppp_cfg_sap_sig_upper_entity_id	p_mppp_cfg_sap -> sig.upper_entity_id	/* upper entity id for ML PPP signalling */

#define Mppp_cfg_sap_data_sapi				p_mppp_cfg_sap -> data.sapi				/* sapi for data transfer */
#define Mppp_cfg_sap_data_upper_entity_id	p_mppp_cfg_sap -> data.upper_entity_id	/* upper entity id for data transfer */

#define Mppp_cfg_sap_data_ui				p_mppp_cfg_sap -> data.ui				/* ON -> data.UI only */
#define Mppp_cfg_sap_data_no_split_max_size	p_mppp_cfg_sap -> data.no_split_max_size /* max size for non splitted frame */
#define Mppp_cfg_sap_data_congestion_mgt	p_mppp_cfg_sap -> data.congestion_mgt	/* congestion management */
#define Mppp_cfg_sap_data_modulo			p_mppp_cfg_sap -> data.modulo			/* modulo value */
#define Mppp_cfg_sap_data_w					p_mppp_cfg_sap -> data.w					/* window value */
#define Mppp_cfg_sap_data_x					p_mppp_cfg_sap -> data.x					/* guard value */
#define Mppp_cfg_sap_data_header_size		p_mppp_cfg_sap -> data.header_size		/* header size */
#define Mppp_cfg_sap_data_congestion_mgt	p_mppp_cfg_sap -> data.congestion_mgt	/* Congestion management */

#if MPPP_FC == ON
#	define Mppp_cfg_sap_data_out_fc_low_mark	p_mppp_cfg_sap -> data.out_fc_low_mark		/* Low Mark for flow control */
#	define Mppp_cfg_sap_data_out_fc_high_mark	p_mppp_cfg_sap -> data.out_fc_high_mark		/* High Mark for flow control */
#endif

			/* ML PPP Connection information */

#define Mppp_cfg_cep_ces				p_mppp_cfg_cep -> ces			/* ces */
#define Mppp_cfg_cep_auto_open			p_mppp_cfg_cep -> auto_open		/* automatic OPEN event (ON/OFF) */

			/* Access to MP LCP options settings in ML PPP CEP object */

#define Mppp_cfg_cep_min_mrru			p_mppp_cfg_cep -> opt.min_mrru
#define Mppp_cfg_cep_mrru				p_mppp_cfg_cep -> opt.mrru
#define Mppp_cfg_cep_bacp_usage			p_mppp_cfg_cep -> opt.bacp_usage
#define Mppp_cfg_cep_edo_usage			p_mppp_cfg_cep -> opt.edo_usage
#define Mppp_cfg_cep_edo_class			p_mppp_cfg_cep -> opt.edo_class
#define Mppp_cfg_cep_edo_add_lgth		p_mppp_cfg_cep -> opt.edo_add_lgth
#define Mppp_cfg_cep_edo_add			p_mppp_cfg_cep -> opt.edo_add

#if MPPP_LCP_EXTENSIONS == ON
#	define Mppp_cfg_cep_lcp_ext_usage		p_mppp_cfg_cep -> opt.lcp_ext.ext_usage
#	define Mppp_cfg_cep_callback_op			p_mppp_cfg_cep -> opt.lcp_ext.callback_op
#	define Mppp_cfg_cep_callback_msg_lgth	p_mppp_cfg_cep -> opt.lcp_ext.callback_msg_lgth
#	define Mppp_cfg_cep_callback_msg		p_mppp_cfg_cep -> opt.lcp_ext.callback_msg
#endif

#define Mppp_cfg_cep_mp_disabled		p_mppp_cfg_cep -> opt.cfg_other_info.mp_disabled

			/* Access to SL PPPs information in ML CEP */

#define Mppp_cfg_cep_sppp_nb			p_mppp_cfg_cep -> sppp_nb				/* number of SL PPP links in the bundle */
#define Mppp_cfg_cep_min_sppp_nb		p_mppp_cfg_cep -> min_sppp_nb			/* minimum number of SL PPP links in the bundle */
#define Mppp_cfg_cep_sppp_ref_tab(zz)	p_mppp_cfg_cep -> sppp_ref_tab[zz]		/* SL PPP references */

			/* Access to Control Protocol parameters */

#define Mppp_cfg_cep_c_prot_mx_terminate	p_mppp_cfg_cep -> mppp_c_prot.mx_terminate		/* maximum number of Terminate-Request */
#define Mppp_cfg_cep_c_prot_mx_configure	p_mppp_cfg_cep -> mppp_c_prot.mx_configure		/* maximum number of Configure-Request */
#define Mppp_cfg_cep_c_prot_mx_failure		p_mppp_cfg_cep -> mppp_c_prot.mx_failure		/* maximum number of Configure-Nak before Configure-Reject */
#define Mppp_cfg_cep_c_prot_ti_val(xx)		p_mppp_cfg_cep -> mppp_c_prot.ti_val[xx]		/* Timers values */


		/*++++++++++++++++++++++++++++++++++++++++++++++++++

			MEMBER LINK configuration structure (SL PPP)

		+++++++++++++++++++++++++++++++++++++++++++++++++++*/

struct sppp_config {

	struct	confirm sppp_confirm;	/* confirmation structure */

	struct	mppp_cfg_type cfg_type; /* configuration type: MPPP_CFG_TYPE_BUNDLE or MPPP_CFG_TYPE_MEMBER_LINK */

	nai_t	na_nb;					/* number of SL PPP's network access in the configuration message */

		/*
			SL PPPs configuration section
		*/

	struct sppp_cfg_object {

			/* SL PPP Network Acess (NA) */

		struct sppp_cfg_na {

			nai_t		nai;		/* SL PPP NAI value */
			uchar		type;		/* SL PPP Network Access type: BRI,PRI,NMI,SCI,SCI_HDTM,PRI_MULTI_D */
			add_t		cep_nb;		/* number of SL PPPs CEP into the access */

#			if MPPP_FC == ON
				uchar	out_fc_low_mark;	/* outgoing flow control low mark */
				uchar	out_fc_high_mark;	/* outgoing flow control high mark */
#			endif

		} sppp_na_object;

		struct sppp_cfg_cep sppp_cep_object[MPPP_CONFIG_MX_SPPP_CEP];

	} sppp_object [MPPP_CONFIG_MX_SPPP_NA];

};



	/*

			MEMBER LINK's Configuration type data

		Manipulation macro's thru the following pointers:
		p_sppp_config, p_sppp_cfg_na, p_sppp_cfg_cep.

	*/


#define Sppp_cfg_ret_code				p_sppp_cfg -> sppp_confirm.return_code		/* return code */
#define Sppp_cfg_cause					p_sppp_cfg -> sppp_confirm.cause			/* cause */
#define Sppp_cfg_diagnostic				p_sppp_cfg -> sppp_confirm.diagnostic		/* diagnostic */

#define Sppp_cfg_type					p_sppp_cfg -> cfg_type.cfg_type		/* configuration type */

#define Sppp_cfg_na_nb					p_sppp_cfg -> na_nb			/* number of SL PPP network access */
#define Sppp_cfg_object_na(xx)			p_sppp_cfg -> sppp_object[xx].sppp_na_object	/* NA */
#define Sppp_cfg_object_cep(xx,yy)		p_sppp_cfg -> sppp_object[xx].sppp_cep_object[yy]	/* SL PPP */


			/* Access to SL PPP's configuration section */

#define Sppp_cfg_na_nai					p_sppp_cfg_na -> nai				/* SL PPP NAI */
#define Sppp_cfg_na_type				p_sppp_cfg_na -> type				/* SL PPP Network Access type */
#define Sppp_cfg_na_cep_nb				p_sppp_cfg_na -> cep_nb				/* number of SL PPP CEPs */

#if MPPP_FC == ON
#	define Sppp_cfg_na_out_fc_low_mark	p_sppp_cfg_na -> out_fc_low_mark		/* Low Mark for flow control */
#	define Sppp_cfg_na_out_fc_high_mark p_sppp_cfg_na -> out_fc_high_mark	/* High Mark for flow control */
#endif

#define Sppp_cfg_cep_ref				p_sppp_cfg_cep -> ref				/* SL PPP UNIQUE reference */
#define Sppp_cfg_cep_link_type			p_sppp_cfg_cep -> link_type			/* SL PPP link type */
#define Sppp_cfg_cep_link_speed			p_sppp_cfg_cep -> link_speed		/* SL PPP link speed in kbps */
#define Sppp_cfg_cep_link_mode			p_sppp_cfg_cep -> link_mode			/* SL PPP link mode */
#define Sppp_cfg_cep_cc_entity_id		p_sppp_cfg_cep -> cc_info.entity_id		/* SL PPP signalling entity */
#define Sppp_cfg_cep_cc_nai				p_sppp_cfg_cep -> cc_info.nai			/* SL PPP NAI for signalling */
#define Sppp_cfg_cep_cc_sapi			p_sppp_cfg_cep -> cc_info.sapi			/* SL PPP signalling SAPI */
#define Sppp_cfg_cep_cc_sapi_mgt		p_sppp_cfg_cep -> cc_info.sapi_mgt		/* SL PPP signalling Maganement SAPI */
#define Sppp_cfg_cep_data_entity_id		p_sppp_cfg_cep -> data_info.entity_id	/* SL PPP data entity */
#define Sppp_cfg_cep_data_nai			p_sppp_cfg_cep -> data_info.nai			/* SL PPP NAI for data */
#define Sppp_cfg_cep_data_sapi			p_sppp_cfg_cep -> data_info.sapi		/* SL PPP data SAPI */
#define Sppp_cfg_cep_data_conn_id		p_sppp_cfg_cep -> data_info.conn_id		/* SL PPP data DL CES or PH chani */
#define Sppp_cfg_cep_data_hole_size		p_sppp_cfg_cep -> data_info.hole_size	/* SL PPP additional hole size */
#define Sppp_cfg_cep_data_check_flags	p_sppp_cfg_cep -> data_info.check_flags	/* checking of PPP frame FLAG and FCS */

#if ((MPPP_LCP_EXTENSIONS == ON) && (MPPP_CALLBACK_PER_LINK == ON))
#	define Sppp_cfg_cep_callback_op			p_sppp_cfg_cep -> lcp_ext.callback_op
#	define Sppp_cfg_cep_callback_msg_lgth	p_sppp_cfg_cep -> lcp_ext.callback_msg_lgth
#	define Sppp_cfg_cep_callback_msg		p_sppp_cfg_cep -> lcp_ext.callback_msg
#endif

/*------------------------------------------------------------------------*/

	/* Functions prototypes */

#if MPPP_SIM_ANALYSER == OFF
#	define	ana_sdu_mppp			FCT_NIL
#	define	ana_sdu_ph_mppp			FCT_NIL
#	define	ana_sdu_dl_mppp			FCT_NIL
#	define	ana_sdu_x25_mppp		FCT_NIL
#	define	ana_sdu_cc_mppp			FCT_NIL
#	define	ana_sdu_ti_mppp			FCT_NIL
#endif

#if MPPP_SIM_BUILDER == OFF
#	define	build_sdu_appli_to_mppp FCT_NIL
#	define	build_sdu_ph_to_mppp	FCT_NIL
#	define	build_sdu_dl_to_mppp	FCT_NIL
#	define	build_sdu_x25_to_mppp	FCT_NIL
#	define	build_sdu_cc_to_mppp	FCT_NIL
#	define	build_sdu_ti_to_mppp	FCT_NIL
#	define	build_sdu_sm_to_mppp	FCT_NIL
#endif

#if NEW_FCT_STYLE == ON		/* { */

	uchar	mppp						(struct message FAR *p_msg);
	void	mppp_var_init				(void);

#	if MPPP_SIM_BUILDER == ON
		uchar	build_sdu_appli_to_mppp (void);
		uchar	build_sdu_ph_to_mppp	(void);
		uchar	build_sdu_dl_to_mppp	(void);
		uchar	build_sdu_x25_to_mppp	(void);
		uchar	build_sdu_cc_to_mppp	(void);
		uchar	build_sdu_ti_to_mppp	(void);
		uchar	build_sdu_sm_to_mppp	(void);
#	endif

#	if MPPP_SIM_ANALYSER == ON
		uchar	ana_sdu_mppp			(struct message FAR *p_msg);
		uchar	ana_sdu_ph_mppp			(struct message FAR *p_msg);
		uchar	ana_sdu_dl_mppp			(struct message FAR *p_msg);
		uchar	ana_sdu_x25_mppp		(struct message FAR *p_msg);
		uchar	ana_sdu_cc_mppp			(struct message FAR *p_msg);
		uchar	ana_sdu_ti_mppp			(struct message FAR *p_msg);
#	endif

#else

	uchar	mppp						();
	void	mppp_var_init				();

#	if MPPP_SIM_BUILDER == ON
		uchar	build_sdu_appli_to_mppp ();
		uchar	build_sdu_ph_to_mppp	();
		uchar	build_sdu_dl_to_mppp	();
		uchar	build_sdu_x25_to_mppp	();
		uchar	build_sdu_cc_to_mppp	();
		uchar	build_sdu_ti_to_mppp	();
		uchar	build_sdu_sm_to_mppp	();
#	endif

#	if MPPP_SIM_ANALYSER == ON
		uchar	ana_sdu_mppp			();
		uchar	ana_sdu_ph_mppp			();
		uchar	ana_sdu_dl_mppp			();
		uchar	ana_sdu_x25_mppp		();
		uchar	ana_sdu_cc_mppp			();
		uchar	ana_sdu_ti_mppp			();
#	endif

#endif	/* } */

/*------------------------------------------------------------------------*/


#endif	/* } _MPPP_INT_H */

/*EOF*/

