
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - bacp.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the commmon declarations of the BACP functions.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|    Bandwidth Allocation Control Protocol            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#ifndef _BACP_H /* { */
#define _BACP_H

/*-----------------------------------------------------------------------*/

		/*===================================================================

			BACP Configuration Options Types
			[RFC 2125 - March 1997]

			* Favored-Peer

		====================================================================*/


#define BACP_OPT_FAVP		1


/*-----------------------------------------------------------------------*/

				/*
					Size of BACP negotiation options
						(Type+Length+Value)
				*/

#define BACP_OPT_SZ_NULL		2	/* Type & Length only */
#define BACP_OPT_SZ_LONG		6	/* Type & Length + 4 octets value */


/*-----------------------------------------------------------------------*/

				/*
					Implicit BACP Options values
					RFC 2125:
					The PPP Bandwidth Allocation Protocol (BAP)
					The PPP Bandwidth Allocation Control Protocol (BACP)
				*/

				/*
					Favored peer.

					As stated in RFC 2125 ?4.1, "it is acceptable for the peer
					that initiated the connection to use Magic-Number of
					1, and the peer that responded to the connection to use
					a Magic-Number of 0xFFFFFFFF".
				*/

#define BACP_CALLING_PARTY_FAVP_I	1			/* calling party */
#define BACP_CALLED_PARTY_FAVP_I	0xFFFFFFFFL	/* called party */

/*-----------------------------------------------------------------------*/

					/* FUNCTION DECLARATIONS */

#if NEW_FCT_STYLE == ON /* { */

	void	bacp_context_config					(void);

	void	bacp_illegal_event					(void);
	void	bacp_this_layer_up					(void);
	void	bacp_this_layer_down				(void);
	void	bacp_this_layer_started				(void);
	void	bacp_this_layer_finished			(void);
	void	bacp_init_restart_counter			(void);
	void	bacp_zero_restart_counter			(void);
	void	bacp_send_configure_request			(void);
	void	bacp_send_configure_ack				(void);
	void	bacp_send_configure_nak_rej			(void);
	void	bacp_send_terminate_request			(void);
	void	bacp_send_terminate_ack				(void);
	void	bacp_send_code_reject				(void);
	void	bacp_send_echo_reply				(void);
	uchar	bacp_is_reject_fatal				(void);
	uchar	bacp_check_configure_request		(void);
	uchar	bacp_check_configure_ack_nak_rej	(void);

#else

	void	bacp_context_config					();

	void	bacp_illegal_event					();
	void	bacp_this_layer_up					();
	void	bacp_this_layer_down				();
	void	bacp_this_layer_started				();
	void	bacp_this_layer_finished			();
	void	bacp_init_restart_counter			();
	void	bacp_zero_restart_counter			();
	void	bacp_send_configure_request			();
	void	bacp_send_configure_ack				();
	void	bacp_send_configure_nak_rej			();
	void	bacp_send_terminate_request			();
	void	bacp_send_terminate_ack				();
	void	bacp_send_code_reject				();
	void	bacp_send_echo_reply				();
	uchar	bacp_is_reject_fatal				();
	uchar	bacp_check_configure_request		();
	uchar	bacp_check_configure_ack_nak_rej	();

#endif	/* not NEW_FCT_STYLE } */

/*-----------------------------------------------------------------------*/

#endif	/* _BACP_H } */

/*EOF*/

