
/*--------------------------------------------------------------------------*
 *						 M O D U L E   H E A D E R
 *
 * filename - lcp.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the commmon declarations of the Link Control Protocol functions
 * (LCP)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Multi Link PPP Entity                            |*/
/*|    Link Control Protocol                            |*/
/*|                                                     |*/
/*|    Copyright (c) 1997 by OMNITEL SA                 |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#ifndef _LCP_H	/* { */
#define _LCP_H

/*--------------------------------------------------------------------------*/

		/*===================================================================

			IMPORTANT NOTE [RFC 1661]:
			-------------------------
			Only Configuration Options which are independent of particular
			network-layer protocols are configured by LCP.
			Configuration of individual network-layer protocols is handled
			by separate Network Control Protocols (NCPs) during the
			Network-Layer Protocol Phase.

			1- LCP Configuration Options Types
			   [RFC 1661]
			* Maximum-Receive-Unit
			* Maximum-Receive-Unit
			* Authentication-Protocol
			* Quality-Protocol
			* Magic-Number
			* Protocol-Field-Compression
			* Address-and-Control-Field-Compression

			2- Additional LCP Configuration Options Types
			   LCP Extensions.
			   [RFC 1570]
			* FCS-Alternatives
			* Self-Describing-Padding
			* Callback
			* Compound-Frames

			3- New LCP Configuration Option For BACP
			   [RFC Draft - May 1996]
			* Link-Discriminator

			4- Additional LCP Configuration Option For Asynchronous links
			   [RFC 1662]
			* Async-Control-Character-Map

			5- Additional LCP Configuration Options Types For The Multilink
			   Protocol
			   [RFC 1990]
			* Multilink-Maximum-Received-Reconstructed-Unit
			* Multilink-Short-Sequence-Number-Header-Format
			* Endpoint-Discriminator

			6- Additional LCP Configuration Option Types For
			   The PPP Reliable Transmission
			   [RFC 1663]
			* Numbered-Mode


			Recommended LCP options according to the link type
			--------------------------------------------------

			1- High Speed links
			   * Magic Number
			   * Link Quality Monitoring
			   * No Address and Control Field Compression
			   * No Protocol Field Compression

			2- Low Speed or Asynchronous links
			   * Async Control Character Map
			   * Magic Number
			   * Address and Control Field Compression
			   * Protocol Field Compression

			Automatic Recognition of PPP LCP Frames.
			---------------------------------------
			7e ff 03 c0 21
			7e ff 7d 23 c0 21
			7e 7d df 7d 23 c0 21

		====================================================================*/

#define LCP_OPT_MRU				1
#define LCP_OPT_ACCM			2
#define LCP_OPT_AUTH			3
#define LCP_OPT_LQM				4
#define LCP_OPT_MAGIC			5
#define LCP_OPT_PFC				7
#define LCP_OPT_ACFC			8

#define LCP_OPT_FCS				9
#define LCP_OPT_PADDING			10
#define LCP_OPT_NUMBERED		11
#define LCP_OPT_CBACK			13
#define LCP_OPT_COMPOUND		15

#define LCP_OPT_MRRU			17
#define LCP_OPT_SSNHF			18
#define LCP_OPT_EDO				19

#define LCP_OPT_LDO				23


/*-----------------------------------------------------------------------*/

				/*
					Size of LCP negotiation options
						(Type+Length+Value)
				*/

#define LCP_OPT_SZ_NULL			2	/* Type & Length only */
#define LCP_OPT_SZ_BYTE			3	/* Type & Length + 1 octet value */
#define LCP_OPT_SZ_SHORT		4	/* Type & Length + 2 octets value */
#define LCP_OPT_SZ_CHAP			5	/* Type & Length + 2 octets value + 1 octet for algorithm MD5 */
#define LCP_OPT_SZ_LONG			6	/* Type & Length + 4 octets value */
#define LCP_OPT_SZ_LQR			8	/* Type & Length + 2 octets value + 4 octets for reporting period */

				/* Endpoint Discriminators with fixed length address */

#define LCP_OPT_SZ_EDO_0		3	/* Type & Length + 1 octet for class */
#define LCP_OPT_SZ_EDO_2		7	/* Type & Length + 1 octet for class + 4 octets for address */
#define LCP_OPT_SZ_EDO_3		9	/* Type & Length + 1 octet for class + 4 octets for address */

				/* Endpoint Discriminators with variable length address */

#define LCP_OPT_MX_SZ_EDO_1		23	/* Type & Length + 1 octet for class + max 20 octets for address */
#define LCP_OPT_MX_SZ_EDO_4		23	/* Type & Length + 1 octet for class + max 20 octets for address */
#define LCP_OPT_MX_SZ_EDO_5		18	/* Type & Length + 1 octet for class + max 15 octets for address */


				/* Endpoint discriminator classes */

#define LCP_EDO_CLASS_0			0	/* Null class */
#define LCP_EDO_CLASS_1			1	/* Locally Assigned Address */
#define LCP_EDO_CLASS_2			2	/* Internet Protocol (IP) address */
#define LCP_EDO_CLASS_3			3	/* IEEE 802.1 Globally assigned MAC address */
#define LCP_EDO_CLASS_4			4	/* PPP Magic-Number Block */
#define LCP_EDO_CLASS_5			5	/* Public Switched Network Directory Number */


				/* Callback operations code */

#define LCP_CALLBACK_0			0	/* Location is determined by user authentication */
#define LCP_CALLBACK_1			1	/* Dialing string */
#define LCP_CALLBACK_2			2	/* Location identifier */
#define LCP_CALLBACK_3			3	/* E.164 number */
#define LCP_CALLBACK_4			4	/* Distinguished name */


/*-----------------------------------------------------------------------*/

				/*
					Implicit LCP Options values
					RFC 1661: The Point-to-Point Protocol
					and
					RFC 1990: The PPP Multilink Protocol (MP)
				*/

#define LCP_NEG_RQ_I			(LCP_NEG_ACFC|LCP_NEG_PFC|LCP_NEG_MRRU)

#define LCP_ASYNC_ACCM_I		0xFFFFFFFFL /* Async. Link Async Characters Control Map */
#define LCP_SYNC_ACCM_I			0L 			/* Sync. Link Async Characters Control Map */

#define LCP_MRU_I				1500		/* Max Received Unit */
#define LCP_MIN_MRRU_I			128			/* Minimum Max Received Reconstructed Unit */
#define LCP_MRRU_I				1500		/* Max Received Reconstructed Unit */
#define LCP_MRRU_RFC1717_I		1600		/* RFC 1717 Max Received Reconstructed Unit */
#define LCP_LQM_I				0xC025		/* Quality Protocol (Link Quality Report) */

/*-----------------------------------------------------------------------*/

	/*
		ACCM usage in Multilink PPP package.
		-----------------------------------


		+-------------+	 (1)   +-----------+  (2)	+ ------------------+
		|			  |------->|		   |------->|					|
		| User		  |		   | Multilink |		| Lower entities	|
		| Entity	  |		   | PPP	   |		| For data transfer |
		|			  |	 (4)   | Package   |   (3)	|					|
		|			  |<-------|		   |<-------|					|
		+-------------+		   +-----------+		+-------------------+

		(1) ML PPP has set the ACCM to 0 --> no translation, the frame is
			complete and clear.
		(2) ML PPP uses the PEER'S ACCM we ack'd, to format a frame compliant
			with the peer's requirements.
		(3) ML PPP requested an ACCM to 0 --> the frame is clear, no conversion
		(4) ML PPP applies the ACCM the local PPP requested, to format a
			PPP frame uderstandable by the local PPP stack.
	*/

/*-----------------------------------------------------------------------*/

					/* MACROS USED IN ACTIONS ROUTINES */


#define Lcp_indicate_up_event()				/*$$$ FIXME -- any use ? $$$*/
#define Lcp_indicate_down_event()			/*$$$ FIXME -- any use ? $$$*/

#define Lcp_activate_lower_layer()			mppp_act_dea_lower_layer(Sppp_cep_data_entity_id,ON)
#define Lcp_deactivate_lower_layer()		mppp_act_dea_lower_layer(Sppp_cep_data_entity_id,OFF)

/*-----------------------------------------------------------------------*/

					/* FUNCTION DECLARATIONS */

#if NEW_FCT_STYLE == ON /* { */

	void	lcp_context_config					(void);

	void	lcp_illegal_event					(void);
	void	lcp_this_layer_up					(void);
	void	lcp_this_layer_down					(void);
	void	lcp_this_layer_started				(void);
	void	lcp_this_layer_finished				(void);
	void	lcp_init_restart_counter			(void);
	void	lcp_zero_restart_counter			(void);
	void	lcp_send_configure_request			(void);
	void	lcp_send_configure_ack				(void);
	void	lcp_send_configure_nak_rej			(void);
	void	lcp_send_terminate_request			(void);
	void	lcp_send_terminate_ack				(void);
	void	lcp_send_code_reject				(void);
	void	lcp_send_echo_reply					(void);
	uchar	lcp_is_reject_fatal					(void);
	uchar	lcp_check_configure_request			(void);
	uchar	lcp_check_configure_ack_nak_rej		(void);

#else

	void	lcp_context_config					();

	void	lcp_illegal_event					();
	void	lcp_this_layer_up					();
	void	lcp_this_layer_down					();
	void	lcp_this_layer_started				();
	void	lcp_this_layer_finished				();
	void	lcp_init_restart_counter			();
	void	lcp_zero_restart_counter			();
	void	lcp_send_configure_request			();
	void	lcp_send_configure_ack				();
	void	lcp_send_configure_nak_rej			();
	void	lcp_send_terminate_request			();
	void	lcp_send_terminate_ack				();
	void	lcp_send_code_reject				();
	void	lcp_send_echo_reply					();
	uchar	lcp_is_reject_fatal					();
	uchar	lcp_check_configure_request			();
	uchar	lcp_check_configure_ack_nak_rej		();

#endif	/* not NEW_FCT_STYLE } */

/*-----------------------------------------------------------------------*/


#endif	/* _LCP_H } */

/*EOF*/

