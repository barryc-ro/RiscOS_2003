
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - user.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *		This module is developped for RISC_OS.
 *  	    	Pseudo-entity communicating with the OMNITEL server
 *  	    	through *commands turned into OMNITEL messages
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|														|*/
/*|	 ISDN-BRICKS										|*/
/*|														|*/
/*|	 Copyright (c) 1992 by OMNITEL SA					|*/
/*|	 All Rights Reserved.								|*/
/*|														|*/
/*[]---------------------------------------------------[]*/

#include "services.h"

#include "cc_int.h"
#include "acu_int.h"
#include "vs_int.h"
#include "ph_int.h"

#if MULTILINK_PPP_SUPPORT == ON
#	include "mppp_int.h"	/* Multilink PPP interface file */
#endif

#if C_COMPILER == TC
#	pragma  hdrstop
#endif


#include "ap_par.h"
#include "stdlib.h"


/*-------------------------------------------------------------------------*/

		/* Function prototypes */

/*-------------------------------------------------------------------------*/

ushort user_build_acu_conn_rq (p_data, argc, argv)
	uchar FAR *p_data;
	int 	  argc;
	char 	**argv;
{
    char *called_number;
    uchar user_service;
    
    Memset_far((char FAR *) p_data, 0, Acu_conn_rq_size);

        /* service requested is the first argument */

    user_service = *(*argv++);

        /* called number is the second argument */

    called_number =*argv++;

	/* init to 0 main structure */

    
    switch (user_service) {

    	case ACU_DATA_SERVICE :
		Acu_conn_rq_service	= ACU_DATA_SERVICE;
    		break;
    		
    	case ACU_V120_SERVICE :
		Acu_conn_rq_service	= ACU_V120_SERVICE;
    		Acu_conn_rq_ph_rate	= 0;
    		Acu_conn_rq_user_rate	= ACU_RA_19200;
    		Acu_conn_rq_syn_asyn	= ACU_ASYN;
    		Acu_conn_rq_stop_bits	= ACU_STOP_BIT_1;
    		Acu_conn_rq_data_bits	= ACU_DATA_BIT_8;
    		Acu_conn_rq_parity	= ACU_NO_PARITY; 
    		break;
					/* Multi-link PPP asynchronous data service */
	case USER_ACU_MPPP_ASYN_SERVICE :
		Acu_conn_rq_service	= USER_PROFILE_MPPP_ASYNC;
   		break;    			
					/* Multi-link PPP synchronous data service */

    	case USER_ACU_MPPP_SYNC_SERVICE :
    		Acu_conn_rq_service	= USER_PROFILE_MPPP_SYNC;
   		break;    			
    			
	default :
		break;    	  
    } 

    Acu_conn_rq_data_chani_nb	= 0;
    Acu_conn_rq_data_chani		= 0;

    Acu_conn_rq_charging_rq		= OFF;
    Acu_conn_rq_transfer_rq		= OFF;
    Acu_conn_rq_identification_denied_rq	= OFF;

    Acu_conn_rq_ph_num_size		= Strcpy_far ((char FAR *)Acu_conn_rq_a_ph_num,     (char FAR *)called_number,  ACU_MX_SZ_CALLED_NB+1+ACU_MX_SZ_CALLED_SUB_ADD+1)  - 1;
    Acu_conn_rq_called_nb_type	= ACU_NB_TYPE_UNKNOWN;
    Acu_conn_rq_calling_nb_size = 0;

    Acu_conn_rq_uui_size	= 0;

    Acu_conn_rq_facility_size	= 0;

    return (Acu_conn_rq_size + Acu_conn_rq_ph_num_size+1 + Acu_conn_rq_calling_nb_size+1 + Acu_conn_rq_uui_size+1+ Acu_conn_rq_facility_size+1);
}

ushort user_build_acu_conn_rs (p_data, argc, argv)
	uchar FAR *p_data;
	int 	  argc;
	char 	**argv;
{
	/* init to 0 main structure */

    Memset_far((char FAR *)p_data, 0, Acu_conn_rs_size);

	Acu_conn_rs_service       = ACU_DATA_SERVICE;

	Acu_conn_rs_uui_size	  = 0;

	Acu_conn_rs_facility_size = 0;

	return (Acu_conn_rs_size + Acu_conn_rs_uui_size+1 + Acu_conn_rs_facility_size+1);
}

ushort user_build_acu_clear_rq (p_data, argc, argv)
	uchar FAR *p_data;
	int 	  argc;
	char 	**argv;
{
	/* init to 0 main structure */

    Memset_far((char FAR *)p_data, 0, Acu_clear_rq_size);

	Acu_clear_rq_cause	   = 0;		/* 0 defaults to "Normal Clearing" (16) cause value */

	Acu_clear_rq_uui_size	   = 0;

	Acu_clear_rq_facility_size = 0;

	return (Acu_clear_rq_size + Acu_clear_rq_uui_size+1 + Acu_clear_rq_facility_size+1);
}

/*---------------*/

ushort user_build_acu_clear_rs (p_data, argc, argv)
	uchar FAR *p_data;
	int 	  argc;
	char 	**argv;
{
	/* init to 0 main structure */

    Memset_far((char FAR *)p_data, 0, Acu_clear_rs_size);

	Acu_clear_rs_uui_size	   = 0;

	Acu_clear_rs_facility_size = 0;

	return (Acu_clear_rs_size + Acu_clear_rs_uui_size+1 + Acu_clear_rs_facility_size+1);
}

ushort user_build_acu_test_rq (p_data, argc, argv)
	uchar FAR *p_data;
	int 	  argc;
	char 	**argv;
{

    Memset_far((char FAR *) p_data, 0, Acu_test_size);

        /* service requested is the first argument */

    Acu_test_b_chan_loop_back_nb = (*(*argv++)) - '0';
    if (*(*argv++) == 'A') { Acu_test_action = ACU_RQ_ACTIVATE;}
    else { Acu_test_action = ACU_RQ_CLEAR; }
    Acu_test_code  		= ACU_TEST_B_CHAN_LOOP_BACK;
    
        /* called number is the second argument */

    return (Acu_test_size);
}


/*---------------*/

ushort user_build_mppp_ext_add_link_rq  (p_data, argc, argv)
	uchar FAR *p_data;
	int 	  argc;
	char 	**argv;
{
	/* init to 0 main structure */

    Trace_string ("\nuser build MPPP_EXT_ADD_LINK_RQ(");
    
    Memset_far((char FAR *)p_data, 0, Mppp_ext_add_link_rq_size);
    
    Mppp_ext_add_link_rq_data_sapi	= (sapi_t)MPPP_SAPI_DATA_SYNC;
    Mppp_ext_add_link_rq_data_ces	= (add_t)0;
    Mppp_ext_add_link_rq_sppp_ref	= (sppp_ref_t)SPPP_REF_NIL;

    Trace_int (Mppp_ext_add_link_rq_data_sapi); Trace (',');
    Trace_int (Mppp_ext_add_link_rq_data_ces); Trace (',');
    Trace_int (Mppp_ext_add_link_rq_sppp_ref); Trace (',');
    Trace_string ("size=");
    Trace_int (Mppp_ext_add_link_rq_size);
    Trace_string (")");
    
    return (Mppp_ext_add_link_rq_size);
}

/*---------------*/

ushort user_build_mppp_ext_drop_link_rq  (p_data, argc, argv)
	uchar FAR *p_data;
	int 	  argc;
	char 	**argv;
{
	/* init to 0 main structure */

    Trace_string ("\nuser build MPPP_EXT_DROP_LINK_RQ");
    
    Memset_far((char FAR *)p_data, 0, Mppp_ext_drop_link_rq_size);
    
    Mppp_ext_add_link_rq_data_sapi	= (sapi_t)MPPP_SAPI_DATA_SYNC;
    Mppp_ext_add_link_rq_data_ces	= (add_t)0;
    Mppp_ext_add_link_rq_sppp_ref	= (sppp_ref_t)(*(*argv) - 0x30);

    return (Mppp_ext_drop_link_rq_size);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name    user_build_and_send_to_appli - builds and sends a message to
		the APPLI entity. This function is to be called from a
		separate task waiting for external events (such as buttons
		pressed).

Usage	void user_build_and_send_to_appli (code_t code, nai_t nai, add_t conn_id);

		- code   : message code to be built by the Appli entity:
			- ACU_CONN_RQ
			- ACU_CONN_RS
			- ACU_CLEAR_RQ
			- ACU_CLEAR_RS

		- nai    : network access id.

		- conn_id: call connection id.

*--------------------------------------------------------------------------*/


/*==========================================================================*/

void user_build_and_send_to_appli (sapi, code, argc, argv)
	sapi_t	  sapi;
	code_t	  code;
	int 	  argc;
	char 	**argv;
{

	struct message FAR *p_snd_msg;	/* local pointer to the message, so that */
	struct buffer FAR *p_buffer;	/* local pointer to the buffer, so that */
					/* we don't corrupt the global one */
	uchar FAR *	p_data;
	ushort		data_size = 0;

		/* Allocate a message */

	p_snd_msg	= Alloc_msg ();
	p_buffer	= Alloc_buffer ();

	S_msg_from	= ENT_USER;	/* dummy origin entity to force OS sending */
	S_msg_to	= ENT_APPLI;	/* Local version of User entity : send the message to the Appli itself */
	S_msg_code 	= code;
	S_msg_nai 	= USER_NAI;
	S_msg_sapi 	= sapi;
	S_msg_conn_id 	= USER_CONN_ID;

    	if (sapi == USER_ACU_SAPI) {

		/* Build the primitive */

	    p_data = Buffer_a_first_data;		/* Get data area starting address inside the buffer */

            switch (code) {

	    	case ACU_CONN_RQ :
	    	    data_size = user_build_acu_conn_rq (p_data, argc, argv);
    	    	    break;

	    	case ACU_CONN_RS :
		    data_size = user_build_acu_conn_rs (p_data, argc, argv);
    	    	    break;

    	    	case ACU_CLEAR_RQ :
		    data_size = user_build_acu_clear_rq (p_data, argc, argv);
    	    	    break;

    	    	case ACU_CLEAR_RS :
		    data_size = user_build_acu_clear_rs (p_data, argc, argv);
    	    	    break;

    	    	case ACU_TEST_RQ :
		    data_size = user_build_acu_test_rq (p_data, argc, argv);
    	    	    break;

    	    	default :
    	    	    break;
    	    }
    	}
    	
#	if MULTILINK_PPP_SUPPORT == ON	/* { */
 
 		if (sapi == USER_EXT_EVENTS_SAPI) {
 		  	
 		  	p_data    = Buffer_a_first_data;
 		  	data_size = 0;
 		  	
 			switch (code) {
 			  
 				case MPPP_EXT_ADD_LINK_RQ:
 				Trace_string(" MPPP_EXT_ADD_LINK_RQ\n");
 				    data_size = user_build_mppp_ext_add_link_rq (p_data, argc, argv);
 				    break;
 					
 					
 				case MPPP_EXT_DROP_LINK_RQ:
 				Trace_string(" MPPP_EXT_DROP_LINK_RQ\n");
 				    data_size = user_build_mppp_ext_drop_link_rq (p_data, argc, argv);
 				    break;
 		  
 		  
 		  		default:
 		  		    break;
 		  		    
 		        }
 		   		  
 		}
  
 #	endif	/* } */

		/* Update buffer data size field */

	Buffer_data_size = data_size;

		/* Link the buffer to the message */

	S_msg_init_link_buffer;

		/* Send the message */

	Send_message (p_snd_msg); p_snd_msg = P_NIL;
}

/*-------------------------------------------------------------------------*/


/*EOF*/
