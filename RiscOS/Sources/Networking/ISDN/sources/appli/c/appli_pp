/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - appli_pp.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	ap_ppp_asyn_encode	- convert PPP block to asynchronous PPP data
 *	ap_ppp_asyn_decode 	- convert asynchronous PPP data to PPP block
 *	ap_ppp_asyn_init 	- initialize asynchronous PPP channel context
 *	ap_ppp_asyn_start	- initialize asynchronous PPP to frame processing
 *	ap_ppp_asyn_stop	- terminate frame to asynchronous PPP processing
 
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|														|*/
/*|	 ISDN-BRICKS										|*/
/*|														|*/
/*|	 Copyright (c) 1992 by OMNITEL SA					|*/
/*|	 All Rights Reserved.								|*/
/*|														|*/
/*[]---------------------------------------------------[]*/

#include "services.h"
#include "ap_par.h"

#include "dte.h"
#include "dte_par.h"
#include "dte_ppp.h"
#include "dte_ch.h"
#include "dd_int.h"

#if MULTILINK_PPP_SUPPORT == ON
#	include "mppp_int.h"
#endif

/*--------------------------------------------------------------------------
 *				DTE channel context external declarations
 *-------------------------------------------------------------------------*/

struct dte_channel_ctxt	dte_channel_context;	/* single DTE channel context */

#if AP_PPP_CONVERSION == ON

ushort FAR		*ap_ppp_p_fcs_tab;	/* PPP FCS table pointer */
struct buffer FAR 	*p_buffer_enc_out;	/* encoding output buffer pointer */
struct ppp_fr_dsc	ppp_fr_dsc;		/* work data structure */


struct buffer FAR *ap_ppp_asyn_encode (p_in_buffer)
struct buffer FAR *p_in_buffer;
{
	uchar 		   	  ret_code;
	uchar			  generate_abort;
	uchar			  nb_buf_sent;
	struct dte_ppp_asyn_ctxt *p_ppp_asyn;
	struct buffer FAR 	 *p_buffer; 	/* temporary output buffer pointer */
	struct buffer FAR	 *p_next_buffer;
	struct ppp_fr_dsc  FAR	 *p_fr_dsc;
	struct ppp_link  FAR	 *p_ppp_link;	/* address of current link */
	uchar			  accm_tmp_valid;	/* ON if accm_tmp contains valid data */
	uchar			  accm_tmp [LCP_CO_SIZE_ACCM];	/* temporary copy of the ACCM */
			
	p_ppp_asyn = (struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt;
	p_ppp_link				= Ppp_a_link_2;
		/*
		 *	A bit of LCP protocol : analyze frame
		 */
	accm_tmp_valid	= OFF;
	p_fr_dsc	= &ppp_fr_dsc;
	p3_fr_parse (p_ppp_link, p_fr_dsc, p_in_buffer);

	if ((Fr_error_code == 0) &&
		(Fr_ppp_protocol_id == P3PROT_LCP)) {
		switch (Fr_lcp_code) {
		  	default:
				break;
			case LCP_CONFIGURE_ACK:

				if (Fr_lcp_cfg_accm_present) {
					/*
					 *	Save agreed ACCM in
					 *		the ACCM.from of this link, and in
					 *		the ACCM.to of the other link.
					 *	Do not modify frame now, we simply adapt.
					 */

					Copy_in_accm_from (Fr_lcp_cfg_accm_val);

					/*
					 *	Save copy of new ACCM. We must use old ACCM to
					 *	generate the PPP frame.
					 */
					Copy_in_accm_tmp (&accm_tmp[0], Fr_lcp_cfg_accm_val);
					accm_tmp_valid	= ON;
				}
				break;
		}
	}
	
	p_buffer = Alloc_buffer ();

	if (p_buffer == P_NIL) {
		return (P_NIL);
	}
	
	ret_code		= CONTINUE;
	nb_buf_sent		= 0;
	generate_abort		= OFF;
	p_ppp_link		= Ppp_a_link_1;

	while (ret_code == CONTINUE) {
	
		ret_code	= dte_ppp_asyn_encode (
					 p_ppp_link,
					 (struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt,
					 p_in_buffer,		/* input buffer  */
					 p_buffer		/* output buffer */
				 	);

		switch (ret_code) {
			case NOK :
Trace_string("dte_ppp_asyn_encode NOK\n"); 
				/* an error occurred.  */
				/* PPP block could not be encoded */
				generate_abort	= ON;
				break;
					
			case STOP :
				/* a complete, correct asynchronous PPP frame has been
				generated.
				Output buffer contains the final part of the
				asynchronous PPP frame.
				Input buffer has been completely analyzed.  */

				++nb_buf_sent;
				break;
			
			case CONTINUE :	
				/* a complete frame asynchronous PPP frame could not
				be built. Encoding is still in progress.
				Output buffer contains a partial asynchronous PPP frame
				data. Input buffer has to be supplied again on next routine
				call. 	*/

				p_next_buffer	= Alloc_buffer ();
			
				if (p_next_buffer == P_NIL) {
					generate_abort	= ON;
					ret_code	= NOK;
				}

					/* Send partial, non final portion of asynchronous PPP frame */

				isdndata_receive (Buffer_a_start_data, (int)Buffer_data_size);
				++nb_buf_sent;
				p_buffer	= p_next_buffer;
				break;
                }
	}	    		
	if (generate_abort == ON) {
		/*---------------------------------------------*/
		/* Abort partially sent asynchronous PPP frame */
		/* There is a valid buffer at p_buffer 	       */
		/*---------------------------------------------*/

			if (nb_buf_sent == 0) {
				Free_buffer (p_buffer);
			}
			else {

				/* Generate abort sequence */
				/* There is a valid buffer at p_buffer */

				Buffer_data_size	= 0;
				dte_ppp_asyn_enc_abort (
						(struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt,
						p_buffer);

				if (Buffer_data_size != 0) {

						/* Send abort sequence to PPP */
	
					isdndata_receive (Buffer_a_start_data, (int)Buffer_data_size);

				}
			}
		return (P_NIL);
		
	} /* end if 'generate_abort' */
		/*
		 *	Now that the asynchronous frame has been generated using the old
		 *	ACCM, we can update the ACCM with the new agreed value.
		 */
	if (accm_tmp_valid == ON) {
		Copy_in_accm_to (&accm_tmp [0]);
	}
	return (p_buffer);  /* return complete frame */
}

static struct buffer FAR	*p_in_out_buffer;	/* address of input or output buffer */

struct buffer FAR *ap_ppp_asyn_decode (p_in_buffer)
struct buffer FAR *p_in_buffer;
{
	uchar 		   	  ret_code;
	struct buffer FAR 	 *p_buffer;
	struct dte_ppp_asyn_ctxt *p_ppp_asyn;
	struct ppp_link  FAR	 *p_ppp_link;	/* address of current link */
	struct ppp_fr_dsc FAR	 *p_fr_dsc;
	uchar			  accm_tmp_valid;		/* ON if accm_tmp contains valid data */
	uchar			  accm_tmp [LCP_CO_SIZE_ACCM];	/* temporary copy of the ACCM */
		
	if (Ch_ppp_dec_out_buffer == P_NIL) {
		p_buffer = Ch_ppp_dec_out_buffer = Alloc_buffer ();

		if (p_buffer == P_NIL) {
			return (P_NIL);
		}

#		if MULTILINK_PPP_SUPPORT == ON
			Buffer_data_offset	+= MPPP_DATA_HEADER_SIZE;
#		endif
	}  

	ret_code	= dte_ppp_asyn_decode (	 (struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt,
						 p_in_buffer,
						 Ch_ppp_dec_out_buffer);

	switch (ret_code) {
		case NOK:	/* Decoding error */
				/* Discard output */
Trace_string("dte_ppp_asyn_decode NOK\n");
			Free_buffer (Ch_ppp_dec_out_buffer);
			Ch_ppp_dec_out_buffer	= P_NIL;
			return (P_NIL);

		case CONTINUE:
			/* Decoding still in progress */

			return (P_NIL);

		case STOP:
		
			p_in_out_buffer		= Ch_ppp_dec_out_buffer;
			Ch_ppp_dec_out_buffer	= P_NIL;

			p_ppp_asyn		= (struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt;
			p_ppp_link		=  Ppp_a_link_1;

				/*
				 *	A bit of LCP protocol : analyze frame
				 */
			accm_tmp_valid	= OFF;
			p_fr_dsc	= &ppp_fr_dsc;
			p3_fr_parse (p_ppp_link, p_fr_dsc, p_in_out_buffer);

			if ((Fr_error_code == 0) &&
				(Fr_ppp_protocol_id == P3PROT_LCP)) {
				switch (Fr_lcp_code) {
					default:
						break;
					case LCP_CONFIGURE_ACK:
						if (Fr_lcp_cfg_accm_present) {
							/*
							 *	Save agreed ACCM in
							 *		the ACCM.from of this link, and in
							 *		the ACCM.to of the other link.
							 *	Do not modify frame now, we simply adapt.
							 */
							Copy_in_accm_from (Fr_lcp_cfg_accm_val);

							/*
							 *	Save copy of new ACCM. We must use old ACCM
							 *	to generate the PPP frame.
							 */
							Copy_in_accm_tmp (&accm_tmp[0], Fr_lcp_cfg_accm_val);
							accm_tmp_valid	= ON;
						}
						break;	
				} /* switch (Fr_lcp_code) */
			} /* Fr_error_code == 0)  */

			p_ppp_link	= Link_p_relayed;		/* switch to link 2 */

			if (accm_tmp_valid == ON) {
				Copy_in_accm_to (&accm_tmp [0]);
				accm_tmp_valid	= OFF;
			}
			return (p_in_out_buffer);
	}
}

uchar ap_ppp_asyn_init ()
{

		/* initialize channel context */
	
	Ch_disable	= OFF;
	Ch_lock_service = OFF;
	
	if (dte_ch_ppp_init (ON, &Ch_p_ppp_ctxt) != OK) {
		return (NOK);
	}
	Ch_ppp_dec_out_buffer	= P_NIL;

		/* Build PPP FCS table */

	ap_ppp_p_fcs_tab	= (ushort FAR *)Mem_alloc (DTE_PPP_FCS_TABLE_SIZEOF, PID_VL);

	if (ap_ppp_p_fcs_tab == P_NIL) {
		return (NOK); 

	} else {  
		dte_ppp_asyn_build_fcs_table (ap_ppp_p_fcs_tab);
		return (OK); 
        }
}

void ap_ppp_asyn_start ()
{
	dte_ppp_asyn_init (
		(struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt);

	dte_ppp_asyn_dec_init (
		(struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt,
		ON, ap_ppp_p_fcs_tab);

	dte_ppp_asyn_enc_init (
		(struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt,
		ap_ppp_p_fcs_tab);
	Free_buffer (Ch_ppp_dec_out_buffer);
	Ch_ppp_dec_out_buffer	= P_NIL;
	p_buffer_enc_out 	= P_NIL;

}

void ap_ppp_asyn_stop ()
{
	dte_ppp_asyn_dec_stop ((struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt);
	dte_ppp_asyn_enc_stop ((struct dte_ppp_asyn_ctxt *)Ch_p_ppp_ctxt);

	Free_buffer (Ch_ppp_dec_out_buffer);
	Ch_ppp_dec_out_buffer	= P_NIL;
  
}
#endif

/*EOF*/
