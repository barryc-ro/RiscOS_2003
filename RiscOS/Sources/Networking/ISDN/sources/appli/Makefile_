#
#          Makefile for TEST APPLICATION 
#

# ----------------------------------------------------------------- #
# Include files and Lib files
# ----------------------------------------------------------------- #

INCLUDES = -I^.^.par -I^.^.device -Ic: -I^.services -I^.cc -I^.mppp -I^.ns -I^.dte -I^.pdte -I^.dl -I^.v120 -I^.ph -I^.ph_d 

LIBFILES = 



# ----------------------------------------------------------------- #
# Various Macros
# ----------------------------------------------------------------- #



CC = cc
NOTMODULE_CFLAGS = $(INCLUDES) -c -Throwback -depend !Depend -DD_ASSERT $(VARIANT_CFLAGS)
MODULE_CFLAGS = $(NOTMODULE_CFLAGS) -zM 
# -fc enables the limited pcc option (allows characters after endif) 
UNIX_CFLAGS = -fc

LINK = link
NOTMODULE_LINKFLAGS = -AOF
MODULE_LINKFLAGS = $(NOTMODULE_LINKFLAGS) 

CMHG = cmhg
CMHGFLAGS =

OBJASM = objasm 

AR = libfile
AR_FLAGS = -c -o

WIPE = -wipe
WIPEFLAGS = F~C~R~V

MODSQZ = modsqz -fv

# ----------------------------------------------------------------- #
# Rules for making things - do not change.
# ----------------------------------------------------------------- #
	   
.SUFFIXES:	.o_ .c .cmhg .s
.cmhg.o_:;	$(CMHG) $(CMHGFLAGS) -o $@ $<
.c.o_:;		$(CC) $(MODULE_CFLAGS) $< -o $@
.s.o_:;		$(OBJASM) -from $< -to $@

# ----------------------------------------------------------------- #
# Targets to be compiled
# ----------------------------------------------------------------- #

TARGETS = o_.appli\
 o_.appli_pp\
 o_.user

#Example of a single target with it's own include path
#com_proc.o:	com_proc.c
#		$(CC) -Iinclude_path com_proc.c


^.^.o_.appli:	$(TARGETS)
		$(LINK) $(NOTMODULE_LINKFLAGS) -o $@ $(TARGETS) 
		


clean:;		@$(WIPE) o_.* $(WIPEFLAGS)

					   

# Dynamic dependencies:
o_.appli:	c.appli
o_.appli:	^.services.h.services
o_.appli:	^.^.par.h.serv_par
o_.appli:	^.^.par.h.consts
o_.appli:	^.^.par.h._product
o_.appli:	c:h.string
o_.appli:	^.^.par.h.serv_por
o_.appli:	c:sys.h.types
o_.appli:	c:h.kernel
o_.appli:	c:h.swis
o_.appli:	^.cc.h.cc_int
o_.appli:	^.^.par.h.cc_par
o_.appli:	^.cc.h.acu_int
o_.appli:	^.ns.h.isdn
o_.appli:	^.v120.h.vs_int
o_.appli:	^.v120.h.vs_unit
o_.appli:	^.^.par.h.v120_par
o_.appli:	^.dl.h.v120_int
o_.appli:	h.ap_par
o_.appli:	^.ph_d.h.ph_d_int
o_.appli:	^.^.par.h.ph_d_par
o_.appli:	^.ph.h.ph_int
o_.appli:	^.^.par.h.ph_par
o_.appli:	^.services.h.it
o_.appli:	^.^.par.h.it_par
o_.appli:	^.^.device.h.dd_int
o_.appli:	^.mppp.h.mppp_int
o_.appli:	^.^.par.h.mppp_par
o_.appli:	c:h.stdio
o_.appli:	c:h.kernel
o_.appli:	c:h.swis
o_.appli_pp:	c.appli_pp
o_.appli_pp:	^.services.h.services
o_.appli_pp:	^.^.par.h.serv_par
o_.appli_pp:	^.^.par.h.consts
o_.appli_pp:	^.^.par.h._product
o_.appli_pp:	c:h.string
o_.appli_pp:	^.^.par.h.serv_por
o_.appli_pp:	c:sys.h.types
o_.appli_pp:	c:h.kernel
o_.appli_pp:	c:h.swis
o_.appli_pp:	h.ap_par
o_.appli_pp:	^.dte.h.dte
o_.appli_pp:	^.services.h.services
o_.appli_pp:	^.dte.h.dte_int
o_.appli_pp:	^.^.par.h.dte_par
o_.appli_pp:	^.pdte.h.pdte_int
o_.appli_pp:	^.^.par.h.dte_par
o_.appli_pp:	^.^.par.h.pdte_par
o_.appli_pp:	^.^.par.h.dte_par
o_.appli_pp:	^.dte.h.dte_ppp
o_.appli_pp:	^.dte.h.dte_ch
o_.appli_pp:	^.^.device.h.dd_int
o_.appli_pp:	^.mppp.h.mppp_int
o_.appli_pp:	^.^.par.h.mppp_par
o_.user:	c.user
o_.user:	^.services.h.services
o_.user:	^.^.par.h.serv_par
o_.user:	^.^.par.h.consts
o_.user:	^.^.par.h._product
o_.user:	c:h.string
o_.user:	^.^.par.h.serv_por
o_.user:	c:sys.h.types
o_.user:	c:h.kernel
o_.user:	c:h.swis
o_.user:	^.cc.h.cc_int
o_.user:	^.^.par.h.cc_par
o_.user:	^.cc.h.acu_int
o_.user:	^.v120.h.vs_int
o_.user:	^.v120.h.vs_unit
o_.user:	^.^.par.h.v120_par
o_.user:	^.dl.h.v120_int
o_.user:	^.ph.h.ph_int
o_.user:	^.^.par.h.ph_par
o_.user:	^.mppp.h.mppp_int
o_.user:	^.^.par.h.mppp_par
o_.user:	h.ap_par
o_.user:	c:h.stdlib
