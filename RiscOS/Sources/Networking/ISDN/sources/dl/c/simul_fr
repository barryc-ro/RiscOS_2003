
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - simul_fr.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         build_pdu_frame - implements the building of a Data Link frame
 *                            modulo 128 only.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */


#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"

#if DL_SIM_BUILDER  == ON
#	include "dl_comm.h"
#	include "simul.h"

		/* Error codes for invalid frame */

#define ERROR_FRAME_TOO_LONG	'A'
#define	ERROR_FRAME_I_EMPTY		'B'
#define	ERROR_FRAME_TOO_SHORT	'C'
#define	ERROR_FRAME_EA1			'D'
#define ERROR_FRAME_EA2			'E'
#define	ERROR_FRAME_SAPI		'F'
#define ERROR_FRAME_TEI			'G'
#define ERROR_FRAME_CR			'H'
#define	ERROR_FRAME_ENCODING	'I'
#define	ERROR_FRAME_PF			'J'

		/* Global variables */

extern	uint	ns_pdu_2;

		/* Static variables */

static 	int 	v_ns;			/* V(S) */
static 	int 	v_nr;			/* V(R) */
static  char    g_role[2];		/* ACT role */

		/* Functions prototypes */

#if NEW_FCT_STYLE == ON
	void	mg_p			(void);
	void	mg_f			(void);
	void	mg_format   	(void);
	void	mg_command_s    (void);
	void	mg_command_u	(void);
	void	mg_response_u	(void);
	void	mg_response_s	(void);
	void	mg_nr			(void);
	void	mg_ns			(void);
	void	mg_cr			(void);
	void	mg_role			(void);
	void	pr_err_code		(void);
	void	pr_ph_code		(void);
	ushort	build_pdu_xid	(uchar FAR *p_data);

#else

	void	mg_p			();
	void	mg_f			();
	void	mg_format   	();
	void	mg_command_s    ();
	void	mg_command_u	();
	void	mg_response_u	();
	void	mg_response_s	();
	void	mg_nr			();
	void	mg_ns			();
	void	mg_cr			();
	void	mg_role			();
	void	pr_err_code		();
	void	pr_ph_code		();
	ushort	build_pdu_xid	();
#endif

/*-------------------------------------------------------------------------*/

		/* Load the frame header address */

extern	uint	g_sapi;				/* SAPI */
extern	uint	g_tei;				/* TEI */
extern	char	g_from[2];			/* entity origination */

/*-------------------------------------------------------------------------*/

void load_frame_address ()

{
	uchar	g_cr_val;				/* cr value */

	if (p_snd_frame != P_NIL){

			/* Load C/R */

		if (Toupper (g_cr[0]) == 'C') {

			if (p_dlcep == P_NIL) {
				g_cr_val = DTE_CR_RCV_COMMAND;

			} else {

				g_cr_val = Cr_rcv_command;
			}

		} else {

			if (p_dlcep == P_NIL) {
				g_cr_val = DTE_CR_RCV_RESPONSE;

			} else {

				g_cr_val = Cr_rcv_response;
			}

		}

				/* LAPB */

		if ((g_from[0] == ENT_PH_B) || (g_from[0] == ENT_PH)) {

#			if DL_LAPB == ON

					/* Load SAPI */

				S_address_load_b (DL_SAPI_LAPB, 0, g_cr_val);

					/* Shift the data because frame structures for LAPD are used */

				if (S_msg_p_buffer == P_NIL) {
					Memcpy_far ((char FAR *)(S_msg_a_start_data + 1),(char FAR *)(S_msg_a_start_data + 2), --S_msg_data_size - 1);

				} else {

					Memcpy_far ((char FAR *)(Buffer_a_start_data + 1), (char FAR *)(Buffer_a_start_data + 2), --Buffer_data_size - 1);
				}

#			else

				mg_err ("simul_fr : no LAPB");
#			endif

		} else if (Toupper (g_from [0]) == ENT_PH_D) {

				/* LAPD */

#			if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

					/* Load SAPI and TEI */

				S_address_load (g_sapi, g_tei, g_cr_val);

#			else

				mg_err ("simul_fr : no LAPD");
#			endif

		} else {

				mg_err ("simul_fr : no LAPD and LAPB");
		}

	}

}

/*-------------------------------------------------------------------------*/

void mg_format ()
{
	Prompt 	("  frame format (I, U, S)", c, g_format[0]);
	Scan 	(1s, g_format);
	Echo	(c, g_format[0]);
}

/*------------------------------------------------------------------------*/

void mg_p ()
{
	Prompt	("                p (0, 1)", u, g_p);
	Scan	(d, &g_p);
	Echo	(u, g_p);
}

/*-------------------------------------------------------------------------*/

void mg_f ()
{
	Prompt	("                f (0, 1)", u, g_f);
	Scan	(d, &g_f);
	Echo	(u, g_f);
}

/*-------------------------------------------------------------------------*/

void mg_ns ()
{

	Prompt ("                    n(s)", u, g_ns);
	Scan	(d, &v_ns);

	switch (v_ns) {

		case -1 :
			Inc_v_128 (g_ns);
			break;

		case -2 :
			break;

		default :
			g_ns = v_ns;
			break;
	}

	Echo 	(u, g_ns);
}

/*-------------------------------------------------------------------------*/

void mg_nr ()
{

	Prompt	("                    n(r)", u, g_nr);

	Scan	(d, &v_nr);

	switch (v_nr) {

		case -1 :
			Inc_v_128 (g_nr);
			break;

		case -2 :
			break;

		default :
			g_nr = v_nr;
			break;
	}

	Echo 	(u, g_nr)
}

/*-------------------------------------------------------------------------*/

void mg_cr ()
{

	Prompt	("                     c/r", c, g_cr[0]);
	Scan	(1s, g_cr);
	Echo	(c, g_cr[0]);
}

/*-------------------------------------------------------------------------*/

void mg_command_s ()
{

	Prompt	("            Rr, rNr, reJ", c, g_command[0]);
	Scan	(1s, g_command);
	Echo 	(c, g_command[0]);
}

/*-------------------------------------------------------------------------*/

void mg_command_u ()
{

	Prompt	("Sabme, uI, Disc, Xid,0/1", c, g_command[0]);
	Scan	(1s, g_command);
	Echo 	(c, g_command[0]);
}

/*-------------------------------------------------------------------------*/

void mg_response_u ()
{

	Prompt	("Dm, Ua, Frmr, Xid, SI0/1", c, g_command[0]);
	Scan	(1s, g_command);
	Echo 	(c, g_command[0]);
}

/*-------------------------------------------------------------------------*/

void mg_response_s ()
{

	Prompt	("            Rr, rNr, reJ", c, g_command[0]);
	Scan	(1s, g_command);
	Echo 	(c, g_command[0]);
}

/*-------------------------------------------------------------------------*/

void mg_role ()
{

	Prompt	("    Answerer, Originator", c, g_role[0]);
	Scan	(1s, g_role);
	Echo 	(c, g_role[0]);
}

/*-------------------------------------------------------------------------*/

void pr_err_code ()
{

	fprintf (f_out, "\n              Frame builder error codes\n");
	fprintf (f_out, "\n       %c = frame too long",			ERROR_FRAME_TOO_LONG);
	fprintf (f_out, "\n       %c = I or UI frame empty",	ERROR_FRAME_I_EMPTY);
	fprintf (f_out, "\n       %c = frame too short",		ERROR_FRAME_TOO_SHORT);
	fprintf (f_out, "\n       %c = EA 1 invalid",			ERROR_FRAME_EA1);
	fprintf (f_out, "\n       %c = EA2 invalid",			ERROR_FRAME_EA2);
	fprintf (f_out, "\n       %c = invalid SAPI",			ERROR_FRAME_SAPI);
	fprintf (f_out, "\n       %c = invalid TEI",			ERROR_FRAME_TEI);
	fprintf (f_out, "\n       %c = invalid C/R",			ERROR_FRAME_CR);
	fprintf (f_out, "\n       %c = invalid encoding",		ERROR_FRAME_ENCODING);
	fprintf (f_out, "\n       %c = invalid P/F",			ERROR_FRAME_PF);
}

/*-------------------------------------------------------------------------*/

void pr_ph_code ()
{
	fprintf (f_out, "\n              PH primitive code\n");
	fprintf (f_out, "\n         - %c = activation",			PH_ACT_IN);
	fprintf (f_out, "\n         - %c = deactivation",		PH_DEA_IN);

#if DL_LAPX == ON
	fprintf (f_out, "\n         - %c = ready to TX",		PH_TX_IN);
	fprintf (f_out, "\n         - %c = ready to receive",	PH_RX_IN);
	fprintf (f_out, "\n         - %c = transmit right",		PH_TX_RIGHT_IN);
#endif

	fprintf (f_out, "\n");
}

/*-------------------------------------------------------------------------*/

ushort build_pdu_frame ()
{
	uchar		 g_pf;			/* temporary for p/f value */
	uchar	FAR	*p_data;		/* pointer to the data area of the message */

	p_data	= S_a_data;

		/* Get frame format : I, S, U */

	mg_format ();

		/* Init message header */

	S_msg_header_init;

		/* Set implicit frame pointer */

	p_snd_frame = (union frame FAR *) S_msg_a_start_data;

		/* Switch according to the frame format */

	switch (Toupper (g_format[0])) {

/*

	--------------------------------------------------------------------
	|  Format | commands | Response | Encoding  8  7  6  5  4  3  2  1 | octet
	--------------------------------------------------------------------
	|         |          |          |        |      N(S)          | 0  |  4
	| Informa | I(info)  |          |        |-------------------------|
	| Transf  |          |          |        |      N(R)          | P  |  5
	|------------------------------------------------------------------|
	|   S     |          |          |        | 0  0  0  0  0  0  0  1  |  4
	|   U     |    RR    |   RR     |        |-------------------------|
	|   P     |          |          |        |      N(R)          |P/F |  5
	|   E     |----------|----------|--------|-------------------------|
	|   R     |          |          |        | 0  0  0  0  0  0  0  1  |  4
	|   V     |    RNR   |   RNR    |        |-------------------------|
	|   I     |          |          |        |      N(R)          |P/F |  5
	|   S     |----------|----------|--------|-------------------------|
	|   O     |          |          |        | 0  0  0  0  0  0  0  1  | 4
	|   R     |    REJ   |   REJ    |        |-------------------------|
	|   Y     |          |          |        |      N(R)          |P/F | 4
	|-------- |----------|----------|--------|-------------------------|
	|   U     |  SABME   |          |        | 0  1  1 |P |1  1 | 1 1  | 4
	|   N     |----------|----------|--------|---------|--|-----|------|
	|   N     |          |  DM      |        | 0  0  0 |F |1  1 | 1 1  | 4
	|   U     |----------|----------|--------|---------|--|-----|------|
	|   M     |   UI     |          |        | 0  0  0 |P |0  0 | 1 1  | 4
	|   B     |----------|----------|--------|---------|--|-----|------|
	|   E     |   DISC   |          |        | 0  1  0 |P |0  0 | 1 1  | 4
	|   R     |----------|----------|--------|---------|--|-----|------|
	|   E     |          |   UA     |        | 0  1  1 |F |0  0 | 1 1  | 4
	|   D     |----------|----------|--------|---------|--|-----|------|
	|         |          |   FRMR   |        | 0  1  1 |F |0  1 | 1 1  | 4
	|-------- |----------|----------|--------|---------|--|-----|------|
	|  Mgt    |  XID     |   XID    |        | 1  0  1 |PF|1  1 | 1 1  | 4
	--------------------------------------------------------------------

*/
					/* Information Frame */

		case 'I' :
			mg_p	();							/* poll bit */
			mg_nr	();							/* N(R) */
			mg_ns	();							/* N(S) */


			Buffer_alloc;						/* allocate a buffer */

			S_msg_init_link_buffer;				/* link the buffer */

				/* Set frame pointer and init data size */

			p_snd_frame			= (union frame FAR *)Buffer_a_start_data;

				/* Build the frame information */

			if (ns_pdu_2 == OFF) {
				Buffer_data_size = S_i_size + build_i_pdu_ns ((uchar FAR *)p_snd_frame + S_i_size);

			} else {

				Buffer_data_size = S_i_size + build_i_pdu_ns_2 ((uchar FAR *)p_snd_frame + S_i_size);
			}

			if (Buffer_data_size == S_i_size) {
				return (0);
			}

			g_cr[0]	= 'C';		/* command */

			S_i_load (g_p, g_nr, g_ns);
			break;

				/* Supervision Frame */

		case 'S' :
			S_msg_data_size =  S_s_size;
			mg_cr			();							/* C/R */

			if (Toupper(g_cr[0]) =='C') {
				mg_command_s	();      				/* C : RR, RNR, REJ */
				mg_p			();						/* Poll bit */
				g_pf			= g_p;

			} else {

				mg_response_s	();   					/* R : RR, RNR, REJ */
				mg_f			();						/* final bit */
				g_pf			= g_f;
			}

			mg_nr	();      							/* N(R) */

			switch	(Toupper (g_command[0])) {

					/* RR */

				case 'R' :
					S_s_load (RR, g_pf, g_nr);
					break;

					/* RNR */

				case 'N' :
					S_s_load (RNR, g_pf, g_nr);
					break;

					/* REJECT */

				case 'J' :
					S_s_load (REJ, g_pf, g_nr);
					break;


				default:
					mg_err ("simul_frame");
					return (0);
			}
			break;

				/* Unumbered Frame format */

		case 'U' :
			S_msg_data_size = S_u_size;
			mg_cr			();

			switch (Toupper (g_cr[0])) {

					/* Command or Response */

						/* Command */

				case 'C' :
					mg_command_u	();
					mg_p			();

					switch (Toupper(g_command[0])) {

							/* SABME */

						case 'S':
							S_u_load (SABME, g_p);
							break;

							/* UI */

						case 'I' :
							S_msg_data_size = 0;

							Buffer_alloc;

							S_msg_init_link_buffer;				/* link the buffer to the message */

							p_snd_frame	= (union frame FAR *)Buffer_a_start_data;

#							if DL_LAP4K == OFF

								if ((g_sapi == DL_SAPI_MDL) && (g_tei == DL_TEI_BROADCAST)) {

									/* Build the ASP message */

								if ((Buffer_data_size = build_pdu_asp ((uchar FAR *)p_snd_frame + S_u_size)) == 0) {
									return (0);
								}


								} else {

										/* Build the frame information */

									if (ns_pdu_2 == OFF) {
										Buffer_data_size = build_ui_pdu_ns ((uchar FAR *)p_snd_frame + S_u_size);

									} else {

										Buffer_data_size = build_ui_pdu_ns_2 ((uchar FAR *)p_snd_frame + S_u_size);
									}

								}

#							else

								g_sapi 	= DL_SAPI_MDL;
								g_tei	= DL_TEI_BROADCAST;

									/* Build the ASP LAP4K message */

								if ((Buffer_data_size = build_pdu_asp_lap4k ((uchar FAR *)p_snd_frame + S_u_size)) == 0) {
									return (0);
								}

#							endif

							Buffer_data_size += S_u_size;
							S_u_load (UI, g_p);
							break;


							/* SI0 */

						case '0' :
							S_msg_data_size = 0;

							Buffer_alloc;

							S_msg_init_link_buffer;				/* link the buffer to the message */

							p_snd_frame	= (union frame FAR *)Buffer_a_start_data;

							if ((g_sapi == DL_SAPI_MDL) && (g_tei == DL_TEI_BROADCAST)) {

									/* Build the ASP message */

								if ((Buffer_data_size = build_pdu_asp ((uchar FAR *)p_snd_frame + S_u_size)) == 0) {
									return (0);
								}

							} else {

									/* Build the frame information */

								if (ns_pdu_2 == OFF) {
									Buffer_data_size = build_i_pdu_ns ((uchar FAR *)p_snd_frame + S_u_size);

								} else {

									Buffer_data_size = build_i_pdu_ns_2 ((uchar FAR *)p_snd_frame + S_u_size);
								}


							}

							Buffer_data_size += S_u_size;
							S_u_load (SI0, g_p);
							break;

							/* SI1 */

						case '1' :
							S_msg_data_size = 0;

							Buffer_alloc;

							S_msg_init_link_buffer;				/* link the buffer to the message */

							p_snd_frame	= (union frame FAR *)Buffer_a_start_data;

							if ((g_sapi == DL_SAPI_MDL) && (g_tei == DL_TEI_BROADCAST)) {

									/* Build the ASP message */

								if ((Buffer_data_size = build_pdu_asp ((uchar FAR *)p_snd_frame + S_u_size)) == 0) {
									return (0);
								}

							} else {

									/* Build the frame information */

								if (ns_pdu_2 == OFF) {
									Buffer_data_size = build_i_pdu_ns ((uchar FAR *)p_snd_frame + S_u_size);

								} else {

									Buffer_data_size = build_i_pdu_ns_2 ((uchar FAR *)p_snd_frame + S_u_size);
								}


							}

							Buffer_data_size += S_u_size;
							S_u_load (SI1, g_p);
							break;

							/* Disconnect */

						case 'D' :
							S_u_load (DISC, g_p);
							break;

							/* XID */

						case 'X' :
							S_msg_data_size = 0;

							Buffer_alloc;

							S_msg_init_link_buffer;				/* link the buffer to the message */

							p_snd_frame	= (union frame FAR *)Buffer_a_start_data;

							Buffer_data_size = build_pdu_xid ((uchar FAR *)p_snd_frame + S_u_size);
							Buffer_data_size += S_u_size;
							S_u_load (XID, g_p);
							break;

						default:
							mg_err ("simul_frame");
							return (0);

					}
					break;

						/* Response */

				case 'R' :
					mg_response_u ();
					mg_f ();

					switch (Toupper (g_command[0])) {

							/* DM */

						case 'D' :
							S_u_load (DM, g_f);
							break;

							/* UA */

						case 'U' :
							S_u_load (UA, g_f);
							break;

							/* FRMR */

						case 'F' :
							S_msg_data_size = S_frmr_size;
							S_u_load (FRMR, g_f);
							break;

							/* SI0 */

						case '0' :
							S_u_load (SI0, g_f);
							break;

							/* SI1 */

						case '1' :
							S_u_load (SI1, g_f);
							break;

							/* XID */

						case 'X' :
							S_msg_data_size = 0;

							Buffer_alloc;

							S_msg_init_link_buffer;				/* link the buffer to the message */

							p_snd_frame	= (union frame FAR *)Buffer_a_start_data;

							Buffer_data_size = build_pdu_xid ((uchar FAR *)p_snd_frame + S_u_size);

							Buffer_data_size += S_u_size;
							S_u_load (XID, g_f);
							break;

							/* unknown */

						default :
							mg_err ("simul_frame");
							return (0);
					}
					break;

					/* unknown Command or Response */

				default :
				mg_err ("simul_frame");
				return (0);
			}
			break;

			/* Alias frame : PH primitive */

		case 'P' :

				/* Primitive code */

			mg_code ();

			 while (g_code [0] == '?') {
				pr_ph_code ();
				mg_code ();
			}

			S_msg_code = g_code [0];

			if (g_code [0] == PH_ACT_IN) {
				mg_role ();

				switch Toupper (g_role [0]) {

					case 'A' :
						Ph_act_role		= DXE_ANSWERER;
						S_msg_data_size = Ph_act_size;
						break;

					case 'O' :
						Ph_act_role		= DXE_ORIGINATOR;
						S_msg_data_size = Ph_act_size;
						break;

					default :
						break;

				}

			}
			return (1);

			/* unknown Format */

		default:
			mg_err ("simul_frame");
			return (0);
	 }

		/* Primitive code */

	 S_msg_code = PH_DA_IN;

		/* Build the frame address */

	 load_frame_address ();

		/* Build a invalid frame ? */

	 if (Isupper (g_format[0])) {
		return (1);
	 }

		/* Yes : invalid frame builder (by perturbation method) */

		/* Read the error code */

	 for (mg_err_code (); g_err_code[0] == '?'; pr_err_code (), mg_err_code ());

	 switch (Toupper (g_err_code[0])) {

			/* too long */

		case ERROR_FRAME_TOO_LONG :

			switch (Toupper (g_format[0])) {

				case 'I' :
					Buffer_data_size = Buffer_data_lgth;
					break;

				case 'S' :
					S_msg_data_size = Message_data_lgth;
					break;

				case 'U' :
					if (Toupper(g_command[0]) == 'I') {
						Buffer_data_size = Buffer_data_lgth;

					} else {

						S_msg_data_size = Message_data_lgth;
					}
					break;

			}
			break;

			/* I and UI empty */

		case ERROR_FRAME_I_EMPTY :

			switch (Toupper (g_format[0])) {

				case 'I' :

						/* set I frame header size */

					if (g_from[0] == ENT_PH_D) {

#						if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON)

#							if DL_MODULO_128 == ON

									/* LAPD, V120 or LAP4K protocol */

								Buffer_data_size = i_size_d_128 ();		/* LAPD - modulo 128 */

#							endif

#						endif

					} else {

#						if DL_LAPB == ON

#							if DL_MODULO_128 == ON

									/* LAPB protocol */

								Buffer_data_size = i_size_b_128 ();			/* LAPB - modulo 128 */

#							endif

#						endif

					}
					break;

				case 'S' :
					break;

				case 'U' :

					if (Toupper(g_command[0]) == 'I') {
						Buffer_data_size = Fr_u_size;
					}
					break;

			}
			break;

			/* too short */

		case ERROR_FRAME_TOO_SHORT :

			switch (Toupper (g_format[0])) {

				case 'I' :
					Buffer_data_size = Fr_i_size - 2;
					break;

				case 'S' :
					S_msg_data_size = Fr_s_size - 1;
					break;

				case 'U' :

					if (Toupper(g_command[0]) == 'I') {
						Buffer_data_size = Fr_u_size - 1;

					} else {

						S_msg_data_size = Fr_u_size - 1;
					}
					break;

			}
			break;

				/* Invalid EA1 */

		case ERROR_FRAME_EA1 :
			S_address_load_ea1 (S_ea1 ^ 1);
			break;

#		if MODULO == 128

					/* Invalid EA2 */

			case ERROR_FRAME_EA2 :

				if (g_from[0] == ENT_PH_D) {
					S_address_load_ea2 (S_ea2 ^ 1);
				}
				break;

#		endif

			/* Invalid SAPI */

		case ERROR_FRAME_SAPI :
			S_address_load (DL_SAPI_INVALID, S_tei, S_cr);
			break;

			/* Invalid TEI */

		case ERROR_FRAME_TEI :

			if (g_from[0] == ENT_PH_D) {
				S_address_load (S_sapi, DL_TEI_INVALID, S_cr);
			}
			break;

			/*  Invalid C/R */

		case ERROR_FRAME_CR :
			S_address_load (S_sapi, S_tei, S_cr ^ 1);
			break;

			/* invalid frame header encoding */

		case ERROR_FRAME_ENCODING :

			switch (Toupper (g_format[0])) {

				case 'I' :
					break;

				case 'S' :
					S_s_load (S_INVALID, S_s_pf, S_s_nr);
					break;

				case 'U' :
					S_u_load (U_INVALID, S_u_pf);
					break;

			}
			break;

			/* Invalid poll/final bit */

		case ERROR_FRAME_PF :

			switch (Toupper (g_format[0])) {

				case 'I' :
					S_i_load (S_i_p ^ 1, S_i_nr, S_i_ns);
					break;

				case 'S' :
					S_s_load (S_s_command, S_s_pf ^ 1, S_s_nr);
					break;

				case 'U' :
					S_u_load (S_u_command, S_u_pf ^ 1);
					break;

			}
			break;


		default :
			mg_err ("simul_frame");
			return (0);

	 }

	 return (1);

}

/*-------------------------------------------------------------------------*/

ushort build_pdu_xid (p_data)
	uchar FAR *p_data;				/* information address */
{
	ushort	val = 0;
	ushort 	scan_count;
	ushort 	i_data;

		/* Input the XID information field data */

	i_data		= 0;
	scan_count	= 0;

	do {
		Prompt	("XID byte ", 3x, val);
		Scan	(             3x, &val);
		Echo	(             3x, val);
		if ((scan_count != 0) && (val != 256)) {
			*p_data++ = (uchar) val; i_data++;

		} else {

			scan_count = 0;
		}

	} while (scan_count != 0);

		/* Return the information size */

	return (i_data);

}

/*-------------------------------------------------------------------------*/

#endif /* DL_SIM_BUILDER  */

/*EOF*/
