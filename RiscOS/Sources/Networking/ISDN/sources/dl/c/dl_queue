
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_queue.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *       dl_in_queue_incoming_rq_co, dl_out_queue_incoming_rq_co,
 *		 dl_discard_queue_incoming_rq_co are functions or macro
 *		 that manage the queues of a NA.
 *
 *       the following functions or macro manage the message queues
 *       (pointing on an UI or I frame) of a data link	connection.
 *       The manipulated queue is located in the dlcep current context.
 *
 *       . in_queue - implements the queuing of a message to the end of the
 *                    current queue (UI or I).
 *
 *       . out_queue - implements the extraction of the first message from
 *                     the current queue (UI or I).
 *
 *       . discard_queue  - implements the clearing of a current queue
 *                          (UI or I).
 *
 *       . get_next_i_queue_entry - implements the positionning of p_rcv_msg on
 *							        the next message to send.
 *
 *       . set_acknowledged - implements the positionning of the sent pointer
 *                            on the last sent message.
 *
 *       . reset_unacknowledged - implements the roll back of a sent message (for
 *                                redoing the sending of the message).
 *
 *       . get_last_transmitted_i_frame - implements the initialisation of
 *						   the pointer p_rcv_msg on the last sent message
 *                         (that points to the last sent frame).
 *
 *      dlx_in_queue, dlx_out_fifo, dlx_discard_fifo,
 *      dlx_selective_discard_fifo are functions that manage the IFO of a
 *      half duplex channel.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"
#include "it.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            dl_in_queue_incoming_rq_co, dl_out_queue_incoming_rq_co,
				dl_discard_queue_incoming_rq_co are functions or macro
				that manage the queues of a NA channel.

Usage           void dl_in_queue_incoming_rq_co			();
				uchar dl_out_queue_incoming_rq_co 		();
				void dl_discard_queue_incoming_rq_co	();
					- chani : channel ID as index.

Description     The queue is organized by NA channel as follow :

				P_FIRST <---> message <----> message <---> .... <---> message.
																	 |
				P_LAST------------------------------------------------

				The functions or macros are the only functions or macros
				that manipulate the queues.

				Manipulations are :

					- adding an element at the end of the queue (in_queue).

					- accepting a message from the top of the queue
					  (out_queue).

					- clearing the queue (discard_queue).

Common : dl context.

*--------------------------------------------------------------------------*/

void dl_in_queue_incoming_rq_co ()
{
	struct	message	FAR	*p_msg;	/* temporary pointer to received message */

		/*
			If the message has a lib flag set to OFF
			it can not be reused and the linked buffer
			is going to point on one more message.
		*/

	if (R_msg_lib == OFF) {

			/* Save the received message pointer */

		p_msg 		= p_rcv_msg;

			/* Allocate a new message and initialize it */

		p_rcv_msg	= Alloc_msg ();

			/* Copy usefuf data from *p_msg to *p_rcv_msg */

		Memcpy_far ((char FAR *)p_rcv_msg,
					(char FAR *)p_msg,
					 L_msg_data_offset + L_msg_data_size);

			/* Increment the message counter in the buffer */

		if (p_buffer != P_NIL) {
			It_disable ();
			Buffer_link_count++;
			It_enable ();
		}

	}

		/* Put the p_rcv_msg in DL queue */

	if (Chan_last_rq == P_NIL) {
		Next (p_rcv_msg)	= Prior (p_rcv_msg)	= P_NIL;
		Chan_first_rq 		= Chan_last_rq 		= p_rcv_msg;

	} else {

		Next (p_rcv_msg)	= P_NIL;
		Prior (p_rcv_msg)	= Chan_last_rq;
		Next (Chan_last_rq)	= p_rcv_msg;
		Chan_last_rq 		= p_rcv_msg;
	}

	p_rcv_msg = P_NIL;

}

/*-------------------------------------------------------------------------*/

uchar dl_out_queue_incoming_rq_co ()
{

		/* Release the current received message before using p_rcv_msg */

	Free_msg (p_rcv_msg);

		/* First message of the queue */

	if ((p_rcv_msg = Chan_first_rq) == P_NIL ) {
		return (NOK);
	}

		/* Extract and rebuild the queue */

	if (Next (Chan_first_rq) == P_NIL) {
		Chan_first_rq = Chan_last_rq 	= P_NIL;

	} else {

		Prior (Next (Chan_first_rq)) 	= P_NIL;
		Chan_first_rq 					= Next (p_rcv_msg);
	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

void dl_discard_queue_incoming_rq_co ()
{
	struct message 	FAR	*p_msg,	FAR *p_old;		/* temporary message pointers */
	ent_id_t			 ent_id;				/* temporary entity ID */

	for (p_msg = Chan_first_rq; p_msg != P_NIL; ) {

		if (L_msg_code == DL_EST_RQ) {
			p_old		= p_msg;
			ent_id		= L_msg_to;
			L_msg_to	= L_msg_from;
			L_msg_from	= ent_id;
			L_msg_code	= DL_REL_IN;
			p_msg		= Next (p_old);
			Send_message (p_old);

		} else {

			p_old		= p_msg;
			p_msg		= Next (p_old);
			Free_msg	(p_old);
		}

	}

	Chan_first_rq = Chan_last_rq = P_NIL;
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            in_queue, out_queue, discard_queue, get_next_i_queue_entry,
				set_last_sent, set_acknowledged, reset_unacknowledged,
				are functions or macro that manage the queues of a
				data link connection context.

Usage           void in_queue 					();
				uchar return code  out_queue 	();
				void discard_queue				();
				void get_next_i_queue_entry		();
				macro set_last_sent				();
				void set_acknowledged			();
				reset_unacknowledged			();

Description     The UI and I queues are organized by dlcep connection as
				follow :

				P_FIRST <---> message <----> message <---> .... <---> message.
																	 |
				P_LAST------------------------------------------------

				for the I queue P_SENT points to the last sent message.

				The functions or macros are the only functions or macros
				that manipulate the queues.

				Manipulations are :

					- adding an element at the end of the queue (in_queue).

					- accepting a message from the top of the queue
					  (out_queue).

					- clearing the queue (discard_queue).

					- pick-up the next message to send
					  (get_next_i_queue_entry).

					- set the P_SENT pointer to the last sent
					  (set_last_sent).

					- extract and release acknowledged message from
					  the queue(set_acknowledged).

					- set the last sent and not acknowledged message
					  to the to send state (reset_acknowledged).

					- get the last transmitted I frame
					  (get_last_transmitted_i_frame).

*--------------------------------------------------------------------------*/

		/* p_rcv_msg points the message to queue */

void in_queue (qu_x)
	uchar 	qu_x;					/* queue index */
{
	struct	message 	FAR	*p_msg;	/* temporary pointer to received message */

		/* If link count EQ 0 force to 1 */

	if (((p_buffer = R_msg_p_buffer) != P_NIL) && (Buffer_link_count == 0)) {
		Buffer_link_count = 1;
	}

		/*
			If the message has a lib flag set to OFF
			it can not be reused and the linked buffer
			is going to point on one more message.
		*/

	if (R_msg_lib == OFF) {

			/* Save the received message pointer */

		p_msg = p_rcv_msg;

			/* Allocate a new message and initialize it */

		p_rcv_msg	= Alloc_msg ();

			/* Copy usefuf data from *p_msg to *p_rcv_msg */

		Memcpy_far ((char FAR *)p_rcv_msg,
					(char FAR *)p_msg,
					 L_msg_data_offset + L_msg_data_size);

			/* Increment the message counter in the buffer */

		if (p_buffer != P_NIL) {
			It_disable ();
				Buffer_link_count++;
			It_enable ();
		}

	}

		/* Put the p_rcv_msg in DL queue */

	if (Last (qu_x) == P_NIL) {
		Next  (p_rcv_msg)	= Prior (p_rcv_msg)	= P_NIL;
		First (qu_x)		= Last (qu_x)		= p_rcv_msg;

	} else {

		Next  (p_rcv_msg)	= P_NIL;
		Prior (p_rcv_msg)	= Last (qu_x);
		Next  (Last(qu_x))	= p_rcv_msg;
		Last  (qu_x)		= p_rcv_msg;
	}


#	if DL_FC == ON

			/*
				Update the Flow control current mark
				and compare to the high mark.
			*/

		if ((qu_x == QU_I) 						&&
			(Out_fc_high_mark != 0)				&&
			(++Out_fc_mark == Out_fc_high_mark) &&
			(Out_fc_state != BUSY)) {

				/* Set FC mark state to BUSY */

			Out_fc_state	= BUSY;

				/* Send a DL_BUSY_IN to the upper layer */

			p_msg 			= p_snd_msg;	/* Save current send pointer */
			p_snd_msg		= P_NIL;		/* send pointer to P_NIL */

			Send_to_l3 (DL_BUSY_IN);		/* Send DL_BUSY_IN to upper layer */

			p_snd_msg 		= p_msg;
		}                                   /* restore send pointer */

#	endif

	p_rcv_msg = P_NIL;

}

/*-------------------------------------------------------------------------*/

uchar out_queue (qu_x)
	uchar 						 qu_x;	/* queue index */
{
#	if DL_FC == ON
		struct	message 	FAR	*p_msg;	/* temporary pointer to received message */
#	endif

		/* Release the current received message before using p_rcv_msg */

	Free_msg (p_rcv_msg);

		/* First message of the queue */

	if ((p_rcv_msg = First (qu_x)) == P_NIL) {
		return (NOK);
	}

		/* Extract and rebuild the queue */

	if (Next (First (qu_x)) == P_NIL) {
		First (qu_x) = Last (qu_x) = P_NIL;

	} else {

		Prior (Next (First (qu_x)))	= P_NIL;
		First (qu_x)				= Next (p_rcv_msg);
	}

#	if DL_FC == ON

			/*
				Update the Flow control current mark
				and compare to the high mark.
			*/

		if ((qu_x == QU_I) 						&&
			(Out_fc_high_mark != 0)				&&
			(--Out_fc_mark == Out_fc_low_mark) 	&&
			(Out_fc_state == BUSY)) {

				/* Reset FC mark state */

			Out_fc_state	= FREE;

				/* Send a DL_CLEAR_BUSY_IN to the upper layer */

			p_msg 			= p_snd_msg;	/* Save current send pointer */
			p_snd_msg		= P_NIL;		/* send pointer to P_NIL */

			Send_to_l3 (DL_CLEAR_BUSY_IN);	/* Send DL_CLEAR_BUSY_IN to upper layer */

			p_snd_msg 		= p_msg;
		}                                 	/* restore send pointer */


#	endif

	return (OK);

}

/*-------------------------------------------------------------------------*/

void discard_queue (qu_x)
	uchar 				qu_x;					/* queue index */
{
	struct message 	FAR	*p_msg, FAR *p_old;		/* temporary message pointers */
	struct message 	FAR	*p_save_p_snd_msg;		/* temporary message pointers */
	struct message 	FAR	*FAR *p_data;			/* temporary data message pointers */

	for (p_msg = First (qu_x); p_msg != P_NIL; ) {
		p_old		= p_msg;
		p_msg		= Next (p_old);

		if ((X_msg_lib (p_old) == OFF) && (Msg_in_ph_fifo (p_old))) {

				/*
					Message already in PH entity queue.
					Request to PH to clear it from the
					outgoing PH queue.
				*/

			p_save_p_snd_msg	= p_snd_msg;
			p_snd_msg 			= Alloc_msg ();
			p_data				= (struct message FAR *FAR *)(S_msg_a_start_data);
			*p_data 			= p_old;
			S_msg_data_size		= sizeof (struct message FAR *);

				/* Send to PH entity */

			Send_clear_to_ph	();
			p_snd_msg			= p_save_p_snd_msg;

		} else {

				/* Message waiting to be processed in DL entity */

			Free_msg (p_old);
		}

	}

	First (qu_x) = Last (qu_x) = Sent (qu_x) = P_NIL;

#	if DL_FC == ON

			/* Clear the out mark */

		Out_fc_mark		= 0;

			/* Reset the Flow control current mark. */

		if ((qu_x == QU_I) 						&&
			(Out_fc_high_mark != 0)				&&
			(Out_fc_state == BUSY)) {

				/* Reset the current mark */

			Out_fc_state	= FREE;

				/* Send a DL_CLEAR_BUSY_IN to the upper layer */

			p_msg 			= p_snd_msg;	/* Save current send pointer */
			p_snd_msg		= P_NIL;		/* send pointer to P_NIL */

			Send_to_l3 (DL_CLEAR_BUSY_IN);	/* Send DL_BUSY_IN to upper layer */

			p_snd_msg 		= p_msg;		/* restore send pointer */
		}

#	endif

}

/*-------------------------------------------------------------------------*/

void get_next_i_queue_entry ()
{

		/* Release the current received message */

	Free_msg (p_rcv_msg);

		/* Pick up next to send */

	if (Sent (QU_I) == P_NIL) {
		p_rcv_msg = First (QU_I);

	} else {

		p_rcv_msg = Next (Sent (QU_I));
	}

	if (p_rcv_msg != P_NIL) {
		Sent (QU_I) = p_rcv_msg;				/* sent queue */
	}

}

/*-------------------------------------------------------------------------*/

void set_acknowledged ()
{
	struct message FAR		 *p_save_p_snd_msg;	/* temporary message pointers */
	struct message FAR	*FAR *p_data;			/* temporary data message pointers */

#	if DL_MLP == ON
		struct message 	FAR *p_msg;				/* temporary message pointers */
		struct buffer	FAR *p_buff;			/* temporary buffer pointer */
		uchar 			FAR *p_data_ack;		/* data pointer */
		ushort			     data_size;			/* data size */
		ushort				 mlp_ack_list [MLP_ACK_LIST_SIZE];
		ushort				 mlp_ack_nb = 0;

#	endif
			/* Loop until VA = NR */

	while (Va != Ru_nr) {

			/* Extract from the I queue */

		if (out_queue (QU_I) == OK) {

#			if DL_MLP == ON

				if (Slp_nai != NAI_NIL) {

						/*
							The message has been copied but the buffer is
							common to DL and MLP.
						*/


					if ((p_buffer = R_msg_p_buffer) == P_NIL) {
						R_msg_data_size		-= I_size;		/* ajust the data size and */
						R_msg_data_offset 	+= I_size;      /* the data offset */
						p_data_ack 			 = R_msg_a_start_data;

					} else {

							/* Update the data size and the offset of the buffer */

						Buffer_data_size 	-= I_size;			/* ajust the data offset and */
						Buffer_data_offset 	+= I_size;			/* size to add the frame header */
						p_data_ack 			 = Buffer_a_start_data;
					}

					if (mlp_ack_nb <= MLP_ACK_LIST_SIZE) {

						mlp_ack_list [mlp_ack_nb] 	 = ((*p_data_ack++) << 8);
						mlp_ack_list [mlp_ack_nb++] |= *p_data_ack;

					} else {

						Trap (TRAP_MLP_ACK_CO_LIST, "set_acknowledged");
					}

				}

#			endif

				/* Update last sent pointer ? */

			if (Sent (QU_I) == p_rcv_msg) {
				Sent (QU_I) = P_NIL;
			}

#			if ASSERT == ON

					/* The liberation flag shall be OFF */

				if (R_msg_lib == ON) {
					Trap (TRAP_MSG_LIB, "set_acknowledged");
				}

#			endif


				/*
					If the message is still in the PH queue submit the releasing
					to the PH entity.
				*/

			if (Msg_in_ph_fifo (p_rcv_msg)) {
				p_save_p_snd_msg	= p_snd_msg;
				p_snd_msg 			= Alloc_msg ();
				p_data				= (struct message FAR *FAR *)(S_msg_a_start_data);
				*p_data 			= p_rcv_msg;
				S_msg_data_size		= sizeof (struct message FAR *);

					/* Send to PH entity */

				Send_clear_to_ph	();
				p_snd_msg			= p_save_p_snd_msg;

			} else {

				Free_msg (p_rcv_msg);
			}

				/* No more available */

			p_rcv_msg = P_NIL;
		}

			/* Increment VA and loop */

#		if DL_U_FRAME == ON

			if (U_frame_flag == ON) {
				Va = ~(Va);

			} else {

				Inc_v_modulo (Va);
			}

#		else

				Inc_v_modulo (Va);
#		endif

	}

		/*
		   If no sent information  awaiting for acknowledgment and if an
		   ack check point requested by layer 3, send the DL COMMIT
		   indication to layer 3.
		*/

	if ((Commit_rq == ON) && (First (QU_I) == P_NIL)) {
		Commit_rq = OFF;
		Send_to_l3 (DL_COMMIT_CO);
	}

#	if DL_MLP == ON

		if ((Slp_nai != NAI_NIL) && (mlp_ack_nb != 0)) {

				/*
					Build and DL_ACK_CO message and
					send it to upper layer entity;
				*/

			data_size 	= mlp_ack_nb * sizeof (ushort);
			p_msg 		= P_NIL;
			p_buff 		= P_NIL;

			Prepare_data_to_send (p_msg, p_buff, data_size, p_data_ack);

			if (p_msg != P_NIL) {

					/* Copy the ack list in the data area */

				Memcpy_far ((char FAR *)p_data_ack,
							(char FAR *)&mlp_ack_list [0],
							 data_size);

					/* Send to upper layer */

				p_save_p_snd_msg	= p_snd_msg;
				p_snd_msg			= p_msg;

				Send_to_l3 			(DL_ACK_CO);

				p_snd_msg			= p_save_p_snd_msg;
			}

		}

#	endif

}

/*-------------------------------------------------------------------------*/

void reset_unacknowledged ()
{
	register uchar 		 i_size;					/* temporary size */
	struct message 	FAR	*p_msg;						/* temporary pointer */
	struct message 	FAR	*p_msg_sent;				/* new last sent */
	struct message 	FAR	*p_save_p_snd_msg;			/* temporary message pointers */
	struct message 	FAR	*FAR *p_data;				/* temporary data message pointers */
	struct message 	FAR	*p_msg_new;					/* temporary pointer */
	struct buffer 	FAR	*p_buffer_new;				/* temporary pointer */

	if ((p_msg = Sent (QU_I)) != P_NIL) {
		p_msg_sent = Prior (p_msg);					/* get the last previously sent message */

			/* Reset the I frame header for redoing the I frame sending */

		i_size = I_size;

#		if DL_U_FRAME == ON

			if (U_frame_flag == ON) {
				i_size--;
			}

#		endif


			/*
				If the message is in the PH queue submit the releasing
				in the FIFO to the PH entity.
			*/

		if (Msg_in_ph_fifo (p_msg)) {

				/* Allocate a new message and copy the old one in it */

			p_msg_new = Alloc_msg ();

				/* Copy usefull data from *p_msg to *p_msg_new */

			Memcpy_far ((char FAR *)p_msg_new,
						(char FAR *)p_msg,
						 L_msg_data_offset + L_msg_data_size);

				/* Copy also the buffer if used */

			if ((p_buffer = L_msg_p_buffer) != P_NIL) {

					/* Allocate a new buffer and copy the old one into it */

				if ((p_buffer_new = Alloc_buffer ()) != P_NIL) {

						/* Copy usefull data from *p_buffer to *p_buffer_new */

					Memcpy_far ((char FAR *)p_buffer_new,
								(char FAR *)p_buffer,
								 Buffer_data_offset + Buffer_data_size);

					X_msg_p_buffer (p_msg_new) = p_buffer = p_buffer_new;

					Buffer_link_count = 1;

				} else {

						/*
							Reuse the same buffer and increment
							the buffer link count.
						*/

					It_disable ();
						Buffer_link_count++;
					It_enable ();
				}

				Buffer_data_size              -= i_size;	/* ajust the data offset and */
				Buffer_data_offset            += i_size;	/* size to add the frame header */

			} else {

				X_msg_data_size   (p_msg_new) -= i_size;	/* Set the data size and */
				X_msg_data_offset (p_msg_new) += i_size;	/* the data offset */
			}

				/* Set the next and prior pointers of adjacent messages */

			if (Prior (p_msg) == P_NIL) {
				First (QU_I) = p_msg_new;

			} else {

				Next (Prior (p_msg)) = p_msg_new;
			}

			if (Next (p_msg) == P_NIL) {
				Last (QU_I) = p_msg_new;

			} else {

				Prior (Next (p_msg)) = p_msg_new;
			}

				/*
					Submit the message releasing to the PH entity
					using a PH_CLEAR_RQ primitive.
				*/

			p_save_p_snd_msg	= p_snd_msg;
			p_snd_msg 			= Alloc_msg ();
			p_data				= (struct message FAR *FAR *)(S_msg_a_start_data);
			*p_data 			= p_msg;
			S_msg_data_size		= sizeof (struct message FAR *);

				/* Send to PH entity */

			Send_clear_to_ph	();
			p_snd_msg			= p_save_p_snd_msg;

		} else {

			if ((p_buffer = L_msg_p_buffer) == P_NIL) {
				L_msg_data_size		-= i_size;			/* Set the data size and */
				L_msg_data_offset 	+= i_size;			/* the data offset */

			} else {

				Buffer_data_size 	-= i_size;			/* ajust the data offset and */
				Buffer_data_offset 	+= i_size;			/* size to add the frame header */
			}

		}

		Sent (QU_I)	= p_msg_sent;					/* and put it as last sent */
	}

}

/*-------------------------------------------------------------------------*/

	/* Load p_rcv_msg with the last transmitted message */

void get_last_transmitted_i_frame ()
{

	register uchar i_size;

		/*
			Release the current received message in order
			to use p_rcv_msg pointer.
		*/

	Free_msg (p_rcv_msg);

		/*  Loop while last transmitted message by the DL level */
		/*	Get the address of the last transmitted I frame 	*/

	while ((p_rcv_msg = Sent (QU_I)) != P_NIL) {

			/*
				If LAPB Go to last acknowledged I frame.

				If LAPD Check if the I frame has already
				been transmitted by PH entity.
			*/


		if ((Dl_entity_id  == ENT_DL_B) ||
			((Dl_entity_id != ENT_DL_B) && (Msg_in_ph_fifo (p_rcv_msg)))
		   ) {

				/*
					The message is not transmitted by PH -->
					clear it from the PH entity :
						. decrement VS,
						. reset the message as unacknowledged.
				*/

			Dec_v_modulo (Vs);

				/*
					Clear the message from the PH queue
					and update Sent pointer.
				*/

			reset_unacknowledged ();

		} else {

				/* Message is already transmitted or acknowledged, send it again */

				/*  Reset the I frame header from the message or the linked buffer */

			i_size = I_size;

#			if DL_U_FRAME == ON

				if (U_frame_flag == ON) {
					i_size--;
				}

#			endif

			if ((p_buffer = R_msg_p_buffer) == P_NIL) {
				R_msg_data_size		-= i_size;		/* ajust the data size and */
				R_msg_data_offset 	+= i_size;      /* the data offset */

			} else {

				Buffer_data_size 	-= i_size;		/* ajust the data offset and */
				Buffer_data_offset 	+= i_size;		/* size to add the frame header */
			}

			return;
		}

	}

		/*
			No frame sent by DL_D or DL B case :
				.take the first frame ready to transmit if any and set it
				 as last transmitted frame.
		*/

	if ((Sent (QU_I) = p_rcv_msg = First (QU_I)) != P_NIL) {
		Inc_v_modulo (Vs);
	}

}

/*--------------------------------------------------------------------------*/


#if ASSERT == ON

void dl_queue_check (qu_x)
	uchar 				qu_x;					/* queue index */
{
	struct message 		FAR	*p_msg;        		/* current message */
	struct message 		FAR	*p_prior;			/* prior message */
	uchar					 sent = FALSE;		/* Sent pointer flag */
	uchar					 nb_msg = 0;		/* message counter */

	for (p_prior = P_NIL, p_msg = First (qu_x); p_msg != P_NIL; p_prior	= p_msg, p_msg = Next (p_prior)) {

		if (p_prior !=  Prior (p_msg)) {
			Trap (TRAP_DL_QUEUE_CHECK, "dl_queue_check: prior");
		}

			/* I queue */

		if (qu_x == QU_I) {

			if (p_msg == Sent (QU_I)) {
				sent = TRUE;
			}

			nb_msg++;

		}

	}

	if (Last (qu_x) != p_prior) {
		Trap (TRAP_DL_QUEUE_CHECK, "dl_queue_check : last");
	}

	if (qu_x == QU_I) {

		if ((sent == FALSE) && (Sent (QU_I) != P_NIL)) {
			Trap (TRAP_DL_QUEUE_CHECK, "dl_queue_check : sent");
		}

#		if DL_FC == ON

			if ((Out_fc_high_mark != 0) && (Out_fc_mark != nb_msg)) {
				Trap (TRAP_DL_QUEUE_CHECK, "dl_queue_check : nb");
			}

#		endif

	}

}

#endif

#if DL_LAPX == ON
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            dlx_in_queue, dlx_out_fifo, dlx_discard_fifo,
				dlx_selective_discard_fifo are functions that manage the
				FIFO of a half duplex channel.

Usage           void 	dlx_in_fifo 				(); use p_snd_msg
				uchar 	dlx_out_fifo 				(); use p_snd_msg
				void 	dlx_discard_fifo			();
				void 	dlx_selective_discard_fifo	(); use p_snd_msg

						- common p_dlchan : channel pointer.

Description     The HDTM FIFO are organized by channel as follow :

				P_FIRST ---> message ----> message ---> .... ---> message.
																	 |
				P_LAST------------------------------------------------

				Manipulations are :

					- adding an element at the end of the FIFO (in_fifo).

					- accepting a message from the top of the FIFO (out_fifo).

					- clearing the FIFO (discard_fifo).

					- clearing one message from the queue
					  (selective_discard_fifo).

*--------------------------------------------------------------------------*/

void dlx_in_fifo ()
{
	struct message FAR	*p_msg;		/* temporary message pointers */

	S_msg_p_services = P_NIL;		/* Last message in the FIFO */

	if ((p_msg = Chan_dlx_last) == P_NIL) {

			/* empty FIFO */

		Chan_dlx_first =
		Chan_dlx_last  = p_snd_msg;

	} else {

			/* Not empty FIFO */

		L_msg_p_services 	=
		Chan_dlx_last  		= p_snd_msg;
	}

	p_snd_msg = P_NIL; p_buffer = P_NIL;

}

/*-------------------------------------------------------------------------*/

uchar dlx_out_fifo ()
{

		/* Release the current received message before using p_snd_msg */

	Free_msg (p_snd_msg);

		/* First message of the FIFO */

	if ((p_snd_msg = Chan_dlx_first) == P_NIL ) {

			/* Empty FIFO */

		return (NOK);
	}

		/* Extract and rebuild the FIFO */

	if (S_msg_p_services == P_NIL) {

			/* Only one message in the FIFO */

		Chan_dlx_first = Chan_dlx_last = P_NIL;

	} else {

			/* More than one message in the FIFO */

		Chan_dlx_first = S_msg_p_services;
	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

void dlx_discard_fifo ()
{
	struct message FAR	*p_msg, FAR *p_old;		/* temporary message pointers */
	uchar				 lib_flag;				/* liberation flag */

	for (p_msg = Chan_dlx_first; p_msg != P_NIL; ) {
		p_old 		= p_msg;
		lib_flag 	= L_msg_lib;
		p_msg 		= L_msg_p_services;

		if (lib_flag == ON) {
			Free_msg (p_old);

		} else {

			Msg_reset_in_ph_fifo_mark (p_old);
		}

	}

	Chan_dlx_first = Chan_dlx_last = P_NIL;

}

/*-------------------------------------------------------------------------*/

uchar dlx_selective_discard_fifo (p_msg_clear)
	struct message FAR	*p_msg_clear;	/* temporary message pointers */
{
	struct message FAR	*p_msg;			/* temporary message pointers */
	struct message FAR	*p_prior;		/* temporary message pointers */

	p_prior = P_NIL;

	for (p_msg = Chan_dlx_first; p_msg != P_NIL; p_msg = L_msg_p_services) {

		if (p_msg == p_msg_clear) {

				/* Message to discard is in the FIFO */

			if (p_prior == P_NIL) {

					/* First of the FIFO */

				Chan_dlx_first = L_msg_p_services;

			} else {

					/* Not first of the FIFO */

				X_msg_p_services (p_prior)	= L_msg_p_services;
			}

			if (L_msg_p_services == P_NIL) {

					/* Last of the FIFO */

				Chan_dlx_last = p_prior;
			}

				/* Free the message */

			Free_msg (p_msg);
			return (STOP);
		}

		p_prior = p_msg;
	}

	return (CONTINUE);
}

#endif

/*-------------------------------------------------------------------------*/

void dl_in_queue ()
{

		/* Queue a new message */

	Fifo_put_msg 	((struct message FAR *FAR *)&dl_internal_queue.p_first,
					 (struct message FAR *FAR *)&dl_internal_queue.p_last,
					 p_snd_msg);

	p_snd_msg = P_NIL;
}

/*-------------------------------------------------------------------------*/

struct message FAR *dl_out_queue ()
{
	struct message FAR *p_msg;

		/* First message of the queue */

	Fifo_get_msg (&dl_internal_queue.p_first, &dl_internal_queue.p_last, p_msg);

	return (p_msg);
}

/*-------------------------------------------------------------------------*/

/*EOF*/

