
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         mc_user - implements the mc_user pseudo entity main function.
 *         of the user side.
 *
 *         mc_net  - implements the pseudo Connection Management entity 
 *		   main function of the network side.
 *
 *		   mc_xid_parm_cfg_build_and_send - implements the building and 
 *         sending of an XID frame used for parameter negociation.
 *
 *		   mc_xid_test_build_and_send - implements the building and 
 *         sending of an XID frame used for testing.
 *
 *		   mc_xid_load_param_from_cfg - implements the loading of the XID
 *		   parameter data from the configuration values store in the
 *		   current context.
 *
 *		   mc_load_ctx_param_from_xid - implements the loading of the current
 *		   context parameter data from the configuration the XID decoded 
 *		   values.
 *
 *		   mc_send_to_ml - implements the sending of a message from
 *		   the pseudo MC entity to the pseudo ML entity.
 *
 *         mc_xid_in_process  - implements the processing of an XID INDICATION 
 *		   primitive received by the network part.
 *
 *         mc_xid_selec_param  - implements the parameter selection from
 *		   a remote request and the local configuration.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* Compilation options */

#define ENTITY 					MDL					/* layer Management Data Link entity */
#define MODULO 					128					/* MODULO 128 */

#include "dl.h"
#include "ctx_ext.h"
#include "xid_int.h"

#if (DL_LAPD == ON)

			/* Access to the MDL objects */

extern	struct	mdlna 			FAR *p_mdlna;		/* pointer to the current Network Access object */
extern	struct 	mdlsap 			FAR *p_mdlsap;		/* pointer to the Service Access Point object */
extern	struct	mdlcep 			FAR *p_mdlcep;		/* pointer to the curent Connection Endpoint object */

			/* Current TEI and CES values */

extern	uchar					tei;			   	/* TEI value */
extern	ces_t					ces;				/* current CES */

#if (DL_LAP4K  == ON) || (DL_LAPF == ON)
	extern	ushort				first_mdlces;		/* position of the first mdlces structure */
#endif

			/* MC common */

static	uchar					mc_location;		/* USER_SIDE or NETWORK_SIDE */

#define	USER_SIDE				'u'					/* User side */
#define NETWORK_SIDE			'n'					/* Network side */

			/* XID parameters data structure */

		struct xid_param xid_param;

			/* XID number of parameter found */

#if MC_TEST_PROCEDURE == ON || MC_DEFAULT_PARAMETER == OFF
	static	uchar		 nb_id;
#endif

#if MC_DEFAULT_PARAMETER == OFF

			/* XID parameters meta program descriptor */

		D_XID_START (xid_param_prog)
			D_XID_GROUP (xid_group_param)
				D_XID_SHORT 	(xid_n201_tx)
				D_XID_SHORT 	(xid_n201_rx)
				D_XID_CHAR		(xid_k_tx)
				D_XID_LONG		(xid_t200)
		D_XID_END (xid_param_end)

		XID_START (xid_param_prog, XID_FI_CCITT)
			XID_GROUP (XID_DL_D_GI_PARAM, 									&Xid_param_group_flag)
				XID_SHORT 	(XID_DL_D_PI_N201_TX, 	2, 	&Xid_param_n201_tx,	&Xid_param_n201_tx_flag)
				XID_SHORT 	(XID_DL_D_PI_N201_RX, 	2, 	&Xid_param_n201_rx,	&Xid_param_n201_rx_flag)
				XID_CHAR	(XID_DL_D_PI_K_TX,    	1, 	&Xid_param_k_tx,	&Xid_param_k_tx_flag)
				XID_LONG	(XID_DL_D_PI_T200,    	1, 	&Xid_param_t200,	&Xid_param_t200_flag)
		XID_END ()

#endif

#if MC_TEST_PROCEDURE == ON

			/* XID test data */

			uchar	xid_p_group_test_val[XID_TEST_SIZE];
	CONST	ushort	xid_group_test_size	= XID_TEST_SIZE;
			uchar	xid_group_test_flag;

			/* XID test meta program descriptor */

		D_XID_START (xid_test_prog)
			D_XID_GROUP (xid_group_test)
				D_XID_GROUP_VAL (xid_group_test_val)
		D_XID_END (xid_test_end)

		XID_START (xid_test_prog, XID_FI_CCITT)
			XID_GROUP (XID_DL_D_GI_TEST, 									&xid_group_test_flag)
				XID_GROUP_VAL (												&xid_group_test_size, &xid_p_group_test_val [0])
		XID_END ()

#endif

			/* Function prototype */

#if NEW_FCT_STYLE == ON
	void	mc_xid_load_param_from_cfg		(void);
	void	mc_load_ctx_param_from_xid		(void);
	ushort	mc_xid_param_cfg_build_and_send	(void);
	void	mc_send_to_ml					(code_t code);
	ushort	mc_xid_test_build_and_send		(void);
	void	mc_xid_load_test_pattern		(void);
	uchar	mc_xid_test_match				(void);
	void	mc_xid_in_process				(void);
	void	mc_xid_select_param				(void);
	void	mc_err_in_process				(void);

#else

	void	mc_xid_load_param_from_cfg		();
	void	mc_load_ctx_parm_from_xid		();
	ushort	mc_xid_param_cfg_build_and_send	();
	void	mc_send_to_ml					();
	ushort	mc_xid_test_build_and_send		();
	void	mc_xid_load_test_pattern		();
	uchar	mc_xid_test_match				();
	void	mc_xid_in_process				();
	void	mc_xid_select_param				();
	void	mc_err_in_process				();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name           	mc_user  - implements the pseudo Connection Management entity
				functions.

Usage           uchar mc_user ();

				event_id = primitive code.

Related				void	mc_xid_load_param_from_cfg ();
functions usage 	void	mc_send_to_ml (code);
					void	mc_load_ctx_param_from_xid ();
					uchar	xid_test_gi (a_data, data_size, fi, gi);
					ushort	xid_decode  (a_data, data_size, a_prog);
					ushort	xid_encode  (a_data, data_size, a_prog);

Description     mc_user implements the management conection part of the
				MDL entity.

Common constants and declarations : dl.h

Common objects : message and buffer context - MDL objects.

*--------------------------------------------------------------------------*/

void mc_user ()
{

		/* Set location */

	mc_location = USER_SIDE;

		/* Switch acording to the current State */

	switch (Mc_state) {

			/* Idle state */

		case MC_IDLE :

				/* Dispatch according to the received event Id */

			switch (event_id) {

				case MDL_ERR_IN :
					mc_err_in_process ();
					break;

				case MC_PARAM_RQ :

#					if MC_DEFAULT_PARAMETER == ON
						mc_send_to_ml (MC_PARAM_CO);

#					else

							/* Build and send the XID parameters frame */

						mc_xid_param_cfg_build_and_send ();

						Start_timer_t204 ();
						Rc_xid 		= 0;
						Mark_param 	= ON;
						Mc_state 	= MC_AWAITING_CONFIRM;

#					endif

					break;

#			if MC_TEST_PROCEDURE == ON || MC_DEFAULT_PARAMETER == OFF

				case MDL_XID_IN :

					if (xid_test_gi (R_a_data, R_data_size, XID_FI_CCITT, XID_DL_D_GI_TEST) != PRESENT) {

							/* Null size */

						if (p_buffer == P_NIL) {
							Buffer_data_size = 0;

						} else {

							R_msg_data_size = 0;
						}

					}

						/* Retransmit  the received frame */

					mdl_retransmit (MDL_XID_RS, ENT_DL_D);
					break;
#			endif

				default :
					break;

			}
			break;

#	if MC_TEST_PROCEDURE == ON || MC_DEFAULT_PARAMETER == OFF

			/* Awaiting confirmation state */

		case MC_AWAITING_CONFIRM :

			switch (event_id) {

				case MDL_XID_CO :
					Stop_timer_t204 ();

							/* Decode XID I field */

					if (xid_test_gi (R_a_data, R_data_size, XID_FI_CCITT, XID_DL_D_GI_PARAM) == PRESENT) {

#						if MC_DEFAULT_PARAMETER == OFF

								/* XID parameter information field */

							Mark_param = OFF;

								/* Process parameter values */

							if ((xid_decode (R_a_data, R_data_size, (uchar *)&xid_param_prog, &nb_id) == OK) && (nb_id != 0)) {
								mc_load_ctx_param_from_xid ();
							}

								/* Send PARAMETER CONFIRMATION to ML */

							mc_send_to_ml (MC_PARAM_CO);

#						else

							Start_timer_t204 ();
							break;
#						endif

#						if MC_TEST_PROCEDURE == ON

								/* Test pending ? */

							if (Mark_test == ON) {
								Start_timer_t204 ();
								break;
							}

#						endif					

					} else if (xid_test_gi (R_a_data, R_data_size, XID_FI_CCITT, XID_DL_D_GI_TEST) == PRESENT) {

#						if MC_TEST_PROCEDURE == ON

								/* XID test information field */

							Mark_test = OFF;

								/* Process test information field */

							if ((xid_decode (R_a_data, R_data_size, (uchar *)&xid_test_prog, &nb_id) == OK) && (nb_id != 0)) {

									/* Non null information field */

								if (mc_xid_test_match () == NOK)  {
									mc_send_to_ml (MC_ERR_IN);
								}

							} else {

								mc_send_to_ml (MC_ERR_IN);
							}

#						else

							Start_timer_t204 ();
							break;
#						endif

#						if MC_DEFAULT_PARAMETER == OFF
						
							if (Mark_param == ON) {
								Start_timer_t204 ();
								break;
							}

#						endif

					} else {

						Start_timer_t204 ();
						break;
					}

					Mc_state = MC_IDLE;
					break;

				case TI_204 :

						/* Test retry count */

					if (Rc_xid++ == N204) {

							/* Paramater procedure ? */

						if (Mark_param == ON) {
							Mark_param	= OFF;

								/* Send PARAMETER ERROR to ML */

							mc_send_to_ml (MC_PARAM_ERROR_IN);
						}

							/* Test procedure ? */
						
						if (Mark_test == ON) {
							Mark_test = OFF;
								
								/* send ERROR INDICATION to ML */

							mc_send_to_ml (MC_ERR_IN);
						}

								/* Reset the TEI link in DL connection */

						mdl_send_dl_conn (MDL_XID_RESET_RQ, Sapi, Ces);
						Mc_state = MC_IDLE;

					} else {

							/* Parameter procedure ? */
						
						if (Mark_param == ON) {

								/* Send an XID parameter frame : MDL_XID_RQ */

							mc_xid_param_cfg_build_and_send ();
						}

							/* Test procedure ? */

						if (Mark_test == ON) {

							/* Send an XID test frame : MDL_XID_RQ */

							mc_xid_test_build_and_send ();
						}

						Start_timer_t204 ();
					}

					break;

				case MDL_XID_IN :
					break;

			}
			break;
#	endif

			/* Unknown MC state */

		default :
			break;
    }

}

#if EQUIPMENT == NT2
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name           	mc_net  - implements the pseudo Connection Management entity 
				functions.

Usage           uchar mc_net ();

				event_id = primitive code.

Related				void	mc_xid_load_param_from_cfg ();
functions usage 	void	mc_send_to_ml (code);
					uchar	xid_test_gi (a_data, data_size, fi, gi);
					ushort	xid_decode  (a_data, data_size, a_prog);
					ushort	xid_encode  (a_data, data_size, a_prog);

Description     mc_net implements the management conection part of the 
				MDL entity.

Common constants and declarations : dl.h

Common objects : message and buffer context - MDL objects.

*--------------------------------------------------------------------------*/

void mc_net ()
{

		/* Set location */

	mc_location = NETWORK_SIDE;

		/* Switch acording to the current State */

	switch (Mc_state) {

			/* Idle state */
		
		case MC_IDLE :

					/* Dispatch according to the received event Id */

			switch (event_id) {

#				if MC_TEST_PROCEDURE == ON || MC_DEFAULT_PARAMETER == OFF

						/* MDL XID INDICATION */

					case MDL_XID_IN :
						mc_xid_in_process ();
						break;
#				endif

					/* MDL ERROR INDICATION */

				case MDL_ERR_IN :
					mc_err_in_process (); 
					break;

					/* Unknown event ID --> ignored */

				default :
					break;

			}
			break;


#		if MC_TEST_PROCEDURE == ON || MC_DEFAULT_PARAMETER == OFF

			/* MC awaiting confirm state */

		case MC_AWAITING_CONFIRM :

				/* Dispatch according to the received event Id */

			switch (event_id) {

					/* MDL XID INDICATION */

				case MDL_XID_IN :
					mc_xid_in_process ();
					break;

#				if MC_TEST_PROCEDURE == ON

						/* MDL XID CONFIRM : after a XID test frame */

					case MDL_XID_CO :
						Stop_timer_t204 ();
			
						if (mc_xid_test_match () != OK) {	

							if (R_data_size != 0) {
								mc_send_to_ml (MC_ERR_IN);
							}
						
						}
						Mark_test 	= OFF;
						Mc_state 	= MC_IDLE;
						break;

						/* T204 expiry : after a XID test request */

					case TI_204 :

						if (Rc_xid++ == N204) {
							mc_send_to_ml (MC_ERR_IN);
							Mark_test = OFF;
							Mc_state  = MC_IDLE;

						} else {

							mc_xid_test_build_and_send ();
						}

						break;

#				endif

				default :
					break;

			}
			break;

#		endif

	}

}

#endif

#if MC_DEFAULT_PARAMETER == OFF
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mc_xid_parm_cfg_build_and_send - implements the building and 
				sending of an XID frame used for parameter negociation.

Usage           ushort mc_xid_parm_cfg_build_and_send ();

Return value : 	# 0  valid XID parameters, XID frame sent.
				= 0 invalid parameters.

Common constants and declarations : dl.h, xid_int.h

Common objects : entity context

*--------------------------------------------------------------------------*/

ushort mc_xid_param_cfg_build_and_send ()
{
	ushort	xid_size;				/* XID information size */

		/* Load the XID configuration parameters */

	mc_xid_load_param_from_cfg ();		

		/* Allocate a buffer and encode XID field */

	Buffer_alloc;
	Buffer_data_offset	+= DL_MX_FRAME_HEADER;
	xid_size 			=  Buffer_data_size	= xid_encode (Buffer_a_start_data, Buffer_data_lgth - DL_MX_FRAME_HEADER, (uchar *)&xid_param_prog, P_NIL);

		/* Add the current TEI value front the frame information field */

	Buffer_data_offset--;
	Buffer_data_size++;

	*(Buffer_a_start_data) = tei;

		/* Send the XID frame to DL */

	mdl_send_dl_conn (MDL_XID_RQ, Sapi, Ces);

	return (xid_size);
}

#endif

#if MC_TEST_PROCEDURE == ON
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mc_xid_test_build_and_send - implements the building and 
				sending of an XID frame used for testing.

Usage           ushort mc_xid_test_build_and_send ();

Return value : 	# 0  valid XID parameters, XID frame sent.
				= 0 invalid parameters.

Common constants and declarations : dl.h, xid_int.h

Common objects : entity context

*--------------------------------------------------------------------------*/

ushort mc_xid_test_build_and_send ()
{
	ushort	xid_size;			/* XID information size */

		/* Load the XID test patterns */

	mc_xid_load_test_pattern ();		

		/* Encode XID field */

	xid_group_test_flag = PRESENT;

	Buffer_alloc;
	Buffer_data_offset	+= DL_MX_FRAME_HEADER;
	xid_size			=  Buffer_data_size	= xid_encode (Buffer_a_start_data, Buffer_data_lgth - DL_MX_FRAME_HEADER, (uchar *)&xid_test_prog, P_NIL);

		/* Add the TEI NIL value in front the frame information field */

	Buffer_data_offset--;
	Buffer_data_size++;

	*(Buffer_a_start_data) = DL_TEI_NIL;

		/* Send the XID frame */

	Mark_test = ON;
	mdl_send_dl_conn (MDL_XID_RQ, Sapi, Ces);

	return (xid_size);

}

/*--------------------------------------------------------------------------*/

void	mc_xid_load_test_pattern ()
{
	ushort	i;

		/* Load the XID test patterns */

	for (i = 0; ((i < N201_xid - XID_TEST_I_HEADER_SIZE) && (i < XID_TEST_SIZE)); i++) {
		xid_p_group_test_val [i] = i;
	}        	

}

/*--------------------------------------------------------------------------*/

uchar	mc_xid_test_match ()
{
	ushort	i;

		for (i = 0; i < xid_group_test_size; i++) {

			if (i != xid_p_group_test_val [i]) {
				break;
			}

		}

		if (i == xid_group_test_size) {
			return (OK);

		} else {

			return (NOK);
		}

}
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mc_xid_load_param_from_cfg - implements the loading of the XID
				parameter data from the configuration values store in the
				current context.

Usage           void mc_xid_load_param_from_cfg ();


Common constants and declarations : dl.h, xid_int.h

Common objects : entity context

*--------------------------------------------------------------------------*/

void mc_xid_load_param_from_cfg ()
{

		/* Load the XID parameters */

	Xid_param_n201_tx		= N201_tx_cfg;
	Xid_param_n201_rx		= N201_rx_cfg;
	Xid_param_k_tx			= K_tx_cfg;
	Xid_param_t200			= Xid_convert_t200_from_local (T200_cfg);

		/* Set the present flag */

	Xid_param_n201_tx_flag	= 
	Xid_param_n201_rx_flag	= 
	Xid_param_k_tx_flag		= 
	Xid_param_t200_flag		= PRESENT;

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mc_load_ctx_param_from_xid - implements the loading of the current
				context parameter data from the configuration the XID decoded 
				values.

Usage           void mc_load_ctx_param_from_xid ();

Common constants and declarations : dl.h, xid_int.h

Common objects : entity context, Xid data values.

*--------------------------------------------------------------------------*/

void mc_load_ctx_param_from_xid ()
{

		/* Load the XID parameters */

	if (Xid_param_n201_tx_flag == PRESENT) {
		N201_tx = Xid_param_n201_tx;
	}

	if (Xid_param_n201_rx_flag == PRESENT) {
		N201_rx	= Xid_param_n201_rx;
	}

	if (Xid_param_k_tx_flag == PRESENT) {
		K_tx	= Xid_param_k_tx;
	}

	if (Xid_param_t200_flag == PRESENT) {
		T200	= Xid_convert_t200_from_remote (Xid_param_t200);
	}

}
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mc_send_to_ml - implements the sending of a message from
				the pseudo MC entity to the pseudo ML entity.

Usage           void mc_send_to_ml ();


Common constants and declarations : dl.h, xid_int.h

Common objects : entity context

*--------------------------------------------------------------------------*/

void	mc_send_to_ml (code)
	code_t		code;
{
	event_id = code;

	if (mc_location == USER_SIDE) {
		mdl_from_mc_user ();

	} else {

#		if EQUIPMENT == NT2
			mdl_from_mc_net ();
#		endif

	}

}

#if EQUIPMENT == NT2

#	if MC_TEST_PROCEDURE == ON || MC_DEFAULT_PARAMETER == OFF

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name           	mc_xid_in_process  - implements the processing of an XID INDICATION 
				primitive received by the network part.

Usage           void mc_xid_in_process ();

Related				uchar	xid_test_gi (a_data, data_size, fi, gi);
functions usage 	ushort	xid_decode  (a_data, data_size, a_prog);
					ushort	xid_encode  (a_data, data_size, a_prog);

Description     mc_xid_in_process implements the parameter negotiation  or
				the test retransmission	after receiving an XID INDICATION 
				primitive.

Common constants and declarations : dl.h

Common objects : message and buffer context - MDL objects.

*--------------------------------------------------------------------------*/

void mc_xid_in_process ()
{
		/* Decode XID I field */

	if (xid_test_gi (R_a_data, R_data_size, XID_FI_CCITT, XID_DL_D_GI_PARAM) == PRESENT) {

			/* XID parameter information field */

		if ((xid_decode (R_a_data, R_data_size, (uchar *)&xid_param_prog, &nb_id) == NOK) || (nb_id == 0)) {

				/* Process present parameter values */

			mc_xid_select_param ();
			Buffer_data_size = xid_encode (Buffer_a_start_data, Buffer_data_lgth - DL_MX_FRAME_HEADER, (uchar *)&xid_param_prog, P_NIL);
		}

	} else if (xid_test_gi (R_a_data, R_data_size, XID_FI_CCITT, XID_DL_D_GI_TEST) == ABSENT) {

			/* I zero length or unknown group */

		if (p_buffer == P_NIL) {
			R_msg_data_size = 0;

		} else {

			Buffer_data_size = 0;
		}

	}
			/* MDL XID RESPONSE */

	mdl_retransmit (ENT_DL_D, MDL_XID_RS);
}

#	endif

#	if MC_DEFAULT_PARAMETER == OFF
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name           	mc_xid_selec_param  - implements the parameter selection from
				a remote request and the local configuration.

Usage           void mc_xid_select_param ();

Common constants and declarations : dl.h

Common objects : message and buffer context - MDL objects.

*--------------------------------------------------------------------------*/

void mc_xid_select_param ()
{

#	if MC_NET_SELECT_CFG_PARAM == OFF	

			/* Keep the smallest values : XID frame and configuration */

		if (Xid_param_n201_tx_flag == PRESENT) {
			N201_tx = Xid_param_n201_tx  = (Xid_param_n201_tx > N201_tx_cfg) ?
										   N201_tx_cfg :
										   Xid_param_n201_tx;
		}
	
		if (Xid_param_n201_rx_flag == PRESENT) {
			N201_rx = Xid_param_n201_rx = (Xid_param_n201_rx > N201_rx_cfg) ?
										  N201_rx_cfg :
										  Xid_param_n201_rx;
		}
	
		if (Xid_param_k_tx_flag == PRESENT) {
			K_tx = Xid_param_k_tx = (Xid_param_k_tx > K_tx_cfg) ?
									K_tx_cfg :
									Xid_param_k_tx;
		}
		
			/* Keep the network configuration values */

		if (Xid_param_t200_flag == PRESENT) {
			Xid_param_t200	= Xid_convert_t200_from_local (T200_cfg);
			T200			= T200_cfg;
		}

#	else

			/* Load the XID data value from the configuration values */

		mc_xid_load_param_from_cfg ();
			
#	endif

}

/*--------------------------------------------------------------------------*/

#	endif

#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name           	mc_err_in_process  - implements the processing of an arror
				indication message.

Usage           void mc_err_in_process ();

Common constants and declarations : dl.h

Common objects : message and buffer context - MDL objects.

*--------------------------------------------------------------------------*/

void mc_err_in_process ()
{

#	if MC_TEST_PROCEDURE == ON

			/* Count > limit ? */

		if (++Err_count_int >= DL_MX_ERROR) {

				/* Current TEI assigned ? */

			if (Tap_tei != DL_TEI_NIL) {
				mc_xid_test_build_and_send ();
				Start_timer_t204 ();
				Rc_xid			= 0;
				Err_count_int	= 0;
				Mark_test		= ON;
				Mc_state		= MC_AWAITING_CONFIRM;
			}

		}

#	endif

}

#else


	/* Just to avoid link error */

void mc_user ()
{}

#endif

/*EOF*/
