
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_to.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        s_timer_recovery - implements the processing of events received
 *							 in the timer recovery state of a connection
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            s_timer_recovery - implements the processing of the events
								   of a DL connection in the timer recovery
								   state.

Usage           void timer_recovery (void);

Related
functions usage void send_frame 				(uchar command, uchar pf);
or macro		void send_to_l3					(uchar service_code);
				void send_to_mdl_err			(uchar error_code);
				void (re)start_timer			(uchar timer_index);
				void stop_timer					(uchar timer_index);
				void establish_dl				();
				void clear_exception_conditions	();
				void error_recovery				();
				void discard_queue				(uchar queue_index);
				void in_queue					(uchar queue_index);
				void set_next_to_sent			();
				void set_last_to_send			();
				void invoke_retransmission		();
				void set_acknowledged			();
				uchar return code e_unnumb		();
				uchar return code e_fr_err		();
				void unexpected_ev				();
				void Set_state					(uchar state_code);
				logical true or false Valid_nr	();

Description     s_timer_recovery is conformed to the CCITT BLUE BOOK SDL.

Return value    void

Common constants and declarations : dl_h

Common objects 	: dlcep current connection context

*--------------------------------------------------------------------------*/

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-8 (1 .. 9) */

void s_timer_recovery ()
{

		/* Dispaching according to the received event */

	switch (event_id) {


		case DL_EST_RQ :
			discard_queue (QU_I);
			establish_dl ();
			Layer_3_initiated = ON;
			Layer_3_rel_rq 	= OFF;
			Set_state (S_AWAITING_ESTABLISHMENT);
			break;


		case DL_REL_RQ :
			discard_queue (QU_I);
			Rc = 0;
			send_frame (FR_DISC, P_ON);
			Restart_timer_t200 ();
			Set_state (S_AWAITING_RELEASE);
			break;


		case DL_DA_RQ     :
			in_queue (QU_I);
			Signal_QU_I;
			break;


		case QU_FR_I :
			Signal_QU_I;
			break;


		case TI_200 :

			if (Rc == N200) {
				Send_to_mdl_err ('I');
				establish_dl ();
				Layer_3_initiated = OFF;
				Layer_3_rel_rq 	  = OFF;
				Set_state (S_AWAITING_ESTABLISHMENT);

			} else {
						/* OPTION */

#				if DL_T200_ENQUIRY == ON
					transmit_enquiry ();

#				else

					if (Vs == Va) {
						transmit_enquiry ();

					} else {

						if (Remote_receiver_state == BUSY) {
							transmit_enquiry ();

						} else {

							get_last_transmitted_i_frame ();

							if (p_rcv_msg != P_NIL) {
								Dec_v_modulo (Vs);
								send_frame (FR_I, P_ON);
								Inc_v_modulo (Vs);
								Remote_ack_pending = OFF;
								Start_timer_t200 ();

							} else {

								Start_timer_t203 ();
								break;
							}

						}

					}

#				endif

				Rc++;

			}

			break;


		case MDL_RM_TEI_RQ :
			Tei = DL_TEI_NIL;
			dl_init_with_configuration_param ();
			discard_queue 	(QU_I);
			discard_queue 	(QU_UI);
			Send_to_l3 		(DL_REL_IN);
			Stop_timer_t200 ();
			Stop_timer_t203	();
			Set_state 		(S_TEI_UNASSIGNED);
			break;


		case PH_DEA_IN :
			discard_queue 	(QU_I);
			discard_queue 	(QU_UI);
			Send_to_l3 		(DL_REL_IN);
			Stop_timer_t200	();
			Set_state 		(S_TEI_ASSIGNED);
			break;


		case FR_SABME :
		case FR_SABM  :
			send_frame (FR_UA, Ru_p);
			clear_exception_conditions ();
			Send_to_mdl_err ('F');

			if ((Dl_att_ni != OFF) || (Vs != Va)) {
				discard_queue (QU_I);

#				if DL_FC == ON
					In_fc_state	= FREE;		/* incoming flow control state */
#				endif

				Send_to_l3 (DL_EST_IN);

			} else {

				Signal_flag (QU_I) = ON;
			}

			Vs = Va = Vr = 0;
			Stop_timer_t200	();

#			if DL_FC == ON
				if ((System_state == BUSY) ||	(In_fc_state == BUSY)) {

#			else

				if (System_state == BUSY) {
#			endif

					Own_receiver_state 	= BUSY;
					send_frame 			(FR_RNR_RESPONSE, F_OFF);

				}

				Start_timer_t203 	();
				Set_state 			(S_MFO);

			break;


		case FR_DISC :
			discard_queue 	(QU_I);
			send_frame 		(FR_UA, Ru_p);
			Send_to_l3 		(DL_REL_IN);
			Stop_timer_t200 ();
			Stop_timer_t203	();
			Set_state 		(S_TEI_ASSIGNED);
			break;


		case FR_UA:
			Send_to_mdl_err ('C');

			if (Dl_att_ni != OFF) {
				discard_queue 	  (QU_I);
				establish_dl 	  ();
				Layer_3_initiated = OFF;
				Layer_3_rel_rq 	  = OFF;
				Set_state         (S_AWAITING_ESTABLISHMENT);
			}
			break;


		case FR_DM :

			if (Ru_f == F_ON) {
				Send_to_mdl_err ('B');

			} else {

				Send_to_mdl_err ('E');

				if (Dl_att_ni == DL_NI) {
					break;
				}

			}


			discard_queue 		(QU_I);
			establish_dl 		();
			Layer_3_initiated 	= OFF;
			Layer_3_rel_rq 		= OFF;
			Set_state 			(S_AWAITING_ESTABLISHMENT);
			break;


		case DL_BUSY_RQ :

			if (Own_receiver_state == FREE) {
				Own_receiver_state = BUSY;
				send_frame 		   (FR_RNR_RESPONSE, F_OFF);
				Remote_ack_pending = OFF;
			}
			break;


		case DL_CLEAR_BUSY_RQ :

			if (Own_receiver_state == BUSY) {
				Own_receiver_state = FREE;

				if (Discarded_i_frame_state == OFF) {
					send_frame (FR_RR_RESPONSE, F_OFF);

				} else {

					Reject_exception		= ON;
					send_frame (FR_REJ_RESPONSE, F_OFF);
					Discarded_i_frame_state = OFF;
				}

				Remote_ack_pending = OFF;
			}
			break;


		case FR_RR :
		case FR_REJ:
			Remote_receiver_state = FREE;

			if ((Ru_cr != Cr_rcv_command) && (Ru_f == F_ON)) {

				if (Valid_nr ()) {
					set_acknowledged 	  ();
					Stop_timer_t200 	  ();
					Start_timer_t203 	  ();
					invoke_retransmission ();
					Set_state 			  (S_MFO);

				} else {

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

						if (Dl_entity_id != ENT_DL_B) {
							error_recovery 	();
							Layer_3_rel_rq 	= OFF;
							Set_state 		(S_AWAITING_ESTABLISHMENT);

						} else {

#					endif

							invalid_nr ();

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
						}
#					endif

				}

			} else {

				if ((Ru_cr == Cr_rcv_command) && (Ru_p == P_ON)) {
					enquiry_response ();
				}

				if (Valid_nr ()) {
					set_acknowledged ();

				} else {

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

						if (Dl_entity_id != ENT_DL_B) {
							error_recovery 	();
							Layer_3_rel_rq 	= OFF;
							Set_state 		(S_AWAITING_ESTABLISHMENT);

						} else {

#					endif

							invalid_nr ();

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
						}
#					endif

				}

			}
			break;


		case FR_RNR :
			Remote_receiver_state = BUSY;

			if ((Ru_cr == Cr_rcv_response) && (Ru_f == F_ON)) {

				if (Valid_nr ()) {
					set_acknowledged ();
					Restart_timer_t200 ();
					invoke_retransmission ();
					Set_state (S_MFO);

				} else {

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

						if (Dl_entity_id != ENT_DL_B) {
							error_recovery 	();
							Layer_3_rel_rq 	= OFF;
							Set_state 		(S_AWAITING_ESTABLISHMENT);

						} else {

#					endif

							invalid_nr ();

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
						}
#					endif

				}

			} else {

				if ((Ru_cr == Cr_rcv_command) && (Ru_p == P_ON)) {

#					if DL_ISDN_BIOS == ON

						if (Isdn_bios == ON) {
							Remote_receiver_state = FREE;
						}

#					endif

					enquiry_response ();
				}

				if (Valid_nr ()) {
					set_acknowledged  ();

				} else {

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

						if (Dl_entity_id != ENT_DL_B) {
							error_recovery 	();
							Layer_3_rel_rq 	= OFF;
							Set_state 		(S_AWAITING_ESTABLISHMENT);

						} else {

#					endif

							invalid_nr ();

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
						}
#					endif

				}

			}

			break;


		case FR_FRMR :
			Send_to_mdl_err ('K');
			establish_dl ();
			Layer_3_initiated = OFF;
			Layer_3_rel_rq 	  = OFF;
			Set_state (S_AWAITING_ESTABLISHMENT);
			break;


		case FR_I :

			if (Own_receiver_state == BUSY) {
				Discarded_i_frame_state = ON;

				if (Ru_f == F_ON) {
					send_frame (FR_RNR_RESPONSE, F_ON);
					Remote_ack_pending = OFF;
				}

			} else {

#				if (DL_V120 == ON) || (DL_LAPF == ON)

					if (((Dl_entity_id == ENT_V120) || (Dl_entity_id == ENT_DL_F)) &&
						(Ru_cr == Cr_rcv_response) &&
						(Ru_f == F_ON)) {

						if (Valid_nr ()) {
							set_acknowledged 	  ();
							Stop_timer_t200 	  ();
							Start_timer_t203 	  ();
							invoke_retransmission ();
							Set_state 			  (S_MFO);

						} else {

							error_recovery ();
							Layer_3_rel_rq = OFF;
							Set_state (S_AWAITING_ESTABLISHMENT);
							break;
						}

					}

#				endif

				if (Ru_ns != Vr) {

					if (Reject_exception == OFF) {
						Reject_exception = ON;
						send_frame (FR_REJ_RESPONSE, Ru_p);
						Remote_ack_pending = OFF;

					} else {

						if (Ru_p == P_ON) {
							send_frame (FR_RR_RESPONSE, Ru_p);
							Remote_ack_pending = OFF;
						}

					}

				} else {

					Inc_v_modulo (Vr);
					Reject_exception = OFF;
					Send_to_l3 (DL_DA_IN);

					if (Ru_p == P_ON) {
						send_frame (FR_RR_RESPONSE, Ru_p);
						Remote_ack_pending = OFF;

					} else {

						if (Remote_ack_pending == OFF) {
							Signal_WAIT_ACK;
							Remote_ack_pending = ON;
						}

					}

				}

			}

			if (Valid_nr ()) {
				set_acknowledged ();

			} else {

#				if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

					if (Dl_entity_id != ENT_DL_B) {
						error_recovery 	();
						Layer_3_rel_rq 	= OFF;
						Set_state 		(S_AWAITING_ESTABLISHMENT);

					} else {

#				endif

						invalid_nr ();

#				if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
					}
#				endif

			}
			break;


		case WAIT_ACK :

			if (Remote_ack_pending == ON) {
				Remote_ack_pending = OFF;

				if (Own_receiver_state == BUSY) {
					send_frame (FR_RNR_RESPONSE, F_OFF);

				} else {

					send_frame (FR_RR_RESPONSE, F_OFF);
				}

			}
			break;


		default :
			if (e_unnumb ()		== STOP) break;
			if (e_fr_err ()		== STOP) break;
			if (xid_process ()	== STOP) break;
			unexpected_ev ();
			break;

	}

}

/*EOF*/
