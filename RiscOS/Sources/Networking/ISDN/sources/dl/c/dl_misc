
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_misc.c    miscelleanous data link functions.
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         e_unnumb - implements the processing of unnumbered connections.
 *
 *         e_fr_err - implements the processing of erroneous frames.
 *
 *         establish_dl, clear_exception_conditions, transmit_enquiry,
 *         enquiry_response, invoke_retransmission, stop_transmision,
 *         unexpected_ev - implement common procedure to all automaton
 *         functions.
 *
 *		   able_to_establish - checks if the system is able to enter in the
 *         multiframe operation state.
 *
 *         broadcast - implements the proceeding of broadcast frames
 *         and sevice elements.
 *
 *         xid_process - implements the processing of the XID events.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"

#if NEW_FCT_STYLE == ON
	void dl_load_cr		(void);
	void dl_load_dte_cr (void);
	void dl_load_dce_cr (void);

#else

	void dl_load_cr		();
	void dl_load_dte_cr ();
	void dl_load_dce_cr ();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            e_unnumb - implements the processing of unacknowledged
						   operations (UI frames)

Usage           uchar e_unnumb ();

Related
functions usage void Send_frame (); 	send a frame to physical entity
				void Send_to_l3 ();		send signal or data to layer 3 entity


Description     e_unnumb implements the events processing of the
				unacknowledged operation mode.

				This function is called from the function that processes
				pertinent states to this mode :

				- 4 - affected TEI,

				- 5 - awaiting establishment,

				- 6 - awaiting release,

				- 7 - multi-frame operation established (MFO),

				- 8 - time-out recovery (TO).

Return value    uchar return code returns : STOP if the received event has
												 been processed,

											CONTINUE if the received event has
												 not been processsed.

Common constants and declarations : dl.h

Common objects   event_id : event identifier,
				 dlcep    : connection context.

*--------------------------------------------------------------------------*/

	 /* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-9 (1) */

uchar e_unnumb ()
{
		/* Dispatching according to the last received event */

	switch (event_id) {

		case DL_U_DA_RQ :
			in_queue (QU_UI);
			Signal_QU_UI;
			break;

		case QU_UI :
			out_queue (QU_UI);
			send_frame (FR_UI, P_OFF);
			break;

		case FR_UI :
			Send_to_l3 (DL_U_DA_IN);
			break;

		default:
			return (CONTINUE);

	}

	return (STOP);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            e_fr_err - implements the processing of erroneous received
						   frames.

Usage           uchar e_fr_err ();

Related
functions usage void send_to_mdl_err (uchar err_code); send an error
											   message to the MDL entity

Description     Implements the processing of the event generates by
				an erroneous received frame :

					- erroneous control field,

					- erroneous info area,

					- erroneous frame length,

					- erroneous information length (too long),

				A message is sent to the MDL layer management entity and
				the connection is reinitialized if it was established.

Return value    uchar error code = STOP nothing more to do,
								 = CONTINUE.

Common constants and declarations : dl.h

Common objects   connection context (dlcep)

*--------------------------------------------------------------------------*/

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-9 (2) */

uchar e_fr_err ()
{

		/* Send a message error to the MDL entity */

	switch (event_id) {

			/* Invalid NR */

		case FR_ERR_INVALID_NR :
			Send_to_mdl_err ('J');
			ret_code = FRMR_Z;
			break;

			/* Erroneous control field */

		case FR_ERR_CTRL :
			Send_to_mdl_err ('L');
			ret_code = FRMR_W;
			break;

			/* Erroneous information */

		case FR_ERR_INFO :
			Send_to_mdl_err ('M');
			ret_code = FRMR_W + FRMR_X;
			break;

			/* Erroneous frame length */

		case FR_ERR_LENGTH :
			Send_to_mdl_err ('N');
			ret_code = FRMR_W + FRMR_X;
			break;

			/* Too long I frame */

		case FR_ERR_I_TOO_LONG :
			Send_to_mdl_err ('O');
			ret_code = FRMR_Y;
			break;

			/* Default */

		default:    /* Event not processed */
			ret_code = FRMR_X;
			return (CONTINUE);

	}

			/*
				LAPD : Reinitialize the connection if state = MultiFrame
				Operation established or TIMER recovery.

				LAPB : send Frame rejet response FRMR.
			*/

	if ((p_dlcep != P_NIL) && ((State == S_MFO) || (State == S_TIMER_RECOVERY))) {

		switch (Dl_entity_id) {

			/* LAPD or LAP4K : reestablish the data link */

#		if DL_LAPD == ON
			case ENT_DL_D :
#		endif

#		if DL_LAP4K == ON
			case ENT_DL_4K 	:
#		endif

#			if (DL_LAPD == ON) || (DL_LAP4K == ON)
				establish_dl 		();
				Layer_3_initiated 	= OFF;
				Layer_3_rel_rq 		= OFF;
				Set_state 			(S_AWAITING_ESTABLISHMENT);
				break;
#			endif

#		if (DL_V120 == ON) || (DL_LAPF == ON)

				/* V.120 or LAPF Tx FRMR and go to TEI ASSIGNED state */

			case ENT_DL_V120 :
			case ENT_DL_F	 :
				send_frame 	(FR_FRMR, Ru_p);
				Set_state 	(S_TEI_ASSIGNED);
				break;

#		endif


#			if DL_LAPB == ON

					/* 	LAPB : send Frame rejet response FRMR. */

				default :

					if (Ru_cr == Cr_rcv_command) {
						send_frame 		(FR_FRMR, Ru_p);

					} else {

						send_frame 		(FR_FRMR, F_OFF);
					}

					Rc 					= 0;
					Start_timer_t200 	();
					Set_state 			(S_FRAME_REJECT);
					break;

#			endif

		}

	}

	return (STOP);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			invalid_nr - implements the processing of an invalid NR
							 frame in LAPB mode;


Usage           void invalid_nr ();

Related
functions usage e_fr_err ();

*--------------------------------------------------------------------------*/

void invalid_nr ()
{
	event_id = FR_ERR_INVALID_NR;
	e_fr_err ();
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             error_recovery, establish_dl, clear_exception_conditions,
				 transmit_enquiry, enquiry_response, invoke_retransmission,
				 unexpected_ev, stop_transmission - implement common
				 procedures used by all the others functions.

Usage            void xxxxx ();

Related
functions usage  - void send_frame (uchar command_code, uchar
							 P or F value);

				 - void start_timer (uchar timer code)

				 - void reset_unacknowledged ();

Return value     void

Common constants and declarations : : dl.h

Common objects : dlcep context

*--------------------------------------------------------------------------*/

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-9 (4) */

/*
   Error recovery procedure :
	- send an error message to the MDL
	- establish the data link
	- set layer_3_initiated sub_state ON
*/

void error_recovery ()
{
		Send_to_mdl_err ('J');
		establish_dl ();
		Layer_3_initiated = OFF;
}

/*-------------------------------------------------------------------------*/

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-9 (4) */

/*
   Establish Data Link :
	- reset exception conditions,
	- set rc to 0,
	- send frame SABME with P = 1,
	- restart timer T200,
	- stop timer T203.
*/

void establish_dl ()
{
	clear_exception_conditions ();
	Rc = 0;

	if (Modulo == MODULO_EXTENDED) {

#	if DL_MODULO_128 == ON
		send_frame (FR_SABME, P_ON);
#	endif

	} else {

#	if DL_MODULO_8 == ON
		send_frame (FR_SABM, P_ON);
#	endif

	}

	Stop_timer_t203 	();
	Restart_timer_t200  ();
}

/*-------------------------------------------------------------------------*/

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-9 (4) */

/*
   Release exception conditions :
	- remote receiver,
	- reject,
	- local receiver,
	- awaiting remote ack,
	- awaiting local ack.
*/

void clear_exception_conditions ()
{
	Remote_receiver_state	= FREE;		/* remote receiver state free */
	Reject_exception		= OFF;		/* exception reject condition off */
	Own_receiver_state		= FREE;		/* local receiver  free */
	Discarded_i_frame_state = OFF;      /* I frame discarded during busy condition state */
	Remote_ack_pending		= OFF;		/* remote not awaiting acknowledgment */
	Commit_rq  				= OFF;		/* local layer 3 awaiting acknowledgment (check point) */

#	if DL_PH_TX_DONE == ON
		Tx_done_t200		= OFF;
#	endif

}

/*-------------------------------------------------------------------------*/

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-9 (4) */

/*
   Transmit a request for information status :
	- send RR or RNR frame with P = 1 according to the local receiver state,
	- reset remote_ack_pending flag,
	- start timer T200.
*/

void transmit_enquiry ()
{

	if (Own_receiver_state == BUSY) {
		send_frame (FR_RNR_COMMAND, P_ON);

	} else {

		send_frame (FR_RR_COMMAND, P_ON);
	}

	Remote_ack_pending = OFF;
	Start_timer_t200 ();
}

/*-------------------------------------------------------------------------*/

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-9 (5) */

/*
   Response to a request for information :
	- send RR or RNR frame with F = 1 according to the own receiver state,
	- reset remote_ack_pending flag.
*/

void enquiry_response ()
{
	if (Own_receiver_state == BUSY) {
		send_frame (FR_RNR_RESPONSE, F_ON);

	} else {

		send_frame (FR_RR_RESPONSE, F_ON);
	}

	Remote_ack_pending	= OFF;
}

/*-------------------------------------------------------------------------*/

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-9 (5) */

/*
   Roll back I sent frame  until V(S) = N(R) :

	- V(S) = V(S) - 1,
	- internal signal I frame queued up,
	- reset acknowledged pointer to prior.

*/

void invoke_retransmission ()
{

	while (Vs != Ru_nr) {
		Dec_v_modulo (Vs);
		Signal_QU_I;
		reset_unacknowledged ();
	}

}

/*-------------------------------------------------------------------------*/

	/*
		Stop the curent transmissions still in PH and
		update the V(S) send state variable accordind to the received
		N(R) sequence number.
	*/

void stop_transmission ()
{

	while (Vs != Ru_nr) {
		Dec_v_modulo (Vs);
		reset_unacknowledged ();
	}

}

/*-------------------------------------------------------------------------*/

	/*
	   Processing of an unexpected event according to the state of the
	   Data Link.
	*/

void unexpected_ev ()
{

		/* If event QUEUE I frame --> ignore */

	if (event_id != QU_FR_I) {
		Mdl_error_report ('X');
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             able_to_establish checks is the system is able to enter
				 in the multiframe operation state.

Usage            uchar able_to_establish (void);

Return value     uchar = OK able to enter MFO state,
					   = NOK unable to enter MFO state.

Common constants and declarations : dl.h

Common objects : dlna context

*--------------------------------------------------------------------------*/

  /* Check if the system is able to enter a multi-frame operation (MFO) state */

uchar able_to_establish ()
{

		/* Is there enough resources to enter MFO state ? */

	if ((Own_receiver_state == FREE) && (Congestion_busy == OFF)) {
		return (OK);

	} else {

		return (NOK);
	}

}

#if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            broadcast - implements the processing of the broadcasting
							mode.

Usage           void broadcast	(void);

Related
functions usage void send_frame (uchar frame_id, uchar pf);


Description     broadcast implements the processing of a broadcast data link.
				It processes UI frame  and the Unit data  exchanged on a DL
				connection reserved to broadcasting (TEI = 127 or CES = 0)

Return value    void

Common constants and declarations : dl.h

Common objects : Connection endpoint (dlcep) context, received frame,
				 unit data or physical anormal event.

*--------------------------------------------------------------------------*/

				/* Event received on a broadcast Data Link */

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL C-1 */

void broadcast ()
{


		/* Channel associated to the DL connection ? */

	if (Chani == PH_CHANI_NIL) {

			/* Ignore the request */

		return;
	}

	switch (event_id) {

		case DL_U_DA_RQ  :
		case MDL_U_DA_RQ :
			in_queue (QU_UI);
			Signal_QU_UI;
			break;

		case QU_UI :
			out_queue	(QU_UI);
			send_frame	(FR_UI, P_OFF);
			break;

		case FR_UI :

			if (Sapi == DL_SAPI_MDL) {
				Send_to_mdl (MDL_U_DA_IN);

			} else {

				Send_to_l3 (DL_U_DA_IN);
			}
			break;

		case PH_DEA_IN :
			discard_queue (QU_UI);
			break;

		case DL_BUSY_RQ       :
			Own_receiver_state = BUSY;
			break;

		case DL_CLEAR_BUSY_RQ :
			Own_receiver_state 		= FREE;
			Discarded_i_frame_state = OFF;
			break;

		default :
			unexpected_ev ();
			break;

	}

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            xid_process - implements the processing of the XID events.

Usage           uchar xid_process (void);

Related
functions usage void send_frame (uchar frame_id, uchar pf);


Description     xid_process implements the processing of a XID event coming
				from the ligne (FR_XID_COMMAND or FR_XID_RECEIVE) or from
				the MDL connection management (MDL_XID_RQ, MDL_XID_RS,
				MDL_XID_RESET).

Return value    void

Common constants and declarations : dl.h

Common objects : Connection endpoint (dlcep) context, received frame.

*--------------------------------------------------------------------------*/

uchar xid_process ()
{

		/* Relevant for all state except state TEI unassigned (1) */

		/* Dispatch according to the received event */

	switch (event_id) {

			/* Frame XID command */

		case FR_XID_COMMAND :
			Send_to_mdl (MDL_XID_IN);
			break;

			/* Frame XID response */

		case FR_XID_RESPONSE :
			Send_to_mdl (MDL_XID_CO);

#			if DL_LAPD == ON

				if (Dl_entity_id == ENT_DL_D) {
					xid_remove_tei ();
				}

#			endif

			break;

			/* MDL XID  request */

		case MDL_XID_RQ :

#			if DL_LAPD == ON

				if (Dl_entity_id == ENT_DL_D) {
					xid_save_tei ();
				}

#			endif

			send_frame (FR_XID_COMMAND, P_OFF);
			break;

			/* MDL XID response */

		case MDL_XID_RS :
			send_frame (FR_XID_RESPONSE, P_OFF);
			break;

			/* MDL XID reset */

		case MDL_XID_RESET_RQ :

#			if DL_LAPD == ON

				if (Dl_entity_id == ENT_DL_D) {
					Tei = DL_TEI_NIL;
					discard_queue (QU_I);
					Set_state (S_TEI_UNASSIGNED);
				}

#			endif

			break;

		default :
			return (CONTINUE);

	}

	return (STOP);

}

/*--------------------------------------------------------------------------*/

#if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

void xid_save_tei ()
{
	if (Tei == DL_TEI_NIL) {

			/* Extract the TEI value front the information field and save it */

		Tei = *(Buffer_a_start_data);
	}

		/* adjust the information field */

	Buffer_data_offset++;
	Buffer_data_size--;
}

	/*-----*/

void xid_remove_tei ()
{

	switch (State) {

		case S_TEI_UNASSIGNED 		  :
		case S_ASSIGN_AWAITING_TEI 	  :
		case S_ESTABLISH_AWAITING_TEI :
			Tei = DL_TEI_NIL;
			break;

		default :
			break;

	}

}

#endif

/*--------------------------------------------------------------------------*/

#if OPTIMIZATION != SPEED

	/*-----*/

void dl_start_timer (timer_x)
	uchar	timer_x;
{

	Start_timer (timer_x);

}

void dl_start_timer_t203 ()
{

	if (Ti_id (T203) != P_NIL) {

		Start_timer (T203);
	}


}

	/*-----*/

#if DL_PH_TX_DONE == ON

void dl_start_timer_t200_tx_done ()
{

	if (Chan_tx_done == ON) {
		Tx_done_t200 = ON;

	} else {

		Start_timer (T200);
	}

}

#endif

	/*-----*/

void dl_stop_timer (timer_x)
	uchar	timer_x;
{
	Stop_timer (timer_x);
}

void dl_stop_timer_t203 ()
{
	if (Ti_id (T203) != P_NIL) {
		Stop_timer (T203);
	}

}

	/*-----*/

#if DL_PH_TX_DONE == ON

void dl_stop_timer_t200_tx_done ()
{
	Tx_done_t200 = OFF;
	Stop_timer (T200);
}

#endif

	/*-----*/

void dl_restart_timer (timer_x)
	uchar	timer_x;
{

	Restart_timer (timer_x);

}


void dl_restart_timer_t203 ()
{

	if (Ti_id (T203) != P_NIL) {
		Restart_timer (T203);
	}

}

	/*-----*/

#endif	/* OPTIMIZATION != SPEED */

/*--------------------------------------------------------------------------*/

#if DL_PH_TX_DONE == ON

void dl_restart_timer_t200_tx_done ()
{

	if (Chan_tx_done == ON) {

			/* T200 running ? */

		if (State_timer (T200) == OFF) {

				/* T200 ready to start ? */

			if (Tx_done_t200 == ON) {

					/* Start T200 */

				Start_timer	(T200);

			} else {

					/* Set ready to start */

				Tx_done_t200 = ON;
			}

		} else {
		}

	} else {

		Start_timer	(T200);
	}

}

#endif

/*--------------------------------------------------------------------------*/

uchar dl_slp_attach_detach (p_msg, confirm_flag)
	struct message	FAR *p_msg;			/* message pointer */
	uchar		 		confirm_flag;	/* confirmation message flag : ON or OFF */

{
	uchar	FAR *p_data; 				/* pointer to assign data structure */
	uchar		 temp_ret_code;   		/* temporary return code */

	p_data = L_a_data;

		/* DL SLP connection */

#	if DL_LAPF == ON

			/* LAPF is concerned only by SAPI */

		if (dl_access_object (L_msg_nai, Dl_ass_sapi, TYPE_SAP, DL_CES_NIL) == OK) {

			if (Dl_entity_id == ENT_DL_F) {

				if (L_msg_code == MDL_ATTACH_SAPI_RQ) {
					if (

#					  if DL_LAPD == ON

						((Dl_ass_chani > Na_channel_nb) ||
						 ((Na_type == SCI) && (Dl_ass_chani == Na_channel_nb)))

#					  else

						(Dl_ass_chani >= Na_channel_nb)

#					  endif

						&& (State != S_TEI_ASSIGNED)) {

						temp_ret_code = NOK;

					} else {

						if (Chani == PH_CHANI_NIL) {
							dl_access_chan (Nai, Dl_ass_chani);
							Chani = Dl_ass_chani;

								/* Load the channel with the SAPI */

						Chan_chani_to_sapi 	= Dl_ass_sapi;
						temp_ret_code 		= OK;

						} else {

							temp_ret_code = NOK;
						}

					}

				} else {

					if (((Chan_chani = Chani) != PH_CHANI_NIL) &&
						((State == S_TEI_ASSIGNED) ||
						(State == S_AWAITING_PH_CONNECTION)
						)
					   ) {

						Chan_chani_to_sapi 	= DL_SAPI_NIL;
						Chani 				= PH_CHANI_NIL;

						temp_ret_code 		= OK;

					} else {

						temp_ret_code 		= NOK;
					}

				}

			} else {

				temp_ret_code = NOK;
			}

			if (temp_ret_code == OK) {

					/* Discard the waiting queue */

				dl_discard_queue_incoming_rq_co ();
			}

			if (confirm_flag == ON) {

					/* Confirm message to the MDL */

				L_msg_code			= MDL_SAPI_CO;
				L_msg_to			= ENT_MDL;
				L_msg_from			= ENT_DL;

				Dl_ass_ret_code 	= temp_ret_code;

				Send_message (p_msg); p_buffer = P_NIL;
			}

			return (temp_ret_code);

		}

#	endif

	if (dl_access_object (L_msg_nai, Dl_ass_sapi, TYPE_CES, Dl_ass_ces) == OK) {

		if (L_msg_code == MDL_ATTACH_SAPI_RQ) {

				/* Only Single Channel Interface (for Role) ? */

			if ((Na_type == SCI) &&
				(State 	 == S_TEI_ASSIGNED)
			   ) {

					/* Check Channel ID */

				if (Dl_ass_chani >= Na_channel_nb) {
					temp_ret_code = NOK;

				} else {

						/* Access to channel context CHANI 0 */

					dl_access_chan (Nai, Dl_ass_chani);

					Chani = Dl_ass_chani;

						/*
							Load the channel with the SAPI
							and CES addresses.
						*/

					Chan_chani_to_sapi 			= Dl_ass_sapi;
					Chan_chani_to_ces  			= Dl_ass_ces;
					Chan_chani_to_dl_entity_id 	= Dl_entity_id;

						/* Load Role only */

					switch (Dl_ass_role) {

						case DL_DTE 	:
							dl_load_dte_cr ();
							break;

						case DL_DCE :
						default 	:
							dl_load_dce_cr ();
							break;
					}

					temp_ret_code = OK;

				}

			} else if (

#			  if DL_LAPD == ON

				((Dl_ass_chani > Na_channel_nb) ||
				 ((Na_type == SCI) && (Dl_ass_chani == Na_channel_nb)))

#			  else

				(Dl_ass_chani >= Na_channel_nb)

#			  endif

				&& (State != S_TEI_ASSIGNED)) {

				temp_ret_code = NOK;

			} else {

				if (Chani == PH_CHANI_NIL) {


						/* Access to channel context */

					dl_access_chan (Nai, Dl_ass_chani);

					Chani = Dl_ass_chani;

						/*
							Load the channel with the SAPI
							and CES addresses.
						 */

					Chan_chani_to_sapi 		= Dl_ass_sapi;
					Chan_chani_to_ces  		= Dl_ass_ces;

					switch (Chan_chani_to_dl_entity_id = Dl_entity_id) {

#						if DL_V120 == ON

							case ENT_DL_V120 :
								Dlci 	 		= Set_default (Dl_ass_lli, DL_LLI_DEFAULT);
								temp_ret_code 	= OK;
								break;
#						endif

#						if DL_LAP4K == ON

							case ENT_DL_4K 	:
								temp_ret_code 	= NOK;
								break;

#						endif

#						if DL_LAPB == ON

							case ENT_DL_B 	:

									/* Load the C/R */

								switch (Dl_ass_role) {

									case DL_DTE 	:
										dl_load_dte_cr ();
										break;

									case DL_DCE :
									default 	:
										dl_load_dce_cr ();
										break;
								}

								temp_ret_code = OK;

#								if DL_IDENTIFICATION == ON

										/*
											Copy information
											from the SAP to the CHAN.
										*/

									if ((Chan_ident_profile_nb = Xid_ident_profile_nb) != 0) {

										if ( Chan_ident_timer_id == P_NIL) {

											if ((Chan_ident_timer_id = Timer_alloc (ENT_DL, L_msg_nai, DL_SAPI_NIL, Chan_chani)) == P_NIL) {
												temp_ret_code = NOK;
											}

										}

										Chan_ident_rc_max 		= Xid_rc_max;
										Chan_ident_timer_val 	= Xid_timer_val;
										Chan_ident_timer_state 	= OFF;
									}

#								endif

#								if DL_RELAY == ON

								{
									struct dlcep FAR *p_dlcep_save;

										/* Update p_dlchan in the relay if one */

									p_dlcep_save	= p_dlcep;

									if ((p_dlcep = R_p_dlcep) != P_NIL) {
										R_p_dlchan 	= p_dlchan;
									}

									p_dlcep			= p_dlcep_save;

								}

#								endif

								break;

#						endif

						default :
							temp_ret_code = NOK;
							break;
					}


				} else {

					temp_ret_code = NOK;
				}

			}

		} else {

			if ((Chan_chani = Chani) != PH_CHANI_NIL) {
				Chan_chani_to_sapi 	= DL_SAPI_NIL;
				Chani 				= PH_CHANI_NIL;

#				if (DL_V120 == ON) || (DL_LAP4K == ON)
					Dlci			= DL_DLCI_NIL;
#				endif

					/*
						If DISC has been transmitted -> Stop waiting UA
						and force as UA received
					*/

				if (State == S_AWAITING_RELEASE) {
					Send_to_l3 		(DL_REL_CO);
					Stop_timer_t200 ();
					Set_state 		(S_TEI_ASSIGNED);

					/* else */

				} else if ((State == S_MFO)						||
						   (State == S_TIMER_RECOVERY)			||
						   (State == S_AWAITING_ESTABLISHMENT)
#							if DL_LAPB == ON
							   || (State == S_FRAME_REJECT)
#							endif
						  ) {

						  /* Stop the Data Link Connection */

					discard_queue 	(QU_I);
					discard_queue 	(QU_UI);
					Send_to_l3 		(DL_REL_IN);
					Stop_timer_t200 ();
					Stop_timer_t203 ();
					Set_state 		(S_TEI_ASSIGNED);
				}

				temp_ret_code 		= OK;

			} else {

				temp_ret_code 		= NOK;
			}

		}

	} else {

		temp_ret_code = NOK;
	}

	if (temp_ret_code == OK) {

			/*
				Discard the waiting queue : the upper layer requests and
				confirmations received before ATTACH are discarded without
				notification.
			*/

		dl_discard_queue_incoming_rq_co ();

#		if DL_ISDN_BIOS == ON

			if (Isdn_bios == ON) {
				Set_state (S_AWAITING_PH_CONNECTION);
				Layer_3_initiated = OFF;
			}

#		endif

			/*
				If DCE send DM F=0 until connection
				by remote or upper entity.
			*/

		if (Dl_ass_role == DL_DCE) {
			Start_timer_t200 	();
		}

	}

	if (confirm_flag == ON) {

			/* Confirmation message to the MDL */

		L_msg_code			= MDL_SAPI_CO;
		L_msg_to			= ENT_MDL;
		L_msg_from			= ENT_DL;

		Dl_ass_ret_code 	= temp_ret_code;

		Send_message (p_msg); p_buffer = P_NIL;
	}

#	if DL_IDENTIFICATION == ON

			/* Identification processing */

		if (temp_ret_code == OK) {

				/*
					A PH_ACT_IN suspension has been done for
					awaiting the ATTACH request --> now continue
					to process the PH_ACT_IN through the DL internal
					queue.
				*/

			dl_process_act_dea_in ();
		}

#	endif

	return (temp_ret_code);
}

/*EOF*/
