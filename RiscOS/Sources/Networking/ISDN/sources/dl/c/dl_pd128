
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_pd128.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         p_d_128 - implements the packing of a modulo 128 LAP-D frame,
 *
 *         i_size_d_128 - size of I frame header.
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */


#include "dl.h"
#include "dl_comm.h"


/*---------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             p_d_128 - implements the packing of a modulo 128 lap-D
						   frame.

Usage            void p_d_128 ();

Description     p_d_128 uses the dl_pck common code with the structure of a
				modulo 128 lap D frame.
				The two conditional compiling constants MODULO and LAPD
				are used to select the ad-hoc structure into dl.h.

Return value    void

common constants and declarations : dl.h

*---------------------------------------------------------------------*/

#if (DL_MODULO_128 == ON) && ((DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON))

void p_d_128 ()
{

#	include "dl_pck.h"

		/* Load address fields */

	S_address_load (Su_sapi, Su_tei, Su_cr);

}

/*-------------------------------------------------------------------------*/

uchar i_size_d_128 ()
{
	return (Fr_i_size);
}

#endif 	/* MODULO 128 */

/*EOF*/
