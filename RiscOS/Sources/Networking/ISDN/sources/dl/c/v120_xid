/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - v120_xid.c    XID frame and SETPARM primitive transfer functions.
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *          v120_transfer_setparm_data - implements the building of an XID frame
 *			information field from the SETPARM primitive parameters.
 *
 *          v120_transfer_xid_data - implements the extraction from XID received frame
 *			information field of the SETPARM primitive parameters.
 *
 *          v120_reject_setparm - implements the building of a a SETPARM NOK
 *          primitive.
 *
 *          v120_process_negotiation_events - implements the processing of events
 *          associated with parameters negociation.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY 		DL_D			/* V120 Data Link entity */
#define MODULO 		128				/* MODULO 128 */

#include "dl.h"

#if (DL_V120 == ON) && (DL_V120_XID_NEGOTIATION == ON) && (DL_XID == ON)

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "dl_comm.h"

#define INCLUDE_ONLY_META_PROGRAMS	OFF

#include "v120_xid.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            v120_transfer_setparm_data - build an XID frame
				information field from the SETPARM primitive parameters


Usage           void v120_transfer_setparm_data	(event_id);
				- event_id : type of frame to send (COMMAND or RESPONSE)
				p_rcv_msg --> V120_SETPARM structure


Common constants and declarations : dlm.h
									v120_comm.h
									xid_int.h
									v120_xid.h

*--------------------------------------------------------------------------*/


void v120_transfer_setparm_data (event_id)
	uchar 					event_id;			/* Xid command or response frame to send */
{                          						/* or retransmision of the same command frame */
	uchar					*p_pc;              /* XID Program Counter */
	uchar FAR 				*p_xid;				/* Pointer to XID data */
	ushort					used_length;		/* used length in the buffer */
	struct v120_setparm FAR	*p_data;			/* setparm data pointer */

		/* load data setparm pointer */

	p_data = (struct v120_setparm FAR *) R_a_data;

	if (event_id == FR_XID_COMMAND) {

			/* Save SETPARM data */

		Memcpy_far ((char FAR *) Setparm_a_save,
					(char FAR *) p_data,
					V120_setparm_size);
	}

		/* Transfer SETPARM parameters in the variables to be encoded in the XID frame */

			/* Transfer Parameter Set Identifier Value */

		Memcpy_far ((char FAR *)&psi[0],
					(char FAR *)&PV_PSI_V120 [0],
					(PL_PSI + 1)
				   );

		/* Transfer V.120 V.42bis parameters in local variables */

	p0			= V120_setparm_p0;
	p1			= V120_setparm_p1;
	p2			= V120_setparm_p2;

		/* All parameters will be encoded */

	pn_group_f	= PRESENT;

		/* Encode only if V.120 V.42bis DC is requested */

	pps_group_f	= PRESENT;
	psi_f		= PRESENT;
	p0_f		= PRESENT;

	if (p0 == V120_DIRECTION_NEITHER) {
		p1_f		= ABSENT;
		p2_f		= ABSENT;

	} else {

		p1_f		= PRESENT;
		p2_f		= PRESENT;
	}

		/* load XID frame information field descriptor program pointer */

	p_pc 		= (uchar *) &XID_V120_S;

		/* Reused the current buffer or allocate a new one */

	Buffer_alloc_reused;

	p_xid = Buffer_a_start_data + S_u_size;

		/* Encode from data to XID information field */

	if (xid_encode (p_xid,
					(Buffer_data_lgth - S_u_size),
					p_pc,
					XID_GL_LGTH,
					&used_length) == OK) {

#		if SIMULATION == ON
			pr_xid (p_xid, used_length);
#		endif

		Buffer_data_size 	= used_length;
		Buffer_data_offset += S_u_size;

			/* Transfert in a message if possible */

		Free_msg (p_rcv_msg);
		p_rcv_msg = Msg_or_buffer (p_buffer, S_u_size);

	} else {

		Trap (TRAP_FRAME_TOO_LONG,"v120_transfer_setparm_data");
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            v120_transfer_xid_data - extract from XID received frame
				information field the SETPARM primitive parameters


Usage           void v120_transfer_xid_data ();
					p_rcv_msg --> XID data

					setparm struct <-- p_snd_msg

Common constants and declarations : dlm.h
									v120_comm.h
									xid_int.h
									v120_xid.h

*--------------------------------------------------------------------------*/

uchar v120_transfer_xid_data ()
{
	uchar					*p_pc;				/* XID Program Counter */
	uchar				FAR	*p_xid;				/* XID field pointer */
	struct v120_setparm FAR	*p_data;			/* setparm pointer */
	ushort					data_lgth;			/* XID field size */

		/* Received data in message or buffer */

	p_xid		= R_a_data		+ R_u_size;
	data_lgth	= R_data_size	- R_u_size;

		/* Init program pointer */

	p_pc 		= (uchar *) &XID_V120_S;

		/* Decode information field */

	if (xid_decode (p_xid, data_lgth, p_pc, P_NIL) == OK) {

#		if SIMULATION == ON
			pr_xid (p_xid, data_lgth);
#		endif

			/* Return data in message or buffer */

		p_buffer = P_NIL;
		Prepare_data_to_send (p_snd_msg, p_buffer, V120_setparm_size, p_data);

			/* V.120 V.42bis Private Parameter Negociation */

		if ((pps_group_f == PRESENT) && (Valid_PSI)) {
			V120_setparm_p0	= (p0_f == PRESENT) ? p0 : NIL;
			V120_setparm_p1	= (p1_f == PRESENT) ? p1 : NIL;
			V120_setparm_p2	= (p2_f == PRESENT) ? p2 : NIL;

		} else {

				/* Parameters were not in the XID frame */
				/* or the Parameter Set Identifier was invalid */

			V120_setparm_p0	= NIL;
			V120_setparm_p1	= NIL;
			V120_setparm_p2	= NIL;
		}

		V120_setparm_ret_code = OK;

			/* Return OK */

		return (OK);

	} else {

			/*  XID information field invalid or decoding error */

		return (NOK);
	}

}

/*--------------------------------------------------------------------------*/

void v120_reject_setparm ()
{
	struct v120_setparm FAR	*p_data;		/* data pointer */

		/* Report V120_SETPARM_CO NOK to upper layer */

	p_buffer = P_NIL;
	Prepare_data_to_send (p_snd_msg, p_buffer, V120_setparm_size, p_data);

		/* Load NOK and V120 entity ID */

	V120_setparm_ret_code	= NOK;
	V120_setparm_diagnostic	= ENT_DL_V120;

		/* Send to upper layer */

	Send_to_v120_cf (V120_SETPARM_CO);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            v120_process_negotiation_event - build an XID frame
				information field from the SETPARM primitive parameters


Usage           void v120_process_negotiation_event	(event_id);
				- event_id : event to process :
					. FR_XID_COMMAND
					. FR_XID_RESPONSE
					. V120_SETPARM_RQ
					. V120_SETPARM_IN
					. V120_SETPARM_RS
					. V120_SETPARM_CO
					. TI_V120_XID

Common constants and declarations : dlm.h
									v120_comm.h
									xid_int.h
									v120_xid.h

*--------------------------------------------------------------------------*/

uchar v120_process_negotiation_events ()
{

		/* Dispatching according to the received event */

	switch (event_id) {

		case V120_SETPARM_RQ :

			if (Ti_state (TM20) == ON) {

					/* Only one negociation at a time */

				v120_reject_setparm ();

			} else {

				if ((State == S_MFO) && (Own_receiver_state != BUSY)) {
					Own_receiver_state = BUSY;
					send_frame (FR_RNR_RESPONSE, F_OFF);
					Remote_ack_pending = OFF;
				}

				v120_transfer_setparm_data (FR_XID_COMMAND);
				Rc_xid = 0;
				Stop_timer_t203  ();
				Start_timer (TM20);
				send_frame (FR_XID_COMMAND,	P_OFF);
			}

			return (STOP);

		case V120_SETPARM_RS :
			v120_transfer_setparm_data (FR_XID_RESPONSE);
			send_frame (FR_XID_RESPONSE, F_OFF);
			Start_timer_t203  ();
			return (STOP);

		case FR_XID_COMMAND :

			if ((R_data_size > S_u_size) && (v120_transfer_xid_data () == OK)) {
				Send_to_v120_cf (V120_SETPARM_IN);

			} else {

					/*
						Response with an XID RESPONSE
						containing a zero length field.
					*/

				if (R_msg_p_buffer != P_NIL) {
					Buffer_data_size 	= 0;
					Buffer_data_offset += S_u_size;

				} else {

					R_msg_data_size 	= 0;
					R_msg_data_offset  += S_u_size;
				}

				send_frame (FR_XID_RESPONSE, F_OFF);
			}
			return (STOP);

		case FR_XID_RESPONSE :

			if (Ti_state (TM20) == ON) {
				Stop_timer (TM20);

				if ((R_data_size > S_u_size) && (v120_transfer_xid_data () == OK)) {
					Send_to_v120_cf (V120_SETPARM_CO);

				} else {

						/* Rejected */

					v120_reject_setparm ();
				}

				if ((State == S_MFO) && (Own_receiver_state == BUSY)) {
					Own_receiver_state = FREE;

					if (Discarded_i_frame_state == OFF) {
						send_frame (FR_RR_RESPONSE, F_OFF);

					} else {

						send_frame (FR_REJ_RESPONSE, F_OFF);
						Discarded_i_frame_state = OFF;
					}

					Remote_ack_pending = OFF;

				}

			}
			return (STOP);

		case TI_V120_XID :

			if (Rc_xid == Xid_rc_max) {

					/* No response frame received */

				v120_reject_setparm ();

					/* Continue */

				if ((State == S_MFO) && (Own_receiver_state == BUSY)) {
					Own_receiver_state = FREE;

					if (Discarded_i_frame_state == OFF) {
						send_frame (FR_RR_RESPONSE, F_OFF);

					} else {

						send_frame (FR_REJ_RESPONSE, F_OFF);
						Discarded_i_frame_state = OFF;
					}

					Remote_ack_pending = OFF;
				}

			} else {

				(Rc_xid)++;

					/* Restore SETPARM data */

				if (V120_setparm_size > Message_data_lgth) {

					if (R_msg_p_buffer == P_NIL) {
						R_msg_p_buffer = p_buffer = Buffer_alloc;
					}

				}

				Memcpy_far ((char FAR *) (R_a_data),
							(char FAR *) Setparm_a_save,
							V120_setparm_size);

					/* Build the XID frame */

				v120_transfer_setparm_data (FR_XID_COMMAND);

					/* Send the XID frame */

				send_frame (FR_XID_COMMAND, P_OFF);

					/* Restart retry timer */

				Restart_timer (TM20);
			}
			return (STOP);

		default:
			return (CONTINUE);
	}

}

/*--------------------------------------------------------------------------*/

#endif

/* EOF */

