
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ana_ph.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         pr_frame - implements the analysing of a Data Link frame.
 *
 *         ana_sdu_ph - print the message header of a PH message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"

#if DL_SIM_ANALYSER == ON
#	include "dl_comm.h"
#	include "simul.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			pr_frame (direction) - implements the analysing of a frame.

Usage           void pr_frame (uchar direction);
						- direction : ('I') incomming or ('O') outgoing frame.

Description :	pr_frame implements the analysing and the printing of a frame.

Return value : 	void

common constants and declarations :  dl.h

Common objects : received unpacked frame structure upfh (access using ru_xxx)

*--------------------------------------------------------------------------*/

			/* Printing formats */

#define Pr_r_frame		 	fprintf (f_out, "\n\n===> FRAME : ")
#define Pr_s_frame			fprintf (f_out, "\n\n<=== FRAME : ")

#define Pr_r_address		fprintf (f_out, "LAPD sapi = %3d tei = %3d c/r = %1c ", \
									 Ru_sapi, \
									 Ru_tei, \
									 c_cr)

#define Pr_r_address_f		fprintf (f_out, "LAPF dlci = %5d c/r = %1c fecn = %1d becn = %1d de = %1d ", \
									 (ushort)Ru_dlci, \
									 c_cr,	  \
									 Ru_fecn, \
									 Ru_becn, \
									 Ru_de)

#define Pr_r_address_b		fprintf (f_out, "LAPB c/r = %1c ",\
									 c_cr)

#define Pr_r_i     			fprintf (f_out, "I p = %1d n(r) = %4d n(s) = %3d ", \
									 Ru_p, \
									 Ru_nr, \
									 Ru_ns)

#define Pr_r_s(xx)			fprintf (f_out, xx); \
							fprintf (f_out, " p/f = %1d n(r) = %3d", \
									 Ru_p, \
									 Ru_nr)

#define Pr_r_u(xx)			fprintf (f_out, xx);\
							fprintf (f_out, " p/f = %1d", \
									 Ru_p)

#define Pr_s_address		fprintf (f_out, "LAPD sapi = %3d tei = %3d c/r = %1c ", \
									 Su_sapi, \
									 Su_tei, \
									 c_cr)

#define Pr_s_address_f		fprintf (f_out, "LAPF dlci = %5d c/r = %1c fecn = %1d becn = %1d de = %1d ", \
									 (ushort)Su_dlci, \
									 c_cr,	  \
									 Su_fecn, \
									 Su_becn, \
									 Su_de)

#define Pr_s_address_b		fprintf (f_out, "LAPB c/r = %1c ",\
									 c_cr)

#define Pr_s_i     			fprintf (f_out, "I p = %1d  n(r) = %3d n(s) = %3d", \
									 Su_p, \
									 Su_nr, \
									 Su_ns)

#define Pr_s_s(xx)			fprintf (f_out, xx); \
							fprintf (f_out, " p/f = %1d  n(r) = %3d", \
									 Su_p, \
									 Su_nr)

#define Pr_s_u(xx)			fprintf (f_out, xx); \
							fprintf (f_out, " p/f = %1d", \
									 Su_p)

/*-------------------------------------------------------------------------*/

/* 								Modulo 128

	--------------------------------------------------------------------
	|  Format | commands | Response | Encoding  8  7  6  5  4  3  2  1 | octet
	--------------------------------------------------------------------
	|         |          |          |        |      N(S)          | 0  |  4
	| Informa | I(info)  |          |        |-------------------------|
	| Transf  |          |          |        |      N(R)          | P  |  5
	|------------------------------------------------------------------|
	|   S     |          |          |        | 0  0  0  0  0  0  0  1  |  4
	|   U     |    RR    |   RR     |        |-------------------------|
	|   P     |          |          |        |      N(R)          |P/F |  5
	|   E     |----------|----------|--------|-------------------------|
	|   R     |          |          |        | 0  0  0  0  0  1  0  1  |  4
	|   V     |    RNR   |   RNR    |        |-------------------------|
	|   I     |          |          |        |      N(R)          |P/F |  5
	|   S     |----------|----------|--------|-------------------------|
	|   O     |          |          |        | 0  0  0  0  1  0  0  1  | 4
	|   R     |    REJ   |   REJ    |        |-------------------------|
	|   Y     |          |          |        |      N(R)          |P/F | 4
	|---------|----------|----------|--------|-------------------------|
	|         |  SABM    |          |        | 0  0  1 |P |1  1 | 1 1  |  4
	|         |----------|----------|--------|---------|--|-----|------|
	|   U     |  SABME   |          |        | 0  1  1 |P |1  1 | 1 1  |  4
	|   N     |----------|----------|--------|---------|--|-----|------|
	|   N     |          |  DM      |        | 0  0  0 |F |1  1 | 1 1  |  4
	|   U     |----------|----------|--------|---------|--|-----|------|
	|   M     |   UI     |          |        | 0  0  0 |P |0  0 | 1 1  |  4
	|   B     |----------|----------|--------|---------|--|-----|------|
	|   E     |   DISC   |          |        | 0  1  0 |P |0  0 | 1 1  |  4
	|   R     |----------|----------|--------|---------|--|-----|------|
	|   E     |          |   UA     |        | 0  1  1 |F |0  0 | 1 1  |  4
	|   D     |----------|----------|--------|---------|--|-----|------|
	|         |   SI0    |   SI0    |        | 0  1  1 |PF|0  1 | 1 1  |  4
	|         |----------|----------|--------|---------|--|-----|------|
	|         |   SI1    |   SI1    |        | 1  1  1 |PF|0  1 | 1 1  |  4
	|         |----------|----------|--------|---------|--|-----|------|
	|         |          |   FRMR   |        | 1  0  0 |F |0  1 | 1 1  |  4
	|---------|----------|----------|--------|---------|--|-----|------|
	|  Mgt    |  XID     |   XID    |        | 1  0  1 |PF|1  1 | 1 1  |  4
	--------------------------------------------------------------------
*/


void pr_frame (direction)
	uchar direction;		/* Input frame or Output frame */

{
	uchar c_cr;				/* command/response */

	if (print_flag == ON) {

		if (direction == 'I') {

				/* Incoming frame */

			Pr_r_frame;

			c_cr = (Ru_cr == DTE_CR_RCV_COMMAND) ? 'c' : 'r';

			switch (Dl_entity_id) {

				case ENT_DL_B :
					Pr_r_address_b;
					break;

#			  if DL_LAPF == ON
				case ENT_DL_F :
					Pr_r_address_f;
					break;
#			  endif

				default :
					Pr_r_address;
					break;

			}


			switch (Ru_format) {

					/* I frame format */

				case I :
					Pr_r_i;
					break;

					/* S frame format */

				case S :

					switch (Ru_command) {

						case RR :
							Pr_r_s ("RR");
							break;

						case RNR :
							Pr_r_s ("RNR");
							break;

						case REJ :
							Pr_r_s ("REJ");
							break;

						default :
							break;

					}
					break;

					/* U frame format */

				case U :

					switch (Ru_command) {

						case SABME :
							Pr_r_u ("SABME");
							break;

						case SABM :
							Pr_r_u ( "SABM");
							break;

						case DM :
							Pr_r_u ("DM");
							break;

						case DISC :
							Pr_r_u ("DISC");
							break;

						case UA :
							Pr_r_u ("UA");
							break;

						case FRMR :
							Pr_r_u ("FRMR");
							break;

						case UI :
							Pr_r_u ("UI");

							if ((p_rcv_msg 	!= P_NIL) &&
								(Ru_sapi 	== DL_SAPI_MDL) &&
								(Ru_tei 	== DL_TEI_BROADCAST)) {
								pr_tei_msg (R_a_data + R_u_size, R_data_size - R_u_size);
							}
							break;

						case SI0 :
							Pr_r_u ("SI0");
							break;

						case SI1 :
							Pr_r_u ("SI1");
							break;

						case XID :
							Pr_r_u ("XID");

#							if DL_XID_ANA == ON

								if (p_rcv_msg != P_NIL) {
									pr_xid (R_a_data + R_u_size, R_data_size - R_u_size);
								}

#							endif

							break;

						default :
							break;

					}
					break;

			}

		} else {

				/* Outgoing frame */

			Pr_s_frame;

			c_cr = (Su_cr == DTE_CR_SND_COMMAND) ? 'c' : 'r';

			switch (Dl_entity_id) {

				case ENT_DL_B :
					Pr_s_address_b;
					break;

#			  if DL_LAPF == ON
				case ENT_DL_F :
					Pr_s_address_f;
					break;
#			  endif

				default :
					Pr_s_address;
					break;

			}

			switch (Su_format) {

					/* I frame format */

				case I :
					Pr_s_i;
					break;

					/* S frame format */

				case S :

					switch (Su_command) {

						case RR :
							Pr_s_s ("RR");
							break;

						case RNR :
							Pr_s_s ("RNR");
							break;

						case REJ :
							Pr_s_s ("REJ");
							break;

						default :
							break;

					}
					break;

					/* U frame format */

				case U :

					switch (Su_command) {

						case SABME :
							Pr_s_u ("SABME");
							break;

						case SABM :
							Pr_s_u ("SABM");
							break;

						case DM :
							Pr_s_u ("DM");
							break;

						case DISC :
							Pr_s_u ("DISC");
							break;

						case UA :
							Pr_s_u ("UA");
							break;

						case FRMR :
							Pr_s_u ("FRMR");
							break;

						case UI :
							Pr_s_u ("UI");

							if ((p_snd_msg 	!= P_NIL) &&
								(Su_sapi 	== DL_SAPI_MDL) &&
								(Su_tei 	== DL_TEI_BROADCAST)) {
								pr_tei_msg (S_a_data + S_u_size, S_data_size - S_u_size);
							}

							break;

						case SI0 :
							Pr_s_u ("SI0");
							break;

						case SI1 :
							Pr_s_u ("SI1");
							break;

						case XID :
							Pr_s_u ("XID");

#							if DL_XID_ANA == ON

								if (p_snd_msg != P_NIL) {
									pr_xid (S_a_data, S_data_size);
								}

#							endif

							break;

						default :
							break;

					}
					break;

			}

		}

	}

}

/*-------------------------------------------------------------------------*/

							/* PH header */

#define Pr_msg_ph fprintf (f_out, "from = %c to = %c code = %s nai = %-1u sapi = %u chani = %-1u lib = %-1u",\
	L_msg_from, L_msg_to, Code_to_text (ph_prim, L_msg_code), L_msg_nai, L_msg_sapi, L_msg_chani, L_msg_lib)

/*-------------------------------------------------------------------------*/

			/* PH text */

CONST struct code_text ph_prim[] = {
	  {PH_ACT_RQ,			"PH_ACT_RQ"},
	  {PH_ACT_IN,			"PH_ACT_IN"},

	  {PH_DEA_RQ,			"PH_DEA_RQ"},
	  {PH_DEA_IN,			"PH_DEA_IN"},

	  {PH_DA_RQ,			"PH_DA_RQ"},
	  {PH_DA_IN,			"PH_DA_IN"},

	  {PH_DETECTION_RQ,		"PH_DETECTION_RQ"},
	  {PH_DETECTION_IN,		"PH_DETECTION_IN"},

	  {PH_CLEAR_RQ,			"PH_CLEAR_RQ"},

	  {PH_TX_RQ,			"PH_TX_RQ"},
	  {PH_TX_IN,			"PH_TX_IN"},

	  {PH_RX_RQ,			"PH_RX_RQ"},
	  {PH_RX_IN,			"PH_RX_IN"},

	  {PH_TX_RIGHT_IN,		"PH_TX_RIGHT_IN"},

	  {MPH_SET_CONFIG_RQ,   "MPH_SET_CONFIG_RQ"},
	  {MPH_SET_CONFIG_CO,   "MPH_SET_CONFIG_CO"},

	  {MPH_RESET_CONFIG_RQ, "MPH_RESET_CONFIG_RQ"},
	  {MPH_RESET_CONFIG_CO, "MPH_RESET_CONFIG_CO"},

	  {MPH_STOP_RQ,         "MPH_STOP_RQ"},
	  {MPH_STOP_CO,         "MPH_STOP_CO"},

	  {MPH_INIT_RQ,			"MPH_INIT_RQ"},
	  {MPH_INIT_CO,			"MPH_INIT_CO"},

	  {MPH_ACT_RQ,			"MPH_ACT_RQ"},
	  {MPH_ACT_IN,			"MPH_ACT_IN"},

	  {MPH_DEA_RQ,			"MPH_DEA_RQ"},
	  {MPH_DEA_IN,			"MPH_DEA_IN"},

	  {0,					"NONAME"},
};

/*-------------------------------------------------------------------------*/

uchar ana_sdu_ph (p_msg)
	struct message FAR *p_msg;
{
	Pr_msg_ph;
	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

#define Pr_tei_msg	fprintf (f_out, "\n     TEI management message : type = %s  Ai = %-d  Ri = %-d ", \
							 p_type_msg[strchar (p_type_msg, type)].p_text, \
							 ai, \
							 ri)

CONST	struct	code_text	p_type_msg [] = {
			{TAP_ID_RQ,		"IDENTITY REQUEST"},
			{TAP_ID_ASS,	"IDENTITY ASSIGNED"},
			{TAP_ID_DENIED,	"IDENTITY DENIED"},
			{TAP_ID_CHK_RQ,	"IDENTITY CHECK REQUEST"},
			{TAP_ID_CHK_RS,	"IDENTITY CHECK RESPONSE"},
			{TAP_ID_RM,		"IDENTITY REMOVE"},
			{TAP_ID_VERIFY,	"IDENTITY VERIFY"},
			{0,				"NONAME"}
			};

void pr_tei_msg (p_tap, data_size)
	uchar	FAR 	*p_tap;
	ushort			data_size;
{
	uchar 			type;
	uchar			ai;
	ushort			ri;

	if ((data_size == I_tap_size) && (I_tap_mei == TAP_MEI)) {
		type	= I_tap_type;
		ri		= (I_tap_ri_2 << 8) + I_tap_ri_1;
		ai		= I_tap_ai;
		Pr_tei_msg;
	}

}

/*--------------------------------------------------------------------------*/

#endif /* DL_SIM_ANALYSER */
/*EOF*/
