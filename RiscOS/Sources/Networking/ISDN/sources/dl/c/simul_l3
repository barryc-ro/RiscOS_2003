
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - simul_l3.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 * 				build_sdu_n_to_dl - implements the building of a communication
 *						            message to be sent to DL entity.
 *
 * 				build_sdu_n_to_mdl - implements the building of a communication
 *						            message to be sent to  MDL entity.
 *
 *				build_sdu_ti_to_dl - implements the building of a timer
 *									 message to be sent to a DL entity.
 *
 *				Pr_n_to_dl - prints the code of primitive sent by the layer 3
 *                           to a DL entity.

 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"
#include "simul.h"
#include "dl_int.h"

#if (DL_V120 == ON) && (DL_V120_XID_NEGOTIATION == ON)

#	include "v120_int.h"

	static 	int 	p0;			/* P0 */
	static 	int 	p1;			/* P1 */
	static 	int 	p2;			/* P2 */
#endif

#if DL_SIM_BUILDER  == ON

#	if NEW_FCT_STYLE == ON
		void	pr_n_to_dl_code 	(void);
		void	pr_n_to_mdl_code 	(void);
		void	mg_p0				(void);
		void	mg_p1				(void);
		void	mg_p2				(void);

#	else

		void	pr_n_to_dl_code 	();
		void	pr_n_to_mdl_code 	();
		void	mg_p0				();
		void	mg_p1				();
		void	mg_p2				();
#	endif

/*--------------------------------------------------------------------------*/

uchar build_sdu_n_to_dl ()
{
#	if (DL_V120 == ON) && (DL_V120_XID_NEGOTIATION == ON)
    	struct	v120_setparm FAR *p_data;
#   endif

	mg_nai 	();
	mg_sapi ();
	mg_ces 	();
	mg_code ();

	while (g_code[0] == '?') {
		pr_n_to_dl_code ();
		mg_code ();
	}

	load_message (g_from[0], ENT_DL);

	if ((S_msg_code == DL_DA_RQ) ||
		(S_msg_code == DL_U_DA_RQ)) {

#		if I_MSG_SIMUL == ON

			S_msg_data_size		= INFO_SIZE;
			S_msg_data_offset	+= DL_MX_FRAME_HEADER;

			Memcpy_far ((char FAR *)S_msg_a_start_data, (char FAR *)"abcdefghijklmnopqrstuvwxyz", INFO_SIZE);

#		else

			Buffer_alloc;

			S_msg_init_link_buffer;				/* link the buffer */

			Buffer_data_size	= INFO_SIZE;
			Buffer_data_offset	+= DL_MX_FRAME_HEADER;

			Memcpy_far ((char FAR *)Buffer_a_start_data, (char FAR *)"abcdefghijklmnopqrstuvwxyz", INFO_SIZE);

#		endif

	}

#	if (DL_V120 == ON) && (DL_V120_XID_NEGOTIATION == ON)

		else if ((S_msg_code == V120_SETPARM_RQ) ||
				 (S_msg_code == V120_SETPARM_RS)) {
			mg_p0 ();
			mg_p1 ();
			mg_p2 ();

			Buffer_alloc;
			S_msg_init_link_buffer;				/* link the buffer */
			p_data = (struct v120_setparm FAR *)Buffer_a_start_data;

			V120_setparm_p0 = p0;
			V120_setparm_p1 = p1;
			V120_setparm_p2 = p2;

			Buffer_data_size	= V120_setparm_size;
		}

#	endif

	return (OK);

}


/*--------------------------------------------------------------------------*/

#if (DL_LAP4K == ON) || (DL_LAPF == ON)

uchar build_sdu_n_to_mdl ()
{
	uchar 	FAR *p_data;
	ushort		 dlci = 0;

	mg_nai 	();
	mg_sapi ();
	mg_ces 	();
	mg_code ();

	while (g_code[0] == '?') {
		pr_n_to_mdl_code ();
		mg_code ();
	}

	load_message (g_from[0], ENT_MDL);

	Prompt	("            DLCI value", 3d, dlci);
	Scan	(3d, &dlci);
	Echo	(3d, dlci);

	p_data 				= S_msg_a_start_data;

	Mdl_dlci_val 		= dlci;
	Mdl_dlci_ret_code 	= MDL_DLCI_ACCEPTED;

	Mdl_dlci_k_tx		= 0;
	Mdl_dlci_t200		= 0;
	Mdl_dlci_n201_tx	= 0;
	Mdl_dlci_n201_rx	= 0;

	return (OK);
}

#endif

/*-------------------------------------------------------------------------*/

		/* Timer simulation : ---> to DL */

uchar build_sdu_ti_to_dl ()
{
	mg_nai 	();
	mg_sapi ();
	mg_ces 	();

	Prompt	("    timer T200=0, T203=3", c, g_code[0]);
	Scan	(1s, g_code);
	Echo	(c, g_code[0]);

	Prompt	("         sequence number", 3d, g_inf0);
	Scan	(3d, &g_inf0);
	Echo	(3d, g_inf0);

		/* Load the message */

	load_message (ENT_TI, ENT_DL);

	return (OK);
}

/*-------------------------------------------------------------------------*/

void	pr_n_to_dl_code ()
{
	fprintf (f_out, "		%c : DL establish request",					DL_EST_RQ);
	fprintf (f_out, "\n		%c : DL establish request SI0/SI1",			DL_U_EST_RQ);
	fprintf (f_out, "\n		%c : DL release request",					DL_REL_RQ);
	fprintf (f_out, "\n		%c : DL data request",						DL_DA_RQ);
	fprintf (f_out, "\n		%c : DL unit data request",					DL_U_DA_RQ);
	fprintf (f_out, "\n		%c : DL information commitment request",	DL_COMMIT_RQ);
	fprintf (f_out, "\n");

}

/*--------------------------------------------------------------------------*/

#if (DL_LAP4K == ON) || (DL_LAPF == ON)

void	pr_n_to_mdl_code ()
{
	fprintf (f_out, "		%c : MDL assign DLCI request",				MDL_AS_DLCI_RQ);
	fprintf (f_out, "\n		%c : MDL assign DLCI response",				MDL_AS_DLCI_RS);
	fprintf (f_out, "\n		%c : MDL remove DLCI request",				MDL_RM_DLCI_RQ);
	fprintf (f_out, "\n");

}

#endif

/*-------------------------------------------------------------------------*/

#if (DL_V120 == ON) && (DL_V120_XID_NEGOTIATION == ON)

void mg_p0 ()
{
	Prompt	("Data compression RQ (P0) (0, 1, 2, 3) = ", u, p0);
	Scan	(d, &p0);
	Echo	(u, p0);
}

void mg_p1 ()
{
	Prompt	(" Number of codewords (P1) (1 - 65535) = ", u, p1);
	Scan	(d, &p1);
	Echo	(u, p1);
}

void mg_p2 ()
{
	Prompt	("     Max string lenght (P2) (1 - 254) = ", u, p2);
	Scan	(d, &p2);
	Echo	(u, p2);
}

#endif

/*--------------------------------------------------------------------------*/

#endif	/* DL_SIM_BUILDER  */

/*EOF*/
