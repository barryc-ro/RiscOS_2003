
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - xid.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *           xid_encode	- implements the encoding of an XID frame
 *						information field according to the meta-program
 *                      describing it
 *
 *           xid_decode  - implements the decoding of an XID frame
 *						information field according to the the meta-program
 *                      describing it
 *
 *           xid_test_gi  - implements the test of a given Group Identifier
 *						in an XID frame information field
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "xid.h"
#include "ctx_ext.h"

#if DL_XID == ON

		/* Local variables */

static	uchar FAR	*p_start_group;
		uchar FAR	*p_end_group;

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             xid_encode  - implements the encoding of an XID frame
								information field according to the internal
								data structures and the meta-program

Usage            xid_encode (uchar FAR *p_data, ushort data_lgth, uchar *p_pc,
							 ushort *p_used_lgth);
					- p_xid 		: information field data pointer,
					- data_lgth		: available data length,
					- p_pc			: program counter pointer,
					- p_used_lgth	: address of the number of octets used
									  for encoding or P_NIL.

Return value 	=	OK
					NOK

Common constants and declarations : xid_int.h

Common objects	:

*--------------------------------------------------------------------------*/

uchar xid_encode (p_xid, data_lgth, p_pc, xid_gl_lgth, p_used_lgth)
				uchar FAR 	*p_xid;			/* resulting xid information field pointer */
				ushort		data_lgth;		/* available length for encoding */
	register	uchar 		*p_pc;			/* program counter pointer */
				uchar		xid_gl_lgth;	/* length of the group lenth location */
				ushort		*p_used_lgth;	/* address of the used length for encoding */
{
				uchar FAR	*p_start_xid;	/* start of available data pointer 	*/
				uchar FAR	*p_end_xid;		/* end of available data pointer 	*/
				uchar FAR	*p_string;		/* STRING instruction value pointer	*/
				uchar FAR	*p_gl;			/* Group Length saved address		*/
				uchar FAR	*p_pl;			/* Parameter Length saved address	*/
				uchar FAR	*p_bitfield;	/* bitfield value address			*/
				uchar       inst_lgth;		/* current instruction length		*/
				uchar		pl;				/* current Parameter length			*/
				uchar		encoding;		/* CONTINUE or STOP encoding  		*/
				uchar 		i;				/* local counter					*/
				uchar		position;		/* position of a bitfield value 	*/
				uchar		n_octet;		/* offset in the bitfield			*/
				uchar		skip_group;		/* skip group if flag = ABSENT		*/
				uchar		skip_bitfield;	/* skip bitfield if flag = ABSENT	*/
				uchar		start_group;	/* ON if group has started			*/
				ushort 		gl;				/* Group Length value				*/
				ushort 		bf_val;			/* Bit-field value					*/
				uchar		ret_val;		/* encoding function return value	*/

/*

		 Execute the meta-program until XID_END instruction
		 or until end of data reached

*/
	ret_val			= OK;
	p_start_xid		= p_xid;
	p_gl			= p_xid;
	p_end_xid		= p_xid + data_lgth;
	encoding		= CONTINUE;
	skip_group		= OFF;
	skip_bitfield	= OFF;
	start_group		= OFF;

	while (encoding == CONTINUE ) {

		switch (Inst_code) {

				/* XID_START	:  */

			case INST_XID_START :
				inst_lgth = XID_START_LGTH;

					/* transfer Format Identifier */

				Put_xid_octet (Xid_start_fi);
				break;

				/* GROUP	: transfer group parameters  */

			case INST_XID_GROUP :
				inst_lgth = XID_GROUP_LGTH;

				if (start_group == ON) {

						/* calculate preceding group length */

					if (xid_gl_lgth != 0) {

						gl = p_xid - p_gl - xid_gl_lgth;

							/* transfer group length value */

						Put_xid_address (p_gl++, Msb(gl));
						Put_xid_address (p_gl,	 Lsb(gl));
					}

				} else {

					start_group = ON;
				}

					/* reset group skipping flag */

				if (skip_group == ON) {
					skip_group = OFF;
				}

				if (*Xid_group_p_flag == ABSENT) {
					skip_group = ON;

				} else {

					if ((p_xid + XID_GH_LGTH) > p_end_xid) {
						ret_val		= NOK;
						encoding	= STOP;
						break;
					}

						/* transfer Group Identifier */

					Put_xid_octet (Xid_group_gi);

						/* save Group Length address, skip location */

					p_gl	= p_xid;

					Inc_p_xid (xid_gl_lgth);
				}
				break;

					/* XID_GROUP_VAL : Group without parameters */

			case INST_XID_GROUP_VAL :
				inst_lgth = XID_GROUP_VAL_LGTH;

				if (skip_group == ON) {
					break;
				}

					/* transfer Group Length */

				gl = *Xid_group_val_p_gl;

				if (xid_gl_lgth != 0) {
					Put_xid_address (p_gl++, Msb(gl));
					Put_xid_address (p_gl,	 Lsb(gl));
				}

					/* transfer Group Value */

				Memcpy_far ((char FAR *)p_xid,
							(char FAR *)Xid_group_val_p_val,
							gl);

				Inc_p_xid (gl);

					/* avoid calculation of Group Length */

				start_group = OFF;
				break;

				/* XID_CHAR : transfer the value */

			case INST_XID_CHAR :
				inst_lgth = XID_CHAR_LGTH;

				if ((skip_group == ON) || (*Xid_char_p_flag == ABSENT)) {
					break;
				}

				pl = ((Xid_char_pl > 0) ? Xid_char_pl : 1);

				if ((p_xid + pl + XID_PH_LGTH) > p_end_xid) {
					ret_val		= NOK;
					encoding	= STOP;
					break;
				}

				Put_xid_octet (Xid_char_pi);
				Put_xid_octet (pl);

				for (i = 1; i < pl ; i++) {
					Put_xid_octet (0);
				}

				Put_xid_octet (*Xid_char_p_val);
				break;

				/* XID_SHORT : transfer the value */

			case INST_XID_SHORT :
				inst_lgth = XID_SHORT_LGTH;

				if ((skip_group == ON) || (*Xid_short_p_flag == ABSENT)) {
					break;
				}

				pl = calculate_short_storage(*Xid_short_p_val);

						/* check length is sufficient for parameter value */

				if ((Xid_short_pl > 0) &&
					( ! ((Xid_short_pl == 1) && (pl > 1)) )
				   ) {
					pl = Xid_short_pl;
				 }

				 if ((p_xid + pl + XID_PH_LGTH) > p_end_xid) {
					ret_val		= NOK;
					encoding 	= STOP;
					break;
				}

					/* transfer parameter identifier and length */

				Put_xid_octet (Xid_short_pi);
				Put_xid_octet (pl);

					/* transfer padding null octets if necessary */

				for (i = 2; i < pl; i++) {
					Put_xid_octet (0);
				}
					/* transfer value */

				if (pl > 1) {
					Put_xid_octet (Msb (*Xid_short_p_val));
				}

				Put_xid_octet (Lsb (*Xid_short_p_val));
				break;

				/* XID_LONG : transfer the value */

			case INST_XID_LONG :

				inst_lgth = XID_LONG_LGTH;

				if ((skip_group == ON) || (*Xid_long_p_flag == ABSENT)) {
					break;
				}

					/* calculate parameter value minimum storage */

				pl = calculate_long_storage (*Xid_long_p_val);

					/* check parameter length is sufficient */

				if ((Xid_long_pl > 0) && (Xid_long_pl >= pl)) {
						pl = Xid_long_pl;
				}

				if ((p_xid + pl + XID_PH_LGTH) > p_end_xid) {
					ret_val		= NOK;
					encoding 	= STOP;
					break;
				}

					/* transfer parameter identifier and length */

				Put_xid_octet (Xid_long_pi);
				Put_xid_octet (pl);

					/* transfer padding null octets if necessary */

				for (i = pl; i > 4; i--) {
					Put_xid_octet (0);
				}

					/* transfer Parameter value octets */

				switch (i) {

					case 4 :
						Put_xid_octet (Get_long_o1 (*Xid_long_p_val));

					case 3 :
						Put_xid_octet (Get_long_o2 (*Xid_long_p_val));

					case 2 :
						Put_xid_octet (Get_long_o3 (*Xid_long_p_val));

					case 1 :
						Put_xid_octet (Get_long_o4 (*Xid_long_p_val));
						break;

				}
				break;

				/* STRING : transfer the text */

			case INST_XID_STRING :
				inst_lgth = XID_STRING_LGTH;

				if ((skip_group == ON) || (*Xid_string_p_flag == ABSENT)) {
				   break;
				}

					/* transfer Parameter Identifier */

				Put_xid_octet (Xid_string_pi);

					/* save and skip Parameter Length address */

				p_pl = p_xid;
				Inc_p_xid (XID_PL_LGTH);

				p_string = (uchar FAR *)Xid_string_p_val;

				while (*p_string != 0) {
					Put_xid_octet (*p_string++);
				}
					/* transfer Parameter length */

				pl = p_xid - p_pl - XID_PL_LGTH;

				Put_xid_address (p_pl, pl);
				break;

				/* BINARY : transfer n octets */

			case INST_XID_VECTOR :
				inst_lgth = XID_VECTOR_LGTH;

				if ((skip_group == ON) || (*Xid_vector_p_flag == ABSENT)) {
					break;
				}

				if ((p_xid + *Xid_vector_p_lgth) > p_end_xid) {
					ret_val 	= NOK;
					encoding 	= STOP;
					break;
				}

					/* transfer Parameter Identifier */

				Put_xid_octet (Xid_vector_pi);

					/* transfer Parameter Length */

				pl = *Xid_vector_p_lgth;

				Put_xid_octet (pl);

				Memcpy_far ((char FAR *)p_xid,
							(char FAR *)Xid_vector_p_val,
							pl);

				Inc_p_xid (*Xid_vector_p_lgth);
				break;

				/* BITFIELD : bit field parameter */

			case INST_XID_BITFIELD :
				inst_lgth = XID_BITFIELD_LGTH;
				
				if (skip_group == ON) {
					break;
				}

				skip_bitfield = OFF;

				if (*Xid_bitfield_p_flag == ABSENT) {
					skip_bitfield = ON;
					break;
				}

				if ((p_xid + Xid_bitfield_lgth) > p_end_xid) {
					ret_val		= NOK;
					encoding	= STOP;
					break;
				}

					/* transfer Parameter Identifier */

				Put_xid_octet (Xid_bitfield_pi);

					/* transfer and save Parameter Length */

				Put_xid_octet (Xid_bitfield_lgth);

				pl = Xid_bitfield_lgth;

					/* save bitfield Parameter Value address */

				p_bitfield = p_xid;

					/* init Parameter Value */

				for (i = 0; i < pl; i++) {
					Put_xid_octet (0);
				}

				break;

				/* BITFIELD_VAL : transfer bit field value */

			case INST_XID_BITFIELD_VAL :
				inst_lgth = XID_BITFIELD_VAL_LGTH;

				if ((skip_group == ON) || (skip_bitfield == ON)) {
					break;
				}

				n_octet		= (int)(Xid_bitfield_val_position - 1) / OCTET_SIZE;
				position	= (int)(Xid_bitfield_val_position - 1) % OCTET_SIZE;

				bf_val = Mask_xid_octet ((p_bitfield + n_octet), position, Xid_bitfield_val_mask, *Xid_bitfield_val_p_val);
				Put_xid_address ((p_bitfield + n_octet),	Lsb (bf_val));
				Put_xid_address ((p_bitfield + n_octet+1),	Msb (bf_val));
				break;

				/* END : execute a specific function and stop the meta-program */

			case INST_XID_END :

				if ((start_group == ON) && (skip_group == OFF)) {

					if (xid_gl_lgth != 0) {

							/* calculate preceding group length */

						gl = p_xid - p_gl - xid_gl_lgth;

							/* transfer group length value */

						Put_xid_address (p_gl++,Msb(gl));
						Put_xid_address (p_gl,	Lsb(gl));
					}

				}

				encoding = STOP;
				break;

			default :
				Trap (TRAP_XID_META_PROGRAM, "xid_encode");

		}

			/* Next instruction */

		p_pc += Round (inst_lgth);

	}
		/* calculate used length for encoding */

	if (p_used_lgth != P_NIL) {
		*p_used_lgth = p_xid - p_start_xid;
	}

		/* returns OK or error found */

	return (ret_val);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             xid_decode  - implements the decoding of an XID frame
							   information field according to the internal data 
							   structures and the meta-program           

Usage            xid_decode (uchar FAR *p_pc, uchar FAR *p_xid, 
							 ushort data_lgth, uchar *p_nb_id);
					- p_pc		: program counter pointer.
					- p_xid		: information field data pointer 
					- data_lgth	: data length
					- P_nb_id	: address of the number of identifiers found
								  or P_NIL

Return value 		=	OK
						NOK

Common constants and declarations : xid_int.h

Common objects	: 

*--------------------------------------------------------------------------*/

uchar xid_decode (p_xid, data_lgth, p_pc, p_nb_id)
				uchar FAR 	*p_xid;		/* XID information field pointer */
				ushort 		data_lgth;	/* data length */
	register	uchar 		*p_pc;		/* program counter pointer */
				uchar		*p_nb_id;	/* address of the number of identifiers found */
{
	uchar FAR	*p_start_xid;			/* start of data pointer		 		*/
	uchar FAR	*p_end_xid;				/* end of data pointer		 			*/
	uchar FAR	*p_bitfield;			/* bitfield address	in frame			*/
	uchar       inst_lgth;				/* current instruction length			*/
	uchar		decoding;				/* CONTINUE or STOP decoding  			*/
	uchar		skip_group;				/* group not found : skip its parameters*/
	uchar		bitfield;				/* bitfield parameter found or not  	*/
	uchar		position;				/* position of a bitfield value 		*/
	uchar		n_octet;				/* offset in the bitfield				*/
	uchar		fi;						/* Format Identifier value 				*/
	uchar 		pl;						/* Parameter Length value 				*/
	ushort		n_found;				/* number of parameters found			*/
	ushort		gl;						/* Group Length value 					*/
	uchar 		ret_val; 				/* encoding function return value 		*/
/*
		 Execute the meta-program until XID_END instruction
		 or until end of data reached
*/
	p_start_xid		= p_xid;
	p_end_xid		= p_xid + data_lgth;
	decoding		= CONTINUE;
	skip_group 		= OFF;
	n_found			= 0;

	while (decoding == CONTINUE ) {

		switch (Inst_code) {

				/* XID_START	:  */

			case INST_XID_START :
				inst_lgth = XID_START_LGTH;

					/* Check Format Identifier */

				fi = Get_xid_octet;

				if (fi != Xid_start_fi) {
					ret_val		= NOK;
					decoding 	= STOP;
					break;
				}

				p_end_group = p_xid;
				break;

				/* XID_GROUP	: check Group identifier */

			case INST_XID_GROUP :
				inst_lgth = XID_GROUP_LGTH;

				Set_p_xid (p_end_group);

					/* test if group is present in the frame */

				*Xid_group_p_flag = xid_test_gi (p_start_xid, data_lgth, fi, Xid_group_gi);

				if (*Xid_group_p_flag == ABSENT) {
					skip_group = ON;

				} else {					/* group PRESENT */

					skip_group = OFF;
					Inc_p_xid (1);

						/* Get Group Length */

					Extract_short (2, gl, Get_xid_octet);
					p_start_group 	= p_xid;
					p_end_group 	= p_xid + gl;
					n_found++;
				}
				break;

					/* XID_GROUP_VAL : Group without parameters */

			case INST_XID_GROUP_VAL :
				inst_lgth = XID_GROUP_VAL_LGTH;

				if (skip_group == ON) {
					break;
				}

					/* Transfer Group Length */

				Extract_short (2, gl, Get_xid_octet);
				*Xid_group_val_p_gl = gl;

					/* Transfer Group Value */

				Memcpy_far ((char FAR *)Xid_group_val_p_val,
							(char FAR *)p_xid,
							gl);
				Inc_p_xid (gl);
				break;

				/* XID_CHAR : transfer the value */

			case INST_XID_CHAR :

				inst_lgth = XID_CHAR_LGTH;

				if (skip_group == ON) {
					break;
				}

				Set_p_xid (search_parameter (Xid_char_pi, Xid_char_p_flag));

				if (*Xid_char_p_flag == PRESENT) {
					n_found++;
					pl = Get_xid_octet;

					if ((p_xid + pl) > p_end_xid) {
						ret_val		= NOK;
						decoding	= STOP;
						break;
					}

					if (pl > CHAR_STORAGE) {
						Inc_p_xid (pl - CHAR_STORAGE);
					}

					*Xid_char_p_val = Get_xid_octet;
				}
				break;


				/* XID_SHORT : transfer the value */

			case INST_XID_SHORT :
				inst_lgth = XID_SHORT_LGTH;

				if (skip_group == ON) {
					break;
				}

				Set_p_xid (search_parameter (Xid_short_pi, Xid_short_p_flag));

				if (*Xid_short_p_flag == PRESENT) {
					n_found++;
					pl = Get_xid_octet;

					if ((p_xid + pl) > p_end_xid) {
						ret_val		= NOK;
						decoding	= STOP;
						break;
					}

					if (pl > SHORT_STORAGE) {
						Inc_p_xid (pl - SHORT_STORAGE);
					}

					Extract_short (pl, *Xid_short_p_val, Get_xid_octet);
				}
				break;

				/* XID_LONG : transfer the value */

			case INST_XID_LONG :
				inst_lgth = XID_LONG_LGTH;

				if (skip_group == ON) {
					break;
				}

				Set_p_xid (search_parameter (Xid_long_pi, Xid_long_p_flag));

				if (*Xid_long_p_flag == PRESENT) {
					n_found++;
					pl = Get_xid_octet;

					if ((p_xid + pl) > p_end_xid) {
						ret_val		= NOK;
						decoding	= STOP;
						break;
					}

					if (pl > LONG_STORAGE) {
						Inc_p_xid (pl - LONG_STORAGE);
					}

					Extract_long (pl, *Xid_long_p_val, Get_xid_octet);
				}
				break;

				/* STRING : transfer the text */

			case INST_XID_STRING :
				inst_lgth = XID_STRING_LGTH;

				if (skip_group == ON) {
					break;
				}

				Set_p_xid (search_parameter (Xid_string_pi, Xid_string_p_flag));

				if (*Xid_string_p_flag == PRESENT) {
					n_found++;
					pl = Get_xid_octet;

					if ((p_xid + pl) > p_end_xid) {
						ret_val		= NOK;
						decoding	= STOP;
						break;
					}

					Memcpy_far ((char FAR *)Xid_string_p_val,
								(char FAR *)p_xid,
								pl);
					*(Xid_string_p_val + pl) = 0;
				}
				break;

				/* BINARY : transfer n octets */

			case INST_XID_VECTOR :
				inst_lgth = XID_VECTOR_LGTH;

				if (skip_group == ON) {
					break;
				}

				Set_p_xid (search_parameter (Xid_vector_pi, Xid_vector_p_flag));

				if (*Xid_vector_p_flag == PRESENT) {
					n_found++;
					pl = Get_xid_octet;

					if ((p_xid + pl) > p_end_xid) {
						ret_val		= NOK;
						decoding 	= STOP;
						break;
					}

					Memcpy_far ((char FAR *)Xid_vector_p_val,
								(char FAR *)p_xid,
								pl);
				}
				break;

				/* BF_START : bit field parameter */

			case INST_XID_BITFIELD :
				inst_lgth = XID_BITFIELD_LGTH;

				if (skip_group == ON) {
					break;
				}

				Set_p_xid (search_parameter (Xid_bitfield_pi, &bitfield));

				*Xid_bitfield_p_flag = bitfield;

				if (bitfield == PRESENT) {
					n_found++;
					pl = Get_xid_octet;

					if ((p_xid + pl) > p_end_xid) {
						ret_val		= NOK;
						decoding	= STOP;
						break;
					}

						/* save bitfield Parameter Value address */

					p_bitfield = p_xid;
				}

				Inc_p_xid (pl);
				break;

				/* BF_VAL : transfer bit field value */

			case INST_XID_BITFIELD_VAL :
				inst_lgth = XID_BITFIELD_VAL_LGTH;

				if ((skip_group == ON) || (bitfield == ABSENT)) {
					break;
				}

				n_octet		= (int)(Xid_bitfield_val_position - 1) / OCTET_SIZE;
				position	= (int)(Xid_bitfield_val_position - 1) % OCTET_SIZE;

				*Xid_bitfield_val_p_val = Get_xid_field((p_bitfield + n_octet), position, Xid_bitfield_val_mask);
				break;

				/* XID_END : stop the decoding */

			case INST_XID_END :
				ret_val		= OK;
				decoding	= STOP;
				break;

			default :
				Trap (TRAP_XID_META_PROGRAM, "xid_decode");
		}

			/* Next instruction */

		p_pc += Round (inst_lgth);
	}

		/* Return number of identifiers found */

	if (p_nb_id != P_NIL) {

		if (ret_val == NOK) {
			*p_nb_id = 0;

		} else {

			*p_nb_id = n_found;
		}

	}

		/* Return OK or error found */

	return (ret_val);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             xid_test_gi  - implements the test of a given Group Identifier
								in an XID frame information field


Usage            xid_decode (uchar gi, uchar FAR *p_pc, uchar FAR *p_xid, uint data_lgth);
					- gi			: group identifier to test
					- p_pc			: program counter pointer.
					- p_xid			: information field data pointer
					- data_lgth		: data length

Return value :  ABSENT or PRESENT

Common constants and declarations : xid_int.h

Common objects	: internal data structure

*--------------------------------------------------------------------------*/

uchar xid_test_gi (p_xid, data_lgth, fi, gi)
	uchar FAR 	*p_xid;		/* XID information field pointer */
	ushort 		data_lgth;	/* data length */
	uchar		fi;			/* format identifier */
	uchar		gi;			/* group identifier */
{
	uchar FAR	*p_end_xid;	/* end of data pointer */
	ushort		gl;			/* Group Length */

	p_end_xid	= p_xid + data_lgth;

		/* Test Format Identifier */

	if (Get_xid_octet != fi) {
		return (ABSENT);
	}

	while (p_xid <= p_end_xid) {

		/* Test Group Identifier */

		if (Get_xid_octet == gi) {
			return (PRESENT);

		} else {

				/* Skip to next group */

			Extract_short (2, gl, Get_xid_octet);
			Inc_p_xid (gl);
		}

	}

		/* Group Identifier not found */

	return (ABSENT);

}

/*------------------------------------------------------------------------*/

			/* Short and long Parameter values	*/
			/* Minimum storage size calculation */

uchar calculate_short_storage(val)
	ushort val;				/* value to store */
{
		/* Test if value holds in 1 octet */

	if (Get_bits (val, OCTET_SIZE, OCTET_SIZE) == 0) {
		return (CHAR_STORAGE);

	} else {

		return (SHORT_STORAGE);
	}

}

/*------------------------------------------------------------------------*/

uchar calculate_long_storage(val)
	ulong val;					/* value to store */
{
	uchar length;				/* length */
	uchar mask;					/* mask */
	uchar position;				/* position */

	length = LONG_STORAGE; mask = OCTET_SIZE;

	for (position = OCTET_SIZE * 3; (length > 0) && (Get_bits(val, position, mask) == 0); position-=OCTET_SIZE) {
		length--;
	}

	return (length);
}

/*------------------------------------------------------------------------*/

			/* Search for a parameter in a group */

uchar FAR *search_parameter (pi, p_flag)
	uchar 					pi;			/* parameter identifier */
	uchar 					*p_flag;	/* search result flag */
{
	uchar FAR				*p_pi;		/* current parameter identifier pointer */

	for (p_pi = p_start_group; p_pi < p_end_group; ) {

			/* Test Parameter Identifier */

		if (*p_pi++ == pi) {

				/* Parameter found : set flag and return address */

			*p_flag = PRESENT;
			return (p_pi);
		}

			/* Skip Parameter value */

		p_pi += *(p_pi++);
	}

		/* parameter Identifier not found */

	*p_flag = ABSENT;
	return (p_pi);
}

#endif

/*------------------------------------------------------------------------*/

/*EOF*/
