
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_relay.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	dl_relay_rcv - implements the receive processing of a message
 *				   sent to DL relay.
 *
 *	dl_relay_snd - implements the send processing of a message
 *				   sent to DL relay.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"
#include "it.h"

#if DL_RELAY == ON

#if DL_SIM_BUILDER  == ON
	extern	uint	dl_ass_tei;
#endif

#if NEW_FCT_STYLE == ON
	void				dl_relay_transmit 		(struct message FAR *p_msg, code_t code);
	void 				dl_relay_snd 			(struct message FAR *p_msg, code_t code);
	void 				dl_relay_queue_in 		(struct message FAR *p_msg, code_t code);
	struct message FAR *dl_relay_queue_out 		(void);
	void 				dl_relay_queue_discard 	(void);

#else

	void				dl_relay_transmit 		();
	void 				dl_relay_snd 			();
	void 				dl_relay_queue_in 		();
	struct message FAR *dl_relay_queue_out 		();
	void 				dl_relay_queue_discard 	();
#endif

/*
*
*
*   ______________________    _____________________
*  |                      |  |                     |
*  |              INT/EXT |  | INT                 |
*  |                     |v--v|                    |
*  |                     |----|                    |
*  |                     |----| DL QUEUE           |
*  |                     |----|                    |
*  |                     |----|                    |
*  |                     |----|                    |
*  |                     |----|                    |
*  |                        |                      |
*  |      __________________|__________________    |
*  |     |                  |                  |   |
*  |     |  DL              |                  |   |
*  |     |                  |                  |   |
*  |     |   _______________v______________    |   |
*  |     |  |                              |   |   |
*  |     |  |                              |   |   |
*  |     |  |  TO        DL_RCV    TO      |   |   |
*  |     |  |                              |   |   |
*  |     |  |  PH                  DL      |   |   |
*  |     |  |__|____________________|______|   |   |
*  |     |     |                    |          |   |
*  |     |     |      ______________|_______   |   |
*  |     |     |     |   ___________v____   |  |   |
*  |     |     |     |  |                |  |  |   |
*  |     |     |     |  | DL_RELAY_RCV   |  |  |   |
*  |     |     |     |  |_______|________|  |  |   |
*  |     |     |     |          |           |  |   |
*  |     |     |     | DL_RELAY | CTX SWITCH|  |   |
*  |     |     |     |   _______|________   |  |   |
*  |     |     |     |  |       v        |  |  |   |
*  |     |     |     |  | DL_RELAY_SEND  |  |  |   |
*  |     |     |     |  |_______|________|  |  |   |
*  |     |     |     |__________|___________|  |   |
*  |     |   __v________________v__________    |   |
*  |     |  |                              |   |   |
*  |     |  |                              |   |   |
*  |     |  |          DL_PROCESS -----------------
*  |     |  |                              |   |
*  |     |  |_______________|______________|   |
*  |     |                  |                  |
*  |     |                  |                  |
*  |     |__________________|__________________|
*  |                        |
*  |                        |
*  |                     |--v-|
*  |                     |----|  PH QUEUE
*  |                     |----|
*  |                     |----|
*  |                     |----|
*  |                     |----|
*  |                     |----|
*  |                        |
*  |                        |
*  |      __________________v__________________
*  |     |                                     |
*  |     |                 PH                  |
*   ----------------------                     |
*        |                                     |
*
*
*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             dl_relay_rcv - implements the receive processing of a message
								sent to DL relay.

Usage            uchar dl_relay_rcv (p_msg);

Related
functions usage

Common constants and declarations : dl.h, dl_comm.h

Common objects	: current context pointers : p_na, p_sap, p_dlcep.

*--------------------------------------------------------------------------*/

void dl_relay_rcv (p_msg)
	struct message FAR *p_msg;	/* message to process */
{

		/*
			The current connection context points
			on the incoming connection.
		*/

		/* Dispatch according to the DL primitive code */

	switch (L_msg_code) {

		/* ------------- DL-ESTABLISHMENT-CONFIRM -------------------*/

		case DL_EST_CO :

				/* Switch according to the Link Connection state */

			switch (R_lc_state) {

					/* Link Connection Awaiting establishment or released. */

				case LC_RELEASED :
				case LC_AWAITING_EST :

					R_lc_state = LC_ESTABLISHED;	/* set state = established */

						/* Transmit the waiting information */

					while ((p_msg = dl_relay_queue_out ()) != P_NIL) {
						dl_relay_transmit (p_msg, L_msg_code);
					}
					break;

						/* Unexpected event */

				case LC_ESTABLISHED :
				case LC_AWAITING_REL :

						/* Discard queue */

					dl_relay_queue_discard ();
					break;

			} /* lc_state */

			break;

		/*----------------- DL-ESTABLISH-INDICATION ---------------*/

		case DL_EST_IN :

				/* Switch according to the Link Connection state */

			switch (R_lc_state) {

					/* Link Connection released */

				case LC_RELEASED :
					R_lc_state = LC_ESTABLISHED;

						/* Loop back ? */

					if (R_p_dlcep != p_dlcep) {

							/* Data Link establishment */

						dl_relay_snd (p_msg, DL_EST_RQ); p_msg = P_NIL;
					}
					break;

					/* Link Connection reinitialized */

				case LC_ESTABLISHED :
					break;

					/*
					   Link Connection awaiting
					   release, or awaiting establish.

					   . collisions.
					*/

				case LC_AWAITING_EST :

						/* Discard queue */

					dl_relay_queue_discard ();
					break;

				case LC_AWAITING_REL :
					break;

			} /* lc_state */

			break;

		/*------------------ DL-RELEASE-INDICATE ---------------------*/

		case DL_REL_IN :

				/* Switch according to the Link Connection state */

			switch (R_lc_state) {

					/*
					   LC awaiting establish or established :
					   ---> data link failure.
					*/

				case LC_AWAITING_EST :

						/* Discard queue */

					dl_relay_queue_discard ();

						/* No 'break;' here: continue with the following code */

				case LC_ESTABLISHED :
					R_lc_state = LC_RELEASED;		/* LC released */

						/* Data Link release after transmitting the queue */

					dl_relay_snd (p_msg, DL_COMMIT_RQ); p_msg = P_NIL;
					break;

					/* Awaiting release or already released */

				case LC_AWAITING_REL :
					break;

			} /* lc_state */

			break;

		/*------------- DL-UNACKNOWLEDGED-DATA-INDICATION ----------------*/

		case DL_U_DA_IN :

				/* Transmit information */

			dl_relay_snd (p_msg, DL_U_DA_RQ); p_msg = P_NIL;
			break;

		/*-------------------- DL-DATA-INDICATION ------------------------*/

		case DL_DA_IN   :

			switch (R_lc_state) {

				case LC_RELEASED :
				case LC_AWAITING_EST :
				case LC_AWAITING_REL :
					dl_relay_queue_in (p_msg, DL_DA_RQ); p_msg = P_NIL;
					break;

				case LC_ESTABLISHED :

						/* Transmit information */

					dl_relay_snd (p_msg, DL_DA_RQ); p_msg = P_NIL;
					break;

			}
			break;


		/*-------------------- DL-RELEASE-CONFIRM --------------------*/

		case DL_REL_CO :

			switch (R_lc_state) {

				case LC_AWAITING_REL :
					R_lc_state = LC_RELEASED;

						/* Discard queue */

					dl_relay_queue_discard ();
					break;

				default :
					break;			/* ignored */

			}

			break;

		/*------------------ DL-COMMITMENT-CONFIRM ----------------*/

		case DL_COMMIT_CO :

			switch (R_lc_state) {

				case LC_RELEASED :
				case LC_AWAITING_EST :

						/* Discard queue */

					dl_relay_queue_discard ();
					break;

				case LC_ESTABLISHED  :
				case LC_AWAITING_REL :

					/* Release the current connection */

				R_lc_state = LC_AWAITING_REL;
				dl_relay_transmit (p_msg, DL_REL_RQ); p_msg = P_NIL;
				break;

			}

			break;

		/*--------------- After waiting queue ------------------------------*/

		default :
			dl_relay_transmit (p_msg, L_msg_code), p_msg = P_NIL;

	}

		/* Free the remaining message and buffer */

	if (p_msg != P_NIL) {
		Free_msg (p_msg);
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             dl_relay_snd - implements the send processing of a message
								sent to DL relay.

Usage            uchar dl_relay_snd (p_msg);

Related
functions usage

Common constants and declarations : dl.h, dl_comm.h

Common objects	: current context pointers : p_na, p_sap, p_dlcep.

*--------------------------------------------------------------------------*/

void dl_relay_snd (p_msg, code)
	struct message FAR *p_msg;	/* message to process */
	code_t				code;	/* primitive code */
{

		/* Switch the DL context */

	p_dlna 		= R_p_dlna;
	p_dlchan	= R_p_dlchan;
	p_dlsap 	= R_p_dlsap;
	p_dlcep 	= R_p_dlcep;

		/* Load cache from SAP context */

	Dl_entity_id = Dl_entity_id_ctx;

	L_msg_code 	= code;
	L_msg_nai   = Nai;
	L_msg_sapi	= Sapi;
	L_msg_ces	= Ces;

		/* Dispatch according to the DL primitive code */

	switch (code) {

		/* ------------- DL-ESTABLISHMENT-REQUEST -------------------*/

		case DL_EST_RQ :

				/* Switch according to the Link Connection state */

			switch (R_lc_state) {

					/* Link Connection released. */

				case LC_RELEASED :
					R_lc_state = LC_AWAITING_EST;
					dl_relay_transmit (p_msg, code); p_msg = P_NIL;
					break;

					/* Reinitialization requested */

				case LC_ESTABLISHED :
					R_lc_state = LC_AWAITING_EST;
					dl_relay_transmit (p_msg, code); p_msg = P_NIL;
					break;

				case LC_AWAITING_EST :
				case LC_AWAITING_REL:
					break;

			} /* lc_state */

			break;


		/*------------------ DL-RELEASE-REQUEST ---------------------*/

		case DL_REL_RQ :

				/* Switch according to the Link Connection state */

			switch (R_lc_state) {

					/*
					   LC awaiting establish or established :
					   ---> data link failure.
					*/

				case LC_ESTABLISHED :
				case LC_AWAITING_EST :
					R_lc_state = LC_AWAITING_REL;
					dl_relay_transmit (p_msg, code); p_msg = P_NIL;
					break;

					/* Awaiting release or already released */

				case LC_AWAITING_REL :
				case LC_RELEASED:
					break;

			} /* lc_state */

			break;

		/*------------- DL-UNACKNOWLEDGED-DATA-REQUEST ----------------*/

		case DL_U_DA_RQ :

				/* Transmit information */

			dl_relay_transmit (p_msg, code); p_msg = P_NIL;
			break;

		/*-------------------- DL-DATA-REQUEST ------------------------*/

		case DL_DA_RQ   :

			switch (R_lc_state) {

				case LC_RELEASED :
				case LC_AWAITING_EST :
				case LC_AWAITING_REL :
					dl_relay_queue_in (p_msg, code); p_msg = P_NIL;
					break;

				case LC_ESTABLISHED :

						/* Transmit information */

					dl_relay_transmit (p_msg, code); p_msg = P_NIL;
					break;
			}

			break;

		/*------------------ DL-COMMITMENT-REQUEST ----------------*/

		case DL_COMMIT_RQ :

			switch (R_lc_state) {

				case LC_RELEASED :
				case LC_AWAITING_EST :
				case LC_AWAITING_REL :
					break;

				case LC_ESTABLISHED :

						/* Transmit the request */

					if (First (QU_I) == P_NIL) {
						Send_to_l3 (DL_COMMIT_CO);

					} else {

							Commit_rq = ON;
					}

					break;

			}

			break;

		/*--------------------------------------------------------*/

		default : /* r_msg_code */

			Trap (TRAP_DL_CODE, "dl_relay");

	} /* switch (code) */


		/* Free the remaining message and buffer */

	if (p_msg != P_NIL) {
		Free_msg (p_msg);
	}

}

/*-------------------------------------------------------------------------*/

void dl_relay_transmit (p_msg, code)
	struct message FAR *p_msg;	/* message to process */
	code_t 				code;	/* primitive code */
{
	ent_id_t			from;	/* FROM entity ID */


	L_msg_code 	= code;

#	if SIMULATION == ON
		from	   = L_msg_from;
		L_msg_to   = ENT_DL;
		L_msg_from = ENT_L3;
		pr_message (p_msg, OFF);
		L_msg_from	= from;
#	endif

		/* Use p_rcv_msg */

	Free_msg (p_rcv_msg);
	p_rcv_msg = p_msg;

		/* PH state ? */

	if (dl_test_na_chan_activation () != STOP) {
		event_id = code;
		dl_process ();
	}

}

/*-------------------------------------------------------------------------*/

void dl_relay_queue_in (p_msg, code)
	struct	message	FAR	*p_msg;	/* message to queue */
	code_t				 code;	/* primitive code */
{

	L_msg_code = code;

		/* Put the p_msg in Relay queue */

	if (R_last == P_NIL) {
		Next (p_msg)	= Prior (p_msg)	= P_NIL;
		R_first 		= R_last 		= p_msg;

	} else {

		Next (p_msg)	= P_NIL;
		Prior (p_msg)	= R_last;
		Next (R_last)	= p_msg;
		R_last 			= p_msg;
	}

}

/*-------------------------------------------------------------------------*/

struct message FAR *dl_relay_queue_out ()
{
	struct	message	FAR	*p_msg;	/* temporary pointer to received message */

		/* First message of the queue */

	if ((p_msg = R_first) != P_NIL ) {

			/* Extract and rebuild the queue */

		if (Next (R_first) == P_NIL) {
			R_first = R_last = P_NIL;

		} else {

			Prior (Next (R_first)) 	= P_NIL;
			R_first 				= Next (p_msg);
		}

	}

	return (p_msg);

}

/*-------------------------------------------------------------------------*/

void dl_relay_queue_discard ()
{
	struct message 	FAR	*p_msg,	FAR *p_old;		/* temporary message pointers */

	for (p_msg = R_first; p_msg != P_NIL; ) {
		p_old		= p_msg;
		p_msg		= Next (p_old);
		Free_msg	(p_old);
	}

	R_first = R_last = P_NIL;
}

#endif

/*EOF*/



