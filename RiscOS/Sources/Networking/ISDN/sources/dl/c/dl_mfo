
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_mfo.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        s_mfo - implements the processing of the events received in
 *                the multi-frame operation mode of a data link connection
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"			/* DL header */
#include "dl_comm.h"	/* DL common context */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            s_mfo - implements the processing of the events received when
						the multi-frame	operation mode of a connection is
						established.

Usage           void s_mfo (void);

Related
functions usage void send_frame					(uchar frame_command, uchar pf);
or macro		void Send_to_l3					(uchar service_code);
				void send_to_mdl_err			(uchar error_code);
				void (Re)Start_timer			(uchar timer_index);
				void Stop_timer					(uchar timer_index);
				void establish_dl				();
				void clear_exception_conditions	();
				void error_recovery				();
				void discard_queue				(uchar queue_index);
				void in_queue					(uchar queue_index);
				void set_next_to_sent			();
				void set_last_to_send			();
				void invoke_retransmission		();
				void set_acknowledged			();
				uchar e_unnumb					();
				uchar e_fr_err					();
				void unexpected_ev				();
				void Inc_v_modulo				(uchar val);
				void Set_state					(uchar state_code);

Description     s_mfo is strictly conformed to the SDL of the CCITT BLUE BOOK
				recommendations Q.921/Annex B SDL.
				When s_mfo is called the common event_id is loaded with the
				received event code and the common pointers p_dlna,	p_dlsap
				and p_dlcep	point on the current NA, SAP, DLCEP of the ad hoc
				connection. If the received event is a frame the common
				structure ru_xxxx contains the received frame in the unpacked
				format.
				If the received event id is a layer 3 service primitive
				the communication message and the optional buffer can be
				accessed using the received message and buffer manipulation
				macro's.

Return value    void

Common constants and declarations : dl_h

Common objects 	dlcep current connection context describes in ns.h
				received unpacked frame : Ru_xxxx

*--------------------------------------------------------------------------*/

  /* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-7 (1 .. 10) */

void s_mfo ()
{

		/* Dispatching according to the received event */

		/* First switch for frequently used events */

	switch (event_id) {

		case QU_FR_I :

			if (Remote_receiver_state == BUSY) {
				Signal_QU_I;

			} else if (Vs == ((uchar)(Va + K) >= Modulo ? Va + K - Modulo : Va + K)) {
				Signal_QU_I;

			} else {

				get_next_i_queue_entry ();
				send_frame 			(FR_I, P_OFF);
				Inc_v_modulo 		(Vs);
				Remote_ack_pending 	= OFF;

				if ( ! T200_running ()) {
					Stop_timer_t203  ();
					Start_timer_t200 ();
				}

					/* Outstanding I-frames ? */

				if (Next (Sent (QU_I)) != P_NIL) {
					Signal_flag (QU_I) = ON;
				}

			}

			break;

		case FR_RR :
		case FR_REJ:
			Remote_receiver_state = FREE;

			if ((Ru_cr == Cr_rcv_command) && (Ru_p == P_ON)) {
				enquiry_response ();

			} else if ((Ru_cr == Cr_rcv_response) && (Ru_f == F_ON)) {

				Send_to_mdl_err ('A');

#				if DL_LAPB == ON

					if ((Dl_entity_id == ENT_DL_B)

#						if DL_ISDN_BIOS == ON
							&& (Isdn_bios == OFF)
#						endif

					) {
						establish_dl 		();
						Layer_3_initiated 	= OFF;
						Layer_3_rel_rq 		= OFF;  	/* state 5.0 */
						Set_state 			(S_AWAITING_ESTABLISHMENT);
						break;

					}

#				endif

			}

			if ( ! (Valid_nr ()) ) {

#				if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

					if (Dl_entity_id != ENT_DL_B) {
						error_recovery 	();
						Layer_3_rel_rq 	= OFF;
						Set_state 		(S_AWAITING_ESTABLISHMENT);

					} else {

#				endif
						invalid_nr ();

#				if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
					}
#				endif

			} else {

				if (event_id == FR_REJ) {
					set_acknowledged 	  ();
					Stop_timer_t200  	  ();
					Start_timer_t203 	  ();
					invoke_retransmission ();

				} else {

					if (Ru_nr == Vs) {
						set_acknowledged 	();
						Stop_timer_t200	 	();
						Restart_timer_t203 	();

					} else {

						if (Ru_nr != Va) {
							set_acknowledged 	();
							Restart_timer_t200 	();
						}

					}

				}

			}

			break;


		case DL_DA_RQ     :
			in_queue (QU_I);
			Signal_QU_I;
			break;


		case FR_I :

#			if (DL_V120 == ON) || (DL_LAPF == ON)

				if (((Dl_entity_id == ENT_V120)  ||
					 (Dl_entity_id == ENT_DL_F)) &&
					(Ru_cr == Cr_rcv_response)   &&
					(Ru_f == F_ON)) {
					Send_to_mdl_err ('M');
					break;
				}

#			endif

			if (Own_receiver_state == BUSY) {
				Discarded_i_frame_state = ON;

				if (Ru_p == P_ON) {
					send_frame 			(FR_RNR_RESPONSE, F_ON);
					Remote_ack_pending 	= OFF;
				}

			} else {

				if (Ru_ns == Vr) {

					Inc_v_modulo 		(Vr);
					Reject_exception 	= OFF;
					Send_to_l3 			(DL_DA_IN);

					if (Ru_p == P_ON) {
						send_frame 			(FR_RR_RESPONSE, Ru_p);
						Remote_ack_pending 	= OFF;

					} else {	/* Ru_p = P_OFF */

						if (Remote_ack_pending == OFF) {
							Signal_WAIT_ACK;
							Remote_ack_pending = ON;
						}

					}	/* end if Ru_p ... else ... */

				} else {	/* if Ru_nr .... */

						/* Discard information ---> futur garbage */

					if (Reject_exception == OFF) {
						Reject_exception	= ON;
						send_frame 			(FR_REJ_RESPONSE, Ru_p);
						Remote_ack_pending	= OFF;

					} else {	/* if Reject_exception .... */

						if (Ru_p == P_ON) {
							send_frame 			(FR_RR_RESPONSE, Ru_p);
							Remote_ack_pending 	= OFF;
						}

					}	/* end if Reject_exception .... else .... */

				}	/* end if Ru_nr ... else ....*/

			}	/* end if Own_receiver ... else ... */

			if ( ! (Valid_nr ()) ) {

#				if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

					if (Dl_entity_id != ENT_DL_B) {
						error_recovery 	();
						Layer_3_rel_rq 	= OFF;
						Set_state 		(S_AWAITING_ESTABLISHMENT);

					} else {

#				endif

					invalid_nr ();

#				if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
					}
#				endif

			} else {

				if (Remote_receiver_state == BUSY) {
					set_acknowledged ();

				} else {

					if (Ru_nr == Vs) {
						set_acknowledged 	();
						Stop_timer_t200  	();
						Restart_timer_t203 	();

					} else {

						if (Ru_nr != Va) {
							set_acknowledged 	();
							Restart_timer_t200 	();
						}

					}	/* End if Ru_nr == vs .... else .... */

				}	/* End if Remote_receiver_state ... else ... */

			}	/* End if ! Valid_nr ... else ... */

			break;

			/* Second switch for non-frequent events */

		default :

			switch (event_id) {

			case DL_EST_RQ :

#			if DL_MFO_WORKAROUND == ON

				Send_to_l3 			(DL_EST_CO);

#			else

				discard_queue 		(QU_I);
				establish_dl 		();
				Layer_3_initiated 	= ON;
				Layer_3_rel_rq 		= OFF;
				Set_state 			(S_AWAITING_ESTABLISHMENT);

#			endif

				break;


			case DL_REL_RQ :
				discard_queue 		(QU_I);
				Rc = 0;
				send_frame 			(FR_DISC, P_ON);
				Stop_timer_t203 	();
				Restart_timer_t200 	();
				Set_state 			(S_AWAITING_RELEASE);
				break;


			case TI_200 :
				Rc = 0;

					/* IMPLEMENTATION OPTION */

#				if DL_T200_ENQUIRY == ON
					transmit_enquiry ();

#				else

					if (Remote_receiver_state == BUSY) {
						transmit_enquiry ();

					} else {

						get_last_transmitted_i_frame ();

						if (p_rcv_msg != P_NIL) {
							Dec_v_modulo 	(Vs);
							send_frame 		(FR_I, P_ON);
							Inc_v_modulo 	(Vs);
							Remote_ack_pending = OFF;
							Start_timer_t200 ();

						} else {

							Start_timer_t203 ();
							break;
						}

					}

#				endif

				(Rc)++;
				Set_state (S_TIMER_RECOVERY);
				break;


			case TI_203 :
				transmit_enquiry ();
				Rc = 0;
				Set_state (S_TIMER_RECOVERY);
				break;


			case MDL_RM_TEI_RQ :
				Tei 		= DL_TEI_NIL;

#				if (DL_LAP4K == ON) || (DL_LAPF == ON)
					Dlci 	= DL_DLCI_NIL;
#				endif

				dl_init_with_configuration_param ();
				discard_queue 	(QU_I);
				discard_queue 	(QU_UI);
				Send_to_l3 		(DL_REL_IN);
				Stop_timer_t200 ();
				Stop_timer_t203 ();
				Set_state 		(S_TEI_UNASSIGNED);
				break;


			case PH_DEA_IN :
				discard_queue 	(QU_I);
				discard_queue 	(QU_UI);
				Send_to_l3 		(DL_REL_IN);
				Stop_timer_t200 ();
				Stop_timer_t203 ();
				Set_state 		(S_TEI_ASSIGNED);
				break;


			case FR_SABME :
			case FR_SABM :
				send_frame 					(FR_UA, Ru_p);
				clear_exception_conditions 	();
				Send_to_mdl_err 			('F');

				if ((Dl_entity_id == ENT_DL_B) 	||
					(Dl_att_ni != OFF) 			||
					(Vs != Va)) {
					discard_queue (QU_I);

#					if DL_FC == ON
						In_fc_state	= FREE;		/* incoming flow control state */
#					endif

					Send_to_l3 (DL_EST_IN);

				} else {

					Signal_flag (QU_I) = ON;
				}

				Vs = Va = Vr = 0;
				Stop_timer_t200	();

#				if DL_FC == ON
					if ((System_state == BUSY) ||	(In_fc_state == BUSY)) {

#				else

					if (System_state == BUSY) {
#				endif

						Own_receiver_state 	= BUSY;
						send_frame 			(FR_RNR_RESPONSE, F_OFF);

					}

					Start_timer_t203 	();

				break;


			case FR_DISC :
				discard_queue 	(QU_I);
				send_frame		(FR_UA, Ru_p);
				Send_to_l3		(DL_REL_IN);
				Stop_timer_t200 ();
				Stop_timer_t203 ();
				Set_state		(S_TEI_ASSIGNED);
				break;


			case FR_UA:
				Send_to_mdl_err ('C');

				if (Dl_att_ni != OFF) {
					discard_queue 		(QU_I);
					establish_dl 		();
					Layer_3_initiated 	= OFF;
					Layer_3_rel_rq 		= OFF;
					Set_state 			(S_AWAITING_ESTABLISHMENT);

#				if DL_LAPB == ON

					} else 	if ((Dl_entity_id == ENT_DL_B) &&
								(Dl_teledisket == OFF)) {
						establish_dl 		();
						Layer_3_initiated 	= OFF;
						Layer_3_rel_rq 		= OFF;
						Set_state 			(S_AWAITING_ESTABLISHMENT);

#				endif

				}

				break;


			case FR_DM :

#				if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

					if ((Ru_f == F_ON) && (Dl_entity_id != ENT_DL_B)) {
						Send_to_mdl_err ('B');

						if (Dl_att_ni != OFF) {
							discard_queue 		(QU_I);
							establish_dl 		();
							Layer_3_initiated 	= OFF;
							Layer_3_rel_rq 		= OFF;
							Set_state 			(S_AWAITING_ESTABLISHMENT);
						}

					} else {

#				endif

						Send_to_mdl_err 	('E');
						establish_dl 		();
						Layer_3_initiated 	= OFF;
						Layer_3_rel_rq 		= OFF;
						Set_state 			(S_AWAITING_ESTABLISHMENT);

#				if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
					}
#				endif

				break;


			case DL_BUSY_RQ :

				if (Own_receiver_state != BUSY) {
					Own_receiver_state 	= BUSY;
					send_frame 			(FR_RNR_RESPONSE, F_OFF);
					Remote_ack_pending 	= OFF;
				}

				break;


			case DL_CLEAR_BUSY_RQ :

				if (Own_receiver_state == BUSY) {
					Own_receiver_state = FREE;

					if (Discarded_i_frame_state == OFF) {
						send_frame 				(FR_RR_RESPONSE, F_OFF);

					} else {

						Reject_exception		= ON;
						send_frame 				(FR_REJ_RESPONSE, F_OFF);
						Discarded_i_frame_state = OFF;
					}

					Start_timer_t200 ();
					Remote_ack_pending = OFF;
				}

				break;



			case FR_RNR :
				Remote_receiver_state = BUSY;

				if ((Ru_cr == Cr_rcv_command) && (Ru_p == P_ON)) {

#					if DL_ISDN_BIOS == ON

						if (Isdn_bios == ON) {
							Remote_receiver_state = FREE;
						}

#					endif

					enquiry_response ();

				} else if ((Ru_cr == Cr_rcv_response) && (Ru_p == F_ON)) {

					Send_to_mdl_err ('A');

#					if DL_LAPB == ON

						if (Dl_entity_id == ENT_DL_B) {
							establish_dl 		();
							Layer_3_initiated 	= OFF;
							Layer_3_rel_rq 		= OFF;
							Set_state 			(S_AWAITING_ESTABLISHMENT);
							break;

						}

#					endif

				}

				if (Valid_nr ()) {
					set_acknowledged ();

#					if DL_ISDN_BIOS == ON

						if (Isdn_bios == ON) {

							if (Ru_nr != Vs) {
								Stop_timer_t203  	();
								Restart_timer_t200 	();

							} else {

								Stop_timer_t200  	();
								Restart_timer_t203 	();
							}

						} else {

							Stop_timer_t203  	();
							Restart_timer_t200 	();
						}

#					else

						Stop_timer_t203  	();
						Restart_timer_t200 	();
#					endif

				} else {

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

						if (Dl_entity_id != ENT_DL_B) {
							error_recovery 	();
							Layer_3_rel_rq 	= OFF;
							Set_state 		(S_AWAITING_ESTABLISHMENT);

						} else {

#					endif

							invalid_nr ();

#					if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)
						}
#					endif

				}
				break;


			case FR_FRMR :
				Send_to_mdl_err 	('K');
				establish_dl    	();
				Layer_3_initiated 	= OFF;
				Layer_3_rel_rq 		= OFF;
				Set_state 			(S_AWAITING_ESTABLISHMENT);
				break;


			case WAIT_ACK :

				if (Remote_ack_pending == ON) {
					Remote_ack_pending 	= OFF;
					send_frame 			(FR_RR_RESPONSE, F_OFF);
				}
				break;

#			if (DL_V120 == ON) && (DL_V120_XID_NEGOTIATION == ON) && (DL_XID == ON)
				case FR_XID_COMMAND 	:
				case FR_XID_RESPONSE 	:
				case V120_SETPARM_RQ	:
				case V120_SETPARM_RS	:
				case TI_V120_XID		:

					if (Dl_entity_id == ENT_DL_V120) {
						v120_process_negotiation_events ();
						break;
					}
#			endif

			default :
				if (e_unnumb ()		== STOP) break;
				if (e_fr_err ()		== STOP) break;
				if (xid_process ()	== STOP) break;
				unexpected_ev ();
		}

	}

}

/*EOF*/
