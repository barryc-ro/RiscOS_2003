
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_u_st.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        s_u_establish_awaiting_tei - implements the execution of an event
 *         received in the "establish awaiting TEI" state.
 *
 *        s_u_awaiting_establishment - implements the execution pf an event
 *        received in the "awaiting establishment" state.
 *
 *        s_u_sfo - implements the processing of the events received when
 *        the single-frame operation mode of a connection is
 *        established.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

    /* Compilation options */

#define ENTITY  DL_D    /* LAPD Data Link entity */
#define MODULO  128     /* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"

#if DL_U_FRAME == ON

#if NEW_FCT_STYLE == ON
    void    dl_load_parameter (void);

#else

    void    dl_load_parameter ();
#endif

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name             Establisment of a Unique Frame (SI0 SI1) connection :
                    - s_u_establish_awaiting_tei - implements the execution
                      of an event received in the "establish awaiting TEI"
                      state.
                    - s_u_awaiting_establishment - implements the execution
                      an event received in the "awaiting establishment"
                      state.

Usage            void s_u_establish_awaiting_tei (void)
                 void s_u_awaiting_establishment (void)

Description      The C code is derived from the CCIT RED BOOK SDL.

Return value     void

Common constants and declarations : dl.h

Common objects : dlcep current context (thru access macros)
                 frame and primitives (thru access macros)

*-------------------------------------------------------------------------*/

    /* Execution of the "establish awaiting TEI " state : a */

    /* CCITT RED BOOK recommendations Q.921 */

void s_u_establish_awaiting_tei ()
{
        /* Dispatching according to the received event */

    switch (event_id) {

        case MDL_AS_TEI_RQ :
            dl_load_parameter   ();
            establish_u_dl      ();
            Layer_3_initiated   = ON;
            Set_state           (S_U_AWAITING_ESTABLISHMENT);
            break;

        case MDL_ERR_RS :
        case PH_DEA_IN :
            discard_queue       (QU_UI);
            U_frame_flag        = OFF;
            Send_to_l3          (DL_REL_IN);
            Set_state           (S_TEI_UNASSIGNED);
            break;

        default :
            if (e_unnumb ()     == STOP) break;
            u_unexpected_ev ();
            break;
    }

}

/*-------------------------------------------------------------------------*/

    /* Execution of the "awaiting establishment" state : b */

    /* CCITT RED BOOK recommendations Q.921 */

void s_u_awaiting_establishment ()
{
        /* Dispatching according to the received event */

    switch (event_id) {


        case DL_U_EST_RQ :
            discard_queue       (QU_I);
            Layer_3_initiated   = ON;
            break;


        case DL_REL_RQ :
            break;


        case MDL_RM_TEI_RQ :
            Tei                 = DL_TEI_NIL;
            dl_init_with_configuration_param ();
            discard_queue       (QU_I);
            U_frame_flag        = OFF;
            Send_to_l3          (DL_REL_IN);
            Stop_timer_t200     ();
            Set_state           (S_TEI_UNASSIGNED);
            break;


        case PH_DEA_IN :
            discard_queue       (QU_I);
            U_frame_flag        = OFF;
            Send_to_l3          (DL_REL_IN);
            Stop_timer_t200     ();
            Set_state           (S_TEI_ASSIGNED);
            break;

        case FR_SI_RESPONSE :

            if (Ru_f == F_ON) {
                Vs              =
                Va              = Ru_nr;
                Set_state       (S_U_SFO);

                if (Layer_3_initiated == ON) {
                    Send_to_l3  (DL_EST_CO);

                } else {

                    Send_to_l3  (DL_EST_IN);
                }

            }
            break;


        case TI_200 :

            if (Rc == N200) {
                discard_queue   (QU_I);
                Send_to_mdl_err ('G');
                U_frame_flag    = OFF;
                Send_to_l3      (DL_REL_IN);
                Set_state       (S_TEI_ASSIGNED);

            } else {

                (Rc)++;
                send_frame      (FR_SI_COMMAND_EMPTY, P_ON);
                Si_empty_flag   = ON;
                Start_timer_t200();
            }
            break;


        case DL_DA_RQ     :

            if (Layer_3_initiated == OFF) {
                in_queue        (QU_I);
                Signal_QU_I;
            }
            break;


        default :
            if (e_unnumb ()     == STOP) break;
            if (e_fr_err ()     == STOP) break;
            u_unexpected_ev ();
            break;
    }

}

/*--------------------------------------------------------------------------*
                     F U N C T I O N   H E A D E R

Name            s_u_sfo - implements the processing of the events received when
                          the single-frame operation mode of a connection is
                          established.

Usage           void s_u_sfo (void);

Related
functions usage void send_frame                 (uchar frame_command, uchar pf);
or macro        void Send_to_l3                 (uchar service_code);
                void send_to_mdl_err            (uchar error_code);
                void (Re)Start_timer            (uchar timer_index);
                void Stop_timer                 (uchar timer_index);
                void establish_u_dl             ();
                void clear_exception_conditions ();
                void error_recovery             ();
                void discard_queue              (uchar queue_index);
                void in_queue                   (uchar queue_index);
                void set_next_to_sent           ();
                void set_last_to_send           ();
                void invoke_retransmission      ();
                void set_acknowledged           ();
                uchar e_unnumb                  ();
                uchar e_fr_err                  ();
                void unexpected_ev              ();
                void Set_state                  (uchar state_code);

Description     s_u_sfo is strictly conformed to the CCITT RED BOOK recommendations
                Q.921/Annex B SDL.
                When s_s_mfo is called the common event_id is loaded with the
                received event code and the common pointers p_dlna, p_dlsap
                and p_dlcep point on the current NA, SAP, DLCEP of the ad hoc
                connection. If the received event is a frame the common
                structure ru_xxxx contains the received frame in the unpacked
                format.
                If the received event id is a layer 3 service primitive
                the communication message and the optional buffer can be
                accessed using the received message and buffer manipulation
                macro's.

Return value    void

Common constants and declarations : dl_h

Common objects  dlcep current connection context describes in ns.h
                received unpacked frame : Ru_xxxx

*--------------------------------------------------------------------------*/

  /* CCITT RED BOOK recommendations Q.921 */

void s_u_sfo ()
{

        /* Dispatching according to the received event */

        /* First switch for frequently used events */

    switch (event_id) {

        case QU_FR_I :

            if (Vs !=  Va) {
                Signal_QU_I;

            } else {

                get_next_i_queue_entry  ();
                send_frame              (FR_SI_COMMAND, P_ON);
                Si_empty_flag           = OFF;
                Remote_ack_pending      = OFF;
                Start_timer_t200        ();
            }

            break;


        case DL_DA_RQ     :
            in_queue (QU_I);
            Signal_QU_I;
            break;

        case FR_SI_COMMAND_EMPTY :

            if ((Ru_ns == 0)   &&
                (Ru_p == P_ON) &&
                (Ru_size_total == Ru_header_size)) {


                send_frame      (FR_SI_RESPONSE, F_ON);
                Remote_ack_pending  = OFF;


            } else {

                u_unexpected_ev ();

            }
            break ;


        case FR_SI_COMMAND :

            if (Ru_ns == Vr) {

                if (Ru_size_total != Ru_header_size) {

                    Vr                  = ~(Vr);
                    Send_to_l3          (DL_DA_IN);

                    if (Ru_p == P_ON) {
                        send_frame      (FR_SI_RESPONSE, F_ON);
                        Remote_ack_pending  = OFF;

                    } else {    /* Ru_p = P_OFF */

                    }   /* end if Ru_p ... else ... */

                } else {

                    send_frame          (FR_SI_RESPONSE, F_ON);
                    Remote_ack_pending  = OFF;
                }

            } else {    /* if Ru_nr .... */

                    /* Discard information, initialization not done */

                send_frame              (FR_SI_RESPONSE, F_ON);
                Remote_ack_pending      = OFF;

            }   /* end if Ru_nr ... else ....*/

            break;


        case FR_SI_RESPONSE :

            if (Ru_nr == (uchar)(~(Vs))) {

                Vs = ~ (Vs);

                if (Ru_f == F_ON) {
                    set_acknowledged    ();
                    Stop_timer_t200     ();
                    Rc                  = 0;

                } else {

                    Stop_timer_t200 ();

                    if (Si_empty_flag == ON) {
                        send_frame      (FR_SI_COMMAND_EMPTY, P_ON);
                        Si_empty_flag   = ON;

                    } else {

                        discard_queue   (QU_I);
                        U_frame_flag    = OFF;
                        Send_to_l3      (DL_REL_IN);
                        Set_state       (S_TEI_ASSIGNED);
                    }

                }

            }
            break;

            /* Second switch for non-frequent events */

        default :

            switch (event_id) {

                case DL_U_EST_RQ :
                    discard_queue       (QU_I);
                    establish_u_dl      ();
                    Layer_3_initiated   = ON;
                    Set_state           (S_U_AWAITING_ESTABLISHMENT);
                    break;


                case DL_REL_RQ :
                    discard_queue       (QU_I);
                    Rc                  = 0;
                    U_frame_flag        = OFF;
                    Send_to_l3          (DL_REL_CO);
                    Set_state           (S_TEI_ASSIGNED);
                    break;


                case TI_200 :

                    if (Rc != N200) {

                        get_last_transmitted_i_frame ();

                        if (p_rcv_msg != P_NIL) {
                            send_frame          (FR_SI_COMMAND, P_ON);
                            Si_empty_flag       = OFF;
                            Remote_ack_pending  = OFF;
                            Start_timer_t200    ();
                            (Rc)++;
                        }

                    } else {

                        Send_to_mdl_err ('I');
                        U_frame_flag    = OFF;
                        discard_queue   (QU_I);
                        Send_to_l3      (DL_REL_IN);
                        Set_state       (S_TEI_ASSIGNED);
                    }

                    break;


                case MDL_RM_TEI_RQ :
                    Tei                 = DL_TEI_NIL;
                    dl_init_with_configuration_param ();
                    discard_queue       (QU_I);
                    discard_queue       (QU_UI);
                    U_frame_flag        = OFF;
                    Send_to_l3          (DL_REL_IN);
                    Stop_timer_t200     ();
                    Set_state           (S_TEI_UNASSIGNED);
                    break;


                case PH_DEA_IN :
                    discard_queue       (QU_I);
                    discard_queue       (QU_UI);
                    U_frame_flag        = OFF;
                    Send_to_l3          (DL_REL_IN);
                    Stop_timer_t200     ();
                    Set_state           (S_TEI_ASSIGNED);
                    break;


                case FR_FRMR :
                    Send_to_mdl_err     ('K');
                    establish_u_dl      ();
                    Layer_3_initiated   = OFF;
                    Set_state           (S_U_AWAITING_ESTABLISHMENT);
                    break;


                default :
                    if (e_unnumb ()     == STOP) break;
                    if (e_fr_err ()     == STOP) break;

                    u_unexpected_ev ();
        }

    }

}

/*-------------------------------------------------------------------------*/

    /* CCITT RED BOOK recommendations Q.921/I.441 */

/*
   Establish Data Link :
    - reset exception conditions,
    - set rc to 0,
    - send frame SI EMPTY with P = 1,
    - restart timer T200,
*/

void establish_u_dl ()
{
    clear_exception_conditions  ();
    Rc                          =
    Vs                          =
    Va                          = 0;
    send_frame                  (FR_SI_COMMAND_EMPTY, P_ON);
    Si_empty_flag               = ON;
    Restart_timer_t200          ();
}

void u_unexpected_ev ()
{

    if ((R_msg_from != L3_entity_id) && (Ru_cr == Cr_rcv_command)) {
        send_frame (FR_SI_RESPONSE, F_OFF);
    }

}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
