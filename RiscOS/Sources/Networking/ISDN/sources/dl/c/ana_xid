
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ana_xid.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         pr_xid - implements the analysing of an XID frame information field.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "xid.h"

#if DL_XID == ON

#if DL_SIM_ANALYSER == ON

#	include "simul.h"

		/* Local variables */

extern uchar FAR	*p_start_group;
extern uchar FAR	*p_end_group;

		/* Local functions declaration */

#	if NEW_FCT_STYLE == ON
		uchar group_with_parameters	(uchar FAR *p_xid, ushort gl);

#	else

		uchar group_with_parameters	();
#	endif


#define Pr_fi     				fprintf (f_out, "\n\nXID FRAME ANALYSIS  : FI = %2d (%#2x)", \
										 fi, \
										 fi)

#define Pr_group     			fprintf (f_out, "\n\n\tGI = %2d (%#2x) GL = %-d", \
										 gi, \
										 gi, \
										 gl)

#define Pr_group_val 			fprintf (f_out, "\n\tGroup without parameters")              

#define Pr_parameter_header		fprintf (f_out, "\n\t\tPI = %2d PL = %2d PV = ", \
										 pi, \
										 pl)

#define Pr_parameter_value   	fprintf (f_out, " %02X", \
										 (Get_xid_octet))

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             pr_xid -	implements the printing of the contents 
							of an XID frame	information field 


Usage            pr_xid (uchar FAR *p_xid, ushort data_lgth);
					- p_xid		: information field data pointer 
					- data_lgth		: data length


Common constants and declarations : xid.h

Common objects	: 

*--------------------------------------------------------------------------*/


void pr_xid (p_xid, data_lgth)
	uchar FAR 	*p_xid;			/* XID information field pointer */
	ushort 		data_lgth;		/* data length */
{
	uchar FAR	*p_end_xid;		/* end of data pointer			 		*/
	uchar		printing;		/* CONTINUE or STOP printing  			*/
	uchar		fi;				/* Format Identifier value 				*/
	uchar		pi;				/* Parameter Identifier Value			*/
	uchar 		pl;				/* Parameter Length value 				*/				
	ushort		gl;				/* Group Length value 					*/
	uchar		gi;				/* Group Identifier Value				*/
	uchar		i;				/* local counter						*/

/* 	Print contents of XID information field until end of data reached */

	if (print_flag == ON) {
		p_end_xid	= p_xid + data_lgth;
		printing	= CONTINUE;

			/* print Format Identifier */

		fi = Get_xid_octet;
		Pr_fi;

		while (printing == CONTINUE) {

				/* print Group Identifier and Length */

			gi = Get_xid_octet;
	
			Extract_short (2, gl, Get_xid_octet);

			Pr_group;

				/* check group contains parameters */

			if (group_with_parameters (p_xid, gl) == OK) {

				p_end_group = p_xid + gl;

					/* print parameters in a group */

				while (p_xid < p_end_group) {

						/* print Parameter identifier and length */

					pi = Get_xid_octet;
					pl = Get_xid_octet;
					Pr_parameter_header;

					for (i = 0; i < pl; i++) {
						Pr_parameter_value;				
					}

				}

			} else {

				Pr_group_val;
				p_xid += gl;
			}

			if (p_xid >= p_end_xid) {
				printing = STOP;
			}

		}

	}

}

/*------------------------------------------------------------------------------*/

	/* first pass on a group : check if it contains parameters			*/
	/* by calculating its length and comparing it to it given length	*/

uchar group_with_parameters(p_xid, gl)
	uchar FAR 	*p_xid;			/* pointer on start of current group */
	ushort 		gl;				/* group length */
{
	uchar FAR 	*p_end_group;	/* end of group pointer	*/
	ushort 		gl_found;		/* calculated group length */
	uchar 		pl;				/* parameter length */


	gl_found	= 0;
	p_end_group = p_xid + gl;

	while (p_xid < p_end_group) {

			/* skip parameter identifier */

		Inc_p_xid (1);

			/* get parameter length */

		pl = Get_xid_octet;

			/* increment group length */

		gl_found += pl + 2;  

			/* skip parameter value */

		Inc_p_xid (pl);
	}
		/* compare given group length with the one calculated */

	if (gl_found == gl) {
		return (OK);

	} else {

		return (NOK);
	}

}

#endif	/* DL_ANALYSER */

#endif	/* DL_XID */

/*EOF*/
