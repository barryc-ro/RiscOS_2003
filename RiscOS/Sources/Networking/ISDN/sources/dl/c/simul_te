
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - simul_te.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		  build_pdu_asp - TEI management message builder.
 *
 *        build_sdu_ph_d_to_dl_d - implements the simulation of the
 *                                 Assignment Source Point at the PH
 *                                 to DL interface.
 *
 *        simul_tap - implements the simulation of the TEI Assignment
 *                    Procedure.
 *
 *		  build_sdu_mdl_dl_b - implements the building of the MDL_ATTACH_SAPI_RQ
 *                              and MDL_DETACH_SAPI_RQ.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"

#if DL_SIM_BUILDER  == ON
#	include "dl_comm.h"
#	include "simul.h"

			/* Static variables */

static	uint 			v_ri;			/* input reference number */
static	uint 			v_ai;			/* input action indicator */

			/* TEI management simulation */

#define Mg_mt      	Prompt	(" ID : rQ, Ass, Denied, Chk rq, chk rS, Remove, Verify", c, g_mt[0]);\
					Scan	(1s, g_mt);\
					Echo	(c, g_mt[0])

#if DL_LAP4K == ON

			/* DLCI management simulation */

#	define Mg_mt_lap4k	Prompt	(" ID :rQ, Ok, Nok, Remove", c, g_mt[0]);\
						Scan	(1s, g_mt);\
						Echo	(c, g_mt[0])

#endif

#if (DL_LAP4K == ON) || (DL_LAPF == ON)
	static	uint 	v_dlci;				/* input action indicator */
#endif

			/* Functions protypes */

#if NEW_FCT_STYLE == ON
	void	mg_ri		(void);
	void	mg_ai		(void);
	void	mg_get_dlci	(void);

#else

	void	mg_ri		();
	void	mg_ai		();
	void	mg_get_dlci	();
#endif

/*-------------------------------------------------------------------------*/

void	mg_ri ()
{
		Prompt	("    reference number", 5u, g_ri);
		Scan	(u, &v_ri);

		switch (v_ri) {

		case -1 :
			g_ri = ((++g_ri == 128) ? 0 : g_ri);
			g_ri = ((g_ri == DL_TEI_BROADCAST) ? ++g_ri : g_ri);
			break;

		case -2 :
			break;

		default :
			g_ri = v_ri;
			break;
	}

	Echo	(u, g_ri);

}

/*-------------------------------------------------------------------------*/

void	mg_ai ()
{
		Prompt	("             TEI value", 3u, g_ai);
		Scan	(u, &v_ai);

		switch (v_ai) {

		case -1 :
			g_ai++;
			break;

		case -2 :
			break;

		default :
			g_ai = v_ai;
			break;
	}

	Echo	(u, g_ai);

}

/*-------------------------------------------------------------------------*/

#if (DL_LAP4K == ON) || (DL_LAPF == ON)

void	mg_get_dlci ()
{
		Prompt	("           DLCI value", 3u, g_dlci);
		Scan	(u, &v_dlci);

		switch (v_dlci) {

		case -1 :
			g_dlci++;
			break;

		case -2 :
			break;

		default :
			g_dlci = v_dlci;
			break;
	}

	Echo	(u, g_dlci);

}

#endif

/*-------------------------------------------------------------------------*/

ushort build_pdu_asp (p_tap)
	uchar FAR *p_tap;				/* information address */
{

		/* Input the message type */

	Mg_mt;

		/* Message type dispatcher */

	switch (Toupper (g_mt[0])) {

			/* Identity request */

		case 'Q' :
			mg_ri		();
			mg_ai		();
			I_tap_type	= TAP_ID_RQ;
			break;

			/* Identity Assigned */

		case 'A' :
			mg_ri		();
			mg_ai		();
			I_tap_type	= TAP_ID_ASS;
			break;

			/* Identity Denied */

		case 'D' :
			mg_ri		();
			mg_ai		();
			I_tap_type	= TAP_ID_DENIED;
			break;

			/* Identity Check request */

		case 'C' :
			g_ri		= 0;
			mg_ai		();
			I_tap_type	= TAP_ID_CHK_RQ;
			break;

			/* Identity Check response */

		case 'S' :
			mg_ri		();
			mg_ai		();
			I_tap_type	= TAP_ID_CHK_RS;
			break;

			/* Identity Remove */

		case 'R' :
			g_ri		= 0;
			mg_ai		();
			I_tap_type	= TAP_ID_RM;
			break;

		case 'V' :
			g_ri		= 0;
			mg_ai		();
			I_tap_type	= TAP_ID_VERIFY;
			break;

			/* Erroneous frame */

		case 'E' :
			mg_err_code	();
			return (0);

			/* Unknown */

		default :
			return (0);

	}

		/*
		   Load the message information fields according
		   to the tap structure.
		*/

	I_tap_ai_load	(g_ai);			/* action indicator */
	I_tap_ri_load 	(g_ri);			/* reference number */
	I_tap_mei		= TAP_MEI;		/* message type */

		/* Return the information size */

	return (I_tap_size);

}

/*------------------------------------------------------------------------*/

#if DL_LAP4K == ON

ushort build_pdu_asp_lap4k (p_tap_lap4k)
	uchar FAR *p_tap_lap4k;				/* information address */
{

		/* Input the message type */

	Mg_mt_lap4k;

		/* Message type dispatcher */

	switch (Toupper (g_mt[0])) {

			/* Identity request */

		case 'Q' :
			mg_get_dlci			();
			I_tap_lap4k_type	= TAP_LAP4K_ID_RQ;
			break;

			/* Identity Accepted */

		case 'O' :
			mg_get_dlci			();
			I_tap_lap4k_type	= TAP_LAP4K_ID_RQ_OK;
			break;

			/* Identity Denied */

		case 'N' :
			mg_get_dlci			();
			I_tap_lap4k_type	= TAP_LAP4K_ID_RQ_NOK;
			break;

			/* Identity Remove */

		case 'R' :
			mg_get_dlci			();
			I_tap_lap4k_type	= TAP_LAP4K_ID_RM;
			break;

			/* Erroneous frame */

		case 'E' :
			mg_err_code	();
			return (0);

			/* Unknown */

		default :
			return (0);

	}

		/*
		   Load the message information fields according
		   to the tap structure.
		*/

	I_tap_lap4k_dlci_load	(g_dlci);			/* action indicator */
	I_tap_lap4k_mei			= TAP_LAP4K_MEI;		/* message type */

		/* Return the information size */

	return (I_tap_lap4k_size);

}

#endif

/*------------------------------------------------------------------------*/

uchar build_sdu_ph_d_to_dl_d ()
{
	mg_nai ();

		/* Prepare the buffer and frame context */

	Buffer_alloc;

	S_msg_init_link_buffer;				/* link the buffer */

	p_snd_frame	= (union frame FAR *)Buffer_a_start_data;

		/* Build the ASP message */

	if ((Buffer_data_size = build_pdu_asp ((uchar FAR *)p_snd_frame  + S_u_size)) == 0) {
		return (NOK);
	}

		/* Adjust the data size in the buffer management */

	Buffer_data_size		+= S_u_size;

		/* Load the frame header */

#	if EQUIPMENT == TE
		S_address_load (DL_SAPI_MDL, DL_TEI_BROADCAST, DTE_CR_RCV_COMMAND);

#	else

		S_address_load (DL_SAPI_MDL, DL_TEI_BROADCAST, DCE_CR_RCV_COMMAND);
#	endif

	S_u_load (UI, P_OFF);

		/* Load the communication message */

	S_msg_code	= PH_DA_IN;				/* primitive code = PH  DAta indication */
	S_msg_from	= ENT_PH_D;				/* from PHysical entity */
	S_msg_to	= ENT_DL_D;				/* to LAPD entity */
	S_msg_nai	= g_nai;				/* network access ID */
	S_msg_chani = PH_CHANI_D;			/* from channel D */
	S_msg_sapi	= PH_SAPI_D;			/* SAPI D channel */

		/* Return OK */

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             simul_tap - implements the TEI assignment procedure,
				 when the DL_D entity receive a request.

Usage            void simul_tap ();


Description     simul_tap implements the idisplay of a requested tei
				and the input from the PC keyboard of an assign TEI,
				and the generation of the response frame as if it has
				been coming from the network.

Return value    a return code : = OK if request function is "tei request"
								= NOK  if not "tei request"

Common constants and declarations : services.h, dl.h

Common objects 	none

*--------------------------------------------------------------------------*/

#define Mg_tei	Prompt	("\n assignment of a TEI", 3d, I_tap_ai);\
				Scan	(d, &tei_v);\
				Echo	(d, tei_v)

uchar simul_tap ()
{
	struct	tap FAR	*p_tap;			/* pointer on the information field */
	int		tei_v = 0;				/* TEI */

	if (p_buffer != P_NIL) {
		p_tap = (struct tap FAR *)Buffer_a_start_data;		/* init pointer on the information field */

	} else {

		p_tap = (struct tap FAR *)R_msg_a_start_data;
	}

		/*
		   The received buffer already contains a TEI identity
		   request message. If not error.
		*/

	if (I_tap_type != TAP_ID_RQ) {

			/* return not OK */

		return (NOK);

	} else {

			/* OK - identity request */

		Mg_tei;											/* input TEI number */

			/* change the TEI message information fields */

		I_tap_type			= TAP_ID_ASS;				/* message type */
		I_tap_ai_load		(tei_v);					/* TEI as action indicator */

			/* update the buffer management fields */

		if (p_buffer != P_NIL) {
			Buffer_data_offset	-= S_u_size;			/* data offset */
			Buffer_data_size	+= S_u_size;			/* data size */

				/* load the frame header */

			p_snd_frame = (union frame FAR *)Buffer_a_start_data;	/* frame address */

		} else {

			R_msg_data_offset	-= S_u_size;			/* data offset */
			R_msg_data_size		+= S_u_size;			/* data size */

				/* load the frame header */

			p_snd_frame = (union frame FAR *)R_msg_a_start_data;	/* frame address */
		}

		S_address_load (DL_SAPI_MDL, DL_TEI_BROADCAST, DTE_CR_RCV_COMMAND);

		S_u_load (UI, P_OFF);

			/* change the communication message */

		R_msg_code			= PH_DA_IN;         		/* primitive code */
		R_msg_from			= ENT_PH_D;					/* origination entity */
		R_msg_to			= ENT_DL_D;					/* destination entity */

			/* return OK */

		return (OK);
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			build_sdu_mdl_to_dl_b - implements the building of the
				MDL_ATTACH_SAPI_RQ and MDL_DETACH_SAPI_RQ messages coming from
				the MDL and sent to the DL_B entity.

Usage           void build_sdu_mgt_sapi (void);

Common constants and declarations : dl;h

Common objects : message context.

*--------------------------------------------------------------------------*/

uchar build_sdu_mdl_to_dl_b ()
{
	uchar	FAR	*p_data;
	char		g_role[2];
	uint		g_channel = 0;

#	if DL_MLP == ON
		uint	i;
#	endif

	g_role[0] = ' ';

	mg_nai	();
	mg_sapi ();
	mg_ces	();

	mg_code	();

#	if DL_MLP == ON

		if (g_sapi < DL_SAPI_MLP) {
			Prompt	("              channel Id", d, g_channel);
			Scan	(d, &g_channel);
			Echo	(d, g_channel);
		}

#	else

		Prompt	("              channel Id", d, g_channel);
		Scan	(d, &g_channel);
		Echo	(d, g_channel);

#	endif

	Prompt	("      DTE (T) or DCE (C)", c, g_role[0]);
	Scan	(1s, g_role);
	Echo	(c, g_role[0]);

	p_data 	= S_msg_a_start_data;

#	if DL_MLP == ON

		if (g_sapi < DL_SAPI_MLP) {

			Dl_ass_chani = g_channel;

		} else {

			Dl_ass_chani	= PH_CHANI_NIL;

			for (i = 0; i < DL_MLP_MX_PH_CHANNEL; i++) {
				Prompt	("              channel Id", d, g_channel);
				Scan	(d, &g_channel);
				Echo	(d, g_channel);

				Dl_ass_mlp_ph_nai 	(i) = g_nai;
				Dl_ass_mlp_ph_sapi 	(i) = PH_SAPI_NIL;
				Dl_ass_mlp_ph_chani (i) = g_channel;
			}


		}

#	else

		Dl_ass_chani = g_channel;

#	endif

	Dl_ass_sapi		= g_sapi;
	Dl_ass_ces		= g_ces;
	Dl_ass_role		= g_role[0];
	Dl_ass_lli		= 0;
	S_msg_data_size	= DL_ASS_SIZE;

	S_msg_from		= ENT_MDL;
	S_msg_to		= ENT_DL_B;
	S_msg_nai		= g_nai;
	S_msg_sapi		= DL_SAPI_MDL;
	S_msg_ces		= DL_CES_NIL;

	S_msg_code		= g_code[0];

	return (OK);

}

/*--------------------------------------------------------------------------*/

#endif /* DL_SIM_BUILDER  */

/*EOF*/
