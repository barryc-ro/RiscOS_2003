
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mdl_user.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		   mdl_from_dl_user - implements the processing of an event
 *		   coming from a DL entity used as a user side DL protocol or
 *         from a timer expiry.
 *
 *		   mdl_from_mc_user - implements the processing of a received
 *		   primitive coming from the Management Connection (MC) pseudo entity.
 *
 *		   id_tei_rq, id_tei_rs, id_tei_ti - implements the user side of
 *		   the TEI assignment procedure.
 *
 *		   id_verify_rq - implements the Building and sending of an
 *		   Identity verify message.
 *
 *		   id_verify_ti - implements the processing of the timer expiry
 *		   after an ID verify request.
 *
 *	       id_chk_in - implements the processing of an Identity check
 * 		   indication (ID check request message received by a terminal).
 *
 *		   mdl_user_send_sm_dlci - implements the buildinf and sending
 *		   of a SM_DL_DLCI_IN message to SM.
 *
 *		   mdl_assign_non_automatic_tei -implements the assignment of a
 *		   non-automatic TEI on receive of a SM_DL_TEI_RQ message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* Compilation options */

#define ENTITY 			MDL		/* layer Management Data Link entity */
#define MODULO 			128		/* MODULO 128 */

#include "dl.h"
#include "ctx_ext.h"

		/* Access to the MDL objects */

extern	struct	mdlcep 		FAR	*p_mdlcep;		/* pointer to the curent Connection Endpoint object */
extern	struct	mdlna 		FAR	*p_mdlna;		/* pointer to the current Network Access object */
extern	struct 	mdlsap 		FAR	*p_mdlsap;		/* pointer to the Service Access Point object */

		/* Common data */

extern	struct 	tap 			FAR *p_tap;  	/* pointer to the TAP message */
extern	ushort					tei;			/* current TEI value */
extern	ces_t					ces;			/* current ces value */
extern	struct xid_param 		xid_param;      /* Xid parameter data structure */

#if (DL_LAP4K  == ON) || (DL_LAPF == ON)
	extern	uchar				vc_id;			/* Virtual Channel ID */
	extern	ushort				first_mdlces;	/* position of the first mdlces structure */
#endif

						/*----------------*
						 *                *
						 *      TE        *
						 *                *
						 *----------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mdl_from_dl_user - implements the processing of an event
				coming from a DL entity used as a user side DL protocol
				or a timer expiry.

Usage           void 	mdl_from_dl_user ();

Related
functions usage :
				void 	send_dl			(uchar prim_code, sapi_t sapi, uchar ces, uchar info);
				void 	send_dl_data	(uchar prim_code);
				void 	in_queue_tap	();
				void 	out_queue_tap	();
				void 	start_timer		(uchar x_timer);
				void 	stop_timer		(uchar x_timer);
				void 	set_state		(uchar state_code);
				void 	Free_msg		(struct message *p_msg);
				void 	id_tei_rq		(void);
				uchar 	id_tei_rm		(uchar tei_p);
				void 	mc_user			(void);

*--------------------------------------------------------------------------*/

void mdl_from_dl_user ()
{
	uchar		 error_code;		/* error code */
	uchar	FAR *p_data;			/* data pointer */

#	if DL_LAPD == ON
		uchar	 i;					/* loop index */
#	endif

		/* Dispatch according to the incoming event */

		/* ces = CES */

	switch (event_id) {

#	if DL_LAPD == ON /* { */

			/*---------- MDL ASSIGN INDICATION : NAI, SAPI, CES -----------*/

		case MDL_AS_TEI_IN :

				/*
				   Terminal Endpoint Identity (TEI) requested
				   by a Data Link Connection  End Point of
				   DL_D entity (NAI, SAPI, CES).
				*/

				/*   TEI non-automatic or already assigned ? */

			if (Tap_tei != DL_TEI_NIL) {

					/* Build and send the MDL ASSIGN REQUEST to DL */

				mdl_build_assign_from_current_and_send (Tap_tei, Sapi, ces);

			} else if (State == TAP_AWAITING_RS) {

					/*
					   Only one request is processed at a time for a CES.
					   If a request is already on, put the incoming request
					   in queue.
					*/

				mdl_in_queue (QU_TAP);
				p_rcv_msg = P_NIL;

			} else if (Tap_tei_non_automatic == DL_TEI_NIL) {

					/*
						Automatic assignment :
							request TEI ID and set parameters.
					*/

				Rc = 0;								/* reset retry count */
				id_tei_rq (R_msg_sapi, ces);

			} else {

					/* Non-automatic assignment --> Rejected */

					/* Error reporting */

				Mdl_error_report ('h');

					/* Report to DL_D */

				mdl_send_dl (MDL_ERR_RS, R_msg_sapi, ces, 'A');

			}

			break;


					/*   ---- Reception of a UI frame ---- */
					/*
						- SAPI = DL_SAPI_MDL,
						- CES  = DL_CES_BROADCAST.
					*/

		case MDL_U_DA_IN :								/* UI frame */

				/*
				   Check the received TAP message and
				   load global tei variable.

				   If invalid, ignore the message.
				*/

			if (mdl_tap_chk () == NOK) {
				break;
			}

				/*
					tei = current TEI of the received message.
					switch according to the Message type.
				*/

			switch (I_tap_type)  {

					/* ++++ IDentity assigned ++++ */

				case TAP_ID_ASS :
					id_tei_rs ();						/* process ID TEI response */
					break;

					/* ++++ IDentity denied ++++ */

				case TAP_ID_DENIED :					/* ID denied */

						/* Search for the RI matching CES */

					for (i = 0; i < Tei_nb; i++) {

						ces = i;

						if ((ces != DL_CES_BROADCAST) && (Rq_ri != RI_NIL) &&
							(Rq_ri == (ulong)I_tap_ri)) {
							break;
						}

					}

					if (i != Tei_nb) {

							/* Request a new TEI's if necessary */

						mdl_tei_time_assign (DL_TEI_TIME_TEI_DENIED);
					}
					break;

					/* ++++ IDentity check request ++++ */

				case TAP_ID_CHK_RQ :
					id_chk_in ();
					break;

					/* ++++ IDentity  remove ++++ */

				case TAP_ID_RM :						/* ID removed */

						/* TEI removal local action */

					tei_local_rm (tei);

						/*
							If requested in the configuration make
							a new assignment of the TEI's.
						*/

					mdl_tei_time_assign (DL_TEI_TIME_TEI_REMOVAL);
					break;

					/* ++++ Unknown message type --> ignore the message ++++ */

				default:
					Mdl_error_report ('d');
					break;

			}	/* End switch on message type */
			break;

			/* ------------------ XID frame ---------------- */

		case MDL_XID_IN :
		case MDL_XID_CO :
			mc_user ();
			break;

#	endif /* LAPD } */

			/* ------------ Data link error report ------------ */

		case MDL_ERR_IN :
			p_data 		= R_a_data;			/* data pointer */

			if (Mdl_error_report_type == REPORT_TYPE_ERROR) {
				error_code 	= Mdl_error_cause;	/* error code */

					/* Update the error counters */

				++Err_count;
				error_code = (error_code < 'A' ? 'A': error_code);
				error_code = (error_code > 'Z' ? 'Z': error_code);
				++Dl_err_type (error_code - 'A');

				if (Mdl_att_ni != OFF) {

					if ((error_code == 'C') ||
						(error_code == 'B') ||
						(error_code == 'D') ||
						(error_code == 'E')) {
							mc_user ();
					}

				} else {

#					if DL_LAPD == ON /* { */

						if (Dl_entity_id == ENT_DL_D) {

							mc_user ();

#							if MC_TEST_PROCEDURE != ON

									/*
										Multiple assignment of a TEI detected
										or unsucessful retransmission ?
									*/

								if ((error_code == 'C') ||
									(error_code == 'D')

#									if DL_REMOVE_TEI_ON_RETRY == ON

										|| (error_code == 'G')
										|| (error_code == 'H')

#									endif

								) {

#									if DL_ID_VERIFY == ON

											/* TEI Identity verify procedure */

										id_verify_rq (Tap_tei);

#									else
											/* Remove the TEI */

										tei_local_rm (Tap_tei);

											/*
												If requested in the configuration make
												a new assignment of the TEI's.
											*/

										mdl_tei_time_assign (DL_TEI_TIME_TEI_REMOVAL);

#									endif /* DL_ID_VERIFY */

								}

#							endif /* MC_TEST_PROCEDURE */

						}

#					endif /* DL_LAPD == ON } */

				}

			}

#			if DL_EXTRA_ERROR_REPORTING == ON

					/* Error reporting to SM */

				mdl_retransmit (SM_REPORT_IN, ENT_SM);

#			endif

			break;

#		if DL_LAPD == ON

				/* Retry timer has expired */

			case TI_202 :

					/* Is the time-out message valid ? */

				if (Valid_time_out_t202 ()) {

						/* Switch according to the requested action */

					switch (Rq_action) {

							/* Waiting response to an ID request */

						case TAP_ID_RQ :
							id_tei_ti ();
							break;

#						if DL_ID_VERIFY == ON

								/* Waiting response to and ID verify */

							case TAP_ID_VERIFY :
								id_verify_ti ();
								break;

#						endif

						default :
							break;

					} /* end of switch */

				} /* end of valid time-out expiry */

			break;

#			endif


#		if MC_TEST_PROCEDURE == ON || MC_DEFAULT_PARAMETER == OFF

				/* XID retry timer */

			case TI_204 :

					/* Is the time-out message valid ? */

				if (Valid_time_out_t204 ()) {
					mdl_access_ces (Nai, Rq_sapi, ces);
					mc_user ();
				}

				break;

#		endif

			/* ------------- Unknown event ------------- */

		default :
			break;

	}	/* End switch on primitive code */

}

#if DL_LAPD == ON /* { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mdl_from_mc_user - implements the processing of a received
				primitive coming from the Management Connection (MC)
				pseudo entity.

Usage           void mdl_from_mc_user ();
					- event_id : MC primitive code,
					- current connection pointers and ces initialized.
					- xid_param : assign parameters.

Common constants and declarations : dl.h

Common objects : event_id, p_mdlna, p_mdlsap, p_mdlcep, ces, xid_param.

*--------------------------------------------------------------------------*/

void mdl_from_mc_user ()
{

		/* Dispatch according to the incoming event */

	switch (event_id) {

			/* MC parameter error */

		case MC_PARAM_ERROR_IN :

				/*
					MC Parameter confirm : set config parameters
					in the current context and send XID parameter frame.
				*/

			N201_tx = N201_tx_cfg;
			N201_rx = N201_rx_cfg;
			K_tx	= K_tx_cfg;
			T200	= T200_cfg;

		case MC_PARAM_CO :

				/* Build and send the MDL ASSIGN REQUEST to DL */

			mdl_build_assign_from_current_and_send (Tap_tei, Sapi, ces);
			break;

			/* MC Error indication */

		case MC_ERR_IN :

#			if DL_ID_VERIFY == ON

					/* TEI Identity verify procedure */

				id_verify_rq (Tap_tei);
#			else

					/* remove the TEI */

				tei_local_rm (Tap_tei);

#			endif /* DL_ID_VERIFY */

			break;

			/* MC Unkown event ID */

		default :
			break;

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            id_tei_rq, id_tei_rs, id_tei_ti - implements the user side of
				the TEI assignment procedure.

Usage           void id_tei_rq (sapi_t sapi, ces_t ces);
						- sapi	: SAPI,
						- ces	: CES.

				void id_tei_rs ();

				void id_tei_ti (void)

Related
functions usage void start_timer (x_timer);
				void send_dl_data (uchar prim_code);
				int Rand_omnitel ();

Description     id_tei_rq implements the sending of an Identity request to
				the ASP.

				id_tei_rs implements the processing of an Identity assigned
				response from the ASP.

				id_tei_ti implements the processing of the timer T202 expiry.

Common constants and declarations : dl.h

Common objects	: mdlna context, tei = current TEI value,
				  message, buffer and tap contexts.

*--------------------------------------------------------------------------*/

			/* Request TEI identity : build and send the ID REQUEST message */

void id_tei_rq (sapi, ces)
	sapi_t	sapi;		/* sapi */
	ces_t	ces;		/* ces */
{
	int		rand;		/* random integer */

		/*
		   Request for a new TEI identity to the Assignment Source Point
		   (ASP) of the network side.
			Build a message containing :
			 - message type = identity request,
			 - reference number (Ri),
			 - action indicator (Ai).
		*/

		/* Allocate a message or a buffer and init the header */

	mdl_set_p_tap ();

		/* Management Entity ID */
		/* Message type = identity request */

	I_tap_mei	= TAP_MEI;
	I_tap_type	= TAP_ID_RQ;

		/* Allocate and load a random number */

	rand 		= Rand_omnitel ();
	I_tap_ri_load (rand);

		/*
		   Set action indicator :
			- automatic : ASP will assign any TEI available
			- assign the TEI value if available.
		*/

	if (Tap_tei >= DL_TEI_AUTOMATIC_LOW) {
		I_tap_ai_load (TAP_ANY_TEI);

	} else {

		I_tap_ai_load (Tap_tei);
	}

		/*
		   Prepare the reception of the answering message :
			- save the RI to identify the request,
			- save the SAPI , CES  of the requestor for the
			  answer to the DL entity.
			- set the requested action indicator.
		*/

	Rq_sapi		= sapi;			/* SAPI */
	Rq_ri		= I_tap_ri;		/* reference number */
	Rq_action	= TAP_ID_RQ;	/* request action code */

		/*
		   Send the message to the network ASP thru
		   the Data Link entity using a UI frame with :
			- SAPI layer 2 management (DL_SAPI_MDL),
			- broadcast data link connection (DL_TEI_BROADCAST).
		*/

	mdl_send_dl_data (MDL_U_DA_RQ);

		/* Start timer T202 */

	Start_timer_t202 ();

		/* Set NA state : assignement ON */

	State = TAP_AWAITING_RS;
}

/*-------------------------------------------------------------------------*/

			/* Process the response to an ASSIGN ID REQUEST */

void id_tei_rs ()
{
	uchar	i;

		/* Is the identity assigned message valid ? if not ignore */

	if ((tei < DL_TEI_AUTOMATIC_LOW) || (tei > DL_TEI_AUTOMATIC_UP)) {
		Mdl_error_report ('f');
		return;
	}

		/*
		   Received IDentity - check if TEI
		   already assigned, if so, remove
		   the TEI and clear CES-TEI.
		*/

	if (tei_local_rm (tei) == NOK) {

			/* TEI not already assigned ---> continue */

			/* Ri value match ? load the ces variable */

		for (i = 0; i < Tei_nb; i++) {

			ces = i;

			if ((ces != DL_CES_BROADCAST) && (Rq_ri != RI_NIL) &&
				(Rq_ri == (ulong)I_tap_ri)) {
				break;
			}

		}

		if (i != Tei_nb) {

				/*
				   If no outstanding identity request
				   message, do nothing more.
				*/

			if (State == TAP_AWAITING_RS) {

					/*
					   OK - answering message :
							- no more awaiting response,
							- affect the received the TEI.
					*/

				Rq_ri 			= RI_NIL;
				State 			= TAP_FREE;
				Stop_timer_t202 ();

					/* Map CES-TEI */

				Tap_tei = tei;

					/*
					   Prepare to send a DL_TEI_IN to all the ces = i connections
					   of all the LAPD SAP of the NA and send SM_DL_DLCI_IN's to SM
					*/

				for (mdl_access_first_sap (); p_mdlsap != P_NIL; mdl_access_next_sap ()) {

					if (Dl_entity_id == ENT_DL_D) {

							/*
								Parameters request to the Connection Management entity :
									- set the connection pointers,
									- set the event ID.

							*/

						if (mdl_access_ces 	(Nai, Sapi, ces) == OK) {
							event_id = MC_PARAM_RQ;

								/* Connection management processing */

							mc_user ();

								/*
								   Send the TEI assignment information to the
								   System Management entity (SM_DL_DLCI_IN).
								*/

							mdl_user_send_sm_dlci ();
						}

					}

				}

			}

		}

	} else {

		Mdl_error_report ('e');

			/*
				If requested in the configuration make
				a new assignment of the TEI's.
			*/

		mdl_tei_time_assign (DL_TEI_TIME_TEI_REMOVAL);
	}

}

/*-------------------------------------------------------------------------*/

	/* Timer expiry after TEI Identity request */

void id_tei_ti ()
{
		/* Increment and check retry counter Rc */

	if (++Rc == N202) {

			/*
			   equal to maxi ==> it is not possible to assign the requested
			   TEI, send a negative answer to the DL requestor.
			*/

			/* Error reporting */

		Mdl_error_report ('f');

		mdl_send_dl (MDL_ERR_RS, Rq_sapi, ces, 'A');

			/*
				Continue TEI assignment request
				if requested on TEI assignment failure (for NI-2).
			*/

		if (Na_tei_time_assignment & DL_TEI_TIME_ASSIGN_FAILED) {

			Rc = 0;

				/* Request again for a TEI identity */

			id_tei_rq (Rq_sapi, ces);

		} else {

				/* Discard request state */

			State = TAP_FREE;

				/* Discard the TAP awaiting queue */

			mdl_discard_queue (QU_TAP);
		}


	} else {  /* No ===> retry one more time */

			/* Request again for a TEI identity */

		id_tei_rq (Rq_sapi, ces);
	}

}

#	if DL_ID_VERIFY == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			id_verify_rq - implements the Building and sending of an
							   Identity verify message.

				id_verify_ti - implements the processing of the timer expiry
							   after an ID verify request.

Usage           void id_verify_rq (ushort tei);
					- tei = TEI to verify.

					p_mdlna points to the NA object,
					ces is loaded with the CES value.

*--------------------------------------------------------------------------*/

void id_verify_rq (tei_to_verify)
	ushort tei_to_verify;
{

	ces = DL_CES_BROADCAST;

	if (State == TAP_FREE) {

			/*
				Build a message containing :
				 - message type				= Identity remove,
				 - action indicator (Ai) 	= tei_to_verify.
			*/

			/* Message or buffer allocation and header init */

		mdl_set_p_tap ();

			/* Management Entity ID */

		I_tap_mei	= TAP_MEI;

			/* Message type = identity request */

		I_tap_type	= TAP_ID_VERIFY;

			/* Reference number = 0 */

		I_tap_ri_load (0);

			/* Set action indicator : TEI to remove. */

		I_tap_ai_load (tei_to_verify);

			/* Prepare the receiving of the response or the timer expiry */

		Rq_action 	= TAP_ID_VERIFY;
		Rq_ai		= tei_to_verify;

			/*
			   Send the message to the terminal thru
			   the Data Link entity using a UI frame with :
				- SAPI layer 2 management (DL_SAPI_MDL),
				- broadcast data link connection (DL_TEI_BROADCAST).
			*/

		mdl_send_dl_data (MDL_U_DA_RQ);

			/* Start the T202 timer : NA, DL_SAPI_MDL, DL_CES_BROADCAST */

		Start_timer_t202 ();

			/* Set NA state : await a response */

		State = TAP_AWAITING_RS;
	}

}

/*-------------------------------------------------------------------------*/

void id_verify_ti ()
{

		/* If end of retries --> remove the TEI */

	if (++Rc == MX_VERIFY) {
		tei_local_rm (Rq_ai);
		State = TAP_FREE;

	} else {

			/*  Else retransmit the Identity verify message. */

		id_verify_rq (Rq_ai);
	}

}

#	endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			id_chk_in - implements the processing of an Identity check
							indication (ID check request message received
							by a terminal).

Usage           void id_chk_in ();

Common constants and declarations : dl.h

Common objects : MDL NA context, message or buffer, teil = tei to check.

*--------------------------------------------------------------------------*/

void id_chk_in ()
{
	uchar	i;				/* index */
	int		rand;			/* random integer */

		/* Is the requested TEI valid */

	if ((tei == TAP_ALL_TEI) ||	(tei <= DL_TEI_AUTOMATIC_UP)) {

#		if DL_PRI_MULTI_D == ON

			if (Na_type != PRI_MULTI_D) {
				ces = DL_CES_BROADCAST;
			}

#		else

			ces = DL_CES_BROADCAST;
#		endif

			/* After an Identity verify request ? */

		if ((Rq_action == TAP_ID_VERIFY) && ((Rq_ai == tei) ||
											 (tei   == TAP_ALL_TEI))) {
			Stop_timer_t202 ();

			State     = TAP_FREE;
			Rq_action = TAP_NIL;
		}

			/* Build a response message if match is OK */

		for (i = 0; i < Tei_nb; i++) {

			if ((i != DL_CES_BROADCAST) && ((tei == Tap_tei_x (i)) ||
				((tei == TAP_ALL_TEI) && (Tap_tei_x (i) != DL_TEI_NIL))
				)
			   ) {

#				if DL_PRI_MULTI_D == ON

						/* Check MULTI_D and response */

					if ((Na_type == PRI_MULTI_D) && (i != ces)) {
						continue;
					}

#				endif


					/* Allocate a message or a buffer and init the header.*/

				mdl_set_p_tap ();

					/* Build the ID CHECK response message */

					/* Management Entity ID */
					/* Message type = identity check response */

				I_tap_mei	= TAP_MEI;
				I_tap_type	= TAP_ID_CHK_RS;

					/* Load the reference number */

				rand 		= Rand_omnitel ();
				I_tap_ri_load (rand);

					/* Set action indicator = asigned TEI */

				I_tap_ai_load (Tap_tei_x (i));

					/*
					   Send a response to the network ASP using
					   a MDL_U_DA_RQ primitive (NA, DL_SAPI_MDL, DL_CES_BROADCAST).
					*/

				mdl_send_dl_data (MDL_U_DA_RQ);
			}

		}

	}

}

#endif	/* DL_LAPD == ON } */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mdl_user_send_sm_dlci - implements the buildinf and sending
				of a SM_DL_DLCI_IN message to SM.

Usage           void mdl_user_send_sm_dlci ();

Common constants and declarations : dl.h

Common objects : MDL NA context, message or buffer, tei = TEI assign,
				 ces = CES assign.

*--------------------------------------------------------------------------*/

void mdl_user_send_sm_dlci ()

{

		/* Allocate a message if needed */

	S_msg_alloc;

		/* Load the message information : SAPI, TEI, CES */

	if (p_snd_msg != P_NIL) {

		S_msg_inf0		= DL_TEI_ASSIGNMENT;	/* sub code */

		if (p_mdlsap != P_NIL) {
			S_msg_inf1	= Sapi;					/* SAPI */

		} else {

			S_msg_inf1 	= DL_SAPI_SIG;			/* SAPI Signalling */
		}

		S_msg_inf2		= tei;					/* TEI */
		S_msg_inf3		= ces;					/* CES or CHANI */

		S_msg_data_size	= INF_SIZE;				/* data size */

			/* Load the message header */

		S_msg_from 		= ENT_MDL;
		S_msg_to		= ENT_SM;

#		if DL_PH_MUX == OFF
			S_msg_nai	= Nai;

#		else

			S_msg_nai	= Ph_nai;
#		endif

		S_msg_code		= SM_DL_DLCI_IN;

			/* Send the message to the SM entity */

		Send_message (p_snd_msg); p_snd_msg = P_NIL;
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mdl_assign_non_automatic_tei -implements the assignment of a
				non-automatic TEI on receive of a message :
						inf0 = return code,
						inf1 = SAPI if DL_SAPI_NIL MDL change only,
						inf2 = TEI to assign or DL_TEI_NIL to confirm.
						inf3 = CES,

Usage           void mdl_assign_non_automatic_tei 	();

Common constants and declarations : dl.h

Common objects : MDL objects contexts, p_rcv_msg, tei, ces.

*--------------------------------------------------------------------------*/

#if DL_LAPD == ON /* { */

void mdl_assign_non_automatic_tei ()
{
	uchar		i;			/* local index */
	sapi_t      sapi;		/* local SAPI */

		/* p_rcv_msg points on the reveive message */

	if (R_msg_data_size == INF_SIZE) {

			/* Extract the address information from the received message */

		sapi 	= (sapi_t)R_msg_inf1;
		tei 	= R_msg_inf2;
		ces 	= (ces_t)R_msg_inf3;

			/* Valid request ? */

		if (Tap_tei_non_automatic != DL_TEI_NIL) {

				/* Restore the previous TEI value if requested (tei = DL_TEI_NIL) */

			if (tei == DL_TEI_NIL) {
				tei = Tap_tei_non_automatic;

			} else if ((tei < DL_TEI_AUTOMATIC_LOW - 1) &&
					   (tei != DL_TEI_POINT_TO_POINT)) {

					/* Or load the new value */

					/*
						Scan the TEI table of the NA to seach
						if the tei is already used.
					*/

				for (i = 0; i < Tei_nb; i++) {

					if (Tap_tei_x (i) == tei) {
						break;
					}

				}

				if (i == Tei_nb) {

					if (sapi != DL_SAPI_NIL) {

						if (mdl_access_ces 	(Nai, sapi, ces) == OK) {

								/* Is there a TEI already assign to the CES ? */

							if (Tap_tei != DL_TEI_NIL) {

									/* Yes - remove it */

								tei_local_rm (Tap_tei);
							}

								/* Not already used : assign it */

							Tap_tei				 	=
							Tap_tei_non_automatic 	= tei;

								/* Build and send the MDL ASSIGN REQUEST to DL D */

							mdl_build_assign_from_current_and_send (tei, sapi, ces);

							ret_code 				= OK;

						} else {

								/* Is there a TEI already assign to the CES ? */

							if (Tap_tei != DL_TEI_NIL) {

									/* Yes - remove it */

								tei_local_rm (Tap_tei);
							}

								/* Not already used : assign it */

							Tap_tei				 	=
							Tap_tei_non_automatic 	= tei;

							ret_code 				= OK;
						}

					}

				}

			}

		}

	}

}

#endif	/* DL_LAPD == ON } */

/*--------------------------------------------------------------------------*/

/*EOF*/
