
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_state.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        s_tei_unassigned - implements the execution of an event received in
 *        the "TEI unassigned" state.
 *
 *        s_assign_awaiting_tei - implements the execution of an event
 *        received in the "assign awaiting TEI" state.
 *
 *        s_establish_awaiting_tei - implements the execution of an event
 *         received in the "establish awaiting TEI" state.
 *
 *        s_tei_assigned - implements the execution of an event received
 *        in the "TEI assigned" STATE.
 *
 *        s_awaiting_establishment - implements the execution pf an event
 *        received in the "awaiting establishment" state.
 *
 *        s_awaiting_release - implements the execution of an event received
 *        in the "awaiting release" state.
 *
 *		  dl_load_parameter - implement the DLCEP context loading from a
 *        MDL_AS_TEI_IN message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"

#if NEW_FCT_STYLE == ON
	void	dl_load_parameter (void);

#else

	void	dl_load_parameter ();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name           	 All the following functions implements the execution of a
				 received event (external (primitives and frames)or internal
				 (servicing queue, expiry of timers, receiver busy condition))
				 according to the state of the automata.

Usage            void xxxxxx ();

Related
functions usage  void discard_queue (uchar queue_index);	discard queue

				 void in_queue (uchar queue_index);  		data into queue

				 void send_to_mdl (uchar primitive_code); 	send service primitive to the MDL entity

				 void send_to_l3 (uchar primitive_code); 	send to the corresponding layer 3 entity

				 void send_frame (uchar frame_code, uchar P/F_bit); send a frame to physical entity

				 void Set_state	(uchar state_id); 			set the automata state

				 void unexpected_ev	(); 					unexpected event function

				 int  unnumbered (); 						execute unnumbered function

				 void clear_exception_conditions ();		release exception condition

				 void dl_load_parameter	();					load DLCEP parameter from MDL_AS_IN message

Description      The C code is derived from the CCIT BLUE BOOK SDL.
				 Each SDL item is represented by a verbe evident to link to
				 the SDL item.

Return value     void

Common constants and declarations : dl.h

Common objects : dlcep current context (thru access macros)
				 frame and primitives (thru access macros)

*--------------------------------------------------------------------------*/

#if (DL_LAPD == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

	/* Execution of the "tei unassigned" state : 1 */

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-3 (1) */

void s_tei_unassigned ()
{

		/* Switch according to the received event */

	switch (event_id) {


		case DL_EST_RQ :

#			if DL_U_FRAME == ON
				U_frame_flag = OFF;
#			endif

			Send_to_mdl (MDL_AS_TEI_IN);
			Set_state (S_ESTABLISH_AWAITING_TEI);
			break;

#		if DL_U_FRAME == ON

			case DL_U_EST_RQ :
				U_frame_flag 	= ON;
				Send_to_mdl 	(MDL_AS_TEI_IN);
				Set_state 		(S_U_ESTABLISH_AWAITING_TEI);
				break;

#		endif

		case DL_U_DA_RQ :
			Send_to_mdl 	(MDL_AS_TEI_IN);
			in_queue 		(QU_UI);
			Signal_QU_UI;
			Set_state 		(S_ASSIGN_AWAITING_TEI);
			break;


		case MDL_AS_TEI_RQ :
			dl_load_parameter 	();
			Set_state 			(S_TEI_ASSIGNED);
			break;


		case DL_BUSY_RQ :
			Own_receiver_state = BUSY;
			break;

		case DL_CLEAR_BUSY_RQ :
			Own_receiver_state 		= FREE;
			Discarded_i_frame_state = OFF;
			break;

        case PH_DEA_IN :
			discard_queue (QU_UI);
            break;

		default :
			unexpected_ev ();
			break;

	}

}

/*------------------------------------------------------------------------*/

	/* Execution of the "assign awaiting TEI" state : 2 */

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-3 (2) */

void s_assign_awaiting_tei ()
{
	/* Switch according to the received event */

	switch (event_id) {


		case DL_EST_RQ :

#			if DL_U_FRAME == ON
				U_frame_flag = OFF;
#			endif

			Set_state (S_ESTABLISH_AWAITING_TEI);
			break;

#		if DL_U_FRAME == ON

			case DL_U_EST_RQ :
				U_frame_flag = ON;
				Set_state 	 (S_U_ESTABLISH_AWAITING_TEI);
				break;

#		endif



		case DL_U_DA_RQ :
			in_queue (QU_UI);
			Signal_QU_UI;
			break;


		case MDL_AS_TEI_RQ :
			dl_load_parameter ();
			Set_state 		  (S_TEI_ASSIGNED);
			break;


		case MDL_ERR_RS :
		case PH_DEA_IN :
			discard_queue 	(QU_UI);
			Send_to_l3 		(DL_REL_IN);
			Set_state 		(S_TEI_UNASSIGNED);
			break;


		case DL_BUSY_RQ       :
			Own_receiver_state = BUSY;
			break;

		case DL_CLEAR_BUSY_RQ :
			Own_receiver_state 		= FREE;
			Discarded_i_frame_state = OFF;
			break;


		default :
			if (xid_process () == STOP) break;
			unexpected_ev ();
			break;

	}

}


/*-------------------------------------------------------------------------*/

	/* Execution of the "establish awaiting TEI " state : 3 */

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-3 (3)*/

void s_establish_awaiting_tei ()
{

		/* Dispatching according to the received event */

	switch (event_id) {


		case MDL_AS_TEI_RQ :
			dl_load_parameter 	();
			establish_dl 		();
			Layer_3_initiated 	= ON;
			Layer_3_rel_rq 		= OFF;
			Set_state 			(S_AWAITING_ESTABLISHMENT);
			break;


		case MDL_ERR_RS :
		case PH_DEA_IN :
			discard_queue 	(QU_UI);
			Send_to_l3 		(DL_REL_IN);
			Set_state 		(S_TEI_UNASSIGNED);
			break;

		case DL_BUSY_RQ       :
			Own_receiver_state = BUSY;
			break;

		case DL_CLEAR_BUSY_RQ :
			Own_receiver_state 		= FREE;
			Discarded_i_frame_state = OFF;
			break;

		default :
			if (e_unnumb () 	== STOP) break;
			if (xid_process () 	== STOP) break;
			unexpected_ev ();
			break;

	}

}

#endif

/*-------------------------------------------------------------------------*/

#if DL_ISDN_BIOS == ON

	/* Awaiting PH connection */

void s_awaiting_ph_connection ()
{
		/* Dispatching according to the received event */

	switch (event_id) {

		case DL_EST_RQ :
			Layer_3_initiated = ON;
			break;

		case DL_REL_RQ :
			Send_to_l3 (DL_REL_CO);
			break;


		case PH_DEA_IN :
			Stop_timer_t200 ();
			discard_queue (QU_UI);
			break;


		case FR_UA :
			Stop_timer_t200 ();
			Set_state (S_TEI_ASSIGNED);
			break;

		case FR_DISC :
			Stop_timer_t200 ();
			send_frame (FR_UA, F_ON);

			if (Layer_3_initiated == ON) {
				establish_dl 	();
				Layer_3_rel_rq 	= OFF;
				Set_state 		(S_AWAITING_ESTABLISHMENT);

			} else {

				Set_state 		(S_TEI_ASSIGNED);
			}
			break;


		case FR_SABME :
		case FR_SABM  :

			if (able_to_establish () == NOK) {
				send_frame 		(FR_DM, Ru_p);

			} else {

				send_frame 		 (FR_UA, Ru_p);
				clear_exception_conditions ();
				Vs = Va = Vr = 0;
				Send_to_l3 		 (DL_EST_IN);
				Stop_timer_t200  ();
				Start_timer_t203 ();
				Set_state 		 (S_MFO);
			}
			break;


		case TI_200 :

			if (Chan_state == S_PH_INFO_TX_AVAILABLE ) {
				send_frame (FR_DISC, P_ON);
			}

			Start_timer_t200 ();
			break;


		case DL_BUSY_RQ       :
			Own_receiver_state = BUSY;
			break;

		case DL_CLEAR_BUSY_RQ :
			Own_receiver_state 		= FREE;
			Discarded_i_frame_state = OFF;
			break;

		default :
			if (e_unnumb () 	== STOP) break;
			if (e_fr_err () 	== STOP) break;
			unexpected_ev ();
			break;

	}

}

#endif

/*-------------------------------------------------------------------------*/

	/* Execution of the "TEI assigned" state  : 4 */

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-4 (1) */

void s_tei_assigned ()
{
	Stop_timer_t200 ();

		/* Dispatching according to the received event */

	switch (event_id) {


		case DL_EST_RQ :

#			if DL_U_FRAME == ON
				U_frame_flag = OFF;
#			endif

#			if DL_V120 == ON

				if (Dl_entity_id == ENT_DL_V120) {

					if (Dlci == DL_DLCI_NIL) {
						Send_to_l3 (DL_REL_IN);
						break;
					}

				}

#			endif


			establish_dl 			();
			Layer_3_initiated 		= ON;
			Layer_3_rel_rq 			= OFF;
			Set_state 				(S_AWAITING_ESTABLISHMENT);
			break;

#		if DL_U_FRAME == ON

			case DL_U_EST_RQ :
				U_frame_flag 		= ON;
				establish_u_dl 		();
				Layer_3_initiated 	= ON;
				Set_state 			(S_U_AWAITING_ESTABLISHMENT);
				break;

			case FR_SI_COMMAND 			:
			case FR_SI_COMMAND_EMPTY 	:
				Layer_3_initiated = OFF;

				if ((Ru_ns == 0)   &&
					(Ru_p == P_ON) &&
					(Ru_size_total == Ru_header_size)) {
					U_frame_flag 	= ON;
					clear_exception_conditions ();
					Vs = Vr = Va 	= 0;
					send_frame 		(FR_SI_RESPONSE, Ru_p);
					Send_to_l3 		(DL_U_EST_IN);
					Set_state 		(S_U_SFO);

				} else {

					U_frame_flag = ON;
					establish_u_dl 	();
					Set_state 		(S_U_AWAITING_ESTABLISHMENT);
				}

				break;

#		endif

		case DL_REL_RQ :
			Send_to_l3 (DL_REL_CO);
			break;


		case MDL_RM_TEI_RQ :
			Tei = DL_TEI_NIL;
			dl_init_with_configuration_param ();
			discard_queue (QU_UI);
			Set_state (S_TEI_UNASSIGNED);
			break;


		case PH_DEA_IN :
			discard_queue (QU_UI);
			break;


		case FR_SABME :
		case FR_SABM  :

			if (able_to_establish () == NOK) {
				send_frame (FR_DM, Ru_p);

			} else {

				send_frame 		 (FR_UA, Ru_p);
				clear_exception_conditions ();
				Vs = Va = Vr 	 = 0;
				Send_to_l3 		 (DL_EST_IN);
				Start_timer_t203 ();
				Set_state 		 (S_MFO);
			}
			break;


		case FR_DISC :
			send_frame (FR_DM, Ru_p);
			break;


		case FR_UA :

			if (Ru_f == ON) {
				Send_to_mdl_err ('C');

			} else {

				Send_to_mdl_err ('D');
			}
			break;

		case FR_DM :

			if (Dl_att_ni == DL_ATT) {

				if (Ru_f == F_ON) {
					Send_to_mdl_err ('X');
				}

			} else if (Dl_att_ni == DL_NI) {

				Send_to_mdl_err ('X');

				/* Only if LAPD or DTE LAPB */

			} else if ((Dl_entity_id  != ENT_DL_B) 	||
					   ((Dl_entity_id == ENT_DL_B) 	&&
						(Cr_rcv_command == DTE_CR_RCV_COMMAND)
					   )
					 ) {

				if ((Ru_f != F_ON) && (able_to_establish () == OK)) {
					establish_dl ();
					Layer_3_initiated 	= OFF;
					Layer_3_rel_rq		= OFF;
					Set_state (S_AWAITING_ESTABLISHMENT);
				}

			}

			break;

		case FR_I 	:
		case FR_RR 	:
		case FR_REJ :
		case FR_RNR :
		case FR_FRMR:

			if ((Dl_entity_id == ENT_DL_B) || (Dl_att_ni != OFF)) {

				if ((Ru_cr == Cr_rcv_command) && (Ru_p == P_ON)) {
					send_frame (FR_DM, F_ON);
				}

			}

			break;

		case DL_BUSY_RQ       :
			Own_receiver_state = BUSY;
			break;

		case DL_CLEAR_BUSY_RQ :
			Own_receiver_state 		= FREE;
			Discarded_i_frame_state = OFF;
			break;

		case TI_200 :

#			if DL_U_FRAME == OFF

				if (Chan_state == S_PH_INFO_TX_AVAILABLE ) {
					send_frame 		(FR_DM, F_OFF);
				}

				Start_timer_t200 	();

#			endif

			break;

		default :
			if (e_unnumb () 	== STOP) break;
			if (e_fr_err () 	== STOP) break;
			if (xid_process () 	== STOP) break;

			unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

	/* Execution of the "awaiting establishment" state : 5 */

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-5 (1,2,3) */

void s_awaiting_establishment ()
{
		/* Dispatching according to the received event */

	switch (event_id) {


		case DL_EST_RQ :

#			if DL_U_FRAME == ON
				U_frame_flag = OFF;
#			endif

			discard_queue (QU_I);
			Layer_3_initiated 	= ON;  				/* state 5.0 */
			break;

		case DL_REL_RQ :
			Layer_3_rel_rq 		= ON;  				/* state 5.2 */
			break;


		case MDL_RM_TEI_RQ :
			Tei = DL_TEI_NIL;
			dl_init_with_configuration_param ();
			discard_queue 	(QU_I);
			discard_queue 	(QU_UI);

			if (Layer_3_rel_rq == OFF) {
				Send_to_l3 	(DL_REL_IN);

			} else {

				Send_to_l3 	(DL_REL_CO);
			}

			Stop_timer_t200 ();
			Set_state 		(S_TEI_UNASSIGNED);
			break;


		case PH_DEA_IN :
			discard_queue 	(QU_I);
			discard_queue 	(QU_UI);

			if (Layer_3_rel_rq == OFF) {
				Send_to_l3 	(DL_REL_IN);

			} else {

				Send_to_l3 	(DL_REL_CO);
			}

			Stop_timer_t200	();
			Set_state 		(S_TEI_ASSIGNED);
			break;


		case FR_SABME :
		case FR_SABM  :
			send_frame (FR_UA, Ru_p);

#			if DL_LAPB == ON

					/* LAPB collision processing */

				if (Dl_entity_id == ENT_DL_B) {

					if (Layer_3_initiated == OFF) {
						Send_to_l3 		(DL_EST_IN);

					} else {

						Send_to_l3 		(DL_EST_CO);
					}

					Stop_timer_t200		();
					Start_timer_t203 	();
					Vs = Va = Vr = 0;
					Set_state 			(S_MFO);
				}

#			endif

			break;


		case FR_DISC :
			send_frame (FR_DM, Ru_p);

#			if DL_LAPB == ON

				if (Dl_entity_id == ENT_DL_B) {
					Stop_timer_t200	();
					discard_queue 	(QU_I);
					Send_to_l3 		(DL_REL_IN);
					Set_state 		(S_TEI_ASSIGNED);
				}

#			endif


			break;


		case FR_UA :

				/* REL_IN_RQ has been received */

			if (Layer_3_rel_rq == ON) {
				discard_queue 		(QU_I);
				Rc 					= 0;
				send_frame 			(FR_DISC, P_ON);
				Restart_timer_t200 	();
				Set_state 			(S_AWAITING_RELEASE);
				break;
			}


			if (Ru_f == F_OFF) {
				Send_to_mdl_err ('D');

			} else {

				if (Layer_3_initiated == OFF) {   	/* state 5.1 */

					if (Vs != Va) {
						discard_queue (QU_I);

						Send_to_l3 (DL_EST_IN);

#						if DL_FC == ON
							In_fc_state	= FREE;		/* incoming flow control state */
#						endif

					} else {

						if ((Dl_entity_id == ENT_DL_B) || (Dl_att_ni != OFF)) {
							Send_to_l3 (DL_EST_IN);
						}

						Signal_flag (QU_I) = ON;	/* not in the SDL B-5/Q.921 */
					}

				} else {							/* state 5.0 */

					Send_to_l3 (DL_EST_CO);
				}

				Vs = Va = Vr = 0;
				Stop_timer_t200	();

#				if DL_FC == ON
					if ((System_state == BUSY) ||	(In_fc_state == BUSY)) {

#				 else

					if (System_state == BUSY) {
#				 endif

						Own_receiver_state 	= BUSY;
						send_frame 		(FR_RNR_RESPONSE, F_OFF);

					}

					Start_timer_t203 	();
					Set_state 			(S_MFO);

			}
			break;


		case FR_DM :

			if (Ru_f == F_ON) {
				discard_queue 	(QU_I);

				if (Layer_3_rel_rq == OFF) {
					Send_to_l3 	(DL_REL_IN);

				} else {

					Send_to_l3 	(DL_REL_CO);
				}

				Stop_timer_t200	();
				Set_state 		(S_TEI_ASSIGNED);
			}
			break;


		case TI_200 :

			if (Rc == N200) {
				discard_queue 	(QU_I);
				Send_to_mdl_err ('G');

				if (Layer_3_rel_rq == ON) {
					Send_to_l3 	(DL_REL_CO);

				} else {

					Send_to_l3 	(DL_REL_IN);
				}

				Set_state 		(S_TEI_ASSIGNED);

			} else {

				(Rc)++;

				if (Modulo == MODULO_EXTENDED) {

#					if DL_MODULO_128 == ON
						send_frame (FR_SABME, P_ON);
#					endif

				} else {

#					if DL_MODULO_8 == ON
						send_frame (FR_SABM, P_ON);
#					endif

				}

				Start_timer_t200 ();
			}
			break;


		case DL_DA_RQ 	  :

			if (Layer_3_initiated == OFF) {
				in_queue (QU_I);
				Signal_QU_I;
			}
			break;

		case DL_BUSY_RQ       :
			Own_receiver_state = BUSY;
			break;

		case DL_CLEAR_BUSY_RQ :
			Own_receiver_state 		= FREE;
			Discarded_i_frame_state = OFF;
			break;

		default :
			if (e_unnumb () 	== STOP) break;
			if (e_fr_err () 	== STOP) break;
			if (xid_process () 	== STOP) break;
			unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

	/* Execution of the "awaiting release" state  : 6 */

	/* CCITT BLUE BOOK recommendations Q.921/Annex B SDL  B-6 (1,2) */

void s_awaiting_release ()
{
		/* Dispatching according to the received event */

	switch (event_id) {


		case MDL_RM_TEI_RQ :
			Tei = DL_TEI_NIL;
			dl_init_with_configuration_param ();
			discard_queue 	(QU_UI);
			Send_to_l3 		(DL_REL_CO);
			Stop_timer_t200 ();
			Set_state 		(S_TEI_UNASSIGNED);
			break;


		case PH_DEA_IN :
			discard_queue 	(QU_UI);
			Send_to_l3 		(DL_REL_CO);
			Stop_timer_t200 ();
			Set_state 		(S_TEI_ASSIGNED);
			break;


		case FR_SABME :
		case FR_SABM  :
			send_frame (FR_DM, Ru_p);
			break;


		case FR_DISC :
			send_frame (FR_UA, Ru_p);

#			if DL_LAPB == ON

					/* LAPB collision processing */

				if (Dl_entity_id == ENT_DL_B) {
					Send_to_l3 		(DL_REL_CO);
					Stop_timer_t200 ();
					Set_state 		(S_TEI_ASSIGNED);
				}

#			endif

			break;


		case FR_UA :

			if (Ru_f == F_OFF) {
				Send_to_mdl_err ('D');

			} else {

				Send_to_l3 		(DL_REL_CO);
				Stop_timer_t200 ();
				Set_state 		(S_TEI_ASSIGNED);
			}
			break;


		case FR_DM :

			if (Ru_f == F_ON) {
				Send_to_l3 		(DL_REL_CO);
				Stop_timer_t200 ();
				Set_state 		(S_TEI_ASSIGNED);
			}
			break;


		case TI_200 :

			if (Rc == N200) {
				Send_to_mdl_err ('H');
				Send_to_l3 		(DL_REL_CO);
				Set_state 		(S_TEI_ASSIGNED);

			} else {

				(Rc)++;
				send_frame 			(FR_DISC, P_ON);
				Start_timer_t200	();
			}

			break;

		case DL_BUSY_RQ       :
			Own_receiver_state = BUSY;
			break;

		case DL_CLEAR_BUSY_RQ :
			Own_receiver_state 		= FREE;
			Discarded_i_frame_state = OFF;
			break;

		default :
			if (e_unnumb () 	== STOP) break;
			if (e_fr_err () 	== STOP) break;
			if (xid_process () 	== STOP) break;
			unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

#if DL_LAPB == ON

/* Frame reject condition processing : according to CCITT BLUE BOOK X.25*/

void s_frame_reject ()
{

		/* Dispatching according to the received event */

	switch (event_id) {


		case DL_EST_RQ :
			Stop_timer_t200 ();
			discard_queue 	(QU_I);
			establish_dl 	();
			Layer_3_initiated = ON;
			Layer_3_rel_rq 	= OFF;
			Set_state 		(S_AWAITING_ESTABLISHMENT);
			break;


		case DL_REL_RQ :
			discard_queue 	(QU_I);
			Send_to_l3 		(DL_REL_CO);
			Stop_timer_t200 ();
			Set_state 		(S_TEI_ASSIGNED);
			break;


		case PH_DEA_IN :
			discard_queue 	(QU_I);
			Stop_timer_t200 ();
			Set_state 		(S_TEI_ASSIGNED);
			break;


		case FR_SABME :
		case FR_SABM  :

			if (able_to_establish () == NOK) {
				send_frame  	(FR_DM, Ru_p);
				Stop_timer_t200 ();
				Set_state 		(S_TEI_ASSIGNED);

			} else {

				send_frame 		(FR_UA, Ru_p);
				clear_exception_conditions ();
				Send_to_mdl_err ('F');
				Send_to_l3 		(DL_EST_IN);

				if 	(Vs != Va) {
					discard_queue (QU_I);

#					if DL_FC == ON
						In_fc_state	= FREE;		/* incoming flow control state */
#					endif


				} else {

					Signal_flag (QU_I) = ON;
				}

				Vs = Va = Vr = 0;
				Stop_timer_t200	();

#				if DL_FC == ON
					if ((System_state == BUSY) ||	(In_fc_state == BUSY)) {

#				else

					if (System_state == BUSY) {
#				endif

						Own_receiver_state 	= BUSY;
						send_frame 			(FR_RNR_RESPONSE, F_OFF);

					}

					Start_timer_t203 	();
					Set_state 			(S_MFO);

			}

			break;

		case FR_DISC :
			send_frame 		(FR_UA, Ru_p);
			discard_queue 	(QU_I);
			Stop_timer_t200 ();
			Set_state 		(S_TEI_ASSIGNED);
			break;


		case FR_DM :

			if ((Ru_f != P_ON) &&
				(able_to_establish () == OK) &&
				(Dl_att_ni != DL_NI)
			   ) {
				Stop_timer_t200  	();
				establish_dl 		();
				Layer_3_initiated 	= OFF;
				Layer_3_rel_rq 		= OFF;
				Set_state 			(S_AWAITING_ESTABLISHMENT);

			}
			break;


		case FR_FRMR :

			if (able_to_establish () == OK) {
				Stop_timer_t200 	();
				establish_dl 		();
				Layer_3_initiated 	= OFF;
				Layer_3_rel_rq 		= OFF;
				Set_state 			(S_AWAITING_ESTABLISHMENT);

			} else {

				send_frame (FR_DM, F_OFF);
			}
			break;


		case TI_200 :

			if (Rc++ == N200) {

				if (able_to_establish () == OK) {
					establish_dl 		();
					Layer_3_initiated 	= OFF;
					Layer_3_rel_rq 		= OFF;
					Set_state 			(S_AWAITING_ESTABLISHMENT);

				} else {

					send_frame (FR_DM, F_ON);
				}

			} else {

				send_frame 		 (FR_FRMR, Frmr_pf);
				Start_timer_t200 ();
			}
			break;


		case QU_FR_I 	:	/* Internal event */
		case WAIT_ACK 	:
			break;

		default :

			if (Ru_cr == Cr_rcv_command) {
				send_frame 		 	(FR_FRMR, Ru_p);
				Restart_timer_t200 	();
			}
			break;

	}

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name           	 dl_load_parameter implements the loading of the connection
				 parameters with the data values of the message
				 (DL_TEI_ASS_RQ) coming from the MDL entity.

Usage            void dl_load_parameter ();

Return value     void

Common constants and declarations : dl.h

Common objects : dlcep current context (thru access macros)
				 frame and primitives (thru access macros)

*--------------------------------------------------------------------------*/

void dl_load_parameter ()
{
	uchar FAR	*p_data;          				/* received data pointer */

		/* Set the data pointer */

	p_data			= R_a_data;                 /* Load data pointer from received message */

		/* Load the assign parameters */

	Tei 			= (uchar)Mdl_assign_tei;	/* store TEI into DLCEP context */

#	if (DL_LAP4K == ON) || (DL_LAPF == ON)
		Dlci		= Mdl_assign_dlci;			/* store DLCI into the DLCEP context */
#	endif

	N201_tx 		= Mdl_assign_n201_tx;		/* N201 transmitter */
	N201_rx 		= Mdl_assign_n201_rx;		/* N201 receiver */
	K				= Mdl_assign_k_tx;			/* window size transmitter */
	Ti_val(T200)	= Mdl_assign_t200;			/* T200 value */

}

/*EOF*/
