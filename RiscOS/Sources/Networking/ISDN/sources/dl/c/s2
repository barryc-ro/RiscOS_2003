
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - s2.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        main - implements the main function of a server composed of
 *		         DL_D-DL_B, MDL entities (Layer 2 entities).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "services.h"
#include "dl.h"
#include "ph_int.h"

#if DL_MLP == ON
#	include "mlp.h"
#endif

#include "simul.h"

		/* Common */

	Server_common;

		/* Server definition */

CONST struct server_def p_server_def_s2[] = {

	/* entity ID,   entry point, congestion processing, global vars init function */

		{ENT_DL,		dl,				OFF,	OFF,	dl_var_init},
		{ENT_MDL,   	mdl,	  		ON,		ON,		mdl_var_init},
		{ENT_DL_D,  	dl,				OFF},
		{ENT_DL_B,  	dl,				OFF},
		{ENT_DL_4K,  	dl,				OFF},
		{ENT_DL_V120,  	dl,				OFF},
		{ENT_DL_F,  	dl,				OFF},

		{ENT_SM,		sm,				OFF,	OFF,	sm_var_init},

#if SIMULATION == ON
		{ENT_TI,		FCT_NIL,		OFF},
#endif

		{ENT_NIL},
};

		/* ------------ Server queue ID ------------ */

uint		qid_s2;

		/* ----- Server's specific flags list ------ */

#if SIMULATION == ON

#	if	NEW_FCT_STYLE == ON
		uchar	s2_flag	(uchar flag_val, char code);

#	else

		uchar	s2_flag ();
#	endif

	struct server_flag s2_flag_list [] = {
		{'1',		s2_flag},
		{'2',		s2_flag},
		{'9',		s2_flag},
		{FLAG_NIL}
	};

#endif

	/* -- Message building and analysing functions lists -- */

#if (SIM_ANALYSER == ON) || (SIM_BUILDER == ON)

		/* ---- Global data ---- */

	uint		dl_ass_tei 		= ON;    	/* simul tap or not */
	uint		dl_pr_object 	= OFF;		/* dl print all objects */
	uint		dl_pr_state 	= ON;		/* dl print current objects state */
	uint		panel_analyser	= OFF;		/* NS SPDU full screen analyser */

	uint		ns_pdu_2 		= OFF;		/* NS pdu 1 or 2 */
	uint		ns_pr_dl_sdu_ie = ON;		/* DL print NS IE contained in SDU */

		/* ---- Server "to" lists ---- */

	CONST struct server_simul_to p_sm_to [] = {
		{ENT_SM,	ana_sdu_sm, 		FCT_NIL},
		{ENT_MDL,	ana_sdu_sm, 		FCT_NIL},
		{ENT_NIL},
	};


	CONST struct server_simul_to p_ti_to [] = {
		{ENT_MDL,		ana_sdu_ti_dl, 		build_sdu_ti_to_dl},
		{ENT_DL,		ana_sdu_ti_dl, 		build_sdu_ti_to_dl},
		{ENT_DL_D,		ana_sdu_ti_dl, 		build_sdu_ti_to_dl},
		{ENT_DL_B,		ana_sdu_ti_dl, 		build_sdu_ti_to_dl},
		{ENT_DL_V120,	ana_sdu_ti_dl, 		build_sdu_ti_to_dl},
		{ENT_DL_F,		ana_sdu_ti_dl, 		build_sdu_ti_to_dl},
		{ENT_DL_4K,		ana_sdu_ti_dl, 		build_sdu_ti_to_dl},
		{ENT_NIL},
	};


	CONST struct server_simul_to p_ns_to [] = {
		{ENT_DL_D,	ana_sdu_dl, 		build_sdu_n_to_dl},
		{ENT_DL,	ana_sdu_dl, 		build_sdu_n_to_dl},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_x25_to [] = {
		{ENT_DL_D,	ana_sdu_dl, 		build_sdu_n_to_dl},
		{ENT_DL,	ana_sdu_dl, 		build_sdu_n_to_dl},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_l3_to [] = {
		{ENT_DL_D,	ana_sdu_dl, 		build_sdu_n_to_dl},
		{ENT_DL_B,	ana_sdu_dl, 		build_sdu_n_to_dl},
		{ENT_DL,	ana_sdu_dl, 		build_sdu_n_to_dl},

#		if (DL_LAP4K == ON) || (DL_LAPF == ON)
			{ENT_MDL,ana_sdu_mdl, 		build_sdu_n_to_mdl},
#		endif

#		if (DL_V120 == ON)
			{ENT_V120,ana_sdu_dl, 		build_sdu_n_to_dl},
#	   	endif

		{ENT_NIL},
	};


	CONST struct server_simul_to p_mdl_to [] = {
		{ENT_SM,	ana_sdu_sm, 		FCT_NIL},
		{ENT_DL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_DL_D,	ana_sdu_dl,	 		FCT_NIL},
		{ENT_DL_B,	ana_sdu_dl, 		build_sdu_mdl_to_dl_b},

#		if (DL_LAP4K == ON) || (DL_LAPF == ON)
			{ENT_L3,ana_sdu_mdl, 		FCT_NIL},
#		endif

		{ENT_MPH,	ana_sdu_ph, 		FCT_NIL},
		{ENT_MPH_D,	ana_sdu_ph, 		FCT_NIL},
		{ENT_MPH_B,	ana_sdu_ph, 		FCT_NIL},
		{ENT_NIL},
	};


	CONST struct server_simul_to p_dl_to [] = {
		{ENT_NS,	ana_sdu_dl,	 		FCT_NIL},
		{ENT_L3,	ana_sdu_dl,	 		FCT_NIL},
		{ENT_DL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_DL_D,	ana_sdu_dl, 		FCT_NIL},
		{ENT_DL_B,	ana_sdu_dl, 		FCT_NIL},
		{ENT_MDL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_PH_D,	ana_sdu_ph, 		FCT_NIL},
		{ENT_PH_B,	ana_sdu_ph, 		FCT_NIL},
		{ENT_PH,	ana_sdu_ph, 		FCT_NIL},
		{ENT_NIL},
	};


	CONST struct server_simul_to p_dl_d_to [] = {
		{ENT_NS,	ana_sdu_dl,		 	FCT_NIL},
		{ENT_X25,	ana_sdu_dl,		 	FCT_NIL},
		{ENT_L3,	ana_sdu_dl,		 	FCT_NIL},
		{ENT_MLP,	ana_sdu_dl,		 	FCT_NIL},
		{ENT_DL_D,	ana_sdu_dl, 		FCT_NIL},
		{ENT_DL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_MDL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_PH_D,	ana_sdu_ph, 		FCT_NIL},
		{ENT_PH,	ana_sdu_ph, 		FCT_NIL},
		{ENT_NIL},
	};


	CONST struct server_simul_to p_dl_b_to [] = {
		{ENT_NS,	ana_sdu_dl, 		FCT_NIL},
		{ENT_DL_B,	ana_sdu_dl, 		FCT_NIL},
		{ENT_DL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_L3,	ana_sdu_dl, 		FCT_NIL},
		{ENT_MLP,	ana_sdu_dl, 		FCT_NIL},
		{ENT_MDL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_PH_B,	ana_sdu_ph, 		FCT_NIL},
		{ENT_PH,	ana_sdu_ph, 		FCT_NIL},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_dl_f_to [] = {
		{ENT_NS,	ana_sdu_dl, 		FCT_NIL},
		{ENT_DL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_L3,	ana_sdu_dl, 		FCT_NIL},
		{ENT_MLP,	ana_sdu_dl, 		FCT_NIL},
		{ENT_MDL,	ana_sdu_dl, 		FCT_NIL},
		{ENT_PH_B,	ana_sdu_ph, 		FCT_NIL},
		{ENT_PH,	ana_sdu_ph, 		FCT_NIL},
		{ENT_NIL},
	};


	CONST struct server_simul_to p_ph_to [] = {
		{ENT_DL,	ana_sdu_ph, 		build_sdu_ph_to_dl},
		{ENT_DL_B,	ana_sdu_ph, 		build_sdu_ph_to_dl},
		{ENT_DL_D,	ana_sdu_ph, 		build_sdu_ph_to_dl},
		{ENT_DL_4K,	ana_sdu_ph, 		build_sdu_ph_to_dl},
		{ENT_DL_V120,ana_sdu_ph, 		build_sdu_ph_to_dl},
		{ENT_DL_F,	ana_sdu_ph, 		build_sdu_ph_to_dl},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_ph_asp_to [] = {
		{ENT_DL_D,	ana_sdu_ph, 		build_sdu_ph_d_to_dl_d},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_mph_to [] = {
		{ENT_MDL,	ana_sdu_ph, 		build_sdu_ph_to_dl},
		{ENT_SM,	ana_sdu_sm, 		FCT_NIL},
		{ENT_NIL},
	};

		/* ---- Server "from" list ---- */

	CONST struct server_simul_from p_from [] = {
		{ENT_SM,	"System Management",	p_sm_to},
		{ENT_TI,	"Timer Management",		p_ti_to},

		{ENT_NS,	"Network signalling",	p_ns_to},
		{ENT_X25,	"X25",					p_x25_to},
		{ENT_L3,	"Layer 3",				p_l3_to},
		{ENT_MLP,	"MLP",					p_l3_to},

		{ENT_MDL,	"Management Data Link",	p_mdl_to},
		{ENT_DL,	"Data Link",			p_dl_to},
		{ENT_DL_D,	"Data Link lap D",		p_dl_d_to},
		{ENT_DL_B,	"Data Link lap B",		p_dl_b_to},
		{ENT_DL_V120,"Data Link V120",		p_dl_d_to},
		{ENT_DL_F,	"Data Link lap F",		p_dl_f_to},
		{ENT_DL_4K,	"Data Link LAP4K",		p_dl_d_to},

		{ENT_PH_D,	"Physical D channel",	p_ph_to},
		{ENT_PH_B,	"Physical B channel",	p_ph_to},
		{ENT_PH,	"Physical",				p_ph_to},

		{ENT_MPH_D,	"Management Physical D channel",	p_mph_to},
		{ENT_MPH_B,	"Management Physical B channel",	p_mph_to},
		{ENT_MPH,	"Management Physical",				p_mph_to},

		{'A',		"Physical D channel : ASP message",	p_ph_asp_to},

		{ENT_NIL},
	};

#endif

/*-------------------------------------------------------------------------*/

	Server_main(

		s2,						/* name of the server's main function */
		p_server_def_s2,		/* pointer on the server's definition list */
		qid_s2,					/* variable containing the queue identifier */
		0,						/* size of the external FIFO queue (0 means implicit value) */
		p_from,					/* pointer on the messages origination
								   entities' list (used for simulation only) */
		s2_flag_list			/* pointer on the server's flags list */

	)

/*-------------------------------------------------------------------------*/

#if SIMULATION == ON

uchar s2_flag (flag_val, code)
	uchar	flag_val;			/* ON or OFF */
	char	code;				/* flag code */
{

	switch (code) {

		case '1' :
			dl_pr_object = flag_val;
			break;

		case '2' :
			dl_pr_state = flag_val;
			break;

		case '9' :
			dl_ass_tei = flag_val;
			break;

		default :
			return (NOK);

	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

				/* LAYER 3 PDU BUILDING */

#if DL_MLP == ON

	static	uint	mlp_mns 		= 0;	/* MLP MNS */
	static	uint	mlp_mns_empty 	= 0;	/* MLP empty frame */

		/* MLP Cyclic Sequence Number in which the frame are built */

	static  uint	mlp_mns_tab [] = 	{1, 2, 3, 0, 7, 6, 5, 4, 8, 9, 10, 12, 14, 11, 13, 15};

		/* MLCP fragmentation descriptor */

	static 	uchar	be [] = 		{
										MLCP_BE_BEGIN_END,	/* 0 */

										MLCP_BE_BEGIN,		/* 1 */
										MLCP_BE_END,		/* 2 */

										MLCP_BE_BEGIN,		/* 3 */
											MLCP_BE_NEXT,	/* 4 */
										MLCP_BE_END,		/* 5 */

										MLCP_BE_BEGIN,		/* 6 */
											MLCP_BE_NEXT,	/* 7 */
											MLCP_BE_NEXT,	/* 8 */
										MLCP_BE_END,		/* 9 */

										MLCP_BE_BEGIN,		/* 10 */
											MLCP_BE_NEXT,	/* 11 */
											MLCP_BE_NEXT,	/* 12 */
											MLCP_BE_NEXT,	/* 13 */
										MLCP_BE_END,		/* 14 */

										MLCP_BE_BEGIN_END	/* 15 */
									};

	static	uchar	count 	= 0;		/* counter */

#endif

ushort build_i_pdu_ns (p_data)
	uchar	 FAR *p_data;
{
	ushort		  data_size;

	data_size 	 = 0;

#	if DL_MLP == ON

			/* Load MLP header */

		S_mlp_load 	(0, 0, 0, 0, mlp_mns_tab [mlp_mns]);
		data_size 	+= MLP_HEADER_SIZE;
		p_data 		+= MLP_HEADER_SIZE;

			/* Calculate the NS value */

		count 		 = mlp_mns_tab [mlp_mns];

		if (++mlp_mns == MLP_MODULO_SIM) {
			mlp_mns = 0;
		}

		*p_data++ = count;
		data_size++;

#	endif

	Memcpy_far ((char FAR *)p_data, "abcdefghijkl", 12);

	data_size += 12;

	return (data_size);
}

ushort build_i_pdu_ns_2 (p_data)
	uchar FAR *p_data;
{
	ushort		  data_size;

	data_size 	 = 0;

#	if DL_MLP == ON

			/* Load the MLP header */

		S_mlp_load 	(0, 0, 0, 0, mlp_mns_tab [mlp_mns]);
		data_size 	+= MLP_HEADER_SIZE;
		p_data 		+= MLP_HEADER_SIZE;

			/* Calculate the NS value */

		count 		 = mlp_mns_tab [mlp_mns];

		if (++mlp_mns == MLP_MODULO_SIM) {
			mlp_mns = 0;
		}

		*p_data++ = count++;
		data_size++;

#	endif

	Memcpy_far ((char FAR *)p_data, "abcdefghijkl", 12);

	data_size += 12;

	return (data_size);
}

/*--------------------------------------------------------------------------*/

ushort build_ui_pdu_ns (p_data)
	uchar	 FAR *p_data;
{
	ushort		  data_size;

	data_size 	 = 0;

#	if DL_MLP == ON

			/* Simulate for loss of frame */

		if (mlp_mns_tab [mlp_mns] == mlp_mns_empty) {
			S_mlcp_load_pid (0x0000);

		} else {

			S_mlcp_load_pid (0x003d);
		}

		S_mlcp_load_short (be [mlp_mns_tab [mlp_mns]], mlp_mns_tab [mlp_mns]);

		data_size 	+= MLCP_SHORT_HEADER_SIZE;
		p_data 		+= MLCP_SHORT_HEADER_SIZE;

		count 		 = mlp_mns_tab [mlp_mns];

		if (mlp_mns_tab [mlp_mns] == mlp_mns_empty) {
			*p_data++ = 0xff;

		} else {

			*p_data++ = count++;
		}

		if (++mlp_mns == MLP_MODULO_SIM) {
			mlp_mns = 0;
			++mlp_mns_empty;
		}

		data_size++;

#	endif

	Memcpy_far ((char FAR *)p_data, "abcdefghijkl", 12);

	data_size += 12;

	return (data_size);
}

ushort build_ui_pdu_ns_2 (p_data)
	uchar FAR *p_data;
{
	ushort		  data_size;

	data_size 	 = 0;

#	if DL_MLP == ON

		if (mlp_mns_tab [mlp_mns] == mlp_mns_empty) {
			S_mlcp_load_pid (0x0000);

		} else {

			S_mlcp_load_pid (0x003d);
		}

		S_mlcp_load_short (be [mlp_mns_tab [mlp_mns]], mlp_mns_tab [mlp_mns]);

		data_size 	+= MLCP_SHORT_HEADER_SIZE;
		p_data 		+= MLCP_SHORT_HEADER_SIZE;

		count 		 = mlp_mns_tab [mlp_mns];

		if (mlp_mns_tab [mlp_mns] == mlp_mns_empty) {
			*p_data++ = 0xff;

		} else {

			*p_data++ = count++;
		}

		if (++mlp_mns == MLP_MODULO_SIM) {
			mlp_mns = 0;
			++mlp_mns_empty;
		}

		data_size++;

#	endif

	Memcpy_far ((char FAR *)p_data, "abcdefghijkl", 12);

	data_size += 12;

	return (data_size);
}

/*--------------------------------------------------------------------------*/

#endif

/*EOF*/

