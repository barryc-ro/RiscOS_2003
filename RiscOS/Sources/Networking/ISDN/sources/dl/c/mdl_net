
/*---------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mdl_net.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		   mdl_from_dl_net - implements the processing of an event coming
 *         from a DL entity used as a network side DL protocol.
 *
 *   	   mdl_from_mc_net - implements the processing of a received
 *		   primitive coming from the Management Connection (MC) pseudo entity.
 *
 *		   start_id_chk, id_chk_rq, id_chk_rs, id_chk_ti - implements the
 *         ASP TEI check procedure.
 *
 *   	   select_tei - implements the selection of a TEI.
 *
 *         tei_remote_rm - implements the removal of remote TEI's.
 *
 *		   id_rq - implements the processing of an Identity request
 *		   message coming from a user MDL.
 *
 *         mdl_reuse_received - implements the reusing of a received
 *         message or buffer.
 *
 *--------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* Compilation options */

#define ENTITY 			MDL		/* layer Management Data Link entity */
#define MODULO 			128		/* MODULO 128 */

#include "dl.h"
#include "ctx_ext.h"

#if (DL_LAPD == ON) || (DL_LAP4K == ON)

#	if EQUIPMENT == NT2

		/* Access to the MDL objects */

extern	struct	mdlcep 		FAR	*p_mdlcep;		/* pointer to the curent Connection Endpoint object */
extern	struct	mdlna 		FAR	*p_mdlna;		/* pointer to the current Network Access object */
extern	struct 	mdlsap 		FAR	*p_mdlsap;		/* pointer to the Service Access Point object */

		/* TAP pointer and tei value */

extern	struct 	tap 			FAR *p_tap;  	/* pointer to the TAP message */
extern	ushort					tei;			/* TEI value */
extern	uchar 					mdl_tei_tab [];	/* Extra TEI table */
extern	ces_t					ces;			/* current CES value */

#if (DL_LAP4K  == ON) || (DL_LAPF == ON)
	extern	uchar				vc_id;			/* Virtual Channel ID */
	extern	ushort				first_mdlces;	/* position of the first mdlces structure */
#endif

						/*----------------*
						 *                *
						 *      NT2       *
						 *                *
						 *----------------*/

/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mdl_from_dl_net - implements the processing of an event
								  coming from a DL entity used as a network
								  side DL protocol.

Usage           void 	mdl_from_dl_net ();

Related
functions usage
				void 	send_dl			(uchar prim_code, sapi_t sapi, uchar ces,
										 uchar info);
				void 	send_dl_data	(uchar prim_code);
				void 	in_queue_tap	();
				void 	out_queue_tap	();
				void 	start_timer		(uchar x_timer);
				void 	stop_timer		(uchar x_timer);
				void 	set_state		(uchar state_code);
				void 	Free_msg		(struct message *p_msg);
				void 	id_tei_rq		(void);
				uchar 	id_tei_rm		(uchar tei_p);
				void 	mc_net			(void);

*---------------------------------------------------------------------------*/

void mdl_from_dl_net ()
{
	uchar		 error_code;		/* error code */
	uchar	FAR *p_data;			/* Mdl error data pointer */
	ushort		 i;					/* Index */

			/* Dispatch according to the incoming event */

	switch (event_id) {

				/*-------------- DL Initialization confirmation ------------*/

		case MDL_SET_CONFIG_CO :

				/* check all TEI 's of all NA connected to terminal */

			for (mdl_access_first_na (); p_mdlna != P_NIL; mdl_access_next_na ()) {

				if ((Na_type == BRI) && (Na_fct == FG_NT_TE)) {
					start_id_chk (TAP_ALL_TEI);
				}

			}

			break;

			/*------------------- MDL ASSIGN INDICATION --------------------*/

		case MDL_AS_TEI_IN :

				/*
				   Terminal Endpoint Identity (TEI) requested
				   by a Data Link Connection  End Point of
				   DL_D entity (NAI, SAPI, CES).
				*/

			if (Tap_tei != DL_TEI_NIL) {

					/* Build and send the MDL ASSIGN REQUEST to DL */

				mdl_build_assign_from_current_and_send (Tap_tei, Sapi, ces);

			} else {

					/* Send MDL ERROR RESPONSE to DL requestor */

				mdl_send_dl (MDL_ERR_RS, R_msg_sapi, ces, DL_TEI_NIL);
			}

			break;

				/*--------------- Reception of an UI frame -----------------*/

					/*
						- SAPI = SAPI MDL,
						- CES  = CES BROADCAST.
					*/

		case MDL_U_DA_IN :								/* UI frame */

				/*
				   Check the received TAP message.
				   If invalid ignore the message.
				*/

			if (mdl_tap_chk () == OK) {

					/* switch according to the Message type */

				switch (I_tap_type)  {

						/* ++++ IDentity request ++++ */

					case TAP_ID_RQ :
						id_rq ();
						break;

						/* ++++ IDentity check response ++++ */

					case TAP_ID_CHK_RS :

							/* Process all received TEI's */

						for (i = 0; (tei = mdl_tei_tab [i]) != DL_TEI_NIL; i++) {
							id_chk_rs ();
						}

						break;

						/* ++++ IDentity verify ++++ */

#					if DL_ID_VERIFY == ON

						case TAP_ID_VERIFY :						/* ID verify */

								/* Start Identity check request procedure */

							start_id_chk (tei);
							break;
#					endif

							/* ++++ Unknown message type --> ignore the message ++++ */

					default:
					break;

				}	/* End switch on message type */

			}

			break;


			/*--------------------------- XID frame ------------------------*/

		case MDL_XID_IN :
		case MDL_XID_CO :
			mc_net ();
			break;

			/*------------------- Data link error report -------------------*/

		case MDL_ERR_IN :
			p_data		= R_a_data;
			error_code 	= Mdl_error_cause;

			if (Mdl_error_report_type == REPORT_TYPE_ERROR) {

					/* Update the error counters */

				++Err_count;
				error_code = (error_code < 'A' ? 'A': error_code);
				error_code = (error_code > 'Z' ? 'Z': error_code);
				++Dl_err_type (error_code - 'A');

				if (Mdl_att_ni != OFF) {
					if ((error_code == 'C') ||
						(error_code == 'B') ||
						(error_code == 'D') ||
						(error_code == 'E')) {
							mc_net ();

#						if MC_TEST_PROCEDURE != ON

#							if	(DL_LAPD == ON) || (DL_LAP4K == ON)

									/* Check the TEI in error */

								start_id_chk ((uchar)R_msg_inf1);
#							endif

#						endif

					}

				} else {

#					if	(DL_LAPD == ON) || (DL_LAP4K == ON)

						mc_net ();

#						if MC_TEST_PROCEDURE != ON

								/*
									Multiple assignment of a TEI
									or address error (TEI) detected?
								*/

							if ((error_code == 'C') ||
								(error_code == 'D') ||
								(error_code == 'U')
							   ) {

									/* Check the TEI */

								start_id_chk ((uchar)R_msg_inf1);
							}

#						endif /* MC_TEST_PROCEDURE */

#					endif /* LAPD */
				}

			}


#			if DL_EXTRA_ERROR_REPORTING == ON

					/* Error reporting to SM */

				mdl_retransmit (SM_REPORT_IN, ENT_SM);

#			endif

			break;


			/*---------------------- CHECK TIMER T201 ----------------------*/

		case TI_201 :

				/* Is the time-out message valid ? */

			if (Valid_time_out_t201 ()) {

					/* Switch according the requested action */

				switch (Rq_action) {

						/* Expiration after a Check ID request */

					case TAP_ID_CHK_RQ :
						id_chk_ti ();
						break;

						/* Unknown action : ignore the message */

					default :
						break;

				} /* End switch */

			}

			break;

			/*------------------------ XID TIMER T204 ----------------------*/

		case TI_204 :
			mc_net ();
			break;

			/*------------------------- Unknown event ----------------------*/

		default :
			break;


	}	/* End switch on primitive code */

}

/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mdl_from_mc_net - implements the processing of a received
				primitive coming from the Management Connection (MC)
				pseudo entity.

Usage           void mdl_from_mc_net ();
					- event_id = MC primitive code,
					- current connection pointers and CES initialized.

Common constants and declarations : dl.h

Common objects : event_id, p_mdlna, ces

*---------------------------------------------------------------------------*/

void	mdl_from_mc_net ()
{

#	if MC_TEST_PROCEDURE == OFF

			/* Dispatch according to event ID */

		switch (event_id) {

			case MC_ERR_IN :

#				if	(DL_LAPD == ON) || (DL_LAP4K == ON)

						/* Check the TEI's */

					start_id_chk (Tap_tei);

#				endif

				break;

			default :
				break;
		}

#	endif

}

/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			start_id_chk, id_chk_rq, id_chk_rs, id_chk_ti - implements the
				ASP TEI check procedure.

Usage			void start id_chk_rq (ushort tei);
					- tei : TEI to check or All value.

				void id_chk_rq (ushort tei);
					- tei : TEI to check or All value.

				void id_chk_rs (void);

				void id_chk_ti (void);

Related
functions usage void send_dl_data (code_t code);
				void Start_timer (uchar x_timer);
				void tei_local_rm (ushort tei);
				void tei_remote_rm (ushort tei);

Description :   start_id_chk initialize the check request procedure.

				id_chk_rq implements the sending of an Identity check
				request.

				id_chk_rs implements the processing of a response to an
				identity check request.

				id_chk_ti implements the processing of a T201 timer expiry.

Return value : 	no return value

Common constants and declarations : dl.h

Common objects : MDL NA context, message or buffer.

*---------------------------------------------------------------------------*/

void start_id_chk (tei_to_check)
	ushort 	tei_to_check;
{

		/*
		   Only one request is processed at a time.
		   If a request is already on, ignore the new one.
		*/

	ces = DL_CES_BROADCAST;

	if (State != TAP_AWAITING_RS) {
		Rc = 0;
		id_chk_rq (tei_to_check);
	}

}

/*--------------------------------------------------------------------------*/

			/* Build and send an Identity check request message */

void id_chk_rq (tei_to_chk)
	ushort	tei_to_chk;					/* tei to check */
{
	uchar	i;							/* index */

		/*
		   Request for a (or all) TEI identity (ies) to the premise user side.
		   Create a message containing :
			 - message type = identity request,
			 - action indicator (Ai).
		*/

		/* Message or buffer allocation and p_tap initialization */

	mdl_set_p_tap ();

		/* Management Entity ID */

	I_tap_mei = TAP_MEI;

		/* Reference Number not used ---> coded 0 */

	I_tap_ri_load (0);

		/* Message type = identity request */

	I_tap_type = TAP_ID_CHK_RQ;

		/*  Set action indicator */

	I_tap_ai_load (tei_to_chk);

		/* Prepare the receiving of the response or timer message */

	Rq_action	= TAP_ID_CHK_RQ;
	Rq_ai		= I_tap_ai;

		/* Reset the response tables */

	for (i = 0; i < Tei_nb; i++) {

		if (Rc == 0) {

			if (i == DL_CES_BROADCAST) {
				Tei_id_rs_x (i) 	  = DL_TEI_BROADCAST;
				Tei_id_rs_count_x (i) = 1;

			} else {

				Tei_id_rs_x (i) 	  = DL_TEI_NIL;
				Tei_id_rs_count_x (i) = 0;
			}

		} else {

			Tei_id_rs_count_x (i) = 0;
		}

	}

		/*
		   Send the message to the network ASP thru
		   the Data Link entity using a UI frame with :
			- SAPI layer 2 management (DL_SAPI_MDL),
			- broadcast data link connection (DL_TEI_BROADCAST).
		*/

	mdl_send_dl_data (MDL_U_DA_RQ);

		/* Start timer T201 */

	Start_timer_t201 ();

		/* Set NA state : await a response */

	State = TAP_AWAITING_RS;
}

/*--------------------------------------------------------------------------*/

				/* Process an Identity check response message */

void id_chk_rs ()
{
	uchar	i;				/* index */

		/*
		   Is the action request and the message action indicator valid ?
		   if not ignore the response.
		*/

	ces = DL_CES_BROADCAST;

	if ((Rq_action == TAP_ID_CHK_RQ) &&	(tei <= DL_TEI_AUTOMATIC_UP)) {

			/* Search the TEI ID in the checked TEI list */

		for (i = 0; i <= Tei_nb; i++) {

			if ((i != DL_CES_BROADCAST) && (Tei_id_rs_x (i) == tei)) {
				Tei_id_rs_count_x (i)++;			/* increment the response counter */
			}

		}

			/* Store the TEI ID in the TEI list */

		for (i = 0; i < Tei_nb; i++) {

			if ((i != DL_CES_BROADCAST) && (Tei_id_rs_x (i) == DL_TEI_NIL)) {
				Tei_id_rs_x (i)  = tei;
				Tei_id_rs_count_x (i)++;
				break;
			}

		}

		if (i == Tei_nb) {
		}

	}

}

/*--------------------------------------------------------------------------*/

			/* Process a T201 expiry after an Identity check request */

void id_chk_ti ()
{
	short	nb_rs;		/* response number */
	uchar	i, j;		/* Index */

		/* Ai value not TEI all values */

	if (Rq_ai != TAP_ALL_TEI) {

			/*
			   Search the TEI ID in the table and
			   load the number of response.
			*/

		nb_rs = -1;							/* Not found */

		for (i = 0; i < Tei_nb; i++) {

			if ((i != DL_CES_BROADCAST) && (Tei_id_rs_x (i) == Rq_ai)) {
				 nb_rs = Tei_id_rs_count_x (i);
			}

		}

			/* Multiple assignment present ? */

		if (nb_rs > 1) {

				/* Remove the local TEI */

			tei_local_rm (Rq_ai);

				/* Remove the remote TEI's */

			tei_remote_rm (Rq_ai);

				/* return */

			State = TAP_FREE;

		} else {

				/* Retry counter overflow ? */

			if (++Rc == N203) {

					/*
						If no Identity check response is received after N203
						retries	the TEI value shall be assumed to be free
						and available for (re)assignment.
					*/

				if (nb_rs < 0) {
					tei_local_rm (Rq_ai);

				} else {

					/*	If one Identity check response is received in one or both T201
						periods, the TEI value shall be assumed to be in use.
					*/

					in_use_tei (Rq_ai);
				}

					/* Reset the request response action */

				Rq_action	= TAP_NIL;

					/* return */

				State = TAP_FREE;

			} else {

				/* No ===> retry one more time */

				id_chk_rq (Rq_ai);
			}

		}

	} else {

		/* Ai = TEI all values */

			/* Multiple assignment present ? */

		for (i = 0; i < Tei_nb; i++) {

			if ((i != DL_CES_BROADCAST) && (Tei_id_rs_x (i) != DL_TEI_NIL)) {

				if (Tei_id_rs_count_x (i) > 1) {

						/* Remove the local TEI */

					tei_local_rm (Tei_id_rs_x (i));

						/* Remove the remote TEI's */

					tei_remote_rm (Tei_id_rs_x (i));

						/* Reset the response item */

					Tei_id_rs_x (i) = DL_TEI_NIL;
				}

			}

		} /* for i */

		if (++Rc == N203) {

				/*
					If one Identity check response is received
					in one or both T201	periods, the TEI value
					shall be assumed to be in use.
				*/

			for (i = 0; i < Tei_nb; i++) {

				if ((i != DL_CES_BROADCAST) && (Tei_id_rs_x (i) != DL_TEI_NIL)) {
					in_use_tei (Tei_id_rs_x (i));
				}

			} /* for i */

				/*
					If no Identity check response is received after N203
					retries	the TEI value shall be assumed to be free
					and available for (re)assignment.
				*/

			for (i = 0; i < Tei_nb; i++) {

				if ((i != DL_CES_BROADCAST) && (Tap_tei_x (i) != DL_TEI_NIL)) {

					for (j = 0; j < Tei_nb; j++) {

						if (Tap_tei_x (i) == Tei_id_rs_x (j)) {
							break;
						}

					} /* for j */

					if (j == Tei_nb) {
						tei_local_rm (Tap_tei_x (i));
					}

				} /* if Tap_tei != DL_TEI_NIL */

			} /* for i */


				/* Reset the request response state */

			State	= TAP_FREE;

		} else {  /* if Rc == N203 */

			/* Check again for all TEI values */

			id_chk_rq (TAP_ALL_TEI);
		}

	} /* If Rq_ai == TAP_ALL_TEI .... else .... */

}

/*--------------------------------------------------------------------------*/

						/* set a TEI value in use */

void in_use_tei (tei_in_use)
	ushort 	tei_in_use;

{
	uchar 	i;				/* index */

		/* Is the local TEI ID in use ? */

	for (i = 0; i < Tei_nb; i++) {

		if ((i != DL_CES_BROADCAST) && (Tap_tei_x (i) == tei_in_use)) {
			break;
		}

	}

	if (i == Tei_nb) {

			/* Not already in use */

		for (i = 0; i < Tei_nb; i++) {

			if ((i != DL_CES_BROADCAST) && (Tap_tei_x (i) == DL_TEI_NIL)) {
				Tap_tei_x (i) = tei_in_use;

					/* Send MDL ASSIGN REQUEST to all LAPD SAP of the NA  */

				for (mdl_access_first_sap (); p_mdlsap != P_NIL; mdl_access_next_sap ()) {

					if ((Dl_entity_id == ENT_DL_D) && (Sapi != DL_SAPI_MDL)) {

							/* Build and send the MDL ASSIGN REQUEST to DL */

						mdl_build_assign_from_current_and_send (tei_in_use, Sapi, i);
					}

				}

				break;

			} /* if TAP_NIL */

		} /* for i */

	} /* if i == Tei_nb */

}

/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			select_tei - implements the selection of a new TEI.

Usage           uchar select_tei (void);

Return value : 	select_tei returns the selected TEI or the DL_TEI_NIL
				value if resources saturation.

Common constants and declarations : dl.h

Common objects : MDL NA context.

*---------------------------------------------------------------------------*/

uchar select_tei ()
{
	uchar 	i; 			/* current index */
	ushort 	tei;		/* TEI value */
	ces_t 	ces;		/* CES */

		/* Search a free CES in the network access context */

	for (i = 0; i < Tei_nb ; i++) {

		if ((i != DL_CES_BROADCAST) && (Tap_tei_x (i) == DL_TEI_NIL)) {
			break;
		}

	}

	if ((ces = i) == Tei_nb) {
		return (DL_TEI_NIL);
	}

		/* Select a TEI value */

	for ( ; ; ) {

		tei = (++Tei_base > DL_TEI_AUTOMATIC_UP) ? Tei_base = DL_TEI_AUTOMATIC_LOW : Tei_base;

			/* Is it already in used ? */

		for (i = 0; i < Tei_nb ; i++) {

			if ((i != DL_CES_BROADCAST) && (Tap_tei_x (i) == tei)) {
				break; 	/* used */
			}

		}

		if (i == Tei_nb) {
			break;
		}

	}

	return (Tap_tei_x (ces) = tei);
}

/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			tei_remote_rm - implements the removal of remote TEI's.

Usage           void tei_remote_rm (ushort tei);

Related
functions usage send_dl_data (code_t code);


Description :	implements the building of a Identity remove message and
				its sending (twice) to the remote terminal.


Common constants and declarations : dl.h

Common objects : mdl NA context, message or buffer.

*---------------------------------------------------------------------------*/

void tei_remote_rm (tei_to_remove)
	ushort 	tei_to_remove;

{
	uchar	i;						/* index */

		/* Send Identity Remove messages MX_ID_REMOTE_RM times */

	for ( i = 0; i < MX_ID_REMOTE_RM; i++) {

			/*
				Build a message containing :
				 - message type 			= Identity remove,
				 - action indicator (Ai) 	= tei_to_remove.
			*/

			/* Message or buffer allocation and header init */

		mdl_set_p_tap ();

			/* Management entity ID */
			/* Message type = identity request */
			/* Reference number = 0 */
			/* Set action indicator : TEI to remove. */

		I_tap_mei	= TAP_MEI;
		I_tap_type	= TAP_ID_RM;
		I_tap_ri_load (0);
		I_tap_ai_load ((uchar)tei_to_remove);

			/*
			   Send the message to the terminal thru
			   the Data Link entity using a UI frame with :
				- SAPI layer 2 management (DL_SAPI_MDL),
				- broadcast data link connection (DL_TEI_BROADCAST).
			*/

		mdl_send_dl_data (MDL_U_DA_RQ);
	}

}

/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			id_rq - implements the processing of an Identity request
						message coming from a user MDL.

Usage           void id_rq ();

Related
functions usage void mdl_send_dl_data (code_t code);
				void start_id_chk_rq (ushort tei);
				void mdl_send_dl (code_t code, sapi_t sapi, ces_t ces, uchar inf0);

Common constants and declarations : dl.h

Common objects : MDL NA, SAP, DLCEP contexts and message or buffer.

*---------------------------------------------------------------------------*/

void id_rq ()
{
	uchar	i;			/* index */

		/* If Ai value in range [0 - 63] or > 127 ignore the message. */

	if (! (tei < DL_TEI_AUTOMATIC_LOW) || (tei > TAP_ANY_TEI)) {

			/* If Ai values in the range [64 - 126]	---> deny Identity.	*/

			/* If there is an other TEI processing request
			   under construction  --> deny identity
			*/

		if ((tei != TAP_ANY_TEI) || (State == TAP_AWAITING_RS)) {

				/* Denied Identity request */
				/* Reuse the received message or buffer */

			mdl_reuse_received ();

				/* Built and send the response message : Identity denied */

			I_tap_type = TAP_ID_DENIED;
			mdl_send_dl_data (MDL_U_DA_RQ);

				/* Return */

			return;
		}

			/* Select a TEI value */

		if ((tei = select_tei ()) == DL_TEI_NIL) {

				/* No TEI available ---> check all TEI value. */

			start_id_chk (TAP_ALL_TEI);

		} else {

				/* TEI available */

				/*
					Transmit an IDENTITY ASSIGNED message
					to the remote user MDL entity.
				*/

				/* Reuse the received message or buffer */

			mdl_reuse_received ();

				/* Build the response message */

			I_tap_type	= TAP_ID_ASS;
			I_tap_ai_load (tei);

				/*
					Send the response message to the remote MDL entity
					using the broadcast connection.
				*/

			mdl_send_dl_data (MDL_U_DA_RQ);

				/*
				   Inform the Data Link entity connections by means
				   of the MDL ASSIGN REQUEST message.
				*/

			for (i = 0; i < Tei_nb; i++) {

				if ((i != DL_CES_BROADCAST) && (Tap_tei_x (i) == tei)) {
					break;
				}

			}

				/* Send MDL ASSIGN REQUEST to all LAPD SAPs of the NA  */

			for (mdl_access_first_sap (); p_mdlsap != P_NIL; mdl_access_next_sap ()) {

				if ((Dl_entity_id == ENT_DL_D) && (Sapi != DL_SAPI_MDL)) {

						/* Build and send the MDL ASSIGN REQUEST to DL */

					mdl_build_assign_from_current_and_send (tei, Sapi, i);
				}

			}
				/*
				   Send a message to the MPH entity thru the
				   System Management entity.
				*/

				/* Allocate a message if needed */

			S_msg_alloc;

				/* Load the message information : SAPI and SAPI */

			S_msg_inf0		= DL_TEI_ASSIGNMENT;
			S_msg_inf1		= DL_SAPI_SIG;
			S_msg_inf2		= tei;
			S_msg_data_size	= INF_SIZE;

				/* Load the message header */

			S_msg_from 		= ENT_MDL;
			S_msg_to		= ENT_SM;
			S_msg_nai		= Nai;
			S_msg_code		= SM_DL_DLCI_IN;

				/* Send the message to the SM entity */

			Send_message (p_snd_msg); p_snd_msg = P_NIL;
		}

	}


}

/*---------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			reuse_received - implements the reusing of a received
								 message or buffer.

Usage           void reuse_received ();

Common constants and declarations : dl.h

Common objects : p_rcv_msg, p_snd_msg, p_buffer

*---------------------------------------------------------------------------*/

void mdl_reuse_received ()
{

		/* Reuse the received buffer is any --> no more received */

	if (R_msg_p_buffer != P_NIL) {
		R_msg_p_buffer = P_NIL;

	} else {

			/* Else reuse the received message */

		p_snd_msg = p_rcv_msg;
		p_rcv_msg = P_NIL;
	}

}


#	endif

#endif

/*EOF*/
