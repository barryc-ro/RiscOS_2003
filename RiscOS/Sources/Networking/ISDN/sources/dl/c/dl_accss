
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_accss.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         build_dl_object - implements the building of the data link
 *		   layer objects.
 *
 *         dl_access_object - implements the direct access function to
 *         the data link objects according to access key values
 *         (nai, sapi, ces or tei or chani).
 *
 *		   dl_access_first_dlxxx, dl_access_next_dlxxx - implements the
 *         sequential access to the NA, SAP and DLCEP objects.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            dl_build_object - implements the building of the data link
								  layer objects.

Usage           dl_build_object (struct dl_config FAR *p_dl_config);
					- p_dl_config : pointer on the data configuration.

Description     dl_build_object implements the building of the data link
				objects	(na, sap, dlcep) on a tree structure allocated inside
				the variable length (VL) partition memory :

						   | (p_dlna)
						   v
					na --> na --> na ..... --> na
						   |
						   | (p_dlsap)
						   v
						  sap --> sap --> sap  ... --> sap
									|
									|  (p_dlcep)
									v
									dlcep --> dlcep --> dlcep ... --> dlcep

				Each occurrence of object is initialized to NIL values.


Return value    uchar return code = OK  done
								  = NOK failed

Common constants and declarations : dl.h, dl_int.h

Common objects :Dl_config : init configuration from MDL layer management

*--------------------------------------------------------------------------*/

uchar dl_build_object (p_dl_config)
	struct dl_config FAR	*p_dl_config;				/* pointer on the configuration data */
{
	uchar 					 i,j,l;						/* index */
	ushort					 na_size;					/* size of the dlna object */
	struct na 			FAR	*p_dl_config_na;			/* pointer on the current na object of
														   the configuration data */
	struct sap 			FAR	*p_dl_config_sap;			/* pointer on the current sap object of
														   the init configuration */
	short					 object_size;				/* total size needed by the object tre structure */
	uchar 				FAR	*p_current;					/* pointer on the current free location
														   inside the object area */
	uchar 				FAR	*p_mem_blk;					/* pointer on the allocated memory block */
	uchar 				FAR	*p_top_node		= P_NIL;	/* top of the first allocated node */
	struct node 		FAR	*p_node_na 		= P_NIL;	/* pointer on an na node */
	struct node			FAR	*p_node_sap 	= P_NIL;	/* pointer on a sap node */
	struct node			FAR	*p_node_dlcep 	= P_NIL;	/* pointer on a cep node */
	add_t					 dl_mx_chani;				/* number of NAI */

#	if OPTIMIZATION == SPEED

			/* Build a  NA access table if not done */

		if (p_dlna_tab == P_NIL) {

			if ((p_dlna_tab = (struct dlna FAR *FAR *)Mem_alloc (sizeof (struct dlna FAR *) * Na_nb, PID_VL)) == P_NIL) {
				return (NOK);
			}

		}

#	endif

		/* Object occurence building */

		/* ----------------------- NA LOOP ---------------------------------*/

	for (i = 0; i < Dl_config_na_nb; i++) {

		p_dl_config_na = &Dl_config_object_na (i);

			/* number of CHANI */

#		if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

			if ( ! ((Dl_config_type == PRI) || (Dl_config_type == BRI))) {
				dl_mx_chani = Dl_config_channel_nb;

			} else {

				dl_mx_chani = Dl_config_channel_nb + 1;
			}

#		else

			dl_mx_chani = Dl_config_channel_nb;
#		endif


			/* Calculate the area size needed to store the objects */

		object_size	= na_size = Rnd_sizeof (struct node) + Rnd_sizeof (struct dlna) + (dl_mx_chani - 1) * (Rnd_sizeof (struct dlchan));

#		if DL_PH_MUX == ON

			if (Dl_config_ph_mux == ON) {
				object_size += Rnd_sizeof (struct dlmux);
			}

#		endif

		for (j = 0; j < Dl_config_sap_nb; j++) {
			p_dl_config_sap	 = &Dl_config_object_sap (i, j);
			object_size		+= Rnd_sizeof (struct node) + Rnd_sizeof (struct dlsap);

			for (l = 0; l < Dl_config_dlcep_nb; l++) {
				object_size	+= Rnd_sizeof (struct node) + Rnd_sizeof (struct dlcep);
			}

		}

		/* Memory allocation in variable length partition (VL) */

	if ((p_mem_blk = p_current = Mem_alloc (object_size, PID_VL)) == A_NIL) {
		return (NOK);
	}

	if (p_top_node == P_NIL) {
		p_top_node = p_current;
	}

			/* Check the NAI validity */

		if ((Dl_config_nai >= Na_nb) || (dl_access_na (Dl_config_nai) == OK)) {
			return (NOK);
		}

			/* Init the node structure */

		if ( i != 0) {
			p_node_na -> p_next = (struct node FAR *) p_current;
		}

		p_node_na				= (struct node FAR *) p_current;
		p_node_na -> p_next 	= P_NIL;
		p_current			   += na_size;

			/* Initialize NA memory block and access key */

		p_dlna					= (struct dlna FAR *) (p_node_na +1);
		P_mem_blk				= p_mem_blk;
		Nai 					= Dl_config_nai;			/* network access ID */

#		if DL_PH_MUX == ON


				/* PH MUX ON ? */

			if (Dl_config_ph_mux == ON) {

					/* PH MULTIPLEXER context */

				Na_a_dlmux = (struct dlmux FAR *)p_current;

				p_current += Rnd_sizeof (struct dlmux);
			}

#		endif

		p_node_na -> p_dp		= (struct node FAR *) p_current;

#		if OPTIMIZATION == SPEED
			p_dlna_tab [Nai]	= p_dlna;
#		endif


			/*---------------------------- SAP LOOP ------------------------*/

		for (j = 0; j < Dl_config_sap_nb; j++) {

			if (j != 0) {						/* set next pointer into last sap if one */
				p_node_sap -> p_next = (struct node FAR *) p_current;
			}

				/*
				   - current node on current location,
				   - set next pointer and prior pointer to nil,
				   - set new current location.
				*/

			p_dl_config_sap			= &Dl_config_object_sap (i, j);

			p_node_sap				= (struct node FAR *) p_current;
			p_node_sap -> p_next	= P_NIL;
			p_current				+= Rnd_sizeof (struct node) + Rnd_sizeof (struct dlsap);
			p_node_sap -> p_dp		= (struct node FAR *) p_current;

				/* Initialize current SAP access key */

			p_dlsap					= (struct dlsap FAR *) (p_node_sap + 1);
			Sapi					= Dl_config_sapi;

					/*-------------------- DLCEP LOOP ----------------------*/

			for (l = 0; l < Dl_config_dlcep_nb; l++) {

				if (l != 0) {

						 /*
							Sets the next pointer into the last
							created	node if not the first one.
						 */

					p_node_dlcep -> p_next = (struct node FAR *) p_current;
				}

					/*
					   - current node on current location,
					   - set next pointer and prior pointer to nil,
					   - set new current location.
					*/

				p_node_dlcep			= (struct node FAR *) p_current;
				p_node_dlcep -> p_next 	= P_NIL;
				p_node_dlcep -> p_dp 	= P_NIL;

				p_current			   += Rnd_sizeof (struct node) + Rnd_sizeof (struct dlcep);

					/* Initialize current dlcep access key */

				p_dlcep 				= (struct dlcep FAR *) (p_node_dlcep + 1);
				Ces						= l;

			} /* End of dlcep loop */

		} /* End of sap loop */

	}	/* End na loop */

		/* Is it the first configuration message */

	if (p_dl_tree == P_NIL) {

			/* Init the P_DL_TREE pointer */

		p_dl_tree = (struct node FAR *)p_top_node;

	}	else {

			/* Link the new NA thread to the existing one */

		for (p_node_na 	= p_dl_tree; Next(p_node_na) != P_NIL; p_node_na = Next(p_node_na));

		Next(p_node_na) = (struct node FAR *)p_top_node;
	}

#	if DL_IDENTIFICATION == ON

			/* Identification profile array of values */

		if (p_dl_ident_profile == P_NIL) {

				/* Memory allocation */

			if ((p_dl_ident_profile = (struct dl_ident_profile FAR *)Mem_alloc (sizeof (struct dl_ident_profile) * DL_MX_IDENT_PROFILE, PID_VL)) == P_NIL) {
				return (NOK);
			}

			dl_ident_profile_nb = 0;
		}

#	endif

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             dl_access_object - implements the direct access to the data
									link objects according to the key values.

Usage            uchar dl_access_object (nai_t nai, sapi_t sapi,
										 uchar type, conn_id_t add);
						- nai     : NA ID,
						- sapi    : SAP ID,
						- type    : type of address : TYPE_CES, TYPE_TEI,
													  TYPE_CHANI, TYPE_DLCI
						- add 	  : address complement (CES, TEI, CHANI, DLCI).

Description     dl_access_object implements the pointer access to na, sap
				and dlcep according to the na identifier (nai) the sap
				identifier (sapi) and to the dlcep address which is  a
				channel identifier (chani) or terminal end point identifier
				(tei) (physical view) or a connection endpoint suffix (ces)
				(layer 3 view).

				The tree structure is used to scan the object's occurence.
				For the access with a chani an access table is used to
				accelerate the scanning :

						   | (p_dlna)
						   v
					na --> na --> na ..... --> na
						   |
						   | (p_dlsap)
						   v
						  sap --> sap --> sap  ... --> sap
									|
									|  (p_dlcep)
									v
									dlcep --> dlcep --> dlcep ... --> dlcep


				The result of this function is the positioning of the current
				object common pointers p_dlna, p_dlsap, p_dlcep.

				It is important to note that this function is the only one
				that modify the current object pointers.

Return value    dl_access_object returns a code :

				   = OK if all the objects have been found,
				   = NOK if one object cannot be found.

Common constants and declarations : dl.h

Common objects	objects  : na, sap, dlcep
				pointers : p_dlna, p_dlsap, p_dlcep

*--------------------------------------------------------------------------*/

uchar dl_access_na (nai)
	nai_t 				nai;		/* network access ID */
{
#	if OPTIMIZATION != SPEED
		struct node 	FAR *p_node;
#	endif

		/* Check Nai validity */

	if (nai >= Na_nb) {
		return (NOK);
	}

#	if OPTIMIZATION == SPEED

			/* use NA index table */

		if ((p_dlna_tab == P_NIL) ||
			((p_dlna = p_dlna_tab[nai]) == P_NIL)) {
			return (NOK);

		} else {

			Dl_att_ni = Na_att_ni_flag;
			return (OK);
		}

#	else

			/*
				Init the starting address of the node structure
				and the tree scanning.
			*/

		for (p_node = p_dl_tree; p_node != P_NIL; p_node = Next_node) {
			p_dlna = (struct dlna FAR *) (p_node + 1);

			if (Nai == nai) {
				Dl_att_ni = Na_att_ni_flag;
				return (OK);
			}

		}

		p_dlna = P_NIL;
		return (NOK); 							/* end of na thread */

#	endif

}

/*-------------------------------------------------------------------------*/

uchar dl_access_chan (nai, chani)
	nai_t			 nai;		/* NA ID */
	add_t			 chani;		/* Channel ID */
{

	if (p_dlna == P_NIL) {

			/* Access to dlna object : load p_dlna */

		if (dl_access_na (nai) == NOK) {
			p_dlchan = P_NIL;
			return (NOK);
		}

	}

#	if (DL_LAPD == ON) || (DL_V120 == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

		if ( (chani >  Na_channel_nb) ||
			((chani >= Na_channel_nb) && (Dl_entity_id == ENT_DL_B))
		   ) {
			p_dlchan = P_NIL;
			return (NOK);
		}

#	else

		if (chani >= Na_channel_nb) {
			p_dlchan = P_NIL;
			return (NOK);
		}

#	endif

	p_dlchan = Na_a_chan (chani);

#	if DL_PH_MUX == ON

		if ((Dl_entity_id == ENT_DL_D) &&
			(chani == PH_CHANI_D) &&
			(Na_a_dlchan != P_NIL)) {
				p_dlchan = Na_a_dlchan;
		}

#	endif

	return (OK);

}

/*------------------------------------------------------------------------*/

uchar dl_access_object (nai, sapi, type, val)
	nai_t 			nai;		/* network access ID */
	sapi_t 			sapi;		/* service access point ID */
	uchar 			type;		/* qualifier for the val_p parameter */
	ulong			val;		/* TEI, CES, DLCI_V120, DLCI_LAPF, DLCI_LAP4K or CHANI according to TYPE_P value */
{
	struct node FAR *p_node;	/* temporary pointer on a node */

		/* Access to dlna object : load p_dlna */

	if (dl_access_na (nai) == NOK) {
		return (NOK);
	}

	p_node = (struct node FAR*)p_dlna - 1;

		/* NA matches, prepares sapi if need (channel) */

	if (type == TYPE_CHANNEL) {

		if (dl_access_chan (nai, (add_t)val) == NOK) {
			return (NOK);
		}

			/* Load SAPI from channel table */

		sapi = Chan_chani_to_sapi;
	}

		/* Scan sap until matching */

	for (p_node = Down_node; ; ) {

		p_dlsap = (struct dlsap FAR *) (p_node + 1);

			/* Load cache from SAP context */

		Dl_entity_id = Dl_entity_id_ctx;

		if (Sapi == sapi) {

				/* SAP only */

			if (type == TYPE_SAP) {
				return (OK);
			}

				/*
				   Sap matches, scans dlcep until matching according
				   to the type of address (ces, tei, chani)/
				*/

			for (p_node = Down_node; ; ) {

				p_dlcep = (struct dlcep FAR *) (p_node + 1);

				switch (type) {

					case TYPE_TEI :

						if (Tei == val) {
							dl_access_chan (nai, Chani);
							return (OK);
						}

						break;

					case TYPE_CES :

						if (Ces == val) {
							dl_access_chan (nai, Chani);
							return (OK);
						}
						break;

					case TYPE_CHANNEL :

						if (Chani == val) {
							return (OK);
						}
						break;

#					if DL_V120 == ON

							/* Check DLCI and CHANI) */

						case TYPE_DLCI_V120 :

							if ((Dlci == val) && (p_dlchan != P_NIL) && (Chani == Chan_chani)) {
								return (OK);
							}
							break;

#					endif

#					if (DL_LAP4K == ON) || (DL_LAPF == ON)

							/* Check DLCI */

						case TYPE_DLCI_LAP4K :
						case TYPE_DLCI_LAPF:

							if (Dlci == val) {
								return (OK);
							}
							break;

#					endif

				}	/* End switch */

				if ((p_node = Next_node) == P_NIL) {
					p_dlchan = P_NIL;
					return (NOK); 					/* end of dlcep thread */
				}

			}	/* End dlcep for */

		} else { 			/* SAPI does not match */

			if ( (p_node = Next_node) == P_NIL) {
				return (NOK); 						/* end of sap thread */
			}

		}

	}	/* End SAP for */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            dl_access_first_dlxxx and dl_access_next_dlxxx - implements
				the sequential access to the data link objects NA, SAP
				and DLCEP.

Usage           void dl_access_first_dlxxx (void);
				void dl_access_next_dlxxx  (void);

Description     dl_access_first_dlxxx implements the access to the first object
				of the thread starting from the upper object.
				dl_access_next_dlxxx implements the sequential scanning of the
				object thread.

Return value    void

Common constants and declarations : dl.h

Common objects	objects  : na, sap, dlcep
				pointers : p_dlna, p_dlsap, p_dlcep

*--------------------------------------------------------------------------*/

/*
						   | (p_dlna)
						   v
						   na --> na --> na
						   |
						   | (p_dlsap)
						   v
						  sap --> sap --> sap  ... --> sap
									|
									|  (p_dlcep)
									v
									dlcep --> dlcep --> dlcep ... --> dlcep
*/

/*-------------------------------------------------------------------------*/

void dl_access_first_na ()
{
	struct node 	FAR *p_node;	/* temporary pointer on a node */

	if ((p_node = p_dl_tree) != P_NIL) {
		p_dlna = (struct dlna FAR *) (p_node + 1);

	} else {

		p_dlna = P_NIL;
	}

}

/*-------------------------------------------------------------------------*/

void dl_access_next_na ()
{
	struct node 	FAR *p_node;	/* temporary pointer on a node */

	if (p_dlna != P_NIL) {
		p_node = (struct node FAR *)p_dlna - 1;

		if ((p_node = Next_node) == P_NIL) {
				p_dlna = P_NIL;

		} else {

			p_dlna = (struct dlna FAR *) (p_node + 1);
		}


	}

}

/*-------------------------------------------------------------------------*/

void dl_access_first_dlsap ()
{
	struct node 	FAR *p_node;	/* temporary pointer on a node */

	if (p_dlna == P_NIL) {
		p_dlsap = P_NIL;

	} else {

		p_node = (struct node FAR *)p_dlna - 1;

		if ((p_node = Down_node) == P_NIL) {
			p_dlsap = P_NIL;

		} else {

			p_dlsap = (struct dlsap FAR *) (p_node + 1);

				/* Load cache from SAP context */

			Dl_entity_id = Dl_entity_id_ctx;
		}

	}

}

/*-------------------------------------------------------------------------*/

void dl_access_next_dlsap ()
{
	struct node 	FAR *p_node;	/* temporary pointer on a node */

	if (p_dlsap != P_NIL) {
		p_node = (struct node FAR *)p_dlsap - 1;

		if ((p_node = Next_node) == P_NIL) {
				p_dlsap = P_NIL;

		} else {

			p_dlsap = (struct dlsap FAR *) (p_node + 1);

				/* Load cache from SAP context */

			Dl_entity_id = Dl_entity_id_ctx;
		}

	}

}

/*-------------------------------------------------------------------------*/

void dl_access_first_dlcep ()
{
	struct node 	FAR *p_node;	/* temporary pointer on a node */

	if (p_dlsap == P_NIL) {
		p_dlcep = P_NIL;

	} else {

		p_node = (struct node FAR *)p_dlsap - 1;

		if ((p_node = Down_node) == P_NIL) {
			p_dlcep = P_NIL;

		} else {

			p_dlcep = (struct dlcep FAR *) (p_node + 1);
		}

	}

}

/*-------------------------------------------------------------------------*/

void dl_access_next_dlcep ()
{
	struct node 	FAR *p_node;	/* temporary pointer on a node */

	if (p_dlcep != P_NIL) {

		p_node = (struct node FAR *)p_dlcep - 1;

		if ((p_node = Next_node) == P_NIL) {
			p_dlcep = P_NIL;

		} else {

			p_dlcep = (struct dlcep FAR *) (p_node + 1);
		}

	}

}

/*EOF*/
