
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ana_dl.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         pr_dl_object - implements the printing of the DL objects.
 *
 *		   pr_dl_state - implements the printing of the current occurrences
 *                       of the DL objects.
 *
 *         pr_dlcep - implements the printing of the current dlcep
 *                    occurrence.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"

#if DL_SIM_ANALYSER == ON
#	include "dl_comm.h"
#	include "simul.h"

		/* external flag */

extern	uint	dl_pr_object, dl_pr_state;

		/* Print formats */

			/* NA */

#define	Pr_na		fprintf	(f_out, "\n\nDL_NA nai : %1u    number of sap : %1u", \
					Nai, 		\
					Sap_nb	 	\
					)

			/* SAP */

#define	Pr_sap		fprintf	(f_out, "\n\nSAP   nai : %-u  sapi : %-u  modulo : %-u  entity : %1c dlcep : %1u k : %-u T200 : %-uS \n      N200 : %-u N201 : %-u",\
					Nai, 							\
					Sapi, 							\
					Modulo, 						\
					Dl_entity_id, 					\
					Dlcep_nb, 						\
					K_cfg, 							\
					(ushort)(T200_val/(SECOND)), 	\
					N200, 							\
					N201 							\
					)

			/* DLCEP */

#define	Pr_dlcep_1	fprintf	(f_out, "\nDLCEP ces : %-u tei : %-u chani : %-u N201_tx : %-u N201_rx : %-u k : %-u \n      T200: %-uS T203 : %-uS", \
					Ces, 								\
					Tei, 								\
					Chani, 								\
					N201_tx, 							\
					N201_rx, 							\
					K, 									\
					(ushort)(Ti_val (T200)/(SECOND)), 	\
					(ushort)(Ti_val (T203)/(SECOND)) 	\
					)

#define	Pr_dlcep_11	fprintf	(f_out, "\nDLCEP ces : %-u dlci : %-u chani : %-u N201_tx : %-u N201_rx : %-u k : %-u \n      T200: %-uS T203 : %-uS", \
					Ces, 								\
					Dlci, 								\
					Chani, 								\
					N201_tx, 							\
					N201_rx, 							\
					K, 									\
					(ushort)(Ti_val (T200)/(SECOND)), 	\
					(ushort)(Ti_val (T203)/(SECOND)) 	\
					)

#define	Pr_dlcep_2	fprintf	(f_out, "\n      state : %s l3 : %s \n      rem_ack : %s commit : %s reject : %s",\
					p_state_id	[strchar (p_state_id, 	State				)].p_text, \
					p_on_off	[strchar (p_on_off, 	Layer_3_initiated	)].p_text, \
					p_on_off	[strchar (p_on_off, 	Remote_ack_pending	)].p_text, \
					p_on_off	[strchar (p_on_off, 	Commit_rq			)].p_text, \
					p_on_off	[strchar (p_on_off, 	Reject_exception	)].p_text  \
					)

#define	Pr_dlcep_3	fprintf	(f_out, "\n      v(s) : %-u v(a) : %-u v(r) : %-u rc : %-u local : %1c remote : %1c ",\
					Vs, 					\
					Va, 					\
					Vr, 					\
					Rc, 					\
					Own_receiver_state, 	\
					Remote_receiver_state 	\
					)

#if DL_FC == ON
#	define	Pr_dlcep_4	fprintf	(f_out, "\n      OUT  high_mark : %-u mark : %-u low_mark : %-u state : %1c IN : state : %1c",\
						Out_fc_high_mark, 	\
						Out_fc_mark, 		\
						Out_fc_low_mark, 	\
						Out_fc_state, 		\
						In_fc_state 		\
						)
#endif

			/* Started timer */

#define	Pr_ti(xx)	fprintf	(f_out, "\n      timer : %-d ID : %Fp value : %uS sequence nber : %-u", \
					TI_ID[i], 						\
					(uchar FAR *)Ti_id(xx), 		\
					(ushort)(Ti_val(xx)/(SECOND)), 	\
					(ushort)(Ti_sn(xx)) 			\
					)

#define	Pr_ti_2(xx)	fprintf	(f_out, "\n      timer : %-d value : %-u sequence nber : %-u", \
					TI_ID[i], 						\
					(ushort)(Ti_val(xx)/(SECOND)), 	\
					(ushort)(Ti_sn(xx)) 			\
					)

			/* Non empty queues */

#define	Pr_qu(xx)	fprintf	(f_out, "\n      queue : %1c  first %Fp last %Fp sent %Fp", \
					QU_ID[i], 	\
					First(xx), 	\
					Last(xx), 	\
					Sent(xx) 	\
					)

		/* Constants arrays */

CONST ushort TI_ID[] = {200, 203};		/* DL timer ID integer value */

CONST char QU_ID[] = {"UI"};			/* queue ID */

			/* DL state */

CONST struct code_text p_state_id[] = {
			{S_TEI_UNASSIGNED, 			"1 (TEI_UNASSIGNED)"},
			{S_ASSIGN_AWAITING_TEI, 	"2 (ASSIGN AWAITING_TEI)"},
			{S_ESTABLISH_AWAITING_TEI,	"3 (ESTABLISH AWAITING TEI)"},
			{S_TEI_ASSIGNED,			"4 (TEI ASSIGNED)"},
			{S_AWAITING_ESTABLISHMENT,	"5 (AWAITING ESTABLISHMENT)"},
			{S_AWAITING_RELEASE,		"6 (AWAITING RELEASE)"},
			{S_MFO,						"7 (MULTI FRAME ESTABLISHED)"},
			{S_TIMER_RECOVERY,		 	"8 (TIMER RECOVERY)"},
			{S_FRAME_REJECT,		 	"9 (FRAME REJECT)"},
			{S_U_ESTABLISH_AWAITING_TEI,"a (S_U_ESTABLISH_AWAITING_TEI)"},
			{S_U_AWAITING_ESTABLISHMENT,"b (S_U_AWAITING_ESTABLISHMENT)"},
			{S_U_SFO,					"c (S_U_SFO)"},
			{0,							"NULL STATE" },
			};

			/* ON OFF */

CONST struct code_text p_on_off[] = {
			{ON,	"ON"},
			{OFF,	"OFF"},
			};
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			pr_dl_object, pr_dl_state, pr_dlcep - implements the printing
				of the Data Link state.
				pr_dl_object prints all the objects of the DL configuration.
				pr_dl_state prints the current state of the object occurrences
				pointed by the DL pointer context.
				pr_dlcep prints the current state of a DL connection Endpoint.

Usage           void pr_dl_object	();
				void pr_dl_state    ();
				void pr_dlcep		();

common constants and declarations :	dl.h

Common objects :	DL objects and DL pointer context

*--------------------------------------------------------------------------*/

			/* Print the state of all the objects of DL configuration */

void pr_dl_object ()
{
	uchar i;										/* current index */


	if ((dl_pr_object == ON) && (print_flag == ON)) {

		for (i = 0; ;i++) {

			if (dl_access_na (i) == NOK) {
				return;
			}

			Pr_na;									/* print NA */

			for (dl_access_first_dlsap (); p_dlsap != P_NIL; dl_access_next_dlsap ()) {

				Pr_sap;								/* print SAP */

				for (dl_access_first_dlcep (); p_dlcep != P_NIL; dl_access_next_dlcep ()) {

					pr_dlcep ();					/* print DLCEP */

				}

			}

		}

	} /* Endif dl_pr_object && print_flag */

}

/*-------------------------------------------------------------------------*/

		/*
			Print the current state of the DL objects
			pointed by p_dlna, p_dlsap, p_dlcep.
		*/

void pr_dl_state ()
{

	if ((dl_pr_state) && (print_flag == ON)) {

		pr_dlcep ();

	} /* endif dl_pr_state */

}

/*-------------------------------------------------------------------------*/

		/*
			Print the current sap and dlcep objects
			pointed by p_dlsap and p_dlcep.
		*/

void pr_dlcep ()
{
	uchar i;

		/* Print current SAP */

	if (p_dlsap != P_NIL) {
		Pr_sap;
	}

		/* Print current DLCEP */

	if (p_dlcep != P_NIL) {

		switch (Dl_entity_id) {

#			if (DL_V120 == ON) || (DL_LAP4K == ON)

				case ENT_DL_V120 :
				case ENT_DL_4K :
					Pr_dlcep_11;
					break;

#			endif

#			if (DL_LAPF == ON)

				case ENT_DL_F :
					Pr_dlcep_11;
					break;

#			endif

			default :
				Pr_dlcep_1;
				break;

		}

		Pr_dlcep_2;
		Pr_dlcep_3;

#		if DL_FC == ON
			Pr_dlcep_4;
#		endif

		for (i = 0; i < MX_TIMER; i++) {

			if (Ti_state (i) == ON) {

#				if PR_POINTER == ON
					Pr_ti (i);

#				else

					Pr_ti_2 (i);
#				endif
			}

		}

#			if PR_POINTER == ON

			for (i = 0; i < MX_QUEUE; i++) {

				if ((First (i) != P_NIL) || (Last (i) != P_NIL) || (Sent (i) != P_NIL)) {
					Pr_qu (i);
				}

			}

#		endif

	}

}

/*-------------------------------------------------------------------------*/

#endif /* DL_SIM_ANALYSER */

/*EOF*/
