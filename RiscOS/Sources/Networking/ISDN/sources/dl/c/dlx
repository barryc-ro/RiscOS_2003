
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dlx.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        dl_lapx_event_process - implements the processing of an event
 *		  concerning the LAPX protocol.
 *
 *        dl_lapx_send - implements the processing of a message ready
 *		  to be sent to the PH entity.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"

#if DL_LAPX == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             dl_lapx_event_process - implements the processing of an
				 event concerning the LAPX protocol

Usage            void dl_lapx_event_process (void);

Common constants and declarations : dl.h, dl_comm.h

Common objects	:  Chan array context pointed by p_dlna

*--------------------------------------------------------------------------*/

void dl_lapx_event_process ()
{
	uchar	FAR	*p_data;		/* received data pointer */
	uchar		 state;			/* local DLX state */

	p_data = R_a_data;      	/* load data pointer */

	/*------------------------ EVENT DRIVEN ------------------------------*/

	switch (event_id) {

			/* The physical connection is cleared */

		case PH_DEA_IN :
			Chan_dlx_state = DLX_IDLE_0;
			dlx_discard_fifo ();
			return;

	}

	/*------------------------ STATE DRIVEN ------------------------------*/

	switch ((state = Chan_dlx_state)) {

			/* Idle state */

		case DLX_IDLE_0 :

			switch (event_id) {

					/*
						The physical connection is activated
						(establish) : ORIGINATOR or ANSWERER.
					*/

				case PH_ACT_IN :

					if (R_a_data == 0) {
						Chan_dlx_usage = OFF;

					} else {

						Chan_dlx_usage = ON;
						dlx_discard_fifo ();

						if (Ph_act_role == DXE_ORIGINATOR) {
							Chan_dlx_xt1_val = Chan_dlx_xt1_a;
							Send_to_ph (PH_TX_RQ);
							state  = DLX_WAIT_TX_4;

						} else if (Ph_act_role == DXE_ANSWERER) {

							Send_to_ph (PH_RX_RQ);
							Chan_dlx_xt1_val = Chan_dlx_xt1_o;
							Chan_dlx_start_timer_xt1 ();
							state = DLX_WAIT_RX_2;

						} else {

							Chan_dlx_usage = OFF;
						}

					}

					break;

			}
			break;

			/* Half duplex sending state */

		case DLX_TX_1 :

			switch (event_id) {

					/* LAPB has finished transmiting one or more frames */

				case DLX_TX_STOP_RQ :
					Chan_dlx_start_timer_xt1 ();
					Send_to_ph (PH_RX_RQ);
					state = DLX_WAIT_RX_2;
					break;

					/* LAPB has entered the disconnected phase */

				case DLX_REL_RQ :
					Send_to_ph (PH_DEA_RQ);
					state = DLX_IDLE_0;
					break;

			}
			break;

			/* Wait for receiving state */

		case DLX_WAIT_RX_2 :

			switch (event_id) {

					/* The physical connection detects the rigth to receive */

				case PH_RX_IN :
					Chan_dlx_stop_timer_xt1 ();
					state = DLX_RX_3;
					break;

					/* The physical connection detects the right to transmit */

				case TI_XT1 :
					Send_to_ph (PH_TX_RQ);
					state = DLX_WAIT_TX_4;
					break;

			}
			break;

			/* Half duplex receiving state */

		case DLX_RX_3 :

			switch (event_id) {

					/* The physical connection detects the right to transmit */

				case PH_TX_RIGHT_IN :
					Send_to_ph (PH_TX_RQ);
					state = DLX_WAIT_TX_4;
					break;

					/* LAPB has entered the disconnected phase */

				case DLX_REL_RQ :
					Send_to_ph (PH_DEA_RQ);
					state = DLX_IDLE_0;
					break;

			}
			break;

			/* Wait for sending state */

		case DLX_WAIT_TX_4 :

			switch (event_id) {

					/* The physical connection is able to transmit data */

				case PH_TX_IN :
					Chan_dlx_state = DLX_TX_1;

						/* Send the waiting frames to the PH B entities */

					while (dlx_out_fifo () == OK) {
						Send_to_ph (PH_DA_RQ);
					}

						/* no frame waiting --> change turn */

					Chan_dlx_start_timer_xt1 ();
					Send_to_ph (PH_RX_RQ);
					state = DLX_WAIT_RX_2;
					break;

					/* The physical connection detects the rigth to receive */

				case PH_RX_IN :
					break;

					/* The physical connection detects the right to transmit */

				case PH_TX_RIGHT_IN :
					break;

			}
			break;

	}

		/* Load the new state in the NA-Channel context */

	Chan_dlx_state = state;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             dl_lapx_send - implements the processing of a message ready
				 to be sent to the PH entity.

Usage            void dl_lapx_send (void);

Return code      = STOP     ===> the message has been processed,
				 = CONTINUE ===> send the message to PH entity.

Common constants and declarations : dl.h, dl_comm.h

Common objects	:  Chan array context pointed by p_dlna, p_dlchan.

*--------------------------------------------------------------------------*/

	/* p_snd_msg points on the message to transmit to the PH entity */

uchar dl_lapx_send ()
{
	struct message 	FAR *p_msg;		/* temporary data message pointers */

		/* Dispatch according to the message code */

	switch (S_msg_code) {

			/* transmit data request */

		case PH_DA_RQ :

				/* If no right to transmit : wait */

			if (Chan_dlx_state != DLX_TX_1) {

					/* No right to transmit --> queue the request */

				dlx_in_fifo ();
				return (STOP);
			}

			break;

				/* Clear the LAPX queue */

		case PH_CLEAR_RQ :

				/* Get address of the message to clear */

			p_msg = *((struct message FAR *FAR *)(S_msg_a_start_data));

			if (dlx_selective_discard_fifo (p_msg) == STOP) {
				Free_msg (p_snd_msg); p_snd_msg = P_NIL;
				return (STOP);

			} else {

				return (CONTINUE);
			}

		default :
			break;

	}


	return (CONTINUE);
}

#endif

/*EOF*/

