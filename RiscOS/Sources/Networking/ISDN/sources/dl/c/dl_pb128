
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_pb128.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         p_b_128 - implements the packing of a modulo 128 LAP-B frame,
 *
 *         i_size_b_128 - size of I frame header.
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


	/* Compilation options */

#define ENTITY 	DL_B	/* LAPB Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"

/*---------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             p_b_128 - implements the packing of a modulo 128 lap-B
						   frame.

Usage            void p_b_128 ();

Description     p_b_128 uses the dl_pck common code with the structure of a
				modulo 128 lap B frame.
				The two conditional compiling constants MODULO and LAPB
				are used to select the ad-hoc structure into dl.h.

Return value    void

common constants and declarations : dl.h

*---------------------------------------------------------------------*/

#if (DL_MODULO_128 == ON) && (DL_LAPB == ON)

void p_b_128 ()
{

#	include "dl_pck.h"

		/* Load address fields */

	S_address_load (Su_sapi, 0, Su_cr);

}

/*-------------------------------------------------------------------------*/

uchar i_size_b_128 ()
{
	return (Fr_i_size);
}

#endif

/*EOF*/
