
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_switc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         switch_state - implements the switching of event driven procedure
 *                         according to the data link connection state
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_D	/* LAPD Data Link entity */
#define MODULO 	128		/* MODULO 128 */

#include "dl.h"
#include "dl_comm.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            switch_state - implements the switching of event driven
							   procedure according to the data link
							   connection state.

Usage           void switch_state ();

Related
functions usage void s_tei_unassigned (); 			TEI unassigned state
				void s_assign_awaiting_tei (); 		assign awaiting TEI
				void s_establish_awaiting_tei (); 	establish awaiting TEI
				void s_tei_assigned (); 			TEI assigned
				void s_awaiting_establishment (); 	awaiting establishment
				void s_awaiting_release (); 		awaiting release
				void s_mfo (); 						multiple frame operation
				void s_timer_recovery (); 			timer recovery
				void Trap (uchar trap code, diagnostic); trap (inconsistency)


Description     switch_state implements the switching of procedure
				according to the state of the data link connection.

Return value    void

Common constants and declarations : dl.h

Common objects 	: data link connection current context (dlcep)

*--------------------------------------------------------------------------*/

void switch_state ()
{

		/* Channel associated to the DL connection ? */

	if (Chani == PH_CHANI_NIL) {

			/* If DL establish request ==> DL_REL_IN */

		if (R_msg_code == DL_EST_RQ) {
			Send_to_l3 (DL_REL_IN);
		}

			/* Else ignore the request */

		return;
	}

		/* Most frequent state : mutiple frame operation */

	if (State == S_MFO) {

		s_mfo ();

#	if DL_U_FRAME == ON

		} else if (U_frame_flag == OFF) {

#	else

		} else {

#	endif

				/* Others states */

			switch (State) {

#				if (DL_LAPD == ON) || (DL_LAP4K == ON) || (DL_LAPF == ON)

					case S_TEI_UNASSIGNED :		 	/* TEI unassigned */

						if (Dl_entity_id != ENT_DL_B) {
							s_tei_unassigned ();

						} else {

							Trap (TRAP_LAPD_ONLY, "switch_state");
						}
						break;

					case S_ASSIGN_AWAITING_TEI : 	/* assign awaiting TEI */

						if (Dl_entity_id != ENT_DL_B) {
							s_assign_awaiting_tei ();

						} else {

							Trap (TRAP_LAPD_ONLY, "switch_state");
						}
						break;

					case S_ESTABLISH_AWAITING_TEI : /* establish awaiting tei */

						if (Dl_entity_id != ENT_DL_B) {
							s_establish_awaiting_tei ();

						} else {

							Trap (TRAP_LAPD_ONLY, "switch_state");
						}
						break;

#				endif

				case S_TEI_ASSIGNED : 			/* TEI assigned */
					s_tei_assigned ();
					break;

				case S_AWAITING_ESTABLISHMENT : /* awaiting establishment */
					s_awaiting_establishment ();
					break;

				case S_AWAITING_RELEASE :		 /* awaiting release */
					s_awaiting_release ();
					break;

				case S_TIMER_RECOVERY : 		/* timer recovery */
					s_timer_recovery ();
					break;

#				if DL_LAPB == ON

					case S_FRAME_REJECT : 		/* frame reject (FRMR) */
						s_frame_reject ();
						break;

#				endif

#				if DL_ISDN_BIOS == ON
					case S_AWAITING_PH_CONNECTION :
						s_awaiting_ph_connection ();
						break;

#				endif

				default :
					Trap (TRAP_DL_STATE, "switch_state");

			}

#	if DL_U_FRAME == ON

			/* Simple frame operation mode */

		} else {

				/* Others states */

			switch (State) {

				case S_U_ESTABLISH_AWAITING_TEI : 	/* establish awaiting tei */
					 s_u_establish_awaiting_tei ();
					break;

				case S_U_AWAITING_ESTABLISHMENT : 	/* awaiting establishment */
					s_u_awaiting_establishment ();
					break;

				case S_U_SFO : 						/* simple frame opration */
					s_u_sfo ();
					break;

				default :
					Trap (TRAP_DL_STATE, "switch_state_u");

			}

#	endif

	}

#	if DL_SIM_ANALYSER == ON
		pr_dl_state ();
#	endif

}

/*EOF*/
