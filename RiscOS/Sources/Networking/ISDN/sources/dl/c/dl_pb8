
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_pb8.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         p_b_8 - implements the packing of a modulo 8 LAP-B frame,
 *
 *         i_size_b_8 - size of I frame header.
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* Compilation options */

#define ENTITY 	DL_B	/* LAPB Data Link entity */
#define MODULO 	8		/* MODULO 8 */

#include "dl.h"
#include "dl_comm.h"

/*---------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             p_b_8 - implements the packing of a modulo 8 lap-B frame

Usage            void p_b_8 ();

Description     p_b_8 uses the dl_pck common code with the structure of a
				modulo 8 lap B frame.
				The two conditional compiling constants MODULO and LAPB
				are used to select the ad-hoc structure into dl.h.

Return value    void

common constants and declarations : dl.h

*---------------------------------------------------------------------*/

#if (DL_MODULO_8 == ON) && (DL_LAPB == ON)

void p_b_8 ()
{

		/* Include common code generates with MODULO = 8 and LAPB */

#	include "dl_pck.h"

		/* Load address fields */

	S_address_load (Su_sapi, 0, Su_cr);

#	if DL_ISDN_BIOS == ON

		if (Su_sapi == DL_SAPI_ISDN_BIOS) {
			S_octet_1 &= (uchar)(0xfc);
		}

#	endif

}

/*-------------------------------------------------------------------------*/

uchar i_size_b_8 ()
{
	return (Fr_i_size);
}

#endif

/*EOF*/
