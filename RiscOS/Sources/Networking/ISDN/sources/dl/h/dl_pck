
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - dl_pck.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         No fuction is implemented in this module. This code is used thru
 *		   include directives by the following modules :
 *
 *         - dl_pd8.c
 *
 *         - dl_pd128.c
 *
 *         - dl_pf2/3/4.c
 *
 *         - dl_pb8.c
 *
 *         - dl_pb128.c
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/* 						Modulo 128

	--------------------------------------------------------------------
	|  Format | commands | Response | Encoding  8  7  6  5  4  3  2  1 | octet
	--------------------------------------------------------------------
	|         |          |          |        |      N(S)          | 0  |  4
	| Informa | I(info)  |          |        |-------------------------|
	| Transf  |          |          |        |      N(R)          | P  |  5
	|------------------------------------------------------------------|
	|   S     |          |          |        | 0  0  0  0  0  0 8 0  1  |  4
	|   U     |    RR    |   RR     |        |-------------------------|
	|   P     |          |          |        |      N(R)          |P/F |  5
	|   E     |----------|----------|--------|-------------------------|
	|   R     |          |          |        | 0  0  0  0  0  0  0  1  |  4
	|   V     |    RNR   |   RNR    |        |-------------------------|
	|   I     |          |          |        |      N(R)          |P/F |  5
	|   S     |----------|----------|--------|-------------------------|
	|   O     |          |          |        | 0  0  0  0  0  0  0  1  | 4
	|   R     |    REJ   |   REJ    |        |-------------------------|
	|   Y     |          |          |        |      N(R)          |P/F | 4
	|---------|----------|----------|--------|-------------------------|
	|         |  SABM    |          |        | 0  0  1 |P |1  1 | 1 1  |  4
	|         |----------|----------|--------|---------|--|-----|------|
	|   U     |  SABME   |          |        | 0  1  1 |P |1  1 | 1 1  |  4
	|   N     |----------|----------|--------|---------|--|-----|------|
	|   N     |          |  DM      |        | 0  0  0 |F |1  1 | 1 1  |  4
	|   U     |----------|----------|--------|---------|--|-----|------|
	|   M     |   UI     |          |        | 0  0  0 |P |0  0 | 1 1  |  4
	|   B     |----------|----------|--------|---------|--|-----|------|
	|   E     |   DISC   |          |        | 0  1  0 |P |0  0 | 1 1  |  4
	|   R     |----------|----------|--------|---------|--|-----|------|
	|   E     |          |   UA     |        | 0  1  1 |F |0  0 | 1 1  |  4
	|   D     |----------|----------|--------|---------|--|-----|------|
	|         |   SI0    |   SI0    |        | 0  1  1 |PF|0  1 | 1 1  |  4
	|         |----------|----------|--------|---------|--|-----|------|
	|         |   SI1    |   SI1    |        | 1  1  1 |PF|0  1 | 1 1  |  4
	|         |----------|----------|--------|---------|--|-----|------|
	|         |          |   FRMR   |        | 1  0  0 |F |0  1 | 1 1  |  4
	|---------|----------|----------|--------|---------|--|-----|------|
	|  Mgt    |  XID     |   XID    |        | 1  0  1 |PF|1  1 | 1 1  |  4
	--------------------------------------------------------------------

*/


		switch (Su_format) {

				/*
				   Information frame : add the frame header ahead the
				   information, in the reserved hole.
				*/

			case I :

				if ((p_buffer = S_msg_p_buffer) != P_NIL) {

#					if ASSERT == ON

						if (Buffer_data_size > (ushort)(N201_tx + S_i_size)) {
							Trap (TRAP_FRAME_TOO_LONG, "dl_pck");
						}

#					endif

					Buffer_data_size	+= S_i_size;			/* ajust the data size */
					Buffer_data_offset	-= S_i_size;			/* adjust data offset */

#					if ASSERT == ON

						if (Buffer_data_offset < BUFFER_HEADER_SIZE) {
							Trap (TRAP_NO_HOLE, "dl_pck");
						}

#					endif

					p_snd_frame			= (union frame FAR *)Buffer_a_start_data; /* frame address */

				} else {

					S_msg_data_size		+= S_i_size;			/* adjust the data size */
					S_msg_data_offset	-= S_i_size;			/* adjust data offset */

#					if ASSERT == ON

						if (S_msg_data_offset < MESSAGE_HEADER_SIZE) {
							Trap (TRAP_NO_HOLE, "dl_pck");
						}

#					endif

					p_snd_frame			= (union frame FAR *)S_msg_a_start_data; /* frame address */
				}

					/* load the frame header */

				S_i_load (Su_p, Su_nr, Su_ns);
				break;

				/* Supervisory */

			case S :
				p_snd_frame			= S_msg_a_frame;			/* frame inside the message area */
				S_msg_frame_size	= S_s_size;					/* frame size */

					/* load the frame header */

				S_s_load (Su_command, Su_pf, Su_nr);
				break;

				/* Unnumbered */

			case U :

						/* Unnumbered Information */

#				if DL_U_FRAME == OFF

					if ((Su_command == UI) || (Su_command == XID)) {

#				else

					if ((Su_command == UI) || (Su_command == XID) || (Su_command == SI0) || (Su_command == SI1)) {

#				endif

					if ((p_buffer = S_msg_p_buffer) != P_NIL) {

#						if ASSERT == ON

							if (Buffer_data_size > (ushort)(N201_tx + S_u_size)) {
								Trap (TRAP_FRAME_TOO_LONG, "dl_pck");
							}

#						endif

						Buffer_data_size	+= S_u_size;   		/* adjust data size   */
						Buffer_data_offset -= S_u_size;			/* adjust data offset */

#						if ASSERT == ON

							if (Buffer_data_offset < BUFFER_HEADER_SIZE) {
								Trap (TRAP_NO_HOLE, "dl_pck");
							}

#						endif

						p_snd_frame			= (union frame FAR *)Buffer_a_start_data;	/* frame address */

					} else {

						if (S_msg_data_size != 0) {

							S_msg_data_size		+= S_u_size;   		/* adjust data size   */
							S_msg_data_offset 	-= S_u_size;		/* adjust data offset */

#							if ASSERT == ON

								if (S_msg_data_offset < MESSAGE_HEADER_SIZE) {
									Trap (TRAP_NO_HOLE, "dl_pck");
								}

#							endif

							p_snd_frame			= (union frame FAR *)S_msg_a_start_data;	/* frame address */

						} else {

							p_snd_frame			= S_msg_a_frame;				/* frame inside the message area */
							S_msg_frame_size	= S_u_size;						/* frame size */
						}
					}

				}

					/* Frame Reject ? */

#				if (DL_LAPB == ON) || (DL_V120 == ON) || (DL_LAPF == ON)

					else if (Su_command == FRMR) {

#						if (DL_V120 == ON) || (DL_LAPF == ON)

							if ((Dl_entity_id == ENT_DL_V120) ||
								(Dl_entity_id == ENT_DL_F)) {

								p_snd_frame			= (union frame FAR *)S_msg_a_first_data; 	/* frame address */
								S_msg_data_size		= S_frmr_size;   							/* set data size   */

									/* Copy the control field */

								Memcpy_far ((char FAR *)S_a_frmr_rfcf, (char FAR *)Ru_a_control, S_frmr_cf_size);

									/* Load Vs, Vr, C/R, W, X, Y, Z */

								S_frmr_load (Vs, ((Ru_cr == Cr_rcv_command) ? 0 : 1), Vr, ret_code);

									/* Save the message content for retransmission */

								Memcpy_far ((char FAR *)Frmr_a_save, (char FAR *)p_snd_frame, S_frmr_size);

							} else

#						endif

						{
								/* First try ? */

							if (State != S_FRAME_REJECT) {
								p_snd_frame			= (union frame FAR *)S_msg_a_first_data; 	/* frame address */
								S_msg_data_size		= S_frmr_size;   							/* set data size   */

									/* Copy the control field */

								Memcpy_far ((char FAR *)S_a_frmr_rfcf, (char FAR *)Ru_a_control, S_frmr_cf_size);

									/* Load Vs, Vr, C/R, W, X, Y, Z */

								S_frmr_load (Vs, ((Ru_cr == Cr_rcv_command) ? 0 : 1), Vr, ret_code);

									/* Save the message content for retransmission */

								Memcpy_far ((char FAR *)Frmr_a_save, (char FAR *)p_snd_frame, S_frmr_size);

							} else {

									/* Retransmission */

								S_msg_alloc;
								p_snd_frame = (union frame FAR *)S_msg_a_start_data;	/* frame address */
								Memcpy_far ((char FAR *)p_snd_frame, (char FAR *)Frmr_a_save, S_frmr_size);
								S_msg_data_size	= S_frmr_size;   						/* set data size   */
							}


						}

					}

#				endif


					/* SABME, DISC, DM, UA */

				else {

					p_snd_frame			= S_msg_a_frame;				/* frame inside the message area */
					S_msg_frame_size	= S_u_size;						/* frame size */
				}

					/* Common sequence */

				S_u_load (Su_command, Su_pf);
				break;

			default :
				break;

		}
/*EOF*/
