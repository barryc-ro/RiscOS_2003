
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - v120_xid.h
 *
 * $Revision$
 *
 * $Date$
 *
 *	Header implementing the	XID information field description
 *  and associated variable declaration for v42 usage.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef V120_XID
#define V120_XID

#	if INCLUDE_ONLY_META_PROGRAMS == OFF

#define Send_to_v120_cf(code)	Send_to_l3 (code)

/*********************************************************/
/*                                                       */
/*                  V120 V42BIS XID parameters           */
/*                                                       */
/*********************************************************/

				/* XID frames information field identifiers encoding */

				/* Format Identifier encoding */

			/* General purpose FI */

#define FI_GENERAL_PURPOSE  		G_8(1,0,0,0,0,0,1,0)	/* X 82	*/

				/* Group Identifier encoding */

#define GI_PARAMETER_NEGOCIATION	G_8(1,0,0,0,0,0,0,0) 	/* X 80 */
#define GI_USER_DATA				G_8(1,1,1,1,1,1,1,1)	/* X FF */
#define GI_PRIVATE_PARAMETER_SET	G_8(1,1,1,1,0,0,0,0)	/* X F0	(Data Compression) */

				/* Parameter Identifier Encoding */

			/* user data subfield parameter identifier */

#define PI_MANUFACTURER_ID			G_8(1,1,1,1,1,1,1,1)

			/* V120 Data Link Layer Subfield Parameters Identifiers */

#define PI_PSI						0		/* Parameter Set Identifier */
#define PI_P0						1		/* Data Compression Request */
#define PI_P1						2		/* Number of codewords */
#define PI_P2						3		/* Maximum string length */

			/* Data Link Layer subfield Parameters Length */

#define PL_HDLC_OPTION				3		/* length of the HDLC optional function parameter */
#define PL_PSI						4		/* PSI length */
#define PL_P0						1		/* P0 length 1 octet */
#define PL_P1						2		/* P1 length 1 integer */
#define PL_P2						1		/* P2 length 1 octet */

			/* Data Link Layer subfield Parameters Values */

			/* test if Parameter Set Identifier Value = "V42"  */

#define Valid_PSI			((psi_f == PRESENT) && 	(psi[0] == 'V') &&	\
													(psi[1] == '1') &&  \
													(psi[2] == '2') &&  \
													(psi[3] == '0')		\
							)

CONST uchar PV_PSI_V120 [] = "V120";

				/* conversion macros for n401 values */
				/* (units of bits in the frame) */

#define In_bits(	n)		( (n) << 3 )
#define In_octets(	n)		( (n) >> 3 )

				/* Parameter Set Identifier expected value */

				/* identifiers flags (ABSENT/PRESENT) */

uchar	pn_group_f;		/* Parameter Negociation Group */
uchar	pps_group_f;	/* Private Parameter Set (V42bis) */
uchar	psi_f;			/* Parameter Set Identifier */
uchar	p0_f;			/* Data Compression Request */
uchar	p1_f;			/* Number of codewords */
uchar	p2_f;			/* Maximum string length */

uchar	psi [PL_PSI+1];	/* Parameter Set Identifier */
uchar	p0;				/* data compression request */
ushort	p1;				/* Number of codewords */
uchar	p2;				/* Maximum string length */

#	else /* if INCLUDE_ONLY_META_PROGRAMS == OFF */

extern uchar	pn_group_f;		/* Parameter Negociation Group */
extern uchar	pps_group_f;	/* Private Parameter Set (V42bis) */
extern uchar	psi_f;			/* Parameter Set Identifier */
extern uchar	p0_f;			/* Data Compression Request */
extern uchar	p1_f;			/* Number of codewords */
extern uchar	p2_f;			/* Maximum string length */

extern uchar	psi [];			/* Parameter Set Identifier */
extern uchar	p0;				/* data compression request */
extern ushort	p1;				/* Number of codewords */
extern uchar	p2;				/* Maximum string length */

#	endif /* if INCLUDE_ONLY_META_PROGRAMS == OFF */

/*--------------------------------------------------------------------------*/
		/*

		   Meta description of the XID frame information field
		   for V.42bis parameter negociation
		   This description is	used to encode XID frames to send
		   and to decode received XID frames

		*/

D_XID_START (XID_V120_S)
		D_XID_GROUP 		(PRIVATE_PARAMETER_SET)
		D_XID_STRING		(PPS_PSI)
		D_XID_CHAR			(PPS_P0)
		D_XID_SHORT			(PPS_P1)
		D_XID_CHAR			(PPS_P2)
D_XID_END	(XID_E)

XID_START 					(XID_V120_S,	FI_GENERAL_PURPOSE)
		XID_GROUP 			(GI_PRIVATE_PARAMETER_SET, &pps_group_f)
		XID_STRING			(PI_PSI,	&psi[0],		&psi_f)
		XID_CHAR			(PI_P0,		PL_P0,	&p0,	&p0_f)
		XID_SHORT			(PI_P1,		PL_P1,	&p1,	&p1_f)
		XID_CHAR			(PI_P2,     PL_P2,	&p2,	&p2_f)
XID_END	()
/*-------------------------------------------------------------------------*/

					/* V120 DATA LINK FUNCTION DECLARATIONS */

#if NEW_FCT_STYLE == ON
	void 	v120_transfer_setparm_data 			(uchar event_id);
	uchar 	v120_transfer_xid_data 				(void);
	void 	v120_reject_setparm 				(void);

	void 	dl_start_timer_tm20					(void);
	void 	dl_stop_timer_tm20					(void);
	void 	dl_restart_timer_tm20				(void);

#else

	void 	v120_transfer_setparm_data 			();
	uchar 	v120_transfer_xid_data 				();
	void 	v120_reject_setparm 				();

	void 	dl_start_timer_tm20					();
	void 	dl_stop_timer_tm20					();
	void 	dl_restart_timer_tm20				();

#endif

#endif

/*EOF*/

