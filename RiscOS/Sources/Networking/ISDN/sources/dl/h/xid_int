
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - xid_int.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	Header implementing the	XID information field upper interface definitions and declarations. 
 *
 *			
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    LAP-BRICKS                                       |*/
/*|    ISDN-BRICKS                                      |*/
/*|    X25-BRICKS                                       |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef XID_INT
#define XID_INT

#include "xid_par.h"
#include "dl_par.h"

/***************************************************************************

	Xid frames information field description :

	Meta-language syntax :

XID_START	(xid frame id				xid frame descriptor identifier
			 format id)					format identifier subfield			
						
	XID_GROUP		(group id)				group identifier subfield          	

	XID_GROUP_VAL	(group value address,	group value subfield (for groups without parameters)         	
					 group length address)

	XID_CHAR	(parameter id,		parameter identifier (1 octet storage)
				 parameter length	if 0 parameter length will be the smallest number of 
									octets needed to express the value of the parameter
				 value address)

	XID_SHORT	(parameter id,		parameter identifier (2 octets internal storage)		
				 parameter length
				 value address)

	XID_LONG	(parameter id,		parameter identifier (4 octets internal storage)		
				 parameter length
				 value address)

	XID_BITFIELD(parameter id,		bitfield parameter identifier descriptor start
				 parameter length)

		XID_BITFIELD_VAL	(bitfield value description
							 position,	position of the value in the bitfield  
							 length,
							 value address)		

	XID_STRING	(parameter id,		parameter identifier (string n octets)
				 string address)

	XID_VECTOR	(parameter id,		parameter identifier (n binary octets)
				 length address,
				 value address)

XID_END									xid frame descriptor end         	

****************************************************************************/

						/* TRAP MANAGEMENT */

			/*
			   TRAP code : trap function is called if and inconsistancy
						   is detected inside the sofware, generally due
						   to a bug. Trap function must freeze the
						   situation and dump it to some permanent support
						   in order to fix the bug.
			*/

#define TRAP_XID_META_PROGRAM		250		/* unknown instruction in XID meta-program */

/*-------------------------------------------------------------------------*/

					/* META-LANGUAGE MANAGEMENT */

	/* Interpreter program codes */

		/* Instruction code */

#define INST_XID_START			1			/* meta_program start	*/
#define INST_XID_END			2 			/* meta-program end		*/
#define INST_XID_GROUP			3			/* group subfield		*/
#define INST_XID_CHAR			4			/* parameter stored in a char variable	*/
#define INST_XID_SHORT			5			/* parameter stored in a short variable	*/
#define INST_XID_LONG			6			/* parameter stored in a long variable	*/
#define INST_XID_STRING			7			/* string parameter		*/
#define INST_XID_VECTOR			8			/* binary vector parameter 	*/
#define INST_XID_BITFIELD		9			/* bitfield parameter	*/
#define INST_XID_BITFIELD_VAL	10			/* bitfield value 		*/
#define INST_XID_GROUP_VAL		11			/* group without parameters */

		/* Instruction structures & access macros */

#define Inst_common		uchar v_code

		/* Position - length */

			/* Field position in the octet (not include) : 7 6 5 4 3 2 1 0 */

#define Pl_common 	uchar  position; ushort  mask

/*-------- Instruction structure */

struct inst {
	Inst_common;		/* instruction code */
};

#define	Inst_code	((struct inst *)p_pc) -> v_code

/*----------------- XID_START instruction structure	-------------------*/

struct xid_start {
	Inst_common;        	/* instruction code */
	uchar	fi;				/* format identifier */
	Bound
};

#define XID_START_LGTH		sizeof (struct xid_start)
#define Xid_start_fi		((struct xid_start *)p_pc) -> fi

/*----------------- XID_GROUP instruction structure	-------------------*/

struct xid_group {
	Inst_common;			/* instruction code */
	uchar	gi;				/* group identifier */
	uchar 	*p_flag;		/* address used to store the presence flag */
	Bound
};

#define XID_GROUP_LGTH		sizeof (struct xid_group)
#define Xid_group_gi		((struct xid_group *)p_pc) -> gi
#define Xid_group_p_flag	((struct xid_group *)p_pc) -> p_flag

/*----------------- XID_GROUP_VAL instruction structure	---------------*/

struct xid_group_val {
	Inst_common;			/* instruction code */
	ushort	*p_gl;			/* address of Group Length */
	uchar 	*p_val;			/* address of Group Value */
	Bound
};

#define XID_GROUP_VAL_LGTH	sizeof (struct xid_group_val)
#define Xid_group_val_p_gl	((struct xid_group_val *)p_pc) -> p_gl
#define Xid_group_val_p_val	((struct xid_group_val *)p_pc) -> p_val

/*----------------- XID_CHAR instruction structure	-----------------------*/

struct xid_char {
	Inst_common;			/* instruction code */
	uchar	pi;				/* parameter identifier */
	uchar	pl;				/* parameter length */
	uchar 	*p_val;			/* address used to store the value */
	uchar 	*p_flag;		/* address used to store the presence flag */
	Bound
};

#define XID_CHAR_LGTH		sizeof (struct xid_char)
#define Xid_char_pi			((struct xid_char *)p_pc) -> pi
#define Xid_char_pl			((struct xid_char *)p_pc) -> pl
#define Xid_char_p_val		((struct xid_char *)p_pc) -> p_val
#define Xid_char_p_flag		((struct xid_char *)p_pc) -> p_flag

/*----------------- XID_SHORT instruction structure	-----------------------*/

struct xid_short {
	Inst_common;			/* instruction code */
	uchar	pi;				/* parameter identifier */
	uchar	pl;				/* parameter length */
	ushort	*p_val;			/* address used to store the value */
	uchar 	*p_flag;		/* address used to store the presence flag */
	Bound
};

#define XID_SHORT_LGTH		sizeof (struct xid_short)
#define Xid_short_pi		((struct xid_short *)p_pc) -> pi
#define Xid_short_pl		((struct xid_short *)p_pc) -> pl
#define Xid_short_p_val		((struct xid_short *)p_pc) -> p_val
#define Xid_short_p_flag	((struct xid_short *)p_pc) -> p_flag

/*----------------- XID_LONG instruction structure	-----------------------*/

struct xid_long {
	Inst_common;			/* instruction code */
	uchar	pi;				/* parameter identifier */
	uchar	pl;				/* parameter length */
	ulong	*p_val;			/* address used to store the value */
	uchar 	*p_flag;		/* address used to store the presence flag */
	Bound
};

#define XID_LONG_LGTH		sizeof (struct xid_long)
#define Xid_long_pi			((struct xid_long *)p_pc) -> pi
#define Xid_long_pl			((struct xid_long *)p_pc) -> pl
#define Xid_long_p_val		((struct xid_long *)p_pc) -> p_val
#define Xid_long_p_flag		((struct xid_long *)p_pc) -> p_flag

/*----------------- STRING instruction structure	-------------------*/

struct xid_string {
	Inst_common;        	/* instruction code */
	uchar	pi;				/* parameter identifier */
	uchar 	*p_val;			/* pointer on the internal storage of the value */
	uchar 	*p_flag;		/* address used to store the presence flag */
	Bound
};

#define XID_STRING_LGTH		sizeof (struct xid_string)
#define Xid_string_pi		((struct xid_string *)p_pc) -> pi
#define Xid_string_p_val	((struct xid_string *)p_pc) -> p_val
#define Xid_string_p_flag	((struct xid_string *)p_pc) -> p_flag

/*----------------- XID_VECTOR instruction structure-----------------------*/

struct xid_vector {
	Inst_common;       		/* instruction code */
	uchar	pi;				/* parameter identifier */
	uchar 	*p_lgth;    	/* pointer on the internal storage of the field length */
	uchar 	*p_val;			/* pointer on the internal storage of the value */
	uchar 	*p_flag;		/* address used to store the presence flag */
	Bound
};

#define XID_VECTOR_LGTH		sizeof (struct xid_vector)
#define Xid_vector_pi		((struct xid_vector *)p_pc) -> pi
#define Xid_vector_p_lgth	((struct xid_vector *)p_pc) -> p_lgth
#define Xid_vector_p_val	((struct xid_vector *)p_pc) -> p_val
#define Xid_vector_p_flag	((struct xid_vector *)p_pc) -> p_flag

/*----------------- XID_BITFIELD instruction structure---------------------*/

struct xid_bitfield {
	Inst_common;			/* instruction code */
	uchar	pi;				/* parameter identifier */
	uchar 	lgth;			/* bitfield length (in octets) */
	uchar 	*p_flag;		/* address used to store the presence flag */
	Bound
};

#define XID_BITFIELD_LGTH	sizeof (struct xid_bitfield)
#define Xid_bitfield_pi		((struct xid_bitfield *)p_pc) -> pi
#define Xid_bitfield_lgth	((struct xid_bitfield *)p_pc) -> lgth
#define Xid_bitfield_p_flag	((struct xid_bitfield *)p_pc) -> p_flag

/*----------------- XID_BITFIELD_VAL instruction structure-----------------------*/

struct xid_bitfield_val {
	Inst_common;			/* instruction code */
	Pl_common;				/* position and mask of the field in the octet */
	ushort 	*p_val;			/* address used to store the value */
	Bound
};

#define XID_BITFIELD_VAL_LGTH		sizeof (struct xid_bitfield_val)
#define Xid_bitfield_val_position	((struct xid_bitfield_val *)p_pc) -> position
#define Xid_bitfield_val_mask		((struct xid_bitfield_val *)p_pc) -> mask
#define Xid_bitfield_val_p_val		((struct xid_bitfield_val *)p_pc) -> p_val

/*----------------- XID_END instruction structure	-------------------*/

struct xid_end {
	Inst_common;        	/* instruction code */
	Bound
};

#define XID_END_LGTH		sizeof (struct xid_end)

/*--------------Macros for instructions generation --------------------*/

#define D_XID_CHAR(xx)									struct xid_char				xx;
#define D_XID_SHORT(xx)									struct xid_short			xx;
#define D_XID_LONG(xx)									struct xid_long 			xx;
#define D_XID_STRING(xx)								struct xid_string			xx;
#define D_XID_VECTOR(xx)								struct xid_vector			xx;
#define D_XID_GROUP(xx)									struct xid_group			xx;
#define D_XID_GROUP_VAL(xx)								struct xid_group_val		xx;
#define D_XID_BITFIELD(xx)								struct xid_bitfield			xx;
#define D_XID_BITFIELD_VAL(xx)							struct xid_bitfield_val		xx;
#define D_XID_END(xx)									struct xid_end				xx;};
#define D_XID_START(xx)									struct xx { struct xid_start xx;

#define XID_CHAR(		pi,	pl, 	p_val,	p_flag) 	{INST_XID_CHAR,		pi, 	pl, 				Pic_address(p_val), Pic_address(p_flag)},
#define XID_SHORT(		pi,	pl,		p_val,	p_flag) 	{INST_XID_SHORT,	pi, 	pl, 				Pic_address(p_val), Pic_address(p_flag)},
#define XID_LONG(		pi,	pl, 	p_val,	p_flag) 	{INST_XID_LONG,		pi,		pl, 				Pic_address(p_val), Pic_address(p_flag)},
#define XID_STRING(		pi,			p_val,	p_flag)		{INST_XID_STRING,	pi, 						Pic_address(p_val), Pic_address(p_flag)},
#define XID_VECTOR(		pi,	p_pl,	p_val,	p_flag)		{INST_XID_VECTOR,	pi, 	Pic_address(p_pl), 	Pic_address(p_val), Pic_address(p_flag)},
#define XID_GROUP(		gi,					p_flag)		{INST_XID_GROUP, 	gi, 											Pic_address(p_flag)},
#define XID_GROUP_VAL(		p_pl,	p_val)				{INST_XID_GROUP_VAL, 		Pic_address(p_pl), 	Pic_address(p_val)},
#define XID_BITFIELD(	pi,	pl, 			p_flag)		{INST_XID_BITFIELD,	pi,		Pic_address(pl),						Pic_address(p_flag)},
#define XID_BITFIELD_VAL(	p,	l,	p_val) 				{INST_XID_BITFIELD_VAL,	p, (ushort)Mask(l), 	Pic_address(p_val)},
#define XID_END()										{INST_XID_END} };
#define XID_START(	xx,	fi)								PIC_CONST	struct xx xx = { {INST_XID_START, 	fi},

/*-------------------------------------------------------------------------*/

					/* FUNCTION DECLARATION */

#if NEW_FCT_STYLE == ON
	uchar xid_encode	(uchar FAR *p_xid, ushort data_lgth, uchar *p_pc, uchar xid_gl_lgth, ushort *p_used_lgth);
	uchar xid_decode	(uchar FAR *p_xid, ushort data_lgth, uchar *p_pc, uchar *p_nb_id);
	uchar xid_test_gi	(uchar FAR *p_xid, ushort data_lgth, uchar fi, uchar gi);

#	if DL_SIM_ANALYSER == ON
		void pr_xid		(uchar FAR *p_xid, ushort data_lgth);
#	endif

#else
	uchar xid_encode 	();
	uchar xid_decode 	();
	uchar xid_test_gi 	();

#	if DL_SIM_ANALYSER == ON
		void pr_xid		();
#	endif

#endif

/*-------------------------------------------------------------------------*/

#endif


/*EOF*/
