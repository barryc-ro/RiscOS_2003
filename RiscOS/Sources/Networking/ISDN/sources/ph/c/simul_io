
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - simul_io.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         pr_ph_output - implements simulation of the data output
 *
 *         build_pdu_input - implements the simulation of the data input
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Generic PH interface                             |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1996 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/



#include "services.h"

#if SIMULATION == ON
#include "simul.h"

				/* Static variables */

static char 	g_action[2];	/* action code */

			/* printing formats */

#define Mg_action	Prompt	("action code (Data, State)", c, g_action[0]);\
					Scan	(1s, g_action);\
					Echo	(c, g_action[0])

#define Mg_state	Prompt	("                  F-state", u, ph_state);\
					Scan	(d, &ph_state);\
					Echo	(u, ph_state)


		/* PH_D entity parameters */

uint	ph_state;						/* state of the physical link */
uint	ph_input_size;					/* size of the I/O transfer */
uchar FAR	*p_ph_input;				/* address of the I/O transfer */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			build_pdu_input - implements the simulation of an IO transfer.

Usage           uchar build_pdu_input ();

Return value : 	returns = OK
						= NOK

Common constants and declarations : dl.h

*--------------------------------------------------------------------------*/

ushort build_pdu_input ()
{
	mg_nai ();


start:

	Mg_action;
	g_action[0] = Toupper (g_action[0]);

	switch (g_action[0]) {

		case 'D' :
			mg_sapi ();
			break;

		default :
			mg_err ("simul_input");
			return (0);
	}

	Free_msg (p_snd_msg);
	p_snd_msg 	= P_NIL;
	p_buffer 	= P_NIL;
	return (1);

}
/*-------------------------------------------------------------------------*/

#define Pr_ph		fprintf (f_out, "\n\nI/O OUTPUT : ")

extern 	uint 		ph_io_output;			/* I/O print flag */

void pr_ph_output (p_output, output_size)
	uchar *p_output;
	uint output_size;

{

	if ((ph_io_output == ON) && (print_flag == ON)){
		Pr_ph;
		pr_data (p_output, output_size, output_size);
	}

}

#endif

/*EOF*/
