
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ph_loop.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         ph_loop - implements the looping back of the incoming data in
 *                   the physical entity (Na 0 ===> Na 1).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Generic PH interface                             |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1996 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"
#include "ph.h"

		/* Parameters */

#define NAI_DTE			0
#define NAI_DCE			1

			/* Copyright */

CONST char 			ph_copyright[]	= "Copyright (c) 1989 - 1990 by OMNITEL SA - All Rights Reserved";
CONST char 			ph_licence[]	= LICENSE_NBER;

			/* PH common context */

Entity_common (ph);					/* PH entity's common variables */

	uchar	act_flag;
	ushort	i_frame_counter = 0;
	ushort	ph_lost_i_frame;
	ushort	ph_i_frame;

	struct message FAR *p_msg;

#if NEW_FCT_STYLE == ON
	void	ph_echo			(code_t code);
	void	ph_save_rcv		(void);
	void	ph_load_rcv		(void);
	void	ph_nai_permut   (void);
#else
	void	ph_echo			();
	void	ph_save_rcv		();
	void	ph_load_rcv		();
	void	ph_nai_permut   ();
#endif

uchar ph_loop (p_msg)
	struct message	FAR *p_msg;
{
	struct buffer	FAR *p_buff;
	uchar			FAR *p_data;		/* data pointer */

	p_rcv_msg	= p_msg;
	p_snd_msg	= P_NIL;
	p_buffer	= R_msg_p_buffer;
	p_data		= R_a_data;

	switch (R_msg_code) {

		case PH_ACT_RQ :

			if (act_flag == ON) {
				ph_save_rcv ();
				ph_echo (PH_ACT_IN);
				ph_load_rcv ();
				ph_nai_permut ();
				ph_echo (PH_ACT_IN);
			}
			else {
				act_flag = ON;
			}

			break;

		case PH_DEA_RQ :
			ph_echo (PH_DEA_IN);
			break;

		case PH_DA_RQ :

			if (R_msg_lib == OFF) {

				if ((i_frame_counter++ < ph_i_frame) || (ph_i_frame == 0)) {
					p_msg		= Alloc_msg ();
					Memcpy_far ((char FAR *)p_msg, (char FAR *)p_rcv_msg, Message_lgth);
					p_rcv_msg	= p_msg;

					if (R_msg_p_buffer != P_NIL) {
						p_buff		= Alloc_buffer ();
						Memcpy_far ((char FAR *)p_buff, (char FAR *)p_buffer, Buffer_lgth);
						p_buffer 	= p_buff;
						R_msg_init_link_buffer;
					}

					R_msg_lib	= ON;
				}
				else if (i_frame_counter == ph_i_frame + ph_lost_i_frame) {
					i_frame_counter = 0;
					break;
				}
				else {
					break;
				}

			}

			ph_nai_permut ();
			ph_echo (PH_DA_IN);
			break;

		case PH_DETECTION_RQ :

			if (Ph_detection_rq_lapm == ON) {
				Ph_detection_in_ec	= EC_LAPM;

			} else if (Ph_detection_rq_mnp4 == ON) {
				Ph_detection_in_ec	= EC_MNP4_START_STOP;

			} else {
				Ph_detection_in_ec	= EC_NIL;
			}

			ph_save_rcv ();
			ph_echo (PH_DETECTION_IN);
			ph_load_rcv ();
			ph_nai_permut ();
			ph_echo (PH_DETECTION_IN);
			break;

		case MPH_INIT_RQ :

			ph_echo (MPH_INIT_CO);
			break;

		default :
			break;

	}

	Free_msg (p_rcv_msg);
	Free_msg (p_snd_msg);

	return (OK);

}

/*-------------------------------------------------------------------------*/

void ph_echo (code)
	code_t	code;
{
	R_msg_code	= code;
	R_msg_to	= R_msg_from;
	R_msg_from	= ENT_PH_GSTN;
	Send_message (p_rcv_msg), p_rcv_msg = P_NIL;
}

/*-------------------------------------------------------------------------*/

void ph_save_rcv ()
{
	struct buffer	FAR *p_buff;
	struct buffer	FAR *p_buffer_sav;

	p_msg = Alloc_msg ();

	Memcpy_far ((char FAR *)p_msg, (char FAR *)p_rcv_msg, Message_lgth);

	if (R_msg_p_buffer != P_NIL) {
		p_buff		= Alloc_buffer ();
		Memcpy_far ((char FAR *)p_buff, (char FAR *)p_buffer, Buffer_lgth);
		p_buffer_sav= p_buffer;
		p_buffer 	= p_buff;
		L_msg_init_link_buffer;
		p_buffer	= p_buffer_sav;
	}

}

/*-------------------------------------------------------------------------*/

void ph_load_rcv ()
{
	p_rcv_msg = p_msg;
	p_buffer  = R_msg_p_buffer;
}

/*-------------------------------------------------------------------------*/

 void ph_nai_permut ()
{
	R_msg_nai = (R_msg_nai == NAI_DTE) ? NAI_DCE : NAI_DTE;
}

/*EOF*/
