
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ph_int.h
 *
 * $Revision$
 *
 * $Date$
 *
 *	Header implementing the	upper interface of the PHYSICAL layer of
 *  the OMNITEL_BRICKS packages.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    Generic PH interface                             |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1996 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef PH_INT_H
#define PH_INT_H

#include "ph_par.h"

/*-------------------------------------------------------------------------*/

			/* 'PH_D_MODE' option values */

#define MODE_IT					'I'					/* Interrupt */
#define MODE_BG					'B'					/* Background */
#define MODE_TIMER				'T'					/* interval timer */

/*-------------------------------------------------------------------------*/

			/* DL TEI : Terminal Endpoint ID */

#define DL_TEI_BROADCAST		127					/* broadcast TEI */
#define DL_TEI_AUTOMATIC_LOW	64					/* lower limit for automatic TEI assignement */
#define DL_TEI_AUTOMATIC_UP		126					/* upper limit for automatic TEI */
#define DL_TEI_INVALID			0					/* used with a BRI as invalid TEI */
#define DL_TEI_POINT_TO_POINT	0					/* non automatic TEI assigned to a point to point configuration */
#define DL_TEI_NIL				255					/* null value for TEI */

			/* PH_D and PH_B addressing parameters */

					/* PH SAPI : Service Access Point ID */

#define PH_SAPI_MPH				254					/* SAPI management */
#define PH_SAPI_D				0					/* SAPI channel D for signalling */
#define PH_SAPI_B				1					/* SAPI channel B data or voice transfer */
#define PH_SAPI_GSTN			2					/* SAPI channel for GSTN */
#define PH_SAPI_NIL				SAPI_NIL			/* SAPI NIL */

					/* PH CHANI : Channel ID */

#define PH_CHANI_D				0					/* channel D */
#define PH_CHANI_GSTN			0					/* GSTN line */
#define PH_CHANI_NIL			ADD_NIL				/* Chani NIL */

#define PRI_CHANNEL_D			16					/* slot D channel for PRI */

					/* PH_GSTN LAPM channel */

#define PH_CHANI_LAPM			0					/* LAPM channel Id */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*    Message codes    */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

			/*--------------------------------------------------*/

					/* PH <-> DL */

#define PH_ACT_RQ				'A'					/* request activation of the physical layer */
#define PH_ACT_IN				'a'					/* indication of activation of the physical layer */

#define PH_DEA_RQ				'B'					/* request deactivation of the physiacl layer */
#define PH_DEA_IN				'b'					/* indication of deactivation of the physical layer */

#define PH_DA_RQ				'C'					/* request passing message unit containing frames to the physical layer */
#define PH_DA_IN				'c'					/* indication of passing message unit containing frames from physical layer */

#define PH_DETECTION_RQ			'D'					/* request detection phase */
#define PH_DETECTION_IN			'd'					/* indicate detection phase */

#define PH_CLEAR_RQ				'E'					/* request clearance of the TX queue */
#define PH_CLEAR_CO				'e'					/* confirm clearance of the TX queue */

#define PH_BUSY_RQ				'('					/* busy request */
#define PH_BUSY_IN				')'					/* busy indication */

#define PH_CLEAR_BUSY_RQ		'['					/* clear busy request */
#define PH_CLEAR_BUSY_IN		']'					/* clear busy indication */

#define PH_INT_SYNC_RQ			'+'					/* request flow interface synchronization */
#define PH_INT_SYNC_CO			'-'					/* confirm flow interface fsynchronisation */

#define PH_COMMIT_RQ			'X' 				/* request commitment */
#define PH_COMMIT_CO			'x'					/* commitment confirm */

#define PH_POLL_RQ				'V'					/* request starting of multipoint PH polling cycle */
#define PH_POLL_CO				'v'					/* confirm end of multipoint PH polling cycle */

#define PH_EVENT_IN				'y'					/* Event indication */

#define PH_TX_DONE_IN			'z'					/* indicate transmit done (for optional T200 delaying) */

#define PH_DEVICE_RQ			'{'					/* Device request */
#define PH_DEVICE_RS			'!'					/* Device response */
#define PH_DEVICE_IN			'?'					/* Device indication */
#define PH_DEVICE_CO			'}'					/* Device confirm */

			/*--------------------------------------------------*/

					/* PH_B, MPH_B <-----> DL, SM */

#define PH_B_ACT_RQ				'A'					/* request activation */
#define PH_B_ACT_IN				'a'					/* indication of activation of the physical layer */

#define PH_B_DEA_RQ				'B'					/* request deactivation of the physiacl layer */
#define PH_B_DEA_IN				'b'					/* indication of deactivation of the physical layer */

#define PH_B_DA_RQ				'C'					/* request passing message unit containing frames to the physical layer */
#define PH_B_DA_IN				'c'					/* indication of passing message unit containing frames from physical layer */

#define PH_B_CLEAR_RQ			'E'					/* request clearnce of the TX queue */
#define PH_B_CLEAR_CO			'e'					/* confirm clearance of the TX queue */

#define PH_B_BUSY_RQ			'('					/* busy request */
#define PH_B_BUSY_IN			')'					/* busy indication */

#define PH_B_CLEAR_BUSY_RQ		'['					/* clear busy request */
#define PH_B_CLEAR_BUSY_IN		']'					/* clear busy indication */

#define PH_B_INT_SYNC_RQ		'+'					/* request flow interface synchronization */
#define PH_B_INT_SYNC_CO		'-'					/* confirm flow interface fsynchronisation */

#define PH_B_COMMIT_RQ			'X' 				/* request commitment */
#define PH_B_COMMIT_CO			'x'					/* commitment confirm */

#define PH_B_EVENT_IN			'y'					/* event indication */

#define PH_B_TX_DONE_IN			'z'					/* indicate transmit done */

#define PH_B_DEVICE_RQ			'{'					/* Device request */
#define PH_B_DEVICE_RS			'!'					/* Device response */
#define PH_B_DEVICE_IN			'?'					/* Device indication */
#define PH_B_DEVICE_CO			'}'					/* Device confirm */

			/*--------------------------------------------------*/

					/* V.25bis signalling */

#define PH_V25_RQ				'>'					/* V.25bis signalling request */
#define PH_V25_IN				'<'					/* V.25bis signalling indication */

#define PH_V25_REG_RQ			'$'					/* V.25bis signalling registration request*/
#define PH_V25_REG_CO			'&'					/* V.25bis signalling registration confirm */

			/*--------------------------------------------------*/

					/* MPH <-> PH, MDL */

#define MPH_SET_CONFIG_RQ	 	'F'					/* request MPH entity set configuration */
#define MPH_SET_CONFIG_CO	 	'f'					/* confirm MPH entity set configuration */

#define MPH_RESET_CONFIG_RQ	 	'G'					/* request MPH entity reset configuration */
#define MPH_RESET_CONFIG_CO	 	'g'					/* confirm MPH entity reset configuration */

#define MPH_INIT_RQ				'H'					/* request PH entity initialization */
#define MPH_INIT_CO				'h'					/* confirm PH entity initialization */

#define MPH_STOP_RQ				'I'					/* request PH stop access */
#define MPH_STOP_CO				'i'					/* confirm PH stop access */

#define MPH_ACT_RQ				'J'					/* request activation of the physical layer */
#define MPH_ACT_IN				'j'					/* indication of activation of the management entity */

#define MPH_DEA_RQ				'K'					/* request deactivation */
#define MPH_DEA_IN				'k'					/* indication of deactivation of the management entity */

#define MPH_EI0_IN              'u'                 /* indication of error (reporting error) to management entity */
#define MPH_EI1_IN 				'l' 				/* indication of error (reporting error) to management entity */
#define MPH_EI2_IN              'm'                 /* indication of error (reporting recovery from error) to management entity */
#define MPH_EI3_IN              'v'                 /* indication of error (reporting error) to management entity */
#define MPH_EI4_IN              'w'                 /* indication of error (reporting recovery from error) to management entity */

#define MPH_II_C_IN				'n'                 /* indication of information (connected) to management entity */
#define MPH_II_D_IN				'o'                 /* indication of information (disconnected) to management entity */

#define MPH_IT_ERR_IN			'p'					/* indication of error from MPH IT entity */
#define MPH_IT_STATUS_IN		'q'					/* indication of a change of state from MPH IT entity */
#define MPH_IT_EVENT_IN			'r'					/* receipt of an event from MPH IT entity */

#define MPH_ABORT_IN			't'					/* abort the current frame */

#define MPH_INFO_RQ				'U'					/* Information request */
#define MPH_INFO_CO				'u'					/* Information confirm */

#define MPH_DL_DLCI_RQ			'Y'					/* DLCI management */

#define MPH_DEVICE_RQ			'{'					/* Device request */
#define MPH_DEVICE_RS			'!'					/* Device response */
#define MPH_DEVICE_IN			'?'					/* Device indication */
#define MPH_DEVICE_CO			'}'					/* Device confirm */

#define MPH_ROUTE_RQ			'W'					/* MPH Route request */
#define MPH_ROUTE_CO			'w'					/* MPH Route confirm */

			/*--------------------------------------------------*/

					/* MPH_B <-> MPH, PH_B, MDL */

#define MPH_B_SET_CONFIG_RQ	 	'F'					/* request MPH entity set configuration */
#define MPH_B_SET_CONFIG_CO	 	'f'					/* confirm MPH entity set configuration */

#define MPH_B_RESET_CONFIG_RQ	'G'					/* request MPH entity reset configuration */
#define MPH_B_RESET_CONFIG_CO	'g'					/* confirm MPH entity reset configuration */

#define MPH_B_INIT_RQ			'H'					/* request PH entity initialization */
#define MPH_B_INIT_CO			'h'					/* confirm PH entity initialization */

#define MPH_B_STOP_RQ			'I'					/* request PH stop access */
#define MPH_B_STOP_CO			'i'					/* confirm PH stop access */

#define MPH_B_ACT_RQ			'J'					/* request activation of the physical layer */
#define MPH_B_ACT_IN			'j'					/* indication of activation of the management entity */

#define MPH_B_DEA_RQ			'K'					/* request deactivation */
#define MPH_B_DEA_IN			'k'					/* indication of deactivation of the management entity */

#define MPH_B_II_C_IN 			'n' 				/* indication of information (connected) to management entity */
#define MPH_B_II_D_IN			'o'                 /* indication of information (disconnected) to management entity */

#define MPH_B_SWITCH_RQ			'S'					/* switch B channel request */

#define MPH_B_DEVICE_RQ			'{'					/* Device request */
#define MPH_B_DEVICE_RS			'!'					/* Device response */
#define MPH_B_DEVICE_IN			'?'					/* Device indication */
#define MPH_B_DEVICE_CO			'}'					/* Device confirm */

#define MPH_B_ROUTE_RQ			'W'					/* MPH Route request */
#define MPH_B_ROUTE_CO			'w'					/* MPH Route confirm */

			/*--------------------------------------------------*/

						/* PH timer messages */

#define TI_100					'0'					/* timer 100 expired (ok to try activation) PH_D PH_G */
#define TI_101					'1'					/* async. mode data RX timer expired		PH_G */
#define TI_102					'2'					/* Modem carrier down detect timer expired  PH_G */
#define TI_103					'3'					/* timer 103 expired (level 1 T3)           PH_D PH_G PH_B */
#define TI_104					'4'					/* timer 104 expired (level 1 T4)           PH_D PH_G */
#define TI_105					'5'					/* timer 105 expired (level 1 T5)           PH_D */
#define TI_196					'6'					/* supervision enquiry timer ID */
#define TI_197					'7'					/* supervision response timer ID */
#define TI_198					'8'					/* timer 198 expired (level 1 state poll)   PH_D */
#define TI_199					'9'					/* TX watch dog timer ID                    PH_G PH_D */

			/*--------------------------------------------------*/

						/* PH IT messages */

#define PH_IT_START_WD_IN 		'a'					/* Start TX watch dog indication */
#define PH_IT_XMIT_IN			'b'					/* transmit done indication */
#define PH_IT_RCV_IN			'c'					/* receive done indication */
#define PH_IT_DEA_IN			'd'					/* Deactivation indication */
#define PH_IT_ERR_IN			'e'					/* indication of error from PH IT entity */
#define PH_IT_STATUS_IN			'f'					/* indication of a change of state from MPH IT entity */
#define PH_IT_EVENT_IN			'g'					/* receipt of an event from PH IT entity */

#define PH_B_IT_START_WD_IN 	'a'					/* Start TX watch dog indication */
#define PH_B_IT_XMIT_IN			'b'					/* transmit done indication */
#define PH_B_IT_RCV_IN			'c'					/* receive done indication */
#define PH_B_IT_DEA_IN			'd'					/* Deactivation indication */
#define PH_B_IT_ERR_IN			'e'					/* indication of error from PH IT entity */
#define PH_B_IT_STATUS_IN		'f'					/* indication of a change of state from MPH IT entity */
#define PH_B_IT_EVENT_IN		'g'					/* receipt of an event from PH IT entity */

#define PH_D_IT_START_WD_IN 	'a'					/* Start TX watch dog indication */
#define PH_D_IT_XMIT_IN			'b'					/* transmit done indication */
#define PH_D_IT_RCV_IN			'c'					/* receive done indication */
#define PH_D_IT_DEA_IN			'd'					/* Deactivation indication */
#define PH_D_IT_ERR_IN			'e'					/* indication of error from PH IT entity */
#define PH_D_IT_STATUS_IN		'f'					/* indication of a change of state from MPH IT entity */
#define PH_D_IT_EVENT_IN		'g'					/* receipt of an event from PH IT entity */

						/* PH LAPX extra messages */

#define PH_TX_RQ				'Q'					/* [SEIZE] LAPX has stopped waiting for data to be
													   received and is waiting to transmit data */
#define PH_TX_IN				'q'					/* [XMT] PH is able to transmit */


#define PH_RX_RQ				'R'					/* [RELEASE] LAPX has stopped sending data and
													   is requesting to release the rigth to transmit */
#define PH_RX_IN				'r'					/* [REMOTE] remote PH accepts the right to transmit */

#define PH_TX_RIGHT_IN			'u'					/* [LOCAL] PH detects the right to transmit */

						/* PH GSTN extra messages */

#define MPH_G_INIT_RQ			'H'					/* request PH GSTN entity initialization (data mode) */
#define MPH_G_INIT_CO			'h'					/* confirm PH GSTN entity initialization */

#define MPH_G_STOP_RQ			'I'					/* request PH stop access */
#define MPH_G_STOP_CO			'i'					/* confirm PH stop access */

#define MPH_G_ERROR_IN			'l'					/* indicates an error in fcs received (sent only with MNP4 EC) */

#define PH_SIGNAL_RQ			'Y'					/* request transmission of a break (space) in asynchronous mode */
#define PH_SIGNAL_IN			'y'					/* indicates the reception of a break (space) in asynchronous mode */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-=-=-*/
					/*                         */
					/* PH FIFO mark management */
					/*                         */
					/*-=-=-=-=-=-=-=-=-=-=-=-=-*/

#define Msg_set_in_ph_fifo_mark(p_msg)				p_msg -> p_services = P_NIL
#define Msg_reset_in_ph_fifo_mark(p_msg)			p_msg -> p_services = P_FIFO_FREE

#if SIMULATION == OFF
#	define Msg_in_ph_fifo(p_msg)					(p_msg -> p_services != P_FIFO_FREE)
#else
#	define Msg_in_ph_fifo(p_msg)					(FALSE)
#endif

#define P_FIFO_FREE									(void FAR *)1

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*     PH_ACT_RQ/IN    */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Ph_act_size

struct ph_act {
	uchar	tx_done;            			/*    in  - transmit done (PH_TX_DONE_IN) primitive requested : ON or OFF */
	uchar	role;							/* rq     - Role (originator or answerer) */
	uchar	modem_type;						/* rq in  - Modem type */
	uchar	duplex_mode;					/* rq in  - Duplex mode */
	ushort	speed;							/* rq in  - speed in bauds */
	uchar	leased_line;					/* rq     - leased line (ON) or dial-up (OFF) */
	uchar	answer_tone;					/* rq     - answer tone (V25) ENABLE or DISABLE */
	uchar	guard_tone;						/* rq     - 1800 Hz guard tone (ON/OFF) */
	uchar	handshake;						/* rq     - handshake procedure (AUTOMATIC_HANDSHAKE..) */
	timer_val_t	cd_on;						/* rq     - minimum duration for Carrier on  */
	timer_val_t	cd_off;						/* rq     - minimum duration for Carrier off */
	struct ph_fc_cell FAR *p_ph_fc_tx;		/* pointer to the TX flow control cell or P_NIL (unused) */
	struct ph_fc_cell FAR *p_ph_fc_rx;		/* pointer to the RX flow control cell or P_NIL (unused) */
	struct ph_stream  FAR *p_ph_stream;		/* pointer to the stream cell */
	uchar	x_ph_stream;					/* context index */
	ent_id_t layer_3_ent_id;				/* layer 3 entity Id */

	struct modem_par {
		ushort  low_speed;                  /* rq in  - Min Data rate                                                 */
											/*                                                                        */
		uchar   v8_enabled;                 /* rq in  - if == ON then V8 enabled                                      */
		uchar   v8_cellular;                /* rq in  - if == ON then set cellular parameter in V8 infos              */
		uchar   v8_v42_protocol;            /* rq in  - if == ON then set V42 parameter in V8 infos                   */
											/*      These 2 parmeters are used only if v8_enabled is ON               */
	} modem_param;

};

#define Ph_act_						((struct ph_act FAR *)p_data) ->
#define Ph_act_tx_done				Ph_act_ tx_done
#define Ph_act_role					Ph_act_ role
#define Ph_act_modem_type			Ph_act_ modem_type
#define Ph_act_duplex_mode			Ph_act_ duplex_mode
#define Ph_act_speed				Ph_act_ speed
#define Ph_act_leased_line			Ph_act_ leased_line
#define Ph_act_answer_tone			Ph_act_ answer_tone
#define Ph_act_guard_tone			Ph_act_ guard_tone
#define Ph_act_handshake			Ph_act_ handshake
#define Ph_act_cd_on				Ph_act_ cd_on
#define Ph_act_cd_off				Ph_act_ cd_off

#define Ph_act_p_ph_fc_tx			Ph_act_ p_ph_fc_tx
#define Ph_act_p_ph_fc_rx			Ph_act_ p_ph_fc_rx

#define Ph_act_p_ph_stream			Ph_act_ p_ph_stream
#define Ph_act_x_ph_stream			Ph_act_ x_ph_stream

#define Ph_act_layer_3_ent_id	 	Ph_act_ layer_3_ent_id

#define Ph_act_low_speed            Ph_act_ modem_param.low_speed
#define Ph_act_v8_enabled           Ph_act_ modem_param.v8_enabled
#define Ph_act_v8_cellular          Ph_act_ modem_param.v8_cellular
#define Ph_act_v8_v42_protocol      Ph_act_ modem_param.v8_v42_protocol

#define Ph_act_size					sizeof (struct ph_act)

	/* 'role' field values */

#define DXE_ORIGINATOR              'O'     /* Calling DTE/DCE */
#define DXE_ANSWERER                'A'     /* Called  DTE/DCE */

	/* 'modem_type' field values */

										  /* +---------+-----------------------+     */
										  /* : MOTOROLA|     ROCKWELL          :     */
										  /* :         +-------+-------+-------+     */
										  /* :  DP356  |  RC96 : RC144 : RC288 :     */
										  /* +---------+-------+-------+-------+     */
										  /* :         |       :       :       :     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_B103             103   /* :   YES   |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_B212A            212   /* :   YES   |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_B208             208   /* :         |       :       :  YES  :     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V17              17    /* :   YES   |       :  YES a:  YES a:     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V21              21    /* :   YES   |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_V21_CH2          121   /* :   YES   |  YES a:  YES a:  YES a:>>FAX*/
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V22              22    /* :   YES   |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_V22_BIS          122   /* :   YES   |  YES  :  YES  :  YES  :     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V23              23    /* :   YES   |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_V23_TX75         123   /* :   YES   |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_V23_RX75         223   /* :   YES   |  YES  :  YES  :  YES  :     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V26              26    /* :         |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_V26_BIS          126   /* :         |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_V26_TER          226   /* :         |       :       :       :     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V27              27    /* :   YES   |       :       :       :     */
#define MODEM_TYPE_V27_BIS          127   /* :         |       :       :       :     */
#define MODEM_TYPE_V27_TER          227   /* :   YES   |  YES a:  YES a:  YES a:     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V29              29    /* :   YES   |  YES a:  YES a:  YES a:     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V32              32    /* :   YES   |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_ROCKWELL_V32     232   /* :         |  YES  :  YES  :  YES  :     */
#define MODEM_TYPE_V32_BIS          132   /* :   YES   |       :  YES  :  YES  :     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V33              33    /* :   YES   |       :       :  YES  :     */
										  /* :         |       :       :       :     */
#define MODEM_TYPE_V34              34    /* :   YES   |       :       :  YES  :     */
#define MODEM_TYPE_VFC				35	  /* :         |       :       :  YES  :     */
										  /* +---------+-------+-------+-------+     */
					  /* Note a: Data pump with fax option                           */
					  /*                                                             */
					  /* MD68DP356 (Data pump Firmware version: 0, 0, 0 January 95)  */
					  /*                                                             */
					  /*                                                             */
					  /* MODEM_TYPE_V26: V26 alternative A                           */
					  /* MODEM_TYPE_ROCKWELL_V32: Authorized speeds 2400, 4800, 9600,*/
					  /*                          9600TCM, 7200 and 12000            */
					  /*              Warning: it is an unstandard modulation        */
					  /*                                                             */
					  /* Rk: The fax modulation (V17, V21 Channel 2, ...) should be  */
					  /*     actived with this primitive BUT there is a specific     */
					  /*     interface (described in PH_G_INT.H) which compatible    */
					  /*     with the FAX Bricks and which is more adaptated to the  */
					  /*     fax management ...                                      */

#define MODEM_TYPE_NOT_DETECTED     0     /* handshake procedure failed (Internal used) */

	/* 'handshake' field values */

#define AUTOMATIC_HANDSHAKE            'A'                  /* Automatic modem detection handshake procedure               */
#define AUTOMATIC_HANDSHAKE_V32BIS_V21  AUTOMATIC_HANDSHAKE /* Modulation tried: V32Bis, V32, V22Bis, V22, V23, V21        */
#define AUTOMATIC_HANDSHAKE_V34_V21    'B'                  /* Automatic modem detection handshake procedure               */
															/* Modulation tried: V34, V32Bis, V32, V22Bis, V22, V23, V21   */
#define NO_HANDSHAKE                   'N'					/* No handshake procedure */
#define REQUESTED_MODEM_HANDSHAKE	   'M'                  /* Handshake procedure attempted with the modem type parameter */
															/* (defined in field: modem_type)                              */

	/* 'speed', 'low_speed' fields values */

#define MAX_DATA_RATE            		0xFFFF
#define MIN_DATA_RATE            		0

	/* 'duplex_mode' fields values */

#define HALF_DUPLEX                 	G_1 (0)
#define FULL_DUPLEX                 	G_1 (1)

#endif /* #ifndef Ph_act_size */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*   PH_B_ACT_RQ/IN    */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Ph_b_act_size

struct	ph_b_act {
	uchar	tx_done;            			/*    in  - transmit done (PH_TX_DONE_IN) primitive requested : ON or OFF */
	uchar	role;							/* rq     - Role (originator or answerer) */
	uchar	modem_type;						/* rq in  - Modem type */
	uchar	duplex_mode;					/* rq in  - Duplex mode */
	ushort	speed;							/* rq in  - speed in bauds */
	uchar	leased_line;					/* rq     - leased line (ON) or dial-up (OFF) */
	uchar	answer_tone;					/* rq     - answer tone (V25) ENABLE or DISABLE */
	uchar	guard_tone;						/* rq     - 1800 Hz guard tone (ON/OFF) */
	uchar	handshake;						/* rq     - handshake procedure (AUTOMATIC_HANDSHAKE..) */
	timer_val_t	cd_on;						/* rq     - minimum duration for Carrier on  */
	timer_val_t	cd_off;						/* rq     - minimum duration for Carrier off */
	struct ph_b_fc_cell FAR *p_ph_fc_tx;	/* pointer to the TX flow control cell or P_NIL (unused) */
	struct ph_b_fc_cell FAR *p_ph_fc_rx;	/* pointer to the RX flow control cell or P_NIL (unused) */
	struct ph_b_stream  FAR *p_ph_stream;	/* pointer to the stream cell */
	uchar	x_ph_stream;					/* context index */
	ent_id_t layer_3_ent_id;				/* layer 3 entity Id */
};

#define Ph_b_act_					((struct ph_b_act FAR *)p_data) ->
#define Ph_b_act_tx_done			Ph_b_act_ tx_done
#define Ph_b_act_role				Ph_b_act_ role
#define Ph_b_act_modem_type			Ph_b_act_ modem_type
#define Ph_b_act_duplex_mode		Ph_b_act_ duplex_mode
#define Ph_b_act_speed				Ph_b_act_ speed
#define Ph_b_act_leased_line		Ph_b_act_ leased_line
#define Ph_b_act_answer_tone		Ph_b_act_ answer_tone
#define Ph_b_act_guard_tone			Ph_b_act_ guard_tone
#define Ph_b_act_handshake			Ph_b_act_ handshake
#define Ph_b_act_cd_on				Ph_b_act_ cd_on
#define Ph_b_act_cd_off				Ph_b_act_ cd_off

#define Ph_b_act_p_ph_fc_tx			Ph_b_act_ p_ph_fc_tx
#define Ph_b_act_p_ph_fc_rx			Ph_b_act_ p_ph_fc_rx

#define Ph_b_act_p_ph_stream		Ph_b_act_ p_ph_stream
#define Ph_b_act_x_ph_stream		Ph_b_act_ x_ph_stream

#define Ph_b_act_layer_3_ent_id	 	Ph_b_act_ layer_3_ent_id

#define Ph_b_act_size				sizeof (struct ph_b_act)

#endif /* #ifndef Ph_b_act_size */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/* B channels :        */
					/*                     */
					/* Activation /        */
					/* Deactivation :      */
					/*                     */
					/*     MPH_B_ACT_RQ    */
					/*     MPH_B_DEA_RQ    */
					/*                     */
					/* Alias Init/Stop :   */
					/*                     */
					/*     MPH_B_INIT_RQ   */
					/*     MPH_B_STOP_RQ   */
					/*                     */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Mph_b_activation_size

#ifndef PH_MX_CHANI
#define PH_MX_CHANI			30		/* number of B-channels in the list */
#endif

struct mph_b_activation {
	uchar	chan_id;				/* channel Id */
	uchar	mode;					/* Mode */
	uchar	rate;					/* rate */
	uchar	intermediate_rate;		/* intermediate rate */
	uchar	nic_tx;					/* NIC on Tx */
	uchar	nic_rx;					/* Nic on Rx */
	uchar	fc_tx;					/* flow control on Tx */
	uchar	fc_rx;					/* flow control on Rx */
	uchar	layer_2_ent_id;			/* layer 2 entity Id */
	uchar	layer_3_ent_id;			/* layer 3 entity Id */
	uchar	stop_bit_nb;			/* number of stop bits */
	uchar	data_bit_nb;       	    /* number of data bits */
	uchar	parity;					/* parity */
	uchar	syn_asyn;				/* synchronous/asynchronous */

		/* B-channels list for Multi-channels modes */

	struct {
		uchar	chan_nb;			/* number of B-channels in the list */
		uchar	chan_list [PH_MX_CHANI]; /* list of channels */
	} chan_id_list;

};

#define Mph_b_activation_						((struct mph_b_activation FAR *)p_data) ->
#define Mph_b_activation_mode					Mph_b_activation_ mode
#define Mph_b_activation_chan_id				Mph_b_activation_ chan_id
#define Mph_b_activation_chan_nb				Mph_b_activation_ chan_id_list.chan_nb
#define Mph_b_activation_chan_list(i)			Mph_b_activation_ chan_id_list.chan_list[i]
#define Mph_b_activation_rate					Mph_b_activation_ rate
#define Mph_b_activation_intermediate_rate		Mph_b_activation_ intermediate_rate
#define Mph_b_activation_nic_tx					Mph_b_activation_ nic_tx
#define Mph_b_activation_nic_rx					Mph_b_activation_ nic_rx
#define Mph_b_activation_fc_tx					Mph_b_activation_ fc_tx
#define Mph_b_activation_fc_rx					Mph_b_activation_ fc_rx
#define Mph_b_activation_layer_2_ent_id			Mph_b_activation_ layer_2_ent_id
#define Mph_b_activation_layer_3_ent_id			Mph_b_activation_ layer_3_ent_id
#define Mph_b_activation_stop_bit_nb			Mph_b_activation_ stop_bit_nb
#define Mph_b_activation_data_bit_nb			Mph_b_activation_ data_bit_nb
#define Mph_b_activation_parity					Mph_b_activation_ parity
#define Mph_b_activation_syn_asyn				Mph_b_activation_ syn_asyn
#define Mph_b_activation_size					sizeof (struct mph_b_activation)

#endif /* #ifndef Mph_b_activation_size */

	/* Alias for MPH_B_INIT_RQ/MPH_B_STOP_RQ */

#ifndef Mph_b_init_size

struct mph_b_init {
	uchar	chan_id;				/* channel Id for Single B-channel modes */
	uchar	mode;					/* Mode */
	uchar	rate;					/* rate */
	uchar	intermediate_rate;		/* intermediate rate */
	uchar	nic_tx;					/* NIC on Tx */
	uchar	nic_rx;					/* Nic on Rx */
	uchar	fc_tx;					/* flow control on Tx */
	uchar	fc_rx;					/* flow control on Rx */
	uchar	layer_2_ent_id;			/* layer 2 entity Id */
	uchar	layer_3_ent_id;			/* layer 3 entity Id */
	uchar	stop_bit_nb;			/* number of stop bits */
	uchar	data_bit_nb;       	    /* number of data bits */
	uchar	parity;					/* parity */
	uchar	syn_asyn;				/* synchronous/asynchronous */

		/* B-channels list for Multi-channels modes */

	struct {
		uchar	chan_nb;			/* number of B-channels in the list */
		uchar	chan_list [PH_MX_CHANI]; /* list of channels */
	} chan_id_list;

};

#define Mph_b_init_								((struct mph_b_init FAR *)p_data) ->
#define Mph_b_init_mode							Mph_b_init_ mode
#define Mph_b_init_chan_id						Mph_b_init_ chan_id
#define Mph_b_init_chan_nb						Mph_b_init_ chan_id_list.chan_nb
#define Mph_b_init_chan_list(i)					Mph_b_init_ chan_id_list.chan_list[i]
#define Mph_b_init_rate							Mph_b_init_ rate
#define Mph_b_init_intermediate_rate			Mph_b_init_ intermediate_rate
#define Mph_b_init_nic_tx						Mph_b_init_ nic_tx
#define Mph_b_init_nic_rx						Mph_b_init_ nic_rx
#define Mph_b_init_fc_tx						Mph_b_init_ fc_tx
#define Mph_b_init_fc_rx						Mph_b_init_ fc_rx
#define Mph_b_init_layer_2_ent_id				Mph_b_init_ layer_2_ent_id
#define Mph_b_init_layer_3_ent_id				Mph_b_init_ layer_3_ent_id
#define Mph_b_init_stop_bit_nb					Mph_b_init_ stop_bit_nb
#define Mph_b_init_data_bit_nb					Mph_b_init_ data_bit_nb
#define Mph_b_init_parity						Mph_b_init_ parity
#define Mph_b_init_syn_asyn						Mph_b_init_ syn_asyn
#define Mph_b_init_size							sizeof (struct mph_b_init)

#endif /* #ifndef Mph_b_init_size */

			/* B1, B2 and B12 channel ID */

#define SCC_B1						1
#define SCC_B2						2
#define SCC_B12						3

#ifndef RATE_0_6KBS

			/*
				PH RATE coding as Rate Adaptation in ISDN
				with extension for upper than 64 Kbps.
			*/

#	define RATE_LGTH				6
#	define RATE_UNDEFINED			G_6 (0, 0,0,0,0,0)		/* AT5 - UNDEFINED */
#	define RATE_0_6KBS				G_6 (0, 0,0,0,0,1)		/* 0.6 kbits/s CCITT V.6 and x.1 */
#	define RATE_1_2KBS				G_6 (0, 0,0,0,1,0)		/* 1.2 kbits/s CCITT V.6 */
#	define RATE_2_4KBS				G_6 (0, 0,0,0,1,1)		/* 2.4 kbits/s CCITT V.6 and X.1 */
#	define RATE_3_6KBS				G_6 (0, 0,0,1,0,0)		/* 3.6 kbits/s CCITT V.6 */
#	define RATE_4_8KBS				G_6 (0, 0,0,1,0,1)		/* 4.8 kbits/s CCITT V.6 and x.1 */
#	define RATE_7_2KBS				G_6 (0, 0,0,1,1,0)		/* 7.2 kbits/s CCITT V.6 */
#	define RATE_8KBS				G_6 (0, 0,0,1,1,1)		/* 8 kbits/s CCITT I.460 */
#	define RATE_9_6KBS				G_6 (0, 0,1,0,0,0)		/* 9.6 kbits/s  CCITT V.6 and x.1 */
#	define RATE_14_4KBS				G_6 (0, 0,1,0,0,1)		/* 14.4 kbits/s CCITT V.6 */
#	define RATE_16KBS				G_6 (0, 0,1,0,1,0)		/* 16 kbits/s CCITT I.460 */
#	define RATE_19_2KBS				G_6 (0, 0,1,0,1,1)		/* 19.2 kbits/s CCITT V.6 */
#	define RATE_32KBS				G_6 (0, 0,1,1,0,0)		/* 32 kbits/s CCITT I.460 */
#	define RATE_38_4_KBS_NO_ETSI	G_6 (0, 0,1,1,0,1)		/* 38.4 kbits/s extended V14 (VN3) NON ETSI */
#	define RATE_48KBS				G_6 (0, 0,1,1,1,0)		/* 48 kbits/s CCITT V.6 and X.1 */
#	define RATE_56KBS				G_6 (0, 0,1,1,1,1)		/* 56 kbits/s CCITT V.6 */
#	define RATE_64KBS				G_6 (0, 1,0,0,0,0)		/* 64 kbits/s CCITT I.460 */
#	define RATE_38_4KBS				G_6 (0, 1,0,0,0,1)		/* 38.4 kbits/s extended V14 (VN3) NON ETSI NON CCITT */
#	define RATE_57_6KBS				G_6 (0, 1,0,0,1,0)		/* 57.6 kbits/s extended V14 (VN3) NON ETSI NON CCITT */
#	define RATE_0_1345KBS			G_6 (0, 1,0,1,0,1)		/* 0.1345 kbits/s CCITT X.1 */
#	define RATE_0_100KBS			G_6 (0, 1,0,1,1,0)		/* 0.100 kbits/s CCITT V.6 and X.1 */
#	define RATE_0_75_1_2KBS 		G_6 (0, 1,0,1,1,1)		/* 0.075/1.2 kbits/s CCITT V.6 and x.1 */
#	define RATE_1_2_0_75KBS 		G_6 (0, 1,1,0,0,0)		/* 1.2/0.075 kbits/s CCITT V.6 and x.1 */
#	define RATE_0_050KBS			G_6 (0, 1,1,0,0,1)		/* 0.050 kbits/s CCITT V.6 and X.1 */
#	define RATE_0_075KBS			G_6 (0, 1,1,0,1,0) 		/* 0.075 kbits/s CCITT V.6 and X.1 */
#	define RATE_0_110KBS			G_6 (0, 1,1,0,1,1)		/* 0.110 kbits/s CCITT V.6 and X.1 */
#	define RATE_0_150KBS			G_6 (0, 1,1,1,0,0)		/* 0.150 kbits/s CCITT V.6 and X.1 */
#	define RATE_0_200KBS			G_6 (0, 1,1,1,0,1)		/* 0.200 kbits/s CCITT V.6 and X.1 */
#	define RATE_0_300KBS			G_6 (0, 1,1,1,1,0)		/* 0.300 kbits/s CCITT V.6 and X.1 */
#	define RATE_12KBS				G_6 (0, 1,1,1,1,1)		/* 12 kbits/s CCITT V.6 */

#	define RATE_128KBS       		G_6 (1, 1,0,0,0,0)		/* 128 kbits/s */
#	define RATE_112KBS              G_6 (1, 0,1,1,1,0)		/* 112 kbits/s */
#	define RATE_96KBS				G_6 (1, 0,1,1,0,0)		/* 96  kbits/s */
#	define RATE_72KBS				G_6 (1, 0,1,0,1,0)		/* 72  kbits/s */

			/* Intermediate Rate Adaptation */

#	define INTER_RA_UNUSED			G_2 (0,0)				/* not used */
#	define INTER_RA_8KBS			G_2 (0,1)				/* 8 kbits/s */
#	define INTER_RA_16KBS			G_2 (1,0)				/* 16 kbits/s */
#	define INTER_RA_32KBS			G_2 (1,1)				/* 32 kbits/s */

			/* Network independent clock (NIC) on Transmission (Tx) and RECEPTION (Rx) (BT2) */

#	define NIC_DATA					G_2 (1,1)				/* required to send / can accept data with NIC */
#	define NIC_NOT_DATA				G_2 (0,0)				/* not required to send / cannot accept data with NIC */

			/* Network independent clock (NIC) on Transmission (Tx) */

#	define NIC_RQ_TX_DATA			G_1 (1)					/* required to send data with NIC */
#	define NIC_NOT_RQ_TX_DATA		G_1 (0)					/* not required to send data with NIC */

			/* Network independent clock (NIC) on Reception (Rx) */

#	define NIC_ACCEPT_DATA			G_1 (1)					/* can accept data with NIC */
#	define NIC_NOT_ACCEPT_DATA		G_1 (0)					/* cannot accept data with NIC */

			/* Flow control on Transmisssion (Tx) */

#	define FLOW_RQ_TX_DATA			G_1 (1)					/* required to send data with flow control mechanism */
#	define FLOW_NOT_RQ_TX_DATA		G_1 (0)					/* not required to send data with flow control mechanism */

			/* Flow control on Reception (Rx) */

#	define FLOW_CAN_ACCEPT_DATA		G_1 (1)					/* can accept  data with flow control mechanism */
#	define FLOW_CANNOT_ACCEPT_DATA	G_1 (0)					/* cannot accept data with flow control mechanism */


			/* Number of stop bits */

#	define STOP_BIT_UNUSED			G_2 (0,0)				/* not used */
#	define STOP_BIT_1				G_2 (0,1)				/* 1 bit */
#	define STOP_BIT_1_5				G_2 (1,0)				/* 1.5 bit */
#	define STOP_BIT_2				G_2 (1,1)				/* 2 bits */

			/* Number of data bits excluding parity bit if present*/

#	define DATA_BIT_UNUSED			G_2 (0,0)				/* unused */
#	define DATA_BIT_5				G_2 (0,1)				/* 5 bits */
#	define DATA_BIT_7				G_2 (1,0)				/* 7 bits */
#	define DATA_BIT_8				G_2 (1,1)				/* 8 bits */

			/* Parity  information */

#	define ODD						G_3 (0,0,0)				/* odd */
#	define EVEN						G_3 (0,1,0)				/* even */
#	define NO_PARITY				G_3 (0,1,1)				/* none */
#	define FORCED_TO_0				G_3 (1,0,0)				/* forced to 0 */
#	define FORCED_TO_1				G_3 (1,0,1)				/* forced to 1 */

			/* Transmission mode */

#	define SYN						G_1 (0)					/* synchronous */
#	define ASYN						G_1 (1)					/* asynchronous */

#endif /* #ifndef RATE_0_6KBS */

	/* Default values */

#define RATE_DEFAULT				RATE_19_2KBS			/* rate */
#define IR_DEFAULT					INTER_RA_32KBS			/* intermediate rate */
#define STOP_BIT_NB_DEFAULT			STOP_BIT_1				/* nb stop bit */
#define DATA_BIT_DEFAULT			DATA_BIT_8				/* nb data bit */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*   MPH_B_SWITCH_RQ   */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Mph_b_switch_size

struct mph_b_switch {
	uchar	mode;					/* mode : audio, voice, data_hdlc, data , fax 3, loop */
	uchar	chan_id;				/* channel ID */
	uchar	device_id;				/* device ID processing the B channel */
	uchar	tone_id;				/* tone if voice or audio mode */

		/* B-channels list for Multi-channels modes */

	struct {
		uchar	chan_nb;			/* number of B-channels in the list */
		uchar	chan_list [PH_MX_CHANI]; /* list of channels */
	} chan_id_list;

};

#define Mph_b_switch_				((struct mph_b_switch FAR *)p_data) ->
#define Mph_b_switch_mode			Mph_b_switch_ mode
#define Mph_b_switch_chan_id		Mph_b_switch_ chan_id
#define Mph_b_switch_chan_nb		Mph_b_switch_ chan_id_list.chan_nb
#define Mph_b_switch_chan_list(i)	Mph_b_switch_ chan_id_list.chan_list[i]
#define Mph_b_switch_device_id		Mph_b_switch_ device_id
#define Mph_b_switch_tone_id		Mph_b_switch_ tone_id
#define Mph_b_switch_size			sizeof (struct mph_b_switch)

			/* B channel mode ID */

#define B_MODE_AUDIO				'A'		/* audio for modem */
#define B_MODE_VOICE				'B'		/* voice MAP */
#define B_MODE_DATA_HDLC			'C'		/* data HDLC */
#define B_MODE_TRANSPARENT			'D'		/* AMD transparent */
#define B_MODE_DATA_TRANSPARENT		'E'		/* B channel transparent */
#define B_MODE_DATA_V110			'F'		/* V.110 framing in B channel */
#define B_MODE_DATA_H0				'G'		/* H0 channel (PRI) */
#define B_MODE_DATA_H11				'H'		/* H11 channel (PRI) */
#define B_MODE_DATA_H12				'I'		/* H12 channel (PRI) */
#define B_MODE_DATA_MULTIRATE		'J'		/* MULTIRATE channel (PRI) */
#define B_MODE_DATA_128KBS			'K'		/* 128kbs channel (BRI) */

#define B_MODE_NIL					'O'		/* free the B channel */

#define B_MODE_LOOP_BACK_ON			'Y'		/* Loop back B channel ON : B_RX --> B_TX */
#define B_MODE_LOOP_BACK_OFF		'Z'		/* Loop back B channel OFF */

			/* B channel id */

#define B1_CHANNEL					1
#define B2_CHANNEL					2
#define NO_CHANNEL					0

			/* B audio tone ID */

#define B_AUDIO_TONE_1				'A'
#define B_AUDIO_TONE_2				'B'
#define B_AUDIO_TONE_3				'C'
#define B_AUDIO_TONE_NIL			'0'

			/* Device ID */

#define DEVICE_ID_A					'A'
#define DEVICE_ID_B					'B'
#define DEVICE_ID_C					'C'
#define DEVICE_ID_D					'D'
#define DEVICE_ID_NIL				0

#endif /* #ifndef Mph_b_switch_size */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*    MPH_ROUTE_RQ     */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

struct mph_route {
	struct confirm	confirm;		/* confirmation structure for MPH_B_ROUTE_CO */
	uchar			mode;			/* MPH_ROUTE_DEFAULT, MPH_ROUTE_SWITCH or MPH_ROUTE_PATTERN */
	uchar			out_stream;		/* output stream (ignored if mode == B_ROUTE_DEFAULT) */
	uchar			out_channel_1; 	/* first output channels ( B channel if B_ROUTE_DEFAULT) */
	uchar			out_channel_2; 	/* last output channels */
	uchar			in_stream;		/* input stream */
	uchar			in_channel;		/* input channel */
	uchar			pattern;		/* pattern to generate on channel ( MPH_ROUTE_PATTERN mode only) */
};

#define Mph_route_              	((struct mph_route FAR *)p_data) ->
#define Mph_route_mode          	Mph_route_ mode
#define Mph_route_out_stream    	Mph_route_ out_stream
#define Mph_route_out_channel_1 	Mph_route_ out_channel_1
#define Mph_route_out_channel_2 	Mph_route_ out_channel_2
#define Mph_route_in_stream     	Mph_route_ in_stream
#define Mph_route_in_channel    	Mph_route_ in_channel
#define Mph_route_pattern       	Mph_route_ pattern
#define Mph_route_size		    	sizeof (struct mph_route)

			/* Route mode Id */

#define	MPH_ROUTE_DEFAULT			'C'	/* definition of a new default route */
#define MPH_ROUTE_SWITCH			'S'	/* routing of one channel */
#define MPH_ROUTE_PATTERN			'P'	/* pattern generation on one channel */
#define MPH_ROUTE_DISABLE			'D'	/* pattern generation on one channel */

			/* Stream id */

#define	NO_STREAM					0xFF

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*   PH_DETECTION_RQ   */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Ph_detection_size

struct ph_detection {
	uchar	rq_lapm;				/* rq    - V.42 LAPM requested (ON OFF) */
	uchar	rq_mnp4;				/* rq    - V.42 Annex A	(MNP4) requested (ON OFF) */
	uchar	in_ec;					/*    in - error correction detected */
};

#define Ph_detection_				((struct ph_detection FAR *)p_data) ->
#define Ph_detection_rq_lapm		Ph_detection_ rq_lapm
#define Ph_detection_rq_mnp4		Ph_detection_ rq_mnp4
#define Ph_detection_in_ec			Ph_detection_ in_ec
#define Ph_detection_size			sizeof (struct ph_detection)


		/* Error correction data mode codes */

#define EC_LAPM						'l'		/* V.42 LAPM error correction protocol */
#define EC_MNP4_START_STOP			'4'		/* MNP4 error correction protocol (octet-oriented framing mode) */
#define EC_MNP4_HDLC				'h'		/* MNP4 error correction protocol (bit-oriented framing mode) */
#define EC_NIL						'n'		/* no error correction protocol */

#endif /* #ifndef Ph_detection_size */

/*--------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*  MPH_G_INIT_RQ/CO   */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Mph_g_init_size

struct mph_g_init {
	struct	confirm confirm;		/*    co  - result of initialization */
	uchar	rq_ec;					/* rq     - error correction requested */
									/*--------- asynchrounous mode parameters */
	uchar	parity_option;			/* rq     - parity option setting */
	uchar   nb_stop_bits;			/* rq     - number of stop bits */
	uchar	nb_data_bits;			/* rq     - number of data bits */
};


#define Mph_g_init_					((struct mph_g_init FAR *)p_data) ->
#define Mph_g_init_ret_code			Mph_g_init_ confirm.return_code
#define Mph_g_init_cause			Mph_g_init_ confirm.cause
#define Mph_g_init_diagnostic		Mph_g_init_ confirm.diagnostic
#define Mph_g_init_rq_ec			Mph_g_init_ rq_ec
#define Mph_g_init_parity_option	Mph_g_init_ parity_option
#define Mph_g_init_nb_stop_bits		Mph_g_init_ nb_stop_bits
#define Mph_g_init_nb_data_bits		Mph_g_init_ nb_data_bits

#define Mph_g_init_size				sizeof (struct mph_g_init)

		/* Parity option codes */

#define PARITY_ODD					G_3 (0,0,1)
#define PARITY_EVEN					G_3 (0,1,0)
#define PARITY_SPACE				G_3 (1,0,0)
#define PARITY_MARK					G_3 (1,0,1)
#define NO_PARITY					G_3 (0,1,1)

#endif /* #ifndef Mph_g_init_size */

/*--------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*   MPH_G_ERROR_IN    */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

/*
	No argument structure, information is stored in the 'inf' message structure :

		*_msg_inf0 : Error code
		*_msg_inf1 : received FCS
		*_msg_inf2 : calculated FCS
*/

#define MNP4_FCS_ERROR		1		/* FCS Error code */

/*--------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*      SM_INFO_IN     */
					/*   from MPH entity   */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Mph_info_size

#define PH_CHIP_ID_SIZE	32						/* chip ID size */

struct mph_info {
	struct sm_info		ph_info;				/* information global structure */

	char				chip_id [PH_CHIP_ID_SIZE]; /* litteral string for chip ID */

	long				rfc;					/* received good frame counter */
	long				tfc;					/* transmit frame counter */
	long				ec;						/* software error counter */

	ushort				disfc;					/* discard frame counter */
	ushort				crcec;					/* CRC error counter */
	ushort				abtsc;					/* abort sequence counter */
	ushort				nmarc;					/* nonmatching address received counter */
	ushort				retrc;					/* frame retransmission counter */

	uchar				na_type;				/* Type of network access */

		/* V24 interface */

	ushort				cd_lost;				/* Carrier detect lost */

		/* PRI */

	ushort				signal_lost;    		/* signal lost */
	ushort				remote_alarm; 			/* remote alarm */
	ushort				resynchronized; 		/* resynchronized */
	ushort				sync_not_possible; 		/* synchonisation not possible */
	ushort				crc_4_error; 			/* CRC4 error */

		/* BRI */

	ushort				lost_framing;    		/* lost framing */
	ushort				lost_synchronization;   /* lost synchronization */
};

#define Mph_info_						((struct mph_info FAR *)p_data) ->
#define Mph_info_entity_origination		Mph_info_ ph_info.entity_origination
#define Mph_info_type					Mph_info_ ph_info.info_type

#define Mph_info_a_chip_id			  &(Mph_info_ chip_id[0])

#define Mph_info_rfc					Mph_info_ rfc
#define Mph_info_tfc					Mph_info_ tfc
#define Mph_info_ec						Mph_info_ ec

#define Mph_info_disfc					Mph_info_ disfc
#define Mph_info_crcec					Mph_info_ crcec
#define Mph_info_abtsc					Mph_info_ abtsc
#define Mph_info_nmarc					Mph_info_ nmarc
#define Mph_info_retrc					Mph_info_ retrc

#define Mph_info_na_type				Mph_info_ na_type

	/* V24 statistics */

#define Mph_info_cd_lost				Mph_info_ cd_lost

	/* PRI statistics */

#define Mph_info_signal_lost			Mph_info_ signal_lost
#define Mph_info_remote_alarm			Mph_info_ remote_alarm
#define Mph_info_resynchronized			Mph_info_ resynchronized
#define Mph_info_sync_not_possible		Mph_info_ sync_not_possible
#define Mph_info_crc_4_error			Mph_info_ crc_4_error

	/* BRI statistics */

#define Mph_info_lost_framing			Mph_info_ lost_framing
#define Mph_info_lost_synchronization	Mph_info_ lost_synchronization

#define Mph_info_size					sizeof (struct mph_info)

#endif /* #ifndef Mph_info_size */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*     SM_REPORT_IN    */
					/*   from MPH entity   */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Mph_report_size

struct mph_report {
	struct sm_report ph_report;			/* General SM report data structure */

	uchar			na_type;			/* network access type : BRI or PRI */
	uchar			na_fct;				/* network access fuctional grouping */
	code_t          cause;				/* cause of the report */
	uchar			state;				/* CCITT state */
};

#define	Mph_report_						((struct mph_report FAR *)p_data) ->
#define	Mph_report_entity_origination	Mph_report_ ph_report.entity_origination
#define	Mph_report_report_type        	Mph_report_ ph_report.report_type

#define	Mph_report_na_type				Mph_report_ na_type
#define	Mph_report_na_fct				Mph_report_ na_fct
#define	Mph_report_cause				Mph_report_ cause
#define	Mph_report_state				Mph_report_ state

#define	Mph_report_size					sizeof (struct mph_report)

#define PH_SUPERVISION_PROTOCOL			'S'

#endif /* #ifndef Mph_report_size */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*     SM_REPORT_IN    */
					/*  from MPH_D entity  */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Mph_d_report_size

struct mph_d_report {
	struct sm_report ph_d_report;		/* General SM report data structure */

	uchar			na_type;			/* network access type : BRI or PRI */
	uchar			na_fct;				/* network access fuctional grouping */
	code_t          cause;				/* cause of the report */
	uchar			state;				/* CCITT state */
};

#define	Mph_d_report_					((struct mph_d_report FAR *)p_data) ->
#define	Mph_d_report_entity_origination	Mph_d_report_ ph_d_report.entity_origination
#define	Mph_d_report_report_type        Mph_d_report_ ph_d_report.report_type

#define	Mph_d_report_na_type			Mph_d_report_ na_type
#define	Mph_d_report_na_fct				Mph_d_report_ na_fct
#define	Mph_d_report_cause				Mph_d_report_ cause
#define	Mph_d_report_state				Mph_d_report_ state

#define	Mph_d_report_size				sizeof (struct mph_d_report)

#define PH_D_SUPERVISION_PROTOCOL		'S'

#endif /* #ifndef Mph_d_report_size */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*     SM_REPORT_IN    */
					/*  from MPH_B entity  */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Mph_b_report_size

struct mph_b_report {
	struct sm_report ph_b_report;		/* General SM report data structure */

	uchar			na_type;			/* network access type : BRI, PRI, SCI */
	uchar			na_fct;				/* network access fuctional grouping */
	code_t          cause;				/* cause of the report */
	uchar			state;				/* CCITT state */
};

#define	Mph_b_report_					((struct mph_b_report FAR *)p_data) ->
#define	Mph_b_report_entity_origination	Mph_b_report_ ph_b_report.entity_origination
#define	Mph_b_report_report_type        Mph_b_report_ ph_b_report.report_type

#define	Mph_b_report_na_type			Mph_b_report_ na_type
#define	Mph_b_report_na_fct				Mph_b_report_ na_fct
#define	Mph_b_report_cause				Mph_b_report_ cause
#define	Mph_b_report_state				Mph_b_report_ state

#define	Mph_b_report_size				sizeof (struct mph_b_report)

#define PH_B_SUPERVISION_PROTOCOL		'S'

#endif /* #ifndef Mph_b_report_size */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*  Flow Control Cell  */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Ph_relay_fc_init_count

struct ph_fc_cell {
	uchar	nb_buffer;			/* number of buffers currently used */
	uchar	mx_nb_buffer;		/* maximum number of buffers allowed */
};

#define Ph_relay_fc_init_count(p_cell)	if (p_cell != P_NIL) {				\
											(p_cell) -> nb_buffer = 0;      \
										}

#define Ph_relay_fc_overflow(p_cell)	((p_cell) -> nb_buffer > (p_cell) -> mx_nb_buffer)

#define Ph_relay_fc_inc(p_cell)			if (p_cell != P_NIL) {				\
											(p_cell) -> nb_buffer++;		\
										}									\

#define Ph_relay_fc_dec(p_cell)			if (((p_cell) != P_NIL) && ((p_cell) -> nb_buffer != 0)) {	\
											--((p_cell) -> nb_buffer);  							\
										}

#endif /* #ifndef Ph_relay_fc_init_count */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*  Flow Control Cell  */
					/*    (PH_B  alias)    */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Ph_b_relay_fc_init_count

struct ph_b_fc_cell {
	uchar	nb_buffer;			/* number of buffers currently used */
	uchar	mx_nb_buffer;		/* maximum number of buffers allowed */
};

#define Ph_b_relay_fc_init_count(p_cell)	Ph_relay_fc_init_count(p_cell)
#define Ph_b_relay_fc_overflow(p_cell)		Ph_relay_fc_overflow(p_cell)
#define Ph_b_relay_fc_inc(p_cell)			Ph_relay_fc_inc(p_cell)
#define Ph_b_relay_fc_dec(p_cell)			Ph_relay_fc_dec(p_cell)

#endif /* #ifndef Ph_b_relay_fc_init_count */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*     Stream Cell     */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Ph_stream_mode

struct ph_stream {
	uchar			mode;

		/* PH 0 */

	uchar		FAR	*p_ctx_0;

#	if NEW_FCT_STYLE == ON
		uchar	(FAR *p_fct_0)			(uchar FAR *p_scc_hdlc, uchar FAR *p_block, uchar type, ushort data_size);
		void	(FAR *p_reset_0) 		(uchar FAR *p_scc_hdlc);

#	else

		uchar	(FAR *p_fct_0)			();
		uchar	(FAR *p_reset_0)		();
#	endif

		/* PH 1 */

	uchar	FAR *p_ctx_1;

#	if NEW_FCT_STYLE == ON
		uchar	(FAR *p_fct_1)   		(uchar FAR *p_scc_hdlc, uchar FAR *p_block, uchar type, ushort data_size);
		void	(FAR *p_reset_1) 		(uchar FAR *p_scc_hdlc);

#	else

		uchar	(FAR *p_fct_1)			();
		uchar	(FAR *p_reset_1)		();
#	endif

};

#define Ph_stream_mode					p_ph_stream -> mode

#define Ph_stream_p_ctx_0				p_ph_stream -> p_ctx_0
#define Ph_stream_p_fct_0				p_ph_stream -> p_fct_0
#define Ph_stream_p_reset_0				p_ph_stream -> p_reset_0

#define Ph_stream_p_ctx_1				p_ph_stream -> p_ctx_1
#define Ph_stream_p_fct_1				p_ph_stream -> p_fct_1
#define Ph_stream_p_reset_1				p_ph_stream -> p_reset_1

		/* Streaming Mode */

#define STREAM_MODE_HDLC				1		/* HDLC streaming */
#define STREAM_MODE_TRANSPARENT			2		/* Full transparent streaming */
#define STREAM_MODE_V110_ASYNC			3		/* V.110 streaming ASYNC */
#define STREAM_MODE_V14					4		/* V.14 streaming */
#define STREAM_MODE_V120_BIT_TRANSPARENT 5		/* V.120 Bit transparent streaming */
#define STREAM_MODE_V120_HDLC			6		/* V.120 HDLC streaming */
#define STREAM_MODE_V110_SYNC			7		/* V.110 streaming SYNC */

#define	PH_SUPERVISION_NIL 				0		/* no supervision */
#define	PH_SUPERVISION_SLAVE			1		/* supervision in slave mode */
#define	PH_SUPERVISION_MASTER			2		/* supervision in master mode */

			/* Supervision event code */

#define PH_SUPERVISION_EVENT_INIT		'I'		/* initialization event */
#define PH_SUPERVISION_EVENT_RESET		'R'		/* Reset event */

#endif /* #ifndef Ph_stream_mode */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*     Stream Cell     */
					/*    (PH_B  alias)    */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Ph_b_stream_mode

struct ph_b_stream {
	uchar			mode;

		/* PH 0 */

	uchar		FAR	*p_ctx_0;

#	if NEW_FCT_STYLE == ON
		uchar	(FAR *p_fct_0)			(uchar FAR *p_scc_hdlc, uchar FAR *p_block, uchar type, ushort data_size);
		void	(FAR *p_reset_0) 		(uchar FAR *p_scc_hdlc);

#	else

		uchar	(FAR *p_fct_0)			();
		uchar	(FAR *p_reset_0)		();
#	endif

		/* PH 1 */

	uchar	FAR *p_ctx_1;

#	if NEW_FCT_STYLE == ON
		uchar	(FAR *p_fct_1)   		(uchar FAR *p_scc_hdlc, uchar FAR *p_block, uchar type, ushort data_size);
		void	(FAR *p_reset_1) 		(uchar FAR *p_scc_hdlc);

#	else

		uchar	(FAR *p_fct_1)			();
		uchar	(FAR *p_reset_1)		();
#	endif

};

#define Ph_b_stream_mode				p_ph_b_stream -> mode

#define Ph_b_stream_p_ctx_0				p_ph_b_stream -> p_ctx_0
#define Ph_b_stream_p_fct_0				p_ph_b_stream -> p_fct_0
#define Ph_b_stream_p_reset_0			p_ph_b_stream -> p_reset_0

#define Ph_b_stream_p_ctx_1				p_ph_b_stream -> p_ctx_1
#define Ph_b_stream_p_fct_1				p_ph_b_stream -> p_fct_1
#define Ph_b_stream_p_reset_1			p_ph_b_stream -> p_reset_1

#endif /* #ifndef Ph_b_stream_mode */

/*--------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/* V.25bis Signalling  */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*    PH_V25_RQ/IN     */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#ifndef Ph_v25_size

struct ph_v25 {
	uchar 				ic_108_2;                  	/*	interchange circuit 108/2 (DTR, controlled by the DTE)	*/
	uchar				ic_107;                    	/*	interchange circiut 107 (DSR, controlled by the DCE)	*/
	uchar				ic_106;                     /*	interchange circuit 106 (RTS, controlled by the DCE)	*/
	uchar				ic_125;						/* 	interchange circuit 125 (Calling indicator, controlled by the DCE)	*/
	uchar				fr_size;                    /* 	frame size (length of the message)	*/
	uchar				fr [1];    				    /* 	start of message from PH to DTE_INT (resp. DTE_INT to PH)	*/
};

#define Ph_v25_ic_108_2			((struct ph_v25 FAR *)p_data) -> ic_108_2
#define Ph_v25_ic_107			((struct ph_v25 FAR *)p_data) -> ic_107
#define Ph_v25_ic_106			((struct ph_v25 FAR *)p_data) -> ic_106
#define Ph_v25_ic_125			((struct ph_v25 FAR *)p_data) -> ic_125
#define Ph_v25_fr_size			((struct ph_v25 FAR *)p_data) -> fr_size
#define Ph_v25_a_fr			  &(((struct ph_v25 FAR *)p_data) -> fr [0])
#define Ph_v25_size				(sizeof (struct ph_v25) - 1)

#endif /* #ifndef Ph_v25_size */

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/*  PH_V25_REG_RQ/CO   */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

	/* PH_V25_REG_RQ : V.25bis signalling registration request : ON or OFF */
	/* PH_V25_REG_CO : V.25bis signalling registration confirm */

#ifndef Ph_v25_reg_size

struct ph_v25_reg {
	struct confirm		v25_reg;
	uchar				command;		/* Registration ON or OFF */

	uchar 				address;		/* Adress field : one byte */
	uchar				ctrl_field_1;	/* Control field 1 */
	uchar				ctrl_field_2;	/* Control field 2 */
};

#define Ph_v25_reg_ret_code     ((struct ph_v25_reg FAR *)p_data) -> v25_reg.return_code
#define Ph_v25_reg_cause     	((struct ph_v25_reg FAR *)p_data) -> v25_reg.cause
#define Ph_v25_reg_diagnostic	((struct ph_v25_reg FAR *)p_data) -> v25_reg.diagnostic

#define Ph_v25_reg_command		((struct ph_v25_reg FAR *)p_data) -> command
#define Ph_v25_reg_address		((struct ph_v25_reg FAR *)p_data) -> address
#define Ph_v25_reg_ctrl_field_1	((struct ph_v25_reg FAR *)p_data) -> ctrl_field_1
#define Ph_v25_reg_ctrl_field_2	((struct ph_v25_reg FAR *)p_data) -> ctrl_field_2

#define Ph_v25_reg_size			sizeof (struct ph_v25_reg)

#endif /* #ifndef Ph_v25_reg_size */

/*-------------------------------------------------------------------------*/

					/*-=-=-=-=-=-=-=-=-=-=-*/
					/*                     */
					/* Function prototypes */
					/*                     */
					/*-=-=-=-=-=-=-=-=-=-=-*/

#	if NEW_FCT_STYLE == ON
		uchar	ph						(struct message FAR *p_msg);
		uchar	ph_d					(struct message FAR *p_msg);
		uchar	ph_b					(struct message FAR *p_msg);
		uchar   ph_g					(struct message FAR *p_msg);
		uchar   ph_loop					(struct message FAR *p_msg);
		uchar	mph						(struct message FAR *p_msg);
		uchar 	mph_d					(struct message FAR *p_msg);
		uchar 	mph_b					(struct message FAR *p_msg);

			/* Variable initialisation functions */

		void	ph_var_init				(void);
		void	ph_d_var_init			(void);
		void	ph_b_var_init			(void);
		void	mph_var_init			(void);
		void	mph_d_var_init			(void);
		void	mph_b_var_init			(void);

			/* Simulator functions */

		uchar	ana_sdu_ph				(struct message FAR *p_msg);
		uchar	build_sdu_ph_to_cf		(void);
		ushort	build_pdu_frame			(void);
		ushort 	build_pdu_input			(void);
#	else
		uchar	ph						();
		uchar	ph_d					();
		uchar	ph_b					();
		uchar   ph_g					();
		uchar   ph_loop					();
		uchar	mph						();
		uchar 	mph_d					();
		uchar 	mph_b					();

			/* Variable initialisation functions */

		void	ph_var_init				();
		void	ph_d_var_init			();
		void	ph_b_var_init			();
		void	mph_var_init			();
		void	mph_d_var_init			();
		void	mph_b_var_init			();

			/* Simulator functions */

		uchar	ana_sdu_ph				();
		uchar	build_sdu_ph_to_cf		();
		ushort	build_pdu_frame			();
		ushort 	build_pdu_input			();
#	endif

/*-------------------------------------------------------------------------*/

#endif /* #ifndef PH_INT_H */

/*EOF*/
