
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.au1
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	au1_chan_id_ssdu		(Void_parm);
	uchar	au1_llc_ra_ssdu			(Void_parm);

#endif

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
			(Ordered alphabetically)
		*/

			/* BC : bearer capabilities */

D_START	(AU1_P_BC)
		D_TABL	(V110_TRF_CAP)
		D_TABL	(STRUCTURE_)
		D_TABL	(ESTABLISHMENT_)
		D_TABL	(V110_PROT_1)
		D_TABL	(V110_SYN_ASYN)
		D_TABL	(V110_USER_RATE)
		D_TABL	(V110_INTER_RATE)
		D_TABL	(V110_TX_NIC)
		D_TABL	(V110_RX_NIC)
		D_TABL	(V110_STOP_BIT)
		D_TABL	(V110_DATA_BIT)
		D_TABL	(V110_PARITY)
		D_TABL	(V110_DUPLEX)
		D_TABL	(V110_MODEM)
D_END (ENDIF_V110)

START	(AU1_P_BC)
		TABL	(AU1_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
		TABL	(AU1_T_STRUCTURE,			&i_bc[0].structure)
		TABL	(AU1_T_BC_ESTABLISH,		&i_bc[0].est)
		TABL	(AU1_T_PROTOCOL_ID_BC_1,	&i_bc[0].protocol_id_1)
		TABL	(AU1_T_SYN_ASYN,			&i_bc[0].syn_asyn)
		TABL	(AU1_T_USER_RATE,			&i_bc[0].user_rate)
		TABL	(AU1_T_INTER_RATE,			&i_bc[0].inter_rate)
		TABL	(AU1_T_NIC_TX,				&i_bc[0].tx_nic)
		TABL	(AU1_T_NIC_RX,				&i_bc[0].rx_nic)
		TABL	(AU1_T_STOP_BIT,			&i_bc[0].stop_bit)
		TABL	(AU1_T_DATA_BIT,			&i_bc[0].data_bit)
		TABL	(AU1_T_PARITY,				&i_bc[0].parity)
		TABL	(AU1_T_DUPLEX,				&i_bc[0].duplex)
		TABL	(AU1_T_MODEM,				&i_bc[0].modem)
END	(0)

/*-------------------------------------------------------------------------*/

			/* CALL_STATE : call state */

D_START	(AU1_P_CALL_STATE)
	D_TABL (VAL_)
D_END (CALL_STATE_END)

START	(AU1_P_CALL_STATE)
	TABL (AU1_T_CALL_STATE,			&i_call_state[0].val)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(AU1_P_CALLED_NB)
	D_TABL (CALLED_NB_NBERING_TYPE)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (P_CALLED_NB_END)

START	(AU1_P_CALLED_NB)
	TABL (AU1_T_CALLED_NB_TYPE,		&i_called_nb[0].nb_type)
	TEXT (1,AU1_MX_SZ_CALLED_NB,DIGIT,	&i_called_nb[0].lgth,	(uchar **)&i_called_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_SUB_ADD : called party sub address */

D_START	(AU1_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLED_SUB_ADD_END)

START	(AU1_P_CALLED_SUB_ADD)
	TABL (AU1_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
	TABL (AU1_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
	TEXT (1,AU1_MX_SZ_CALLED_SUB_ADD,ANY_OCTET,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(AU1_P_CALLING_NB)
	D_TABL (TYPE_N)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_N)
	D_TEXT (DIGIT_N)
D_END (P_CALLING_NB_N_END)

START	(AU1_P_CALLING_NB)
	TABL (AU1_T_CALLING_NB_TYPE,	&i_calling_nb[0].nb_type)
	TABL (AU1_T_CALLING_NB_PRES,	&i_calling_nb[0].pres)
	TABL (AU1_T_SCREEN_IND,			&i_calling_nb[0].screen_ind)
	TEXT (0,AU1_MX_SZ_CALLING_NB,ANY_CHAR,	&i_calling_nb[0].lgth,	(uchar **)&i_calling_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(AU1_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLING_SUB_ADD_END)

START	(AU1_P_CALLING_SUB_ADD)
	TABL (AU1_T_SUB_ADD_TYPE,		&i_calling_sub_add[0].sub_add_type)
	TABL (AU1_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
	TEXT (1,AU1_MX_SZ_CALLING_SUB_ADD,ANY_OCTET,&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(AU1_P_CAUSE)
	D_TABL (LOCATION)
	D_TABL (OM_CLASS)
	D_TABX (VAL_)
	D_TEXT	(DIAGNOSTICS)
D_END (CAUSE_END)

START	(AU1_P_CAUSE)
	TABL (AU1_T_LOCATION,					&i_cause[0].cause_loc)
	TABL (AU1_T_C_C,						&i_cause[0].cause_class)
	TABX (AU1_TX_C_V,						&i_cause[0].cause_class, &i_cause[0].cause_val)
	TEXT (0,AU1_MX_SZ_CAUSE_DIAG,ANY_CHAR,	&i_cause[0].diag_lgth,(uchar **)&i_cause[0].p_diagnostic)
END (0)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

D_START	(AU1_P_CHAN_ID)
	D_TABL			(INT_TYPE)
	D_TABL			(PREF_EXCL)
	D_TABL			(D_CHAN_)
	D_TABX			(SEL)

	D_IF_VAL 		(_FROM_CALL_CONTROL)
		D_ANY_VAL	(CHAN)
	D_ELSE			(_TO)
		D_TABL		(CHANNEL_NUMBERS)
	D_END_IF		(_DIR)

D_END (P_CHAN_ID_END)

START	(AU1_P_CHAN_ID)
	TABL (AU1_T_INT_TYPE,					&i_chan_id[0].int_type)
	TABL (AU1_T_CHAN_PREF_EXCL,				&i_chan_id[0].pref_excl)
	TABL (AU1_T_D_CHAN,						&i_chan_id[0].d_chan)
	TABX (AU1_TX_CHAN_SEL,					&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)

	IF_VAL (&direction, EQ, FROM_CALL_CONTROL)
		ANY_VAL (							&i_chan_id[0].chan_nb)
	ELSE	()
		TABL (AU1_T_CHAN_NUMBER,			&i_chan_id[0].chan_nb)
	END_IF	()

END (au1_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

			/* DISPLAY : display facility */

D_START	(AU1_P_DISPLAY)
	D_TEXT (DISPLAY_INFO)
D_END (DISPLAY_END)

START	(AU1_P_DISPLAY)
	TEXT	(0,AU1_MX_SZ_DISPLAY,ANY_CHAR,		&i_display[0].lgth,	(uchar **)&i_display[0].p_info)
END			(0)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(AU1_P_HLC)
	D_TABL	(TELESERVICE)
D_END (HLC_END)

START	(AU1_P_HLC)
	TABL	(AU1_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
END (0)

/*-------------------------------------------------------------------------*/

			/* KEYPAD : keypad facility */

D_START	(AU1_P_KEYPAD)
	D_TEXT (KEYPAD_INFO)
D_END (KEYPAD_END)

START	(AU1_P_KEYPAD)
	TEXT (0,AU1_MX_SZ_KEYPAD,ANY_CHAR,		&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END (0)

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(AU1_P_LLC)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_TABL		(TRF_MODE)
		D_TABL		(STRUCT)
		D_TABX		(DEST_RATE)
		D_TABL		(PROTOCOL_1)
D_END	(P_LLC_1)

START	(AU1_P_LLC)
		TABL	(AU1_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(AU1_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
		TABL	(AU1_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABL	(AU1_T_STRUCTURE,				&i_llc[0].structure)
		TABX	(AU1_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
		TABL	(AU1_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(au1_llc_ra_ssdu)

		/* V110 */

D_START	(AU1_P_LLC_V110)
		D_TABL		(V110_SYN_ASYN)
		D_TABL		(V110_NEGOTIATION)
		D_TABL		(V110_USER_RATE)
		D_TABL		(V110_INTER_RATE)
		D_TABL		(V110_TX_NIC)
		D_TABL		(V110_RX_NIC)
		D_TABL		(V110_TX_FC)
		D_TABL		(V110_RX_FC)
		D_PAD		(PAD_9_13)
		D_TABL		(V110_STOP_BIT)
		D_TABL		(V110_DATA_BIT)
		D_TABL		(V110_PARITY)
		D_TABL		(V110_DUPLEX)
		D_TABL		(V110_MODEM)
D_END (ENDIF_V110)

START	(AU1_P_LLC_V110)
		TABL		(AU1_T_SYN_ASYN,			&i_llc[0].syn_asyn)
		TABL		(AU1_T_NEGOTIATION,			&i_llc[0].in_band_neg)
		TABL		(AU1_T_USER_RATE,			&i_llc[0].user_rate)
		TABL		(AU1_T_INTER_RATE,			&i_llc[0].inter_rate)
		TABL		(AU1_T_NIC_TX,				&i_llc[0].tx_nic)
		TABL		(AU1_T_NIC_RX,				&i_llc[0].rx_nic)
		TABL		(AU1_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
		TABL		(AU1_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
		PAD			(5)
		TABL		(AU1_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(AU1_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(AU1_T_PARITY,				&i_llc[0].parity)
		TABL		(AU1_T_DUPLEX,				&i_llc[0].duplex)
		TABL		(AU1_T_MODEM,				&i_llc[0].modem)
END	(0)


D_START	(AU1_P_LLC_V120)
		D_TABL		(V120_SYN_ASYN)
		D_TABL		(V120_NEGOTIATION)
		D_TABL		(V120_USER_RATE)
		D_PAD		(PAD_4_8)
		D_TABL		(V120_HDR)
		D_TABL		(V120_MULTI_FRAME)
		D_TABL		(V120_OP_MODE)
		D_TABL		(V120_LLI)
		D_TABL		(V120_ASSIGN)
		D_TABL		(V120_STOP_BIT)
		D_TABL		(V120_DATA_BIT)
		D_TABL		(V120_PARITY)
		D_TABL		(V120_DUPLEX)
		D_TABL		(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(AU1_P_LLC_V120)
		TABL		(AU1_T_SYN_ASYN,			&i_llc[0].syn_asyn)
		TABL		(AU1_T_NEGOTIATION,			&i_llc[0].in_band_neg)
		TABL		(AU1_T_USER_RATE,			&i_llc[0].user_rate)
		PAD			(5)
		TABL		(AU1_T_HEADER,				&i_llc[0].hdr)
		TABL		(AU1_T_MULTI_FRAME,			&i_llc[0].multi_frame)
		TABL		(AU1_T_OP_MODE,				&i_llc[0].op_mode)
		TABL		(AU1_T_LLI,					&i_llc[0].lli)
		TABL		(AU1_T_ASSIGN,				&i_llc[0].assign)
		TABL		(AU1_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(AU1_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(AU1_T_PARITY,				&i_llc[0].parity)
		TABL		(AU1_T_DUPLEX,				&i_llc[0].duplex)
		TABL		(AU1_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(AU1_P_LLC_PAD)
		D_PAD		(PAD_1_18)
D_END (END_PAD_RA)

START	(AU1_P_LLC_PAD)
		PAD			(18)
END (0)

D_START	(AU1_P_LLC_2)
		D_TABL		(PROTOCOL_ID_2)
		D_ANY_VAL	(OPT_2)
		D_TABL		(PROTOCOL_ID_3)
		D_ANY_VAL	(OPT_3)
D_END (LLC_E)

START	(AU1_P_LLC_2)
		TABL    	(AU1_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
		ANY_VAL		(&i_llc[0].option_2)
		TABL		(AU1_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
		ANY_VAL		(&i_llc[0].option_3)
END (0)

/*-------------------------------------------------------------------------*/


			/* PROGRESS_IND : progress indicator */

D_START	(AU1_P_PROGRESS_IND)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(AU1_P_PROGRESS_IND)
	TABL	(AU1_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	TABL	(AU1_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START		(AU1_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(AU1_P_RESTART_IND)
	TABL	(AU1_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

/*EOF*/

