

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_spdu.au1
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta description of the messages
 * (signalling protocol data unit).
 *
 *		AUSTEL_1 specific function :
 *
 *		 au1_ie_type_eval - implements the evaluation of a conditional
 *					    IE type : Mandatory or Optional.
 *
 *-------------------------------------------------------------------------*/


/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
*
*SPDU model description :
*------------------------
*
*            spdu    tab_spdu
*    =====================================================
*    | id | event_id | u_n | n_u | type | p_ie | p_ie_SO |
*    |----|----------|-----|-----|------|------|---------|
*    |    |          |     |     |      |  X-------   X-------------------
*    |----|----------|-----|-----|------|------|  |      |               |
*    |    |          |     |     |      |      |  |      |               |
*    |----|----------|-----|-----|------|------|- | -----|               |
*    |    |          |     |     |      |      |  |      |               |
*                                                 |                      |
*                            spdu_ie              |                      |
*            =====================================v====================  |
*            | id | codeset | u_n | n_u | type | lgth_mini |lgth_maxi |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            ----------------                                            |
*                       |                                                |
*                       |                                                |
*                       -------> tab_ie                                  |
*                                                     --------------------
*                                          spdu_ie_so |
*                                        =============v=====================
*                                        | id | codeset | u_n | n_u | type |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*
*/

					/* AUSTEL_1 SPDU parametrers description */


CONST	struct spdu_param AU1_SPDU_PARAM = {
	PROTOCOL_DISCRIMINATOR_I451,		/* Protocol discriminator I.451 (Q.931) */
	1,									/* BRI call reference length for outgoing SPDU */
	1,									/* BRI call reference minimum length for checking incoming SPDU */
	1,									/* BRI call refernce maximum length for  checking incoming SPDU */
	2,									/* PRI call reference length for outgoing SPDU */
	2,									/* PRI call reference minimum length for checking incoming SPDU */
	2,									/* PRI call reference maximum length for checking incoming SPDU */
	ON,									/* IE ordered by IE ID codeset by codeset only in the SPDU */
	ON,									/* Locking shift not allowed */
	OFF,								/* Non locking shift not allowed */
	ON,									/* Null length IE are considered as missing in the SPDU */
	1,									/* Message type maximum length */
	OFF,								/* Global call reference value not meaningful */
	OFF,								/* NS segmentation. NOT DEFINED IN AU1. THIS FLAG MUST BE SET TO OFF. */
	ON,									/* NS restart procedure */
	0,									/* Maximum number of restablish Data Link retry */
	16,									/* D channel */
	31									/* Maximum number of B channels */
};

					/*
						procedure parameters description
						ON approve of the comment / OFF disapprove
					*/

CONST	struct net_proc_param AU1_NET_PROC_PARAM = {
	OFF,								/* Some timers depend from the configuration type (POINT_TO_?) */
	OFF,								/* IE comprehension required procedure is applicable */
	OFF,								/* The sending a STATUS message is filtered according the cause value */
	ON,									/* Clear internal call when data link failure */

#	if EQUIPMENT == NT2
		OFF,							/* Internal timers are handled */
#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		OFF,							/* NFAS support */
#	endif

	OFF,								/* NS_INFO_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_FAC_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_NOTIFY_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
};

					/*
						 Message description :
							- information element identifier,
							- information element codeset,
							- call control to D channel transfer (ON or OFF),
							- D channel to call control transfer (ON or OFF),
							- type (Mandatory Optional, Conditional),
							- minimal length,
							- maximal length,
							- number of allowed repetition.
					*/


/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/


							/* Alerting (ALERT) */

CONST	struct spdu_ie AU1_ALERT_IE[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		2,		5,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		2,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Call proceeding (CALL_PROC) */

CONST	struct spdu_ie AU1_CALL_PROC_IE[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		2,		5,		1},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Connect (CONNECT) */

CONST	struct spdu_ie AU1_CONN_IE[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini     maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		2,		5,		1},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Connect acknowledge (CONNECT_ACK) */

CONST	struct spdu_ie AU1_CONN_ACK_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini     maxi repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Progress (PROGRESS) */

CONST	struct spdu_ie AU1_PROGRESS_IE[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	OP,		4,		32,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{DISPLAY,		CODESET_0,		U_N_ALL,	OFF,		MD,		2,		34,		1},
	{IE_NIL}
};

							/* Setup (SETUP) */

CONST	struct spdu_ie AU1_SETUP_IE[] =	{
/*    ie        	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{BC,			CODESET_0,      U_N_ALL,	N_U_ALL,	MD,		4,		13,		1},
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		2,		5,		1},
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		5,		1},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		34,		1},
	{CALLING_NB,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		24,		1},
	{CALLING_SUB_ADD,CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		23,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		23,		1},
	{CALLED_SUB_ADD,CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		23,		1},
	{LLC,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		13,		1},
	{HLC,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		4,		1},
	{IE_NIL}
};

							/* Setup acknowledge (SETUP_ACK) */

CONST	struct spdu_ie AU1_SETUP_ACK_IE[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		2,		255,	1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		2,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

							/* Disconnect (DISCONNECT) */

CONST	struct spdu_ie AU1_DISC_IE[] =	{
/*    ie         	codeset 	  	u --->n 	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		32,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		2,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Release (REL) */

CONST	struct spdu_ie AU1_REL_IE[] =	{
/*    	ie         	codeset 	  	u --->n 	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Release complete (REL_COM) */

CONST	struct spdu_ie AU1_REL_COM_IE[] =	{
/*    	ie         	codeset 	  	u --->n  	n--->u 	   type    mini    maxi	repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};


/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

							/* Information (INFO) */

CONST	struct spdu_ie AU1_INFO_IE[] =	{
/*    	ie         	codeset			u --->n 	n--->u  	type    mini    maxi repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		34,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		34,		1},
	{CALLED_NB,		CODESET_0,	   	OFF,		N_U_ALL,	CD,		2,		23,		1},
	{CALLED_NB,		CODESET_0,	   	U_N_ALL,	OFF,		OP,		2,		23,		1},
	{IE_NIL}
};

							/* Restart (RESTART) */

CONST	struct spdu_ie AU1_RESTART_IE[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		2,		255,	MX_CHAN_ID},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{RESTART_IND,	CODESET_0,  	U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL}
};

							/* Restart acknowledge (RESTART_ACK) */

CONST	struct spdu_ie AU1_RESTART_ACK_IE[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		2,		255,	MX_CHAN_ID},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{RESTART_IND,	CODESET_0,  	U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL}
};


							/* Status (STATUS) */

CONST	struct spdu_ie AU1_STATUS_IE[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		32,		1},
	{CALL_STATE,	CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Status enquiry (STATUS_ENQ) */

CONST	struct spdu_ie AU1_STATUS_ENQ_IE[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

/*=========================================================================*/

#define Ns_au1_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_au1_end_table_or_function		};

#define Ns_au1_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)		\
			Ns_tab_spdu_entry (pr, ev, u_n, n_u, usa, t_ie, t_so_ie),		

#include "au1.tab_spdu"		/* include Table describing the primitives */

#define AU1_MX_TAB_SPDU (sizeof (AU1_TAB_SPDU)/ sizeof (struct spdu)) /* table size */

CONST	uchar	au1_mx_size_spdu = AU1_MX_TAB_SPDU;

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             au1_ie_type_eval - implements the evaluation of a conditional
									IE type : Mandatory or Optional.

Usage            uchar au1_ie_type_eval (uchar spdu_id_p, uchar ie_id_p);
							- spdu_id_p : SPDU ID,
							- ie_id_p   :  IE ID,

Return value    au1_ie_type_eval returns the IE type Mandatory or optional.

common constants and declarations : services.h, ns.h

common objects : call context
							- direction : from network or from user.

*--------------------------------------------------------------------------*/

uchar au1_ie_type_eval (spdu_id_p, ie_id_p)
	uchar	spdu_id_p;			/* SPDU ID */
	uchar	ie_id_p;			/* IE ID, unused in this version */

{

	switch (spdu_id_p) {

		case ALERT :
		case CALL_PROC :
		case CONN :

				/* CHAN_ID is Mandatory if network (BRI only) first response to setup */
				/* For PRI it is mandatory for both user and network response */

			if	(Call_current_exist &&
				((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) &&
				((Na_type == PRI) || (i_entity_origination == ENT_DL_D))
			) {
				return (MD);

			} else {

				return (OP);
			}

		case INFO :

			if (Na_type == PRI) {

				if (ie_id_p == CALLED_NB) return (EX);

				return (MD);
			}

			return (OP);

		case REL :
		case REL_COMP :

				/*
					CAUSE is Mandatory when first clearing message.
				*/

			if ((! Call_current_exist) || (Call_rel_flag == ON)) {
				return (MD);

			} else {

				return (OP);
			}

		case RESTART :
		case RESTART_ACK :

			if (i_entity_origination == ENT_DL_D) {
				return (OP);

			} else {

				if (I_restart_ind_class == RI_INDICATED_CHANNEL) return (MD);
				else return (EX);
			}


		default :
			Trap (TRAP_IE_TYPE, "au1_ie_type_eval");

	}

	return (OP);

}

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Table above */

#undef Ns_au1_table_or_function
#undef Ns_au1_end_table_or_function
#undef Ns_au1_tab_spdu_entry

#define Ns_au1_table_or_function(str, tab)	i_pic = 0;						

#define Ns_au1_end_table_or_function

#define Ns_au1_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)						\
			Pic_init_struct_array (AU1_TAB_SPDU, i_pic, p_ie, (struct spdu_ie *)t_ie);	\
			Pic_init_struct_array_next (AU1_TAB_SPDU, p_ie_so, (struct spdu_ie_so *)t_so_ie);

void pic_init_ns_au1_spdu ()
{
	uchar   i_pic;

#	include "au1.tab_spdu"
}

#endif /* end of PIC used} */

/*EOF*/

