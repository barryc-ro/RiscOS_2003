/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_err.au1
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         au1_error_handler - implements the centralized processing of the
 *		   error handling procedure  for error conditions detected
 *		   by the Network Signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

CONST_ARRAY	uchar AU1_TABLE_ERROR[] = {

	 Set_err ( ERR_N_CALL_REF_GLOBAL,				NON_FATAL),

	 Set_err ( ERR_N_CALL_REF_LGTH,					FATAL),
	 Set_err ( ERR_N_CALL_REF_PAD,					FATAL),
	 Set_err ( ERR_N_CALL_REF_UNKNOWN,				FATAL),
	 Set_err ( ERR_N_CALL_REF_ALREADY_KNOWN,		FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG,					FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_MULTIPOINT,		FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_POINT_TO_POINT,	FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_NO_CALL,			FATAL),
	 Set_err ( ERR_N_CALL_REF_DUMMY,				FATAL),

	 Set_err ( ERR_N_STATUS_CALL_REF,				NON_FATAL),

	 Set_err ( ERR_N_SPDU_TYPE,						FATAL),
	 Set_err ( ERR_N_SPDU_UNEXPECTED,				FATAL),
	 Set_err ( ERR_N_SPDU_LGTH,						FATAL),

	 Set_err ( ERR_N_IE_UNKNOWN,					NON_FATAL),
	 Set_err ( ERR_N_IE_M_MISSING,					FATAL),
	 Set_err ( ERR_N_IE_M_TOO_SHORT,				FATAL),
	 Set_err ( ERR_N_IE_M_TOO_LONG,					FATAL),
	 Set_err ( ERR_N_IE_O_LGTH,						NON_FATAL),
	 Set_err ( ERR_N_IE_SO_TYPE,					NON_FATAL),
	 Set_err ( ERR_N_IE_M_CONTENT,					FATAL),
	 Set_err ( ERR_N_IE_O_CONTENT,					NON_FATAL),
	 Set_err ( ERR_N_IE_OUT_OF_SEQUENCE,			NON_FATAL),
	 Set_err ( ERR_N_IE_REPEATED,					NON_FATAL),
	 Set_err ( ERR_N_NAI,							FATAL),
	 Set_err ( ERR_N_CES,							FATAL),
	 Set_err ( ERR_N_BROADCAST,						FATAL),

	 Set_err ( ERR_I_TE_VAL,						FATAL),

	 Set_err ( ERR_U_SSDU_CODE,						FATAL),
	 Set_err ( ERR_U_PARAM_VAL,						FATAL),
	 Set_err ( ERR_U_MANDATORY_PARAM_MISSING,		FATAL),
	 Set_err ( ERR_U_PARAM_TYPE,					FATAL),
	 Set_err ( ERR_U_PARAM_LGTH,					FATAL),
	 Set_err ( ERR_U_SSDU_UNEXPECTED,				FATAL),
	 Set_err ( ERR_U_NAI,							FATAL),
	 Set_err ( ERR_U_NO_CALL_CTX_AVAILABLE,			FATAL),
	 Set_err ( ERR_U_CALL_CONN_ID_ALREADY_USED,		FATAL),
	 Set_err ( ERR_U_PRIMITIVE_NOT_IMPLEMENTED, 	FATAL),
	 Set_err ( ERR_U_CALL_CONN_ID_UNKNOWN,			FATAL),
	 Set_err ( ERR_U_NON_EXISTENT_CALL,				FATAL),
	 Set_err ( ERR_U_CONGESTION_BUSY,				FATAL),
	 Set_err ( ERR_U_SSDU_IE_INSTANCE_OVERFLOW,		FATAL),

	 Set_err ( ERR_U_USER_FAC_PROTOCOL,				FATAL),
	 Set_err ( ERR_U_UUI_PROTOCOL,					FATAL),
	 Set_err ( ERR_U_NO_TIMER_AVAILABLE,			FATAL),

#	if NS_SEGMENTATION == ON
		Set_err (ERR_N_REASSEMBLY,					FATAL),
		Set_err (ERR_N_SEGMENTER,					FATAL),

#	endif

};

#if NEW_FCT_STYLE == ON
	void au1_send_state (uchar spdu_id, uchar cause_class, uchar val, uchar diagnostic);
#else
	void au1_send_state ();
#endif

	/* To mark fatal errors */

uchar ns_fatal;

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             au1_error_handler - implements the centralized procesing of an
				 exception condition.

Usage            uchar au1_error_handler ();


Description     implements the processing of an error detected in a
				message coming from the network	or in a primitive
				comming from the layer 4 signalling (call processing).

Return value    returns action code =  CONTINUE  continue processing,
									=  STOP      stop processing.

Common constants and declarations   : ns.h

Common objects : call current context

*--------------------------------------------------------------------------*/

uchar au1_error_handler ()
{
	uchar 	i;												/* loop index */
	uchar 	error_code;										/* error code */
	uchar 	error_diagnostic_1;								/* diagnostics 1 */
	uchar 	error_diagnostic_2;								/* diagnostics 2 */

	uchar FAR *p_data;

	ns_fatal = OFF;

		/* if no error ---> continue */

	if (nb_error == 0) return (CONTINUE);


		/*
		   Search fatal  error code -
		   If not found process the first non-fatal error.
		*/

	for (i = nb_error - 1; i > 0; i--) {

		if (Error_stack_code (i) == ERR_N_CALL_REF_GLOBAL) {

			switch (spdu_id) {

				case RESTART :
				case RESTART_ACK :
				case STATUS :
					continue;

				default :
					break;

			}

			break;
		}

	}

	error_code			= Error_stack_code (i);
	error_diagnostic_1	= Error_stack_diagnostic_1 (i);
	error_diagnostic_2	= Error_stack_diagnostic_2 (i);


		/* reset error count */

	nb_error			= 0;

		/* dispatch according to the origination message */

	switch (R_msg_from) {

	/*	---------------------------------------------------------
		|														|
		|		from the D channel side (Data Link entity)		|
		|														|
		---------------------------------------------------------	*/

		case ENT_DL:
		case ENT_DL_D :

#		if NS_TYPE_PRI == ON

			if ((Na_type == PRI) 						&&
				(error_code != ERR_N_STATUS_CALL_REF)	&&
				(error_code != ERR_N_CALL_REF_FLAG)		&&
				(error_code != ERR_N_CALL_REF_UNKNOWN))	{

				if (spdu_id == STATUS) {

					p_data = p_spdu + 1;
					p_data += (*p_data +1);

						/* p_data points on the first IE */
						/* Search for CALL STATE */

					while ((*p_data != CALL_STATE) && (p_data < p_spdu_end)) p_data++;

						/*
						 * p_data points on the CALL STATE IE.
						 * set it to the data area.
						 */

					p_data += 2;

						/* Check if indicated call state is 0 */

					if (*p_data == STATE_NULL_0) {

						Reset_internal_ie ();
						Send_to_call_control (NS_CLEAR_CO);
						call_clear ();
						return (STOP);
					}
				}

			}

#			endif

			switch (error_code) {

					/* -0- Message received on a broadcast connection */

				case ERR_N_BROADCAST :
					return (STOP);

					/* -1- Protocol discriminator error :
						processed in the ns_rcv function,
						the message is ignored.


					   -2- Message too short :
						When a message is received that is too short to
						contain a complete message type information element,
						that message shall be ignored.
					*/

				case ERR_N_SPDU_LGTH :
					return (STOP);

					/* -3- Call reference error :

						-3.1- Invalid call reference format :

						   a) If the call reference information element octet
							  1 bits 1 through 4 indicates a length greater
							  than the length supported by the receiving
							  equipement, then the message shall be ignored.
					*/

				case ERR_N_CALL_REF_LGTH :
					return (STOP);

						/*
						   b) If the call reference information element octet
							  1 bits 5 to 8 are not null, then the message
							  shall be ignored.
						*/

				case ERR_N_CALL_REF_PAD :
					return (STOP);

						/* -3.2- call reference procedural error :

							a) Whenever any message except SETUP, RELEASE,
							   RELEASE COMPLETE, or STATUS received
							   specifying a call reference which is not
							   recognized as relating to a call in progress,
							   clearing is initiated by sending a RELEASE
							   COMPLETE with cause #81 "invalid call
							   reference value", specifying the call reference
							   in the received message.
						*/

				case ERR_N_STATUS_CALL_REF :
				case ERR_N_CALL_REF_UNKNOWN :

					switch (spdu_id) {

						case REL_COMP :
							return (STOP);

						default :

							send_release (REL_COMP,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   DIAGNOSTIC_NIL);
					}

					return (STOP);

							/* d) When a SETUP
								  message is received specifying a call
								  reference which is not recognised as
								  relating to an active call or to a call
								  in progress, and with a call reference
								  flag incorrectly set to "1", this
								  message shall be ignored.
							*/

#			if EQUIPMENT == TE

				case ERR_N_CALL_REF_FLAG  :

					switch (spdu_id) {

						case SETUP :
						case RES :
							return (STOP);

						default :
							send_release (REL_COMP,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   DIAGNOSTIC_NIL);
							return (STOP);

					}

#			else

				case ERR_N_CALL_REF_FLAG_MULTIPOINT :
					send_release (REL_COMP, C_C_PROTOCOL_ERROR,
											C_V_MESSAGE_NOT_COMPATIBLE_101,
											error_diagnostic_1);
					return (STOP);

				case ERR_N_CALL_REF_FLAG_POINT_TO_POINT :
					return (STOP);

				case ERR_N_CALL_REF_FLAG_NO_CALL :
					send_release (REL_COMP, C_C_INVALID_MESSAGE,
											C_V_INVALID_CALL_REF_81,
											DIAGNOSTIC_NIL);
					return (STOP);

#			endif

							/* e) When a SETUP message is received specifying
								  a call reference which is recognized as
								  relating to an active call or to a call in
								  progress, this setup message shall be
								  ignored.
							*/

				case ERR_N_CALL_REF_ALREADY_KNOWN :

					if (spdu_id == SETUP) {
						return (STOP);

					} else {

						return (CONTINUE);
					}

							/* f) When a message
								  is received using the global call
								  reference, no action should be taken.
							*/

				case ERR_N_CALL_REF_GLOBAL :

					switch (spdu_id) {

						case STATUS :

							if (Na_type == BRI) return (CONTINUE);
							break;

						case RESTART :
						case RESTART_ACK :
							return (CONTINUE);
					}

					return (STOP);

						/*
							g) When a message is received using the dummy call
								reference, no action should be taken
						*/

				case ERR_N_CALL_REF_DUMMY :
					return (STOP);

					/* -4- Message type or message sequence error :

						Whenever an unexpected message, except RELEASE or
						RELEASE COMPLETE or unrecognized message is received
						in any state other than the Null state, a status
						message shall be returned with a cause #97 or #101
					*/

				case ERR_N_SPDU_TYPE :
				case ERR_N_SPDU_UNEXPECTED :

					switch (spdu_id) {

							/* process if RELEASE, RELEASE COMPLETE */

						case REL :
							send_release (REL_COMP, C_C_PROTOCOL_ERROR,
													C_V_PROTOCOL_ERROR_UNSPECIFIED_111,
													DIAGNOSTIC_NIL);
							return (STOP);

						case REL_COMP :

							if (Na_type == PRI) {

								au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
											C_V_MESSAGE_NOT_COMPATIBLE_101,
											spdu_id);
							}

							call_clear ();
							return (STOP);

						case RESTART :
						case RESTART_ACK :
							return (STOP);

						default :

							if (error_code == ERR_N_SPDU_TYPE) {

									/*
									 * Only one STATUS message is to be sent to
									 * the network
									 */

								if (nb_status_sent >= 1) return (STOP);


								send_state (C_C_PROTOCOL_ERROR,
											C_V_MESSAGE_TYPE_NON_EXISTENT_97,
											spdu_id);
							} else {

								au1_send_state (spdu_id,C_C_PROTOCOL_ERROR,
											C_V_MESSAGE_NOT_COMPATIBLE_101,
											spdu_id);
							}

							return (STOP);

					}


					/* -5- General information element errors :

						-5.1- information element out of sequence :

						-5.2- duplicated information element :
					*/


				case ERR_N_IE_OUT_OF_SEQUENCE :
					return (CONTINUE);

				case ERR_N_IE_REPEATED :
					return (CONTINUE);


					/* -6- Mandatory information element error :

						-6.1- Mandatory information element missing :

							When a message other than SETUP, DISCONNECT,
							RELEASE or RELEASE COMPLETE is received which has
							one or more mandatory information elements missing,
							no action should occur. A status message is then
							returned with cause #96 "mandatory information
							element is missing".

							When a RELEASE COMPLETE message is received with
							a cause IE missing it will be assumed that a
							REALEASE COMPLETE message was received with
							cause #31.

							When a SETUP or RELEASE message is received with
							a cause IE missing it will be assumed that a
							RELEASE COMPLETE message is sent with cause #96.

							When a DISCONNECT message is received with
							a cause IE missing it will be assumed that a
							RELEASE message is sent with cause #96 and the
							received message is transmitted with cause #31.

					*/

				case ERR_N_IE_M_MISSING :

					ns_fatal = ON;

					if (Na_type == BRI ) {

#						if NS_TYPE_BRI == ON

							switch (spdu_id) {

								case REL_COMP :

									if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
										set_i_cause (C_C_NORMAL_EVENT,
													 C_V_NORMAL_UNSPECIFIED_31, P_NIL);
									}
									return (CONTINUE);

								case SETUP :
								case REL :
									send_release (REL_COMP,C_C_PROTOCOL_ERROR,
														   C_V_MANDATORY_IE_MISSING_96,
														   error_diagnostic_1); 	/* diag is the IE id */
									return (STOP);

								case DISC :

									if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
										set_i_cause (C_C_NORMAL_EVENT,
													 C_V_NORMAL_UNSPECIFIED_31, P_NIL);
										Call_disc_m_ie_error = error_code;
									}
									return (CONTINUE);

								case STATUS :

									if (nb_status_sent >= 1) return (STOP);

									if (Call_current_exist) {

										if (Call_state >= STATE_DISCONNECT_REQUEST_11)	{

											Reset_internal_ie ();
											set_i_cause (C_C_PROTOCOL_ERROR, C_V_MANDATORY_IE_MISSING_96, (char FAR *)&error_diagnostic_1);

											ns_stop_all_timers ();

											if (Call_save_spdu != P_NIL) {
												Release_saved_spdu ();
											}

											Send_to_d_channel_and_save_spdu (REL);
											N308 = 0;
											Set_state (STATE_RELEASE_REQUEST_19);
											Start_timer_ns (T308);
											return (STOP);

										} else {

											au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
													C_V_MANDATORY_IE_MISSING_96,
													error_diagnostic_1); 	/* diag is the IE id */

											return (STOP);

										}

									}

									break;

								default :

										/*
										 * Only one STATUS message is to be sent to
										 * the network
										 */

									if (nb_status_sent >= 1) return (STOP);

									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
												C_V_MANDATORY_IE_MISSING_96,
												error_diagnostic_1); 	/* diag is the IE id */
									return (STOP);
							}

#						endif

					} else {

#						if NS_TYPE_PRI == ON

								/* PRI access */

							switch (spdu_id) {

								case ALERT 		:
								case CALL_PROC	:
								case CONN		:
								case NOTIFY		:
								case SETUP_ACK	:
								case STATUS		:

									send_release (REL,C_C_PROTOCOL_ERROR,
													  C_V_MANDATORY_IE_MISSING_96,
														   error_diagnostic_1); 	/* diag is the IE id */
									return (STOP);

								case DISC :

									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
												C_V_MANDATORY_IE_MISSING_96,
												error_diagnostic_1); 	/* diag is the IE id */

									break;

								case INFO :
								case PROGRESS :

									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
												C_V_MANDATORY_IE_MISSING_96,
												error_diagnostic_1); 	/* diag is the IE id */

									return (STOP);

								case REL 	:
								case SETUP	:

									send_release (REL_COMP, C_C_PROTOCOL_ERROR,
												C_V_MANDATORY_IE_MISSING_96,
												error_diagnostic_1); 	/* diag is the IE id */

									return (STOP);

								case REL_COMP :
									return (CONTINUE);

								case RESTART :
								case RESTART_ACK :
									return (STOP);

							}

#						endif

						return (CONTINUE);

					}


						/* -6.2- Mandatory information element content
								 error :

								 When a message other than SETUP, DISCONNECT,
								 RELEASE or RELEASE COMPLETE is received
								 which has one or more mandatory information
								 elements with invalid content, no action
								 should be taken on the message and no state
								 change should occur.
								 A STATUS message is then returned with cause
								 #100 "invalid information element contents".

								 When in a SETUP or in a RELEASE message,
								 a mandatory IE has invalid content, the
								 message shall be ignored and a RELEASE is
								 then returned with cause #100
								 "invalid information element contents".

								 When in a RELEASE COMPLETE, a mandatory IE
								 has an invalid content, no message is sent
								 back and the call return to the NULL state.
						*/

				case ERR_N_IE_M_TOO_LONG :

					if (Na_type == PRI) {

#						if NS_TYPE_PRI == ON

							switch (spdu_id) {

								case DISC :
								case INFO :
								case PROGRESS :
								case SETUP_ACK :

									au1_send_state (spdu_id, C_C_INVALID_MESSAGE,
												C_V_INVALID_MESSAGE_UNSPECIFIED_95,
											error_diagnostic_1); 	/* diag is the IE id */



									return (CONTINUE);

								case REL :
									send_release (REL_COMP, C_C_INVALID_MESSAGE,
												C_V_INVALID_MESSAGE_UNSPECIFIED_95,
											error_diagnostic_1); 	/* diag is the IE id */
									return (STOP);

								case RESTART :
									return (STOP);

								default :

									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
											C_V_MANDATORY_IE_MISSING_96,
										error_diagnostic_1); 	/* diag is the IE id */

							}

#						endif

						return (CONTINUE);
					}

					if (Na_type == BRI) {

#						if NS_TYPE_BRI == ON

							if (((Call_state == STATE_DISCONNECT_REQUEST_11) ||
								(Call_state == STATE_RELEASE_REQUEST_19)) && (spdu_id == STATUS)) {

								 p_data = p_spdu + 1;
								 p_data += (*p_data +1);

									 /* p_data points on the first IE */

								 while ((*p_data != CAUSE) && (p_data < p_spdu_end)) p_data++;

									 /*
									  * set it to the data area.
									  */

								 p_data += 3;

									/* Check if it is a response to STATUS ENQUIRY */

								 if (*p_data != 0x9e) {

									send_state (C_C_INVALID_MESSAGE, C_V_INVALID_MESSAGE_UNSPECIFIED_95, DIAGNOSTIC_NIL);
									return (CONTINUE);
								 }

							}

#						endif

					}

				case ERR_N_IE_M_CONTENT :
				case ERR_N_IE_M_TOO_SHORT :

					if (Na_type == BRI) {

						ns_fatal = ON;

#						if NS_TYPE_BRI == ON

							switch (spdu_id) {

								case SETUP :
								case REL :
									send_release (REL_COMP,C_C_PROTOCOL_ERROR,
														   C_V_INVALID_IE_CONTENT_100,
														   error_diagnostic_1); /* diag is the IE id */
									return (STOP);

								case DISC :

									if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
										set_i_cause (C_C_NORMAL_EVENT,
													 C_V_NORMAL_UNSPECIFIED_31, P_NIL);
										Call_disc_m_ie_error = error_code;
									}

									return (CONTINUE);

								case REL_COMP :

									if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
										set_i_cause (C_C_NORMAL_EVENT,
													 C_V_NORMAL_UNSPECIFIED_31, P_NIL);
									}
									return (CONTINUE);

								case STATUS :

									if (Call_current_exist) {

										switch (Call_state) {

											case STATE_DISCONNECT_REQUEST_11 :
											case STATE_DISCONNECT_INDICATION_12 :
											case STATE_RELEASE_REQUEST_19 :

												send_release (REL,C_C_PROTOCOL_ERROR,
																	   C_V_INVALID_IE_CONTENT_100,
																	   error_diagnostic_1); /* diag is the IE id */
												return (STOP);
										}

									}

								default :

										/* Only one STATUS message is to be sent to
										 * the network
										 */

									if (nb_status_sent >= 1) return (STOP);

									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
												C_V_INVALID_IE_CONTENT_100,
												error_diagnostic_1); /* diag is the IE id */
									return (STOP);
							}

#						endif

					} else {

#						if NS_TYPE_PRI == ON

								/* PRI access */

							switch (spdu_id) {

								case ALERT 		:
								case CALL_PROC	:
								case CONN		:
								case NOTIFY		:
								case SETUP_ACK	:
								case STATUS		:

									send_release (REL,C_C_PROTOCOL_ERROR,
													  C_V_INVALID_IE_CONTENT_100,
														   error_diagnostic_1); 	/* diag is the IE id */
									return (STOP);

								case DISC :
								case PROGRESS :

									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
												C_V_INVALID_IE_CONTENT_100,
												error_diagnostic_1); 	/* diag is the IE id */

									break;

								case INFO :

									if (ie_id == DISPLAY) {

										send_state (C_C_PROTOCOL_ERROR,
													C_V_INVALID_IE_CONTENT_100,
													error_diagnostic_1); 	/* diag is the IE id */
									} else {

										send_release (REL,C_C_PROTOCOL_ERROR,
														  C_V_INVALID_IE_CONTENT_100,
															   error_diagnostic_1); 	/* diag is the IE id */
									}

									return (STOP);

								case REL 	:
								case SETUP	:

									send_release (REL_COMP, C_C_PROTOCOL_ERROR,
												C_V_INVALID_IE_CONTENT_100,
												error_diagnostic_1); 	/* diag is the IE id */

									return (STOP);

								case REL_COMP :
									return (CONTINUE);

								case RESTART :
								case RESTART_ACK :

									if (i_entity_origination == ENT_DL_D) {

										p_data = p_spdu + 1;
										p_data += (*p_data +1);

											/* p_data points on the first IE */

										while ((*p_data != RESTART_IND) && (p_data < p_spdu_end)) p_data++;

											/*
											 * p_data points on the RESTART INDICATOR IE.
											 * set it to the data area.
											 */

										p_data += 2;

											/* If bits 0->2 indicates 'restart indicated channel',
											 * then CHAN_ID is mandatory.
											 */

										if ((*p_data & Mask (3)) == RI_INDICATED_CHANNEL) {

											return (STOP);
										}

										I_(restart_ind, restart_class) = (*p_data & Mask (3));

										if ((I_(restart_ind, restart_class) != RI_SINGLE_INTERFACE) &&
											(I_(restart_ind, restart_class) != RI_ALL_INTERFACES)) {

												return (STOP);
										}

										set_ie_i (CODESET_0, RESTART_IND);

										return (CONTINUE);

									}

									return (STOP);

							}

#						endif

						return (CONTINUE);
					}

					/* -7- Non mandatory (optional) information element
						   errors :

						   -7.1- Unrecognized information element :

								 When a message is received except REL, REL_COMP, DISC
								 with an or more unrecognized information elements, the message
								 and the valid elements shall be processed.
								 The user shall send a STATUS message with a
								 cause "unknow or out of order IE" except for
								 the RELEASE COMPLETE message.
					 */

				case ERR_N_IE_SO_TYPE :
				case ERR_N_IE_UNKNOWN :

					switch (spdu_id) {

						case REL_COMP :
							break;

						case REL :
							send_release (REL_COMP, C_C_PROTOCOL_ERROR,
												   C_V_NON_EXISTENT_IE_99,
												   error_diagnostic_1); /* diag is the IE id */
							return (STOP);

						case DISC :
							send_release (REL, C_C_PROTOCOL_ERROR,
												   C_V_NON_EXISTENT_IE_99,
												   error_diagnostic_1); /* diag is the IE id */
							return (STOP);

						case STATUS :

							if (C_v (I_cause_class, I_cause_val) !=
								C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {

								au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
											C_V_NON_EXISTENT_IE_99,
											error_diagnostic_1); /* diag is the IE id */
							}

							break;

						case SETUP_ACK :
						case CONN :
						case ALERT :

							if (Na_type == BRI) return (CONTINUE);

						default :

							au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,
										C_V_NON_EXISTENT_IE_99,
										error_diagnostic_1); /* diag is the IE id */
					}

					return (CONTINUE);

						/* -7.2- Non-mandatory information element
								 content error:
								 same as 7.1 except the cause which is
								 "invalid content".
						*/

				case ERR_N_IE_O_CONTENT :

					if (Na_type == BRI) {

#						if NS_TYPE_BRI == ON

							switch (spdu_id) {

								case SETUP_ACK :
								case REL_COMP :
									break;

								case DISC :
									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR, C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1); /* diag is the IE id */
									break;

								case REL :

									if (Call_current_exist) {

										if (Call_state != STATE_RELEASE_REQUEST_19) {

											send_release (REL_COMP,C_C_PROTOCOL_ERROR,
															   C_V_INVALID_IE_CONTENT_100,
															   error_diagnostic_1); /* diag is the IE id */

										} else {

											call_clear ();
										}

									}

									return (STOP);

								case STATUS :
									break;

								case STATUS_ENQ :
									return (CONTINUE);

								case CONN :

										/* Don't transmit the CONN_ACK ... */

									Send_to_call_control (NS_CONN_CO);
									Set_state (STATE_ACTIVE_10);
									return (STOP);

								default :
									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR, C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1); /* diag is the IE id */
									break;
							}

#						endif

					} else {

#						if NS_NA_PRI == ON

								/* PRI access */

							switch (spdu_id) {

								case ALERT 		:
								case CALL_PROC	:
								case CONN		:

									if (ie_id == DISPLAY) {
										au1_send_state (spdu_id, C_C_PROTOCOL_ERROR, C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1); /* diag is the IE id */

									} else {

										send_release (REL, C_C_PROTOCOL_ERROR,
															   C_V_INVALID_IE_CONTENT_100,
															   error_diagnostic_1); /* diag is the IE id */
										return (STOP);

									}

									break;

								case CONN_ACK	:
								case DISC		:
								case NOTIFY		:
								case PROGRESS	:
								case STATUS_ENQ	:
									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR, C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1); /* diag is the IE id */
									break;

								case REL :

									if (Call_current_exist && (Call_state == STATE_RELEASE_REQUEST_19)) {
										return (CONTINUE);

									} else {

										send_release (REL_COMP, C_C_PROTOCOL_ERROR,
														   C_V_INVALID_IE_CONTENT_100,
														   error_diagnostic_1); /* diag is the IE id */
									}

									return (STOP);

								case SETUP :

									switch (ie_id) {

										case CHAN_ID :
										case PROGRESS_IND :
										case CALLED_NB :
											send_release (REL_COMP, C_C_PROTOCOL_ERROR,
																   C_V_INVALID_IE_CONTENT_100,
																   error_diagnostic_1); /* diag is the IE id */
											return (STOP);

										default :
											au1_send_state (spdu_id, C_C_PROTOCOL_ERROR, C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1); /* diag is the IE id */
											break;
									}

									break;

								case SETUP_ACK	:

									if (ie_id == PROGRESS_IND) {

										send_release (REL, C_C_PROTOCOL_ERROR, C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1); /* diag is the IE id */
										return(STOP);

									} else {

										au1_send_state (spdu_id, C_C_PROTOCOL_ERROR, C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1); /* diag is the IE id */

									}

									break;

								case REL_COMP :
									return (CONTINUE);

								case RESTART :
								case RESTART_ACK :

									if (ie_id == CHAN_ID) {

										return (STOP);
									}

									return (CONTINUE);

							}

#						endif

					}

					return (CONTINUE);

						/* -7.3- Non mandatory information element length
								 error :

								When a message is received with a length
								exceeding the maximum length or inferior to
								the minimum	length, the message an the
								valid elements shall be processed.
								The user shall send a STATUS message with a
								cause #100 except for access informations
								where cause is #43.
						*/

				case ERR_N_IE_O_LGTH :

#					if NS_TYPE_PRI == ON

						if (Na_type == PRI) {

							if (Call_current_exist) {

								if (spdu_id == STATUS) {

									 p_data = p_spdu + 1;
									 p_data += (*p_data +1);

										 /* p_data points on the first IE */

									 while ((*p_data != CAUSE) && (p_data < p_spdu_end)) p_data++;

										 /*
										  * set it to the data area.
										  */

									 p_data += 3;

										/* Check if it is a response to STATUS ENQUIRY */

									 if (*p_data != 0x9e) {

										send_state (C_C_INVALID_MESSAGE, C_V_INVALID_MESSAGE_UNSPECIFIED_95, DIAGNOSTIC_NIL);
										return (CONTINUE);
									 }

								}

								au1_send_state (spdu_id, C_C_INVALID_MESSAGE, C_V_INVALID_MESSAGE_UNSPECIFIED_95, DIAGNOSTIC_NIL);

							} else {

								send_release (REL_COMP, C_C_INVALID_MESSAGE, C_V_INVALID_MESSAGE_UNSPECIFIED_95,DIAGNOSTIC_NIL);
								return (STOP);
							}

							return (CONTINUE);
						}

#					endif

					switch (spdu_id) {

#						if NS_TYPE_BRI == ON

							case REL :

								if ((Na_type == BRI) && (ie_id == CAUSE)) {

									if (Call_current_exist) {

										switch (Call_state) {

											case STATE_DISCONNECT_REQUEST_11 :
												send_release (REL_COMP, C_C_INVALID_MESSAGE, C_V_INVALID_MESSAGE_UNSPECIFIED_95,DIAGNOSTIC_NIL);
												return (STOP);
										}
									}

								}

#						endif

						case STATUS :

							if (C_v (I_cause_class, I_cause_val) != C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {

								au1_send_state (spdu_id, C_C_PROTOCOL_ERROR, C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1); /* diag is the IE id */
							}

							break;

						default :

							switch (error_diagnostic_1) {

								case CALLED_SUB_ADD :
									au1_send_state (spdu_id, C_C_RESOURCE_UNAVAILABLE, C_V_ACCESS_INFORMATION_DISCARDED_43, error_diagnostic_1);
									break;

								default :
									au1_send_state (spdu_id, C_C_PROTOCOL_ERROR,	C_V_INVALID_IE_CONTENT_100,	error_diagnostic_1);
									break;
							}
					}

					return (CONTINUE);


				case ERR_N_NAI :
				case ERR_N_CES :
				case ERR_I_TE_VAL :
					return (STOP);

				default :
					Trap (TRAP_NS_ERR_UNEXPECTED, "au1_err");

			}
			return (STOP);

	/*	-------------------------------------------------------------
		|                                                           |
		|	  from the Call Control side (User entity)   			|
		|                                                           |
		-------------------------------------------------------------	*/

		default :
			send_err_to_user (error_code, error_diagnostic_1, error_diagnostic_2, R_msg_from);

			switch (ssdu_id) {

				case NS_CONN_RQ :
					call_clear ();
					break;

				default :
					break;
			}
			return (STOP);

	/*	-------------------------------------------------------------
		|                                                           |
		|	  from the Management NS (MNS entity)   				|
		|                                                           |
		-------------------------------------------------------------	*/

		case ENT_MNS :
			ns_retransmit (MNS_ERR_IN, ENT_MNS);
			return (STOP);
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             au1_send_state - gives next state associated to the
						received event, send a status with that new
						state, and finally restore the previous state.

						THIS FUNCTION IS TO BE CALLED ONLY IF THE PROCESS
						HAS TO CONTINUE AFTER THE STATUS IS SENT.

Usage            uchar au1_send_state (event_id, cause_class, val, diagnostic);


Return value    return value : None.

Common constants and declarations   : ns.h

Common objects : call current context

*--------------------------------------------------------------------------*/

void au1_send_state (event_id, cause_class, val, diagnostic)
	uchar event_id;
	uchar cause_class;
	uchar val;
	uchar diagnostic;
{

	uchar current_state;
	uchar unexpected_event;

	unexpected_event 	= FALSE;
	current_state 		= STATE_NULL_0;

		/*
		 * The Australian variant needs the STATUS to be sent
		 * right away.
		 */

	Ns_spdu_processed = ON;

	if (Call_current_exist) {

		current_state = Call_state;

	}

		/*
		 * Switch according the current state.
		 * Modify the 'Call_state' according the received event
		 * excluding the centralized events (DISC, REL, REL_COMP, INFO
		 *	STATUS and STATUS ENQUIRY).
		 */

	switch (current_state) {

		case STATE_NULL_0 :

			switch (event_id) {

				case SETUP:

					set_i_cause (cause_class, val, (char FAR *)&diagnostic);

					I_(call_state, val) = STATE_NULL_0;
					set_ie_i (CODESET_0, CALL_STATE);
					Send_to_d_channel (STATUS);

					return;

				default :
					unexpected_event = TRUE;
			}


			break;

		case STATE_CALL_INIT_1 :

			switch (event_id) {

				case CALL_PROC :
					if (ns_fatal == OFF) Call_state = STATE_OUTGOING_CALL_PROC_3;
					break;

				case SETUP_ACK :
					if (ns_fatal == OFF) Call_state = STATE_OVERLAP_SENDING_2;
					break;

				case ALERT :

					if (Na_type == BRI) {

						Call_state = STATE_CALL_RECEIVED_7;
						unexpected_event = FALSE;

					} else {

						unexpected_event = TRUE;

					}

					break;

				default :

					unexpected_event = TRUE;
			}

			break;

		case STATE_OVERLAP_SENDING_2 :

			switch (event_id) {

				case CALL_PROC :

					if (Na_type == PRI) {
						Call_state = STATE_OUTGOING_CALL_PROC_3;
					}

					break;

				case ALERT :

					if (Na_type == PRI) {
						Call_state = STATE_CALL_DELIVERED_4;
					}

					break;

				case PROGRESS :
					Call_state = STATE_OVERLAP_SENDING_2;
					break;

				case CONN :
					Call_state = STATE_ACTIVE_10;
					break;

				default :
					unexpected_event = TRUE;
			}

			break;

		case STATE_OUTGOING_CALL_PROC_3 :

			switch (event_id) {

				case ALERT :

					if (Na_type == PRI) {
						Call_state = STATE_CALL_DELIVERED_4;
					}

					break;

				case CONN :

					if (Na_type == PRI) {
						Call_state = STATE_ACTIVE_10;
					}

					break;

				case PROGRESS :
					Call_state = STATE_OUTGOING_CALL_PROC_3;
					break;

				default :
					unexpected_event = TRUE;
			}

			break;

		case STATE_CALL_DELIVERED_4 :

			switch (event_id) {

				case CONN :

					if (Na_type == PRI) {
						Call_state = STATE_ACTIVE_10;
					}

					break;

				default :
					unexpected_event = TRUE;
			}

			break;


		case STATE_CALL_PRESENT_6 :
		case STATE_CALL_RECEIVED_7:
			unexpected_event = TRUE;
			break;

		case STATE_CONNECT_REQUEST_8 :

			switch (event_id) {

				case CONN_ACK :

					if (Na_type == PRI) {
						Call_state = STATE_ACTIVE_10;
					}

					break;

				default :
					unexpected_event = TRUE;
			}

			break;

		case STATE_INCOMING_CALL_PROC_9 :
		case STATE_ACTIVE_10 :
			unexpected_event = TRUE;
			break;

		case STATE_DISCONNECT_REQUEST_11 :
		case STATE_DISCONNECT_INDICATION_12 :
		case STATE_RELEASE_REQUEST_19 :
			break;

	}

		/*
		 * Switch according the current state.
		 * Modify the 'Call_state' according the received event
		 * including the centralized events (DISC, REL, REL_COMP, INFO
		 *	STATUS and STATUS ENQUIRY) only.
		 */

	switch (event_id) {

		case DISC :

			unexpected_event = FALSE;

			switch (Call_state) {

				case STATE_CALL_INIT_1 :

					if (Na_type == PRI) {
						unexpected_event = TRUE;
					}

					break;

				case STATE_ACTIVE_10 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
				case STATE_DISCONNECT_INDICATION_12 :
					break;

				default :
					Call_state = STATE_DISCONNECT_INDICATION_12;
					break;		/* enter disconnect indication state */

			}

			break;

				/* RELEASE */

		case REL :

			unexpected_event = FALSE;

			switch (Call_state) {

				case STATE_RELEASE_REQUEST_19 :
					break;

				default :
					Call_state = STATE_NULL_0;
					return;
			}

			break;


				/* RELEASE COMPLETE */

		case REL_COMP :
			unexpected_event	= FALSE;
			Call_state			= STATE_NULL_0;
			return;

				/* INFO */

		case INFO :

			if (Call_state == STATE_DISCONNECT_INDICATION_12) {

					/* Do not transmit */

				Call_state = current_state;
				return;
			}

			if (Call_state > STATE_ACTIVE_10) {
				unexpected_event = TRUE;

			} else {

				unexpected_event = FALSE;
			}

			break;


		case STATUS_ENQ :

				/*
					Ignore any error in STATUS_ENQ to send back
					STATUS only once
				*/

			return;

		case STATUS :
			unexpected_event = FALSE;
			break;
	}


		/*
		 * Call state is now the 'next one' accoridng the
		 * received event. Send the STATUS with this state,
		 * execept if we enterred a clearing state for BRI.
		 */

	if ((Call_state < STATE_DISCONNECT_REQUEST_11)	||
		(spdu_id == INFO)							||
		(spdu_id == DISC)){

			/* Only one STATUS message is to be sent to the network */

		if (++nb_status_sent > 1) return;

		if (unexpected_event == TRUE) {
			cause_class = C_C_PROTOCOL_ERROR;
			val=  C_V_MESSAGE_NOT_COMPATIBLE_101;
		}

		send_state (cause_class, val, diagnostic);
	}

		/* Restore the previous state */

	Call_state = current_state;
}

/*EOF*/

