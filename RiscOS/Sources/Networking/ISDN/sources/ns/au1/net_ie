

/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - net_ie.au1
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/
/*

Table structures :
----------------

		tabl_item   TABL_ITEM									uchar
		==========================                             ============
		| tabl_id | size | p_val |---------------------------->|   val    |
		--------------------------  tabl_yy      ============  ------------
		|         |      |       |-------------->|   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |          |  |          |
		--------------------------
		|         |      |       |
		--------------------------
		|         |      |       |


	tabx_item   TABX_ITEM                   tabx_list                uchar
	=================================     =================        =========
	| tabl_id | size | list pointer |---->| tabl_id | size|------->| x_val |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------
	|         |      |              |

*/
/*-------------------------------------------------------------------------*/

	/*
		Initialization constants of ie internal structure
		used by SPDU received processing.
	*/

		/*  Bearer capability (BC) */

CONST   struct  i_bc	df_spdu_au1_i_bc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/*  Called party number and subaddress (CALLED_NB, CALLED_SUB_ADD) */

CONST   struct  i_called_nb	 df_spdu_au1_i_called_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	0,
	A_NIL
};

CONST   struct  i_called_sub_add	df_spdu_au1_i_called_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Calling party number (CALLING_NB) */

CONST   struct  i_calling_nb	df_spdu_au1_i_calling_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	PRES_ALLOWED,
	USER_PASSED,
	0,
	A_NIL
};

		/* calling party subaddress (CALLING_SUB_ADD) */

CONST   struct  i_calling_sub_add   df_spdu_au1_i_calling_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Call state (CALL_STATE) */

CONST   struct  i_call_state	df_spdu_au1_i_call_state = {
	CODING_STD_CCITT,
	STATE_NULL_0
};

		/* Cause (CAUSE) */

CONST   struct  i_cause	 df_spdu_au1_i_cause = {
	CODING_STD_CCITT,
	LOCATION_USER,
	BYTE_VAL_NIL,
	C_C_NORMAL_EVENT,
	C_V_NORMAL_CLEARING_16,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Channel identification (CHAN_ID) */

CONST   struct  i_chan_id   df_spdu_au1_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_BRI,
	CHAN_PREF,
	D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_CCITT,
	CHAN_NUMBER,
	B_CHAN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};


		/* Display (DISPLAY) */

CONST   struct  i_display   df_spdu_au1_i_display = {
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* High layer compatibility (HLC) */

CONST   struct  i_hlc   df_spdu_au1_i_hlc = {
	CODING_STD_CCITT,
	INTER_CCITT_CEPT,
	PRESENTATION_PROFIL,
	TELEPHONY,
	BYTE_VAL_NIL,
};

		/* Keypad facility (KEYPAD) */

CONST   struct  i_keypad	df_spdu_au1_i_keypad = {
	0,
	A_NIL
};

		/* Low layer compatibility (LLC) */

CONST   struct  i_llc   df_spdu_au1_i_llc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	OUT_BAND_NOT_POSSIBLE,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Progress indicator (PROGRESS_IND) */

CONST   struct  i_progress_ind  df_spdu_au1_i_progress_ind = {
	CODING_STD_CCITT,
	PROGRESS_LOC_PU_LOCAL_USER,
	PROGRESS_DESCR_NON_END_TO_END_ISDN
};

		/* Restart indicator (RESTART_IND) */

CONST   struct  i_restart_ind   df_spdu_au1_i_restart_ind = {
	RI_ALL_INTERFACES
};


/*=========================================================================*/

	/*
		Initialization constants of the ie internal structure
		used by SSDU received processing.
	*/

		/*  Bearer capability (BC) */

CONST   struct  i_bc	df_ssdu_au1_i_bc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/*  Called party number and subaddress (CALLED_NB CALLED_SUB_ADD) */

CONST   struct  i_called_nb	 df_ssdu_au1_i_called_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	0,
	A_NIL
};

CONST   struct  i_called_sub_add	df_ssdu_au1_i_called_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Calling party number (CALLING_NB) */

CONST   struct  i_calling_nb	df_ssdu_au1_i_calling_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	PRES_ALLOWED,
	USER_PASSED,
	0,
	A_NIL
};

		/* calling party subaddress (CALLING_SUB_ADD) */

CONST   struct  i_calling_sub_add   df_ssdu_au1_i_calling_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Call state (CALL_STATE) */

CONST   struct  i_call_state	df_ssdu_au1_i_call_state = {
	CODING_STD_CCITT,
	STATE_NULL_0
};

		/* Cause (CAUSE) */

CONST   struct  i_cause	 df_ssdu_au1_i_cause = {
	CODING_STD_CCITT,
	LOCATION_PU_NET_LOC_USER,
	BYTE_VAL_NIL,
	C_C_NORMAL_EVENT,
	C_V_NORMAL_CLEARING_16,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Channel identification (CHAN_ID) */

CONST   struct  i_chan_id   df_ssdu_au1_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_BRI,
	CHAN_PREF,
	D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_CCITT,
	CHAN_NUMBER,
	B_CHAN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Display (DISPLAY) */

CONST   struct  i_display   df_ssdu_au1_i_display = {
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* High layer compatibility (HLC) */

CONST   struct  i_hlc   df_ssdu_au1_i_hlc = {
	CODING_STD_CCITT,
	INTER_CCITT_CEPT,
	PRESENTATION_PROFIL,
	TELEPHONY,
	BYTE_VAL_NIL,
};

		/* Keypad facility (KEYPAD) */

CONST   struct  i_keypad	df_ssdu_au1_i_keypad = {
	0,
	A_NIL
};

		/* Low layer compatibility (LLC) */

CONST   struct  i_llc   df_ssdu_au1_i_llc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	OUT_BAND_NOT_POSSIBLE,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Progress indicator (PROGRESS_IND) */

CONST   struct  i_progress_ind  df_ssdu_au1_i_progress_ind = {
	CODING_STD_CCITT,
	PROGRESS_LOC_USER,
	PROGRESS_DESCR_NON_END_TO_END_ISDN
};

		/* Restart indicator (RESTART_IND) */

CONST   struct  i_restart_ind   df_ssdu_au1_i_restart_ind = {
	RI_ALL_INTERFACES
};



/*=========================================================================*/

				/*-------------------------------*/
				/* TABLES : list of valid values */
				/*-------------------------------*/

					/* Assignor/Assignee (ie LLC) */

CONST   uchar AU1_ASSIGN_S[] = {
	DEFAULT_ASSIGNEE,
	ASSIGNOR_ONLY,
	};

					/* Establishment (ie BC) */

CONST   uchar AU1_BC_ESTABLISH_S[] = {
	EST_DEMAND,
	EST_PERMANENT,						
	};

					/* Cause class (ie CAUSE) */

CONST   uchar AU1_C_C_S[]={
	C_C_NORMAL_EVENT_0,
	C_C_NORMAL_EVENT,
	C_C_RESOURCE_UNAVAILABLE,
	C_C_SERVICE_NOT_AVAILABLE,
	C_C_SERVICE_NOT_IMPLEMENTED,
	C_C_INVALID_MESSAGE,
	C_C_PROTOCOL_ERROR,
	C_C_INTERWORKING,
	};

					/* Automata call state values (ie CALL_STATE) */

CONST   uchar AU1_CALL_STATE_VAL_S[] = {
	STATE_NULL_0,
	STATE_CALL_INIT_1,
	STATE_OVERLAP_SENDING_2,
	STATE_OUTGOING_CALL_PROC_3,
	STATE_CALL_DELIVERED_4,
	STATE_CALL_PRESENT_6,
	STATE_CALL_RECEIVED_7,
	STATE_CONNECT_REQUEST_8,
	STATE_INCOMING_CALL_PROC_9,
	STATE_ACTIVE_10,
	STATE_DISCONNECT_REQUEST_11,
	STATE_DISCONNECT_INDICATION_12,
	STATE_RELEASE_REQUEST_19,
#   if EQUIPMENT == NT2
	STATE_CALL_ABORT_22,
#   endif

	STATE_REST_1,
	STATE_REST_2,
	};

					/* Numbering type (ie CALLED_NB) */

CONST   uchar AU1_CALLED_NB_TYPE_S[] = {
	NB_UNKNOWN,
	NB_INTERNATIONAL,
	NB_NATIONAL,
	NB_SUBSCRIBER,
	};

					/* Numbering type (ie CALLING_NB) */

CONST   uchar AU1_CALLING_NB_TYPE_S[] = {
	NB_UNKNOWN,
	NB_INTERNATIONAL,
	NB_NATIONAL,
	NB_SUBSCRIBER,
	};

					/* Calling presentation indicator (ie CALLING_NB) */

CONST   uchar AU1_CALLING_NB_PRES_S[] = {
	PRES_ALLOWED,
	PRES_RESTRICTED,
	PRES_NOT_AVAILABLE,
	PRES_RESERVED,
	};

					/* Channel number (ie CAUSE) */

CONST   uchar AU1_CHAN_NUMBER_S[] = {
	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
	17,18,19,20,21,22,23,24,25,26,27,28,29,30,
	};

					/* Channel type (ie CHAN_ID) */

CONST   uchar AU1_CHAN_TYPE_S[] = {
	B_CHAN,
	H0_CHAN,
	H11_CHAN,
	H12_CHAN,
	};

					/* Preferred/exclusive (ie CHAN_ID) */

CONST   uchar AU1_CHAN_PREF_EXCL_S[] = {
	CHAN_PREF,
	CHAN_EXCL,
	};

					/* Coding standard (ie CHAN_ID, LLC) */

CONST   uchar AU1_CODING_STD_S[] = {
	CODING_STD_CCITT,
	CODING_STD_RESERVED,
	CODING_STD_NATIONAL,
	CODING_STD_SPF,
	};

					/* D-channel indicator (ie CHAN_ID) */

CONST   uchar AU1_D_CHAN_S[] = {
	D_CHAN,
	NOT_D_CHAN,
	};

					/* Data bit format (ie BC & LLC) */

CONST   uchar AU1_DATA_BIT_S[] = {
	DATA_BIT_UNUSED,
	DATA_BIT_5,
	DATA_BIT_7,
	DATA_BIT_8,
	};

					/* Duplex/half-duplex (ie BC & LLC) */

CONST   uchar AU1_DUPLEX_S[] = {
	HALF_DUPLEX,
	FULL_DUPLEX,
	};

					/* Flow control on Reception (Rx) (ie BC & LLC) */

CONST   uchar AU1_FLOW_CONTROL_RX_S[] = {
	FLOW_CAN_ACCEPT_DATA,
	FLOW_CANNOT_ACCEPT_DATA,
	};

					/* Flow control on Transmission (Tx) (ie BC & LLC) */

CONST   uchar AU1_FLOW_CONTROL_TX_S[] = {
	FLOW_NOT_RQ_TX_DATA,
	FLOW_RQ_TX_DATA,
	};

					/* Rate adaption header/no header (ie LLC) */

CONST   uchar AU1_HEADER_S[] = {
	HEADER_NOT_INCLUDED,
	HEADER_INCLUDED,
	};

					/* Interface type (ie CHAN_ID) */

CONST   uchar AU1_INT_TYPE_S[] = {
	INT_TYPE_BRI,
	INT_TYPE_PRI,
	};

					/* Intermediate rate (V110) (ie BC & LLC) */

CONST   uchar AU1_INTER_RATE_S[] = {
	INTER_RA_UNUSED,
	INTER_RA_8KBS,
	INTER_RA_16KBS,
	INTER_RA_32KBS,
	};

					/* Interpretation (ie HLC) (not used - further study) */

CONST   uchar AU1_INTERPRETATION_S[] = {
	INTER_CCITT_CEPT,
	};

					/* Layer identifier (ie CAUSE, for BC diagnostic) */

CONST   uchar AU1_LAYER_ID_S[] = {
	LAYER_ID_1,
	LAYER_ID_2,
	LAYER_ID_3,
	};

					/* Logical Link Identifier negotiation (ie LLC) */

CONST   uchar AU1_LLI_S[] = {
	DEFAULT_LLI,
	FULL_PROTOCOL_LLI,
	};

					/* Cause location (ie CAUSE) */

CONST   uchar AU1_LOCATION_S[] = {
	LOCATION_USER,
	LOCATION_PR_NET_LOC_USER,
	LOCATION_PU_NET_LOC_USER,
	LOCATION_PU_NET_REMOTE_USER,
	};

					/* Modem type (ie BC & LLC) */

CONST   uchar AU1_MODEM_S[] = {
	AU1_MODEM_UNDEFINED,
	AU1_MODEM_V21,
	AU1_MODEM_V22,
	AU1_MODEM_V22_BIS,
	AU1_MODEM_V23,
	AU1_MODEM_V32,
	};

					/* Multi frame establishment support in Data Link (ie LLC) */

CONST   uchar AU1_MULTI_FRAME_S[] = {
	MULTI_FRAME_NOT_SUPPORTED,
	MULTI_FRAME_SUPPORTED,
	};

					/* In-band negotiation (V110 or V120) (ie BC & LLC) */

CONST   uchar AU1_NEGOTIATION_S[] = {
	NEGOTIATION_IN_BAND,
	NEGOTIATION_NOT_IN_BAND,
	};

					/* Network independent clock (NIC) (ie BC & LLC) */

CONST   uchar AU1_NIC_RX_S[] = {
	NIC_ACCEPT_DATA,
	NIC_NOT_ACCEPT_DATA,
	};

					/* Network independent clock (NIC) (ie BC & LLC) */

CONST   uchar AU1_NIC_TX_S[] = {
	NIC_RQ_TX_DATA,
	NIC_NOT_RQ_TX_DATA,
	};

					/* Mode of operation (ie LLC) */

CONST   uchar AU1_OP_MODE_S[] = {
	BIT_TRANSPARENT,
	PROTOCOL_SENSITIVE,
	};

					/* Out-band negotiation indicator (ie LLC) */

CONST   uchar AU1_OUT_BAND_NEG_S[] =	{
	OUT_BAND_POSSIBLE,
	OUT_BAND_NOT_POSSIBLE,
	};

					/* Parity format (ie BC & LLC) */

CONST   uchar AU1_PARITY_S[] = {
	ODD,
	EVEN,
	NO_PARITY,
	FORCED_TO_0,
	FORCED_TO_1,
	};

					/* Progress description (ie PROGRESS_IND) */

CONST   uchar AU1_PROGRESS_DESCRIPTION_S[] = {
	PROGRESS_DESCR_NON_END_TO_END_ISDN,
	PROGRESS_DESCR_NON_ISDN_DEST,
	PROGRESS_DESCR_NON_ISDN_ORIG,
	PROGRESS_DESCR_IN_BAND_NOW,
	};

					/* Progress location (ie PROGRESS_IND) */

CONST   uchar AU1_PROGRESS_LOCATION_S[] = {
	PROGRESS_LOC_USER,
	PROGRESS_LOC_PR_LOCAL_USER,
	PROGRESS_LOC_PU_LOCAL_USER,
	PROGRESS_LOC_PU_REMOTE_USER,
	};

					/* Layer 1 protocol identifier (ie BC) */

CONST   uchar AU1_PROTOCOL_ID_BC_1_S[] = {
	PROTOCOL_ID_1_V110,
	PROTOCOL_ID_1_G711_A
	};

					/* Layer 1 protocol identifier (ie LLC) */

CONST   uchar AU1_PROTOCOL_ID_LLC_1_S[] = {
	PROTOCOL_ID_1_V110,
	PROTOCOL_ID_1_G711_u,
	PROTOCOL_ID_1_G711_A,
	PROTOCOL_ID_1_G721,
	PROTOCOL_ID_1_7KHZ,
	PROTOCOL_ID_1_RA_NON_CCITT,
	PROTOCOL_ID_1_V120,
	PROTOCOL_ID_1_X31,
	};

					/* Layer 2 protocol identifier (ie LLC) */

CONST   uchar AU1_PROTOCOL_ID_LLC_2_S[] = {
	PROTOCOL_ID_2_ISO_1745,
	PROTOCOL_ID_2_Q921,
	PROTOCOL_ID_2_X25_LL,
	PROTOCOL_ID_2_X25_ML,
	PROTOCOL_ID_2_T71,
	PROTOCOL_ID_2_HDLC_ARM,
	PROTOCOL_ID_2_HDLC_NRM,
	PROTOCOL_ID_2_HDLC_ABM,
	PROTOCOL_ID_2_LAN_LLC,
	PROTOCOL_ID_2_X75_SLP,
	};

					/* Layer 3 protocol identifier (ie LLC)*/

CONST   uchar AU1_PROTOCOL_ID_LLC_3_S[] = {
	PROTOCOL_ID_3_Q931,
	PROTOCOL_ID_3_X25_PL,
	PROTOCOL_ID_3_ISO_8208,
	PROTOCOL_ID_3_ISO_8348,
	PROTOCOL_ID_3_ISO_8473,
	PROTOCOL_ID_3_T70,
	};

					/* Cause recommandation (ie CAUSE) */

CONST   uchar AU1_RECOMMENDATION_S[] = {
	RECOMMENDATION_Q931,
	RECOMMENDATION_X21,
	RECOMMENDATION_X25,
	};

					/* Screening indicator (ie CALLING_NB) */

CONST   uchar AU1_SCREEN_IND_S[] = {
	USER_PASSED,
	NETWORK_PROVIDED,
	};


					/* Status/condition (ie CAUSE) */

CONST   uchar AU1_STATUS_CONDITION_S[] = {
	COND_UNKNOWN,
	COND_PERMANENT,
	COND_TRANSIENT,
	};

					/* Stop bit format (ie BC & LLC) */

CONST   uchar AU1_STOP_BIT_S[] = {
	STOP_BIT_UNUSED,
	STOP_BIT_1,
	STOP_BIT_1_5,
	STOP_BIT_2,
	};

					/* Information structure (ie BC & LLC) */

CONST   uchar AU1_STRUCTURE_S[] = {
	STRUCTURE_DEFAULT,
	STRUCTURE_8KHZ_INT,
	STRUCTURE_SDU_INT,
	STRUCTURE_UNSTRUCTURED,
	};

					/* Subaddress odd/even indicator (ie CALLED & CALLING _SUB_ADD) */

CONST   uchar AU1_SUB_ADD_IND_S[] = {
	SUB_ADD_ODD,
	SUB_ADD_EVEN,
	};

					/* Subaddress type (ie CALLED & CALLING _SUB_ADD) */

CONST   uchar AU1_SUB_ADD_TYPE_S[] = {
	SUB_ADD_OSI,
	SUB_ADD_USER,
	};

					/* Asynchronous/synchronous (ie BC & LLC) */

CONST   uchar AU1_SYN_ASYN_S[] =	{
	SYN,
	ASYN,
	};

					/* Teleservices according to CCITT standard (ie HLC) */

CONST   uchar AU1_TELESERVICE_CCITT_S[] = {
	TELEPHONY,
	FAX_3,
	FAX_4,
	MIXED_MODE,
	PROCESSABLE_FORM,
	TELETEX,
	VIDEOTEX,
	TELEX,
	MHS,
	OSI,
	};

					/* Information transfer capability (ie BC) */

CONST   uchar AU1_TRF_CAP_BC_S []  ={
	TRF_CAP_SPEECH,
	TRF_CAP_UNRESTRICTED,
	TRF_CAP_RESTRICTED,
	TRF_CAP_3_1_AUDIO,
	};

					/* Information transfer capability (ie LLC) */

CONST   uchar AU1_TRF_CAP_LLC_S []  ={
	TRF_CAP_SPEECH,
	TRF_CAP_UNRESTRICTED,
	TRF_CAP_RESTRICTED,
	TRF_CAP_3_1_AUDIO,
	TRF_CAP_7_AUDIO,
	};

					/* Information transfer mode (ie BC & LLC) */

CONST   uchar AU1_TRF_MODE_S[] = {
	TRF_MODE_CIRCUIT,
	TRF_MODE_PACKET,
	};

					/* User rate (V110 & V120) (ie BC & LLC) */

CONST   uchar AU1_USER_RATE_S[] =   {
	RA_E_BITS,
	RA_0_6KBS,
	RA_1_2KBS,
	RA_2_4KBS,
	RA_3_6KBS,
	RA_4_8KBS,
	RA_7_2KBS,
	RA_8KBS,
	RA_9_6KBS,
	RA_14_4KBS,
	RA_16KBS,
	RA_19_2KBS,
	RA_32KBS,
	RA_48KBS,
	RA_56KBS,
	RA_0_1345KBS,
	RA_0_100KBS,
	RA_0_75_1_2KBS,
	RA_1_2_0_75KBS,
	RA_0_050KBS,
	RA_0_075KBS,
	RA_0_110KBS,
	RA_0_150KBS,
	RA_0_200KBS,
	RA_0_300KBS,
	RA_12KBS,
	};

					/* Restart indicator class (ie RESTART_IND) */

CONST	uchar AU1_RESTART_IND_CLASS_S[] = {
	RI_INDICATED_CHANNEL,
	RI_SINGLE_INTERFACE,
	RI_ALL_INTERFACES,
	};

/*=========================================================================*/

	/* Tables selected according to another value (indexed tables) */

		/* Cause value  according to the class */

			/* Normal event - class 000 */

CONST   uchar AU1_C_V_NORMAL_EVENT_0_S[] = {
			C_C_NORMAL_EVENT_0,
			C_V_UNASSIGNED_NUMBER_1,
			C_V_CHAN_UNACCEPTABLE_6,
			};

			/* Normal event - class 001 */

CONST   uchar AU1_C_V_NORMAL_EVENT_S[] = {
			C_C_NORMAL_EVENT,
			C_V_NORMAL_CLEARING_16,
			C_V_USER_BUSY_17,
			C_V_NO_USER_RESPONDING_18,
			C_V_CALL_REJECT_21,
			C_V_NUMBER_CHANGED_22,
			C_V_NON_SELECTED_USER_CLEARING_26,
			C_V_DEST_OUT_OF_ORDER_27,
			C_V_INVALID_NUMBER_FORMAT_28,
			C_V_RESPONSE_TO_STATUS_ENQUIRY_30,
			C_V_NORMAL_UNSPECIFIED_31,
			};

			/* Resource not available */

CONST   uchar AU1_C_V_RESOURCE_UNAVAILABLE_S[] ={
			C_C_RESOURCE_UNAVAILABLE,
			C_V_NO_CIRCUIT_AVAILABLE_34,
			C_V_NETWORK_OUT_OF_ORDER_38,
			C_V_NETWORK_TEMPORARY_FAILURE_41,
			C_V_NETWORK_CONGESTION_42,
			C_V_ACCESS_INFORMATION_DISCARDED_43,
			C_V_REQUESTED_CIRCUIT_NOT_AVAILABLE_44,
			C_V_RESOURCE_UNAVAILABLE_UNSPECIFIED_47,
			};

			/* Service not available */

CONST   uchar AU1_C_V_SERVICE_NOT_AVAILABLE_S[] = {
			C_C_SERVICE_NOT_AVAILABLE,
			C_V_BC_NOT_AUTHORIZED_57,
			C_V_BC_NOT_PRESENTLY_AVAILABLE_58,
			C_V_SERVICE_NOT_AVAILABLE_63,
			};

			/* Service not implemented */

CONST   uchar AU1_C_V_SERVICE_NOT_IMPLEMENTED_S[] = {
			C_C_SERVICE_NOT_IMPLEMENTED,
			C_V_BC_NOT_IMPLEMENTED_65,
			C_V_CHANNEL_TYPE_NOT_IMPLEMENTED_66,
			C_V_ONLY_RESTRICTED_INFO_BEARER_70,
			C_V_SERVICE_NOT_IMPLEMENTED_UNSPECIFIED_79,
			};

			/* Invalid message */

CONST   uchar AU1_C_V_INVALID_MESSAGE_S[] = {
			C_C_INVALID_MESSAGE,
			C_V_INVALID_CALL_REF_81,
			C_V_IDENTIFIED_CHANNEL_NOT_EXIST_82,
			C_V_INCOMPATIBLE_DESTINATION_88,
			C_V_INVALID_MESSAGE_UNSPECIFIED_95,
			};

			/* Protocol error */

CONST   uchar AU1_C_V_PROTOCOL_ERROR_S[] = {
			C_C_PROTOCOL_ERROR,
			C_V_MANDATORY_IE_MISSING_96,
			C_V_MESSAGE_TYPE_NON_EXISTENT_97,
			C_V_NON_EXISTENT_IE_99,
			C_V_INVALID_IE_CONTENT_100,
			C_V_MESSAGE_NOT_COMPATIBLE_101,
			C_V_RECOVERY_ON_TIMER_EXPIRY_102,
			C_V_PROTOCOL_ERROR_UNSPECIFIED_111,
			};

			/* Interworking */

CONST   uchar AU1_C_V_INTERWORKING_S[] = {
			C_C_INTERWORKING,
			C_V_INTERWORKING_UNSPECIFIED_127,
			};

					/* Channel selection according to interface type (ie CHAN_ID) */

CONST   uchar AU1_CHAN_SEL_BRI_S[] = {
			INT_TYPE_BRI,
			NO_CHAN,
			B1_CHAN,
			B2_CHAN,
			ANY_CHAN,
			};

CONST   uchar AU1_CHAN_SEL_PRI_S[] = {
			INT_TYPE_PRI,
			AS_INDICATED,
			};

					/* Information transfer rate (ie BC & LLC) according to transfer mode */

CONST   uchar AU1_TRF_RATE_CIRCUIT_S[] = {
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	};

CONST   uchar AU1_TRF_RATE_PACKET_S[] = {
	TRF_MODE_PACKET,
	TRF_RATE_PACKET_MODE,
	};

/*-------------------------------------------------------------------------*/

		/*
		   Meta description of the information elements.
		   This description is  used to check an information element
		   inside a message and to store its value into  the internal
		   structure.
		   In the other way it is used to generate the information element of
		   a message from the internal structure.
		*/

#define NS_INCLUDE_IE_META_FUNCTION		ON		/* include prototypes of functions inside mp_ie.au1 */

#include "au1.mp_ie"  /* include IE meta-programs */

uchar au1_calling_nb_spdu ()
{

		/* if default values are used for octet 3a, it shall be omitted. */

	ie_if_flag = ON;		/* in general case, process octet 3a */

	if ((direction == TO_D_CHANNEL) &&
		(I_calling_nb_presentation == PRES_ALLOWED) &&
		(I_calling_nb_screen_ind   == USER_PROVIDED)
	   ) {
		ie_if_flag = OFF;	/* default values used : omit octet 3a */
	}

	return (OK);
}

	/*-----*/

uchar au1_get_chan_id ()
{

	if (Call_current_exist) {

		Call_chan_id = i_chan_id[0].chan_nb;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		au1_restart_spdu - check if presence of CHAN ID IE is compulsory or forbidden.

Usage		uchar au1_restart_spdu ();

Return value :  au1_restart_spdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar au1_restart_spdu ()
{

	if (is_ie_i (CODESET_0, CHAN_ID) == ABSENT) {
		return (OK);

	} else {

		if (I_restart_ind_class == RI_INDICATED_CHANNEL) {
			return (OK);
		}

	}

	return (NOK);
}

/*-------------------------------------------------------------------------*/

#define Ns_au1_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_au1_end_table_or_function		};
#define Ns_au1_tab_tabl_entry(idx, tab)		Ns_tab_tabl_entry (idx, tab),
#define Ns_au1_tabx_list_entry(tab)			Ns_tabx_list_entry (tab),
#define Ns_au1_tab_tabx_entry(idx, tab)		Ns_tab_tabx_entry (idx, tab),

#define Ns_au1_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, off)	\
			Ns_tab_ie_entry (codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, off),

#define Ns_au1_tab_ie_msg_header			{CODESET_NIL, MESSAGE_HEADER, (uchar *)A_NIL, sizeof(struct i_message_header), (uchar *)Pic_address (&i_message_header), (uchar *)A_NIL, (uchar *)A_NIL, 1, 0},

#include "au1.tab_ie"		/* include other Tables describing the IEs */

#define AU1_MX_TABL (sizeof(AU1_TAB_TABL)/sizeof (struct tabl))
CONST   uchar   au1_size_tab_tabl = AU1_MX_TABL;

#define AU1_MX_TABX (sizeof(AU1_TAB_TABX)/sizeof (struct tabx))
CONST   uchar   au1_size_tab_tabx = AU1_MX_TABX;

CONST	uchar	au1_size_tab_ie = Rnd_sizeof (AU1_TAB_IE) / IE_ELEM_SIZE;	/* maximum number of item in the table */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			au1_bc_spdu - implements the processing of the Bearer
						   capability (BC) IE of a received SPDU
						   message and of a SPDU message to be sent.

Usage			uchar au1_bc_spdu ();

Return value :  au1_bc_spdu returns	= OK valid data,
								= NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar au1_bc_4ab_spdu ()
{
	ie_if_flag = ON;	/* octets 4a and 4b may be present */

	if ((direction			== TO_D_CHANNEL)			&&
		(I_(bc,structure)	== STRUCTURE_DEFAULT)		&&
		(I_(bc,config)		== CONFIG_POINT_TO_POINT)	&&
		(I_(bc,est)			== EST_DEMAND)				&&
		(I_(bc,symmetry)	== BIDIRECTIONAL_SYMMETRY)	&&
		(I_(bc,dest_rate)	== I_(bc,trf_rate))) {

		/* default values for octets 4a and 4b : they are omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar au1_bc_4b_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 4b may be present */

	if ((direction			== TO_D_CHANNEL)			&&
		(I_(bc,symmetry)	== BIDIRECTIONAL_SYMMETRY)	&&
		(I_(bc,dest_rate)	== I_(bc,trf_rate))) {

		/* default values for octet 4b : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar au1_bc_5_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_bc_layer_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_(bc,protocol_id_1) == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			au1_cause_spdu - implements the specific processing of a cause
							 Information Element (IE).

Usage		   uchar au1_cause_spdu ();

Return value :  au1_cause_spdu returns OK
								   NOK

common constants and declarations : ns.h net_i_s.h

common objects : internal data structure i_cause, ie  spdu context.
						- direction = FROM or TO D_CHANNEL side.

*--------------------------------------------------------------------------*/

uchar au1_cause_spdu ()
{
	uchar   class_val;				/* cause class & value */

	class_val = C_v (I_cause_class, I_cause_val);

	if (direction == FROM_D_CHANNEL) {

				/* FROM the D CHANNEL side */

	  if (! Eo_ie) {

		switch (class_val) {

			case C_v (C_C_INVALID_MESSAGE,			C_V_IDENTIFIED_CHANNEL_NOT_EXIST_82)	:

			case C_v (C_C_RESOURCE_UNAVAILABLE,		C_V_ACCESS_INFORMATION_DISCARDED_43)	:
			case C_v (C_C_INVALID_MESSAGE,			C_V_INCOMPATIBLE_DESTINATION_88)		:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_MANDATORY_IE_MISSING_96)			:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_NON_EXISTENT_IE_99)					:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_INVALID_IE_CONTENT_100)				:

			case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_TYPE_NON_EXISTENT_97)		:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_NOT_COMPATIBLE_101)			:

				return (r_exec_spdu_ie ((uchar *)&AU1_DIAG_P));

			default :
				return (NOK);
		}

	  }

	} else {		/* TO D CHANNEL side */

	  if (I_(cause,diag_lgth) != 0) {

		switch (class_val) {
			case C_v (C_C_RESOURCE_UNAVAILABLE,		C_V_ACCESS_INFORMATION_DISCARDED_43)	:
			case C_v (C_C_PROTOCOL_ERROR,   		C_V_MANDATORY_IE_MISSING_96)			:
			case C_v (C_C_PROTOCOL_ERROR,   		C_V_NON_EXISTENT_IE_99)					:
			case C_v (C_C_PROTOCOL_ERROR,   		C_V_INVALID_IE_CONTENT_100)				:

			case C_v (C_C_PROTOCOL_ERROR,   		C_V_MESSAGE_TYPE_NON_EXISTENT_97)   	:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_NOT_COMPATIBLE_101)			:

				return (s_exec_spdu_ie ((uchar *)&AU1_DIAG_P));

			default :
				break;
		}

	  }

	}

	return (OK);
}

/*------------------------------------------------------------------------*/

		/*
		   Test if interface type in chan_id IE and in
		   configuration are the same. If not return error.
		*/

uchar au1_chan_id_spdu ()
{

	if (direction == FROM_D_CHANNEL) {

		if (I_(chan_id,int_type) == INT_TYPE_BRI) {

			if (Na_type != BRI) return (NOK);

		} else {

			if (Na_type != PRI) return (NOK);
		}

	}

		/* Process PRI type chan_id */

	if (I_(chan_id,int_type) != INT_TYPE_BRI) {

		if ((I_(chan_id,chan_sel) == NO_CHAN) ||
			(I_(chan_id,chan_sel) == ANY_CHAN)) {
			ie_optional_octet = ON;
		}

		if (direction == FROM_D_CHANNEL) {
			return (r_exec_spdu_ie ((uchar *)&AU1_CHAN_ID_PRI_P));

		} else {

			return (s_exec_spdu_ie ((uchar *)&AU1_CHAN_ID_PRI_P));
		}

	}

	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			llc_spdu - implements the processing of the low layer
						   compatibility (LLC) IE of a received SPDU
						   message and of SPDU message to be sent.

Usage		   uchar llc_spdu ();

Return value :  llc_spdu returns = OK valid data,
								 = NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar au1_llc_4ab_spdu ()
{
	ie_if_flag = ON;	/* octets 4a and 4b may be present */

	if ((direction			== TO_D_CHANNEL)			&&
		(I_(llc,structure)	== STRUCTURE_DEFAULT)		&&
		(I_(llc,config)		== CONFIG_POINT_TO_POINT)	&&		/* forced value anyway */
		(I_(llc,est)		== EST_DEMAND)				&&		/* forced value anyway */
		(I_(llc,symmetry)	== BIDIRECTIONAL_SYMMETRY)	&&		/* forced value anyway */
		(I_(llc,dest_rate)	== I_(llc,trf_rate))) {

		/* default values for octets 4a and 4b : they are omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar au1_llc_4b_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 4b may be present */

	if ((direction		 	== TO_D_CHANNEL)			&&
		(I_(llc,symmetry)	== BIDIRECTIONAL_SYMMETRY)	&&		/* forced value anyway */
		(I_(llc,dest_rate)	== I_(llc,trf_rate))) {

		/* default values for octet 4b : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

#define Get_layer_id()	Extract (5,Mask(2))

uchar au1_llc_5_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_llc_protocol_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_(llc,protocol_id_1) == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar au1_llc_6_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 6 may be present */

		/* if I_llc_layer_id_2 == BYTE_VAL_NIL -> octet 6 is missing */

	if (direction == TO_D_CHANNEL) {

			/* octet 6 must be present if PACKET MODE */

		if (I_(llc,protocol_id_2) == BYTE_VAL_NIL) {

			/* octet 6 is missing */

			if (I_(llc,trf_mode) == TRF_MODE_PACKET) return (NOK);

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_2) {

				/* It is NOT Octet 6 (layer 2) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar au1_llc_7_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 7 may be present */

		/* if I_llc_layer_id_3 == BYTE_VAL_NIL -> octet 7 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_(llc,protocol_id_3) == BYTE_VAL_NIL) {

				/* octet 7 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_3) {

				/* It is NOT Octet 7 (layer 3) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

#undef Ns_au1_table_or_function
#undef Ns_au1_end_table_or_function
#undef Ns_au1_tab_tabl_entry
#undef Ns_au1_tabx_list_entry
#undef Ns_au1_tab_tabx_entry
#undef Ns_au1_tab_ie_entry
#undef Ns_au1_tab_ie_msg_header

#define Ns_au1_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_au1_end_table_or_function		}

#define Ns_au1_tab_tabl_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_val, (uchar *)tab);
#define Ns_au1_tabx_list_entry(tab)			Pic_init_struct_array_next (p_table,  p_val, (uchar	*)tab);
#define Ns_au1_tab_tabx_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_tab, (struct tabx_list *)tab);

#define Ns_au1_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, off)	\
	Pic_init_struct_array (p_table,  i_pic, p_prog, (uchar	*)mp_a);			\
	Pic_init_struct_array (p_table,  i_pic, p_i_struct, (uchar	*)i_str);		\
	Pic_init_struct_array (p_table,  i_pic, p_init_spdu, (uchar	*)df_spdu);		\
	Pic_init_struct_array_next (p_table,  p_init_ssdu, (uchar	*)df_ssdu);

#define Ns_au1_tab_ie_msg_header		Ns_au1_tab_ie_entry (0, 0, P_NIL, &i_message_header, P_NIL, P_NIL, 0, 0)

		/*	Function used to initialize address fields in Tables above */

void pic_init_ns_au1_ie ()
{
	uchar	i_pic;			/* current index */

#	include "au1.tab_ie"
}

#endif /* end of PIC used} */


/*EOF*/

