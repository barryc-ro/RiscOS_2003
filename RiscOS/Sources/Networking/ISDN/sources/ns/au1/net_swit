

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_switch.au1
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        au1_csc_dl_reinit - implement an unexpected data link reinit.
 *
 *        au1_circuit_switched_call - implements the processing of the call
 *		                          control procedures.
 *
 *
 *        au1_circuit_switched_call_n - implements the processing of the call
 *		                            control procedures.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	void	au1_u0						(void);
	void	au1_u1						(void);
	void	au1_u2						(void);
	void	au1_u3						(void);
	void	au1_u4						(void);
	void	au1_u6						(void);
	void	au1_u7						(void);
	void	au1_u8						(void);
	void	au1_u9						(void);
	void	au1_u10						(void);
	void	au1_u11						(void);
	void	au1_u12						(void);
	void	au1_u19						(void);
	void	au1_csc_dl_reinit			(void);
	uchar	au1_circuit_switched_call	(void);
	uchar	au1_error_handler			(void);
#else
	void	au1_u0						();
	void	au1_u1						();
	void	au1_u2						();
	void	au1_u3						();
	void	au1_u4						();
	void	au1_u6						();
	void	au1_u7						();
	void	au1_u8						();
	void	au1_u9						();
	void	au1_u10						();
	void	au1_u11						();
	void	au1_u12						();
	void	au1_u19						();
	void	au1_csc_dl_reinit			();
	uchar	au1_circuit_switched_call	();
	uchar	au1_error_handler			();
#endif

						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*                */
						/*----------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	au1_csc_dl_reinit () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void au1_csc_dl_reinit ();

Related
functions usage		void send_state (uchar class, uchar value, uchar diagnostic);

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void au1_csc_dl_reinit ()
{

	if (Na_type == PRI) return;

#	if NS_TYPE_BRI == ON

		ns_access_first_call ();

		while (Call_current_exist) {

			if (Call_state != STATE_NIL) {
				I_call_ref = Call_ref;
				Set_call_ref_not_nil ();

				if (Call_state == STATE_OVERLAP_SENDING_2) {
					ns_stop_all_timers ();
					set_i_cause (C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_TEMPORARY_FAILURE_41, P_NIL);
					Send_to_d_channel (DISC);
					Set_state (STATE_DISCONNECT_REQUEST_11);
					Start_timer_ns (AU1_T305);
				}

			}

			ns_access_next_call ();
		}

#	endif

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            au1_circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar au1_circuit_switched_call ();

Related
functions usage void au1_u0 ....au1_19 ()

Description     au1_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*								CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|     start T305|     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

uchar au1_circuit_switched_call ()
{

#	if NS_RESTART_PROCEDURE == ON
		uchar	FAR *p_data;
#	endif

					/* 1 - EVENT DRIVEN PROCESSING  */


	if (i_entity_origination == ENT_MNS) {

#		if NS_RESTART_PROCEDURE == ON

			switch (event_id) {

				case MNS_RESTART_RQ :

					if (Dl_rest_state == STATE_REST_0) {

							/* set current data pointer using p_ssdu pointer */

						p_data = p_ssdu;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							if (Na_type == BRI) {

								/* Basic Rate */

								I_chan_id_int_type = INT_TYPE_BRI;
								I_chan_id_chan_sel = Mns_restart_b_chan_nb;	/* B1_CHAN or B2_CHAN */

							} else {

								/* Primary Rate */

								I_chan_id_int_type = INT_TYPE_PRI;
								I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
								I_chan_id_chan_nb = Mns_restart_b_chan_nb;	/* channel number */
							}
						}

						if (I_restart_ind_class == RI_ALL_INTERFACES) {
							csc_clear_all_call ();
							Na_internal_restart = ON;
						}

						Send_to_call_control (NS_RESTART_IN);	/* on CONN_ID_MANAGEMENT */
						Start_dl_timer (AU1_T317);
						Set_call_ref_not_nil ();
						Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
						N316 = 0;
						Start_dl_timer (AU1_T316);
						Dl_rest_state = STATE_REST_1;

					} else {

						ns_unexpected_ev ();
					}

					break;

#				if ASSERT == ON

				default :
					Trap (TRAP_MNS_CODE, "au1_circuit_switched_call");

#				endif

			}

#		endif

		return (OK);

	}

					/* 1 - EVENT DRIVEN PROCESSING  */

	switch (event_id) {

						/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

						/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) != OK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_NORMAL_EVENT, C_V_USER_BUSY_17, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;

						/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_DISCONNECT_REQUEST_11 :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */

					if (disc_cause_error () == NOK) {
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					}

					Send_to_d_channel_and_save_spdu (REL);
					N308 = 0;
					Set_state (STATE_RELEASE_REQUEST_19);
					Start_timer_ns (AU1_T308);
					break;

				case STATE_RELEASE_REQUEST_19 :
					break;


				case STATE_DISCONNECT_INDICATION_12 :
				case STATE_CALL_INIT_1 :

					if (Na_type == PRI) {
						ns_unexpected_ev ();
						break;

					}

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */
					Set_state (STATE_DISCONNECT_INDICATION_12);		/* enter disconnect indication state */
					break;

			}

			return (OK);

						/* RELEASE */

		case DA_REL :
			Call_fac_rq = OFF;
			Send_to_call_control (NS_CLEAR_CO);						/* send NS clear confirm to Layer 4 */

			switch (Call_state) {

				case STATE_RELEASE_REQUEST_19 :
					break;

				default :
					Reset_internal_ie ();
					set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					break;

			}

			call_clear ();
			return (OK);

						/* RELEASE COMPLETE */

		case DA_REL_COMP :
			Call_fac_rq	= OFF;
			Send_to_call_control (NS_CLEAR_CO);						/* send NS clear confirm to Layer 4 */
			call_clear ();											/* free call context */
			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_WAIT_DL :
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_OVERLAP_SENDING_2 :

					if (Na_type == PRI) {

#						if NS_TYPE_PRI == ON

							ns_stop_all_timers ();
							Save_cause ();									/* to send the RELEASE if T305 expire */
							Send_to_d_channel (DISC);						/* send a DISCONNECT message */
							Set_state (STATE_DISCONNECT_REQUEST_11);		/* enter the Disconnect Request state */
							break;

#						endif

					}

				case STATE_OUTGOING_CALL_PROC_3 :

					if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
						set_i_cause (C_C_NORMAL_EVENT_0, C_V_CHAN_UNACCEPTABLE_6, P_NIL);
					}

					Send_to_d_channel_and_save_spdu (REL);

					if (Call_state != STATE_OUTGOING_CALL_PROC_3) {
						Stop_timer_ns (AU1_T304);
					}

					N308 = 0;
					Start_timer_ns (AU1_T308);
					Set_state (STATE_RELEASE_REQUEST_19);
					break;

				case STATE_CALL_PRESENT_6 :
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					disc_cause_error ();
					Stop_timer_ns  (AU1_T300);
					go_to_state_19 (AU1_T308);
					break;

				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_ACTIVE_10 :

						/*	active state : process is the default one (see "default" above) except
							for semi-permanent circuit which can only be cleared by the network */

					if (Call_permanence == NS_SEMI_PERMANENT_CIRCUIT) {

						ns_unexpected_ev ();
						break;
					}

					/* process the default */

				default :
					ns_stop_all_timers ();
					Save_cause ();									/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);						/* send a DISCONNECT message */
					Start_timer_ns (AU1_T305);
					Set_state (STATE_DISCONNECT_REQUEST_11);		/* enter the Disconnect Request state */
					break;

			}

			return (OK);

						/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
				case STATE_RELEASE_REQUEST_19 :
					ns_unexpected_ev ();
					break;

				case STATE_OVERLAP_RECEIVING_25 :

					if (Na_type == BRI) {

						ns_unexpected_ev ();
						return (OK);
					}

					Send_to_call_control (NS_INFO_IN);

					if (is_ie_i (CODESET_SO, SENDING_COMPLETE) == ABSENT) {
						Restart_timer_ns (AU1_T302);
					}
					break;

				case STATE_ACTIVE_10 :
				case STATE_DISCONNECT_INDICATION_12 :
					Send_to_call_control (NS_INFO_IN);
					break;

				default :

					ns_unexpected_ev ();

			}

			return (OK);

						/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			switch (Call_state) {

				case STATE_CALL_INIT_1 :
					break;

				case STATE_OVERLAP_SENDING_2 :
					Send_to_d_channel (INFO);

					if (State_timer_ns (AU1_T304) == OFF) {
						Start_timer_ns (AU1_T304);

					} else {

						Restart_timer_ns (AU1_T304);
					}

					break;

				default :
					ns_unexpected_ev ();
					break;

			}

			return (OK);

						/* STATUS */

		case DA_STATUS :

			if (Call_current_exist) {

				if (Call_state != STATE_NULL_0 && I_call_state_val == STATE_NULL_0) {
					Call_fac_rq	= OFF;
					Send_to_call_control (NS_CLEAR_CO);						/* send NS clear confirm to Layer 4 */
					call_clear ();											/* free call context */
					return (OK);
				}

				if (Call_state == STATE_RELEASE_REQUEST_19) {

					if (C_v (I_cause_class, I_cause_val) ==
						C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {
						Stop_timer_ns (AU1_T322);
					}

				} else {

					if (C_v (I_cause_class, I_cause_val) ==
						C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {
						Stop_timer_ns (AU1_T322);
					}

					if (Call_state != I_call_state_val) {

						if ((I_cause_class == C_C_PROTOCOL_ERROR)				&&
							((I_cause_val == C_V_MANDATORY_IE_MISSING_96)		||
							 (I_cause_val == C_V_MESSAGE_TYPE_NON_EXISTENT_97)	||
							 (I_cause_val == C_V_NON_EXISTENT_IE_99)			||
							 (I_cause_val == C_V_INVALID_IE_CONTENT_100)))	{
							Call_fac_rq	= OFF;
							Send_to_d_channel (REL_COMP);
							Send_to_call_control (NS_CLEAR_CO);
							call_clear ();
						}
					}
				}

			} else {	/* No current calls */

				if (Na_type == PRI) {

#					if NS_TYPE_PRI == ON

						if (I_call_state_val != STATE_NULL_0) {
							set_i_cause	(C_C_PROTOCOL_ERROR, C_V_MESSAGE_NOT_COMPATIBLE_101, (char FAR *)&spdu_id);
							Send_to_d_channel_and_save_spdu (REL);
							N308 = 0;
							Start_timer_ns (AU1_T308);
							Set_state (STATE_RELEASE_REQUEST_19);
						}

#					endif

				} else {

					set_i_cause	(C_C_PROTOCOL_ERROR, C_V_MESSAGE_NOT_COMPATIBLE_101, (char FAR *)&spdu_id);
					Send_to_d_channel (REL_COMP);
				}
			}

			return (OK);

						/* STATUS_ENQ */

		case DA_STATUS_ENQ :
			Reset_internal_ie ();
			set_i_state (Call_state);
			set_i_cause	(C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30, P_NIL);
			Send_to_d_channel (STATUS);
			return (OK);

						/* NS_STATUS_ENQ_RQ */

		case NS_STATUS_ENQ_RQ :

			if (State_timer_ns (AU1_T322) == OFF) {
				Send_to_d_channel (STATUS_ENQ);
				Start_timer_ns (AU1_T322);
			}
			return (OK);

		case TI_322 :		/* implementation dependent */

			if (i_entity_origination == ENT_TI) {
				Send_to_d_channel (STATUS_ENQ);
				Restart_timer_ns (AU1_T322);
				return (OK);

			} else {

				break;
			}

#		if NS_RESTART_PROCEDURE == ON /* { */

			case TI_316 :

				if (Dl_rest_state == STATE_REST_1) {

					if (++N316 == AU1_MX_N316) {

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_316);
						Dl_restart_reset ();

					} else {

						Set_call_ref_not_nil ();

							/* store Restart Indicator with value saved in DL context */

						set_ie_i (CODESET_0, RESTART_IND);
						I_restart_ind_class = Dl_rest_class;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

								/* store Channel-ID */

							ie_implicit_val_x (CODESET_0, CHAN_ID, 0);
							set_ie_i (CODESET_0, CHAN_ID);

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							if (Na_type == BRI) {

								/* Basic Rate */

								I_chan_id_int_type = INT_TYPE_BRI;
								I_chan_id_chan_sel = Dl_rest_chan_nb;	/* B1_CHAN or B2_CHAN */

							} else {

								/* Primary Rate */

								I_chan_id_int_type = INT_TYPE_PRI;
								I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
								I_chan_id_chan_nb = Dl_rest_chan_nb;	/* channel number */
							}
						}

						Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
						Restart_dl_timer (AU1_T316);
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case TI_317 :

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART :

				if (Dl_rest_state == STATE_REST_0) {

					Start_dl_timer (AU1_T317);
					Set_call_ref_nil ();		/* to use CONN_ID_MANAGEMENT */
					Send_to_call_control (NS_RESTART_IN);
					Dl_rest_state = STATE_REST_2;

					if (I_restart_ind_class == RI_ALL_INTERFACES) {
						csc_clear_all_call ();
						Na_internal_restart = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART_ACK :

				if (Dl_rest_state == STATE_REST_1) {

					Stop_dl_timer (AU1_T316);

					if (Dl_rest_resp == ON) {

						ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
						Dl_restart_reset ();

					} else {

						Dl_rest_ack = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RS :

				Stop_dl_timer (AU1_T317);
				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

						Set_call_ref_not_nil ();
						Send_to_d_channel (RESTART_ACK);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RQ :

				if (Dl_rest_state != STATE_REST_0) {

					call_clear ();

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

#		endif /* NS_RESTART_PROCEDURE == ON} */

	} /* End switch (event_id) */

/*.........................................................................*/

					/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "au1_circuit_switched_call");
	}

	switch (Call_state) {

			/* Null state (u0) */

		case STATE_NULL_0 :
		case STATE_WAIT_DL :
			au1_u0 ();
			break;

			/* Call initiated (u1) */

		case STATE_CALL_INIT_1 :
			au1_u1 ();
			break;

			/* Overlap sending (u2) */

		case STATE_OVERLAP_SENDING_2 :
			au1_u2 ();
			break;

			/* Outgoing call proceeding (u3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			au1_u3 ();
			break;

			/* Call delivered (u4) */

		case STATE_CALL_DELIVERED_4 :
			au1_u4 ();
			break;

			/* Call present (u6) */

		case STATE_CALL_PRESENT_6 :
			au1_u6 ();
			break;

			/* Call received (u7) */

		case STATE_CALL_RECEIVED_7 :
			au1_u7 ();
			break;

			/* Incoming call proceeding state (u9) */

		case STATE_INCOMING_CALL_PROC_9 :
			au1_u9 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			au1_u8 ();
			break;

			/*  Active (u10) */

		case STATE_ACTIVE_10 :
			au1_u10 ();
			break;

			/* Disconnect request (u11) */

		case STATE_DISCONNECT_REQUEST_11 :
			au1_u11 ();
			break;

			/* Disconnect indication (u12) */

		case STATE_DISCONNECT_INDICATION_12 :
			au1_u12 ();
			break;

			/* Release request (u19) */

		case STATE_RELEASE_REQUEST_19 :
			au1_u19 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "au1_circuit_switched_call");

	}

	return (OK);
}

#if EQUIPMENT == NT2


						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*                   */
						/*-------------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            au1_circuit_switched_call_n - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar au1_circuit_switched_call_n ();

Related
functions usage void n0 .... n19 ();

Description     au1_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

#if NEW_FCT_STYLE == ON
	void	au1_n0						(void);
	void	au1_n1						(void);
	void	au1_n2						(void);
	void	au1_n3						(void);
	void	au1_n4						(void);
	void	au1_n6						(void);
	void	au1_n7						(void);
	void	au1_n8						(void);
	void	au1_n9						(void);
	void	au1_n10						(void);
	void	au1_n11						(void);
	void	au1_n12						(void);
	void	au1_n19						(void);
	void	au1_csc_dl_reinit_n			(void);
	uchar	au1_circuit_switched_call_n	(void);
#else
	void	au1_n0						();
	void	au1_n1						();
	void	au1_n2						();
	void	au1_n3						();
	void	au1_n4						();
	void	au1_n6						();
	void	au1_n7						();
	void	au1_n8						();
	void	au1_n9						();
	void	au1_n10						();
	void	au1_n11						();
	void	au1_n12						();
	void	au1_n19						();
	void	au1_csc_dl_reinit_n			();
	uchar	au1_circuit_switched_call_n	();
#endif

/*                                CLEARING PROCEDURES
*
*       TE                         NT/NETWORK                        TE
* _________________             _________________            _________________
* |               |             |               |            |               |
* |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
* |==========>....|------------>|.......|.....  |            |               |
* | start T305    |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
* |<===========...|<------------|...    |    ...|----------->|...===========>|
* |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
* |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
* |             ..|------------>|       |    ...|<-----------|...  start T308|
* |               |             |       |    .  |            |               |
* |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
* |               |             |       |    ...|----------->|...===========>|
* |               |             |       |       |            |     stop T308 |
* |---------------|             |---------------|            |---------------|
*
*/

uchar au1_circuit_switched_call_n ()
{

#	if NS_RESTART_PROCEDURE == ON
		uchar	FAR *p_data;
#	endif

/*.........................................................................*/

	if (i_entity_origination == ENT_MNS) {

#		if NS_RESTART_PROCEDURE == ON

			switch (event_id) {

				case MNS_RESTART_RQ :

						/* authorized only on Primary rate interface */

					if (Na_type == BRI) {

							/* Return MNS_RESTART_CO with error ("restart procedures not implemented") and do nothing else */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_NOT_IMPLEMENTED);
						return (STOP);
					}

					if (Dl_rest_state == STATE_REST_0) {

							/* set current data pointer using p_ssdu pointer */

						p_data = p_ssdu;

						if (Dl_call_count == 0) {

								/* Return MNS_RESTART_CO and do nothing else */

							ns_send_mns_restart (OK, I_restart_ind_class, Mns_restart_b_chan_nb, 0);
							return (OK);
						}

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */
							I_chan_id_int_type = INT_TYPE_PRI;
							I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
							I_chan_id_nb_map = CHAN_NUMBER;		/* Format of following octets = simply the B-Channel number */
							I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

							I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
							*I_chan_id_a_chan_number = Mns_restart_b_chan_nb;	/* channel number */
						}

						if (I_restart_ind_class == RI_ALL_INTERFACES) {
							csc_clear_all_call ();
							Na_internal_restart = ON;
						}

						Send_to_call_control (NS_RESTART_IN);	/* on CONN_ID_MANAGEMENT */
						Start_dl_timer (AU1_T317);
						Set_call_ref_not_nil ();

						if (I_chan_id_a_chan_number != A_NIL) {

							/* Set the extension bit to 1 in the chan_nb field before sending SPDU */

							Set_ext_bit (*I_chan_id_a_chan_number);
						}

						Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
						N316 = 0;
						Start_dl_timer (AU1_T316);
						Dl_rest_state = STATE_REST_1;

					} else {

						ns_unexpected_ev ();
					}

					break;

#			if ASSERT == ON

				default :
					Trap (TRAP_MNS_CODE, "circuit_switched_call_n");

#			endif

			}

#		endif

		return (OK);
	}

					/* 1 - EVENT DRIVEN PROCESS */

	switch (event_id) {

							/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

							/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) == NOK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_CONGESTION_42, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;

							/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq		= OFF;

			switch (Call_state) {

				case STATE_CALL_RECEIVED_7 :

					ns_action_to_cc (T3_NIL, AU1_T300, NS_CLEAR_IN,
														 STATE_DISCONNECT_REQUEST_11);

					break;


				case STATE_CONNECT_REQUEST_8 :

					ns_action_to_cc (T3_NIL, AU1_T300, NS_CLEAR_IN,
													   STATE_DISCONNECT_REQUEST_11);
					break;

				case STATE_INCOMING_CALL_PROC_9 :

					ns_action_to_cc (AU1_T310, AU1_T300, NS_CLEAR_IN,
														 STATE_DISCONNECT_REQUEST_11);
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					Stop_timer_ns (AU1_T305);
					Reset_internal_ie ();
					go_to_state_19 (AU1_T308);
					break;


				case STATE_RELEASE_REQUEST_19 :
						/* no process */
					break;


				case STATE_NULL_0 :
				case STATE_CALL_PRESENT_6 :
				case STATE_DISCONNECT_REQUEST_11 :
					ns_unexpected_ev ();
					break;

				default :
					ns_stop_all_timers ();
					ns_action_to_cc (T3_NIL, AU1_T300, NS_CLEAR_IN,
													   STATE_DISCONNECT_REQUEST_11);
					break;

			}

			return (OK);

							/* - RELEASE */

		case DA_REL :
			Call_fac_rq 	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

				case STATE_CALL_PRESENT_6 :
				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :

					Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);
					call_clear ();
					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);


						/* - RELEASE COMPLETE */

		case DA_REL_COMP :

			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :

					/* no process */

					break;

				case STATE_CALL_INIT_1 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_PRESENT_6 :
				case STATE_INCOMING_CALL_PROC_9 :

					Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
					call_clear ();
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear to Layer 4 */
					call_clear ();
					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_INIT_1 :
					Send_to_d_channel (REL_COMP);
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_CALL_PRESENT_6 :

					Stop_timer_ns (AU1_T303);
					ns_action_to_dl (T3_NIL, AU1_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					ns_action_to_dl (T3_NIL, AU1_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);

					break;

				case STATE_INCOMING_CALL_PROC_9 :
					Stop_timer_ns (AU1_T310);
					ns_action_to_dl (T3_NIL, AU1_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
					break;

				default :
					ns_stop_all_timers ();
					Save_cause ();									/* to send the RELEASE if AU1_T305 expire */
					ns_action_to_dl (T3_NIL, AU1_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
					break;

			}

			return (OK);

						/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
					ns_unexpected_ev ();
					break;

				case STATE_OVERLAP_SENDING_2 :
					Send_to_call_control (NS_INFO_IN);
					Start_timer_ns (AU1_T302);
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :

					Send_to_call_control (NS_INFO_IN);
					break;

				default :
					Send_to_call_control (NS_INFO_IN);
					break;

			}

			return (OK);

						/* STATUS */

		case DA_STATUS :

			if (Call_current_exist) {

				if (Call_state == STATE_RELEASE_REQUEST_19) {

					if (I_call_state_val == STATE_NULL_0) {
						Call_fac_rq	= OFF;
						Send_to_call_control (NS_CLEAR_CO);						/* send NS clear confirm to Layer 4 */
						call_clear ();											/* free call context */

					} else {

						if (C_v (I_cause_class, I_cause_val) ==
							C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {
						}

					}

				} else {

					if (C_v (I_cause_class, I_cause_val) ==
						C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {
					}

					if (Call_state != I_call_state_val) {

						if ((I_cause_class == C_C_PROTOCOL_ERROR)				&&
							((I_cause_val == C_V_MANDATORY_IE_MISSING_96)		||
							 (I_cause_val == C_V_MESSAGE_TYPE_NON_EXISTENT_97)	||
							 (I_cause_val == C_V_NON_EXISTENT_IE_99)			||
							 (I_cause_val == C_V_INVALID_IE_CONTENT_100)))	{
							Call_fac_rq	= OFF;
							Send_to_d_channel (REL_COMP);
							Send_to_call_control (NS_CLEAR_CO);
							call_clear ();
						}

					}

				}

			}

#			if NS_RESTART_PROCEDURE == ON /* { */

				else {		/* NON CALL-ASSOCIATED */

					switch (Dl_rest_state) {

						case STATE_REST_0 :
							break;

						case STATE_REST_1 :

							if (I_call_state_val != STATE_REST_2) {
								ns_stop_all_dlci_timers ();
								ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_STATE_INCOMP);
								Dl_restart_reset ();
							}

							break;

						case STATE_REST_2 :

							if (I_call_state_val != STATE_REST_1) {
								ns_snd_mns (MNS_RESTART_IN);
							}

							break;

					}
				}

#			endif /* RESTART_PROCEDURE = ON} */

			return (OK);

						/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :
					/* no process */
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :

					/* else default case */

				default :
					Send_to_d_channel (INFO);
					break;
			}

			return (OK);

		case DA_STATUS_ENQ :
			Reset_internal_ie ();
			set_i_state (Call_state);
			set_i_cause	(C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30, P_NIL);
			Send_to_d_channel (STATUS);
			return (OK);

						/* NS_STATUS_ENQ_RQ */

		case NS_STATUS_ENQ_RQ :

			Send_to_d_channel (STATUS_ENQ);
			return (OK);


#		if NS_RESTART_PROCEDURE == ON /* { */

			case TI_316 :

				if (Dl_rest_state == STATE_REST_1) {

					if (++N316 == AU1_MX_N316) {

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_316);
						Dl_restart_reset ();

					} else {

						Set_call_ref_not_nil ();

							/* store Restart Indicator with value saved in DL context */

						set_ie_i (CODESET_0, RESTART_IND);
						I_restart_ind_class = Dl_rest_class;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

								/* store Channel-ID */

							ie_implicit_val_x (CODESET_0, CHAN_ID, 0);
							set_ie_i (CODESET_0, CHAN_ID);

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							I_chan_id_int_type = INT_TYPE_PRI;
							I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
							I_chan_id_nb_map = CHAN_NUMBER;		/* Format of following octets = simply the B-Channel number */
							I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

							I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
							*I_chan_id_a_chan_number = Dl_rest_chan_nb;	/* channel number */
							Set_ext_bit (*I_chan_id_a_chan_number);		/* Set the extension bit to 1 in the chan_nb field before sending SPDU */
						}

						Send_to_d_channel (RESTART);			/* with CALL_REF_GLOBAL */
						Restart_dl_timer (AU1_T316);
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case TI_317 :

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART :

				if (Dl_rest_state == STATE_REST_0) {

					Start_dl_timer (AU1_T317);
					Set_call_ref_nil ();		/* to use CONN_ID_MANAGEMENT */
					Send_to_call_control (NS_RESTART_IN);
					Dl_rest_state = STATE_REST_2;

					if (I_restart_ind_class == RI_ALL_INTERFACES) {
						csc_clear_all_call ();
						Na_internal_restart = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART_ACK :

				if (Dl_rest_state == STATE_REST_1) {

					Stop_dl_timer (AU1_T316);

					if (Dl_rest_resp == ON) {

						ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
						Dl_restart_reset ();

					} else {

						Dl_rest_ack = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RS :

				Stop_dl_timer (AU1_T317);

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

						Set_call_ref_not_nil ();
						Send_to_d_channel (RESTART_ACK);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RQ :

				if (Dl_rest_state != STATE_REST_0) {

					call_clear ();

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

#		endif /* NS_RESTART_PROCEDURE == ON} */

	} /* End switch (event_id) */

/*.........................................................................*/

				/* 2 - STATE DRIVEN PROCESS */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "au1_circuit_switched_call_n");
	}

	switch (Call_state) {

			/* Null state (n0) */

		case STATE_NULL_0 :
			au1_n0 ();
			break;

			/* Call initiated (n1) */

		case STATE_CALL_INIT_1 :
			au1_n1 ();
			break;

			/* Overlap sending (n2) */

		case STATE_OVERLAP_SENDING_2 :
			au1_n2 ();
			break;

			/* Outgoing call proceeding (n3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			au1_n3 ();
			break;

			/* Call delivered (n4) */

		case STATE_CALL_DELIVERED_4 :
			au1_n4 ();
			break;

			/* Call present (n6) */

		case STATE_CALL_PRESENT_6 :
			au1_n6 ();
			break;

			/* Call received (n7) */

		case STATE_CALL_RECEIVED_7 :
			au1_n7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			au1_n8 ();
			break;

			/* Incoming call proceeding (n9) */

		case STATE_INCOMING_CALL_PROC_9 :
			au1_n9 ();
			break;

			/*  Active (n10) */

		case STATE_ACTIVE_10 :
			au1_n10 ();
			break;

			/* Disconnect request (n11) */

		case STATE_DISCONNECT_REQUEST_11 :
			au1_n11 ();
			break;

			/* Disconnect indication (n12) */

		case STATE_DISCONNECT_INDICATION_12 :
			au1_n12 ();
			break;

			/* Release request (n19) */

		case STATE_RELEASE_REQUEST_19 :
			au1_n19 ();
			break;


			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "au1_circuit_switched_call_n");

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	au1_csc_dl_reinit_n () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void au1_csc_dl_reinit_n ();


Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

void au1_csc_dl_reinit_n ()
{

}

#endif

/*EOF*/
