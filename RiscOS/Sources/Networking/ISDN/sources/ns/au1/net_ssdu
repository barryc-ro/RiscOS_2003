
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.au1
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.au1 */

#include "au1.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		au1_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/

uchar au1_chan_id_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		if (I_(chan_id,int_type) == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}

			if ((I_(chan_id, chan_nb) < 1) || (I_(chan_id, chan_nb) > 31)) {
				return (NOK);
			}

			if (I_(chan_id, chan_nb) > 16) {

				I_(chan_id, chan_nb)--;
			}

		}

	} else {

		if (Na_type == PRI) {

#			if NS_TYPE_PRI == ON

				if (I_(chan_id, chan_nb) >= 16) {

					p_ssdu_val--;
					*p_ssdu_val += 1;
					p_ssdu_val++;

					I_(chan_id, chan_nb)++;
				}

#			endif

		}
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			au1_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar au1_llc_ra_ssdu ();

Return value : 	au1_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, au1_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar au1_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&AU1_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&AU1_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&AU1_P_LLC_PAD);
					break;
			}

			return (r_exec_ssdu_ie ((uchar *)&AU1_P_LLC_2));

	} else {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&AU1_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&AU1_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&AU1_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&AU1_P_LLC_2));
	}

}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ */

#define	AU1_NET_ALERT_RQ			AU1_ALERT_IN
#define	AU1_ALERT_RQ				AU1_ALERT_IN

		/* NS_ALERT_IN */

#define	AU1_NET_ALERT_IN			AU1_ALERT_RQ

		/* NS_CALL_PROC_RQ */

#define	AU1_NET_CALL_PROC_RQ		AU1_CALL_PROC_IN
#define	AU1_CALL_PROC_RQ			AU1_CALL_PROC_IN

		/* NS_CALL_PROC_IN */

#define	AU1_NET_CALL_PROC_IN		AU1_CALL_PROC_RQ

		/* NS_CONN_RQ */

#define	AU1_NET_CONN_RQ				AU1_CONN_IN
#define	AU1_CONN_RQ					AU1_CONN_IN

		/* NS_CONN_IN */

#define	AU1_NET_CONN_IN				AU1_CONN_RQ

		/* NS_CONN_RS */

#define	AU1_NET_CONN_RS				AU1_CONN_CO
#define	AU1_CONN_RS					AU1_CONN_CO

		/* NS_CONN_CO */

#define	AU1_NET_CONN_CO				AU1_CONN_RS



		/* NS_PROGRESS_RQ */

#define	AU1_PROGRESS_RQ				AU1_PROGRESS_IN
#define	AU1_NET_PROGRESS_IN			AU1_PROGRESS_RQ
#define	AU1_NET_PROGRESS_RQ			AU1_PROGRESS_IN

		/* NS_PROGRESS_IN */

#define	AU1_NET_SETUP_ACK_RQ		AU1_SETUP_ACK_IN

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

#define	AU1_NET_CLEAR_RQ			AU1_CLEAR_IN
#define	AU1_CLEAR_RQ				AU1_CLEAR_IN

		/* NS_CLEAR_IN */

#define	AU1_NET_CLEAR_IN			AU1_CLEAR_RQ

		/* NS_CLEAR_RS */

#define	AU1_NET_CLEAR_RS			AU1_CLEAR_CO
#define	AU1_CLEAR_RS				AU1_CLEAR_CO

		/* NS_CLEAR_CO */

#define	AU1_NET_CLEAR_CO			AU1_CLEAR_RS

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

		/* NS_INFO_RQ */

#define	AU1_NET_INFO_RQ				AU1_INFO_IN
#define	AU1_INFO_RQ					AU1_INFO_IN

		/* NS_INFO_IN */

#define	AU1_NET_INFO_IN				AU1_INFO_RQ
#define	AU1_NET_RESTART_RQ			AU1_RESTART_IN

		/* NS_RESTART_RS */

#define	AU1_RESTART_RS				AU1_RESTART_IN
#define	AU1_RESTART_CO				AU1_RESTART_IN
#define	AU1_NET_RESTART_RS			AU1_RESTART_IN
#define	AU1_NET_RESTART_CO			AU1_RESTART_RS

		/* NS_RESTART_IN */

#define	AU1_NET_RESTART_IN			AU1_RESTART_IN

/*=========================================================================*/

#define Ns_au1_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_au1_end_table_or_function		};

#define Ns_au1_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_au1_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_au1		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_au1_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_au1_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "au1.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define AU1_MX_SSDU (sizeof(AU1_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		au1_mx_size_ssdu = AU1_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_au1_table_or_function
#undef Ns_au1_end_table_or_function
#undef Ns_au1_tab_ssdu_ie_entry
#undef Ns_au1_tab_ssdu_ie_mx_entry
#undef Ns_au1_tab_ssdu_entry

#define Ns_au1_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_au1_end_table_or_function		}

#define Ns_au1_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_au1_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_au1_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_au1
#	define Message_header_ssdu_ie_au1		Ns_au1_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_au1_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_au1_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_au1_ssdu ()
{
	uchar   i_pic;

#	include "au1.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

