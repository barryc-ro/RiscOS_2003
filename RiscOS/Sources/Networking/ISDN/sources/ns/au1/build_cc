
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_cc.au1
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		au1_cc_load_ns_test - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			au1_cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar au1_cc_load_ns_test (code_t primitive_code, nai_t nai,
									   conn_id_t conn_id);
							- primitive_code 	= code of the primitive to send,
							- nai				= network access ID,
							- conn_id			= connection ID.

Return value : 	au1_cc_load_ns_test returns = OK
										= NOK

common constants and declarations : ns.h, isdn.h

common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar au1_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t		prim_code;		/* primitive code */
	nai_t 		nai;			/* network access ID */
	sapi_t		sapi;			/* sapi */
	conn_id_t	conn_id;		/* connection ID */
{

		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

		/* Switch according to the primitive to send */

	switch (prim_code) {

/*==========================================================================*/

#if EQUIPMENT == TE

		/*========== primitives as seen from TE side ==========*/


/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :
			Isdn_init_au1_ctx_rq_rs			(conn_rq,
											 Buffer_a_first_data
											);

			Isdn_au1_store_bc_V110			(conn_rq,
											 TRF_CAP_UNRESTRICTED,
											 RA_56KBS
											);

			if (Na_type == BRI) {

				Isdn_au1_store_chan_id_BRI	(conn_rq,
											 CHAN_EXCL,
											 B1_CHAN
											);
			} else {

				Isdn_au1_store_chan_id_PRI	(conn_rq,
											 NOT_D_CHAN,
											 CHAN_EXCL,
											 AS_INDICATED,
											 12
											);
			}

			Isdn_au1_store_calling_nb		(conn_rq,
											 NB_UNKNOWN,
											 PRES_ALLOWED,
											 USER_PASSED,
											 "30571841"
											);

			Isdn_au1_store_calling_sub_add	(conn_rq,
											 SUB_ADD_USER,
											 SUB_ADD_ODD,
											 "4321"
											);

			Isdn_au1_store_called_nb		(conn_rq,
											 NB_NATIONAL,
											 "12345"
											);

			Isdn_au1_store_called_sub_add	(conn_rq,
											 SUB_ADD_OSI,
											 SUB_ADD_EVEN,
											 "4321"
											);

			Isdn_au1_store_hlc				(conn_rq,
											 TELEPHONY
											);

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_au1_ctx_rq_rs 		(conn_rs,
											 Buffer_a_first_data
											);
			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_au1_ctx_rq_rs			(clear_rq,
											 Buffer_a_first_data
											);
			Isdn_au1_store_cause			(clear_rq,
											 LOCATION_USER,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											);
			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_au1_ctx_rq_rs			(clear_rs,
											 Buffer_a_first_data
											);

			break;

/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_au1_ctx_rq_rs			(info_rq,
											 Buffer_a_first_data
											);

			if (Na_type == BRI) {

				Isdn_au1_store_keypad		(info_rq,
											 "8901234"
											);
			} else {

				Isdn_au1_store_called_nb	(info_rq,
											 NB_NATIONAL,
											 "0"
											);
			}

			break;

/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_au1_ctx_rq_rs			(alert_rq,
											 Buffer_a_first_data
											);
			if (Na_type == BRI) {

				Isdn_au1_store_chan_id_BRI	(alert_rq,
											 CHAN_EXCL,
											 B1_CHAN
											);
			} else {

				Isdn_au1_store_chan_id_PRI	(alert_rq,
											 NOT_D_CHAN,
											 CHAN_EXCL,
											 AS_INDICATED,
											 12
											);
			}

			break;

/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_au1_ctx_rq_rs			(call_proc_rq,
											 Buffer_a_first_data
											);

			break;

/*---------------- STATUS_ENQ_RQ */

		case NS_STATUS_ENQ_RQ :
			break;

/*==========================================================================*/

#endif

/*---------------- UNKNOWN primitive */

		default :
			return (NOK);
		}
			/* Load the communication message */

		Store_message (prim_code, nai, sapi, conn_id, p_buffer);
		Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);

		return (OK);

}

/*EOF*/
