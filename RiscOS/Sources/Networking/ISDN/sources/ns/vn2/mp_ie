/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ie.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the FRANCE TELECOM VN2 information
 * element and the integrity constraints associated to them.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON
	uchar	vn2_bc_spdu					(Void_parm);
	uchar	vn2_calling_nb_spdu			(Void_parm);
	uchar	vn2_cause_spdu				(Void_parm);
	uchar	vn2_cause_location_spdu		(Void_parm);
	uchar	vn2_chan_id_from_d_spdu		(Void_parm);
	uchar	vn2_chan_id_to_d_spdu		(Void_parm);
	uchar	vn2_hlc_spdu				(Void_parm);
	uchar	vn2_llc_spdu				(Void_parm);
	uchar	vn2_llc_4a_spdu				(Void_parm);
	uchar	vn2_llc_4b_spdu				(Void_parm);
	uchar	vn2_restart_spdu			(Void_parm);

#	if NS_SPF_FACILITY == ON
		uchar	vn2_spf_fac_spdu		(Void_parm);
#	endif

	uchar	vn2_uui_spdu				(Void_parm);
#endif 

/*---------- Bearer capability (BC) */

D_START	(VN2_BC_SPDU_P)

		D_VAL	(BC_CODING_STD)
		D_TABL	(BC_TRF_CAP)
		D_EXT_1	(BC_3)
		D_VAL	(BC_TRF_MODE)
		D_VAL	(BC_TRF_RATE)
		D_EXT_1	(BC_4)

		D_IF_VAL 	(BC_IF_5)
			D_VAL	(BC_LAYER_ID)
			D_VAL	(BC_PROTOCOL_ID)
			D_EXT_1	(BC_5)

D_END	(END_SPDU)

START	(VN2_BC_SPDU_P)

		VAL		(5,2,	CODING_STD_CCITT,	&i_bc[0].coding_std)
		TABL	(0,5,	VN2_T_TRF_CAP,			&i_bc[0].trf_cap)
		EXT_1	()
		VAL		(5,2,	TRF_MODE_CIRCUIT,	&i_bc[0].trf_mode)
		VAL		(0,5,	TRF_RATE_64KBS,		&i_bc[0].trf_rate)
		EXT_1	()

		IF_VAL	(I_IF, &i_bc[0].trf_cap, NE, TRF_CAP_UNRESTRICTED)
			VAL		(5,2,	LAYER_ID_1,		&i_bc[0].layer_id_1)
			VAL		(0,5,	PROTOCOL_ID_1_G711_A, &i_bc[0].protocol_id_1)
			EXT_1	()

END		(vn2_bc_spdu)


/*---------- Call_identity (CALL_ID) */

D_START	(VN2_CALL_ID_SPDU)
		D_TEXT	(CALL_ID_VAL)
D_END	(END_SPDU)


START	(VN2_CALL_ID_SPDU)
		TEXT(IA5,ANY_CHAR,					&i_call_id[0].lgth, (uchar **)&i_call_id[0].p_val)
END		(0)

/*---------- Call state (CALL_STATE) */

D_START	(VN2_CALL_STATE_SPDU)
		D_TABL		(CALL_STATE_ID)
		D_END_OCTET	(CALL_STATE_3)
D_END	(END_SPDU)

START	(VN2_CALL_STATE_SPDU)
		TABL		(0,8,VN2_T_CALL_STATE,		&i_call_state[0].val)
		END_OCTET	()
END		(0)

/*---------- Called party number (CALLED_NB) */

D_START	(VN2_CALLED_NB_SPDU)

		D_TABL	(CALLED_NB_TYPE)
		D_TABL	(CALLED_NB_PLAN_ID)
		D_EXT_1	(CALLED_NB_3)

		D_TEXT	(CALLED_NB_DIGIT)

D_END	(END_SPDU)


START	(VN2_CALLED_NB_SPDU)

		TABL	(4,3,VN2_T_CALLED_NB_TYPE,		&i_called_nb[0].nb_type)
		TABL	(0,4,VN2_T_CALLED_NB_PLAN,		&i_called_nb[0].plan_id)
		EXT_1	()

		TEXT	(IA5,DIGIT,					&i_called_nb[0].lgth,(uchar **)&i_called_nb[0].p_add)

END		(0)

/*---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(VN2_CALLED_SUB_ADD_SPDU)

		D_TABL	(CALLED_SUB_ADD_TYPE)
		D_PAD	(CALLED_SUB_ADD_PAD_3)
		D_EXT_1	(CALLED_SUB_ADD_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END	(CALLED_SUB_ADD_E)

START	(VN2_CALLED_SUB_ADD_SPDU)

		TABL	(4,3,	VN2_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
		PAD		(0,4)
		EXT_1	()

		IF_VAL  (I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_called_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		END_IF	()

END		(0)

/*---------- Calling party number (CALLING_NB) */

D_START	(VN2_CALLING_NB_SPDU)

		D_TABL	(CALLING_NB_TYPE)
		D_TABL	(CALLING_NB_PLAN_ID)

		D_FUNCTION	(CALLING_NB_FCT)
		D_IF_VAL(TO_NETWORK)
		D_EXT_0_1 (CALLING_NB_3)
		D_VAL	(CALLING_NB_PRESENTATION)
		D_PAD	(CALLING_NB_PAD_3_A)
		D_TABL	(CALLING_NB_SCREEN_IND)
		D_END_IF(TO_NET)

		D_EXT_1	(CALLING_NB_3_A)

		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT	(CALLING_NB_DIGIT)

D_END	(END_SPDU)

START	(VN2_CALLING_NB_SPDU)

		TABL	(4,3,VN2_T_CALLING_NB_TYPE,		&i_calling_nb[0].nb_type)
		TABL	(0,4,VN2_T_CALLING_NB_PLAN,		&i_calling_nb[0].plan_id)

		FUNCTION(vn2_calling_nb_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			VAL		(5,2,0,					&i_calling_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,VN2_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
		END_IF	()

		EXT_1	()

		OPTIONAL_OCTET ()
		TEXT	(IA5,DIGIT,					&i_calling_nb[0].lgth,	(uchar **)&i_calling_nb[0].p_add)

END		(0)

/*---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(VN2_CALLING_SUB_ADD_SPDU)

		D_TABL	(CALLING_SUB_ADD_TYPE)
		D_PAD	(CALLING_SUB_ADD_PAD_3)
		D_EXT_1	(CALLING_SUB_ADD_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END  (END_SPDU)

START	(VN2_CALLING_SUB_ADD_SPDU)

		TABL	(4,3,VN2_T_SUB_ADD_TYPE,		&i_calling_sub_add[0].sub_add_type)
		PAD		(0,4)
		EXT_1	()

		IF_VAL  (I_IF, &i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_calling_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		END_IF	()

END  	(0)

/*---------- Cause (CAUSE) */

D_START	(VN2_CAUSE_SPDU_P)

		D_VAL	(CAUSE_CODING_STD)
		D_PAD	(CAUSE_PAD_3)
		D_FUNCTION	(CAUSE_FCT_LOCATION)	/* PROVISOIRE VN2 */
		D_TABL	(CAUSE_LOCATION)
		D_EXT_1	(CAUSE_3)

		D_TABL		(C_C)
		D_TABX		(C_V)
		D_EXT_1		(CAUSE_4)

D_END	(CAUSE_E_A)


START	(VN2_CAUSE_SPDU_P)
		VAL		(5,2,CODING_STD_CCITT,		&i_cause[0].coding_std)
		PAD		(4,1)
		FUNCTION(vn2_cause_location_spdu)	/* PROVISOIRE VN2 */
		TABL	(0,4,VN2_T_CAUSE_LOCATION,		&i_cause[0].cause_loc)
		EXT_1	()

		TABL	(4,3,VN2_T_C_C,					&i_cause[0].cause_class)
		TABX	(0,4,VN2_TX_C_V,				&i_cause[0].cause_class,	&i_cause[0].cause_val)
		EXT_1	()
END		(vn2_cause_spdu)

D_START	(VN2_DIAGNOSTIC_SPDU)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(VN2_DIAGNOSTIC_SPDU)
	TEXT	(BINARY, ANY_OCTET, 			&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)


/*---------- Channel idendification (CHAN_ID) */

D_START	(VN2_CHAN_ID_SPDU_P)
		D_FUNCTION(TO_D_CHAN)
		D_VAL	(CHAN_INT_ID)
		D_TABL	(CHAN_INT_TYPE)
		D_PAD	(CHAN_PAD_3)
		D_TABL	(CHAN_PREF_EXCL)
		D_VAL	(CHAN_D_CHAN)
		D_TABX	(CHAN_SEL)
		D_EXT_1	(CHAN_3)
D_END	(END_SPDU)


START	(VN2_CHAN_ID_SPDU_P)
		FUNCTION(vn2_chan_id_to_d_spdu)
		VAL		(6,1,	INT_ID_IMPLICIT,		&i_chan_id[0].int_id)
		TABL	(5,1,	VN2_T_INT_TYPE,			&i_chan_id[0].int_type)
		PAD		(4,1)
		TABL	(3,1,	VN2_T_CHAN_PREF_EXCL,	&i_chan_id[0].pref_excl)
		VAL		(2,1,	NOT_D_CHAN,				&i_chan_id[0].d_chan)
		TABX	(0,2,	VN2_TX_CHAN_SEL,		&i_chan_id[0].int_type,&i_chan_id[0].chan_sel)
		EXT_1	()
END		(vn2_chan_id_from_d_spdu)

	/*-----*/

	/* PRI-type chan_id */

D_START	(VN2_CHAN_ID_PRI_P)
		D_VAL	(CHAN_CODING)
		D_PAD	(CHAN_PAD_4)
		D_VAL	(CHAN_TYPE)
		D_EXT_1	(CHAN_4)
		D_TABL	(CHAN_NBER)
		D_EXT_1	(CHAN_5)
D_END   (CHAN_ID_PRI_E)

START	(VN2_CHAN_ID_PRI_P)
		VAL		(5,2,	CODING_STD_CCITT,	&i_chan_id[0].coding_std)
		PAD		(4,1)
		VAL		(0,4,	B_CHAN,				&i_chan_id[0].chan_type)
		EXT_1	()
		TABL	(0,7,	VN2_T_CHAN_NUMBER,	&i_chan_id[0].chan_nb)
		EXT_1	()
END	(0)

/*---------- Display (DISPLAY) */

D_START	(VN2_DISPLAY_SPDU)
		D_TEXT	(DISPLAY_INFORMATION)
D_END	(END_SPDU)

START	(VN2_DISPLAY_SPDU)
		TEXT	(IA5,ANY_CHAR,				 &i_display[0].lgth,(uchar **)&i_display[0].p_info)
END		(0)

/*---------- High layer compatibility (HLC) */

D_START	(VN2_HLC_SPDU_P)

		D_TABL	(HLC_CODING_STD)
		D_TABL	(HLC_INTERPRETATION)
		D_VAL	(HLC_PRESENTATION)
		D_EXT_1	(HLC_3)

D_END	(END_SPDU)


START	(VN2_HLC_SPDU_P)

		TABL	(5,2,VN2_T_CODING_STD,			&i_hlc[0].coding_std)
		TABL	(2,3,VN2_T_INTERPRETATION,		&i_hlc[0].interpretation)
		VAL		(0,2,PRESENTATION_PROFIL,	&i_hlc[0].pres)
		EXT_1	()

END		(vn2_hlc_spdu)


D_START	(VN2_TELESERVICE_CCITT_SPDU)

		D_TABL	(TELESERVICE_CCITT_)
		D_EXT_1	(TELESERVICE_CCITT_4)

D_END	(END_SPDU)


START	(VN2_TELESERVICE_CCITT_SPDU)

		TABL	(0,7,VN2_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		EXT_1	()

END		(0)


D_START	(VN2_TELESERVICE_CEPT_SPDU)

		D_VAL	(TELESERVICE_CEPT_)
		D_EXT_1	(TELESERVICE_CEPT_4)

D_END   (END_SPDU)


START	(VN2_TELESERVICE_CEPT_SPDU)

		VAL		(0,7,INTERWORKING,			&i_hlc[0].teleservice)
		EXT_1	()

END		(0)


D_START	(VN2_TELESERVICE_NATIONAL_SPDU)

		D_TABL	(TELESERVICE_NATIONAL)
		D_EXT_1	(TELESERVICE_NATIONAL_4)

D_END	(END_SPDU)


START	(VN2_TELESERVICE_NATIONAL_SPDU)

		TABL	(0,7,VN2_T_TELESERVICE_NATIONAL,&i_hlc[0].teleservice)
		EXT_1	()

END		(0)

/*---------- Keypad (KEYPAD) */

D_START	(VN2_KEYPAD_SPDU)
		D_TEXT	(KEYPAD_VAL)
D_END	(END_SPDU)

START	(VN2_KEYPAD_SPDU)
		TEXT	(IA5,DIGIT_E,				&i_keypad[0].lgth,	(uchar **)&i_keypad[0].p_info)
END		(0)

/*---------- Low layer compatibility (LLC) */

D_START	(VN2_LLC_SPDU_P)

		D_TABL		(LLC_CODING_STD)
		D_TABL		(LLC_TRF_CAP)
		D_EXT_1		(LLC_3)
		D_TABL		(LLC_TRF_MODE)
		D_TABX		(LLC_TRF_RATE)
		D_FUNCTION	(LLC_4A_4B_SET)
		D_IF_VAL	(LLC_4A_4B_TEST)
			D_EXT_0_1	(LLC_4)

			D_TABL		(LLC_STRUCT)
			D_VAL		(LLC_CONFIG)
			D_VAL		(LLC_EST)
			D_FUNCTION	(LLC_4B_SET)
			D_IF_VAL	(LLC_4B_TEST)
				D_EXT_0_1	(LLC_4_A)

				D_VAL		(LLC_SYMMETRY)
				D_TABX		(LLC_DEST_RATE)
			D_END_IF (LLC_4B_END_IF)
		D_END_IF (LLC_4A_4B_END_IF)
		D_EXT_1		(LLC_4B)
		D_OPTIONAL_OCTET (LLC_OPTIONAL_OCTET)

		D_VAL		(LLC_LAYER_1)
		D_TABL		(LLC_PROTOCOL_1)
		D_EXT_0_1	(LLC_5)

D_END	(END_SPDU)


START	(VN2_LLC_SPDU_P)

		TABL	(5,2,VN2_T_CODING_STD,			&i_llc[0].coding_std)
		TABL	(0,5,VN2_T_TRF_CAP_2,			&i_llc[0].trf_cap)
		EXT_1	()
		TABL	(5,2,VN2_T_TRF_MODE,			&i_llc[0].trf_mode)
		TABX	(0,5,VN2_TX_TRF_RATE,			&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
		FUNCTION (vn2_llc_4a_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1	()

			TABL	(4,3,VN2_T_STRUCTURE,		&i_llc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,	&i_llc[0].config)
			VAL		(0,2,EST_DEMAND,		&i_llc[0].est)
			FUNCTION (vn2_llc_4b_spdu)
			IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1	()

				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_llc[0].symmetry)
				TABX	(0,5,VN2_TX_TRF_RATE,	&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
			END_IF ()
		END_IF ()

		EXT_1	()
		OPTIONAL_OCTET ()

		VAL		(5,2,LAYER_ID_1,			&i_llc[0].layer_id_1)
		TABL	(0,5,VN2_T_PROTOCOL_ID_1,		&i_llc[0].protocol_id_1)
		EXT_0_1	()

END		(vn2_llc_spdu)

			/*---------- V.110 */

D_START	(VN2_V110_SPDU)
			D_TABL	(V110_SYN_ASYN)
			D_TABL	(V110_NEGOTIATION)
			D_TABL	(V110_USER_RATE)
			D_EXT_0_1	(V110_5_A)
			D_TABL	(V110_INTER_RATE)
			D_TABL	(V110_TX_NIC)
			D_TABL	(V110_RX_NIC)
			D_TABL	(V110_TX_FC)
			D_TABL	(V110_RX_FC)
			D_PAD	(V110_PAD_5B)
			D_EXT_0_1(V110_5_B)
			D_TABL	(V110_STOP_BIT)
			D_TABL	(V110_DATA_BIT)
			D_TABL	(V110_PARITY)
			D_EXT_0_1(V110_5_C)
			D_TABL	(V110_DUPLEX)
			D_TABL	(V110_MODEM)
			D_EXT_1	(V110_5_D)
D_END		(END_SPDU)

START	(VN2_V110_SPDU)
			TABL	(6,1,VN2_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(5,1,VN2_T_NEGOTIATION,		&i_llc[0].out_band_neg)
			TABL	(0,5,VN2_T_USER_RATE,		&i_llc[0].user_rate)
			EXT_0_1	()
			TABL	(5,2,VN2_T_INTER_RATE,		&i_llc[0].inter_rate)
			TABL	(4,1,VN2_T_NIC,				&i_llc[0].tx_nic)
			TABL	(3,1,VN2_T_NIC,				&i_llc[0].rx_nic)
			TABL	(2,1,VN2_T_FLOW_CONTROL_TX,	&i_llc[0].tx_fc)
			TABL	(1,1,VN2_T_FLOW_CONTROL_RX,	&i_llc[0].rx_fc)
			PAD		(0,1)
			EXT_0_1	()
			TABL	(5,2,VN2_T_STOP_BIT,		&i_llc[0].stop_bit)
			TABL	(3,2,VN2_T_DATA_BIT,		&i_llc[0].data_bit)
			TABL	(0,3,VN2_T_PARITY,			&i_llc[0].data_bit)
			EXT_0_1	()
			TABL	(6,1,VN2_T_DUPLEX,			&i_llc[0].duplex)
			TABL	(0,6,VN2_T_MODEM,			&i_llc[0].modem)
			EXT_1	()
END		(0)

				/*---------- V.120 */
D_START	(VN2_V120_SPDU)
			D_TABL	(V120_SYN_ASYN)
			D_TABL	(V120_NEGOTIATION)
			D_TABL	(V120_USER_RATE)
			D_EXT_0_1	(V120_5_A)
			D_EXT_0_1	(V120_5_B)
			D_VAL		(V120_RA)
			D_EXT_0_1	(V120_5_C)
			D_TABL	(V120_DUPLEX)
			D_TABL	(V120_MODEM)
			D_EXT_1	(V120_5_D)
D_END		(END_SPDU)

START	(VN2_V120_SPDU)
			TABL	(6,1,VN2_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(5,1,VN2_T_NEGOTIATION,		&i_llc[0].out_band_neg)
			TABL	(0,5,VN2_T_USER_RATE,		&i_llc[0].user_rate)
			EXT_0_1	()
			EXT_0_1	()
			VAL		(0,7,0,						&i_llc[0].V120)
			EXT_0_1	()
			TABL	(6,1,VN2_T_DUPLEX,			&i_llc[0].duplex)
			TABL	(0,6,VN2_T_MODEM,			&i_llc[0].modem)
			EXT_1	()
END		(0)
					/*---------- LLC part 2 */

D_START	(VN2_LLC_P_2)
			D_VAL	(LLC_LAYER_ID_2)
			D_TABL  (LLC_PROTOCOL_ID_2)
			D_EXT_0_1 (_6)
			D_EXT_1	(LLC_6)
			D_VAL	(LLC_LAYER_ID_3)
			D_TABL	(LLC_PROTOCOL_ID_3)
			D_EXT_0_1 (_7)
			D_EXT_1	(LLC_7)
D_END (LLC_E_2)

START	(VN2_LLC_P_2)
			VAL		(5,2,LAYER_ID_2,			&i_llc[0].layer_id_2)
			TABL    (0,5,VN2_T_PROTOCOL_ID_2,	&i_llc[0].protocol_id_2)
			EXT_0_1 ()
			/* No instruction for optional octet 6a to allow only reception */
			EXT_1	()
			VAL		(5,2,LAYER_ID_3,			&i_llc[0].layer_id_3)
			TABL	(0,5,VN2_T_PROTOCOL_ID_3,	&i_llc[0].protocol_id_3)
			EXT_0_1 ()
			/* No instruction for optional octet 7a to allow only reception */
			EXT_1 	()
END (0)

/*---------- Restart indicator */

D_START (VN2_RESTART_IND_SPDU)

		D_TABL	(RESTART_IND_CLASS)
		D_PAD	(RESTART_IND_PAD)
		D_EXT_1	(RESTART_IND_3)

D_END 	(END_SPDU)


START 	(VN2_RESTART_IND_SPDU)

		TABL	(0,3,VN2_T_RESTART_IND_CLASS,	&i_restart_ind[0].restart_class)
		PAD		(3,4)
		EXT_1	()

END 	(vn2_restart_spdu)


/*---------- Network-specific facilities (SPF_FAC) */

#if NS_SPF_FACILITY == ON

D_START	(VN2_SPF_FAC_SPDU_P)
		D_VAL	(FT_SPF_FAC_NETWORK_ID_LGTH)
		D_END_OCTET(SPF_FAC_3)
D_END	(END_SPDU)

START	(VN2_SPF_FAC_SPDU_P)
		VAL     (0,8,FAC_NETWORK_ID_LGTH,	&i_spf_fac[0].net_id_lgth)
		END_OCTET()
END     (vn2_spf_fac_spdu)

#endif

/*---------- User to user information (UUI) */

D_START	(VN2_UUI_SPDU_P)
		D_TABL	(UUI_PROTOCOL_DISCR)
		D_END_OCTET (UUI_3)
		D_OPTIONAL_OCTET (UUI_OPTIONAL)
D_END	(END_SPDU)

START	(VN2_UUI_SPDU_P)
		TABL	(0,8,VN2_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)
		END_OCTET ()
		OPTIONAL_OCTET ()
END		(vn2_uui_spdu)

D_START	(VN2_UUI_IA5_SPDU)
		D_TEXT	(UUI_IA5_INFO)
D_END	(END_SPDU)

START	(VN2_UUI_IA5_SPDU)
		TEXT(IA5,		ANY_CHAR,			&i_uui[0].lgth,(uchar **)&i_uui[0].p_info)
END		(0)

D_START	(VN2_UUI_TNA_SPDU)
		D_TEXT	(UUI_TNA_INFO)
D_END	(END_SPDU)

START	(VN2_UUI_TNA_SPDU)
		TEXT	(BINARY,	ANY_OCTET,		&i_uui[0].lgth,(uchar **)&i_uui[0].p_info)
END		(0)

/*---------- User mode working (USER_MODE) */

D_START	(VN2_USER_MODE_SPDU)
		D_VAL	(USER_MODE_CODING_STD)
		D_VAL 	(USER_MODE_WORKING_DESCR)
		D_END_OCTET(USER_MODE_3)
D_END	(END_SPDU)

START	(VN2_USER_MODE_SPDU)
		VAL		(6,2,CODING_STD_NATIONAL,		&i_user_mode[0].coding_std)
		VAL 	(0,6,NATIONAL_FUNCTIONAL_MODE,	&i_user_mode[0].descr)
		END_OCTET()
END		(0)

/*---------- User to user facilities (USER_FAC) */

D_START	(VN2_USER_FAC_SPDU)
		D_TABL	(USER_FAC_DISCR_PROTOCOL)
		D_END_OCTET(USER_FAC_3)
		D_TEXT	(USER_FAC_DESCR)
D_END	(END_SPDU)

START	(VN2_USER_FAC_SPDU)
		TABL	(0,8,VN2_T_USER_PROTOCOL_DISCR,	&i_user_fac[0].protocol_discr)
		END_OCTET()
		TEXT	(BINARY,	ANY_OCTET,		&i_user_fac[0].lgth,(uchar **)&i_user_fac[0].p_descr)
END		(0)


			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(VN2_PROGRESS_IND_SPDU)
	D_VAL	(CODING_STD)
	D_PAD   (NS_PAD_3)
	D_PAD 	(NS_PAD_)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(VN2_PROGRESS_IND_SPDU)
	VAL		(5,2,CODING_STD_CCITT,			&i_progress_ind[0].coding_std)
	PAD		(4,1)
	PAD		(0,4)
	EXT_1   ()
	TABL	(0,7,VN2_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
	EXT_1   ()
END			(0)

/*EOF*/
