
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_swit.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) France telecom VN2 switch :
 *
 *        vn2_csc_dl_reinit - implement an unexpected data link reinit.
 *
 *        vn2_circuit_switched_call - implements the processing of the call
 *		      	                    control procedures.
 *
 *        circuit_switched_call_n - implements the processing of the call
 *		                            control procedures.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*                */
						/*----------------*/

#	if NEW_FCT_STYLE == ON
		void	vn2_u0						(void);
		void	vn2_u1						(void);
		void	vn2_u2						(void);
		void	vn2_u3						(void);
		void	vn2_u4						(void);
		void	vn2_u6						(void);
		void	vn2_u7						(void);
		void	vn2_u8						(void);
		void	vn2_u9						(void);
		void	vn2_u10						(void);
		void	vn2_u11						(void);
		void	vn2_u12						(void);
		void	vn2_u15						(void);
		void	vn2_u17						(void);
		void	vn2_u19						(void);
		void	vn2_u254					(void);
		void	vn2_csc_dl_reinit			(void);
		uchar	vn2_circuit_switched_call	(void);
		uchar	vn2_error_handler			(void);

#	else

		void	vn2_u0						();
		void	vn2_u1						();
		void	vn2_u2						();
		void	vn2_u3						();
		void	vn2_u4						();
		void	vn2_u6						();
		void	vn2_u7						();
		void	vn2_u8						();
		void	vn2_u9						();
		void	vn2_u10						();
		void	vn2_u11						();
		void	vn2_u12						();
		void	vn2_u15						();
		void	vn2_u17						();
		void	vn2_u19						();
		void	vn2_u254					();
		void	vn2_csc_dl_reinit			();
		uchar	vn2_circuit_switched_call	();
		uchar	vn2_error_handler			();

#	endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	vn2_csc_dl_reinit () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN)
									   for VN2 implementation.

Usage           	void vn2_csc_dl_reinit ();

Related
functions usage		void vn2_csc_dl_reinit ();

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void vn2_csc_dl_reinit ()
{

	ns_access_first_call ();

	while (Call_current_exist) {

		if (Call_state != STATE_NIL) {
			I_call_ref = Call_ref;
			Set_call_ref_not_nil ();
			send_state (C_C_PROTOCOL_ERROR,	C_V_PROTOCOL_ERROR_UNSPECIFIED_111, DIAGNOSTIC_NIL);
		}

		ns_access_next_call ();
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            vn2_circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar vn2_circuit_switched_call ();

Related
functions usage void vn2_u0 .... vn2_u254 ()

Description     vn2_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*								CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|     start T305|     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

uchar vn2_circuit_switched_call ()
{

					/* 1 - EVENT DRIVEN PROCESSING  */


	switch (event_id) {

							/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

							/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) == NOK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NO_CIRCUIT_AVAILABLE_34, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;

							/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_DISCONNECT_REQUEST_11 :
					Stop_timer_ns (VN2_T305);
					Send_to_call_control (NS_CLEAR_IN);
					Reset_internal_ie ();
					set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					Send_to_d_channel_and_save_spdu (REL);
					N308 = 0;
					Start_timer_ns (VN2_T308);
					Set_state (STATE_RELEASE_REQUEST_19);
					break;

				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_OUTGOING_CALL_PROC_3 :

						/* UUI protocol */

					if (is_ie_i (CODESET_0, UUI) == ABSENT) {
						Call_uui_rq = OFF;
					}

						/* USER FACILITY protocol */

					if (is_ie_i (CODESET_6, USER_FAC) == ABSENT) {
						Call_user_fac_rq = OFF;
					}


				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Call Control */
					Set_state (STATE_DISCONNECT_INDICATION_12);		/* enter disconnect indication state */
					break;

			}

			return (OK);

							/* - RELEASE */

		case DA_REL :
			Call_fac_rq 	= OFF;

			switch (Call_state) {

				case STATE_RELEASE_REQUEST_19 :
					Send_to_call_control (NS_CLEAR_CO);
					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Call Control */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					break;

			}

			call_clear ();
			return (OK);

						/* - RELEASE COMPLETE */

		case DA_REL_COMP :
			Call_fac_rq	= OFF;
			Send_to_call_control (NS_CLEAR_CO);						/* send NS clear confirm to Call Control */
			call_clear ();											/* free call context */
			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_WAIT_DL :
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_CALL_PRESENT_6 :
					Stop_timer_ns (VN2_T300);

						/* First response to SETUP ? */

						/* UUI protocol */

					if (is_ie_i (CODESET_0, UUI) == PRESENT) {

						if (Call_uui_rq == OFF) {
							send_err_to_user (ERR_U_UUI_PROTOCOL, UUI, 0, Call_upper_ent);
							break;

						}


					} else {

						Call_uui_rq = OFF;
					}

						/* USER FACILITY protocol */

					if (is_ie_i (CODESET_6, USER_FAC) == PRESENT) {

						if (Call_user_fac_rq == OFF) {
							send_err_to_user (ERR_U_USER_FAC_PROTOCOL, USER_FAC, 0, Call_upper_ent);
							break;

						}


					} else {

						Call_user_fac_rq = OFF;
					}

#					if NS_SPF_FACILITY == ON

					if ((is_ie_i (CODESET_0, UUI) == PRESENT) ||
						((is_ie_i (CODESET_0, CALLED_NB) == PRESENT) &&
						 (is_ie_i (CODESET_0, SPF_FAC)   == PRESENT) &&
						 (I_spf_fac_action == FT_SPF_FAC_RQ_ACTIVATE)   &&
						 (I_spf_fac_code   == FT_SPF_FAC_CALL_DEFLECTION)
						)
					   ) {
						Send_to_d_channel_and_save_spdu (REL);
						N308 = 0;
						Start_timer_ns (VN2_T308);
						Set_state (STATE_RELEASE_REQUEST_19);

					} else

#					endif

					if ((is_ie_i (CODESET_0, CAUSE) == PRESENT) &&
						(I_cause_class == C_C_NORMAL_EVENT)     &&
						(I_cause_val   == C_V_NO_ANSWER_19)) {

						Reset_internal_ie ();
						Send_to_call_control (NS_CLEAR_CO);
						call_clear ();

					} else {

						Send_to_d_channel (REL_COMP);
						Reset_internal_ie ();
						Send_to_call_control (NS_CLEAR_CO);
						call_clear ();
					}

					break;

				case STATE_CALL_RECEIVED_7 :
					Send_to_d_channel_and_save_spdu (REL);
					N308 = 0;
					Start_timer_ns (VN2_T308);
					Set_state (STATE_RELEASE_REQUEST_19);
					break;

				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					disc_cause_error ();
					Stop_timer_ns  (VN2_T300);
					go_to_state_19 (VN2_T308);
					break;

				default :
					ns_stop_all_timers ();

					if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
						ie_implicit_val_x (CODESET_0, CAUSE, 0);	/* init implicit value */
					}

					Save_cause ();									/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);						/* send a DISCONNECT message */
					Start_timer_ns (VN2_T305);								/* start T305 */
					Set_state (STATE_DISCONNECT_REQUEST_11); 		/* enter the Disconnect Request state */
					break;

			}

			return (OK);

							/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_CALL_INIT_1 :
				case STATE_REGISTRATION_REQUEST_254 :
					ns_unexpected_ev ();
					break;

				default :
					Send_to_call_control (NS_INFO_IN);
					break;

			}

			return (OK);

								/* STATUS */

		case DA_STATUS :

				/* Report to MNS */

			if (!Call_current_exist) return (OK);

			ns_send_mns_status ();

			if ( (I_cause_class == C_C_PROTOCOL_ERROR) &&
				 ( (I_cause_val == C_V_MANDATORY_IE_MISSING_96) ||
				   (I_cause_val == C_V_INCORRECT_MANDATORY_IE_LGTH_103)
				 )
			   ) {

						Reset_internal_ie ();
						set_i_cause	(C_C_PROTOCOL_ERROR, C_V_PROTOCOL_ERROR_UNSPECIFIED_111, P_NIL);
						Send_to_d_channel (REL_COMP);
						Send_to_call_control (NS_CLEAR_CO);
						call_clear ();

			}

			return (OK);


								/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			if ( (Call_state != STATE_OVERLAP_SENDING_2) &&
				 (is_ie_i (CODESET_0, CALLED_NB) == PRESENT)
			   ) {
			   ns_unexpected_ev ();

			} else {

				Send_to_d_channel (INFO);

				if (Call_state == STATE_OVERLAP_SENDING_2) {
					Restart_timer_ns (VN2_T304);
				}

			}

			return (OK);


	} /* End switch (event_id) */

/*.........................................................................*/

						/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "vn2_circuit_switched_call");
	}

	switch (Call_state) {

			/* Null state (u0) */

		case STATE_NULL_0 :
		case STATE_WAIT_DL :
			vn2_u0 ();
			break;

			/* Call initiated (u1) */

		case STATE_CALL_INIT_1 :
			vn2_u1 ();
			break;

			/* Overlap sending (u2) */

		case STATE_OVERLAP_SENDING_2 :
			vn2_u2 ();
			break;

			/* Outgoing call proceeding (u3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			vn2_u3 ();
			break;

			/* Call delivered (u4) */

		case STATE_CALL_DELIVERED_4 :
			vn2_u4 ();
			break;

			/* Call present (u6) */

		case STATE_CALL_PRESENT_6 :
			vn2_u6 ();
			break;

			/* Call received (u7) */

		case STATE_CALL_RECEIVED_7 :
			vn2_u7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			vn2_u8 ();
			break;

			/* Incoming call proceeding (u9) */

		case STATE_INCOMING_CALL_PROC_9 :
			vn2_u9 ();
			break;

			/*  Active (u10) */

		case STATE_ACTIVE_10 :
			vn2_u10 ();
			break;

			/* Disconnect request (u11) */

		case STATE_DISCONNECT_REQUEST_11 :
			vn2_u11 ();
			break;

			/* Disconnect indication (u12) */

		case STATE_DISCONNECT_INDICATION_12 :
			vn2_u12 ();
			break;

			/* Suspend request (u15) */

		case STATE_SUSPEND_REQUEST_15 :
			vn2_u15 ();
			break;

			/* Resume request (u17) */

		case STATE_RESUME_REQUEST_17 :
			vn2_u17 ();
			break;

			/* Release request (u19) */

		case STATE_RELEASE_REQUEST_19 :
			vn2_u19 ();
			break;

			/*  Registration service request (u254) France Telecom only */

		case STATE_REGISTRATION_REQUEST_254 :
			vn2_u254 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "vn2_circuit_switched_call");

	}

	return (OK);
}

#if EQUIPMENT == NT2

						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*                   */
						/*-------------------*/

#	if NEW_FCT_STYLE == ON
		void 		vn2_n0						(void);
		void 		vn2_n1						(void);
		void 		vn2_n2						(void);
		void 		vn2_n3						(void);
		void 		vn2_n4						(void);
		void 		vn2_n6						(void);
		void 		vn2_n7						(void);
		void 		vn2_n8						(void);
		void 		vn2_n9						(void);
		void 		vn2_n10						(void);
		void 		vn2_n11						(void);
		void 		vn2_n12						(void);
		void 		vn2_n14						(void);
		void 		vn2_n15						(void);
		void 		vn2_n16						(void);
		void 		vn2_n17						(void);
		void 		vn2_n19						(void);
		void 		vn2_n22						(void);
		void 		vn2_n254					(void);
#	else
		void 		vn2_n0						();
		void 		vn2_n1						();
		void 		vn2_n2						();
		void 		vn2_n3						();
		void 		vn2_n4						();
		void 		vn2_n6						();
		void 		vn2_n7						();
		void 		vn2_n8						();
		void 		vn2_n9						();
		void 		vn2_n10						();
		void 		vn2_n11						();
		void 		vn2_n12						();
		void 		vn2_n14						();
		void 		vn2_n15						();
		void 		vn2_n16						();
		void 		vn2_n17						();
		void 		vn2_n19						();
		void 		vn2_n22						();
		void 		vn2_n254					();
#	endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	vn2_csc_dl_reinit_n () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void vn2_csc_dl_reinit_n ();

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

void vn2_csc_dl_reinit_n ()
{

	ns_access_first_call ();

	while (Call_current_exist) {

			/* Only the Call using the current DL */

		if (Call_ces == Dl_ces) {

			switch (Call_state) {

				case STATE_NIL					:
				case STATE_ACTIVE_10 			:
				case STATE_SUSPEND_REQUEST_15 	:
				case STATE_LOCAL_SUSPEND_16 	:
				case STATE_RESUME_REQUEST_17 	:
					break;

				default :
					I_call_ref = Call_ref;
					Set_call_ref_not_nil ();
					send_state (C_C_PROTOCOL_ERROR,	C_V_PROTOCOL_ERROR_UNSPECIFIED_111, DIAGNOSTIC_NIL);
					break;

			}

		}

		ns_access_next_call ();
	}

}

/*--------------------------------------------------------------------------*/

/*								CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308	   |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            vn2_circuit_switched_call_n - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar vn2_circuit_switched_call_n ();

Related
functions usage void vn2_n0 .... vn2_n254 ()

Description     circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

uchar vn2_circuit_switched_call_n ()
{

					/* 1 - EVENT DRIVEN PROCESSING  */

	switch (event_id) {


							/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

							/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) == NOK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_CONGESTION_42, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;

							/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_DISCONNECT_REQUEST_11 :
					Stop_timer_ns (VN2_T305);
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Call Control */
					Send_to_d_channel (REL);
					break;

				case STATE_RELEASE_REQUEST_19 :
					break;

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Call Control */
					Start_timer_ns (VN2_T300);							/* Call Control response mandatory */
					Set_state (STATE_DISCONNECT_INDICATION_12);		/* enter disconnect request state */
					break;

			}

			return (OK);

							/* - RELEASE */

		case DA_REL :

			Call_fac_rq 	= OFF;

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :
					vn2_n6 ();
					break;

				case STATE_CALL_RECEIVED_7 :
					vn2_n7 ();
					break;

				case STATE_CONNECT_REQUEST_8 :
					vn2_n8 ();
					break;

				case STATE_ACTIVE_10 :
					vn2_n10 ();
					break;

				case STATE_RELEASE_REQUEST_19 :
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Call Control */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);

						/* - RELEASE COMPLETE */

		case DA_REL_COMP :

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :
					if (Call_sub_state == N6) {
						save_ie_cause ();
						Call_sub_state = N6_REL_COMP;
					}
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_ACTIVE_10 :
					break;

				default :
					Call_fac_rq	= OFF;
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Call Control */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :


			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :
					vn2_n6 ();
					break;

				case STATE_CALL_RECEIVED_7 :
					vn2_n7 ();
					break;

				case STATE_CONNECT_REQUEST_8 :
					vn2_n8 ();
					break;

				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				default :
					ns_stop_all_timers ();

					if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
						ie_implicit_val_x (CODESET_0, CAUSE, 0);	/* init implicit value */
					}

					Save_cause ();									/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);						/* send a DISCONNECT message */
					Start_timer_ns (VN2_T305);								/* start T305 */
					Set_state (STATE_DISCONNECT_REQUEST_11); 		/* enter the Disconnect Request state */
					break;

			}

			return (OK);

							/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_OVERLAP_SENDING_2 :

					if (is_ie_i (CODESET_0, CALLING_NB) == ABSENT) {
						ns_unexpected_ev ();

					} else {

						Send_to_call_control (NS_INFO_IN);
						Restart_timer_ns (VN2_T302);
					}

					break;


				case STATE_CALL_INIT_1 :
				case STATE_REGISTRATION_REQUEST_254 :
				case STATE_CALL_PRESENT_6 :
					ns_unexpected_ev ();
					break;

				default :
					Send_to_call_control (NS_INFO_IN);
					Restart_timer_ns (VN2_T302);
					break;

			}

			return (OK);

								/* STATUS */

		case DA_STATUS :
			return (OK);

								/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Send_to_d_channel (INFO);
			return (OK);

	} /* End switch (event_id) */

/*.........................................................................*/

						/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if ( ! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "circuit_switched_call_n");
	}

	switch (Call_state) {

			/* Null state (n0) */

		case STATE_NULL_0 :
			vn2_n0 ();
			break;

			/* Call initiated (n1) */

		case STATE_CALL_INIT_1 :
			vn2_n1 ();
			break;

			/* Overlap sending (n2) */

		case STATE_OVERLAP_SENDING_2 :
			vn2_n2 ();
			break;

			/* Outgoing call proceeding (n3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			vn2_n3 ();
			break;

			/* Call delivered (n4) */

		case STATE_CALL_DELIVERED_4 :
			vn2_n4 ();
			break;

			/* Call present (n6) */

		case STATE_CALL_PRESENT_6 :
			vn2_n6 ();
			break;

			/* Call received (n7) */

		case STATE_CALL_RECEIVED_7 :
			vn2_n7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			vn2_n8 ();
			break;

			/* Incoming call proceeding (n9) */

		case STATE_INCOMING_CALL_PROC_9 :
			vn2_n9 ();
			break;

			/*  Active (n10) */

		case STATE_ACTIVE_10 :
			vn2_n10 ();
			break;

			/* Disconnect request (n11) */

		case STATE_DISCONNECT_REQUEST_11 :
			vn2_n11 ();
			break;

			/* Disconnect indication (n12) */

		case STATE_DISCONNECT_INDICATION_12 :
			vn2_n12 ();
			break;

			/* Suspend request (n15) */

		case STATE_SUSPEND_REQUEST_15 :
			vn2_n15 ();
			break;

			/* Local suspend (n16) */

		case STATE_LOCAL_SUSPEND_16 :
			vn2_n16 ();
			break;

			/* Resume request (n17) */

		case STATE_RESUME_REQUEST_17 :
			vn2_n17 ();
			break;

			/* Release request (n19) */

		case STATE_RELEASE_REQUEST_19 :
			vn2_n19 ();
			break;

			/*  Registration service request (n254) France Telecom only */

		case STATE_REGISTRATION_REQUEST_254 :
			vn2_n254 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "vn2_circuit_switched_call_n");

	}

	return (OK);
}

#endif

/*EOF*/
