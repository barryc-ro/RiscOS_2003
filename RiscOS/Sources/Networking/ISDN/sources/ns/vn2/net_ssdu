
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 * vn2_spf_fac - implements the processing of a facility IE
 * in a NS_XXXX_RQ/RS and NS_YYYY_IN/CO primitives.
 *
 * vn2_chan_id_ssdu - implements the specific processing of a chan_id
 * IE in a SSDU primitive.
 *
 * vn2_hlc_ssdu - implements the specific processing of a hlc
 * IE in a SSDU primitive.
 *
 * vn2_llc_protocol_1_ssdu - implements the specific processing
 * of a llc protocol layer 1 IE in a SSDU  primitive.
 *
 * vn2_llc_ra_ssdu - implements the specific processing
 * of a llc rate adaptation IE in a SSDU primitive.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.vn2 */

#include "vn2.mp_ssdu"

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*-------- NS_CONN_RQ */

#define VN2_NET_CONN_RQ			VN2_CONN_IN

/*-------- NS_CONN_IN */

#define VN2_NET_CONN_IN			VN2_CONN_RQ

/*-------- NS_CONN_RS */

#define VN2_NET_CONN_RS			VN2_CONN_CO

/*-------- NS_CONN_CO */

#define VN2_NET_CONN_CO			VN2_CONN_RS

/*-------- NS_CLEAR_RQ */

#define VN2_NET_CLEAR_RQ		VN2_CLEAR_IN

/*-------- NS_CLEAR_IN */

#define	VN2_NET_CLEAR_IN		VN2_CLEAR_RQ

/*-------- NS_CLEAR_RS */

#define	VN2_NET_CLEAR_RS		VN2_CLEAR_CO

/*-------- NS_CLEAR_CO */

#define	VN2_NET_CLEAR_CO		VN2_CLEAR_RS

/*-------- NS_SETUP_ACK_RQ */

#define	VN2_NET_SETUP_ACK_RQ	VN2_SETUP_ACK_IN

/*-------- NS_SETUP_ACK_IN */

#define VN2_NET_SETUP_ACK_IN	VN2_SETUP_ACK_RQ

/*-------- NS_CALL_PROC_RQ */

#define VN2_NET_CALL_PROC_RQ	VN2_CALL_PROC_IN

/*-------- NS_CALL_PROC_IN */

#define VN2_NET_CALL_PROC_IN	VN2_CALL_PROC_RQ

/*-------- NS_ALERT_RQ */

#define VN2_NET_ALERT_RQ		VN2_ALERT_IN

/*-------- NS_ALERT_IN */

#define	VN2_NET_ALERT_IN		VN2_ALERT_RQ

/*-------- NS_ROUTED_CALL_RQ */

#define	VN2_NET_ROUTED_CALL_RQ	VN2_ROUTED_CALL_IN

/*-------- NS_ROUTED_CALL_IN */

#define VN2_NET_ROUTED_CALL_IN	VN2_ROUTED_CALL_RQ

/*-------- NS_INFO_RQ */

#define VN2_NET_INFO_RQ			VN2_INFO_IN

/*-------- NS_INFO_IN */

#define VN2_NET_INFO_IN			VN2_INFO_RQ

/*-------- NS_USER_INFO_RQ */

#define	VN2_NET_USER_INFO_RQ	VN2_USER_INFO_IN

/*-------- NS_USER_INFO_IN */

#define VN2_NET_USER_INFO_IN	VN2_USER_INFO_RQ

/*-------- NS_SUSPEND_IN */

#define VN2_NET_SUSPEND_IN		VN2_SUSPEND_RQ

/*-------- NS_SUSPEND_RS */

#define VN2_NET_SUSPEND_RS		VN2_SUSPEND_CO

/*-------- NS_RESUME_IN */

#define VN2_NET_RESUME_IN		VN2_RESUME_RQ

/*-------- NS_RESUME_RS */

#define VN2_NET_RESUME_RS			VN2_RESUME_CO

#if NS_SPF_FACILITY == ON

	/*-------- NS_SPF_FACILITY_IN */

#	define VN2_NET_SPF_FACILITY_IN	VN2_SPF_FACILITY_RQ

	/*-------- NS_SPF_FACILITY_RS */

#	define	VN2_NET_SPF_FACILITY_RS	VN2_SPF_FACILITY_CO

	/*-------- NS_SPF_REGISTRATION_IN */

#	define	VN2_NET_SPF_REGISTRATION_IN	VN2_SPF_REGISTRATION_RQ

	/*-------- NS_SPF_REGISTRATION_RS */

#	define	VN2_NET_SPF_REGISTRATION_RS	VN2_SPF_REGISTRATION_CO

#endif	/* NS_SPF_FACILITY */

/*=========================================================================*/

#define Ns_vn2_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_vn2_end_table_or_function		};

#define Ns_vn2_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_vn2_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_vn2		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_vn2_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_vn2_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "vn2.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define VN2_MX_SSDU (Rnd_sizeof(VN2_TAB_SSDU) / SSDU_ELEM_SIZE) /* number of element in the table */

CONST uchar		vn2_mx_size_ssdu = VN2_MX_SSDU;

/*===========================================================================

							SPECIFIC FUNCTIONS
							------------------

	FROM CALL PROC APPLI current context : p_ssdu_val points on the SSDU current
	------------------------------------   indirect primitive value area.

								p_ind_buffer points on the next free
								location in the ind_buffer (used in pool
								to store text).

								p_data_ref points the top of the SSDU area.

	TO CALL PROC current context :
	-----------------------------

===========================================================================*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             vn2_spf_fac - implements the processing of a facility IE
							   in a NS_XXXX_RQ/RS and NS_YYYY_IN/CO primitives.

Usage            uchar vn2_spf_fac ();

Return value    return = OK
					   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : p_ind_buffer points the next free position in the indirect
				 buffer.

				 p_ssdu_val   points the current value position in the SSDU.

							  ie_val 	action;				 activate, clear or
															 enquiry / OK, NOK or TX
							  ie_val 	code;				 facility code
					 ------>  long 		charging;			 charging value
							  ie_array nb[VN2_MX_SZ_CALLED_NB];  called number

				  p_data_ref points the top of the SSDU buffer.

				  i_spf_fac    internal data structure for facility.

*--------------------------------------------------------------------------*/

uchar vn2_spf_fac_ssdu ()
{
#if NS_SPF_FACILITY == OFF
	return (NOK);
#else

	uchar	i;				/* loop counter */
	uchar	mx_lgth;		/* max string lgth */

	if (direction == FROM_CALL_CONTROL) {

								/* FROM CALL PROC */

		switch (ssdu_id) {

				/* SETUP */

		   case NS_CONN_RQ :

				if (I_spf_fac_action != FT_SPF_FAC_RQ_ACTIVATE) {

					if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL){
						return (NOK);
					}

				} else {

					switch (I_spf_fac_code) {

						case FT_SPF_FAC_CHARGING :
						case FT_SPF_FAC_TRF :
						case FT_SPF_FAC_IDENTIFICATION_DENIED :
							break;

						default :
							if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
								return (NOK);
							}
							break;

					}

				}

				/* FACILITY */

			case NS_SPF_FACILITY_RQ :

				switch (I_spf_fac_code) {

					case FT_SPF_FAC_CALL_DEFLECTION :
					case FT_SPF_FAC_TRF :
					case FT_SPF_FAC_CHARGING :
					case FT_SPF_FAC_ALTERNATE :
					case FT_SPF_FAC_THREE_PARTY :
					case FT_SPF_FAC_MALICIOUS_CALL_ID :
					case FT_SPF_FAC_HOLD :
					case FT_SPF_FAC_RETRIEVE :
						break;

					default :

						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}
						break;
				}
				break;

				/* REGISTRATION */

			case NS_SPF_REGISTRATION_RQ :

				switch (I_spf_fac_code) {

					case FT_SPF_FAC_CALL_FORWARDING :
						p_ssdu_val += VN2_SPF_FAC_PAD_SIZE + Rnd_sizeof (long);

						if (I_spf_fac_action == FT_SPF_FAC_RQ_ACTIVATE) {

							if ((mx_lgth = *p_ssdu_val++) != 0) {

								I_spf_fac_p_fac = p_ind_buffer;

								for (i = 0; i < mx_lgth; i++, p_ind_buffer++, p_ssdu_val++) {
									if ((*p_ind_buffer = *p_ssdu_val) == '\0') break;
									if (Isdigit (*p_ind_buffer)) continue;
									if (error_set (ERR_U_PARAM_TYPE, ie_id, ie_codeset) == FATAL) return (NOK);
								}

								I_spf_fac_info_lgth = i;
								p_ind_buffer++;
								p_ssdu_val++;
								break;

							}

							if (error_set (ERR_U_PARAM_VAL, ie_id, ie_codeset) == FATAL) {
								return (NOK);
							}

						}

						break;

					default :

						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}

						break;

				}
				break;

				/* RELEASE */

			case NS_CLEAR_RQ :

				switch (I_spf_fac_code) {

					case FT_SPF_FAC_CALL_DEFLECTION :
						break;

					default :
						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}
						break;

				}
				break;

		}

	} else {

					/* TO CALL PROC */

		switch (ssdu_id) {

			case NS_CALL_PROC_IN :
				break;

			case NS_CLEAR_IN :
			case NS_CLEAR_CO :
			case NS_INFO_IN :
				p_ssdu_val 			+= VN2_SPF_FAC_PAD_SIZE;
				*(long *)p_ssdu_val	 = I_spf_fac_tax;
				p_ssdu_val 			+= Rnd_sizeof (long);
				break;


			case NS_SPF_FACILITY_CO :
			case NS_SPF_REGISTRATION_CO :

					/* skip the tax location and store length of possible string */

				p_ssdu_val += VN2_SPF_FAC_PAD_SIZE + Rnd_sizeof (long);
				*p_ssdu_val++ = I_spf_fac_info_lgth + 1;

					/* is there a block ? */

				if (I_spf_fac_info_lgth != 0) {

						/* transfer the called number */

					Memcpy_far ((char FAR *)p_ssdu_val, (char FAR *)I_spf_fac_p_fac, I_spf_fac_info_lgth + 1);
					p_ssdu_val += I_spf_fac_info_lgth + 1;

				} else {

					*p_ssdu_val++ = '\0';	/* null string */
				}

				break;

		}

	}

	return (OK);
#endif

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_chan_id_ssdu - implements the specific processing of a chan_id
								   IE in a SSDU primitive.

Usage           uchar vn2_chan_id_ssdu ();

Return value : 	vn2_chan_id_ssdu returns = OK
										 = NOK

Common constants and declarations : ns.h, net_i_s.h

Common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn2_chan_id_ssdu ()
{

	if (direction == FROM_CALL_CONTROL) {
		I_chan_id_int_type = (Na_type == BRI) ? INT_TYPE_BRI : INT_TYPE_PRI;
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_hlc_ssdu - implements the specific processing of a hlc
							   IE in a SSDU primitive.

Usage           uchar vn2_hlc_ssdu ();

Return value : 	vn2_hlc_ssdu returns = OK
									 = NOK

Common constants and declarations : ns.h, net_i_s.h

Common objects : internal data structure i_hlc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn2_hlc_ssdu ()
{
	uchar 	code;			/* teleservice code */

	if (direction == FROM_CALL_CONTROL) {

		code = *p_ssdu_val++;

		if (code == NS_TELESERVICE_CCITT) {
			I_hlc_coding_std = CODING_STD_CCITT;
			I_hlc_interpretation = INTER_CCITT_CEPT;
			ret_code = r_exec_ssdu_ie ((uchar *)&VN2_SSDU_TELESERVICE_CCITT);

		} else {

			I_hlc_coding_std = CODING_STD_NATIONAL;

			if (code == NS_TELESERVICE_NATIONAL) {
				I_hlc_interpretation = INTER_NATIONAL;
				ret_code = r_exec_ssdu_ie ((uchar *)&VN2_SSDU_TELESERVICE_NATIONAL);

			} else if (code == NS_TELESERVICE_CEPT) {

				I_hlc_interpretation = INTER_CCITT_CEPT;
				ret_code = r_exec_ssdu_ie ((uchar *)&VN2_SSDU_TELESERVICE_CEPT);

			} else {

				if (error_set (ERR_U_PARAM_TYPE, ie_id, Relative_add) == FATAL) {
					return (NOK);
				}

			}

		}

	} else {

		if (I_hlc_coding_std == CODING_STD_CCITT) {
			*p_ssdu_val++ = NS_TELESERVICE_CCITT;
			ret_code = s_exec_ssdu_ie ((uchar *)&VN2_SSDU_TELESERVICE_CCITT);

		} else if (I_hlc_interpretation == INTER_CCITT_CEPT) {

			*p_ssdu_val++ = NS_TELESERVICE_CEPT;
			ret_code = s_exec_ssdu_ie ((uchar *)&VN2_SSDU_TELESERVICE_CEPT);

		} else {

			*p_ssdu_val++ = NS_TELESERVICE_NATIONAL;
			ret_code = s_exec_ssdu_ie ((uchar *)&VN2_SSDU_TELESERVICE_NATIONAL);
		}

	}

	return (ret_code);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_llc_protocol_1_ssdu - implements the specific processing
					of a llc protocol layer 1 IE in a SSDU  primitive.

Usage           uchar vn2_llc_protocol_1_ssdu ();

Return value : 	vn2_llc_protocol_1_ssdu returns = OK
											= NOK

Common constants and declarations : ns.h, net_i_s.h

Common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn2_llc_protocol_1_ssdu ()
{

	if (direction == FROM_CALL_CONTROL) {

		if (I_llc_trf_cap == TRF_CAP_UNRESTRICTED) {
			return (r_exec_ssdu_ie ((uchar *)&VN2_SSDU_PROTOCOL_1));

		} else {

			r_exec_ssdu_ie ((uchar *)&VN2_SSDU_PROTOCOL_1_PAD);
			r_exec_ssdu_ie ((uchar *)&VN2_SSDU_LLC_PAD);
			return (r_exec_ssdu_ie ((uchar *)&VN2_SSDU_LLC_2));
		}

	} else {

		if (I_llc_trf_cap == TRF_CAP_UNRESTRICTED) {
			return (s_exec_ssdu_ie ((uchar *)&VN2_SSDU_PROTOCOL_1));

		} else {

			s_exec_ssdu_ie ((uchar *)&VN2_SSDU_PROTOCOL_1_PAD);
			s_exec_ssdu_ie ((uchar *)&VN2_SSDU_LLC_PAD);
			return (s_exec_ssdu_ie ((uchar *)&VN2_SSDU_LLC_2));
		}

	}
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar vn2_llc_ra_ssdu ();

Return value : 	vn2_llc_ra_ssdu returns = OK
									= NOK

Common constants and declarations : ns.h, net_i_s.h

Common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn2_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_llc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				if ((ret_code = r_exec_ssdu_ie((uchar *)&VN2_SSDU_V110)) != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_V120 :
				if ((ret_code = r_exec_ssdu_ie ((uchar *)&VN2_SSDU_V120)) != OK) {
					return (ret_code);
				}
				break;

			default :
				r_exec_ssdu_ie ((uchar *)&VN2_SSDU_LLC_PAD);
				break;
		}
		return (r_exec_ssdu_ie ((uchar *)&VN2_SSDU_LLC_2));

	} else {

		switch (I_llc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				if ((ret_code = s_exec_ssdu_ie((uchar *)&VN2_SSDU_V110)) != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_V120 :
				if ((ret_code = s_exec_ssdu_ie ((uchar *)&VN2_SSDU_V120)) != OK) {
					return (ret_code);
				}
				break;

			default :
				s_exec_ssdu_ie ((uchar *)&VN2_SSDU_LLC_PAD);
				break;
		}

		return (s_exec_ssdu_ie ((uchar *)&VN2_SSDU_LLC_2));

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_uui_protocol_ssdu - implements the specific processing
								  of a UUI IE in a SSDU primitive.

Usage           uchar vn2_uui_protocol_ssdu ();

Return value : 	vn2_uui_protocol_ssdu returns 	= OK
												= NOK

Common constants and declarations : ns.h, net_i_s.h

Common objects : internal data structure ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn2_uui_protocol_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		if ((Call_current_exist) && (Call_uui_rq == OFF)) {

			if (error_set (ERR_U_UUI_PROTOCOL, ie_id, Relative_add) == FATAL) {
					return (NOK);
			}

		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_user_fac_protocol_ssdu - implements the specific processing
								  of a user facility IE in a SSDU primitive.

Usage           uchar vn2_user_fac_protocol_ssdu ();

Return value : 	vn2_user_fac_protocol_ssdu returns 	= OK
													= NOK

Common constants and declarations : ns.h, net_i_s.n

Common objects : internal data structure ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn2_user_fac_protocol_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		if ((Call_current_exist) && (Call_user_fac_rq == OFF)) {

			if (error_set (ERR_U_USER_FAC_PROTOCOL, ie_id, Relative_add) == FATAL) {
					return (NOK);
			}

		}

	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_vn2_table_or_function
#undef Ns_vn2_end_table_or_function
#undef Ns_vn2_tab_ssdu_ie_entry
#undef Ns_vn2_tab_ssdu_ie_mx_entry
#undef Ns_vn2_tab_ssdu_entry

#define Ns_vn2_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_vn2_end_table_or_function		}

#define Ns_vn2_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_vn2_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_vn2_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_vn2
#	define Message_header_ssdu_ie_vn2		Ns_vn2_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_vn2_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_vn2_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_vn2_ssdu ()
{
    uchar   i_pic;

#	include "vn2.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

