
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_spdu.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta description of the FRANCE TELECOM VN2 messages
 * (signalling protocol data unit) .
 *
 *		VN2 specific function :
 *
 *		 vn2_ie_type_eval - implements the evaluation of a conditional
 *					    VN2 IE type : Mandatory or Optional.
 *
 *-------------------------------------------------------------------------*/


/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
*
*SPDU model description :
*------------------------
*
*            spdu    tab_spdu
*    =====================================================
*    | id | event_id | u_n | n_u | type | p_ie | p_ie_SO |
*    |----|----------|-----|-----|------|------|---------|
*    |    |          |     |     |      |  X-------   X-------------------
*    |----|----------|-----|-----|------|------|  |      |               |
*    |    |          |     |     |      |      |  |      |               |
*    |----|----------|-----|-----|------|------|- | -----|               |
*    |    |          |     |     |      |      |  |      |               |
*                                                 |                      |
*                            spdu_ie              |                      |
*            =====================================v====================  |
*            | id | codeset | u_n | n_u | type | lgth_mini |lgth_maxi |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            ----------------                                            |
*                       |                                                |
*                       |                                                |
*                       -------> tab_ie                                  |
*                                                     --------------------
*                                          spdu_ie_so |
*                                        =============v=====================
*                                        | id | codeset | u_n | n_u | type |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*
*/
				/*
					 NET_SPDU.VN2 : description in a meta language  of
					 FRANCE TELECOM VN2 messages.

				*/

				/* VN2 SPDU parametrers description */

CONST	struct spdu_param VN2_SPDU_PARAM = {
	PROTOCOL_DISCRIMINATOR_I451,		/* Protocol discriminator */
	1,									/* BRI call reference length for outgoing SPDU */
	1,									/* BRI call reference minimum length for checking incoming SPDU */
	1,									/* BRI call refernce maximum length for  checking incoming SPDU */
	2,									/* PRI call reference length for outgoing SPDU */
	2,									/* PRI call reference minimum length for checking incoming SPDU */
	2,									/* PRI call reference maximum length for checking incoming SPDU */
	OFF,								/* IE ordered by IE ID only in the SPDU */
	OFF,								/* Locking shift not allowed */
	ON,									/* Non locking shift allowed */
	ON,									/* Null length IE are considered as missing in the SPDU */
	1,									/* Message type maximum length */
	ON,									/* Global call reference value not meaningful */
	OFF,								/* NS segmentation. NOT DEFINED IN VN2. MUST BE SET TO OFF. */
	OFF,								/* NS restart procedure */
	0,									/* Maximum number of restablish Data Link retry */
	16,									/* D channel */
	31									/* Maximum number of B channels */
};

				/*
					FT_VN2 procedure parameters description
					ON approve of the comment / OFF disapprove
				*/

CONST	struct net_proc_param VN2_NET_PROC_PARAM = {
	OFF,								/* Some timers depend from the configuration type (POINT_TO_?) */
	OFF,								/* IE comprehension required procedure is applicable */
	ON,									/* The sending a STATUS message is filtered according the cause value */
	ON,									/* Clear internal call when data link failure */

#	if EQUIPMENT == NT2
		OFF,							/* Internal timers are handled */
#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		OFF,							/* NFAS support */
#	endif

	OFF,								/* NS_INFO_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_FAC_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_NOTIFY_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
};

				/*
					 SPDU message description :
						- information element identifier,
						- information element codeset,
						- call control to D channel transfer (ON or OFF),
						- D channel to call control transfer (ON or OFF),
						- type (Mandatory Optional, Conditional),
						- minimal length,
						- maximal length,
						- number of allowed repetition.
				*/



							/* Alerting (ALERT) */

CONST	struct spdu_ie VN2_ALERT_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	OFF,		OP,		4,		32,		1},
	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		CD,		3,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL},
};

							/* Appel en cours - Call proceeding (CALL_PROC)  */

CONST	struct spdu_ie VN2_CALL_PROC_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		255,	1},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		OFF,		N_U_ALL,	OP,		7,		9,		1},
#	endif

	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		MD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Connexion - Connect (CONNECT) */

CONST	struct spdu_ie VN2_CONN_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		255,	1},
	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		CD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL},
};

							/* Connect acknowledge (CONNECT_ACK) */

CONST	struct spdu_ie VN2_CONN_ACK_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		255,	1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Disconnect (DISCONNECT) */

CONST	struct spdu_ie VN2_DISC_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		32,		1},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		OFF,		N_U_ALL,	OP,		9,		11,		1},
#	endif

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL},
};

							/* Facility (FT_FAC) */

CONST	struct spdu_ie VN2_FAC_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		U_N_ALL,	OFF,		MD,		7,		9,		1},
#	endif

	{IE_NIL},
};

							/* Information (INFO) */

CONST	struct spdu_ie VN2_INFO_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		OFF,		N_U_ALL,	OP,		6,		11,		1},
#	endif

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		82,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	OFF,		CD,		4,		255,	1},
	{IE_NIL},
};

							/* Appel achemin‚ -  (ROUTED_CALL) (PROGRESS) */

CONST	struct spdu_ie VN2_ROUTED_CALL_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */

	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	OP,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};


							/* Liberation - Release (REL) */

CONST	struct spdu_ie VN2_REL_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		32,		1},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		OFF,		N_U_ALL,	OP,		9,		11,		1},
		{SPF_FAC,	CODESET_0,		U_N_ALL,	OFF,		OP,		7,		11,		1},
#	endif

	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		CD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},

#	if NS_SPF_FACILITY == ON
		{CALLED_NB,	CODESET_0,		U_N_ALL,	OFF,		CD,		4,		255,	1},
		{CALLED_SUB_ADD,CODESET_0,	U_N_ALL,	OFF,		OP,		4,		23,		1},
#	endif

	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},

	{IE_NIL},
};

							/* Fin liberation - Release complete (REL_COM) */

CONST	struct spdu_ie VN2_REL_COM_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		32,		1},
	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		CD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Reprise - Resume (RES) */

CONST	struct spdu_ie VN2_RES_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CALL_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		10,		1},
	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		MD,		3,		5,		1},
	{IE_NIL},
};

							/* Accuse recept. reprise - Resume acknowledge (RES_ACK) */

CONST	struct spdu_ie VN2_RES_ACK_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		255,	1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Refus de Reprise - Resume reject (RES_REJ) */

CONST	struct spdu_ie VN2_RES_REJ_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Etablissement - Setup (SETUP) */

CONST	struct spdu_ie VN2_SETUP_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{BC,			CODESET_0,		U_N_ALL,	OFF,		MD,		4,		5,		1},
	{BC,			CODESET_0,      OFF,		N_U_ALL,	MD,		4,		13,		1},
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		255,	1},
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		255,	1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		U_N_ALL,	OFF,		OP,		7,		255,	1},
#	endif

	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		MD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		82,		1},
	{CALLING_NB,	CODESET_0,		U_N_ALL,	OFF,		OP,		4,		22,		1},
	{CALLING_NB,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		22,		2},
	{CALLING_SUB_ADD,CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		23,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		255,	1},
	{CALLED_SUB_ADD,CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		23,		1},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{LLC,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		16,		1},
	{HLC,			CODESET_0,		U_N_ALL,	OFF,		MD,		4,		4,		1},
	{HLC,			CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL},
};

							/* Accuse recpt. Etablissement - Setup acknowledge (SETUP_ACK) */

CONST	struct spdu_ie VN2_SETUP_ACK_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		255,	1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Etat - Status (STATUS) */

CONST	struct spdu_ie VN2_STATUS_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		32,		1},
	{CALL_STATE,	CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Suspension (SUSP) */

CONST	struct spdu_ie VN2_SUSP_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CALL_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		10,		1},
	{IE_NIL},
};

							/* Accuse recept. Suspension - Suspension acknowledge (SUSP_ACK) */

CONST	struct spdu_ie VN2_SUSP_ACK_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Refus Suspension - Suspension reject (SUSP_REJ) */

CONST	struct spdu_ie VN2_SUSP_REJ_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Info usager - User information (USER_INFO) */

CONST	struct spdu_ie VN2_USER_INFO_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{USER_FAC,		CODESET_6,		FG_NT_NET,	FG_NT_NET,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL},
};

CONST	struct spdu_ie_so VN2_USER_INFO_IE_SO[] =	{
/*	   ie			codeset     u ---> n    n ---> u    type */
	{MORE_DATA,		CODESET_0,	FG_NT_NET,	FG_NT_NET,	OP},
	{IE_NIL},
};

							/* Acceptation facilite - Facility acknowledge (FT_FAC_ACK) */

CONST	struct spdu_ie VN2_FAC_ACK_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};
							/* Refus facilite - Facility reject (FT_FAC_REJ) */


CONST	struct spdu_ie VN2_FAC_REJ_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Enregistrement - Registration (REGISTRATION) */

CONST	struct spdu_ie VN2_REG_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */

#if NS_SPF_FACILITY == ON
	{SPF_FAC,		CODESET_0,		U_N_ALL,	OFF,		MD,		4,		26,		1},
#endif

	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		MD,		3,		5,		1},
	{IE_NIL},
};

							/* Acceptation Enregistrement - Registration acknowledgement (REG_ACK) */

CONST	struct spdu_ie VN2_REG_ACK_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */

#if NS_SPF_FACILITY == ON
	{SPF_FAC,		CODESET_0,		OFF,		N_U_ALL,	MD,		4,		26,		1},
#endif

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Refus d'Enregistrement - Registration reject (FT_REG_REJ) */

CONST	struct spdu_ie VN2_REG_REJ_IE[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

/*=========================================================================*/

#define Ns_vn2_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_vn2_end_table_or_function		};

#define Ns_vn2_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)		\
			Ns_tab_spdu_entry (pr, ev, u_n, n_u, usa, t_ie, t_so_ie),

#include "vn2.tab_spdu"		/* include Table describing the primitives */

#define VN2_MX_TAB_SPDU (Rnd_sizeof (VN2_TAB_SPDU) / SPDU_ELEM_SIZE) /* table size */

CONST	uchar	vn2_mx_size_spdu = VN2_MX_TAB_SPDU;

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             vn2_ie_type_eval - implements the evaluation of a conditional
									VN2 IE type : Mandatory or Optional.

Usage            uchar vn2_ie_type_eval (uchar spdu_id_p, uchar ie_id_p);
							- spdu_id_p : SPDU ID,
							- ie_id_p   :  IE ID,

Return value    vn2_ie_type_eval returns the IE type Mandatory or optional.

Common constants and declarations : services.h, ns.h

Common objects : call context

*--------------------------------------------------------------------------*/

uchar vn2_ie_type_eval (spdu_id_p, ie_id_p)
	uchar	spdu_id_p;			/* SPDU ID */
	uchar	ie_id_p;			/* IE ID */
{

	if (! Call_current_exist) return (MD);

	switch (spdu_id_p) {

		case ALERT :
		case CALL_PROC :
		case CONN :
			if ((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) return (MD);
			else return (OP);

		case CONN_ACK :
			return (OP);

		case INFO :
			if (ie_id_p == CALLED_NB) {
				if (Call_state == STATE_OVERLAP_SENDING_2) return (MD);
				else return (OP);
			}

			else Trap (TRAP_IE_TYPE, "vn2_ie_type_eval");

		case REL :
		case REL_COMP :

			switch (ie_id_p) {

				case CAUSE :
					if (Call_rel_flag == ON) return (MD);
					else return (OP);

				case USER_MODE :
					if ((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) return (MD);
					else return (OP);

				case CALLED_NB :
					if (is_ie_i (CODESET_0, SPF_FAC) == PRESENT) return (MD);
					else return (OP);

				default :
					Trap (TRAP_IE_TYPE, "vn2_ie_type_eval");

			}

			/* Inconsistency */

		default :
			Trap (TRAP_IE_TYPE, "vn2_ie_type_eval");

	}

	return (OP);

}

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Table above */

#undef Ns_vn2_table_or_function
#undef Ns_vn2_end_table_or_function
#undef Ns_vn2_tab_spdu_entry

#define Ns_vn2_table_or_function(str, tab)	i_pic = 0;						

#define Ns_vn2_end_table_or_function

#define Ns_vn2_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)						\
			Pic_init_struct_array (VN2_TAB_SPDU, i_pic, p_ie, (struct spdu_ie *)t_ie);	\
			Pic_init_struct_array_next (VN2_TAB_SPDU, p_ie_so, (struct spdu_ie_so *)t_so_ie);

void pic_init_ns_vn2_spdu ()
{
	uchar   i_pic;

#	include "vn2.tab_spdu"
}

#endif /* end of PIC used} */

/*EOF*/
