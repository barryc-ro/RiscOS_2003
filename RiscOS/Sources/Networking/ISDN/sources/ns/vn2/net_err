
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_err.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         vn2_error_handler - implements the centralized processing of the
 *		   error handling procedure  for error conditions detected
 *		   by the Network Signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

					/* PROTOTYPE DECLARATION */

#if NEW_FCT_STYLE == ON
	uchar			vn2_ns_spdu_expected		(void);
	uchar			vn2_ns_spdu_expected_n		(void);
#else
	uchar			vn2_ns_spdu_expected		();
	uchar			vn2_ns_spdu_expected_n		();
#endif

CONST_ARRAY	uchar VN2_TABLE_ERROR [] = {

	 Set_err ( ERR_N_CALL_REF_GLOBAL,				IGNORED),

	 Set_err ( ERR_N_CALL_REF_LGTH,					FATAL),
	 Set_err ( ERR_N_CALL_REF_PAD,					FATAL),
	 Set_err ( ERR_N_CALL_REF_UNKNOWN,				FATAL),
	 Set_err ( ERR_N_CALL_REF_ALREADY_KNOWN,		FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG,					FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_MULTIPOINT,		FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_POINT_TO_POINT,	FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_NO_CALL,			FATAL),
	 Set_err ( ERR_N_CALL_REF_DUMMY,				FATAL),

	 Set_err ( ERR_N_STATUS_CALL_REF,				FATAL),

	 Set_err ( ERR_N_SPDU_TYPE,						FATAL),
	 Set_err ( ERR_N_SPDU_UNEXPECTED,				FATAL),
	 Set_err ( ERR_N_SPDU_LGTH,						FATAL),

	 Set_err ( ERR_N_IE_UNKNOWN,					NON_FATAL),
	 Set_err ( ERR_N_IE_M_MISSING,					FATAL),
	 Set_err ( ERR_N_IE_M_TOO_SHORT,				FATAL),
	 Set_err ( ERR_N_IE_M_TOO_LONG,					FATAL),
	 Set_err ( ERR_N_IE_O_LGTH,						NON_FATAL),
	 Set_err ( ERR_N_IE_SO_TYPE,					NON_FATAL),
	 Set_err ( ERR_N_IE_M_CONTENT,					FATAL),
	 Set_err ( ERR_N_IE_O_CONTENT,					NON_FATAL),
	 Set_err ( ERR_N_IE_OUT_OF_SEQUENCE,			NON_FATAL),
	 Set_err ( ERR_N_IE_REPEATED,					NON_FATAL),
	 Set_err ( ERR_N_NAI,							FATAL),
	 Set_err ( ERR_N_CES,							FATAL),
	 Set_err ( ERR_N_BROADCAST,						FATAL),

	 Set_err ( ERR_I_TE_VAL,						FATAL),

	 Set_err ( ERR_U_SSDU_CODE,						FATAL),
	 Set_err ( ERR_U_PARAM_VAL,						FATAL),
	 Set_err ( ERR_U_MANDATORY_PARAM_MISSING,		FATAL),
	 Set_err ( ERR_U_PARAM_TYPE,					FATAL),
	 Set_err ( ERR_U_PARAM_LGTH,					FATAL),
	 Set_err ( ERR_U_SSDU_UNEXPECTED,				FATAL),
	 Set_err ( ERR_U_NAI,							FATAL),
	 Set_err ( ERR_U_NO_CALL_CTX_AVAILABLE,			FATAL),
	 Set_err ( ERR_U_CALL_CONN_ID_ALREADY_USED,		FATAL),
	 Set_err ( ERR_U_PRIMITIVE_NOT_IMPLEMENTED, 	FATAL),
	 Set_err ( ERR_U_CALL_CONN_ID_UNKNOWN,			FATAL),
	 Set_err ( ERR_U_NON_EXISTENT_CALL,				FATAL),
	 Set_err ( ERR_U_CONGESTION_BUSY,				FATAL),
	 Set_err ( ERR_U_SSDU_IE_INSTANCE_OVERFLOW,		FATAL),

	 Set_err ( ERR_U_USER_FAC_PROTOCOL,				FATAL),
	 Set_err ( ERR_U_UUI_PROTOCOL,					FATAL),
	 Set_err ( ERR_U_NO_TIMER_AVAILABLE,			FATAL),

#	if NS_SEGMENTATION == ON
		Set_err (ERR_N_REASSEMBLY,					FATAL),
		Set_err (ERR_N_SEGMENTER,					FATAL),

#	endif

};

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             vn2_error_handler - implements the centralized procesing of an
				 exception condition.

Usage            uchar vn2_error_handler ();


Description     implements the processing of an error detected in a
				message coming from the network	or in a primitive
				comming from the layer 4 signalling (call processing).

Return value    returns action code =  CONTINUE  continue processing,
									=  STOP      stop processing.

Common constants and declarations   : ns.h

Common objects : call current context

*--------------------------------------------------------------------------*/

uchar vn2_error_handler ()
{
	uchar 	i;												/* loop index */
	uchar 	error_code;										/* error code */
	uchar 	error_diagnostic_1;								/* diagnostics 1 */
	uchar 	error_diagnostic_2;								/* diagnostics 2 */

		/* If no error ---> continue */

	if (nb_error == 0) {
		return (CONTINUE);
	}

		/*  If SETUP - HLC errors ---> ignore the received SPDU - SETUP */

	if (spdu_id == SETUP) {

		for (i = 0; i < nb_error; i++) {

			if ((Error_stack_type (i) 			== ERR_IE) 	&&
				(Error_stack_diagnostic_1 (i) 	== HLC) 	&&
				(Error_stack_diagnostic_2 (i) 	== CODESET_0) &&
				(Error_stack_code (i)           != ERR_N_IE_OUT_OF_SEQUENCE)
			   ) {
				return (STOP);
			}

		}

	}

		/*
		   Search fatal  error code -
		   If not found process the first non-fatal error.
		*/

	for (i = nb_error - 1; i > 0; i--) {
		if (Error_stack_level (i) == FATAL) break;
	}

	error_code			= Error_stack_code (i);
	error_diagnostic_1	= Error_stack_diagnostic_1 (i);
	error_diagnostic_2	= Error_stack_diagnostic_2 (i);

		/* reset error count */

	nb_error			= 0;

		/* dispatch according to the origination message */

	switch (R_msg_from) {

	/*	--------------------------------------------------------
		|                                                      |
		|	    from the D channel side (Data Link entity)     |
		|                                                      |
		--------------------------------------------------------	*/

		case ENT_DL:
		case ENT_DL_D :


				/* Check if error in IE, if so check expected SPDU */

			if (Error_stack_type (i) == ERR_IE) {

#				if EQUIPMENT == TE

					if (vn2_ns_spdu_expected () == NOK) {
						error_code = ERR_N_SPDU_UNEXPECTED;
					}

#				else

					if (Na_fct == FG_NT_TE) {

						if (vn2_ns_spdu_expected_n () == NOK) {
							error_code = ERR_N_SPDU_UNEXPECTED;
						}

					} else if (Na_fct == FG_NT_NET) {

						if (vn2_ns_spdu_expected () == NOK) {
							error_code = ERR_N_SPDU_UNEXPECTED;
						}

					}

#				endif

			}


			switch (error_code) {

					/* -0- Message received on a broadcast connection */

				case ERR_N_BROADCAST :
					return (STOP);

					/* -1- Protocol discriminator error :

							  processed in the ns_rcv function,
							  the message is ignored.
					*/

					/* -2- Message too short :

						When a message is received that is too short to
						contain a complete message type information element,
						that message shall be ignored.
					*/

				case ERR_N_SPDU_LGTH :
						return (STOP);

					/* -3- Call reference error :

						-3.1- Invalid call reference format :

						   a) If the call reference information element octet
							  1 bits 1 through 4 indicates a length greater
							  than the length supported by the receiving
							  equipement, then the message shall be ignored.

						   b) If the call reference information element octet
							  1 bits 5 to 8 are not null, then the message
							  shall be ignored.
					*/

				case ERR_N_CALL_REF_LGTH :
				case ERR_N_CALL_REF_PAD :
						return (STOP);

						/* -3.2- call reference procedural error :

							a) Whenever any message except SEPUP, RELEASE,
							   RELEASE COMPLETE, STATUS or RESUME is received
							   specifying a call reference which is not
							   recognized as relating to a call in progress,
							   clearing is initiated by sending a RELEASE
							   COMPLETE with cause #81 "invalid call
							   reference value", specifying the call reference
							   in the received message.
						*/

				case ERR_N_CALL_REF_UNKNOWN :
				case ERR_N_STATUS_CALL_REF :

					switch (spdu_id) {

							/* b) When a RELEASE message is received that
								  specified a call reference that is not
								  recognized as relating to an active call
								  or to a call in progress, a RELEASE COMPLETE
								  message is return specifying the call
								  reference in the received message.
							*/

						case REL :
							send_release (REL_COMP,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   error_diagnostic_1);
							return (STOP);

							/* c) When a RELEASE COMPLETE message is received
							   specifying a call reference which is not
							   recognised as relating to an active call
							   or to a call in progress no action should be
							   taken.
							*/

						case REL_COMP :
							return (STOP);

						default :
							send_release (REL_COMP,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   error_diagnostic_1
												  );
							return (STOP);

					}

							/* d) When a SETUP, RESUME or a REGISTRATION (FT)
								  message is received specifying a call
								  reference which is not recognised as
								  relating to an active call or to a call
								  in progress, and with a call reference
								  flag incorrectly set to "1", this
								  message shall be ignored.
							*/

#			if EQUIPMENT == TE

				case ERR_N_CALL_REF_FLAG  :

					switch (spdu_id) {

						case SETUP :
							return (STOP);

						default :
							send_release (REL_COMP,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   error_diagnostic_1
												  );
							return (STOP);

					}

#			else

					case ERR_N_CALL_REF_FLAG_MULTIPOINT :
						send_release (REL_COMP,C_C_PROTOCOL_ERROR,
											   C_V_MESSAGE_NOT_COMPATIBLE_101,
											   DIAGNOSTIC_NIL
											  );
						return (STOP);

					case ERR_N_CALL_REF_FLAG_POINT_TO_POINT :
						return (STOP);

					case ERR_N_CALL_REF_FLAG_NO_CALL :
						send_release (REL_COMP,C_C_INVALID_MESSAGE,
											   C_V_INVALID_CALL_REF_81,
											   DIAGNOSTIC_NIL
											  );
						return (STOP);

#			endif

							/* e) When a SETUP message is received specifying
								  a call reference which is recognized as
								  relating to an active call or to a call in
								  progress, this setup message shall be
								  ignored.
							*/

				case ERR_N_CALL_REF_ALREADY_KNOWN :

					if (spdu_id == SETUP) {
						return (STOP);

					} else {

						return (CONTINUE);
					}

						/*
							f) When a message is received using the dummy
								call reference, no action should be taken
						*/

				case ERR_N_CALL_REF_DUMMY :
					return (STOP);

					/* -4- Message type or message sequence error :

						Whenever an unexpected message, except RELEASE or
						RELEASE COMPLETE or unrecognized message is received
						in any state other than the Null state, a status
						message shall be returned with a cause #98
						" message not compatible with the call state or
						message type non-existent or not implemented.
					*/

				case ERR_N_SPDU_TYPE :
				case ERR_N_SPDU_UNEXPECTED :

					switch (spdu_id) {

							/* process if RELEASE, RELEASE COMPLETE or DISCONNECT */

						case REL :
						case REL_COMP :
						case DISC :

							return (CONTINUE);

						default :
							send_state (C_C_PROTOCOL_ERROR,
										C_V_MESSAGE_STATE_INCONSISTENCY_98,
										error_diagnostic_1);
							return (STOP);

					}


					/* -5- General information element errors :

						-5.1- information element out of sequence :

						-5.2- duplicated information element :
								Duplicated IE is then igored,
								the message is processed.
					*/


				case ERR_N_IE_SO_TYPE :
					return (CONTINUE);

				case ERR_N_IE_REPEATED :
					return (CONTINUE);

					/* -6- Mandatory information element error : FT VN2

						-6.1- Mandatory information element missing :

							When a message other then RELEASE COMPLETE is
							received which has one or more mandatory
							information elements missing, no action should
							occur. A status message is then returned with
							cause #96 "mandatory information element is
							missing".

							When a RELEASE COMPLETE message is received with
							a cause IE missing it will be assumed that a
							REALEASE COMPLETE message was received with
							cause #16 "normal release".

					*/

				case ERR_N_IE_M_MISSING :

					switch (spdu_id) {

						case REL_COMP :

							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 P_NIL);
							}
							return (CONTINUE);

						default :


							send_release (REL_COMP,C_C_PROTOCOL_ERROR,
												   C_V_MANDATORY_IE_MISSING_96,
												   error_diagnostic_1);
							return (STOP);

					}


						/* -6.2- Mandatory information element content
								 error :

								 When a message other then SETUP,
								 REGISTRATION, FACILITY, RESUME, or RELEASE
								 COMPLETE is received which has one or more
								 mandatory information elements with invalid
								 content, no action should be taken on the
								 message and no state change should occur.
								 A STATUS message is then returned with cause
								 #100 "invalid information element contents".

								 When in a SETUP message, a mandatory IE has
								 invalid content, the message shall be ignored.

								 When in a RELEASE COMPLETE, a mandatory IE
								 has an invalid content, no message is sent
								 back and the call return to the NULL state.
						*/

				case ERR_N_IE_M_CONTENT :

					switch (spdu_id) {

							/* SETUP : the message shall be ignored */

						case SETUP :
						case RES :

#					if EQUIPMENT == TE
							return (STOP);
#					else
							if (Na_fct == FG_NT_TE) {
								send_release (REL_COMP,C_C_PROTOCOL_ERROR,
													   C_V_INVALID_IE_CONTENT_100,
													   error_diagnostic_1);
							}

							return (STOP);

						case REG :

							if (error_diagnostic_1 == SPF_FAC) {
								Reset_internal_ie ();
								set_i_cause (C_C_PROTOCOL_ERROR,
											 C_V_INVALID_IE_CONTENT_100,
											(char FAR *)&error_diagnostic_1
											);
								Send_to_d_channel (FT_REG_REJ);
								call_clear ();
							}
							return (STOP);

						case SPF_FAC :

							if (error_diagnostic_1 == SPF_FAC) {
								Reset_internal_ie ();
								set_i_cause (C_C_PROTOCOL_ERROR,
											 C_V_INVALID_IE_CONTENT_100,
											 (char FAR *)&error_diagnostic_1
											);
								Send_to_d_channel (FT_FAC_REJ);
							}
							return (STOP);

#					endif

									/*
									   RELEASE COMPLETE : process
									   continue normally with optional values
									   if necessary.
									*/

						case REL_COMP :

							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 P_NIL);
							}
							return (CONTINUE);


						default :

							send_release (REL_COMP,C_C_PROTOCOL_ERROR,
												   C_V_INVALID_IE_CONTENT_100,
												   error_diagnostic_1);
							return (STOP);
					}

							/* -6.3- Information element incorrect length

								When a message other than RELEASE COMPLETE
								is received with a length exceeding the
								maximal length or lower than the minimal
								length, the call is cleared by sending the
								RELEASE COMPLETE message with cause #103
								"incorrect length of a mandatory information
								element".
							*/

				case ERR_N_IE_M_TOO_LONG :
				case ERR_N_IE_M_TOO_SHORT :

					switch (spdu_id) {

						case REL_COMP :

							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 P_NIL);
							}
							return (CONTINUE);

						default :
							send_release (REL_COMP,C_C_PROTOCOL_ERROR,
												   C_V_INCORRECT_MANDATORY_IE_LGTH_103,
												   error_diagnostic_1);
							return (STOP);

					}

					/* -7- Non mandatory (optional) information element
						   errors :

						   -7.1- Unrecognized information element :

								 When a message is received with an or more
								 unrecognized information elements, only
								 the valid elements shall be processed.
								 The user shall not send a STATUS message with a
								 cause "unknown or out of order IE".
					 */

				case ERR_N_IE_UNKNOWN :
				case ERR_N_IE_OUT_OF_SEQUENCE :
					return (CONTINUE);	/* continue processing */

							/* -7.2- Non-mandatory information element
									 content error : same as 7.1
							*/

				case ERR_N_IE_O_CONTENT :
					return (CONTINUE);	/* continue */

							/* -7.3- Non mandatory information element length
									 error :

								When a message is received with a length
								exceeding the maximum length or inferior to
								the minimum	length, the message an the
								valid elements shall be processed.
								The user shall not send a STATUS message with a
								cause "invalid IE content".
							*/

				case ERR_N_IE_O_LGTH :
					return (CONTINUE);	 /* continue */

#				if NS_SEGMENTATION == ON
					case ERR_N_REASSEMBLY :
					case ERR_N_SEGMENTER  :
						return (STOP);
#				endif

				case ERR_N_NAI :
				case ERR_N_CES :
				case ERR_I_TE_VAL :
					return (STOP);

				default :
					Trap (TRAP_NS_ERR_UNEXPECTED, "vn2_err");

			}
			return (STOP);

			/* from Layer 4 Signalling entity */

	/*	-------------------------------------------------------------
		|                                                           |
		|	  from the Call Control side (User entity)   			|
		|                                                           |
		-------------------------------------------------------------	*/

		default :
			send_err_to_user (error_code, error_diagnostic_1, error_diagnostic_2, R_msg_from);

			if (Call_current_exist) {

				switch (ssdu_id) {

					case NS_CONN_RQ :
					case NS_RESUME_RQ :
					case NS_SPF_REGISTRATION_RQ :
						call_clear ();
						break;

					default :
					break;
				}

			}

			return (STOP);

	/*	-----------------------------------------------------
		|													|
		|	  from the Management NS (MNS entity)			|
		|													|
		-----------------------------------------------------	*/

		case ENT_MNS :
			ns_retransmit (MNS_ERR_IN, ENT_MNS);
			return (STOP);
	}

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn2_ns_spdu_expected/_n : checks if the message received from
				the line (DA_xx event) is compatible with the call state
				when an IE coding error is detected.
				(for user side and network side).

Usage           uchar vn2_ns_spdu_expected ();

Return value    OK if compatible,
				NOK otherwise.

Common constants and declarations   : ns.h

Common objects : call current context

*--------------------------------------------------------------------------*/

uchar vn2_ns_spdu_expected ()
{
	uchar call_state;

	call_state = (Call_current_exist) ? Call_state : STATE_NULL_0;

		/*
			1 - Switch according to the event_id
				for events that may occur in any state.
		*/

	switch (event_id) {

		case DA_DISC :
		case DA_REL :
		case DA_REL_COMP :
		case DA_STATUS :

			return (OK);

		case DA_INFO :

			switch (call_state) {

				case STATE_OVERLAP_SENDING_2 :

					if (is_ie_i (CODESET_0, CALLING_NB) == ABSENT) {
						return (NOK);
					}
					break;

				case STATE_CALL_INIT_1 :
				case STATE_REGISTRATION_REQUEST_254 :
				case STATE_CALL_PRESENT_6 :
					return (NOK);
			}
			return (OK);

	}

		/* 2 - Switch according to the call state */

	switch (call_state) {

		case STATE_NULL_0 :

			switch (event_id) {

				case DA_SETUP:
					return (OK);

			}
			return (NOK);

		case STATE_CALL_INIT_1 :

			switch (event_id) {

				case DA_CALL_PROC :
				case DA_SETUP_ACK :
					return (OK);

			}
			return (NOK);

		case STATE_OVERLAP_SENDING_2 :

			switch (event_id) {

				case DA_CALL_PROC :
					return (OK);

			}

			return (NOK);

		case STATE_OUTGOING_CALL_PROC_3 :

			switch (event_id) {

				case DA_ALERT :
				case DA_ROUTED_CALL :
				case DA_CONN :
					return (OK);

			}

			return (NOK);

		case STATE_CALL_DELIVERED_4 :

			switch (event_id) {

				case DA_CONN :
				case DA_USER_INFO :
					return (OK);

			}


		case STATE_CALL_PRESENT_6 :
			return (NOK);

		case STATE_CALL_RECEIVED_7 :

			switch (event_id) {

				case DA_USER_INFO :
					return (OK);

			}
			return (NOK);

		case STATE_CONNECT_REQUEST_8 :

			switch (event_id) {

				case DA_CONN_ACK :
					return (OK);

			}
			return (NOK);

		case STATE_INCOMING_CALL_PROC_9 :
			return (NOK);

		case STATE_ACTIVE_10 :

			switch (event_id) {

				case DA_FAC_ACK :
				case DA_FAC_REJ :

					if (Call_fac_rq != ON) {
						break;
					}

					return (OK);

			}
			return (NOK);

		case STATE_DISCONNECT_REQUEST_11 :

			switch (event_id) {

				case DA_FAC_ACK :
				case DA_FAC_REJ :

					if (Call_fac_rq != ON) {
						break;
					}

					return (OK);

			}
			return (NOK);

		case STATE_DISCONNECT_INDICATION_12 :

			switch (event_id) {

				case DA_FAC_ACK :
				case DA_FAC_REJ :

					if (Call_fac_rq != ON) {
						break;
					}

					return (OK);

			}
			return (NOK);


		case STATE_SUSPEND_REQUEST_15 :

			switch (event_id) {

				case DA_SUSP_ACK :
				case DA_SUSP_REJ :

					return (OK);

				case DA_FAC_ACK :
				case DA_FAC_REJ :

					if (Call_fac_rq != ON) {
						break;
					}

					return (OK);
			}
			return (NOK);

		case STATE_RESUME_REQUEST_17 :

			switch (event_id) {

				case DA_RES_ACK :
				case DA_RES_REJ :
					return (OK);

			}
			return (NOK);

		case STATE_RELEASE_REQUEST_19 :

			switch (event_id) {

				case DA_FAC_ACK :
				case DA_FAC_REJ :

					if (Call_fac_rq != ON) {
						break;
					}

					return (OK);

			}
			return (NOK);

		case STATE_REGISTRATION_REQUEST_254 :

			switch (event_id) {

				case DA_REG_ACK :
				case DA_REG_REJ :
					return (OK);

			}
			return (NOK);

	}

	return (OK);

}

#if EQUIPMENT == NT2

								/*-------------------*/
								/*                   */
								/*   NETWORK SIDE    */
								/*        N          */
								/*-------------------*/


uchar vn2_ns_spdu_expected_n ()
{
	uchar call_state;

	call_state = (Call_current_exist) ? Call_state : STATE_NULL_0;

		/*
			1 - Switch according to the event_id
				for events that may occur in any state.
		*/

	switch (event_id) {

		case DA_DISC :
		case DA_REL :
		case DA_REL_COMP :
		case DA_STATUS :

		case DA_INFO :

			switch (call_state) {

				case STATE_CALL_INIT_1 :
				case STATE_REGISTRATION_REQUEST_254 :
				case STATE_CALL_PRESENT_6 :
					return (NOK);

				default :
					return (OK);

			}

	}

		/* 2 - Switch according to the call state */

	switch (call_state) {

		case STATE_NULL_0 :

			switch (event_id) {

				case DA_SETUP :
				case DA_RES :
				case DA_REG :
					return (OK);

			}
			return (NOK);

		case STATE_CALL_INIT_1 :
			return (NOK);

		case STATE_OVERLAP_SENDING_2 :
			return (NOK);

		case STATE_OUTGOING_CALL_PROC_3 :
			return (NOK);

		case STATE_CALL_DELIVERED_4 :

			switch (event_id) {

				case DA_USER_INFO :
					return (OK);

			}
			return (NOK);

		case STATE_CALL_PRESENT_6 :

			if ((Na_connection == POINT_TO_MULTIPOINT) && (Na_fct == FG_NT_TE)) {

				Call_ces = DL_CES_NIL;

				switch (event_id) {

						/* RELEASE */

					case DA_REL :
					case DA_CALL_PROC :
					case DA_ALERT :
					case DA_CONN :
						return (OK);

				}

			} else {

				/* Point to point configuration */

				switch (event_id) {

					case DA_CALL_PROC :
					case DA_ALERT :
					case DA_CONN :
						return (OK);

				}

			}
			return (NOK);

		case STATE_CALL_RECEIVED_7 :

			if ((Na_connection == POINT_TO_MULTIPOINT) && (Na_fct == FG_NT_TE)) {

				switch (event_id) {

					case DA_REL :
					case DA_ALERT :
					case DA_CONN :
					case DA_USER_INFO :
						return (OK);

				}

			} else {

					/* Point to point configuration */

				switch (event_id) {

					case DA_REL :
					case DA_USER_INFO :
						return (OK);

				}

			}
			return (NOK);

		case STATE_CONNECT_REQUEST_8 :

				/* Point to Multipoint configuration */

			if ((Na_connection == POINT_TO_MULTIPOINT) && (Na_fct == FG_NT_TE)) {

				switch (event_id) {

					case DA_REL :
					case DA_ALERT :
					case DA_CONN :
						return (OK);

				}

			} else {

				/* Point to point configuration */

			}
			return (NOK);

		case STATE_INCOMING_CALL_PROC_9 :

			switch (event_id) {

				case DA_ALERT :
				case DA_CONN :
					return (OK);

			}
			return (NOK);

		case STATE_ACTIVE_10 :

				/* Point to Multipoint configuration */

			if ((Na_connection == POINT_TO_MULTIPOINT) && (Na_fct == FG_NT_TE)) {

				switch (event_id) {

					case DA_REL :
					case DA_ALERT :
					case DA_CONN :
					case DA_SUSP :
					case DA_FAC :
						return (OK);

				}

			}
			return (NOK);

		case STATE_DISCONNECT_REQUEST_11 :

			switch (event_id) {

				case DA_FAC :
					return (OK);

			}
			return (NOK);

		case STATE_DISCONNECT_INDICATION_12 :

			switch (event_id) {

				case DA_FAC :
					return (OK);

			}
			return (NOK);

		case STATE_SUSPEND_REQUEST_15 :

			switch (event_id) {

				case DA_FAC :
					return (OK);

			}
			return (NOK);

		case STATE_RESUME_REQUEST_17 :
			return (NOK);

		case STATE_RELEASE_REQUEST_19 :

			switch (event_id) {

				case DA_FAC :
					return (OK);

			}
			return (NOK);

		case STATE_REGISTRATION_REQUEST_254 :
			return (NOK);

	}

	return (OK);

}

#endif /* NT2 */

/*EOF*/
