
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_n2.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *			vn2_automata_1	-
 *
 *			vn2_pr_spdu_id	-
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

void vn2_automata_1 ()
{
				/* Automata Nø 1 */

	switch (state) {

		case STATE_CALL_INIT_1 :
			*(p_info++) = CALL_PROC;

			*(p_info++) = CHAN_ID;
			*(p_info++) = 1;
			*(p_info++) = G_8 (1,0,0,0,1,0,1,0);

			state = STATE_OUTGOING_CALL_PROC_3;
			break;

		case STATE_OUTGOING_CALL_PROC_3 :
			*(p_info++) = CONN;
			state = STATE_ACTIVE_10;
			break;

		case STATE_ACTIVE_10 :
			*(p_info++) = DISC;

			*(p_info++) = CAUSE;
			*(p_info++) = 2;
			*(p_info++) = G_8 (1,0,0,0,0,1,1,1);
			*(p_info++) = G_8 (1,0,0,1,0,0,0,0);

			*(p_info++) = SPF_FAC;
			*(p_info++) = 7;
			*(p_info++) = 0;
			Memcpy_far ((char FAR *)p_info, (char FAR *)"24*", 3);
			p_info += 3;
			*p_info++ = 1;
			*p_info++ = 2;
			*p_info++ = 3;

			state = STATE_DISCONNECT_REQUEST_11;
			break;

		case STATE_DISCONNECT_REQUEST_11 :
			*(p_info++) = REL_COMP;

			state = STATE_CALL_INIT_1;
			break;

	}

}

/*-------------------------------------------------------------------------*/

void vn2_pr_spdu_id ()
{

	fprintf (f_out, "\n                   SPDU message ID\n");

		/* Call establishment spdu event */

	fprintf (f_out, "\n       %c = ALERT",DA_ALERT);
	fprintf (f_out,                     "                    %c = CALL_PROC",DA_CALL_PROC);
	fprintf (f_out, "\n       %c = CONN",DA_CONN);
	fprintf (f_out,                    "                     %c = CONN_ACK",DA_CONN_ACK);
	fprintf (f_out, "\n       %c = SET_UP",DA_SETUP);
	fprintf (f_out,                      "                   %c = SETUP_ACK",DA_SETUP_ACK);
	fprintf (f_out, "\n       %c = ROUTED_CALL",DA_ROUTED_CALL);

		/* Call information phase spdu event */

	fprintf (f_out,                           "              %c = RES",DA_RES);
	fprintf (f_out, "\n       %c = RES_ack",DA_RES_ACK);
	fprintf (f_out,                       "                  %c = RES_REJ",DA_RES_REJ);
	fprintf (f_out, "\n       %c = SUSP",DA_SUSP);
	fprintf (f_out,                    "                     %c = SUSP_ACK",DA_SUSP_ACK);
	fprintf (f_out, "\n       %c = SUSP_REJ",DA_SUSP_REJ);
	fprintf (f_out,                        "                 %c = USER_INFO",DA_USER_INFO);

		/* Clear call spdu event */

	fprintf (f_out, "\n       %c = DISC",DA_DISC);
	fprintf (f_out,                    "                     %c = REL",DA_REL);
	fprintf (f_out, "\n       %c = REL_COMP",DA_REL_COMP);

		/* Miscellaneous spdu event */

	fprintf (f_out,                        "                 %c = FAC",DA_FAC);
	fprintf (f_out, "\n       %c = FAC_ACK",DA_FAC_ACK);
	fprintf (f_out,                       "                  %c = FAC_REJ",DA_FAC_REJ);
	fprintf (f_out, "\n       %c = INFO",DA_INFO);
	fprintf (f_out,                    "                     %c = REG",DA_REG);
	fprintf (f_out, "\n       %c = REG_ACK",DA_REG_ACK);
	fprintf (f_out,                       "                  %c = REG_REJ",DA_REG_REJ);
	fprintf (f_out, "\n       %c = STATUS",DA_STATUS);
	
	fprintf (f_out, "\n\n       %c = UNKNOWN SPDU ID",DA_SPDU_ID_UNKNOWN);
	fprintf (f_out,                       "                  %c = HEXA CODING",DA_HEXA_CODING);

		/* Case suite */

	fprintf (f_out,                               "          1 to 9 = test suite number");
	fprintf (f_out,"\n\n if upper case ---> erroneous message");

	fprintf (f_out,"\n\n");
}

/*EOF*/
