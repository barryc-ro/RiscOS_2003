
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS VN2 macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


			/*
			   MACROs and DECLARATIONS used to access the Network
			   Signalling entity (NS) from the Call Control entity (CC).
			*/


/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_vn2_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_vn2_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(vn2_,pr), p_off)
#define Isdn_init_vn2_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_vn2(pr,ie)					Get_ie 			(Paste(vn2_,pr), Paste (vn2_, ie))
#define	Isdn_get_val_vn2(pr,ie,fld)			Isdn_get_val	(Paste(vn2_,pr), Paste (vn2_, ie), fld)
#define Isdn_p_str_vn2(pr,ie,fld)			Isdn_p_str		(Paste(vn2_,pr), Paste (vn2_, ie), fld)
#define	Isdn_lgth_str_vn2(pr,ie,fld)		Isdn_lgth_str	(Paste(vn2_,pr), Paste (vn2_, ie), fld)
#define	Isdn_mx_lgth_str_vn2(pr,ie,fld)		Isdn_mx_lgth_str(Paste(vn2_,pr), Paste (vn2_, ie), fld)
#define	P_start_val_ns_vn2(pr,ie)			P_start_val_ns	(Paste(vn2_,pr), Paste (vn2_, ie))
#define	P_val_ns_vn2(ie)					P_val_ns		(Paste(vn2_,ie))
#define Set_offset_vn2(pr,ie)				Set_offset		(Paste(vn2_,pr),Paste(vn2_,ie))
#define	Set_next_ie_vn2(ie)					Set_next_ie		(Paste(vn2_,ie))
#define	Set_val_vn2(ie,fld,val)				Set_val			(Paste(vn2_,ie), fld, val)
#define Set_str_vn2(ie, lv, p_str, mx_sz)	Set_str			(Paste(vn2_,ie), lv, p_str, mx_sz)
#define Set_mem_vn2(ie, lv, p_mem, sz)		Set_mem			(Paste(vn2_,ie), lv, p_mem, sz)
#define	Set_val_nil_vn2(ie)					Set_val_nil		(Paste(vn2_,ie))
#define Set_to_next_ie_instance_vn2(pr,ie)	Set_to_next_ie_instance (Paste(vn2_,pr), Paste (vn2_, ie))
#define Get_remaining_ie_instance_nb_vn2(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(vn2_,pr), Paste (vn2_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_vn2	ns_offset_t vn2_message_header;
#else
#	define Message_header_offset_vn2
#endif

/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interface */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

		/*    - 1 - primitives as seen from TERMINAL side    */


		/* NS_TE_CONN_RQ */

struct off_ns_vn2_te_conn_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_bc;						/* bearer capability */
	ns_offset_t vn2_chan_id;				/* channel ID */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn2_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn2_calling_nb;				/* calling number */
	ns_offset_t vn2_calling_sub_add;		/* calling sub-address */
	ns_offset_t vn2_called_nb;				/* called number */
	ns_offset_t vn2_called_sub_add;			/* called sub-address */
	ns_offset_t vn2_llc;					/* low layer compatibility */
	ns_offset_t vn2_hlc;					/* high layer compability */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_CONN_IN */

struct off_ns_vn2_te_conn_in {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_bc;						/* bearer capability */
	ns_offset_t vn2_chan_id;				/* channel ID */
	ns_offset_t vn2_display;				/* display */
	ns_offset_t vn2_calling_nb;				/* calling number (from network) */
	ns_offset_t vn2_calling_sub_add;		/* calling subaddress */
	ns_offset_t vn2_called_nb;				/* called number */
	ns_offset_t vn2_called_sub_add;			/* called subaddress */
	ns_offset_t vn2_llc;					/* low layer capability */
	ns_offset_t vn2_hlc;					/* high layer compatibility */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_CONN_RS */

struct off_ns_vn2_te_conn_rs {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_chan_id;				/* channel ID */
	ns_offset_t vn2_user_fac;				/* user to user facility */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_CONN_CO */

struct off_ns_vn2_te_conn_co {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_chan_id;				/* channel ID */
	ns_offset_t vn2_display;				/* display */
	ns_offset_t vn2_user_fac;				/* user to user facility */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_CLEAR_RQ */

struct off_ns_vn2_te_clear_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_cause;					/* cause */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn2_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn2_called_nb;				/* called number */
	ns_offset_t vn2_called_sub_add;			/* called sub-address */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_CLEAR_IN */

struct off_ns_vn2_te_clear_in {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_cause;					/* cause */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn2_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn2_display;				/* display */
	ns_offset_t vn2_user_fac;				/* user to user facility */
	ns_offset_t vn2_uui;					/* user to user information */
};
		/* NS_TE_CLEAR_RS */

struct off_ns_vn2_te_clear_rs {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_cause;					/* cause */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn2_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn2_called_nb;				/* called number */
	ns_offset_t vn2_called_sub_add;			/* called sub-address */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_CLEAR_CO */

struct off_ns_vn2_te_clear_co {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_cause;					/* cause */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn2_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn2_display;				/* display */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_SETUP_ACK_RQ */

struct off_ns_vn2_te_setup_ack_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_chan_id;				/* channel ID */
};

		/* NS_TE_SETUP_ACK_IN */

struct off_ns_vn2_te_setup_ack_in {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_chan_id;				/* channel ID */
	ns_offset_t vn2_display;				/* display */
};

		/* NS_TE_CALL_PROC_RQ */

struct off_ns_vn2_te_call_proc_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_chan_id;				/* channel ID */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn2_spf_fac;			/* network specific facility */
#	endif

};

		/* NS_TE_CALL_PROC_IN */

struct off_ns_vn2_te_call_proc_in {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_chan_id;				/* channel ID */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn2_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn2_display;				/* display */
};

		/* NS_TE_ALERT_RQ */

struct off_ns_vn2_te_alert_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_cause;					/* cause */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_ALERT_IN */

struct off_ns_vn2_te_alert_in {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_display;				/* display */
	ns_offset_t vn2_uui;					/* user to user information */
};

		/* NS_TE_ROUTED_CALL_IN */

struct off_ns_vn2_te_routed_call_in {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_cause;					/* cause */
	ns_offset_t vn2_display;				/* display */
};

		/* NS_TE_INFO_RQ */

struct off_ns_vn2_te_info_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_keypad;					/* keypad */
	ns_offset_t vn2_called_nb;				/* called number */
};

		/* NS_TE_INFO_IN */

struct off_ns_vn2_te_info_in {
	Message_header_offset_vn2				/* message header parameters */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn2_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn2_display;				/* display */
};

		/* NS_TE_USER_INFO_RQ */

struct off_ns_vn2_te_user_info_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_user_fac;				/* user to user facility */
	ns_offset_t vn2_uui;					/* user to user information */
	ns_offset_t vn2_more_data;				/* more data */
};

		/* NS_TE_USER_INFO_IN */

struct off_ns_vn2_te_user_info_in {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_user_fac;				/* user to user facility */
	ns_offset_t vn2_uui;					/* user to user information */
	ns_offset_t vn2_more_data;				/* more data */
};

		/* NS_TE_SUSPEND_RQ */

struct off_ns_vn2_te_suspend_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_call_id;				/* call identity */
};

		/* NS_TE_SUSPEND_CO */

struct off_ns_vn2_te_suspend_co {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_cause;					/* cause */
	ns_offset_t vn2_display;				/* display */
};

		/* NS_TE_RESUME_RQ */

struct off_ns_vn2_te_resume_rq {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_call_id;				/* call identity */
};

		/* NS_TE_RESUME_CO */

struct off_ns_vn2_te_resume_co {
	Message_header_offset_vn2				/* message header parameters */
	ns_offset_t vn2_chan_id;				/* channel ID */
	ns_offset_t vn2_cause;					/* cause */
	ns_offset_t vn2_display;				/* display */
};

#if NS_SPF_FACILITY == ON

			/* NS_TE_SPF_FACILITY_RQ */

	struct off_ns_vn2_te_spf_facility_rq {
		Message_header_offset_vn2			/* message header parameters */
		ns_offset_t vn2_spf_fac;			/* specific facility */
	};

			/* NS_TE_SPF_FACILITY_CO */

	struct off_ns_vn2_te_spf_facility_co {
		Message_header_offset_vn2			/* message header parameters */
		ns_offset_t vn2_cause;				/* cause */
		ns_offset_t vn2_display;			/* display */
	};

			/* NS_TE_SPF_REGISTRATION_RQ */

	struct off_ns_vn2_te_spf_reg_rq {
		Message_header_offset_vn2			/* message header parameters */
		ns_offset_t vn2_spf_fac;			/* network specific facility */
	};

			/* NS_TE_SPF_REGISTRATION_CO */

	struct off_ns_vn2_te_spf_reg_co {
		Message_header_offset_vn2			/* message header parameters */
		ns_offset_t vn2_cause;				/* cause */
		ns_offset_t vn2_spf_fac;			/* network specific facility */
		ns_offset_t vn2_display;			/* display */
	};

#endif

		/*---------------------------------------------------**
		**                                                   **
		**         structures of the offset areas            **
		**                                                   **
		**          according to TE or NET side              **
		**                                                   **
		**---------------------------------------------------*/


		/*   - 2 - primitives as seen from TE or NT sides   */



		/* NS_CONN_RQ */

typedef struct off_ns_vn2_te_conn_rq				off_ns_vn2_conn_rq;
typedef struct off_ns_vn2_te_conn_in				off_ns_vn2_net_conn_rq;

		/* NS_CONN_IN */

typedef struct off_ns_vn2_te_conn_in				off_ns_vn2_conn_in;
typedef struct off_ns_vn2_te_conn_rq				off_ns_vn2_net_conn_in;

		/* NS_CONN_RS */

typedef struct off_ns_vn2_te_conn_rs				off_ns_vn2_conn_rs;
typedef struct off_ns_vn2_te_conn_co				off_ns_vn2_net_conn_rs;

		/* NS_CONN_CO */

typedef struct off_ns_vn2_te_conn_co				off_ns_vn2_conn_co;
typedef struct off_ns_vn2_te_conn_rs				off_ns_vn2_net_conn_co;

		/* NS_CLEAR_RQ */

typedef struct off_ns_vn2_te_clear_rq				off_ns_vn2_clear_rq;
typedef struct off_ns_vn2_te_clear_in				off_ns_vn2_net_clear_rq;

		/* NS_CLEAR_IN */

typedef struct off_ns_vn2_te_clear_in				off_ns_vn2_clear_in;
typedef struct off_ns_vn2_te_clear_rq				off_ns_vn2_net_clear_in;

		/* NS_CLEAR_RS */

typedef struct off_ns_vn2_te_clear_rs				off_ns_vn2_clear_rs;
typedef struct off_ns_vn2_te_clear_co				off_ns_vn2_net_clear_rs;

		/* NS_CLEAR_CO */

typedef struct off_ns_vn2_te_clear_co				off_ns_vn2_clear_co;
typedef struct off_ns_vn2_te_clear_rs				off_ns_vn2_net_clear_co;

		/* NS_SETUP_ACK_RQ */

typedef struct off_ns_vn2_te_setup_ack_rq			off_ns_vn2_setup_ack_rq;
typedef struct off_ns_vn2_te_setup_ack_in			off_ns_vn2_net_setup_ack_rq;

		/* NS_SETUP_ACK_IN */

typedef struct off_ns_vn2_te_setup_ack_in			off_ns_vn2_setup_ack_in;
typedef struct off_ns_vn2_te_setup_ack_rq			off_ns_vn2_net_setup_ack_in;

		/* NS_CALL_PROC_RQ */

typedef struct off_ns_vn2_te_call_proc_rq			off_ns_vn2_call_proc_rq;
typedef struct off_ns_vn2_te_call_proc_in			off_ns_vn2_net_call_proc_rq;

		/* NS_CALL_PROC_IN */

typedef struct off_ns_vn2_te_call_proc_in			off_ns_vn2_call_proc_in;
typedef struct off_ns_vn2_te_call_proc_rq			off_ns_vn2_net_call_proc_in;

		/* NS_ALERT_RQ */

typedef struct off_ns_vn2_te_alert_rq				off_ns_vn2_alert_rq;
typedef struct off_ns_vn2_te_alert_in				off_ns_vn2_net_alert_rq;

		/* NS_ALERT_IN */

typedef struct off_ns_vn2_te_alert_in				off_ns_vn2_alert_in;
typedef struct off_ns_vn2_te_alert_rq				off_ns_vn2_net_alert_in;

		/* NS_ROUTED_CALL_IN */

typedef struct off_ns_vn2_te_routed_call_in			off_ns_vn2_routed_call_in;

		/* NS_ROUTED_CALL_RQ */

typedef struct off_ns_vn2_te_routed_call_in			off_ns_vn2_net_routed_call_rq;

		/* NS_INFO_RQ */

typedef struct off_ns_vn2_te_info_rq				off_ns_vn2_info_rq;
typedef struct off_ns_vn2_te_info_in				off_ns_vn2_net_info_rq;

		/* NS_INFO_IN */

typedef struct off_ns_vn2_te_info_in				off_ns_vn2_info_in;
typedef struct off_ns_vn2_te_info_rq				off_ns_vn2_net_info_in;

		/* NS_USER_INFO_RQ */

typedef struct off_ns_vn2_te_user_info_rq			off_ns_vn2_user_info_rq;
typedef struct off_ns_vn2_te_user_info_in			off_ns_vn2_net_user_info_rq;

		/* NS_USER_INFO_IN */

typedef struct off_ns_vn2_te_user_info_in			off_ns_vn2_user_info_in;
typedef struct off_ns_vn2_te_user_info_rq			off_ns_vn2_net_user_info_in;

		/* NS_SUSPEND_RQ */

typedef struct off_ns_vn2_te_suspend_rq				off_ns_vn2_suspend_rq;

		/* NS_SUSPEND_IN */

typedef struct off_ns_vn2_te_suspend_rq				off_ns_vn2_net_suspend_in;

		/* NS_SUSPEND_RS */

typedef struct off_ns_vn2_te_suspend_co				off_ns_vn2_net_suspend_rs;

		/* NS_SUSPEND_CO */

typedef struct off_ns_vn2_te_suspend_co				off_ns_vn2_suspend_co;

		/* NS_RESUME_RQ */

typedef struct off_ns_vn2_te_resume_rq				off_ns_vn2_resume_rq;

		/* NS_RESUME_IN */

typedef struct off_ns_vn2_te_resume_rq				off_ns_vn2_net_resume_in;

		/* NS_RESUME_RS */

typedef struct off_ns_vn2_te_resume_co				off_ns_vn2_net_resume_rs;

		/* NS_RESUME_CO */

typedef struct off_ns_vn2_te_resume_co				off_ns_vn2_resume_co;

#if NS_SPF_FACILITY == ON

			/* NS_SPF_FACILITY_RQ */

	typedef struct off_ns_vn2_te_spf_facility_rq	off_ns_vn2_spf_facility_rq;

			/* NS_SPF_FACILITY_IN */

	typedef struct off_ns_vn2_te_spf_facility_rq	off_ns_vn2_net_spf_facility_in;

			/* NS_SPF_FACILITY_RS */

	typedef struct off_ns_vn2_te_spf_facility_co	off_ns_vn2_net_spf_facility_rs;

			/* NS_SPF_FACILITY_CO */

	typedef struct off_ns_vn2_te_spf_facility_co	off_ns_vn2_spf_facility_co;

			/* NS_SPF_REGISTRATION_RQ */

	typedef struct off_ns_vn2_te_spf_reg_rq off_ns_vn2_spf_reg_rq;

			/* NS_SPF_REGISTRATION_IN */

	typedef struct off_ns_vn2_te_spf_reg_rq off_ns_vn2_net_spf_reg_in;

			/* NS_SPF_REGISTRATION_RS */

	typedef struct off_ns_vn2_te_spf_reg_co off_ns_vn2_net_spf_reg_rs;

			/* NS_SPF_REGISTRATION_CO */

	typedef struct off_ns_vn2_te_spf_reg_co off_ns_vn2_spf_reg_co;

#endif



		/* Information Element values structure */

		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/

		/* Bearer Capability (BC) */

struct val_ns_vn2_bc {
	Next_instance_offset
	ie_val 		trf_cap;				/* transfer mode transfer capability */
};

		/* Call IDentification (CALL_ID) */

struct val_ns_vn2_call_id {
	Next_instance_offset
	ie_array 	value[VN2_MX_SZ_CALL_ID+2];	/* call identity */
};

#if NS_SPF_FACILITY == ON

			/* Network Specific Facility (SPF_FAC) */

	struct val_ns_vn2_spf_fac {
		Next_instance_offset
		ie_val 		action;				/* REQUEST : activate, clear or enquiry
										   INDICATION : transmission, acknowledgment, reject */
		ie_val 		code;				/* facility code */
		uchar		pad[VN2_SPF_FAC_PAD_SIZE];
		long 		charging;			/* charging value */
		ie_array 	nb[VN2_MX_SZ_CALLED_NB+2];	/* called number */
	};

#endif

		/* Called party number (CALLED_NB) */

struct val_ns_vn2_called_nb {
	Next_instance_offset
	ie_val   	nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_array 	nb[VN2_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_vn2_called_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* called subaddress type */
	ie_array 	sub_add[VN2_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_vn2_calling_nb {
	Next_instance_offset
	ie_val  	nb_type;				/* numbering type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[VN2_MX_SZ_CALLING_NB+2];		/* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_vn2_calling_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* calling subaddress type */
	ie_array 	sub_add[VN2_MX_SZ_CALLING_SUB_ADD+2];	/* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_vn2_cause {
	Next_instance_offset
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
	ie_val		cause_loc;				/* cause location */
	ie_array	cause_diag[VN2_MX_SZ_CAUSE_DIAG+2];	/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_vn2_chan_id {
	Next_instance_offset
	ie_val		int_type;				/* interface type */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val 		chan_nb;				/* channel number */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_vn2_hlc {
	Next_instance_offset
	ie_val		hlc_id_code;			/* hlc identification coding standard */
	ie_val		teleservice;			/* hlc identification */
};

		/* Keypad */

struct val_ns_vn2_keypad {
	Next_instance_offset
	ie_array 	text[VN2_MX_SZ_KEYPAD+2];		/* keypad information */
};

		/* Display */

struct val_ns_vn2_display {
	Next_instance_offset
	ie_array 	text[VN2_MX_SZ_DISPLAY+2];	/* display information */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_vn2_llc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* origination to destination transfer rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
		ie_val	syn_asyn;				/* synchronous/asynchronous */
		ie_val	negociation;			/* negociation */
		ie_val	user_rate;				/* user rate */
		ie_val	inter_rate;				/* intermediate rate */
		ie_val	nic_tx;					/* network independent clock on transmission (Tx) */
		ie_val	nic_rx;					/* network independent clock on reception (Rx) */
		ie_val	fc_tx;					/* flow control on transmission (Tx) */
		ie_val	fc_rx;					/* flow control on reception (Rx) */
		ie_val	stop_bit;				/* number of stop bits */
		ie_val	data_bit;				/* number of data bits excluding parity if present */
		ie_val	parity;					/* parity information */
		ie_val	duplex;					/* duplex mode */
		ie_val	modem;					/* modem type */
	ie_val		protocol_id_2;			/* user information layer 2 protocol */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
};

		/* User-to-user information (UUI) */

struct val_ns_vn2_uui {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array	text[VN2_MX_SZ_UUI+2];		/* user information */
};

		/* User to user facility (USER_FAC) */

struct val_ns_vn2_user_fac {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array 	text[VN2_MX_SZ_USER_FAC+1];	/* user to user facility */
};

		/* Progress indicator (PROGRESS_IND) */

struct val_ns_vn2_progress_ind {
	Next_instance_offset
	ie_val 		progress_descr;			/* progress description */
};

#if NS_IE_TSP_OUT == ON

			/* Definitions for compilation purpose only */

	struct val_ns_vn2_more_data {
		Next_instance_offset
		ie_val	unused;
	};


#endif

/***************************************************************************/

							/* Information Elements (IE) */


			/*
			   Isdn_vn2_store_bc : store the bearer capability information
								   element :

					INPUT :
						- pr		= primitive ID,
						- trf_cap_	= transfer capability.
			*/

#define Isdn_vn2_store_bc(pr, trf_cap_)						\
				Set_offset_vn2	(pr,	bc);					\
				Set_val_vn2		(bc,	trf_cap,	trf_cap_);	\
				Set_next_ie_vn2	(bc)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_vn2_store_chan_id : store channel ID IE

					INPUT :
						- pr 		= primitive ID,
						- int_type_	= interface type,
						- pref 		= preferred channel,
						- chan_sel_	= channel selection,
						- chan_nb_	= channel number.
			*/

#define Isdn_vn2_store_chan_id(pr, int_type_, pref, chan_sel_, chan_nb_)	\
				Set_offset_vn2	(pr,		chan_id);				\
				Set_val_vn2		(chan_id,	int_type,	int_type_);		\
				Set_val_vn2		(chan_id,	pref_excl,	pref);		\
				Set_val_vn2		(chan_id,	chan_sel,	chan_sel_);	\
				Set_val_vn2		(chan_id,	chan_nb,	chan_nb_);	\
				Set_next_ie_vn2	(chan_id)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_spf_fac : store facility

					INPUT :
						- pr 	= primitive ID,
						- val 	= facility value.
			*/

#define Isdn_vn2_store_spf_fac(pr, action_p , code_p, p_string) \
		Set_offset_vn2	(pr,		spf_fac);						\
		Set_val_vn2		(spf_fac,	action,	action_p);				\
		Set_val_vn2		(spf_fac,	code,	code_p);				\
		Set_str_vn2		(spf_fac,	nb,		p_string,	VN2_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_calling_nb
				Isdn_vn2_store_calling_nb_u : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nbering_type   	= numbering type,
						- nbering_plan_id	= numbering plan ID,
						- screening_ind    	= screening indicator,
						- p_string  		= pointer on the calling number literal string.
			*/

#define Isdn_vn2_store_calling_nb(pr, nbering_type, nbering_plan_id, screening_ind, p_string) \
		Set_offset_vn2	(pr,			calling_nb);						\
		Set_val_vn2		(calling_nb,	nb_type, 		nbering_type);		\
		Set_val_vn2		(calling_nb,	plan_id, 		nbering_plan_id);	\
		Set_val_vn2		(calling_nb,	screen_ind, 	screening_ind);		\
		Set_str_vn2		(calling_nb,	nb, 			p_string, 			VN2_MX_SZ_CALLING_NB+1)

		/*	This Macro is now identical to the previous one
			and is defined for compatibility with older versions */

#define Isdn_vn2_store_calling_nb_u		Isdn_vn2_store_calling_nb

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_vn2_calling_sub_add : calling sub-address IE

						INPUT :
							- pr			= primitive ID,
							- sub_add_type_	= subaddress type,
							- p_string		= address of the subaddress literal string.

			*/

#define Isdn_vn2_store_calling_sub_add(pr, sub_add_type_, p_string)			\
		Set_offset_vn2	(pr,				calling_sub_add);					\
		Set_val_vn2		(calling_sub_add,	sub_add_type,		sub_add_type_);	\
		Set_str_vn2		(calling_sub_add,	sub_add,			p_string, VN2_MX_SZ_CALLING_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_called_nb : called number IE

					INPUT :
						- pr			= primitive ID,
						- nbering_type	= numbering type
						- p_string		= address of the literal string.
			*/

#define Isdn_vn2_store_called_nb(pr, nbering_type, nbering_plan_id, p_string) 	\
		Set_offset_vn2	(pr,		called_nb);										\
		Set_val_vn2		(called_nb,	nb_type,	nbering_type);						\
		Set_val_vn2		(called_nb,	plan_id,	nbering_plan_id);					\
		Set_str_vn2		(called_nb,	nb,			p_string,			VN2_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_called_sub_add : called sub-address IE

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- p_string		= address of the literal string.

			*/

#define Isdn_vn2_store_called_sub_add(pr, sub_add_type_, p_string) 		\
		Set_offset_vn2	(pr,				called_sub_add);				\
		Set_val_vn2		(called_sub_add,	sub_add_type,	sub_add_type_);	\
		Set_str_vn2 	(called_sub_add,	sub_add,		p_string,	VN2_MX_SZ_CALLED_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_llc_no_ra : low layer compatibility IE
										   without RA.

					INPUT :
						- pr		 = primitive ID,
						- cap        = transfer capability,
						- mode       = transfer mode,
						- rate       = transfer rate,
						- struct     = structure,
						- protocol_1 = protocol ID layer 1,
						- protocol_2 = protocol ID layer 2,
						- protocol_3 = protocol ID layer 3.

			*/

#define Isdn_vn2_store_llc_no_ra(pr, cap, mode , rate, structur , protocol_1, protocol_2 , protocol_3) \
				Set_offset_vn2 	(pr,	llc);						\
				Set_val_nil_vn2	(llc);								\
				Set_val_vn2 	(llc,	trf_cap,		cap);		\
				Set_val_vn2 	(llc,	trf_mode,		mode);		\
				Set_val_vn2 	(llc,	trf_rate,		rate);		\
				Set_val_vn2 	(llc,	structure,		structur);	\
				Set_val_vn2 	(llc,	dest_rate,		rate);		\
				Set_val_vn2 	(llc,	protocol_id_1,	protocol_1);\
				Set_val_vn2 	(llc,	protocol_id_2,	protocol_2);\
				Set_val_vn2 	(llc,	protocol_id_3,	protocol_3);\
				Set_next_ie_vn2	(llc)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_vn2_store_llc_transparent : low layer compatibility IE
												   transparent 64 kbit/s.

					INPUT :
						- protocol_1 = protocol ID layer 1,
						- protocol_2 = protocol ID layer 2,
						- protocol_3 = protocol ID layer 3.

			*/

#define Isdn_vn2_store_llc_transparent(pr, protocol_1, protocol_2, protocol_3) \
				Set_offset_vn2	(pr,	llc);									\
				Set_val_nil_vn2	(llc);											\
				Set_val_vn2		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn2		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_vn2		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_vn2		(llc,	structure,		STRUCTURE_8KHZ_INT);	\
				Set_val_vn2		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_vn2		(llc,	protocol_id_1,	protocol_1);			\
				Set_val_vn2		(llc,	protocol_id_2,	protocol_2);			\
				Set_val_vn2		(llc,	protocol_id_3,	protocol_3);			\
				Set_next_ie_vn2	(llc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_llc_v110_syn : llc V110 synchronous IE.

					INPUT :
						- negoc		= negociation,
						- rate		= user rate,
						- tx 		= NIC on Tx,
						- rx		= NIC on Rx,
						- protocol_2= protocol ID layer 2,
						- protocol_3= protocol ID layer 3.

			*/

#define Isdn_vn2_store_llc_v110_syn(pr, negoc, rate, tx, rx, protocol_2, protocol_3) \
				Set_offset_vn2	(pr,	llc);									\
				Set_val_nil_vn2	(llc);											\
				Set_val_vn2		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn2		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_vn2		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_vn2		(llc,	structure,		STRUCTURE_8KHZ_INT);	\
				Set_val_vn2		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_vn2		(llc,	protocol_id_1,	PROTOCOL_ID_1_V110);	\
				Set_val_vn2		(llc,	syn_asyn,		SYN);					\
				Set_val_vn2		(llc,	negociation,	negoc);					\
				Set_val_vn2		(llc,	user_rate,		rate);					\
				Set_val_vn2		(llc,	nic_tx,			tx);					\
				Set_val_vn2		(llc,	nic_rx,			rx);					\
				Set_val_vn2		(llc,	protocol_id_2,	protocol_2);			\
				Set_val_vn2		(llc,	protocol_id_3,	protocol_3);			\
				Set_next_ie_vn2 (llc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_vn2_store_llc_v110_asyn : llc V110 asynchronous IE.

					INPUT :
						- negoc		= negociation,
						- rate		= user rate,
						- fc_tx_	= flow control on Tx,
						- fc_rx_	= flow control on Rx,
						- stop		= number of stop bits,
						- data		= number of data bits,
						- par		= parity,
						- protocol_2= protocol ID layer 2,
						- protocol_3= protocol ID layer 3.

			*/

#define Isdn_vn2_store_llc_v110_asyn(pr, negoc, rate, fc_tx_, fc_rx_, stop, data, par) \
				Set_offset_vn2	(pr,	llc); 									\
				Set_val_nil_vn2	(llc);											\
				Set_val_vn2		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn2		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_vn2		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_vn2		(llc,	structure,		STRUCTURE_8KHZ_INT);	\
				Set_val_vn2		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_vn2		(llc,	protocol_id_1,	PROTOCOL_ID_1_V110);	\
				Set_val_vn2		(llc,	syn_asyn,		ASYN);					\
				Set_val_vn2		(llc,	modem,			MODEM_RESERVED);		\
				Set_val_vn2		(llc,	negociation,	negoc);					\
				Set_val_vn2		(llc,	user_rate,		rate);					\
				Set_val_vn2		(llc,	fc_tx,			fc_tx_);				\
				Set_val_vn2		(llc,	fc_rx,			fc_rx_);				\
				Set_val_vn2		(llc,	stop_bit,		stop);					\
				Set_val_vn2		(llc,	data_bit,		data);					\
				Set_val_vn2		(llc,	parity,			par);					\
				Set_next_ie_vn2	(llc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_llc_v120 : llc V120 IE.

					INPUT :
						- syn_asyn	= SYN or ASYN,
						- negot		= negotiation,
						- rate		= user rate,
						- duplex	= duplex mode,
						- modem		= modem type

			*/

#define Isdn_vn2_store_llc_v120(pr, syn_asyn_, negot, rate, duplex_, modem_)\
				Set_offset_vn2	(pr,	llc);									\
				Set_val_nil_vn2	(llc);											\
				Set_val_vn2		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn2		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_vn2		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_vn2		(llc,	structure,		STRUCTURE_DEFAULT);		\
				Set_val_vn2		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_vn2		(llc,	protocol_id_1,	PROTOCOL_ID_1_V120);	\
				Set_val_vn2		(llc,	syn_asyn,		syn_asyn_);				\
				Set_val_vn2		(llc,	negociation,	negot);					\
				Set_val_vn2		(llc,	user_rate,		rate);					\
				Set_val_vn2		(llc,	duplex,			duplex_);				\
				Set_val_vn2		(llc,	modem,			modem_);				\
				Set_next_ie_vn2 (llc)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_vn2_store_llc_x25_x31 : llc X.25/X.31 IE.

					INPUT : none
			*/

#define Isdn_vn2_store_llc_x25_x31(pr) 										\
				Set_offset_vn2	(pr,	llc);									\
				Set_val_nil_vn2	(llc);											\
				Set_val_vn2		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn2		(llc,	trf_mode,		TRF_MODE_PACKET);		\
				Set_val_vn2		(llc,	trf_rate,		TRF_RATE_PACKET_MODE);	\
				Set_val_vn2		(llc,	structure,		STRUCTURE_DEFAULT);		\
				Set_val_vn2		(llc,	dest_rate,		TRF_RATE_PACKET_MODE);	\
				Set_val_vn2		(llc,	protocol_id_1,	PROTOCOL_ID_1_X31);		\
				Set_val_vn2		(llc,	protocol_id_2,	PROTOCOL_ID_2_X25_LL);	\
				Set_val_vn2		(llc,	protocol_id_3,	PROTOCOL_ID_3_X25_PL);	\
				Set_next_ie_vn2	(llc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_hlc : high layer compatibility IE

					INPUT :
						- pr			= primitive ID,
						- cod			= coding,
						- teleservice_	= teleservice.
			*/

#define Isdn_vn2_store_hlc(pr, cod, teleservice_)					\
				Set_offset_vn2	(pr,	hlc);							\
				Set_val_vn2		(hlc,	hlc_id_code,	cod);			\
				Set_val_vn2		(hlc,	teleservice,	teleservice_);	\
				Set_next_ie_vn2	(hlc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_uui : user to user information IE

					INPUT :
						- protocol_discr_	= protocol discriminator
						- p_text			= address of the literal string.

			*/

#define Isdn_vn2_store_uui(pr, protocol_discr_, p_text)			\
		Set_offset_vn2	(pr,	uui);								\
		Set_val_vn2		(uui,	protocol_discr,	protocol_discr_);	\
		Set_str_vn2		(uui, 	text,	p_text,	VN2_MX_SZ_UUI+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_vn2_store_keypad(pr,p_text)						\
		Set_offset_vn2	(pr,		keypad);						\
		Set_str_vn2		(keypad,	text,	p_text,	VN2_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_display : display IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_vn2_store_display(pr,p_text)						\
		Set_offset_vn2	(pr,		display);						\
		Set_str_vn2		(display,	text,	p_text,	VN2_MX_SZ_DISPLAY+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_user_fac : user facility IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator
						- size				= size of the array,
						- p_array			= address of the character array.

			*/


#define Isdn_vn2_store_user_fac(pr, protocol_discr_, size, p_array) 		\
		Set_offset_vn2	(pr,		user_fac);									\
		Set_val_vn2		(user_fac,	protocol_discr,		protocol_discr_);		\
		Set_mem_vn2		(user_fac,	text,	p_array,	(size > VN2_MX_SZ_USER_FAC) \
											 ? VN2_MX_SZ_USER_FAC : size)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_cause : cause IE

					INPUT :
						- pr	= primitive ID,
						- cl    = cause class,
						- val   = cause value,
						- diag  = cause diagnostic.
						- loc   = cause location.

			*/

#define Isdn_vn2_store_cause(pr, cl, val, loc, diag)	\
				Set_offset_vn2	(pr,	cause);				\
				Set_val_vn2		(cause,	cause_class,cl);	\
				Set_val_vn2		(cause,	cause_val,	val);	\
				Set_val_vn2		(cause,	cause_loc,	loc);	\
				Set_str_vn2		(cause,	cause_diag,	diag, VN2_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_call_id : call ID

					INPUT :
						- pr	= primitive ID,
						- id    = call ID.

			*/


#define Isdn_vn2_store_call_id(pr, id)						\
		Set_offset_vn2	(pr,		call_id);					\
		Set_str_vn2		(call_id,	value,	id,	VN2_MX_SZ_CALL_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_bc_speech : speech bearer capability

					INPUT :
						- pr	= primitive ID.

			*/

#define Isdn_vn2_store_bc_speech(pr) Isdn_vn2_store_bc (pr, TRF_CAP_SPEECH)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn2_store_more_data : more data

					INPUT :
						- pr	= primitive ID,

			*/

#define Isdn_vn2_store_more_data(pr) 				\
				Set_offset_vn2	(pr,		more_data)

/*EOF*/
