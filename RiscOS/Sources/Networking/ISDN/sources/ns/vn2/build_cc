
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_cc.vn2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      vn2_cc_load_ns_test - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            vn2_cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar vn2_cc_load_ns_test (code_t primitive_code, nai_t nai,
									   conn_id_t conn_id);
							- primitive_code    = code of the primitive to send,
							- nai               = network access ID,
							- conn_id           = connection ID.

Return value :  vn2_cc_load_ns_test returns = OK
										= NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar vn2_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t      prim_code;      /* primitive code */
	nai_t       nai;            /* network access ID */
	sapi_t      sapi;           /* sapi */
	conn_id_t   conn_id;        /* connection ID */
{

		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

#	if DYNAMIC_MSG_BUILDER == ON

		if (prim_code == PRIMITIVE_FROM_FILE) {

			ret_code = build_primitive_from_file (&prim_code);
			Store_message (prim_code, nai, sapi, conn_id, p_buffer);
			return (ret_code);
		}

#	endif

	if (Na_fct != FG_NT_TE) {

		/*========== primitives as seen from TE side ==========*/

			/* Switch according to the primitive to send */

		switch (prim_code) {

		/*---------------- CONNECTION REQUEST */

			case  NS_CONN_RQ :
				Isdn_init_vn2_ctx_rq_rs         (conn_rq,
												 Buffer_a_first_data
												);




				Isdn_vn2_store_chan_id          (conn_rq,
												 INT_TYPE_BRI,
												 CHAN_EXCL,
												 ANY_CHAN,
												 BYTE_VAL_NIL
												);

#				if NS_SPF_FACILITY == ON

					Isdn_vn2_store_spf_fac      (conn_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 FT_SPF_FAC_CHARGING,
												 A_NIL
												);
#				endif

				Isdn_vn2_store_calling_nb       (conn_rq,
												 NB_UNKNOWN,
												 PLAN_ISDN,
												 USER_PROVIDED,
												 "30571841"
												);

				Isdn_vn2_store_calling_sub_add  (conn_rq,
												 SUB_ADD_USER,
												 "654321"
												);

				Isdn_vn2_store_called_nb        (conn_rq,
												 OVERLAP_SENDING,
												 PLAN_UNKNOWN,
												 "12345"
												);

				Isdn_vn2_store_called_sub_add   (conn_rq,
												 SUB_ADD_OSI,
												 "4321"
												);
	/*          Isdn_vn2_store_llc_transparent  (conn_rq,
												 PROTOCOL_ID_1_G711_A,
												 PROTOCOL_ID_2_X25_LL,
												 PROTOCOL_ID_3_X25_PL
												);

	*/
				Isdn_vn2_store_llc_v110_asyn    (conn_rq,
												 NEGOTIATION_NOT_IN_BAND,
												 RA_9_6KBS,
												 FLOW_RQ_TX_DATA,
												 FLOW_CAN_ACCEPT_DATA,
												 STOP_BIT_1_5,
												 DATA_BIT_8,
												 ODD
												);

				Isdn_vn2_store_bc               (conn_rq,
												 TRF_CAP_UNRESTRICTED
												);

				Isdn_vn2_store_hlc              (conn_rq,
												 NS_TELESERVICE_CCITT,
												 FAX_4
												 );

				Isdn_vn2_store_uui              (conn_rq,
												 PROTOCOL_DISCR_IA5,
												 "conn rq--- BONJOUR +++"
												);


				break;

		/*---------------- CONNECTION RESPONSE */

			case  NS_CONN_RS :
				Isdn_init_vn2_ctx_rq_rs         (conn_rs,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_uui              (conn_rs,
												 PROTOCOL_DISCR_IA5,
												 "conn rs--- BONJOUR +++"
												);
				break;

		/*---------------- CONNECTION CLEAR REQUEST */

			case  NS_CLEAR_RQ :
				Isdn_init_vn2_ctx_rq_rs         (clear_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_cause            (clear_rq,
												 C_C_NORMAL_EVENT,
												 C_V_NORMAL_CLEARING_16,
												 LOCATION_USER,
												 A_NIL
												);

				Isdn_vn2_store_uui              (clear_rq,
												 PROTOCOL_DISCR_IA5,
												 "**** UUI clear rq ***"
												);
				break;

		/*---------------- CONNECTION CLEAR RESPONSE */

			case  NS_CLEAR_RS :
				Isdn_init_vn2_ctx_rq_rs         (clear_rs,
												 Buffer_a_first_data
												);
				break;

		/*---------------- INFORMATION REQUEST */

			case  NS_INFO_RQ :
				Isdn_init_vn2_ctx_rq_rs         (info_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_called_nb        (info_rq,
												 OVERLAP_SENDING,
												 PLAN_UNKNOWN,
												 "6"
												);

				Isdn_vn2_store_keypad           (info_rq,
												 "8901234"
												);
				break;

		/*---------------- ALERTING REQUEST */

			case  NS_ALERT_RQ :
				Isdn_init_vn2_ctx_rq_rs         (alert_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_uui              (alert_rq,
												 PROTOCOL_DISCR_IA5,
												 "*** UUI alert rq ***"
												);
				break;

		/*---------------- SUSPEND REQUEST */

			case  NS_SUSPEND_RQ :
				Isdn_init_vn2_ctx_rq_rs         (suspend_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_call_id          (suspend_rq,
												 "12"
												);
				break;

		/*---------------- RESUME REQUEST */

			case  NS_RESUME_RQ :
				Isdn_init_vn2_ctx_rq_rs         (resume_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_call_id          (resume_rq,
												 "12"
												);
				break;

		/*---------------- FACILITY REQUEST */

#		if NS_SPF_FACILITY == ON

			case  NS_SPF_FACILITY_RQ :
				Isdn_init_vn2_ctx_rq_rs         (spf_facility_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_spf_fac          (spf_facility_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 FT_SPF_FAC_CHARGING,
												 A_NIL
												);
				break;

#		endif

		/*---------------- SPECIFIC REGISTRATION REQUEST */

#		if NS_SPF_FACILITY == ON

			case NS_SPF_REGISTRATION_RQ :
				Isdn_init_vn2_ctx_rq_rs         (spf_reg_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_spf_fac          (spf_reg_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 FT_SPF_FAC_CALL_FORWARDING,
												 "123456789"
												);
				break;
#		endif

		/*---------------- USER INFORMATION*/

			case NS_USER_INFO_RQ :
				Isdn_init_vn2_ctx_rq_rs         (user_info_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_uui              (user_info_rq,
												 PROTOCOL_DISCR_IA5,
												 "*** UUI user info rq ***"
												);

				Isdn_vn2_store_user_fac         (user_info_rq,
												 PROTOCOL_DISCR_MESSAGING,
												 4,
												"abcd"
												);

				Isdn_vn2_store_more_data        (user_info_rq
												);
				break;

			default :
				return (NOK);

		} /* end of "switch (prim_code)" */

	} /* TE side */

/*==========================================================================*/

#if EQUIPMENT == NT2 /* { */

	else {

		/*========== primitives as seen from NT side ==========*/

			/* Switch according to the primitive to send */

		switch (prim_code) {

		/*---------------- CONNECTION REQUEST */

			case  NS_CONN_RQ :
				Isdn_init_vn2_ctx_rq_rs         (net_conn_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_chan_id          (net_conn_rq,
												 INT_TYPE_BRI,
												 CHAN_EXCL,
												 ANY_CHAN,
												 BYTE_VAL_NIL
												);

#if 0
				Isdn_vn2_store_calling_nb       (net_conn_rq,
												 NB_UNKNOWN,
												 PLAN_ISDN,
												 NETWORK_PROVIDED,
												 "30571841"
												);

				Isdn_vn2_store_calling_nb_u     (net_conn_rq,
												 NB_UNKNOWN,
												 PLAN_ISDN,
												 USER_PROVIDED,
												 "345678901"
												);
#endif

				Isdn_vn2_store_calling_sub_add  (net_conn_rq,
												 SUB_ADD_USER,
												 "4321"
												);

				Isdn_vn2_store_called_nb        (net_conn_rq,
												 OVERLAP_SENDING,
												 PLAN_UNKNOWN,
												 "12345"
												);

				Isdn_vn2_store_called_sub_add   (net_conn_rq,
												 SUB_ADD_OSI,
												 "4321"
												);

	/*          Isdn_vn2_store_llc_transparent  (net_conn_rq,
												 PROTOCOL_ID_1_G711_A,
												 PROTOCOL_ID_2_X25_LL,
												 PROTOCOL_ID_3_X25_PL
												);
	*/
				Isdn_vn2_store_llc_v110_asyn    (net_conn_rq,
												 NEGOTIATION_NOT_IN_BAND,
												 RA_9_6KBS,
												 FLOW_RQ_TX_DATA,
												 FLOW_CAN_ACCEPT_DATA,
												 STOP_BIT_1_5,
												 DATA_BIT_8,
												 ODD
												 );

				Isdn_vn2_store_bc               (net_conn_rq,
												 TRF_CAP_UNRESTRICTED
												);

				Isdn_vn2_store_hlc              (net_conn_rq,
												 NS_TELESERVICE_CCITT,
												 FAX_4
												 );

				Isdn_vn2_store_uui              (net_conn_rq,
												 PROTOCOL_DISCR_IA5,
												 "conn rq--- BONJOUR +++"
												);


				break;

		/*---------------- CONNECTION RESPONSE */

			case  NS_CONN_RS :
				Isdn_init_vn2_ctx_rq_rs          (net_conn_rs,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_uui              (net_conn_rs,
												 PROTOCOL_DISCR_IA5,
												 "conn rs--- BONJOUR +++"
												);
				break;

		/*---------------- CONNECTION CLEAR REQUEST */

			case  NS_CLEAR_RQ :
				Isdn_init_vn2_ctx_rq_rs         (net_clear_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_cause            (net_clear_rq,
												 C_C_NORMAL_EVENT,
												 C_V_NORMAL_CLEARING_16,
												 LOCATION_USER,
												 A_NIL
												);

				Isdn_vn2_store_uui              (net_clear_rq,
												 PROTOCOL_DISCR_IA5,
												 "**** UUI clear rq ***"
												);
				break;

		/*---------------- CONNECTION CLEAR RESPONSE */

			case  NS_CLEAR_RS :
				Isdn_init_vn2_ctx_rq_rs         (net_clear_rs,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_uui              (net_clear_rs,
												 PROTOCOL_DISCR_IA5,
												 "**** UUI clear rs ***"
												);
				break;

		/*---------------- INFORMATION REQUEST */

			case  NS_INFO_RQ :
				Isdn_init_vn2_ctx_rq_rs         (net_info_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_display          (net_info_rq,
												 "display"
												);

				Isdn_vn2_store_spf_fac          (net_info_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 FT_SPF_FAC_CHARGING,
												 A_NIL
												);
				break;

		/*---------------- ALERTING REQUEST */

			case  NS_ALERT_RQ :
				Isdn_init_vn2_ctx_rq_rs         (net_alert_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_uui              (net_alert_rq,
												 PROTOCOL_DISCR_IA5,
												 "*** UUI alert rq ***"
												);
				break;

		/*---------------- SUSPEND RESPONSE */

			case  NS_SUSPEND_RS :
				Isdn_init_vn2_ctx_rq_rs         (net_suspend_rs,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_display          (net_suspend_rs,
												 "susp-rs"
												);
				break;

		/*---------------- RESUME RESPONSE */

			case  NS_RESUME_RS :
				Isdn_init_vn2_ctx_rq_rs         (net_resume_rs,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_display          (net_resume_rs,
												 "resume-rs"
												);
				break;

		/*---------------- FACILITY RESPONSE */

			case  NS_SPF_FACILITY_RS :
				Isdn_init_vn2_ctx_rq_rs         (net_spf_facility_rs,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_display          (net_spf_facility_rs,
												 "spf-fac-rs"
												);
				break;

		/*---------------- SPECIFIC REGISTRATION RESPONSE */

			case NS_SPF_REGISTRATION_RS :
				Isdn_init_vn2_ctx_rq_rs         (net_spf_reg_rs,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_spf_fac          (net_spf_reg_rs,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 FT_SPF_FAC_CALL_FORWARDING,
												 "123456789"
												);
				Isdn_vn2_store_display          (net_spf_reg_rs,
												 "spf-reg-rs"
												);
				break;

		/*---------------- USER INFORMATION */

			case NS_USER_INFO_RQ :
				Isdn_init_vn2_ctx_rq_rs         (net_user_info_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_uui              (net_user_info_rq,
												 PROTOCOL_DISCR_IA5,
												 "*** UUI user info rq ***"
												);

				Isdn_vn2_store_user_fac         (net_user_info_rq,
												 PROTOCOL_DISCR_MESSAGING,
												 4,
												"abcd"
												);

				Isdn_vn2_store_more_data        (net_user_info_rq
												);
				break;



		/*---------------- CALL_PROC_RQ */

			case NS_CALL_PROC_RQ :
				Isdn_init_vn2_ctx_rq_rs         (net_call_proc_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_chan_id          (net_call_proc_rq,
												 INT_TYPE_BRI,
												 CHAN_EXCL,
												 B1_CHAN,
												 BYTE_VAL_NIL
												);

				Isdn_vn2_store_display          (net_call_proc_rq,
												 "display"
												);
				break;

		/*---------------- SETUP_ACK_RQ */

			case NS_SETUP_ACK_RQ :
				Isdn_init_vn2_ctx_rq_rs         (net_setup_ack_rq,
												 Buffer_a_first_data
												);

				Isdn_vn2_store_display          (net_call_proc_rq,
												 "display"
												);
				break;

		/*---------------- UNKNOWN primitive */

			default :
				return (NOK);

		} /* end of "switch (prim_code)" */

	} /* NT-side */

#endif /* EQUIPMENT = NT2} */

		/* Load the communication message */

	Store_message (prim_code, nai, sapi, conn_id, p_buffer);
	Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);

	return (OK);
}

/*EOF*/
