
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ie_ss.ets
 *
 * $Revision$
 *
 * $Date$
 *
 *		ETSI specific functions that implement the decoding and encoding
 *		of the IEs specific to Supplementary Services :
 *		FACILITY, EXTENDED FACILITY, NOTIFICATION INDICATOR.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*=========================================================================*
					 F U N C T I O N   H E A D E R

Name            ets_facility_spdu - implements the decoding or encoding
				of a FACILITY IE received or to be sent in a spdu.

				ets_extended_fac_spdu - implements the decoding or encoding
				of an EXTENDED FACILITY IE received in a spdu.

Usage           uchar	ets_facility_spdu (void);
				uchar	ets_extended_fac_spdu (void);

Return value	OK / NOK

common objects : internal data structure i_facility, ie spdu context,
				 direction (FROM or TO D_CHANNEL), ns_fac_components array,
				 global pointers : p_ns_fac_component, p_ns_ss_op_err_tab.

*--------------------------------------------------------------------------*/

#if NEW_FCT_STYLE == ON
	uchar	ets_fac_content_spdu			(uchar FAR *p_nb);
#else
	uchar	ets_fac_content_spdu			();
#endif

uchar ets_facility_spdu ()
{
	uchar						ie_octet;					/* current IE octet */
	ushort						length;						/* current length of SEQUENCE in component */
	uchar	FAR					*p_end_component;			/* pointer to end of component */
	uchar	FAR					*p_component_lgth;			/* pointer to location of component length */

		/* get country specific tables for operations + errors + Object Identifiers */

	ns_get_country_op_err_tab (Na_country);

	if (p_ns_ss_op_err_tab == P_NIL) {

		return (NOK);	/* no Table found -> no supplementary service in current country */
	}

		/*	pass the table of OBJECT IDENTIFIERs (pointer to table + number
			of entries in table) onto the ASN1 mechanism before decoding or encoding */

	Asn1_set_obj_id_lists	(Ns_ss_obj_id_nb, Ns_ss_p_obj_id_list, P_NIL);

	if (direction == FROM_D_CHANNEL) {		/* FROM the D CHANNEL */

		if (ns_x_ss_fac_comp >= NS_MX_FAC_COMPONENTS) {

			return (NOK);
		}

		p_ns_fac_component = &(ns_fac_components[ns_x_ss_fac_comp]);
		I_facility_first_comp_x = ns_x_ss_fac_comp;
		return (ets_fac_content_spdu (&I_facility_component_nb));

	} else {		/* TO the D CHANNEL */

		ns_x_ss_fac_comp = I_facility_first_comp_x;						/* get index in common array of first component in Facility IE */
		p_ns_fac_component = &(ns_fac_components[ns_x_ss_fac_comp]);	/* get pointer to common component data */

		if ((ns_x_ss_fac_comp + I_facility_component_nb) > NS_MX_FAC_COMPONENTS) {

				/* nb of components stored in i_facility is too high : it should not happen for it has been checked during SSDU process */

			return (NOK);
		}

			/* process all components stored into internal structure */

		for (ie_octet = 0; ie_octet < I_facility_component_nb; ie_octet++) {

				/* set tag (class, form, nb) of component in SPDU */

			*p_ie++ = Ns_tag_from_class_form_nb (FAC_CONTEXT_SPECIFIC, FAC_CONSTRUCTOR, I_ss_fac_comp_tag);
			p_component_lgth = p_ie;		/* set p_component_lgth to location of component length (to be computed) */
			p_ie++;			/* skip length */

			if (I_ss_fac_comp_tag != FAC_REJECT) {

				if ((I_ss_fac_comp_tag != FAC_RETURN_RESULT) || (I_ss_fac_is_result_here == PRESENT)) {

					p_ie++;		/* skip length : maximum value is 255 coded on 2 octets (ASN1 coding) */
				}
			}

			if ((I_ss_fac_comp_tag != FAC_REJECT) || (I_ss_fac_is_inv_id_here == PRESENT)) {

					/* Invoke identifier is present : encode it (type is INTEGER (UNIVERSAL)), 'length' is used for unsigned value */

				*p_ie++ = Ns_tag_from_class_form_nb (FAC_UNIVERSAL, FAC_PRIMITIVE, FAC_INTEGER_TAG);

				if (I_ss_fac_invoke_id < 0) {

					length = (ushort)(I_ss_fac_invoke_id * (-1));
					Asn1_encode_integer ((ulong)length, ASN1_CODING_NEGATIVE, &p_ie, p_ie + 5);

				} else {

					length = (ushort)(I_ss_fac_invoke_id);
					Asn1_encode_integer ((ulong)length, ASN1_CODING_POSITIVE, &p_ie, p_ie + 5);
				}

			} else {

					/* Invoke identifier is absent : NULL value is to be encoded (in Reject component) -> Tag + Length = 0 */

				*p_ie++ = Ns_tag_from_class_form_nb (FAC_UNIVERSAL, FAC_PRIMITIVE, FAC_NULL_TAG);
				*p_ie++ = 0;
			}

			switch (I_ss_fac_comp_tag) {	/* process according to component tag */

				case FAC_REJECT :

						/* set problem (tag, length, value) in SPDU and total length of component */

					*p_ie++ = Ns_tag_from_class_form_nb (FAC_CONTEXT_SPECIFIC, FAC_PRIMITIVE, I_ss_fac_problem_tag);
					Asn1_encode_integer ((ulong)I_ss_fac_problem, ASN1_CODING_POSITIVE, &p_ie, p_ie + 5);
					*p_component_lgth = (uchar)((ulong)p_ie - (ulong)p_component_lgth - 1);
					p_component_lgth = P_NIL;
					break;

				case FAC_INVOKE :

					if (I_ss_fac_is_lk_id_here == PRESENT) {	/* set Linked ID in SPDU if it is present */

						*p_ie++ = Ns_tag_from_class_form_nb (FAC_CONTEXT_SPECIFIC, FAC_PRIMITIVE, FAC_LINKED_ID_TAG);

						if (I_ss_fac_linked_id < 0) {

							length = (ushort)(I_ss_fac_linked_id * (-1));
							Asn1_encode_integer ((ulong)length, ASN1_CODING_NEGATIVE, &p_ie, p_ie + 5);

						} else {

							length = (ushort)(I_ss_fac_linked_id);
							Asn1_encode_integer ((ulong)length, ASN1_CODING_POSITIVE, &p_ie, p_ie + 5);
						}
					}

						/* encode OPERATION value and ARGUMENT clause */

					if (ns_encode_ss_op_err_val (NS_FLAG_OPERATION_ARGUMENT) == NOK) {

						return (NOK);
					}

					break;

				case FAC_RETURN_RESULT :

					if (I_ss_fac_is_result_here != PRESENT) {

						/*	no operation data provided (optional) : end of component is reached
							-> set total length of component */

						*p_component_lgth = (uchar)((ulong)p_ie - (ulong)p_component_lgth - 1);
						p_component_lgth = P_NIL;
						break;
					}

						/* set SEQUENCE flag in SPDU, set 'p_end_component' pointer to
							sequence length location and skip length */

					*p_ie++ = Ns_tag_from_class_form_nb (FAC_UNIVERSAL, FAC_CONSTRUCTOR, FAC_SEQUENCE_TAG);
					p_end_component = p_ie;
					p_ie += 2;

						/* encode OPERATION value and RESULT clause */

					if (ns_encode_ss_op_err_val (NS_FLAG_OPERATION_RESULT) == NOK) {

						return (NOK);
					}

						/* compute length of sequence and set it in SPDU (on 2 octets) */

					length = (ushort)((ulong)p_ie - (ulong)p_end_component - 2);
					if (length > 255) {

						return (NOK);
					}

					ns_encode_asn1_lgth (p_end_component, (uchar)length);
					break;

				case FAC_RETURN_ERROR :

						/* encode ERROR value and PARAMETER clause */

					if (ns_encode_ss_op_err_val (NS_FLAG_ERROR_PARAMETER) == NOK) {

						return (NOK);
					}

					break;

			} /* end of switch on component tag */

				/* if not already done, compute total length of component and set it in SPDU (on 2 octets) */

			if (p_component_lgth != P_NIL) {

				length = (ushort)((ulong)p_ie - (ulong)p_component_lgth - 2);

				if (length > 255) {

					return (NOK);
				}

				ns_encode_asn1_lgth (p_component_lgth, (uchar)length);
			}

			p_ns_fac_component++;		/* get next component internal structure */
            ns_x_ss_fac_comp++;

		} /* end of loop on components */
	}

	return (OK);
}

	/* -=-=-=-=-=-=-=-=-=-=- */

uchar ets_extended_fac_spdu ()
{

	if (direction != FROM_D_CHANNEL) {

		return (OK);
	}

		/* FROM the D CHANNEL */

		/* get country specific tables for operations + errors + Object Identifiers */

	ns_get_country_op_err_tab (Na_country);

	if (p_ns_ss_op_err_tab == P_NIL) {

		return (NOK);	/* no Table found -> no supplementary service in current country */
	}

		/*	pass the table of OBJECT IDENTIFIERs (pointer to table + number
			of entries in table) onto the ASN1 mechanism before decoding or encoding */

	Asn1_set_obj_id_lists	(Ns_ss_obj_id_nb, Ns_ss_p_obj_id_list, P_NIL);

	if (ns_x_ss_fac_comp >= NS_MX_FAC_COMPONENTS) {

		return (NOK);
	}

	p_ns_fac_component = &(ns_fac_components[ns_x_ss_fac_comp]);
	I_ext_fac_first_comp_x = ns_x_ss_fac_comp;
	return (ets_fac_content_spdu (&I_ext_fac_component_nb));
}

	/* -=-=-=-=-=-=-=-=-=-=- */

uchar ets_fac_content_spdu (p_nb)
	uchar FAR					*p_nb;						/* pointer to internal number of components */
{
	uchar						ie_octet;					/* current IE octet */
    uchar						indefinite_lgth;			/* flag indicating if length(s) is(are) of indefinite form */
	ushort						length;						/* current length of SEQUENCE in component */
	uchar	FAR					*p_end_component;			/* pointer to end of component */

	while (p_ie < p_ie_end) {

		p_ns_ss_ctx_list = P_NIL;		/* reset global pointer to list of storage descriptions to avoid mis-use */

		if (ns_x_ss_fac_comp == NS_MX_FAC_COMPONENTS) {

			return (NOK);
		}

			/* get first octet of component */

		ie_octet = Get_inc_ie_octet;

			/* check component tag */

		if (ns_check_get_tag (FAC_COMPONENT_TAG_TAB, SIZE_FAC_COMPONENT_TAG_TAB,
							  ie_octet, &(I_ss_fac_comp_tag)) == NOK) {

			return (NOK);
		}

			/* check component length (SEQUENCE) */

		length = ns_decode_asn1_lgth (); 
		if (length == NS_ASN1_INDEFINITE_LGTH) {

			p_end_component = p_ie_end;
			indefinite_lgth = 1;

		} else {

			if ((length == BAD_ASN1_LGTH) || (p_ie + length > p_ie_end)) {

				return (NOK);
			}

			p_end_component = p_ie + length;
			indefinite_lgth = 0;
		}

		ie_octet = Get_inc_ie_octet;

			/* get and check Invoke ID (Tag, Length, Value) */

		if (ie_octet == Ns_tag_from_class_form_nb (FAC_UNIVERSAL, FAC_PRIMITIVE, FAC_INTEGER_TAG)) {

			if (((length = ns_decode_asn1_lgth ()) > 2) ||
				(p_ie + length > p_end_component)) {

				return (NOK);
			}

			ie_octet = Get_inc_ie_octet;

			if (I_ss_fac_comp_tag == FAC_REJECT) { 

				I_ss_fac_is_inv_id_here = PRESENT;
			}

			I_ss_fac_invoke_id = ie_octet & Mask (7);

			if (Get_bits (ie_octet, 7, 1) == 1) {

				I_ss_fac_invoke_id -= 128;
			}

			if (length == 2) {

				I_ss_fac_invoke_id = I_ss_fac_invoke_id * 256 + Get_inc_ie_octet;
			}

		} else {

				/* Invoke ID may be omitted in RejectComponent only : tag is NULL */

			if ((I_ss_fac_comp_tag != FAC_REJECT) ||
				(ie_octet != Ns_tag_from_class_form_nb (FAC_UNIVERSAL, FAC_PRIMITIVE, FAC_NULL_TAG)))
			{
				return (NOK);
			}

			I_ss_fac_is_inv_id_here = ABSENT;

			if (Get_inc_ie_octet != 0) {

				return (NOK);
			}
		}

		ie_octet = Get_ie_octet;

		switch (I_ss_fac_comp_tag) {

			case FAC_INVOKE :

					/* get and check possible Linked ID */

				if (ie_octet == Ns_tag_from_class_form_nb (FAC_CONTEXT_SPECIFIC, FAC_PRIMITIVE, FAC_LINKED_ID_TAG)) {

						/* set p_ie pointer to begin of length field */

					p_ie++;

					if (((length = ns_decode_asn1_lgth ()) > 2) ||
						(p_ie + length > p_end_component)) {

						return (NOK);
					}

					ie_octet = Get_inc_ie_octet;

					I_ss_fac_is_lk_id_here = PRESENT;
					I_ss_fac_linked_id = ie_octet & Mask (7);

					if (Get_bits (ie_octet, 7, 1) == 1) {

						I_ss_fac_linked_id -= 128;
					}

					if (length == 2) {

						I_ss_fac_linked_id = I_ss_fac_linked_id * 256 + Get_inc_ie_octet;
					}

				} else {

					I_ss_fac_is_lk_id_here = ABSENT;
				}

					/* decode OPERATION value and ARGUMENT clause */

				if (ns_decode_ss_op_err_val (p_end_component, NS_FLAG_OPERATION_ARGUMENT) == NOK) {

					return (NOK);
				}

				break;

			case FAC_RETURN_RESULT :

				if (indefinite_lgth == 1) {

						/* indefinite form length : if p_ie points to End-Of-Content octets, end of component is reached */

					if ((p_ie + NS_ASN1_END_OF_CONTENT_SIZE) > p_end_component) {

						return (NOK);
					}

					for (indefinite_lgth = 0; indefinite_lgth < NS_ASN1_END_OF_CONTENT_SIZE; indefinite_lgth++) {

						if (p_ie[indefinite_lgth] != NS_ASN1_END_OF_CONTENT_VAL) {

							break;
						}
					}

					if (indefinite_lgth == NS_ASN1_END_OF_CONTENT_SIZE) {	/* end of content is indicated */

						p_ie += NS_ASN1_END_OF_CONTENT_SIZE;	/* skip End-Of-Content octets */
						indefinite_lgth = 0;					/* reset flag for further use */
						p_end_component = p_ie;					/* update current pointer */

					} else {	/* end of component is not reached */

						indefinite_lgth = 1;		/* restore flag for further use */ 
					}
				}

				if (p_ie == p_end_component) {

						/* end of component is reached, other fields are optional */

					I_ss_fac_is_result_here = ABSENT;
					break;
				}

				if (ie_octet != Ns_tag_from_class_form_nb (FAC_UNIVERSAL, FAC_CONSTRUCTOR, FAC_SEQUENCE_TAG)) {

					return (NOK);
				}

				p_ie++;		/* set p_ie pointer to begin of length field */
				I_ss_fac_is_result_here = PRESENT;

					/* check length of SEQUENCE in component */

				length = ns_decode_asn1_lgth ();

				if (length == NS_ASN1_INDEFINITE_LGTH) {

					indefinite_lgth += 2;	/* Use second Bit to store Indefinite Form flag */
				}

				if ((length == BAD_ASN1_LGTH) ||
					((indefinite_lgth == 0) && (p_ie + length != p_end_component))) {

					return (NOK);
				}

					/* decode OPERATION value and RESULT clause */

				if (ns_decode_ss_op_err_val (p_end_component, NS_FLAG_OPERATION_RESULT) == NOK) {

					return (NOK);
				}

				if (indefinite_lgth >= 2) {

						/* SEQUENCE in component is decoded : p_ie should point to the End-Of-Content octets of the SEQUENCE */

					if ((p_ie + NS_ASN1_END_OF_CONTENT_SIZE) > p_end_component) {

						return (NOK);
					}

					for (ie_octet = 0; ie_octet < NS_ASN1_END_OF_CONTENT_SIZE; ie_octet++) {

						if (*p_ie++ != NS_ASN1_END_OF_CONTENT_VAL) {

							return (NOK);
						}
					}

					indefinite_lgth -= 2;		/* update flag for further use */
				}

				break;

			case FAC_RETURN_ERROR :

					/* decode ERROR value and PARAMETER clause */

				if (ns_decode_ss_op_err_val (p_end_component, NS_FLAG_ERROR_PARAMETER) == NOK) {

					return (NOK);
				}

				break;

			case FAC_REJECT :

					/* check problem tag */

				if (ns_check_get_tag (FAC_PROBLEM_TAG_TAB, SIZE_FAC_PROBLEM_TAG_TAB,
									  ie_octet, &(I_ss_fac_problem_tag)) == NOK) {

					return (NOK);
				}

				p_ie++;		/* set p_ie pointer to begin of length field */
				if (((length = ns_decode_asn1_lgth ()) != 1) ||
					((indefinite_lgth == 0) && (p_ie + length != p_end_component))) {

					return (NOK);
				}

				ie_octet = Get_inc_ie_octet;
				I_ss_fac_problem = ie_octet;
				break;
		}

		if (indefinite_lgth == 1) {

				/* facility component is decoded : p_ie should point to the End-Of-Content octets of the component */

			if ((p_ie + NS_ASN1_END_OF_CONTENT_SIZE) > p_end_component) {

				return (NOK);
			}

			for (ie_octet = 0; ie_octet < NS_ASN1_END_OF_CONTENT_SIZE; ie_octet++) {

				if (*p_ie++ != NS_ASN1_END_OF_CONTENT_VAL) {

					return (NOK);
				}
			}

			p_end_component = p_ie;
		}

		if (p_ie != p_end_component) {

				/* facility component is decoded : p_ie should point to the end of the component (after)
					-> if not, length of the component is inconsistent with data structure */

			return (NOK);
		}

			/* store values decoded by ASN1 mechanism into internal structures */

		ns_ss_store_internal_value ();

			/* increment current variables used for FACILITY and analyse next component if any */

		p_ns_fac_component++;
		(*p_nb)++;
		ns_x_ss_fac_comp++;
	}

	return (OK);
}

/*=========================================================================*
					 F U N C T I O N   H E A D E R

Name            ets_facility_ssdu - implements the decoding or encoding of a
				FACILITY IE received or to be sent in a ssdu.

Usage           uchar	ets_facility_ssdu (void);

Return value	OK / NOK

common objects : internal data structure i_facility, ie ssdu context,
				 direction (FROM or TO CALL CONTROL), ns_fac_components array,
				 global pointers : p_ns_fac_component, p_ns_ss_op_err_tab.

*--------------------------------------------------------------------------*/

uchar ets_facility_ssdu ()
{
	uchar				i;							/* loop index */
	uchar FAR			*p_fac_start;				/* pointer to start of Facility IE inside SSDU */
	uchar FAR			*p_first_comp;				/* pointer to first component data inside Facility IE */

		/* get country specific tables for operations and errors */

	ns_get_country_op_err_tab (Na_country);

	if (p_ns_ss_op_err_tab == P_NIL) {

		return (NOK);		/* no Table found -> no supplementary service in current country */
	}

	if (direction == FROM_CALL_CONTROL) {

		if (ns_x_ss_fac_comp >= NS_MX_FAC_COMPONENTS) {

			return (NOK);	/* number of facility components in SSDU is too high */
		}

		p_ns_fac_component = &(ns_fac_components[ns_x_ss_fac_comp]);	/* set pointer to common component data */
		I_facility_first_comp_x = ns_x_ss_fac_comp;						/* store index in common array of first component in Facility IE */

			/* set current pointer to first component inside facility data */

		p_ssdu_val 	-= sizeof (ns_offset_t);
#		if NS_IE_TSP_OUT == ON
			p_ssdu_val -= SIZEOF_TSP_OFFSET;
#		endif

		p_ssdu_val = (uchar FAR *)&(((struct val_ns_ets_facility FAR *)p_ssdu_val) -> component);

			/* process all components provided in SSDU */

		while (TRUE) {

			if (ns_x_ss_fac_comp >= NS_MX_FAC_COMPONENTS) {

				return (NOK);	/* number of facility components in SSDU is too high */
			}

			i = ns_ss_fac_comp_from_ssdu ();	/* process of current component */

			if (i == NOK) {

				return (NOK);	/* component is invalid -> Return NOK */
			}

			if (I_ss_fac_comp_tag == FAC_REJECT) {	/* Reject component : check the type and identifier of problem */

				if (I_ss_fac_problem_tag > REJ_RET_ERROR_PB_TAG) {

					return (NOK);
				}
			}

				/* component is valid -> increment current index and number of components stored */

			ns_x_ss_fac_comp++;
			I_facility_component_nb++;

			if (i == STOP) {	/* this is the last component -> Return OK */

				return (OK);
			}

			p_ns_fac_component++;		/* get internal data location of next component */
		}

	} else {		/* TO CALL CONTROL */

		ns_x_ss_fac_comp = I_facility_first_comp_x;						/* get index in common array of first component in Facility IE */
		p_ns_fac_component = &(ns_fac_components[ns_x_ss_fac_comp]);	/* get pointer to common component data */

		if ((ns_x_ss_fac_comp + I_facility_component_nb) > NS_MX_FAC_COMPONENTS) {

				/* nb of components stored in i_facility is too high : it should not happen for it has been checked during SPDU process */

			return (NOK);
		}

			/* set current pointer to first component inside facility data */

		p_ssdu_val 	-= sizeof (ns_offset_t);
#		if NS_IE_TSP_OUT == ON
			p_ssdu_val -= SIZEOF_TSP_OFFSET;
#		endif

		p_fac_start = p_ssdu_val;
		((struct val_ns_ets_facility FAR *)p_fac_start) -> component_nb = (ushort)I_facility_component_nb;

			/* set pointers to first component inside facility data */

		p_first_comp = p_ssdu_val = (uchar FAR *)&(((struct val_ns_ets_facility FAR *)p_fac_start) -> component);

			/* process all components stored into internal structure */

		for (i = 1; i < I_facility_component_nb; i++) {

			if (ns_ss_fac_comp_in_ssdu (OFF) == NOK) {

				return (NOK);
			}

			ns_x_ss_fac_comp++;
			p_ns_fac_component++;
		}

			/* process last component */

		if (ns_ss_fac_comp_in_ssdu (ON) == NOK) {

			return (NOK);
		}

        	/* set total size inside facility IE and return OK */

		((struct val_ns_ets_facility FAR *)p_fac_start) -> size = (ushort)((ulong)p_ssdu_val - (ulong)p_first_comp);
		return (OK);

	}	/* end of direction = TO CALL CONTROL */
}


/* EOF */
