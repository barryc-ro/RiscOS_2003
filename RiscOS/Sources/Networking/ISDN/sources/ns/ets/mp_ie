
/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - mp_ie.ets
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

		uchar	ets_bc_teleservice_compatibility	(Void_parm);
		uchar   ets_bc_4ab_spdu						(Void_parm);
		uchar   ets_bc_4b_spdu						(Void_parm);
		uchar	ets_bc_5_spdu						(Void_parm);
		uchar	ets_bc_6_spdu						(Void_parm);
		uchar	ets_bc_7_spdu						(Void_parm);
		uchar	ets_calling_nb_spdu					(Void_parm);
		uchar	ets_cause_spdu						(Void_parm);
		uchar	ets_cause_3a_spdu					(Void_parm);
		uchar	ets_mode_circuit					(Void_parm);
		uchar	ets_chan_id_spdu					(Void_parm);
#		if NS_COLP_COLR == ON
			uchar	ets_conn_nb_spdu				(Void_parm);
#		endif
#		if NS_SUPP_SERVICES == ON
			uchar	ets_extended_fac_spdu			(Void_parm);
			uchar	ets_facility_spdu				(Void_parm);
			uchar	ets_notif_ind_spdu				(Void_parm);
#		endif
		uchar   ets_llc_3a_spdu						(Void_parm);
		uchar   ets_llc_4ab_spdu					(Void_parm);
		uchar   ets_llc_4b_spdu						(Void_parm);
		uchar	ets_llc_5_spdu						(Void_parm);
		uchar	ets_llc_6_spdu						(Void_parm);
		uchar	ets_llc_7_spdu						(Void_parm);
#		if NS_SPF_FACILITY == ON
			uchar	ets_spf_fac_spdu				(Void_parm);
#		endif
		uchar	ets_progress_ind_spdu				(Void_parm);
		uchar	ets_restart_spdu					(Void_parm);
		uchar	ets_df_advice_ch_3a_b_spdu			(Void_parm);
		uchar	ets_advice_of_charge_dcod_spdu		(Void_parm);

#endif

			/* ---------- Bearer capability (BC) */

D_START	(ETS_BC_P)
		D_TABL				(CODING_STD)
		D_TABL				(TRF_CAP)
		D_EXT_1				(_3)
		D_TABL				(TRF_MODE)
		D_TABX				(TRF_RATE)
		D_FUNCTION			(OCTETS_4ab)

		D_IF_VAL			(NOT_DEFAULT_4ab)
			D_EXT_0_1		(_4)
			D_TABL			(STRUCT)
			D_VAL			(CONFIG)
			D_VAL			(EST)
			D_FUNCTION		(OCTET_4b)

			D_IF_VAL		(NOT_DEFAULT_4b)
				D_EXT_0_1   (_4A)
				D_VAL		(SYMMETRY)
				D_TABX		(DEST_RATE)
			D_END_IF		(_4b)

		D_END_IF			(_4ab)

		D_EXT_1				(OCTETS_4)
		D_OPTIONAL_OCTET	(_5ABCD_6_7)

		D_FUNCTION			(OCTET_5)
		D_IF_VAL			(OCTET_5_PR)
			D_VAL			(LAYER_1)
			D_TABX			(PROTOCOL_1)

				/* V110 */

			D_IF_VAL			(V110)
				D_EXT_0_1		(_5)
				D_TABL			(V110_SYN_ASYN)
				D_TABL			(V110_NEGOTIATION)
				D_TABL			(V110_USER_RATE)
				D_EXT_0_1		(V110_5A)
				D_TABL			(V110_INTER_RATE)
				D_TABL			(V110_TX_NIC)
				D_TABL			(V110_RX_NIC)
				D_TABL			(V110_TX_FC)
				D_TABL			(V110_RX_FC)
				D_PAD			(V110_PAD_5B)
				D_EXT_0_1		(V110_5B)
				D_TABL	 		(V110_STOP_BIT)
				D_TABL	 		(V110_DATA_BIT)
				D_TABL	 		(V110_PARITY)
				D_EXT_0_1		(V110_5C)
				D_TABL	 		(V110_DUPLEX)
				D_TABL	 		(V110_MODEM)
			D_END_IF			(ENDIF_V110)

				/* NON CCITT (in accordance with BT2 testing) */

			D_IF_VAL			(NON_CCITT)
				D_EXT_0_1		(NON_CCITT_5)
				D_TABL			(NON_CCITT_SYN_ASYN)
				D_TABL			(NON_CCITT_NEGOTIATION)
				D_TABL			(NON_CCITT_USER_RATE)
			D_END_IF			(ENDIF_NON_CCITT)

			D_EXT_1				(END_5)

		D_END_IF				(_5_PR)

		D_FUNCTION			(OCTET_6)
		D_IF_VAL			(OCTET_6_PR)
			D_VAL				(L_ID_2)
			D_TABX				(PROTOCOL_ID_2)
			D_EXT_1				(_6)
		D_END_IF			(_6_PR)

		D_FUNCTION			(OCTET_7)
		D_IF_VAL			(OCTET_7_PR)
			D_VAL				(L_ID_3)
			D_TABX				(PROTOCOL_ID_3)
			D_EXT_1				(_7)
		D_END_IF			(_7_PR)

D_END	(BC_E)

START	(ETS_BC_P)
		TABL	(5,2,ETS_T_CODING_STD,				&i_bc[0].coding_std)
		TABL	(0,5,ETS_T_TRF_CAP_BC,				&i_bc[0].trf_cap)
		EXT_1   ()
		TABL	(5,2,ETS_T_TRF_MODE,				&i_bc[0].trf_mode)
		TABX	(0,5,ETS_TX_TRF_RATE,				&i_bc[0].trf_mode,	&i_bc[0].trf_rate)
		FUNCTION(ets_bc_4ab_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1	()
			TABL	(4,3,ETS_T_STRUCTURE,			&i_bc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_bc[0].config)
			VAL		(0,2,EST_DEMAND,				&i_bc[0].est)
			FUNCTION(ets_bc_4b_spdu)

			IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1 ()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_bc[0].symmetry)
				TABX	(0,5,ETS_TX_TRF_RATE,		&i_bc[0].trf_mode,	&i_bc[0].dest_rate)
			END_IF		()

		END_IF	()

		EXT_1   ()

		OPTIONAL_OCTET ()

		FUNCTION	(ets_bc_5_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,				&i_bc[0].layer_id_1)
			TABX	(0,5,ETS_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_1,		&i_bc[0].protocol_id_1)

				/* V110 */

			IF_VAL  	(I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1 ()
				TABL	(6,1,ETS_T_SYN_ASYN,			&i_bc[0].syn_asyn)
				TABL	(5,1,ETS_T_NEGOTIATION,			&i_bc[0].negotiation)
				TABL	(0,5,ETS_T_USER_RATE,			&i_bc[0].user_rate)
				EXT_0_1 ()
				TABL	(5,2,ETS_T_INTER_RATE,			&i_bc[0].inter_rate)
				TABL	(4,1,ETS_T_NIC_TX,				&i_bc[0].tx_nic)
				TABL	(3,1,ETS_T_NIC_RX,				&i_bc[0].rx_nic)
				TABL	(2,1,ETS_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
				TABL	(1,1,ETS_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,ETS_T_STOP_BIT,			&i_bc[0].stop_bit)
				TABL	(3,2,ETS_T_DATA_BIT,			&i_bc[0].data_bit)
				TABL	(0,3,ETS_T_PARITY,				&i_bc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,ETS_T_DUPLEX,				&i_bc[0].duplex)
				TABL	(0,6,ETS_T_MODEM,				&i_bc[0].modem)
			END_IF  	()

				/* NON CCITT */

			IF_VAL (I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
				EXT_0_1 ()
				TABL	(6,1,ETS_T_SYN_ASYN,			&i_bc[0].syn_asyn)
				TABL	(5,1,ETS_T_NEGOTIATION,			&i_bc[0].negotiation)
				TABL	(0,5,ETS_T_USER_RATE,			&i_bc[0].user_rate)
			END_IF		()

			EXT_1   ()

		END_IF		()

		FUNCTION(ets_bc_6_spdu)
		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_2,					&i_bc[0].layer_id_2)
			TABX	(0,5,ETS_TX_PROTOCOL_ID_BC,			&i_bc[0].layer_id_2,		&i_bc[0].protocol_id_2)
			EXT_1   ()
		END_IF		()

		FUNCTION(ets_bc_7_spdu)
		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_3,					&i_bc[0].layer_id_3)
			TABX	(0,5,ETS_TX_PROTOCOL_ID_BC,			&i_bc[0].layer_id_3,		&i_bc[0].protocol_id_3)
			EXT_1   ()
		END_IF		()

END (0)


			/* ---------- Call_identity (CALL_ID) */

D_START	(ETS_CALL_ID_P)
	D_TEXT  (CALL_ID_VAL)
D_END   (CALL_ID_E)

START	(ETS_CALL_ID_P)
	TEXT	(IA5, ANY_CHAR, &i_call_id[0].lgth, (uchar **)&i_call_id[0].p_val)
END	 (0)

			/* ---------- Call state (CALL_STATE) */

D_START	(ETS_CALL_STATE_P)
	D_TABL	  (CODING_STD)
	D_TABL	  (VAL_)
	D_END_OCTET (_3)
D_END   (CALL_STATE_E)

START	(ETS_CALL_STATE_P)
	TABL		(6,2,ETS_T_CODING_STD,		&i_call_state[0].coding_std)
	TABL		(0,6,ETS_T_CALL_STATE,		&i_call_state[0].val)
	END_OCTET   ()
END	 (0)

			/* ---------- Called party number (CALLED_NB) */

D_START	(ETS_CALLED_NB_P)
		D_TABL  (TYPE)
		D_TABL  (PLAN_ID)
		D_EXT_1 (_3)
		D_TEXT  (DIGIT_)
D_END   (CALLED_NB_E)

START	(ETS_CALLED_NB_P)
		TABL	(4,3,ETS_T_CALLED_NB_TYPE,  &i_called_nb[0].nb_type)
		TABL	(0,4,ETS_T_CALLED_NB_PLAN,  &i_called_nb[0].plan_id)
		EXT_1   ()
		TEXT	(IA5, ANY_CHAR, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END	 (0)

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(ETS_CALLED_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CALLED_SUB_ADD_E)

START	(ETS_CALLED_SUB_ADD_P)
		TABL	(4,3,ETS_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
		TABL	(3,1,ETS_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_called_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Calling party number (CALLING_NB) */

D_START	(ETS_CALLING_NB_P)
		D_TABL		(TYPE)
		D_TABL		(PLAN_ID)

		D_FUNCTION	(CALLING_NB_FCT)
		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (CALLING_NB_E)

START	(ETS_CALLING_NB_P)
		TABL	(4,3,ETS_T_CALLING_NB_TYPE, 	&i_calling_nb[0].nb_type)
		TABL	(0,4,ETS_T_CALLING_NB_PLAN, 	&i_calling_nb[0].plan_id)

		FUNCTION(ets_calling_nb_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,ETS_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,ETS_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,ANY_CHAR, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(ETS_CALLING_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CALLING_SUB_ADD_E)

START	(ETS_CALLING_SUB_ADD_P)
		TABL	(4,3,ETS_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		TABL	(3,1,ETS_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_calling_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Cause (CAUSE) */

D_START	(ETS_CAUSE_P)
		D_TABL	  (CODING_STD)
		D_PAD	  (NS_PAD_3)
		D_TABL	  (LOCATION)

		D_FUNCTION(CAUSE_3A)
		D_IF_VAL  (NOT_RECOM_Q931)
			D_EXT_0_1	(_3)
			D_TABL		(RECOMMENDATION)
		D_END_IF	(Q931E)

		D_EXT_1	 (_3A)

		D_TABL	  (C_CLASS)
		D_TABX	  (C_VAL)
		D_EXT_1	 (_4)
D_END   (CAUSE_E_A)

START	(ETS_CAUSE_P)
		TABL	(5,2,ETS_T_CODING_STD,			&i_cause[0].coding_std)
		PAD		(4,1)
		TABL	(0,4,ETS_T_LOCATION,			&i_cause[0].cause_loc)

		FUNCTION(ets_cause_3a_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(0,7,ETS_T_RECOMMENDATION,  &i_cause[0].recommend)
		END_IF	()

		EXT_1   ()

		TABL	(4,3,ETS_T_C_C,					&i_cause[0].cause_class)
		TABX	(0,4,ETS_TX_C_V,				&i_cause[0].cause_class,  &i_cause[0].cause_val)
		EXT_1   ()
END	 (ets_cause_spdu)

D_START	(ETS_DIAG_P)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_P)
	TEXT	(BINARY, ANY_OCTET, &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

D_START	(ETS_DIAG_CHAN_TYPE)
	D_PAD	(PADDING)
	D_TABL	(CHAN_TYPE)
	D_EXT_1	(DIAG)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_CHAN_TYPE)
	PAD		(4,3)
	TABL	(0,4,ETS_T_CHAN_TYPE, &i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_CHAN_NB)
	D_TABL		(CHAN_NUM)
	D_END_OCTET	(END_DIAG)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_CHAN_NB)
	TABL		(0,8,ETS_T_CHAN_NUMBER,	&i_cause[0].tmp)
	END_OCTET	()
END		(0)

D_START	(ETS_DIAG_CAUSE)
	D_TABL		(C_CLASS)
	D_TABX		(C_VAL)
	D_END_OCTET	(END_DIAG)
D_END   (CAUSE_E)

START	(ETS_DIAG_CAUSE)
	TABL		(4,3,ETS_T_C_C,					&i_cause[0].tmp)
	TABX		(0,4,ETS_TX_C_V,				&i_cause[0].tmp,  &i_cause[0].tmp)
	END_OCTET	()
END		(0)

D_START	(ETS_DIAG_TRF_CAP)
	D_PAD		(PADDING)
	D_TABL		(TRF_CAP)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_TABL		(TRF_CAP_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_TRF_CAP)
	PAD		(5,2)
	TABL	(0,5,ETS_T_TRF_CAP_BC,				&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(5,2)
	TABL	(0,5,ETS_T_TRF_CAP_BC,				&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_TRF_MODE)
	D_PAD		(PADDING)
	D_TABL		(TRF_MODE)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_TABL		(TRF_MODE_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_TRF_MODE)
	PAD		(0,5)
	TABL	(5,2,ETS_T_TRF_MODE,				&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(0,5)
	TABL	(5,2,ETS_T_TRF_MODE,				&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_TRF_RATE)
	D_PAD		(PADDING)
	D_TABX		(TRF_RATE)
	D_EXT_0_1	(DIAG)
	D_FUNCTION	(MODE_CIRC)
	D_PAD		(PADDING_2)
	D_TABX		(TRF_RATE_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_TRF_RATE)
	PAD		(5,2)
	TABX	(0,5,ETS_TX_TRF_RATE,				&i_cause[0].tmp,		&i_cause[0].tmp)
	EXT_0_1	()
	FUNCTION(ets_mode_circuit)
	PAD		(5,2)
	TABX	(0,5,ETS_TX_TRF_RATE,				&i_cause[0].tmp,		&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_STRUCTURE)
	D_PAD		(PADDING)
	D_TABL		(STRUCTURE)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_TABL		(STRUCTURE_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_STRUCTURE)
	PAD		(0,4)
	TABL	(4,3,ETS_T_STRUCTURE,				&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(0,4)
	TABL	(4,3,ETS_T_STRUCTURE,				&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_CONFIG)
	D_PAD		(PADDING)
	D_VAL		(CONFIG)
	D_PAD		(PADDING_1)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_VAL		(CONFIG_2)
	D_PAD		(PADDING_3)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_CONFIG)
	PAD		(4,3)
	VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_cause[0].tmp)
	PAD		(0,2)
	EXT_0_1	()
	PAD		(4,3)
	VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_cause[0].tmp)
	PAD		(0,2)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_EST)
	D_PAD		(PADDING)
	D_VAL		(EST)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_VAL		(EST_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_EST)
	PAD		(2,5)
	VAL		(0,2,EST_DEMAND,				&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(2,5)
	VAL		(0,2,EST_DEMAND,				&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_SYMMETRY)
	D_PAD		(PADDING)
	D_VAL		(SYMMETRY)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_VAL		(SYMMETRY_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_SYMMETRY)
	PAD		(0,5)
	VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(0,5)
	VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_LAYER_ID)
	D_TABL		(LAYER_ID)
	D_TABX		(PROT_ID)
	D_EXT_0_1	(DIAG)
	D_TABL		(LAYER_ID_)
	D_TABX		(PROT_ID_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_LAYER_ID)
	TABL	(5,2,ETS_T_LAYER_ID,				&i_cause[0].tmp)
	TABX	(0,5,ETS_TX_PROTOCOL_ID_BC,			&i_cause[0].tmp,	&i_cause[0].tmp)
	EXT_0_1	()
	TABL	(5,2,ETS_T_LAYER_ID,				&i_cause[0].tmp)
	TABX	(0,5,ETS_TX_PROTOCOL_ID_BC,			&i_cause[0].tmp,	&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_CONDITION)
	D_TABL		(CONDITION)
	D_PAD		(PADDING)
	D_EXT_1		(DIAG)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_CONDITION)
	TABL	(0,2,ETS_T_STATUS_CONDITION,		&i_cause[0].tmp)
	PAD		(2,5)
	EXT_1	()
END		(0)

D_START	(ETS_DIAG_MSG)
	D_TABL		(MSG)
	D_END_OCTET	(DIAG)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_MSG)
	TABL		(0,8,ETS_T_S_MSG_TYPE,			&i_cause[0].tmp)
	END_OCTET	()
END		(0)

D_START	(ETS_DIAG_TIMER)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(ETS_DIAG_TIMER)
	TEXT	(IA5, DIGIT, &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

			/* ---------- Channel idendification (CHAN_ID) */

D_START	(ETS_CHAN_ID_P)
	D_VAL   (INT_ID)
	D_TABL  (INT_TYPE)
	D_PAD   (NS_PAD_3)
	D_TABL  (PREF_EXCL)
	D_TABL  (D_CHAN_)
	D_TABX  (SEL)
	D_EXT_1 (_3)
D_END   (CHAN_ID_E)

START	(ETS_CHAN_ID_P)
	VAL		(6,1,INT_ID_IMPLICIT,   	&i_chan_id[0].int_id)
	TABL	(5,1,ETS_T_INT_TYPE,		&i_chan_id[0].int_type)
	PAD		(4,1)
	TABL	(3,1,ETS_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL	(2,1,ETS_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABX	(0,2,ETS_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	EXT_1   ()
END	(ets_chan_id_spdu)

	/*-----*/

	/* PRI-type chan_id */

D_START	(ETS_CHAN_ID_PRI_P)
	D_TABL  (CODING)
	D_VAL   (NB_MAP)
	D_TABL  (TYPE)
	D_EXT_1 (_3_2)
	D_TEXT  (NBER)
D_END   (CHAN_ID_PRI_E)

START	(ETS_CHAN_ID_PRI_P)
	TABL	(5,2,ETS_T_CODING_STD,  &i_chan_id[0].coding_std)
	VAL		(4,1,CHAN_NUMBER,   	&i_chan_id[0].nb_map)
	TABL	(0,4,ETS_T_CHAN_TYPE,   &i_chan_id[0].chan_type)
	EXT_1	()
	TEXT	(IA5,ANY_OCTET,			&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
END	(0)

#if NS_COLP_COLR == ON /* COLP and COLR Supp Services supported{ */

			/* ---------- Connected number (CONNECTED_NB) */

D_START	(ETS_CONN_NB_P)
		D_TABL		(TYPE)
		D_TABL		(PLAN_ID)

		D_FUNCTION	(CONN_NB_FCT)
		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CONN_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (CONN_NB_E)

#define ETS_T_CONN_NB_TYPE			ETS_T_CALLING_NB_TYPE		/* this field shall be coded as in Calling Nb IE */
#define ETS_T_CONN_NB_PLAN			ETS_T_CALLING_NB_PLAN		/* this field shall be coded as in Calling Nb IE */
#define ETS_T_CONN_NB_PRES			ETS_T_CALLING_NB_PRES		/* this field shall be coded as in Calling Nb IE */

START	(ETS_CONN_NB_P)
		TABL	(4,3,ETS_T_CONN_NB_TYPE, 	&i_conn_nb[0].nb_type)
		TABL	(0,4,ETS_T_CONN_NB_PLAN, 	&i_conn_nb[0].plan_id)

		FUNCTION(ets_conn_nb_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,ETS_T_CONN_NB_PRES, &i_conn_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,ETS_T_SCREEN_IND,		&i_conn_nb[0].screen_ind)
		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,ANY_CHAR, &i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END (0)

			/* ---------- Connected subaddress (CONNECTED_SUB_ADD) */

D_START	(ETS_CONN_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)
D_END   (CONN_SUB_ADD_E)

START	(ETS_CONN_SUB_ADD_P)
		TABL	(4,3,ETS_T_SUB_ADD_TYPE,	&i_conn_sub_add[0].sub_add_type)
		TABL	(3,1,ETS_T_SUB_ADD_IND,		&i_conn_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_conn_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_conn_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_conn_sub_add[0].lgth, (uchar **)&i_conn_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_conn_sub_add[0].lgth, (uchar **)&i_conn_sub_add[0].p_add)
		END_IF	()
END		(0)

#endif /* end of COLP and COLR Supp Services supported} */

			/* ---------- Congestion level (CONGEST_LEVEL) */

D_START	(ETS_CONGEST_LEVEL_P)
	D_TABL  	(CONG_LEV)
	D_END_OCTET	(CONG_LEV_SO)
D_END   (CONGEST_LEVEL_E)

START	(ETS_CONGEST_LEVEL_P)
	TABL		(0,4,ETS_T_CONGEST_LEVEL,   &i_congest_level[0].congest_level)
	END_OCTET	()
END	 (0)

			/* ---------- Date/time (DATE_TIME) */

D_START	(ETS_DATE_TIME_P)
	D_ANY_VAL   (YEAR_)
	D_END_OCTET (_3)
	D_ANY_VAL   (MONTH_)
	D_END_OCTET (_4)
	D_ANY_VAL   (DAY_)
	D_END_OCTET (_5)
	D_ANY_VAL   (HOUR_)
	D_END_OCTET (_6)
	D_ANY_VAL   (MINUTE_)
	D_END_OCTET (_7)
	D_OPTIONAL_OCTET	(OCTET_8_SECOND_)
	D_ANY_VAL   (SECOND_)
	D_END_OCTET (_8)
D_END			(END_SPDU)

START	(ETS_DATE_TIME_P)
	ANY_VAL		(0,8,   &i_date_time[0].year)
	END_OCTET   ()
	ANY_VAL		(0,8,   &i_date_time[0].month)
	END_OCTET   ()
	ANY_VAL		(0,8,   &i_date_time[0].day)
	END_OCTET   ()
	ANY_VAL		(0,8,   &i_date_time[0].hour)
	END_OCTET   ()
	ANY_VAL		(0,8,   &i_date_time[0].minute)
	END_OCTET   ()
	OPTIONAL_OCTET	()
	ANY_VAL		(0,8,   &i_date_time[0].second)
	END_OCTET   ()
END				(0)

			/* ---------- Display (DISPLAY) */

D_START	(ETS_DISPLAY_P)
	D_TEXT  (INFO_)
D_END   (DISPLAY_E)

START	(ETS_DISPLAY_P)
	TEXT	(IA5,ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END	 (0)

#if NS_SUPP_SERVICES == ON

			/* ---------- Extended Facility (EXTENDED_FAC) */

D_START		(ETS_EXT_FAC_P)
	D_VAL	(SERVICE_DISCR)
	D_PAD	(_7_6_)
	D_EXT_1	(_3_)
D_END		(EXT_FAC_E)

START		(ETS_EXT_FAC_P)
	VAL		(0,5, FAC_REMOTE_OP_PROT, &i_extended_fac[0].service_discr)
	PAD		(5,2)
	EXT_1	()
END	(ets_extended_fac_spdu)

#endif	/* NS_SUPP_SERVICES */

			/* ---------- Facility (FACILITY) */

#if NS_SUPP_SERVICES == ON

D_START		(ETS_FACILITY_P)
	D_VAL	(SERVICE_DISCR)
	D_PAD	(_7_6_)
	D_EXT_1	(_3_)
D_END		(FACILITY_E)

START		(ETS_FACILITY_P)
	VAL		(0,5, FAC_REMOTE_OP_PROT, &i_facility[0].service_discr)
	PAD		(5,2)
	EXT_1	()
END	(ets_facility_spdu)

#else	/* NS_SUPP_SERVICES = OFF -> Default facility decoding = Transparent Facility */

D_START		(ETS_FACILITY_P)
	D_VAL	(SERVICE_DISCR)
	D_PAD	(_7_6_)
	D_EXT_1	(_3_)
	D_TEXT	(_FAC_INFO_)
D_END		(FAC_P)

START		(ETS_FACILITY_P)
	VAL		(0,5, FAC_SUPPLEMENTARY, &i_facility[0].service_discr)
	PAD		(5,2)
	EXT_1	()
	TEXT	(BINARY,ANY_OCTET,&i_facility[0].lgth, (uchar **)&i_facility[0].p_info)
END			(0)

#endif	/* NS_SUPP_SERVICES */

			/* ---------- High layer compatibility (HLC) */

D_START	(ETS_HLC_P)
		D_TABL				(CODING_STD)
		D_VAL				(INTERPRETATION)
		D_VAL				(PRESENTATION)
		D_EXT_1				(_3)
		D_IF_VAL			(IF_4)
			D_TABL			(TELESERVICE)

			D_IF_TABL		(IS_EXT_TELESERVICE)
				D_EXT_0_1	(_4)
				D_TABL		(EXT_TELESERVICE)
			D_END_IF		(IS_EXTENDED)
			D_EXT_1			(_5)
		D_ELSE				(ELSE_4)
			D_ANY_VAL		(TELESERVICE_SPF)
			D_EXT_1			(_4_SPF)
		D_END_IF			(ENDIF_4)
D_END						(HLC_E)

START	(ETS_HLC_P)
		TABL				(5,2,ETS_T_CODING_STD,		&i_hlc[0].coding_std)
		VAL					(2,3,INTER_CCITT_CEPT,		&i_hlc[0].interpretation)
		VAL					(0,2,PRESENTATION_PROFIL,	&i_hlc[0].pres)
		EXT_1				()

		IF_VAL				(I_IF, &i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
			TABL			(0,7,ETS_T_TELESERVICE_CCITT,&i_hlc[0].teleservice)

			IF_TABL			(I_IF, &i_hlc[0].teleservice, IN, ETS_T_TELESERVICE_EXT)
				EXT_0_1		()
				TABL		(0,7,ETS_T_TELESERVICE_CCITT,&i_hlc[0].ext_teleservice)
			END_IF			()
			EXT_1			()
		ELSE				()
			ANY_VAL			(0,7,	&i_hlc[0].teleservice)
			EXT_1			()
		END_IF				()
END							(ets_bc_teleservice_compatibility)

			/* ---------- Keypad (KEYPAD) */

D_START	(ETS_KEYPAD_P)
	D_TEXT  (VAL_)
D_END		(KEYPAD_E)

START	(ETS_KEYPAD_P)
	TEXT	(IA5,ANY_CHAR, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END			(0)

			/* ---------- Low layer compatibility (LLC) */

D_START	(ETS_LLC_P)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)

		D_FUNCTION	(LLC_3A_SET)
		D_IF_VAL	(LLC_3A_TEST)
			D_EXT_0_1	(LLC_3)
			D_TABL		(OUT_BAND_NEG)
			D_PAD		(NS_PAD_3A)
		D_END_IF (LLC_3A_END_IF)
		D_EXT_1		(_3A)

		D_TABL		(TRF_MODE)
		D_TABX		(TRF_RATE)
		D_FUNCTION  (IF_4AB)

		D_IF_VAL	(_4AB_NOT_DEFAULT)
			D_EXT_0_1	(_4)
			D_TABL	 	(STRUCT)
			D_VAL	 	(CONFIG)
			D_VAL	 	(EST)
			D_FUNCTION	(IF_4B)

			D_IF_VAL	(_4B_NOT_DEFAULT)
				D_EXT_0_1	(_4A)
				D_VAL		(SYMMETRY)
				D_TABX		(DEST_RATE)
			D_END_IF	(E_4B_NOT_DEFAULT)
		D_END_IF	(E_4AB_NOT_DEFAULT)
		D_EXT_1	 	(_4B)

		D_OPTIONAL_OCTET	(_5_6_7)

		D_FUNCTION	(IF_5)
		D_IF_VAL	(LLC_5_PR)

			D_VAL		(LAYER_1)
			D_TABL		(PROTOCOL_1)

				/* V110 */

			D_IF_VAL		(V110)
				D_EXT_0_1	(_5_V110)
				D_TABL		(V110_SYN_ASYN)
				D_TABL		(V110_NEGOTIATION)
				D_TABL		(V110_USER_RATE)
				D_EXT_0_1	(V110_5A)
				D_TABL		(V110_INTER_RATE)
				D_TABL		(V110_TX_NIC)
				D_TABL		(V110_RX_NIC)
				D_TABL		(V110_TX_FC)
				D_TABL		(V110_RX_FC)
				D_PAD		(V110_PAD_5B)
				D_EXT_0_1	(V110_5B)
				D_TABL		(V110_STOP_BIT)
				D_TABL		(V110_DATA_BIT)
				D_TABL		(V110_PARITY)
				D_EXT_0_1	(V110_5C)
				D_TABL		(V110_DUPLEX)
				D_TABL		(V110_MODEM)
			D_END_IF		(ENDIF_V110)

				/* V120 */

			D_IF_VAL		(V120_)
				D_EXT_0_1	(_5_V120)
				D_TABL		(V120_SYN_ASYN)
				D_TABL		(V120_NEGOTIATION)
				D_TABL		(V120_USER_RATE)
				D_EXT_0_1	(V120_5A)
				D_TABL		(V120_HDR)
				D_TABL		(V120_MULTI_FRAME)
				D_TABL		(V120_OP_MODE)
				D_TABL		(V120_LLI)
				D_TABL		(V120_ASSIGN)
				D_TABL		(V120_BAND)
				D_PAD		(V120_PAD_5B)
				D_EXT_0_1	(V120_5B)
				D_TABL		(V120_STOP_BIT)
				D_TABL		(V120_DATA_BIT)
				D_TABL		(V120_PARITY)
				D_EXT_0_1	(V120_5C)
				D_TABL		(V120_DUPLEX)
				D_TABL		(V120_MODEM)
			D_END_IF	(ENDIF_V120)

			D_EXT_1		(_5_)
		D_END_IF	(ENDIF_5_PR)

		D_FUNCTION	(OCTET_6)
		D_IF_VAL	(OCTET_6_PR)
			D_VAL		(L_ID_2)
			D_TABL		(PROTOCOL_ID_2)
			D_EXT_0_1	(_6)
			D_EXT_1		(_6A)
		D_END_IF	(ENDIF_6_PR)

		D_FUNCTION	(OCTET_7)
		D_IF_VAL	(OCTET_7_PR)
			D_VAL		(L_ID_3)
			D_TABL		(PROTOCOL_ID_3)
			D_EXT_0_1	(_7)
			D_EXT_1		(_7A)
		D_END_IF	(ENDIF_7_PR)

D_END (LLC_E)

START	(ETS_LLC_P)
		TABL	(5,2,ETS_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(0,5,ETS_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)

		FUNCTION(ets_llc_3a_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(6,1,ETS_T_OUT_BAND_NEG,		&i_llc[0].out_band_neg)
			PAD		(0,6)
		END_IF	()
		EXT_1   ()

		TABL	(5,2,ETS_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABX	(0,5,ETS_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
		FUNCTION(ets_llc_4ab_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(4,3,ETS_T_STRUCTURE,			&i_llc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
			VAL		(0,2,EST_DEMAND,				&i_llc[0].est)

			FUNCTION(ets_llc_4b_spdu)
			IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1 ()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_llc[0].symmetry)
				TABX	(0,5,ETS_TX_TRF_RATE,			&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
			END_IF	()
		END_IF	()
		EXT_1	()

		OPTIONAL_OCTET  ()

			/* following octets may be optional in some other circumstances */

		FUNCTION(ets_llc_5_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
			TABL	(0,5,ETS_T_PROTOCOL_ID_LLC_1,	&i_llc[0].protocol_id_1)

				/* V110 */

			IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1 ()
				TABL	(6,1,ETS_T_SYN_ASYN,			&i_llc[0].syn_asyn)
				TABL	(5,1,ETS_T_NEGOTIATION,			&i_llc[0].in_band_neg)
				TABL	(0,5,ETS_T_USER_RATE,			&i_llc[0].user_rate)
				EXT_0_1 ()
				TABL	(5,2,ETS_T_INTER_RATE,			&i_llc[0].inter_rate)
				TABL	(4,1,ETS_T_NIC_TX,				&i_llc[0].tx_nic)
				TABL	(3,1,ETS_T_NIC_RX,				&i_llc[0].rx_nic)
				TABL	(2,1,ETS_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
				TABL	(1,1,ETS_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,ETS_T_STOP_BIT,			&i_llc[0].stop_bit)
				TABL	(3,2,ETS_T_DATA_BIT,			&i_llc[0].data_bit)
				TABL	(0,3,ETS_T_PARITY,				&i_llc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,ETS_T_DUPLEX,				&i_llc[0].duplex)
				TABL	(0,6,ETS_T_MODEM,				&i_llc[0].modem)
			END_IF  ()

				/* V120 */

			IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
				EXT_0_1 ()
				TABL	(6,1,ETS_T_SYN_ASYN,			&i_llc[0].syn_asyn)
				TABL	(5,1,ETS_T_NEGOTIATION,			&i_llc[0].in_band_neg)
				TABL	(0,5,ETS_T_USER_RATE,			&i_llc[0].user_rate)
				EXT_0_1 ()
				TABL	(6,1,ETS_T_HEADER,				&i_llc[0].hdr)
				TABL	(5,1,ETS_T_MULTI_FRAME,			&i_llc[0].multi_frame)
				TABL	(4,1,ETS_T_OP_MODE,				&i_llc[0].op_mode)
				TABL	(3,1,ETS_T_LLI,					&i_llc[0].lli)
				TABL	(2,1,ETS_T_ASSIGN,				&i_llc[0].assign)
				TABL	(1,1,ETS_T_BAND,				&i_llc[0].band)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,ETS_T_STOP_BIT,			&i_llc[0].stop_bit)
				TABL	(3,2,ETS_T_DATA_BIT,			&i_llc[0].data_bit)
				TABL	(0,3,ETS_T_PARITY,				&i_llc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,ETS_T_DUPLEX,				&i_llc[0].duplex)
				TABL	(0,6,ETS_T_MODEM,				&i_llc[0].modem)
			END_IF	()
			EXT_1	()

		END_IF ()	/* octet 5 present */

		FUNCTION(ets_llc_6_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_2,				&i_llc[0].layer_id_2)
			TABL	(0,5,ETS_T_PROTOCOL_ID_LLC_2,	&i_llc[0].protocol_id_2)
			EXT_0_1 ()
			/* No instruction for optional octet 6a to allow only reception */
			EXT_1   ()
		END_IF ()	/* octet 6 present */

		FUNCTION(ets_llc_7_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_3,				&i_llc[0].layer_id_3)
			TABL	(0,5,ETS_T_PROTOCOL_ID_LLC_3,	&i_llc[0].protocol_id_3)
			EXT_0_1	()
			/* No instruction for optional octet 7a to allow only reception */
			EXT_1	()
		END_IF	()	/* octet 7 present */

END (0)


#if NS_SPF_FACILITY == ON

			/* ---------- Network-specific facilities (SPF_FAC) */

D_START	(ETS_SPF_FAC_P)
	D_ANY_VAL		(NETWORK_ID_LGTH)
	D_END_OCTET		(_3)

	D_IF_VAL		(IF_3)
		D_TABL		(TYPE_NET_ID)
		D_TABL		(PLAN_NET_ID)
		D_EXT_1		(_3_1)
		D_FUNCTION	(NET_ID)
	D_END_IF		(_3_)
	D_TEXT			(_FAC_INFO)
D_END				(SPF_FAC_E)

START	(ETS_SPF_FAC_P)
	ANY_VAL			(0,8,&i_spf_fac[0].net_id_lgth)
	END_OCTET		()

	IF_VAL			(I_IF, &i_spf_fac[0].net_id_lgth, NE, 0)
		TABL		(4,3,ETS_T_NET_ID_TYPE,	 &i_spf_fac[0].Net_id_type)
		TABL		(0,4,ETS_T_NET_ID_PLAN,	 &i_spf_fac[0].Net_id_plan)
		EXT_1		()
		FUNCTION	(ets_spf_fac_spdu)
	END_IF			()
	TEXT			(BINARY,ANY_OCTET, &i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
END					(0)

#endif

			/* ---------- Notification indicator (NOTIF_IND) */

D_START	(ETS_NOTIF_IND_P)
	D_TABL  (DESCR)
	D_EXT_1 (_3)
D_END		(NOTIF_IND_E)

START	(ETS_NOTIF_IND_P)
	TABL	(0,7,ETS_T_NOTIF_IND_DESCR,	 &i_notif_ind[0].notif_descr)
	EXT_1   ()

#if NS_SUPP_SERVICES == ON
END			(ets_notif_ind_spdu)
#else
END			(0)
#endif

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(ETS_PROGRESS_IND_P)
	D_TABL  (CODING_STD)
	D_PAD   (NS_PAD_3)
	D_TABL  (LOCATION)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(ETS_PROGRESS_IND_P)
	TABL	(5,2,ETS_T_CODING_STD,				&i_progress_ind[0].coding_std)
	PAD		(4,1)
	TABL	(0,4,ETS_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	EXT_1   ()
	TABL	(0,7,ETS_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
	EXT_1   ()
END			(ets_progress_ind_spdu)

#if NS_SS_DIVERSION == ON /* { */

			/* ---------- Redirecting number (REDIR_NB) */

D_START	(ETS_REDIR_NB_P)
	D_TABL  	(_PLAN_ID)
	D_TABL  	(TYPE_)
	D_EXT_0_1	(_3)
	D_PAD		(_3a_spare)
	D_ANY_VAL	(PRES_)
	D_EXT_0_1	(_3a)
	D_TABL		(REASON_REDIR)
	D_PAD		(_3b_spare)
	D_EXT_1		(_3b_)
	D_OPTIONAL_OCTET (NB_OPTIONAL)
	D_TEXT		(DIGIT_)
D_END	(REDIR_NB_E)

#define ETS_T_REDIR_NB_TYPE		ETS_T_CALLING_NB_TYPE		/* this field shall be coded as in Calling Nb IE */
#define ETS_T_REDIR_NB_PLAN		ETS_T_CALLING_NB_PLAN		/* this field shall be coded as in Calling Nb IE */

START	(ETS_REDIR_NB_P)
	TABL	(0,4,ETS_T_REDIR_NB_PLAN,  	&i_redir_nb[0].plan_id)
	TABL	(4,3,ETS_T_REDIR_NB_TYPE,	&i_redir_nb[0].nb_type)
	EXT_0_1 ()
	PAD		(0,5)
	ANY_VAL	(5,2,						&i_redir_nb[0].pres)
	EXT_0_1 ()
	TABL	(0,4,ETS_T_REASON_REDIR,	&i_redir_nb[0].reason)
	PAD		(4,3)
	EXT_1	()
	OPTIONAL_OCTET ()
	TEXT	(IA5,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END		(0)

			/* ---------- Redirection number (REDIRECTION_NB) */

D_START	(ETS_REDIRECTION_NB_P)
	D_TABL  	(_PLAN_ID)
	D_TABL  	(TYPE_)
	D_EXT_0_1	(_3)
	D_PAD		(_3a_spare)
	D_ANY_VAL	(PRES_)
	D_EXT_1		(_3a_)
	D_OPTIONAL_OCTET (NB_OPTIONAL)
	D_TEXT		(DIGIT_)
D_END	(REDIRECTION_NB_E)

#define ETS_T_REDIRECT_NB_TYPE		ETS_T_CALLING_NB_TYPE		/* this field shall be coded as in Calling Nb IE */
#define ETS_T_REDIRECT_NB_PLAN		ETS_T_CALLING_NB_PLAN		/* this field shall be coded as in Calling Nb IE */

START	(ETS_REDIRECTION_NB_P)
	TABL	(0,4,ETS_T_REDIRECT_NB_PLAN,	&i_redirection_nb[0].plan_id)
	TABL	(4,3,ETS_T_REDIRECT_NB_TYPE,	&i_redirection_nb[0].nb_type)
	EXT_0_1 ()
	PAD		(0,5)
	ANY_VAL	(5,2,							&i_redirection_nb[0].pres)
	EXT_1	()
	OPTIONAL_OCTET ()
	TEXT	(IA5,DIGIT, &i_redirection_nb[0].lgth, (uchar **)&i_redirection_nb[0].p_add)
END		(0)

#endif /* end of NS_SS_DIVERSION = ON} */

			/* ---------- Restart indicator */

D_START		(ETS_RESTART_IND_P)
	D_PAD	(NS_PAD_)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_IND_E)

START		(ETS_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,ETS_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
	EXT_1	()
END			(ets_restart_spdu)

			/* ---------- Signal (SIGNAL) */

D_START	(ETS_SIGNAL_P)
	D_TABL		(VAL_)
	D_END_OCTET	(_3)
D_END			(SIGNAL_E)

START	(ETS_SIGNAL_P)
	TABL		(0,8,ETS_T_SIGNAL_VAL,	&i_signal[0].val)
	END_OCTET	()
END				(0)

			/* ---------- Transit network selection (TRANSIT_NET_SEL) */

D_START	(ETS_TRANSIT_NET_SEL_P)
	D_TABL  (TYPE)
	D_TABL  (PLAN)
	D_EXT_1 (_3)
	D_TEXT  (NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(ETS_TRANSIT_NET_SEL_P)
	TABL	(4,3,ETS_T_NET_ID_TYPE,	&i_transit_net_sel[0].net_id_type)
	TABL	(0,4,ETS_T_NET_ID_PLAN,	&i_transit_net_sel[0].net_id_plan)
	EXT_1   ()
	TEXT	(IA5,ANY_CHAR,			&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

			/* ---------- User to user information (UUI) */

D_START	(ETS_UUI_P)
	D_TABL			(PROTOCOL_DISCR)
	D_END_OCTET		(_3)
	D_OPTIONAL_OCTET(_UUI)

	D_IF_VAL		(DISCR_IA5)
		D_TEXT  	(INFO_IA5)
	D_ELSE			(OTHER_DISCR)
		D_TEXT  	(INFO_OTHER)
	D_END_IF		(DISCR)
D_END				(UUI_E)

START	(ETS_UUI_P)
	TABL			(0,8,ETS_T_UUI_PROTOCOL_DISCR,  &i_uui[0].protocol_discr)
	END_OCTET   	()
	OPTIONAL_OCTET	()

	IF_VAL			(I_IF, &i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT		(IA5,ANY_CHAR,					&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE			()
		TEXT		(BINARY, ANY_OCTET, 			&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF			()
END					(0)

/*-------------------- Codeset 6 IE (and codeset 5 for Advice Of Charge) */

			/* --------- Default Charge advice (ADVICE_CHARGE) */

D_START	(ETS_DF_ADVICE_CHARGE_P)
	D_TABL		(CODING_STD)
	D_IF_VAL	(CODING_STD_)
		D_VAL	(NATIONAL_STD_)
	D_ELSE		(NOT_CODING_STD)
		D_VAL	(CEPT_STD_)
	D_END_IF	(CODING)
	D_PAD		(_3_)
	D_TABL		(CHARGING_TYPE)
	D_EXT_0_1	(_3AB)
	D_FUNCTION	(_3B_PRESENT)
	D_IF_VAL	(OCTET_3B_PRESENT)
		D_TABL		(CHARGING_PERIOD)
	D_ELSE		(OCTET_3B_ABSENT)
		D_ANY_VAL	(CHARGING_PERIOD_SECOND)
	D_END_IF	(OCTET_3A)
	D_EXT_0_1	(_3B)
	D_ANY_VAL	(CHARGING_PERIOD_M)
	D_EXT_1	(OCTET_3)
	D_OPTIONAL_OCTET (_DATA_)
	D_TEXT	(CHARGING_DATA)
D_END		(ADVICE_CHARGE_E)

START	(ETS_DF_ADVICE_CHARGE_P)
	TABL	(5,2,ETS_T_CODING_STD,			&i_advice_charge[0].coding_std)
	IF_VAL	(I_IF, &i_advice_charge[0].coding_std, EQ, CODING_STD_NATIONAL)
		VAL	(4,1,NATIONAL_STD, 				&i_advice_charge[0].cept_std)
	ELSE	()
		VAL	(4,1,CEPT_STD, 					&i_advice_charge[0].cept_std)
	END_IF	()
	PAD		(3,1)
	TABL	(0,3,ETS_T_CHARGING_TYPE,		&i_advice_charge[0].charge_type)
	EXT_0_1	()

	FUNCTION(ets_df_advice_ch_3a_b_spdu)
	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)		/* octet 3B present ? */
		TABL	(0,7,ETS_T_CHARGING_PERIOD,	&i_advice_charge[0].charge_period)
	ELSE	()
		ANY_VAL	(0,7,						&i_advice_charge[0].charge_period)
	END_IF	()
	EXT_0_1	()
	ANY_VAL	(0,7,							&i_advice_charge[0].charge_period_m)
	EXT_1	()
	OPTIONAL_OCTET ()
	TEXT	(BINARY, ANY_OCTET, &i_advice_charge[0].data_lgth, (uchar **)&i_advice_charge[0].p_data)
END			(0)


D_START	(ETS_ADVICE_CHARGE_P)
D_END	(ADVICE_CHARGE_E)

START	(ETS_ADVICE_CHARGE_P)
END	(ets_advice_of_charge_dcod_spdu)

/*EOF*/

