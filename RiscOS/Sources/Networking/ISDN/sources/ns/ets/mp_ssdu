
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.ets
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	ets_df_advice_ch_period_ssdu		(Void_parm);
	uchar	ets_advice_of_charge_dcod_ssdu		(Void_parm);
	uchar	ets_bc_ra_ssdu						(Void_parm);
	uchar	ets_cause_diag_ssdu					(Void_parm);
	uchar	ets_chan_id_ssdu					(Void_parm);
	uchar	ets_chan_id_chan_nb_ssdu			(Void_parm);
#	if NS_SUPP_SERVICES == ON
		uchar	ets_facility_ssdu				(Void_parm);
#	endif
	uchar	ets_llc_ra_ssdu						(Void_parm);
#	if NS_SPF_FACILITY == ON
		uchar	ets_spf_fac_ssdu				(Void_parm);
#	endif

#endif

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
			(Ordered alphabetically)
		*/

		/* Default ADVICE_CHARGE analysis */

D_START	(ETS_P_DF_ADVICE_CHARGE)
	D_TABL		(CODING_STD)
	D_IF_VAL	(CODING_STD_)
		D_VAL	(NATIONAL_STD_)
	D_ELSE		(NOT_CODING_STD)
		D_VAL	(CEPT_STD_)
	D_END_IF	(CODING)
	D_TABL		(CHARGING_TYPE_)
	D_FUNCTION	(_CHARG_PERIOD_M_PRESENT)
	D_IF_VAL	(OCTET_3B_PRESENT)
		D_TABL		(CHARGING_PERIOD_)
	D_ELSE		(_CHARG_PERIOD_M_ABSENT)
		D_ANY_VAL	(CHARGING_PERIOD_SECOND_)
	D_END_IF	(_CHARG_PERIOD_MULTIPLIER)
	D_ANY_VAL	(CHARGING_PERIOD_M_)
	D_TEXT	(CHARGING_DATA_)
D_END		(ADVICE_CHARGE_E)

START	(ETS_P_DF_ADVICE_CHARGE)
	TABL	(ETS_T_CODING_STD,			&i_advice_charge[0].coding_std)
	IF_VAL	(&i_advice_charge[0].coding_std, EQ, CODING_STD_NATIONAL)
		VAL	(NATIONAL_STD, 				&i_advice_charge[0].cept_std)
	ELSE	()
		VAL	(CEPT_STD, 					&i_advice_charge[0].cept_std)
	END_IF	()
	TABL	(ETS_T_CHARGING_TYPE,		&i_advice_charge[0].charge_type)
	FUNCTION(ets_df_advice_ch_period_ssdu)
	IF_VAL	(&ie_if_flag, EQ, ON)		/* 'Charging period multiplier' present ? */
		TABL	(ETS_T_CHARGING_PERIOD,	&i_advice_charge[0].charge_period)
	ELSE	()
		ANY_VAL	(						&i_advice_charge[0].charge_period)
	END_IF	()
	ANY_VAL	(							&i_advice_charge[0].charge_period_m)
	TEXT	(0,ETS_MX_SZ_ADVICE_CHARGE, ANY_OCTET, &i_advice_charge[0].data_lgth, (uchar **)&i_advice_charge[0].p_data)
END			(0)

D_START	(ETS_P_ADVICE_CHARGE)
D_END	(ADVICE_CHARGE_E)

START	(ETS_P_ADVICE_CHARGE)
END	(ets_advice_of_charge_dcod_ssdu)

			/* BC : bearer capabilities */

D_START	(ETS_P_BC)
		D_TABL	(CODING_STD)
		D_TABL	(TRF_CAP)
		D_TABL	(TRF_MODE)
		D_TABX	(TRF_RATE)
		D_TABL	(STRUCT)
		D_TABX	(DEST_RATE)
		D_TABX	(PROTOCOL_1)
D_END (P_BC_1)

START	(ETS_P_BC)
		TABL	(ETS_T_CODING_STD,			&i_bc[0].coding_std)
		TABL	(ETS_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
		TABL	(ETS_T_TRF_MODE,			&i_bc[0].trf_mode)
		TABX	(ETS_TX_TRF_RATE,			&i_bc[0].trf_mode,		&i_bc[0].trf_rate)
		TABL	(ETS_T_STRUCTURE,			&i_bc[0].structure)
		TABX	(ETS_TX_TRF_RATE,			&i_bc[0].trf_mode,		&i_bc[0].dest_rate)
		TABX	(ETS_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_1,	&i_bc[0].protocol_id_1)
END	(ets_bc_ra_ssdu)

		/* V110 */

D_START	(ETS_P_BC_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
D_END	(ENDIF_V110)

START	(ETS_P_BC_V110)
			TABL		(ETS_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL		(ETS_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL		(ETS_T_USER_RATE,			&i_bc[0].user_rate)
			TABL		(ETS_T_INTER_RATE,			&i_bc[0].inter_rate)
			TABL		(ETS_T_NIC_TX,				&i_bc[0].tx_nic)
			TABL		(ETS_T_NIC_RX,				&i_bc[0].rx_nic)
			TABL		(ETS_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
			TABL		(ETS_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
			TABL		(ETS_T_STOP_BIT,			&i_bc[0].stop_bit)
			TABL		(ETS_T_DATA_BIT,			&i_bc[0].data_bit)
			TABL		(ETS_T_PARITY,				&i_bc[0].parity)
			TABL		(ETS_T_DUPLEX,				&i_bc[0].duplex)
			TABL		(ETS_T_MODEM,				&i_bc[0].modem)
END	(0)

	/* NON CCITT (in accordance with BT2 testing) */

D_START	(ETS_P_BC_NON_CCITT)
			D_TABL		(NON_CCITT_SYN_ASYN)
			D_TABL		(NON_CCITT_NEGOTIATION)
			D_TABL		(NON_CCITT_USER_RATE)
			D_PAD		(P_1_8_15_19)
D_END	(ETS_END_P_BC_NON_CCITT)

START	(ETS_P_BC_NON_CCITT)
			TABL		(ETS_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL		(ETS_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL		(ETS_T_USER_RATE,			&i_bc[0].user_rate)
			PAD			(10)
END	(0)

		/* other rate adaption */

D_START	(ETS_P_BC_PAD)
			D_PAD		(P_1_8_15_19)
D_END (END_PAD_RA)

START	(ETS_P_BC_PAD)
			PAD			(13)
END (0)

D_START	(ETS_P_BC_2)
		D_TABX	(PROTOCOL_ID_2)
		D_TABX	(PROTOCOL_ID_3)
D_END	(BC_E)

START	(ETS_P_BC_2)
		TABX	(ETS_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_2,	&i_bc[0].protocol_id_2)
		TABX	(ETS_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_3,	&i_bc[0].protocol_id_3)
END 	(0)

/*-------------------------------------------------------------------------*/

			/* CALL_ID : call identity */

D_START	(ETS_P_CALL_ID)
	D_TEXT (CALL_ID_VAL_)
D_END (CALL_ID_END)

START	(ETS_P_CALL_ID)
	TEXT (1,ETS_MX_SZ_CALL_ID,ANY_CHAR,	&i_call_id[0].lgth,(uchar **)&i_call_id[0].p_val)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALL_STATE : call state */

D_START	(ETS_P_CALL_STATE)
	D_TABL (CODING_STD)
	D_TABL (VAL_)
D_END (CALL_STATE_END)

START	(ETS_P_CALL_STATE)
	TABL (ETS_T_CODING_STD,			&i_call_state[0].coding_std)
	TABL (ETS_T_CALL_STATE,			&i_call_state[0].val)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(ETS_P_CALLED_NB)
	D_TABL (CALLED_NB_NBERING_TYPE)
	D_TABL (CALLED_NB_NBERING_PLAN_ID)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (P_CALLED_NB_END)

START	(ETS_P_CALLED_NB)
	TABL (ETS_T_CALLED_NB_TYPE,				&i_called_nb[0].nb_type)
	TABL (ETS_T_CALLED_NB_PLAN,				&i_called_nb[0].plan_id)
	TEXT (1,ETS_MX_SZ_CALLED_NB,ANY_CHAR,	&i_called_nb[0].lgth,	(uchar **)&i_called_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_SUB_ADD : called party sub address */

D_START	(ETS_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END (P_CALLED_SUB_ADD_END)

START	(ETS_P_CALLED_SUB_ADD)
	TABL (ETS_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
	TABL (ETS_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)

	IF_VAL  (&i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,ETS_MX_SZ_CALLED_SUB_ADD,DIGIT,		&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	ELSE	()
		TEXT (1,ETS_MX_SZ_CALLED_SUB_ADD,ANY_OCTET,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	END_IF	()
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(ETS_P_CALLING_NB)
	D_TABL (TYPE_N)
	D_TABL (PLAN_N)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_N)
	D_TEXT (DIGIT_N)
D_END (P_CALLING_NB_N_END)

START	(ETS_P_CALLING_NB)
	TABL (ETS_T_CALLING_NB_TYPE,	&i_calling_nb[0].nb_type)
	TABL (ETS_T_CALLING_NB_PLAN,	&i_calling_nb[0].plan_id)
	TABL (ETS_T_CALLING_NB_PRES,	&i_calling_nb[0].pres)
	TABL (ETS_T_SCREEN_IND,			&i_calling_nb[0].screen_ind)
	TEXT (0,ETS_MX_SZ_CALLING_NB,ANY_CHAR,	&i_calling_nb[0].lgth,	(uchar **)&i_calling_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(ETS_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END (P_CALLING_SUB_ADD_END)

START	(ETS_P_CALLING_SUB_ADD)
	TABL (ETS_T_SUB_ADD_TYPE,		&i_calling_sub_add[0].sub_add_type)
	TABL (ETS_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)

	IF_VAL  (&i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,ETS_MX_SZ_CALLING_SUB_ADD,DIGIT,		&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
	ELSE	()
		TEXT (1,ETS_MX_SZ_CALLING_SUB_ADD,ANY_OCTET,	&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
	END_IF	()

END (0)


/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(ETS_P_CAUSE)
	D_TABL (CODING_STD)
	D_TABL (LOCATION)
	D_TABL (RECOMMENDATION)
	D_TABL (OM_CLASS)
	D_TABX (VAL_)
	D_TEXT	(DIAGNOSTICS)
D_END (CAUSE_END)

START	(ETS_P_CAUSE)
	TABL (ETS_T_CODING_STD,					&i_cause[0].coding_std)
	TABL (ETS_T_LOCATION,					&i_cause[0].cause_loc)
	TABL (ETS_T_RECOMMENDATION,				&i_cause[0].recommend)
	TABL (ETS_T_C_C,						&i_cause[0].cause_class)
	TABX (ETS_TX_C_V,						&i_cause[0].cause_class, &i_cause[0].cause_val)
	TEXT (0,ETS_MX_SZ_CAUSE_DIAG,ANY_OCTET,	&i_cause[0].diag_lgth,(uchar **)&i_cause[0].p_diagnostic)
END (ets_cause_diag_ssdu)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

D_START	(ETS_P_CHAN_ID)
	D_TABL	(INT_TYPE)
	D_TABL	(PREF_EXCL)
	D_TABL	(D_CHAN_)
	D_TABX	(SEL)

	D_IF_VAL	(INT_PRI)

		D_IF_VAL	(CHAN_SEL_AS_INDICATED)
			D_TABL	(CODING_STD)
			D_TABL	(TYPE)
			D_FUNCTION (_CHAN_NB_)
			D_TEXT	(CHANNEL_NUMBERS)
		D_ELSE		(OTHER_CHAN_SEL)
			D_PAD	(_CODING_CHAN_TYPE_TEXT)
		D_END_IF	(CHAN_SEL_)

	D_ELSE		(NO_INT_PRI)
		D_PAD	(CODING_CHAN_TYPE_TEXT)
	D_END_IF	(BRI_INT)
D_END (P_CHAN_ID_END)

START	(ETS_P_CHAN_ID)
	TABL (ETS_T_INT_TYPE,					&i_chan_id[0].int_type)
	TABL (ETS_T_CHAN_PREF_EXCL,				&i_chan_id[0].pref_excl)
	TABL (ETS_T_D_CHAN,						&i_chan_id[0].d_chan)
	TABX (ETS_TX_CHAN_SEL,					&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)

	IF_VAL	(&i_chan_id[0].int_type, NE, INT_TYPE_BRI)

		IF_VAL	(&i_chan_id[0].chan_sel, EQ, AS_INDICATED)
			TABL (ETS_T_CODING_STD,				&i_chan_id[0].coding_std)
			TABL (ETS_T_CHAN_TYPE,				&i_chan_id[0].chan_type)
			FUNCTION (ets_chan_id_chan_nb_ssdu)
			TEXT (1,ETS_MX_SZ_CHAN_ID,ANY_CHAR,&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		ELSE	()
			PAD (3)
		END_IF	()

	ELSE	()
		PAD (3)
	END_IF	()

END (ets_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

#if NS_COLP_COLR == ON /* COLP and COLR Supp Services supported{ */

			/* CONNECTED_NB : connected number */

D_START	(ETS_P_CONN_NB)
	D_TABL (TYPE_N)
	D_TABL (PLAN_N)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_N)
	D_TEXT (DIGIT_N)
D_END (P_CONN_NB_N_END)

#define ETS_T_CONN_NB_TYPE			ETS_T_CALLING_NB_TYPE		/* this field shall be coded as in Calling Nb IE */
#define ETS_T_CONN_NB_PLAN			ETS_T_CALLING_NB_PLAN		/* this field shall be coded as in Calling Nb IE */
#define ETS_T_CONN_NB_PRES			ETS_T_CALLING_NB_PRES		/* this field shall be coded as in Calling Nb IE */

START	(ETS_P_CONN_NB)
	TABL (ETS_T_CONN_NB_TYPE,	&i_conn_nb[0].nb_type)
	TABL (ETS_T_CONN_NB_PLAN,	&i_conn_nb[0].plan_id)
	TABL (ETS_T_CONN_NB_PRES,	&i_conn_nb[0].pres)
	TABL (ETS_T_SCREEN_IND,		&i_conn_nb[0].screen_ind)
	TEXT (0,ETS_MX_SZ_CONN_NB,ANY_CHAR,	&i_conn_nb[0].lgth,	(uchar **)&i_conn_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CONNECTED_SUB_ADD : connected subadddress */

D_START	(ETS_P_CONN_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)
D_END (P_CONN_SUB_ADD_END)

START	(ETS_P_CONN_SUB_ADD)
	TABL (ETS_T_SUB_ADD_TYPE,		&i_conn_sub_add[0].sub_add_type)
	TABL (ETS_T_SUB_ADD_IND,		&i_conn_sub_add[0].odd_even_ind)

	IF_VAL  (&i_conn_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,ETS_MX_SZ_CONN_SUB_ADD,DIGIT,		&i_conn_sub_add[0].lgth,	(uchar **)&i_conn_sub_add[0].p_add)
	ELSE	()
		TEXT (1,ETS_MX_SZ_CONN_SUB_ADD,ANY_OCTET,	&i_conn_sub_add[0].lgth,	(uchar **)&i_conn_sub_add[0].p_add)
	END_IF	()
END (0)

#endif /* end of COLP and COLR Supp Services supported} */

/*-------------------------------------------------------------------------*/

			/* CONGEST_LEVEL : congestion level */

D_START	(ETS_P_CONGEST_LEVEL)
	D_TABL (LEVEL)
D_END	(CONGEST_LEVEL_E)

START	(ETS_P_CONGEST_LEVEL)
	TABL (ETS_T_CONGEST_LEVEL,		&i_congest_level[0].congest_level)
END		(0)

/*-------------------------------------------------------------------------*/

			/* DATE_TIME : date/time */

D_START	(ETS_P_DATE_TIME)
	D_ANY_VAL	(YEAR_)
	D_ANY_VAL	(MONTH_)
	D_ANY_VAL	(DAY_)
	D_ANY_VAL	(HOUR_)
	D_ANY_VAL	(MINUTE_)
	D_ANY_VAL	(SECOND_)
D_END			(END_SSDU)

START	(ETS_P_DATE_TIME)
	ANY_VAL		(&i_date_time[0].year)
	ANY_VAL		(&i_date_time[0].month)
	ANY_VAL		(&i_date_time[0].day)
	ANY_VAL		(&i_date_time[0].hour)
	ANY_VAL		(&i_date_time[0].minute)
	ANY_VAL		(&i_date_time[0].second)
END				(0)

/*-------------------------------------------------------------------------*/

			/* DISPLAY : display facility */

D_START	(ETS_P_DISPLAY)
	D_TEXT (DISPLAY_INFO)
D_END (DISPLAY_END)

START	(ETS_P_DISPLAY)
	TEXT	(0,ETS_MX_SZ_DISPLAY,ANY_CHAR,		&i_display[0].lgth,	(uchar **)&i_display[0].p_info)
END			(0)

/*-------------------------------------------------------------------------*/

#if NS_SUPP_SERVICES == ON

D_START		(ETS_P_FACILITY)
D_END		(FACILITY_E)

START		(ETS_P_FACILITY)
END	(ets_facility_ssdu)

#else	/* NS_SUPP_SERVICES = OFF -> Default facility decoding = Transparent Facility */

D_START		(ETS_P_FACILITY)
	D_PAD	(_4)
	D_TEXT	(FAC_INFO_)
D_END		(FAC_P)

START		(ETS_P_FACILITY)
	PAD		(4)
	TEXT	(1, ETS_MX_SZ_FACILITY,ANY_OCTET,&i_facility[0].lgth, (uchar **)&i_facility[0].p_info)
END			(0)

#endif	/* NS_SUPP_SERVICES */

/*-------------------------------------------------------------------------*/

			/* TRANSIT_NET_SEL : Transit network selection */

D_START	(ETS_P_TRANSIT_NET_SEL)
	D_TABL	(TYPE)
	D_TABL	(PLAN)
	D_TEXT	(NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(ETS_P_TRANSIT_NET_SEL)
	TABL	(ETS_T_NET_ID_TYPE,			&i_transit_net_sel[0].net_id_type)
	TABL	(ETS_T_NET_ID_PLAN,			&i_transit_net_sel[0].net_id_plan)
	TEXT	(1,ETS_MX_SZ_TRANSIT_NET_SEL,ANY_CHAR,&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(ETS_P_HLC)
	D_TABL (CODING_STD)

	D_IF_VAL		(CODING_CCITT)
		D_TABL		(TELESERVICE)
		D_TABL		(EXT_TELESERVICE)
	D_ELSE			(OTHER_CODING)
		D_ANY_VAL	(OTHER_TELE)
		D_PAD		(OTHER_EXT_TELE)
	D_END_IF		(CODING)
D_END (HLC_END)

START	(ETS_P_HLC)
	TABL (ETS_T_CODING_STD,					&i_hlc[0].coding_std)

	IF_VAL		(&i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL	(ETS_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		TABL	(ETS_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
	ELSE		()
		ANY_VAL	(&i_hlc[0].teleservice)
		PAD		(1)
	END_IF		()
END (0)

/*-------------------------------------------------------------------------*/

			/* KEYPAD : keypad facility */

D_START	(ETS_P_KEYPAD)
	D_TEXT (KEYPAD_INFO)
D_END (KEYPAD_END)

START	(ETS_P_KEYPAD)
	TEXT (0,ETS_MX_SZ_KEYPAD,ANY_CHAR,		&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END (0)

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(ETS_P_LLC)
		D_TABL	(CODING_STD)
		D_TABL	(TRF_CAP)
		D_TABL	(OUT_BAND_NEG)
		D_TABL	(TRF_MODE)
		D_TABX	(TRF_RATE)
		D_TABL	(STRUCT)
		D_TABX	(DEST_RATE)
		D_TABL	(PROTOCOL_1)
D_END	(P_LLC_1)

START	(ETS_P_LLC)
		TABL	(ETS_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(ETS_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
		TABL	(ETS_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
		TABL	(ETS_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABX	(ETS_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
		TABL	(ETS_T_STRUCTURE,				&i_llc[0].structure)
		TABX	(ETS_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
		TABL	(ETS_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(ets_llc_ra_ssdu)

		/* V110 */

D_START	(ETS_P_LLC_V110)
		D_TABL		(V110_SYN_ASYN)
		D_TABL		(V110_NEGOTIATION)
		D_TABL		(V110_USER_RATE)
		D_TABL		(V110_INTER_RATE)
		D_TABL		(V110_TX_NIC)
		D_TABL		(V110_RX_NIC)
		D_TABL		(V110_TX_FC)
		D_TABL		(V110_RX_FC)
		D_PAD		(PAD_9_14)
		D_TABL		(V110_STOP_BIT)
		D_TABL		(V110_DATA_BIT)
		D_TABL		(V110_PARITY)
		D_TABL		(V110_DUPLEX)
		D_TABL		(V110_MODEM)
D_END (ENDIF_V110)

START	(ETS_P_LLC_V110)
		TABL		(ETS_T_SYN_ASYN,			&i_llc[0].syn_asyn)
		TABL		(ETS_T_NEGOTIATION,			&i_llc[0].in_band_neg)
		TABL		(ETS_T_USER_RATE,			&i_llc[0].user_rate)
		TABL		(ETS_T_INTER_RATE,			&i_llc[0].inter_rate)
		TABL		(ETS_T_NIC_TX,				&i_llc[0].tx_nic)
		TABL		(ETS_T_NIC_RX,				&i_llc[0].rx_nic)
		TABL		(ETS_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
		TABL		(ETS_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
		PAD			(6)
		TABL		(ETS_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(ETS_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(ETS_T_PARITY,				&i_llc[0].parity)
		TABL		(ETS_T_DUPLEX,				&i_llc[0].duplex)
		TABL		(ETS_T_MODEM,				&i_llc[0].modem)
END	(0)


D_START	(ETS_P_LLC_V120)
		D_TABL		(V120_SYN_ASYN)
		D_TABL		(V120_NEGOTIATION)
		D_TABL		(V120_USER_RATE)
		D_PAD		(PAD_4_8)
		D_TABL		(V120_HDR)
		D_TABL		(V120_MULTI_FRAME)
		D_TABL		(V120_OP_MODE)
		D_TABL		(V120_LLI)
		D_TABL		(V120_ASSIGN)
		D_TABL		(V120_BAND)
		D_TABL		(V120_STOP_BIT)
		D_TABL		(V120_DATA_BIT)
		D_TABL		(V120_PARITY)
		D_TABL		(V120_DUPLEX)
		D_TABL		(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(ETS_P_LLC_V120)
		TABL		(ETS_T_SYN_ASYN,			&i_llc[0].syn_asyn)
		TABL		(ETS_T_NEGOTIATION,			&i_llc[0].in_band_neg)
		TABL		(ETS_T_USER_RATE,			&i_llc[0].user_rate)
		PAD			(5)
		TABL		(ETS_T_HEADER,				&i_llc[0].hdr)
		TABL		(ETS_T_MULTI_FRAME,			&i_llc[0].multi_frame)
		TABL		(ETS_T_OP_MODE,				&i_llc[0].op_mode)
		TABL		(ETS_T_LLI,					&i_llc[0].lli)
		TABL		(ETS_T_ASSIGN,				&i_llc[0].assign)
		TABL		(ETS_T_BAND,				&i_llc[0].band)
		TABL		(ETS_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(ETS_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(ETS_T_PARITY,				&i_llc[0].parity)
		TABL		(ETS_T_DUPLEX,				&i_llc[0].duplex)
		TABL		(ETS_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(ETS_P_LLC_PAD)
		D_PAD		(PAD_1_19)
D_END (END_PAD_RA)

START	(ETS_P_LLC_PAD)
		PAD			(19)
END (0)

D_START	(ETS_P_LLC_2)
		D_TABL		(PROTOCOL_ID_2)
		D_ANY_VAL	(OPT_2)
		D_TABL		(PROTOCOL_ID_3)
		D_ANY_VAL	(OPT_3)
D_END (LLC_E)

START	(ETS_P_LLC_2)
		TABL    	(ETS_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
		ANY_VAL		(&i_llc[0].option_2)
		TABL		(ETS_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
		ANY_VAL		(&i_llc[0].option_3)
END (0)

/*-------------------------------------------------------------------------*/

			/* NOTIF_IND : notification indicator */

D_START	(ETS_P_NOTIF_IND)
	D_TABL	(DESCR)
D_END		(NOTIF_IND_E)

START	(ETS_P_NOTIF_IND)
	TABL	(ETS_T_NOTIF_IND_DESCR,		&i_notif_ind[0].notif_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(ETS_P_PROGRESS_IND)
	D_TABL	(CODING_STD)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(ETS_P_PROGRESS_IND)
	TABL	(ETS_T_CODING_STD,				&i_progress_ind[0].coding_std)
	TABL	(ETS_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	TABL	(ETS_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
END			(0)

/*-------------------------------------------------------------------------*/

#if NS_SS_DIVERSION == ON /* { */

			/* REDIR_NB : Redirecting number */

D_START	(ETS_P_REDIR_NB)
	D_TABL  	(_PLAN_ID)
	D_TABL  	(TYPE_)
	D_ANY_VAL	(PRES_)
	D_TABL		(REASON_REDIR)
	D_TEXT		(DIGIT_)
D_END	(REDIR_NB_E)

#define ETS_T_REDIR_NB_TYPE		ETS_T_CALLING_NB_TYPE		/* this field shall be coded as in Calling Nb IE */
#define ETS_T_REDIR_NB_PLAN		ETS_T_CALLING_NB_PLAN		/* this field shall be coded as in Calling Nb IE */

START	(ETS_P_REDIR_NB)
	TABL	(ETS_T_REDIR_NB_PLAN,  	&i_redir_nb[0].plan_id)
	TABL	(ETS_T_REDIR_NB_TYPE,	&i_redir_nb[0].nb_type)
	ANY_VAL	(						&i_redir_nb[0].pres)
	TABL	(ETS_T_REASON_REDIR,	&i_redir_nb[0].reason)
	TEXT	(0,ETS_MX_SZ_REDIR_NB,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END		(0)

			/* REDIRECTION_NB : Redirection number */

D_START	(ETS_P_REDIRECTION_NB)
	D_TABL  	(_PLAN_ID)
	D_TABL  	(TYPE_)
	D_ANY_VAL	(PRES_)
	D_TEXT		(DIGIT_)
D_END	(REDIRECTION_NB_E)

#define ETS_T_REDIRECT_NB_TYPE		ETS_T_CALLING_NB_TYPE		/* this field shall be coded as in Calling Nb IE */
#define ETS_T_REDIRECT_NB_PLAN		ETS_T_CALLING_NB_PLAN		/* this field shall be coded as in Calling Nb IE */

START	(ETS_P_REDIRECTION_NB)
	TABL	(ETS_T_REDIRECT_NB_PLAN,	&i_redirection_nb[0].plan_id)
	TABL	(ETS_T_REDIRECT_NB_TYPE,	&i_redirection_nb[0].nb_type)
	ANY_VAL	(							&i_redirection_nb[0].pres)
	TEXT	(0,ETS_MX_SZ_REDIRECTION_NB,DIGIT, &i_redirection_nb[0].lgth, (uchar **)&i_redirection_nb[0].p_add)
END		(0)

#endif /* end of NS_SS_DIVERSION = ON} */

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START		(ETS_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(ETS_P_RESTART_IND)
	TABL	(ETS_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

/*-------------------------------------------------------------------------*/

			/* SIGNAL : Signal */

D_START	(ETS_P_SIGNAL)
	D_TABL	(VAL_)
D_END		(SIGNAL_E)

START	(ETS_P_SIGNAL)
	TABL	(ETS_T_SIGNAL_VAL,		&i_signal[0].val)
END			(0)

/*-------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

			/* SPF_FAC : network specific facilities */

D_START	(ETS_P_SPF_FAC)
	D_ANY_VAL		(NETWORK_ID_LGTH)

	D_IF_VAL		(NOT_NULL_LGTH)
		D_TABL		(TYPE_NET_ID)
		D_TABL		(PLAN_NET_ID)
		D_FUNCTION	(SPF_FAC_FCT)
	D_ELSE			(NULL_LGTH)
		D_PAD		(TYPE_PLAN)
	D_END_IF		(NOT_NULL_LG)
	D_TEXT			(FAC_INFO_)
D_END				(SPF_FAC_END)

START	(ETS_P_SPF_FAC)
	ANY_VAL			(&i_spf_fac[0].net_id_lgth)

	IF_VAL			(&i_spf_fac[0].net_id_lgth, NE, 0)
		TABL		(ETS_T_NET_ID_TYPE,		&i_spf_fac[0].Net_id_type)
		TABL		(ETS_T_NET_ID_PLAN,		&i_spf_fac[0].Net_id_plan)
		FUNCTION	(ets_spf_fac_ssdu)
	ELSE			()
		PAD			(2)
	END_IF			()
	TEXT			(0,ETS_MX_SZ_SPF_FAC,ANY_CHAR, &i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
END					(0)

#endif

/*-------------------------------------------------------------------------*/

			/* UUI : user to user information */

D_START	(ETS_P_UUI)
	D_TABL	(PROTOCOL_DISCR)

	D_IF_VAL	(DISCR_IA5)
		D_TEXT  (INFO_IA5)
	D_ELSE		(OTHER_DISCR)
		D_TEXT  (INFO_OTHER)
	D_END_IF	(DISCR)

D_END		(UUI_END)

START	(ETS_P_UUI)
	TABL	(ETS_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)

	IF_VAL		(&i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT	(0,ETS_MX_SZ_UUI, ANY_CHAR,				&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE		()
		TEXT	(0,ETS_MX_SZ_UUI, ANY_OCTET, 			&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF		()
END			(0)

/*EOF*/

