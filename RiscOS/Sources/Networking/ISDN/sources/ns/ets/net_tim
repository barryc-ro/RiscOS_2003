
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_tim.ets
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- Implements the ETSI specific timer tables of the NETWORK SIGNALLING
 *			layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/* TIMERS IMPLICIT VALUES */

				/* Network timer implicit values */

#define ETS_NET_T300			 	(1		* SECOND)	/* T300 */
#define ETS_NET_T301				(180	* SECOND)	/* T301 */
#define ETS_NET_T302				(15		* SECOND)	/* T302 */
#define ETS_NET_T303				(4		* SECOND)	/* T303 */
#define ETS_NET_T304				(20		* SECOND)	/* T304 */
#define ETS_NET_T305				(30		* SECOND)	/* T305 */
#define ETS_NET_T306				(30		* SECOND)	/* T306 */
#define ETS_NET_T307				(180	* SECOND)	/* T307 */
#define ETS_NET_T308				(4		* SECOND)	/* T308 */
#define ETS_NET_T309				(90		* SECOND)	/* T309 */
#define ETS_NET_T310				(40		* SECOND)	/* T310 */
#define ETS_NET_T312				(ETS_NET_T303) + (2 * SECOND)	/* T312 */
#define ETS_NET_T314				(4		* SECOND)	/* T314 */
#define ETS_NET_T316				(120	* SECOND)	/* T316 */
#define ETS_NET_T317				(100	* SECOND)	/* T317 */
#define ETS_NET_T320				(30		* SECOND)	/* T320 */
#define ETS_NET_T321				(30		* SECOND)	/* T321 */
#define ETS_NET_T322				(4		* SECOND)	/* T322 */

#if NS_HOLD_RETRIEVE == ON
#	define ETS_NET_T_HOLD			(4		* SECOND)	/* T-HOLD */
#	define ETS_NET_T_RET			(4		* SECOND)	/* T-RETRIEVE */
#endif

				/* User timer values */

#define ETS_USER_T300				(1		* SECOND)	/* T300 */
#define ETS_USER_T302				(15		* SECOND)	/* T302 */
#define ETS_USER_T303				(4		* SECOND)	/* T303 */
#define ETS_USER_T304				(30		* SECOND)	/* T304 */
#define ETS_USER_T305				(30		* SECOND)	/* T305 */
#define ETS_USER_T308				(4		* SECOND)	/* T308 */
#define ETS_USER_T309				(90		* SECOND)	/* T309 */
#define ETS_USER_T310				(45		* SECOND)	/* T310 - GREATER THAN 40s */
#define ETS_USER_T313				(4		* SECOND)	/* T313 */
#define ETS_USER_T314				(4		* SECOND)	/* T314 SEGMENTATION */
#define ETS_USER_T316				(120	* SECOND)	/* T316 RESTART PROCEDURE */
#define ETS_USER_T317				(100	* SECOND)	/* T317 RESTART PROCEDURE - LESS THAN T316 */
#define ETS_USER_T318				(4		* SECOND)	/* T318 */
#define ETS_USER_T319				(4		* SECOND)	/* T319 */
#define ETS_USER_T322				(4		* SECOND)	/* T322 */

#if NS_HOLD_RETRIEVE == ON
#	define ETS_USER_T_HOLD			(4		* SECOND)	/* T-HOLD */
#	define ETS_USER_T_RET			(4		* SECOND)	/* T-RETRIEVE */
#endif

			/* NS timer implicit value table */

		/* Call associated timers */

CONST_ARRAY struct ns_timer ETS_TI_CALL[] = {

/*	NT value		User value		Event ID		Index (0 -> MX_CALL_TIMER-1) */

	{ETS_NET_T300,		ETS_USER_T300,		TI_300,		ETS_T300_IDX},		/* T300 */
	{ETS_NET_T301,		0,					TI_301,		ETS_T301_IDX},		/* T301 */
	{ETS_NET_T302,		ETS_USER_T302,		TI_302,		ETS_T302_IDX},		/* T302 */
	{ETS_NET_T303,		ETS_USER_T303,		TI_303,		ETS_T303_IDX},		/* T303 */
	{ETS_NET_T304,		ETS_USER_T304,		TI_304,		ETS_T304_IDX},		/* T304 */
	{ETS_NET_T305,		ETS_USER_T305,		TI_305,		ETS_T305_IDX},		/* T305 */
	{ETS_NET_T306,		0,					TI_306,		ETS_T306_IDX},		/* T306 */
	{ETS_NET_T307,		0,					TI_307,		ETS_T307_IDX},		/* T307 */
	{ETS_NET_T308,		ETS_USER_T308,		TI_308,		ETS_T308_IDX},		/* T308 */
	{ETS_NET_T310,		ETS_USER_T310,		TI_310,		ETS_T310_IDX},		/* T310 */
	{ETS_NET_T312,		0,					TI_312,		ETS_T312_IDX},		/* T312 */
	{0,					ETS_USER_T313,		TI_313,		ETS_T313_IDX},		/* T313 */
	{0,					ETS_USER_T318,		TI_318,		ETS_T318_IDX},		/* T318 */
	{0,					ETS_USER_T319,		TI_319,		ETS_T319_IDX},		/* T319 */
	{ETS_NET_T320,		0,					TI_320,		ETS_T320_IDX},		/* T320 */
	{ETS_NET_T321,		0,					TI_321,		ETS_T321_IDX},		/* T321 */
	{ETS_NET_T322,		ETS_USER_T322,		TI_322,		ETS_T322_IDX},		/* T322 */

#if NS_T309 == ON
	{ETS_NET_T309,		ETS_USER_T309,		TI_309,		ETS_T309_IDX},		/* T309 */
#endif

#if NS_HOLD_RETRIEVE == ON
	{ETS_NET_T_HOLD,	ETS_USER_T_HOLD,	NS_TI_HOLD,	ETS_T_HOLD_IDX},		/* T-HOLD */
	{ETS_NET_T_RET,		ETS_USER_T_RET,		NS_TI_RET,	ETS_T_RETRIEVE_IDX},	/* T-RETRIEVE */
#endif

};

		/* DLCI associated timers */

CONST_ARRAY struct ns_timer ETS_TI_DLCI[] = {

/*	NT value				User value			Event ID		Index (0 -> MX_DLCI_TIMER-1) */

	{TI_DL_VAL,				TI_DL_VAL,			TI_DL	},		/* T3DL */
	{TI_DL_EST_VAL,			TI_DL_EST_VAL,		TI_DL_EST},		/* T3_DL_EST */

#	if NS_RESTART_PROCEDURE == ON
		{ETS_NET_T316,		ETS_USER_T316,		TI_316	},		/* T316 */
		{ETS_NET_T317,		ETS_USER_T317,		TI_317	},		/* T317 */
#	endif

#	if NS_SEGMENTATION == ON
		{ETS_NET_T314,		ETS_USER_T314,		TI_314	},		/* T314 */
#	endif

};

	/* Index table for timers used in the kernel */

CONST_ARRAY uchar ETS_TI_IDX[] = {

#	if NS_T309 == ON
		ETS_T309,
#	endif

#	if NS_SEGMENTATION == ON
		ETS_T314,
#	endif

#	if NS_RESTART_PROCEDURE == ON
		ETS_T316,
		ETS_T317,
#	endif

	TI_EOT,
};


#if EQUIPMENT == NT2

CONST_ARRAY struct ns_timer ETS_TI_INT[] = {

/*	NT value		User value		Event ID		Index (0 -> MX_INT_TIMER-1) */

	{ETS_NET_T304,		0,				TI_304I	},		/* T304I */
	{ETS_NET_T308,		0,				TI_308I	},		/* T308I */
	{ETS_NET_T310,		0,				TI_310I	},		/* T310I */
};

#endif


/*EOF*/
