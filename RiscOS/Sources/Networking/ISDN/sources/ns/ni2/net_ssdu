
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_ssdu.ni2
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/* external functions prototype */

#if NEW_FCT_STYLE == ON
	uchar 	check_convert		(uchar FAR *p_to, uchar FAR *p_from, uint lgth, uchar code, uchar restriction);
#else
	uchar 	check_convert		();
#endif

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.ni2 */

#include "ni2.mp_ssdu"

uchar ni2_bc_check_mult_ssdu () {

	if (direction == FROM_CALL_CONTROL) {

			/* Multi-rate service is available in BC for PRImary rate only */

		if ((Na_type == BRI) && (I_(bc, trf_rate) == TRF_RATE_MULTI_RATE)) {

			return (NOK);
		}
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

uchar ni2_called_nb_ssdu ()
{
	ie_if_flag = ON;

	if (Na_type == PRI) {
		ie_if_flag = OFF;
	}


	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			ni2_cause_ssdu - implements the specific processing of a cause
							 Information Element (IE).

Usage			uchar ni2_cause_ssdu ();

Return value :  ni2_cause_ssdu returns	OK
									NOK

common constants and declarations : ns.h net_i_s.h

common objects : internal data structure i_cause, ie ssdu context.
						- direction = FROM or TO CALL_CONTROL side.

*--------------------------------------------------------------------------*/

uchar ni2_cause_ssdu ()
{
	uchar	class_val;				/* cause class & value */

	class_val = C_v (I_(cause,cause_class), I_(cause,cause_val));

	if (I_(cause, coding_std) == CODING_STD_CCITT) {

		switch (class_val) {
			case C_v (C_C_RESOURCE_UNAVAILABLE,	C_V_ACCESS_INFORMATION_DISCARDED_43):
			case C_v (C_C_PROTOCOL_ERROR,		C_V_MANDATORY_IE_MISSING_96)		:
			case C_v (C_C_PROTOCOL_ERROR,		C_V_MESSAGE_TYPE_NON_EXISTENT_97)	:
			case C_v (C_C_PROTOCOL_ERROR,		C_V_NON_EXISTENT_IE_99)				:
			case C_v (C_C_PROTOCOL_ERROR,		C_V_INVALID_IE_CONTENT_100)			:
			case C_v (C_C_PROTOCOL_ERROR,		C_V_MESSAGE_NOT_COMPATIBLE_101)		:

				break;

			default :

					/* No diagnostic should be included */

				if (I_(cause,diag_lgth) != 0) {
					return (NOK);
				}
		}

	} else {

	   if ( (I_(cause, coding_std) == CODING_STD_SPF) &&
			(class_val == C_v (C_C_SERVICE_NOT_AVAILABLE, C_V_SERVICE_OPERATION_VIOLATED_53))) {

		   switch (I_(cause,diag_lgth)) {

			   case 0 :
				   break;

			   case 1 :

				   switch (I_cause_diagnostic) {

					   case SHORT_TERM_DENIAL	:
					   case LONG_TERM_DENIAL	:
						   return (OK);

					   default :
						   return (NOK);
					}

			   default :
				   return (NOK);
		   }
	   }

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		ni2_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/
uchar ni2_chan_id_chan_nb_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

		if ((I_(chan_id,int_type) == INT_TYPE_PRI) &&
			(I_(chan_id, p_chan_nb)!= P_NIL)) {

			/*
			 * Reset the extension bit in the chan_nb field.
			 */

			for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
				Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar ni2_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		if (I_chan_id_int_type == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}


				/*
				 * Set the extension bit to 1 in the chan_nb field,
				 * unless it is slot map.
				 */

			if (i_chan_id[0].nb_map == CHAN_NUMBER) {

				i = I_(chan_id, chan_nb_lgth)-1;

				Set_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}

#			if NS_D_BACKUP == ON

					/*
					 * Check if the Na bears an active D channel
					 */

				if ((ns_nfas == ON) && (Nai != Nfas_nai_active_d_chan)) {

						/*
						 * This Nai does NOT bear an active D channel.
						 * We may have to modify the CHANNEL ID.
						 * The 'interface Id' MUST be EXPLICIT
						 * and the 'interface Id Value should be
						 * the CC Nai.
						 */

					if (I_(chan_id, int_id) == INT_ID_IMPLICIT) {

						I_(chan_id, int_id)	 	= INT_ID_EXPLICIT;
						I_(chan_id, int_id_val) = Nai;

					}

				}

#			endif

		}
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			ni2_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage			uchar ni2_llc_ra_ssdu ();

Return value : 	ni2_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar ni2_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&NI2_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&NI2_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&NI2_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&NI2_P_LLC_2));

	} else {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&NI2_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&NI2_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&NI2_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&NI2_P_LLC_2));
	}

}


#if NS_SPF_FACILITY == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		ni2_spf_fac_ssdu - implements the processing of the specific facility
						  IE (received or to be sent in a SSDU message).

Usage	   uchar ni2_spf_fac_ssdu ();

Return value :  ni2_spf_fac_ssdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar ni2_spf_fac_ssdu ()
{

	if (direction == TO_CALL_CONTROL) {

		if (check_convert (	(uchar FAR *) p_ssdu_val,
							I_spf_fac_a_net_id,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) {
		  return (NOK);
		}

	} else {

		if (check_convert (	I_spf_fac_a_net_id,
							(uchar FAR *) (p_ssdu_val+1),
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) {
			return (NOK);
		}
	}

	p_ssdu_val += (NI2_MX_SZ_NET_ID + 1);

	return (OK);

}

#endif

uchar ni2_redir_ssdu ()
{

	if (I_(redir_nb, pres) == PRES_RESERVED) return (NOK);

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		ni2_call_appear_ssdu - implements the checking of the
						  call appearance IE received in a SSDU message.

Usage	   uchar ni2_call_appear_ssdu ();

Return value :  ni2_call_appear_ssdu returns = OK   valid data,
									 = NOK  invalid data.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar ni2_call_appear_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

			/* call appearance identifier value already checked in SPDU meta-program */

		  return (OK);
	}

		/*	call appearance identifier value is given with 2 octets coding
			each a 7-bits value : first octet should not be BYTE_VAL_NIL
			and both octets should be in range 0 to 127 */

	if (I_(call_appear, call_appear_id) > 127) return (NOK);

		/* get second identifier */

	i = I_(call_appear, call_appear_id_2);

	if (i != BYTE_VAL_NIL) {

			/* second octet is provided : first octet should not be null */

		if ((i > 127) ||
			(I_(call_appear, call_appear_id) == 0)) {

			return (NOK);
		}

	} else {

    		/*
             * Second octet is absent.
             * If call appearence is 0, CC did not specify a particular value.
             * Pick up the default value = 1.
             */

    	if (I_(call_appear, call_appear_id) == 0) {
        	I_(call_appear, call_appear_id) = 1;
        }
    }

	return (OK);
}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------

		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |				 ssdu_ie
	|----|------|---------|	 ======================================
	|	 |	X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |	X------> START
	|----|------|---------|	 |---------|----|-----|------|--------|	 XXXX
	|	 |		|		  |	 |		   |	|	  |		 |		  |	 YYYY
	|----|------|---------|	 |---------|----|-----|------|--------|	 END
	|	 |		|		  |	 |		   |	|	  |		 |		  |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |		  |

*/

	/* NS primitive interface program */

/*====================	CALL  ESTABLISHMENT  MESSAGES	=====================*/

		/* NS_ALERT_IN */

#define NI2_ALERT_RQ			NI2_ALERT_IN
#define	NI2_NET_ALERT_RQ		NI2_ALERT_IN
#define	NI2_NET_ALERT_IN		NI2_ALERT_RQ

		/* NS_CALL_PROC_IN */

#define NI2_CALL_PROC_RQ		NI2_CALL_PROC_IN
#define NI2_NET_CALL_PROC_RQ	NI2_CALL_PROC_IN
#define NI2_NET_CALL_PROC_IN	NI2_CALL_PROC_RQ

		/* NS_CONN_CO */

#define NI2_CONN_RQ					NI2_CONN_IN
#define NI2_CONN_RS					NI2_CONN_CO
#define NI2_NET_CONN_RQ				NI2_CONN_IN
#define NI2_NET_CONN_IN				NI2_CONN_RQ
#define NI2_NET_CONN_RS				NI2_CONN_CO
#define NI2_NET_CONN_CO				NI2_CONN_RS

		/* NS_PROGRESS_IN */

#define	NI2_PROGRESS_RQ				NI2_PROGRESS_IN
#define	NI2_NET_PROGRESS_RQ			NI2_PROGRESS_IN
#define	NI2_NET_PROGRESS_IN			NI2_PROGRESS_RQ

		/* NS_SETUP_ACK_IN */

#define	NI2_SETUP_ACK_RQ			NI2_SETUP_ACK_IN
#define	NI2_NET_SETUP_ACK_RQ		NI2_SETUP_ACK_IN
#define	NI2_NET_SETUP_ACK_IN		NI2_SETUP_ACK_IN

/*===============	CALL  INFORMATION  PHASE  MESSAGES	====================*/

		/* NS_RET_CO */

#define NI2_RET_RS					NI2_RET_CO
#define NI2_RET_RQ					NI2_RET_CO
#define NI2_RET_IN					NI2_RET_CO
#define NI2_NET_RET_IN				NI2_RET_CO
#define NI2_NET_RET_RQ				NI2_RET_RS
#define NI2_NET_RET_RS				NI2_RET_IN

		/* NS_HOLD_IN */

#define NI2_HOLD_RQ					NI2_HOLD_IN
#define NI2_NET_HOLD_RQ				NI2_HOLD_IN
#define NI2_NET_HOLD_IN				NI2_HOLD_RQ

		/* NS_HOLD_CO */

#define NI2_HOLD_RS					NI2_HOLD_CO
#define NI2_NET_HOLD_CO				NI2_HOLD_RS
#define NI2_NET_HOLD_RS				NI2_HOLD_CO

#if NI2_SUPPLEMENTARY_SERVICES == ON

		/* NS_K_HOLD_IN */

#define	NI2_NET_K_HOLD_RQ		NI2_K_HOLD_IN

		/* NS_K_REL_IN */

#define	NI2_NET_K_REL_RQ		NI2_K_REL_IN

		/* NS_K_SETUP_IN */

#define	NI2_NET_K_SETUP_RQ	NI2_K_SETUP_IN

		/* NS_K_SETUP_ACK_RQ */

#define	NI2_NET_K_SETUP_ACK_IN	NI2_K_SETUP_ACK_RQ

#endif

/*=====================	CALL  CLEARING  MESSAGES	=======================*/

		/* NS_CLEAR_CO */

#define	NI2_CLEAR_RQ				NI2_CLEAR_IN
#define	NI2_CLEAR_RS				NI2_CLEAR_CO
#define	NI2_NET_CLEAR_RQ			NI2_CLEAR_IN
#define	NI2_NET_CLEAR_IN			NI2_CLEAR_RQ
#define	NI2_NET_CLEAR_RS			NI2_CLEAR_CO
#define	NI2_NET_CLEAR_CO			NI2_CLEAR_RS

/*====================		MISCELLANEOUS  MESSAGES	=======================*/


		/* NS_INFO_IN */

#define NI2_INFO_RQ					NI2_INFO_IN
#define NI2_NET_INFO_RQ				NI2_INFO_IN
#define NI2_NET_INFO_IN				NI2_INFO_RQ

		/* NS_NOTIFY_IN */

#define	NI2_NOTIFY_RQ				NI2_NOTIFY_IN
#define	NI2_NET_NOTIFY_RQ			NI2_NOTIFY_IN
#define	NI2_NET_NOTIFY_IN			NI2_NOTIFY_RQ

		/* NS_RESTART_RQ - (No IE in this message) */

#define NI2_RESTART_RQ				NI2_RESTART_IN
#define NI2_NET_RESTART_RQ			NI2_RESTART_IN

		/* NS_RESTART_IN */

#define NI2_NET_RESTART_IN			NI2_RESTART_IN

		/* NS_RESTART_CO */

#define NI2_RESTART_RS				NI2_RESTART_IN
#define NI2_NET_RESTART_RS			NI2_RESTART_IN

		/* NS_RESTART_CO */

#define NI2_RESTART_CO				NI2_RESTART_IN
#define NI2_NET_RESTART_CO			NI2_RESTART_IN

/*=========================================================================*/

#define Ns_ni2_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_ni2_end_table_or_function		};

#define Ns_ni2_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_ni2_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_ni2		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_ni2_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_ni2_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#define SSDU_IE_NIL_NI2		SSDU_IE_NIL,

#include "ni2.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define NI2_MX_SSDU (sizeof(NI2_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		ni2_mx_size_ssdu = NI2_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_ni2_table_or_function
#undef Ns_ni2_end_table_or_function
#undef Ns_ni2_tab_ssdu_ie_entry
#undef Ns_ni2_tab_ssdu_ie_mx_entry
#undef Ns_ni2_tab_ssdu_entry
#undef SSDU_IE_NIL_NI2

#define Ns_ni2_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_ni2_end_table_or_function		}

#define Ns_ni2_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_ni2_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_ni2_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_ni2
#	define Message_header_ssdu_ie_ni2		Ns_ni2_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_ni2_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_ni2_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

#define SSDU_IE_NIL_NI2			Ns_ni2_tab_ssdu_ie_entry (0, 0, MI, OP, A_NIL)

void pic_init_ns_ni2_ssdu ()
{
	uchar   i_pic;

#	include "ni2.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

