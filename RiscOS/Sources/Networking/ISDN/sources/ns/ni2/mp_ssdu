
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ssdu.ni2
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON
	uchar	ni2_bc_check_mult_ssdu		(Void_parm);
	uchar	ni2_called_nb_ssdu			(Void_parm);
	uchar	ni2_cause_ssdu				(Void_parm);
	uchar	ni2_chan_id_ssdu			(Void_parm);
	uchar	ni2_chan_id_chan_nb_ssdu	(Void_parm);
	uchar	ni2_llc_ra_ssdu				(Void_parm);
#	if NS_SPF_FACILITY == ON
		uchar	ni2_spf_fac_ssdu		(Void_parm);
#	endif
	uchar	ni2_progress_ind_check		(Void_parm);
	uchar	ni2_redir_ssdu				(Void_parm);
	uchar	ni2_call_appear_ssdu		(Void_parm);
#endif

		/*
			meta description of the primitives used to communicate between
			layer 4 and layer 3 of the network signalling entities.
			These primitives are network dependent.
			(Ordered alphabetically)
		*/

			/* BC : bearer capabilities */

D_START	(NI2_P_BC)
	D_TABL		(TRF_CAP)
	D_TABL		(TRF_MODE_)
	D_TABX		(TRF_RATE_)

	D_IF_VAL	(_TRF_RATE_MULTI_RATE)
		D_TABL	(_MULTIPLIER)
		D_PAD	(_PROTO_1_AND_2)
	D_ELSE		(_NO_MULT)
		D_PAD	(_MULTI)
		D_TABL	(PROTOCOL_1)
		D_TABL	(PROTOCOL_2)
	D_END_IF	(_N_64)

D_END	(P_BC_1)

START	(NI2_P_BC)
	TABL		(NI2_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
	TABL		(NI2_T_TRF_MODE,			&i_bc[0].trf_mode)
	TABX		(NI2_TX_BC_TRF_RATE,		&i_bc[0].trf_mode,		&i_bc[0].trf_rate)

	IF_VAL		(&i_bc[0].trf_rate, EQ, TRF_RATE_MULTI_RATE)
		TABL	(NI2_T_MULTIPLIER,			&i_bc[0].Multiplier)
		PAD		(2)
	ELSE		()
		PAD		(1)
		TABL	(NI2_T_BC_PROTOCOL_ID_1,	&i_bc[0].protocol_id_1)
		TABL	(NI2_T_BC_PROTOCOL_ID_2,	&i_bc[0].protocol_id_2)
	END_IF		()

END		(ni2_bc_check_mult_ssdu)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(NI2_P_CALLED_NB)
	D_TABL  		(PLAN_)
	D_TABX  		(_TYPE)
	D_FUNCTION		(_BRI)

	D_IF_VAL		(_BRI_)

		D_IF_VAL	(_PLAN_UNKNOWN)
			D_TEXT	(IA5_DIGIT_E_)
		D_ELSE		(_ELSE)
			D_TEXT	(_IA5_DIGIT_)
		D_END_IF	(_PLAN)

	D_ELSE			(OTHER_CODEPOINT)
		D_TEXT		(IA5_DIGIT_)
	D_END_IF		(TYPE_PLAN)

D_END				(P_CALLED_NB_END)

START (NI2_P_CALLED_NB)

	TABL			(NI2_T_CALLED_NB_PLAN,  &i_called_nb[0].plan_id)
	TABX			(NI2_TX_CALLED_NB_TYPE,	&i_called_nb[0].plan_id,  &i_called_nb[0].nb_type)

	FUNCTION		(ni2_called_nb_ssdu)

	IF_VAL			(&ie_if_flag, EQ, ON)

		IF_VAL		(&i_called_nb[0].plan_id, EQ, PLAN_UNKNOWN)
			TEXT	(1,NI2_MX_SZ_CALLED_NB, DIGIT_E,&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
		ELSE		()
			TEXT	(1,NI2_MX_SZ_CALLED_NB, DIGIT,	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
		END_IF		()

	ELSE			()
		TEXT		(1,NI2_MX_SZ_CALLED_NB, DIGIT, 	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
	END_IF			()

END	(0)

/*-------------------------------------------------------------------------*/

			/* CALLED_SUB_ADD : called party sub address */

D_START	(NI2_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END (P_CALLED_SUB_ADD_END)

START	(NI2_P_CALLED_SUB_ADD)
	TABL 	(NI2_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
	TABL 	(NI2_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)

	IF_VAL  (&i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT(1,NI2_MX_SZ_CALLED_SUB_ADD,DIGIT,		&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	ELSE	()
		TEXT(1,NI2_MX_SZ_CALLED_SUB_ADD,ANY_OCTET,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	END_IF	()
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(NI2_P_CALLING_NB)
		D_TABL		(PLAN)
		D_TABX		(TYPE)
		D_TABL		(PRESENTATION)
		D_TABX		(SCREEN_IND)
		D_TEXT		(DIGIT_)
D_END   (CALLING_NB_E)

START	(NI2_P_CALLING_NB)
		TABL	(NI2_T_CALLING_NB_PLAN,  	&i_calling_nb[0].plan_id)
		TABX	(NI2_TX_CALLING_NB_TYPE,	&i_calling_nb[0].plan_id,	&i_calling_nb[0].nb_type)
		TABL	(NI2_T_CALLING_NB_PRES, 	&i_calling_nb[0].pres)
		TABX	(NI2_TX_CALLING_SCREEN,		&i_calling_nb[0].pres,		&i_calling_nb[0].screen_ind)
		TEXT	(0,NI2_MX_SZ_CALLING_NB,DIGIT, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(NI2_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END (P_CALLING_SUB_ADD_END)

START	(NI2_P_CALLING_SUB_ADD)
	TABL (NI2_T_SUB_ADD_TYPE,						&i_calling_sub_add[0].sub_add_type)
	TABL (NI2_T_SUB_ADD_IND,						&i_calling_sub_add[0].odd_even_ind)

	IF_VAL  (&i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,NI2_MX_SZ_CALLING_SUB_ADD,DIGIT,		&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
	ELSE	()
		TEXT (1,NI2_MX_SZ_CALLING_SUB_ADD,ANY_OCTET,	&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
	END_IF	()

END (0)

/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(NI2_P_CAUSE)
	D_TABL			(CODING_STD)
	D_TABL			(LOCATION)

	D_IF_VAL		(CODING_STD_IS_CCITT)
		D_TABL		(C_CLASS_CCITT)
		D_TABX		(C_V_CCITT)
	D_ELSE			(CODING_SPF)
		D_IF_VAL	(CODING_STD_IS_NET_SPF)
			D_TABL	(C_CLASS_SPF)
			D_TABX	(C_V_SPF)
		D_ELSE		(_NAT)
			D_VAL	(C_CLASS_NAT_0)
			D_TABL	(C_V_NAT)
		D_END_IF	(NAT_)

	D_END_IF		(X_C_V)

	D_TEXT			(DIAG_OCTETS)
D_END	(CAUSE_E_A)

START	(NI2_P_CAUSE)
	TABL			(NI2_T_CAUSE_CODING_STD,		&i_cause[0].coding_std)
	TABL			(NI2_T_LOCATION,				&i_cause[0].cause_loc)

	IF_VAL			(&i_cause[0].coding_std, EQ, CODING_STD_CCITT)
		TABL		(NI2_T_C_C,						&i_cause[0].cause_class)
		TABX		(NI2_TX_C_V_CCITT,				&i_cause[0].cause_class,  &i_cause[0].cause_val)
	ELSE			()

		IF_VAL		(&i_cause[0].coding_std, EQ, CODING_STD_SPF)
			TABL	(NI2_T_C_C_NET,					&i_cause[0].cause_class)
			TABX	(NI2_TX_C_V_NET,				&i_cause[0].cause_class,  &i_cause[0].cause_val)
		ELSE		()
			VAL		(C_C_NORMAL_EVENT_0,			&i_cause[0].cause_class)
			TABL	(NI2_T_NORMAL_EVENT_0_NAT,		&i_cause[0].cause_val)
		END_IF		()

	END_IF			()

	TEXT			(0,NI2_MX_SZ_CAUSE_DIAG,ANY_CHAR,&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)

END	 (ni2_cause_ssdu)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

D_START	(NI2_P_CHAN_ID)
	D_TABL			(INT_ID)
	D_TABL  		(INT_TYPE)
	D_TABL  		(PREF_EXCL)
	D_TABL  		(_D_CHAN)
	D_TABX  		(SEL)

	D_IF_VAL		(IF_INT)
		D_TABL 		(_INT_)
	D_ELSE			(_NOT_PROVIDED)
		D_PAD		(_INT)
	D_END_IF		(INT_)

	D_IF_VAL		(IF_3_2)
		D_TABL  	(NB_MAP)

		D_IF_VAL	(_MAP)
			D_FUNCTION	(_CHAN_NB_)
			D_TEXT  (NBER)
		D_ELSE		(CHAN_NB_)
			D_TEXT  (_MAPPING)
		D_END_IF	(MAP_CHAN)

	D_ELSE			(_BRI_TYPE)
		D_PAD		(_1)
	D_END_IF		(BRI_TYPE)

D_END	(CHAN_ID_E)

START	(NI2_P_CHAN_ID)
	TABL			(NI2_T_CHAN_INT,		&i_chan_id[0].int_id)
	TABL			(NI2_T_INT_TYPE,		&i_chan_id[0].int_type)
	TABL			(NI2_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL			(NI2_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABX			(NI2_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)

	IF_VAL			(&i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		TABL		(NI2_T_CHAN_INT_VAL,	&i_chan_id[0].int_id_val)
	ELSE			()
		PAD			(1)
	END_IF			()

	IF_VAL  		(&i_chan_id[0].int_type, NE, INT_TYPE_BRI)
		TABL		(NI2_T_NB_MAP,			&i_chan_id[0].nb_map)

		IF_VAL		(&i_chan_id[0].nb_map, EQ, CHAN_NUMBER)
			FUNCTION(ni2_chan_id_chan_nb_ssdu)
			TEXT	(1,NI2_MX_SZ_CHAN_ID,ANY_CHAR,	&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		ELSE		()
			TEXT	(1,NI2_MX_SZ_CHAN_ID,ANY_OCTET,	&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		END_IF		()

	ELSE			()
		PAD			(1)
	END_IF			()

END		(ni2_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

			/* CHANGE_STATUS : change status of a D channel */

D_START (NI2_P_CHANGE_STATUS)
	D_VAL 	(PREF)
	D_VAL	(CHAN_STAT)
D_END	(NI2_CHANGE_STATUS_E)

START (NI2_P_CHANGE_STATUS)
	VAL	(PREF_D_CHANNEL,    			&i_change_status[0].preference)
	VAL	(CHANNEL_IN_SERVICE,			&i_change_status[0].status)
END (0)

/*-------------------------------------------------------------------------*/

			/* Endpoint identifier (ENDPOINT_ID) */

D_START	(NI2_P_ENDPOINT_ID)
	D_ANY_VAL	(USID)
	D_ANY_VAL	(TID)
	D_TABL		(INTERP)
    D_ANY_VAL	(_CES)
D_END			(END_SSDU)

START	(NI2_P_ENDPOINT_ID)
	ANY_VAL (&i_endpoint_id[0].usid)
	ANY_VAL (&i_endpoint_id[0].tid)
	TABL	(NI2_T_INTERPRETER,	&i_endpoint_id[0].interp)
	ANY_VAL (&i_endpoint_id[0].ces)
END	 		(0)

/*-------------------------------------------------------------------------*/

			/* Feature activation (FEATURE_ACT) */

D_START	(NI2_P_FEATURE_ACT)
	D_ANY_VAL	(FEATURE_ID_1)
	D_ANY_VAL	(FEATURE_ID_2)
D_END			(E_FEATURE_ACT)

START	(NI2_P_FEATURE_ACT)
	ANY_VAL		(&i_feature_act[0].feature_nb)
	ANY_VAL		(&i_feature_act[0].feature_nb_ext)
END			(0)

/*-------------------------------------------------------------------------*/

			/* Feature indication (FEATURE_IND) */

D_START	(NI2_P_FEATURE_IND)
	D_ANY_VAL	(FEATURE_ID_1)
	D_ANY_VAL	(FEATURE_ID_2)
	D_TABL		(STATUS_IND)
D_END			(E_FEATURE_IND)

START	(NI2_P_FEATURE_IND)
	ANY_VAL		(&i_feature_ind[0].feature_nb)
	ANY_VAL		(&i_feature_ind[0].feature_nb_ext)
	TABL		(NI2_T_STATUS_IND,	&i_feature_ind[0].status_ind)
END			(0)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(NI2_P_HLC)
	D_TABL			(CODING_STD)

	D_IF_VAL		(CODING_CCITT)
		D_TABL		(TELESERVICE)
		D_TABL		(EXT_TELESERVICE)
	D_ELSE			(OTHER_CODING)
		D_ANY_VAL	(OTHER_TELE)
		D_PAD		(OTHER_EXT_TELE)
	D_END_IF		(CODING)

D_END				(HLC_END)

START	(NI2_P_HLC)
	TABL			(NI2_T_CODING_STD,			&i_hlc[0].coding_std)

	IF_VAL			(&i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL		(NI2_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		TABL		(NI2_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
	ELSE			()
		ANY_VAL		(&i_hlc[0].teleservice)
		PAD			(1)
	END_IF			()

END				(0)

/*-------------------------------------------------------------------------*/

			/* Information request (INFORMATION_RQ) */

D_START	(NI2_P_INFORMATION_RQ)
	D_TABL	(INFO_TYPE)
	D_TABL	(INFO_IND)
D_END		(E_INFORMATION_RQ)

START	(NI2_P_INFORMATION_RQ)
	TABL	(NI2_T_INFO_TYPE,	&i_information_rq[0].info_type)
	TABL	(NI2_T_INFO_IND,	&i_information_rq[0].info_ind)
END			(0)

/*-------------------------------------------------------------------------*/

			/* KEYPAD : keypad facility */

D_START	(NI2_P_KEYPAD)
	D_TEXT	(KEYPAD_INFO)
D_END		(KEYPAD_END)

START	(NI2_P_KEYPAD)
	TEXT	(0,NI2_MX_SZ_KEYPAD,DIGIT_E,&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END			(0)

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(NI2_P_LLC)
	D_TABL	(CODING_STD)
	D_TABL	(TRF_CAP)
	D_TABL	(OUT_BAND_NEG)
	D_TABL	(TRF_MODE)
	D_TABX	(TRF_RATE)

	D_IF_VAL	(_TRF_RATE_MULTI_RATE)
		D_TABL	(_MULTIPLIER)
		D_PAD	(_STUCT)
	D_ELSE		(_NO_MULT)
		D_PAD	(_MULTI)
		D_TABL	(_STRUCTURE)
	D_END_IF	(_N_64)

	D_TABX	(DEST_RATE)
	D_TABL	(PROTOCOL_1)
D_END	(P_LLC_1)

START	(NI2_P_LLC)
	TABL	(NI2_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(NI2_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
	TABL	(NI2_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
	TABL	(NI2_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(NI2_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)

	IF_VAL	(&i_llc[0].trf_rate, EQ,TRF_RATE_MULTI_RATE)
		TABL	(NI2_T_MULTIPLIER,			&i_llc[0].Multiplier)
		PAD		(1)
	ELSE		()
		PAD		(1)
		TABL	(NI2_T_STRUCTURE,			&i_llc[0].structure)
	END_IF		()

	TABX	(NI2_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
	TABL	(NI2_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(ni2_llc_ra_ssdu)

		/* V110 */

D_START	(NI2_P_LLC_V110)
	D_TABL	(V110_SYN_ASYN)
	D_TABL	(V110_NEGOTIATION)
	D_TABL	(V110_USER_RATE)
	D_TABL	(V110_INTER_RATE)
	D_TABL	(V110_TX_NIC)
	D_TABL	(V110_RX_NIC)
	D_TABL	(V110_TX_FC)
	D_TABL	(V110_RX_FC)
	D_PAD	(P_9_14)
	D_TABL	(V110_STOP_BIT)
	D_TABL	(V110_DATA_BIT)
	D_TABL	(V110_PARITY)
	D_TABL	(V110_DUPLEX)
	D_TABL	(V110_MODEM)
D_END (ENDIF_V110)

START	(NI2_P_LLC_V110)
	TABL	(NI2_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(NI2_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(NI2_T_USER_RATE,			&i_llc[0].user_rate)
	TABL	(NI2_T_INTER_RATE,			&i_llc[0].inter_rate)
	TABL	(NI2_T_NIC_TX,				&i_llc[0].tx_nic)
	TABL	(NI2_T_NIC_RX,				&i_llc[0].rx_nic)
	TABL	(NI2_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
	TABL	(NI2_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
	PAD		(6)
	TABL	(NI2_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(NI2_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(NI2_T_PARITY,				&i_llc[0].parity)
	TABL	(NI2_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(NI2_T_MODEM,				&i_llc[0].modem)
END	(0)

D_START	(NI2_P_LLC_V120)
	D_TABL	(V120_SYN_ASYN)
	D_TABL	(V120_NEGOTIATION)
	D_TABL	(V120_USER_RATE)
	D_PAD	(P_4_8)
	D_TABL	(V120_HDR)
	D_TABL	(V120_MULTI_FRAME)
	D_TABL	(V120_OP_MODE)
	D_TABL	(V120_LLI)
	D_TABL	(V120_ASSIGN)
	D_TABL	(V120_BAND)
	D_TABL	(V120_STOP_BIT)
	D_TABL	(V120_DATA_BIT)
	D_TABL	(V120_PARITY)
	D_TABL	(V120_DUPLEX)
	D_TABL	(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(NI2_P_LLC_V120)
	TABL	(NI2_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(NI2_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(NI2_T_USER_RATE,			&i_llc[0].user_rate)
	PAD		(5)
	TABL	(NI2_T_HEADER,				&i_llc[0].hdr)
	TABL	(NI2_T_MULTI_FRAME,			&i_llc[0].multi_frame)
	TABL	(NI2_T_OP_MODE,				&i_llc[0].op_mode)
	TABL	(NI2_T_LLI,					&i_llc[0].lli)
	TABL	(NI2_T_ASSIGN,				&i_llc[0].assign)
	TABL	(NI2_T_BAND,				&i_llc[0].band)
	TABL	(NI2_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(NI2_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(NI2_T_PARITY,				&i_llc[0].parity)
	TABL	(NI2_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(NI2_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(NI2_P_LLC_PAD)
	D_PAD	(P_1_19)
D_END		(END_PAD_RA)

START	(NI2_P_LLC_PAD)
	PAD		(19)
END			(0)

D_START	(NI2_P_LLC_2)
	D_TABL		(PROTOCOL_ID_2)
	D_ANY_VAL	(OPT_2)
	D_TABL		(PROTOCOL_ID_3)
	D_ANY_VAL	(OPT_3)
D_END		(LLC_E)

START	(NI2_P_LLC_2)
	TABL	(NI2_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
	ANY_VAL	(&i_llc[0].option_2)
	TABL	(NI2_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
	ANY_VAL	(&i_llc[0].option_3)
END			(0)

#if NS_SPF_FACILITY == ON

			/* SPF_FAC : network specific facilities */

D_START	(NI2_P_SPF_FAC)
	D_ANY_VAL	(NETWORK_ID_LGTH)
	D_FUNCTION	(SPF_FAC_FCT)
	D_TABL		(FAC_CODE_)
	D_TEXT		(FAC_INFO_)
D_END			(SPF_FAC_END)

START	(NI2_P_SPF_FAC)
	ANY_VAL		(&i_spf_fac[0].net_id_lgth)
	FUNCTION	(ni2_spf_fac_ssdu)
	TABL		(NI2_T_FAC_CODE,				&i_spf_fac[0].facility_coding)
	TEXT		(0,NI2_MX_SZ_SPF_FAC,ANY_CHAR,	&i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
END		(0)

#endif

/*-------------------------------------------------------------------------*/

			/* NOTIF_IND : notification indicator */

D_START	(NI2_P_NOTIF_IND)
	D_TABL	(DESCR)
D_END		(NOTIF_IND_E)

START	(NI2_P_NOTIF_IND)
	TABL	(NI2_T_NOTIF_IND_DESCR,			&i_notif_ind[0].notif_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(NI2_P_PROGRESS_IND)
	D_TABL	(CODING_STD)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(NI2_P_PROGRESS_IND)
	TABL	(NI2_T_CODING_STD,				&i_progress_ind[0].coding_std)
	TABL	(NI2_T_LOCATION,				&i_progress_ind[0].progress_loc)
	TABL	(NI2_T_PROGRESS_IND_DESCR,		&i_progress_ind[0].progress_descr)
END			(ni2_progress_ind_check)

/*-------------------------------------------------------------------------*/

			/* REDIR_NB : redirecting number */

D_START	(NI2_P_REDIR_NB)
	D_TABL  	(_PLAN_ID)
	D_TABX  	(TYPE_)
	D_ANY_VAL	(PRES_)
	D_ANY_VAL	(SCREEN_IND)
	D_TABL		(REASON_REDIR)
	D_TEXT		(DIGIT_)
D_END	(REDIR_NB_E)

START	(NI2_P_REDIR_NB)
	TABL	(NI2_T_REDIR_NB_PLAN,  	&i_redir_nb[0].plan_id)
	TABX	(NI2_TX_REDIR_NB_TYPE,	&i_redir_nb[0].plan_id,  &i_redir_nb[0].nb_type)
	ANY_VAL	(						&i_redir_nb[0].pres)
	ANY_VAL	(						&i_redir_nb[0].screen_ind)
	TABL	(NI2_T_REASON_REDIR,	&i_redir_nb[0].reason)
	TEXT	(0,NI2_MX_SZ_REDIR_NB,DIGIT,	&i_redir_nb[0].lgth,	(uchar **)&i_redir_nb[0].p_add)
END			(ni2_redir_ssdu)

/*-------------------------------------------------------------------------*/

			/* REDIR_SUB_ADD_SUB_ADD : called party sub address */

D_START	(NI2_P_REDIR_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_REDIR_SUB_ADD_END)

START	(NI2_P_REDIR_SUB_ADD)
	TABL (NI2_T_SUB_ADD_TYPE,		&i_redir_sub_add[0].sub_add_type)
	TABL (NI2_T_SUB_ADD_IND,		&i_redir_sub_add[0].odd_even_ind)
	TEXT (1,NI2_MX_SZ_REDIR_SUB_ADD,ANY_OCTET,	&i_redir_sub_add[0].lgth,	(uchar **)&i_redir_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* REDIR_SUB_ADD_NET_SPF : redirection sub address */

D_START	(NI2_P_REDIR_SUB_ADD_NET_SPF)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_REDIR_SUB_ADD_NET_SPF_END)

START	(NI2_P_REDIR_SUB_ADD_NET_SPF)
	TABL (NI2_T_SUB_ADD_TYPE,		&i_redir_sub_add_net_spf[0].sub_add_type)
	TABL (NI2_T_SUB_ADD_IND,		&i_redir_sub_add_net_spf[0].odd_even_ind)
	TEXT (1,NI2_MX_SZ_REDIR_SUB_ADD_NET_SPF,ANY_OCTET,	&i_redir_sub_add_net_spf[0].lgth,	(uchar **)&i_redir_sub_add_net_spf[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* REDIRECTION_NB : redirection number */

D_START	(NI2_P_REDIRECTION_NB)
	D_TABL 	(PLAN_)
	D_TABX 	(_TYPE)
	D_TEXT	(DIGIT_N)
D_END		(P_REDIRECTION_NB_N_END)

START	(NI2_P_REDIRECTION_NB)
	TABL	(NI2_T_REDIRECTION_NB_PLAN,  	&i_redirection_nb[0].plan_id)
	TABX	(NI2_TX_REDIRECTION_NB_TYPE,	&i_redirection_nb[0].plan_id,  &i_redirection_nb[0].nb_type)
	TEXT	(3,NI2_MX_SZ_REDIRECTION_NB,DIGIT,	&i_redirection_nb[0].lgth,	(uchar **)&i_redirection_nb[0].p_add)
END			(0)

/*-------------------------------------------------------------------------*/

			/* REDIRECTION_NB : redirection number */

D_START	(NI2_P_REDIRECTION_NB_NET_SPF)
	D_TABL 	(PLAN_)
	D_TABX 	(_TYPE)
	D_TEXT	(DIGIT_N)
D_END		(P_REDIRECTION_NB_NET_SPF_END)

START	(NI2_P_REDIRECTION_NB_NET_SPF)
	TABL	(NI2_T_REDIRECTION_NB_PLAN,  	&i_redirection_nb_net_spf[0].plan_id)
	TABX	(NI2_TX_REDIRECTION_NB_TYPE,	&i_redirection_nb_net_spf[0].plan_id,  &i_redirection_nb_net_spf[0].nb_type)
	TEXT	(3,NI2_MX_SZ_REDIRECTION_NB,DIGIT,	&i_redirection_nb_net_spf[0].lgth,	(uchar **)&i_redirection_nb_net_spf[0].p_add)
END			(0)

/*-------------------------------------------------------------------------*/

			/* SIGNAL : Signal */

D_START	(NI2_P_SIGNAL)
	D_TABL	(VAL_)
D_END		(SIGNAL_E)

START	(NI2_P_SIGNAL)
	TABL	(NI2_T_SIGNAL_VAL,				&i_signal[0].val)
END			(0)

/*-------------------------------------------------------------------------*/

			/* SPID */

#if EQUIPMENT == NT2

D_START	(NI2_P_SPID)
	D_ANY_VAL (_CES)
	D_TEXT	(IA5_DIGIT_)
D_END	(P_SPID)

START (NI2_P_SPID)
	ANY_VAL (&i_spid[0].ces)
	TEXT	(1,NI2_MX_SZ_SPID, DIGIT, 	&i_spid[0].lgth, (uchar **)&i_spid[0].p_spid)
END	(0)

#endif

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START		(NI2_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(NI2_P_RESTART_IND)
	TABL	(NI2_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

/*-------------------------------------------------------------------------*/

			/* TRANSIT_NET_SEL : Transit network selection */

D_START	(NI2_P_TRANSIT_NET_SEL)
	D_TABL	(TYPE)
	D_TABL	(PLAN)
	D_TEXT	(NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(NI2_P_TRANSIT_NET_SEL)
	TABL	(NI2_T_TRANSIT_NET_TYPE,	&i_transit_net_sel[0].net_id_type)
	TABL	(NI2_T_TRANSIT_NET_PLAN,	&i_transit_net_sel[0].net_id_plan)
	TEXT	(1,NI2_MX_SZ_TRANSIT_NET_SEL,ANY_CHAR,&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

/*-------------------------------------------------------------------------*/

			/* UUI : user to user information */

D_START	(NI2_P_UUI)
	D_TABL		(PROTOCOL_DISCR)
	D_IF_VAL	(DISCR_IA5)
		D_TEXT  (INFO_IA5)
	D_ELSE		(OTHER_DISCR)
		D_TEXT  (INFO_OTHER)
	D_END_IF	(DISCR)
D_END		(UUI_END)

START	(NI2_P_UUI)
	TABL	(NI2_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)
	IF_VAL		(&i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT	(0,NI2_MX_SZ_UUI,ANY_CHAR, 	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE		()
		TEXT	(0,NI2_MX_SZ_UUI,ANY_OCTET,	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF		()
END			(0)

/*----------------------------codeset 5------------------------------------*/

			/* Operator System Access (OS_ACCSS) */

D_START	(NI2_P_OS_ACCSS)
	D_TABL  (ACCSS_TYPE)
D_END       (E_OS_ACCSS)

START	(NI2_P_OS_ACCSS)
	TABL    (NI2_T_TYPE_ACCSS,	&i_os_accss[0].access_type)
END         (0)

/*-------------------------------------------------------------------------*/

			/* DISPLAY_TXT : display facility */

D_START	(NI2_P_DISPLAY)
	D_TEXT	(DISPLAY_INFO)
D_END		(DISPLAY_END)

START	(NI2_P_DISPLAY)
	TEXT	(0,NI2_MX_SZ_DISPLAY,ANY_OCTET,		&i_display[0].lgth,	(uchar **)&i_display[0].p_info)
END			(0)

/*----------------------------codeset 6------------------------------------*/

			/* Call appearance (CALL_APPEAR) */

D_START	(NI2_P_CALL_APPEAR)
	D_ANY_VAL (CALL_APPEAR_IDENT)
	D_ANY_VAL (EXT_CALL_APPEAR_ID)
D_END       (E_CALL_APPEAR)

START	(NI2_P_CALL_APPEAR)
	ANY_VAL (&i_call_appear[0].call_appear_id)
	ANY_VAL (&i_call_appear[0].call_appear_id_2)
END         (ni2_call_appear_ssdu)

/*EOF*/

