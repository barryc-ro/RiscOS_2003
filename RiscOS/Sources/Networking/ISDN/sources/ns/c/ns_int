
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_int.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *
 *		Contains functions used in the macros defined in 'ns_mac.h'.
 *
 *		This module shall be linked with the CC entity, as they are part
 *		of the NS interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"
#include "ns_int.h"
#include "ns_mac.h"
#include "isdn.h"
#include "ctx_ext.h"

		/*
			Keep NS interface context pointers to remain compatible with
			older CC entity versions that still do not use Isdn_ctx,
			but only Isdn_ctx_ext.
		*/

	Isdn_ctx;

#if NS_IE_TSP_OUT == ON
	void ns_int_init_ctx_rq_rs (offset_lgth, p_off, p_ns_int_ctx, data_lgth)
		uchar		offset_lgth;				/* offset area length of primitive */
		uchar  FAR *p_off;						/* data area start */
		struct ns_int_ctx_s FAR *p_ns_int_ctx;	/* pointer to the user 'ns_int_ctx' structure */
		ushort		data_lgth;					/* data area length */
#else
	void ns_int_init_ctx_rq_rs (offset_lgth, p_off, p_ns_int_ctx)
		uchar		offset_lgth;				/* offset area length of primitive */
		uchar  FAR *p_off;						/* data area start */
		struct ns_int_ctx_s FAR *p_ns_int_ctx;	/* pointer to the user 'ns_int_ctx' structure */
#endif

{
	ns_offset_t	FAR	*p__current;

		/* Initialize the global pointers */

	p_ns_int_ctx -> p__offset 	= p_ns_int_ctx -> p__start = p_off;
	p_ns_int_ctx -> p__val		= p_ns_int_ctx -> p__offset + offset_lgth;

#	if NS_IE_TSP_OUT == ON
		p_ns_int_ctx -> p__eob	= p_off + (data_lgth - 1);
#	endif

		/* Reset the offset area */

	for (p__current = (ns_offset_t FAR *)(p_ns_int_ctx -> p__offset); (p__current != (ns_offset_t FAR *)p_ns_int_ctx -> p__val); p__current++) {
		*p__current = OFFSET_NIL;
	}
}

/*-------------------------------------------------------------------------*/

void ns_int_set_offset (ie_field_offset, p_ns_int_ctx)
	ns_offset_t ie_field_offset;
	struct ns_int_ctx_s FAR *p_ns_int_ctx;	/* pointer to the user 'ns_int_ctx' structure */
{
	ns_offset_t 	FAR	*p__current;

	p__current = (ns_offset_t FAR *)(p_ns_int_ctx -> p__offset + ie_field_offset);

		/* Find the first NIL offset (if repeated IE) */

	while (*p__current != OFFSET_NIL) {
		p__current = (ns_offset_t FAR *)(p_ns_int_ctx -> p__offset + *p__current);
	}

	p_ns_int_ctx -> p__val = (uchar FAR *)Round ((long)(p_ns_int_ctx -> p__val));
	*((ns_offset_t FAR *)(p_ns_int_ctx -> p__val)) = OFFSET_NIL;

	if ((ushort)(p_ns_int_ctx -> p__val - p_ns_int_ctx -> p__start) <= (ns_offset_t)(~0)) {
		*p__current = (ns_offset_t)(p_ns_int_ctx -> p__val - p_ns_int_ctx -> p__start);

	} else {

		Trap (TRAP_NS_SSDU_IE_OFFSET_OVERFLOW, "ns_int_set_offset");
	}
}

/*EOF*/
