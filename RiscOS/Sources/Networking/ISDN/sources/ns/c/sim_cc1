
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - simul_cc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *   build_sdu_cc_to_ns - implements the building of a call
 *                        control message sent to NS.
 *
 *   build_sdu_ti_to_ns - implements the sending of a timer expiry
 *                        message to the NS entity.
 *
 *	build_sdu_sm_to_mns - implements the building of a message
 *						  from System Management entity to MNS entity.
 *
 *	build_sdu_cc_ss_data - implements the building of SUPPLEMENTARY SERVICES
 *				specific data inside a call control message for the NS entity.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if SIMULATION == ON

	extern struct code_text 			*p_tab_ti_ref;
	extern struct code_text 			*p_tab_ti_ns_prim;
	extern struct code_text 			*p_tab_ns_prim;
	extern struct code_text 			*tab_ti_ref			[MX_NETWORK_NB];
	extern struct code_text 			*tab_ti_ns_prim		[MX_NETWORK_NB];
	extern struct code_text 			*tab_ns_prim		[MX_NETWORK_NB];

#endif


#if NS_SIM_BUILDER == ON

#	include "simul.h"

#	undef	F_AT4
#	define	F_AT4	OFF

#	undef	F_AT5
#	define	F_AT5	OFF

#	undef	F_AT9
#	define	F_AT9	OFF

#	undef	F_BIP
#	define	F_BIP	OFF

#	undef	F_AU1
#	define	F_AU1	OFF

#	undef	F_BV1
#	define	F_BV1	OFF

#	undef	F_BT2
#	define	F_BT2	OFF

#	undef	F_TR6
#	define	F_TR6	OFF

#	undef	F_ETS
#	define	F_ETS	OFF

#	undef	F_A17
#	define	F_A17	OFF

#	undef	F_A11
#	define	F_A11	OFF

#	undef	F_E10
#	define	F_E10	OFF

#	undef	F_VN2
#	define	F_VN2	OFF

#	undef	F_VN3
#	define	F_VN3	OFF

#	undef	F_VN6
#	define	F_VN6	OFF

#	undef	F_KDD
#	define	F_KDD	OFF

#	undef	F_NI1
#	define	F_NI1	OFF

#	undef	F_NI2
#	define	F_NI2	OFF

#	undef	F_DMS
#	define	F_DMS	OFF

#	undef	F_NTT
#	define	F_NTT	OFF

#	undef	F_SWD
#	define	F_SWD	OFF

#	if F_QSI == ON		/* keep a trace of "F_QSI" flag value using a local flag for further use */
#		define F_LOCAL_QSI	ON
#	else
#		define F_LOCAL_QSI	OFF
#	endif

#	undef	F_QSI
#	define	F_QSI	OFF

#	undef	F_HKT
#	define	F_HKT	OFF

#	include "ns_mac.h"

/*--------------------------------------------------------------------------*/

static uchar	g_ns_na_nb;
static uint 	g_ns_cfg_data;

uchar			g_ns_cause;
uint 			g_ns_call_ap;

#if NS_RESTART_PROCEDURE == ON
	static uchar g_ns_restart_class;
	static uchar g_ns_restart_chan_nb;
#endif

#if NS_MAINTENANCE_CAPABILITY == ON
	uchar	g_ns_maint_state=0;
	uchar 	g_ns_maint_pref =0;
	uchar	g_ns_maint_b_channel = 1;
	uchar	g_ns_maint_int = 0;
#endif

#if NEW_FCT_STYLE == ON

	void pr_ns_code				(void);
	void pr_mns_code			(void);
	void pr_ti_code				(void);

	void mg_ns_na_nb			(void);
	void mg_ns_operator			(void);
	void mg_ns_country			(void);
	void mg_ns_na_type			(void);
	void mg_ns_na_connection	(void);
	void mg_ns_na_fct			(void);
	void mg_ns_na_call			(void);
	void mg_ns_call_ap			(void);
	void mg_ns_cause			(void);

#	if NS_MAINTENANCE_CAPABILITY == ON
		void mg_ns_maint_state	(void);
		void mg_ns_maint_pref	(void);
		void mg_ns_maint_b_chan	(void);
		void mg_ns_maint_int	(void);
#	endif

#	if NS_RESTART_PROCEDURE == ON
		void mg_ns_restart_class	(void);
		void mg_ns_restart_chan_nb	(void);
#	endif

#else

	void pr_ns_code				();
	void pr_mns_code			();
	void pr_ti_code				();

	void mg_ns_na_nb			();
	void mg_ns_operator			();
	void mg_ns_country			();
	void mg_ns_na_type			();
	void mg_ns_na_connection	();
	void mg_ns_na_fct			();
	void mg_ns_na_call			();
	void mg_ns_call_ap			();
	void mg_ns_cause			();

#	if NS_MAINTENANCE_CAPABILITY == ON
		void mg_ns_maint_state	();
		void mg_ns_maint_pref	();
		void mg_ns_maint_b_chan	();
		void mg_ns_maint_int	();
#	endif

#	if NS_RESTART_PROCEDURE == ON
		void mg_ns_restart_class	();
		void mg_ns_restart_chan_nb	();
#	endif

#endif

/*--------------------------------------------------------------------------*/
extern CONST	struct code_text mns_prim[];

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             build_sdu_cc_to_ns - implements the building of a call
				 control service message for the NS entity.

Usage            uchar build_cc ();

Common constants and declarations : ns.h

Common objects   : message current context.

*-------------------------------------------------------------------------*/

uchar build_sdu_cc_to_ns ()
{
	mg_nai 		();
	mg_conn_id 	();
	mg_code 	();

	while (g_code[0] == '?') {
		pr_ns_code ();
		mg_code ();
	}

		/* Is it an extended code ? */

	if (g_code[0] == '+') {
		mg_code ();
		g_code[0] += NS_EXT;
	}

	if (ns_access_na (g_nai) == NOK) {
		return (NOK);
	}

#if 0
		/* To be used whith AT5 voice calls only */

	if (g_code[0] == NS_CONN_RQ) {
		mg_ns_call_ap();
	}
#endif

#	if ONE_NETWORK == OFF
		ns_build_p_table ();
#	endif

	return (Cc_load_ns_test (g_code[0], g_nai, 0, g_conn_id));
}

/*--------------------------------------------------------------------------*/

uchar build_sdu_ti_to_ns ()
{
	mg_nai 		();
	mg_conn_id 	();
	do {
		Prompt	("                   timer", c, g_code[0]);
		Scan	(1s, g_code);
		Echo	(c, g_code[0]);

		if (g_code[0] == '?') {
			pr_ti_code ();
		}

	} while (g_code[0] == '?');

	Prompt	("         sequence number", 3d, g_inf0);
	Scan	(3d, &g_inf0);
	Echo	(3d, g_inf0);

		/* Load the message */

	load_message (ENT_TI, ENT_NS);

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             build_sdu_sm_to_mns - implements the building of a message
					from System Management entity to MNS entity.

Usage            uchar build_sdu_sm_to_mns (void);

Common constants and declarations : ns.h

Common objects   : message current context.

*-------------------------------------------------------------------------*/

uchar build_sdu_sm_to_mns ()
{
	uchar					i, j;					/* loop indexes */
	struct ns_config FAR	*p_ns_config;			/* pointer to NS config data */
	struct i_ns_na FAR		*p_ns_config_na;		/* pointer to NS NA config data */

#	if NS_RESTART_PROCEDURE == ON
		uchar FAR 	*p_data;						/* pointer to Restart data */
#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		nai_t g_nai_sav;
#	endif

		/* init global message header variables */

	g_nai  = NAI_NIL;
	g_sapi = SAPI_NIL;
	g_add  = ADD_NIL;

		/* get code and process according to value */

	mg_code ();

	switch (g_code[0]) {

		case SM_RESET_CONFIG_RQ :

			mg_nai ();
			break;

		case SM_STOP_RQ :

			mg_nai ();

#			if NS_RESTART_PROCEDURE == ON

					/* Allocate or reused a buffer and init data pointer */

				Buffer_alloc_reused;
				p_data = Buffer_a_start_data;

				mg_ns_restart_class ();
				Mns_restart_class = g_ns_restart_class;

				if (g_ns_restart_class == RI_INDICATED_CHANNEL) {

					mg_ns_restart_chan_nb ();
					Mns_restart_b_chan_nb = g_ns_restart_chan_nb;
				}

#				if NS_MAINTENANCE_CAPABILITY == ON
					g_nai_sav = g_nai;
					mg_nai ();
					Mns_restart_interface = g_nai;
					g_nai = g_nai_sav;
#				endif

				Buffer_data_size = Mns_restart_size;

				S_msg_init_link_buffer;

#			endif

			S_msg_data_size = 0;
			break;

		case SM_SET_CONFIG_RQ :

				/* Allocate or reused a buffer and init data pointer */

			Buffer_alloc_reused;
			p_ns_config	= (struct ns_config FAR *)Buffer_a_start_data;

			mg_ns_na_nb ();

			if (g_ns_na_nb > NS_MX_NA) {

				Free_buffer (p_buffer);
				mg_err ("Bad number of NAs in NS config.");
				return (NOK);
			}

			Ns_config_na_nb = g_ns_na_nb;

			mg_ns_operator ();			/* get operator (ETSI, VN4, NI2, ...) */
			Ns_config_operator = g_ns_cfg_data;

			mg_ns_country ();			/* get country (EUROPE, FRANCE, USA, ...) */
			Ns_config_country = g_ns_cfg_data;

			for (i = 0; i < g_ns_na_nb; i++) {

					/* set NA config data pointer */

				p_ns_config_na = Ns_config_na_a (i);

					/* set default values */

				for (j = 0; j < NS_MX_CALL_TIMER; j++) {

					Ns_config_call_ti_val (j) = 0;		/* default values for Timers */
				}

				for (j = 0; j < NS_MX_DLCI_TIMER; j++) {

					Ns_config_dl_ti_val (j) = 0;			/* default values for Timers */
				}

				for (j = 0; j < (NS_MX_SZ_SPID + 1); j++) {

					Ns_config_a_spid[j] = 0;
				}

				Ns_config_subscription = ALL_SERVICES;
				Ns_config_na_operator = 0;
				Ns_config_na_country = 0;

				mg_nai ();					/* get NAI */
				Ns_config_nai = g_nai;

				mg_ns_na_type ();			/* get type (BRI/PRI) */
				Ns_config_type = g_ns_cfg_data;

				if (g_ns_cfg_data == BRI) {

					mg_ns_na_connection ();		/* get connection (POINT-TO-POINT/MULTIPOINT) */
					Ns_config_connection = g_ns_cfg_data;
					Ns_config_channel_nb = 2;

				} else {

					Ns_config_connection = POINT_TO_POINT;
					Ns_config_channel_nb = 30;
				}

				mg_ns_na_fct ();				/* get Functional Grouping */
				Ns_config_fct = g_ns_cfg_data;

				mg_ns_na_call ();				/* get number of incoming calls */
				Ns_config_incoming_call_nb = g_ns_cfg_data;

				mg_ns_na_call ();				/* get number of outgoing calls */
				Ns_config_outgoing_call_nb = g_ns_cfg_data;

				mg_ns_na_call ();				/* get number of mixed calls */
				Ns_config_mixed_call_nb = g_ns_cfg_data;
			}

			Buffer_data_size = sizeof (struct ns_config);
			S_msg_init_link_buffer;
			break;

		case SM_DL_DLCI_RQ :
		case SM_DL_DLCI_IN :

				/***************************************************************/
				/*															   */
				/* R_msg_inf0 = NIL (return code) or fonction code			   */
				/* R_msg_inf1 = SAPI or DL_SAPI_NIL if no DL assignment to do  */
				/* R_msg_inf2 = TEI or DL_TEI_NIL (revalid the previous TEI)   */
				/* R_msg_inf3 = CES if used									   */
				/*															   */
				/***************************************************************/

				mg_nai 		();
				mg_conn_id 	();

				S_msg_inf0 = g_inf0= 97;
				S_msg_inf1 = 0;
				S_msg_inf2 = 64;
				S_msg_inf3 = g_add;
				break;

#		if NS_MAINTENANCE_CAPABILITY == ON
			case SM_CHANNEL_MAINT_RQ :
#		endif
		default :

			build_sdu_std ();
			break;
	}

		/* Load the message */

	load_message (ENT_SM, ENT_MNS);

	return (OK);
}

/*-------------------------------------------------------------------------*/

void pr_ns_code ()
{
	uchar i = 0;

	while (Ns_prim[i].code != 0) {

		if (Ns_prim[i].code < NS_EXT) {

			if ((i+1) % 2) {
				fprintf (f_out, "\n     %c : %s",Ns_prim[i].code, Ns_prim[i].p_text);

			} else {

				fprintf (f_out, "\t\t   %c : %s",Ns_prim[i].code, Ns_prim[i].p_text);
			}

		} else {

			if ((i+1) % 2) {
				fprintf (f_out, "\n  (+)%c : %s",Ns_prim[i].code - NS_EXT, Ns_prim[i].p_text);

			} else {

				fprintf (f_out, "\t\t(+)%c : %s",Ns_prim[i].code - NS_EXT, Ns_prim[i].p_text);
			}
		}

		i++;
	}

	fprintf (f_out, "\n");
}

void pr_mns_code ()
{
	uchar i = 0;

	while (mns_prim[i].code != 0) {

		if ((i+1) % 2) {
			fprintf (f_out, "\n\t%c : %s",mns_prim[i].code,mns_prim[i].p_text);

		} else {

			fprintf (f_out, "\t\t%c : %s",mns_prim[i].code,mns_prim[i].p_text);
		}

		i++;
	}
	fprintf (f_out, "\n");

}

void pr_ti_code ()
{
	uchar i = 0;

	while (Ti_ns_prim[i].code != 0) {

		if ((i+1) % 2) {
			fprintf (f_out, "\n\t%c : %s",Ti_ns_prim[i].code,Ti_ns_prim[i].p_text);

		} else {

			fprintf (f_out, "\t\t%c : %s",Ti_ns_prim[i].code,Ti_ns_prim[i].p_text);
		}

		i++;
	}

	fprintf (f_out, "\n");

}

/*-------------------------------------------------------------------------*/

#if NS_RESTART_PROCEDURE == ON

		/* Restart class */

void mg_ns_restart_class ()
{
	Prompt	("           Restart Class", u, g_ns_restart_class);
	Scan	(d, &g_ns_restart_class);
	Echo	(u, g_ns_restart_class);
}

		/* B-Channel Nb */

void mg_ns_restart_chan_nb ()
{
	Prompt	("        B-Channel Number", u, g_ns_restart_chan_nb);
	Scan	(d, &g_ns_restart_chan_nb);
	Echo	(u, g_ns_restart_chan_nb);
}

#endif

void mg_ns_na_nb ()
{
	Prompt	(" NA NB in config message", u, g_ns_na_nb);
	Scan	(d, &g_ns_na_nb);
	Echo	(u, g_ns_na_nb);
}

void mg_ns_operator ()
{
	Prompt	("  operator (ETS, VN4,..)", u, g_ns_cfg_data);
	Scan	(d, &g_ns_cfg_data);
	Echo	(u, g_ns_cfg_data);
}

void mg_ns_country ()
{
	Prompt	("country (EUROPE,USA,...)", u, g_ns_cfg_data);
	Scan	(d, &g_ns_cfg_data);
	Echo	(u, g_ns_cfg_data);
}

void mg_ns_na_type ()
{
	Prompt	("    NA type : BRI or PRI", u, g_ns_cfg_data);
	Scan	(d, &g_ns_cfg_data);
	Echo	(u, g_ns_cfg_data);
}

void mg_ns_na_connection ()
{
	Prompt	("NA connection (P-TO-P/M)", u, g_ns_cfg_data);
	Scan	(d, &g_ns_cfg_data);
	Echo	(u, g_ns_cfg_data);
}

void mg_ns_na_fct ()
{
	Prompt	("  NA Functional Grouping", u, g_ns_cfg_data);
	Scan	(d, &g_ns_cfg_data);
	Echo	(u, g_ns_cfg_data);
}

void mg_ns_na_call ()
{
	Prompt	("NA call Nb (INC-OUT-MIX)", u, g_ns_cfg_data);
	Scan	(d, &g_ns_cfg_data);
	Echo	(u, g_ns_cfg_data);
}

void mg_ns_cause ()
{
	Prompt	("   cause : decimal value", u, g_ns_cause);
	Scan	(d, &g_ns_cause);
	Echo	(u, g_ns_cause);
}

#if NS_MAINTENANCE_CAPABILITY == ON

void mg_ns_maint_state ()
{
	Prompt	("  Maintenance state (0=IS,1=MAINT,2=OOS", u, g_ns_maint_state);
	Scan	(d, &g_ns_maint_state);
	Echo	(u, g_ns_maint_state);
}

void mg_ns_maint_pref ()
{
	Prompt	("  Preference (0=Interface,1=B channel", u, g_ns_maint_pref);
	Scan	(d, &g_ns_maint_pref);
	Echo	(u, g_ns_maint_pref);
}

void mg_ns_maint_b_chan ()
{
	Prompt	("  B channel #", u, g_ns_maint_b_channel);
	Scan	(d, &g_ns_maint_b_channel);
	Echo	(u, g_ns_maint_b_channel);
}

void mg_ns_maint_int ()
{
	Prompt	("  Nai #", u, g_ns_maint_int);
	Scan	(d, &g_ns_maint_int);
	Echo	(u, g_ns_maint_int);
}

#endif
void mg_ns_call_ap ()
{
	Prompt	("  Call App #", u, g_ns_call_ap);
	Scan	(d, &g_ns_call_ap);
	Echo	(u, g_ns_call_ap);
}

#if NS_SUPP_SERVICES == ON

		/* External ISDN context */

	Isdn_ctx_ext;

static uchar g_ns_ss_data[2];

#if NEW_FCT_STYLE == ON
	void mg_ns_supp_serv_info	(void);
	void mg_ns_ss_comp_type 	(void);
	void mg_ns_ss_operation		(void);

#	if F_LOCAL_QSI == ON
		uchar ns_qsi_mg_ss_data (uchar comp_nb, uchar FAR *p_dse_comp_nb);
#	endif

#else
	void mg_ns_supp_serv_info	();
	void mg_ns_ss_comp_type 	();
	void mg_ns_ss_operation		();

#	if F_LOCAL_QSI == ON
		uchar ns_qsi_mg_ss_data ();
#	endif

#endif

	/* possible values of simulation variable for Type of component */

#define NS_SIMUL_SS_INVOKE				'I'
#define NS_SIMUL_SS_RETURN_RESULT		'R'
#define NS_SIMUL_SS_RETURN_ERROR		'E'
#define NS_SIMUL_SS_REJECT				'J'

void mg_ns_supp_serv_info ()
{
	Prompt	("SUPP SERVICES info", u, g_ns_cfg_data);
	Scan	(d, &g_ns_cfg_data);
	Echo	(u, g_ns_cfg_data);
}

void mg_ns_ss_comp_type ()
{
	Prompt	("Type of component", c, g_ns_ss_data[0]);
	Scan	(1s, g_ns_ss_data);
	Echo	(c, g_ns_ss_data[0]);
}

void mg_ns_ss_operation ()
{
	Prompt	("operation ID", u, g_ns_ss_data[0]);
	Scan	(d, g_ns_ss_data);
	Echo	(u, g_ns_ss_data[0]);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            build_sdu_cc_ss_data - implements the building of SUPPLEMENTARY SERVICES
				specific data inside a call control message for the NS entity. A Macro
				"Isdn_xxx_store_ie" containing a facility component must have been called before.

Usage            void build_sdu_cc_ss_data ();

Common constants and declarations : ns.h, ns_ssmac.h, ns_ssint.h.

Common objects   : message current context.

*-------------------------------------------------------------------------*/

void build_sdu_cc_ss_data ()
{
	uchar	component_nb;		/* number of components */

#	if F_LOCAL_QSI == ON
		uchar	dse_component_nb = 255;	/* number of components in current DseAPDU */
#	endif

	mg_ns_supp_serv_info ();	/* get number of components */

	component_nb = (uchar)g_ns_cfg_data;

	if (component_nb > NS_MX_FAC_COMPONENTS) {

		component_nb = NS_MX_FAC_COMPONENTS;
	}

	while (component_nb-- > 0) {	/* loop on all components */

#		if F_LOCAL_QSI == ON
		if ((Na_network == qsi) && (dse_component_nb == 255)) {	/* Q-SIG specific Facility data */

			g_ns_cause = ns_qsi_mg_ss_data (component_nb, &dse_component_nb);

			if (g_ns_cause == STOP) {	/* end of IE process */

				return;
			}

			if (g_ns_cause == CONTINUE) {

				continue;
			}
		}
#		endif

		mg_ns_ss_comp_type ();	/* get Type of component */

		switch (g_ns_ss_data[0]) {

			default :
			case NS_SIMUL_SS_INVOKE :

				mg_ns_ss_operation ();	/* get operation ID */
				Store_ns_fac_invoke_comp	(ABSENT, 5, 0, g_ns_ss_data[0]);

				switch (g_ns_ss_data[0]) {

					default :

						Store_ns_fac_no_op_data	();	
						break;

#					if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
					case NS_OP_AOC_CHARGING_RQ :	/* Charging Request */

						Store_ns_aoc_charg_rq_arg	(NS_AOC_CHARGING_DURING_CALL);
						break;
#					endif 

#					if NS_SS_AOC_S == ON
					case NS_OP_AOCS_CURRENCY :	/* AOC-S given in currency units */

						Store_ns_aocs_currency_not_av	();
						break;

					case NS_OP_AOCS_SPECIAL_ARR :	/* AOC-S for special charging arrangement */

						Store_ns_aocs_special_arr	(NS_AOCS_SP_ARR_INFO, 7);		
						break;
#					endif 

#					if NS_SS_AOC_D == ON
					case NS_OP_AOCD_CURRENCY :	/* AOC-D given in currency units */

						Store_ns_aocd_currency_not_spfc	(NS_AOCD_CURR_FREE_OF_CHARGE);
						break;

					case NS_OP_AOCD_CHARGING_UNIT :	/* AOC-D given in charging units */

						Store_ns_aocd_charg_u_not_spfc	(NS_AOCD_CHARGING_NOT_AVAILABLE);
						break;
#					endif 

#					if NS_SS_AOC_E == ON
					case NS_OP_AOCE_CURRENCY :	/* AOC-E given in currency units */

						Store_ns_aoce_currency_free		(NS_AOCE_ASSOC_CHARG_NUMBER,
														 0,
														 NS_SS_PARTY_NB_PUBLIC,
														 NS_SS_PUBLIC_NB_NATIONAL,
														 3,
														 "850");
						break;

					case NS_OP_AOCE_CHARGING_UNIT :	/* AOC-E given in charging units */

						Store_ns_aoce_charg_u_spfc		(NS_AOCE_ASSOC_CHARG_NUMBER,
														 0,
														 NS_SS_PARTY_NB_UNKNOWN,
														 255,
														 2,
														 "95",
														 NS_AOCE_BILL_ID_DEFLECTION);

						Store_ns_aoc_recorded_unit		(255, NS_SS_INT_ULONG_NOT_PROVIDED);
						Set_ns_next_aoc_recorded_u		();
						Store_ns_aoc_recorded_unit		(255, 16777213L);
						Set_ns_last_aoc_recorded_u		();
						break;
#					endif

#					if NS_SS_CUG == ON		/* Closed User Group SS supported */

						case NS_OP_CUG_CALL :	/* CUGCallOperation operation */

							Store_ns_cug_call	(TRUE, 31555);
							break;
#					endif

#					if F_LOCAL_QSI == ON	/* Q-SIG specific SS{ */
#					if NS_SS_NAME_IDENT == ON	/* Name Identification SS supported */

						case NS_OP_QSI_CALLING_NAME_ID :	/* calling Name */

							Store_ns_qsi_name_ident	(NS_SS_QSI_NAME_NOT_AVAIL, 0, 0, P_NIL, 0, P_NIL);
							break;

						case NS_OP_QSI_CALLED_NAME_ID :	/* called Name */

							Store_ns_qsi_name_ident	(NS_SS_QSI_NAME_ALLOWED_EXT, 255, 10, "CalledName",
													 4, "\xa5\x02\x87\x00");
							break;

						case NS_OP_QSI_CONNECTED_NAME_ID :	/* connected Name */

							Store_ns_qsi_name_ident	(NS_SS_QSI_NAME_RESTRICT_SIMP, 0, 12, "Connected ID",
													 0, P_NIL);
							break;

						case NS_OP_QSI_BUSY_NAME_ID :	/* busy Name */

							Store_ns_qsi_name_ident	(NS_SS_QSI_NAME_NOT_AVAIL, 0, 0, P_NIL,
													 4, "\xa5\x02\x88\x00");
							break;
#					endif
#					if (NS_SS_CALL_TRANSFER == ON) || (NS_SS_PATH_REPLACEMENT == ON) /* Call Transfer SS or Path Replacement ANF supported */

#						if NS_SS_CALL_TRANSFER == ON
						case NS_OP_QSI_TRF_SETUP :	/* CallTransferSetup */
#						endif

#						if NS_SS_PATH_REPLACEMENT == ON
						case NS_OP_QSI_PTHR_SETUP :	/* PathReplaceSetup */
#						endif

							Store_ns_qsi_trf_setup_arg	(1, "0", 0, P_NIL);
							break;

#						if NS_SS_CALL_TRANSFER == ON
						case NS_OP_QSI_TRF_INITIATE :	/* CallTransferInitiate */
#						endif

#						if NS_SS_PATH_REPLACEMENT == ON
						case NS_OP_QSI_PTHR_PROPOSE :	/* PathReplacePropose */
						case NS_OP_QSI_PTHR_RETAIN :	/* PathReplaceRetain */
#						endif

							Store_ns_qsi_trf_init_arg	(4, "6854",
														 NS_SS_PARTY_NB_TELEX, 255, 3, "888",
														 0, P_NIL);
							break;
#					endif
#					if NS_SS_CALL_TRANSFER == ON /* Call Transfer SS supported */

						case NS_OP_QSI_TRF_IDENTIFY :	/* CallTransferIdentify */
						case NS_OP_QSI_TRF_ABANDON :	/* CallTransferAbandon */

							Store_ns_qsi_tsp_extension	(12, "\xa1\x0a\x06\x02\x44\x04\xa0\x04\TRFi");
							break;

						case NS_OP_QSI_TRF_ACTIVE :	/* CallTransferActive */

							Store_ns_qsi_trf_active_1	(NS_SS_PRES_RESTRICTED_ADD, NS_SS_PARTY_NB_PRIVATE,
														 NS_SS_PRIV_NB_LEVEL2_REGIONAL, NS_SS_SCR_IND_USER_VERIF_FAIL,
														 NS_SS_PARTY_SA_USER_SPECIF, 255, 255, 0);

							Store_ns_qsi_trf_active_2	(5, "33322", 8, "ABCaddtf",
														 0, P_NIL, 0, P_NIL, 5, "\xa9\x03\x06\x01\x02");
							break;

						case NS_OP_QSI_TRF_COMPLETE :	/* CallTransferComplete */

							Store_ns_qsi_trf_complete_1	(NS_QSI_TRF_DESIG_END_SECOND, NS_SS_PRES_NOT_AVAIL_INTER_NB,
														 255, 255, 0,
														 NS_SS_QSI_NAME_ALLOWED_SIMP, 255,
														 NS_QSI_TRF_STAT_CALL_ANSWERED);

							Store_ns_qsi_trf_complete_2	(0, P_NIL, 15, "Q-SIG IE string",
														 2, "Nm", 0, P_NIL);
							break;

						case NS_OP_QSI_TRF_UPDATE :	/* CallTransferUpdate */

							Store_ns_qsi_trf_update_1	(NS_SS_PRES_RESTRICTED_ADD, NS_SS_PARTY_NB_PUBLIC,
														 NS_SS_PUB_PRIV_NB_ABBREVIATED, NS_SS_SCR_IND_USER_VERIF_PASS,
														 NS_SS_QSI_NAME_ALLOWED_EXT, 1);

							Store_ns_qsi_trf_update_2	(3, "636", 1, "N", 9, "IE:BC+LLC",
														 10, "\xa9\x08\x06\x01\x42\x12\x03\UpD");
							break;

						case NS_OP_QSI_TRF_SUBADD :		/* SubaddressTransfer */

							Store_ns_qsi_trf_subadd_arg	(NS_SS_PARTY_SA_NSAP, 0,
														 11, "Transfer SA", 5, "\xa0\x03\x06\x01\x51");
							break;

#					endif
#					if NS_SS_CALL_OFFER == ON /* Call Offer SS supported */
						case NS_OP_QSI_CO_REQUEST :	/* CallOfferRequest */

							Store_ns_qsi_tsp_extension	(2, "\x05\x00");
							break;
#					endif

#					if (NS_SS_CALL_OFFER == ON) || (NS_SS_DO_NOT_DISTURB == ON) || (NS_SS_CALL_INTRUSION == ON)

						case NS_OP_QSI_PATH_RETAIN :	/* PathRetain */

							Store_ns_qsi_path_retain_arg	(7, 3, "058", 5, "\x30\x03\x06\x01\x34");
							break;

						case NS_OP_QSI_SERVICE_AVAIL :	/* ServiceAvailable */

							Store_ns_qsi_path_retain_arg	(4, 2, "41", 0, P_NIL);
							break;
#					endif

#					if NS_SS_DO_NOT_DISTURB == ON /* Do Not Disturb SS supported */
						case NS_OP_QSI_DND_ACTIVATE :	/* doNotDisturbActivateQ */
						case NS_OP_QSI_DND_DEACTIVATE :	/* doNotDisturbDeactivateQ */

							Store_ns_qsi_dnd_activ_arg	(NS_SS_BASIC_TELETEX, NS_SS_PARTY_NB_UNKNOWN, 255,
														 7, "8569321", 0, P_NIL);
							break;

						case NS_OP_QSI_DND_INTERROGATE :	/* doNotDisturbInterrogateQ */

							Store_ns_qsi_dnd_inter_arg	(NS_SS_PARTY_NB_PRIVATE, NS_SS_PRIV_NB_LOCAL,
														 3, "632", 5, "\xa1\x03\x06\x01\x0a");
							break;

						case NS_OP_QSI_DND_OVERRIDE :	/* doNotDisturbOverrideQ */

							Store_ns_qsi_dnd_over_arg	(NS_QSI_DND_OVERRIDE_HIGH_P, 0, P_NIL);
							break;

						case NS_OP_QSI_DND_OVER_EXEC :	/* doNotDisturbOvrExecuteQ */

							Store_ns_qsi_tsp_extension	(6, "\xa1\x81\x03\x06\x01\x08");
							break;
#					endif

#					if NS_SS_CALL_INTRUSION == ON	/* Call intrusion SS supported */
						case NS_OP_QSI_CI_RQ :	/* callIntrusionRequest */

							Store_ns_qsi_ci_request_arg	(NS_QSI_CI_INTRUSION_HIGH_P, 0, P_NIL);	
							break;

						case NS_OP_QSI_CI_GET_CIPL :	/* callIntrusionGetCIPL */
						case NS_OP_QSI_CI_ISOLATE :	/* callIntrusionIsolate */
						case NS_OP_QSI_CI_FORCED_REL :	/* callIntrusionForcedRelease */
						case NS_OP_QSI_CI_WOB_RQ :	/* callIntrusionWOBRequest */
						case NS_OP_QSI_CI_COMPLETED :	/* callIntrusionCompleted */

							Store_ns_qsi_tsp_extension	(9, "\xa1\x81\x06\x06\x02\x89\x08\x30\x00");
							break;
#					endif

#					if NS_SS_CCBS == ON		/* Call Completion SS supported */
						case NS_OP_QSI_CCBS_RQ :	/* CcbsRequest */

							Store_ns_qsi_ccbs_rq_arg_1	(NS_SS_PRES_NB_RESTRICTED, 0, 0,
														 NS_SS_PARTY_NB_UNKNOWN, 0,
														 255, 0, 255, 0,
														 TRUE, FALSE);

							Store_ns_qsi_ccbs_rq_arg_2	(0, P_NIL, 7, "8526341", 10, "HLC : hexa",
														 0, P_NIL, 0, P_NIL, 0, P_NIL);
							break;

						case NS_OP_QSI_CCNR_RQ :	/* CcnrRequest */

							Store_ns_qsi_ccbs_rq_arg_1	(NS_SS_PRES_RESTRICTED_NB, NS_SS_PARTY_NB_NATIONAL, 255,
														 NS_SS_PARTY_NB_TELEX, 0,
														 NS_SS_PARTY_SA_NSAP, 0,
														 NS_SS_PARTY_SA_USER_SPECIF, FALSE,
														 255, TRUE);

							Store_ns_qsi_ccbs_rq_arg_2	(3, "459", 2, "66", 2, "BC",
														 1, "N", 6, "UserSA", 0, P_NIL);
							break;

						case NS_OP_QSI_CC_CANCEL :	/* CcCancel */

							Store_ns_qsi_cc_cnc_exec_full	(NS_SS_PARTY_NB_DATA, 255,
															 NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_INTERNATIONAL,
															 255, 255,
															 NS_SS_PARTY_SA_USER_SPECIF, TRUE);

							Store_ns_qsi_ccbs_rq_arg_2		(2, "98", 5, "42153", 4, "IEs ",
															 0, P_NIL, 3, "BsA", 6, "\xae\x04\x06\x02\x81\x12");
							break;

						case NS_OP_QSI_CC_EXEC_POSSIBLE :	/* CcExecPossible */

							Store_ns_qsi_cc_cnc_exec_ext	(2, "\x05\x00");
							break;

						case NS_OP_QSI_CC_PATH_RESERVE :	/* CcPathReserve */
						case NS_OP_QSI_CC_RINGOUT :	/* CcRingout */
						case NS_OP_QSI_CC_SUSPEND :	/* CcSuspend */
						case NS_OP_QSI_CC_RESUME :	/* CcResume */

							Store_ns_qsi_tsp_extension	(11, "\xae\x09\x06\x01\x47\x04\x04\CCBS");
							break;
#					endif

#					endif /* end of Q-SIG specific SS} */

#					if NS_SS_DIVERSION == ON	/* Diversion SS supported{ */

						case NS_OP_ACT_DIVERSION :	/* activation Diversion */

							Store_ns_div_activation	(NS_SS_DIV_PROCEDURE_CFB, NS_SS_BASIC_TELETEX,
													 NS_SS_PARTY_NB_DATA, 0, 3, "478",
													 NS_SS_PARTY_SA_NSAP, 0, 4, "aAbB",
													 NS_SS_DIV_SERVED_USER_IND_NB, NS_SS_PARTY_NB_PRIVATE, NS_SS_PRIV_NB_LOCAL, 7, "1919197");
							break;

						case NS_OP_DEACT_DIVERSION :	/* deactivation Diversion */

							Store_ns_div_deactivation	(NS_SS_DIV_PROCEDURE_CFU, NS_SS_BASIC_ALL_SERVICES,
														 NS_SS_DIV_SERVED_USER_ALL_NB, 0, 0, 0, P_NIL);
							break;

						case NS_OP_ACT_STAT_NOTIF_DIV :	/* activation Status Notification Diversion */

							Store_ns_div_act_stat_notif	(NS_SS_DIV_PROCEDURE_CFNR, NS_SS_BASIC_VIDEO_TELEPHONY,
														 NS_SS_PARTY_NB_NATIONAL, 0, 1, "5",
														 NS_SS_PARTY_SA_USER_SPECIF, 255, 6, "7g8h9I",
														 NS_SS_DIV_SERVED_USER_IND_NB, NS_SS_PARTY_NB_TELEX, 0, 2, "00");
							break;

						case NS_OP_DEACT_STAT_NOTIF_DIV :	/* deactivation Status Notification Diversion */

							Store_ns_div_dea_stat_notif	(NS_SS_DIV_PROCEDURE_CFU, NS_SS_BASIC_TELEPHONY_3K1HZ,
														 NS_SS_DIV_SERVED_USER_IND_NB, NS_SS_PARTY_NB_UNKNOWN, 0, 9, "415678001");
							break;

						case NS_OP_INTEROG_DIVERSION :	/* interrogation Diversion */

							Store_ns_div_interog_arg	(NS_SS_DIV_PROCEDURE_CFB, 255,
														 NS_SS_DIV_SERVED_USER_ALL_NB, 0, 0, 0, P_NIL);
							break;

						case NS_OP_DIVERSION_INFO :	/* diversion Information */

							Store_ns_div_info_1	(NS_SS_DIV_REASON_CFU, NS_SS_BASIC_ALL_SERVICES,
												 NS_SS_PARTY_SA_USER_SPECIF, FALSE,
												 NS_SS_PRES_ALLOWED_ADD, NS_SS_SCR_IND_USER_VERIF_PASS, NS_SS_PARTY_NB_NATIONAL, 0, NS_SS_PARTY_SA_NSAP, 0);
							Store_ns_div_info_2	(NS_SS_PRES_NB_RESTRICTED, 0, 0,
												 NS_SS_PRES_RESTRICTED_NB, NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_SUBSCRIBER, 255);
							Store_ns_div_info_3	(5, 3, 7, 0, 2, 9,
												 "SUPPS", "987", "patrick", P_NIL, "12", "USER INFO");
							break;

						case NS_OP_CALL_DEFLECTION :	/* call Deflection */

							Store_ns_div_deflection	(255, NS_SS_PARTY_NB_TELEX, 0, 9, 255, 0, 0, "789456123", P_NIL);
							break;

						case NS_OP_CALL_REROUTING :	/* call Rerouting */

							Store_ns_div_reroute_1	(NS_SS_DIV_REASON_CD_ALERT, 4,
													 NS_SS_PARTY_NB_UNKNOWN, 0, 255, 0,
													 NS_SS_DIV_SUB_NOTIF_WITH_NB,
													 NS_SS_PRES_ALLOWED_NB, NS_SS_PARTY_NB_PRIVATE, NS_SS_PRIV_NB_LEVEL2_REGIONAL,
													 NS_SS_PARTY_SA_USER_SPECIF, TRUE);
							Store_ns_div_reroute_2	(4, 0, 8, 3, 3,
													 "0505", "", "q 931 IE", "482", "319");
							break;

						case NS_OP_DIVERTING_LEG_INFO_1 :	/* diverting Leg Information 1 */

							Store_ns_div_info_leg_1	(NS_SS_DIV_REASON_UNKNOWN, NS_SS_DIV_SUB_NOTIF_WITHOUT_NB,
													 255, 0, 0, 0, P_NIL);		
							break;

						case NS_OP_DIVERTING_LEG_INFO_2 :	/* diverting Leg Information 2 */

							Store_ns_div_info_leg_2	(5, NS_SS_DIV_REASON_CFNR,
													 NS_SS_PRES_NOT_AVAIL_INTER_NB, 0, 0, 0,
													 NS_SS_PRES_ALLOWED_NB, NS_SS_PARTY_NB_UNKNOWN, 0, 12,
													 P_NIL, "135792468000");
							break;

						case NS_OP_DIVERTING_LEG_INFO_3 :	/* diverting Leg Information 3 */

							Store_ns_div_info_leg_3	(TRUE);
							break;

#						if F_LOCAL_QSI == ON	/* Q-SIG specific operations{ */

						case NS_OP_QSI_ACT_DIVERSION :	/* activate Diversion Q */

							Store_ns_qsi_div_activate_1	(NS_SS_DIV_PROCEDURE_CFNR, NS_SS_BASIC_UNRESTR_DIG_INFO,
														 NS_SS_PARTY_NB_DATA, 0,
														 NS_SS_PARTY_SA_NSAP, 0,
														 NS_SS_PARTY_NB_TELEX, 0,
														 NS_SS_PARTY_NB_PRIVATE, NS_SS_PRIV_NB_LOCAL);

							Store_ns_qsi_div_activate_2	(4, "1470", 6, "qsiAdd", 2, "45",
														 3, "986", 21, "\x16\x13\EXTENSION : Omnitel");
							break;

						case NS_OP_QSI_DEACT_DIVERSION :	/* deactivate Diversion Q */
						case NS_OP_QSI_INTEROG_DIVERSION :	/* interrogate Diversion Q */

							Store_ns_qsi_div_deactivate	(NS_SS_DIV_PROCEDURE_CFU, NS_SS_BASIC_VIDEOTEX_SYNT_BASE,
														 NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_INTERNATIONAL,
														 NS_SS_PARTY_NB_PRIVATE, NS_SS_PUB_PRIV_NB_ABBREVIATED,
														 6, "985236", 4, "4445", 2, "\x05\x00");
							break;

						case NS_OP_QSI_CHECK_RESTRICT :	/* Check Restriction */

							Store_ns_qsi_div_chk_rest	(NS_SS_BASIC_UNR_D_INFO_TONE_AN,
														 NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_NATIONAL,
														 NS_SS_PARTY_NB_UNKNOWN, 255,
														 4, "9526", 8, "04453456", 3, "\x06\x01\x42");
							break;

						case NS_OP_QSI_CALL_REROUTING :	/* CallRerouting */

							Store_ns_qsi_div_rerout_1	(NS_SS_DIV_REASON_CD_IMMEDIATE, 14,
														 NS_SS_PARTY_NB_UNKNOWN, 255,
														 255, 255,
														 NS_SS_DIV_SUB_NO_NOTIFICATION,
														 NS_SS_PRES_NB_RESTRICTED, 255, 255,
														 NS_SS_PARTY_SA_USER_SPECIF, TRUE,
														 NS_SS_PRES_RESTRICTED_NB, NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_SUBSCRIBER, NS_SS_SCR_IND_NETWORK,
														 NS_SS_QSI_NAME_RESTRICT_EXT, 2,
														 255, 255, 255,
														 0, 1);

							Store_ns_qsi_div_rerout_2	(4, "8956", 0, P_NIL,
														 8, "Q-SIG IE", 0, P_NIL,
														 7, "Qg : OM", 3, "112",
														 5, "NAMEs", 0, P_NIL,
														 0, P_NIL, 2, "Nm",
														 4, "\x06\x02\x42\x50");
							break;

						case NS_OP_QSI_DIVERTING_LEG_I_1 :	/* diverting Leg Information 1 */

							Store_ns_qsi_div_info_leg_1	(NS_SS_DIV_REASON_CFB, NS_SS_DIV_SUB_NOTIF_WITH_NB,
														 NS_SS_PRES_NOT_AVAIL_INTER_NB, 255, 255,
														 0, P_NIL, 10, "\xa3\x08\x06\x02\x01\x05\x30\x02\x05\x00");
							break;

						case NS_OP_QSI_DIVERTING_LEG_I_2 :	/* diverting Leg Information 2 */

							Store_ns_qsi_div_leg_2_a	(NS_SS_DIV_REASON_CD_ALERT, 8,
														 NS_SS_PRES_NB_RESTRICTED, 255, 0,
														 255, 255, 255,
														 255, 3);

							Store_ns_qsi_div_leg_2_b	(0, P_NIL, 0, P_NIL,
														 5, "ReDir", 3, "ahj",
														 4, "\xa4\x02\x05\x00");
							break;

						case NS_OP_QSI_DIVERTING_LEG_I_3 :	/* diverting Leg Information 3 */

							Store_ns_qsi_div_info_leg_3	(FALSE, 255, 0, P_NIL, 3, "\x02\x01\x00");					
							break;

						case NS_OP_QSI_CFNR_DIV_LEG_FAIL :	/* CfnrDivertedLegFailed */
#						if (NS_SS_INTERACTIONS == ON) && ((NS_SS_CALL_OFFER == ON) || (NS_SS_CALL_INTRUSION == ON))
						case NS_OP_QSI_CFB_OVERRIDE :	/* cfbOverride */
#						endif

							Store_ns_qsi_tsp_extension	(23, "\xa2\x15\x06\x01\x44\x04\x10\CFNRdivLegFailed");
							break;

#						endif	/* end of Q-SIG specific operations} */

#					endif	/* end of Diversion SS supported} */

#					if NS_SS_EXPL_CHAN_RESERVATION == ON	/* Explicit Channel Reservation function supported{ */

						case NS_OP_EXP_CH_RES_CREATE :	/* ExplicitReservationCreationControl */

							Store_ns_chan_res_create_arg	(NS_EXP_CH_RES_OPT_WITH_IND);
							break;

						case NS_OP_EXP_CH_RES_MANAGE :	/* ExplicitReservationManagement */

							Store_ns_chan_res_manage_arg	(-3);
							break;

						case NS_OP_EXP_CH_RES_CANCEL :	/* ExplicitReservationCancel */

							Store_ns_chan_res_cancel_arg	(7);
							break;

#						endif /* end of "Explicit Channel Reservation function supported"} */

#						if NS_SS_CONFERENCE == ON	/* Conference call SS supported{ */

						case NS_OP_CONF_BEGIN :	/* begin CONF */

							Store_ns_conf_begin_arg		(42);
							break;

						case NS_OP_CONF_ADD :	/* add CONF */

							Store_ns_conf_add_arg		(111);		
							break;

						case NS_OP_CONF_SPLIT :	/* split CONF */

							Store_ns_conf_split_arg		(127, 78);
							break;

						case NS_OP_CONF_DROP :	/* drop CONF */

							Store_ns_conf_other_op_arg		(127);
							break;

						case NS_OP_CONF_ISOLATE :	/* isolate CONF */
						case NS_OP_CONF_REATTACH :	/* reattach CONF */
						case NS_OP_CONF_PARTY_DISC :	/* party DISC */

#						if NS_SS_INTERACTIONS == ON
							case NS_OP_INTERACT_ID_CONFEREE :	/* IdentifyConferee */
#						endif

							Store_ns_conf_other_op_arg		(21);
							break;

#						endif	/* end of Conference call SS supported} */

#						if NS_SS_USER_USER_EXP == ON	/* explicit requests for User-to-User Signalling SS supported{ */

						case NS_OP_UUS_RQ :		/* User-to-User Signalling Request */

#						if NS_SS_INTERACTIONS == ON
							case NS_OP_INTERACT_UUS_RQ :	/* UUSRequest */
#						endif

							Store_ns_uus_rq_arg		(SERVICE_3, TRUE);
							break;

#						endif	/* end of "explicit requests for User-to-User Signalling SS supported"} */

#						if NS_SS_ECT == ON	/* Explicit Call Transfer supported { */

						case NS_OP_ECT_EXP_EXECUTE :	/* ExplicitEctExecute */

							Store_ns_ect_exp_exec_arg	(53);
							break;

						case NS_OP_ECT_SUBADD_TRANSF :	/* SubaddressTransfer */


							Store_ns_ect_sa_trf_arg		(NS_SS_PARTY_SA_NSAP, 0, 5, "ECTgh");
							break;

						case NS_OP_ECT_INFORM :	/* EctInform */

							Store_ns_ect_inform_arg		(NS_SS_ECT_ACTIVE, NS_SS_PRES_ALLOWED_NB,
														 NS_SS_PARTY_NB_PRIVATE, NS_SS_PRIV_NB_LEVEL1_REGIONAL, 3, "421");
							break;

						case NS_OP_ECT_LOOP_TEST :	/* EctLoopTest */

							Store_ns_ect_loop_test_arg		(42);
							break;

#						endif	/* end of "Explicit Call Transfer supported"} */

#						if NS_SS_FREEPHONE == ON	/* Freephone supported{ */

						case NS_OP_FPH_CALL :		/* CallFPH */

							Store_ns_fph_call_arg		(NS_SS_PARTY_NB_DATA, 255, 5, "56789");
							break;

						case NS_OP_FPH_MONITOR_T :	/* Monitor-T-FPH */

							Store_ns_fph_monitor_t_arg	(18, NS_SS_PARTY_NB_TELEX, 255, 7, 127,
															"FACILITY : monitor", "4426351");
							break;

						case NS_OP_FPH_FREE_T :		/* Free-T-FPH */

							Store_ns_fph_free_t_arg		(NS_SS_PARTY_NB_PUBLIC, NS_SS_PUB_PRIV_NB_ABBREVIATED,
															3, 0, "888");
							break;

						case NS_OP_FPH_CALL_T :		/* Call-T-FPH */

							Store_ns_fph_call_t_arg		(NS_SS_PARTY_NB_DATA, 255, 15, 85,
															"880014083697738");
							break;

#						endif	/* end of "Freephone supported"} */

#						if NS_SS_CCBS == ON		/* Completion of Calls to Busy Subscriber supported{ */

						case NS_OP_CCBS_CALL_INFO_RETAIN :	/* CallInfoRetain */

							Store_ns_ccbs_info_ret_arg		(25);
							break;

						case NS_OP_CCBS_ERASE_CALL_LK_ID :	/* EraseCallLinkageId */

							Store_ns_ccbs_eras_lk_id_arg	(33);
							break;

						case NS_OP_CCBS_DEACTIVATE :	/* CCBSDeactivate */

							Store_ns_ccbs_dea_arg			(120);
							break;

						case NS_OP_CCBS_CALL :		/* CCBSCall */

							Store_ns_ccbs_call_arg			(0);
							break;

						case NS_OP_CCBS_STOP_ALERTING :		/* CCBSStopAlerting */

							Store_ns_ccbs_stop_alert_arg	(41);
							break;

						case NS_OP_CCBS_RQ :	/* CCBSRequest */

							Store_ns_ccbs_rq_arg			(115);
							break;

						case NS_OP_CCBS_STATUS_RQ :		/* CCBSStatusRequest */

							Store_ns_ccbs_stat_rq_arg		(NS_SS_CCBS_GLOBAL_RECALL, 15,
																18, "BC and HLC and LLC");
							break;

						case NS_OP_CCBS_REMOTE_U_FREE :	/* CCBSRemoteUserFree */

							Store_ns_ccbs_r_free_arg		(NS_SS_CCBS_GLOBAL_RECALL, 80,
															 NS_SS_PARTY_NB_DATA, 255,
															 NS_SS_PARTY_SA_USER_SPECIF, FALSE,
															 2, 4, 21,
															 "11", "aa45", "display = remote free");

							break;

						case NS_OP_CCBS_B_FREE :	/* CCBSBFree */

							Store_ns_ccbs_bfree_arg			(NS_SS_CCBS_SPECIFIC_RECALL, 62,
															 NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_NETWORK_SPFC,
															 255, 255,
															 14, 0, 5,
															 "00256987412310", P_NIL, "q 932");
							break;

						case NS_OP_CCBS_ERASE :		/* CCBSErase */

							Store_ns_ccbs_erase_arg			(NS_SS_CCBS_SPECIFIC_RECALL, 1, NS_SS_CCBS_ERASE_CALL_FAIL,
															 NS_SS_PARTY_NB_PRIVATE, NS_SS_PUB_PRIV_NB_UNKNOWN,
															 NS_SS_PARTY_SA_NSAP, 255,
															 1, 7, 8,
															 "8", "NSAP ad", "IE ie IE");
							break;

						case NS_OP_CCBS_INTERROGATE :		/* CCBSInterrogate */

							Store_ns_ccbs_interog_arg		(255, NS_SS_PARTY_NB_TELEX, 255,
															 10, "8523697415");	
							break;

						case NS_OP_CCBS_T_RQ :		/* CCBS-T-Request */

							Store_ns_ccbs_t_rq_arg_1		(TRUE, 255,
															 NS_SS_PARTY_NB_NATIONAL, 255, 255, 255,
															 NS_SS_PARTY_NB_PRIVATE, NS_SS_PUB_PRIV_NB_ABBREVIATED,
															 NS_SS_PARTY_SA_USER_SPECIF, 255);

							Store_ns_ccbs_t_rq_arg_2		(4, 0, 9, 6, 3, "5432", P_NIL,
															 "T-Request", "256347", "aBd");
							break;

#						endif	/* end of "Completion of Calls to Busy Subscriber supported"} */

#						if NS_SS_INTERACTIONS == ON		/* Supplementary service interactions{ */

#							if (NS_SS_AOC_E == ON)	&& ((NS_SS_DIVERSION == ON) || (NS_SS_ECT == ON))

							case NS_OP_INTERACT_ID_OF_CHARGE :	/* IdentificationOfCharge */

								Store_ns_id_of_charge_arg	(NS_AOCE_ASSOC_CHARG_ID, -54,
															 255, 255, 0, P_NIL);
								break;
#							endif

#						endif	/* end of Supplementary service interactions} */

				}

				break;

			case NS_SIMUL_SS_RETURN_RESULT :

				mg_ns_ss_operation ();	/* get operation ID */
				Store_ns_fac_retresult_comp	(PRESENT, 154, g_ns_ss_data[0]);

				switch (g_ns_ss_data[0]) {

					default :

						Store_ns_fac_no_op_data	();
						break;

#					if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
					case NS_OP_AOC_CHARGING_RQ :	/* Charging Request */

						Store_ns_aoc_charg_rq_currency	();
						Store_ns_aocs_currency_info	(NS_AOCS_BASIC_COMMUNICATION, NS_AOCS_FREE_OF_CHARGE,
													 0, 0, 0, 0, 0, 0, 0, 0, 0, P_NIL);
						Set_ns_next_aocs_cur_info	();
						Store_ns_aocs_currency_info	(NS_AOCS_CALL_SETUP, NS_AOCS_DURATION_CURR_INFO, 0,
													 40000L, NS_AOC_MULTIP_ONE,
													 NS_AOC_CONTINUOUS_CHARGING,
													 47, NS_AOC_SCALE_ONE_MINUTE,
													 14, NS_AOC_SCALE_ONE_HOUR,
													 0, P_NIL);
						Set_ns_last_aocs_cur_info	();
						break;
#					endif

#					if F_LOCAL_QSI == ON	/* Q-SIG specific SS{ */
#					if NS_SS_CALL_TRANSFER == ON /* Call Transfer SS supported */

						case NS_OP_QSI_TRF_IDENTIFY :	/* CallTransferIdentify */

							Store_ns_qsi_trf_ident_res	(3, "542",
														 NS_SS_PARTY_NB_NATIONAL, 255, 2, "11",
														 16, "\xa6\x0e\x06\x01\x03\x04\x09resultEXT");
							break;

						case NS_OP_QSI_TRF_INITIATE :	/* CallTransferInitiate */
						case NS_OP_QSI_TRF_SETUP :	/* CallTransferSetup */

							Store_ns_qsi_tsp_extension	(15, "\xa1\x0d\x06\x01\x40\xa3\x08\Initiate");
							break;
#					endif

#					if NS_SS_PATH_REPLACEMENT == ON	/* Path Replacement ANF supported */

						case NS_OP_QSI_PTHR_SETUP :	/* PathReplaceSetup */
						case NS_OP_QSI_PTHR_RETAIN :	/* PathReplaceRetain */

							Store_ns_qsi_tsp_extension	(19, "\xa1\x11\x06\x01\x44\x12\x0c\Path Replace");
							break;
#					endif

#					if NS_SS_CALL_OFFER == ON /* Call Offer SS supported */
						case NS_OP_QSI_CO_REQUEST :	/* CallOfferRequest */

							Store_ns_qsi_tsp_extension	(6, "\xa1\x04\x06\x02\x84\x08");
							break;
#					endif

#					if NS_SS_DO_NOT_DISTURB == ON /* Do Not Disturb SS supported */
						case NS_OP_QSI_DND_ACTIVATE :	/* doNotDisturbActivateQ */

							Store_ns_qsi_dnd_activ_no_st (0, P_NIL);
							break;

						case NS_OP_QSI_DND_INTERROGATE :	/* doNotDisturbInterrogateQ */

							Store_ns_qsi_dnd_activ_res	(5, "\xa1\x03\x06\x01\x57");
							Store_ns_qsi_dnd_status	(NS_SS_BASIC_SPEECH, 255);
							Set_ns_qsi_next_dnd_status	();
							Store_ns_qsi_dnd_status	(NS_SS_BASIC_TELEPHONY_7KHZ, NS_QSI_DND_MEDIUM_PROTECTION);
							Set_ns_qsi_last_dnd_status	();
							break;

						case NS_OP_QSI_DND_DEACTIVATE :	/* doNotDisturbDeactivateQ */
						case NS_OP_QSI_DND_OVER_EXEC :	/* doNotDisturbOvrExecuteQ */

							Store_ns_qsi_tsp_extension	(2, "\x05\x00");
							break;
#					endif

#					if NS_SS_CALL_INTRUSION == ON	/* Call intrusion SS supported */
						case NS_OP_QSI_CI_RQ :	/* callIntrusionRequest */

							Store_ns_qsi_ci_request_res	(NS_QSI_CI_UNWANT_U_ISOLATED, 6, "\xa1\x04\x06\x02\x94\x37");
							break;

						case NS_OP_QSI_CI_GET_CIPL :	/* callIntrusionGetCIPL */

							Store_ns_qsi_ci_getcipl	(NS_QSI_DND_FULL_PROTECTION, 0, P_NIL);
							break;

						case NS_OP_QSI_CI_ISOLATE :	/* callIntrusionIsolate */
						case NS_OP_QSI_CI_FORCED_REL :	/* callIntrusionForcedRelease */
						case NS_OP_QSI_CI_WOB_RQ :	/* callIntrusionWOBRequest */

							Store_ns_qsi_tsp_extension	(15, "\xa2\x0d\x30\x03\x06\x01\x89\x30\x06\x06\x01\x74\x40\x01\x18");
							break;
#					endif

#					if NS_SS_CCBS == ON		/* Call Completion SS supported */
						case NS_OP_QSI_CCBS_RQ :	/* CcbsRequest */

							Store_ns_qsi_ccbs_rq_res	(255, FALSE, 0, P_NIL);
							break;

						case NS_OP_QSI_CCNR_RQ :	/* CcnrRequest */

							Store_ns_qsi_ccbs_rq_res	(TRUE, 255, 2, "\x05\x00");
							break;

						case NS_OP_QSI_CC_PATH_RESERVE :	/* CcPathReserve */

							Store_ns_qsi_tsp_extension	(18, "\xae\x10\x06\x01\x58\x82\x0b\PathReserve");
							break;
#					endif

#					endif /* end of Q-SIG specific SS} */

#					if NS_SS_DIVERSION == ON	/* Diversion SS supported{ */

						case NS_OP_INTEROG_DIVERSION :	/* interrogation Diversion */

							Store_ns_div_int_result	(NS_SS_DIV_PROCEDURE_CFNR, NS_SS_BASIC_SPEECH,
													 NS_SS_PARTY_NB_NATIONAL, 0, 4, "4596",
													 255, 0, 0, P_NIL,
													 NS_SS_DIV_SERVED_USER_ALL_NB, 0, 0, 0, "");
							Set_ns_next_div_interog_res	();

							Store_ns_div_int_result	(NS_SS_DIV_PROCEDURE_CFB, NS_SS_BASIC_TELEPHONY_7KHZ,
													 NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_NATIONAL, 1, "9",
													 NS_SS_PARTY_SA_NSAP, 0, 5, "NSAP ",
													 NS_SS_DIV_SERVED_USER_IND_NB, NS_SS_PARTY_NB_UNKNOWN, 0, 6, "238686");
							Set_ns_last_div_interog_res	();
							break;

						case NS_OP_INTEROG_SERVED_USER_NB :	/* interrogate Served User Numbers */

							Store_ns_div_interog_s_u_nb	(NS_SS_PARTY_NB_NATIONAL, 0, 7, "4443337");
							Set_ns_next_div_interog_s_u_nb	();

							Store_ns_div_interog_s_u_nb	(NS_SS_PARTY_NB_PRIVATE, NS_SS_PRIV_NB_PTN_SPECIFIC, 4, "5555");
							Set_ns_last_div_interog_s_u_nb	();
							break;

#						if F_LOCAL_QSI == ON	/* Q-SIG specific operations{ */

						case NS_OP_QSI_ACT_DIVERSION :	/* activate Diversion Q */
						case NS_OP_QSI_DEACT_DIVERSION :	/* deactivate Diversion Q */
						case NS_OP_QSI_CHECK_RESTRICT :	/* Check Restriction */
						case NS_OP_QSI_CALL_REROUTING :	/* CallRerouting */

							Store_ns_qsi_tsp_extension	(17, "\x16\x0f\x06\x02\x43\x8a\x04\x09\EXTENSION");
							break;

						case NS_OP_QSI_INTEROG_DIVERSION :	/* interrogate Diversion Q */

							Store_ns_qsi_div_int_result	(NS_SS_PARTY_NB_NATIONAL, 255, 3, "432",
														 NS_SS_BASIC_TELEFAX_GROUP4_CL1, NS_SS_DIV_PROCEDURE_CFU,
														 NS_SS_PARTY_NB_TELEX, 255, 4, "8521",
														 255, 255, 0, P_NIL,
														 TRUE, 6, "\x30\x04\x06\x02\x43\x01");
							Set_ns_qsi_next_div_inter_res ();

							Store_ns_qsi_div_int_result	(NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_NETWORK_SPFC, 2, "16",
														 NS_SS_BASIC_TELEFAX_GROUP4_CL1, NS_SS_DIV_PROCEDURE_CFB,
														 NS_SS_PARTY_NB_DATA, 255, 7, "2386522",
														 NS_SS_PARTY_SA_USER_SPECIF, FALSE, 6, "monAdd",
														 255, 8, "\x30\x06\x06\x02\x42\x02\x05\x00");
							Set_ns_qsi_last_div_inter_res ();
							break;

#						endif	/* end of Q-SIG specific operations} */

#					endif	/* end of Diversion SS supported} */

#					if NS_SS_EXPL_CHAN_RESERVATION == ON

						case NS_OP_EXP_CH_RES_CREATE :	/* ExplicitReservationCreationControl */

							Store_ns_chan_res_create_res	(54);
							break;

#						endif

#						if NS_SS_CONFERENCE == ON	/* Conference call SS supported{ */

						case NS_OP_CONF_BEGIN :	/* begin CONF */

							Store_ns_conf_begin_res		(5,	255);
							break;

						case NS_OP_CONF_ADD :	/* add CONF */

							Store_ns_conf_add_res		(126);
							break;

#						endif	/* end of Conference call SS supported} */

#						if NS_SS_ECT == ON	/* Explicit Call Transfer supported { */

						case NS_OP_ECT_LINK_ID_RQ :	/* EctLinkIdRequest */

							Store_ns_ect_lk_id_rq_res		(74);
							break;

						case NS_OP_ECT_LOOP_TEST :	/* EctLoopTest */

							Store_ns_ect_loop_test_res		(NS_SS_ECT_LOOP_SIMULT_TRF);
							break;

#						endif	/* end of "Explicit Call Transfer supported"} */

#						if NS_SS_CCBS == ON		/* Completion of Calls to Busy Subscriber supported{ */

						case NS_OP_CCBS_RQ :	/* CCBSRequest */

							Store_ns_ccbs_rq_res			(NS_SS_CCBS_SPECIFIC_RECALL, 42);
							break;

						case NS_OP_CCBS_STATUS_RQ :		/* CCBSStatusRequest */

							Store_ns_ccbs_stat_rq_res		(TRUE);
							break;

						case NS_OP_CCBS_INTERROGATE :		/* CCBSInterrogate */

							Store_ns_ccbs_interog_detail	(NS_SS_CCBS_SPECIFIC_RECALL);
							Store_ns_ccbs_call_info			(14, NS_SS_PARTY_NB_TELEX, 255, 4,
															 255, 255, 0,
															 6,
															 255, 255, 0,
															 "5791", P_NIL, "INTERR", P_NIL);

							Set_ns_next_ccbs_call_info		();
							Store_ns_ccbs_call_info			(15, NS_SS_PARTY_NB_DATA, 255, 4,
															 NS_SS_PARTY_SA_NSAP, 255, 3,
															 8,
															 NS_SS_PARTY_SA_USER_SPECIF, TRUE, 1,
															 "5791", "lis", "RESULT :", "E");

							Set_ns_next_ccbs_call_info		();
							Store_ns_ccbs_call_info			(18, NS_SS_PARTY_NB_UNKNOWN, 255, 12,
															 NS_SS_PARTY_SA_USER_SPECIF, FALSE, 4,
															 1,
															 NS_SS_PARTY_SA_USER_SPECIF, TRUE, 3,
															 "555555999999", "25gh", "t", "a01");

							Set_ns_next_ccbs_call_info		();
							Store_ns_ccbs_call_info			(16,
															 NS_SS_PARTY_NB_PUBLIC, NS_SS_PUBLIC_NB_NATIONAL, 2,
															 255, 255, 0,
															 5,
															 NS_SS_PARTY_SA_NSAP, 255, 7,
															 "03", P_NIL, "ogate", "sousAdd");
							Set_ns_last_ccbs_call_info		();
							break;

						case NS_OP_CCBS_T_RQ :		/* CCBS-T-Request */

							Store_ns_ccbs_t_rq_res			(FALSE);
							break;
								
#						endif	/* end of "Completion of Calls to Busy Subscriber supported"} */

				}

				break;

			case NS_SIMUL_SS_RETURN_ERROR :

				Store_ns_fac_reterror_comp	(-2, SS_ERR_INVALID_CALL_STATE);
				Store_ns_fac_no_op_data		();
				break;

			case NS_SIMUL_SS_REJECT :

				Store_ns_fac_reject_comp	(PRESENT, 14, REJ_INVOKE_PB_TAG, INV_PB_DUPLICATE);
				Store_ns_fac_no_op_data		();
				break;
		}

#		if F_LOCAL_QSI == ON
		if ((Na_network == qsi) && (dse_component_nb != 255)) {	/* Q-SIG specific Facility data */

        		/* decrement number of RoseAPDUs in current DseAPDU and if it is null reset it to 255 for further process */

			dse_component_nb--;

			if (dse_component_nb == 0) {

				dse_component_nb = 255;
			}
		}
#		endif

		if (component_nb == 0) {

			Set_ns_last_component	();

		} else {

			Set_ns_to_next_component	();
		}

	}	/* end of loop on all components */
}

#endif /* end of "NS_SUPP_SERVICES = ON" */

#endif	/* SIMULATION BUILDER */

/*EOF*/
