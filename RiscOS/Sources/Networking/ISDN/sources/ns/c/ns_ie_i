
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_ie_i.c
 *
 * $Revision$
 *
 * $Date$
 *
 * data : internal data structures containing active and valid data.
 *
 * function(s)
 *
 *       is_ie_i and  reset_ie_i , set_ie_i - implements the management of
 *       the content of the internal Information Element structure.
 *
 *		 save_ie_i and roll_back_ie_i saves and rolls back the ie list context
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/
/*

Internal data structures :    set_ie_i
------------------------      is_ie_i

x_ie_i		 tab_ie_i                       i_xxxxx
	|	   ==============             =========================
	|	   |codest,ie_id|             |     i_bc[]            |
	|	   --------------             |-----------------------|
	|	   |            |             |     i_call_id[]       |
	|	   --------------             |                       |
	|	   |            |             |-----------------------|
	|	   --------------             |     i_call_state[]    |
	------>|  IE_NIL    |             |-----------------------|
		   --------------             |     i_cause[]         |
		   |            |             |                       |
		   --------------             |-----------------------|
		   |            |             |                       |
		   --------------

*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

	/* Structure of the list of valid Information Elements */

struct ie_list {
	uchar id;					/* Information Element ID */
	uchar codeset;				/* Information Element Codeset number */
	uchar nb;					/* number of valid IE element */
};

uchar							direction;									/* direction of the message */

	/*
	   List of IE for which the internal structure
	   contained active values.
	*/

static struct ie_list 			tab_ie_i[NS_MX_IE_PRIM];					/* list itself */
static uchar 					x_ie_i;										/* current IE list index */

		/* Save area */

static struct ie_list 			save_tab_ie_i[NS_MX_IE_PRIM];				/* save list  */
static uchar 					save_x_ie_i;								/* save current IE list index */
static uchar					*save_p_ind_buffer;							/* save the current indirect buffer */

	/*
	   IE internal data structure definition:
	   The structures declaration are located in the net_i_s.xxx module.
	   The internal data structures shall contained valid data. The loaded
	   structures are pointed by the tab_ie_i , x_ie_i.
	*/

uchar 							i_ie_x;										/* internal data structure current index */

ent_id_t						i_entity_origination;						/* origination entity */

uchar							protocol_discr;								/* protocol discriminator */
call_ref_t 						i_call_ref;									/* call reference */
uchar							i_call_ref_lgth;

call_ref_t 						i_call_ref_sav;									/* call reference */
uchar							i_call_ref_lgth_sav;

		/* Error management */

uchar 	nb_error;

		/* Dynamic pool buffer for text and array */

uchar 	ind_buffer[MX_IND_BUFFER_SIZE];
uchar	*p_ind_buffer;  		/* pointer to the current free position into the
								   indirect buffer */

#if MESSAGE_HEADER_IE == ON
	struct i_message_header		i_message_header;
#endif


#include "ns_ie_i.h"

		/* Local function declarations */

#if NS_SUPP_SERVICES == ON

#	if NEW_FCT_STYLE == ON
		void	ns_reset_ss_ie_i		(void);
#	else
		void	ns_reset_ss_ie_i		();
#	endif

#endif

/*=========================================================================*
					 F U N C T I O N   H E A D E R

Name            is_ie_i - tests if an IE is present or not present
						   in the IE internal list.

				nb_ie_i - return the number of stored occurences of an IE.

				reset_ie_i - reset the internal list and the current indirect
							 buffer pointer.

				set_ie_i - store an IE element into the IE internal list.

Usage           uchar 	is_ie_i (uchar codeset, uchar ie_id);

				uchar 	nb_ie_i (uchar codeset, uchar ie_id);

				void	reset_ie_i (void);

				uchar 	set_ie_i (uchar codeset, uchar ie_id);
					- codeset is the codeset of the Information Element,
					- ie_id is the ID of the Information Element as coded
					  by the CCITT 88 recommendations.

Description     set_ie_i, nb_ie_i, reset_ie_i, and is_ie_i implement the
				management of the list of Information Element (IE) used to
				described the content of the internal IE data structure.
				If the IE element is present then the corresponding data
				structure contains valid values.

Return value    is_ie_i returns PRESENT if the IE is present,
								ABSENT if the IE is absent.

				nb_ie_i returns the number of occurrences of an IE.

				set_ie_i returns the number of occurrences.

*--------------------------------------------------------------------------*/

uchar is_ie_i (codeset, ie_id)
	register uchar 	codeset;	/* IE codeset */
	register uchar 	ie_id;		/* IE ID */
{
	register uchar i;			/* temporary index */

		/* Scan the entire list and test the matching of ie_id and codeset */

	for (i = 0; tab_ie_i[i].id != IE_NIL; i++) {

		if ((ie_id == tab_ie_i[i].id) && (codeset == tab_ie_i[i].codeset)){
			return (PRESENT);	/* found ---> PRESENT */
		}

	}

	return (ABSENT);			/* not found ----> ABSENT */

}

/*-------------------------------------------------------------------------*/

uchar nb_ie_i (codeset, ie_id)
	register uchar 	codeset;	/* IE codeset */
	register uchar	ie_id;		/* IE ID */
{
	register uchar i;			/* temporary index */

		/* Scan the entire list and test the matching of ie_id and codeset */

	for (i = 0; tab_ie_i[i].id != IE_NIL; i++) {

		if ((ie_id == tab_ie_i[i].id) && (codeset == tab_ie_i[i].codeset)) {
			return (tab_ie_i[i].nb);			/* found ---> nb of occurences */
		}

	}

	return (0);									/* not found ----> no occurence */
}

/*-------------------------------------------------------------------------*/

void reset_ie_i ()
{
		/* reset the current index */

	x_ie_i = 0;

		/* Set the end of list mark */

	tab_ie_i [0].id = IE_NIL;

		/* Init the current indirect buffer pointer */

	p_ind_buffer = ind_buffer;

#	if NS_SUPP_SERVICES == ON

			/* reset the variables used for supplementary services */

		ns_reset_ss_ie_i ();

#	endif
}

/*-------------------------------------------------------------------------*/

uchar set_ie_i (codeset, ie_id)
	register uchar codeset;	/* IE codeset */
	register uchar ie_id;	/* IE ID */
{
	uchar i;				/* loop index */

		/*
		  Else search if the element is already into the list :
		   - if so increment the ocurence number.
		   - else store the element (ie_id and codeset) to the current
			 position marked by x_ie_i and increment the current position.
		*/

		/*
		   Scan the entire list and test the matching
		   of ie_id and codeset.
		*/

	for (i = 0; tab_ie_i[i].id != IE_NIL; i++) {

		if ((ie_id == tab_ie_i[i].id) && (codeset == tab_ie_i[i].codeset)){

				/* Found */

			return (++tab_ie_i[i].nb);

		}

	}

		/* Not found */

	tab_ie_i [x_ie_i].id 		= ie_id;	/* store ie_id */
	tab_ie_i [x_ie_i].codeset 	= codeset;	/* store codeset */
	tab_ie_i [x_ie_i++].nb 		= 1;		/* number of occurrence */

		/* Set the end of list mark */

	tab_ie_i [x_ie_i].id = IE_NIL;

		/* Return */

	return (1);

}

/*-------------------------------------------------------------------------*/

void save_ie_i ()
{
	Memcpy_far ((char FAR *)save_tab_ie_i, (char FAR *)tab_ie_i, sizeof (tab_ie_i));
	save_x_ie_i = x_ie_i;
	save_p_ind_buffer = p_ind_buffer;
}

/*-------------------------------------------------------------------------*/

void roll_back_ie_i ()
{
	Memcpy_far ((char FAR *)tab_ie_i, (char FAR *)save_tab_ie_i, sizeof (tab_ie_i));
	x_ie_i = save_x_ie_i;
	p_ind_buffer = save_p_ind_buffer;
}

/*-------------------------------------------------------------------------*/

uchar discard_ie_i(codeset, ie_id)
	register uchar 	codeset;	/* IE codeset */
	register uchar 	ie_id;		/* IE ID */
{
	uchar i;			/* temporary index */


	save_ie_i ();

		/* Scan the entire list and test the matching of ie_id and codeset */

	for (i = 0; save_tab_ie_i[i].id != IE_NIL; i++) {

		if ((ie_id == save_tab_ie_i[i].id) && (codeset == save_tab_ie_i[i].codeset)){
			break;
		}

	}

	if (save_tab_ie_i[i].id != IE_NIL) {

		do {

			/* IE found */

			tab_ie_i[i].id		= save_tab_ie_i[i+1].id;
			tab_ie_i[i].codeset	= save_tab_ie_i[i+1].codeset;
			tab_ie_i[i].nb		= save_tab_ie_i[i+1].nb;

		} while (save_tab_ie_i[++i].id != IE_NIL);

		x_ie_i--;

	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

static uchar diagnostic;

void set_i_cause (cause_class, value, p_diagnostic)
	uchar		 cause_class;		/* cause class */
	uchar		 value;				/* cause value */
	char FAR	*p_diagnostic;		/* diagnostics */
{

#	if F_TR6 == ON

		if (Na_network != tr6) {
			i_cause[0].coding_std 	= CODING_STD_CCITT;
			i_cause[0].cause_loc	= LOCATION_USER;
			i_cause[0].recommend	= RECOMMENDATION_Q931;

		} else {

			i_cause[0].coding_std 	= CODING_STD_NATIONAL;
			i_cause[0].cause_loc	= LOCATION_NOT_MEANINGFUL;
		}

#	else

		i_cause[0].coding_std	= CODING_STD_CCITT;
		i_cause[0].cause_loc	= LOCATION_USER;
		i_cause[0].recommend	= RECOMMENDATION_Q931;

#	endif

	i_cause[0].cause_class 		= cause_class;
	i_cause[0].cause_val 		= value;

	if (p_diagnostic != P_NIL) {

		if (C_v (cause_class, value) == C_v (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102)) {
			i_cause[0].diag_lgth	= 3;
			i_cause[0].p_diagnostic = (uchar *) p_diagnostic;

		} else {

			i_cause[0].diag_lgth	= 1;
			diagnostic				= *p_diagnostic;
			i_cause[0].p_diagnostic	= &diagnostic;
		}

	} else {

		i_cause[0].diag_lgth	= 0;
		i_cause[0].p_diagnostic	= P_NIL;
	}

	set_ie_i (CODESET_0, CAUSE);
}

/*------------------------------------------------------------------------*/

			/* Load internal structure with the current state */

void set_i_state (state)
	uchar 		state;				/* call state */
{

	direction = TO_D_CHANNEL;
	ie_implicit_val_x (CODESET_0, CALL_STATE, 0);	/* init implicit value */

#	if F_AT5 == ON

		if ((Na_network == at5) && (state == STATE_CALL_PRESENT_6)) {
			state = STATE_NULL_0;
		}

#	endif

	i_call_state[0].val = state;				/* init state value */

#	if F_TR6 == ON

		if (Na_network != tr6) {
			set_ie_i (CODESET_0, CALL_STATE);	/* add CALL STATE IE to the IE list except for TR6 */
		}

#	else

		set_ie_i (CODESET_0, CALL_STATE);		/* add CALL STATE IE to the IE list except for TR6 */

#	endif

}

#if (NS_SUPP_SERVICES == ON) && (F_ETS == ON)

/*=========================================================================*
					 F U N C T I O N   H E A D E R

Name            ns_ss_extended_fac_to_fac - implements the change of received
				Extended Facility IE into Facility IE.

Usage           void	ns_ss_extended_fac_to_fac (void);

Description     ns_ss_extended_fac_to_fac searches if an Extended Facility IE
				is stored into internal array (decoded from received SPDU) and
				replaces it into Facility IE containing same data (content and
				usage of both IEs are identical). It enables to implement only
                1 IE at NS interface (Facility).

Return value    None

*--------------------------------------------------------------------------*/

void ns_ss_extended_fac_to_fac ()
{
	uchar	extended_fac_nb;		/* number of Extended Facility IE instances stored */
	uchar	fac_nb;					/* number of Facility IE instances stored */
	uchar	i;						/* loop index */

	extended_fac_nb = nb_ie_i (CODESET_0, EXTENDED_FAC);

	if (extended_fac_nb != 0) {	/* nothing to do if no Extended Facility IE has been stored */

			/* search if Facility IE has been stored */

		for (i = 0; tab_ie_i[i].id != IE_NIL; i++) {

			if ((tab_ie_i[i].id == FACILITY) && (tab_ie_i[i].codeset == CODESET_0)){

					/* Found */

				fac_nb = tab_ie_i [i].nb;	/* init number of Facility instances */
				break;
			}
		}

		if (tab_ie_i[i].id == IE_NIL) {

				/* Not found */

			tab_ie_i [x_ie_i].id 		= FACILITY;		/* store ie_id */
			tab_ie_i [x_ie_i++].codeset = CODESET_0;	/* store codeset */
			fac_nb 						= 0;			/* init number of Facility instances */

				/* Set the end of list mark */

			tab_ie_i [x_ie_i].id = IE_NIL;
		}

			/* check total number of instances for Facility + Extended facility IEs
				it must not exceed maximum number allowed for Facility */

		if ((fac_nb + extended_fac_nb) > MX_FACILITY) {

			extended_fac_nb = (MX_FACILITY - fac_nb);

			if (extended_fac_nb == 0) {

				return;
			}
		}

		tab_ie_i [i].nb = fac_nb + extended_fac_nb;	/* update total number of instances for Facility IE */

		for (i = 0; i < extended_fac_nb; i++) {

				/*	copy internal data used for SUPPLEMENTARY SERVICES from
					Extended Facility to Facility internal structures */

			i_facility [fac_nb + i].component_nb = i_extended_fac [i].component_nb;
			i_facility [fac_nb + i].first_comp_index = i_extended_fac [i].first_comp_index;
		}
	}
}

#endif /* end of NS_SUPP_SERVICES = ON and F_ETS == ON */

/*EOF*/
