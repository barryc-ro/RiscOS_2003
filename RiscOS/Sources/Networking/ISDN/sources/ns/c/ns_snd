
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_send.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        ns_snd_dl - implements the sending of a message from the NS entity
 *						to the DL_D entity.
 *
 *		  ns_snd_cc - implements the sending of a message from the NS entity
 *					  to the Call Control entity.
 *
 *		  ns_snd_da - implements the sending of a SPDU to the network side
 *
 *		  send_err_to_user - implements the sending of a reject message
 *					  to the User (Call Control) entity.
 *
 *		  send_state - implements the sending of the current state to the
 *					   network side into a spdu status.
 *
 *		  send_release - implements the sending of a release
 *						 message.
 *
 *        ns_retransmit - implements the sending back of a received message.
 *
 *        ns_segmenter_process - implement the message segmentation
 *		  process.
 *
 *        ns_snd_hold_ret_abort_user - implements the sending of an
 *        ABORT indication primitive to NS upper entity
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "ctx_ext.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ns_snd_dl, ns_snd_cc, ns_snd_da - implement the creation
				and	the sending	of a message from the NS entity respectively
				to the DL entity, CC entity (call control) and to the
				remote signalling entity thru the D channel.

Usage           void ns_snd_dl	(uchar dl_code, uchar ces);
						- dl_code : DL primitive code,
						- ces     : Connection Endpoint Suffix (broadcast or
									signalling).

				void ns_snd_cc (uchar ns_code);
						- ns_code : NS primitive code.

				void ns_snd_da	(da_spdu_id, flag, protocol);
						- da_spdu_id : SPDU event code,
						- flag : OFF, USED_SAVED_SPDU, SAVE_SPDU.
						- protocol: protocol discriminator value to be used;
						  0 means "use operator default"

Related
functions usage void send message (struct message *p_msg);
				struct message *Alloc_msg ();

Description     These functions implements the creation of the SPDU or SSDU
				buffer if needed, the allocation and initialization of the
				message header and the sending of the message.

Return value    void

Common constants and declarations : ns.h

Common objects	: current message context

*--------------------------------------------------------------------------*/

			/* Send from NS ----> DL (D channel) */

void ns_snd_dl (dl_code, ces)
	uchar					 dl_code;		/* Data Link primitive */
	ces_t					 ces;			/* CES */
{
#	if NS_SEGMENTATION == ON
		struct  buffer	FAR *p_buffer_save; /* used to save the buffer pointer */
		struct  message FAR *p_msg;			/* first message pointer */
#	endif

		/* Search for a DL context */

	if (Ns_access_dl_ces (ces) == NOK) {
		Trap (TRAP_NO_CES, "ns_snd_dl");
	}

		/* DL inactivity timer management : DL active */

	ns_dl_timer_activity ();

		/* Allocate a message if not already done */

	if (p_snd_msg == P_NIL) {
		p_snd_msg 	= Alloc_msg ();			/* allocate a message */
	}

		/* Init the message header with the address information */

	S_msg_from 		= ENT_NS;				/* from NS entity */
	S_msg_to 		= ENT_DL_D;				/* to Data Link LAPD entity */
	S_msg_nai 		= Na_dl_nai;			/* DL NA ID */
	S_msg_sapi 		= DL_SAPI_SIG;			/* SAP ID Signalling */
	S_msg_ces 		= ces;					/* CES */

		/* Load the primitive code */

	S_msg_code 		= dl_code;				/* primitive code */

		/* Acknowledged Information transfer ? */

	if (dl_code == DL_DA_RQ) {

			/*
			   Send the data message to the D channel : if the Data link
			   is not established postpone the message sending
			   and first establish the Data Link.
			*/

			/* Switch according to the Link Connection (LC) state */

		switch (Lc_state) {

			case LC_AWAITING_EST :
			case LC_AWAITING_REL :
			case LC_RELEASED :

					/*
					   Postpone the sending of the DL_DA_RQ (SPDU) until
					   the Link Connection is established;
					*/

				ns_in_queue_dl (); p_buffer = P_NIL;

					/* If the Link Connection is released try to establish it */

				if (Lc_state == LC_RELEASED) {
					ns_snd_dl (DL_EST_RQ, ces);
					Lc_state = LC_AWAITING_EST;
				}

				break;

				/* The Link Connection is already established, send the message */

			case LC_ESTABLISHED :

#				if NS_SEGMENTATION == ON

					if ((p_buffer = S_msg_p_buffer) != P_NIL) {

						if (Buffer_p_next != P_NIL) {

							p_msg = p_snd_msg;

							while (p_buffer != P_NIL) {
								p_snd_msg		= Alloc_msg ();
								Memcpy_far ((char FAR *)p_snd_msg, (char FAR *)p_msg, (int)MESSAGE_HEADER_SIZE);
								S_msg_p_buffer 	= p_buffer;
								p_buffer_save	= Buffer_p_next;
								Buffer_p_next	= P_NIL;

									/* Send the DATA SPDU only if no STATUS is to be sent */

								if (Ns_status_to_send == OFF) {

									Send_message (p_snd_msg);

								} else {

										/* if a STATUS is to be sent, put current message into internal NS fifo */

									Fifo_put_msg (&(Ns_status_p_first_msg), &(Ns_status_p_last_msg), p_snd_msg);
								}

								p_buffer		= p_buffer_save;
							}

							Free_msg (p_msg);

						} else {

							if ((spdu_id == SETUP) 	&& (Na_type == BRI)	&&
								(Na_connection_pmp) &&
								(Dl_ei_state == EI_STATE_AWAIT_INIT) &&
								(*Dl_a_spid != SPID_NIL)) {

								ns_in_queue_dl (); p_buffer = P_NIL;

							} else {

									/* Send the DATA SPDU only if no STATUS is to be sent */

								if (Ns_status_to_send == OFF) {

									Send_message (p_snd_msg);

								} else {

										/* if a STATUS is to be sent, put current message into internal NS fifo */

									Fifo_put_msg (&(Ns_status_p_first_msg), &(Ns_status_p_last_msg), p_snd_msg);
								}
							}

						}

					} else {

						if ((spdu_id == SETUP) 	&& (Na_type == BRI)	&&
							(Na_connection_pmp) &&
							(Dl_ei_state == EI_STATE_AWAIT_INIT) &&
							(*Dl_a_spid != SPID_NIL)) {

							ns_in_queue_dl (); p_buffer = P_NIL;

						} else {

								/* Send the DATA SPDU only if no STATUS is to be sent */

							if (Ns_status_to_send == OFF) {

								Send_message (p_snd_msg);

							} else {

									/* if a STATUS is to be sent, put current message into internal NS fifo */

								Fifo_put_msg (&(Ns_status_p_first_msg), &(Ns_status_p_last_msg), p_snd_msg);
							}
						}
					}

#				else

					if ((spdu_id == SETUP) 	&& (Na_type == BRI)	&&
						(Na_connection_pmp) &&
						(Dl_ei_state == EI_STATE_AWAIT_INIT) &&
						(*Dl_a_spid != SPID_NIL)) {

						ns_in_queue_dl (); p_buffer = P_NIL;

					} else {

							/* Send the DATA SPDU only if no STATUS is to be sent */

						if (Ns_status_to_send == OFF) {

							Send_message (p_snd_msg);

						} else {

								/* if a STATUS is to be sent, put current message into internal NS fifo */

							Fifo_put_msg (&(Ns_status_p_first_msg), &(Ns_status_p_last_msg), p_snd_msg);
						}
					}

#				endif

				break;

		}

	} else {

				/* Unacknowledged transfer or Control only */

			/* Send the DATA SPDU only if no STATUS is to be sent */

		if ((Ns_status_to_send == OFF) || (dl_code != DL_U_DA_RQ)) {

			Send_message (p_snd_msg);

		} else {

				/* if a STATUS is to be sent, put current message into internal NS fifo */

			Fifo_put_msg (&(Ns_status_p_first_msg), &(Ns_status_p_last_msg), p_snd_msg);
		}
	}

		/* Reset the current message and buffer pointers */

	p_snd_msg = P_NIL; p_buffer = P_NIL;

}

/*-------------------------------------------------------------------------*/

				/* Send from NS ---> Layer 4 Signaling (call processing) */

void ns_snd_cc (ns_code)
	uchar 	ns_code;	/* Network Signaling primitive code */
{

		/*
		   Create the Signaling Service Data Unit from the valid internal
		   Information Element (IE) structures.
		*/

		/* Allocate a buffer or reused the incoming one */

	Buffer_alloc_reused;

		/* Init SSDU pointer */

	p_ssdu		= Buffer_a_start_data;
	p_ssdu_end	= p_ssdu + Buffer_data_lgth;

		/* Load the SSDU data */

	if (s_ssdu (ns_code, &Buffer_data_size) != OK) {
		Trap (TRAP_SSDU, "ns_snd_cc");
	}

		/*
		   Allocate a message.
		   Transfer data information into the message if possible
		   and release the buffer.
		   If not possible link the buffer to the message to be sent.
		   In any case, add a hole at the beginning of the message data
		   area if the SSDU is NS_CONN_IN, so that ENT_CC can put the NS
		   upper entity in the hole in case the NS_CONN_IN would be
		   redirected to another entity.
		*/

#	if NS_IE_TSP_IN == OFF

#		if NS_MAINTENANCE_CAPABILITY == ON
			p_snd_msg = Msg_or_buffer (p_buffer, Max (Rnd_sizeof (ent_id_t), Rnd_sizeof (S_msg_cc_int_id)));
#		else
			p_snd_msg = Msg_or_buffer (p_buffer, (ns_code == NS_CONN_IN) ? Rnd_sizeof (ent_id_t) : 0);
#		endif

#	else

			/* Allocate a send message and put data in a buffer */

		p_snd_msg = Alloc_msg ();

			/* Link the buffer to the message to send */

		S_msg_init_link_buffer;

#	endif

		/* Init the message header */

	S_msg_from 		= ENT_NS;			/* from NS entity */
	S_msg_to 		= Call_current_exist ? Call_upper_ent : ENT_CC;
										/* to Call Control entity */
	S_msg_sapi 		= NS_SAPI_SIG;		/* SAP ID for NS */
	S_msg_conn_id 	= (	Is_call_ref_nil	? CONN_ID_MANAGEMENT : Call_conn_id);   	/* connect ID */
	S_msg_code 		= ns_code;			/* primitive code */

#	if NS_MAINTENANCE_CAPABILITY == ON

			/*
			 * Specify the destination interface.
			 * This information is usefull for applications
			 * using the TSP mode.
			 */

		S_msg_cc_int_id = ns_cc_int_id;

			/*
			 * With TSP mode, always access the same Nai :
			 * the one designated at configuration time.
			 */

		if ((ns_nfas == ON) && (Nfas_nai_mode == NFAS_TSP)) {
			S_msg_nai = Nfas_cfg_nai_active_d_chan;

		} else {

			S_msg_nai = Nai;			/* NA ID */

		}

#	else
		S_msg_nai = Nai;				/* NA ID */
#	endif

#	if NS_IE_TSP_IN == ON

			/*
			 * Chain q931 buffer.
			 */

		Buffer_p_next 	 = p_buffer_q931;

#	endif

		/* Send the message to the Layer 4 signalling entity (call processing) */

	Send_message (p_snd_msg), p_snd_msg = P_NIL, p_buffer  = P_NIL;

#	if NS_IE_TSP_IN == ON

			/*
             * Reset p_buffer_q931 because it has been freed
             * in the Send_message () macro.
             */

		p_buffer_q931 = P_NIL;

#	endif

}

/*-------------------------------------------------------------------------*/

#if NS_SEGMENTATION == ON

		/* Internal SPDU used if segmentation */

	static	uchar ns_spdu_internal_buffer [MX_SPDU_LGTH];

#endif

			/* Send a data information from NS ---> DL */

void ns_snd_da (spdu_id, flag, protocol)
	uchar					 spdu_id;			/* Signalling Protocol Data Unit ID (message type) */
	uchar   				 flag;				/* action flag : OFF, USE_SAVED_SPDU, SAVE_SPDU, DO_NOT_SEND */
	uchar					 protocol;			/* protocol discriminator value to be used; 0 means "use operator default" */
{
	ushort					 data_size;			/* buffer data and header size */
	ushort				FAR *p_data_size;		/* data size pointer */

#	if NS_SEGMENTATION == ON
		struct buffer	FAR	*p_buffer_in;		/* input buffer pointer */
		struct buffer	FAR	*p_buffer_first;	/* first buffer pointer */
		struct buffer	FAR	*p_buffer_previous;	/* previous buffer pointer */
#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		struct nsna FAR *p_nsna_sav;
		struct nsdl FAR *p_nsdl_sav;
#	endif

		/* Load 'protocol_disc' global variable according to the parameter */

	protocol_discr = (protocol == 0) ? Spdu_param_net_protocol_discriminator : protocol;

		/* Use a saved SPDU ? */

	if (flag == USE_SAVED_SPDU) {

		if ((p_buffer = Call_save_spdu) == P_NIL) {
			Trap (TRAP_NO_SAVED_SPDU, "ns_snd_da");
		}

		Call_save_spdu	= P_NIL;			/* for further test */

	} else {

		/* ------------------ Build the SPDU message ---------------------- */

			/*
			   Created the Signalling Protocol Data Unit SPDU from
			   the internal (valid) Information Element (IE)
			   data strutures.
			*/

#		if NS_SEGMENTATION == ON

				/* Used an internal buffer to store the SPDU */

			p_spdu 		= &ns_spdu_internal_buffer [0];
			p_data_size = &data_size;

#		else

				/* Allocate a buffer */

			Buffer_alloc_reused;

				/* Initialize the buffer header */

			Buffer_data_offset	+= DL_MX_FRAME_HEADER;

				/* Set the SPDU pointer */

			p_spdu = Buffer_a_start_data;

			p_data_size = &Buffer_data_size;

#		endif

			/* Load the SPDU data */

		if (s_spdu (spdu_id, p_data_size) != OK) {
			Trap (TRAP_SPDU, "ns_snd_da");
		}

#		if NS_SEGMENTATION == ON

			if (data_size > N201) {

					/* Build a thread of buffers, each containing a segment */

				if (ns_segmenter_process ((uchar FAR *)p_spdu, data_size) == NOK) {

						/* Errored segmenter process --> do nothing */

					return;
				}

			} else {

					/* Allocate a buffer */

				Buffer_alloc_reused;

					/* Initialize the buffer header */

				Buffer_data_offset	+= DL_MX_FRAME_HEADER;
				Buffer_data_size	 = data_size;

					/* copy the SPDU in the buffer */

				Memcpy_far ((char FAR *)Buffer_a_start_data, (char FAR *)p_spdu, (int)data_size);
			}

#		endif

	}

			/* Save the SPDU ? */

	if ((flag == SAVE_SPDU) || (flag == USE_SAVED_SPDU) || (flag == DO_NOT_SEND)) {

			/* Already saved ? */

		if (Call_save_spdu != P_NIL) {
			Trap (TRAP_ALREADY_SAVED_SPDU, "ns_snd_da");
		}

			/* Save the current buffer */

		Call_save_spdu 	= p_buffer;
		data_size		= Buffer_save_size;

#		if NS_SEGMENTATION == ON

			if (Buffer_p_next == P_NIL) {

					/* Allocate a new buffer */

				Buffer_alloc;

					/* Copy the saved buffer in the current buffer */

				Memcpy_far ((char FAR *)p_buffer, (char FAR *)Call_save_spdu, data_size);

			} else {

				p_buffer_previous = P_NIL;

				for (p_buffer_in = p_buffer; p_buffer != P_NIL; p_buffer_in = p_buffer_in -> p_next) {

						/* Allocate a new buffer */

					Buffer_alloc;

						/* Copy the saved buffer in the current buffer */

					Memcpy_far ((char FAR *)p_buffer, (char FAR *)p_buffer_in, (p_buffer_in -> data_size) + (p_buffer_in -> data_offset));

					if ((Buffer_p_next = p_buffer_previous) == P_NIL) {
						p_buffer_first = p_buffer;
					}

					p_buffer_previous = p_buffer;

				}

				p_buffer = p_buffer_first;
			}

#		else

				/* If the message is not to be sent, return */

			if (flag == DO_NOT_SEND) return;

				/* Allocate a new buffer */

			Buffer_alloc;

				/* Copy the saved buffer in the current buffer */

			Memcpy_far ((char FAR *)p_buffer, (char FAR *)Call_save_spdu, data_size);

#		endif

	}


		/*
		   Allocate a message.
		   Transfer data information into the message if possible
		   and release the buffer;
		   If not possible link the buffer to the message.
		*/

	p_snd_msg = Msg_or_buffer (p_buffer, DL_MX_FRAME_HEADER);

	p_buffer  = S_msg_p_buffer;

		/* Send the SPDU message (and buffer) */

#	if NS_MAINTENANCE_CAPABILITY == ON

		if (ns_nfas == ON) {

			p_nsna_sav 	= p_nsna;
			p_nsdl_sav	= p_nsdl;

				/*
				 * Select the right D channel.
				 * All maintenance messages might be sent on
				 * either the Active D channel or on the Backup D channel.
				 * For these messages, the Na access is reliable at
				 * this point, so do nothing.
				 * For the other messages, they must be sent on the
				 * Active D channel only.
				 */

			if ((protocol_discr == PROTOCOL_DISCR_MAINT_ATT_CUST) ||
				(protocol_discr == PROTOCOL_DISCR_MAINT_NATIONAL)) {

					/*
					 * We have a maintenance message.
					 * Do nothing.
					 */
			} else {

					/*
					 * We don't have a maintenance message.
					 * Select the Active D channel.
					 */

				Ns_access_d_chan_ctx (Na_d_channel_ctx);
				p_nsna = Nfas_nai_p_active_d_chan;
				p_nsdl = Nfas_dl_p_active_d_chan;

			}
		}

#	endif

#	if EQUIPMENT == TE
		ns_snd_dl (DL_DA_RQ, Na_dl_ces);
#	else

			/*
             * For A BRI Point to Mutipoint network side configuration,
             * the primitives that need to be sent in a DL_U_DA_RQ are :
             *	- SETUP
             *	- NOTIFY when the Call reference Dummy is used,
             *	- FACILITY when the Call reference Dummy is used.
             */

		if (    (Na_fct == FG_NT_TE) && (Na_type == BRI) && (Na_connection_pmp) &&
				(	(spdu_id == SETUP) ||
	           		((Is_call_ref_nil) && ((spdu_id == NOTIFY) || (spdu_id == FAC)))
                )
        	) {

				ns_snd_dl (DL_U_DA_RQ, DL_CES_BROADCAST);

		} else {

			if (Dl_ces == DL_CES_BROADCAST) {
				ns_snd_dl (DL_DA_RQ, Na_dl_ces);

			} else {

				ns_snd_dl (DL_DA_RQ, Dl_ces);
			}
		}

#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON

		if (ns_nfas == ON) {

				/* Retrieve the previous Na/Dl contexts */

			p_nsna	= p_nsna_sav;
			p_nsdl	= p_nsdl_sav;
		}

#	endif
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            send_err_to_user, send_state - implement the creation and
				the sending	of a message from the NS entity to the User
				entity (Call Control) and to Network side (thru the DL entity).

Usage           void send_err_to_user (uchar error_code, uchar diagnostic_1,
									  uchar diagnostic_2, ent_id_t user_entity);
					- error_code   : error code,
					- diagnostic_1 : IE or SSDU ID,
					- diagnostic_2 : relative position of the error,
					- user_entity : upper entity ID.

				void send_state (uchar da_spdu_id);
					- da_spdu_id : event code of the SPDU.

Related
functions usage void send message (struct message *p_msg);
				struct message *Alloc_msg ();
				void send_network (uchar da_code);

Description     These functions implements the creation of the spdu or ssdu
				buffer if needed, the allocation and initialization of the
				message header and the sending of the message.

Return value    void

Common constants and declarations : ns.h

Common objects	: current message context

*--------------------------------------------------------------------------*/

				/* Send reject primitive from NS to Call Control entity */

void send_err_to_user (err_code, diagnostic_1, diagnostic_2, user_entity)
	uchar 		err_code;			/* error code */
	uchar 		diagnostic_1;		/* IE ID */
	uchar 		diagnostic_2;		/* position of the error inside the SSDU */
	ent_id_t	user_entity;		/* upper entity ID */
{

		/* Allocate a send message */

	S_msg_alloc;

		/* Init the message header from the received message */

	S_msg_nai 		= R_msg_nai;		/* NA ID */
	S_msg_sapi 		= R_msg_sapi;		/* SAP ID */
	S_msg_conn_id 	= R_msg_conn_id;	/* CONNECT ID */

		/* Entity ID */

	S_msg_to 		= user_entity;		/* to User entity */
	S_msg_from 		= ENT_NS;			/* from NS entity */

		/* Error code and diagnostic */

	S_msg_inf0 		= err_code;			/* error code */
	S_msg_inf1 		= diagnostic_1;		/* IE ID or SSDU ID */
	S_msg_inf2 		= diagnostic_2;		/* position of the erroneous value */

	S_msg_code 		= NS_ERR_IN;		/* primitive REJECT code */

	S_msg_data_size	= INF_SIZE;			/* data size */

		/* Send the message to Layer 4 Signalling */

	Send_message (p_snd_msg), p_snd_msg	= P_NIL;

}

/*-------------------------------------------------------------------------*/

			/* Send a STATUS spdu (message) to the Network side */

void send_state (cause_class, val, diagnostic)
	uchar 	cause_class;			/* cause class */
	uchar 	val;					/* cause value */
	uchar 	diagnostic;				/* diagnostic */
{
	struct i_cause	save_i_cause;  	/* used to save internal structure i_cause[0] */
	uchar           save_spdu_id;	/* save spdu_id */

	switch (spdu_id) {

				/* No status on the following message type if in sequence */

		case STATUS   	:
		case TR6_STATUS	:	/* $Considerer le FAC_STATUS */
		case REL_COMP 	:
		case SUSP_ACK 	:
		case RES_REJ  	:
		case REG_ACK  	:
		case FT_REG_REJ	:
		case TR6_REG_REJ:

			if (Net_param_send_state_cause_filter == ON) {

				if ( ! ( (cause_class == C_C_PROTOCOL_ERROR) &&
						 (val == C_V_MESSAGE_STATE_INCONSISTENCY_98)
					   )
				   ) {
					break;
				}

			}

		default :

				/*
				 * The Australian variant needs the STATUS to be sent
				 * right away!!!
				 */

			if (
#				if F_AU1 == ON
					(Na_network != au1) &&
#				endif
				(Ns_spdu_processed == OFF)) {

					/*	Send STATUS message only after received SPDU is processed
						to have the right call state. Set flag indicating that a
						STATUS is to be sent and save cause parameters. */

				Ns_status_to_send = ON;
				Ns_status_cause_class = cause_class;
				Ns_status_cause_val = val;
				Ns_status_cause_diag = diagnostic;
				nb_status_sent++;
				return;
			}

				/* reset status flag so that the STATUS is sent (ns_snd_dl () tests it) */

			Ns_status_to_send = OFF;

				/* Save the modified values */

			Memcpy_far ((char FAR *)&save_i_cause, (char FAR *)&i_cause[0],	sizeof (struct i_cause));
			save_ie_i ();				/* save the internal IE list context */
			save_spdu_id = spdu_id;		/* save spdu id */

				/* Init the internal IE data and the direction flag */

			Reset_internal_ie ();

				/* Store the ie values into the internal structure */

					/* Class and value into a cause IE */

			if (diagnostic != DIAGNOSTIC_NIL) {
				set_i_cause (cause_class, val, (char FAR *) &diagnostic);

			} else {

				set_i_cause (cause_class, val, P_NIL);
			}

				/* State of the call into a call state IE */

			if (! Call_current_exist) {

				if ((Spdu_param_restart_procedure == ON) &&
					((spdu_id == RESTART) || (spdu_id == RESTART_ACK)))
				{
					/* for restart procedures, Call State IE value
						is the global interface state (REST_0/1/2) */

#					if F_AT4 == ON

						if (Na_network == at4) {
							set_i_state (STATE_NULL_0);

						} else {

							set_i_state (Dl_rest_state);
						}

#					else
						set_i_state (Dl_rest_state);
#					endif

				} else if ((spdu_id == SETUP) &&
						   (ns_fatal_error_flag == OFF)
#						 if F_AT4 == ON
						   && (Na_network != at4)
#						 endif
						  ) {

					set_i_state (STATE_CALL_PRESENT_6);

				} else {

					set_i_state (STATE_NULL_0);
				}

			} else {

				set_i_state (Call_state);
			}

					/* Send the SPDU STATUS to the network side */

#			if F_TR6 == ON

				if (Na_network == tr6) {
					Send_to_d_channel (TR6_STATUS);

				} else {

					Send_to_d_channel (STATUS);
				}

#			else
				Send_to_d_channel (STATUS);
#			endif

					/* Increment the amount of STATUS messages sent to the line */

			nb_status_sent++;

					/* Roll back the entry context */

			roll_back_ie_i ();			/* reload the internal IE list context */
			Memcpy_far ((char FAR *)&i_cause[0], (char FAR *)&save_i_cause, sizeof (struct i_cause));
			spdu_id = save_spdu_id;		/* reload spdu id */

		}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            send_release - implements the sending of a RELease
				or a RELease COMPlete message in exception conditions
				(with a cause Information Element).

Usage           void send_release (uchar rel, uchar cause_class, uchar val, diagnostic);
									- rel			= REL or REL_COMP,
									- cause_class 	= cause class,
									- val  			= cause value,
									- diagnostic 	= diagnostic

*--------------------------------------------------------------------------*/

void send_release (rel, cause_class, val, diagnostic)
	uchar	rel;			/* REL or REL_COMP */
	uchar 	cause_class;	/* cause class */
	uchar 	val;			/* cause value */
	uchar 	diagnostic; 	/* cause diagnostic */
{

#	if ASSERT == ON

			/* only REL or REL_COMP are allowed */

		if (rel != REL && rel != REL_COMP) {
			Trap (TRAP_NS_ERROR, "send_release");
		}

#	endif

		/* Init the internal IE data and the direction flag */

	Reset_internal_ie ();

			/* Store the ie value into the internal structure */

			/* Class and value into a cause IE */

	if (diagnostic != DIAGNOSTIC_NIL) {
		set_i_cause (cause_class, val, (char FAR *) &diagnostic);

	} else {

		set_i_cause (cause_class, val, P_NIL);
	}


			/*
			   Send a clearing message to the user side (Call Control
			   entity) and free the current call context.
			*/


	if (rel == REL_COMP) {

		Send_to_d_channel (rel);

		if (Call_current_exist) {

#			if EQUIPMENT == TE
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
#			else

				if (Dl_current_exist) {

					if ((Na_fct == FG_NT_NET)	||
						(Na_connection_pmp) 	||
						(Call_ces_connect == Dl_ces)
					) {

						Send_to_call_control (NS_CLEAR_CO);
						call_clear ();
					}
				}

#			endif

		}
	}

	if ((!Call_current_exist) && (rel == REL)) {

		/* Should never happen */

		Send_to_d_channel (rel);
	}

	if ((Call_current_exist) && (rel == REL)) {
		ns_stop_all_timers ();

		if (Call_save_spdu != P_NIL) {
			Release_saved_spdu ();
		}

		Send_to_d_channel_and_save_spdu (rel);
		Send_to_call_control (NS_CLEAR_IN);
		N308 = 0;
		Set_state (STATE_RELEASE_REQUEST_19);
		Start_timer_ns (T308);
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ns_retransmit - implements the sending back of a received
				message.

Usage           void ns_retransmit (code_t code, ent_id_t to);
							- code	= primitive code,
							- to 	= destination entity ID.

*--------------------------------------------------------------------------*/

void ns_retransmit (code, to)
	code_t		code;	/* primitive code */
	ent_id_t    to;		/* destination entity */
{

		/* Change the message header */

	R_msg_from 	= ENT_NS;					/* from Network Signalling entity */
	R_msg_to 	= to;						/* destination entity */

	R_msg_code 	= code;						/* primitive code */

		/* Send back the message */

	Send_message (p_rcv_msg); p_rcv_msg = P_NIL; p_buffer = P_NIL;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ns_snd_mns - implement the creation and
				the sending	of a message from the NS entity to the MNS
				entity (Management NS).

Usage           void ns_snd_mns (uchar prim_code);
					- code       : primitive code.

Related
functions usage void send message (struct message *p_msg);
				struct message *Alloc_msg ();

Description     These functions implements the allocation and initialization
				of the message header and the sending of the message.

Return value    void

Common constants and declarations : ns.h

Common objects	: current message context

*--------------------------------------------------------------------------*/

void ns_snd_mns (code)
	uchar 	code;			/* primitive code */
{

	if (p_snd_msg == P_NIL) {

			/* Allocate a message */

		S_msg_alloc;
	}

		/* Init the message header */

	S_msg_code 		= code;				/* primitive code */

#	if NS_MAINTENANCE_CAPABILITY == ON
			/*
			 * With TSP mode, always access the same Nai :
			 * the one designated at configuration time.
			 */

		if ((ns_nfas == ON) && (Nfas_nai_mode == NFAS_TSP)) {
			S_msg_nai = Nfas_cfg_nai_active_d_chan;

		} else {

			S_msg_nai = Nai;			/* NA ID */
		}

#	else
		S_msg_nai = Nai;				/* NA ID */
#	endif

	S_msg_sapi 		= NS_SAPI_SIG;		/* SAP ID */

	if (p_call != P_NIL) {
		S_msg_add	= Call_conn_id;		/* CONNECT ID */

	} else {

		if (p_nsdl != P_NIL) {
			S_msg_add	= Dl_ces;		/* DL CES */

		} else {

			S_msg_add	= ADD_NIL;		/* NIL */
		}

	}

		/* Entity ID */

	S_msg_from 		= ENT_NS;			/* from NS entity */
	S_msg_to 		= ENT_MNS;			/* to MNS entity */

		/* Send the message to Management Network Signalling */

	Send_message (p_snd_msg), p_snd_msg	= P_NIL;

}

/*-------------------------------------------------------------------------*/

#if NS_HOLD_RETRIEVE == ON /* { */

				/* send ABORT indication to NS upper entity */

void ns_snd_hold_ret_abort_user (cause)
	uchar	cause;				/* cause of ABORT */
{

			/* Allocate a message */

	if (p_snd_msg == P_NIL) {

		p_snd_msg = Alloc_msg ();
	}

		/* Init the message header */

	S_msg_from 		= ENT_NS;			/* from NS entity */
	S_msg_to 		= Call_current_exist ? Call_upper_ent : ENT_CC;
										/* to Call Control entity */
	S_msg_nai 		= Nai;				/* NA ID */
	S_msg_sapi 		= NS_SAPI_SIG;		/* SAP ID for NS */
	S_msg_conn_id 	= (	Is_call_ref_nil	? CONN_ID_MANAGEMENT : Call_conn_id);   	/* connect ID */
	S_msg_code 		= NS_ABORT_IN;			/* primitive code : ABORT INDICATION */

	S_msg_inf0 		= cause;			/* cause of ABORT */

	S_msg_data_size	= INF_SIZE;			/* data size */

		/* Send the message to the Layer 4 signalling entity (call processing) */

	Send_message (p_snd_msg), p_snd_msg = P_NIL;

}

#endif /* end of NS_HOLD_RETRIEVE == ON} */

#if NS_SEGMENTATION == ON
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ns_segmenter_process - implement the message segmentation
				process.

Usage           void ns_segmenter_process (p_data, data_size);

Related
functions usage

Description

Return value    void

Common constants and declarations : ns.h

Common objects	: current message context

*--------------------------------------------------------------------------*/

#ifndef NS_MX_IE_SEGMENTATION
#	define NS_MX_IE_SEGMENTATION		50
#endif

static	uchar FAR *ns_ie_tab [NS_MX_IE_SEGMENTATION + 1];		/* table containing pointer to each IE of the SPDU */

uchar ns_segmenter_process (p_in, in_size)
	uchar 			FAR *p_in;     	 	    	/* SPDU pointer */
	ushort		 		 in_size;				/* SPDU size */
{
	ushort		 		 i, j;           		/* index */
	uchar 			FAR	*p_ie;                  /* IE current pointer */
	uchar 			FAR	*p_ie_end;				/* IE end pointer */
	uchar			FAR *p_out;					/* output buffer pointer */
	uchar			FAR *p_out_end;				/* end of output buffer */
	struct buffer	FAR	*p_buffer_first;		/* first buffer pointer */
	struct buffer	FAR	*p_buffer_previous;		/* previous buffer pointer */
	uchar				 header_size;			/* SPDU header size */
	uchar				 segment_nb;			/* segment number */
	ushort				 ie_size;				/* current IE size */

		/* 0 - Initialization */

		/*  	IE pointers initialization */

	p_ie  		= p_in + 1;
	p_ie_end 	= p_in + in_size;

	p_ie 	   += R_call_ref_lgth + 1;

		/*
				Save the message type (SPDU ID)
				and load a SEGMENT message type
				in the message header.
		*/

	spdu_id		= *p_ie;
	*p_ie++		= SEGMENT;

	header_size = (uchar)(p_ie - p_in);

		/* 1 - Build the IE pointers table */

	for (i = 0; p_ie < p_ie_end; i++) {

			/* Load the current IE */

		ns_ie_tab [i] = p_ie;

			/* Next IE */

			/* Single Octet (SO) format ? */

		if (So_ie_flag == IE_FORMAT_SO) {

				/* Yes */

			p_ie++;

		} else {

				/* No : Variable length IE */

			p_ie++;
			p_ie += *p_ie;
		}

	}

	ns_ie_tab [i + 1] = p_ie_end;

		/* 2 - Build the message segments in threaded buffers */

		/* Scan the IE pointers table */

	for (j = 0, segment_nb = 1; j == i; segment_nb++) {

			/* Allocate a buffer */

		Buffer_alloc;

			/* Thread the buffer */

		if (segment_nb == 1) {

				/* First segment */

			p_buffer_first = p_buffer;

		} else {

				/* Not first segment */

			p_buffer_previous -> p_next = p_buffer;
		}

		p_buffer_previous = p_buffer;

			/* Initialize the buffer header */

		Buffer_data_offset	+= DL_MX_FRAME_HEADER;

			/* Initialize the output pointer */

		p_out 		= Buffer_a_start_data;
		p_out_end 	= p_out + N201;

			/* Build the segment header in the current buffer */

		Memcpy_far ((char FAR *)p_out, (char FAR *)p_in, (int)header_size);

			/* keep room for the SEGMENTED IE */

		p_out += header_size + IE_SEGMENTED_LGTH;

			/* Copy as many IE's as possible in the segment */

		for (;;) {

			ie_size = (ushort)(ns_ie_tab [j + 1] - ns_ie_tab [j]);

#			if ASSERT == ON

					/* Check for a too long IE */

				if (ie_size > N201 - header_size - IE_SEGMENTED_LGTH) {
					Trap (TRAP_NS_TOO_LONG_IE, "ns_segmenter");
				}

#			endif

				/* Enough room in the segment for the IE ? */

			if (p_out + ie_size < p_out_end) {

					/* Yes - Copy the IE contain */

				Memcpy_far ((char FAR *)p_out, (char FAR *)ns_ie_tab [j], (int)ie_size);
				p_out += ie_size;

					/* Next IE - end of the IE list ? */

				if (++j == i) {
					break;			/* Yes --> End of segment */
				}

			} else {

					/* Not enough room --> End of segment */

				break;
			}

		}

	}

		/* Too many segment ? */

	if (segment_nb > MX_SEGMENT) {

			/* Yes - Release the buffers of the thread */

		for (p_buffer = p_buffer_first; p_buffer != P_NIL; p_buffer = Buffer_p_next) {
			Free_buffer (p_buffer);
		}

			/* Notify to the NS management */

		error_set (ERR_N_SEGMENTER, 0, 0);

			/* Return NOK */

		return (NOK);

	}

		/* 3 - Build the IE SEGMENTED in each segment */

	for (p_buffer = p_buffer_first; p_buffer != P_NIL; p_buffer = Buffer_p_next) {

			/* IE points on the memory reserved for the SEGMENTED IE */

		p_ie 	= Buffer_a_start_data + header_size;

			/* Load the fields of the SEGMENTED IE */

				/* IE type */

		*p_ie++ = SEGMENTED;

				/* Length of the SEGMENTED IE contents */

		*p_ie++ = IE_SEGMENTED_LGTH;

				/* Segment remaining field */

		Put_ie_field (SEGMENT_REMAINING_POSITION, SEGMENT_REMAINING_LENGTH, --segment_nb);

				/* Segment indicator field */

		if (p_buffer == p_buffer_first) {
			Put_ie_field (SEGMENT_INDICATOR_POSITION, SEGMENT_INDICATOR_LENGTH, FIRST_SEGMENT);

		} else {

			Put_ie_field (SEGMENT_INDICATOR_POSITION, SEGMENT_INDICATOR_LENGTH, SUBSEQUENT_SEGMENT);
		}

			/* Message type field */

		*(++p_ie) = spdu_id;
	}

	p_buffer = p_buffer_first;

	return (OK);

}

#endif

/*EOF*/
