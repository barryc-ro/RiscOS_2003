
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_accss.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		ns_build_object implements the building of the NS entity objects
 *              NA, DL and CALL.
 *
 *		call_ref_insert and call_ref_remove - implements the
 *				insertion and removal of an item in the call reference
 *				access table.
 *
 *		ns_access_na,
 *		ns_access_dl_na,
 *		ns_access_dl_next_na
 *		ns_access_dl_ces,
 *		ns_access_conn_id,
 *		ns_access_call_ref,
 *      ns_access_first_call,
 *		ns_access_next_dl,
 *		ns_access_next_call,
 *      ns_access_prior_call : implement the access to the current
 *       		occurrence of NA and CALL objects using address information.
 *
 *		ns_build_check_tab check the table organisation in order to use the
 *       		access functions.
 *
 *      ns_access_tab_spdu,
 *		ns_access_tab_ssdu,
 *		ns_access_tab_ie implement the access to tables tab_spdu, tab_ssdu,
 *				tab_ie using a set of values used as a key.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "ctx_ext.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             ns_build_object - implements the building of the object (NA,
				 DL and CALL) of the NS entity from the NS_INIT_RQ message
				 coming from the MNS.

Usage            uchar ns_build_object (struct ns_config FAR *p_ns_config);
					- p_ns_config : pointer on the data configuration.

Description      buid_ns_objet implements the building of the NS entity objects
				 in a network structure :

				 na --> na ................................. ---> na
				|||                                               |
				|||--------------------------------------|        v
				||                                       |        dl ---> dl ... ---> dl
				||----------------------|                |
				|                       |                |
				|	OUTGOING  CALL      |  MIXED CALL    |  INCOMING CALL
				V                       V                V
				call ---> call.... ---> call..call ---> call --->... ---> call

				---------------------
				|      node         |
				---------------------
				|  object occurence |
				---------------------

Return value    return code = OK
							= NOK

common constants and declarations  : ns.h

*--------------------------------------------------------------------------*/

uchar ns_build_object (p_ns_config)
	struct ns_config 	FAR	*p_ns_config;			/* pointer on the configuration structure */
{
	conn_id_t 				 i;						/* temporary loop index */
	conn_id_t				 j;						/* temporary loop index */

	struct i_ns_na 		FAR	*p_ns_config_na;		/* pointer on na inside the configuration structure */

	struct node 		FAR	*p_current;				/* current memory pointer */
	struct node			FAR	*p_previous_node_call;	/* pointer on the call previous node */

	struct node 		FAR	*p_node_na 	 = P_NIL;	/* current node pointer for an na occurrence */
	struct node 		FAR	*p_node_dl   = P_NIL;	/* current node pointer for a dl occurrence */
	struct node 		FAR	*p_node_call = P_NIL;	/* current node  pointer for a call occurrence */
	struct node 		FAR	*p_top_node  = P_NIL;	/* top node pointer */
	uchar				FAR *p_blk;					/* Memory block pointer */

	ushort					 call_sz;				/* call useful size */

	conn_id_t				 nb_call;				/* total number of call in an access */
	uchar					 dlcep_nb;				/* number of dlcep context to build */

#	if OPTIMIZATION == SPEED

			/* Build a  NA access table if not already done */

		if (p_nsna_tab == P_NIL) {

			if ((p_nsna_tab = (struct nsna FAR *(FAR *))Mem_alloc (sizeof (struct nsna FAR *) * Na_nb, PID_VL)) == P_NIL) {
				return (NS_CFG_ERR_MEMORY_FULL);
			}

		}

#	endif

		/* Build a NA access table thru ces, if not already done */

	if (p_nsna_ces_tab == P_NIL) {

		if ((p_nsna_ces_tab = (struct accss_nsna_ces FAR *)Mem_alloc (sizeof (struct accss_nsna_ces) * Na_nb, PID_VL)) == P_NIL) {
			return (NS_CFG_ERR_MEMORY_FULL);
		}

	}

#	if NS_MAINTENANCE_CAPABILITY == ON

		if (p_ns_d_chan_status_start == P_NIL) {

				 /* Build the table to store the D channel status */

			if ((p_ns_d_chan_status_start = (struct ns_d_chan_status FAR *)Mem_alloc (Rnd_sizeof (struct ns_d_chan_status) * NS_MX_NFAS_GROUPS, PID_VL)) == P_NIL) {
				return (NS_CFG_ERR_MEMORY_FULL);
			}


			for (i = 0; i < NS_MX_NFAS_GROUPS; i++) {
				Ns_access_d_chan_ctx (i);
				Nfas_nai_active_d_chan = NAI_NIL;
			}
		}

#	endif

		/* NA loop */

	for (i = 0; i < Ns_config_na_nb; i++) {

		p_ns_config_na = Ns_config_na_a (i);

		if (Ns_config_nai >= Na_nb) {
			return (NS_CFG_ERR_NAI_TOO_BIG);
		}

		if (ns_access_na (Ns_config_nai) == OK) {
			return (NS_CFG_ERR_NAI);
		}

			/* Allocate memory */

		if ((p_blk = (uchar FAR *)(p_current = (struct node FAR *)Mem_alloc (Rnd_sizeof (struct nsna) + Rnd_sizeof (struct node), PID_VL))) == P_NIL) {
			return (NS_CFG_ERR_MEMORY_FULL);
		}

				/* Set node pointers */

				/*
				   Set the next pointer in the last node.
				   except for the first node of course.
				*/

		if (i != 0) {
			p_node_na -> p_next = p_current;

		} else {

			/* First node */

			p_top_node = p_current;

		}

		p_node_na			= p_current;			/* set NA node */
		p_node_na -> p_next = P_NIL;				/* set next to P_NIL */

		p_nsna = (struct nsna FAR *)(p_node_na + 1);

#		if OPTIMIZATION == SPEED

				/* Load index table */

			p_nsna_tab[Ns_config_nai] = p_nsna;

#		endif

				/* Set Nai */

		if (*Ns_config_a_spid == SPID_NIL) {

				/*
				 * No SPID is provided -->
				 * interface and DL nai are the same,
				 * DL ces is DL_CES_SIG.
				 */

			Nai	= Ns_config_dl_nai	= Ns_config_nai;
			Ns_config_na_dl_ces		= DL_CES_SIG;

		} else {

			Nai						= Ns_config_nai;
		}

			/* Build na access table thru dl ces */

		Na_dl_ces 	= Set_default (Ns_config_na_dl_ces, DL_CES_SIG);

#		if EQUIPMENT == NT2

			if (Ns_config_fct == FG_NT_TE) {

            	for (j = 1; j < DL_MX_DLCEP; j++) {
					Nsna_ces_key (Nai, j) = p_nsna;
                }

            } else {
				Nsna_ces_key (Ns_config_dl_nai, Na_dl_ces) = p_nsna;
            }

#		else
			Nsna_ces_key (Ns_config_dl_nai, Na_dl_ces) = p_nsna;
#		endif

		Na_p_blk    = p_blk;
		nb_call		= (add_t)(Ns_config_incoming_call_nb + Ns_config_outgoing_call_nb + Ns_config_mixed_call_nb);

#		if OPTIMIZATION == SPEED

				/* Build a call reference access table */

			Na_call_ref_tab_size = (nb_call * 2) + 1;

			if ((Na_call_ref_p_tab = (struct call_ref_tab FAR *)Mem_alloc (Rnd_sizeof (struct call_ref_tab) * Na_call_ref_tab_size, PID_VL)) == P_NIL) {
				return (NS_CFG_ERR_MEMORY_FULL);
			}

				/* Build a connect Id access table */

			Na_conn_tab_size = nb_call;

			if ((Na_conn_p_tab = (struct conn_tab FAR *)Mem_alloc (Rnd_sizeof (struct conn_tab) * Na_conn_tab_size, PID_VL)) == P_NIL) {
				return (NS_CFG_ERR_MEMORY_FULL);
			}

#		endif

			/* CALL loop */

		p_previous_node_call = P_NIL;

		for (j = 0; j < nb_call; j++) {

#			if EQUIPMENT == TE
				call_sz = Rnd_sizeof (struct call) + Rnd_sizeof (struct node);
#			else

					/* Variable size of NA */

				if (Ns_config_fct == FG_NT_TE) {
					call_sz = Rnd_sizeof (struct call) + Rnd_sizeof (struct node);

				} else {

					call_sz = Rnd_sizeof (struct call) - Rnd_sizeof (struct call_temp) + Rnd_sizeof (struct node);
				}

#			endif

				/* Allocate memory */

			if ((p_blk = (uchar FAR *)(p_current = (struct node FAR *)Mem_alloc (call_sz + Rnd_sizeof (struct node), PID_VL))) == P_NIL) {
				return (NS_CFG_ERR_MEMORY_FULL);
			}

				/* Init pointers */

				/* Set next pointer into the previous node */

			if (j != 0) {
				p_node_call -> p_next = p_current;

			} else {

					/* Set down pointer in NA node */

				p_node_na -> p_dp = p_current;
			}

			p_node_call 			= p_current;							/* init call node pointer */
			p_node_call -> p_next 	= P_NIL;					/* next to P_NIL */

			p_node_call -> p_dp  	= p_previous_node_call;		/* previous call node */
			p_previous_node_call 	= p_node_call;				/* set previous node for next loop */

				/* Init access pointers */

			p_call = (struct call FAR *) (p_node_call + 1);		/* current pointer on call occurrence */

			if (j < (conn_id_t)Ns_config_outgoing_call_nb) {
				Call_type 		= OUTGOING_CALL;
				Call_conn_id 	= j;

			} else {

				if ((ushort)j < (ushort)(Ns_config_outgoing_call_nb + Ns_config_mixed_call_nb)) {

					if ( j == (conn_id_t)Ns_config_outgoing_call_nb) {
						P_first_mixed_call = p_call;
					}

					if ((ushort)j == (ushort)((ushort)Ns_config_outgoing_call_nb + (ushort)Ns_config_mixed_call_nb - 1)) {
						P_last_mixed_call = p_call;
					}

					Call_type 		= MIXED_CALL;
					Call_conn_id 	= j;

				} else {

					if ((ushort)j == ((ushort)Ns_config_outgoing_call_nb + (ushort)Ns_config_mixed_call_nb)) {
						P_first_incoming_call = p_call;
					}

					Call_type 		= INCOMING_CALL;
					Call_conn_id 	= MX_CONN_ID - (j - (ushort)(Ns_config_outgoing_call_nb + Ns_config_mixed_call_nb));
				}
			}

#			if OPTIMIZATION == SPEED

					/* Load call index table */

				Na_conn_p_tab[j].p_call = p_call;

#			endif

				/* Call memory block pointer */

			Call_p_blk = p_blk;

		} /* End of CALL loop */

			/* DL loop */

		if (Ns_config_type == BRI) {
			dlcep_nb = DL_MX_DLCEP_SIG_BRI;

		} else {

			dlcep_nb = DL_MX_DLCEP_SIG_PRI;
		}

		for (j = 0; j < dlcep_nb; j++) {

				/* allocate memory */

			if ((p_blk = (uchar FAR *)(p_current = (struct node FAR *)Mem_alloc (Rnd_sizeof (struct nsdl) + Rnd_sizeof (struct node), PID_VL))) == P_NIL) {
				return (NS_CFG_ERR_MEMORY_FULL);
			}

				/*
				   Set the next pointer in the last node.
				   except for the first node.
				*/

			if (j != 0) {
				p_node_dl -> p_next = p_current;
			}

			p_node_dl 			= p_current;						/* set na node */
			p_node_dl -> p_next = P_NIL;										/* set next to P_NIL */

				/* Set the head thread pointer in NA */

			if (j == 0) {
				Na_first_p_dl = (struct nsdl FAR *) (p_node_dl + 1);
			}

			p_nsdl 			= (struct nsdl FAR *)(p_node_dl + 1);

			if (j == 0) {
				Dl_ces		= DL_CES_BROADCAST;

			} else {

				if (*Ns_config_a_spid == SPID_NIL) {
					Dl_ces 	= Ces_from_x (j);

				} else {

					Dl_ces 	= Na_dl_ces;
				}
			}

			Dl_backup 		= OFF;

				/* Memory block pointer */

			Dl_p_blk		= p_blk;

		} /* End of DL loop */

#		if NS_MAINTENANCE_CAPABILITY == ON

				/* By default : No NFAS suport */

			Na_nfas = OFF;

				/* Reset the D channel context */

			Na_d_channel_ctx  = BYTE_VAL_NIL;

#		endif

	} /* End of NA loop */

		/* Is it the first configuration message ? */

	if (p_ns_tree == P_NIL) {

			/* Init the P_NS_TREE pointer */

		p_ns_tree = p_top_node;

	} else {

			/* Link to the last NA object */

		for (p_node_na = p_ns_tree; Next (p_node_na) != P_NIL; p_node_na = Next (p_node_na));
		Next(p_node_na) = p_top_node;
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			call_ref_insert and call_ref_remove - implements the
				insertion and removal of an item in the call reference
				access table.

Usage           uchar call_ref_insert (call_ref_t call_ref,
										struct call FAR *p_call);

				uchar call_ref_remove (void);

Description :	these two functions implement the open addressing hash coding
				algorithm described in the Knuth page 519.

Return value : 	= OK done correctly,
				= NOK not done, invalid parameters.

Common constants and declarations : ns.h

Common objects : ns context.

*--------------------------------------------------------------------------*/

#if OPTIMIZATION == SPEED

uchar call_ref_insert (call_ref, p_call_insert)
	call_ref_t			 call_ref;
	struct call 	FAR *p_call_insert;
{
	int					 i;
	struct call		FAR	*p_call;

		/* Hash code number */

	i = Call_ref_hcode (call_ref, Na_call_ref_tab_size);

		/* Compare */

	while ((p_call = Na_call_ref_p_tab[i].p_call) != P_NIL) {

		if (Call_ref == call_ref) {
			return (NOK);
		}

			/* Collision : try previous entries */

		if (--i < 0) {
			i += Na_call_ref_tab_size;
		}

	}

	Na_call_ref_p_tab[i].p_call = p_call_insert;

	return (OK);

}

/*-------------------------------------------------------------------------*/

uchar call_ref_remove ()
{
	struct	call 	FAR *p_call_save;
	int					 i, j, r;
	call_ref_t			 call_ref_save;

	p_call_save		= p_call;
	call_ref_save	= Call_ref;

		/* Hash code number */

	i = Call_ref_hcode (Call_ref, Na_call_ref_tab_size);

		/* Compare */

	while ((p_call = Na_call_ref_p_tab[i].p_call) != P_NIL) {

		if (Call_ref == call_ref_save) {

			while (TRUE) {

				Na_call_ref_p_tab[i].p_call = P_NIL;
				j = i;

				do {

					if (--i < 0) {
						i += Na_call_ref_tab_size;
					}

					if ((p_call = Na_call_ref_p_tab[i].p_call) == P_NIL) {
						p_call = p_call_save;
						return (OK);
					}

					r = Call_ref_hcode (Call_ref, Na_call_ref_tab_size);

				} while (In_range_strict_h (r, i, j));

				Na_call_ref_p_tab[j].p_call = Na_call_ref_p_tab[i].p_call;
			}

		} else if (--i < 0) {

			i += Na_call_ref_tab_size;
		}

	}

	p_call = p_call_save;
	return (NOK);

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ns_access_na, ns_access_dl_ces, ns_access_conn_id and
				ns_access_call_ref : implement	the direct access to the na,
				dl and call object occurrence according to its address
				values.

Usage           uchar ns_access_na 			(nai_t nai);
				uchar ns_access_dl_na		(nai_t nai, ces_t ces);
				uchar ns_access_dl_ces		(ces_t ces);
				uchar ns_access_conn_id		(conn_id_t conn_id);
				uchar ns_access_call_ref	(call_ref_t call_ref);

Description     the functions implements the scanning of the tree stucture
				in order to match the address values.

Return value    return code = OK found (and not in NIL state), the context
								 pointer points on the found occurrence.

							= NOK not found or state not NIL.

Common constants and declarations : ns.h

Common objects	:	na and call occurences

*--------------------------------------------------------------------------*/

uchar ns_access_na (nai)
	register	nai_t 					 nai;		/* nai */
{
#	if OPTIMIZATION != SPEED
		register	struct node 	FAR *p_node;	/* current node pointer */
#	endif

	if (nai >= Na_nb) {
		return (NOK);
	}

#	if OPTIMIZATION == SPEED

		if ((p_nsna = p_nsna_tab[nai]) == P_NIL) {
			return (NOK);
		}

		return (OK);
#	else

			/* Scan the na occurrences and test matching with nai */

		for (p_node = p_ns_tree ; p_node != P_NIL; p_node = Next_node) {
			p_nsna = (struct nsna FAR *) (p_node + 1);

			if (Nai == nai) {
				return (OK);
			}
		}

		p_nsna = P_NIL;
		return (NOK);

#	endif

}

/*-------------------------------------------------------------------------*/

uchar ns_access_dl_na (dl_nai, dl_ces)
	nai_t	dl_nai;
	ces_t	dl_ces;
{

	if ((p_nsna = Nsna_ces_key (dl_nai, (dl_ces == DL_CES_BROADCAST) ? DL_CES_SIG : dl_ces)) == P_NIL) {
		return (NOK);
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

uchar ns_access_dl_next_na (dl_nai, dl_ces)
	nai_t	dl_nai;
	ces_t	dl_ces;
{

	uchar i;

	for (i = dl_ces; i < DL_MX_DLCEP; i++) {

		if (i != dl_ces) {

			if ((p_nsna = Nsna_ces_key (dl_nai, i)) != P_NIL) {
				return (OK);
			}
		}

	}

	p_nsna = P_NIL;
	return (NOK);
}

/*-------------------------------------------------------------------------*/

#if RESET_CONFIG == ON

void ns_access_first_na ()
{

	if (p_ns_tree != P_NIL) {
		p_nsna = (struct nsna FAR *) (p_ns_tree + 1);

	} else {

		p_nsna = P_NIL;
	}

}

	/*----------*/

void ns_access_next_na ()
{
	register	struct node 	FAR *p_node;		/* current node pointer */

	if (p_nsna != P_NIL) {

			/* Pointer on the node of the current na context */

		p_node = (struct node FAR *)p_nsna - 1;

		if ((p_node = Next_node) != P_NIL) {
			p_nsna = (struct nsna FAR *)(p_node + 1);

		} else {

			p_nsna = P_NIL;
		}

	}

}

#endif

/*-------------------------------------------------------------------------*/

uchar ns_access_dl_ces (ces)
	ces_t	ces;
{
	Ns_access_first_dl ();

	while (Dl_current_exist) {

		if (Dl_ces == ces) {
			return (OK);
		}

		Ns_access_next_dl ();
	}

	p_nsdl = P_NIL;
	return (NOK);
}

/*-------------------------------------------------------------------------*/

uchar ns_access_conn_id (type, conn_id)
	uchar			 type;			/* type of call */
	conn_id_t		 conn_id;		/* connect id */
{
	struct node FAR *p_node;		/* current node pointer */
	add_t			 i;				/* loop index */
	add_t			 nb_call;		/* number of call contexts to explore */

	if (! Na_current_exist) {
		return (NOK);
	}

	switch (type) {

		case OUTGOING_CALL :
			ns_access_first_call ();
			nb_call	= Outgoing_call_nb;
			break;

		case INCOMING_CALL :
			Ns_access_first_incoming_call ();
			nb_call	= Incoming_call_nb;
			break;

		case MIXED_CALL :
			Ns_access_first_mixed_call ();
			nb_call	= Mixed_call_nb;
			break;

		case ANY_CALL :

#			if OPTIMIZATION == SPEED

				if  ((add_t)conn_id >= (add_t)(Outgoing_call_nb + Mixed_call_nb)) {
					 i = (add_t)(MX_CONN_ID -conn_id + Outgoing_call_nb + Mixed_call_nb);

					 if ((add_t)i >= (add_t)(Outgoing_call_nb + Incoming_call_nb + Mixed_call_nb)) {
						return (NOK);
					 }

				} else {

					 i = conn_id;
				}

				p_call = Na_conn_p_tab[i].p_call;

				if (Call_conn_id != conn_id) {
					return (NOK);
				}

				return (OK);
#			else
				ns_access_first_call ();
				nb_call	= (add_t)(Outgoing_call_nb + Mixed_call_nb + Incoming_call_nb);
				break;
#			endif

	}

	for (p_node = (struct node FAR *)p_call - 1, i = 0 ; (add_t)i < (add_t)nb_call; p_node = Next_node, i++) {

		if (p_node == P_NIL) {
			return (NOK);
		}

		p_call = (struct call FAR *)(p_node + 1);

		if (Call_conn_id == conn_id) {
			return (OK);
		}

	}

	return (NOK);

}

/*--------------------------------------------------------------------------*/

uchar ns_access_call_ref (call_ref)
		call_ref_t		call_ref;		/* call reference */
{

#	if OPTIMIZATION == SPEED

		int				i;

			i = Call_ref_hcode (call_ref, Na_call_ref_tab_size);

			while ((p_call = Na_call_ref_p_tab[i].p_call) != P_NIL) {

				if (Call_ref == call_ref) {

					if (Call_state != STATE_NIL) {

						if (Dl_current_exist) {

							/*
								Store the received CES in call context only if
								received SPDU is not RELEASE or RELEASE COMPLETE
								(When receiving REL or REL COMP, the CES is useful
								 only if it has already been stored). This avoids
								 a wrong "Dl_call_count" decrement in further "call_clear"
								 function if Call_ces is DL_CES_NIL.
							*/

							if ((spdu_id != REL) && (spdu_id != REL_COMP)) {

								Call_ces = Dl_ces;
							}
						}

						return (OK);
					}
				}

					/* Collision : try previous entries */

				if (--i < 0) {
					i += Na_call_ref_tab_size;
				}

			}

#	else

			/*
			   Scan all the call contexts of the current na and test
			   matching with the call_ref.
			*/

		ns_access_first_call ();

		while (Call_current_exist) {

			if (Call_ref == call_ref) {

				if (Call_state != STATE_NIL) {

					if (Dl_current_exist) {

						/*
							Store the received CES in call context only if
							received SPDU is not RELEASE or RELEASE COMPLETE
							(When receiving REL or REL COMP, the CES is useful
							 only if it has already been stored). This avoids
							 a wrong "Dl_call_count" decrement in further "call_clear"
							 function if Call_ces is DL_CES_NIL.
						*/

						if ((spdu_id != REL) && (spdu_id != REL_COMP)) {

							Call_ces = Dl_ces;
						}
					}

					return (OK);
				}

			}

			ns_access_next_call ();
		}

#	endif

	p_call = P_NIL;
	return (NOK);
}

/*-------------------------------------------------------------------------*/

		/* p_nsdl points the current DL object */

void ns_access_next_dl ()
{
	struct node 	FAR *p_node;	/* current node pointer */

	if (! Dl_current_exist) {
		return;
	}

			/* Pointer on the node of the current DL context */

	p_node = (struct node FAR *)p_nsdl - 1;

	if ((p_node = Next_node) != P_NIL) {
		p_nsdl = (struct nsdl FAR *)(p_node + 1);

	} else {

		p_nsdl = P_NIL;
	}

}

/*-------------------------------------------------------------------------*/

	/* p_nsna points on the current NA */

void ns_access_first_call ()
{
	register	struct node 	FAR *p_node;		/* current node pointer */

		/* Pointer on the node of the current na context */

	if (Na_current_exist) {
		p_node = (struct node FAR *)p_nsna - 1;

		if ((p_node = Down_node) != P_NIL) {
			p_call = (struct call FAR *)(p_node + 1);
			return;
		}

	}

	p_call = P_NIL;

}

/*-------------------------------------------------------------------------*/

		/* p_call points on the current call */

void ns_access_next_call ()
{
	register	struct node 	FAR *p_node;		/* current node pointer */

		if (! Call_current_exist) {
			return;
		}

			/* Pointer on the node of the current na context */

		p_node = (struct node FAR *)p_call - 1;

		if ((p_node = Next_node) != P_NIL) {
			p_call = (struct call FAR *)(p_node + 1);

		} else {

			p_call = P_NIL;
		}

}

/*-------------------------------------------------------------------------*/

		/* p_call points on the current call */

void ns_access_prior_call ()
{
	register	struct node 	FAR *p_node;		/* current node pointer */

		if (! Call_current_exist) {
			return;
		}

			/* Pointer on the node of the current na context */

		p_node = (struct node FAR *)p_call - 1;

		if ((p_node = Prior_node) != P_NIL) {
			p_call = (struct call FAR *)(p_node + 1);

		} else {

			p_call = P_NIL;
		}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ns_build_check_tab implements the checking of the tables :
				tab_spdu, tab_ssdu,	tab_ie, tab_tabl tab_tabx in order of
				using these tables without bug with the ns_access_tab functions.

Usage           void ns_build_check_tab (void);

common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void	ns_build_check_tab ()
{
	uchar					i;					/* loop index */

#	if OPTIMIZATION == SPEED
		uchar				x_ie_alloc;			/* overflow dynamic allocation */
		uchar				j;                  /* index */
#	endif

			/*
			   Check the consistency of :
					- TABL_ITEM,
					- TABX_ITEM,
				The tabl_id and the item index shall be equal.
			*/

	for (i = 0; i < Size_tab_tabl; i++) {

		if (Search_key_tab_tabl (i) != i) {
			Trap (TRAP_TAB_TABL_UNORDERED, "ns_build_check_tabl: tabl");
		}

	}

	for (i = 0; i < Size_tab_tabx; i++) {

		if (Search_key_tab_tabx (i) != i) {
			Trap (TRAP_TAB_TABX_UNORDERED, "ns_build_check_tabl : tabx");
		}

	}

#	if OPTIMIZATION == SPEED

				/* Build the access tables */

					/* SPDU access table */

		for (i = 0; i < SIZE_X_SPDU; i++) {
			X_tab_spdu [i] = X_SPDU_NIL;
		}

		for (i = 0; i < Size_tab_spdu; i++) {
			X_tab_spdu [Hcod_spdu (Search_key_tab_spdu (i))] = i;
		}

					/* SSDU access table */

		for (i = 0; i < SIZE_X_SSDU; i++) {
			X_tab_ssdu [i] = X_SSDU_NIL;
		}

		for (i = 0; i < Size_tab_ssdu; i++) {
			X_tab_ssdu [Hcod_ssdu (Search_key_tab_ssdu (i))] = i;
		}

					/* IE access table */

		for (i = 0; i < SIZE_X_IE_MAIN + SIZE_X_IE_OVERFLOW; i++) {
			X_tab_ie [i].x_access = X_IE_NIL;
			X_tab_ie [i].x_link   = X_IE_LINK_NIL;
		}

		x_ie_alloc = SIZE_X_IE_MAIN - 1;

		for (i = 0; i < Size_tab_ie; i++) {

			if (X_tab_ie [j = Hcod_ie (Search_key_tab_ie (i))].x_access == X_IE_NIL) {
				X_tab_ie [j].x_access = i;

			} else {

				while ((X_tab_ie [j].x_link) != X_IE_LINK_NIL) j = X_tab_ie[j].x_link;

				if ((X_tab_ie [j].x_link = ++x_ie_alloc) == SIZE_X_IE_MAIN + SIZE_X_IE_OVERFLOW ) {
					Trap (TRAP_X_IE_SATURATION, "ns_build_check_tab : saturation");
				}

				X_tab_ie [x_ie_alloc].x_access = i;
			}

		}

#	endif	/* SPEED */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ns_access_tab_spdu, ns_access_tab_ssdu and ns_access_tab_ie -
				implement the access to the tables : tab_spdu, tab_ssdu,
				tab_ie using a set of values as search key. All the tables
				shall be ordered in an increasing manner according to the
				search key.

Usage           uchar ns_access_tab_spdu (uchar spdu_search_key);
				uchar ns_access_tab_ssdu (uchar ssdu_search_key);
				uchar ns_access_tab_ie   (short ie_search_key);

Description     The functions implements the binary searching of ordered
				tables.

Return value    return code = index entry if found.
							= X_SPDU_NIL, X_SSDU_NIL, X_IE_NIL if not found.

common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

				/*
				  Table scanning algorithm

					common :
					-------

					- i	= current index,

					input parameters :
					-----------------

					- size	= table size,
					- key   = table search key access,
					- x_nil	= NIL index

				*/

#define Tab_scan(size, key, x_nil) \
	for (i = 0; i < size; i++) if (input_key == key) return (i);\
	return (x_nil)

/*-------------------------------------------------------------------------*/

#if NS_MAINTENANCE_CAPABILITY == ON

	uchar	ns_access_tab_spdu (input_key)
		register	uchar		input_key;			/* spdu ID */
	{

		register	uchar		i,proto;			/* loop index */

		for (i = 0; i < Size_tab_spdu; i++) {

			proto = Spdu_protocol (i);

			if (input_key == Search_key_tab_spdu (i)) {

				if (protocol_discr == proto) {

					return (i);
				}
			}
		}

		return (X_SPDU_NIL);
	}

#else

#	if OPTIMIZATION != SPEED

		uchar	ns_access_tab_spdu (input_key)
			register	uchar		input_key;			/* spdu ID */
		{

			register	uchar		i;					/* loop index */

			Tab_scan (Size_tab_spdu, Search_key_tab_spdu (i), X_SPDU_NIL);
		}

#	endif

#endif /* ! SPEED */

/*-------------------------------------------------------------------------*/

#if (OPTIMIZATION != SPEED)

	uchar	ns_access_tab_ssdu (input_key)
		uchar		input_key;
	{

		register	uchar		i;					/* current index */

		Tab_scan (Size_tab_ssdu, Search_key_tab_ssdu (i), X_SSDU_NIL);

	}

#endif	/* ! SPEED*/

/*-------------------------------------------------------------------------*/

uchar	ns_access_tab_ie (input_key)
	register	short		input_key;			/* input key */
{

#if (OPTIMIZATION == SIZE) || (OPTIMIZATION == MIXED)
	register	uchar		i;					/* current index */

	Tab_scan (Size_tab_ie, Search_key_tab_ie (i), X_IE_NIL);

#endif	/* SIZE or MIXED */

#if OPTIMIZATION == SPEED
	uchar		i,j;							/* loop index */

			/* Get hcod entry in the access table */

	if((i = X_tab_ie [j = Hcod_ie (input_key)].x_access) == X_IE_NIL) {
		return (X_IE_NIL);
	}

			/* Filled ---> compare input key and tab key */

	if (Search_key_tab_ie (i) == input_key) {
		return (i);
	}

			/* Not EQ ---> read the overflow link */

	while ((j = X_tab_ie [j].x_link) != X_IE_LINK_NIL)  {

				/* Compare the input key and the tab key */

		if ((Search_key_tab_ie (i = X_tab_ie[j].x_access)) == input_key) {
			return (i);
		}

	}

		/* End of the link --> not found */

	 return (X_IE_NIL);

#endif	/* SPEED */

}

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			nfas_insert and nfas_remove - implements the
				insertion and removal of an item.
				The call reference is the key to know the Nai which
				has to be used.

Usage           uchar nfas_insert (call_ref_t call_ref,
										nai_t cc_nai);

				uchar nfas_remove (void);

Description :	these two functions implement the open addressing hash coding
				algorithm described in the Knuth page 519.

Return value : 	= OK done correctly,
				= NOK not done, invalid parameters.

Common constants and declarations : ns.h

Common objects : ns context.

*--------------------------------------------------------------------------*/

uchar nfas_insert (call_ref, cc_nai_insert)
	call_ref_t		call_ref;
	nai_t 			cc_nai_insert;
{
	int				 i;
	nai_t		cc_nai;

    call_ref = Ns_get_actual_cr_val (call_ref);

		/* Hash code number */

	i = Nfas_hcode (call_ref, Nfas_tab_size);

		/* Compare */

	while ((cc_nai = Nfas_p_tab (i).cc_nai) != NAI_NIL) {

		if ((cc_nai_insert == cc_nai) && (Nfas_p_tab (i).cr == call_ref)) {
			return (NOK);
		}

			/* Collision : try previous entries */

		if (--i < 0) {
			i += Nfas_tab_size;
		}

	}

		/* Insert the Nai which uses the given call reference */

	Nfas_p_tab (i).cc_nai = cc_nai_insert;
	Nfas_p_tab (i).cr 	  = call_ref;

	return (OK);

}

/*-------------------------------------------------------------------------*/

uchar nfas_remove ()
{
	int					 i, j, r;
	nai_t			 	nai_save, nai;
	call_ref_t			cr, call_ref;

	nai_save = nai = Nai;
    call_ref = Ns_get_actual_cr_val (Call_ref);

		/* Hash code number */

	i = Nfas_hcode (call_ref, Nfas_tab_size);

		/* Compare */

	while ((nai = Nfas_p_tab (i).cc_nai) != NAI_NIL) {

		if ((nai == nai_save) && (Nfas_p_tab (i).cr == call_ref)) {

			while (TRUE) {

				Nfas_p_tab (i).cc_nai= NAI_NIL;
				Nfas_p_tab (i).cr 	 = (call_ref_t)0;
				j = i;

				do {

					if (--i < 0) {
						i += Nfas_tab_size;
					}

					if ((nai = Nfas_p_tab (i).cc_nai) == NAI_NIL) {
						return (OK);
					}

					cr = Nfas_p_tab (i).cr;
					r = Nfas_hcode (cr, Nfas_tab_size);

				} while (In_range_strict_h (r, i, j));

				Nfas_p_tab (j).cc_nai = Nfas_p_tab (i).cc_nai;
				Nfas_p_tab (j).cr 	  = Nfas_p_tab (i).cr;
			}

		} else if (--i < 0) {

			i += Nfas_tab_size;
		}

	}

	return (NOK);

}

/*--------------------------------------------------------------------------*/

uchar ns_access_nfas (call_ref)
		call_ref_t		call_ref;		/* call reference */
{

	int				i;

    call_ref = Ns_get_actual_cr_val (call_ref);

	i = Nfas_hcode (call_ref, Nfas_tab_size);

	while (Nfas_p_tab (i).cc_nai != NAI_NIL) {

		if (Nfas_p_tab (i).cr == call_ref) {

		   if (ns_access_na (Nfas_p_tab (i).cc_nai) != OK) {
			   return (NOK);
		   }

			return (OK);
		}

			/* Collision : try previous entries */

		if (--i < 0) {
			i += Nfas_tab_size;
		}

	}

	return (NOK);
}

#endif /* } MAINTENANCE */



/*EOF*/

