
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mns.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      mns  - implements the Network Signalling layer management.
 *
 *		mns_config - implements the Network Signalling configuration.
 *
 *      mns_build_object - implements the building of the object (NA,
 *		and CALL) of the MNS entity from the NS_SET_CONFIG_RQ message
 *		coming from the system management.
 *
 *      mns_send_ns - implements the sending od a message and buffer
 *      to the NS entity.
 *
 *		mns_retransmit - implements the retransmission of a received
 *		message with a new primitive code and to a given entity.
 *
 *		mns_var_init - init of NMS entity's global variables.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "mns.h"
#include "isdn.h"
#include "dl_int.h"

	/* Copyright */

CONST char 	mns_copyright[]	= "Copyright (c) 1989-1996 by OMNITEL SA - All Rights Reserved";
CONST char 	mns_licence[]	= LICENSE_NBER;

		/* MNS entity common variables */

	Entity_common (mns);

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mns - implements the main function of the Network Signalling
				Management entity.

Usage           uchar mns (p_msg);
					- struct message FAR *p_msg;

Related
functions usage uchar mns_config (struct ns_config FAR *p_ns_config);

Description :	mns implements the dispatching of the message sent to the
				Network Management entity.

Return value : 	mns returns = OK,
							= NOK.

Common constants and declarations : ns.h

Common objects : message context.

*--------------------------------------------------------------------------*/

uchar mns (p_msg)
	struct message 		FAR *p_msg;			/* pointer on received message */
{
	struct ns_config	FAR	*p_ns_config;   /* configuration pointer */
	uchar					*p_data;		/* data pointer */

#	if RESET_CONFIG == ON
		struct mnsna	FAR	*p_na_prior;	/* NA prior pointer */
#	endif

		/* Init the entity pointers */

	p_rcv_msg = p_msg;
	p_buffer  = R_msg_p_buffer;
	p_snd_msg = P_NIL;
	p_mnsna	  = P_NIL;

		/* Dispatcher : from entity */

	switch (R_msg_from) {

			/* From System Management */

		case ENT_SM :

				/* Dispatcher : event code */

			switch (R_msg_code) {

					/* Configuration requested from System Management entity */

				case SM_SET_CONFIG_RQ :
					p_ns_config	= (struct ns_config FAR *)R_a_data;

					if ((Ns_config_cause = mns_config (p_ns_config)) == MNS_CFG_OK)  {
						Ns_config_ret_code = OK;

					} else {

						Ns_config_ret_code = NOK;
						mns_retransmit (SM_SET_CONFIG_CO, ENT_SM);
					}

					Ns_config_diagnostic = ENT_MNS;

					break;

					/* Resource BUSY AND CLEAR BUSY request */

				case SM_BUSY_RQ :
					break;

				case SM_CLEAR_BUSY_RQ :
					mns_retransmit_na  (MNS_CLEAR_BUSY_RQ, BYTE_VAL_NIL);
					break;

					/* Get statistics */

				case SM_INFO_RQ :
					mns_retransmit (SM_INFO_CO, ENT_SM);
					break;

					/* Stop a set of access */

				case SM_STOP_RQ :
					mns_retransmit  (MNS_RESTART_RQ, ENT_NS);
					break;

					/* Reset configuration */

#				if RESET_CONFIG == ON

					case SM_RESET_CONFIG_RQ :
						mns_retransmit (MNS_RESET_CONFIG_RQ, ENT_NS);
						break;

#				endif

					/* Na power ON and power OFF */

				case SM_NA_POWER_ON_RQ :
					mns_retransmit_na  (MNS_NA_POWER_ON_RQ, R_msg_nai);
					break;

				case SM_NA_POWER_OFF_RQ :
					mns_retransmit_na  (MNS_NA_POWER_OFF_RQ, R_msg_nai);
					break;

					/* DLCI management */

				case SM_DL_DLCI_RQ :

					if (R_msg_inf1 == DL_SAPI_SIG) {
						mns_retransmit_na  (MNS_DL_DLCI_RQ, R_msg_nai);
					}
					break;

#				if NS_MAINTENANCE_CAPABILITY == ON

					case SM_CHANNEL_MAINT_RQ :
						mns_retransmit (MNS_SERVICE_RQ, ENT_NS);
						break;

#				endif

					/* Unknown primitive */

				default :
					Trap (TRAP_MNS_CODE, "mns");

			}
			break;

			/* From Network signalling entity */

		case ENT_NS :

				/* Dispatcher : event code */

			switch (R_msg_code) {

					/* Init MNS and Network Signalling entity done */

				case MNS_SET_CONFIG_CO :
					mns_retransmit (SM_SET_CONFIG_CO, ENT_SM);
					break;

					/* Restart confirm */

				case MNS_RESTART_CO :
					mns_retransmit (SM_STOP_CO, ENT_SM);
					break;

					/* Stop indication */

				case MNS_RESTART_IN :
					break;

						/* Reset configuration confirm */

#				if RESET_CONFIG == ON

					case MNS_RESET_CONFIG_CO :
						p_na_prior = P_NIL;

						mns_access_first_na ();

						while (p_mnsna != P_NIL) {

							if (Mns_nai == R_msg_nai) {

#								if OPTIMIZATION == SPEED

										/* Update index table */

									p_mnsna_tab[R_msg_nai] = P_NIL;

#								endif

									/* Update the NA link */

								if (p_na_prior == P_NIL) {
									p_mns_tree = Next (Node_from_p (p_mnsna));

								} else {

									Next (Node_from_p (p_na_prior)) = Next (Node_from_p (p_mnsna));
								}

								Mem_free ((char FAR *)Mns_p_blk, PID_VL);

									/* Confirm configuration reset */

								break;	/* exit NA loop */

							}

							p_na_prior = p_mnsna;
							mns_access_next_na ();
						}

							/* Send the confirmation */

						mns_retransmit (SM_RESET_CONFIG_CO, ENT_SM);

						return (OK);

#				endif

					/* Error report */

				case MNS_ERR_IN :

					if (mns_access_na (R_msg_nai) == OK) {
						p_data = R_a_data;

						switch (Mns_err_cause) {

							default :
								Mns_error_counter++;
								break;

						}

#						if NS_EVENT_REPORT == ON

								/* Retransmit the error report to SM */

							mns_retransmit (SM_REPORT_IN, ENT_SM);

#						endif

					}
					break;

				case MNS_EVENT_IN :

#					if NS_EVENT_REPORT == ON
						mns_retransmit (SM_REPORT_IN, ENT_SM);
#					endif

					break;

				case MNS_STATUS_IN :

#					if NS_EVENT_REPORT == ON
						mns_retransmit (SM_REPORT_IN, ENT_SM);
#					endif

					break;

#				if NS_MAINTENANCE_CAPABILITY == ON

					case MNS_SERVICE_CO :
						mns_retransmit (SM_CHANNEL_MAINT_CO, ENT_SM);
						break;
#				endif

					/* Unknown primitive */

				default :
					Trap (TRAP_MNS_CODE, "mns");

			}

			break;


			/* Unknown entity */

		default :
			Trap (TRAP_UNKNOWN_ENTITY, "mns");

	}

		/* Free the remaining messages if necessary */

	Free_msg (p_rcv_msg);
	Free_msg (p_snd_msg);

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name           		mns_config - implements the initialisation of the MNS objects
								using the NS configuration data.

Usage           	uchar mns_config (struct ns_config FAR *p_ns_config);
						- p_ns_config : pointer on the data configuration.

Related
functions usage 	void mns_send_ns (code_t prim_code, nai_t nai, uchar conn_id);

Description        mns_config implements the mns objects initialization and the
				   sending of a SET CONFIGURATION message to the NS entity.

Return value       return code = OK
							   = NOK

Common constants and declarations : ns.h

Common objects	: MDL object contexts.

*--------------------------------------------------------------------------*/

uchar mns_config (p_ns_config)
	struct ns_config	FAR	*p_ns_config;		/* configuration pointer */
{

	struct i_ns_na 		FAR	*p_ns_config_na;	/* current na pointer */
	int 				i;						/* index */
	ushort				nb_call;				/* total number of call in an access */

		/* Build MNS objects and access paths */

	if ((ret_code = mns_build_object (p_ns_config)) != OK) {
		return (ret_code);
	}

		/* Init MNS objects and send a SET CONFIG message to NS */

			/* MNS na */

				/* NA loop */

	for (i = 0; i < Ns_config_na_nb; i++) {

		p_ns_config_na = (struct i_ns_na FAR *)Ns_config_na_a (i);

		if (mns_access_na (Ns_config_nai) == NOK) {
			return (MNS_CFG_ERR_NAI);
		}

		Mns_dl_nai		= Ns_config_dl_nai;		/* DL nai attached to the interface nai */
		Mns_call_count	= 0;					/* set call count to 0 (statistic) */

		nb_call = Ns_config_incoming_call_nb + Ns_config_outgoing_call_nb + Ns_config_mixed_call_nb;

		if (nb_call > NS_MX_CALL) {
			return (MNS_CFG_ERR_NB_CALL);
		}

	}	/* End of NA loop */

			/* Configuration OK */

		Ns_config_ret_code = OK;

			/* Send configuration data structure to Network Signalling */

		R_msg_p_buffer = P_NIL;

		mns_send_ns (MNS_SET_CONFIG_RQ, NAI_NIL, CONN_ID_NIL);

			/* Return OK */

		mns_init_flag = ON;		/* init done */

		return (MNS_CFG_OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             mns_build_object - implements the building of the object (NA,
				 and CALL) of the MNS entity from the NS_SET_CONFIG_RQ message
				 coming from the system management.

Usage            uchar mns_build_object (struct ns_config FAR *p_ns_config);
						- p_ns_config : pointer on the configuration data.

Description      mns_buid_objet implements the building of the MNS entity objects
				 in a tree structure.

Return value    return code = OK
							= NOK

common constants and declarations  : ns.h

*--------------------------------------------------------------------------*/

uchar mns_build_object (p_ns_config)
	struct ns_config FAR	*p_ns_config;			/* pointer on the configuration structure */
{

	uchar 					 i;						/* temporary loop index */
	conn_id_t				 j;						/* temporary loop index */

	struct i_ns_na 		FAR	*p_ns_config_na;		/* pointer on na inside the configuration structure */

	uchar  				FAR	*p_current;				/* current memory pointer */
	struct node			FAR	*p_previous_node_call;	/* pointer on the call previous node */

	struct node 		FAR	*p_node_na 	 = P_NIL;	/* current node pointer for an na occurrence */
	struct node 		FAR	*p_node_call = P_NIL;	/* current node  pointer for a call occurrence */
	struct node 		FAR	*p_top_node;			/* top node pointer */

	conn_id_t				 nb_call;				/* total number of call in an access */
	ushort					 object_size;			/* size of a NA + CALL's context */
	uchar				FAR	*p_blk;					/* memory block pointer */

#	if OPTIMIZATION == SPEED

			/* Build a  NA access table if not already done */

		if (p_mnsna_tab == P_NIL) {

			if ((p_mnsna_tab = (struct mnsna FAR *(FAR *))Mem_alloc (sizeof (struct mnsna FAR *) * Na_nb, PID_VL)) == P_NIL) {
				return (MNS_CFG_ERR_MEMORY_FULL);
			}

		}

#	endif

		/* NA loop */

	for (i = 0; i < Ns_config_na_nb; i++) {

		p_ns_config_na = Ns_config_na_a (i);

		if (Ns_config_nai >= Na_nb) {
			return (MNS_CFG_ERR_NAI_TOO_BIG);
		}

		if (mns_access_na (Ns_config_nai) == OK) {
			return (MNS_CFG_ERR_NAI);
		}


		nb_call	= Ns_config_incoming_call_nb + Ns_config_outgoing_call_nb + Ns_config_mixed_call_nb;

			/* allocate memory */

		object_size = Rnd_sizeof (struct mnsna) +
					  Rnd_sizeof (struct node) +
					  nb_call * (Rnd_sizeof (struct mnscall) +
								 Rnd_sizeof (struct node));

		if ((p_blk = p_current = Mem_alloc (object_size, PID_VL)) == P_NIL) {
			return (MNS_CFG_ERR_MEMORY_FULL);
		}

			/* Set node pointers */

				/*
				   Set the next pointer in the last node.
				   except for the first node of course.
				*/

		if (i != 0) {
			p_node_na -> p_next = (struct node FAR *)p_current;

		} else {

				/* First node */

			p_top_node = (struct node FAR *)p_current;
		}

		p_node_na = (struct node FAR *)p_current;					/* set na node */
		p_node_na -> p_next = P_NIL;								/* set next to P_NIL */

			/* Init Na object */

		p_mnsna = (struct mnsna FAR *)(p_node_na + 1);

#		if OPTIMIZATION == SPEED

				/* Load index table */

			p_mnsna_tab[Ns_config_nai] = p_mnsna;
#		endif

			/* Load NA ID as access key */

		if (*Ns_config_a_spid == 0) {

				/*
				 * No SPID is provided -->
				 * interface and DL nai are the same.
				 */

			Mns_nai		= Ns_config_dl_nai = Ns_config_nai;
			Mns_dl_ces	= DL_CES_SIG;


		} else {

			Mns_nai		= Ns_config_nai;
			Mns_dl_ces	= Ns_config_na_dl_ces;
		}

			/* Load memory block pointer in NA object */

		Mns_p_blk = p_blk;

			/* Next location */

		p_current += Rnd_sizeof (struct node) + Rnd_sizeof (struct mnsna);

			/* CALL loop */

		p_previous_node_call = P_NIL;

		for (j = 0; j < nb_call; j++) {

				/* Init pointers */

				/* Set next pointer into the previous node */

			if (j != 0) {
				p_node_call -> p_next = (struct node FAR *)p_current;

			} else {

				/* Set down pointer in NA node */

				p_node_na -> p_dp = (struct node FAR *)p_current;
			}

			p_node_call = (struct node FAR *)p_current;							/* init call node pointer */
			p_node_call -> p_next = P_NIL;						/* next to P_NIL */

			p_node_call -> p_dp  = p_previous_node_call;		/* previous call node */
			p_previous_node_call = p_node_call;					/* set previous node for next loop */

				/* Init access pointers */

			p_mnscall = (struct mnscall FAR *) (p_node_call + 1);					/* current pointer on call occurrence */

			if (j < (conn_id_t)Ns_config_outgoing_call_nb) {
				Mns_type 		= OUTGOING_CALL;
				Mns_conn_id 	= j;

			} else {

				if ((ushort)j < ((ushort)Ns_config_outgoing_call_nb + (ushort)Ns_config_mixed_call_nb)) {
					Mns_type 		= MIXED_CALL;
					Mns_conn_id 	= j;

				} else {

					Mns_type		= INCOMING_CALL;
					Mns_conn_id 	= MX_CONN_ID - (j - (Ns_config_outgoing_call_nb + Ns_config_mixed_call_nb));
				}
			}

			p_current += Rnd_sizeof (struct node) + Rnd_sizeof (struct mnscall);

		} /* End of CALL loop */

	} /* End of NA loop */

	if (p_mns_tree == P_NIL) {

			/* Init the tree structure */

		p_mns_tree = p_top_node;

	} else {

			/* Link to the last NA object */

		for (p_node_na = p_mns_tree; Next (p_node_na) != P_NIL; p_node_na = Next (p_node_na));
		Next(p_node_na) = p_top_node;
	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

uchar mns_access_na (nai)
	nai_t 			nai;			/* nai */
{
#if OPTIMIZATION != SPEED
	register	struct node 	FAR *p_node;	/* current node pointer */
#endif

	if (nai >= Na_nb) {
		p_mnsna = P_NIL;
		return (NOK);
	}

#if OPTIMIZATION == SPEED

	if ((p_mnsna = p_mnsna_tab[nai]) == P_NIL) {
		return (NOK);
	}
	return (OK);

#else

		/* Scan the na occurrences and test matching with nai */

	for (p_node = p_mns_tree ; p_node != P_NIL; p_node = Next_node) {
		p_mnsna = (struct mnsna FAR *) (p_node + 1);

		if (Mns_nai == nai) {
			return (OK);
		}

	}

	p_mnsna = P_NIL;
	return (NOK);

#endif

}

/*-------------------------------------------------------------------------*/

void mns_access_first_na ()
{
	if (p_mns_tree != P_NIL) {
		p_mnsna = (struct mnsna FAR *) (p_mns_tree + 1);

	} else {

		p_mnsna = P_NIL;
	}

}

	/*---------*/

void mns_access_next_na ()
{
	register	struct node 	FAR *p_node;		/* current node pointer */

	if (p_mnsna != P_NIL) {

			/* Pointer on the node of the current na context */

		p_node = (struct node FAR *)p_mnsna - 1;

		if ((p_node = Next_node) != P_NIL) {
			p_mnsna = (struct mnsna FAR *)(p_node + 1);

		} else {

			p_mnsna = P_NIL;
		}

	}

}


/*-------------------------------------------------------------------------*/

		/* Send a message to the NS entity */

void mns_send_ns (ns_code, nai, conn_id)
	code_t		ns_code;			/* primitive code */
	nai_t 		nai;				/* network access ID */
	conn_id_t	conn_id;			/* connection ID */
{

	if (p_snd_msg == P_NIL) {		/* allocate a message if not already done */
		p_snd_msg = Alloc_msg ();
	}

			/* Init addressing info */

	S_msg_from 		= ENT_MNS; 		/* from MNS entity */
	S_msg_to 		= ENT_NS;		/* to NS entity */
	S_msg_nai 		= nai;			/* na ID */
	S_msg_conn_id 	= conn_id;		/* connection ID */

			/* Primitive code and link the buffer */

	S_msg_code		= ns_code;		/* primitive code */
	S_msg_init_link_buffer;			/* link the buffer to the message */

			/* Send the message to the NS entity */

	Send_message (p_snd_msg);

	p_snd_msg 		= P_NIL;		/* reset send pointer */
	p_buffer 		= P_NIL;		/* reset buffer pointer */

}
/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mns_retransmit - implements the retransmission of a received
				message with a new primitive code and to a given entity.

Usage           void mns_retransmit (code_t code, ent_id_t to);
					- code : new primitive code,
					- to   : destination entity Id.
Related
functions usage void Send_message();

Common constants and declarations : services.h

Common objects : server context.

*--------------------------------------------------------------------------*/

void mns_retransmit (code, to)
	code_t		code;					/* primitive code */
	ent_id_t    to;						/* destination entity */
{

	R_msg_from	= ENT_MNS;				/* origination */
	R_msg_to	= to;					/* destination */

	R_msg_code	= code;					/* primitive code */

	Send_message (p_rcv_msg); p_rcv_msg = P_NIL;

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			mns_retransmit_na   - implements the retransmission of a received
				message with a new primitive code and to a given entity.

Usage           void mns_retransmit_na   (code_t code, nai_t nai);
					- code : new primitive code,
					- nai  : dl_nai for which the message should be duplicated,
							 BYTE_VAL_NIL means 'all dl_nai'.

Related
functions usage void Send_message();

Common constants and declarations : services.h

Common objects : server context.

*--------------------------------------------------------------------------*/

#define	Rcv_ces			R_msg_inf3

void mns_retransmit_na   (code, nai)
	code_t		code;					/* primitive code */
	nai_t		nai;
{

	for (mns_access_first_na (); p_mnsna != P_NIL; mns_access_next_na ()) {

			/*
			 * If 'nai' is BYTE_VAL_NIL, then process ALL INTERFACE nai.
			 * Else process interface nai's within the given dl_nai.
			 */

		if ((nai == BYTE_VAL_NIL) || (Mns_dl_nai == nai)) {

			if (code == MNS_DL_DLCI_RQ) {

					/* Ensure the received ces matches */

				if (Rcv_ces != Mns_dl_ces) {
					continue;
				}
			}
				/* Save the current received message in a new one (send) */

			S_msg_alloc;

			Memcpy_far ((char FAR *)p_snd_msg, (char FAR *)p_rcv_msg, (MESSAGE_HEADER_SIZE + R_msg_data_size));

				/* Send the message */

			S_msg_code 	= code;
			S_msg_from 	= ENT_MNS;
			S_msg_to	= ENT_NS;
			S_msg_nai	= Mns_nai;

			Send_message (p_snd_msg); p_snd_msg = P_NIL;
		}

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				mns_var_init - init of MNS entity's global variables.

Usage            	void mns_var_init ();

Return value :		void

Common constants and declarations : mns.h

Common objects : MNS global variables.

*--------------------------------------------------------------------------*/

void mns_var_init ()
{

	mns_init_flag			= OFF;
	p_mns_tree				= P_NIL;

#	if OPTIMIZATION == SPEED
		p_mnsna_tab			= P_NIL;
#	endif

}

/*EOF*/
