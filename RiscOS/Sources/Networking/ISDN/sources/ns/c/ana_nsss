
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ana_nsss.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 * 		ns_pr_ss_data_in_sdu -implements the printing of
 *			Supplementary Services data contained in SDU.
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"

#if (NS_SUPP_SERVICES == ON) && (NS_SIM_ANALYSER == ON) /* { */

#include "isdn.h"
#include "simul.h"
#include "ns_mac.h"

/*--------------------------------------------------------------------------*/

#if F_ETS == ON
#	include "ets.net_indx"
#endif
	/* Supplementary Services not implemented in other networks */

/*--------------------------------------------------------------------------*/

			/* LOCAL VARIABLES */

#if F_QSI == ON
	static uchar FAR *p_ns_ss_simul_fac_start;		/* current pointer to begin of facility data */
#endif

/*--------------------------------------------------------------------------*/

		/* LOCAL FUNCTION PROTOTYPES */

#if NEW_FCT_STYLE == ON

#	if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
		void	ns_ss_pr_aocs_cur_info_list		(void);
#	endif

#if (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
		void	ns_ss_pr_aoc_recorded_u_list	(void);
#	endif

#	if F_ETS == ON
		uchar	ets_get_facility_ie				(code_t msg_code, ushort FAR *p_comp_nb, ushort FAR *p_data_sz);
		void	ets_get_next_fac_instance		(code_t msg_code);
#	endif

#	if F_QSI == ON
		uchar	qsi_get_facility_ie				(code_t msg_code, ushort FAR *p_comp_nb, ushort FAR *p_data_sz);
		void	qsi_get_next_fac_instance		(code_t msg_code);
		void	ns_pr_ss_qsi_facility_start		(void);
		uchar	ns_pr_ss_qsi_start_comp			(uchar FAR *p_comp_nb);
#	endif

#else

#	if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
		void	ns_ss_pr_aocs_cur_info_list		();
#	endif

#if (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
		void	ns_ss_pr_aoc_recorded_u_list	();
#	endif

#	if F_ETS == ON
		uchar	ets_get_facility_ie				();
		void	ets_get_next_fac_instance		();
#	endif

#	if F_QSI == ON
		uchar	qsi_get_facility_ie				();
		void	qsi_get_next_fac_instance		();
		void	ns_pr_ss_qsi_facility_start		();
		uchar	ns_pr_ss_qsi_start_comp			();
#	endif

#endif

/*--------------------------------------------------------------------------*/

		/* LISTS OF CODE-STRING ASSOCIATIONS */

			/* BOOLEAN type */

CONST_ARRAY struct code_text NS_SS_BOOLEAN_TEXT[] = {
	{TRUE,					"TRUE"},
	{FALSE,					"FALSE"},

	{0,						"NONAME"}
};

			/* component tag */

CONST_ARRAY struct code_text NS_SS_COMPONENT_TAG_TEXT[] = {
	{FAC_INVOKE,			"Invokecomponent"},
	{FAC_RETURN_RESULT,		"ReturnResultcomponent"},
	{FAC_RETURN_ERROR,		"ReturnErrorcomponent"},
	{FAC_REJECT,			"Rejectcomponent"},

	{0,						"NONAME"}
};

#if F_QSI == ON		/* Q-SIG specific parameters in Facility IE */

		/* Type of APDU (ComponentPart is a CHOICE) */

CONST_ARRAY struct code_text NS_SS_QSI_APDU_TYPE_TEXT[] = {
	{QSI_ROSE_APDU_TAG,		"RoseAPDU"},
	{QSI_DSE_APDU_TAG,		"DseAPDU"},

	{0,						"NONAME"}
};

		/* Type of DseAPDU */

CONST_ARRAY struct code_text NS_SS_QSI_DSE_APDU_TYPE_TEXT[] = {
	{QSI_DSE_BEGIN_PDU_TAG,			"DialogBeginPdu"},
	{QSI_DSE_END_PDU_TAG,			"DialogEndPdu"},
	{QSI_DSE_CONTINUE_PDU_TAG,		"DialogContinuePdu"},
	{QSI_DSE_ABORT_PDU_TAG,			"DialogAbortPdu"},

	{0,								"NONAME"}
};

#endif

			/* error value in ReturnErrorComponent */

CONST_ARRAY struct code_text NS_SS_ERROR_VAL_TEXT[] = {

#	if NS_SS_CUG == ON		/* Closed User Group SS supported */
		{SS_ERR_CUG_INV_OR_UNREG_INDEX,		"invalid or unregistered CUG index"},
		{SS_ERR_CUG_RQ_SRV_VIOL_CONSTR,		"requested service violates CUG Constraints"},
		{SS_ERR_CUG_OUT_CALL_BARRED,		"outgoing calls barred within CUG"},
		{SS_ERR_CUG_INC_CALL_BARRED,		"incoming calls barred within CUG"},
		{SS_ERR_CUG_USER_NOT_MEMBER,		"user not member of CUG"},
		{SS_ERR_CUG_FAC_SUB_CL_INCONS,		"inconsistency in facility and subscriber class"},
#	endif

#	if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
		{SS_ERR_AOC_NO_CH_INF_AVAIL,		"no charging info available"},
#	endif

#	if NS_SS_DIVERSION == ON /* Diversion SS supported */
		{SS_ERR_INV_DIVERTED_TO_NB,			"invalid diverted-to number"},
		{SS_ERR_DIV_SPECIAL_SERV_NB,		"special service number"},
		{SS_ERR_DIV_TO_SERVED_USER_NB,		"diversion to served-user number"},
		{SS_ERR_DIV_INC_CALL_ACC,			"incoming call accepted"},
		{SS_ERR_DIV_NB_EXCEEDED,			"number of diversions exceeded"},
		{SS_ERR_DIV_NOT_ACTIVATED,			"not activated"},
		{SS_ERR_DIV_RQ_ALREADY_ACC,			"request already accepted"},

#	endif

#	if NS_SS_EXPL_CHAN_RESERVATION == ON	/* Explicit Channel Reservation function supported */
		{SS_ERR_CH_RES_MX_NB_OF_RES,		"maximum nb of reservations"},
		{SS_ERR_CH_RES_NO_RES_INV_IND,		"no reservation or invalid indicator"},
		{SS_ERR_CH_RES_UNWANTED_RES,		"unwanted reservation created"},
		{SS_ERR_CH_RES_IMPLICIT_USED,		"implicit reservation used"},
#	endif

#	if NS_SS_CONFERENCE == ON	/* Conference call SS supported */
		{SS_ERR_CONF_ILL_CONF_ID,			"ill conference ID"},
		{SS_ERR_CONF_ILL_PARTY_ID,			"ill party ID"},
		{SS_ERR_CONF_PARTY_NB_EXCEED,		"number of parties exceeded"},
		{SS_ERR_CONF_NOT_ACTIVE,			"not active"},
		{SS_ERR_CONF_NOT_ALLOWED,			"not allowed"},
#	endif

#	if NS_SS_USER_USER_EXP == ON	/* explicit requests for User-to-User Signalling SS supported */
		{SS_ERR_UUS_NET_REJECT,				"rejected by the network"},
		{SS_ERR_UUS_USER_REJECT,			"rejected by the user"},
#	endif

#	if NS_SS_ECT == ON			/* Explicit Call Transfer supported */
		{SS_ERR_ECT_LK_ID_NOT_ASSIG,		"Link ID not assigned by network"},
#	endif

#	if NS_SS_CCBS == ON		/* Completion of Calls to Busy Subscriber supported */
		{SS_ERR_CCBS_INV_CALL_LK_ID,		"Invalid Call Linkage ID"},
		{SS_ERR_CCBS_INV_REFERENCE,			"Invalid CCBS Reference"},
		{SS_ERR_CCBS_LONG_DENIAL,			"long term Denial"},
		{SS_ERR_CCBS_SHORT_DENIAL,			"short term Denial"},
		{SS_ERR_CCBS_ALREADY_ACTIV,			"CCBS is already activated"},
		{SS_ERR_CCBS_ALREADY_ACCEPT,		"already accepted"},
		{SS_ERR_CCBS_OUT_QUEUE_FULL,		"outgoing CCBS Queue full"},
		{SS_ERR_CCBS_CALL_FAIL_NOT_B,		"call failure reason not busy"},
		{SS_ERR_CCBS_NOT_READY,				"not ready for call"},
		{SS_ERR_CCBS_T_LONG_DENIAL,			"private : long term Denial"},
		{SS_ERR_CCBS_T_SHORT_DENIAL,		"private : short term Denial"},

#		if F_QSI == ON	/* Q-SIG specific errors */
			{SS_ERR_QSI_CC_SHORT_REJECT,	"shortTermRejection"},
			{SS_ERR_QSI_CC_LONG_REJECT,		"longTermRejection"},
			{SS_ERR_QSI_CC_REMOTE_BUSY,		"remoteUserBusyAgain"},
			{SS_ERR_QSI_CC_FAIL_TO_MATCH,	"failureToMatch"},
			{SS_ERR_QSI_CC_FAILED_INTERW,	"failedDueToInterworking"},
#		endif
 
#	endif

#	if F_QSI == ON	/* Q-SIG specific error */
		{SS_ERR_QSI_UNSPECIFIED,			"Q-SIG unspecified"},
		{SS_ERR_QSI_TMP_NOT_AVAIL,			"Q-SIG temporarily unavailable"},
		{SS_ERR_QSI_NOT_AUTH,				"Q-SIG not authorized"},
		{SS_ERR_QSI_NOT_BUSY,				"Q-SIG Not Busy"},

#		if NS_SS_CALL_TRANSFER == ON /* Call Transfer SS supported */
			{SS_ERR_QSI_TRF_INV_NB,			"Q-SIG invalid Rerouting Number"},
			{SS_ERR_QSI_TRF_UNREC_ID,		"Q-SIG unrecognized Call Identity"},
			{SS_ERR_QSI_TRF_EST_FAIL,		"Q-SIG establishment Failure"},
#		endif

#		if NS_SS_PATH_REPLACEMENT == ON /* Path Replacement ANF supported */
			{SS_ERR_QSI_PTHR_COLLISION,		"Q-SIG collision"},
			{SS_ERR_QSI_PTHR_CR_P_UNACH,	"Q-SIG permanently unachievable"},
			{SS_ERR_QSI_PTHR_CR_T_UNACH,	"Q-SIG temporarily unachievable"},
#		endif
#	endif
 
	{SS_ERR_NOT_AVAILABLE,					"SS not available"},
	{SS_ERR_NOT_IMPLEMENTED,				"SS not implemented"},
	{SS_ERR_INVALID_SERVED_NB,				"invalid served user number"},
	{SS_ERR_INVALID_CALL_STATE,				"invalid call state"},
	{SS_ERR_SERVICE_NOT_PROVIDED,			"basic service not provided"},
	{SS_ERR_NOT_INCOMING_CALL,				"not incoming call"},
	{SS_ERR_INTERAC_NOT_ALLOWED,			"SS interaction not allowed"},
	{SS_ERR_RESOURCE_UNAVAILABLE,			"resource not available"},
	{SS_ERR_NOT_SUBSCRIBED,					"service not subscribed"},

	{0,										"NONAME"}
};

			/* Problem tag in RejectComponent */

CONST_ARRAY struct code_text NS_SS_PB_TAG_TEXT[] = {

	{REJ_INVOKE_PB_TAG,			"InvokeProblem"},
	{REJ_RET_RESULT_PB_TAG,		"ReturnResultProblem"},
	{REJ_RET_ERROR_PB_TAG,		"ReturnErrorProblem"},
	{REJ_GENERAL_PB_TAG,		"GeneralProblem"},

	{0,							"NONAME"}
};

			/* Problem identifiers for General Problem */

CONST_ARRAY struct code_text NS_SS_GENERAL_PB_VAL_TEXT[] = {

	{GEN_PB_MISTYPED_COMP,			"mistyped comp"},
	{GEN_PB_BAD_STRUCT_COMP,		"badly structured comp"},
	{GEN_PB_UNRECOGNIZED_COMP,		"unrecognized comp"},

	{0,								"NONAME"}
};

			/* Problem identifiers for Invoke Problem */

CONST_ARRAY struct code_text NS_SS_INVOKE_PB_VAL_TEXT[] = {

	{INV_PB_UNRECOGNIZED_OP,		"unrecognized operation"},
	{INV_PB_MISTYPED_ARG,			"mistyped argument"},
	{INV_PB_RESOURCE_LIMIT,			"resource limitation"},
	{INV_PB_INITIATOR_RELEASE,		"initiator releasing"},
	{INV_PB_UNRECOGNIZED_LK_ID,		"unrecognized linked ID"},
	{INV_PB_LK_RS_UNEXPECTED,		"linked response unexpected"},
	{INV_PB_UNEXPECTED_CHILD_OP,	"unexpected child operation"},
	{INV_PB_DUPLICATE,				"duplicate invocation"},

	{0,								"NONAME"}
};

			/* Problem identifiers for ReturnResult Problem */

CONST_ARRAY struct code_text NS_SS_RETRES_PB_VAL_TEXT[] = {

	{RET_RES_PB_RES_RS_UNEXPECTED,	"result response unexpected"},
	{RET_RES_PB_MISTYPED_RESULT,	"mistyped result"},
	{RET_RES_PB_UNRECOGNIZED_INV,	"unrecognized invocation"},

	{0,								"NONAME"}
};

			/* Problem identifiers for ReturnError Problem */

CONST_ARRAY struct code_text NS_SS_RETERR_PB_VAL_TEXT[] = {

	{RET_ERR_PB_ERR_RS_UNEXPECTED,	"error response unexpected"},
	{RET_ERR_PB_UNRECOGNIZED_ERR,	"unrecognized error"},
	{RET_ERR_PB_UNEXPECTED_ERR,		"unexpected error"},
	{RET_ERR_PB_MISTYPED_PARAM,		"mistyped parameter"},
	{RET_ERR_PB_UNRECOGNIZED_INV,	"unrecognized invocation"},

	{0,								"NONAME"}
};

			/* operation identifiers */

CONST_ARRAY struct code_text NS_SS_OP_VAL_TEXT[] = {

#	if NS_SS_CUG == ON		/* Closed User Group SS supported */
		{NS_OP_CUG_CALL,					"Closed User Group Call"},
#	endif

#	if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
		{NS_OP_AOC_CHARGING_RQ,				"AOC Charging Request"},
#	endif

#	if NS_SS_AOC_S == ON
		{NS_OP_AOCS_CURRENCY,				"AOC-S Currency"},
		{NS_OP_AOCS_SPECIAL_ARR,			"AOC-S Special Arr"},
#	endif

#	if NS_SS_AOC_D == ON
		{NS_OP_AOCD_CURRENCY,				"AOC-D Currency"},
		{NS_OP_AOCD_CHARGING_UNIT,			"AOC-D Charging"},
#	endif

#	if NS_SS_AOC_E == ON
		{NS_OP_AOCE_CURRENCY,				"AOC-E Currency"},
		{NS_OP_AOCE_CHARGING_UNIT,			"AOC-E Charging"},
#	endif

#	if NS_SS_DIVERSION == ON /* Diversion SS supported */
		{NS_OP_ACT_DIVERSION,				"activation Div"},
		{NS_OP_DEACT_DIVERSION,				"deactivation Div"},
		{NS_OP_ACT_STAT_NOTIF_DIV,			"activation Status Notif Div"},
		{NS_OP_DEACT_STAT_NOTIF_DIV,		"deactivation Status Notif Div"},
		{NS_OP_INTEROG_DIVERSION,			"interrogation Div"},
		{NS_OP_INTEROG_SERVED_USER_NB,		"interrogate Served User Numbers"},
		{NS_OP_DIVERSION_INFO,				"div Information"},
		{NS_OP_CALL_DEFLECTION,				"call Deflection"},
		{NS_OP_CALL_REROUTING,				"call Rerouting"},
		{NS_OP_DIVERTING_LEG_INFO_1,		"diverting Leg Info 1"},
		{NS_OP_DIVERTING_LEG_INFO_2,		"diverting Leg Info 2"},
		{NS_OP_DIVERTING_LEG_INFO_3,		"diverting Leg Info 3"},

#		if F_QSI == ON	/* Q-SIG specific operations */
			{NS_OP_QSI_ACT_DIVERSION,		"Q-SIG activate Div"},
			{NS_OP_QSI_DEACT_DIVERSION,		"Q-SIG deactivate Div"},
			{NS_OP_QSI_INTEROG_DIVERSION,	"Q-SIG interrogate Div"},
			{NS_OP_QSI_CHECK_RESTRICT,		"Q-SIG check restriction"},
			{NS_OP_QSI_CALL_REROUTING,		"Q-SIG call Rerouting"},
			{NS_OP_QSI_DIVERTING_LEG_I_1,	"Q-SIG diverting Leg Info 1"},
			{NS_OP_QSI_DIVERTING_LEG_I_2,	"Q-SIG diverting Leg Info 2"},
			{NS_OP_QSI_DIVERTING_LEG_I_3,	"Q-SIG diverting Leg Info 3"},
			{NS_OP_QSI_CFNR_DIV_LEG_FAIL,	"Q-SIG CFNR diverted Leg Failed"},

#			if (NS_SS_INTERACTIONS == ON) && ((NS_SS_CALL_OFFER == ON) || (NS_SS_CALL_INTRUSION == ON))
				{NS_OP_QSI_CFB_OVERRIDE,	"Q-SIG CFB override"},
#			endif
#		endif

#	endif

#	if F_QSI == ON	/* Q-SIG specific services */

#		if NS_SS_NAME_IDENT == ON /* Name Identification SS supported */
			{NS_OP_QSI_CALLING_NAME_ID,		"Q-SIG calling Name"},
			{NS_OP_QSI_CALLED_NAME_ID,		"Q-SIG called Name"},
			{NS_OP_QSI_CONNECTED_NAME_ID,	"Q-SIG connected Name"},
			{NS_OP_QSI_BUSY_NAME_ID,		"Q-SIG busy Name"},
#		endif

#		if NS_SS_CALL_TRANSFER == ON /* Call Transfer SS supported */
			{NS_OP_QSI_TRF_IDENTIFY,		"Q-SIG Call Transfer Identify"},
			{NS_OP_QSI_TRF_ABANDON,			"Q-SIG Call Transfer Abandon"},
			{NS_OP_QSI_TRF_INITIATE,		"Q-SIG Call Transfer Initiate"},
			{NS_OP_QSI_TRF_SETUP,			"Q-SIG Call Transfer Setup"},
			{NS_OP_QSI_TRF_ACTIVE,			"Q-SIG Call Transfer Active"},
			{NS_OP_QSI_TRF_COMPLETE,		"Q-SIG Call Transfer Complete"},
			{NS_OP_QSI_TRF_UPDATE,			"Q-SIG Call Transfer Update"},
			{NS_OP_QSI_TRF_SUBADD,			"Q-SIG Subaddress Transfer"},
#		endif

#		if NS_SS_PATH_REPLACEMENT == ON /* Path Replacement ANF supported */
			{NS_OP_QSI_PTHR_PROPOSE,		"Q-SIG Path Replace Propose"},
			{NS_OP_QSI_PTHR_SETUP,			"Q-SIG Path Replace Setup"},
			{NS_OP_QSI_PTHR_RETAIN,			"Q-SIG Path Replace Retain"},
#		endif

#		if NS_SS_CALL_OFFER == ON /* Call Offer SS supported */
			{NS_OP_QSI_CO_REQUEST,			"Q-SIG Call Offer Request"},
#		endif

#		if (NS_SS_CALL_OFFER == ON) || (NS_SS_DO_NOT_DISTURB == ON) || (NS_SS_CALL_INTRUSION == ON)
			{NS_OP_QSI_PATH_RETAIN,			"Q-SIG Path Retain"},
			{NS_OP_QSI_SERVICE_AVAIL,		"Q-SIG Service Available"},
#		endif

#		if NS_SS_DO_NOT_DISTURB == ON /* Do Not Disturb SS supported */
			{NS_OP_QSI_DND_ACTIVATE,		"Q-SIG do not disturb activate"},
			{NS_OP_QSI_DND_DEACTIVATE,		"Q-SIG do not disturb deactivate"},
			{NS_OP_QSI_DND_INTERROGATE,		"Q-SIG do not disturb interrogate"},
			{NS_OP_QSI_DND_OVERRIDE,		"Q-SIG do not disturb override"},
			{NS_OP_QSI_DND_OVER_EXEC,		"Q-SIG do not disturb ovr execute"},
#		endif

#		if NS_SS_CALL_INTRUSION == ON	/* Call intrusion SS supported */
			{NS_OP_QSI_CI_RQ,				"Q-SIG call intrusion Request"},
			{NS_OP_QSI_CI_GET_CIPL,			"Q-SIG call intrusion GetCIPL"},
			{NS_OP_QSI_CI_ISOLATE,			"Q-SIG call intrusion Isolate"},
			{NS_OP_QSI_CI_FORCED_REL,		"Q-SIG call intrusion ForcedRelease"},
			{NS_OP_QSI_CI_WOB_RQ,			"Q-SIG call intrusion WOBRequest"},
			{NS_OP_QSI_CI_COMPLETED,		"Q-SIG call intrusion Completed"},
#		endif

#	endif

#	if NS_SS_EXPL_CHAN_RESERVATION == ON	/* Explicit Channel Reservation function supported */
		{NS_OP_EXP_CH_RES_CREATE,			"ExplicitReservationCreationControl"},
		{NS_OP_EXP_CH_RES_MANAGE,			"ExplicitReservationManagement"},
		{NS_OP_EXP_CH_RES_CANCEL,			"ExplicitReservationCancel"},
#	endif

#	if NS_SS_3_PARTY == ON		/* Three-Party SS supported */
		{NS_OP_3_PARTY_BEGIN,				"Begin3PTY"},
		{NS_OP_3_PARTY_END,					"End3PTY"},
#	endif

#	if NS_SS_CONFERENCE == ON	/* Conference call SS supported */
		{NS_OP_CONF_BEGIN,					"begin CONF"},
		{NS_OP_CONF_ADD,					"add CONF"},
		{NS_OP_CONF_SPLIT,					"split CONF"},
		{NS_OP_CONF_DROP,					"drop CONF"},
		{NS_OP_CONF_ISOLATE,				"isolate CONF"},
		{NS_OP_CONF_REATTACH,				"reattach CONF"},
		{NS_OP_CONF_PARTY_DISC,				"party DISC"},
#	endif

#	if NS_SS_USER_USER_EXP == ON	/* explicit requests for User-to-User Signalling SS supported */
		{NS_OP_UUS_RQ,						"UUS Request"},
#	endif

#	if NS_SS_ECT == ON			/* Explicit Call Transfer supported */
		{NS_OP_ECT_EXECUTE,					"ECT Execute"},
		{NS_OP_ECT_EXP_EXECUTE,				"Explicit ECT Execute"},
		{NS_OP_ECT_RQ_SUBADD,				"Request Subaddress"},
		{NS_OP_ECT_SUBADD_TRANSF,			"Subaddress Transfer"},
		{NS_OP_ECT_LINK_ID_RQ,				"ECT Link Id Request"},
		{NS_OP_ECT_INFORM,					"ECT Inform"},
		{NS_OP_ECT_LOOP_TEST,				"ECT Loop Test"},
#	endif

#	if NS_SS_MALICIOUS_CALL_ID == ON	/* Malicious Call ID SS supported */
		{NS_OP_MCID_RQ,						"Malicious Call ID Request"},
#	endif

#	if NS_SS_FREEPHONE == ON		/* Freephone supported */
		{NS_OP_FPH_CALL,					"Call Freephone"},
		{NS_OP_FPH_MONITOR_T,				"Monitor-T-Freephone"},
		{NS_OP_FPH_FREE_T,					"Free-T-Freephone"},
		{NS_OP_FPH_CALL_T,					"Call-T-Freephone"},
#	endif

#	if NS_SS_CCBS == ON		/* Completion of Calls to Busy Subscriber supported */
		{NS_OP_CCBS_CALL_INFO_RETAIN,		"CallInfoRetain"},
		{NS_OP_CCBS_RQ,						"CCBSRequest"},
		{NS_OP_CCBS_DEACTIVATE,				"CCBSDeactivate"},
		{NS_OP_CCBS_INTERROGATE,			"CCBSInterrogate"},
		{NS_OP_CCBS_ERASE,					"CCBSErase"},
		{NS_OP_CCBS_REMOTE_U_FREE,			"CCBSRemoteUserFree"},
		{NS_OP_CCBS_CALL,					"CCBSCall"},
		{NS_OP_CCBS_STATUS_RQ,				"CCBSStatusRequest"},
		{NS_OP_CCBS_B_FREE,					"CCBSBFree"},
		{NS_OP_CCBS_ERASE_CALL_LK_ID,		"EraseCallLinkageId"},
		{NS_OP_CCBS_STOP_ALERTING,			"CCBSStopAlerting"},
		{NS_OP_CCBS_T_RQ,					"CCBS-T-Request"},
		{NS_OP_CCBS_T_CALL,					"CCBS-T-Call"},
		{NS_OP_CCBS_T_SUSPEND,				"CCBS-T-Suspend"},
		{NS_OP_CCBS_T_RESUME,				"CCBS-T-Resume"},
		{NS_OP_CCBS_T_REMOTE_FREE,			"CCBS-T-RemoteUserFree"},
		{NS_OP_CCBS_T_AVAILABLE,			"CCBS-T-Available"},

#		if F_QSI == ON	/* Q-SIG specific operations */
			{NS_OP_QSI_CCBS_RQ,				"CcbsRequest"},
			{NS_OP_QSI_CCNR_RQ,				"CcnrRequest"},
			{NS_OP_QSI_CC_CANCEL,			"CcCancel"},
			{NS_OP_QSI_CC_EXEC_POSSIBLE,	"CcExecPossible"},
			{NS_OP_QSI_CC_PATH_RESERVE,		"CcPathReserve"},
			{NS_OP_QSI_CC_RINGOUT,			"CcRingout"},
			{NS_OP_QSI_CC_SUSPEND,			"CcSuspend"},
			{NS_OP_QSI_CC_RESUME,			"CcResume"},
#	endif

#	endif

#if NS_SS_INTERACTIONS == ON	/* Supplementary service interactions */
		{NS_OP_INTERACT_ID_OF_CHARGE,		"IdentificationOfCharge"},
		{NS_OP_INTERACT_ID_CONFEREE,		"IdentifyConferee"},
		{NS_OP_INTERACT_UUS_RQ,				"UUSRequest"},
#endif

	{0,										"NONAME"}
};

			/* BasicService values inside operation data */

CONST_ARRAY struct code_text NS_SS_BASIC_SERVICE_TEXT[] = {

	{NS_SS_BASIC_SPEECH,				"speech"},
	{NS_SS_BASIC_UNRESTR_DIG_INFO,		"unrestricted dig info"},
	{NS_SS_BASIC_AUDIO_3K1HZ,			"audio 3k1Hz"},
	{NS_SS_BASIC_UNR_D_INFO_TONE_AN,	"unrestr dig info tones + announc"},
	{NS_SS_BASIC_TELEPHONY_3K1HZ,		"telephony 3k1Hz"},
	{NS_SS_BASIC_TELETEX,				"teletex"},
	{NS_SS_BASIC_TELEFAX_GROUP4_CL1,	"telefax 4 class1"},
	{NS_SS_BASIC_VIDEOTEX_SYNT_BASE,	"videotex syntax based"},
	{NS_SS_BASIC_VIDEO_TELEPHONY,		"video telephony"},
	{NS_SS_BASIC_TELEFAX_GROUP2_3,		"telefax Group2-3"},
	{NS_SS_BASIC_TELEPHONY_7KHZ,		"telephony 7kHz"},
	{NS_SS_BASIC_ALL_SERVICES,			"allServices"},

	{0,									"NONAME"}
};

#if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)	/* AOC service supported{ */

			/* ChargingCase in AOC Charging Request operation */

CONST_ARRAY struct code_text NS_AOC_CHARGING_CASE_TEXT[] = {

	{NS_AOC_CHARGING_DURING_CALL,	"during a call"},
	{NS_AOC_CHARGING_CALL_END,		"at the end of a call"},
	{NS_AOC_CHARGING_CALL_SETUP,	"at call set-up"},

	{0,								"NONAME"}
};

			/* type of RESULT in AOC Charging Request operation */

CONST_ARRAY struct code_text NS_AOC_CHARGING_RQ_RES_TEXT[] = {

	{NS_AOCS_SPECIAL_ARR_INFO,		"AOCS special arr info"},
	{NS_AOCS_CURRENCY_INFO_RQ,		"AOCS currency info list"},
	{NS_AOC_CHARGING_INFO_FOLLOWS,	"charging info follows"},

	{0,								"NONAME"}
};

#if NS_SS_AOC_S == ON

			/* type of ARGUMENT in AOCS Currency operation */

CONST_ARRAY struct code_text NS_AOCS_CUR_ARG_TYPE_TEXT[] = {

	{NS_AOCS_CURRENCY_INFO,				"Currency Info List"},
	{NS_AOCS_CHARG_NOT_AVAIL,       	"charge not available"},

	{0,									"NONAME"}
};

			/* type of ARGUMENT in AOCS Special Arr operation */

CONST_ARRAY struct code_text NS_AOCS_SPEC_ARR_TYPE_TEXT[] = {

	{NS_AOCS_SP_ARR_INFO,               "Special Arr Info"},
	{NS_AOCS_SP_ARR_CHARG_NOT_AVAIL,	"charge not available"},

	{0,									"NONAME"}
};

#endif 

#if NS_SS_AOC_D == ON

			/* type of ARGUMENT in AOCD Currency operation */

CONST_ARRAY struct code_text NS_AOCD_CUR_ARG_TYPE_TEXT[] = {

	{NS_AOCD_CURR_FREE_OF_CHARGE,		"free of charge"},
	{NS_AOCD_SPECIFIC_CURRENCY,			"specific currency"},
	{NS_AOCD_CHARGE_NOT_AVAILABLE,		"charge not available"},

	{0,									"NONAME"}
};

			/* type of ARGUMENT in AOCD ChargingUnit operation */

CONST_ARRAY struct code_text NS_AOCD_CH_U_ARG_TYPE_TEXT[] = {

	{NS_AOCD_FREE_OF_CHARGE,			"free of charge"},
	{NS_AOCD_SPECIFIC_CHARGING_UNIT,	"specific charging units"},
	{NS_AOCD_CHARGING_NOT_AVAILABLE,	"charge not available"},

	{0,									"NONAME"}
};

			/* AOCD Billing ID */

CONST_ARRAY struct code_text NS_AOCD_BILL_ID_TEXT[] = {

	{255,								"no Billing ID"},
	{NS_AOCD_BILL_ID_REVERSE,			"reverse charging"},
	{NS_AOCD_BILL_ID_CREDIT_CARD,		"credit card charging"},
	{NS_AOCD_BILL_ID_NORMAL,			"normal charging"},

	{0,									"NONAME"}
};

#endif

#if NS_SS_AOC_E == ON

			/* type of ARGUMENT in AOCE Currency operation */

CONST_ARRAY struct code_text NS_AOCE_CUR_ARG_TYPE_TEXT[] = {

	{NS_AOCE_CURR_FREE_OF_CHARGE,		"free of charge"},
	{NS_AOCE_SPECIFIC_CURRENCY,			"specific currency"},
	{NS_AOCE_CHARGE_NOT_AVAILABLE,		"charge not available"},

	{0,									"NONAME"}
};

			/* type of ARGUMENT in AOCE ChargingUnit operation */

CONST_ARRAY struct code_text NS_AOCE_CH_U_ARG_TYPE_TEXT[] = {

	{NS_AOCE_FREE_OF_CHARGE,			"free of charge"},
	{NS_AOCE_SPECIFIC_CHARGING_UNIT,	"specific charging units"},
	{NS_AOCE_CHARGING_NOT_AVAILABLE,	"charge not available"},

	{0,									"NONAME"}
};

			/* AOCE Billing ID */

CONST_ARRAY struct code_text NS_AOCE_BILL_ID_TEXT[] = {

	{255,								"no Billing ID"},
	{NS_AOCE_BILL_ID_REVERSE,			"reverse charging"},
	{NS_AOCE_BILL_ID_CREDIT_CARD,		"credit card charging"},
	{NS_AOCE_BILL_ID_FORWARD_UNC,		"call forwarding unconditional"},
	{NS_AOCE_BILL_ID_FORWARD_BUSY,		"call forwarding busy"},
	{NS_AOCE_BILL_ID_FORWARD_NOR,		"call forwarding no reply"},
	{NS_AOCE_BILL_ID_DEFLECTION,		"call deflection"},
	{NS_AOCE_BILL_ID_TRANSFER,			"call transfer"},
	{NS_AOCE_BILL_ID_NORMAL,			"normal charging"},

	{0,									"NONAME"}
};

#endif

#endif	/* end of AOC service supported} */

#if NS_SS_DIVERSION == ON /* Diversion SS supported{ */

			/* Diversion Procedure values */

CONST_ARRAY struct code_text NS_SS_DIV_PROCEDURE_TEXT[] = {

	{NS_SS_DIV_PROCEDURE_CFB,			"Busy (CFB)"},
	{NS_SS_DIV_PROCEDURE_CFNR,			"No Reply (CFNR)"},
	{NS_SS_DIV_PROCEDURE_CFU,			"Unconditional (CFU)"},

	{0,									"NONAME"}
};

			/* DiversionReason values */

CONST_ARRAY struct code_text NS_SS_DIV_REASON_TEXT[] = {

	{NS_SS_DIV_REASON_CFU,				"cfu"},
	{NS_SS_DIV_REASON_CFB,				"cfb"},
	{NS_SS_DIV_REASON_CFNR,				"cfnr"},
	{NS_SS_DIV_REASON_CD_ALERT,			"cdAlerting"},
	{NS_SS_DIV_REASON_CD_IMMEDIATE,		"cdImmediate"},
	{NS_SS_DIV_REASON_UNKNOWN,			"unknown"},

	{0,									"NONAME"}
};

			/* Diversion SubscriptionOption values */

CONST_ARRAY struct code_text NS_SS_DIV_SUBSCRIPTION_TEXT[] = {

	{NS_SS_DIV_SUB_NOTIF_WITHOUT_NB,	"NotificationWithoutDivertedToNr"},
	{NS_SS_DIV_SUB_NOTIF_WITH_NB,		"NotificationWithDivertedToNr"},
	{NS_SS_DIV_SUB_NO_NOTIFICATION,		"noNotification"},

	{0,									"NONAME"}
};

#endif /* end of "Diversion SS supported"} */

#if NS_SS_EXPL_CHAN_RESERVATION == ON

			/* Explicit Reservation Creation ControlOption values */

CONST_ARRAY struct code_text NS_EXP_CHAN_RES_CONTROL_TEXT[] = {

	{NS_EXP_CH_RES_OPT_WITH_IND,		"reservation with indicator"},
	{NS_EXP_CH_RES_OPT_WITHOUT_IND,		"reservation without indicator"},
	{NS_EXP_CH_RES_OPT_NO_RES,			"no reservation required"},

	{0,									"NONAME"}
};

#endif

#if NS_SS_USER_USER_EXP == ON

			/* User-to-User Service values */

CONST_ARRAY struct code_text NS_UUS_RQ_SERVICE_TEXT[] = {

	{SERVICE_1,							"Service 1"},
	{SERVICE_2,							"Service 2"},
	{SERVICE_3,							"Service 3"},

	{0,									"NONAME"}
};

#endif

#if NS_SS_ECT == ON	/* Explicit Call Transfer supported */

			/* ECT Inform status values */

CONST_ARRAY struct code_text NS_SS_ECT_INFORM_STAT_TEXT[] = {

	{NS_SS_ECT_ACTIVE,					"active"},
	{NS_SS_ECT_ALERTING,					"alerting"},

	{0,									"NONAME"}
};

			/* ECT Loop Result values */

CONST_ARRAY struct code_text NS_SS_ECT_LOOP_RESULT_TEXT[] = {

	{NS_SS_ECT_NO_LOOP,					"no loop exists"},
	{NS_SS_ECT_LOOP_SIMULT_TRF,			"simultaneous transfer"},
	{NS_SS_ECT_LOOP_INSUF_INFO,			"insufficient information"},

	{0,									"NONAME"}
};

#endif

/*--------------------------------------------------------------------------*/

Isdn_ctx_ext;

		/* print Supplementary Services data contained in SDU */

void ns_pr_ss_data_in_sdu (p_data_in, data_size, msg_code, net)
	uchar FAR				*p_data_in;			/* address of the data to print */
	ushort					data_size;			/* size of the data area */
	code_t 					msg_code;			/* primitive ID */
	uchar 					net;				/* current network */
{
	uchar FAR				*p_data;			/* address of the copy of the data to print */
	uchar					comp_tag;			/* tag of current component */
	struct code_text FAR	*p_code_text;		/* pointer to current code-text association Table */
	ns_ss_op_id_t			op_id;				/* current NS interface identifier of operation */
	ushort					comp_nb;			/* number of components in IE */
	ushort					data_sz;			/* total size of component data in IE */

#	if F_QSI == ON
		uchar				dse_comp_nb;		/* number of components in current DseAPDU */
#	endif

		/*
			Copy the data area to be analized because the analysing
			function will destroy part of the data.
		*/

	p_data = (uchar FAR *)Mem_alloc (data_size, PID_VL);
	Memcpy_far ((char FAR *)p_data, (char FAR *)p_data_in, data_size);

	switch (net) {

#		if F_ETS == ON

			case ETSI :

				Isdn_init_ets_ctx_in_co	(p_data);
				if (ets_get_facility_ie (msg_code, &comp_nb, &data_sz) == ABSENT) {

					goto _return;
				}

				break;
#		endif

#		if F_QSI == ON

			case ECMA_QSIG :

				Isdn_init_qsi_ctx_in_co	(p_data);
				if (qsi_get_facility_ie (msg_code, &comp_nb, &data_sz) == ABSENT) {

					goto _return;
				}

				break;
#		endif

		default :	/* Supplementary Services not implemented in other networks : nothing to print */

			goto _return;
	}

	fprintf (f_out, "\nSUPP SERVICES DATA :");

	while (TRUE) {	/* loop on all instances of IE */

		fprintf (f_out, "\nnumber of components : %d     total size of components : %d\n", comp_nb, data_sz);

#		if F_QSI == ON
			if (net == ECMA_QSIG) {

            		/* analyse and print Q-SIG specific beginning of Facility IE */

				dse_comp_nb = 0;	/* init dse_comp_nb for futher use */
				ns_pr_ss_qsi_facility_start (); 
			}
#		endif

		while (TRUE) {	/* loop on all components inside current IE instance */

#			if F_QSI == ON
				if (net == ECMA_QSIG) {

						/* analyse and print Q-SIG specific beginning of next component */

					if (ns_pr_ss_qsi_start_comp (&dse_comp_nb) != OK) {

						break;
					}

					if (dse_comp_nb == 0) {

						continue;	/* no more components in current APDU -> analyse next APDU (beginning of "while") */
					}

					dse_comp_nb--;		/* update number of components not yet analysed in DseAPDU */
				}
#			endif

			comp_tag = Isdn_get_ss_comp_val	(component_tag);
			fprintf (f_out, "\n  %s : ", Code_to_text (NS_SS_COMPONENT_TAG_TEXT, comp_tag));
			op_id = (ns_ss_op_id_t)~0;

			switch (comp_tag) {

				case FAC_INVOKE :

					if (Isdn_get_ss_comp_val (inv_or_lk_id_or_res_presence) == PRESENT) {

						fprintf (f_out, "-invoke ID = %d    -linked ID = %d", Isdn_get_ss_comp_val (invoke_id), Isdn_get_ss_comp_val (lk_id_or_pb_tag));

					} else {

						fprintf (f_out, "-invoke ID = %d    -NO linked ID", Isdn_get_ss_comp_val (invoke_id));
					}

					op_id = Isdn_get_ss_comp_val (op_err_pb_identifier);
					fprintf (f_out, "    -operation : %s", Code_to_text (NS_SS_OP_VAL_TEXT, op_id));
					break;

				case FAC_RETURN_RESULT :

					fprintf (f_out, "-invoke ID = %d", Isdn_get_ss_comp_val (invoke_id));
					if (Isdn_get_ss_comp_val (inv_or_lk_id_or_res_presence) == ABSENT) {

						fprintf (f_out, "    no data in RESULT");
						break;
					}

					op_id = Isdn_get_ss_comp_val (op_err_pb_identifier);
					fprintf (f_out, "    -operation : %s", Code_to_text (NS_SS_OP_VAL_TEXT, op_id));
					break;

				case FAC_RETURN_ERROR :

					fprintf (f_out, "-invoke ID = %d", Isdn_get_ss_comp_val (invoke_id));
					fprintf (f_out, "    -error = %s", Code_to_text (NS_SS_ERROR_VAL_TEXT, Isdn_get_ss_comp_val (op_err_pb_identifier)));

#					if (F_QSI == ON)	/* some errors may contain specific data in Q-SIG (matching PARAMETER clause) */
						op_id = Isdn_get_ss_comp_val (op_err_pb_identifier);
						if (op_id == SS_ERR_QSI_UNSPECIFIED) {

                        	/* error is "Diversion Unspecified" : may contain "Extension" parameter */

							if (!Isdn_ss_is_op_data ()) {

								fprintf (f_out, "\n    NO error data");

							} else {

								fprintf (f_out, "\n    error data : ");
								Isdn_get_ss_a_op_data ();
								fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							}
						}

						op_id = (ns_ss_op_id_t)~0;	/* reset 'op_id' to avoid further mis-use */
#					endif
					break;

				case FAC_REJECT :

					if (Isdn_get_ss_comp_val (inv_or_lk_id_or_res_presence) == PRESENT) {

						fprintf (f_out, "-invoke ID = %d", Isdn_get_ss_comp_val (invoke_id));

					} else {

						fprintf (f_out, "NO invoke ID");
					}

						/* set code-text pointer to Table of strings for Problem Value according to Problem type */

					switch (Isdn_get_ss_comp_val (lk_id_or_pb_tag)) {

						case REJ_GENERAL_PB_TAG :
						default :

							p_code_text = (struct code_text FAR *)NS_SS_GENERAL_PB_VAL_TEXT;
							break;

						case REJ_INVOKE_PB_TAG :

							p_code_text = (struct code_text FAR *)NS_SS_INVOKE_PB_VAL_TEXT;
							break;

						case REJ_RET_RESULT_PB_TAG :

							p_code_text = (struct code_text FAR *)NS_SS_RETRES_PB_VAL_TEXT;
							break;

						case REJ_RET_ERROR_PB_TAG :

							p_code_text = (struct code_text FAR *)NS_SS_RETERR_PB_VAL_TEXT;
							break;
					}

					fprintf (f_out, "    -Problem : type = %s    value = %s",
								Code_to_text (NS_SS_PB_TAG_TEXT, Isdn_get_ss_comp_val (lk_id_or_pb_tag)),
								Code_to_text (p_code_text, Isdn_get_ss_comp_val (op_err_pb_identifier)));
					break;
			}

			if (op_id != (ns_ss_op_id_t)~0) {	/* an operation is included in component */

				if (!Isdn_ss_is_op_data ()) {

					fprintf (f_out, "\n    NO operation data");

				} else {

					fprintf (f_out, "\n    operation data : ");
					Isdn_get_ss_a_op_data ();

						/* print data according to operation ID */

					switch (op_id) {

#						if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)
						case NS_OP_AOC_CHARGING_RQ :

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-charging case = %s",
									Code_to_text (NS_AOC_CHARGING_CASE_TEXT, Isdn_get_aoc_charg_rq_case ()));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-type of RESULT = %s   -special arr info = %u",
											Code_to_text (NS_AOC_CHARGING_RQ_RES_TEXT, Isdn_get_aoc_charg_rq_res (result_type)),
											Isdn_get_aoc_charg_rq_res (aocs_special_arr_info));

								if (Isdn_get_aoc_charg_rq_res (aocs_first_cur_info) != OFFSET_NIL) {

										/* print AOCSCurrencyInfoList */

									Isdn_set_to_aoc_ch_rq_cur_info ();
									ns_ss_pr_aocs_cur_info_list ();
								}

							}	/* end of ReturnResult component */

							break;
#						endif

#						if NS_SS_AOC_S == ON
						case NS_OP_AOCS_CURRENCY :

							fprintf (f_out, "-type of ARGUMENT = %s", Code_to_text (NS_AOCS_CUR_ARG_TYPE_TEXT, Isdn_get_aocs_cur_arg (type)));

							if (Isdn_get_aocs_cur_arg (first_cur_info) != OFFSET_NIL) {

									/* print AOCSCurrencyInfoList */

								Isdn_set_to_aocs_cur_info ();
								ns_ss_pr_aocs_cur_info_list ();
							}

							break;

						case NS_OP_AOCS_SPECIAL_ARR :

							fprintf (f_out, "-type of ARGUMENT = %s   -special arr info = %u",
								Code_to_text (NS_AOCS_SPEC_ARR_TYPE_TEXT, Isdn_get_aocs_special_arr (type)), Isdn_get_aocs_special_arr (arr_info));
							break;
#						endif

#						if NS_SS_AOC_D == ON
						case NS_OP_AOCD_CURRENCY :

							fprintf (f_out, "-type of ARGUMENT = %s   -charging type = %u",
								Code_to_text (NS_AOCD_CUR_ARG_TYPE_TEXT, Isdn_get_aocd_cur_arg (arg_type)), Isdn_get_aocd_cur_arg (type_of_charging));

							fprintf (f_out, "\n    -billing ID = %s   -amount = %lu   -multiplier = %u   -currency size = %u",
								Code_to_text (NS_AOCD_BILL_ID_TEXT, Isdn_get_aocd_cur_arg (billing_id)), Isdn_get_aocd_cur_arg (amount),
								Isdn_get_aocd_cur_arg (amount_multiplier), Isdn_get_aocd_cur_arg (currency_size));
							break;

						case NS_OP_AOCD_CHARGING_UNIT :

							fprintf (f_out, "-type of ARGUMENT = %s   -type of charging = %u   -billing ID = %s",
								Code_to_text (NS_AOCD_CH_U_ARG_TYPE_TEXT, Isdn_get_aocd_charg_u_arg (arg_type)),
								Isdn_get_aocd_charg_u_arg (type_of_charging), Code_to_text (NS_AOCD_BILL_ID_TEXT, Isdn_get_aocd_charg_u_arg (billing_id)));

							if (Isdn_get_aocd_charg_u_arg (first_recorded_unit) != OFFSET_NIL) {

									/* print RecordedUnitsList */

								Isdn_set_to_aocd_recorded_u ();
								ns_ss_pr_aoc_recorded_u_list ();
							}

							break;
#						endif

#						if NS_SS_AOC_E == ON
						case NS_OP_AOCE_CURRENCY :

							fprintf (f_out, "-type of ARGUMENT = %s   -billing ID = %s",
								Code_to_text (NS_AOCE_CUR_ARG_TYPE_TEXT, Isdn_get_aoce_cur_arg (arg_type)), Code_to_text (NS_AOCE_BILL_ID_TEXT, Isdn_get_aoce_cur_arg (billing_id)));

							fprintf (f_out, "\n    -amount = %lu   -multiplier = %u   -currency size = %u",
								Isdn_get_aoce_cur_arg (amount), Isdn_get_aoce_cur_arg (amount_multiplier),
								Isdn_get_aoce_cur_arg (currency_size));

							fprintf (f_out, "\n    -type of charging association = %u   -charge ID = %d",
								Isdn_get_aoce_cur_arg (charg_assoc_type), Isdn_get_aoce_cur_arg (charg_identifier));

							fprintf (f_out, "\n    -type of PartyNumber = %u   -type of Number = %u   -number size = %u",
								Isdn_get_aoce_cur_arg (party_nb_type), Isdn_get_aoce_cur_arg (type_of_nb),
								Isdn_get_aoce_cur_arg (nb_digits_size));
							break;

						case NS_OP_AOCE_CHARGING_UNIT :

							fprintf (f_out, "-type of ARGUMENT = %s   -billing ID = %s",
								Code_to_text (NS_AOCE_CH_U_ARG_TYPE_TEXT, Isdn_get_aoce_charg_u_arg (arg_type)), Code_to_text (NS_AOCE_BILL_ID_TEXT, Isdn_get_aoce_charg_u_arg (billing_id)));

							fprintf (f_out, "\n    -type of charging association = %u   -charge ID = %d",
								Isdn_get_aoce_charg_u_arg (charg_assoc_type), Isdn_get_aoce_charg_u_arg (charg_identifier));

							fprintf (f_out, "\n    -type of PartyNumber = %u   -type of Number = %u   -number size = %u",
								Isdn_get_aoce_charg_u_arg (party_nb_type), Isdn_get_aoce_charg_u_arg (type_of_nb),
								Isdn_get_aoce_charg_u_arg (nb_digits_size));

							if (Isdn_get_aoce_charg_u_arg (first_recorded_unit) != OFFSET_NIL) {

									/* print RecordedUnitsList */

								Isdn_set_to_aoce_recorded_u ();
								ns_ss_pr_aoc_recorded_u_list ();
							}

							break;
#						endif

#						if NS_SS_CUG == ON		/* Closed User Group SS supported */
						case NS_OP_CUG_CALL :

							fprintf (f_out, "-outgoingAccessRequest = %s   -CUG Index = %u",
								Code_to_text (NS_SS_BOOLEAN_TEXT, Isdn_get_cug_call_arg (out_access_rq)), Isdn_get_cug_call_arg (cug_index));
							break;
#						endif

#						if F_QSI == ON	/* Q-SIG specific SS{ */

#						if NS_SS_NAME_IDENT == ON	/* Name Identification SS supported */

						case NS_OP_QSI_CALLING_NAME_ID :	/* calling Name */
						case NS_OP_QSI_CALLED_NAME_ID :	/* called Name */
						case NS_OP_QSI_CONNECTED_NAME_ID :	/* connected Name */
						case NS_OP_QSI_BUSY_NAME_ID :	/* busy Name */

							fprintf (f_out, "-type of Name = %u   -characterSet = %u   -name size = %u   -extension size = %u",
								Isdn_get_qsi_name_ident (name_type), Isdn_get_qsi_name_ident (name_character),
								Isdn_get_qsi_name_ident (name_sz), Isdn_get_qsi_name_ident (extension_size));
							break;
#						endif

#						if NS_SS_CALL_TRANSFER == ON /* Call Transfer SS supported */

						case NS_OP_QSI_TRF_IDENTIFY :	/* CallTransferIdentify */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-call identity size = %u   -extension size = %u",
									Isdn_get_qsi_trf_ident_res (call_identity_size), Isdn_get_qsi_trf_ident_res (extension_size));

								fprintf (f_out, "\n    rerouting Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_trf_ident_res (rerout_party_nb_type), Isdn_get_qsi_trf_ident_res (rerout_type_of_nb),
									Isdn_get_qsi_trf_ident_res (rerout_nb_size));
							}

							break;

						case NS_OP_QSI_TRF_ABANDON :	/* CallTransferAbandon */

							fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							break;

						case NS_OP_QSI_TRF_ACTIVE :	/* CallTransferActive */

							fprintf (f_out, "connected address : -type of PresentedAddressScreened = %u   -Screening indicator = %u",
								Isdn_get_qsi_trf_active_arg (presented_add_type), Isdn_get_qsi_trf_active_arg (screening_ind));

							fprintf (f_out, "\n    -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_qsi_trf_active_arg (party_nb_type), Isdn_get_qsi_trf_active_arg (type_of_nb),
								Isdn_get_qsi_trf_active_arg (number_digits_sz));

							fprintf (f_out, "\n    -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_qsi_trf_active_arg (sub_add_type), Isdn_get_qsi_trf_active_arg (sub_add_odd_count),
								Isdn_get_qsi_trf_active_arg (sub_address_sz));

							fprintf (f_out, "\n    -IE size = %u   -extension size = %u",
								Isdn_get_qsi_trf_active_arg (qsig_ie_sz), Isdn_get_qsi_trf_active_arg (extension_size));

							fprintf (f_out, "\n    -type of Name = %u   -characterSet = %u   -name size = %u",
								Isdn_get_qsi_trf_active_arg (name_type), Isdn_get_qsi_trf_active_arg (name_character),
								Isdn_get_qsi_trf_active_arg (name_sz));
							break;

						case NS_OP_QSI_TRF_COMPLETE :	/* CallTransferComplete */

							fprintf (f_out, "-end designation = %u   -call status = %u",
								Isdn_get_qsi_trf_complete_arg (end_designation), Isdn_get_qsi_trf_complete_arg (call_status));

							fprintf (f_out, "\n    redirection number : -type of PresentedNumberScreened = %u   -Screening indicator = %u",
								Isdn_get_qsi_trf_complete_arg (presented_nb_type), Isdn_get_qsi_trf_complete_arg (screening_ind));

							fprintf (f_out, "\n    -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_qsi_trf_complete_arg (party_nb_type), Isdn_get_qsi_trf_complete_arg (type_of_nb),
								Isdn_get_qsi_trf_complete_arg (number_digits_sz));

							fprintf (f_out, "\n    -IE size = %u   -extension size = %u",
								Isdn_get_qsi_trf_complete_arg (qsig_ie_sz), Isdn_get_qsi_trf_complete_arg (extension_size));

							fprintf (f_out, "\n    -type of Name = %u   -characterSet = %u   -name size = %u",
								Isdn_get_qsi_trf_complete_arg (name_type), Isdn_get_qsi_trf_complete_arg (name_character),
								Isdn_get_qsi_trf_complete_arg (name_sz));
							break;

						case NS_OP_QSI_TRF_UPDATE :	/* CallTransferUpdate */

							fprintf (f_out, "\n    redirection number : -type of PresentedNumberScreened = %u   -Screening indicator = %u",
								Isdn_get_qsi_trf_update_arg (presented_nb_type), Isdn_get_qsi_trf_update_arg (screening_ind));

							fprintf (f_out, "\n    -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_qsi_trf_update_arg (party_nb_type), Isdn_get_qsi_trf_update_arg (type_of_nb),
								Isdn_get_qsi_trf_update_arg (number_digits_sz));

							fprintf (f_out, "\n    -type of Name = %u   -characterSet = %u   -name size = %u",
								Isdn_get_qsi_trf_update_arg (name_type), Isdn_get_qsi_trf_update_arg (name_character),
								Isdn_get_qsi_trf_update_arg (name_sz));

							fprintf (f_out, "\n    -IE size = %u   -extension size = %u",
								Isdn_get_qsi_trf_update_arg (qsig_ie_sz), Isdn_get_qsi_trf_update_arg (extension_size));
							break;

						case NS_OP_QSI_TRF_SUBADD :	/* SubaddressTransfer */

							fprintf (f_out, "redirection subaddress : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_qsi_trf_subadd_arg (sub_add_type), Isdn_get_qsi_trf_subadd_arg (sub_add_odd_count),
								Isdn_get_qsi_trf_subadd_arg (sub_address_sz));

							fprintf (f_out, "\n    -extension size = %u", Isdn_get_qsi_trf_subadd_arg (extension_size));
							break;

#						endif

#						if (NS_SS_CALL_TRANSFER == ON) || (NS_SS_PATH_REPLACEMENT == ON)

#						if NS_SS_CALL_TRANSFER == ON
						case NS_OP_QSI_TRF_INITIATE :	/* CallTransferInitiate */
#						endif

#						if NS_SS_PATH_REPLACEMENT == ON
						case NS_OP_QSI_PTHR_PROPOSE :	/* PathReplacePropose */
						case NS_OP_QSI_PTHR_RETAIN :	/* PathReplaceRetain */
#						endif

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-call identity size = %u   -extension size = %u",
									Isdn_get_qsi_trf_init_arg (call_identity_size), Isdn_get_qsi_trf_init_arg (extension_size));

								fprintf (f_out, "\n    rerouting Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_trf_init_arg (rerout_party_nb_type), Isdn_get_qsi_trf_init_arg (rerout_type_of_nb),
									Isdn_get_qsi_trf_init_arg (rerout_nb_size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							}

							break;

#						if NS_SS_CALL_TRANSFER == ON
						case NS_OP_QSI_TRF_SETUP :	/* CallTransferSetup */
#						endif

#						if NS_SS_PATH_REPLACEMENT == ON
						case NS_OP_QSI_PTHR_SETUP :	/* PathReplaceSetup */
#						endif

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-call identity size = %u   -extension size = %u",
									Isdn_get_qsi_trf_setup_arg (call_identity_size), Isdn_get_qsi_trf_setup_arg (extension_size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							}

							break;

#						endif

#						if NS_SS_CALL_OFFER == ON /* Call Offer SS supported */
						case NS_OP_QSI_CO_REQUEST :	/* CallOfferRequest */

							fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							break;
#						endif

#						if (NS_SS_CALL_OFFER == ON) || (NS_SS_DO_NOT_DISTURB == ON) || (NS_SS_CALL_INTRUSION == ON)
						case NS_OP_QSI_PATH_RETAIN :	/* PathRetain */
						case NS_OP_QSI_SERVICE_AVAIL :	/* ServiceAvailable */

							fprintf (f_out, "service list : -nb of unused bits = %u   -size = %u   -extension size = %u", Isdn_get_qsi_path_retain_arg (service_unused_bits),
								Isdn_get_qsi_path_retain_arg (service_size), Isdn_get_qsi_path_retain_arg (extension_size));
							break;
#						endif

#						if NS_SS_DO_NOT_DISTURB == ON /* Do Not Disturb SS supported */
						case NS_OP_QSI_DND_INTERROGATE :	/* doNotDisturbInterrogateQ */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "served User Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u   extension size = %u",
									Isdn_get_qsi_dnd_inter_arg (party_nb_type), Isdn_get_qsi_dnd_inter_arg (type_of_nb),
									Isdn_get_qsi_dnd_inter_arg (nb_size), Isdn_get_qsi_dnd_inter_arg (extension_size));
								break;
							}
								/* RESULT is the same as in doNotDisturbActivateQ operation -> process in next 'case' */

						case NS_OP_QSI_DND_ACTIVATE :	/* doNotDisturbActivateQ */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-basic service = %u   -extension size = %u",
									Isdn_get_qsi_dnd_activ_arg (basic_service), Isdn_get_qsi_dnd_activ_arg (extension_size));

								fprintf (f_out, "\n    served User Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_dnd_activ_arg (party_nb_type), Isdn_get_qsi_dnd_activ_arg (type_of_nb),
									Isdn_get_qsi_dnd_activ_arg (nb_size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-extension size = %u   ", Isdn_get_qsi_dnd_activ_res (extension_size));

								if (Isdn_get_qsi_dnd_activ_res (status_offset) == OFFSET_NIL) {

									fprintf (f_out, "No status");	/* no status in RESULT */
									break;
								}

								fprintf (f_out, "-status :");	/* status is present in RESULT */
								Isdn_set_to_qsi_first_dnd_stat ();	/* get first instance location */
								while (TRUE) {	/* scan list of instances in status */

									fprintf (f_out, "\n    -basic service = %u   -protection level = %u",
										Isdn_get_qsi_dnd_status (basic_service), Isdn_get_qsi_dnd_status (protect_level));

									if (Isdn_get_qsi_dnd_status (next_instance) == OFFSET_NIL) {

										break;	/* it is the last instance in status */
									}

									Isdn_set_to_qsi_next_dnd_stat ();	/* get next instance location */
								}
							}

							break;

						case NS_OP_QSI_DND_OVERRIDE :	/* doNotDisturbOverrideQ */

							fprintf (f_out, "-capability level = %u   -extension size = %u",
								Isdn_get_qsi_dnd_over_arg (capability_level), Isdn_get_qsi_dnd_over_arg (extension_size));
							break;

						case NS_OP_QSI_DND_DEACTIVATE :	/* doNotDisturbDeactivateQ */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-basic service = %u   -extension size = %u",
									Isdn_get_qsi_dnd_activ_arg (basic_service), Isdn_get_qsi_dnd_activ_arg (extension_size));

								fprintf (f_out, "\n    served User Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_dnd_activ_arg (party_nb_type), Isdn_get_qsi_dnd_activ_arg (type_of_nb),
									Isdn_get_qsi_dnd_activ_arg (nb_size));
								break;
							}
								/* RESULT is the same as in doNotDisturbOvrExecuteQ operation -> process in next 'case' */

						case NS_OP_QSI_DND_OVER_EXEC :	/* doNotDisturbOvrExecuteQ */

							fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							break;
#						endif

#						if NS_SS_CALL_INTRUSION == ON	/* Call intrusion SS supported */
						case NS_OP_QSI_CI_RQ :	/* callIntrusionRequest */

							if (comp_tag == FAC_INVOKE) { /* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-capability level = ");

							} else { /* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-unwanted user status = ");
							}

							fprintf (f_out, "%u   -extension size = %u", Isdn_get_qsi_ci_request (level_or_status), Isdn_get_qsi_ci_request (extension_size));
							break;

						case NS_OP_QSI_CI_GET_CIPL :	/* callIntrusionGetCIPL */

							if (comp_tag == FAC_RETURN_RESULT) { /* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-protection level = %u   -extension size = %u",
									Isdn_get_qsi_ci_getcipl (level_or_status), Isdn_get_qsi_ci_getcipl (extension_size));
								break;
							}
								/* ARGUMENT is the same as in callIntrusionIsolate operation -> process in next 'case' */

						case NS_OP_QSI_CI_ISOLATE :	/* callIntrusionIsolate */
						case NS_OP_QSI_CI_FORCED_REL :	/* callIntrusionForcedRelease */
						case NS_OP_QSI_CI_WOB_RQ :	/* callIntrusionWOBRequest */
						case NS_OP_QSI_CI_COMPLETED :	/* callIntrusionCompleted */

							fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							break;
#						endif

#						if NS_SS_CCBS == ON		/* Call Completion SS supported */
						case NS_OP_QSI_CCBS_RQ :	/* CcbsRequest */
						case NS_OP_QSI_CCNR_RQ :	/* CcnrRequest */

							if (comp_tag == FAC_RETURN_RESULT) {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-no-path-reservation = %u   -retain-service = %u   -extension size = %u", Isdn_get_qsi_ccbs_rq_res (no_path_reservation),
									Isdn_get_qsi_ccbs_rq_res (retain_service), Isdn_get_qsi_ccbs_rq_res (extension_size));
								break;
							}
								/* Invoke component -> read operation ARGUMENT */
							fprintf (f_out, "-can-retain-service = %u   -retain-sig-connection = %u",
								Isdn_get_qsi_ccbs_rq_arg (can_retain_service), Isdn_get_qsi_ccbs_rq_arg (retain_sig_connection));

							fprintf (f_out, "\n    numberA : -type of PresentedNumber = %u  ", Isdn_get_qsi_ccbs_rq_arg (A_presented_nb_type));
								/* end of ARGUMENT is the same as in 'cases' below -> no 'break' */

						case NS_OP_QSI_CC_CANCEL :	/* CcCancel */
						case NS_OP_QSI_CC_EXEC_POSSIBLE :	/* CcExecPossible */

							if ((op_id != NS_OP_QSI_CCBS_RQ) && (op_id != NS_OP_QSI_CCNR_RQ)) {
									/* fields specific to CcCancel and CcExecPossible operations */

								fprintf (f_out, "-type of ARGUMENT = %u", Isdn_get_qsi_ccbs_rq_arg (A_presented_nb_type));
								if (Isdn_get_qsi_ccbs_rq_arg (A_presented_nb_type) != NS_QSI_CC_OPTIONAL_FULL_ARG) {
										/* type is extArg : only extension */
									fprintf (f_out, "   -extension size = %u", Isdn_get_qsi_ccbs_rq_arg (extension_size));
									break;
								}
										/* type is fullArg : all parameters are relevant */
								fprintf (f_out, "\n    numberA :");
							}

							fprintf (f_out, " -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_qsi_ccbs_rq_arg (A_party_nb_type), Isdn_get_qsi_ccbs_rq_arg (A_type_of_nb),
								Isdn_get_qsi_ccbs_rq_arg (A_number_digits_sz));

							fprintf (f_out, "\n    numberB : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_qsi_ccbs_rq_arg (B_party_nb_type), Isdn_get_qsi_ccbs_rq_arg (B_type_of_nb),
								Isdn_get_qsi_ccbs_rq_arg (B_number_digits_sz));

							fprintf (f_out, "\n    -service size = %u   -extension size = %u",
								Isdn_get_qsi_ccbs_rq_arg (service_sz), Isdn_get_qsi_ccbs_rq_arg (extension_size));

							fprintf (f_out, "\n    subaddrA : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_qsi_ccbs_rq_arg (A_sub_add_type), Isdn_get_qsi_ccbs_rq_arg (A_sub_add_odd_count),
								Isdn_get_qsi_ccbs_rq_arg (A_sub_address_sz));

							fprintf (f_out, "\n    subaddrB : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_qsi_ccbs_rq_arg (B_sub_add_type), Isdn_get_qsi_ccbs_rq_arg (B_sub_add_odd_count),
								Isdn_get_qsi_ccbs_rq_arg (B_sub_address_sz));
							break;

						case NS_OP_QSI_CC_PATH_RESERVE :	/* CcPathReserve */
						case NS_OP_QSI_CC_RINGOUT :	/* CcRingout */
						case NS_OP_QSI_CC_SUSPEND :	/* CcSuspend */
						case NS_OP_QSI_CC_RESUME :	/* CcResume */

							fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							break;
#						endif

#						endif	/* end of Q-SIG specific SS} */

#						if NS_SS_DIVERSION == ON	/* Diversion SS supported{ */
						case NS_OP_ACT_DIVERSION :	/* activation Diversion */
						case NS_OP_ACT_STAT_NOTIF_DIV :	/* activation Status Notification Diversion */

							fprintf (f_out, "-procedure = %s   -basicService = %s", Code_to_text (NS_SS_DIV_PROCEDURE_TEXT, Isdn_get_div_activation (procedure)),
								Code_to_text (NS_SS_BASIC_SERVICE_TEXT, Isdn_get_div_activation (basic_service)));

							fprintf (f_out, "\n    forwarded Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_activation (forw_party_nb_type), Isdn_get_div_activation (forw_type_of_nb),
								Isdn_get_div_activation (forw_nb_digits_size));

							fprintf (f_out, "\n    forwarded SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_div_activation (forw_sub_add_type), Isdn_get_div_activation (forw_sub_add_odd_count),
								Isdn_get_div_activation (forw_sub_address_size));

							fprintf (f_out, "\n    -type of ServedUserNr = %u   ServedUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_activation (served_user_nr_type), Isdn_get_div_activation (srv_u_party_nb_type),
								Isdn_get_div_activation (srv_u_type_of_nb), Isdn_get_div_activation (srv_u_nb_digits_size));
							break;

						case NS_OP_INTEROG_DIVERSION :	/* interrogation Diversion */

							if (comp_tag == FAC_RETURN_RESULT) {	/* ReturnResult component -> read operation RESULT */

								while (TRUE) {

									fprintf (f_out, "-procedure = %s   -basicService = %s", Code_to_text (NS_SS_DIV_PROCEDURE_TEXT, Isdn_get_div_interog_res (procedure)),
										Code_to_text (NS_SS_BASIC_SERVICE_TEXT, Isdn_get_div_interog_res (basic_service)));

									fprintf (f_out, "\n    forwarded Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
										Isdn_get_div_interog_res (forw_party_nb_type), Isdn_get_div_interog_res (forw_type_of_nb),
										Isdn_get_div_interog_res (forw_nb_digits_size));

									fprintf (f_out, "\n    forwarded SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
										Isdn_get_div_interog_res (forw_sub_add_type), Isdn_get_div_interog_res (forw_sub_add_odd_count),
										Isdn_get_div_interog_res (forw_sub_address_size));

									fprintf (f_out, "\n    -type of ServedUserNr = %u   ServedUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
										Isdn_get_div_interog_res (served_user_nr_type), Isdn_get_div_interog_res (srv_u_party_nb_type),
										Isdn_get_div_interog_res (srv_u_type_of_nb), Isdn_get_div_interog_res (srv_u_nb_digits_size));

									if (Isdn_get_div_interog_res (next_int_result) == OFFSET_NIL) {
                                    	break;
									}

									fprintf (f_out, "\n    ");
									Isdn_set_to_next_div_int_res	();
								}

								break;
							}

							/* Invoke component -> read operation ARGUMENT : same as
								in operations hereafter (process next 'case') */

						case NS_OP_DEACT_DIVERSION :	/* deactivation Diversion */
						case NS_OP_DEACT_STAT_NOTIF_DIV :	/* deactivation Status Notification Diversion */

							fprintf (f_out, "-procedure = %s   -basicService = %s", Code_to_text (NS_SS_DIV_PROCEDURE_TEXT, Isdn_get_div_deactivation (procedure)),
								Code_to_text (NS_SS_BASIC_SERVICE_TEXT, Isdn_get_div_deactivation (basic_service)));

							fprintf (f_out, "\n    -type of ServedUserNr = %u   ServedUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_deactivation (served_user_nr_type), Isdn_get_div_deactivation (srv_u_party_nb_type),
								Isdn_get_div_deactivation (srv_u_type_of_nb), Isdn_get_div_deactivation (srv_u_nb_digits_size));
							break;

						case NS_OP_INTEROG_SERVED_USER_NB :	/* interrogate Served User Numbers */

								while (TRUE) {

									fprintf (f_out, "-type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
										Isdn_get_div_interog_s_u_nb (party_nb_type), Isdn_get_div_interog_s_u_nb (type_of_nb),
										Isdn_get_div_interog_s_u_nb (nb_digits_size));

									if (Isdn_get_div_interog_s_u_nb (next_party_nb) == OFFSET_NIL) {
										break;
									}

									fprintf (f_out, "\n    ");
									Isdn_set_to_next_div_int_s_u_nb	();
								}

							break;

						case NS_OP_DIVERSION_INFO :	/* diversion Information */

							fprintf (f_out, "-diversion reason = %s   -basicService = %s", Code_to_text (NS_SS_DIV_REASON_TEXT, Isdn_get_div_info (reason)),
								Code_to_text (NS_SS_BASIC_SERVICE_TEXT, Isdn_get_div_info (basic_service)));

							fprintf (f_out, "\n    ServedUser SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_div_info (srv_u_sub_add_type), Isdn_get_div_info (srv_u_sub_add_odd_count),
								Isdn_get_div_info (srv_u_sub_address_sz));

							fprintf (f_out, "\n    Calling Add : -type of Address = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_info (calling_a_presented_type), Isdn_get_div_info (calling_party_nb_type),
								Isdn_get_div_info (calling_type_of_nb), Isdn_get_div_info (calling_number_digits_sz));

							fprintf (f_out, "\n    Calling Add : -Screening Ind = %u   -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_div_info (calling_a_screening_ind), Isdn_get_div_info (calling_sub_add_type),
								Isdn_get_div_info (calling_sub_add_odd_count), Isdn_get_div_info (calling_sub_address_sz));

							fprintf (f_out, "\n    OriginalCalledNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_info (orig_presented_nb_type), Isdn_get_div_info (orig_party_nb_type),
								Isdn_get_div_info (orig_type_of_nb), Isdn_get_div_info (orig_number_digits_sz));

							fprintf (f_out, "\n    LastDivertingNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_info (last_presented_nb_type), Isdn_get_div_info (last_party_nb_type),
								Isdn_get_div_info (last_type_of_nb), Isdn_get_div_info (last_number_digits_sz));

							fprintf (f_out, "\n    -last diverting reason = %u   -Q931 user info size = %u",
								Isdn_get_div_info (last_divert_reason), Isdn_get_div_info (q931_user_info_sz));
							break;

						case NS_OP_CALL_DEFLECTION :	/* call Deflection */

							fprintf (f_out, "-presentationAllowedDivertedToUser = %u", Isdn_get_div_deflection (pres_allow_div_to_user));

							fprintf (f_out, "\n    deflection Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_deflection (party_nb_type), Isdn_get_div_deflection (type_of_nb),
								Isdn_get_div_deflection (nb_digits_size));

							fprintf (f_out, "\n    deflection SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_div_deflection (sub_add_type), Isdn_get_div_deflection (sub_add_odd_count),
								Isdn_get_div_deflection (sub_address_size));
							break;

						case NS_OP_CALL_REROUTING :	/* call Rerouting */

							fprintf (f_out, "-rerouteing reason = %s   -counter = %u", Code_to_text (NS_SS_DIV_REASON_TEXT, Isdn_get_div_rerouteing (reason)),
								Isdn_get_div_rerouteing (counter));

							fprintf (f_out, "\n    -subscription option = %u   -Q931 IE size = %u",
								Isdn_get_div_rerouteing (subscription_option), Isdn_get_div_rerouteing (q931_ie_sz));

							fprintf (f_out, "\n    called Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_rerouteing (called_party_nb_type), Isdn_get_div_rerouteing (called_type_of_nb),
								Isdn_get_div_rerouteing (called_number_digits_sz));

							fprintf (f_out, "\n    called SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_div_rerouteing (called_sub_add_type), Isdn_get_div_rerouteing (called_sub_add_odd_count),
								Isdn_get_div_rerouteing (called_sub_address_sz));

							fprintf (f_out, "\n    LastRerouteingNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_rerouteing (last_presented_nb_type), Isdn_get_div_rerouteing (last_party_nb_type),
								Isdn_get_div_rerouteing (last_type_of_nb), Isdn_get_div_rerouteing (last_number_digits_sz));

							fprintf (f_out, "\n    Calling SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_div_rerouteing (calling_sub_add_type), Isdn_get_div_rerouteing (calling_sub_add_odd_count),
								Isdn_get_div_rerouteing (calling_sub_address_sz));
							break;

						case NS_OP_DIVERTING_LEG_INFO_1 :	/* diverting Leg Information 1 */

							fprintf (f_out, "-diversion reason = %s   -subscription option = %s", Code_to_text (NS_SS_DIV_REASON_TEXT, Isdn_get_div_leg_inf1 (reason)),
								Code_to_text (NS_SS_DIV_SUBSCRIPTION_TEXT, Isdn_get_div_leg_inf1 (subscription_option)));

							fprintf (f_out, "\n    divertedToNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_leg_inf1 (presented_nb_type), Isdn_get_div_leg_inf1 (party_nb_type),
								Isdn_get_div_leg_inf1 (type_of_nb), Isdn_get_div_leg_inf1 (number_digits_sz));
							break;

						case NS_OP_DIVERTING_LEG_INFO_2 :	/* diverting Leg Information 2 */

							fprintf (f_out, "-diversion reason = %s   -diversion counter = %u", Code_to_text (NS_SS_DIV_REASON_TEXT, Isdn_get_div_leg_inf2 (reason)),
								Isdn_get_div_leg_inf2 (counter));

							fprintf (f_out, "\n    divertingNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_leg_inf2 (div_presented_nb_type), Isdn_get_div_leg_inf2 (div_party_nb_type),
								Isdn_get_div_leg_inf2 (div_type_of_nb), Isdn_get_div_leg_inf2 (div_number_sz));

							fprintf (f_out, "\n    originalCalledNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_div_leg_inf2 (orig_presented_nb_type), Isdn_get_div_leg_inf2 (orig_party_nb_type),
								Isdn_get_div_leg_inf2 (orig_type_of_nb), Isdn_get_div_leg_inf2 (orig_number_sz));
							break;

						case NS_OP_DIVERTING_LEG_INFO_3 :	/* diverting Leg Information 3 */

							fprintf (f_out, "-presentationAllowedIndicator = %u", Isdn_get_div_leg_inf3_pres_all ());
							break;

#						if F_QSI == ON	/* Q-SIG specific operations{ */

						case NS_OP_QSI_ACT_DIVERSION :	/* activate Diversion Q */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-procedure = %s   -basicService = %s   -extension size = %u",
									Code_to_text (NS_SS_DIV_PROCEDURE_TEXT, Isdn_get_qsi_div_activate (procedure)),
									Code_to_text (NS_SS_BASIC_SERVICE_TEXT, Isdn_get_qsi_div_activate (basic_service)),
									Isdn_get_qsi_div_activate (extension_size));

								fprintf (f_out, "\n    diverted Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_activate (div_party_nb_type), Isdn_get_qsi_div_activate (div_type_of_nb),
									Isdn_get_qsi_div_activate (div_nb_digits_size));

								fprintf (f_out, "\n    diverted SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
									Isdn_get_qsi_div_activate (div_sub_add_type), Isdn_get_qsi_div_activate (div_sub_add_odd_count),
									Isdn_get_qsi_div_activate (div_sub_address_size));

								fprintf (f_out, "\n    -ServedUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_activate (srv_u_party_nb_type), Isdn_get_qsi_div_activate (srv_u_type_of_nb),
									Isdn_get_qsi_div_activate (srv_u_nb_digits_size));

								fprintf (f_out, "\n    -ActivatingUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_activate (activ_u_party_nb_type), Isdn_get_qsi_div_activate (activ_u_type_of_nb),
									Isdn_get_qsi_div_activate (activ_u_nb_digits_size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							}

							break;

						case NS_OP_QSI_INTEROG_DIVERSION :	/* interrogate Diversion Q */

							if (comp_tag == FAC_RETURN_RESULT) {	/* ReturnResult component -> read operation RESULT */

								while (TRUE) {

									fprintf (f_out, "-procedure = %s   -basicService = %s", Code_to_text (NS_SS_DIV_PROCEDURE_TEXT, Isdn_get_qsi_div_interog_res (procedure)),
										Code_to_text (NS_SS_BASIC_SERVICE_TEXT, Isdn_get_qsi_div_interog_res (basic_service)));

									fprintf (f_out, "\n    ServedUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
										Isdn_get_qsi_div_interog_res (srv_u_party_nb_type), Isdn_get_qsi_div_interog_res (srv_u_type_of_nb),
										Isdn_get_qsi_div_interog_res (srv_u_nb_digits_size));

									fprintf (f_out, "\n    divertedTo Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
										Isdn_get_qsi_div_interog_res (div_party_nb_type), Isdn_get_qsi_div_interog_res (div_type_of_nb),
										Isdn_get_qsi_div_interog_res (div_nb_digits_size));

									fprintf (f_out, "\n    divertedTo SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
										Isdn_get_qsi_div_interog_res (div_sub_add_type), Isdn_get_qsi_div_interog_res (div_sub_add_odd_count),
										Isdn_get_qsi_div_interog_res (div_sub_address_size));

									fprintf (f_out, "\n    -remoteEnabled = %u   -extension size = %u",
										Isdn_get_qsi_div_interog_res (remote_enabled), Isdn_get_qsi_div_interog_res (extension_size));

									if (Isdn_get_qsi_div_interog_res (next_int_result) == OFFSET_NIL) {
										break;
									}

									fprintf (f_out, "\n    ");
									Isdn_qsi_set_to_next_div_int_res	();
								}

								break;
							}

							/* Invoke component -> read operation ARGUMENT in last "case" (no "break") */

						case NS_OP_QSI_DEACT_DIVERSION :	/* deactivate Diversion Q */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-procedure = %s   -basicService = %s   -extension size = %u",
									Code_to_text (NS_SS_DIV_PROCEDURE_TEXT, Isdn_get_qsi_div_deactivate (procedure)),
									Code_to_text (NS_SS_BASIC_SERVICE_TEXT, Isdn_get_qsi_div_deactivate (basic_service)),
									Isdn_get_qsi_div_deactivate (extension_size));

								fprintf (f_out, "\n    -ServedUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_deactivate (srv_u_party_nb_type), Isdn_get_qsi_div_deactivate (srv_u_type_of_nb),
									Isdn_get_qsi_div_deactivate (srv_u_nb_digits_size));

								fprintf (f_out, "\n    -DeactivatingUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_deactivate (dea_u_party_nb_type), Isdn_get_qsi_div_deactivate (dea_u_type_of_nb),
									Isdn_get_qsi_div_deactivate (dea_u_nb_digits_size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							}

							break;

						case NS_OP_QSI_CHECK_RESTRICT :	/* Check Restriction */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-basicService = %s   -extension size = %u",
									Code_to_text (NS_SS_BASIC_SERVICE_TEXT, Isdn_get_qsi_div_chk_rest (basic_service)),
									Isdn_get_qsi_div_chk_rest (extension_size));

								fprintf (f_out, "\n    -ServedUser Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_chk_rest (srv_u_party_nb_type), Isdn_get_qsi_div_chk_rest (srv_u_type_of_nb),
									Isdn_get_qsi_div_chk_rest (srv_u_nb_digits_size));

								fprintf (f_out, "\n    -DivertedTo Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_chk_rest (div_party_nb_type), Isdn_get_qsi_div_chk_rest (div_type_of_nb),
									Isdn_get_qsi_div_chk_rest (div_nb_digits_size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							}

							break;

						case NS_OP_QSI_CALL_REROUTING :	/* CallRerouting */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-rerouting reason = %s   -counter = %u   -extension size = %u", Code_to_text (NS_SS_DIV_REASON_TEXT, Isdn_get_qsi_div_rerouting (reason)),
									Isdn_get_qsi_div_rerouting (counter), Isdn_get_qsi_div_rerouting (extension_size));

								fprintf (f_out, "\n    -subscription option = %u   -Q-SIG IE size = %u",
									Isdn_get_qsi_div_rerouting (subscription_option), Isdn_get_qsi_div_rerouting (qsig_ie_sz));

								fprintf (f_out, "\n    called Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_rerouting (called_party_nb_type), Isdn_get_qsi_div_rerouting (called_type_of_nb),
									Isdn_get_qsi_div_rerouting (called_number_digits_sz));

								fprintf (f_out, "\n    called SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
									Isdn_get_qsi_div_rerouting (called_sub_add_type), Isdn_get_qsi_div_rerouting (called_sub_add_odd_count),
									Isdn_get_qsi_div_rerouting (called_sub_address_sz));

								fprintf (f_out, "\n    LastReroutingNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_rerouting (last_presented_nb_type), Isdn_get_qsi_div_rerouting (last_party_nb_type),
									Isdn_get_qsi_div_rerouting (last_type_of_nb), Isdn_get_qsi_div_rerouting (last_number_digits_sz));

								fprintf (f_out, "\n    Calling SubAdd : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
									Isdn_get_qsi_div_rerouting (calling_sub_add_type), Isdn_get_qsi_div_rerouting (calling_sub_add_odd_count),
									Isdn_get_qsi_div_rerouting (calling_sub_address_sz));

								fprintf (f_out, "\n    calling Nb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u",
									Isdn_get_qsi_div_rerouting (calling_presented_nb_type), Isdn_get_qsi_div_rerouting (calling_party_nb_type),
									Isdn_get_qsi_div_rerouting (calling_type_of_nb));

								fprintf (f_out, "\n    -nb size = %u   -screening indicator = %u",
									Isdn_get_qsi_div_rerouting (calling_number_digits_sz), Isdn_get_qsi_div_rerouting (calling_screening_ind));

								fprintf (f_out, "\n    calling Name : -type of Name = %u   -CharacterSet = %u   -name size = %u",
									Isdn_get_qsi_div_rerouting (calling_name_type), Isdn_get_qsi_div_rerouting (calling_name_character),
									Isdn_get_qsi_div_rerouting (calling_name_sz));

								fprintf (f_out, "\n    originalCalledNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_qsi_div_rerouting (orig_presented_nb_type), Isdn_get_qsi_div_rerouting (orig_party_nb_type),
									Isdn_get_qsi_div_rerouting (orig_type_of_nb), Isdn_get_qsi_div_rerouting (orig_number_digits_sz));

								fprintf (f_out, "\n    redirecting Name : -CharacterSet = %u   -name size = %u",
									Isdn_get_qsi_div_rerouting (redir_name_character), Isdn_get_qsi_div_rerouting (redir_name_sz));

								fprintf (f_out, "\n    originalCalled Name : -CharacterSet = %u   -name size = %u",
									Isdn_get_qsi_div_rerouting (orig_name_character), Isdn_get_qsi_div_rerouting (orig_name_sz));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							}

							break;

						case NS_OP_QSI_DIVERTING_LEG_I_1 :	/* diverting Leg Information 1 */

							fprintf (f_out, "-diversion reason = %s   -subscription option = %s   -extension size = %u",
								Code_to_text (NS_SS_DIV_REASON_TEXT, Isdn_get_qsi_div_leg_info_1 (reason)),
								Code_to_text (NS_SS_DIV_SUBSCRIPTION_TEXT, Isdn_get_qsi_div_leg_info_1 (subscription_option)),
								Isdn_get_qsi_div_leg_info_1 (extension_size));

							fprintf (f_out, "\n    nominatedNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_qsi_div_leg_info_1 (presented_nb_type), Isdn_get_qsi_div_leg_info_1 (party_nb_type),
								Isdn_get_qsi_div_leg_info_1 (type_of_nb), Isdn_get_qsi_div_leg_info_1 (number_digits_sz));
							break;

						case NS_OP_QSI_DIVERTING_LEG_I_2 :	/* diverting Leg Information 2 */

							fprintf (f_out, "-diversion reason = %s   -counter = %u   -extension size = %u", Code_to_text (NS_SS_DIV_REASON_TEXT, Isdn_get_qsi_div_leg_info_2 (reason)),
								Isdn_get_qsi_div_leg_info_2 (counter), Isdn_get_qsi_div_leg_info_2 (extension_size));

							fprintf (f_out, "\n    divertingNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_qsi_div_leg_info_2 (div_presented_nb_type), Isdn_get_qsi_div_leg_info_2 (div_party_nb_type),
								Isdn_get_qsi_div_leg_info_2 (div_type_of_nb), Isdn_get_qsi_div_leg_info_2 (div_number_sz));

							fprintf (f_out, "\n    originalCalledNb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_qsi_div_leg_info_2 (orig_presented_nb_type), Isdn_get_qsi_div_leg_info_2 (orig_party_nb_type),
								Isdn_get_qsi_div_leg_info_2 (orig_type_of_nb), Isdn_get_qsi_div_leg_info_2 (orig_number_sz));

							fprintf (f_out, "\n    redirecting Name : -CharacterSet = %u   -name size = %u",
								Isdn_get_qsi_div_leg_info_2 (redir_name_character), Isdn_get_qsi_div_leg_info_2 (redir_name_sz));

							fprintf (f_out, "\n    originalCalled Name : -CharacterSet = %u   -name size = %u",
								Isdn_get_qsi_div_leg_info_2 (orig_name_character), Isdn_get_qsi_div_leg_info_2 (orig_name_sz));
							break;

						case NS_OP_QSI_DIVERTING_LEG_I_3 :	/* diverting Leg Information 3 */

							fprintf (f_out, "-presentation allowed indicator = %u   -extension size = %u",
								Isdn_get_qsi_div_leg_info_3 (pres_allow_ind), Isdn_get_qsi_div_leg_info_3 (extension_size));

							fprintf (f_out, "\n    redirection name : -characterSet = %u   -size = %u",
								Isdn_get_qsi_div_leg_info_3 (redir_name_character), Isdn_get_qsi_div_leg_info_3 (redir_name_sz));
							break;

						case NS_OP_QSI_CFNR_DIV_LEG_FAIL :	/* CfnrDivertedLegFailed */
#						if (NS_SS_INTERACTIONS == ON) && ((NS_SS_CALL_OFFER == ON) || (NS_SS_CALL_INTRUSION == ON))
						case NS_OP_QSI_CFB_OVERRIDE :	/* cfbOverride */
#						endif

							fprintf (f_out, "-size of transparent extension string = %u", Isdn_get_qsi_tsp_extension (size));
							break;

#						endif	/* end of Q-SIG specific operations} */

#						endif	/* end of Diversion SS supported} */

#						if NS_SS_EXPL_CHAN_RESERVATION == ON	/* Explicit Channel Reservation function supported{ */

						case NS_OP_EXP_CH_RES_CREATE :	/* ExplicitReservationCreationControl */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-control option = %s",
									Code_to_text (NS_EXP_CHAN_RES_CONTROL_TEXT, Isdn_get_chan_res_create_arg ()));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-reservation indicator = %d", Isdn_get_chan_res_create_res ());
							}

							break;

						case NS_OP_EXP_CH_RES_MANAGE :	/* ExplicitReservationManagement */
						case NS_OP_EXP_CH_RES_CANCEL :	/* ExplicitReservationCancel */

							fprintf (f_out, "-reservation indicator = %d", Isdn_get_chan_res_manage_arg ());
							break;

#						endif /* end of "Explicit Channel Reservation function supported"} */

#						if NS_SS_CONFERENCE == ON	/* Conference call SS supported{ */

						case NS_OP_CONF_BEGIN :	/* begin CONF */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-conference size = %d", Isdn_get_conf_begin_arg ());

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-conference ID = %d   -party ID = %d", Isdn_get_conf_begin_res (conf_id), Isdn_get_conf_begin_res (party_id));
							}

							break;

						case NS_OP_CONF_ADD :	/* add CONF */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-conference ID = %d", Isdn_get_conf_add_arg ());

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-party ID = %d", Isdn_get_conf_add_res ());
							}

							break;

						case NS_OP_CONF_SPLIT :	/* split CONF */

							fprintf (f_out, "-conference ID = %d   -party ID = %d", Isdn_get_conf_split_arg (conf_id), Isdn_get_conf_split_arg (party_id));
							break;

						case NS_OP_CONF_DROP :	/* drop CONF */
						case NS_OP_CONF_ISOLATE :	/* isolate CONF */
						case NS_OP_CONF_REATTACH :	/* reattach CONF */
						case NS_OP_CONF_PARTY_DISC :	/* party DISC */

#						if NS_SS_INTERACTIONS == ON
							case NS_OP_INTERACT_ID_CONFEREE :	/* IdentifyConferee */
#						endif

							fprintf (f_out, "-party ID = %d", Isdn_get_conf_other_op_arg ());
							break;

#						endif	/* end of Conference call SS supported} */

#						if NS_SS_USER_USER_EXP == ON	/* explicit requests for User-to-User Signalling SS supported{ */

						case NS_OP_UUS_RQ :	/* User-to-User Service */

#						if NS_SS_INTERACTIONS == ON
							case NS_OP_INTERACT_UUS_RQ :	/* UUSRequest */
#						endif

							fprintf (f_out, "-service = %s   -preferred = %s", Code_to_text (NS_UUS_RQ_SERVICE_TEXT, Isdn_get_uus_rq_arg (service)),
								Code_to_text (NS_SS_BOOLEAN_TEXT, Isdn_get_uus_rq_arg (preferred)));
							break;

#						endif	/* end of "explicit requests for User-to-User Signalling SS supported"} */

#						if NS_SS_ECT == ON	/* Explicit Call Transfer supported { */

						case NS_OP_ECT_EXECUTE :	/* EctExecute : empty */
						case NS_OP_ECT_RQ_SUBADD : 	/* RequestSubaddress : empty */

							break;

						case NS_OP_ECT_EXP_EXECUTE :	/* ExplicitEctExecute */

							fprintf (f_out, "-Link ID = %d", Isdn_get_ect_exp_exec_arg ());
							break;

						case NS_OP_ECT_SUBADD_TRANSF :	/* SubaddressTransfer */

							fprintf (f_out, "-type of SubAdd = %u   -OddCount = %u   -sa size = %u", Isdn_get_ect_sa_trf_arg (trf_sub_add_type),
								Isdn_get_ect_sa_trf_arg (trf_sub_add_odd_count), Isdn_get_ect_sa_trf_arg (trf_sub_address_sz));
							break;

						case NS_OP_ECT_LINK_ID_RQ :	/* EctLinkIdRequest */

							fprintf (f_out, "-Link ID = %d", Isdn_get_ect_lk_id_rq_res ());
							break;

						case NS_OP_ECT_INFORM :	/* EctInform */

							fprintf (f_out, "-status = %s", Code_to_text (NS_SS_ECT_INFORM_STAT_TEXT, Isdn_get_ect_inform_arg (status)));
							fprintf (f_out, "redirection Nb : -type of PresentedNb = %u   -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_ect_inform_arg (redir_presented_nb_type), Isdn_get_ect_inform_arg (redir_party_nb_type),
								Isdn_get_ect_inform_arg (redir_type_of_nb), Isdn_get_ect_inform_arg (redir_nb_digits_sz));
							break;

						case NS_OP_ECT_LOOP_TEST :	/* EctLoopTest */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "-Call Transfer Identity = %d", Isdn_get_ect_loop_test_arg ());

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "-Loop Result = %s", Code_to_text (NS_SS_ECT_LOOP_RESULT_TEXT, Isdn_get_ect_loop_test_res ()));
							}

							break;

#						endif	/* end of "Explicit Call Transfer supported"} */

#						if NS_SS_FREEPHONE == ON	/* Freephone supported{ */

						case NS_OP_FPH_CALL :		/* CallFPH */

							fprintf (f_out, "\n    called freephone Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_fph_call_arg (party_nb_type), Isdn_get_fph_call_arg (type_of_nb),
								Isdn_get_fph_call_arg (nb_digits_size));
							break;

						case NS_OP_FPH_MONITOR_T :	/* Monitor-T-FPH */

							fprintf (f_out, "\n    -queue identity = %u   -Q931 IE size = %u",
								Isdn_get_fph_monitor_t_arg (queue_identity), Isdn_get_fph_monitor_t_arg (q931_ie_sz));

							fprintf (f_out, "\n    servedUserDestination : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_fph_monitor_t_arg (s_u_party_nb_type), Isdn_get_fph_monitor_t_arg (s_u_type_of_nb),
								Isdn_get_fph_monitor_t_arg (s_u_nb_digits_size));
							break;

						case NS_OP_FPH_FREE_T :		/* Free-T-FPH */

							fprintf (f_out, "\n    -FPH refererence = %u   servedUserDestination : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_fph_free_t_arg (fph_reference), Isdn_get_fph_free_t_arg (s_u_party_nb_type),
								Isdn_get_fph_free_t_arg (s_u_type_of_nb), Isdn_get_fph_free_t_arg (s_u_nb_digits_size));
							break;

						case NS_OP_FPH_CALL_T :		/* Call-T-FPH */

							fprintf (f_out, "\n    -FPH refererence = %u   called freephone Nb : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_fph_call_t_arg (fph_reference), Isdn_get_fph_call_t_arg (party_nb_type),
								Isdn_get_fph_call_t_arg (type_of_nb), Isdn_get_fph_call_t_arg (nb_digits_size));
							break;

#						endif	/* end of "Freephone supported"} */

#						if NS_SS_CCBS == ON		/* Completion of Calls to Busy Subscriber supported{ */

						case NS_OP_CCBS_CALL_INFO_RETAIN :		/* CallInfoRetain */
						case NS_OP_CCBS_ERASE_CALL_LK_ID :		/* EraseCallLinkageId */

							fprintf (f_out, "\n    -call linkage ID = %u", Isdn_get_ccbs_info_ret_arg ());
							break;

						case NS_OP_CCBS_DEACTIVATE :		/* CCBSDeactivate */
						case NS_OP_CCBS_CALL :				/* CCBSCall */
						case NS_OP_CCBS_STOP_ALERTING :		/* CCBSStopAlerting */

							fprintf (f_out, "\n    -CCBS reference = %u", Isdn_get_ccbs_dea_arg ());
							break;

						case NS_OP_CCBS_RQ :	/* CCBSRequest */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "\n    -call linkage ID = %u", Isdn_get_ccbs_rq_arg ());

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "\n    -recall mode = %u   -CCBS reference = %u",
									Isdn_get_ccbs_rq_res (recall_mode), Isdn_get_ccbs_rq_res (reference));
							}

							break;

						case NS_OP_CCBS_STATUS_RQ :		/* CCBSStatusRequest */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "\n    -recall mode = %u   -CCBS reference = %u   -Q931 IE size = %u",
									Isdn_get_ccbs_stat_rq_arg (recall_mode), Isdn_get_ccbs_stat_rq_arg (reference),
									Isdn_get_ccbs_stat_rq_arg (q931_ie_sz));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "\n    -free / busy = %u", Isdn_get_ccbs_stat_rq_res ());
							}

							break;

						case NS_OP_CCBS_REMOTE_U_FREE :	/* CCBSRemoteUserFree */
						case NS_OP_CCBS_B_FREE :	/* CCBSBFree */

							fprintf (f_out, "\n    -recall mode = %u   -CCBS reference = %u   -Q931 IE size = %u",
								Isdn_get_ccbs_bfree_arg (recall_mode), Isdn_get_ccbs_bfree_arg (reference),
								Isdn_get_ccbs_bfree_arg (q931_ie_sz));

							fprintf (f_out, "\n    Nb in addressOfB : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_ccbs_bfree_arg (party_nb_type), Isdn_get_ccbs_bfree_arg (type_of_nb),
								Isdn_get_ccbs_bfree_arg (nb_digits_size));

							fprintf (f_out, "\n    SubAdd in addressOfB : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_ccbs_bfree_arg (sub_add_type), Isdn_get_ccbs_bfree_arg (sub_add_odd_count),
								Isdn_get_ccbs_bfree_arg (sub_address_size));
							break;

						case NS_OP_CCBS_ERASE :		/* CCBSErase */

							fprintf (f_out, "\n    -recall mode = %u   -CCBS reference = %u   -erase reason = %u   -Q931 IE size = %u",
								Isdn_get_ccbs_erase_arg (recall_mode), Isdn_get_ccbs_erase_arg (reference),
								Isdn_get_ccbs_erase_arg (reason), Isdn_get_ccbs_erase_arg (q931_ie_sz));

							fprintf (f_out, "\n    Nb in addressOfB : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
								Isdn_get_ccbs_erase_arg (party_nb_type), Isdn_get_ccbs_erase_arg (type_of_nb),
								Isdn_get_ccbs_erase_arg (nb_digits_size));

							fprintf (f_out, "\n    SubAdd in addressOfB : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
								Isdn_get_ccbs_erase_arg (sub_add_type), Isdn_get_ccbs_erase_arg (sub_add_odd_count),
								Isdn_get_ccbs_erase_arg (sub_address_size));
							break;

						case NS_OP_CCBS_INTERROGATE :		/* CCBSInterrogate */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "\n    -CCBS reference = %u   partyNumberOfA : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
									Isdn_get_ccbs_interog_arg (reference), Isdn_get_ccbs_interog_arg (party_nb_type),
									Isdn_get_ccbs_interog_arg (type_of_nb), Isdn_get_ccbs_interog_arg (nb_digits_size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "\n    -recall mode = %u", Isdn_get_ccbs_interog_res (recall_mode));

								if (Isdn_get_ccbs_interog_res (first_call_info) == OFFSET_NIL) {

									fprintf (f_out, "    No call detail");
									break;
								}

								fprintf (f_out, "    call detail :");

									/* print list of CallInformation instances */

								Isdn_set_to_first_ccbs_call ();
								while (TRUE) {

									fprintf (f_out, "\n    -CCBS reference = %u   -Q931 IE size = %u",
										Isdn_get_ccbs_call_info (reference), Isdn_get_ccbs_call_info (q931_ie_sz));

									fprintf (f_out, "\n    Nb in addressOfB : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
										Isdn_get_ccbs_call_info (OfB_party_nb_type), Isdn_get_ccbs_call_info (OfB_type_of_nb),
										Isdn_get_ccbs_call_info (OfB_nb_digits_size));

									fprintf (f_out, "\n    SubAdd in addressOfB : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
										Isdn_get_ccbs_call_info (OfB_sub_add_type), Isdn_get_ccbs_call_info (OfB_sub_add_odd_count),
										Isdn_get_ccbs_call_info (OfB_sub_address_size));

									fprintf (f_out, "\n    SubaddressOfA : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
										Isdn_get_ccbs_call_info (OfA_sub_add_type), Isdn_get_ccbs_call_info (OfA_sub_add_odd_count),
										Isdn_get_ccbs_call_info (OfA_sub_address_size));

									if (Isdn_get_ccbs_call_info (next_call_info) == OFFSET_NIL) {

										break;
									}

									Isdn_set_to_next_ccbs_call ();

								} /* end of loop on all CallInformation instances inside list */
							}

							break;

						case NS_OP_CCBS_T_RQ :		/* CCBS-T-Request */

							if (comp_tag == FAC_INVOKE) {	/* Invoke component -> read operation ARGUMENT */

								fprintf (f_out, "\n    -retention supported = %u   -presenattion allowed = %u   - Q931 IE size = %u",
									Isdn_get_ccbs_t_rq_arg (retention_supp), Isdn_get_ccbs_t_rq_arg (pres_allow_ind),
									Isdn_get_ccbs_t_rq_arg (q931_ie_sz));

									fprintf (f_out, "\n    Nb in destinationAddress : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
										Isdn_get_ccbs_t_rq_arg (dest_party_nb_type), Isdn_get_ccbs_t_rq_arg (dest_type_of_nb),
										Isdn_get_ccbs_t_rq_arg (dest_nb_digits_size));

									fprintf (f_out, "\n    SubAdd in destinationAddress : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
										Isdn_get_ccbs_t_rq_arg (dest_sub_add_type), Isdn_get_ccbs_t_rq_arg (dest_sub_add_odd_count),
										Isdn_get_ccbs_t_rq_arg (dest_sub_address_size));

									fprintf (f_out, "\n    Nb in originatingAddress : -type of PartyNb = %u   -type of Nb = %u   -nb size = %u",
										Isdn_get_ccbs_t_rq_arg (orig_party_nb_type), Isdn_get_ccbs_t_rq_arg (orig_type_of_nb),
										Isdn_get_ccbs_t_rq_arg (orig_nb_digits_size));

									fprintf (f_out, "\n    SubAdd in originatingAddress : -type of SubAdd = %u   -OddCount = %u   -sa size = %u",
										Isdn_get_ccbs_t_rq_arg (orig_sub_add_type), Isdn_get_ccbs_t_rq_arg (orig_sub_add_odd_count),
										Isdn_get_ccbs_t_rq_arg (orig_sub_address_size));

							} else {	/* ReturnResult component -> read operation RESULT */

								fprintf (f_out, "\n    -retention supported = %u", Isdn_get_ccbs_t_rq_res ());
							}

							break;

#						endif	/* end of "Completion of Calls to Busy Subscriber supported"} */

#						if NS_SS_INTERACTIONS == ON
#							if (NS_SS_AOC_E == ON)	&& ((NS_SS_DIVERSION == ON) || (NS_SS_ECT == ON))

								case NS_OP_INTERACT_ID_OF_CHARGE :	/* IdentificationOfCharge */

									fprintf (f_out, "\n    -type of charging association = %u   -charge ID = %d",
										Isdn_get_id_of_charge_arg (charg_assoc_type), Isdn_get_id_of_charge_arg (charg_identifier));

									fprintf (f_out, "\n    -type of PartyNumber = %u   -type of Number = %u   -number size = %u",
										Isdn_get_id_of_charge_arg (party_nb_type), Isdn_get_id_of_charge_arg (type_of_nb),
										Isdn_get_id_of_charge_arg (nb_digits_size));
									break;
#							endif
#						endif

					}
				}
			}

			if (!Isdn_ss_is_next_component ()) {

				break;		/* no more component in current IE instance -> next instance if any */
			}

			Isdn_get_ss_next_component ();


		}	/* end of loop on all components inside current IE instance */

		switch (net) {	/* get next instance of Facility IE if any */

#			if F_ETS == ON

				case ETSI :

					ets_get_next_fac_instance (msg_code);
					if (ets_get_facility_ie (msg_code, &comp_nb, &data_sz) == ABSENT) {

						goto _return;		/* no more IE instance */
					}

					break;
#			endif

#			if F_QSI == ON

				case ECMA_QSIG :

					qsi_get_next_fac_instance (msg_code);
					if (qsi_get_facility_ie (msg_code, &comp_nb, &data_sz) == ABSENT) {

						goto _return;		/* no more IE instance */
					}

					break;
#			endif

			default :	/* Supplementary Services not implemented in other networks : nothing to print */

				goto _return;
		}

	}	/* end of loop on all instances of IE */

_return:

	Mem_free ((char FAR *)p_data, PID_VL);

}

#if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)	/* AOC service supported{ */

void ns_ss_pr_aocs_cur_info_list ()
{

		/* loop on all AOCSCurrencyInfo instances inside list */

	while (TRUE) {

		fprintf (f_out, "\n      -charged item = %u   -currency info type = %u",
			Isdn_get_aocs_cur_info (charged_item), Isdn_get_aocs_cur_info (currency_info_type));

		fprintf (f_out, "\n      -special charging code = %u   -amount = %lu   -multiplier = %u   -volume unit or charge type = %u",
			Isdn_get_aocs_cur_info (special_charging_code), Isdn_get_aocs_cur_info (amount),
			Isdn_get_aocs_cur_info (amount_multiplier), Isdn_get_aocs_cur_info (volume_unit_or_charg_type));

		fprintf (f_out, "\n      -time unit = %lu   -scale = %u   -granularity time unit = %lu   -granularity scale = %u   -currency size = %u",
			Isdn_get_aocs_cur_info (length_of_time_unit), Isdn_get_aocs_cur_info (scale),
			Isdn_get_aocs_cur_info (granularity_lg_time_u), Isdn_get_aocs_cur_info (granularity_scale),
			Isdn_get_aocs_cur_info (currency_size));

		if (Isdn_get_aocs_cur_info (next_currency_info) == OFFSET_NIL) {

			return;
		}

		Isdn_set_to_next_aoc_cur_info ();

	} /* end of loop on all AOCSCurrencyInfo instances inside list */
}

#endif	/* end of AOC Service supported} */

#if (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)	/* AOC-D or AOC-E SS supported{ */

void ns_ss_pr_aoc_recorded_u_list ()
{

		/* loop on all RecordedUnits instances inside list */

	while (TRUE) {

		fprintf (f_out, "\n        -type of unit = %u   -number of units = %lu",
			Isdn_get_aoc_recorded_u (type_of_unit), Isdn_get_aoc_recorded_u (number_of_units));

		if (Isdn_get_aoc_recorded_u (next_unit_info) == OFFSET_NIL) {

			return;
		}

		Isdn_set_to_next_aoc_rec_u ();

	} /* end of loop on all RecordedUnits instances inside list */
}

#endif	/* end of AOC-D or AOC-E SS supported} */

#if F_ETS == ON

uchar ets_get_facility_ie (msg_code, p_comp_nb, p_data_sz)
	code_t			msg_code;			/* primitive ID */
	ushort FAR		*p_comp_nb;			/* pointer to number of components to be returned */
	ushort FAR		*p_data_sz;			/* pointer to size of data to be returned */
{

	switch (msg_code) {

			case NS_CONN_IN :

				if (Get_ie_ets (conn_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(conn_in, facility);
					*p_comp_nb = Isdn_get_val_ets (conn_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (conn_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CONN_CO :

				if (Get_ie_ets (conn_co, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(conn_co, facility);
					*p_comp_nb = Isdn_get_val_ets (conn_co, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (conn_co, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CLEAR_IN :

				if (Get_ie_ets (clear_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(clear_in, facility);
					*p_comp_nb = Isdn_get_val_ets (clear_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (clear_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CLEAR_CO :

				if (Get_ie_ets (clear_co, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(clear_co, facility);
					*p_comp_nb = Isdn_get_val_ets (clear_co, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (clear_co, facility, size);
					return (PRESENT);
				}

				break;

			case NS_ALERT_IN :

				if (Get_ie_ets (alert_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(alert_in, facility);
					*p_comp_nb = Isdn_get_val_ets (alert_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (alert_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CALL_PROC_IN :

				if (Get_ie_ets (call_proc_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(call_proc_in, facility);
					*p_comp_nb = Isdn_get_val_ets (call_proc_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (call_proc_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_SETUP_ACK_IN :

				if (Get_ie_ets (setup_ack_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(setup_ack_in, facility);
					*p_comp_nb = Isdn_get_val_ets (setup_ack_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (setup_ack_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_INFO_IN :

				if (Get_ie_ets (info_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(info_in, facility);
					*p_comp_nb = Isdn_get_val_ets (info_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (info_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_FAC_IN :

				if (Get_ie_ets (fac_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(fac_in, facility);
					*p_comp_nb = Isdn_get_val_ets (fac_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (fac_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_PROGRESS_IN :

				if (Get_ie_ets (progress_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(progress_in, facility);
					*p_comp_nb = Isdn_get_val_ets (progress_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (progress_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_SUSPEND_IN :

				if (Get_ie_ets (suspend_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(suspend_in, facility);
					*p_comp_nb = Isdn_get_val_ets (suspend_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (suspend_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_SUSPEND_CO :

				if (Get_ie_ets (suspend_co, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(suspend_co, facility);
					*p_comp_nb = Isdn_get_val_ets (suspend_co, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (suspend_co, facility, size);
					return (PRESENT);
				}

				break;

			case NS_RESUME_IN :

				if (Get_ie_ets (resume_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(resume_in, facility);
					*p_comp_nb = Isdn_get_val_ets (resume_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (resume_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_RESUME_CO :

				if (Get_ie_ets (resume_co, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(resume_co, facility);
					*p_comp_nb = Isdn_get_val_ets (resume_co, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (resume_co, facility, size);
					return (PRESENT);
				}

				break;

			case NS_USER_INFO_IN :

				if (Get_ie_ets (user_info_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(user_info_in, facility);
					*p_comp_nb = Isdn_get_val_ets (user_info_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (user_info_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_RESTART_IN :

				if (Get_ie_ets (restart_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(restart_in, facility);
					*p_comp_nb = Isdn_get_val_ets (restart_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (restart_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CONGEST_CONTROL_IN :

				if (Get_ie_ets (con_con_in, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(con_con_in, facility);
					*p_comp_nb = Isdn_get_val_ets (con_con_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (con_con_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CONN_RQ :

				if (Get_ie_ets (conn_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(conn_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (conn_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (conn_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CONN_RS :

				if (Get_ie_ets (conn_rs, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(conn_rs, facility);
					*p_comp_nb = Isdn_get_val_ets (conn_rs, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (conn_rs, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CLEAR_RQ :

				if (Get_ie_ets (clear_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(clear_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (clear_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (clear_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CLEAR_RS :

				if (Get_ie_ets (clear_rs, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(clear_rs, facility);
					*p_comp_nb = Isdn_get_val_ets (clear_rs, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (clear_rs, facility, size);
					return (PRESENT);
				}

				break;

			case NS_ALERT_RQ :

				if (Get_ie_ets (alert_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(alert_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (alert_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (alert_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CALL_PROC_RQ :

				if (Get_ie_ets (call_proc_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(call_proc_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (call_proc_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (call_proc_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_SETUP_ACK_RQ :

				if (Get_ie_ets (setup_ack_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(setup_ack_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (setup_ack_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (setup_ack_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_INFO_RQ :

				if (Get_ie_ets (info_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(info_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (info_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (info_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_FAC_RQ :

				if (Get_ie_ets (fac_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(fac_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (fac_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (fac_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_PROGRESS_RQ :

				if (Get_ie_ets (progress_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(progress_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (progress_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (progress_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_SUSPEND_RQ :

				if (Get_ie_ets (suspend_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(suspend_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (suspend_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (suspend_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_SUSPEND_RS :

				if (Get_ie_ets (suspend_rs, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(suspend_rs, facility);
					*p_comp_nb = Isdn_get_val_ets (suspend_rs, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (suspend_rs, facility, size);
					return (PRESENT);
				}

				break;

			case NS_RESUME_RQ :

				if (Get_ie_ets (resume_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(resume_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (resume_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (resume_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_RESUME_RS :

				if (Get_ie_ets (resume_rs, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(resume_rs, facility);
					*p_comp_nb = Isdn_get_val_ets (resume_rs, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (resume_rs, facility, size);
					return (PRESENT);
				}

				break;

			case NS_USER_INFO_RQ :

				if (Get_ie_ets (user_info_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(user_info_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (user_info_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (user_info_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_RESTART_RQ :

				if (Get_ie_ets (restart_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(restart_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (restart_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (restart_rq, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CONGEST_CONTROL_RQ :

				if (Get_ie_ets (con_con_rq, facility) == PRESENT) {

					Isdn_get_ss_first_comp_ets	(con_con_rq, facility);
					*p_comp_nb = Isdn_get_val_ets (con_con_rq, facility, component_nb);
					*p_data_sz = Isdn_get_val_ets (con_con_rq, facility, size);
					return (PRESENT);
				}

				break;

	}

	return (ABSENT);
}

void ets_get_next_fac_instance (msg_code)
	code_t		msg_code;
{

	switch (msg_code) {

			case NS_CONN_IN :

				Set_to_next_ie_instance_ets (conn_in, facility);
				break;

			case NS_CONN_CO :

				Set_to_next_ie_instance_ets (conn_co, facility);
				break;

			case NS_CLEAR_IN :

				Set_to_next_ie_instance_ets (clear_in, facility);
				break;

			case NS_CLEAR_CO :

				Set_to_next_ie_instance_ets (clear_co, facility);
				break;

			case NS_ALERT_IN :

				Set_to_next_ie_instance_ets (alert_in, facility);
				break;

			case NS_CALL_PROC_IN :

				Set_to_next_ie_instance_ets (call_proc_in, facility);
				break;

			case NS_SETUP_ACK_IN :

				Set_to_next_ie_instance_ets (setup_ack_in, facility);
				break;

			case NS_INFO_IN :

				Set_to_next_ie_instance_ets (info_in, facility);
				break;

			case NS_FAC_IN :

				Set_to_next_ie_instance_ets (fac_in, facility);
				break;

			case NS_PROGRESS_IN :

				Set_to_next_ie_instance_ets (progress_in, facility);
				break;

			case NS_SUSPEND_IN :

				Set_to_next_ie_instance_ets (suspend_in, facility);
				break;

			case NS_SUSPEND_CO :

				Set_to_next_ie_instance_ets (suspend_co, facility);
				break;

			case NS_RESUME_IN :

				Set_to_next_ie_instance_ets (resume_in, facility);
				break;

			case NS_RESUME_CO :

				Set_to_next_ie_instance_ets (resume_co, facility);
				break;

			case NS_USER_INFO_IN :

				Set_to_next_ie_instance_ets (user_info_in, facility);
				break;

			case NS_RESTART_IN :

				Set_to_next_ie_instance_ets (restart_in, facility);
				break;

			case NS_CONGEST_CONTROL_IN :

				Set_to_next_ie_instance_ets (con_con_in, facility);
				break;

			case NS_CONN_RQ :

				Set_to_next_ie_instance_ets (conn_rq, facility);
				break;

			case NS_CONN_RS :

				Set_to_next_ie_instance_ets (conn_rs, facility);
				break;

			case NS_CLEAR_RQ :

				Set_to_next_ie_instance_ets (clear_rq, facility);
				break;

			case NS_CLEAR_RS :

				Set_to_next_ie_instance_ets (clear_rs, facility);
				break;

			case NS_ALERT_RQ :

				Set_to_next_ie_instance_ets (alert_rq, facility);
				break;

			case NS_CALL_PROC_RQ :

				Set_to_next_ie_instance_ets (call_proc_rq, facility);
				break;

			case NS_SETUP_ACK_RQ :

				Set_to_next_ie_instance_ets (setup_ack_rq, facility);
				break;

			case NS_INFO_RQ :

				Set_to_next_ie_instance_ets (info_rq, facility);
				break;

			case NS_FAC_RQ :

				Set_to_next_ie_instance_ets (fac_rq, facility);
				break;

			case NS_PROGRESS_RQ :

				Set_to_next_ie_instance_ets (progress_rq, facility);
				break;

			case NS_SUSPEND_RQ :

				Set_to_next_ie_instance_ets (suspend_rq, facility);
				break;

			case NS_SUSPEND_RS :

				Set_to_next_ie_instance_ets (suspend_rs, facility);
				break;

			case NS_RESUME_RQ :

				Set_to_next_ie_instance_ets (resume_rq, facility);
				break;

			case NS_RESUME_RS :

				Set_to_next_ie_instance_ets (resume_rs, facility);
				break;

			case NS_USER_INFO_RQ :

				Set_to_next_ie_instance_ets (user_info_rq, facility);
				break;

			case NS_RESTART_RQ :

				Set_to_next_ie_instance_ets (restart_rq, facility);
				break;

			case NS_CONGEST_CONTROL_RQ :

				Set_to_next_ie_instance_ets (con_con_rq, facility);
				break;

	}
}

#endif	/* ETS */

#if F_QSI == ON

uchar qsi_get_facility_ie (msg_code, p_comp_nb, p_data_sz)
	code_t			msg_code;			/* primitive ID */
	ushort FAR		*p_comp_nb;			/* pointer to number of components to be returned */
	ushort FAR		*p_data_sz;			/* pointer to size of data to be returned */
{

	switch (msg_code) {

			case NS_CONN_IN :
			case NS_CONN_RQ :

				if (Get_ie_qsi (conn_in, facility) == PRESENT) {

					p_ns_ss_simul_fac_start = (uchar FAR *)P_start_val_ns_qsi (conn_in, facility);
					Isdn_get_fac_first_apdu_qsi (conn_in);
					*p_comp_nb = (ushort)Isdn_get_val_qsi (conn_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_qsi (conn_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CONN_CO :
			case NS_CONN_RS :

				if (Get_ie_qsi (conn_co, facility) == PRESENT) {

					p_ns_ss_simul_fac_start = (uchar FAR *)P_start_val_ns_qsi (conn_co, facility);
					Isdn_get_fac_first_apdu_qsi (conn_co);
					*p_comp_nb = (ushort)Isdn_get_val_qsi (conn_co, facility, component_nb);
					*p_data_sz = Isdn_get_val_qsi (conn_co, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CLEAR_IN :
			case NS_CLEAR_RQ :

				if (Get_ie_qsi (clear_in, facility) == PRESENT) {

					p_ns_ss_simul_fac_start = (uchar FAR *)P_start_val_ns_qsi (clear_in, facility);
					Isdn_get_fac_first_apdu_qsi (clear_in);
					*p_comp_nb = (ushort)Isdn_get_val_qsi (clear_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_qsi (clear_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_CLEAR_CO :
			case NS_CLEAR_RS :

				if (Get_ie_qsi (clear_co, facility) == PRESENT) {

					p_ns_ss_simul_fac_start = (uchar FAR *)P_start_val_ns_qsi (clear_co, facility);
					Isdn_get_fac_first_apdu_qsi (clear_co);
					*p_comp_nb = (ushort)Isdn_get_val_qsi (clear_co, facility, component_nb);
					*p_data_sz = Isdn_get_val_qsi (clear_co, facility, size);
					return (PRESENT);
				}

				break;

			case NS_ALERT_IN :
			case NS_ALERT_RQ :

				if (Get_ie_qsi (alert_in, facility) == PRESENT) {

					p_ns_ss_simul_fac_start = (uchar FAR *)P_start_val_ns_qsi (alert_in, facility);
					Isdn_get_fac_first_apdu_qsi (alert_in);
					*p_comp_nb = (ushort)Isdn_get_val_qsi (alert_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_qsi (alert_in, facility, size);
					return (PRESENT);
				}

				break;

			case NS_FAC_CO :
			case NS_FAC_RQ :

				if (Get_ie_qsi (fac_co, facility) == PRESENT) {

					p_ns_ss_simul_fac_start = (uchar FAR *)P_start_val_ns_qsi (fac_co, facility);
					Isdn_get_fac_first_apdu_qsi (fac_co);
					*p_comp_nb = (ushort)Isdn_get_val_qsi (fac_co, facility, component_nb);
					*p_data_sz = Isdn_get_val_qsi (fac_co, facility, size);
					return (PRESENT);
				}

				break;

			case NS_PROGRESS_IN :
			case NS_PROGRESS_RQ :

				if (Get_ie_qsi (progress_in, facility) == PRESENT) {

					p_ns_ss_simul_fac_start = (uchar FAR *)P_start_val_ns_qsi (progress_in, facility);
					Isdn_get_fac_first_apdu_qsi (progress_in);
					*p_comp_nb = (ushort)Isdn_get_val_qsi (progress_in, facility, component_nb);
					*p_data_sz = Isdn_get_val_qsi (progress_in, facility, size);
					return (PRESENT);
				}

				break;
	}

	return (ABSENT);
}

void qsi_get_next_fac_instance (msg_code)
	code_t		msg_code;
{

	switch (msg_code) {

			case NS_CONN_IN :
			case NS_CONN_RQ :

				Set_to_next_ie_instance_qsi (conn_in, facility);
				break;

			case NS_CONN_CO :
			case NS_CONN_RS :

				Set_to_next_ie_instance_qsi (conn_co, facility);
				break;

			case NS_CLEAR_IN :
			case NS_CLEAR_RQ :

				Set_to_next_ie_instance_qsi (clear_in, facility);
				break;

			case NS_CLEAR_CO :
			case NS_CLEAR_RS :

				Set_to_next_ie_instance_qsi (clear_co, facility);
				break;

			case NS_ALERT_IN :
			case NS_ALERT_RQ :

				Set_to_next_ie_instance_qsi (alert_in, facility);
				break;

			case NS_FAC_CO :
			case NS_FAC_RQ :

				Set_to_next_ie_instance_qsi (fac_co, facility);
				break;

			case NS_PROGRESS_IN :
			case NS_PROGRESS_RQ :

				Set_to_next_ie_instance_qsi (progress_in, facility);
				break;
	}
}

void ns_pr_ss_qsi_facility_start ()
{

		/* Beginning of Facility IE */

	if (((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_source == BYTE_VAL_NIL) {

		fprintf (f_out, "no NetworkFacilityExtension in Facility\n");

	} else {

		fprintf (f_out, "NetworkFacilityExtension :\n");
		fprintf (f_out, "    -type of source entity : %u     -address of source entity :\n",
			((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_source);
		fprintf (f_out, "    -type of PartyNumber = %u   -type of Number = %u   -number size = %u\n",
			((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_source_p_nb_t,
			((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_source_t_of_nb,
			((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_source_add_sz);

		fprintf (f_out, "    -type of destination entity : %u     -address of destination entity :\n",
			((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_dest);
		fprintf (f_out, "    -type of PartyNumber = %u   -type of Number = %u   -number size = %u\n",
			((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_dest_p_nb_t,
			((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_dest_t_of_nb,
			((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> nfe_dest_add_sz);
	}

	if (((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> interpretation == BYTE_VAL_NIL) {

		fprintf (f_out, "no InterpretationApdu in Facility\n");

	} else {

		fprintf (f_out, "InterpretationApdu: %u\n", ((P_val_ns_qsi (facility))p_ns_ss_simul_fac_start) -> interpretation);
	}
}

uchar ns_pr_ss_qsi_start_comp (p_comp_nb)
	uchar FAR *p_comp_nb;		/* pointer to number of components not yet analysed in current DseAPDU */
{

	if (*p_comp_nb != 0) {

    	return (OK);
	}

	fprintf (f_out, "\ntype of APDU : %s\n", Code_to_text (NS_SS_QSI_APDU_TYPE_TEXT, *(ns_int_ctx.p__ss_data)));

	if (*(ns_int_ctx.p__ss_data) == QSI_ROSE_APDU_TAG) {	/* RoseAPDU */

		Isdn_get_first_rose_comp_qsi ();	/* get component location in Rose APDU */
		*p_comp_nb = 1;						/* number of components is 1 (RoseAPDU = "component" at interface) */
		return (OK);
	}

	if (*(ns_int_ctx.p__ss_data) != QSI_DSE_APDU_TAG) {

		return (NOK);	/* unknown type of APDU */
	}

		/* DseAPDU */

	*p_comp_nb = Isdn_get_ss_dse_apdu_val_qsi (component_nb);	/* init number of components */

	fprintf (f_out, "type of DseAPDU : %s\n", Code_to_text (NS_SS_QSI_DSE_APDU_TYPE_TEXT, Isdn_get_ss_dse_apdu_val_qsi (dse_pdu_type)));

	fprintf (f_out, "    -size of OriginationDialogID or UserAbortInformation string : %u\n", Isdn_get_ss_dse_apdu_val_qsi (orig_dialog_or_abort_info_sz));
	fprintf (f_out, "    -size of DestinationDialogID string : %u\n", Isdn_get_ss_dse_apdu_val_qsi (destination_dialog_sz));
	fprintf (f_out, "    -P_abort_cause : %u    -Number of RoseAPDUs in DseAPDU : %u\n",
		Isdn_get_ss_dse_apdu_val_qsi (p_abort_cause), Isdn_get_ss_dse_apdu_val_qsi (component_nb));

	if (Isdn_get_ss_dse_apdu_val_qsi (first_comp_offset) == OFFSET_NIL) {

		return (STOP);	/* no more component in Facility IE */
	}

	Isdn_get_first_dse_comp_qsi ();
	return (OK);
}

#endif	/* QSI */

#endif	/* SUPP SERVICES and SIMULATION ANALYSER} */

/*EOF*/
