
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_ie_3.c
 *
 * $Revision$
 *
 * $Date$
 *
 *		This file is the second part of NS_IE_1.C module.
 *
 * function(s)
 *
 *      exec_spdu_ie - implements the processing of the IE list
 *						  of the SPDU model.
 *
 *		r_exec_spdu_ie - implements the execution of the meta-program
 *						 to check the SPDU integrity and load the
 *                       internal structures with valid data.
 *
 *		s_exec_spdu_ie - implements the execution of the meta-program
 *                       to create a SPDU message from the valid
 *                       IE stored in the internal structures.
 *
 *		s_spdu_ie_tsp  - check if IE is transparent. If yes, copy directly
 *						 data in p_ie, else, execute meta-program.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/
/*

								 spdu_ie_codeset, spdu_ie_id
									   |
		SPDU message                   |               ie    tab_ie
	  ================         --------v------        ================
	  |--------------|         |             |        |              |
	  |   I E        |<------->| exec_spdu_ie|<---------  tab_ie     |
	  |--------------|         |             |        |              |
	  ================         ----Œ-----|----        ================
								   |     |
								   |     |
								   |     |
							 ------|-----v--------      ================
							 |  r_exec_spdu_ie   |      |     IE       |
							 |  s_exec_spdu_ie   |<------ meta-program |
							 |                   |      |       |      |
							 ------|----Œ---------      ========|=======
								   |    |                       |
								   | 	|                       v
								   |	------------------  IE internal
									--------------------> data structures

IE description structures :
-------------------------

					ie			tab_ie
	==================================================
	| codeset | id | p_prog | size | p_struc | p_init|
	|---------|----|--------|------|---------|-------|     meta-prog
	|         |    |  X----------------------------------> START
	|---------|----|--------|------|---------|-------|        XXXXX
	|         |    |        |      |         |       |        YYYYY
	|---------|----|--------|------|---------|-------|      END
	|         |    |        |      |         |       |
	|---------|----|--------|------|---------|-------|
	|         |    |        |  X   |   X------------------> i_xxxx
	|---------|----|--------|--|---|---------|-------|       Œ internal
	|         |    |        |  ------------------------------| data
	|---------|----|--------|------|---------|-------|       v structure
	|         |    |        |      |         |       |
	|---------|----|--------|------|---------|-------|
	|         |    |        |      |         |   X--------> pr_i_xxxx
	|---------|----|--------|------|---------|-------|        Œ implicit
	|         |    |        |      |         |       |        | value or
	|---------|----|--------|------|---------|-------|        v  NIL

*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "ctx_ext.h"

#include "ns_ie.h"

	/* common variables */

extern	ushort 	i_ie_offset;					/* size of the internal data structure of the current IE */
		uchar	ie_end_found;					/* end of IE flag */
		uchar	ie_optional_octet;  			/* ON = optional octet group */
extern	uchar	bc_teleservice_compatibility;	/* BC/HLC compatibility checking */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             exec_spdu_ie - implements the search of the SPDU ID model
								 and the calling of the IE meta-program.

Usage            uchar exec_spdu_ie (uchar spdu_ie_codeset, uchar spdu_id,
										uchar nb_ie);
					- spdu_ie_codeset	= IE codeset,
					- spdu_ie_id   		= IE ID,
					- nb_ie   			= number of identical IE already processed.

Related
functions usage r_exec_spdu_ie (uchar *p_pc);
				s_exec_spdu_ie (uchar *p_pc);

Return value    returns = OK  : valid IE content,
						= NOK : invalid IE content.

Common constants and declarations : ns.h

Common objects : internal data structures, ie

*--------------------------------------------------------------------------*/

uchar exec_spdu_ie (spdu_ie_codeset, spdu_ie_id, x_ie)
	uchar		 spdu_ie_codeset;	/* IE codeset */
	uchar		 spdu_ie_id;		/* IE ID */
	uchar        x_ie;				/* current repeated IE index */
{
	uchar		 i;					/* index */
	uchar 	FAR	*p_ie_lgth;			/* pointer on the location where to store the IE length */

		/*
		   Process according to the codeset and information
		   element identifier.
		*/

		/* Codeset 0 : I.451 information element */

	if ((i = Access_tab_ie (Search_key_ie (spdu_ie_codeset, spdu_ie_id))) != X_IE_NIL) {
		i_ie_offset 		= (ushort)(x_ie * Ie_i_size (i));	/* internal data structure offset */
		i_ie_x      		= x_ie;								/* current index */
		ie_optional_octet	= OFF;

			/* From D channel */

		if (direction == FROM_D_CHANNEL) {

				/* Execute the meta_program */

			ie_end_found	= OFF;
			if ((ret_code	= r_exec_spdu_ie (Ie_p_prog (i))) == OK) {

					/* Test end of IE */

				if ( ! Eo_ie) {
					return (NOK);
				}

			}

		} else {

			/* FROM CALL CONTROL */

				/* Save the location address of the length of the IE */

			p_ie_lgth = Get_p_ie;
			Inc_p_ie (1);

#			if NS_IE_TSP_OUT == OFF

					/* Execute the IE meta-program  */

				ret_code = s_exec_spdu_ie (Ie_p_prog (i));


#			else

				ret_code = s_spdu_ie_tsp (i);

#			endif

				/* Set the length of the IE if variable length IE */

			if ((spdu_ie_codeset < CODESET_SO) ||
				(spdu_ie_codeset == CODESET_NIL)) {

				*p_ie_lgth = (uchar)(Get_p_ie - p_ie_lgth - 1);
			}
		}

			/* Return and continue */

		return (ret_code);

	} else {

			/* Unknown codeset, ie_id */

		Trap (TRAP_IE_INCONSISTENCY, "exec_spdu");

		return (NOK);
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            r_exec_spdu_ie - implements the execution of a meta-
								 program in order to check a received
								 SPDU and to create an internal data
								 structure of valid value (octet or
								 array of octets).

Usage           r_exec_spdu_ie (uchar *p_pc);
					- p_pc : start program counter value.

Related
functions usage find_tabl 		();
				find_tabx 		();
				check_convert 	();

Return value    returns = OK  no error or non-fatal error,
							  p_ie points on the next IE location to process.
						= NOK fatal error.

Common constants and declarations : ns.h

Common objects : internal data structures

*--------------------------------------------------------------------------*/

uchar r_exec_spdu_ie (p_pc)
	register	uchar 		*p_pc;			/* program counter */
{
	register	uchar 		ext;			/* extension bit flag */
	register	uchar 		inst_lgth;		/* instruction length */
				uchar 	 	field;			/* octet field value */
				uchar		ie_octet;		/* current octet value */
				uchar		skip[MX_SKIP_LEVEL];/* skip flags */
				int			skip_level;		/* IF..ENDIF block overlap level */

		/* Loop until error or end of IE element in the SPDU message */

	for ( ; ; ) {

			/*
			   Execute the meta-program instruction by instruction like
			   an intermediate code interpreter.
			*/

		switch (Inst_code) {

				/* START : meta-program initialization */

			case INST_START :
				inst_lgth	= START_LGTH;

					/* Set initial value OFF to the flags */

				Init_skip;
				ext = OFF;

					/* Read first octet */

				ie_octet = Get_ie_octet;

				break;

				/* TABL : search the field in a set of constants called a table. */

			case INST_TABL :
				inst_lgth	= TABL_LGTH;

				if ( ! ((ext == ON) || (Skip == ON))) {

					if (ie_end_found == ON) {

						if (ie_optional_octet == OFF) {
							return (NOK);
						}

						field = BYTE_VAL_NIL;

					} else {

						field = Extract (Tabl_position, Tabl_lgth);

						if (find_tabl (field, Tabl_tabl_id) != OK) {
							return (NOK);
						}

					}

					*Add_i(Tabl_p_val) = field;
				}

				break;

				/* TABX : indexed table */

			case INST_TABX :
				inst_lgth	= TABX_LGTH;

				if ((ext == ON) || (Skip == ON)) {
					break;

				} else {

					if (ie_end_found == ON) {

						if (ie_optional_octet == OFF) {
							return (NOK);
						}

						field = BYTE_VAL_NIL;

					} else {

						field = Extract (Tabx_position, Tabx_lgth);

						if (find_tabx (field, Tabx_tabl_id, *Add_i(Tabx_px_val)) != OK) {
							return (NOK);
						}

					}

					*Add_i(Tabx_p_val) = field;
				}

				break;

				/* VAL : Immediat constant */

			case INST_VAL :
				inst_lgth	= VAL_LGTH;

				if ( ! ((ext == ON) || (Skip == ON))) {

					if (ie_end_found == ON) {

						if (ie_optional_octet == OFF) {
							return (NOK);
						}

						field = BYTE_VAL_NIL;

					} else {

						field = Extract (Val_position, Val_lgth);

						if (field != Val_value) {
							return (NOK);
						}

					}

					*Add_i (Val_p_val) = field;
				}
				break;

			case INST_ANY_VAL :
				inst_lgth	= ANY_VAL_LGTH;

				if ( ! ((ext == ON) || (Skip == ON))) {

					if (ie_end_found == ON) {

						if (ie_optional_octet == OFF) {
							return (NOK);
						}

						field = BYTE_VAL_NIL;

					} else {

						field = Extract (Any_val_position, Any_val_lgth);
					}

					*Add_i (Any_val_p_val) = field;
				}
				break;

			case INST_TEXT :
				inst_lgth = TEXT_LGTH;

				if ((ext == ON) || (Skip == ON)) {
					break;

				} else {

					if (ie_end_found == ON) {

						if (ie_optional_octet == OFF) {
							return (NOK);
						}

						*(uchar **)Add_i (Text_p_val)	= P_NIL;
						*Add_i (Text_p_lgth)			= 0;

					} else {

						*Add_i (Text_p_lgth) = (uchar)Remainder_ie_octet;

							/* Set end of IE */

						if (check_convert ((uchar FAR *)p_ind_buffer,
									   Get_p_ie,
									   *Add_i(Text_p_lgth),
									   Text_code,
									   Text_restriction) == NOK) {

								/* NOK : erroneous text */

							Set_p_ie (p_ie_end);
							*(uchar **)Add_i (Text_p_val)	= P_NIL;
							*Add_i (Text_p_lgth)			= 0;
							return (NOK);

						} else {

								/* OK : valid text */

							Set_p_ie (p_ie_end);
							*(uchar **)Add_i (Text_p_val) 	 = p_ind_buffer;
							p_ind_buffer	 				+= *Add_i (Text_p_lgth) + 1;
						}

					}

				}
				break;

				/* PAD : padding */

			case INST_PAD :
				inst_lgth = PAD_LGTH;
				break;

				/* EXT_0_1 : octet extension 0/1 */

			case INST_EXT_0_1 :
				inst_lgth = EXT_0_1_LGTH;

				if ((ext == ON) || (Skip == ON)) {
					break;

				} else {

					if (ie_end_found == ON) {

						if (ie_optional_octet == OFF) {
							return (NOK);
						}

					} else {

						field = Extract (EXT_POSITION, EXT_LGTH);

						if (field == EXT_LAST) {
							ext = ON;
						}

						ie_octet = Inc_get_ie_octet;
					}

				}

				break;

				/* EXT_1 : end of octet extension */

			case INST_EXT_1 :
				inst_lgth = EXT_1_LGTH;

				if (Skip == OFF) {

					if (ext == ON) {
						ext = OFF;

					} else {

						if (ie_end_found == OFF) {

							do {
									/*
										Ignore the IE octet until EXT end
										or IE END.
									*/

								field = Extract (EXT_POSITION, EXT_LGTH);
								ie_octet = Inc_get_ie_octet;

								if (field == EXT_LAST) {
									break;
								} else if (Eo_ie) {
									return (NOK);
								}

							} while (field != EXT_LAST);

						}

					}

				}

				break;

				/* OCTET : octet without extension bit */

			case INST_END_OCTET :
				inst_lgth = END_OCTET_LGTH;

				if (Skip == OFF) {

					if (ie_end_found == OFF) {
						ie_octet = Inc_get_ie_octet;
					}

				}

				break;

				/*
				   OPTIONAL OCTETS : indicate that the next octet groups
				   are optional
				*/

			case INST_OPTIONAL_OCTET :
				inst_lgth = OPTIONAL_OCTET_LGTH;

				if (Skip == OFF) {
					ie_optional_octet = ON;
				}
				break;

				/* IF_VAL : set condition if val EQ or NE an immediate value */

			case INST_IF_VAL :
				inst_lgth = IF_VAL_LGTH;

				if (Skip == ON) {

						/* the entire following IF..ELSE..ENDIF block must be skipped */

					Down_level;
					Skip = ON;

				} else {

					/* process the following IF..ELSE..ENDIF block */

					Down_level;

					if (Get_if_val_variable == If_val_value) {
						Skip = (If_val_condition == EQ) ? OFF : ON;

					} else {

						Skip = (If_val_condition == EQ) ? ON : OFF;
					}

				}

				break;

				/* IF_TABL : set condition if val IN or NOT_IN a table */

			case INST_IF_TABL :
				inst_lgth = IF_TABL_LGTH;

				if (Skip == ON) {

						/* the entire following IF..ELSE..ENDIF block must be skipped */

					Down_level;
					Skip = ON;

				} else {

						/* process the following IF..ELSE..ENDIF block */

					Down_level;

					if (find_tabl (Get_if_tabl_variable, If_tabl_id) == OK) {
						Skip =  (If_val_condition == IN) ? OFF : ON;

					} else {

						Skip =  (If_val_condition == IN) ? ON : OFF;
					}

				}

				break;

				/* ELSE */

			case INST_ELSE :
				inst_lgth = ELSE_LGTH;
				Up_level;

				if (Skip == ON) {

					/* the entire IF..ELSE..ENDIF block must be skipped */

					Down_level;
					Skip = ON;

				} else {

					/* reverse skip flag */

					Down_level;
					Skip = (Skip == ON) ? OFF : ON;	/* reverses Skip flag */
				}

				break;

				/* END_IF : end of a IF block */

			case INST_END_IF :
				inst_lgth = END_IF_LGTH;

				Up_level;

				break;

				/* FUNCT : call a 'C' function */

			case INST_FUNCT :
				inst_lgth = FUNCT_LGTH;
				if (Skip == OFF) {

					if ((*Funct_p_fct) () != OK) {
						return (NOK);
					}
				}
				break;

				/* END : end of the meta-program */

			case INST_END :

				if (End_p_fct != (uchar(*)(Void_parm))FCT_NIL) {
					return ((*End_p_fct) ());
				}

				return (OK);

				/* NIL : to reach structure aligment (should never happen) */

			case NIL :
				inst_lgth = 1;
				break;

				/* Unknown meta-instruction */

			default :
				Trap (TRAP_R_EXEC, "r_exec_spdu_ie");

		}  	/* End switch inst_code */

			/* End of IE ? */

		if (Eo_ie) {
			ie_end_found = ON;
		}

			/* Set program counter on the next meta-instruction */

		p_pc += Round (inst_lgth);

	}  /* end for ( ; ; ) */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             s_exec_spdu_ie - implements the creation of an IE
								  of a SPDU message from the internal
								  data structures and the meta-program.

Usage            s_exec_spdu_ie (uchar *p_pc);
					- p_pc : program counter pointer.

Return value     returns = OK
						 = NOK

Common constants and declarations : ns.h

Common objects	: internal data structure

*--------------------------------------------------------------------------*/

		/* Generate an information element according to the associated programm  code */

#define VAL_LAST 	'L'

uchar s_exec_spdu_ie (p_pc)
	register	uchar 		*p_pc;			/* program counter pointer */
{
	register	uchar 		ext;			/* extension flag */
	register	uchar 		inst_lgth;		/* instruction length */
				uchar 		field;			/* octet field */
	register	uchar		val;			/* value flag */
				uchar		skip[MX_SKIP_LEVEL];/* skip flags */
				int			skip_level;		/* IF..ENDIF block overlap level */

	/*
	   - p_pc points to the program code.

	   - p_ie points to the current location in the spdu message .

	   - i_xxxx structure contains the field values of the information element.

	   - ext indicates that the previous octet may continue
		 through the next octet. Set to ON when scanning extended sub-octets.

	   - skip is set after an IF instruction and indicates that
		 the instructions shall be skipped or not until an END_IF instruction.

	   - val is set to ON after storing a value in an octet
		 and to VAL_LAST after detection of the last octet of an
		 extended field (e.g. after having stored NO value in the octet).
	*/

		/* Execute the meta-program until END instruction */

	for ( ; ; ) {

		switch (Inst_code) {

				/* START : reset the flags */

			case INST_START :
				inst_lgth = START_LGTH;

				Init_skip;
				ext = val = OFF;
				break;

				/*  TABL : transfer the value */

			case INST_TABL :
				inst_lgth = TABL_LGTH;

				if (Skip == OFF) {

					if (val == VAL_LAST) {
						break;	/* ignore any other sub-octet fields */
					}

					field = *Add_i(Tabl_p_val);

					if ((field == BYTE_VAL_NIL) && (ext == ON)) {

						if (val == ON) {
							Error_intern ();
						}

						break;
					}

#					if ASSERT == ON

						else {

							if (performance == OFF) {

								if (find_tabl (field, Tabl_tabl_id) != OK) {
									Error_intern ();
								}

							}

						}

#					endif

					val = ON;
					Put_ie_field (Tabl_position, Tabl_lgth, field);
				}

				break;

				/* TABX : as TABL */

			case INST_TABX :
				inst_lgth = TABX_LGTH;

				if (Skip == OFF) {

					if (val == VAL_LAST) {
						break;	/* ignore any other sub-octet fields */
					}

					field = *Add_i (Tabx_p_val);

					if ((field == BYTE_VAL_NIL) && (ext == ON)) {

						if (val == ON) {
							Error_intern ();
						}

						break;
					}

#					if ASSERT == ON

						else {

							if (performance == OFF) {

								if (find_tabx (field,
											   Tabl_tabl_id,
											   *(Tabx_px_val)) != OK) {
									Error_intern ();
								}

							}

						}

#					endif

					val = ON;
					Put_ie_field (Tabx_position, Tabx_lgth, field);
				}

				break;

				/* VAL : transfer the value */

			case INST_VAL :
				inst_lgth = VAL_LGTH;

				if (Skip == OFF) {

					if (val == VAL_LAST) {
						break;	/* ignore any other sub-octet fields */
					}

					field = *Add_i (Val_p_val);

					if (field != BYTE_VAL_NIL) {

#						if ASSERT == ON

							if (performance == OFF) {

								if (field != Val_value) {
									Error_intern ();
								}

							}

#						endif

						val = ON;

					} else {

							/*
							   If the terminal value is empty
							   the expected value is forced;
							*/

						field = Val_value;

					}

					Put_ie_field (Val_position, Val_lgth, field);

				}
				break;

				/* ANY_VAL : transfer the value */

			case INST_ANY_VAL :
				inst_lgth = ANY_VAL_LGTH;

				if (Skip == OFF) {

					if (val == VAL_LAST) {
						break;	/* ignore any other sub-octet fields */
					}

					field = *Add_i (Any_val_p_val);

					if ((field != BYTE_VAL_NIL) || (Any_val_lgth == 8)) {
						Put_ie_field (Any_val_position, Any_val_lgth, field);
						val = ON;
					}
				}
				break;

				/* TEXT : transfer the text */

			case INST_TEXT :
				inst_lgth = TEXT_LGTH;

				if ((Skip == OFF) && (*(uchar **)Add_i (Text_p_val) != P_NIL)) {

#					if ASSERT == ON

						if (performance == OFF) {

							if (check_convert (	Get_p_ie,
												*(uchar **)Add_i (Text_p_val),
												*Add_i (Text_p_lgth),
												Text_code,
												Text_restriction) == NOK) {
								Error_intern ();
							}

						} else {

							Memcpy_far ((char FAR *)Get_p_ie,
										(char FAR *)*(char **)Add_i (Text_p_val),
										*Add_i (Text_p_lgth));

						}

#					else

						Memcpy_far ((char FAR *)Get_p_ie,
									(char FAR *)*(char **)Add_i (Text_p_val),
									*Add_i (Text_p_lgth));
#					endif

					Inc_p_ie (*Add_i (Text_p_lgth));
				}

				break;

				/* PAD : transfer 0 */

			case INST_PAD :
				inst_lgth = PAD_LGTH;

				if (Skip == OFF) {
					Put_ie_field (Pad_position, Pad_lgth, 0);
				}

				break;

				/* EXT O or 1 : set extension bit according to ext and val flags. */

			case INST_EXT_0_1 :
				inst_lgth = EXT_0_1_LGTH;

				if (Skip == OFF) {

					if (ext == OFF) {
						Put_ie_field ((uchar)EXT_POSITION, (uchar)EXT_LGTH, (uchar)EXT_CONTINUE);
						Inc_p_ie (1);
						ext = ON;
						val = OFF;

					} else {

						switch (val) {

							case OFF :
								Dec_p_ie (1);
								Put_ie_field ((uchar)EXT_POSITION, (uchar)EXT_LGTH, (uchar)EXT_LAST);
								Inc_p_ie (1);
								val = VAL_LAST;
								break;

							case ON :
								Put_ie_field ((uchar)EXT_POSITION, (uchar)EXT_LGTH, (uchar)EXT_CONTINUE);
								Inc_p_ie (1);
								val = OFF;
								break;
						}

					}

				}

				break;

				/* EXT 1 : set extension bit to 1 */

			case INST_EXT_1 :
				inst_lgth = EXT_1_LGTH;

				if (Skip == OFF) {

					switch (val) {

						case OFF :

								/* No value has been stored in this octet */

								/*
									If it is the first octet of a group,
										error
									else
										put an EXT-1 bit on the previous octet.
								*/

							if (ext == OFF) {
								Error_intern ();
							}

							Dec_p_ie (1);

						case ON :
							Put_ie_field ((uchar)EXT_POSITION, (uchar)EXT_LGTH, (uchar)EXT_LAST);
							Inc_p_ie (1);
					}

					val = OFF;
					ext = OFF;
				}

				break;

				/* END OCTET : set next output position */

			case INST_END_OCTET :
				inst_lgth = END_OCTET_LGTH;

				if (Skip == OFF) {
					Inc_p_ie (1);
					val = OFF;
				}
				break;

				/* IF VAL : evaluate the condition and set the skip flag */

			case INST_IF_VAL :
				inst_lgth = IF_VAL_LGTH;

				if (Skip == ON) {

						/*
							The entire following IF..ELSE..ENDIF block
							must be skipped.
						*/

					Down_level;
					Skip = ON;

				} else {

					/* process the following IF..ELSE..ENDIF block */

					Down_level;

					if (Get_if_val_variable == If_val_value) {
						Skip = (If_val_condition == EQ) ? OFF : ON;

					} else {

						Skip = (If_val_condition == EQ) ? ON : OFF;
					}
				}
				break;

				/* IF TABL : evaluate the condition and set the skip flag */

			case INST_IF_TABL :
				inst_lgth = IF_TABL_LGTH;

				if (Skip == ON) {

						/*
							The entire following IF..ELSE..ENDIF block
							must be skipped.
						 */

					Down_level;
					Skip = ON;

				} else {

					/* process the following IF..ELSE..ENDIF block */

					Down_level;

					if (find_tabl (Get_if_tabl_variable, If_tabl_id) == OK) {
						Skip =  (If_val_condition == IN) ? OFF : ON;

					} else {

						Skip =  (If_val_condition == IN) ? ON : OFF;
					}
				}
				break;

				/* ELSE */

			case INST_ELSE :
				inst_lgth = ELSE_LGTH;
				Up_level;

				if (Skip == ON) {

					/* the entire IF..ELSE..ENDIF block must be skipped */

					Down_level;
					Skip = ON;

				} else {

					/* reverse skip flag */

					Down_level;
					Skip = (Skip == ON) ? OFF : ON;	/* reverses Skip flag */
				}

				break;

				/* END IF : terminate a IF bloc of instruction */

			case INST_END_IF :
				inst_lgth = END_IF_LGTH;
				Up_level;
				break;

				/* FUNCTION : execute a specific function */

			case INST_FUNCT :
				inst_lgth = FUNCT_LGTH;

				if (Skip == OFF) {

					if ((*Funct_p_fct) () != OK) {
						return (NOK);
					}

				}

				break;

			case INST_OPTIONAL_OCTET :
				inst_lgth = OPTIONAL_OCTET_LGTH;

				if (Skip == OFF) {
					ie_optional_octet = ON;
				}

				break;

				/* END : execute a specific function and stop the meta-program */

			case INST_END :

				if (End_p_fct != (uchar(*)(Void_parm))FCT_NIL) {
					return ((*End_p_fct) ());
				}

				return (OK);

				/* NIL : to reach structure aligment (should never happen) */

			case NIL :
				inst_lgth = 1;
				break;

			default :
				Trap (TRAP_R_EXEC, "s_exec_spdu_ie");

		}

			/* Next instruction */

		p_pc += Round (inst_lgth);

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             s_spdu_ie_tsp - implements the search of the SPDU ID model
								 and the calling of the transparent IE
								 meta-program.

Usage            uchar s_spd_ie_tsp (uchar ie_x)

*--------------------------------------------------------------------------*/

#if NS_IE_TSP_OUT == ON

uchar s_spdu_ie_tsp (ie_x)
	uchar ie_x;
{

	char *p_tsp_data;					/* pointer to the Q931 string */
	uchar 	mx_lgth;					/* length of Q931 string */

	p_tsp_data = P_NIL;

	if (Ie_tsp_data_offset (ie_x) != 0) {

		p_tsp_data	= Ie_p_tsp_data(ie_x, i_ie_x);
	}

	if (p_tsp_data != P_NIL) {

			/* IE is transparent */

		mx_lgth = *p_tsp_data++;

			/* Copy the Q931 format */

		Memcpy_far ((char FAR *)p_ie, p_tsp_data, mx_lgth);
		p_ie += mx_lgth;

	} else {

		return (s_exec_spdu_ie (Ie_p_prog (ie_x)));
	}

	return (OK);

}

#endif

/*EOF*/
