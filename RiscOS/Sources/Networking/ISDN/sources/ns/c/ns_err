
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_err.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		   error handling procedure  for error conditions detected
 *		   by the Network Signalling entity (NS).
 *
 *	       error_set - implements the signalling of an error to the error handler.
 *
 *		   error_erase - implements the erasing of the last set error if it
 *                       matches the IE ID.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "ctx_ext.h"

#define ERROR_NIL		0	/* error NIL */
#define ERR_IE			'I'

	/* error context : can be put into a stack if necessary */

struct error_stack_item {
	uchar code;						/* error code */
	uchar diagnostic_1;				/* diagnostics 1 */
	uchar diagnostic_2;				/* diagnostics 2 */
	uchar level;					/* error severity */
	uchar type;						/* error type */
};

#define Error_stack_code(x)	 		error_stack[x].code
#define Error_stack_diagnostic_1(x) error_stack[x].diagnostic_1
#define Error_stack_diagnostic_2(x) error_stack[x].diagnostic_2
#define Error_stack_level(x)		error_stack[x].level
#define Error_stack_type(x)			error_stack[x].type

struct 	error_stack_item 			error_stack [NS_MX_ERROR];

	/* error action table */

struct error_action {
	uchar code;						/* error code */
	uchar priority;					/* error priority if non-FATAL */
	uchar type;						/* type of error */
};

CONST struct error_action table_error_common[] = {

	/*     error code             error priority   error type */

	{ERR_N_CALL_REF_GLOBAL,              30},

	{ERR_N_CALL_REF_LGTH,                32},
	{ERR_N_CALL_REF_PAD,                 31},
	{ERR_N_CALL_REF_UNKNOWN,             33},
	{ERR_N_CALL_REF_ALREADY_KNOWN,       34},
	{ERR_N_CALL_REF_FLAG,                35},
	{ERR_N_CALL_REF_FLAG_MULTIPOINT,     35},
	{ERR_N_CALL_REF_FLAG_POINT_TO_POINT, 35},
	{ERR_N_CALL_REF_FLAG_NO_CALL,        36},
	{ERR_N_CALL_REF_DUMMY,               37},

	{ERR_N_STATUS_CALL_REF,              38},

	{ERR_N_SPDU_TYPE,                    40},
	{ERR_N_SPDU_UNEXPECTED,              41},

	{ERR_N_SPDU_LGTH,                    20},

	{ERR_N_IE_UNKNOWN,                   56,      ERR_IE},
	{ERR_N_IE_M_MISSING,                 52,      ERR_IE},
	{ERR_N_IE_M_TOO_SHORT,               54,      ERR_IE},
	{ERR_N_IE_M_TOO_LONG,                55,      ERR_IE},
	{ERR_N_IE_O_LGTH,                    57,      ERR_IE},
	{ERR_N_IE_SO_TYPE,                   56,      ERR_IE},
	{ERR_N_IE_M_CONTENT,                 53,      ERR_IE},
	{ERR_N_IE_O_CONTENT,                 57,      ERR_IE},
	{ERR_N_IE_OUT_OF_SEQUENCE,           50,      ERR_IE},
	{ERR_N_IE_REPEATED,                  51,      ERR_IE},

	{ERR_N_NAI,                          1},
	{ERR_N_CES,                          2},
	{ERR_N_BROADCAST,                    3},

	{ERR_I_TE_VAL,                       99},

	{ERR_U_SSDU_CODE,                    99},
	{ERR_U_PARAM_VAL,                    99},
	{ERR_U_MANDATORY_PARAM_MISSING,      99},
	{ERR_U_PARAM_TYPE,                   99},
	{ERR_U_PARAM_LGTH,                   99},
	{ERR_U_SSDU_UNEXPECTED,              99},
	{ERR_U_NAI,                          99},
	{ERR_U_NO_CALL_CTX_AVAILABLE,        99},
	{ERR_U_CALL_CONN_ID_ALREADY_USED,    99},
	{ERR_U_PRIMITIVE_NOT_IMPLEMENTED,    99},
	{ERR_U_CALL_CONN_ID_UNKNOWN,         99},
	{ERR_U_NON_EXISTENT_CALL,            99},
	{ERR_U_CONGESTION_BUSY,              99},
	{ERR_U_SSDU_IE_INSTANCE_OVERFLOW,    99},

	{ERR_U_USER_FAC_PROTOCOL,            99},
	{ERR_U_UUI_PROTOCOL,                 99},
	{ERR_U_NO_TIMER_AVAILABLE,           99},

#	if NS_SEGMENTATION == ON
		{ERR_N_REASSEMBLY,               10},
		{ERR_N_SEGMENTER,                11},
#	endif

};


			/* All error table have the same length */

#define TABLE_ERROR_LGTH		sizeof (table_error_common) /sizeof (struct error_action)


#define Table_error_code(x)			table_error_common[x].code		/* ERR_U_/N_... */
#define Table_error_type(x)			table_error_common[x].type		/* ERR_IE or 0 */
#define Table_error_priority(x)		table_error_common[x].priority	/* 0 for FATAL, 1 is highest */
#define Table_error_level(x)    	Table_error[x]					/* FATAL / NON_FATAL / IGNORED / CONDITIONAL */

uchar	bc_teleservice_compatibility;	/* BC/HLC compatibility checking */

uchar	ns_fatal_error_flag;			/* Fatal error flag ON/OFF */

/*==========================================================================

			- Network information element descriptions -
*/

#if F_AT4 == ON
#	include "at4.net_err"
#endif

#if F_AT5 == ON
#	include "at5.net_err"
#endif

#if F_AT9 == ON
#	include "at9.net_err"
#endif

#if F_BIP == ON
#	include "bip.net_err"
#endif

#if F_AU1 == ON
#	include "au1.net_err"
#endif

#if F_BV1 == ON
#	include "bv1.net_err"
#endif

#if F_BT2 == ON
#	include "bt2.net_err"
#endif

#if F_TR6 == ON
#	include "tr6.net_err"
#endif

#if F_ETS == ON
#	include "ets.net_err"
#endif

#if F_A17 == ON
#	include "a17.net_err"
#endif

#if F_A11 == ON
#	include "a11.net_err"
#endif

#if F_E10 == ON
#	include "e10.net_err"
#endif

#if F_VN2 == ON
#	include "vn2.net_err"
#endif

#if F_VN3 == ON
#	include "vn3.net_err"
#endif

#if F_VN6 == ON
#	include "vn6.net_err"
#endif

#if F_KDD == ON
#	include "kdd.net_err"
#endif

#if F_NI1 == ON
#	include "ni1.net_err"
#endif

#if F_NI2 == ON
#	include "ni2.net_err"
#endif

#if F_DMS == ON
#	include "dms.net_err"
#endif

#if F_NTT == ON
#	include "ntt.net_err"
#endif

#if F_SWD == ON
#	include "swd.net_err"
#endif

#if F_QSI == ON
#	include "qsi.net_err"
#endif

#if F_HKT == ON
#	include "hkt.net_err"
#endif

/*=========================================================================*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             error_set - implements the management of a multi-
							  error situation. The error contexts
							  can be put in a stack if necessary.

Usage            uchar error_set (uchar error_code, uchar diagnostic_1,
								  uchar diagnostic_2);
							- error_code   : error code,
							- diagnostic_1 : cause diagnostic.
							- diagnostic_2 : extra diagnostic

Common objects :

*--------------------------------------------------------------------------*/

uchar error_set (error_code, error_diagnostic_1, error_diagnostic_2)
	uchar 				 error_code;     		/* error code */
	uchar 				 error_diagnostic_1;	/* diagnostics 1 */
	uchar 				 error_diagnostic_2;	/* diagnostics 2 */
{
	struct message	FAR *p_msg;                 /* current message pointer */
	struct message	FAR *p_snd_msg_save;		/* save send pointer */
	struct buffer	FAR *p_buff;				/* current buffer pointer */
	uchar			FAR *p_data;				/* current data pointer */
	uchar				 i;          			/* current index */
	uchar				 error_level;			/* current error level */

	for (i = 0; i < TABLE_ERROR_LGTH ; i++) {

		if (error_code != Table_error_code (i)) {
			continue;
		}

			/* get error level in the network-specific table */

		error_level = Table_error_level (i);

			/* Error level to be evaluated -> call network-specific function */

		if (error_level == CONDITIONAL) {
			error_level = Error_level_eval (error_code, error_diagnostic_1);
		}

			/* Error to be ignored ? => return NON_FATAL */

		if (error_level == IGNORED) {
			return (NON_FATAL);
		}

			/* FATAL or NON-FATAL error: set the error stack */

		Error_stack_code (nb_error)			= error_code;
		Error_stack_diagnostic_1 (nb_error)	= error_diagnostic_1;
		Error_stack_diagnostic_2 (nb_error)	= error_diagnostic_2;
		Error_stack_type (nb_error)			= Table_error_type (i);

		if (error_level == FATAL) {

				/* FATAL error */

			Error_stack_level (nb_error)	= FATAL;
			ns_fatal_error_flag				= ON;		/* to remember that a FATAL error occured */

		} else {


				/* Non-FATAL error: use the error priority */

			Error_stack_level (nb_error)	= Table_error_priority (i);
		}

		if (nb_error != NS_MX_ERROR - 1) {
			nb_error++;
		}

			/* Report to MNS */

		p_msg 	= P_NIL;
		p_buff 	= P_NIL;

		Prepare_data_to_send (p_msg, p_buff, Mns_err_size, p_data);

		if (p_data != P_NIL) {

				/* Load the error message */

			Mns_err_entity_origination 	= ENT_NS;
			Mns_err_report_type 		= REPORT_TYPE_ERROR;

			Mns_err_cause				= error_code;
			Mns_err_diagnostic			= error_diagnostic_2;

			if (p_nsdl != P_NIL) {
				Mns_err_tei				= Dl_tei;
			}

			Mns_err_protocol_discr		= protocol_discr;
			Mns_err_call_ref_lgth		= I_call_ref_lgth;
			Mns_err_call_ref 			= I_call_ref;

			if (p_call != P_NIL) {
				Mns_err_call_state		= Call_state;

			} else {

				Mns_err_call_state		= STATE_NULL_0;
			}

			if (R_msg_from == ENT_DL_D) {
				Mns_err_spdu_id			= spdu_id;
				Mns_err_ssdu_id			= BYTE_VAL_NIL;
				Mns_err_ie_codeset		= error_diagnostic_2;

			} else {

				Mns_err_ssdu_id			= ssdu_id;
				Mns_err_spdu_id			= BYTE_VAL_NIL;
				Mns_err_ie_codeset		= ie_codeset;
			}

			Mns_err_ie_id				= error_diagnostic_1;
			Mns_err_ie_instance			= i_ie_x;

				/* Send the error message to MNS */

			p_snd_msg_save				= p_snd_msg;
			p_snd_msg					= p_msg;
			ns_snd_mns 					(MNS_ERR_IN);
			p_snd_msg 					= p_snd_msg_save;

		}

		return (error_level);
	}

	Trap (TRAP_NS_ERROR, "error_set");

	return (0);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             ns_sort_error_stack - sort the NS error stack in increasing
				 error priorities order before executing the network-specific
				 error handler, so that the errors be processed in the proper
				 order.

Usage            ns_sort_error_stack ();

Common objects : error_stack[] table, nb_error, error_stack_access_idx;

*--------------------------------------------------------------------------*/

void ns_sort_error_stack ()
{
	uchar x_base, x_cur, x_lowest;
	uchar cur_level, lowest_level;

	for (x_base = 0; x_base < nb_error - 1; x_base++) {

		lowest_level = Error_stack_level (x_base);
		x_lowest     = x_base;

			/* search the lowest level in the remaining elements */

		for (x_cur = x_base + 1; x_cur < nb_error; x_cur++) {

			cur_level = Error_stack_level (x_cur);

			if (cur_level < lowest_level) {

					/* found a lower element: remember the index and level */

				x_lowest     = x_cur;
				lowest_level = cur_level;
			}

		} /* end for (x_cur) */

				/* if found a lower element than the base element: swap them */

		if (x_lowest != x_base) {
			struct error_stack_item tmp_error;		/* temporary swap element */

			Memcpy_far ((char FAR *)&tmp_error,
						(char FAR *)&error_stack [x_base],
						sizeof (struct error_stack_item));

			Memcpy_far ((char FAR *)&error_stack [x_base],
						(char FAR *)&error_stack [x_lowest],
						sizeof (struct error_stack_item));

			Memcpy_far ((char FAR *)&error_stack [x_lowest],
						(char FAR *)&tmp_error,
						sizeof (struct error_stack_item));

		}

			/* next base element */

	} /* end for (x_base) */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name				ns_build_error_table - init of NS network table.

Usage            	void ns_build_error_table ();

Return value :		void

Common constants and declarations : ns.h

Common objects : NS global variables.

*--------------------------------------------------------------------------*/

void ns_build_error_table ()

{

#if F_AT4 == ON
	if (at4 != NIL) {
		tab_error[at4]	= (uchar *)AT4_TABLE_ERROR;
	}
#endif

#if F_AT5 == ON
	if (at5 != NIL) {
		tab_error[at5]	= (uchar *)AT5_TABLE_ERROR;
	}
#endif

#if F_AT9 == ON
	if (at9 != NIL) {
		tab_error[at9]	= (uchar *)AT9_TABLE_ERROR;
	}
#endif

#if F_BIP == ON
	if (bip != NIL) {
		tab_error[bip]	= (uchar *)BIP_TABLE_ERROR;
	}
#endif

#if F_AU1 == ON
	if (au1 != NIL) {
		tab_error[au1] 	= (uchar *)AU1_TABLE_ERROR;
	}
#endif

#if F_BT2 == ON
	if (bt2 != NIL) {
		tab_error[bt2] 	= (uchar *)BT2_TABLE_ERROR;
	}
#endif

#if F_BV1 == ON
	if (bv1 != NIL) {
		tab_error[bv1] 	= (uchar *)BV1_TABLE_ERROR;
	}
#endif

#if F_DMS == ON
	if (dms != NIL) {
		tab_error[dms]	= (uchar *)DMS_TABLE_ERROR;
	}
#endif

#if F_ETS == ON
	if (ets != NIL) {
		tab_error[ets]	= (uchar *)ETS_TABLE_ERROR;
	}
#endif

#if F_A17 == ON
	if (a17 != NIL) {
		tab_error[a17]	= (uchar *)A17_TABLE_ERROR;
	}
#endif

#if F_A11 == ON
	if (a11 != NIL) {
		tab_error[a11]	= (uchar *)A11_TABLE_ERROR;
	}
#endif

#if F_E10 == ON
	if (e10 != NIL) {
		tab_error[e10]	= (uchar *)E10_TABLE_ERROR;
	}
#endif

#if F_KDD == ON
	if (kdd != NIL) {
		tab_error[kdd]	= (uchar *)KDD_TABLE_ERROR;
	}
#endif

#if F_NI1 == ON
	if (ni1 != NIL) {
		tab_error[ni1]	= (uchar *)NI1_TABLE_ERROR;
	}
#endif

#if F_NI2 == ON
	if (ni2 != NIL) {
		tab_error[ni2]	= (uchar *)NI2_TABLE_ERROR;
	}
#endif

#if F_NTT == ON
	if (ntt != NIL) {
		tab_error[ntt]	= (uchar *)NTT_TABLE_ERROR;
	}
#endif

#if F_QSI == ON
	if (qsi != NIL) {
		tab_error[qsi]	= (uchar *)QSI_TABLE_ERROR;
	}
#endif

#if F_HKT == ON
	if (hkt != NIL) {
		tab_error[hkt]	= (uchar *)HKT_TABLE_ERROR;
	}
#endif

#if F_SWD == ON
	if (swd != NIL) {
		tab_error[swd] 	= (uchar *)SWD_TABLE_ERROR;
	}
#endif

#if F_TR6 == ON
	if (tr6 != NIL) {
		tab_error[tr6] 	= (uchar *)TR6_TABLE_ERROR;
	}
#endif

#if F_VN2 == ON
	if (vn2 != NIL) {
		tab_error[vn2] 	= (uchar *)VN2_TABLE_ERROR;
	}
#endif

#if F_VN3 == ON
	if (vn3 != NIL) {
		tab_error[vn3] 	= (uchar *)VN3_TABLE_ERROR;
	}
#endif

#if F_VN6 == ON
	if (vn6 != NIL) {
		tab_error[vn6] 	= (uchar *)VN6_TABLE_ERROR;
	}
#endif

}

/*EOF*/
