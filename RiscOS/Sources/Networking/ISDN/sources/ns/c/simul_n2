
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - simul_n2.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        simul_nt - continuation.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if NS_SIM_BUILDER == ON

#	include "simul.h"

		/* External variables */

extern	uchar FAR	*p_info;					/* current address where to store the message information */

static	uchar		state = STATE_CALL_INIT_1;	/* network side state */

			/* Simul_nt variables */

	call_ref_t	v_call_ref;				/* call reference */
	char		g_call_origin[2];   	/* origination side of the call User or Network */
	call_ref_t	g_call_ref;				/* input call reference */
	call_ref_t 	g_call_ref_u;			/* user call reference */
	call_ref_t	g_call_ref_n;			/* network call reference */
	char 		g_spdu_id[2];			/* message type */

/*-------------------------------------------------------------------------*/

#if F_AT4 == ON
#	include "at4.build_n2"
#endif

#if F_AT5 == ON
#	include "at5.build_n2"
#endif

#if F_AT9 == ON
#	include "at9.build_n2"
#endif

#if F_BIP == ON
#	include "bip.build_n2"
#endif

#if F_AU1 == ON
#	include "au1.build_n2"
#endif

#if F_BV1 == ON
#	include "bv1.build_n2"
#endif

#if F_BT2 == ON
#	include "bt2.build_n2"
#endif

#if F_TR6 == ON
#	include "tr6.build_n2"
#endif

#if F_ETS == ON
#	include "ets.build_n2"
#endif

#if F_A17 == ON
#	include "a17.build_n2"
#endif

#if F_A11 == ON
#	include "a11.build_n2"
#endif

#if F_E10 == ON
#	include "e10.build_n2"
#endif

#if F_VN2 == ON
#	include "vn2.build_n2"
#endif

#if F_VN3 == ON
#	include "vn3.build_n2"
#endif

#if F_VN6 == ON
#	include "vn6.build_n2"
#endif

#if F_KDD == ON
#	include "kdd.build_n2"
#endif

#if F_NI1 == ON
#	include "ni1.build_n2"
#endif

#if F_NI2 == ON
#	include "ni2.build_n2"
#endif

#if F_DMS == ON
#	include "dms.build_n2"
#endif

#if F_NTT == ON
#	include "ntt.build_n2"
#endif

#if F_SWD == ON
#	include "swd.build_n2"
#endif

#if F_QSI == ON
#	include "qsi.build_n2"
#endif

#if F_HKT == ON
#	include "hkt.build_n2"
#endif

/*-------------------------------------------------------------------------*/

uchar mg_call_ref	()
{
	char	str[10];

	str[0] = '\0';

	Prompt	("  Call_ref (P for PRI)", 10s, &str[0]);
	Scan	(10s, &str[0]);
	Echo	(10s, &str[0]);

	if (Toupper (str[0]) == 'P') {

			/* PRI call reference => length is 2 */

		v_call_ref = atoi (&str[1]);
		return (2);

	} else {

			/* BRI call reference => length is 1 */

		v_call_ref = atoi (&str[0]);
		return (1);
	}

}

/*------------------------------------------------------------------------*/

void mg_call_origination	()
{

	Prompt	(" call origination (U, N)", c, g_call_origin[0]);
	Scan 	(1s, g_call_origin);
	Echo	(c, g_call_origin[0]);
}

/*-------------------------------------------------------------------------*/

void mg_spdu_id ()
{

	Prompt	("   spdu_id or scenario #", c, g_spdu_id[0]);
	Scan	(1s, g_spdu_id);
	Echo	(c, g_spdu_id[0]);
}

/*-------------------------------------------------------------------------*/

void pr_error_code ()
{

	fprintf (f_out, "\n              SPDU builder error codes\n");
	fprintf (f_out, "\n       %c = protocol discriminator error",	ERROR_PROTOCOL_DISCR);
	fprintf (f_out, "\n       %c = call reference length error",	ERROR_CALL_REF_LGTH);
	fprintf (f_out, "\n       %c = call reference padding error",	ERROR_CALL_REF_PAD);
	fprintf (f_out, "\n       %c = message length error ",			ERROR_MESSAGE_LGTH);
	fprintf (f_out, "\n       %c = mandatory IE length error",		ERROR_IE_M_LGTH);
	fprintf (f_out, "\n       %c = mandatory IE content error",		ERROR_IE_M_CONTENT);
	fprintf (f_out, "\n       %c = mandatory IE missing error",		ERROR_IE_M_MISSING);
	fprintf (f_out, "\n       %c = optional IE length error",		ERROR_IE_O_LGTH);
	fprintf (f_out, "\n       %c = optional IE content error",		ERROR_IE_O_CONTENT);
	fprintf (f_out, "\n       %c = IE out of sequence",				ERROR_IE_SEQUENCE);
	fprintf (f_out, "\n       %c = unknow IE error",				ERROR_IE_UNKNOWN);
	fprintf (f_out, "\n");
}

/*-------------------------------------------------------------------------*/

#endif

/*EOF*/
