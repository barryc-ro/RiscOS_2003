
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - simul_nt.c continued in simul_n2.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		  build_sdu_dl_to_n - implements the building of a communication
 *						       message to be sent to a NS entity.
 *
 *        build_pdu_ns - implements the building of a network protocol data
 *                       unit of a call connection.
 *
 *		  pr_dl_to_n_code - implements the printing of the DL to NS
 *							 primitives list.
 *
 *		  mg_ns_hexa - implements the building of a message which
 *						content is in hexadecimal form.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"

#if NS_SIM_BUILDER == ON
#	include "simul.h"


		/* global variables */

uchar FAR			*p_info;				/* current address where to store the message information */
uchar FAR			*p_proto;				/* current address where to store the protocol discriminator */

extern	call_ref_t 	v_call_ref;				/* call reference */
extern	char		g_call_origin[2];   	/* origination side of the call User or Network */
extern	call_ref_t	g_call_ref;				/* input call reference */
extern 	call_ref_t 	g_call_ref_u;			/* user call reference */
extern  call_ref_t	g_call_ref_n;			/* network call reference */
extern 	char 		g_spdu_id[2];			/* message type */
extern	char		g_err_code [2];			/* error code */


extern	uint		ns_pdu_2;				/* simulation flag */

static	uchar FAR	*p_ie_o = P_NIL;		/* optional IE address */
static	uchar FAR	*p_ie_m = P_NIL;		/* mandatory IE address */


/*-------------------------------------------------------------------------*/

void pr_dl_to_n_code ()
{
	fprintf (f_out, "		%c : DL establish indication",				DL_EST_IN);
	fprintf (f_out, "\n		%c : DL establish confirm",					DL_EST_CO);
	fprintf (f_out, "\n		%c : DL release indication",				DL_REL_IN);
	fprintf (f_out, "\n		%c : DL release confirm",					DL_REL_CO);
	fprintf (f_out, "\n		%c : DL data indication",					DL_DA_IN);
	fprintf (f_out, "\n		%c : DL unit data indication",				DL_U_DA_IN);
	fprintf (f_out, "\n		%c : DL information commitment confirm",	DL_COMMIT_CO);
	fprintf (f_out, "\n");

}

uchar build_sdu_dl_to_n ()
{

	mg_nai 	();
	g_sapi 	= DL_SAPI_SIG;
	mg_ces 	();
	mg_code ();

	if (Ns_access_dl_na (g_nai, g_ces) == NOK) {
		return (NOK);
	}

	while (g_code[0] == '?') {
		pr_dl_to_n_code ();
		mg_code ();
	}

	switch (g_code[0]) {

		case DL_DA_IN   :
		case DL_U_DA_IN :

			Buffer_alloc;

			S_msg_init_link_buffer;				/* link the buffer */

			if (ns_pdu_2 == OFF) {
				Buffer_data_size = build_pdu_ns (Buffer_a_start_data);

			} else {

				Buffer_data_size = build_pdu_ns_2 (Buffer_a_start_data);
			}

			if (Buffer_data_size == 0) {
				Free_buffer (p_buffer);
				p_buffer = P_NIL;
				mg_err ("build_sdu_dl_to_n : null size");
				return (NOK);
			}
			break;

		case DL_EST_IN :
		case DL_EST_CO :
			g_inf0 = 65;		/* load TEI value */
			break;
	}
	load_message (ENT_DL_D, ENT_NS);

	return (OK);
}

/*-------------------------------------------------------------------------*/

/*-------- macros used to store information in the spdu messages -----------*/

	/* Shift_to : puts codeset shift information */

#define Shift_to(codeset,locking)	*p_info++ = 0x90 + (locking<<3) + codeset

	/* Put_text_with_length : puts text with length infomrtion (as in DISPLAY IE) */

#define Put_text_with_length(text)\
				*p_info++ = sizeof(text)-1;\
				 Memcpy_far ((char FAR *)p_info, (char FAR *)text, sizeof(text)-1);\
				 p_info += sizeof(text)-1

	/* Put_text : puts text without length information (as in CALLING NUMBER IE) */

#define Put_text(text)\
				 Memcpy_far ((char FAR *)p_info, (char FAR *)text, sizeof(text)-1);\
				 p_info += sizeof(text)-1


#if NEW_FCT_STYLE == ON
	void check_proto (uchar FAR *p_data, ushort lg);
#else
	void check_proto ();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            build_pdu_ns - implements the simulation of the network side
					for a call connection.

Usage           ushort build_pdu_ns (p_data)
					uchar FAR *p_data : address where to store the message information.

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

ushort build_pdu_ns (p_data)
	uchar FAR *p_data;							/* address where to store the message information */
{
	uchar					call_ref_pad;   	/* call reference padding */
	uchar					call_ref_lgth;		/* length of the call reference */
	uchar					call_ref_max;		/* maximum call ref value */
	uchar                   protocol_discr;		/* protocol discriminator */

	p_ie_o = P_NIL;								/* optional IE address */
	p_ie_m = P_NIL;								/* mandatory IE address */

#if EQUIPMENT == NT2

		/* Access to NS NA context */

	if (ns_access_na ((uchar)g_nai) == NOK) {
		mg_err ("build_pdu_ns : nai");
		return (0);
	}

#endif

#if ONE_NETWORK == OFF

	if (ns_build_p_table () == NOK) {

		return (NOK);
	}

#endif

		/* Call reference */

	call_ref_lgth = mg_call_ref ();

	call_ref_max  = (call_ref_lgth == 1) ? 128 : 32767;

	if (v_call_ref != (call_ref_t)(-3)) {

		mg_call_origination ();

		if (Toupper (g_call_origin[0]) == 'U') {

			switch (v_call_ref) {

				case (call_ref_t)(-1) :

					do {

						g_call_ref_u = ((++g_call_ref_u == call_ref_max) ? 0 : g_call_ref_u);

					} while (g_call_ref_u == CALL_REF_GLOBAL_VAL);

					break;

				case (call_ref_t)(-2) :
					break;

				default :
					g_call_ref_u = v_call_ref;
			}

			g_call_ref = g_call_ref_u;

		} else if (Toupper (g_call_origin[0]) == 'N') {

			switch (v_call_ref) {

				case (call_ref_t)(-1) :

					do {

						g_call_ref_n = ((++g_call_ref_n == call_ref_max) ? 0 : g_call_ref_n);

					} while (g_call_ref_n == CALL_REF_GLOBAL_VAL);

					break;

				case (call_ref_t)(-2) :
					break;

				default :
					g_call_ref_n = v_call_ref;
			}

			g_call_ref = g_call_ref_n;

		} else if (Toupper (g_call_origin[0]) == 'Z') {

			*p_data++ = 0;
			*p_data++ = 0;
			*p_data   = 0;
			return (3);

		} else return (0);

	} else {

		g_call_ref = v_call_ref;
	}

	p_info = p_data; 							/* init p_info on starting address */

		/* Network message ID */

	spdu_id_s:
	mg_spdu_id ();

	if (g_spdu_id[0] ==  '?') {

		Pr_spdu_id ();
		goto spdu_id_s;
	}

	if (g_spdu_id[0] ==  '<') {		/* it is an 'extended' code (NS_EXT + xxx) */

		mg_spdu_id ();
		g_spdu_id[0] += NS_EXT;  
	}

#	if NS_MAINTENANCE_CAPABILITY == ON

		/* Normal values of the message header */

	if ((*g_spdu_id == DA_MAINT_SERVICE) ||
		(*g_spdu_id == DA_MAINT_SERVICE_ACK)) {

		protocol_discr 	= 0x43;

	} else {

		protocol_discr 	= Spdu_param_net_protocol_discriminator;
	}

#else
	protocol_discr 	= Spdu_param_net_protocol_discriminator;
#endif

	call_ref_pad 	= 0;

	if (Isupper ((uchar)(g_spdu_id[0]))) {

			/* Erroneous message */

			/* Get error code */

		mg_err_code ();

		while (g_err_code[0] == '?') {

			pr_error_code ();
			mg_err_code ();
		}

		switch (Toupper (g_err_code[0])) {

			case ERROR_PROTOCOL_DISCR :
				protocol_discr = 123;
				break;

			case ERROR_CALL_REF_PAD :
				call_ref_pad = 1;
				break;

			case ERROR_CALL_REF_LGTH :
				call_ref_lgth = 3;
				break;

			case ERROR_MESSAGE_LGTH :
				break;

			default :
				break;
		}
	}

		/* Message header builder */

	p_proto 	= p_info;
	*(p_info++) = protocol_discr;

	if (g_call_ref == (call_ref_t) (-3)) {

		*p_info++ = CALL_REF_NIL;

	} else {

		*(p_info++) = (call_ref_pad << 4) + call_ref_lgth;

		if (call_ref_lgth == 1) {

			if (Toupper (g_call_origin[0]) == 'U') {

				*(p_info++) = (CALL_REF_FLAG_SND_NOT_ORIG << 7) + (uchar)g_call_ref;

			} else {

				*(p_info++) = (CALL_REF_FLAG_SND_ORIG << 7) + (uchar)g_call_ref;
			}

		} else {

			if (Toupper (g_call_origin[0]) == 'U') {

				*(p_info++) = (uchar)((CALL_REF_FLAG_SND_NOT_ORIG << 7) + g_call_ref);

			} else {

				*(p_info++) = (uchar)((CALL_REF_FLAG_SND_ORIG << 7) + g_call_ref);
			}

			*p_info++ = (uchar)(g_call_ref >> 8);
		}
	}

		/* build the PDU according network specification */

	Net_build_pdu_ns ();

	if (Isupper ((uchar)(g_spdu_id[0]))) {

			/* Erroneous message */

		switch (Toupper (g_err_code[0])) {

				case ERROR_IE_M_LGTH :
					if (p_ie_m != NIL) {
						*(p_ie_m + 1) = 150;
					}
					break;

				case ERROR_IE_M_CONTENT :
					if (p_ie_m != NIL) {
						*(p_ie_m + 2) = 255;
					}
					break;

				case ERROR_IE_M_MISSING :
					if (p_ie_m != NIL) {
						*p_ie_m = *p_ie_o;
					}
					break;

				case ERROR_IE_O_LGTH :
					if (p_ie_o != NIL) {
						*(p_ie_o + 1) = 150;
					}
					break;

				case ERROR_IE_O_CONTENT :
					if (p_ie_o != NIL) {
						*(p_ie_o + 2) = 255;
					}
					break;

				case ERROR_IE_SEQUENCE :
					break;

				case ERROR_IE_UNKNOWN :
					*p_info++ = 127;
					*p_info++ = 1;
					*p_info++ = 255;
					break;

				default :
					break;
		}
	}

	*p_info = '\0';

#	if NS_MAINTENANCE_CAPABILITY == ON

		check_proto (p_data, (ushort)(p_info - p_data));

#	endif

	return ((uint)(p_info - p_data));
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            mg_ns_hexa - implements the building of a message which
					content is in hexadecimal form.

*--------------------------------------------------------------------------*/

void mg_ns_hexa ()
{
	char	str[10];

	str[0] = '\0';

	for (;;) {

		Prompt	("Hexa byte (-1 to end) ", 2s, &str[0]);
		Scan	(2s, &str[0]);
		Echo	(2s, &str[0]);

		if ((! Isxdigit (str[0])) && (str[0] != 'P')) {
			break;
		}

#		if NS_MAINTENANCE_CAPABILITY == ON /* { */

			if (str[0] == 'P') {

					/* By default : 3 */

				*p_proto = 0x3;
				continue;
			}

#		endif

		*p_info++ = xtoi (&str[0]);

	}
}

/*-------------------------------------------------------------------------*/

#if NS_MAINTENANCE_CAPABILITY == ON

void check_proto (p_data, lg)
	uchar FAR	*p_data;
	ushort		lg;
{
	ushort		i;

	i = p_data[1] + 2;

	if ((p_data[i] != MAINT_SERVICE) &&
		(p_data[i] != MAINT_SERVICE_ACK)) {

		return;
	}

		/* This can be a CONN_ACK or CONNECT */

	if (p_data [i+1] != CHANGE_STATUS) {

		return;
	}

	*p_proto = 0x03;

	if (Na_network == ni2) {

		*p_proto = 0x43;
	}

	if ((Na_network != e10) && (Na_network != at9)) return;

	i = 0;

	do {

		if (p_data[i] == 0x18) {

			if (p_data[i+2] == 0xAC) {

					/*
					 * If channel Id is about D channel
					 * change the protocol discriminator.
					 */

				*p_proto = 0x43;
			}

			return;
		}

		i++;

	} while (i < lg);
}

#endif


#if F_AT4 == ON
#	include "at4.build_nt"
#endif

#if F_AT5 == ON
#	include "at5.build_nt"
#endif

#if F_AT9 == ON
#	include "at9.build_nt"
#endif

#if F_BIP == ON
#	include "bip.build_nt"
#endif

#if F_AU1 == ON
#	include "au1.build_nt"
#endif

#if F_BV1 == ON
#	include "bv1.build_nt"
#endif

#if F_BT2 == ON
#	include "bt2.build_nt"
#endif

#if F_TR6 == ON
#	include "tr6.build_nt"
#endif

#if F_ETS == ON
#	include "ets.build_nt"
#endif

#if F_A17 == ON
#	include "a17.build_nt"
#endif

#if F_A11 == ON
#	include "a11.build_nt"
#endif

#if F_E10 == ON
#	include "e10.build_nt"
#endif

#if F_VN2 == ON
#	include "vn2.build_nt"
#endif

#if F_VN3 == ON
#	include "vn3.build_nt"
#endif

#if F_VN6 == ON
#	include "vn6.build_nt"
#endif

#if F_KDD == ON
#	include "kdd.build_nt"
#endif

#if F_NI1 == ON
#	include "ni1.build_nt"
#endif

#if F_NI2 == ON
#	include "ni2.build_nt"
#endif

#if F_DMS == ON
#	include "dms.build_nt"
#endif

#if F_NTT == ON
#	include "ntt.build_nt"
#endif

#if F_SWD == ON
#	include "swd.build_nt"
#endif

#if F_QSI == ON
#	include "qsi.build_nt"
#endif

#if F_HKT == ON
#	include "hkt.build_nt"
#endif

#endif	/* SIMULATION */


/*EOF*/
