
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ana_ns_2.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function : xxx_get_offset_nb
 *
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

		/* for CC <-> NS buffer decoding */

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset		ns_offset_t message_header;
#else
#	define Message_header_offset
#endif

#define	Next_instance_offset
#define	ie_val					uchar
#define	ie_array				uchar
#define ns_offset_t				uint

#if (NS_SIM_BUILDER == ON) || (NS_SIM_ANALYSER == ON)

#if F_VN2 == ON
#	include "vn2.net_mac"
#endif

#if F_VN3 == ON
#	include "vn3.net_mac"
#endif

#if F_VN6 == ON
#	include "vn6.net_mac"
#endif

#if F_KDD == ON
#	include "kdd.net_mac"
#endif

#if F_NI1 == ON
#	include "ni1.net_mac"
#endif

#if F_NI2 == ON
#	include "ni2.net_mac"
#endif

#if F_DMS == ON
#	include "dms.net_mac"
#endif

#if F_NTT == ON
#	include "ntt.net_mac"
#endif

#if F_SWD == ON
#	include "swd.net_mac"
#endif

#if F_QSI == ON
#	include "qsi.net_mac"
#endif

#if F_HKT == ON
#	include "hkt.net_mac"
#endif

/*-------------------------------------------------------------------------*

	For each primitive, except those containing no IE, this function
	returns the number of IE in the SSDU.

 *-------------------------------------------------------------------------*/

#if F_VN2 == ON

uchar vn2_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {


			case NS_CONN_RQ :
				return (sizeof (off_ns_vn2_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_vn2_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_vn2_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_vn2_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_vn2_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_vn2_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_vn2_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_vn2_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_vn2_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_vn2_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_vn2_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_vn2_call_proc_in) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_vn2_setup_ack_in) / sizeof (uint));

			case NS_SUSPEND_RQ :
				return (sizeof (off_ns_vn2_suspend_rq) / sizeof (uint));

			case NS_SUSPEND_CO :
				return (sizeof (off_ns_vn2_suspend_co) / sizeof (uint));

			case NS_RESUME_RQ :
				return (sizeof (off_ns_vn2_resume_rq) / sizeof (uint));

			case NS_RESUME_CO :
				return (sizeof (off_ns_vn2_resume_co) / sizeof (uint));

			case NS_USER_INFO_RQ :
				return (sizeof (off_ns_vn2_user_info_rq) / sizeof (uint));

			case NS_USER_INFO_IN :
				return (sizeof (off_ns_vn2_user_info_in) / sizeof (uint));

#			if NS_SPF_FACILITY == ON

				case NS_SPF_FACILITY_RQ :
					return (sizeof (off_ns_vn2_spf_facility_rq) / sizeof (uint));

				case NS_SPF_FACILITY_CO :
					return (sizeof (off_ns_vn2_spf_facility_co) / sizeof (uint));

				case NS_SPF_REGISTRATION_RQ :
					return (sizeof (off_ns_vn2_spf_reg_rq) / sizeof (uint));

				case NS_SPF_REGISTRATION_CO :
					return (sizeof (off_ns_vn2_spf_reg_co) / sizeof (uint));

#			endif

			case NS_ROUTED_CALL_IN :
				return (sizeof (off_ns_vn2_routed_call_in) / sizeof (uint));

#			if EQUIPMENT == NT2

				case NS_SUSPEND_IN :
					return (sizeof (off_ns_vn2_net_suspend_in) / sizeof (uint));

				case NS_SUSPEND_RS :
					return (sizeof (off_ns_vn2_net_suspend_rs) / sizeof (uint));

				case NS_RESUME_IN :
					return (sizeof (off_ns_vn2_net_resume_in) / sizeof (uint));

				case NS_RESUME_RS :
					return (sizeof (off_ns_vn2_net_resume_rs) / sizeof (uint));

#				if NS_SPF_FACILITY == ON

					case NS_SPF_FACILITY_IN :
						return (sizeof (off_ns_vn2_net_spf_facility_in) / sizeof (uint));

					case NS_SPF_FACILITY_RS :
						return (sizeof (off_ns_vn2_net_spf_facility_rs) / sizeof (uint));

					case NS_SPF_REGISTRATION_IN :
						return (sizeof (off_ns_vn2_net_spf_reg_in) / sizeof (uint));

					case NS_SPF_REGISTRATION_RS :
						return (sizeof (off_ns_vn2_net_spf_reg_rs) / sizeof (uint));

#				endif

				case NS_ROUTED_CALL_RQ :
					return (sizeof (off_ns_vn2_net_routed_call_rq) / sizeof (uint));

				case NS_INFO_RQ :
					return (sizeof (off_ns_vn2_info_rq) / sizeof (uint));

				case NS_INFO_IN :
					return (sizeof (off_ns_vn2_info_in) / sizeof (uint));

#			endif

	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_VN3 == ON

uchar vn3_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {


			case NS_CONN_RQ :
				return (sizeof (off_ns_vn3_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_vn3_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_vn3_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_vn3_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_vn3_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_vn3_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_vn3_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_vn3_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_vn3_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_vn3_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_vn3_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_vn3_call_proc_in) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_vn3_setup_ack_in) / sizeof (uint));

			case NS_SUSPEND_RQ :
				return (sizeof (off_ns_vn3_suspend_rq) / sizeof (uint));

			case NS_SUSPEND_CO :
				return (sizeof (off_ns_vn3_suspend_co) / sizeof (uint));

			case NS_RESUME_RQ :
				return (sizeof (off_ns_vn3_resume_rq) / sizeof (uint));

			case NS_RESUME_CO :
				return (sizeof (off_ns_vn3_resume_co) / sizeof (uint));

			case NS_USER_INFO_RQ :
				return (sizeof (off_ns_vn3_user_info_rq) / sizeof (uint));

			case NS_USER_INFO_IN :
				return (sizeof (off_ns_vn3_user_info_in) / sizeof (uint));

#if NS_SPF_FACILITY == ON

			case NS_SPF_FACILITY_RQ :
				return (sizeof (off_ns_vn3_spf_facility_rq) / sizeof (uint));

			case NS_SPF_FACILITY_CO :
				return (sizeof (off_ns_vn3_spf_facility_co) / sizeof (uint));

			case NS_SPF_REGISTRATION_RQ :
				return (sizeof (off_ns_vn3_spf_reg_rq) / sizeof (uint));

			case NS_SPF_REGISTRATION_CO :
				return (sizeof (off_ns_vn3_spf_reg_co) / sizeof (uint));

#endif

			case NS_ROUTED_CALL_IN :
				return (sizeof (off_ns_vn3_routed_call_in) / sizeof (uint));

#			if EQUIPMENT == NT2

				case NS_SUSPEND_IN :
					return (sizeof (off_ns_vn3_net_suspend_in) / sizeof (uint));

				case NS_SUSPEND_RS :
					return (sizeof (off_ns_vn3_net_suspend_rs) / sizeof (uint));

				case NS_RESUME_IN :
					return (sizeof (off_ns_vn3_net_resume_in) / sizeof (uint));

				case NS_RESUME_RS :
					return (sizeof (off_ns_vn3_net_resume_rs) / sizeof (uint));

#				if NS_SPF_FACILITY == ON

					case NS_SPF_FACILITY_IN :
						return (sizeof (off_ns_vn3_net_spf_facility_in) / sizeof (uint));

					case NS_SPF_FACILITY_RS :
						return (sizeof (off_ns_vn3_net_spf_facility_rs) / sizeof (uint));

					case NS_SPF_REGISTRATION_IN :
						return (sizeof (off_ns_vn3_net_spf_reg_in) / sizeof (uint));

					case NS_SPF_REGISTRATION_RS :
						return (sizeof (off_ns_vn3_net_spf_reg_rs) / sizeof (uint));
#				endif

/*
				case NS_ROUTED_CALL_RQ :
					return (sizeof (off_ns_vn3_net_routed_call_rq) / sizeof (uint));
*/

				case NS_INFO_RQ :
					return (sizeof (off_ns_vn3_info_rq) / sizeof (uint));

				case NS_INFO_IN :
					return (sizeof (off_ns_vn3_info_in) / sizeof (uint));

				case NS_CONGEST_CONTROL_RQ :
					return (sizeof (off_ns_vn3_net_con_con_rq) / sizeof (uint));

#			endif

			case NS_CONGEST_CONTROL_IN :
				return (sizeof (off_ns_vn3_con_con_in) / sizeof (uint));

			case NS_NOTIFY_RQ :
				return (sizeof (off_ns_vn3_notify_rq) / sizeof (uint));

			case NS_NOTIFY_IN :
				return (sizeof (off_ns_vn3_notify_in) / sizeof (uint));

			case NS_RESTART_RQ :
				return (0);

			case NS_RESTART_IN :
				return (sizeof (off_ns_vn3_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_vn3_restart_rs) / sizeof (uint));

			case NS_STATUS_ENQ_RQ :
				break;

	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_VN6 == ON

uchar vn6_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {

			case NS_CONN_RQ :
				return (sizeof (off_ns_vn6_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_vn6_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_vn6_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_vn6_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_vn6_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_vn6_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_vn6_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_vn6_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_vn6_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_vn6_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_vn6_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_vn6_call_proc_in) / sizeof (uint));

			case NS_CONGEST_CONTROL_IN :
				return (sizeof (off_ns_vn6_con_con_in) / sizeof (uint));

#			if EQUIPMENT == NT2

				case NS_CONGEST_CONTROL_RQ :
					return (sizeof (off_ns_vn6_net_con_con_rq) / sizeof (uint));

				case NS_SUSPEND_IN :
					return (sizeof (off_ns_vn6_net_suspend_in) / sizeof (uint));

				case NS_SUSPEND_RS :
					return (sizeof (off_ns_vn6_net_suspend_rs) / sizeof (uint));

				case NS_RESUME_IN :
					return (sizeof (off_ns_vn6_net_resume_in) / sizeof (uint));

				case NS_RESUME_RS :
					return (sizeof (off_ns_vn6_net_resume_rs) / sizeof (uint));

#				if NS_SPF_FACILITY == ON

					case NS_SPF_FACILITY_IN :
						return (sizeof (off_ns_vn6_net_spf_facility_in) / sizeof (uint));

					case NS_SPF_FACILITY_RS :
						return (sizeof (off_ns_vn6_net_spf_facility_rs) / sizeof (uint));

					case NS_SPF_REGISTRATION_IN :
						return (sizeof (off_ns_vn6_net_spf_reg_in) / sizeof (uint));

					case NS_SPF_REGISTRATION_RS :
						return (sizeof (off_ns_vn6_net_spf_reg_rs) / sizeof (uint));
#				endif

#			endif

#			if NS_SPF_FACILITY == ON

				case NS_SPF_FACILITY_RQ :
					return (sizeof (off_ns_vn6_spf_facility_rq) / sizeof (uint));

				case NS_SPF_FACILITY_CO :
					return (sizeof (off_ns_vn6_spf_facility_co) / sizeof (uint));

				case NS_SPF_REGISTRATION_RQ :
					return (sizeof (off_ns_vn6_spf_reg_rq) / sizeof (uint));

				case NS_SPF_REGISTRATION_CO :
					return (sizeof (off_ns_vn6_spf_reg_co) / sizeof (uint));

#			endif
			case NS_PROGRESS_RQ :
				return (sizeof (off_ns_vn6_progress_rq) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_vn6_progress_in) / sizeof (uint));

			case NS_SUSPEND_RQ :
				return (sizeof (off_ns_vn6_suspend_rq) / sizeof (uint));

			case NS_SUSPEND_CO :
				return (sizeof (off_ns_vn6_suspend_co) / sizeof (uint));

			case NS_RESUME_RQ :
				return (sizeof (off_ns_vn6_resume_rq) / sizeof (uint));

			case NS_RESUME_CO :
				return (sizeof (off_ns_vn6_resume_co) / sizeof (uint));

			case NS_NOTIFY_RQ :
				return (sizeof (off_ns_vn6_notify_rq) / sizeof (uint));

			case NS_NOTIFY_IN :
				return (sizeof (off_ns_vn6_notify_in) / sizeof (uint));

			case NS_USER_INFO_RQ :
				return (sizeof (off_ns_vn6_user_info_rq) / sizeof (uint));

			case NS_USER_INFO_IN :
				return (sizeof (off_ns_vn6_user_info_in) / sizeof (uint));

			case NS_SETUP_ACK_RQ :
				return (sizeof (off_ns_vn6_setup_ack_rq) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_vn6_setup_ack_in) / sizeof (uint));

			case NS_STATUS_ENQ_RQ :
				break;

			case NS_INFO_RQ :
				return (sizeof (off_ns_vn6_info_rq) / sizeof (uint));

			case NS_INFO_IN :
				return (sizeof (off_ns_vn6_info_in) / sizeof (uint));

			case NS_RESTART_RQ :
				return (1);

			case NS_RESTART_IN :
				return (sizeof (off_ns_vn6_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_vn6_restart_rs) / sizeof (uint));
	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_KDD == ON

uchar kdd_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {


			case NS_CONN_RQ :
				return (sizeof (off_ns_kdd_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_kdd_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_kdd_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_kdd_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_kdd_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_kdd_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_kdd_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_kdd_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_kdd_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_kdd_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_kdd_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_kdd_call_proc_in) / sizeof (uint));

			case NS_PROGRESS_RQ :
				return (sizeof (off_ns_kdd_progress_rq) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_kdd_progress_in) / sizeof (uint));

			case NS_RESTART_RQ :
				return (sizeof (off_ns_kdd_restart_rq) / sizeof (uint));

			case NS_RESTART_IN :
				return (sizeof (off_ns_kdd_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_kdd_restart_rs) / sizeof (uint));
	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_NI1 == ON

uchar ni1_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {


			case NS_CONN_RQ :
				return (sizeof (off_ns_ni1_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_ni1_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_ni1_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_ni1_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_ni1_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_ni1_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_ni1_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_ni1_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_ni1_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_ni1_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_ni1_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_ni1_call_proc_in) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_ni1_setup_ack_in) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_ni1_progress_in) / sizeof (uint));

			case NS_HOLD_RQ :
				break;

			case NS_HOLD_IN :
				return (sizeof (off_ns_ni1_hold_in) / sizeof (uint));

			case NS_HOLD_RS :
				return (sizeof (off_ns_ni1_hold_rs) / sizeof (uint));

			case NS_HOLD_CO :
				return (sizeof (off_ns_ni1_hold_co) / sizeof (uint));

			case NS_RET_RQ :
				return (sizeof (off_ns_ni1_ret_rq) / sizeof (uint));

			case NS_RET_CO :
				return (sizeof (off_ns_ni1_ret_co) / sizeof (uint));

			case NS_NOTIFY_IN :
				return (sizeof (off_ns_ni1_notify_in) / sizeof (uint));

			case NS_INFO_RQ :
				return (sizeof (off_ns_ni1_info_rq) / sizeof (uint));

			case NS_INFO_IN :
				return (sizeof (off_ns_ni1_info_in) / sizeof (uint));
	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_NI2 == ON

uchar ni2_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {


			case NS_CONN_RQ :
				return (sizeof (off_ns_ni2_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_ni2_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_ni2_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_ni2_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_ni2_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_ni2_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_ni2_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_ni2_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_ni2_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_ni2_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_ni2_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_ni2_call_proc_in) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_ni2_setup_ack_in) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_ni2_progress_in) / sizeof (uint));

			case NS_HOLD_RQ :
				break;

			case NS_HOLD_IN :
				return (sizeof (off_ns_ni2_hold_in) / sizeof (uint));

			case NS_HOLD_RS :
				return (sizeof (off_ns_ni2_hold_rs) / sizeof (uint));

			case NS_HOLD_CO :
				return (sizeof (off_ns_ni2_hold_co) / sizeof (uint));

			case NS_RET_RQ :
				return (sizeof (off_ns_ni2_ret_rq) / sizeof (uint));

			case NS_RET_CO :
				return (sizeof (off_ns_ni2_ret_co) / sizeof (uint));

			case NS_NOTIFY_IN :
				return (sizeof (off_ns_ni2_notify_in) / sizeof (uint));

			case NS_INFO_RQ :
				return (sizeof (off_ns_ni2_info_rq) / sizeof (uint));

			case NS_INFO_IN :
				return (sizeof (off_ns_ni2_info_in) / sizeof (uint));

#		if NI2_SUPPLEMENTARY_SERVICES == ON
			case NS_K_SETUP_IN :
				return (sizeof (off_ns_ni2_key_setup_in) / sizeof (uint));

			case NS_K_REL_IN :
				return (sizeof (off_ns_ni2_key_rel_in) / sizeof (uint));

			case NS_K_HOLD_IN :
				return (sizeof (off_ns_ni2_key_hold_in) / sizeof (uint));
#		endif

			case NS_RESTART_RQ :
				return (0);

			case NS_RESTART_IN :
				return (sizeof (off_ns_ni2_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_ni2_restart_rs) / sizeof (uint));
	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_DMS == ON

uchar dms_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {


			case NS_CONN_RQ :
				return (sizeof (off_ns_dms_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_dms_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_dms_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_dms_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_dms_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_dms_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_dms_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_dms_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_dms_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_dms_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_dms_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_dms_call_proc_in) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_dms_setup_ack_in) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_dms_progress_in) / sizeof (uint));

			case NS_HOLD_RS :
				return (sizeof (off_ns_dms_hold_rs) / sizeof (uint));

			case NS_HOLD_CO :
				return (sizeof (off_ns_dms_hold_co) / sizeof (uint));

			case NS_RET_RQ :
				return (sizeof (off_ns_dms_ret_rq) / sizeof (uint));

			case NS_RET_CO :
				return (sizeof (off_ns_dms_ret_co) / sizeof (uint));

			case NS_FAC_RQ :
				return (sizeof (off_ns_dms_fac_rq) / sizeof (uint));

			case NS_FAC_IN :
				return (sizeof (off_ns_dms_fac_in) / sizeof (uint));

			case NS_NOTIFY_IN :
				return (sizeof (off_ns_dms_notify_in) / sizeof (uint));

			case NS_HOLD_IN :
				return (sizeof (off_ns_dms_hold_in) / sizeof (uint));

			case NS_HOLD_RQ :
				break;

			case NS_INFO_RQ :
				return (sizeof (off_ns_dms_info_rq) / sizeof (uint));

			case NS_INFO_IN :
				return (sizeof (off_ns_dms_info_in) / sizeof (uint));

			case NS_RESTART_RQ :
				return (0);

			case NS_RESTART_IN :
				return (sizeof (off_ns_dms_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_dms_restart_rs) / sizeof (uint));

	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_NTT == ON

uchar ntt_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {

			case NS_CONN_RQ :
				return (sizeof (off_ns_ntt_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_ntt_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_ntt_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_ntt_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_ntt_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_ntt_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_ntt_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_ntt_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_ntt_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_ntt_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_ntt_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_ntt_call_proc_in) / sizeof (uint));

			case NS_CONGEST_CONTROL_IN :
				return (sizeof (off_ns_ntt_con_con_in) / sizeof (uint));

			case NS_PROGRESS_RQ :
				return (sizeof (off_ns_ntt_progress_rq) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_ntt_progress_in) / sizeof (uint));

			case NS_SUSPEND_RQ :
				return (sizeof (off_ns_ntt_suspend_rq) / sizeof (uint));

			case NS_SUSPEND_CO :
				return (sizeof (off_ns_ntt_suspend_co) / sizeof (uint));

			case NS_RESUME_RQ :
				return (sizeof (off_ns_ntt_resume_rq) / sizeof (uint));

			case NS_RESUME_CO :
				return (sizeof (off_ns_ntt_resume_co) / sizeof (uint));

			case NS_SPF_FACILITY_RQ :
				return (sizeof (off_ns_ntt_spf_fac_rq) / sizeof (uint));

			case NS_SPF_FACILITY_CO :
				return (sizeof (off_ns_ntt_spf_fac_co) / sizeof (uint));

			case NS_USER_INFO_RQ :
				return (sizeof (off_ns_ntt_user_info_rq) / sizeof (uint));

			case NS_USER_INFO_IN :
				return (sizeof (off_ns_ntt_user_info_in) / sizeof (uint));

/*			case NS_RESTART_RQ :
				return (sizeof (off_ns_ntt_restart_rq) / sizeof (uint));
*/
			case NS_RESTART_IN :
				return (sizeof (off_ns_ntt_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_ntt_restart_rs) / sizeof (uint));

			case NS_STATUS_ENQ_RQ :
				return (sizeof (off_ns_ntt_status_enq_rq) / sizeof (uint));


			case NS_INFO_RQ :
				return (sizeof (off_ns_ntt_info_rq) / sizeof (uint));

			case NS_INFO_IN :
				return (sizeof (off_ns_ntt_info_in) / sizeof (uint));
	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_SWD == ON

uchar swd_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {

			case NS_CONN_RQ :
				return (sizeof (off_ns_swd_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_swd_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_swd_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_swd_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_swd_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_swd_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_swd_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_swd_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_swd_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_swd_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_swd_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_swd_call_proc_in) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_swd_setup_ack_in) / sizeof (uint));

			case NS_CONGEST_CONTROL_IN :
				return (sizeof (off_ns_swd_con_con_in) / sizeof (uint));
/*$
			case NS_CONGEST_CONTROL_RQ :
				return (sizeof (off_ns_swd_con_con_rq) / sizeof (uint));
*/
			case NS_PROGRESS_RQ :
				return (sizeof (off_ns_swd_progress_rq) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_swd_progress_in) / sizeof (uint));

			case NS_NOTIFY_IN :
				return (sizeof (off_ns_swd_notify_in) / sizeof (uint));

			case NS_USER_INFO_RQ :
				return (sizeof (off_ns_swd_user_info_rq) / sizeof (uint));

			case NS_USER_INFO_IN :
				return (sizeof (off_ns_swd_info_in) / sizeof (uint));

/*
			case NS_RESTART_RQ :
				return (sizeof (off_ns_swd_restart_rq) / sizeof (uint));
*/
			case NS_RESTART_IN :
				return (sizeof (off_ns_swd_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_swd_restart_rs) / sizeof (uint));

			case NS_INFO_RQ :
				return (sizeof (off_ns_swd_info_rq) / sizeof (uint));

			case NS_INFO_IN :
				return (sizeof (off_ns_swd_info_in) / sizeof (uint));
	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_QSI == ON

uchar qsi_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {

			case NS_CONN_RQ :
				return (sizeof (off_ns_qsi_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_qsi_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_qsi_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_qsi_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_qsi_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_qsi_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_qsi_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_qsi_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_qsi_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_qsi_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_qsi_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_qsi_call_proc_in) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_qsi_setup_ack_in) / sizeof (uint));

			case NS_PROGRESS_RQ :
				return (sizeof (off_ns_qsi_progress_rq) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_qsi_progress_in) / sizeof (uint));

			case NS_RESTART_RQ :
				return (sizeof (off_ns_qsi_restart_rq) / sizeof (uint));

			case NS_RESTART_IN :
				return (sizeof (off_ns_qsi_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_qsi_restart_rs) / sizeof (uint));

			case NS_INFO_RQ :
				return (sizeof (off_ns_qsi_info_rq) / sizeof (uint));

			case NS_INFO_IN :
				return (sizeof (off_ns_qsi_info_in) / sizeof (uint));

			case NS_STATUS_ENQ_RQ :
				return (sizeof (off_ns_qsi_status_enq_rq) / sizeof (uint));

#			if NS_SPF_FACILITY == ON

				case NS_FAC_RQ :
					return (sizeof (off_ns_qsi_fac_rq) / sizeof (uint));
				case NS_FAC_CO :
					return (sizeof (off_ns_qsi_fac_co) / sizeof (uint));
#			endif

			case NS_NOTIFY_RQ :
			case NS_NOTIFY_IN :
				return (sizeof (off_ns_qsi_notify_rq) / sizeof (uint));

	}

	return (BYTE_VAL_NIL);
}

#endif

#if F_HKT == ON

uchar hkt_get_offset_nb (msg_code)
	code_t msg_code;
{
	switch (msg_code) {


			case NS_CONN_RQ :
				return (sizeof (off_ns_hkt_conn_rq) / sizeof (uint));

			case NS_CONN_IN :
				return (sizeof (off_ns_hkt_conn_in) / sizeof (uint));

			case NS_CONN_RS :
				return (sizeof (off_ns_hkt_conn_rs) / sizeof (uint));

			case NS_CONN_CO :
				return (sizeof (off_ns_hkt_conn_co) / sizeof (uint));

			case NS_CLEAR_RQ :
				return (sizeof (off_ns_hkt_clear_rq) / sizeof (uint));

			case NS_CLEAR_IN :
				return (sizeof (off_ns_hkt_clear_in) / sizeof (uint));

			case NS_CLEAR_RS :
				return (sizeof (off_ns_hkt_clear_rs) / sizeof (uint));

			case NS_CLEAR_CO :
				return (sizeof (off_ns_hkt_clear_co) / sizeof (uint));

			case NS_ALERT_RQ :
				return (sizeof (off_ns_hkt_alert_rq) / sizeof (uint));

			case NS_ALERT_IN :
				return (sizeof (off_ns_hkt_alert_in) / sizeof (uint));

			case NS_CALL_PROC_RQ :
				return (sizeof (off_ns_hkt_call_proc_rq) / sizeof (uint));

			case NS_CALL_PROC_IN :
				return (sizeof (off_ns_hkt_call_proc_in) / sizeof (uint));

			case NS_PROGRESS_RQ :
				return (sizeof (off_ns_hkt_progress_rq) / sizeof (uint));

			case NS_PROGRESS_IN :
				return (sizeof (off_ns_hkt_progress_in) / sizeof (uint));

			case NS_NOTIFY_RQ :
				return (sizeof (off_ns_hkt_notify_rq) / sizeof (uint));

			case NS_NOTIFY_IN :
				return (sizeof (off_ns_hkt_notify_in) / sizeof (uint));

			case NS_RESTART_RQ :
				return (sizeof (off_ns_hkt_restart_rq) / sizeof (uint));

			case NS_RESTART_IN :
				return (sizeof (off_ns_hkt_restart_in) / sizeof (uint));

			case NS_RESTART_RS :
				return (sizeof (off_ns_hkt_restart_rs) / sizeof (uint));

			case NS_SETUP_ACK_IN :
				return (sizeof (off_ns_hkt_setup_ack_in) / sizeof (uint));

			case NS_STATUS_ENQ_RQ :
				break;

			case NS_INFO_RQ :
				return (sizeof (off_ns_hkt_info_rq) / sizeof (uint));

			case NS_INFO_IN :
				return (sizeof (off_ns_hkt_info_in) / sizeof (uint));
	}

	return (BYTE_VAL_NIL);
}

#endif	/* HKT */


#endif	/* ANY SIMULATION */

/*EOF*/
