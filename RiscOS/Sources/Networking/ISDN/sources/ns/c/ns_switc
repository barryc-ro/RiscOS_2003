
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_switch.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		(in NET_SWITC.XXX)
 *        csc_dl_reinit - implement an unexpected data link reinit.
 *
 *        Circuit_switched_call - implements the processing of the call
 *		                          control procedures.
 *
 *
 *		  csc_clear_all_call - clear all the pending call.
 *
 *		  csc_dl_reset - implements a Data Link reset.
 *
 *		  csc_dl_failure - implements a Data Link failure.
 *
 *
 *        circuit_switched_call_n - implements the processing of the call
 *		                            control procedures.
 *
 *		  csc_clear_all_call_n - clear all the pending call.
 *
 *		  csc_dl_reset_n - implements a Data Link reset.
 *
 *		(in NET_SWITC.XXX)
 *        csc_dl_reinit_n - implement an unexpected data link reinit.
 *
 *		  csc_dl_failure_n - implements a Data Link failure.
 *
 *        ns_process_queue - implements the processing of the two
 *		  waiting queues waiting for DL establishment.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "ns.h"
#include "isdn.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "ctx_ext.h"

				/* Function declaration for state processing */

extern	struct message		FAR *p_msg_broadcast;	/* pointer on message to broadcast on the different INTERFACE nai's (AT9 SPID purpose) */


						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*                */
						/*----------------*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar circuit_switched_call ();

Related
functions usage void u0 .... u254 ()

Description     circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*                                CLEARING PROCEDURES
*
*       TE                         NT/NETWORK                        TE
* _________________             _________________            _________________
* |               |             |               |            |               |
* |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
* |==========>....|------------>|.......|.....  |            |               |
* | start T305    |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
* |<===========...|<------------|...    |    ...|----------->|...===========>|
* |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
* |             . | DA_DISC_COMP|     start T305|     REL    |  .<===========|
* |             ..|------------>|       |    ...|<-----------|...  start T308|
* |               |             |       |    .  |            |               |
* |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
* |               |             |       |    ...|----------->|...===========>|
* |               |             |       |       |            |     stop T308 |
* |---------------|             |---------------|            |---------------|
*
*/

/*==========================================================================

			- Network information element descriptions -
*/

#if F_AT4 == ON
#	include "at4.net_indx"
#	include "at4.net_swit"
#endif

#if F_AT5 == ON
#	include "at5.net_indx"
#	include "at5.net_swit"
#endif

#if F_AT9 == ON
#	include "at9.net_indx"
#	include "at9.net_swit"
#endif

#if F_BIP == ON
#	include "bip.net_indx"
#	include "bip.net_swit"
#endif

#if F_AU1 == ON
#	include "au1.net_indx"
#	include "au1.net_swit"
#endif

#if F_BV1 == ON
#	include "bv1.net_indx"
#	include "bv1.net_swit"
#endif

#if F_BT2 == ON
#	include "bt2.net_indx"
#	include "bt2.net_swit"
#endif

#if F_TR6 == ON
#	include "tr6.net_indx"
#	include "tr6.net_swit"
#endif

#if F_ETS == ON
#	include "ets.net_indx"
#	include "ets.net_swit"
#endif

#if F_A17 == ON
#	include "a17.net_indx"
#	include "a17.net_swit"
#endif

#if F_A11 == ON
#	include "a11.net_indx"
#	include "a11.net_swit"
#endif

#if F_E10 == ON
#	include "e10.net_indx"
#	include "e10.net_swit"
#endif

#if F_VN2 == ON
#	include "vn2.net_indx"
#	include "vn2.net_swit"
#endif

#if F_VN3 == ON
#	include "vn3.net_indx"
#	include "vn3.net_swit"
#endif

#if F_VN6 == ON
#	include "vn6.net_indx"
#	include "vn6.net_swit"
#endif

#if F_KDD == ON
#	include "kdd.net_indx"
#	include "kdd.net_swit"
#endif

#if F_NI1 == ON
#	include "ni1.net_indx"
#	include "ni1.net_swit"
#endif

#if F_NI2 == ON
#	include "ni2.net_indx"
#	include "ni2.net_swit"
#endif

#if F_DMS == ON
#	include "dms.net_indx"
#	include "dms.net_swit"
#endif

#if F_NTT == ON
#	include "ntt.net_indx"
#	include "ntt.net_swit"
#endif

#if F_SWD == ON
#	include "swd.net_indx"
#	include "swd.net_swit"
#endif

#if F_QSI == ON
#	include "qsi.net_indx"
#	include "qsi.net_swit"
#endif

#if F_HKT == ON
#	include "hkt.net_indx"
#	include "hkt.net_swit"
#endif

/*=========================================================================*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             csc_clear_all_call () - implements the processing of an abort
										 of the DL connection. it clears all
										 the pending call.

Usage            void csc_clear_all_call ();

Common constants and declarations : ns.h

Common objects : all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void csc_clear_all_call ()
{
	struct	call 	FAR *p_call_save;					/* save current p_call */

		/* Clear the waiting queues */

	ns_discard_queue_dl	();			/* to send messages */
	ns_discard_queue_cc ();			/* SSDU received messages */

		/* Clear the current calls if necessary */

	ns_access_first_call ();

	while (Call_current_exist) {

		if (Call_state != STATE_NIL) {
			p_call_save	= p_call;
			call_clear ();
			p_call = p_call_save;
		}

		ns_access_next_call ();

	} /* End for */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             csc_dl_reset - implements the processing of circuit switched
								call after a Data Link reset.
								(after receiving a DL_EST_CO or a DL_EST_IN)

Usage            void csc_dl_reset ();

Common constants and declarations : ns.h

Common objects : all call contexts of the current NA and the DL context.

*--------------------------------------------------------------------------*/

void csc_dl_reset ()
{

		/* Process the waiting queue */

	ns_process_queue ();

	if (Dl_call_count != 0) {

			/*
			   Scan all the call contexts allocated to
			   the Network Access.
			*/

#		if NS_T309 == ON

			if (Na_T309_option == ON) {

				Ns_spdu_processed = ON;		/* set flag to ON so that the STATUS are sent */

				ns_access_first_call ();

				while (Call_current_exist) {

						/* If the call is active, stop the T309 timer */

					if (Call_state == STATE_ACTIVE_10) {

						if (State_timer_ns (T309) == ON) {
							Stop_timer_ns (T309);
						}

						I_call_ref = Call_ref;
						Set_call_ref_not_nil ();
						send_state	(C_C_NORMAL_EVENT, C_V_NORMAL_UNSPECIFIED_31, DIAGNOSTIC_NIL);
					}

					if (Congestion_busy == ON) {

						ns_save_context (	DL_EST_IN,
											ENT_DL_D,
											ACTION_RESET
						);

						return;
					}

					ns_access_next_call ();
				}

				if (State_dl_timer (T3_DL_EST) == ON) {

					Stop_dl_timer (T3_DL_EST);
				}
			}

#		endif

		Dl_backup = OFF;
	}

#	if NS_RELEASE_DL == ON

		else if (Na_type == BRI) {
			Start_dl_timer (T3DL);
		}

#	endif

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	csc_dl_failure - implements the processing of circuit
							   switched call (csc) after a data link
							   failure (after receiving a DL_REL_IN).

Usage            	void csc_dl_failure ();

Related
functions usage 	void call_clear (void);
					void Send_to_call_control (uchar dl_primitive_code);
					void Send_to_dl (uchar dl_primitive_code);
					void State_timer (uchar x_timer);
					void Start_timer_ns (uchar x_timer);
					void Free_buffer (struct buffer FAR *p_buffer);

Common constants and declarations : ns.h

Common objects :    all call contexts of the current NA.

*--------------------------------------------------------------------------*/

void csc_dl_failure ()
{
#	if NS_DL_FAILURE_INT_CALL_CLEAR == ON
		struct call			FAR *p_call_save;		/* save p_call */
#	endif

#	if NS_T309 == ON
		uchar 				active_flag = OFF;		/* at least one active call */
#	endif


#	if NS_MAINTENANCE_CAPABILITY == ON

		if (ns_nfas == ON) {
			csc_dl_failure_nfas ();
			return;
		}

#	endif

		/* Discard the waiting message queues */

	ns_discard_queue_dl	();                 /* DL_DA_RQ queue */
	ns_discard_queue_cc ();   				/* incoming SSDU queue */

		/*
		   Scan all the call contexts of the NA
		   if a message is waiting for
		   connection establishment released it.
		   then process the call according to its state .
		*/

	ns_access_first_call ();

	while (Call_current_exist) {

		switch (Call_state) {

				/* State NULL */

			case STATE_NIL 		:
			case STATE_NULL_0 	:
					break;					/* nothing to do */

#			if NS_T309 == ON

					/* Call in active state */

				case STATE_ACTIVE_10 :

					if (Na_T309_option == ON) {

							/* Network access connected ? */

						if (Na_status == ON) {

							if (State_timer_ns (T309) == OFF) {
								Start_timer_ns (T309);							/* start timer T309 */
							}

							active_flag = ON;	 								/* to know if there is one active call */
							break;
						}

					}

					/* else process the default */

#			endif

			default :

#				if NS_DL_FAILURE_INT_CALL_CLEAR == ON

					if ((Congestion_busy == OFF) && (Net_param_ns_dl_failure_int_call_clear == ON)) {

							/* Set the i_call_ref */

						I_call_ref 		= Call_ref;
						Set_call_ref_not_nil ();

							/* Init the IE internal list */

						Reset_internal_ie ();

							/* Class and Value into a cause IE */

						set_i_cause (C_C_DATA_LINK_FAILURE, C_V_DL_RELEASE, P_NIL);

							/* Send the NS_CLEAR_CO primitive to the Call Control entity */

						Send_to_call_control (NS_CLEAR_CO);

							/* Clear the pending call */

						p_call_save	= p_call;

							/* clear the call */

						call_clear  ();
						p_call 		= p_call_save;

							/* stop all timers associated with DLCI if any */

						ns_stop_all_dlci_timers ();

					} else {

						if (Congestion_busy == ON) {

							ns_save_context (	DL_REL_IN,
												ENT_DL_D,
												ACTION_FAILURE
							);

							return;
						}

					}

#				endif

				break;

		} /* End switch Call_state */

		ns_access_next_call ();

	} /* End for */

#	if NS_T309 == ON

			/*
			   Is there one active call ?
			   If so, try to reestablish the DL by sending a DL ESTABLISH REQUEST.
			*/

		if ((Na_T309_option == ON) && (active_flag == ON)) {

			if (State_dl_timer (T3_DL_EST) == OFF) {
				Send_to_dl (DL_EST_RQ, Na_dl_ces);
				Lc_state = LC_AWAITING_EST;
				Start_dl_timer (T3_DL_EST);
			}
		}

#	endif


	Dl_backup = OFF;
}

#if NS_MAINTENANCE_CAPABILITY == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	csc_dl_failure_nfas - implements the processing of circuit
							   switched call (csc) after a data link
							   failure (after receiving a DL_REL_IN).

Usage            	void csc_dl_failure_nfas ();

Related
functions usage 	void call_clear (void);
					void Send_to_call_control (uchar dl_primitive_code);
					void Send_to_dl (uchar dl_primitive_code);
					void State_timer (uchar x_timer);
					void Start_timer_ns (uchar x_timer);
					void Free_buffer (struct buffer FAR *p_buffer);

Common constants and declarations : ns.h

Common objects :    all call contexts of the current NA.

*--------------------------------------------------------------------------*/

void csc_dl_failure_nfas ()
{

#	if NS_DL_FAILURE_INT_CALL_CLEAR == ON
		struct call			FAR *p_call_save;		/* save p_call */
#	endif

	uchar i;
	struct nsna FAR *p_nsna_sav;
	struct nsdl FAR *p_nsdl_sav;

	p_nsna_sav = p_nsna;
	p_nsdl_sav = p_nsdl;

#	if NS_D_BACKUP == ON

		if ((Nfas_nai_d_chan_backup_act == ON) &&
        	(Nai == Nfas_nai_backup_d_chan)) {

				/*
				 * Don't clear the calls if the DL_REL_IN comes on
				 * the link which is not active.
				 */

			return;
		}

#	endif

		/*
		 * Access to all the Nais managed by the current D channel
		 * bearer,
		 */

	for (i = 0; i < Nfas_nai_assoc_list_nb_nai + 1; i++) {

		if (ns_access_na (Nfas_nai_assoc_list(i)) == NOK) {
			return;
		}

		if (ns_access_dl_ces (Na_dl_ces) == NOK) {
			return;
		}

			/* Discard the waiting message queues */

		ns_discard_queue_dl	();                 /* DL_DA_RQ queue */
		ns_discard_queue_cc ();   				/* incoming SSDU queue */

			/*
			   Scan all the call contexts of the NA
			   if a message is waiting for
			   connection establishment released it.
			   then process the call according to its state .
			*/

		ns_access_first_call ();

		while (Call_current_exist) {

			switch (Call_state) {

					/* State NULL */

				case STATE_NIL 		:
				case STATE_NULL_0 	:
						break;					/* nothing to do */

#				if NS_T309 == ON

						/* Call in active state */

					case STATE_ACTIVE_10 :

						if (Na_T309_option == ON) {

								/* Network access connected ? */

							if (Na_status == ON) {

								if (State_timer_ns (T309) == OFF) {
									Start_timer_ns (T309);							/* start timer T309 */
								}

								break;
							}

						}

						/* else process the default */

#				endif

				default :

#					if NS_DL_FAILURE_INT_CALL_CLEAR == ON

						if ((Congestion_busy == OFF) && (Net_param_ns_dl_failure_int_call_clear == ON)) {

								/* Set the i_call_ref */

							I_call_ref 		= Call_ref;
							Set_call_ref_not_nil ();

								/* Init the IE internal list */

							Reset_internal_ie ();

								/* Class and Value into a cause IE */

							set_i_cause (C_C_DATA_LINK_FAILURE, C_V_DL_RELEASE, P_NIL);

								/* Send the NS_CLEAR_CO primitive to the Call Control entity */

							Send_to_call_control (NS_CLEAR_CO);

								/* Clear the pending call */

							p_call_save	= p_call;

								/* clear the call */

							call_clear  ();
							p_call 		= p_call_save;

								/* stop all timers associated with DLCI if any */

							ns_stop_all_dlci_timers ();

						} else {

							if (Congestion_busy == ON) {

								ns_save_context (	DL_REL_IN,
													ENT_DL_D,
													ACTION_FAILURE
								);

								return;
							}

						}

#					endif

					break;

			} /* End switch Call_state */

			ns_access_next_call ();

		} /* End for */

		Dl_backup = OFF;

	}

		/* Reset the contexts */

	p_nsna = p_nsna_sav;
	p_nsdl = p_nsdl_sav;

}

#endif

#if EQUIPMENT == NT2

						/*----------------*/
						/*                */
						/*  NETWORK SIDE  */
						/*                */
						/*----------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             csc_clear_all_call_n () - implements the processing of an
						   abort of the DL connection. it clears all
						   the pending call.

Usage            void csc_clear_all_call_n ();

Common constants and declarations : ns.h

Common objects : all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void csc_clear_all_call_n ()
{
	struct	call 	FAR *p_call_save;					/* save current p_call */

		/* Clear the waiting queues */

	ns_discard_queue_dl	();			/* DL_DA_DQ to send messages */
	ns_discard_queue_cc ();			/* incoming SSDU received messages */

		/* Clear the call if necessary */

	ns_access_first_call ();

	while (Call_current_exist) {

		if ((Call_ces == Dl_ces) && (Call_state != STATE_NIL)) {
			p_call_save	= p_call;
			call_clear ();
			p_call = p_call_save;
		}

		ns_access_next_call ();

	} /* End for */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             csc_dl_reset_n - implements the processing of circuit switched
								call after a Data Link reset.
								(after receiving a DL_EST_CO or a DL_EST_IN)

Usage            void csc_dl_reset_n ();

Common constants and declarations : ns.h

Common objects : all call contexts of the current NA.

*--------------------------------------------------------------------------*/

void csc_dl_reset_n ()
{

		/* Process the waiting queues */

	ns_process_queue ();

	if (Dl_call_count != 0) {

			/*
			   Scan all the call contexts allocated to
			   the Network Access.
			*/

#		if NS_T309 == ON

			if (Na_T309_option == ON) {

				ns_access_first_call ();

				while (Call_current_exist) {

					if ((Call_ces == Dl_ces) && (Call_state != STATE_NIL)) {

							/* If the call is active stop the T309 timer */

						if (Call_state == STATE_ACTIVE_10) {

							if (State_timer_ns (T309) == ON) {
								Stop_timer_ns (T309);
							}
						}
					}

					ns_access_next_call ();
				}

				if (State_dl_timer (T3_DL_EST) == ON) {

					Stop_dl_timer (T3_DL_EST);
				}
			}

#		endif

	}

#	if NS_RELEASE_DL == ON

		else if (Na_type == BRI) {
			Start_dl_timer (T3DL);
		}

#	endif

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	csc_dl_failure_n - implements the processing of circuit
									   switched call (csc) after a data link
									   failure (after receiving a DL_REL_IN).

Usage            	void csc_dl_failure_n ();

Related
functions usage 	void call_clear (void);
					void Send_to_call_control (uchar dl_primitive_code);
					void Send_to_dl (uchar dl_primitive_code);
					void State_timer (uchar x_timer);
					void Start_timer_ns (uchar x_timer);
					void Free_buffer (struct buffer FAR *p_buffer);

Common constants and declarations : ns.h

Common objects :    all call contexts of the current NA.

*--------------------------------------------------------------------------*/

void csc_dl_failure_n ()
{
	struct call			FAR *p_call_save;		/* save p_call */
	uchar					call_state;			/* state of current call */
    uchar					the_ces;			/* current ces index */

#	if NS_T309 == ON
		uchar 				 active_flag = OFF;	/* at least one active call */
#	endif

		/* Clear the waiting queues */

	ns_discard_queue_dl	();					/* to send messages */
	ns_discard_queue_cc ();					/* SSDU received messages */

		/*
		   Scan all the call contexts of the NA
		   if a message is waiting for
		   connection establishment released it.
		   then process the call according to its state .
		*/

	ns_access_first_call ();

	while (Call_current_exist) {

			/* init current call state to NIL to avoid process if not required */

		call_state = STATE_NIL;

		if (Call_ces_setup == DL_CES_BROADCAST) {

				/*	It is an outgoing call initiated on Broadcast Link Connection,
					several terminals may have responded so that a specific treatment
					is to be done : Is there a preselected ces (CONNECT received) ?
					If so -> use the global call state if the preselected ces is the released one,
					In other cases -> search if the individual call process associated
					with the DL connection is not in the null state and process acccording
					to the individual state.
				*/

			if (Call_ces_connect == Dl_ces) {

				call_state = Call_state;

			} else {

				if (Call_int_state != STATE_0_I) {

					call_state = Call_int_state;
				}
			}

		} else {

				/* update current call state only if the Call ces is the one which is released,
					else it is STATE_NIL to disable any process */

			if (Call_ces == Dl_ces) {

				call_state = Call_state;
			}
		}

		switch (call_state) {

			case STATE_NIL :
				break;					/* nothing to do */

#				if NS_T309 == ON

				case STATE_ACTIVE_10 :

					if (Na_T309_option == ON) {

						if (State_timer_ns (T309) == OFF) {
							Start_timer_ns (T309);						/* start timer T309 */
						}

						active_flag = ON;	/* to know if there is one active call */
						break;
					}

					/* else process the default */
#				endif

			default :

				if (Congestion_busy == OFF) {

						/* Set the i_call_ref */

					I_call_ref = Call_ref;
					Set_call_ref_not_nil ();

						/* Init the IE internal data */

					Reset_internal_ie ();

					if (Call_ces_setup == DL_CES_BROADCAST) {

							/*	It is an outgoing call initiated on Broadcast Link Connection :
								clear the individual process (state to 0 and stop Timer if any),
								Process global call clearing (as for not Broadcast call) only
                                if no other ces is able to proceed the call.
							*/

						Stop_int_timer  (CURRENT_INT_TIMER);
						Set_int_ces_state (STATE_0_I);

                        	/* reset the preselected ces if it is the released one */

						if (Call_ces_connect == Dl_ces) {

							Call_ces_connect = NIL;
						}

						if (Call_ces_connect != NIL) {

								/* there is a preselected ces which is different
									from the released one -> do not clear the call */

							break;
						}

						for (the_ces = 0; the_ces < DL_MX_DLCEP; the_ces++) {

							if (Call_int_ces_state (the_ces) != STATE_0_I) {

								/* there is another individual process which is able
									to proceed the call -> do not clear the call */

								break;
							}
						}

						if (the_ces < DL_MX_DLCEP) {

                        	break;
						}
					}

						/* Class and Value into a cause IE */

					set_i_cause (C_C_DATA_LINK_FAILURE, C_V_DL_RELEASE, P_NIL);

						/* Send the NS_CLEAR_CO primitive to the Call Control entity */

					Send_to_call_control (NS_CLEAR_CO);

						/* Clear the pending call */

					p_call_save	= p_call;
					call_clear	();		  	/* clear the call */
					p_call = p_call_save;

				} else {

					ns_save_context (	DL_REL_IN,
										ENT_DL_D,
										ACTION_FAILURE
					);

					return;
				}

				break;

		} /* End switch call_state */

		ns_access_next_call ();

	} /* End for */

		/*
		   Is there one active call ?
		   If so, try to reestablish the DL by sending
		   a DL ESTABLISH REQUEST.
		*/

#	if NS_T309 == ON

		if ((Na_T309_option == ON) && (active_flag == ON)) {

			if (State_dl_timer (T3_DL_EST) == OFF) {
				Send_to_dl (DL_EST_RQ, Dl_ces);
				Lc_state = LC_AWAITING_EST;
				Start_dl_timer (T3_DL_EST);
			}
		}

#	endif

	Dl_backup = OFF;
}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	ns_process_queue - implements the processing of the two
					waiting queues waiting for DL establishment.

Usage            	void ns_process_queue ();

Related
Common constants and declarations : ns.h

Common objects :    all call contexts of the current NA.

*--------------------------------------------------------------------------*/

void ns_process_queue ()
{
	struct nsdl		FAR	*p_nsdl_save;

		/* Release the received message */

	Free_msg (p_rcv_msg); p_rcv_msg = P_NIL;

		/* Save the current nsdl pointers */

	p_nsdl_save		= p_nsdl;

		/*
		   Is there message awaiting the DL establishment ?
		   If so send the DL_DA_RQ message.
		*/

	while (ns_out_queue_dl () == OK) {
		ns_snd_dl (DL_DA_RQ, Dl_ces);
		p_nsdl = p_nsdl_save;
	}

	p_snd_msg 	= P_NIL, p_buffer = P_NIL;

		/*
		   Is there SSDU message awaiting the DL establishment ?
		   If so process the SSDU.
		*/

	p_nsdl 		= p_nsdl_save;

	while (ns_out_queue_cc () == OK) {

			/* Load call context */

		ns_access_na (R_msg_nai);
		ns_access_conn_id (ANY_CALL, R_msg_conn_id);

			/* Process previously stored SSDU */

		ns_process ();

		Free_msg (p_rcv_msg); p_rcv_msg = P_NIL;
		Free_msg (p_snd_msg); p_snd_msg = P_NIL;
		p_nsdl = p_nsdl_save;
	}

	p_nsdl 		= p_nsdl_save;

}

/*EOF*/

