
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_state.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) : state driven automata for British Telecom ISDN2.
 *
 *        bt2_u0 to bt2_u19 - user side - implements the processing of an event
 *                     according to the state of the call (u0 to u254).
 *
 *        n0 to n254 - network side - implements the processing of an event
 *                     according to the state of the call (n0 to n254).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*       U        */
						/*----------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             bt2_u0 to bt2_u19 - user side - implements the processing of an
							  event according to the call state.

Usage            void bt2_uxx (void);

Related
functions usage void Stop_timer_ns (uchar x_timer_ns);

				void Start_timer_ns_ns (uchar x_timer_ns);
						- x_timer_ns : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void bt2_u0 ()
{

	switch (event_id) {

		case NS_CONN_RQ :
			Send_to_d_channel_and_save_spdu (SETUP);
			N303 = 0;
			Start_timer_ns (BT2_T303);

			if (is_ie_i (CODESET_SO, SENDING_COMPLETE) == ABSENT) {
				Call_en_bloc_flag = OFF;

			} else {

				Call_en_bloc_flag = OFF; /* BT always sent SETUP_ACK */
			}

			Set_state (STATE_CALL_INIT_1);
			break;

		case NS_RESUME_RQ :
			Send_to_d_channel (RES);
			Start_timer_ns (BT2_T318);
			Set_state (STATE_RESUME_REQUEST_17);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of user
			   action requesting call establishment from the network.
			*/

void bt2_u1 ()
{
		switch (event_id) {

			case DA_CALL_PROC :
				Stop_timer_ns (BT2_T303);
				Release_saved_spdu ();
				Send_to_call_control (NS_CALL_PROC_IN);
				Start_timer_ns (BT2_T310);
				Set_state (STATE_OUTGOING_CALL_PROC_3);
				break;

			case DA_SETUP_ACK :

				if (Call_en_bloc_flag == OFF) {
					Release_saved_spdu ();		/* saved setup no more useful */
					ns_action_to_cc (BT2_T303, BT2_T304, NS_SETUP_ACK_IN,
														 STATE_OVERLAP_SENDING_2);
				} else {

						/*
							Some networks send SETUP_ACK for international calls
							even if the SETUP was in BLOC_SENDING mode to force
							the TE to stop T303 to avoid SETUP retransmission
							if the call establishment takes too long time.
							Of course, a CALL_PROC would be much better !
						*/

					Stop_timer_ns (BT2_T303);
					ns_unexpected_ev ();
				}
				break;

			case TI_303 :

				if (++N303 == MX_N303) {
					set_i_cause (C_C_TIMER, C_V_T303, P_NIL);
					Send_to_call_control (NS_CLEAR_CO);
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);
					call_clear ();

				} else {

					Send_saved_spdu_to_d_channel (SETUP);
					Start_timer_ns (BT2_T303);
				}

				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OVERLAP_SENDING_2 */

		/* Overlap sending state */

			/*
			   This state exists for an outgoing call when the user has
			   received acknowledgement of the call establishment request
			   which permits the user to send additional call information
			   to the network in overlap mode.
			*/


void bt2_u2 ()
{
		switch (event_id) {

			case DA_ALERT :
				Stop_timer_ns (BT2_T304);
				Send_to_call_control (NS_ALERT_IN);
				Set_state (STATE_CALL_DELIVERED_4);
				break;

			case DA_PROGRESS :

			if ((I_progress_ind_description == PROGRESS_DESCR_NON_END_TO_END_ISDN) ||
				(I_progress_ind_description == PROGRESS_DESCR_NON_ISDN_DEST) ||
				(I_progress_ind_description == PROGRESS_DESCR_CALL_RETURNED_ISDN)) {
					Stop_timer_ns (BT2_T304);
				}
				Send_to_call_control (NS_PROGRESS_IN);
				break;

			case DA_CALL_PROC :
				Stop_timer_ns (BT2_T304);
				Send_to_call_control (NS_CALL_PROC_IN);
				Start_timer_ns (BT2_T310); 	/* not started if the CALL_PROC contains progress_ind #1 or #2 */
				Set_state (STATE_OUTGOING_CALL_PROC_3);
				break;

			case DA_CONN :
				Stop_timer_ns (BT2_T304);
				Send_to_call_control (NS_CONN_CO);
				Reset_internal_ie ();
				Send_to_d_channel (CONN_ACK);
				Set_state (STATE_ACTIVE_10);
				break;


			case TI_304 :
				set_i_cause (C_C_TIMER, C_V_T304, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				Reset_internal_ie ();
				set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, P_NIL);
				Save_cause ();
				Send_to_d_channel (DISC);
				Start_timer_ns (BT2_T305);
				Set_state (STATE_DISCONNECT_REQUEST_11);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC_3 */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void bt2_u3 ()
{
		switch (event_id) {

			case DA_ALERT :
				Stop_timer_ns (BT2_T310);
				Send_to_call_control (NS_ALERT_IN);
				Set_state (STATE_CALL_DELIVERED_4);
				break;

			case DA_CONN :
				Stop_timer_ns (BT2_T310);
				Send_to_call_control (NS_CONN_CO);
				Reset_internal_ie ();
				Send_to_d_channel (CONN_ACK);
				Set_state (STATE_ACTIVE_10);
				break;

			case DA_PROGRESS :

				if ((I_progress_ind_description == PROGRESS_DESCR_NON_END_TO_END_ISDN) ||
					(I_progress_ind_description == PROGRESS_DESCR_NON_ISDN_DEST) ||
					(I_progress_ind_description == PROGRESS_DESCR_CALL_RETURNED_ISDN)) {
					Stop_timer_ns (BT2_T310);
				}
				Send_to_call_control (NS_PROGRESS_IN);
				break;

			case TI_310 :
				set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, P_NIL);
				Save_cause ();
				Send_to_d_channel (DISC);
				Start_timer_ns (BT2_T305);
				Reset_internal_ie ();
				set_i_cause (C_C_TIMER, C_V_T310, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				Set_state (STATE_DISCONNECT_REQUEST_11);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED_4 */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void bt2_u4 ()
{
		switch (event_id) {

			case DA_CONN :
				Send_to_call_control (NS_CONN_CO);
				Reset_internal_ie ();
				Send_to_d_channel (CONN_ACK);
				Set_state (STATE_ACTIVE_10);
				break;

			case DA_PROGRESS :
				Send_to_call_control (NS_PROGRESS_IN);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void bt2_u6()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Stop_timer_ns (BT2_T300);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CALL_PROC_RQ :
			Send_to_d_channel (CALL_PROC);
			Set_state (STATE_INCOMING_CALL_PROC_9);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (BT2_T300);
			Send_to_d_channel (CONN);
			Start_timer_ns (BT2_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case TI_300 :

#			if NS_TYPE_PRI == ON

				if (Na_type == PRI) {
					set_i_cause (C_C_INVALID_MESSAGE, C_V_INCOMPATIBLE_DESTINATION_88, P_NIL);
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
				}

#			endif

			set_i_cause (C_C_TIMER, C_V_T300, P_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED_7 */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void bt2_u7 ()
{
		switch (event_id) {

			case NS_CONN_RS :
				Send_to_d_channel (CONN);
				Start_timer_ns (BT2_T313);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			case NS_PROGRESS_RQ :
				Send_to_d_channel (PROGRESS);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST_8 */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void bt2_u8 ()
{
		switch (event_id) {

			case DA_CONN_ACK :
				Stop_timer_ns (BT2_T313);
				Send_to_call_control (NS_CONN_CO);
				Set_state (STATE_ACTIVE_10);
				break;

			case TI_313 :
				set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, P_NIL);
				Save_cause ();
				Send_to_d_channel (DISC);
				Start_timer_ns (BT2_T305);
				Set_state (STATE_DISCONNECT_REQUEST_11);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROCEEDING */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void bt2_u9 ()
{
		switch (event_id) {

			case NS_CONN_RS :
				Start_timer_ns (BT2_T313);
				Send_to_d_channel (CONN);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			case NS_ALERT_RQ :
				Send_to_d_channel (ALERT);
				Set_state (STATE_CALL_RECEIVED_7);
				break;

			case NS_PROGRESS_RQ :
				Send_to_d_channel (PROGRESS);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE_10 */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void bt2_u10 ()
{
	switch (event_id) {

		case NS_SUSPEND_RQ :
			Send_to_d_channel (SUSP);
			Start_timer_ns (BT2_T319);
			Set_state (STATE_SUSPEND_REQUEST_15);
			break;

		case DA_NOTIFY :
			Send_to_call_control (NS_NOTIFY_IN);
			break;

#		if NS_T309 == ON

			case TI_309 :

				if (Na_T309_option == ON) {
					set_i_cause (C_C_TIMER, C_V_T309, P_NIL);
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;
				}

#		endif

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST_11 */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void bt2_u11 ()
{
	switch (event_id) {

		 case TI_305 :
			Restore_cause ();	/* send saved cause of the previous DISC */
			set_ie_i (CODESET_0, CAUSE);
			Send_to_d_channel_and_save_spdu (REL);
			Start_timer_ns (BT2_T308);
			N308 = 0;
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		 default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION_12 */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void bt2_u12 ()
{
		switch (event_id) {

			case NS_CLEAR_RS :
				Send_to_d_channel_and_save_spdu (REL);
				Start_timer_ns (BT2_T308);
				N308 = 0;
				Set_state (STATE_RELEASE_REQUEST_19);
				break;

			default :
				ns_unexpected_ev ();

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE SUSPEND_REQUEST_15 */

		/* Suspend request state */

			/*
			   This state exists  after the user has requested the network
			   to suspend the call and is waiting for a response.
			*/

void bt2_u15 ()
{
	switch (event_id) {

		case DA_SUSP_ACK :
			Send_to_call_control (NS_SUSPEND_CO);
			Reset_internal_ie ();
			Send_to_d_channel (NOTIFY);
			call_clear ();
			break;

		case DA_SUSP_REJ :
			Stop_timer_ns (BT2_T319);
			Send_to_call_control (NS_SUSPEND_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_319 :
			set_i_cause (C_C_TIMER, C_V_T319, P_NIL);
			Send_to_call_control (NS_SUSPEND_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RESUME_REQUEST_17 */

		/* Resume request state */

			/*
			   This state exists  after the user has requested the network
			   to resume a previously suspend call and is waiting for a
			   response.
			*/

void bt2_u17 ()
{
	switch (event_id) {

		case DA_RES_ACK :
			Stop_timer_ns (BT2_T318);
			Send_to_call_control (NS_RESUME_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_RES_REJ :
			Send_to_call_control (NS_RESUME_CO);
			call_clear ();
			break;

		case TI_318 :
			set_i_cause (C_C_TIMER, C_V_T318, P_NIL);
			Send_to_call_control (NS_RESUME_CO);
			Reset_internal_ie ();
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, P_NIL);
			Send_to_d_channel_and_save_spdu (REL);
			Start_timer_ns (BT2_T308);
			N308 = 0;
			Set_state (STATE_RELEASE_REQUEST_19);
		break;

		default :
			ns_unexpected_ev ();

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST_19 */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void bt2_u19 ()
{
	switch (event_id) {

		case TI_308 :

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (BT2_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		case NS_CLEAR_RS :
			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*EOF*/
