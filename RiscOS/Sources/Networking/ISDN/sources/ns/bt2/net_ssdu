
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.bt2 */

#include "bt2.mp_ssdu"

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*-------- NS_CONN_RQ */

#define BT2_NET_CONN_IN				BT2_CONN_RQ

/*-------- NS_CONN_IN */

#define BT2_NET_CONN_RQ				BT2_CONN_IN

/*-------- NS_CONN_RS */

#define BT2_NET_CONN_CO				BT2_CONN_RS

/*-------- NS_CONN_CO */

#define BT2_NET_CONN_RS				BT2_CONN_CO

/*-------- NS_CLEAR_RQ */

#define BT2_NET_CLEAR_IN			BT2_CLEAR_RQ

/*-------- NS_CLEAR_IN */

#define BT2_NET_CLEAR_RQ			BT2_CLEAR_IN

/*-------- NS_CLEAR_RS */

#define BT2_NET_CLEAR_CO			BT2_CLEAR_RS

/*-------- NS_CLEAR_CO */

#define BT2_NET_CLEAR_RS			BT2_CLEAR_CO

/*-------- NS_SETUP_ACK_RQ */

#define BT2_NET_SETUP_ACK_IN		BT2_SETUP_ACK_RQ

/*-------- NS_SETUP_ACK_IN */

#define BT2_NET_SETUP_ACK_RQ		BT2_SETUP_ACK_IN

/*-------- NS_CALL_PROC_RQ */

#define BT2_NET_CALL_PROC_IN		BT2_CALL_PROC_RQ

/*-------- NS_CALL_PROC_IN */

#define BT2_NET_CALL_PROC_RQ		BT2_CALL_PROC_IN

/*-------- NS_ALERT_RQ */

#define BT2_NET_ALERT_IN			BT2_ALERT_RQ

/*-------- NS_ALERT_IN */

#define BT2_NET_ALERT_RQ			BT2_ALERT_IN

/*-------- NS_PROGRESS_RQ */

#define BT2_NET_PROGRESS_IN			BT2_PROGRESS_RQ

/*-------- NS_PROGRESS_IN */

#define BT2_NET_PROGRESS_RQ			BT2_PROGRESS_IN

/*-------- NS_INFO_RQ */

#define BT2_NET_INFO_IN				BT2_INFO_RQ

/*-------- NS_INFO_IN */

#define BT2_NET_INFO_RQ				BT2_INFO_IN

/*-------- NS_SUSPEND_RQ */

#define BT2_NET_SUSPEND_IN			BT2_SUSPEND_RQ

/*-------- NS_SUSPEND_CO */

#define BT2_NET_SUSPEND_RS			BT2_SUSPEND_CO

/*-------- NS_RESUME_RQ */

#define BT2_NET_RESUME_IN			BT2_RESUME_RQ

/*-------- NS_RESUME_CO */

#define BT2_NET_RESUME_RS			BT2_RESUME_CO

/*-------- NS_NOTIFY_IN */

#define BT2_NET_NOTIFY_RQ			BT2_NOTIFY_IN

/*=========================================================================*/

#define Ns_bt2_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_bt2_end_table_or_function		};

#define Ns_bt2_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_bt2_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_bt2		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_bt2_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_bt2_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "bt2.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define BT2_MX_SSDU (Rnd_sizeof(BT2_TAB_SSDU) / SSDU_ELEM_SIZE) /* number of element in the table */

CONST uchar		bt2_mx_size_ssdu = BT2_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_bt2_table_or_function
#undef Ns_bt2_end_table_or_function
#undef Ns_bt2_tab_ssdu_ie_entry
#undef Ns_bt2_tab_ssdu_ie_mx_entry
#undef Ns_bt2_tab_ssdu_entry

#define Ns_bt2_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_bt2_end_table_or_function		}

#define Ns_bt2_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_bt2_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_bt2_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_bt2
#	define Message_header_ssdu_ie_bt2		Ns_bt2_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_bt2_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_bt2_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_bt2_ssdu ()
{
    uchar   i_pic;

#	include "bt2.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/
