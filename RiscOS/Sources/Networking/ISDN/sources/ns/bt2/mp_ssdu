
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
		*/

/*---------- BC : bearer capabilities */

D_START (BT2_SSDU_BC)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_TABL		(PROTOCOL_1)

		/* V110 */

		D_IF_VAL	(V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABX		(V110_USER_RATE)
			D_TABL		(V110_NIC)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)

		D_ELSE		(RA_NON_CCITT)

			D_IF_VAL	(NON_CCITT)
				D_TABL	(NON_CCITT_SYN_ASYN)
				D_TABX	(NON_CCITT_USER_RATE)
				D_PAD	(_6_)
			D_ELSE		(NO_RATE_ADAPTATION)
				D_PAD	(_8_)
			D_END_IF	(ENDIF_NON_CCITT)

		D_END_IF	(ENDIF_V110)

		D_TABL		(PROTOCOL_ID_2)
		D_TABL		(PROTOCOL_ID_3)

D_END (END_SSDU)

START (BT2_SSDU_BC)
		TABL	(BT2_T_CODING_STD,				&i_bc[0].coding_std)
		TABL	(BT2_T_TRF_CAP,					&i_bc[0].trf_cap)
		TABL	(BT2_T_PROTOCOL_ID_1,			&i_bc[0].protocol_id_1)

		/* V110 */

		IF_VAL	(&i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			TABL	(BT2_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABX	(BT2_TX_USER_RATE,			&i_bc[0].syn_asyn,		&i_bc[0].user_rate)
			TABL	(BT2_T_NIC,					&i_bc[0].Nic)
			TABL	(BT2_T_STOP_BIT,			&i_bc[0].stop_bit)
			TABL	(BT2_T_DATA_BIT,			&i_bc[0].data_bit)
			TABL	(BT2_T_PARITY,				&i_bc[0].parity)
			TABL	(BT2_T_DUPLEX,				&i_bc[0].duplex)
			TABL	(BT2_T_MODEM,				&i_bc[0].modem)
		ELSE	()

				/* NON CCITT */

			IF_VAL (&i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
				TABL	(BT2_T_SYN_ASYN,		&i_bc[0].syn_asyn)
				TABX	(BT2_TX_USER_RATE, 		&i_bc[0].syn_asyn, &i_bc[0].user_rate)
				PAD 	(6)
			ELSE		()
				PAD		(8)
			END_IF		()

		END_IF	()

		TABL	(BT2_T_PROTOCOL_ID_2,			&i_bc[0].protocol_id_2)
		TABL	(BT2_T_PROTOCOL_ID_3,			&i_bc[0].protocol_id_3)

END	(0)

/*---------- CALL_ID : call identity */

D_START	(BT2_SSDU_CALL_ID)
	D_TEXT (CALL_ID_VAL_)
D_END (CALL_ID_END)

START	(BT2_SSDU_CALL_ID)
	TEXT (0,BT2_MX_SZ_CALL_ID,ANY_CHAR,			&i_call_id[0].lgth, (uchar **)&i_call_id[0].p_val)
END (0)

/*---------- CALL_STATE : call state */

D_START	(BT2_SSDU_CALL_STATE)
	D_TABL (CODING_STD)
	D_TABX (VAL)
D_END (CALL_STATE_END)

START	(BT2_SSDU_CALL_STATE)
	TABL (BT2_T_CODING_STD,						&i_call_state[0].coding_std)
	TABX (BT2_TX_CALL_STATE,					&i_call_state[0].coding_std,	&i_call_state[0].val)
END (0)

/*---------- CALLED_NB : called party number */

D_START	(BT2_SSDU_CALLED_NB)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (SSDU_CALLED_NB_END)

START	(BT2_SSDU_CALLED_NB)
	TEXT (1,BT2_MX_SZ_CALLED_NB,ANY_CHAR,			&i_called_nb[0].lgth,(uchar **)&i_called_nb[0].p_add)
END (0)

/*---------- CALLED_SUB_ADD : called party sub address */

D_START	(BT2_SSDU_CALLED_SUB_ADD)
	D_TEXT (DIGIT_)
D_END (SSDU_CALLED_SUB_ADD_END)

START	(BT2_SSDU_CALLED_SUB_ADD)
	TEXT (1,BT2_MX_SZ_CALLED_SUB_ADD,ANY_CHAR,		&i_called_sub_add[0].lgth,(uchar **)&i_called_sub_add[0].p_add)
END (0)

/*---------- CALLING_NB : calling party number */

D_START	(BT2_SSDU_CALLING_NB)
	D_TABL (PLAN_N)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_N)
	D_TEXT (DIGIT_N)
D_END (SSDU_CALLING_NB_N_END)

START	(BT2_SSDU_CALLING_NB)
	TABL (BT2_T_CALLING_NB_PLAN,				&i_calling_nb[0].plan_id)
	TABL (BT2_T_CALLING_NB_PRES,				&i_calling_nb[0].pres)
	TABL (BT2_T_SCREEN_IND,						&i_calling_nb[0].screen_ind)
	TEXT (0,BT2_MX_SZ_CALLING_NB,ANY_CHAR,		&i_calling_nb[0].lgth,(uchar **)&i_calling_nb[0].p_add)
END (0)

/*---------- CAUSE : Cause */

D_START	(BT2_SSDU_CAUSE)
	D_TABL (CODING_STD)
	D_TABL (CLASS)
	D_TABX (VAL)
D_END (CAUSE_END)

START	(BT2_SSDU_CAUSE)
	TABL (BT2_T_CODING_STD,						&i_cause[0].coding_std)
	TABL (BT2_T_C_C,							&i_cause[0].cause_class)
	TABX (BT2_TX_C_V,							&i_cause[0].cause_class, &i_cause[0].cause_val)
END (0)

/*---------- CHAN_ID : channel identification */

D_START	(BT2_SSDU_CHAN_ID)
	D_TABL	(INT_TYPE)
	D_TABL	(PREF_EXCL)
	D_TABX	(SEL)
	D_IF_VAL	(IF_3_2)
		D_TABL	(CODING_STD)
		D_TABL	(TYPE)
		D_TABL	(CHANNEL_NUMBER)
D_END (SSDU_CHAN_ID_END)

START	(BT2_SSDU_CHAN_ID)
	TABL (BT2_T_INT_TYPE,						&i_chan_id[0].int_type)
	TABL (BT2_T_CHAN_PREF_EXCL,					&i_chan_id[0].pref_excl)
	TABX (BT2_TX_CHAN_SEL,						&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)
	IF_VAL	(&i_chan_id[0].int_type, NE, INT_TYPE_BRI)
		TABL (BT2_T_CODING_STD,					&i_chan_id[0].coding_std)
		TABL (BT2_T_CHAN_TYPE,					&i_chan_id[0].chan_type)
		TABL (BT2_T_CHAN_NUMBER,				&i_chan_id[0].chan_nb)
END (0)

/*---------- DISPLAY : display facility */

D_START	(BT2_SSDU_DISPLAY)
	D_TEXT (DISPLAY_INFO)
D_END (DISPLAY_END)

START	(BT2_SSDU_DISPLAY)
	TEXT (0,BT2_MX_SZ_DISPLAY,ANY_CHAR,			&i_display[0].lgth,(uchar **)&i_display[0].p_info)
END (0)

/*---------- HLC : high layer compatibility */

D_START	(BT2_SSDU_HLC)
	D_TABL (TELESERVICE)
D_END (HLC_END)

START	(BT2_SSDU_HLC)
	TABL (BT2_T_TELESERVICE_CCITT,				&i_hlc[0].teleservice)
END (0)

/*---------- KEYPAD : keypad facility */

D_START	(BT2_SSDU_KEYPAD)
	D_TEXT (KEYPAD_INFO)
D_END (KEYPAD_END)

START	(BT2_SSDU_KEYPAD)
	TEXT (0,BT2_MX_SZ_KEYPAD,DIGIT_E,			&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END (0)

/*---------- LLC : low layer compatibility */

D_START (BT2_SSDU_LLC)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_TABL		(PROTOCOL_1)

		/* V110 */

		D_IF_VAL	(V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABX		(V110_USER_RATE)
			D_TABL		(V110_NIC)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
		D_END_IF	(ENDIF_V110)

		D_IF_VAL	(NON_CCITT)
			D_TABL	(NON_CCITT_SYN_ASYN)
			D_TABX	(NON_CCITT_USER_RATE)
			D_TABL	(NON_CCIT_NIC)
			D_TABL	(NON_CCITT_STOP_BIT)
			D_TABL	(NON_CCITT_DATA_BIT)
			D_TABL	(NON_CCITT_PARITY)
			D_TABL	(NON_CCITT_DUPLEX)
			D_TABL	(NON_CCITT_MODEM)
		D_END_IF	(ENDIF_NON_CCITT)
D_END (END_SSDU)

START (BT2_SSDU_LLC)
		TABL	(BT2_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(BT2_T_TRF_CAP,					&i_llc[0].trf_cap)
		TABL	(BT2_T_PROTOCOL_ID_1,			&i_llc[0].protocol_id_1)

		/* V110 */

		IF_VAL	(&i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			TABL	(BT2_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABX	(BT2_TX_USER_RATE,			&i_llc[0].syn_asyn,		&i_llc[0].user_rate)
			TABL	(BT2_T_NIC,					&i_llc[0].Nic)
			TABL	(BT2_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(BT2_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(BT2_T_PARITY,				&i_llc[0].parity)
			TABL	(BT2_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(BT2_T_MODEM,				&i_llc[0].modem)
		END_IF	()

		IF_VAL	(&i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
			TABL	(BT2_T_SYN_ASYN, 		&i_llc[0].syn_asyn)
			TABX	(BT2_TX_USER_RATE,		&i_llc[0].syn_asyn,	&i_llc[0].user_rate)
			TABL	(BT2_T_NIC,				&i_llc[0].Nic)
			TABL	(BT2_T_STOP_BIT,		&i_llc[0].stop_bit)
			TABL	(BT2_T_DATA_BIT,		&i_llc[0].data_bit)
			TABL	(BT2_T_PARITY,			&i_llc[0].parity)
			TABL	(BT2_T_DUPLEX,			&i_llc[0].duplex)
			TABL	(BT2_T_MODEM,			&i_llc[0].modem)
		END_IF	()
END	(0)

/*---------- NOTIF_IND : notification indicator */

D_START	(BT2_SSDU_NOTIF_IND)
	D_TABL	(DESCR)
D_END (NOTIF_IND_E)

START	(BT2_SSDU_NOTIF_IND)
	TABL	(BT2_T_NOTIF_IND_DESCR,				&i_notif_ind[0].notif_descr)
END (0)


/*---------- PROGRESS_IND : progress indicator */

D_START	(BT2_SSDU_PROGRESS_IND)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END (PROGRESS_IND_E)

START	(BT2_SSDU_PROGRESS_IND)
	TABL (BT2_T_PROGRESS_LOCATION,				&i_progress_ind[0].progress_loc)
	TABL (BT2_T_PROGRESS_DESCRIPTION,			&i_progress_ind[0].progress_descr)
END	(0)

/*EOF*/
