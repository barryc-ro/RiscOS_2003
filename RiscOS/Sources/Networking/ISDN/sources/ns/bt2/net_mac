
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


				/*
				   MACROs and DECLARATIONS used to access the Network
				   Signalling entity (NS) from the Call Control entity (CC).
				*/

/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_at5_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_bt2_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(bt2_,pr), p_off)
#define Isdn_init_bt2_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_bt2(pr,ie)					Get_ie 			(Paste(bt2_,pr), Paste (bt2_, ie))
#define	Isdn_get_val_bt2(pr,ie,fld)			Isdn_get_val	(Paste(bt2_,pr), Paste (bt2_, ie), fld)
#define Isdn_p_str_bt2(pr,ie,fld)			Isdn_p_str		(Paste(bt2_,pr), Paste (bt2_, ie), fld)
#define	Isdn_lgth_str_bt2(pr,ie,fld)		Isdn_lgth_str	(Paste(bt2_,pr), Paste (bt2_, ie), fld)
#define	Isdn_mx_lgth_str_bt2(pr,ie,fld)		Isdn_mx_lgth_str(Paste(bt2_,pr), Paste (bt2_, ie), fld)
#define	P_start_val_ns_bt2(pr,ie)			P_start_val_ns	(Paste(bt2_,pr), Paste (bt2_, ie))
#define	P_val_ns_bt2(ie)					P_val_ns		(Paste(bt2_,ie))
#define Set_offset_bt2(pr,ie)				Set_offset		(Paste(bt2_,pr),Paste(bt2_,ie))
#define	Set_next_ie_bt2(ie)					Set_next_ie		(Paste(bt2_,ie))
#define	Set_val_bt2(ie,fld,val)				Set_val			(Paste(bt2_,ie), fld, val)
#define Set_str_bt2(ie, lv, p_str, mx_sz)	Set_str			(Paste(bt2_,ie), lv, p_str, mx_sz)
#define Set_mem_bt2(ie, lv, p_mem, sz)		Set_mem			(Paste(bt2_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_bt2(pr,ie)	Set_to_next_ie_instance (Paste(bt2_,pr), Paste (bt2_, ie))
#define Get_remaining_ie_instance_nb_bt2(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(bt2_,pr), Paste (bt2_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_bt2	ns_offset_t bt2_message_header;
#else
#	define Message_header_offset_bt2
#endif

/*-------------------------------------------------------------------------*/

		/* Structures of the offset area of each primitive interfaces */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

		/*    - 1 - primitives as seen from TERMINAL side    */

		/* NS_CONN_RQ */

struct off_ns_bt2_te_conn_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_sending_complete;		/* sending complete */
	ns_offset_t bt2_bc;						/* bearer capability */
	ns_offset_t bt2_chan_id;				/* channel ID */
	ns_offset_t bt2_progress_ind;			/* progress indicator */
	ns_offset_t bt2_keypad;					/* keypad */
	ns_offset_t bt2_calling_nb;				/* calling number */
	ns_offset_t bt2_called_nb;				/* called number */
	ns_offset_t bt2_called_sub_add;			/* called sub-address */
	ns_offset_t bt2_llc;					/* low layer compatibility */
	ns_offset_t bt2_hlc;					/* high layer compability */
};

		/* NS_CONN_IN */

struct off_ns_bt2_te_conn_in {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_bc;						/* bearer capability */
	ns_offset_t bt2_chan_id;				/* channel ID */
	ns_offset_t bt2_progress_ind;			/* progress indicator */
	ns_offset_t bt2_display;				/* display */
	ns_offset_t bt2_calling_nb;				/* calling number (from network) */
	ns_offset_t bt2_called_nb;				/* called number */
	ns_offset_t bt2_called_sub_add;			/* called subaddress */
	ns_offset_t bt2_llc;					/* low layer capability */
	ns_offset_t bt2_hlc;					/* high layer compatibility */
};

		/* NS_CONN_RS */

struct off_ns_bt2_te_conn_rs {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_chan_id;				/* channel ID */
	ns_offset_t bt2_llc;					/* low layer capability */
};

		/* NS_CONN_CO */

struct off_ns_bt2_te_conn_co {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_chan_id;				/* channel ID */
	ns_offset_t bt2_display;				/* display */
	ns_offset_t bt2_llc;					/* low layer capability */
};

		/* NS_CLEAR_RQ */

struct off_ns_bt2_te_clear_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_cause;					/* cause */
};

		/* NS_CLEAR_IN */

struct off_ns_bt2_te_clear_in {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_cause;					/* cause */
	ns_offset_t bt2_display;				/* display */
};
		/* NS_CLEAR_RS */

struct off_ns_bt2_te_clear_rs {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_cause;					/* cause */
};

		/* NS_CLEAR_CO */

struct off_ns_bt2_te_clear_co {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_cause;					/* cause */
	ns_offset_t bt2_display;				/* display */
};

		/* NS_SETUP_ACK_RQ */

struct off_ns_bt2_te_setup_ack_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_chan_id;				/* channel ID */
};

		/* NS_SETUP_ACK_IN */

struct off_ns_bt2_te_setup_ack_in {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_chan_id;				/* channel ID */
};

		/* NS_CALL_PROC_RQ */

struct off_ns_bt2_te_call_proc_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_chan_id;				/* channel ID */
};

		/* NS_CALL_PROC_IN */

struct off_ns_bt2_te_call_proc_in {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_chan_id;				/* channel ID */
	ns_offset_t bt2_display;				/* display */
};

		/* NS_ALERT_RQ */

struct off_ns_bt2_te_alert_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_chan_id;				/* channel ID */
	ns_offset_t bt2_progress_ind;			/* progress indicator */
};

		/* NS_ALERT_IN */

struct off_ns_bt2_te_alert_in {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_progress_ind;			/* progress indicator */
	ns_offset_t bt2_display;				/* display */
};

		/* NS_PROGRESS_RQ */

struct off_ns_bt2_te_progress_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_cause;					/* cause */
	ns_offset_t bt2_progress_ind;			/* progress indicator */
};

		/* NS_PROGRESS_IN */

struct off_ns_bt2_te_progress_in {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_cause;					/* cause */
	ns_offset_t bt2_progress_ind;			/* progress indicator */
	ns_offset_t bt2_display;				/* display */
};

		/* NS_INFO_RQ */

struct off_ns_bt2_te_info_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_sending_complete;		/* sending complete */
	ns_offset_t bt2_keypad;					/* keypad */
	ns_offset_t bt2_called_nb;				/* called number */
};

		/* NS_INFO_IN */

struct off_ns_bt2_te_info_in {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_display;				/* display */
};

		/* NS_SUSPEND_RQ */

struct off_ns_bt2_te_suspend_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_call_id;				/* call identity */
};

		/* NS_SUSPEND_CO */

struct off_ns_bt2_te_suspend_co {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_cause;					/* cause */
};

		/* NS_RESUME_RQ */

struct off_ns_bt2_te_resume_rq {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_call_id;				/* call identity */
};

		/* NS_RESUME_CO */

struct off_ns_bt2_te_resume_co {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_chan_id;				/* channel ID */
	ns_offset_t bt2_cause;					/* cause */
};

		/* NS_NOTIFY_IN */

struct off_ns_bt2_te_notify_in {
	Message_header_offset_bt2				/* message header parameters */
	ns_offset_t bt2_notif_ind;				/* notification indicator */
	ns_offset_t bt2_display;				/* display */
};

		/*---------------------------------------------------**
		**                                                   **
		**         structures of the offset areas            **
		**                                                   **
		**          according to TE or NET side              **
		**                                                   **
		**---------------------------------------------------*/


		/*   - 2 - primitives as seen from TE or NT sides   */



		/* NS_CONN_RQ */

typedef struct off_ns_bt2_te_conn_rq				off_ns_bt2_conn_rq;
typedef struct off_ns_bt2_te_conn_in				off_ns_bt2_net_conn_rq;

		/* NS_CONN_IN */

typedef struct off_ns_bt2_te_conn_in				off_ns_bt2_conn_in;
typedef struct off_ns_bt2_te_conn_rq				off_ns_bt2_net_conn_in;

		/* NS_CONN_RS */

typedef struct off_ns_bt2_te_conn_rs				off_ns_bt2_conn_rs;
typedef struct off_ns_bt2_te_conn_co				off_ns_bt2_net_conn_rs;

		/* NS_CONN_CO */

typedef struct off_ns_bt2_te_conn_co				off_ns_bt2_conn_co;
typedef struct off_ns_bt2_te_conn_rs				off_ns_bt2_net_conn_co;

		/* NS_CLEAR_RQ */

typedef struct off_ns_bt2_te_clear_rq				off_ns_bt2_clear_rq;
typedef struct off_ns_bt2_te_clear_in				off_ns_bt2_net_clear_rq;

		/* NS_CLEAR_IN */

typedef struct off_ns_bt2_te_clear_in				off_ns_bt2_clear_in;
typedef struct off_ns_bt2_te_clear_rq				off_ns_bt2_net_clear_in;

		/* NS_CLEAR_RS */

typedef struct off_ns_bt2_te_clear_rs				off_ns_bt2_clear_rs;
typedef struct off_ns_bt2_te_clear_co				off_ns_bt2_net_clear_rs;

		/* NS_CLEAR_CO */

typedef struct off_ns_bt2_te_clear_co				off_ns_bt2_clear_co;
typedef struct off_ns_bt2_te_clear_rs				off_ns_bt2_net_clear_co;

		/* NS_SETUP_ACK_RQ */

typedef struct off_ns_bt2_te_setup_ack_rq			off_ns_bt2_setup_ack_rq;
typedef struct off_ns_bt2_te_setup_ack_in			off_ns_bt2_net_setup_ack_rq;

		/* NS_SETUP_ACK_IN */

typedef struct off_ns_bt2_te_setup_ack_in			off_ns_bt2_setup_ack_in;
typedef struct off_ns_bt2_te_setup_ack_rq			off_ns_bt2_net_setup_ack_in;

		/* NS_CALL_PROC_RQ */

typedef struct off_ns_bt2_te_call_proc_rq			off_ns_bt2_call_proc_rq;
typedef struct off_ns_bt2_te_call_proc_in			off_ns_bt2_net_call_proc_rq;

		/* NS_CALL_PROC_IN */

typedef struct off_ns_bt2_te_call_proc_in			off_ns_bt2_call_proc_in;
typedef struct off_ns_bt2_te_call_proc_rq			off_ns_bt2_net_call_proc_in;

		/* NS_ALERT_RQ */

typedef struct off_ns_bt2_te_alert_rq				off_ns_bt2_alert_rq;
typedef struct off_ns_bt2_te_alert_in				off_ns_bt2_net_alert_rq;

		/* NS_ALERT_IN */

typedef struct off_ns_bt2_te_alert_in				off_ns_bt2_alert_in;
typedef struct off_ns_bt2_te_alert_rq				off_ns_bt2_net_alert_in;

		/* NS_PROGRESS_RQ */

typedef struct off_ns_bt2_te_progress_rq			off_ns_bt2_progress_rq;
typedef struct off_ns_bt2_te_progress_in			off_ns_bt2_net_progress_rq;

		/* NS_PROGRESS_IN */

typedef struct off_ns_bt2_te_progress_in			off_ns_bt2_progress_in;
typedef struct off_ns_bt2_te_progress_rq			off_ns_bt2_net_progress_in;

		/* NS_INFO_RQ */

typedef struct off_ns_bt2_te_info_rq				off_ns_bt2_info_rq;
typedef struct off_ns_bt2_te_info_in				off_ns_bt2_net_info_rq;

		/* NS_INFO_IN */

typedef struct off_ns_bt2_te_info_in				off_ns_bt2_info_in;
typedef struct off_ns_bt2_te_info_rq				off_ns_bt2_net_info_in;

		/* NS_SUSPEND_RQ */

typedef struct off_ns_bt2_te_suspend_rq				off_ns_bt2_suspend_rq;

		/* NS_SUSPEND_IN */

typedef struct off_ns_bt2_te_suspend_rq				off_ns_bt2_net_suspend_in;

		/* NS_SUSPEND_RS */

typedef struct off_ns_bt2_te_suspend_co				off_ns_bt2_net_suspend_rs;

		/* NS_SUSPEND_CO */

typedef struct off_ns_bt2_te_suspend_co				off_ns_bt2_suspend_co;

		/* NS_RESUME_RQ */

typedef struct off_ns_bt2_te_resume_rq				off_ns_bt2_resume_rq;

		/* NS_RESUME_IN */

typedef struct off_ns_bt2_te_resume_rq				off_ns_bt2_net_resume_in;

		/* NS_RESUME_RS */

typedef struct off_ns_bt2_te_resume_co				off_ns_bt2_net_resume_rs;

		/* NS_RESUME_CO */

typedef struct off_ns_bt2_te_resume_co				off_ns_bt2_resume_co;

		/* NS_NOTIFY_IN */

typedef struct off_ns_bt2_te_notify_in				off_ns_bt2_notify_in;


		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/

		/* Bearer Capability (BC) */

struct val_ns_bt2_bc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		user_rate;				/* user rate */
	ie_val		nic;					/* network independent clock (NIC) on Transmission (Tx) and Reception (Rx) */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits */
	ie_val		parity;					/* number of parity bit */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user information layer 2 protocol */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
};

		/* Call IDentification (CALL_ID) */

struct val_ns_bt2_call_id {
	Next_instance_offset
	ie_array 	value[BT2_MX_SZ_CALL_ID+2];	/* call identity */
};

		/* Call State (CALL_STATE) */

struct val_ns_bt2_call_state {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		val;					/* call state value */
};

		/* Called party number (CALLED_NB) */

struct val_ns_bt2_called_nb {
	Next_instance_offset
	ie_array 	nb[BT2_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_bt2_called_sub_add {
	Next_instance_offset
	ie_array 	sub_add[BT2_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_bt2_calling_nb {
	Next_instance_offset
	ie_val		plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[BT2_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

		/* Cause (CAUSE) */

struct val_ns_bt2_cause {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_bt2_chan_id {
	Next_instance_offset
	ie_val		int_type;				/* interface type */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val		coding_std;				/* coding standard */
	ie_val		chan_type;				/* channel type */
	ie_val 		chan_nb;				/* channel number */
};

		/* Display */

struct val_ns_bt2_display {
	Next_instance_offset
	ie_array 	text[BT2_MX_SZ_DISPLAY+2];	/* display information */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_bt2_hlc {
	Next_instance_offset
	ie_val		teleservice;			/* high layer characteristics identification */
};

		/* Keypad */

struct val_ns_bt2_keypad {
	Next_instance_offset
	ie_array 	text[BT2_MX_SZ_KEYPAD+2];		/* keypad information */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_bt2_llc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		user_rate;				/* user rate */
	ie_val		nic;					/* network independent clock (NIC) on Transmission (Tx) and Reception (Rx) */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits */
	ie_val		parity;					/* number of parity bit */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
};

		/* Notification indicator (NOTIF_IND) */

struct val_ns_bt2_notif_ind {
	Next_instance_offset
	ie_val		notif_descr;			/* notification description*/
};

		/* Progress indicator (PROGRESS_IND) */

struct val_ns_bt2_progress_ind {
	Next_instance_offset
	ie_val		progress_loc;			/* location */
	ie_val		progress_descr;			/* progress description */
};

#if NS_IE_TSP_OUT == ON

			/* Definitions for compilation purpose only */

	struct val_ns_bt2_sending_complete {
		Next_instance_offset
		ie_val	unused;
	};


#endif

/*=========================================================================*/

							/* Information Elements (IE) */


			/*
			   Isdn_bt2_store_bc_all : store the bearer capability information
								   element.

					INPUT :
						- pr				= primitive ID,
						- coding_std_		= coding standard,
						- trf_cap_			= information transfer capability,
						- protocol_id_1_	= user information layer 1 protocol,
						- syn_asyn_			= synchronous/asynchronous,
						- user_rate_		= user rate,
						- nic_				= network independent clock (NIC) on Reception (Rx) and Transmission (Tx),
						- stop_bit_			= number of stop bits,
						- data_bit_			= number of data bits,
						- parity_			= number of parity bit,
						- duplex_			= duplex mode,
						- modem_			= modem type,
						- protocol_id_2_	= layer 2 protocol id,
						- protocol_id_3_	= layer 3 protocol id.

			*/

#define Isdn_bt2_store_bc_all(pr,coding_std_,trf_cap_,protocol_id_1_,syn_asyn_,user_rate_,nic_,stop_bit_,data_bit_,parity_,duplex_,modem_,protocol_id_2_,protocol_id_3_) \
		Set_offset_bt2	(pr,	bc);\
		Set_val_bt2		(bc,	coding_std,		coding_std_);\
		Set_val_bt2		(bc,	trf_cap,		trf_cap_);\
		Set_val_bt2		(bc,	protocol_id_1,	protocol_id_1_);\
		Set_val_bt2		(bc,	syn_asyn,		syn_asyn_);\
		Set_val_bt2		(bc,	user_rate,		user_rate_);\
		Set_val_bt2		(bc,	nic,			nic_);\
		Set_val_bt2		(bc,	stop_bit,		stop_bit_);\
		Set_val_bt2		(bc,	data_bit,		data_bit_);\
		Set_val_bt2		(bc,	parity,			parity_);\
		Set_val_bt2		(bc,	duplex,			duplex_);\
		Set_val_bt2		(bc,	modem,			modem_);\
		Set_val_bt2		(bc,	protocol_id_2,	protocol_id_2_);\
		Set_val_bt2		(bc,	protocol_id_3,	protocol_id_3_);\
		Set_next_ie_bt2	(bc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_bt2_store_bc : store the bearer capability information

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- user_rate_	= user rate,
						- nic_			= network independent clock (NIC) on Reception (Rx) and Transmission (Tx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type.

			*/

#define Isdn_bt2_store_bc(pr,coding_std_,trf_cap_,protocol_id_1_,syn_asyn_,user_rate_,nic_,stop_bit_,data_bit_,parity_,duplex_,modem_) \
		Isdn_bt2_store_bc_all(pr,coding_std_,trf_cap_,protocol_id_1_,syn_asyn_,user_rate_,nic_,stop_bit_,data_bit_,parity_,duplex_,modem_,BYTE_VAL_NIL,BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_bt2_store_bc_x25 :  store the bearer capability information
										element for X25 facilities.

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- user_rate_	= user rate,
						- nic_			= network independent clock (NIC) on Reception (Rx) and Transmission (Tx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,

			*/

#define Isdn_bt2_store_bc_x25(pr,coding_std_,trf_cap_,protocol_id_1_,syn_asyn_,user_rate_,nic_,stop_bit_,data_bit_,parity_,duplex_,modem_)\
		Isdn_bt2_store_bc_all(pr,coding_std_,trf_cap_,protocol_id_1_,syn_asyn_,user_rate_,nic_,stop_bit_,data_bit_,parity_,duplex_,modem_,PROTOCOL_ID_2_X25_LL,PROTOCOL_ID_3_X25_PL)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_call_id : call ID

					INPUT :
						- pr	= primitive ID,
						- id    = call ID.

			*/


#define Isdn_bt2_store_call_id(pr, id)\
		Set_offset_bt2	(pr,		call_id);\
		Set_str_bt2		(call_id,	value,	id,	BT2_MX_SZ_CALL_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_call_state : call state

					INPUT :
						- pr	= primitive ID,
						- std	= coding_std,
						- value	= call state value.

			*/


#define Isdn_bt2_store_call_state(pr, std,	value)\
		Set_offset_bt2	(pr,			call_state);\
		Set_val_bt2		(call_state,	coding_std,	std);\
		Set_val_bt2		(call_state,	val,		value);\
		Set_next_ie_bt2	(call_state);

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_called_nb : called number IE

					INPUT :
						- pr				= primitive ID,
						- p_string			= address of the literal string.
			*/

#define Isdn_bt2_store_called_nb(pr, p_string) \
		Set_offset_bt2	(pr,		called_nb);\
		Set_str_bt2		(called_nb,	nb,			p_string,	BT2_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_called_sub_add : called sub-address IE

					INPUT :
						- pr			= primitive ID,
						- p_string    	= address of the literal string.

			*/

#define Isdn_bt2_store_called_sub_add(pr, p_string) \
		Set_offset_bt2	(pr,				called_sub_add);\
		Set_str_bt2 	(called_sub_add,	sub_add,		p_string, BT2_MX_SZ_CALLED_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nbering_plan_id	= numbering plan ID,
						- pres_ind			= presentation indicator,
						- screening_ind    	= screening indicator,
						- p_string  		= pointer on the calling number literal string.
			*/

#define Isdn_bt2_store_calling_nb(pr, nbering_plan_id, pres_ind, screening_ind, p_string) \
		Set_offset_bt2	(pr,			calling_nb);\
		Set_val_bt2		(calling_nb,	plan_id,	nbering_plan_id);\
		Set_val_bt2		(calling_nb,	pres,		pres_ind);\
		Set_val_bt2		(calling_nb,	screen_ind,	screening_ind);\
		Set_str_bt2		(calling_nb,	nb, 		p_string, BT2_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_cause : cause IE

					INPUT :
						- pr	= primitive ID,
						- std	= coding standard,
						- cl    = cause class,
						- val   = cause value,

			*/

#define Isdn_bt2_store_cause(pr, std, cl, val)\
		Set_offset_bt2	(pr,	cause);\
		Set_val_bt2		(cause,	coding_std,	std);\
		Set_val_bt2		(cause,	cause_class,cl);\
		Set_val_bt2		(cause,	cause_val,	val);\
		Set_next_ie_bt2	(cause)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_bt2_store_chan_id_BRI : store channel ID for Basic Rate Interface

					INPUT :
						- pr 		= primitive ID,
						- pref 		= preferred channel,
						- sel 		= channel selection,
			*/

#define Isdn_bt2_store_chan_id_BRI(pr, pref, sel) \
		Set_offset_bt2	(pr,		chan_id);\
		Set_val_bt2		(chan_id,	int_type,	INT_TYPE_BRI);\
		Set_val_bt2		(chan_id,	pref_excl,	pref);\
		Set_val_bt2		(chan_id,	chan_sel,	sel);\
		Set_next_ie_bt2	(chan_id)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_bt2_store_chan_id_PRI : store channel ID for Primary Rate Interface

					INPUT :
						- pr 		= primitive ID,
						- pref 		= preferred channel,
						- sel 		= channel selection,
						- chan_type_= channel type,
						- chan_nb_	= channel number.
			*/

#define Isdn_bt2_store_chan_id_PRI(pr, pref, sel, chan_type_, chan_nb_) \
		Set_offset_bt2	(pr,		chan_id);\
		Set_val_bt2		(chan_id,	int_type,	INT_TYPE_PRI);\
		Set_val_bt2		(chan_id,	pref_excl,	pref);\
		Set_val_bt2		(chan_id,	chan_sel,	sel);\
		Set_val_bt2		(chan_id,	chan_type,	chan_type_);\
		Set_val_bt2		(chan_id,	chan_nb,	chan_nb_);\
		Set_next_ie_bt2	(chan_id)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_display : display IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_bt2_store_display(pr,	p_text) \
		Set_offset_bt2	(pr,		display);\
		Set_str_bt2		(display,	text,	p_text,	BT2_MX_SZ_DISPLAY+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_hlc : high layer compatibility

					INPUT :
						- pr		= primitive ID,
						- tele      = teleservice,
			*/

#define Isdn_bt2_store_hlc(pr, tele) \
		Set_offset_bt2	(pr,	hlc);\
		Set_val_bt2		(hlc,	teleservice,		tele);\
		Set_next_ie_bt2	(hlc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_bt2_store_keypad(pr,p_text) \
		Set_offset_bt2	(pr,		keypad);\
		Set_str_bt2		(keypad,	text,	p_text,	BT2_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_bt2_store_llc : store the low layer compatibility information
								   element :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- user_rate_	= user rate,
						- nic_			= network independent clock (NIC) on Reception (Rx) and Transmission (Tx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,

			*/

#define Isdn_bt2_store_llc(pr,coding_std_,trf_cap_,protocol_id_1_,syn_asyn_,user_rate_,nic_,stop_bit_,data_bit_,parity_,duplex_,modem_) \
		Set_offset_bt2	(pr,	llc);\
		Set_val_bt2		(llc,	coding_std,		coding_std_);\
		Set_val_bt2		(llc,	trf_cap,		trf_cap_);\
		Set_val_bt2		(llc,	protocol_id_1,	protocol_id_1_);\
		Set_val_bt2		(llc,	syn_asyn,		syn_asyn_);\
		Set_val_bt2		(llc,	user_rate,		user_rate_);\
		Set_val_bt2		(llc,	nic,			nic_);\
		Set_val_bt2		(llc,	stop_bit,		stop_bit_);\
		Set_val_bt2		(llc,	data_bit,		data_bit_);\
		Set_val_bt2		(llc,	parity,			parity_);\
		Set_val_bt2		(llc,	duplex,			duplex_);\
		Set_val_bt2		(llc,	modem,			modem_);\
		Set_next_ie_bt2	(llc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_notif_ind : notification indicator

					INPUT :
						- pr	= primitive ID,
						- descr	= description.

			*/

#define Isdn_bt2_store_notif_ind(pr, descr) \
		Set_offset_bt2	(pr,		notif_ind);\
		Set_val_bt2		(notif_ind,	notif_descr,	descr);\
		Set_next_ie_bt2	(notif_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_progress_ind : progress indicator

					INPUT :
						- pr	= primitive ID,
						- loc	= location,
						- descr	= description.

			*/

#define Isdn_bt2_store_progress_ind(pr, loc, descr) \
		Set_offset_bt2	(pr,		progress_ind);\
		Set_val_bt2		(progress_ind,	progress_loc,	loc);\
		Set_val_bt2		(progress_ind,	progress_descr,	descr);\
		Set_next_ie_bt2	(progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bt2_store_sending_complete : sending complete ON

					INPUT :
						- pr	= primitive ID.

			*/

#define Isdn_bt2_store_sending_complete(pr)\
		Set_offset_bt2	(pr,				sending_complete)

/*EOF*/
