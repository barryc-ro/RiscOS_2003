
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ie.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the BRITISH TELECOM ISDN2 information
 * element and the integrity constraints associated to them.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/
/*

Table structures :
----------------

		tabl_item   TABL_ITEM                                    uchar
		==========================                             ============
		| tabl_id | size | p_val |---------------------------->|   val    |
		--------------------------	tabl_yy 	 ============  ------------
		|         |      |       |-------------->|   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |          |  |          |
		--------------------------
		|         |      |       |
		--------------------------
		|         |      |       |


	tabx_item	TABX_ITEM                   tabx_list                uchar
	=================================     =================        =========
	| tabl_id | size | list pointer |---->| tabl_id | size|------->| x_val |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------
	|         |      |              |

*/
/*-------------------------------------------------------------------------*/

	/*
		Initialization constants of ie internal structure
		used by SPDU received processing.
	*/


		/*  Bearer capability (BC) */

CONST	struct	i_bc	df_spdu_bt2_i_bc = {
	CODING_STD_CCITT,
	TRF_CAP_3_1_AUDIO,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
};

		/*  Low layer compatibility (LLC) */

CONST	struct	i_llc	df_spdu_bt2_i_llc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	BYTE_VAL_NIL,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/* Call identity (CALL_ID) */

CONST	struct	i_call_id	df_spdu_bt2_i_call_id = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};

		/* Call state (CALL_STATE) */

CONST	struct	i_call_state	df_spdu_bt2_i_call_state = {
	CODING_STD_CCITT,
	STATE_NULL_0,
};

		/*  Called party number and subaddress (CALLED_NB CALLED_SUB_ADD) */

CONST	struct	i_called_nb		df_spdu_bt2_i_called_nb = {
	NB_UNKNOWN,
	PLAN_UNKNOWN,
	BYTE_VAL_NIL,
	A_NIL,
};

CONST	struct	i_called_sub_add	df_spdu_bt2_i_called_sub_add = {
	SUB_ADD_USER,
	SUB_ADD_EVEN,
	BYTE_VAL_NIL,
	0,
	A_NIL,
};

		/* Calling party number (CALLING_NB) */

CONST	struct	i_calling_nb	df_spdu_bt2_i_calling_nb = {
	NB_UNKNOWN,
	PLAN_UNKNOWN,
	PRES_ALLOWED,
	USER_PROVIDED,
	BYTE_VAL_NIL,
	A_NIL,
};

		/* Cause (CAUSE) */

CONST	struct	i_cause		df_spdu_bt2_i_cause = {
	CODING_STD_CCITT,
	LOCATION_PU_NET_LOC_USER,
	BYTE_VAL_NIL,
	C_C_NORMAL_EVENT,
	C_V_NORMAL_CLEARING_16,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Channel identification (CHAN_ID) */

CONST	struct	i_chan_id	df_spdu_bt2_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_BRI,
	CHAN_PREF,
	D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_CCITT,
	CHAN_NUMBER,
	B_CHAN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Display (DISPLAY) */

CONST	struct	i_display	df_spdu_bt2_i_display = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};

		/* High layer compatibility (HLC) */

CONST	struct	i_hlc	df_spdu_bt2_i_hlc = {
	CODING_STD_CCITT,
	INTER_CCITT_CEPT,
	PRESENTATION_PROFIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/* Keypad facility (KEYPAD) */

CONST	struct	i_keypad	df_spdu_bt2_i_keypad = {
	BYTE_VAL_NIL,
	A_NIL,
};

		/* Notification indicator (NOTIF_IND) */

CONST	struct	i_notif_ind		df_spdu_bt2_i_notif_ind = {
	USER_SUSPENDED,
	0,
	P_NIL
};

		/* Progress indicator (PROGRESS_IND) */

CONST	struct	i_progress_ind	df_spdu_bt2_i_progress_ind = {
	CODING_STD_CCITT,
	PROGRESS_LOC_USER,
	PROGRESS_DESCR_NON_END_TO_END_ISDN,
};

/*=========================================================================*/

	/*
		Initialization constants of the ie internal structure
		used by SSDU received processing.
	*/

		/*  Bearer capability (BC) */

CONST	struct	i_bc	df_ssdu_bt2_i_bc = {
	CODING_STD_CCITT,
	TRF_CAP_3_1_AUDIO,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
};

		/*  Low layer compatibility (LLC) */

CONST	struct	i_llc	df_ssdu_bt2_i_llc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	BYTE_VAL_NIL,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/* Call identity (CALL_ID) */

CONST	struct	i_call_id	df_ssdu_bt2_i_call_id = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};

		/* Call state (CALL_STATE) */

CONST	struct	i_call_state	df_ssdu_bt2_i_call_state = {
	CODING_STD_CCITT,
	STATE_NULL_0,
};

		/*  Called party number and subaddress (CALLED_NB CALLED_SUB_ADD) */

CONST	struct	i_called_nb		df_ssdu_bt2_i_called_nb = {
	NB_UNKNOWN,
	PLAN_UNKNOWN,
	BYTE_VAL_NIL,
	A_NIL,
};

CONST	struct	i_called_sub_add	df_ssdu_bt2_i_called_sub_add = {
	SUB_ADD_USER,
	SUB_ADD_EVEN,
	BYTE_VAL_NIL,
	0,
	A_NIL,
};

		/* Calling party number (CALLING_NB) */

CONST	struct	i_calling_nb	df_ssdu_bt2_i_calling_nb = {
	NB_UNKNOWN,
	PLAN_UNKNOWN,
	PRES_ALLOWED,
	USER_PROVIDED,
	BYTE_VAL_NIL,
	A_NIL,
};

		/* Cause (CAUSE) */

CONST	struct	i_cause		df_ssdu_bt2_i_cause = {
	CODING_STD_CCITT,
	LOCATION_USER,
	BYTE_VAL_NIL,
	C_C_NORMAL_EVENT,
	C_V_NORMAL_CLEARING_16,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Channel identification (CHAN_ID) */

CONST	struct	i_chan_id	df_ssdu_bt2_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_BRI,
	CHAN_PREF,
	D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_CCITT,
	CHAN_NUMBER,
	B_CHAN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Display (DISPLAY) */

CONST	struct	i_display	df_ssdu_bt2_i_display = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};

		/* High layer compatibility (HLC) */

CONST	struct	i_hlc	df_ssdu_bt2_i_hlc = {
	CODING_STD_CCITT,
	INTER_CCITT_CEPT,
	PRESENTATION_PROFIL,
	TELEPHONY,
	BYTE_VAL_NIL,
};

		/* Keypad facility (KEYPAD) */

CONST	struct	i_keypad	df_ssdu_bt2_i_keypad = {
	BYTE_VAL_NIL,
	A_NIL,
};

		/* Notification indicator (NOTIF_IND) */

CONST	struct	i_notif_ind		df_ssdu_bt2_i_notif_ind = {
	USER_SUSPENDED,
	0,
	P_NIL
};

		/* Progress indicator (PROGRESS_IND) */

CONST	struct	i_progress_ind	df_ssdu_bt2_i_progress_ind = {
	CODING_STD_CCITT,
	PROGRESS_LOC_USER,
	PROGRESS_DESCR_NON_ISDN_ORIG,
};

/*=========================================================================*/

				/* TABLES : list of valid values */

					/* Cause class */

CONST	uchar BT2_C_C_S[]={
						C_C_NORMAL_EVENT_0,
						C_C_NORMAL_EVENT,
						C_C_RESOURCE_UNAVAILABLE,
						C_C_SERVICE_NOT_AVAILABLE,
						C_C_SERVICE_NOT_IMPLEMENTED,
						C_C_INVALID_MESSAGE,
						C_C_PROTOCOL_ERROR,
						C_C_INTERWORKING,
						};

					/* Numbering Type */

CONST	uchar BT2_CALLED_NB_TYPE_S[] = {
						NB_UNKNOWN,
						NB_INTERNATIONAL,
						NB_NATIONAL,
						NB_NET_SPF,
						NB_SUBSCRIBER,
						NB_ABBREVIATED,
						NB_EXTENSION,
						};

					/* Numbering plan */

CONST	uchar BT2_CALLED_NB_PLAN_S[] = {
						PLAN_UNKNOWN,
						PLAN_ISDN,
						PLAN_DATA,
						PLAN_TELEX,
						PLAN_NATIONAL,
						PLAN_PRIVATE,
						PLAN_RESERVED,
						};


					/* Numbering type */

CONST	uchar BT2_CALLING_NB_TYPE_S[] = {
						NB_UNKNOWN,
						NB_INTERNATIONAL,
						NB_NATIONAL,
						NB_NET_SPF,
						NB_SUBSCRIBER,
						NB_EXTENSION,
						};

					/* Numbering plan */

CONST	uchar BT2_CALLING_NB_PLAN_S[] = {
						PLAN_UNKNOWN,
						PLAN_ISDN,
						PLAN_DATA,
						PLAN_TELEX,
						PLAN_NATIONAL,
						PLAN_PRIVATE,
						PLAN_RESERVED,
						};


					/* Calling presentation indicator */

CONST	uchar BT2_CALLING_NB_PRES_S[] = {
						PRES_ALLOWED,
						PRES_RESTRICTED,
						PRES_NOT_AVAILABLE,
						PRES_RESERVED,
						};

					/* Sub address indicator */

CONST	uchar BT2_SUB_ADD_IND_S[] = {
						SUB_ADD_ODD,
						SUB_ADD_EVEN,
						};

					/* Sub address type */

CONST	uchar BT2_SUB_ADD_TYPE_S[] = {
						SUB_ADD_OSI,
						SUB_ADD_USER,
						};

					/* Channel number */

CONST	uchar BT2_CHAN_NUMBER_S[] = {
						1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
						17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,
						};

					/* Preferred/exclusive */

CONST	uchar BT2_CHAN_PREF_EXCL_S[] = {
						CHAN_PREF,
						CHAN_EXCL,
						};

					/* Channel type */

CONST	uchar BT2_CHAN_TYPE_S[] = {
						B_CHAN,
						H0_CHAN,
						H11_CHAN,
						H12_CHAN,
						};

					/* Coding standard */

CONST	uchar BT2_CODING_STD_S[] = {
						CODING_STD_CCITT,
						CODING_STD_RESERVED,
						CODING_STD_NATIONAL,
						CODING_STD_SPF,
						};

					/* Data bit format */

CONST	uchar BT2_DATA_BIT_S[] = {
						DATA_BIT_UNUSED,
						DATA_BIT_5,
						DATA_BIT_7,
						DATA_BIT_8,
						};

					/* Duplex/half-duplex */

CONST	uchar BT2_DUPLEX_S[] = {
						FULL_DUPLEX,
						HALF_DUPLEX,
						};

					/* Interface type */

CONST	uchar BT2_INT_TYPE_S[] = {
						INT_TYPE_BRI,
						INT_TYPE_PRI,
						};

					/* Modem type */

CONST	uchar BT2_MODEM_S[] = {
						MODEM_V21,
						MODEM_V22,
						MODEM_V22_BIS,
						MODEM_V23,
						MODEM_V26,
						MODEM_V26_BIS,
						MODEM_V26_TER,
						MODEM_V27,
						MODEM_V27_BIS,
						MODEM_V27_TER,
						MODEM_V29,
						MODEM_V32,
						MODEM_V35,
						};

					/* Network independent clock (NIC) */

CONST	uchar BT2_NIC_S[] = {
						NIC_NOT_DATA,
						NIC_DATA,
						};

					/* Notification indicator description */

CONST	uchar BT2_NOTIF_IND_DESCR_S[] = {
						USER_SUSPENDED,
						USER_RESUMED,
						};

					/* Parity format (ie BC & LLC) */

CONST   uchar BT2_PARITY_S[] = {
	ODD,
	EVEN,
	NO_PARITY,
	FORCED_TO_0,
	FORCED_TO_1,
	};

					/* Progress description */

CONST	uchar BT2_PROGRESS_DESCRIPTION_S[] = {
						PROGRESS_DESCR_NON_END_TO_END_ISDN,
						PROGRESS_DESCR_NON_ISDN_DEST,
						PROGRESS_DESCR_NON_ISDN_ORIG,
						PROGRESS_DESCR_CALL_RETURNED_ISDN,
						PROGRESS_DESCR_IN_BAND_NOW,
						};

					/* Progress location */

CONST	uchar BT2_PROGRESS_LOCATION_S[] = {
						PROGRESS_LOC_USER,
						PROGRESS_LOC_PR_LOCAL_USER,
						PROGRESS_LOC_PU_LOCAL_USER,
						PROGRESS_LOC_PU_REMOTE_USER,
						PROGRESS_LOC_PR_REMOTE_USER,
						PROGRESS_LOC_INTERNATIONAL,
						PROGRESS_BEYONG_IWP,
						};

					/* Layer 1 protocol identifier */

CONST	uchar BT2_PROTOCOL_ID_1_S[] = {
						PROTOCOL_ID_1_I412,
						PROTOCOL_ID_1_V110,
						PROTOCOL_ID_1_G711_u,
						PROTOCOL_ID_1_G711_A,
						PROTOCOL_ID_1_RA_NON_CCITT,
						PROTOCOL_ID_1_X31,
						};

					/* Layer 2 protocol identifier */

CONST	uchar BT2_PROTOCOL_ID_2_S[] = {
						PROTOCOL_ID_2_X25_LL,
						};

					/* Layer 3 protocol identifier */

CONST	uchar BT2_PROTOCOL_ID_3_S[] = {
						PROTOCOL_ID_3_X25_PL,
						};

					/* Screening indicator */

CONST	uchar BT2_SCREEN_IND_S[] = {
						USER_PROVIDED,
						USER_PASSED,
						NETWORK_PROVIDED,
						};

					/* Stop bit format */

CONST	uchar BT2_STOP_BIT_S[] = {
						STOP_BIT_UNUSED,
						STOP_BIT_1,
						STOP_BIT_1_5,
						STOP_BIT_2,
						};

					/* Asynchronous/synchronous */

CONST	uchar BT2_SYN_ASYN_S[] = 	{
						SYN,
						ASYN,
						};

					/* Teleservices according to CCITT standard */

CONST	uchar BT2_TELESERVICE_CCITT_S[] = {
						TELEPHONY,
						FAX_3,
						SLOW_SCAN_VIDEO,
						FAX_4,
						TELETEX,
						VIDEOTEX,
						};

					/* Information transfer capability */

CONST	uchar BT2_TRF_CAP_S [] 	={
						TRF_CAP_SPEECH,
						TRF_CAP_UNRESTRICTED,
						TRF_CAP_3_1_AUDIO,
						};

CONST	uchar BT2_TRF_MODE_S[] = {
						TRF_MODE_CIRCUIT,
						TRF_MODE_PACKET,
						};

					/* Cause location */

CONST	uchar BT2_C_LOCATION_S [] 	={
						LOCATION_USER,
						LOCATION_PU_NET_LOC_USER,
						};

/*=========================================================================*/

	/* Tables selected according to another value (indexed tables) */


		/* Cause value  according to the class */

			/* Normal event - class 000 */


CONST	uchar BT2_C_V_NORMAL_EVENT_0_S[] = {
			C_C_NORMAL_EVENT_0,
			C_V_UNASSIGNED_NUMBER_1,
			C_V_NO_ROUTE_TO_TRANSIT_NET_2,
			C_V_NO_ROUTE_TO_DEST_3,
			C_V_CHAN_UNACCEPTABLE_4,
			C_V_AWARDED_7,
			};


			/* Normal event - class 001 */


CONST	uchar BT2_C_V_NORMAL_EVENT_S[] = {
			C_C_NORMAL_EVENT,
			C_V_NORMAL_CLEARING_16,
			C_V_USER_BUSY_17,
			C_V_NO_USER_RESPONDING_18,
			C_V_NO_ANSWER_19,
			C_V_CALL_REJECT_21,
			C_V_NUMBER_CHANGED_22,
			BT2_C_V_NON_SELECTED_USER_CLEARING_26,
			C_V_DEST_OUT_OF_ORDER_27,
			C_V_FACILITY_REJECT_29,
			C_V_RESPONSE_TO_STATUS_ENQUIRY_30,
			C_V_NORMAL_UNSPECIFIED_31,
			};


			/* Resource not available */

CONST	uchar BT2_C_V_RESOURCE_UNAVAILABLE_S[] ={
			C_C_RESOURCE_UNAVAILABLE,
			C_V_NO_CIRCUIT_AVAILABLE_34,
			C_V_NETWORK_OUT_OF_ORDER_38,
			C_V_NETWORK_TEMPORARY_FAILURE_41,
			C_V_NETWORK_CONGESTION_42,
			C_V_ACCESS_INFORMATION_DISCARDED_43,
			C_V_REQUESTED_CIRCUIT_NOT_AVAILABLE_44,
			C_V_RESOURCE_UNAVAILABLE_UNSPECIFIED_47,
			};

			/* Service not available */

CONST	uchar BT2_C_V_SERVICE_NOT_AVAILABLE_S[] = {
			C_C_SERVICE_NOT_AVAILABLE,
			C_V_QUALITY_OF_SERVICE_UNAVAILABLE_49,
			C_V_REQUESTED_FAC_NOT_SUBSCRIBED_50,
			C_V_BC_NOT_AUTHORIZED_57,
			C_V_BC_NOT_PRESENTLY_AVAILABLE_58,
			C_V_SERVICE_NOT_AVAILABLE_63,
			};

			/* Service not implemented */

CONST	uchar BT2_C_V_SERVICE_NOT_IMPLEMENTED_S[] = {
			C_C_SERVICE_NOT_IMPLEMENTED,
			C_V_BC_NOT_IMPLEMENTED_65,
			C_V_CHANNEL_TYPE_NOT_IMPLEMENTED_66,
			C_V_REQUESTED_FAC_NOT_IMPLEMENTED_69,
			C_V_ONLY_RESTRICTED_INFO_BEARER_70,
			C_V_SERVICE_NOT_IMPLEMENTED_UNSPECIFIED_79,
			};

			/* Invalid message */

CONST	uchar BT2_C_V_INVALID_MESSAGE_S[] = {
			C_C_INVALID_MESSAGE,
			C_V_INVALID_CALL_REF_81,
			C_V_IDENTIFIED_CHANNEL_NOT_EXIST_82,
			C_V_SUSPENDED_CALL_BUT_CALL_ID_NOT_EXIST_83,
			C_V_CALL_ID_IN_USE_84,
			C_V_INCOMPATIBLE_DESTINATION_88,
			C_V_DEST_ADDR_MISSING_90,
			C_V_INVALID_TRANSIT_NETWORK_SELECTION_91,
			C_V_INVALID_MESSAGE_UNSPECIFIED_95,
						};

			/* Protocol error */

CONST	uchar BT2_C_V_PROTOCOL_ERROR_S[] = {
			C_C_PROTOCOL_ERROR,
			C_V_MANDATORY_IE_MISSING_96,
			C_V_MESSAGE_TYPE_NON_EXISTENT_97,
			C_V_MESSAGE_STATE_INCONSISTENCY_98,
			C_V_NON_EXISTENT_IE_99,
			C_V_INVALID_IE_CONTENT_100,
			C_V_MESSAGE_NOT_COMPATIBLE_101,
			C_V_RECOVERY_ON_TIMER_EXPIRY_102,
			C_V_PROTOCOL_ERROR_UNSPECIFIED_111,
			};

			/* Interworking */

CONST	uchar BT2_C_V_INTERWORKING_S[] = {
			C_C_INTERWORKING,
			C_V_INTERWORKING_UNSPECIFIED_127,
			};

			/* Channel selection according to interface type */

CONST	uchar BT2_CHAN_SEL_BRI_S[] = {
						INT_TYPE_BRI,
						B1_CHAN,
						B2_CHAN,
						ANY_CHAN,
						};

CONST	uchar BT2_CHAN_SEL_PRI_S[] = {
						INT_TYPE_PRI,
						AS_INDICATED,
						ANY_CHAN,
						};

					/* User rate (V110) according to the synchronous/asynchronous value */

CONST	uchar BT2_USER_RATE_ASYN_S[] =	{
						ASYN,
						RA_E_BITS,
						RA_0_6KBS,
						RA_1_2KBS,
						RA_2_4KBS,
						RA_3_6KBS,
						RA_4_8KBS,
						RA_7_2KBS,
						RA_8KBS,
						RA_9_6KBS,
						RA_14_4KBS,
						RA_16KBS,
						RA_19_2KBS,
						RA_32KBS,
						RA_48KBS,
						RA_56KBS,
						};

CONST	uchar BT2_USER_RATE_SYN_S[] =	{
						SYN,
						RA_E_BITS,
						RA_0_6KBS,
						RA_1_2KBS,
						RA_2_4KBS,
						RA_3_6KBS,
						RA_4_8KBS,
						RA_7_2KBS,
						RA_8KBS,
						RA_9_6KBS,
						RA_14_4KBS,
						RA_16KBS,
						RA_19_2KBS,
						RA_32KBS,
						RA_48KBS,
						RA_56KBS,
						RA_0_75_1_2KBS,
						RA_1_2_0_75KBS,
						RA_0_050KBS,
						RA_0_075KBS,
						RA_0_110KBS,
						RA_0_150KBS,
						RA_0_200KBS,
						RA_0_300KBS,
						RA_12KBS,
						};

					/* Automata call state values according to the coding standard */

CONST	uchar BT2_CALL_STATE_CCITT_S[] = {
	CODING_STD_CCITT,
	STATE_NULL_0,
	STATE_CALL_INIT_1,
	STATE_OVERLAP_SENDING_2,
	STATE_OUTGOING_CALL_PROC_3,
	STATE_CALL_DELIVERED_4,
	STATE_CALL_PRESENT_6,
	STATE_CALL_RECEIVED_7,
	STATE_CONNECT_REQUEST_8,
	STATE_INCOMING_CALL_PROC_9,
	STATE_ACTIVE_10,
	STATE_DISCONNECT_REQUEST_11,
	STATE_DISCONNECT_INDICATION_12,
	STATE_SUSPEND_REQUEST_15,
	STATE_RESUME_REQUEST_17,
	STATE_RELEASE_REQUEST_19,
#	if EQUIPMENT == NT2
		STATE_LOCAL_FAC_REQUEST_21,
#	endif
	};

					/* Circuit/Packet rate */

CONST	uchar BT2_TRF_RATE_CIRCUIT_S[] = {
						TRF_MODE_CIRCUIT,
						TRF_RATE_64KBS,
						TRF_RATE_2x64KBS,
						TRF_RATE_384KBS,
						TRF_RATE_1536KBS,
						TRF_RATE_1920KBS,
						};

CONST	uchar BT2_TRF_RATE_PACKET_S[] = {
						TRF_MODE_PACKET,
						TRF_RATE_PACKET_MODE,
						};

/*-------------------------------------------------------------------------*/

		/*
		   Meta description of the information elements.
		   This description is	used to check an information element
		   inside a message and to store its value into  the internal
		   structure.
		   In the other way it is used to generate the information element of
		   a message from the internal structure.
		*/

#define NS_INCLUDE_IE_META_FUNCTION		ON		/* include prototypes of functions inside mp_ie.bt2 */

#include "bt2.mp_ie"  /* include IE meta-programs */

uchar bt2_calling_nb_spdu ()
{

		/* if default values are used for octet 3a, it shall be omitted. */

	ie_if_flag = ON;		/* in general case, process octet 3a */

	if ((direction == TO_D_CHANNEL) &&
		(I_calling_nb_presentation == PRES_ALLOWED) &&
		(I_calling_nb_screen_ind   == USER_PROVIDED)
	   ) {
		ie_if_flag = OFF;	/* default values used : omit octet 3a */
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

#define Ns_bt2_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_bt2_end_table_or_function		};
#define Ns_bt2_tab_tabl_entry(idx, tab)		Ns_tab_tabl_entry (idx, tab),
#define Ns_bt2_tabx_list_entry(tab)			Ns_tabx_list_entry (tab),
#define Ns_bt2_tab_tabx_entry(idx, tab)		Ns_tab_tabx_entry (idx, tab),

#define Ns_bt2_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx)	\
			Ns_tab_ie_entry (codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, 0),

#define Ns_bt2_tab_ie_no_i_str(codes, ie, mx)	{codes, ie, A_NIL, 0, A_NIL, A_NIL, A_NIL, mx, 0},
#define Ns_bt2_tab_ie_msg_header			{CODESET_NIL, MESSAGE_HEADER, (uchar *)A_NIL, sizeof(struct i_message_header), (uchar *)Pic_address (&i_message_header), (uchar *)A_NIL, (uchar *)A_NIL, 1, 0},

#include "bt2.tab_ie"		/* include other Tables describing the IEs */

#define BT2_MX_TABL (Rnd_sizeof(BT2_TAB_TABL)/Rnd_sizeof (struct tabl))
CONST	uchar	bt2_size_tab_tabl = BT2_MX_TABL;

#define BT2_MX_TABX (Rnd_sizeof(BT2_TAB_TABX)/Rnd_sizeof (struct tabx))
CONST	uchar	bt2_size_tab_tabx = BT2_MX_TABX;

CONST	uchar	bt2_size_tab_ie = Rnd_sizeof (BT2_TAB_IE) / IE_ELEM_SIZE;	/* maximum number of item in the table */

/*==========================================================================*

			 SPECIFIC PROCEDURES  : called when the meta description cannot
			 -------------------    solve the integrity problem. The direction
									parameter indicates the origination
									of the SPDU message (D CHANNEL or APPLI).

	 FROM_D_CHANNEL common context :  p_ie points the current position in
	 -----------------------------	  the SPDU message.

									p_ie_end points the end of the IE
									in the SPDU message.

									p_ind_buffer points the current free
									location in the ind_buffer.

		TO_D_CHANNEL common context :  p_ie points the current location of the
		---------------------------    SPDU message to generate.

*==========================================================================*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bt2_spdu_bc_out - implements the specific processing
							of a Bearer Capability Information
							Element.

Usage           uchar bt2_spdu_bc_out ();

Return value : 	bt2_spdu_bc_out returns OK  : valid
										NOK : invalid - fatal error.

Common constants and declarations : ns.h, net_i_s.h

Common objects : internal data structure i_bc, ie  spdu context.

*--------------------------------------------------------------------------*/

#define Get_layer_id()	Extract (5,Mask(2))

uchar bt2_spdu_bc_out ()
{
	ie_if_flag = ON;

		/* Check if octets 6 and 7 are BOTH received */

	if (direction == TO_D_CHANNEL) {

		if ((I_bc_protocol_id_2 == BYTE_VAL_NIL) || (I_bc_protocol_id_3 == BYTE_VAL_NIL)) {
			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_2) {

				/* It is NOT Octet 6 (layer 2) */

			ie_if_flag = OFF;
		}
	}
	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bt2_spdu_bc_in - implements the specific processing
							of a Bearer Capability Information
							Element.

Usage           uchar bt2_spdu_bc_in ();

Return value : 	bt2_spdu_bc_in returns OK  : valid
								   NOK : invalid - fatal error.

Common constants and declarations : ns.h, net_i_s.h

Common objects : internal data structure i_bc, ie  spdu context.

*--------------------------------------------------------------------------*/

uchar bt2_spdu_bc_in ()
{
		/* Check if octets 6 and 7 are BOTH received */

	if ((I_bc_protocol_id_2 != BYTE_VAL_NIL) && (I_bc_protocol_id_3 == BYTE_VAL_NIL))
		return (NOK);
	else
		return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bt2_spdu_bc_5 - implements the specific processing
							of the protocol ID 1 of a Bearer Capability
							Information	Element.

Usage           uchar bt2_spdu_bc_5 ();

Return value : 	bt2_spdu_bc_in returns OK  : valid

Common constants and declarations : ns.h, net_i_s.n

Common objects : internal data structure i_bc, ie  spdu context.

*--------------------------------------------------------------------------*/

uchar bt2_spdu_bc_5 ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_bc_layer_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_(bc,protocol_id_1) == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bt2_spdu_llc_5 - implements the specific processing
							of the protocol ID 1 of a LLC
							Information	Element.

Usage           uchar bt2_spdu_llc_5 ();

Return value : 	bt2_spdu_llc_in returns OK  : valid

Common constants and declarations : ns.h, net_i_s.n

Common objects : internal data structure i_llc, ie  spdu context.

*--------------------------------------------------------------------------*/

uchar bt2_spdu_llc_5 ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_llc_layer_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (i_llc[0].protocol_id_1 == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*------------------------------------------------------------------------*/

		/*
		   Test if interface type in chan_id IE and in
		   configuration are the same. If not return error.
		*/

uchar bt2_chan_id_spdu ()
{

	if (direction == FROM_D_CHANNEL) {

		if (I_(chan_id,int_type) == INT_TYPE_BRI) {

			if (Na_type != BRI) return (NOK);

		} else {

			if (Na_type != PRI) return (NOK);
		}

	}

		/* Process PRI type chan_id */

	if (I_(chan_id,int_type) != INT_TYPE_BRI) {

		if ((I_(chan_id,chan_sel) == NO_CHAN) ||
			(I_(chan_id,chan_sel) == ANY_CHAN)) {
			ie_optional_octet = ON;
		}

		if (direction == FROM_D_CHANNEL) {
			return (r_exec_spdu_ie ((uchar *)&BT2_CHAN_ID_PRI_P));

		} else {

			return (s_exec_spdu_ie ((uchar *)&BT2_CHAN_ID_PRI_P));
		}

	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

#undef Ns_bt2_table_or_function
#undef Ns_bt2_end_table_or_function
#undef Ns_bt2_tab_tabl_entry
#undef Ns_bt2_tabx_list_entry
#undef Ns_bt2_tab_tabx_entry
#undef Ns_bt2_tab_ie_entry
#undef Ns_bt2_tab_ie_no_i_str
#undef Ns_bt2_tab_ie_msg_header

#define Ns_bt2_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_bt2_end_table_or_function		}

#define Ns_bt2_tab_tabl_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_val, (uchar *)tab);
#define Ns_bt2_tabx_list_entry(tab)			Pic_init_struct_array_next (p_table,  p_val, (uchar	*)tab);
#define Ns_bt2_tab_tabx_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_tab, (struct tabx_list *)tab);

#define Ns_bt2_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx)	\
	Pic_init_struct_array (p_table,  i_pic, p_prog, (uchar	*)mp_a);		\
	Pic_init_struct_array (p_table,  i_pic, p_i_struct, (uchar	*)i_str);	\
	Pic_init_struct_array (p_table,  i_pic, p_init_spdu, (uchar	*)df_spdu);	\
	Pic_init_struct_array_next (p_table,  p_init_ssdu, (uchar	*)df_ssdu);

#define Ns_bt2_tab_ie_no_i_str(codes, ie, mx)	Ns_bt2_tab_ie_entry (0, 0, P_NIL, P_NIL, P_NIL, P_NIL, 0)

#define Ns_bt2_tab_ie_msg_header		Ns_bt2_tab_ie_entry (0, 0, P_NIL, &i_message_header, P_NIL, P_NIL, 0)

		/*	Function used to initialize address fields in Tables above */


void pic_init_ns_bt2_ie ()
{
	uchar	i_pic;			/* current index */

#	include "bt2.tab_ie"
}

#endif /* end of PIC used} */


/*EOF*/

