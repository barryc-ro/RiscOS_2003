
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ie.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the BRITISH TELECOM ISDN2 information
 * element and the integrity constraints associated to them.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	bt2_spdu_bc_out			(Void_parm);
	uchar	bt2_spdu_bc_in			(Void_parm);
	uchar	bt2_spdu_bc_5			(Void_parm);
	uchar	bt2_calling_nb_spdu		(Void_parm);
	uchar	bt2_chan_id_spdu		(Void_parm);
	uchar	bt2_spdu_llc_5			(Void_parm);

#endif


/*---------- Bearer capability (BC) */

D_START (BT2_BC_SPDU)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_EXT_1		(_3)
		D_TABL		(TRF_MODE)
		D_TABX		(TRF_RATE)
		D_EXT_1		(_4)
		D_OPTIONAL_OCTET(_567)
		D_FUNCTION	(OCTETS_5)

		D_IF_VAL	(IF_LAYER_1)

			D_VAL		(LAYER_1)
			D_TABL		(PROTOCOL_1)

				/* V110 */

			D_IF_VAL	(V110)
				D_EXT_0_1	(_5)
				D_TABL		(V110_SYN_ASYN)
				D_PAD		(V110_NEGOTIATION)
				D_TABX		(V110_USER_RATE)
				D_EXT_0_1	(V110_5A)
				D_PAD		(V110_INTER_RATE)
				D_TABL		(V110_NIC)
				D_PAD		(V110_FC)
				D_EXT_0_1	(V110_5B)
				D_TABL		(V110_STOP_BIT)
				D_TABL		(V110_DATA_BIT)
				D_TABL		(V110_PARITY)
				D_EXT_0_1	(V110_5C)
				D_TABL		(V110_DUPLEX)
				D_TABL		(V110_MODEM)
			D_END_IF	(ENDIF_V110)

					/* NON CCITT */

			D_IF_VAL	(NON_CCITT)
				D_EXT_0_1	(NON_CCITT_5)
				D_TABL		(NON_CCITT_SYN_ASYN)
				D_PAD		(NON_CCITT_NEG)
				D_TABX		(NON_CCITT_USER_RATE)
			D_END_IF		(ENDIF_NON_CCITT)

			D_EXT_1		(V110__5D)

			D_FUNCTION	(TEST_OUT)
			D_IF_VAL	(IF_6_AND_7)
				D_VAL		(L_ID_2)
				D_TABL		(PROTOCOL_ID_2)
				D_EXT_1		(_6)

				D_VAL		(L_ID_3)
				D_TABL		(PROTOCOL_ID_3)
				D_EXT_1 	(_7)
			D_END_IF	(END_6_AND_7)

		D_END_IF	(END_5)

D_END (TEST_IN)

START (BT2_BC_SPDU)
		TABL	(5,2,BT2_T_CODING_STD,				&i_bc[0].coding_std)
		TABL	(0,5,BT2_T_TRF_CAP,					&i_bc[0].trf_cap)
		EXT_1	()
		TABL	(5,2,BT2_T_TRF_MODE,				&i_bc[0].trf_mode)
		TABX	(0,5,BT2_TX_TRF_RATE,				&i_bc[0].trf_mode,	&i_bc[0].trf_rate)
		EXT_1	()

		OPTIONAL_OCTET()
		FUNCTION	(bt2_spdu_bc_5)

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_1,				&i_bc[0].layer_id_1)
			TABL	(0,5,BT2_T_PROTOCOL_ID_1,		&i_bc[0].protocol_id_1)

				/* V110 */

			IF_VAL	(I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1	()
				TABL	(6,1,BT2_T_SYN_ASYN,			&i_bc[0].syn_asyn)
				PAD		(5,1)
				TABX	(0,5,BT2_TX_USER_RATE,			&i_bc[0].syn_asyn,		&i_bc[0].user_rate)
				EXT_0_1	()
				PAD		(5,2)
				TABL	(3,2,BT2_T_NIC,					&i_bc[0].Nic)
				PAD		(0,3)
				EXT_0_1	()
				TABL	(5,2,BT2_T_STOP_BIT,			&i_bc[0].stop_bit)
				TABL	(3,2,BT2_T_DATA_BIT,			&i_bc[0].data_bit)
				TABL	(0,3,BT2_T_PARITY,				&i_bc[0].parity)
				EXT_0_1	()
				TABL	(6,1,BT2_T_DUPLEX,				&i_bc[0].duplex)
				TABL	(0,6,BT2_T_MODEM,				&i_bc[0].modem)
			END_IF	()

				/* NON CCITT */

			IF_VAL (I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
				EXT_0_1 ()
				TABL	(6,1,BT2_T_SYN_ASYN,			&i_bc[0].syn_asyn)
				PAD		(5,1)
				TABX	(0,5,BT2_TX_USER_RATE,			&i_bc[0].syn_asyn, &i_bc[0].user_rate)
			END_IF		()

			EXT_1	()

			FUNCTION(bt2_spdu_bc_out)
			IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
				VAL		(5,2,LAYER_ID_2,					&i_bc[0].layer_id_2)
				TABL	(0,5,BT2_T_PROTOCOL_ID_2,			&i_bc[0].protocol_id_2)
				EXT_1	()
				VAL		(5,2,LAYER_ID_3,					&i_bc[0].layer_id_3)
				TABL	(0,5,BT2_T_PROTOCOL_ID_3,			&i_bc[0].protocol_id_3)
				EXT_1 	()
			END_IF	()

		END_IF	()

END (bt2_spdu_bc_in)


/*---------- Call_identity (CALL_ID) */

D_START	(BT2_CALL_ID_SPDU)
	D_TEXT	(CALL_ID_VAL)
D_END	(END_SPDU)

START	(BT2_CALL_ID_SPDU)
	TEXT	(IA5, ANY_CHAR, &i_call_id[0].lgth, (uchar **)&i_call_id[0].p_val)
END		(0)


/*---------- Call state (CALL_STATE) */

D_START	(BT2_CALL_STATE_SPDU)
	D_TABL	(CODING_STD)
	D_TABX	(VAL)
	D_END_OCTET	(_3)
D_END	(END_SPDU)

START	(BT2_CALL_STATE_SPDU)
	TABL	(6,2,BT2_T_CODING_STD,	&i_call_state[0].coding_std)
	TABX	(0,6,BT2_TX_CALL_STATE,	&i_call_state[0].coding_std,	&i_call_state[0].val)
	END_OCTET	()
END	(0)

/*---------- Called party number (CALLED_NB) */

D_START	(BT2_CALLED_NB_SPDU)
		D_TABL	(TYPE)
		D_TABL	(PLAN_ID)
		D_EXT_1	(_3)
		D_TEXT	(DIGIT_)
D_END	(END_SPDU)

START	(BT2_CALLED_NB_SPDU)
		TABL	(4,3,BT2_T_CALLED_NB_TYPE,			&i_called_nb[0].nb_type)
		TABL	(0,4,BT2_T_CALLED_NB_PLAN,			&i_called_nb[0].plan_id)
		EXT_1	()
		TEXT	(IA5,ANY_CHAR, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END		(0)


/*---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(BT2_CALLED_SUB_ADD_SPDU)
		D_TABL	(TYPE)
		D_TABL	(IND)
		D_PAD	(NS_PAD_3)
		D_EXT_1	(_3)
		D_TEXT	(INFO_)
D_END	(END_SPDU)

START	(BT2_CALLED_SUB_ADD_SPDU)
		TABL	(4,3,BT2_T_SUB_ADD_TYPE,			&i_called_sub_add[0].sub_add_type)
		TABL	(3,1,BT2_T_SUB_ADD_IND,				&i_called_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1	()
		TEXT	(IA5,ANY_CHAR, 	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
END		(0)

/*---------- Calling party number (CALLING_NB) */

D_START	(BT2_CALLING_NB_SPDU_P)
		D_TABL		(TYPE)
		D_TABL		(PLAN_ID)

		D_FUNCTION	(CALLING_NB_FCT)
		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END	(END_SPDU)

START	(BT2_CALLING_NB_SPDU_P)
		TABL	(4,3,BT2_T_CALLING_NB_TYPE,			&i_calling_nb[0].nb_type)
		TABL	(0,4,BT2_T_CALLING_NB_PLAN,			&i_calling_nb[0].plan_id)

		FUNCTION(bt2_calling_nb_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,BT2_T_CALLING_NB_PRES,		&i_calling_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,BT2_T_SCREEN_IND,			&i_calling_nb[0].screen_ind)
		END_IF	()

		EXT_1	()
		OPTIONAL_OCTET ()
		TEXT	(IA5, ANY_CHAR, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

/*---------- Cause (CAUSE) */

D_START	(BT2_CAUSE_SPDU)
		D_TABL		(CODING_STD)
		D_PAD		(NS_PAD_3)
		D_TABL		(LOCATION)
		D_EXT_1		(_3)
		D_TABL		(C_CLASS)
		D_TABX		(C_VAL)
		D_EXT_1		(_4)
D_END	(END_SPDU)

START	(BT2_CAUSE_SPDU)
		TABL	(5,2,BT2_T_CODING_STD,						&i_cause[0].coding_std)
		PAD		(4,1)
		TABL	(0,4,BT2_T_C_LOCATION,						&i_cause[0].cause_loc)
		EXT_1	()
		TABL	(4,3,BT2_T_C_C,								&i_cause[0].cause_class)
		TABX	(0,4,BT2_TX_C_V, &i_cause[0].cause_class,	&i_cause[0].cause_val)
		EXT_1	()
END		(0)

/*---------- Channel idendification (CHAN_ID) */

D_START	(BT2_CHAN_ID_SPDU_P)
	D_VAL	(INT_ID)
	D_TABL	(INT_TYPE)
	D_PAD	(NS_PAD_3)
	D_TABL	(PREF_EXCL)
	D_PAD	(D_CHAN_IND)
	D_TABX	(SEL)
	D_EXT_1	(_3)
D_END	(END_SPDU)

START	(BT2_CHAN_ID_SPDU_P)
	VAL		(6,1,INT_ID_IMPLICIT,		&i_chan_id[0].int_id)
	TABL	(5,1,BT2_T_INT_TYPE,		&i_chan_id[0].int_type)
	PAD		(4,1)
	TABL	(3,1,BT2_T_CHAN_PREF_EXCL,	&i_chan_id[0].pref_excl)
	PAD		(2,1)
	TABX	(0,2,BT2_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	EXT_1	()
END	(bt2_chan_id_spdu)

	/*-----*/

	/* PRI-type chan_id */

D_START	(BT2_CHAN_ID_PRI_P)
	D_TABL		(CODING)
	D_VAL		(NB_MAP)
	D_TABL		(TYPE)
	D_EXT_1		(_3_2)
	D_TABL		(NBER)
	D_END_OCTET	(_5)
D_END   (CHAN_ID_PRI_E)

START	(BT2_CHAN_ID_PRI_P)
	TABL		(5,2,BT2_T_CODING_STD,		&i_chan_id[0].coding_std)
	VAL			(4,1,CHAN_NUMBER,			&i_chan_id[0].nb_map)
	TABL		(0,4,BT2_T_CHAN_TYPE,		&i_chan_id[0].chan_type)
	EXT_1		()
	TABL		(0,7,BT2_T_CHAN_NUMBER,		&i_chan_id[0].chan_nb)
	END_OCTET	()
END	(0)

/*---------- Display (DISPLAY) */

D_START	(BT2_DISPLAY_SPDU)
	D_TEXT	(INFO_)
D_END	(END_SPDU)

START	(BT2_DISPLAY_SPDU)
	TEXT(IA5,ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END		(0)


/*---------- High layer compatibility (HLC) */

D_START	(BT2_HLC_SPDU)
		D_VAL	(CODING_STD)
		D_VAL	(INTERPRETATION)
		D_VAL	(PRESENTATION)
		D_EXT_1	(_3)
		D_TABL	(TELESERVICE)
		D_EXT_1	(_4)
D_END	(END_SPDU)

START	(BT2_HLC_SPDU)
		VAL		(5,2,CODING_STD_CCITT,			&i_hlc[0].coding_std)
		VAL		(2,3,INTER_CCITT_CEPT,			&i_hlc[0].interpretation)
		VAL		(0,2,PRESENTATION_PROFIL,		&i_hlc[0].pres)
		EXT_1	()
		TABL	(0,7,BT2_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		EXT_1	()
END		(0)


/*---------- Keypad (KEYPAD) */

D_START	(BT2_KEYPAD_SPDU)
	D_TEXT	(VAL)
D_END	(END_SPDU)

START	(BT2_KEYPAD_SPDU)
	TEXT	(IA5,ANY_CHAR, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END	(0)


/*---------- Low layer compatibility (LLC) */

/*---------- Low layer compatibility (LLC) */

D_START	(BT2_LLC_SPDU)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_EXT_1		(_3)
		D_TABL		(TRF_MODE)
		D_TABX		(TRF_RATE)
		D_EXT_1		(_4)

		D_OPTIONAL_OCTET(_567)
		D_FUNCTION	(OCTETS_5)
		D_IF_VAL	(IF_LAYER_1)
		D_VAL		(LAYER_1)
		D_TABL		(PROTOCOL_1)
		D_EXT_0_1	(_5)

		/* V110 */

		D_IF_VAL	(V110)
			D_TABL		(V110_SYN_ASYN)
			D_PAD		(V110_NEGOTIATION)
			D_TABX		(V110_USER_RATE)
			D_EXT_0_1	(V110_5A)
			D_PAD		(V110_INTER_RATE)
			D_TABL		(V110_NIC)
			D_PAD		(V110_FC)
			D_EXT_0_1	(V110_5B)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_EXT_0_1	(V110_5C)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
			D_EXT_1		(V110__5D)
		D_END_IF	(ENDIF_V110)

		D_IF_VAL (NON_CCITT)
		D_TABL		(NON_CCITT_SYN_ASYN)
		D_PAD		(NON_CCITT_NEG)
		D_TABX		(NON_CCITT_USER_RATE)
		D_EXT_1		(NON_CCITT__5A)

		D_VAL		(L_ID_2)
		D_TABL		(PROTOCOL_ID_2)
		D_EXT_1		(_6)

		D_VAL		(L_ID_3)
		D_TABL		(PROTOCOL_ID_3)
		D_EXT_1 	(_7)

D_END (END_SPDU)

START (BT2_LLC_SPDU)
		TABL	(5,2,BT2_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(0,5,BT2_T_TRF_CAP,					&i_llc[0].trf_cap)
		EXT_1	()
		TABL	(5,2,BT2_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABX	(0,5,BT2_TX_TRF_RATE,	&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
		EXT_1	()

		OPTIONAL_OCTET()

		FUNCTION (bt2_spdu_llc_5)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)

		VAL			(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
		TABL		(0,5,BT2_T_PROTOCOL_ID_1,		&i_llc[0].protocol_id_1)
		EXT_0_1		()

		/* V110 */

		IF_VAL	(I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			TABL	(6,1,BT2_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			PAD		(5,1)
			TABX	(0,5,BT2_TX_USER_RATE,			&i_llc[0].syn_asyn,		&i_llc[0].user_rate)
			EXT_0_1	()
			PAD		(5,2)
			TABL	(3,2,BT2_T_NIC,					&i_llc[0].Nic)
			PAD		(0,3)
			EXT_0_1	()
			TABL	(5,2,BT2_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,BT2_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,BT2_T_PARITY,				&i_llc[0].parity)
			EXT_0_1	()
			TABL	(6,1,BT2_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,BT2_T_MODEM,				&i_llc[0].modem)
			EXT_1	()
		END_IF	()


			/* NON CCITT */

		IF_VAL (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
			TABL	(6,1,BT2_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			PAD		(5,1)
			TABX	(0,5,BT2_TX_USER_RATE,	&i_llc[0].syn_asyn, &i_llc[0].user_rate)
		END_IF		()

		VAL		(5,2,LAYER_ID_2,				&i_llc[0].layer_id_2)
		TABL	(0,5,BT2_T_PROTOCOL_ID_2,		&i_llc[0].protocol_id_2)
		EXT_1	()
		VAL		(5,2,LAYER_ID_3,				&i_llc[0].layer_id_3)
		TABL	(0,5,BT2_T_PROTOCOL_ID_3,		&i_llc[0].protocol_id_3)
		EXT_1 	()

END (0)

/*---------- Notification indicator (NOTIF_IND) */

D_START	(BT2_NOTIF_IND_SPDU)
	D_TABL	(DESCR)
	D_EXT_1	(_3)
D_END (END_SPDU)

START	(BT2_NOTIF_IND_SPDU)
	TABL	(0,7,BT2_T_NOTIF_IND_DESCR,				&i_notif_ind[0].notif_descr)
	EXT_1	()
END (0)

/*---------- Progress indicator (PROGRESS_IND) */

D_START	(BT2_PROGRESS_IND_SPDU)
	D_VAL	(CODING_STD)
	D_PAD	(NS_PAD_3)
	D_TABL	(LOCATION)
	D_EXT_1 (_3)
	D_TABL	(DESCRIPTION)
	D_EXT_1	(_4)
D_END		(END_SPDU)

START	(BT2_PROGRESS_IND_SPDU)
	VAL		(5,2,CODING_STD_CCITT,					&i_progress_ind[0].coding_std)
	PAD		(4,1)
	TABL	(0,4,BT2_T_PROGRESS_LOCATION,			&i_progress_ind[0].progress_loc)
	EXT_1 	()
	TABL	(0,7,BT2_T_PROGRESS_DESCRIPTION,		&i_progress_ind[0].progress_descr)
	EXT_1	()
END	(0)

/*EOF*/

