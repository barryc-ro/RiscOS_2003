
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_nt.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        bt2_net_build_pdu_ns - implements the simulation of the network side
 *                   for a call connection.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_net_build_pdu_ns - implements the simulation of the network side
					for a call connection.

Usage           bt2_net_build_pdu_ns ()

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void bt2_net_build_pdu_ns ()
{
		/* Message builder */

	switch (Tolower (g_spdu_id[0])) {

			/* Call establishment spdu event */

		case DA_ALERT :
			*p_info++	= ALERT;

#			if EQUIPMENT == NT2
				*p_info++	= CHAN_ID;
				*p_info++	= 1;
				*p_info++	= 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
										CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
#			endif

			 p_ie_o		= p_info;

			*p_info++	= DISPLAY;
			 Put_text_with_length ("*** alert ***");

			break;

		case DA_CALL_PROC :
			*p_info++ = CALL_PROC;

			*p_info++ = CHAN_ID;
			*p_info++ = 1;
			*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
									CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */

			 p_ie_o = p_info;

			*p_info++ = DISPLAY;
			 Put_text_with_length ("*** proc ***");
			break;

		case DA_CONN :
			*p_info++ = CONN;

			 p_ie_o = p_info;

			*p_info++ = DISPLAY;
			 Put_text_with_length ("*** conn ***");
			break;

		case DA_CONN_ACK :
			*p_info++ = CONN_ACK;

			 p_ie_o = p_info;

			*p_info++ = DISPLAY;
			 Put_text_with_length ("*** conn-ack ***");

			break;

		case DA_DISC :
			*p_info++ = DISC;

			 p_ie_m = p_info;

			*p_info++ = CAUSE;
			*p_info++ = 2;
			*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_PU_NET_LOC_USER */
			*p_info++ = 0x95;	/* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

			 p_ie_o = p_info;

			*p_info++ = DISPLAY;
			 Put_text_with_length ("*** disc ***");

			break;


		case DA_INFO :
			*p_info++	= INFO;

			 p_ie_o		= p_info;

			*p_info++	= DISPLAY;
			 Put_text_with_length ("*** info ***");

			break;

		case DA_REL :
			*p_info++ = REL;

			*p_info++ = CAUSE;
			*p_info++ = 2;
			*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_PU_NET_LOC_USER */
			*p_info++ = 0x95;	/* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

			 p_ie_o = p_info;

#			if EQUIPMENT == TE
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** rel  ***");
#			endif

			break;


		case DA_REL_COMP :
			*p_info++ = REL_COMP;

			 p_ie_m = p_info;

			*p_info++ = CAUSE;
			*p_info++ = 2;
			*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_PU_NET_LOC_USER */
			*p_info++ = 0x95;	/* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

			 p_ie_o = p_info;

			*p_info++ = DISPLAY;
			 Put_text_with_length ("*** rel-comp ***");

			break;


		case DA_RES :
			*p_info++ = RES;

			break;

		case DA_RES_ACK :
			*p_info++ = RES_ACK;

			 p_ie_m = p_info;

			*p_info++ = CHAN_ID;
			*p_info++ = 1;
			*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
									CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
			break;

		case DA_RES_REJ :
			*p_info++ = RES_REJ;

			 p_ie_m = p_info;

			*p_info++ = CAUSE;
			*p_info++ = 2;
			*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_PU_NET_LOC_USER */
			*p_info++ = 0x95;	/* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

			break;

		case DA_NOTIFY :
			*p_info++ = NOTIFY;

			 p_ie_m = p_info;

			*p_info++ = NOTIF_IND;
			*p_info++ = 1;
			*p_info++ = 0x80;

			 p_ie_o	  = p_info;

			*p_info++ = DISPLAY;
			 Put_text_with_length ("*** notify ***");

			break;

		case DA_PROGRESS :
			*p_info++ = PROGRESS;

			 p_ie_o	  = p_info;

			*p_info++ = CAUSE;
			*p_info++ = 2;
			*p_info++ = 0x82;
			*p_info++ = 0x9f;	/* #31 */

			 p_ie_m = p_info;

			*p_info++ = PROGRESS_IND;
			*p_info++ = 2;
			*p_info++ = 0x8a;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_BEYONG_IWP */
			*p_info++ = 0x81;	/* 1+ PROGRESS_DESR_NON_END_TO_END_ISDN */


			*p_info++ = DISPLAY;
			 Put_text_with_length ("*** progress ***");

			break;

		case DA_SETUP :
			*p_info++ = SETUP;

			*p_info++ = BC;
			*p_info++ = 3;
			*p_info++ = 0x90;	/* 1+ CODING_STD_CCITT+ TRF_CAP_3_1_AUDIO */
			*p_info++ = 0x90;	/* 1+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */
			*p_info++ = 0xa3;	/* 1+ 01+ PROTOCOL_ID_1_G711_A */

			 p_ie_m = p_info;

			*p_info++ = CHAN_ID;
			*p_info++ = 1;
			*p_info++ = 0x89;		/* BABT Test 6.12.91 */


			*p_info++ = CALLED_NB;
			*p_info++ = 7;
			*p_info++ = 0x80;
			Put_text	("123456");

			 p_ie_o	  = p_info;
			*p_info++ = HLC;
			*p_info++ = 2;
			*p_info++ = 0x91;
			*p_info++ = 0x81;

			break;

		case DA_SETUP_ACK :
			*p_info++ = SETUP_ACK;

			 p_ie_m = p_info;

			*p_info++ = CHAN_ID;
			*p_info++ = 1;
			*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
									CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
			break;

		case DA_SUSP :
			*p_info++ = SUSP;

			break;

		case DA_SUSP_ACK :
			*p_info++ = SUSP_ACK;

			break;

		case DA_SUSP_REJ :
			*p_info++ = SUSP_REJ;

			 p_ie_m = p_info;

			*p_info++ = CAUSE;
			*p_info++ = 2;
			*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_PU_NET_LOC_USER */
			*p_info++ = 0x95;	/* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

			break;

		case DA_STATUS :
			*p_info++ = STATUS;

			 p_ie_m = p_info;

			*p_info++ = CAUSE;
			*p_info++ = 2;
			*p_info++ = 0x82;
			*p_info++ = 0xef;	/* #111 */

			*p_info++ = CALL_STATE;
			*p_info++ = 1;
			*p_info++ = 0;		/* state null */

			 p_ie_o = p_info;

			*p_info++ = DISPLAY;
			 Put_text_with_length ("*** status ***");

			break;

		case DA_SPDU_ID_UNKNOWN:
			*p_info++ = SPDU_ID_UNKNOWN;

			*p_info++ = CAUSE;
			*p_info++ = 2;
			*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
			*p_info++ = 0x9f;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

			break;

		case '1' :
			Automata_1 ();
			break;

		case DA_HEXA_CODING :
				mg_ns_hexa ();		/* Hexadecimal coding */
				break;

		default :
			return;

	}

}

/*EOF*/
