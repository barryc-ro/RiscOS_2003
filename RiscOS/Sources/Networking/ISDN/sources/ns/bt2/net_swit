
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_switch.bt2
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) British telecom ISDN2 switch :
 *
 *        bt2_csc_dl_reinit - implement an unexpected data link reinit.
 *
 *        bt2_circuit_switched_call - implements the processing of the call
 *		                          control procedures.
 *
 *        bt2_circuit_switched_call_n - implements the processing of the call
 *		                            control procedures.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*                */
						/*----------------*/


#if NEW_FCT_STYLE == ON
	void	bt2_u0						(void);
	void	bt2_u1						(void);
	void	bt2_u2						(void);
	void	bt2_u3						(void);
	void	bt2_u4						(void);
	void	bt2_u6						(void);
	void	bt2_u7						(void);
	void	bt2_u8						(void);
	void	bt2_u9						(void);
	void	bt2_u10						(void);
	void	bt2_u11						(void);
	void	bt2_u12						(void);
	void	bt2_u15						(void);
	void	bt2_u17						(void);
	void	bt2_u19						(void);
	void	bt2_csc_dl_reinit			(void);
	uchar	bt2_circuit_switched_call	(void);
	uchar	bt2_error_handler			(void);
#else
	void	bt2_u0						();
	void	bt2_u1						();
	void	bt2_u2						();
	void	bt2_u3						();
	void	bt2_u4						();
	void	bt2_u6						();
	void	bt2_u7						();
	void	bt2_u8						();
	void	bt2_u9						();
	void	bt2_u10						();
	void	bt2_u11						();
	void	bt2_u12						();
	void	bt2_u15						();
	void	bt2_u17						();
	void	bt2_u19						();
	void	bt2_csc_dl_reinit			();
	uchar	bt2_circuit_switched_call	();
	uchar	bt2_error_handler			();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	bt2_csc_dl_reinit () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN)
									   for BT2 implementation.

Usage           	void bt2_csc_dl_reinit ();

Related
functions usage		void send_state (uchar class, uchar value, uchar diagnostic);

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void bt2_csc_dl_reinit ()
{

	ns_access_first_call ();

	while (Call_current_exist) {

		if (Call_state != STATE_NIL) {
			I_call_ref = Call_ref;
			Set_call_ref_not_nil ();
			send_state (C_C_PROTOCOL_ERROR,	C_V_PROTOCOL_ERROR_UNSPECIFIED_111, DIAGNOSTIC_NIL);
		}

		ns_access_next_call ();
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar bt2_circuit_switched_call ();

Related
functions usage void bt2_u0 .... bt2_u19 ()

Description     bt2_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*							CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|     start T305|     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

uchar bt2_circuit_switched_call ()
{

					/* 1 - EVENT DRIVEN PROCESSING */

	switch (event_id) {

							/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

							/* SETUP */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) == NOK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NO_CIRCUIT_AVAILABLE_34, P_NIL);
				Send_to_d_channel (REL_COMP);

			} else {

				Send_to_call_control (NS_CONN_IN);
				Start_timer_ns (BT2_T300);
				Set_state (STATE_CALL_PRESENT_6);
			}

			return (OK);

							/* DISCONNECT */

		case DA_DISC :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_CALL_INIT_1 :
				case STATE_DISCONNECT_INDICATION_12 :
				case STATE_RESUME_REQUEST_17 :
					ns_unexpected_ev ();
					break;

				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_DISCONNECT_REQUEST_11 :
					Stop_timer_ns (BT2_T305);
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Call Control */
					Reset_internal_ie ();
					set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					Send_to_d_channel_and_save_spdu (REL);
					N308 = 0;
					Start_timer_ns (BT2_T308);
					Set_state (STATE_RELEASE_REQUEST_19);
					break;

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Call Control */
					Set_state (STATE_DISCONNECT_INDICATION_12);		/* enter disconnect indication state */
					break;

			}

			return (OK);

							/* - RELEASE */

		case DA_REL :

			switch (Call_state) {

				case STATE_RESUME_REQUEST_17 :
					ns_unexpected_ev ();
					break;

				case STATE_RELEASE_REQUEST_19 :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */

						/*	For BT interim period we should transmit a
							RELease COMPlete message using the 2 following
							lines :

								Reset_internal_ie ();
								Send_to_d_channel (REL_COMP);

							Not implemented for ETSI conformance needed for
							BT agreement.
						*/

					call_clear ();									/* free call context */
					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);

						/* - RELEASE COMPLETE */

		case DA_REL_COMP :
			Send_to_call_control (NS_CLEAR_CO);						/* send NS clear confirm to Layer 4 */
			call_clear ();											/* free call context */
			return (OK);

						/* - NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :		/* 5.3.2.a */
					Send_to_d_channel (REL_COMP);
				case STATE_NULL_0 :
				case STATE_WAIT_DL :
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RESUME_REQUEST_17 :
				case STATE_RELEASE_REQUEST_19 :
					ns_unexpected_ev ();
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					disc_cause_error ();
					Stop_timer_ns  (BT2_T300);
					go_to_state_19 (BT2_T308);
					break;

				case STATE_CALL_INIT_1 :
					Release_saved_spdu ();

				default :					/* STATES 1, 4, 7, 8, 9, 10 */
					ns_stop_all_timers ();

					if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
						ie_implicit_val_x (CODESET_0, CAUSE, 0);	/* init implicit value */
					}

					Save_cause ();									/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);						/* send a DISCONNECT message */
					Start_timer_ns (BT2_T305);								/* start T305 */
					Set_state (STATE_DISCONNECT_REQUEST_11); 		/* enter the Disconnect Request state */
					break;

			}

			return (OK);

							/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
				case STATE_RESUME_REQUEST_17 :
					ns_unexpected_ev ();
					break;

				case STATE_RELEASE_REQUEST_19 :
					break;

				default :
					Send_to_call_control (NS_INFO_IN);
					break;
			}
			return (OK);

							/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			if ( (Call_state != STATE_OVERLAP_SENDING_2) &&
				 (is_ie_i (CODESET_0, CALLED_NB) == PRESENT)
			   ) {
				ns_unexpected_ev ();

			} else {

				switch (Call_state) {

					case STATE_NULL_0 :
					case STATE_CALL_INIT_1 :
					case STATE_CALL_PRESENT_6 :
					case STATE_RESUME_REQUEST_17 :
						ns_unexpected_ev ();
						break;

					case STATE_RELEASE_REQUEST_19 :
						break;

					case STATE_OVERLAP_SENDING_2 :
						Send_to_d_channel (INFO);
						Restart_timer_ns (BT2_T304);
						break;

					default :
						Send_to_d_channel (INFO);
						break;
				}

			}
			return (OK);

		case  DA_STATUS :

				/*
					When in case STATE_NULL_0, STATUS receipt is handled
					before. Implemented in error_handler with
					STATUS_CALL_REF error.
				*/

			if (I_call_state_val == STATE_NULL_0) {
				Reset_internal_ie ();
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			return (OK);

	} /* End switch (event_id) */

/*.........................................................................*/

						/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if ( ! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "bt2_circuit_switched_call");
	}

	switch (Call_state) {

			/* Null state (u0) */

		case STATE_NULL_0 :
		case STATE_WAIT_DL :
			bt2_u0 ();
			break;

			/* Call initiated (u1) */

		case STATE_CALL_INIT_1 :
			bt2_u1 ();
			break;

			/* Overlap sending (u2) */

		case STATE_OVERLAP_SENDING_2 :
			bt2_u2 ();
			break;

			/* Outgoing call proceeding (u3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			bt2_u3 ();
			break;

			/* Call delivered (u4) */

		case STATE_CALL_DELIVERED_4 :
			bt2_u4 ();
			break;

			/* Call present (u6) */

		case STATE_CALL_PRESENT_6 :
			bt2_u6 ();
			break;

			/* Call received (u7) */

		case STATE_CALL_RECEIVED_7 :
			bt2_u7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			bt2_u8 ();
			break;

			/* Incoming call proceeding (u9) */

		case STATE_INCOMING_CALL_PROC_9 :
			bt2_u9 ();
			break;

			/*  Active (u10) */

		case STATE_ACTIVE_10 :
			bt2_u10 ();
			break;

			/* Disconnect request (u11) */

		case STATE_DISCONNECT_REQUEST_11 :
			bt2_u11 ();
			break;

			/* Disconnect indication (u12) */

		case STATE_DISCONNECT_INDICATION_12 :
			bt2_u12 ();
			break;

			/* Suspend request (u15) */

		case STATE_SUSPEND_REQUEST_15 :
			bt2_u15 ();
			break;

			/* Resume request (u17) */

		case STATE_RESUME_REQUEST_17 :
			bt2_u17 ();
			break;

			/* Release request (u19) */

		case STATE_RELEASE_REQUEST_19 :
			bt2_u19 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "bt2_circuit_switched_call");

	}

	return (OK);
}

#if EQUIPMENT == NT2

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	bt2_csc_dl_reinit_n () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void bt2_csc_dl_reinit_n ();

Related
functions usage		void send_state (uchar class, uchar value, uchar diagnostic);

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

void bt2_csc_dl_reinit_n ()
{
	/* nothing to do */
}

/*--------------------------------------------------------------------------*/

/*								CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308	   |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bt2_circuit_switched_call_n - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar bt2_circuit_switched_call_n ();

Related
functions usage void bt2_n0 .... bt2_n254 ()

Description     bt2_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

uchar bt2_circuit_switched_call_n ()
{
	Trap (TRAP_NS_ERROR, "circuit_switched_call_n");
}

#endif

/*EOF*/
