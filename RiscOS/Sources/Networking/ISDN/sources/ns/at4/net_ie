
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_ie.at4
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
*
*Table structures :
*----------------
*
*        tabl_item   TABL_ITEM                                    uchar
*        ==========================                             ============
*        | tabl_id | size | p_val |---------------------------->|   val    |
*        --------------------------  tabl_yy      ============  ------------
*        |         |      |       |-------------->|   val    |  |   val    |
*        --------------------------               ------------  ------------
*        |         |      |       |               |   val    |  |   val    |
*        --------------------------               ------------  ------------
*        |         |      |       |               |          |  |          |
*        --------------------------
*        |         |      |       |
*        --------------------------
*        |         |      |       |
*
*
*    tabx_item   TABX_ITEM                   tabx_list                uchar
*    =================================     =================        =========
*    | tabl_id | size | list pointer |---->| tabl_id | size|------->| x_val |
*    ---------------------------------     -----------------        ---------
*    |         |      |              |     |         |     |        |  val  |
*    ---------------------------------     -----------------        ---------
*    |         |      |              |     |         |     |        |  val  |
*    ---------------------------------
*    |         |      |              |
*
*/

/*-------------------------------------------------------------------------*/

	/*
		Initialization constants of ie internal structure
		used by SPDU received processing.
	*/

		/*  Bearer capability (BC) */

CONST	struct  i_bc	df_spdu_at4_i_bc = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
};

		/* Call state (CALL_STATE) */

CONST	struct  i_call_state	df_spdu_at4_i_call_state = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/*  Called party number and subaddress (CALLED_NB, CALLED_SUB_ADD) */

CONST	struct  i_called_nb	 df_spdu_at4_i_called_nb = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

CONST	struct  i_called_sub_add	df_spdu_at4_i_called_sub_add = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Calling party number (CALLING_NB) */

CONST	struct  i_calling_nb	df_spdu_at4_i_calling_nb = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* calling party subaddress (CALLING_SUB_ADD) */

CONST	struct  i_calling_sub_add	df_spdu_at4_i_calling_sub_add = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Cause (CAUSE) */

CONST	struct  i_cause	 df_spdu_at4_i_cause = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/*  Change status (CHANGE_STATUS) */

CONST	struct  i_change_status	df_spdu_at4_i_change_status = {
	PREF_B_CHANNEL,
	CHANNEL_IN_SERVICE,
};

		/* Channel identification (CHAN_ID) */

CONST	struct  i_chan_id	df_spdu_at4_i_chan_id = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Congestion level (CONGEST_LEVEL) */

CONST   struct  i_congest_level	 df_spdu_at4_i_congest_level = {
	RECEIVER_READY
};

		/* High layer compatibility (HLC) */

CONST	struct  i_hlc	df_spdu_at4_i_hlc = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Low layer compatibility (LLC) */

CONST	struct  i_llc	df_spdu_at4_i_llc = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

#if NS_SPF_FACILITY == ON

		/* Network specific facilities (SPF_FAC) */

CONST   struct  i_spf_fac   df_spdu_at4_i_spf_fac = {
	1,
	NATIONAL_NETWORK_ID_TYPE,
	CARRIER_ID_CODE,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	FAC_VAL_6_BITS,
	FAC_SERVICE,
	FAC_AVAILABLE_FEATURE_IND,
};

#endif

		/* Progress indicator (PROGRESS_IND) */

CONST	struct  i_progress_ind  df_spdu_at4_i_progress_ind = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Redirecting number (REDIR_NB) */

CONST	struct  i_redir_nb	df_spdu_at4_i_redir_nb = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Restart indicator (RESTART_IND) */

CONST   struct  i_restart_ind   df_spdu_at4_i_restart_ind = {
	RI_INDICATED_CHANNEL
};

		/* User to user information (UUI) */

CONST   struct  i_uui   df_spdu_at4_i_uui = {
	PROTOCOL_DISCR_IA5,
	0,
	A_NIL
};

/*=========================================================================*/

	/*
		Initialization constants of the ie internal structure
		used by SSDU received processing.
	*/

		/*  Bearer capability (BC) */

CONST	struct  i_bc	df_ssdu_at4_i_bc = {
	CODING_STD_CCITT,
	BYTE_VAL_NIL,		/* Mandatory field */
	TRF_MODE_CIRCUIT,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_1,			/* Optional field */
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	RA_56KBS,			/* Optional field */
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
};

		/* Call state (CALL_STATE) */

CONST	struct  i_call_state	df_ssdu_at4_i_call_state = {
	BYTE_VAL_NIL,		/* Mandatory field */
	BYTE_VAL_NIL,
};

		/*  Called party number and subaddress (CALLED_NB, CALLED_SUB_ADD) */

CONST	struct  i_called_nb	 df_ssdu_at4_i_called_nb = {
	BYTE_VAL_NIL,		/* Mandatory field */
	BYTE_VAL_NIL,
	0,
	A_NIL
};

CONST	struct  i_called_sub_add	df_ssdu_at4_i_called_sub_add = {
	BYTE_VAL_NIL,		/* Mandatory field */
	BYTE_VAL_NIL,		/* Mandatory field */
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Calling party number (CALLING_NB) */

CONST	struct  i_calling_nb	df_ssdu_at4_i_calling_nb = {
	BYTE_VAL_NIL,		/* Mandatory field */
	BYTE_VAL_NIL,
	PRES_ALLOWED,
	USER_PROVIDED,
	0,
	A_NIL
};

		/* calling party subaddress (CALLING_SUB_ADD) */

CONST	struct  i_calling_sub_add	df_ssdu_at4_i_calling_sub_add = {
	SUB_ADD_USER,
	BYTE_VAL_NIL,		/* Mandatory field */
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Cause (CAUSE) */

CONST	struct  i_cause	 df_ssdu_at4_i_cause = {
	CODING_STD_CCITT,
	LOCATION_USER,
	BYTE_VAL_NIL,		/* Mandatory field */
	BYTE_VAL_NIL,		/* Mandatory field */
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/*  Change status (CHANGE_STATUS) */

CONST	struct  i_change_status	df_ssdu_at4_i_change_status = {
	PREF_B_CHANNEL,
	CHANNEL_IN_SERVICE,
};

		/* Channel identification (CHAN_ID) */

CONST	struct  i_chan_id	df_ssdu_at4_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_PRI,
	CHAN_PREF,
	NOT_D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_CCITT,
	BYTE_VAL_NIL,
	B_CHAN,
	BYTE_VAL_NIL,
	0,
	A_NIL,
};

		/* Congestion level (CONGEST_LEVEL) */

CONST   struct  i_congest_level	 df_ssdu_at4_i_congest_level = {
	RECEIVER_READY
};

		/* High layer compatibility (HLC) */

CONST   struct  i_hlc   df_ssdu_at4_i_hlc = {
	CODING_STD_CCITT,
	INTER_CCITT_CEPT,
	PRESENTATION_PROFIL,
	TELEPHONY,
	BYTE_VAL_NIL
};

		/* Low layer compatibility (LLC) */

CONST	struct  i_llc	df_ssdu_at4_i_llc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	OUT_BAND_NOT_POSSIBLE,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};


		/* Progress indicator (PROGRESS_IND) not sent by the user */

		/* Redirecting number (REDIR_NB) not sent by the user */

#if NS_SPF_FACILITY == ON

		/* Network specific facilities (SPF_FAC) */

CONST   struct  i_spf_fac   df_ssdu_at4_i_spf_fac = {
	1,
	NATIONAL_NETWORK_ID_TYPE,
	CARRIER_ID_CODE,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	FAC_VAL_6_BITS,
	FAC_SERVICE,
	FAC_AVAILABLE_FEATURE_IND,
};

#endif


		/* Restart indicator (RESTART_IND) */

CONST   struct  i_restart_ind   df_ssdu_at4_i_restart_ind = {
	RI_INDICATED_CHANNEL
};


		/* User to user information (UUI) */

CONST   struct  i_uui   df_ssdu_at4_i_uui = {
	PROTOCOL_DISCR_IA5,
	0,
	A_NIL
};

/*=========================================================================*/

				/*-------------------------------*/
				/* TABLES : list of valid values */
				/*-------------------------------*/

					/* Assignor/Assignee (ie LLC) */

CONST	uchar AT4_ASSIGN_S[] = {
	DEFAULT_ASSIGNEE,
	ASSIGNOR_ONLY,
	};

					/* In-band/Out_band negotiation (ie LLC) */

CONST	uchar AT4_BAND_S[] = {
	TSC,
	LL0,
	};


					/* Transfert mode (ie BC/LLC) */

CONST	uchar AT4_TRF_MODE_S[] = {
	TRF_MODE_CIRCUIT,
	TRF_MODE_PACKET,
	};

					/* Cause class (ie CAUSE) */

CONST	uchar AT4_C_C_S[]={
	C_C_NORMAL_EVENT_0,
	C_C_NORMAL_EVENT,
	C_C_RESOURCE_UNAVAILABLE,		/* Network congestion */
	C_C_SERVICE_NOT_AVAILABLE,
	C_C_SERVICE_NOT_IMPLEMENTED,
	C_C_INVALID_MESSAGE,
	C_C_PROTOCOL_ERROR,
	C_C_INTERWORKING,
	};

					/* Cause class network specific (ie CAUSE) */

CONST	uchar AT4_C_C_NET_S[]={
	C_C_NORMAL_EVENT_0,
	C_C_NORMAL_EVENT,
	C_C_SERVICE_NOT_AVAILABLE,
	C_C_PROTOCOL_ERROR,
	};

			/* Normal event - class 000 for national specific coding standard */

CONST	uchar AT4_C_V_NORMAL_EVENT_0_NAT_S[] = {
	C_V_VACANT_CODE_4,
	C_V_PREFIX_0_DIALED_IN_ERROR_8,
	C_V_PREFIX_1_DIALED_IN_ERROR_9,
	C_V_PREFIX_1_NOT_DIALED_10,
	C_V_EXCESSIVE_DIGITS_CALL_PROCEEDING_11,
	};


					/* Automata call state values (ie CALL_STATE) */

CONST	uchar AT4_CALL_STATE_VAL_S[] = {
	STATE_NULL_0,
	STATE_CALL_INIT_1,
	STATE_OUTGOING_CALL_PROC_3,
	STATE_CALL_DELIVERED_4,
	STATE_CALL_PRESENT_6,
	STATE_CALL_RECEIVED_7,
	STATE_CONNECT_REQUEST_8,
	STATE_INCOMING_CALL_PROC_9,
	STATE_ACTIVE_10,
	STATE_DISCONNECT_REQUEST_11,
	STATE_DISCONNECT_INDICATION_12,
	STATE_TONE_ACTIVE_18,
	STATE_RELEASE_REQUEST_19,
	STATE_REST_1,
	STATE_REST_2,
	};

					/* Coding standard (ie CAUSE, PROGRESS_IND) */

CONST	uchar AT4_CAUSE_CODING_STD_S[] = {
	CODING_STD_CCITT,
	CODING_STD_SPF,
	};

					/* Preferred/exclusive (ie CHAN_ID) */

CONST	uchar AT4_CHAN_PREF_EXCL_S[] = {
	CHAN_PREF,
	CHAN_EXCL,
	};

					/* D-channel indicator (ie CHAN_ID) */

CONST	uchar AT4_D_CHAN_S[] = {
	D_CHAN,
	NOT_D_CHAN,
	};

					/* Coding standard (ie HLC, LLC) */

CONST	uchar AT4_CODING_STD_S[] = {
	CODING_STD_CCITT,
	CODING_STD_RESERVED,
	CODING_STD_NATIONAL,
	CODING_STD_SPF,
	};

					/* Data bit format (ie LLC) */

CONST	uchar AT4_DATA_BIT_S[] = {
	DATA_BIT_UNUSED,
	DATA_BIT_5,
	DATA_BIT_7,
	DATA_BIT_8,
	};

					/* Duplex/half-duplex (ie LLC) */

CONST	uchar AT4_DUPLEX_S[] = {
	HALF_DUPLEX,
	FULL_DUPLEX,
	};

					/* Flow control on Reception (Rx) (ie LLC) */

CONST	uchar AT4_FLOW_CONTROL_RX_S[] = {
	FLOW_CAN_ACCEPT_DATA,
	FLOW_CANNOT_ACCEPT_DATA,
	};

					/* Flow control on Transmission (Tx) (ie LLC) */

CONST	uchar AT4_FLOW_CONTROL_TX_S[] = {
	FLOW_NOT_RQ_TX_DATA,
	FLOW_RQ_TX_DATA,
	};

					/* Rate adaption header/no header (ie LLC) */

CONST	uchar AT4_HEADER_S[] = {
	HEADER_NOT_INCLUDED,
	HEADER_INCLUDED,
	};

					/* Channel interface ID (ie CHAN_ID) */

CONST	uchar AT4_CHAN_INT_S[] = {
	INT_ID_IMPLICIT,
	INT_ID_EXPLICIT,
	};

					/* Channel type (ie CHAN_ID) */

CONST	uchar AT4_CHAN_TYPE_S[] = {
	B_CHAN,
	H0_CHAN,
	H11_CHAN,
	};

					/* Channel selection (CHAN_ID) */

CONST	uchar AT4_CHAN_SEL_S[] = {
	AS_INDICATED,
	NO_CHAN,
};
					/* Channel interface ID value (ie CHAN_ID) */

CONST	uchar AT4_CHAN_INT_VAL_S[] = {
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,
	23,24,25,26,27,28,29,30,31
	};

					/* Nb Map (ie CHAN_ID) */

CONST	uchar AT4_NB_MAP_S[] = {
	CHAN_NUMBER,
	CHAN_MAP,
	};

					/* Congestion level (ie CONGEST_LEVEL) */

CONST	uchar AT4_CONGEST_LEVEL_S[] = {
	RECEIVER_READY,
	RECEIVER_NOT_READY,
	};

					/* Intermediate rate (V110) (ie LLC) */

CONST	uchar AT4_INTER_RATE_S[] = {
	INTER_RA_UNUSED,
	INTER_RA_8KBS,
	INTER_RA_16KBS,
	INTER_RA_32KBS,
	};

					/* Logical Link Identifier negotiation (ie LLC) */

CONST	uchar AT4_LLI_S[] = {
	DEFAULT_LLI,
	FULL_PROTOCOL_LLI,
	};

					/* Cause location (ie CAUSE, PROGRESS_IND) */

CONST	uchar AT4_LOCATION_S[] = {
	LOCATION_USER,
	LOCATION_PR_NET_LOC_USER,
	LOCATION_PU_NET_LOC_USER,
	LOCATION_TRANSIT_NET,
	LOCATION_PU_NET_REMOTE_USER,
	LOCATION_PR_NET_REMOTE_USER,
	};

					/* Modem type (ie LLC) */

CONST	uchar AT4_MODEM_S[] = {
	MODEM_RESERVED,
	MODEM_V21,
	MODEM_V22,
	MODEM_V22_BIS,
	MODEM_V23,
	MODEM_V26,
	MODEM_V26_BIS,
	MODEM_V26_TER,
	MODEM_V27,
	MODEM_V27_BIS,
	MODEM_V27_TER,
	MODEM_V29,
	MODEM_V32,
	MODEM_V35,
	};

					/* Multi frame establishment support in Data Link (ie LLC) */

CONST	uchar AT4_MULTI_FRAME_S[] = {
	MULTI_FRAME_NOT_SUPPORTED,
	MULTI_FRAME_SUPPORTED,
	};

					/* In-band negotiation (V110 or V120) (ie LLC) */

CONST	uchar AT4_NEGOTIATION_S[] = {
	NEGOTIATION_IN_BAND,
	NEGOTIATION_NOT_IN_BAND,
	};

					/* Network independent clock (NIC) (ie LLC) */

CONST	uchar AT4_NIC_RX_S[] = {
	NIC_ACCEPT_DATA,
	NIC_NOT_ACCEPT_DATA,
	};

					/* Network independent clock (NIC) (ie LLC) */

CONST	uchar AT4_NIC_TX_S[] = {
	NIC_RQ_TX_DATA,
	NIC_NOT_RQ_TX_DATA,
	};

					/* Mode of operation (ie LLC) */

CONST	uchar AT4_OP_MODE_S[] = {
	BIT_TRANSPARENT,
	PROTOCOL_SENSITIVE,
	};

					/* Out-band negotiation indicator (ie LLC) */

CONST	uchar AT4_OUT_BAND_NEG_S[] =	{
	OUT_BAND_POSSIBLE,
	OUT_BAND_NOT_POSSIBLE,
	};

					/* Parity format (ie LLC) */

CONST	uchar AT4_PARITY_S[] = {
	ODD,
	EVEN,
	NO_PARITY,
	FORCED_TO_0,
	FORCED_TO_1,
	};


					/* Progress description (ie PROGRESS_IND) */

CONST	uchar AT4_PROGRESS_IND_DESCR_S[] = {
	PROGRESS_DESCR_NON_END_TO_END_ISDN,
	PROGRESS_DESCR_IN_BAND_NOW,
	};

					/* Layer 1 protocol identifier (ie LLC) */

CONST	uchar AT4_PROTOCOL_ID_LLC_1_S[] = {
	PROTOCOL_ID_1_V110,
	PROTOCOL_ID_1_G711_u,
	PROTOCOL_ID_1_G711_A,
	PROTOCOL_ID_1_G721,
	PROTOCOL_ID_1_7KHZ,
	PROTOCOL_ID_1_VIDEO,
	PROTOCOL_ID_1_RA_NON_CCITT,
	PROTOCOL_ID_1_V120,
	PROTOCOL_ID_1_X31,
	};

					/* Layer 2 protocol identifier (ie LLC) */

CONST	uchar AT4_PROTOCOL_ID_LLC_2_S[] = {
	PROTOCOL_ID_2_ISO_1745,
	PROTOCOL_ID_2_Q921,
	PROTOCOL_ID_2_X25_LL,
	PROTOCOL_ID_2_X25_ML,
	PROTOCOL_ID_2_T71,
	PROTOCOL_ID_2_HDLC_ARM,
	PROTOCOL_ID_2_HDLC_NRM,
	PROTOCOL_ID_2_HDLC_ABM,
	PROTOCOL_ID_2_LAN_LLC,
	PROTOCOL_ID_2_X75_SLP,
	};

					/* Layer 3 protocol identifier (ie LLC)*/

CONST	uchar AT4_PROTOCOL_ID_LLC_3_S[] = {
	PROTOCOL_ID_3_Q931,
	PROTOCOL_ID_3_X25_PL,
	PROTOCOL_ID_3_ISO_8208,
	PROTOCOL_ID_3_ISO_8348,
	PROTOCOL_ID_3_ISO_8473,
	PROTOCOL_ID_3_T70,
	};

					/* Reason for redirection (ie REDIR_NB) */

CONST	uchar AT4_REASON_REDIR_S[] = {
	R_UNKNOWN,
	R_CALL_FORWARDING_BUSY,
	R_CALL_FORWARDING_NO_REPLY,
	};

					/* Stop bit format (ie LLC) */

CONST	uchar AT4_STOP_BIT_S[] = {
	STOP_BIT_UNUSED,
	STOP_BIT_1,
	STOP_BIT_1_5,
	STOP_BIT_2,
	};

					/* Information structure (ie LLC) */

CONST	uchar AT4_STRUCTURE_S[] = {
	STRUCTURE_DEFAULT,
	STRUCTURE_8KHZ_INT,
	STRUCTURE_SDU_INT,
	STRUCTURE_UNSTRUCTURED,
	};

					/* Subaddress odd/even indicator (ie CALLED & CALLING _SUB_ADD) */

CONST	uchar AT4_SUB_ADD_IND_S[] = {
	SUB_ADD_ODD,
	SUB_ADD_EVEN,
	};

					/* Subaddress type (ie CALLED & CALLING _SUB_ADD) */

CONST	uchar AT4_SUB_ADD_TYPE_S[] = {
	SUB_ADD_OSI,
	SUB_ADD_USER,
	};

					/* Asynchronous/synchronous (ie LLC) */

CONST	uchar AT4_SYN_ASYN_S[] =	{
	SYN,
	ASYN,
	};

					/* Teleservices according to CCITT standard (ie HLC) */

CONST	uchar AT4_TELESERVICE_CCITT_S[] = {
	TELEPHONY,
	FAX_3,
	FAX_4,
	MIXED_MODE,
	PROCESSABLE_FORM,
	TELETEX,
	VIDEOTEX,
	TELEX,
	MHS,
	OSI,
	MAINTENANCE,		/* = HLC_NOT_AVAILABLE_1 */
	MANAGEMENT,			/* = HLC_NOT_AVAILABLE_2 */
	HLC_RESERVED,
	};

					/* Teleservices which may be extended (ie HLC) */

CONST	uchar AT4_TELESERVICE_EXT_S[] = {
	MAINTENANCE,
	MANAGEMENT,
	};

					/* Information transfer capability (ie BC) */

CONST	uchar AT4_TRF_CAP_BC_S []  ={
	TRF_CAP_SPEECH,
	TRF_CAP_UNRESTRICTED,
	TRF_CAP_RESTRICTED,
	TRF_CAP_3_1_AUDIO,
	};

					/* Information transfer capability (ie LLC) */

CONST	uchar AT4_TRF_CAP_LLC_S []  ={
	TRF_CAP_SPEECH,
	TRF_CAP_UNRESTRICTED,
	TRF_CAP_RESTRICTED,
	TRF_CAP_3_1_AUDIO,
	TRF_CAP_7_AUDIO,
	TRF_CAP_VIDEO,
	};

					/* Numbering plan (ie CALLED_NB) */

CONST	uchar AT4_CALLED_NB_PLAN_S[] = {
	PLAN_UNKNOWN,
	PLAN_ISDN,
	PLAN_PRIVATE,
	};

					/* Numbering type (ie CALLED_NB) */

CONST	uchar AT4_CALLED_NB_TYPE_S[] = {
	NB_INTERNATIONAL,
	NB_NATIONAL,
	NB_SUBSCRIBER,
	};

					/* Numbering plan (ie REDIR_NB) */

CONST	uchar AT4_REDIRECTION_NB_PLAN_S[] = {
	PLAN_ISDN,
	PLAN_PRIVATE,
	};

					/* Screening indicator (CALLING_NB) */

CONST	uchar AT4_CALLING_NB_SCREEN_S [] = {
	USER_PROVIDED,
	USER_PASSED,
	USER_FAILED,
	NETWORK_PROVIDED,
};


					/* Calling presentation indicator (ie CALLING_NB) */

CONST	uchar AT4_CALLING_NB_PRES_S[] = {
	PRES_ALLOWED,
	PRES_RESTRICTED,
	};
					/* Numbering plan (ie CALLING_NB) */

CONST	uchar AT4_CALLING_NB_PLAN_S[] = {
	PLAN_UNKNOWN,
	PLAN_ISDN,
	PLAN_PRIVATE,
	};
					/* Numbering type (ie CALLING_NB) */

CONST	uchar AT4_CALLING_NB_TYPE_S[] = {
	NB_INTERNATIONAL,
	NB_NATIONAL,
	NB_SUBSCRIBER,
	};

					/* User rate (V110 & V120) (ie LLC) */

CONST	uchar AT4_USER_RATE_S[] =	{
	RA_E_BITS,
	RA_0_6KBS,
	RA_1_2KBS,
	RA_2_4KBS,
	RA_3_6KBS,
	RA_4_8KBS,
	RA_7_2KBS,
	RA_8KBS,
	RA_9_6KBS,
	RA_14_4KBS,
	RA_16KBS,
	RA_19_2KBS,
	RA_32KBS,
	RA_48KBS,
	RA_56KBS,
	RA_64KBS,
	RA_0_1345KBS,
	RA_0_100KBS,
	RA_0_75_1_2KBS,
	RA_1_2_0_75KBS,
	RA_0_050KBS,
	RA_0_075KBS,
	RA_0_110KBS,
	RA_0_150KBS,
	RA_0_200KBS,
	RA_0_300KBS,
	RA_12KBS,
	};

		/* Multuplier for BC or LLC in case of n*64 kb/s option */

CONST	uchar AT4_T_MULTIPLIER_S[] = {
	2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24
	};


		/* Network Id length coding value for net spf facility (SPF_FAC) */

CONST	uchar AT4_NET_ID_LGTH_S[] = {
	0,
	4
};

		/* Type of network Id (SPF_FAC) */

CONST	uchar AT4_NET_ID_TYPE_S[] = {
	USER_SPECIFIED_TYPE,
	NATIONAL_NETWORK_ID_TYPE,
};

CONST	uchar AT4_PARAMETER_BINARY_S[] = {
	SPF_FAC_PARAMETER,
	SPF_FAC_BINARY,
};

CONST	uchar AT4_FAC_SERV_FEAT_S[] = {
	FAC_SERVICE,
	FAC_FEATURE
};

CONST	uchar AT4_BIN_FEATURE_S[] = {
	FAC_CPN_SID_PREFERRED,
	FAC_BN_ANI_PREFERRED,
	FAC_CPN_SID_ONLY,
	FAC_BN_ANI_ONLY,
	FAC_CALL_ASSOC_TSC,
	FAC_TSC_CLEAR_RU,
	FAC_OPERATOR,
	FAC_PCCO,
};

CONST	uchar AT4_BIN_SERVICE_S[] = {
	FAC_SDN,
	FAC_MEGACOM_800,
	FAC_MEGACOM,
	FAC_ACCUNET,
	FAC_LONG_DISTANCE,
	FAC_INTERNATIONAL_800,
	FAC_ATT_MULTIQUEST,
};



		/* User to user information protocol discriminator (ie UUI) */

CONST	uchar AT4_UUI_PROTOCOL_DISCR_S[] = {
	PROTOCOL_DISCR_USER_SPF,
	PROTOCOL_DISCR_OSI,
	PROTOCOL_DISCR_X244,
	PROTOCOL_DISCR_SYSTEM_MANAGEMENT,
	PROTOCOL_DISCR_IA5,
	PROTOCOL_DISCR_V120,
	PROTOCOL_DISCR_Q931,
	};

					/* Change status values (CHANGE_STATUS) */

CONST	uchar AT4_CHANGE_STATUS_S[] = {
	CHANNEL_IN_SERVICE,
	CHANNEL_MAINTENANCE,
	CHANNEL_OUT_OF_SERVICE,
};

/*=========================================================================*/

	/* Tables selected according to another value (indexed tables) */

		/* Cause value  according to the class */

			/* Normal event - class 000 */

CONST	uchar AT4_C_V_NORMAL_EVENT_0_S[] = {
	C_C_NORMAL_EVENT_0,
	C_V_UNASSIGNED_NUMBER_1,
	C_V_CHAN_UNACCEPTABLE_6,
};

			/* Normal event - class 001 */

CONST	uchar AT4_C_V_NORMAL_EVENT_S[] = {
	C_C_NORMAL_EVENT,
	C_V_NORMAL_CLEARING_16,
	C_V_USER_BUSY_17,
	C_V_NO_USER_RESPONDING_18,
	C_V_NO_ANSWER_19,
	C_V_CALL_REJECT_21,
	C_V_NUMBER_CHANGED_22,
	C_V_INVALID_NUMBER_FORMAT_28,
	C_V_FACILITY_REJECT_29,
	C_V_RESPONSE_TO_STATUS_ENQUIRY_30,
	C_V_NORMAL_UNSPECIFIED_31,

};

			/* Resource not available */

CONST	uchar AT4_C_V_RESOURCE_UNAVAILABLE_S[] ={
	C_C_RESOURCE_UNAVAILABLE,
	C_V_NO_CIRCUIT_AVAILABLE_34,
	C_V_NETWORK_TEMPORARY_FAILURE_41,
	C_V_NETWORK_CONGESTION_42,
	C_V_ACCESS_INFORMATION_DISCARDED_43,
	C_V_REQUESTED_CIRCUIT_NOT_AVAILABLE_44,
	C_V_NEW_DESTINATION_47,
};

			/* Service not available */

CONST	uchar AT4_C_V_SERVICE_NOT_AVAILABLE_S[] = {
	C_C_SERVICE_NOT_AVAILABLE,
	C_V_REQUESTED_FAC_NOT_SUBSCRIBED_50,
	C_V_OUTGOING_CALLS_BARRED_52,
	C_V_INCOMING_CALLS_BARRED_54,
	C_V_BC_NOT_PRESENTLY_AVAILABLE_58,
	C_V_SERVICE_NOT_AVAILABLE_63,
};

			/* Service not implemented */

CONST	uchar AT4_C_V_SERVICE_NOT_IMPLEMENTED_S[] = {
	C_C_SERVICE_NOT_IMPLEMENTED,
	C_V_BC_NOT_IMPLEMENTED_65,
	C_V_CHANNEL_TYPE_NOT_IMPLEMENTED_66,
	C_V_REQUESTED_FAC_NOT_IMPLEMENTED_69,
};

			/* Invalid message */

CONST	uchar AT4_C_V_INVALID_MESSAGE_S[] = {
	C_C_INVALID_MESSAGE,
	C_V_INVALID_CALL_REF_81,
	C_V_IDENTIFIED_CHANNEL_NOT_EXIST_82,
	C_V_INCOMPATIBLE_DESTINATION_88,
};

			/* Protocol error */

CONST	uchar AT4_C_V_PROTOCOL_ERROR_S[] = {
	C_C_PROTOCOL_ERROR,
	C_V_MANDATORY_IE_MISSING_96,
	C_V_MESSAGE_TYPE_NON_EXISTENT_97,
	C_V_MESSAGE_STATE_INCONSISTENCY_98,
	C_V_NON_EXISTENT_IE_99,
	C_V_INVALID_IE_CONTENT_100,
	C_V_RECOVERY_ON_TIMER_EXPIRY_102,
};

			/* Interworking */

CONST	uchar AT4_C_V_INTERWORKING_S[] = {
	C_C_INTERWORKING,
	C_V_INTERWORKING_UNSPECIFIED_127,
};

/*-------------------------------------------------------------------------*/

					/* Information transfer rate (ie BC) according to transfer mode */

CONST	uchar AT4_BC_TRF_RATE_CIRCUIT_S[] = {
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	TRF_RATE_384KBS,
	TRF_RATE_1536KBS,
};

					/* Information transfer rate (ie LLC) according to transfer mode */

CONST	uchar AT4_TRF_RATE_CIRCUIT_S[] = {
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	TRF_RATE_384KBS,
	TRF_RATE_1536KBS,
};

CONST	uchar AT4_TRF_RATE_PACKET_S[] = {
	TRF_MODE_PACKET,
	TRF_RATE_PACKET_MODE,
};

/*-------------------------------------------------------------------------*/

		/*
			Meta description of the information elements.
			This description is  used to check an information element
			inside a message and to store its value into  the internal
			structure.
			In the other way it is used to generate the information element of
			a message from the internal structure.
		*/

#define NS_INCLUDE_IE_META_FUNCTION		ON		/* include prototypes of functions inside mp_ie.at4 */

#include "at4.mp_ie"  /* include IE meta-programs */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bc_spdu - implements the processing of the Bearer
						   capability (BC) IE of a received SPDU
						   message and of a SPDU message to be sent.

Usage			uchar bc_spdu ();

Return value :  bc_spdu returns	= OK valid data,
								= NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar at4_bc_4ab_spdu ()
{
	ie_if_flag = ON;	/* octets 4a and 4b may be present */

	if ((direction			== TO_D_CHANNEL)			&&
		(I_(bc,structure)	== STRUCTURE_DEFAULT)		&&
		(I_(bc,config)		== CONFIG_POINT_TO_POINT)	&&
		(I_(bc,est)			== EST_DEMAND)				&&
		(I_(bc,symmetry)	== BIDIRECTIONAL_SYMMETRY)	&&
		(I_(bc,dest_rate)	== I_(bc,trf_rate))) {

		/* default values for octets 4a and 4b : they are omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar at4_bc_4b_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 4b may be present */

	if ((direction			== TO_D_CHANNEL)			&&
		(I_(bc,symmetry)	== BIDIRECTIONAL_SYMMETRY)	&&
		(I_(bc,dest_rate)	== I_(bc,trf_rate))) {

		/* default values for octet 4b : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

#define Get_layer_id()	Extract (5,Mask(2))

uchar at4_bc_5_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_bc_layer_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_(bc,protocol_id_1) == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar at4_bc_6_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 6 may be present */

		/* if I_bc_layer_id_2 == BYTE_VAL_NIL -> octet 6 is missing */

	if (direction == TO_D_CHANNEL) {

		/* octet 6 must be present if PACKET MODE */

		if (I_(bc,protocol_id_2) == BYTE_VAL_NIL) {

			/* octet 6 is missing */

			if (I_(bc,trf_mode == TRF_MODE_PACKET)) return (NOK);

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_2) {

				/* It is NOT Octet 6 (layer 2) */

				/* octet 6 must be present if PACKET MODE */

			if (I_(bc,trf_mode == TRF_MODE_PACKET)) return (NOK);

			ie_if_flag = OFF;
		}

	}


	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar at4_bc_7_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 7 may be present */

		/* if I_bc_layer_id_3 == BYTE_VAL_NIL -> octet 7 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_(bc,protocol_id_3) == BYTE_VAL_NIL) {

			/* octet 7 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_3) {

				/* It is NOT Octet 7 (layer 3) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

uchar at4_calling_nb_spdu ()
{

		/* if default values are used for octet 3a, it shall be omitted. */

	ie_if_flag = ON;		/* in general case, process octet 3a */

	if ((direction == TO_D_CHANNEL) &&
		(I_calling_nb_presentation == PRES_ALLOWED) &&
		(I_calling_nb_screen_ind   == USER_PROVIDED)
	   ) {

		ie_if_flag = OFF;	/* default values used : omit octet 3a */
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar at4_chan_id_check ()
{

#if NS_MAINTENANCE_CAPABILITY == ON
	struct nsna FAR *p_sav;
#endif

	if (direction == FROM_D_CHANNEL) {

		if (I_chan_id_int_type == INT_TYPE_BRI) {
			if (Na_type != BRI) return (NOK);

		} else {

			if (Na_type != PRI) return (NOK);
		}

	}

		/* Process PRI type chan_id */

	if (I_(chan_id,int_type) != INT_TYPE_BRI) {

		if (direction == TO_D_CHANNEL) {

			if (I_(chan_id,chan_sel) == NO_CHAN) {
				return (OK);
			}

		} else {

			if ((I_(chan_id,chan_sel) == NO_CHAN) ||
				(I_(chan_id,chan_sel) == ANY_CHAN)) {
				ie_optional_octet = ON;
			}
		}

		if (direction == FROM_D_CHANNEL) {

#			if NS_MAINTENANCE_CAPABILITY == ON

					/*
					 * Check if the interface Id is valid.
					 * We don't need to do that if the
					 * NFAS TSP was selected because in that
					 * case, we have no idea of what are the interfaces
					 * the application is dealing with.
					 *
					 * if ns_nfas in OFF, we have TSP and no D channel Backup.
					 * if ns_nfas in ON, we still may have a TSP (with D channel backup)
					 */

				if (ns_nfas == ON) {

						/* Check if we have a TSP mode */

					if ((Na_maint_type != NFAS_TSP_BKP) &&
						(Na_maint_type != NO_NFAS)) {

							/*
							 * No TSP mode --> check the int_id.
							 */

						p_sav = p_nsna;

						if (I_(chan_id, int_id) == INT_ID_EXPLICIT) {

							if (ns_access_na (I_(chan_id, int_id_val)) == NOK) {
								p_nsna = p_sav;
								return (NOK);
							}
						}

						p_nsna = p_sav;
					}
				}

#			endif

			return (r_exec_spdu_ie ((uchar *)&AT4_CHAN_ID_PRI_P));

		} else {

			return (s_exec_spdu_ie ((uchar *)&AT4_CHAN_ID_PRI_P));
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar at4_check_chan_nb ()
{

	uchar b_chan, mx_b_chan, i;


	if (direction == FROM_D_CHANNEL) {

		if (I_(chan_id, nb_map) == CHAN_NUMBER) {

			mx_b_chan = NS_MX_B_CHAN_T1 - 1;

#			if NS_MAINTENANCE_CAPABILITY == ON

				if (ns_nfas == ON) {

					if (Na_d_channel_type == NS_D_CHAN_NIL) {
						mx_b_chan = NS_MX_B_CHAN_T1;
					}
				}

#			endif

			for (i = 0; i < I_chan_id_chan_number_lgth; i++) {
				b_chan = *I_chan_id_a_chan_number;
				Reset_ext_bit (b_chan);

				if (b_chan > mx_b_chan) {
					return (NOK);
				}
			}

		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			llc_spdu - implements the processing of the low layer
							compatibility (LLC) IE of a received SPDU
							message and of SPDU message to be sent.

Usage			uchar llc_spdu ();

Return value :  llc_spdu returns = OK valid data,
								 = NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/
uchar at4_llc_3a_spdu ()
{

	ie_if_flag = ON;	/* (default value) : octet 3a may be present */

	if ((direction == TO_D_CHANNEL) &&
		(i_llc[0].out_band_neg == OUT_BAND_NOT_POSSIBLE)) {

			/* default value for octet 3a : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);

}


uchar at4_llc_4ab_spdu ()
{
	ie_if_flag = ON;	/* octets 4a and 4b may be present */

	if (direction == TO_D_CHANNEL) {

		if (i_llc[0].trf_rate == TRF_RATE_MULTI_RATE) {

			ie_if_flag = OFF;

		} else {

			if ((i_llc[0].structure == STRUCTURE_DEFAULT)		&&
				(i_llc[0].config	== CONFIG_POINT_TO_POINT)	&&		/* forced value anyway */
				(i_llc[0].est		== EST_DEMAND)				&&		/* forced value anyway */
				(i_llc[0].symmetry	== BIDIRECTIONAL_SYMMETRY)	&&		/* forced value anyway */
				(i_llc[0].dest_rate == i_llc[0].trf_rate)) {

					/* default values for octets 4a and 4b : they are omitted */

				ie_if_flag = OFF;
			}
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar at4_llc_4b_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 4b may be present */

	if ((direction		 == TO_D_CHANNEL)			&&
		(i_llc[0].symmetry	 == BIDIRECTIONAL_SYMMETRY)	&&		/* forced value anyway */
		(i_llc[0].dest_rate == i_llc[0].trf_rate)) {

		/* default values for octet 4b : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

#define Get_layer_id()	Extract (5,Mask(2))

uchar at4_llc_5_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_llc_protocol_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (i_llc[0].protocol_id_1 == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar at4_llc_6_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 6 may be present */

		/* if I_llc_layer_id_2 == BYTE_VAL_NIL -> octet 6 is missing */

	if (direction == TO_D_CHANNEL) {

			/* octet 6 must be present if PACKET MODE */

		if (i_llc[0].protocol_id_2 == BYTE_VAL_NIL) {

			/* octet 6 is missing */

			if (i_llc[0].trf_mode == TRF_MODE_PACKET) return (NOK);

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_2) {

				/* It is NOT Octet 6 (layer 2) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar at4_llc_7_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 7 may be present */

		/* if I_llc_layer_id_3 == BYTE_VAL_NIL -> octet 7 is missing */

	if (direction == TO_D_CHANNEL) {

		if (i_llc[0].protocol_id_3 == BYTE_VAL_NIL) {

				/* octet 7 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_3) {

				/* It is NOT Octet 7 (layer 3) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

#if NS_SPF_FACILITY == ON /* { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		at4_spf_fac_spdu - implements the processing of the specific facility
						  IE (received or to be sent in a SPDU message).

Usage	   uchar at4_spf_fac_spdu ();

Return value :  at4_spf_fac_spdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar at4_spf_fac_spdu ()
{

	if (direction == TO_D_CHANNEL) {

		I_spf_fac_net_id_lgth = 3;

		if (check_convert (	(uchar FAR *) Get_p_ie,
							I_spf_fac_a_net_id,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) return (NOK);
	} else {

		if (check_convert (	I_spf_fac_a_net_id,
							(uchar FAR *) Get_p_ie,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) return (NOK);

	}

	Inc_p_ie (I_spf_fac_net_id_lgth-1);

	return (OK);

}

uchar at4_end_fac ()
{

	if (direction == TO_D_CHANNEL) {

		if (I_(spf_fac, Param_fld) != BYTE_VAL_NIL) {

			*p_ie++ = FAC_VARI_A_BILL;

		}

	} else {

		if (Eo_ie) return (OK);

		I_(spf_fac, Param_fld) = *p_ie;
		if (*p_ie++ != FAC_VARI_A_BILL) return (NOK);

	}

	return (OK);
}

#endif /* } */

/*-------------------------------------------------------------------------*/

uchar at4_redir_nb_spdu ()
{

		/* if default values are used for octet 3a, it shall be omitted. */

	ie_if_flag = ON;		/* in general case, process octet 3a */

	if ((direction == TO_D_CHANNEL) &&
		(I_(redir_nb, pres) == PRES_ALLOWED) &&
		(I_(redir_nb, screen_ind)   == USER_PROVIDED)
	   ) {

		ie_if_flag = OFF;	/* default values used : omit octet 3a */
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

#define Ns_at4_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_at4_end_table_or_function		};
#define Ns_at4_tab_tabl_entry(idx, tab)		Ns_tab_tabl_entry (idx, tab),
#define Ns_at4_tabx_list_entry(tab)			Ns_tabx_list_entry (tab),
#define Ns_at4_tab_tabx_entry(idx, tab)		Ns_tab_tabx_entry (idx, tab),

#define Ns_at4_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, off)	\
			Ns_tab_ie_entry (codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, off),

#define Ns_at4_tab_ie_no_i_str(codes, ie, mx)	{codes, ie, A_NIL, 0, A_NIL, A_NIL, A_NIL, mx, 0},
#define Ns_at4_tab_ie_msg_header			{CODESET_NIL, MESSAGE_HEADER, (uchar *)A_NIL, sizeof(struct i_message_header), (uchar *)Pic_address (&i_message_header), (uchar *)A_NIL, (uchar *)A_NIL, 1, 0},

#include "at4.tab_ie"		/* include other Tables describing the IEs */

#define AT4_MX_TABL (sizeof(AT4_TAB_TABL)/sizeof (struct tabl))
CONST	uchar	at4_size_tab_tabl = AT4_MX_TABL;

#define AT4_MX_TABX (sizeof(AT4_TAB_TABX)/sizeof (struct tabx))
CONST	uchar	at4_size_tab_tabx = AT4_MX_TABX;

CONST	uchar	at4_size_tab_ie = Rnd_sizeof (AT4_TAB_IE) / IE_ELEM_SIZE;	/* maximum number of item in the table */

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

#undef Ns_at4_table_or_function
#undef Ns_at4_end_table_or_function
#undef Ns_at4_tab_tabl_entry
#undef Ns_at4_tabx_list_entry
#undef Ns_at4_tab_tabx_entry
#undef Ns_at4_tab_ie_entry
#undef Ns_at4_tab_ie_no_i_str
#undef Ns_at4_tab_ie_msg_header

#define Ns_at4_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_at4_end_table_or_function		}

#define Ns_at4_tab_tabl_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_val, (uchar *)tab);
#define Ns_at4_tabx_list_entry(tab)			Pic_init_struct_array_next (p_table,  p_val, (uchar	*)tab);
#define Ns_at4_tab_tabx_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_tab, (struct tabx_list *)tab);

#define Ns_at4_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, off)	\
	Pic_init_struct_array (p_table,  i_pic, p_prog, (uchar	*)mp_a);			\
	Pic_init_struct_array (p_table,  i_pic, p_i_struct, (uchar	*)i_str);		\
	Pic_init_struct_array (p_table,  i_pic, p_init_spdu, (uchar	*)df_spdu);		\
	Pic_init_struct_array_next (p_table,  p_init_ssdu, (uchar	*)df_ssdu);

#define Ns_at4_tab_ie_no_i_str(codes, ie, mx)	Ns_at4_tab_ie_entry (0, 0, P_NIL, P_NIL, P_NIL, P_NIL, 0, 0)

#define Ns_at4_tab_ie_msg_header		Ns_at4_tab_ie_entry (0, 0, P_NIL, &i_message_header, P_NIL, P_NIL, 0, 0)

		/*	Function used to initialize address fields in Tables above */

void pic_init_ns_at4_ie ()
{
	uchar	i_pic;			/* current index */

#	include "at4.tab_ie"
}

#endif /* end of PIC used} */


/*EOF*/
