
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_switch.at4
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      at4_csc_dl_reinit 			- implement an unexpected data link reinit.
 *
 *		at4_circuit_switched_call	- implements the processing of the call
 *								  		control procedures.
 *
 *
 *		at4_circuit_switched_call_n - implements the processing of the call
 *										control procedures.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	void	at4_u0						(void);
	void	at4_u1						(void);
	void	at4_u3						(void);
	void	at4_u4						(void);
	void	at4_u7						(void);
	void	at4_u8						(void);
	void	at4_u9						(void);
	void	at4_u10						(void);
	void	at4_u11						(void);
	void	at4_u12						(void);
	void	at4_u19						(void);
	void	at4_csc_dl_reinit			(void);
	void	at4_send_init 				(void);
	uchar	at4_circuit_switched_call	(void);
	uchar	at4_error_handler			(void);
	uchar	at4_ns_ei					(code_t p1, ces_t p2);
	uchar	at4_match_usid_tid 			(uchar usid, uchar tid, uchar interp);
	uchar	at4_bkp_maint_proc			(code_t p1, nai_t p2);
	uchar 	at4_b_chan_mgt 				(code_t code, nai_t ent_from);
	uchar 	at4_d_chan_mgt 				(code_t code, nai_t ent_from);
	uchar 	at4_d_bkp_filter			(code_t code);
	uchar 	at4_filter					(code_t p1, nai_t p2);
	void	at4_restart_n_pri 			(void);
	uchar	at4_restart_mgt 			(code_t code, nai_t int_id);
#else
	void	at4_u0						();
	void	at4_u1						();
	void	at4_u3						();
	void	at4_u4						();
	void	at4_u7						();
	void	at4_u8						();
	void	at4_u9						();
	void	at4_u10						();
	void	at4_u11						();
	void	at4_u12						();
	void	at4_u19						();
	void	at4_csc_dl_reinit			();
	void	at4_send_init 				();
	uchar	at4_circuit_switched_call	();
	uchar	at4_error_handler			();
	uchar	at4_ns_ei					();
	uchar	at4_match_usid_tid 			();
	uchar	at4_bkp_maint_proc			();
	uchar 	at4_b_chan_mgt 				();
	uchar 	at4_d_chan_mgt 				();
	uchar 	at4_d_bkp_filter			();
	uchar 	at4_filter					();
	void	at4_restart_n_pri 			();
	uchar	at4_restart_mgt 			();
#endif


			/* Local macro definitons */

#define	Rcv_dl_code			R_msg_inf0

						/*--------------*/
						/*				*/
						/*	USER SIDE	*/
						/*				*/
						/*--------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	at4_csc_dl_reinit () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void at4_csc_dl_reinit ();

Related
functions usage		void at4_csc_dl_reinit ();

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void at4_csc_dl_reinit ()
{
	/* nothing to do */
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			at4_circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage		  	uchar at4_circuit_switched_call ();

Related
functions usage void at4_u0 .... at4_u19 ()

Description	 at4_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value	uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*                                CLEARING PROCEDURES
*
*		TE                         NT/NETWORK                        TE
* _________________             _________________            _________________
* |               |             |               |            |               |
* |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
* |==========>....|------------>|.......|.....  |            |               |
* | start T305    |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
* |<===========...|<------------|...    |    ...|----------->|...===========>|
* |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
* |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
* |             ..|------------>|       |    ...|<-----------|...  start T308|
* |               |             |       |    .  |            |               |
* |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
* |               |             |       |    ...|----------->|...===========>|
* |               |             |       |       |            |     stop T308 |
* |---------------|             |---------------|            |---------------|
*/


uchar at4_circuit_switched_call ()
{

#	if (NS_RESTART_PROCEDURE == ON) || (NS_MAINTENANCE_CAPABILITY == ON)
		uchar	FAR *p_data;
		nai_t		int_id;
#	endif

	uchar chan_id;

/*.........................................................................*/

	if (i_entity_origination == ENT_MNS) {

		switch (event_id) {

#			if NS_RESTART_PROCEDURE == ON /* { */

				case MNS_RESTART_RQ :

						/* authorized only on Primary rate interface */

					if (Na_type == BRI) {

							/* Return MNS_RESTART_CO with error ("restart procedures not implemented") and do nothing else */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_NOT_IMPLEMENTED);
						return (STOP);
					}

					p_data = p_ssdu;

#					if NS_MAINTENANCE_CAPABILITY == OFF

						if (Dl_rest_state == STATE_REST_0) {


							if (Dl_call_count == 0) {

									/* Return MNS_RESTART_CO and do nothing else */

								ns_send_mns_restart (OK, I_restart_ind_class, Mns_restart_b_chan_nb, 0);
								return (OK);

							} else {

								ns_unexpected_ev ();
							}

						}

#					else

						if (ns_nfas == ON) {

							p_nsdl = Nfas_dl_p_active_d_chan;
						}

	 					Dl_rest_class = I_restart_ind_class;
                        
#					endif

						/* set current data pointer using p_ssdu pointer */


					int_id = Nai;

					if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

						I_chan_id_d_chan 	= NOT_D_CHAN;	/* B-Channel indicated */
						I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */
						I_chan_id_int_type 	= INT_TYPE_PRI;
						I_chan_id_chan_sel 	= AS_INDICATED;	/* Channel Number as indicated in following octets */
						I_chan_id_nb_map 	= CHAN_NUMBER;	/* Format of following octets = simply the B-Channel number */
						I_chan_id_coding_std= CODING_STD_CCITT;
						I_chan_id_chan_type = B_CHAN;
						I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

#						if NS_MAINTENANCE_CAPABILITY == ON

							Dl_rest_int_id		= Nai;

							if (Nfas_nai_active_d_chan != Mns_restart_interface) {
								I_chan_id_int_id 	= INT_ID_EXPLICIT;
								I_chan_id_int_id_val= Mns_restart_interface;
								Dl_rest_int_id		= Mns_restart_interface;
								int_id				= Mns_restart_interface;
							}

#							endif

						I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
						*I_chan_id_a_chan_number = Mns_restart_b_chan_nb;	/* channel number */
					}

					if (I_restart_ind_class == RI_ALL_INTERFACES) {
						csc_clear_all_call ();
						Na_internal_restart = ON;
					}

					Send_to_call_control (NS_RESTART_IN);	/* on CONN_ID_MANAGEMENT */
					Set_call_ref_not_nil ();

					if (I_chan_id_a_chan_number != A_NIL) {

						/* Set the extension bit to 1 in the chan_nb field before sending SPDU */

						Set_ext_bit (*I_chan_id_a_chan_number);
					}

#					if NS_MAINTENANCE_CAPABILITY == ON

						at4_restart_mgt (MNS_RESTART_RQ, int_id);

#					else

						Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
						N316 = 0;
						Start_dl_timer (AT4_T316);
						Dl_rest_state = STATE_REST_1;

#					endif

					break;

#			endif /* } */

#			if NS_MAINTENANCE_CAPABILITY == ON /* { */

				case MNS_SERVICE_RQ :

						/* Set p_data pointers to start of data */

					p_data = p_ssdu;

					I_(change_status, preference) 	= Mns_service_pref;
					I_(change_status, status) 		= Mns_service_status;

					switch (Mns_service_pref) {

						case I_PREF_D_CHANNEL :

							if (Mns_service_action_type == I_MAINTENANCE) {

									/* No D channel maintenance */

								ns_send_mns_service (I_D_MANAGEMENT_NOT_SUPPORTED, Mns_service_int_id, BYTE_VAL_NIL);
								return (OK);
							}

							I_(change_status, preference) = PREF_INTERFACE;

							I_chan_id_int_id	= INT_ID_EXPLICIT;	/* B-Channel indicated */
							I_chan_id_int_id_val= Mns_service_int_id;	/* B-Channel indicated */
							I_chan_id_d_chan 	= NOT_D_CHAN;			/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;			/* Exclusive */
							I_chan_id_int_type 	= INT_TYPE_PRI;         /* PRI */
							I_chan_id_chan_sel 	= NO_CHAN;				/* Channel Number as indicated in following octets */
							I_chan_id_coding_std= CODING_STD_CCITT;
							I_chan_id_nb_map 	= CHAN_NUMBER;

							break;

						case I_PREF_B_CHANNEL :
							I_(change_status, preference) = PREF_B_CHANNEL;

							I_chan_id_int_id	= INT_ID_EXPLICIT;	/* B-Channel indicated */
							I_chan_id_int_id_val= Mns_service_int_id;	/* B-Channel indicated */
							I_chan_id_d_chan 	= NOT_D_CHAN;			/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;			/* Exclusive */
							I_chan_id_int_type 	= INT_TYPE_PRI;         /* PRI */
							I_chan_id_chan_sel 	= AS_INDICATED;			/* Channel Number as indicated in following octets */
							I_chan_id_chan_type	= B_CHAN;				/* Format of following octets = simply the B-Channel number */
							I_chan_id_nb_map 	= CHAN_NUMBER;			/* Format of following octets = simply the B-Channel number */
							I_chan_id_chan_number_lgth = 1;				/* 1 Channel number */

							I_chan_id_a_chan_number = p_ind_buffer++;	/* save data into indirect buffer */
							Set_ext_bit (Mns_service_b_chan);
							*I_chan_id_a_chan_number = Mns_service_b_chan;	/* channel number */

							break;

						case I_PREF_INTERFACE :
							I_(change_status, preference) = PREF_INTERFACE;

							I_chan_id_int_id	= INT_ID_EXPLICIT;	/* B-Channel indicated */
							I_chan_id_int_id_val= Mns_service_int_id;	/* B-Channel indicated */
							I_chan_id_d_chan 	= NOT_D_CHAN;			/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;			/* Exclusive */
							I_chan_id_int_type 	= INT_TYPE_PRI;         /* PRI */
							I_chan_id_chan_sel 	= NO_CHAN;				/* Channel Number as indicated in following octets */
							break;
					}

						/* Set the 2 IEs */

					set_ie_i (CODESET_0, CHAN_ID);
					set_ie_i (CODESET_0, CHANGE_STATUS);

					at4_bkp_maint_proc (R_msg_code, i_entity_origination);

					break;

#				endif /*  } */

#				if ASSERT == ON

				default :
					Trap (TRAP_MNS_CODE, "at4_circuit_switched_call");

#				endif

		}

		return (OK);

	}

					/* 1 - EVENT DRIVEN PROCESSING  */

	switch (event_id) {

						/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

						/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) != OK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NO_CIRCUIT_AVAILABLE_34, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}

#			if NS_MAINTENANCE_CAPABILITY == ON

				if (Na_type == PRI) {

						/* B channel must be IS or OSS NE */

					chan_id = (*I_chan_id_a_chan_number) & 0x7f;

						/*
						 * Get the interface Id
						 */

					int_id = Nai;

					if (is_ie_i (CODESET_0, CHAN_ID) == PRESENT) {

						if (I_(chan_id, int_id) == INT_ID_EXPLICIT) {
							int_id = I_(chan_id, int_id_val);
						}

					}

					if ((Dl_b_chan_mode_int (int_id, chan_id) != MAINT_STATE_B_IS) &&
						(Dl_b_chan_mode_int (int_id, chan_id) != MAINT_STATE_B_OOS_NE)) {

						Reset_internal_ie ();
						set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NO_CIRCUIT_AVAILABLE_34, P_NIL);
						Send_to_d_channel (REL_COMP);
						call_clear ();
						return (OK);
					}

				}

#			endif

			break;

						/* DISCONNECT */

		case DA_DISC :

			switch (Call_state) {

				case STATE_DISCONNECT_REQUEST_11 :
					Stop_timer_ns (AT4_T305);
					Send_to_call_control (NS_CLEAR_IN);
					Reset_internal_ie ();

					if (disc_cause_error () == NOK) {
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					}

					go_to_state_19 (AT4_T308);
					break;

				case STATE_DISCONNECT_INDICATION_12 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);
					Set_state (STATE_DISCONNECT_INDICATION_12);
					break;

			}

			return (OK);

						/* RELEASE */

		case DA_REL :

			if (i_entity_origination != ENT_DL_D) break;

			Send_to_call_control (NS_CLEAR_CO);
			Reset_internal_ie ();
			set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
			Send_to_d_channel (REL_COMP);
			call_clear ();
			return (OK);

						/* RELEASE COMPLETE */

		case DA_REL_COMP :
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();							/* free call context */
			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			if (	(is_ie_i (CODESET_0, CAUSE) == PRESENT) 		&&
					(I_cause_class == C_C_RESOURCE_UNAVAILABLE)     &&
					(I_cause_val   == C_V_REQUESTED_CIRCUIT_NOT_AVAILABLE_44)
			   ) {

				Send_to_call_control (NS_CLEAR_CO);
				Send_to_d_channel (REL_COMP);

				call_clear ();
				return (OK);
			}

			switch (Call_state) {

				case STATE_WAIT_DL :
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_NULL_0 :

					if (! ((is_ie_i (CODESET_0, CAUSE) == PRESENT) &&
						   (I_cause_class == C_C_NORMAL_EVENT)     &&
						   (I_cause_val   == C_V_NO_ANSWER_19))
					   ) {

						Send_to_d_channel (REL_COMP);
					}

					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					disc_cause_error ();
					Stop_timer_ns  (AT4_T300);
					go_to_state_19 (AT4_T308);
					break;

				case STATE_CALL_INIT_1 :
					Release_saved_spdu ();						/* saved setup no more useful */

					/* process the default */

				default :
					ns_stop_all_timers ();
					Save_cause ();								/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);					/* send a DISCONNECT message */
					Start_timer_ns (AT4_T305);					/* start T305 */
					Set_state (STATE_DISCONNECT_REQUEST_11);	/* enter the Disconnect Request state */
					break;

			}

			return (OK);

						/* STATUS */

		case DA_STATUS :

			if (Call_current_exist) {

					/* Clearing state ? */

				if (Call_state > STATE_ACTIVE_10) {

						/* Yes, ignore the STATUS */

					return (OK);

				}

					/* No, Matching state ? */

				switch (Call_state) {

					case STATE_CALL_INIT_1:

							/* No macthable state */

						break;

					case STATE_OUTGOING_CALL_PROC_3 :

						if ((I_call_state_val == STATE_OUTGOING_CALL_PROC_3) ||
							(I_call_state_val == STATE_INCOMING_CALL_PROC_9)) {

								/* OK, state maches, ignore the STATUS */

							return (OK);
						}

						break;

					case STATE_CALL_DELIVERED_4 :

						if (I_call_state_val == Call_state) {

								/* OK, state maches, ignore the STATUS */

							return (OK);

						}

						break;

					case STATE_CALL_RECEIVED_7 :

						if ((I_call_state_val == STATE_CALL_PRESENT_6) ||
							(I_call_state_val == STATE_CALL_RECEIVED_7) ||
							(I_call_state_val == STATE_INCOMING_CALL_PROC_9)) {

								/* OK, state maches, ignore the STATUS */

							return (OK);
						}

						break;

					case STATE_CONNECT_REQUEST_8 :

						if ((I_call_state_val == STATE_CALL_PRESENT_6) ||
							(I_call_state_val == STATE_CALL_RECEIVED_7) ||
							(I_call_state_val == STATE_CONNECT_REQUEST_8) ||
							(I_call_state_val == STATE_INCOMING_CALL_PROC_9)) {

								/* OK, state maches, ignore the STATUS */

							return (OK);
						}
						break;

					case STATE_INCOMING_CALL_PROC_9 :

						if ((I_call_state_val == STATE_CALL_PRESENT_6) ||
							(I_call_state_val == STATE_INCOMING_CALL_PROC_9)) {

								/* OK, state maches, ignore the STATUS */

							return (OK);
						}
						break;

					case STATE_ACTIVE_10 :

						if (I_call_state_val == Call_state) {

								/* OK, state maches, ignore the STATUS */

							return (OK);

						}
						break;


				}

					/* States do not match --> clear the call */

				ns_stop_all_timers ();
				Reset_internal_ie ();
				set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
				Save_cause ();								/* to send the RELEASE if T305 expire */
				Send_to_d_channel (DISC);					/* send a DISCONNECT message */
				Start_timer_ns (AT4_T305);					/* start T305 */
				Set_state (STATE_DISCONNECT_REQUEST_11);	/* enter the Disconnect Request state */
				Send_to_call_control (NS_CLEAR_IN);
			}

			return (OK);

						/* STATUS_ENQ */

		case DA_STATUS_ENQ :
			Reset_internal_ie ();
			set_i_state (Call_state);
			set_i_cause	(C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30, P_NIL);
			Send_to_d_channel (STATUS);
			return (OK);


						/* FACILTY */

		case DA_FAC :

				/* Facility not supported --> Ignore */

			return (OK);

#		if NS_RESTART_PROCEDURE == ON /* { */

			case TI_316 :

				if (Dl_rest_state == STATE_REST_1) {

					if (++N316 != AT4_MX_N316) {

						Set_call_ref_not_nil ();

							/* store Restart Indicator with value saved in DL context */

						set_ie_i (CODESET_0, RESTART_IND);
						I_restart_ind_class = Dl_rest_class;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

							direction = TO_D_CHANNEL;

								/* store Channel-ID */

							ie_implicit_val_x (CODESET_0, CHAN_ID, 0);
							set_ie_i (CODESET_0, CHAN_ID);

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							I_chan_id_int_type = INT_TYPE_PRI;
							I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
							I_chan_id_nb_map = CHAN_NUMBER;		/* Format of following octets = simply the B-Channel number */
							I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

							I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
							*I_chan_id_a_chan_number = Dl_rest_chan_nb;	/* channel number */
							Set_ext_bit (*I_chan_id_a_chan_number);		/* Set the extension bit to 1 in the chan_nb field before sending SPDU */
						}

						Send_to_d_channel (RESTART);			/* with CALL_REF_GLOBAL */
						Restart_dl_timer (AT4_T316);

					} else {

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_316);
						Dl_restart_reset ();

					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART :

#				if (NS_TYPE_PRI == ON) && (NS_MAINTENANCE_CAPABILITY == ON)

					return (at4_restart_mgt (DA_RESTART, 0));

#				else

					if (Dl_rest_state == STATE_REST_0) {

						Set_call_ref_nil ();		/* to use CONN_ID_MANAGEMENT */
						Send_to_call_control (NS_RESTART_IN);
						Dl_rest_state = STATE_REST_2;

					} else {

						ns_unexpected_ev ();
					}

					return (OK);

#				endif

			case DA_RESTART_ACK :

#				if (NS_TYPE_PRI == ON) && (NS_MAINTENANCE_CAPABILITY == ON)

					return (at4_restart_mgt (DA_RESTART_ACK, 0));

#				else

					if (Dl_rest_state == STATE_REST_1) {

						Stop_dl_timer (AT4_T316);

						if (Dl_rest_resp == ON) {

							ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
							Dl_restart_reset ();


						} else {

							Dl_rest_ack = ON;
						}

					} else {

						ns_unexpected_ev ();
					}

					return (OK);

#				endif

			case NS_RESTART_RS :

#				if (NS_TYPE_PRI == ON) && (NS_MAINTENANCE_CAPABILITY == ON)

					return (at4_restart_mgt (NS_RESTART_RS, 0));

#				else

					switch (Dl_rest_state) {

						case STATE_REST_1 :

							if (Dl_rest_ack == ON) {

								ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
								Dl_restart_reset ();

							} else {

								Dl_rest_resp = ON;
							}

							break;

						case STATE_REST_2 :

							Set_call_ref_not_nil ();
							Send_to_d_channel (RESTART_ACK);
							Dl_restart_reset ();
							break;

						default :

							ns_unexpected_ev ();
					}

					return (OK);

#				endif

			case NS_RESTART_RQ :

#				if NS_D_BACKUP == ON

					if ((ns_nfas == ON) && (Nfas_nai_d_chan_backup_act == ON)) {

						p_nsdl = Nfas_dl_p_active_d_chan;
					}

#				endif

				if (Dl_rest_state != STATE_REST_0) {

					call_clear ();

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

#		endif /* NS_RESTART_PROCEDURE == ON} */

#		if NS_MAINTENANCE_CAPABILITY == ON

			case TI_321 :
			case TI_3M1 :
			case DA_MAINT_SERVICE :
			case DA_MAINT_SERVICE_ACK :

				if ((i_entity_origination == ENT_TI) && (event_id == TI_303)) {

						/* TI_303 and DA_MAINT_SERVICE_ACK have the same code */

					break;
				}

				at4_bkp_maint_proc (R_msg_code, i_entity_origination);
				return (OK);
#		endif

	} /* End switch (event_id) */

/*.........................................................................*/

					/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

				Dispatch to the function that processes the state except if
				it is a clearing event not received  in an exceptional condition.
				In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "at4_circuit_switched_call");
	}

#	if NS_MAINTENANCE_CAPABILITY == ON

			/*
             * Make sure the DL context is the active one when
             * enterring automaton.
             */
             
		if ((ns_nfas == ON) && (Nfas_context_exist)) {
		    p_nsdl = Nfas_dl_p_active_d_chan;
        }

#	endif

	switch (Call_state) {

			/* Null state (u0) */

		case STATE_NULL_0 :
		case STATE_WAIT_DL :
			at4_u0 ();
			break;

			/* Call initiated (u1) */

		case STATE_CALL_INIT_1 :
			at4_u1 ();
			break;


			/* Outgoing call proceeding (u3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			at4_u3 ();
			break;

			/* Call delivered (u4) */

		case STATE_CALL_DELIVERED_4 :
			at4_u4 ();
			break;


			/* Call received (u7) */

		case STATE_CALL_RECEIVED_7 :
			at4_u7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			at4_u8 ();
			break;

			/* Incoming call proceeding state (u9) */

		case STATE_INCOMING_CALL_PROC_9 :
			at4_u9 ();
			break;

			/*  Active (u10) */

		case STATE_ACTIVE_10 :
			at4_u10 ();
			break;

			/* Disconnect request (u11) */

		case STATE_DISCONNECT_REQUEST_11 :
			at4_u11 ();
			break;

			/* Disconnect indication (u12) */

		case STATE_DISCONNECT_INDICATION_12 :
			at4_u12 ();
			break;

			/* Release request (u19) */

		case STATE_RELEASE_REQUEST_19 :
			at4_u19 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "at4_circuit_switched_call");

	}

	return (OK);
}

#if EQUIPMENT == NT2


						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*                   */
						/*-------------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            at4_circuit_switched_call_n - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar at4_circuit_switched_call_n ();

Related
functions usage void n0 .... n19 ();

Description     at4_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

#if NEW_FCT_STYLE == ON
	void	at4_n0						(void);
	void	at4_n3						(void);
	void	at4_n4						(void);
	void	at4_n6						(void);
	void	at4_n7						(void);
	void	at4_n8						(void);
	void	at4_n9						(void);
	void	at4_n10						(void);
	void	at4_n11						(void);
	void	at4_n12						(void);
	void	at4_n19						(void);
	void	at4_csc_dl_reinit_n			(void);
	uchar	at4_at4_circuit_switched_call_n	(void);
#else
	void	at4_n0						();
	void	at4_n3						();
	void	at4_n4						();
	void	at4_n6						();
	void	at4_n7						();
	void	at4_n8						();
	void	at4_n9						();
	void	at4_n10						();
	void	at4_n11						();
	void	at4_n12						();
	void	at4_n19						();
	void	at4_csc_dl_reinit_n			();
	uchar	at4_at4_circuit_switched_call_n	();
#endif

/*                                CLEARING PROCEDURES
*
*       TE                         NT/NETWORK                        TE
* _________________             _________________            _________________
* |               |             |               |            |               |
* |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
* |==========>....|------------>|.......|.....  |            |               |
* | start T305    |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
* |<===========...|<------------|...    |    ...|----------->|...===========>|
* |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
* |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
* |             ..|------------>|       |    ...|<-----------|...  start T308|
* |               |             |       |    .  |            |               |
* |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
* |               |             |       |    ...|----------->|...===========>|
* |               |             |       |       |            |     stop T308 |
* |---------------|             |---------------|            |---------------|
*
*/

uchar at4_circuit_switched_call_n ()
{

#	if (NS_RESTART_PROCEDURE == ON) || (NS_MAINTENANCE_CAPABILITY == ON)
		uchar	FAR *p_data;
		uchar		chan_id;
		nai_t		int_id;
#	endif


/*.........................................................................*/

	if (i_entity_origination == ENT_MNS) {

		switch (event_id) {

#			if NS_RESTART_PROCEDURE == ON /* { */

				case MNS_RESTART_RQ :

						/* authorized only on Primary rate interface */

					if (Na_type == BRI) {

							/* Return MNS_RESTART_CO with error ("restart procedures not implemented") and do nothing else */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_NOT_IMPLEMENTED);
						return (STOP);
					}

					p_data = p_ssdu;

#					if NS_MAINTENANCE_CAPABILITY == OFF

						if (Dl_rest_state == STATE_REST_0) {


							if (Dl_call_count == 0) {

									/* Return MNS_RESTART_CO and do nothing else */

								ns_send_mns_restart (OK, I_restart_ind_class, Mns_restart_b_chan_nb, 0);
								return (OK);

							} else {

								ns_unexpected_ev ();
							}

						}

#					else

						if (ns_nfas == ON) {

							p_nsdl = Nfas_dl_p_active_d_chan;
						}

	 					Dl_rest_class = I_restart_ind_class;

#					endif

						/* set current data pointer using p_ssdu pointer */


					if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

						I_chan_id_d_chan 	= NOT_D_CHAN;	/* B-Channel indicated */
						I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */
						I_chan_id_int_type 	= INT_TYPE_PRI;
						I_chan_id_chan_sel 	= AS_INDICATED;	/* Channel Number as indicated in following octets */
						I_chan_id_nb_map 	= CHAN_NUMBER;	/* Format of following octets = simply the B-Channel number */
						I_chan_id_coding_std= CODING_STD_CCITT;
						I_chan_id_chan_type = B_CHAN;
						I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

#						if NS_MAINTENANCE_CAPABILITY == ON

							Dl_rest_int_id		= Nai;

							if (Nfas_nai_active_d_chan != Mns_restart_interface) {
								I_chan_id_int_id 	= INT_ID_EXPLICIT;
								I_chan_id_int_id_val= Mns_restart_interface;
								Dl_rest_int_id		= Mns_restart_interface;
							}

#							endif

						I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
						*I_chan_id_a_chan_number = Mns_restart_b_chan_nb;	/* channel number */
					}

					if (I_restart_ind_class == RI_ALL_INTERFACES) {
						csc_clear_all_call ();
						Na_internal_restart = ON;
					}

					Send_to_call_control (NS_RESTART_IN);	/* on CONN_ID_MANAGEMENT */
					Set_call_ref_not_nil ();

					if (I_chan_id_a_chan_number != A_NIL) {

						/* Set the extension bit to 1 in the chan_nb field before sending SPDU */

						Set_ext_bit (*I_chan_id_a_chan_number);
					}

#					if NS_MAINTENANCE_CAPABILITY == ON

						at4_restart_mgt (MNS_RESTART_RQ, int_id);

#					else

						Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
						N316 = 0;
						Start_dl_timer (AT4_T316);
						Dl_rest_state = STATE_REST_1;

#					endif

					break;

#			endif /* } */

#			if NS_MAINTENANCE_CAPABILITY == ON /* { */

				case MNS_SERVICE_RQ :

						/* Set p_data pointers to start of data */

					p_data = p_ssdu;

					I_(change_status, preference) 	= Mns_service_pref;
					I_(change_status, status) 		= Mns_service_status;

					switch (Mns_service_pref) {

						case I_PREF_D_CHANNEL :

							if (Mns_service_action_type == I_MAINTENANCE) {

									/* No D channel maintenance */

								ns_send_mns_service (I_D_MANAGEMENT_NOT_SUPPORTED, Mns_service_int_id, BYTE_VAL_NIL);
								return (OK);
							}

							I_(change_status, preference) = PREF_INTERFACE;

							I_chan_id_int_id	= INT_ID_EXPLICIT;	/* B-Channel indicated */
							I_chan_id_int_id_val= Mns_service_int_id;	/* B-Channel indicated */
							I_chan_id_d_chan 	= NOT_D_CHAN;			/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;			/* Exclusive */
							I_chan_id_int_type 	= INT_TYPE_PRI;         /* PRI */
							I_chan_id_chan_sel 	= NO_CHAN;				/* Channel Number as indicated in following octets */

							break;

						case I_PREF_B_CHANNEL :
							I_(change_status, preference) = PREF_B_CHANNEL;

							I_chan_id_int_id	= INT_ID_EXPLICIT;	/* B-Channel indicated */
							I_chan_id_int_id_val= Mns_service_int_id;	/* B-Channel indicated */
							I_chan_id_d_chan 	= NOT_D_CHAN;			/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;			/* Exclusive */
							I_chan_id_int_type 	= INT_TYPE_PRI;         /* PRI */
							I_chan_id_chan_sel 	= AS_INDICATED;			/* Channel Number as indicated in following octets */
							I_chan_id_chan_type	= B_CHAN;				/* Format of following octets = simply the B-Channel number */
							I_chan_id_nb_map 	= CHAN_NUMBER;			/* Format of following octets = simply the B-Channel number */
							I_chan_id_chan_number_lgth = 1;				/* 1 Channel number */

							I_chan_id_a_chan_number = p_ind_buffer++;	/* save data into indirect buffer */
							Set_ext_bit (Mns_service_b_chan);
							*I_chan_id_a_chan_number = Mns_service_b_chan;	/* channel number */

							break;

						case I_PREF_INTERFACE :
							I_(change_status, preference) = PREF_INTERFACE;

							I_chan_id_int_id	= INT_ID_EXPLICIT;	/* B-Channel indicated */
							I_chan_id_int_id_val= Mns_service_int_id;	/* B-Channel indicated */
							I_chan_id_d_chan 	= NOT_D_CHAN;			/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;			/* Exclusive */
							I_chan_id_int_type 	= INT_TYPE_PRI;         /* PRI */
							I_chan_id_chan_sel 	= NO_CHAN;				/* Channel Number as indicated in following octets */
							break;
					}

						/* Set the 2 IEs */

					set_ie_i (CODESET_0, CHAN_ID);
					set_ie_i (CODESET_0, CHANGE_STATUS);

					at4_bkp_maint_proc (R_msg_code, i_entity_origination);

					break;

#			endif /* } */

#			if ASSERT == ON

				default :
					Trap (TRAP_MNS_CODE, "circuit_switched_call_n");

#			endif

		}

		return (OK);
	}

					/* 1 - EVENT DRIVEN PROCESS */

	switch (event_id) {

							/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

							/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) == NOK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_CONGESTION_42, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}

#			if NS_MAINTENANCE_CAPABILITY == ON /* { */

				if (Na_type == PRI) {

						/* B channel must be IS or OOS NE */

					chan_id = (*I_chan_id_a_chan_number) & 0x7f;

						/*
						 * Get the interface Id
						 */

					int_id = Nai;

					if (is_ie_i (CODESET_0, CHAN_ID) == PRESENT) {

						if (I_(chan_id, int_id) == INT_ID_EXPLICIT) {
							int_id = I_(chan_id, int_id_val);
						}

						if ((Dl_b_chan_mode_int (int_id, chan_id) != MAINT_STATE_B_IS) &&
							(Dl_b_chan_mode_int (int_id, chan_id) != MAINT_STATE_B_OOS_NE)) {
							Reset_internal_ie ();
							set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NO_CIRCUIT_AVAILABLE_34, P_NIL);
							Send_to_d_channel (REL_COMP);
							call_clear ();
							return (OK);
						}
					}

				}

#			endif /* } */

			break;

							/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq		= OFF;

			switch (Call_state) {

				case STATE_CALL_RECEIVED_7 :

					ns_action_to_cc (T3_NIL, AT4_T300, NS_CLEAR_IN,
														 STATE_DISCONNECT_REQUEST_11);

					break;


				case STATE_CONNECT_REQUEST_8 :

					ns_action_to_cc (T3_NIL, AT4_T300, NS_CLEAR_IN,
													   STATE_DISCONNECT_REQUEST_11);
					break;

				case STATE_INCOMING_CALL_PROC_9 :

					ns_action_to_cc (AT4_T310, AT4_T300, NS_CLEAR_IN,
														 STATE_DISCONNECT_REQUEST_11);
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					Stop_timer_ns (AT4_T305);
					Reset_internal_ie ();
					go_to_state_19 (AT4_T308);
					break;


				case STATE_RELEASE_REQUEST_19 :
						/* no process */
					break;


				case STATE_NULL_0 :
					break;

				default :
					ns_stop_all_timers ();
					ns_action_to_cc (T3_NIL, AT4_T300, NS_CLEAR_IN,
													   STATE_DISCONNECT_REQUEST_11);
					break;

			}

			return (OK);

							/* - RELEASE */

		case DA_REL :
			Call_fac_rq 	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);


						/* - RELEASE COMPLETE */

		case DA_REL_COMP :

			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :

					/* no process */

					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_PRESENT_6 :

					Stop_timer_ns (AT4_T303);

					ns_action_to_dl (T3_NIL, AT4_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					ns_action_to_dl (T3_NIL, AT4_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);

					break;

				case STATE_INCOMING_CALL_PROC_9 :
					Stop_timer_ns (AT4_T310);
					ns_action_to_dl (T3_NIL, AT4_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
					break;

				default :
					ns_stop_all_timers ();
					Save_cause ();									/* to send the RELEASE if AT4_T305 expire */
					ns_action_to_dl (T3_NIL, AT4_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
					break;

			}

			return (OK);

						/* STATUS */

		case DA_STATUS :
			return (OK);


		case DA_STATUS_ENQ :
			Reset_internal_ie ();
			set_i_state (Call_state);
			set_i_cause	(C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30, P_NIL);
			Send_to_d_channel (STATUS);
			return (OK);

						/* NS_STATUS_ENQ_RQ */

		case NS_STATUS_ENQ_RQ :

			Send_to_d_channel (STATUS_ENQ);
			return (OK);


#		if NS_RESTART_PROCEDURE == ON /* { */

			case TI_316 :

				if (Dl_rest_state == STATE_REST_1) {

					if (++N316 != AT4_MX_N316) {

						Set_call_ref_not_nil ();

							/* store Restart Indicator with value saved in DL context */

						set_ie_i (CODESET_0, RESTART_IND);
						I_restart_ind_class = Dl_rest_class;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

							direction = TO_D_CHANNEL;

								/* store Channel-ID */

							ie_implicit_val_x (CODESET_0, CHAN_ID, 0);
							set_ie_i (CODESET_0, CHAN_ID);

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							I_chan_id_int_type = INT_TYPE_PRI;
							I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
							I_chan_id_nb_map = CHAN_NUMBER;		/* Format of following octets = simply the B-Channel number */
							I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

							I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
							*I_chan_id_a_chan_number = Dl_rest_chan_nb;	/* channel number */
							Set_ext_bit (*I_chan_id_a_chan_number);		/* Set the extension bit to 1 in the chan_nb field before sending SPDU */
						}

						Send_to_d_channel (RESTART);			/* with CALL_REF_GLOBAL */
						Restart_dl_timer (AT4_T316);

					} else {

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_316);
						Dl_restart_reset ();

					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART :

#				if (NS_TYPE_PRI == ON) && (NS_MAINTENANCE_CAPABILITY == ON)

					return (at4_restart_mgt (DA_RESTART, 0));

#				else

					if (Dl_rest_state == STATE_REST_0) {

						Set_call_ref_nil ();		/* to use CONN_ID_MANAGEMENT */
						Send_to_call_control (NS_RESTART_IN);
						Dl_rest_state = STATE_REST_2;

					} else {

						ns_unexpected_ev ();
					}

					return (OK);

#				endif

			case DA_RESTART_ACK :

#				if (NS_TYPE_PRI == ON) && (NS_MAINTENANCE_CAPABILITY == ON)

					return (at4_restart_mgt (DA_RESTART_ACK, 0));

#				else

					if (Dl_rest_state == STATE_REST_1) {

						Stop_dl_timer (AT4_T316);

						if (Dl_rest_resp == ON) {

							ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
							Dl_restart_reset ();


						} else {

							Dl_rest_ack = ON;
						}

					} else {

						ns_unexpected_ev ();
					}

					return (OK);

#				endif

			case NS_RESTART_RS :

#				if (NS_TYPE_PRI == ON) && (NS_MAINTENANCE_CAPABILITY == ON)

					return (at4_restart_mgt (NS_RESTART_RS, 0));

#				else

					switch (Dl_rest_state) {

						case STATE_REST_1 :

							if (Dl_rest_ack == ON) {

								ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
								Dl_restart_reset ();

							} else {

								Dl_rest_resp = ON;
							}

							break;

						case STATE_REST_2 :

							Set_call_ref_not_nil ();
							Send_to_d_channel (RESTART_ACK);
							Dl_restart_reset ();
							break;

						default :

							ns_unexpected_ev ();
					}

					return (OK);

#				endif

			case NS_RESTART_RQ :

#				if NS_D_BACKUP == ON

					if ((ns_nfas == ON) && (Nfas_nai_d_chan_backup_act == ON)) {

						p_nsdl = Nfas_dl_p_active_d_chan;
					}

#				endif

				if (Dl_rest_state != STATE_REST_0) {

					call_clear ();

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

#		endif /* NS_RESTART_PROCEDURE == ON} */

#		if NS_MAINTENANCE_CAPABILITY == ON

			case TI_321 :
			case TI_3M1 :
			case DA_MAINT_SERVICE :
			case DA_MAINT_SERVICE_ACK :

				if ((i_entity_origination == ENT_TI) && (event_id == TI_303)) {

						/* TI_303 and DA_MAINT_SERVICE_ACK have the same code */

					break;
				}

				at4_bkp_maint_proc (R_msg_code, i_entity_origination);
				return (OK);
#		endif

	} /* End switch (event_id) */

/*.........................................................................*/

				/* 2 - STATE DRIVEN PROCESS */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "at4_circuit_switched_call_n");
	}

#	if NS_MAINTENANCE_CAPABILITY == ON

			/*
             * Make sure the DL context is the active one when
             * enterring automaton.
             */

		if ((ns_nfas == ON) && (Nfas_context_exist)) {
		    p_nsdl = Nfas_dl_p_active_d_chan;
        }

#	endif

	switch (Call_state) {

			/* Null state (n0) */

		case STATE_NULL_0 :
			at4_n0 ();
			break;

			/* Outgoing call proceeding (n3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			at4_n3 ();
			break;

			/* Call delivered (n4) */

		case STATE_CALL_DELIVERED_4 :
			at4_n4 ();
			break;

			/* Call present (n6) */

		case STATE_CALL_PRESENT_6 :
			at4_n6 ();
			break;

			/* Call received (n7) */

		case STATE_CALL_RECEIVED_7 :
			at4_n7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			at4_n8 ();
			break;

			/* Incoming call proceeding (n9) */

		case STATE_INCOMING_CALL_PROC_9 :
			at4_n9 ();
			break;

			/*  Active (n10) */

		case STATE_ACTIVE_10 :
			at4_n10 ();
			break;

			/* Disconnect request (n11) */

		case STATE_DISCONNECT_REQUEST_11 :
			at4_n11 ();
			break;

			/* Disconnect indication (n12) */

		case STATE_DISCONNECT_INDICATION_12 :
			at4_n12 ();
			break;

			/* Release request (n19) */

		case STATE_RELEASE_REQUEST_19 :
			at4_n19 ();
			break;


			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "at4_circuit_switched_call_n");

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	at4_csc_dl_reinit_n () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void at4_csc_dl_reinit_n ();


Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

void at4_csc_dl_reinit_n ()
{
	/* Nothing to do */
}

#endif

/*-------------------------------------------------------------------------*/

						/*----------------------*/
						/*                   	*/
						/*   D channel backup	*/
						/*	   Maintenance		*/
						/*						*/
						/*	  procedures		*/
						/*						*/
						/*----------------------*/

/*-------------------------------------------------------------------------*/

#if NEW_FCT_STYLE == ON
	void	at4_d_bkp_is_stby 		(code_t code);
	void	at4_d_bkp_mb_wait 		(code_t code);
	void	at4_d_bkp_wait_mb 		(code_t code);
	void	at4_d_bkp_is_oos 		(code_t code);
	void	at4_d_bkp_oos_wait		(code_t code);
	void	at4_d_bkp_oos_oos		(code_t code);

	void	at4_b_is 				(nai_t int_id, uchar b_chan, uchar action);
	void	at4_b_is_ack 			(nai_t int_id, uchar b_chan);
	void	at4_b_maint_ne_fe 		(nai_t int_id, uchar b_chan, uchar action);
	void	at4_b_maint_ne_ack 		(nai_t int_id, uchar b_chan);
	void	at4_b_os_ne_fe 			(nai_t int_id, uchar b_chan, uchar action);
	void	at4_b_oos_ne_ack		(nai_t int_id, uchar b_chan);
	void	at4_b_undef 			(nai_t int_id);

#else
	void	at4_d_bkp_is_stby 		();
	void	at4_d_bkp_mb_wait 		();
	void	at4_d_bkp_wait_mb 		();
	void	at4_d_bkp_is_oos 		();
	void	at4_d_bkp_oos_wait		();
	void	at4_d_bkp_oos_oos		();

	void	at4_b_is 				();
	void	at4_b_is_ack 			();
	void	at4_b_maint_ne_fe 		();
	void	at4_b_maint_ne_ack 		();
	void	at4_b_os_ne_fe 			();
	void	at4_b_oos_ne_ack		();
	void	at4_b_undef 			();

#	endif

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	at4_bkp_maint_proc () -

Usage           	uchar at4_bkp_maint_proc (code, nai);
					Note : nai is not used.


Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

uchar at4_bkp_maint_proc (code, ent_from)
	code_t	code;
	nai_t	ent_from;

{
	uchar b_chan_mgt = OFF;

	uchar FAR *p_data;

	switch (ent_from) {

		case ENT_DL :
		case ENT_DL_D :

			if ((code != DL_DA_IN) && (code != DL_U_DA_IN)) {

				if (ns_nfas == OFF) return (OK);

			}

			if (is_ie_i (CODESET_0, CHAN_ID) == PRESENT) {

				if (I_(chan_id, d_chan) == NOT_D_CHAN) {
					b_chan_mgt = ON;
				}
			}

			break;

		case ENT_MNS :

			p_data = p_ssdu;

				/* - MNS_SERVICE_RQ - */

			if (Mns_service_pref != I_PREF_D_CHANNEL) {

				b_chan_mgt = ON;

			}

			break;

		case ENT_TI :

			if (code == TI_3M1) {

				b_chan_mgt = ON;
			}

			break;

	}

	switch (b_chan_mgt) {

		case ON :
			return (at4_b_chan_mgt (code, ent_from));

#		if NS_D_BACKUP == ON

			case OFF :
				return (at4_d_chan_mgt (code, ent_from));
#		endif
	}

	return (OK);
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

uchar at4_b_chan_mgt (code, ent_from)
	code_t	code;
	nai_t	ent_from;
{
	uchar b_chan_state, b_chan, int_id, action_type;
	uchar FAR *p_data;

		/*
		 * This routine manages the B channel states.
		 * The D channels states are not managable when
		 * using the CUSTOM protocol.
		 *
		 * When enterring this routine, p_nsna points to the CC Nai
		 * context except if the message is SERVICE/ACK.
		 *
		 * The CUSTOM protocol uses from DL : DL_U_DA_IN and DL_DA_IN only.
		 *
		 * The expected primitives are :
		 *
		 *		- TI_3M1,
		 *		- DA_MAINT_SERVICE, DA_MAINT_SERVICE_ACK,
		 *		- MNS_SERVICE_RQ.
		 */


		/* Do some filtering */

	switch (ent_from) {

		case ENT_DL_D :
		case ENT_DL :

			switch (code) {

				case DL_DA_IN :
				case DL_U_DA_IN :
					break;

				default :
					return (OK);
			}

			break;
	}

		/* Set DL context pointer p_nsdl */

	Ns_access_dl_ces (Na_dl_ces);

	int_id = Nai;

	if (R_msg_from == ENT_TI) {
		b_chan_state= MAINT_STATE_B_UNDEF;

	} else {

			/*
			 * -1- Get the interface Id
			 */

		if (is_ie_i (CODESET_0, CHAN_ID) == PRESENT) {

			if (I_(chan_id, int_id) == INT_ID_EXPLICIT) {
				int_id = I_(chan_id, int_id_val);
			}

		}

			/*
			 * -2- Access the "int_id" Nai for messages coming from DL.
			 */

		if (direction == FROM_D_CHANNEL) {

				/* - DA_MAINT_SERVICE, DA_MAINT_SERVICE_ACK - */

				/* Select the right CC Nai */

			if (ns_nfas == ON) {

				if ((Na_maint_type != NFAS_TSP_BKP) &&
					(Na_maint_type != NO_NFAS)) {

					if (ns_access_na (int_id) == NOK) {

							/*
							 * Should never happen because the int_id
							 * has beeen checked in net_ie.at4.
							 */

						return (OK);
					}

				} else {

					if (ns_access_na (Nfas_cfg_nai_active_d_chan) != OK) {
						return (NOK);
					}

				}

			}

		}

			/*
			 * -3- Get the B channel.
			 *	We use the CHANGE_STATUS which is MANDATORY at both
			 *	interfaces (CC and DL).
			 *	If ALL B channels are impacted, set b_chan_state to UNDEF.
			 *	If only one is chosen, set b_chan to the  B channel Id
			 *	and b_chan_state to the current state.
			 */

		if (I_(change_status, preference) == PREF_B_CHANNEL) {

				/* A specific B channel is used */

			b_chan 		 = *I_chan_id_a_chan_number;
			b_chan 		 = Reset_ext_bit (b_chan);
			b_chan_state = Dl_b_chan_mode_int (int_id, b_chan);

		} else {

				/* Any B channel is concerned */

			b_chan_state = MAINT_STATE_B_UNDEF;

				/*
				 * The preference is reset to "B channel" because
				 * the network does not support a message with
				 * "all interface" encoding.
				 * 1 message for each B channel will be sent.
				 */

			I_(change_status, preference) = PREF_B_CHANNEL;
		}

	}

	action_type = NIL;

	if ((direction == FROM_CALL_CONTROL) && (p_ssdu != P_NIL)) {
		p_data 		= p_ssdu;
		action_type = Mns_service_action_type;
	}

	switch (b_chan_state) {

		case MAINT_STATE_B_IS :
			at4_b_is (int_id, b_chan, action_type);
			break;

		case MAINT_STATE_B_IS_ACK :
			at4_b_is_ack (int_id, b_chan);
			break;

		case MAINT_STATE_B_MAINT_FE :
		case MAINT_STATE_B_IS_MAINT_NE :
			p_data = p_ssdu;
			at4_b_maint_ne_fe (int_id, b_chan, action_type);
			break;

		case MAINT_STATE_B_MAINT_NE_ACK :
			at4_b_maint_ne_ack (int_id, b_chan);
			break;

		case MAINT_STATE_B_OOS_FE :
		case MAINT_STATE_B_OOS_NE :
			p_data = p_ssdu;
			at4_b_os_ne_fe (int_id, b_chan, action_type);
			break;

		case MAINT_STATE_B_OOS_NE_ACK:
			at4_b_oos_ne_ack (int_id, b_chan);
			break;

		case MAINT_STATE_B_UNDEF :
			at4_b_undef (int_id);
			break;
	}

	return (OK);

}

#endif /* } */

#if NS_D_BACKUP == ON /* { */

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

uchar at4_d_chan_mgt (code, ent_from)
	code_t	code;
	nai_t	ent_from;
{

	ushort state;

	ent_from += ent_from;

		/*
		 * This routine manages the D channel states.
		 */

	if (Nfas_nai_d_chan_backup_act == OFF) {

		return (OK);
	}

		/*
		 * When enterring this routine, p_nsna points to the CC Nai
		 * context.
		 */

	state = ((ushort)Nfas_active_d_chan_status << 8) + Nfas_backup_d_chan_status;

	switch (state) {

		case MAINT_STATE_IS_STBY :
		case MAINT_STATE_STBY_IS :
			at4_d_bkp_is_stby (code);
			break;

		case MAINT_STATE_MB_WAIT :
			at4_d_bkp_mb_wait (code);
			break;

		case MAINT_STATE_WAIT_MB :
			at4_d_bkp_wait_mb (code);
			break;

		case MAINT_STATE_IS_OOS :
		case MAINT_STATE_OOS_IS :
			at4_d_bkp_is_oos (code);
			break;

		case MAINT_STATE_OOS_WAIT :
			at4_d_bkp_oos_wait (code);
			break;

		case MAINT_STATE_OOS_OOS :
			at4_d_bkp_oos_oos (code);
			break;
	}

	return (OK);
}

#endif /* } */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	at4_filter () -

Usage           	uchar at4_filter (code, nai);
					Note : nai is not used.


Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

uchar at4_filter (code, nai)
	code_t		code;
	nai_t		nai;
{
	nai		+= nai;

	switch (R_msg_from) {

		case ENT_CC :
			return (CONTINUE);

		case ENT_DL :
		case ENT_DL_D :

				/*
				 * The filterng will be performed below.
				 */

			break;

		default :
			return (CONTINUE);
	}


#	if NS_D_BACKUP == ON

			/*
			 * Do the layer 2 filtering only if :
			 *	- nfas is ON
			 * 	- backup is ON
			 */

		if ((ns_nfas == OFF)|| (Nfas_nai_d_chan_backup_act == OFF)) {

			return (CONTINUE);
		}

		return (at4_d_bkp_filter (code));

#	else
		return (CONTINUE);
#	endif

}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#if NS_D_BACKUP == ON /* { */

uchar at4_d_bkp_filter (code)
	code_t		code;
{
	ushort state;
	uchar filter, protocol, msg, crl;

	uchar FAR *p_data;
	p_data = R_a_data;

	filter = CONTINUE;

		/* Do some filtering according the current state */

	state = ((ushort)Nfas_active_d_chan_status << 8) + Nfas_backup_d_chan_status;

	switch (state) {

		case MAINT_STATE_IS_STBY :

			switch (code) {

				case DL_U_DA_IN :
				case DL_DA_IN :

					protocol= p_data [0];
					crl		= p_data [1];
					msg		= p_data [2 + crl];

					if (protocol == PROTOCOL_DISCR_MAINTENANCE) {

						filter = STOP;

						if ((msg == MAINT_SERVICE) ||
							(msg == MAINT_SERVICE_ACK)) {

							filter = CONTINUE;
						}

					} else {

						if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

							filter = STOP;
						}
					}

					break;

				case DL_EST_IN :
					filter = STOP;
					break;
			}

			break;


		case MAINT_STATE_OOS_WAIT :

			switch (code) {

				case DL_EST_IN :

					if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

						filter = STOP;
					}

					break;

				case DL_REL_IN :

					if (Nfas_nai_line == Nfas_nai_active_d_chan) {

						filter = STOP;
					}

					break;

				case DL_U_DA_IN :
				case DL_DA_IN :

					protocol= p_data [0];

					if (protocol == PROTOCOL_DISCRIMINATOR_I451) {

						filter = STOP;
					}

					break;
			}

			break;

		case MAINT_STATE_OOS_OOS :
			break;

		case MAINT_STATE_OOS_IS :
		case MAINT_STATE_IS_OOS :

			switch (code) {

				case DL_EST_IN :

					if (Nfas_nai_line == Nfas_nai_active_d_chan) {

						filter = STOP;
					}

					break;

				case DL_U_DA_IN :
				case DL_DA_IN :

					if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

						filter = STOP;
					}

					break;

				case DL_EST_CO :

					if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

						p_nsdl = Nfas_dl_p_backup_d_chan;

							/* Stop T3_DL_EST */

						Stop_dl_timer (T3_DL_EST);

							/* Update the D channel states */

						Nfas_active_d_chan_status	= MAINT_STATE_IS;
						Nfas_backup_d_chan_status	= MAINT_STATE_STBY;
						Lc_state = LC_ESTABLISHED;
						filter	 = STOP;

					}

					break;

			}

			break;

		case MAINT_STATE_MB_WAIT :

			switch (code) {

				case DL_DA_IN :

					protocol= p_data [0];
					crl		= p_data [1];
					msg		= p_data [2 + crl];

					if (protocol == PROTOCOL_DISCR_MAINTENANCE) {

						if ((msg == MAINT_SERVICE) ||
							(msg == MAINT_SERVICE_ACK)) {

							filter = CONTINUE;
						}

					} else {

						filter = STOP;
					}

					break;

				case DL_U_DA_IN :

						/* Ignore */

					filter = STOP;
					break;

				case DL_REL_IN :

					if (Nfas_nai_line == Nfas_nai_active_d_chan) {

							/* Ignore */

						filter = STOP;
					}

					break;

				case DL_EST_IN :
				case DL_EST_CO :

					if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

							/* Ignore */

						filter = STOP;
					}

					break;
			}

			break;

		case MAINT_STATE_WAIT_MB :

			switch (code) {

				case DL_DA_IN :

					protocol= p_data [0];
					crl		= p_data [1];
					msg		= p_data [2 + crl];

					if (protocol == PROTOCOL_DISCR_MAINTENANCE) {

						if ((msg == MAINT_SERVICE) ||
							(msg == MAINT_SERVICE_ACK)) {

							filter = CONTINUE;
						}

					} else {

						filter = STOP;
					}

					break;

				case DL_U_DA_IN :

						/* Ignore */

					filter = STOP;
					break;

				case DL_REL_IN :

					if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

							/* Ignore */

						filter = STOP;
					}

					break;

				case DL_EST_IN :
				case DL_EST_CO :

					if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

							/* Ignore */

						filter = STOP;
					}

					break;
			}

	}

	return (filter);
}

#endif /* NS_D_BACKUP } */

#endif /* } NS_MAINTENANCE_CAPABILITY*/

/*------------------------------------------------------------------------*/

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	at4_audit () -

Usage           	uchar at4_audit (int_id, b_chan);

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

Return code :		OK : a NS_SERVICE_CO has been sent
					NOK: No NS_SERVICE_CO has been sent
*--------------------------------------------------------------------------*/
uchar at4_audit (int_id, b_chan)
	nai_t int_id;
	uchar b_chan;
{
	uchar current_state, ret_code;

	ret_code = NOK;

	current_state = Dl_b_chan_mode_int (int_id, b_chan);

		/*
		 * Check if the channel is in use.
		 * A channel is in use if :
		 *	- a call is upon the channel
		 *	- Maintenance action is in progress
		 *	- A B channel is waiting for a SERV_ACK.
		 */

	if ((Is_call_upon_B_chan (int_id, b_chan))	 		||
		(Is_maint_in_progress (int_id, b_chan))			||
		(Is_B_chan_state_wait_for_ack (current_state))) {

			/*
			 * The B channel is in use --> Nothing to do.
			 */


		return (NOK);
	}

	switch (current_state) {

		case MAINT_STATE_B_IS :
		case MAINT_STATE_B_IS_MAINT_NE :

				/* Update the status field to be sent back */

			I_(change_status, status) = CHANNEL_IN_SERVICE;

				/* Send back a MAINT_SERVICE */

			Send_to_d_channel_proto	(MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);

			if (State_dl_timer (AT4_T3M1) == OFF) {

					/* Start DL timer T3M1 */

				Start_dl_timer (AT4_T3M1);
			}

				/* Update current B channel state */

			Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_IS_ACK;
			ret_code = CONTINUE;
			break;

		case MAINT_STATE_B_OOS_MAINT_NE :
		case MAINT_STATE_B_OOS_NE :

				/* Update the status field to be sent back */

			I_(change_status, status) = CHANNEL_OUT_OF_SERVICE;

				/* Send back a MAINT_SERVICE, DON'T start T3M1 */

			Send_to_d_channel_proto	(MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);

				/* Update current B channel state */

			Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_NE;

			Set_call_ref_not_nil ();
			Send_to_call_control (NS_SERVICE_CO);
			ret_code = OK;
			break;

		case MAINT_STATE_B_OOS_FE :
		case MAINT_STATE_B_MAINT_FE :

				/* Update the status field to be sent back */

			I_(change_status, status) = CHANNEL_OUT_OF_SERVICE;

				/* Send back a MAINT_SERVICE */

			Send_to_d_channel_proto	(MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);

			if (State_dl_timer (AT4_T3M1) == OFF) {

					/* Start DL timer T3M1 */

				Start_dl_timer (AT4_T3M1);
			}

				/* Update current B channel state */

			Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_FE_ACK;
			break;

	}

	return (ret_code);
}

#endif /* } */

/*-------------------------------------------------------------------------*/

#if (NS_TYPE_PRI == ON) && (NS_MAINTENANCE_CAPABILITY == ON) && (NS_RESTART_PROCEDURE == ON) /* { */

uchar at4_restart_mgt (code, int_id)
	code_t code;
	nai_t	int_id;
{
	uchar b_chan_max, i, b_chan;

	b_chan_max = NS_MX_B_CHAN_T1 - 1;

#	if NS_D_BACKUP == ON

		if ((ns_nfas == ON) && (Nfas_nai_d_chan_backup_act == ON)) {

			if ((int_id != Nfas_nai_active_d_chan) && (int_id != Nfas_nai_backup_d_chan)) {

				b_chan_max = NS_MX_B_CHAN_T1;
			}
		}

#	endif

	switch (code) {

		case DA_RESTART :

			Dl_rest_class = I_restart_ind_class;
			at4_restart_n_pri ();
			break;

		case DA_RESTART_ACK :

			if (Dl_b_chan_restart_nb > 0) {
				Dl_b_chan_restart_nb--;

			}

			if (Dl_b_chan_restart_nb == 0) {

				Stop_dl_timer (AT4_T316);

				if (Nfas_nai_mode != NFAS_TSP) {

					if (is_ie_i (CODESET_0, CHAN_ID) == PRESENT) {

						if (I_(chan_id, int_id) == INT_ID_EXPLICIT) {

							if (ns_access_na (I_(chan_id, int_id_val)) == NOK) {
								return (OK);
							}
						}
					}
				}

				ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
				Dl_restart_reset ();

			}

			break;

		case NS_RESTART_RS :

			switch (Dl_rest_state) {

				case STATE_REST_1 :

					if (Dl_rest_ack == ON) {

						ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
						Dl_restart_reset ();

					} else {

						Dl_rest_resp = ON;
					}

					break;

				case STATE_REST_2 :

					if (Dl_b_chan_restart_nb > 0) {
						Dl_b_chan_restart_nb--;

					}

						/*
						 * Send a RESTART_ACK if
						 *	-1- Class is not ALL_INTERFACES
						 *	-2- or Class is ALL INTERFACES and no more
						 * 		RESTART_RS are expected.
						 */

					Set_call_ref_not_nil ();
					Send_to_d_channel (RESTART_ACK);

					if (Dl_b_chan_restart_nb == 0) {
						Dl_restart_reset ();
					}
					break;

				default :

					ns_unexpected_ev ();
			}

			return (OK);

		case MNS_RESTART_RQ :

			if (I_restart_ind_class != RI_INDICATED_CHANNEL) {

				I_restart_ind_class = RI_INDICATED_CHANNEL;
				Dl_rest_class = I_restart_ind_class;

				Dl_b_chan_restart_nb 		= b_chan_max;
				Dl_b_chan_maint_nb (int_id) = b_chan_max;

					/* Prepare a channel Id for DL */

				set_ie_i (CODESET_0, CHAN_ID);

				I_chan_id_d_chan			= NOT_D_CHAN;		/* B-Channel indicated */
				I_chan_id_pref_excl			= CHAN_EXCL;		/* Exclusive */
				I_chan_id_int_type			= INT_TYPE_PRI;     /* PRI line */
				I_chan_id_chan_sel			= AS_INDICATED;		/* Channel Number as indicated in following octets */
				I_chan_id_chan_type			= B_CHAN;			/* B-Channel number */
				I_chan_id_nb_map			= CHAN_NUMBER;		/* Format of following octets = simply the B-Channel number */
				I_chan_id_chan_number_lgth	= 1;				/* 1 Channel number yet */
				I_chan_id_a_chan_number 	= p_ind_buffer++;	/* save data into indirect buffer */

				if (int_id != Nfas_nai_active_d_chan) {
					I_(chan_id, int_id) 		= INT_ID_EXPLICIT;	/* Interface Id is explicit */
					I_(chan_id, int_id_val)		= int_id;			/* Interface Id value */
				} else {
					I_(chan_id, int_id) 		= INT_ID_IMPLICIT;	/* Interface Id is explicit */
				}

				for (i = 0; i < b_chan_max; i++) {

					b_chan = (i+1);
					*I_chan_id_a_chan_number = b_chan;

					Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
					N316 = 0;
					Start_dl_timer (AT4_T316);
					Dl_rest_state = STATE_REST_1;

				}

			} else {

				Dl_b_chan_restart_nb = 1;
				Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
				N316 = 0;
				Start_dl_timer (AT4_T316);
				Dl_rest_state = STATE_REST_1;

			}

			break;

	}	/* switch code */


	return (OK);
}

/*--------------------------------------------------------------------------*/

void at4_restart_n_pri ()
{
	struct nsna FAR *p_nsna_sav;

	uchar i, int_id;

	if (I_chan_id_a_chan_number != P_NIL) {
		Reset_ext_bit (*I_chan_id_a_chan_number);
	}

	if ((ns_nfas == OFF) ||
		((ns_nfas == ON) && (Nfas_nai_mode == NFAS_TSP))) {

		Dl_rest_state = STATE_REST_2;
		Set_call_ref_nil ();

			/* If TSP, the Na must be the Cfg_na */

		if ((ns_nfas == ON) && (Nfas_nai_mode == NFAS_TSP)) {

			if (ns_access_na (Nfas_cfg_nai_active_d_chan) != OK) {
				return;
			}

		}

		Send_to_call_control (NS_RESTART_IN);
		Dl_b_chan_restart_nb++;

		if (I_restart_ind_class == RI_ALL_INTERFACES) {
			csc_clear_all_call ();
			Na_internal_restart = ON;
		}

		return;
	}

		/*
		 * Only one channel is indicated : the lowest NxDS0 Channel.
		 * The upper entity must clear ALL the calls.
		 */


	Dl_rest_state = STATE_REST_2;

	switch (I_restart_ind_class) {

		case RI_INDICATED_CHANNEL :

			if (I_(chan_id, int_id) == INT_ID_IMPLICIT) {

					/* Check that the int_id_val is the Active D channel */

				int_id = Nai;

			} else {

				int_id = I_(chan_id, int_id_val);

				if (ns_access_na (int_id) == NOK) {
					return;
				}
			}

			Set_call_ref_nil ();
			Send_to_call_control (NS_RESTART_IN);
			Dl_nai_restart_nb = 1;
			Dl_b_chan_restart_nb++;
			break;
	}
}

#endif

/*EOF*/
