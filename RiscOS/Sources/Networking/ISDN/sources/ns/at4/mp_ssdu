
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ssdu.at4
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	at4_chan_id_ssdu			(Void_parm);
	uchar	at4_chan_id_chan_nb_ssdu	(Void_parm);
	uchar	at4_llc_ra_ssdu				(Void_parm);

#if NS_SPF_FACILITY == ON
	uchar	at4_spf_fac_ssdu			(Void_parm);
#endif

#endif

		/*
			meta description of the primitives used to communicate between
			layer 4 and layer 3 of the network signalling entities.
			These primitives are network dependent.
			(Ordered alphabetically)
		*/

/*-------------------------------------------------------------------------*/

			/* BC : bearer capabilities */

D_START	(AT4_P_BC)
	D_TABL		(TRF_CAP)
	D_TABL		(TRF_MODE_)
	D_TABX		(TRF_RATE_)
	D_TABX		(DEST_RATE_)
	D_VAL		(PROTO1_)
	D_VAL		(PROTO2_)
	D_VAL		(PROTO3_)

D_END	(P_BC_1)

START	(AT4_P_BC)
	TABL		(AT4_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
	TABL		(AT4_T_TRF_MODE,			&i_bc[0].trf_mode)
	TABX		(AT4_TX_BC_TRF_RATE,	   	&i_bc[0].trf_mode,	&i_bc[0].trf_rate)
	TABX		(AT4_TX_TRF_RATE,			&i_bc[0].trf_mode,	&i_bc[0].dest_rate)
	VAL			(PROTOCOL_ID_1_RA_I461,		&i_bc[0].protocol_id_1)
	VAL			(PROTOCOL_ID_2_Q921,		&i_bc[0].protocol_id_2)
	VAL			(PROTOCOL_ID_3_Q931,		&i_bc[0].protocol_id_3)
END		(0)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(AT4_P_CALLED_NB)
	D_TABL  	(PLAN_)
	D_TABL  	(_TYPE)
	D_TEXT		(IA5_DIGIT_)
D_END			(P_CALLED_NB_END)

START (AT4_P_CALLED_NB)
	TABL		(AT4_T_CALLED_NB_PLAN,  &i_called_nb[0].plan_id)
	TABL		(AT4_T_CALLED_NB_TYPE,	&i_called_nb[0].nb_type)
	TEXT		(1,AT4_MX_SZ_CALLED_NB, DIGIT, 	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END	(0)

/*-------------------------------------------------------------------------*/

			/* CALLED_SUB_ADD : called party sub address */

D_START	(AT4_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END (P_CALLED_SUB_ADD_END)

START	(AT4_P_CALLED_SUB_ADD)
	TABL 	(AT4_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
	TABL 	(AT4_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)

	IF_VAL  (&i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT(1,AT4_MX_SZ_CALLED_SUB_ADD,DIGIT,		&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	ELSE	()
		TEXT(1,AT4_MX_SZ_CALLED_SUB_ADD,ANY_OCTET,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	END_IF	()
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(AT4_P_CALLING_NB)
		D_TABL		(PLAN)
		D_TABL		(TYPE)
		D_TABL		(PRESENTATION)
		D_TABL		(SCREEN_IND)
		D_TEXT		(DIGIT_)
D_END   (CALLING_NB_E)

START	(AT4_P_CALLING_NB)
		TABL	(AT4_T_CALLING_NB_PLAN,  	&i_calling_nb[0].plan_id)
		TABL	(AT4_T_CALLING_NB_TYPE,		&i_calling_nb[0].nb_type)
		TABL	(AT4_T_CALLING_NB_PRES, 	&i_calling_nb[0].pres)
		TABL	(AT4_T_CALLING_NB_SCREEN,	&i_calling_nb[0].screen_ind)
		TEXT	(0,AT4_MX_SZ_CALLING_NB,DIGIT, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(AT4_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END (P_CALLING_SUB_ADD_END)

START	(AT4_P_CALLING_SUB_ADD)
	TABL (AT4_T_SUB_ADD_TYPE,						&i_calling_sub_add[0].sub_add_type)
	TABL (AT4_T_SUB_ADD_IND,						&i_calling_sub_add[0].odd_even_ind)

	IF_VAL  (&i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,AT4_MX_SZ_CALLING_SUB_ADD,DIGIT,		&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
	ELSE	()
		TEXT (1,AT4_MX_SZ_CALLING_SUB_ADD,ANY_OCTET,	&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
	END_IF	()

END (0)

/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(AT4_P_CAUSE)
	D_TABL		(CODING_STD)
	D_TABL		(LOCATION)
	D_TABL		(C_CLASS_CCITT)
	D_TABX		(C_V_CCITT)
	D_TEXT		(DIAG_OCTETS)
D_END	(CAUSE_E_A)

START	(AT4_P_CAUSE)
	TABL		(AT4_T_CAUSE_CODING_STD,		&i_cause[0].coding_std)
	TABL		(AT4_T_LOCATION,				&i_cause[0].cause_loc)
	TABL		(AT4_T_C_C,						&i_cause[0].cause_class)
	TABX		(AT4_TX_C_V_CCITT,				&i_cause[0].cause_class,  &i_cause[0].cause_val)
	TEXT		(0,AT4_MX_SZ_CAUSE_DIAG,ANY_CHAR,&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

/*-------------------------------------------------------------------------*/

			/* CHANGE_STATUS : change status of a B channel */

D_START (AT4_P_CHANGE_STATUS)
	D_ANY_VAL 	(PREF)
	D_TABL		(CHAN_STAT)
D_END	(AT4_CHANGE_STATUS_E)

START (AT4_P_CHANGE_STATUS)
	ANY_VAL	(    			&i_change_status[0].preference)
	TABL	(AT4_T_STATUS,	&i_change_status[0].status)
END (0)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

D_START	(AT4_P_CHAN_ID)
	D_TABL			(INT_ID)
	D_TABL  		(PREF_EXCL)
	D_TABL  		(_D_CHAN)
	D_TABL  		(SEL)
	D_TABL 			(_INT_)
	D_TABL  		(NB_MAP)
	D_TABL  		(NB_TYPE)

	D_IF_VAL		(_MAP)
		D_FUNCTION	(_CHAN_NB_)
		D_TEXT 	 	(NBER)
	D_ELSE			(CHAN_NB_)
		D_TEXT  	(_MAPPING)
	D_END_IF		(MAP_CHAN)

D_END	(CHAN_ID_E)

START	(AT4_P_CHAN_ID)
	TABL			(AT4_T_CHAN_INT,		&i_chan_id[0].int_id)
	TABL			(AT4_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL			(AT4_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABL			(AT4_T_CHAN_SEL,		&i_chan_id[0].chan_sel)
	TABL			(AT4_T_CHAN_INT_VAL,	&i_chan_id[0].int_id_val)
	TABL			(AT4_T_NB_MAP,			&i_chan_id[0].nb_map)
	TABL			(AT4_T_CHAN_TYPE,		&i_chan_id[0].chan_type)

	IF_VAL			(&i_chan_id[0].chan_type, EQ, B_CHAN)
		FUNCTION	(at4_chan_id_chan_nb_ssdu)
		TEXT		(1,AT4_MX_SZ_CHAN_ID,ANY_CHAR,	&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
	ELSE			()
		TEXT		(1,AT4_MX_SZ_CHAN_ID,ANY_OCTET,	&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
	END_IF			()

END		(at4_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

			/* CONGEST_LEVEL : congestion level */

D_START	(AT4_P_CONGEST_LEVEL)
	D_TABL (LEVEL)
D_END	(CONGEST_LEVEL_E)

START	(AT4_P_CONGEST_LEVEL)
	TABL (AT4_T_CONGEST_LEVEL,		&i_congest_level[0].congest_level)
END		(0)

/*-------------------------------------------------------------------------*/

			/* CONN_NB : connected number */

D_START	(AT4_P_CONN_NB)
	D_TABL  	(PLAN_)
	D_TABL  	(_TYPE)
	D_TEXT		(IA5_DIGIT_)
D_END			(P_CONN_NB_END)

START (AT4_P_CONN_NB)
	TABL		(AT4_T_CALLED_NB_PLAN,  &i_conn_nb[0].plan_id)
	TABL		(AT4_T_CALLED_NB_TYPE,  &i_conn_nb[0].nb_type)
	TEXT		(1,AT4_MX_SZ_CONN_NB, DIGIT, 	&i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END	(0)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(AT4_P_HLC)
	D_TABL			(CODING_STD)

	D_IF_VAL		(CODING_CCITT)
		D_TABL		(TELESERVICE)
		D_TABL		(EXT_TELESERVICE)
	D_END_IF		(CODING)

D_END				(HLC_END)

START	(AT4_P_HLC)
	TABL			(AT4_T_CODING_STD,			&i_hlc[0].coding_std)

	IF_VAL			(&i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL		(AT4_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		TABL		(AT4_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
	END_IF			()

END				(0)

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(AT4_P_LLC)
	D_TABL	(CODING_STD)
	D_TABL	(TRF_CAP)
	D_TABL	(OUT_BAND_NEG)
	D_TABL	(TRF_MODE)
	D_TABX	(TRF_RATE)

	D_IF_VAL	(_TRF_RATE_MULTI_RATE)
		D_TABL	(_MULTIPLIER)
		D_PAD	(_STUCT)
	D_ELSE		(_NO_MULT)
		D_PAD	(_MULTI)
		D_TABL	(_STRUCTURE)
	D_END_IF	(_N_64)

	D_TABX	(DEST_RATE)
	D_TABL	(PROTOCOL_1)
D_END	(P_LLC_1)

START	(AT4_P_LLC)
	TABL	(AT4_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(AT4_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
	TABL	(AT4_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
	TABL	(AT4_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(AT4_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)

	IF_VAL	(&i_llc[0].trf_rate, EQ,TRF_RATE_MULTI_RATE)
		TABL	(AT4_T_MULTIPLIER,			&i_llc[0].Multiplier)
		PAD		(1)
	ELSE		()
		PAD		(1)
		TABL	(AT4_T_STRUCTURE,			&i_llc[0].structure)
	END_IF		()

	TABX	(AT4_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
	TABL	(AT4_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(at4_llc_ra_ssdu)

		/* V110 */

D_START	(AT4_P_LLC_V110)
	D_TABL	(V110_SYN_ASYN)
	D_TABL	(V110_NEGOTIATION)
	D_TABL	(V110_USER_RATE)
	D_TABL	(V110_INTER_RATE)
	D_TABL	(V110_TX_NIC)
	D_TABL	(V110_RX_NIC)
	D_TABL	(V110_TX_FC)
	D_TABL	(V110_RX_FC)
	D_PAD	(P_9_14)
	D_TABL	(V110_STOP_BIT)
	D_TABL	(V110_DATA_BIT)
	D_TABL	(V110_PARITY)
	D_TABL	(V110_DUPLEX)
	D_TABL	(V110_MODEM)
D_END (ENDIF_V110)

START	(AT4_P_LLC_V110)
	TABL	(AT4_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(AT4_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(AT4_T_USER_RATE,			&i_llc[0].user_rate)
	TABL	(AT4_T_INTER_RATE,			&i_llc[0].inter_rate)
	TABL	(AT4_T_NIC_TX,				&i_llc[0].tx_nic)
	TABL	(AT4_T_NIC_RX,				&i_llc[0].rx_nic)
	TABL	(AT4_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
	TABL	(AT4_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
	PAD		(6)
	TABL	(AT4_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(AT4_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(AT4_T_PARITY,				&i_llc[0].parity)
	TABL	(AT4_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(AT4_T_MODEM,				&i_llc[0].modem)
END	(0)

D_START	(AT4_P_LLC_V120)
	D_TABL	(V120_SYN_ASYN)
	D_TABL	(V120_NEGOTIATION)
	D_TABL	(V120_USER_RATE)
	D_PAD	(P_4_8)
	D_TABL	(V120_HDR)
	D_TABL	(V120_MULTI_FRAME)
	D_TABL	(V120_OP_MODE)
	D_TABL	(V120_LLI)
	D_TABL	(V120_ASSIGN)
	D_TABL	(V120_BAND)
	D_TABL	(V120_STOP_BIT)
	D_TABL	(V120_DATA_BIT)
	D_TABL	(V120_PARITY)
	D_TABL	(V120_DUPLEX)
	D_TABL	(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(AT4_P_LLC_V120)
	TABL	(AT4_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(AT4_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(AT4_T_USER_RATE,			&i_llc[0].user_rate)
	PAD		(5)
	TABL	(AT4_T_HEADER,				&i_llc[0].hdr)
	TABL	(AT4_T_MULTI_FRAME,			&i_llc[0].multi_frame)
	TABL	(AT4_T_OP_MODE,				&i_llc[0].op_mode)
	TABL	(AT4_T_LLI,					&i_llc[0].lli)
	TABL	(AT4_T_ASSIGN,				&i_llc[0].assign)
	TABL	(AT4_T_BAND,				&i_llc[0].band)
	TABL	(AT4_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(AT4_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(AT4_T_PARITY,				&i_llc[0].parity)
	TABL	(AT4_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(AT4_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(AT4_P_LLC_PAD)
	D_PAD	(P_1_19)
D_END		(END_PAD_RA)

START	(AT4_P_LLC_PAD)
	PAD		(19)
END			(0)

D_START	(AT4_P_LLC_2)
	D_TABL		(PROTOCOL_ID_2)
	D_ANY_VAL	(OPT_2)
	D_TABL		(PROTOCOL_ID_3)
	D_ANY_VAL	(OPT_3)
D_END		(LLC_E)

START	(AT4_P_LLC_2)
	TABL	(AT4_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
	ANY_VAL	(&i_llc[0].option_2)
	TABL	(AT4_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
	ANY_VAL	(&i_llc[0].option_3)
END			(0)

#if NS_SPF_FACILITY == ON

			/* SPF_FAC : network specific facilities */

D_START	(AT4_P_SPF_FAC)
	D_ANY_VAL	(NETWORK_ID_LGTH)
	D_TABL		(TYPE_NET_ID)
	D_FUNCTION	(NET_ID)
	D_TABL		(SERVICE_)
	D_TABL		(_FAC_CODE)

	D_IF_VAL	(IF_SERV)
		D_TABL	(_BIN_SERV_)
	D_ELSE		(_BIN_FE)
		D_TABL	(_BIN_FEAT_)
	D_END_IF	(_SERV)
	D_VAL		(PARAM_FLD)

D_END			(SPF_FAC_END)

START	(AT4_P_SPF_FAC)
	ANY_VAL		(							&i_spf_fac[0].net_id_lgth)
	TABL		(AT4_T_NET_ID_TYPE,			&i_spf_fac[0].Net_id_type)
	FUNCTION	(at4_spf_fac_ssdu)
	TABL		(AT4_T_PARAMETER_BINARY,	&i_spf_fac[0].action)
	TABL		(AT4_T_FAC_SERV_FEAT,		&i_spf_fac[0].serv_feature)

	IF_VAL		(&i_spf_fac[0].serv_feature, EQ, FAC_SERVICE)
		TABL	(AT4_T_BIN_SERVICE, 		&i_spf_fac[0].facility_coding)
	ELSE		()
		TABL	(AT4_T_BIN_FEATURE, 		&i_spf_fac[0].facility_coding)
	END_IF		()

	VAL			(FAC_VARI_A_BILL,			&i_spf_fac[0].Param_fld)
END		(0)

#endif

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(AT4_P_PROGRESS_IND)
	D_TABL	(CODING_STD)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(AT4_P_PROGRESS_IND)
	TABL	(AT4_T_CODING_STD,				&i_progress_ind[0].coding_std)
	TABL	(AT4_T_LOCATION,				&i_progress_ind[0].progress_loc)
	TABL	(AT4_T_PROGRESS_IND_DESCR,		&i_progress_ind[0].progress_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* REDIR_NB : redirecting number */

D_START	(AT4_P_REDIR_NB)
	D_TABL		(TYPE)
	D_TABL		(PLAN)
	D_TABL		(PRESENTATION)
	D_TABL		(SCREEN_IND)
	D_TABL		(REASON_REDIR)
	D_TEXT		(DIGIT_)
D_END	(REDIR_NB_E)

START	(AT4_P_REDIR_NB)
	TABL	(AT4_T_CALLING_NB_TYPE,		&i_redir_nb[0].nb_type)
	TABL	(AT4_T_CALLED_NB_PLAN,  	&i_redir_nb[0].plan_id)
	TABL	(AT4_T_CALLING_NB_PRES, 	&i_redir_nb[0].pres)
	TABL	(AT4_T_CALLING_NB_SCREEN,	&i_redir_nb[0].screen_ind)
	TABL	(AT4_T_REASON_REDIR,		&i_redir_nb[0].reason)
	TEXT	(0,AT4_MX_SZ_REDIR_NB,DIGIT,&i_redir_nb[0].lgth,	(uchar **)&i_redir_nb[0].p_add)
END		(0)

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START		(AT4_P_RESTART_IND)
	D_VAL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(AT4_P_RESTART_IND)
	VAL		(RI_INDICATED_CHANNEL,		&i_restart_ind[0].restart_class)
END			(0)

/*-------------------------------------------------------------------------*/


			/* UUI : user to user information */

D_START	(AT4_P_UUI)
	D_TABL		(PROTOCOL_DISCR)
	D_IF_VAL	(DISCR_IA5)
		D_TEXT  (INFO_IA5)
	D_ELSE		(OTHER_DISCR)
		D_TEXT  (INFO_OTHER)
	D_END_IF	(DISCR)
D_END		(UUI_END)

START	(AT4_P_UUI)
	TABL	(AT4_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)
	IF_VAL		(&i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT	(0,AT4_MX_SZ_UUI,ANY_CHAR, 	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE		()
		TEXT	(0,AT4_MX_SZ_UUI,ANY_OCTET,	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF		()
END			(0)

/*EOF*/

