/*--------------------------------------------------------------------------*
 *						M O D U L E	H E A D E R
 *
 * filename - net_fct.at4
 *
 * $Revision$
 *
 * $Date$
 *
 *	  - Implements the AT4 internal specific function definition
 *		of the NETWORK SIGNALLING layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* PROTOTYPES FOR THE LIST OF THE NETWORK SPECIFIC functions */
		/*-----------------------------------------------------------*/

#if NEW_FCT_STYLE == ON

	void	at4_set_i_cause					(uchar cause_class, uchar value , char FAR *p_diagnostic);
	void	at4_set_i_state					(uchar state);
	void	at4_build_par					(void);

	uchar	at4_circuit_switched_call		(void);
	uchar	at4_circuit_switched_call_n		(void);
	void	at4_csc_dl_reinit				(void);
	void	at4_csc_dl_reinit_n				(void);

	uchar	at4_error_handler				(void);
	uchar	at4_ie_type_eval				(uchar p1, uchar p2);

	uchar	at4_filter						(code_t p1, nai_t p2);
	uchar	at4_bkp_maint_proc				(code_t p1, nai_t p2);

#   if SIMULATION == ON
		uchar	at4_cc_load_ns_test			(code_t p1, nai_t p2, sapi_t p3, conn_id_t p4);
		void	at4_net_build_pdu_ns		(void);
		void	at4_automata_1				(void);
		void	at4_pr_spdu_id				(void);
#	endif

#else

	void 	at4_set_i_cause					();
	void 	at4_set_i_state					();
	void	at4_build_par					();

	void	at4_csc_dl_reinit				();
	uchar	at4_circuit_switched_call_n		();
	uchar	at4_circuit_switched_call		();
	void	at4_csc_dl_reinit_n				();

	uchar	at4_ie_type_eval				();
	uchar	at4_error_handler				();

	uchar	at4_filter						();
	uchar	at4_bkp_maint_proc				();

#	if SIMULATION == ON
		uchar	at4_cc_load_ns_test			();
		void	at4_net_build_pdu_ns		();
		void	at4_automata_1				();
		void	at4_pr_spdu_id				();
#	endif

#endif

uchar	AT4_SPF_PARAM				[MX_PARAM];

/*--------------------------------------------------------------------------*/

		/* Table for the specific AT4 parameters used in the kernel */

extern CONST uchar at4_mx_size_ssdu;
extern CONST uchar at4_mx_size_spdu;
extern CONST uchar at4_size_tab_ie;
extern CONST uchar at4_size_tab_tabx;
extern CONST uchar at4_size_tab_tabl;

CONST uchar at4_mx_dl_retry 		=	AT4_MX_DL_RETRY;
CONST uchar at4_mx_additional_octet =	AT4_MX_ADDITIONAL_OCTET;
CONST uchar at4_timer_idx_308		= 	AT4_T308;
CONST uchar at4_mx_dlci_timer 		= 	AT4_MX_DLCI_TIMER;
CONST uchar at4_mx_call_timer 		= 	AT4_MX_CALL_TIMER;

						/*-=-=--=-=-=-=-=-=-=-*/



		/* Table for the specific AT4 functions used in the kernel */


/*--------------------------------------------------------------------------*/

CONST struct void_fct_table		AT4_VOID_FCT_TAB[] = {

	Put_fct (F_VOID_CSC_DL_REINIT,			at4_csc_dl_reinit),

#if EQUIPMENT == TE
	Put_fct (F_VOID_CSC_DL_REINIT_N,		FCT_NIL),
#else
	Put_fct (F_VOID_CSC_DL_REINIT_N,		at4_csc_dl_reinit_n),
#endif

#if SIMULATION == ON
	Put_fct (F_VOID_NET_BUILD_PDU_NS,		at4_net_build_pdu_ns),
	Put_fct (F_VOID_AUTOMATA_1,				at4_automata_1),
	Put_fct (F_VOID_PR_SPDU_ID,				at4_pr_spdu_id),
#endif

#if NS_HOLD_RETRIEVE == ON
	Put_fct	(F_VOID_CALL_STATE_CHG,			FCT_NIL),		
#endif

};

/*--------------------------------------------------------------------------*/

CONST struct uchar_fct_table	AT4_UCHAR_FCT_TAB[] = {

	Put_fct (F_UCHAR_CSC,					at4_circuit_switched_call),

	Put_fct (F_UCHAR_ERROR_HANDLER,			at4_error_handler),

#if EQUIPMENT == NT2
	Put_fct (F_UCHAR_CSC_N,					at4_circuit_switched_call_n),
#endif

};

/*--------------------------------------------------------------------------*/

CONST struct uchar_fct_2p_table	AT4_UCHAR_FCT_2P_TAB[] = {
	Put_fct (F_UCHAR_2P_NS_EI,				FCT_NIL),

#	if NS_MAINTENANCE_CAPABILITY == ON
		Put_fct (F_UCHAR_2P_FILTER,			at4_filter),
		Put_fct (F_UCHAR_2P_BKP_MAINT_PROC,	at4_bkp_maint_proc),
#	endif

};

/*--------------------------------------------------------------------------*/

CONST struct uchar_fct_2u_table	AT4_UCHAR_FCT_2U_TAB[] = {
	Put_fct (F_UCHAR_2U_IE_TYPE_EVAL,		at4_ie_type_eval),
	Put_fct (F_UCHAR_2U_ERR_LEVEL_EVAL,		FCT_NIL),
};

/*--------------------------------------------------------------------------*/

CONST struct uchar_fct_4p_table	AT4_UCHAR_FCT_4P_TAB[] = {

#	if SIMULATION == ON

		Put_fct (F_UCHAR_4P_CC_LOAD_NS_TEST,at4_cc_load_ns_test),

#	else

		Put_fct	(F_NIL,						FCT_NIL),

#	endif

};

/*--------------------------------------------------------------------------*/

void at4_build_par ()
{

	if (at4 == NIL) return;

	AT4_SPF_PARAM[P_MX_DL_RETRY]		= at4_mx_dl_retry;
	AT4_SPF_PARAM[P_MX_ADDITIONAL_OCTET]= at4_mx_additional_octet;
	AT4_SPF_PARAM[P_MX_SIZE_SSDU]		= at4_mx_size_ssdu;
	AT4_SPF_PARAM[P_MX_SIZE_SPDU]		= at4_mx_size_spdu;
	AT4_SPF_PARAM[P_TIMER_IDX_T308]		= at4_timer_idx_308;
	AT4_SPF_PARAM[P_SIZE_TAB_IE]		= at4_size_tab_ie;
	AT4_SPF_PARAM[P_SIZE_TAB_TABL]		= at4_size_tab_tabl;
	AT4_SPF_PARAM[P_SIZE_TAB_TABX]		= at4_size_tab_tabx;
	AT4_SPF_PARAM[P_MX_CALL_TIMER]		= at4_mx_call_timer;
	AT4_SPF_PARAM[P_MX_DLCI_TIMER]		= at4_mx_dlci_timer;

	tab_ti_call		[at4]	= (CONST struct ns_timer	*)&AT4_TI_CALL;
	tab_timer_idx	[at4]	= (uchar FAR 				*)&AT4_TI_IDX;
	tab_ti_dlci		[at4]	= (CONST struct ns_timer	*)&AT4_TI_DLCI;

#	if EQUIPMENT == NT2
		tab_ti_int	[at4]	= (CONST struct ns_timer	*)P_NIL;
#	endif

	Spf_param		(at4)	= (uchar FAR 		*)&AT4_SPF_PARAM;
	Spf_void_fct	(at4)	= (uchar FAR 		*)&AT4_VOID_FCT_TAB;
	Spf_uchar_fct	(at4)	= (uchar FAR 		*)&AT4_UCHAR_FCT_TAB;
	Spf_uchar_fct_2u(at4)	= (uchar FAR 		*)&AT4_UCHAR_FCT_2U_TAB;
	Spf_uchar_fct_2p(at4)	= (uchar FAR 		*)&AT4_UCHAR_FCT_2P_TAB;
	Spf_uchar_fct_4p(at4)	= (uchar FAR 		*)&AT4_UCHAR_FCT_4P_TAB;
}
						/*-=-=--=-=-=-=-=-=-=-*/

/*EOF*/
