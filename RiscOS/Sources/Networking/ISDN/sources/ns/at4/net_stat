
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_state.at4
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		u0 to u19 - user side - implements the processing of an event
 *					 according to the state of the call (u0 to u254).
 *
 *		n0 to n19 - network side - implements the processing of an event
 *					 according to the state of the call (n0 to n254).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


						/*--------------*/
						/*				*/
						/*	USER SIDE	*/
						/*		U		*/
						/*--------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			 u0 to u254 - user side - implements the processing of an
							  event according to the call state.

Usage			void uxx (void);

Related
functions usage void Stop_timer_ns (uchar x_timer);

				void Start_timer_ns (uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value	void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
				No call exists : used when a call context is
				allocated to a call
			*/

void at4_u0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Call_chan_id_sel	= I_(chan_id,	chan_sel);	/* CHAN_ID is mandatory and so present */
			Call_bc_trf_cap		= I_(bc,		trf_cap);	/* BC is mandatory and so present */
			Send_to_call_control (NS_CONN_IN);

				/*
				 * State #6 does not exist.
				 * Remain in the same state.
				 */

			Start_timer_ns (AT4_T300);
			break;

		case NS_CONN_RQ :

			if (is_ie_i (CODESET_0, CHAN_ID) == PRESENT) {
				Call_chan_id_sel = I_(chan_id, chan_sel);

			} else {

				Call_chan_id_sel = ANY_CHAN;
			}

			Call_bc_trf_cap = I_(bc, trf_cap); /* BC is mandatory and so present */
			Send_to_d_channel_and_save_spdu (SETUP);
			Set_state (STATE_CALL_INIT_1);
			N303 = 0;
			Start_timer_ns (AT4_T303);
			break;

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

			/*
			 * State #6 does not exist, so the possible events in
			 * response to the NS_CONN_IN are processed here.
			 */

		case NS_ALERT_RQ :
			Stop_timer_ns (AT4_T300);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (AT4_T300);
			Start_timer_ns (AT4_T313);
			Send_to_d_channel (CONN);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_CALL_PROC_RQ :
			Stop_timer_ns (AT4_T300);

				/* this message shall include a CHAN_ID with Exclusive
					B channel indicated */

			Send_to_d_channel (CALL_PROC);
			Set_state (STATE_INCOMING_CALL_PROC_9);
			break;

		case NS_PROGRESS_RQ :
			Stop_timer_ns (AT4_T300);
			Send_to_d_channel (PROGRESS);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case TI_300 :
			set_i_cause (C_C_INVALID_MESSAGE, C_V_INCOMPATIBLE_DESTINATION_88, P_NIL);
			Send_to_d_channel (REL_COMP);
			Reset_internal_ie ();
			set_i_cause (C_C_TIMER, C_V_T300, P_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

		default :
			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
				This state exists for an outgoing call, as a result of user
				action requesting call establishment from the network.
			*/

void at4_u1 ()
{
	switch (event_id) {

		case DA_CALL_PROC :
			Release_saved_spdu ();		/* saved setup no more useful */
			ns_action_to_cc (AT4_T303, AT4_T310, NS_CALL_PROC_IN,
												 STATE_OUTGOING_CALL_PROC_3);
			break;

		case TI_303 :

			if (++N303 < MX_N303) {
				Send_saved_spdu_to_d_channel (SETUP);
				Restart_timer_ns (AT4_T303);

			} else {

				set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, DIAGNOSTIC_NIL);
				Send_to_d_channel (REL_COMP);
				Reset_internal_ie ();
				set_i_cause (C_C_TIMER, C_V_T303, DIAGNOSTIC_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC_3 */

		/* Outgoing call proceeding state */

			/*
				This state exists for an outgoing call when the user
				has received acknowledgement that the network has received
				all call information necessary to effect call establishment.
			*/

void at4_u3 ()
{
	switch (event_id) {

		case DA_ALERT :
			Stop_timer_ns (AT4_T310);
			Send_to_call_control (NS_ALERT_IN);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Stop_timer_ns (AT4_T310);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_PROGRESS :
			Stop_timer_ns (AT4_T310);
			Send_to_call_control (NS_PROGRESS_IN);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case TI_310 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, P_NIL);
			ns_action_to_dl (T3_NIL, AT4_T305, DISC,
											   STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED_4 */

		/* Call delivered state */

			/*
				This state exists for an outgoing call when the calling user
				has received an indication that the remote user alerting has
				been initiated.
			*/

void at4_u4 ()
{
	switch (event_id) {

		case DA_CONN :
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);		/* optional */
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_ALERT :
			Send_to_call_control (NS_ALERT_IN);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED_7 */

		/* Call received state */

			/*
				This state exists for an incomming call when the user has
				indicated alerting but not yet answered.
			*/

void at4_u7 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			N313 = 0;
			Start_timer_ns (AT4_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST_8 */

		/* Connect request state */

			/*
				This state exists for an incoming call when the user
				has answered the call and is waiting to be awarded.
			*/

void at4_u8 ()
{
	switch (event_id) {

		case DA_CONN_ACK :
			Stop_timer_ns (AT4_T313);
			Send_to_call_control (NS_CONN_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_313 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "313");
			ns_action_to_dl (T3_NIL, AT4_T305, DISC,
											   STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROC_9 */

		/* Incoming call proceeding state */

			/*
				This state exists for an incoming call when the user has
				sent acknowlegdement that the user has received all call
				information necessary to effect call establishment.
			*/

void at4_u9 ()
{
	switch (event_id) {

		/* case DA_SETUP is managed in error_handler : SETUP ignored */

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Start_timer_ns (AT4_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE_10 */

		/* Active state */

			/*
				This state exists if an incoming call when the user has
				received an acknowledgement from the network that the user
				has been awarded the call. This state exists for an outgoing
				call when the user has received an indication that the remote
				user has answered the call.
			*/

void at4_u10 ()
{
	switch (event_id) {

#		if NS_T309 == ON

			case TI_309 :

				if (Na_T309_option == ON) {
					set_i_cause (C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_TEMPORARY_FAILURE_41, P_NIL);
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;
				}

#		endif

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST_11 */

		/* Disconnect request state */

			/*
				This state exists when the user has requested the network
				to clear the end-to-end connection (if any) and is waiting
				for a response.
			*/

void at4_u11 ()
{
	switch (event_id) {

		case NS_CLEAR_RS :
			break;

		case TI_305 :
		   set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, DIAGNOSTIC_NIL);
		   go_to_state_19 (AT4_T308);
		   break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION_12 */

		/* Disconnect indication state */

			/*
				This state exists when the user has received an invitation
				to disconnect because the network has disconnected the
				end-to-end connection (if any).
			*/

void at4_u12 ()
{
	switch (event_id) {

		case NS_CLEAR_RS :
			go_to_state_19 (AT4_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
				This state exists when the user has requested the network
				to release and is waiting for a response.
			*/

void at4_u19 ()
{
	switch (event_id) {

		case NS_CLEAR_RS :		/* ignored (collision) */
			break;

		case TI_308 :

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (AT4_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2


						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*        N          */
						/*-------------------*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             n0 to n19 - network side - implements the processing of an
							  event according to the call state.

Usage            void nxx (void);

Related
functions usage void Stop_timer_ns (uchar x_timer);

				void Start_timer_ns (uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void at4_n0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Call_bc_trf_cap		= I_(bc,		trf_cap);	/* BC is mandatory and so present */
			ns_action_to_cc (AT4_T300, T3_NIL, NS_CONN_IN,
											   STATE_NULL_0);
			break;

		case NS_CONN_RQ :
			N303 = 0;
			Call_bc_trf_cap		= I_(bc, trf_cap);	/* BC is mandatory and so present */
			Start_timer_ns (AT4_T303);
			Send_to_d_channel_and_save_spdu (SETUP);
			Call_ces_setup = Dl_ces;
			Set_state (STATE_CALL_PRESENT_6);
			break;

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

			/*
			 * State #1 does not exist, so the possible events in
			 * response to the NS_CONN_IN are processed here.
			 */

		case NS_CALL_PROC_RQ :
			ns_action_to_dl (AT4_T300, T3_NIL, CALL_PROC,
											   STATE_OUTGOING_CALL_PROC_3);
			break;


		case TI_300 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_PROTOCOL_ERROR_UNSPECIFIED_111, P_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			go_to_state_19 (AT4_T308);
			break;

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void at4_n3 ()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void at4_n4 ()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void at4_n6 ()
{

	switch (event_id) {

		case DA_CALL_PROC :
			Release_saved_spdu ();
			ns_action_to_cc (AT4_T303, AT4_T310, NS_CALL_PROC_IN,
												 STATE_INCOMING_CALL_PROC_9);
			break;

		case DA_PROGRESS :
			Release_saved_spdu ();
			ns_action_to_cc (AT4_T303, T3_NIL, NS_PROGRESS_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_ALERT :
			Release_saved_spdu ();
			ns_action_to_cc (AT4_T303, T3_NIL, NS_ALERT_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_CONN :
			Release_saved_spdu ();
			ns_action_to_cc (AT4_T303, AT4_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case TI_303 :

			if (++N303 != MX_N303) {
				Send_saved_spdu_to_d_channel (SETUP);
				Start_timer_ns (AT4_T303);

			} else {
				set_i_cause (C_C_NORMAL_EVENT, C_V_NO_USER_RESPONDING_18, P_NIL);
				Send_to_d_channel (REL_COMP);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		default :
			ns_unexpected_ev ();
			break;


	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void at4_n7 ()
{

	switch (event_id) {

		case DA_CONN :
			ns_action_to_cc (T3_NIL, AT4_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void at4_n8 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			ns_action_to_dl (AT4_T300, T3_NIL, CONN_ACK,
											   STATE_ACTIVE_10);
			break;

		case TI_300 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_PROTOCOL_ERROR_UNSPECIFIED_111, P_NIL);
			Save_cause ();									/* to send the RELEASE if T305 expire */
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, AT4_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROCEEDING */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void at4_n9 ()
{

	switch (event_id) {

		case DA_ALERT :
			ns_action_to_cc (AT4_T310, T3_NIL, NS_ALERT_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_CONN :
			ns_action_to_cc (AT4_T310, AT4_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case DA_PROGRESS :
			ns_action_to_cc (AT4_T310, T3_NIL, NS_PROGRESS_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case TI_310 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "310");
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, AT4_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void at4_n10 ()
{

	switch (event_id) {

		case DA_CONN_ACK :
			/* no process */
			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void at4_n11 ()
{

	switch (event_id) {

		case NS_CLEAR_RS :
			Stop_timer_ns (AT4_T300);
			go_to_state_19 (AT4_T308);
			break;

		case TI_300 :

			if (disc_cause_error () == NOK) {
				set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
			}

			go_to_state_19 (AT4_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void at4_n12 ()
{
	switch (event_id) {

		case TI_305 :
			go_to_state_19 (AT4_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void at4_n19 ()
{
	switch (event_id) {

		case TI_308 :

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (AT4_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		case NS_CLEAR_RS :

			break;		/* ignore */

		default :
			ns_unexpected_ev ();
			break;
	}
}

#endif

/*-------------------------------------------------------------------------*/

						/*----------------------*/
						/*                   	*/
						/*   D channel backup	*/
						/*						*/
						/*----------------------*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             at4_d_bkp_xxxx

Usage            void at4_d_bkp_xxxx (code);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

#	if NEW_FCT_STYLE == ON
		void 	at4_send_service_d_chan 	(nai_t line_nai, uchar ack);
#	else
		void 	at4_send_service_d_chan 	();
#	endif

#if NS_D_BACKUP == ON /* { */

/*-------------------------------------------------------------------------*/

void at4_d_bkp_oos_oos (code)
	code_t	code;
{
	struct nsna FAR *p_nsna_sav;
	struct nsdl FAR *p_nsdl_sav;

		/*
		 * When enterring this routine, p_nsna points to the CC Nai
		 * context.
		 */

	switch (code) {

		case TI_321 :

				/* Abnormal event */

			break;

		case DL_EST_CO :
		case DL_EST_IN :

				/* Stop T3_DL_EST */

			Stop_dl_timer (T3_DL_EST);

				/* Send a MAINT_SERVICE message */

			at4_send_service_d_chan (Nfas_nai_line, OFF);

				/*
				 * Start T321 on the Nai bearing
				 * the active D channel
				 */

			p_nsna_sav	= p_nsna;
			p_nsdl_sav	= p_nsdl;

			if (Nfas_nai_line == Nfas_nai_active_d_chan) {

				p_nsna	= Nfas_nai_p_active_d_chan;
				p_nsdl	= Nfas_dl_p_active_d_chan;

			} else {

				p_nsna	= Nfas_nai_p_backup_d_chan;
				p_nsdl	= Nfas_dl_p_backup_d_chan;
			}

			N321 = 0;
			Start_dl_timer (T321);
			Lc_state = LC_ESTABLISHED;

			p_nsna		= p_nsna_sav;
			p_nsdl		= p_nsdl_sav;

			if (Nfas_nai_line == Nfas_nai_active_d_chan) {
				Nfas_active_d_chan_status	= MAINT_STATE_WAIT;
				Nfas_backup_d_chan_status	= MAINT_STATE_MB;

			} else {

				Nfas_active_d_chan_status	= MAINT_STATE_OOS;
				Nfas_backup_d_chan_status	= MAINT_STATE_WAIT;
			}

			break;

		case DL_REL_IN :

				/* Establish layer 2 */

			Send_to_dl 	(DL_EST_RQ, DL_CES_SIG);/* send to DL_D */
			Lc_state 	= LC_AWAITING_EST; 		/* set state : awaiting establishment */
			Start_dl_timer (T3_DL_EST);
			break;

		case DL_COMMIT_CO :
			Send_to_dl (DL_REL_RQ, DL_CES_SIG);
			Lc_state = LC_AWAITING_REL;
			break;

		default :

				/* Ignore */

			break;

	}
}

/*-------------------------------------------------------------------------*/

void at4_d_bkp_is_stby (code)
	code_t	code;
{
	switch (code) {

		case DL_REL_IN :

			if (Nfas_nai_line == Nfas_nai_active_d_chan) {

					/*
					 * We received a REL_IN on the Active D channel.
					 * Switch to the backup D channel.
					 */

				p_nsdl = Nfas_dl_p_backup_d_chan;
				p_nsna = Nfas_nai_p_backup_d_chan;

					/* Start T321 on Backup D channel */

				Start_dl_timer (T321);

					/*
					 * Start 309 (should be done in
					 * nfas_csc_dl_failure),
					 * Send a SERVICE message on the Backup D channel.
					 */


				at4_send_service_d_chan (Nfas_nai_backup_d_chan, OFF);

					/* Update the D channels states */

				Nfas_active_d_chan_status	= MAINT_STATE_MB;
				Nfas_backup_d_chan_status	= MAINT_STATE_WAIT;

			} else {

					/* Establish layer 2 for the Backup D channel */

				p_nsna	= Nfas_nai_p_backup_d_chan;
				p_nsdl	= Nfas_dl_p_backup_d_chan;

					Send_to_dl 	(DL_EST_RQ, DL_CES_SIG);/* send to DL_D */
					Lc_state 	= LC_AWAITING_EST; 		/* set state : awaiting establishment */
					Start_dl_timer (T3_DL_EST);

				p_nsna	= Nfas_nai_p_active_d_chan;
				p_nsdl	= Nfas_dl_p_active_d_chan;

					/* Update the D channels states */

				Nfas_active_d_chan_status	= MAINT_STATE_IS;
				Nfas_backup_d_chan_status	= MAINT_STATE_OOS;
			}

			break;

		case DL_DA_IN :

			if (*p_spdu == PROTOCOL_DISCRIMINATOR_I451) {
				break;
			}

			switch (p_spdu[I_call_ref_lgth+2]) {

				case MAINT_SERVICE :

					protocol_discr = PROTOCOL_DISCR_MAINT_NATIONAL;

					if (Nfas_nai_line == Nfas_nai_active_d_chan) {

							/* Send back a SERVICE_ACK */

						at4_send_service_d_chan (Nfas_nai_active_d_chan, ON);

					}

					break;

				case MAINT_SERVICE_ACK :

					break;
			}

			break;
	}
}

/*-------------------------------------------------------------------------*/

void at4_d_bkp_mb_wait (code)
	code_t	code;
{
	switch (code) {

		case DL_DA_IN :

			if (*p_spdu == PROTOCOL_DISCRIMINATOR_I451) {
				break;
			}


			if (Nfas_nai_line != Nfas_nai_backup_d_chan) {

					/* Ignore */

				return;
			}


			switch (p_spdu[I_call_ref_lgth+2]) {

				case MAINT_SERVICE :

					protocol_discr = PROTOCOL_DISCR_MAINT_NATIONAL;

						/* Send back a SERVICE_ACK */

					at4_send_service_d_chan (Nfas_nai_active_d_chan, ON);

						/* Process as for MAINT_SERV_ACK */

				case MAINT_SERVICE_ACK :

						/*
						 * The previous Backup D channel
						 * becomes the new Active one.
						 */

					Nfas_nai_p_backup_d_chan = Nfas_nai_p_active_d_chan;
					Nfas_dl_p_backup_d_chan  = Nfas_dl_p_active_d_chan;
					Nfas_nai_p_active_d_chan = p_nsna;
					Nfas_dl_p_active_d_chan	 = p_nsdl;
					Nfas_nai_backup_d_chan	 = Nfas_nai_active_d_chan;
					Nfas_nai_active_d_chan	 = Nai;

						/* Establish layer 2 for the Backup D channel */

					p_nsna	= Nfas_nai_p_backup_d_chan;
					p_nsdl	= Nfas_dl_p_backup_d_chan;

						Send_to_dl 	(DL_EST_RQ, DL_CES_SIG);/* send to DL_D */
						Lc_state 	= LC_AWAITING_EST; 		/* set state : awaiting establishment */
						Start_dl_timer (T3_DL_EST);

					p_nsna	= Nfas_nai_p_active_d_chan;
					p_nsdl	= Nfas_dl_p_active_d_chan;

						/*
						 * Stop T321 on the Nai bearing
						 * the active D channel
						 */

					Stop_dl_timer (T321);

						/* Stop Timer 309 */

					ns_nfas_stop_309 ();

						/* Update the D channels states */

					Nfas_active_d_chan_status	= MAINT_STATE_IS;
					Nfas_backup_d_chan_status	= MAINT_STATE_OOS;

					break;
			}

			break;

		case DL_REL_IN :

			if (Nfas_nai_line != Nfas_nai_backup_d_chan) {

					/* Ignore */

				return;
			}

				/* Stop T321 */

			Stop_dl_timer (T321);

				/* Re-establish layer 2 for the active D channel */

			p_nsna = Nfas_nai_p_active_d_chan;
			p_nsdl = Nfas_dl_p_active_d_chan;

				/*
				 * It could already have been done in the csc_dl_failure ()
				 * routine. Don't do it twice ...
				 */

			if (Lc_state != LC_AWAITING_EST) {

					/* OK, let's do it */

				Send_to_dl (DL_EST_RQ, DL_CES_SIG);
				Lc_state = LC_AWAITING_EST;
				Start_dl_timer (T3_DL_EST);

			}

				/* Update the D channels states */

			Nfas_active_d_chan_status	= MAINT_STATE_OOS;
			Nfas_backup_d_chan_status	= MAINT_STATE_OOS;

			break;

		case TI_321 :

			p_nsdl = Nfas_dl_p_backup_d_chan;
			p_nsna = Nfas_nai_p_backup_d_chan;

				/* Disconnect layer 2 */

			Send_to_dl (DL_COMMIT_RQ, DL_CES_SIG);

				/* Establish layer 2 for the Active D channel */

			p_nsdl = Nfas_dl_p_active_d_chan;
			p_nsna = Nfas_nai_p_active_d_chan;

			if (Lc_state != LC_AWAITING_EST) {

					/* OK, let's do it */

				Send_to_dl (DL_EST_RQ, DL_CES_SIG);
				Lc_state = LC_AWAITING_EST;
				Start_dl_timer (T3_DL_EST);
			}

				/* Update the D channels states */

			Nfas_active_d_chan_status	= MAINT_STATE_OOS;
			Nfas_backup_d_chan_status	= MAINT_STATE_OOS;
			break;

   }
}

/*-------------------------------------------------------------------------*/

void at4_d_bkp_wait_mb (code)
	code_t	code;
{
	switch (code) {

		case DL_DA_IN :

			if (*p_spdu == PROTOCOL_DISCRIMINATOR_I451) {
				break;
			}

			if (Nfas_nai_line != Nfas_nai_active_d_chan) {

					/* Ignore */

				return;
			}

			switch (p_spdu[I_call_ref_lgth+2]) {

				case MAINT_SERVICE :

					protocol_discr = PROTOCOL_DISCR_MAINT_NATIONAL;

						/* Send back a SERVICE_ACK */

					at4_send_service_d_chan (Nfas_nai_active_d_chan, ON);

						/* Process as for MAINT_SERV_ACK */

				case MAINT_SERVICE_ACK :

						/* Establish layer 2 for the Backup D channel */

					p_nsna	= Nfas_nai_p_backup_d_chan;
					p_nsdl	= Nfas_dl_p_backup_d_chan;

						Send_to_dl 	(DL_EST_RQ, DL_CES_SIG);/* send to DL_D */
						Lc_state 	= LC_AWAITING_EST; 		/* set state : awaiting establishment */
						Start_dl_timer (T3_DL_EST);

					p_nsna	= Nfas_nai_p_active_d_chan;
					p_nsdl	= Nfas_dl_p_active_d_chan;

						/*
						 * Stop T321 on the Nai bearing
						 * the active D channel
						 */

					Stop_dl_timer (T321);

						/* Stop Timer 309 */

					ns_nfas_stop_309 ();

						/* Update the D channels states */

					Nfas_active_d_chan_status	= MAINT_STATE_IS;
					Nfas_backup_d_chan_status	= MAINT_STATE_OOS;

					break;
			}

			break;

		case DL_REL_IN :

				/* Stop T321 */

			Stop_dl_timer (T321);

				/* Establish layer 2 for the backup D channel */

			p_nsdl = Nfas_dl_p_backup_d_chan;
			p_nsna = Nfas_nai_p_backup_d_chan;

			if (Lc_state != LC_AWAITING_EST) {

					/* OK, let's do it */

				Send_to_dl (DL_EST_RQ, DL_CES_SIG);
				Lc_state = LC_AWAITING_EST;
				Start_dl_timer (T3_DL_EST);

			}

				/* Update the D channels states */

			Nfas_active_d_chan_status	= MAINT_STATE_OOS;
			Nfas_backup_d_chan_status	= MAINT_STATE_OOS;
			break;


		case TI_321 :

				/* Disconnect layer 2 */

			Send_to_dl (DL_COMMIT_RQ, DL_CES_SIG);

				/* Establish layer 2 for the backup D channel */

			p_nsdl = Nfas_dl_p_backup_d_chan;
			p_nsna = Nfas_nai_p_backup_d_chan;

			if (Lc_state != LC_AWAITING_EST) {

					/* OK, let's do it */

				Send_to_dl (DL_EST_RQ, DL_CES_SIG);
				Lc_state = LC_AWAITING_EST;
				Start_dl_timer (T3_DL_EST);
			}

				/* Update the D channels states */

			Nfas_active_d_chan_status	= MAINT_STATE_OOS;
			Nfas_backup_d_chan_status	= MAINT_STATE_OOS;
			break;

		default :

				/* Ignore */

			break;

	}
}

/*-------------------------------------------------------------------------*/

void at4_d_bkp_is_oos (code)
	code_t	code;
{

	switch (code) {

		case DL_EST_IN :

				/*
				 * Warning !
				 * The diagrams show a layer 2 protocol inconsistancy.
				 * When in the LC_AWAITING_EST state,
				 * the diagrams allows a DL_EST_IN.
				 * That should not happen.
				 */

				/* Stop T3_DL_EST */

			Stop_dl_timer (T3_DL_EST);

			if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

				if (Lc_state ==  LC_AWAITING_EST) {

					Lc_state = LC_ESTABLISHED;
				}

					/* Update the D channel states */

				Nfas_active_d_chan_status	= MAINT_STATE_IS;
				Nfas_backup_d_chan_status	= MAINT_STATE_STBY;
			}

			break;

		case DL_EST_CO :

			if (Nfas_nai_line == Nfas_nai_backup_d_chan) {

					/* Stop T3_DL_EST */

				Stop_dl_timer (T3_DL_EST);

					/* Update the D channel states */

				Nfas_active_d_chan_status	= MAINT_STATE_IS;
				Nfas_backup_d_chan_status	= MAINT_STATE_STBY;

			}
			break;

		case DL_REL_IN :

			if (Nfas_nai_line == Nfas_nai_active_d_chan) {


					/* Re-establish layer 2 for the active D channel */

				p_nsdl = Nfas_dl_p_active_d_chan;

					/*
					 * It could already have been done in the csc_dl_failure ()
					 * routine. Don't do it twice ...
					 */

				if (Lc_state != LC_AWAITING_EST) {

						/* OK, let's do it */

					Send_to_dl (DL_EST_RQ, DL_CES_SIG);
					Lc_state = LC_AWAITING_EST;
					Start_dl_timer (T3_DL_EST);

				}

					/* Update the D channels states */

				Nfas_active_d_chan_status	= MAINT_STATE_OOS;
				Nfas_backup_d_chan_status	= MAINT_STATE_OOS;


			} else {

					/* Establish Backup D channel */


				p_nsna = Nfas_nai_p_backup_d_chan;
				p_nsdl = Nfas_dl_p_backup_d_chan;

				if (Lc_state != LC_AWAITING_EST) {

						/* OK, let's do it */

					Send_to_dl (DL_EST_RQ, DL_CES_SIG);
					Lc_state = LC_AWAITING_EST;
					Start_dl_timer (T3_DL_EST);

				}
					/* Update the D channels states () */

				Nfas_active_d_chan_status	= MAINT_STATE_IS;
				Nfas_backup_d_chan_status	= MAINT_STATE_OOS;
			}

			break;

		case DL_REL_CO :
			break;

		case DL_DA_IN :

			if (*p_spdu == PROTOCOL_DISCRIMINATOR_I451) {
				break;
			}

				/*
				 * Process only if the message is sent on the
				 * Active D channel.
				 */

			if (Nfas_nai_line == Nfas_nai_backup_d_chan) return;

			switch (p_spdu[I_call_ref_lgth+2]) {

				case MAINT_SERVICE :

					protocol_discr = PROTOCOL_DISCR_MAINT_NATIONAL;

						/* Send back a SERVICE_ACK */

					at4_send_service_d_chan (Nfas_nai_active_d_chan, ON);

						/* Process as for MAINT_SERVICE_ACK */

				case MAINT_SERVICE_ACK :
					break;
			}

			break;

		case TI_321 :
		case TI_309 :

				/* Unexpected events */

			break;

	}
}

/*-------------------------------------------------------------------------*/

void at4_d_bkp_oos_wait (code)
	code_t	code;
{

	switch (code) {

		case DL_DA_IN :

			if (*p_spdu == PROTOCOL_DISCRIMINATOR_I451) {
				break;
			}

			if (Nfas_nai_line == Nfas_nai_active_d_chan) {

					/* Ignore */

				return;
			}

			switch (p_spdu[I_call_ref_lgth+2]) {

				case MAINT_SERVICE :

					protocol_discr = PROTOCOL_DISCR_MAINT_NATIONAL;

						/* Send back a SERVICE_ACK */

					at4_send_service_d_chan (Nfas_nai_active_d_chan, ON);

						/* Process as for MAINT_SERV_ACK */

				case MAINT_SERVICE_ACK :

						/*
						 * Switch Active / Passive Nai.
						 * p_nsna currently points to the Backup Nai.
						 */

					Nfas_nai_p_backup_d_chan	= Nfas_nai_p_active_d_chan;
					Nfas_dl_p_backup_d_chan		= Nfas_dl_p_active_d_chan;
					Nfas_nai_p_active_d_chan	= p_nsna;
					Nfas_dl_p_active_d_chan		= p_nsdl;

					Nfas_nai_active_d_chan		= Nai;

							/* Establish layer 2 for the new Backup D channel */

					p_nsna	= Nfas_nai_p_backup_d_chan;
					p_nsdl	= Nfas_dl_p_backup_d_chan;
					Nfas_nai_backup_d_chan		= Nai;

						Send_to_dl 	(DL_EST_RQ, DL_CES_SIG);/* send to DL_D */
						Lc_state 	= LC_AWAITING_EST; 		/* set state : awaiting establishment */
						Start_dl_timer (T3_DL_EST);

					p_nsna	= Nfas_nai_p_active_d_chan;
					p_nsdl	= Nfas_dl_p_active_d_chan;

						/*
						 * Stop T321 on the Nai bearing
						 * the active D channel
						 */

					Stop_dl_timer (T321);

						/* Stop Timer 309 */

					ns_nfas_stop_309 ();

						/* Update the D channels states */

					Nfas_active_d_chan_status	= MAINT_STATE_IS;
					Nfas_backup_d_chan_status	= MAINT_STATE_OOS;

					break;
			}

			break;

		case DL_REL_IN :
			Nfas_active_d_chan_status	= MAINT_STATE_OOS;
			Nfas_backup_d_chan_status	= MAINT_STATE_OOS;
			break;


		case DL_EST_IN :
		case DL_EST_CO :

			if (Nfas_nai_line == Nfas_nai_active_d_chan) {

					/* Stop T3_DL_EST */

				Stop_dl_timer (T3_DL_EST);

					/* Send a MAINT_SERVICE message */

				at4_send_service_d_chan (Nfas_nai_active_d_chan, OFF);

					/* Start 321 */

				Start_dl_timer (T321);

					/* Disconnect layer 2 */

				p_nsdl = Nfas_dl_p_backup_d_chan;
				p_nsna = Nfas_nai_p_backup_d_chan;

				Send_to_dl (DL_COMMIT_RQ, DL_CES_SIG);

					/* Update the D channels states */

				Nfas_active_d_chan_status	= MAINT_STATE_WAIT;
				Nfas_backup_d_chan_status	= MAINT_STATE_MB;

			}

			break;


		case TI_321 :

				/* Disconnect layer 2 */

			Send_to_dl (DL_COMMIT_RQ, DL_CES_SIG);

				/* Update the D channels states */

			Nfas_active_d_chan_status	= MAINT_STATE_OOS;
			Nfas_backup_d_chan_status	= MAINT_STATE_OOS;
			break;

		default :

				/* Ignore */

			break;

	}
}

#endif /* } NS_D_BACKUP */

/*-------------------------------------------------------------------------*/

#if NS_D_BACKUP /* { */

void at4_send_service_d_chan (line_nai, ack)
	nai_t line_nai;
	uchar ack;
{
	uchar FAR *p_data;

		/* The SERVICE/ACK is used for the D channel only. */

	if (ack == ON) {


			/*
			 * Send the SERVICE_ACK message.
			 */

		Send_to_d_channel_proto	(MAINT_SERVICE_ACK, PROTOCOL_DISCR_MAINTENANCE);
		return;

	}

		/* Allocate a buffer */

	Buffer_alloc_reused;

		/* Initialize the buffer header */

	Buffer_data_offset	+= DL_MX_FRAME_HEADER;

		/* Set the SPDU pointer */

	p_data = Buffer_a_start_data;

	*p_data++ = PROTOCOL_DISCR_MAINTENANCE;

	*p_data++ = 1;					/* Call ref length */
	*p_data++ = 0;                  /* Call ref is GLOBAL */
	*p_data++ = MAINT_SERVICE;      /* spdu type */

	*p_data++ = CHANGE_STATUS;
	*p_data++ = 1;					/* length */
	*p_data++ = 0xC0;				/* D channel in service */

	*p_data++ = CHAN_ID;
	*p_data++ = 1;					/* length */
	*p_data++ = 0xAC;				/* No channel is included */

	Buffer_data_size = (ushort)(p_data - Buffer_a_start_data);

		/*
		   Allocate a message.
		   Transfer data information into the message if possible
		   and release the buffer;
		   If not possible link the buffer to the message.
		*/

	p_snd_msg = Msg_or_buffer (p_buffer, DL_MX_FRAME_HEADER);

	p_buffer  = S_msg_p_buffer;

		/* Init the message header with the address information */

	S_msg_from 		= ENT_NS;				/* from NS entity */
	S_msg_to 		= ENT_DL_D;				/* to Data Link LAPD entity */
	S_msg_nai 		= line_nai;				/* DL NA ID */
	S_msg_sapi 		= DL_SAPI_SIG;			/* SAP ID Signalling */
	S_msg_ces 		= DL_CES_SIG;			/* CES */

		/* Load the primitive code */

	S_msg_code 		= DL_DA_RQ;				/* primitive code */

	Send_message (p_snd_msg), p_snd_msg = P_NIL, p_buffer  = P_NIL;

}

#endif /* } */


/*-------------------------------------------------------------------------*/

						/*--------------------------*/
						/*		 B channel			*/
						/*                   		*/
						/*   Maintenance procedures	*/
						/*							*/
						/*--------------------------*/

#if NEW_FCT_STYLE == ON

	uchar	at4_audit 				(nai_t int_id, uchar b_chan);
	void	at4_b_is 				(nai_t int_id, uchar b_chan, uchar action);
	void	at4_b_is_ack 			(nai_t int_id, uchar b_chan);
	void	at4_b_maint_ne_fe 		(nai_t int_id, uchar b_chan, uchar action);
	void	at4_b_maint_ne_ack 		(nai_t int_id, uchar b_chan);
	void	at4_b_os_ne_fe 			(nai_t int_id, uchar b_chan, uchar action);
	void	at4_b_oos_ne_ack		(nai_t int_id, uchar b_chan);
	void	at4_b_undef 			(nai_t int_id);

#else

	uchar	at4_audit 				();
	void	at4_b_is 				();
	void	at4_b_is_ack 			();
	void	at4_b_maint_ne_fe 		();
	void	at4_b_maint_ne_ack 		();
	void	at4_b_os_ne_fe 			();
	void	at4_b_oos_ne_ack		();
	void	at4_b_undef 			();

#	endif

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

void at4_b_is (int_id, b_chan, action)
	nai_t int_id;
	uchar b_chan;
	uchar action;
{

	uchar send_service_co;

	send_service_co = ON;

	switch (event_id) {

		case MNS_SERVICE_RQ :

			if (action == MAINT_ACTION_AUDIT) {
				at4_audit (int_id, b_chan);
				return;
			}

				/* Update the B channel state */

			if (I_(change_status, status) != CHANNEL_IN_SERVICE) {


					/*
					 * Send a MAINT_SERVICE.
					 * The primitive comes from CC, so we have to
					 * select the Active D channel, unless we are
					 * using the TSP mode without D channel Backup.
					 */

				if (ns_nfas == ON) {
					p_nsna = Nfas_nai_p_active_d_chan;
					p_nsdl = Nfas_dl_p_active_d_chan;
				}

				Start_dl_timer (AT4_T3M1);
				Send_to_d_channel_proto (MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);

				if (I_(change_status, status) == CHANNEL_MAINTENANCE) {

					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_MAINT_NE_ACK;

				} else {

					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_NE_ACK;
				}

			}

			break;

		case DA_MAINT_SERVICE :

				/* Update the B channel state */

			switch (I_(change_status, status)) {

				case CHANNEL_IN_SERVICE :
					send_service_co = OFF;
					break;

				case CHANNEL_MAINTENANCE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_MAINT_FE;
					break;

				case CHANNEL_OUT_OF_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_FE;
					break;

			}

			if (send_service_co == ON) {

					/* Send a NS_SERVICE_CO to the application */

				Set_call_ref_nil ();
				Send_to_call_control (NS_SERVICE_CO);
				ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);
			}

			if (ns_nfas == ON) {
				p_nsna = Nfas_nai_p_active_d_chan;
				p_nsdl = Nfas_dl_p_active_d_chan;
			}

				/* Send back a SERVICE_ACK */

			I_call_ref_lgth = 1;
			Send_to_d_channel_proto (MAINT_SERVICE_ACK, PROTOCOL_DISCR_MAINTENANCE);
			break;
	}

}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

void at4_b_is_ack (int_id, b_chan)
	nai_t int_id;
	uchar b_chan;
{

	switch (event_id) {

		case DA_MAINT_SERVICE_ACK :

				/* Only 1 B channel is impacted */

			if (Dl_b_chan_maint_nb (int_id) > 0) {
				Dl_b_chan_maint_nb (int_id)--;
			}

			if (Dl_b_chan_maint_nb (int_id) == 0) {

					/* Start DL timer T3M1 */

				Stop_dl_timer (AT4_T3M1);
			}

				/* Update the B channel state */

			switch (I_(change_status, status)) {

				case CHANNEL_IN_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_IS;
					break;

				case CHANNEL_MAINTENANCE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_MAINT_FE;
					break;

				case CHANNEL_OUT_OF_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_FE;
					break;

			}

				/* Send a NS_SERVICE_CO to the application */

			Set_call_ref_nil ();
			Send_to_call_control (NS_SERVICE_CO);
			ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);
			break;

	}

}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

void at4_b_maint_ne_fe (int_id, b_chan, action)
	nai_t int_id;
	uchar b_chan;
	uchar action;
{

	switch (event_id) {

		case DA_MAINT_SERVICE :

				/* Update the B channel state */

			switch (I_(change_status, status)) {

				case CHANNEL_MAINTENANCE :

					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_MAINT_FE;
					I_(change_status, status) 			= CHANNEL_MAINTENANCE;

						/* Send a NS_SERVICE_CO */

					Set_call_ref_nil ();
					Send_to_call_control (NS_SERVICE_CO);
					ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);

					if (ns_nfas == ON) {
						p_nsna = Nfas_nai_p_active_d_chan;
						p_nsdl = Nfas_dl_p_active_d_chan;
					}
						/* Send back a SERVICE_ACK (MAINT) */

					I_call_ref_lgth = 1;
					Send_to_d_channel_proto (MAINT_SERVICE_ACK, PROTOCOL_DISCR_MAINTENANCE);

					break;

				case CHANNEL_OUT_OF_SERVICE :

					I_(change_status, status) = CHANNEL_OUT_OF_SERVICE;

					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_FE;
					I_(change_status, status) 			= CHANNEL_OUT_OF_SERVICE;

						/* Send a NS_SERVICE_CO */

					Set_call_ref_nil ();
					Send_to_call_control (NS_SERVICE_CO);
					ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);
					if (ns_nfas == ON) {
						p_nsna = Nfas_nai_p_active_d_chan;
						p_nsdl = Nfas_dl_p_active_d_chan;
					}
						/* Send back a SERVICE_ACK (OOS) */

					I_call_ref_lgth = 1;
					Send_to_d_channel_proto (MAINT_SERVICE_ACK, PROTOCOL_DISCR_MAINTENANCE);

					break;

				case CHANNEL_IN_SERVICE :

					I_(change_status, status) = CHANNEL_IN_SERVICE;

						/*
						 * Send a NS_SERVICE_CO.
						 */

					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_IS;
					Set_call_ref_nil ();
					Send_to_call_control (NS_SERVICE_CO);
					ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);

					if (ns_nfas == ON) {
						p_nsna = Nfas_nai_p_active_d_chan;
						p_nsdl = Nfas_dl_p_active_d_chan;
					}
						/* Send back a SERVICE_ACK (IS) */

					I_call_ref_lgth = 1;
					Send_to_d_channel_proto (MAINT_SERVICE_ACK, PROTOCOL_DISCR_MAINTENANCE);
					break;

			}


			break;

		case MNS_SERVICE_RQ :

			if (action == MAINT_ACTION_AUDIT) {

				if (Dl_b_chan_mode_int (int_id, b_chan) == MAINT_STATE_B_IS_MAINT_NE) {

						/* Restart 3M1 */

					Start_dl_timer (AT4_T3M1);

						/* Send SERVICE (MAINT) */

					I_(change_status, status) 		= CHANNEL_MAINTENANCE;
					I_(change_status, preference) 	= PREF_B_CHANNEL;

					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_MAINT_NE_ACK;
					set_ie_i (CODESET_0, CHANGE_STATUS);

					if (ns_nfas == ON) {
						p_nsna = Nfas_nai_p_active_d_chan;
						p_nsdl = Nfas_dl_p_active_d_chan;
					}

					Send_to_d_channel_proto (MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);
					return;
				}

					I_(change_status, status) 		= CHANNEL_IN_SERVICE;
					I_(change_status, preference) 	= PREF_B_CHANNEL;

					/* Do as below */

			}

				/* Update the B channel state */

			switch (I_(change_status, status)) {

				case CHANNEL_IN_SERVICE :

						/*
						 * Send a MAINT_SERVICE.
						 * The primitive comes from MNS, so we have to
						 * select the Active D channel, unless we are
						 * using the TSP mode without D channel Backup.
						 */

					if (ns_nfas == ON) {
						p_nsna = Nfas_nai_p_active_d_chan;
						p_nsdl = Nfas_dl_p_active_d_chan;
					}

						/* Start 3M1 */

					Start_dl_timer (AT4_T3M1);
					Send_to_d_channel_proto (MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);
					break;

			}

			break;

		case DA_MAINT_SERVICE_ACK :

				/* Only 1 B channel is impacted */

			if (Dl_b_chan_maint_nb (int_id) > 0) {
				Dl_b_chan_maint_nb (int_id)--;
			}

				/* Update the B channel state */

			switch (I_(change_status, status)) {

				case CHANNEL_IN_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_IS;
					break;

				case CHANNEL_MAINTENANCE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_MAINT_FE;
					break;

				case CHANNEL_OUT_OF_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_FE;
					break;
			}

				/* Send a NS_SERVICE_CO to the application */

			Set_call_ref_nil ();
			Send_to_call_control (NS_SERVICE_CO);
			ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);
			break;

	}
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

void at4_b_maint_ne_ack (int_id, b_chan)
	nai_t int_id;
	uchar b_chan;
{

	switch (event_id) {

		case DA_MAINT_SERVICE_ACK :

				/* Only 1 B channel is impacted */

			if (Dl_b_chan_maint_nb (int_id) > 0) {
				Dl_b_chan_maint_nb (int_id)--;
			}

				/*
				 * Stop T3M1 only if all B channels have been
				 * processed.
				 */

			if (Dl_b_chan_maint_nb (int_id) == 0) {

					/* Stop DL timer T3M1 */

				Stop_dl_timer (AT4_T3M1);
			}

				/* Update the B channel state */

			switch (I_(change_status, status)) {

				case CHANNEL_MAINTENANCE :
				case CHANNEL_IN_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_IS_MAINT_NE;
					break;

				case CHANNEL_OUT_OF_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_FE;
					break;
			}

					/* Send a NS_SERVICE_CO to the application */

			Set_call_ref_nil ();
			Send_to_call_control (NS_SERVICE_CO);
			ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);
			break;

	}
}


/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

void at4_b_os_ne_fe (int_id, b_chan, action)
	nai_t int_id;
	uchar b_chan;
	uchar action;
{

		/* Out of service Near/Far End state */

	switch (event_id) {

		case MNS_SERVICE_RQ :

			if (action == MAINT_ACTION_AUDIT) {

				if (Dl_b_chan_mode_int (int_id, b_chan) == MAINT_STATE_B_OOS_NE) {

						/* Restart 3M1 */

					Start_dl_timer (AT4_T3M1);

						/* Send SERVICE (OOS) */

					I_(change_status, status) 		= CHANNEL_OUT_OF_SERVICE;
					I_(change_status, preference) 	= PREF_B_CHANNEL;

					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_NE_ACK;

					if (ns_nfas == ON) {
						p_nsna = Nfas_nai_p_active_d_chan;
						p_nsdl = Nfas_dl_p_active_d_chan;
					}
					set_ie_i (CODESET_0, CHANGE_STATUS);
					Send_to_d_channel_proto (MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);

					return;
				}

					/* else : do as below */

			}

				/* Only 1 B channel is impacted */

			Dl_b_chan_maint_nb (int_id)++;

			if (State_dl_timer (AT4_T3M1) == OFF) {

					/*
					 * Only 1 timer 3M1 per D channel ...
					 * So only 1 T3M1 for all the interfaces
					 * managed by the D channel
					 */


					/* Start DL timer T3M1 */

				Start_dl_timer (AT4_T3M1);
			}

				/* Record the type of action being made */

			Dl_maint_action (int_id) = MAINT_ACTION_SERVICE_SENT;
			Dl_serv_last_value (int_id)	 = I_(change_status, status);

				/*
				 * Send a MAINT_SERVICE.
				 * The primitive comes from CC, so we have to
				 * select the Active D channel, unless we are
				 * using the TSP mode without D channel Backup.
				 */

			if (ns_nfas == ON) {
				p_nsna = Nfas_nai_p_active_d_chan;
				p_nsdl = Nfas_dl_p_active_d_chan;
			}

			Start_dl_timer (AT4_T3M1);
			Send_to_d_channel_proto (MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);
			break;

		case DA_MAINT_SERVICE :

				/* Only 1 B channel is impacted */

			if (Dl_b_chan_maint_nb (int_id) > 0) {
				Dl_b_chan_maint_nb (int_id)--;
			}

				/* Update the B channel state */

			switch (I_(change_status, status)) {

				case CHANNEL_IN_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_IS;
					break;

				case CHANNEL_MAINTENANCE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_MAINT_FE;
					break;

				case CHANNEL_OUT_OF_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_FE;
					break;
			}

				/* Send a NS_SERVICE_CO to the application */

			Set_call_ref_nil ();
			Send_to_call_control (NS_SERVICE_CO);
			ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);

			if (ns_nfas == ON) {
				p_nsna = Nfas_nai_p_active_d_chan;
				p_nsdl = Nfas_dl_p_active_d_chan;
			}

				/* Send back a SERVICE_ACK */

			I_call_ref_lgth = 1;
			Send_to_d_channel_proto (MAINT_SERVICE_ACK, PROTOCOL_DISCR_MAINTENANCE);
			break;

		case DA_MAINT_SERVICE_ACK :

				/* Only 1 B channel is impacted */

			if (Dl_b_chan_maint_nb (int_id) > 0) {
				Dl_b_chan_maint_nb (int_id)--;
			}

			if (Dl_b_chan_maint_nb (int_id) == 0) {
				Stop_dl_timer (AT4_T3M1);
			}

				/* Update the B channel state */

			switch (I_(change_status, status)) {

				case CHANNEL_IN_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_IS;
					break;

				case CHANNEL_MAINTENANCE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_MAINT_FE;
					break;

				case CHANNEL_OUT_OF_SERVICE :
					Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_FE;
					break;
			}

				/* Send a NS_SERVICE_CO to the application */

			Set_call_ref_nil ();
			Send_to_call_control (NS_SERVICE_CO);
			ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);
			break;

	}

}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

void at4_b_oos_ne_ack (int_id, b_chan)
	nai_t int_id;
	uchar b_chan;
{

		/* Out of service Near End waiting for Acknowledge state */

	switch (event_id) {

		case DA_MAINT_SERVICE_ACK :

				/* Only 1 B channel is impacted */

			if (Dl_b_chan_maint_nb (int_id) > 0) {
				Dl_b_chan_maint_nb (int_id)--;
			}

				/* Update the B channel state */

			Dl_b_chan_mode_int (int_id, b_chan) = MAINT_STATE_B_OOS_NE;

				/*
				 * Stop T3M1 only if all B channels have been
				 * processed.
				 */

			if (Dl_b_chan_maint_nb (int_id) == 0) {

					/* Stop DL timer T3M1 */

				Stop_dl_timer (AT4_T3M1);
			}

				/* Send a NS_SERVICE_CO to the application */

			Set_call_ref_nil ();
			Send_to_call_control (NS_SERVICE_CO);
			ns_send_mns_service (OK,int_id, *I_chan_id_a_chan_number);
			break;

	}

}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

void at4_b_undef (int_id)
	nai_t int_id;
{

	uchar i, j, b_chan, state, b_chan_max;

		/*
		 * This routine is called when an entire
		 * interface is impacted.
		 */

	b_chan_max = NS_MX_B_CHAN_T1 - 1;

#	if NS_D_BACKUP == ON

		if ((ns_nfas == ON) && (Nfas_nai_d_chan_backup_act == ON)) {

			if ((int_id != Nfas_nai_active_d_chan) && (int_id != Nfas_nai_backup_d_chan)) {

				b_chan_max = NS_MX_B_CHAN_T1;
			}
		}

#	endif

	switch (event_id) {

		case TI_3M1 :

			switch (Dl_maint_action (int_id)) {

				default :
				case MAINT_ACTION_SERVICE_SENT :

						/* Prepare a channel Id for CC */

					I_chan_id_d_chan			= NOT_D_CHAN;		/* B-Channel indicated */
					I_chan_id_pref_excl			= CHAN_EXCL;		/* Exclusive */
					I_chan_id_int_type			= INT_TYPE_PRI;     /* PRI line */
					I_chan_id_chan_sel			= AS_INDICATED;		/* Channel Number as indicated in following octets */
					I_chan_id_chan_type			= B_CHAN;			/* Channel Number as indicated in following octets */
					I_chan_id_nb_map			= CHAN_NUMBER;		/* Format of following octets = simply the B-Channel number */
					I_chan_id_chan_number_lgth	= 0;				/* 1 Channel number yet */
					I_(chan_id, int_id) 		= INT_ID_EXPLICIT;	/* Interface Id is explicit */
					I_(chan_id, int_id_val)		= int_id;			/* Interface Id value */
					I_chan_id_a_chan_number 	= p_ind_buffer;		/* save data into indirect buffer */

					j = 0;

					for (i = 0; i < b_chan_max; i++) {

						b_chan = (i+1);

						switch (Dl_b_chan_mode_int (int_id, b_chan)) {

							case MAINT_STATE_B_IS_ACK :
							case MAINT_STATE_B_IS_MAINT_NE :
							case MAINT_STATE_B_MAINT_FE :
								I_chan_id_a_chan_number[j++]	= b_chan;			/* B channel */
								I_chan_id_chan_number_lgth++;
								state = CHANNEL_IN_SERVICE;
								break;

							case MAINT_STATE_B_MAINT_NE_ACK :
								I_chan_id_a_chan_number[j++] 	= b_chan;			/* B channel */
								I_chan_id_chan_number_lgth++;
								state = CHANNEL_MAINTENANCE;
								break;

							case MAINT_STATE_B_OOS_NE :
							case MAINT_STATE_B_OOS_FE :
								I_chan_id_a_chan_number[j++] 	= b_chan;			/* B channel */
								I_chan_id_chan_number_lgth++;
								state = Dl_serv_last_value (int_id);
								break;

							case MAINT_STATE_B_OOS_NE_ACK :
								I_chan_id_a_chan_number[j++] 	= b_chan;			/* B channel */
								I_chan_id_chan_number_lgth++;
								state = CHANNEL_OUT_OF_SERVICE;
								break;

							default :

									/* No Timer event is expected */

								continue;

						} /* Switch */

						Start_dl_timer (AT4_T3M1);

						if (I_chan_id_chan_number_lgth != 0) {

								/* Update p_ind_buffer */

							p_ind_buffer += I_chan_id_chan_number_lgth;

								/* At least, 1 B channel is not IS */

							set_ie_i (CODESET_0, CHAN_ID);

							I_(change_status, status) 		= state;
							I_(change_status, preference) 	= PREF_B_CHANNEL;

							set_ie_i (CODESET_0, CHANGE_STATUS);
							Send_to_d_channel_proto (MAINT_SERVICE, PROTOCOL_DISCR_MAINTENANCE);
						}

					}

					break;
			}

			break;

		case MNS_SERVICE_RQ :

				/* The entire interface is impacted */

			Dl_b_chan_maint_nb (int_id) = b_chan_max;

				/* Prepare a channel Id for DL */

			I_chan_id_d_chan			= NOT_D_CHAN;		/* B-Channel indicated */
			I_chan_id_pref_excl			= CHAN_EXCL;		/* Exclusive */
			I_chan_id_int_type			= INT_TYPE_PRI;     /* PRI line */
			I_chan_id_chan_sel			= AS_INDICATED;		/* Channel Number as indicated in following octets */
			I_chan_id_chan_type			= B_CHAN;			/* B-Channel number */
			I_chan_id_nb_map			= CHAN_NUMBER;		/* Format of following octets = simply the B-Channel number */
			I_chan_id_chan_number_lgth	= 1;				/* 1 Channel number yet */
			I_(chan_id, int_id) 		= INT_ID_EXPLICIT;	/* Interface Id is explicit */
			I_(chan_id, int_id_val)		= int_id;			/* Interface Id value */
			I_chan_id_a_chan_number 	= p_ind_buffer++;	/* save data into indirect buffer */

			for (i = 0; i < b_chan_max; i++) {

				b_chan = (i+1);
				*I_chan_id_a_chan_number = b_chan;

				switch (Dl_b_chan_mode_int (int_id, b_chan)) {

					case MAINT_STATE_B_IS :
						at4_b_is (int_id, b_chan, I_MAINTENANCE);
						break;

					case MAINT_STATE_B_MAINT_FE :
					case MAINT_STATE_B_IS_MAINT_NE :
						at4_b_maint_ne_fe (int_id, b_chan, I_MAINTENANCE);
						break;

					case MAINT_STATE_B_OOS_FE :
					case MAINT_STATE_B_OOS_NE :
						at4_b_os_ne_fe (int_id, b_chan, I_MAINTENANCE);
						break;
				}

			}


				/* Record the type of action being made */

			Dl_maint_action (int_id) = MAINT_ACTION_SERVICE_SENT;

				/*
				 * Send a MAINT_SERVICE.
				 * The primitive comes from CC, so we have to
				 * select the Active D channel, unless we are
				 * using the TSP mode without D channel Backup.
				 */

			break;

		case DA_MAINT_SERVICE_ACK :

			Dl_b_chan_maint_nb (int_id) = 0;

				/* Update the B channels state */

			switch (I_(change_status, status)) {

				case CHANNEL_IN_SERVICE :
					state = MAINT_STATE_B_IS;
					break;

				case CHANNEL_MAINTENANCE :
					state = MAINT_STATE_B_MAINT_FE;
					break;

				case CHANNEL_OUT_OF_SERVICE :
					state = MAINT_STATE_B_OOS_FE;
					break;
			}

				/* Stop DL timer T3M1 */

			Stop_dl_timer (AT4_T3M1);

			for (i = 0; i < NS_MX_B_CHAN_T1; i++) {
				b_chan = (i+1);
				Dl_b_chan_mode_int (int_id, b_chan) = state;
			}

				/* Send a NS_SERVICE_CO to the application */

			Set_call_ref_nil ();
			Send_to_call_control (NS_SERVICE_CO);
			ns_send_mns_service (OK,int_id, 0);
			break;
	}
}

#endif /* } */

/*EOF*/
