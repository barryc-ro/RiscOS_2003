
/*--------------------------------------------------------------------------*
 *                      M O D U L E     H E A D E R
 *
 * filename - net_mac.at4
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


                /*
                    MACROs and DECLARATIONS used to access the Network
                    Signalling entity (NS) from the user Layer 4 Signalling
                    entity (L4S).
                */

/*-------------------------------------------------------------------------*/


            /*
                Isdn_init_at4_ctx_???? = initialization of the common context
                                     used by a primitive macro :

                    INPUT :
                        - pr     = primitive ID,
                        - p_off  = pointer to the offset area,

            */

#if NS_IE_TSP_OUT == ON
#	define Isdn_init_at4_ctx_rq_rs_tsp(pr, p_off, data_lg)	Isdn_init_ctx_rq_rs_tsp(Paste(at4_,pr), p_off, data_lg)
#endif

#define Isdn_init_at4_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(at4_,pr), p_off)
#define Isdn_init_at4_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define Get_ie_at4(pr,ie)                   Get_ie          (Paste(at4_,pr), Paste (at4_, ie))
#define Isdn_get_val_at4(pr,ie,fld)         Isdn_get_val    (Paste(at4_,pr), Paste (at4_, ie), fld)
#define Isdn_p_str_at4(pr,ie,fld)           Isdn_p_str      (Paste(at4_,pr), Paste (at4_, ie), fld)
#define Isdn_lgth_str_at4(pr,ie,fld)        Isdn_lgth_str   (Paste(at4_,pr), Paste (at4_, ie), fld)
#define Isdn_mx_lgth_str_at4(pr,ie,fld)     Isdn_mx_lgth_str(Paste(at4_,pr), Paste (at4_, ie), fld)
#define P_start_val_ns_at4(pr,ie)           P_start_val_ns  (Paste(at4_,pr), Paste (at4_, ie))
#define P_val_ns_at4(ie)                    P_val_ns        (Paste(at4_,ie))
#define Set_offset_at4(pr,ie)               Set_offset      (Paste(at4_,pr),Paste(at4_,ie))
#define Set_next_ie_at4(ie)                 Set_next_ie     (Paste(at4_,ie))
#define Set_val_at4(ie,fld,val)             Set_val         (Paste(at4_,ie), fld, val)
#define Set_str_at4(ie, lv, p_str, mx_sz)   Set_str         (Paste(at4_,ie), lv, p_str, mx_sz)
#define Set_mem_at4(ie, lv, p_mem, sz)      Set_mem         (Paste(at4_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_at4(pr,ie)	Set_to_next_ie_instance (Paste(at4_,pr), Paste (at4_, ie))
#define Get_remaining_ie_instance_nb_at4(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(at4_,pr), Paste (at4_, ie), p_ie)
#define	Set_val_nil_at4(ie)					Set_val_nil		(Paste(at4_,ie))

#if MESSAGE_HEADER_IE == ON
#   define Message_header_offset_at4    ns_offset_t at4_message_header;
#else
#   define Message_header_offset_at4
#endif


#define Set_ns_offset_tsp_at4(pr,ie)			Set_ns_offset_tsp	(Paste(at4_,pr),Paste(at4_,ie))
#define Set_mem_eob_at4(ie,lv,p_mem,sz)		Set_mem_eob		(Paste(at4_,ie), lv, p_mem, sz)

/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

        /**************************************************
		**   Each offset is a relative pointer on the    **
        **   data of an IE element                       **
        **************************************************/

/*====================  CALL  ESTABLISHMENT  MESSAGES   =====================*/

		/* NS_ALERT_IN */

struct off_ns_at4_te_alert_in {
	Message_header_offset_at4               /* message header parameters */
	ns_offset_t at4_chan_id;                /* channel ID */
	ns_offset_t at4_redir_nb;               /* redirecting number */
	ns_offset_t at4_uui;		            /* user to user information */
};

typedef struct off_ns_at4_te_alert_in       off_ns_at4_alert_rq;
typedef struct off_ns_at4_te_alert_in       off_ns_at4_alert_in;

		/* NS_CALL_PROC_IN */

struct off_ns_at4_te_call_proc_in {
	Message_header_offset_at4               /* message header parameters */
	ns_offset_t at4_chan_id;                /* channel ID */
};

typedef struct off_ns_at4_te_call_proc_in   off_ns_at4_call_proc_rq;
typedef struct off_ns_at4_te_call_proc_in   off_ns_at4_call_proc_in;


		/* NS_CONN_IN */

struct off_ns_at4_te_conn_in {
	Message_header_offset_at4               /* message header parameters */
	ns_offset_t at4_bc;                     /* bearer capability */
	ns_offset_t at4_chan_id;                /* channel ID */

#	if NS_SPF_FACILITY == ON
		ns_offset_t at4_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t at4_calling_nb;             /* calling number (from network) */
	ns_offset_t at4_calling_sub_add;        /* calling subaddress */
	ns_offset_t at4_called_nb;              /* called number */
	ns_offset_t at4_called_sub_add;         /* called subaddress */
	ns_offset_t at4_redir_nb;               /* redirecting number */
	ns_offset_t at4_llc;                    /* low layer capability */
	ns_offset_t at4_hlc;                    /* high layer compatibility */
	ns_offset_t at4_uui;		            /* user to user information */
};

typedef struct off_ns_at4_te_conn_in        off_ns_at4_conn_rq;
typedef struct off_ns_at4_te_conn_in        off_ns_at4_conn_in;


		/* NS_CONN_CO (CONN or CONN_ACK) */

struct off_ns_at4_te_conn_co {
	Message_header_offset_at4               /* message header parameters */
	ns_offset_t at4_chan_id;                /* channel ID */
	ns_offset_t at4_conn_nb;               	/* connected number */
	ns_offset_t at4_redir_nb;               /* redirecting number */
	ns_offset_t at4_uui;		            /* user to user information */
};

typedef struct off_ns_at4_te_conn_co        off_ns_at4_conn_rs;
typedef struct off_ns_at4_te_conn_co        off_ns_at4_conn_co;

		/* NS_PROGRESS_IN */

struct off_ns_at4_te_progress_in {
	Message_header_offset_at4               /* message header parameters */
	ns_offset_t at4_cause;                  /* cause */
	ns_offset_t at4_chan_id;                /* channel ID */
	ns_offset_t at4_progress_ind;           /* progress indicator */
};

typedef struct off_ns_at4_te_progress_in    off_ns_at4_progress_rq;
typedef struct off_ns_at4_te_progress_in    off_ns_at4_progress_in;


		/* NS_CONGEST_CONTROL_RQ/IN */

struct off_ns_at4_te_con_con_in {
	Message_header_offset_at4				/* message header parameters */
	ns_offset_t at4_congest_level;			/* congestion level */
	ns_offset_t at4_cause;					/* cause */
};

typedef struct off_ns_at4_te_con_con_in		off_ns_at4_con_con_rq;
typedef struct off_ns_at4_te_con_con_in		off_ns_at4_con_con_in;


/*===================== CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_IN */

struct off_ns_at4_te_clear_in {
	Message_header_offset_at4               /* message header parameters */
	ns_offset_t at4_cause;                  /* cause */
	ns_offset_t at4_uui;		            /* user to user information */
};

typedef struct off_ns_at4_te_clear_in       off_ns_at4_clear_rq;
typedef struct off_ns_at4_te_clear_in       off_ns_at4_clear_in;

		/* NS_CLEAR_CO */

struct off_ns_at4_te_clear_co {
	Message_header_offset_at4               /* message header parameters */
	ns_offset_t at4_cause;                  /* cause */
};

typedef struct off_ns_at4_te_clear_co       off_ns_at4_clear_rs;
typedef struct off_ns_at4_te_clear_co       off_ns_at4_clear_co;


		/* NS_RESTART_RQ/IN/RS/CO */

struct off_ns_at4_te_restart_in {
	Message_header_offset_at4				/* message header parameters */
	ns_offset_t at4_chan_id;				/* channel identifier */
	ns_offset_t at4_restart_ind;			/* restart indicator */
};

typedef struct off_ns_at4_te_restart_in		off_ns_at4_restart_rq;
typedef struct off_ns_at4_te_restart_in		off_ns_at4_restart_in;

typedef struct off_ns_at4_te_restart_in		off_ns_at4_restart_rs;
typedef struct off_ns_at4_te_restart_in		off_ns_at4_restart_co;

/*====================		MISCELLANEOUS  MESSAGES	=======================*/

		/* NS_USER_INFO_RQ/IN */

struct off_ns_at4_te_user_info_in {
	Message_header_offset_at4				/* message header parameters */
	ns_offset_t at4_more_data;				/* more data */
	ns_offset_t at4_uui;					/* user to user information */
};

typedef struct off_ns_at4_te_user_info_in	off_ns_at4_user_info_rq;
typedef struct off_ns_at4_te_user_info_in	off_ns_at4_user_info_in;

		/* NS_FAC_RQ/IN/RS/CO */

struct off_ns_at4_te_fac_in {
	Message_header_offset_at4				/* message header parameters */
	ns_offset_t at4_cause;                  /* cause */
	ns_offset_t at4_chan_id;				/* channel identifier */
#	if NS_SPF_FACILITY == ON
		ns_offset_t at4_spf_fac;			/* network specific facility */
#	endif
};

typedef struct off_ns_at4_te_fac_in			off_ns_at4_fac_rq;
typedef struct off_ns_at4_te_fac_in			off_ns_at4_fac_in;
typedef struct off_ns_at4_te_fac_in			off_ns_at4_fac_rs;
typedef struct off_ns_at4_te_fac_in			off_ns_at4_fac_co;

			/* NS MAINTENANCE REQUEST / CONFIRM */

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

	/* NS_SERVICE_CO */

struct off_ns_at4_te_service_co {
	Message_header_offset_at4               /* message header parameters */
	ns_offset_t	at4_change_status;			/* Change Status */
	ns_offset_t	at4_chan_id;				/* Channel Id */
};

typedef struct off_ns_at4_te_service_co		off_ns_at4_service_co;

#endif /* } */

		/**************************************************
		**  DESCRIPTION of the value of an IE.           **
		**  ---------------------------------            **
		**  EACH ENTRY SHALL BE IN ACCORDANCE WITH THE   **
		**  CORRESPONDING SSDU IE META-PROGRAM           **
		**                                               **
		***************************************************/

		/* Bearer Capability (BC) */

struct val_ns_at4_bc {
	Next_instance_offset
	ie_val      trf_cap;                /* information transfer capability */
	ie_val      trf_mode;               /* information transfer mode */
	ie_val      trf_rate;               /* information transfer rate */
	ie_val      dest_rate;              /* information destination transfer rate */
	ie_val      protocol_id_1;          /* user information layer 1 protocol */
	ie_val      protocol_id_2;          /* user information layer 2 protocol */
	ie_val      protocol_id_3;          /* user information layer 3 protocol */
};

		/* Called party number (CALLED_NB) */

struct val_ns_at4_called_nb {
	Next_instance_offset
	ie_val      plan_id;           /* numbering plan */
	ie_val      nb_type;           /* type of number */
	ie_array    nb[AT4_MX_SZ_CALLED_NB+2];  /* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_at4_called_sub_add {
	Next_instance_offset
	ie_val      sub_add_type;           /* called subaddress type */
	ie_val      odd_even_ind;           /* odd/even indicator */
	ie_array    sub_add[AT4_MX_SZ_CALLED_SUB_ADD+2];    /* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_at4_calling_nb {
	Next_instance_offset
	ie_val      plan_id;			/* numbering plan */
	ie_val      nb_type;			/* type of number */
	ie_val      pres;				/* presentation */
	ie_val		screen_ind;			/* screening indicators */
    ie_array    nb[AT4_MX_SZ_CALLING_NB+2]; /* calling number digits */
};

        /* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_at4_calling_sub_add {
    Next_instance_offset
    ie_val      sub_add_type;           /* calling subaddress type */
	ie_val      odd_even_ind;           /* odd/even indicator */
	ie_array    sub_add[AT4_MX_SZ_CALLING_SUB_ADD+2];   /* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_at4_cause {
	Next_instance_offset
	ie_val      coding_std;             /* coding standard */
	ie_val      cause_loc;              /* location */
	ie_val      cause_class;            /* cause class field */
	ie_val      cause_val;              /* cause value field */
	ie_array    cause_diag[AT4_MX_SZ_CAUSE_DIAG+2]; /* diagnostics */
};

		/* Change Status (CHANGE_STATUS) */

struct val_ns_at4_change_status {
	Next_instance_offset
	ie_val		preference;					/* All interface, single B channel */
	ie_val		status;						/* Status of the B channel(s) */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_at4_chan_id {
	Next_instance_offset
	ie_val 		int_id;					/* interface id */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val		d_chan;					/* D-channel indicator */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val		int_id_val;				/* interface id value */
	ie_val		nb_map;					/* channel nb / mapping */
	ie_val		chan_type;				/* channel type */
	ie_array	chan_nb[AT4_MX_SZ_CHAN_ID+2];	/* channel number */
};

		/* Congestion level (CONGEST_LEVEL) */

struct val_ns_at4_congest_level {
	Next_instance_offset
	ie_val		congest_level;				/* congestion level */
};


		/* Connected number (CONN_NB) */

struct val_ns_at4_conn_nb {
	Next_instance_offset
	ie_val      plan_id;           /* numbering plan */
	ie_val      nb_type;           /* type of number */
	ie_array    nb[AT4_MX_SZ_CONN_NB+2];  /* called number digits */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_at4_hlc {
    Next_instance_offset
    ie_val      coding_std;                 /* coding standard */
    ie_val      teleservice;                /* high layer characteristics identification */
	ie_val      ext_teleservice;            /* extended high layer characteristics identification */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_at4_llc {
    Next_instance_offset
    ie_val      coding_std;             /* coding standard */
    ie_val      trf_cap;                /* information transfer capability */
    ie_val      out_band_neg;           /* out-band negotiation */
    ie_val      trf_mode;               /* transfer mode */
	ie_val      trf_rate;               /* information transfer rate */
	ie_val		multiplier;				/* multiplier in case of n*64kb/s service */
	ie_val      structure;              /* structure */
	ie_val      dest_rate;              /* destination rate */
	ie_val      protocol_id_1;          /* user information layer 1 protocol */
	ie_val      syn_asyn;               /* synchronous/asynchronous */
	ie_val      negotiation;            /* negotiation */
	ie_val      user_rate;              /* user rate */
	ie_val      inter_rate;             /* intermediate rate */
	ie_val      nic_tx;                 /* network independent clock on transmission (Tx) */
	ie_val      nic_rx;                 /* network independent clock on reception (Rx) */
	ie_val      fc_tx;                  /* flow control on transmission (Tx) */
	ie_val      fc_rx;                  /* flow control on reception (Rx) */
	ie_val      hdr;                    /* rate adaption header included or not */
	ie_val      multi_frame;            /* multiple frame establishement support in DL */
	ie_val      op_mode;                /* mode of operation */
	ie_val      lli_negot;              /* logical link identifier negotiation */
	ie_val      assign;                 /* assignor/assignee */
    ie_val      band_negot;             /* in-band/out-band negotiation */
    ie_val      stop_bit;               /* number of stop bits */
	ie_val      data_bit;               /* number of data bits excluding parity if present */
    ie_val      parity;                 /* parity information */
    ie_val      duplex;                 /* duplex mode */
    ie_val      modem;                  /* modem type */
	ie_val      protocol_id_2;          /* user layer 2 protocol information */
	ie_val      option_2;               /* optional layer 2 protocol information */
    ie_val      protocol_id_3;          /* user information layer 3 protocol */
    ie_val      option_3;               /* optional layer 3 protocol information */
};

#if NS_SPF_FACILITY == ON

		/* Network Specific Facility (SPF_FAC) */

struct val_ns_at4_spf_fac {
	Next_instance_offset
	ie_val		net_id_lgth;	 			/* length of network identification */
	ie_val		net_id_type;	 			/* type of ID */
	ie_array	net_id[AT4_MX_SZ_NET_ID+1];	/* network identification array */
	ie_val		action;						/* parameterized/binary indicator */
	ie_val		serv_feature;				/* service/feature indicator */
	ie_val		facility_coding;			/* facility coding */
	ie_val		param_fld;					/* parameterized field */
};

#endif


		/* Progress indicator (PROGRESS_IND) */

struct val_ns_at4_progress_ind {
	Next_instance_offset
	ie_val      coding_std;             /* coding standard */
	ie_val      progress_loc;           /* general location */
	ie_val      progress_descr;         /* progress description */
};

		/* Redirecting number (REDIR_NB) */

struct val_ns_at4_redir_nb {
	Next_instance_offset
	ie_val      nb_type;				/* type of number */
	ie_val      plan_id;				/* numbering plan */
	ie_val      pres;					/* presentation */
	ie_val		screen_ind;				/* screening indicators */
	ie_val      reason;         	    /* reason for redirection */
	ie_array    nb[AT4_MX_SZ_REDIR_NB+2];   /* number digits */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_at4_restart_ind {
	Next_instance_offset
	ie_val		restart_class;					/* class */
};

		/* User-to-user information (UUI) */

struct val_ns_at4_uui {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array	text[AT4_MX_SZ_UUI+2];	/* user information */
};

/*=========================================================================*/

							/* Information Elements (IE) */
							/* used for botk direction   */

			/*
				Isdn_at4_store_bc : store the bearer capability information
									element :

					INPUT :
						- pr            = primitive ID,
						- trf_cap_      = information transfer capability,
						- trf_mode_     = information transfer mode,
						- trf_rate_     = information transfer rate,
						- dest_rate_    = information destination transfer rate,
						- protocol_id_1_= user information layer 1 protocol,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,
			*/

#define Isdn_at4_store_bc(pr, trf_cap_, trf_mode_, trf_rate_, dest_rate_, protocol_id_1_, protocol_id_2_, protocol_id_3_)  \
				Set_offset_at4  (pr,    bc);                                        \
				Set_val_at4     (bc,    trf_cap,        trf_cap_);                  \
				Set_val_at4     (bc,    trf_mode,       trf_mode_);                 \
				Set_val_at4     (bc,    trf_rate,       trf_rate_);                 \
				Set_val_at4     (bc,    dest_rate,      dest_rate_);                 \
				Set_val_at4     (bc,    protocol_id_1,  protocol_id_1_);            \
				Set_val_at4     (bc,    protocol_id_2,  protocol_id_2_);            \
				Set_val_at4     (bc,    protocol_id_3,  protocol_id_3_);            \
				Set_next_ie_at4 (bc)

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at4_store_called_nb : called number IE

                    INPUT :
						- pr			= primitive ID,
						- nb_type_	    = type of number,
						- plan_id_  	= numbering plan,
						- nb_           = address of the literal string.
			*/

#define Isdn_at4_store_called_nb(pr, nb_type_, plan_id_, nb_)                    \
		Set_offset_at4  (pr,        called_nb);                                 \
		Set_val_at4     (called_nb, nb_type,   nb_type_);             \
		Set_val_at4     (called_nb, plan_id,   plan_id_);             \
		Set_str_at4     (called_nb, nb,             nb_,        AT4_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

            /*
				Isdn_at4_store_called_sub_add : called sub-address IE

                    INPUT :
                        - pr            = primitive ID,
                        - sub_add_type_ = subaddress type,
                        - odd_even_ind_ = odd/even indicator,
                        - sub_add_      = address of the literal string.

            */

#define Isdn_at4_store_called_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
        Set_offset_at4  (pr,                called_sub_add);                        \
        Set_val_at4     (called_sub_add,    sub_add_type,   sub_add_type_);         \
        Set_val_at4     (called_sub_add,    odd_even_ind,   odd_even_ind_);         \
        Set_str_at4     (called_sub_add,    sub_add,        sub_add_, AT4_MX_SZ_CALLED_SUB_ADD+1)

#define Isdn_at4_store_called_sub_add_u(pr, odd_even_ind_, sub_add_, sz_) \
		Set_offset_at4  (pr,                called_sub_add);                        \
		Set_val_at4     (called_sub_add,    sub_add_type,   SUB_ADD_USER);         \
		Set_val_at4     (called_sub_add,    odd_even_ind,   odd_even_ind_);         \
		Set_mem_at4     (called_sub_add,    sub_add,        sub_add_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at4_store_calling_nb : store calling number IE

					INPUT :
						- pr                = primitive ID,
						- nb_type_     		= type of number,
						- plan_id_     		= numbering plan,
						- screen_ind_  		= screening indicators,
						- pres_  			= presentation,
						- nb_               = pointer on the calling number literal string.
			*/

#define Isdn_at4_store_calling_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)  \
		Set_offset_at4  (pr,            calling_nb);                                \
		Set_val_at4     (calling_nb,    nb_type,   	nb_type_);  \
		Set_val_at4     (calling_nb,    plan_id,	plan_id_);  \
		Set_val_at4     (calling_nb,    pres,		pres_);     \
		Set_val_at4     (calling_nb,    screen_ind,	screen_ind_);\
		Set_str_at4     (calling_nb,    nb,             nb_, AT4_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_at4_calling_sub_add : calling sub-address IE

						INPUT :
						- pr            = primitive ID,
						- sub_add_type_ = subaddress type,
						- odd_even_ind_ = odd/even indicator,
						- sub_add_      = address of the literal string.

			*/

#define Isdn_at4_store_calling_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
		Set_offset_at4  (pr,                calling_sub_add);                       \
		Set_val_at4     (calling_sub_add,   sub_add_type,   sub_add_type_);         \
		Set_val_at4     (calling_sub_add,   odd_even_ind,   odd_even_ind_);         \
		Set_str_at4     (calling_sub_add,   sub_add,        sub_add_, AT4_MX_SZ_CALLING_SUB_ADD+1)

#define Isdn_at4_store_calling_sub_add_u(pr, odd_even_ind_, sub_add_, sz_) \
		Set_offset_at4  (pr,                calling_sub_add);                       \
		Set_val_at4     (calling_sub_add,   sub_add_type,   SUB_ADD_USER);         \
		Set_val_at4     (calling_sub_add,   odd_even_ind,   odd_even_ind_);         \
		Set_mem_at4     (calling_sub_add,   sub_add,        sub_add_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at4_store_cause : cause IE

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- cause_loc_    = cause location,
						- cause_class_  = cause class,
						- cause_val_    = cause value,
                        - cause_diag_   = cause diagnostic.

            */

#define Isdn_at4_store_cause(pr, coding_std_, cause_loc_, cause_class_, cause_val_, cause_diag_) \
        Set_offset_at4  (pr,    cause);                                             \
        Set_val_at4     (cause, coding_std, coding_std_);                           \
        Set_val_at4     (cause, cause_loc,  cause_loc_);                            \
        Set_val_at4     (cause, cause_class,cause_class_);                          \
        Set_val_at4     (cause, cause_val,  cause_val_);                            \
		Set_str_at4     (cause, cause_diag, cause_diag_, AT4_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

		/*
				 Isdn_at4_store_chan_id_MAP_/NB_PRI : store channel ID IE

					INPUT :
						- pr            = primitive ID,
						- int_id_		= interface id,
						- pref_excl_    = preferred channel,
						- int_id_val_   = interface Id value,
						- type_			= channel type,
						- p_chan_nb_    = channel number,
						-  chan_lgth_	= length of info.

		*/

#define Isdn_at4_store_chan_id_MAP_PRI(pr, int_id_, pref_excl_,int_id_val_, type_, p_chan_nb_, chan_lgth_) \
		Set_offset_at4  (pr,        chan_id);                           \
		Set_val_at4		(chan_id,	int_id,		int_id_);				\
		Set_val_at4     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_at4     (chan_id,   d_chan,  	NOT_D_CHAN);   	        \
		Set_val_at4     (chan_id,   chan_sel,   AS_INDICATED);          \
		Set_val_at4		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_at4		(chan_id,	nb_map,		CHAN_MAP);				\
		Set_val_at4		(chan_id,	chan_type,	type_);					\
		Set_mem_at4     (chan_id,   chan_nb,    p_chan_nb_,     chan_lgth_)

#define Isdn_at4_store_chan_id_NB_PRI(pr, int_id_, pref_excl_,int_id_val_, type_, p_chan_nb_) \
		Set_offset_at4  (pr,        chan_id);                           \
		Set_val_at4		(chan_id,	int_id,		int_id_);				\
		Set_val_at4     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_at4     (chan_id,   d_chan,  	NOT_D_CHAN);   	        \
		Set_val_at4     (chan_id,   chan_sel,   AS_INDICATED);          \
		Set_val_at4		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_at4		(chan_id,	nb_map,		CHAN_NUMBER);				\
		Set_val_at4		(chan_id,	chan_type,	type_);					\
		Set_str_at4     (chan_id,   chan_nb,    p_chan_nb_,     AT4_MX_SZ_CHAN_ID+2)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at4_store_congest_level: congestion level

					INPUT :
						- pr 			= primitive ID,
						- congest_level_= congestion level.
			*/

#define Isdn_at4_store_congest_level(pr, congest_level_)				\
		Set_offset_at4	(pr,			congest_level);					\
		Set_val_at4		(congest_level,	congest_level,	congest_level_);\
		Set_next_ie_at4	(congest_level)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at4_store_hlc : high layer compatibility for
                                        non-CCITT coding standard

					INPUT :
                        - pr        = primitive ID,
                        - std       = coding standard,
                        - tele    = teleservice,
                        - ext_tele  = extended teleservice.
            */

#define Isdn_at4_store_hlc(pr, std, tele, ext_tele)         \
		Set_offset_at4  (pr,    hlc);                           \
        Set_val_at4     (hlc,   coding_std,         std);       \
		Set_val_at4     (hlc,   teleservice,        tele);      \
        Set_val_at4     (hlc,   ext_teleservice,    ext_tele);  \
        Set_next_ie_at4 (hlc)

            /*
                Isdn_at4_store_hlc_CCITT : high layer compatibility for
										CCITT coding standard

					INPUT :
                        - pr        = primitive ID,
                        - tele    = teleservice,
                        - ext_tele  = extended teleservice.
            */

#define Isdn_at4_store_hlc_CCITT(pr, tele, ext_tele)        \
		Isdn_at4_store_hlc  (pr, CODING_STD_CCITT, tele, ext_tele)

/*-------------------------------------------------------------------------*/

			/*
                Isdn_at4_store_llc : low layer compatibility

                First definition : in one part :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
						- multi_		= multiplier,
						- structure_    = structure,
						- dest_rate_    = destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_     = synchronous/asynchronous,
						- negotiation_  = negotiation,
						- user_rate_    = user rate,
						- inter_rate_   = intermediate rate,
						- nic_tx_       = network independent clock (NIC) on Transmission (Tx),
						- nic_rx_       = network independent clock (NIC) on Reception (Rx),
						- fc_tx_        = flow control on Transmission (Tx),
						- fc_rx_        = flow control on Reception (Rx),
						- hdr_          = rate adaption header included or not,
						- multi_frame_  = multiple frame establishement support in DL,
						- op_mode_      = mode of operation,
						- lli_negot_    = logical link identifier negotiation,
						- assign_       = assignor/assignee,
						- band_negot_   = in-band/out-band negotiation,
						- stop_bit_     = number of stop bits,
						- data_bit_     = number of data bits,
						- parity_       = number of parity bit,
						- duplex_       = duplex mode,
						- modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_     = optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_     = optional layer 3 protocol information.
			*/

#define Isdn_at4_store_llc(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, multi_, structure_, dest_rate_, protocol_id_1_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
		Set_offset_at4  (pr,    llc);                                       \
		Set_val_at4     (llc,   coding_std,     coding_std_);               \
		Set_val_at4     (llc,   trf_cap,        trf_cap_);                  \
		Set_val_at4     (llc,   out_band_neg,   out_neg);                   \
		Set_val_at4     (llc,   trf_mode,       trf_mode_);                 \
		Set_val_at4     (llc,   trf_rate,       trf_rate_);                 \
		Set_val_at4     (llc,   multiplier,     multi_);     		        \
		Set_val_at4     (llc,   structure,      structure_);                \
		Set_val_at4     (llc,   dest_rate,      dest_rate_);                \
		Set_val_at4     (llc,   protocol_id_1,  protocol_id_1_);            \
		Set_val_at4     (llc,   syn_asyn,       syn_asyn_);                 \
		Set_val_at4     (llc,   negotiation,    negotiation_);              \
		Set_val_at4     (llc,   user_rate,      user_rate_);                \
		Set_val_at4     (llc,   inter_rate,     inter_rate_);               \
		Set_val_at4     (llc,   nic_tx,         nic_tx_);                   \
		Set_val_at4     (llc,   nic_rx,         nic_rx_);                   \
		Set_val_at4     (llc,   fc_tx,          fc_tx_);                    \
		Set_val_at4     (llc,   fc_rx,          fc_rx_);                    \
		Set_val_at4     (llc,   hdr,            hdr_);                      \
		Set_val_at4     (llc,   multi_frame,    multi_frame_);              \
		Set_val_at4     (llc,   op_mode,        op_mode_);                  \
		Set_val_at4     (llc,   lli_negot,      lli_negot_);                \
		Set_val_at4     (llc,   assign,         assign_);                   \
		Set_val_at4     (llc,   band_negot,     band_negot_);               \
		Set_val_at4     (llc,   stop_bit,       stop_bit_);                 \
		Set_val_at4     (llc,   data_bit,       data_bit_);                 \
		Set_val_at4     (llc,   parity,         parity_);                   \
		Set_val_at4     (llc,   duplex,         duplex_);                   \
		Set_val_at4     (llc,   modem,          modem_);                    \
		Set_val_at4     (llc,   protocol_id_2,  protocol_id_2_);            \
		Set_val_at4     (llc,   option_2,       option_2_);                 \
		Set_val_at4     (llc,   protocol_id_3,  protocol_id_3_);            \
		Set_val_at4     (llc,   option_3,       option_3_);                 \
		Set_next_ie_at4 (llc)

			/*--------------------------------------------*/

			/*
				Isdn_at4_store_llc : low layer compatibility

				Second definition : DIVIDED IN 2 PARTS for compilers which
				do not accept so many parameters in macros :

					Isdn_at4_store_llc_1_4 : octet 1 to octet 4 included,

						INPUT :
							- pr            = primitive ID,
							- coding_std_   = coding standard,
							- trf_cap_      = information transfer capability,
							- out_neg       = out band negotiation,
							- trf_mode_     = transfer mode,
							- trf_rate_     = information transfer rate,
							- multi_		= multiplier,
							- structure_    = structure,
							- dest_rate_    = destination rate,

					Isdn_at4_store_llc_5_7 : octet 5 to octet 7 included,

						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_     = synchronous/asynchronous,
						- negotiation_  = negotiation,
						- user_rate_    = user rate,
						- inter_rate_   = intermediate rate,
						- nic_tx_       = network independent clock (NIC) on Transmission (Tx),
						- nic_rx_       = network independent clock (NIC) on Reception (Rx),
						- fc_tx_        = flow control on Transmission (Tx),
						- fc_rx_        = flow control on Reception (Rx),
						- hdr_          = rate adaption header included or not,
						- multi_frame_  = multiple frame establishement support in DL,
						- op_mode_      = mode of operation,
						- lli_negot_    = logical link identifier negotiation,
						- assign_       = assignor/assignee,
						- band_negot_   = in-band/out-band negotiation,
						- stop_bit_     = number of stop bits,
						- data_bit_     = number of data bits,
						- parity_       = number of parity bit,
						- duplex_       = duplex mode,
						- modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_     = optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_     = optional layer 3 protocol information.
			*/

#define Isdn_at4_store_llc_1_4(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, multi_, structure_, dest_rate_)\
		Set_offset_at4  (pr,    llc);                                       \
		Set_val_at4     (llc,   coding_std,     coding_std_);               \
		Set_val_at4     (llc,   trf_cap,        trf_cap_);                  \
		Set_val_at4     (llc,   out_band_neg,   out_neg);                   \
		Set_val_at4     (llc,   trf_mode,       trf_mode_);                 \
		Set_val_at4     (llc,   trf_rate,       trf_rate_);                 \
		Set_val_at4     (llc,   multiplier,     multi_);     		        \
		Set_val_at4     (llc,   structure,      structure_);                \
		Set_val_at4     (llc,   dest_rate,      dest_rate_)

#define Isdn_at4_store_llc_5_7(protocol_id_1_,  syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
        Set_val_at4     (llc,   protocol_id_1,  protocol_id_1_);            \
		Set_val_at4     (llc,   syn_asyn,       syn_asyn_);                 \
        Set_val_at4     (llc,   negotiation,    negotiation_);              \
        Set_val_at4     (llc,   user_rate,      user_rate_);                \
        Set_val_at4     (llc,   inter_rate,     inter_rate_);               \
        Set_val_at4     (llc,   nic_tx,         nic_tx_);                   \
        Set_val_at4     (llc,   nic_rx,         nic_rx_);                   \
        Set_val_at4     (llc,   fc_tx,          fc_tx_);                    \
        Set_val_at4     (llc,   fc_rx,          fc_rx_);                    \
        Set_val_at4     (llc,   hdr,            hdr_);                      \
        Set_val_at4     (llc,   multi_frame,    multi_frame_);              \
        Set_val_at4     (llc,   op_mode,        op_mode_);                  \
        Set_val_at4     (llc,   lli_negot,      lli_negot_);                \
        Set_val_at4     (llc,   assign,         assign_);                   \
		Set_val_at4     (llc,   band_negot,     band_negot_);               \
        Set_val_at4     (llc,   stop_bit,       stop_bit_);                 \
		Set_val_at4     (llc,   data_bit,       data_bit_);                 \
        Set_val_at4     (llc,   parity,         parity_);                   \
        Set_val_at4     (llc,   duplex,         duplex_);                   \
		Set_val_at4     (llc,   modem,          modem_);                    \
		Set_val_at4     (llc,   protocol_id_2,  protocol_id_2_);            \
		Set_val_at4     (llc,   option_2,       option_2_);                 \
		Set_val_at4     (llc,   protocol_id_3,  protocol_id_3_);            \
		Set_val_at4     (llc,   option_3,       option_3_);                 \
		Set_next_ie_at4 (llc)

			/*--------------------------------------------*/

			/*
				Isdn_at4_store_llc_V110 : low layer compatibility for
											V110 rate adaption :

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- trf_cap_      = information transfer capability,
						- out_neg       = out band negotiation,
						- trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
						- structure_    = structure,
						- dest_rate_    = destination rate,
						- syn_asyn_     = synchronous/asynchronous,
						- negotiation_  = negotiation,
						- user_rate_    = user rate,
						- inter_rate_   = intermediate rate,
						- nic_tx_       = network independent clock (NIC) on Transmission (Tx),
						- nic_rx_       = network independent clock (NIC) on Reception (Rx),
						- fc_tx_        = flow control on Transmission (Tx),
						- fc_rx_        = flow control on Reception (Rx),
						- stop_bit_     = number of stop bits,
						- data_bit_     = number of data bits,
						- parity_       = number of parity bit,
						- duplex_       = duplex mode,
						- modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_at4_store_llc_V110(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_at4_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
							out_neg,        trf_mode_,      trf_rate_,          \
							BYTE_VAL_NIL,	structure_,     dest_rate_);        \
		Isdn_at4_store_llc_5_7(PROTOCOL_ID_1_V110,  syn_asyn_,  negotiation_,   \
							user_rate_,     inter_rate_,    nic_tx_,            \
							nic_rx_,        fc_tx_,         fc_rx_,             \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							stop_bit_,      data_bit_,      parity_,            \
							duplex_,        modem_,         protocol_id_2_,     \
							BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

			/*--------------------------------------------*/
			/*
				Isdn_at4_store_llc_N_64 : low layer compatibility for
											N*64  :

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- trf_cap_      = information transfer capability,
						- out_neg       = out band negotiation,
						- trf_mode_     = transfer mode,
						- multi_		= multiplier,
						- protocol_id_1_= user information layer 1 protocol,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_at4_store_llc_N_64(pr, coding_std_, trf_cap_, out_neg, trf_mode_, multi_,protocol_id_1_,protocol_id_2_, protocol_id_3_) \
		Isdn_at4_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
							out_neg,        trf_mode_,      TRF_RATE_MULTI_RATE,\
							multi_,			BYTE_VAL_NIL,   BYTE_VAL_NIL);     \
		Isdn_at4_store_llc_5_7(protocol_id_1_,BYTE_VAL_NIL,  	BYTE_VAL_NIL,   \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,            \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   protocol_id_2_,     \
							BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

			/*--------------------------------------------*/
			/*
				Isdn_at4_store_llc_X31 : low layer compatibility for
											X31 rate adaption :

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- trf_cap_      = information transfer capability,
						- out_neg       = out band negotiation,
						- trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
						- structure_    = structure,
						- dest_rate_    = destination rate,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
						- nic_rx_       = network independent clock (NIC) on Reception (Rx),
                        - fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
                        - stop_bit_     = number of stop bits,
						- data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_at4_store_llc_X31(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_at4_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
                            out_neg,        trf_mode_,      trf_rate_,          \
							BYTE_VAL_NIL,	structure_,     dest_rate_);      	\
		Isdn_at4_store_llc_5_7(PROTOCOL_ID_1_X31,  syn_asyn_,  negotiation_,    \
							user_rate_,     inter_rate_,    nic_tx_,            \
							nic_rx_,        fc_tx_,         fc_rx_,             \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							stop_bit_,      data_bit_,      parity_,            \
							duplex_,        modem_,         protocol_id_2_,     \
							BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

			/*--------------------------------------------*/

			/*
				Isdn_at4_store_llc_V120 : low layer compatibility for
											V120 rate adaption :

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- trf_cap_      = information transfer capability,
						- out_neg       = out band negotiation,
						- trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
						- structure_    = structure,
						- dest_rate_    = destination rate,
						- syn_asyn_     = synchronous/asynchronous,
						- negotiation_  = negotiation,
						- user_rate_    = user rate,
						- hdr_          = rate adaption header included or not,
						- multi_frame_  = multiple frame establishement support in DL,
						- op_mode_      = mode of operation,
						- lli_negot_    = logical link identifier negotiation,
						- assign_       = assignor/assignee,
						- band_negot_   = in-band/out-band negotiation,
						- stop_bit_     = number of stop bits,
						- data_bit_     = number of data bits,
						- parity_       = number of parity bit,
						- duplex_       = duplex mode,
						- modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_at4_store_llc_V120(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_at4_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
							out_neg,        trf_mode_,      trf_rate_,          \
							BYTE_VAL_NIL,	structure_,     dest_rate_);        \
		Isdn_at4_store_llc_5_7(PROTOCOL_ID_1_V120,                              \
							syn_asyn_,      negotiation_,   user_rate_,         \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
							BYTE_VAL_NIL,   BYTE_VAL_NIL,   hdr_,               \
							multi_frame_,   op_mode_,       lli_negot_,         \
							assign_,        band_negot_,    stop_bit_,          \
							data_bit_,      parity_,        duplex_,            \
							modem_,         protocol_id_2_, BYTE_VAL_NIL,       \
							protocol_id_3_,  BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

			/*
				Isdn_at4_store_spf_fac : network specific facility

					INPUT :
						- pr 			= primitive ID,
						- net_id_lgth_	= length of network identification,
						- net_id_type_	= type of ID,
						- p_net_id		= network identification array
						- param_binary	= parameter/binary,
						- serv_feature	= service/feature,
						- fac_code		= facility code
						- param			= parameterized field
			*/

#	define Isdn_at4_store_spf_fac(pr, net_id_lgth_, net_id_type_, p_net_id, param_binary_, serv_feature_, fac_code_, param_)	\
		{uchar FAR *p_sav;															\
		Set_offset_at4	(pr,		spf_fac);										\
		Set_val_at4		(spf_fac,	net_id_lgth,	net_id_lgth_);					\
		Set_val_at4		(spf_fac,	net_id_type,	net_id_type_);					\
		p_sav = ns_int_ctx.p__val;																\
		Set_mem_at4		(spf_fac,	net_id,			p_net_id,	(net_id_lgth_ > AT4_MX_SZ_NET_ID) ? AT4_MX_SZ_NET_ID : net_id_lgth_);\
		ns_int_ctx.p__val = p_sav;																\
		}																			\
		Set_val_at4		(spf_fac,	serv_feature,	serv_feature_);					\
		Set_val_at4		(spf_fac,	action,			param_binary_);					\
		Set_val_at4		(spf_fac,	facility_coding,fac_code_);						\
		Set_val_at4		(spf_fac,	param_fld,		param_);						\
		Set_next_ie_at4	(spf_fac)

#endif

/*-------------------------------------------------------------------------*/

			/*

				Isdn_at4_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_at4_store_restart_ind(pr, class_)									\
		Set_offset_at4	(pr,			restart_ind);								\
		Set_val_at4		(restart_ind,	restart_class,	class_);					\
		Set_next_ie_at4	(restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at4_store_uui : user to user information IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator,
						- p_text 			= address of the user info.
			*/

#define Isdn_at4_store_uui(pr, protocol_discr_, p_text)							\
		Set_offset_at4	(pr,	uui);												\
		Set_val_at4		(uui,	protocol_discr,	protocol_discr_);					\
		Set_str_at4		(uui, 	text,	p_text,	AT4_MX_SZ_UUI+1)

#define Isdn_at4_store_uui_u(pr, protocol_discr_, p_text, sz_)							\
		Set_offset_at4	(pr,	uui);												\
		Set_val_at4		(uui,	protocol_discr,	protocol_discr_);					\
		Set_mem_at4		(uui, 	text,	p_text,	sz_)

/*=========================================================================*/

					/* Information Elements (IE) 	*/
					/* used for N->U direction only */


#if EQUIPMENT == NT2


			/*
				Isdn_at4_store_progress_ind : progress indicator

					INPUT :
						- pr                = primitive ID,
						- coding_std_       = coding standard,
						- progress_loc_     = general location,
						- progress_descr_   = description.

			*/

#   define Isdn_at4_store_progress_ind(pr, coding_std_, progress_loc_, progress_descr_)\
		Set_offset_at4  (pr,            progress_ind);                      \
		Set_val_at4     (progress_ind,  coding_std,     coding_std_);       \
		Set_val_at4     (progress_ind,  progress_loc,   progress_loc_);     \
		Set_val_at4     (progress_ind,  progress_descr, progress_descr_);   \
		Set_next_ie_at4 (progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at4_store_redir_nb : store redir number IE

					INPUT :
						- pr                = primitive ID,
						- nb_type_     		= type of number,
						- plan_id_     		= numbering plan,
						- screen_ind_  		= screening indicators,
						- pres_  			= presentation,
						- reason			= reason
						- nb_               = pointer on the redir number literal string.
			*/

#	define Isdn_at4_store_redir_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, reason_, nb_)  \
		Set_offset_at4  (pr,            redir_nb);                                \
		Set_val_at4     (redir_nb,    nb_type,   	nb_type_);  \
		Set_val_at4     (redir_nb,    plan_id,	plan_id_);  \
		Set_val_at4     (redir_nb,    pres,		pres_);     \
		Set_val_at4     (redir_nb,    screen_ind,	screen_ind_);\
		Set_val_at4     (redir_nb,    reason,		reason_);\
		Set_str_at4     (redir_nb,    nb,             nb_, AT4_MX_SZ_REDIR_NB+1)

#endif

/*-------------------------------------------------------------------------*/
/*						Q931 (TRANSPARENT) IE ENCODING							   */
/*-------------------------------------------------------------------------*/


#if NS_IE_TSP_OUT == ON

#	define	Isdn_at4_store_bc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, bc);						\
		Set_mem_eob_at4	(bc, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_BC_TSP) ? 1 + AT4_MX_SZ_BC_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(bc)

#	define	Isdn_at4_store_called_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, called_nb);						\
		Set_mem_eob_at4	(called_nb, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_CALLED_NB_TSP) ? 1 + AT4_MX_SZ_CALLED_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(called_nb)

#	define	Isdn_at4_store_calling_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, calling_nb);						\
		Set_mem_eob_at4	(calling_nb, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_CALLING_NB_TSP) ? 1 + AT4_MX_SZ_CALLING_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(calling_nb)

#	define	Isdn_at4_store_called_sub_add_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, called_sub_add);						\
		Set_mem_eob_at4	(called_sub_add, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_CALLED_SUB_ADD_TSP) ? 1 + AT4_MX_SZ_CALLED_SUB_ADD_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(called_sub_add)

#	define	Isdn_at4_store_calling_sub_add_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, calling_sub_add);						\
		Set_mem_eob_at4	(calling_sub_add, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_CALLING_SUB_ADD_TSP) ? 1 + AT4_MX_SZ_CALLING_SUB_ADD_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(calling_sub_add)

#	define	Isdn_at4_store_cause_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, cause);						\
		Set_mem_eob_at4	(cause, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_CAUSE_TSP) ? 1 + AT4_MX_SZ_CAUSE_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(cause)

#	define	Isdn_at4_store_chan_id_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, chan_id);						\
		Set_mem_eob_at4	(chan_id, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_CHAN_ID_TSP) ? 1 + AT4_MX_SZ_CHAN_ID_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(chan_id)

#	define	Isdn_at4_store_conn_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, conn_nb);						\
		Set_mem_eob_at4	(conn_nb, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_CONN_NB_TSP) ? 1 + AT4_MX_SZ_CONN_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(conn_nb)

#	define	Isdn_at4_store_hlc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, hlc);						\
		Set_mem_eob_at4	(hlc, tsp_data, p_data_,(p_data_[0] > AT4_MX_SZ_HLC_TSP) ? 1 + AT4_MX_SZ_HLC_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(hlc)

#	define	Isdn_at4_store_llc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, llc);						\
		Set_mem_eob_at4	(llc, tsp_data,p_data_, (p_data_[0] > AT4_MX_SZ_LLC_TSP) ? 1 + AT4_MX_SZ_LLC_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(llc)

#	define	Isdn_at4_store_progress_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, progress_ind);						\
		Set_mem_eob_at4	(progress_ind, tsp_data,p_data_, (p_data_[0] > AT4_MX_SZ_PROGRESS_IND_TSP) ? 1 + AT4_MX_SZ_PROGRESS_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(progress_ind)

#	define	Isdn_at4_store_redir_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, redir_nb);						\
		Set_mem_eob_at4	(redir_nb, tsp_data,p_data_, (p_data_[0] > AT4_MX_SZ_REDIR_NB_TSP) ? 1 + AT4_MX_SZ_REDIR_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(redir_nb)

#	define	Isdn_at4_store_restart_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, restart_ind);						\
		Set_mem_eob_at4	(restart_ind, tsp_data,p_data_, (p_data_[0] > AT4_MX_SZ_RESTART_IND_TSP) ? 1 + AT4_MX_SZ_RESTART_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(restart_ind)

#	define	Isdn_at4_store_spf_fac_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, spf_fac);						\
		Set_mem_eob_at4	(spf_fac, tsp_data,p_data_, (p_data_[0] > AT4_MX_SZ_SPF_FAC_TSP) ? 1 + AT4_MX_SZ_SPF_FAC_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(spf_fac)

#	define	Isdn_at4_store_uui_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at4	(pr, uui);						\
		Set_mem_eob_at4	(uui, tsp_data,p_data_, (p_data_[0] > AT4_MX_SZ_UUI_TSP) ? 1 + AT4_MX_SZ_UUI_TSP : 1 + p_data_[0]);\
		Set_next_ie_at4	(uui)

#endif

/*EOF*/

