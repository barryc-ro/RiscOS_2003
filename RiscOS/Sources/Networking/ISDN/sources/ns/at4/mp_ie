
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ie.at4
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	at4_bc_4ab_spdu			(Void_parm);
	uchar	at4_bc_4b_spdu			(Void_parm);
	uchar	at4_bc_5_spdu			(Void_parm);
	uchar	at4_bc_6_spdu			(Void_parm);
	uchar	at4_bc_7_spdu			(Void_parm);
	uchar	at4_calling_nb_spdu		(Void_parm);
	uchar	at4_chan_id_check		(Void_parm);
	uchar	at4_check_chan_nb		(Void_parm);
	uchar	at4_llc_3a_spdu			(Void_parm);
	uchar	at4_llc_4ab_spdu		(Void_parm);
	uchar	at4_llc_4b_spdu			(Void_parm);
	uchar	at4_llc_5_spdu			(Void_parm);
	uchar	at4_llc_6_spdu			(Void_parm);
	uchar	at4_llc_7_spdu			(Void_parm);

#	if NS_SPF_FACILITY == ON
		uchar	at4_spf_fac_spdu	(Void_parm);/* this function interpretes octets 3.2 */
		uchar	at4_end_fac			(Void_parm);
#	endif

	uchar	at4_redir_nb_spdu		(Void_parm);

#endif

			/* ---------- Bearer capability (BC) */

D_START	(AT4_BC_P)
	D_VAL				(CODING_STD)
	D_TABL				(TRF_CAP)
	D_EXT_1				(_3)
	D_TABL				(TRF_MODE)
	D_TABX				(TRF_RATE)
	D_FUNCTION			(OCTETS_4ab)

	D_IF_VAL			(NOT_DEFAULT_4ab)
		D_EXT_0_1		(_4)
		D_VAL			(STRUCT)
		D_VAL			(CONFIG)
		D_VAL			(EST)
		D_FUNCTION		(OCTET_4b)

		D_IF_VAL		(NOT_DEFAULT_4b)
			D_EXT_0_1   (_4A)
			D_VAL		(SYMMETRY)
			D_TABX		(DEST_RATE)
		D_END_IF		(_4b)

	D_END_IF			(_4ab)

	D_EXT_1				(OCTETS_4)
	D_OPTIONAL_OCTET	(_5ABCD_6_7)

	D_FUNCTION			(_5_PRES)

	D_IF_VAL			(_5_PRESENT)
		D_VAL			(_LAYER_1)
		D_VAL			(_PROTO_1)
		D_EXT_0_1		(_5A)
		D_VAL			(TRF_RATE_56)
		D_VAL			(NO_NEGOT)
		D_VAL			(_SYNC_)
		D_EXT_1			(_5A_B)
	D_END_IF			(_5_)

	D_FUNCTION			(_6_PRES)

	D_IF_VAL			(_6_PRESENT)
		D_VAL			(_LAYER_2)
		D_VAL			(_PROTO_2)
		D_EXT_1			(_6)
	D_END_IF			(_6_)

	D_FUNCTION			(_7_PRES)

	D_IF_VAL			(_7_PRESENT)
		D_VAL			(_LAYER_3)
		D_VAL			(_PROTO_3)
		D_EXT_1			(_7)
	D_END_IF			(_MODE_)

D_END	(BC_E)

START	(AT4_BC_P)
	VAL					(5,2,CODING_STD_CCITT,			&i_bc[0].coding_std)
	TABL				(0,5,AT4_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
	EXT_1				()
	TABL				(5,2,AT4_T_TRF_MODE,			&i_bc[0].trf_mode)
	TABX				(0,5,AT4_TX_BC_TRF_RATE,	   	&i_bc[0].trf_mode,	&i_bc[0].trf_rate)
	FUNCTION			(at4_bc_4ab_spdu)

	IF_VAL				(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1			()
		VAL				(4,3,STRUCTURE_DEFAULT,			&i_bc[0].structure)
		VAL				(2,2,CONFIG_POINT_TO_POINT,		&i_bc[0].config)
		VAL				(0,2,EST_DEMAND,				&i_bc[0].est)
		FUNCTION		(at4_bc_4b_spdu)

		IF_VAL			(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1	 	()
			VAL			(5,2,BIDIRECTIONAL_SYMMETRY,&i_bc[0].symmetry)
			TABX		(0,5,AT4_TX_TRF_RATE,		&i_bc[0].trf_mode,	&i_bc[0].dest_rate)
		END_IF			()

	END_IF				()

	EXT_1   			()
	OPTIONAL_OCTET		()

	FUNCTION			(at4_bc_5_spdu)

	IF_VAL				(N_IF, &ie_if_flag, EQ, ON)
		VAL				(5,2,LAYER_ID_1,				&i_bc[0].layer_id_1)
		VAL				(0,5,PROTOCOL_ID_1_RA_I461,		&i_bc[0].protocol_id_1)
		EXT_0_1			()
		VAL				(0,5,RA_56KBS,					&i_bc[0].user_rate)
		VAL				(5,1,NEGOTIATION_NOT_IN_BAND,	&i_bc[0].negotiation)
		VAL				(6,1,SYN,						&i_bc[0].syn_asyn)
		EXT_1			()
	END_IF				()

	FUNCTION			(at4_bc_6_spdu)

	IF_VAL				(N_IF, &ie_if_flag, EQ, ON)
		VAL				(5,2,LAYER_ID_2,				&i_bc[0].layer_id_2)
		VAL				(0,5,PROTOCOL_ID_2_Q921,		&i_bc[0].protocol_id_2)
		EXT_1			()
	END_IF				()

	FUNCTION			(at4_bc_7_spdu)

	IF_VAL				(N_IF, &ie_if_flag, EQ, ON)
		VAL				(5,2,LAYER_ID_3,				&i_bc[0].layer_id_3)
		VAL				(0,5,PROTOCOL_ID_3_Q931,		&i_bc[0].protocol_id_3)
		EXT_1			()
	END_IF				()

END		(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Call state (CALL_STATE) */

D_START	(AT4_CALL_STATE_P)
	D_TABL		(VAL_)
	D_VAL		(CODIG)
	D_END_OCTET (_3)
D_END			(CALL_STATE_E)

START	(AT4_CALL_STATE_P)
	TABL		(0,6,AT4_T_CALL_STATE,	&i_call_state[0].val)
	VAL			(6,2,CODING_STD_CCITT, &i_call_state[0].coding_std)
	END_OCTET	()
END				(0)

			/* ---------- Called party number (CALLED_NB) */

D_START	(AT4_CALLED_NB_P)
	D_TABL  		(PLAN_)
	D_TABL  		(_TYPE)
	D_EXT_1 		(_3)
	D_TEXT			(IA5_DIGIT_)
D_END				(CALLED_NB_E)

START	(AT4_CALLED_NB_P)
	TABL			(0,4,AT4_T_CALLED_NB_PLAN,  &i_called_nb[0].plan_id)
	TABL			(4,3,AT4_T_CALLED_NB_TYPE,	&i_called_nb[0].nb_type)
	EXT_1			()
	TEXT			(IA5, DIGIT, 	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END	(0)

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(AT4_CALLED_SUB_ADD_P)
	D_TABL  (TYPE)
	D_TABL  (IND)
	D_PAD	(NS_PAD_3)
	D_EXT_1 (_3)

	D_IF_VAL(OSI_SUB_ADD)
		D_VAL		(INFO_SUB_ADD_F)
		D_END_OCTET	(INFO_SUB_ADD_5)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END		(CALLED_SUB_ADD_Q)

START(AT4_CALLED_SUB_ADD_P)
	TABL		(4,3,AT4_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
	TABL		(3,1,AT4_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
	PAD			(0,3)
	EXT_1		()
	IF_VAL  	(I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		VAL		(0,8,		FORMAT_IA5,		&i_called_sub_add[0].format)
		END_OCTET()
		TEXT	(IA5,	 	ANY_CHAR, 		&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
	ELSE		()
		TEXT	(BINARY, 	ANY_OCTET,		&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
	END_IF		()
END	(0)

			/* ---------- Calling party number (CALLING_NB) */

D_START	(AT4_CALLING_NB_P)
		D_TABL		(PLAN)
		D_TABL		(TYPE)

		D_FUNCTION	(CALLING_NB_FCT)

		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (CALLING_NB_E)

START	(AT4_CALLING_NB_P)
		TABL	(0,4,AT4_T_CALLING_NB_PLAN,  	&i_calling_nb[0].plan_id)
		TABL	(4,3,AT4_T_CALLING_NB_TYPE,		&i_calling_nb[0].nb_type)

		FUNCTION(at4_calling_nb_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,AT4_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,AT4_T_CALLING_NB_SCREEN,&i_calling_nb[0].screen_ind)
		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,DIGIT, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(AT4_CALLING_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD	(NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL		(INFO_SUB_ADD_F)
			D_END_OCTET	(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END	(CALLING_SUB_ADD_E)

START	(AT4_CALLING_SUB_ADD_P)
		TABL	(4,3,AT4_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		TABL	(3,1,AT4_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1	()

		IF_VAL  	(I_IF, &i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,		FORMAT_IA5,		&i_calling_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 	ANY_CHAR, 		&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		ELSE		()
			TEXT	(BINARY, 	ANY_OCTET,		&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		END_IF		()
END		(0)

			/* ---------- Cause (CAUSE) */

D_START	(AT4_CAUSE_P)
		D_TABL		(CODING_STD)
		D_PAD		(NS_PAD_3)
		D_TABL		(LOCATION_)
		D_EXT_1		(_3A)
		D_TABL		(C_CLASS_CCITT)
		D_TABX		(C_V_CCITT)
		D_EXT_1		 (_4)
		D_OPTIONAL_OCTET (_LAST_)
		D_TEXT		(DIAG_)
D_END	(CAUSE_E_A)

START	(AT4_CAUSE_P)
		TABL		(5,2,AT4_T_CAUSE_CODING_STD,		&i_cause[0].coding_std)
		PAD			(4,1)
		TABL		(0,4,AT4_T_LOCATION,				&i_cause[0].cause_loc)
		EXT_1		()
		TABL		(4,3,AT4_T_C_C,						&i_cause[0].cause_class)
		TABX		(0,4,AT4_TX_C_V_CCITT,				&i_cause[0].cause_class,  &i_cause[0].cause_val)
		EXT_1		()
		OPTIONAL_OCTET ()
		TEXT		(BINARY, ANY_OCTET,					&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END		(0)

			/* ---------- Change status (CHANGE STATUS) */


D_START (AT4_CHANGE_STATUS_P)
	D_VAL 		(PREF)
	D_PAD		(_3)
	D_TABL		(CHAN_STAT)
	D_EXT_1	(_3_)
D_END	(AT4_CHANGE_STATUS_E)

START (AT4_CHANGE_STATUS_P)
	VAL		(6,1, PREF_B_CHANNEL,	&i_change_status[0].preference)
	PAD		(3,3)
	TABL	(0,3,AT4_T_STATUS,		&i_change_status[0].status)
	EXT_1	()
END (0)

			/* ---------- Channel idendification (CHAN_ID) */

D_START	(AT4_CHAN_ID_P)
	D_TABL			(INT_ID)
	D_VAL 	 		(INT_TYPE)
	D_PAD			(NS_PAD_3)
	D_TABL  		(PREF_EXCL)
	D_TABL			(D_CHAN_)
	D_TABL  		(SEL)
	D_EXT_1 		(_3)
	D_IF_VAL		(_EXP)
		D_TABL 		(_INT_)
		D_EXT_1		(_3_1)
	D_END_IF		(EXP_)
D_END (AT4_CHAN_ID_E)


START	(AT4_CHAN_ID_P)
	TABL			(6,1,AT4_T_CHAN_INT,		&i_chan_id[0].int_id)
	VAL				(5,1,INT_TYPE_PRI,			&i_chan_id[0].int_type)
	PAD				(4,1)
	TABL			(3,1,AT4_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL			(2,1,AT4_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABL			(0,2,AT4_T_CHAN_SEL,		&i_chan_id[0].chan_sel)
	EXT_1   		()

	IF_VAL			(N_IF, &i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		TABL		(0,7,AT4_T_CHAN_INT_VAL,	&i_chan_id[0].int_id_val)
		EXT_1		()
	END_IF			()

END	(at4_chan_id_check)

D_START	(AT4_CHAN_ID_PRI_P)
	D_VAL			(CODING)
	D_TABL  		(NB_MAP)
	D_TABL			(TYPE)
	D_EXT_1 		(_3_2)
	D_IF_VAL		(_MAP)
		D_TEXT  	(_MAPPING)
	D_ELSE			(CHAN_NB_)
		D_TEXT  	(NBER)
	D_END_IF		(MAP_CHAN)
D_END	(CHAN_ID_E)

START	(AT4_CHAN_ID_PRI_P)

	VAL				(5,2,CODING_STD_CCITT,  	&i_chan_id[0].coding_std)
	TABL			(4,1,AT4_T_NB_MAP,			&i_chan_id[0].nb_map)
	TABL			(0,4,AT4_T_CHAN_TYPE,		&i_chan_id[0].chan_type)
	EXT_1			()

	IF_VAL			(I_IF, &i_chan_id[0].nb_map, EQ, CHAN_NUMBER)
		TEXT		(IA5,ANY_OCTET,				&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
	ELSE			()
		TEXT		(BINARY,ANY_OCTET,			&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
	END_IF			()
END (at4_check_chan_nb)

/*--------------------------------------------------------------------------*/

			/* ---------- Congestion level (CONGEST_LEVEL) */

D_START	(AT4_CONGEST_LEVEL_P)
	D_TABL  	(CONG_LEV)
	D_END_OCTET	(CONG_LEV_SO)
D_END   (CONGEST_LEVEL_E)

START	(AT4_CONGEST_LEVEL_P)
	TABL		(0,4,AT4_T_CONGEST_LEVEL,   &i_congest_level[0].congest_level)
	END_OCTET	()
END	 (0)

			/* ---------- Connected party number (CONN_NB) */

D_START	(AT4_CONN_NB_P)
	D_TABL  		(PLAN_)
	D_TABL  		(_TYPE)
	D_EXT_1 		(_3)
	D_TEXT			(IA5_DIGIT_)
D_END				(CONN_NB_E)

START	(AT4_CONN_NB_P)
	TABL			(0,4,AT4_T_CALLED_NB_PLAN,  &i_conn_nb[0].plan_id)
	TABL			(4,3,AT4_T_CALLED_NB_TYPE,  &i_conn_nb[0].nb_type)
	EXT_1			()
	TEXT			(IA5, DIGIT, 	&i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END	(0)


			/* ---------- High layer compatibility (HLC) */

D_START	(AT4_HLC_P)
	D_VAL				(INTERPRETATION)
	D_VAL				(PRESENTATION)
	D_TABL				(CODING_STD)
	D_EXT_1				(_3)

	D_IF_VAL			(IF_4)
		D_TABL			(TELESERVICE)

		D_IF_TABL		(IS_EXT_TELESERVICE)
			D_EXT_0_1	(_4)
			D_TABL		(EXT_TELESERVICE)
		D_END_IF		(IS_EXTENDED)

		D_EXT_1			(_5)
	D_END_IF			(ENDIF_4)

D_END					(HLC_E)

START	(AT4_HLC_P)
	VAL					(2,3,INTER_CCITT_CEPT,		&i_hlc[0].interpretation)
	VAL					(0,2,PRESENTATION_PROFIL,	&i_hlc[0].pres)
	TABL				(5,2,AT4_T_CODING_STD,		&i_hlc[0].coding_std)
	EXT_1				()

	IF_VAL				(I_IF, &i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL			(0,7,AT4_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)

		IF_TABL			(I_IF, &i_hlc[0].teleservice, IN, AT4_T_TELESERVICE_EXT)
			EXT_0_1		()
			TABL		(0,7,AT4_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
		END_IF			()
		EXT_1			()
	END_IF				()

END						(0)

			/* ---------- Low layer compatibility (LLC) */

D_START	(AT4_LLC_P)
	D_TABL		(CODING_STD)
	D_TABL		(TRF_CAP)
	D_FUNCTION	(LLC_3A_SET)
	D_IF_VAL	(LLC_3A_TEST)
		D_EXT_0_1	(LLC_3)
		D_TABL		(OUT_BAND_NEG)
		D_PAD		(NS_PAD_3A)
	D_END_IF (LLC_3A_END_IF)
	D_EXT_1		(_3A)
	D_TABL		(TRF_MODE)
	D_TABX		(TRF_RATE)
	D_FUNCTION  (IF_4AB)

	D_IF_VAL	(_4AB_NOT_DEFAULT)
		D_EXT_0_1	(_4)
		D_VAL	 	(CONFIG)
		D_VAL	 	(EST)
		D_TABL	 	(STRUCT)
		D_FUNCTION	(IF_4B)

		D_IF_VAL	(_4B_NOT_DEFAULT)
			D_EXT_0_1	(_4A)
			D_VAL		(SYMMETRY)
			D_TABX		(DEST_RATE)
		D_END_IF	(E_4B_NOT_DEFAULT)
	D_END_IF	(E_4AB_NOT_DEFAULT)
	D_EXT_1	 	(_4B)

	D_OPTIONAL_OCTET	(_5_6_7)

	D_IF_VAL	(_TRF_RATE_MULTI_RATE)
		D_TABL 	(_T_MULTIPLIER)
		D_EXT_1	(_MULTI)
	D_END_IF		(_N_64)

	D_FUNCTION	(IF_5)
	D_IF_VAL	(LLC_5_PR)

		D_VAL		(LAYER_1)
		D_TABL		(PROTOCOL_1)

			/* V110 */

		D_IF_VAL		(V110)
			D_EXT_0_1	(_5_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_EXT_0_1	(V110_5A)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(V110_PAD_5B)
			D_EXT_0_1	(V110_5B)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_EXT_0_1	(V110_5C)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
		D_END_IF		(ENDIF_V110)

			/* V120 */

		D_IF_VAL		(V120_)
			D_EXT_0_1	(_5_V120)
			D_TABL		(V120_SYN_ASYN)
			D_TABL		(V120_NEGOTIATION)
			D_TABL		(V120_USER_RATE)
			D_EXT_0_1	(V120_5A)
			D_TABL		(V120_HDR)
			D_TABL		(V120_MULTI_FRAME)
			D_TABL		(V120_OP_MODE)
			D_TABL		(V120_LLI)
			D_TABL		(V120_ASSIGN)
			D_TABL		(V120_BAND)
			D_PAD		(V120_PAD_5B)
			D_EXT_0_1	(V120_5B)
			D_TABL		(V120_STOP_BIT)
			D_TABL		(V120_DATA_BIT)
			D_TABL		(V120_PARITY)
			D_EXT_0_1	(V120_5C)
			D_TABL		(V120_DUPLEX)
			D_TABL		(V120_MODEM)
		D_END_IF	(ENDIF_V120)

		D_EXT_1		(_5_)

	D_END_IF	(ENDIF_5_PR)

	D_FUNCTION	(OCTET_6)
	D_IF_VAL	(OCTET_6_PR)
		D_VAL		(L_ID_2)
		D_TABL		(PROTOCOL_ID_2)
		D_EXT_0_1	(_6)
		D_ANY_VAL	(OPTION_2)
		D_EXT_1		(_6A)
	D_END_IF	(ENDIF_6_PR)

	D_FUNCTION	(OCTET_7)
	D_IF_VAL	(OCTET_7_PR)
		D_VAL		(L_ID_3)
		D_TABL		(PROTOCOL_ID_3)
		D_EXT_0_1	(_7)
		D_ANY_VAL	(OPTION_3)
		D_EXT_1		(_7A)
	D_END_IF	(ENDIF_7_PR)

D_END (LLC_E)

START	(AT4_LLC_P)
	TABL	(5,2,AT4_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(0,5,AT4_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)

	FUNCTION(at4_llc_3a_spdu)

	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 ()
		TABL	(6,1,AT4_T_OUT_BAND_NEG,		&i_llc[0].out_band_neg)
		PAD		(0,6)
	END_IF	()
	EXT_1   ()

	TABL	(5,2,AT4_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(0,5,AT4_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
	FUNCTION(at4_llc_4ab_spdu)

	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 ()
		VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
		VAL		(0,2,EST_DEMAND,				&i_llc[0].est)
		TABL	(4,3,AT4_T_STRUCTURE,			&i_llc[0].structure)

		FUNCTION(at4_llc_4b_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_llc[0].symmetry)
			TABX	(0,5,AT4_TX_TRF_RATE,		&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
		END_IF	()
	END_IF	()

	EXT_1	()
	OPTIONAL_OCTET  ()

	IF_VAL		(I_IF, &i_llc[0].trf_rate, EQ, TRF_RATE_MULTI_RATE)
		TABL 	(0,7, AT4_T_MULTIPLIER, &i_llc[0].Multiplier)
		EXT_1	()
	END_IF		()

		/* following octets may be optional in some other circumstances */

	FUNCTION(at4_llc_5_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

		VAL		(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
		TABL	(0,5,AT4_T_PROTOCOL_ID_LLC_1,	&i_llc[0].protocol_id_1)

			/* V110 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			EXT_0_1 ()
			TABL	(6,1,AT4_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,AT4_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,AT4_T_USER_RATE,			&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(5,2,AT4_T_INTER_RATE,			&i_llc[0].inter_rate)
			TABL	(4,1,AT4_T_NIC_TX,				&i_llc[0].tx_nic)
			TABL	(3,1,AT4_T_NIC_RX,				&i_llc[0].rx_nic)
			TABL	(2,1,AT4_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
			TABL	(1,1,AT4_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,AT4_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,AT4_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,AT4_T_PARITY,				&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,AT4_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,AT4_T_MODEM,				&i_llc[0].modem)
		END_IF  ()

			/* V120 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
			EXT_0_1 ()
			TABL	(6,1,AT4_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,AT4_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,AT4_T_USER_RATE,			&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(6,1,AT4_T_HEADER,				&i_llc[0].hdr)
			TABL	(5,1,AT4_T_MULTI_FRAME,			&i_llc[0].multi_frame)
			TABL	(4,1,AT4_T_OP_MODE,				&i_llc[0].op_mode)
			TABL	(3,1,AT4_T_LLI,					&i_llc[0].lli)
			TABL	(2,1,AT4_T_ASSIGN,				&i_llc[0].assign)
			TABL	(1,1,AT4_T_BAND,				&i_llc[0].band)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,AT4_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,AT4_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,AT4_T_PARITY,				&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,AT4_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,AT4_T_MODEM,				&i_llc[0].modem)
		END_IF	()
		EXT_1	()

	END_IF ()	/* octet 5 present */

	FUNCTION(at4_llc_6_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
		VAL		(5,2,LAYER_ID_2,					&i_llc[0].layer_id_2)
		TABL	(0,5,AT4_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
		EXT_0_1 ()
		ANY_VAL	(0,7,								&i_llc[0].option_2)
		EXT_1	()
	END_IF ()	/* octet 6 present */

	FUNCTION(at4_llc_7_spdu)
	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		VAL		(5,2,LAYER_ID_3,					&i_llc[0].layer_id_3)
		TABL	(0,5,AT4_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
		EXT_0_1	()
		ANY_VAL	(0,7,								&i_llc[0].option_3)
		EXT_1	()
	END_IF	()	/* octet 7 present */


END (0)

#if NS_SPF_FACILITY == ON /* { */

			/* ---------- Network-specific facilities (SPF_FAC) */

D_START	(AT4_SPF_FAC_P)
	D_TABL			(NETWORK_ID_LGTH)
	D_END_OCTET		(_3)

	D_IF_VAL		(IF_3)
		D_TABL		(TYPE_NET_ID)
		D_VAL		(PLAN_NET_ID)
		D_EXT_1		(_3_1)
		D_FUNCTION	(NET_ID)
		D_END_OCTET	(_NET)
	D_END_IF		(_3_)

	D_TABL			(SERVICE_)
	D_VAL			(_VAL_6_BITS)
	D_TABL			(_FAC_CODE)

	D_IF_VAL		(IF_PARAM)
		D_IF_VAL	(IF_SERV)
			D_VAL	(_FEAT)
		D_END_IF	(_SERV)
	D_END_IF		(_PARAM)

	D_IF_VAL		(IF_BIN)

		D_IF_VAL	(IF_SERV_)
			D_TABL	(_BIN_SERV_)
		D_ELSE		(_BIN_FE)
			D_TABL	(_BIN_FEAT_)
		D_END_IF	(_SERV_)

	D_END_IF		(_PARAM_)

	D_END_OCTET		(_END)
	D_OPTIONAL_OCTET(_END_)

D_END				(SPF_FAC_E)

START	(AT4_SPF_FAC_P)
	TABL			(0,8,AT4_T_NET_ID_LGTH,			&i_spf_fac[0].net_id_lgth)
	END_OCTET		()

	IF_VAL			(I_IF, &i_spf_fac[0].net_id_lgth, NE, 0)
		TABL		(4,3,AT4_T_NET_ID_TYPE,			&i_spf_fac[0].Net_id_type)
		VAL			(0,4,CARRIER_ID_CODE,	 		&i_spf_fac[0].Net_id_plan)
		EXT_1		()

			/* WARNING !!!!!! That coding does not respect the Q931 */
			/* So, we do not use a TEXT instruction, because it put */
			/* the pointer to the end of IE ... */

		FUNCTION	(at4_spf_fac_spdu)
		END_OCTET	()
	END_IF			()

	TABL			(7,1, AT4_T_PARAMETER_BINARY,	&i_spf_fac[0].action)
	VAL				(6,1, FAC_VAL_6_BITS,			&i_spf_fac[0].expansion)
	TABL			(5,1, AT4_T_FAC_SERV_FEAT,		&i_spf_fac[0].serv_feature)

	IF_VAL			(I_IF, &i_spf_fac[0].action, EQ, SPF_FAC_PARAMETER)

		IF_VAL		(I_IF, &i_spf_fac[0].serv_feature, EQ, FAC_SERVICE)
			VAL		(0,5, FAC_AVAILABLE_FEATURE_IND,&i_spf_fac[0].facility_coding)
		END_IF		()

	END_IF			()

	IF_VAL			(I_IF, &i_spf_fac[0].action, EQ, SPF_FAC_BINARY)

		IF_VAL		(I_IF, &i_spf_fac[0].serv_feature, EQ, FAC_SERVICE)
			TABL	(0,5, AT4_T_BIN_SERVICE, 		&i_spf_fac[0].facility_coding)
		ELSE		()
			TABL	(0,5, AT4_T_BIN_FEATURE, 		&i_spf_fac[0].facility_coding)
		END_IF		()

	END_IF			()

	END_OCTET		()
	OPTIONAL_OCTET	()

END					(at4_end_fac)

#endif /* } */

/*--------------------------------------------------------------------------*/


			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(AT4_PROGRESS_IND_P)
	D_VAL  (CODING_STD)
	D_TABL	(LOCATION)
	D_PAD	(NS_PAD_3)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(AT4_PROGRESS_IND_P)
	VAL		(5,2,CODING_STD_CCITT,			&i_progress_ind[0].coding_std)
	TABL	(0,4,AT4_T_LOCATION,			&i_progress_ind[0].progress_loc)
	PAD		(4,1)
	EXT_1	()
	TABL	(0,7,AT4_T_PROGRESS_IND_DESCR,	&i_progress_ind[0].progress_descr)
	EXT_1	()
END			(0)


			/* ---------- Redirecting number (REDIR_NB) */

D_START	(AT4_REDIR_NB_P)
	D_TABL		(PLAN)
	D_TABL		(TYPE)

	D_FUNCTION	(REDIR_NB_FCT)

	D_IF_VAL(DEFAULT_VAL)
		D_EXT_0_1	(_3)
		D_TABL		(PRESENTATION)
		D_PAD		(NS_PAD_3A)
		D_TABL		(SCREEN_IND)
	D_END_IF(DEF_VAL)

	D_EXT_0_1		(_3A)

	D_TABL		(REASON_REDIR)
	D_PAD		(_3b_)
	D_EXT_1		(_3_OR_3b)
	D_TEXT		(DIGIT_)
D_END	(REDIR_NB_E)

START	(AT4_REDIR_NB_P)
	TABL	(0,4,AT4_T_CALLED_NB_PLAN,  &i_redir_nb[0].plan_id)
	TABL	(4,3,AT4_T_CALLING_NB_TYPE,	&i_redir_nb[0].nb_type)
	FUNCTION(at4_redir_nb_spdu)

	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 ()
		TABL	(5,2,AT4_T_CALLING_NB_PRES, &i_redir_nb[0].pres)
		PAD		(2,3)
		TABL	(0,2,AT4_T_CALLING_NB_SCREEN,&i_redir_nb[0].screen_ind)
	END_IF	()
	EXT_0_1 ()
	TABL	(0,4,AT4_T_REASON_REDIR,	&i_redir_nb[0].reason)
	PAD		(4,3)
	EXT_1	()
	TEXT	(IA5,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END		(0)

			/* ---------- Restart indicator */

D_START		(AT4_RESTART_IND_P)
	D_PAD	(NS_PAD_)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_IND_E)

START		(AT4_RESTART_IND_P)
	PAD		(3,4)
	VAL		(0,3, RI_INDICATED_CHANNEL,		&i_restart_ind[0].restart_class)
	EXT_1	()
END			(0)

			/* ---------- User to user information (UUI) */

D_START	(AT4_UUI_P)
	D_TABL		(PROTOCOL_DISCR)
	D_END_OCTET	(_3)
	D_IF_VAL	(DISCR_IA5)
		D_TEXT  (INFO_IA5)
	D_ELSE		(OTHER_DISCR)
		D_TEXT  (INFO_OTHER)
	D_END_IF	(DISCR)
D_END			(UUI_E)

START	(AT4_UUI_P)
	TABL		(0,8,AT4_T_UUI_PROTOCOL_DISCR,  &i_uui[0].protocol_discr)
	END_OCTET   ()
	IF_VAL		(I_IF, &i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT	(IA5,ANY_CHAR,					&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE		()
		TEXT	(BINARY, ANY_OCTET, 			&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF		()
END				(0)

/*EOF*/
