

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.bv1
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


				/*
				   MACROs and DECLARATIONS used to access the Network
				   Signalling entity (NS) from the user Layer 4 Signalling
				   entity (L4S).
				*/
/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_bv1_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_bv1_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(bv1_,pr), p_off)
#define Isdn_init_bv1_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_bv1(pr,ie)					Get_ie 			(Paste(bv1_,pr), Paste (bv1_, ie))
#define	Isdn_get_val_bv1(pr,ie,fld)			Isdn_get_val	(Paste(bv1_,pr), Paste (bv1_, ie), fld)
#define Isdn_p_str_bv1(pr,ie,fld)			Isdn_p_str		(Paste(bv1_,pr), Paste (bv1_, ie), fld)
#define	Isdn_lgth_str_bv1(pr,ie,fld)		Isdn_lgth_str	(Paste(bv1_,pr), Paste (bv1_, ie), fld)
#define	Isdn_mx_lgth_str_bv1(pr,ie,fld)		Isdn_mx_lgth_str(Paste(bv1_,pr), Paste (bv1_, ie), fld)
#define	P_start_val_ns_bv1(pr,ie)			P_start_val_ns	(Paste(bv1_,pr), Paste (bv1_, ie))
#define	P_val_ns_bv1(ie)					P_val_ns		(Paste(bv1_,ie))
#define Set_offset_bv1(pr,ie)				Set_offset		(Paste(bv1_,pr),Paste(bv1_,ie))
#define	Set_next_ie_bv1(ie)					Set_next_ie		(Paste(bv1_,ie))
#define	Set_val_bv1(ie,fld,val)				Set_val			(Paste(bv1_,ie), fld, val)
#define Set_str_bv1(ie, lv, p_str, mx_sz)	Set_str			(Paste(bv1_,ie), lv, p_str, mx_sz)
#define Set_mem_bv1(ie, lv, p_mem, sz)		Set_mem			(Paste(bv1_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_bv1(pr,ie)	Set_to_next_ie_instance (Paste(bv1_,pr), Paste (bv1_, ie))
#define	Set_val_nil_bv1(ie)					Set_val_nil		(Paste(bv1_,ie))
#define Get_remaining_ie_instance_nb_bv1(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(bv1_,pr), Paste (bv1_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_bv1	ns_offset_t bv1_message_header;
#else
#	define Message_header_offset_bv1
#endif

/*-------------------------------------------------------------------------*/

		/* Structures of the offset area of each primitive interfaces */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ */

struct off_ns_bv1_te_alert_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_alert_rq		off_ns_bv1_alert_rq;
typedef struct off_ns_bv1_te_alert_rq		off_ns_bv1_net_alert_in;

		/* NS_ALERT_IN */

struct off_ns_bv1_te_alert_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_chan_id;				/* channel ID */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_notif_ind;				/* notify indicator */
	ns_offset_t bv1_display;				/* display */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_alert_in		off_ns_bv1_net_alert_rq;
typedef struct off_ns_bv1_te_alert_in		off_ns_bv1_alert_in;

		/* NS_CALL_PROC_RQ */

struct off_ns_bv1_te_call_proc_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_chan_id;				/* channel ID */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
};

typedef struct off_ns_bv1_te_call_proc_rq	off_ns_bv1_call_proc_rq;
typedef struct off_ns_bv1_te_call_proc_rq	off_ns_bv1_net_call_proc_in;

		/* NS_CALL_PROC_IN */

struct off_ns_bv1_te_call_proc_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_chan_id;				/* channel ID */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_display;				/* display */
};

typedef struct off_ns_bv1_te_call_proc_in	off_ns_bv1_net_call_proc_rq;
typedef struct off_ns_bv1_te_call_proc_in	off_ns_bv1_call_proc_in;

		/* NS_CONN_RQ (SETUP) */

struct off_ns_bv1_te_conn_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_bc;						/* bearer capability */
	ns_offset_t bv1_chan_id;				/* channel ID */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_keypad;					/* keypad */
	ns_offset_t bv1_calling_nb;				/* calling number */
	ns_offset_t bv1_calling_sub_add;		/* calling sub-address */
	ns_offset_t bv1_called_nb;				/* called number */
	ns_offset_t bv1_called_sub_add;			/* called sub-address */
	ns_offset_t bv1_llc;					/* low layer compatibility */
	ns_offset_t bv1_hlc;					/* high layer compability */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_conn_rq		off_ns_bv1_conn_rq;
typedef struct off_ns_bv1_te_conn_rq		off_ns_bv1_net_conn_in;

		/* NS_CONN_IN (SETUP) */

struct off_ns_bv1_te_conn_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_bc;						/* bearer capability */
	ns_offset_t bv1_chan_id;				/* channel ID */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_display;				/* display */
	ns_offset_t bv1_keypad;					/* keypad */
	ns_offset_t bv1_calling_nb;				/* calling number (from network) */
	ns_offset_t bv1_calling_sub_add;		/* calling subaddress */
	ns_offset_t bv1_called_nb;				/* called number */
	ns_offset_t bv1_called_sub_add;			/* called subaddress */
	ns_offset_t bv1_redir_nb;				/* redirecting nb */
	ns_offset_t bv1_llc;					/* low layer capability */
	ns_offset_t bv1_hlc;					/* high layer compatibility */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_conn_in		off_ns_bv1_net_conn_rq;
typedef struct off_ns_bv1_te_conn_in		off_ns_bv1_conn_in;

		/* NS_CONN_RS (CONN) */

struct off_ns_bv1_te_conn_rs {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_conn_nb;				/* connected number */
	ns_offset_t bv1_conn_sub_add;			/* connected sub address */
	ns_offset_t bv1_chan_id;				/* channel ID included for support of Annex D */
	ns_offset_t bv1_advice_charge;			/* advice of charge */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_conn_rs		off_ns_bv1_conn_rs;
typedef struct off_ns_bv1_te_conn_rs		off_ns_bv1_net_conn_co;

		/* NS_CONN_CO (CONN or CONN_ACK) */

struct off_ns_bv1_te_conn_co {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_conn_nb;				/* connected number */
	ns_offset_t bv1_conn_sub_add;			/* connected sub address */
	ns_offset_t bv1_chan_id;				/* channel ID */
	ns_offset_t bv1_advice_charge;			/* advice of charge */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_notif_ind;				/* notify indicator */
	ns_offset_t bv1_display;				/* display */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_conn_co		off_ns_bv1_net_conn_rs;
typedef struct off_ns_bv1_te_conn_co		off_ns_bv1_conn_co;

		/* NS_PROGRESS_IN */

struct off_ns_bv1_te_progress_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_display;				/* display */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_progress_in	off_ns_bv1_net_progress_rq;
typedef struct off_ns_bv1_te_progress_in	off_ns_bv1_progress_in;


/*===============    CALL  INFORMATION  PHASE  MESSAGES    ====================*/

		/* NS_RESUME_RQ */

struct off_ns_bv1_te_resume_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_call_id;				/* call identity */
};

typedef struct off_ns_bv1_te_resume_rq		off_ns_bv1_resume_rq;
typedef struct off_ns_bv1_te_resume_rq		off_ns_bv1_net_resume_in;

		/* NS_RESUME_CO */

struct off_ns_bv1_te_resume_co {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_chan_id;				/* channel ID */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_display;				/* display */
};

typedef struct off_ns_bv1_te_resume_co		off_ns_bv1_net_resume_rs;
typedef struct off_ns_bv1_te_resume_co		off_ns_bv1_resume_co;

		/* NS_SUSPEND_RQ */

struct off_ns_bv1_te_suspend_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_call_id;				/* call identity */
};

typedef struct off_ns_bv1_te_suspend_rq		off_ns_bv1_suspend_rq;
typedef struct off_ns_bv1_te_suspend_rq		off_ns_bv1_net_suspend_in;

		/* NS_SUSPEND_CO */

struct off_ns_bv1_te_suspend_co {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_display;				/* display */
};

typedef struct off_ns_bv1_te_suspend_co		off_ns_bv1_net_suspend_rs;
typedef struct off_ns_bv1_te_suspend_co		off_ns_bv1_suspend_co;

		/* NS_USER_INFO_RQ */

struct off_ns_bv1_te_user_info_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_user_info_rq	off_ns_bv1_net_user_info_in;
typedef struct off_ns_bv1_te_user_info_rq	off_ns_bv1_user_info_rq;

		/* NS_USER_INFO_IN */

struct off_ns_bv1_te_user_info_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_user_info_in	off_ns_bv1_net_user_info_rq;
typedef struct off_ns_bv1_te_user_info_in	off_ns_bv1_user_info_in;

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

struct off_ns_bv1_te_clear_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_clear_rq		off_ns_bv1_clear_rq;
typedef struct off_ns_bv1_te_clear_rq		off_ns_bv1_net_clear_in;

		/* NS_CLEAR_IN */

struct off_ns_bv1_te_clear_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_advice_charge;			/* advice of charge */
	ns_offset_t bv1_progress_ind;			/* progress indicator */
	ns_offset_t bv1_display;				/* display */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_clear_in		off_ns_bv1_net_clear_rq;
typedef struct off_ns_bv1_te_clear_in		off_ns_bv1_clear_in;

		/* NS_CLEAR_RS */

struct off_ns_bv1_te_clear_rs {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_uui;					/* user to user information */
};

typedef struct off_ns_bv1_te_clear_rs		off_ns_bv1_clear_rs;
typedef struct off_ns_bv1_te_clear_rs		off_ns_bv1_net_clear_co;

		/* NS_CLEAR_CO */

struct off_ns_bv1_te_clear_co {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_advice_charge;			/* advice of charge */
	ns_offset_t bv1_display;				/* display */
	ns_offset_t bv1_uui;					/* user to user information */
};
typedef struct off_ns_bv1_te_clear_co		off_ns_bv1_net_clear_rs;
typedef struct off_ns_bv1_te_clear_co		off_ns_bv1_clear_co;

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/


		/* NS_CONGEST_CONTROL_IN */

struct off_ns_bv1_te_con_con_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_congest_level;			/* congestion level */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_display;				/* display */
};

typedef struct off_ns_bv1_te_con_con_in		off_ns_bv1_net_con_con_rq;
typedef struct off_ns_bv1_te_con_con_in		off_ns_bv1_con_con_in;

		/* NS_INFO_RQ */

struct off_ns_bv1_te_info_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_keypad;					/* keypad */
};

typedef struct off_ns_bv1_te_info_rq		off_ns_bv1_info_rq;
typedef struct off_ns_bv1_te_info_rq		off_ns_bv1_net_info_in;

		/* NS_INFO_IN */

struct off_ns_bv1_te_info_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_cause;					/* cause */
	ns_offset_t bv1_advice_charge;			/* advice of charge */
	ns_offset_t bv1_display;				/* display */
};

typedef struct off_ns_bv1_te_info_in		off_ns_bv1_net_info_rq;
typedef struct off_ns_bv1_te_info_in		off_ns_bv1_info_in;


		/* NS_NOTIFY_RQ */

struct off_ns_bv1_te_notify_rq {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_notif_ind;				/* notify indicator */
};

typedef struct off_ns_bv1_te_notify_rq		off_ns_bv1_notify_rq;
typedef struct off_ns_bv1_te_notify_rq		off_ns_bv1_net_notify_in;

		/* NS_NOTIFY_IN */

struct off_ns_bv1_te_notify_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_notif_ind;				/* notify indicator */
	ns_offset_t bv1_display;				/* display */
};

typedef struct off_ns_bv1_te_notify_in		off_ns_bv1_net_notify_rq;
typedef struct off_ns_bv1_te_notify_in		off_ns_bv1_notify_in;

		/* NS_RESTART_RS */

struct off_ns_bv1_te_restart_rs {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_chan_id;				/* channel identifier */
	ns_offset_t bv1_restart_ind;			/* restart indicator */
};

typedef struct off_ns_bv1_te_restart_rs		off_ns_bv1_restart_rs;
typedef struct off_ns_bv1_te_restart_rs		off_ns_bv1_net_restart_co;

		/* NS_RESTART_IN */

struct off_ns_bv1_te_restart_in {
	Message_header_offset_bv1				/* message header parameters */
	ns_offset_t bv1_chan_id;				/* channel identifier */
	ns_offset_t bv1_display;				/* display */
	ns_offset_t bv1_restart_ind;			/* restart indicator */
};

typedef struct off_ns_bv1_te_restart_in		off_ns_bv1_net_restart_rq;
typedef struct off_ns_bv1_te_restart_in		off_ns_bv1_restart_in;


		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/

		/* Advice charge (ADVICE_CHARGE) */

struct val_ns_bv1_advice_charge {
	Next_instance_offset
	ie_val		coding_std;							/* coding standard */
	ie_val		cept_std;							/* CEPT standard */
	ie_val		charge_type;						/* indication type */
	ie_val		charge_period;						/* charging period */
	ie_val		charge_period_m;					/* charging period multiplier */
	ie_array	value[BV1_MX_SZ_ADVICE_CHARGE+2];		/* value */
};


		/* Bearer Capability (BC) */

struct val_ns_bv1_bc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
};

		/* Call IDentification (CALL_ID) */

struct val_ns_bv1_call_id {
	Next_instance_offset
	ie_array 	value[BV1_MX_SZ_CALL_ID+2];	/* call identity */
};

		/* Called party number (CALLED_NB) */

struct val_ns_bv1_called_nb {
	Next_instance_offset
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_array 	nb[BV1_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_bv1_called_sub_add {
	Next_instance_offset
	ie_val		sub_add_type;						/* called subaddress type */
	ie_array 	sub_add[BV1_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_bv1_calling_nb {
	Next_instance_offset
	ie_val		nb_type;				/* type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[BV1_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_bv1_calling_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* calling subaddress type */
	ie_array 	sub_add[BV1_MX_SZ_CALLING_SUB_ADD+2];	/* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_bv1_cause {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		cause_loc;				/* location */
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
	ie_array	cause_diag[BV1_MX_SZ_CAUSE_DIAG+2];	/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_bv1_chan_id {
	Next_instance_offset
	ie_val 		int_type;				/* interface type */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val		d_chan;					/* D-channel indicator */
	ie_val 		chan_sel;				/* information channel selection */
	ie_array	chan_nb[BV1_MX_SZ_CHAN_ID+2];	/* channel number */
};


				/* connected party number (CONN_NB) */

struct val_ns_bv1_conn_nb {
	Next_instance_offset
	ie_val 		nb_type;						/* nb type */
	ie_val 		pres;							/* presentation indicator */
	ie_val 		screen_ind;						/* screening indicator */
	ie_array 	nb[BV1_MX_SZ_CONN_NB+2];		/* connected number digits */
};

				/* connected party subaddress (CONN_SUB_ADD) */

struct val_ns_bv1_conn_sub_add {
	Next_instance_offset
	ie_val		sub_add_type;						/* type of subaddress */
	ie_array	sub_add[BV1_MX_SZ_CONN_SUB_ADD+2];	/* sub-add information */
};

		/* Display */

struct val_ns_bv1_display {
	Next_instance_offset
	ie_array 	text[BV1_MX_SZ_DISPLAY+2];		/* display information */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_bv1_hlc {
	Next_instance_offset
	ie_val		coding_std;					/* coding standard */
	ie_val		teleservice;				/* high layer characteristics identification */
};

		/* Keypad */

struct val_ns_bv1_keypad {
	Next_instance_offset
	ie_array 	text[BV1_MX_SZ_KEYPAD+2];			/* keypad information */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_bv1_llc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* destination rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock on transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock on reception (Rx) */
	ie_val		fc_tx;					/* flow control on transmission (Tx) */
	ie_val		fc_rx;					/* flow control on reception (Rx) */
	ie_val		hdr;					/* rate adaption header included or not */
	ie_val		multi_frame;			/* multiple frame establishement support in DL */
	ie_val		op_mode;				/* mode of operation */
	ie_val		lli_negot;				/* logical link identifier negotiation */
	ie_val		assign;					/* assignor/assignee */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits excluding parity if present */
	ie_val		parity;					/* parity information */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user layer 2 protocol information */
	ie_val		option_2;				/* optional layer 2 protocol information */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
	ie_val		option_3;				/* optional layer 3 protocol information */
};

		/* Notification indicator (NOTIF_IND) */

struct val_ns_bv1_notif_ind {
	Next_instance_offset
	ie_val		notif_descr;			/* notification description*/
};


		/* Progress indicator (PROGRESS_IND) */

struct val_ns_bv1_progress_ind {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		progress_loc;			/* location */
	ie_val		progress_descr;			/* progress description */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_bv1_restart_ind {
	Next_instance_offset
	ie_val		restart_class;			/* class */
};


		/* Redirecting number (REDIR_NB) */

struct val_ns_bv1_redir_nb {
	Next_instance_offset
	ie_val		nb_type;				/* calling party type of number */
	ie_val		plan_id;				/* calling party numbering plan identification */
	ie_val		pres;					/* presentation indicator*/
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[BV1_MX_SZ_REDIR_NB+2];	/* redirecting number digits */
};

		/* User-to-user information (UUI) */

struct val_ns_bv1_uui {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array	text[BV1_MX_SZ_UUI+2];		/* user information */
};


/*=========================================================================*/

							/* Information Elements (IE) */

			/*
			   Isdn_bv1_store_bc : store the bearer capability information
								   element :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability.

			*/

#define Isdn_bv1_store_bc(pr, trf_cap_) 						\
				Set_offset_bv1	(pr,	bc);						\
				Set_val_bv1		(bc,	trf_cap,		trf_cap_);	\
				Set_next_ie_bv1	(bc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_called_nb : called number IE

					INPUT :
						- pr				= primitive ID,
						- plan_id_			= numbering plan,
						- nb_				= address of the literal string.
			*/

#define Isdn_bv1_store_called_nb(pr, plan_id_, nb_)					\
		Set_offset_bv1	(pr,		called_nb);										\
		Set_val_bv1		(called_nb,	plan_id,	plan_id_);							\
		Set_str_bv1		(called_nb,	nb,			nb_,		BV1_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_called_sub_add : called sub-address IE

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- sub_add_		= address of the literal string.

			*/

#define Isdn_bv1_store_called_sub_add(pr, sub_add_type_, sub_add_) \
		Set_offset_bv1	(pr,				called_sub_add);						\
		Set_val_bv1		(called_sub_add,	sub_add_type,	sub_add_type_);			\
		Set_str_bv1 	(called_sub_add,	sub_add,		sub_add_, BV1_MX_SZ_CALLED_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nb_type_		   	= numbering type,
						- plan_id_			= numbering plan ID,
						- pres_				= presentation indicator,
						- screen_ind_    	= screening indicator,
						- nb_				= pointer on the calling number literal string.
			*/

#define Isdn_bv1_store_calling_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)	\
		Set_offset_bv1	(pr,			calling_nb);								\
		Set_val_bv1		(calling_nb,	nb_type, 		nb_type_);					\
		Set_val_bv1		(calling_nb,	plan_id, 		plan_id_);					\
		Set_val_bv1		(calling_nb,	pres,			pres_);						\
		Set_val_bv1		(calling_nb,	screen_ind, 	screen_ind_);				\
		Set_str_bv1		(calling_nb,	nb, 			nb_, BV1_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_bv1_calling_sub_add : calling sub-address IE

						INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- sub_add_		= address of the literal string.


			*/

#define Isdn_bv1_store_calling_sub_add(pr, sub_add_type_, sub_add_) \
		Set_offset_bv1	(pr,				calling_sub_add);						\
		Set_val_bv1		(calling_sub_add,	sub_add_type, 	sub_add_type_);			\
		Set_str_bv1		(calling_sub_add,	sub_add,		sub_add_, BV1_MX_SZ_CALLING_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_conn_nb : store connected number IE

					INPUT :
						- pr 				= primitive ID,
						- type_				= type,
						- pres_				= presentation indicator,
						- screen_ind_    	= screening indicator,
						- nb_				= pointer on the connected number literal string.
			*/

#define Isdn_bv1_store_conn_nb(pr, type_, pres_, screen_ind_, nb_)	\
		Set_offset_bv1	(pr,			conn_nb);								\
		Set_val_bv1		(conn_nb,	nb_type,		type_);						\
		Set_val_bv1		(conn_nb,	pres,			pres_);						\
		Set_val_bv1		(conn_nb,	screen_ind, 	screen_ind_);				\
		Set_str_bv1		(conn_nb,	nb, 			nb_, BV1_MX_SZ_CONN_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_bv1_conn_sub_add : connected sub-address IE

						INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- sub_add_		= address of the literal string.


			*/

#define Isdn_bv1_store_conn_sub_add(pr, sub_add_type_, sub_add_) \
		Set_offset_bv1	(pr,				conn_sub_add);						\
		Set_val_bv1		(conn_sub_add,	sub_add_type, 	sub_add_type_);			\
		Set_str_bv1		(conn_sub_add,	sub_add,		sub_add_, BV1_MX_SZ_CONN_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_call_id : call ID

					INPUT :
						- pr	= primitive ID,
						- value_= call ID.

			*/


#define Isdn_bv1_store_call_id(pr, value_)										\
		Set_offset_bv1	(pr,		call_id);										\
		Set_str_bv1		(call_id,	value,	value_,	BV1_MX_SZ_CALL_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_cause : cause IE

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- cause_loc_	= cause location,
						- cause_class_	= cause class,
						- cause_val_	= cause value,
						- cause_diag_	= cause diagnostic.

			*/

#define Isdn_bv1_store_cause(pr, coding_std_, cause_loc_, cause_class_, cause_val_, cause_diag_) \
		Set_offset_bv1	(pr,	cause);												\
		Set_val_bv1		(cause,	coding_std,	coding_std_);	\
		Set_val_bv1		(cause,	cause_loc,	cause_loc_);	\
		Set_val_bv1		(cause,	cause_class,cause_class_);	\
		Set_val_bv1		(cause,	cause_val,	cause_val_);	\
		Set_str_bv1		(cause,	cause_diag,	cause_diag_, BV1_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_bv1_store_chan_id_BRI : store channel ID IE

					INPUT :
						- pr 			= primitive ID,
						- pref_excl_	= preferred channel,
						- d_chan_		= D-channel indicator,
						- chan_sel_		= channel selection,
			*/

#define Isdn_bv1_store_chan_id_BRI(pr, pref_excl_, d_chan_, chan_sel_) \
		Set_offset_bv1	(pr,		chan_id);							\
		Set_val_bv1		(chan_id,	int_type,	INT_TYPE_BRI);			\
		Set_val_bv1		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_bv1		(chan_id,	d_chan,		d_chan_);				\
		Set_val_bv1		(chan_id,	chan_sel,	chan_sel_);				\
		Set_str_bv1		(chan_id,	chan_nb,	P_NIL,		1)

			/*
				 Isdn_bv1_store_chan_id_PRI : store channel ID IE

					INPUT :
						- pr 			= primitive ID,
						- pref_excl_	= preferred channel,
						- d_chan_		= D-channel indicator,
						- chan_sel_		= channel selection,
						- p_chan_nb_	= channel number.
			*/

#define Isdn_bv1_store_chan_id_PRI(pr, pref_excl_, d_chan_, chan_sel_, p_chan_nb_) \
		Set_offset_bv1	(pr,		chan_id);							\
		Set_val_bv1		(chan_id,	int_type,	INT_TYPE_PRI);			\
		Set_val_bv1		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_bv1		(chan_id,	d_chan,		d_chan_);				\
		Set_val_bv1		(chan_id,	chan_sel,	chan_sel_);				\
		Set_str_bv1		(chan_id,	chan_nb,	p_chan_nb_,		BV1_MX_SZ_CHAN_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_display : display IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_bv1_store_display(pr,	p_text)										\
		Set_offset_bv1	(pr,		display);										\
		Set_str_bv1		(display,	text,	p_text,	BV1_MX_SZ_DISPLAY+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_hlc : high layer compatibility for
										non-CCITT coding standard

					INPUT :
						- pr		= primitive ID,
						- std		= coding standard,
						- tele      = teleservice,
			*/

#define Isdn_bv1_store_hlc(pr, std, tele)					\
		Set_offset_bv1	(pr,	hlc);							\
		Set_val_bv1		(hlc,	coding_std,			std);		\
		Set_val_bv1		(hlc,	teleservice,		tele);		\
		Set_next_ie_bv1	(hlc)

			/*
				Isdn_bv1_store_hlc_CCITT : high layer compatibility for
										CCITT coding standard

					INPUT :
						- pr		= primitive ID,
						- tele      = teleservice,
			*/

#define Isdn_bv1_store_hlc_CCITT(pr, tele)				\
		Isdn_bv1_store_hlc	(pr, CODING_STD_CCITT, tele)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_bv1_store_keypad(pr,p_text)										\
		Set_offset_bv1	(pr,		keypad);										\
		Set_str_bv1		(keypad,	text,	p_text,	BV1_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_bv1_store_llc : low layer compatibility

			   First definition : in one part :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_bv1_store_llc(pr,coding_std_, trf_cap_, trf_mode_, trf_rate_, structure_, dest_rate_,	protocol_id_1_,	syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	hdr_, multi_frame_,	op_mode_, lli_negot_, assign_, stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	option_2_, protocol_id_3_, option_3_) \
		Set_offset_bv1	(pr,	llc);										\
		Set_val_bv1		(llc,	coding_std,		coding_std_);				\
		Set_val_bv1		(llc,	trf_cap,		trf_cap_);					\
		Set_val_bv1		(llc,	trf_mode,		trf_mode_);					\
		Set_val_bv1		(llc,	trf_rate,		trf_rate_);					\
		Set_val_bv1		(llc,	structure,		structure_);				\
		Set_val_bv1		(llc,	dest_rate,		dest_rate_);				\
		Set_val_bv1		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_bv1		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_bv1		(llc,	negotiation,	negotiation_);				\
		Set_val_bv1		(llc,	user_rate,		user_rate_);				\
		Set_val_bv1		(llc,	inter_rate,		inter_rate_);				\
		Set_val_bv1		(llc,	nic_tx,			nic_tx_);					\
		Set_val_bv1		(llc,	nic_rx,			nic_rx_);					\
		Set_val_bv1		(llc,	fc_tx,			fc_tx_);					\
		Set_val_bv1		(llc,	fc_rx,			fc_rx_);					\
		Set_val_bv1		(llc,	hdr,			hdr_);						\
		Set_val_bv1		(llc,	multi_frame,	multi_frame_);				\
		Set_val_bv1		(llc,	op_mode,		op_mode_);					\
		Set_val_bv1		(llc,	lli_negot,		lli_negot_);				\
		Set_val_bv1		(llc,	assign,			assign_);					\
		Set_val_bv1		(llc,	stop_bit,		stop_bit_);					\
		Set_val_bv1		(llc,	data_bit,		data_bit_);					\
		Set_val_bv1		(llc,	parity,			parity_);					\
		Set_val_bv1		(llc,	duplex,			duplex_);					\
		Set_val_bv1		(llc,	modem,			modem_);					\
		Set_val_bv1		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_bv1		(llc,	option_2,		option_2_);					\
		Set_val_bv1		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_val_bv1		(llc,	option_3,		option_3_);					\
		Set_next_ie_bv1	(llc)



			/*--------------------------------------------*/


			/*
			   Isdn_bv1_store_llc : low layer compatibility

			   Second definition : DIVIDED IN 2 PARTS for compilers which
			   do not accept so many parameters in macros :

					Isdn_bv1_store_llc_1_4 : octet 1 to octet 4 included,

						INPUT :
							- pr			= primitive ID,
							- coding_std_	= coding standard,
							- trf_cap_		= information transfer capability,
							- trf_mode_		= transfer mode,
							- trf_rate_		= information transfer rate,
							- structure_	= structure,
							- dest_rate_	= destination rate,

					Isdn_bv1_store_llc_5_7 : octet 5 to octet 7 included,

						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_bv1_store_llc_1_4(pr,coding_std_, trf_cap_, trf_mode_, trf_rate_, structure_, dest_rate_)\
		Set_offset_bv1	(pr,	llc);										\
		Set_val_bv1		(llc,	coding_std,		coding_std_);				\
		Set_val_bv1		(llc,	trf_cap,		trf_cap_);					\
		Set_val_bv1		(llc,	trf_mode,		trf_mode_);					\
		Set_val_bv1		(llc,	trf_rate,		trf_rate_);					\
		Set_val_bv1		(llc,	structure,		structure_);				\
		Set_val_bv1		(llc,	dest_rate,		dest_rate_)

#define Isdn_bv1_store_llc_5_7(protocol_id_1_,	syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	hdr_, multi_frame_,	op_mode_, lli_negot_, assign_, stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	option_2_, protocol_id_3_, option_3_) \
		Set_val_bv1		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_bv1		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_bv1		(llc,	negotiation,	negotiation_);				\
		Set_val_bv1		(llc,	user_rate,		user_rate_);				\
		Set_val_bv1		(llc,	inter_rate,		inter_rate_);				\
		Set_val_bv1		(llc,	nic_tx,			nic_tx_);					\
		Set_val_bv1		(llc,	nic_rx,			nic_rx_);					\
		Set_val_bv1		(llc,	fc_tx,			fc_tx_);					\
		Set_val_bv1		(llc,	fc_rx,			fc_rx_);					\
		Set_val_bv1		(llc,	hdr,			hdr_);						\
		Set_val_bv1		(llc,	multi_frame,	multi_frame_);				\
		Set_val_bv1		(llc,	op_mode,		op_mode_);					\
		Set_val_bv1		(llc,	lli_negot,		lli_negot_);				\
		Set_val_bv1		(llc,	assign,			assign_);					\
		Set_val_bv1		(llc,	stop_bit,		stop_bit_);					\
		Set_val_bv1		(llc,	data_bit,		data_bit_);					\
		Set_val_bv1		(llc,	parity,			parity_);					\
		Set_val_bv1		(llc,	duplex,			duplex_);					\
		Set_val_bv1		(llc,	modem,			modem_);					\
		Set_val_bv1		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_bv1		(llc,	option_2,		option_2_);					\
		Set_val_bv1		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_val_bv1		(llc,	option_3,		option_3_);					\
		Set_next_ie_bv1	(llc)


			/*--------------------------------------------*/


			/*
			   Isdn_bv1_store_llc_V110 : low layer compatibility for
											V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_bv1_store_llc_V110(pr, coding_std_, trf_cap_, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_bv1_store_llc_1_4(pr,			coding_std_,	trf_cap_,			\
							trf_mode_,		trf_rate_,			\
							structure_,		dest_rate_);						\
		Isdn_bv1_store_llc_5_7(PROTOCOL_ID_1_V110,	syn_asyn_,	negotiation_,	\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		fc_tx_,			fc_rx_,				\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,						\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							BYTE_VAL_NIL,	protocol_id_3_,	BYTE_VAL_NIL)


/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_llc_v110_syn : llc V110 synchronous IE.

					INPUT :
						- out_neg 	= out band negociation
						- nego		= negotiation,
						- rate		= user rate,
						- tx 		= NIC on Tx,
						- rx		= NIC on Rx,
						- protocol_2= protocol ID layer 2,
						- protocol_3= protocol ID layer 3.

			*/

#define Isdn_bv1_store_llc_v110_syn(pr, nego, rate, tx, rx, protocol_2, protocol_3) \
				Set_offset_bv1	(pr,	llc);									\
				Set_val_nil_bv1	(llc);											\
				Set_val_bv1		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_bv1		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_bv1		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_bv1		(llc,	structure,		STRUCTURE_8KHZ_INT);	\
				Set_val_bv1		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_bv1		(llc,	protocol_id_1,	PROTOCOL_ID_1_V110);	\
				Set_val_bv1		(llc,	syn_asyn,		SYN);					\
				Set_val_bv1		(llc,	negotiation,	nego);					\
				Set_val_bv1		(llc,	user_rate,		rate);					\
				Set_val_bv1		(llc,	nic_tx,			tx);					\
				Set_val_bv1		(llc,	nic_rx,			rx);					\
				Set_val_bv1		(llc,	protocol_id_2,	protocol_2);			\
				Set_val_bv1		(llc,	protocol_id_3,	protocol_3);			\
				Set_next_ie_bv1 (llc)


			/*--------------------------------------------*/


			/*
			   Isdn_bv1_store_llc_V120 : low layer compatibility for
											V120 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_bv1_store_llc_V120(pr, coding_std_, trf_cap_, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_bv1_store_llc_1_4(pr,			coding_std_,	trf_cap_,			\
							trf_mode_,		trf_rate_,			\
							structure_,		dest_rate_);						\
		Isdn_bv1_store_llc_5_7(PROTOCOL_ID_1_V120,								\
							syn_asyn_,		negotiation_,	user_rate_,			\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	hdr_,				\
							multi_frame_,	op_mode_,		lli_negot_,			\
							assign_,		stop_bit_,							\
							data_bit_,		parity_,		duplex_,			\
							modem_,			protocol_id_2_, BYTE_VAL_NIL,		\
							protocol_id_3_,	BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_notif_ind : notification indicator

					INPUT :
						- pr	= primitive ID,
						- descr	= description.

			*/

#define Isdn_bv1_store_notif_ind(pr, descr)										\
		Set_offset_bv1	(pr,		notif_ind);										\
		Set_val_bv1		(notif_ind,	notif_descr,	descr);							\
		Set_next_ie_bv1	(notif_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_progress_ind : progress indicator

					INPUT :
						- pr				= primitive ID,
						- coding_std_		= coding standard,
						- progress_loc_		= location,
						- progress_descr_	= description.

			*/

#define Isdn_bv1_store_progress_ind(pr, coding_std_, progress_loc_, progress_descr_) \
		Set_offset_bv1	(pr,			progress_ind);								\
		Set_val_bv1		(progress_ind,	coding_std,		coding_std_);				\
		Set_val_bv1		(progress_ind,	progress_loc,	progress_loc_);				\
		Set_val_bv1		(progress_ind,	progress_descr,	progress_descr_);			\
		Set_next_ie_bv1	(progress_ind)


/*-------------------------------------------------------------------------*/
			/*
				Isdn_bv1_store_redir_nb : store redir number IE

					INPUT :
						- pr 				= primitive ID,
						- nb_type_		   	= numbering type,
						- plan_id_			= numbering plan ID,
						- pres_				= presentation indicator,
						- screen_ind_    	= screening indicator,
						- nb_				= pointer on the redir number literal string.
			*/

#define Isdn_bv1_store_redir_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)	\
		Set_offset_bv1	(pr,			redir_nb);								\
		Set_val_bv1		(redir_nb,	nb_type, 		nb_type_);					\
		Set_val_bv1		(redir_nb,	plan_id, 		plan_id_);					\
		Set_val_bv1		(redir_nb,	pres,			pres_);						\
		Set_val_bv1		(redir_nb,	screen_ind, 	screen_ind_);				\
		Set_str_bv1		(redir_nb,	nb, 			nb_, BV1_MX_SZ_REDIR_NB+1)
/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_bv1_store_restart_ind(pr, class_)									\
		Set_offset_bv1	(pr,			restart_ind);								\
		Set_val_bv1		(restart_ind,	restart_class,	class_);					\
		Set_next_ie_bv1	(restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bv1_store_uui : user to user information IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator,
						- p_text 			= address of the user info.
			*/

#define Isdn_bv1_store_uui(pr, protocol_discr_, p_text)							\
		Set_offset_bv1	(pr,	uui);												\
		Set_val_bv1		(uui,	protocol_discr,	protocol_discr_);					\
		Set_str_bv1		(uui, 	text,	p_text,	BV1_MX_SZ_UUI+1)

/*EOF*/

