/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - mp_ie.bv1
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	bv1_bc_spdu			(Void_parm);
	uchar	bv1_cause_spdu		(Void_parm);
	uchar	bv1_chan_id_spdu	(Void_parm);
	uchar   bv1_llc_4ab_spdu	(Void_parm);
	uchar   bv1_llc_4b_spdu		(Void_parm);
	uchar	bv1_llc_5_spdu		(Void_parm);
	uchar	bv1_llc_6_spdu		(Void_parm);
	uchar	bv1_llc_7_spdu		(Void_parm);
	uchar	bv1_progress_spdu	(Void_parm);
	uchar	bv1_restart_spdu	(Void_parm);

#endif

			/* ---------- Bearer capability (BC) */

D_START	(BV1_BC_P)

		D_VAL	(BC_CODING_STD)
		D_TABL	(BC_TRF_CAP)
		D_EXT_1	(BC_3)
		D_VAL	(BC_TRF_MODE)
		D_VAL	(BC_TRF_RATE)
		D_EXT_1	(BC_4)

		D_IF_VAL 	(BC_IF_5)
			D_VAL	(BC_LAYER_ID)
			D_VAL	(BC_PROTOCOL_ID)
			D_EXT_1	(BC_5)
		D_END_IF	(_IF)

D_END	(END_SPDU)

START	(BV1_BC_P)

		VAL		(5,2,	CODING_STD_CCITT,	&i_bc[0].coding_std)
		TABL	(0,5,	BV1_T_TRF_CAP_BC,	&i_bc[0].trf_cap)
		EXT_1	()
		VAL		(5,2,	TRF_MODE_CIRCUIT,	&i_bc[0].trf_mode)
		VAL		(0,5,	TRF_RATE_64KBS,		&i_bc[0].trf_rate)
		EXT_1	()

		IF_VAL	(I_IF, &i_bc[0].trf_cap, NE, TRF_CAP_UNRESTRICTED)
			VAL		(5,2,	LAYER_ID_1,		&i_bc[0].layer_id_1)
			VAL		(0,5,	PROTOCOL_ID_1_G711_A, &i_bc[0].protocol_id_1)
			EXT_1	()
		END_IF	()

END		(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Call_identity (CALL_ID) */

D_START	(BV1_CALL_ID_P)
	D_TEXT  (CALL_ID_VAL)
D_END   (CALL_ID_E)

START	(BV1_CALL_ID_P)
	TEXT	(IA5, ANY_CHAR, &i_call_id[0].lgth, (uchar **)&i_call_id[0].p_val)
END	 (0)

/*--------------------------------------------------------------------------*/

			/* ---------- Call state (CALL_STATE) */

D_START	(BV1_CALL_STATE_P)
	D_TABL	  (CODING_STD)
	D_TABL	  (VAL_)
	D_END_OCTET (_3)
D_END   (CALL_STATE_E)

START	(BV1_CALL_STATE_P)
	TABL		(6,2,BV1_T_CODING_STD,		&i_call_state[0].coding_std)
	TABL		(0,6,BV1_T_CALL_STATE,		&i_call_state[0].val)
	END_OCTET   ()
END	 (0)


/*--------------------------------------------------------------------------*/

			/* ---------- Called party number (CALLED_NB) */

D_START	(BV1_CALLED_NB_P)
		D_IF_VAL	(DIRECTION_TO_DCHANNEL)
			D_VAL	(TYPE_UNKNOWN)
		D_ELSE		(DIRECTION_FROM_DCHANNEL)
			D_VAL	(TYPE_NATIONAL)
		D_END_IF	(IF_DIRECTION)
		D_TABL  	(PLAN_ID)
		D_EXT_1 	(_3)
		D_TEXT  	(DIGIT_)
D_END   (CALLED_NB_E)

START	(BV1_CALLED_NB_P)
		IF_VAL		(N_IF, &direction, EQ, TO_D_CHANNEL)
			VAL		(4,3,NB_UNKNOWN,			&i_called_nb[0].nb_type)
		ELSE		()
			VAL		(4,3,NB_NATIONAL,			&i_called_nb[0].nb_type)
		END_IF		()
		TABL		(0,4,BV1_T_CALLED_NB_PLAN,  &i_called_nb[0].plan_id)
		EXT_1   	()
		TEXT		(IA5, ANY_CHAR, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END	 (0)

/*--------------------------------------------------------------------------*/

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(BV1_CALLED_SUB_ADD_P)
		D_TABL  (TYPE)
		D_PAD   (NS_PAD_4)
		D_EXT_1 (_3)
		D_TEXT  (INFO_)
D_END   (CALLED_SUB_ADD_Q)

START	(BV1_CALLED_SUB_ADD_P)
		TABL	(4,3,BV1_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
		PAD		(0,4)
		EXT_1   ()
		TEXT	(BINARY, ANY_OCTET, 		&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
END		(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Calling party number (CALLING_NB) */

D_START	(BV1_CALLING_NB_P)
		D_TABL		(TYPE)
		D_TABL		(PLAN_ID)

		D_IF_VAL(_FORM_D_CHANNEL_)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (CALLING_NB_E)

START	(BV1_CALLING_NB_P)
		TABL	(4,3,BV1_T_CALLING_NB_TYPE_RESTR,	&i_calling_nb[0].nb_type)
		TABL	(0,4,BV1_T_CALLING_NB_PLAN, 		&i_calling_nb[0].plan_id)

		IF_VAL	(N_IF, &direction, EQ, FROM_D_CHANNEL)
			EXT_0_1 ()
			TABL	(5,2,BV1_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,BV1_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,ANY_CHAR, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(BV1_CALLING_SUB_ADD_P)
		D_TABL  (TYPE)
		D_PAD   (NS_PAD_4)
		D_EXT_1 (_3)
		D_TEXT  (INFO_)
D_END   (CALLING_SUB_ADD_E)

START	(BV1_CALLING_SUB_ADD_P)
		TABL	(4,3,BV1_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		PAD		(0,4)
		EXT_1   ()
		TEXT	(BINARY, ANY_OCTET,			&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
END		(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Cause (CAUSE) */

D_START	(BV1_CAUSE_P)
		D_TABL	(CODING_STD)
		D_PAD	(NS_PAD_3)
		D_TABL	(LOCATION)
		D_EXT_1	(_3A)

		D_TABL		(C_CLASS)
		D_IF_VAL	(CODING_STD_CCITT_V)
			D_TABX	(C_VAL_CCITT)
		D_ELSE		(CODING_STD_NATIONAL_V)
			D_TABX	(C_VAL_NATIONAL)
		D_END_IF	(_IF)
		D_EXT_1		(_4)
D_END   (CAUSE_E_A)

START	(BV1_CAUSE_P)
		TABL		(5,2,BV1_T_CODING_STD_RESTR,	&i_cause[0].coding_std)
		PAD			(4,1)
		TABL		(0,4,BV1_T_LOCATION,			&i_cause[0].cause_loc)
		EXT_1   	()
		TABL		(4,3,BV1_T_C_C,					&i_cause[0].cause_class)

		IF_VAL		(I_IF,&i_cause[0].coding_std, EQ, CODING_STD_CCITT)
			TABX	(0,4,BV1_TX_C_V_CCITT,			&i_cause[0].cause_class,  &i_cause[0].cause_val)
		ELSE		()
			TABX	(0,4,BV1_TX_C_V_NATIONAL,		&i_cause[0].cause_class,  &i_cause[0].cause_val)
		END_IF		()

		EXT_1   ()
END	 (bv1_cause_spdu)

D_START	(BV1_DIAG_P)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(BV1_DIAG_P)
	TEXT	(BINARY, ANY_OCTET, &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

/*--------------------------------------------------------------------------*/

			/* ---------- Channel idendification (CHAN_ID) */

D_START	(BV1_CHAN_ID_P)
	D_VAL   (INT_ID)
	D_TABL  (INT_TYPE)
	D_PAD   (NS_PAD_3)
	D_TABL  (PREF_EXCL)
	D_TABL  (D_CHAN_)
	D_TABX  (SEL)
	D_EXT_1 (_3)
D_END   (CHAN_ID_E)

START	(BV1_CHAN_ID_P)
	VAL		(6,1,INT_ID_IMPLICIT,		&i_chan_id[0].int_id)
	TABL	(5,1,BV1_T_INT_TYPE,		&i_chan_id[0].int_type)
	PAD		(4,1)
	TABL	(3,1,BV1_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL	(2,1,BV1_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABX	(0,2,BV1_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	EXT_1   ()
END	(bv1_chan_id_spdu)

	/*-----*/

	/* PRI-type chan_id */

D_START	(BV1_CHAN_ID_PRI_P)
	D_VAL	(CODING)
	D_VAL   (NB_MAP)
	D_VAL	(TYPE)
	D_EXT_1 (_3_2)
	D_TEXT  (NBER)
D_END   (CHAN_ID_PRI_E)

START	(BV1_CHAN_ID_PRI_P)
	VAL		(5,2,CODING_STD_CCITT,  &i_chan_id[0].coding_std)
	VAL		(4,1,CHAN_NUMBER,   	&i_chan_id[0].nb_map)
	VAL		(0,4,B_CHAN,			&i_chan_id[0].chan_type)
	EXT_1	()
	TEXT	(IA5,ANY_OCTET,			&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
END	(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Congestion level (CONGEST_LEVEL) */

D_START	(BV1_CONGEST_LEVEL_P)
	D_VAL  	(CONG_LEV)
	D_END_OCTET	(CONG_LEV_SO)
D_END   (CONGEST_LEVEL_E)

START	(BV1_CONGEST_LEVEL_P)
	VAL		(0,4,RECEIVER_NOT_READY,   &i_congest_level[0].congest_level)
	END_OCTET	()
END	 (0)

/*--------------------------------------------------------------------------*/

			/* ---------- Display (DISPLAY) */

D_START	(BV1_DISPLAY_P)
	D_TEXT  (INFO_)
D_END   (DISPLAY_E)

START	(BV1_DISPLAY_P)
	TEXT	(IA5,ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END	 (0)


/*--------------------------------------------------------------------------*/

			/* ---------- High layer compatibility (HLC) */

D_START	(BV1_HLC_P)
		D_TABL		(CODING_STD)
		D_VAL		(INTERPRETATION)
		D_VAL		(PRESENTATION)
		D_EXT_1		(_3)
		D_TABL		(TELESERVICE)
		D_EXT_1		(_IE_)
D_END				(HLC_E)

START	(BV1_HLC_P)
		TABL		(5,2,BV1_T_CODING_STD_RESTR,	&i_hlc[0].coding_std)
		VAL			(2,3,INTER_CCITT_CEPT,			&i_hlc[0].interpretation)
		VAL			(0,2,PRESENTATION_PROFIL	,	&i_hlc[0].pres)
		EXT_1		()
		TABL		(0,7,BV1_T_TELESERVICE_CCITT,   &i_hlc[0].teleservice)
		EXT_1		()
END					(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Keypad (KEYPAD) */

D_START	(BV1_KEYPAD_P)
	D_TEXT  (VAL_)
D_END		(KEYPAD_E)

START	(BV1_KEYPAD_P)
	TEXT	(IA5,ANY_CHAR, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END			(0)


/*--------------------------------------------------------------------------*/

			/* ---------- Low layer compatibility (LLC) */

D_START	(BV1_LLC_P)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_EXT_0_1	(_3)
		D_VAL		(OUT_BAND_NEG)
		D_PAD		(NS_PAD_3A)
		D_EXT_1		(_3A)
		D_TABL		(TRF_MODE)
		D_TABX		(TRF_RATE)
		D_FUNCTION  (IF_4AB)

		D_IF_VAL	(_4AB_NOT_DEFAULT)
			D_EXT_0_1	(_4)
			D_TABL	 	(STRUCT)
			D_VAL	 	(CONFIG)
			D_VAL	 	(EST)
			D_FUNCTION	(IF_4B)

			D_IF_VAL	(_4B_NOT_DEFAULT)
				D_EXT_0_1	(_4A)
				D_VAL		(SYMMETRY)
				D_TABX		(DEST_RATE)
			D_END_IF	(E_4B_NOT_DEFAULT)
		D_END_IF	(E_4AB_NOT_DEFAULT)
		D_EXT_1	 	(_4B)

		D_OPTIONAL_OCTET	(_5_6_7)

		D_FUNCTION	(IF_5)
		D_IF_VAL	(LLC_5_PR)

			D_VAL		(LAYER_1)
			D_TABL		(PROTOCOL_1)

				/* V110 */

			D_IF_VAL		(V110)
				D_EXT_0_1	(_5_V110)
				D_TABL		(V110_SYN_ASYN)
				D_TABL		(V110_NEGOTIATION)
				D_TABL		(V110_USER_RATE)
				D_EXT_0_1	(V110_5A)
				D_TABL		(V110_INTER_RATE)
				D_TABL		(V110_TX_NIC)
				D_TABL		(V110_RX_NIC)
				D_TABL		(V110_TX_FC)
				D_TABL		(V110_RX_FC)
				D_PAD		(V110_PAD_5B)
				D_EXT_0_1	(V110_5B)
				D_TABL		(V110_STOP_BIT)
				D_TABL		(V110_DATA_BIT)
				D_TABL		(V110_PARITY)
				D_EXT_0_1	(V110_5C)
				D_TABL		(V110_DUPLEX)
				D_TABL		(V110_MODEM)
			D_END_IF		(ENDIF_V110)

				/* V120 */

			D_IF_VAL		(V120_)
				D_EXT_0_1	(_5_V120)
				D_TABL		(V120_SYN_ASYN)
				D_TABL		(V120_NEGOTIATION)
				D_TABL		(V120_USER_RATE)
				D_EXT_0_1	(V120_5A)
				D_TABL		(V120_HDR)
				D_TABL		(V120_MULTI_FRAME)
				D_TABL		(V120_OP_MODE)
				D_TABL		(V120_LLI)
				D_TABL		(V120_ASSIGN)
				D_VAL		(V120_BAND_LL0)
				D_PAD		(V120_PAD_5B)
				D_EXT_0_1	(V120_5B)
				D_TABL		(V120_STOP_BIT)
				D_TABL		(V120_DATA_BIT)
				D_TABL		(V120_PARITY)
				D_EXT_0_1	(V120_5C)
				D_TABL		(V120_DUPLEX)
				D_TABL		(V120_MODEM)
			D_END_IF	(ENDIF_V120)

			D_EXT_1		(_5_)

			D_FUNCTION	(OCTET_6)
			D_IF_VAL	(OCTET_6_PR)
				D_VAL		(L_ID_2)
				D_TABL		(PROTOCOL_ID_2)
				D_EXT_0_1	(_6)
				D_ANY_VAL	(OPTION_2)
				D_EXT_1		(_6A)
			D_END_IF	(ENDIF_6_PR)

			D_FUNCTION	(OCTET_7)
			D_IF_VAL	(OCTET_7_PR)
				D_VAL		(L_ID_3)
				D_TABL		(PROTOCOL_ID_3)
				D_EXT_0_1	(_7)
				D_ANY_VAL	(OPTION_3)
				D_EXT_1		(_7A)
			D_END_IF	(ENDIF_7_PR)
		D_END_IF	(ENDIF_5_PR)

D_END (LLC_E)

START	(BV1_LLC_P)
		TABL	(5,2,BV1_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(0,5,BV1_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
		EXT_0_1 ()
		VAL		(6,1,OUT_BAND_NOT_POSSIBLE,			&i_llc[0].out_band_neg)
		PAD		(0,6)
		EXT_1   ()
		TABL	(5,2,BV1_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABX	(0,5,BV1_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
		FUNCTION(bv1_llc_4ab_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(4,3,BV1_T_STRUCTURE,			&i_llc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
			VAL		(0,2,EST_DEMAND,				&i_llc[0].est)

			FUNCTION(bv1_llc_4b_spdu)
			IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1 ()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_llc[0].symmetry)
				TABX	(0,5,BV1_TX_TRF_RATE,			&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
			END_IF	()
		END_IF	()
		EXT_1	()

		OPTIONAL_OCTET  ()

			/* following octets may be optional in some other circumstances */

		FUNCTION(bv1_llc_5_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,					&i_llc[0].layer_id_1)
			TABL	(0,5,BV1_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)

				/* V110 */

			IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1 ()
				TABL	(6,1,BV1_T_SYN_ASYN,			&i_llc[0].syn_asyn)
				TABL	(5,1,BV1_T_NEGOTIATION,			&i_llc[0].in_band_neg)
				TABL	(0,5,BV1_T_USER_RATE,			&i_llc[0].user_rate)
				EXT_0_1 ()
				TABL	(5,2,BV1_T_INTER_RATE,			&i_llc[0].inter_rate)
				TABL	(4,1,BV1_T_NIC_TX,				&i_llc[0].tx_nic)
				TABL	(3,1,BV1_T_NIC_RX,				&i_llc[0].rx_nic)
				TABL	(2,1,BV1_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
				TABL	(1,1,BV1_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,BV1_T_STOP_BIT,			&i_llc[0].stop_bit)
				TABL	(3,2,BV1_T_DATA_BIT,			&i_llc[0].data_bit)
				TABL	(0,3,BV1_T_PARITY,				&i_llc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,BV1_T_DUPLEX,				&i_llc[0].duplex)
				TABL	(0,6,BV1_T_MODEM,				&i_llc[0].modem)
			END_IF  ()

				/* V120 */

			IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
				EXT_0_1 ()
				TABL	(6,1,BV1_T_SYN_ASYN,			&i_llc[0].syn_asyn)
				TABL	(5,1,BV1_T_NEGOTIATION,			&i_llc[0].in_band_neg)
				TABL	(0,5,BV1_T_USER_RATE,			&i_llc[0].user_rate)
				EXT_0_1 ()
				TABL	(6,1,BV1_T_HEADER,				&i_llc[0].hdr)
				TABL	(5,1,BV1_T_MULTI_FRAME,			&i_llc[0].multi_frame)
				TABL	(4,1,BV1_T_OP_MODE,				&i_llc[0].op_mode)
				TABL	(3,1,BV1_T_LLI,					&i_llc[0].lli)
				TABL	(2,1,BV1_T_ASSIGN,				&i_llc[0].assign)
				VAL		(1,1,LL0,						&i_llc[0].band)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,BV1_T_STOP_BIT,			&i_llc[0].stop_bit)
				TABL	(3,2,BV1_T_DATA_BIT,			&i_llc[0].data_bit)
				TABL	(0,3,BV1_T_PARITY,				&i_llc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,BV1_T_DUPLEX,				&i_llc[0].duplex)
				TABL	(0,6,BV1_T_MODEM,				&i_llc[0].modem)
			END_IF	()
			EXT_1	()

			FUNCTION(bv1_llc_6_spdu)
			IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
				VAL		(5,2,LAYER_ID_2,				&i_llc[0].layer_id_2)
				TABL	(0,5,BV1_T_PROTOCOL_ID_LLC_2,	&i_llc[0].protocol_id_2)
				EXT_0_1 ()
				ANY_VAL	(0,7,							&i_llc[0].option_2)
				EXT_1   ()
			END_IF ()	/* octet 6 present */

			FUNCTION(bv1_llc_7_spdu)
			IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
				VAL		(5,2,LAYER_ID_3,				&i_llc[0].layer_id_3)
				TABL	(0,5,BV1_T_PROTOCOL_ID_LLC_3,	&i_llc[0].protocol_id_3)
				EXT_0_1	()
				ANY_VAL	(0,7,							&i_llc[0].option_3)
				EXT_1	()
			END_IF	()	/* octet 7 present */

		END_IF ()	/* octet 5 present */

END (0)

/*--------------------------------------------------------------------------*/

			/* ---------- Notification indicator (NOTIF_IND) */

D_START	(BV1_NOTIF_IND_P)
	D_TABL  (DESCR)
	D_EXT_1 (_3)
D_END		(NOTIF_IND_E)

START	(BV1_NOTIF_IND_P)
	TABL	(0,7,BV1_T_NOTIF_IND_DESCR,	 &i_notif_ind[0].notif_descr)
	EXT_1   ()
END			(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(BV1_PROGRESS_IND_P)
	D_TABL  (CODING_STD)
	D_PAD   (NS_PAD_3)
	D_TABL  (LOCATION)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(BV1_PROGRESS_IND_P)
	TABL	(5,2,BV1_T_CODING_STD_RESTR,		&i_progress_ind[0].coding_std)
	PAD		(4,1)
	TABL	(0,4,BV1_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	EXT_1   ()
	TABL	(0,7,BV1_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
	EXT_1   ()
END			(bv1_progress_spdu)

/*--------------------------------------------------------------------------*/

			/* ---------- Restart indicator */

D_START		(BV1_RESTART_IND_P)
	D_PAD	(NS_PAD_)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_IND_E)

START		(BV1_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,BV1_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
	EXT_1	()
END			(bv1_restart_spdu)

/*--------------------------------------------------------------------------*/

			/* ---------- User to user information (UUI) */

D_START	(BV1_UUI_P)
	D_TABL		(PROTOCOL_DISCR)
	D_END_OCTET	(_3)
	D_IF_VAL	(DISCR_IA5)
		D_TEXT  (INFO_IA5)
	D_ELSE		(OTHER_DISCR)
		D_TEXT  (INFO_OTHER)
	D_END_IF	(DISCR)
D_END			(UUI_E)

START	(BV1_UUI_P)
	TABL		(0,8,BV1_T_UUI_PROTOCOL_DISCR,  &i_uui[0].protocol_discr)
	END_OCTET   ()
	IF_VAL		(I_IF, &i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT	(IA5,ANY_CHAR,					&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE		()
		TEXT	(BINARY, ANY_OCTET, 			&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF		()
END				(0)

/*--------------------------------------------------------------------------*/
			/* IE codeset 5 */

			/* --------- Charge advice (ADVICE_CHARGE) */

D_START	(BV1_ADVICE_CHARGE_P)
	D_TABL		(CODING_STD)
	D_IF_VAL	(CODING_STD_)
		D_VAL	(NATIONAL_STD_)
	D_ELSE		(NOT_CODING_STD)
		D_VAL	(CEPT_STD_)
	D_END_IF	(CODING)
	D_PAD		(_3_)
	D_TABL		(CHARGING_TYPE)
	D_EXT_0_1	(_3AB)
	D_TABL		(CHARGING_PERIOD)
	D_EXT_0_1	(_3B)
	D_ANY_VAL	(CHARGING_PERIOD_M)
	D_EXT_1	(OCTET_3)
	D_OPTIONAL_OCTET (_DATA_)
	D_TEXT	(CHARGING_DATA)
D_END		(ADVICE_CHARGE_E)

START	(BV1_ADVICE_CHARGE_P)
	TABL	(5,2,BV1_T_CODING_STD,			&i_advice_charge[0].coding_std)
	IF_VAL	(I_IF, &i_advice_charge[0].coding_std, EQ, CODING_STD_NATIONAL)
		VAL	(4,1,NATIONAL_STD, 				&i_advice_charge[0].cept_std)
	ELSE	()
		VAL	(4,1,CEPT_STD, 					&i_advice_charge[0].cept_std)
	END_IF	()
	PAD		(3,1)
	TABL	(0,3,BV1_T_CHARGING_TYPE,		&i_advice_charge[0].charge_type)
	EXT_0_1	()
	TABL	(0,7,BV1_T_CHARGING_PERIOD,		&i_advice_charge[0].charge_period)
	EXT_0_1	()
	ANY_VAL	(0,7,							&i_advice_charge[0].charge_period_m)
	EXT_1	()
	OPTIONAL_OCTET ()
	TEXT	(BINARY, DIGIT, &i_advice_charge[0].data_lgth, (uchar **)&i_advice_charge[0].p_data)
END			(0)
/*--------------------------------------------------------------------------*/

			/*------------- Connected nb (CONN_NB) */

D_START	(BV1_CONNECTED_NB_P)
		D_TABL	(TYPE_NB_)
		D_VAL	(PLAN_ID_ISDN)

		D_IF_VAL(_FROM_D_CHANNEL_)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (CONNECTED_NB_E)

START	(BV1_CONNECTED_NB_P)
		TABL		(4,3,BV1_T_CALLING_NB_TYPE,	&i_conn_nb[0].nb_type)
		VAL			(0,4,PLAN_ISDN,				&i_conn_nb[0].plan_id)

		IF_VAL		(N_IF, &direction, EQ, FROM_D_CHANNEL)
			EXT_0_1 ()
			TABL	(5,2,BV1_T_CALLING_NB_PRES, &i_conn_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,BV1_T_SCREEN_IND,		&i_conn_nb[0].screen_ind)
		END_IF		()

		EXT_1   	()
		OPTIONAL_OCTET ()
		TEXT		(IA5,DIGIT, 				&i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END		(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Connected subaddress (CONN_SUB_ADD) */

D_START	(BV1_CONNECTED_SUB_ADD_P)
		D_TABL  (TYPE)
		D_PAD   (NS_PAD_4)
		D_EXT_1 (_3)
		D_TEXT  (INFO_)
D_END   (CONNECTED_SUB_ADD_E)

START	(BV1_CONNECTED_SUB_ADD_P)
		TABL	(4,3,BV1_T_SUB_ADD_TYPE,	&i_conn_sub_add[0].sub_add_type)
		PAD		(0,4)
		EXT_1   ()
		TEXT	(BINARY, ANY_OCTET,			&i_conn_sub_add[0].lgth, (uchar **)&i_conn_sub_add[0].p_add)
END		(0)


/*--------------------------------------------------------------------------*/
			/* IE codeset 6 */

			/*------------- Redirecting nb (REDIR_NB) */


D_START	(BV1_REDIR_NB_P)
		D_VAL		(TYPE_NATIONAL)
		D_VAL		(PLAN_ID_ISDN)
		D_EXT_0_1	(_3)
		D_TABL		(PRESENTATION)
		D_PAD		(NS_PAD_3A)
		D_TABL		(SCREEN_IND)
		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (REDIR_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (REDIR_NB_E)

START	(BV1_REDIR_NB_P)
		VAL		(4,3,NB_NATIONAL,	 		&i_redir_nb[0].nb_type)
		VAL		(0,4,PLAN_ISDN,		 		&i_redir_nb[0].plan_id)
		EXT_0_1 ()
		TABL	(5,2,BV1_T_CALLING_NB_PRES, &i_redir_nb[0].pres)
		PAD		(2,3)
		TABL	(0,2,BV1_T_SCREEN_IND,		&i_redir_nb[0].screen_ind)
		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END		(0)

/*EOF*/

