G
*****************************************************
*													*
*		Test of HOLD and RETRIEVE functions :		*
*		 normal and exceptional procedures.			*
*													*
*****************************************************
*
*	"NS_HOLD_RETRIEVE" option must be set to ON in ns_par.h.

*
*	<---- DL establishment indication
*
	B	d	0	1	a						DL_EST_IN

**************************************************************
*
*	1.	Normal procedure : Hold and Retrieve functions 
*		initiated by User and completed by Network.
*			(call state U3)
*
*   ====> connection request -> SETUP
*
	B	C	0	0	A						NS_CONN_RQ
*
*	<==== CALL PROC received -> NS_CALL_PROC_IN
*
	B	d	0	1	e	1	U	b
*
*   ====> hold request -> HOLD
*
	B	C	0	0	+n						NS_HOLD_RQ
*
*   <==== HOLD ACKNOWLEDGE received -> NS_HOLD_CO (without Cause IE)
*
	B	d	0	1	e	-2	U	<i
*
*   ====> retrieve request -> RETRIEVE
*
	B	C	0	0	+p						NS_RET_RQ
*
*   <==== RETRIEVE ACKNOWLEDGE received -> NS_RET_CO (without Cause IE)
*
	B	d	0	1	e	-2	U	<l

**************************************************************
*
*	2.	Normal procedure : Hold and Retrieve functions
*		initiated by Network and completed by User.
*			(call states U3, U4 and U10)
*
*   <==== HOLD received -> NS_HOLD_IN
*
	B	d	0	1	e	-2	U	<h
*
*	<==== ALERT received -> NS_ALERT_IN
*
	B	d	0	1	e	-2	U	a
*
*   ====> hold response without Cause -> HOLD ACKNOWLEDGE
*
	B	C	0	0	+o	0					NS_HOLD_RS
*
*	<==== CONNECT received -> NS_CONN_CO
*
	B	d	0	1	e	-2	U	c
*
*   <==== RETRIEVE received -> NS_RET_IN
*
	B	d	0	1	e	-2	U	<k
*
*   ====> retrieve response without Cause -> RETRIEVE ACKNOWLEDGE
*
	B	C	0	0	+q	0					NS_RET_RS
*
*	Time incremented to 20 seconds : nothing should happen (no Timer running)
*
	C	20

**************************************************************
*
*	3.	Normal procedure : Hold function initiated by Network
*			and Retrieve function initiated by User.
*			(call state U10)
*
*   <==== HOLD received -> NS_HOLD_IN
*
	B	d	0	1	e	-2	U	<h
*
*   ====> hold response without Cause -> HOLD ACKNOWLEDGE
*
	B	C	0	0	+o	0					NS_HOLD_RS
*
*	Time incremented to 20 seconds : nothing should happen (no Timer running)
*
	C	20
*
*   ====> retrieve request -> RETRIEVE
*
	B	C	0	0	+p						NS_RET_RQ
*
*   <==== RETRIEVE ACKNOWLEDGE received -> NS_RET_CO (without Cause IE)
*
	B	d	0	1	e	-2	U	<l
*
*	Time incremented to 20 seconds : nothing should happen (no Timer running)
*
	C	20

**************************************************************
*
*	4.	Exceptional procedure : Hold function initiated by Network
*			and rejected by User (call state U10).
*
*   <==== HOLD received -> NS_HOLD_IN
*
	B	d	0	1	e	-2	U	<h
*
*	Time incremented to 20 seconds : nothing should happen (no Timer running)
*
	C	20
*
*   ====> hold response with Cause -> HOLD REJECT
*
	B	C	0	0	+o	34					NS_HOLD_RS

**************************************************************
*
*	5.	Exceptional procedure : Hold function initiated by User
*			and rejected by Network (call state U10).
*
*   ====> hold request -> HOLD
*
	B	C	0	0	+n						NS_HOLD_RQ
*
*   <==== HOLD REJECT received -> NS_HOLD_CO (with Cause IE)
*
	B	d	0	1	e	-2	U	<j

**************************************************************
*
*	6.	Exceptional procedure : Hold function initiated by User
*			and no response from Network before T-HOLD expiry
*			(call state U10).
*
*   ====> hold request -> HOLD
*
	B	C	0	0	+n						NS_HOLD_RQ
*
*	Time incremented to 4 seconds : expiry of Timer T-HOLD -> NS_HOLD_CO (with Cause IE)
*
	C	4

**************************************************************
*
*	7.	Exceptional procedure : Hold function completed,
*			Retrieve function initiated by Network
*			and rejected by User (call state U10).
*
*   ====> hold request -> HOLD
*
	B	C	0	0	+n						NS_HOLD_RQ
*
*   <==== HOLD ACKNOWLEDGE received -> NS_HOLD_CO (without Cause IE)
*
	B	d	0	1	e	-2	U	<i
*
*	Time incremented to 20 seconds : nothing should happen (no Timer running)
*
	C	20
*
*   <==== RETRIEVE received -> NS_RET_IN
*
	B	d	0	1	e	-2	U	<k
*
*   ====> retrieve response with Cause -> RETRIEVE REJECT
*
	B	C	0	0	+q	16					NS_RET_RS

**************************************************************
*
*	8.	Exceptional procedure : Hold function is completed (Call Held state),
*			Retrieve function initiated by User
*			and rejected by Network (call state U10).
*
*   ====> retrieve request -> RETRIEVE
*
	B	C	0	0	+p						NS_RET_RQ
*
*   <==== RETRIEVE REJECT received -> NS_RET_CO (with Cause IE)
*
	B	d	0	1	e	-2	U	<m

**************************************************************
*
*	9.	Exceptional procedure : Hold function is completed (Call Held state),
*			Retrieve function initiated by User
*			and no response from Network before T-RETRIEVE expiry
*			(call state U10).
*
*   ====> retrieve request -> RETRIEVE
*
	B	C	0	0	+p						NS_RET_RQ
*
*	Time incremented to 4 seconds : expiry of Timer T-RETRIEVE -> NS_RET_CO (with Cause IE)
*
	C	4

**************************************************************
*
*	10.	Exceptional procedure : Hold function is completed
*			unexpected messages from remote in call states
*			(U10 Active, auxiliary = Call Held) ->
*			normal error handling procedure (ETS 300 102) :
*			send STATUS with Cause #101.
*
*	<==== CALL PROC received
*
	B	d	0	1	e	-2	U	b
*
*   <==== HOLD received -> NS_HOLD_IN
*
	B	d	0	1	e	-2	U	<h
*
*   <==== HOLD REJECT received
*
	B	d	0	1	e	-2	U	<j
*
*   <==== HOLD ACKNOWLEDGE received
*
	B	d	0	1	e	-2	U	<i
*
*   <==== RETRIEVE ACKNOWLEDGE received
*
	B	d	0	1	e	-2	U	<l
*
*   <==== RETRIEVE REJECT received
*
	B	d	0	1	e	-2	U	<m

**************************************************************
*
*	11.	Exceptional procedure : Hold function is completed
*			unexpected messages from upper entity in call states
*			(U10 Active, auxiliary = Call Held) ->
*			send NS_ERR_IN with cause 'ERR_U_SSDU_UNEXPECTED'
*
*   ====> alerting request
*
	B	C	0	0	G						NS_ALERT_RQ
*
*   ====> hold request
*
	B	C	0	0	+n						NS_HOLD_RQ
*
*   ====> hold response with Cause
*
	B	C	0	0	+o	34					NS_HOLD_RS
*
*   ====> hold response without Cause
*
	B	C	0	0	+o	0					NS_HOLD_RS
*
*   ====> retrieve response with Cause
*
	B	C	0	0	+q	16					NS_RET_RS
*
*   ====> retrieve response without Cause
*
	B	C	0	0	+q	0					NS_RET_RS

**************************************************************
*
*	12.	Exceptional procedure : Hold function is completed
*				transition to a call state not allowed (U11)
*
*   ====> clearing request -> DISCONNECT
*						   -> NS_ABORT_IN
*
	B	C	0	0	C						NS_CLEAR_RQ

**************************************************************
*
*	13.	Exceptional procedure :  unexpected messages for
*				Hold or Retrieve function in call state U11
*
*   ====> hold request -> NS_ERR_IN 
*
	B	C	0	0	+n						NS_HOLD_RQ
*
*   <==== HOLD received -> STATUS
*
	B	d	0	1	e	-2	U	<h
*
*   <==== RETRIEVE received -> STATUS
*
	B	d	0	1	e	-2	U	<k
*
*   ====> retrieve request -> NS_ERR_IN
*
	B	C	0	0	+p						NS_RET_RQ

**************************************************************
*
*	14.	Exceptional procedure :  unexpected messages for
*				Hold or Retrieve function in call state U0
*
*   <==== RELEASE received -> NS_CLEAR_CO
*						   -> RELEASE COMPLETE
*
	B	d	0	1	e	-2	U	r
*
*   ====> hold request -> NS_ERR_IN
*
	B	C	0	0	+n						NS_HOLD_RQ
*
*   <==== HOLD received -> RELEASE COMPLETE with Cause #81
*
	B	d	0	1	e	-2	U	<h
*
*   <==== RETRIEVE received -> RELEASE COMPLETE with Cause #81
*
	B	d	0	1	e	-2	U	<k
*
*   ====> retrieve request -> NS_ERR_IN
*
	B	C	0	0	+p						NS_RET_RQ

**************************************************************
*
*	15.	Exceptional procedure :  unexpected messages for
*				Hold or Retrieve function in call states
*				U6 and U9, U8, U7 (if POINT-TO-MULTIPOINT is specified in configuration)
*
*   <==== Broadcast SETUP received -> NS_CONN_IN
*
	B	d	0	0	f	9	N	e
*
*   ====> hold request -> NS_ERR_IN
*
	B	C	0	255	+n						NS_HOLD_RQ
*
*   <==== HOLD received -> HOLD REJECT with cause #101
*
	B	d	0	1	e	9	N	<h
*
*   <==== RETRIEVE received -> RETRIEVE REJECT with cause #101
*
	B	d	0	1	e	9	N	<k
*
*   ====> call proceeding request -> CALL_PROC
*
	B	C	0	255	N						NS_CALL_PROC_RQ
*
*   ====> hold request -> NS_ERR_IN
*
	B	C	0	255	+n						NS_HOLD_RQ
*
*   <==== HOLD received -> HOLD REJECT with cause #101
*
	B	d	0	1	e	9	N	<h
*
*   <==== RETRIEVE received -> RETRIEVE REJECT with cause #101
*
	B	d	0	1	e	9	N	<k
*
*   ====> alerting request -> ALERT
*
	B	C	0	255	G						NS_ALERT_RQ
*
*   ====> hold request -> NS_ERR_IN
*
	B	C	0	255	+n						NS_HOLD_RQ
*
*   <==== HOLD received -> HOLD REJECT with cause #101
*
	B	d	0	1	e	9	N	<h
*
*   <==== RETRIEVE received -> RETRIEVE REJECT with cause #101
*
	B	d	0	1	e	9	N	<k
*
*   ====> connection response -> CONNECT
*
	B	C	0	255	B						NS_CONN_RS
*
*   ====> hold request -> NS_ERR_IN
*
	B	C	0	255	+n						NS_HOLD_RQ
*
*   <==== HOLD received -> HOLD REJECT with cause #101
*
	B	d	0	1	e	9	N	<h
*
*   <==== RETRIEVE received -> RETRIEVE REJECT with cause #101
*
	B	d	0	1	e	9	N	<k
*
*   <==== CONN ACK received -> NS_CONN_CO
*
	B	d	0	1	e	9	N	d

**************************************************************
*
*	16.	Exceptional procedure : Collision of Hold
*				and Retrieve function and unexpected
*				messages in auxiliary states Hold Indication
*				and Retrieve Indication (call state U10)
*
*   ====> hold request -> HOLD
*
	B	C	0	255	+n						NS_HOLD_RQ
*
*   <==== HOLD received (Collision) -> NS_HOLD_IN (on User side)
*
	B	d	0	1	e	9	N	<h
*
*	Time incremented to 20 seconds : nothing should happen (no Timer running)
*
	C	20
*
*   <==== HOLD ACKNOWLEDGE received -> STATUS
*
	B	d	0	1	e	9	N	<i
*
*   ====> hold request -> NS_ERR_IN
*
	B	C	0	255	+n						NS_HOLD_RQ
*
*   <==== HOLD received -> STATUS
*
	B	d	0	1	e	9	N	<h
*
*   <==== RETRIEVE received -> STATUS
*
	B	d	0	1	e	9	N	<k
*
*   ====> retrieve request -> NS_ERR_IN
*
	B	C	0	255	+p						NS_RET_RQ
*
*   ====> retrieve response with Cause -> NS_ERR_IN
*
	B	C	0	255	+q	16					NS_RET_RS
*
*   ====> hold response without Cause -> HOLD_ACK
*
	B	C	0	255	+o	0					NS_HOLD_RS
*
*   ====> retrieve request -> RETRIEVE
*
	B	C	0	255	+p						NS_RET_RQ
*
*   <==== RETRIEVE received (Collision) -> NS_RET_IN (on User side)
*
	B	d	0	1	e	9	N	<k
*
*	Time incremented to 20 seconds : nothing should happen (no Timer running)
*
	C	20
*
*   <==== RETRIEVE ACKNOWLEDGE received -> STATUS
*
	B	d	0	1	e	9	N	<l
*
*   <==== HOLD ACKNOWLEDGE received -> STATUS
*
	B	d	0	1	e	9	N	<i
*
*   ====> hold request -> NS_ERR_IN
*
	B	C	0	255	+n						NS_HOLD_RQ
*
*   <==== HOLD received -> STATUS
*
	B	d	0	1	e	9	N	<h
*
*   ====> hold response without Cause -> HOLD_ACK
*
	B	C	0	255	+o	0					NS_HOLD_RS
*
*   <==== RETRIEVE received -> STATUS
*
	B	d	0	1	e	9	N	<k
*
*   ====> retrieve request -> NS_ERR_IN
*
	B	C	0	255	+p						NS_RET_RQ
*
*   ====> retrieve response without Cause -> RETRIEVE ACK
*
	B	C	0	255	+q	0					NS_RET_RS

**************************************************************
*
*	17.	Exceptional procedure :  unexpected messages for
*				Hold or Retrieve function in Idle auxiliary call state
*				(call state U10)
*
*   <==== HOLD ACKNOWLEDGE received -> STATUS
*
	B	d	0	1	e	9	N	<i
*
*   <==== HOLD REJECT received -> STATUS
*
	B	d	0	1	e	9	N	<j
*
*   <==== RETRIEVE received -> STATUS
*
	B	d	0	1	e	9	N	<k
*
*   <==== RETRIEVE ACKNOWLEDGE received -> STATUS
*
	B	d	0	1	e	9	N	<l
*
*   <==== RETRIEVE REJECT received -> STATUS
*
	B	d	0	1	e	9	N	<m
*
*   ====> hold response without Cause -> NS_ERR_IN
*
	B	C	0	255	+o	0					NS_HOLD_RS
*
*   ====> hold response with Cause -> NS_ERR_IN
*
	B	C	0	255	+o	44					NS_HOLD_RS
*
*   ====> retrieve request -> NS_ERR_IN
*
	B	C	0	255	+p						NS_RET_RQ
*
*   ====> retrieve response with Cause -> NS_ERR_IN
*
	B	C	0	255	+q	16					NS_RET_RS
*
*   ====> retrieve response without Cause -> NS_ERR_IN
*
	B	C	0	255	+q	0					NS_RET_RS

**************************************************************
*
*	18.	Exceptional procedure :  transition to call state U12
*
*   ====> hold request -> HOLD
*
	B	C	0	255	+n						NS_HOLD_RQ
*
*   <==== DISCONNECT received in state Hold Request -> NS_CLEAR_IN,  NS_ABORT_IN
*
	B	d	0	1	e	9	N	q
*
*   ====> clearing response -> RELEASE
*
	B	C	0	255	D						NS_CLEAR_RS
*
*	T308 expiry -> send RELEASE again
*	T308 second expiry -> clear call
*
	C	4
	C	4
*
*   <==== Broadcast SETUP received -> NS_CONN_IN
*
	B	d	0	0	f	5	N	e
*
*   ====> connection response -> CONNECT
*   <==== CONN ACK received -> NS_CONN_CO
*
	B	C	0	255	B						NS_CONN_RS
	B	d	0	1	e	5	N	d
*
*   <==== HOLD received -> NS_HOLD_IN
*
	B	d	0	1	e	5	N	<h
*
*   <==== DISCONNECT received in state Hold Indication -> NS_CLEAR_IN,  NS_ABORT_IN
*
	B	d	0	1	e	5	N	q
*
*   ====> clearing response -> RELEASE
*
	B	C	0	255	D						NS_CLEAR_RS
*
*	T308 expiry -> send RELEASE again
*	T308 second expiry -> clear call
*
	C	4
	C	4
*
*   ====> connection request -> SETUP 	
*
	B	C	0	1	A						NS_CONN_RQ
*
*	<==== ALERT received -> NS_ALERT_IN
*
	B	d	0	1	e	-1	U	a
*
*   ====> hold request -> HOLD
*
	B	C	0	1	+n						NS_HOLD_RQ
*
*	<==== CONNECT received -> NS_CONN_CO
*
	B	d	0	1	e	-2	U	c
*
*   <==== HOLD ACKNOWLEDGE received -> NS_HOLD_CO
*
	B	d	0	1	e	-2	U	<i
*
*   <==== DISCONNECT received in state Call Held -> NS_CLEAR_IN  
*
	B	d	0	1	e	-2	U	q
*
*   ====> clearing response -> RELEASE
*
	B	C	0	1	D						NS_CLEAR_RS
*
*	T308 expiry -> send RELEASE again
*	T308 second expiry -> clear call
*
	C	4
	C	4
*
*   ====> connection request -> SETUP
*	<==== CONNECT received -> NS_CONN_CO
*
	B	C	0	1	A						NS_CONN_RQ
	B	d	0	1	e	-1	U	c
*
*   <==== HOLD received -> NS_HOLD_IN
*
	B	d	0	1	e	-2	U	<h
*
*   ====> hold response without Cause -> HOLD-ACK
*
	B	C	0	1	+o	0					NS_HOLD_RS
*
*   ====> retrieve request -> RETRIEVE
*
	B	C	0	1	+p						NS_RET_RQ
*
*   <==== DISCONNECT received in state Retrieve Request -> NS_CLEAR_IN  
*
	B	d	0	1	e	-2	U	q
*
*   <==== RETRIEVE ACKNOWLEDGE received -> STATUS
*
	B	d	0	1	e	-2	U	<l
*
*   ====> clearing response -> RELEASE
*
	B	C	0	1	D						NS_CLEAR_RS
*
*	T308 expiry -> send RELEASE again
*	T308 second expiry -> clear call
*
	C	4
	C	4

**************************************************************
*
*	19.	Exceptional procedure :  transition to call states in
*			which Hold and Retrieve procedures are not allowed
*
*   ====> connection request -> SETUP
*
	B	C	0	1	A						NS_CONN_RQ
*
*	<==== CALL PROC received -> NS_CALL_PROC_IN
*
	B	d	0	1	e	-1	U	b
*
*   <==== HOLD received -> NS_HOLD_IN
*
	B	d	0	1	e	-2	U	<h
*
*   ====> clearing request -> DISCONNECT, NS_ABORT_IN
*
	B	C	0	1	C						NS_CLEAR_RQ
*
*	<==== RELEASE received -> RELEASE COMPLETE
*						   -> NS_CLEAR_CO
*
	B	d	0	1	e	-2	U	r
*
*   ====> connection request -> SETUP
*
	B	C	0	1	A						NS_CONN_RQ
*
*	<==== CALL PROC received -> NS_CALL_PROC_IN
*
	B	d	0	1	e	-1	U	b
*
*   <==== HOLD received -> NS_HOLD_IN
*
	B	d	0	1	e	-2	U	<h
*
*   ====> hold response without Cause -> HOLD-ACK
*
	B	C	0	1	+o	0					NS_HOLD_RS
*
*	Timer T310 expiry -> DISCONNECT
*					  -> NS_ABORT_IN
*
	C	45
*
*	QUIT
*
Q