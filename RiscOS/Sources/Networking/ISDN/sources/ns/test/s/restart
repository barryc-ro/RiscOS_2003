G
****************************************************************************
*
*   Restart procedure test :
*
****************************************************************************
*
*       setup ---> 1
*
************************************************************************
*
*   ====> connection request / SETUP / DL establishment request
*
	B	C	0	0	A					NS_CONN_RQ
*
*	 <---- DL establishment confirm
*
	B	d	0	1	b					DL_EST_CO
*
*   <==== SETUP ACK
*
	B	d	0	1	e	1	U	f		SETUP_ACK
*
*   <==== CALL PROCEEDING
*
	B	d	0	1	e	1	U	b		CALL_PROC
*
*   <==== ALERTING
*
	B	d	0	1	e	1	U	a		ALERT
*
*   <==== CONNECT  / the call connection is established
*
	B	d	0	1	e	1	U	c		CONN
*
*   <==== DISCONNECT / the called disconnect the call connection
*
	B	d	0	1	e	1	U	q		DISC
*
*   ====> RELEASE from the user
*
	B	C	0	0	D					NS_CLEAR_RS
************************************************************************
*
*       setup <--- 2
*
************************************************************************
*
*   <====   SETUP received
*
	B	d	0	0	f	1	N	e		SETUP
*
*   ====>   response ALERT
*
	B	C	0	255	G					NS_ALERT_RQ
*
*   ====>  response CONNECT
*
	B	C	0	255	B					NS_CONN_RS
*
*   <==== CONNECT ACK : call connection established
*
	B	d	0	1	e	1	N	d		CONN_ACK
*
*   <==== DISC the calling party clear the call
*
	B	d	0	1	e	1	N	q		DISC
************************************************************************
*
*       setup ---> 3
*
************************************************************************
*
*   ====> connection request / SETUP
*
	B	C	0	1	A					NS_CONN_RQ
*
*   <==== SETUP ACK
*
	B	d	0	1	e	2	U	f		SETUP_ACK
*
*   =====> NS INFO RQ
*
	B	C	0	1	E
*
*   <==== CALL PROCEEDING
*
	B	d	0	1	e	2	U	b		CALL_PROC
*
*   <==== ALERTING
*
	B	d	0	1	e	2	U	a		ALERT
*
*   <==== CONNECT  / the call connection is established
*
	B	d	0	1	e	2	U	c		CONN
************************************************************************
*
*       setup <--- 4
*
************************************************************************
*
*   <====   SETUP received
*
	B	d	0	0	f	2	N	e		SETUP
*
*   ====>   response ALERT
*
	B	C	0	254	G					NS_ALERT_RQ
*
*   ====>  response CONNECT
*
	B	C	0	254	B					NS_CONN_RS
*
*   <==== CONNECT ACK : call connection established
*
	B	d	0	1	e	2	N	d		CONN_ACK
************************************************************************
*
*       setup ---> 5
*
************************************************************************
*
*   ====> connection request / SETUP
*
	B	C	0	2	A					NS_CONN_RQ
*
*   <==== SETUP ACK
*
	B	d	0	1	e	3	U	f		SETUP_ACK
*
*   =====> NS INFO RQ
*
	B	C	0	2	E
*
*   <==== CALL PROCEEDING
*
	B	d	0	1	e	3	U	b		CALL_PROC
*
*   <==== ALERTING
*
	B	d	0	1	e	3	U	a		ALERT
************************************************************************
*
*       setup <--- 6
*
************************************************************************
*
*   <====   SETUP received
*
	B	d	0	0	f	3	N	e		SETUP
*
*   ====>   response ALERT
*
	B	C	0	253	G					NS_ALERT_RQ
*
*   ====>  response CONNECT
*
	B	C	0	253	B					NS_CONN_RS
*
*   <==== CONNECT ACK : call connection established
*
	B	d	0	1	e	3	N	d		CONN_ACK
*
*   <==== DISC the calling party clear the call
*
	B	d	0	1	e	3	N	q		DISC
************************************************************************
*
*       setup ---> 7
*
************************************************************************
*
*   ====> connection request / SETUP
*
	B	C	0	3	A					NS_CONN_RQ
************************************************************************
*
*       setup <--- 8
*
************************************************************************
*
*   <====   SETUP received
*
	B	d	0	0	f	4	N	e		SETUP
*
*   ====>   response ALERT
*
	B	C	0	5	G					NS_ALERT_RQ
*
*   ====>  response CONNECT
*
	B	C	0	5	B					NS_CONN_RS
************************************************************************
*
*       setup ---> 9
*
************************************************************************
*
*   ====> connection request / SETUP
*
	B	C	0	4	A					NS_CONN_RQ
*
*   <==== SETUP ACK
*
	B	d	0	1	e	5	U	f		SETUP_ACK
*
*   =====> NS INFO RQ
*
	B	C	0	4	E
*
*
*			9 call are present and in different states
*
*
************************************************************************
*						USER SIDE RESTART 1
************************************************************************
*
*   =====> MNS_RESTART_RQ
*
	B	M	0	0	127	C	M	0	-1
*
*   =====> NS_RESTART_RQ
*
	B	C	0	0	Q
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	1	U	%
*
*   =====> NS_RESTART_RS
*
	B	C	0	127	Y
*
*	<===== STATUS stops procedure since the call state specified is not good
*
	B	d	0	1	e	0	U	%
************************************************************************
*						USER SIDE RESTART 2
************************************************************************
*
*   =====> MNS_RESTART_RQ
*
	B	M	0	0	127	C	M	0	-1
*
*   =====> NS_RESTART_RQ
*
	B	C	0	255	Q
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	1	N	%
*
*   =====> NS_RESTART_RS
*
	B	C	0	127	Y
*
*	<===== RESTART_ACK stops procedure
*
	B	d	0	1	e	0	U	-
************************************************************************
*						USER SIDE RESTART 3
************************************************************************
*
*   =====> MNS_RESTART_RQ
*
	B	M	0	0	127	C	M	0	-1
*
*   =====> NS_RESTART_RQ
*
	B	C	0	1	Q
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	2	U	%
*
*	<===== RESTART_ACK
*
	B	d	0	1	e	0	U	-
*
*   =====> NS_RESTART_RS stops procedure
*
	B	C	0	127	Y
************************************************************************
*						NETWORK SIDE RESTART 1
************************************************************************
*
*   <===== RESTART
*
	B	d	0	1	e	0	N	+
*
*   =====> NS_RESTART_RQ
*
	B	C	0	254	Q
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	2	N	%
*
*   =====> NS_RESTART_RS stops procedure
*
	B	C	0	127	Y
************************************************************************
*						NETWORK SIDE RESTART 2
************************************************************************
*
*   <===== RESTART
*
	B	d	0	1	e	0	N	+
*
*   =====> NS_RESTART_RQ
*
	B	C	0	2	Q
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	3	U	%
*
*	<===== STATUS (Global)
*
	B	d	0	1	e	0	N	%
*
*   =====> NS_RESTART_RS stops procedure for normal test continuation
*
	B	C	0	127	Y
************************************************************************
*						USER SIDE RESTART 4
************************************************************************
*
*   =====> MNS_RESTART_RQ
*
	B	M	0	0	127	C	M	0	-1
*
*   =====> NS_RESTART_RQ
*
	B	C	0	253	Q
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	3	N	%
*
*	T317 expiry stop procedure
*
	C	100
*
*	<===== RESTART_ACK stops procedure for normal test continuation
*
	B	d	0	1	e	0	U	-
************************************************************************
*						NETWORK SIDE RESTART 3
************************************************************************
*
*   <===== RESTART
*
	B	d	0	1	e	0	N	+
*
*   =====> NS_RESTART_RQ
*
	B	C	0	3	Q
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	4	U	%
*
*	T317 expiry stop procedure
*
	C	100
************************************************************************
*						USER SIDE RESTART 5
************************************************************************
*
*   =====> MNS_RESTART_RQ
*
	B	M	0	0	127	C	M	0	-1
*
*   =====> NS_RESTART_RQ
*
	B	C	0	5	Q
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	4	N	%
*
*   =====> NS_RESTART_RS
*
	B	C	0	127	Y
*
*	T316 first expiry
*
	C	120
*
*	T316 second expiry stops procedure
*
	C	120
*
*	END OF RESTART TEST
*
*
*	<===== STATUS shall be ignored since the call have been cleared
*
	B	d	0	1	e	5	U	%
Q
