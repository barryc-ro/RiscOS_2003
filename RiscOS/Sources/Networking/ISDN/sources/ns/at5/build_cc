
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_cc.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		at5_cc_load_ns_test - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*-------------------------------------------------------------------------*/

					/* FUNCTION DECLARATION */

#if NEW_FCT_STYLE == ON
	char	mg_code_fac		(void);
	void	pr_fac_code		(void);
#else
	char	mg_code_fac		();
	void	pr_fac_code		();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			at5_cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar at5_cc_load_ns_test (code_t primitive_code, nai_t nai,
									   conn_id_t conn_id);
							- primitive_code 	= code of the primitive to send,
							- nai				= network access ID,
							- conn_id			= connection ID.

Return value : 	at5_cc_load_ns_test returns = OK
										= NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/
extern uint 	g_ns_call_ap;

uchar at5_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t		prim_code;		/* primitive code */
	nai_t 		nai;			/* network access ID */
	sapi_t		sapi;			/* sapi */
	conn_id_t	conn_id;		/* connection ID */
{

#	if AT5_SUPPLEMENTARY_SERVICES == ON
		uchar service_id;		/* service identifier for NS_SPF_FAC_RQ */
#	endif

		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

		/* Switch according to the primitive to send */

	switch (prim_code) {

/*==========================================================================*/

		/*========== primitives as seen from TE side ==========*/

	/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :
			Isdn_init_at5_ctx_rq_rs			(conn_rq,
											 Buffer_a_first_data
											);

			Isdn_at5_store_bc_SPEECH		(conn_rq);

			Isdn_at5_store_chan_id_BRI		(conn_rq,
											 CHAN_PREF,
											 B1_CHAN
											);

/*
			Isdn_at5_store_te_cap			(conn_rq);
*/

			Isdn_at5_store_calling_nb		(conn_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "12345"
											);

			Isdn_at5_store_keypad			(conn_rq,
											 "45#"
											);

#			if AT5_SUPPLEMENTARY_SERVICES == ON

			Isdn_at5_store_uui				(conn_rq,
											 "conn rq"
											);

			Isdn_at5_store_ori_call_appear (conn_rq, 1);

#			endif

			break;

	/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_at5_ctx_rq_rs			(conn_rs,
											 Buffer_a_first_data
											);

#			if AT5_SUPPLEMENTARY_SERVICES == ON

			Isdn_at5_store_uui				(conn_rs,
											 "conn rs"
											);
#			endif

			break;

	/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_at5_ctx_rq_rs			(clear_rq,
											 Buffer_a_first_data
											);

			Isdn_at5_store_cause			(clear_rq,
											 LOCATION_USER,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 2,
											 "  "
											);

#			if AT5_SUPPLEMENTARY_SERVICES == ON

			Isdn_at5_store_uui				(clear_rq,
											 "clear rq"
											);

#			endif

			break;

	/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_at5_ctx_rq_rs			(clear_rs,
											 Buffer_a_first_data
											);
			Isdn_at5_store_cause			(clear_rs,
											 LOCATION_USER,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 0,
											 DIAGNOSTIC_NIL
											);

#			if AT5_SUPPLEMENTARY_SERVICES == ON

			Isdn_at5_store_uui				(clear_rs,
											 "clear rs"
											);
#			endif

			break;

	/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_at5_ctx_rq_rs			(info_rq,
											 Buffer_a_first_data
											);

			Isdn_at5_store_keypad			(info_rq,
											 "678910"
											);


			break;

	/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_at5_ctx_rq_rs			(alert_rq,
											 Buffer_a_first_data
											);

			Isdn_at5_store_chan_id_BRI		(alert_rq,
											 CHAN_PREF,
											 B1_CHAN
											);

#			if AT5_SUPPLEMENTARY_SERVICES == ON

			Isdn_at5_store_uui				(alert_rq,
											 "alert rq"
											);

#			endif

			break;

	/*---------------- CALL PROCEEDING REQUEST */

		case  NS_CALL_PROC_RQ :
			Isdn_init_at5_ctx_rq_rs			(call_proc_rq,
											 Buffer_a_first_data
											);

			Isdn_at5_store_chan_id_BRI		(call_proc_rq,
											 CHAN_PREF,
											 B1_CHAN
											);

			break;

#	if AT5_SUPPLEMENTARY_SERVICES == ON

	/*---------------- SPECIFIC FACILITY REQUEST */

		case  NS_SPF_FACILITY_RQ :

			Isdn_init_at5_ctx_rq_rs			(spf_fac_rq,
											 Buffer_a_first_data
											);

			switch (service_id = mg_code_fac()) {

				case DA_CONF	:			/* conference */
				case DA_TRANS	:			/* transfer */
					Isdn_at5_store_other_call_ref	(spf_fac_rq,
													 255
													);
					break;

				case DA_DROP	:			/* drop */
				case DA_HOLD	:			/* hold */
					break;

				case DA_RECONN	:			/* reconnect */
					Isdn_at5_store_chan_id_BRI	(spf_fac_rq,
												 CHAN_PREF,
												 ANY_CHAN);
					Isdn_at5_store_switchhook	(spf_fac_rq,
												 HOOK_OFF);
					break;

				default			:
					break;

			}
			Isdn_at5_store_service_id	(spf_fac_rq, service_id);
			break;

#	endif		/* Supplementary services */


/*==========================================================================*/


	/*---------------- UNKNOWN primitive */

		default :
			return (NOK);
		}

			/* Load the communication message */

		Store_message (prim_code, nai, sapi, conn_id, p_buffer);
		Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);

		return (OK);

}

#if AT5_SUPPLEMENTARY_SERVICES == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			pr_fac_code, mg_code_fac

Usage           pr_fac_code (); mg_code_fac ();

Return value : 	no return value

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void pr_fac_code ()

{
	fprintf (f_out, "\n       %c = CONF",DA_CONF);
	fprintf (f_out,                    "                     %c = TRANS",DA_TRANS);
	fprintf (f_out, "\n       %c = DROP",DA_DROP);
	fprintf (f_out,                    "                     %c = HOLD",DA_HOLD);
	fprintf (f_out, "\n       %c = RECONN\n",DA_RECONN);
}

char mg_code_fac ()
{
	mg_code ();

	while ( g_code[0] == '?') {
		pr_fac_code ();
		mg_code ();
	}
	return(g_code[0]);
}

#endif		/* SUPPLEMENTARY SERVICES AT5 only */

/*EOF*/
