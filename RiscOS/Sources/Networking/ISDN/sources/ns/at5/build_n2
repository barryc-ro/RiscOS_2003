
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_n2.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *			at5_automata_1	-
 *
 *			at5_pr_spdu_id	-
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


void at5_automata_1 ()
{
				/* Automata Nø 1 */

	switch (state) {

		case STATE_CALL_INIT_1 :
			*(p_info++) = CALL_PROC;

			*(p_info++) = CHAN_ID;
			*(p_info++) = 1;
			*(p_info++) = G_8 (1,0,0,0,1,0,1,0);

			state = STATE_OUTGOING_CALL_PROC_3;
			break;

		case STATE_OUTGOING_CALL_PROC_3 :
			*(p_info++) = CONN;
			state = STATE_ACTIVE_10;
			break;

		case STATE_ACTIVE_10 :
			*(p_info++) = DISC;

			*(p_info++) = CAUSE;
			*(p_info++) = 2;
			*(p_info++) = G_8 (1,0,0,0,0,0,0,0);
			*(p_info++) = G_8 (1,0,0,1,0,0,0,0);

			state = STATE_DISCONNECT_REQUEST_11;
			break;

		case STATE_DISCONNECT_REQUEST_11 :
			*(p_info++) = REL_COMP;

			state = STATE_CALL_INIT_1;
			break;

	}

}

/*-------------------------------------------------------------------------*/

void at5_pr_spdu_id ()
{

	fprintf (f_out, "\n                   SPDU message ID\n");

		/* Call establishment spdu event */

	fprintf (f_out, "\n       %c = ALERT",DA_ALERT);
	fprintf (f_out,                     "                    %c = CALL_PROC",DA_CALL_PROC);
	fprintf (f_out, "\n       %c = CONN",DA_CONN);
	fprintf (f_out,                    "                     %c = CONN_ACK",DA_CONN_ACK);
	fprintf (f_out, "\n       %c = SETUP",DA_SETUP);
	fprintf (f_out,                     "                    %c = SETUP_ACK",DA_SETUP_ACK);
	fprintf (f_out, "\n       %c = PROGRESS",DA_PROGRESS);

		/* Clear call spdu event */

	fprintf (f_out,                        "                 %c = DISC",DA_DISC);
	fprintf (f_out, "\n       %c = REL",DA_REL);
	fprintf (f_out,                   "                      %c = REL_COMP",DA_REL_COMP);

		/* Miscellaneous spdu event */

	fprintf (f_out, "\n       %c = INFO",DA_INFO);
	fprintf (f_out,                    "                     %c = STATUS",DA_STATUS);
	fprintf (f_out, "\n       %c = STATUS_ENQ",DA_STATUS_ENQ);

#if AT5_SUPPLEMENTARY_SERVICES == ON

	fprintf (f_out,                          "               %c = CONF_ACK",DA_CONF_ACK);
	fprintf (f_out, "\n       %c = CONF_REJ",DA_CONF_REJ);
	fprintf (f_out,                        "                 %c = TRANS_ACK",DA_TRANS_ACK);
	fprintf (f_out, "\n       %c = TRANS_REJ",DA_TRANS_REJ);
	fprintf (f_out,                         "                %c = DROP_ACK",DA_DROP_ACK);
	fprintf (f_out, "\n       %c = DROP_REJ",DA_DROP_REJ);
	fprintf (f_out,                        "                 %c = HOLD_ACK",DA_HOLD_ACK);
	fprintf (f_out, "\n       %c = HOLD_REJ",DA_HOLD_REJ);
	fprintf (f_out,                        "                 %c = RECONN_ACK",DA_RECONN_ACK);
	fprintf (f_out, "\n       %c = RECONN_REJ",DA_RECONN_REJ);
	fprintf (f_out,                          "               %c = REDIR",DA_REDIR);
#	if AT5_KEY_SYSTEM_FEATURE == ON
	fprintf (f_out, "\n       %c = ASSOC",DA_ASSOC);
#	endif

#endif

	fprintf (f_out, "\n\n       %c = UNKNOWN SPDU ID",DA_SPDU_ID_UNKNOWN);

		/* Case suite */

	fprintf (f_out,                               "          1 to 9 = test suite number");
	fprintf (f_out,"\n\n if upper case ---> erroneous message");

	fprintf (f_out,"\n\n");
}

/*EOF*/
