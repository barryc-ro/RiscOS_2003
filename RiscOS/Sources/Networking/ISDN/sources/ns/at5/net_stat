
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_state.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) : state driven automata for ATT_5E5 .
 *
 *        u0 to u19 - user side - implements the processing of an event
 *                     according to the state of the call (u0 to u19).
 *
 *        n0 to n19 - network side - implements the processing of an event
 *                     according to the state of the call (n0 to n19).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

					/* FUNCTION DECLARATION */

#	if NEW_FCT_STYLE == ON
		void	fco_hcdt				(void);
		uchar	at5_button_rq			(void);
#	else
		void	fco_hcdt				();
		uchar	at5_button_rq			();
#	endif


						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*       U        */
						/*----------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             at5_u0 to at5_u19 - user side - implements the processing of an
							  event according to the call state.

Usage            void uxx (void);

Related
functions usage void Stop_timer_ns (uchar x_timer);

				void Start_timer_ns (uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void at5_u0 ()
{

	switch (event_id) {

		case DA_SETUP :
			Call_service_type = (I_(bc,trf_cap) == TRF_CAP_SPEECH) ? AT5_SERVICE_VOICE : AT5_SERVICE_DATA;

			if (is_ie_i (CODESET_0, KEYPAD) == PRESENT) {

				Call_keypad_in_setup = ON;
			}

			Send_to_call_control (NS_CONN_IN);
			Start_timer_ns (AT5_T300);
			Set_state (STATE_CALL_PRESENT_6);
			break;

		case NS_CONN_RQ :
			Call_service_type = (I_(bc,trf_cap) == TRF_CAP_SPEECH) ? AT5_SERVICE_VOICE : AT5_SERVICE_DATA;

			if (Call_service_type == AT5_SERVICE_VOICE) {

				if (at5_button_rq () == OK) {

						/* Save the current buffer */

					Send_to_d_channel_and_stop_spdu (SETUP);
					Dl_button_p_call = (uchar FAR *)p_call;

						/*
						 * Free the p_rcv message because the
						 * Send_to_d_channel macro will
						 * re-used the buffer we just saved if
						 * p_rcv_msg is still available.
						 */

					Free_msg (p_rcv_msg), p_rcv_msg = P_NIL;
					Reset_internal_ie ();

						/* Send a INFO (Feature Act) */

					I_(feature_act, button_type_act) = BUTTON_TYPE_UNKNOWN;
					I_(feature_act, module_nb)		 = MODULE_0;
					I_(feature_act, status_type)	 = FEATURE_NUMBER_STATUS;
					I_(feature_act, button_nb)		 = I_ori_call_appear_button_nb;

					set_ie_i (CODESET_6, FEATURE_ACT);

					Set_call_ref_nil ();
					Send_to_d_channel (INFO);
					Start_timer_ns (AT5_T300);
					return;
				}
			}

			Send_to_d_channel (SETUP);
			Start_timer_ns (AT5_T303);
			Set_state (STATE_CALL_INIT_1);
			break;

		case TI_300 :
			set_i_cause (C_C_NORMAL_EVENT, C_V_CALL_REJECT_21, DIAGNOSTIC_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of  user
			   action requesting call establishment from the network.
			*/

void at5_u1 ()
{
	switch (event_id) {

		case DA_CALL_PROC :
			Stop_timer_ns (AT5_T303);
			Send_to_call_control (NS_CALL_PROC_IN);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			Start_timer_ns (AT5_T310);
			break;

#		if AT5_SUPPLEMENTARY_SERVICES == ON

		case NS_SPF_FACILITY_RQ :

			if ((Na_subscription_fco_hcdt != OFF) && (I_service_id == DA_DROP)) {
				Send_to_d_channel (DROP);
				Set_state (SUB_STATE_34);

			} else {

				ns_unexpected_ev ();
			}

			break;

#		endif

		case TI_303 :
			set_i_cause (C_C_TIMER, C_V_T303, (char FAR *) &Call_state);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		case DA_SETUP_ACK :

			Stop_timer_ns (AT5_T303);
			Send_to_call_control (NS_SETUP_ACK_IN);
			Set_state (STATE_OVERLAP_SENDING_2);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OVERLAP_SENDING_2 */

		/* Overlap sending state */

			/*
			   This state exists for an outgoing call when the user has
			   received acknowledgement of the call establishment request
			   which permits the user to send additional call information
			   to the network in overlap mode.
			*/


void at5_u2 ()
{
	switch (event_id) {

		case NS_INFO_RQ :
			Send_to_d_channel (INFO);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case DA_INFO :
			Send_to_call_control (NS_INFO_IN);
			break;

		case DA_CALL_PROC :
			Send_to_call_control (NS_CALL_PROC_IN);
			Start_timer_ns (AT5_T310);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			break;

		case DA_ALERT :
			Send_to_call_control (NS_ALERT_IN);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

#		if AT5_SUPPLEMENTARY_SERVICES == ON

		case NS_SPF_FACILITY_RQ :

			if ((Na_subscription_fco_hcdt != OFF) && (I_service_id == DA_DROP)) {
				Send_to_d_channel (DROP);
				Set_state (SUB_STATE_34);

			} else {

				ns_unexpected_ev ();
			}

			break;

#		endif

		default :
			ns_unexpected_ev ();
			break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PROC */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void at5_u3 ()
{
	switch (event_id) {

		case DA_PROGRESS :

				/* PROGRESS_IND IE is mandatory and so present */

			if (I_progress_ind_description != PROGRESS_DESCR_IN_BAND_NOW) {
				Stop_timer_ns (AT5_T310);		/* only in case of interworking */
			}

			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case DA_INFO :
			Send_to_call_control (NS_INFO_IN);
			break;

		case DA_ALERT :
			Stop_timer_ns (AT5_T310);
			Send_to_call_control (NS_ALERT_IN);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Stop_timer_ns (AT5_T310);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

#		if AT5_SUPPLEMENTARY_SERVICES == ON

		case DA_REDIR :

			if ((Na_subscription_fco_hcdt != OFF)&& (Call_sub_state == SUB_STATE_NULL_0)) {
				I_service_id = DA_REDIR;
				Send_to_call_control (NS_SPF_FACILITY_CO);
				Set_state (STATE_OVERLAP_SENDING_2);

			} else {

				ns_unexpected_ev ();
			}

			break;

#		endif

		case TI_310 :
			set_i_cause (C_C_TIMER, C_V_T310, (char FAR *) &Call_state);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :

#			if AT5_SUPPLEMENTARY_SERVICES == ON
				fco_hcdt ();
#			else
				ns_unexpected_ev ();
#			endif
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED_4 */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void at5_u4 ()
{
	switch (event_id) {

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case DA_INFO :
			Send_to_call_control (NS_INFO_IN);
			break;

		case DA_CONN :
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

		default :

#			if AT5_SUPPLEMENTARY_SERVICES == ON
				fco_hcdt ();
#			else
				ns_unexpected_ev ();
#			endif
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void at5_u6()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Stop_timer_ns (AT5_T300);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (AT5_T300);
			Send_to_d_channel (CONN);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case TI_300 :

#			if NS_TYPE_PRI == ON

				if (Na_type == PRI) {
					set_i_cause (C_C_INVALID_MESSAGE, C_V_INCOMPATIBLE_DESTINATION_88, P_NIL);
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
				}

#			endif

			set_i_cause (C_C_TIMER, C_V_T300, (char FAR *) &Call_state);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED_7 */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void at5_u7 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST_8 */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void at5_u8 ()
{
	switch (event_id) {

		case DA_CONN_ACK :
			Send_to_call_control (NS_CONN_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROCEEDING */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void at5_u9 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE_10 */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void at5_u10 ()
{
	switch (event_id) {

#	if AT5_SUPPLEMENTARY_SERVICES == ON

		case DA_REDIR :

			if ((Na_subscription_fco_hcdt != OFF) && (Call_sub_state == SUB_STATE_NULL_0)) {
				I_service_id = DA_REDIR;
				Send_to_call_control (NS_SPF_FACILITY_CO);
				Set_state (STATE_OVERLAP_SENDING_2);

			} else {

				ns_unexpected_ev ();
			}

			break;

#	endif

		case DA_PROGRESS :

			if (Call_service_type == AT5_SERVICE_VOICE) {
				Send_to_call_control (NS_PROGRESS_IN);

			} else {						/* ignored in Basic Data Service */

				ns_unexpected_ev ();
			}

			break;

		case DA_INFO :

			if (Call_service_type == AT5_SERVICE_VOICE) {
				Send_to_call_control (NS_INFO_IN);

			} else {						/* ignored in Basic Data Service */

				ns_unexpected_ev ();
			}

			break;

#		if NS_T309 == ON

			case TI_309 :

				if (Na_T309_option == ON) {
					set_i_cause (C_C_TIMER, C_V_T309, (char FAR *) &Call_state);
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;
				}

#		endif

		default :

#			if AT5_SUPPLEMENTARY_SERVICES == ON
				fco_hcdt ();
#			else
				ns_unexpected_ev ();
#			endif

			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST_11 */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void at5_u11 ()
{
	switch (event_id) {

#		if AT5_SUPPLEMENTARY_SERVICES == ON

		case DA_ALERT :

			if ((Na_subscription_fco_hcdt != OFF) &&
				(Call_sub_state == STATE_OUTGOING_CALL_PROC_3)) {
				Send_to_call_control (NS_ALERT_IN);
				Call_sub_state = STATE_CALL_DELIVERED_4;

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_CONN :

			if ((Na_subscription_fco_hcdt != OFF) &&
				((Call_sub_state == STATE_OUTGOING_CALL_PROC_3) ||
				 (Call_sub_state == STATE_CALL_DELIVERED_4))) {
				Send_to_call_control (NS_CONN_CO);
				Call_sub_state = STATE_ACTIVE_10;
				Reset_internal_ie ();
				Send_to_d_channel (CONN_ACK);

			} else {

				ns_unexpected_ev ();
			}

			break;

#		endif

		case TI_305 :
			Restore_cause ();	/* send saved cause of the previous DISC */
			set_ie_i (CODESET_0, CAUSE);
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (AT5_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION_12 */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void at5_u12 ()
{
	switch (event_id) {

		case NS_CLEAR_RS :
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (AT5_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST_19 */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void at5_u19 ()
{
	switch (event_id) {

		case TI_308 :

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (AT5_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, (char FAR *) &Call_state);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		case NS_CLEAR_RS :
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

#if EQUIPMENT == NT2

/*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void at5_n0 ()
{

	switch (event_id) {

		case DA_SETUP :
			Call_service_type = (I_(bc,trf_cap) == TRF_CAP_SPEECH) ? AT5_SERVICE_VOICE : AT5_SERVICE_DATA;

			if (is_ie_i (CODESET_0, KEYPAD) == PRESENT) {

				Call_keypad_in_setup = ON;
			}

			Send_to_call_control (NS_CONN_IN);
			Start_timer_ns (AT5_T300);
			Set_state (STATE_CALL_INIT_1);
			break;

		case NS_CONN_RQ :
			Call_service_type = (I_(bc,trf_cap) == TRF_CAP_SPEECH) ? AT5_SERVICE_VOICE : AT5_SERVICE_DATA;
			Send_to_d_channel (SETUP);
			Start_timer_ns (AT5_T303);
			Set_state (STATE_CALL_PRESENT_6);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of  user
			   action requesting call establishment from the network.
			*/

void at5_n1 ()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Stop_timer_ns (AT5_T300);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CALL_PROC_RQ :
			ns_action_to_dl (AT5_T300, T3_NIL, CALL_PROC,
											   STATE_OUTGOING_CALL_PROC_3);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (AT5_T300);
			Send_to_d_channel (CONN);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case TI_300 :

#			if NS_TYPE_PRI == ON

				if (Na_type == PRI) {
					set_i_cause (C_C_INVALID_MESSAGE, C_V_INCOMPATIBLE_DESTINATION_88, P_NIL);
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
				}

#			endif

			set_i_cause (C_C_TIMER, C_V_T300, (char FAR *) &Call_state);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;

		}


}

/*-------------------------------------------------------------------------*/

		/* STATE_OVERLAP_SENDING_2 */

		/* Overlap sending state */

			/*
			   This state exists for an outgoing call when the user has
			   received acknowledgement of the call establishment request
			   which permits the user to send additional call information
			   to the network in overlap mode.
			*/


void at5_n2 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			ns_action_to_dl (T3_NIL, T3_NIL, CONN,
											   STATE_ACTIVE_10);
			break;

		case NS_CALL_PROC_RQ :
			ns_action_to_dl (T3_NIL, T3_NIL, CALL_PROC,
											   STATE_OUTGOING_CALL_PROC_3);
			break;

		case NS_ALERT_RQ:
			ns_action_to_dl (T3_NIL, T3_NIL, ALERT,
											   STATE_CALL_DELIVERED_4);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		case DA_INFO :
			Send_to_call_control (NS_INFO_IN);
			break;

		default :
			ns_unexpected_ev ();
			break;


		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PROC */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void at5_n3 ()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void at5_n4 ()
{
	switch (event_id) {

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void at5_n6 ()
{

	switch (event_id) {

		case DA_CALL_PROC :
			Release_saved_spdu ();
			ns_action_to_cc (AT5_T303, AT5_T310, NS_CALL_PROC_IN,
												 STATE_INCOMING_CALL_PROC_9);
			break;

		case DA_ALERT :
			Release_saved_spdu ();
			ns_action_to_cc (AT5_T303, T3_NIL, NS_ALERT_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_CONN :
			Release_saved_spdu ();
			ns_action_to_cc (AT5_T303, AT5_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case TI_303 :

			if (++N303 != MX_N303) {
				Send_saved_spdu_to_d_channel (SETUP);
				Start_timer_ns (AT5_T303);

			} else {
				set_i_cause (C_C_NORMAL_EVENT, C_V_NO_USER_RESPONDING_18, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);

				ns_action_to_dl (T3_NIL, AT5_T305, DISC,
												   STATE_DISCONNECT_INDICATION_12);
			}

			break;

		default :
			ns_unexpected_ev ();
			break;


	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void at5_n7 ()
{

	switch (event_id) {

		case DA_CONN :
			ns_action_to_cc (T3_NIL, AT5_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void at5_n8 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			ns_action_to_dl (AT5_T300, T3_NIL, CONN_ACK,
											   STATE_ACTIVE_10);
			break;

		case TI_300 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_PROTOCOL_ERROR_UNSPECIFIED_111, P_NIL);
			Save_cause ();									/* to send the RELEASE if T305 expire */
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, AT5_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROCEEDING */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void at5_n9 ()
{

	switch (event_id) {

		case DA_ALERT :
			ns_action_to_cc (AT5_T310, T3_NIL, NS_ALERT_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_CONN :
			ns_action_to_cc (AT5_T310, AT5_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case DA_PROGRESS :
			Stop_timer_ns (AT5_T310);
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_310 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "310");
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, AT5_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void at5_n10 ()
{

	switch (event_id) {

		case DA_CONN_ACK :
			/* no process */
			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void at5_n11 ()
{

	switch (event_id) {

		case NS_CLEAR_RS :
			Stop_timer_ns (AT5_T300);
			go_to_state_19 (AT5_T308);
			break;

		case TI_300 :

			if (disc_cause_error () == NOK) {
				set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
			}

			go_to_state_19 (AT5_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void at5_n12 ()
{
	switch (event_id) {

		case TI_305 :
			go_to_state_19 (AT5_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void at5_n19 ()
{
	switch (event_id) {

		case TI_308 :
			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (AT5_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		case NS_CLEAR_RS :

			break;		/* ignore */

		default :
			ns_unexpected_ev ();
			break;
	}
}

#endif

/*-------------------------------------------------------------------------*/

uchar at5_button_rq	()
{

		/* First, check is the SPID is OK */

	if (Dl_ei_state != EI_STATE_M_INIT) {

			/*
			 * SPID negotiation is not sucessfully completed.
			 */

		return (NOK);
	}

		/* Check if the User requested a specific button */

	if ((Dl_button_user == 0) && (Dl_button_net != 0)) {

			/* No button sent by the user and the network did provide one earlier
             * ---> skip the button request and include the button provided by
             * the network.
             */

		return (NOK);
	}

	if (Dl_button_internal == ON) {

		return (NOK);
	}

    if (I_ori_call_appear_button_nb == 0) {

    		/*
             * If no origination call appearence has been set,
             * set it to  1 by default.
             */

		I_ori_call_appear_button_nb = 1;
    }

		/* Button request is needed */

	return (OK);
}

/*EOF*/
