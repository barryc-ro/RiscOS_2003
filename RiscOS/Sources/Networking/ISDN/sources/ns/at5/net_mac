
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS ATT_5E5 macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


				/*
				   MACROs and DECLARATIONS used to access the Network
				   Signalling entity (NS) from the Call Control entity (CC).
				*/

/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_at5_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_at5_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(at5_,pr), p_off)
#define Isdn_init_at5_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_at5(pr,ie)					Get_ie 			(Paste(at5_,pr), Paste (at5_, ie))
#define	Isdn_get_val_at5(pr,ie,fld)			Isdn_get_val	(Paste(at5_,pr), Paste (at5_, ie), fld)
#define Isdn_p_str_at5(pr,ie,fld)			Isdn_p_str		(Paste(at5_,pr), Paste (at5_, ie), fld)
#define	Isdn_lgth_str_at5(pr,ie,fld)		Isdn_lgth_str	(Paste(at5_,pr), Paste (at5_, ie), fld)
#define	Isdn_mx_lgth_str_at5(pr,ie,fld)		Isdn_mx_lgth_str(Paste(at5_,pr), Paste (at5_, ie), fld)
#define	P_start_val_ns_at5(pr,ie)			P_start_val_ns	(Paste(at5_,pr), Paste (at5_, ie))
#define	P_val_ns_at5(ie)					P_val_ns		(Paste(at5_,ie))
#define Set_offset_at5(pr,ie)				Set_offset		(Paste(at5_,pr),Paste(at5_,ie))
#define	Set_next_ie_at5(ie)					Set_next_ie		(Paste(at5_,ie))
#define	Set_val_at5(ie,fld,val)				Set_val			(Paste(at5_,ie), fld, val)
#define Set_str_at5(ie, lv, p_str, mx_sz)	Set_str			(Paste(at5_,ie), lv, p_str, mx_sz)
#define Set_mem_at5(ie, lv, p_mem, sz)		Set_mem			(Paste(at5_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_at5(pr,ie)	Set_to_next_ie_instance (Paste(at5_,pr), Paste (at5_, ie))
#define Get_remaining_ie_instance_nb_at5(pr,ie,p_ie)	Get_remaining_ie_instance_nb(Paste(at5_,pr), Paste (at5_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_at5	ns_offset_t at5_message_header;
#else
#	define Message_header_offset_at5
#endif

/*-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interface */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

		/*    - 1 - primitives as seen from TERMINAL side    */


		/* NS_TE_CONN_RQ */
		/* NS_TE_CONN_IN */

struct off_ns_at5_te_conn_in {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_bc;						/* bearer capability */
	ns_offset_t at5_chan_id;				/* channel ID */
	ns_offset_t at5_progress_ind;			/* progress indicator */
	ns_offset_t at5_signal;					/* signal */
	ns_offset_t at5_called_nb;				/* called party number */
	ns_offset_t at5_calling_nb;				/* calling party number */
	ns_offset_t at5_llc;					/* low layer compatibility */
#	if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_uui;					/* user to user information */
	ns_offset_t at5_sel_call_appear;		/* selection call appearance */
	ns_offset_t at5_dest_call_appear;		/* destination call appearance */
#	endif
#	if EQUIPMENT == NT2
	ns_offset_t at5_endpoint_id;			/* endpoint identification */
#	endif
#	if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_feature_ind;			/* feature indication */
	ns_offset_t at5_adjunct_con;			/* adjunct control */
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
	ns_offset_t at5_switchhook;				/* switchhook */
	ns_offset_t at5_ori_call_appear;		/* origination call appearance */
	ns_offset_t at5_feature_act;			/* feature activation */
#endif
	ns_offset_t at5_te_cap;					/* terminal capabilities */
	ns_offset_t at5_keypad;					/* keypad */
	ns_offset_t at5_sending_complete;		/* sending complete */
};

		/* NS_TE_CONN_RS */
		/* NS_TE_CONN_CO */

struct off_ns_at5_te_conn_co {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_chan_id;				/* channel ID */
	ns_offset_t at5_signal;					/* signal */
	ns_offset_t at5_progress_ind;			/* progress indicator */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_uui;					/* user to user information */
	ns_offset_t at5_feature_ind;			/* feature indication */
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
	ns_offset_t at5_switchhook;				/* switchhook */
#endif
	ns_offset_t at5_te_cap;					/* terminal capabilities */
};

		/* NS_TE_CLEAR_RQ */
		/* NS_TE_CLEAR_IN */

struct off_ns_at5_te_clear_in {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_cause;					/* cause */
	ns_offset_t at5_signal;					/* signal */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_uui;					/* user to user information */
	ns_offset_t at5_sel_call_appear;		/* selection call appearance */
	ns_offset_t at5_keypad_con;				/* keypad control */
	ns_offset_t at5_feature_ind;			/* feature indication */
	ns_offset_t at5_adjunct_con;			/* adjunct control */
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
	ns_offset_t at5_switchhook;				/* switchhook */
#endif
};
		/* NS_TE_CLEAR_RS */
		/* NS_TE_CLEAR_CO */

struct off_ns_at5_te_clear_co {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_cause;					/* cause */
	ns_offset_t at5_signal;					/* signal */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_uui;					/* user to user information */
	ns_offset_t at5_sel_call_appear;		/* selection call appearance */
	ns_offset_t at5_keypad_con;				/* keypad control */
	ns_offset_t at5_feature_ind;			/* feature indication */
	ns_offset_t at5_adjunct_con;			/* adjunct control */
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
#endif
};

		/* NS_TE_SETUP_ACK_IN */

struct off_ns_at5_te_setup_ack_in {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_chan_id;				/* channel ID */
	ns_offset_t at5_signal;					/* signal */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
#endif
};

		/* NS_TE_CALL_PROC_RQ */
		/* NS_TE_CALL_PROC_IN */

struct off_ns_at5_te_call_proc_in {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_chan_id;				/* channel ID */
	ns_offset_t at5_signal;					/* signal */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
#endif
	ns_offset_t at5_te_cap;					/* terminal capabilities */
};

		/* NS_TE_ALERT_RQ */
		/* NS_TE_ALERT_IN */

struct off_ns_at5_te_alert_in {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_progress_ind;			/* progress indicator */
	ns_offset_t at5_signal;					/* signal */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_uui;					/* user to user information */
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
#endif
	ns_offset_t at5_chan_id;				/* channel ID */
	ns_offset_t at5_te_cap;					/* terminal capabilities */
};

		/* NS_TE_INFO_RQ */
		/* NS_TE_INFO_IN */

struct off_ns_at5_te_info_in {
	Message_header_offset_at5				/* message header parameters */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_chan_id;				/* channel ID */
#endif
	ns_offset_t at5_signal;					/* signal */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_sel_call_appear;		/* selection call appearance */
	ns_offset_t at5_keypad_con;				/* keypad control */
	ns_offset_t at5_feature_ind;			/* feature indication */
	ns_offset_t at5_adjunct_con;			/* adjunct control */
	ns_offset_t at5_display_con;			/* display control */
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
	ns_offset_t at5_switchhook;				/* switchhook */
	ns_offset_t at5_other_call_ref;			/* other call reference */
	ns_offset_t at5_feature_act;			/* feature activation */
#endif
	ns_offset_t at5_sending_complete;		/* sending complete */
	ns_offset_t at5_keypad;					/* keypad */
};

		/* NS_TE_PROGRESS_IN */

struct off_ns_at5_te_progress_in {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_cause;					/* cause */
	ns_offset_t at5_progress_ind;			/* progress indication */
	ns_offset_t at5_signal;					/* signal */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	ns_offset_t at5_uui;					/* user to user information */
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
#endif
};

#if AT5_SUPPLEMENTARY_SERVICES == ON

		/* NS_TE_SPF_FAC_RQ (HOLD/RECONN/CONF/DROP/TRANS) */

struct off_ns_at5_te_spf_fac_rq {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_service_id;				/* service identifier */
	ns_offset_t at5_chan_id;				/* channel ID */
	ns_offset_t at5_switchhook;				/* switchhook */
	ns_offset_t at5_other_call_ref;			/* other call reference */
};

		/* NS_TE_SPF_FAC_CO (HOLD/RECONN/CONF/DROP/TRANS-ACK/REJ)*/

struct off_ns_at5_te_spf_fac_co {
	Message_header_offset_at5				/* message header parameters */
	ns_offset_t at5_service_id;				/* service identifier */
	ns_offset_t at5_cause;					/* cause */
	ns_offset_t at5_chan_id;				/* channel ID */
	ns_offset_t at5_signal;					/* signal */
#	if AT5_KEY_SYSTEM_FEATURE == ON
	ns_offset_t at5_assoc_type;				/* associated_type */
#	endif
	ns_offset_t at5_sel_call_appear;		/* selection call appearance */
	ns_offset_t at5_dest_call_appear;		/* destination call appearance */
#	if EQUIPMENT == NT2
	ns_offset_t at5_endpoint_id;			/* endpoint identifier */
#	endif
	ns_offset_t at5_other_call_ref;			/* other call reference */
	ns_offset_t at5_feature_ind;			/* feature indication */
	ns_offset_t at5_adjunct_con;			/* adjunct control */
	ns_offset_t at5_display_fld;			/* display field */
	ns_offset_t at5_display;				/* display */
};

#endif

		/*---------------------------------------------------**
		**                                                   **
		**         structures of the offset areas            **
		**                                                   **
		**          according to TE or NET side              **
		**                                                   **
		**---------------------------------------------------*/


		/*   - 2 - primitives as seen from TE or NT sides   */



		/* NS_CONN_RQ */

typedef struct off_ns_at5_te_conn_in				off_ns_at5_conn_rq;
typedef struct off_ns_at5_te_conn_in				off_ns_at5_net_conn_rq;

		/* NS_CONN_IN */

typedef struct off_ns_at5_te_conn_in				off_ns_at5_conn_in;
typedef struct off_ns_at5_te_conn_in				off_ns_at5_net_conn_in;

		/* NS_CONN_RS */

typedef struct off_ns_at5_te_conn_co				off_ns_at5_conn_rs;
typedef struct off_ns_at5_te_conn_co				off_ns_at5_net_conn_rs;

		/* NS_CONN_CO */

typedef struct off_ns_at5_te_conn_co				off_ns_at5_conn_co;
typedef struct off_ns_at5_te_conn_co				off_ns_at5_net_conn_co;

		/* NS_CLEAR_RQ */

typedef struct off_ns_at5_te_clear_in				off_ns_at5_clear_rq;
typedef struct off_ns_at5_te_clear_in				off_ns_at5_net_clear_rq;

		/* NS_CLEAR_IN */

typedef struct off_ns_at5_te_clear_in				off_ns_at5_clear_in;
typedef struct off_ns_at5_te_clear_in				off_ns_at5_net_clear_in;

		/* NS_CLEAR_RS */

typedef struct off_ns_at5_te_clear_co				off_ns_at5_clear_rs;
typedef struct off_ns_at5_te_clear_co				off_ns_at5_net_clear_rs;

		/* NS_CLEAR_CO */

typedef struct off_ns_at5_te_clear_co				off_ns_at5_clear_co;
typedef struct off_ns_at5_te_clear_co				off_ns_at5_net_clear_co;

		/* NS_SETUP_ACK_RQ */

typedef struct off_ns_at5_te_setup_ack_in			off_ns_at5_net_setup_ack_rq;

		/* NS_SETUP_ACK_IN */

typedef struct off_ns_at5_te_setup_ack_in			off_ns_at5_setup_ack_in;

		/* NS_CALL_PROC_RQ */

typedef struct off_ns_at5_te_call_proc_in			off_ns_at5_call_proc_rq;
typedef struct off_ns_at5_te_call_proc_in			off_ns_at5_net_call_proc_rq;

		/* NS_CALL_PROC_IN */

typedef struct off_ns_at5_te_call_proc_in			off_ns_at5_call_proc_in;
typedef struct off_ns_at5_te_call_proc_in			off_ns_at5_net_call_proc_in;

		/* NS_ALERT_RQ */

typedef struct off_ns_at5_te_alert_in				off_ns_at5_alert_rq;
typedef struct off_ns_at5_te_alert_in				off_ns_at5_net_alert_rq;

		/* NS_ALERT_IN */

typedef struct off_ns_at5_te_alert_in				off_ns_at5_alert_in;
typedef struct off_ns_at5_te_alert_in				off_ns_at5_net_alert_in;

		/* NS_INFO_RQ */

typedef struct off_ns_at5_te_info_in				off_ns_at5_info_rq;
typedef struct off_ns_at5_te_info_in				off_ns_at5_net_info_rq;

		/* NS_INFO_IN */

typedef struct off_ns_at5_te_info_in				off_ns_at5_info_in;
typedef struct off_ns_at5_te_info_in				off_ns_at5_net_info_in;

		/* NS_PROGRESS_RQ */

typedef struct off_ns_at5_te_progress_in			off_ns_at5_net_progress_rq;

		/* NS_PROGRESS_IN */

typedef struct off_ns_at5_te_progress_in			off_ns_at5_progress_in;

#if AT5_SUPPLEMENTARY_SERVICES == ON

		/* NS_SPF_FAC_RQ */

typedef struct off_ns_at5_te_spf_fac_rq				off_ns_at5_spf_fac_rq;

		/* NS_SPF_FAC_CO */

typedef struct off_ns_at5_te_spf_fac_co				off_ns_at5_spf_fac_co;

#endif

		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/


		/* Call state (CALL_STATE) */

struct val_ns_at5_call_state {
	Next_instance_offset
	ie_val 		state_val;				/* call state value */
};

		/* Called party number (CALLED_NB) */

struct val_ns_at5_called_nb {
	Next_instance_offset
	ie_val		nb_type;                /* numbering type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_array 	nb[AT5_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_at5_calling_nb {
	Next_instance_offset
	ie_val		nb_type;                /* numbering type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_array 	nb[AT5_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

		/* Cause (CAUSE) */

struct val_ns_at5_cause {
	Next_instance_offset
	ie_val		cause_loc;				/* location */
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
	ie_array	cause_diag[AT5_MX_SZ_CAUSE_DIAG+2];	/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_at5_chan_id {
	Next_instance_offset
	ie_val 		int_type;				/* interface type */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val		coding_std;				/* coding standard */
	ie_val		chan_type;				/* channel type */
	ie_array	chan_nb[AT5_MX_SZ_CHAN_ID+2];	/* channel number */
};

#if EQUIPMENT == NT2

		/* Endpoint identifier (ENDPOINT_ID) */

struct val_ns_at5_endpoint_id {
	Next_instance_offset
	ie_val		usid;					/* user id */
	ie_val		tid;					/* terminal id */
	ie_val		interp;					/* interpreter flag */
};

#endif

		/* Keypad */

struct val_ns_at5_keypad {
	Next_instance_offset
	ie_array 	text[AT5_MX_SZ_KEYPAD+2];		/* keypad information */
};

		/* Progress indicator (PROGRESS_IND) */

struct val_ns_at5_progress_ind {
	Next_instance_offset
	ie_val 		progress_loc;			/* progress location */
	ie_val 		progress_descr;			/* progress description */
};

		/* Signal (SIGNAL) */

struct val_ns_at5_signal {
	Next_instance_offset
	ie_val		signal_val;				/* signal value */
};

		/* Bearer Capability (BC) */

struct val_ns_at5_bc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		layer_nb;				/* (fictitious field) number of layer identifiers actually present in the bc IE */
	ie_val		layer_id;				/* user information layer protocol identifier */
	ie_val		protocol_id;			/* user information protocol identifier */
	ie_val		add_layer_id;			/* additional user information layer protocol identifier */
	ie_val		add_protocol_id;		/* additional user information protocol identifier */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_at5_llc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		symmetry;				/* symmetry */
	ie_val		dest_rate;				/* transfer rate for octet 4b */
	ie_val		layer_id;				/* user information layer protocol identifier */
	ie_val		protocol_id;			/* user information protocol identifier */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		user_rate;				/* user rate */
	ie_val		layer_nb;				/* (fictitious field) number of layer identifiers actually present in the llc IE */
	ie_val		add_layer_id;			/* additional user information layer protocol identifier */
	ie_val		add_protocol_id;		/* additional user information protocol identifier */
};

/*--------- IE not used in basic service ----------------------------------*/

#if AT5_SUPPLEMENTARY_SERVICES == ON

struct val_ns_at5_restart_ind {
	Next_instance_offset
	ie_val null;							/* not used */
};

				/* switchhook					(SWITCHHOOK) */

struct val_ns_at5_switchhook {
	Next_instance_offset
	ie_val hook_val;						/* hook value */
};

				/* User-to-user information (UUI) */

struct val_ns_at5_uui {
	Next_instance_offset
	ie_array	text[AT5_MX_SZ_UUI+2];			/* user information */
};

				/* service identifier			(SERVICE_ID) */

struct val_ns_at5_service_id {
	Next_instance_offset
	ie_val service_id;						/* service id */
};

			/* ======== codeset 6 ======== */

				/* adjunct control 				(ADJUNCT_CON) */

struct val_ns_at5_adjunct_con {
	Next_instance_offset
	ie_val adjunct_val;						/* adjunct control value */
};

				/* associated type				(ASSOC_TYPE) */

struct val_ns_at5_assoc_type {
	Next_instance_offset
	ie_val assoc_status;
};

				/* destination call appearance	(DEST_CALL_APPEAR) */

struct val_ns_at5_dest_call_appear {
	Next_instance_offset
	ie_val button_nb;						/* button number (1..254) */
};

				/* display control				(DISPLAY_CON) */

struct val_ns_at5_display_con {
	Next_instance_offset
	ie_val display_con_mode;				/* display mode */
};

				/* display field				(DISPLAY_FLD) */

struct val_ns_at5_display_fld {
	Next_instance_offset
	ie_val display_fld_mode;				/* display mode */
	ie_val submode;							/* submode */
	ie_val display_fld_type;				/* display field type */
	ie_array info[AT5_MX_SZ_DISPLAY_FLD+2];		/* display information */
};

		/* Display */

struct val_ns_at5_display {
	Next_instance_offset
	ie_array 	info[AT5_MX_SZ_DISPLAY_FLD+2];/* display information */
};

				/* feature activation			(FEATURE_ACT) */

struct val_ns_at5_feature_act {
	Next_instance_offset
	ie_val button_type_act;					/* button type */
	ie_val module_nb;						/* module number */
	ie_val button_nb;						/* button number (1..254) */
};

				/* feature indication 			(FEATURE_IND) */

struct val_ns_at5_feature_ind {
	Next_instance_offset
	ie_val button_type_ind;					/* button type */
	ie_val module_nb;						/* module number */
	ie_val status_type;						/* status type */
	ie_val info_lgth;						/* length of the following information */
	ie_array info[AT5_MX_SZ_FEATURE_IND+2];		/* information dependent from the status type */
};

				/* keypad control 				(KEYPAD_CON) */

struct val_ns_at5_keypad_con {
	Next_instance_offset
	ie_val call_ref_type;					/* call reference type */
};

				/* origination call appearance	(ORI_CALL_APPEAR) */

struct val_ns_at5_ori_call_appear {
	Next_instance_offset
	ie_val button_nb;						/* button number (1..254) */
};

				/* other call reference 		(OTHER_CALL_REF) */

struct val_ns_at5_other_call_ref {
	Next_instance_offset
	ie_val conn_id;							/* conn ID */
};

				/* selected call appearance 	(SEL_CALL_APPEAR) */

struct val_ns_at5_sel_call_appear {
	Next_instance_offset
	ie_val button_nb_call_appear;			/* button number / call appearance */
};


struct val_ns_at5_managmnt	{
	Next_instance_offset
	ie_val null;							/* not used */
};


#endif


#if NS_IE_TSP_OUT == ON

			/* Definitions for compilation purpose only */

	struct val_ns_at5_sending_complete {
		Next_instance_offset
		ie_val	unused;
	};


#endif

/*-------------------------------------------------------------------------*/

/***************************************************************************/

					/* Information Elements (IE) storage */


/*-------------------------------------------------------------------------*/

			/*
				Isdn_at5_store_called_nb : called number IE

					INPUT :
						- pr			= primitive ID,
						- nbering_plan	= numbering plan ID
						- nb_type_		= numbering type
						- p_string		= address of the literal string.
			*/

#define Isdn_at5_store_called_nb(pr, nb_type_,nbering_plan_id, p_string) \
		Set_offset_at5	(pr,		called_nb);						\
		Set_val_at5		(called_nb,	nb_type,	nb_type_);			\
		Set_val_at5		(called_nb,	plan_id,	nbering_plan_id);	\
		Set_str_at5		(called_nb,	nb,			p_string,		AT5_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at5_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nbering_plan_id	= numbering plan ID,
						- nb_type_			= numbering type
						- p_string  		= pointer on the calling number literal string.
			*/

#define Isdn_at5_store_calling_nb(pr, nb_type_, nbering_plan_id,p_string) \
		Set_offset_at5	(pr,			calling_nb);\
		Set_val_at5		(calling_nb,	nb_type,	nb_type_);			\
		Set_val_at5		(calling_nb,	plan_id, 	nbering_plan_id);\
		Set_str_at5		(calling_nb,	nb, 		p_string,	AT5_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at5_store_cause : cause IE

					INPUT :
						- pr		= primitive ID,
						- loc		= cause location.
						- cl		= cause class,
						- val		= cause value,
						- diag_nb	= number of diagnostics
						- diag		= cause diagnostic.

			*/

#define Isdn_at5_store_cause(pr, loc, cl, val, diag_nb_, p_diags)	\
		Set_offset_at5	(pr,	cause);							\
		Set_val_at5		(cause,	cause_loc,	loc);				\
		Set_val_at5		(cause,	cause_class,cl);				\
		Set_val_at5		(cause,	cause_val,	val);				\
		Set_mem_at5		(cause,	cause_diag,	p_diags, (diag_nb_ > AT5_MX_SZ_CAUSE_DIAG) ? AT5_MX_SZ_CAUSE_DIAG : diag_nb_)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_at5_store_chan_id_BRI : store channel ID IE

					INPUT :
						- pr 		= primitive ID,
						- int_type_ = interface type,
						- pref 		= preferred channel,
						- sel 		= channel selection,
			*/

#define Isdn_at5_store_chan_id_BRI(pr,pref, sel) \
				Set_offset_at5	(pr,		chan_id);\
				Set_val_at5     (chan_id,   int_type,   INT_TYPE_BRI);          \
				Set_val_at5		(chan_id,	pref_excl,	pref);\
				Set_val_at5		(chan_id,	chan_sel,	sel);\
				Set_next_ie_at5	(chan_id)

		/*
				 Isdn_at5_store_chan_id_PRI : store channel ID IE

					INPUT :
						- pr            = primitive ID,
						- pref_excl_    = preferred channel,
						- chan_sel_     = channel selection,
						- coding_std_   = coding standard,
						- chan_type_    = channel type,
						- p_chan_nb_    = channel number.

		*/

#define Isdn_at5_store_chan_id_PRI(pr, pref_excl_,chan_sel_, coding_std_, chan_type_, p_chan_nb_) \
		Set_offset_at5  (pr,        chan_id);                           \
		Set_val_at5     (chan_id,   int_type,   INT_TYPE_PRI);          \
		Set_val_at5     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_at5     (chan_id,   chan_sel,   chan_sel_);             \
		Set_val_at5     (chan_id,   coding_std, coding_std_);           \
		Set_val_at5     (chan_id,   chan_type,  chan_type_);            \
		Set_str_at5     (chan_id,   chan_nb,    p_chan_nb_,     AT5_MX_SZ_CHAN_ID+1)

/*-------------------------------------------------------------------------*/
#if EQUIPMENT == NT2

			/*
				 Isdn_at5_store_endpoint_id : store endpoint identifier

					INPUT :
						- pr 		= primitive ID,
						- us_id		= user id,
						- t_id		= terminal id,
						- interp_	= interpreter flag
			*/

#define Isdn_at5_store_endpoint_id(pr, us_id, t_id, interp_) \
				Set_offset_at5	(pr,			endpoint_id);\
				Set_val_at5		(endpoint_id,	usid,		us_id);\
				Set_val_at5		(endpoint_id,	tid,		t_id);\
				Set_val_at5		(endpoint_id,	interp,		interp_);\
				Set_next_ie_at5	(endpoint_id)
#endif
/*-------------------------------------------------------------------------*/

			/*
				Isdn_at5_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_at5_store_keypad(pr,p_text) \
		Set_offset_at5	(pr,		keypad);\
		Set_str_at5		(keypad,	text,	p_text,	AT5_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_at5_store_progress_ind : store progress indicator

					INPUT :
						- pr 		= primitive ID,
						- loc		= location,
						- descr		= description,
			*/

#define Isdn_at5_store_progress_ind(pr, loc, descr) \
				Set_offset_at5	(pr,			progress_ind);\
				Set_val_at5		(progress_ind,	progress_loc,	loc);\
				Set_val_at5		(progress_ind,	progress_descr,	descr);\
				Set_next_ie_at5	(progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at5_store_sending_complete : sending complete

					INPUT :
						- pr		= primitive ID,

			*/

#define Isdn_at5_store_sending_complete(pr)\
		Set_offset_at5	(pr,				sending_complete)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_at5_store_signal : store signal

					INPUT :
						- pr 		= primitive ID,
						- val		= signal value,
			*/

#define Isdn_at5_store_signal(pr, val) \
				Set_offset_at5	(pr,		signal);\
				Set_val_at5		(signal,	signal_val,	val);\
				Set_next_ie_at5	(signal)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_at5_store_te_cap : store terminal capabilities

					INPUT :
						- pr 		= primitive ID
			*/

#define Isdn_at5_store_te_cap(pr) \
				Set_offset_at5	(pr,		te_cap)

/*-------------------------------------------------------------------------*/

			/*
			   _Isdn_at5_store_bc : store the bearer capability information
								   element :

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- nb_layer			= number of layer identifiers actually present in the IE,
						- first_layer		= first layer identifier,
						- first_protocol	= first protocol identifier,
						- second_layer		= second layer identifier,
						- second_protocol	= second protocol identifier.
			*/

#define _Isdn_at5_store_bc(pr, trfcap, trfmode, trfrate, nb_layer, first_layer, first_protocol, second_layer, second_protocol) \
				Set_offset_at5	(pr,	bc);\
				Set_val_at5		(bc,	trf_cap,		trfcap);\
				Set_val_at5		(bc,	trf_mode,		trfmode);\
				Set_val_at5		(bc,	trf_rate,		trfrate);\
				Set_val_at5		(bc,	layer_nb,		nb_layer);\
				Set_val_at5		(bc,	layer_id,		first_layer);\
				Set_val_at5		(bc,	protocol_id,	first_protocol);\
				Set_val_at5		(bc,	add_layer_id,	second_layer);\
				Set_val_at5		(bc,	add_protocol_id,second_protocol);\
				Set_next_ie_at5	(bc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_bc_SPEECH : store the bearer capability
										  information element for
										  Speech Circuit Transport Mode
										  Data Calls.

			   Note : these parameters are useless, because forced in the
						SPDU building.

					INPUT :
						- pr				= primitive ID,
			*/

#define Isdn_at5_store_bc_SPEECH(pr)	\
				_Isdn_at5_store_bc(pr,	\
				TRF_CAP_SPEECH, TRF_MODE_CIRCUIT, TRF_RATE_64KBS, \
				1, LAYER_ID_1, PROTOCOL_ID_1_G711_u, \
				BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_bc_AUDIO_CIRCUIT_DATA : store the bearer capability
													information element for
													3.1 kHz Audio Circuit Transport Mode
													Data calls.

					INPUT :
						- pr				= primitive ID,
			*/

#define Isdn_at5_store_bc_AUDIO_CIRCUIT_DATA(pr) \
				_Isdn_at5_store_bc(pr, \
				TRF_CAP_3_1_AUDIO, TRF_MODE_CIRCUIT, TRF_RATE_64KBS, \
				1, LAYER_ID_1, PROTOCOL_ID_1_G711_u, \
				BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_bc_CIRCUIT_DATA : store the bearer capability
												information element for
												Circuit Transport Mode
												Data Calls.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
			*/

#define Isdn_at5_store_bc_CIRCUIT_DATA(pr, trfcap) \
				_Isdn_at5_store_bc(pr, \
				trfcap, TRF_MODE_CIRCUIT, TRF_RATE_64KBS, \
				1, LAYER_ID_1, PROTOCOL_ID_1_RA_I461, \
				BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_bc_X31_PACKET : store the bearer capability
											  information element for
											  X.31 Packet Transport Mode Connections.

					INPUT :
						- pr				= primitive ID,
			*/

#define Isdn_at5_store_bc_X31_PACKET(pr) \
				_Isdn_at5_store_bc(pr, \
				TRF_CAP_UNRESTRICTED, TRF_MODE_PACKET, TRF_RATE_PACKET, \
				2, LAYER_ID_2, PROTOCOL_ID_2_X25_LL, \
				LAYER_ID_3, PROTOCOL_ID_3_X25_PL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_bc_NO_LAYER : store the bearer capability
											 information element without
											 Layer-Protocol field.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
			*/

#define Isdn_at5_store_bc_NO_LAYER(pr, trfcap, trfmode, trfrate)	\
		_Isdn_at5_store_bc(pr, trfcap, trfmode, trfrate, 0, BYTE_VAL_NIL, BYTE_VAL_NIL, BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_bc_ONE_LAYER : store the bearer capability
											 information element with only
											 one Layer-Protocol field.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- layer				= layer identifier,
						- protocol			= protocol identifier,
			*/

#define Isdn_at5_store_bc_ONE_LAYER(pr, trfcap, trfmode, trfrate, layer, protocol) \
		_Isdn_at5_store_bc(pr, trfcap, trfmode, trfrate, 1, layer, protocol, BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_bc_TWO_LAYERS : store the bearer capability
											 information element with
											 two Layer-Protocol field.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- first_layer		= first layer identifier,
						- first_protocol	= first protocol identifier,
						- second_layer		= second layer identifier,
						- second_protocol	= second protocol identifier.
			*/

#define Isdn_at5_store_bc_TWO_LAYERS(pr, trfcap, trfmode, trfrate, first_layer, first_protocol, second_layer, second_protocol) \
		_Isdn_at5_store_bc(pr, trfcap, trfmode, trfrate, 2, first_layer, first_protocol, second_layer, second_protocol)

/*-------------------------------------------------------------------------*/

			/*
			   _Isdn_at5_store_llc : store the low layer compatibility information
								   element :

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- strct				= structure,
						- symm				= symmetry,
						- destrate			= origination to destination rate,
						- nb_layer			= number of layer identifiers actually present in the IE,
						- first_layer		= first layer identifier,
						- first_protocol	= first protocol identifier,
						- synasyn			= synchronous/asynchronous,
						- usr_rate			= user rate,
						- second_layer		= second layer identifier,
						- second_protocol	= second protocol identifier.
			*/

#define _Isdn_at5_store_llc(pr, trfcap, trfmode, trfrate, strct, symm, destrate, nb_layer, first_layer, first_protocol, synasyn, usr_rate, second_layer, second_protocol)\
				Set_offset_at5	(pr,	llc);\
				Set_val_at5		(llc,	trf_cap,		trfcap);\
				Set_val_at5		(llc,	trf_mode,		trfmode);\
				Set_val_at5		(llc,	trf_rate,		trfrate);\
				Set_val_at5		(llc,	structure,		strct);\
				Set_val_at5		(llc,	symmetry,		symm);\
				Set_val_at5		(llc,	dest_rate,		destrate);\
				Set_val_at5		(llc,	layer_nb,		nb_layer);\
				Set_val_at5		(llc,	layer_id,		first_layer);\
				Set_val_at5		(llc,	protocol_id,	first_protocol);\
				Set_val_at5		(llc,	syn_asyn,		synasyn);\
				Set_val_at5		(llc,	user_rate,		usr_rate);\
				Set_val_at5		(llc,	add_layer_id,	second_layer);\
				Set_val_at5		(llc,	add_protocol_id,second_protocol);\
				Set_next_ie_at5	(llc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_llc_ONE_LAYER : store the low layer compatibility
											 information element with only
											 one Layer-Protocol field.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- layer				= layer identifier,
						- protocol			= protocol identifier,
			*/

#define Isdn_at5_store_llc_ONE_LAYER(pr, trfcap, trfmode, trfrate, strct, symm, destrate, first_layer, first_protocol, synasyn, usr_rate)\
		_Isdn_at5_store_llc(pr, trfcap, trfmode, trfrate, strct, symm, \
							destrate, 1, first_layer, first_protocol, \
							synasyn, usr_rate, BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_at5_store_llc_TWO_LAYERS : store the low layer compatibility
											 information element with
											 two Layer-Protocol field.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- first_layer		= first layer identifier,
						- first_protocol	= first protocol identifier,
						- second_layer		= second layer identifier,
						- second_protocol	= second protocol identifier.
			*/

#define Isdn_at5_store_llc_TWO_LAYERS(pr, trfcap, trfmode, trfrate, strct, symm, destrate, first_layer, first_protocol,	synasyn, usr_rate, second_layer, second_protocol)\
		_Isdn_at5_store_llc(pr, trfcap, trfmode, trfrate, strct, symm, \
							destrate, 2, first_layer, first_protocol, \
							synasyn, usr_rate, second_layer, second_protocol)\

/*-------------------------------------------------------------------------*/
/*--------- IE not used in basic service ----------------------------------*/

#if AT5_SUPPLEMENTARY_SERVICES == ON

#define Isdn_at5_store_restart_ind 	/* not used */

				/* switchhook					(SWITCHHOOK) */

#define Isdn_at5_store_switchhook(	pr, hook_val_)						\
				Set_offset_at5			(pr, switchhook);					\
				Set_val_at5				(switchhook, hook_val, hook_val_);	\
				Set_next_ie_at5			(switchhook)

				/* uui 							(UUI) */

#define Isdn_at5_store_uui(pr, p_text)						\
		Set_offset_at5	(pr,	uui);							\
		Set_str_at5		(uui, 	text,	p_text,	AT5_MX_SZ_UUI+1)

				/* adjunct control 				(ADJUNCT_CON) */

#define Isdn_at5_store_adjunct_con(	pr, adjunct_val_)							\
				Set_offset_at5			(pr, adjunct_con);							\
				Set_val_at5				(adjunct_con, adjunct_val, adjunct_val_);	\
				Set_next_ie_at5			(adjunct_con)

#define Isdn_at5_store_assoc_type	/* not used */

				/* destination call appearance	(DEST_CALL_APPEAR) */

#define Isdn_at5_store_dest_call_appear(pr, button_nb_)								\
				Set_offset_at5				(pr, dest_call_appear);						\
				Set_val_at5					(dest_call_appear, button_nb, button_nb_);	\
				Set_next_ie_at5				(dest_call_appear)

				/* display control				(DISPLAY_CON) */

#define Isdn_at5_store_display_con(	pr, display_con_mode_)								\
				Set_offset_at5			(pr, display_con);									\
				Set_val_at5				(display_con, display_con_mode, display_con_mode);	\
				Set_next_ie_at5			(display_con)

				/* display field				(DISPLAY_FLD) */

#define Isdn_at5_store_display_fld(	pr, display_fld_mode_, submode_, display_fld_type_, p_info)\
		Set_offset_at5	(pr, display_fld);									\
		Set_val_at5		(display_fld, display_fld_mode, display_fld_mode_);	\
		Set_val_at5		(display_fld, submode, submode_);					\
		Set_val_at5		(display_fld, display_fld_type, display_fld_type_;	\
		Set_str_at5		(display_fld, info, p_info, AT5_MX_SZ_DISPLAY_FLD+1)

				/* feature activation			(FEATURE_ACT) */

#define Isdn_at5_store_feature_act(	pr, button_type_act_, module_nb_, button_nb_)		\
				Set_offset_at5			(pr, feature_act);									\
				Set_val_at5				(feature_act, button_type_act, button_type_act_);	\
				Set_val_at5				(feature_act, module_nb, module_nb_);				\
				Set_val_at5				(feature_act, button_nb, button_nb_);				\
				Set_next_ie_at5			(feature_act)

				/* keypad control 				(KEYPAD_CON) */

#define Isdn_at5_store_keypad_con(	pr, call_ref_type_)								\
				Set_offset_at5			(pr, keypad_con);								\
				Set_val_at5				(keypad_con, call_ref_type, call_ref_type_);	\
				Set_next_ie_at5			(keypad_con)

				/* origination call appearance	(ORI_CALL_APPEAR) */

#define Isdn_at5_store_ori_call_appear(	pr, button_nb_)								\
				Set_offset_at5				(pr, ori_call_appear);						\
				Set_val_at5					(ori_call_appear, button_nb, button_nb_);	\
				Set_next_ie_at5				(ori_call_appear)

				/* other call reference 		(OTHER_CALL_REF) */

#define Isdn_at5_store_other_call_ref(	pr, conn_id_)								\
				Set_offset_at5				(pr, other_call_ref);						\
				Set_val_at5					(other_call_ref, conn_id, conn_id_);		\
				Set_next_ie_at5				(other_call_ref)

				/* selected call appearance 	(SEL_CALL_APPEAR) */

#define Isdn_at5_store_sel_call_appear(	pr, button_nb_call_appear_)								\
				Set_offset_at5	(pr, sel_call_appear);												\
				Set_val_at5		(sel_call_appear, button_nb_call_appear, button_nb_call_appear_);	\
				Set_next_ie_at5	(sel_call_appear)

				/* service identifier			(SERVICE_ID) */

#define Isdn_at5_store_service_id(pr, service_id_)							\
				Set_offset_at5			(pr, service_id);						\
				Set_val_at5				(service_id, service_id, service_id_);	\
				Set_next_ie_at5			(service_id)

#define Isdn_at5_store_managmnt		/* not used */

#endif

/*--------------------------------------------------------------------------*/
/*				feature indication specific macros	(FEATURE_IND)			*/
/*--------------------------------------------------------------------------*/

#define Isdn_get_feature_ind_FNS_feature_number(pr, index) (					\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*2]\
		)

#define Isdn_get_feature_ind_FNS_status(pr, index) (							\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*2+1]\
		)

#define Isdn_get_feature_ind_FBS_feature_number(pr, index) (					\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*3]\
		)

#define Isdn_get_feature_ind_FBS_indicator(pr, index) (							\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*3+1]\
		)

#define Isdn_get_feature_ind_FBS_status(pr, index) (							\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*3+2]\
		)

#define Isdn_get_feature_ind_MBS_starting(pr) (									\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[0]\
		)

#define Isdn_get_feature_ind_MBS_nb_button(pr) (								\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset + \
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[1]\
		)

#define Isdn_get_feature_ind_MBS_status(pr, index) (							\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index+2]\
		)

#define Isdn_get_feature_ind_MS_meaning(pr) (									\
		(((Paste (off_ns_at5_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_at5_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_at5_,pr) FAR *) p__offset) -> feature_ind) )) -> info[0]\
		)

/*EOF*/
