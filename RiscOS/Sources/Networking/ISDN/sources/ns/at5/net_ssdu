
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.at5 */

#include "at5.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		at5_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/
uchar at5_chan_id_chan_nb_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

		if (I_(chan_id,int_type) == INT_TYPE_PRI) {

			/*
			 * Reset the extension bit in the chan_nb field.
			 */

			for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
				Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}
		}
	}

	return (OK);
}

uchar at5_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		if (I_chan_id_int_type == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}

			/*
			 * Set the extension bit to 1 in the chan_nb field.
			 */

			i = I_(chan_id, chan_nb_lgth)-1;

			Set_ext_bit (I_(chan_id, p_chan_nb)[i]);
		}
	}
	return (OK);

}

/*-------------------------------------------------------------------------

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*-------- NS_CONN_RQ */
/*-------- NS_CONN_IN */

#define NET_CONN_IN_AT5			 CONN_IN_AT5
#define CONN_RQ_AT5				 CONN_IN_AT5
#define NET_CONN_RQ_AT5			 CONN_IN_AT5

#define NET_CONN_RS_AT5			 CONN_CO_AT5
#define CONN_RS_AT5			 	 CONN_CO_AT5

/*-------- NS_CONN_CO */

#define NET_CONN_CO_AT5			 CONN_RS_AT5

/*-------- NS_CLEAR_RQ */

#define NET_CLEAR_RQ_AT5		 CLEAR_IN_AT5
#define CLEAR_RQ_AT5			 CLEAR_IN_AT5

/*-------- NS_CLEAR_IN */

#define NET_CLEAR_IN_AT5			 CLEAR_RQ_AT5

/*-------- NS_CLEAR_RS */

#define NET_CLEAR_RS_AT5			CLEAR_CO_AT5
#define CLEAR_RS_AT5				CLEAR_CO_AT5

/*-------- NS_CLEAR_CO */

#define NET_CLEAR_CO_AT5			CLEAR_RS_AT5

/*-------- NS_SETUP_ACK_RQ */

#define NET_SETUP_ACK_RQ_AT5		SETUP_ACK_IN_AT5

/*-------- NS_SETUP_ACK_IN */

#define NET_SETUP_ACK_IN_AT5		SETUP_ACK_RQ_AT5

/*-------- NS_CALL_PROC_RQ */

#define NET_CALL_PROC_RQ_AT5		CALL_PROC_IN_AT5
#define CALL_PROC_RQ_AT5			CALL_PROC_IN_AT5

/*-------- NS_CALL_PROC_IN */

#define NET_CALL_PROC_IN_AT5		CALL_PROC_RQ_AT5

/*-------- NS_ALERT_RQ */

#define NET_ALERT_RQ_AT5			ALERT_IN_AT5
#define ALERT_RQ_AT5				ALERT_IN_AT5

/*-------- NS_ALERT_IN */

#define NET_ALERT_IN_AT5			ALERT_RQ_AT5

/*-------- NS_INFO_RQ */

#define NET_INFO_RQ_AT5			INFO_IN_AT5
#define INFO_RQ_AT5			 	INFO_IN_AT5

/*-------- NS_INFO_IN */

#define NET_INFO_IN_AT5			 INFO_RQ_AT5

/*-------- NS_PROGRESS_RQ */

#define NET_PROGRESS_RQ_AT5		 PROGRESS_IN_AT5

/*-------- NS_PROGRESS_IN */

#define NET_PROGRESS_IN_AT5		 PROGRESS_RQ_AT5

#if AT5_SUPPLEMENTARY_SERVICES == ON

/*-------- NS_SPF_FACILITY_RQ */

#define	SPF_FACILITY_IN_AT5				SPF_FACILITY_CO_AT5
#define NET_SPF_FACILITY_RQ_AT5			SPF_FACILITY_IN_AT5

/*-------- NS_SPF_FACILITY_CO */

#define NET_SPF_FACILITY_CO_AT5			 SPF_FACILITY_RQ_AT5

#endif

/*=========================================================================*/

#define Ns_at5_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_at5_end_table_or_function		};

#define Ns_at5_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_at5_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_at5		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_at5_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_at5_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "at5.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define AT5_MX_TAB_SSDU (Rnd_sizeof(AT5_TAB_SSDU) / SSDU_ELEM_SIZE) /* number of element in the table */
CONST uchar at5_mx_size_ssdu = AT5_MX_TAB_SSDU;

/*=========================================================================*/
/*
				Specific functions :
*/


#if AT5_SUPPLEMENTARY_SERVICES == ON

#   if NEW_FCT_STYLE == ON
	uchar   at5_check_1_254_ssdu    (uchar FAR * p_i_field);
	uchar	at5_check_sca_ssdu		(uchar FAR * p_i_field);
#else
	uchar   at5_check_1_254_ssdu    ();
	uchar	at5_check_sca_ssdu		();
#endif

/*--------------------------------------------------------------------------*/

uchar   at5_dest_call_appear_ssdu ()        /* test for value between 1 and 254 */
{
	return (at5_check_1_254_ssdu (&(I_dest_call_appear_button_nb)));
}

/*--------------------------------------------------------------------------*/

uchar   at5_feature_act_ssdu ()             /* test for value between 1 and 254 */
{
	return (at5_check_1_254_ssdu (&(I_feature_act_button_nb)));
}

/*--------------------------------------------------------------------------*/

uchar   at5_feature_ind_init_ssdu ()        /* init flag for MBS */
{
	I_feature_ind_i_flag = ON;
	I_feature_ind_i_counter_ssdu = 0;
	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar   at5_feature_ind_ssdu ()
{
	switch (I_feature_ind_status_type) {

		case FEATURE_NUMBER_STATUS :

			if (I_feature_ind_i_flag == ON) {
				I_feature_ind_i_flag = OFF;
				*p_ssdu_val++ = I_feature_ind_i_counter_spdu;
			}

			if ((I_feature_ind_feature_ssdu == 0) ||
				(I_feature_ind_feature_ssdu == 253) ||
				(I_feature_ind_feature_ssdu == 255))
				return (NOK);
			*p_ssdu_val++ = I_feature_ind_feature_ssdu;

			switch (I_feature_ind_status_ssdu) {
				case STATUS_ACTIVATED :
				case STATUS_DEACTIVATED :
				case STATUS_PENDING :
				case STATUS_LOCAL_HOLD :
				case STATUS_REMOTE_HOLD :
				case STATUS_CONFIRMED :
				case STATUS_ALREADY_IN_RQ_STATE :
				case STATUS_REJECTED :
					*p_ssdu_val++ = I_feature_ind_status_ssdu;
					break;
				default :
					return (NOK);
			}

			if (I_feature_ind_i_counter_ssdu++ == I_feature_ind_i_counter_spdu) return (OK);
			return (at5_feature_ind_ssdu ());

		case FEATURE_BUTTON_STATUS :

			if (I_feature_ind_i_flag == ON) {
				I_feature_ind_i_flag = OFF;
				*p_ssdu_val++ = I_feature_ind_i_counter_spdu;
			}

			if (at5_check_1_254_ssdu (&(I_feature_ind_feature_ssdu)) != OK) return (NOK);

			switch (I_feature_ind_indicator_ssdu) {
				case INDICATOR_0 :
				case INDICATOR_1 :
				case INDICATOR_2 :
				case INDICATOR_3 :
					*p_ssdu_val++ = I_feature_ind_indicator_ssdu;
					break;
				default :
					return (NOK);
			}

			switch (I_feature_ind_status_ssdu) {
				case STATUS_ACTIVATED :
				case STATUS_DEACTIVATED :
				case STATUS_PENDING :
				case STATUS_LOCAL_HOLD :
				case STATUS_REMOTE_HOLD :
				case STATUS_CONFIRMED :
				case STATUS_ALREADY_IN_RQ_STATE :
				case STATUS_REJECTED :
					*p_ssdu_val++ = I_feature_ind_status_ssdu;
					break;
				default :
					return (NOK);
			}

			if (I_feature_ind_i_counter_ssdu++ == I_feature_ind_i_counter_spdu) return (OK);
			return (at5_feature_ind_ssdu ());

		case MULTIPLE_BUTTON_STATUS :

			if (I_feature_ind_i_flag == ON) {
				I_feature_ind_i_flag = OFF;
				if (at5_check_1_254_ssdu (&(I_feature_ind_starting_feature)) != OK) return (NOK);
				if (at5_check_1_254_ssdu (&(I_feature_ind_number_of_button)) != OK) return (NOK);
				*p_ssdu_val++ = I_feature_ind_i_counter_spdu;
			}

			*p_ssdu_val++ = I_feature_ind_status_ssdu;

			if (I_feature_ind_i_counter_ssdu++ == I_feature_ind_i_counter_spdu) return (OK);
			return (at5_feature_ind_ssdu ());

		case MAINTENANCE_STATUS :
			return (s_exec_ssdu_ie ((uchar *)&AT5_SSDU_FEATURE_IND_MS));

		default :
			return (NOK);
	}
}

/*--------------------------------------------------------------------------*/

uchar   at5_ori_call_appear_ssdu ()         /* test for value between 1 and 254 */
{

	if (direction == FROM_CALL_CONTROL)	{

		I_ori_call_appear_button_nb = *p_ssdu_val;

		if (I_ori_call_appear_button_nb == 255) return (NOK);

		Dl_button_user = I_ori_call_appear_button_nb;

		if (I_ori_call_appear_button_nb == 0) {

			if (Dl_button_net == 0) {
				I_ori_call_appear_button_nb = 1;

			} else {

				I_ori_call_appear_button_nb = Dl_button_net;

			}

		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar   at5_sel_call_appear_ssdu ()         /* test for value between 0 and 254 */
{
	return (at5_check_sca_ssdu (&(I_sel_call_appear_button_nb)));
}

/*--------------------------------------------------------------------------*/

uchar   at5_check_1_254_ssdu (p_i_field)        /* test for value between 1 and 254 */
	uchar FAR * p_i_field;
{
	uchar   code;           /* code */

	if (direction == FROM_CALL_CONTROL) {

		code = *p_ssdu_val++;

		if (code > 0 && code < 255) {
			*p_i_field = code;
			return (OK);

		} else {

			return (NOK);
		}

	} else {

			/* from NETWORK - check done at the receipt of the spdu */

#		if ASSERT == ON
		if ((*p_i_field == 0) || (*p_i_field == 255)) return (NOK);
#		endif
		*p_ssdu_val++ = *p_i_field;
		return (OK);
	}

}

/*--------------------------------------------------------------------------*/

uchar   at5_check_sca_ssdu (p_i_field)
	uchar FAR * p_i_field;
{
	uchar   code;           /* code */

	if (direction == FROM_CALL_CONTROL) {

		code = *p_ssdu_val++;

		if (code > 0 && code < 255) {
			*p_i_field = code;
			return (OK);

		} else {

			return (NOK);
		}

	} else {

			/* from NETWORK - check done at the receipt of the spdu */

#		if ASSERT == ON
		if (*p_i_field == 255) return (NOK);
#		endif
		*p_ssdu_val++ = *p_i_field;
		return (OK);
	}

}

/*--------------------------------------------------------------------------*/

uchar at5_conn_id_to_call_ref ()
{
	uchar ret;
	struct call *p_save_call;

	if (direction == FROM_CALL_CONTROL) {
		p_save_call = p_call;
		ret = ns_access_conn_id (ANY_CALL, I_other_call_ref_conn_id);
		I_other_call_ref_flag = (Call_ref & Mask (1));
		I_other_call_ref_val = ((Call_ref >> 1) & Mask (7));
		p_call = p_save_call;
		return (ret);

	} else {

			/* from D_CHANNEL - check done at the receipt of the spdu */

		return (OK);
	}

}

#endif

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_at5_table_or_function
#undef Ns_at5_end_table_or_function
#undef Ns_at5_tab_ssdu_ie_entry
#undef Ns_at5_tab_ssdu_ie_mx_entry
#undef Ns_at5_tab_ssdu_entry

#define Ns_at5_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_at5_end_table_or_function		}

#define Ns_at5_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_at5_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_at5_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_at5
#	define Message_header_ssdu_ie_at5		Ns_at5_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_at5_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_at5_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_at5_ssdu ()
{
	uchar   i_pic;

#	include "at5.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/
