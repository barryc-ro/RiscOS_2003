
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_spdu.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta description of the ATT_5E5 messages
 * (signalling protocol data unit) .
 *
 *		ATT_5E5 specific function :
 *
 *		 ie_type_eval - implements the evaluation of a conditional
 *					    ATT_5E5 IE type : Mandatory or Optional.
 *
 *-------------------------------------------------------------------------*/


/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
*
*SPDU model description :
*------------------------
*
*            spdu    tab_spdu
*    =====================================================
*    | id | event_id | u_n | n_u | type | p_ie | p_ie_SO |
*    |----|----------|-----|-----|------|------|---------|
*    |    |          |     |     |      |  X-------   X-------------------
*    |----|----------|-----|-----|------|------|  |      |               |
*    |    |          |     |     |      |      |  |      |               |
*    |----|----------|-----|-----|------|------|- | -----|               |
*    |    |          |     |     |      |      |  |      |               |
*                                                 |                      |
*                            spdu_ie              |                      |
*            =====================================v====================  |
*            | id | codeset | u_n | n_u | type | lgth_mini |lgth_maxi |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            ----------------                                            |
*                       |                                                |
*                       |                                                |
*                       -------> tab_ie                                  |
*                                                     --------------------
*                                          spdu_ie_so |
*                                        =============v=====================
*                                        | id | codeset | u_n | n_u | type |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*
*/

				/*
					 NET_SPDU.AT5 : description in a meta language  of
					 ATT_5E5 messages.

				*/

				/* ATT_5E5 SPDU parametrers description */

CONST	struct spdu_param AT5_SPDU_PARAM = {
	PROTOCOL_DISCRIMINATOR_I451,		/* Protocol discriminator */
	1,									/* BRI call reference length for outgoing SPDU */
#	if AT5_TERMINAL_MANAGEMENT == ON
	0,									/* BRI call reference minimum length for checking incoming SPDU : null call reference allowed */
#	else
	1,									/* BRI call reference minimum length for checking incoming SPDU */
#	endif
	1,									/* BRI call reference maximum length for  checking incoming SPDU */
	2,									/* PRI call reference length for outgoing SPDU */
	2,									/* PRI call reference minimum length for checking incoming SPDU */
	2,									/* PRI call reference maximum length for checking incoming SPDU */
	ON,									/* IE ordered first by codeset and IE ID within the codeset */
	ON,									/* Locking shift allowed */
	OFF,								/* Non locking shift not allowed */
	ON,									/* Null length IE are considered as missing in the SPDU */
	2,									/* Message type maximum length */
	OFF,								/* Global call reference value not meaningful */
	ON,									/* NS segmentation. */
	OFF,								/* NS restart procedure */
	0,									/* Maximum number of restablish Data Link retry */
	24,									/* D channel */
	23									/* Maximum number of B channels */
};

					/*
						ATT_5E5 procedure parameters description
						ON approve of the comment / OFF disapprove
					*/

CONST	struct net_proc_param AT5_NET_PROC_PARAM = {
	OFF,								/* Some timers depend from the configuration type (POINT_TO_?) */
	OFF,								/* IE comprehension required procedure is applicable */
	OFF,								/* The sending a STATUS message is filtered according the cause value */
	ON,									/* Clear internal call when data link failure */

#	if EQUIPMENT == NT2
		OFF,							/* Internal timers are handled */
#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		OFF,							/* NFAS support */
#	endif

	ON,									/* NS_INFO_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_FAC_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_NOTIFY_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
};

						/*
							 SPDU message description :
								- information element identifier,
								- information element codeset,
								- call control to D channel transfer (ON or OFF),
								- D channel to call control transfer (ON or OFF),
								- type (Mandatory Optional, Conditional),
								- minimal length,
								- maximal length,
								- number of allowed repetition.
						*/



							/* Alerting (ALERT) */

CONST	struct spdu_ie ALERT_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{TE_CAP,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		3,		128,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

							/* Call proceeding (CALL_PROC) */

CONST	struct spdu_ie CALL_PROC_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		3,		3,		1},
	{TE_CAP,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

							/* Connect (CONNECT) */

CONST	struct spdu_ie CONN_IE_AT5[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini     maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		3,		3,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{TE_CAP,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{SWITCHHOOK,	CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		3,		128,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

							/* Connect acknowledge (CONNECT_ACK) */

CONST	struct spdu_ie CONN_ACK_IE_AT5[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini     maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

							/* Disconnect (DISCONNECT) */

CONST	struct spdu_ie DISC_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		22,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{SWITCHHOOK,	CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		3,		128,	1},
	{ADJUNCT_CON,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

							/* Information (INFO) */

CONST	struct spdu_ie INFO_IE_AT5[] =	{
/*		ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#endif
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		22,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{SWITCHHOOK,	CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
#endif
	{CALLED_NB,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		3,		19,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{SEL_CALL_APPEAR,CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DEST_CALL_APPEAR,CODESET_6,	OFF,		N_U_ALL,	OP,		3,		3,		1},
	{KEYPAD_CON,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{OTHER_CALL_REF,CODESET_6,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{FEATURE_ACT,	CODESET_6,		U_N_ALL,	OFF,		CD,		4,		4,		1},
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{ADJUNCT_CON,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_CON,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

CONST	struct spdu_ie_so INFO_IE_AT5_SO[] =	{
/*	   ie				codeset     u ---> n    n ---> u    type */
	{SENDING_COMPLETE,	CODESET_0,	U_N_ALL,	OFF,		OP},
	{IE_NIL}
};

							/* Progress (PROGRESS) */

CONST	struct spdu_ie PROG_IE_AT5[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	OP,		4,		22,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{UUI,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		128,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

							/* Release (REL) */

CONST	struct spdu_ie REL_IE_AT5[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		22,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		3,		128,	1},
	{SEL_CALL_APPEAR,CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{KEYPAD_CON,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{ADJUNCT_CON,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

							/* Release complete (REL_COM) */

CONST	struct spdu_ie REL_COM_IE_AT5[] =	{
/*    	ie         	codeset 	  	u --->n  n--->u 	   type    mini    maxi	repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		22,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		3,		128,	1},
	{SEL_CALL_APPEAR,CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{ADJUNCT_CON,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#endif
	{IE_NIL},
};

							/* Setup (SETUP) */

CONST	struct spdu_ie SETUP_IE_AT5[] =	{
/*    ie        	codeset				u --->n		n--->u 		type    mini    maxi repetition */
	{BC,				CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		6,		1},
	{CHAN_ID,			CODESET_0,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{CHAN_ID,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{PROGRESS_IND,		CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{TE_CAP,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{KEYPAD,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		22,		1},
	{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{SWITCHHOOK,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		3,		1},
#endif
	{CALLING_NB,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		3,		18,		1},
	{CALLED_NB,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		3,		19,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{LLC,				CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		8,		1},
	{UUI,				CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		3,		128,	1},
	{SEL_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{ORI_CALL_APPEAR,	CODESET_6,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{DEST_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	CD,		3,		3,		1},
#endif
	{AT5_ENDPOINT_ID,	CODESET_6,		OFF,		N_U_ALL,	CD,		4,		4,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{FEATURE_ACT,		CODESET_6,		U_N_ALL,	OFF,		CD,		4,		4,	1},
	{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{ADJUNCT_CON,		CODESET_6,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

CONST	struct spdu_ie_so SETUP_IE_AT5_SO[] =	{
/*	   ie				codeset     u ---> n    n ---> u    type */
	{SENDING_COMPLETE,	CODESET_0,	U_N_ALL,	OFF,		OP},
	{IE_NIL}
};

							/* Setup acknowledge (SETUP_ACK) */

CONST	struct spdu_ie SETUP_ACK_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#if AT5_SUPPLEMENTARY_SERVICES == ON
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
#endif
	{IE_NIL},
};

							/* Status (STATUS) */

CONST	struct spdu_ie STATUS_IE_AT5[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		22,		1},
	{CALL_STATE,	CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL},
};

							/* Status enquiry (STATUS_ENQ) */

CONST	struct spdu_ie STATUS_ENQ_IE_AT5[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{IE_NIL},
};



/*=========================================================================*/


		/* Supplementary services spdu messages */


#if AT5_SUPPLEMENTARY_SERVICES == ON

							/* Conference (CONF) */

CONST	struct spdu_ie CONF_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{OTHER_CALL_REF,CODESET_6,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{IE_NIL},
};

							/* Conference acknowledge (CONF_ACK) */

CONST	struct spdu_ie CONF_ACK_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{OTHER_CALL_REF,CODESET_6,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Conference reject (CONF_REJ) */

CONST	struct spdu_ie CONF_REJ_IE_AT5[] =	{
/*    ie         	codeset		  u --->n  		n--->u 		type    mini    maxi repetition*/
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		1},
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Drop (DROP) */

CONST	struct spdu_ie DROP_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{IE_NIL},
};

							/* Drop acknowledge (DROP_ACK) */

CONST	struct spdu_ie DROP_ACK_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{IE_NIL},
};

							/* Drop reject (DROP_REJ) */

CONST	struct spdu_ie DROP_REJ_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Hold (AT5_HOLD) */

CONST	struct spdu_ie HOLD_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{IE_NIL},
};

							/* Hold acknowledge (AT5_HOLD_ACK) */

CONST	struct spdu_ie HOLD_ACK_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{SEL_CALL_APPEAR,CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{ADJUNCT_CON,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{IE_NIL},
};

							/* Hold reject (AT5_HOLD_REJ) */

CONST	struct spdu_ie HOLD_REJ_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		1},
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Reconnect (AT5_RECONN) */

CONST	struct spdu_ie RECONN_IE_AT5[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{SWITCHHOOK,	CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{IE_NIL},
};

							/* Reconnect acknowledge (AT5_RECONN_ACK) */

CONST	struct spdu_ie RECONN_ACK_IE_AT5[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Reconnect reject (AT5_RECONN_REJ) */

CONST	struct spdu_ie RECONN_REJ_IE_AT5[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		22,		1},
	{SEL_CALL_APPEAR,CODESET_6,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Redirect (REDIR) */

CONST	struct spdu_ie REDIR_IE_AT5[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Transfer (TRANS) */

CONST	struct spdu_ie TRANS_IE_AT5[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{OTHER_CALL_REF,CODESET_6,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{IE_NIL},
};

							/* Transfer acknowledge (TRANS_ACK) */

CONST	struct spdu_ie TRANS_ACK_IE_AT5[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{IE_NIL},
};

							/* Transfer reject (TRANS_REJ) */

CONST	struct spdu_ie TRANS_REJ_IE_AT5[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		1},
	{FEATURE_IND,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,	CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

#	if AT5_KEY_SYSTEM_FEATURE == ON

							/* Associated (ASSOC) */

CONST	struct spdu_ie ASSOC_IE_AT5[] =	{
/*    ie         		codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{ASSOC_TYPE,		CODESET_6,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{SEL_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{DEST_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{AT5_ENDPOINT_ID,	CODESET_6,		OFF,		N_U_ALL,	CD,		4,		4,		1},
	{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		AT5_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Associated acknowledge (ASSOC_ACK) */

CONST	struct spdu_ie ASSOC_ACK_IE_AT5[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{IE_NIL},
};

#	endif

#endif

							/* Management information (MAN_INFO) */

CONST	struct spdu_ie MAN_INFO_IE_AT5[] =	{
/*    	ie         	codeset			u --->n 	n--->u  	type    mini    maxi repetition */
	{MANAGMNT,		CODESET_6,		U_N_ALL,	N_U_ALL,	MD,		6,		255,	AT5_MX_MANAGMNT},
	{IE_NIL},
};

#if NS_RESTART_PROCEDURE == ON

							/* Restart (RESTART) */

CONST	struct spdu_ie RESTART_IE_AT5[] =	{
/*    	ie         	codeset			u --->n		n--->u		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{RESTART_IND,	CODESET_0,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL},
};

							/* Restart acknowledge (RESTART_ACK) */

CONST	struct spdu_ie RESTART_ACK_IE_AT5[] =	{
/*    	ie         	codeset			u --->n		n--->u		type	mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{RESTART_IND,	CODESET_0,		U_N_ALL,	OFF,		MD,		3,		3,		1},
	{IE_NIL},
};

#endif

/*=========================================================================*/

#define Ns_at5_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_at5_end_table_or_function		};

#define Ns_at5_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)		\
			Ns_tab_spdu_entry (pr, ev, u_n, n_u, usa, t_ie, t_so_ie),

#include "at5.tab_spdu"		/* include Table describing the primitives */

#define AT5_MX_TAB_SPDU (Rnd_sizeof (AT5_TAB_SPDU) / SPDU_ELEM_SIZE) /* table size */

CONST uchar	at5_mx_size_spdu = AT5_MX_TAB_SPDU;


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             at5_ie_type_eval - implements the evaluation of a conditional
									ATT_5E5 IE type : Mandatory or Optional.

Usage            uchar at5_ie_type_eval (uchar spdu_id_p, uchar ie_id_p);
							- spdu_id_p : SPDU ID,
							- ie_id_p   :  IE ID,

Return value    at5_ie_type_eval returns the IE type Mandatory or Optional.

Common constants and declarations : services.h, ns.h

Common objects : call context

*--------------------------------------------------------------------------*/

uchar at5_ie_type_eval (spdu_id_p, ie_id_p)
	uchar	spdu_id_p;			/* SPDU ID */
	uchar	ie_id_p;			/* IE ID */
{

	switch (spdu_id_p) {

		case SETUP :

			switch (ie_id_p) {

#				if AT5_SUPPLEMENTARY_SERVICES == ON

				case SEL_CALL_APPEAR :
				case SWITCHHOOK :
				case ADJUNCT_CON :

					if ((Na_subscription_tm != OFF) && (I_(bc,trf_cap) == TRF_CAP_SPEECH)) {
						return (OP);

					} else {

						return (EX);
					}

				case ORI_CALL_APPEAR :
				case DEST_CALL_APPEAR :

#					if (AT5_KEY_SYSTEM_FEATURE == ON) || (AT5_TERMINAL_MANAGEMENT == ON)

						if ((Na_subscription_key != OFF) || (Na_subscription_tm != OFF)) {

							if (I_(bc,trf_cap) == TRF_CAP_SPEECH) {
								return (MD);
							}

						}

						return (EX);
#					else
						return (EX);
#					endif

#				endif

				case CALLED_NB :

					if (is_ie_i (CODESET_0, KEYPAD) == PRESENT) {
						return (EX);

					} else {

						return (OP);
					}

#				if AT5_SUPPLEMENTARY_SERVICES == ON

				case FEATURE_ACT :

					if ((Na_subscription_tm == OFF) || (is_ie_i (CODESET_0, KEYPAD) == PRESENT)) {
						return (EX);

					} else {

						return (OP);
					}

#				endif

				case AT5_ENDPOINT_ID :

					if (Dl_is_spid_nil) {
						return (OP);

					} else {

						return (MD);
					}

				default :
					return (OP);
			}

		case ALERT :

			if (! Call_current_exist) return (OP);

			if (ie_id_p == TE_CAP) {

				if ((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) return (OP);
				else return (EX);

			}

				/* chan_id */

			if ( ((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) ^ Spdu_to_network () ) return (OP);
			else return (MD);

		case CALL_PROC :

				/* chan_id */

			if (! Call_current_exist) return (OP);

			if (Call_state == STATE_CALL_INIT_1) {
				return (MD);
			}

			return (OP);

		case CONN :

				/* both CHAN_ID and TE_CAP */

			if (! Call_current_exist) return (OP);

			if ((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) return (OP);
			else return (EX);

		case CONN_ACK :
			return (OP);

		case INFO :

			switch (ie_id_p) {

				case SIGNAL :

					if ((Call_current_exist) &&
						(Call_keypad_in_setup == OFF) &&
						((Call_ref & Mask (1)) == CALL_REF_FLAG_SND_ORIG)) {
						return (MD);

					} else {

						return (EX);
					}

				case OTHER_CALL_REF :

#					if (AT5_KEY_SYSTEM_FEATURE == ON) || (AT5_TERMINAL_MANAGEMENT == ON)

						if ((Na_subscription_key != OFF) || (Na_subscription_tm != OFF)) {
							return (EX);
						}

						return (OP);
#					else
						return (OP);
#					endif

				case CALLED_NB :
				case FEATURE_ACT :

					if (is_ie_i (CODESET_0, KEYPAD) == PRESENT) {
						return (EX);

					} else {

						return (OP);
					}
			}

		case REL :
		case REL_COMP :

			switch (ie_id_p) {

				case CAUSE :

					if ((! Call_current_exist ) || (Call_rel_flag == ON)) return (MD);
					else return (OP);

				case UUI :

					if ((! Call_current_exist ) || (Call_rel_flag == ON)) return (OP);
					else return (EX);
			}

		case CONF :
		case TRANS :

			if (! Call_current_exist) return (EX);

			if (Call_sub_state == SUB_STATE_NULL_0) return (MD);
			else return (EX);

		case AT5_RECONN :
			return (OP);

		case AT5_RECONN_REJ :
#			if AT5_TERMINAL_MANAGEMENT == ON

				if (Na_subscription_tm != OFF) {
					return (MD);
				}

				return (EX);
#			else
				return (EX);
#			endif

#		if AT5_KEY_SYSTEM_FEATURE == ON

		case ASSOC :

			if (Na_subscription_key != OFF) {

				switch (ie_id_p) {

					case SEL_CALL_APPEAR :

#						if AT5_TERMINAL_MANAGEMENT == ON

							if ((Na_subscription_tm != OFF) &&
								(I_assoc_type_status == EXCLUSION_STATUS)) {
								return (MD);
							}

#						endif

						return (EX);

					case DEST_CALL_APPEAR :

						if (I_assoc_type_status == SETUP_STATUS) {
							return (MD);
						}
						return (EX);

					case AT5_ENDPOINT_ID :

						if (I_assoc_type_status == SETUP_STATUS) {
							return (OP);
						}
						return (EX);

				}

			} else {

				return (OP);
			}

#		endif

	}

		/* Inconsistency */

	Trap (TRAP_IE_TYPE, "at5_ie_type_eval");
	return (OP);

}

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Table above */

#undef Ns_at5_table_or_function
#undef Ns_at5_end_table_or_function
#undef Ns_at5_tab_spdu_entry

#define Ns_at5_table_or_function(str, tab)	i_pic = 0;

#define Ns_at5_end_table_or_function

#define Ns_at5_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)						\
			Pic_init_struct_array (AT5_TAB_SPDU, i_pic, p_ie, (struct spdu_ie *)t_ie);	\
			Pic_init_struct_array_next (AT5_TAB_SPDU, p_ie_so, (struct spdu_ie_so *)t_so_ie);

void pic_init_ns_at5_spdu ()
{
	uchar   i_pic;

#	include "at5.tab_spdu"
}

#endif /* end of PIC used} */

/*EOF*/
