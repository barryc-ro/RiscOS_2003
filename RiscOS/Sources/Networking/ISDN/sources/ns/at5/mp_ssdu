
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	at5_chan_id_ssdu			(Void_parm);
	uchar	at5_chan_id_chan_nb_ssdu	(Void_parm);

#if AT5_SUPPLEMENTARY_SERVICES == ON
	uchar	at5_dest_call_appear_ssdu	(Void_parm);		/* test for value between 1 and 254 */
	uchar	at5_feature_act_ssdu		(Void_parm);		/* test for value between 1 and 254 */
	uchar	at5_feature_ind_init_ssdu	(Void_parm);		/* init flag for MBS */
	uchar	at5_feature_ind_ssdu		(Void_parm);
	uchar	at5_insert_button_nb		(Void_parm);
	uchar	at5_ori_call_appear_ssdu	(Void_parm);		/* test for value between 1 and 254 */
	uchar	at5_conn_id_to_call_ref		(Void_parm);
	uchar	at5_sel_call_appear_ssdu	(Void_parm);		/* test for value between 1 and 254 */
#endif

#endif

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
		*/


/*---------- Bearer capability (BC) */

D_START	(AT5_SSDU_BC)
		D_TABL              (TRF_CAP)

		D_IF_VAL            (BASIC_DATA)

			D_TABL          (TRF_MODE)
			D_TABX          (TRF_RATE_4b)
			D_TABL          (LAYER_NB)

			D_IF_VAL        (IS_LAYER)
				D_TABX      (LAYER_ID)
				D_TABX      (BC_PROT_ID)

				D_IF_VAL    (TWO_LAYERS)
					D_TABX  (LAYER_ID_2_3)
					D_TABX  (BC_PROT_ID_2_3)
				D_ELSE      (LAYER_2)
					D_PAD   (P_1_2)
				D_END_IF    (LAYER_2_OR_NOT)
			D_ELSE          (NO_LAYER)
				D_PAD       (P_3_6)
			D_END_IF        (LAYER_IS)
		D_ELSE              (VOICE_SERVICE)
			D_PAD           (P_7_13)
		D_END_IF            (SERVICE_TYPE)

D_END   (END_SSDU)

START	(AT5_SSDU_BC)
		TABL    (AT5_T_TRF_CAP,                         &i_bc[0].trf_cap)

		IF_VAL  (&i_bc[0].trf_cap, NE, TRF_CAP_SPEECH)

				/* Basic data */

			TABL            (AT5_T_TRF_MODE,            &i_bc[0].trf_mode)
			TABX            (AT5_TX_TRF_RATE,           &i_bc[0].trf_mode,      &i_bc[0].trf_rate)
			TABL            (AT5_T_LAYER_NB,            &i_bc[0].Layer_nb)

			IF_VAL          (&i_bc[0].Layer_nb, NE, 0)
				TABX        (AT5_TX_LAYER_ID,           &i_bc[0].trf_mode,      &i_bc[0].Layer_id)
				TABX        (AT5_TX_BC_PROTOCOL_ID,     &i_bc[0].Layer_id,      &i_bc[0].Protocol_id)

				IF_VAL      (&i_bc[0].Layer_nb, EQ, 2)
					TABX    (AT5_TX_LAYER_ID,           &i_bc[0].trf_mode,      &i_bc[0].Add_layer_id)
					TABX    (AT5_TX_BC_PROTOCOL_ID,     &i_bc[0].Add_layer_id,  &i_bc[0].Add_protocol_id)
				ELSE        ()
					PAD     (2)
				END_IF      ()
			ELSE            ()
				PAD         (4)
			END_IF          ()
		ELSE                ()
			PAD             (7)
		END_IF              ()
END     (0)

/*---------- Call state (CALL_STATE) */

D_START	(AT5_SSDU_CALL_STATE)
		D_TABL  (STATE_VAL)
D_END   (END_SSDU)

START	(AT5_SSDU_CALL_STATE)
		TABL    (AT5_T_CALL_STATE,          &i_call_state[0].val)
END     (0)

/*---------- Called party number (CALLED_NB) */

D_START	(AT5_SSDU_CALLED_NB)
		D_TABL  (TYPE)
		D_TABL  (PLAN_ID)
		D_TEXT  (DIGIT_)
D_END   (END_SSDU)

START	(AT5_SSDU_CALLED_NB)
		TABL    (AT5_T_NB_TYPE,             &i_called_nb[0].nb_type)
		TABL    (AT5_T_NB_PLAN,             &i_called_nb[0].plan_id)
		TEXT    (1,AT5_MX_SZ_CALLED_NB,DIGIT_E,&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END     (0)

/*---------- Calling party number (CALLING_NB) */

D_START	(AT5_SSDU_CALLING_NB)
		D_TABL  (TYPE)
		D_TABL  (PLAN_ID)
		D_TEXT  (DIGIT_)
D_END   (END_SSDU)

START	(AT5_SSDU_CALLING_NB)
		TABL    (AT5_T_NB_TYPE,             &i_calling_nb[0].nb_type)
		TABL    (AT5_T_NB_PLAN,             &i_calling_nb[0].plan_id)
		TEXT    (0,AT5_MX_SZ_CALLING_NB,DIGIT,&i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END     (0)

/*---------- Cause (CAUSE) */

D_START	(AT5_SSDU_CAUSE)
		D_TABL	(LOCATION)
		D_TABL	(C_CLASS)
		D_TABX	(C_VAL)
		D_TEXT	(CAUSE_DIAG)
D_END   (END_SSDU)

START	(AT5_SSDU_CAUSE)
		TABL    (AT5_T_LOCATION,            		&i_cause[0].cause_loc)
		TABL    (AT5_T_C_C,                 		&i_cause[0].cause_class)
		TABX    (AT5_TX_C_V,                		&i_cause[0].cause_class,    &i_cause[0].cause_val)
		TEXT	(0,AT5_MX_SZ_CAUSE_DIAG,ANY_OCTET,	&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END     (0)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

D_START	(AT5_SSDU_CHAN_ID)
	D_TABL	(INT_TYPE)
	D_TABL	(PREF_EXCL)
	D_TABX	(SEL)

	D_IF_VAL	(INT_BRI)
		D_TABL	(CODING_STD)
		D_TABL	(TYPE)
		D_FUNCTION (_CHAN_NB_)
		D_TEXT	(CHANNEL_NUMBERS)
	D_ELSE		(NO_INT_BRI)
		D_PAD	(CODING_CHAN_TYPE_TEXT)
	D_END_IF	(BRI_INT)
D_END (P_CHAN_ID_END)

START	(AT5_SSDU_CHAN_ID)
	TABL (AT5_T_INT_TYPE,					&i_chan_id[0].int_type)
	TABL (AT5_T_CHAN_PREF_EXCL,				&i_chan_id[0].pref_excl)
	TABX (AT5_TX_CHAN_SEL,					&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)

	IF_VAL	(&i_chan_id[0].int_type, NE, INT_TYPE_BRI)
		TABL (AT5_T_CODING_STD,				&i_chan_id[0].coding_std)
		TABL (AT5_T_CHAN_TYPE,				&i_chan_id[0].chan_type)
		FUNCTION (at5_chan_id_chan_nb_ssdu)
		TEXT (1,AT5_MX_SZ_CHAN_ID,ANY_CHAR,&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
	ELSE	()
		PAD (3)
	END_IF	()
END (at5_chan_id_ssdu)

/*---------- Endpoint identifier (ENDPOINT_ID) */

#if EQUIPMENT == NT2

D_START	(AT5_SSDU_ENDPOINT_ID)
		D_ANY_VAL   (USID)
		D_ANY_VAL   (TID)
		D_TABL      (INTERP)
D_END   (END_SSDU)

START	(AT5_SSDU_ENDPOINT_ID)
		ANY_VAL (&i_endpoint_id[0].usid)
		ANY_VAL (&i_endpoint_id[0].tid)
		TABL    (AT5_T_INTERPRETER,         &i_endpoint_id[0].interp)
END     (0)

#endif

/*---------- Keypad (KEYPAD) */

D_START	(AT5_SSDU_KEYPAD)
		D_TEXT  (KEYPAD_VAL)
D_END   (END_SSDU)

START	(AT5_SSDU_KEYPAD)
		TEXT(1,AT5_MX_SZ_KEYPAD,DIGIT_E,	&i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END     (0)

/*---------- Low layer compatibility (LLC) */

D_START	(AT5_SSDU_LLC)
		D_TABL  (CODING_STD)
		D_TABL  (TRF_CAP)
		D_TABL  (TRF_MODE)
		D_TABX  (TRF_RATE_4)
		D_TABL  (STRUCTURE)
		D_TABL  (SYMMETRY)
		D_TABX  (TRF_RATE_4b)
		D_TABX  (LAYER_ID)
		D_TABX  (LLC_PROT_ID)
		D_TABL  (SYN_ASYN)
		D_TABL  (USER_RATE)
		D_TABL  (LAYER_NB)

		D_IF_VAL    (TWO_LAYERS)
			D_TABX  (LAYER_ID_2_3)
			D_TABX  (LLC_PROT_ID_2_3)
		D_ELSE      (ONLY_ONE)
			D_PAD   (P_1_2_)
		D_END_IF    (LAYER_NUMBER)

D_END   (END_SSDU)

START	(AT5_SSDU_LLC)
		TABL    (AT5_T_CODING_STD,              &i_llc[0].coding_std)
		TABL    (AT5_T_TRF_CAP,                 &i_llc[0].trf_cap)
		TABL    (AT5_T_TRF_MODE,                &i_llc[0].trf_mode)
		TABX    (AT5_TX_TRF_RATE,               &i_llc[0].trf_mode,     &i_llc[0].trf_rate)
		TABL    (AT5_T_STRUCTURE,               &i_llc[0].structure)
		TABL    (AT5_T_SYMMETRY,                &i_llc[0].symmetry)
		TABX    (AT5_TX_TRF_RATE,               &i_llc[0].trf_mode,     &i_llc[0].dest_rate)
		TABX    (AT5_TX_LAYER_ID,               &i_llc[0].trf_mode,     &i_llc[0].Layer_id)
		TABX    (AT5_TX_LLC_PROTOCOL_ID,        &i_llc[0].Layer_id,     &i_llc[0].Protocol_id)
		TABL    (AT5_T_SYN_ASYN,                &i_llc[0].syn_asyn)
		TABL    (AT5_T_USER_RATE,               &i_llc[0].user_rate)
		TABL    (AT5_T_LAYER_NB,                &i_llc[0].Layer_nb)

		IF_VAL      (&i_llc[0].Layer_nb, EQ, 2)
			TABX    (AT5_TX_LAYER_ID,           &i_llc[0].trf_mode,     &i_llc[0].Add_layer_id)
			TABX    (AT5_TX_LLC_PROTOCOL_ID,    &i_llc[0].Add_layer_id, &i_llc[0].Add_protocol_id)
		ELSE        ()
			PAD     (2)
		END_IF      ()
END     (0)

/*---------- Progress indicator (PROGRESS_IND) */

D_START	(AT5_SSDU_PROGRESS_IND)
		D_TABL  (LOCATION)
		D_TABL  (DESCRIPTION)
D_END   (END_SSDU)

START	(AT5_SSDU_PROGRESS_IND)
		TABL    (AT5_T_PROGRESS_LOCATION,       &i_progress_ind[0].progress_loc)
		TABL    (AT5_T_PROGRESS_DESCRIPTION,    &i_progress_ind[0].progress_descr)
END     (0)

/*---------- Signal (SIGNAL) */

D_START	(AT5_SSDU_SIGNAL)
		D_TABL  (SIGNAL_VAL)
D_END   (END_SSDU)

START	(AT5_SSDU_SIGNAL)
		TABL    (AT5_T_SIGNAL_VAL,              &i_signal[0].val)
END     (0)

/*---------- Terminal capabilities (TE_CAP) */

D_START	(AT5_SSDU_TE_CAP)
D_END   (END_SSDU)

START	(AT5_SSDU_TE_CAP)
END     (0)

/*------------------------ SUPPLEMENTARY SERVICES IE ----------------------*/
#if AT5_SUPPLEMENTARY_SERVICES == ON

/*---------- Adjunct Control            (ADJUNCT_CON) */

D_START	(AT5_SSDU_ADJUNCT_CON)
		D_TABL  (ADJUNCT_VAL)
D_END   (END_SSDU)

START	(AT5_SSDU_ADJUNCT_CON)
		TABL    (AT5_T_ADJUNCT_VAL,             &i_adjunct_con[0].adjunct_val)
END     (0)

#if AT5_KEY_SYSTEM_FEATURE == ON

/*---------- associated type            (ASSOC_TYPE) */

D_START	(AT5_SSDU_ASSOC_TYPE)
	D_TABL  (ASSOC_STATUS)
D_END   (END_SSDU)

START	(AT5_SSDU_ASSOC_TYPE)
	TABL    (AT5_T_ASSOC_STATUS,                &i_assoc_type[0].assoc_status)
END     (0)

#endif

/*---------- Destination Call Appearance (DEST_CALL_APPEAR) */

D_START	(AT5_SSDU_DEST_CALL_APPEAR)
D_END   (END_SSDU)

START	(AT5_SSDU_DEST_CALL_APPEAR)
END     (at5_dest_call_appear_ssdu)

/*---------- Display Control            (DISPLAY_CON) */

D_START	(AT5_SSDU_DISPLAY_CON)
		D_TABL  (DISPLAY_MODE)
D_END   (END_SSDU)

START	(AT5_SSDU_DISPLAY_CON)
		TABL    (AT5_T_DISPLAY_CON_MODE,        &i_display_con[0].display_con_mode)
END     (0)

/*---------- Display  		             (DISPLAY) */

D_START (AT5_SSDU_DISPLAY)
		D_TEXT      (DISPLAY_INFO_TEXT)
D_END   (END_SSDU)

START   (AT5_SSDU_DISPLAY)
		TEXT    (1,AT5_MX_SZ_DISPLAY_FLD, ANY_CHAR,  &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END     (0)

/*---------- Display Field              (DISPLAY_FLD) */

D_START (AT5_SSDU_DISPLAY_FLD)
		D_TABL  (DISPLAY_MODE)
		D_TABL  (SUB_MODE)
		D_TABL  (DISPLAY_FLD_TYPE)
		D_IF_VAL(_TYPE_CALL_APPEAR_ID)
			D_TEXT (DISPLAY_INFO_BINARY)
		D_ELSE(_OTHER_TYPE)
			D_TEXT (DISPLAY_INFO_TEXT)
		D_END_IF(_TYPE)
D_END   (END_SSDU)

START   (AT5_SSDU_DISPLAY_FLD)
		TABL    (AT5_T_DISPLAY_FLD_MODE,        &i_display_fld[0].display_fld_mode)
		TABL    (AT5_T_DISPLAY_SUBMODE,         &i_display_fld[0].submode)
		TABL    (AT5_T_DISPLAY_FLD_TYPE,        &i_display_fld[0].display_fld_type)
		IF_VAL  (&i_display_fld[0].display_fld_type, EQ, CALL_APPEAR_ID)
			TEXT(1,AT5_MX_SZ_DISPLAY_FLD, ANY_OCTET,  &i_display_fld[0].info_lgth, (uchar **)&i_display_fld[0].p_info)
		ELSE    ()
			TEXT(1,AT5_MX_SZ_DISPLAY_FLD, ANY_CHAR,  &i_display_fld[0].info_lgth, (uchar **)&i_display_fld[0].p_info)
		END_IF  ()
END     (0)


/*---------- Feature Activation         (FEATURE_ACT) */

D_START	(AT5_SSDU_FEATURE_ACT)
		D_TABL  (BUTTON_TYPE)
		D_TABL  (MODULE_NB)
D_END   (END_SSDU)

START	(AT5_SSDU_FEATURE_ACT)
		TABL    (AT5_T_BUTTON_TYPE_ACT,         &i_feature_act[0].button_type_act)
		TABL    (AT5_T_MODULE_NB,               &i_feature_act[0].module_nb)
END     (at5_feature_act_ssdu)

/*---------- Feature Indication         (FEATURE_IND) */

D_START	(AT5_SSDU_FEATURE_IND)
		D_TABL      (BUTTON_TYPE)
		D_TABL      (MODULE_NB)
		D_TABL      (STATUS_TYPE)
		D_FUNCTION  (INIT_FLAG_MBS)
D_END   (END_SSDU)

START	(AT5_SSDU_FEATURE_IND)
		TABL        (AT5_T_BUTTON_TYPE_IND,         &i_feature_ind[0].button_type_ind)
		TABL        (AT5_T_MODULE_NB,               &i_feature_ind[0].module_nb)
		TABL        (AT5_T_STATUS_TYPE,             &i_feature_ind[0].status_type)
		FUNCTION    (at5_feature_ind_init_ssdu)
END     (at5_feature_ind_ssdu)

D_START	(AT5_SSDU_FEATURE_IND_MS)
		D_TABL  (MEANING)
D_END   (END_SSDU)

START	(AT5_SSDU_FEATURE_IND_MS)
		TABL    (AT5_T_FEATURE_MEANING,             &i_feature_ind[0].meaning)
END     (0)

/*---------- Keypad Control             (KEYPAD_CON) */

D_START	(AT5_SSDU_KEYPAD_CON)
		D_TABL  (CALL_REF_TYPE)
D_END   (END_SSDU)

START	(AT5_SSDU_KEYPAD_CON)
		TABL    (AT5_T_CALL_REF_TYPE,           &i_keypad_con[0].call_ref_type)
END     (0)

/*---------- Origination Call Appearance (ORI_CALL_APPEAR) */

D_START	(AT5_SSDU_ORI_CALL_APPEAR)
D_END   (END_SSDU)

START	(AT5_SSDU_ORI_CALL_APPEAR)
END     (at5_ori_call_appear_ssdu)

/*---------- Other Call Reference       (OTHER_CALL_REF) */

D_START	(AT5_SSDU_OTHER_CALL_REF)
		D_ANY_VAL   (CONN_ID_VAL)
D_END   (END_SSDU)

START	(AT5_SSDU_OTHER_CALL_REF)
		ANY_VAL     (&i_other_call_ref[0].conn_id)
END     (at5_conn_id_to_call_ref)

/*---------- Selected Call Appearance   (SEL_CALL_APPEAR) */

D_START	(AT5_SSDU_SEL_CALL_APPEAR)
D_END   (END_SSDU)

START	(AT5_SSDU_SEL_CALL_APPEAR)
END     (at5_sel_call_appear_ssdu)

/*---------- Service Identifier         (SERVICE_ID) */

D_START	(AT5_SSDU_SERVICE_ID)
		D_ANY_VAL   (SERVICE_ID_CODE)
D_END   (END_SSDU)

START	(AT5_SSDU_SERVICE_ID)
		ANY_VAL     (&i_service_id[0].service_id)       /* check done in the automaton */
END     (0)

/*---------- Switchhook                 (SWITCHHOOK) */

D_START	(AT5_SSDU_SWITCHHOOK)
		D_TABL  (HOOK_VAL)
D_END   (END_SSDU)

START	(AT5_SSDU_SWITCHHOOK)
		TABL    (AT5_T_HOOK_VAL,                &i_switchhook[0].hook_val)
END     (0)

/*---------- user to user information   (UUI) */

D_START	(AT5_SSDU_UUI)
	D_TEXT (UUI_INFO)
D_END (UUI_END)

START	(AT5_SSDU_UUI)
	TEXT (1, AT5_MX_SZ_UUI, ANY_CHAR,     &i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END (0)

#endif

/*EOF*/
