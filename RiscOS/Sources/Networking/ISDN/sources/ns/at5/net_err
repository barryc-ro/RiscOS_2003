
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_err.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         error_handler - implements the centralized processing of the
 *		   error handling procedure  for error conditions detected
 *		   by the Network Signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/************************************************/
		/* 					WARNING						*/
		/*	These code MUST be in the same order than	*/
		/*	in the table_error_common (NS_ERR.C)		*/
		/************************************************/

CONST_ARRAY	uchar AT5_TABLE_ERROR [] = {

	 Set_err ( ERR_N_CALL_REF_GLOBAL,				IGNORED),

	 Set_err ( ERR_N_CALL_REF_LGTH,					FATAL),
	 Set_err ( ERR_N_CALL_REF_PAD,					NON_FATAL),
	 Set_err ( ERR_N_CALL_REF_UNKNOWN,				FATAL),
	 Set_err ( ERR_N_CALL_REF_ALREADY_KNOWN,		FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG,					FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_MULTIPOINT,		FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_POINT_TO_POINT,	FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_NO_CALL,			FATAL),
	 Set_err ( ERR_N_CALL_REF_DUMMY,				NON_FATAL),

	 Set_err ( ERR_N_STATUS_CALL_REF,				FATAL),

	 Set_err ( ERR_N_SPDU_TYPE,						FATAL),
	 Set_err ( ERR_N_SPDU_UNEXPECTED,				FATAL),
	 Set_err ( ERR_N_SPDU_LGTH,						FATAL),

	 Set_err ( ERR_N_IE_UNKNOWN,					NON_FATAL),
	 Set_err ( ERR_N_IE_M_MISSING,					FATAL),
	 Set_err ( ERR_N_IE_M_TOO_SHORT,				FATAL),
	 Set_err ( ERR_N_IE_M_TOO_LONG,					FATAL),
	 Set_err ( ERR_N_IE_O_LGTH,						NON_FATAL),
	 Set_err ( ERR_N_IE_SO_TYPE,					NON_FATAL),
	 Set_err ( ERR_N_IE_M_CONTENT,					FATAL),
	 Set_err ( ERR_N_IE_O_CONTENT,					NON_FATAL),
	 Set_err ( ERR_N_IE_OUT_OF_SEQUENCE,			NON_FATAL),
	 Set_err ( ERR_N_IE_REPEATED,					NON_FATAL),
	 Set_err ( ERR_N_NAI,							FATAL),
	 Set_err ( ERR_N_CES,							FATAL),
	 Set_err ( ERR_N_BROADCAST,						FATAL),

	 Set_err ( ERR_I_TE_VAL,						FATAL),

	 Set_err ( ERR_U_SSDU_CODE,						FATAL),
	 Set_err ( ERR_U_PARAM_VAL,						FATAL),
	 Set_err ( ERR_U_MANDATORY_PARAM_MISSING,		FATAL),
	 Set_err ( ERR_U_PARAM_TYPE,					FATAL),
	 Set_err ( ERR_U_PARAM_LGTH,					FATAL),
	 Set_err ( ERR_U_SSDU_UNEXPECTED,				FATAL),
	 Set_err ( ERR_U_NAI,							FATAL),
	 Set_err ( ERR_U_NO_CALL_CTX_AVAILABLE,			FATAL),
	 Set_err ( ERR_U_CALL_CONN_ID_ALREADY_USED,		FATAL),
	 Set_err ( ERR_U_PRIMITIVE_NOT_IMPLEMENTED, 	FATAL),
	 Set_err ( ERR_U_CALL_CONN_ID_UNKNOWN,			FATAL),
	 Set_err ( ERR_U_NON_EXISTENT_CALL,				FATAL),
	 Set_err ( ERR_U_CONGESTION_BUSY,				FATAL),
	 Set_err ( ERR_U_SSDU_IE_INSTANCE_OVERFLOW,		FATAL),

	 Set_err ( ERR_U_USER_FAC_PROTOCOL,				IGNORED),
	 Set_err ( ERR_U_UUI_PROTOCOL,					IGNORED),
	 Set_err ( ERR_U_NO_TIMER_AVAILABLE,			FATAL),

#	if NS_SEGMENTATION == ON
		Set_err (ERR_N_REASSEMBLY,					FATAL),
		Set_err (ERR_N_SEGMENTER,					FATAL),

#	endif

};

					/* FUNCTIONS DECLARATION */

#if NEW_FCT_STYLE == ON
	uchar send_mim				(uchar);	/* function in net_swit.at5 */
#else
	uchar send_mim				();
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             at5_error_handler - implements the centralized procesing of an
				 exception condition.

Usage            uchar at5_error_handler ();


Description     implements the processing of an error detected in a
				message coming from the network	or in a primitive
				comming from the layer 4 signalling (call processing).

Return value    returns action code =  CONTINUE  continue processing,
									=  STOP      stop processing.

Common constants and declarations   : ns.h

Common objects : call current context

*--------------------------------------------------------------------------*/

uchar at5_error_handler ()
{
	uchar 	i;												/* loop index */
	uchar 	error_code;										/* error code */
	uchar 	error_diagnostic_1;								/* diagnostics 1 */
	uchar 	error_diagnostic_2;								/* diagnostics 2 */

		/* if no error ---> continue */

	if (nb_error == 0) {
		return (CONTINUE);
	}

		/*
		   Search fatal error code -
		   Case Error Call Reference Dummy must be treated first
		*/

	for (i = 0; i < nb_error; i++) {

		if (Error_stack_code (i) == ERR_N_CALL_REF_DUMMY) {

			if (spdu_id == INFO) {
				continue;

			} else {

				break;
			}

		}

		if (Error_stack_level (i) == FATAL) break;
	}

		/*
		   If not found process the first non-fatal error.
		*/

	if (i == nb_error) {

		if ((Error_stack_code (0) == ERR_N_CALL_REF_DUMMY) &&
			(nb_error > 1)) {
			i = 1;

		} else {

			i = 0;
		}

	}

	error_code			= Error_stack_code (i);
	error_diagnostic_1	= Error_stack_diagnostic_1 (i);
	error_diagnostic_2	= Error_stack_diagnostic_2 (i);

		/* reset error count */

	nb_error			= 0;

		/* dispatch according to the origination message */

	switch (R_msg_from) {

	/*	--------------------------------------------------------
		|                                                      |
		|	    from the D channel side (Data Link entity)     |
		|                                                      |
		--------------------------------------------------------	*/

		case ENT_DL:
		case ENT_DL_D :

			switch (error_code) {

					/* -0- Message received on a broadcast connection */

				case ERR_N_BROADCAST :
					return (STOP);

					/* -1- Protocol discriminator error :

							  processed in the ns_rcv function,
							  the message is ignored.
					*/

					/* -2- Message too short :

						When a message is received that is too short to
						contain a complete message type information element,
						that message shall be ignored.
					*/

				case ERR_N_SPDU_LGTH :
					return (STOP);

					/* -3- Call reference error : */

						/* -3.1- Invalid call reference format :

						   a) The call reference information element first
							  octet bits 1 through 4 indicates a length greater
							  than the length supported by the receiving
							  equipment. (see -3.2-)
						*/

						/* 
						   b) If the call reference information element octet
							  1 bits 5 to 8 are not null, the message 
							  shall be treated (spare bits).
						*/

				case ERR_N_CALL_REF_PAD :
					return (CONTINUE);

						/* -3.2- call reference procedural error :
								 
						   - Call reference length error : ignored (CCITT).
						   - unknown call reference.
						*/

				case ERR_N_CALL_REF_LGTH :
					return (STOP);

				case ERR_N_STATUS_CALL_REF :
				case ERR_N_CALL_REF_UNKNOWN :

					switch (spdu_id) {

							/* a) When a DISCONNECT message is received that
								  specifies a call reference that is not
								  recognized as relating to a call in progress,
								  a RELEASE message is returned specifying
								  the call reference in the received message.
							*/

						case DISC :
							send_release (   REL  ,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   DIAGNOSTIC_NIL);
							return (STOP);

							/* b) When a RELEASE message is received that
								  specified a call reference that is not
								  recognized as relating to an active call
								  or to a call in progress, a RELEASE COMPLETE
								  message is return specifying the call
								  reference in the received message.
							*/

						case REL :
							send_release (REL_COMP,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   DIAGNOSTIC_NIL);
							return (STOP);

							/* c) When a RELEASE COMPLETE message is received
							   specifying a call reference which is not
							   recognised as relating to an active call
							   or to a call in progress no action should be
							   taken.
							*/

						case REL_COMP :
							return (STOP);

							/* c') When a STATUS ENQuiry message is received
							   specifying a call reference which is not
							   recognized as relating to an active call
							   or to a call in progress, a STATUS message with
							   cause "invalid call reference" and state "NULL"
							   should be sent.
							*/

						case STATUS_ENQ :
							Reset_internal_ie ();
							set_i_cause (C_C_INVALID_MESSAGE,
										C_V_INVALID_CALL_REF_81,
										P_NIL);
							set_i_state (STATE_NULL_0);
							Send_to_d_channel (STATUS);
							return (STOP);

						case SETUP :
						default :
							send_release (   REL  ,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   DIAGNOSTIC_NIL);
							return (STOP);

					}

							/* d) When a SETUP message is received
								  specifying a call reference flag
								  incorrectly set to "1", a RELease
								  COMPlete with cause #81 "Invalid call
								  reference" should be sent.
							*/

#			if EQUIPMENT == TE

				case ERR_N_CALL_REF_FLAG  :

					if (spdu_id == SETUP) {
						send_release (REL_COMP,C_C_INVALID_MESSAGE,
											   C_V_INVALID_CALL_REF_81,
											   DIAGNOSTIC_NIL);
					}

					return (STOP);

#			else

				case ERR_N_CALL_REF_FLAG_MULTIPOINT :
					send_release (REL_COMP,C_C_PROTOCOL_ERROR,
										   C_V_INVALID_CALL_REF_81,
										   error_diagnostic_1);
					return (STOP);

				case ERR_N_CALL_REF_FLAG_POINT_TO_POINT :
					return (STOP);

				case ERR_N_CALL_REF_FLAG_NO_CALL :
					send_release (REL_COMP,C_C_INVALID_MESSAGE,
										   C_V_INVALID_CALL_REF_81,
										   DIAGNOSTIC_NIL);
					return (STOP);

#			endif

							/* e) When a SETUP message is received specifying
								  a call reference which is recognized as
								  relating to an active call or to a call in
								  progress, this setup message shall be
								  ignored.
							*/

				case ERR_N_CALL_REF_ALREADY_KNOWN :

					if (spdu_id == SETUP) {
						return (STOP);

					} else {

						return (CONTINUE);
					}

						/*
							f) When a message, except INFO is received using
								the dummy call reference, no action should be
								taken
						*/

				case ERR_N_CALL_REF_DUMMY :

					switch (spdu_id) {

						case INFO :
							return (CONTINUE);

						default :
							return (STOP);
					}

					/* -4- Message type or message sequence error : */

						/* -4.1- Message type error :

							Whenever an unrecognised message is received, it 
							shall be ignored.
						*/

				case ERR_N_SPDU_TYPE :
					return (STOP);

						/* -4.2- Message sequence error :

							Whenever an unexpected message, is received
							in any state other than the Null state, a status
							message shall be returned with a cause #98
							"message not compatible with the call state or
							message type non-existent or not implemented".
						*/

				case ERR_N_SPDU_UNEXPECTED :
					send_state (C_C_PROTOCOL_ERROR,
								C_V_MESSAGE_STATE_INCONSISTENCY_98,
								error_diagnostic_1);
					return (STOP);

					/* -5- General information element errors :

						-5.1- information element out of sequence :

						-5.2- duplicated information element :
					*/

				case ERR_N_IE_SO_TYPE :
					return (CONTINUE);

				case ERR_N_IE_REPEATED :
					return (CONTINUE);

					/* -6- Mandatory information element error : ATT_5E5

						-6.1- Mandatory information element missing :

							When a message is received which has one or more
							mandatory information elements missing, no action
							should occur. A status message is then returned 
							with cause #96 "mandatory information element
							missing".

							CCITT addendum : for SETUP, send back a RELEASE
							COMPLETE with cause #96 "mandatory IE missing".

							CCITT addendum : for RELEASE COMPLETE, no message
							should be sent back, and the returned cause should
							be set to #31 "Normal, unspecified".
					*/

				case ERR_N_IE_M_MISSING :

					switch (spdu_id) {

						case SETUP :

							send_release (REL_COMP, C_C_PROTOCOL_ERROR,
													C_V_MANDATORY_IE_MISSING_96,
													error_diagnostic_1);
							return (STOP);

						case REL_COMP :

							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_UNSPECIFIED_31,
											 P_NIL);
							}
							return (CONTINUE);

						default :
							send_state (C_C_PROTOCOL_ERROR,
										C_V_MANDATORY_IE_MISSING_96,
										error_diagnostic_1);
							return (STOP);

					}

						/* -6.2- Mandatory information element content
								 error : (CCITT Q.931)

								 When a message other then SETUP, DISC, 
								 RELEASE or RELEASE COMPLETE is received
								 which has one or more mandatory information
								 elements with invalid content, no action
								 should be taken on the message and no state
								 change should occur.
								 A STATUS message is then returned with cause
								 #100 "invalid information element contents".

								 When, in a SETUP or RELEASE message, a
								 mandatory IE has invalid content, a RELEASE
								 COMPLETE message with cause #100 shall be
								 sent.

								 When, in a DISCONNECT message, a
								 mandatory IE has invalid content, a RELEASE
								 message with cause #100 shall be returned.

								 When, in a RELEASE COMPLETE, a mandatory IE
								 (cause) has an invalid content, it is 
								 considered as being received with cause #31
								 "normal, unspecified".
						*/

				case ERR_N_IE_M_CONTENT :
				case ERR_N_IE_M_TOO_SHORT :
				case ERR_N_IE_M_TOO_LONG :

					switch (spdu_id) {

						case SETUP :
						case REL :

#							if EQUIPMENT == TE
								send_release (REL_COMP,C_C_PROTOCOL_ERROR,
													   C_V_INVALID_IE_CONTENT_100,
													   error_diagnostic_1);
								return (STOP);

#							else

								if (Na_fct == FG_NT_TE) {
									send_release (REL_COMP,C_C_PROTOCOL_ERROR,
														   C_V_INVALID_IE_CONTENT_100,
														   error_diagnostic_1);
								}
								return (STOP);

#							endif

							/*
							   RELEASE COMPLETE :
							   continue normally with optional values
							   if necessary.
							*/

						case REL_COMP :
							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_UNSPECIFIED_31,
											 P_NIL);
							}
							return (CONTINUE);


						case DISC :
							set_i_cause(C_C_PROTOCOL_ERROR,
										C_V_INVALID_IE_CONTENT_100,
										(char FAR *) &error_diagnostic_1);
							Send_to_d_channel (REL);
							Reset_internal_ie ();
							set_i_cause(C_C_NORMAL_EVENT,
										C_V_NORMAL_UNSPECIFIED_31,
										P_NIL);
							return (CONTINUE);

						case MAN_INFO :
							send_mim (EV_REJECT);
							return (STOP);

						default :
							send_state (C_C_PROTOCOL_ERROR,
										C_V_INVALID_IE_CONTENT_100,
										error_diagnostic_1);
							return (STOP);
					}

						/* -6.3- Information element length too short :

							When a message is received with a length lower
							than the minimal length, this message is treated
							as improperly coded mandatory information element.
							(see -6.2-).
						*/

						/* -6.4- Information element length too long :

							When an IE is received with a length greater
							than the maximal length, this message is treated
							as improperly coded mandatory information element.
							(see -6.2-).
						*/

					/* -7- Non mandatory (optional) information element errors :*/

						/* -7.1- Unrecognized information element : ERR_N_IE_UNKNOWN

								 When a message is received with an or more
								 unrecognized information elements, the message
								 and the valid elements shall be processed.
								 (Non fatal error : ignored).
						*/

				case ERR_N_IE_UNKNOWN :
				case ERR_N_IE_OUT_OF_SEQUENCE :
					return (CONTINUE);	/* continue processing */

						/* -7.2- Non-mandatory information element
								 content error : send STATUS with cause #100
								 "invalid IE content".

							CCITT addendum : for RELEASE COMPLETE, no message
											 should be sent back.

						   -7.3- Non mandatory information element length
								 error : treated as a content error.
						*/


				case ERR_N_IE_O_CONTENT :
				case ERR_N_IE_O_LGTH :

					if (spdu_id != REL_COMP) {
						send_state (C_C_PROTOCOL_ERROR,
									C_V_INVALID_IE_CONTENT_100,
									error_diagnostic_1);
					}

					return (CONTINUE);

				case ERR_N_NAI :
				case ERR_N_CES :
				case ERR_I_TE_VAL :
					return (STOP);

				default :
					Trap (TRAP_NS_ERR_UNEXPECTED, "at5_err");

			}

			return (STOP);

			/* from Layer 4 Signalling entity */

	/*	-------------------------------------------------------------
		|                                                           |
		|	  from the Call Control side (User entity)   			|
		|                                                           |
		-------------------------------------------------------------	*/

		default :
			send_err_to_user (error_code, error_diagnostic_1, error_diagnostic_2, R_msg_from);

			if (Call_current_exist) {

				switch (ssdu_id) {

					case NS_CONN_RQ :
						call_clear ();
						break;

					default :
						break;
				}

			}

			return (STOP);

	/*	-----------------------------------------------------
		|													|
		|	  from the Management NS (MNS entity)			|
		|													|
		-----------------------------------------------------	*/

		case ENT_MNS :
			ns_retransmit (MNS_ERR_IN, ENT_MNS);
			return (STOP);
	}

}

/*EOF*/
