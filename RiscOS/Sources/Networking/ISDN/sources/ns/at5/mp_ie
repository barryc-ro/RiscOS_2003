/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ie.at5
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the ATT_5E5 information
 * element and the integrity constraints associated to them.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	at5_chan_id_spdu				(Void_parm);
	uchar	at5_keypad_spdu					(Void_parm);
	uchar	at5_bc_layer_nb_spdu			(Void_parm);
	uchar	at5_bc_is_layer_spdu			(Void_parm);
	uchar	at5_llc_spdu					(Void_parm);
	uchar	at5_llc_4a_spdu					(Void_parm);
	uchar	at5_llc_4b_spdu					(Void_parm);
	uchar	at5_llc_layer_nb_spdu			(Void_parm);
	uchar	at5_spdu_man_parameters			(Void_parm);

#	if AT5_SUPPLEMENTARY_SERVICES == ON
		uchar	at5_dest_call_appear_spdu	(Void_parm);		/* test for value between 1 and 254 */
		uchar	at5_feature_act_spdu		(Void_parm);		/* test for value between 1 and 254 */
		uchar	at5_feature_ind_init_spdu	(Void_parm);		/* init flag for MBS */
		uchar	at5_feature_ind_spdu		(Void_parm);
		uchar	at5_ori_call_appear_spdu	(Void_parm);		/* test for value between 1 and 254 */
		uchar	at5_call_ref_to_conn_id		(Void_parm);
		uchar	at5_sel_call_appear_spdu	(Void_parm);		/* test for value between 1 and 254 */
#	endif

#endif

/*---------- Call state             (CALL_STATE) */

D_START (AT5_CALL_STATE_SPDU)
		D_TABL  (STATE_VAL)
        D_END_OCTET (_3)
D_END   (END_SPDU)

START   (AT5_CALL_STATE_SPDU)
        TABL    (0,8,AT5_T_CALL_STATE,      &i_call_state[0].val)
        END_OCTET()
END (0)

/*---------- Called party number    (CALLED_NB) */

D_START (AT5_CALLED_NB_SPDU)
        D_TABL  (TYPE)
        D_TABL  (PLAN_ID)
        D_EXT_1 (_3)

        D_TEXT  (DIGIT_)
D_END   (END_SPDU)

START   (AT5_CALLED_NB_SPDU)
        TABL    (4,3,AT5_T_NB_TYPE,         &i_called_nb[0].nb_type)
        TABL    (0,4,AT5_T_NB_PLAN,         &i_called_nb[0].plan_id)
        EXT_1   ()

        TEXT    (IA5,DIGIT_E,           &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END     (0)

/*---------- Calling party number (CALLING_NB) */

D_START (AT5_CALLING_NB_SPDU)
        D_TABL  (TYPE)
        D_TABL  (PLAN_ID)
		D_EXT_1 (_3)
		D_OPTIONAL_OCTET (_DIG)

		D_TEXT  (DIGIT_)
D_END   (END_SPDU)

START   (AT5_CALLING_NB_SPDU)
		TABL    (4,3,AT5_T_NB_TYPE,         &i_calling_nb[0].nb_type)
		TABL    (0,4,AT5_T_NB_PLAN,         &i_calling_nb[0].plan_id)
		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT    (IA5,DIGIT,             &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END     (0)

/*---------- Cause (CAUSE) */

D_START (AT5_CAUSE_SPDU)
        D_VAL   (CODING_STD)
        D_PAD   (NS_PAD_3)
        D_TABL  (LOCATION)
        D_EXT_1 (_3)
        D_TABL  (C_CLASS)
        D_TABX  (C_VAL)
        D_EXT_1 (_4)
        D_OPTIONAL_OCTET (DIAGS)
        D_TEXT  (_CAUSE_DIAG)
D_END   (END_SPDU)

START   (AT5_CAUSE_SPDU)
        VAL     (5,2,CODING_STD_CCITT,  &i_cause[0].coding_std)
        PAD     (4,1)
        TABL    (0,4,AT5_T_LOCATION,        &i_cause[0].cause_loc)
        EXT_1   ()
        TABL    (4,3,AT5_T_C_C,             &i_cause[0].cause_class)
        TABX    (0,4,AT5_TX_C_V,            &i_cause[0].cause_class,    &i_cause[0].cause_val)
        EXT_1   ()
        OPTIONAL_OCTET  ()
        TEXT    (BINARY,ANY_OCTET,      &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END     (0)

/*---------- Channel idendification (CHAN_ID) */

D_START (AT5_CHAN_ID_SPDU_P)
        D_VAL   (INT_ID)
        D_TABL  (INT_TYPE)
        D_PAD   (NS_PAD_3)
        D_TABL  (PREF_EXCL)
        D_VAL   (D_CHAN_)
        D_TABX  (SEL)
        D_EXT_1 (_3)
D_END   (END_SPDU)

START   (AT5_CHAN_ID_SPDU_P)
        VAL     (6,1,INT_ID_IMPLICIT,       &i_chan_id[0].int_id)
        TABL    (5,1,AT5_T_INT_TYPE,        &i_chan_id[0].int_type)
        PAD     (4,1)
        TABL    (3,1,AT5_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
        VAL     (2,1,NOT_D_CHAN,        &i_chan_id[0].d_chan)
        TABX    (0,2,AT5_TX_CHAN_SEL,   &i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
        EXT_1   ()
END     (at5_chan_id_spdu)

    /*-----*/

    /* PRI-type chan_id */

D_START (AT5_CHAN_ID_PRI_P)
        D_TABL  (CODING)
        D_VAL   (NB_MAP)
        D_TABL  (TYPE)
		D_EXT_1 (_3_2)
		D_TEXT  (NBER)
D_END   (CHAN_ID_PRI_E)

START   (AT5_CHAN_ID_PRI_P)
		TABL    (5,2,AT5_T_CODING_STD,  &i_chan_id[0].coding_std)
		VAL     (4,1,CHAN_NUMBER,       &i_chan_id[0].nb_map)
		TABL    (0,4,AT5_T_CHAN_TYPE,   &i_chan_id[0].chan_type)
		EXT_1   ()
		TEXT    (IA5,ANY_OCTET,         &i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
END (0)

/*---------- Endpoint identifier (AT5_ENDPOINT_ID) */

D_START (AT5_ENDPOINT_ID_SPDU)
        D_ANY_VAL   (USID)
        D_END_OCTET (_3)

        D_TABL      (INTERP)
        D_ANY_VAL   (TID)
        D_END_OCTET (_4)
D_END   (END_SPDU)

START   (AT5_ENDPOINT_ID_SPDU)
		ANY_VAL (0,8,                   &i_endpoint_id[0].usid)
        END_OCTET()

        TABL    (7,1,AT5_T_INTERPRETER,     &i_endpoint_id[0].interp)
        ANY_VAL (0,7,                   &i_endpoint_id[0].tid)
        END_OCTET()
END (0)

/*---------- Keypad (KEYPAD) */

D_START (AT5_KEYPAD_SPDU_P)
        D_TEXT  (KEYPAD_VAL)
D_END   (END_SPDU)

START   (AT5_KEYPAD_SPDU_P)
		TEXT(IA5,DIGIT_E,               &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END (at5_keypad_spdu)

/*---------- Progress indicator (PROGRESS_IND) */

D_START (AT5_PROGRESS_IND_SPDU)
        D_VAL   (CODING_STD)
        D_PAD   (NS_PAD_3)
        D_TABL  (LOCATION)
        D_EXT_1 (_3)

        D_TABL  (DESCRIPTION)
        D_EXT_1 (_4)
D_END   (END_SPDU)

START   (AT5_PROGRESS_IND_SPDU)
        VAL     (5,2,CODING_STD_CCITT,  &i_progress_ind[0].coding_std)
        PAD     (4,1)
        TABL    (0,4,AT5_T_PROGRESS_LOCATION,&i_progress_ind[0].progress_loc)
        EXT_1   ()

        TABL    (0,7,AT5_T_PROGRESS_DESCRIPTION,&i_progress_ind[0].progress_descr)
        EXT_1   ()
END (0)

/*---------- Signal (SIGNAL) */

D_START (AT5_SIGNAL_SPDU)
        D_TABL      (SIGNAL_VAL)
        D_END_OCTET (_3)
D_END   (END_SPDU)

START   (AT5_SIGNAL_SPDU)
		TABL    (0,8,AT5_T_SIGNAL_VAL,      &i_signal[0].val)
        END_OCTET()
END (0)

/*---------- Terminal capabilities (TE_CAP) */

D_START (AT5_TE_CAP_SPDU)
        D_VAL   (CODING_STD)
        D_VAL   (DESCRIPTION)
        D_END_OCTET(_3)
D_END   (END_SPDU)

START   (AT5_TE_CAP_SPDU)
        VAL     (6,2,CODING_STD_CCITT,  &i_te_cap[0].coding_std)
        VAL     (0,6,TYPE_2_STIMULUS,   &i_te_cap[0].te_cap_descr)
        END_OCTET()
END (0)

/*---------- Bearer capability (BC) */

D_START (AT5_BC_SPDU)
        D_VAL                   (CODING_STD)
        D_TABL                  (TRF_CAP)
        D_EXT_1                 (_3)

        D_IF_VAL                (BASIC_VOICE)
            D_VAL               (TRF_MODE_V)
            D_VAL               (TRF_RATE_4_V)
            D_EXT_1             (_4)
            D_VAL               (LAYER_1_V)
			D_VAL               (PROTOCOL_1_V)
            D_EXT_1             (_5)
        D_ELSE                  (BASIC_DATA)
            D_TABL              (TRF_MODE)
            D_TABX              (TRF_RATE_4b)
            D_EXT_1             (_4b)
            D_OPTIONAL_OCTET    (_5_6)
            D_FUNCTION          (IS_LAYER)

            D_IF_VAL            (IF_LAYER)

                D_IF_VAL        (MODE_CIRCUIT)
                    D_VAL       (LAYER_1)
                    D_TABX      (BC_PROT_ID)

                    D_IF_VAL    (PROT_ID_1_RA_I461)
                        D_EXT_0_1(_5_01)
                        D_PAD   (NS_PAD_5a)
                        D_VAL   (RATE_56KBS)
                    D_END_IF    (ENDIF_RA_I461)
                    D_EXT_1     (_5_1)
                D_ELSE          (MODE_PACKET)
                    D_TABX      (LAYER_ID_2_3)
                    D_TABX      (BC_PROT_ID_2_3)
                    D_EXT_1     (_5a)
                    D_FUNCTION  (LAYER_NB_FCT)

                    D_IF_VAL    (LAYER_2_3)
                        D_TABX  (LAYER_ID_2_3p)
                        D_TABX  (BC_PROT_ID_2_3p)
						D_EXT_1 (_5ap)
					D_END_IF    (ENDIF_LAYER_2_3)
				D_END_IF        (ENDIF_MODE_CIRCUIT)
			D_END_IF            (LAYER_IF)
		D_END_IF                (SERVICE_TYPE)
D_END (END_SPDU)

START   (AT5_BC_SPDU)
        VAL         (5,2,CODING_STD_CCITT,          &i_bc[0].coding_std)
        TABL        (0,5,AT5_T_TRF_CAP,                 &i_bc[0].trf_cap)
        EXT_1       ()

        IF_VAL  (I_IF, &i_bc[0].trf_cap, EQ, TRF_CAP_SPEECH)

                /* Basic Voice Services */

            VAL     (5,2,TRF_MODE_CIRCUIT,          &i_bc[0].trf_mode)
            VAL     (0,5,TRF_RATE_64KBS,            &i_bc[0].trf_rate)
            EXT_1   ()

            VAL     (5,2,LAYER_ID_1,                &i_bc[0].Layer_id)
            VAL     (0,5,PROTOCOL_ID_1_G711_u,      &i_bc[0].Protocol_id)
            EXT_1   ()

        ELSE    ()

                /* Basic data */

            TABL                (5,2,AT5_T_TRF_MODE,                &i_bc[0].trf_mode)
            TABX                (0,5,AT5_TX_TRF_RATE,               &i_bc[0].trf_mode,      &i_bc[0].trf_rate)
            EXT_1               ()
            OPTIONAL_OCTET      ()
            FUNCTION            (at5_bc_is_layer_spdu)
            IF_VAL              (N_IF, &ie_if_flag, EQ, ON)

                IF_VAL          (I_IF, &i_bc[0].trf_mode, EQ, TRF_MODE_CIRCUIT)
                    VAL         (5,2,LAYER_ID_1,                &i_bc[0].Layer_id)
					TABX        (0,5,AT5_TX_BC_PROTOCOL_ID,         &i_bc[0].Layer_id,      &i_bc[0].Protocol_id)

                    IF_VAL      (I_IF, &i_bc[0].Protocol_id, EQ, PROTOCOL_ID_1_RA_I461)
                        EXT_0_1 ()
                        PAD     (5,2)       /*$ ASYN is then spare here */
                        VAL     (0,5,RA_56KBS,                  &i_bc[0].user_rate)
                    END_IF      ()
                    EXT_1       ()

                ELSE            ()
                    TABX        (5,2,AT5_TX_LAYER_ID,               &i_bc[0].trf_mode,      &i_bc[0].Layer_id)
                    TABX        (0,5,AT5_TX_BC_PROTOCOL_ID,         &i_bc[0].Layer_id,      &i_bc[0].Protocol_id)
                    EXT_1       ()
                    FUNCTION    (at5_bc_layer_nb_spdu)

                    IF_VAL      (N_IF, &ie_if_flag, EQ, ON)
                        TABX    (5,2,AT5_TX_LAYER_ID,               &i_bc[0].trf_mode,      &i_bc[0].Add_layer_id)
                        TABX    (0,5,AT5_TX_BC_PROTOCOL_ID,         &i_bc[0].Add_layer_id,  &i_bc[0].Add_protocol_id)
                        EXT_1   ()
                    END_IF  ()
                END_IF  ()
            END_IF  ()
        END_IF  ()
END (0)

/*-------------------------------------------------------------------------*/

/*---------- Low layer compatibility (LLC) */

D_START (AT5_LLC_SPDU_P)
        D_TABL  (CODING_STD)
        D_TABL  (TRF_CAP)
        D_EXT_1 (_3)

        D_TABL  (TRF_MODE)
        D_TABX  (TRF_RATE_4)

        D_FUNCTION(LLC_4a_SPDU)
        D_IF_VAL(NO_DEFAULT_4a_4b)

            D_EXT_0_1(_4)
            D_TABL  (STRUCTURE)
            D_FUNCTION(LLC_FCT)
            D_VAL   (CONFIG)
            D_VAL   (EST)

            D_FUNCTION(LLC_4b_SPDU)
            D_IF_VAL(NO_DEFAULT_4b)

                D_EXT_0_1(_4a)
                D_TABL  (SYMMETRY)
                D_TABX  (TRF_RATE_4b)

            D_END_IF (ENDIF_4b)

        D_END_IF(ENDIF_4a_4b)

        D_EXT_1 (_4b)

        D_IF_VAL(MODE_CIRCUIT)
            D_OPTIONAL_OCTET(_5_6)
        D_END_IF(ENDIF_MODE_CIRCUIT)

        D_TABX  (LAYER_ID)
        D_TABX  (LLC_PROT_ID)

        D_IF_VAL(LAYER_1)

            D_IF_TABL(PROT_ID_1_RA)

                D_EXT_0_1(_5_01)

                D_IF_VAL(PROT_ID_1_RA_NON_CCITT)
                    D_TABL  (SYN_ASYN)
                D_ELSE  (_PAD)
                    D_PAD   (NS_PAD_SYN_ASYN)
                D_END_IF(END_PROT_1_RA_NON_CCITT)

                D_PAD   (NS_PAD_5a)
                D_TABL  (USER_RATE)

            D_END_IF(ENDIF_RA)

        D_END_IF(ENDIF_LAYER_1)

        D_EXT_1 (_5_1)

		D_FUNCTION(LAYER_NB_FCT)
		D_IF_VAL(SECOND_LAYER_ID_PRESENT)

			D_TABX  (LAYER_ID_2_3)
			D_TABX  (LLC_PROT_ID_2_3)
			D_EXT_1 (_5a)

D_END (END_SPDU)

START   (AT5_LLC_SPDU_P)
        TABL    (5,2,AT5_T_CODING_STD,              &i_llc[0].coding_std)
        TABL    (0,5,AT5_T_TRF_CAP,                 &i_llc[0].trf_cap)
        EXT_1   ()

        TABL    (5,2,AT5_T_TRF_MODE,                &i_llc[0].trf_mode)
        TABX    (0,5,AT5_TX_TRF_RATE,               &i_llc[0].trf_mode, &i_llc[0].trf_rate)

        FUNCTION(at5_llc_4a_spdu)
        IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

            EXT_0_1 ()
            TABL    (4,3,AT5_T_STRUCTURE,           &i_llc[0].structure)
                /* set default values according to the previous fields for incoming spdu only */
            FUNCTION(at5_llc_spdu)
            VAL     (2,2,CONFIG_POINT_TO_POINT, &i_llc[0].config)
            VAL     (0,2,EST_DEMAND,            &i_llc[0].est)

                /* look for default values in the outgoing spdu */
            FUNCTION (at5_llc_4b_spdu)
            IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
                    /* not default values or incoming spdu */
                EXT_0_1 ()
                TABL    (5,2,AT5_T_SYMMETRY,        &i_llc[0].symmetry)
                TABX    (0,5,AT5_TX_TRF_RATE,       &i_llc[0].trf_mode, &i_llc[0].dest_rate)

            END_IF ()

        END_IF ()

        EXT_1   ()

        IF_VAL  (I_IF, &i_llc[0].trf_mode, EQ, TRF_MODE_CIRCUIT)
            OPTIONAL_OCTET()
        END_IF  ()

        TABX    (5,2,AT5_TX_LAYER_ID,               &i_llc[0].trf_mode, &i_llc[0].Layer_id)
        TABX    (0,5,AT5_TX_LLC_PROTOCOL_ID,        &i_llc[0].Layer_id, &i_llc[0].Protocol_id)

        IF_VAL  (I_IF, &i_llc[0].Layer_id, EQ, LAYER_ID_1)

            IF_TABL (I_IF, &i_llc[0].Protocol_id, IN, AT5_T_LLC_PROTOCOL_ID_1_RA)
                EXT_0_1 ()

                IF_VAL  (I_IF, &i_llc[0].Protocol_id, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
                    TABL(6,1,AT5_T_SYN_ASYN,        &i_llc[0].syn_asyn)
                ELSE    ()
                    PAD (6,1)
                END_IF ()

				PAD     (5,1)
				TABL    (0,5,AT5_T_USER_RATE,       &i_llc[0].user_rate)

			END_IF  ()

		END_IF  ()

		EXT_1   ()

		FUNCTION(at5_llc_layer_nb_spdu)
		IF_VAL (N_IF, &ie_if_flag, EQ, ON)

			TABX    (5,2,AT5_TX_LAYER_ID,               &i_llc[0].trf_mode,     &i_llc[0].Add_layer_id)
			TABX    (0,5,AT5_TX_LLC_PROTOCOL_ID,        &i_llc[0].Add_layer_id, &i_llc[0].Add_protocol_id)
			EXT_1   ()

END (0)

/*-------------------------------------------------------------------------*/

D_START (AT5_MANAGMNT_SPDU)
    D_VAL       (PROTOCOL_DISCR)
    D_END_OCTET (OCTET_7c)
    D_ANY_VAL   (TRANS_REF)
    D_EXT_1     (OCTET_7d)
    D_TABL      (OP_CLASS)
    D_PAD       (_7e)
    D_TABX      (OP_TYPE)
    D_EXT_1     (OCTET_7e)

    D_IF_VAL    (CLASS_REJECT)
        D_TABL  (MAN_ERR_CODE)
    D_ELSE      (OTHER_CLASSES)
        D_TABX  (MAN_CODE)
    D_END_IF    (CODE)
    D_EXT_1     (OCTET_7f)

D_END   (END_SPDU)

START   (AT5_MANAGMNT_SPDU)
    VAL         (0,8,PROTOCOL_DISCR_ATT_ISDN_MAN,   &i_managmnt[0].protocol_discr)
	END_OCTET   ()
    ANY_VAL     (0,7,                               &i_managmnt[0].trans_ref)
    EXT_1       ()
	TABL        (4,3,AT5_T_OP_CLASS,                &i_managmnt[0].op_class)
    PAD         (2,2)
    TABX        (0,3,AT5_TX_OP_TYPE,    &i_managmnt[0].op_class,    &i_managmnt[0].op_type)
    EXT_1       ()

    IF_VAL      (I_IF, &i_managmnt[0].op_class, EQ, REJECT)
        TABL    (0,7,AT5_T_MAN_ERR_CODE,                &i_managmnt[0].man_code)
    ELSE        ()
        TABX    (0,7,AT5_TX_MAN_CODE,   &i_managmnt[0].op_type,     &i_managmnt[0].man_code)
    END_IF      ()
    EXT_1       ()

END     (at5_spdu_man_parameters)

/*-------------------------------------------------------------------------*/
/*------------------------ SUPPLEMENTARY SERVICES IE ----------------------*/

#if AT5_SUPPLEMENTARY_SERVICES == ON

            /* ---------- User to user information (UUI) */

D_START (AT5_UUI_SPDU)
    D_VAL       (PROTOCOL_DISCR)
    D_END_OCTET (_3)
    D_TEXT      (INFO_)
D_END   (END_SPDU)

START   (AT5_UUI_SPDU)
    VAL         (0,8,PROTOCOL_DISCR_Q931,   &i_uui[0].protocol_discr)
    END_OCTET   ()
    TEXT        (BINARY, ANY_OCTET, &i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END     (0)

/*---------- Adjunct Control (ADJUNCT_CON) */

D_START (AT5_ADJUNCT_CON_SPDU)
        D_TABL      (ADJUNCT_VAL)
        D_END_OCTET (ADJUNCT_CON_VAL)
D_END   (END_SPDU)

START   (AT5_ADJUNCT_CON_SPDU)
        TABL        (0,8, AT5_T_ADJUNCT_VAL,        &i_adjunct_con[0].adjunct_val)
        END_OCTET   ()
END     (0)

#if AT5_KEY_SYSTEM_FEATURE == ON

/*---------- associated type (ASSOC_TYPE) */

D_START (AT5_ASSOC_TYPE_SPDU)
	D_TABL  (ASSOC_STATUS)
D_END   (END_SPDU)

START   (AT5_ASSOC_TYPE_SPDU)
	TABL    (0,8, AT5_T_ASSOC_STATUS,               &i_assoc_type[0].assoc_status)
END     (0)

#endif

/*---------- Destination Call Appearance (DEST_CALL_APPEAR) */

D_START (AT5_DEST_CALL_APPEAR_SPDU_P)
D_END   (END_SPDU)

START   (AT5_DEST_CALL_APPEAR_SPDU_P)
END     (at5_dest_call_appear_spdu)

/*---------- Display Control (DISPLAY_CON) */

D_START (AT5_DISPLAY_CON_SPDU)
		D_PAD       (BITS_0_3)
		D_TABL      (DISPLAY_MODE)
		D_END_OCTET (DISPLAY_CON_MODE)
D_END   (END_SPDU)

START   (AT5_DISPLAY_CON_SPDU)
		PAD         (0,4)
		TABL        (4,4, AT5_T_DISPLAY_CON_MODE,   &i_display_con[0].display_con_mode)
		END_OCTET   ()
END     (0)

/*---------- Display Field (DISPLAY_FLD) */

D_START (AT5_DISPLAY_FLD_SPDU)
		D_TABL      (DISPLAY_MODE)
		D_TABL      (SUB_MODE)
		D_END_OCTET (OCTET_3)
		D_TABL      (DISPLAY_FLD_TYPE)
		D_PAD       (NS_PAD_4)
		D_END_OCTET (OCTET_4)
		D_IF_VAL	(_TYPE_CALL_APPEAR_ID)
			D_TEXT  (DISPLAY_INFO_BINARY)
		D_ELSE		(_OTHER_TYPE)
			D_TEXT  (DISPLAY_INFO_TEXT)
		D_END_IF	(_TYPE)
D_END   (END_SPDU)

START   (AT5_DISPLAY_FLD_SPDU)
		TABL        (4,4, AT5_T_DISPLAY_FLD_MODE,   &i_display_fld[0].display_fld_mode)
		TABL        (0,4, AT5_T_DISPLAY_SUBMODE,    &i_display_fld[0].submode)
		END_OCTET   ()
		TABL        (0,5, AT5_T_DISPLAY_FLD_TYPE,   &i_display_fld[0].display_fld_type)
		PAD         (5,3)
		END_OCTET   ()

		IF_VAL		(I_IF, &i_display_fld[0].display_fld_type, EQ, CALL_APPEAR_ID)
			TEXT	(BINARY, ANY_OCTET, &i_display_fld[0].info_lgth,(uchar **)&i_display_fld[0].p_info)
		ELSE		()
			TEXT	(IA5, ANY_CHAR, &i_display_fld[0].info_lgth,(uchar **)&i_display_fld[0].p_info)
		END_IF		()

END     (0)

/*---------- Display (DISPLAY) */

D_START (AT5_DISPLAY_SPDU)
	D_TEXT      (DISPLAY_INFO_TEXT)
D_END   (END_SPDU)

START   (AT5_DISPLAY_SPDU)
		TEXT        (IA5, ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END		(0)

/*---------- Feature Activation (FEATURE_ACT) */

D_START (AT5_FEATURE_ACT_SPDU_P)
		D_TABL      (BUTTON_TYPE)
		D_TABL      (MODULE_NB)
		D_VAL       (STATUS_TYPE)
		D_END_OCTET (OCTET_3)
D_END   (END_SPDU)

START   (AT5_FEATURE_ACT_SPDU_P)
		TABL        (6,2, AT5_T_BUTTON_TYPE_ACT,        &i_feature_act[0].button_type_act)
		TABL        (3,3, AT5_T_MODULE_NB,              &i_feature_act[0].module_nb)
		VAL         (0,3, FEATURE_NUMBER_STATUS,    &i_feature_act[0].status_type)
		END_OCTET   ()
END     (at5_feature_act_spdu)

/*---------- Feature Indication (FEATURE_IND) */

D_START (AT5_FEATURE_IND_SPDU_P)
        D_TABL      (BUTTON_TYPE)
        D_TABL      (MODULE_NB)
        D_TABL      (STATUS_TYPE)
        D_FUNCTION  (INIT_FLAG_MBS)
        D_END_OCTET (OCTET_3)
D_END   (END_SPDU)

START   (AT5_FEATURE_IND_SPDU_P)
		TABL        (6,2, AT5_T_BUTTON_TYPE_IND,        &i_feature_ind[0].button_type_ind)
        TABL        (3,3, AT5_T_MODULE_NB,              &i_feature_ind[0].module_nb)
        TABL        (0,3, AT5_T_STATUS_TYPE,            &i_feature_ind[0].status_type)
        FUNCTION(at5_feature_ind_init_spdu)
        END_OCTET   ()
END     (at5_feature_ind_spdu)

D_START (AT5_FEATURE_IND_MS_SPDU)
        D_TABL      (MEANING)
        D_END_OCTET (_4_)
D_END   (END_SPDU)

START   (AT5_FEATURE_IND_MS_SPDU)
        TABL        (0,8, AT5_T_FEATURE_MEANING,        &i_feature_ind[0].meaning)
        END_OCTET   ()
END     (0)

/*---------- Keypad Control (KEYPAD_CON) */

D_START (AT5_KEYPAD_CON_SPDU)
        D_TABL      (CALL_REF_TYPE)
		D_END_OCTET (OCTET_3)
D_END   (END_SPDU)

START   (AT5_KEYPAD_CON_SPDU)
        TABL        (0,8, AT5_T_CALL_REF_TYPE,          &i_keypad_con[0].call_ref_type)
        END_OCTET   ()
END     (0)

/*---------- Origination Call Appearance (ORI_CALL_APPEAR) */

D_START (AT5_ORI_CALL_APPEAR_SPDU_P)
D_END   (END_SPDU)

START   (AT5_ORI_CALL_APPEAR_SPDU_P)
END     (at5_ori_call_appear_spdu)

/*---------- Other Call Reference (OTHER_CALL_REF) */

D_START (AT5_OTHER_CALL_REF_SPDU)
		D_IF_VAL    (_FROM_D)
			D_FUNCTION  (_CALL_REF_TO_CONN_ID)
		D_ELSE      (_FROM_CC)
			D_ANY_VAL   (_CALL_REF_FLAG)
			D_ANY_VAL   (_CALL_REF_VALUE)
			D_END_OCTET (_CALL_REF)
		D_END_IF    (_E)
D_END   (END_SPDU)

START   (AT5_OTHER_CALL_REF_SPDU)
        IF_VAL  (N_IF, &direction, EQ, FROM_D_CHANNEL)
            FUNCTION (at5_call_ref_to_conn_id)
        ELSE    ()
            ANY_VAL (7,1, &i_other_call_ref[0].call_ref_flag)
            ANY_VAL (0,7, &i_other_call_ref[0].call_ref_val)
            END_OCTET ()
        END_IF  ()
END     (0)

/*---------- Selected Call Appearance (SEL_CALL_APPEAR) */

D_START (AT5_SEL_CALL_APPEAR_SPDU_P)
D_END   (END_SPDU)

START   (AT5_SEL_CALL_APPEAR_SPDU_P)
END     (at5_sel_call_appear_spdu)

/*---------- Switchhook (SWITCHHOOK) */

D_START (AT5_SWITCHHOOK_SPDU)
		D_TABL      (HOOK_VAL)
		D_END_OCTET (OCTET_3)
D_END   (END_SPDU)

START   (AT5_SWITCHHOOK_SPDU)
        TABL        (0,8, AT5_T_HOOK_VAL,           &i_switchhook[0].hook_val)
        END_OCTET   ()
END     (0)

#endif

/*EOF*/
