
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.vn6
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* external functions prototype */

#if NEW_FCT_STYLE == ON
	uchar 	check_convert		(uchar FAR *p_to, uchar FAR *p_from, uint lgth, uchar code, uchar restriction);
#else
	uchar 	check_convert		();
#endif

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.vn6 */

#include "vn6.mp_ssdu"

uchar vn6_advice_of_charge_dcod_ssdu ()
{

	switch (Na_country) {

			/*
			 * List here the country which have different
			 * facility IE descriptions.
			 * For each of them, invoke the right decoding function.
			 */

		case EUROPE :
		default :

			if (direction == FROM_CALL_CONTROL) {

				return (r_exec_ssdu_ie ((uchar FAR *)&VN6_P_DF_ADVICE_CHARGE));

			} else {

				return (s_exec_ssdu_ie ((uchar FAR *)&VN6_P_DF_ADVICE_CHARGE));
			}
	}
}

uchar vn6_df_advice_ch_period_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			/* test if 'Charging Period Multiplier' is present (p_ssdu_val points to
				previous octet 'Charging period') and set 'ie_if_flag' variable to ON if so */

		if (p_ssdu_val[1] == BYTE_VAL_NIL) {

			ie_if_flag = OFF;

		} else {

			ie_if_flag = ON;
		}

	} else {

			/* test if 'Charging Period Multiplier' is present
				and set 'ie_if_flag' variable to ON if so */

		if (I_(advice_charge, charge_period_m) == BYTE_VAL_NIL) {

			ie_if_flag = OFF;

		} else {

			ie_if_flag = ON;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn6_bc_ra_ssdu - implements the specific processing
								  of a bc rate adaptation in a SSDU
								  primitive.

Usage           uchar vn6_bc_ra_ssdu ();

Return value : 	vn6_bc_ra_ssdu returns	= OK
										= NOK

common constants and declarations : ns.h, vn6_i_s.h

common objects : internal data structure i_bc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn6_bc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_bc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = r_exec_ssdu_ie((uchar *)&VN6_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_RA_NON_CCITT :
				ret_code = r_exec_ssdu_ie((uchar *)&VN6_P_BC_NON_CCITT);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				r_exec_ssdu_ie ((uchar *)&VN6_P_BC_PAD);
				break;
		}

		return (r_exec_ssdu_ie ((uchar *)&VN6_P_BC_2));

	} else {

		switch (I_bc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = s_exec_ssdu_ie((uchar *)&VN6_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_RA_NON_CCITT :
				ret_code = s_exec_ssdu_ie((uchar *)&VN6_P_BC_NON_CCITT);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				s_exec_ssdu_ie ((uchar *)&VN6_P_BC_PAD);
				break;
		}
		return (s_exec_ssdu_ie ((uchar *)&VN6_P_BC_2));
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		vn6_cause_diag_ssdu - implements the specific processing of a
								Diagnostic field in Cause IE in a SSDU primitive.

Usage           uchar vn6_cause_diag_ssdu ();

Return value : 	OK or NOK

common constants and declarations : ns.h, ns_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn6_cause_diag_ssdu ()
{
	uchar		class_val;			/* cause class & value */
	uchar FAR	*p_lgth_diag;		/* pointer to Diagnostic length inside SSDU or to internal Diagnostic stored */
	uchar		length;				/* length of Diagnostic data */

	class_val = C_v (I_cause_class, I_cause_val);

	if (direction == TO_CALL_CONTROL) {

			/* If Cause #102 is to be sent, Diagnostic is a string ->
				add null terminating character and increment length inside SSDU */

		if (class_val == C_v (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102)) {

			p_lgth_diag = p_ssdu_val - I_cause_diag_lgth - 1;
			(*p_lgth_diag)++;
			*p_ssdu_val++ = '\0';
		}

	} else {

			/* get address where Diagnostic data have been stored and length of data */

		p_lgth_diag = I_cause_p_diagnostic;
		length = I_cause_diag_lgth;

			/* If length is null, no received Diagnostic -> return OK */

		if (length == 0) {
			return (OK);
		}

			/* Diagnostic is made up of any octets but stored with a Set_str Macro (historic reason)
				: remove null terminating character if any (added by Macro) */

		if (p_lgth_diag [length - 1] == '\0') {

			length--;
			I_cause_diag_lgth = length;
		}

		if (class_val == C_v (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102)) {

				/* check that Diagnostic is a string of digits */

			while (length-- > 0) {

				if (!Isdigit (*p_lgth_diag)) {

					if (error_set (ERR_U_PARAM_TYPE, ie_id, ie_codeset) == FATAL) {
						return (NOK);
					}
				}

				p_lgth_diag++;
			}
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		vn6_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/
uchar vn6_chan_id_chan_nb_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

		if (I_(chan_id,int_type) == INT_TYPE_PRI) {

			/*
			 * Reset the extension bit in the chan_nb field.
			 */

			for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
				Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}
		}
	}

	return (OK);
}

uchar vn6_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		if (I_chan_id_int_type == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}

			if (I_(chan_id, chan_sel) == AS_INDICATED) {

					/* set the extension bit to 1 in the chan_nb field */

				i = I_(chan_id, chan_nb_lgth)-1;

				Set_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}
		}

	} else {

		if ((I_(chan_id, int_type) != INT_TYPE_BRI) &&
			(I_(chan_id, chan_sel) != AS_INDICATED)) {

			/*	PRI interface, no Channel Nb : set 0 in first octet (length)
				of 'chan_nb' array indicating that no Channel Nb is provided */

			p_ssdu_val--;
			*p_ssdu_val++ = 0;
		}
	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

uchar vn6_facility_dcod_ssdu ()

{

	switch (Na_country) {

			/*
			 * List here the country which have different
			 * facility IE descriptions.
			 * For each of them, invoke the right decoding function.
			 */

		case EUROPE :
		default :

			if (direction == FROM_CALL_CONTROL) {

				return (r_exec_ssdu_ie ((uchar FAR *)&VN6_P_DF_FACILITY));

			} else {

				return (s_exec_ssdu_ie ((uchar FAR *)&VN6_P_DF_FACILITY));
			}

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn6_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar vn6_llc_ra_ssdu ();

Return value : 	vn6_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, vn6_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn6_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_llc_protocol_id_1) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&VN6_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&VN6_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&VN6_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&VN6_P_LLC_2));

	} else {

			switch (I_llc_protocol_id_1) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&VN6_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&VN6_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&VN6_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&VN6_P_LLC_2));
	}

}

#if NS_SPF_FACILITY == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		vn6_spf_fac_ssdu - implements the processing of the specific facility
						  IE (received or to be sent in a SSDU message).

Usage	   uchar vn6_spf_fac_ssdu ();

Return value :  vn6_spf_fac_ssdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar vn6_spf_fac_ssdu ()
{
	if (direction == TO_CALL_CONTROL) {

		if (check_convert (	(uchar FAR *) p_ssdu_val,
							I_spf_fac_a_net_id,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) {
		  return (NOK);
		}

	} else {

		if (check_convert (	I_spf_fac_a_net_id,
							(uchar FAR *) p_ssdu_val,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) {
			return (NOK);
		}

	}
	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             vn6_get_spf_fac_ssdu -
Usage            uchar vn6_get_spf_fac_ssdu ();

Return value    return = OK
					   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : p_ind_buffer points the next free position in the indirect
				 buffer.

				 p_ssdu_val   points the current value position in the SSDU.

							  ie_val 	action;				 activate, clear or
															 enquiry / OK, NOK or TX
							  ie_val 	code;				 facility code
					 ------>  long 		charging;			 charging value
							  ie_array nb[VN6_MX_SZ_CALLED_NB];  called number

				  p_data_ref points the top of the SSDU buffer.

				  i_spf_fac    internal data structure for facility.

*--------------------------------------------------------------------------*/

uchar vn6_get_spf_fac_ssdu ()
{

	uchar	i;				/* loop counter */
	uchar	mx_lgth;		/* max string lgth */

#	if EQUIPMENT == NT2

		if (Na_fct == FG_NT_TE) return (vn6_get_spf_fac_ssdu_net ());

#	endif

	if (direction == FROM_CALL_CONTROL) {

		switch (ssdu_id) {

				/* SETUP */

			case NS_CONN_RQ :

				if (I_(spf_fac, action) != FT_SPF_FAC_RQ_ACTIVATE) {

					if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL){
						return (NOK);
					}

				} else {

					switch (I_(spf_fac, code)) {

						case FT_SPF_FAC_CHARGING :
						case FT_SPF_FAC_TRF :
						case FT_SPF_FAC_IDENTIFICATION_DENIED :
							break;

						default :
							if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
								return (NOK);
							}
							break;

					}

				}

				/* FACILITY */

			case NS_SPF_FACILITY_RQ :

				switch (I_(spf_fac, code)) {

					case FT_SPF_FAC_CALL_DEFLECTION :
					case FT_SPF_FAC_TRF :
					case FT_SPF_FAC_CHARGING :
					case FT_SPF_FAC_ALTERNATE :
					case FT_SPF_FAC_THREE_PARTY :
					case FT_SPF_FAC_MALICIOUS_CALL_ID :
					case FT_SPF_FAC_HOLD :
					case FT_SPF_FAC_RETRIEVE :
						break;

					default :

						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}
						break;
				}
				break;

				/* REGISTRATION */

			case NS_SPF_REGISTRATION_RQ :

				switch (I_(spf_fac, code)) {

					case FT_SPF_FAC_CALL_FORWARDING :
						p_ssdu_val += VN6_SPF_FAC_PAD_SIZE + Rnd_sizeof (long);

						if (I_(spf_fac, action) == FT_SPF_FAC_RQ_ACTIVATE) {

							if ((mx_lgth = *p_ssdu_val++) != 0) {

								I_spf_fac_p_fac = p_ind_buffer;

								for (i = 0; i < mx_lgth; i++, p_ind_buffer++, p_ssdu_val++) {
									if ((*p_ind_buffer = *p_ssdu_val) == '\0') break;
									if (Isdigit (*p_ind_buffer)) continue;
									if (error_set (ERR_U_PARAM_TYPE, ie_id, ie_codeset) == FATAL) return (NOK);
								}

								I_spf_fac_lgth = i;
								p_ind_buffer++;
								p_ssdu_val++;
								break;

							}

							if (error_set (ERR_U_PARAM_VAL, ie_id, ie_codeset) == FATAL) {
								return (NOK);
							}

						}

						break;

					default :

						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}

						break;

				}
				break;

				/* RELEASE */

			case NS_CLEAR_RQ :

				switch (I_(spf_fac, code)) {

					case FT_SPF_FAC_CALL_DEFLECTION :
						break;

					default :
						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}
						break;

				}
				break;

		}

	} else {

					/* TO CALL CONTROL */

		switch (ssdu_id) {

			case NS_CALL_PROC_IN :
				break;

			case NS_CLEAR_IN :
			case NS_CLEAR_CO :
			case NS_INFO_IN :
				p_ssdu_val 			+= VN6_SPF_FAC_PAD_SIZE;
				*(long *)p_ssdu_val	 = I_spf_fac_tax;
				p_ssdu_val 			+= Rnd_sizeof (long);
				break;


			case NS_SPF_FACILITY_CO :
			case NS_SPF_REGISTRATION_CO :

					/* skip the tax location and store length of possible string */

				p_ssdu_val += VN6_SPF_FAC_PAD_SIZE + Rnd_sizeof (long);
				*p_ssdu_val++ = I_spf_fac_lgth + 1;

					/* is there a block ? */

				if (I_spf_fac_lgth != 0) {

						/* transfer the called number */

					Memcpy_far ((char FAR *)p_ssdu_val, (char FAR *)I_spf_fac_p_fac, I_spf_fac_lgth + 1);
					p_ssdu_val += I_spf_fac_lgth + 1;

				} else {

					*p_ssdu_val++ = '\0';	/* null string */
				}

				break;
		}

	}

	return (OK);
}

#if EQUIPMENT == NT2

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             vn6_get_spf_fac_ssdu_net -
Usage            uchar vn6_get_spf_fac_ssdu_net ();

Return value    return = OK
					   = NOK

Common constants and declarations : ns.h, isdn.h

Common objects : p_ind_buffer points the next free position in the indirect
				 buffer.

				 p_ssdu_val   points the current value position in the SSDU.

							  ie_val 	action;				 activate, clear or
															 enquiry / OK, NOK or TX
							  ie_val 	code;				 facility code
					 ------>  long 		charging;			 charging value
							  ie_array nb[VN6_MX_SZ_CALLED_NB];  called number

				  p_data_ref points the top of the SSDU buffer.

				  i_spf_fac    internal data structure for facility.

*--------------------------------------------------------------------------*/

uchar vn6_get_spf_fac_ssdu_net ()
{

	uchar	i;				/* loop counter */
	uchar	mx_lgth;		/* max string lgth */

	if (direction == FROM_CALL_CONTROL) {

		switch (ssdu_id) {

				/* SETUP */

			case NS_CALL_PROC_RQ :

				switch (I_(spf_fac, code)) {

					case FT_SPF_FAC_CALL_FORWARDING :

							/* skip the tax location and store length of possible string */

						p_ssdu_val += VN6_SPF_FAC_PAD_SIZE + Rnd_sizeof (long);
						I_spf_fac_lgth = *p_ssdu_val++ - 1;

							/* is there a block ? */

						if (I_spf_fac_lgth != 0) {

								/* transfer the called number */

							Memcpy_far ((char FAR *)I_spf_fac_p_fac, (char FAR *)p_ssdu_val, I_spf_fac_lgth);
							p_ssdu_val += I_spf_fac_lgth + 1;

						} else {

							I_spf_fac_p_fac= '\0';	/* null string */
						}

						break;

					default :
						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}
						break;

				}

				break;

				/* DISC/REL */

			case NS_CLEAR_RQ :

				switch (I_(spf_fac, code)) {

					case FT_SPF_FAC_CHARGING_TOTAL:
					case FT_SPF_FAC_SUP_SERV_INVOKE_CHARGING :
						p_ssdu_val 		+= VN6_SPF_FAC_PAD_SIZE;
						I_spf_fac_tax	= *(long *)p_ssdu_val;
						p_ssdu_val 		+= Rnd_sizeof (long);
						break;

					default :
						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}
				}

				break;

				/* INFO */

			case NS_INFO_RQ :

				switch (I_(spf_fac, code)) {

					case FT_SPF_FAC_CHARGING :
						p_ssdu_val 		+= VN6_SPF_FAC_PAD_SIZE;
						I_spf_fac_tax	= *(long *)p_ssdu_val;
						p_ssdu_val 		+= Rnd_sizeof (long);
						break;
				}

				break;

				/* FACILITY */

			case NS_SPF_FACILITY_RQ :

				switch (I_(spf_fac, code)) {

					case FT_SPF_FAC_CHARGING:
					case FT_SPF_FAC_CHARGING_TOTAL:
						p_ssdu_val 		+= VN6_SPF_FAC_PAD_SIZE;
						I_spf_fac_tax	= *(long *)p_ssdu_val;
						p_ssdu_val 		+= Rnd_sizeof (long);
						break;

					default :

						if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
							return (NOK);
						}
						break;
				}
				break;

				/* REG_ACK */

			case NS_SPF_REGISTRATION_RS :

				if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {

					if (I_(spf_fac, code) == FT_SPF_FAC_CALL_FORWARDING) {
						p_ssdu_val += VN6_SPF_FAC_PAD_SIZE + Rnd_sizeof (long);

						if (I_(spf_fac, action) == FT_SPF_FAC_CO_ACK) {

							if ((mx_lgth = *p_ssdu_val++) != 0) {

								I_spf_fac_p_fac = p_ind_buffer;

								for (i = 0; i < mx_lgth; i++, p_ind_buffer++, p_ssdu_val++) {
									if ((*p_ind_buffer = *p_ssdu_val) == '\0') break;
									if (Isdigit (*p_ind_buffer)) continue;
									if (error_set (ERR_U_PARAM_TYPE, ie_id, ie_codeset) == FATAL) return (NOK);
								}

								I_spf_fac_lgth = i;
								p_ind_buffer++;
								p_ssdu_val++;
								break;

							}

						} else {

								/* Cause was absent, so it is a REG_ACK
									--> action should have been FT_SPF_FAC_CO_ACK
								*/

							if (error_set (ERR_U_PARAM_VAL, ie_id, ie_codeset) == FATAL) {
								return (NOK);
							}
						}
					}
				}

				break;
		}

	} else {

					/* TO CALL CONTROL */

		switch (ssdu_id) {

			case NS_CLEAR_IN :
			case NS_CLEAR_CO :
			case NS_SPF_FACILITY_IN :

					/* skip the tax location and store length of possible string */

				p_ssdu_val += VN6_SPF_FAC_PAD_SIZE + Rnd_sizeof (long);
				*p_ssdu_val++ = I_spf_fac_lgth + 1;

					/* is there a block ? */

				if (I_spf_fac_lgth != 0) {

						/* transfer the called number */

					Memcpy_far ((char FAR *)p_ssdu_val, (char FAR *)I_spf_fac_p_fac, I_spf_fac_lgth + 1);
					p_ssdu_val += I_spf_fac_lgth + 1;

				} else {

					*p_ssdu_val++ = '\0';	/* null string */
				}

				break;

			case NS_CONN_IN :
				break;

			case NS_SPF_FACILITY_CO :
			case NS_SPF_REGISTRATION_CO :
			case NS_SPF_REGISTRATION_IN :

					/* skip the tax location and store length of possible string */

				p_ssdu_val += VN6_SPF_FAC_PAD_SIZE + Rnd_sizeof (long);
				*p_ssdu_val++ = I_spf_fac_lgth + 1;

					/* is there a block ? */

				if (I_spf_fac_lgth != 0) {

						/* transfer the called number */

					Memcpy_far ((char FAR *)p_ssdu_val, (char FAR *)I_spf_fac_p_fac, I_spf_fac_lgth + 1);
					p_ssdu_val += I_spf_fac_lgth + 1;

				} else {

					*p_ssdu_val++ = '\0';	/* null string */
				}

				break;
		}

	}

	return (OK);
}

#endif

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn6_user_fac_protocol_ssdu - implements the specific processing
								  of a user facility IE in a SSDU primitive.

Usage           uchar vn6_user_fac_protocol_ssdu ();

Return value : 	vn6_user_fac_protocol_ssdu returns 	= OK
													= NOK

Common constants and declarations : ns.h, net_i_s.h

Common objects : internal data structure ssdu common context.

*--------------------------------------------------------------------------*/

uchar vn6_user_fac_protocol_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		if ((Call_current_exist) && (Call_user_fac_rq == OFF)) {

			if (error_set (ERR_U_USER_FAC_PROTOCOL, ie_id, Relative_add) == FATAL) {
					return (NOK);
			}

		}

	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ */

#define VN6_ALERT_RQ				VN6_ALERT_IN
#define VN6_NET_ALERT_RQ			VN6_ALERT_IN

		/* NS_ALERT_IN */

#define VN6_NET_ALERT_IN			VN6_ALERT_IN

		/* NS_CALL_PROC_RQ */

#define VN6_CALL_PROC_RQ			VN6_CALL_PROC_IN
#define VN6_NET_CALL_PROC_RQ		VN6_CALL_PROC_IN

		/* NS_CALL_PROC_IN */

#define VN6_NET_CALL_PROC_IN		VN6_CALL_PROC_IN

		/* NS_CONN_RQ */

#define VN6_CONN_RQ					VN6_CONN_IN
#define VN6_NET_CONN_RQ				VN6_CONN_IN

		/* NS_CONN_IN */

#define VN6_NET_CONN_IN				VN6_CONN_RQ

		/* NS_CONN_RS */

#define VN6_CONN_RS					VN6_CONN_CO
#define VN6_NET_CONN_RS				VN6_CONN_CO

		/* NS_CONN_CO */

#define VN6_NET_CONN_CO				VN6_CONN_CO

		/* NS_PROGRESS_RQ */

#define VN6_PROGRESS_RQ				VN6_PROGRESS_IN
#define VN6_NET_PROGRESS_RQ			VN6_PROGRESS_IN

		/* NS_PROGRESS_IN */

#define VN6_NET_PROGRESS_IN			VN6_PROGRESS_IN

		/* NS_SETUP_ACK_RQ */

#define VN6_SETUP_ACK_RQ			VN6_SETUP_ACK_IN
#define VN6_NET_SETUP_ACK_RQ		VN6_SETUP_ACK_IN

		/* NS_SETUP_ACK_IN */

#define VN6_NET_SETUP_ACK_IN		VN6_SETUP_ACK_IN

/*===============    CALL  INFORMATION  PHASE  MESSAGES    ====================*/

/*-------- NS_RESUME_IN */

#define VN6_NET_RESUME_IN			VN6_RESUME_RQ

/*-------- NS_RESUME_RS */

#define VN6_NET_RESUME_RS			VN6_RESUME_CO

/*-------- NS_SUSPEND_IN */

#define VN6_NET_SUSPEND_IN			VN6_SUSPEND_RQ

/*-------- NS_SUSPEND_RS */

#define VN6_NET_SUSPEND_RS			VN6_SUSPEND_CO

		/* NS_USER_INFO_RQ */

#define VN6_USER_INFO_RQ			VN6_USER_INFO_IN
#define VN6_NET_USER_INFO_RQ		VN6_USER_INFO_IN

		/* NS_USER_INFO_IN */

#define VN6_NET_USER_INFO_IN		VN6_USER_INFO_IN

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

#define VN6_CLEAR_RQ				VN6_CLEAR_IN
#define VN6_NET_CLEAR_RQ			VN6_CLEAR_IN

		/* NS_CLEAR_IN */

#define VN6_NET_CLEAR_IN			VN6_CLEAR_IN

		/* NS_CLEAR_RS */

#define VN6_CLEAR_RS				VN6_CLEAR_CO
#define VN6_NET_CLEAR_RS			VN6_CLEAR_CO

		/* NS_CLEAR_CO */

#define VN6_NET_CLEAR_CO			VN6_CLEAR_CO

		/* NS_RESTART_RQ - (No IE in this message) */

#define VN6_RESTART_RQ				VN6_RESTART_IN
#define VN6_NET_RESTART_RQ			VN6_RESTART_IN

		/* NS_RESTART_IN */

#define VN6_NET_RESTART_IN			VN6_RESTART_IN

		/* NS_RESTART_CO */

#define VN6_RESTART_RS				VN6_RESTART_IN
#define VN6_NET_RESTART_RS			VN6_RESTART_IN

		/* NS_RESTART_CO */

#define VN6_RESTART_CO				VN6_RESTART_IN
#define VN6_NET_RESTART_CO			VN6_RESTART_IN

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

		/* NS_CONGESTION_CONTROL_IN */

#define VN6_NET_CON_CON_RQ			VN6_CON_CON_IN

		/* NS_INFO_RQ */

#define VN6_INFO_RQ					VN6_INFO_IN
#define VN6_NET_INFO_RQ				VN6_INFO_IN

		/* NS_INFO_IN */

#define VN6_NET_INFO_IN				VN6_INFO_RQ

		/* NS_NOTIFY_RQ */

#define VN6_NOTIFY_RQ				VN6_NOTIFY_IN
#define VN6_NET_NOTIFY_RQ			VN6_NOTIFY_IN

		/* NS_NOTIFY_IN */

#define VN6_NET_NOTIFY_IN			VN6_NOTIFY_IN

#if NS_SPF_FACILITY == ON

	/*-------- NS_SPF_FACILITY_RQ */

#	define VN6_SPF_FACILITY_RQ			VN6_SPF_FACILITY_CO

	/*-------- NS_SPF_FACILITY_IN */

#	define VN6_NET_SPF_FACILITY_IN		VN6_SPF_FACILITY_RQ

	/*-------- NS_SPF_FACILITY_RS */

#	define VN6_NET_SPF_FACILITY_RS		VN6_SPF_FACILITY_CO

	/*-------- NS_SPF_REGISTRATION_RQ */

#	define	VN6_SPF_REGISTRATION_RQ		VN6_SPF_REGISTRATION_CO

	/*-------- NS_SPF_REGISTRATION_IN */

#	define	VN6_NET_SPF_REGISTRATION_IN	VN6_SPF_REGISTRATION_RQ

	/*-------- NS_SPF_REGISTRATION_RS */

#	define	VN6_NET_SPF_REGISTRATION_RS	VN6_SPF_REGISTRATION_CO

#endif	/* NS_SPF_FACILITY */

/*=========================================================================*/

#define Ns_vn6_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_vn6_end_table_or_function		};

#define Ns_vn6_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_vn6_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_vn6		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_vn6_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_vn6_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "vn6.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define VN6_MX_SSDU (sizeof(VN6_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		vn6_mx_size_ssdu = VN6_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_vn6_table_or_function
#undef Ns_vn6_end_table_or_function
#undef Ns_vn6_tab_ssdu_ie_entry
#undef Ns_vn6_tab_ssdu_ie_mx_entry
#undef Ns_vn6_tab_ssdu_entry

#define Ns_vn6_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_vn6_end_table_or_function		}

#define Ns_vn6_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_vn6_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_vn6_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_vn6
#	define Message_header_ssdu_ie_vn6		Ns_vn6_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_vn6_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_vn6_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_vn6_ssdu ()
{
    uchar   i_pic;

#	include "vn6.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

