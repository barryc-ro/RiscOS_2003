
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_cc.vn6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		vn6_cc_load_ns_test - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			vn6_cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar vn6_cc_load_ns_test (code_t primitive_code, nai_t nai,
									   conn_id_t conn_id);
							- primitive_code 	= code of the primitive to send,
							- nai				= network access ID,
							- conn_id			= connection ID.

Return value : 	vn6_cc_load_ns_test returns = OK
										= NOK

common constants and declarations : ns.h, isdn.h

common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar vn6_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t		prim_code;		/* primitive code */
	nai_t 		nai;			/* network access ID */
	sapi_t		sapi;			/* sapi */
	conn_id_t	conn_id;		/* connection ID */
{

#	if EQUIPMENT == NT2
		uchar	chan_nb[2];
#	endif

#	if NS_IE_TSP_OUT == ON
		uchar tsp_data[5];
#	endif

		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

	if (Na_fct != FG_NT_TE) {

		/*========== primitives as seen from TE side ==========*/

			/* Switch according to the primitive to send */

		switch (prim_code) {

	/*---------------- CONNECTION REQUEST */

			case  NS_CONN_RQ :

#			if NS_IE_TSP_OUT == ON
				Isdn_init_vn6_ctx_rq_rs_tsp		(conn_rq,
												 Buffer_a_first_data,
												 Buffer_data_lgth
												);
#			else
				Isdn_init_vn6_ctx_rq_rs			(conn_rq,
												 Buffer_a_first_data
												 );
#			endif

#			if NS_IE_TSP_OUT == OFF

	/*			Isdn_vn6_store_bc_not_V110		(conn_rq,
												 TRF_CAP_UNRESTRICTED,
												 TRF_MODE_CIRCUIT,
												 TRF_RATE_64KBS,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL
												);




				Isdn_vn6_store_bc_V110			(conn_rq,
												 TRF_CAP_VIDEO,
												 TRF_MODE_CIRCUIT,
												 TRF_RATE_2x64KBS,
												 STRUCTURE_UNSTRUCTURED,
												 TRF_RATE_384KBS,
												 ASYN,
												 NEGOTIATION_NOT_IN_BAND,
												 RA_0_300KBS,
												 INTER_RA_16KBS,
												 NIC_NOT_RQ_TX_DATA,
												 NIC_NOT_ACCEPT_DATA,
												 FLOW_NOT_RQ_TX_DATA,
												 FLOW_CANNOT_ACCEPT_DATA,
												 STOP_BIT_2,
												 DATA_BIT_7,
												 FORCED_TO_1,
												 FULL_DUPLEX,
												 MODEM_V21,
												 PROTOCOL_ID_2_X25_LL,
												 PROTOCOL_ID_3_X25_PL
												);
	*/
				Isdn_vn6_store_bc_not_V110		(conn_rq,
												 TRF_CAP_SPEECH,
												 TRF_MODE_CIRCUIT,
												 TRF_RATE_64KBS,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL,
												 PROTOCOL_ID_1_G711_A,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL
												);
#			else

				tsp_data[0] = 3;
				tsp_data[1] = 0x80;
				tsp_data[2] = 0x90;
				tsp_data[3] = 0xa3;

				Isdn_vn6_store_bc_tsp			(conn_rq,
												 tsp_data
												);
#			endif

				Isdn_vn6_store_called_nb		(conn_rq,
												 NB_UNKNOWN,
												 PLAN_UNKNOWN,
												 "316"
												);

				Isdn_vn6_store_hlc				(conn_rq,
												 CODING_STD_CCITT,
												 BYTE_VAL_NIL,
												 TELEPHONY);

#if 0
				Isdn_vn6_store_hlc_CCITT		(conn_rq,
												 INTER_CCITT,
												 TELEPHONY
												);

				Isdn_vn6_store_called_sub_add	(conn_rq,
												 SUB_ADD_OSI,
												 SUB_ADD_EVEN,
												 "4321"
												);




				Isdn_vn6_store_uui				(conn_rq,
												 PROTOCOL_DISCR_IA5,
												 "conn rq--- BONJOUR +++"
												);

				Isdn_vn6_store_user_pcs			(conn_rq,
												 PROTOCOL_DISCR_PUBLIPHONE,
												 "BLA-BLA",
												 7
												);

				Isdn_vn6_store_pcs_user			(conn_rq,
												 PROTOCOL_DISCR_CALL_ROUTING,
												 "BLO-BLO",
												 7
												);
#		if NS_SPF_FACILITY == ON

				Isdn_vn6_store_spf_fac   	   (conn_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 FT_SPF_FAC_CHARGING,
												 A_NIL
												);
#		endif
#endif
				break;

	/*---------------- CONNECTION RESPONSE */

			case  NS_CONN_RS :
				Isdn_init_vn6_ctx_rq_rs 		(conn_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_uui				(conn_rs,
												 PROTOCOL_DISCR_OSI,
												 "conn rs--- BONJOUR +++"
												);
				break;

	/*---------------- CONNECTION CLEAR REQUEST */

			case  NS_CLEAR_RQ :
				Isdn_init_vn6_ctx_rq_rs			(clear_rq,
												 Buffer_a_first_data
												);
	/*
				Isdn_vn6_store_cause			(clear_rq,
												 CODING_STD_CCITT,
												 LOCATION_PR_NET_LOC_USER,
												 RECOMMENDATION_Q931,
												 C_C_NORMAL_EVENT,
												 C_V_NORMAL_CLEARING_16,
												 A_NIL
												);
	*/

				Isdn_vn6_store_cause			(clear_rq,
												 CODING_STD_CCITT,
												 0,
												 BYTE_VAL_NIL,
												 C_C_NORMAL_EVENT,
												 C_V_NORMAL_CLEARING_16,
												 "1"
												);

				Isdn_vn6_store_uui				(clear_rq,
												 PROTOCOL_DISCR_IA5,
												 "**** UUI clear rq ***"
												);

				break;

	/*---------------- CONNECTION CLEAR RESPONSE */

			case  NS_CLEAR_RS :
				Isdn_init_vn6_ctx_rq_rs			(clear_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_uui				(clear_rs,
												 PROTOCOL_DISCR_Q931,
												 "**** UUI clear rs ***"
												);
				break;

	/*---------------- INFORMATION REQUEST */

			case  NS_INFO_RQ :
				Isdn_init_vn6_ctx_rq_rs			(info_rq,
												 Buffer_a_first_data
												);

#				if NS_SPF_FACILITY == ON

					Isdn_vn6_store_spf_fac          (info_rq,
													 FT_SPF_FAC_RQ_ACTIVATE,
													 FT_SPF_FAC_CHARGING,
													 A_NIL
													);
#				endif

				Isdn_vn6_store_keypad			(info_rq,
												 "8901234"
												);

				Isdn_vn6_store_called_nb		(info_rq,
												 NB_SUBSCRIBER,
												 PLAN_UNKNOWN,
												 "6"
												);

				break;

	/*---------------- ALERTING REQUEST */

			case  NS_ALERT_RQ :
				Isdn_init_vn6_ctx_rq_rs			(alert_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_uui				(alert_rq,
												 PROTOCOL_DISCR_X244,
												 "*** UUI alert rq ***"
												);
				break;

	/*---------------- SUSPEND REQUEST */

			case  NS_SUSPEND_RQ :
				Isdn_init_vn6_ctx_rq_rs			(suspend_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_call_id			(suspend_rq,
												 "12"
												);
				break;

	/*---------------- RESUME REQUEST */

			case  NS_RESUME_RQ :
				Isdn_init_vn6_ctx_rq_rs			(resume_rq,
												 Buffer_a_first_data
												);

				break;

	/*---------------- FACILITY REQUEST */


#		if NS_SPF_FACILITY == ON

			case  NS_SPF_FACILITY_RQ :
				Isdn_init_vn6_ctx_rq_rs         (spf_facility_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_spf_fac          (spf_facility_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 FT_SPF_FAC_CHARGING,
												 A_NIL
												);
				break;

#		endif

		/*---------------- SPECIFIC REGISTRATION REQUEST */

#		if NS_SPF_FACILITY == ON

			case NS_SPF_REGISTRATION_RQ :
				Isdn_init_vn6_ctx_rq_rs         (spf_reg_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_spf_fac          (spf_reg_rq,
												 FT_SPF_FAC_RQ_ACTIVATE,
												 FT_SPF_FAC_CALL_FORWARDING,
												 "123456789"
												);
				break;
#		endif

	/*---------------- USER INFORMATION */

			case NS_USER_INFO_RQ :
				Isdn_init_vn6_ctx_rq_rs			(user_info_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_more_data		(user_info_rq);

				Isdn_vn6_store_uui				(user_info_rq,
												 PROTOCOL_DISCR_SYSTEM_MANAGEMENT,
												 "*** UUI user info rq ***"
												);
				break;


	/*---------------- CALL_PROC_RQ */

			case NS_CALL_PROC_RQ :
				Isdn_init_vn6_ctx_rq_rs			(call_proc_rq,
												 Buffer_a_first_data
												);

				break;

	/*---------------- SETUP_ACK_RQ */

			case NS_SETUP_ACK_RQ :
				Isdn_init_vn6_ctx_rq_rs			(setup_ack_rq,
												 Buffer_a_first_data
												);

				break;


	/*---------------- NOTIFY_RQ */

			case NS_NOTIFY_RQ :
				Isdn_init_vn6_ctx_rq_rs			(notify_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_notif_ind		(notify_rq,
												 USER_SUSPENDED
												);
				break;

	/*---------------- PROGRESS_RQ */

			case NS_PROGRESS_RQ :
				Isdn_init_vn6_ctx_rq_rs			(progress_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_progress_ind		(progress_rq,
												CODING_STD_CCITT,
												PROGRESS_LOC_USER,
												PROGRESS_DESCR_NON_ISDN_ORIG
												);
				break;

	/*---------------- RESTART_RS */

			case NS_RESTART_RS :
				Isdn_init_vn6_ctx_rq_rs			(restart_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_restart_ind		(restart_rs,
												 RI_ALL_INTERFACES
												);

				break;

	/*---------------- RESTART_RQ */

			case NS_RESTART_RQ :
				Isdn_init_vn6_ctx_rq_rs			(restart_rq,
												 Buffer_a_first_data
												);
				break;

	/*---------------- STATUS_ENQ_RQ */

			case NS_STATUS_ENQ_RQ :
				Isdn_init_vn6_ctx_rq_rs			(status_enq_rq,
												 Buffer_a_first_data
												);
				break;

			default :
				return (NOK);

		} /* end of "switch (prim_code)" */

	} /* TE side */

/*==========================================================================*/

#if EQUIPMENT == NT2 /* { */

	else {

		/*========== primitives as seen from NT side ==========*/

			/* Switch according to the primitive to send */

		switch (prim_code) {

	/*---------------- CONNECTION REQUEST */

			case  NS_CONN_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_conn_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_bc_not_V110		(net_conn_rq,
												 TRF_CAP_SPEECH,
												 TRF_MODE_CIRCUIT,
												 TRF_RATE_64KBS,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL,
												 PROTOCOL_ID_1_G711_A,
												 BYTE_VAL_NIL,
												 BYTE_VAL_NIL
												);

				if (Na_type == BRI) {

					Isdn_vn6_store_chan_id_BRI	(net_conn_rq,
												 CHAN_EXCL,
												 NOT_D_CHAN,
												 B1_CHAN
												);
				} else {

					chan_nb[0] = 8;		/* B8 */
					chan_nb[1] = 0;		/* null terminating character */

					Isdn_vn6_store_chan_id_PRI	(net_conn_rq,
												 CHAN_EXCL,
												 NOT_D_CHAN,
												 AS_INDICATED,
												 CODING_STD_CCITT,
												 B_CHAN,
												 chan_nb
												);
				}

				Isdn_vn6_store_calling_nb		(net_conn_rq,
												 NB_UNKNOWN,
												 PLAN_TELEX,
												 PRES_ALLOWED,
												 USER_PROVIDED,
												 "30571841"
												);

				Isdn_vn6_store_calling_sub_add	(net_conn_rq,
												 SUB_ADD_USER,
												 SUB_ADD_ODD,
												 "4321"
												);

				Isdn_vn6_store_called_nb		(net_conn_rq,
												 NB_NATIONAL,
												 PLAN_UNKNOWN,
												 "12345"
												);

				Isdn_vn6_store_called_sub_add	(net_conn_rq,
												 SUB_ADD_OSI,
												 SUB_ADD_EVEN,
												 "4321"
												);

				Isdn_vn6_store_hlc_CCITT		(net_conn_rq,
												 INTER_CCITT_CEPT,
												 TELEPHONY
												);

				Isdn_vn6_store_uui				(net_conn_rq,
												 PROTOCOL_DISCR_IA5,
												 "conn rq--- BONJOUR +++"
												);
				break;

	/*---------------- CONNECTION RESPONSE */

			case  NS_CONN_RS :
				Isdn_init_vn6_ctx_rq_rs 		(net_conn_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_uui				(net_conn_rs,
												 PROTOCOL_DISCR_OSI,
												 "conn rs--- BONJOUR +++"
												);
				break;

	/*---------------- CONNECTION CLEAR REQUEST */

			case  NS_CLEAR_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_clear_rq,
												 Buffer_a_first_data
												);

#				if NS_SPF_FACILITY == ON

					Isdn_vn6_store_spf_fac_charging (net_clear_rq,
													 FT_SPF_FAC_CHARGING_TOTAL,
													 12
													);
#				endif

				Isdn_vn6_store_cause			(net_clear_rq,
												 CODING_STD_CCITT,
												 LOCATION_USER,
												 RECOMMENDATION_Q931,
												 C_C_NORMAL_EVENT,
												 C_V_NORMAL_CLEARING_16,
												 A_NIL
												);

				Isdn_vn6_store_uui				(net_clear_rq,
												 PROTOCOL_DISCR_IA5,
												 "**** UUI clear rq ***"
												);
				break;

	/*---------------- CONNECTION CLEAR RESPONSE */

			case  NS_CLEAR_RS :
				Isdn_init_vn6_ctx_rq_rs			(net_clear_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_uui				(net_clear_rs,
												 PROTOCOL_DISCR_Q931,
												 "**** UUI clear rs ***"
												);
				break;

	/*---------------- INFORMATION REQUEST */

			case  NS_INFO_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_info_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_display			(net_info_rq,
												 "*** display ***"
												);

				Isdn_vn6_store_called_nb		(net_info_rq,
												 NB_SUBSCRIBER,
												 PLAN_UNKNOWN,
												 "6"
												);

#				if NS_SPF_FACILITY == ON

					Isdn_vn6_store_spf_fac_charging (net_info_rq,
													 FT_SPF_FAC_CHARGING,
													 2
													);
#				endif

				break;

	/*---------------- ALERTING REQUEST */

			case  NS_ALERT_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_alert_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_uui				(net_alert_rq,
												 PROTOCOL_DISCR_X244,
												 "*** UUI alert rq ***"
												);
				break;

	/*---------------- SUSPEND REQUEST */

			case  NS_SUSPEND_RS :
				Isdn_init_vn6_ctx_rq_rs			(net_suspend_rs,
												 Buffer_a_first_data
												);


				Isdn_vn6_store_cause			(net_suspend_rs,
												 CODING_STD_CCITT,
												 LOCATION_USER,
												 RECOMMENDATION_Q931,
												 C_C_NORMAL_EVENT,
												 C_V_NORMAL_CLEARING_16,
												 A_NIL
												);

				Isdn_vn6_store_display			(net_suspend_rs,
												 "12"
												);
				break;

	/*---------------- RESUME REQUEST */

			case  NS_RESUME_RS :
				Isdn_init_vn6_ctx_rq_rs			(net_resume_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_chan_id_BRI		(net_resume_rs,
												 CHAN_EXCL,
												 NOT_D_CHAN,
												 B1_CHAN
												);

				Isdn_vn6_store_cause			(net_resume_rs,
												 CODING_STD_CCITT,
												 LOCATION_USER,
												 RECOMMENDATION_Q931,
												 C_C_NORMAL_EVENT,
												 C_V_NORMAL_CLEARING_16,
												 A_NIL
												);

				Isdn_vn6_store_display			(net_resume_rs,
												 "12"
												);
				break;

#		if NS_SPF_FACILITY == ON

		/*---------------- FACILITY RESPONSE */

			case  NS_SPF_FACILITY_RS :
				Isdn_init_vn6_ctx_rq_rs         (net_spf_facility_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_display          (net_spf_facility_rs,
												 "spf-fac-rs"
												);
				break;

		/*---------------- SPECIFIC REGISTRATION RESPONSE */

			case NS_SPF_REGISTRATION_RS :
				Isdn_init_vn6_ctx_rq_rs         (net_spf_reg_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_spf_fac          (net_spf_reg_rs,
												 FT_SPF_FAC_CO_ACK,
												 FT_SPF_FAC_CALL_FORWARDING,
												 A_NIL
												);

				Isdn_vn6_store_display          (net_spf_reg_rs,
												 "spf-reg-rs"
												);
				break;
#		endif

	/*---------------- USER INFORMATION */

			case NS_USER_INFO_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_user_info_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_more_data		(net_user_info_rq);

				Isdn_vn6_store_uui				(net_user_info_rq,
												 PROTOCOL_DISCR_SYSTEM_MANAGEMENT,
												 "*** UUI user info rq ***"
												);
				break;

	/*---------------- CALL_PROC_RQ */

			case NS_CALL_PROC_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_call_proc_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_chan_id_BRI		(net_call_proc_rq,
												 CHAN_EXCL,
												 NOT_D_CHAN,
												 B1_CHAN
												);

				Isdn_vn6_store_display			(net_call_proc_rq,
												 "display"
												);
				break;

	/*---------------- SETUP_ACK_RQ */

			case NS_SETUP_ACK_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_setup_ack_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_display			(net_call_proc_rq,
												 "display"
												);
				break;


	/*---------------- NOTIFY_RQ */

			case NS_NOTIFY_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_notify_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_notif_ind		(net_notify_rq,
												 USER_SUSPENDED
												);
				break;

	/*---------------- PROGRESS_RQ */

			case NS_PROGRESS_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_progress_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_progress_ind		(net_progress_rq,
												CODING_STD_CCITT,
												PROGRESS_LOC_USER,
												PROGRESS_DESCR_NON_ISDN_ORIG
												);
				break;

	/*---------------- STATUS_ENQ_RQ */

			case NS_STATUS_ENQ_RQ :
				Isdn_init_vn6_ctx_rq_rs			(net_status_enq_rq,
												 Buffer_a_first_data
												);
				break;


	/*---------------- CONGESTION_CONTROL_RQ */

			case NS_CONGEST_CONTROL_RQ :

				Isdn_init_vn6_ctx_rq_rs			(net_con_con_rq,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_congest_level	(net_con_con_rq,
												 RECEIVER_READY
												);

				Isdn_vn6_store_cause			(net_con_con_rq,
												 CODING_STD_CCITT,
												 LOCATION_USER,
												 RECOMMENDATION_Q931,
												 C_C_NORMAL_EVENT,
												 C_V_NORMAL_CLEARING_16,
												 A_NIL
												);

				Isdn_vn6_store_display			(net_con_con_rq,
												 "*** con con ***"
												);
				break;

	/*---------------- RESTART_RS */

			case NS_RESTART_RS :
				Isdn_init_vn6_ctx_rq_rs			(restart_rs,
												 Buffer_a_first_data
												);

				Isdn_vn6_store_restart_ind		(restart_rs,
												 RI_ALL_INTERFACES
												);

				break;

	/*---------------- RESTART_RQ */

			case NS_RESTART_RQ :
				Isdn_init_vn6_ctx_rq_rs			(restart_rq,
												 Buffer_a_first_data
												);
				break;

	/*---------------- UNKNOWN primitive */

			default :
				return (NOK);

		} /* end of "switch (prim_code)" */

	} /* NT-side */

#endif /* EQUIPMENT = NT2} */

		/* Load the communication message */

	Store_message (prim_code, nai, sapi, conn_id, p_buffer);
	Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);

	return (OK);
}

/*EOF*/
