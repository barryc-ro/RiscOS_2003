

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.vn6
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


				/*
				   MACROs and DECLARATIONS used to access the Network
				   Signalling entity (NS) from the user Layer 4 Signalling
				   entity (L4S).
				*/

/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_vn6_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#if NS_IE_TSP_OUT == ON
#	define Isdn_init_vn6_ctx_rq_rs_tsp(pr, p_off, data_lg)	Isdn_init_ctx_rq_rs_tsp(Paste(vn6_,pr), p_off, data_lg)
#endif

#define Isdn_init_vn6_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(vn6_,pr), p_off)
#define Isdn_init_vn6_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_vn6(pr,ie)					Get_ie 			(Paste(vn6_,pr), Paste (vn6_, ie))
#define	Isdn_get_val_vn6(pr,ie,fld)			Isdn_get_val	(Paste(vn6_,pr), Paste (vn6_, ie), fld)
#define Isdn_p_str_vn6(pr,ie,fld)			Isdn_p_str		(Paste(vn6_,pr), Paste (vn6_, ie), fld)
#define	Isdn_lgth_str_vn6(pr,ie,fld)		Isdn_lgth_str	(Paste(vn6_,pr), Paste (vn6_, ie), fld)
#define	Isdn_mx_lgth_str_vn6(pr,ie,fld)		Isdn_mx_lgth_str(Paste(vn6_,pr), Paste (vn6_, ie), fld)
#define	P_start_val_ns_vn6(pr,ie)			P_start_val_ns	(Paste(vn6_,pr), Paste (vn6_, ie))
#define	P_val_ns_vn6(ie)					P_val_ns		(Paste(vn6_,ie))
#define Set_offset_vn6(pr,ie)				Set_offset		(Paste(vn6_,pr),Paste(vn6_,ie))
#define	Set_next_ie_vn6(ie)					Set_next_ie		(Paste(vn6_,ie))
#define	Set_val_vn6(ie,fld,val)				Set_val			(Paste(vn6_,ie), fld, val)
#define Set_str_vn6(ie, lv, p_str, mx_sz)	Set_str			(Paste(vn6_,ie), lv, p_str, mx_sz)
#define Set_mem_vn6(ie, lv, p_mem, sz)		Set_mem			(Paste(vn6_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_vn6(pr,ie)	Set_to_next_ie_instance (Paste(vn6_,pr), Paste (vn6_, ie))
#define Get_remaining_ie_instance_nb_vn6(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(vn6_,pr), Paste (vn6_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_vn6	ns_offset_t vn6_message_header;
#else
#	define Message_header_offset_vn6
#endif

#define Set_ns_offset_tsp_vn6(pr,ie)			Set_ns_offset_tsp	(Paste(vn6_,pr),Paste(vn6_,ie))
#define Set_mem_eob_vn6(ie,lv,p_mem,sz)		Set_mem_eob		(Paste(vn6_,ie), lv, p_mem, sz)

/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ/IN */

struct off_ns_vn6_te_alert_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_chan_id;				/* channel ID */
	ns_offset_t vn6_facility;				/* facility */
	ns_offset_t vn6_progress_ind;			/* progress indicator */
	ns_offset_t vn6_display;				/* display */
	ns_offset_t vn6_uui;					/* user to user information */
	ns_offset_t vn6_pcs_user;				/* pcs to user information */
	ns_offset_t vn6_user_pcs;				/* user to pcs information */
};

typedef struct off_ns_vn6_te_alert_in		off_ns_vn6_alert_rq;
typedef struct off_ns_vn6_te_alert_in		off_ns_vn6_alert_in;

		/* NS_CALL_PROC_RQ/IN */

struct off_ns_vn6_te_call_proc_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_chan_id;				/* channel ID */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn6_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn6_progress_ind;			/* progress indicator */
	ns_offset_t vn6_display;				/* display */
};

typedef struct off_ns_vn6_te_call_proc_in	off_ns_vn6_call_proc_rq;
typedef struct off_ns_vn6_te_call_proc_in	off_ns_vn6_call_proc_in;

		/* NS_CONN_RQ/IN */

struct off_ns_vn6_te_conn_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_sending_complete;		/* sending complete */
	ns_offset_t vn6_bc;						/* bearer capability */
	ns_offset_t vn6_chan_id;				/* channel ID */
	ns_offset_t vn6_facility;				/* facility */
	ns_offset_t vn6_progress_ind;			/* progress indicator */
#if NS_SPF_FACILITY == ON
	ns_offset_t vn6_spf_fac;				/* network specific facility */
#endif
	ns_offset_t vn6_display;				/* display */
	ns_offset_t vn6_keypad;					/* keypad */
	ns_offset_t vn6_calling_nb;				/* calling number (from network) */
	ns_offset_t vn6_calling_sub_add;		/* calling subaddress */
	ns_offset_t vn6_called_nb;				/* called number */
	ns_offset_t vn6_called_sub_add;			/* called subaddress */
	ns_offset_t vn6_llc;					/* low layer capability */
	ns_offset_t vn6_hlc;					/* high layer compatibility */
	ns_offset_t vn6_uui;					/* user to user information */
	ns_offset_t vn6_redir_nb;               /* redirecting number */
	ns_offset_t vn6_pcs_user;				/* pcs to user information */
	ns_offset_t vn6_user_pcs;				/* user to pcs information */
};

typedef struct off_ns_vn6_te_conn_in		off_ns_vn6_conn_rq;
typedef struct off_ns_vn6_te_conn_in		off_ns_vn6_conn_in;

		/* NS_CONN_RS/CO */

struct off_ns_vn6_te_conn_co {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_chan_id;				/* channel ID */
	ns_offset_t vn6_facility;				/* facility */
	ns_offset_t vn6_progress_ind;			/* progress indicator */
	ns_offset_t vn6_display;				/* display */
	ns_offset_t vn6_date_time;				/* date and time */
	ns_offset_t vn6_llc;					/* low layer capability */
	ns_offset_t vn6_user_fac;				/* user to user facility */
	ns_offset_t vn6_uui;					/* user to user information */
	ns_offset_t vn6_pcs_user;				/* pcs to user information */
	ns_offset_t vn6_user_pcs;				/* user to pcs information */
	ns_offset_t vn6_advice_charge_5;		/* advice of charge (codeset 5) */
	ns_offset_t vn6_advice_charge;			/* advice of charge */
};

typedef struct off_ns_vn6_te_conn_co		off_ns_vn6_conn_rs;
typedef struct off_ns_vn6_te_conn_co		off_ns_vn6_conn_co;

		/* NS_PROGRESS_RQ_IN */

struct off_ns_vn6_te_progress_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_cause;					/* cause */
	ns_offset_t vn6_progress_ind;			/* progress indicator */
	ns_offset_t vn6_display;				/* display */
	ns_offset_t vn6_uui;					/* user to user information */
	ns_offset_t vn6_pcs_user;				/* pcs to user information */
	ns_offset_t vn6_user_pcs;				/* user to pcs information */
};

typedef struct off_ns_vn6_te_progress_in	off_ns_vn6_progress_rq;
typedef struct off_ns_vn6_te_progress_in	off_ns_vn6_progress_in;

		/* NS_SETUP_ACK_RQ/IN */

struct off_ns_vn6_te_setup_ack_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_chan_id;				/* channel ID */
	ns_offset_t vn6_progress_ind;			/* progress indicator */
	ns_offset_t vn6_display;				/* display */
};

typedef struct off_ns_vn6_te_setup_ack_in	off_ns_vn6_setup_ack_rq;
typedef struct off_ns_vn6_te_setup_ack_in	off_ns_vn6_setup_ack_in;

/*===============    CALL  INFORMATION  PHASE  MESSAGES    ====================*/

		/* NS_RESUME_RQ/IN */

struct off_ns_vn6_te_resume_rq {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_call_id;				/* call identity */
};

typedef struct off_ns_vn6_te_resume_rq		off_ns_vn6_resume_in;
typedef struct off_ns_vn6_te_resume_rq		off_ns_vn6_resume_rq;

		/* NS_RESUME_RS/CO */

struct off_ns_vn6_te_resume_co {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_chan_id;				/* channel ID */
	ns_offset_t vn6_cause;					/* cause */
	ns_offset_t vn6_display;				/* display */
};

typedef struct off_ns_vn6_te_resume_co		off_ns_vn6_resume_rs;
typedef struct off_ns_vn6_te_resume_co		off_ns_vn6_resume_co;

		/* NS_SUSPEND_RQ/IN */

struct off_ns_vn6_te_suspend_rq {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_call_id;				/* call identity */
};

typedef struct off_ns_vn6_te_suspend_rq		off_ns_vn6_suspend_rq;
typedef struct off_ns_vn6_te_suspend_rq		off_ns_vn6_suspend_in;

		/* NS_SUSPEND_RS/CO */

struct off_ns_vn6_te_suspend_co {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_cause;					/* cause */
	ns_offset_t vn6_display;				/* display */
};

typedef struct off_ns_vn6_te_suspend_co		off_ns_vn6_suspend_co;
typedef struct off_ns_vn6_te_suspend_co		off_ns_vn6_suspend_rs;

		/* NS_USER_INFO_RQ/IN */

struct off_ns_vn6_te_user_info_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_more_data;				/* more data */
	ns_offset_t vn6_user_fac;				/* user to user facility */
	ns_offset_t vn6_uui;					/* user to user information */
};

typedef struct off_ns_vn6_te_user_info_in	off_ns_vn6_user_info_rq;
typedef struct off_ns_vn6_te_user_info_in	off_ns_vn6_user_info_in;

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ/IN */

struct off_ns_vn6_te_clear_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_cause;					/* cause */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn6_spf_fac;			/* network specific facility */
		ns_offset_t vn6_called_nb;			/* called number */
		ns_offset_t vn6_called_sub_add;		/* called sub-address */
#	endif

	ns_offset_t vn6_facility;				/* facility */
	ns_offset_t vn6_progress_ind;			/* progress indicator */
	ns_offset_t vn6_display;				/* display */
	ns_offset_t vn6_user_fac;				/* user to user facility */
	ns_offset_t vn6_uui;					/* user to user information */
	ns_offset_t vn6_pcs_user;				/* pcs to user information */
	ns_offset_t vn6_user_pcs;				/* user to pcs information */
	ns_offset_t vn6_advice_charge_5;		/* advice of charge (codeset 5) */
	ns_offset_t vn6_advice_charge;			/* advice of charge */
};

typedef struct off_ns_vn6_te_clear_in		off_ns_vn6_clear_rq;
typedef struct off_ns_vn6_te_clear_in		off_ns_vn6_clear_in;

		/* NS_CLEAR_RS/CO */

struct off_ns_vn6_te_clear_co {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_cause;					/* cause */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn6_spf_fac;			/* network specific facility */
		ns_offset_t vn6_called_nb;			/* called number */
		ns_offset_t vn6_called_sub_add;		/* called sub-address */
#	endif

	ns_offset_t vn6_facility;				/* facility */
	ns_offset_t vn6_display;				/* display */
	ns_offset_t vn6_uui;					/* user to user information */
	ns_offset_t vn6_pcs_user;				/* pcs to user information */
	ns_offset_t vn6_user_pcs;				/* user to pcs information */
	ns_offset_t vn6_advice_charge_5;		/* advice of charge (codeset 5) */
	ns_offset_t vn6_advice_charge;			/* advice of charge */
};

typedef struct off_ns_vn6_te_clear_co		off_ns_vn6_clear_rs;
typedef struct off_ns_vn6_te_clear_co		off_ns_vn6_clear_co;

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/


		/* NS_CONGEST_CONTROL_RQ/IN */

struct off_ns_vn6_te_con_con_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_congest_level;			/* congestion level */
	ns_offset_t vn6_cause;					/* cause */
	ns_offset_t vn6_display;				/* display */
};

typedef struct off_ns_vn6_te_con_con_in		off_ns_vn6_con_con_rq;
typedef struct off_ns_vn6_te_con_con_in		off_ns_vn6_con_con_in;

		/* NS_INFO_RQ/IN */

struct off_ns_vn6_te_info_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_sending_complete;		/* sending complete */
#	if NS_SPF_FACILITY == ON
		ns_offset_t vn6_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn6_cause;					/* cause */
	ns_offset_t vn6_display;				/* display */
	ns_offset_t vn6_keypad;					/* keypad */
	ns_offset_t vn6_called_nb;				/* called number */
	ns_offset_t vn6_advice_charge_5;		/* advice of charge (codeset 5) */
	ns_offset_t vn6_advice_charge;			/* advice of charge */
};

typedef struct off_ns_vn6_te_info_in		off_ns_vn6_info_rq;
typedef struct off_ns_vn6_te_info_in		off_ns_vn6_info_in;

#if NS_SPF_FACILITY == ON

			/* NS_SPF_FACILITY_RQ/IN/RS/CO */

	struct off_ns_vn6_te_spf_facility_co {
		Message_header_offset_vn6			/* message header parameters */
		ns_offset_t vn6_facility;			/* facility */
		ns_offset_t vn6_cause;				/* cause */
		ns_offset_t vn6_display;			/* display */
		ns_offset_t vn6_spf_fac;			/* specific facility */
		ns_offset_t vn6_pcs_user;			/* pcs to user information */
		ns_offset_t vn6_user_pcs;			/* user to pcs information */
	};

	typedef struct off_ns_vn6_te_spf_facility_co	off_ns_vn6_spf_facility_rq;
	typedef struct off_ns_vn6_te_spf_facility_co	off_ns_vn6_spf_facility_in;
	typedef struct off_ns_vn6_te_spf_facility_co	off_ns_vn6_spf_facility_rs;
	typedef struct off_ns_vn6_te_spf_facility_co	off_ns_vn6_spf_facility_co;

			/* NS_SPF_REGISTRATION_RQ/IN/RS/CO */

	struct off_ns_vn6_te_spf_reg_co {
		Message_header_offset_vn6			/* message header parameters */
		ns_offset_t vn6_cause;				/* cause */
		ns_offset_t vn6_display;			/* display */
		ns_offset_t vn6_spf_fac;			/* network specific facility */
	};

	typedef struct off_ns_vn6_te_spf_reg_co off_ns_vn6_spf_reg_rq;
	typedef struct off_ns_vn6_te_spf_reg_co off_ns_vn6_spf_reg_in;
	typedef struct off_ns_vn6_te_spf_reg_co off_ns_vn6_spf_reg_rs;
	typedef struct off_ns_vn6_te_spf_reg_co off_ns_vn6_spf_reg_co;

#endif
		/* NS_NOTIFY_RQ/IN */

struct off_ns_vn6_te_notify_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_notif_ind;				/* notify indicator */
	ns_offset_t vn6_display;				/* display */
};

typedef struct off_ns_vn6_te_notify_in		off_ns_vn6_notify_rq;
typedef struct off_ns_vn6_te_notify_in		off_ns_vn6_notify_in;

		/* NS_STATUS_ENQ_RQ/IN */

struct off_ns_vn6_te_status_enq_rq {
	Message_header_offset_vn6				/* message header parameters */

#	if MESSAGE_HEADER_IE != ON
		ns_offset_t ie_nil;					/* or no IE */
#	endif

};

typedef struct off_ns_vn6_te_status_enq_rq	off_ns_vn6_status_enq_rq;
typedef struct off_ns_vn6_te_status_enq_rq	off_ns_vn6_status_enq_in;

		/* NS_RESTART_RQ/IN/RS/CO */

struct off_ns_vn6_te_restart_in {
	Message_header_offset_vn6				/* message header parameters */
	ns_offset_t vn6_chan_id;				/* channel identifier */
	ns_offset_t vn6_display;				/* display */
	ns_offset_t vn6_restart_ind;			/* restart indicator */
};

typedef struct off_ns_vn6_te_restart_in		off_ns_vn6_restart_rq;
typedef struct off_ns_vn6_te_restart_in		off_ns_vn6_restart_in;

typedef struct off_ns_vn6_te_restart_in		off_ns_vn6_restart_rs;
typedef struct off_ns_vn6_te_restart_in		off_ns_vn6_restart_co;


			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*                                              */
			/*	Type definitions for NT side point of view  */
			/*                                              */
			/*  (these definitions are here only for        */
			/*  compatibility with older versions because   */
			/*  the description of the messages are now     */
			/*  IDENTICAL for TE and NT sides).             */
			/*                                              */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/


typedef struct off_ns_vn6_te_alert_in		off_ns_vn6_net_alert_in;
typedef struct off_ns_vn6_te_alert_in		off_ns_vn6_net_alert_rq;

typedef struct off_ns_vn6_te_call_proc_in	off_ns_vn6_net_call_proc_in;
typedef struct off_ns_vn6_te_call_proc_in	off_ns_vn6_net_call_proc_rq;

typedef struct off_ns_vn6_te_conn_in		off_ns_vn6_net_conn_in;
typedef struct off_ns_vn6_te_conn_in		off_ns_vn6_net_conn_rq;
typedef struct off_ns_vn6_te_conn_co		off_ns_vn6_net_conn_co;
typedef struct off_ns_vn6_te_conn_co		off_ns_vn6_net_conn_rs;

typedef struct off_ns_vn6_te_progress_in	off_ns_vn6_net_progress_in;
typedef struct off_ns_vn6_te_progress_in	off_ns_vn6_net_progress_rq;

typedef struct off_ns_vn6_te_setup_ack_in	off_ns_vn6_net_setup_ack_in;
typedef struct off_ns_vn6_te_setup_ack_in	off_ns_vn6_net_setup_ack_rq;

typedef struct off_ns_vn6_te_resume_rq		off_ns_vn6_net_resume_rq;
typedef struct off_ns_vn6_te_resume_rq		off_ns_vn6_net_resume_in;
typedef struct off_ns_vn6_te_resume_co		off_ns_vn6_net_resume_co;
typedef struct off_ns_vn6_te_resume_co		off_ns_vn6_net_resume_rs;

typedef struct off_ns_vn6_te_suspend_rq		off_ns_vn6_net_suspend_in;
typedef struct off_ns_vn6_te_suspend_rq		off_ns_vn6_net_suspend_rq;
typedef struct off_ns_vn6_te_suspend_co		off_ns_vn6_net_suspend_rs;
typedef struct off_ns_vn6_te_suspend_co		off_ns_vn6_net_suspend_co;

typedef struct off_ns_vn6_te_user_info_in	off_ns_vn6_net_user_info_in;
typedef struct off_ns_vn6_te_user_info_in	off_ns_vn6_net_user_info_rq;

typedef struct off_ns_vn6_te_clear_in		off_ns_vn6_net_clear_in;
typedef struct off_ns_vn6_te_clear_in		off_ns_vn6_net_clear_rq;
typedef struct off_ns_vn6_te_clear_co		off_ns_vn6_net_clear_co;
typedef struct off_ns_vn6_te_clear_co		off_ns_vn6_net_clear_rs;

typedef struct off_ns_vn6_te_con_con_in		off_ns_vn6_net_con_con_in;
typedef struct off_ns_vn6_te_con_con_in		off_ns_vn6_net_con_con_rq;

typedef struct off_ns_vn6_te_info_in		off_ns_vn6_net_info_in;
typedef struct off_ns_vn6_te_info_in		off_ns_vn6_net_info_rq;

typedef struct off_ns_vn6_te_notify_in		off_ns_vn6_net_notify_in;
typedef struct off_ns_vn6_te_notify_in		off_ns_vn6_net_notify_rq;

typedef struct off_ns_vn6_te_status_enq_rq	off_ns_vn6_net_status_enq_in;
typedef struct off_ns_vn6_te_status_enq_rq	off_ns_vn6_net_status_enq_rq;

#if NS_SPF_FACILITY == ON

	typedef struct off_ns_vn6_te_spf_facility_co	off_ns_vn6_net_spf_facility_in;
	typedef struct off_ns_vn6_te_spf_facility_co	off_ns_vn6_net_spf_facility_rs;

	typedef struct off_ns_vn6_te_spf_reg_co 		off_ns_vn6_net_spf_reg_in;
	typedef struct off_ns_vn6_te_spf_reg_co 		off_ns_vn6_net_spf_reg_rs;

#endif

		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/

		/* Advice charge (ADVICE_CHARGE) */

struct val_ns_vn6_advice_charge {
	Next_instance_offset
	ie_val		coding_std;							/* coding standard */
	ie_val		cept_std;							/* CEPT standard */
	ie_val		charge_type;						/* indication type */
	ie_val		charge_period;						/* charging period */
	ie_val		charge_period_m;					/* charging period multiplier */
	ie_array	value[VN6_MX_SZ_ADVICE_CHARGE+1];	/* value */
};

		/* Advice charge (ADVICE_CHARGE) in codeset 5 */

#define val_ns_vn6_advice_charge_5		val_ns_vn6_advice_charge

		/* Bearer Capability (BC) */

struct val_ns_vn6_bc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* destination rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock (NIC) on Transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock (NIC) on Reception (Rx) */
	ie_val		fc_tx;					/* flow control on Transmission (Tx) */
	ie_val		fc_rx;					/* flow control on Reception (Rx) */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits */
	ie_val		parity;					/* number of parity bit */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user information layer 2 protocol */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */

};

		/* Call IDentification (CALL_ID) */

struct val_ns_vn6_call_id {
	Next_instance_offset
	ie_array 	value[VN6_MX_SZ_CALL_ID+2];	/* call identity */
};

		/* Called party number (CALLED_NB) */

struct val_ns_vn6_called_nb {
	Next_instance_offset
	ie_val   	nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_array 	nb[VN6_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_vn6_called_sub_add {
	Next_instance_offset
	ie_val		sub_add_type;			/* called subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[VN6_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_vn6_calling_nb {
	Next_instance_offset
	ie_val  	nb_type;				/* numbering type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[VN6_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_vn6_calling_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* calling subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[VN6_MX_SZ_CALLING_SUB_ADD+2];	/* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_vn6_cause {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		cause_loc;				/* location */
	ie_val		recommend;				/* recommendation */
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
	ie_array	cause_diag[VN6_MX_SZ_CAUSE_DIAG+2];	/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_vn6_chan_id {
	Next_instance_offset
	ie_val 		int_type;				/* interface type */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val		d_chan;					/* D-channel indicator */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val		coding_std;				/* coding standard */
	ie_val		chan_type;				/* channel type */
	ie_array	chan_nb[VN6_MX_SZ_CHAN_ID+2];	/* channel number */
};

		/* Congestion level (CONGEST_LEVEL) */

struct val_ns_vn6_congest_level {
	Next_instance_offset
	ie_val		congest_level;				/* congestion level */
};

		/* Date/Time (DATE_TIME) */

struct val_ns_vn6_date_time {
	Next_instance_offset
	ie_val		year;
	ie_val		month;
	ie_val		day;
	ie_val		hour;
	ie_val		minute;
	ie_val		second;		/* optional */
};

		/* Display */

struct val_ns_vn6_display {
	Next_instance_offset
	ie_array 	text[VN6_MX_SZ_DISPLAY+2];		/* display information */
};

		/* Escape for extension (ESCAPE) */

struct val_ns_vn6_escape {
	Next_instance_offset
	ie_val		ie_id;						/* information element identifier */
	ie_array	p_ie[VN6_MX_SZ_ESCAPE+2];			/* information element */
};

		/* Facility (FACILITY) */

struct val_ns_vn6_facility {
	Next_instance_offset
	ie_val		comp_tag;					/* component tag */
	ie_val		service;					/* service */
	ie_val		pref;						/* preferred */
	ie_val		error_val;					/* error value */
	ie_array	invoke_id[VN6_MX_SZ_FACILITY+2];	/* invoke id */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_vn6_hlc {
	Next_instance_offset
	ie_val		coding_std;					/* coding standard */
	ie_val		interpretation;				/* hlc interpretation */
	ie_val		teleservice;				/* high layer characteristics identification */
};

		/* Keypad */

struct val_ns_vn6_keypad {
	Next_instance_offset
	ie_array 	text[VN6_MX_SZ_KEYPAD+2];			/* keypad information */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_vn6_llc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		out_band_neg;			/* out-band negotiation */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* destination rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock on transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock on reception (Rx) */
	ie_val		fc_tx;					/* flow control on transmission (Tx) */
	ie_val		fc_rx;					/* flow control on reception (Rx) */
	ie_val		hdr;					/* rate adaption header included or not */
	ie_val		multi_frame;			/* multiple frame establishement support in DL */
	ie_val		op_mode;				/* mode of operation */
	ie_val		lli_negot;				/* logical link identifier negotiation */
	ie_val		assign;					/* assignor/assignee */
	ie_val		band_negot;				/* in-band/out-band negotiation */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits excluding parity if present */
	ie_val		parity;					/* parity information */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user layer 2 protocol information */
	ie_val		option_2;				/* optional layer 2 protocol information */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
	ie_val		option_3;				/* optional layer 3 protocol information */
};

		/* Notification indicator (NOTIF_IND) */

struct val_ns_vn6_notif_ind {
	Next_instance_offset
	ie_val		notif_descr;			/* notification description*/
};


		/* PCS-to-USER information (PCS_USER) */

struct val_ns_vn6_pcs_user {
	Next_instance_offset
	ie_val		protocol_discr;				/* protocol discriminator */
	ie_array	text[VN6_MX_SZ_PCS_USER+1];	/* user information */
};

		/* Progress indicator (PROGRESS_IND) */

struct val_ns_vn6_progress_ind {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		progress_loc;			/* location */
	ie_val		progress_descr;			/* progress description */
};

		/* Redirecting number (REDIR_NB) */

struct val_ns_vn6_redir_nb {
	Next_instance_offset
	ie_val      nb_type;				/* type of number */
	ie_val      plan_id;				/* numbering plan */
	ie_val      pres;					/* presentation */
	ie_val		screen_ind;				/* screening indicators */
	ie_val      reason;         	    /* reason for redirection */
	ie_array    nb[VN6_MX_SZ_REDIR_NB+2];   /* number digits */
};
		/* Restart indicator (RESTART_IND) */

struct val_ns_vn6_restart_ind {
	Next_instance_offset
	ie_val		restart_class;			/* class */
};

		/* Signal (SIGNAL) */

struct val_ns_vn6_signal {
	Next_instance_offset
	ie_val		signal_val;				/* signal value */
};

#if NS_SPF_FACILITY == ON

		/* Network Specific Facility (SPF_FAC) */

struct val_ns_vn6_spf_fac {
	Next_instance_offset
	ie_val 		action;					/* REQUEST : activate, clear or enquiry	INDICATION : transmission, acknowledgment, reject */
	ie_val 		code;					/* facility code */
	uchar		pad[VN6_SPF_FAC_PAD_SIZE];
	long 		charging;				/* charging value */
	ie_array 	nb[VN6_MX_SZ_CALLED_NB+2];/* called number */
};

#endif

		/* Transit network selection (TRANSIT_NET_SEL) */

struct val_ns_vn6_transit_net_sel {
	Next_instance_offset
	ie_val		net_id_type;			/* type of network identification */
	ie_val		net_id_plan;			/* network identification plan */
	ie_array	net_id[VN6_MX_SZ_TRANSIT_NET_SEL+2];	/* address of network identification information */
};

		/* User-to-user information (UUI) */

struct val_ns_vn6_uui {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array	text[VN6_MX_SZ_UUI+2];		/* user information */
};

		/* User-to-PCS information (USER_PCS) */

struct val_ns_vn6_user_pcs {
	Next_instance_offset
	ie_val		protocol_discr;				/* protocol discriminator */
	ie_array	text[VN6_MX_SZ_USER_PCS+1];	/* user information */
};

#if NS_IE_TSP_OUT == ON

			/* Definitions for compilation purpose only */

	struct val_ns_vn6_more_data {
		Next_instance_offset
		ie_val	unused;
	};


	struct val_ns_vn6_sending_complete {
		Next_instance_offset
		ie_val	unused;
	};


#endif

/*=========================================================================*/

							/* Information Elements (IE) */

			/*
			   Isdn_vn6_store_advice_charge : store the advice of charge information
								   element :
			   Isdn_vn6_store_advice_charg_5 : store the advice of charge information
								   element in codeset 5 :

					INPUT :
						- pr				= primitive ID,
						- coding_std		= coding standard
						- cept_std			= CEPT standard
						- charge_type		= indication type
						- charge_period		= charging period
						- charge_period_m	= charging period multiplier
						- value[VN6_MX_SZ_ADVICE_CHARGE+1];		= value
			*/

#define Isdn_vn6_store_advice_charge(pr, coding, cept, type, p ,p_m, val, sz)	\
				Set_offset_vn6	(pr,	advice_charge);							\
				Set_val_vn6		(advice_charge,	coding_std,		coding);		\
				Set_val_vn6		(advice_charge,	cept_std,		cept);			\
				Set_val_vn6		(advice_charge,	charge_type,	type);			\
				Set_val_vn6		(advice_charge,	charge_period,	p);				\
				Set_val_vn6		(advice_charge,	charge_period_m,p_m);			\
				Set_mem_vn6		(advice_charge,	value, val, sz)

#define Isdn_vn6_store_advice_charg_5(pr, coding, cept, type, p ,p_m, val, sz)	\
				Set_offset_vn6	(pr,	advice_charge_5);						\
				Set_val_vn6		(advice_charge_5,	coding_std,		coding);	\
				Set_val_vn6		(advice_charge_5,	cept_std,		cept);		\
				Set_val_vn6		(advice_charge_5,	charge_type,	type);		\
				Set_val_vn6		(advice_charge_5,	charge_period,	p);			\
				Set_val_vn6		(advice_charge_5,	charge_period_m,p_m);		\
				Set_mem_vn6		(advice_charge_5,	value, val, sz)

			/*
			   Isdn_vn6_store_bc : store the bearer capability information
								   element :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_vn6_store_bc(pr, trf_cap_, trf_mode_, trf_rate_, structure_, dest_rate_, protocol_id_1_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
				Set_offset_vn6	(pr,	bc);										\
				Set_val_vn6		(bc,	coding_std,		CODING_STD_CCITT);			\
				Set_val_vn6		(bc,	trf_cap,		trf_cap_);					\
				Set_val_vn6		(bc,	trf_mode,		trf_mode_);					\
				Set_val_vn6		(bc,	trf_rate,		trf_rate_);					\
				Set_val_vn6		(bc,	structure,		structure_);				\
				Set_val_vn6		(bc,	dest_rate,		dest_rate_);				\
				Set_val_vn6		(bc,	protocol_id_1,	protocol_id_1_);			\
				Set_val_vn6		(bc,	syn_asyn,		syn_asyn_);					\
				Set_val_vn6		(bc,	negotiation,	negotiation_);				\
				Set_val_vn6		(bc,	user_rate,		user_rate_);				\
				Set_val_vn6		(bc,	inter_rate,		inter_rate_);				\
				Set_val_vn6		(bc,	nic_tx,			nic_tx_);					\
				Set_val_vn6		(bc,	nic_rx,			nic_rx_);					\
				Set_val_vn6		(bc,	fc_tx,			fc_tx_);					\
				Set_val_vn6		(bc,	fc_rx,			fc_rx_);					\
				Set_val_vn6		(bc,	stop_bit,		stop_bit_);					\
				Set_val_vn6		(bc,	data_bit,		data_bit_);					\
				Set_val_vn6		(bc,	parity,			parity_);					\
				Set_val_vn6		(bc,	duplex,			duplex_);					\
				Set_val_vn6		(bc,	modem,			modem_);					\
				Set_val_vn6		(bc,	protocol_id_2,	protocol_id_2_);			\
				Set_val_vn6		(bc,	protocol_id_3,	protocol_id_3_);			\
				Set_next_ie_vn6	(bc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_vn6_store_bc_V110 : store the bearer capability information
										element for V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_vn6_store_bc_V110(pr, trf_cap_, trf_mode_,	trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_,	user_rate_,	inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_vn6_store_bc	(pr,			trf_cap_,		trf_mode_,			\
							trf_rate_,		structure_,		dest_rate_,			\
							PROTOCOL_ID_1_V110,syn_asyn_,	negotiation_,		\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		fc_tx_,			fc_rx_,				\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							protocol_id_3_)

			/*
			   Isdn_vn6_store_bc_not_V110 : store the bearer capability information
											element for non V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= protocol id 1
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_vn6_store_bc_not_V110(pr, trf_cap_, trf_mode_,	trf_rate_, structure_, dest_rate_, protocol_id_1_, protocol_id_2_, protocol_id_3_) \
		Isdn_vn6_store_bc	(pr,			trf_cap_,		trf_mode_,			\
							trf_rate_,		structure_,		dest_rate_,			\
							protocol_id_1_,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,       \
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	protocol_id_2_,		\
							protocol_id_3_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_called_nb : called number IE

					INPUT :
						- pr				= primitive ID,
						- nb_type_			= numbering type,
						- plan_id_			= numbering plan,
						- nb_				= address of the literal string.
			*/

#define Isdn_vn6_store_called_nb(pr, nb_type_, plan_id_, nb_)						\
		Set_offset_vn6	(pr,		called_nb);										\
		Set_val_vn6		(called_nb,	nb_type,	nb_type_);							\
		Set_val_vn6		(called_nb,	plan_id,	plan_id_);							\
		Set_str_vn6		(called_nb,	nb,			nb_,		VN6_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_called_sub_add   : called sub-address IE
				Isdn_vn6_store_called_sub_add_u : called sub-address IE
												  for SUB_ADD_USER type.

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even_ind_	= odd/even indicator,
						- sub_add_		= address of the literal string.
						- sz_           = size of the block for SUB_ADD_USER.

			*/

#define Isdn_vn6_store_called_sub_add(pr, sub_add_type_, odd_even_ind_,	sub_add_)	\
		Set_offset_vn6	(pr,				called_sub_add);						\
		Set_val_vn6		(called_sub_add,	sub_add_type,	sub_add_type_);			\
		Set_val_vn6		(called_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_str_vn6 	(called_sub_add,	sub_add,		sub_add_, VN6_MX_SZ_CALLED_SUB_ADD+1)

#define Isdn_vn6_store_called_sub_add_u(pr, odd_even_ind_,	sub_add_, sz_)			\
		Set_offset_vn6	(pr,				called_sub_add);						\
		Set_val_vn6		(called_sub_add,	sub_add_type,	SUB_ADD_USER);			\
		Set_val_vn6		(called_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_mem_vn6 	(called_sub_add,	sub_add,		sub_add_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nb_type_		   	= numbering type,
						- plan_id_			= numbering plan ID,
						- pres_				= presentation indicator,
						- screen_ind_    	= screening indicator,
						- nb_				= pointer on the calling number literal string.
			*/

#define Isdn_vn6_store_calling_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)	\
		Set_offset_vn6	(pr,			calling_nb);								\
		Set_val_vn6		(calling_nb,	nb_type, 		nb_type_);					\
		Set_val_vn6		(calling_nb,	plan_id, 		plan_id_);					\
		Set_val_vn6		(calling_nb,	pres,			pres_);						\
		Set_val_vn6		(calling_nb,	screen_ind, 	screen_ind_);				\
		Set_str_vn6		(calling_nb,	nb, 			nb_, VN6_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_vn6_calling_sub_add : calling sub-address IE

						INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even_ind_	= odd/even indicator,
						- sub_add_		= address of the literal string.


			*/

#define Isdn_vn6_store_calling_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
		Set_offset_vn6	(pr,				calling_sub_add);						\
		Set_val_vn6		(calling_sub_add,	sub_add_type, 	sub_add_type_);			\
		Set_val_vn6		(calling_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_str_vn6		(calling_sub_add,	sub_add,		sub_add_, VN6_MX_SZ_CALLING_SUB_ADD+1)

#define Isdn_vn6_store_calling_sub_add_u(pr, odd_even_ind_, sub_add_, sz_) \
		Set_offset_vn6	(pr,				calling_sub_add);						\
		Set_val_vn6		(calling_sub_add,	sub_add_type, 	SUB_ADD_USER);			\
		Set_val_vn6		(calling_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_mem_vn6		(calling_sub_add,	sub_add,		sub_add_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_call_id : call ID

					INPUT :
						- pr	= primitive ID,
						- value_= call ID.

			*/


#define Isdn_vn6_store_call_id(pr, value_)										\
		Set_offset_vn6	(pr,		call_id);										\
		Set_str_vn6		(call_id,	value,	value_,	VN6_MX_SZ_CALL_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_cause : cause IE

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- cause_loc_	= cause location,
						- recommend_	= recommendation,
						- cause_class_	= cause class,
						- cause_val_	= cause value,
						- cause_diag_	= cause diagnostic.

			*/

#define Isdn_vn6_store_cause(pr, coding_std_, cause_loc_, recommend_, cause_class_, cause_val_, cause_diag_) \
		Set_offset_vn6	(pr,	cause);												\
		Set_val_vn6		(cause,	coding_std,	coding_std_);							\
		Set_val_vn6		(cause,	cause_loc,	cause_loc_);							\
		Set_val_vn6		(cause,	recommend,	recommend_);							\
		Set_val_vn6		(cause,	cause_class,cause_class_);							\
		Set_val_vn6		(cause,	cause_val,	cause_val_);							\
		Set_str_vn6		(cause,	cause_diag,	cause_diag_, VN6_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_vn6_store_chan_id_BRI : store channel ID IE

					INPUT :
						- pr 			= primitive ID,
						- pref_excl_	= preferred channel,
						- d_chan_		= D-channel indicator,
						- chan_sel_		= channel selection,
			*/

#define Isdn_vn6_store_chan_id_BRI(pr, pref_excl_, d_chan_, chan_sel_) \
		Set_offset_vn6	(pr,		chan_id);							\
		Set_val_vn6		(chan_id,	int_type,	INT_TYPE_BRI);			\
		Set_val_vn6		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_vn6		(chan_id,	d_chan,		d_chan_);				\
		Set_val_vn6		(chan_id,	chan_sel,	chan_sel_);				\
		Set_str_vn6		(chan_id,	chan_nb,	P_NIL,		1)

			/*
				 Isdn_vn6_store_chan_id_PRI : store channel ID IE

					INPUT :
						- pr 			= primitive ID,
						- pref_excl_	= preferred channel,
						- d_chan_		= D-channel indicator,
						- chan_sel_		= channel selection,
						- coding_std_	= coding standard,
						- chan_type_	= channel type,
						- p_chan_nb_	= channel number.
			*/

#define Isdn_vn6_store_chan_id_PRI(pr, pref_excl_, d_chan_, chan_sel_, coding_std_, chan_type_, p_chan_nb_) \
		Set_offset_vn6	(pr,		chan_id);							\
		Set_val_vn6		(chan_id,	int_type,	INT_TYPE_PRI);			\
		Set_val_vn6		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_vn6		(chan_id,	d_chan,		d_chan_);				\
		Set_val_vn6		(chan_id,	chan_sel,	chan_sel_);				\
		Set_val_vn6		(chan_id,	coding_std,	coding_std_);			\
		Set_val_vn6		(chan_id,	chan_type,	chan_type_);			\
		Set_str_vn6		(chan_id,	chan_nb,	p_chan_nb_,		VN6_MX_SZ_CHAN_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_congest_level: congestion level

					INPUT :
						- pr 			= primitive ID,
						- congest_level_= congestion level.
			*/

#define Isdn_vn6_store_congest_level(pr, congest_level_)				\
		Set_offset_vn6	(pr,			congest_level);						\
		Set_val_vn6		(congest_level,	congest_level,	congest_level_);	\
		Set_next_ie_vn6	(congest_level)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_date_time : date / time

					INPUT :
						- pr= primitive ID,
						- y	= year,
						- mo= month,
						- d = day,
						- h = hour,
						- mi= minute.

				Isdn_vn6_store_date_t_with_se : the same with 1 more argument : second.
			*/

#define Isdn_vn6_store_date_t_with_se(pr, y, mo, d, h, mi, s)						\
		Set_offset_vn6	(pr,		date_time);										\
		Set_val_vn6		(date_time,	year,	y);										\
		Set_val_vn6		(date_time,	month,	mo);									\
		Set_val_vn6		(date_time,	day,	d);										\
		Set_val_vn6		(date_time,	hour,	h);										\
		Set_val_vn6		(date_time,	minute,	mi);									\
		Set_val_vn6		(date_time,	second,	s);										\
		Set_next_ie_vn6	(date_time)

#define Isdn_vn6_store_date_time(pr, y, mo, d, h, mi)							\
			Isdn_vn6_store_date_t_with_se (pr, y, mo, d, h, mi, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_display : display IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_vn6_store_display(pr,	p_text)										\
		Set_offset_vn6	(pr,		display);										\
		Set_str_vn6		(display,	text,	p_text,	VN6_MX_SZ_DISPLAY+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_vn6_store_escape : escape IE

						INPUT :
						- pr			= primitive ID,
						- id			= IE id,
						- p_ie			= address of the IE.


			*/

#define Isdn_vn6_store_escape(pr, ie_id_, p_ie_)								\
		Set_offset_vn6	(pr,		escape);										\
		Set_val_vn6		(escape,	ie_id, 		ie_id_);							\
		Set_str_vn6		(escape,	p_ie,		p_ie_, VN6_MX_SZ_ESCAPE+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_t_facility : transparent facility IE

					INPUT :
						- pr 			= primitive ID,
						- p_info_		= facility string
						- size_			= facility string size
			*/

#define Isdn_vn6_store_t_facility(pr, p_info_, size_) \
		Set_offset_vn6	(pr,		facility);										\
		Set_mem_vn6		(facility,	invoke_id,	p_info_,	size_)

			/*
				Isdn_vn6_store_facility : facility IE

					INPUT :
						- pr 			= primitive ID,
						- comp_tag		= component tag
						- service		= service
						- pref			= preferred
						- error_val		= error value
						- p_invoke_id	= invoke id
			*/

#define Isdn_vn6_store_facility(pr, comp_tag_, service_, pref_, error_val_, p_invoke_id) \
		Set_offset_vn6	(pr,		facility);										\
		Set_val_vn6		(facility,	comp_tag,	comp_tag_);							\
		Set_val_vn6		(facility,	service,	service_);							\
		Set_val_vn6		(facility,	pref,		pref_);								\
		Set_val_vn6		(facility,	error_val,	error_val_);						\
		Set_str_vn6		(facility,	invoke_id,	p_invoke_id,	VN6_MX_SZ_FACILITY+1)

			/*
				Isdn_vn6_store_facility_INVOKE

					INPUT :
						- pr 			= primitive ID,
						- pref			= preferred
						- service		= service
						- invoke_id		= invoke id
			*/

#define Isdn_vn6_store_facility_INVOKE(pr, service_, pref_, p_invoke_id)	\
		Isdn_vn6_store_facility(pr,			FAC_INVOKE,	service_,			\
								pref_,		BYTE_VAL_NIL,p_invoke_id)

			/*
				Isdn_vn6_store_facility_RESULT

					INPUT :
						- pr 			= primitive ID,
						- invoke_id		= invoke id
			*/

#define Isdn_vn6_store_facility_RESULT(pr, p_invoke_id)						\
		Isdn_vn6_store_facility(pr,			FAC_RETURN_RESULT,	BYTE_VAL_NIL,\
								BYTE_VAL_NIL,BYTE_VAL_NIL,		p_invoke_id)

			/*
				Isdn_vn6_store_facility_ERROR

					INPUT :
						- pr 			= primitive ID,
						- error_val		= error value
						- invoke_id		= invoke id
			*/

#define Isdn_vn6_store_facility_ERROR(pr, error_val_, p_invoke_id)			\
		Isdn_vn6_store_facility(pr,			FAC_RETURN_ERROR,	BYTE_VAL_NIL,\
								BYTE_VAL_NIL,error_val_,		p_invoke_id)

/*-------------------------------------------------------------------------*/
			/*
				Isdn_vn6_store_hlc : high layer compatibility IE

					INPUT :
						- pr			= primitive ID,
						- cod			= coding,
						- inter			= interpretation
						- teleservice_	= teleservice.
			*/

#define Isdn_vn6_store_hlc(pr, cod, inter, teleservice_)				\
				Set_offset_vn6	(pr,	hlc);							\
				Set_val_vn6		(hlc,	coding_std,		cod);			\
				Set_val_vn6		(hlc,	interpretation,	inter);			\
				Set_val_vn6		(hlc,	teleservice,	teleservice_);	\
				Set_next_ie_vn6	(hlc)

			/*
				Isdn_vn6_store_hlc_CCITT : high layer compatibility for
										CCITT coding standard

					INPUT :
						- pr		= primitive ID,
						- inter		= interpretation,
						- tele      = teleservice,
			*/

#define Isdn_vn6_store_hlc_CCITT(pr, inter, tele)							\
		Isdn_vn6_store_hlc	(pr, CODING_STD_CCITT, inter, tele)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_vn6_store_keypad(pr,p_text)										\
		Set_offset_vn6	(pr,		keypad);										\
		Set_str_vn6		(keypad,	text,	p_text,	VN6_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_vn6_store_llc : low layer compatibility

			   First definition : in one part :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_vn6_store_llc(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_,	protocol_id_1_,	syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	hdr_, multi_frame_,	op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	option_2_, protocol_id_3_, option_3_) \
		Set_offset_vn6	(pr,	llc);										\
		Set_val_vn6		(llc,	coding_std,		coding_std_);				\
		Set_val_vn6		(llc,	trf_cap,		trf_cap_);					\
		Set_val_vn6		(llc,	out_band_neg,	out_neg);					\
		Set_val_vn6		(llc,	trf_mode,		trf_mode_);					\
		Set_val_vn6		(llc,	trf_rate,		trf_rate_);					\
		Set_val_vn6		(llc,	structure,		structure_);				\
		Set_val_vn6		(llc,	dest_rate,		dest_rate_);				\
		Set_val_vn6		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_vn6		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_vn6		(llc,	negotiation,	negotiation_);				\
		Set_val_vn6		(llc,	user_rate,		user_rate_);				\
		Set_val_vn6		(llc,	inter_rate,		inter_rate_);				\
		Set_val_vn6		(llc,	nic_tx,			nic_tx_);					\
		Set_val_vn6		(llc,	nic_rx,			nic_rx_);					\
		Set_val_vn6		(llc,	fc_tx,			fc_tx_);					\
		Set_val_vn6		(llc,	fc_rx,			fc_rx_);					\
		Set_val_vn6		(llc,	hdr,			hdr_);						\
		Set_val_vn6		(llc,	multi_frame,	multi_frame_);				\
		Set_val_vn6		(llc,	op_mode,		op_mode_);					\
		Set_val_vn6		(llc,	lli_negot,		lli_negot_);				\
		Set_val_vn6		(llc,	assign,			assign_);					\
		Set_val_vn6		(llc,	band_negot,		band_negot_);				\
		Set_val_vn6		(llc,	stop_bit,		stop_bit_);					\
		Set_val_vn6		(llc,	data_bit,		data_bit_);					\
		Set_val_vn6		(llc,	parity,			parity_);					\
		Set_val_vn6		(llc,	duplex,			duplex_);					\
		Set_val_vn6		(llc,	modem,			modem_);					\
		Set_val_vn6		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_vn6		(llc,	option_2,		option_2_);					\
		Set_val_vn6		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_val_vn6		(llc,	option_3,		option_3_);					\
		Set_next_ie_vn6	(llc)



			/*--------------------------------------------*/


			/*
			   Isdn_vn6_store_llc : low layer compatibility

			   Second definition : DIVIDED IN 2 PARTS for compilers which
			   do not accept so many parameters in macros :

					Isdn_vn6_store_llc_1_4 : octet 1 to octet 4 included,

						INPUT :
							- pr			= primitive ID,
							- coding_std_	= coding standard,
							- trf_cap_		= information transfer capability,
							- out_neg		= out band negotiation,
							- trf_mode_		= transfer mode,
							- trf_rate_		= information transfer rate,
							- structure_	= structure,
							- dest_rate_	= destination rate,

					Isdn_vn6_store_llc_5_7 : octet 5 to octet 7 included,

						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_vn6_store_llc_1_4(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_)\
		Set_offset_vn6	(pr,	llc);										\
		Set_val_vn6		(llc,	coding_std,		coding_std_);				\
		Set_val_vn6		(llc,	trf_cap,		trf_cap_);					\
		Set_val_vn6		(llc,	out_band_neg,	out_neg);					\
		Set_val_vn6		(llc,	trf_mode,		trf_mode_);					\
		Set_val_vn6		(llc,	trf_rate,		trf_rate_);					\
		Set_val_vn6		(llc,	structure,		structure_);				\
		Set_val_vn6		(llc,	dest_rate,		dest_rate_)

#define Isdn_vn6_store_llc_5_7(protocol_id_1_,	syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	hdr_, multi_frame_,	op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	option_2_, protocol_id_3_, option_3_) \
		Set_val_vn6		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_vn6		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_vn6		(llc,	negotiation,	negotiation_);				\
		Set_val_vn6		(llc,	user_rate,		user_rate_);				\
		Set_val_vn6		(llc,	inter_rate,		inter_rate_);				\
		Set_val_vn6		(llc,	nic_tx,			nic_tx_);					\
		Set_val_vn6		(llc,	nic_rx,			nic_rx_);					\
		Set_val_vn6		(llc,	fc_tx,			fc_tx_);					\
		Set_val_vn6		(llc,	fc_rx,			fc_rx_);					\
		Set_val_vn6		(llc,	hdr,			hdr_);						\
		Set_val_vn6		(llc,	multi_frame,	multi_frame_);				\
		Set_val_vn6		(llc,	op_mode,		op_mode_);					\
		Set_val_vn6		(llc,	lli_negot,		lli_negot_);				\
		Set_val_vn6		(llc,	assign,			assign_);					\
		Set_val_vn6		(llc,	band_negot,		band_negot_);				\
		Set_val_vn6		(llc,	stop_bit,		stop_bit_);					\
		Set_val_vn6		(llc,	data_bit,		data_bit_);					\
		Set_val_vn6		(llc,	parity,			parity_);					\
		Set_val_vn6		(llc,	duplex,			duplex_);					\
		Set_val_vn6		(llc,	modem,			modem_);					\
		Set_val_vn6		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_vn6		(llc,	option_2,		option_2_);					\
		Set_val_vn6		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_val_vn6		(llc,	option_3,		option_3_);					\
		Set_next_ie_vn6	(llc)


			/*--------------------------------------------*/


			/*
			   Isdn_vn6_store_llc_V110 : low layer compatibility for
											V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_vn6_store_llc_V110(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_vn6_store_llc_1_4(pr,			coding_std_,	trf_cap_,			\
							out_neg,		trf_mode_,		trf_rate_,			\
							structure_,		dest_rate_);						\
		Isdn_vn6_store_llc_5_7(PROTOCOL_ID_1_V110,	syn_asyn_,	negotiation_,	\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		fc_tx_,			fc_rx_,				\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							BYTE_VAL_NIL,	protocol_id_3_,	BYTE_VAL_NIL)


			/*--------------------------------------------*/


			/*
			   Isdn_vn6_store_llc_V120 : low layer compatibility for
											V120 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_vn6_store_llc_V120(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_vn6_store_llc_1_4(pr,			coding_std_,	trf_cap_,			\
							out_neg,		trf_mode_,		trf_rate_,			\
							structure_,		dest_rate_);						\
		Isdn_vn6_store_llc_5_7(PROTOCOL_ID_1_V120,								\
							syn_asyn_,		negotiation_,	user_rate_,			\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	hdr_,				\
							multi_frame_,	op_mode_,		lli_negot_,			\
							assign_,		band_negot_,	stop_bit_,			\
							data_bit_,		parity_,		duplex_,			\
							modem_,			protocol_id_2_, BYTE_VAL_NIL,		\
							protocol_id_3_,	BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_more_data : more data

					INPUT :
						- pr		= primitive ID,

			*/

#define Isdn_vn6_store_more_data(pr) \
		Set_offset_vn6	(pr,		more_data)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_notif_ind : notification indicator

					INPUT :
						- pr	= primitive ID,
						- descr	= description.

			*/

#define Isdn_vn6_store_notif_ind(pr, descr)											\
		Set_offset_vn6	(pr,		notif_ind);										\
		Set_val_vn6		(notif_ind,	notif_descr,	descr);							\
		Set_next_ie_vn6	(notif_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_pcs_user : user to PCS information IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator,
						- p_text 			= address of the user info.
			*/

#define Isdn_vn6_store_pcs_user(pr, protocol_discr_, p_text, sz_)					\
		Set_offset_vn6	(pr,	pcs_user);											\
		Set_val_vn6		(pcs_user,	protocol_discr,	protocol_discr_);				\
		Set_mem_vn6		(pcs_user, 	text,	p_text,	sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_progress_ind : progress indicator

					INPUT :
						- pr				= primitive ID,
						- coding_std_		= coding standard,
						- progress_loc_		= location,
						- progress_descr_	= description.

			*/

#define Isdn_vn6_store_progress_ind(pr, coding_std_, progress_loc_, progress_descr_) \
		Set_offset_vn6	(pr,			progress_ind);								\
		Set_val_vn6		(progress_ind,	coding_std,		coding_std_);				\
		Set_val_vn6		(progress_ind,	progress_loc,	progress_loc_);				\
		Set_val_vn6		(progress_ind,	progress_descr,	progress_descr_);			\
		Set_next_ie_vn6	(progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_redir_nb : store redir number IE

					INPUT :
						- pr                = primitive ID,
						- nb_type_     		= type of number,
						- plan_id_     		= numbering plan,
						- screen_ind_  		= screening indicators,
						- pres_  			= presentation,
						- reason			= reason
						- nb_               = pointer on the redir number literal string.
			*/

#define Isdn_vn6_store_redir_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, reason_, nb_)  \
		Set_offset_vn6  (pr,          redir_nb);                    \
		Set_val_vn6     (redir_nb,    nb_type,   	nb_type_);  	\
		Set_val_vn6     (redir_nb,    plan_id,		plan_id_);  	\
		Set_val_vn6     (redir_nb,    pres,			pres_);     	\
		Set_val_vn6     (redir_nb,    screen_ind,	screen_ind_);	\
		Set_val_vn6     (redir_nb,    reason,		reason_);		\
		Set_str_vn6     (redir_nb,    nb,           nb_, VN6_MX_SZ_REDIR_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_vn6_store_restart_ind(pr, class_)									\
		Set_offset_vn6	(pr,			restart_ind);								\
		Set_val_vn6		(restart_ind,	restart_class,	class_);					\
		Set_next_ie_vn6	(restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_sending_complete : sending complete

					INPUT :
						- pr		= primitive ID,

			*/

#define Isdn_vn6_store_sending_complete(pr)	\
		Set_offset_vn6	(pr,				sending_complete)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_signal : signal message

					INPUT :
						- pr			= primitive ID,
						- signal_val	= signal value.

			*/

#define Isdn_vn6_store_signal(pr, signal_val_)									\
		Set_offset_vn6	(pr,		signal);										\
		Set_val_vn6		(signal,	signal_val,	signal_val_);						\
		Set_next_ie_vn6	(signal)

/*-------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

			/*
				Isdn_vn6_store_spf_fac : network specific facility

					INPUT :
						- pr 			= primitive ID,
						- action_		= action,
						- code_			= code,
						- p_string		= network-specific facility called_nb
			*/

#define Isdn_vn6_store_spf_fac(pr,action_, code_, p_string)\
		Set_offset_vn6	(pr,		spf_fac);										\
		Set_val_vn6		(spf_fac,	action,			action_);						\
		Set_val_vn6		(spf_fac,	code,			code_);							\
		Set_str_vn6		(spf_fac,	nb,				p_string,	VN6_MX_SZ_CALLED_NB+1)

#define Isdn_vn6_store_spf_fac_charging(pr,code_, charging_)\
		Set_offset_vn6	(pr,		spf_fac);										\
		Set_val_vn6		(spf_fac,	action,			BYTE_VAL_NIL);					\
		Set_val_vn6		(spf_fac,	code,			code_);							\
		Set_val_vn6		(spf_fac,	charging,		charging_);						\
		Set_str_vn6		(spf_fac,	nb,				P_NIL,	VN6_MX_SZ_CALLED_NB+1)

#endif

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_transit_net_sel : transit network selection

					INPUT :
						- pr 			= primitive ID,
						- net_id_type_	= type of network identification,
						- net_id_plan_	= network identification plan,
						- net_id_		= address of network identification.
			*/

#define Isdn_vn6_store_transit_net_sel(pr, net_id_type_, net_id_plan_, net_id_)	\
		Set_offset_vn6	(pr,				transit_net_sel);						\
		Set_val_vn6		(transit_net_sel,	net_id_type,	net_id_type_);			\
		Set_val_vn6		(transit_net_sel,	net_id_plan,	net_id_plan_);			\
		Set_str_vn6		(transit_net_sel,	net_id,			net_id_,	VN6_MX_SZ_TRANSIT_NET_SEL+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_user_fac : user facility IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator
						- size				= size of the array,
						- p_array			= address of the character array.

			*/


#define Isdn_vn6_store_user_fac(pr, protocol_discr_, size, p_array) 		\
		Set_offset_vn6	(pr,		user_fac);									\
		Set_val_vn6		(user_fac,	protocol_discr,		protocol_discr_);		\
		Set_mem_vn6		(user_fac,	text,	p_array,	(size > VN6_MX_SZ_USER_FAC) \
											 ? VN6_MX_SZ_USER_FAC : size)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_uui : user to user information IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator,
						- p_text 			= address of the user info.
			*/

#define Isdn_vn6_store_uui(pr, protocol_discr_, p_text)								\
		Set_offset_vn6	(pr,	uui);												\
		Set_val_vn6		(uui,	protocol_discr,	protocol_discr_);					\
		Set_str_vn6		(uui, 	text,	p_text,	VN6_MX_SZ_UUI+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn6_store_user_pcs : user to PCS information IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator,
						- p_text 			= address of the user info.
			*/

#define Isdn_vn6_store_user_pcs(pr, protocol_discr_, p_text, sz_)					\
		Set_offset_vn6	(pr,	user_pcs);											\
		Set_val_vn6		(user_pcs,	protocol_discr,	protocol_discr_);				\
		Set_mem_vn6		(user_pcs, 	text,	p_text,	sz_)

/*-------------------------------------------------------------------------*/
/*						Q931 (TRANSPARENT) IE ENCODING							   */
/*-------------------------------------------------------------------------*/


#if NS_IE_TSP_OUT == ON

#	define	Isdn_vn6_store_advice_charge_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, advice_charge);						\
		Set_mem_eob_vn6	(advice_charge, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_ADVICE_CHARGE_TSP) ? 1 + VN6_MX_SZ_ADVICE_CHARGE_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(advice_charge)

#	define	Isdn_vn6_store_bc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, bc);						\
		Set_mem_eob_vn6	(bc, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_BC_TSP) ? 1 + VN6_MX_SZ_BC_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(bc)

#	define	Isdn_vn6_store_call_id_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, call_id);						\
		Set_mem_eob_vn6	(call_id, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_CALL_ID_TSP) ? 1 + VN6_MX_SZ_CALL_ID_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(call_id)

#	define	Isdn_vn6_store_called_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, called_nb);						\
		Set_mem_eob_vn6	(called_nb, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_CALLED_NB_TSP) ? 1 + VN6_MX_SZ_CALLED_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(called_nb)

#	define	Isdn_vn6_store_calling_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, calling_nb);						\
		Set_mem_eob_vn6	(calling_nb, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_CALLING_NB_TSP) ? 1 + VN6_MX_SZ_CALLING_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(calling_nb)

#	define	Isdn_vn6_store_called_sub_add_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, called_sub_add);						\
		Set_mem_eob_vn6	(called_sub_add, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_CALLED_SUB_ADD_TSP) ? 1 + VN6_MX_SZ_CALLED_SUB_ADD_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(called_sub_add)

#	define	Isdn_vn6_store_calling_sub_add_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, calling_sub_add);						\
		Set_mem_eob_vn6	(calling_sub_add, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_CALLING_SUB_ADD_TSP) ? 1 + VN6_MX_SZ_CALLING_SUB_ADD_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(calling_sub_add)

#	define	Isdn_vn6_store_cause_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, cause);						\
		Set_mem_eob_vn6	(cause, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_CAUSE_TSP) ? 1 + VN6_MX_SZ_CAUSE_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(cause)

#	define	Isdn_vn6_store_chan_id_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, chan_id);						\
		Set_mem_eob_vn6	(chan_id, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_CHAN_ID_TSP) ? 1 + VN6_MX_SZ_CHAN_ID_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(chan_id)

#	define	Isdn_vn6_store_congest_level_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, congest_level);						\
		Set_mem_eob_vn6	(congest_level, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_CONGEST_LEVEL_TSP) ? 1 + VN6_MX_SZ_CONGEST_LEVEL_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(congest_level)

#	define	Isdn_vn6_store_date_time_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, date_time);						\
		Set_mem_eob_vn6	(date_time, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_DATE_TIME_TSP) ? 1 + VN6_MX_SZ_DATE_TIME_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(date_time)

#	define	Isdn_vn6_store_display_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, display);						\
		Set_mem_eob_vn6	(display, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_DISPLAY_TSP) ? 1 + VN6_MX_SZ_DISPLAY_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(display)

#	define	Isdn_vn6_store_escape_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, escape);						\
		Set_mem_eob_vn6	(escape, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_ESCAPE_TSP) ? 1 + VN6_MX_SZ_ESCAPE_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(escape)

#	define	Isdn_vn6_store_facility_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, facility);						\
		Set_mem_eob_vn6	(facility, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_FACILITY_TSP) ? 1 + VN6_MX_SZ_FACILITY_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(facility)

#	define	Isdn_vn6_store_hlc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, hlc);						\
		Set_mem_eob_vn6	(hlc, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_HLC_TSP) ? 1 + VN6_MX_SZ_HLC_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(hlc)

#	define	Isdn_vn6_store_keypad_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, keypad);						\
		Set_mem_eob_vn6	(keypad, tsp_data, p_data_,(p_data_[0] > VN6_MX_SZ_KEYPAD_TSP) ? 1 + VN6_MX_SZ_KEYPAD_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(keypad)

#	define	Isdn_vn6_store_llc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, llc);						\
		Set_mem_eob_vn6	(llc, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_LLC_TSP) ? 1 + VN6_MX_SZ_LLC_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(llc)

#	define	Isdn_vn6_store_notif_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, notif_ind);						\
		Set_mem_eob_vn6	(notif_ind, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_NOTIF_IND_TSP) ? 1 + VN6_MX_SZ_NOTIF_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(notif_ind)

#	define	Isdn_vn6_store_pcs_user_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, pcs_user);						\
		Set_mem_eob_vn6	(pcs_user, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_UUI_TSP) ? 1 + VN6_MX_SZ_PCS_UESR_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(pcs_user)

#	define	Isdn_vn6_store_progress_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, progress_ind);						\
		Set_mem_eob_vn6	(progress_ind, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_PROGRESS_IND_TSP) ? 1 + VN6_MX_SZ_PROGRESS_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(progress_ind)

#	define	Isdn_vn6_store_restart_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, restart_ind);						\
		Set_mem_eob_vn6	(restart_ind, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_RESTART_IND_TSP) ? 1 + VN6_MX_SZ_RESTART_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(restart_ind)

#	define	Isdn_vn6_store_signal_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, signal);						\
		Set_mem_eob_vn6	(signal, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_SIGNAL_TSP) ? 1 + VN6_MX_SZ_SIGNAL_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(signal)

#	define	Isdn_vn6_store_spf_fac_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, spf_fac);						\
		Set_mem_eob_vn6	(spf_fac, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_SPF_FAC_TSP) ? 1 + VN6_MX_SZ_SPF_FAC_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(spf_fac)

#	define	Isdn_vn6_store_transit_net_sel_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, transit_net_sel);						\
		Set_mem_eob_vn6	(transit_net_sel, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_TRANSIT_NET_SEL_TSP) ? 1 + VN6_MX_SZ_TRANSIT_NET_SEL_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(transit_net_sel)

#	define	Isdn_vn6_store_uui_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, uui);						\
		Set_mem_eob_vn6	(uui, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_UUI_TSP) ? 1 + VN6_MX_SZ_UUI_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(uui)

#	define	Isdn_vn6_store_user_pcs_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_vn6	(pr, user_pcs);						\
		Set_mem_eob_vn6	(user_pcs, tsp_data,p_data_, (p_data_[0] > VN6_MX_SZ_UUI_TSP) ? 1 + VN6_MX_SZ_USER_PCS_TSP : 1 + p_data_[0]);\
		Set_next_ie_vn6	(user_pcs)

#endif

/*EOF*/

