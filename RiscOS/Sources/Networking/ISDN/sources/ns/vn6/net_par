

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_par.vn6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- Implements the specific options and parameters
 * 		  of the NETWORK SIGNALLING layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*/
		/*
			NS interface sizing constants for IE variable length fields :
				maximum number of significant bytes only
				(i.e. as defined in the NS Standards).
		*/

#define VN6_MX_SZ_ADVICE_CHARGE			3			/* advice charge string */
#define VN6_MX_SZ_CALL_ID				8			/* called ID string */
#define VN6_MX_SZ_CALLED_NB				20			/* called number string */
#define VN6_MX_SZ_CALLED_SUB_ADD    	8			/* called sub-address string */
#define VN6_MX_SZ_CALLING_NB			22			/* calling number string */
#define VN6_MX_SZ_CALLING_SUB_ADD   	8			/* calling sub-address string */
#define VN6_MX_SZ_DISPLAY				32			/* display string */
#define VN6_MX_SZ_KEYPAD				32			/* keypad string */
#define	VN6_MX_SZ_REDIR_NB				17			/* redirecting number string */

#define VN6_MX_SZ_ESCAPE				50			/* component tag string */
#define VN6_MX_SZ_FACILITY				250			/* invoke id string */
#define VN6_MX_SZ_TRANSIT_NET_SEL		24			/* transit network selection string */
#define VN6_MX_SZ_UUI               	128			/* user-to-user string */
#define VN6_MX_SZ_USER_PCS             	128			/* user-to-PCS string  */
#define VN6_MX_SZ_PCS_USER             	128			/* PCS-to-uesr string  */
#define VN6_MX_SZ_CAUSE_DIAG			27			/* cause diagnostic string */
#define VN6_MX_SZ_CHAN_ID				30			/* chan ID string */

#define	VN6_MX_SZ_NET_ID				10			/* network id array */

#define VN6_MX_SZ_SPF_FAC				10			/* spf fac string */
#define VN6_SPF_FAC_PAD_SIZE			5
#define VN6_MX_SZ_USER_FAC				7			/* user facility information */

			/* When transparent mode is used */

#define	VN6_MX_SZ_ADVICE_CHARGE_TSP		 8
#define	VN6_MX_SZ_BC_TSP				11
#define	VN6_MX_SZ_CALL_ID_TSP            9
#define	VN6_MX_SZ_CALLED_NB_TSP         21
#define	VN6_MX_SZ_CALLING_NB_TSP        23
#define	VN6_MX_SZ_CALLED_SUB_ADD_TSP    9
#define	VN6_MX_SZ_CALLING_SUB_ADD_TSP   21
#define	VN6_MX_SZ_CAUSE_TSP             30
#define	VN6_MX_SZ_CHAN_ID_TSP           30
#define	VN6_MX_SZ_CONGEST_LEVEL_TSP      1
#define	VN6_MX_SZ_DATE_TIME_TSP          6
#define	VN6_MX_SZ_DISPLAY_TSP			32
#define	VN6_MX_SZ_ESCAPE_TSP             1
#define	VN6_MX_SZ_FACILITY_TSP         252
#define	VN6_MX_SZ_HLC_TSP                3
#define	VN6_MX_SZ_KEYPAD_TSP            32
#define	VN6_MX_SZ_LLC_TSP               14
#define	VN6_MX_SZ_NOTIF_IND_TSP          1
#define	VN6_MX_SZ_PROGRESS_IND_TSP       2
#define	VN6_MX_SZ_SIGNAL_TSP             1
#define	VN6_MX_SZ_SPF_FAC_TSP           32
#define	VN6_MX_SZ_TRANSIT_NET_SEL_TSP   32
#define	VN6_MX_SZ_UUI_TSP               129
#define	VN6_MX_SZ_USER_PCS_TSP          129
#define	VN6_MX_SZ_PCS_USER_TSP          129
#define VN6_MX_SZ_USER_FAC_TSP			 7
#define	VN6_MX_SZ_RESTART_IND_TSP        1

/*--------------------------------------------------------------------------*/

			/* NETWORK SIGNALLING SIZING CONSTANTS */

#define VN6_MX_ADDITIONAL_OCTET 		10				/* maximum number of additional octet (extra octet after an EXT 1 octet) */
#define	VN6_MX_DL_RETRY					 0				/* maximum number of restablish Data Link retry */

					/*
							Call timer index affectation

						If timers are not used simultaneously
						they can have the same index (overlaping).

					*/
						/* User and network side */

#define VN6_T300_IDX					0
#define VN6_T301_IDX					0
#define VN6_T302_IDX					0
#define VN6_T303_IDX					0
#define VN6_T304_IDX					0
#define VN6_T305_IDX					0
#define VN6_T306_IDX					0
#define VN6_T307_IDX					0
#define VN6_T308_IDX					0
#define VN6_T310_IDX					0
#define VN6_T312_IDX					2
#define VN6_T313_IDX					0
#define VN6_T318_IDX					0
#define VN6_T319_IDX					0
#define VN6_T320_IDX					0
#define VN6_T321_IDX					0
#define VN6_T322_IDX					1
#define VN6_T399_IDX					0

#if NS_T309 == ON
#	define VN6_T309_IDX					3
#	define VN6_MX_CALL_TIMER			19				/* maximum number of CALL timer index */
#	define VN6_NB_CALL_TIMER			4				/* Nb of simultaneous NS call timers */

#else
#	define VN6_MX_CALL_TIMER			18				/* maximum number of CALL timer index */
#	define VN6_NB_CALL_TIMER			3				/* Nb of simultaneous NS call timers */
#endif
					/*
							DL Connection timer index affectation

						If timers are not used simultaneously
						they can have the same index (overlaping).

					*/

#define	T3DL							0
#define	T3_DL_EST						1

#define	VN6_NB_DL_TIMER					2

#if NS_RESTART_PROCEDURE == ON
#	define VN6_T316						2
#	define VN6_T317						3

#	define VN6_NB_TIMER_RESTART			2
#	define VN6_MX_N316					2						/* maximum repetition for T316 expiry */
#else
#	define VN6_NB_TIMER_RESTART			0
#endif


#if NS_SEGMENTATION == ON
#	define VN6_T314						(VN6_NB_DL_TIMER + VN6_NB_TIMER_RESTART)	/* This index must follow the last defined index */
#	define VN6_NB_TIMER_SEGMENTATION	1
#else
#	define VN6_NB_TIMER_SEGMENTATION	0
#endif

#define VN6_MX_DLCI_TIMER				(VN6_NB_DL_TIMER + VN6_NB_TIMER_RESTART + VN6_NB_TIMER_SEGMENTATION)	/* maximum number of DLCI timer index */

#if EQUIPMENT == NT2
#	define VN6_T304I					0
#	define VN6_T308I					1
#	define VN6_T310I					2

#	define VN6_NB_INT_TIMER				3

#endif

	/*----------------------------------------------------------*/

		/* Maximum number of repeated IE in a SPDU message */

				/* single octet */

#define VN6_MX_MORE_DATA				1					/* more data */
#define VN6_MX_SENDING_COMPLETE			1					/* sending complete */

				/* Codeset 0 */

#define VN6_MX_BC						1					/* bearer capability */
#define VN6_MX_CALLED_NB				1					/* called party number */
#define VN6_MX_CALLED_SUB_ADD			1					/* called party subaddress */
#define VN6_MX_CALLING_NB				2					/* calling party number */
#define VN6_MX_CALLING_SUB_ADD			1					/* calling party subaddress */
#define VN6_MX_CALL_ID					1					/* call identity */
#define VN6_MX_CALL_STATE				1					/* call state */
#define VN6_MX_CAUSE					4					/* cause */
#define VN6_MX_CHAN_ID					5					/* channel identification */
#define VN6_MX_CONGEST_LEVEL			1					/* congestion level */
#define VN6_MX_DATE_TIME				1					/* date and time */
#define VN6_MX_DISPLAY					1					/* display */
#define VN6_MX_ESCAPE					1					/* escape */
#define VN6_MX_FACILITY					4					/* facility */
#define VN6_MX_HLC						1					/* high layer compatibility */
#define VN6_MX_KEYPAD					1					/* keypad facility */
#define VN6_MX_LLC						1					/* low layer compatibility */
#define VN6_MX_NOTIF_IND				1					/* notification indicator */
#define VN6_MX_PROGRESS_IND				2					/* progress indicator */
#define	VN6_MX_REDIR_NB					1					/* redirecting number */
#define VN6_MX_SIGNAL					1					/* signal */
#define VN6_MX_SPF_FAC					4					/* specific facility */
#define VN6_MX_TRANSIT_NET_SEL 			4					/* transit network selection */
#define VN6_MX_UUI						1					/* user-user */
#define VN6_MX_RESTART_IND				1					/* restart indicator */

				/* codeset 6 */

#define VN6_MX_USER_FAC					1					/* user facility */
#define	VN6_MX_USER_MODE				1					/* user mode */
#define VN6_MX_PCS_USER					1					/* pcs-to-user */
#define VN6_MX_USER_PCS					1					/* user-to-pcs */
#define VN6_MX_ADVICE_CHARGE			1					/* advice of charge */

/*EOF*/

