
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_switch.vn6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        vn6_csc_dl_reinit - implement an unexpected data link reinit.
 *
 *        vn6_circuit_switched_call - implements the processing of the call
 *		                          control procedures.
 *
 *
 *        vn6_circuit_switched_call_n - implements the processing of the call
 *		                            control procedures.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	void	vn6_u0						(void);
	void	vn6_u1						(void);
	void	vn6_u2						(void);
	void	vn6_u3						(void);
	void	vn6_u4						(void);
	void	vn6_u6						(void);
	void	vn6_u7						(void);
	void	vn6_u8						(void);
	void	vn6_u9						(void);
	void	vn6_u10						(void);
	void	vn6_u11						(void);
	void	vn6_u12						(void);
	void	vn6_u15						(void);
	void	vn6_u17						(void);
	void	vn6_u19						(void);
	void	vn6_u25						(void);
	void	vn6_u254					(void);
	void	vn6_csc_dl_reinit			(void);
	uchar	vn6_circuit_switched_call	(void);
	uchar	vn6_error_handler			(void);
	void	vn6_internal_process		(void);
	void	vn6_send_to_ces		 		(uchar ev_id, uchar ie_flag, uchar my_ces);
	void	vn6_send_to_other_ces 		(uchar ev_id, uchar ie_flag);
	uchar	vn6_nb_other_active_ces		(void);
	uchar	vn6_nb_active_ces			(void);
#else
	void	vn6_u0						();
	void	vn6_u1						();
	void	vn6_u2						();
	void	vn6_u3						();
	void	vn6_u4						();
	void	vn6_u6						();
	void	vn6_u7						();
	void	vn6_u8						();
	void	vn6_u9						();
	void	vn6_u10						();
	void	vn6_u11						();
	void	vn6_u12						();
	void	vn6_u15						();
	void	vn6_u17						();
	void	vn6_u19						();
	void	vn6_u25						();
	void	vn6_u254					();
	void	vn6_csc_dl_reinit			();
	uchar	vn6_circuit_switched_call	();
	uchar	vn6_error_handler			();
	void	vn6_internal_process		();
	void	vn6_send_to_ces		 		();
	void	vn6_send_to_other_ces 		();
	uchar	vn6_nb_other_active_ces		();
	uchar	vn6_nb_active_ces			();
#endif

						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*                */
						/*----------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	vn6_csc_dl_reinit () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN)
									   for FT_VN6 implementation.

Usage           	void vn6_csc_dl_reinit ();

Related
functions usage		void send_state (uchar class, uchar value, uchar diagnostic);

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void vn6_csc_dl_reinit ()
{

	ns_access_first_call ();

	while (Call_current_exist) {

		if (Call_state != STATE_NIL) {
			I_call_ref = Call_ref;
			Set_call_ref_not_nil ();

			if ((Call_state == STATE_OVERLAP_SENDING_2) ||
				(Call_state == STATE_OVERLAP_RECEIVING_25)) {
				ns_stop_all_timers ();
				set_i_cause (C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_TEMPORARY_FAILURE_41, P_NIL);
				Send_to_d_channel (DISC);
				Set_state (STATE_DISCONNECT_REQUEST_11);
				Start_timer_ns (VN6_T305);
			}

		}

		ns_access_next_call ();
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            vn6_circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar vn6_circuit_switched_call ();

Related
functions usage void u0 .... u254 ()

Description     vn6_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*								CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|     start T305|     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

uchar vn6_circuit_switched_call ()
{

#	if NS_RESTART_PROCEDURE == ON
		uchar	FAR *p_data;
#	endif

					/* 1 - EVENT DRIVEN PROCESSING  */

	if (i_entity_origination == ENT_MNS) {

#		if NS_RESTART_PROCEDURE == ON

			switch (event_id) {

				case MNS_RESTART_RQ :

					if (Dl_rest_state == STATE_REST_0) {

							/* set current data pointer using p_ssdu pointer */

						p_data = p_ssdu;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							if (Na_type == BRI) {

								/* Basic Rate */

								I_chan_id_int_type = INT_TYPE_BRI;
								I_chan_id_chan_sel = Mns_restart_b_chan_nb;	/* B1_CHAN or B2_CHAN */

							} else {

								/* Primary Rate */

								I_chan_id_int_type = INT_TYPE_PRI;
								I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
								I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

								I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
								*I_chan_id_a_chan_number = Mns_restart_b_chan_nb;	/* channel number */
							}
						}

						if (I_restart_ind_class == RI_ALL_INTERFACES) {
							csc_clear_all_call ();
							Na_internal_restart = ON;
						}

						Send_to_call_control (NS_RESTART_IN);	/* on CONN_ID_MANAGEMENT */
						Start_dl_timer (VN6_T317);
						Set_call_ref_not_nil ();

						if (I_chan_id_a_chan_number != A_NIL) {

							/* Set the extension bit to 1 in the chan_nb field before sending SPDU */

							Set_ext_bit (*I_chan_id_a_chan_number);
						}

						Send_to_d_channel (RESTART);			/* with CALL_REF_GLOBAL */
						N316 = 0;
						Start_dl_timer (VN6_T316);
						Dl_rest_state = STATE_REST_1;

					} else {

						ns_unexpected_ev ();
					}

					break;

#				if ASSERT == ON

				default :
					Trap (TRAP_MNS_CODE, "vn6_circuit_switched_call");

#				endif

			}

#		endif

		return (OK);
	}

	switch (event_id) {

						/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

						/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) != OK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NO_CIRCUIT_AVAILABLE_34, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;

						/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_CALL_INIT_1 :
				case STATE_DISCONNECT_INDICATION_12 :
					ns_unexpected_ev ();
					break;

				case STATE_DISCONNECT_REQUEST_11 :
					ns_stop_all_timers ();							/* Timers 305 and maybe 322 */
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */
					Reset_internal_ie ();

					if (disc_cause_error () == NOK) {
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					}

					go_to_state_19 (VN6_T308);

					break;

				case STATE_OUTGOING_CALL_PROC_3 :

						/* USER FACILITY protocol */

					if (is_ie_i (CODESET_0, USER_FAC) == ABSENT) {
						Call_user_fac_rq = OFF;
					}

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */
					Set_state (STATE_DISCONNECT_INDICATION_12);		/* enter disconnect indication state */
					break;

			}

			return (OK);

						/* RELEASE */

		case DA_REL :
			Call_fac_rq = OFF;
			Send_to_call_control (NS_CLEAR_CO);

			switch (Call_state) {

				case STATE_RELEASE_REQUEST_19 :
					break;

				default :
					Reset_internal_ie ();
					set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					break;

			}

			call_clear ();
			return (OK);

						/* RELEASE COMPLETE */

		case DA_REL_COMP :
			Call_fac_rq	= OFF;
			Send_to_call_control (NS_CLEAR_CO);						/* send NS clear confirm to Layer 4 */
			call_clear ();											/* free call context */
			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :

						/* USER FACILITY protocol */

					if (is_ie_i (CODESET_0, USER_FAC) == PRESENT) {

						if (Call_user_fac_rq == OFF) {
							send_err_to_user (ERR_U_USER_FAC_PROTOCOL, USER_FAC, 0, Call_upper_ent);
							break;

						}


					} else {

						Call_user_fac_rq = OFF;
					}

#					if NS_SPF_FACILITY == ON

						if ((is_ie_i (CODESET_0, UUI) == PRESENT) ||
							((is_ie_i (CODESET_0, CALLED_NB) == PRESENT) &&
							 (is_ie_i (CODESET_0, SPF_FAC)   == PRESENT) &&
							 (I_(spf_fac,action) == FT_SPF_FAC_RQ_ACTIVATE)   &&
							 (I_(spf_fac,code)   == FT_SPF_FAC_CALL_DEFLECTION)
							)
						   ) {
							Send_to_d_channel_and_save_spdu (REL);
							N308 = 0;
							Start_timer_ns (VN6_T308);
							Set_state (STATE_RELEASE_REQUEST_19);
							break;

						} else

#					endif

					if (! ((is_ie_i (CODESET_0, CAUSE) == PRESENT) &&
						   (I_cause_class == C_C_NORMAL_EVENT)     &&
						   (I_cause_val   == C_V_NO_ANSWER_19))
					   ) {

						Send_to_d_channel (REL_COMP);
					}

				case STATE_NULL_0 :
				case STATE_WAIT_DL :
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_RESUME_REQUEST_17 :
				case STATE_SUSPEND_REQUEST_15 :
					ns_unexpected_ev ();
					break;

				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					disc_cause_error ();
					Stop_timer_ns  (VN6_T300);
					go_to_state_19 (VN6_T308);
					break;

				case STATE_CALL_INIT_1 :
					Release_saved_spdu ();							/* saved setup no more useful */
					go_to_state_19 (VN6_T308);
					break;

				case STATE_CALL_RECEIVED_7 :		/* it is a special case only in FRANCE */

					if (Na_country == FRANCE) {

							/*	sending a RELEASE message in alerting phase is allowed only
								in following cases (in FRANCE TELECOM network) :
								- Call Forwarding (using Network-specific Facility IE)
								- User-to-User Signalling using UUI IE
								- User-PCS Signalling using User-to-PCS IE.
								-> Clearing request is ignored if none of these IEs in included. */

						if ((is_ie_i (CODESET_0, SPF_FAC) == PRESENT) ||
							(is_ie_i (CODESET_0, UUI) == PRESENT) ||
							(is_ie_i (CODESET_6, USER_PCS) == PRESENT)) {

							go_to_state_19 (VN6_T308);
						}

						return (OK);
					}

					/* process the default */

				default :
					ns_stop_all_timers ();
					Save_cause ();									/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);						/* send a DISCONNECT message */
					Start_timer_ns (VN6_T305);							/* start T305 */
					Set_state (STATE_DISCONNECT_REQUEST_11);		/* enter the Disconnect Request state */
					break;

			}

			return (OK);

						/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
				case STATE_RESUME_REQUEST_17 :
					ns_unexpected_ev ();
					break;

				case STATE_OVERLAP_RECEIVING_25 :
					Send_to_call_control (NS_INFO_IN);

					if (is_ie_i (CODESET_SO, SENDING_COMPLETE) == ABSENT) {
						Restart_timer_ns (VN6_T302);
					}
					break;

					/* In state 19, the INFO message may be ignored */

				case STATE_RELEASE_REQUEST_19 :
					break;

				default :

					if (is_ie_i (CODESET_0, CALLED_NB) == PRESENT) {
						ns_unexpected_ev ();

					} else {

						Send_to_call_control (NS_INFO_IN);
					}

			}

			return (OK);

						/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RESUME_REQUEST_17 :
				case STATE_RELEASE_REQUEST_19 :
					ns_unexpected_ev ();
					break;

				case STATE_OVERLAP_SENDING_2 :

					if (is_ie_i (CODESET_SO, SENDING_COMPLETE) == ABSENT) {
						Restart_timer_ns (VN6_T304);
					}
					Send_to_d_channel (INFO);
					break;

				default :

					if (is_ie_i (CODESET_0, CALLED_NB) != PRESENT) {
						Send_to_d_channel (INFO);
					}

			}

			return (OK);

						/* STATUS */

		case DA_STATUS :

			if (Call_current_exist) {

				if (I_call_state_val == STATE_NULL_0) {
					Call_fac_rq	= OFF;
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					call_clear ();									/* free call context */

				} else {

					if (C_v (I_cause_class, I_cause_val) ==
						C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {

						Stop_timer_ns (VN6_T322);
					}

					if ((Call_state != I_call_state_val) &&
						(Call_state != STATE_RELEASE_REQUEST_19)) {

						if ((I_cause_class == C_C_PROTOCOL_ERROR)				&&
							((I_cause_val == C_V_MANDATORY_IE_MISSING_96)		||
							 (I_cause_val == C_V_MESSAGE_TYPE_NON_EXISTENT_97)	||
							 (I_cause_val == C_V_NON_EXISTENT_IE_99)			||
							 (I_cause_val == C_V_INVALID_IE_CONTENT_100)))	{
							Call_fac_rq	= OFF;
							Send_to_d_channel (REL_COMP);
							Send_to_call_control (NS_CLEAR_CO);
							call_clear ();
						}
					}
				}
			}

#			if NS_RESTART_PROCEDURE == ON /* { */

			else {		/* NON CALL-ASSOCIATED */

				switch (Dl_rest_state) {

					case STATE_REST_0 :
						break;

					case STATE_REST_1 :

						if (I_call_state_val != STATE_REST_2) {
							ns_stop_all_dlci_timers ();
							ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_STATE_INCOMP);
							Dl_restart_reset ();
						}

						break;

					case STATE_REST_2 :

						if (I_call_state_val != STATE_REST_1) {
							ns_snd_mns (MNS_RESTART_IN);
						}

						break;
				}
			}

#			endif /* RESTART_PROCEDURE = ON} */

			return (OK);

						/* STATUS_ENQ */

		case DA_STATUS_ENQ :
			Reset_internal_ie ();
			set_i_state (Call_state);
			set_i_cause	(C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30, P_NIL);
			Send_to_d_channel (STATUS);
			return (OK);

						/* NS_STATUS_ENQ_RQ */

		case NS_STATUS_ENQ_RQ :

			if (State_timer_ns (VN6_T322) == OFF) {
				Send_to_d_channel (STATUS_ENQ);
				Start_timer_ns (VN6_T322);
			}
			return (OK);

		case TI_322 :		/* implementation dependent */

			if (i_entity_origination == ENT_TI) {
				return (OK);

			} else {

				break;
			}


#		if NS_RESTART_PROCEDURE == ON /* { */

			case TI_316 :

				if (Dl_rest_state == STATE_REST_1) {

					if (++N316 == VN6_MX_N316) {

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_316);
						Dl_restart_reset ();

					} else {

						Set_call_ref_not_nil ();

							/* store Restart Indicator with value saved in DL context */

						set_ie_i (CODESET_0, RESTART_IND);
						I_restart_ind_class = Dl_rest_class;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

								/* store Channel-ID */

							ie_implicit_val_x (CODESET_0, CHAN_ID, 0);
							set_ie_i (CODESET_0, CHAN_ID);

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							if (Na_type == BRI) {

								/* Basic Rate */

								I_chan_id_int_type = INT_TYPE_BRI;
								I_chan_id_chan_sel = Dl_rest_chan_nb;	/* B1_CHAN or B2_CHAN */

							} else {

								/* Primary Rate */

								I_chan_id_int_type = INT_TYPE_PRI;
								I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
								I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

								I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
								*I_chan_id_a_chan_number = Dl_rest_chan_nb;	/* channel number */
								Set_ext_bit (*I_chan_id_a_chan_number);		/* Set the extension bit to 1 in the chan_nb field before sending SPDU */
							}
						}

						Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
						Restart_dl_timer (VN6_T316);
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case TI_317 :

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART :

				if (Dl_rest_state == STATE_REST_0) {
					Start_dl_timer (VN6_T317);
					Set_call_ref_nil ();		/* to use CONN_ID_MANAGEMENT */
					Send_to_call_control (NS_RESTART_IN);
					Dl_rest_state = STATE_REST_2;

					if (I_restart_ind_class == RI_ALL_INTERFACES) {
						csc_clear_all_call ();
						Na_internal_restart = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART_ACK :

				if (Dl_rest_state == STATE_REST_1) {

					Stop_dl_timer (VN6_T316);

					if (Dl_rest_resp == ON) {

						ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
						Dl_restart_reset ();

					} else {

						Dl_rest_ack = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RS :

				Stop_dl_timer (VN6_T317);
				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

						Set_call_ref_not_nil ();
						Send_to_d_channel (RESTART_ACK);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RQ :

				if (Dl_rest_state != STATE_REST_0) {

					call_clear ();

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

#		endif /* RESTART_PROCEDURE = ON} */

	} /* End switch (event_id) */

/*.........................................................................*/

					/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "vn6_circuit_switched_call");
	}

	switch (Call_state) {

			/* Null state (u0) */

		case STATE_NULL_0 :
		case STATE_WAIT_DL :
			vn6_u0 ();
			break;

			/* Call initiated (u1) */

		case STATE_CALL_INIT_1 :
			vn6_u1 ();
			break;

			/* Overlap sending (u2) */

		case STATE_OVERLAP_SENDING_2 :
			vn6_u2 ();
			break;

			/* Outgoing call proceeding (u3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			vn6_u3 ();
			break;

			/* Call delivered (u4) */

		case STATE_CALL_DELIVERED_4 :
			vn6_u4 ();
			break;

			/* Call present (u6) */

		case STATE_CALL_PRESENT_6 :
			vn6_u6 ();
			break;

			/* Call received (u7) */

		case STATE_CALL_RECEIVED_7 :
			vn6_u7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			vn6_u8 ();
			break;

			/* Incoming call proceeding state (u9) */

		case STATE_INCOMING_CALL_PROC_9 :
			vn6_u9 ();
			break;

			/*  Active (u10) */

		case STATE_ACTIVE_10 :
			vn6_u10 ();
			break;

			/* Disconnect request (u11) */

		case STATE_DISCONNECT_REQUEST_11 :
			vn6_u11 ();
			break;

			/* Disconnect indication (u12) */

		case STATE_DISCONNECT_INDICATION_12 :
			vn6_u12 ();
			break;

			/* Suspend request (u15) */

		case STATE_SUSPEND_REQUEST_15 :
			vn6_u15 ();
			break;

			/* Resume request (u17) */

		case STATE_RESUME_REQUEST_17 :
			vn6_u17 ();
			break;

			/* Release request (u19) */

		case STATE_RELEASE_REQUEST_19 :
			vn6_u19 ();
			break;

			/* Overlap receiving (u25) */

		case STATE_OVERLAP_RECEIVING_25 :
			vn6_u25 ();
			break;

			/*  Registration service request (u254) France Telecom only */

		case STATE_REGISTRATION_REQUEST_254 :
			vn6_u254 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "vn6_circuit_switched_call");

	}

	return (OK);
}

#if EQUIPMENT == NT2

#	if NEW_FCT_STYLE == ON
		void 		vn6_n0						(void);
		void 		vn6_n1						(void);
		void 		vn6_n2						(void);
		void 		vn6_n3						(void);
		void 		vn6_n4						(void);
		void 		vn6_n6						(void);
		void 		vn6_n7						(void);
		void 		vn6_n8						(void);
		void 		vn6_n9						(void);
		void 		vn6_n10						(void);
		void 		vn6_n11						(void);
		void 		vn6_n12						(void);
		void 		vn6_n15						(void);
		void 		vn6_n16						(void);
		void 		vn6_n17						(void);
		void 		vn6_n19						(void);
		void 		vn6_n22						(void);
		void 		vn6_n25						(void);
		void 		vn6_n254					(void);
		void 		vn6_n0i						(void);
		void 		vn6_n7i						(void);
		void 		vn6_n8i						(void);
		void 		vn6_n9i						(void);
		void 		vn6_n19i					(void);
		void 		vn6_n25i					(void);
#	else
		void 		vn6_n0						();
		void 		vn6_n1						();
		void 		vn6_n2						();
		void 		vn6_n3						();
		void 		vn6_n4						();
		void 		vn6_n6						();
		void 		vn6_n7						();
		void 		vn6_n8						();
		void 		vn6_n9						();
		void 		vn6_n10						();
		void 		vn6_n11						();
		void 		vn6_n12						();
		void 		vn6_n15						();
		void 		vn6_n16						();
		void 		vn6_n17						();
		void 		vn6_n19						();
		void 		vn6_n22						();
		void 		vn6_n25						();
		void 		vn6_n254					();
		void 		vn6_n0i						();
		void 		vn6_n7i						();
		void 		vn6_n8i						();
		void 		vn6_n9i						();
		void 		vn6_n19i					();
		void 		vn6_n25i					();
#	endif

#define Vn6_send_to_all_ces(ev_id, ie_flag)	    vn6_send_to_other_ces (ev_id, ie_flag); \
												vn6_send_to_ces (ev_id, ie_flag, Call_ces)	/* send to all terminals ev_id. Flag = OFF for specific cause */




						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*                   */
						/*-------------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            vn6_circuit_switched_call_n - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar vn6_circuit_switched_call_n ();

Related
functions usage void n0 .... n254 () ; n0i(), n7i(), n8i(), n9i(), n19i, n25i()

Description     vn6_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*								CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308	   |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

uchar vn6_circuit_switched_call_n ()
{

#	if NS_RESTART_PROCEDURE == ON
		uchar	FAR *p_data;
#	endif

/*
					if (multipoint) {

						if (from d_channel)
				1 - 		INTERNAL PROCESSING 	(Individual process)
						}
					}

				2 - EVENT DRIVEN PROCESSING 	(Global process)
				3 - STATE DRIVEN PROCESSING		(Global process)

					if (multipoint) {

						if (from call control)
				4 - 		INTERNAL PROCESSING 	(Individual process)
						}
					}
*/


/*.........................................................................*/

	if (Na_connection == POINT_TO_MULTIPOINT) {

					/* 1 - INTERNAL PROCESS */

		if ((i_entity_origination == ENT_DL_D) || (i_entity_origination == ENT_TI)) {
			vn6_internal_process ();
		}

		if (i_entity_origination == ENT_CC) {

			if (Call_ces_connect != NIL) {
				Ns_access_dl_ces (Call_ces_connect);
			}
		}
	}

/*.........................................................................*/

					/* 2 - EVENT DRIVEN PROCESS */


	if (i_entity_origination == ENT_MNS) {

		switch (event_id) {

#			if NS_RESTART_PROCEDURE == ON /* { */

				case MNS_RESTART_RQ :

					if (Dl_rest_state == STATE_REST_0) {

							/* set current data pointer using p_ssdu pointer */

						p_data = p_ssdu;

						if (Dl_call_count == 0) {

								/* Return MNS_RESTART_CO and do nothing else */

							ns_send_mns_restart (OK, I_restart_ind_class, Mns_restart_b_chan_nb, 0);
							return (OK);
						}

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							if (Na_type == BRI) {

								/* Basic Rate */

								I_chan_id_int_type = INT_TYPE_BRI;
								I_chan_id_chan_sel = Mns_restart_b_chan_nb;	/* B1_CHAN or B2_CHAN */

							} else {

								/* Primary Rate */

								I_chan_id_int_type = INT_TYPE_PRI;
								I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
								I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

								I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
								*I_chan_id_a_chan_number = Mns_restart_b_chan_nb;	/* channel number */
							}
						}

						if (I_restart_ind_class == RI_ALL_INTERFACES) {
							csc_clear_all_call ();
							Na_internal_restart = ON;
						}

						Send_to_call_control (NS_RESTART_IN);	/* on CONN_ID_MANAGEMENT */
						Start_dl_timer (VN6_T317);
						Set_call_ref_not_nil ();

						if (I_chan_id_a_chan_number != A_NIL) {

							/* Set the extension bit to 1 in the chan_nb field before sending SPDU */

							Set_ext_bit (*I_chan_id_a_chan_number);
						}

						Send_to_d_channel (RESTART);			/* with CALL_REF_GLOBAL */
						N316 = 0;
						Start_dl_timer (VN6_T316);
						Dl_rest_state = STATE_REST_1;

					} else {

						ns_unexpected_ev ();
					}

					return (OK);

#			endif /* RESTART_PROCEDURE = ON} */

#			if ASSERT == ON

				default :
					Trap (TRAP_MNS_CODE, "circuit_switched_call_n");

#			endif

		} /* end "switch (event_id)" */

		return (OK);
	}

	switch (event_id) {

							/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

							/* SETUP, REGISTRATION, RESUME : allocate a call context */

		case DA_SETUP :
		case DA_REG :
		case DA_RES :

			if (allocate_call (INCOMING_CALL, 0) == NOK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_CONGESTION_42, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;


							/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq		= OFF;

			switch (Call_state) {

				case STATE_CALL_RECEIVED_7 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Reset_internal_ie ();
						set_i_state (STATE_CALL_PRESENT_6);
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
						Send_to_d_channel (STATUS);

					} else {

						ns_action_to_cc (VN6_T301, VN6_T300, NS_CLEAR_IN,
															 STATE_DISCONNECT_REQUEST_11);
					}

					break;


				case STATE_CONNECT_REQUEST_8 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Reset_internal_ie ();
						set_i_state (STATE_CALL_PRESENT_6);
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
						Send_to_d_channel (STATUS);

					} else {

						ns_action_to_cc (T3_NIL, VN6_T300, NS_CLEAR_IN,
														   STATE_DISCONNECT_REQUEST_11);
					}

					break;

				case STATE_INCOMING_CALL_PROC_9 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Reset_internal_ie ();
						set_i_state (STATE_CALL_PRESENT_6);
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
						Send_to_d_channel (STATUS);

					} else {

						ns_action_to_cc (VN6_T310, VN6_T300, NS_CLEAR_IN,
															 STATE_DISCONNECT_REQUEST_11);
					}

					break;

				case STATE_DISCONNECT_INDICATION_12 :
					Stop_timer_ns (VN6_T305);
					Reset_internal_ie ();
					go_to_state_19 (VN6_T308);
					break;


				case STATE_RELEASE_REQUEST_19 :
						/* no process */
					break;

				case STATE_OVERLAP_RECEIVING_25 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Reset_internal_ie ();
						set_i_state (STATE_CALL_PRESENT_6);
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
						Send_to_d_channel (STATUS);

					} else {

						ns_action_to_cc (VN6_T304, VN6_T300, NS_CLEAR_IN,
															 STATE_DISCONNECT_REQUEST_11);
					}

					break;


				case STATE_NULL_0 :
				case STATE_CALL_PRESENT_6 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_CALL_ABORT_22 :
					ns_unexpected_ev ();
					break;

				default :
					ns_stop_all_timers ();
					ns_action_to_cc (T3_NIL, VN6_T300, NS_CLEAR_IN,
													   STATE_DISCONNECT_REQUEST_11);
					break;

			}

			return (OK);

							/* - RELEASE */

		case DA_REL :
			Call_fac_rq 	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

				case STATE_CALL_PRESENT_6 :
				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_OVERLAP_RECEIVING_25 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Reset_internal_ie ();
						Send_to_d_channel (REL_COMP);

					} else {

						Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
						Reset_internal_ie ();
						Send_to_d_channel (REL_COMP);
						call_clear ();
					}

					break;

				case STATE_SUSPEND_REQUEST_15 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_ABORT_22 :
					/* no process */
					return (OK);

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);


						/* - RELEASE COMPLETE */

		case DA_REL_COMP :

			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :

					/* no process */

					break;

				case STATE_CALL_INIT_1 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RESUME_REQUEST_17 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_PRESENT_6 :
				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_OVERLAP_RECEIVING_25 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						save_ie_cause ();

						if (Call_state == STATE_CALL_PRESENT_6) {
							Call_sub_state = N6_REL_COMP;

						} else {

							Call_sub_state = N6;
						}


					} else {

						Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
						call_clear ();
					}

					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					if (Call_ces_setup != DL_CES_BROADCAST) {
						Send_to_call_control (NS_CLEAR_CO);				/* send NS clear to Layer 4 */
						call_clear ();
					}

					break;

				case STATE_CALL_ABORT_22 :
					/* no process */
					return (OK);

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_INIT_1 :
					Send_to_d_channel (REL_COMP);
					Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
					call_clear ();
					break;

				case STATE_CALL_PRESENT_6 :
					Release_saved_spdu ();								/* saved setup no more useful */
					Stop_timer_ns (VN6_T303);

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */
						Set_state (STATE_CALL_ABORT_22);

					} else {

						ns_action_to_dl (T3_NIL, VN6_T305, DISC,
														   STATE_DISCONNECT_INDICATION_12);
					}

					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Vn6_send_to_all_ces (REL, ON);						/* send a REL with cause #26 to all ces which responded with ALERT */

						if (State_timer_ns (VN6_T312) == ON) {
							ns_action_to_cc (VN6_T301, T3_NIL, NS_CLEAR_IN,
															   STATE_CALL_ABORT_22);
						} else {

							Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
							call_clear ();
						}


					} else {

						ns_action_to_dl (T3_NIL, VN6_T305, DISC,
														   STATE_DISCONNECT_INDICATION_12);
					}

					break;

				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_OVERLAP_RECEIVING_25 :

					if (Call_state == STATE_OVERLAP_RECEIVING_25) {
						save_ie_cause ();
						Stop_timer_ns (VN6_T304);

					} else {

						Stop_timer_ns (VN6_T310);
					}

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Vn6_send_to_all_ces (REL, OFF);						/* send a REL with cause #26 to all ces which responded with ALERT */

						if (State_timer_ns (VN6_T312) == ON) {
							ns_action_to_cc (VN6_T301, T3_NIL, NS_CLEAR_IN,
															   STATE_CALL_ABORT_22);
						} else {

							Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
							call_clear ();
						}

					} else {

						ns_action_to_dl (T3_NIL, VN6_T305, DISC,
														   STATE_DISCONNECT_INDICATION_12);
					}

					break;

				default :
					ns_stop_all_timers ();
					Save_cause ();									/* to send the RELEASE if VN6_T305 expire */
					ns_action_to_dl (T3_NIL, VN6_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
					break;

			}

			return (OK);

							/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RESUME_REQUEST_17 :
				case STATE_CALL_ABORT_22 :
					ns_unexpected_ev ();
					break;

				case STATE_OVERLAP_SENDING_2 :
					Send_to_call_control (NS_INFO_IN);
					Start_timer_ns (VN6_T302);
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_OVERLAP_RECEIVING_25 :

					if (Call_ces_setup == DL_CES_BROADCAST) {

							/* send a STATUS with Call State IE = STATE_6 and do nothing else (Call state not changed) */

						Reset_internal_ie ();
						set_i_state (STATE_CALL_PRESENT_6);
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
						Send_to_d_channel (STATUS);

					} else {

						Send_to_call_control (NS_INFO_IN);
					}

					break;

				default :
					Send_to_call_control (NS_INFO_IN);
					break;

			}

			return (OK);

								/* STATUS */

		case DA_STATUS :

			if (Call_current_exist) {

				if (Call_state == STATE_RELEASE_REQUEST_19) {

					if (I_call_state_val == STATE_NULL_0) {
						Call_fac_rq	= OFF;
						Send_to_call_control (NS_CLEAR_CO);						/* send NS clear confirm to Layer 4 */
						call_clear ();											/* free call context */

					} else {

						if (C_v (I_cause_class, I_cause_val) ==
							C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {
							Stop_timer_ns (VN6_T322);
						}

					}

				} else {

					if (C_v (I_cause_class, I_cause_val) ==
						C_v (C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30)) {
						Stop_timer_ns (VN6_T322);
					}

					if (Call_state != I_call_state_val) {

						if ((I_cause_class == C_C_PROTOCOL_ERROR)				&&
							((I_cause_val == C_V_MANDATORY_IE_MISSING_96)		||
							 (I_cause_val == C_V_MESSAGE_TYPE_NON_EXISTENT_97)	||
							 (I_cause_val == C_V_NON_EXISTENT_IE_99)			||
							 (I_cause_val == C_V_INVALID_IE_CONTENT_100)))	{
							Call_fac_rq	= OFF;
							Send_to_d_channel (REL_COMP);
							Send_to_call_control (NS_CLEAR_CO);
							call_clear ();
						}

					}

				}
			}

			return (OK);

								/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :
					/* no process */
					break;

				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RESUME_REQUEST_17 :
				case STATE_CALL_ABORT_22 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_OVERLAP_RECEIVING_25 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Vn6_send_to_all_ces (INFO, ON);
						break;
					}

					/* else default case */

				default :
					Send_to_d_channel (INFO);
					break;
			}

			return (OK);

		case DA_STATUS_ENQ :
			Reset_internal_ie ();
			set_i_state (Call_state);
			set_i_cause	(C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30, P_NIL);
			Send_to_d_channel (STATUS);
			return (OK);

						/* NS_STATUS_ENQ_RQ */

		case NS_STATUS_ENQ_RQ :

			if (State_timer_ns (VN6_T322) == OFF) {
				Send_to_d_channel (STATUS_ENQ);
				Start_timer_ns (VN6_T322);
			}
			return (OK);

		case TI_322 :		/* implementation dependent */

			if (i_entity_origination == ENT_TI) {

				return (OK);

			} else {

				break;
			}

		case TI_312 :		/* no process */

			switch (Call_state) {
				case STATE_CALL_PRESENT_6 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_ACTIVE_10 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_DISCONNECT_INDICATION_12 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_OVERLAP_RECEIVING_25 :

					if (vn6_nb_active_ces () == 0) {

							/* no more ces able to proceed */

						load_ie_cause ();
						Send_to_call_control (NS_CLEAR_CO);
						call_clear ();
					}
					break;

				case STATE_CALL_ABORT_22 :
					load_ie_cause ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				default :
					ns_unexpected_ev ();

			}

			return (OK);

#		if NS_RESTART_PROCEDURE == ON /* { */

			case TI_316 :

				if (Dl_rest_state == STATE_REST_1) {

					if (++N316 == VN6_MX_N316) {

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_316);
						Dl_restart_reset ();

					} else {

						Set_call_ref_not_nil ();

							/* store Restart Indicator with value saved in DL context */

						set_ie_i (CODESET_0, RESTART_IND);
						I_restart_ind_class = Dl_rest_class;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

								/* store Channel-ID */

							ie_implicit_val_x (CODESET_0, CHAN_ID, 0);
							set_ie_i (CODESET_0, CHAN_ID);

							I_chan_id_d_chan = NOT_D_CHAN;		/* B-Channel indicated */
							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							if (Na_type == BRI) {

								/* Basic Rate */

								I_chan_id_int_type = INT_TYPE_BRI;
								I_chan_id_chan_sel = Dl_rest_chan_nb;	/* B1_CHAN or B2_CHAN */

							} else {

								/* Primary Rate */

								I_chan_id_int_type = INT_TYPE_PRI;
								I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
								I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

								I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
								*I_chan_id_a_chan_number = Dl_rest_chan_nb;	/* channel number */
								Set_ext_bit (*I_chan_id_a_chan_number);		/* Set the extension bit to 1 in the chan_nb field before sending SPDU */
							}
						}

						Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
						Restart_dl_timer (VN6_T316);
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case TI_317 :

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART :

				if (Dl_rest_state == STATE_REST_0) {

					Start_dl_timer (VN6_T317);
					Set_call_ref_nil ();		/* to use CONN_ID_MANAGEMENT */
					Send_to_call_control (NS_RESTART_IN);
					Dl_rest_state = STATE_REST_2;

					if (I_restart_ind_class == RI_ALL_INTERFACES) {
						csc_clear_all_call ();
						Na_internal_restart = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART_ACK :

				if (Dl_rest_state == STATE_REST_1) {

					Stop_dl_timer (VN6_T316);

					if (Dl_rest_resp == ON) {

						ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
						Dl_restart_reset ();

					} else {

						Dl_rest_ack = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RS :

				Stop_dl_timer (VN6_T317);

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

						Set_call_ref_not_nil ();
						Send_to_d_channel (RESTART_ACK);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RQ :

				if (Dl_rest_state != STATE_REST_0) {

					call_clear ();

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

#		endif /* NS_RESTART_PROCEDURE == ON} */

		case DA_CONN :
		case INT_CONN_IN :
		case NS_CONN_RS :

			if (Call_ces_connect == NIL) {

				Call_ces_connect = Dl_ces;
			}

			break;


	} /* End switch (event_id) */

/*.........................................................................*/

				/* 3 - STATE DRIVEN PROCESS */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "vn6_circuit_switched_call_n");
	}

	switch (Call_state) {

			/* Null state (n0) */

		case STATE_NULL_0 :
			vn6_n0 ();
			break;

			/* Call initiated (n1) */

		case STATE_CALL_INIT_1 :
			vn6_n1 ();
			break;

			/* Overlap sending (n2) */

		case STATE_OVERLAP_SENDING_2 :
			vn6_n2 ();
			break;

			/* Outgoing call proceeding (n3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			vn6_n3 ();
			break;

			/* Call delivered (n4) */

		case STATE_CALL_DELIVERED_4 :
			vn6_n4 ();
			break;

			/* Call present (n6) */

		case STATE_CALL_PRESENT_6 :
			vn6_n6 ();
			break;

			/* Call received (n7) */

		case STATE_CALL_RECEIVED_7 :
			vn6_n7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			vn6_n8 ();
			break;

			/* Incoming call proceeding (n9) */

		case STATE_INCOMING_CALL_PROC_9 :
			vn6_n9 ();
			break;

			/*  Active (n10) */

		case STATE_ACTIVE_10 :
			vn6_n10 ();
			break;

			/* Disconnect request (n11) */

		case STATE_DISCONNECT_REQUEST_11 :
			vn6_n11 ();
			break;

			/* Disconnect indication (n12) */

		case STATE_DISCONNECT_INDICATION_12 :
			vn6_n12 ();
			break;

			/* Suspend request (n15) */

		case STATE_SUSPEND_REQUEST_15 :
			vn6_n15 ();
			break;

			/* Resume request (n17) */

		case STATE_RESUME_REQUEST_17 :
			vn6_n17 ();
			break;

			/* Release request (n19) */

		case STATE_RELEASE_REQUEST_19 :
			vn6_n19 ();
			break;

			/* CALL ABORT (n22) */

		case STATE_CALL_ABORT_22 :
			vn6_n22 ();
			break;

			/* Overlap receiving (n25) */

		case STATE_OVERLAP_RECEIVING_25 :
			vn6_n25 ();
			break;

			/* Unknown state --> Trap */

			/*  Registration service request (n254) France Telecom only */

		case STATE_REGISTRATION_REQUEST_254 :
			vn6_n254 ();
			break;

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "vn6_circuit_switched_call_n");

	}

/*.........................................................................*/


	if (Na_connection == POINT_TO_MULTIPOINT) {

					/* 4 - INTERNAL PROCESS */

		if (i_entity_origination == ENT_CC) {
			vn6_internal_process ();
		}
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            vn6_internal_process - (for individual terminals in multipoint
					configuration only)
Usage          	uchar vn6_internal_process ();


Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

void vn6_internal_process ()
{

	switch (event_id) {

		case DA_STATUS :
		case DA_STATUS_ENQ :

			/*	these events may be received in any call state :
				they are processed in circuit-switched-call-n() */

			return;
	}

	if (Call_current_exist && Dl_current_exist) {

			/* Internal state are meaningful for outgoing calls only */

		if (Call_ces_setup != DL_CES_BROADCAST) return;

		switch (Call_int_state) {

			case STATE_0_I :
				vn6_n0i ();
				break;

			case STATE_7_I :
				vn6_n7i ();
				break;

			case STATE_8_I :
				vn6_n8i ();
				break;

			case STATE_9_I :
				vn6_n9i ();
				break;

			case STATE_19_I :
				vn6_n19i ();
				break;

			case STATE_25_I :
				vn6_n25i ();
				break;

			default :

				/* Unknown state --> Trap */

				Trap (TRAP_UNKNOWN_CALL_STATE, "vn6_circuit_switched_call_n");
				break;
		}

		switch (event_id) {	/* shall be done after the state-specific treatment */

			case INT_REL_RQ :
				Stop_int_timer  (CURRENT_INT_TIMER);
				Start_int_timer (VN6_T308I);
				Send_to_d_channel_and_save_spdu (REL);
				Set_int_ces_state (STATE_19_I);
				event_id = EV_NIL;
				break;
		}

    }
}

/*-------------------------------------------------------------------------*/

void vn6_send_to_ces (ev_id, ie_flag, the_ces)

	uchar 		ev_id;				/* event_id */
	uchar       ie_flag;            /* ON : use current cause, OFF : forced cause */
	uchar		the_ces;
{
	switch (ev_id) {

		case REL :

			if (Call_int_ces_state(the_ces) == STATE_19_I) {

				/* do not send RELEASE if individual process is in state 19 */

				break;
			}
				/* Cause forced ? */

			if (ie_flag == OFF) {
				Reset_internal_ie   ();
				set_i_cause         (C_C_NORMAL_EVENT, C_V_NON_SELECTED_USER_CLEARING_26, P_NIL);
			}

				/* Send RELEASE to the terminal on the_ces */

			Ns_access_dl_ces    (Ces_from_x (the_ces));
			Stop_int_timer 		(CURRENT_INT_TIMER);
			Start_int_timer		(VN6_T308I);
			Send_to_d_channel   (REL);
			Set_int_ces_state 	(STATE_19_I);

		break;

		case INFO :
			Send_to_d_channel (INFO);
			break;
	}
}

/*-------------------------------------------------------------------------*/

void vn6_send_to_other_ces (ev_id, ie_flag)

	uchar 		ev_id;				/* event_id */
	uchar       ie_flag;            /* ON : use current cause, OFF : forced cause */
{
	register    uchar the_ces;		/* index */

	for (the_ces = 0; the_ces < DL_MX_DLCEP; the_ces++) {

		if ((Ces_from_x (the_ces) != Call_ces) &&
			(Call_int_ces_state(the_ces) != STATE_0_I)) {

			vn6_send_to_ces (ev_id, ie_flag, the_ces);
		}
	}

		/* Restore initial dl context */

	Ns_access_dl_ces (Call_ces);
}

/*-------------------------------------------------------------------------*/

uchar vn6_nb_other_active_ces ()
{
	uchar	the_ces;	/* index */
	uchar	active_ces;	/* nb of terminal with Call_alert == ON except the one on current ces */

	active_ces = 0;

	for (the_ces = 0; the_ces < DL_MX_DLCEP; the_ces++) {

		if ((Call_alert (the_ces) == ON) && (Ces_from_x (the_ces) != Dl_ces)) {
			active_ces++;
		}
	}

	return (active_ces);
}

/*-------------------------------------------------------------------------*/

uchar vn6_nb_active_ces ()
{
	uchar	the_ces;	/* index */
	uchar	active_ces;	/* nb of terminal with Call_alert == ON */

	active_ces = 0;

	for (the_ces = 0; the_ces < DL_MX_DLCEP; the_ces++) {

		if (Call_alert (the_ces) == ON) {
			active_ces++;
		}
	}

	return (active_ces);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	vn6_csc_dl_reinit_n () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void vn6_csc_dl_reinit_n ();


Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

void vn6_csc_dl_reinit_n ()
{

	ns_access_first_call ();

	while (Call_current_exist) {

			/* Only the Call using the current DL */

		if (Call_ces == Dl_ces) {

			switch (Call_state) {


				case STATE_OVERLAP_SENDING_2 	:
				case STATE_OVERLAP_RECEIVING_25 :
					ns_stop_all_timers ();
					set_i_cause (C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_TEMPORARY_FAILURE_41, P_NIL);
					Send_to_d_channel (DISC);
					Set_state (STATE_DISCONNECT_INDICATION_12);
					Start_timer_ns (VN6_T305);

				default :
					break;


			}

		}

		ns_access_next_call ();
	}

}

#endif

/*EOF*/

