

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_spdu.vn6
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta description of the messages
 * (signalling protocol data unit).
 *
 *		FT_VN6 specific function :
 *
 *		 vn6_ie_type_eval - implements the evaluation of a conditional
 *					    IE type : Mandatory or Optional.
 *
 *-------------------------------------------------------------------------*/


/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
*
*SPDU model description :
*------------------------
*
*            spdu    tab_spdu
*    =====================================================
*    | id | event_id | u_n | n_u | type | p_ie | p_ie_SO |
*    |----|----------|-----|-----|------|------|---------|
*    |    |          |     |     |      |  X-------   X-------------------
*    |----|----------|-----|-----|------|------|  |      |               |
*    |    |          |     |     |      |      |  |      |               |
*    |----|----------|-----|-----|------|------|- | -----|               |
*    |    |          |     |     |      |      |  |      |               |
*                                                 |                      |
*                            spdu_ie              |                      |
*            =====================================v====================  |
*            | id | codeset | u_n | n_u | type | lgth_mini |lgth_maxi |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            ----------------                                            |
*                       |                                                |
*                       |                                                |
*                       -------> tab_ie                                  |
*                                                     --------------------
*                                          spdu_ie_so |
*                                        =============v=====================
*                                        | id | codeset | u_n | n_u | type |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*
*/

					/* FT_VN6 SPDU parametrers description */

CONST	struct spdu_param VN6_SPDU_PARAM = {
	PROTOCOL_DISCRIMINATOR_I451,		/* Protocol discriminator I.451 (Q.931) */
	1,									/* BRI call reference length for outgoing SPDU */
	1,									/* BRI call reference minimum length for checking incoming SPDU */
	1,									/* BRI call refernce maximum length for  checking incoming SPDU */
	2,									/* PRI call reference length for outgoing SPDU */
	2,									/* PRI call reference minimum length for checking incoming SPDU */
	2,									/* PRI call reference maximum length for checking incoming SPDU */
	OFF,								/* IE ordered by IE ID only in the SPDU */
	ON,									/* Locking shift allowed */
	ON,									/* Non locking shift allowed */
	ON,									/* Null length IE are considered as missing in the SPDU */
	1,									/* Message type maximum length */
	OFF,								/* Global call reference value not meaningful */
	OFF,								/* NS segmentation. */
	ON,									/* NS restart procedure */
	0,									/* Maximum number of restablish Data Link retry */
	16,									/* D channel */
	31									/* Maximum number of B channels */
};

					/*
						FT_VN6 procedure parameters description
						ON approve of the comment / OFF disapprove
					*/

CONST	struct net_proc_param VN6_NET_PROC_PARAM = {
	OFF,								/* Some timers depend from the configuration type (POINT_TO_?) */
	ON,									/* IE comprehension required procedure is applicable */
	OFF,								/* The sending a STATUS message is filtered according the cause value */
	ON,									/* Clear internal call when data link failure */

#	if EQUIPMENT == NT2
		ON,								/* Internal timers are handled */
#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		OFF,							/* NFAS support */
#	endif

	OFF,								/* NS_INFO_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_FAC_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_NOTIFY_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
};

					/*
						 Message description :
							- information element identifier,
							- information element codeset,
							- call control to D channel transfer (ON or OFF),
							- D channel to call control transfer (ON or OFF),
							- type (Mandatory Optional, Conditional),
							- minimal length,
							- maximal length,
							- number of allowed repetition.
					*/


/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/


							/* Alerting (ALERT) */

CONST	struct spdu_ie ALERT_IE_VN6[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		5,		MX_CHAN_ID},
	{FACILITY,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		255,	MX_FACILITY},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		4,		MX_PROGRESS_IND},
	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		OP,		3,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		MX_DISPLAY},
	{USER_PCS,		CODESET_6,		U_N_ALL,	OFF,		OP,		2,		67,		1},
	{PCS_USER,		CODESET_6,		OFF,		N_U_ALL,	OP,		2,		67,		1},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL}
};

							/* Call proceeding (CALL_PROC) */

CONST	struct spdu_ie CALL_PROC_IE_VN6[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		5,		MX_CHAN_ID},
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		5,		MX_CHAN_ID},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		4,		MX_PROGRESS_IND},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		OFF,		N_U_ALL,	OP,		7,		9,		1},
#	endif
	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		OP,		3,		4,		1},

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Connect (CONNECT) */

CONST	struct spdu_ie CONN_IE_VN6[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini     maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		5,		MX_CHAN_ID},
	{ADVICE_CHARGE, CODESET_5,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{ADVICE_CHARGE, CODESET_6,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{FACILITY,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		255,	MX_FACILITY},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		4,		MX_PROGRESS_IND},
	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		OP,		3,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{DATE_TIME,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		8,		1},
	{USER_PCS,		CODESET_6,		U_N_ALL,	OFF,		OP,		2,		67,		1},
	{PCS_USER,		CODESET_6,		OFF,		N_U_ALL,	OP,		2,		67,		1},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{LLC,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		16,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL}
};

							/* Connect acknowledge (CONNECT_ACK) */

CONST	struct spdu_ie CONN_ACK_IE_VN6[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini     maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		5,		MX_CHAN_ID},
	{ADVICE_CHARGE, CODESET_5,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{ADVICE_CHARGE, CODESET_6,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Progress (PROGRESS) */

CONST	struct spdu_ie PROGRESS_IE_VN6[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		32,		1},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		4,		MX_PROGRESS_IND},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{USER_PCS,		CODESET_6,		U_N_ALL,	OFF,		OP,		2,		67,		1},
	{PCS_USER,		CODESET_6,		OFF,		N_U_ALL,	OP,		2,		67,		1},
	{UUI,			CODESET_0,		OFF,		N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL}
};

							/* Setup (SETUP) */

CONST	struct spdu_ie SETUP_IE_VN6[] =	{
/*    ie        	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{BC,			CODESET_0,      U_N_ALL,	N_U_ALL,	MD,		4,		13,		1},
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		2,		5,		MX_CHAN_ID},
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		5,		MX_CHAN_ID},
	{FACILITY,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		255,	MX_FACILITY},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		4,		MX_PROGRESS_IND},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		34,		MX_SPF_FAC},
#	endif

	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		CD,		3,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		34,		1},
	{CALLING_NB,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		22,		VN6_MX_CALLING_NB},
	{CALLING_SUB_ADD,CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		11,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		23,		1},
	{CALLED_SUB_ADD,CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		11,		1},
	{REDIR_NB,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		22,		1},
	{USER_PCS,		CODESET_6,		U_N_ALL,	OFF,		OP,		2,		67,		1},
	{PCS_USER,		CODESET_6,		OFF,		N_U_ALL,	OP,		2,		67,		1},
	{TRANSIT_NET_SEL,CODESET_0,		U_N_ALL,	OFF,		OP,		2,		255,	MX_TRANSIT_NET_SEL},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{LLC,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		16,		1},
	{HLC,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		4,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL}
};

CONST	struct spdu_ie_so SETUP_IE_SO_VN6[] =	{
/*	   ie				codeset     u ---> n    n ---> u    type */
	{SENDING_COMPLETE,	CODESET_0,	U_N_ALL,	N_U_ALL,	OP},
	{IE_NIL}
};

							/* Setup acknowledge (SETUP_ACK) */

CONST	struct spdu_ie SETUP_ACK_IE_VN6[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		5,		MX_CHAN_ID},
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		2,		5,		MX_CHAN_ID},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		4,		MX_PROGRESS_IND},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

/*===============    CALL  INFORMATION  PHASE  MESSAGES    ====================*/

							/* Resume (RES) */

CONST	struct spdu_ie RES_IE_VN6[] =	{
/*    	ie         	codeset 	  u --->n   	n--->u		type    mini    maxi repetition */
	{CALL_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		10,		1},
	{IE_NIL}
};

							/* Resume acknowledge (RES_ACK) */

CONST	struct spdu_ie RES_ACK_IE_VN6[] =	{
/*    	ie         	codeset 	  u --->n		n--->u		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		5,		MX_CHAN_ID},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Resume reject (RES_REJ) */

CONST	struct spdu_ie RES_REJ_IE_VN6[] =	{
/*    	ie    	    codeset		  u --->n 	 	n--->u 		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		32,		MX_CAUSE},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Suspension (SUSP) */

CONST	struct spdu_ie SUSP_IE_VN6[] =	{
/*    	ie         	codeset 	  	u --->n 	n--->u  	type    mini    maxi repetition */
	{CALL_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		10,		1},
	{IE_NIL}
};

							/* Suspension acknowledge (SUSP_ACK) */

CONST	struct spdu_ie SUSP_ACK_IE_VN6[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Suspension reject (SUSP_REJ) */

CONST	struct spdu_ie SUSP_REJ_IE_VN6[] =	{
/*    ie            codeset 	  u --->n		n--->u 		type   mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		32,		MX_CAUSE},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* User information (USER_INFO) */

CONST	struct spdu_ie USER_INFO_IE_VN6[] =	{
/* 		ie         	codeset 	  u --->n		n--->u  	type    mini    maxi repetition */
	{USER_FAC,		CODESET_6,		FG_NT_NET,	FG_NT_NET,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		3,		131,	1},
	{IE_NIL}
};

CONST	struct spdu_ie_so USER_INFO_IE_SO_VN6[] =	{
/*	   ie			codeset     u ---> n    n ---> u    type */
	{MORE_DATA,		CODESET_0,	U_N_ALL,	N_U_ALL,	OP},
	{IE_NIL}
};

							/* Enregistrement - Registration (REGISTRATION) */

CONST	struct spdu_ie REG_IE_VN6[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */

#if NS_SPF_FACILITY == ON
	{SPF_FAC,		CODESET_0,		U_N_ALL,	OFF,		MD,		4,		26,		1},
#endif

	{IE_NIL},
};

							/* Acceptation Enregistrement - Registration acknowledgement (REG_ACK) */

CONST	struct spdu_ie REG_ACK_IE_VN6[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */

#if NS_SPF_FACILITY == ON
	{SPF_FAC,		CODESET_0,		OFF,		N_U_ALL,	MD,		4,		26,		1},
#endif

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

							/* Refus d'Enregistrement - Registration reject (FT_REG_REJ) */

CONST	struct spdu_ie REG_REJ_IE_VN6[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

							/* Disconnect (DISCONNECT) */

CONST	struct spdu_ie DISC_IE_VN6[] =	{
/*    ie         	codeset 	  	u --->n 	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		32,		MX_CAUSE},
	{ADVICE_CHARGE, CODESET_5,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{ADVICE_CHARGE, CODESET_6,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{FACILITY,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		255,	MX_FACILITY},
	{PROGRESS_IND,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		4,		MX_PROGRESS_IND},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		OFF,		N_U_ALL,	OP,		9,		11,		2},
#	endif

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},

#	if NS_SPF_FACILITY == ON
		{CALLED_NB,		CODESET_0,	U_N_ALL,	N_U_ALL,	OP,		2,		23,		1},
		{CALLED_SUB_ADD,CODESET_0,	U_N_ALL,	N_U_ALL,	OP,		2,		11,		1},
#	endif

	{USER_PCS,		CODESET_6,		U_N_ALL,	OFF,		OP,		2,		67,		1},
	{PCS_USER,		CODESET_6,		OFF,		N_U_ALL,	OP,		2,		67,		1},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL}
};

							/* Release (REL) */

CONST	struct spdu_ie REL_IE_VN6[] =	{
/*    	ie         	codeset 	  	u --->n 	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		32,		MX_CAUSE},
	{ADVICE_CHARGE, CODESET_5,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{ADVICE_CHARGE, CODESET_6,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{FACILITY,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		255,	MX_FACILITY},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		OFF,		N_U_ALL,	OP,		9,		11,		2},
		{SPF_FAC,	CODESET_0,		U_N_ALL,	OFF,		OP,		7,		11,		1},
#	endif

	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		OP,		3,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},

#	if NS_SPF_FACILITY == ON
		{CALLED_NB,		CODESET_0,	U_N_ALL,	N_U_ALL,	OP,		2,		23,		1},
		{CALLED_SUB_ADD,CODESET_0,	U_N_ALL,	N_U_ALL,	OP,		2,		11,		1},
#	endif

	{USER_PCS,		CODESET_6,		U_N_ALL,	OFF,		OP,		2,		67,		1},
	{PCS_USER,		CODESET_6,		OFF,		N_U_ALL,	OP,		2,		67,		1},
	{USER_FAC,		CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		2,		10,		1},
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL}
};

							/* Release complete (REL_COM) */

CONST	struct spdu_ie REL_COM_IE_VN6[] =	{
/*    	ie         	codeset 	  	u --->n  	n--->u 	   type    mini    maxi	repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		32,		MX_CAUSE},
	{ADVICE_CHARGE, CODESET_5,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{ADVICE_CHARGE, CODESET_6,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{FACILITY,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		255,	MX_FACILITY},
	{USER_MODE,		CODESET_6,		U_N_ALL,	OFF,		OP,		3,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},

#	if NS_SPF_FACILITY == ON
		{CALLED_NB,		CODESET_0,	U_N_ALL,	N_U_ALL,	OP,		2,		23,		1},
		{CALLED_SUB_ADD,CODESET_0,	U_N_ALL,	N_U_ALL,	OP,		2,		11,		1},
#	endif

	{USER_PCS,		CODESET_6,		U_N_ALL,	OFF,		OP,		2,		67,		1},
	{PCS_USER,		CODESET_6,		OFF,		N_U_ALL,	OP,		2,		67,		1},
	{UUI,			CODESET_0,		U_N_ALL,	OFF,		OP,		2,		131,	1},
	{IE_NIL}
};

							/* Restart (RESTART) */

CONST	struct spdu_ie RESTART_IE_VN6[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		2,		255,	MX_CHAN_ID},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{RESTART_IND,	CODESET_0,  	U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL}
};

							/* Restart acknowledge (RESTART_ACK) */

CONST	struct spdu_ie RESTART_ACK_IE_VN6[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		2,		255,	MX_CHAN_ID},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{RESTART_IND,	CODESET_0,  	U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL}
};


/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

							/* Congestion Control (CON_CON) */

CONST	struct spdu_ie CON_CON_IE_VN6[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini     maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		32,		MX_CAUSE},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

CONST	struct spdu_ie_so CON_CON_IE_SO_VN6[] =	{
/*	   ie			codeset     	u ---> n    n ---> u    type */
	{CONGEST_LEVEL,	CODESET_0,		U_N_ALL,    N_U_ALL,    MD},
	{IE_NIL}
};

							/* Facility (FAC) */

CONST	struct spdu_ie FAC_IE_VN6[] =	{
/*      ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{FACILITY,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		255,	MX_FACILITY},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		U_N_ALL,	OFF,		MD,		7,		9,		1},
#	endif

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{USER_PCS,		CODESET_6,		U_N_ALL,	OFF,		OP,		2,		131,		1},
	{PCS_USER,		CODESET_6,		OFF,		N_U_ALL,	OP,		2,		131,	1},
	{IE_NIL}
};

							/* Acceptation facilite - Facility acknowledge (FT_FAC_ACK) */

CONST	struct spdu_ie FAC_ACK_IE_VN6[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};
							/* Refus facilite - Facility reject (FT_FAC_REJ) */


CONST	struct spdu_ie FAC_REJ_IE_VN6[] =	{
/*    ie         	codeset		  u --->n  		n--->u		type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		32,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		82,		1},
	{IE_NIL},
};
							/* Information (INFO) */

CONST	struct spdu_ie INFO_IE_VN6[] =	{
/*    	ie         	codeset			u --->n 	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,    OP,		4,		32,		MX_CAUSE},
	{ADVICE_CHARGE, CODESET_5,      OFF,        N_U_ALL,    OP,     3,      8,      1},
	{ADVICE_CHARGE, CODESET_6,      OFF,        N_U_ALL,    OP,     3,      8,      1},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		OFF,		N_U_ALL,	OP,		6,		11,		1},
#	endif

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		34,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		2,		23,		1},
	{IE_NIL}
};

CONST	struct spdu_ie_so INFO_IE_SO_VN6[] =	{
/*	   ie				codeset     u ---> n    n ---> u    type */
	{SENDING_COMPLETE,	CODESET_0,	U_N_ALL,	N_U_ALL,	OP},
	{IE_NIL}
};

							/* Notify (NOTIFY) */

CONST	struct spdu_ie NOTIFY_IE_VN6[] =	{
/*    	ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{NOTIF_IND,		CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Status (STATUS) */

CONST	struct spdu_ie STATUS_IE_VN6[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		32,		MX_CAUSE},
	{CALL_STATE,	CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

							/* Status enquiry (STATUS_ENQ) */

CONST	struct spdu_ie STATUS_ENQ_IE_VN6[] =	{
/*    	ie         	codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		34,		1},
	{IE_NIL}
};

/*=========================================================================*/

#define Ns_vn6_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_vn6_end_table_or_function		};

#define Ns_vn6_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)		\
			Ns_tab_spdu_entry (pr, ev, u_n, n_u, usa, t_ie, t_so_ie),

#include "vn6.tab_spdu"		/* include Table describing the primitives */

#define VN6_MX_TAB_SPDU  (sizeof (VN6_TAB_SPDU)/ sizeof (struct spdu))	/* table size */

CONST	uchar	vn6_mx_size_spdu = VN6_MX_TAB_SPDU;

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             vn6_ie_type_eval - implements the evaluation of a conditional
									IE type : Mandatory or Optional.

Usage            uchar vn6_ie_type_eval (uchar spdu_id_p, uchar ie_id_p);
							- spdu_id_p : SPDU ID,
							- ie_id_p   :  IE ID,

Return value    vn6_ie_type_eval returns the IE type Mandatory or optional.

common constants and declarations : services.h, ns.h

common objects : call context
							- direction : from network or from user.

*--------------------------------------------------------------------------*/

uchar vn6_ie_type_eval (spdu_id_p, ie_id_p)
	uchar	spdu_id_p;			/* SPDU ID */
	uchar	ie_id_p;			/* IE ID */

{

	switch (spdu_id_p) {

		case CALL_PROC :

			switch (ie_id_p) {

				case CHAN_ID :

						/* CHAN_ID is Mandatory if network first response to setup */

					if	(Call_current_exist &&
						((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) &&
						(i_entity_origination == ENT_DL_D)) {
						return (MD);

					} else {

						return (OP);
					}

			}

			break;

		case SETUP :

			switch (ie_id_p) {

				case USER_MODE :

					if ((Na_country == FRANCE) && (Na_fct != FG_NT_TE)) return (MD);	/* MD for VN3, but accept it on NT side */

						/*
							otherwise OP, to accept it in incoming SETUP
							on NT side even if EUROPE, to enhance compatibility
							with terminals
						*/

					return (OP);
			}

			break;

		case REL :
		case REL_COMP :

				/*
					CAUSE is Mandatory when first clearing message.
					but is either optional or to exclude from the message.
				*/

			switch (ie_id_p) {

				case CAUSE :

					if ((! Call_current_exist) || (Call_rel_flag == ON)) {
						return (MD);

					}

					return (OP);
			}

			break;

		case RESTART :
		case RESTART_ACK :

			if (i_entity_origination == ENT_DL_D) {
				return (OP);

			} else {

				if (I_restart_ind_class == RI_INDICATED_CHANNEL) return (MD);
				else return (EX);
			}

		default :
			Trap (TRAP_IE_TYPE, "vn6_ie_type_eval");

	}

	return (OP);

}

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Table above */


#undef Ns_vn6_table_or_function

#undef Ns_vn6_end_table_or_function
#undef Ns_vn6_tab_spdu_entry

#define Ns_vn6_table_or_function(str, tab)	i_pic = 0;						

#define Ns_vn6_end_table_or_function

#define Ns_vn6_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)						\
			Pic_init_struct_array (VN6_TAB_SPDU, i_pic, p_ie, (struct spdu_ie *)t_ie);	\
			Pic_init_struct_array_next (VN6_TAB_SPDU, p_ie_so, (struct spdu_ie_so *)t_so_ie);

void pic_init_ns_vn6_spdu ()
{
	uchar   i_pic;

#	include "vn6.tab_spdu"
}

#endif /* end of PIC used} */

/*EOF*/

