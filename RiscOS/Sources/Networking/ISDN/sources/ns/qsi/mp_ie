/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - mp_ie.qsi
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	qsi_bc_5_spdu			(Void_parm);
	uchar	qsi_bc_6_spdu			(Void_parm);
	uchar	qsi_bc_7_spdu			(Void_parm);
	uchar	qsi_called_plan_id		(Void_parm);
	uchar	qsi_calling_nb_spdu		(Void_parm);
	uchar	qsi_conn_nb_spdu		(Void_parm);
	uchar	qsi_cause_spdu			(Void_parm);
	uchar	qsi_llc_3a_spdu			(Void_parm);
	uchar	qsi_llc_4b_spdu			(Void_parm);
	uchar	qsi_llc_5_spdu			(Void_parm);
	uchar	qsi_llc_6_spdu			(Void_parm);
	uchar	qsi_llc_7_spdu			(Void_parm);
	uchar	qsi_restart_spdu		(Void_parm);

#	if NS_SUPP_SERVICES == ON
		uchar	qsi_facility_spdu	(Void_parm);
#	endif 

#endif

				/* ---------- Bearer capability (BC) */


D_START	(QSI_BC_P)
		D_TABL				(_CODING_STD)
		D_TABX				(_TRF_CAP)
		D_EXT_1				(_3)

		D_VAL				(_TRF_MODE)
		D_TABX				(_TRF_RATE)
		D_EXT_1				(OCTETS_4)

		D_IF_VAL			(CODING_CCITT)

			D_OPTIONAL_OCTET	(_5ABCD_6_7)

			D_FUNCTION			(OCTET_5)
			D_IF_VAL			(OCTET_5_PR)
				D_VAL			(LAYER_1)
				D_TABX			(PROTOCOL_1)

					/* V110 */

				D_IF_VAL			(V110)
					D_EXT_0_1		(_5)
					D_TABL			(V110_SYN_ASYN)
					D_TABL			(V110_NEGOTIATION)
					D_TABL			(V110_USER_RATE)
					D_EXT_0_1		(V110_5A)
					D_TABL			(V110_INTER_RATE)
					D_TABL			(V110_TX_NIC)
					D_TABL			(V110_RX_NIC)
					D_TABL			(V110_TX_FC)
					D_TABL			(V110_RX_FC)
					D_PAD			(V110_PAD_5B)
					D_EXT_0_1		(V110_5B)
					D_TABL	 		(V110_STOP_BIT)
					D_TABL	 		(V110_DATA_BIT)
					D_TABL	 		(V110_PARITY)
					D_EXT_0_1		(V110_5C)
					D_TABL	 		(V110_DUPLEX)
					D_TABL	 		(V110_MODEM)
				D_END_IF			(ENDIF_V110)


					/* V120 */

				D_IF_VAL		(V120_)
					D_EXT_0_1	(_5_V120)
					D_TABL		(V120_SYN_ASYN)
					D_TABL		(V120_NEGOTIATION)
					D_TABL		(V120_USER_RATE)
					D_EXT_0_1	(V120_5A)
					D_TABL		(V120_HDR)
					D_TABL		(V120_MULTI_FRAME)
					D_TABL		(V120_OP_MODE)
					D_TABL		(V120_LLI)
					D_TABL		(V120_ASSIGN)
					D_TABL		(V120_BAND)
					D_PAD		(V120_PAD_5B)
					D_EXT_0_1	(V120_5B)
					D_TABL		(V120_STOP_BIT)
					D_TABL		(V120_DATA_BIT)
					D_TABL		(V120_PARITY)
					D_EXT_0_1	(V120_5C)
					D_TABL		(V120_DUPLEX)
					D_TABL		(V120_MODEM)
				D_END_IF	(ENDIF_V120)

				D_IF_VAL			(NON_CCITT)
					D_EXT_0_1		(NON_CCITT_5)
					D_TABL			(NON_CCITT_SYN_ASYN)
					D_TABL			(NON_CCITT_NEGOTIATION)
					D_TABL			(NON_CCITT_USER_RATE)
				D_END_IF			(ENDIF_NON_CCITT)

				D_EXT_1				(END_5)

			D_END_IF				(_5_PR)

			D_FUNCTION				(OCTET_6)
			D_IF_VAL				(OCTET_6_PR)
				D_VAL				(L_ID_2)
				D_TABX				(PROTOCOL_ID_2)
				D_EXT_1				(_6)
			D_END_IF				(_6_PR)

			D_FUNCTION				(OCTET_7)
			D_IF_VAL				(OCTET_7_PR)
				D_VAL				(L_ID_3)
				D_TABX				(PROTOCOL_ID_3)
				D_EXT_1				(_7)
			D_END_IF				(_7_PR)

		D_END_IF					(_CODING_CCITT_)

D_END	(BC_E)


START	(QSI_BC_P)
		TABL	(5,2,QSI_T_CODING_STD,		&i_bc[0].coding_std)
		TABX	(0,5,QSI_TX_TRF_CAP_BC,		&i_bc[0].coding_std, &i_bc[0].trf_cap)
		EXT_1   ()
		VAL		(5,2,TRF_MODE_CIRCUIT,		&i_bc[0].trf_mode)
		TABX	(0,5,QSI_TX_TRF_RATE_BC,	&i_bc[0].coding_std, &i_bc[0].trf_rate)

			/*
			 * Octets 4a and 4b are never provided.
			 * That means that the following values are assumed :
			 *		Structure 		: Circuit mode, 8Khz integrity
			 *		Configuration	: point to point
			 *		Establishment	: demand
			 *		Symmetry		: bi directionnal symmetric
			 *
			 * If coding standard is CODING_STD_ECMA, no other octets
			 * shall be included.
			 */

		EXT_1   ()

		IF_VAL	(I_IF, &i_bc[0].coding_std, EQ, CODING_STD_CCITT)

			OPTIONAL_OCTET ()
			FUNCTION	(qsi_bc_5_spdu)

			IF_VAL	(N_IF, &ie_if_flag, EQ, ON)

				VAL		(5,2,LAYER_ID_1,				&i_bc[0].layer_id_1)
				TABX	(0,5,QSI_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_1,		&i_bc[0].protocol_id_1)

					/* V110 */

				IF_VAL  	(I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
					EXT_0_1 ()
					TABL	(6,1,QSI_T_SYN_ASYN,			&i_bc[0].syn_asyn)
					TABL	(5,1,QSI_T_NEGOTIATION,			&i_bc[0].negotiation)
					TABL	(0,5,QSI_T_USER_RATE,			&i_bc[0].user_rate)
					EXT_0_1 ()
					TABL	(5,2,QSI_T_INTER_RATE,			&i_bc[0].inter_rate)
					TABL	(4,1,QSI_T_NIC_TX,				&i_bc[0].tx_nic)
					TABL	(3,1,QSI_T_NIC_RX,				&i_bc[0].rx_nic)
					TABL	(2,1,QSI_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
					TABL	(1,1,QSI_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
					PAD		(0,1)
					EXT_0_1 ()
					TABL	(5,2,QSI_T_STOP_BIT,			&i_bc[0].stop_bit)
					TABL	(3,2,QSI_T_DATA_BIT,			&i_bc[0].data_bit)
					TABL	(0,3,QSI_T_PARITY,				&i_bc[0].parity)
					EXT_0_1 ()
					TABL	(6,1,QSI_T_DUPLEX,				&i_bc[0].duplex)
					TABL	(0,6,QSI_T_MODEM,				&i_bc[0].modem)
				END_IF  	()

					/* V120 */

				IF_VAL  (I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
					EXT_0_1 ()
					TABL	(6,1,QSI_T_SYN_ASYN,			&i_bc[0].syn_asyn)
					TABL	(5,1,QSI_T_NEGOTIATION,			&i_bc[0].negotiation)
					TABL	(0,5,QSI_T_USER_RATE,			&i_bc[0].user_rate)
					EXT_0_1 ()
					TABL	(6,1,QSI_T_HEADER,				&i_bc[0].hdr)
					TABL	(5,1,QSI_T_MULTI_FRAME,			&i_bc[0].multi_frame)
					TABL	(4,1,QSI_T_OP_MODE,				&i_bc[0].op_mode)
					TABL	(3,1,QSI_T_LLI,					&i_bc[0].lli)
					TABL	(2,1,QSI_T_ASSIGN,				&i_bc[0].assign)
					TABL	(1,1,QSI_T_BAND,				&i_bc[0].band)
					PAD		(0,1)
					EXT_0_1 ()
					TABL	(5,2,QSI_T_STOP_BIT,			&i_bc[0].stop_bit)
					TABL	(3,2,QSI_T_DATA_BIT,			&i_bc[0].data_bit)
					TABL	(0,3,QSI_T_PARITY,				&i_bc[0].parity)
					EXT_0_1 ()
					TABL	(6,1,QSI_T_DUPLEX,				&i_bc[0].duplex)
					TABL	(0,6,QSI_T_MODEM,				&i_bc[0].modem)
				END_IF	()

					/* NON CCITT */

				IF_VAL (I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
					EXT_0_1 ()
					TABL	(6,1,QSI_T_SYN_ASYN,			&i_bc[0].syn_asyn)
					TABL	(5,1,QSI_T_NEGOTIATION,			&i_bc[0].negotiation)
					TABL	(0,5,QSI_T_USER_RATE,			&i_bc[0].user_rate)
				END_IF		()

				EXT_1   ()

			END_IF		()

			FUNCTION(qsi_bc_6_spdu)
			IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
				VAL		(5,2,LAYER_ID_2,					&i_bc[0].layer_id_2)
				TABX	(0,5,QSI_TX_PROTOCOL_ID_BC,			&i_bc[0].layer_id_2,		&i_bc[0].protocol_id_2)
				EXT_1   ()
			END_IF		()

			FUNCTION(qsi_bc_7_spdu)
			IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
				VAL		(5,2,LAYER_ID_3,					&i_bc[0].layer_id_3)
				TABX	(0,5,QSI_TX_PROTOCOL_ID_BC,			&i_bc[0].layer_id_3,		&i_bc[0].protocol_id_3)
				EXT_1   ()
			END_IF		()

		END_IF			()		/* CODING_STD_CCITT */
END (0)
			/* ---------- Call state (CALL_STATE) */

D_START	(QSI_CALL_STATE_P)
	D_VAL	  (_CODING_STD)
	D_TABL	  (VAL_)
	D_END_OCTET (_3)
D_END   (CALL_STATE_E)

START	(QSI_CALL_STATE_P)
	VAL			(6,2,CODING_STD_CCITT,	&i_call_state[0].coding_std)
	TABL		(0,6,QSI_T_CALL_STATE,	&i_call_state[0].val)
	END_OCTET   ()
END	 (0)

			/* ---------- Called party number (CALLED_NB) */

D_START	(QSI_CALLED_NB_P)
		D_TABL  (TYPE)
		D_TABL  (PLAN_ID)
		D_FUNCTION (_PLAN_)
		D_EXT_1 (_3)
		D_TEXT  (DIGIT_)
D_END   (CALLED_NB_E)

START	(QSI_CALLED_NB_P)
		TABL	(4,3,QSI_T_NB_TYPE,  &i_called_nb[0].nb_type)
		TABL	(0,4,QSI_T_NB_PLAN,  &i_called_nb[0].plan_id)
		FUNCTION(qsi_called_plan_id)
		EXT_1   ()
		TEXT	(IA5, ANY_CHAR, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END	 (0)

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(QSI_CALLED_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CALLED_SUB_ADD_E)

START	(QSI_CALLED_SUB_ADD_P)
		TABL	(4,3,QSI_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
		TABL	(3,1,QSI_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_called_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Calling party number (CALLING_NB) */

D_START	(QSI_CALLING_NB_P)
		D_TABL		(TYPE)
		D_TABL		(PLAN_ID)
		D_FUNCTION	(CALLING_NB_FCT)
		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (CALLING_NB_E)

START	(QSI_CALLING_NB_P)
		TABL	(4,3,QSI_T_NB_TYPE, 	&i_calling_nb[0].nb_type)
		TABL	(0,4,QSI_T_NB_PLAN, 	&i_calling_nb[0].plan_id)

		FUNCTION(qsi_calling_nb_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,QSI_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,QSI_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,ANY_CHAR, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(QSI_CALLING_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CALLING_SUB_ADD_E)

START	(QSI_CALLING_SUB_ADD_P)
		TABL	(4,3,QSI_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		TABL	(3,1,QSI_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_calling_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Connected party number (CONN_NB) */

D_START	(QSI_CONN_NB_P)
		D_TABL		(TYPE)
		D_TABL		(PLAN_ID)

		D_FUNCTION	(CONN_NB_FCT)
		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CONN_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (CONN_NB_E)

START	(QSI_CONN_NB_P)
		TABL	(4,3,QSI_T_NB_TYPE, 	&i_conn_nb[0].nb_type)
		TABL	(0,4,QSI_T_NB_PLAN, 	&i_conn_nb[0].plan_id)

		FUNCTION(qsi_conn_nb_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,QSI_T_CALLING_NB_PRES, &i_conn_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,QSI_T_SCREEN_IND,		&i_conn_nb[0].screen_ind)
		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,ANY_CHAR, &i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END		(0)

			/* ---------- Connected subaddress (CONN_SUB_ADD) */

D_START	(QSI_CONN_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CONN_SUB_ADD_E)

START	(QSI_CONN_SUB_ADD_P)
		TABL	(4,3,QSI_T_SUB_ADD_TYPE,	&i_conn_sub_add[0].sub_add_type)
		TABL	(3,1,QSI_T_SUB_ADD_IND,		&i_conn_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_conn_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_conn_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_conn_sub_add[0].lgth, (uchar **)&i_conn_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_conn_sub_add[0].lgth, (uchar **)&i_conn_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Cause (CAUSE) */

D_START	(QSI_CAUSE_P)
		D_VAL	  (CODING_STD)
		D_PAD	  (NS_PAD_3)
		D_TABL	  (LOCATION)
		D_EXT_1	 (_3A)

		D_ANY_VAL	  (C_CLASS)
		D_ANY_VAL	  (C_VAL)
		D_EXT_1	 (_4)
D_END   (CAUSE_E_A)

START	(QSI_CAUSE_P)
		VAL		(5,2,CODING_STD_CCITT,		&i_cause[0].coding_std)
		PAD		(4,1)
		TABL	(0,4,QSI_T_LOCATION,		&i_cause[0].cause_loc)
		EXT_1   ()

		ANY_VAL	(4,3,						&i_cause[0].cause_class)
		ANY_VAL	(0,4,						&i_cause[0].cause_val)
		EXT_1   ()
END	 (qsi_cause_spdu)

D_START	(QSI_DIAG_P)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(QSI_DIAG_P)
	TEXT	(BINARY, ANY_OCTET, 			&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

D_START	(QSI_DIAG_CONDITION_P)
	D_TABL		(CONDITION)
	D_PAD		(PADDING)
	D_EXT_1		(DIAG)
D_END   (DIAGNOSTIC_E)

START	(QSI_DIAG_CONDITION_P)
	TABL	(0,2,QSI_T_STATUS_CONDITION,	&i_cause[0].tmp)
	PAD		(2,5)
	EXT_1	()
END		(0)

D_START	(QSI_DIAG_TIMER_P)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(QSI_DIAG_TIMER_P)
	TEXT	(IA5, DIGIT, &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

			/* ---------- Channel idendification (CHAN_ID) */

D_START (QSI_CHAN_ID_P)
	D_VAL		(INT_ID)
	D_VAL		(INT_TYPE)
	D_PAD   	(NS_PAD_3)
	D_TABL  	(PREF_EXCL)
	D_TABL		(D_CHAN_)
	D_TABL 		(SEL)
	D_EXT_1 	(_3)

	D_IF_VAL	(_AS_INDICTATED)
		D_VAL	(_CODING_)
		D_VAL	(_CHAN_NB_)
		D_VAL	(_CHAN_TYPE_)
		D_EXT_1	(_4)
		D_TEXT  (NBER)
	D_END_IF	(_AS_INDICATED_)

D_END   (CHAN_ID_E)

START   (QSI_CHAN_ID_P)
	VAL			(6,1,INT_ID_IMPLICIT,		&i_chan_id[0].int_id)
	VAL			(5,1,INT_TYPE_PRI,			&i_chan_id[0].int_type)
	PAD			(4,1)
	TABL		(3,1,QSI_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL		(2,1,QSI_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABL		(0,2,QSI_T_CHAN_SEL,		&i_chan_id[0].chan_sel)
	EXT_1   	()

	IF_VAL		(I_IF, &i_chan_id[0].chan_sel, EQ, AS_INDICATED)
		VAL		(5,2,CODING_STD_CCITT, 		&i_chan_id[0].coding_std)
		VAL		(4,1,CHAN_NUMBER,   		&i_chan_id[0].nb_map)
		VAL		(0,4,B_CHAN,		  		&i_chan_id[0].chan_type)
		EXT_1	()
		TEXT	(IA5,ANY_OCTET,				&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
	END_IF		()

END		(0)

			/* ---------- High layer compatibility (HLC) */

D_START	(QSI_HLC_P)
		D_TABL				(CODING_STD)
		D_VAL				(INTERPRETATION)
		D_VAL				(PRESENTATION)
		D_EXT_1				(_3)
		D_IF_VAL			(IF_4)
			D_TABL			(TELESERVICE)

			D_IF_TABL		(IS_EXT_TELESERVICE)
				D_EXT_0_1	(_4)
				D_TABL		(EXT_TELESERVICE)
			D_END_IF		(IS_EXTENDED)
			D_EXT_1			(_5)
		D_ELSE				(ELSE_4)
			D_ANY_VAL		(TELESERVICE_SPF)
			D_EXT_1			(_4_SPF)
		D_END_IF			(ENDIF_4)
D_END						(HLC_E)

START	(QSI_HLC_P)
		TABL				(5,2,QSI_T_CODING_STD,			&i_hlc[0].coding_std)
		VAL					(2,3,INTER_CCITT_CEPT,			&i_hlc[0].interpretation)
		VAL					(0,2,PRESENTATION_PROFIL,		&i_hlc[0].pres)
		EXT_1				()

		IF_VAL				(I_IF, &i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
			TABL			(0,7,QSI_T_TELESERVICE_CCITT,   &i_hlc[0].teleservice)

			IF_TABL			(I_IF, &i_hlc[0].teleservice, IN, QSI_T_TELESERVICE_EXT)
				EXT_0_1		()
				TABL		(0,7,QSI_T_TELESERVICE_CCITT,   &i_hlc[0].ext_teleservice)
			END_IF			()
			EXT_1			()
		ELSE				()
			ANY_VAL			(0,7,	&i_hlc[0].teleservice)
			EXT_1			()
		END_IF				()
END							(0)

			/* ---------- Low layer compatibility (LLC) */

D_START	(QSI_LLC_P)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_EXT_1		(_3)

		D_VAL		(TRF_MODE)
		D_VAL		(TRF_RATE)
		D_EXT_1	 	(_4)

		D_OPTIONAL_OCTET (_5_6_7)

		D_FUNCTION	(IF_5_)
		D_VAL		(LAYER_1)
		D_TABL		(PROTOCOL_1)

			/* V110 */

		D_IF_VAL		(V110)
			D_EXT_0_1	(_5_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_EXT_0_1	(V110_5A)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(V110_PAD_5B)
			D_EXT_0_1	(V110_5B)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_EXT_0_1	(V110_5C)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
		D_END_IF		(ENDIF_V110)

			/* V120 */

		D_IF_VAL		(V120_)
			D_EXT_0_1	(_5_V120)
			D_TABL		(V120_SYN_ASYN)
			D_TABL		(V120_NEGOTIATION)
			D_TABL		(V120_USER_RATE)
			D_EXT_0_1	(V120_5A)
			D_TABL		(V120_HDR)
			D_TABL		(V120_MULTI_FRAME)
			D_TABL		(V120_OP_MODE)
			D_TABL		(V120_LLI)
			D_TABL		(V120_ASSIGN)
			D_TABL		(V120_BAND)
			D_PAD		(V120_PAD_5B)
			D_EXT_0_1	(V120_5B)
			D_TABL		(V120_STOP_BIT)
			D_TABL		(V120_DATA_BIT)
			D_TABL		(V120_PARITY)
			D_EXT_0_1	(V120_5C)
			D_TABL		(V120_DUPLEX)
			D_TABL		(V120_MODEM)
		D_END_IF	(ENDIF_V120)


		D_IF_VAL		(NON_CCITT)
			D_EXT_0_1	(NON_CCITT_5)
			D_TABL		(NON_CCITT_SYN_ASYN)
			D_TABL		(NON_CCITT_NEGOTIATION)
			D_TABL		(NON_CCITT_USER_RATE)
		D_END_IF		(ENDIF_NON_CCITT)

		D_EXT_1		(_5_)

		D_FUNCTION	(OCTET_6)
		D_IF_VAL	(OCTET_6_PR)
			D_VAL		(L_ID_2)
			D_TABL		(PROTOCOL_ID_2)
			D_EXT_0_1	(_6)
			D_EXT_1		(_6A)
		D_END_IF	(ENDIF_6_PR)

		D_FUNCTION	(OCTET_7)
		D_IF_VAL	(OCTET_7_PR)
			D_VAL		(L_ID_3)
			D_TABL		(PROTOCOL_ID_3)
			D_EXT_0_1	(_7)
			D_EXT_1		(_7A)
		D_END_IF	(ENDIF_7_PR)

D_END (LLC_E)

START	(QSI_LLC_P)
		TABL	(5,2,QSI_T_CODING_STD,			&i_llc[0].coding_std)
		TABL	(0,5,QSI_T_TRF_CAP_LLC,			&i_llc[0].trf_cap)
		EXT_1   ()

		VAL		(5,2,TRF_MODE_CIRCUIT,			&i_llc[0].trf_mode)
		VAL		(0,5,TRF_RATE_64KBS,			&i_llc[0].trf_rate)
		EXT_1	()

		OPTIONAL_OCTET ()

			/* following octets may be optional in some other circumstances */

		FUNCTION(qsi_llc_5_spdu)
		VAL		(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
		TABL	(0,5,QSI_T_PROTOCOL_ID_LLC_1,	&i_llc[0].protocol_id_1)

			/* V110 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			EXT_0_1 ()
			TABL	(6,1,QSI_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(5,1,QSI_T_NEGOTIATION,		&i_llc[0].in_band_neg)
			TABL	(0,5,QSI_T_USER_RATE,		&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(5,2,QSI_T_INTER_RATE,		&i_llc[0].inter_rate)
			TABL	(4,1,QSI_T_NIC_TX,			&i_llc[0].tx_nic)
			TABL	(3,1,QSI_T_NIC_RX,			&i_llc[0].rx_nic)
			TABL	(2,1,QSI_T_FLOW_CONTROL_TX,	&i_llc[0].tx_fc)
			TABL	(1,1,QSI_T_FLOW_CONTROL_RX,	&i_llc[0].rx_fc)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,QSI_T_STOP_BIT,		&i_llc[0].stop_bit)
			TABL	(3,2,QSI_T_DATA_BIT,		&i_llc[0].data_bit)
			TABL	(0,3,QSI_T_PARITY,			&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,QSI_T_DUPLEX,			&i_llc[0].duplex)
			TABL	(0,6,QSI_T_MODEM,			&i_llc[0].modem)
		END_IF  ()

			/* V120 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
			EXT_0_1 ()
			TABL	(6,1,QSI_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(5,1,QSI_T_NEGOTIATION,		&i_llc[0].in_band_neg)
			TABL	(0,5,QSI_T_USER_RATE,		&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(6,1,QSI_T_HEADER,			&i_llc[0].hdr)
			TABL	(5,1,QSI_T_MULTI_FRAME,		&i_llc[0].multi_frame)
			TABL	(4,1,QSI_T_OP_MODE,			&i_llc[0].op_mode)
			TABL	(3,1,QSI_T_LLI,				&i_llc[0].lli)
			TABL	(2,1,QSI_T_ASSIGN,			&i_llc[0].assign)
			TABL	(1,1,QSI_T_BAND,			&i_llc[0].band)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,QSI_T_STOP_BIT,		&i_llc[0].stop_bit)
			TABL	(3,2,QSI_T_DATA_BIT,		&i_llc[0].data_bit)
			TABL	(0,3,QSI_T_PARITY,			&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,QSI_T_DUPLEX,			&i_llc[0].duplex)
			TABL	(0,6,QSI_T_MODEM,			&i_llc[0].modem)
		END_IF	()

			/* NON CCITT */

		IF_VAL (I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
			EXT_0_1 ()
			TABL	(6,1,QSI_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(5,1,QSI_T_NEGOTIATION,		&i_llc[0].in_band_neg)
			TABL	(0,5,QSI_T_USER_RATE,		&i_llc[0].user_rate)
		END_IF		()

		EXT_1	()


		FUNCTION(qsi_llc_6_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_2,			 &i_llc[0].layer_id_2)
			TABL	(0,5,QSI_T_PROTOCOL_ID_LLC_2,&i_llc[0].protocol_id_2)
			EXT_0_1 ()
			/* No instruction for optional octet 6a to allow only reception */
			EXT_1   ()
		END_IF ()	/* octet 6 present */

		FUNCTION(qsi_llc_7_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_3,			 &i_llc[0].layer_id_3)
			TABL	(0,5,QSI_T_PROTOCOL_ID_LLC_3,&i_llc[0].protocol_id_3)
			EXT_0_1	()
			/* No instruction for optional octet 7a to allow only reception */
			EXT_1	()
		END_IF	()	/* octet 7 present */

END (0)

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(QSI_PROGRESS_IND_P)
	D_TABL  (CODING_STD)
	D_PAD   (NS_PAD_3)
	D_TABL  (LOCATION)
	D_EXT_1 (_3)
	D_TABX  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(QSI_PROGRESS_IND_P)
	TABL	(5,2,QSI_T_CODING_STD,				&i_progress_ind[0].coding_std)
	PAD		(4,1)
	TABL	(0,4,QSI_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	EXT_1   ()
	TABX	(0,7,QSI_TX_PROG_DESCR,				&i_progress_ind[0].coding_std,		&i_progress_ind[0].progress_descr)
	EXT_1   ()
END			(0)

			/* ---------- Restart indicator */

D_START	(QSI_RESTART_IND_P)
	D_PAD	(NS_PAD_)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_E)

START	(QSI_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,QSI_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
	EXT_1	()
END			(qsi_restart_spdu)


					/*---------- CODESET 5 IE --------------*/

			/*-------- Party category */

D_START	(QSI_PARTY_CATEGORY_P)
	D_PAD	(_4)
	D_TABL	(CATEG)
	D_EXT_1	(_3_)
D_END		(PARTY_CATEGORY_E)

START	(QSI_PARTY_CATEGORY_P)
	PAD		(3,4)
	TABL	(0,3,QSI_T_PARTY_CATEGORY,			&i_party_category[0].category)
	EXT_1	()
END			(0)


			/*--------- Transit counter */

D_START	(QSI_TRANSIT_COUNTER_P)
	D_PAD		(_2)
	D_ANY_VAL   (_4)
	D_EXT_1		(_3_)
D_END		(TRANSIT_COUNTER_E)

START	(QSI_TRANSIT_COUNTER_P)
	PAD			(5,2)
	ANY_VAL		(0,4,						&i_transit_counter[0].count)
	EXT_1		()
END			(0)


		/*---------- Facility */

#if NS_SUPP_SERVICES == OFF		/* Default facility decoding = Transparent Facility */

D_START		(QSI_FAC_P)
	D_VAL	(SERVICE_DISCR)
	D_PAD	(_7_6_)
	D_EXT_1	(_3_)
	D_TEXT	(_FAC_INFO_)
D_END		(FAC_P)

START		(QSI_FAC_P)
	VAL		(0,5, FAC_SUPPLEMENTARY, &i_facility[0].service_discr)
	PAD		(5,2)
	EXT_1	()
	TEXT	(BINARY,ANY_CHAR,&i_facility[0].lgth, (uchar **)&i_facility[0].p_info)
END			(0)

#else	/* NS_SUPP_SERVICES = ON -> facility decoding = ASN1 decoding */

D_START		(QSI_FAC_P)
	D_VAL	(SERVICE_DISCR)
	D_PAD	(_7_6_)
	D_EXT_1	(_3_)
D_END		(FAC_P)

START		(QSI_FAC_P)
	VAL		(0,5, FAC_SUPPLEMENTARY, &i_facility[0].service_discr)
	PAD		(5,2)
	EXT_1	()
END	(qsi_facility_spdu)

#endif


	/*---------- Notif indicator */

D_START			(QSI_NOTIF_IND_P)
	D_ANY_VAL	(DESCR)
	D_EXT_1		(_3_)

	D_IF_VAL	(EXT)
		D_TEXT	(DATA)
	D_END_IF	(_EXT_)

D_END			(NOTIF_P)

START			(QSI_NOTIF_IND_P)
	ANY_VAL		(0,7, &i_notif_ind[0].notif_descr)
	EXT_1		()

	IF_VAL		(I_IF, &i_notif_ind[0].notif_descr, EQ, EXTENDED_DESCRIPTION)
		TEXT	(BINARY, ANY_OCTET, &i_notif_ind[0].lgth, (uchar **)&i_notif_ind[0].p_info)
	END_IF		()
END				(0)

/*EOF*/

