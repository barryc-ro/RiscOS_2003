

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_state.qsi
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        u0 to u25 - user side - implements the processing of an event
 *                     according to the state of the call (u0 to u254).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             u0 to u25 -  implements the processing of an
							  event according to the call state.

Usage            void uxx (void);

Related
functions usage void Stop_timer_ns (uchar x_timer);

				void Start_timer_ns (uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call
			*/

void qsi_u0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Send_to_call_control (NS_CONN_IN);

			if (is_ie_i (CODESET_SO, SENDING_COMPLETE) == ABSENT) {
				Call_en_bloc_flag = OFF;

			} else {

				Call_en_bloc_flag = ON;
			}

			Set_state (STATE_CALL_PRESENT_6);
			Start_timer_ns (QSI_T300);
			break;

		case NS_CONN_RQ :
			Send_to_d_channel_and_save_spdu (SETUP);

			if (is_ie_i (CODESET_SO, SENDING_COMPLETE) == ABSENT) {
				Call_en_bloc_flag = OFF;

			} else {

				Call_en_bloc_flag = ON;
			}

			Set_state (STATE_CALL_INIT_1);
			Start_timer_ns (QSI_T303);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of user
			   action requesting call establishment from the network.
			*/

void qsi_u1 ()
{
	switch (event_id) {

		case DA_CALL_PROC :
			Stop_timer_ns (QSI_T303);
			Release_saved_spdu ();		/* saved setup no more useful */
			Send_to_call_control (NS_CALL_PROC_IN);
			Start_timer_ns (QSI_T310);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			break;

		case DA_SETUP_ACK :

			if (Call_en_bloc_flag == OFF) {
				Release_saved_spdu ();		/* saved setup no more useful */
				ns_action_to_cc (QSI_T303, QSI_T304, NS_SETUP_ACK_IN,
													 STATE_OVERLAP_SENDING_2);
			} else {

					/*
						Some networks send SETUP_ACK for international calls
						even if the SETUP was in BLOC_SENDING mode to force
						the TE to stop T303 to avoid SETUP retransmission
						if the call establishment takes too long time.
						Of course, a CALL_PROC would be much better !
					*/

				Stop_timer_ns (QSI_T303);
				ns_unexpected_ev ();
			}
			break;

		case DA_ALERT :
			Release_saved_spdu ();		/* saved setup no more useful */
			Stop_timer_ns (QSI_T303);
			Send_to_call_control (NS_ALERT_IN);
			Start_timer_ns (QSI_T301);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Release_saved_spdu ();		/* saved setup no more useful */
			Stop_timer_ns (QSI_T303);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_303 :

			if (++N303 < MX_N303) {
				Send_saved_spdu_to_d_channel (SETUP);
				Restart_timer_ns (QSI_T303);

			} else {

				set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "303");
				Send_to_d_channel (REL_COMP);
				Reset_internal_ie ();
				set_i_cause (C_C_TIMER, C_V_T303, (char FAR *) &(Call_state));
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OVERLAP_SENDING_2 */

		/* Overlap sending state */

			/*
			   This state exists for an outgoing call when the user has
			   received acknowledgement of the call establishment request
			   which permits the user to send additional call information
			   to the network in overlap mode.
			*/


void qsi_u2 ()
{
	switch (event_id) {

		case DA_CALL_PROC :
			Stop_timer_ns (QSI_T304);
			Send_to_call_control (NS_CALL_PROC_IN);
			Start_timer_ns (QSI_T310);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case DA_ALERT :
			Stop_timer_ns (QSI_T304);
			Send_to_call_control (NS_ALERT_IN);
			Start_timer_ns (QSI_T301);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Stop_timer_ns (QSI_T304);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_304 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "304");
			Save_cause ();								/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (QSI_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC_3 */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void qsi_u3 ()
{
	switch (event_id) {

		case DA_ALERT :
			Stop_timer_ns (QSI_T310);
			Send_to_call_control (NS_ALERT_IN);
			Start_timer_ns (QSI_T301);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Stop_timer_ns (QSI_T310);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_PROGRESS :

				/* PROGRESS_IND IE is mandatory and so present */

			if ((I_(progress_ind, progress_descr) == PROGRESS_DESCR_IN_BAND_NOW) ||
				(I_(progress_ind, progress_descr) == PROGRESS_DESCR_NON_END_TO_END_ISDN)) {
				Stop_timer_ns (QSI_T310);
			}

			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_310 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "310");
			Save_cause ();								/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (QSI_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED_4 */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void qsi_u4 ()
{
	switch (event_id) {

		case DA_CONN :
			Stop_timer_ns (QSI_T301);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_301 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "301");
			Save_cause ();								/* to send the RELEASE if T305 expires */
			Send_to_d_channel (DISC);
			Start_timer_ns (QSI_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void qsi_u6()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Stop_timer_ns (QSI_T300);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (QSI_T300);
			Send_to_d_channel (CONN);
			Start_timer_ns (QSI_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_SETUP_ACK_RQ :

			if (Call_en_bloc_flag == OFF) {
				Stop_timer_ns (QSI_T300);
				Send_to_d_channel (SETUP_ACK);
				Start_timer_ns (QSI_T302);
				Set_state (STATE_OVERLAP_RECEIVING_25);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case NS_CALL_PROC_RQ :
			Stop_timer_ns (QSI_T300);
			Send_to_d_channel (CALL_PROC);
			Set_state (STATE_INCOMING_CALL_PROC_9);
			break;

		case TI_300 :

#			if NS_TYPE_PRI == ON

				if (Na_type == PRI) {
					set_i_cause (C_C_INVALID_MESSAGE, C_V_INCOMPATIBLE_DESTINATION_88, P_NIL);
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
				}

#			endif

			set_i_cause (C_C_TIMER, C_V_T300, (char FAR *) &(Call_state));
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED_7 */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void qsi_u7 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Start_timer_ns (QSI_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST_8 */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void qsi_u8 ()
{
	switch (event_id) {

		case DA_CONN_ACK :
			Stop_timer_ns (QSI_T313);
			Send_to_call_control (NS_CONN_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_313 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "313");
			Save_cause ();									/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (QSI_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROC_9 */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void qsi_u9 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Start_timer_ns (QSI_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE_10 */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an acknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void qsi_u10 ()
{
	switch (event_id) {


		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case NS_CONN_RS :
		case DA_CONN_ACK :

				/* no process */

			break;

#		if NS_T309 == ON

			case TI_309 :
				set_i_cause (C_C_NORMAL_EVENT, C_V_DEST_OUT_OF_ORDER_27, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
				break;

#		endif


		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST_11 */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void qsi_u11 ()
{
	switch (event_id) {

		 case TI_305 :
			Restore_cause ();	/* send saved cause of the previous DISC */
			set_ie_i (CODESET_0, CAUSE);
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (QSI_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		 default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION_12 */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void qsi_u12 ()
{
	switch (event_id) {

		case NS_CLEAR_RS :
			disc_cause_error ();
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (QSI_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void qsi_u19 ()
{
	switch (event_id) {

		case NS_CLEAR_RS :
			break;

		case TI_308 :

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (QSI_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, (char FAR *) &(Call_state));
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*--------------------------------------------------------------------------*/

		/* STATE_OVERLAP_RECEIVING_25 */

		/* Overlap receiving */

			/*

			   This state exits for an incoming call when the user
			   has acknowledged the call establishment request from
			   the network and is prepared to received additional call
			   information (if any) in overlap mode.
			*/

void qsi_u25 ()
{
	switch (event_id) {

		case NS_CALL_PROC_RQ :
			Stop_timer_ns (QSI_T302);
			Send_to_d_channel (CALL_PROC);
			Set_state (STATE_INCOMING_CALL_PROC_9);
			break;

		case NS_ALERT_RQ :
			Stop_timer_ns (QSI_T302);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (QSI_T302);
			Send_to_d_channel (CONN);
			Start_timer_ns (QSI_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_PROGRESS_RQ :
			Stop_timer_ns (QSI_T302);
			Send_to_d_channel (PROGRESS);
			break;

		case TI_302 :
			set_i_cause (C_C_TIMER, C_V_T302, (char FAR *) &(Call_state));
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;
	}

}


/*EOF*/

