
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.qsi
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.qsi */

#include "qsi.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			qsi_bc_ra_ssdu - implements the specific processing
								  of a bc rate adaptation in a SSDU
								  primitive.

Usage           uchar qsi_bc_ra_ssdu ();

Return value : 	qsi_bc_ra_ssdu returns	= OK
										= NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_bc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar qsi_bc_ra_ssdu ()
{
	if (I_(bc, coding_std) == CODING_STD_ECMA) return (OK);

	if (direction == FROM_CALL_CONTROL) {

		switch (I_(bc,protocol_id_1)) {

			case PROTOCOL_ID_1_V110 :
				ret_code = r_exec_ssdu_ie((uchar *)&QSI_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_V120 :
				ret_code = r_exec_ssdu_ie((uchar *)&QSI_P_BC_V120);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				r_exec_ssdu_ie ((uchar *)&QSI_P_BC_PAD);
				break;
		}

		return (r_exec_ssdu_ie ((uchar *)&QSI_P_BC_PROTO_2_3));

	} else {

		switch (I_(bc,protocol_id_1)) {

			case PROTOCOL_ID_1_V110 :
				ret_code = s_exec_ssdu_ie((uchar *)&QSI_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_V120 :
				ret_code = s_exec_ssdu_ie((uchar *)&QSI_P_BC_V120);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				s_exec_ssdu_ie ((uchar *)&QSI_P_BC_PAD);
				break;
		}
		return (s_exec_ssdu_ie ((uchar *)&QSI_P_BC_PROTO_2_3));
	}

}

/*-------------------------------------------------------------------------*/

uchar qsi_ssdu_called_nb_plan ()
{

	/* NB_LEVEL_3_REGIONAL permitted only in case of PRIVATE PLAN */

	if ((I_(called_nb, plan_id) != PLAN_PRIVATE) &&
		(I_(called_nb, nb_type) == NB_LEVEL_3_REGIONAL)) {
		return (NOK);
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

uchar qsi_ssdu_calling_nb_plan ()
{

	/* NB_LEVEL_3_REGIONAL permitted only in case of PRIVATE PLAN */

	if ((I_(calling_nb, plan_id) != PLAN_PRIVATE) &&
		(I_(calling_nb, nb_type) == NB_LEVEL_3_REGIONAL)) {
		return (NOK);
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

uchar qsi_ssdu_conn_nb_plan ()
{

	/* NB_LEVEL_3_REGIONAL permitted only in case of PRIVATE PLAN */

	if ((I_(conn_nb, plan_id) != PLAN_PRIVATE) &&
		(I_(conn_nb, nb_type) == NB_LEVEL_3_REGIONAL)) {
		return (NOK);
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		qsi_chan_id_ssdu - qsi_chan_id_chan_nb_ssdu
				implements the specific processing of a chan_id
				IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/
uchar qsi_chan_id_chan_nb_ssdu ()
{
	uchar i;

	if ((I_(chan_id, chan_sel) == AS_INDICATED) && (direction == TO_CALL_CONTROL)) {

		/*
		 * Reset the extension bit in the chan_nb field.
		 */

		for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
			Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
		}
	}

	return (OK);
}

uchar qsi_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		if (I_(chan_id,int_type) == INT_TYPE_BRI) {
			return (NOK);

		} else {

				/* PRI access */

			if (Na_type == BRI) {
				return (NOK);
			}

			if (I_(chan_id, chan_sel) == AS_INDICATED) {

				/*
				 * Set the extension bit to 1 in the chan_nb field.
				 * (That could be already done by CC, so we do a |=).
				 * Do not set the extension bit to the terminaison string.
				 */


				/*
				 * Set the extension bit to 1 in the chan_nb field.
				 */

				i = I_(chan_id, chan_nb_lgth)-1;

				Set_ext_bit (I_(chan_id, p_chan_nb)[i]);

			}
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			qsi_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar qsi_llc_ra_ssdu ();

Return value : 	qsi_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar qsi_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&QSI_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&QSI_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&QSI_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&QSI_P_LLC_2));

	} else {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&QSI_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&QSI_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&QSI_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&QSI_P_LLC_2));
	}

}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ / NS_ALERT_IN */

#define QSI_ALERT_IN			QSI_ALERT_RQ
#define	QSI_NET_ALERT_RQ		QSI_ALERT_IN
#define	QSI_NET_ALERT_IN		QSI_ALERT_RQ

		/* NS_CALL_PROC_RQ / NS_CALL_PROC_IN */

#define QSI_CALL_PROC_IN		QSI_CALL_PROC_RQ
#define	QSI_NET_CALL_PROC_RQ	QSI_CALL_PROC_IN
#define	QSI_NET_CALL_PROC_IN	QSI_CALL_PROC_RQ

		/* NS_CONN_RQ / NS_CONN_IN */

#define QSI_CONN_IN				QSI_CONN_RQ
#define	QSI_NET_CONN_RQ			QSI_CONN_IN
#define	QSI_NET_CONN_IN			QSI_CONN_RQ

		/* NS_CONN_RS / NS_CONN_CO */

#define QSI_CONN_CO				QSI_CONN_RS
#define	QSI_NET_CONN_RS			QSI_CONN_CO
#define	QSI_NET_CONN_CO			QSI_CONN_RS

		/* NS_PROGRESS_RQ / NS_PROGRESS_IN */

#define QSI_PROGRESS_IN			QSI_PROGRESS_RQ
#define	QSI_NET_PROGRESS_RQ		QSI_PROGRESS_IN
#define	QSI_NET_PROGRESS_IN		QSI_PROGRESS_RQ

		/* NS_SETUP_ACK_RQ / NS_SETUP_ACK_IN */

#define QSI_SETUP_ACK_IN		QSI_SETUP_ACK_RQ
#define	QSI_NET_SETUP_ACK_RQ	QSI_SETUP_ACK_IN
#define	QSI_NET_SETUP_ACK_IN	QSI_SETUP_ACK_RQ

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ / NS_CLEAR_IN */

#define QSI_CLEAR_IN			QSI_CLEAR_RQ
#define	QSI_NET_CLEAR_RQ		QSI_CLEAR_IN
#define	QSI_NET_CLEAR_IN		QSI_CLEAR_RQ

		/* NS_CLEAR_RS / NS_CLEAR_CO */

#define QSI_CLEAR_CO			QSI_CLEAR_RS
#define	QSI_NET_CLEAR_RS		QSI_CLEAR_CO
#define	QSI_NET_CLEAR_CO		QSI_CLEAR_RS

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

	/* NS_FAC_RQ / NS_FAC_CO */

#define QSI_FAC_CO				QSI_FAC_RQ
#define QSI_NET_FAC_IN			QSI_FAC_RQ
#define QSI_NET_FAC_RS			QSI_FAC_CO

	/* NS_NOTIFY_RQ / NS_NOTIFY_IN */

#define QSI_NOTIFY_IN			QSI_NOTIFY_RQ
#define QSI_NET_NOTIFY_RQ		QSI_NOTIFY_IN
#define QSI_NET_NOTIFY_IN		QSI_NOTIFY_RQ

/*-------------------------------------------------------------------------*/

		/* NS_INFO_RQ / NS_INFO_IN */

#define QSI_INFO_IN				QSI_INFO_RQ
#define	QSI_NET_INFO_RQ			QSI_INFO_IN
#define	QSI_NET_INFO_IN			QSI_INFO_RQ

		/* NS_RESTART	(No IE in this message) */

#define	QSI_NET_RESTART_RQ		QSI_RESTART_IN

		/* NS_RESTART_RS / NS_RESTART_IN */

#define QSI_RESTART_IN			QSI_RESTART_RS
#define QSI_NET_RESTART_RS		QSI_RESTART_RS
#define QSI_NET_RESTART_CO		QSI_RESTART_RS
#define	QSI_NET_RESTART_IN		QSI_RESTART_IN

/*=========================================================================*/

#define Ns_qsi_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_qsi_end_table_or_function		};

#define Ns_qsi_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_qsi_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_qsi		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_qsi_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_qsi_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "qsi.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define QSI_MX_SSDU (sizeof(QSI_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		qsi_mx_size_ssdu = QSI_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_qsi_table_or_function
#undef Ns_qsi_end_table_or_function
#undef Ns_qsi_tab_ssdu_ie_entry
#undef Ns_qsi_tab_ssdu_ie_mx_entry
#undef Ns_qsi_tab_ssdu_entry

#define Ns_qsi_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_qsi_end_table_or_function		}

#define Ns_qsi_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_qsi_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_qsi_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_qsi
#	define Message_header_ssdu_ie_qsi		Ns_qsi_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_qsi_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_qsi_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_qsi_ssdu ()
{
    uchar   i_pic;

#	include "qsi.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

