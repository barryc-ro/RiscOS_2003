

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_par.qsi
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- Implements the specific options and parameters
 * 		  of the NETWORK SIGNALLING layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*/

		/*
			NS interface sizing constants for IE variable length fields :
				maximum number of significant bytes only
				(i.e. as defined in the NS Standards).
		*/

#define QSI_MX_SZ_CALLED_NB			20			/* called number string */
#define QSI_MX_SZ_CALLED_SUB_ADD    20			/* called sub-address string */
#define QSI_MX_SZ_CONN_NB			20			/* connected number string */
#define QSI_MX_SZ_CONN_SUB_ADD 		20			/* connected sub-address string */
#define QSI_MX_SZ_CALLING_NB		20			/* calling number string */
#define QSI_MX_SZ_CALLING_SUB_ADD   20			/* calling sub-address string */

#define QSI_MX_SZ_CAUSE_DIAG		28			/* cause diagnostic string NETWORK DEPENDENT */
#define QSI_MX_SZ_CHAN_ID			30			/* chan ID string NETWORK DEPENDENT */

#define	QSI_MX_SZ_FACILITY			250			/* facility information string */
#define	QSI_MX_SZ_NOTIF_IND         250			/* notify indicator */

			/* When transparent mode is used */

#define	QSI_MX_SZ_BC_TSP					9
#define	QSI_MX_SZ_CALLED_NB_TSP				21
#define	QSI_MX_SZ_CALLING_NB_TSP			22
#define	QSI_MX_SZ_CONN_NB_TSP				22
#define	QSI_MX_SZ_CALLED_SUB_ADD_TSP		21
#define	QSI_MX_SZ_CALLING_SUB_ADD_TSP		21
#define	QSI_MX_SZ_CONN_SUB_ADD_TSP			22
#define	QSI_MX_SZ_CAUSE_TSP					30
#define	QSI_MX_SZ_CHAN_ID_TSP				30
#define	QSI_MX_SZ_FACILITY_TSP				252
#define	QSI_MX_SZ_HLC_TSP					3
#define	QSI_MX_SZ_LLC_TSP					14
#define	QSI_MX_SZ_NOTIF_IND_TSP				252
#define	QSI_MX_SZ_PROGRESS_IND_TSP			2
#define	QSI_MX_SZ_RESTART_IND_TSP			1
#define	QSI_MX_SZ_PARTY_CATEG_TSP			1
#define	QSI_MX_SZ_TRANSIT_COUNTER_TSP		1

/*--------------------------------------------------------------------------*/

			/* NETWORK SIGNALLING SIZING CONSTANTS */

#define QSI_MX_ADDITIONAL_OCTET 	10				/* maximum number of additional octet (extra octet after an EXT 1 octet) */
#define QSI_MX_DL_RETRY				0				/* maximum number of restablish Data Link retry */

					/*
							Call timer index affectation

						If timers are not used simultaneously
						they can have the same index (overlaping).

					*/
						/* Incomming and Outgoing side */

#define QSI_T300_IDX					0
#define QSI_T301_IDX					0
#define QSI_T302_IDX					0
#define QSI_T303_IDX					0
#define QSI_T304_IDX					0
#define QSI_T305_IDX					0
#define QSI_T308_IDX					0
#define QSI_T310_IDX					0
#define QSI_T313_IDX					0
#define QSI_T322_IDX					1

#if NS_T309 == ON

#	define QSI_T309_IDX					2
#	define QSI_MX_CALL_TIMER			11				/* maximum number of CALL timer index */
#	define QSI_NB_CALL_TIMER			3				/* Nb of simultaneous NS call timers */

#else

#	define QSI_MX_CALL_TIMER			10				/* maximum number of CALL timer index */
#	define QSI_NB_CALL_TIMER			2				/* Nb of simultaneous NS call timers */

#endif

					/*
							DL Connection timer index affectation

						If timers are not used simultaneously
						they can have the same index (overlaping).

					*/

#define	T3DL							0
#define	T3_DL_EST						1

#define	QSI_NB_DL_TIMER					2

#if NS_RESTART_PROCEDURE == ON
#	define QSI_T316						2
#	define QSI_T317						TI_NOT_IMPLEMENTED

#	define QSI_NB_TIMER_RESTART			1
#	define QSI_MX_N316					2						/* maximum repetition for T316 expiry */
#else
#	define QSI_NB_TIMER_RESTART			0
#endif

#if NS_SEGMENTATION == ON
#	define QSI_T314						(QSI_NB_DL_TIMER + QSI_NB_TIMER_RESTART)	/* This index must follow the last defined index */
#	define QSI_NB_TIMER_SEGMENTATION	1
#else
#	define QSI_NB_TIMER_SEGMENTATION	0
#endif

#define QSI_MX_DLCI_TIMER				(QSI_NB_DL_TIMER + QSI_NB_TIMER_RESTART + QSI_NB_TIMER_SEGMENTATION)	/* maximum number of DLCI timer index */

	/*----------------------------------------------------------*/

		/* Maximum number of repeated IE in a SPDU message */

				/* single octet */

#define QSI_MX_SENDING_COMPLETE		1					/* sending complete */

				/* Codeset 0 */

#define QSI_MX_BC					1					/* bearer capability */
#define QSI_MX_CALLED_NB			1					/* called party number */
#define QSI_MX_CALLED_SUB_ADD		1					/* called party subaddress */
#define QSI_MX_CONN_NB				1					/* connected party number */
#define QSI_MX_CONN_SUB_ADD			1					/* connected party subaddress */
#define QSI_MX_CALLING_NB			2					/* calling party number */
#define QSI_MX_CALLING_SUB_ADD		1					/* calling party subaddress */
#define QSI_MX_CALL_STATE			1					/* call state */
#define QSI_MX_CAUSE				4					/* cause */
#define QSI_MX_CHAN_ID				5					/* channel identification */
#define QSI_MX_HLC					1					/* high layer compatibility */
#define QSI_MX_LLC					1					/* low layer compatibility */
#define QSI_MX_PROGRESS_IND			5					/* progress indicator */
#define QSI_MX_RESTART_IND			1					/* restart indicator */
#define	QSI_MX_FACILITY				4					/* facility */
#define	QSI_MX_NOTIF_IND         	4					/* notify indicator */

			/* Codeset 5 */

#define	QSI_MX_TRANSIT_COUNTER		1					/* transit counter */
#define	QSI_MX_PARTY_CATEGORY		1					/* party category */


#if EQUIPMENT == NT2
#	define	MX_UUI					1					/* UUI */
#endif

/*EOF*/

