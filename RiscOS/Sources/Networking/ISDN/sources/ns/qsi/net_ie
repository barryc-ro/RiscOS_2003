/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - net_ie.qsi
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/
/*

Table structures :
----------------

		tabl_item   TABL_ITEM									uchar
		==========================                             ============
		| tabl_id | size | p_val |---------------------------->|   val    |
		--------------------------  tabl_yy      ============  ------------
		|         |      |       |-------------->|   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |          |  |          |
		--------------------------
		|         |      |       |
		--------------------------
		|         |      |       |


	tabx_item   TABX_ITEM                   tabx_list                uchar
	=================================     =================        =========
	| tabl_id | size | list pointer |---->| tabl_id | size|------->| x_val |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------
	|         |      |              |

*/
/*-------------------------------------------------------------------------*/

	/*
		Initialization constants of ie internal structure
		used by SPDU received processing.
	*/

		/*  Bearer capability (BC) */

CONST   struct  i_bc	df_spdu_qsi_i_bc = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,

};

		/*  Called party number and subaddress (CALLED_NB, CALLED_SUB_ADD) */

CONST   struct  i_called_nb	 df_spdu_qsi_i_called_nb = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

CONST   struct  i_called_sub_add	df_spdu_qsi_i_called_sub_add = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Calling party number (CALLING_NB) */

CONST   struct  i_calling_nb	df_spdu_qsi_i_calling_nb = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

CONST   struct  i_calling_sub_add   df_spdu_qsi_i_calling_sub_add = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Connected party number (CONN_NB) */

CONST   struct  i_conn_nb	df_spdu_qsi_i_conn_nb = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Connected party subaddress (CONN_SUB_ADD) */

CONST   struct  i_conn_sub_add   df_spdu_qsi_i_conn_sub_add = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Call state (CALL_STATE) */

CONST   struct  i_call_state	df_spdu_qsi_i_call_state = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/* Cause (CAUSE) */

CONST   struct  i_cause	 df_spdu_qsi_i_cause = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	0,
	A_NIL
};

		/* Channel identification (CHAN_ID) */

CONST   struct  i_chan_id   df_spdu_qsi_i_chan_id = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	0,
	A_NIL
};

		/* High layer compatibility (HLC) */

CONST   struct  i_hlc   df_spdu_qsi_i_hlc = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Low layer compatibility (LLC) */

CONST   struct  i_llc   df_spdu_qsi_i_llc = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Party category (PARTY_CATEGORY) */

CONST	struct i_party_category df_spdu_qsi_i_party_category = {
	BYTE_VAL_NIL,
};

		/* Progress indicator (PROGRESS_IND) */

CONST   struct  i_progress_ind  df_spdu_qsi_i_progress_ind = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/* Restart indicator (RESTART_IND) */

CONST   struct  i_restart_ind   df_spdu_qsi_i_restart_ind = {
	BYTE_VAL_NIL
};

		/* Transit counter (TRANSIT_COUNTER) */

CONST   struct  i_transit_counter  df_spdu_qsi_i_transit_counter = {
	BYTE_VAL_NIL
};


	/* Facility (FAC) */

CONST   struct  i_facility  df_spdu_qsi_i_fac = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,

	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},

#	if NS_SUPP_SERVICES == ON
		0,
		0,
#	endif

	0,
	A_NIL
};

	/* Notify indicator (NOTIF_IND) */

CONST	struct i_notif_ind 	df_spdu_qsi_i_notif_ind = {
	USER_SUSPENDED,
	0,
	P_NIL

};

/*=========================================================================*/

	/*
		Initialization constants of the ie internal structure
		used by SSDU received processing.
	*/

		/*  Bearer capability (BC) */

CONST   struct  i_bc	df_ssdu_qsi_i_bc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,

};

		/*  Called party number and subaddress (CALLED_NB CALLED_SUB_ADD) */

CONST   struct  i_called_nb	 df_ssdu_qsi_i_called_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	0,
	A_NIL
};

CONST   struct  i_called_sub_add	df_ssdu_qsi_i_called_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Calling party number (CALLING_NB) */

CONST   struct  i_calling_nb	df_ssdu_qsi_i_calling_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	PRES_ALLOWED,
	USER_PROVIDED,
	0,
	A_NIL
};

		/* calling party subaddress (CALLING_SUB_ADD) */

CONST   struct  i_calling_sub_add   df_ssdu_qsi_i_calling_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Connected party number (CONN_NB) */

CONST   struct  i_conn_nb	df_ssdu_qsi_i_conn_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	PRES_ALLOWED,
	USER_PROVIDED,
	0,
	A_NIL
};

		/* conn party subaddress (CONN_SUB_ADD) */

CONST   struct  i_conn_sub_add   df_ssdu_qsi_i_conn_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	FORMAT_IA5,
	0,
	A_NIL
};


		/* Call state (CALL_STATE) */

CONST   struct  i_call_state	df_ssdu_qsi_i_call_state = {
	CODING_STD_CCITT,
	STATE_NULL_0
};

		/* Cause (CAUSE) */

CONST   struct  i_cause	 df_ssdu_qsi_i_cause = {
	CODING_STD_CCITT,
	LOCATION_PU_NET_LOC_USER,
	BYTE_VAL_NIL,
	C_C_NORMAL_EVENT,
	C_V_NORMAL_CLEARING_16,
	0,
	0,
	A_NIL
};

		/* Channel identification (CHAN_ID) */

CONST   struct  i_chan_id   df_ssdu_qsi_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_PRI,
	CHAN_PREF,
	NOT_D_CHAN,
	NO_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_CCITT,
	CHAN_NUMBER,
	B_CHAN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* High layer compatibility (HLC) */

CONST   struct  i_hlc   df_ssdu_qsi_i_hlc = {
	CODING_STD_CCITT,
	INTER_CCITT_CEPT,
	PRESENTATION_PROFIL,
	TELEPHONY,
	BYTE_VAL_NIL
};

		/* Low layer compatibility (LLC) */

CONST   struct  i_llc   df_ssdu_qsi_i_llc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	OUT_BAND_NOT_POSSIBLE,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Party category */

CONST	struct i_party_category df_ssdu_qsi_i_party_category = {
	PARTY_UNKNOWN
};

		/* Progress indicator (PROGRESS_IND) */

CONST   struct  i_progress_ind  df_ssdu_qsi_i_progress_ind = {
	CODING_STD_CCITT,
	PROGRESS_LOC_USER,
	PROGRESS_DESCR_NON_END_TO_END_ISDN
};


		/* Restart indicator (RESTART_IND) */

CONST   struct  i_restart_ind   df_ssdu_qsi_i_restart_ind = {
	RI_ALL_INTERFACES
};

		/* Transit counter (TRANSIT_COUNTER) */

CONST   struct  i_transit_counter  df_ssdu_qsi_i_transit_counter = {
	0				/* numeric value in the range 0...31. */
};


	/* Facility (FAC) */

CONST   struct  i_facility df_ssdu_qsi_i_fac = {
	FAC_SUPPLEMENTARY,
	BYTE_VAL_NIL,

	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},
	{BYTE_VAL_NIL},

#	if NS_SUPP_SERVICES == ON
		0,
		0,
#	endif

	0,
	A_NIL
};

	/* Notify indicator (NOTIF_IND) */

CONST	struct i_notif_ind 	df_ssdu_qsi_i_notif_ind = {
	USER_SUSPENDED,
	0,
	P_NIL

};

/*=========================================================================*/

				/*-------------------------------*/
				/* TABLES : list of valid values */
				/*-------------------------------*/

					/* Assignor/Assignee (ie LLC) */

CONST	uchar QSI_ASSIGN_S[] = {
	DEFAULT_ASSIGNEE,
	ASSIGNOR_ONLY,
	};

					/* In-band/Out_band negotiation (ie LLC) */

CONST	uchar QSI_BAND_S[] = {
	TSC,
	LL0,
	};
					/* Automata call state values (ie CALL_STATE) */

CONST	uchar QSI_CALL_STATE_VAL_S[] = {
	STATE_NULL_0,
	STATE_CALL_INIT_1,
	STATE_OVERLAP_SENDING_2,
	STATE_OUTGOING_CALL_PROC_3,
	STATE_CALL_DELIVERED_4,
	STATE_CALL_PRESENT_6,
	STATE_CALL_RECEIVED_7,
	STATE_CONNECT_REQUEST_8,
	STATE_INCOMING_CALL_PROC_9,
	STATE_ACTIVE_10,
	STATE_DISCONNECT_REQUEST_11,
	STATE_DISCONNECT_INDICATION_12,
	STATE_RELEASE_REQUEST_19,
	STATE_OVERLAP_RECEIVING_25,
	STATE_REST_1,
	STATE_REST_2,
	};

					/* Numbering type (ie CALLED_NB, CALLING_NB & CONN_NB) */

CONST	uchar QSI_NB_TYPE_S[] = {
	NB_UNKNOWN,
	NB_INTERNATIONAL,   		/* or NB_LEVEL_2_REGIONAL */
	NB_NATIONAL,				/* or NB_LEVEL_1_REGIONAL */
	NB_NET_SPF,
	NB_SUBSCRIBER,				/* or NB_LOCAL */
	NB_LEVEL_3_REGIONAL,
	NB_ABBREVIATED,
	};

					/* Numbering plan (ie CALLED_NB, CALLING_NB & CONN_NB) */

CONST	uchar QSI_NB_PLAN_S[] = {
	PLAN_UNKNOWN,
	PLAN_ISDN,
	PLAN_DATA,
	PLAN_TELEX,
	PLAN_PRIVATE,
	};

					/* Calling presentation indicator (ie CALLING_NB) */

CONST	uchar QSI_CALLING_NB_PRES_S[] = {
	PRES_ALLOWED,
	PRES_RESTRICTED,
	PRES_NOT_AVAILABLE,
	PRES_RESERVED,
	};

					/* Channel number (ie CHAN_ID) */

CONST	uchar QSI_CHAN_NUMBER_S[] = {
	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,
	};

					/* Channel selection (ie CHAN_ID) */

CONST	uchar QSI_CHAN_SEL_S[] = {
	AS_INDICATED,
	NO_CHAN,
	};

					/* Preferred/exclusive (ie CHAN_ID) */

CONST	uchar QSI_CHAN_PREF_EXCL_S[] = {
	CHAN_PREF,
	CHAN_EXCL,
	};

					/* D-channel indicator (ie CHAN_ID) */

CONST	uchar QSI_D_CHAN_S[] = {
	D_CHAN,
	NOT_D_CHAN,
	};

					/* Coding standard (ie BC, LLC, PROGRESS_IND) */

CONST	uchar QSI_CODING_STD_S[] = {
	CODING_STD_CCITT,
	CODING_STD_ECMA,
	};

					/* Data bit format (ie BC & LLC) */

CONST	uchar QSI_DATA_BIT_S[] = {
	DATA_BIT_UNUSED,
	DATA_BIT_5,
	DATA_BIT_7,
	DATA_BIT_8,
	};

					/* Duplex/half-duplex (ie BC & LLC) */

CONST	uchar QSI_DUPLEX_S[] = {
	HALF_DUPLEX,
	FULL_DUPLEX,
	};
					/* Flow control on Reception (Rx) (ie BC & LLC) */

CONST	uchar QSI_FLOW_CONTROL_RX_S[] = {
	FLOW_CAN_ACCEPT_DATA,
	FLOW_CANNOT_ACCEPT_DATA,
	};

					/* Flow control on Transmission (Tx) (ie BC & LLC) */

CONST	uchar QSI_FLOW_CONTROL_TX_S[] = {
	FLOW_NOT_RQ_TX_DATA,
	FLOW_RQ_TX_DATA,
	};

					/* Rate adaption header/no header (ie LLC) */

CONST	uchar QSI_HEADER_S[] = {
	HEADER_NOT_INCLUDED,
	HEADER_INCLUDED,
	};

					/* Intermediate rate (V110) (ie BC & LLC) */

CONST	uchar QSI_INTER_RATE_S[] = {
	INTER_RA_UNUSED,
	INTER_RA_8KBS,
	INTER_RA_16KBS,
	INTER_RA_32KBS,
	};

					/* Interpretation (ie HLC) (not used - further study) */

CONST	uchar QSI_INTERPRETATION_S[] = {
	INTER_CCITT_CEPT,
	};

					/* Logical Link Identifier negotiation (ie LLC) */

CONST	uchar QSI_LLI_S[] = {
	DEFAULT_LLI,
	FULL_PROTOCOL_LLI,
	};

					/* Cause location (ie CAUSE) */

CONST	uchar QSI_LOCATION_S[] = {
	LOCATION_USER,
	LOCATION_PR_NET_LOC_USER,
	LOCATION_PU_NET_LOC_USER,
	LOCATION_TRANSIT_NET,
	LOCATION_PU_NET_REMOTE_USER,
	LOCATION_PR_NET_REMOTE_USER,
	LOCATION_INTERNATIONAL_NET,
	LOCATION_NET_NTWK_POINT,
	};

					/* Modem type (ie BC & LLC) */

CONST	uchar QSI_MODEM_S[] = {
	MODEM_RESERVED,
	MODEM_V21,
	MODEM_V22,
	MODEM_V22_BIS,
	MODEM_V23,
	MODEM_V26,
	MODEM_V26_BIS,
	MODEM_V26_TER,
	MODEM_V27,
	MODEM_V27_BIS,
	MODEM_V27_TER,
	MODEM_V29,
	MODEM_V32,
	MODEM_V35,
	};

					/* Multi frame establishment support in Data Link (ie LLC) */

CONST	uchar QSI_MULTI_FRAME_S[] = {
	MULTI_FRAME_NOT_SUPPORTED,
	MULTI_FRAME_SUPPORTED,
	};

					/* In-band negotiation (V110 or V120) (ie BC & LLC) */

CONST	uchar QSI_NEGOTIATION_S[] = {
	NEGOTIATION_IN_BAND,
	NEGOTIATION_NOT_IN_BAND,
	};

					/* Network independent clock (NIC) (ie BC & LLC) */

CONST	uchar QSI_NIC_RX_S[] = {
	NIC_ACCEPT_DATA,
	NIC_NOT_ACCEPT_DATA,
	};

					/* Network independent clock (NIC) (ie BC & LLC) */

CONST	uchar QSI_NIC_TX_S[] = {
	NIC_RQ_TX_DATA,
	NIC_NOT_RQ_TX_DATA,
	};

					/* Mode of operation (ie LLC) */

CONST	uchar QSI_OP_MODE_S[] = {
	BIT_TRANSPARENT,
	PROTOCOL_SENSITIVE,
	};

					/* Out-band negotiation indicator (ie LLC) */

CONST	uchar QSI_OUT_BAND_NEG_S[] =	{
	OUT_BAND_POSSIBLE,
	OUT_BAND_NOT_POSSIBLE,
	};

					/* Parity format (ie BC & LLC) */

CONST	uchar QSI_PARITY_S[] = {
	ODD,
	EVEN,
	NO_PARITY,
	FORCED_TO_0,
	FORCED_TO_1,
	};

					/* Party category	(ie PARTY_CATEGORY) */

CONST	uchar QSI_PARTY_CATEGORY_S[] = {
	PARTY_UNKNOWN,
	PARTY_EXTENSION,
	PARTY_OPERATOR,
	PARTY_EMERGENCY_EXTENSION
	};
					/* Progress location (ie PROGRESS_IND) */

CONST	uchar QSI_PROGRESS_LOCATION_S[] = {
	PROGRESS_LOC_USER,
	PROGRESS_LOC_PR_LOCAL_USER,
	PROGRESS_LOC_PU_LOCAL_USER,
	PROGRESS_LOC_PU_REMOTE_USER,
	PROGRESS_LOC_PR_REMOTE_USER,
	PROGRESS_LOC_INTERNATIONAL,
	PROGRESS_BEYONG_IWP,
	};

					/* Layer 1 protocol identifier (ie LLC) */

CONST	uchar QSI_PROTOCOL_ID_LLC_1_S[] = {
	PROTOCOL_ID_1_V110,
	PROTOCOL_ID_1_G711_u,
	PROTOCOL_ID_1_G711_A,
	PROTOCOL_ID_1_G721,
	PROTOCOL_ID_1_7KHZ,
	PROTOCOL_ID_1_VIDEO,
	PROTOCOL_ID_1_RA_NON_CCITT,
	PROTOCOL_ID_1_V120,
	PROTOCOL_ID_1_X31,
	};

					/* Layer 2 protocol identifier (ie LLC) */

CONST	uchar QSI_PROTOCOL_ID_LLC_2_S[] = {
	PROTOCOL_ID_2_ISO_1745,
	PROTOCOL_ID_2_Q921,
	PROTOCOL_ID_2_X25_LL,
	PROTOCOL_ID_2_X25_ML,
	PROTOCOL_ID_2_T71,
	PROTOCOL_ID_2_HDLC_ARM,
	PROTOCOL_ID_2_HDLC_NRM,
	PROTOCOL_ID_2_HDLC_ABM,
	PROTOCOL_ID_2_LAN_LLC,
	PROTOCOL_ID_2_X75_SLP,
	};

					/* Layer 3 protocol identifier (ie LLC) */

CONST	uchar QSI_PROTOCOL_ID_LLC_3_S[] = {
	PROTOCOL_ID_3_Q931,
	PROTOCOL_ID_3_X25_PL,
	PROTOCOL_ID_3_ISO_8208,
	PROTOCOL_ID_3_ISO_8348,
	PROTOCOL_ID_3_ISO_8473,
	PROTOCOL_ID_3_T70,
	};

					/* Restart indicator class (ie RESTART_IND) */

CONST	uchar QSI_RESTART_IND_CLASS_S[] = {
	RI_INDICATED_CHANNEL,
	RI_ALL_INTERFACES,
	};

					/* Screening indicator (ie CALLING_NB) */

CONST	uchar QSI_SCREEN_IND_S[] = {
	USER_PROVIDED,
	USER_PASSED,
	NETWORK_PROVIDED,
	};


					/* Status/condition (ie CAUSE) */

CONST	uchar QSI_STATUS_CONDITION_S[] = {
	COND_UNKNOWN,
	COND_PERMANENT,
	COND_TRANSIENT,
	};

					/* Stop bit format (ie BC & LLC) */

CONST	uchar QSI_STOP_BIT_S[] = {
	STOP_BIT_UNUSED,
	STOP_BIT_1,
	STOP_BIT_1_5,
	STOP_BIT_2,
	};

					/* Information structure (ie LLC) */

CONST	uchar QSI_STRUCTURE_S[] = {
	STRUCTURE_DEFAULT,
	STRUCTURE_8KHZ_INT,
	STRUCTURE_SDU_INT,
	STRUCTURE_UNSTRUCTURED,
	};

					/* Subaddress odd/even indicator (ie CALLED & CALLING _SUB_ADD) */

CONST	uchar QSI_SUB_ADD_IND_S[] = {
	SUB_ADD_ODD,
	SUB_ADD_EVEN,
	};

					/* Subaddress type (ie CALLED & CALLING _SUB_ADD) */

CONST	uchar QSI_SUB_ADD_TYPE_S[] = {
	SUB_ADD_OSI,
	SUB_ADD_USER,
	};

					/* Asynchronous/synchronous (ie BC & LLC) */

CONST	uchar QSI_SYN_ASYN_S[] =	{
	SYN,
	ASYN,
	};

					/* Teleservices according to CCITT standard (ie HLC) */

CONST	uchar QSI_TELESERVICE_CCITT_S[] = {
	TELEPHONY,
	FAX_3,
	FAX_4,
	MIXED_MODE,
	PROCESSABLE_FORM,
	TELETEX,
	VIDEOTEX,
	TELEX,
	MHS,
	OSI,
	MAINTENANCE,		/* = HLC_NOT_AVAILABLE_1 */
	MANAGEMENT,			/* = HLC_NOT_AVAILABLE_2 */
	HLC_RESERVED,
	};

					/* Teleservices which may be extended (ie HLC) */

CONST	uchar QSI_TELESERVICE_EXT_S[] = {
	MAINTENANCE,
	MANAGEMENT,
	};
					/* Information transfer capability (ie LLC) */

CONST	uchar QSI_TRF_CAP_LLC_S []  = {
	TRF_CAP_SPEECH,
	TRF_CAP_UNRESTRICTED,
	TRF_CAP_RESTRICTED,
	TRF_CAP_3_1_AUDIO,
	TRF_CAP_7_AUDIO,
	TRF_CAP_VIDEO,
	};

					/* User rate (V110 & V120) (ie BC & LLC) */

CONST	uchar QSI_USER_RATE_S[] =   {
	RA_E_BITS,
	RA_0_6KBS,
	RA_1_2KBS,
	RA_2_4KBS,
	RA_3_6KBS,
	RA_4_8KBS,
	RA_7_2KBS,
	RA_8KBS,
	RA_9_6KBS,
	RA_14_4KBS,
	RA_16KBS,
	RA_19_2KBS,
	RA_32KBS,
	RA_48KBS,
	RA_56KBS,
	RA_0_1345KBS,
	RA_0_100KBS,
	RA_0_75_1_2KBS,
	RA_1_2_0_75KBS,
	RA_0_050KBS,
	RA_0_075KBS,
	RA_0_110KBS,
	RA_0_150KBS,
	RA_0_200KBS,
	RA_0_300KBS,
	RA_12KBS,
	};

/*=========================================================================*/

	/* Tables selected according to another value (indexed tables) */


					/* Progress description values according the Coding Standard */

CONST	uchar	QSI_PROG_DESCR_CCITT_S[] = {
	CODING_STD_CCITT,
	PROGRESS_DESCR_NON_END_TO_END_ISDN,
	PROGRESS_DESCR_NON_ISDN_DEST,
	PROGRESS_DESCR_NON_ISDN_ORIG,
	PROGRESS_DESCR_CALL_RETURNED_ISDN,
	PROGRESS_DESCR_IN_BAND_NOW,
	};


CONST	uchar	QSI_PROG_DESCR_ECMA_S[] = {
	CODING_STD_ECMA,
	PROGRESS_DESCR_INTW_PU_NET,
	PROGRESS_DESCR_INTW_NO_REL,
	PROGRESS_DESCR_INTW_NO_REL_BA,
	PROGRESS_DESCR_INTW_NO_REL_AF,
	PROGRESS_DESCR_INTW_PR_NET,
	};

					/* Information transfer rate (BC) according to coding standard */

CONST	uchar QSI_TRF_RATE_BC_CCITT_S[] = {
	CODING_STD_CCITT,
	TRF_RATE_64KBS,
	};

CONST	uchar QSI_TRF_RATE_BC_ECMA_S[] = {
	CODING_STD_ECMA,
	TRF_RATE_INDEP_SIG_CONNECTION,
	};

					/* Information transfer capability (ie BC) according to coding standard */

CONST	uchar QSI_TRF_CAP_BC_CCITT_S []  = {
	CODING_STD_CCITT,
	TRF_CAP_SPEECH,
	TRF_CAP_UNRESTRICTED,
	TRF_CAP_RESTRICTED,
	TRF_CAP_3_1_AUDIO,
	TRF_CAP_7_AUDIO,
	TRF_CAP_VIDEO,
	};

CONST	uchar QSI_TRF_CAP_BC_ECMA_S []  = {
	CODING_STD_ECMA,
	TRF_CAP_UNRESTRICTED,
	};

					/* Layer 1 protocol identifier (ie BC) */

CONST	uchar QSI_PROTOCOL_ID_BC_1_S[] = {
	LAYER_ID_1,
	PROTOCOL_ID_1_V110,
	PROTOCOL_ID_1_G711_u,
	PROTOCOL_ID_1_G711_A,
	PROTOCOL_ID_1_G721,
	PROTOCOL_ID_1_7KHZ,
	PROTOCOL_ID_1_RA_NON_CCITT,
	PROTOCOL_ID_1_V120,
	PROTOCOL_ID_1_X31,
	};

					/* Layer 2 protocol identifier (ie BC) */

CONST	uchar QSI_PROTOCOL_ID_BC_2_S[] = {
	LAYER_ID_2,
	PROTOCOL_ID_2_Q921,
	PROTOCOL_ID_2_X25_LL,
	};

					/* Layer 3 protocol identifier (ie BC) */

CONST	uchar QSI_PROTOCOL_ID_BC_3_S[] = {
	LAYER_ID_3,
	PROTOCOL_ID_3_Q931,
	PROTOCOL_ID_3_X25_PL,
	};

/*-------------------------------------------------------------------------*/

		/*
		   Meta description of the information elements.
		   This description is  used to check an information element
		   inside a message and to store its value into  the internal
		   structure.
		   In the other way it is used to generate the information element of
		   a message from the internal structure.
		*/

#define NS_INCLUDE_IE_META_FUNCTION		ON		/* include prototypes of functions inside mp_ie.qsi */

#include "qsi.mp_ie"  /* include IE meta-programs */

uchar qsi_called_plan_id ()
{

	/* NB_LEVEL_3_REGIONAL permitted only in case of PRIVATE PLAN */

	if ((I_(called_nb, plan_id) != PLAN_PRIVATE) &&
		(I_(called_nb, nb_type) == NB_LEVEL_3_REGIONAL)) {
		return (NOK);
	}

	return (OK);
}

uchar qsi_calling_nb_spdu ()
{

	/* NB_LEVEL_3_REGIONAL permitted only in case of PRIVATE PLAN */

	if ((I_(calling_nb, plan_id) != PLAN_PRIVATE) &&
		(I_(calling_nb, nb_type) == NB_LEVEL_3_REGIONAL)) {
		return (NOK);
	}

		/* if default values are used for octet 3a, it shall be omitted. */

	ie_if_flag = ON;		/* in general case, process octet 3a */

	if ((direction == TO_D_CHANNEL) 				&&
		(I_(calling_nb,pres)		== PRES_ALLOWED)&&
		(I_(calling_nb,screen_ind)	== USER_PROVIDED)
	   ) {
		ie_if_flag = OFF;	/* default values used : omit octet 3a */
	}

	return (OK);
}

uchar qsi_conn_nb_spdu ()
{

	/* NB_LEVEL_3_REGIONAL permitted only in case of PRIVATE PLAN */

	if ((I_(conn_nb, plan_id) != PLAN_PRIVATE) &&
		(I_(conn_nb, nb_type) == NB_LEVEL_3_REGIONAL)) {
		return (NOK);
	}

		/* if default values are used for octet 3a, it shall be omitted. */

	ie_if_flag = ON;		/* in general case, process octet 3a */

	if ((direction == TO_D_CHANNEL) &&
		(I_(conn_nb,pres)		== PRES_ALLOWED) &&
		(I_(conn_nb,screen_ind)	== USER_PROVIDED)
	   ) {
		ie_if_flag = OFF;	/* default values used : omit octet 3a */
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

#define Ns_qsi_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_qsi_end_table_or_function		};
#define Ns_qsi_tab_tabl_entry(idx, tab)		Ns_tab_tabl_entry (idx, tab),
#define Ns_qsi_tabx_list_entry(tab)			Ns_tabx_list_entry (tab),
#define Ns_qsi_tab_tabx_entry(idx, tab)		Ns_tab_tabx_entry (idx, tab),

#define Ns_qsi_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx)	\
			Ns_tab_ie_entry (codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, Offsetof(i_str,p_tsp_add)),

#define Ns_qsi_tab_ie_no_i_str(codes, ie, mx)	{codes, ie, A_NIL, 0, A_NIL, A_NIL, A_NIL, mx, 0},
#define Ns_qsi_tab_ie_msg_header			{CODESET_NIL, MESSAGE_HEADER, (uchar *)A_NIL, sizeof(struct i_message_header), (uchar *)Pic_address (&i_message_header), (uchar *)A_NIL, (uchar *)A_NIL, 1, 0},

#include "qsi.tab_ie"		/* include other Tables describing the IEs */

#define QSI_MX_TABL (sizeof(QSI_TAB_TABL)/sizeof (struct tabl))
CONST	uchar   qsi_size_tab_tabl = QSI_MX_TABL;

#define QSI_MX_TABX (sizeof(QSI_TAB_TABX)/sizeof (struct tabx))
CONST   uchar   qsi_size_tab_tabx = QSI_MX_TABX;

CONST	uchar	qsi_size_tab_ie = Rnd_sizeof (QSI_TAB_IE) / IE_ELEM_SIZE;	/* maximum number of item in the table */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			bc_xxx_spdu - implements the processing of the low layer
						   compatibility (BC) IE of a received SPDU
						   message and of SPDU message to be sent.

Usage		   uchar bc_xxx_spdu ();

Return value :  bc_xxx_spdu returns	= OK valid data,
									= NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

#define Get_layer_id()	Extract (5,Mask(2))

uchar qsi_bc_5_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_bc_layer_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (i_bc[0].protocol_id_1 == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar qsi_bc_6_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 6 may be present */

		/* if I_bc_layer_id_2 == BYTE_VAL_NIL -> octet 6 is missing */

	if (direction == TO_D_CHANNEL) {

		/* octet 6 must be present if PACKET MODE */

		if (i_bc[0].protocol_id_2 == BYTE_VAL_NIL) {

			/* octet 6 is missing */

			if (i_bc[0].trf_mode == TRF_MODE_PACKET) return (NOK);

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_2) {

				/* It is NOT Octet 6 (layer 2) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar qsi_bc_7_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 7 may be present */

		/* if I_bc_layer_id_3 == BYTE_VAL_NIL -> octet 7 is missing */

	if (direction == TO_D_CHANNEL) {

		if (i_bc[0].protocol_id_3	== BYTE_VAL_NIL) {

			/* octet 7 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_3) {

				/* It is NOT Octet 7 (layer 3) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			qsi_cause_spdu - implements the specific processing of a cause
							 Information Element (IE).

Usage		   uchar qsi_cause_spdu ();

Return value :  qsi_cause_spdu returns OK
								   NOK

common constants and declarations : ns.h net_i_s.h

common objects : internal data structure i_cause, ie  spdu context.
						- direction = FROM or TO D_CHANNEL side.

*--------------------------------------------------------------------------*/

uchar qsi_cause_spdu ()
{
	uchar   class_val;				/* cause class & value */

	class_val = C_v (I_(cause,cause_class), I_(cause,cause_val));

	if (direction == FROM_D_CHANNEL) {

				/* FROM the D CHANNEL side */

		if (! Eo_ie) {

		   if (r_exec_spdu_ie ((uchar *)&QSI_DIAG_P) != OK) {
			   return (NOK);
		   }

		}

	} else {
				/* TO D CHANNEL side */

		if (I_(cause,diag_lgth) != 0) {

			switch (class_val) {
				case C_v (C_C_NORMAL_EVENT_0,			C_V_UNASSIGNED_NUMBER_1)				:
				case C_v (C_C_NORMAL_EVENT_0,			C_V_NO_ROUTE_TO_DEST_3)					:
				case C_v (C_C_NORMAL_EVENT,				C_V_NORMAL_CLEARING_16)					:
				case C_v (C_C_NORMAL_EVENT,				C_V_CALL_REJECT_21)					:
					I_(cause,tmp) =  *I_(cause,p_diagnostic) - '0';
					return (s_exec_spdu_ie ((uchar *)&QSI_DIAG_CONDITION_P));

				case C_v (C_C_PROTOCOL_ERROR,   		C_V_MANDATORY_IE_MISSING_96)			:
				case C_v (C_C_PROTOCOL_ERROR,   		C_V_NON_EXISTENT_IE_99)					:
				case C_v (C_C_PROTOCOL_ERROR,   		C_V_INVALID_IE_CONTENT_100)				:
					Memcpy_far ((char FAR *) Get_p_ie, (char FAR *) I_(cause,p_diagnostic), I_(cause,diag_lgth));
					Inc_p_ie (I_(cause,diag_lgth));
					break;

				case C_v (C_C_PROTOCOL_ERROR,   		C_V_MESSAGE_TYPE_NON_EXISTENT_97)   	:
				case C_v (C_C_PROTOCOL_ERROR,   		C_V_MESSAGE_STATE_INCONSISTENCY_98) 	:
				case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_NOT_COMPATIBLE_101)			:
					Put_inc_ie_octet (*I_(cause,p_diagnostic));
					break;

				case C_v (C_C_PROTOCOL_ERROR,			C_V_RECOVERY_ON_TIMER_EXPIRY_102)		:
					return (s_exec_spdu_ie ((uchar *)&QSI_DIAG_TIMER_P));

				default :
					break;
			}
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			llc_spdu - implements the processing of the low layer
						   compatibility (LLC) IE of a received SPDU
						   message and of SPDU message to be sent.

Usage		   uchar llc_spdu ();

Return value :  llc_spdu returns = OK valid data,
								 = NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar qsi_llc_3a_spdu ()
{

	ie_if_flag = ON;	/* (default value) : octet 3a may be present */

	if ((direction == TO_D_CHANNEL) &&
		(i_llc[0].out_band_neg == OUT_BAND_NOT_POSSIBLE)) {

			/* default value for octet 3a : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);

}

/*--------------------------------------------------------------------------*/

uchar qsi_llc_4b_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 4b may be present */

	if ((direction			 == TO_D_CHANNEL)			&&
		(i_llc[0].symmetry	 == BIDIRECTIONAL_SYMMETRY)	&&		/* forced value anyway */
		(i_llc[0].dest_rate	 == i_llc[0].trf_rate)) {

		/* default values for octet 4b : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

#define Get_layer_id()	Extract (5,Mask(2))

uchar qsi_llc_5_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_bc_layer_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_(llc,protocol_id_1) == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar qsi_llc_6_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 6 may be present */

		/* if I_llc_layer_id_2 == BYTE_VAL_NIL -> octet 6 is missing */

	if (direction == TO_D_CHANNEL) {

			/* octet 6 must be present if PACKET MODE */

		if (i_llc[0].protocol_id_2 == BYTE_VAL_NIL) {

			/* octet 6 is missing */

			if (i_llc[0].trf_mode == TRF_MODE_PACKET) return (NOK);

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_2) {

				/* It is NOT Octet 6 (layer 2) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar qsi_llc_7_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 7 may be present */

		/* if I_llc_layer_id_3 == BYTE_VAL_NIL -> octet 7 is missing */

	if (direction == TO_D_CHANNEL) {

		if (i_llc[0].protocol_id_3 == BYTE_VAL_NIL) {

				/* octet 7 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_3) {

				/* It is NOT Octet 7 (layer 3) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		qsi_restart_spdu - check if presence of CHAN ID IE is compulsory or forbidden.

Usage		uchar qsi_restart_spdu ();

Return value :  qsi_restart_spdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar qsi_restart_spdu ()
{

	if (is_ie_i (CODESET_0, CHAN_ID) == ABSENT) {
		return (OK);

	} else {

		if (I_(restart_ind,restart_class) == RI_INDICATED_CHANNEL) {
			return (OK);
		}

	}

	return (NOK);
}

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

#undef Ns_qsi_table_or_function
#undef Ns_qsi_end_table_or_function
#undef Ns_qsi_tab_tabl_entry
#undef Ns_qsi_tabx_list_entry
#undef Ns_qsi_tab_tabx_entry
#undef Ns_qsi_tab_ie_entry
#undef Ns_qsi_tab_ie_no_i_str
#undef Ns_qsi_tab_ie_msg_header

#define Ns_qsi_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_qsi_end_table_or_function		}

#define Ns_qsi_tab_tabl_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_val, (uchar *)tab);
#define Ns_qsi_tabx_list_entry(tab)			Pic_init_struct_array_next (p_table,  p_val, (uchar	*)tab);
#define Ns_qsi_tab_tabx_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_tab, (struct tabx_list *)tab);

#define Ns_qsi_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx)	\
	Pic_init_struct_array (p_table,  i_pic, p_prog, (uchar	*)mp_a);		\
	Pic_init_struct_array (p_table,  i_pic, p_i_struct, (uchar	*)i_str);	\
	Pic_init_struct_array (p_table,  i_pic, p_init_spdu, (uchar	*)df_spdu);	\
	Pic_init_struct_array_next (p_table,  p_init_ssdu, (uchar	*)df_ssdu);

#define Ns_qsi_tab_ie_no_i_str(codes, ie, mx)	Ns_qsi_tab_ie_entry (0, 0, P_NIL, P_NIL, P_NIL, P_NIL, 0)

#define Ns_qsi_tab_ie_msg_header		Ns_qsi_tab_ie_entry (0, 0, P_NIL, &i_message_header, P_NIL, P_NIL, 0)

		/*	Function used to initialize address fields in Tables above */


void pic_init_ns_qsi_ie ()
{
	uchar	i_pic;			/* current index */

#	include "qsi.tab_ie"
}

#endif /* end of PIC used} */


/*EOF*/

