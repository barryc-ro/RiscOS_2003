
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_cc.qsi
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		qsi_cc_load_ns_test - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_SUPP_SERVICES == ON

	/* array of data to get and store Q-SIG supplementary services specific data */

#define NS_QSI_MX_SS_DATA		50
static uchar ns_qsi_ss_data	[NS_QSI_MX_SS_DATA];

static uint  g_ns_qsi_ss_data;

	/* local function prototypes */

void	ns_qsi_load_ss_fac_start	(Void_parm);
void	mg_ns_ss_qsi_apdu_type 		(Void_parm);
void	mg_ns_ss_qsi_comp_nb		(Void_parm);

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			qsi_cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar qsi_cc_load_ns_test (code_t primitive_code, nai_t nai,
									   conn_id_t conn_id);
							- primitive_code 	= code of the primitive to send,
							- nai				= network access ID,
							- conn_id			= connection ID.

Return value : 	qsi_cc_load_ns_test returns = OK
										= NOK

common constants and declarations : ns.h, isdn.h

common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar qsi_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t		prim_code;		/* primitive code */
	nai_t 		nai;			/* network access ID */
	sapi_t		sapi;			/* sapi */
	conn_id_t	conn_id;		/* connection ID */
{

#	if NS_IE_TSP_OUT == ON
		uchar tsp_data[11];
#	endif

		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

		/* Switch according to the primitive to send */

	switch (prim_code) {

/*==========================================================================*/


/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :
#			if NS_IE_TSP_OUT == ON
				Isdn_init_qsi_ctx_rq_rs_tsp		(conn_rq,
												 Buffer_a_first_data,
												 Buffer_data_lgth
												);
#			else
				Isdn_init_qsi_ctx_rq_rs		(conn_rq,
											 Buffer_a_first_data
											);
#			endif

#			if NS_IE_TSP_OUT == OFF /* { */

			Isdn_qsi_store_bc_not_V110		(conn_rq,
											 TRF_CAP_UNRESTRICTED,
											 PROTOCOL_ID_1_G721,
											 PROTOCOL_ID_2_Q921,
											 PROTOCOL_ID_3_Q931
											);

			Isdn_qsi_store_chan_id_PRI		(conn_rq,
											 CHAN_EXCL,
											 "1"
											);

			Isdn_qsi_store_calling_nb		(conn_rq,
											 NB_UNKNOWN,
											 PLAN_TELEX,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 "30571841"
											);

			Isdn_qsi_store_calling_sub_add	(conn_rq,
											 SUB_ADD_USER,
											 SUB_ADD_ODD,
											 "4321"
											);

			Isdn_qsi_store_conn_sub_add		(conn_rq,
											 SUB_ADD_USER,
											 SUB_ADD_ODD,
											 "12"
											);

			Isdn_qsi_store_called_nb		(conn_rq,
											 NB_NATIONAL,
											 PLAN_UNKNOWN,
											 "12345"
											);

			Isdn_qsi_store_called_sub_add	(conn_rq,
											 SUB_ADD_OSI,
											 SUB_ADD_EVEN,
											 "4321"
											);

			Isdn_qsi_store_hlc_CCITT		(conn_rq,
											 TELEPHONY,
											 BYTE_VAL_NIL
											);

			Isdn_qsi_store_transit_counter	(conn_rq,
											 12
											);

#			if NS_SUPP_SERVICES == ON	/* supplementary services specific data */
				ns_qsi_load_ss_fac_start	();
				Isdn_qsi_store_facility		(conn_rq,
											 ns_qsi_ss_data [0], ns_qsi_ss_data [1],
											 ns_qsi_ss_data [2], ns_qsi_ss_data [3],
											 ns_qsi_ss_data + 9,
											 ns_qsi_ss_data [4], ns_qsi_ss_data [5],
											 ns_qsi_ss_data [6], ns_qsi_ss_data [7],
											 ns_qsi_ss_data + 9 + ns_qsi_ss_data [3],
											 ns_qsi_ss_data [8]);
				build_sdu_cc_ss_data		();
#			endif

			Isdn_qsi_store_party_category	(conn_rq,
											 PARTY_OPERATOR
											);

#			else /* NS_IE_TSP_OUT = OFF} { */

				tsp_data[0] = 3;
				tsp_data[1] = 0x88;
				tsp_data[2] = 0x90;
				tsp_data[3] = 0xa2;

				Isdn_qsi_store_bc_tsp			(conn_rq,
												 tsp_data
												);

				tsp_data[0] = 3;
				tsp_data[1] = 0xa9;
				tsp_data[2] = 0x83;
				tsp_data[3] = 0x89;

				Isdn_qsi_store_chan_id_tsp		(conn_rq,
												 tsp_data
												);


				tsp_data[0] = 9;
				tsp_data[1] = 0x04;
				tsp_data[2] = 0x81;
				tsp_data[3] = 0x30;
				tsp_data[4] = 0x35;
				tsp_data[5] = 0x37;
				tsp_data[6] = 0x31;
				tsp_data[7] = 0x38;
				tsp_data[8] = 0x34;
				tsp_data[9] = 0x31;

				Isdn_qsi_store_calling_nb_tsp	(conn_rq,
												 tsp_data
												);


				tsp_data[0] = 5;
				tsp_data[1] = 0x88;
				tsp_data[2] = 0x50;
				tsp_data[3] = 0x33;
				tsp_data[4] = 0x32;
				tsp_data[5] = 0x31;

				Isdn_qsi_store_calling_sub_add_tsp	(conn_rq,
												 tsp_data
												);

				tsp_data[0] = 6;
				tsp_data[1] = 0xa0;
				tsp_data[2] = 0x31;
				tsp_data[3] = 0x32;
				tsp_data[4] = 0x33;
				tsp_data[5] = 0x34;
				tsp_data[6] = 0x35;

				Isdn_qsi_store_called_nb_tsp	(conn_rq,
												 tsp_data
												);

				tsp_data[0] = 6;
				tsp_data[1] = 0x80;
				tsp_data[2] = 0x50;
				tsp_data[3] = 0x34;
				tsp_data[4] = 0x33;
				tsp_data[5] = 0x32;
				tsp_data[6] = 0x31;

				Isdn_qsi_store_called_sub_add_tsp	(conn_rq,
												 tsp_data
												);

				tsp_data[0] = 0x04;
				tsp_data[1] = 0x83;
				tsp_data[2] = 0x44;
				tsp_data[3] = 0x81;
				tsp_data[4] = 0x12;

				Isdn_qsi_store_notif_ind_tsp	(conn_rq, tsp_data);

				tsp_data[0] = 0x02;
				tsp_data[1] = 0xaa;
				tsp_data[2] = 0x94;

				Isdn_qsi_store_progress_ind_tsp	(conn_rq, tsp_data);

				tsp_data[0] = 0x01;
				tsp_data[1] = 0x83;

				Isdn_qsi_store_party_categ_tsp	(conn_rq, tsp_data);

				tsp_data[0] = 0x01;
				tsp_data[1] = 0x84;

				Isdn_qsi_store_transit_c_tsp	(conn_rq, tsp_data);

#			endif /* NS_IE_TSP_OUT = OFF} */

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_qsi_ctx_rq_rs 		(conn_rs,
											 Buffer_a_first_data
											);

			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_qsi_ctx_rq_rs			(clear_rq,
											 Buffer_a_first_data
											);

			Isdn_qsi_store_cause			(clear_rq,
											 LOCATION_USER,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 "1"
											);

			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_qsi_ctx_rq_rs			(clear_rs,
											 Buffer_a_first_data
											);

			break;

/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_qsi_ctx_rq_rs			(info_rq,
											 Buffer_a_first_data
											);

			Isdn_qsi_store_called_nb		(info_rq,
											 NB_SUBSCRIBER,
											 PLAN_UNKNOWN,
											 "6"
											);

			break;

/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_qsi_ctx_rq_rs			(alert_rq,
											 Buffer_a_first_data
											);

			Isdn_qsi_store_party_category	(alert_rq,
											 PARTY_OPERATOR
											);

			break;



/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_qsi_ctx_rq_rs			(call_proc_rq,
											 Buffer_a_first_data
											);

			break;

/*---------------- SETUP_ACK_RQ */

		case NS_SETUP_ACK_RQ :
			Isdn_init_qsi_ctx_rq_rs			(setup_ack_rq,
											 Buffer_a_first_data
											);

			break;

/*---------------- RESTART_RS */

		case NS_RESTART_RS :
			Isdn_init_qsi_ctx_rq_rs			(restart_rs,
											 Buffer_a_first_data
											);

			Isdn_qsi_store_restart_ind		(restart_rs,
											 RI_ALL_INTERFACES
											);

			break;

/*---------------- RESTART_RQ */

		case NS_RESTART_RQ :
			break;


/*---------------- PROGRESS_RQ */

		case NS_PROGRESS_RQ :
			Isdn_init_qsi_ctx_rq_rs			(progress_rq,
											 Buffer_a_first_data
											);

			Isdn_qsi_store_progress_ind		(progress_rq,
											CODING_STD_CCITT,
											PROGRESS_LOC_USER,
											PROGRESS_DESCR_NON_ISDN_ORIG
											);
			break;

/*---------------- STATUS_ENQ_RQ */

		case NS_STATUS_ENQ_RQ :
			break;


/*---------------- NOTIFY REQUEST */

		case  NS_NOTIFY_RQ :
			Isdn_init_qsi_ctx_rq_rs			(notify_rq,
											 Buffer_a_first_data
											);

			Isdn_qsi_store_notif_ind		(notify_rq,
											 REMOTE_PARTY_DISC,
											 P_NIL,
											 0);
			break;

#		if NS_SUPP_SERVICES == ON

/*---------------- FACILITY REQUEST */

			case  NS_FAC_RQ :
				Isdn_init_qsi_ctx_rq_rs		(fac_rq,
											 Buffer_a_first_data
											);

				ns_qsi_load_ss_fac_start	();
				Isdn_qsi_store_facility		(fac_rq,
											 ns_qsi_ss_data [0], ns_qsi_ss_data [1],
											 ns_qsi_ss_data [2], ns_qsi_ss_data [3],
											 ns_qsi_ss_data + 9,
											 ns_qsi_ss_data [4], ns_qsi_ss_data [5],
											 ns_qsi_ss_data [6], ns_qsi_ss_data [7],
											 ns_qsi_ss_data + 9 + ns_qsi_ss_data [3],
											 ns_qsi_ss_data [8]);
				build_sdu_cc_ss_data		();
				break;
#		endif

/*---------------- UNKNOWN primitive */

		default :
			return (NOK);
		}
			/* Load the communication message */

		Store_message (prim_code, nai, sapi, conn_id, p_buffer);
		Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);

		return (OK);

}

#if NS_SUPP_SERVICES == ON

void ns_qsi_load_ss_fac_start ()
{
	ushort	i;		/* current index */

	for (i = 0; i < NS_QSI_MX_SS_DATA; i++) {

		ns_qsi_ss_data [i] = BYTE_VAL_NIL;	/* initialize data */
	}

	ns_qsi_ss_data [3] = 0;	/* initialize "size" field */
	ns_qsi_ss_data [7] = 0;	/* initialize "size" field */

		/* get NetworkFacilityExtension */

	Prompt	("   Type of Source Entity", u, g_ns_qsi_ss_data);
	Scan	(d, &g_ns_qsi_ss_data);
	Echo	(u, g_ns_qsi_ss_data);
	ns_qsi_ss_data[0] = (uchar)g_ns_qsi_ss_data;

	if (ns_qsi_ss_data[0] != BYTE_VAL_NIL) {

		Prompt	("     Type of PartyNumber", u, g_ns_qsi_ss_data);
		Scan	(d, &g_ns_qsi_ss_data);
		Echo	(u, g_ns_qsi_ss_data);
		ns_qsi_ss_data[1] = (uchar)g_ns_qsi_ss_data;

		Prompt	("          Type of Number", u, g_ns_qsi_ss_data);
		Scan	(d, &g_ns_qsi_ss_data);
		Echo	(u, g_ns_qsi_ss_data);
		ns_qsi_ss_data[2] = (uchar)g_ns_qsi_ss_data;

		Prompt	("          Size of Number", u, g_ns_qsi_ss_data);
		Scan	(d, &g_ns_qsi_ss_data);
		Echo	(u, g_ns_qsi_ss_data);
		ns_qsi_ss_data[3] = (uchar)g_ns_qsi_ss_data;

		Prompt	("     Type of Dest Entity", u, g_ns_qsi_ss_data);
		Scan	(d, &g_ns_qsi_ss_data);
		Echo	(u, g_ns_qsi_ss_data);
		ns_qsi_ss_data[4] = (uchar)g_ns_qsi_ss_data;

		Prompt	("     Type of PartyNumber", u, g_ns_qsi_ss_data);
		Scan	(d, &g_ns_qsi_ss_data);
		Echo	(u, g_ns_qsi_ss_data);
		ns_qsi_ss_data[5] = (uchar)g_ns_qsi_ss_data;

		Prompt	("          Type of Number", u, g_ns_qsi_ss_data);
		Scan	(d, &g_ns_qsi_ss_data);
		Echo	(u, g_ns_qsi_ss_data);
		ns_qsi_ss_data[6] = (uchar)g_ns_qsi_ss_data;

		Prompt	("          Size of Number", u, g_ns_qsi_ss_data);
		Scan	(d, &g_ns_qsi_ss_data);
		Echo	(u, g_ns_qsi_ss_data);
		ns_qsi_ss_data[7] = (uchar)g_ns_qsi_ss_data;

		if ((ushort)(ns_qsi_ss_data [3] + ns_qsi_ss_data [7] + 8) < (ushort)NS_QSI_MX_SS_DATA) {

			for (i = 1; i <= (ns_qsi_ss_data [3] + ns_qsi_ss_data [7]); i++) {

				Prompt	("        Octet of Numbers", u, g_ns_qsi_ss_data);
				Scan	(d, &g_ns_qsi_ss_data);
				Echo	(u, g_ns_qsi_ss_data);
				ns_qsi_ss_data[i + 8] = (uchar)g_ns_qsi_ss_data;
			}
		}

	}	/* end of NetworkFacilityExtension */

		/* get InterpretationAPDU */

	Prompt	("      InterpretationAPDU", u, g_ns_qsi_ss_data);
	Scan	(d, &g_ns_qsi_ss_data);
	Echo	(u, g_ns_qsi_ss_data);
	ns_qsi_ss_data[8] = (uchar)g_ns_qsi_ss_data;

}

void mg_ns_ss_qsi_apdu_type ()
{
	Prompt	("Type of APDU", u, ns_qsi_ss_data[0]);
	Scan	(d, ns_qsi_ss_data);
	Echo	(u, ns_qsi_ss_data[0]);
}

void mg_ns_ss_qsi_comp_nb ()
{
	Prompt	("Number of components", u, ns_qsi_ss_data[0]);
	Scan	(d, ns_qsi_ss_data);
	Echo	(u, ns_qsi_ss_data[0]);
}

uchar ns_qsi_mg_ss_data (comp_nb, p_dse_comp_nb)
	uchar		comp_nb;			/* total number of components in Facility IE */
	uchar FAR	*p_dse_comp_nb;		/* pointer to number of components in current DseAPDU */
{

	mg_ns_ss_qsi_apdu_type ();	/* get Type of APDU */

	switch (ns_qsi_ss_data[0]) {

		default :
		case QSI_ROSE_APDU_TAG :		/* RoseAPDU */

			Isdn_qsi_store_fac_rose_apdu ();
			break;

		case QSI_DSE_BEGIN_PDU_TAG :	/* DialogBeginPDU */

			mg_ns_ss_qsi_comp_nb ();	/* get number of components */
			*p_dse_comp_nb = ns_qsi_ss_data[0];
			Isdn_qsi_store_fac_dse_BEGIN (8, *p_dse_comp_nb, "DseBEGIN");
			break;

		case QSI_DSE_END_PDU_TAG :		/* DialogEndPDU */

			mg_ns_ss_qsi_comp_nb ();	/* get number of components */
			*p_dse_comp_nb = ns_qsi_ss_data[0];
			Isdn_qsi_store_fac_dse_END (6, *p_dse_comp_nb, "DseEnd");
			break;

		case QSI_DSE_CONTINUE_PDU_TAG :		/* DialogContinuePDU */

			mg_ns_ss_qsi_comp_nb ();	/* get number of components */
			*p_dse_comp_nb = ns_qsi_ss_data[0];
			Isdn_qsi_store_fac_dse_CONTI (3, 8, *p_dse_comp_nb, "DSE", "continue");
			break;

		case QSI_DSE_ABORT_PDU_TAG :		/* DialogAbortPDU */

			*p_dse_comp_nb = 0;
			mg_ns_ss_qsi_comp_nb ();	/* get cause */

			if (ns_qsi_ss_data[0] == BYTE_VAL_NIL) {

				Isdn_qsi_store_fac_dse_ABORT (5, BYTE_VAL_NIL, 20, "ABORT", "UserAbortInformation");

			} else {

				Isdn_qsi_store_fac_dse_ABORT (5, ns_qsi_ss_data[0], 0, "ABORT", P_NIL);
			}

			break;
	}

	if (*p_dse_comp_nb == 0) {	/* It is a DseAPDU that contains no RoseAPDU("component") */

		if (comp_nb == 0) {

			Isdn_set_qsi_last_dse_comp	();
			return (STOP);
		}

		Isdn_set_qsi_next_dse_comp	();
		*p_dse_comp_nb = 255;
		return (CONTINUE);
	}

	if (*p_dse_comp_nb != 255) {	/* It is a DseAPDU that contains RoseAPDUs("components") */

		Isdn_set_qsi_next_dse_comp	();
	}

    return (OK);
}

#endif

/*EOF*/
