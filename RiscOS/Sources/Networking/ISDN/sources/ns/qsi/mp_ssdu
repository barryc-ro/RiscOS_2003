
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.qsi
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	qsi_bc_ra_ssdu				(Void_parm);
	uchar	qsi_ssdu_called_nb_plan		(Void_parm);
	uchar	qsi_ssdu_calling_nb_plan	(Void_parm);
	uchar	qsi_ssdu_conn_nb_plan		(Void_parm);
	uchar	qsi_chan_id_ssdu			(Void_parm);
	uchar	qsi_chan_id_chan_nb_ssdu	(Void_parm);
	uchar	qsi_llc_ra_ssdu				(Void_parm);

#	if NS_SUPP_SERVICES == ON
		uchar	qsi_facility_ssdu		(Void_parm);
#	endif

#endif

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
			(Ordered alphabetically)
		*/



			/* BC : bearer capabilities */


D_START	(QSI_P_BC)
		D_TABL		(_CODING_STD)
		D_TABX		(TRF_CAP)
		D_TABX		(TRF_RATE_BC)
		D_IF_VAL	(CODING_STD)
			D_TABX	(PROTOCOL_1)
		D_END_IF	(_CODING_STD_)
D_END (P_BC_1)

START	(QSI_P_BC)
		TABL		(QSI_T_CODING_STD,			&i_bc[0].coding_std)
		TABX		(QSI_TX_TRF_CAP_BC,			&i_bc[0].coding_std, &i_bc[0].trf_cap)
		TABX		(QSI_TX_TRF_RATE_BC,		&i_bc[0].coding_std, &i_bc[0].trf_rate)

		IF_VAL		(&i_bc[0].coding_std, EQ, CODING_STD_CCITT)
			TABX	(QSI_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_1, &i_bc[0].protocol_id_1)
		END_IF      ()

END	(qsi_bc_ra_ssdu)

		/* V110 */

D_START	(QSI_P_BC_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(FROM_HDR_TO_BAND_NEGOT)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
D_END (ENDIF_V110)

START	(QSI_P_BC_V110)
			TABL		(QSI_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL		(QSI_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL		(QSI_T_USER_RATE,			&i_bc[0].user_rate)
			TABL		(QSI_T_INTER_RATE,			&i_bc[0].inter_rate)
			TABL		(QSI_T_NIC_TX,				&i_bc[0].tx_nic)
			TABL		(QSI_T_NIC_RX,				&i_bc[0].rx_nic)
			TABL		(QSI_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
			TABL		(QSI_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
			PAD			(6)
			TABL		(QSI_T_STOP_BIT,			&i_bc[0].stop_bit)
			TABL		(QSI_T_DATA_BIT,			&i_bc[0].data_bit)
			TABL		(QSI_T_PARITY,				&i_bc[0].parity)
			TABL		(QSI_T_DUPLEX,				&i_bc[0].duplex)
			TABL		(QSI_T_MODEM,				&i_bc[0].modem)
END	(0)

D_START	(QSI_P_BC_V120)
		D_TABL		(V120_SYN_ASYN)
		D_TABL		(V120_NEGOTIATION)
		D_TABL		(V120_USER_RATE)
		D_PAD		(PAD_FROM_INTER_RATE_TO_FC_RX)
		D_TABL		(V120_HDR)
		D_TABL		(V120_MULTI_FRAME)
		D_TABL		(V120_OP_MODE)
		D_TABL		(V120_LLI)
		D_TABL		(V120_ASSIGN)
		D_TABL		(V120_BAND)
		D_TABL		(V120_STOP_BIT)
		D_TABL		(V120_DATA_BIT)
		D_TABL		(V120_PARITY)
		D_TABL		(V120_DUPLEX)
		D_TABL		(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(QSI_P_BC_V120)
		TABL		(QSI_T_SYN_ASYN,			&i_bc[0].syn_asyn)
		TABL		(QSI_T_NEGOTIATION,			&i_bc[0].negotiation)
		TABL		(QSI_T_USER_RATE,			&i_bc[0].user_rate)
		PAD			(5)
		TABL		(QSI_T_HEADER,				&i_bc[0].hdr)
		TABL		(QSI_T_MULTI_FRAME,			&i_bc[0].multi_frame)
		TABL		(QSI_T_OP_MODE,				&i_bc[0].op_mode)
		TABL		(QSI_T_LLI,					&i_bc[0].lli)
		TABL		(QSI_T_ASSIGN,				&i_bc[0].assign)
		TABL		(QSI_T_BAND,				&i_bc[0].band)
		TABL		(QSI_T_STOP_BIT,			&i_bc[0].stop_bit)
		TABL		(QSI_T_DATA_BIT,			&i_bc[0].data_bit)
		TABL		(QSI_T_PARITY,				&i_bc[0].parity)
		TABL		(QSI_T_DUPLEX,				&i_bc[0].duplex)
		TABL		(QSI_T_MODEM,				&i_bc[0].modem)
END	(0)
		/* other rate adaption */

D_START	(QSI_P_BC_PAD)
			D_PAD	(P_FROM_SYN_TO_MODEM)
D_END (END_PAD_RA)

START	(QSI_P_BC_PAD)
			PAD		(19)
END (0)

D_START	(QSI_P_BC_PROTO_2_3)
		D_TABX	(PROTOCOL_ID_2)
		D_TABX	(PROTOCOL_ID_3)
D_END	(BC_E)

START	(QSI_P_BC_PROTO_2_3)
		TABX	(QSI_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_2,	&i_bc[0].protocol_id_2)
		TABX	(QSI_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_3,	&i_bc[0].protocol_id_3)
END 	(0)

/*-------------------------------------------------------------------------*/

			/* CALL_STATE : call state */

D_START	(QSI_P_CALL_STATE)
	D_TABL (VAL_)
D_END (CALL_STATE_END)

START	(QSI_P_CALL_STATE)
	TABL (QSI_T_CALL_STATE,			&i_call_state[0].val)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(QSI_P_CALLED_NB)
	D_TABL (CALLED_NB_NBERING_TYPE)
	D_TABL (CALLED_NB_NBERING_PLAN_ID)
	D_FUNCTION (_CALLED_NB_PLAN)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (P_CALLED_NB_END)

START	(QSI_P_CALLED_NB)
	TABL (QSI_T_NB_TYPE,					&i_called_nb[0].nb_type)
	TABL (QSI_T_NB_PLAN,					&i_called_nb[0].plan_id)
	FUNCTION (qsi_ssdu_called_nb_plan)
	TEXT (1,QSI_MX_SZ_CALLED_NB,ANY_CHAR,	&i_called_nb[0].lgth,	(uchar **)&i_called_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_SUB_ADD : called party sub address */

D_START	(QSI_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLED_SUB_ADD_END)

START	(QSI_P_CALLED_SUB_ADD)
	TABL (QSI_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
	TABL (QSI_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
	TEXT (1,QSI_MX_SZ_CALLED_SUB_ADD,ANY_CHAR,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(QSI_P_CALLING_NB)
	D_TABL (TYPE_N)
	D_TABL (PLAN_N)
	D_FUNCTION (_CALLING_PLAN_)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_N)
	D_TEXT (DIGIT_N)
D_END (P_CALLING_NB_N_END)

START	(QSI_P_CALLING_NB)
	TABL (QSI_T_NB_TYPE,			&i_calling_nb[0].nb_type)
	TABL (QSI_T_NB_PLAN,			&i_calling_nb[0].plan_id)
	FUNCTION (qsi_ssdu_calling_nb_plan)
	TABL (QSI_T_CALLING_NB_PRES,	&i_calling_nb[0].pres)
	TABL (QSI_T_SCREEN_IND,			&i_calling_nb[0].screen_ind)
	TEXT (0,QSI_MX_SZ_CALLING_NB,ANY_CHAR,	&i_calling_nb[0].lgth,	(uchar **)&i_calling_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(QSI_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLING_SUB_ADD_END)

START	(QSI_P_CALLING_SUB_ADD)
	TABL (QSI_T_SUB_ADD_TYPE,		&i_calling_sub_add[0].sub_add_type)
	TABL (QSI_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
	TEXT (1,QSI_MX_SZ_CALLING_SUB_ADD,ANY_CHAR,&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/
			/* CONN_NB : connected party number */

D_START	(QSI_P_CONN_NB)
	D_TABL (TYPE_N)
	D_TABL (PLAN_N)
	D_FUNCTION (_PLAN_CONN_NB_)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_N)
	D_TEXT (DIGIT_N)
D_END (P_CONN_NB_N_END)

START	(QSI_P_CONN_NB)
	TABL (QSI_T_NB_TYPE,			&i_conn_nb[0].nb_type)
	TABL (QSI_T_NB_PLAN,			&i_conn_nb[0].plan_id)
	FUNCTION (qsi_ssdu_conn_nb_plan)
	TABL (QSI_T_CALLING_NB_PRES,	&i_conn_nb[0].pres)
	TABL (QSI_T_SCREEN_IND,			&i_conn_nb[0].screen_ind)
	TEXT (1,QSI_MX_SZ_CONN_NB,ANY_CHAR,	&i_conn_nb[0].lgth,	(uchar **)&i_conn_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CONN_SUB_ADD : connected party sub adddress */

D_START	(QSI_P_CONN_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CONN_SUB_ADD_END)

START	(QSI_P_CONN_SUB_ADD)
	TABL (QSI_T_SUB_ADD_TYPE,		&i_conn_sub_add[0].sub_add_type)
	TABL (QSI_T_SUB_ADD_IND,		&i_conn_sub_add[0].odd_even_ind)
	TEXT (1,QSI_MX_SZ_CONN_SUB_ADD,ANY_CHAR,&i_conn_sub_add[0].lgth,	(uchar **)&i_conn_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(QSI_P_CAUSE)
	D_TABL 		(LOCATION)
	D_ANY_VAL	(OM_CLASS)
	D_ANY_VAL	(VAL_)
	D_TEXT	(DIAGNOSTICS)
D_END (CAUSE_END)

START	(QSI_P_CAUSE)
	TABL 	(QSI_T_LOCATION,				&i_cause[0].cause_loc)
	ANY_VAL (								&i_cause[0].cause_class)
	ANY_VAL	(								&i_cause[0].cause_val)
	TEXT (0,QSI_MX_SZ_CAUSE_DIAG,ANY_CHAR,	&i_cause[0].diag_lgth,(uchar **)&i_cause[0].p_diagnostic)
END (0)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

		/*
		 * We provide int_type field
		 * for CC channel checking, even if it is "VAL" type.
		 */

D_START (QSI_P_CHAN_ID)
	D_VAL			(_INT_TYPE_)
	D_TABL			(PREF_EXCL)
	D_TABL			(D_CHAN_IND_)
	D_TABL			(_CHAN_SEL_)

	D_IF_VAL		(_AS_INDICATED)
		D_FUNCTION	(_CHAN_ID_)
		D_TEXT		(CHANNEL_NUMBERS)
	D_END_IF		(_AS_INDICATED_)

D_END (P_CHAN_ID_END)

START (QSI_P_CHAN_ID)
	VAL				(INT_TYPE_PRI,					&i_chan_id[0].int_type)
	TABL			(QSI_T_CHAN_PREF_EXCL,			&i_chan_id[0].pref_excl)
	TABL			(QSI_T_D_CHAN,					&i_chan_id[0].d_chan)
	TABL			(QSI_T_CHAN_SEL,				&i_chan_id[0].chan_sel)

	IF_VAL			(&i_chan_id[0].chan_sel, EQ, AS_INDICATED)
		FUNCTION	(qsi_chan_id_chan_nb_ssdu)
		TEXT		(1,QSI_MX_SZ_CHAN_ID,ANY_CHAR,	&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
	END_IF			()
END (qsi_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(QSI_P_HLC)
	D_TABL (CODING_STD)

	D_IF_VAL		(CODING_CCITT)
		D_TABL		(TELESERVICE)
		D_TABL		(EXT_TELESERVICE)
	D_ELSE			(OTHER_CODING)
		D_ANY_VAL	(OTHER_TELE)
		D_PAD		(OTHER_EXT_TELE)
	D_END_IF		(CODING)
D_END (HLC_END)

START	(QSI_P_HLC)
	TABL (QSI_T_CODING_STD,					&i_hlc[0].coding_std)

	IF_VAL		(&i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL	(QSI_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		TABL	(QSI_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
	ELSE		()
		ANY_VAL	(&i_hlc[0].teleservice)
		PAD		(1)
	END_IF		()
END (0)

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(QSI_P_LLC)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_PAD		(_5_)
		D_TABL		(PROTOCOL_1)
D_END	(P_LLC_1)

START	(QSI_P_LLC)
		TABL	(QSI_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(QSI_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
		PAD		(5)
		TABL	(QSI_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(qsi_llc_ra_ssdu)

		/* V110 */

D_START	(QSI_P_LLC_V110)
		D_TABL		(V110_SYN_ASYN)
		D_TABL		(V110_NEGOTIATION)
		D_TABL		(V110_USER_RATE)
		D_TABL		(V110_INTER_RATE)
		D_TABL		(V110_TX_NIC)
		D_TABL		(V110_RX_NIC)
		D_TABL		(V110_TX_FC)
		D_TABL		(V110_RX_FC)
		D_PAD		(PAD_9_14)
		D_TABL		(V110_STOP_BIT)
		D_TABL		(V110_DATA_BIT)
		D_TABL		(V110_PARITY)
		D_TABL		(V110_DUPLEX)
		D_TABL		(V110_MODEM)
D_END (ENDIF_V110)

START	(QSI_P_LLC_V110)
		TABL		(QSI_T_SYN_ASYN,			&i_llc[0].syn_asyn)
		TABL		(QSI_T_NEGOTIATION,			&i_llc[0].in_band_neg)
		TABL		(QSI_T_USER_RATE,			&i_llc[0].user_rate)
		TABL		(QSI_T_INTER_RATE,			&i_llc[0].inter_rate)
		TABL		(QSI_T_NIC_TX,				&i_llc[0].tx_nic)
		TABL		(QSI_T_NIC_RX,				&i_llc[0].rx_nic)
		TABL		(QSI_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
		TABL		(QSI_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
		PAD			(6)
		TABL		(QSI_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(QSI_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(QSI_T_PARITY,				&i_llc[0].parity)
		TABL		(QSI_T_DUPLEX,				&i_llc[0].duplex)
		TABL		(QSI_T_MODEM,				&i_llc[0].modem)
END	(0)


D_START	(QSI_P_LLC_V120)
		D_TABL		(V120_SYN_ASYN)
		D_TABL		(V120_NEGOTIATION)
		D_TABL		(V120_USER_RATE)
		D_PAD		(PAD_4_8)
		D_TABL		(V120_HDR)
		D_TABL		(V120_MULTI_FRAME)
		D_TABL		(V120_OP_MODE)
		D_TABL		(V120_LLI)
		D_TABL		(V120_ASSIGN)
		D_TABL		(V120_BAND)
		D_TABL		(V120_STOP_BIT)
		D_TABL		(V120_DATA_BIT)
		D_TABL		(V120_PARITY)
		D_TABL		(V120_DUPLEX)
		D_TABL		(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(QSI_P_LLC_V120)
		TABL		(QSI_T_SYN_ASYN,			&i_llc[0].syn_asyn)
		TABL		(QSI_T_NEGOTIATION,			&i_llc[0].in_band_neg)
		TABL		(QSI_T_USER_RATE,			&i_llc[0].user_rate)
		PAD			(5)
		TABL		(QSI_T_HEADER,				&i_llc[0].hdr)
		TABL		(QSI_T_MULTI_FRAME,			&i_llc[0].multi_frame)
		TABL		(QSI_T_OP_MODE,				&i_llc[0].op_mode)
		TABL		(QSI_T_LLI,					&i_llc[0].lli)
		TABL		(QSI_T_ASSIGN,				&i_llc[0].assign)
		TABL		(QSI_T_BAND,				&i_llc[0].band)
		TABL		(QSI_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(QSI_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(QSI_T_PARITY,				&i_llc[0].parity)
		TABL		(QSI_T_DUPLEX,				&i_llc[0].duplex)
		TABL		(QSI_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(QSI_P_LLC_PAD)
		D_PAD		(PAD_1_19)
D_END (END_PAD_RA)

START	(QSI_P_LLC_PAD)
		PAD			(19)
END (0)

D_START	(QSI_P_LLC_2)
		D_TABL		(PROTOCOL_ID_2)
		D_ANY_VAL	(OPT_2)
		D_TABL		(PROTOCOL_ID_3)
		D_ANY_VAL	(OPT_3)
D_END (LLC_E)

START	(QSI_P_LLC_2)
		TABL    	(QSI_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
		ANY_VAL		(&i_llc[0].option_2)
		TABL		(QSI_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
		ANY_VAL		(&i_llc[0].option_3)
END (0)

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(QSI_P_PROGRESS_IND)
	D_TABL		(CODING_STD)
	D_TABL		(LOCATION)
	D_TABX		(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(QSI_P_PROGRESS_IND)
	TABL		(QSI_T_CODING_STD,				&i_progress_ind[0].coding_std)
	TABL		(QSI_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	TABX		(QSI_TX_PROG_DESCR,				&i_progress_ind[0].coding_std,		&i_progress_ind[0].progress_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START	(QSI_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START	(QSI_P_RESTART_IND)
	TABL	(QSI_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

/*-------------------------------------------------------------------------*/

			/* QSIG_FAC	: qsig facility */

#if NS_SUPP_SERVICES == OFF		/* Default facility decoding = Transparent Facility */

D_START		(QSI_P_FACILITY)
	D_TEXT	(FAC_INFO_)
D_END		(FAC_P)

START		(QSI_P_FACILITY)
	TEXT	(1, QSI_MX_SZ_FACILITY,ANY_OCTET,&i_facility[0].lgth, (uchar **)&i_facility[0].p_info)
END			(0)

#else	/* NS_SUPP_SERVICES = ON -> facility decoding = ASN1 decoding */

D_START		(QSI_P_FACILITY)
D_END		(FAC_P)

START		(QSI_P_FACILITY)
END			(qsi_facility_ssdu)

#endif

/*-------------------------------------------------------------------------*/

	/* NOTIF_IND : notify indicator */

D_START			(QSI_P_NOTIF_IND)
	D_ANY_VAL	(DESCR)
	D_IF_VAL	(EXT)
		D_TEXT	(DATA)
	D_END_IF	(_EXT_)

D_END			(NOTIF_P)

START			(QSI_P_NOTIF_IND)
	ANY_VAL		(&i_notif_ind[0].notif_descr)
	IF_VAL		(&i_notif_ind[0].notif_descr, EQ, EXTENDED_DESCRIPTION)
		TEXT	(1, QSI_MX_SZ_NOTIF_IND, ANY_OCTET, &i_notif_ind[0].lgth, (uchar **)&i_notif_ind[0].p_info)
	END_IF		()
END				(0)

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

					/*---------- CODESET 5 IE --------------*/

			/*-------- Party category */

D_START	(QSI_P_PARTY_CATEGORY)
	D_TABL	(CATEG)
D_END		(PARTY_CATEGORY_E)

START	(QSI_P_PARTY_CATEGORY)
	TABL	(QSI_T_PARTY_CATEGORY,			&i_party_category[0].category)
END			(0)


			/*--------- Transit counter */

D_START	(QSI_P_TRANSIT_COUNTER)
	D_ANY_VAL   (_4)
D_END		(TRANSIT_COUNTER_E)

START	(QSI_P_TRANSIT_COUNTER)
	ANY_VAL		(							&i_transit_counter[0].count)
END			(0)

/*EOF*/

