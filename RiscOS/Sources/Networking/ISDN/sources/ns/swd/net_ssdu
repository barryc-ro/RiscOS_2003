

/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.swd
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.swd */

#include "swd.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			swd_bc_ra_ssdu - implements the specific processing
								  of a bc rate adaptation in a SSDU
								  primitive.

Usage           uchar swd_bc_ra_ssdu ();

Return value : 	swd_bc_ra_ssdu returns	= OK
										= NOK

common constants and declarations : ns.h, swd_i_s.h

common objects : internal data structure i_bc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar swd_bc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_(bc,protocol_id_1)) {

			case PROTOCOL_ID_1_V110 :
			case PROTOCOL_ID_1_RA_NON_CCITT :
				ret_code = r_exec_ssdu_ie((uchar *)&SWD_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				r_exec_ssdu_ie ((uchar *)&SWD_P_BC_PAD);
				break;
		}

		return (r_exec_ssdu_ie ((uchar *)&SWD_P_BC_2));

	} else {

		switch (I_(bc,protocol_id_1)) {

			case PROTOCOL_ID_1_V110 :
			case PROTOCOL_ID_1_RA_NON_CCITT :
				ret_code = s_exec_ssdu_ie((uchar *)&SWD_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				s_exec_ssdu_ie ((uchar *)&SWD_P_BC_PAD);
				break;
		}
		return (s_exec_ssdu_ie ((uchar *)&SWD_P_BC_2));
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		swd_check_cause_val - check if the cause value is allowed
								  when coming from CALL CONTROL

Usage           uchar swd_check_cause_val ();

Return value : 	swd_check_cause_val returns	= OK
											= NOK

common constants and declarations : ns.h, net_i_s.

common objects : internal data structure, ssdu common context.

*--------------------------------------------------------------------------*/
uchar swd_check_cause_val ()
{
	uchar   class_val;				/* cause class & value */

	class_val = C_v (I_(cause,cause_class), I_(cause,cause_val));

	if (direction == FROM_CALL_CONTROL) {

		if (I_(cause,coding_std) == CODING_STD_CCITT) {

			switch (class_val) {

				case C_v (C_C_NORMAL_EVENT,				C_V_NORMAL_CLEARING_16)					:
				case C_v (C_C_NORMAL_EVENT,				C_V_USER_BUSY_17) 						:
				case C_v (C_C_NORMAL_EVENT,				C_V_CALL_REJECT_21) 					:
				case C_v (C_C_NORMAL_EVENT,				C_V_NORMAL_UNSPECIFIED_31)				:

				case C_v (C_C_SERVICE_NOT_IMPLEMENTED,	C_V_BC_NOT_IMPLEMENTED_65) 				:

				case C_v (C_C_INVALID_MESSAGE,			C_V_INVALID_CALL_REF_81) 				:
				case C_v (C_C_INVALID_MESSAGE,			C_V_INCOMPATIBLE_DESTINATION_88)		:
				case C_v (C_C_INVALID_MESSAGE,			C_V_INVALID_MESSAGE_UNSPECIFIED_95) 	:

				case C_v (C_C_PROTOCOL_ERROR,   		C_V_MANDATORY_IE_MISSING_96)			:
				case C_v (C_C_PROTOCOL_ERROR,   		C_V_MESSAGE_TYPE_NON_EXISTENT_97)   	:
				case C_v (C_C_PROTOCOL_ERROR,   		C_V_MESSAGE_STATE_INCONSISTENCY_98) 	:
				case C_v (C_C_PROTOCOL_ERROR,   		C_V_NON_EXISTENT_IE_99)					:
				case C_v (C_C_PROTOCOL_ERROR,   		C_V_INVALID_IE_CONTENT_100)				:
				case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_NOT_COMPATIBLE_101)			:
				case C_v (C_C_PROTOCOL_ERROR,			C_V_RECOVERY_ON_TIMER_EXPIRY_102)		:

						/* Nothing to do because the cause value is allowed */

					break;

				default :

					/* Other values are not permitted from Call Control */

					return (NOK);
			}

		} else {

			/*
			 * Here, we have a NATIONAL coding standard.
			 * No national cause values shall be generated by the user.
			 */

			return (NOK);
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		swd_chan_id_ssdu - swd_chan_id_chan_nb_ssdu
				implements the specific processing of a chan_id
				IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/

uchar swd_chan_id_chan_nb_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

		if (I_(chan_id,int_type) == INT_TYPE_PRI) {

			/*
			 * Reset the extension bit in the chan_nb field.
			 */

			for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
				Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		swd_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/
uchar swd_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		if (I_(chan_id,int_type) == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}


			/*
			 * Set the extension bit to 1 in the chan_nb field.
			 */

			i = I_(chan_id, chan_nb_lgth)-1;

			Set_ext_bit (I_(chan_id, p_chan_nb)[i]);
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			swd_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar swd_llc_ra_ssdu ();

Return value : 	swd_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, swd_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar swd_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&SWD_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&SWD_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&SWD_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&SWD_P_LLC_2));

	} else {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&SWD_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&SWD_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&SWD_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&SWD_P_LLC_2));
	}

}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------

		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ */

#define NET_ALERT_RQ			ALERT_IN

		/* NS_ALERT_IN */

#define	NET_ALERT_IN			ALERT_RQ

		/* NS_CALL_PROC_RQ */

#define NET_CALL_PROC_RQ		CALL_PROC_IN

		/* NS_CALL_PROC_IN */

#define NET_CALL_PROC_IN		CALL_PROC_RQ

		/* NS_CONN_RQ */

#define NET_CONN_RQ				CONN_IN

		/* NS_CONN_IN */

#define NET_CONN_IN				CONN_RQ

		/* NS_CONN_RS */

#define NET_CONN_RS				CONN_CO

		/* NS_CONN_CO */

#define NET_CONN_CO				CONN_RS

		/* NS_PROGRESS_RQ */

#define	NET_PROGRESS_RQ			PROGRESS_IN

		/* NS_PROGRESS_IN */

#define	NET_PROGRESS_IN			PROGRESS_RQ

		/* NS_SETUP_ACK_IN */

#define NET_SETUP_ACK_IN		SETUP_ACK_RQ

/*===============    CALL  INFORMATION  PHASE  MESSAGES    ====================*/

		/* NS_USER_INFO_RQ */

#define	NET_USER_INFO_RQ		USER_INFO_IN

		/* NS_USER_INFO_IN */

#define NET_USER_INFO_IN		USER_INFO_RQ

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

#define NET_CLEAR_RQ			CLEAR_IN

		/* NS_CLEAR_IN */

#define	NET_CLEAR_IN			 CLEAR_RQ

		/* NS_CLEAR_RS */

#define	NET_CLEAR_RS			CLEAR_CO

		/* NS_CLEAR_CO */

#define	NET_CLEAR_CO			CLEAR_RS

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

		/* NS_CONGESTION_CONTROL_IN */

#define	NET_CON_CON_RQ			 CON_CON_IN

		/* NS_INFO_RQ */

#define NET_INFO_RQ				INFO_IN

		/* NS_INFO_IN */

#define NET_INFO_IN				INFO_RQ

		/* NS_NOTIFY_IN */

#define	NET_NOTIFY_IN			NOTIFY_RQ

		/* NS_RESTART_RQ - (No IE in this message) */

#define	NET_RESTART_RQ			RESTART_IN

		/* NS_RESTART_RS */

#define	NET_RESTART_CO			RESTART_RS

		/* NS_RESTART_IN */

#define	NET_RESTART_IN			RESTART_IN

/*=========================================================================*/

#define Ns_swd_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_swd_end_table_or_function		};

#define Ns_swd_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_swd_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_swd		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_swd_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_swd_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "swd.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define SWD_MX_SSDU (sizeof(SWD_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		swd_mx_size_ssdu = SWD_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_swd_table_or_function
#undef Ns_swd_end_table_or_function
#undef Ns_swd_tab_ssdu_ie_entry
#undef Ns_swd_tab_ssdu_ie_mx_entry
#undef Ns_swd_tab_ssdu_entry

#define Ns_swd_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_swd_end_table_or_function		}

#define Ns_swd_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_swd_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_swd_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_swd
#	define Message_header_ssdu_ie_swd		Ns_swd_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_swd_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_swd_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_swd_ssdu ()
{
    uchar   i_pic;

#	include "swd.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

