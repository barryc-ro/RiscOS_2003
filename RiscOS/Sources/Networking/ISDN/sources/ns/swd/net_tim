
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_tim.swd
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	- Implements the SWD_TVKT specific timer tables of the NETWORK SIGNALLING
 *	  layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/* TIMERS IMPLICIT VALUES */

				/* Network timer implicit values */

#define SWD_NET_T300			 	(1		* SECOND)	/* T300 */
#define SWD_NET_T302				(15		* SECOND)	/* T302 */
#define SWD_NET_T303				(4		* SECOND)	/* T303 */
#define SWD_NET_T305				(30		* SECOND)	/* T305 */
#define SWD_NET_T306				(30		* SECOND)	/* T306 */
#define SWD_NET_T308				(4		* SECOND)	/* T308 */
#define SWD_NET_T310				(10		* SECOND)	/* T310 */
#define SWD_NET_T316				(120	* SECOND)	/* T316 */
#define SWD_NET_T317				(60		* SECOND)	/* T317 */
#define SWD_NET_T320				(30		* SECOND)	/* T320 */
#define SWD_NET_T391				(15		* SECOND)	/* T391 */

				/* User timer values */

#define SWD_USER_T300				(1		* SECOND)	/* T300 */
#define SWD_USER_T303				(4		* SECOND)	/* T303 */
#define SWD_USER_T304				(15		* SECOND)	/* T304 */
#define SWD_USER_T305				(4		* SECOND)	/* T305 */
#define SWD_USER_T308				(4		* SECOND)	/* T308 */
#define SWD_USER_T310				(10		* SECOND)	/* T310 */
#define SWD_USER_T313				(4		* SECOND)	/* T313 */
#define SWD_USER_T316				(120	* SECOND)	/* T316 RESTART PROCEDURE */
#define SWD_USER_T317				(60		* SECOND)	/* T317 RESTART PROCEDURE */
#define SWD_USER_T397				(15		* SECOND)	/* T397 CONGESTION CONTROL */

			/* NS timer implicit value table */

		/* Call associated timers */

CONST_ARRAY struct ns_timer SWD_TI_CALL[] = {

/*	NT value			User value			Event ID	Index (0 -> NB_CALL_TIMER-1) */

	{SWD_NET_T300,		SWD_USER_T300,		TI_300,			SWD_T300_IDX},		/* T300 */
	{SWD_NET_T302,		0,					TI_302,			SWD_T302_IDX},		/* T302 */
	{SWD_NET_T303,		SWD_USER_T303,		TI_303,			SWD_T303_IDX},		/* T303 */
	{0,					SWD_USER_T304,		TI_304,			SWD_T304_IDX},		/* T304 */
	{SWD_NET_T305,		SWD_USER_T305,		TI_305,			SWD_T305_IDX},		/* T305 */
	{SWD_NET_T306,		0,					TI_306,			SWD_T306_IDX},		/* T306 */
	{SWD_NET_T308,		SWD_USER_T308,		TI_308,			SWD_T308_IDX},		/* T308 */
	{SWD_NET_T310,		SWD_USER_T310,		TI_310,			SWD_T310_IDX},		/* T310 */
	{0,					SWD_USER_T313,		TI_313,			SWD_T313_IDX},		/* T313 */
	{SWD_NET_T320,		0,					TI_320,			SWD_T320_IDX},		/* T320 */
	{SWD_NET_T391,		0,					TI_391,			SWD_T391_IDX},		/* T391 */
	{0,					SWD_USER_T397,		TI_397,			SWD_T397_IDX},		/* T397 */

};
		/* DLCI associated timers */

CONST_ARRAY struct ns_timer SWD_TI_DLCI[] = {

/*	NT value			User value			Event ID		Index (0 -> MX_DLCI_TIMER-1) */

	{TI_DL_VAL,			TI_DL_VAL,			TI_DL	},		/* T3DL */
	{TI_DL_EST_VAL,		TI_DL_EST_VAL,		TI_DL_EST},		/* T3_DL_EST */

#	if NS_RESTART_PROCEDURE == ON
		{SWD_NET_T316,	SWD_USER_T316,		TI_316	},		/* T316 */
		{SWD_NET_T317,	SWD_USER_T317,		TI_317	},		/* T317 */
#	endif
};


	/* Index table for timers used in the kernel */

CONST_ARRAY uchar SWD_TI_IDX[] = {

#	if NS_T309 == ON
		SWD_T309,
#	endif

#	if NS_SEGMENTATION == ON
		SWD_T314,
#	endif

#	if NS_RESTART_PROCEDURE == ON
		SWD_T316,
		SWD_T317,
#	endif

	TI_EOT,
};


/*EOF*/


