
/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - net_mac.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


			/*
				 MACROs and DECLARATIONS used to access the Network
				 Signalling entity (NS) from the user Layer 4 Signalling
				 entity (L4S).
			*/

/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_ntt_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_ntt_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(ntt_,pr), p_off)
#define Isdn_init_ntt_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_ntt(pr,ie)					Get_ie 			(Paste(ntt_,pr), Paste (ntt_, ie))
#define	Isdn_get_val_ntt(pr,ie,fld)			Isdn_get_val	(Paste(ntt_,pr), Paste (ntt_, ie), fld)
#define Isdn_p_str_ntt(pr,ie,fld)			Isdn_p_str		(Paste(ntt_,pr), Paste (ntt_, ie), fld)
#define	Isdn_lgth_str_ntt(pr,ie,fld)		Isdn_lgth_str	(Paste(ntt_,pr), Paste (ntt_, ie), fld)
#define	Isdn_mx_lgth_str_ntt(pr,ie,fld)		Isdn_mx_lgth_str(Paste(ntt_,pr), Paste (ntt_, ie), fld)
#define	P_start_val_ns_ntt(pr,ie)			P_start_val_ns	(Paste(ntt_,pr), Paste (ntt_, ie))
#define	P_val_ns_ntt(ie)					P_val_ns		(Paste(ntt_,ie))
#define Set_offset_ntt(pr,ie)				Set_offset		(Paste(ntt_,pr),Paste(ntt_,ie))
#define	Set_next_ie_ntt(ie)					Set_next_ie		(Paste(ntt_,ie))
#define	Set_val_ntt(ie,fld,val)				Set_val			(Paste(ntt_,ie), fld, val)
#define Set_str_ntt(ie, lv, p_str, mx_sz)	Set_str			(Paste(ntt_,ie), lv, p_str, mx_sz)
#define Set_mem_ntt(ie, lv, p_mem, sz)		Set_mem			(Paste(ntt_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_ntt(pr,ie)	Set_to_next_ie_instance (Paste(ntt_,pr), Paste (ntt_, ie))
#define Get_remaining_ie_instance_nb_ntt(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(ntt_,pr), Paste (ntt_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_ntt	ns_offset_t ntt_message_header;
#else
#	define Message_header_offset_ntt
#endif

/*-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

		/*****************************************************
		**		Each offset is a relative pointer on the	**
		**		data of an IE element						**
		*****************************************************/

/*==================== CALL	ESTABLISHMENT MESSAGES =====================*/

		/* NS_ALERT_RQ/IN */

struct off_ns_ntt_te_alert_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_chan_id;				/* channel ID */
	ns_offset_t ntt_facility;				/* facility */
	ns_offset_t ntt_progress_ind;			/* progress indicator */
	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_signal;					/* signal */
	ns_offset_t ntt_feature_act;			/* feature activation */
	ns_offset_t ntt_feature_ind;			/* feature indication */
	ns_offset_t ntt_uui;					/* user to user information */
};

typedef struct off_ns_ntt_te_alert_in		off_ns_ntt_alert_rq;
typedef struct off_ns_ntt_te_alert_in		off_ns_ntt_alert_in;

		/* NS_CALL_PROC_RQ/IN */

struct off_ns_ntt_te_call_proc_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_chan_id;				/* channel ID */
	ns_offset_t ntt_progress_ind;			/* progress indicator */
	ns_offset_t ntt_display;				/* display */
};

typedef struct off_ns_ntt_te_call_proc_in	off_ns_ntt_call_proc_rq;
typedef struct off_ns_ntt_te_call_proc_in	off_ns_ntt_call_proc_in;

		/* NS_CONN_RQ/IN */

struct off_ns_ntt_te_conn_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_sending_complete;		/* sending complete */
	ns_offset_t ntt_repeat_ind;				/* repetition indicator */
	ns_offset_t ntt_bc;						/* bearer capability */
	ns_offset_t ntt_chan_id;				/* channel ID */
	ns_offset_t ntt_facility;				/* facility */
	ns_offset_t ntt_progress_ind;			/* progress indicator */

#if NS_SPF_FACILITY == ON
	ns_offset_t ntt_spf_fac;				/* network specific facility */
#endif

	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_keypad;					/* keypad */
	ns_offset_t ntt_switchhook;				/* switchhook */
	ns_offset_t ntt_signal;					/* signal */
	ns_offset_t ntt_feature_act;			/* feature activation */
	ns_offset_t ntt_feature_ind;			/* feature indication */
	ns_offset_t ntt_calling_nb;				/* calling number (from network) */
	ns_offset_t ntt_calling_sub_add;		/* calling subaddress */
	ns_offset_t ntt_called_nb;				/* called number */
	ns_offset_t ntt_called_sub_add;			/* called subaddress */
	ns_offset_t ntt_transit_net_sel;		/* transit network selection */
	ns_offset_t ntt_llc;					/* low layer capability */
	ns_offset_t ntt_hlc;					/* high layer compatibility */
	ns_offset_t ntt_uui;					/* user to user information */
};

typedef struct off_ns_ntt_te_conn_in	off_ns_ntt_conn_rq;
typedef struct off_ns_ntt_te_conn_in	off_ns_ntt_conn_in;


		/* NS_CONN_RS/CO (CONN or CONN_ACK) */

struct off_ns_ntt_te_conn_co {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_chan_id;				/* channel ID */
	ns_offset_t ntt_facility;				/* facility */
	ns_offset_t ntt_progress_ind;			/* progress indicator */
	ns_offset_t ntt_switchhook;				/* switchhook */
	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_signal;					/* signal */
	ns_offset_t ntt_feature_act;			/* feature activation */
	ns_offset_t ntt_feature_ind;			/* feature indication */
	ns_offset_t ntt_llc;					/* low layer capability */
	ns_offset_t ntt_uui;					/* user to user information */
};

typedef struct off_ns_ntt_te_conn_co	off_ns_ntt_conn_rs;
typedef struct off_ns_ntt_te_conn_co	off_ns_ntt_conn_co;


		/* NS_PROGRESS_RQ/IN */

struct off_ns_ntt_te_progress_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_cause;					/* cause */
	ns_offset_t ntt_progress_ind;			/* progress indicator */
	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_uui;					/* user to user information */
};

typedef struct off_ns_ntt_te_progress_in	off_ns_ntt_progress_rq;
typedef struct off_ns_ntt_te_progress_in	off_ns_ntt_progress_in;

/*=============== CALL INFORMATION PHASE MESSAGES ====================*/

		/* NS_RESUME_CO */

struct off_ns_ntt_te_resume_co {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_call_id;				/* call identity */
	ns_offset_t ntt_chan_id;				/* channel ID */
	ns_offset_t ntt_cause;					/* cause */
	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_advice_charge;			/* advice of charge */
};

typedef struct off_ns_ntt_te_resume_co		off_ns_ntt_resume_rq;
typedef struct off_ns_ntt_te_resume_co		off_ns_ntt_resume_co;

		/* NS_SUSPEND_CO */

struct off_ns_ntt_te_suspend_co {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_call_id;				/* call identity */
	ns_offset_t ntt_cause;					/* cause */
	ns_offset_t ntt_display;				/* display */
};

typedef struct off_ns_ntt_te_suspend_co		off_ns_ntt_suspend_rq;
typedef struct off_ns_ntt_te_suspend_co		off_ns_ntt_suspend_co;

		/* NS_USER_INFO_IN */

struct off_ns_ntt_te_user_info_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_more_data;				/* more data */
	ns_offset_t ntt_uui;					/* user to user information */
};

typedef struct off_ns_ntt_te_user_info_in	off_ns_ntt_user_info_rq;
typedef struct off_ns_ntt_te_user_info_in	off_ns_ntt_user_info_in;

/*=====================	CALL CLEARING MESSAGES =======================*/

		/* NS_CLEAR_RQ/IN */

struct off_ns_ntt_te_clear_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_cause;					/* cause */
	ns_offset_t ntt_facility;				/* facility */
	ns_offset_t ntt_progress_ind;			/* progress indicator */
	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_signal;					/* signal */
	ns_offset_t ntt_feature_ind;			/* feature indication */
	ns_offset_t ntt_uui;					/* user to user information */
	ns_offset_t ntt_advice_charge;			/* advice of charge */
};

typedef struct off_ns_ntt_te_clear_in		off_ns_ntt_clear_rq;
typedef struct off_ns_ntt_te_clear_in		off_ns_ntt_clear_in;


		/* NS_CLEAR_RS/CO */

struct off_ns_ntt_te_clear_co {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_cause;					/* cause */
	ns_offset_t ntt_facility;				/* facility */
	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_signal;					/* signal */
	ns_offset_t ntt_feature_ind;			/* feature indication */
	ns_offset_t ntt_uui;					/* user to user information */
	ns_offset_t ntt_advice_charge;			/* advice of charge */
};

typedef struct off_ns_ntt_te_clear_co		off_ns_ntt_clear_rs;
typedef struct off_ns_ntt_te_clear_co		off_ns_ntt_clear_co;

/*==================== MISCELLANEOUS MESSAGES =======================*/


		/* NS_CONGEST_CONTROL_IN */

struct off_ns_ntt_te_con_con_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_congest_level;			/* congestion level */
	ns_offset_t ntt_cause;					/* cause */
	ns_offset_t ntt_display;				/* display */
};

typedef struct off_ns_ntt_te_con_con_in		off_ns_ntt_net_con_con_rq;
typedef struct off_ns_ntt_te_con_con_in		off_ns_ntt_con_con_in;

		/* NS_INFO_IN */

struct off_ns_ntt_te_info_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_sending_complete;		/* sending complete */
	ns_offset_t ntt_cause;					/* cause */
	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_signal;					/* signal */
	ns_offset_t ntt_keypad;					/* keypad */
	ns_offset_t ntt_switchhook;				/* switchhook */
	ns_offset_t ntt_feature_act;			/* feature activation */
	ns_offset_t ntt_feature_ind;			/* feature indication */
	ns_offset_t ntt_called_nb;				/* called number */
};

typedef struct off_ns_ntt_te_info_in		off_ns_ntt_info_rq;
typedef struct off_ns_ntt_te_info_in		off_ns_ntt_info_in;

		/* NS_SPF_FACILITY_RQ/CO */

struct off_ns_ntt_te_spf_fac_co {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_service_id;				/* service identifier */
	ns_offset_t ntt_cause;					/* cause */
	ns_offset_t ntt_chan_id;				/* channel ID */
	ns_offset_t ntt_facility;				/* facility */
	ns_offset_t ntt_display;				/* display */
};

typedef struct off_ns_ntt_te_spf_fac_co		off_ns_ntt_spf_fac_rq;
typedef struct off_ns_ntt_te_spf_fac_co		off_ns_ntt_spf_fac_co;

		/* NS_NOTIFY_RQ/IN */

struct off_ns_ntt_te_notify_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_bc;						/* bearer capability */
	ns_offset_t ntt_notif_ind;				/* notify indicator */
	ns_offset_t ntt_display;				/* display */
};

typedef struct off_ns_ntt_te_notify_in		off_ns_ntt_notify_rq;
typedef struct off_ns_ntt_te_notify_in		off_ns_ntt_notify_in;

		/* NS_RESTART_IN */

struct off_ns_ntt_te_restart_in {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_chan_id;				/* channel identifier */
	ns_offset_t ntt_display;				/* display */
	ns_offset_t ntt_restart_ind;			/* restart indicator */
};

typedef struct off_ns_ntt_te_restart_in		off_ns_ntt_restart_rq;
typedef struct off_ns_ntt_te_restart_in		off_ns_ntt_restart_in;

typedef struct off_ns_ntt_te_restart_in		off_ns_ntt_restart_rs;
typedef struct off_ns_ntt_te_restart_in		off_ns_ntt_restart_co;

		/* NS_STATUS_ENQ_RQ */

struct off_ns_ntt_te_status_enq_rq {
	Message_header_offset_ntt				/* message header parameters */
	ns_offset_t ntt_ssdu_ie_nil;
};

typedef struct off_ns_ntt_te_status_enq_rq	off_ns_ntt_status_enq_rq;
typedef struct off_ns_ntt_te_status_enq_rq	off_ns_ntt_status_enq_in;


		/**************************************************
		**	DESCRIPTION of the value of an IE.			 **
		**	---------------------------------			 **
		**	EACH ENTRY SHALL BE IN ACCORDANCE WITH THE	 **
		**	CORRESPONDING SSDU IE META-PROGRAM			 **
		**												 **
		**************************************************/

		/* Advice of Charge (ADVICE_CHARGE) */

struct val_ns_ntt_advice_charge {
	Next_instance_offset
	ie_array	data[NTT_MX_SZ_ADVICE_CHARGE+2];	/* call identity */
};

		/* Bearer Capability (BC) */

struct val_ns_ntt_bc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* destination rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock (NIC) on Transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock (NIC) on Reception (Rx) */
	ie_val		fc_tx;					/* flow control on Transmission (Tx) */
	ie_val		fc_rx;					/* flow control on Reception (Rx) */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits */
	ie_val		parity;					/* number of parity bit */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user information layer 2 protocol */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */

};

		/* Call IDentification (CALL_ID) */

struct val_ns_ntt_call_id {
	Next_instance_offset
	ie_array	value[NTT_MX_SZ_CALL_ID+2];	/* call identity */
};

		/* Called party number (CALLED_NB) */

struct val_ns_ntt_called_nb {
	Next_instance_offset
	ie_array	nb[NTT_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_ntt_called_sub_add {
	Next_instance_offset
	ie_val		sub_add_type;			/* called subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array	sub_add[NTT_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_ntt_calling_nb {
	Next_instance_offset
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array	nb[NTT_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_ntt_calling_sub_add {
	Next_instance_offset
	ie_val		sub_add_type;			/* calling subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array	sub_add[NTT_MX_SZ_CALLING_SUB_ADD+2]; /* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_ntt_cause {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		cause_loc;				/* location */
	ie_val		recommend;				/* recommendation */
	ie_val		cause_class;			/* cause class field */
	ie_val		cause_val;			/* cause value field */
	ie_array	cause_diag[NTT_MX_SZ_CAUSE_DIAG+2];	/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_ntt_chan_id {
	Next_instance_offset
	ie_val		int_type;				/* interface type */
	ie_val 		int_id;					/* interface id */
	ie_val		pref_excl;				/* preferred or exclusive channel */
	ie_val		d_chan;					/* D-channel indicator */
	ie_val		chan_sel;				/* information channel selection */
	ie_val		int_id_val;				/* interface id value */
	ie_val		coding_std;				/* coding standard */
	ie_val		chan_type;				/* channel type */
	ie_val		nb_map;					/* channel nb / mapping */
	ie_array	chan_nb[NTT_MX_SZ_CHAN_ID+2]; /* channel number */
};

		/* Congestion level (CONGEST_LEVEL) */

struct val_ns_ntt_congest_level {
	Next_instance_offset
	ie_val		congest_level;			/* congestion level */
};

		/* Date/Time (DATE_TIME) */

struct val_ns_ntt_date_time {
	Next_instance_offset
	ie_val		year;
	ie_val		month;
	ie_val		day;
	ie_val		hour;
	ie_val		minute;
};

		/* Display */

struct val_ns_ntt_display {
	Next_instance_offset
	ie_array	text[NTT_MX_SZ_DISPLAY+2];	/* display information */
};

		/* Facility (FACILITY) */

struct val_ns_ntt_facility {
	Next_instance_offset
	ie_val		comp_tag;				/* component tag */
	ie_val		service;				/* service */
	ie_val		pref;					/* preferred */
	ie_val		error_val;				/* error value */
	ie_array	invoke_id[NTT_MX_SZ_FACILITY+2];/* invoke id */
};

		/* feature activation			(FEATURE_ACT) */

struct val_ns_ntt_feature_act {
	Next_instance_offset
	ie_val		feature_nb;				/* feature number */
	ie_val		feature_nb_ext;			/* feature number extension */
};

		/* feature indication 			(FEATURE_IND) */

struct val_ns_ntt_feature_ind {
	Next_instance_offset
	ie_val		feature_nb;				/* feature number */
	ie_val		feature_nb_ext;			/* feature number extension */
	ie_val		status_ind;				/* status indicator */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_ntt_hlc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		teleservice;			/* high layer characteristics identification */
	ie_val		ext_teleservice;		/* extended high layer characteristics identification */
};

		/* Keypad */

struct val_ns_ntt_keypad {
	Next_instance_offset
	ie_array	text[NTT_MX_SZ_KEYPAD+2];	/* keypad information */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_ntt_llc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		out_band_neg;			/* out-band negotiation */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* destination rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock on transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock on reception (Rx) */
	ie_val		fc_tx;					/* flow control on transmission (Tx) */
	ie_val		fc_rx;					/* flow control on reception (Rx) */
	ie_val		hdr;					/* rate adaption header included or not */
	ie_val		multi_frame;			/* multiple frame establishement support in DL */
	ie_val		op_mode;				/* mode of operation */
	ie_val		lli_negot;				/* logical link identifier negotiation */
	ie_val		assign;					/* assignor/assignee */
	ie_val		band_negot;				/* in-band/out-band negotiation */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits excluding parity if present */
	ie_val		parity;					/* parity information */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user layer 2 protocol information */
	ie_val		option_2;				/* optional layer 2 protocol information */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
	ie_val		option_3;				/* optional layer 3 protocol information */
};

		/* Notification indicator (NOTIF_IND) */

struct val_ns_ntt_notif_ind {
	Next_instance_offset
	ie_val		notif_descr;			/* notification description*/
};


		/* Progress indicator (PROGRESS_IND) */

struct val_ns_ntt_progress_ind {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		progress_loc;			/* location */
	ie_val		progress_descr;			/* progress description */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_ntt_restart_ind {
	Next_instance_offset
	ie_val		restart_class;			/* class */
};

		/* service identifier	(SERVICE_ID) */

struct val_ns_ntt_service_id {
	Next_instance_offset
	ie_val service_id;					/* service id */
};

		/* Signal (SIGNAL) */

struct val_ns_ntt_signal {
	Next_instance_offset
	ie_val		signal_val;				/* signal value */
};

		/* Network Specific Facility (SPF_FAC) */

struct val_ns_ntt_spf_fac {
	Next_instance_offset
	ie_val		net_id_lgth;			/* length of network identification */
	ie_val		net_id_type;			/* type of network identification */
	ie_val		net_id_plan;			/* network identification plan */
	ie_array	net_id[NTT_MX_SZ_NET_ID+1];	/* network identification array */
	ie_array	fac_info[NTT_MX_SZ_SPF_FAC+2];/* network-specific facility specification */
};

		/* switchhook	(SWITCHHOOK) */

struct val_ns_ntt_switchhook {
	Next_instance_offset
	ie_val hook_val;					/* hook value */
};

		/* Transit network selection (TRANSIT_NET_SEL) */

struct val_ns_ntt_transit_net_sel {
	Next_instance_offset
	ie_val		net_id_type;			/* type of network identification */
	ie_val		net_id_plan;			/* network identification plan */
	ie_array	net_id[NTT_MX_SZ_TRANSIT_NET_SEL+2];	/* address of network identification information */
};

		/* User-to-user information (UUI) */

struct val_ns_ntt_uui {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array	text[NTT_MX_SZ_UUI+2];		/* user information */
};

#if NS_IE_TSP_OUT == ON

			/* Definitions for compilation purpose only */

	struct val_ns_ntt_sending_complete {
		Next_instance_offset
		ie_val	unused;
	};

	struct val_ns_ntt_more_data {
		Next_instance_offset
		ie_val	unused;
	};

#endif

/*=========================================================================*/

							/* Information Elements (IE) */


			/*
				Isdn_ntt_store_bc : store the bearer capability information
									element :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_ntt_store_bc(pr, trf_cap_, trf_mode_, trf_rate_, structure_, dest_rate_, protocol_id_1_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
				Set_offset_ntt	(pr,	bc);								\
				Set_val_ntt	 (bc,	trf_cap,		trf_cap_);				\
				Set_val_ntt	 (bc,	trf_mode,		trf_mode_);				\
				Set_val_ntt	 (bc,	trf_rate,		trf_rate_);				\
				Set_val_ntt	 (bc,	structure,		structure_);			\
				Set_val_ntt	 (bc,	dest_rate,		dest_rate_);			\
				Set_val_ntt	 (bc,	protocol_id_1,	protocol_id_1_);		\
				Set_val_ntt	 (bc,	syn_asyn,		syn_asyn_);				\
				Set_val_ntt	 (bc,	negotiation,	negotiation_);			\
				Set_val_ntt	 (bc,	user_rate,		user_rate_);			\
				Set_val_ntt	 (bc,	inter_rate,		inter_rate_);			\
				Set_val_ntt	 (bc,	nic_tx,			nic_tx_);				\
				Set_val_ntt	 (bc,	nic_rx,			nic_rx_);				\
				Set_val_ntt	 (bc,	fc_tx,			fc_tx_);				\
				Set_val_ntt	 (bc,	fc_rx,			fc_rx_);				\
				Set_val_ntt	 (bc,	stop_bit,		stop_bit_);				\
				Set_val_ntt	 (bc,	data_bit,		data_bit_);				\
				Set_val_ntt	 (bc,	parity,			parity_);				\
				Set_val_ntt	 (bc,	duplex,			duplex_);				\
				Set_val_ntt	 (bc,	modem,			modem_);				\
				Set_val_ntt	 (bc,	protocol_id_2,	protocol_id_2_);		\
				Set_val_ntt	 (bc,	protocol_id_3,	protocol_id_3_);		\
				Set_next_ie_ntt (bc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_bc_V110 : store the bearer capability information
										element for V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_ntt_store_bc_V110(pr, trf_cap_, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_ntt_store_bc	(pr,			trf_cap_,		trf_mode_,		\
							trf_rate_,		structure_,		dest_rate_,		\
							PROTOCOL_ID_1_V110,syn_asyn_,	negotiation_,	\
							user_rate_,		inter_rate_,	nic_tx_,		\
							nic_rx_,		fc_tx_,			fc_rx_,			\
							stop_bit_,		data_bit_,		parity_,		\
							duplex_,		modem_,			protocol_id_2_,	\
							protocol_id_3_)

			/*
				Isdn_ntt_store_bc_not_V110 : store the bearer capability information
											element for non V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= protocol id 1
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_ntt_store_bc_not_V110(pr, trf_cap_, trf_mode_, trf_rate_, structure_, dest_rate_, protocol_id_1_, protocol_id_2_, protocol_id_3_) \
		Isdn_ntt_store_bc	(pr,			trf_cap_,		trf_mode_,		\
							trf_rate_,		structure_,		dest_rate_,		\
							protocol_id_1_, BYTE_VAL_NIL,	BYTE_VAL_NIL,	\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,	\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,	\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,	\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	protocol_id_2_,	\
							protocol_id_3_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_called_nb : called number IE

					INPUT :
						- pr				= primitive ID,
						- nb_				= address of the literal string.
			*/

#define Isdn_ntt_store_called_nb(pr, nb_)							\
		Set_offset_ntt	(pr,		called_nb);							\
		Set_str_ntt		(called_nb, nb,		nb_,	NTT_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_called_sub_add : called sub-address IE

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_ = subaddress type,
						- odd_even_ind_ = odd/even indicator,
						- sub_add_		= address of the literal string.

			*/

#define Isdn_ntt_store_called_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_)	\
		Set_offset_ntt	(pr,				called_sub_add);							\
		Set_val_ntt		(called_sub_add,	sub_add_type,	sub_add_type_);				\
		Set_val_ntt		(called_sub_add,	odd_even_ind,	odd_even_ind_);				\
		Set_str_ntt		(called_sub_add,	sub_add,		sub_add_, NTT_MX_SZ_CALLED_SUB_ADD+1)

#define Isdn_ntt_store_called_sub_add_u(pr, odd_even_ind_, sub_add_, sz_)	\
		Set_offset_ntt	(pr,				called_sub_add);							\
		Set_val_ntt		(called_sub_add,	sub_add_type,	SUB_ADD_USER);				\
		Set_val_ntt		(called_sub_add,	odd_even_ind,	odd_even_ind_);				\
		Set_mem_ntt		(called_sub_add,	sub_add,		sub_add_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_calling_nb : store calling number IE

					INPUT :
						- pr			= primitive ID,
						- pres_			= presentation indicator,
						- screen_ind_	= screening indicator,
						- nb_			= pointer on the calling number literal string.
			*/

#define Isdn_ntt_store_calling_nb(pr, pres_, screen_ind_, nb_)		\
		Set_offset_ntt	(pr,			calling_nb);					\
		Set_val_ntt		(calling_nb,	pres,		pres_);				\
		Set_val_ntt		(calling_nb,	screen_ind,	screen_ind_);		\
		Set_str_ntt		(calling_nb,	nb,			nb_, NTT_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
					Isdn_ntt_calling_sub_add : calling sub-address IE

						INPUT :
						- pr			= primitive ID,
						- sub_add_type_ = subaddress type,
						- odd_even_ind_ = odd/even indicator,
						- sub_add_		= address of the literal string.


			*/

#define Isdn_ntt_store_calling_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_)	\
		Set_offset_ntt	(pr,				calling_sub_add);							\
		Set_val_ntt		(calling_sub_add,	sub_add_type,	sub_add_type_);				\
		Set_val_ntt		(calling_sub_add,	odd_even_ind,	odd_even_ind_);				\
		Set_str_ntt		(calling_sub_add,	sub_add,		sub_add_, NTT_MX_SZ_CALLING_SUB_ADD+1)

#define Isdn_ntt_store_calling_sub_add_u(pr, odd_even_ind_, sub_add_, sz_)	\
		Set_offset_ntt	(pr,				calling_sub_add);							\
		Set_val_ntt		(calling_sub_add,	sub_add_type,	SUB_ADD_USER);				\
		Set_val_ntt		(calling_sub_add,	odd_even_ind,	odd_even_ind_);				\
		Set_mem_ntt		(calling_sub_add,	sub_add,		sub_add_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_call_id : call ID

					INPUT :
						- pr	= primitive ID,
						- value_= call ID.

			*/


#define Isdn_ntt_store_call_id(pr, value_)						\
		Set_offset_ntt	(pr,		call_id);						\
		Set_str_ntt		(call_id,	value,	value_, NTT_MX_SZ_CALL_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_cause : cause IE

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- cause_loc_	= cause location,
						- recommend_	= recommendation,
						- cause_class_	= cause class,
						- cause_val_	= cause value,
						- cause_diag_	= cause diagnostic.

			*/

#define Isdn_ntt_store_cause(pr, coding_std_, cause_loc_, recommend_, cause_class_, cause_val_, cause_diag_) \
		Set_offset_ntt	(pr,	cause);								\
		Set_val_ntt	 (cause, coding_std, coding_std_);				\
		Set_val_ntt	 (cause, cause_loc,	cause_loc_);				\
		Set_val_ntt	 (cause, recommend,	recommend_);				\
		Set_val_ntt	 (cause, cause_class,cause_class_);				\
		Set_val_ntt	 (cause, cause_val,	cause_val_);				\
		Set_str_ntt	 (cause, cause_diag, cause_diag_, NTT_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_ntt_store_chan_id_BRI : store channel ID IE

					INPUT :
						- pr			= primitive ID,
						- int_id_		= interface id,
						- int_id_val_	= interface id value,
						- pref_excl_	= preferred channel,
						- d_chan_		= D-channel indicator,
						- chan_sel_	 = channel selection,
			*/

#define Isdn_ntt_store_chan_id_BRI(pr, int_id_, int_id_val_,pref_excl_, d_chan_, chan_sel_) \
		Set_offset_ntt	(pr,		chan_id);							\
		Set_val_ntt		(chan_id,	int_type,	INT_TYPE_BRI);			\
		Set_val_ntt		(chan_id,	int_id,		int_id_);				\
		Set_val_ntt		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_ntt		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_ntt		(chan_id,	d_chan,		d_chan_);				\
		Set_val_ntt		(chan_id,	chan_sel,	chan_sel_);				\
		Set_str_ntt		(chan_id,	chan_nb,	P_NIL,		1)


			/*
				 Isdn_ntt_store_chan_id_PRI : store channel ID IE

					INPUT :
						- pr			= primitive ID,
						- int_id_		= interface id,
						- int_id_val_	= interface id value,
						- pref_excl_	= preferred channel,
						- d_chan_		= D-channel indicator,
						- chan_sel_		= channel selection,
						- coding_std_	= coding standard,
						- chan_type_	= channel type,
						- nb_map_		= channel nb / mapping,
						- p_chan_nb_	= channel number.
			*/

#define Isdn_ntt_store_chan_id_PRI(pr,int_id_, int_id_val_,pref_excl_, d_chan_, chan_sel_, coding_std_, chan_type_,nb_map_, p_chan_nb_) \
		Set_offset_ntt	(pr,		chan_id);					\
		Set_val_ntt		(chan_id,	int_type,	INT_TYPE_PRI);	\
		Set_val_ntt		(chan_id,	int_id,		int_id_);		\
		Set_val_ntt		(chan_id,	int_id_val,	int_id_val_);	\
		Set_val_ntt		(chan_id,	pref_excl,	pref_excl_);	\
		Set_val_ntt		(chan_id,	d_chan,		d_chan_);		\
		Set_val_ntt		(chan_id,	chan_sel,	chan_sel_);		\
		Set_val_ntt		(chan_id,	coding_std, coding_std_);	\
		Set_val_ntt		(chan_id,	chan_type,	chan_type_);	\
		Set_val_ntt		(chan_id,	nb_map,		nb_map_);				\
		Set_str_ntt		(chan_id,	chan_nb,	p_chan_nb_,	 NTT_MX_SZ_CHAN_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_congest_level: congestion level

					INPUT :
						- pr			= primitive ID,
						- congest_level_= congestion level.
			*/

#define Isdn_ntt_store_congest_level(pr, congest_level_)			\
		Set_offset_ntt	(pr,			congest_level);					\
		Set_val_ntt		(congest_level, congest_level,	congest_level_);\
		Set_next_ie_ntt (congest_level)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_date_time : date / time

					INPUT :
						- pr= primitive ID,
						- y = year,
						- mo= month,
						- d = day,
						- h = hour,
						- mi= minute.

			*/

#define Isdn_ntt_store_date_time(pr, y, mo, d, h, mi)	\
		Set_offset_ntt	(pr,		date_time);				\
		Set_val_ntt		(date_time, year,	y);				\
		Set_val_ntt		(date_time, month,	mo);			\
		Set_val_ntt		(date_time, day,	d);				\
		Set_val_ntt		(date_time, hour,	h);				\
		Set_val_ntt		(date_time, minute, mi);			\
		Set_next_ie_ntt (date_time)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_display : display IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/

#define Isdn_ntt_store_display(pr,	p_text)							\
		Set_offset_ntt	(pr,		display);							\
		Set_str_ntt		(display,	text,	p_text, NTT_MX_SZ_DISPLAY+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_facility : facility IE

					INPUT :
						- pr			= primitive ID,
						- comp_tag		= component tag
						- service		= service
						- pref			= preferred
						- error_val		= error value
						- p_invoke_id	= invoke id
			*/

#define Isdn_ntt_store_facility(pr, comp_tag_, service_, pref_, error_val_, p_invoke_id) \
		Set_offset_ntt	(pr,		facility);									\
		Set_val_ntt		(facility,	comp_tag,	comp_tag_);						\
		Set_val_ntt		(facility,	service,	service_);						\
		Set_val_ntt		(facility,	pref,		pref_);							\
		Set_val_ntt		(facility,	error_val,	error_val_);					\
		Set_str_ntt		(facility,	invoke_id,	p_invoke_id,	NTT_MX_SZ_FACILITY+1)


			/*
				Isdn_ntt_store_facility_INVOKE

					INPUT :
						- pr			= primitive ID,
						- pref			= preferred
						- service		= service
						- invoke_id		= invoke id
			*/

#define Isdn_ntt_store_facility_INVOKE(pr, service_, pref_, p_invoke_id)\
		Isdn_ntt_store_facility(pr,		FAC_INVOKE, service_,		\
								pref_,	BYTE_VAL_NIL,	p_invoke_id)

			/*
				Isdn_ntt_store_facility_RESULT

					INPUT :
						- pr			= primitive ID,
						- invoke_id		= invoke id
			*/

#define Isdn_ntt_store_facility_RESULT(pr, p_invoke_id)					\
		Isdn_ntt_store_facility(pr,			FAC_RETURN_RESULT,	BYTE_VAL_NIL,\
								BYTE_VAL_NIL,BYTE_VAL_NIL,		p_invoke_id)

			/*
				Isdn_ntt_store_facility_ERROR

					INPUT :
						- pr		= primitive ID,
						- error_val	= error value
						- invoke_id	= invoke id
			*/

#define Isdn_ntt_store_facility_ERROR(pr, error_val_, p_invoke_id)			\
		Isdn_ntt_store_facility(pr,			FAC_RETURN_ERROR,	BYTE_VAL_NIL,\
								BYTE_VAL_NIL,error_val_,		p_invoke_id)

/*-------------------------------------------------------------------------*/

				/* feature activation			(FEATURE_ACT) */

#define Isdn_ntt_store_feature_act(pr, feature_nb_, feature_nb_ext_)			\
				Set_offset_ntt	(pr, feature_act);									\
				Set_val_ntt		(feature_act, feature_nb,		feature_nb_);		\
				Set_val_ntt		(feature_act, feature_nb_ext,	feature_nb_ext_);	\
				Set_next_ie_ntt	(feature_act)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_hlc : high layer compatibility for
										non-CCITT coding standard

					INPUT :
						- pr		= primitive ID,
						- std		= coding standard,
						- tele		= teleservice,
						- ext_tele	= extended teleservice.
			*/

#define Isdn_ntt_store_hlc(pr, std, tele, ext_tele)			\
		Set_offset_ntt	(pr,	hlc);							\
		Set_val_ntt		(hlc,	coding_std,			std);		\
		Set_val_ntt		(hlc,	teleservice,		tele);		\
		Set_val_ntt		(hlc,	ext_teleservice,	ext_tele);	\
		Set_next_ie_ntt (hlc)

			/*
				Isdn_ntt_store_hlc_CCITT : high layer compatibility for
										CCITT coding standard

					INPUT :
						- pr		= primitive ID,
						- tele		= teleservice,
						- ext_tele	= extended teleservice.
			*/

#define Isdn_ntt_store_hlc_CCITT(pr, tele, ext_tele)	\
		Isdn_ntt_store_hlc	(pr, CODING_STD_CCITT, tele, ext_tele)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_ntt_store_keypad(pr,p_text)						\
		Set_offset_ntt	(pr,		keypad);						\
		Set_str_ntt		(keypad,	text,	p_text, NTT_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_llc : low layer compatibility

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_ntt_store_llc(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, protocol_id_1_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
		Set_offset_ntt	(pr,	llc);									\
		Set_val_ntt		(llc,	coding_std,		coding_std_);			\
		Set_val_ntt		(llc,	trf_cap,		trf_cap_);				\
		Set_val_ntt		(llc,	out_band_neg,	out_neg);				\
		Set_val_ntt		(llc,	trf_mode,		trf_mode_);				\
		Set_val_ntt		(llc,	trf_rate,		trf_rate_);				\
		Set_val_ntt		(llc,	structure,		structure_);			\
		Set_val_ntt		(llc,	dest_rate,		dest_rate_);			\
		Set_val_ntt		(llc,	protocol_id_1,	protocol_id_1_);		\
		Set_val_ntt		(llc,	syn_asyn,		syn_asyn_);				\
		Set_val_ntt		(llc,	negotiation,	negotiation_);			\
		Set_val_ntt		(llc,	user_rate,		user_rate_);			\
		Set_val_ntt		(llc,	inter_rate,		inter_rate_);			\
		Set_val_ntt		(llc,	nic_tx,			nic_tx_);				\
		Set_val_ntt		(llc,	nic_rx,			nic_rx_);				\
		Set_val_ntt		(llc,	fc_tx,			fc_tx_);				\
		Set_val_ntt		(llc,	fc_rx,			fc_rx_);				\
		Set_val_ntt		(llc,	hdr,			hdr_);					\
		Set_val_ntt		(llc,	multi_frame,	multi_frame_);			\
		Set_val_ntt		(llc,	op_mode,		op_mode_);				\
		Set_val_ntt		(llc,	lli_negot,		lli_negot_);			\
		Set_val_ntt		(llc,	assign,			assign_);				\
		Set_val_ntt		(llc,	band_negot,		band_negot_);			\
		Set_val_ntt		(llc,	stop_bit,		stop_bit_);				\
		Set_val_ntt		(llc,	data_bit,		data_bit_);				\
		Set_val_ntt		(llc,	parity,			parity_);				\
		Set_val_ntt		(llc,	duplex,			duplex_);				\
		Set_val_ntt		(llc,	modem,			modem_);				\
		Set_val_ntt		(llc,	protocol_id_2,	protocol_id_2_);		\
		Set_val_ntt		(llc,	option_2,		option_2_);				\
		Set_val_ntt		(llc,	protocol_id_3,	protocol_id_3_);		\
		Set_val_ntt		(llc,	option_3,		option_3_);				\
		Set_next_ie_ntt (llc)


			/*
				Isdn_ntt_store_llc_V110 : low layer compatibility for
											V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_ntt_store_llc_V110(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_ntt_store_llc(pr,coding_std_,	trf_cap_,	out_neg,	trf_mode_,	\
							trf_rate_,			structure_,		dest_rate_,		\
							PROTOCOL_ID_1_V110, syn_asyn_,		negotiation_,	\
							user_rate_,	 		inter_rate_,	nic_tx_,		\
							nic_rx_,			fc_tx_,			fc_rx_,			\
							BYTE_VAL_NIL,		BYTE_VAL_NIL,	BYTE_VAL_NIL,	\
							BYTE_VAL_NIL,		BYTE_VAL_NIL,	BYTE_VAL_NIL,	\
							stop_bit_,			data_bit_,		parity_,		\
							duplex_,			modem_,			protocol_id_2_,	\
							BYTE_VAL_NIL,		protocol_id_3_, BYTE_VAL_NIL)


			/*
				Isdn_ntt_store_llc_V120 : low layer compatibility for
											V120 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_ntt_store_llc_V120(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_ntt_store_llc	(pr,			coding_std_,	trf_cap_,			\
							out_neg,		trf_mode_,		trf_rate_,			\
							structure_,		dest_rate_,		PROTOCOL_ID_1_V120, \
							syn_asyn_,		negotiation_,	user_rate_,			\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	hdr_,				\
							multi_frame_,	op_mode_,		lli_negot_,			\
							assign_,		band_negot_,	stop_bit_,			\
							data_bit_,		parity_,		duplex_,			\
							modem_,			protocol_id_2_, BYTE_VAL_NIL,		\
							protocol_id_3_	BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_more_data : more data

					INPUT :
						- pr	= primitive ID,

			*/

#define Isdn_ntt_store_more_data(pr) \
		Set_offset_ntt	(pr,	more_data)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_notif_ind : notification indicator

					INPUT :
						- pr	= primitive ID,
						- descr = description.

			*/

#define Isdn_ntt_store_notif_ind(pr, descr)				\
		Set_offset_ntt	(pr,		notif_ind);				\
		Set_val_ntt		(notif_ind, notif_descr,	descr);	\
		Set_next_ie_ntt (notif_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_progress_ind : progress indicator

					INPUT :
						- pr				= primitive ID,
						- coding_std_		= coding standard,
						- progress_loc_		= location,
						- progress_descr_	= description.

			*/

#define Isdn_ntt_store_progress_ind(pr, coding_std_, progress_loc_, progress_descr_) \
		Set_offset_ntt	(pr,			progress_ind);							\
		Set_val_ntt		(progress_ind,	coding_std,		coding_std_);			\
		Set_val_ntt		(progress_ind,	progress_loc,	progress_loc_);			\
		Set_val_ntt		(progress_ind,	progress_descr, progress_descr_);		\
		Set_next_ie_ntt (progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_ntt_store_restart_ind(pr, class_)					\
		Set_offset_ntt	(pr,			restart_ind);				\
		Set_val_ntt		(restart_ind,	restart_class,	class_);	\
		Set_next_ie_ntt (restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_sending_complete : sending complete

					INPUT :
						- pr	= primitive ID,

			*/

#define Isdn_ntt_store_sending_complete(pr) \
		Set_offset_ntt	(pr,	sending_complete)

/*-------------------------------------------------------------------------*/

				/* service identifier			(SERVICE_ID) */

#define Isdn_ntt_store_service_id(pr, service_id_)					\
				Set_offset_ntt	(pr, service_id);						\
				Set_val_ntt		(service_id, service_id, service_id_);	\
				Set_next_ie_ntt	(service_id)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_signal : signal message

					INPUT :
						- pr			= primitive ID,
						- signal_val	= signal value.

			*/

#define Isdn_ntt_store_signal(pr, signal_val_)				\
		Set_offset_ntt	(pr,		signal);					\
		Set_val_ntt		(signal,	signal_val, signal_val_);	\
		Set_next_ie_ntt (signal)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_spf_fac : network specific facility

					INPUT :
						- pr			= primitive ID,
						- net_id_lgth_	= length of network identification,
						- net_id_type_	= type of network identification,
						- net_id_plan_	= network identification plan,
						- p_net_id		= network identification array
						- p_fac_info	= network-specific facility specification
			*/

#define Isdn_ntt_store_spf_fac(pr, net_id_lgth_, net_id_type_, net_id_plan_, p_net_id, p_fac_info)	\
		Set_offset_ntt	(pr,		spf_fac);										\
		Set_val_ntt		(spf_fac,	net_id_lgth,	net_id_lgth_);					\
		Set_val_ntt		(spf_fac,	net_id_type,	net_id_type_);					\
		Set_val_ntt		(spf_fac,	net_id_plan,	net_id_plan_);					\
		Set_mem			(spf_fac,	net_id,			p_net_id,	(net_id_lgth_ > NTT_MX_SZ_NET_ID) ? NTT_MX_SZ_NET_ID : net_id_lgth); \
		Set_str_ntt		(spf_fac,	fac_info,		p_fac_info, NTT_MX_SZ_SPF_FAC+1)

			/*
				Isdn_ntt_get_spf_fac_p_info
				Isdn_ntt_get_spf_fac_info_lgth : network specific facility

					INPUT :
						- pr	= primitive ID,
			*/

#define Isdn_ntt_get_spf_fac_p_info(pr) \
		Isdn_p_str (pr, net_id) + Isdn_lgth_str (pr, net_id) + 1

#define Isdn_ntt_get_spf_fac_info_lgth(pr)	\
		*(Isdn_ntt_get_spf_fac_p_info(pr) - 1)

/*-------------------------------------------------------------------------*/

				/* switchhook					(SWITCHHOOK) */

#define Isdn_ntt_store_switchhook(pr, hook_val_)		\
		Set_offset_ntt	(pr, switchhook);					\
		Set_val_ntt		(switchhook, hook_val, hook_val_);	\
		Set_next_ie_ntt	(switchhook)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_transit_net_sel : transit network selection

					INPUT :
						- pr			= primitive ID,
						- net_id_type_	= type of network identification,
						- net_id_plan_	= network identification plan,
						- net_id_		= address of network identification.
			*/

#define Isdn_ntt_store_transit_net_sel(pr, net_id_type_, net_id_plan_, net_id_) \
		Set_offset_ntt	(pr,				transit_net_sel);						\
		Set_val_ntt		(transit_net_sel,	net_id_type,	net_id_type_);			\
		Set_val_ntt		(transit_net_sel,	net_id_plan,	net_id_plan_);			\
		Set_str_ntt		(transit_net_sel,	net_id,			net_id_,	NTT_MX_SZ_TRANSIT_NET_SEL+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_ntt_store_uui : user to user information IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator,
						- p_text			= address of the user info.
			*/

#define Isdn_ntt_store_uui(pr, protocol_discr_, p_text)			\
		Set_offset_ntt	(pr,	uui);								\
		Set_val_ntt		(uui,	protocol_discr, protocol_discr_);	\
		Set_str_ntt		(uui,	text,	p_text, NTT_MX_SZ_UUI+1)

/*EOF*/
