
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_tim.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- Implements the NTT specific timer tables of the NETWORK SIGNALLING
 *			layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/* TIMERS IMPLICIT VALUES */

				/* Network timer implicit values */

#define NTT_NET_T300			 	 (3 * SECOND)	/* T300 */
#define NTT_NET_T301				(180* SECOND)	/* T301 */
#define NTT_NET_T303				 (5 * SECOND)	/* T303 (Q931 = 4s, set to 5s for NTT actual requirement) */
#define NTT_NET_T305				(30 * SECOND)	/* T305 */
#define NTT_NET_T306				(30 * SECOND)	/* T306 */
#define NTT_NET_T307			   (180 * SECOND)	/* T307 */
#define NTT_NET_T308				 (4 * SECOND)	/* T308 */
#define NTT_NET_T309				(90 * SECOND)   /* T309 */
#define NTT_NET_T310				(10 * SECOND)   /* T310 */
#define NTT_NET_T312				 (6 * SECOND)   /* T312 */
#define NTT_NET_T314				 (4 * SECOND)   /* T314 */
#define NTT_NET_T316			   (120 * SECOND)   /* T316 */
#define NTT_NET_T317			   (100 * SECOND)   /* T317 */
#define NTT_NET_T322				 (4 * SECOND)   /* T322 */

				/* User timer values */

#define NTT_USER_T300				 (3 * SECOND)	/* T300 */
#define NTT_USER_T303				 (5 * SECOND)	/* T303 (Q931 = 4s, set to 5s for NTT actual requirement) */
#define NTT_USER_T305				(30 * SECOND)	/* T305 */
#define NTT_USER_T308				 (4 * SECOND)	/* T308 */
#define NTT_USER_T309				(90 * SECOND)	/* T309 */
#define NTT_USER_T310				(45 * SECOND)	/* T310 - GREATER THAN 40s */
#define NTT_USER_T313				 (4 * SECOND)	/* T313 */
#define NTT_USER_T314				(4 * SECOND)	/* T314 */
#define NTT_USER_T316			   (120 * SECOND)	/* T316 RESTART PROCEDURE */
#define NTT_USER_T317			   (100 * SECOND)	/* T317 RESTART PROCEDURE - LESS THAN T316 */
#define NTT_USER_T318				 (4 * SECOND)	/* T318 */
#define NTT_USER_T319				 (4 * SECOND)	/* T319 */
#define NTT_USER_T322				 (4 * SECOND)   /* T322 */
#define NTT_USER_T3JA				(50 * SECOND)   /* T3JA */

			/* NS timer implicit value table */

		/* Call associated timers */

CONST_ARRAY struct ns_timer NTT_TI_CALL[] = {

/*	NT value		User value		Event ID		Index (0 -> NB_CALL_TIMER-1) */

	{NTT_NET_T300,		NTT_USER_T300,		TI_300,			NTT_T300_IDX},		/* T300 */
	{NTT_NET_T301,		0,					TI_301,			NTT_T301_IDX},		/* T301 */
	{NTT_NET_T303,		NTT_USER_T303,		TI_303,			NTT_T303_IDX},		/* T303 */
	{NTT_NET_T305,		NTT_USER_T305,		TI_305,			NTT_T305_IDX},		/* T305 */
	{NTT_NET_T306,		0,					TI_306,			NTT_T306_IDX},		/* T306 */
	{NTT_NET_T307,		0,					TI_307,			NTT_T307_IDX},		/* T307 */
	{NTT_NET_T308,		NTT_USER_T308,		TI_308,			NTT_T308_IDX},		/* T308 */
	{NTT_NET_T310,		NTT_USER_T310,		TI_310,			NTT_T310_IDX},		/* T310 */
	{NTT_NET_T312,		0,					TI_312,			NTT_T312_IDX},		/* T312 */
	{0,					NTT_USER_T313,		TI_313,			NTT_T313_IDX},		/* T313 */
	{0,					NTT_USER_T318,		TI_318,			NTT_T318_IDX},		/* T318 */
	{0,					NTT_USER_T319,		TI_319,			NTT_T319_IDX},		/* T319 */
	{NTT_NET_T322,		NTT_USER_T322,		TI_322,			NTT_T322_IDX},		/* T322 */
	{0,					NTT_USER_T3JA,		TI_3JA,			NTT_T3JA_IDX},		/* T3JA */

#	if NS_T309 == ON
		{NTT_NET_T309,	NTT_USER_T309,		TI_309,			NTT_T309_IDX},		/* T309 */
#	endif

};

		/* DLCI associated timers */

CONST_ARRAY struct ns_timer NTT_TI_DLCI[] = {

/*	NT value			User value			Event ID		Index (0 -> MX_DLCI_TIMER-1) */

	{TI_DL_VAL,			TI_DL_VAL,			TI_DL	},		/* T3DL */
	{TI_DL_EST_VAL,		TI_DL_EST_VAL,		TI_DL_EST},		/* T3_DL_EST */

#	if NS_RESTART_PROCEDURE == ON
		{NTT_NET_T316,	NTT_USER_T316,		TI_316	},		/* T316 */
		{NTT_NET_T317,	NTT_USER_T317,		TI_317	},		/* T317 */
#	endif

#	if NS_SEGMENTATION == ON
		{NTT_NET_T314,	NTT_USER_T314,		TI_314	},		/* T314 */
#	endif

};


	/* Index table for timers used in the kernel */

CONST_ARRAY uchar NTT_TI_IDX[] = {

#	if NS_T309 == ON
		NTT_T309,
#	endif

#	if NS_SEGMENTATION == ON
		NTT_T314,
#	endif

#	if NS_RESTART_PROCEDURE == ON
		NTT_T316,
		NTT_T317,
#	endif

	TI_EOT,
};


/*EOF*/
