
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_state.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        ntt_u0 to ntt_u19 - user side - implements the processing of an event
 *                     according to the state of the call (u0 to u254).
 *
 *        n0 to n254 - network side - implements the processing of an event
 *                     according to the state of the call (n0 to n254).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*       U        */
						/*----------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             ntt_u0 to ntt_u19 - user side - implements the processing of an
							  event according to the call state.

Usage            void uxx (void);

Related
functions usage void Stop_timer_ns (uchar x_timer_ns);

				void Start_timer_ns (uchar x_timer_ns);
						- x_timer_ns : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call
			*/

void ntt_u0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Call_bc_trf_cap = I_bc_trf_cap;
			Send_to_call_control (NS_CONN_IN);

			if (is_ie_i (CODESET_0, UUI) == ABSENT) {
				Call_uui_rq = OFF;

			} else {

				Call_uui_rq = ON;
				Call_ui_count = 0;
			}

			Set_state (STATE_CALL_PRESENT_6);
			Start_timer_ns (NTT_T300);
			break;

		case NS_CONN_RQ :
			Call_bc_trf_cap = I_bc_trf_cap;
			Send_to_d_channel_and_save_spdu (SETUP);

			if (is_ie_i (CODESET_0, UUI) == ABSENT) {
				Call_uui_rq = OFF;

			} else {

				Call_uui_rq = ON;
				Call_ui_count = 0;
			}

			Set_state (STATE_CALL_INIT_1);
			Start_timer_ns (NTT_T303);
			Start_timer_ns (NTT_T3JA);
			break;

		case NS_RESUME_RQ :

				/* assume the interface type is Basic */

			if ((Na_type == BRI) && (Na_connection == POINT_TO_MULTIPOINT)) {
				Send_to_d_channel (RES);
				Set_state (STATE_RESUME_REQUEST_17);
				Start_timer_ns (NTT_T318);

			} else {

				ns_unexpected_ev ();
			}

			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of user
			   action requesting call establishment from the network.
			*/

void ntt_u1 ()
{
	switch (event_id) {

		case DA_CALL_PROC :
			Release_saved_spdu ();		/* saved setup no more useful */
			Stop_timer_ns (NTT_T303);
			Send_to_call_control (NS_CALL_PROC_IN);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			Start_timer_ns (NTT_T310);
			break;

		case DA_ALERT :
			Release_saved_spdu ();		/* saved setup no more useful */
			Stop_timer_ns (NTT_T303);
			Send_to_call_control (NS_ALERT_IN);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Release_saved_spdu ();		/* saved setup no more useful */
			Stop_timer_ns (NTT_T303);
			Stop_timer_ns (NTT_T3JA);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);	/* optional */
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_303 :

#			if 0

					/*	Q931 behaviour. */

				if (++N303 < MX_N303) {
					Send_saved_spdu_to_d_channel (SETUP);
					Restart_timer_ns (NTT_T303);

				} else {

					Send_to_d_channel (REL_COMP);
					set_i_cause (C_C_TIMER, C_V_T303, (char FAR *) &(Call_state));
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
				}

#			else

					/* $$$$ Actual NTT requirement $$$$ */

				Send_to_d_channel (REL_COMP);
				set_i_cause (C_C_TIMER, C_V_T303, (char FAR *) &(Call_state));
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();

#			endif

			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC_3 */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void ntt_u3 ()
{
	switch (event_id) {

		case DA_ALERT :
			Stop_timer_ns (NTT_T310);
			Send_to_call_control (NS_ALERT_IN);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Stop_timer_ns (NTT_T310);
			Stop_timer_ns (NTT_T3JA);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);		/* optional */
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_PROGRESS :

				/* PROGRESS_IND IE is mandatory and so present */

			if (I_progress_ind_description != PROGRESS_DESCR_IN_BAND_NOW) {
				Stop_timer_ns (NTT_T310);		/* only in case of interworking */
			}
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_310 :
			Stop_timer_ns (NTT_T3JA);
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "310");
			Save_cause ();								/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (NTT_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		case TI_3JA :
			set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
			Save_cause ();								/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (NTT_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED_4 */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void ntt_u4 ()
{
	switch (event_id) {

		case DA_CONN :
			Stop_timer_ns (NTT_T3JA);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);		/* optional */
			Set_state (STATE_ACTIVE_10);
			break;

		case NS_USER_INFO_RQ :

			if (Call_ui_u_count < (uint)MX_UI_COUNT) {
				Inc_ui_u_count ();
				Send_to_d_channel (USER_INFO);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_USER_INFO :

			if (Call_ui_n_count < (uint)MX_UI_COUNT) {
				Inc_ui_n_count ();
				Send_to_call_control (NS_USER_INFO_IN);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_3JA :
			set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
			Save_cause ();								/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (NTT_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void ntt_u6()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Stop_timer_ns (NTT_T300);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (NTT_T300);
			Send_to_d_channel (CONN);
			Start_timer_ns (NTT_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_CALL_PROC_RQ :
			Stop_timer_ns (NTT_T300);
			Send_to_d_channel (CALL_PROC);
			Set_state (STATE_INCOMING_CALL_PROC_9);
			break;

		case TI_300 :

#			if NS_TYPE_PRI == ON

				if (Na_type == PRI) {
				set_i_cause (C_C_INVALID_MESSAGE, C_V_INCOMPATIBLE_DESTINATION_88, P_NIL);
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
				}

#			endif

			set_i_cause (C_C_TIMER, C_V_T300, (char FAR *) &(Call_state));
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED_7 */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void ntt_u7 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_CONNECT_REQUEST_8);
			Start_timer_ns (NTT_T313);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		case NS_USER_INFO_RQ :

			if (Call_ui_u_count < (uint)MX_UI_COUNT) {
				Inc_ui_u_count ();
				Send_to_d_channel (USER_INFO);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_USER_INFO :

			if (Call_ui_n_count < (uint)MX_UI_COUNT) {
				Inc_ui_n_count ();
				Send_to_call_control (NS_USER_INFO_IN);

			} else {

				ns_unexpected_ev ();
			}

			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST_8 */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void ntt_u8 ()
{
	switch (event_id) {

		case DA_CONN_ACK :
			Stop_timer_ns (NTT_T313);
			Send_to_call_control (NS_CONN_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_313 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "313");
			Save_cause ();									/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (NTT_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROC_9 */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void ntt_u9 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Start_timer_ns (NTT_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		case NS_SPF_FACILITY_RQ :

			switch (I_service_id) {

				case DA_FACILITY :

					if (Call_fac_rq == ON) {
						ns_unexpected_ev ();

					} else {

						Call_fac_rq = ON;
						Send_to_d_channel (NTT_FAC);
					}

					break;

				default :
					break;
			}

			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE_10 */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an acknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void ntt_u10 ()
{
	switch (event_id) {

		case NS_SUSPEND_RQ :

				/*
					assume the interface type is Basic in Multipoint
					configuration and check that no supplementary service
					has been activated.
				*/

			if ((Na_type == BRI) &&
				(Na_connection == POINT_TO_MULTIPOINT) &&
				(Call_sub_state == SUB_STATE_NULL_0)) {
				Send_to_d_channel (SUSP);
				Set_state (STATE_SUSPEND_REQUEST_15);
				Start_timer_ns (NTT_T319);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case NS_SPF_FACILITY_RQ :

			switch (I_service_id) {

				case DA_FACILITY :

					if (Call_fac_rq == ON) {
						ns_unexpected_ev ();

					} else {

						Call_fac_rq = ON;
						Send_to_d_channel (NTT_FAC);
					}

					break;

				default :
					ns_unexpected_ev ();
					break;
			}

			break;

		case NS_SPF_FACILITY_RS :

			switch (I_service_id) {

				case DA_HOLD_ACK :

					if (Call_sub_state == SUB_STATE_HOLD_RQ) {
						Send_to_d_channel (HOLD_ACK);
						Call_sub_state = SUB_STATE_HELD;

					} else {

						ns_unexpected_ev ();
					}

					break;

				case DA_RECONN_ACK :

					if (Call_sub_state == SUB_STATE_RECONN_RQ) {
						Send_to_d_channel (NTT_RECONN_ACK);
						Call_sub_state = SUB_STATE_NULL_0;

					} else {

						ns_unexpected_ev ();
					}

					break;

				case DA_HOLD_REJ :

					if (Call_sub_state == SUB_STATE_HOLD_RQ) {
						Send_to_d_channel (HOLD_REJ);
						Call_sub_state = SUB_STATE_NULL_0;

					} else {

						ns_unexpected_ev ();
					}

					break;

				case DA_RECONN_REJ :

					if (Call_sub_state == SUB_STATE_RECONN_RQ) {
						Send_to_d_channel (NTT_RECONN_REJ);
						Call_sub_state = SUB_STATE_HELD;

					} else {

						ns_unexpected_ev ();
					}

					break;

				default :
					break;
			}

			break;

		case DA_FACILITY :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Set_ie_service (DA_FACILITY);
				Send_to_call_control (NS_SPF_FACILITY_CO);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_HOLD :

			if ((Na_subscription != NO_SERVICE) &&
				(Call_sub_state == SUB_STATE_NULL_0)) {
				Set_ie_service (DA_HOLD);
				Send_to_call_control (NS_SPF_FACILITY_IN);
				Call_sub_state = SUB_STATE_HOLD_RQ;

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_RECONN :

			if (Call_sub_state == SUB_STATE_HELD) {
				Set_ie_service (DA_RECONN);
				Send_to_call_control (NS_SPF_FACILITY_IN);
				Call_sub_state = SUB_STATE_RECONN_RQ;

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_NOTIFY :
			Send_to_call_control (NS_NOTIFY_IN);
			break;

		case NS_NOTIFY_RQ :
			Send_to_d_channel (NOTIFY);
			break;

#		if NS_T309 == ON

			case TI_309 :

				if (Na_T309_option == ON) {
					set_i_cause (C_C_NORMAL_EVENT, C_V_DEST_OUT_OF_ORDER_27, P_NIL);
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;
				}

#		endif

		case NS_USER_INFO_RQ :
			Send_to_d_channel (USER_INFO);
			break;

		case DA_USER_INFO :
			Send_to_call_control (NS_USER_INFO_IN);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST_11 */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void ntt_u11 ()
{
	switch (event_id) {

/*$*/	case DA_FACILITY :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Set_ie_service (DA_FACILITY);
				Send_to_call_control (NS_SPF_FACILITY_CO);

			} else {

				ns_unexpected_ev ();
			}

			break;

/*$*/	 case NS_SPF_FACILITY_RQ :

			switch (I_service_id) {

				case DA_FACILITY :

					if (Call_fac_rq == ON) {
						ns_unexpected_ev ();

					} else {

						Call_fac_rq = ON;
						Send_to_d_channel (NTT_FAC);
					}

					break;

				default :
					break;
			}

			break;

		case DA_NOTIFY :
			Send_to_call_control (NS_NOTIFY_IN);
			break;

		 case TI_305 :
			Restore_cause ();	/* send saved cause of the previous DISC */
			set_ie_i (CODESET_0, CAUSE);
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (NTT_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		 default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION_12 */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void ntt_u12 ()
{
	switch (event_id) {

/*$*/	case DA_FACILITY :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Set_ie_service (DA_FACILITY);
				Send_to_call_control (NS_SPF_FACILITY_CO);

			} else {

				ns_unexpected_ev ();
			}

			break;

/*$*/	case NS_SPF_FACILITY_RQ :

			switch (I_service_id) {

				case DA_FACILITY :

					if (Call_fac_rq == ON) {
						ns_unexpected_ev ();

					} else {

						Call_fac_rq = ON;
						Send_to_d_channel (NTT_FAC);

					}

					break;

				default :
					break;
			}

			Stop_timer_ns (NTT_T300);
			break;

		case NS_CLEAR_RS :
			disc_cause_error ();
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (NTT_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_SUSPEND_REQUEST_15 */

		/* Suspend request state */

			/*
			   This state exists  after the user has requested the network
			   to suspend the call and is waiting for a response.
			*/

void ntt_u15 ()
{
	switch (event_id) {

		case DA_SUSP_ACK :
			Send_to_call_control (NS_SUSPEND_CO);
			call_clear ();
			break;

		case DA_SUSP_REJ : 			/* cause #84 should be received */
			Stop_timer_ns (NTT_T319);
			Send_to_call_control (NS_SUSPEND_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_NOTIFY :
			Send_to_call_control (NS_NOTIFY_IN);
			break;

/*$*/	case DA_FACILITY :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Set_ie_service (DA_FACILITY);
				Send_to_call_control (NS_SPF_FACILITY_CO);

			} else {

				ns_unexpected_ev ();
			}

			break;

/*$*/	case NS_SPF_FACILITY_RQ :

			switch (I_service_id) {

				case DA_FACILITY :

					if (Call_fac_rq == ON) {
						ns_unexpected_ev ();

					} else {

						Call_fac_rq = ON;
						Send_to_d_channel (NTT_FAC);
					}

					break;

				default :
					break;
			}

			break;

		case TI_319 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "319");
			Send_to_call_control (NS_SUSPEND_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RESUME_REQUEST_17 */

		/* Resume request state */

			/*
			   This state exists  after the user has requested the network
			   to resume a previously suspend call and is waiting for a
			   response.
			*/

void ntt_u17 ()
{
	switch (event_id) {

		case DA_RES_ACK :
			Stop_timer_ns (NTT_T318);
			Send_to_call_control (NS_RESUME_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_RES_REJ :
			Send_to_call_control (NS_RESUME_CO);
			call_clear ();
			break;

		case TI_318 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "318");
			Send_to_call_control (NS_RESUME_CO);
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (NTT_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST_19 */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void ntt_u19 ()
{
	switch (event_id) {

/*$*/	case DA_FACILITY :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Set_ie_service (DA_FACILITY);
				Send_to_call_control (NS_SPF_FACILITY_CO);

			} else {

				ns_unexpected_ev ();
			}

			break;

/*$*/	case NS_SPF_FACILITY_RQ :

			switch (I_service_id) {

				case DA_FACILITY :

					if (Call_fac_rq == ON) {
						ns_unexpected_ev ();

					} else {

						Call_fac_rq = ON;
						Send_to_d_channel (NTT_FAC);
					}

					break;

				default :
					break;
			}

			break;

		case NS_CLEAR_RS :
			break;

		case TI_308 :

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (NTT_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, (char FAR *) &(Call_state));
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2


						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*        N          */
						/*-------------------*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             n0 to n254 - network side - implements the processing of an
							  event according to the call state.

Usage            void uxx (void);

Related
functions usage void Stop_timer_ns (NTT_uchar x_timer);

				void Start_timer_ns (NTT_uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void ntt_n0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Call_ref = i_call_ref;
			Call_ces = Dl_ces;
			Call_ces_setup =Dl_ces;
			Call_sub_state = N6;
			Dl_call_count++;
			ns_action_to_cc (NTT_T300, T3_NIL, NS_CONN_IN,
											   STATE_CALL_INIT_1);
			break;

		case NS_CONN_RQ :
			N303 = 0;
			Start_timer_ns (NTT_T303);
			Send_to_d_channel_and_save_spdu (SETUP);
			Call_ces_setup = Dl_ces;
			Set_state (STATE_CALL_PRESENT_6);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of  user
			   action requesting call establishment from the network.
			*/

void ntt_n1 ()
{
	switch (event_id) {

		case NS_CALL_PROC_RQ :
			ns_action_to_dl (NTT_T300, T3_NIL, CALL_PROC,
											   STATE_OUTGOING_CALL_PROC_3);
			break;

		case NS_CONN_RS :
			ns_action_to_dl (NTT_T300, T3_NIL, CONN,
											   STATE_ACTIVE_10);
			break;

		case NS_ALERT_RQ:
			ns_action_to_dl (NTT_T300, T3_NIL, ALERT,
											   STATE_CALL_DELIVERED_4);
			break;

		case TI_300 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_PROTOCOL_ERROR_UNSPECIFIED_111, P_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			go_to_state_19 (NTT_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}


/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void ntt_n3 ()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void ntt_n4 ()
{
	switch (event_id) {

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void ntt_n6 ()
{

	switch (event_id) {

		case DA_CALL_PROC :
			Release_saved_spdu ();
			ns_action_to_cc (NTT_T303, NTT_T310, NS_CALL_PROC_IN,
												 STATE_INCOMING_CALL_PROC_9);
			break;

		case DA_ALERT :
			Release_saved_spdu ();
			ns_action_to_cc (NTT_T303, NTT_T301, NS_ALERT_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_CONN :
			Release_saved_spdu ();
			ns_action_to_cc (NTT_T303, NTT_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case TI_303 :

			if (++N303 != MX_N303) {
				Send_saved_spdu_to_d_channel (SETUP);
				Start_timer_ns (NTT_T303);

			} else {

				set_i_cause (C_C_NORMAL_EVENT, C_V_NO_USER_RESPONDING_18, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);

				ns_action_to_dl (T3_NIL, NTT_T305, DISC,
												   STATE_DISCONNECT_INDICATION_12);
			}

			break;

		default :
			ns_unexpected_ev ();
			break;


	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void ntt_n7 ()
{

	switch (event_id) {

		case DA_CONN :
			ns_action_to_cc (NTT_T301, NTT_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_301 :
			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void ntt_n8 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			ns_action_to_dl (NTT_T300, T3_NIL, CONN_ACK,
											   STATE_ACTIVE_10);
			break;

		case TI_300 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_PROTOCOL_ERROR_UNSPECIFIED_111, P_NIL);
			Save_cause ();									/* to send the RELEASE if T305 expire */
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, NTT_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROCEEDING */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void ntt_n9 ()
{

	switch (event_id) {

		case DA_ALERT :
			ns_action_to_cc (NTT_T310, NTT_T301, NS_ALERT_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_CONN :
			ns_action_to_cc (NTT_T310, NTT_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case DA_PROGRESS :
			Stop_timer_ns (NTT_T310);
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_310 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "310");
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, NTT_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void ntt_n10 ()
{

	switch (event_id) {

		case DA_CONN_ACK :
			/* no process */
			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void ntt_n11 ()
{

	switch (event_id) {

		case NS_CLEAR_RS :
			Stop_timer_ns (NTT_T300);
			go_to_state_19 (NTT_T308);
			break;

		case TI_300 :

			if (disc_cause_error () == NOK) {
				set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
			}

			go_to_state_19 (NTT_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void ntt_n12 ()
{
	switch (event_id) {

		case TI_305 :
			go_to_state_19 (NTT_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE SUSPEND_REQUEST */

		/* Suspend request state */

			/*
			   This state exists  after the user has requested the network
			   to suspend the call and is waiting for a response.
			*/

void ntt_n15 ()
{
	switch (event_id) {

		case NS_SUSPEND_RQ :
			Stop_timer_ns (NTT_T300);

			if (is_ie_i (CODESET_0, CAUSE) == PRESENT) {
				Send_to_d_channel (SUSP_REJ);
				Set_state (STATE_ACTIVE_10);

			} else {

				Send_to_d_channel (SUSP_ACK);
				call_clear ();
			}

			break;

		case NS_NOTIFY_RQ :
			Send_to_d_channel (NOTIFY);
			break;

		case TI_300 :
			set_i_cause (C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_TEMPORARY_FAILURE_41, P_NIL);
			Send_to_d_channel (SUSP_REJ);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RESUME_REQUEST_17 */

		/* Resume request state */

			/*
			   This state exists  after the user has requested the network
			   to resume a previously suspend call and is waiting for a
			   response.
			*/

void ntt_n17 ()
{
	switch (event_id) {

		case NS_RESUME_RQ :
			Stop_timer_ns (NTT_T300);

			if (is_ie_i (CODESET_0, CAUSE) == PRESENT) {
				Send_to_d_channel (RES_REJ);
				call_clear ();

			} else {

				Send_to_d_channel (RES_ACK);
				Set_state (STATE_ACTIVE_10);
			}

			break;

		case TI_300 :
			set_i_cause (C_C_RESOURCE_UNAVAILABLE, C_V_NETWORK_TEMPORARY_FAILURE_41, P_NIL);
			Send_to_d_channel (SUSP_REJ);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void ntt_n19 ()
{
	switch (event_id) {

		case TI_308 :
			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (NTT_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		case NS_CLEAR_RS :

			break;		/* ignore */

		default :
			ns_unexpected_ev ();
			break;
	}
}

#endif


/*EOF*/
