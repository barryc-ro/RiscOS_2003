
/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - net_ie.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/
/*

Table structures :
----------------

		tabl_item   TABL_ITEM									uchar
		==========================                             ============
		| tabl_id | size | p_val |---------------------------->|   val    |
		--------------------------  tabl_yy      ============  ------------
		|         |      |       |-------------->|   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |          |  |          |
		--------------------------
		|         |      |       |
		--------------------------
		|         |      |       |


	tabx_item   TABX_ITEM                   tabx_list                uchar
	=================================     =================        =========
	| tabl_id | size | list pointer |---->| tabl_id | size|------->| x_val |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------
	|         |      |              |

*/
/*-------------------------------------------------------------------------*/

static  uchar	*p_fac_comp_lgth;
static  uchar	*p_fac_seq_lgth;

/*-------------------------------------------------------------------------*/

	/*
		Initialization constants of ie internal structure
		used by SPDU received processing.
	*/

		/* Advice of Charge (ADVICE_CHARGE) */

CONST   struct  i_advice_charge	 df_spdu_ntt_i_advice_charge = {
	TOTAL_CHARGE,
	0,
	A_NIL
};

		/*  Bearer capability (BC) */

CONST   struct  i_bc	df_spdu_ntt_i_bc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL
};

		/*  Called party number and subaddress (CALLED_NB, CALLED_SUB_ADD) */

CONST   struct  i_called_nb	 df_spdu_ntt_i_called_nb = {
	NB_UNKNOWN,
	PLAN_UNKNOWN,
	BYTE_VAL_NIL,
	A_NIL
};

CONST   struct  i_called_sub_add	df_spdu_ntt_i_called_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	BYTE_VAL_NIL,
	FORMAT_IA5,
	A_NIL
};

		/* Calling party number (CALLING_NB) */

CONST   struct  i_calling_nb	df_spdu_ntt_i_calling_nb = {
	NB_UNKNOWN,
	PLAN_UNKNOWN,
	PRES_ALLOWED,
	USER_PROVIDED,
	0,
	A_NIL
};

		/* calling party subaddress (CALLING_SUB_ADD) */

CONST   struct  i_calling_sub_add   df_spdu_ntt_i_calling_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Call identity (CALL_ID) */

CONST   struct  i_call_id   df_spdu_ntt_i_call_id = {
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Call state (CALL_STATE) */

CONST   struct  i_call_state	df_spdu_ntt_i_call_state = {
	CODING_STD_CCITT,
	STATE_NULL_0
};

		/* Cause (CAUSE) */

CONST   struct  i_cause	 df_spdu_ntt_i_cause = {
	CODING_STD_CCITT,
	LOCATION_USER,
	RECOMMENDATION_Q931,
	C_C_NORMAL_EVENT,
	C_V_NORMAL_CLEARING_16,
	0,
	0,
	A_NIL
};

		/* Channel identification (CHAN_ID) */

CONST   struct  i_chan_id   df_spdu_ntt_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_BRI,
	CHAN_PREF,
	D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_CCITT,
	CHAN_NUMBER,
	B_CHAN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Congestion level (CONGEST_LEVEL) */

CONST   struct  i_congest_level	 df_spdu_ntt_i_congest_level = {
	RECEIVER_READY
};

		/* Date/time (DATE_TIME) */

CONST   struct  i_date_time	 df_spdu_ntt_i_date_time = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Display (DISPLAY) */

CONST   struct  i_display   df_spdu_ntt_i_display = {
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* facilities (FACILITY) */

CONST   struct  i_facility   df_spdu_ntt_i_facility = {
	FAC_SUPPLEMENTARY,
	FAC_LGTH_FORMAT,

	{	FAC_CONTEXT_SPECIFIC,
		FAC_CONSTRUCTOR,
		FAC_INVOKE,
		14
	},

	{	FAC_UNIVERSAL,
		FAC_PRIMITIVE,
		FAC_INVOKE_ID_TAG,
		1,
		A_NIL
	},

	{	FAC_UNIVERSAL,
		FAC_PRIMITIVE,
		FAC_OP_VAL_TAG,
		FAC_OP_VAL_LGTH,
		OP_VAL_UUI
	},

	{	FAC_UNIVERSAL,
		FAC_CONSTRUCTOR,
		FAC_SEQUENCE_TAG,
		6
	},

	{	FAC_CONTEXT_SPECIFIC,
		FAC_PRIMITIVE,
		FAC_SERVICE_TAG,
		FAC_SERVICE_LGTH,
		SERVICE_1
	},

	{	FAC_CONTEXT_SPECIFIC,
		FAC_PRIMITIVE,
		FAC_PREF_TAG,
		FAC_PREF_LGTH,
		PREFERRED_TRUE
	}

};

		/* Feature activation (FEATURE_ACT) */

CONST	struct	i_feature_act	df_spdu_ntt_i_feature_act = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Feature indication (FEATURE_IND) */

CONST	struct	i_feature_ind	df_spdu_ntt_i_feature_ind = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	STAT_DEACTIVATED
};

		/* High layer compatibility (HLC) */

CONST   struct  i_hlc   df_spdu_ntt_i_hlc = {
	CODING_STD_CCITT,
	INTER_CCITT_CEPT,
	PRESENTATION_PROFIL,
	TELEPHONY,
	BYTE_VAL_NIL
};

		/* Keypad facility (KEYPAD) */

CONST   struct  i_keypad	df_spdu_ntt_i_keypad = {
	0,
	A_NIL
};

		/* Low layer compatibility (LLC) */

CONST   struct  i_llc   df_spdu_ntt_i_llc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	OUT_BAND_NOT_POSSIBLE,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Notification indicator (NOTIF_IND) */

CONST   struct  i_notif_ind	 df_spdu_ntt_i_notif_ind = {
	USER_SUSPENDED,
	0,
	P_NIL

};

		/* Progress indicator (PROGRESS_IND) */

CONST   struct  i_progress_ind  df_spdu_ntt_i_progress_ind = {
	CODING_STD_CCITT,
	PROGRESS_LOC_PU_LOCAL_USER,
	PROGRESS_DESCR_NON_END_TO_END_ISDN
};

		/* Restart indicator (RESTART_IND) */

CONST   struct  i_restart_ind   df_spdu_ntt_i_restart_ind = {
	RI_ALL_INTERFACES
};

		/*  Signal (SIGNAL) */

CONST   struct  i_signal	df_spdu_ntt_i_signal = {
	DIAL_ON
};

		/* Network specific facilities (SPF_FAC) */

#if NS_SPF_FACILITY == ON

CONST   struct  i_spf_fac   df_spdu_ntt_i_spf_fac = {
	1,
	USER_SPECIFIED_TYPE,
	UNKNOWN_PLAN,
};

#endif

		/* Repeat indicator (REPEAT_IND) */

CONST   struct  i_repeat_ind	 df_spdu_ntt_i_repeat_ind = {
	REP_IN_PRIORITIZED_LIST
};

		/* Switchhook			(SWITCHHOOK) */

CONST	struct	i_switchhook	df_spdu_ntt_i_switchhook = {
	HOOK_ON,
};

		/* Transit network selection (TRANSIT_NET_SEL) */

CONST   struct  i_transit_net_sel   df_spdu_ntt_i_transit_net_sel = {
	USER_SPECIFIED_TYPE,
	UNKNOWN_PLAN,
	0,
	A_NIL
};

		/* User to user information (UUI) */

CONST   struct  i_uui   df_spdu_ntt_i_uui = {
	PROTOCOL_DISCR_IA5,
	0,
	A_NIL
};

/*=========================================================================*/

	/*
		Initialization constants of the ie internal structure
		used by SSDU received processing.
	*/

		/* Advice of Charge (ADVICE_CHARGE) */

CONST   struct  i_advice_charge	 df_ssdu_ntt_i_advice_charge = {
	TOTAL_CHARGE,
	0,
	A_NIL
};

		/*  Bearer capability (BC) */

CONST   struct  i_bc	df_ssdu_ntt_i_bc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,				/* optional octet */
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,				/* optional octet */
	LAYER_ID_3,
	BYTE_VAL_NIL				/* optional octet */
};

		/*  Called party number and subaddress (CALLED_NB CALLED_SUB_ADD) */

CONST   struct  i_called_nb	 df_ssdu_ntt_i_called_nb = {
	NB_UNKNOWN,
	PLAN_UNKNOWN,
	BYTE_VAL_NIL,
	A_NIL
};

CONST   struct  i_called_sub_add	df_ssdu_ntt_i_called_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Calling party number (CALLING_NB) */

CONST   struct  i_calling_nb	df_ssdu_ntt_i_calling_nb = {
	NB_UNKNOWN,
	PLAN_UNKNOWN,
	PRES_ALLOWED,
	USER_PROVIDED,
	0,
	A_NIL
};

		/* calling party subaddress (CALLING_SUB_ADD) */

CONST   struct  i_calling_sub_add   df_ssdu_ntt_i_calling_sub_add = {
	SUB_ADD_OSI,
	SUB_ADD_EVEN,
	FORMAT_IA5,
	0,
	A_NIL
};

		/* Call identity (CALL_ID) */

CONST   struct  i_call_id   df_ssdu_ntt_i_call_id = {
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Call state (CALL_STATE) */

CONST   struct  i_call_state	df_ssdu_ntt_i_call_state = {
	CODING_STD_CCITT,
	STATE_NULL_0
};

		/* Cause (CAUSE) */

CONST   struct  i_cause	 df_ssdu_ntt_i_cause = {
	CODING_STD_CCITT,
	LOCATION_PU_NET_LOC_USER,
	RECOMMENDATION_Q931,
	C_C_NORMAL_EVENT,
	C_V_NORMAL_CLEARING_16,
	0,
	0,
	A_NIL
};

		/* Channel identification (CHAN_ID) */

CONST   struct  i_chan_id   df_ssdu_ntt_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_BRI,
	CHAN_PREF,
	D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_CCITT,
	CHAN_NUMBER,
	B_CHAN,
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* Congestion level (CONGEST_LEVEL) */

CONST   struct  i_congest_level	 df_ssdu_ntt_i_congest_level = {
	RECEIVER_READY
};

		/* Date/time (DATE_TIME) */

CONST   struct  i_date_time	 df_ssdu_ntt_i_date_time = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Display (DISPLAY) */

CONST   struct  i_display   df_ssdu_ntt_i_display = {
	BYTE_VAL_NIL,
	0,
	A_NIL
};

		/* facilities (FACILITY) */

CONST   struct  i_facility   df_ssdu_ntt_i_facility = {
	FAC_SUPPLEMENTARY,
	FAC_LGTH_FORMAT,

	{	FAC_CONTEXT_SPECIFIC,
		FAC_CONSTRUCTOR,
		FAC_INVOKE,
		14
	},

	{	FAC_UNIVERSAL,
		FAC_PRIMITIVE,
		FAC_INVOKE_ID_TAG,
		1,
		A_NIL
	},

	{	FAC_UNIVERSAL,
		FAC_PRIMITIVE,
		FAC_OP_VAL_TAG,
		FAC_OP_VAL_LGTH,
		OP_VAL_UUI
	},

	{	FAC_UNIVERSAL,
		FAC_CONSTRUCTOR,
		FAC_SEQUENCE_TAG,
		6
	},

	{	FAC_CONTEXT_SPECIFIC,
		FAC_PRIMITIVE,
		FAC_SERVICE_TAG,
		FAC_SERVICE_LGTH,
		SERVICE_1
	},

	{	FAC_CONTEXT_SPECIFIC,
		FAC_PRIMITIVE,
		FAC_PREF_TAG,
		FAC_PREF_LGTH,
		PREFERRED_TRUE
	},

};

		/* Feature activation (FEATURE_ACT) */

CONST	struct	i_feature_act	df_ssdu_ntt_i_feature_act = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Feature indication (FEATURE_IND) */

CONST	struct	i_feature_ind	df_ssdu_ntt_i_feature_ind = {
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	STAT_DEACTIVATED
};

		/* High layer compatibility (HLC) */

CONST   struct  i_hlc   df_ssdu_ntt_i_hlc = {
	CODING_STD_CCITT,
	INTER_CCITT_CEPT,
	PRESENTATION_PROFIL,
	TELEPHONY,
	BYTE_VAL_NIL
};

		/* Keypad facility (KEYPAD) */

CONST   struct  i_keypad	df_ssdu_ntt_i_keypad = {
	0,
	A_NIL
};

		/* Low layer compatibility (LLC) */

CONST   struct  i_llc   df_ssdu_ntt_i_llc = {
	CODING_STD_CCITT,
	TRF_CAP_UNRESTRICTED,
	OUT_BAND_NOT_POSSIBLE,
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	STRUCTURE_DEFAULT,
	CONFIG_POINT_TO_POINT,
	EST_DEMAND,
	BIDIRECTIONAL_SYMMETRY,
	TRF_RATE_64KBS,
	LAYER_ID_1,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_2,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	LAYER_ID_3,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL
};

		/* Notification indicator (NOTIF_IND) */

CONST   struct  i_notif_ind	 df_ssdu_ntt_i_notif_ind = {
	USER_SUSPENDED,
	0,
	P_NIL

};

		/* Progress indicator (PROGRESS_IND) */

CONST   struct  i_progress_ind  df_ssdu_ntt_i_progress_ind = {
	CODING_STD_CCITT,
	PROGRESS_LOC_USER,
	PROGRESS_DESCR_NON_END_TO_END_ISDN
};

		/* Restart indicator (RESTART_IND) */

CONST   struct  i_restart_ind   df_ssdu_ntt_i_restart_ind = {
	RI_ALL_INTERFACES
};

		/*  Signal (SIGNAL) */

CONST   struct  i_signal	df_ssdu_ntt_i_signal = {
	DIAL_ON
};

		/* Network specific facilities (SPF_FAC) */

#if NS_SPF_FACILITY == ON

CONST   struct  i_spf_fac   df_ssdu_ntt_i_spf_fac = {
	1,
	USER_SPECIFIED_TYPE,
	UNKNOWN_PLAN,
};

#endif

		/* Repeat indicator (REPEAT_IND) */

CONST   struct  i_repeat_ind	 df_ssdu_ntt_i_repeat_ind = {
	REP_IN_PRIORITIZED_LIST
};


		/* Switchhook			(SWITCHHOOK) */

CONST	struct	i_switchhook	df_ssdu_ntt_i_switchhook = {
	HOOK_ON,
};

		/* Transit network selection (TRANSIT_NET_SEL) */

CONST   struct  i_transit_net_sel   df_ssdu_ntt_i_transit_net_sel = {
	USER_SPECIFIED_TYPE,
	UNKNOWN_PLAN,
	0,
	A_NIL
};

		/* User to user information (UUI) */

CONST   struct  i_uui   df_ssdu_ntt_i_uui = {
	PROTOCOL_DISCR_IA5,
	0,
	A_NIL
};

/*=========================================================================*/

				/*-------------------------------*/
				/* TABLES : list of valid values */
				/*-------------------------------*/

					/* Assignor/Assignee (ie LLC) */

CONST	uchar NTT_ASSIGN_S[] = {
	DEFAULT_ASSIGNEE,
	ASSIGNOR_ONLY,
	};

					/* In-band/Out_band negotiation (ie LLC) */

CONST	uchar NTT_BAND_S[] = {
	TSC,
	LL0,
	};

					/* Cause class (ie CAUSE) */

CONST	uchar NTT_C_C_S[]={
	C_C_NORMAL_EVENT_0,
	C_C_NORMAL_EVENT,
	C_C_RESOURCE_UNAVAILABLE,
	C_C_SERVICE_NOT_AVAILABLE,
	C_C_SERVICE_NOT_IMPLEMENTED,
	C_C_INVALID_MESSAGE,
	C_C_PROTOCOL_ERROR,
	C_C_INTERWORKING,
	};

					/* Automata call state values (ie CALL_STATE) */

CONST	uchar NTT_CALL_STATE_VAL_S[] = {
	STATE_NULL_0,
	STATE_CALL_INIT_1,
	STATE_OUTGOING_CALL_PROC_3,
	STATE_CALL_DELIVERED_4,
	STATE_CALL_PRESENT_6,
	STATE_CALL_RECEIVED_7,
	STATE_CONNECT_REQUEST_8,
	STATE_INCOMING_CALL_PROC_9,
	STATE_ACTIVE_10,
	STATE_DISCONNECT_REQUEST_11,
	STATE_DISCONNECT_INDICATION_12,
	STATE_SUSPEND_REQUEST_15,
	STATE_RESUME_REQUEST_17,
	STATE_RELEASE_REQUEST_19,
#   if EQUIPMENT == NT2
	STATE_CALL_ABORT_22,
#   endif
	STATE_REST_1,
	STATE_REST_2,
	};

					/* Calling presentation indicator (ie CALLING_NB) */

CONST	uchar NTT_CALLING_NB_PRES_S[] = {
	PRES_ALLOWED,
	PRES_RESTRICTED,
	PRES_NOT_AVAILABLE,
	PRES_RESERVED,
	};

					/* Channel number (ie CAUSE) */

CONST	uchar NTT_CHAN_NUMBER_S[] = {
	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
	17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,
	};

					/* Channel type (ie CHAN_ID) */

CONST	uchar NTT_CHAN_TYPE_S[] = {
	B_CHAN,
	H0_CHAN,
	H11_CHAN,
	H12_CHAN,
	};

					/* Preferred/exclusive (ie CHAN_ID) */

CONST	uchar NTT_CHAN_PREF_EXCL_S[] = {
	CHAN_PREF,
	CHAN_EXCL,
	};

					/* Coding standard (ie CALL_STATE, CAUSE, CHAN_ID, LLC, PROGRESS_IND) */

CONST	uchar NTT_CODING_STD_S[] = {
	CODING_STD_CCITT,
	CODING_STD_SPF,
	};

					/* Congestion level (ie CONGEST_LEVEL) */

CONST	uchar NTT_CONGEST_LEVEL_S[] = {
	RECEIVER_READY,
	RECEIVER_NOT_READY,
	};

					/* D-channel indicator (ie CHAN_ID) */

CONST	uchar NTT_D_CHAN_S[] = {
	D_CHAN,
	NOT_D_CHAN,
	};

					/* Channel interface ID (ie CHAN_ID) */

CONST	uchar NTT_CHAN_INT_S[] = {
	INT_ID_IMPLICIT,
	INT_ID_EXPLICIT,
	};

					/* Nb Map (ie CHAN_ID) */

CONST	uchar NTT_NB_MAP_S[] = {
	CHAN_NUMBER,
	CHAN_MAP,
	};

					/* Data bit format (ie BC & LLC) */

CONST	uchar NTT_DATA_BIT_S[] = {
	DATA_BIT_UNUSED,
	DATA_BIT_5,
	DATA_BIT_7,
	DATA_BIT_8,
	};

					/* Duplex/half-duplex (ie BC & LLC) */

CONST	uchar NTT_DUPLEX_S[] = {
	HALF_DUPLEX,
	FULL_DUPLEX,
	};

					/* Facility : component tag (ie FACILITY) */

CONST	uchar NTT_FAC_COMP_TAG_S[] = {
	FAC_INVOKE,
	FAC_RETURN_RESULT,
	FAC_RETURN_ERROR,
	FAC_REJECT,
	};

					/* Facility : Error value (ie FACILITY) */

CONST	uchar NTT_FAC_ERROR_VAL_S[] = {
	USER_NOT_SUSCRIBED,
	REJECTED_BY_CALLED_USER,
	};

					/* Facility : preferred (ie FACILITY) */

CONST	uchar NTT_FAC_PREFERRED_S[] = {
	PREFERRED_FALSE,
	PREFERRED_TRUE,
	};

					/* Facility : service (ie FACILITY) */

CONST	uchar NTT_FAC_SERVICE_S[] = {
	SERVICE_1,
	SERVICE_2,
	SERVICE_3,
	};

					/* Hook value */

CONST	uchar NTT_HOOK_VAL_S[] = {
	HOOK_ON,
	HOOK_OFF,
	};

					/* Flow control on Reception (Rx) (ie BC & LLC) */

CONST	uchar NTT_FLOW_CONTROL_RX_S[] = {
	FLOW_CAN_ACCEPT_DATA,
	FLOW_CANNOT_ACCEPT_DATA,
	};

					/* Flow control on Transmission (Tx) (ie BC & LLC) */

CONST	uchar NTT_FLOW_CONTROL_TX_S[] = {
	FLOW_NOT_RQ_TX_DATA,
	FLOW_RQ_TX_DATA,
	};

					/* Rate adaption header/no header (ie LLC) */

CONST	uchar NTT_HEADER_S[] = {
	HEADER_NOT_INCLUDED,
	HEADER_INCLUDED,
	};

					/* Interface type (ie CHAN_ID) */

CONST	uchar NTT_INT_TYPE_S[] = {
	INT_TYPE_BRI,
	INT_TYPE_PRI,
	};

					/* Intermediate rate (V110) (ie BC & LLC) */

CONST	uchar NTT_INTER_RATE_S[] = {
	INTER_RA_UNUSED,
	INTER_RA_8KBS,
	INTER_RA_16KBS,
	INTER_RA_32KBS,
	};

					/* Layer identifier (ie CAUSE, for BC diagnostic) */

CONST	uchar NTT_LAYER_ID_S[] = {
	LAYER_ID_1,
	LAYER_ID_2,
	LAYER_ID_3,
	};

					/* Logical Link Identifier negotiation (ie LLC) */

CONST	uchar NTT_LLI_S[] = {
	DEFAULT_LLI,
	FULL_PROTOCOL_LLI,
	};

					/* Cause location (ie CAUSE) */

CONST	uchar NTT_LOCATION_S[] = {
	LOCATION_USER,
	LOCATION_PR_NET_LOC_USER,
	LOCATION_PU_NET_LOC_USER,
	LOCATION_TRANSIT_NET,
	LOCATION_PU_NET_REMOTE_USER,
	LOCATION_PR_NET_REMOTE_USER,
	LOCATION_INTERNATIONAL_NET,
	LOCATION_NET_NTWK_POINT,
	};

					/* Modem type (ie BC & LLC) */

CONST	uchar NTT_MODEM_S[] = {
	MODEM_RESERVED,
	MODEM_V21,
	MODEM_V22,
	MODEM_V22_BIS,
	MODEM_V23,
	MODEM_V26,
	MODEM_V26_BIS,
	MODEM_V26_TER,
	MODEM_V27,
	MODEM_V27_BIS,
	MODEM_V27_TER,
	MODEM_V29,
	MODEM_V32,
	MODEM_V35,
	};

					/* Multi frame establishment support in Data Link (ie LLC) */

CONST	uchar NTT_MULTI_FRAME_S[] = {
	MULTI_FRAME_NOT_SUPPORTED,
	MULTI_FRAME_SUPPORTED,
	};

					/* In-band negotiation (V110 or V120) (ie BC & LLC) */

CONST	uchar NTT_NEGOTIATION_S[] = {
	NEGOTIATION_IN_BAND,
	NEGOTIATION_NOT_IN_BAND,
	};

						/* network identification plan (ie TRANSIT_NET_SEL & SPF_FAC) */

CONST	uchar NTT_NET_ID_PLAN_S[] = {
	UNKNOWN_PLAN,
	CARRIER_ID_CODE,
	DATA_NETWORK_ID_CODE,
	};

						/* type of network identification (ie TRANSIT_NET_SEL & SPF_FAC) */

CONST	uchar NTT_NET_ID_TYPE_S[] = {
	USER_SPECIFIED_TYPE,
	NATIONAL_NETWORK_ID_TYPE,
	INTERNATIONAL_NETWORK_ID_TYPE,
	};

					/* Network independent clock (NIC) (ie BC & LLC) */

CONST	uchar NTT_NIC_RX_S[] = {
	NIC_ACCEPT_DATA,
	NIC_NOT_ACCEPT_DATA,
	};

					/* Network independent clock (NIC) (ie BC & LLC) */

CONST	uchar NTT_NIC_TX_S[] = {
	NIC_RQ_TX_DATA,
	NIC_NOT_RQ_TX_DATA,
	};

					/* Notification indicator description (ie NOTIF_IND) */

CONST	uchar NTT_NOTIF_IND_DESCR_S[] = {
	USER_SUSPENDED,
	USER_RESUMED,
	};

					/* Mode of operation (ie LLC) */

CONST	uchar NTT_OP_MODE_S[] = {
	BIT_TRANSPARENT,
	PROTOCOL_SENSITIVE,
	};

					/* Out-band negotiation indicator (ie LLC) */

CONST	uchar NTT_OUT_BAND_NEG_S[] =	{
	OUT_BAND_POSSIBLE,
	OUT_BAND_NOT_POSSIBLE,
	};

					/* Parity format (ie BC & LLC) */

CONST	uchar NTT_PARITY_S[] = {
	ODD,
	EVEN,
	NO_PARITY,
	FORCED_TO_0,
	FORCED_TO_1,
	};

					/* Progress description (ie PROGRESS_IND) */

CONST	uchar NTT_PROGRESS_DESCRIPTION_S[] = {
	PROGRESS_DESCR_NON_END_TO_END_ISDN,
	PROGRESS_DESCR_NON_ISDN_DEST,
	PROGRESS_DESCR_NON_ISDN_ORIG,
	PROGRESS_DESCR_CALL_RETURNED_ISDN,
	PROGRESS_DESCR_IN_BAND_NOW,
	};

					/* Progress location (ie PROGRESS_IND) */

CONST	uchar NTT_PROGRESS_LOCATION_S[] = {
	PROGRESS_LOC_USER,
	PROGRESS_LOC_PR_LOCAL_USER,
	PROGRESS_LOC_PU_LOCAL_USER,
	PROGRESS_LOC_PU_REMOTE_USER,
	PROGRESS_LOC_PR_REMOTE_USER,
	PROGRESS_LOC_INTERNATIONAL,
	PROGRESS_BEYONG_IWP,
	};

					/* Layer 1 protocol identifier (ie LLC) */

CONST	uchar NTT_PROTOCOL_ID_LLC_1_S[] = {
	PROTOCOL_ID_1_V110,
	PROTOCOL_ID_1_G711_u,
	PROTOCOL_ID_1_X31,
	};

					/* Layer 2 protocol identifier (ie LLC) */

CONST	uchar NTT_PROTOCOL_ID_LLC_2_S[] = {
	PROTOCOL_ID_2_ISO_1745,
	PROTOCOL_ID_2_Q921,
	PROTOCOL_ID_2_X25_LL,
	PROTOCOL_ID_2_X25_ML,
	PROTOCOL_ID_2_T71,
	PROTOCOL_ID_2_HDLC_ARM,
	PROTOCOL_ID_2_HDLC_NRM,
	PROTOCOL_ID_2_HDLC_ABM,
	PROTOCOL_ID_2_LAN_LLC,
	PROTOCOL_ID_2_X75_SLP,
	};

					/* Layer 3 protocol identifier (ie LLC)*/

CONST	uchar NTT_PROTOCOL_ID_LLC_3_S[] = {
	PROTOCOL_ID_3_Q931,
	PROTOCOL_ID_3_X25_PL,
	PROTOCOL_ID_3_ISO_8208,
	PROTOCOL_ID_3_ISO_8348,
	PROTOCOL_ID_3_ISO_8473,
	PROTOCOL_ID_3_T70,
	};

					/* Cause recommandation (ie CAUSE) */

CONST	uchar NTT_RECOMMENDATION_S[] = {
	RECOMMENDATION_Q931,
	RECOMMENDATION_X21,
	RECOMMENDATION_X25,
	};

					/* Restart indicator class (ie RESTART_IND) */

CONST	uchar NTT_RESTART_IND_CLASS_S[] = {
	RI_INDICATED_CHANNEL,
	RI_SINGLE_INTERFACE,
	RI_ALL_INTERFACES,
	};

					/* Screening indicator (ie CALLING_NB) */

CONST	uchar NTT_SCREEN_IND_S[] = {
	USER_PROVIDED,
	USER_PASSED,
	NETWORK_PROVIDED,
	};

					/* message type (ie CAUSE) */

CONST	uchar NTT_MSG_TYPE_S[] = {
	ALERT,
	CALL_PROC,
	CONN,
	CONN_ACK,
	PROGRESS,
	SETUP,
	RES,
	RES_ACK,
	RES_REJ,
	SUSP,
	SUSP_ACK,
	SUSP_REJ,
	USER_INFO,
	DISC,
	REL,
	REL_COMP,
	RESTART,
	RESTART_ACK,
	CON_CON,
	INFO,
	NTT_FAC,
	NOTIFY,
	STATUS,
	STATUS_ENQ,
	};

					/* Signal values (ie SIGNAL) */

CONST	uchar NTT_SIGNAL_VAL_S[] = {
	DIAL_ON,
	CALL_WAITING_ON,
	TONES_OFF,
	ALERTING_OFF,
	};

					/* Status/condition (ie CAUSE) */

CONST	uchar NTT_STATUS_CONDITION_S[] = {
	COND_UNKNOWN,
	COND_PERMANENT,
	COND_TRANSIENT,
	};

					/* Status indicator (ie FEATURE_IND) */

CONST	uchar NTT_STATUS_IND_S[] = {
	STAT_DEACTIVATED,
	STAT_ACTIVATED,
	STAT_PROMPT,
	STAT_PENDING,
	};

					/* Stop bit format (ie BC & LLC) */

CONST	uchar NTT_STOP_BIT_S[] = {
	STOP_BIT_UNUSED,
	STOP_BIT_1,
	STOP_BIT_1_5,
	STOP_BIT_2,
	};

					/* Information structure (ie BC & LLC) */

CONST	uchar NTT_STRUCTURE_S[] = {
	STRUCTURE_DEFAULT,
	STRUCTURE_8KHZ_INT,
	STRUCTURE_SDU_INT,
	STRUCTURE_UNSTRUCTURED,
	};

					/* Subaddress odd/even indicator (ie CALLED & CALLING _SUB_ADD) */

CONST	uchar NTT_SUB_ADD_IND_S[] = {
	SUB_ADD_ODD,
	SUB_ADD_EVEN,
	};

					/* Subaddress type (ie CALLED & CALLING _SUB_ADD) */

CONST	uchar NTT_SUB_ADD_TYPE_S[] = {
	SUB_ADD_OSI,
	SUB_ADD_USER,
	};

					/* Asynchronous/synchronous (ie BC & LLC) */

CONST	uchar NTT_SYN_ASYN_S[] =	{
	SYN,
	ASYN,
	};

					/* Teleservices according to CCITT standard (ie HLC) */

CONST	uchar NTT_TELESERVICE_CCITT_S[] = {
	TELEPHONY,
	FAX_3,
	FAX_4,
	MIXED_MODE,
	PROCESSABLE_FORM,
	TELETEX,
	VIDEOTEX,
	TELEX,
	MHS,
	OSI,
	MAINTENANCE,		/* = HLC_NOT_AVAILABLE_1 */
	MANAGEMENT,			/* = HLC_NOT_AVAILABLE_2 */
	HLC_RESERVED,
	};

					/* Teleservices which may be extended (ie HLC) */

CONST	uchar NTT_TELESERVICE_EXT_S[] = {
	MAINTENANCE,
	MANAGEMENT,
	};

					/* Information transfer capability (ie BC) */

CONST	uchar NTT_TRF_CAP_BC_S []  ={
	TRF_CAP_SPEECH,
	TRF_CAP_UNRESTRICTED,
	TRF_CAP_3_1_AUDIO,
	TRF_CAP_7_AUDIO,
	TRF_CAP_VIDEO,
	};

					/* Information transfer capability (ie LLC) */

CONST	uchar NTT_TRF_CAP_LLC_S []  ={
	TRF_CAP_SPEECH,
	TRF_CAP_UNRESTRICTED,
	TRF_CAP_RESTRICTED,
	TRF_CAP_3_1_AUDIO,
	TRF_CAP_7_AUDIO,
	TRF_CAP_VIDEO,
	};

					/* Information transfer mode (ie BC & LLC) */

CONST	uchar NTT_TRF_MODE_S[] = {
	TRF_MODE_CIRCUIT,
	TRF_MODE_PACKET,
	};

					/* User rate (V110 & V120) (ie BC & LLC) */

CONST	uchar NTT_USER_RATE_S[] =   {
	RA_E_BITS,
	RA_0_6KBS,
	RA_1_2KBS,
	RA_2_4KBS,
	RA_3_6KBS,
	RA_4_8KBS,
	RA_7_2KBS,
	RA_8KBS,
	RA_9_6KBS,
	RA_14_4KBS,
	RA_16KBS,
	RA_19_2KBS,
	RA_32KBS,
	RA_48KBS,
	RA_56KBS,
	RA_64KBS,
	RA_0_1345KBS,
	RA_0_100KBS,
	RA_0_75_1_2KBS,
	RA_1_2_0_75KBS,
	RA_0_050KBS,
	RA_0_075KBS,
	RA_0_110KBS,
	RA_0_150KBS,
	RA_0_200KBS,
	RA_0_300KBS,
	RA_12KBS,
	};

					/* User to user information protocol discriminator (ie UUI) */

CONST	uchar NTT_UUI_PROTOCOL_DISCR_S[] = {
	PROTOCOL_DISCR_USER_SPF,
	PROTOCOL_DISCR_OSI,
	PROTOCOL_DISCR_X244,
	PROTOCOL_DISCR_SYSTEM_MANAGEMENT,
	PROTOCOL_DISCR_IA5,
	PROTOCOL_DISCR_V120,
	PROTOCOL_DISCR_Q931,
	};

/*=========================================================================*/

	/* Tables selected according to another value (indexed tables) */

		/* Cause value  according to the class */

			/* Normal event - class 000 */

CONST	uchar NTT_C_V_NORMAL_EVENT_0_S[] = {
			C_C_NORMAL_EVENT_0,
			C_V_UNASSIGNED_NUMBER_1,
			C_V_NO_ROUTE_TO_TRANSIT_NET_2,
			C_V_NO_ROUTE_TO_DEST_3,
			C_V_CHAN_UNACCEPTABLE_6,
			C_V_AWARDED_7,
			};

			/* Normal event - class 001 */

CONST	uchar NTT_C_V_NORMAL_EVENT_S[] = {
			C_C_NORMAL_EVENT,
			C_V_NORMAL_CLEARING_16,
			C_V_USER_BUSY_17,
			C_V_NO_USER_RESPONDING_18,
			C_V_NO_ANSWER_19,
			C_V_CALL_REJECT_21,
			C_V_NUMBER_CHANGED_22,
			C_V_NON_SELECTED_USER_CLEARING_26,
			C_V_DEST_OUT_OF_ORDER_27,
			C_V_INVALID_NUMBER_FORMAT_28,
			C_V_FACILITY_REJECT_29,
			C_V_RESPONSE_TO_STATUS_ENQUIRY_30,
			C_V_NORMAL_UNSPECIFIED_31,
			};

			/* Resource not available */

CONST	uchar NTT_C_V_RESOURCE_UNAVAILABLE_S[] ={
			C_C_RESOURCE_UNAVAILABLE,
			C_V_NO_CIRCUIT_AVAILABLE_34,
			C_V_NETWORK_OUT_OF_ORDER_38,
			C_V_NETWORK_TEMPORARY_FAILURE_41,
			C_V_NETWORK_CONGESTION_42,
			C_V_ACCESS_INFORMATION_DISCARDED_43,
			C_V_REQUESTED_CIRCUIT_NOT_AVAILABLE_44,
			C_V_RESOURCE_UNAVAILABLE_UNSPECIFIED_47,
			};

			/* Service not available */

CONST	uchar NTT_C_V_SERVICE_NOT_AVAILABLE_S[] = {
			C_C_SERVICE_NOT_AVAILABLE,
			C_V_QUALITY_OF_SERVICE_UNAVAILABLE_49,
			C_V_REQUESTED_FAC_NOT_SUBSCRIBED_50,
			C_V_BC_NOT_AUTHORIZED_57,
			C_V_BC_NOT_PRESENTLY_AVAILABLE_58,
			C_V_SERVICE_NOT_AVAILABLE_63,
			};

			/* Service not implemented */

CONST	uchar NTT_C_V_SERVICE_NOT_IMPLEMENTED_S[] = {
			C_C_SERVICE_NOT_IMPLEMENTED,
			C_V_BC_NOT_IMPLEMENTED_65,
			C_V_CHANNEL_TYPE_NOT_IMPLEMENTED_66,
			C_V_REQUESTED_FAC_NOT_IMPLEMENTED_69,
			C_V_ONLY_RESTRICTED_INFO_BEARER_70,
			C_V_SERVICE_NOT_IMPLEMENTED_UNSPECIFIED_79,
			};

			/* Invalid message */

CONST	uchar NTT_C_V_INVALID_MESSAGE_S[] = {
			C_C_INVALID_MESSAGE,
			C_V_INVALID_CALL_REF_81,
			C_V_IDENTIFIED_CHANNEL_NOT_EXIST_82,
			C_V_SUSPENDED_CALL_BUT_CALL_ID_NOT_EXIST_83,
			C_V_CALL_ID_IN_USE_84,
			C_V_NO_CALL_SUSPENDED_85,
			C_V_CALL_HAVING_CALL_ID_CLEARED_86,
			C_V_INCOMPATIBLE_DESTINATION_88,
			C_V_INVALID_TRANSIT_NETWORK_SELECTION_91,
			C_V_INVALID_MESSAGE_UNSPECIFIED_95,
			};

			/* Protocol error */

CONST	uchar NTT_C_V_PROTOCOL_ERROR_S[] = {
			C_C_PROTOCOL_ERROR,
			C_V_MANDATORY_IE_MISSING_96,
			C_V_MESSAGE_TYPE_NON_EXISTENT_97,
			C_V_MESSAGE_STATE_INCONSISTENCY_98,
			C_V_NON_EXISTENT_IE_99,
			C_V_INVALID_IE_CONTENT_100,
			C_V_MESSAGE_NOT_COMPATIBLE_101,
			C_V_RECOVERY_ON_TIMER_EXPIRY_102,
			C_V_PROTOCOL_ERROR_UNSPECIFIED_111,
			};

			/* Interworking */

CONST	uchar NTT_C_V_INTERWORKING_S[] = {
			C_C_INTERWORKING,
			C_V_INTERWORKING_UNSPECIFIED_127,
			};

					/* Channel selection according to interface type (ie CHAN_ID) */

CONST	uchar NTT_CHAN_SEL_BRI_S[] = {
			INT_TYPE_BRI,
			NO_CHAN,
			B1_CHAN,
			B2_CHAN,
			ANY_CHAN,
			};

CONST	uchar NTT_CHAN_SEL_PRI_S[] = {
			INT_TYPE_PRI,
			NO_CHAN,
			AS_INDICATED,
			CHAN_RESERVED,
			ANY_CHAN,
			};

					/* Information transfer rate (ie BC & LLC) according to transfer mode */

CONST	uchar NTT_TRF_RATE_CIRCUIT_S[] = {
	TRF_MODE_CIRCUIT,
	TRF_RATE_64KBS,
	TRF_RATE_2x64KBS,
	TRF_RATE_384KBS,
	TRF_RATE_1536KBS,
	TRF_RATE_1920KBS,
	};

CONST	uchar NTT_TRF_RATE_PACKET_S[] = {
	TRF_MODE_PACKET,
	TRF_RATE_PACKET_MODE,
	};

					/* Layer 1 protocol identifier (ie BC) */

CONST	uchar NTT_PROTOCOL_ID_BC_1_S[] = {
	LAYER_ID_1,
	PROTOCOL_ID_1_V110,
	PROTOCOL_ID_1_G711_u,
	PROTOCOL_ID_1_X31,
	};

					/* Layer 2 protocol identifier (ie BC) */

CONST	uchar NTT_PROTOCOL_ID_BC_2_S[] = {
	LAYER_ID_2,
	PROTOCOL_ID_2_Q921,
	PROTOCOL_ID_2_X25_LL,
	};

					/* Layer 3 protocol identifier (ie BC) */

CONST	uchar NTT_PROTOCOL_ID_BC_3_S[] = {
	LAYER_ID_3,
	PROTOCOL_ID_3_Q931,
	PROTOCOL_ID_3_X25_PL,
	};

/*-------------------------------------------------------------------------*/

		/*
		   Meta description of the information elements.
		   This description is  used to check an information element
		   inside a message and to store its value into  the internal
		   structure.
		   In the other way it is used to generate the information element of
		   a message from the internal structure.
		*/

#define NS_INCLUDE_IE_META_FUNCTION		ON		/* include prototypes of functions inside mp_ie.ntt */

#include "ntt.mp_ie"  /* include IE meta-programs */


/*-------------------------------------------------------------------------*/

#define Ns_ntt_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_ntt_end_table_or_function		};
#define Ns_ntt_tab_tabl_entry(idx, tab)		Ns_tab_tabl_entry (idx, tab),
#define Ns_ntt_tabx_list_entry(tab)			Ns_tabx_list_entry (tab),
#define Ns_ntt_tab_tabx_entry(idx, tab)		Ns_tab_tabx_entry (idx, tab),

#define Ns_ntt_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx)	\
			Ns_tab_ie_entry (codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, 0),

#define Ns_ntt_tab_ie_no_i_str(codes, ie, mx)	{codes, ie, A_NIL, 0, A_NIL, A_NIL, A_NIL, mx, 0},
#define Ns_ntt_tab_ie_msg_header			{CODESET_NIL, MESSAGE_HEADER, (uchar *)A_NIL, sizeof(struct i_message_header), (uchar *)Pic_address (&i_message_header), (uchar *)A_NIL, (uchar *)A_NIL, 1, 0},

#include "ntt.tab_ie"		/* include other Tables describing the IEs */

#define NTT_MX_TABL (sizeof(NTT_TAB_TABL)/sizeof (struct tabl))
CONST   uchar   ntt_size_tab_tabl = NTT_MX_TABL;

#define NTT_MX_TABX (sizeof(NTT_TAB_TABX)/sizeof (struct tabx))
CONST   uchar   ntt_size_tab_tabx = NTT_MX_TABX;

CONST	uchar	ntt_size_tab_ie = Rnd_sizeof (NTT_TAB_IE) / IE_ELEM_SIZE;	/* maximum number of item in the table */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_bc_???_spdu - implements the processing of the Bearer
						   capability (BC) IE of a received SPDU
						   message and of a SPDU message to be sent.

Usage			ntt_uchar bc_???_spdu ();

Return value :  ntt_bc_???_spdu returns	= OK valid data,
								= NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar ntt_bc_4ab_spdu ()
{
	ie_if_flag = ON;	/* octntt 4a and 4b may be present */

	if ((direction			== TO_D_CHANNEL)			&&
		(I_bc_structure		== STRUCTURE_DEFAULT)		&&
		(I_bc_configuration	== CONFIG_POINT_TO_POINT)	&&
		(I_bc_est			== EST_DEMAND)				&&
		(I_bc_symmetry		== BIDIRECTIONAL_SYMMETRY)	&&
		(I_bc_dest_rate		== I_bc_trf_rate)) {

			/* default values for octntt 4a and 4b : they are omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar ntt_bc_4b_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 4b may be present */

	if ((direction			== TO_D_CHANNEL)			&&
		(I_bc_symmetry	== BIDIRECTIONAL_SYMMETRY)	&&
		(I_bc_dest_rate	== I_bc_trf_rate)) {

			/* default values for octet 4b : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

#define Get_layer_id()	Extract (5,Mask(2))

uchar ntt_bc_5_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_bc_layer_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_bc_protocol_id_1 == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar ntt_bc_6_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 6 may be present */

		/* if I_bc_layer_id_2 == BYTE_VAL_NIL -> octet 6 is missing */

	if (direction == TO_D_CHANNEL) {

			/* octet 6 must be present if PACKET MODE */

		if (I_bc_protocol_id_2 == BYTE_VAL_NIL) {

			/* octet 6 is missing */

			if (I_bc_trf_mode == TRF_MODE_PACKET) return (NOK);

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_2) {

				/* It is NOT Octet 6 (layer 2) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar ntt_bc_7_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 7 may be present */

		/* if I_bc_layer_id_3 == BYTE_VAL_NIL -> octet 7 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_bc_protocol_id_3 == BYTE_VAL_NIL) {

				/* octet 7 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_3) {

				/* It is NOT Octet 7 (layer 3) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			calling_pres_spdu - implements the specific processing of
							a calling number Information Element (IE).

Usage			uchar calling_pres_spdu ();

Return value :  OK or NOK

common constants and declarations : ns.h net_i_s.h

common objects : internal data structure, ie  spdu context.
						- direction = FROM or TO D_CHANNEL side.

*--------------------------------------------------------------------------*/

uchar ntt_spdu_calling_pres ()
{
	ie_if_flag = ON;	/* the number may be present */

	if (direction == TO_D_CHANNEL) {

		if (I_calling_nb_presentation != PRES_ALLOWED) {

				/* the number shall not be sent to the called party */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_cause_spdu - implements the specific processing of a cause
							 Information Element (IE).

Usage			uchar ntt_cause_spdu ();

Return value :  OK or NOK

common constants and declarations : ns.h net_i_s.h

common objects : internal data structure i_cause, ie  spdu context.
						- direction = FROM or TO D_CHANNEL side.

*--------------------------------------------------------------------------*/

#if NEW_FCT_STYLE == ON
	uchar	check_ie		(uchar spdu_ie_codeset, uchar spdu_ie_id);
#else
	uchar	check_ie		();
#endif

uchar ntt_cause_spdu ()
{
	uchar   class_val;				/* cause class & value */
	uchar	ie_codeset;				/* codeset */
	uchar	ie_codeset_implicit;	/* implicit codeset */

	ie_codeset_implicit =
	ie_codeset          = CODESET_0;

	class_val = C_v (I_cause_class, I_cause_val);

	if (direction == FROM_D_CHANNEL) {

				/* FROM the D CHANNEL side */

	  if (! Eo_ie) {

		switch (class_val) {

			case C_v (C_C_NORMAL_EVENT_0,			C_V_NO_ROUTE_TO_TRANSIT_NET_2)			:

				switch (Get_ie_octet) {

						/* no check done on the received IE contained in the diagnostic */

					case TRANSIT_NET_SEL :
					case SPF_FAC :
						return (r_exec_spdu_ie ((uchar *)&NTT_DIAG_P));

					default :

							/* not allowed IE */

						return (NOK);
				}

			case C_v (C_C_SERVICE_NOT_IMPLEMENTED,	C_V_CHANNEL_TYPE_NOT_IMPLEMENTED_66)	:

				if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_CHAN_TYPE) != OK) {
					return (NOK);

				} else {

					*(I_cause_p_diagnostic	= p_ind_buffer++) = I_cause_tmp;
					I_cause_diag_lgth		= 1;
				}

				break;

			case C_v (C_C_INVALID_MESSAGE,			C_V_IDENTIFIED_CHANNEL_NOT_EXIST_82)	:

				if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_CHAN_NB) != OK) {
					return (NOK);

				} else {

					*(I_cause_p_diagnostic	= p_ind_buffer++) = I_cause_tmp;
					I_cause_diag_lgth		= 1;
				}

				break;

			case C_v (C_C_INVALID_MESSAGE,			C_V_CALL_HAVING_CALL_ID_CLEARED_86)	 	:
				*(I_cause_p_diagnostic	= p_ind_buffer++) = Get_ie_octet;
				I_cause_diag_lgth		= 1;
				return (r_exec_spdu_ie ((uchar *)&NTT_DIAG_CAUSE));

			case C_v (C_C_RESOURCE_UNAVAILABLE,		C_V_ACCESS_INFORMATION_DISCARDED_43)	:
			case C_v (C_C_INVALID_MESSAGE,			C_V_INCOMPATIBLE_DESTINATION_88)		:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_MANDATORY_IE_MISSING_96)			:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_NON_EXISTENT_IE_99)					:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_INVALID_IE_CONTENT_100)				:
				I_cause_p_diagnostic	= p_ind_buffer;
				Memcpy_far ((char FAR *) I_cause_p_diagnostic, (char FAR *) Get_p_ie, (ushort)Remainder_ie_octet);
				p_ind_buffer += (I_cause_diag_lgth	= (uchar)Remainder_ie_octet);

				do {

					if (So_ie_flag == IE_FORMAT_SO) {

							/* Single Octet IE processing */

						switch (So_ie_1_id) {

							case SHIFT :

								switch (So_ie_1_lock) {

									case LOCKING_SHIFT :

										if (Spdu_param_ie_locking_shift == ON) {
											ie_codeset_implicit = ie_codeset = So_ie_1_codeset;

										} else {
												/* locking shift not allowed : error */

											return (NOK);
										}

										break;

									case NON_LOCKING_SHIFT :

										if (Spdu_param_ie_non_locking_shift == ON) {
											ie_codeset = So_ie_1_codeset;

										} else {

												/* non locking shift not allowed : error */

											return (NOK);
										}
										break;

								}
								break;

							case CONGESTION_LEVEL :
								break;

							case IE_ID_SO :

								if (check_ie (CODESET_SO, Get_ie_octet - 0x80) != OK) return (NOK);
								break;
						}

					} else {

						if (check_ie (ie_codeset, Get_ie_octet) != OK) return (NOK);
						ie_codeset = ie_codeset_implicit;
					}

					Inc_p_ie (1);

				} while (!Eo_ie);

				break;

			case C_v (C_C_NORMAL_EVENT,				C_V_NUMBER_CHANGED_22)					:
				return (r_exec_spdu_ie ((uchar *)&NTT_DIAG_P));

			case C_v (C_C_SERVICE_NOT_AVAILABLE,	C_V_BC_NOT_AUTHORIZED_57)				:
			case C_v (C_C_SERVICE_NOT_AVAILABLE,	C_V_BC_NOT_PRESENTLY_AVAILABLE_58)		:
			case C_v (C_C_SERVICE_NOT_IMPLEMENTED,	C_V_BC_NOT_IMPLEMENTED_65)				:
				I_cause_p_diagnostic	= p_ind_buffer;
				Memcpy_far ((char FAR *) I_cause_p_diagnostic, (char FAR *) Get_p_ie, (ushort)Remainder_ie_octet);
				p_ind_buffer += (I_cause_diag_lgth	= (uchar)Remainder_ie_octet);

				do {

					switch (Get_inc_ie_octet) {

						case TRF_CAP_FLD :

							if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_TRF_CAP) != OK) {
								return (NOK);
							}
							break;

						case TRF_MODE_FLD :

							if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_TRF_MODE) != OK) {
								return (NOK);
							}
							break;

						case TRF_RATE_FLD :
						case DEST_RATE_FLD :

							if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_TRF_RATE) != OK) {
								return (NOK);
							}
							break;

						case STRUCTURE_FLD :

							if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_STRUCTURE) != OK) {
								return (NOK);
							}
							break;

						case CONFIG_FLD :

							if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_CONFIG) != OK) {
								return (NOK);
							}
							break;

						case EST_FLD :

							if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_EST) != OK) {
								return (NOK);
							}
							break;

						case SYMMETRY_FLD :

							if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_SYMMETRY) != OK) {
								return (NOK);
							}
							break;

						case LAYER_ID_FLD :

							if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_LAYER_ID) != OK) {
								return (NOK);
							}
							break;

						default :
							return (NOK);
					}

				} while (!Eo_ie);

				break;


			case C_v (C_C_NORMAL_EVENT,				C_V_FACILITY_REJECT_29)					:
			case C_v (C_C_SERVICE_NOT_AVAILABLE,	C_V_REQUESTED_FAC_NOT_SUBSCRIBED_50)	:
			case C_v (C_C_SERVICE_NOT_IMPLEMENTED,	C_V_REQUESTED_FAC_NOT_IMPLEMENTED_69)	:

					/* Facility identification (Network dependent) */

				return (r_exec_spdu_ie ((uchar *)&NTT_DIAG_P));

			case C_v (C_C_NORMAL_EVENT,				C_V_CALL_REJECT_21)						:
				return (r_exec_spdu_ie ((uchar *)&NTT_DIAG_P));

			case C_v (C_C_NORMAL_EVENT_0,			C_V_UNASSIGNED_NUMBER_1)				:
			case C_v (C_C_NORMAL_EVENT_0,			C_V_NO_ROUTE_TO_DEST_3)					:
			case C_v (C_C_NORMAL_EVENT,				C_V_NORMAL_CLEARING_16)					:
			case C_v (C_C_SERVICE_NOT_AVAILABLE,	C_V_QUALITY_OF_SERVICE_UNAVAILABLE_49)	:

				if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_CONDITION) != OK) {
					return (NOK);
				}

				*(I_cause_p_diagnostic	= p_ind_buffer++) = I_cause_tmp;
				I_cause_diag_lgth		= 1;
				break;

			case C_v (C_C_INVALID_MESSAGE,			C_V_INVALID_MESSAGE_UNSPECIFIED_95)		:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_TYPE_NON_EXISTENT_97)		:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_STATE_INCONSISTENCY_98)		:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_NOT_COMPATIBLE_101)			:

				if (r_exec_spdu_ie ((uchar *)&NTT_DIAG_MSG) != OK) {
					return (NOK);
				}

				*(I_cause_p_diagnostic	= p_ind_buffer++) = I_cause_tmp;
				I_cause_diag_lgth		= 1;
				break;

			case C_v (C_C_PROTOCOL_ERROR,			C_V_RECOVERY_ON_TIMER_EXPIRY_102)		:
				return (r_exec_spdu_ie ((uchar *)&NTT_DIAG_TIMER));

			default :
				I_cause_diag_lgth		= 0;
				I_cause_p_diagnostic	= P_NIL;
				return (NOK);
		}


	  } else {

		I_cause_diag_lgth		= 0;
		I_cause_p_diagnostic	= P_NIL;
		return (OK);

	  }

				/* TO D CHANNEL */
	}  else {

	  if (I_cause_diag_lgth != 0) {

		switch (class_val) {
			case C_v (C_C_RESOURCE_UNAVAILABLE,		C_V_ACCESS_INFORMATION_DISCARDED_43)	:
			case C_v (C_C_PROTOCOL_ERROR,   		C_V_MANDATORY_IE_MISSING_96)			:
			case C_v (C_C_PROTOCOL_ERROR,   		C_V_NON_EXISTENT_IE_99)					:
			case C_v (C_C_PROTOCOL_ERROR,   		C_V_INVALID_IE_CONTENT_100)				:
				Memcpy_far ((char FAR *) Get_p_ie, (char FAR *) I_cause_p_diagnostic, I_cause_diag_lgth);
				break;


			case C_v (C_C_PROTOCOL_ERROR,   		C_V_MESSAGE_TYPE_NON_EXISTENT_97)   	:
			case C_v (C_C_PROTOCOL_ERROR,   		C_V_MESSAGE_STATE_INCONSISTENCY_98) 	:
			case C_v (C_C_PROTOCOL_ERROR,			C_V_MESSAGE_NOT_COMPATIBLE_101)			:
				Put_inc_ie_octet (*I_cause_p_diagnostic);
				break;

			case C_v (C_C_PROTOCOL_ERROR,			C_V_RECOVERY_ON_TIMER_EXPIRY_102)		:
				return (s_exec_spdu_ie ((uchar *)&NTT_DIAG_TIMER));

			default :
				break;
		}

	  }

	}

	return (OK);
}

uchar ntt_mode_circuit ()
{
	I_cause_tmp = TRF_MODE_CIRCUIT;
	return (OK);
}

uchar ntt_cause_3a_spdu ()
{
	ie_if_flag = ON;	/* octet 3a may be present */

	if (direction == TO_D_CHANNEL &&
		I_cause_recommend == RECOMMENDATION_Q931) {
		ie_if_flag = OFF;
	}

	return (OK);

}

/*------------------------------------------------------------------------*/

		/*
		   Test if interface type in chan_id IE and in
		   configuration are the same. If not return error.
		*/

uchar ntt_chan_id_spdu ()
{

	if (direction == FROM_D_CHANNEL) {

		if (I_(chan_id,int_type) == INT_TYPE_BRI) {

			if (Na_type != BRI) return (NOK);

		} else {

			if (Na_type != PRI) return (NOK);
		}

	}

		/* Process PRI type chan_id */

	if (I_(chan_id,int_type) != INT_TYPE_BRI) {

		if ((I_(chan_id,chan_sel) == NO_CHAN) ||
			(I_(chan_id,chan_sel) == ANY_CHAN)) {
			ie_optional_octet = ON;
		}

		if (direction == FROM_D_CHANNEL) {
			return (r_exec_spdu_ie ((uchar *)&NTT_CHAN_ID_PRI_P));

		} else {

			return (s_exec_spdu_ie ((uchar *)&NTT_CHAN_ID_PRI_P));
		}

	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_fac_spdu - implements the processing of the Facility IE
						   of a received or to be sent SPDU message.

Usage			uchar ntt_fac_spdu ();

Return value :  ntt_fac_spdu returns	= OK valid data,
									= NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar ntt_fac_spdu ()
{
	if (direction == FROM_D_CHANNEL) {

			/* check the provided component length */

		if (Remainder_ie_octet != I_facility_lgth_component) {
			return (NOK);
		}

		switch (I_facility_tag_component) {

			case FAC_INVOKE :
				return (r_exec_spdu_ie ((uchar *) &NTT_FAC_INVOKE_P));

			case FAC_RETURN_RESULT :
				return (r_exec_spdu_ie ((uchar *) &NTT_FAC_RETURN_RESULT_P));

			case FAC_RETURN_ERROR :
				return (r_exec_spdu_ie ((uchar *) &NTT_FAC_RETURN_ERROR_P));

			case FAC_REJECT :
				break;
		}

	} else {
			/* to D_CHANNEL direction */

		p_fac_comp_lgth = (p_ie - 1);

			/* decrement the length not to transmit the end_of-string char */

		I_facility_lgth_invoke_id--;

		switch (I_facility_tag_component) {

			case FAC_INVOKE :
				return (s_exec_spdu_ie ((uchar *) &NTT_FAC_INVOKE_P));

			case FAC_RETURN_RESULT :
				return (s_exec_spdu_ie ((uchar *) &NTT_FAC_RETURN_RESULT_P));

			case FAC_RETURN_ERROR :
				return (s_exec_spdu_ie ((uchar *) &NTT_FAC_RETURN_ERROR_P));

			case FAC_REJECT :
				break;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_fac_invoke_spdu - implements the processing of the 6.2 octet.

Usage			uchar ntt_fac_invoke_spdu ();

Return value :  ntt_fac_invoke_spdu returns	= OK valid data,
										= NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar ntt_fac_invoke_spdu	()
{

	if (direction == FROM_D_CHANNEL) {
		I_facility_p_invoke_id = p_ind_buffer;
		Memcpy_far ((char FAR *) I_facility_p_invoke_id, (char FAR *) Get_p_ie, I_facility_lgth_invoke_id);

			/* put a end-of-string character and increment the length of one */

		*(I_facility_p_invoke_id + I_facility_lgth_invoke_id) = '\0';
		Inc_p_ie (I_facility_lgth_invoke_id++ - 1);
		p_ind_buffer += I_facility_lgth_invoke_id;

	} else {

		Memcpy_far ((char FAR *) Get_p_ie, (char FAR *) I_facility_p_invoke_id, I_facility_lgth_invoke_id);
		Inc_p_ie (I_facility_lgth_invoke_id - 1);
	}

		/* p_ie points now on the last octet of 6.2 */

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_fac_chk_seq_spdu - test the sequence length for incoming spdu.

Usage			uchar ntt_fac_chk_seq_spdu();

Return value :  ntt_fac_chk_seq_spdu returns	= OK valid data,
											= NOK invalid data or fatal error.

*--------------------------------------------------------------------------*/

uchar ntt_fac_chk_seq_spdu	()
{
	if (direction == FROM_D_CHANNEL) {

			/* check the provided component length */

		if (Remainder_ie_octet != I_facility_lgth_sequence) {
			return (NOK);
		}

	} else {
			/*
				Save the address of the sequence length field.
				This one will be provided at the end of the whole meta-program.
			*/

		p_fac_seq_lgth = (p_ie - 1);
	}
	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_store_2lgth_spdu - implements the processing of the
									6.7 and 5 octntt.

Usage			uchar ntt_store_2lgth_spdu ();

Return value :  ntt_store_2lgth_spdu returns OK.

*--------------------------------------------------------------------------*/

uchar ntt_store_2lgth_spdu ()
{
	if (direction == TO_D_CHANNEL) {
		*p_fac_seq_lgth = (uchar)(Get_p_ie - p_fac_seq_lgth);
		*p_fac_comp_lgth = (uchar)(Get_p_ie - p_fac_comp_lgth);
	}

	Inc_p_ie (1);
	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_store_lgth_spdu - implements the processing of the #5 octntt.

Usage			uchar ntt_store_lgth_spdu ();

Return value :  ntt_store_lgth_spdu returns OK.

*--------------------------------------------------------------------------*/

uchar ntt_store_lgth_spdu ()
{
	if (direction == TO_D_CHANNEL) {
		*p_fac_comp_lgth = (uchar)(Get_p_ie - p_fac_comp_lgth);
	}

	Inc_p_ie (1);
	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			llc_spdu - implements the processing of the low layer
						   compatibility (LLC) IE of a received SPDU
						   message and of SPDU message to be sent.

Usage		   uchar llc_spdu ();

Return value :  llc_spdu returns = OK valid data,
								 = NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar ntt_llc_4ab_spdu ()
{
	ie_if_flag = ON;	/* octntt 4a and 4b may be present */

	if ((direction				== TO_D_CHANNEL)			&&
		(I_llc_structure 		== STRUCTURE_DEFAULT)		&&
		(I_llc_configuration	== CONFIG_POINT_TO_POINT)	&&		/* forced value anyway */
		(I_llc_est				== EST_DEMAND)				&&		/* forced value anyway */
		(I_llc_symmetry			== BIDIRECTIONAL_SYMMETRY)	&&		/* forced value anyway */
		(I_llc_dest_rate		== I_llc_trf_rate)) {

			/* default values for octntt 4a and 4b : they are omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar ntt_llc_4b_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 4b may be present */

	if ((direction			== TO_D_CHANNEL)			&&
		(I_llc_symmetry	== BIDIRECTIONAL_SYMMETRY)	&&		/* forced value anyway */
		(I_llc_dest_rate == I_llc_trf_rate)) {

			/* default values for octet 4b : it is omitted */

		ie_if_flag = OFF;
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar ntt_llc_5_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 5 may be present */

		/* if I_llc_layer_id_1 == BYTE_VAL_NIL -> octet 5 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_llc_protocol_id_1 == BYTE_VAL_NIL) {

				/* octet 5 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_1) {

				/* It is NOT Octet 5 (layer 1) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar ntt_llc_6_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 6 may be present */

		/* if I_llc_layer_id_2 == BYTE_VAL_NIL -> octet 6 is missing */

	if (direction == TO_D_CHANNEL) {

			/* octet 6 must be present if PACKET MODE */

		if (I_llc_protocol_id_2 == BYTE_VAL_NIL) {

			/* octet 6 is missing */

			if (I_llc_trf_mode == TRF_MODE_PACKET) return (NOK);

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_2) {

				/* It is NOT Octet 6 (layer 2) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar ntt_llc_7_spdu ()
{
	ie_if_flag = ON;	/* (default value) : octet 7 may be present */

		/* if I_llc_layer_id_3 == BYTE_VAL_NIL -> octet 7 is missing */

	if (direction == TO_D_CHANNEL) {

		if (I_llc_protocol_id_3 == BYTE_VAL_NIL) {

				/* octet 7 is missing */

			ie_if_flag = OFF;
		}

	} else {

		uchar ie_octet;

		ie_octet = Get_ie_octet;

		if (Get_layer_id () != LAYER_ID_3) {

				/* It is NOT Octet 7 (layer 3) */

			ie_if_flag = OFF;
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		ntt_restart_spdu - check if presence of CHAN ID IE is compulsory or forbidden.

Usage		uchar ntt_restart_spdu ();

Return value :  ntt_restart_spdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar ntt_restart_spdu ()
{

	if (is_ie_i (CODESET_0, CHAN_ID) == ABSENT) {
		return (OK);

	} else {

		if (I_restart_ind_class == RI_INDICATED_CHANNEL) {
			return (OK);
		}

	}

	return (NOK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		ntt_spf_fac_spdu - implements the processing of the specific facility
						  IE (received or to be sent in a SPDU message).

Usage	   uchar ntt_spf_fac_spdu ();

Return value :  ntt_spf_fac_spdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

uchar ntt_spf_fac_spdu ()
{

	if (direction == TO_D_CHANNEL) {

		if (check_convert (	(uchar FAR *) Get_p_ie,
							I_spf_fac_a_net_id,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) return (NOK);
	} else {

		if (check_convert (	I_spf_fac_a_net_id,
							(uchar FAR *) Get_p_ie,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) return (NOK);
	}

	return (OK);

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_check_feature - implements the processing of the feature number.

Usage			uchar	ntt_check_feature	(ushort feature_nb);

Return value :  OK or NOK.

*--------------------------------------------------------------------------*/

#if NEW_FCT_STYLE == ON
	uchar	ntt_check_feature	(ushort feature_nb);
#else
	uchar	ntt_check_feature	();
#endif

uchar ntt_check_feature_act ()
{

	if (I_(feature_act,feature_nb_ext) != BYTE_VAL_NIL) {
		return (ntt_check_feature (I_(feature_act,feature_nb) * 128 + I_(feature_act,feature_nb_ext)));

	} else {

		return (ntt_check_feature (I_(feature_act,feature_nb)));
	}

}

uchar ntt_check_feature_ind ()
{

	if (I_(feature_ind,feature_nb_ext) != BYTE_VAL_NIL) {
		return (ntt_check_feature (I_(feature_ind,feature_nb) * 128 + I_(feature_ind,feature_nb_ext)));

	} else {

		return (ntt_check_feature (I_(feature_ind,feature_nb)));
	}

}

#define	Bad_call_bc_trf_cap_3()		((Call_current_exist) ?					\
									 Test_bc_trf_cap_3 (Call_bc_trf_cap) :	\
									 Test_bc_trf_cap_3 (I_bc_trf_cap))

#define	Bad_call_bc_trf_cap_2()		((Call_current_exist) ?					\
									 Test_bc_trf_cap_2 (Call_bc_trf_cap) :	\
									 Test_bc_trf_cap_2 (I_bc_trf_cap))

#define	Test_bc_trf_cap_3(x)		((x != TRF_CAP_SPEECH)		&&	\
									 (x != TRF_CAP_3_1_AUDIO)	&&	\
									 (x != TRF_CAP_UNRESTRICTED)	\
									)

#define	Test_bc_trf_cap_2(x)		((x != TRF_CAP_SPEECH)		&&	\
									 (x != TRF_CAP_3_1_AUDIO)		\
									)


uchar ntt_check_feature (feature_nb)
	ushort feature_nb;
{

	switch (feature_nb) {

		case FEATURE_RJNC :
			if (Na_subscription_x (NOTIF_NO_CHAN) == OFF) return (NOK);
			break;

		case FEATURE_CD1_1 :
		case FEATURE_CD1_2 :
			if (
				(Na_subscription_x (CALL_DEFLECTION) == OFF)	||
				Bad_call_bc_trf_cap_3 ()
			   ) return (NOK);
			break;

		case FEATURE_CD2_1 :
		case FEATURE_CD2_2 :
		case FEATURE_CD3_1 :
		case FEATURE_CD3_2 :
		case FEATURE_CD4_1 :
		case FEATURE_CD4_2 :
			if (
				(Na_subscription_x (CALL_DEFLECTION) == OFF)	||
				Bad_call_bc_trf_cap_2 ()
			   ) return (NOK);
			break;

		case FEATURE_MB1 :
			if (Na_subscription_x (INCOMING_CALL_BARRING) == OFF) return (NOK);
			break;

		case FEATURE_MES :
			if (Na_subscription_x (AUTOMATIC_CALL_ANSWERING) == OFF) return (NOK);
			break;

		case FEATURE_STATE_ENQ :
			break;

			/**** POINT_TO_POINT SERVICES ****/

		case FEATURE_PP_CW_1 :
		case FEATURE_PP_CW_2 :
			if (
				(Na_connection == POINT_TO_MULTIPOINT)		||
				(Na_subscription_x (CALL_WAITING) == OFF)	||
				Bad_call_bc_trf_cap_3 ()
			   ) return (NOK);
			break;

		case FEATURE_PP_AO_1 :
		case FEATURE_PP_AO_2 :
			if (
				(Na_connection == POINT_TO_MULTIPOINT)				||
				(Na_subscription_x (THREE_PARTY_SERVICE) == OFF)	||
				Bad_call_bc_trf_cap_2 ()
			   ) return (NOK);
			break;

		case FEATURE_PP_3P_1 :
		case FEATURE_PP_3P_2 :
		case FEATURE_PP_CHAO_1 :
		case FEATURE_PP_CHAO_2 :
			if (
				(Na_connection == POINT_TO_MULTIPOINT)				||
				(Na_subscription_x (THREE_PARTY_SERVICE) == OFF)	||
				Bad_call_bc_trf_cap_3 ()
			   ) return (NOK);
			break;

		case FEATURE_PP_CT_1 :
		case FEATURE_PP_CT_2 :
		case FEATURE_PP_CHCT_1 :
		case FEATURE_PP_CHCT_2 :
			if (
				(Na_connection == POINT_TO_MULTIPOINT)		||
				(Na_subscription_x (CALL_TRANSFER) == OFF)	||
				(I_call_ref_flag == CALL_REF_FLAG_ORI)		||
				Bad_call_bc_trf_cap_3 ()
			   ) return (NOK);
			break;


		case FEATURE_MB2 :
		case FEATURE_MB3 :
		case FEATURE_BOE :
			if (
				(Na_connection == POINT_TO_MULTIPOINT) ||
				(Na_subscription_x (INCOMING_CALL_BARRING) == OFF)
			   ) return (NOK);
			break;

			/**** POINT_TO_MULTIPOINT SERVICES ****/

		case FEATURE_MP_CW_1 :
		case FEATURE_MP_CW_2 :
			if (
				(Na_connection == POINT_TO_POINT)			||
				(Na_subscription_x (CALL_WAITING) == OFF)	||
				Bad_call_bc_trf_cap_3 ()
			   ) return (NOK);
			break;

		case FEATURE_MP_AO_1 :
		case FEATURE_MP_AO_2 :
			if (
				(Na_connection == POINT_TO_POINT)					||
				(Na_subscription_x (THREE_PARTY_SERVICE) == OFF)	||
				Bad_call_bc_trf_cap_2 ()
			   ) return (NOK);
			break;

		case FEATURE_MP_3P_1 :
		case FEATURE_MP_3P_2 :
		case FEATURE_MP_CHAO_1 :
		case FEATURE_MP_CHAO_2 :
			if (
				(Na_connection == POINT_TO_POINT)					||
				(Na_subscription_x (THREE_PARTY_SERVICE) == OFF)	||
				Bad_call_bc_trf_cap_3 ()
			   ) return (NOK);
			break;

		case FEATURE_MP_CHCT_1 :
		case FEATURE_MP_CHCT_2 :
		case FEATURE_MP_CT_1 :
		case FEATURE_MP_CT_2 :
			if (
				(Na_connection == POINT_TO_POINT)			||
				(Na_subscription_x (CALL_TRANSFER) == OFF)	||
				(I_call_ref_flag == CALL_REF_FLAG_ORI)		||
				Bad_call_bc_trf_cap_3 ()
			   ) return (NOK);
			break;


		case FEATURE_SR1 :
		case FEATURE_SR2 :
			if (
				(Na_connection == POINT_TO_POINT)	||
				(Na_subscription_x (NOTIF_SUSP_RESUME) == OFF)
			   ) return (NOK);
			break;

		default :

			if (Na_connection == POINT_TO_POINT) return (NOK);

			if (feature_nb > (uint)MX_FEATURE) return (NOK);

			switch (feature_nb % 32) {

				case FEATURE_CW_N :
					if (
						(Na_subscription_x (CALL_WAITING) == OFF)	||
						Bad_call_bc_trf_cap_3 ()
					   ) return (NOK);
					break;

				case FEATURE_3P_N :
				case FEATURE_CHAO_N :
					if (
						(Na_subscription_x (THREE_PARTY_SERVICE) == OFF)	||
						Bad_call_bc_trf_cap_3 ()
					   ) return (NOK);
					break;

				case FEATURE_AO_N :
					if (
						(Na_subscription_x (THREE_PARTY_SERVICE) == OFF)	||
						Bad_call_bc_trf_cap_2 ()
					   ) return (NOK);
					break;

				case FEATURE_CT_N :
				case FEATURE_CHCT_N :
					if (
						(Na_subscription_x (CALL_TRANSFER) == OFF)	||
						(I_call_ref_flag == CALL_REF_FLAG_ORI)		||
						Bad_call_bc_trf_cap_3 ()
					   ) return (NOK);
					break;

				case FEATURE_CD1_N :
					if (
						(Na_subscription_x (CALL_DEFLECTION) == OFF)	||
						Bad_call_bc_trf_cap_3 ()
					   ) return (NOK);
					break;

				case FEATURE_CD2_N :
				case FEATURE_CD3_N :
				case FEATURE_CD4_N :
					if (
						(Na_subscription_x (CALL_DEFLECTION) == OFF)	||
						Bad_call_bc_trf_cap_2 ()
					   ) return (NOK);
					break;

				default :
					return (NOK);

			}

	}

	return (OK);
}


/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

#undef Ns_ntt_table_or_function
#undef Ns_ntt_end_table_or_function
#undef Ns_ntt_tab_tabl_entry
#undef Ns_ntt_tabx_list_entry
#undef Ns_ntt_tab_tabx_entry
#undef Ns_ntt_tab_ie_entry
#undef Ns_ntt_tab_ie_no_i_str
#undef Ns_ntt_tab_ie_msg_header

#define Ns_ntt_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_ntt_end_table_or_function		}

#define Ns_ntt_tab_tabl_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_val, (uchar *)tab);
#define Ns_ntt_tabx_list_entry(tab)			Pic_init_struct_array_next (p_table,  p_val, (uchar	*)tab);
#define Ns_ntt_tab_tabx_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_tab, (struct tabx_list *)tab);

#define Ns_ntt_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx)	\
	Pic_init_struct_array (p_table,  i_pic, p_prog, (uchar	*)mp_a);		\
	Pic_init_struct_array (p_table,  i_pic, p_i_struct, (uchar	*)i_str);	\
	Pic_init_struct_array (p_table,  i_pic, p_init_spdu, (uchar	*)df_spdu);	\
	Pic_init_struct_array_next (p_table,  p_init_ssdu, (uchar	*)df_ssdu);

#define Ns_ntt_tab_ie_no_i_str(codes, ie, mx)	Ns_ntt_tab_ie_entry (0, 0, P_NIL, P_NIL, P_NIL, P_NIL, 0)

#define Ns_ntt_tab_ie_msg_header		Ns_ntt_tab_ie_entry (0, 0, P_NIL, &i_message_header, P_NIL, P_NIL, 0)

		/*	Function used to initialize address fields in Tables above */


void pic_init_ns_ntt_ie ()
{
	uchar	i_pic;			/* current index */

#	include "ntt.tab_ie"
}

#endif /* end of PIC used} */


/*EOF*/
