
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


		/* external functions prototype */

#if NEW_FCT_STYLE == ON
	uchar 	check_convert	(uchar FAR *p_to, uchar FAR *p_from, uint lgth, uchar code, uchar restriction);
#else
	uchar 	check_convert	();
#endif

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.ntt */

#include "ntt.mp_ssdu"

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/


		/* NS_ALERT_IN */

#define	NTT_ALERT_RQ			NTT_ALERT_IN
#define	NTT_NET_ALERT_RQ		NTT_ALERT_IN
#define	NTT_NET_ALERT_IN		NTT_ALERT_RQ


		/* NS_CALL_PROC_IN */

#define	NTT_CALL_PROC_RQ		NTT_CALL_PROC_IN
#define	NTT_NET_CALL_PROC_RQ	NTT_CALL_PROC_IN
#define	NTT_NET_CALL_PROC_IN	NTT_CALL_PROC_RQ

		/* NS_CONN_IN */
		/* NS_CONN_CO */

#define	NTT_CONN_RQ				NTT_CONN_IN
#define	NTT_CONN_RS				NTT_CONN_CO
#define	NTT_NET_CONN_RQ			NTT_CONN_IN
#define	NTT_NET_CONN_IN			NTT_CONN_RQ
#define	NTT_NET_CONN_RS			NTT_CONN_CO
#define	NTT_NET_CONN_CO			NTT_CONN_RS

		/* NS_PROGRESS_IN */

#define	NTT_PROGRESS_RQ			NTT_PROGRESS_IN
#define	NTT_NET_PROGRESS_RQ		NTT_PROGRESS_IN
#define	NTT_NET_PROGRESS_IN		NTT_PROGRESS_RQ

/*===============    CALL  INFORMATION  PHASE  MESSAGES    ====================*/

		/* NS_RESUME_CO */

#define	NTT_RESUME_RQ			NTT_RESUME_CO
#define	NTT_NET_RESUME_IN		NTT_RESUME_RQ
#define	NTT_NET_RESUME_RS		NTT_RESUME_CO

		/* NS_SUSPEND_CO */

#define	NTT_SUSPEND_RQ			NTT_SUSPEND_CO
#define	NTT_NET_SUSPEND_IN		NTT_SUSPEND_RQ
#define	NTT_NET_SUSPEND_RS		NTT_SUSPEND_CO

		/* NS_USER_INFO_IN */

#define	NTT_USER_INFO_RQ		NTT_USER_INFO_IN
#define	NTT_NET_USER_INFO_RQ	NTT_USER_INFO_IN
#define	NTT_NET_USER_INFO_IN	NTT_USER_INFO_RQ

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_IN */
		/* NS_CLEAR_CO */

#define	NTT_CLEAR_RQ			NTT_CLEAR_IN
#define	NTT_CLEAR_RS			NTT_CLEAR_CO
#define	NTT_NET_CLEAR_RQ		NTT_CLEAR_IN
#define	NTT_NET_CLEAR_IN		NTT_CLEAR_RQ
#define	NTT_NET_CLEAR_RS		NTT_CLEAR_CO
#define	NTT_NET_CLEAR_CO		NTT_CLEAR_RS

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

		/* NS_CONGEST_CONTROL_IN */

#define	NTT_NET_CON_CON_RQ		NTT_CON_CON_IN

		/* NS_INFO_IN */

#define	NTT_INFO_RQ				NTT_INFO_IN
#define	NTT_NET_INFO_RQ			NTT_INFO_IN
#define	NTT_NET_INFO_IN			NTT_INFO_RQ

		/* NS_SPF_FACILITY_CO */

#define	NTT_SPF_FACILITY_RQ		NTT_SPF_FACILITY_CO
#define	NTT_NET_SPF_FACILITY_IN	NTT_SPF_FACILITY_RQ
#define	NTT_NET_SPF_FACILITY_RS	NTT_SPF_FACILITY_CO

		/* NS_NOTIFY_IN */

#define	NTT_NOTIFY_RQ			NTT_NOTIFY_IN
#define	NTT_NET_NOTIFY_IN		NTT_NOTIFY_RQ
#define	NTT_NET_NOTIFY_RQ		NTT_NOTIFY_IN

		/* NS_RESTART_IN */

#define	NTT_RESTART_RQ			NTT_RESTART_IN
#define	NTT_RESTART_RS			NTT_RESTART_IN
#define	NTT_RESTART_CO			NTT_RESTART_IN
#define	NTT_NET_RESTART_IN		NTT_RESTART_IN
#define	NTT_NET_RESTART_RS		NTT_RESTART_RS
#define	NTT_NET_RESTART_CO		NTT_RESTART_RS
#define	NTT_NET_RESTART_RQ		NTT_RESTART_IN

/*=========================================================================*/

#define Ns_ntt_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_ntt_end_table_or_function		};

#define Ns_ntt_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_ntt_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_ntt		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_ntt_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_ntt_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "ntt.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define NTT_MX_SSDU (sizeof(NTT_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		ntt_mx_size_ssdu = NTT_MX_SSDU;

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_bc_ra_ssdu - implements the specific processing
								  of a bc rate adaptation in a SSDU
								  primitive.

Usage           uchar ntt_bc_ra_ssdu ();

Return value : 	ntt_bc_ra_ssdu returns	= OK
										= NOK

common constants and declarations : ns.h, ntt_i_s.h

common objects : internal data structure i_bc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar ntt_bc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_bc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = r_exec_ssdu_ie((uchar *)&NTT_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				r_exec_ssdu_ie ((uchar *)&NTT_P_BC_PAD);
				break;
		}
		return (r_exec_ssdu_ie ((uchar *)&NTT_P_BC_2));

	} else {

		switch (I_bc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = s_exec_ssdu_ie((uchar *)&NTT_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				s_exec_ssdu_ie ((uchar *)&NTT_P_BC_PAD);
				break;
		}

		return (s_exec_ssdu_ie ((uchar *)&NTT_P_BC_2));
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_calling_pres_ssdu - implements the specific processing of
							a calling number Information Element (IE).

Usage			uchar ntt_calling_pres_ssdu ();

Return value :  OK or NOK

common constants and declarations : ns.h

common objects : internal data structure, ie ssdu context.
						- direction = FROM or TO CALL_CONTROL side.

*--------------------------------------------------------------------------*/

uchar ntt_calling_pres_ssdu ()
{

	if (direction == TO_CALL_CONTROL) {

		if (I_calling_nb_presentation != PRES_ALLOWED) {

				/* the number shall not be sent to the called party */

			I_calling_nb_lgth = 0;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		ntt_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, ns_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/

uchar ntt_chan_id_chan_nb_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

		if ((I_(chan_id,int_type) == INT_TYPE_PRI) && (I_(chan_id, nb_map) == CHAN_NUMBER)) {

			/*
			 * Reset the extension bit in the chan_nb field.
			 */

			for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
				Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}
		}
	}

	return (OK);
}

uchar ntt_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		if (I_chan_id_int_type == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}

			/*
			 * Set the extension bit to 1 in the chan_nb field,
			 * unless it is slot map.
			 */


			if (i_chan_id[0].nb_map == CHAN_NUMBER) {

				i = I_(chan_id, chan_nb_lgth)-1;

				Set_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}

		}

	}
	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_fac_ssdu - implements the processing of the Facility IE
						   of a received or to be sent SSDU message.

Usage			uchar ntt_fac_ssdu ();

Return value :  ntt_fac_ssdu returns	= OK valid data,
									= NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar ntt_fac_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_facility_tag_component) {

			case FAC_INVOKE :
				return (r_exec_ssdu_ie ((uchar *) &NTT_FAC_INVOKE_SSDU));

			case FAC_RETURN_RESULT :
				return (r_exec_ssdu_ie ((uchar *) &NTT_FAC_RETURN_RESULT_SSDU));

			case FAC_RETURN_ERROR :
				return (r_exec_ssdu_ie ((uchar *) &NTT_FAC_RETURN_ERROR_SSDU));

			case FAC_REJECT :
				break;
		}

	} else {

			/* to CALL_CONTROL direction */

		switch (I_facility_tag_component) {

			case FAC_INVOKE :
				return (s_exec_ssdu_ie ((uchar *) &NTT_FAC_INVOKE_SSDU));

			case FAC_RETURN_RESULT :
				return (s_exec_ssdu_ie ((uchar *) &NTT_FAC_RETURN_RESULT_SSDU));

			case FAC_RETURN_ERROR :
				return (s_exec_ssdu_ie ((uchar *) &NTT_FAC_RETURN_ERROR_SSDU));

			case FAC_REJECT :
				break;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			ntt_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar ntt_llc_ra_ssdu ();

Return value : 	ntt_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, ntt_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar ntt_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_llc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = r_exec_ssdu_ie((uchar *)&NTT_P_LLC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_V120 :
				ret_code = r_exec_ssdu_ie ((uchar *)&NTT_P_LLC_V120);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				r_exec_ssdu_ie ((uchar *)&NTT_P_LLC_PAD);
				break;
		}

		return (r_exec_ssdu_ie ((uchar *)&NTT_P_LLC_2));

	} else {

		switch (I_llc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = s_exec_ssdu_ie((uchar *)&NTT_P_LLC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_V120 :
				ret_code = s_exec_ssdu_ie ((uchar *)&NTT_P_LLC_V120);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				s_exec_ssdu_ie ((uchar *)&NTT_P_LLC_PAD);
				break;
		}

		return (s_exec_ssdu_ie ((uchar *)&NTT_P_LLC_2));
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		ntt_spf_fac_ssdu - implements the processing of the specific facility
						  IE (received or to be sent in a SSDU message).

Usage	   uchar ntt_spf_fac_ssdu ();

Return value :  ntt_spf_fac_ssdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

uchar ntt_spf_fac_ssdu ()
{
	if (direction == TO_CALL_CONTROL) {

		if (check_convert (	(uchar FAR *) p_ssdu_val,
							I_spf_fac_a_net_id,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) return (NOK);
	} else {

		if (check_convert (	I_spf_fac_a_net_id,
							(uchar FAR *) p_ssdu_val,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) return (NOK);
	}

	return (OK);
}

#endif

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_ntt_table_or_function
#undef Ns_ntt_end_table_or_function
#undef Ns_ntt_tab_ssdu_ie_entry
#undef Ns_ntt_tab_ssdu_ie_mx_entry
#undef Ns_ntt_tab_ssdu_entry

#define Ns_ntt_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_ntt_end_table_or_function		}

#define Ns_ntt_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_ntt_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_ntt_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_ntt
#	define Message_header_ssdu_ie_ntt		Ns_ntt_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_ntt_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_ntt_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_ntt_ssdu ()
{
    uchar   i_pic;

#	include "ntt.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/
