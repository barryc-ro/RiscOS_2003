
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_indx.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- Implements the specific options and parameters
 * 		  of the NETWORK SIGNALLING layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* TABLES ID FOR THE LISTS OF VALID IE FIELDS VALUES (NET_IE.NTT) */

					/* Table ID */

#define NTT_T_ASSIGN				1			/* assign */
#define NTT_T_BAND					2			/* band */
#define NTT_T_C_C					3			/* cause class */
#define NTT_T_CALL_STATE			4			/* call state */
#define NTT_T_CALLING_NB_PRES		5			/* calling number presentation indicator */
#define NTT_T_CHAN_NUMBER			6			/* channel number */
#define NTT_T_CHAN_PREF_EXCL		7			/* channel prefferred or exclusive */
#define NTT_T_CHAN_TYPE				8			/* channel type */
#define NTT_T_CODING_STD			9			/* coding standard */
#define NTT_T_CONGEST_LEVEL			10			/* congestion level */
#define NTT_T_D_CHAN				11			/* D channel */
#define NTT_T_DATA_BIT				12			/* data bit format */
#define NTT_T_DUPLEX				13			/* dulpex mode */
#define NTT_T_FAC_COMP_TAG			14			/* standard facilities component tag */
#define NTT_T_FAC_ERROR_VAL			15			/* standard facilities error value */
#define NTT_T_FAC_PREFERRED			16			/* standard facilities preferred octet */
#define NTT_T_FAC_SERVICE			17			/* standard facilities service id */
#define NTT_T_FLOW_CONTROL_RX		18			/* flow control Rx */
#define NTT_T_FLOW_CONTROL_TX		19			/* flow control Tx */
#define NTT_T_HEADER				20			/* Header */
#define NTT_T_HOOK_VAL				21			/* hook value */
#define NTT_T_INT_TYPE				22			/* interface type */
#define NTT_T_INTER_RATE			23			/* interface rate */
#define NTT_T_LAYER_ID				24			/* layer identifier */
#define NTT_T_LLI					25			/* logical link identifier */
#define NTT_T_LOCATION				26			/* location */
#define NTT_T_MODEM					27			/* modem type */
#define NTT_T_MSG_TYPE				28			/* message type */
#define NTT_T_MULTI_FRAME			29			/* multi_frame */
#define NTT_T_NEGOTIATION			30			/* negotiation */
#define NTT_T_NET_ID_PLAN			31			/* network identifier plan */
#define NTT_T_NET_ID_TYPE			32			/* network identifier type */
#define NTT_T_NIC_RX				33			/* network independent clock Reception */
#define NTT_T_NIC_TX				34			/* network independent clock Transmission */
#define NTT_T_NOTIF_IND_DESCR		35			/* Notification indicator */
#define NTT_T_OP_MODE				36          /* op mode */
#define NTT_T_OUT_BAND_NEG			37			/* out band neg */
#define NTT_T_PARITY			 	38			/* parity */
#define NTT_T_PROGRESS_DESCRIPTION	39			/* Progress description */
#define NTT_T_PROGRESS_LOCATION		40			/* Progress location */
#define NTT_T_PROTOCOL_ID_LLC_1		41			/* layer 1 protocol identifier for LLC */
#define NTT_T_PROTOCOL_ID_LLC_2		42			/* layer 2 protocol identifier in LLC */
#define NTT_T_PROTOCOL_ID_LLC_3		43			/* layer 3 protocol identifier in LLC */
#define NTT_T_RECOMMENDATION		44			/* recommendation */
#define NTT_T_RESTART_IND_CLASS		45			/* restart indicator class */
#define NTT_T_SCREEN_IND			46			/* screening indicator */
#define NTT_T_SIGNAL_VAL			47			/* signal value */
#define NTT_T_STATUS_CONDITION		48			/* status / condition */
#define NTT_T_STATUS_IND			49			/* status indication */
#define NTT_T_STOP_BIT				50			/* stop bit format */
#define NTT_T_STRUCTURE				51			/* structure */
#define NTT_T_SUB_ADD_IND			52			/* sub-address indicator */
#define NTT_T_SUB_ADD_TYPE			53			/* sub-address type */
#define NTT_T_SYN_ASYN				54			/* synchronous/asynchronous */
#define NTT_T_TELESERVICE_CCITT		55			/* ccitt teleservice */
#define NTT_T_TELESERVICE_EXT		56			/* ccitt teleservice */
#define NTT_T_TRF_CAP_BC			57			/* information transfer capability */
#define NTT_T_TRF_CAP_LLC			58			/* information transfer capability */
#define NTT_T_TRF_MODE				59			/* information transfer mode */
#define NTT_T_USER_RATE				60			/* user rate */
#define NTT_T_UUI_PROTOCOL_DISCR	61			/* user to user protocol discriminator */
#define	NTT_T_NB_MAP				62			/* nb map */
#define	NTT_T_CHAN_INT				63			/* interface ID */

					/* table of tables id */

#define NTT_TX_C_V					1			/* cause value according to the cause class */
#define NTT_TX_CHAN_SEL				2			/* channel selection according to the rate interface */
#define NTT_TX_PROTOCOL_ID_BC		3			/* transfer rate according to the transfert mode */
#define NTT_TX_TRF_RATE				4			/* BC protocol ID according to the layer ID */


							/* TIMER MANAGEMENT */

						/*  User and network side */

		 /* Used to know the timer level in the TI_CALL timer table */

#define NTT_T300					0
#define NTT_T301					1
#define NTT_T303					2
#define NTT_T305					3
#define NTT_T306					4
#define NTT_T307					5
#define NTT_T308					6
#define NTT_T310					7
#define NTT_T312					8
#define NTT_T313					9
#define NTT_T318					10
#define NTT_T319					11
#define NTT_T322					12
#define NTT_T3JA					13

#if NS_T309 == ON
#	define NTT_T309					14
#endif

/*EOF*/
