
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_err.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         ntt_error_handler - implements the centralized processing of the
 *		   error handling procedure  for error conditions detected
 *		   by the Network Signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

CONST_ARRAY	uchar NTT_TABLE_ERROR [] = {
	 Set_err ( ERR_N_CALL_REF_GLOBAL,				NON_FATAL),

	 Set_err ( ERR_N_CALL_REF_LGTH,					FATAL),
	 Set_err ( ERR_N_CALL_REF_PAD,					FATAL),
	 Set_err ( ERR_N_CALL_REF_UNKNOWN,				FATAL),
	 Set_err ( ERR_N_CALL_REF_ALREADY_KNOWN,		FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG,					FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_MULTIPOINT,		FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_POINT_TO_POINT,	FATAL),
	 Set_err ( ERR_N_CALL_REF_FLAG_NO_CALL,			FATAL),
	 Set_err ( ERR_N_CALL_REF_DUMMY,				NON_FATAL),

	 Set_err ( ERR_N_STATUS_CALL_REF,				NON_FATAL),

	 Set_err ( ERR_N_SPDU_TYPE,						FATAL),
	 Set_err ( ERR_N_SPDU_UNEXPECTED,				FATAL),
	 Set_err ( ERR_N_SPDU_LGTH,						FATAL),

	 Set_err ( ERR_N_IE_UNKNOWN,					NON_FATAL),
	 Set_err ( ERR_N_IE_M_MISSING,					FATAL),
	 Set_err ( ERR_N_IE_M_TOO_SHORT,				FATAL),
	 Set_err ( ERR_N_IE_M_TOO_LONG,					FATAL),
	 Set_err ( ERR_N_IE_O_LGTH,						NON_FATAL),
	 Set_err ( ERR_N_IE_SO_TYPE,					NON_FATAL),
	 Set_err ( ERR_N_IE_M_CONTENT,					FATAL),
	 Set_err ( ERR_N_IE_O_CONTENT,					NON_FATAL),
	 Set_err ( ERR_N_IE_OUT_OF_SEQUENCE,			NON_FATAL),
	 Set_err ( ERR_N_IE_REPEATED,					NON_FATAL),
	 Set_err ( ERR_N_NAI,							FATAL),
	 Set_err ( ERR_N_CES,							FATAL),
	 Set_err ( ERR_N_BROADCAST,						FATAL),

	 Set_err ( ERR_I_TE_VAL,						FATAL),

	 Set_err ( ERR_U_SSDU_CODE,						FATAL),
	 Set_err ( ERR_U_PARAM_VAL,						FATAL),
	 Set_err ( ERR_U_MANDATORY_PARAM_MISSING,		FATAL),
	 Set_err ( ERR_U_PARAM_TYPE,					FATAL),
	 Set_err ( ERR_U_PARAM_LGTH,					FATAL),
	 Set_err ( ERR_U_SSDU_UNEXPECTED,				FATAL),
	 Set_err ( ERR_U_NAI,							FATAL),
	 Set_err ( ERR_U_NO_CALL_CTX_AVAILABLE,			FATAL),
	 Set_err ( ERR_U_CALL_CONN_ID_ALREADY_USED,		FATAL),
	 Set_err ( ERR_U_PRIMITIVE_NOT_IMPLEMENTED, 	FATAL),
	 Set_err ( ERR_U_CALL_CONN_ID_UNKNOWN,			FATAL),
	 Set_err ( ERR_U_NON_EXISTENT_CALL,				FATAL),
	 Set_err ( ERR_U_CONGESTION_BUSY,				FATAL),
	 Set_err ( ERR_U_SSDU_IE_INSTANCE_OVERFLOW,		FATAL),

	 Set_err ( ERR_U_USER_FAC_PROTOCOL,				IGNORED),
	 Set_err ( ERR_U_UUI_PROTOCOL,					IGNORED),
	 Set_err ( ERR_U_NO_TIMER_AVAILABLE,			FATAL),

#	if NS_SEGMENTATION == ON
		Set_err (ERR_N_REASSEMBLY,					FATAL),
		Set_err (ERR_N_SEGMENTER,					FATAL),

#	endif

};

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             ntt_error_handler - implements the centralized procesing of an
				 exception condition.

Usage            uchar ntt_error_handler ();


Description     implements the processing of an error detected in a
				message coming from the network	or in a primitive
				comming from the layer 4 signalling (call processing).

Return value    returns action code =  CONTINUE  continue processing,
									=  STOP      stop processing.

Common constants and declarations   : ns.h

Common objects : call current context

*--------------------------------------------------------------------------*/

uchar ntt_error_handler ()
{
	uchar 	i;												/* loop index */
	uchar 	error_code;										/* error code */
	uchar 	error_diagnostic_1;								/* diagnostics 1 */
	uchar 	error_diagnostic_2;								/* diagnostics 2 */

		/* if no error ---> continue */

	if (nb_error == 0) return (CONTINUE);


		/*
		   Search fatal error code -
		   Cases Error Call Reference Global or Dummy must be treated first
		*/

	for (i = 0; i < nb_error; i++) {

		if (Error_stack_code (i) == ERR_N_CALL_REF_GLOBAL) {

			switch (spdu_id) {

				case RESTART :
				case RESTART_ACK :
				case STATUS :
					continue;

				default :
					break;

			}

			break;

		} else if (Error_stack_code (i) == ERR_N_CALL_REF_DUMMY) {

			if (spdu_id == INFO) {
				continue;

			} else {

				break;
			}

		}

		if (Error_stack_level (i) == FATAL) break;
	}

		/*
		   If not found process the first non-fatal error.
		*/

	if (i == nb_error) {

		if (((Error_stack_code (0) == ERR_N_CALL_REF_GLOBAL) ||
			(Error_stack_code (0) == ERR_N_CALL_REF_DUMMY))
			&&
			(nb_error > 1)) {
			i = 1;

		} else {

			i = 0;
		}

	}

	error_code			= Error_stack_code (i);
	error_diagnostic_1	= Error_stack_diagnostic_1 (i);
	error_diagnostic_2	= Error_stack_diagnostic_2 (i);

		/* reset error count */

	nb_error			= 0;

		/* dispatch according to the origination message */

	switch (R_msg_from) {

	/*	---------------------------------------------------------
		|														|
		|		from the D channel side (Data Link entity)		|
		|														|
		---------------------------------------------------------	*/

		case ENT_DL:
		case ENT_DL_D :

			switch (error_code) {

					/* -0- Message received on a broadcast connection */

				case ERR_N_BROADCAST :
					return (STOP);

					/* -1- Protocol discriminator error :
						processed in the ns_rcv function,
						the message is ignored.


					   -2- Message too short :
						When a message is received that is too short to
						contain a complete message type information element,
						that message shall be ignored.
					*/

				case ERR_N_SPDU_LGTH :
					return (STOP);

					/* -3- Call reference error :

						-3.1- Invalid call reference format :

						   a) If the call reference information element octet
							  1 bits 1 through 4 indicates a length greater
							  than the length supported by the receiving
							  equipement, then the message shall be ignored.
					*/

				case ERR_N_CALL_REF_LGTH :
					return (STOP);

						/*
						   b) If the call reference information element octet
							  1 bits 5 to 8 are not null, then the message
							  shall be ignored.
						*/

				case ERR_N_CALL_REF_PAD :
					return (STOP);

						/* -3.2- call reference procedural error :

							a) Whenever any message except SEPUP, RELEASE,
							   RELEASE COMPLETE, STATUS or RESUME is received
							   specifying a call reference which is not
							   recognized as relating to a call in progress,
							   clearing is initiated by sending a RELEASE
							   COMPLETE with cause #81 "invalid call
							   reference value", specifying the call reference
							   in the received message.
						*/

				case ERR_N_STATUS_CALL_REF :
				case ERR_N_CALL_REF_UNKNOWN :

					switch (spdu_id) {

							/* b) When a RELEASE message is received that
								  specified a call reference that is not
								  recognized as relating to an active call
								  or to a call in progress, a RELEASE COMPLETE
								  message is return specifying the call
								  reference in the received message.
							*/

						case REL :
							send_release (REL_COMP,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   DIAGNOSTIC_NIL);
							return (STOP);

							/* c) When a RELEASE COMPLETE message is received
							   specifying a call reference which is not
							   recognised as relating to an active call
							   or to a call in progress no action should be
							   taken.
							*/

						case REL_COMP :
							return (STOP);

						case STATUS :

							if (I_call_state_val != STATE_NULL_0) {
								send_release (REL_COMP,C_C_PROTOCOL_ERROR,
													   C_V_MESSAGE_NOT_COMPATIBLE_101,
													   DIAGNOSTIC_NIL);
							}
							return (STOP);

						default :
							send_release (REL,	C_C_INVALID_MESSAGE,
												C_V_INVALID_CALL_REF_81,
												DIAGNOSTIC_NIL);
							return (STOP);

					}

							/* d) When a SETUP, or a RESUME
								  message is received specifying a call
								  reference which is not recognised as
								  relating to an active call or to a call
								  in progress, and with a call reference
								  flag incorrectly set to "1", this
								  message shall be ignored.
							*/

#			if EQUIPMENT == TE
				case ERR_N_CALL_REF_FLAG  :

					switch (spdu_id) {

						case SETUP :
						case RES :
							return (STOP);

						default :
							send_release (REL_COMP,C_C_INVALID_MESSAGE,
												   C_V_INVALID_CALL_REF_81,
												   DIAGNOSTIC_NIL);
							return (STOP);

					}

#			else

				case ERR_N_CALL_REF_FLAG_MULTIPOINT :
					send_release (REL_COMP, C_C_PROTOCOL_ERROR,
											C_V_MESSAGE_NOT_COMPATIBLE_101,
											error_diagnostic_1);
					return (STOP);

				case ERR_N_CALL_REF_FLAG_POINT_TO_POINT :
					return (STOP);

				case ERR_N_CALL_REF_FLAG_NO_CALL :
					send_release (REL_COMP, C_C_INVALID_MESSAGE,
											C_V_INVALID_CALL_REF_81,
											DIAGNOSTIC_NIL);
					return (STOP);

#			endif

							/* e) When a SETUP message is received specifying
								  a call reference which is recognized as
								  relating to an active call or to a call in
								  progress, this setup message shall be
								  ignored.
							*/

				case ERR_N_CALL_REF_ALREADY_KNOWN :

					if (spdu_id == SETUP) {
						return (STOP);

					} else {

						return (CONTINUE);
					}

							/* f) When a message, except RESTART, RESTART ACK
								  or STATUS, is received using the global call
								  reference, no action should be taken and a
								  status message with cause #81 is sent.
							*/

				case ERR_N_CALL_REF_GLOBAL :

					switch (spdu_id) {

						case RESTART :
						case RESTART_ACK :
						case STATUS :
							return (CONTINUE);

						default :
							ns_fatal_error_flag = ON;
							send_state (C_C_INVALID_MESSAGE,
										C_V_INVALID_CALL_REF_81,
										DIAGNOSTIC_NIL);
							return (STOP);
					}

						/*
							g) When a message, except INFO is received using
								the dummy call reference, no action should be
								taken
						*/

				case ERR_N_CALL_REF_DUMMY :

					switch (spdu_id) {

						case INFO :
							return (CONTINUE);

						default :
							return (STOP);
					}

					/* -4- Message type or message sequence error :

						Whenever an unexpected message, except RELEASE or
						RELEASE COMPLETE or unrecognized message is received
						in any state other than the Null state, a status
						message shall be returned with a cause #98
						" message not compatible with the call state or
						message type non-existent or not implemented.
					*/

				case ERR_N_SPDU_TYPE :
				case ERR_N_SPDU_UNEXPECTED :

					switch (spdu_id) {

							/* process if RELEASE, RELEASE COMPLETE */

						case REL :
							send_release (REL_COMP, C_C_PROTOCOL_ERROR,
													C_V_PROTOCOL_ERROR_UNSPECIFIED_111,
													DIAGNOSTIC_NIL);
							return (STOP);

						case REL_COMP :
							call_clear ();
							return (STOP);


						case USER_INFO :
							return (STOP);

						default :
							send_state (C_C_PROTOCOL_ERROR,
										C_V_MESSAGE_STATE_INCONSISTENCY_98,
										spdu_id);
							return (STOP);

					}


					/* -5- General information element errors :

						-5.1- information element out of sequence :

						-5.2- duplicated information element :
					*/


				case ERR_N_IE_OUT_OF_SEQUENCE :
					return (CONTINUE);

				case ERR_N_IE_REPEATED :
					return (CONTINUE);

				case ERR_N_IE_SO_TYPE :
					send_state (C_C_PROTOCOL_ERROR,
								C_V_NON_EXISTENT_IE_99,
								error_diagnostic_1);
					return (CONTINUE);

					/* -6- Mandatory information element error :

						-6.1- Mandatory information element missing :

							When a message other than SETUP, DISCONNECT,
							RELEASE or RELEASE COMPLETE is received which has
							one or more mandatory information elements missing,
							no action should occur. A status message is then
							returned with cause #96 "mandatory information
							element is missing".

							When a RELEASE COMPLETE message is received with
							a cause IE missing it will be assumed that a
							REALEASE COMPLETE message was received with
							cause #31.

							When a SETUP or RELEASE message is received with
							a cause IE missing it will be assumed that a
							RELEASE COMPLETE message is sent with cause #96.

							When a DISCONNECT message is received with
							a cause IE missing it will be assumed that a
							RELEASE message is sent with cause #96 and the
							received message is transmitted with cause #31.

					*/

				case ERR_N_IE_M_MISSING :

					switch (spdu_id) {

						case REL_COMP :

							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_UNSPECIFIED_31, P_NIL);
							}
							return (CONTINUE);

						case SETUP :
						case REL :
							send_release (REL_COMP,C_C_PROTOCOL_ERROR,
												   C_V_MANDATORY_IE_MISSING_96,
												   error_diagnostic_1); 	/* diag is the IE id */
							return (STOP);

						case DISC :

							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_UNSPECIFIED_31, P_NIL);
								Call_disc_m_ie_error = error_code;
							}
							return (CONTINUE);

						default :
							send_state (C_C_PROTOCOL_ERROR,
										C_V_MANDATORY_IE_MISSING_96,
										error_diagnostic_1); 	/* diag is the IE id */
							return (STOP);
					}


						/* -6.2- Mandatory information element content
								 error :

								 When a message other than SETUP, DISCONNECT,
								 RELEASE or RELEASE COMPLETE is received
								 which has one or more mandatory information
								 elements with invalid content, no action
								 should be taken on the message and no state
								 change should occur.
								 A STATUS message is then returned with cause
								 #100 "invalid information element contents".

								 When in a SETUP or in a RELEASE message,
								 a mandatory IE has invalid content, the
								 message shall be ignored and a RELEASE is
								 then returned with cause #100
								 "invalid information element contents".

								 When in a RELEASE COMPLETE, a mandatory IE
								 has an invalid content, no message is sent
								 back and the call return to the NULL state.
						*/

				case ERR_N_IE_M_CONTENT :
				case ERR_N_IE_M_TOO_LONG :

					switch (spdu_id) {

						case SETUP :
						case REL :
							send_release (REL_COMP,C_C_PROTOCOL_ERROR,
												   C_V_INVALID_IE_CONTENT_100,
												   error_diagnostic_1); /* diag is the IE id */
							return (STOP);

						case DISC :

							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_UNSPECIFIED_31, P_NIL);
								Call_disc_m_ie_error = error_code;
							}
							return (CONTINUE);

						case REL_COMP :

							if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
								set_i_cause (C_C_NORMAL_EVENT,
											 C_V_NORMAL_UNSPECIFIED_31, P_NIL);
							}
							return (CONTINUE);

						default :
							send_state (C_C_PROTOCOL_ERROR,
										C_V_INVALID_IE_CONTENT_100,
										error_diagnostic_1); /* diag is the IE id */
							return (STOP);
					}


					/* -7- Non mandatory (optional) information element
						   errors :

						   -7.1- Unrecognized information element :

								 When a message is received with an or more
								 unrecognized information elements, the message
								 and the valid elements shall be processed.
								 The user shall send a STATUS message with a
								 cause "unknow or out of order IE" except for
								 clearing messages.
					 */

				case ERR_N_IE_UNKNOWN :

					switch (spdu_id) {

						case REL_COMP :
							break;

						case REL :
							send_release (REL_COMP, C_C_PROTOCOL_ERROR,
												   C_V_NON_EXISTENT_IE_99,
												   error_diagnostic_1); /* diag is the IE id */
							return (STOP);

						case DISC :
							send_release (REL, C_C_PROTOCOL_ERROR,
												   C_V_NON_EXISTENT_IE_99,
												   error_diagnostic_1); /* diag is the IE id */
							return (STOP);

						default :
							send_state (C_C_PROTOCOL_ERROR,
										C_V_NON_EXISTENT_IE_99,
										error_diagnostic_1); /* diag is the IE id */
					}
					return (CONTINUE);

						/* -7.2- Non-mandatory information element
								 content error :
						   -7.3- Non mandatory information element length
								 error :

								 same as 7.1 except the cause which is
								 "invalid content".
						*/

				case ERR_N_IE_O_CONTENT :
				case ERR_N_IE_O_LGTH :
					send_state (C_C_PROTOCOL_ERROR,
								C_V_INVALID_IE_CONTENT_100,
								error_diagnostic_1); /* diag is the IE id */
					return (CONTINUE);

				case ERR_N_IE_M_TOO_SHORT :
				case ERR_N_NAI :
				case ERR_N_CES :
				case ERR_I_TE_VAL :
					return (STOP);

				default :
					Trap (TRAP_NS_ERR_UNEXPECTED, "ntt_err");

			}
			return (STOP);

	/*	-------------------------------------------------------------
		|                                                           |
		|	  from the Call Control side (User entity)   			|
		|                                                           |
		-------------------------------------------------------------	*/

		default :
			send_err_to_user (error_code, error_diagnostic_1, error_diagnostic_2, R_msg_from);

			switch (ssdu_id) {

				case NS_CONN_RQ :
				case NS_RESUME_RQ :
					call_clear ();
					break;

				default :
					break;
			}
			return (STOP);

	/*	-------------------------------------------------------------
		|                                                           |
		|	  from the Management NS (MNS entity)   				|
		|                                                           |
		-------------------------------------------------------------	*/

		case ENT_MNS :
			ns_retransmit (MNS_ERR_IN, ENT_MNS);
			return (STOP);
	}

}

/*EOF*/
