
/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - mp_ie.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	ntt_bc_4ab_spdu			(Void_parm);
	uchar	ntt_bc_4b_spdu			(Void_parm);
	uchar	ntt_bc_5_spdu			(Void_parm);
	uchar	ntt_bc_6_spdu			(Void_parm);
	uchar	ntt_bc_7_spdu			(Void_parm);
	uchar	ntt_spdu_calling_pres	(Void_parm);
	uchar	ntt_cause_spdu			(Void_parm);
	uchar	ntt_cause_3a_spdu		(Void_parm);
	uchar	ntt_mode_circuit		(Void_parm);
	uchar	ntt_chan_id_spdu		(Void_parm);
	uchar	ntt_fac_spdu			(Void_parm);
	uchar	ntt_fac_invoke_spdu		(Void_parm);
	uchar	ntt_fac_chk_seq_spdu	(Void_parm);
	uchar	ntt_store_2lgth_spdu	(Void_parm);
	uchar	ntt_store_lgth_spdu		(Void_parm);
	uchar	ntt_check_feature_act	(Void_parm);
	uchar	ntt_check_feature_ind	(Void_parm);
	uchar	ntt_llc_4ab_spdu		(Void_parm);
	uchar	ntt_llc_4b_spdu			(Void_parm);
	uchar	ntt_llc_5_spdu			(Void_parm);
	uchar	ntt_llc_6_spdu			(Void_parm);
	uchar	ntt_llc_7_spdu			(Void_parm);

#	if NS_SPF_FACILITY == ON
		uchar	ntt_spf_fac_spdu	(Void_parm);		/* this function interpretes octets 3.2 */
#	endif
	uchar	ntt_restart_spdu		(Void_parm);

#endif

			/* ---------- Advice of Charge (ADVICE_CHARGE) */

D_START	(NTT_ADVICE_CHARGE_P)
	D_VAL	(CHARGING_TYPE)
	D_PAD	(RESERVED)
	D_EXT_1	(OCTET_3)
	D_TEXT	(CHARGING_DATA)
D_END		(ADVICE_CHARGE_E)

START	(NTT_ADVICE_CHARGE_P)
	VAL		(0,4,TOTAL_CHARGE,	&i_advice_charge[0].charge_type)
	PAD		(4,3)
	EXT_1	()
	TEXT	(IA5, DIGIT, &i_advice_charge[0].data_lgth, (uchar **)&i_advice_charge[0].p_data)
END			(0)

			/* ---------- Bearer capability (BC) */

D_START	(NTT_BC_P)
	D_VAL				(CODING_STD)
	D_TABL				(TRF_CAP)
	D_EXT_1				(_3)
	D_TABL				(TRF_MODE)
	D_TABX				(TRF_RATE)
	D_FUNCTION			(FUNCTION_4ab)

	D_IF_VAL			(NOT_DEFAULT_4ab)
		D_EXT_0_1		(_4)
		D_TABL			(STRUCT)
		D_VAL			(CONFIG)
		D_VAL			(EST)
		D_FUNCTION		(FUNCTION_4b)

		D_IF_VAL		(NOT_DEFAULT_4b)
			D_EXT_0_1   (_4A)
			D_VAL		(SYMMETRY)
			D_TABX		(DEST_RATE)
		D_END_IF		(_4b)

	D_END_IF			(_4ab)

	D_EXT_1				(OCTETS_4)
	D_OPTIONAL_OCTET	(_5ABCD_6_7)
	D_FUNCTION			(FUNCTION_5)

	D_IF_VAL			(OCTET_5_IF)

		D_VAL			(OCTET_5_LAYER_ID)
		D_TABX			(OCTET_5_PROTOCOL_ID)


			/* V110 */

		D_IF_VAL		(V110)
			D_EXT_0_1	(_5)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_EXT_0_1	(V110_5A)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(V110_PAD_5B)
			D_EXT_0_1	(V110_5B)
			D_TABL	 	(V110_STOP_BIT)
			D_TABL	 	(V110_DATA_BIT)
			D_TABL	 	(V110_PARITY)
			D_EXT_0_1	(V110_5C)
			D_TABL	 	(V110_DUPLEX)
			D_TABL	 	(V110_MODEM)
		D_END_IF		(ENDIF_V110)

		D_EXT_1			(END_5)
	D_END_IF			(ENDIF_OCTET_5)
	D_FUNCTION			(OCTET_6)

	D_IF_VAL			(OCTET_6_PR)
		D_VAL			(L_ID_2)
		D_TABX			(PROTOCOL_ID_2)
		D_EXT_1			(_6)
	D_END_IF			(_6_PR)

	D_FUNCTION			(OCTET_7)

	D_IF_VAL			(OCTET_7_PR)
		D_VAL			(L_ID_3)
		D_TABX			(PROTOCOL_ID_3)
		D_EXT_1			(_7)
	D_END_IF			(_7_PR)
D_END					(BC_E)

START	(NTT_BC_P)
		VAL		(5,2,CODING_STD_CCITT,			&i_bc[0].coding_std)
		TABL	(0,5,NTT_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
		EXT_1   ()
		TABL	(5,2,NTT_T_TRF_MODE,			&i_bc[0].trf_mode)
		TABX	(0,5,NTT_TX_TRF_RATE,			&i_bc[0].trf_mode,	&i_bc[0].trf_rate)
		FUNCTION(ntt_bc_4ab_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1	()
			TABL	(4,3,NTT_T_STRUCTURE,		&i_bc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,	&i_bc[0].config)
			VAL		(0,2,EST_DEMAND,			&i_bc[0].est)
			FUNCTION(ntt_bc_4b_spdu)

			IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1 ()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_bc[0].symmetry)
				TABX	(0,5,NTT_TX_TRF_RATE,	&i_bc[0].trf_mode,	&i_bc[0].dest_rate)
			END_IF		()

		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		FUNCTION	(ntt_bc_5_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,			&i_bc[0].layer_id_1)
			TABX	(0,5,NTT_TX_PROTOCOL_ID_BC,	&i_bc[0].layer_id_1,		&i_bc[0].protocol_id_1)

				/* V110 */

			IF_VAL  	(I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1 ()
				TABL	(6,1,NTT_T_SYN_ASYN,			&i_bc[0].syn_asyn)
				TABL	(5,1,NTT_T_NEGOTIATION,			&i_bc[0].negotiation)
				TABL	(0,5,NTT_T_USER_RATE,			&i_bc[0].user_rate)
				EXT_0_1 ()
				TABL	(5,2,NTT_T_INTER_RATE,			&i_bc[0].inter_rate)
				TABL	(4,1,NTT_T_NIC_TX,				&i_bc[0].tx_nic)
				TABL	(3,1,NTT_T_NIC_RX,				&i_bc[0].rx_nic)
				TABL	(2,1,NTT_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
				TABL	(1,1,NTT_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,NTT_T_STOP_BIT,			&i_bc[0].stop_bit)
				TABL	(3,2,NTT_T_DATA_BIT,			&i_bc[0].data_bit)
				TABL	(0,3,NTT_T_PARITY,				&i_bc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,NTT_T_DUPLEX,				&i_bc[0].duplex)
				TABL	(0,6,NTT_T_MODEM,				&i_bc[0].modem)
			END_IF  	()
			EXT_1   ()

		END_IF		()

		FUNCTION(ntt_bc_6_spdu)

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_2,					&i_bc[0].layer_id_2)
			TABX	(0,5,NTT_TX_PROTOCOL_ID_BC,			&i_bc[0].layer_id_2,		&i_bc[0].protocol_id_2)
			EXT_1   ()
		END_IF		()

		FUNCTION(ntt_bc_7_spdu)

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_3,					&i_bc[0].layer_id_3)
			TABX	(0,5,NTT_TX_PROTOCOL_ID_BC,			&i_bc[0].layer_id_3,		&i_bc[0].protocol_id_3)
			EXT_1   ()
		END_IF		()

END (0)

			/* ---------- Call_identity (CALL_ID) */

D_START	(NTT_CALL_ID_P)
	D_TEXT  (CALL_ID_VAL)
D_END   (CALL_ID_E)

START	(NTT_CALL_ID_P)
	TEXT	(IA5, ANY_CHAR, &i_call_id[0].lgth, (uchar **)&i_call_id[0].p_val)
END	 (0)

			/* ---------- Call state (CALL_STATE) */

D_START	(NTT_CALL_STATE_P)
	D_TABL	  (CODING_STD)
	D_TABL	  (STATE_VAL)
	D_END_OCTET (_3)
D_END   (CALL_STATE_E)

START	(NTT_CALL_STATE_P)
	TABL		(6,2,NTT_T_CODING_STD,		&i_call_state[0].coding_std)
	TABL		(0,6,NTT_T_CALL_STATE,		&i_call_state[0].val)
	END_OCTET   ()
END	 (0)

			/* ---------- Called party number (CALLED_NB) */

D_START	(NTT_CALLED_NB_P)
		D_VAL	(TYPE)
		D_VAL	(PLAN_ID)
		D_EXT_1 (_3)
		D_TEXT  (DIGIT_)
D_END   (CALLED_NB_E)

START	(NTT_CALLED_NB_P)
		VAL		(4,3,NB_UNKNOWN,		&i_called_nb[0].nb_type)
		VAL		(0,4,PLAN_UNKNOWN,		&i_called_nb[0].plan_id)
		EXT_1   ()
		TEXT	(IA5, ANY_CHAR, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END	 (0)

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(NTT_CALLED_SUB_ADD_P)
		D_TABL			(TYPE)
		D_TABL  		(IND)
		D_PAD   		(NS_PAD_3)
		D_EXT_1 		(_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL		(INFO_SUB_ADD_F)
			D_END_OCTET	(INFO_SUB_ADD_5)
			D_TEXT  	(INFO_OSI)
		D_ELSE			(NOT_OSI)
			D_TEXT  	(INFO_NOT_OSI)
		D_END_IF		(TYPE_SUB_ADD)

D_END   (CALLED_SUB_ADD_Q)

START	(NTT_CALLED_SUB_ADD_P)
		TABL	(4,3,NTT_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
		TABL	(3,1,NTT_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_called_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Calling party number (CALLING_NB) */

D_START	(NTT_CALLING_NB_P)
		D_VAL			(TYPE)
		D_VAL			(PLAN_ID)
		D_EXT_0_1		(_3)
		D_TABL			(PRESENTATION)
		D_PAD			(NS_PAD_3A)
		D_TABL			(SCREEN_IND)
		D_EXT_1			(_3A)
		D_FUNCTION		(IS_TEXT_ALLOWED)
		D_OPTIONAL_OCTET(_TEXT_)

		D_IF_VAL		(ALLOWED)
			D_TEXT		(DIGIT_)
		D_END_IF		(WAS_ALLOWED)
D_END   (CALLING_NB_E)

START	(NTT_CALLING_NB_P)
		VAL				(4,3,NB_UNKNOWN,			&i_calling_nb[0].nb_type)
		VAL				(0,4,PLAN_UNKNOWN,			&i_calling_nb[0].plan_id)
		EXT_0_1 		()
		TABL			(5,2,NTT_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
		PAD				(2,3)
		TABL			(0,2,NTT_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
		EXT_1   		()
		FUNCTION		(ntt_spdu_calling_pres)
		OPTIONAL_OCTET	()

		IF_VAL			(N_IF, &ie_if_flag, EQ, ON)
			TEXT		(IA5,DIGIT, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
		END_IF			()
END		(0)

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(NTT_CALLING_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CALLING_SUB_ADD_E)

START	(NTT_CALLING_SUB_ADD_P)
		TABL	(4,3,NTT_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		TABL	(3,1,NTT_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_calling_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Cause (CAUSE) */

D_START	(NTT_CAUSE_P)
		D_TABL	  (CODING_STD)
		D_PAD	   (NS_PAD_3)
		D_TABL	  (LOCATION)

		D_FUNCTION(CAUSE_3A)
		D_IF_VAL  (NOT_RECOM_Q931)
			D_EXT_0_1	(_3)
			D_TABL		(RECOMMENDATION)
		D_END_IF	(Q931E)

		D_EXT_1	 (_3A)

		D_TABL	  (C_CLASS)
		D_TABX	  (C_VAL)
		D_EXT_1	 (_4)
D_END   (CAUSE_E_A)

START	(NTT_CAUSE_P)
		TABL	(5,2,NTT_T_CODING_STD,		&i_cause[0].coding_std)
		PAD		(4,1)
		TABL	(0,4,NTT_T_LOCATION,		&i_cause[0].cause_loc)

		FUNCTION(ntt_cause_3a_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(0,7,NTT_T_RECOMMENDATION,  &i_cause[0].recommend)
		END_IF	()

		EXT_1   ()

		TABL	(4,3,NTT_T_C_C,				&i_cause[0].cause_class)
		TABX	(0,4,NTT_TX_C_V,			&i_cause[0].cause_class,  &i_cause[0].cause_val)
		EXT_1   ()
END	 (ntt_cause_spdu)

D_START	(NTT_DIAG_P)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_P)
	TEXT	(BINARY, ANY_OCTET, &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

D_START	(NTT_DIAG_CHAN_TYPE)
	D_PAD	(PADDING)
	D_TABL	(CHAN_TYPE)
	D_EXT_1	(DIAG)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_CHAN_TYPE)
	PAD		(4,3)
	TABL	(0,4,NTT_T_CHAN_TYPE,		&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_CHAN_NB)
	D_TABL		(CHAN_NUM)
	D_END_OCTET	(END_DIAG)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_CHAN_NB)
	TABL		(0,8,NTT_T_CHAN_NUMBER,	&i_cause[0].tmp)
	END_OCTET	()
END		(0)

D_START	(NTT_DIAG_CAUSE)
	D_TABL		(C_CLASS)
	D_TABX		(C_VAL)
	D_END_OCTET	(END_DIAG)
D_END   (CAUSE_E)

START	(NTT_DIAG_CAUSE)
	TABL		(4,3,NTT_T_C_C,			&i_cause[0].tmp)
	TABX		(0,4,NTT_TX_C_V,		&i_cause[0].tmp,  &i_cause[0].tmp)
	END_OCTET	()
END		(0)

D_START	(NTT_DIAG_TRF_CAP)
	D_PAD		(PADDING)
	D_TABL		(TRF_CAP)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_TABL		(TRF_CAP_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_TRF_CAP)
	PAD		(5,2)
	TABL	(0,5,NTT_T_TRF_CAP_BC,			&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(5,2)
	TABL	(0,5,NTT_T_TRF_CAP_BC,			&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_TRF_MODE)
	D_PAD		(PADDING)
	D_TABL		(TRF_MODE)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_TABL		(TRF_MODE_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_TRF_MODE)
	PAD		(0,5)
	TABL	(5,2,NTT_T_TRF_MODE,			&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(0,5)
	TABL	(5,2,NTT_T_TRF_MODE,			&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_TRF_RATE)
	D_PAD		(PADDING)
	D_TABX		(TRF_RATE)
	D_EXT_0_1	(DIAG)
	D_FUNCTION	(MODE_CIRC)
	D_PAD		(PADDING_2)
	D_TABX		(TRF_RATE_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_TRF_RATE)
	PAD		(5,2)
	TABX	(0,5,NTT_TX_TRF_RATE,	&i_cause[0].tmp,		&i_cause[0].tmp)
	EXT_0_1	()
	FUNCTION(ntt_mode_circuit)
	PAD		(5,2)
	TABX	(0,5,NTT_TX_TRF_RATE,	&i_cause[0].tmp,		&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_STRUCTURE)
	D_PAD		(PADDING)
	D_TABL		(STRUCTURE)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_TABL		(STRUCTURE_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_STRUCTURE)
	PAD		(0,4)
	TABL	(4,3,NTT_T_STRUCTURE,			&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(0,4)
	TABL	(4,3,NTT_T_STRUCTURE,			&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_CONFIG)
	D_PAD		(PADDING)
	D_VAL		(CONFIG)
	D_PAD		(PADDING_1)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_VAL		(CONFIG_2)
	D_PAD		(PADDING_3)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_CONFIG)
	PAD		(4,3)
	VAL		(2,2,CONFIG_POINT_TO_POINT,	&i_cause[0].tmp)
	PAD		(0,2)
	EXT_0_1	()
	PAD		(4,3)
	VAL		(2,2,CONFIG_POINT_TO_POINT,	&i_cause[0].tmp)
	PAD		(0,2)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_EST)
	D_PAD		(PADDING)
	D_VAL		(EST)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_VAL		(EST_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_EST)
	PAD		(2,5)
	VAL		(0,2,EST_DEMAND,			&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(2,5)
	VAL		(0,2,EST_DEMAND,			&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_SYMMETRY)
	D_PAD		(PADDING)
	D_VAL		(SYMMETRY)
	D_EXT_0_1	(DIAG)
	D_PAD		(PADDING_2)
	D_VAL		(SYMMETRY_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_SYMMETRY)
	PAD		(0,5)
	VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_cause[0].tmp)
	EXT_0_1	()
	PAD		(0,5)
	VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_LAYER_ID)
	D_TABL		(LAYER_ID)
	D_TABX		(PROT_ID)
	D_EXT_0_1	(DIAG)
	D_TABL		(LAYER_ID_)
	D_TABX		(PROT_ID_2)
	D_EXT_1		(DIAG_2)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_LAYER_ID)
	TABL	(5,2,NTT_T_LAYER_ID,			&i_cause[0].tmp)
	TABX	(0,5,NTT_TX_PROTOCOL_ID_BC,		&i_cause[0].tmp,	&i_cause[0].tmp)
	EXT_0_1	()
	TABL	(5,2,NTT_T_LAYER_ID,			&i_cause[0].tmp)
	TABX	(0,5,NTT_TX_PROTOCOL_ID_BC,		&i_cause[0].tmp,	&i_cause[0].tmp)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_CONDITION)
	D_TABL		(CONDITION)
	D_PAD		(PADDING)
	D_EXT_1		(DIAG)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_CONDITION)
	TABL	(0,2,NTT_T_STATUS_CONDITION,	&i_cause[0].tmp)
	PAD		(2,5)
	EXT_1	()
END		(0)

D_START	(NTT_DIAG_MSG)
	D_TABL		(MSG)
	D_END_OCTET	(DIAG)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_MSG)
	TABL		(0,8,NTT_T_MSG_TYPE,		&i_cause[0].tmp)
	END_OCTET	()
END		(0)

D_START	(NTT_DIAG_TIMER)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(NTT_DIAG_TIMER)
	TEXT	(IA5, DIGIT, &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

			/* ---------- Channel idendification (CHAN_ID) */

D_START	(NTT_CHAN_ID_P)
	D_TABL  (INT_ID)
	D_TABL  (INT_TYPE)
	D_PAD   (NS_PAD_3)
	D_TABL  (PREF_EXCL)
	D_TABL  (D_CHAN_)
	D_TABX  (SEL)
	D_EXT_1 (_3)

	D_IF_VAL	(_INT_EXPL_)
		D_ANY_VAL	(_INT_ID_VAL_)
		D_EXT_1		(_INT_)
	D_END_IF	(_3_1_)

D_END   (CHAN_ID_E)

START	(NTT_CHAN_ID_P)
	TABL	(6,1,NTT_T_CHAN_INT,		&i_chan_id[0].int_id)
	TABL	(5,1,NTT_T_INT_TYPE,		&i_chan_id[0].int_type)
	PAD		(4,1)
	TABL	(3,1,NTT_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL	(2,1,NTT_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABX	(0,2,NTT_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	EXT_1   ()

	IF_VAL	(I_IF, &i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		ANY_VAL	(0,7,&i_chan_id[0].int_id_val)
		EXT_1	()
	END_IF	()

END		(ntt_chan_id_spdu)

	/*-----*/

	/* PRI-type chan_id */

D_START	(NTT_CHAN_ID_PRI_P)
	D_TABL  (CODING)
	D_TABL  (NB_MAP)
	D_TABL  (TYPE)
	D_EXT_1 (_3_2)
	D_TEXT  (NBER)
D_END   (CHAN_ID_PRI_E)

START	(NTT_CHAN_ID_PRI_P)
	TABL	(5,2,NTT_T_CODING_STD,  &i_chan_id[0].coding_std)
	TABL	(4,1,NTT_T_NB_MAP,	   	&i_chan_id[0].nb_map)
	TABL	(0,4,NTT_T_CHAN_TYPE,   &i_chan_id[0].chan_type)
	EXT_1	()
	TEXT	(BINARY,	ANY_OCTET,	&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
END	(0)

			/* ---------- Congestion level (CONGEST_LEVEL) */

D_START	(NTT_CONGEST_LEVEL_P)
	D_TABL  	(CONG_LEV)
	D_END_OCTET	(CONG_LEV_SO)
D_END   (CONGEST_LEVEL_E)

START	(NTT_CONGEST_LEVEL_P)
	TABL		(0,4,NTT_T_CONGEST_LEVEL,   &i_congest_level[0].congest_level)
	END_OCTET	()
END	 (0)

			/* ---------- Date/time (DATE_TIME) */

D_START	(NTT_DATE_TIME_P)
	D_ANY_VAL   (YEAR_)
	D_END_OCTET (_3)
	D_ANY_VAL   (MONTH_)
	D_END_OCTET (_4)
	D_ANY_VAL   (DAY_)
	D_END_OCTET (_5)
	D_ANY_VAL   (HOUR_)
	D_END_OCTET (_6)
	D_ANY_VAL   (MINUTE_)
	D_END_OCTET (_7)
D_END			(END_SPDU)

START	(NTT_DATE_TIME_P)
	ANY_VAL		(0,8,   &i_date_time[0].year)
	END_OCTET   ()
	ANY_VAL		(0,8,   &i_date_time[0].month)
	END_OCTET   ()
	ANY_VAL		(0,8,   &i_date_time[0].day)
	END_OCTET   ()
	ANY_VAL		(0,8,   &i_date_time[0].hour)
	END_OCTET   ()
	ANY_VAL		(0,8,   &i_date_time[0].minute)
	END_OCTET   ()
END				(0)

			/* ---------- Display (DISPLAY) */

D_START	(NTT_DISPLAY_P)
	D_TEXT  (INFO_)
D_END   (DISPLAY_E)

START	(NTT_DISPLAY_P)
	TEXT	(IA5,ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END	 (0)

			/* ---------- Facility (FACILITY) */

D_START	(NTT_FACILITY_P)
	D_PAD		(NS_PAD_3)
	D_VAL		(SERVICE)
	D_EXT_1		(_3)
	D_VAL		(OM_CLASS)
	D_VAL		(FORM)
	D_TABL		(COMP_TAG)
	D_END_OCTET (_4)
	D_VAL		(LGTH_FMT)
	D_ANY_VAL   (LGTH)
	D_END_OCTET (_5)
D_END			(FACILITY_E)

START	(NTT_FACILITY_P)
	PAD			(5,2)
	VAL			(0,5,FAC_SUPPLEMENTARY,		&i_facility[0].service_discr)
	EXT_1		()
	VAL			(6,2,FAC_CONTEXT_SPECIFIC,  &i_facility[0].component.asn1_class)
	VAL			(5,1,FAC_CONSTRUCTOR,		&i_facility[0].component.form)
	TABL		(0,5,NTT_T_FAC_COMP_TAG,	&i_facility[0].component.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	ANY_VAL		(0,7,						&i_facility[0].component.lgth)
	END_OCTET	()
END				(ntt_fac_spdu)

	/*
		Note : only one field is used in the internal structure to represent
		the length format field
	*/

D_START	(NTT_FAC_INVOKE_P)
	D_VAL		(OM_CLASS)
	D_VAL		(FORM)
	D_VAL		(INVOKE_ID_TAG)
	D_END_OCTET (_6)
	D_VAL		(LGTH_FMT)
	D_ANY_VAL   (LGTH_INVOKE_ID)
	D_END_OCTET (_6_1)
	D_FUNCTION	(INVOKE_ID)
	D_END_OCTET	(RESET_IE_OCTET)
	D_VAL		(CLASS_2)
	D_VAL		(FORM_2)
	D_VAL		(OP_VAL_TAG)
	D_END_OCTET (_6_3)
	D_VAL		(LGTH_FMT_2)
	D_VAL		(LGTH_OP_VAL)
	D_END_OCTET (_6_4)
	D_VAL		(OP_VAL)
	D_END_OCTET (_6_5)
	D_VAL		(CLASS_3)
	D_VAL		(FORM_3)
	D_VAL		(SEQ_TAG)
	D_END_OCTET (_6_6)
	D_VAL		(LGTH_FMT_3)
	D_ANY_VAL   (LGTH_SEQ_TAG)
	D_END_OCTET (_6_7)
	D_FUNCTION	(CHK_SEQ_LGTH)
	D_VAL		(CLASS_4)
	D_VAL		(FORM_4)
	D_VAL		(SERVICE_TAG)
	D_END_OCTET (_6_8)
	D_VAL		(LGTH_FMT_4)
	D_VAL		(LGTH_SERVICE)
	D_END_OCTET (_6_8_1)
	D_TABL		(SERVICE)
	D_END_OCTET	(_6_8_2)
	D_VAL		(CLASS_5)
	D_VAL		(FORM_5)
	D_VAL		(PREF_TAG)
	D_END_OCTET (_6_8_3)
	D_VAL		(LGTH_FMT_5)
	D_VAL		(LGTH_PREF)
	D_END_OCTET (_6_8_4)
	D_TABL		(PREF)
D_END			(FACILITY_E)

START	(NTT_FAC_INVOKE_P)
	VAL			(6,2,FAC_UNIVERSAL,			&i_facility[0].invoke_id.asn1_class)
	VAL			(5,1,FAC_PRIMITIVE,			&i_facility[0].invoke_id.form)
	VAL			(0,5,FAC_INVOKE_ID_TAG,		&i_facility[0].invoke_id.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	ANY_VAL		(0,7,						&i_facility[0].invoke_id.lgth)
	END_OCTET	()
	FUNCTION	(ntt_fac_invoke_spdu)
	END_OCTET	()
	VAL			(6,2,FAC_UNIVERSAL,			&i_facility[0].op_error_val.asn1_class)
	VAL			(5,1,FAC_PRIMITIVE,			&i_facility[0].op_error_val.form)
	VAL			(0,5,FAC_OP_VAL_TAG,		&i_facility[0].op_error_val.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	VAL			(0,7,FAC_OP_VAL_LGTH,		&i_facility[0].op_error_val.lgth)
	END_OCTET	()
	VAL			(0,8,OP_VAL_UUI,			&i_facility[0].op_error_val.id)
	END_OCTET	()
	VAL			(6,2,FAC_UNIVERSAL,			&i_facility[0].sequence.asn1_class)
	VAL			(5,1,FAC_CONSTRUCTOR,		&i_facility[0].sequence.form)
	VAL			(0,5,FAC_SEQUENCE_TAG,		&i_facility[0].sequence.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	ANY_VAL 	(0,7,						&i_facility[0].sequence.lgth)
	END_OCTET	()
	FUNCTION	(ntt_fac_chk_seq_spdu)
	VAL			(6,2,FAC_CONTEXT_SPECIFIC,	&i_facility[0].service.asn1_class)
	VAL			(5,1,FAC_PRIMITIVE,			&i_facility[0].service.form)
	VAL			(0,5,FAC_SERVICE_TAG,		&i_facility[0].service.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	VAL			(0,7,FAC_SERVICE_LGTH,		&i_facility[0].service.lgth)
	END_OCTET	()
	TABL		(0,8,NTT_T_FAC_SERVICE,		&i_facility[0].service.id)
	END_OCTET	()
	VAL			(6,2,FAC_CONTEXT_SPECIFIC,	&i_facility[0].preferred.asn1_class)
	VAL			(5,1,FAC_PRIMITIVE,			&i_facility[0].preferred.form)
	VAL			(0,5,FAC_PREF_TAG,			&i_facility[0].preferred.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	VAL			(0,7,FAC_PREF_LGTH,			&i_facility[0].preferred.lgth)
	END_OCTET	()
	TABL		(0,8,NTT_T_FAC_PREFERRED,	&i_facility[0].preferred.id)
END				(ntt_store_2lgth_spdu)

D_START	(NTT_FAC_RETURN_RESULT_P)
	D_VAL		(OM_CLASS)
	D_VAL		(FORM)
	D_VAL		(INVOKE_ID_TAG)
	D_END_OCTET (_6)
	D_VAL		(LGTH_FMT)
	D_ANY_VAL   (LGTH_INVOKE_ID)
	D_END_OCTET (_6_1)
	D_FUNCTION	(INVOKE_ID)
	D_END_OCTET	(RESET_IE_OCTET)
D_END			(FACILITY_E)

START	(NTT_FAC_RETURN_RESULT_P)
	VAL			(6,2,FAC_UNIVERSAL,			&i_facility[0].invoke_id.asn1_class)
	VAL			(5,1,FAC_PRIMITIVE,			&i_facility[0].invoke_id.form)
	VAL			(0,5,FAC_INVOKE_ID_TAG,		&i_facility[0].invoke_id.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	ANY_VAL		(0,7,						&i_facility[0].invoke_id.lgth)
	END_OCTET	()
	FUNCTION	(ntt_fac_invoke_spdu)
	END_OCTET	()
END				(ntt_store_lgth_spdu)

D_START	(NTT_FAC_RETURN_ERROR_P)
	D_VAL		(OM_CLASS)
	D_VAL		(FORM)
	D_VAL		(INVOKE_ID_TAG)
	D_END_OCTET (_6)
	D_VAL		(LGTH_FMT)
	D_ANY_VAL   (LGTH_INVOKE_ID)
	D_END_OCTET (_6_1)
	D_FUNCTION	(INVOKE_ID)
	D_END_OCTET	(RESET_IE_OCTET)
	D_VAL		(CLASS_2)
	D_VAL		(FORM_2)
	D_VAL		(ERROR_VAL_TAG)
	D_END_OCTET (_6_3)
	D_VAL		(LGTH_FMT_2)
	D_VAL		(LGTH_ERROR_VAL)
	D_END_OCTET (_6_4)
	D_TABL		(ERROR_VAL)
	D_END_OCTET (_6_5)
D_END			(FACILITY_E)

START	(NTT_FAC_RETURN_ERROR_P)
	VAL			(6,2,FAC_UNIVERSAL,			&i_facility[0].invoke_id.asn1_class)
	VAL			(5,1,FAC_PRIMITIVE,			&i_facility[0].invoke_id.form)
	VAL			(0,5,FAC_INVOKE_ID_TAG,		&i_facility[0].invoke_id.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	ANY_VAL		(0,7,						&i_facility[0].invoke_id.lgth)
	END_OCTET	()
	FUNCTION	(ntt_fac_invoke_spdu)
	END_OCTET	()
	VAL			(6,2,FAC_UNIVERSAL,			&i_facility[0].op_error_val.asn1_class)
	VAL			(5,1,FAC_PRIMITIVE,			&i_facility[0].op_error_val.form)
	VAL			(0,5,FAC_ERROR_VAL_TAG,		&i_facility[0].op_error_val.tag)
	END_OCTET	()
	VAL			(7,1,FAC_LGTH_FORMAT,		&i_facility[0].lgth_format)
	VAL			(0,7,FAC_ERROR_LGTH,		&i_facility[0].op_error_val.lgth)
	END_OCTET	()
	TABL		(0,8,NTT_T_FAC_ERROR_VAL,	&i_facility[0].op_error_val.id)
	END_OCTET	()
END				(ntt_store_lgth_spdu)

			/*---------- Feature Activation (FEATURE_ACT) */

D_START	(NTT_FEATURE_ACT_P)
		D_ANY_VAL		(FEATURE_NB)

		D_IF_VAL		(EXTENSION)
			D_EXT_0_1	(OCTET_3)
			D_ANY_VAL	(FEATURE_NB_EXT)
		D_END_IF		(EXTENDED)

		D_EXT_1			(OCTET_4)
D_END	(END_SPDU)

START	(NTT_FEATURE_ACT_P)
		ANY_VAL		(0,7,		&i_feature_act[0].feature_nb)

		IF_VAL		(I_IF,		&i_feature_act[0].feature_nb_ext, NE, BYTE_VAL_NIL)
			EXT_0_1	()
			ANY_VAL	(0,7,		&i_feature_act[0].feature_nb_ext)
		END_IF		()

		EXT_1		()
END		(ntt_check_feature_act)

			/*---------- Feature Indication (FEATURE_IND) */

D_START	(NTT_FEATURE_IND_P)
		D_ANY_VAL	(FEATURE_NB)
		D_EXT_0_1	(OCTET_3)
		D_ANY_VAL	(FEATURE_NB_EXT)
		D_EXT_1		(OCTET_3a)
		D_TABL		(STATUS_IND)
		D_PAD		(NS_PAD_4)
		D_END_OCTET	(OCTET_4)
D_END	(END_SPDU)

START	(NTT_FEATURE_IND_P)
		ANY_VAL		(0,7,					&i_feature_ind[0].feature_nb)
		EXT_0_1		()
		ANY_VAL		(0,7,					&i_feature_ind[0].feature_nb_ext)
		EXT_1		()
		TABL		(0,4, NTT_T_STATUS_IND,	&i_feature_ind[0].status_ind)
		PAD			(4,4)
		END_OCTET	()
END		(ntt_check_feature_ind)

			/* ---------- High layer compatibility (HLC) */

D_START	(NTT_HLC_P)
		D_TABL				(CODING_STD)
		D_VAL				(INTERPRETATION)
		D_VAL				(PRESENTATION)
		D_EXT_1				(_3)
		D_IF_VAL			(IF_4)
			D_TABL			(TELESERVICE)

			D_IF_TABL		(IS_EXT_TELESERVICE)
				D_EXT_0_1	(_4)
				D_TABL		(EXT_TELESERVICE)
			D_END_IF		(IS_EXTENDED)
			D_EXT_1			(_5)
		D_ELSE				(ELSE_4)
			D_ANY_VAL		(TELESERVICE_SPF)
			D_EXT_1			(_4_SPF)
		D_END_IF			(ENDIF_4)
D_END						(HLC_E)

START	(NTT_HLC_P)
		TABL				(5,2,NTT_T_CODING_STD,		&i_hlc[0].coding_std)
		VAL					(2,3,INTER_CCITT_CEPT,		&i_hlc[0].interpretation)
		VAL					(0,2,PRESENTATION_PROFIL,	&i_hlc[0].pres)
		EXT_1				()

		IF_VAL				(I_IF, &i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
			TABL			(0,7,NTT_T_TELESERVICE_CCITT,   &i_hlc[0].teleservice)

			IF_TABL			(I_IF, &i_hlc[0].teleservice, IN, NTT_T_TELESERVICE_EXT)
				EXT_0_1		()
				TABL		(0,7,NTT_T_TELESERVICE_CCITT,   &i_hlc[0].ext_teleservice)
			END_IF			()
			EXT_1			()
		ELSE				()
			ANY_VAL			(0,7,	&i_hlc[0].teleservice)
			EXT_1			()
		END_IF				()
END							(0)

			/* ---------- Keypad (KEYPAD) */

D_START	(NTT_KEYPAD_P)
	D_TEXT  (TEXT_VAL)
D_END		(KEYPAD_E)

START	(NTT_KEYPAD_P)
	TEXT	(IA5,ANY_CHAR, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END			(0)

			/* ---------- Low layer compatibility (LLC) */

D_START	(NTT_LLC_P)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_EXT_0_1	(_3)
		D_TABL		(OUT_BAND_NEG)
		D_PAD		(NS_PAD_3A)
		D_EXT_1		(_3A)
		D_TABL		(TRF_MODE)
		D_TABX		(TRF_RATE)
		D_FUNCTION  (IF_4AB)

		D_IF_VAL	(_4AB_NOT_DEFAULT)
			D_EXT_0_1	(_4)
			D_TABL	 	(STRUCT)
			D_VAL	 	(CONFIG)
			D_VAL	 	(EST)
			D_FUNCTION	(IF_4B)

			D_IF_VAL	(_4B_NOT_DEFAULT)
				D_EXT_0_1	(_4A)
				D_VAL		(SYMMETRY)
				D_TABX		(DEST_RATE)
			D_END_IF	(E_4B_NOT_DEFAULT)
		D_END_IF	(E_4AB_NOT_DEFAULT)
		D_EXT_1	 	(_4B)

		D_OPTIONAL_OCTET	(_5_6_7)

		D_FUNCTION	(IF_5)
		D_IF_VAL	(LLC_5_PR)

			D_VAL		(LAYER_1)
			D_TABL		(PROTOCOL_1)

				/* V110 */

			D_IF_VAL		(V110)
				D_EXT_0_1	(_5_V110)
				D_TABL		(V110_SYN_ASYN)
				D_TABL		(V110_NEGOTIATION)
				D_TABL		(V110_USER_RATE)
				D_EXT_0_1	(V110_5A)
				D_TABL		(V110_INTER_RATE)
				D_TABL		(V110_TX_NIC)
				D_TABL		(V110_RX_NIC)
				D_TABL		(V110_TX_FC)
				D_TABL		(V110_RX_FC)
				D_PAD		(V110_PAD_5B)
				D_EXT_0_1	(V110_5B)
				D_TABL		(V110_STOP_BIT)
				D_TABL		(V110_DATA_BIT)
				D_TABL		(V110_PARITY)
				D_EXT_0_1	(V110_5C)
				D_TABL		(V110_DUPLEX)
				D_TABL		(V110_MODEM)
			D_END_IF		(ENDIF_V110)

				/* V120 */

			D_IF_VAL		(V120_)
				D_EXT_0_1	(_5_V120)
				D_TABL		(V120_SYN_ASYN)
				D_TABL		(V120_NEGOTIATION)
				D_TABL		(V120_USER_RATE)
				D_EXT_0_1	(V120_5A)
				D_TABL		(V120_HDR)
				D_TABL		(V120_MULTI_FRAME)
				D_TABL		(V120_OP_MODE)
				D_TABL		(V120_LLI)
				D_TABL		(V120_ASSIGN)
				D_TABL		(V120_BAND)
				D_PAD		(V120_PAD_5B)
				D_EXT_0_1	(V120_5B)
				D_TABL		(V120_STOP_BIT)
				D_TABL		(V120_DATA_BIT)
				D_TABL		(V120_PARITY)
				D_EXT_0_1	(V120_5C)
				D_TABL		(V120_DUPLEX)
				D_TABL		(V120_MODEM)
			D_END_IF	(ENDIF_V120)

			D_EXT_1		(_5_)

		D_END_IF	(ENDIF_5_PR)

		D_FUNCTION	(OCTET_6)

		D_IF_VAL	(OCTET_6_PR)
			D_VAL		(L_ID_2)
			D_TABL		(PROTOCOL_ID_2)
			D_EXT_0_1	(_6)
			D_ANY_VAL	(OPTION_2)
			D_EXT_1		(_6A)
		D_END_IF	(ENDIF_6_PR)

		D_FUNCTION	(OCTET_7)

		D_IF_VAL	(OCTET_7_PR)
			D_VAL		(L_ID_3)
			D_TABL		(PROTOCOL_ID_3)
			D_EXT_0_1	(_7)
			D_ANY_VAL	(OPTION_3)
			D_EXT_1		(_7A)
		D_END_IF	(ENDIF_7_PR)

D_END (LLC_E)

START	(NTT_LLC_P)
		TABL	(5,2,NTT_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(0,5,NTT_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
		EXT_0_1 ()
		TABL	(6,1,NTT_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
		PAD		(0,6)
		EXT_1   ()
		TABL	(5,2,NTT_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABX	(0,5,NTT_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
		FUNCTION(ntt_llc_4ab_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(4,3,NTT_T_STRUCTURE,			&i_llc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
			VAL		(0,2,EST_DEMAND,				&i_llc[0].est)

			FUNCTION(ntt_llc_4b_spdu)
			IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1 ()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_llc[0].symmetry)
				TABX	(0,5,NTT_TX_TRF_RATE,		&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
			END_IF	()
		END_IF	()
		EXT_1	()
		OPTIONAL_OCTET  ()

			/* following octets may be optional in some other circumstances */

		FUNCTION(ntt_llc_5_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,					&i_llc[0].layer_id_1)
			TABL	(0,5,NTT_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)

				/* V110 */

			IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1 ()
				TABL	(6,1,NTT_T_SYN_ASYN,			&i_llc[0].syn_asyn)
				TABL	(5,1,NTT_T_NEGOTIATION,			&i_llc[0].in_band_neg)
				TABL	(0,5,NTT_T_USER_RATE,			&i_llc[0].user_rate)
				EXT_0_1 ()
				TABL	(5,2,NTT_T_INTER_RATE,			&i_llc[0].inter_rate)
				TABL	(4,1,NTT_T_NIC_TX,				&i_llc[0].tx_nic)
				TABL	(3,1,NTT_T_NIC_RX,				&i_llc[0].rx_nic)
				TABL	(2,1,NTT_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
				TABL	(1,1,NTT_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,NTT_T_STOP_BIT,			&i_llc[0].stop_bit)
				TABL	(3,2,NTT_T_DATA_BIT,			&i_llc[0].data_bit)
				TABL	(0,3,NTT_T_PARITY,				&i_llc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,NTT_T_DUPLEX,				&i_llc[0].duplex)
				TABL	(0,6,NTT_T_MODEM,				&i_llc[0].modem)
			END_IF  ()

				/* V120 */

			IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
				EXT_0_1 ()
				TABL	(6,1,NTT_T_SYN_ASYN,			&i_llc[0].syn_asyn)
				TABL	(5,1,NTT_T_NEGOTIATION,			&i_llc[0].in_band_neg)
				TABL	(0,5,NTT_T_USER_RATE,			&i_llc[0].user_rate)
				EXT_0_1 ()
				TABL	(6,1,NTT_T_HEADER,				&i_llc[0].hdr)
				TABL	(5,1,NTT_T_MULTI_FRAME,			&i_llc[0].multi_frame)
				TABL	(4,1,NTT_T_OP_MODE,				&i_llc[0].op_mode)
				TABL	(3,1,NTT_T_LLI,					&i_llc[0].lli)
				TABL	(2,1,NTT_T_ASSIGN,				&i_llc[0].assign)
				TABL	(1,1,NTT_T_BAND,				&i_llc[0].band)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,NTT_T_STOP_BIT,			&i_llc[0].stop_bit)
				TABL	(3,2,NTT_T_DATA_BIT,			&i_llc[0].data_bit)
				TABL	(0,3,NTT_T_PARITY,				&i_llc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,NTT_T_DUPLEX,				&i_llc[0].duplex)
				TABL	(0,6,NTT_T_MODEM,				&i_llc[0].modem)
			END_IF	()
			EXT_1	()

		END_IF ()	/* octet 5 present */

		FUNCTION(ntt_llc_6_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_2,					&i_llc[0].layer_id_2)
			TABL	(0,5,NTT_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
			EXT_0_1 ()
			ANY_VAL	(0,7,								&i_llc[0].option_2)
			EXT_1   ()
		END_IF ()	/* octet 6 present */

		FUNCTION(ntt_llc_7_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_3,					&i_llc[0].layer_id_3)
			TABL	(0,5,NTT_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
			EXT_0_1	()
			ANY_VAL	(0,7,								&i_llc[0].option_3)
			EXT_1	()
		END_IF	()	/* octet 7 present */

END (0)

			/* ---------- Network-specific facilities (SPF_FAC) */

#if NS_SPF_FACILITY == ON

D_START	(NTT_SPF_FAC_P)
	D_ANY_VAL		(NETWORK_ID_LGTH)
	D_END_OCTET		(_3)

	D_IF_VAL		(IF_3)
		D_TABL		(TYPE_NET_ID)
		D_TABL		(PLAN_NET_ID)
		D_EXT_1		(_3_1)
		D_FUNCTION	(NET_ID)
	D_END_IF		(_3_)
	D_TEXT			(_FAC_INFO)
D_END				(SPF_FAC_E)

START	(NTT_SPF_FAC_P)
	ANY_VAL			(0,8,&i_spf_fac[0].net_id_lgth)
	END_OCTET		()

	IF_VAL			(I_IF, &i_spf_fac[0].net_id_lgth, NE, 0)
		TABL		(4,3,NTT_T_NET_ID_TYPE,	 &i_spf_fac[0].Net_id_type)
		TABL		(0,4,NTT_T_NET_ID_PLAN,	 &i_spf_fac[0].Net_id_plan)
		EXT_1		()
		FUNCTION	(ntt_spf_fac_spdu)
	END_IF			()
	TEXT			(BINARY,ANY_OCTET, &i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
END					(0)

#endif

			/*---------- Switchhook (SWITCHHOOK) */

D_START	(NTT_SWITCHHOOK_P)
		D_TABL		(HOOK_VAL)
		D_END_OCTET	(OCTET_3)
D_END	(END_SPDU)

START	(NTT_SWITCHHOOK_P)
		TABL		(0,8, NTT_T_HOOK_VAL,			&i_switchhook[0].hook_val)
		END_OCTET	()
END		(0)

			/* ---------- Notification indicator (NOTIF_IND) */

D_START	(NTT_NOTIF_IND_P)
	D_TABL  (DESCR)
	D_EXT_1 (_3)
D_END		(NOTIF_IND_E)

START	(NTT_NOTIF_IND_P)
	TABL	(0,7,NTT_T_NOTIF_IND_DESCR,	 &i_notif_ind[0].notif_descr)
	EXT_1   ()
END			(0)

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(NTT_PROGRESS_IND_P)
	D_TABL  (CODING_STD)
	D_PAD   (NS_PAD_3)
	D_TABL  (LOCATION)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(NTT_PROGRESS_IND_P)
	TABL	(5,2,NTT_T_CODING_STD,				&i_progress_ind[0].coding_std)
	PAD		(4,1)
	TABL	(0,4,NTT_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	EXT_1   ()
	TABL	(0,7,NTT_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
	EXT_1   ()
END			(0)

			/* ---------- Repeat indicator (REPEAT_IND) */

D_START	(NTT_REPEAT_IND_P)
	D_VAL  	(REPEAT_IND_REP_IN)
	D_END_OCTET	(REPEAT_IND_SO)
D_END   (REPEAT_IND_E)

START	(NTT_REPEAT_IND_P)
	VAL		(0,4,REP_IN_PRIORITIZED_LIST,   	&i_repeat_ind[0].rep_in)
	END_OCTET	()
END	 (0)

			/* ---------- Restart indicator */

D_START		(NTT_RESTART_IND_P)
	D_PAD	(RESTART_PAD)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_IND_E)

START		(NTT_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,NTT_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
	EXT_1	()
END			(ntt_restart_spdu)

			/* ---------- Signal (SIGNAL) */

D_START	(NTT_SIGNAL_P)
	D_TABL		(SIGNAL_VAL)
	D_END_OCTET	(_3)
D_END			(SIGNAL_E)

START	(NTT_SIGNAL_P)
	TABL		(0,8,NTT_T_SIGNAL_VAL,	&i_signal[0].val)
	END_OCTET	()
END				(0)

			/* ---------- Transit network selection (TRANSIT_NET_SEL) */

D_START	(NTT_TRANSIT_NET_SEL_P)
	D_TABL  (TYPE)
	D_TABL  (PLAN)
	D_EXT_1 (_3)
	D_TEXT  (NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(NTT_TRANSIT_NET_SEL_P)
	TABL	(4,3,NTT_T_NET_ID_TYPE,		&i_transit_net_sel[0].net_id_type)
	TABL	(0,4,NTT_T_NET_ID_PLAN,		&i_transit_net_sel[0].net_id_plan)
	EXT_1   ()
	TEXT	(IA5,ANY_CHAR,				&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

			/* ---------- User to user information (UUI) */

D_START	(NTT_UUI_P)
	D_TABL		(PROTOCOL_DISCR)
	D_END_OCTET	(_3)
	D_OPTIONAL_OCTET(_UUI)

	D_IF_VAL	(DISCR_IA5)
		D_TEXT  (INFO_IA5)
	D_ELSE		(OTHER_DISCR)
		D_TEXT  (INFO_OTHER)
	D_END_IF	(DISCR)
D_END			(UUI_E)

START	(NTT_UUI_P)
	TABL		(0,8,NTT_T_UUI_PROTOCOL_DISCR,  &i_uui[0].protocol_discr)
	END_OCTET   ()
	OPTIONAL_OCTET	()

	IF_VAL		(I_IF, &i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT	(IA5,ANY_CHAR,			&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE		()
		TEXT	(BINARY, ANY_OCTET, 	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF		()
END				(0)

/*EOF*/
