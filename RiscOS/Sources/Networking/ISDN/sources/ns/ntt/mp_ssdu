
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.ntt
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	ntt_bc_ra_ssdu				(Void_parm);
	uchar	ntt_calling_pres_ssdu		(Void_parm);
	uchar	ntt_chan_id_ssdu			(Void_parm);
	uchar	ntt_chan_id_chan_nb_ssdu	(Void_parm);
	uchar	ntt_fac_ssdu				(Void_parm);
	uchar	ntt_check_feature_act		(Void_parm);
	uchar	ntt_check_feature_ind		(Void_parm);
	uchar	ntt_llc_ra_ssdu				(Void_parm);

#	if NS_SPF_FACILITY == ON
	   uchar	ntt_spf_fac_ssdu		(Void_parm);
#	endif

#endif

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
			(Ordered alphabetically)
		*/


			/* ADVICE_CHARGE : Advice of Charge */

D_START	(NTT_P_ADVICE_CHARGE)
	D_TEXT	(CHARGING_DATA)
D_END		(ADVICE_CHARGE_E)

START	(NTT_P_ADVICE_CHARGE)
	TEXT	(1,NTT_MX_SZ_ADVICE_CHARGE,DIGIT, &i_advice_charge[0].data_lgth, (uchar **)&i_advice_charge[0].p_data)
END			(0)

			/* BC : bearer capabilities */

D_START	(NTT_P_BC)
		D_TABL		(TRF_CAP)
		D_TABL		(TRF_MODE)
		D_TABX		(TRF_RATE)
		D_TABL		(STRUCT)
		D_TABX		(DEST_RATE)
		D_TABX		(PROTOCOL_1)
D_END (P_BC_1)

START	(NTT_P_BC)
		TABL	(NTT_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
		TABL	(NTT_T_TRF_MODE,			&i_bc[0].trf_mode)
		TABX	(NTT_TX_TRF_RATE,			&i_bc[0].trf_mode,		&i_bc[0].trf_rate)
		TABL	(NTT_T_STRUCTURE,			&i_bc[0].structure)
		TABX	(NTT_TX_TRF_RATE,			&i_bc[0].trf_mode,		&i_bc[0].dest_rate)
		TABX	(NTT_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_1,	&i_bc[0].protocol_id_1)
END	(ntt_bc_ra_ssdu)

		/* V110 */

D_START	(NTT_P_BC_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
D_END (ENDIF_V110)

START	(NTT_P_BC_V110)
			TABL		(NTT_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL		(NTT_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL		(NTT_T_USER_RATE,			&i_bc[0].user_rate)
			TABL		(NTT_T_INTER_RATE,			&i_bc[0].inter_rate)
			TABL		(NTT_T_NIC_TX,				&i_bc[0].tx_nic)
			TABL		(NTT_T_NIC_RX,				&i_bc[0].rx_nic)
			TABL		(NTT_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
			TABL		(NTT_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
			TABL		(NTT_T_STOP_BIT,			&i_bc[0].stop_bit)
			TABL		(NTT_T_DATA_BIT,			&i_bc[0].data_bit)
			TABL		(NTT_T_PARITY,				&i_bc[0].parity)
			TABL		(NTT_T_DUPLEX,				&i_bc[0].duplex)
			TABL		(NTT_T_MODEM,				&i_bc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(NTT_P_BC_PAD)
			D_PAD		(PAD_1_8_15_19)
D_END (END_PAD_RA)

START	(NTT_P_BC_PAD)
			PAD			(13)
END (0)

D_START	(NTT_P_BC_2)
		D_TABX	(PROTOCOL_ID_2)
		D_TABX	(PROTOCOL_ID_3)
D_END	(BC_E)

START	(NTT_P_BC_2)
		TABX	(NTT_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_2,	&i_bc[0].protocol_id_2)
		TABX	(NTT_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_3,	&i_bc[0].protocol_id_3)
END 	(0)

			/* CALL_ID : call identity */

D_START	(NTT_P_CALL_ID)
	D_TEXT (CALL_ID_VAL_)
D_END (CALL_ID_END)

START	(NTT_P_CALL_ID)
	TEXT (1,NTT_MX_SZ_CALL_ID,ANY_CHAR,		&i_call_id[0].lgth,(uchar **)&i_call_id[0].p_val)
END (0)

			/* CALL_STATE : call state */

D_START	(NTT_P_CALL_STATE)
	D_TABL (CODING_STD)
	D_TABL (VAL_)
D_END (CALL_STATE_END)

START	(NTT_P_CALL_STATE)
	TABL (NTT_T_CODING_STD,			&i_call_state[0].coding_std)
	TABL (NTT_T_CALL_STATE,			&i_call_state[0].val)
END (0)

			/* CALLED_NB : called party number */

D_START	(NTT_P_CALLED_NB)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (P_CALLED_NB_END)

START	(NTT_P_CALLED_NB)
	TEXT (1,NTT_MX_SZ_CALLED_NB,DIGIT,	&i_called_nb[0].lgth,	(uchar **)&i_called_nb[0].p_add)
END (0)

			/* CALLED_SUB_ADD : called party sub address */

D_START	(NTT_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)
D_END (P_CALLED_SUB_ADD_END)

START	(NTT_P_CALLED_SUB_ADD)
	TABL (NTT_T_SUB_ADD_TYPE,			&i_called_sub_add[0].sub_add_type)
	TABL (NTT_T_SUB_ADD_IND,			&i_called_sub_add[0].odd_even_ind)

	IF_VAL  (&i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,NTT_MX_SZ_CALLED_SUB_ADD,DIGIT,		&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	ELSE	()
		TEXT (1,NTT_MX_SZ_CALLED_SUB_ADD,ANY_OCTET,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	END_IF	()

END (0)

			/* CALLING_NB : calling party number */

D_START	(NTT_P_CALLING_NB)
	D_TABL		(PRES_IND_N)
	D_TABL		(SCREEN_IND_N)
	D_FUNCTION	(IS_ALLOWED)
	D_TEXT		(DIGIT_N)
D_END			(P_CALLING_NB_N_END)

START	(NTT_P_CALLING_NB)
	TABL		(NTT_T_CALLING_NB_PRES,	&i_calling_nb[0].pres)
	TABL 		(NTT_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
	FUNCTION	(ntt_calling_pres_ssdu)
	TEXT		(0,NTT_MX_SZ_CALLING_NB,DIGIT,	&i_calling_nb[0].lgth,	(uchar **)&i_calling_nb[0].p_add)
END				(0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub address */

D_START	(NTT_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END (P_CALLING_SUB_ADD_END)

START	(NTT_P_CALLING_SUB_ADD)
	TABL (NTT_T_SUB_ADD_TYPE,		&i_calling_sub_add[0].sub_add_type)
	TABL (NTT_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)

	IF_VAL  (&i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,NTT_MX_SZ_CALLING_SUB_ADD,DIGIT,		&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
	ELSE	()
		TEXT (1,NTT_MX_SZ_CALLING_SUB_ADD,ANY_OCTET,	&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
	END_IF	()
END (0)

			/* CAUSE : Cause */

D_START	(NTT_P_CAUSE)
	D_TABL (CODING_STD)
	D_TABL (LOCATION)
	D_TABL (RECOMMENDATION)
	D_TABL (OM_CLASS)
	D_TABX (VAL_)

	D_IF_VAL	(TO_CALL_CONTROL_MSG)
		D_TEXT	(DIAGNOSTICS)
	D_END_IF	(DIRECTION_)
D_END (CAUSE_END)

START	(NTT_P_CAUSE)
	TABL (NTT_T_CODING_STD,			&i_cause[0].coding_std)
	TABL (NTT_T_LOCATION,			&i_cause[0].cause_loc)
	TABL (NTT_T_RECOMMENDATION,		&i_cause[0].recommend)
	TABL (NTT_T_C_C,				&i_cause[0].cause_class)
	TABX (NTT_TX_C_V,				&i_cause[0].cause_class, &i_cause[0].cause_val)

	IF_VAL		(&direction, EQ, TO_CALL_CONTROL)
		TEXT	(0,NTT_MX_SZ_CAUSE_DIAG,ANY_CHAR,	&i_cause[0].diag_lgth,(uchar **)&i_cause[0].p_diagnostic)
	END_IF		()
END (0)

			/* CHAN_ID : channel identification */

D_START	(NTT_P_CHAN_ID)
	D_TABL	(INT_TYPE)
	D_TABL	(INT_ID)
	D_TABL	(PREF_EXCL)
	D_TABL	(D_CHAN_)
	D_TABX	(SEL)
	D_ANY_VAL (INT_ID_VAL)

	D_IF_VAL	(INT_BRI)
		D_TABL	(CODING_STD)
		D_TABL	(TYPE)
		D_TABL	(CHAN_NB_MAP)

		D_IF_VAL	(_MAP)
			D_FUNCTION (_CHAN_NB_)
			D_TEXT	(CHANNEL_NUMBERS)
		D_ELSE		(CHAN_NB_)
			D_TEXT  (_MAPPING)
		D_END_IF	(MAP_CHAN)

	D_END_IF	(BRI_INT)
D_END (P_CHAN_ID_END)

START	(NTT_P_CHAN_ID)
	TABL (NTT_T_INT_TYPE,			&i_chan_id[0].int_type)
	TABL (NTT_T_CHAN_INT,			&i_chan_id[0].int_id)
	TABL (NTT_T_CHAN_PREF_EXCL,		&i_chan_id[0].pref_excl)
	TABL (NTT_T_D_CHAN,				&i_chan_id[0].d_chan)
	TABX (NTT_TX_CHAN_SEL,			&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)
	ANY_VAL	(						&i_chan_id[0].int_id_val)

	IF_VAL	(&i_chan_id[0].int_type, NE, INT_TYPE_BRI)
		TABL (NTT_T_CODING_STD,		&i_chan_id[0].coding_std)
		TABL (NTT_T_CHAN_TYPE,		&i_chan_id[0].chan_type)
		TABL (NTT_T_NB_MAP,		   	&i_chan_id[0].nb_map)

		IF_VAL		(&i_chan_id[0].nb_map, EQ, CHAN_NUMBER)
			FUNCTION (ntt_chan_id_chan_nb_ssdu)
			TEXT (1,NTT_MX_SZ_CHAN_ID,ANY_CHAR, &i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		ELSE		()
			TEXT (1,NTT_MX_SZ_CHAN_ID,ANY_OCTET, &i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		END_IF	()

	END_IF	()
END (ntt_chan_id_ssdu)

			/* CONGEST_LEVEL : congestion level */

D_START	(NTT_P_CONGEST_LEVEL)
	D_TABL (LEVEL)
D_END	(CONGEST_LEVEL_E)

START	(NTT_P_CONGEST_LEVEL)
	TABL (NTT_T_CONGEST_LEVEL,		&i_congest_level[0].congest_level)
END		(0)

			/* DATE_TIME : date/time */

D_START	(NTT_P_DATE_TIME)
	D_ANY_VAL	(YEAR_)
	D_ANY_VAL	(MONTH_)
	D_ANY_VAL	(DAY_)
	D_ANY_VAL	(HOUR_)
	D_ANY_VAL	(MINUTE_)
D_END			(END_SSDU)

START	(NTT_P_DATE_TIME)
	ANY_VAL		(&i_date_time[0].year)
	ANY_VAL		(&i_date_time[0].month)
	ANY_VAL		(&i_date_time[0].day)
	ANY_VAL		(&i_date_time[0].hour)
	ANY_VAL		(&i_date_time[0].minute)
END				(0)

			/* DISPLAY : display facility */

D_START	(NTT_P_DISPLAY)
	D_TEXT (DISPLAY_INFO)
D_END (DISPLAY_END)

START	(NTT_P_DISPLAY)
	TEXT	(0,NTT_MX_SZ_DISPLAY,ANY_CHAR,	&i_display[0].lgth,	(uchar **)&i_display[0].p_info)
END			(0)

			/* FACILITY : facility */

D_START	(NTT_P_FACILITY)
	D_TABL		(COMP_TAG)
D_END			(FACILITY_E)

START	(NTT_P_FACILITY)
	TABL		(NTT_T_FAC_COMP_TAG,		&i_facility[0].component.tag)
END				(ntt_fac_ssdu)

D_START	(NTT_FAC_INVOKE_SSDU)
	D_TABL		(SERVICE)
	D_TABL		(PREF)
	D_PAD		(FAC_ERROR)
	D_TEXT		(INVOKE_ID)
D_END			(FACILITY_E)

START	(NTT_FAC_INVOKE_SSDU)
	TABL		(NTT_T_FAC_SERVICE,				&i_facility[0].service.id)
	TABL		(NTT_T_FAC_PREFERRED,			&i_facility[0].preferred.id)
	PAD			(1)
	TEXT		(1,NTT_MX_SZ_FACILITY,ANY_OCTET,&i_facility[0].invoke_id.lgth, (uchar **)&i_facility[0].invoke_id.p_id)
END				(0)

D_START	(NTT_FAC_RETURN_RESULT_SSDU)
	D_PAD		(_2_4)
	D_TEXT		(INVOKE_ID)
D_END			(FACILITY_E)

START	(NTT_FAC_RETURN_RESULT_SSDU)
	PAD			(3)
	TEXT		(1,NTT_MX_SZ_FACILITY,ANY_OCTET,&i_facility[0].invoke_id.lgth, (uchar **)&i_facility[0].invoke_id.p_id)
END				(0)

D_START	(NTT_FAC_RETURN_ERROR_SSDU)
	D_PAD		(_2_3)
	D_TABL		(ERROR_VAL)
	D_TEXT		(INVOKE_ID)
D_END			(FACILITY_E)

START	(NTT_FAC_RETURN_ERROR_SSDU)
	PAD			(2)
	TABL		(NTT_T_FAC_ERROR_VAL,			&i_facility[0].op_error_val.id)
	TEXT		(1,NTT_MX_SZ_FACILITY,ANY_OCTET,&i_facility[0].invoke_id.lgth, (uchar **)&i_facility[0].invoke_id.p_id)
END				(0)

/*---------- Feature Activation         (FEATURE_ACT) */

D_START	(NTT_P_FEATURE_ACT)
	D_ANY_VAL	(FEATURE_NB)
	D_ANY_VAL	(FEATURE_NB_EXT)
D_END   (END_SSDU)

START	(NTT_P_FEATURE_ACT)
	ANY_VAL	(&i_feature_act[0].feature_nb)
	ANY_VAL	(&i_feature_act[0].feature_nb_ext)
END     (ntt_check_feature_act)

/*---------- Feature Indication         (FEATURE_IND) */

D_START	(NTT_P_FEATURE_IND)
		D_ANY_VAL	(FEATURE_NB)
		D_ANY_VAL	(FEATURE_NB_EXT)
		D_TABL      (STATUS_IND)
D_END   (END_SSDU)

START	(NTT_P_FEATURE_IND)
		ANY_VAL	(&i_feature_ind[0].feature_nb)
		ANY_VAL	(&i_feature_ind[0].feature_nb_ext)
		TABL	(NTT_T_STATUS_IND,		&i_feature_ind[0].status_ind)
END     (ntt_check_feature_ind)

			/* HLC : high layer compatibility */

D_START	(NTT_P_HLC)
	D_TABL (CODING_STD)

	D_IF_VAL		(CODING_CCITT)
		D_TABL		(TELESERVICE)
		D_TABL		(EXT_TELESERVICE)
	D_ELSE			(OTHER_CODING)
		D_ANY_VAL	(OTHER_TELE)
	D_END_IF		(CODING)
D_END (HLC_END)

START	(NTT_P_HLC)
	TABL (NTT_T_CODING_STD,					&i_hlc[0].coding_std)

	IF_VAL		(&i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL	(NTT_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		TABL	(NTT_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
	ELSE		()
		ANY_VAL	(&i_hlc[0].teleservice)
	END_IF		()
END (0)

			/* KEYPAD : keypad facility */

D_START	(NTT_P_KEYPAD)
	D_TEXT (KEYPAD_INFO)
D_END (KEYPAD_END)

START	(NTT_P_KEYPAD)
	TEXT (0,NTT_MX_SZ_KEYPAD,DIGIT_E,			&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END (0)

			/* LLC : low layer compatibility */

D_START	(NTT_P_LLC)
		D_TABL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_TABL		(OUT_BAND_NEG)
		D_TABL		(TRF_MODE)
		D_TABX		(TRF_RATE)
		D_TABL		(STRUCT)
		D_TABX		(DEST_RATE)
		D_TABL		(PROTOCOL_1)
D_END	(P_LLC_1)

START	(NTT_P_LLC)
		TABL	(NTT_T_CODING_STD,				&i_llc[0].coding_std)
		TABL	(NTT_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
		TABL	(NTT_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
		TABL	(NTT_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABX	(NTT_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
		TABL	(NTT_T_STRUCTURE,				&i_llc[0].structure)
		TABX	(NTT_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
		TABL	(NTT_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(ntt_llc_ra_ssdu)

		/* V110 */

D_START	(NTT_P_LLC_V110)
		D_TABL		(V110_SYN_ASYN)
		D_TABL		(V110_NEGOTIATION)
		D_TABL		(V110_USER_RATE)
		D_TABL		(V110_INTER_RATE)
		D_TABL		(V110_TX_NIC)
		D_TABL		(V110_RX_NIC)
		D_TABL		(V110_TX_FC)
		D_TABL		(V110_RX_FC)
		D_PAD		(PAD_9_14)
		D_TABL		(V110_STOP_BIT)
		D_TABL		(V110_DATA_BIT)
		D_TABL		(V110_PARITY)
		D_TABL		(V110_DUPLEX)
		D_TABL		(V110_MODEM)
D_END (ENDIF_V110)

START	(NTT_P_LLC_V110)
		TABL		(NTT_T_SYN_ASYN,			&i_llc[0].syn_asyn)
		TABL		(NTT_T_NEGOTIATION,			&i_llc[0].in_band_neg)
		TABL		(NTT_T_USER_RATE,			&i_llc[0].user_rate)
		TABL		(NTT_T_INTER_RATE,			&i_llc[0].inter_rate)
		TABL		(NTT_T_NIC_TX,				&i_llc[0].tx_nic)
		TABL		(NTT_T_NIC_RX,				&i_llc[0].rx_nic)
		TABL		(NTT_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
		TABL		(NTT_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
		PAD			(6)
		TABL		(NTT_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(NTT_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(NTT_T_PARITY,				&i_llc[0].parity)
		TABL		(NTT_T_DUPLEX,				&i_llc[0].duplex)
		TABL		(NTT_T_MODEM,				&i_llc[0].modem)
END	(0)


D_START	(NTT_P_LLC_V120)
		D_TABL		(V120_SYN_ASYN)
		D_TABL		(V120_NEGOTIATION)
		D_TABL		(V120_USER_RATE)
		D_PAD		(PAD_4_8)
		D_TABL		(V120_HDR)
		D_TABL		(V120_MULTI_FRAME)
		D_TABL		(V120_OP_MODE)
		D_TABL		(V120_LLI)
		D_TABL		(V120_ASSIGN)
		D_TABL		(V120_BAND)
		D_TABL		(V120_STOP_BIT)
		D_TABL		(V120_DATA_BIT)
		D_TABL		(V120_PARITY)
		D_TABL		(V120_DUPLEX)
		D_TABL		(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(NTT_P_LLC_V120)
		TABL		(NTT_T_SYN_ASYN,			&i_llc[0].syn_asyn)
		TABL		(NTT_T_NEGOTIATION,			&i_llc[0].in_band_neg)
		TABL		(NTT_T_USER_RATE,			&i_llc[0].user_rate)
		PAD			(5)
		TABL		(NTT_T_HEADER,				&i_llc[0].hdr)
		TABL		(NTT_T_MULTI_FRAME,			&i_llc[0].multi_frame)
		TABL		(NTT_T_OP_MODE,				&i_llc[0].op_mode)
		TABL		(NTT_T_LLI,					&i_llc[0].lli)
		TABL		(NTT_T_ASSIGN,				&i_llc[0].assign)
		TABL		(NTT_T_BAND,				&i_llc[0].band)
		TABL		(NTT_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(NTT_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(NTT_T_PARITY,				&i_llc[0].parity)
		TABL		(NTT_T_DUPLEX,				&i_llc[0].duplex)
		TABL		(NTT_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(NTT_P_LLC_PAD)
		D_PAD		(PAD_1_19)
D_END (END_PAD_RA)

START	(NTT_P_LLC_PAD)
		PAD			(19)
END (0)

D_START	(NTT_P_LLC_2)
		D_TABL		(PROTOCOL_ID_2)
		D_ANY_VAL	(OPT_2)
		D_TABL		(PROTOCOL_ID_3)
		D_ANY_VAL	(OPT_3)
D_END (LLC_E)

START	(NTT_P_LLC_2)
		TABL    	(NTT_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
		ANY_VAL		(&i_llc[0].option_2)
		TABL		(NTT_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
		ANY_VAL		(&i_llc[0].option_3)
END (0)

			/* NOTIF_IND : notification indicator */

D_START	(NTT_P_NOTIF_IND)
	D_TABL	(DESCR)
D_END		(NOTIF_IND_E)

START	(NTT_P_NOTIF_IND)
	TABL	(NTT_T_NOTIF_IND_DESCR,		&i_notif_ind[0].notif_descr)
END			(0)


			/* PROGRESS_IND : progress indicator */

D_START	(NTT_P_PROGRESS_IND)
	D_TABL	(CODING_STD)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(NTT_P_PROGRESS_IND)
	TABL	(NTT_T_CODING_STD,				&i_progress_ind[0].coding_std)
	TABL	(NTT_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	TABL	(NTT_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
END			(0)

			/* RESTART_IND : Restart indicator */

D_START		(NTT_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(NTT_P_RESTART_IND)
	TABL	(NTT_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

			/* Service Identifier         (SERVICE_ID) */

D_START	(NTT_SSDU_SERVICE_ID)
	D_ANY_VAL   (SERVICE_ID_CODE)
D_END   (END_SSDU)

START	(NTT_SSDU_SERVICE_ID)
	ANY_VAL	(&i_service_id[0].service_id)       /* check done in the automaton */
END			(0)

			/* SIGNAL : Signal */

D_START	(NTT_P_SIGNAL)
	D_TABL	(VAL_)
D_END		(SIGNAL_E)

START	(NTT_P_SIGNAL)
	TABL	(NTT_T_SIGNAL_VAL,		&i_signal[0].val)
END			(0)

			/* SPF_FAC : network specific facilities */

#if NS_SPF_FACILITY == ON

D_START	(NTT_P_SPF_FAC)
	D_ANY_VAL		(NETWORK_ID_LGTH)

	D_IF_VAL		(NOT_NULL_LGTH)
		D_TABL		(TYPE_NET_ID)
		D_TABL		(PLAN_NET_ID)
		D_FUNCTION	(SPF_FAC_FCT)
	D_ELSE			(NULL_LGTH)
		D_PAD		(TYPE_PLAN)
	D_END_IF		(NOT_NULL_LG)
	D_TEXT			(_FAC_INFO)
D_END				(SPF_FAC_END)

START	(NTT_P_SPF_FAC)
	ANY_VAL			(&i_spf_fac[0].net_id_lgth)

	IF_VAL			(&i_spf_fac[0].net_id_lgth, NE, 0)
		TABL		(NTT_T_NET_ID_TYPE,		&i_spf_fac[0].Net_id_type)
		TABL		(NTT_T_NET_ID_PLAN,		&i_spf_fac[0].Net_id_plan)
		FUNCTION	(ntt_spf_fac_ssdu)
	ELSE			()
		PAD			(2)
	END_IF			()
	TEXT			(0,NTT_MX_SZ_NET_ID,ANY_CHAR, &i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
END					(0)

#endif

			/* SWITCHHOOK : Switchhook */

D_START	(NTT_P_SWITCHHOOK)
		D_TABL  (HOOK_VAL)
D_END   (END_SSDU)

START	(NTT_P_SWITCHHOOK)
		TABL    (NTT_T_HOOK_VAL,                &i_switchhook[0].hook_val)
END     (0)

			/* TRANSIT_NET_SEL : Transit network selection */

D_START	(NTT_P_TRANSIT_NET_SEL)
	D_TABL	(TYPE)
	D_TABL	(PLAN)
	D_TEXT	(NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(NTT_P_TRANSIT_NET_SEL)
	TABL	(NTT_T_NET_ID_TYPE,			&i_transit_net_sel[0].net_id_type)
	TABL	(NTT_T_NET_ID_PLAN,			&i_transit_net_sel[0].net_id_plan)
	TEXT	(1,NTT_MX_SZ_TRANSIT_NET_SEL,ANY_CHAR,&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

			/* UUI : user to user information */

D_START	(NTT_P_UUI)
	D_TABL	(PROTOCOL_DISCR)
	D_TEXT	(UUI_INFO)
D_END		(UUI_END)

START	(NTT_P_UUI)
	TABL	(NTT_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)
	TEXT	(0,NTT_MX_SZ_UUI,ANY_CHAR, 	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END			(0)

/*EOF*/
