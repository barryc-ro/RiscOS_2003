
/*--------------------------------------------------------------------------*
 *                      M O D U L E     H E A D E R
 *
 * filename - mp_ie.ni1
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	ni1_bc_4ab_spdu				(Void_parm);
	uchar	ni1_bc_4b_spdu				(Void_parm);
	uchar	ni1_bc_5_spdu				(Void_parm);
	uchar	ni1_calling_nb_spdu			(Void_parm);
	uchar	ni1_cause_spdu				(Void_parm);
	uchar	ni1_chan_id_check			(Void_parm);
	uchar	ni1_conn_nb_spdu			(Void_parm);
	uchar	ni1_feature_act_ext			(Void_parm);
	uchar	ni1_feature_act_range		(Void_parm);
	uchar	ni1_feature_ind_ext			(Void_parm);
	uchar	ni1_feature_ind_range		(Void_parm);
	uchar	ni1_llc_4ab_spdu			(Void_parm);
	uchar	ni1_llc_4b_spdu				(Void_parm);
	uchar	ni1_llc_5_spdu				(Void_parm);
	uchar	ni1_llc_6_spdu				(Void_parm);
	uchar	ni1_llc_7_spdu				(Void_parm);
	uchar	ni1_o_called_nb_spdu		(Void_parm);
	uchar	ni1_redir_nb_spdu			(Void_parm);
	uchar	ni1_redirection_nb_spdu		(Void_parm);
	uchar	ni1_call_appear_ext			(Void_parm);

#endif

            /* ---------- Bearer capability (BC) */

D_START (NI1_BC_P)
        D_VAL               (CODING_STD)
        D_TABL              (TRF_CAP)
        D_EXT_1             (_3)
		D_VAL               (TRF_MODE)
		D_VAL               (TRF_RATE)
		D_FUNCTION			(OCTETS_4ab)

		D_IF_VAL			(NOT_DEFAULT_4ab)
			D_EXT_0_1		(_4_)
			D_VAL			(STRUCT)
			D_VAL			(CONFIG)
			D_VAL			(EST)
			D_FUNCTION		(OCTET_4b)

			D_IF_VAL		(NOT_DEFAULT_4b)
				D_EXT_0_1   (_4A)
				D_VAL		(SYMMETRY)
				D_VAL		(DEST_RATE)
			D_END_IF		(_4b)

		D_END_IF			(_4ab)
		D_EXT_1				(_4)
		D_OPTIONAL_OCTET    (_5_5A)
		D_FUNCTION          (OCTETS_5)

        D_IF_VAL            (OCTET_5_PR)
            D_VAL           (LAYER_1)
            D_TABL          (PROTOCOL_1)

                /* V110 */

            D_IF_VAL            (V110)
                D_EXT_0_1       (_5)
				D_VAL           (V110_USER_RATE)
				D_PAD           (NS_PAD_5a)
            D_END_IF            (ENDIF_V110)

            D_EXT_1             (END_5)
        D_END_IF                (_5_PR)

D_END   (BC_E)

START   (NI1_BC_P)
		VAL     (5,2,CODING_STD_CCITT,          &i_bc[0].coding_std)
		TABL    (0,5,NI1_T_TRF_CAP_BC,          &i_bc[0].trf_cap)
		EXT_1   ()
		VAL     (5,2,TRF_MODE_CIRCUIT,          &i_bc[0].trf_mode)
		VAL     (0,5,TRF_RATE_64KBS,            &i_bc[0].trf_rate)
		FUNCTION(ni1_bc_4ab_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1	()
			VAL		(4,3,STRUCTURE_8KHZ_INT,		&i_bc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_bc[0].config)
			VAL		(0,2,EST_DEMAND,				&i_bc[0].est)
			FUNCTION(ni1_bc_4b_spdu)

			IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1 ()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_bc[0].symmetry)
				VAL     (0,5,TRF_RATE_64KBS,        &i_bc[0].dest_rate)
			END_IF		()

		END_IF	()

		EXT_1	()
		OPTIONAL_OCTET ()
        FUNCTION(ni1_bc_5_spdu)

        IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
            VAL     (5,2,LAYER_ID_1,                &i_bc[0].layer_id_1)
            TABL    (0,5,NI1_T_BC_PROTOCOL_ID_1,    &i_bc[0].protocol_id_1)

                /* V110 */

            IF_VAL      (I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
                EXT_0_1 ()
                VAL     (0,5,RA_56KBS,                  &i_bc[0].user_rate)
                PAD     (5,2)
            END_IF      ()

            EXT_1   ()
        END_IF  ()

END     (0)

            /* ---------- Call state (CALL_STATE) */

D_START (NI1_CALL_STATE_P)
    D_TABL      (VAL_)
    D_END_OCTET (_3)
D_END           (CALL_STATE_E)

START   (NI1_CALL_STATE_P)
    TABL        (0,8,NI1_T_CALL_STATE,              &i_call_state[0].val)
    END_OCTET   ()
END             (0)

            /* ---------- Called party number (CALLED_NB) */

D_START (NI1_CALLED_NB_P)
        D_TABL  (TYPE)
        D_TABL  (PLAN_ID)
        D_EXT_1 (_3)
        D_TEXT  (DIGIT_)
D_END   (CALLED_NB_E)

START   (NI1_CALLED_NB_P)
		TABL    (4,3,NI1_T_NB_TYPE,  &i_called_nb[0].nb_type)
		TABL    (0,4,NI1_T_NB_PLAN,  &i_called_nb[0].plan_id)
		EXT_1   ()
		TEXT    (IA5, DIGIT_E, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END  (0)

            /* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START (NI1_CALLED_SUB_ADD_P)
		D_TABL  		(TYPE)
		D_TABL  		(IND)
		D_PAD   		(NS_PAD_3)
		D_EXT_1 		(_3)

		D_IF_VAL		(OSI_SUB_ADD)
			D_VAL		(INFO_SUB_ADD_F)
			D_END_OCTET	(INFO_SUB_ADD_5)
			D_TEXT  	(INFO_OSI)
		D_ELSE			(NOT_OSI)
			D_TEXT  	(INFO_NOT_OSI)
		D_END_IF		(TYPE_SUB_ADD)

D_END   (CALLED_SUB_ADD_Q)

START   (NI1_CALLED_SUB_ADD_P)
		TABL    		(4,3,NI1_T_SUB_ADD_TYPE,    &i_called_sub_add[0].sub_add_type)
		TABL    		(3,1,NI1_T_SUB_ADD_IND,     &i_called_sub_add[0].odd_even_ind)
		PAD     		(0,3)
		EXT_1   		()

		IF_VAL  		(I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL			(0,8,		FORMAT_IA5,		&i_called_sub_add[0].format)
			END_OCTET	()
			TEXT		(IA5,	 	ANY_CHAR, 		&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		ELSE			()
			TEXT		(BINARY, 	ANY_OCTET,		&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		END_IF			()
END
(0)

			/* ---------- Calling party number (CALLING_NB) */

D_START (NI1_CALLING_NB_P)
		D_TABL       (TYPE)
		D_TABL       (PLAN_ID)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_FUNCTION  (CALLING_NB_FCT)

		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1   (_3)
			D_TABL      (PRESENTATION)
			D_PAD       (NS_PAD_3A)
			D_TABL      (SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1     (_3A)
		D_TEXT      (DIGIT_)
D_END   (CALLING_NB_E)

START   (NI1_CALLING_NB_P)
		TABL    (4,3,NI1_T_NB_TYPE,  &i_calling_nb[0].nb_type)
		TABL    (0,4,NI1_T_NB_PLAN,  &i_calling_nb[0].plan_id)
		OPTIONAL_OCTET ()
		FUNCTION(ni1_calling_nb_spdu)

		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL    (5,2,NI1_T_PRES_IND,    &i_calling_nb[0].pres)
			PAD     (2,3)
			TABL    (0,2,NI1_T_SCREEN_IND,  &i_calling_nb[0].screen_ind)
		END_IF  ()

		EXT_1   ()
		TEXT    (IA5,DIGIT, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END     (0)

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START (NI1_CALLING_SUB_ADD_P)
		D_TABL  		(TYPE)
		D_TABL  		(IND)
		D_PAD   		(NS_PAD_3)
		D_EXT_1 		(_3)

		D_IF_VAL		(OSI_SUB_ADD)
			D_VAL		(INFO_SUB_ADD_F)
			D_END_OCTET	(INFO_SUB_ADD_5)
			D_TEXT  	(INFO_OSI)
		D_ELSE			(NOT_OSI)
			D_TEXT  	(INFO_NOT_OSI)
		D_END_IF		(TYPE_SUB_ADD)

D_END   (CALLING_SUB_ADD_E)

START   (NI1_CALLING_SUB_ADD_P)
		TABL    		(4,3,NI1_T_SUB_ADD_TYPE,    &i_calling_sub_add[0].sub_add_type)
		TABL    		(3,1,NI1_T_SUB_ADD_IND,     &i_calling_sub_add[0].odd_even_ind)
		PAD     		(0,3)
		EXT_1   		()

		IF_VAL  		(I_IF, &i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL			(0,8,		FORMAT_IA5,		&i_calling_sub_add[0].format)
			END_OCTET	()
			TEXT		(IA5,	 	ANY_CHAR, 		&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		ELSE			()
			TEXT		(BINARY, 	ANY_OCTET,		&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		END_IF			()

END     (0)

			/* ---------- Cause (CAUSE) */

D_START (NI1_CAUSE_P)
	D_TABL      (CODING_STD)
	D_PAD       (NS_PAD_3)
    D_TABL      (LOCATION)
	D_EXT_1     (_3A)
    D_TABL      (C_CLASS)

    D_IF_VAL    (CODING_STD_IS_CCITT)
        D_TABX  (C_V_CCITT)
    D_ELSE      (CODING_SPF)
        D_TABX  (C_V_SPF)
    D_END_IF    (X_C_V)

    D_EXT_1  (_4)
D_END   (CAUSE_E_A)

START   (NI1_CAUSE_P)
    TABL    (5,2,NI1_T_CAUSE_CODING_STD,    &i_cause[0].coding_std)
    PAD     (4,1)
    TABL    (0,4,NI1_T_LOCATION,            &i_cause[0].cause_loc)
    EXT_1   ()
    TABL    (4,3,NI1_T_C_C,                 &i_cause[0].cause_class)

    IF_VAL  (I_IF, &i_cause[0].coding_std, EQ, CODING_STD_CCITT)
		TABX    (0,4,NI1_TX_C_V_CCITT,      &i_cause[0].cause_class,  &i_cause[0].cause_val)
	ELSE    ()
		TABX    (0,4,NI1_TX_C_V_SPF,		&i_cause[0].cause_class,  &i_cause[0].cause_val)
	END_IF  ()

	EXT_1   ()
END     (ni1_cause_spdu)

D_START (NI1_DIAG_P)
	D_TEXT  (OCTET)
D_END       (DIAGNOSTIC_E)

START   (NI1_DIAG_P)
	TEXT    (BINARY, ANY_OCTET,     &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END         (0)

            /* ---------- Channel idendification (CHAN_ID) */

D_START (NI1_CHAN_ID_P)
	D_TABL          (INT_ID)
	D_TABL          (INT_TYPE)
	D_PAD           (NS_PAD_3)
	D_TABL          (PREF_EXCL)
	D_TABL          (D_CHAN_)
	D_TABX          (SEL)
	D_EXT_1         (_3)

	D_IF_VAL        (_INT_EXPL_)
		D_TABL      (_INT_ID_VAL_)
		D_EXT_1     (_INT_)
	D_END_IF        (_3_1_)

    D_IF_VAL        (IF_NO_CHAN)
        D_OPTIONAL_OCTET (_NEXT_)
    D_END_IF        (NO_CHANNEL)

    D_IF_VAL        (IF_3_2)
        D_VAL       (CODING)
        D_TABL      (NB_MAP)
        D_VAL       (TYPE)
        D_EXT_1     (_3_2)
        D_TABL      (NBER)
        D_EXT_1     (_3_3)
    D_END_IF        (BRI_TYPE)

D_END   (CHAN_ID_E)

START   (NI1_CHAN_ID_P)
	TABL    (6,1,NI1_T_CHAN_INT,        &i_chan_id[0].int_id)
	TABL    (5,1,NI1_T_INT_TYPE,        &i_chan_id[0].int_type)
    PAD     (4,1)
    TABL    (3,1,NI1_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
    TABL    (2,1,NI1_T_D_CHAN,          &i_chan_id[0].d_chan)
    TABX    (0,2,NI1_TX_CHAN_SEL,       &i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
    EXT_1   ()

    IF_VAL  (I_IF, &i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
        TABL    (0,7,NI1_T_INT_VALUE,   &i_chan_id[0].int_id_val)
		EXT_1   ()
    END_IF  ()

    IF_VAL  (I_IF, &i_chan_id[0].chan_sel, EQ, NO_CHAN)
        OPTIONAL_OCTET ()
    END_IF  ()

	IF_VAL  (I_IF,  &i_chan_id[0].int_type, NE, INT_TYPE_BRI)
        VAL     (5,2,CODING_STD_CCITT,  &i_chan_id[0].coding_std)
        VAL     (4,1,CHAN_NUMBER,       &i_chan_id[0].nb_map)
        VAL     (0,4,B_CHAN,            &i_chan_id[0].chan_type)
        EXT_1   ()
        TABL    (0,7,NI1_T_CHAN_NUMBER, &i_chan_id[0].chan_nb)
        EXT_1   ()
    END_IF  ()

END     (ni1_chan_id_check)

            /* ---------- Connected number (CONN_NB) */

D_START (NI1_CONN_NB_P)
		D_TABL       (TYPE)
		D_TABL       (PLAN_ID)
		D_OPTIONAL_OCTET (CONN_NB_OPTIONAL)
		D_FUNCTION  (CONN_NB_FCT)

		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1   (_3)
			D_TABL      (PRESENTATION)
			D_PAD       (NS_PAD_3A)
			D_TABL      (SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1     (_3A)
		D_TEXT      (DIGIT_)
D_END   (CONN_NB_E)

START   (NI1_CONN_NB_P)
		TABL    (4,3,NI1_T_NB_TYPE,  &i_conn_nb[0].nb_type)
		TABL    (0,4,NI1_T_NB_PLAN,  &i_conn_nb[0].plan_id)
		OPTIONAL_OCTET ()
		FUNCTION(ni1_conn_nb_spdu)

		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL    (5,2,NI1_T_PRES_IND,    &i_conn_nb[0].pres)
			PAD     (2,3)
			TABL    (0,2,NI1_T_SCREEN_IND,  &i_conn_nb[0].screen_ind)
		END_IF  ()

		EXT_1   ()
		TEXT    (IA5,DIGIT, &i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END     (0)

/*---------- Endpoint identifier (ENDPOINT_ID) */

D_START (NI1_ENDPOINT_ID_P)
        D_ANY_VAL   (USID)
        D_EXT_1     (_3)

        D_TABL      (INTERP)
        D_ANY_VAL   (TID)
        D_EXT_1     (_4)
D_END   (END_SPDU)

START   (NI1_ENDPOINT_ID_P)
        ANY_VAL (0,7,                       &i_endpoint_id[0].usid)
		EXT_1   ()

        TABL    (6,1,NI1_T_INTERPRETER,     &i_endpoint_id[0].interp)
        ANY_VAL (0,6,                       &i_endpoint_id[0].tid)
        EXT_1   ()
END     (0)

			/* ---------- Feature activation (FEATURE_ACT) */

D_START (NI1_FEATURE_ACT_P)
    D_ANY_VAL   (FEATURE_ID_NB)
    D_FUNCTION  (TEST_EXT_FEATURE_ID)

    D_IF_VAL    (EXT_PRESENT)
        D_EXT_0_1   (_3_)
        D_ANY_VAL   (EXT_FEATURE_ID_NB)
    D_END_IF    (_3A)

    D_EXT_1     (_3_OR_3a)
D_END       (FEATURE_ACT_E)

START   (NI1_FEATURE_ACT_P)
	ANY_VAL (0,7,   &i_feature_act[0].feature_nb)
	FUNCTION(ni1_feature_act_ext)

	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 ()
		ANY_VAL (0,7,   &i_feature_act[0].feature_nb_ext)
	END_IF  ()

	EXT_1   ()
END         (ni1_feature_act_range)

            /* ---------- Feature indication (FEATURE_IND) */

D_START (NI1_FEATURE_IND_P)
    D_ANY_VAL   (FEATURE_ID_NB)
	D_FUNCTION  (TEST_EXT_FEATURE_ID)

    D_IF_VAL    (EXT_PRESENT)
        D_EXT_0_1   (_3_)
        D_ANY_VAL   (EXT_FEATURE_ID_NB)
	D_END_IF    (_3A)

    D_EXT_1     (_3_OR_3a)
    D_PAD       (PADDING_4)
    D_TABL      (STATUS_IND)
    D_END_OCTET (_4_)
D_END   (FEATURE_IND_E)

START   (NI1_FEATURE_IND_P)
    ANY_VAL (0,7,   &i_feature_ind[0].feature_nb)
    FUNCTION(ni1_feature_ind_ext)

    IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
        EXT_0_1 ()
        ANY_VAL (0,7,               &i_feature_ind[0].feature_nb_ext)
    END_IF  ()

    EXT_1   ()
    PAD     (4,4)
    TABL    (0,4, NI1_T_STATUS_IND, &i_feature_ind[0].status_ind)
    END_OCTET ()
END     (ni1_feature_ind_range)

            /* ---------- High layer compatibility (HLC) */

D_START (NI1_HLC_P)
    D_VAL               (INTERPRETATION)
    D_VAL               (PRESENTATION)
    D_TABL              (CODING_STD)
    D_EXT_1             (_3)
    D_IF_VAL            (IF_4)
        D_TABL          (TELESERVICE)

        D_IF_TABL       (IS_EXT_TELESERVICE)
            D_EXT_0_1   (_4)
			D_TABL      (EXT_TELESERVICE)
        D_END_IF        (IS_EXTENDED)
        D_EXT_1         (_5)
    D_ELSE              (ELSE_4)
        D_ANY_VAL       (TELESERVICE_SPF)
        D_EXT_1         (_4_SPF)
    D_END_IF            (ENDIF_4)
D_END                       (HLC_E)

START   (NI1_HLC_P)
    VAL                 (2,3,INTER_CCITT_CEPT,          &i_hlc[0].interpretation)
    VAL                 (0,2,PRESENTATION_PROFIL,       &i_hlc[0].pres)
    TABL                (5,2,NI1_T_CODING_STD,          &i_hlc[0].coding_std)
    EXT_1               ()

    IF_VAL              (I_IF, &i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
        TABL            (0,7,NI1_T_TELESERVICE_CCITT,   &i_hlc[0].teleservice)

        IF_TABL         (I_IF, &i_hlc[0].teleservice, IN, NI1_T_TELESERVICE_EXT)
            EXT_0_1     ()
            TABL        (0,7,NI1_T_TELESERVICE_CCITT,   &i_hlc[0].ext_teleservice)
        END_IF          ()
        EXT_1           ()
    ELSE                ()
        ANY_VAL         (0,7,   &i_hlc[0].teleservice)
        EXT_1           ()
	END_IF              ()
END	(0)

			/* ---------- Information request (INFORMATION_RQ) */

D_START (NI1_INFORMATION_RQ_P)
	D_TABL  (INFO_TYPE)
	D_TABL  (INFO_IND)
	D_EXT_0_1 (_3_)
	D_TABL  (INFO_SPECIFIC)
	D_EXT_1 (_3A_)
D_END       (INFORMATION_RQ_E)

START   (NI1_INFORMATION_RQ_P)
	TABL    (0,6, NI1_T_INFO_TYPE,  &i_information_rq[0].info_type)
	TABL    (6,1, NI1_T_INFO_IND,   &i_information_rq[0].info_ind)
	EXT_0_1 ()
	TABL    (0,7, NI1_T_INFO_SPECIF,&i_information_rq[0].info_specific)
	EXT_1	()
END         (0)

            /* ---------- Keypad (KEYPAD) */

D_START (NI1_KEYPAD_P)
    D_TEXT  (VAL_)
D_END       (KEYPAD_E)

START   (NI1_KEYPAD_P)
	TEXT    (IA5,DIGIT_E, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END         (0)

            /* ---------- Low layer compatibility (LLC) */

D_START (NI1_LLC_P)
    D_TABL      (CODING_STD)
    D_TABL      (TRF_CAP)
    D_EXT_0_1   (_3)
    D_TABL      (OUT_BAND_NEG)
    D_PAD       (NS_PAD_3A)
    D_EXT_1     (_3A)
    D_TABL      (TRF_MODE)
    D_TABX      (TRF_RATE)
    D_FUNCTION  (IF_4AB)

    D_IF_VAL    (_4AB_NOT_DEFAULT)
        D_EXT_0_1   (_4)
        D_VAL       (CONFIG)
        D_VAL       (EST)
        D_TABL      (STRUCT)
        D_FUNCTION  (IF_4B)

        D_IF_VAL    (_4B_NOT_DEFAULT)
            D_EXT_0_1   (_4A)
            D_VAL       (SYMMETRY)
            D_TABX      (DEST_RATE)
        D_END_IF    (E_4B_NOT_DEFAULT)
    D_END_IF    (E_4AB_NOT_DEFAULT)
    D_EXT_1     (_4B)

    D_OPTIONAL_OCTET    (_5_6_7)

    D_FUNCTION  (IF_5)
    D_IF_VAL    (LLC_5_PR)

        D_VAL       (LAYER_1)
		D_TABL      (PROTOCOL_1)

            /* V110 */

        D_IF_VAL        (V110)
            D_EXT_0_1   (_5_V110)
            D_TABL      (V110_SYN_ASYN)
            D_TABL      (V110_NEGOTIATION)
            D_TABL      (V110_USER_RATE)
            D_EXT_0_1   (V110_5A)
            D_TABL      (V110_INTER_RATE)
            D_TABL      (V110_TX_NIC)
            D_TABL      (V110_RX_NIC)
            D_TABL      (V110_TX_FC)
            D_TABL      (V110_RX_FC)
			D_PAD       (V110_PAD_5B)
            D_EXT_0_1   (V110_5B)
            D_TABL      (V110_STOP_BIT)
            D_TABL      (V110_DATA_BIT)
            D_TABL      (V110_PARITY)
            D_EXT_0_1   (V110_5C)
            D_TABL      (V110_DUPLEX)
            D_TABL      (V110_MODEM)
        D_END_IF        (ENDIF_V110)

            /* V120 */

        D_IF_VAL        (V120_)
			D_EXT_0_1   (_5_V120)
            D_TABL      (V120_SYN_ASYN)
            D_TABL      (V120_NEGOTIATION)
            D_TABL      (V120_USER_RATE)
            D_EXT_0_1   (V120_5A)
            D_TABL      (V120_HDR)
            D_TABL      (V120_MULTI_FRAME)
            D_TABL      (V120_OP_MODE)
            D_TABL      (V120_LLI)
			D_TABL      (V120_ASSIGN)
            D_TABL      (V120_BAND)
            D_PAD       (V120_PAD_5B)
            D_EXT_0_1   (V120_5B)
            D_TABL      (V120_STOP_BIT)
            D_TABL      (V120_DATA_BIT)
            D_TABL      (V120_PARITY)
            D_EXT_0_1   (V120_5C)
			D_TABL      (V120_DUPLEX)
            D_TABL      (V120_MODEM)
        D_END_IF    (ENDIF_V120)

        D_EXT_1     (_5_)

    D_END_IF    (ENDIF_5_PR)

    D_FUNCTION  (OCTET_6)
    D_IF_VAL    (OCTET_6_PR)
        D_VAL       (L_ID_2)
        D_TABL      (PROTOCOL_ID_2)
        D_EXT_0_1   (_6)
		D_ANY_VAL   (OPTION_2)
        D_EXT_1     (_6A)
    D_END_IF    (ENDIF_6_PR)

    D_FUNCTION  (OCTET_7)
    D_IF_VAL    (OCTET_7_PR)
        D_VAL       (L_ID_3)
        D_TABL      (PROTOCOL_ID_3)
        D_EXT_0_1   (_7)
        D_ANY_VAL   (OPTION_3)
        D_EXT_1     (_7A)
    D_END_IF    (ENDIF_7_PR)

D_END (LLC_E)

START   (NI1_LLC_P)
    TABL    (5,2,NI1_T_CODING_STD,              &i_llc[0].coding_std)
    TABL    (0,5,NI1_T_TRF_CAP_LLC,             &i_llc[0].trf_cap)
    EXT_0_1 ()
    TABL    (6,1,NI1_T_OUT_BAND_NEG,            &i_llc[0].out_band_neg)
    PAD     (0,6)
    EXT_1   ()
    TABL    (5,2,NI1_T_TRF_MODE,                &i_llc[0].trf_mode)
	TABX    (0,5,NI1_TX_TRF_RATE,               &i_llc[0].trf_mode, &i_llc[0].trf_rate)
    FUNCTION(ni1_llc_4ab_spdu)

    IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
        EXT_0_1 ()
        VAL     (2,2,CONFIG_POINT_TO_POINT,     &i_llc[0].config)
        VAL     (0,2,EST_DEMAND,                &i_llc[0].est)
		TABL    (4,3,NI1_T_STRUCTURE,           &i_llc[0].structure)

		FUNCTION(ni1_llc_4b_spdu)
        IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
            EXT_0_1 ()
            VAL     (5,2,BIDIRECTIONAL_SYMMETRY,    &i_llc[0].symmetry)
            TABX    (0,5,NI1_TX_TRF_RATE,           &i_llc[0].trf_mode, &i_llc[0].dest_rate)
        END_IF  ()
    END_IF  ()
    EXT_1   ()

    OPTIONAL_OCTET  ()

        /* following octets may be optional in some other circumstances */

    FUNCTION(ni1_llc_5_spdu)
    IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

        VAL     (5,2,LAYER_ID_1,                &i_llc[0].layer_id_1)
        TABL    (0,5,NI1_T_PROTOCOL_ID_LLC_1,   &i_llc[0].protocol_id_1)

            /* V110 */

        IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
            EXT_0_1 ()
            TABL    (6,1,NI1_T_SYN_ASYN,            &i_llc[0].syn_asyn)
            TABL    (5,1,NI1_T_NEGOTIATION,         &i_llc[0].in_band_neg)
            TABL    (0,5,NI1_T_USER_RATE,           &i_llc[0].user_rate)
            EXT_0_1 ()
            TABL    (5,2,NI1_T_INTER_RATE,          &i_llc[0].inter_rate)
			TABL    (4,1,NI1_T_NIC_TX,              &i_llc[0].tx_nic)
            TABL    (3,1,NI1_T_NIC_RX,              &i_llc[0].rx_nic)
            TABL    (2,1,NI1_T_FLOW_CONTROL_TX,     &i_llc[0].tx_fc)
            TABL    (1,1,NI1_T_FLOW_CONTROL_RX,     &i_llc[0].rx_fc)
            PAD     (0,1)
            EXT_0_1 ()
            TABL    (5,2,NI1_T_STOP_BIT,            &i_llc[0].stop_bit)
			TABL    (3,2,NI1_T_DATA_BIT,            &i_llc[0].data_bit)
            TABL    (0,3,NI1_T_PARITY,              &i_llc[0].parity)
            EXT_0_1 ()
            TABL    (6,1,NI1_T_DUPLEX,              &i_llc[0].duplex)
            TABL    (0,6,NI1_T_MODEM,               &i_llc[0].modem)
        END_IF  ()

            /* V120 */

        IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
			EXT_0_1 ()
            TABL    (6,1,NI1_T_SYN_ASYN,            &i_llc[0].syn_asyn)
            TABL    (5,1,NI1_T_NEGOTIATION,         &i_llc[0].in_band_neg)
            TABL    (0,5,NI1_T_USER_RATE,           &i_llc[0].user_rate)
            EXT_0_1 ()
            TABL    (6,1,NI1_T_HEADER,              &i_llc[0].hdr)
            TABL    (5,1,NI1_T_MULTI_FRAME,         &i_llc[0].multi_frame)
            TABL    (4,1,NI1_T_OP_MODE,             &i_llc[0].op_mode)
            TABL    (3,1,NI1_T_LLI,                 &i_llc[0].lli)
            TABL    (2,1,NI1_T_ASSIGN,              &i_llc[0].assign)
            TABL    (1,1,NI1_T_BAND,                &i_llc[0].band)
            PAD     (0,1)
            EXT_0_1 ()
			TABL    (5,2,NI1_T_STOP_BIT,            &i_llc[0].stop_bit)
            TABL    (3,2,NI1_T_DATA_BIT,            &i_llc[0].data_bit)
            TABL    (0,3,NI1_T_PARITY,              &i_llc[0].parity)
            EXT_0_1 ()
            TABL    (6,1,NI1_T_DUPLEX,              &i_llc[0].duplex)
            TABL    (0,6,NI1_T_MODEM,               &i_llc[0].modem)
        END_IF  ()
        EXT_1   ()

    END_IF ()   /* octet 5 present */

    FUNCTION(ni1_llc_6_spdu)
    IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
        VAL     (5,2,LAYER_ID_2,                &i_llc[0].layer_id_2)
        TABL    (0,5,NI1_T_PROTOCOL_ID_LLC_2,   &i_llc[0].protocol_id_2)
        EXT_0_1 ()
        ANY_VAL (0,7,                           &i_llc[0].option_2)
        EXT_1   ()
    END_IF ()   /* octet 6 present */

    FUNCTION(ni1_llc_7_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
        VAL     (5,2,LAYER_ID_3,                &i_llc[0].layer_id_3)
        TABL    (0,5,NI1_T_PROTOCOL_ID_LLC_3,   &i_llc[0].protocol_id_3)
        EXT_0_1 ()
        ANY_VAL (0,7,                           &i_llc[0].option_3)
        EXT_1   ()
    END_IF  ()  /* octet 7 present */


END (0)

/*--------------------------------------------------------------------------*/

            /* ---------- Notification indicator (NOTIF_IND) */

D_START (NI1_NOTIF_IND_P)
    D_TABL  (DESCR)
    D_EXT_1 (_3)
D_END       (NOTIF_IND_E)

START   (NI1_NOTIF_IND_P)
	TABL    (0,7,NI1_T_NOTIF_IND_DESCR,  &i_notif_ind[0].notif_descr)
    EXT_1   ()
END         (0)

			/* ---------- Original Called party number (O_CALLED_NB) */

D_START (NI1_O_CALLED_NB_P)
		D_TABL       (TYPE)
		D_TABL       (PLAN_ID)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_FUNCTION  (CALLING_NB_FCT)

		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1   (_3)
			D_TABL      (PRESENTATION)
			D_PAD       (NS_PAD_3A)
			D_TABL      (SCREEN_IND)
			D_EXT_0_1	(_3A)
			D_PAD		(_3_)
			D_TABL		(O_REDIR_REASON)
			D_EXT_0_1	(_3B)
			D_TABL		(_CFNR)
			D_PAD		(__3_)
			D_TABL 		(REDIR_COUNTER)
		D_END_IF(DEF_VAL)

		D_EXT_1     (_3A_)
		D_TEXT      (DIGIT_)
D_END   (O_CALLED_NB_E)

START   (NI1_O_CALLED_NB_P)
		TABL    (4,3,NI1_T_NB_TYPE,  			&i_o_called_nb[0].nb_type)
		TABL    (0,4,NI1_T_NB_PLAN,  			&i_o_called_nb[0].plan_id)
		OPTIONAL_OCTET ()
		FUNCTION(ni1_o_called_nb_spdu)

		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL    (5,2,NI1_T_PRES_IND,    	&i_o_called_nb[0].pres)
			PAD     (2,3)
			TABL    (0,2,NI1_T_SCREEN_IND,  	&i_o_called_nb[0].screen_ind)
			EXT_0_1	()
			PAD		(4,3)
			TABL	(0,4,NI1_T_O_REDIR_REASON,	&i_o_called_nb[0].reason)
			EXT_0_1	()
			TABL	(6,1,NI1_T_CFNR,			&i_o_called_nb[0].cfnr)
			PAD		(3,3)
			TABL 	(0,3,NI1_T_REDIR_COUNTER, 	&i_o_called_nb[0].redir_counter)
		END_IF  ()

		EXT_1   ()
		TEXT    (IA5,DIGIT_E, &i_o_called_nb[0].lgth, (uchar **)&i_o_called_nb[0].p_add)
END     (0)

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START (NI1_PROGRESS_IND_P)
	D_TABL  (LOCATION)
	D_TABL  (CODING_STD)
	D_PAD   (NS_PAD_3)
	D_EXT_1 (_3)
	D_TABX  (DESCRIPTION)
	D_EXT_1 (_4)
D_END       (PROGRESS_IND_E)

START   (NI1_PROGRESS_IND_P)
	TABL    (0,4,NI1_T_PROGRESS_LOC,    		&i_progress_ind[0].progress_loc)
    TABL    (5,2,NI1_T_CODING_STD,              &i_progress_ind[0].coding_std)
    PAD     (4,1)
    EXT_1   ()
    TABX    (0,7,NI1_TX_PROG_DESCR, &i_progress_ind[0].coding_std,  &i_progress_ind[0].progress_descr)
    EXT_1   ()
END         (0)

            /* ---------- Redirecting number (REDIR_NB) */

D_START (NI1_REDIR_NB_P)
		D_TABL       (TYPE)
		D_TABL       (PLAN_ID)
		D_OPTIONAL_OCTET (REDIR_NB_OPTIONAL)
		D_FUNCTION  (REDIR_NB_FCT)

		D_IF_VAL    (DEFAULT_VAL)
			D_EXT_0_1   (_3)
			D_TABL      (PRESENTATION)
			D_PAD       (NS_PAD_3A)
			D_TABL      (SCREEN_IND)
			D_EXT_0_1   (_3a)
			D_TABL      (REASON_REDIR)
			D_PAD       (_3b_)
		D_END_IF    (DEF_VAL)

		D_EXT_1     (_3_OR_3b)
		D_TEXT      (DIGIT_)
D_END   (REDIR_NB_E)

START   (NI1_REDIR_NB_P)
		TABL    	(4,3,NI1_T_NB_TYPE,  &i_redir_nb[0].nb_type)
		TABL    	(0,4,NI1_T_NB_PLAN,  &i_redir_nb[0].plan_id)
		OPTIONAL_OCTET ()
        FUNCTION(ni1_redir_nb_spdu)

        IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
            EXT_0_1 ()
            TABL    (5,2,NI1_T_PRES_IND,    &i_redir_nb[0].pres)
            PAD     (2,3)
			TABL    (0,2,NI1_T_SCREEN_IND,  &i_redir_nb[0].screen_ind)
			EXT_0_1 ()
			TABL    (0,4,NI1_T_REASON_REDIR,&i_redir_nb[0].reason)
			PAD     (4,3)
		END_IF  ()

		EXT_1   ()
		TEXT    (IA5,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END     (0)

            /* ---------- Redirection number (REDIRECTION_NB) */

D_START (NI1_REDIRECTION_NB_P)
		D_TABL       (TYPE)
		D_TABL       (PLAN_ID)
		D_OPTIONAL_OCTET (REDIRECTION_NB_OPTIONAL)
		D_FUNCTION  (REDIRECTION_NB_FCT)

		D_IF_VAL    (DEFAULT_VAL)
			D_EXT_0_1   (_3)
			D_TABL      (PRESENTATION)
			D_PAD       (NS_PAD_3A)
			D_TABL      (SCREEN_IND)
			D_EXT_0_1   (_3a)
			D_TABL      (REASON_REDIRECTION)
			D_PAD       (_3b_)
		D_END_IF    (DEF_VAL)

		D_EXT_1     (_3A)
		D_TEXT      (DIGIT_)
D_END   (REDIRECTION_NB_E)

START   (NI1_REDIRECTION_NB_P)
		TABL    	(4,3,NI1_T_NB_TYPE,  &i_redirection_nb[0].nb_type)
		TABL    	(0,4,NI1_T_NB_PLAN,  &i_redirection_nb[0].plan_id)
		OPTIONAL_OCTET ()
		FUNCTION(ni1_redirection_nb_spdu)

		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL    (5,2,NI1_T_PRES_IND,    &i_redirection_nb[0].pres)
			PAD     (2,3)
			TABL    (0,2,NI1_T_SCREEN_IND,  &i_redirection_nb[0].screen_ind)
			EXT_0_1 ()
			TABL    (0,4,NI1_T_REASON_REDIR,&i_redirection_nb[0].reason)
			PAD     (4,3)
		END_IF  ()

		EXT_1   ()
		TEXT    (IA5,DIGIT, &i_redirection_nb[0].lgth, (uchar **)&i_redirection_nb[0].p_add)
END     (0)

            /* ---------- Restart indicator */

D_START     (NI1_RESTART_IND_P)
    D_PAD   (NS_PAD_)
	D_TABL  (CLASS)
	D_EXT_1 (_3)
D_END       (RESTART_IND_E)

START       (NI1_RESTART_IND_P)
	PAD     (3,4)
	TABL    (0,3,NI1_T_RESTART_IND, &i_restart_ind[0].restart_class)
    EXT_1   ()
END         (0)

            /* ---------- Signal (SIGNAL) */

D_START (NI1_SIGNAL_P)
    D_TABL      (VAL_)
    D_END_OCTET (_3)
D_END           (SIGNAL_E)

START   (NI1_SIGNAL_P)
    TABL        (0,8,NI1_T_SIGNAL_VAL,  &i_signal[0].val)
    END_OCTET   ()
END             (0)

            /* ---------- spid (SPID) */

D_START (NI1_SPID_P)
	D_TEXT  (VAL_)
D_END       (SPID_E)

START   (NI1_SPID_P)
    TEXT    (IA5,ANY_CHAR, &i_spid[0].lgth, (uchar **)&i_spid[0].p_spid)
END         (0)

            /* ---------- Transit network selection (TRANSIT_NET_SEL) */

D_START (NI1_TRANSIT_NET_SEL_P)
	D_TABL   (TYPE)
	D_TABL   (PLAN)
	D_EXT_1 (_3)
	D_TEXT  (NET_ID)
D_END       (TRANSIT_NET_SEL_E)

START   (NI1_TRANSIT_NET_SEL_P)
	TABL     (4,3,NI1_T_NET_ID_TYPE,  &i_transit_net_sel[0].net_id_type)
	TABL     (0,4,NI1_T_NET_ID_PLAN,  &i_transit_net_sel[0].net_id_plan)
    EXT_1   ()
	TEXT    (IA5,ANY_CHAR,            &i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END         (0)

			/* ---------- Display (codeset 5, DISPLAY_TXT) */

D_START	(NI1_DISPLAY_TXT_P)
	D_VAL	(TYPE)
	D_EXT_1	(_3)
	D_TEXT  (INFO_)
D_END		(DISPLAY_E)

START	(NI1_DISPLAY_TXT_P)
	VAL		(0,7,DISPLAY_TYPE_NORMAL,	&i_display[0].display_type)
	EXT_1	()
	TEXT	(IA5,ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END			(0)

			/* ---------- Operator System Access (codeset 5, OS_ACCSS) */

D_START (NI1_OS_ACCSS_P)
    D_VAL   (SERVICE_TYPE)
    D_TABL  (ACCSS_TYPE)
    D_EXT_1 (_3_)
D_END       (OS_ACCSS_E)

START   (NI1_OS_ACCSS_P)
    VAL     (2,5,   SERVICE_TYPE_UNSPECIFIED,   &i_os_accss[0].service_type)
    TABL    (0,2,   NI1_T_TYPE_ACCSS,           &i_os_accss[0].access_type)
    EXT_1   ()
END         (0)

			/* ---------- Call appearance (codeset 6, CALL_APPEAR) */

D_START (NI1_CALL_APPEAR_P)
    D_ANY_VAL   (CALL_APPEAR_IDENT)
    D_FUNCTION  (TEST_EXT_CALL_APPEAR_ID)

    D_IF_VAL    (EXT_PRESENT)
        D_EXT_0_1   (_3_)
        D_ANY_VAL   (EXT_CALL_APPEAR_ID)
	D_END_IF    (_3A)

	D_EXT_1     (_3_OR_3a)
D_END       (CALL_APPEAR_E)

START   (NI1_CALL_APPEAR_P)
	ANY_VAL (0,7,       &i_call_appear[0].call_appear_id)
	FUNCTION(ni1_call_appear_ext)

	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 ()
		ANY_VAL (0,7,   &i_call_appear[0].call_appear_id_2)
	END_IF  ()

	EXT_1   ()
END         (0)

			/* ---------- Protocol version control (codeset 6, PROT_VER_CTRL) */

D_START         (NI1_PROT_VER_CTRL_P)

    D_IF_VAL    (TO_D_CHAN)
        D_VAL   (QUERY)
    D_ELSE      (TO_CC)
        D_VAL   (RESP)
    D_END_IF    (OPCODE)

    D_PAD       (_3P)
    D_EXT_1     (_3E)
	D_TABL      (VERSION)
	D_END_OCTET (_4E)
	D_ANY_VAL   (ISSUE)
	D_EXT_1     (_5E)
D_END           (PROT_VER_CTRL_E)

START       (NI1_PROT_VER_CTRL_P)

	IF_VAL  (N_IF,  &direction, EQ, TO_D_CHANNEL)
		VAL (0,4,   VERSION_QUERY_U_N,  &i_prot_ver_ctrl[0].opcode)
	ELSE    ()
		VAL (0,4,   VERSION_RS_N_U,     &i_prot_ver_ctrl[0].opcode)
	END_IF  ()

	PAD     (5,2)
	EXT_1   ()
	TABL    (0,8,   NI1_T_VERSION,      &i_prot_ver_ctrl[0].version)
	END_OCTET ()
	ANY_VAL (0,7,                       &i_prot_ver_ctrl[0].issue)
    EXT_1   ()
END         (0)

/*EOF*/
