
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_ssdu.ni1
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* external functions prototype */

#if NEW_FCT_STYLE == ON
	uchar 	check_convert		(uchar FAR *p_to, uchar FAR *p_from, uint lgth, uchar code, uchar restriction);
#else
	uchar 	check_convert		();
#endif

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.ni1 */

#include "ni1.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name		ni1_cause_ssdu - implements the specific processing of a cause
								IE in a SSDU primitive.

Usage			uchar cause_ssdu ();

Return value : 	cause_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_cause, ssdu common context.

*--------------------------------------------------------------------------*/

uchar ni1_cause_ssdu ()
{
	uchar	class_val;				/* cause class & value */

	class_val = C_v (I_cause_class, I_cause_val);

	switch (class_val) {

		case C_v (C_C_PROTOCOL_ERROR,	C_V_MANDATORY_IE_MISSING_96)		:
		case C_v (C_C_PROTOCOL_ERROR,	C_V_NON_EXISTENT_IE_99)				:
		case C_v (C_C_PROTOCOL_ERROR,	C_V_INVALID_IE_CONTENT_100)			:
		case C_v (C_C_PROTOCOL_ERROR,	C_V_MESSAGE_TYPE_NON_EXISTENT_97)	:
		case C_v (C_C_PROTOCOL_ERROR,	C_V_MESSAGE_NOT_COMPATIBLE_101)		:

			if (I_(cause,diag_lgth) == 0) {
				return (NOK);
			}

		default :
			return (OK);
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		ni1_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/

uchar ni1_chan_id_ssdu ()
{

	if (direction == FROM_CALL_CONTROL) {

		if (I_chan_id_int_type == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}
		}
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			ni1_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage			uchar ni1_llc_ra_ssdu ();

Return value : 	ni1_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar ni1_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&NI1_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&NI1_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&NI1_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&NI1_P_LLC_2));

	} else {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&NI1_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&NI1_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&NI1_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&NI1_P_LLC_2));
	}

}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------

		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |				 ssdu_ie
	|----|------|---------|	 ======================================
	|	 |	X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |	X------> START
	|----|------|---------|	 |---------|----|-----|------|--------|	 XXXX
	|	 |		|		  |	 |		   |	|	  |		 |		  |	 YYYY
	|----|------|---------|	 |---------|----|-----|------|--------|	 END
	|	 |		|		  |	 |		   |	|	  |		 |		  |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |		  |

*/

	/* NS primitive interface program */

/*====================	CALL  ESTABLISHMENT  MESSAGES	=====================*/

		/* NS_ALERT_RQ */

#define NI1_NET_ALERT_RQ		NI1_ALERT_IN

		/* NS_ALERT_IN */

#define	NI1_NET_ALERT_IN		NI1_ALERT_RQ

		/* NS_CALL_PROC_RQ */

#define NI1_NET_CALL_PROC_RQ	NI1_CALL_PROC_IN

		/* NS_CALL_PROC_IN */

#define NI1_NET_CALL_PROC_IN	NI1_CALL_PROC_RQ

		/* NS_CONN_RQ */

#define NI1_NET_CONN_RQ			NI1_CONN_IN

		/* NS_CONN_IN */

#define NI1_NET_CONN_IN			NI1_CONN_RQ

		/* NS_CONN_RS */

#define NET_CONN_RS				CONN_CO

		/* NS_CONN_CO */

#define NI1_NET_CONN_CO			NI1_CONN_RS

#define	NI1_NET_PROGRESS_RQ		NI1_PROGRESS_IN
#define	NI1_NET_PROGRESS_IN		NI1_PROGRESS_RQ

		/* NS_PROGRESS_RQ */

		/* NS_PROGRESS_IN */

#define	NI1_NET_SETUP_ACK_RQ	NI1_SETUP_ACK_IN

		/* NS_SETUP_ACK_IN */

/*===============	CALL  INFORMATION  PHASE  MESSAGES	====================*/

		/* NS_RET_RQ */

#define NI1_NET_RET_IN			NI1_RET_RQ
#define NI1_NET_RET_RS			NI1_RET_CO

		/* NS_RET_CO */

		/* NS_HOLD_RQ */

#define NI1_NET_HOLD_RQ			NI1_HOLD_IN

		/* NS_HOLD_IN */

		/* NS_HOLD_RS */

#define NI1_NET_HOLD_RS			NI1_HOLD_CO

		/* NS_HOLD_CO */

#define NI1_NET_HOLD_CO			NI1_HOLD_RS

#if NI1_SUPPLEMENTARY_SERVICES == ON

		/* NS_K_HOLD_IN */

#define	NI1_NET_K_HOLD_RQ		NI1_K_HOLD_IN

		/* NS_K_REL_IN */

#define	NI1_NET_K_REL_RQ		NI1_K_REL_IN

		/* NS_K_SETUP_IN */

#define	NI1_NET_K_SETUP_RQ	NI1_K_SETUP_IN

		/* NS_K_SETUP_ACK_RQ */

#define	NI1_NET_K_SETUP_ACK_IN	NI1_K_SETUP_ACK_RQ

#endif

/*=====================	CALL  CLEARING  MESSAGES	=======================*/

		/* NS_CLEAR_RQ */

#define NI1_NET_CLEAR_RQ		NI1_CLEAR_IN

		/* NS_CLEAR_IN */

#define	NI1_NET_CLEAR_IN		NI1_CLEAR_RQ

		/* NS_CLEAR_RS */

#define	NI1_NET_CLEAR_RS		NI1_CLEAR_CO

		/* NS_CLEAR_CO */

#define	NI1_NET_CLEAR_CO		NI1_CLEAR_RS

/*====================		MISCELLANEOUS  MESSAGES	=======================*/

		/* NS_INFO_RQ */

#define NI1_NET_INFO_RQ			NI1_INFO_IN

		/* NS_INFO_IN */

#define NI1_NET_INFO_IN			NI1_INFO_RQ

#define	NI1_NET_NOTIFY_RQ		NI1_NOTIFY_IN
#define	NI1_NET_NOTIFY_IN		NI1_NOTIFY_RQ

		/* NS_NOTIFY_RQ */

		/* NS_NOTIFY_IN */

		/* NS_RESTART_RQ */

#define	NET_RESTART_RQ			RESTART_IN

		/* NS_RESTART_IN */

#define	NET_RESTART_CO			RESTART_RS

/*=========================================================================*/

#define Ns_ni1_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_ni1_end_table_or_function		};

#define Ns_ni1_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_ni1_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_ni1		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_ni1_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_ni1_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "ni1.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define NI1_MX_SSDU (sizeof(NI1_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		ni1_mx_size_ssdu = NI1_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_ni1_table_or_function
#undef Ns_ni1_end_table_or_function
#undef Ns_ni1_tab_ssdu_ie_entry
#undef Ns_ni1_tab_ssdu_ie_mx_entry
#undef Ns_ni1_tab_ssdu_entry

#define Ns_ni1_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_ni1_end_table_or_function		}

#define Ns_ni1_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_ni1_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_ni1_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_ni1
#	define Message_header_ssdu_ie_ni1		Ns_ni1_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_ni1_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_ni1_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_ni1_ssdu ()
{
	uchar   i_pic;

#	include "ni1.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

