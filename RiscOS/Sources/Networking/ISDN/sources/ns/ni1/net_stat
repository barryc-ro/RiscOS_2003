
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_state.ni1
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		ni1_u0 to ni1_u19 - user side - implements the processing of an event
 *					 according to the state of the call (u0 to u254).
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NI1_SUPPLEMENTARY_SERVICES == ON

#	if NEW_FCT_STYLE == ON
		void ni1_supp_services_switch (void);
#	else
		void ni1_supp_services_switch ();
#	endif

#endif

						/*--------------*/
						/*				*/
						/*	USER SIDE	*/
						/*		U		*/
						/*--------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			 ni1_u0 to ni1_u19 - user side - implements the processing of an
							  event according to the call state.

Usage			void uxx (void);

Related
functions usage void Stop_timer_ns (uchar x_timer);

				void Start_timer_ns (uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value	void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
				No call exists : used when a call context is
				allocated to a call
			*/

void ni1_u0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Send_to_call_control (NS_CONN_IN);
			Set_state (STATE_CALL_PRESENT_6);
			Start_timer_ns (NI1_T300);
			break;

		case NS_CONN_RQ :
			Send_to_d_channel_and_save_spdu (SETUP);
			Set_state (STATE_CALL_INIT_1);
			N303 = 0;
			Start_timer_ns (NI1_T303);
			break;

		default :

#			if NI1_SUPPLEMENTARY_SERVICES == ON

				ni1_supp_services_switch ();

#			else

				ns_unexpected_ev ();

#			endif

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
				This state exists for an outgoing call, as a result of user
				action requesting call establishment from the network.
			*/

void ni1_u1 ()
{
	switch (event_id) {

		case DA_CALL_PROC :
			Release_saved_spdu ();		/* saved setup no more useful */
			Stop_timer_ns (NI1_T303);
			Send_to_call_control (NS_CALL_PROC_IN);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			Start_timer_ns (NI1_T310);
			break;

		case DA_SETUP_ACK :
			Release_saved_spdu ();		/* saved setup no more useful */
			Stop_timer_ns (NI1_T303);
			Send_to_call_control (NS_SETUP_ACK_IN);
			Set_state (STATE_OVERLAP_SENDING_2);
			break;

		case TI_303 :

			if (++N303 < MX_N303) {
				Send_saved_spdu_to_d_channel (SETUP);
				Restart_timer_ns (NI1_T303);
			} else {
				set_i_cause (C_C_TIMER, C_V_T303, (char FAR *) &(Call_state));
				Send_to_call_control (NS_CLEAR_CO);
				Reset_internal_ie ();
				set_i_cause (C_C_NORMAL_EVENT, C_V_NORMAL_UNSPECIFIED_31, P_NIL);
				Send_to_d_channel (REL_COMP);
				call_clear ();
			}

			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OVERLAP_SENDING_2 */

		/* Overlap sending state */

			/*
				This state exists for an outgoing call when the user has
				received acknowledgement of the call establishment request
				which permits the user to send additional call information
				to the network in overlap mode.
			*/

void ni1_u2 ()
{
	switch (event_id) {

		case DA_CALL_PROC :
			Send_to_call_control (NS_CALL_PROC_IN);
			Start_timer_ns (NI1_T310);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC_3 */

		/* Outgoing call proceeding state */

			/*
				This state exists for an outgoing call when the user
				has received acknowledgement that the network has received
				all call information necessary to effect call establishment.
			*/

void ni1_u3 ()
{
	switch (event_id) {

		case DA_ALERT :
			Stop_timer_ns (NI1_T310);
			Send_to_call_control (NS_ALERT_IN);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Stop_timer_ns (NI1_T310);
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);		/* optional */
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_PROGRESS :
			Stop_timer_ns (NI1_T310);
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_310 :
			set_i_cause (C_C_NORMAL_EVENT, C_V_NORMAL_UNSPECIFIED_31, P_NIL);
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (NI1_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		default :
#			if NI1_SUPPLEMENTARY_SERVICES == ON

				ni1_supp_services_switch ();

#			else

				ns_unexpected_ev ();

#			endif

			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED_4 */

		/* Call delivered state */

			/*
				This state exists for an outgoing call when the calling user
				has received an indication that the remote user alerting has
				been initiated.
			*/

void ni1_u4 ()
{
	switch (event_id) {

		case DA_ALERT :

			if (Na_type == BRI) {
				Send_to_call_control (NS_ALERT_IN);
			} else {
				ns_unexpected_ev ();
			}

			break;

		case DA_CONN :
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);		/* optional */
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_PROGRESS :

			if (Na_type == BRI) {
				Send_to_call_control (NS_PROGRESS_IN);
			} else {
				ns_unexpected_ev ();
			}

			break;

		default :

#			if NI1_SUPPLEMENTARY_SERVICES == ON

				ni1_supp_services_switch ();

#			else

				ns_unexpected_ev ();

#			endif

			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
				This state exists for an incoming call when the user
				has received a call establishment request but not yet
				responded.
			*/

void ni1_u6()
{
	switch (event_id) {

		/* case DA_SETUP is managed in error_handler : SETUP ignored */

		case NS_ALERT_RQ :
			Stop_timer_ns (NI1_T300);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (NI1_T300);
			Send_to_d_channel (CONN);
			Start_timer_ns (NI1_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_CALL_PROC_RQ :
			Stop_timer_ns (NI1_T300);
			Send_to_d_channel (CALL_PROC);
			Set_state (STATE_INCOMING_CALL_PROC_9);
			break;

		case TI_300 :
			set_i_cause (C_C_INVALID_MESSAGE, C_V_INCOMPATIBLE_DESTINATION_88, P_NIL);
			Send_to_d_channel (REL_COMP);
			Reset_internal_ie ();
			set_i_cause (C_C_TIMER, C_V_T300, (char FAR *) &(Call_state));
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED_7 */

		/* Call received state */

			/*
				This state exists for an incomming call when the user has
				indicated alerting but not yet answered.
			*/

void ni1_u7 ()
{
	switch (event_id) {

		/* case DA_SETUP is managed in error_handler : SETUP ignored */

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_CONNECT_REQUEST_8);
			Start_timer_ns (NI1_T313);
			break;

		default :

#			if NI1_SUPPLEMENTARY_SERVICES == ON

				ni1_supp_services_switch ();

#			else

				ns_unexpected_ev ();

#			endif

			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST_8 */

		/* Connect request state */

			/*
				This state exists for an incoming call when the user
				has answered the call and is waiting to be awarded.
			*/

void ni1_u8 ()
{
	switch (event_id) {

		/* case DA_SETUP is managed in error_handler : SETUP ignored */

		case DA_CONN_ACK :
			Stop_timer_ns (NI1_T313);
			Send_to_call_control (NS_CONN_CO);
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_313 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, P_NIL);

			if (Na_type == BRI) {

#				if NS_TYPE_BRI == ON
					Send_to_d_channel_and_save_spdu (REL);
					N308 = 0;
					Start_timer_ns (NI1_T308);
					Set_state (STATE_RELEASE_REQUEST_19);
#				endif

			} else {

#				if NS_TYPE_PRI == ON

					Save_cause ();								/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);					/* send a DISCONNECT message */
					Start_timer_ns (NI1_T305);					/* start T305 */
					Set_state (STATE_DISCONNECT_REQUEST_11);	/* enter the Disconnect Request state */

#				endif

			}

			break;

		default :

#			if NI1_SUPPLEMENTARY_SERVICES == ON

				ni1_supp_services_switch ();

#			else

				ns_unexpected_ev ();

#			endif

			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROC_9 */

		/* Incoming call proceeding state */

			/*
				This state exists for an incoming call when the user has
				sent acknowlegdement that the user has received all call
				information necessary to effect call establishment.
			*/

void ni1_u9 ()
{
	switch (event_id) {

		/* case DA_SETUP is managed in error_handler : SETUP ignored */

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Start_timer_ns (NI1_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE_10 */

		/* Active state */

			/*
				This state exists if an incoming call when the user has
				received an acknowledgement from the network that the user
				has been awarded the call. This state exists for an outgoing
				call when the user has received an indication that the remote
				user has answered the call.
			*/

void ni1_u10 ()
{
	switch (event_id) {

		case NS_HOLD_RQ :

				/* Assume the interface type is Basic rate */

			if (Na_type == BRI) {
				Send_to_d_channel (HOLD);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case NS_RET_RQ :

				/* Assume the interface type is Basic rate */

			if (Na_type == BRI) {
				Send_to_d_channel (RET);

			} else {

				ns_unexpected_ev ();
			}

			break;

		default :

#			if NI1_SUPPLEMENTARY_SERVICES == ON

				ni1_supp_services_switch ();

#			else

				ns_unexpected_ev ();

#			endif

			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST_11 */

		/* Disconnect request state */

			/*
				This state exists when the user has requested the network
				to clear the end-to-end connection (if any) and is waiting
				for a response.
			*/

void ni1_u11 ()
{
	switch (event_id) {

		 case TI_305 :
			Restore_cause ();	/* send saved cause of the previous DISC */
			set_ie_i (CODESET_0, CAUSE);
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (NI1_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		 default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION_12 */

		/* Disconnect indication state */

			/*
				This state exists when the user has received an invitation
				to disconnect because the network has disconnected the
				end-to-end connection (if any).
			*/

void ni1_u12 ()
{
	switch (event_id) {

		case NS_CLEAR_RS :
			disc_cause_error ();
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (NI1_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST_19 */

		/* Release request state */

			/*
				This state exists when the user has requested the network
				to release and is waiting for a response.
			*/

void ni1_u19 ()
{
	switch (event_id) {

		case TI_308 :

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (NI1_T308);
			} else {
				set_i_cause (C_C_TIMER, C_V_T308, (char FAR *) &(Call_state));
				Send_to_call_control (NS_CLEAR_CO); /* shall notify maintenance */
				call_clear ();
			}
			break;

		case NS_CLEAR_RS :
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

#if EQUIPMENT == NT2

						/*------------------*/
						/*					*/
						/*	NETWORK SIDE	*/
						/*		N			*/
						/*------------------*/

#endif

#if NI1_SUPPLEMENTARY_SERVICES == ON

void ni1_supp_services_switch ()
{

	uchar err_flag;

	err_flag = ON;			/* reset error flag */

	switch (event_id) {

		case DA_NOTIFY :

			switch (Call_state) {

				case STATE_OUTGOING_CALL_PROC_3 :
				case STATE_CALL_DELIVERED_4 :
				case STATE_ACTIVE_10 :

					switch (Call_sub_state) {

						case SUB_STATE_NULL_0 :
						case SUB_STATE_40 :
						case SUB_STATE_42 :
							Send_to_call_control (NS_NOTIFY_IN);
							err_flag = OFF;
							break;
					}
			}

			break;

		case NS_HOLD_RQ :

			switch (Call_state) {
				case STATE_OUTGOING_CALL_PROC_3 :
				case STATE_CALL_DELIVERED_4 :
				case STATE_ACTIVE_10 :

					if (Call_sub_state == SUB_STATE_NULL_0) {
						Send_to_d_channel (HOLD);
						Call_sub_state = SUB_STATE_41;
						err_flag = OFF;
					}
			}

			break;

		case DA_HOLD_ACK :
		case DA_HOLD_REJ :

			switch (Call_state) {
				case STATE_OUTGOING_CALL_PROC_3 :
				case STATE_CALL_DELIVERED_4 :
				case STATE_ACTIVE_10 :

					if (Call_sub_state == SUB_STATE_41) {
						Send_to_call_control (NS_HOLD_CO);
						Call_sub_state = SUB_STATE_40;
						err_flag = OFF;

					} else if (Call_sub_state == SUB_STATE_30) {

						Send_to_call_control (NS_HOLD_CO);

						if (event_id == DA_HOLD_ACK) {
							Call_sub_state = SUB_STATE_36;
						} else {
							Call_sub_state = SUB_STATE_NULL_0;
						}

						err_flag = OFF;
					}
			}

			break;

		case DA_HOLD :

			if (Call_state == STATE_ACTIVE_10) {
				Send_to_call_control (NS_HOLD_IN);
				err_flag = OFF;
			}

			break;


		case NS_HOLD_RS :

			if (Call_state == STATE_ACTIVE_10) {

				if (is_ie_i (CODESET_0, CAUSE)) {
					Send_to_d_channel (HOLD_REJ);
				} else {
					Send_to_d_channel (HOLD_ACK);
				}

				err_flag = OFF;
			}

			break;

		case NS_RET_RQ :

			switch (Call_state) {
				case STATE_OUTGOING_CALL_PROC_3 :
				case STATE_CALL_DELIVERED_4 :
				case STATE_ACTIVE_10 :

					if (Call_sub_state == SUB_STATE_40) {
						Send_to_d_channel (RET);
						Call_sub_state = SUB_STATE_42;
						err_flag = OFF;
					} else if (Call_sub_state == SUB_STATE_36) {
						Send_to_d_channel (RET);
						Call_sub_state = SUB_STATE_33;
						err_flag = OFF;
					}
			}

			return;

		case DA_RET_ACK :
		case DA_RET_REJ :

			switch (Call_state) {
				case STATE_OUTGOING_CALL_PROC_3 :
				case STATE_CALL_DELIVERED_4 :
				case STATE_ACTIVE_10 :

					if (Call_sub_state == SUB_STATE_42) {
						Send_to_call_control (NS_RET_CO);
						err_flag = OFF;
						Call_sub_state = SUB_STATE_40;
					}

					break;
			}

			break;

		case DA_K_SETUP :

			if (Call_state == STATE_NULL_0) {
				Send_to_call_control (NS_K_SETUP_IN);
				Send_to_d_channel (K_SETUP_ACK);
				Call_sub_state = SUB_STATE_40;
				Set_state (STATE_OUTGOING_CALL_PROC_3);
				err_flag = OFF;
			}

			break;

		case DA_K_HOLD :

			switch (Call_state) {

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_DISCONNECT_REQUEST_11 :
					Send_to_call_control (NS_K_HOLD_IN);
					Call_sub_state = SUB_STATE_40;
					Set_state (STATE_ACTIVE_10);
					err_flag = OFF;
					break;
			}

			break;

		case DA_K_REL :

			Call_sub_state = SUB_STATE_40;
			Send_to_call_control (NS_K_REL_IN);
			err_flag = OFF;
			break;
	}

	if (err_flag == ON) {

			/* An error occured */

		ns_unexpected_ev ();
	}
}

#endif

/*EOF*/

