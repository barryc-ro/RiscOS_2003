
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_switch.ni1
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      ni1_csc_dl_reinit - implement an unexpected data link reinit.
 *
 *		ni1_circuit_switched_call - implements the processing of the call
 *								  control procedures.
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	void	ni1_u0						(void);
	void	ni1_u1						(void);
	void	ni1_u2						(void);
	void	ni1_u3						(void);
	void	ni1_u4						(void);
	void	ni1_u6						(void);
	void	ni1_u7						(void);
	void	ni1_u8						(void);
	void	ni1_u9						(void);
	void	ni1_u10						(void);
	void	ni1_u11						(void);
	void	ni1_u12						(void);
	void	ni1_u19						(void);
	void	ni1_csc_dl_reinit			(void);
	uchar	ni1_circuit_switched_call	(void);
	uchar	ni1_error_handler			(void);
	uchar	ni1_ns_ei					(code_t p1, ces_t p2);
	void	ni1_send_init 				(void);
	uchar	ni1_match_usid_tid 			(uchar usid, uchar tid, uchar interp);
#else
	void	ni1_u0						();
	void	ni1_u1						();
	void	ni1_u2						();
	void	ni1_u3						();
	void	ni1_u4						();
	void	ni1_u6						();
	void	ni1_u7						();
	void	ni1_u8						();
	void	ni1_u9						();
	void	ni1_u10						();
	void	ni1_u11						();
	void	ni1_u12						();
	void	ni1_u19						();
	void	ni1_csc_dl_reinit			();
	uchar	ni1_circuit_switched_call	();
	uchar	ni1_error_handler			();
	uchar	ni1_ns_ei					();
	void	ni1_send_init 				();
	uchar	ni1_match_usid_tid 			();
#endif


			/* Local macro definitons */

#define	Rcv_dl_code			R_msg_inf0

						/*--------------*/
						/*				*/
						/*	USER SIDE	*/
						/*				*/
						/*--------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	ni1_csc_dl_reinit () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void ni1_csc_dl_reinit ();

Related
functions usage		void send_state (uchar class, uchar value, uchar diagnostic);

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void ni1_csc_dl_reinit ()
{
	/* nothing to do */
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			ni1_circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage		  	uchar ni1_circuit_switched_call ();

Related
functions usage void ni1_u0 .... ni1_u19 ()

Description	 ni1_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value	uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*                                CLEARING PROCEDURES
*
*		TE                         NT/NETWORK                        TE
* _________________             _________________            _________________
* |               |             |               |            |               |
* |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
* |==========>....|------------>|.......|.....  |            |               |
* | start T305    |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
* |<===========...|<------------|...    |    ...|----------->|...===========>|
* |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
* |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
* |             ..|------------>|       |    ...|<-----------|...  start T308|
* |               |             |       |    .  |            |               |
* |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
* |               |             |       |    ...|----------->|...===========>|
* |               |             |       |       |            |     stop T308 |
* |---------------|             |---------------|            |---------------|
*/

uchar ni1_circuit_switched_call ()
{

/*.........................................................................*/

	if ((Na_type == BRI) && (Na_connection == POINT_TO_MULTIPOINT)) {

#		if NS_TYPE_BRI == ON

						/*	ENDPOINT INITIALIZATION PROCEDURES	*/

			switch (i_entity_origination) {

				case ENT_DL_D :

						/* INFO PDU on call reference nil */

					if ((Is_call_ref_nil) && (event_id == DA_INFO)) {

						if (is_ie_i (CODESET_0, ENDPOINT_ID) == PRESENT) {

								/* Switch assigns an EID */

							Ns_ei (EV_ASSIGN_USID_TID, Na_dl_ces);		/* call to Endpoint Initialization Procedure */
							return (CONTINUE);

						} else {

							if ((is_ie_i (CODESET_0, INFORMATION_RQ) == PRESENT) &&
								(I_(information_rq, info_ind) == PROMPT_FOR_ADD_INFO)) {

								/* Initialization is requested by the switch */

								Ns_ei (EV_INIT_RQ, Na_dl_ces);				/* call to Endpoint Initialization Procedure */
								return (CONTINUE);
							}
						}

						if ((is_ie_i (CODESET_0, CAUSE) == PRESENT) &&
							(I_cause_class == C_C_PROTOCOL_ERROR)) {

							if (I_cause_val == C_V_NON_EXISTENT_IE_99) {

									/* Switch does not support initialization */

#							if NS_EVENT_REPORT == ON

										/* Send the event to MNS */

									ns_send_mns_event (NS_EVENT_SPID_NOK, 0);

#							endif

								Ns_ei (EV_REJECT, Na_dl_ces);
							}

							if (I_cause_val == C_V_INVALID_IE_CONTENT_100) {

#							if NS_EVENT_REPORT == ON

										/* Send the event to MNS */

									ns_send_mns_event (NS_EVENT_SPID_NOK, 0);

#							endif


									/* Bad SPID */

								Ns_ei (EV_REJECT_SPID_100, Na_dl_ces);
							}
						}

						return (CONTINUE);

					}

						/* other messages */

					if (is_ie_i (CODESET_0, ENDPOINT_ID) == ABSENT) {

							/* Any message with no USID-TID */

						if (Ns_ei (EV_NO_USID_TID, Na_dl_ces) != CONTINUE) {
							return (OK);
						}

					} else {

							/* USID-TID provided */

						if (event_id == DA_SETUP) {

								/* broadcast message with USID-TID */

							if (Ns_ei (EV_BROADCAST_WITH_USID_TID, Na_dl_ces) != CONTINUE) {
								return (OK);
							}

						} else {

								/* Any not broadcast message with USID-TID */

							if (Ns_ei (EV_NOT_BROADCAST_WITH_USID_TID, Na_dl_ces) != CONTINUE) {
								return (OK);
							}
						}

					}

					break;

				case ENT_CC :		/* from user event */

						/* User action */

					if (Ns_ei (EV_USER_ACTION, Na_dl_ces) != CONTINUE) {
						set_i_cause (C_C_DATA_LINK_FAILURE,C_V_DL_TERMINAL_NOT_INIT, P_NIL);
						Send_to_call_control(NS_CLEAR_CO);
						call_clear ();
						return (OK);
					}

					break;

				case ENT_TI :

					if (event_id == TI_SPID) {

#					if NS_EVENT_REPORT == ON

								/* Send the event to MNS */

							ns_send_mns_event (NS_EVENT_SPID_NOK, 0);

#					endif

						Ns_ei (TI_SPID, Na_dl_ces);
						return (OK);
					}

					break;

				default :
					break;

			}

#		endif

	}

	if (i_entity_origination == ENT_MNS) {

#		if NS_RESTART_PROCEDURE == ON

			switch (event_id) {

				case MNS_RESTART_RQ :

					if ((Na_type == PRI) && (Dl_rest_state == STATE_REST_0)) {

#						if NS_TYPE_PRI == ON

							ie_implicit_val_x (CODESET_0, RESTART_IND, 0);

							if (I_restart_ind_class == RI_ALL_INTERFACES) {
								csc_clear_all_call ();
								Na_internal_restart = ON;
							}

							Send_to_call_control (NS_RESTART_IN);	/* on CONN_ID_MANAGEMENT */
							Start_dl_timer (NI1_T317);
							Set_call_ref_not_nil ();
							Send_to_d_channel (RESTART);			/* with CALL_REF_GLOBAL */
							N316 = 0;
							Start_dl_timer (NI1_T316);
							Dl_rest_state = STATE_REST_1;

#						endif

					} else {

						ns_unexpected_ev ();
					}

					break;

#				if ASSERT == ON

				default :
					Trap (TRAP_MNS_CODE, "ni1_circuit_switched_call");

#				endif

			}

#		endif

		return (OK);

	}

					/* 1 - EVENT DRIVEN PROCESSING  */

	switch (event_id) {

						/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

						/* SETUP : allocate a call context */

		case DA_SETUP :
		case DA_K_SETUP :

#			if NI1_SUPPLEMENTARY_SERVICES == OFF

				if (event_id == DA_K_SETUP) {
					ns_unexpected_ev ();
					return (OK);
				}

#			endif

			if (allocate_call (INCOMING_CALL, 0) != OK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_NORMAL_EVENT, C_V_USER_BUSY_17, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;

						/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_DISCONNECT_REQUEST_11 :
					Stop_timer_ns (NI1_T305);
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */
					Reset_internal_ie ();

					if (disc_cause_error () == NOK) {
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					}

					Send_to_d_channel_and_save_spdu (REL);
					N308 = 0;
					Set_state (STATE_RELEASE_REQUEST_19);
					Start_timer_ns (NI1_T308);
					break;

				case STATE_CALL_INIT_1 :
				case STATE_DISCONNECT_INDICATION_12 :
					ns_unexpected_ev ();
					break;

				case STATE_RELEASE_REQUEST_19 :

					if (Na_type == PRI) {
						ns_unexpected_ev ();
						break;
					}
					break;

				case STATE_CALL_PRESENT_6 :

					if (Na_type == BRI) {
						ns_unexpected_ev ();
						break;
					}

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */
					Set_state (STATE_DISCONNECT_INDICATION_12);		/* enter disconnect indication state */
					break;

			}

			return (OK);

						/* RELEASE */

		case DA_REL :

			switch (Call_state) {

				case STATE_CALL_INIT_1 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_PRESENT_6 :

					if (Na_type == BRI) {
						ns_unexpected_ev ();
						break;
					}

				default :
					ns_stop_all_timers ();
					Call_fac_rq = OFF;
					Send_to_call_control (NS_CLEAR_CO);					/* send NS clear confirm to Layer 4 */
					Reset_internal_ie ();
					set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					Send_to_d_channel (REL_COMP);						/* send the Release Complete Message to network */
					call_clear ();
					return (OK);
			}

						/* RELEASE COMPLETE */

		case DA_REL_COMP :
			Call_fac_rq	= OFF;
			Send_to_call_control (NS_CLEAR_CO);					/* send NS clear confirm to Layer 4 */
			call_clear ();										/* free call context */
			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :
					Send_to_d_channel (REL_COMP);

				case STATE_WAIT_DL :
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					return (OK);

						/* User is in en-bloc sending and refuse previous NS_SETUP_ACK_IN */

				case STATE_OVERLAP_SENDING_2 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :
					ns_stop_all_timers ();						 	/* stop all the timers */
					Send_to_d_channel_and_save_spdu (REL);		/* send a RELease message */
					N308 = 0;
					Start_timer_ns (NI1_T308);					/* start T308 */
					Set_state (STATE_RELEASE_REQUEST_19);		/* enter the Release Request state */
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					disc_cause_error ();
					Stop_timer_ns  (NI1_T300);
					go_to_state_19 (NI1_T308);
					break;

				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_CALL_INIT_1 :
					Release_saved_spdu ();						/* saved setup no more useful */

					/* process the default */

				default :
					ns_stop_all_timers ();						 	/* stop all the timers */
					Save_cause ();								/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);					/* send a DISCONNECT message */
					Start_timer_ns (NI1_T305);					/* start T305 */

#					if NI1_SUPPLEMENTARY_SERVICES == ON

						if (Call_sub_state == SUB_STATE_NULL_0) {
							Set_state (STATE_DISCONNECT_REQUEST_11);	/* enter the Disconnect Request state */
						}

#					else

						Set_state (STATE_DISCONNECT_REQUEST_11);		/* enter the Disconnect Request state */

#					endif

					break;

			}

			return (OK);

						/* INFO */

		case DA_INFO :

			if (Call_current_exist) {

				switch (Call_state) {

					case STATE_CALL_INIT_1 :
					case STATE_CALL_PRESENT_6 :
						ns_unexpected_ev ();
						break;

						/* In state 19, the INFO message may be ignored */

					case STATE_RELEASE_REQUEST_19 :
						break;

					default :
						Send_to_call_control (NS_INFO_IN);

				}

			} else {
				Send_to_call_control (NS_INFO_IN);
			}

			return (OK);

						/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			if (Call_current_exist) {

				switch (Call_state) {

					case STATE_CALL_PRESENT_6 :
					case STATE_RELEASE_REQUEST_19 :
						ns_unexpected_ev ();
						break;

					case STATE_OVERLAP_SENDING_2 :
						Send_to_d_channel (INFO);
						break;

					default :

						if (is_ie_i (CODESET_0, CALLED_NB) == PRESENT) {
							ns_unexpected_ev ();
						} else {
							Send_to_d_channel (INFO);
						}

				}

			} else {
				Send_to_d_channel (INFO);
			}

			return (OK);

						/* STATUS */

		case DA_STATUS :
			return (OK);

						/* STATUS_ENQ */

		case DA_STATUS_ENQ :
			Reset_internal_ie ();
			set_i_state (Call_state);
			set_i_cause	(C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30, P_NIL);
			Send_to_d_channel (STATUS);
			return (OK);

#		if NS_RESTART_PROCEDURE == ON

			case TI_316 :

				if (Dl_rest_state == STATE_REST_1) {

					if (++N316 == NI1_MX_N316) {
						ns_snd_mns (MNS_RESTART_CO);
						Dl_restart_reset ();
					} else {
						Set_call_ref_not_nil ();
						Send_to_d_channel (RESTART);			/* with CALL_REF_GLOBAL */
						Restart_dl_timer (NI1_T316);
					}

				} else {
					ns_unexpected_ev ();
				}

				return (OK);

			case TI_317 :

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {
							ns_snd_mns (MNS_RESTART_CO);
							Dl_restart_reset ();
						} else {
							Dl_rest_resp = ON;
						}
						break;

					case STATE_REST_2 :
						ns_snd_mns (MNS_RESTART_IN);
						Dl_restart_reset ();
						break;

					default :
						ns_unexpected_ev ();

				}

				return (OK);


			case DA_RESTART :

				if ((I_call_ref_without_ces >> 1) != CALL_REF_GLOBAL_VAL) {

					switch (Call_state) {

						case STATE_RELEASE_REQUEST_19 :
							return (OK);

						default :
							Reset_internal_ie ();
							set_i_cause (C_C_PROTOCOL_ERROR, C_V_MESSAGE_NOT_COMPATIBLE_101, P_NIL);
							Send_to_d_channel_and_save_spdu (REL);
							N308 = 0;
							Set_state (STATE_RELEASE_REQUEST_19);
							Start_timer_ns (NI1_T308);
							return (OK);
					}

				} else {

					if (Dl_rest_state == STATE_REST_0) {

						Start_dl_timer (NI1_T317);
						Set_call_ref_nil ();		/* to use CONN_ID_MANAGEMENT */
						Send_to_call_control (NS_RESTART_IN);
						Dl_rest_state = STATE_REST_2;

						if (I_restart_ind_class == RI_ALL_INTERFACES) {
							csc_clear_all_call ();
							Na_internal_restart = ON;
						}

					} else {
						ns_unexpected_ev ();
					}

				}

				return (OK);

				case DA_RESTART_ACK :

					if (Dl_rest_state == STATE_REST_1) {
						Stop_dl_timer (NI1_T316);

						if (Dl_rest_resp == ON) {
							ns_snd_mns (MNS_RESTART_CO);
							Dl_restart_reset ();
						} else {
							Dl_rest_ack = ON;
						}

					} else {
						ns_unexpected_ev ();
					}
					return (OK);

			case NS_RESTART_RQ :

				if (Dl_rest_state != STATE_REST_0) {
					call_clear ();
				} else {
					ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RS :
				Stop_dl_timer (NI1_T317);

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {
							ns_snd_mns (MNS_RESTART_CO);
							Dl_restart_reset ();
						} else {
							Dl_rest_resp = ON;
						}
						break;

					case STATE_REST_2 :
						Set_call_ref_not_nil ();
						Send_to_d_channel (RESTART_ACK);
						Dl_restart_reset ();
						break;

					default :
						ns_unexpected_ev ();

				}

				return (OK);
#		endif

	} /* End switch (event_id) */

/*.........................................................................*/

					/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

				Dispatch to the function that processes the state except if
				it is a clearing event not received  in an exceptional condition.
				In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "ni1_circuit_switched_call");
	}

	switch (Call_state) {

			/* Null state (u0) */

		case STATE_NULL_0 :
		case STATE_WAIT_DL :
			ni1_u0 ();
			break;

			/* Call initiated (u1) */

		case STATE_CALL_INIT_1 :
			ni1_u1 ();
			break;

			/* Overlap sending (u2) */

		case STATE_OVERLAP_SENDING_2 :
			ni1_u2 ();
			break;

			/* Outgoing call proceeding (u3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			ni1_u3 ();
			break;

			/* Call delivered (u4) */

		case STATE_CALL_DELIVERED_4 :
			ni1_u4 ();
			break;

			/* Call present (u6) */

		case STATE_CALL_PRESENT_6 :
			ni1_u6 ();
			break;

			/* Call received (u7) */

		case STATE_CALL_RECEIVED_7 :
			ni1_u7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			ni1_u8 ();
			break;

			/* Incoming call proceeding state (u9) */

		case STATE_INCOMING_CALL_PROC_9 :
			ni1_u9 ();
			break;

			/*  Active (u10) */

		case STATE_ACTIVE_10 :
			ni1_u10 ();
			break;

			/* Disconnect request (u11) */

		case STATE_DISCONNECT_REQUEST_11 :
			ni1_u11 ();
			break;

			/* Disconnect indication (u12) */

		case STATE_DISCONNECT_INDICATION_12 :
			ni1_u12 ();
			break;

			/* Release request (u19) */

		case STATE_RELEASE_REQUEST_19 :
			ni1_u19 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "ni1_circuit_switched_call");

	}

	return (OK);
}

#if EQUIPMENT == NT2

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	ni1_csc_dl_reinit_n () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void ni1_csc_dl_reinit_n ();

Related
functions usage		void send_state (uchar class, uchar value, uchar diagnostic);

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

void ni1_csc_dl_reinit_n ()
{
	/* nothing to do */
}

/*--------------------------------------------------------------------------*/

/*                                CLEARING PROCEDURES
*
*       TE                         NT/NETWORK                        TE
* _________________             _________________            _________________
* |               |             |               |            |               |
* |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
* |==========>....|------------>|.......|.....  |            |               |
* | start T305    |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
* |<===========...|<------------|...    |    ...|----------->|...===========>|
* |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
* |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
* |             ..|------------>|       |    ...|<-----------|...  start T308|
* |               |             |       |    .  |            |               |
* |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
* |               |             |       |    ...|----------->|...===========>|
* |               |             |       |       |            |     stop T308 |
* |---------------|             |---------------|            |---------------|
*
*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ni1_circuit_switched_call_n - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar ni1_circuit_switched_call_n ();

Related
functions usage void ni1_n0 .... ni1_n19 ()

Description     ni1_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

uchar ni1_circuit_switched_call_n ()
{
	Trap (TRAP_NS_ERROR, "circuit_switched_call_n");
    return (NOK);
}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ni1_ns_ei - implements the endpoint initialization procedure
				for the NI1100 control of maintenance actions.

Usage           uchar ns_ei (void);

Return value    return code = CONTINUE	continue the processing,
							= STOP		wait for DL establishment,
							= NOK       the call state is errored.

Common constants and declarations : ns.h

Common objects :	current NA, DL and CALL contexts
					message current context

*--------------------------------------------------------------------------*/

uchar ni1_ns_ei (ei_event, ces)
	code_t	ei_event;	/* Endpoint Initialization Event */
	ces_t	ces;		/* CES */
{

#if NS_TYPE_BRI == ON

		/* Meaningless for PRImary rate */

	if (Na_type == PRI) return (OK);


	if ((! Dl_current_exist) ||
		(Dl_ces == DL_CES_BROADCAST)) {
		Ns_access_dl_ces (ces);
	}

					/* STATE DRIVEN AUTOMATON */

	switch (Dl_ei_state) {

				/* Power down */

		case EI_STATE_DOWN :

			if (ei_event == MNS_NA_POWER_ON_RQ) {

				Dl_ei_state = EI_STATE_AWAIT_ASSIGN;

				/* TEI should be initialized from now */

			} else {

				return (STOP);
			}

			break;


		case EI_STATE_AWAIT_ASSIGN :

			switch (ei_event) {

				case MNS_DL_DLCI_RQ :

						/* Tei assigned */

					if ((Rcv_dl_code == DL_TEI_ASSIGNMENT) &&
						( Lc_state == LC_RELEASED )) {
						ns_snd_dl (DL_EST_RQ, ces);
						Lc_state = LC_AWAITING_EST;
					}

					Dl_ei_state = EI_STATE_AWAIT_EST;

						/* Tei denied.
						 * SM has already sent a TEI_RQ
						 */

					if (Rcv_dl_code == DL_TEI_REMOVAL) {
						break;
					}

					break;

				case MNS_NA_POWER_OFF_RQ :
					Dl_ei_state = EI_STATE_DOWN;
					break;

				default :
					return (STOP);
			}

			break;

		case EI_STATE_AWAIT_EST :

			switch (ei_event) {

					/* Layer 2 established */

				case DL_EST_CO :
					ni1_send_init ();
					Dl_ei_state = EI_STATE_AWAIT_INIT;
					break;


				case DL_REL_IN :
					ns_snd_dl (DL_EST_RQ, ces);
					Lc_state = LC_AWAITING_EST;
					break;

						/* Tei remove */

				case MNS_DL_DLCI_RQ :

					if (Rcv_dl_code == DL_TEI_REMOVAL) {
						Dl_ei_state = EI_STATE_AWAIT_ASSIGN;
					}

					break;

				case EV_NO_USID_TID :	/* it must be a SETUP */
				case EV_BROADCAST_WITH_USID_TID :

						/* process received message */

					break;

					/* Power OFF */

				case MNS_NA_POWER_OFF_RQ :
					Dl_ei_state = EI_STATE_DOWN;
					break;

				default :

					return (STOP);
			}

			break;


		case EI_STATE_AWAIT_INIT  :

			switch (ei_event) {

				case EV_INIT_RQ :

						/* Switch requests initialization */

					ni1_send_init ();
					Dl_ei_state = EI_STATE_AWAIT_INIT;
					break;

					/* Network supports Endpoint Initialization */

				case EV_ASSIGN_USID_TID :
					Stop_dl_timer (TSPID);
					Dl_usid = I_(endpoint_id, usid);			/* load the USID */
					Dl_tid	= I_(endpoint_id, tid);				/* load the TID */
					Dl_ei_state = EI_STATE_INIT;

#					if NS_EVENT_REPORT == ON

							/* Send the event to MNS */

						ns_send_mns_event (NS_EVENT_SPID_OK, 0);

#					endif

					break;

				case EV_REJECT_SPID_100 :
					Stop_dl_timer (TSPID);

						/* Switch rejection due to bad SPID IE */

					Dl_ei_state = EI_STATE_NOT_INIT;
					break;

				case EV_REJECT :
					Stop_dl_timer (TSPID);

						/* Switch does not support initialization */

					Dl_ei_state = EI_STATE_NOT_SUPPORTED;
					break;

				case EV_NO_USID_TID :

						/* process message */

					return (CONTINUE);

				case EV_BROADCAST_WITH_USID_TID :

						/* Discard received message */

					return (STOP);

				case EV_USER_ASSIGN_SPID :
					ni1_send_init ();
					break;

				case EV_USER_ACTION :
				case DL_EST_IN :
				case DL_EST_CO :
					break;

				case DL_REL_IN :
					ns_snd_dl (DL_EST_RQ, ces);
					Lc_state = LC_AWAITING_EST;
					break;

				case MNS_DL_DLCI_RQ :

					if (Rcv_dl_code == DL_TEI_REMOVAL) {
						Stop_dl_timer (TSPID);
						Dl_ei_state = EI_STATE_AWAIT_ASSIGN;
					}
					break;

				case MNS_NA_POWER_OFF_RQ :
					Dl_ei_state = EI_STATE_DOWN;
					break;

				case TI_SPID :
					ni1_send_init ();
					break;

				default :
					return (STOP);

			}

			break;


		case EI_STATE_INIT :

			switch (ei_event) {

				case EV_INIT_RQ :

						/* Switch requests initialization */

					ni1_send_init ();
					break;

				case EV_REJECT_SPID_100 :
					Stop_dl_timer (TSPID);

						/* Switch rejection due to bad SPID IE */

					Dl_ei_state = EI_STATE_NOT_INIT;
					break;

					/* Network supports Endpoint Initialization */

				case EV_ASSIGN_USID_TID :
					Stop_dl_timer (TSPID);
					Dl_usid = I_(endpoint_id, usid);			/* load the USID */
					Dl_tid	= I_(endpoint_id, tid);				/* load the TID */
					break;

				case EV_REJECT :
					Stop_dl_timer (TSPID);

						/* Switch does not support initialization */

					Dl_ei_state = EI_STATE_NOT_SUPPORTED;
					break;

				case EV_NO_USID_TID :
					break;

				case EV_BROADCAST_WITH_USID_TID :
				case EV_NOT_BROADCAST_WITH_USID_TID :

						/*
						 * If any message with on matching USID/TID
						 * discard message.
						 */

					if (ni1_match_usid_tid (I_endpoint_id_usid, I_endpoint_id_tid, I_endpoint_id_interp) == FALSE) {
						return (STOP);
					}

					break;

				case EV_USER_ASSIGN_SPID :
					ni1_send_init ();
					Dl_ei_state = EI_STATE_AWAIT_INIT;
					break;

				case EV_USER_ACTION :
				case DL_EST_IN :
				case DL_EST_CO :
					break;

				case DL_REL_IN :

					if ((Dl_backup == OFF) && (Lc_state != LC_AWAITING_EST)) {
						ns_snd_dl (DL_EST_RQ, ces);
						Lc_state = LC_AWAITING_EST;
					}

					break;

				case MNS_DL_DLCI_RQ :

					if (Rcv_dl_code == DL_TEI_REMOVAL) {
						Dl_ei_state = EI_STATE_AWAIT_ASSIGN;
					}
					break;

				case MNS_NA_POWER_OFF_RQ :
					Dl_ei_state = EI_STATE_DOWN;
					break;

				case TI_SPID :
					ni1_send_init ();
					break;

				default :

					return (STOP);
			}

			break;


		case EI_STATE_NOT_INIT :

			switch (ei_event) {

				case EV_INIT_RQ :

						/* Switch requests initialization */

					ni1_send_init ();
					Dl_ei_state = EI_STATE_AWAIT_INIT;
					break;

				case EV_USER_ASSIGN_SPID :
					ni1_send_init ();
					Dl_ei_state = EI_STATE_AWAIT_INIT;
					break;

				case EV_USER_ACTION :

						/* No action */

					return (STOP);

				case EV_NO_USID_TID :

						/* Process message */

					break;

				case EV_BROADCAST_WITH_USID_TID :

						/* No action */

					return (STOP);

				case DL_REL_IN :
					ns_snd_dl (DL_EST_RQ, ces);
					Lc_state = LC_AWAITING_EST;
					break;

						/* Tei remove */

				case MNS_DL_DLCI_RQ :

					if (Rcv_dl_code == DL_TEI_REMOVAL) {
						Dl_ei_state = EI_STATE_AWAIT_ASSIGN;
					}
					break;

				case MNS_NA_POWER_OFF_RQ :
					Dl_ei_state = EI_STATE_DOWN;
					break;


				default :
					return (STOP);
			}

			break;


		case EI_STATE_NOT_SUPPORTED :

			switch (ei_event) {

				case EV_USER_ASSIGN_SPID :
				case DL_EST_IN :
				case DL_EST_CO :

						/* No action */

					return (STOP);

				case DL_REL_IN :
					ns_snd_dl (DL_EST_RQ, ces);
					Lc_state = LC_AWAITING_EST;
					break;

				case EV_USER_ACTION :
					return (CONTINUE);

				case MNS_DL_DLCI_RQ :

					if (Rcv_dl_code == DL_TEI_REMOVAL) {
						Dl_ei_state = EI_STATE_AWAIT_ASSIGN;
					}

					break;

				case MNS_NA_POWER_OFF_RQ :
					Dl_ei_state = EI_STATE_DOWN;
					break;

				default :
					return (STOP);
			}

			break;

		default :

#			if ASSERT == ON
				Trap (TRAP_EI_STATE, "ni1_ns_ei");
#			endif

			break;

	}

#	endif

	return (CONTINUE);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ni1_send_init - implements the endpoint initialization procedure
				for the NI1100 control of maintenance actions.

Usage           void ni1_send_init (void);

Return value    none.

Common constants and declarations : ns.h

Common objects :	current NA, DL and CALL contexts
					message current context

*--------------------------------------------------------------------------*/

void ni1_send_init ()
{

#if NS_TYPE_BRI == ON

	uchar i;

		/* Meaningless for PRImary rate */

	if (Na_type == PRI) return;

		/* Meaningless for BRI in POINt to POINT configuration */

	if ((Na_type == BRI) && (Na_connection == POINT_TO_POINT)) return;

		/* If no SPID to be load, nothing to do. */

	if (Dl_is_spid_nil) return;


		/* Copy SPID string in the generic tempo pointer */

	i = Strcpy_far	((char FAR *) p_ind_buffer,
					 (char FAR *) Dl_a_spid,
					 NI1_MX_SZ_SPID+1);

		/* load SPID in internal structure */

	I_(spid, lgth)		= i-1;
	I_(spid, p_spid)	= p_ind_buffer;

	Reset_internal_ie ();

		/* Store SPID Information Element in the message */

	set_ie_i			(CODESET_0, SPID);

		/* Set call reference nil */

	Set_call_ref_nil	();

		/* Send INFO message to the network. */

	Send_to_d_channel	(INFO);

	Start_dl_timer		(TSPID);

#endif

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            ni1_match_usid_tid - implements TID/USID checking.

Usage           uchar ni1_match_usid_tid (usid, tid, interp);

Return value    none.

Common constants and declarations : ns.h

Common objects :	current NA, DL and CALL contexts
					message current context

*--------------------------------------------------------------------------*/

uchar ni1_match_usid_tid (usid, tid, interp)
	uchar usid;
	uchar tid;
	uchar interp;
{

#if NS_TYPE_BRI == ON

	if (nb_ie_i (CODESET_0, ENDPOINT_ID) > 1) {

			/*
			 * In case of repetition, ensure the second instance did not
			 * specify a 'broadcast' usid. If yes, return TRUE.
			 */

		if (i_endpoint_id[1].usid == USID_ALL) return (TRUE);
	}


	if (usid == USID_ALL) return (TRUE);

	if (usid == Dl_usid) {

			/* USID matches */

		if (tid == BYTE_VAL_NIL) {

				/* No TID was included */

			return (TRUE);

		}

		if (interp == INTERPRETER_0) {

				/*
				 * Terminal is selected if it is assigned the indicated TID
				 * and USID value, or if tid equals TID_ALL.
				 */


			if ((tid == Dl_tid) || (tid == TID_ALL)) {
				 return (TRUE);
			}

		} else {

				/*
				 * Terminal is selected if it is not assigned the indicated
				 * TID but it is assigned the USID, or tid equals TID_ALL.
				 */


			if ((tid != Dl_tid) || (tid == TID_ALL)) {
				 return (TRUE);
			}

		}
	}

#	endif

	return (FALSE);
}

/*EOF*/
