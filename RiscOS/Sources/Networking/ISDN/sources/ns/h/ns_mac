
/*-----------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_mac.h
 *
 * $Revision$
 *
 * $Date$
 *
 * 		Implements the macros used to access to the structures of the
 *		Call Control primitives described in "net_mac.xxx" modules
 *
 *-----------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef NS_MAC_H
#	define NS_MAC_H

				/* Common macros used to simplify the next ones */

#define Val_ns(ie)					struct Paste(val_ns_,ie)
#define P_val_ns(ie)				Val_ns (ie) FAR *
#define P_start_val_ns(pr,ie)		((P_val_ns (ie))(ns_int_ctx.p__offset + Ie_offset_val (pr,ie)))

#define Off_ns(pr)					Paste (off_ns_,pr)
#define P_off_ns(pr)				Off_ns (pr) FAR *

#define Ie_offset_val(pr,ie) 		(((P_off_ns (pr)) ns_int_ctx.p__offset) -> ie)

	/* offset of the next instance of IE */

#if NS_IE_TSP_OUT == OFF
#	define Next_instance_offset		ns_offset_t next_instance_offset;
#else
		/*
		 * Add an offset for OUTGOING transparent Q931 IE location.
		 * This offset is an array :
		 * 		- tsp_data[0] = MSB of the offset,
		 * 		- tsp_data[1] = LSB of the offset.
		 */

#	define Next_instance_offset		ns_offset_t next_instance_offset; \
									uchar tsp_data[SIZEOF_TSP_OFFSET];
#endif

/*-------------------------------------------------------------------------*/

				/*  Macros used to access a value or an address */

							/*   ==============   */

			/*
			   Isdn_get_val : get a value after execution of a NS_GET
								  primitive :

					INPUT :
						- pr		= primitive code identifier,
						- ie		= information element identifier,
						- val_id	= value identifier.

					COMMON CONTEXT :
						- ns_int_ctx.p__offset = points on the offset area,

					OUTPUT :
						- Isdn_get_val = return ie value.

				*/

#define Isdn_get_val(pr, ie, val_id) (					\
		(Ie_offset_val (pr,ie) == OFFSET_NIL) ?			\
		BYTE_VAL_NIL : P_start_val_ns (pr,ie) -> val_id	\
		)

/*-------------------------------------------------------------------------*/

				/*
					Isdn_p_str : get the address of a literal string after
									 execution of a NS_GET primitive :

						INPUT :
							- pr = primitive code identifier,
							- ie = information element identifier,
							- str = string identifier.

						OUTPUT :
							- address of the literal string.
				*/

#define Isdn_p_str(pr, ie, str) (											\
		(Ie_offset_val (pr,ie) == OFFSET_NIL) ? 							\
		(uchar FAR *)P_NIL : (uchar FAR *)&(P_start_val_ns (pr,ie) -> str[1])\
		)

/*-------------------------------------------------------------------------*/

				/*
				   Isdn_lgth_str :   get the actual length of a literal
									 string :

				   (Isdn_mx_lgth_str : alias)

						INPUT :
							- pr = primitive code identifier,
							- ie = information element identifier,
							- str = string identifier.

						OUTPUT :
							- length of the string.
				*/

#define Isdn_lgth_str(pr, ie, str)  (				\
		(Ie_offset_val (pr,ie) == OFFSET_NIL) ? 	\
		0 :	P_start_val_ns (pr,ie) -> str[0]		\
		)

#define Isdn_mx_lgth_str(pr, ie, str)	Isdn_lgth_str(pr, ie, str)

/*-------------------------------------------------------------------------*/

			/*
				Offset_lgth : get the offset area length of primitive :

					INPUT :
						- pr = primitive code identifier.

					OUTPUT :
						- offset_lgth = return length of the offset area.
			*/

#define Offset_lgth(pr) 	sizeof(Off_ns (pr))

/*-------------------------------------------------------------------------*/

			/*
				Set_val_nil : fill an IE area with BYTE_VAL_NIL

					INPUT :
						- ie = Information Element identifier.

					COMMON CONTEXT :
						- ns_int_ctx.p__val    = pointer to the current structure location.

			*/

#if NS_IE_TSP_OUT == ON

#	define Set_val_nil(ie) 														\
		Memset_far ((char FAR *)ns_int_ctx.p__val, (char)BYTE_VAL_NIL, sizeof (Val_ns (ie)));	\
		*((ns_offset_t FAR *)ns_int_ctx.p__val) = OFFSET_NIL;										\
		Set_val (ie,tsp_data[0],NIL);Set_val (ie,tsp_data[1],NIL)
#else

#	define Set_val_nil(ie) 														\
		Memset_far ((char FAR *)ns_int_ctx.p__val, (char)BYTE_VAL_NIL, sizeof (Val_ns (ie)));	\
		*((ns_offset_t FAR *)ns_int_ctx.p__val) = OFFSET_NIL
#endif

/*-------------------------------------------------------------------------*/

			/*
			   Set_offset : set the offset value of an information
							element of a primitive :

					INPUT :
						- pr = primitive code identifier,
						- ie = information element identifier.

					COMMON CONTEXT :
						- ns_int_ctx.p__val    = pointer to the current structure location,
						- ns_int_ctx.p__start  = pointer to the first value location,
						- ns_int_ctx.p__offset = pointer to the offset area.
						- ns_int_ctx.p__eob 	= pointer to the end of the data area (buffer).
			*/


#if NS_IE_TSP_OUT == ON
#	define Set_ns_offset_tsp(pr, ie)	ns_int_set_offset ((ns_offset_t)((long)(&(((P_off_ns (pr)) 0) -> ie))), &ns_int_ctx)
#	define Set_offset(pr, ie)		ns_int_set_offset ((ns_offset_t)((long)(&(((P_off_ns (pr)) 0) -> ie))), &ns_int_ctx);\
									Set_val (ie,tsp_data[0],NIL);Set_val (ie,tsp_data[1],NIL)
#else
#	define Set_offset(pr, ie)		ns_int_set_offset ((ns_offset_t)((long)(&(((P_off_ns (pr)) 0) -> ie))), &ns_int_ctx)
#endif

/*-------------------------------------------------------------------------*/

			/*
			   Set_val : set an Information Element value into the current
						 structure location :

					INPUT :
						- ie     = information element identifier,
						- val_id = value identifier,
						- val    = value to store.

					COMMON CONTEXT :
						- ns_int_ctx.p__val  = current structure address.
			*/

#define Set_val(ie, val_id, val) ((P_val_ns (ie)) ns_int_ctx.p__val) -> val_id = val

/*-------------------------------------------------------------------------*/

			/*
				Array : get the value of an element of an array pointed by the
						current context :

					INPUT :
						- ie = information element identifier,
						- lv = literal string identifier,
						- x  = index of the element inside the array.

					COMMON CONTEXT :
						- ns_int_ctx.p__val = address of the current ie structure.

					OUTPUT :
						- array = return the indexed value.
			*/

#define Array(ie, lv, x)	(((P_val_ns (ie)) ns_int_ctx.p__val) -> lv[x])

/*-------------------------------------------------------------------------*/

			/*
				Set_str (resp. Set_mem) :
						sets a literal string (resp. a binary sequence)
						inside an array pointed to by the current
						context structure :

					INPUT :
						- ie	= information element identifier,
						- lv	= literal string identifier,
						- p_str = pointer on the string to move,
						- mx_sz = maximum size of the string.
						  (resp. sz = nb of octets to be copied).

			*/

#define Set_str(ie, lv, p_str, mx_sz)					\
			ns_int_ctx.p__val = (uchar FAR *)(&Array(ie, lv, 1)) + \
			(Array (ie, lv, 0) = Strcpy_far ((char FAR *)&Array(ie, lv, 1), (char FAR *)p_str, mx_sz));

#define Set_mem(ie, lv, p_mem, sz) 												\
			Memcpy_far ((char FAR *)&Array(ie, lv, 1), (char FAR *)p_mem, sz);	\
			Array (ie, lv, 0) = sz; ns_int_ctx.p__val = (uchar FAR *)(&Array(ie, lv, 1)) + (sz);\

#if NS_IE_TSP_OUT == ON

#define	TRAP_NS_DATA_AREA_TOO_SMALL		337			/* data area is too small to store the IE at NS interface */

#	define Set_mem_eob(ie, lv, p_mem, sz) 										\
			ns_int_ctx.p__eob -= (sz);														\
			if (ns_int_ctx.p__val >= ns_int_ctx.p__eob) {												\
				Trap (TRAP_NS_DATA_AREA_TOO_SMALL, "building NS primitive");	\
				return (NOK);													\
			}																	\
			Memcpy_far ((char FAR *)ns_int_ctx.p__eob, (char FAR *)p_mem, (sz));			\
			Array (ie, lv, 0) = (uchar)((ushort)(ns_int_ctx.p__eob - ns_int_ctx.p__start) >> 8);		\
			Array (ie, lv, 1) = (uchar)((ushort)(ns_int_ctx.p__eob - ns_int_ctx.p__start) & Mask (8))
#endif

/*-------------------------------------------------------------------------*/

			/*
				Set_next_ie : increments the current ie structure location to
							  a next structure location :

					INPUT :
						- ie = information element identifier.

					COMMON CONTEXT :
						- ns_int_ctx.p__val : after execution points to the next structure location.
			*/

#define Set_next_ie(ie)	ns_int_ctx.p__val += sizeof (Val_ns (ie))

#if NS_IE_TSP_OUT == ON

			/*
				Skip_ns_tsp_ie : update current IE value pointer to a next structure
									location when IE is coded transparently.
					NO INPUT

					COMMON CONTEXT :
						- ns_int_ctx.p__val : after execution points to the next structure location.
			*/

#	define Skip_ns_tsp_ie()	ns_int_ctx.p__val += sizeof (ns_offset_t) + SIZEOF_TSP_OFFSET;	\
							ns_int_ctx.p__val = (uchar FAR *)Round((long)(ns_int_ctx.p__val))

#endif

/*-------------------------------------------------------------------------*/

			/* Isdn_ctx = definition of the context used by the ISDN macros. */

struct ns_int_ctx_s {
	uchar FAR *p__offset;
	uchar FAR *p__val;
	uchar FAR *p__start;

#	if NS_IE_TSP_OUT == ON
		uchar FAR *p__eob;
#	endif

#	if NS_SUPP_SERVICES == ON
		uchar FAR *p__ss_data;
#	endif

};

#define Isdn_ctx                   struct ns_int_ctx_s ns_int_ctx
#define Isdn_ctx_ext        extern struct ns_int_ctx_s ns_int_ctx

/*-------------------------------------------------------------------------*/

			/*
				Isdn_init_ctx_xxxx = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area.
			*/

#if NS_IE_TSP_OUT == OFF
#	define Isdn_init_ctx_rq_rs(pr,p_off)				ns_int_init_ctx_rq_rs ((uchar)Round (Offset_lgth(pr)), (p_off), &ns_int_ctx)
#else
#	define Isdn_init_ctx_rq_rs(pr,p_off)				ns_int_init_ctx_rq_rs ((uchar)Round (Offset_lgth(pr)), (p_off), &ns_int_ctx, 0)
#	define Isdn_init_ctx_rq_rs_tsp(pr,p_off,data_lg)	ns_int_init_ctx_rq_rs ((uchar)Round (Offset_lgth(pr)), (p_off), &ns_int_ctx, (data_lg))
#endif


#define Isdn_init_ctx_in_co(p_off) ns_int_ctx.p__offset = ns_int_ctx.p__start = p_off

/*-------------------------------------------------------------------------*/

			/*
				Isdn_get_message : get the address and code values from
				a received communication message :

					INPUT :
						- pr 		= primitive code,
						- nai 		= network access identifier,
						- sapi 		= service access point identifier,
						- conn_id 	= connection identifier,
						- a_buffer 	= associated buffer address.
			*/

#define Isdn_get_message(pr, nai, sapi, conn_id, a_buffer)	\
				pr 			= R_msg_code;					\
				nai 		= R_msg_nai;					\
				sapi 		= R_msg_sapi;					\
				conn_id 	= R_msg_conn_id;				\
				a_buffer 	= R_msg_p_buffer

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_get_error : get the cause and diagnostics from a received
								communication message containing a NS_ERR_IN
								primitive :

					INPUT :
						- value     	= error cause value,
						- diagnostics 	= error cause diagnostics,
						- location		= (optional) error location.
			*/

#define Isdn_get_error(value, diagnostics, location) 	\
				value		= R_msg_inf0;				\
				diagnostics	= R_msg_inf1;				\
				location	= R_msg_inf2

/*-------------------------------------------------------------------------*/

			/* Get_p_val : expression getting a pointer on the current value. */

#define Get_p_val (uchar FAR *)ns_int_ctx.p__val

/*-------------------------------------------------------------------------*/

			/*
			   Get_ie : expression returning PRESENT if the IE is present in
						the message or ABSENT if the IE is missing.

					INPUT :
						- pr   	= primitive ID,
						- ie 	= IE ID.
			*/

#define Get_ie(pr, ie) 	((Ie_offset_val (pr,ie) == OFFSET_NIL) ?			\
						ABSENT : PRESENT)


			/*
			   Get_remaining_ie_instance_nb : expression returning the number of
						remaining IE instance in the message.

					INPUT :
						- pr   				= primitive ID,
						- ie 				= IE ID,
						- p_ie_instance_nb 	= pointer on the location
											  receiving the number of
											  IE value found in the message.
			*/

#	define Get_remaining_ie_instance_nb(pr,ie,p_ie_instance_nb)										\
		{																	\
			ns_offset_t FAR *p__current;											\
			*(p_ie_instance_nb) = 0;										\
			p__current = &Ie_offset_val (pr,ie);							\
			while (*p__current != OFFSET_NIL) {     						\
				(*(p_ie_instance_nb))++;                         			\
				p__current = (ns_offset_t FAR *)(ns_int_ctx.p__offset + *p__current);		\
			}																\
		}

			/*
			   Set_to_next_ie_instance : Set the message offset to the next
						IE instance of an IE.
						This macro is a message offset destructive.

					INPUT :
						- pr   		= primitive ID,
						- ie 		= IE ID,
			*/

#	define Set_to_next_ie_instance(pr,ie)										\
		if (Ie_offset_val (pr,ie) != OFFSET_NIL) {					\
			Ie_offset_val (pr,ie) =									\
			  *(ns_offset_t FAR *)(Ie_offset_val (pr,ie) + ns_int_ctx.p__offset);	\
		}

/*-------------------------------------------------------------------------*/

			/*
				Store_message : store the address and code values inside the
				communication message :

					INPUT :
						- pr 		= primitive code,
						- nai 		= network access identifier,
						- sapi 		= service access point identifier,
						- conn_id 	= connection identifier,
						- a_buffer 	= associated buffer address.
			*/

#define Store_message(pr, nai, sapi, conn_id, a_buffer)							\
				S_msg_code 		= pr;											\
				S_msg_from 		= ENT_CC;										\
				S_msg_nai 		= nai;											\
				S_msg_sapi 		= sapi;											\
				S_msg_conn_id 	= conn_id;										\
				S_msg_to 		= ENT_NS;										\
				S_msg_p_buffer 	= a_buffer;										\
				(((struct buffer FAR *)a_buffer) -> link_count) = 1;			\
				S_msg_frag_size = ((struct buffer FAR *)a_buffer) -> data_size

/*-------------------------------------------------------------------------*/

				/* Generic typedef used further */

typedef uchar ie_val;					/* ie_val type */
typedef uchar ie_array;					/* ie_array type */

/*-------------------------------------------------------------------------*/

	/* General message header IE (read only into ENT_CC) */

#if MESSAGE_HEADER_IE == ON

	struct val_ns_message_header {
		Next_instance_offset
		ie_val		protocol_discr;
		ie_val		call_ref_lgth;
		ie_val		call_ref_flag;
		ie_val		call_ref_val;
		ie_val		call_ref_val_ext;		/* for PRI access */
		ie_val		message_type;
	};

#endif

/*-------------------------------------------------------------------------*/

	/* Functions associated with the macros (defined in ns_int.c) */

#if NEW_FCT_STYLE == ON

#	if NS_IE_TSP_OUT == ON
		void ns_int_init_ctx_rq_rs	(uchar offset_lgth, uchar FAR *p_off, struct ns_int_ctx_s FAR *p_ns_int_ctx, ushort data_lgth);
#	else
		void ns_int_init_ctx_rq_rs	(uchar offset_lgth, uchar FAR *p_off, struct ns_int_ctx_s FAR *p_ns_int_ctx);
#	endif

	void ns_int_set_offset		(ns_offset_t ie_field_offset, struct ns_int_ctx_s FAR *p_ns_int_ctx);
#else
	void ns_int_init_ctx_rq_rs	();
	void ns_int_set_offset		();
#endif

/*-------------------------------------------------------------------------*/

#if F_AT4 == ON
#	include "at4.net_mac"
#endif

#if F_AT5 == ON
#	include "at5.net_mac"
#endif

#if F_AT9 == ON
#	include "at9.net_mac"
#endif

#if F_BIP == ON
#	include "bip.net_mac"
#endif

#if F_AU1 == ON
#	include "au1.net_mac"
#endif

#if F_BV1 == ON
#	include "bv1.net_mac"
#endif

#if F_BT2 == ON
#	include "bt2.net_mac"
#endif

#if F_TR6 == ON
#	include "tr6.net_mac"
#endif

#if F_ETS == ON
#	include "ets.net_mac"
#endif

#if F_A17 == ON
#	include "a17.net_mac"
#endif

#if F_A11 == ON
#	include "a11.net_mac"
#endif

#if F_E10 == ON
#	include "e10.net_mac"
#endif

#if F_VN2 == ON
#	include "vn2.net_mac"
#endif

#if F_VN3 == ON
#	include "vn3.net_mac"
#endif

#if F_VN6 == ON
#	include "vn6.net_mac"
#endif

#if F_KDD == ON
#	include "kdd.net_mac"
#endif

#if F_NI1 == ON
#	include "ni1.net_mac"
#endif

#if F_NI2 == ON
#	include "ni2.net_mac"
#endif

#if F_DMS == ON
#	include "dms.net_mac"
#endif

#if F_NTT == ON
#	include "ntt.net_mac"
#endif

#if F_SWD == ON
#	include "swd.net_mac"
#endif

#if F_QSI == ON
#	include "qsi.net_mac"
#endif

#if F_HKT == ON
#	include "hkt.net_mac"
#endif

/*-------------------------------------------------------------------------*/

		/* Macros specific to SUPPLEMENTARY SERVICES */

#if NS_SUPP_SERVICES == ON
#	include "ns_ssmac.h"
#endif

/*-------------------------------------------------------------------------*/

#endif	/* end of "ifndef NS_MAC_H" */

/*EOF*/

