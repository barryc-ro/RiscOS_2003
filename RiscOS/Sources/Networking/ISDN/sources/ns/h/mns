
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mns.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Header implementing the common declaration of the Network Signalling
 * entity NS and of the layer management MNS.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"	/* SERVICES header */
#include "ns_int.h"		/* NS upper interface */

/*-------------------------------------------------------------------------*/

						/* NS GENERAL COMMON VARIABLES */

#if SIMULATION == OFF

#	define	event_id		event_id_mns		/* event identifier */
#	define	ret_code		ret_code_mns		/* return code */
#	define 	p_snd_msg		p_snd_msg_mns		/* pointer on the current message to send if any */
#	define 	p_rcv_msg		p_rcv_msg_mns		/* pointer on the current received message if any */
#	define 	p_buffer		p_buffer_mns		/* pointer on the curent buffer if any */
#	define 	p_buffer_end	p_buffer_end_mns	/* pointers on the end of the current buffer if any */
#	define 	os_err			os_err_mns			/* OS error code */

#endif

/*-------------------------------------------------------------------------*/

						/* TRAP MANAGEMENT */

			/*
			   TRAP code : trap function is called if and inconsistancy
						   is detected inside the sofware, generally due
						   to a bug. Trap function must freeze the
						   situation and dump it to some permanent support
						   in order to fix the bug.
			*/

#define TRAP_MNS_CODE		302			/* abnormal code in message comming from  MNS */

/*-------------------------------------------------------------------------*/

						/* MNS entity objects structures */

struct node FAR *p_mns_tree;	/* tree context pointer */

			/* MNS object structure */

struct mnsna {
	nai_t		nai;						/* NA ID */
	nai_t		dl_nai;						/* DL NA ID */
	add_t		dl_ces;                 	/* Dl ces */
	ushort		call_count;					/* number of call */
	uchar	FAR	*p_blk;						/* memory block counter */

#	if NS_SEGMENTATION == ON
		ushort	segmenter_error_counter; 	/* segmenter error counter */
		ushort	reassembly_error_counter;	/* reassembly error counter */
#	endif

	ushort		error_counter;				/* miscelleanous error counter */

} FAR *p_mnsna;

			/* Access to the MNS NA object thru the p_mnsna pointer */

#define Mns_nai					p_mnsna -> nai
#define Mns_dl_nai				p_mnsna -> dl_nai
#define Mns_dl_ces				p_mnsna -> dl_ces
#define Mns_call_count			p_mnsna -> call_count
#define Mns_segmenter_err		p_mnsna -> segmenter_error_counter
#define Mns_reassembly_err		p_mnsna -> reassembly_error_counter
#define Mns_error_counter		p_mnsna -> error_counter
#define Mns_p_blk				p_mnsna -> p_blk

#if OPTIMIZATION == SPEED
	struct mnsna	FAR *FAR *p_mnsna_tab;
#endif

struct mnscall {
	conn_id_t	conn_id;
	uchar		type;
} FAR *p_mnscall;

			/* Access to the MNS CALL object thru the p_mnscall pointer */

#define Mns_conn_id				p_mnscall -> conn_id
#define Mns_type				p_mnscall -> type

			/* Static variable and constant */

static uchar mns_init_flag;		/* init flag */

/*-------------------------------------------------------------------------*/
			/* Functions */

#if NEW_FCT_STYLE == ON
	uchar 	mns_config			(struct ns_config FAR *p_ns_config);
	uchar	mns_build_object	(struct ns_config FAR *p_ns_config);
	uchar	mns_access_na		(nai_t nai);
	void 	mns_access_first_na (void);
	void 	mns_access_next_na 	(void);
	void	mns_retransmit		(code_t code, ent_id_t ent_id);
	void	mns_retransmit_na	(code_t code, nai_t nai);
	void 	mns_send_ns			(code_t prim_code, nai_t nai, conn_id_t conn_id);
#else
	uchar 	mns_config			();
	uchar	mns_build_object	();
	void 	mns_access_first_na ();
	void 	mns_access_next_na 	();
	uchar	mns_access_na		();
	void	mns_retransmit		();
	void	mns_retransmit_na	();
	void 	mns_send_ns			();
#endif

/*EOF*/
