/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_fct.h
 *
 * $Revision$
 *
 * $Date$
 *
 *				 NS network specific functions and declarations
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if F_AT4 == ON
#	include "at4.net_fct"
#endif

#if F_AT5 == ON
#	include "at5.net_fct"
#endif

#if F_AT9 == ON
#	include "at9.net_fct"
#endif

#if F_BIP == ON
#	include "bip.net_fct"
#endif

#if F_AU1 == ON
#	include "au1.net_fct"
#endif

#if F_BT2 == ON
#	include "bt2.net_fct"
#endif

#if F_BV1 == ON
#	include "bv1.net_fct"
#endif

#if F_DMS == ON
#	include "dms.net_fct"
#endif

#if F_ETS == ON
#	include "ets.net_fct"
#endif

#if F_A17 == ON
#	include "a17.net_fct"
#endif

#if F_A11 == ON
#	include "a11.net_fct"
#endif

#if F_E10 == ON
#	include "e10.net_fct"
#endif

#if F_KDD == ON
#	include "kdd.net_fct"
#endif

#if F_NI1 == ON
#	include "ni1.net_fct"
#endif

#if F_NI2 == ON
#	include "ni2.net_fct"
#endif

#if F_NTT == ON
#	include "ntt.net_fct"
#endif

#if F_SWD == ON
#	include "swd.net_fct"
#endif

#if F_TR6 == ON
#	include "tr6.net_fct"
#endif

#if F_VN2 == ON
#	include "vn2.net_fct"
#endif

#if F_VN3 == ON
#	include "vn3.net_fct"
#endif

#if F_VN6 == ON
#	include "vn6.net_fct"
#endif

#if F_QSI == ON
#	include "qsi.net_fct"
#endif

#if F_HKT == ON
#	include "hkt.net_fct"
#endif

uchar	swd;				/* index for SWD_TVKT	operator */
uchar	bv1;				/* index for BG_V1		operator */
uchar	au1;                /* index for AUSTEL_1	operator */
uchar	tr6;                /* index for DT_1TR6	operator */
uchar	vn2;                /* index for FT_VN2		operator */
uchar	vn3;                /* index for FT_VN3		operator */
uchar	vn6;                /* index for FT_VN6		operator */
uchar	ets;                /* index for ETSI		operator */
uchar	at4;                /* index for ATT_4E4	operator */
uchar	at5;                /* index for ATT_5E5	operator */
uchar	at9;                /* index for ATT_5E9	operator */
uchar	bip;                /* index for BELLCORE	operator */
uchar	bt2;                /* index for BT_ISDN2	operator */
uchar	dms;                /* index for NT_DMS100	operator */
uchar	kdd;                /* index for KDD 		operator */
uchar	ni1;                /* index for N_ISDN1	operator */
uchar	ni2;                /* index for N_ISDN2	operator */
uchar	ntt;                /* index for NTT		operator */
uchar	qsi;				/* index for ECMA_QSIG 	operator */
uchar	hkt;				/* index for HK_TEL 	operator */
uchar	a17;                /* index for CTU_CDS  			 */
uchar	a11;                /* index for CTU_BS  			 */
uchar	e10;                /* index for ATT_5ESS10			 */

/*------------------------------------------------------------------------*/

			/* Global definition for pointers and data structures	*/
			/*		for multi networking management 				*/

CONST		struct ns_timer				*p_tab_ti_call;
CONST		struct ns_timer				*p_tab_ti_dlci;
CONST		struct ns_timer				*p_tab_ti_int;
CONST	 	struct ie					*p_tab_ie;
CONST	 	struct tabl					*p_tab_tabl;
CONST	 	struct tabx					*p_tab_tabx;
CONST		struct spdu					*p_tab_spdu;
CONST		struct ssdu					*p_tab_ssdu;
CONST 		uchar 				FAR		*p_tab_timer_idx;
CONST		uchar				FAR 	*p_tab_error;

struct		spdu_param       	FAR 	*p_tab_spdu_param;
struct		net_proc_param   	FAR 	*p_tab_net_proc_param;
struct		void_fct_table				*p_void_fct_table;						/* pointer on void functions without parameters */
struct		uchar_fct_table				*p_uchar_fct_table;						/* pointer on uchar functions without parameters */
struct		uchar_fct_2u_table			*p_uchar_fct_2u_table;					/* pointer on uchar functions with 2 uchar parameters */
struct		uchar_fct_2p_table			*p_uchar_fct_2p_table;					/* pointer on uchar functions with 2 parameters */
struct		uchar_fct_4p_table			*p_uchar_fct_4p_table;					/* pointer on uchar functions with 4 parameters */
uchar							FAR		*p_net_param;           				/* pointer on array of specific parameters */

CONST_ARRAY	struct ns_timer				*tab_ti_call		[MX_NETWORK_NB];
CONST_ARRAY	struct ns_timer				*tab_ti_dlci		[MX_NETWORK_NB];
CONST_ARRAY	uchar 				FAR		*tab_timer_idx		[MX_NETWORK_NB];	/* timer index for timers called in the kernel */
CONST_ARRAY	struct ns_timer				*tab_ti_int			[MX_NETWORK_NB];

CONST_ARRAY	uchar 				FAR		*tab_error			[MX_NETWORK_NB];

CONST_ARRAY	struct ie					*tab_ie				[MX_NETWORK_NB];
CONST_ARRAY	struct tabl					*tab_tabl			[MX_NETWORK_NB];
CONST_ARRAY	struct tabx					*tab_tabx			[MX_NETWORK_NB];

CONST_ARRAY	struct spdu					*tab_spdu			[MX_NETWORK_NB];
CONST_ARRAY	struct ssdu					*tab_ssdu			[MX_NETWORK_NB];


struct spdu_param   	    	FAR 	*tab_spdu_param		[MX_NETWORK_NB];
struct net_proc_param 			FAR 	*tab_net_proc_param	[MX_NETWORK_NB];

struct param_fct_table					t_ns_net_spf_param_fct[MX_NETWORK_NB];

struct ns_net_config 					t_ns_net_config		[MX_OPERATOR_NB];

#if NS_MAINTENANCE_CAPABILITY == ON
	struct ns_d_chan_status		FAR 	*p_ns_d_chan_status;
	struct ns_d_chan_status		FAR 	*p_ns_d_chan_status_start;
#endif

		/*
			The following table indicates whether the networks are
			compiled or not.
			WARNING : this table must be ordered in increasing operator
			indexes (as defined in services.h).
		*/

	CONST struct ns_net_presence T_NS_NET_PRESENCE[] = {
		Put_ns_net_presence (0,				0,		""),
		Put_ns_net_presence (FT_VN2,		F_VN2,	"VN2"),
		Put_ns_net_presence (FT_VN3,		F_VN3,	"VN3"),
		Put_ns_net_presence (FT_VN6,		F_VN6,	"VN6"),
		Put_ns_net_presence (DT_1TR6,		F_TR6,	"TR6"),
		Put_ns_net_presence (BT_ISDN2,		F_BT2,	"BT2"),
		Put_ns_net_presence (ATT_5E5,		F_AT5,	"AT5"),
		Put_ns_net_presence (ATT_5E9,		F_AT9,	"AT9"),
		Put_ns_net_presence (NT_DMS100,		F_DMS,	"DMS"),
		Put_ns_net_presence (NTT,			F_NTT,	"NTT"),
		Put_ns_net_presence (KDD,			F_KDD,	"KDD"),
		Put_ns_net_presence (ETSI,			F_ETS,	"ETS"),
		Put_ns_net_presence (BG_V1,			F_BV1,	"BV1"),
		Put_ns_net_presence (N_ISDN1,		F_NI1,	"NI1"),
		Put_ns_net_presence (SWD_TVKT,		F_SWD,	"SWD"),
		Put_ns_net_presence (AUSTEL_1,		F_AU1,	"AU1"),
		Put_ns_net_presence (ECMA_QSIG,		F_QSI,	"QSI"),
		Put_ns_net_presence (HK_TEL,		F_HKT,	"HKT"),
		Put_ns_net_presence (DRV,			F_DRV,	"DRV"),
		Put_ns_net_presence (BELLCORE_PRI,	F_BIP,	"BIP"),
		Put_ns_net_presence (N_ISDN2,		F_NI2,	"NI2"),
		Put_ns_net_presence (CTU_CDS,		F_A17,	"A17"),
		Put_ns_net_presence (CTU_BS,		F_A11,	"A11"),
		Put_ns_net_presence (ATT_5E10,		F_E10,	"E10"),
		Put_ns_net_presence (ATT_4ESS,		F_AT4,	"AT4"),
	};


#if OPTIMIZATION == SPEED

	uchar						FAR 	*p_x_tab_spdu;
	uchar						FAR 	*p_x_tab_ssdu;
	struct	hcod						*p_x_tab_ie;
	uchar								x_tab_spdu			[MX_NETWORK_NB][SIZE_X_SPDU];
	uchar								x_tab_ssdu			[MX_NETWORK_NB][SIZE_X_SSDU];
	struct	hcod						x_tab_ie			[MX_NETWORK_NB][SIZE_X_IE_MAIN + SIZE_X_IE_OVERFLOW];

#endif

/*------------------------------------------------------------------------*/

/* EOF */


