
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename 	ssdu_ml.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*-------------------------------------------------------------------------*/

				/* ISDN-BRICKS META-LANGUAGE instruction structures */

/*------------ Instruction code structure ------------------*/

#define Inst_common uchar code

struct inst {
	Inst_common;
};

#define	Inst_code		((struct inst *)p_pc) -> code

/*------------ TABLE instruction : check the SSDU IE field against a list
			   of values called a table.
			*/

struct ssdu_tabl {
	Inst_common;		/* instruction code */
	uchar 	tabl_id;	/* table ID */
	uchar 	*p_val;		/* address where to store the field */
	Bound				/* structure alignment */
};

			/* Macro access thru the program counter pointer (p_pc) */

#define TABL_LGTH 		sizeof(struct ssdu_tabl)
#define Tabl_tabl_id	((struct ssdu_tabl *)p_pc) -> tabl_id
#define Tabl_p_val		((struct ssdu_tabl *)p_pc) -> p_val

/*------------
			   INDEXED TABLE instruction : check the field integrity against
			   a list of table seclected according to a value.
			*/

struct ssdu_tabx {
	Inst_common; 		/* code instruction */
	uchar	tabl_id;	/* table ID */
	uchar 	*px_val;	/* value used to select the table */
	uchar 	*p_val;		/* address where to stock the field */
	Bound				/* structure alignment */
};

			/* Macro access thru the program counter pointer (p_pc) */

#define TABX_LGTH		sizeof (struct ssdu_tabx)
#define Tabx_tabl_id	((struct ssdu_tabx *)p_pc) -> tabl_id
#define Tabx_px_val		((struct ssdu_tabx *)p_pc) -> px_val
#define Tabx_p_val		((struct ssdu_tabx *)p_pc) -> p_val

/*------------ VALUE instruction : check the field against a constant value */

struct ssdu_val {
	Inst_common;		/* instruction code */
	uchar 	val;		/* constant value (octet) */
	uchar 	*p_val;		/* address where to store the field */
	Bound				/* structure alignment */
};

			/* Macro access thru the program counter pointer (p_pc) */

#define VAL_LGTH		sizeof (struct ssdu_val)
#define Val_value       ((struct ssdu_val *)p_pc) -> val
#define Val_p_val		((struct ssdu_val *)p_pc) -> p_val

/*------------ IF_VAL instruction : */

struct ssdu_if_val {
	Inst_common;		/* instruction code */
	uchar condition;	/* condition code */
	uchar val;			/* constant */
	uchar *px_val;      /* value pointer (octet) (variable stored in the internal structure) */
	Bound				/* structure alignment */
};
#define IF_VAL_LGTH	sizeof 	(struct  ssdu_if_val)
#define If_val_condition 	((struct ssdu_if_val *)p_pc) -> condition
#define If_val_px_val		((struct ssdu_if_val *)p_pc) -> px_val
#define If_val_value		((struct ssdu_if_val *)p_pc) -> val

/*------------ ELSE instruction structure */

struct ssdu_else {
	Inst_common;		/* instruction code */
	Bound				/* structure alignment */
};
#define ELSE_LGTH			sizeof (struct ssdu_else)

/*------------ End if instruction structure */

struct ssdu_end_if {
	Inst_common;        	/* instruction code */
	Bound				/* structure alignment */
};
#define END_IF_LGTH	sizeof (struct ssdu_end_if)

/*-------- IF..ELSE..ENDIF blocks overlapping management tools */

#define	Skip			skip[skip_level]
#define Init_skip		skip_level = 0; Skip = OFF;

#if ASSERT == ON
#	define Down_level	if (++skip_level == MX_SKIP_LEVEL) {Trap (TRAP_SKIP_LEVEL, "ns_ssdu");}
#	define Up_level		if (--skip_level < 0) {Trap (TRAP_SKIP_LEVEL, "ns_ssdu");}
#else
#	define Down_level	++skip_level
#	define Up_level		--skip_level
#endif

/*------------ Any val instruction : any binary value is valid */

struct ssdu_any_val {
	Inst_common;        /* instruction code */
	uchar *p_val;		/* address used to store the value */
	Bound				/* structure alignment */
};
#define ANY_VAL_LGTH		sizeof (struct ssdu_any_val)
#define Any_val_p_val		((struct ssdu_any_val *)p_pc) -> p_val

/*------------ PADDING instruction : skip */

struct ssdu_pad {
	Inst_common;		/* instruction code */
	uchar lgth;			/* number of octets to skip */
	Bound				/* structure alignment */
};

			/* Macro access thru the program counter pointer (p_pc) */

#define PAD_LGTH 		sizeof (struct ssdu_pad)
#define Pad_lgth		((struct ssdu_pad *)p_pc) -> lgth

/*------------
			   TEXT instruction : check an area of n octets against an
			   octet integrity.
			*/

struct ssdu_text {
	Inst_common; 		/* instruction */
	uchar 	mini_lgth;	/* minimal length of the area */
	uchar 	maxi_lgth;	/* maximal length of the area */
	uchar 	restriction;/* integrity constrainst of each octet */
	uchar 	*p_lgth;	/* address where to store the aera length (number of octets) */
	uchar 	**p_val;	/* address where to store the address of the contain of the area */
	Bound				/* structure alignment */
};

			/* Macro access thru the program counter pointer (p_pc) */

#define TEXT_LGTH			sizeof (struct ssdu_text)
#define Text_mini_lgth		((struct ssdu_text *)p_pc) -> mini_lgth
#define Text_maxi_lgth		((struct ssdu_text *)p_pc) -> maxi_lgth
#define Text_restriction 	((struct ssdu_text *)p_pc) -> restriction
#define Text_p_val			((struct ssdu_text *)p_pc) -> p_val
#define Text_p_lgth			((struct ssdu_text *)p_pc) -> p_lgth

/*------------ FUNCTION : instruction used to execute a 'C' function */

struct ssdu_function {
	Inst_common;						/* instruction code */
	uchar 	(*p_fct) (Void_parm);		/* address of the specific function */
	Bound				/* structure alignment */
};

			/* Macro access thru the program counter pointer (p_pc) */

#define FUNCT_LGTH sizeof (struct ssdu_function)
#define Funct_p_fct ((struct ssdu_function *)p_pc) -> p_fct

/*------------ START instruction : used to start a meta language program */

struct ssdu_start {
	Inst_common;		/* instruction code */
	Bound				/* structure alignment */
};

			/* Macro access thru the program counter pointer (p_pc) */

#define START_LGTH	sizeof(struct ssdu_start)

/*------------
			   END instruction : used to finish a meta-language program and to
			   go to an optional 'C' function.
			*/

struct ssdu_end {
	Inst_common;					/* instruction code */
	uchar 	(*p_fct) (Void_parm);	/* address of the optional 'C' function */
	Bound				/* structure alignment */
};

			/* Macro access thru the program counter pointer (p_pc) */

#define END_LGTH 	sizeof (struct ssdu_end)
#define End_p_fct	((struct ssdu_end *)p_pc) -> p_fct

/*-------------------------------------------------------------------------*/

		/* Macros used for meta-language instruction generation */

#define D_TABL(xx)						struct ssdu_tabl 		xx;
#define D_TABX(xx)						struct ssdu_tabx 		xx;
#define D_VAL(xx)			 			struct ssdu_tabl 		xx;
#define D_IF_VAL(xx)					struct ssdu_if_val		xx;
#define D_ELSE(xx)						struct ssdu_else		xx;
#define D_END_IF(xx)					struct ssdu_end_if		xx;
#define D_ANY_VAL(xx)					struct ssdu_any_val 	xx;
#define D_PAD(xx) 						struct ssdu_pad  		xx;
#define D_TEXT(xx)						struct ssdu_text 		xx;
#define D_FUNCTION(xx)					struct ssdu_function 	xx;
#define D_START(xx)						struct xx { struct ssdu_start 	xx;
#define D_END(xx) 						struct ssdu_end 		xx;};

#define TABL(tab_id, p_val) 			{INST_TABL, tab_id, Pic_address (p_val)},
#define TABX(tab_id, px_val, p_val) 	{INST_TABX, tab_id, Pic_address (px_val), Pic_address (p_val)},
#define VAL(val, p_val)			 		{INST_VAL, 	val, Pic_address (p_val)},
#define IF_VAL(px_val, cond, val)		{INST_IF_VAL, cond, val, Pic_address (px_val)},
#define ELSE()							{INST_ELSE},
#define END_IF()						{INST_END_IF},
#define ANY_VAL(p_val)					{INST_ANY_VAL, Pic_address (p_val)},
#define PAD(lgth) 						{INST_PAD, lgth},
#define TEXT(mini, maxi, restr, val_lgth, p_val) \
										{INST_TEXT, mini, maxi, restr, Pic_address (val_lgth), Pic_address (p_val)},

#define FUNCTION(fct)					{INST_FUNCT, 	fct},
#define START(xx)						PIC_CONST struct xx xx = { {INST_START},
#define END(fct) 						{INST_END, 	fct} };


/*-------------------------------------------------------------------------*/

			/* Relative address calculation */

#define Relative_add	(uchar) (p_ie - p_ssdu)

			/* IE processing local functions */

#if NEW_FCT_STYLE == ON
	uchar 			r_exec_ssdu_ie 		(uchar *p_pc);
	uchar 			r_ssdu_ie_tsp		(struct ssdu_ie	*p_ssdu_ie, uchar ie_x);
	uchar 			s_exec_ssdu_ie 		(uchar *p_pc);
#else
	uchar 			r_exec_ssdu_ie 		();
	uchar 			r_ssdu_ie_tsp		();
	uchar 			s_exec_ssdu_ie 		();
#endif

/*===========================================================================

			- Network information element descriptions -
*/

		/* common macros */

#define Nb_ie_ssdu(s)				sizeof(s)/sizeof(struct ssdu_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_ssdu_ie	{CODESET_NIL,MESSAGE_HEADER,PR,OP,(uchar *)Pic_address (&SSDU_MESSAGE_HEADER)},
#	define Ssdu_ie_inc				1
#else
#	define Message_header_ssdu_ie
#	define Ssdu_ie_inc				0
#endif

/*---------- Message Header parameters (MESSAGE_HEADER) */

#if MESSAGE_HEADER_IE == ON

	D_START	(SSDU_MESSAGE_HEADER)
			D_ANY_VAL	(_PROTOCOL_DISCR)
			D_ANY_VAL	(_CALL_REF_LGTH)
			D_ANY_VAL	(_CALL_REF_FLAG)
			D_ANY_VAL	(_CALL_REF_VAL_BRI)
			D_ANY_VAL	(_CALL_REF_VAL_EXT)
			D_ANY_VAL	(_MESSAGE_TYPE)
	D_END   (END_SSDU)

#endif

/*---------- Message Header parameters (MESSAGE_HEADER) */

#if MESSAGE_HEADER_IE == ON
	extern PIC_CONST struct SSDU_MESSAGE_HEADER SSDU_MESSAGE_HEADER;
#endif

/*EOF*/

