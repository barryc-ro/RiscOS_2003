
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_ie.h
 *
 * $Revision$
 *
 * $Date$
 *
 *			contains all structures and macro definitions for the SPDU IE
 *			meta programs.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

		/* Instruction structures & access macros */

#define Inst_common		uchar v_code

		/* Position - length */

			/* Field position in the octet (not include) : 7 6 5 4 3 2 1 0 */

#define Pl_common 	uchar  position;\
					uchar  lgth

/*-------- Instruction structure */

struct inst {
	Inst_common;		/* instruction code */
};

#define	Inst_code	((struct inst *)p_pc) -> v_code

/*-------- Start instruction structure */

struct spdu_start {
	Inst_common;        /* instruction code */
	uchar	reserved;	/* for Bound */
	Bound				/* structure alignment */
};

#define START_LGTH	sizeof (struct spdu_start)

/*-------- Val instruction structure : unique value */

struct spdu_val {
	Inst_common;		/* instruction code */
	Pl_common;			/* position and length of the field in the octet of the message */
	uchar 	val;        /* value to check against */
	uchar 	*p_val;		/* address used to store the value if valid */
	Bound				/* structure alignment */
};

#define VAL_LGTH		sizeof (struct spdu_val)
#define Val_position 	((struct spdu_val *)p_pc) -> position
#define Val_lgth		((struct spdu_val *)p_pc) -> lgth
#define Val_value		((struct spdu_val *)p_pc) -> val
#define Val_p_val		((struct spdu_val *)p_pc) -> p_val

/*-------- Table instruction structure */

struct spdu_tabl {
	Inst_common;		/* instruction code */
	Pl_common;			/* position and length of the field in the octet of the message*/
	uchar 	tabl_id;    /* table ID (number) */
	uchar 	*p_val;		/* pointer to the internal field used to store the
						   valid value */
	Bound				/* structure alignment */
};

#define TABL_LGTH 		sizeof (struct spdu_tabl)
#define Tabl_position 	((struct spdu_tabl *)p_pc) -> position
#define Tabl_lgth		((struct spdu_tabl *)p_pc) -> lgth
#define Tabl_tabl_id	((struct spdu_tabl *)p_pc) -> tabl_id
#define Tabl_p_val		((struct spdu_tabl *)p_pc) -> p_val

/*-------- Set of tables  instruction structure */

struct spdu_tabx {
	Inst_common;		/* instruction code */
	Pl_common;			/* position and length of the field in the octet of the message */
	uchar 	tabl_id;	/* table ID */
	uchar 	*px_val;	/* address of the octet which is used to select the table */
	uchar 	*p_val;		/* address used to store the valid value */
	Bound				/* structure alignment */
};

#define TABX_LGTH		sizeof (struct spdu_tabx)
#define Tabx_position 	((struct spdu_tabx *)p_pc) -> position
#define Tabx_lgth		((struct spdu_tabx *)p_pc) -> lgth
#define Tabx_tabl_id	((struct spdu_tabx *)p_pc) -> tabl_id
#define Tabx_default	((struct spdu_tabx *)p_pc) -> default_val
#define Tabx_px_val		((struct spdu_tabx *)p_pc) -> px_val
#define Tabx_p_val		((struct spdu_tabx *)p_pc) -> p_val

/*-------- Text instruction structure */

struct spdu_text {
	Inst_common;        /* instruction code */
	uchar 	code;		/* used alphabet */
	uchar 	restriction; /* restriction to applied to the octet */
	uchar 	*p_lgth;    /* pointer on the internal storage of the field length */
	uchar 	**p_val;	/* pointer on the internal storage of the value */
	Bound				/* structure alignment */
};

#define TEXT_LGTH			sizeof (struct spdu_text)
#define Text_code			((struct spdu_text *)p_pc) -> code
#define Text_restriction	((struct spdu_text *)p_pc) -> restriction
#define Text_p_val			((struct spdu_text *)p_pc) -> p_val
#define Text_p_lgth			((struct spdu_text *)p_pc) -> p_lgth

/*-------- Any val instruction : any binary value is valid */

struct spdu_any_val {
	Inst_common;        /* instruction code */
	Pl_common;          /* position and length of the field in the octet of the message */
	uchar *p_val;		/* address used to store the value */
	Bound				/* structure alignment */
};

#define ANY_VAL_LGTH		sizeof (struct spdu_any_val)
#define Any_val_position 	((struct spdu_any_val *)p_pc) -> position
#define Any_val_lgth		((struct spdu_any_val *)p_pc) -> lgth
#define Any_val_p_val		((struct spdu_any_val *)p_pc) -> p_val

/*--------
		   Extension bit 1 intruction structure : extension bit
		   shall be set to 1.
		*/

struct spdu_ext_1 {
	Inst_common;        /* instruction code */
	uchar	reserved;	/* for Bound */
	Bound				/* structure alignment */
};

#define EXT_1_LGTH	sizeof (struct spdu_ext_1)

/*--------
		   Extension bit 0 or 1 instruction structure : extension bit shall
		   be set to 0 or 1.
		*/

struct spdu_ext_0_1 {
	Inst_common;        /* instruction code */
	uchar	reserved;	/* for Bound */
	Bound				/* structure alignment */
};

#define EXT_0_1_LGTH	sizeof (struct spdu_ext_0_1)

/*-------- Padding instruction structure */

struct spdu_pad {
	Inst_common;        /* instruction code */
	Pl_common;          /* position and length of the field in the octet of the message */
	uchar	reserved;	/* for Bound */
	Bound				/* structure alignment */
};

#define PAD_LGTH 		sizeof (struct spdu_pad)
#define Pad_position	((struct spdu_pad *)p_pc) -> position
#define Pad_lgth		((struct spdu_pad *)p_pc) -> lgth

/*--------
		   If val instruction structure :
		   If val <condition> constant
				instructions to skip if the condition is thrue
		   End if
		*/

struct spdu_if_val {
	Inst_common;        /* instruction code */
	uchar cond_type;	/* condition type : I_IF or N_IF */
	uchar condition;	/* condition code */
	uchar val;			/* constant */
	uchar *px_val;      /* value pointer (octet) (variable stored in the internal structure) */
	Bound				/* structure alignment */
};

#define IF_VAL_LGTH				sizeof (struct  spdu_if_val)
#define If_val_condition_type	((struct spdu_if_val *)p_pc) -> cond_type
#define If_val_condition 		((struct spdu_if_val *)p_pc) -> condition
#define If_val_px_val			((struct spdu_if_val *)p_pc) -> px_val
#define If_val_value			((struct spdu_if_val *)p_pc) -> val
#define Get_if_val_variable 	(* (If_val_condition_type == I_IF ? Add_i (If_val_px_val) : If_val_px_val))

/*--------
			If tabl instruction structure :
			If val <condition> set of constants
				instructions to skip if the condition is true
			End if
		*/

struct spdu_if_tabl {
	Inst_common;        /* instruction code */
	uchar cond_type;	/* condition type : I_IF or N_IF */
	uchar condition;	/* condition code */
	uchar tabl_id;		/* table ID */
	uchar *px_val;		/* value pointer (octet) (variable stored in the internal structure) */
	Bound				/* structure alignment */
};

#define IF_TABL_LGTH			sizeof (struct spdu_if_tabl)
#define If_tabl_condition_type	((struct spdu_if_tabl *)p_pc) -> cond_type
#define If_tabl_condition		((struct spdu_if_tabl *)p_pc) -> condition
#define If_tabl_px_val			((struct spdu_if_tabl *)p_pc) -> px_val
#define If_tabl_id				((struct spdu_if_tabl *)p_pc) -> tabl_id
#define Get_if_tabl_variable 	(* (If_tabl_condition_type == I_IF ? Add_i (If_tabl_px_val) : If_tabl_px_val))

/*-------- ELSE instruction structure */

struct spdu_else {
	Inst_common;		/* instruction code */
	uchar	reserved;	/* for Bound */
	Bound				/* structure alignment */
};

#define ELSE_LGTH			sizeof (struct spdu_else)

/*-------- End if instruction structure */

struct spdu_end_if {
	Inst_common;        /* instruction code */
	uchar	reserved;	/* for Bound */
	Bound				/* structure alignment */
};

#define END_IF_LGTH	sizeof (struct spdu_end_if)

/*-------- IF..ELSE..ENDIF blocks overlapping management tools */

#define	Skip			skip[skip_level]
#define Init_skip		skip_level = 0; Skip = OFF;

#if ASSERT == ON
#	define Down_level	if (++skip_level == MX_SKIP_LEVEL) {Trap (TRAP_SKIP_LEVEL, "ns_ie");}
#	define Up_level		if (--skip_level < 0) {Trap (TRAP_SKIP_LEVEL, "ns_ie");}
#else
#	define Down_level	++skip_level
#	define Up_level		--skip_level
#endif

/*-------- Function instruction structure : call a specific function  */

struct spdu_function {
	Inst_common;        		/* instruction code */
	uchar (*p_fct) (Void_parm);	/* pointer on the function */
	Bound						/* structure alignment */
};

#define FUNCT_LGTH  sizeof (struct spdu_function)
#define Funct_p_fct	((struct spdu_function *)p_pc) -> p_fct

/*--------
		   End of octet instruction structure : used to increment
		   the current p_ie pointer.
		*/

struct spdu_end_octet {
	Inst_common;       	/* instruction code */
	uchar	reserved;	/* for Bound */
	Bound				/* structure alignment */
};

#define END_OCTET_LGTH	sizeof (struct spdu_end_octet)

/*-------- End instruction structure : stop the execution of the meta-program */

struct spdu_end {
	Inst_common;        /* instruction code */
	uchar (*p_fct) (Void_parm);
	Bound				/* structure alignment */
};

#define END_LGTH 	sizeof (struct spdu_end)
#define End_p_fct 	((struct spdu_end *)p_pc) -> p_fct

/*-------- Start optional octets */

struct spdu_optional_octet {
	Inst_common;       	/* instruction code */
	uchar	reserved;	/* for Bound */
	Bound				/* structure alignment */
};

#define OPTIONAL_OCTET_LGTH	sizeof (struct spdu_optional_octet)

/*-------- Macros for instructions generation */

#define D_VAL(xx)								struct spdu_val				xx;
#define D_TABL(xx)								struct spdu_tabl			xx;
#define D_TABX(xx) 								struct spdu_tabx 			xx;
#define D_ANY_VAL(xx)							struct spdu_any_val 		xx;
#define D_PAD(xx) 								struct spdu_pad  			xx;
#define D_TEXT(xx) 								struct spdu_text 			xx;
#define D_IF_VAL(xx) 							struct spdu_if_val 			xx;
#define D_IF_TABL(xx) 							struct spdu_if_tabl 		xx;
#define D_ELSE(xx)								struct spdu_else			xx;
#define D_EXT_1(xx) 							struct spdu_ext_1 			xx;
#define D_EXT_0_1(xx) 							struct spdu_ext_0_1 		xx;
#define D_END_IF(xx) 							struct spdu_end_if 			xx;
#define D_END(xx) 								struct spdu_end 			xx;};
#define D_FUNCTION(xx)							struct spdu_function 		xx;
#define D_END_OCTET(xx)							struct spdu_end_octet		xx;
#define D_OPTIONAL_OCTET(xx)					struct spdu_optional_octet	xx;
#define D_START(xx)								struct xx { struct spdu_start xx;

#define VAL(	p, l, val, p_val) 				{INST_VAL,		p, (uchar)Mask(l), 	val,            Pic_address (p_val)},
#define TABL(	p, l, tab_id, p_val) 			{INST_TABL,		p, (uchar)Mask(l), 	tab_id,         Pic_address (p_val)},
#define TABX(	p, l, tab_id, px_val, p_val) 	{INST_TABX,		p, (uchar)Mask(l), 	tab_id, Pic_address (px_val), Pic_address (p_val)},
#define ANY_VAL(p, l, p_val)					{INST_ANY_VAL,	p, (uchar)Mask(l),  	            Pic_address (p_val)},
#define PAD(	p, l) 							{INST_PAD,		p, (uchar)Mask(l)},
#define TEXT(	code, restric, val_lgth, p_val) {INST_TEXT,		code, restric, Pic_address (val_lgth), Pic_address (p_val)},
#define IF_VAL(	cond_type, px_val, cond, val) 	{INST_IF_VAL,	cond_type, cond, val, Pic_address (px_val)},
#define IF_TABL(cond_type, px_val, cond,tab_id)	{INST_IF_TABL,	cond_type, cond, tab_id, Pic_address (px_val)},
#define ELSE()									{INST_ELSE},
#define EXT_1() 								{INST_EXT_1},
#define EXT_0_1() 								{INST_EXT_0_1},
#define END_IF() 								{INST_END_IF},
#define END(fct) 								{INST_END,fct}};
#define FUNCTION(fct)							{INST_FUNCT,fct},
#define END_OCTET()								{INST_END_OCTET},
#define OPTIONAL_OCTET()						{INST_OPTIONAL_OCTET},
#define START(xx)					 			PIC_CONST	struct xx xx = { {INST_START},

/*-------------------------------------------------------------------------*/

		/* Local macro's */

#define Extract(p, lgth) 		((ie_octet >> (p)) & lgth)
#define Add_i(p_first_val) 		((uchar *)p_first_val + i_ie_offset)

#define Ignore_extra_ie_octets()	p_ie = p_ie_end

#define Error_intern()			if (error_set (ERR_I_TE_VAL, 0, (uchar)(p_ie - p_spdu)) == FATAL) return (NOK)

/* Local functions declaration */

#if NEW_FCT_STYLE == ON
	uchar 	s_exec_spdu_ie	(uchar *p_pc);
	uchar 	s_spdu_ie_tsp 	(uchar ie_x);
	uchar 	r_exec_spdu_ie	(uchar *p_pc);
	uchar 	check_convert	(uchar FAR *p_to, uchar FAR *p_from,\
							 uint lgth, uchar code, uchar restriction);
#else
	uchar 	s_exec_spdu_ie	();
	uchar 	s_spdu_ie_tsp 	();
	uchar 	r_exec_spdu_ie	();
	uchar 	check_convert	();
#endif

/*EOF*/
