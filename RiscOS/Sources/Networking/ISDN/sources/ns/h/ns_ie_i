
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_ie_i.h
 *
 * $Revision$
 *
 * $Date$
 *
 * data : internal data structures containing active and valid data.
 *
 * function(s)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/
/*

Internal data structures :    set_ie_i
------------------------      is_ie_i


x_ie_i		 tab_ie_i                       i_xxxxx
	|	   ==============             =========================
	|	   |codest,ie_id|             |     i_bc[]            |
	|	   --------------             |-----------------------|
	|	   |            |             |     i_call_id[]       |
	|	   --------------             |                       |
	|	   |            |             |-----------------------|
	|	   --------------             |     i_call_state[]    |
	------>|  IE_NIL    |             |-----------------------|
		   --------------             |     i_cause[]         |
		   |            |             |                       |
		   --------------             |-----------------------|
		   |            |             |                       |
		   --------------

*/
/*--------------------------------------------------------------------------*/

#	if (F_AT5 == ON) || (F_AT9 == ON) || (F_E10 == ON)
		struct i_adjunct_con			i_adjunct_con			[MX_ADJUNCT_CON];		/* adjunct control */

#		if (AT5_KEY_SYSTEM_FEATURE == ON)  || (F_E10 == ON)
			struct i_assoc_type			i_assoc_type			[MX_ASSOC_TYPE];		/* associated type */
#		endif

		struct i_dest_call_appear		i_dest_call_appear		[MX_DEST_CALL_APPEAR];	/* destination call appearance */
		struct i_display_con			i_display_con			[MX_DISPLAY_CON];		/* display control */
		struct i_display_fld			i_display_fld			[MX_DISPLAY_FLD];		/* display field */
		struct i_keypad_con				i_keypad_con			[MX_KEYPAD_CON];		/* keypad control */
		struct i_managmnt				i_managmnt				[MX_MANAGMNT];			/* management */
		struct i_ori_call_appear 		i_ori_call_appear		[MX_ORI_CALL_APPEAR];	/* origination call appearance */
		struct i_other_call_ref			i_other_call_ref		[MX_OTHER_CALL_REF];	/* other call reference */
		struct i_sel_call_appear		i_sel_call_appear		[MX_SEL_CALL_APPEAR];	/* selected call appearance */
		struct i_te_cap					i_te_cap				[MX_TE_CAP];			/* terminal capabilities */
#	endif

#	if (F_BV1 == ON) || (F_QSI == ON)
		struct i_conn_sub_add	 		i_conn_sub_add			[MX_CONN_SUB_ADD];		/* connected subaddress */
#	else
#		if (NS_COLP_COLR == ON) && (F_ETS == ON)
			struct i_conn_sub_add	 	i_conn_sub_add			[MX_CONN_SUB_ADD];		/* connected subaddress */
#		endif
#	endif

#	if (F_DMS == ON) || (F_NI1 == ON)
		struct i_o_called_nb 			i_o_called_nb			[MX_O_CALLED_NB];		/* original called party number */
		struct i_prot_ver_ctrl			i_prot_ver_ctrl			[MX_PROT_VER_CTRL];		/* protocol version control */
#	endif

#	if F_NI2 == ON
		struct i_redir_sub_add			i_redir_sub_add			[MX_REDIR_SUB_ADD];		/* redirecting sub-address */
		struct i_redir_sub_add_net_spf	i_redir_sub_add_net_spf	[MX_REDIR_SUB_ADD_NET_SPF];		/* redirecting sub-address */
#	endif

#	if F_NTT == ON
		struct i_repeat_ind				i_repeat_ind			[MX_REPEAT_IND];		/* repeat indicator */
#	endif

#	if (F_TR6 == ON)
		struct i_add_attrib				i_add_attrib			[MX_ADD_ATTRIB];		/* additional transmition attributes */
		struct i_charging_info			i_charging_info			[MX_CHARGING_INFO];		/* charging information */
		struct i_date					i_date					[MX_DATE];				/* date */
		struct i_fac_select				i_fac_select			[MX_FAC_SELECT];		/* facility select */
		struct i_fac_stat				i_fac_stat				[MX_FAC_STAT];			/* facility status */
		struct i_service_ind			i_service_ind			[MX_SERVICE_IND];		/* service indocator */
#	endif

/*--------------------------------------------------------------------------*/

#	if (F_TR6 == ON)|| (F_DMS == ON) || (F_BV1 == ON) || (F_QSI == ON) || (F_E10 == ON) || (F_NI1 == ON) || (F_AT4 == ON)
		struct i_conn_nb				i_conn_nb				[MX_CONN_NB];			/* connected address */
#	else
#		if (NS_COLP_COLR == ON) && (F_ETS == ON)
			struct i_conn_nb			i_conn_nb				[MX_CONN_NB];			/* connected address */
#		endif
#   endif

#	if (F_VN2 == ON) || (F_VN3 == ON) || (F_VN6 == ON)
		struct i_user_mode				i_user_mode				[MX_USER_MODE];			/* user mode */
		struct i_user_fac				i_user_fac				[MX_USER_FAC];			/* user facility */
#	endif

#	if (F_VN6 == ON)
		struct i_user_pcs 				i_user_pcs				[MX_USER_PCS];			/* USER to PCS information */
		struct i_pcs_user 				i_pcs_user				[MX_PCS_USER];			/* PCS to USER information */
#	endif

#	if NS_SPF_FACILITY == ON
		struct i_spf_fac 				i_spf_fac				[MX_SPF_FAC];			/* network specific facility */
#	endif

#	if (F_NI1 == ON) || (F_DMS == ON) || (F_BIP == ON) || (F_AT9 == ON) || (F_NI2 == ON)
		struct i_os_accss				i_os_accss				[MX_OS_ACCSS];			/* operator system access */
#	endif

#	if (F_NI1 == ON) || (F_DMS == ON) || (F_AT9 == ON) || (F_NI2 == ON)  || (F_E10 == ON)
		struct i_call_appear			i_call_appear			[MX_CALL_APPEAR];		/* call appearance */
		struct i_redirection_nb			i_redirection_nb		[MX_REDIRECTION_NB];	/* redirection number */
		struct i_redirection_nb_net_spf	i_redirection_nb_net_spf[MX_REDIRECTION_NB_NET_SPF];	/* network specific redirection number */
		struct i_spid					i_spid					[MX_SPID];				/* service profile identifier */
#	else
#		if (NS_SS_DIVERSION == ON) && (F_ETS == ON)
			struct i_redirection_nb		i_redirection_nb		[MX_REDIRECTION_NB];	/* redirection number */
#		endif
#	endif

#	if (F_NI1 == ON) || (F_DMS == ON) || (F_HKT == ON) || (F_AT9 == ON) || (F_NI2 == ON) || (F_E10 == ON)
		struct i_information_rq			i_information_rq		[MX_INFORMATION_RQ];	/* information request */
#	endif

#	if (F_NTT == ON) || (F_AT5 == ON)  || (F_E10 == ON)
		struct i_switchhook				i_switchhook			[MX_SWITCHHOOK];		/* swithhook */
		struct i_service_id				i_service_id			[MX_SERVICE_ID];		/* service identifier */
#	endif

#	if (F_NTT == ON) || (F_AT5 == ON) || (F_NI1 == ON) || (F_NI2 == ON) || (F_DMS == ON) || (F_HKT == ON) || (F_AT9 == ON)  || (F_E10 == ON)
		struct i_feature_ind			i_feature_ind			[MX_FEATURE_IND];		/* feature indication */
		struct i_feature_act			i_feature_act			[MX_FEATURE_ACT];		/* feature activation */
#	endif

#	if (F_NTT == ON) || (F_SWD == ON) || (F_BV1 == ON) || (F_ETS == ON) || (F_VN6 == ON)
		struct i_advice_charge			i_advice_charge			[MX_ADVICE_CHARGE];		/* advice of charge */
#	endif

#	if (F_NI1 == ON) || (F_NI2 == ON) || (F_BV1 == ON) || (F_VN3 == ON) || (F_DMS == ON) || (F_VN6 == ON) || (F_AT9 == ON)  || (F_E10 == ON) || (F_AT4 == ON)
		struct i_redir_nb				i_redir_nb				[MX_REDIR_NB];			/* redirecting number */
#	else
#		if (NS_SS_DIVERSION == ON) && (F_ETS == ON)
			struct i_redir_nb			i_redir_nb				[MX_REDIR_NB];			/* redirecting number */
#		endif
#	endif

#	if (F_NI1 == ON) || (F_NI2 == ON) || (F_DMS == ON) || (F_AT5 == ON) || (F_AT9 == ON)  || (F_E10 == ON)
		struct i_endpoint_id			i_endpoint_id			[MX_ENDPOINT_ID];		/* endpoint identifier */
#	endif

#	if (F_QSI == ON)
		struct i_transit_counter		i_transit_counter		[MX_TRANSIT_COUNTER];	/* transit counter */
		struct i_party_category			i_party_category		[MX_PARTY_CATEGORY];	/* party category */
#	endif

#	if (F_E10 == ON)
		struct i_precedence_level		i_precedence_level		[MX_PRECEDENCE_LEVEL];	/* precedence level */
		struct i_traveling_classmark	i_traveling_classmark	[MX_TRAVELING_CLASS_MARK];/* traveling class mark */
		struct i_user_entered_code		i_user_entered_code		[MX_USER_ENTERED_CODE];	/* user entered code */
#	endif

#	if (F_A17 == ON) || (F_A11 == ON)
		struct i_aircraft_info			i_aircraft_info			[MX_AIRCRAFT_INFO];		/* aircraft information */
		struct i_credit_card_nb			i_credit_card_nb		[MX_CREDIT_CARD_NUMBER];/* credit card number */
		struct i_credit_card_status		i_credit_card_status	[MX_CREDIT_CARD_STATUS];/* credit card status */
		struct i_dtmf_2_dialing			i_dtmf_2_dialing		[MX_DTMF_2_DIALING];	/* DTMF 2nd dialing */
		struct i_queue_info 			i_queue_info			[MX_QUEUE_INFO];		/* queue information */
		struct i_queue_request 			i_queue_request			[MX_QUEUE_REQUEST];		/* queue request */
		struct i_route_select			i_route_select			[MX_ROUTE_SELECT];		/* route select */
#	endif

/*--------------------------------------------------------------------------*/

	struct i_bc 						i_bc					[MX_BC];				/* bearer capability */
	struct i_called_nb 					i_called_nb				[MX_CALLED_NB];			/* called party number */
	struct i_called_sub_add				i_called_sub_add		[MX_CALLED_SUB_ADD];	/* called party subaddress */
	struct i_calling_nb 				i_calling_nb			[MX_CALLING_NB];		/* calling party number 1 */
	struct i_calling_sub_add 			i_calling_sub_add		[MX_CALLING_SUB_ADD];	/* calling party subaddress */
	struct i_call_id 					i_call_id				[MX_CALL_ID];			/* call identity */
	struct i_call_state 				i_call_state			[MX_CALL_STATE];		/* call state */
	struct i_cause 						i_cause					[MX_CAUSE];				/* cause */
	struct i_change_status				i_change_status			[MX_CHANGE_STATUS];		/* change status */
	struct i_chan_id 					i_chan_id				[MX_CHAN_ID];			/* channel identification */
	struct i_congest_level				i_congest_level			[MX_CONGEST_LEVEL];		/* congestion level */

#	if (F_ETS == ON) || (F_VN3 == ON) || (F_VN6 == ON) || (F_NTT == ON)
		struct i_date_time				i_date_time				[MX_DATE_TIME];			/* date and time */
#	endif

	struct i_display 					i_display				[MX_DISPLAY];			/* display */
	struct i_escape 					i_escape				[MX_ESCAPE];			/* escape for ext */

#	if (NS_SUPP_SERVICES == ON) && (F_ETS == ON)
		struct i_extended_fac			i_extended_fac			[MX_EXTENDED_FAC];		/* extended facility for SUPPLEMENTARY SERVICES */
#	endif

	struct i_facility					i_facility				[MX_FACILITY];			/* facility */
	struct i_hlc 						i_hlc					[MX_HLC];				/* high layer compatibility */
	struct i_keypad 					i_keypad				[MX_KEYPAD];			/* keypad facility */
	struct i_llc 						i_llc					[MX_LLC];				/* low layer compatibility */
	struct i_notif_ind					i_notif_ind				[MX_NOTIF_IND];			/* notify indicator */
	struct i_progress_ind 				i_progress_ind			[MX_PROGRESS_IND];		/* progress indicator */
	struct i_restart_ind				i_restart_ind			[MX_RESTART_IND];		/* restart indicator */
	struct i_signal 					i_signal				[MX_SIGNAL];			/* signal */
	struct i_transit_net_sel			i_transit_net_sel		[MX_TRANSIT_NET_SEL];	/* transit network selection */
	struct i_uui 						i_uui					[MX_UUI];				/* user to user information */

/*--------------------------------------------------------------------------*/

/*EOF*/
