
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ns_i_s.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Declaration of structures where ISDN-BRICKS store all the checked values
 * coming from the Call Control entity (CC) and the network.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
	NET_I_S.H : structure of information elements in internal format.
	Each IE is stored into a fixed structure (without optional value).
	Each value is stored on one byte or into a pointed array stored into
	a buffer pool (ind_buffer).
	The values are  common to all the functions. Values stored are valid
	because they have been previously checked or initialized from constants.
*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

					/* Internal structure area */

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/


				/* Additional transmission attributes (ADD_ATTRIB) */

struct i_add_attrib {
	uchar rq_in_flag;					/* request/indication flag */
	uchar attrib;						/* attributes */
	uchar *p_tsp_add;					/* address of the Q931 string */
};


		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Adjunction control */

struct i_adjunct_con {
	uchar adjunct_val;					/* adjunct control value */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/*  Aircraft information (AIRCRAFT_INFO) */

struct i_aircraft_info {
	uchar flight_op_id[3];				/* A11 - flight operator identity */
	uchar flight_nb[4];					/* A11 - flight number */
	uchar departure_year;				/* departure date */
	uchar departure_month;              /* local date */
	uchar departure_day;                /* coded on 6 digits */
	uchar service_class_id;				/* service class identifier defined by each airline */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Associated type */

struct i_assoc_type	{
	uchar assoc_status;					/* associated status */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_assoc_type_status				(I_(assoc_type,assoc_status))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/*  Advice of Charge (ADVICE_CHARGE) */

struct i_advice_charge {
	uchar charge_type;					/* indication type */
	uchar data_lgth;					/* length of the data */
	uchar *p_data;						/* charging data */

#	if (F_BV1 == ON) || (F_SWD == ON) || (F_ETS == ON) || (F_VN6 == ON)
		uchar coding_std;				/* coding standard */
		uchar cept_std;					/* CEPT standard */

#		if (F_BV1 == ON) || (F_ETS == ON) || (F_VN6 == ON)
			uchar charge_period;			/* charging period */
			uchar charge_period_m;			/* charging period multiplier */
#		endif

#	endif
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_advice_charge_type			(I_(advice_charge,charge_type))
#define I_advice_charge_lgth			(I_(advice_charge,data_lgth))
#define I_advice_p_charging_data		(I_(advice_charge,p_data))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/*  Bearer Capability (BC) */

struct i_bc {
	uchar coding_std;					/* coding standard */
	uchar trf_cap;						/* information transfer capability */
	uchar trf_mode;						/* transfer mode */
	uchar trf_rate;						/* information transfer rate */
	uchar structure;					/* structure */
	uchar config;						/* configuration*/
	uchar est;							/* establishment */
	uchar symmetry;						/* symmetry */
	uchar dest_rate;					/* destination rate */
	uchar layer_id_1;					/* layer 1 identification */
	uchar protocol_id_1;				/* user information layer 1 protocol */
	uchar syn_asyn;						/* synchronous/asynchronous */
	uchar negotiation;					/* negotiation */
	uchar user_rate;					/* user rate */
	uchar inter_rate;					/* intermediate rate */
	uchar tx_nic;						/* network independent clock (NIC) on Transmission (Tx) */
	uchar rx_nic;						/* network independent clock (NIC) on Reception (Rx) */
	uchar tx_fc;						/* flow control on Transmission (Tx) */
	uchar rx_fc;						/* flow control on Reception (Rx) */
	uchar hdr;							/* header/no header */
	uchar multi_frame;					/* multi frame establishement in Data Link */
	uchar op_mode;						/* mode of operation */
	uchar lli;							/* Logical Linker Identifier Negotiation */
	uchar assign;						/* Assignor/Assignee */
	uchar band;							/* In-band/Out-band negotiation */
	uchar stop_bit;						/* number of stop bits */
	uchar data_bit;						/* number of data bits */
	uchar parity;						/* number of parity bit */
	uchar duplex;						/* duplex mode */
	uchar modem;						/* modem type */
	uchar layer_id_2;					/* layer 2 identification */
	uchar protocol_id_2;				/* user information layer 2 protocol */
	uchar layer_id_3;					/* layer 3 identification */
	uchar protocol_id_3;				/* user information layer 3 protocol */
	uchar *p_tsp_add;					/* address of the Q931 string */
	uchar multiplier;					/* multiplier */
};

#define I_bc_coding_std					(I_(bc,coding_std))
#define I_bc_trf_cap					(I_(bc,trf_cap))
#define I_bc_trf_mode					(I_(bc,trf_mode))
#define I_bc_trf_rate					(I_(bc,trf_rate))
#define I_bc_structure					(I_(bc,structure))
#define I_bc_configuration				(I_(bc,config))
#define I_bc_est						(I_(bc,est))
#define I_bc_symmetry					(I_(bc,symmetry))
#define I_bc_dest_rate					(I_(bc,dest_rate))
#define I_bc_layer_id_1					(I_(bc,layer_id_1))
#define I_bc_protocol_id_1				(I_(bc,protocol_id_1))
#define I_bc_syn_asyn					(I_(bc,syn_asyn))
#define I_bc_negotiation				(I_(bc,negotiation))
#define I_bc_user_rate					(I_(bc,user_rate))
#define I_bc_inter_rate					(I_(bc,inter_rate))
#define I_bc_tx_nic	    				(I_(bc,tx_nic))
#define I_bc_rx_nic	    				(I_(bc,rx_nic))
#define I_bc_tx_fc						(I_(bc,tx_fc))
#define I_bc_rx_fc						(I_(bc,rx_fc))
#define I_bc_stop_bit					(I_(bc,stop_bit))
#define I_bc_data_bit					(I_(bc,data_bit))
#define I_bc_parity						(I_(bc,parity))
#define I_bc_duplex						(I_(bc,duplex))
#define I_bc_modem						(I_(bc,modem))
#define I_bc_layer_id_2					(I_(bc,layer_id_2))
#define I_bc_protocol_id_2				(I_(bc,protocol_id_2))
#define I_bc_layer_id_3					(I_(bc,layer_id_3))
#define I_bc_protocol_id_3				(I_(bc,protocol_id_3))

					/* For AT5 use (BC and LLC) */

#define	Layer_id						layer_id_1
#define	Layer_nb						layer_id_2
#define	Protocol_id						protocol_id_1
#define	Add_layer_id					layer_id_3
#define	Add_protocol_id					protocol_id_3

					/* For BT2 use (BC and LLC) */

#define	Nic								tx_nic

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Call appearance (CALL_APPEAR) */

struct i_call_appear {
	uchar call_appear_id;				/* call appearance identifier */
	uchar call_appear_id_2;				/* call appearance identifier continuation */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/*  Called party number (CALLED_NB) */

struct i_called_nb {
	uchar nb_type;                     	/* type of number */
	uchar plan_id;						/* numbering plan identification */
	uchar lgth;							/* length of the number digits */
	uchar *p_add;						/* address of the number digits */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_called_nb_type				(I_(called_nb,nb_type))
#define	I_called_nb_plan_id				(I_(called_nb,plan_id))
#define	I_called_nb_lgth				(I_(called_nb,lgth))
#define	I_called_nb_p_add				(I_(called_nb,p_add))

#define	Nb_type_plan					nb_type		/* For NI1 */

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Called party subaddress (CALLED_SUB_ADD) */

struct i_called_sub_add {
	uchar sub_add_type;					/* type of subaddress */
	uchar odd_even_ind;					/* odd/even indicator */
	uchar format;						/* subaddress format */
	uchar lgth;							/* length of the subaddress information */
	uchar *p_add;						/* address of the subaddress information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_called_sub_add_type			(I_(called_sub_add,sub_add_type))
#define	I_called_sub_add_odd_even_ind	(I_(called_sub_add,odd_even_ind))
#define	I_called_sub_add_format	    	(I_(called_sub_add,format))
#define	I_called_sub_add_lgth			(I_(called_sub_add,lgth))
#define	I_called_sub_add_p_add			(I_(called_sub_add,p_add))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Calling party number (CALLING_NB) */

struct i_calling_nb {
	uchar nb_type;						/* calling party type of number */
	uchar plan_id;						/* calling party numbering plan identification */
	uchar pres;							/* presentation indicator */
	uchar screen_ind;					/* screening indicator */
	uchar lgth;							/* length of the number digits */
	uchar *p_add;						/* address of the number digits */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_calling_nb_type				(I_(calling_nb,nb_type))
#define	I_calling_nb_plan_id			(I_(calling_nb,plan_id))
#define	I_calling_nb_presentation		(I_(calling_nb,pres))
#define	I_calling_nb_screen_ind			(I_(calling_nb,screen_ind))
#define	I_calling_nb_lgth				(I_(calling_nb,lgth))
#define	I_calling_nb_p_add				(I_(calling_nb,p_add))

#define Pres_screen_ind					pres		/* For NI1 */

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Calling party subaddress (CALLING_SUB_ADD) */

struct i_calling_sub_add {
	uchar sub_add_type;					/* type of subaddress */
	uchar odd_even_ind;					/* odd/even indicator */
	uchar format;						/* subaddress format */
	uchar lgth;							/* length of the subaddress information */
	uchar *p_add;						/* address of the subaddress information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_calling_sub_add_type			(I_(calling_sub_add,sub_add_type))
#define	I_calling_sub_add_odd_even_ind	(I_(calling_sub_add,odd_even_ind))
#define	I_calling_sub_add_format	   	(I_(calling_sub_add,format))
#define	I_calling_sub_add_lgth			(I_(calling_sub_add,lgth))
#define	I_calling_sub_add_p_add			(I_(calling_sub_add,p_add))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Call identity (CALL_ID) */

struct i_call_id {
	uchar val;							/* call identity content (when 1 octet) */
	uchar lgth;							/* length of the call identity content */
	uchar *p_val;						/* address of the call identity content */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_call_id_val					(I_(call_id,val))
#define	I_call_id_lgth					(I_(call_id,lgth))
#define	I_call_id_p_val					(I_(call_id,p_val))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Call state (CALL_STATE) */

struct i_call_state {
	uchar coding_std;					/* coding standard */
	uchar val;							/* call state value */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_call_state_coding_std			(I_(call_state,coding_std))
#define	I_call_state_val				(I_(call_state,val))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Cause (CAUSE) */

struct i_cause {
	uchar coding_std;					/* coding standard */
	uchar cause_loc;					/* location */
	uchar recommend;					/* recommendation */
	uchar cause_class;					/* cause class */
	uchar cause_val;					/* cause value */
	uchar tmp;							/* temporary internal field */
	uchar diag_lgth;					/* diagnostic length */
	uchar *p_diagnostic;				/* cause diagnostics */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_cause_coding_std				(I_(cause,coding_std))
#define I_cause_location				(I_(cause,cause_loc))
#define I_cause_recommend				(I_(cause,recommend))
#define I_cause_class					(I_(cause,cause_class))
#define I_cause_val        				(I_(cause,cause_val))
#define I_cause_tmp        				(I_(cause,tmp))
#define I_cause_diag_lgth				(I_(cause,diag_lgth))
#define I_cause_p_diagnostic			(I_(cause,p_diagnostic))
#define I_cause_diagnostic				*I_cause_p_diagnostic	/* for error reporting to MNS */

#define I_cause_size					sizeof (struct i_cause)

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Change status (CHANGE_STATUS) */

struct i_change_status {
	uchar preference;					/* interface preference */
	uchar status;						/* statusof the D or B channel */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Channel identification (CHAN_ID) */
struct i_chan_id {
	uchar int_id;						/* interface identifier present */
	uchar int_type;						/* interface type */
	uchar pref_excl;					/* preferred or exclusive */
	uchar d_chan;						/* D channel indicator*/
	uchar chan_sel;						/* information channel selection */
	uchar int_id_val;					/* interface identifier value */
	uchar coding_std;					/* coding standard */
	uchar nb_map;						/* number/map */
	uchar chan_type;					/* channel type */
	uchar chan_nb;						/* B channel number */
	uchar chan_nb_lgth;					/* chanel type length */
	uchar *p_chan_nb;					/* B channel number list */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_chan_id_int_id	      		(I_(chan_id,int_id))
#define I_chan_id_int_type      		(I_(chan_id,int_type))
#define I_chan_id_pref_excl				(I_(chan_id,pref_excl))
#define I_chan_id_d_chan				(I_(chan_id,d_chan))
#define I_chan_id_chan_sel				(I_(chan_id,chan_sel))
#define I_chan_id_int_id_val			(I_(chan_id,int_id_val))
#define I_chan_id_coding_std			(I_(chan_id,coding_std))
#define I_chan_id_nb_map				(I_(chan_id,nb_map))
#define I_chan_id_chan_type				(I_(chan_id,chan_type))
#define I_chan_id_chan_nb				(I_(chan_id,chan_nb))
#define I_chan_id_chan_number_lgth		(I_(chan_id,chan_nb_lgth))
#define I_chan_id_a_chan_number			(I_(chan_id,p_chan_nb))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Charging information (CHARGING_INFO) */

struct i_charging_info {
	uchar type;							/* type of charging information */
	long  value;						/* charging info */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_charging_info					(I_(charging_info,value))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Congestion level (CONGEST_LEVEL) */

struct i_congest_level {
	uchar 	congest_level;				/* congestion level */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_congest_level					(I_(congest_level,congest_level))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Connected address (CONN_NB) */

struct i_conn_nb {
	uchar nb_type;						/* connected address type of number */
	uchar plan_id;						/* connected address numbering plan identification */
	uchar pres;							/* presentation indicator */
	uchar screen_ind;					/* screening indicator */
	uchar lgth;							/* length of the number digits */
	uchar *p_add;						/* address of the number digits */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_conn_nb_type					(I_(conn_nb,nb_type))
#define	I_conn_nb_plan_id				(I_(conn_nb,plan_id))
#define	I_conn_nb_presentation			(I_(conn_nb,pres))
#define	I_conn_nb_screen_ind			(I_(conn_nb,screen_ind))
#define	I_conn_nb_lgth					(I_(conn_nb,lgth))
#define	I_conn_nb_p_add					(I_(conn_nb,p_add))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Connected subaddress (CONN_SUB_ADD) */

struct i_conn_sub_add {
	uchar sub_add_type;					/* type of subaddress */
	uchar odd_even_ind;					/* odd/even indicator */
	uchar format;						/* subaddress format */
	uchar lgth;							/* length of the subaddress information */
	uchar *p_add;						/* address of the subaddress information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Credit card number (CREDIT_CARD_NB) */

	/*
		Track 1 of credit card must not contain more than 79 characters
		including start + end sentinels + LRC character - see ISO 7811/2
	*/

#define NS_MX_SZ_TRACK_1		76

	/*
		Track 2 of credit card must not contain more than 40 characters
		including start + end sentinels + LRC character - see ISO 7811/2
		each character coded on 4 bits : 1 byte = 2 chaacters
	*/

#define NS_MX_SZ_TRACK_2		19

struct i_credit_card_nb {
	uchar track_2_id;						/* identifier of digital track 2 of credit card */
	uchar track_2_lgth;						/* length of digital track 2 of credit card */
	uchar start_sentinel_2;					/* start sentinel of track 2 */
	uchar track_2_info[NS_MX_SZ_TRACK_2];	/* information characters of track 2 */
	uchar end_sentinel_2;					/* end sentinel of track 2 */
	uchar track_1_id;						/* identifier of digital track 1 of credit card */
	uchar track_1_lgth;						/* length of digital track 1 of credit card */
	uchar start_sentinel_1;					/* start sentinel of track 1 */
	uchar track_1_info[NS_MX_SZ_TRACK_1];	/* information characters of track 1 */
	uchar end_sentinel_1;					/* end sentinel of track 1 */
	uchar *p_tsp_add;						/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Credit card status (CREDIT_CARD_STATUS) */

struct i_credit_card_status {
	uchar credit_card_status;			/* credit card status */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Date (DATE) */

struct i_date {
	uchar lgth;							/* date information length */
	uchar *p_info;						/* date information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_date_p_info					(I_(date,p_info))
#define I_date_lgth						(I_(date,lgth))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Date/Time (DATE_TIME) */

struct i_date_time {
	uchar year;
	uchar month;
	uchar day;
	uchar hour;
	uchar minute;
	uchar second;
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_date_time_year				(I_(date_time,year))
#define I_date_time_month				(I_(date_time,month))
#define I_date_time_day					(I_(date_time,day))
#define I_date_time_hour				(I_(date_time,hour))
#define I_date_time_minute				(I_(date_time,minute))
#define I_date_time_second				(I_(date_time,second))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Destination call appearance	(DEST_CALL_APPEAR) */

struct i_dest_call_appear {
	uchar button_nb;					/* button number (1..254) */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_dest_call_appear_button_nb	(I_(dest_call_appear,button_nb))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Display control	(DISPLAY_CON) */

struct i_display_con {
	uchar display_con_mode;				/* display mode */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* display field	(DISPLAY_FLD) */

struct i_display_fld {
	uchar display_fld_mode;				/* display mode */
	uchar submode;						/* submode */
	uchar display_fld_type;				/* display field type */
	uchar info_lgth;					/* information length */
	uchar *p_info;						/* display information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Display facility (DISPLAY / DISPLAY_TXT) */

struct i_display {
	uchar display_type;					/* display type */
	uchar lgth;							/* length of the display information */
	uchar *p_info;						/* address of the display information */
	uchar assoc_info;					/* associated information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_display_type					(I_(display,display_type))
#define I_display_lgth					(I_(display,lgth))
#define I_display_p_info				(I_(display,p_info))


		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* DTMF secondary dialing (DTMF_2_DIALING) */

struct i_dtmf_2_dialing {
	uchar dtmf_digit;					/* digit */
	uchar up_down_flag;					/* Up/Down flag */
	uchar dtmf_duration;				/* duration in step of 40ms */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Endpoint Identifier (ENDPOINT_ID) */

struct i_endpoint_id{
	uchar usid;							/* user service identifier */
	uchar interp;						/* interpreter */
	uchar tid;							/* terminal identifier */
	uchar ces;							/* ces */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_endpoint_id_usid				(I_(endpoint_id,usid))
#define	I_endpoint_id_interp			(I_(endpoint_id,interp))
#define	I_endpoint_id_tid				(I_(endpoint_id,tid))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Escape for extension (ESCAPE) */

struct i_escape {
	uchar ie_id;						/* information element identifier */
	uchar *p_ie;						/* address of the information element */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_escape_ie_id					(I_(escape,ie_id))
#define I_escape_p_ie					(I_(escape,p_ie))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Facility select (FAC_SELECT) */

struct i_fac_select {
	uchar service;						/* service */
	uchar code;							/* facility code */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Facility status (TR6_FAC_STAT) */

struct i_fac_stat {
	uchar lgth;							/* length of facility status information */
	uchar *p_info;						/* information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Feature activation (FEATURE_ACT) */

struct i_feature_act {
	uchar feature_nb;					/* feature number */
	uchar feature_nb_ext;				/* extended feature number */

#	if (F_AT5 == ON) || (F_E10 == ON)
		uchar button_type_act;				/* button type */
		uchar module_nb;					/* module number */
		uchar status_type;					/* status type */
		uchar button_nb;					/* button number (1..254) */
#	endif

	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_feature_act_button_nb			(I_(feature_act,button_nb))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Feature indication (FEATURE_IND) */

struct i_feature_ind {
	uchar feature_nb;					/* feature number */
	uchar feature_nb_ext;				/* extended feature number */
	uchar status_ind;					/* status indicator */

#	if (F_AT5 == ON) || (F_E10 == ON)
		uchar button_type_ind;				/* button type */
		uchar module_nb;					/* module number */
		uchar status_type;					/* status type */
		uchar feature[84];					/* feature number in case 1 and 2 */
		uchar indicator[84];				/* indicator in case 2 */
		uchar status[252];					/* status[84] in case 1 and 2 or status[252] in case 3 */
		uchar starting_feature;				/* starting feature in case 3 */
		uchar number_of_button;				/* number of button in case 3 */
		uchar meaning;						/* meaning in case 4 */
		uchar internal_counter_spdu;		/* internal counter for case 1,2 and 3 */
		uchar internal_counter_ssdu;		/* internal counter for case 1,2 and 3 */
		uchar internal_flag;				/* internal flag for case 3 */
#	endif

	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_feature_ind_i_counter_ssdu	(I_(feature_ind,internal_counter_ssdu))
#define I_feature_ind_i_counter_spdu	(I_(feature_ind,internal_counter_spdu))
#define I_feature_ind_i_flag			(I_(feature_ind,internal_flag))
#define I_feature_ind_status_type		(I_(feature_ind,status_type))
#define I_feature_ind_feature_spdu		(I_(feature_ind,feature[I_feature_ind_i_counter_spdu]))
#define I_feature_ind_indicator_spdu	(I_(feature_ind,indicator[I_feature_ind_i_counter_spdu]))
#define I_feature_ind_status_spdu		(I_(feature_ind,status[I_feature_ind_i_counter_spdu]))
#define I_feature_ind_feature_ssdu		(I_(feature_ind,feature[I_feature_ind_i_counter_ssdu]))
#define I_feature_ind_indicator_ssdu	(I_(feature_ind,indicator[I_feature_ind_i_counter_ssdu]))
#define I_feature_ind_status_ssdu		(I_(feature_ind,status[I_feature_ind_i_counter_ssdu]))
#define I_feature_ind_starting_feature	(I_(feature_ind,starting_feature))
#define I_feature_ind_number_of_button	(I_(feature_ind,number_of_button))
#define I_feature_ind_meaning			(I_(feature_ind,meaning))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* High Layer Compatibility (HLC) */

struct i_hlc {
	uchar coding_std;					/* coding standard */
	uchar interpretation;				/* interpretation */
	uchar pres;							/* presentation method of protocole profil */
	uchar teleservice;					/* high layer characteristics identification */
	uchar ext_teleservice;				/* extended high layer characteristics identification */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_hlc_coding_std				(I_(hlc,coding_std))
#define I_hlc_interpretation			(I_(hlc,interpretation))
#define I_hlc_presentation	    		(I_(hlc,pres))
#define I_hlc_teleservice	    		(I_(hlc,teleservice))
#define I_hlc_ext_teleservice			(I_(hlc,ext_teleservice))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Information request (INFORMATION_RQ) */

struct i_information_rq {
	uchar info_ind;						/* information indicator */
	uchar info_type;					/* type of information */
	uchar info_specific;				/* specific information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Keypad facility (KEYPAD) */

struct i_keypad {
	uchar lgth;                         /* length of the keypad facility information */
	uchar *p_info;						/* address */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_keypad_lgth					(I_(keypad,lgth))
#define I_keypad_p_info					(I_(keypad,p_info))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Keypad control (KEYPAD_CON) */

struct i_keypad_con {
	uchar call_ref_type;				/* call reference type */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Low Layer Compatibility (LLC) */

struct i_llc {
	uchar coding_std;					/* coding standard */
	uchar trf_cap;						/* information transfer capability */
	uchar out_band_neg;					/* out-band negotiation */
	uchar trf_mode;						/* transfer mode */
	uchar trf_rate;						/* information transfer rate */
	uchar structure;					/* structure */
	uchar config;						/* configuration*/
	uchar est;							/* establishment */
	uchar symmetry;						/* symmetry */
	uchar dest_rate;					/* destination rate */
	uchar layer_id_1;					/* layer 1 identification */
	uchar protocol_id_1;				/* user information layer 1 protocol */
	uchar syn_asyn;						/* synchronous/asynchronous */
	uchar in_band_neg;					/* in-band negotiation */
	uchar user_rate;					/* user rate */
	uchar inter_rate;					/* intermediate rate */
	uchar tx_nic;						/* network independent clock (NIC) on Transmission (Tx) */
	uchar rx_nic;						/* network independent clock (NIC) on Reception (Rx) */
	uchar tx_fc;						/* flow control on Transmission (Tx) */
	uchar rx_fc;						/* flow control on Reception (Rx) */
	uchar hdr;							/* header/no header */
	uchar multi_frame;					/* multi frame establishement in Data Link */
	uchar op_mode;						/* mode of operation */
	uchar lli;							/* Logical Linker Identifier Negotiation */
	uchar assign;						/* Assignor/Assignee */
	uchar band;							/* In-band/Out-band negotiation */
	uchar stop_bit;						/* number of stop bits */
	uchar data_bit;						/* number of data bits */
	uchar parity;						/* number of parity bit */
	uchar duplex;						/* duplex mode */
	uchar modem;						/* modem type */
	uchar layer_id_2;					/* layer 2 identification */
	uchar protocol_id_2;				/* user information layer 2 protocol */
	uchar option_2;						/* optional layer 2 protocol information */
	uchar option_2_1;					/* second one */
	uchar layer_id_3;					/* layer 3 identification */
	uchar protocol_id_3;				/* user information layer 3 protocol */
	uchar option_3;						/* optional layer 3 protocol information */
	uchar option_3_1;					/* second one */
	uchar option_3_2;					/* third one */
	uchar tsp_lgth;						/* length of the transparent string */
	uchar *p_tsp_add;					/* address of the Q931 string */
	uchar multiplier;					/* multiplier */
};

#define	V120                            hdr		/* for VN3 */
#define	User_info_2						option_2
#define	Window_size						option_2_1
#define	User_info_3						option_3
#define	Packet_size						option_3_1
#define	Packet_window_size				option_3_2
#define	Multiplier                     	multiplier

#define I_llc_coding_std				(I_(llc,coding_std))
#define I_llc_trf_cap					(I_(llc,trf_cap))
#define I_llc_out_band_neg				(I_(llc,out_band_neg))
#define I_llc_trf_mode					(I_(llc,trf_mode))
#define I_llc_trf_rate					(I_(llc,trf_rate))
#define I_llc_structure					(I_(llc,structure))
#define I_llc_configuration				(I_(llc,config))
#define I_llc_est						(I_(llc,est))
#define I_llc_symmetry					(I_(llc,symmetry))
#define I_llc_dest_rate					(I_(llc,dest_rate))
#define I_llc_layer_id_1				(I_(llc,layer_id_1))
#define I_llc_protocol_id_1				(I_(llc,protocol_id_1))
#define I_llc_syn_asyn					(I_(llc,syn_asyn))
#define I_llc_in_band_neg				(I_(llc,in_band_neg))
#define I_llc_user_rate					(I_(llc,user_rate))
#define I_llc_inter_rate				(I_(llc,inter_rate))
#define I_llc_tx_nic					(I_(llc,tx_nic))
#define I_llc_rx_nic					(I_(llc,rx_nic))
#define I_llc_tx_fc						(I_(llc,tx_fc))
#define I_llc_rx_fc						(I_(llc,rx_fc))
#define I_llc_hdr						(I_(llc,hdr))
#define I_llc_multi_frame				(I_(llc,multi_frame))
#define I_llc_op_mode					(I_(llc,op_mode))
#define I_llc_lli						(I_(llc,lli))
#define I_llc_assign					(I_(llc,assign))
#define I_llc_band						(I_(llc,band))
#define I_llc_stop_bit					(I_(llc,stop_bit))
#define I_llc_data_bit					(I_(llc,data_bit))
#define I_llc_parity					(I_(llc,parity))
#define I_llc_duplex					(I_(llc,duplex))
#define I_llc_modem						(I_(llc,modem))
#define I_llc_layer_id_2				(I_(llc,layer_id_2))
#define I_llc_protocol_id_2				(I_(llc,protocol_id_2))
#define I_llc_option_2					(I_(llc,option_2))
#define I_llc_layer_id_3				(I_(llc,layer_id_3))
#define I_llc_protocol_id_3				(I_(llc,protocol_id_3))
#define I_llc_option_3					(I_(llc,option_3))


		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Management information element	(MANAGMNT) */

#define NS_MX_MAN_PARAM		2				/* maximum number of parameters in a Management IE */

struct i_managmnt {
	uchar protocol_discr;					/* management protocol discriminator */
	uchar trans_ref;						/* transaction reference */
	uchar op_class;							/* operation class */
	uchar op_type;							/* operation type */
	uchar man_code;							/* management code */
	uchar param_counter;					/* internal counter to manage parameters list */
	uchar param_spid[NS_MX_SZ_SPID+1];		/* spid parameter */
	uchar param_id[NS_MX_MAN_PARAM];		/* parameter ID */
	uchar param_lgth[NS_MX_MAN_PARAM];		/* parameter length */
	uchar param_1[NS_MX_MAN_PARAM];			/* parameter 1 */
	uchar param_2[NS_MX_MAN_PARAM];			/* parameter 2 */
	uchar param_3[NS_MX_MAN_PARAM];			/* parameter 3 */
	uchar param_4[NS_MX_MAN_PARAM];			/* parameter 4 */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_man_protocol_discr				(I_(managmnt,protocol_discr))
#define I_man_trans_ref						(I_(managmnt,trans_ref))
#define I_man_op_class						(I_(managmnt,op_class))
#define I_man_op_type						(I_(managmnt,op_type))
#define I_man_code							(I_(managmnt,man_code))

#define I_man_param_counter					(I_(managmnt,param_counter))
#define I_man_param_id						(I_(managmnt,param_id[I_man_param_counter]))
#define I_man_param_lgth					(I_(managmnt,param_lgth[I_man_param_counter]))
#define I_man_param_a_spid					(&(I_(managmnt,param_spid[0])))
#define I_man_param_spid(x)					(I_(managmnt,param_spid[x]))
#define I_man_param_usid(x)					(I_(managmnt,param_1[x]))
#define I_man_param_tid(x)					(I_(managmnt,param_2[x]))
#define I_man_param_esf(x)					(I_(managmnt,param_3[x]))

#define PARAM_NOT_FOUND						(uchar) 255

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#if NS_SPF_FACILITY == ON

				/* Network specific facility (SPF_FAC) */

#define NS_MX_NET_ID_LGTH	10				/* maximum length of a network identification (IE spf_fac) */

	struct i_spf_fac {
		uchar net_id_lgth;		 			/* length of network identification */
		uchar code_or_net_id_type;			/* facility code (TR6) or type of network identification*/
		uchar service_or_net_id_plan;		/* service (TR6) or net_id_plan or facility identifier(A11) */

		uchar add_info;						/* additional information (TR6) */
		uchar syn_asyn;						/* synchronous/asynchronous (TR6) */
		uchar protocol_id_1;				/* user information layer 1 protocol (TR6) */
		uchar data_bit;						/* data bits (TR6) */
		uchar stop_bit;						/* stop bits (TR6) */
		uchar parity;						/* parity (TR6) */

		uchar user_rate;					/* user rate (TR6) */
		uchar param_1;						/* first possible service describing byte (TR6) */
		uchar param_2;						/* second one (TR6) */

		uchar action;						/* action */
		uchar code;							/* code */
		uchar expansion;					/* expansion */
		uchar serv_feature;					/* service/feature */
		uchar facility_coding;				/* facility coding */

		uchar lgth;							/* length of redirecting number (TR6) or facility field */
		uchar net_id[NS_MX_NET_ID_LGTH];	/* network identification info */
		uchar *p_fac;						/* address of redirecting number (TR6) or facility field */

		ulong tax;							/* tax value */


		uchar *p_tsp_add;					/* address of the Q931 string */
};

#	define	I_spf_fac_net_id_lgth			(I_(spf_fac,net_id_lgth))
#	define	I_spf_fac_type					(I_(spf_fac,code_or_net_id_type))
#	define	I_spf_fac_code					(I_(spf_fac,code_or_net_id_type))
#	define	I_spf_fac_service				(I_(spf_fac,service_or_net_id_plan))
#	define	I_spf_fac_plan					(I_(spf_fac,service_or_net_id_plan))

#	define	I_spf_fac_add_info				(I_(spf_fac,add_info))
#	define	I_spf_fac_syn_asyn				(I_(spf_fac,syn_asyn))


#	define	I_spf_fac_a_net_id				(&(I_(spf_fac,net_id[0])))
#	define	I_spf_fac_info_lgth				(I_(spf_fac,lgth))
#	define	I_spf_fac_p_fac					(I_(spf_fac,p_fac))

#	define	I_spf_fac_action				I_spf_fac_service
#	define	I_spf_fac_tax					(I_(spf_fac,tax))

#	define	I_spf_fac_lgth					(I_(spf_fac,lgth))

#	define	Fac_congestion_type				param_1	/* congestion type */
#	define	Fac_b_chan						param_1	/* B channel */
#	define	Fac_eaz_1						param_1	/* first EAZ digit */
#	define	Fac_eaz_2						param_2	/* second EAZ digit */
#	define	Fac_cug_index_1					param_1	/* closed user group index, most significant byte */
#	define	Fac_cug_index_0					param_2	/* closed user group index, least significant byte */
#	define	Fac_type						param_1	/* redirecting address type of number */
#	define	Fac_plan_id						param_2	/* redirecting address numbering plan identification */

#	define	Code							code_or_net_id_type
#	define	Net_id_type						code_or_net_id_type
#	define	Service							service_or_net_id_plan
#	define	Net_id_plan						service_or_net_id_plan
#	define	Action							service_or_net_id_plan

#	define	Param_fld						add_info
#endif

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Notification indicator (NOTIF_IND) */

struct i_notif_ind {
	uchar notif_descr;					/* notification description*/
	uchar lgth;							/* length of optional information */
	uchar *p_info;						/* optional information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_notif_ind_descr				(I_(notif_ind,notif_descr))


		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Original called party number (O_CALLED_NB) */

struct i_o_called_nb {
	uchar nb_type;						/* calling party type of number */
	uchar plan_id;						/* calling party numbering plan identification */
	uchar pres;							/* presentation indicator */
	uchar screen_ind;					/* screening indicator */
	uchar reason;						/* reason for redirection */
	uchar cfnr;							/* call forwarding no reply undergone indicator */
	uchar redir_counter;				/* counter */
	uchar lgth;							/* length of the number digits */
	uchar *p_add;						/* address of the number digits */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Origination call appearance (ORI_CALL_APPEAR) */

struct i_ori_call_appear {
	uchar button_nb;					/* button number (1..254) */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_ori_call_appear_button_nb		(I_(ori_call_appear,button_nb))


		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Operator System Access (OS_ACCSS) */

struct i_os_accss {
	uchar service_type;					/* type of service */
	uchar access_type;					/* type of access */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Other call reference (OTHER_CALL_REF) */

struct i_other_call_ref {
	uchar call_ref_flag;				/* call reference flag */
	uchar call_ref_val;					/* call reference value */
	uchar conn_id;						/* conn id */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_other_call_ref_val			(I_(other_call_ref,call_ref_val))
#define I_other_call_ref_flag			(I_(other_call_ref,call_ref_flag))
#define I_other_call_ref_conn_id		(I_(other_call_ref,conn_id))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Party category (PARTY_CATEGORY) */

struct i_party_category {
	uchar category;						/* party category */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* PCS to USER information (PCS_USER) */

struct i_pcs_user {
	uchar protocol_discr;				/* protocol discriminator */
	uchar lgth;							/* length of the user information */
	uchar *p_info;						/* address of the user information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Precedence level (PRECEDENCE_LEVEL) */

struct i_precedence_level {
	uchar coding_std;					/* coding standard */
	uchar level;						/* level */
	uchar change_value;					/* change value */
	uchar lfb_ind;						/* LFB indicator */
	uchar lgth;							/* length of the MLPP service */
	uchar *p_info;						/* MLPP service domain */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Progress indicator (PROGRESS_IND) */

struct i_progress_ind {
	uchar coding_std;					/* coding standard */
	uchar progress_loc;					/* location */
	uchar progress_descr;				/* progress description */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_progress_ind_coding_std		(I_(progress_ind,coding_std))
#define	I_progress_ind_location			(I_(progress_ind,progress_loc))
#define	I_progress_ind_description		(I_(progress_ind,progress_descr))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Protocol version control (PROT_VER_CTRL) */

struct i_prot_ver_ctrl {
	uchar opcode;						/* version opcode */
	uchar version;						/* version code */
	uchar issue;						/* issue code */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Queue information (QUEUE_INFO) */

struct i_queue_info {
	uchar nats_avail;					/* nats bearer system types available */
	uchar satcom_avail;					/* satcom bearer system types available */
	uchar tfts_avail;					/* tfts bearer system types available */
	uchar bst_q_nats;					/* bearer system type queue nats */
	uchar nats_position; 				/* queue position of nats */
	uchar bst_q_satcom;					/* bearer system type queue satcom */
	uchar satcom_position; 				/* queue position of satcom */
	uchar bst_q_tfts;					/* bearer system type queue tfts */
	uchar tfts_position; 				/* queue position of tfts */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Queue request (QUEUE_REQUEST) */

struct i_queue_request {
	uchar nats_queue_user;				 /* nats queue user request */
	uchar satcom_queue_user;			 /* satcom queue user request */
	uchar tfts_queue_user;				 /* tfts queue user request */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Redirecting number (REDIR_NB) */

struct i_redir_nb {
	uchar nb_type;						/* type of number */
	uchar plan_id;						/* numbering plan identification */
	uchar pres;							/* presentation indicator */
	uchar screen_ind;					/* screening indicator */
	uchar reason;						/* reason for redirecting */
	uchar lgth;							/* length of the number digits */
	uchar *p_add;						/* address of the number digits */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Redirecting sub address (REDIR_SUB_ADD) */

struct i_redir_sub_add {
	uchar reserved;						/* reserved */
	uchar sub_add_type;					/* type of subaddress */
	uchar odd_even_ind;					/* odd/even indicator */
	uchar format;						/* subaddress format */
	uchar lgth;							/* length of the subaddress information */
	uchar *p_add;						/* address of the subaddress information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Redirecting sub address (REDIR_SUB_ADD) */

struct i_redir_sub_add_net_spf {
	uchar reserved;						/* reserved */
	uchar sub_add_type;					/* type of subaddress */
	uchar odd_even_ind;					/* odd/even indicator */
	uchar format;						/* subaddress format */
	uchar lgth;							/* length of the subaddress information */
	uchar *p_add;						/* address of the subaddress information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Redirection number (REDIRECTION_NB) */

struct i_redirection_nb {
	uchar plan_id;						/* calling party numbering plan identification */
	uchar nb_type;						/* calling party type of number */
	uchar lgth;							/* length of the number digits */
	uchar *p_add;						/* address of the number digits */

#	if (F_DMS == ON) || (F_NI1 == ON) || ((NS_SS_DIVERSION == ON) && (F_ETS == ON))
		uchar pres;							/* presentation indicator */
		uchar screen_ind;					/* screening indicator */
		uchar reason;						/* reason for redirecting */
#	endif

	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Redirection number (REDIRECTION_NB) */

struct i_redirection_nb_net_spf {
	uchar plan_id;						/* calling party numbering plan identification */
	uchar nb_type;						/* calling party type of number */
	uchar lgth;							/* length of the number digits */
	uchar *p_add;						/* address of the number digits */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Repeat indicator (REPEAT_IND) */

struct i_repeat_ind {
	uchar 	rep_in;						/* repeat indication */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_rep_in						(I_(repeat_ind,rep_in))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Restart indicator (RESTART_IND) */

struct i_restart_ind {
	uchar	restart_class;				/* class */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_restart_ind_class				(I_(restart_ind,restart_class))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Route select 	(ROUTE_SELECT) */

struct i_route_select {
	uchar nats_route_ind;					/* nats route indication */
	uchar satcom_route_ind;					/* satcom route indication */
	uchar tfts_route_ind;				 	/* tfts route indication */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Selected call appearance 	(SEL_CALL_APPEAR) */

struct i_sel_call_appear {
	uchar button_nb_call_appear;		/* button number / call appearance */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_sel_call_appear_button_nb		(I_(sel_call_appear,button_nb_call_appear))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Service identifier (SERVICE_ID) */

struct i_service_id {
	uchar service_id;					/* service event id */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_service_id					(I_(service_id,service_id))
#define Set_ie_service(service_code)	I_service_id = service_code; set_ie_i (CODESET_0, SERVICE_ID)

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Service indicator (SERVICE_IND) */

struct i_service_ind {
	uchar service;						/* service */
	uchar add_info;						/* additional information octet */
	uchar syn_asyn;						/* synchronous/asynchronous */
	uchar protocol_id_1;				/* user information layer 1 protocol */
	uchar data_bit;						/* data bits */
	uchar stop_bit;						/* stop bits */
	uchar parity;						/* parity */
	uchar user_rate;					/* user rate */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_service_ind_service			(I_(service_ind,service))
#define I_service_ind_add_info			(I_(service_ind,add_info))
#define I_service_ind_syn_asyn			(I_(service_ind,syn_asyn))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Signal (SIGNAL) */

struct i_signal {
	uchar val;							/* signal value */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_signal_val					(I_(signal,val))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Service Profile IDentifier (SPID) */

struct i_spid {
	uchar lgth;							/* length */
	uchar ces;							/* CES */
	uchar *p_spid;						/* spid characters string */
	uchar *p_tsp_add;					/* address of the Q931 string */
};
		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Switchhook (SWITCHHOOK) */

struct i_switchhook {
	uchar hook_val;						/* hook value */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Terminal capabilities (TE_CAP) */

struct i_te_cap {
	uchar coding_std;					/* coding standard */
	uchar te_cap_descr;					/* capability description */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Transit counter (TRANSIT_COUNTER) */

struct i_transit_counter {
	uchar count;						/* transit count */
	uchar *p_tsp_add;					/* address of the Q931 string */
};
		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Transit network selection (TRANSIT_NET_SEL) */

struct i_transit_net_sel {
	uchar net_id_type;					/* type of network identification */
	uchar net_id_plan;					/* network identification plan */
	uchar net_id_lgth;					/* length of network identification information */
	uchar *p_net_id;					/* address of network identification information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define I_transit_net_sel_type			(I_(transit_net_sel,net_id_type))
#define I_transit_net_sel_plan			(I_(transit_net_sel,net_id_plan))
#define I_transit_net_sel_lgth			(I_(transit_net_sel,net_id_lgth))
#define I_transit_net_sel_p_net_id		(I_(transit_net_sel,p_net_id))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

			/* Travaling classmark (TRAVELING_CLASSMARK) */

struct i_traveling_classmark {
	uchar coding_std;					/* coding standard */
	uchar change_value;					/* change value */
	uchar fac_restriction;            	/* facility restriction level */
	uchar satellite_hop_counter;      	/* satellite hop counter */
	uchar end_to_end_isdn;			    /* end-to-end ISDN(connectivity) indication */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

			/* User entered code (USER_CODE) */

struct i_user_entered_code {
	uchar code_type;      				/* type of user code */
	uchar lgth;							/* length */
	uchar *p_user_code;					/* user code digits */
	uchar *p_tsp_add;					/* address of the Q931 string */
};
		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* User mode working (USER_MODE) */

struct i_user_mode {
	uchar coding_std;					/* coding standard */
	uchar descr;						/* description */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_user_mode_coding_std			(I_(user_mode,coding_std))
#define	I_user_mode_description			(I_(user_mode,descr))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* USER to PCS information (USER_PCS) */

struct i_user_pcs {
	uchar protocol_discr;				/* protocol discriminator */
	uchar lgth;							/* length of the user information */
	uchar *p_info;						/* address of the user information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* User to user facilities (USER_FAC) */

struct i_user_fac {
	uchar protocol_discr;				/* protocol discrimination */
	uchar lgth;							/* length of the user to user facility description */
	uchar *p_descr;						/* address of the user to user facility description */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_user_fac_protocol_discr		(I_(user_fac,protocol_discr))
#define	I_user_fac_lgth					(I_(user_fac,lgth))
#define	I_user_fac_p_description		(I_(user_fac,p_descr))

		/*-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* User to user information (UUI) */

struct i_uui {
	uchar protocol_discr;				/* protocol discriminator */
	uchar lgth;							/* length of the user information */
	uchar *p_info;						/* address of the user information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_uui_protocol_discr			(I_(uui,protocol_discr))
#define	I_uui_lgth						(I_(uui,lgth))
#define	I_uui_p_info					(I_(uui,p_info))

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Facility (FAC) */

struct asn1_ie_hdr	{
	uchar asn1_class;					/* class */
	uchar form;							/* form */
	uchar tag;							/* component tag */
	uchar lgth;							/* length of component */
};

struct asn1_ie_vl {
	uchar asn1_class;					/* class */
	uchar form;							/* form */
	uchar tag;							/* component tag */
	uchar lgth;							/* length of component */
	uchar *p_id;						/* address of the component description */
};

struct asn1_ie_std {
	uchar asn1_class;					/* class */
	uchar form;							/* form */
	uchar tag;							/* tag */
	uchar lgth;							/* length */
	uchar id;							/* description */
};

struct i_facility {
	uchar service_discr;				/* service discriminator */
	uchar lgth_format;					/* length format */
	struct asn1_ie_hdr	component;		/* component header */
	struct asn1_ie_vl	invoke_id;		/* invoke component id */

	struct asn1_ie_std	op_error_val;	/* operation or error value */
	struct asn1_ie_hdr	sequence;		/* sequence header */
	struct asn1_ie_std	service;		/* service */
	struct asn1_ie_std	preferred;		/* preferred */

#	if NS_SUPP_SERVICES == ON
		uchar component_nb;				/* number of components in facility IE */
		uchar first_comp_index;			/* index of first component in common facility component table */
#	endif

	uchar lgth;							/* information length */
	uchar *p_info;						/* information */
	uchar *p_tsp_add;					/* address of the Q931 string */
};

#define	I_facility_service_discr		(I_(facility,service_discr))
#define	I_facility_lgth_format			(I_(facility,lgth_format))

#define	I_facility_class(asn1_ie)		((I_(facility,asn1_ie).asn1_class))
#define	I_facility_form(asn1_ie)		((I_(facility,asn1_ie).form))
#define	I_facility_tag(asn1_ie)			((I_(facility,asn1_ie).tag))
#define	I_facility_lgth(asn1_ie)		((I_(facility,asn1_ie).lgth))
#define	I_facility_p_id(asn1_ievl)		((I_(facility,asn1_ievl).p_id))
#define	I_facility_id(asn1_ie)			((I_(facility,asn1_ie).id))

#define	I_facility_class_component		I_facility_class(component)
#define	I_facility_form_component		I_facility_form(component)
#define	I_facility_tag_component		I_facility_tag(component)
#define	I_facility_lgth_component		I_facility_lgth(component)

#define	I_facility_class_invoke_id		I_facility_class(invoke_id)
#define	I_facility_form_invoke_id		I_facility_form(invoke_id)
#define	I_facility_tag_invoke_id		I_facility_tag(invoke_id)
#define	I_facility_lgth_invoke_id		I_facility_lgth(invoke_id)
#define	I_facility_p_invoke_id			I_facility_p_id(invoke_id)

#define	I_facility_class_op_val			I_facility_class(op_error_val)
#define	I_facility_form_op_val			I_facility_form(op_error_val)
#define	I_facility_tag_op_val			I_facility_tag(op_error_val)
#define	I_facility_lgth_op_val			I_facility_lgth(op_error_val)
#define	I_facility_id_op_val			I_facility_id(op_error_val)

#define	I_facility_class_error_val		I_facility_class(op_error_val)
#define	I_facility_form_error_val		I_facility_form(op_error_val)
#define	I_facility_tag_error_val		I_facility_tag(op_error_val)
#define	I_facility_lgth_error_val		I_facility_lgth(op_error_val)
#define	I_facility_id_error_val			I_facility_id(op_error_val)

#define	I_facility_class_sequence		I_facility_class(sequence)
#define	I_facility_form_sequence		I_facility_form(sequence)
#define	I_facility_tag_sequence			I_facility_tag(sequence)
#define	I_facility_lgth_sequence		I_facility_lgth(sequence)

#define	I_facility_class_service		I_facility_class(service)
#define	I_facility_form_service			I_facility_form(service)
#define	I_facility_tag_service			I_facility_tag(service)
#define	I_facility_lgth_service			I_facility_lgth(service)
#define	I_facility_id_service			I_facility_id(service)

#define	I_facility_class_preferred		I_facility_class(preferred)
#define	I_facility_form_preferred		I_facility_form(preferred)
#define	I_facility_tag_preferred		I_facility_tag(preferred)
#define	I_facility_lgth_preferred		I_facility_lgth(preferred)
#define	I_facility_id_preferred			I_facility_id(preferred)

#if NS_SUPP_SERVICES == ON
#	define	I_facility_component_nb		(I_(facility,component_nb))
#	define	I_facility_first_comp_x		(I_(facility,first_comp_index))
#endif

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/* Extended Facility (EXTENDED_FAC) */

#if NS_SUPP_SERVICES == ON

struct i_extended_fac {
	uchar service_discr;			/* service discriminator */
	uchar component_nb;				/* number of components inside IE */
	uchar first_comp_index;			/* index of first component in common component table */
	uchar *p_tsp_add;				/* address of the Q931 string */
};

#define	I_ext_fac_service_discr		(I_(extended_fac,service_discr))
#define	I_ext_fac_component_nb		(I_(extended_fac,component_nb))
#define	I_ext_fac_first_comp_x		(I_(extended_fac,first_comp_index))

#endif

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

/*-------------------------------------------------------------------------

			INFORMATION ELEMENTS FOR PACKET COMMUNICATIONS
					( NOT IMPLEMENTED )

-------------------------------------------------------------------------*/

				/* Information rate (INF_RATE) */

struct i_inf_rate {
	uchar unused;
	uchar *p_tsp_add;					/* address of the Q931 string */
};

				/* End-to-end transit delay (E_T_E_TRANSIT_DLY) */

struct i_e_t_e_transit_dly {
	uchar unused;
	uchar *p_tsp_add;					/* address of the Q931 string */
};

				/* Packet layer binary parameters (PACKET_LBP) */

struct i_packet_lbp {
	uchar unused;
	uchar *p_tsp_add;					/* address of the Q931 string */
};

				/* Packet layer window size (PACKET_LWS) */

struct i_packet_lws {
	uchar unused;
	uchar *p_tsp_add;					/* address of the Q931 string */
};

				/* Packet size (PACKET_SIZE) */

struct i_packet_size {
	uchar unused;
	uchar *p_tsp_add;					/* address of the Q931 string */
};

				/* Transit delay selection and indication (TRANSIT_DLY_SEL) */

struct i_transit_dly_sel {
	uchar unused;
	uchar *p_tsp_add;					/* address of the Q931 string */
};

	/*----------------------------------------------------------*/

		/* external declarations of internal structures */

extern struct i_add_attrib				i_add_attrib[];			/* additional transmition attributes */
extern struct i_adjunct_con				i_adjunct_con[];		/* adjunct control */
extern struct i_aircraft_info			i_aircraft_info[];		/* aircraft information */
extern struct i_assoc_type				i_assoc_type[];			/* associated type */
extern struct i_advice_charge			i_advice_charge[];		/* advice of charge */
extern struct i_bc 						i_bc[];					/* bearer capability */
extern struct i_call_appear				i_call_appear[];		/* call appearance */
extern struct i_called_nb 				i_called_nb[];			/* called party number */
extern struct i_called_sub_add			i_called_sub_add[];		/* called party subaddress */
extern struct i_calling_nb 				i_calling_nb[];			/* calling party number 1 */
extern struct i_calling_sub_add 		i_calling_sub_add[];	/* calling party subaddress */
extern struct i_call_id 				i_call_id[];			/* call identity */
extern struct i_call_state 				i_call_state[];			/* call state */
extern struct i_cause 					i_cause[];				/* cause */
extern struct i_change_status			i_change_status[];		/* change status */
extern struct i_chan_id 				i_chan_id[];			/* channel identification */
extern struct i_charging_info			i_charging_info[];		/* charging information */
extern struct i_congest_level			i_congest_level[];		/* congestion level */
extern struct i_conn_nb					i_conn_nb[];			/* connected address */
extern struct i_conn_sub_add	 		i_conn_sub_add[];		/* connected subaddress */
extern struct i_credit_card_nb			i_credit_card_nb[];		/* credit card number */
extern struct i_credit_card_status		i_credit_card_status[];	/* credit card status */
extern struct i_date					i_date[];				/* date */

#if (F_ETS == ON) || (F_VN3 == ON) || (F_VN6 == ON) || (F_NTT == ON)
	extern struct i_date_time			i_date_time[];			/* date and time */
#endif

extern struct i_dest_call_appear		i_dest_call_appear[];	/* destination call appearance */
extern struct i_display_con				i_display_con[];		/* display control */
extern struct i_display_fld				i_display_fld[];		/* display field */
extern struct i_display 				i_display[];			/* display */
extern struct i_dtmf_2_dialing			i_dtmf_2_dialing[];		/* DTMF 2nd dialing */
extern struct i_endpoint_id				i_endpoint_id[];		/* endpoint identifier */
extern struct i_escape 					i_escape[];				/* escape for ext */

#if (NS_SUPP_SERVICES == ON) && (F_ETS == ON)
	extern struct i_extended_fac		i_extended_fac[];		/* extended facility for SUPPLEMENTARY SERVICES */
#endif

extern struct i_fac_select				i_fac_select[];			/* facility select */
extern struct i_fac_stat				i_fac_stat[];			/* facility status */
extern struct i_facility				i_facility[];			/* facility */
extern struct i_feature_act				i_feature_act[];		/* feature activation */
extern struct i_feature_ind				i_feature_ind[];		/* feature indication */
extern struct i_hlc 					i_hlc[];				/* high layer compatibility */
extern struct i_information_rq			i_information_rq[];		/* information request */
extern struct i_keypad 					i_keypad[];				/* keypad facility */
extern struct i_keypad_con				i_keypad_con[];			/* keypad control */
extern struct i_llc 					i_llc[];				/* low layer compatibility */
extern struct i_managmnt				i_managmnt[];			/* management */
extern struct i_notif_ind				i_notif_ind[];			/* notify indicator */
extern struct i_o_called_nb 			i_o_called_nb[];		/* original called party number */
extern struct i_ori_call_appear			i_ori_call_appear[];	/* origination call appearance */
extern struct i_os_accss				i_os_accss[];			/* operator system access */
extern struct i_other_call_ref			i_other_call_ref[];		/* other call reference */
extern struct i_party_category			i_party_category[];		/* party category */
extern struct i_pcs_user 				i_pcs_user[];			/* PCS to USER information */
extern struct i_precedence_level		i_precedence_level[];	/* precedence level */
extern struct i_progress_ind 			i_progress_ind[];		/* progress indicator */
extern struct i_prot_ver_ctrl			i_prot_ver_ctrl[];		/* protocol version control */
extern struct i_queue_info 				i_queue_info[];			/* queue information */
extern struct i_queue_request 			i_queue_request[];		/* queue request */
extern struct i_redir_nb				i_redir_nb[];			/* redirecting number */
extern struct i_redir_sub_add			i_redir_sub_add[];		/* redirecting sub_address */
extern struct i_redir_sub_add_net_spf	i_redir_sub_add_net_spf[];	/* redirecting sub_address */
extern struct i_redirection_nb			i_redirection_nb[];		/* redirection number */
extern struct i_redirection_nb_net_spf	i_redirection_nb_net_spf[];	/* redirection number */
extern struct i_repeat_ind				i_repeat_ind[];			/* repeat indicator */
extern struct i_restart_ind				i_restart_ind[];		/* restart indicator */
extern struct i_route_select			i_route_select[];		/* route select */
extern struct i_sel_call_appear			i_sel_call_appear[];	/* selected call appearance */
extern struct i_service_id				i_service_id[];			/* service_id */
extern struct i_service_ind				i_service_ind[];		/* service indocator */
extern struct i_signal 					i_signal[];				/* signal */

#if NS_SPF_FACILITY == ON
	extern struct i_spf_fac 			i_spf_fac[];			/* network specific facility */
#endif

extern struct i_spid					i_spid[];				/* service profile identifier */
extern struct i_switchhook				i_switchhook[];			/* swithhook */
extern struct i_te_cap					i_te_cap[];				/* terminal capabilities */
extern struct i_transit_counter			i_transit_counter[];	/* transit counter */
extern struct i_transit_net_sel			i_transit_net_sel[];	/* transit network selection */
extern struct i_traveling_classmark		i_traveling_classmark[];/* traveling class mark */
extern struct i_user_entered_code		i_user_entered_code[];	/* user code */
extern struct i_user_fac				i_user_fac[];			/* user facility */
extern struct i_user_mode				i_user_mode[];			/* user mode */
extern struct i_user_pcs 				i_user_pcs[];			/* USER tp PCS information */
extern struct i_uui 					i_uui[];				/* user to user information */

/*EOF*/

