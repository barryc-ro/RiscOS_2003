
/*--------------------------------------------------------------------------*
 *						M O D U L E   H E A D E R
 *
 * filename - ns_ssint.h
 *
 * $Revision$
 *
 * $Date$
 *
 *  Header implementing the upper interface of the NS entity specific to
 *  the SUPPLEMENTARY SERVICES.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef NS_SS_INT
#	define NS_SS_INT

/*==========================================================================

			- definition of types used for Supplementary Services -
*/

typedef short		ns_ss_inv_id_t;			/* type for Invoke identifier values -> it matches the ASN1 definition InvokeIdType ::= INTEGER (-32768..32767) */

typedef uchar		ns_ss_op_id_t;			/* type for operation interface identifiers */

/*==========================================================================*/

		/* common structure for all components in facility IE (FACILITY) */

struct ns_ss_fac_comp {
	ushort				next_component_offset;			/* offset of common data for next component in Facility IE */
	ushort				component_data_offset;			/* offset of data specific to current component in Facility IE */
	uchar				component_tag;					/* type of component : Invoke / Returnresult / ReturnError / Reject */
	uchar				inv_or_lk_id_or_res_presence;	/* presence of Invoke Identifier (Reject component) or of Linked Identifier
															(Invoke component) or of operation data in ReturnResult component */
	ns_ss_inv_id_t		invoke_id;						/* invoke Identifier */
	ns_ss_inv_id_t		lk_id_or_pb_tag;				/* linked Identifier (Invoke component) or type of problem (Reject component)
															: General / Invoke / ReturnResult / ReturnError */
	ns_ss_op_id_t		op_err_pb_identifier;			/* NS interface identifier of operation or error or problem contained in the component */
};

#define Ns_ss_fac_next_comp_offset			((struct ns_ss_fac_comp FAR *)p_fac_data) -> next_component_offset
#define Ns_ss_fac_comp_data_offset			((struct ns_ss_fac_comp FAR *)p_fac_data) -> component_data_offset
#define Ns_ss_fac_comp_tag					((struct ns_ss_fac_comp FAR *)p_fac_data) -> component_tag
#define Ns_ss_fac_is_inv_id_here			((struct ns_ss_fac_comp FAR *)p_fac_data) -> inv_or_lk_id_or_res_presence
#define Ns_ss_fac_invoke_id					((struct ns_ss_fac_comp FAR *)p_fac_data) -> invoke_id
#define Ns_ss_fac_is_lk_id_here				((struct ns_ss_fac_comp FAR *)p_fac_data) -> inv_or_lk_id_or_res_presence
#define Ns_ss_fac_is_res_here				((struct ns_ss_fac_comp FAR *)p_fac_data) -> inv_or_lk_id_or_res_presence
#define Ns_ss_fac_linked_id					((struct ns_ss_fac_comp FAR *)p_fac_data) -> lk_id_or_pb_tag
#define Ns_ss_fac_problem_tag				((struct ns_ss_fac_comp FAR *)p_fac_data) -> lk_id_or_pb_tag
#define Ns_ss_fac_problem					((struct ns_ss_fac_comp FAR *)p_fac_data) -> op_err_pb_identifier
#define Ns_ss_fac_op_err_id					((struct ns_ss_fac_comp FAR *)p_fac_data) -> op_err_pb_identifier

		/* maximum number of Facility components in a SPDU : it shall at least equal MX_FACILITY */

#ifndef NS_MX_FAC_COMPONENTS
#	define	NS_MX_FAC_COMPONENTS			4
#endif

/*==========================================================================

			- definition of all general constant values -
*/

	/* special values used to indicate that a value is not provided */

#define NS_SS_INT_UCHAR_NOT_PROVIDED		0xFF
#define NS_SS_INT_CHAR_NOT_PROVIDED			(char)(0x80)
#define NS_SS_INT_USHORT_NOT_PROVIDED		0xFFFF
#define NS_SS_INT_SHORT_NOT_PROVIDED		(short)(0x8000)
#define NS_SS_INT_ULONG_NOT_PROVIDED		0xFFFFFFFFL
#define NS_SS_INT_LONG_NOT_PROVIDED			(long)(0x80000000L)

			/* protocol profile (service discriminator) field */

#define FAC_REMOTE_OP_PROT					G_5 (1,0,0,0,1)			/* remote operations protocol */

			/* general ASN1 tag */

#define FAC_INTEGER_TAG						G_5 (0,0,0,1,0)			/* ASN1 INTEGER tag */
#define FAC_OBJECT_ID_TAG					G_5 (0,0,1,1,0)			/* ASN1 OBJECT IDENTIFIER tag */
#define FAC_NULL_TAG						G_5 (0,0,1,0,1)			/* ASN1 NULL tag */
	/* FAC_SEQUENCE_TAG					G_5 (1,0,0,0,0)		ASN1 SEQUENCE tag : defined in isdn.h */

			/* Component tag : they are defined in isdn.h

	#define FAC_INVOKE							G_5 (0,0,0,0,1)
	#define FAC_RETURN_RESULT					G_5 (0,0,0,1,0)
	#define FAC_RETURN_ERROR					G_5 (0,0,0,1,1)
	#define FAC_REJECT							G_5 (0,0,1,0,0)		*/

			/* Q-SIG specific tags for type of APDU : 'apdu_type' field */

#define QSI_ROSE_APDU_TAG					1						/* RoseAPDU */
#define QSI_DSE_APDU_TAG					2						/* DseAPDU */

			/* Q-SIG specific tags for type of DseAPDU : 'dse_pdu_type' field */

#define QSI_DSE_BEGIN_PDU_TAG				G_5 (0,1,1,0,0)			/* DialogBeginPdu = 12 */
#define QSI_DSE_END_PDU_TAG					G_5 (0,1,1,1,0)			/* DialogEndPdu = 14 */
#define QSI_DSE_CONTINUE_PDU_TAG			G_5 (0,1,1,1,1)			/* DialogContinuePdu = 15 */
#define QSI_DSE_ABORT_PDU_TAG				G_5 (1,0,0,0,1)			/* DialogAbortPdu = 17 */

			/* Problem tag in RejectComponent */

#define REJ_GENERAL_PB_TAG					G_5 (0,0,0,0,0)			/* General Problem */
#define REJ_INVOKE_PB_TAG					G_5 (0,0,0,0,1)			/* Invoke Problem */
#define REJ_RET_RESULT_PB_TAG				G_5 (0,0,0,1,0)			/* ReturnResult Problem */
#define REJ_RET_ERROR_PB_TAG				G_5 (0,0,0,1,1)			/* ReturnError Problem */

			/* Problem identifiers */

	/* General Problem */

#define GEN_PB_UNRECOGNIZED_COMP			0						/* unrecognized component */
#define GEN_PB_MISTYPED_COMP				1						/* mistyped component */
#define GEN_PB_BAD_STRUCT_COMP				2						/* badly structured component */

	/* Invoke Problem */

#define INV_PB_DUPLICATE					0						/* duplicate invocation */
#define INV_PB_UNRECOGNIZED_OP				1						/* unrecognized operation */
#define INV_PB_MISTYPED_ARG					2						/* mistyped argument */
#define INV_PB_RESOURCE_LIMIT				3						/* resource limitation */
#define INV_PB_INITIATOR_RELEASE			4						/* initiator releasing */
#define INV_PB_UNRECOGNIZED_LK_ID			5						/* unrecognized linked ID */
#define INV_PB_LK_RS_UNEXPECTED				6						/* linked response unexpected */
#define INV_PB_UNEXPECTED_CHILD_OP			7						/* unexpected child operation */

	/* ReturnResult Problem */

#define RET_RES_PB_UNRECOGNIZED_INV			0						/* unrecognized invocation */
#define RET_RES_PB_RES_RS_UNEXPECTED		1						/* result response unexpected */
#define RET_RES_PB_MISTYPED_RESULT			2						/* mistyped result */

	/* ReturnError Problem */

#define RET_ERR_PB_UNRECOGNIZED_INV			0						/* unrecognized invocation */
#define RET_ERR_PB_ERR_RS_UNEXPECTED		1						/* error response unexpected */
#define RET_ERR_PB_UNRECOGNIZED_ERR			2						/* unrecognized error */
#define RET_ERR_PB_UNEXPECTED_ERR			3						/* unexpected error */
#define RET_ERR_PB_MISTYPED_PARAM			4						/* mistyped parameter */

			/* General Error values (defined using ERROR ASN1 Macro) :
				in ReturnError component ('op_err_pb_identifier' field) */

#define SS_ERR_NOT_SUBSCRIBED				0						/* basic or requested service not subscribed */
#define SS_ERR_NOT_AVAILABLE				3						/* requested SS not available for the basic service */
#define SS_ERR_NOT_IMPLEMENTED				4						/* SS requested not implemented for the basic service */
#define SS_ERR_INVALID_SERVED_NB			6						/* served user' number provided invalid */
#define SS_ERR_INVALID_CALL_STATE			7						/* SS cannot be requested in current call state */
#define SS_ERR_SERVICE_NOT_PROVIDED			8						/* served user not subscribed for the basic service */
#define SS_ERR_NOT_INCOMING_CALL			9						/* SS not requested for an incoming call */
#define SS_ERR_INTERAC_NOT_ALLOWED			10						/* performance of the requested SS prohibited by another SS */
#define SS_ERR_RESOURCE_UNAVAILABLE			11						/* resources required to perform requested SS not available */

		/* possible BasicService values */

#define NS_SS_BASIC_ALL_SERVICES			0						/* allServices */
#define NS_SS_BASIC_SPEECH					1						/* speech */
#define NS_SS_BASIC_UNRESTR_DIG_INFO		2						/* unrestricted digital information */
#define NS_SS_BASIC_AUDIO_3K1HZ				3						/* audio 3k1Hz */
#define NS_SS_BASIC_UNR_D_INFO_TONE_AN		4						/* unrestricted digital information with tones and announcements */
#define NS_SS_BASIC_TELEPHONY_3K1HZ			32						/* telephony 3k1Hz */
#define NS_SS_BASIC_TELETEX					33						/* teletex */
#define NS_SS_BASIC_TELEFAX_GROUP4_CL1		34						/* telefax Group4 class1 */
#define NS_SS_BASIC_VIDEOTEX_SYNT_BASE		35						/* videotex syntax based */
#define NS_SS_BASIC_VIDEO_TELEPHONY			36						/* video telephony */
#define NS_SS_BASIC_TELEFAX_GROUP2_3		37						/* telefax Group2-3 */
#define NS_SS_BASIC_TELEPHONY_7KHZ			38						/* telephony 7kHz */

		/* possible types of PartyNumber */

#define NS_SS_PARTY_NB_UNKNOWN				0						/* unknown partyNumber : 'type_of_nb' field is meaningless */
#define NS_SS_PARTY_NB_PUBLIC				1						/* Public partyNumber */
#define NS_SS_PARTY_NB_DATA					2						/* data partyNumber : 'type_of_nb' field is meaningless */
#define NS_SS_PARTY_NB_TELEX				3						/* telex partyNumber : 'type_of_nb' field is meaningless */
#define NS_SS_PARTY_NB_PRIVATE				4						/* Private partyNumber */
#define NS_SS_PARTY_NB_NATIONAL				5						/* national standard partyNumber : 'type_of_nb' field is meaningless */

#define NS_SS_MX_PARTY_NB_TYPE				NS_SS_PARTY_NB_NATIONAL		/* maximum permitted value */

		/* possible types of number : only if partyNumber type is Public or Private */

#define NS_SS_PUB_PRIV_NB_UNKNOWN			0						/* Public or Private : unknown number */
#define NS_SS_PUB_PRIV_NB_ABBREVIATED		6						/* Public or Private : abbreviated number */

#define NS_SS_PUBLIC_NB_INTERNATIONAL		1						/* Public : international number */
#define NS_SS_PUBLIC_NB_NATIONAL			2						/* Public : national number */
#define NS_SS_PUBLIC_NB_NETWORK_SPFC		3						/* Public : network specific number */
#define NS_SS_PUBLIC_NB_SUBSCRIBER			4						/* Public : subscriber number */

#define NS_SS_PRIV_NB_LEVEL2_REGIONAL		1						/* Private : level 2 regional number */
#define NS_SS_PRIV_NB_LEVEL1_REGIONAL		2						/* Private : level 1 regional number */
#define NS_SS_PRIV_NB_PTN_SPECIFIC			3						/* Private : PTN specific number */
#define NS_SS_PRIV_NB_LOCAL					4						/* Private : local number */

		/* possible types of PartySubaddress */

#define NS_SS_PARTY_SA_USER_SPECIF			0						/* user specified subaddress */
#define NS_SS_PARTY_SA_NSAP					1						/* NSAP subaddress : 'oddCountIndicator' field is meaningless */

#define NS_SS_MX_PARTY_SA_TYPE				NS_SS_PARTY_SA_NSAP		/* maximum permitted value */

		/* possible types of PresentedAddressScreened */

#define NS_SS_PRES_ALLOWED_ADD				0						/* presentationAllowedAddress */
#define NS_SS_PRES_ADD_RESTRICTED			1						/* presentationRestricted */
#define NS_SS_PRES_NOT_AVAIL_INTER_ADD		2						/* numberNotAvailableDueToInterworking */
#define NS_SS_PRES_RESTRICTED_ADD			3						/* presentationRestrictedAddress */

#define NS_SS_MX_PRES_ADD_TYPE				NS_SS_PRES_RESTRICTED_ADD	/* maximum permitted value */

		/* possible types of PresentedNumberUnscreened / PresentedNumberScreened */

#define NS_SS_PRES_ALLOWED_NB				0						/* presentationAllowedNumber */
#define NS_SS_PRES_NB_RESTRICTED			1						/* presentationRestricted */
#define NS_SS_PRES_NOT_AVAIL_INTER_NB		2						/* numberNotAvailableDueToInterworking */
#define NS_SS_PRES_RESTRICTED_NB			3						/* presentationRestrictedNumber */

#define NS_SS_MX_PRES_NB_TYPE				NS_SS_PRES_RESTRICTED_NB	/* maximum permitted value */

		/* possible values of screening indicator */

#define NS_SS_SCR_IND_USER_NOT_SCR			0			/* userProvidedNotScreened */
#define NS_SS_SCR_IND_USER_VERIF_PASS		1			/* userProvidedVerifiedAndPassed */
#define NS_SS_SCR_IND_USER_VERIF_FAIL		2			/* userProvidedVerifiedAndFailed */
#define NS_SS_SCR_IND_NETWORK				3			/* networkProvided */

		/* Q-SIG specific : maximum size allowed for DialogID strings inside DseAPDU */

#define QSI_MX_DSE_DIALOG_ID_SZ				8

/*==========================================================================*/

#if (NS_SS_AOC_S == ON) || (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)	/* AOC service supported{ */

	/*	Advice Of Charge SS, including 3 services : AOC-S (at call set-up time),
	 *	AOC-D (during the call), AOC-E (at the end of the call)
	 * ------------------------------------------------------------------ */

		/*	NS interface identifiers of Operations for AOC SS : ChargingRequest, AOCSCurrency,
			AOCSSpecialArr, AOCDCurrency, AOCDChargingUnit, AOCECurrency and AOCEChargingunit */

#define NS_OP_AOC_CHARGING_RQ				1			/* Charging Request */
#define NS_OP_AOCS_CURRENCY					2			/* AOC-S given in currency units */
#define NS_OP_AOCS_SPECIAL_ARR				3			/* AOC-S for special charging arrangement */
#define NS_OP_AOCD_CURRENCY					4			/* AOC-D given in currency units */
#define NS_OP_AOCD_CHARGING_UNIT			5			/* AOC-D given in charging units */
#define NS_OP_AOCE_CURRENCY					6			/* AOC-E given in currency units */
#define NS_OP_AOCE_CHARGING_UNIT			7			/* AOC-E given in charging units */

		/*	NS interface additional Error identifiers AOC :
			in ReturnError component ('op_err_pb_identifier' field) */

#define SS_ERR_AOC_NO_CH_INF_AVAIL			26			/* no charging info available */

		/* sizing constants for array (matching SEQUENCE OF ASN1 Type) */

#define NS_AOC_MX_RECORDED_UNITS			32			/* maximum number of RecordedUnits used for AOC inside an operation */
#define NS_AOC_MX_AOCS_CURRENCY_INFO		10			/* maximum number of AOCSCurrencyInfo used for AOC inside an operation */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/* ChargingRequest operation : ARGUMENT */

struct ns_aoc_charging_rq_arg {
	uchar		charging_case;							/* ChargingCase = ENUMERATED {0, 1, 2} */
};

#define Ns_aoc_charg_rq_case				((struct ns_aoc_charging_rq_arg FAR *)p_ssdu_val) -> charging_case

#define NS_AOC_CHARGING_CALL_SETUP			0			/* charging Information at call set-up time */
#define NS_AOC_CHARGING_DURING_CALL			1			/* charging Information during a call */
#define NS_AOC_CHARGING_CALL_END			2			/* charging Information at the end of a call */

	/* ChargingRequest operation : RESULT */

struct ns_aoc_charging_rq_res {
	uchar		result_type;							/* type of RESULT (in CHOICE) */
	uchar		aocs_special_arr_info;					/* AOCSSpecialArrInfo : INTEGER (1..10) */
	ushort		aocs_first_cur_info;					/* offset of first instance of AOCSCurrencyInfo */
};

#define Ns_aoc_charg_rq_res_type			((struct ns_aoc_charging_rq_res FAR *)p_ssdu_val) -> result_type
#define Ns_aoc_charg_rq_res_sp_arr_inf		((struct ns_aoc_charging_rq_res FAR *)p_ssdu_val) -> aocs_special_arr_info
#define Ns_aoc_charg_rq_res_first_cur		((struct ns_aoc_charging_rq_res FAR *)p_ssdu_val) -> aocs_first_cur_info

		/* possible types of RESULT */

#define NS_AOC_CHARGING_INFO_FOLLOWS		0			/* type is chargingInfoFollows : no other parameters in RESULT */
#define NS_AOCS_SPECIAL_ARR_INFO			1			/* type is AOCSSpecialArrInfo : 1 other parameter in RESULT = aocs_special_arr_info */
#define NS_AOCS_CURRENCY_INFO_RQ			2			/* type is AOCSCurrencyInfoList : n parameters */

struct ns_aocs_currency_info {			/* AOCSCurrencyInfo structure */
	ushort		next_currency_info;				/* offset for next instance */
	uchar		charged_item;					/* chargedItem : ENUMERATED {0, 1, 2, 3, 4} */
	uchar		currency_info_type;				/* type of currency info provided */
	uchar		special_charging_code;			/* specialChargingCode : INTEGER (1..10) */
	ulong		amount;							/* currencyAmount inside Amount : INTEGER(0..16777215) */
	uchar		amount_multiplier;				/* multiplier inside Amount : ENUMERATED {0, 1, 2, 3, 4, 5, 6} */
	uchar		volume_unit_or_charg_type;		/* vRVolumeUnit inside VolumeRateCurrency : ENUMERATED {0, 1, 2} or
													dChargingType inside DurationCurrency : ENUMERATED {0, 1} */
	ulong		length_of_time_unit;			/* lengthOfTimeUnit inside dTime : INTEGER (0..16777215) */
	uchar		scale;							/* scale inside dTime : ENUMERATED {0, 1, 2, 3, 4, 5, 6} */
	ulong		granularity_lg_time_u;			/* lengthOfTimeUnit inside dGranularity : INTEGER (0..16777215) or 0xFFFFFFFF if not present */
	uchar		granularity_scale;				/* scale inside dGranularity : ENUMERATED {0, 1, 2, 3, 4, 5, 6} or 255 if not present */
	uchar		currency_size;					/* size of Currency string : maximum = 10 */
	uchar		first_currency_oct;				/* first octet of Currency string (IA5 characters) */
};

#define Ns_aocs_next_curr_info				((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> next_currency_info
#define Ns_aocs_curr_charg_item				((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> charged_item
#define Ns_aocs_curr_info_type				((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> currency_info_type
#define Ns_aocs_curr_sp_charg_code			((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> special_charging_code
#define Ns_aocs_curr_amount					((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> amount
#define Ns_aocs_curr_amount_multip			((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> amount_multiplier
#define Ns_aocs_curr_volume_unit			((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> volume_unit_or_charg_type
#define Ns_aocs_curr_charg_type				((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> volume_unit_or_charg_type
#define Ns_aocs_curr_lg_time_unit			((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> length_of_time_unit
#define Ns_aocs_curr_time_scale				((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> scale
#define Ns_aocs_curr_granul_lg_time_u		((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> granularity_lg_time_u
#define Ns_aocs_curr_granul_scale			((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> granularity_scale
#define Ns_aocs_currency_str_size			((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> currency_size
#define Ns_aocs_currency_first_str			((struct ns_aocs_currency_info FAR *)p_ssdu_val) -> first_currency_oct

		/* possible values of charged_item */

#define NS_AOCS_BASIC_COMMUNICATION				0			/* charging information for basic communication */
#define NS_AOCS_CALL_ATTEMPT					1			/* charging information for call attempt */
#define NS_AOCS_CALL_SETUP						2			/* charging information for call setup */
#define NS_AOCS_USER_TO_USER_INFO				3			/* charging information for user-to-user information */
#define NS_AOCS_OPERATION_OF_SS					4			/* charging information for operation of Supplementary Services */

		/* possible types of currency information */

#define NS_AOCS_DURATION_CURR_INFO				0			/* specific currency : durationCurrency */
#define NS_AOCS_FLAT_RATE_CURR_INFO				1			/* specific currency : flatRateCurrency */
#define NS_AOCS_VOLUME_RATE_CURR_INFO			2			/* specific currency : volumeRateCurrency */
#define NS_AOCS_SPECIAL_CHARGING_CODE			3			/* specialChargingCode : only 1 other parameter = special_charging_code */
#define NS_AOCS_FREE_OF_CHARGE					4			/* free of Charge : no other parameter in currency info */
#define NS_AOCS_INFO_NOT_AVAIL					5			/* currency information not available : no other parameter in currency info */

#define NS_MX_AOCS_CURR_INFO_TYPE				NS_AOCS_INFO_NOT_AVAIL		/* maximum permitted value */

		/* possible values of amount_multiplier */

#define NS_AOC_MULTIP_ONE_THOUSANDTH		0				/* mulitplier of amount is 1/1000 */
#define NS_AOC_MULTIP_ONE_HUNDREDTH			1				/* mulitplier of amount is 1/100 */
#define NS_AOC_MULTIP_ONE_TENTH				2				/* mulitplier of amount is 1/10 */
#define NS_AOC_MULTIP_ONE					3				/* mulitplier of amount is 1 */
#define NS_AOC_MULTIP_TEN					4				/* mulitplier of amount is 10 */
#define NS_AOC_MULTIP_HUNDRED				5				/* mulitplier of amount is 100 */
#define NS_AOC_MULTIP_THOUSAND				6				/* mulitplier of amount is 1000 */

		/* possible values of dChargingType : 'volume_unit_or_charg_type' if type is durationCurrency */

#define NS_AOC_CONTINUOUS_CHARGING			0				/* continuous charging */
#define NS_AOC_STEP_FUNCTION_CHARG			1				/* step function charging */

		/* possible values of vRVolumeUnit : 'volume_unit_or_charg_type' if type is volumeRateCurrency */

#define NS_AOC_VOLUME_UNIT_OCTET			0				/* volume unit is octet */
#define NS_AOC_VOLUME_UNIT_SEGMENT			1				/* volume unit is segment */
#define NS_AOC_VOLUME_UNIT_MESSAGE			2				/* volume unit is message */

		/* scale inside dTime and dGranularity : 'scale' and 'granularity_scale' fields */

#define NS_AOC_SCALE_ONE_HUNDREDTH_SCD		0				/* time scale is 1/100 second */
#define NS_AOC_SCALE_ONE_TENTH_SCD			1				/* time scale is 1/10 second */
#define NS_AOC_SCALE_ONE_SECOND				2				/* time scale is 1 second */
#define NS_AOC_SCALE_TEN_SECONDS			3				/* time scale is 10 seconds */
#define NS_AOC_SCALE_ONE_MINUTE				4				/* time scale is 1 minute */
#define NS_AOC_SCALE_ONE_HOUR				5				/* time scale is 1 hour */
#define NS_AOC_SCALE_TWENTY_FOUR_HOUR		6				/* time scale is 24 hours */

#if NS_SS_AOC_S == ON	/* AOC-S SS supported{ */

	/* AOCSCurrency operation : ARGUMENT */

struct ns_aocs_currency_arg {
	uchar		type;							/* type of ARGUMENT (in CHOICE) */
	ushort		first_cur_info;					/* offset of first instance of AOCSCurrencyInfo */
};

#define Ns_aocs_cur_arg_type			((struct ns_aocs_currency_arg FAR *)p_ssdu_val) -> type
#define Ns_aocs_cur_arg_first_cur		((struct ns_aocs_currency_arg FAR *)p_ssdu_val) -> first_cur_info

		/* possible types of ARGUMENT */

#define NS_AOCS_CHARG_NOT_AVAIL				0			/* type is chargeNotAvailable : no other parameters in ARGUMENT */
#define NS_AOCS_CURRENCY_INFO				1			/* type is AOCSCurrencyInfoList : n parameters formatted according
															to 'ns_aocs_currency_info' (AOCSCurrencyInfo structure) */
	/* AOCSSpecialArr operation : ARGUMENT */

struct ns_aocs_special_arr_arg {
	uchar	type;				/* type of ARGUMENT (in CHOICE) */
	uchar	arr_info;			/* AOCSSpecialArrInfo : INTEGER (1..10) */
};

#define Ns_aocs_special_arr_type		((struct ns_aocs_special_arr_arg FAR *)p_ssdu_val) -> type
#define Ns_aocs_special_arr_info		((struct ns_aocs_special_arr_arg FAR *)p_ssdu_val) -> arr_info

		/* possible types of ARGUMENT */

#define NS_AOCS_SP_ARR_CHARG_NOT_AVAIL		0			/* type is chargeNotAvailable : no other parameters in ARGUMENT */
#define NS_AOCS_SP_ARR_INFO					1			/* type is AOCSSpecialArrInfo : 1 parameter */

#endif	/* end of AOC-S SS supported} */

#if NS_SS_AOC_D == ON	/* AOC-D SS supported{ */

	/* AOCDCurrency operation : ARGUMENT */

struct ns_aocd_currency_arg {
	uchar	arg_type;						/* type of ARGUMENT */
	uchar	type_of_charging;				/* type of charging information (in specificCurrency) : ENUMERATED {0, 1} */
	uchar	billing_id;						/* AOCD Billing ID (in specificCurrency) : ENUMERATED {0, 1, 2} or 255 if absent */
	ulong	amount;							/* currencyAmount inside Amount : INTEGER(0..16777215) */
	uchar	amount_multiplier;				/* multiplier inside Amount : ENUMERATED {0, 1, 2, 3, 4, 5, 6} */
	uchar	currency_size;					/* size of Currency string : maximum = 10 */
	uchar	first_currency_oct;				/* first octet of Currency string (IA5 characters) */
};

#define Ns_aocd_curr_arg_type				((struct ns_aocd_currency_arg FAR *)p_ssdu_val) -> arg_type
#define Ns_aocd_curr_info_type				((struct ns_aocd_currency_arg FAR *)p_ssdu_val) -> type_of_charging
#define Ns_aocd_curr_billing_id				((struct ns_aocd_currency_arg FAR *)p_ssdu_val) -> billing_id
#define Ns_aocd_curr_amount					((struct ns_aocd_currency_arg FAR *)p_ssdu_val) -> amount
#define Ns_aocd_curr_amount_multip			((struct ns_aocd_currency_arg FAR *)p_ssdu_val) -> amount_multiplier
#define Ns_aocd_currency_str_size			((struct ns_aocd_currency_arg FAR *)p_ssdu_val) -> currency_size
#define Ns_aocd_currency_first_str			((struct ns_aocd_currency_arg FAR *)p_ssdu_val) -> first_currency_oct

		/* possible types of ARGUMENT */

#define NS_AOCD_CHARGE_NOT_AVAILABLE		0			/* type is chargeNotAvailable : no other parameters in ARGUMENT */
#define NS_AOCD_CURR_FREE_OF_CHARGE			1			/* type is free of charge : no other parameters in ARGUMENT */
#define NS_AOCD_SPECIFIC_CURRENCY			2			/* type is specificCurrency : all parameters meaninful */

		/* possible types of charging information */

#define NS_AOCD_CHARG_INFO_SUB_TOTAL		0			/* SubTotal charging */
#define NS_AOCD_CHARG_INFO_TOTAL			1			/* Total charging */

		/* possible Billing IDs for AOC-D */

#define NS_AOCD_BILL_ID_NORMAL				0			/* normal charging */
#define NS_AOCD_BILL_ID_REVERSE				1			/* reverse charging */
#define NS_AOCD_BILL_ID_CREDIT_CARD			2			/* credit card charging */

		/* possible values of 'amount_multiplier' field are defined above */

	/* AOCDChargingUnit operation : ARGUMENT */

struct ns_aocd_charging_unit_arg {
	uchar		arg_type;						/* type of ARGUMENT */
	uchar		type_of_charging;				/* type of charging information (in specificChargingUnits) : ENUMERATED {0, 1} */
	uchar		billing_id;						/* AOCD Billing ID (in specificChargingUnits) : ENUMERATED {0, 1, 2} or 255 if absent */
	ushort		first_recorded_unit;			/* offset of first instance of RecordedUnits (in recordedUnitsList) */
};

#define Ns_aocd_charg_u_arg_type			((struct ns_aocd_charging_unit_arg FAR *)p_ssdu_val) -> arg_type
#define Ns_aocd_charg_u_info_type			((struct ns_aocd_charging_unit_arg FAR *)p_ssdu_val) -> type_of_charging
#define Ns_aocd_charg_u_billing_id			((struct ns_aocd_charging_unit_arg FAR *)p_ssdu_val) -> billing_id
#define Ns_aocd_charg_u_first_unit			((struct ns_aocd_charging_unit_arg FAR *)p_ssdu_val) -> first_recorded_unit

		/* possible types of ARGUMENT */

#define NS_AOCD_CHARGING_NOT_AVAILABLE		0			/* type is chargeNotAvailable : no other parameters in ARGUMENT */
#define NS_AOCD_FREE_OF_CHARGE				1			/* type is free of charge : no other parameters in ARGUMENT */
#define NS_AOCD_SPECIFIC_CHARGING_UNIT		2			/* type is specificChargingUnits : n parameters */

#endif	/* end of AOC-D SS supported} */

#if (NS_SS_AOC_D == ON) || (NS_SS_AOC_E == ON)	/* AOC-D or AOC-E SS supported{ */

		/* possible values of 'type_of_charging' and 'billing_id' fields are defined above */

struct ns_aoc_recorded_unit {		/* RecordedUnits structure */
	ushort		next_unit_info;			/* offset for next instance */
	uchar		type_of_unit;			/* recordedTypeOfUnits : INTEGER (1..16) or 255 if absent */
	ulong		number_of_units;		/* recordedNumberOfUnits : INTEGER (0..16777215) or NS_SS_INT_ULONG_NOT_PROVIDED (0xFFFFFFFF) if absent */
};

#define Ns_aoc_next_unit_info			((struct ns_aoc_recorded_unit FAR *)p_ssdu_val) -> next_unit_info
#define Ns_aoc_type_of_unit				((struct ns_aoc_recorded_unit FAR *)p_ssdu_val) -> type_of_unit
#define Ns_aoc_number_of_units			((struct ns_aoc_recorded_unit FAR *)p_ssdu_val) -> number_of_units

#endif	/* end of AOC-D or AOC-E SS supported} */

#if NS_SS_AOC_E == ON	/* AOC-E SS supported{ */

	/* AOCECurrency operation : ARGUMENT */

struct ns_aoce_currency_arg {
	uchar	arg_type;						/* type of ARGUMENT */
	uchar	billing_id;						/* AOCE Billing ID (in specificCurrency) : ENUMERATED {0, .. , 7} or 255 if absent */
	ulong	amount;							/* currencyAmount inside Amount : INTEGER(0..16777215) */
	uchar	amount_multiplier;				/* multiplier inside Amount : ENUMERATED {0, 1, 2, 3, 4, 5, 6}, values defined above */
	uchar	charg_assoc_type;				/* type of ChargingAssociation or 255 if absent. If it is absent, all following parameters are meaninless except Currency string */
	short	charg_identifier;				/* chargeIdentifier in ChargingAssociation : INTEGER (-32768..32767) */
	uchar	party_nb_type;					/* type of PartyNumber */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless */
	uchar	currency_size;					/* size of Currency string : maximum = 10 */
	uchar	nb_digits_size;					/* size of NumberDigits string inside PartyNumber : maximum = 20 */
	uchar	first_currency_oct;				/* first octet of Currency string (IA5 characters)*/
		/* Currency string is immediately followed by NumberDigits string if any */
};

#define Ns_aoce_curr_arg_type				((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> arg_type
#define Ns_aoce_curr_billing_id				((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> billing_id
#define Ns_aoce_curr_amount					((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> amount
#define Ns_aoce_curr_amount_multip			((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> amount_multiplier
#define Ns_aoce_curr_charg_assoc_type		((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> charg_assoc_type
#define Ns_aoce_curr_charg_id				((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> charg_identifier
#define Ns_aoce_curr_party_nb_type			((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_aoce_curr_type_of_nb				((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_aoce_curr_nb_digits_size			((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_aoce_currency_str_size			((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> currency_size
#define Ns_aoce_currency_first_str			((struct ns_aoce_currency_arg FAR *)p_ssdu_val) -> first_currency_oct

		/* possible types of ARGUMENT */

#define NS_AOCE_CHARGE_NOT_AVAILABLE		0			/* type is chargeNotAvailable : no other parameters in ARGUMENT */
#define NS_AOCE_CURR_FREE_OF_CHARGE			1			/* type is free of charge : only 'chargingAssociation' related parameters */
#define NS_AOCE_SPECIFIC_CURRENCY			2			/* type is specificCurrency : all parameters meaninful */

		/* possible Billing IDs for AOC-E */

#define NS_AOCE_BILL_ID_NORMAL				0			/* normal charging */
#define NS_AOCE_BILL_ID_REVERSE				1			/* reverse charging */
#define NS_AOCE_BILL_ID_CREDIT_CARD			2			/* credit card charging */
#define NS_AOCE_BILL_ID_FORWARD_UNC			3			/* call forwarding unconditional */
#define NS_AOCE_BILL_ID_FORWARD_BUSY		4			/* call forwarding busy */
#define NS_AOCE_BILL_ID_FORWARD_NOR			5			/* call forwarding no reply */
#define NS_AOCE_BILL_ID_DEFLECTION			6			/* call deflection */
#define NS_AOCE_BILL_ID_TRANSFER			7			/* call transfer */
	/* 255 if absent */

		/* possible types of chargingAssociation */

#define NS_AOCE_ASSOC_CHARG_ID				0			/* type is chargeIdentifier : only charg_identifier and Currency string meaningful in following fields */
#define NS_AOCE_ASSOC_CHARG_NUMBER			1			/* type is chargeNumber : charg_identifier field is meaningless */
	/* 255 if absent */

	/* AOCEChargingUnit operation : ARGUMENT */

struct ns_aoce_charging_unit_arg {
	uchar	arg_type;						/* type of ARGUMENT */
	uchar	billing_id;						/* AOCE Billing ID (in specificChargingUnits) : ENUMERATED {0, .. , 7} or 255 if absent */
	uchar	charg_assoc_type;				/* type of ChargingAssociation or 255 if absent */
	short	charg_identifier;				/* chargeIdentifier in ChargingAssociation : INTEGER (-32768..32767) */
	uchar	party_nb_type;					/* type of PartyNumber */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless */
	ushort	first_recorded_unit;			/* offset of first instance of RecordedUnits (in recordedUnitsList) */
	uchar	nb_digits_size;					/* size of NumberDigits string inside PartyNumber : maximum = 20 */
	uchar	first_nb_digit;					/* first octet of NumberDigits string */
};

#define Ns_aoce_charg_u_arg_type			((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> arg_type
#define Ns_aoce_charg_u_billing_id			((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> billing_id
#define Ns_aoce_charg_u_assoc_type			((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> charg_assoc_type
#define Ns_aoce_charg_u_charg_id			((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> charg_identifier
#define Ns_aoce_charg_u_party_nb_type		((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_aoce_charg_u_type_of_nb			((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_aoce_charg_u_nb_digits_size		((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_aoce_charg_u_first_dig			((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> first_nb_digit
#define Ns_aoce_charg_u_first_unit			((struct ns_aoce_charging_unit_arg FAR *)p_ssdu_val) -> first_recorded_unit

		/* possible types of ARGUMENT */

#define NS_AOCE_CHARGING_NOT_AVAILABLE		0			/* type is chargeNotAvailable : no other parameters in ARGUMENT */
#define NS_AOCE_FREE_OF_CHARGE				1			/* type is free of charge : only 'chargingAssociation' related parameters */
#define NS_AOCE_SPECIFIC_CHARGING_UNIT		2			/* type is specificChargingUnits : n parameters */

		/* possible values of other fields are defined above. recordedUnitsList is the same
			as for AOC-D above : a list of RecordedUnits structures (ns_aoc_recorded_unit) */

#endif	/* end of AOC-E SS supported} */

#endif	/* end of AOC service supported} */

/*==========================================================================*/

		/*	Closed User Group SS (CUG)
		 * --------------------------- */

#if NS_SS_CUG == ON		/* Closed User Group SS supported{ */

		/*	NS interface identifier of Operation for CUG SS : CUGCallOperation */

#define NS_OP_CUG_CALL						8

		/*	NS interface additional Error identifiers for CUG :
			in ReturnError component ('op_err_pb_identifier' field) */

#define SS_ERR_CUG_INV_OR_UNREG_INDEX		16			/* invalid or unregistered CUG index */
#define SS_ERR_CUG_RQ_SRV_VIOL_CONSTR		17			/* requested basic service violates CUG Constraints */
#define SS_ERR_CUG_OUT_CALL_BARRED			18			/* outgoing calls barred within CUG */
#define SS_ERR_CUG_INC_CALL_BARRED			19			/* incoming calls barred within CUG */
#define SS_ERR_CUG_USER_NOT_MEMBER			20			/* user not member of CUG */
#define SS_ERR_CUG_FAC_SUB_CL_INCONS		21			/* inconsistency in designated facility and subscriber class */

		/* structure of data at NS interface for CUGCallOperation operation ARGUMENT */

struct ns_cug_call_arg {
	uchar	out_access_rq;								/* outgoingAccessRequest : TRUE/FALSE or 0xFF if not present */
	ushort	cug_index;									/* cUgIndex : INTEGER (0..32767) or 0xFFFF if not present */
};

#define Ns_cug_call_out_access_rq			((struct ns_cug_call_arg FAR *)p_ssdu_val) -> out_access_rq
#define Ns_cug_call_index					((struct ns_cug_call_arg FAR *)p_ssdu_val) -> cug_index

#endif /* end of "Closed User Group SS supported"} */

/*==========================================================================*/

		/*	Diversion SS, including 4 services : Call Forwarding Unconditional (CFU),
		 *	Call Forwarding Busy (CFB), Call Forwarding No Reply (CFNR), Call Deflection (CD)
		 * ------------------------------------------------------------------ */

#if NS_SS_DIVERSION == ON /* Diversion SS supported{ */

		/*	NS interface identifiers of Operations for Diversion SS */

#define NS_OP_ACT_DIVERSION					9			/* activation Diversion */
#define NS_OP_DEACT_DIVERSION				10			/* deactivation Diversion */
#define NS_OP_ACT_STAT_NOTIF_DIV			11			/* activation Status Notification Diversion */
#define NS_OP_DEACT_STAT_NOTIF_DIV			12			/* deactivation Status Notification Diversion */
#define NS_OP_INTEROG_DIVERSION				13			/* interrogation Diversion */
#define NS_OP_INTEROG_SERVED_USER_NB		14			/* interrogate Served User Numbers */
#define NS_OP_DIVERSION_INFO				15			/* diversion Information */
#define NS_OP_CALL_DEFLECTION				16			/* call Deflection */
#define NS_OP_CALL_REROUTING				17			/* call Rerouting */
#define NS_OP_DIVERTING_LEG_INFO_1			18			/* diverting Leg Information 1 */
#define NS_OP_DIVERTING_LEG_INFO_2			19			/* diverting Leg Information 2 */
#define NS_OP_DIVERTING_LEG_INFO_3			20			/* diverting Leg Information 3 */

		/*	NS interface additional Error identifiers for Diversion :
			in ReturnError component ('op_err_pb_identifier' field) */

#define SS_ERR_INV_DIVERTED_TO_NB			12			/* invalid diverted-to number */
#define SS_ERR_DIV_SPECIAL_SERV_NB			14			/* special service number */
#define SS_ERR_DIV_TO_SERVED_USER_NB		15			/* diversion to served-user number */
#define SS_ERR_DIV_INC_CALL_ACC				23			/* incoming call accepted */
#define SS_ERR_DIV_NB_EXCEEDED				24			/* number of diversions exceeded */
#define SS_ERR_DIV_NOT_ACTIVATED			46			/* not activated */
#define SS_ERR_DIV_RQ_ALREADY_ACC			48			/* request already accepted */

		/* sizing constants for array (matching SEQUENCE OF or SET OF ASN1 Type) */

#define NS_DIV_MX_USER_NUMBERS				10			/* maximum number of PartyNumber instances used for Diversion inside ServedUserNumberList
															actual value in specification is 99 !!! */

#define NS_DIV_MX_INT_RESULT				10			/* maximum number of IntResult instances used for Diversion inside IntResultList
															actual value in specification is 29 !!! */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/* ActivationDiversion operation : ARGUMENT */

struct ns_activation_diversion_arg {
	uchar	procedure;						/* procedure : ENUMERATED {0, 1, 2} */
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	forw_party_nb_type;				/* type of PartyNumber inside forwardedToAddress */
	uchar	forw_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside forwardedToAddress) */
	uchar	forw_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside forwardedToAddress */
	uchar	forw_sub_add_type;				/* type of PartySubaddress or 255 if absent inside forwardedToAddress */
	uchar	forw_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside forwardedToAddress) */
	uchar	forw_sub_address_size;			/* size of PartySubaddress string inside forwardedToAddress */
	uchar	served_user_nr_type;			/* type of servedUserNr (individualNumber, allNumbers) */
	uchar	srv_u_party_nb_type;			/* type of PartyNumber inside servedUserNr */
	uchar	srv_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	srv_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside servedUserNr */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside forwardedToAddress */
		/*	PartyNumber string is immediately followed by PartySubaddress string inside forwardedToAddress if any,
			which is itself immediately followed by PartyNumber string inside servedUserNr */
};

#define Ns_act_div_procedure				((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> procedure
#define Ns_act_div_basic_service			((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> basic_service
#define Ns_act_div_forw_party_nb_type		((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> forw_party_nb_type
#define Ns_act_div_forw_type_of_nb			((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> forw_type_of_nb
#define Ns_act_div_forw_nb_size				((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> forw_nb_digits_size
#define Ns_act_div_forw_sa_type				((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> forw_sub_add_type
#define Ns_act_div_forw_sa_odd_count		((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> forw_sub_add_odd_count
#define Ns_act_div_forw_sa_size				((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> forw_sub_address_size
#define Ns_act_div_s_u_nb_type				((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> served_user_nr_type
#define Ns_act_div_s_u_party_nb_type		((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> srv_u_party_nb_type
#define Ns_act_div_s_u_type_of_nb			((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> srv_u_type_of_nb
#define Ns_act_div_s_u_nb_size				((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> srv_u_nb_digits_size
#define Ns_act_div_first_str				((struct ns_activation_diversion_arg FAR *)p_ssdu_val) -> first_nb_digit

		/* possible types of procedure */

#define NS_SS_DIV_PROCEDURE_CFU				0			/* Call Forward Unconditional (CFU) */
#define NS_SS_DIV_PROCEDURE_CFB				1			/* Call Forward Busy (CFB) */
#define NS_SS_DIV_PROCEDURE_CFNR			2			/* Call Forward No Reply (CFNR) */

		/* possible types of servedUserNr */

#define NS_SS_DIV_SERVED_USER_IND_NB		0			/* individual served user number */
#define NS_SS_DIV_SERVED_USER_ALL_NB		1			/* all served user numbers */

#define NS_SS_DIV_MX_S_USER_NB_TYPE			NS_SS_DIV_SERVED_USER_ALL_NB	/* maximum permitted value */

		/* possible values of other fields are defined above */

	/* DeactivationDiversion operation : ARGUMENT */

struct ns_deactivation_diversion_arg {
	uchar	procedure;						/* procedure : ENUMERATED {0, 1, 2} */
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	served_user_nr_type;			/* type of servedUserNr (individualNumber, allNumbers) */
	uchar	srv_u_party_nb_type;			/* type of PartyNumber inside servedUserNr */
	uchar	srv_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	srv_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside servedUserNr */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside servedUserNr */
};

#define Ns_dea_div_procedure				((struct ns_deactivation_diversion_arg FAR *)p_ssdu_val) -> procedure
#define Ns_dea_div_basic_service			((struct ns_deactivation_diversion_arg FAR *)p_ssdu_val) -> basic_service
#define Ns_dea_div_s_u_nb_type				((struct ns_deactivation_diversion_arg FAR *)p_ssdu_val) -> served_user_nr_type
#define Ns_dea_div_s_u_party_nb_type		((struct ns_deactivation_diversion_arg FAR *)p_ssdu_val) -> srv_u_party_nb_type
#define Ns_dea_div_s_u_type_of_nb			((struct ns_deactivation_diversion_arg FAR *)p_ssdu_val) -> srv_u_type_of_nb
#define Ns_dea_div_s_u_nb_size				((struct ns_deactivation_diversion_arg FAR *)p_ssdu_val) -> srv_u_nb_digits_size
#define Ns_dea_div_first_str				((struct ns_deactivation_diversion_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* ActivationStatusNotificationDiv operation ARGUMENT : same as in ActivationDiversion operation */

#define ns_act_status_notif_div_arg			ns_activation_diversion_arg

	/* DeactivationStatusNotificationDiv operation ARGUMENT : same as in DeactivationDiversion operation */

#define ns_dea_status_notif_div_arg			ns_deactivation_diversion_arg

	/*	InterrogationDiversion operation ARGUMENT : same as in DeactivationDiversion operation
		except that basic service is optional (255 if absent) */

#define ns_interrogation_diversion_arg		ns_deactivation_diversion_arg

	/*	InterrogationDiversion operation RESULT : a list of IntResult structures (0 to NS_DIV_MX_INT_RESULT) */

#define ns_interrogation_diversion_res		ns_diversion_int_result

struct ns_diversion_int_result {
	ushort	next_int_result;				/* offset for next instance */
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	procedure;						/* procedure : ENUMERATED {0, 1, 2} */
	uchar	served_user_nr_type;			/* type of servedUserNr (individualNumber, allNumbers) */
	uchar	srv_u_party_nb_type;			/* type of PartyNumber inside servedUserNr */
	uchar	srv_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	srv_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside servedUserNr */
	uchar	forw_party_nb_type;				/* type of PartyNumber inside forwardedToAddress */
	uchar	forw_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside forwardedToAddress) */
	uchar	forw_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside forwardedToAddress */
	uchar	forw_sub_add_type;				/* type of PartySubaddress or 255 if absent inside forwardedToAddress */
	uchar	forw_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside forwardedToAddress) */
	uchar	forw_sub_address_size;			/* size of PartySubaddress string inside forwardedToAddress */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside servedUserNr */
		/*	servedUserNr string is immediately followed by PartyNumber string inside forwardedToAddress,
			which is itself immediately followed by PartySubaddress string inside servedUserNr */
};

#define Ns_int_res_div_basic_service			((struct ns_diversion_int_result FAR *)p_ssdu_val) -> basic_service
#define Ns_int_res_div_procedure				((struct ns_diversion_int_result FAR *)p_ssdu_val) -> procedure
#define Ns_int_res_div_s_u_nb_type				((struct ns_diversion_int_result FAR *)p_ssdu_val) -> served_user_nr_type
#define Ns_int_res_div_s_u_party_nb_type		((struct ns_diversion_int_result FAR *)p_ssdu_val) -> srv_u_party_nb_type
#define Ns_int_res_div_s_u_type_of_nb			((struct ns_diversion_int_result FAR *)p_ssdu_val) -> srv_u_type_of_nb
#define Ns_int_res_div_s_u_nb_size				((struct ns_diversion_int_result FAR *)p_ssdu_val) -> srv_u_nb_digits_size
#define Ns_int_res_div_forw_party_nb_type		((struct ns_diversion_int_result FAR *)p_ssdu_val) -> forw_party_nb_type
#define Ns_int_res_div_forw_type_of_nb			((struct ns_diversion_int_result FAR *)p_ssdu_val) -> forw_type_of_nb
#define Ns_int_res_div_forw_nb_size				((struct ns_diversion_int_result FAR *)p_ssdu_val) -> forw_nb_digits_size
#define Ns_int_res_div_forw_sa_type				((struct ns_diversion_int_result FAR *)p_ssdu_val) -> forw_sub_add_type
#define Ns_int_res_div_forw_sa_odd_count		((struct ns_diversion_int_result FAR *)p_ssdu_val) -> forw_sub_add_odd_count
#define Ns_int_res_div_forw_sa_size				((struct ns_diversion_int_result FAR *)p_ssdu_val) -> forw_sub_address_size
#define Ns_int_res_div_first_str				((struct ns_diversion_int_result FAR *)p_ssdu_val) -> first_nb_digit
#define Ns_int_res_div_next						((struct ns_diversion_int_result FAR *)p_ssdu_val) -> next_int_result

	/* InterrogateServedUserNumbers operation RESULT : a list of PartyNumber (0 to NS_DIV_MX_USER_NUMBERS) */

struct ns_interog_s_u_nb_div_res {
	ushort	next_party_nb;				/* offset for next instance */
	uchar	party_nb_type;				/* type of PartyNumber */
	uchar	type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless */
	uchar	nb_digits_size;				/* size of NumberDigits string in PartyNumber */
	uchar	first_nb_digit;				/* first octet of PartyNumber string */
};

#define Ns_div_interog_s_u_type_of_nb			((struct ns_interog_s_u_nb_div_res FAR *)p_ssdu_val) -> type_of_nb
#define Ns_div_interog_s_u_party_nb_t			((struct ns_interog_s_u_nb_div_res FAR *)p_ssdu_val) -> party_nb_type
#define Ns_div_interog_s_u_nb_size				((struct ns_interog_s_u_nb_div_res FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_div_interog_s_u_first_nb				((struct ns_interog_s_u_nb_div_res FAR *)p_ssdu_val) -> first_nb_digit
#define Ns_div_interog_s_u_next_nb				((struct ns_interog_s_u_nb_div_res FAR *)p_ssdu_val) -> next_party_nb

	/* DiversionInformation operation ARGUMENT */

struct ns_information_div_arg {
	uchar	reason;							/* diversion reason : ENUMERATED {0, 1, .. , 5} */
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	srv_u_sub_add_type;				/* type of PartySubaddress or 255 if absent (inside servedUserSubaddress) */
	uchar	srv_u_sub_add_odd_count;		/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside servedUserSubaddress) */
	uchar	srv_u_sub_address_sz;			/* size of PartySubaddress string inside servedUserSubaddress */
	uchar	calling_a_presented_type;		/* type of PresentedAddressScreened (presentationAllowedAddress .. presentationRestrictedAddress) inside callingAddress or 255 if absent */
	uchar	calling_a_screening_ind;		/* ScreeningIndicator in AddressScreened inside callingAddress : ENUMERATED {0, 1, 2, 3} */
	uchar	calling_party_nb_type;			/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside callingAddress */
	uchar	calling_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside callingAddress) */
	uchar	calling_number_digits_sz;		/* size of PartyNumber string inside callingAddress */
	uchar	calling_sub_add_type;			/* type of PartySubaddress or 255 if absent (inside callingAddress) */
	uchar	calling_sub_add_odd_count;		/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside callingAddress) */
	uchar	calling_sub_address_sz;			/* size of PartySubaddress string inside callingAddress */
	uchar	orig_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside originalCalledNr or 255 if absent */
	uchar	orig_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside originalCalledNr */
	uchar	orig_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside originalCalledNr) */
	uchar	orig_number_digits_sz;			/* size of PartyNumber string inside originalCalledNr */
	uchar	last_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside lastDivertingNr or 255 if absent */
	uchar	last_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside lastDivertingNr */
	uchar	last_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside lastDivertingNr) */
	uchar	last_number_digits_sz;			/* size of PartyNumber string inside lastDivertingNr */
	uchar	last_divert_reason;				/* last diverting reason : ENUMERATED {0, 1, .. , 5} or 255 if absent */
	uchar	q931_user_info_sz;				/* size of Q931 User Info IE string */
	uchar	first_str_oct;					/* first octet of first string */
		/*	Here is servedUserSubaddress string, then PartyNumber and PartySubaddress strings
			inside callingAddress if any, then originalCalledNr string if any,
			then lastDivertingNr string if any, then userInfo string if any */
};

#define Ns_info_div_reason					((struct ns_information_div_arg FAR *)p_ssdu_val) -> reason
#define Ns_info_div_basic_service			((struct ns_information_div_arg FAR *)p_ssdu_val) -> basic_service
#define Ns_info_div_srv_u_sa_type			((struct ns_information_div_arg FAR *)p_ssdu_val) -> srv_u_sub_add_type
#define Ns_info_div_srv_u_sa_odd_count		((struct ns_information_div_arg FAR *)p_ssdu_val) -> srv_u_sub_add_odd_count
#define Ns_info_div_srv_u_sa_size			((struct ns_information_div_arg FAR *)p_ssdu_val) -> srv_u_sub_address_sz
#define Ns_info_div_calling_a_type			((struct ns_information_div_arg FAR *)p_ssdu_val) -> calling_a_presented_type
#define Ns_info_div_calling_a_scr_ind		((struct ns_information_div_arg FAR *)p_ssdu_val) -> calling_a_screening_ind
#define Ns_info_div_calling_nb_type			((struct ns_information_div_arg FAR *)p_ssdu_val) -> calling_party_nb_type
#define Ns_info_div_calling_t_of_nb			((struct ns_information_div_arg FAR *)p_ssdu_val) -> calling_type_of_nb
#define Ns_info_div_calling_nb_size			((struct ns_information_div_arg FAR *)p_ssdu_val) -> calling_number_digits_sz
#define Ns_info_div_calling_sa_type			((struct ns_information_div_arg FAR *)p_ssdu_val) -> calling_sub_add_type
#define Ns_info_div_calling_sa_odd_count	((struct ns_information_div_arg FAR *)p_ssdu_val) -> calling_sub_add_odd_count
#define Ns_info_div_calling_sa_size			((struct ns_information_div_arg FAR *)p_ssdu_val) -> calling_sub_address_sz
#define Ns_info_div_orig_pres_type			((struct ns_information_div_arg FAR *)p_ssdu_val) -> orig_presented_nb_type
#define Ns_info_div_orig_nb_type			((struct ns_information_div_arg FAR *)p_ssdu_val) -> orig_party_nb_type
#define Ns_info_div_orig_t_of_nb			((struct ns_information_div_arg FAR *)p_ssdu_val) -> orig_type_of_nb
#define Ns_info_div_orig_nb_size			((struct ns_information_div_arg FAR *)p_ssdu_val) -> orig_number_digits_sz
#define Ns_info_div_last_pres_type			((struct ns_information_div_arg FAR *)p_ssdu_val) -> last_presented_nb_type
#define Ns_info_div_last_nb_type			((struct ns_information_div_arg FAR *)p_ssdu_val) -> last_party_nb_type
#define Ns_info_div_last_t_of_nb			((struct ns_information_div_arg FAR *)p_ssdu_val) -> last_type_of_nb
#define Ns_info_div_last_nb_size			((struct ns_information_div_arg FAR *)p_ssdu_val) -> last_number_digits_sz
#define Ns_info_div_last_reason				((struct ns_information_div_arg FAR *)p_ssdu_val) -> last_divert_reason
#define Ns_info_div_q931_user_info_sz		((struct ns_information_div_arg FAR *)p_ssdu_val) -> q931_user_info_sz
#define Ns_info_div_first_str				((struct ns_information_div_arg FAR *)p_ssdu_val) -> first_str_oct

		/* possible values of diversion reason */

#define NS_SS_DIV_REASON_UNKNOWN			0			/* unknown */
#define NS_SS_DIV_REASON_CFU				1			/* cfu */
#define NS_SS_DIV_REASON_CFB				2			/* cfb */
#define NS_SS_DIV_REASON_CFNR				3			/* cfnr */
#define NS_SS_DIV_REASON_CD_ALERT			4			/* cdAlerting */
#define NS_SS_DIV_REASON_CD_IMMEDIATE		5			/* cdImmediate */

		/* possible values of other fields are defined above */

	/* CallDeflection operation : ARGUMENT */

struct ns_deflection_div_arg {
	uchar	pres_allow_div_to_user;		/* presentationAllowedDivertedToUser : TRUE/FALSE or 255 if absent */
	uchar	party_nb_type;				/* type of PartyNumber inside deflectionAddress */
	uchar	type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside deflectionAddress) */
	uchar	nb_digits_size;				/* size of NumberDigits string in PartyNumber inside deflectionAddress */
	uchar	sub_add_type;				/* type of PartySubaddress or 255 if absent inside deflectionAddress */
	uchar	sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside deflectionAddress) */
	uchar	sub_address_size;			/* size of PartySubaddress string inside deflectionAddress */
	uchar	first_nb_digit;				/* first octet of PartyNumber string inside deflectionAddress */
		/*	deflectionAddress : PartyNumber string is immediately followed by PartySubaddress string if any */
};

#define Ns_div_defl_pres_allow_to_u		((struct ns_deflection_div_arg FAR *)p_ssdu_val) -> pres_allow_div_to_user
#define Ns_div_defl_party_nb_type		((struct ns_deflection_div_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_div_defl_type_of_nb			((struct ns_deflection_div_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_div_defl_nb_size				((struct ns_deflection_div_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_div_defl_sa_type				((struct ns_deflection_div_arg FAR *)p_ssdu_val) -> sub_add_type
#define Ns_div_defl_sa_odd_count		((struct ns_deflection_div_arg FAR *)p_ssdu_val) -> sub_add_odd_count
#define Ns_div_defl_sa_size				((struct ns_deflection_div_arg FAR *)p_ssdu_val) -> sub_address_size
#define Ns_div_defl_first_str			((struct ns_deflection_div_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* CallRerouteing operation : ARGUMENT */

struct ns_rerouteing_div_arg {
	uchar	reason;							/* rerouteing reason : ENUMERATED {0, 1, .. , 5} */
	uchar	counter;						/* rerouteing counter : INTEGER (1..5) */
	uchar	called_party_nb_type;			/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside calledAddress */
	uchar	called_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside calledAddress) */
	uchar	called_number_digits_sz;		/* size of PartyNumber string inside calledAddress */
	uchar	called_sub_add_type;			/* type of PartySubaddress or 255 if absent (inside calledAddress) */
	uchar	called_sub_add_odd_count;		/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside calledAddress) */
	uchar	called_sub_address_sz;			/* size of PartySubaddress string inside calledAddress */
	uchar	q931_ie_sz;						/* size of Q931 IE string */
	uchar	subscription_option;			/* subscriptionOption : ENUMERATED {0, 1, 2} or 255 if absent */
	uchar	last_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside lastRerouteingNr or 255 if absent */
	uchar	last_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside lastRerouteingNr */
	uchar	last_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside lastRerouteingNr) */
	uchar	last_number_digits_sz;			/* size of PartyNumber string inside lastRerouteingNr */
	uchar	calling_sub_add_type;				/* type of PartySubaddress or 255 if absent (inside callingPartySubaddress) */
	uchar	calling_sub_add_odd_count;		/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside callingPartySubaddress) */
	uchar	calling_sub_address_sz;			/* size of PartySubaddress string inside callingPartySubaddress */
	uchar	first_str_oct;					/* first octet of first string */
		/*	Here are PartyNumber and PartySubaddress (if any) strings inside calledAddress,
			then Q931 IE string, then lastRerouteingNr string, then callingPartySubaddress string if any */
};

#define Ns_div_rerout_reason					((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> reason
#define Ns_div_rerout_counter					((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> counter
#define Ns_div_rerout_called_nb_type			((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> called_party_nb_type
#define Ns_div_rerout_called_t_of_nb			((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> called_type_of_nb
#define Ns_div_rerout_called_nb_size			((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> called_number_digits_sz
#define Ns_div_rerout_called_sa_type			((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> called_sub_add_type
#define Ns_div_rerout_called_sa_odd_count		((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> called_sub_add_odd_count
#define Ns_div_rerout_called_sa_size			((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> called_sub_address_sz
#define Ns_div_rerout_q931_ie_sz				((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> q931_ie_sz
#define Ns_div_rerout_last_pres_type			((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> last_presented_nb_type
#define Ns_div_rerout_last_nb_type				((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> last_party_nb_type
#define Ns_div_rerout_last_t_of_nb				((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> last_type_of_nb
#define Ns_div_rerout_last_nb_size				((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> last_number_digits_sz
#define Ns_div_rerout_subscription				((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> subscription_option
#define Ns_div_rerout_calling_sa_type			((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> calling_sub_add_type
#define Ns_div_rerout_calling_sa_odd_count		((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> calling_sub_add_odd_count
#define Ns_div_rerout_calling_sa_size			((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> calling_sub_address_sz
#define Ns_div_rerout_first_str					((struct ns_rerouteing_div_arg FAR *)p_ssdu_val) -> first_str_oct

		/* possible values of subscription option */

#define NS_SS_DIV_SUB_NO_NOTIFICATION			0		/* noNotification */
#define NS_SS_DIV_SUB_NOTIF_WITHOUT_NB			1		/* NotificationWithoutDivertedToNr */
#define NS_SS_DIV_SUB_NOTIF_WITH_NB				2		/* NotificationWithDivertedToNr */

	/* DivertingLegInformation1 operation */

struct ns_div_leg_info_1_arg {
	uchar	reason;							/* diversion reason : ENUMERATED {0, 1, .. , 5} */
	uchar	subscription_option;			/* subscriptionOption : ENUMERATED {0, 1, 2} */
	uchar	presented_nb_type;				/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside divertedToNumber or 255 if absent */
	uchar	party_nb_type;					/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside divertedToNumber */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside divertedToNumber) */
	uchar	number_digits_sz;				/* size of NumberDigits string in PartyNumber inside divertedToNumber */
	uchar	first_nb_dig;					/* first octet of divertedToNumber string */
		/*	divertedToNumber string if any */
};

#define Ns_div_leg_inf1_reason				((struct ns_div_leg_info_1_arg FAR *)p_ssdu_val) -> reason
#define Ns_div_leg_inf1_subscription		((struct ns_div_leg_info_1_arg FAR *)p_ssdu_val) -> subscription_option
#define Ns_div_leg_inf1_pres_type			((struct ns_div_leg_info_1_arg FAR *)p_ssdu_val) -> presented_nb_type
#define Ns_div_leg_inf1_nb_type				((struct ns_div_leg_info_1_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_div_leg_inf1_t_of_nb				((struct ns_div_leg_info_1_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_div_leg_inf1_nb_size				((struct ns_div_leg_info_1_arg FAR *)p_ssdu_val) -> number_digits_sz
#define Ns_div_leg_inf1_nb_str				((struct ns_div_leg_info_1_arg FAR *)p_ssdu_val) -> first_nb_dig

	/* DivertingLegInformation2 operation */

struct ns_div_leg_info_2_arg {
	uchar	counter;						/* diversion counter : INTEGER (1..5) */
	uchar	reason;							/* diversion reason : ENUMERATED {0, 1, .. , 5} */
	uchar	div_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside divertingNr or 255 if absent */
	uchar	div_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside divertingNr */
	uchar	div_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside divertingNr) */
	uchar	div_number_sz;					/* size of NumberDigits string in PartyNumber inside divertingNr */
	uchar	orig_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside originalCalledNr or 255 if absent */
	uchar	orig_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside originalCalledNr */
	uchar	orig_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside originalCalledNr) */
	uchar	orig_number_sz;					/* size of NumberDigits string in PartyNumber inside originalCalledNr */
	uchar	first_nb_dig;					/* first octet of first NumberDigits string */
		/*	divertingNr string (if any) is immediately followed by originalCalledNr string if any */
};

#define Ns_div_leg_inf2_counter				((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> counter
#define Ns_div_leg_inf2_reason				((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> reason
#define Ns_div_leg_inf2_div_pres_type		((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> div_presented_nb_type
#define Ns_div_leg_inf2_div_nb_type			((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> div_party_nb_type
#define Ns_div_leg_inf2_div_t_of_nb			((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> div_type_of_nb
#define Ns_div_leg_inf2_div_nb_size			((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> div_number_sz
#define Ns_div_leg_inf2_orig_pres_type		((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_presented_nb_type
#define Ns_div_leg_inf2_orig_nb_type		((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_party_nb_type
#define Ns_div_leg_inf2_orig_t_of_nb		((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_type_of_nb
#define Ns_div_leg_inf2_orig_nb_size		((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_number_sz
#define Ns_div_leg_inf2_nb_str				((struct ns_div_leg_info_2_arg FAR *)p_ssdu_val) -> first_nb_dig

	/* DivertingLegInformation3 operation */

struct ns_div_leg_info_3_arg {
	uchar	pres_allow_ind;								/* presentationAllowedIndicator : TRUE/FALSE */
};

#define Ns_div_leg_inf3_pres_allow				((struct ns_div_leg_info_3_arg FAR *)p_ssdu_val) -> pres_allow_ind

#endif /* end of "Diversion SS supported"} */

/*==========================================================================*/

		/*	Explicit Channel Reservation
		 * ----------------------------- */

#if NS_SS_EXPL_CHAN_RESERVATION == ON	/* Explicit Channel Reservation function supported{ */

		/*	NS interface identifier of Operations */

#define NS_OP_EXP_CH_RES_CREATE				21			/* ExplicitReservationCreationControl */
#define NS_OP_EXP_CH_RES_MANAGE				22			/* ExplicitReservationManagement */
#define NS_OP_EXP_CH_RES_CANCEL				23			/* ExplicitReservationCancel */

		/*	NS interface additional Error identifiers for channel reservation :
			in ReturnError component ('op_err_pb_identifier' field) */

#define SS_ERR_CH_RES_MX_NB_OF_RES			33			/* maximum number of reservations reached */
#define SS_ERR_CH_RES_NO_RES_INV_IND		34			/* no explicit reservation exists or invalid reservation indicator */
#define SS_ERR_CH_RES_UNWANTED_RES			35			/* unwanted reservation created */
#define SS_ERR_CH_RES_IMPLICIT_USED			36			/* implicit reservation used */

		/* structure of data at NS interface */

	/* ExplicitReservationCreationControl operation : ARGUMENT */

struct ns_exp_ch_res_create_arg {
	uchar	control_option;					/* controlOption = ENUMERATED {0, 1, 2} */
};

#define Ns_exp_ch_res_create_option			((struct ns_exp_ch_res_create_arg FAR *)p_ssdu_val) -> control_option

		/* possible values of control option */

#define NS_EXP_CH_RES_OPT_NO_RES			0			/* no reservation required */
#define NS_EXP_CH_RES_OPT_WITH_IND			1			/* reservation required with reservation indicator */
#define NS_EXP_CH_RES_OPT_WITHOUT_IND		2			/* reservation required without reservation indicator */

	/*	ExplicitReservationCreationControl operation : RESULT =
		ExplicitReservationManagement operation : ARGUMENT =
		ExplicitReservationCancel operation : ARGUMENT */

struct ns_exp_ch_res_all_op {
	char	reservation_ind;				/* ReservationIndicator = INTEGER (-128..127) */
};

#define Ns_exp_ch_res_indicator				((struct ns_exp_ch_res_all_op FAR *)p_ssdu_val) -> reservation_ind

#endif /* end of "Explicit Channel Reservation function supported"} */

/*==========================================================================*/

		/*	Three-Party SS (3PTY)
		 * ---------------------- */

#if NS_SS_3_PARTY == ON		/* Three-Party SS supported{ */

		/*	NS interface identifier of Operations */

#define NS_OP_3_PARTY_BEGIN					24			/* Begin3PTY */
#define NS_OP_3_PARTY_END					25			/* End3PTY */

		/* no operation specific data for both operations (ARGUMENT and RESULT are empty) */

#endif /* end of "Three-Party SS supported"} */

/*==========================================================================*/

		/* Conference call, add-on SS (CONF)
		 * --------------------------------- */

#if NS_SS_CONFERENCE == ON	/* Conference call SS supported{ */

		/*	NS interface identifier of Operations */

#define NS_OP_CONF_BEGIN					26			/* begin CONF */
#define NS_OP_CONF_ADD						27			/* add CONF */
#define NS_OP_CONF_SPLIT					28			/* split CONF */
#define NS_OP_CONF_DROP						29			/* drop CONF */
#define NS_OP_CONF_ISOLATE					30			/* isolate CONF */
#define NS_OP_CONF_REATTACH					31			/* reattach CONF */
#define NS_OP_CONF_PARTY_DISC				32			/* party DISC */

		/*	NS interface additional Error identifiers for Conference call :
			in ReturnError component ('op_err_pb_identifier' field) */

#define SS_ERR_CONF_ILL_CONF_ID				28			/* ill conference ID */
#define SS_ERR_CONF_ILL_PARTY_ID			29			/* ill party ID */
#define SS_ERR_CONF_PARTY_NB_EXCEED			30			/* number of parties exceeded */
#define SS_ERR_CONF_NOT_ACTIVE				31			/* not active */
#define SS_ERR_CONF_NOT_ALLOWED				32			/* not allowed */

		/* structure of data at NS interface */

	/* BeginCONF operation : ARGUMENT */

struct ns_conf_begin_arg {
	uchar	conf_size;						/* ConfSize = INTEGER (0..127) */
};

#define Ns_conf_begin_conf_size				((struct ns_conf_begin_arg FAR *)p_ssdu_val) -> conf_size

	/* BeginCONF operation : RESULT */

struct ns_conf_begin_res {
	uchar	conf_id;						/* ConferenceId = INTEGER (0..127) */
	uchar	party_id;						/* PartyId = INTEGER (0..127) or 255 if absent */
};

#define Ns_conf_begin_conf_id				((struct ns_conf_begin_res FAR *)p_ssdu_val) -> conf_id
#define Ns_conf_begin_party_id				((struct ns_conf_begin_res FAR *)p_ssdu_val) -> party_id

	/* AddCONF operation : ARGUMENT */

struct ns_conf_add_arg {
	uchar	conf_id;						/* ConferenceId = INTEGER (0..127) */
};

#define Ns_conf_add_conf_id					((struct ns_conf_add_arg FAR *)p_ssdu_val) -> conf_id

	/*	AddCONF operation RESULT =
		DropCONF operation ARGUMENT =
		IsolateCONF operation ARGUMENT =
		ReattachCONF operation ARGUMENT =
		PartyDISC operation ARGUMENT */

struct ns_conf_add_res_or_other_arg {
	uchar	party_id;						/* PartyId = INTEGER (0..127) */
};

#define Ns_conf_party_id					((struct ns_conf_add_res_or_other_arg FAR *)p_ssdu_val) -> party_id

	/* SplitCONF operation : ARGUMENT = same as BeginCONF RESULT except that party_id is mandatory (not 255) */

#define ns_conf_split_arg	ns_conf_begin_res

#define Ns_conf_split_conf_id				((struct ns_conf_split_arg FAR *)p_ssdu_val) -> conf_id
#define Ns_conf_split_party_id				((struct ns_conf_split_arg FAR *)p_ssdu_val) -> party_id

#endif /* end of Conference call SS supported} */

/*==========================================================================*/

		/*	User-to-User Signalling SS (UUS)
		 * --------------------------------- */

#if NS_SS_USER_USER_EXP == ON	/* explicit requests for User-to-User Signalling SS supported{ */

		/*	NS interface identifier of Operation for UUS SS : UserUserService */

#define NS_OP_UUS_RQ						33

		/*	NS interface additional Error identifiers for UUS */

#define SS_ERR_UUS_NET_REJECT				1			/* rejected by the network */
#define SS_ERR_UUS_USER_REJECT				2			/* rejected by the user */

		/* structure of data at NS interface */

	/* UserUserService operation : ARGUMENT */

struct ns_uus_rq_arg {
	uchar	service;						/* type of service requested :  SERVICE_1, SERVICE_2, SERVICE_3 */
	uchar	preferred;						/* preferred indicator : TRUE/FALSE */
};

#define Ns_uus_rq_service					((struct ns_uus_rq_arg FAR *)p_ssdu_val) -> service
#define Ns_uus_rq_preferred					((struct ns_uus_rq_arg FAR *)p_ssdu_val) -> preferred

	/* possible values of service are defined in ISDN.H file : SERVICE_1, SERVICE_2, SERVICE_3 */

#endif	/* end of "explicit requests for User-to-User Signalling SS supported"} */

/*==========================================================================*/

		/*	Explicit Call Transfer SS (ECT)
		 * -------------------------------- */

#if NS_SS_ECT == ON			/* Explicit Call Transfer supported{ */

		/*	NS interface identifier of Operations */

#define NS_OP_ECT_EXECUTE					34			/* EctExecute */
#define NS_OP_ECT_EXP_EXECUTE				35			/* ExplicitEctExecute */
#define NS_OP_ECT_RQ_SUBADD					36			/* RequestSubaddress */
#define NS_OP_ECT_SUBADD_TRANSF				37			/* SubaddressTransfer */
#define NS_OP_ECT_LINK_ID_RQ				38			/* EctLinkIdRequest */
#define NS_OP_ECT_INFORM					39			/* EctInform */
#define NS_OP_ECT_LOOP_TEST					40			/* EctLoopTest */

		/*	NS interface additional Error identifiers for ECT */

#define SS_ERR_ECT_LK_ID_NOT_ASSIG			128			/* Link ID not assigned by the network */

		/* structure of data at NS interface */

	/* EctInform operation : ARGUMENT */

struct ns_ect_inform_arg {
	uchar	status;							/* Information status : ALERTING / ACTIVE */
	uchar	redir_presented_nb_type;		/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside redirection number or 255 if absent */
	uchar	redir_party_nb_type;			/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside redirection number */
	uchar	redir_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside redirection) */
	uchar	redir_nb_digits_sz;				/* size of redirection number string */
	uchar	first_nb_dig;					/* first digit of redirection number */
		/*	Here is redirection number string if any */
};

#define Ns_ect_info_status					((struct ns_ect_inform_arg FAR *)p_ssdu_val) -> status
#define Ns_ect_info_pres_nb_type			((struct ns_ect_inform_arg FAR *)p_ssdu_val) -> redir_presented_nb_type
#define Ns_ect_info_p_nb_type				((struct ns_ect_inform_arg FAR *)p_ssdu_val) -> redir_party_nb_type
#define Ns_ect_info_type_of_nb				((struct ns_ect_inform_arg FAR *)p_ssdu_val) -> redir_type_of_nb
#define Ns_ect_info_nb_sz					((struct ns_ect_inform_arg FAR *)p_ssdu_val) -> redir_nb_digits_sz
#define Ns_ect_info_first_nb				((struct ns_ect_inform_arg FAR *)p_ssdu_val) -> first_nb_dig

		/* possible values of status */

#define NS_SS_ECT_ALERTING					0		/* alerting */
#define NS_SS_ECT_ACTIVE					1		/* active */

	/* EctLinkIdRequest operation : RESULT */

struct ns_ect_lk_id_rq_res {
	uchar	link_id;						/* Link ID : INTEGER (1..127) */
};

#define Ns_ect_lk_id_rq_link				((struct ns_ect_lk_id_rq_res FAR *)p_ssdu_val) -> link_id

	/* EctLoopTest operation : ARGUMENT */

struct ns_ect_loop_test_arg {
	char	call_trf_id;					/* Call Transfer Identity : INTEGER (-128..127) */
};

#define Ns_ect_loop_test_call_id			((struct ns_ect_loop_test_arg FAR *)p_ssdu_val) -> call_trf_id

	/* EctLoopTest operation : RESULT */

struct ns_ect_loop_test_res {
	uchar	loop_result;					/* loop result : INSUFFICIENT INFORMATION / NO LOOP EXISTS / SIMULTANEOUS TRANSFER */
};

#define Ns_ect_loop_test_result				((struct ns_ect_loop_test_res FAR *)p_ssdu_val) -> loop_result

		/* possible values of loop result */

#define NS_SS_ECT_LOOP_INSUF_INFO			0		/* insufficient information */
#define NS_SS_ECT_NO_LOOP					1		/* no loop exists */
#define NS_SS_ECT_LOOP_SIMULT_TRF			2		/* simultaneous transfer */

	/* ExplicitEctExecute operation : ARGUMENT */

struct ns_ect_explicit_exec_arg {
	uchar	link_id;						/* Link ID : INTEGER (1..127) */
};

#define Ns_ect_explicit_exec_link_id		((struct ns_ect_explicit_exec_arg FAR *)p_ssdu_val) -> link_id

	/* SubaddressTransfer operation : ARGUMENT */

struct ns_ect_subadd_trf_arg {
	uchar	trf_sub_add_type;				/* type of PartySubaddress inside transferred-to subaddress */
	uchar	trf_sub_add_odd_count;			/* oddCountIndicator in transferred-to subaddress : TRUE/FALSE or 255 if absent */
	uchar	trf_sub_address_sz;				/* size of transferred-to subaddress string */
	uchar	first_sub_add;					/* first octet of transferred-to subaddress */
		/*	Here is transferred-to subaddress string */
};

#define Ns_ect_trf_subadd_type				((struct ns_ect_subadd_trf_arg FAR *)p_ssdu_val) -> trf_sub_add_type
#define Ns_ect_trf_subadd_odd_c				((struct ns_ect_subadd_trf_arg FAR *)p_ssdu_val) -> trf_sub_add_odd_count
#define Ns_ect_trf_subadd_sz				((struct ns_ect_subadd_trf_arg FAR *)p_ssdu_val) -> trf_sub_address_sz
#define Ns_ect_trf_subadd_first				((struct ns_ect_subadd_trf_arg FAR *)p_ssdu_val) -> first_sub_add

#endif	/* end of "Explicit Call Transfer supported"} */

/*==========================================================================*/

		/*	Malicious Call Identification SS (MCID)
		 * ---------------------------------------- */

#if NS_SS_MALICIOUS_CALL_ID == ON	/* Malicious Call ID SS supported{ */

		/*	NS interface identifier of Operation for MCID SS : MCID Request */

#define NS_OP_MCID_RQ						41

		/* no operation specific data for operation (ARGUMENT and RESULT are empty) */

#endif	/* end of Malicious Call ID SS supported} */

/*==========================================================================*/

		/*	Freephone SS (FPH)
		 * ------------------- */

#if NS_SS_FREEPHONE == ON		/* Freephone supported{ */

		/*	NS interface identifier of Operations */

#define NS_OP_FPH_CALL						42			/* CallFPH */
#define NS_OP_FPH_MONITOR_T					43			/* Monitor-T-FPH */
#define NS_OP_FPH_FREE_T					44			/* Free-T-FPH */
#define NS_OP_FPH_CALL_T					45			/* Call-T-FPH */

		/* structure of data at NS interface */

	/* CallFPH operation : ARGUMENT (optional) */

struct ns_fph_call_arg {
	uchar	party_nb_type;					/* type of PartyNumber (= called freephone number) */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless */
	uchar	nb_digits_size;					/* size of NumberDigits string inside PartyNumber : maximum = 20 */
	uchar	first_nb_dig;					/* first digit of called freephone number */
		/*	Here is called freephone number string */
};

#define Ns_fph_call_party_nb_t				((struct ns_fph_call_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_fph_call_type_of_nb				((struct ns_fph_call_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_fph_call_nb_sz					((struct ns_fph_call_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_fph_call_first_nb				((struct ns_fph_call_arg FAR *)p_ssdu_val) -> first_nb_dig

	/* Monitor-T-FPH operation : ARGUMENT */

struct ns_fph_monitor_t_arg {
	uchar	q931_ie_sz;						/* size of Q931 IE string */
	uchar	s_u_party_nb_type;				/* type of PartyNumber inside servedUserDestination */
	uchar	s_u_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless */
	uchar	s_u_nb_digits_size;				/* size of NumberDigits string inside inside servedUserDestination : maximum = 20 */
	uchar	queue_identity;					/* queue identity = INTEGER (0..127) or 255 if absent */
	uchar	first_str_oct;					/* first octet of first string */
		/*	Here is Q931 IE string immediately followed by served user destination number string */
};

#define Ns_fph_monitor_q931_ie_sz			((struct ns_fph_monitor_t_arg FAR *)p_ssdu_val) -> q931_ie_sz
#define Ns_fph_monitor_party_nb_t			((struct ns_fph_monitor_t_arg FAR *)p_ssdu_val) -> s_u_party_nb_type
#define Ns_fph_monitor_type_of_nb			((struct ns_fph_monitor_t_arg FAR *)p_ssdu_val) -> s_u_type_of_nb
#define Ns_fph_monitor_nb_sz				((struct ns_fph_monitor_t_arg FAR *)p_ssdu_val) -> s_u_nb_digits_size
#define Ns_fph_monitor_queue_id				((struct ns_fph_monitor_t_arg FAR *)p_ssdu_val) -> queue_identity
#define Ns_fph_monitor_first_str			((struct ns_fph_monitor_t_arg FAR *)p_ssdu_val) -> first_str_oct

	/* Free-T-FPH operation : ARGUMENT */

struct ns_fph_free_t_arg {
	uchar	s_u_party_nb_type;				/* type of PartyNumber inside servedUserDestination */
	uchar	s_u_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless */
	uchar	s_u_nb_digits_size;				/* size of NumberDigits string inside inside servedUserDestination : maximum = 20 */
	uchar	fph_reference;					/* FPH reference = INTEGER (0..127) */
	uchar	first_nb_dig;					/* first digit of served user destination number string */
		/*	Here is served user destination number string */
};

#define Ns_fph_free_party_nb_t				((struct ns_fph_free_t_arg FAR *)p_ssdu_val) -> s_u_party_nb_type
#define Ns_fph_free_type_of_nb				((struct ns_fph_free_t_arg FAR *)p_ssdu_val) -> s_u_type_of_nb
#define Ns_fph_free_nb_sz					((struct ns_fph_free_t_arg FAR *)p_ssdu_val) -> s_u_nb_digits_size
#define Ns_fph_free_fph_ref					((struct ns_fph_free_t_arg FAR *)p_ssdu_val) -> fph_reference
#define Ns_fph_free_first_nb				((struct ns_fph_free_t_arg FAR *)p_ssdu_val) -> first_nb_dig

	/* Call-T-FPH operation : ARGUMENT */

struct ns_fph_call_t_arg {
	uchar	fph_reference;					/* FPH reference = INTEGER (0..127) */
	uchar	party_nb_type;					/* type of PartyNumber (= called freephone number) or 255 if absent */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless */
	uchar	nb_digits_size;					/* size of NumberDigits string inside PartyNumber : maximum = 20 */
	uchar	first_nb_dig;					/* first digit of called freephone number */
		/*	Here is called freephone number string if any */
};

#define Ns_fph_call_t_fph_ref				((struct ns_fph_call_t_arg FAR *)p_ssdu_val) -> fph_reference
#define Ns_fph_call_t_party_nb_t			((struct ns_fph_call_t_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_fph_call_t_type_of_nb			((struct ns_fph_call_t_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_fph_call_t_nb_sz					((struct ns_fph_call_t_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_fph_call_t_first_nb				((struct ns_fph_call_t_arg FAR *)p_ssdu_val) -> first_nb_dig

#endif	/* end of "Freephone supported"} */

/*==========================================================================*/

		/*	Completion of Calls to Busy Subscriber SS (CCBS)
		 * ------------------------------------------------- */

#if NS_SS_CCBS == ON		/* Completion of Calls to Busy Subscriber supported{ */

		/*	NS interface identifier of Operations */

#define NS_OP_CCBS_CALL_INFO_RETAIN			46			/* CallInfoRetain */
#define NS_OP_CCBS_RQ						47			/* CCBSRequest */
#define NS_OP_CCBS_DEACTIVATE				48			/* CCBSDeactivate */
#define NS_OP_CCBS_INTERROGATE				49			/* CCBSInterrogate */
#define NS_OP_CCBS_ERASE					50			/* CCBSErase */
#define NS_OP_CCBS_REMOTE_U_FREE			51			/* CCBSRemoteUserFree */
#define NS_OP_CCBS_CALL						52			/* CCBSCall */
#define NS_OP_CCBS_STATUS_RQ				53			/* CCBSStatusRequest */
#define NS_OP_CCBS_B_FREE					54			/* CCBSBFree */
#define NS_OP_CCBS_ERASE_CALL_LK_ID			55			/* EraseCallLinkageId */
#define NS_OP_CCBS_STOP_ALERTING			56			/* CCBSStopAlerting */

		/*	NS interface additional Error identifiers for CCBS */

#define SS_ERR_CCBS_INV_CALL_LK_ID			129			/* Invalid Call Linkage ID */
#define SS_ERR_CCBS_INV_REFERENCE			130			/* Invalid CCBS Reference */
#define SS_ERR_CCBS_LONG_DENIAL				131			/* long term Denial */
#define SS_ERR_CCBS_SHORT_DENIAL			132			/* short term Denial */
#define SS_ERR_CCBS_ALREADY_ACTIV			133			/* CCBS is already activated */
#define SS_ERR_CCBS_ALREADY_ACCEPT			134			/* already accepted */
#define SS_ERR_CCBS_OUT_QUEUE_FULL			135			/* outgoing CCBS Queue full */
#define SS_ERR_CCBS_CALL_FAIL_NOT_B			136			/* call failure reason not busy */
#define SS_ERR_CCBS_NOT_READY				137			/* not ready for call */

		/* sizing constants for array (matching SEQUENCE OF ASN1 Type) */

#define NS_CCBS_MX_CALL_INFO				5			/* maximum number of CallInformation instances inside CCBSInterrogate operation RESULT */

		/* structure of data at NS interface */

	/* CallInfoRetain and EraseCallLinkageID operations : ARGUMENT (same for both operations) */

struct ns_ccbs_call_inf_eras_lk_arg {
	uchar	linkage_id;						/* call linkage ID = INTEGER (0..127) */
};

#define Ns_ccbs_call_inf_erase_lk_id		((struct ns_ccbs_call_inf_eras_lk_arg FAR *)p_ssdu_val) -> linkage_id

	/* CCBSDeactivate, CCBSCall and CCBSStopAlerting operations : ARGUMENT (same for these operations) */

struct ns_ccbs_dea_call_stop_al_arg {
	uchar	reference;						/* CCBS reference = INTEGER (0..127) */
};

#define Ns_ccbs_dea_call_stop_al_ref		((struct ns_ccbs_dea_call_stop_al_arg FAR *)p_ssdu_val) -> reference

	/* CCBSRequest operation : ARGUMENT */

struct ns_ccbs_request_arg {
	uchar	linkage_id;						/* call linkage ID = INTEGER (0..127) */
};

#define Ns_ccbs_rq_arg_lk_id				((struct ns_ccbs_request_arg FAR *)p_ssdu_val) -> linkage_id

	/* CCBSRequest operation : RESULT */

struct ns_ccbs_request_res {
	uchar	recall_mode;					/* recall mode = ENUMERATED {0, 1} */
	uchar	reference;						/* CCBS reference = INTEGER (0..127) */
};

#define Ns_ccbs_rq_res_recall_m				((struct ns_ccbs_request_res FAR *)p_ssdu_val) -> recall_mode
#define Ns_ccbs_rq_res_ref					((struct ns_ccbs_request_res FAR *)p_ssdu_val) -> reference

		/* possible values of recall mode */

#define NS_SS_CCBS_GLOBAL_RECALL			0		/* global recall */
#define NS_SS_CCBS_SPECIFIC_RECALL			1		/* specific recall */

	/* CCBSStatusRequest operation : ARGUMENT */

struct ns_ccbs_status_rq_arg {
	uchar	recall_mode;					/* recall mode = ENUMERATED {0, 1} */
	uchar	reference;						/* CCBS reference = INTEGER (0..127) */
	uchar	q931_ie_sz;						/* size of Q931 IE string */
	uchar	first_ie_oct;					/* first octet of Q931 IE string */
		/*	Here is Q931 IE string */
};

#define Ns_ccbs_stat_rq_recall_m			((struct ns_ccbs_status_rq_arg FAR *)p_ssdu_val) -> recall_mode
#define Ns_ccbs_stat_rq_ref					((struct ns_ccbs_status_rq_arg FAR *)p_ssdu_val) -> reference
#define Ns_ccbs_stat_rq_ie_sz				((struct ns_ccbs_status_rq_arg FAR *)p_ssdu_val) -> q931_ie_sz
#define Ns_ccbs_stat_rq_first_ie			((struct ns_ccbs_status_rq_arg FAR *)p_ssdu_val) -> first_ie_oct

	/* CCBSStatusRequest operation : RESULT */

struct ns_ccbs_status_rq_res {
	uchar	free;							/* free = TRUE/ busy = FALSE */
};

#define Ns_ccbs_stat_rq_res_free			((struct ns_ccbs_status_rq_res FAR *)p_ssdu_val) -> free

	/* CCBSRemoteUserFree and CCBSBFree operations : ARGUMENT (same for both operations) */

struct ns_ccbs_b_remote_free_arg {
	uchar	recall_mode;					/* recall mode = ENUMERATED {0, 1} */
	uchar	reference;						/* CCBS reference = INTEGER (0..127) */
	uchar	party_nb_type;					/* type of PartyNumber inside addressOfB */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside addressOfB) */
	uchar	nb_digits_size;					/* size of NumberDigits string in PartyNumber inside addressOfB */
	uchar	sub_add_type;					/* type of PartySubaddress or 255 if absent inside addressOfB */
	uchar	sub_add_odd_count;				/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside addressOfB) */
	uchar	sub_address_size;				/* size of PartySubaddress string inside addressOfB */
	uchar	q931_ie_sz;						/* size of Q931 IE string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside addressOfB */
		/*	PartyNumber string is immediately followed by PartySubaddress string if any,
			which is itself immediately followed by Q931 IE string */
};

#define Ns_ccbs_free_recall_m				((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> recall_mode
#define Ns_ccbs_free_ref					((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> reference
#define Ns_ccbs_free_party_nb_t				((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_ccbs_free_type_of_nb				((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_ccbs_free_nb_sz					((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_ccbs_free_sa_type				((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> sub_add_type
#define Ns_ccbs_free_sa_odd_c				((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> sub_add_odd_count
#define Ns_ccbs_free_sa_sz					((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> sub_address_size
#define Ns_ccbs_free_ie_sz					((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> q931_ie_sz
#define Ns_ccbs_free_first_nb				((struct ns_ccbs_b_remote_free_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* CCBSErase operation : ARGUMENT */

struct ns_ccbs_erase_arg {
	uchar	recall_mode;					/* recall mode = ENUMERATED {0, 1} */
	uchar	reference;						/* CCBS reference = INTEGER (0..127) */
	uchar	party_nb_type;					/* type of PartyNumber inside addressOfB */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside addressOfB) */
	uchar	nb_digits_size;					/* size of NumberDigits string in PartyNumber inside addressOfB */
	uchar	sub_add_type;					/* type of PartySubaddress or 255 if absent inside addressOfB */
	uchar	sub_add_odd_count;				/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside addressOfB) */
	uchar	sub_address_size;				/* size of PartySubaddress string inside addressOfB */
	uchar	q931_ie_sz;						/* size of Q931 IE string */
	uchar	reason;							/* CCBS erase reason = ENUMERATED {0, 1, 2, 3} */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside addressOfB */
		/*	PartyNumber string is immediately followed by PartySubaddress string if any,
			which is itself immediately followed by Q931 IE string */
};

#define Ns_ccbs_erase_recall_m				((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> recall_mode
#define Ns_ccbs_erase_ref					((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> reference
#define Ns_ccbs_erase_party_nb_t			((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_ccbs_erase_type_of_nb			((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_ccbs_erase_nb_sz					((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_ccbs_erase_sa_type				((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> sub_add_type
#define Ns_ccbs_erase_sa_odd_c				((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> sub_add_odd_count
#define Ns_ccbs_erase_sa_sz					((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> sub_address_size
#define Ns_ccbs_erase_ie_sz					((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> q931_ie_sz
#define Ns_ccbs_erase_reason				((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> reason
#define Ns_ccbs_erase_first_nb				((struct ns_ccbs_erase_arg FAR *)p_ssdu_val) -> first_nb_digit

		/* possible values of erase reason */

#define NS_SS_CCBS_ERASE_NORMAL_U			0		/* normal unspecified */
#define NS_SS_CCBS_ERASE_T2_TIMEOUT			1		/* T CCBS2 timeout */
#define NS_SS_CCBS_ERASE_T3_TIMEOUT			2		/* T CCBS3 timeout */
#define NS_SS_CCBS_ERASE_CALL_FAIL			3		/* basic call failed */

	/* CCBSInterrogate operation : ARGUMENT */

struct ns_ccbs_interog_arg {
	uchar	reference;						/* CCBS reference = INTEGER (0..127) or 255 if absent */
	uchar	party_nb_type;					/* type of PartyNumber inside partyNumberOfA or 255 if absent */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside partyNumberOfA) */
	uchar	nb_digits_size;					/* size of NumberDigits string inside partyNumberOfA */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside partyNumberOfA */
		/*	Here is PartyNumber string if any */
};

#define Ns_ccbs_interog_ref					((struct ns_ccbs_interog_arg FAR *)p_ssdu_val) -> reference
#define Ns_ccbs_interog_party_nb_t			((struct ns_ccbs_interog_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_ccbs_interog_type_of_nb			((struct ns_ccbs_interog_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_ccbs_interog_nb_sz				((struct ns_ccbs_interog_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_ccbs_interog_first_nb			((struct ns_ccbs_interog_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* CCBSInterrogate operation : RESULT */

struct ns_ccbs_interog_res {
	ushort	first_call_info;				/* offset of first instance of CallInformation (in callDetails) or 0 if no call detail */
	uchar	recall_mode;					/* recall mode = ENUMERATED {0, 1} */
};

#define Ns_ccbs_interog_recall_m			((struct ns_ccbs_interog_res FAR *)p_ssdu_val) -> recall_mode
#define Ns_ccbs_interog_first_info			((struct ns_ccbs_interog_res FAR *)p_ssdu_val) -> first_call_info

		/* CallInformation structure */

struct ns_ccbs_call_info {
	ushort	next_call_info;					/* offset for next instance */
	uchar	reference;						/* CCBS reference = INTEGER (0..127) */
	uchar	OfB_party_nb_type;				/* type of PartyNumber inside addressOfB */
	uchar	OfB_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside addressOfB) */
	uchar	OfB_nb_digits_size;				/* size of NumberDigits string in PartyNumber inside addressOfB */
	uchar	OfB_sub_add_type;				/* type of PartySubaddress or 255 if absent inside addressOfB */
	uchar	OfB_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside addressOfB) */
	uchar	OfB_sub_address_size;			/* size of PartySubaddress string inside addressOfB */
	uchar	q931_ie_sz;						/* size of Q931 IE string */
	uchar	OfA_sub_add_type;				/* type of PartySubaddress or 255 if absent inside subAddressOfA */
	uchar	OfA_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside subAddressOfA) */
	uchar	OfA_sub_address_size;			/* size of PartySubaddress string inside subAddressOfA */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside addressOfB */
		/*	Here are PartyNumber and PartySubaddress (if any) strings inside addressOfB,
			then Q931 IE string, then PartySubaddress string inside subAddressOfA if any */
};

#define Ns_ccbs_next_call_info				((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> next_call_info
#define Ns_ccbs_call_info_ref				((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> reference
#define Ns_ccbs_call_info_B_p_nb_t			((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfB_party_nb_type
#define Ns_ccbs_call_info_B_t_of_nb			((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfB_type_of_nb
#define Ns_ccbs_call_info_B_nb_sz			((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfB_nb_digits_size
#define Ns_ccbs_call_info_B_sa_t			((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfB_sub_add_type
#define Ns_ccbs_call_info_B_sa_odd_c		((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfB_sub_add_odd_count
#define Ns_ccbs_call_info_B_sa_sz			((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfB_sub_address_size
#define Ns_ccbs_call_info_ie_sz				((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> q931_ie_sz
#define Ns_ccbs_call_info_A_sa_t			((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfA_sub_add_type
#define Ns_ccbs_call_info_A_sa_odd_c		((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfA_sub_add_odd_count
#define Ns_ccbs_call_info_A_sa_sz			((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> OfA_sub_address_size
#define Ns_ccbs_call_info_first_nb			((struct ns_ccbs_call_info FAR *)p_ssdu_val) -> first_nb_digit

		/*	CCBS : interworking with private ISDNs
		 * --------------------------------------- */

		/*	NS interface identifier of Operations */

#define NS_OP_CCBS_T_RQ						57			/* CCBS-T-Request */
#define NS_OP_CCBS_T_CALL					58			/* CCBS-T-Call */
#define NS_OP_CCBS_T_SUSPEND				59			/* CCBS-T-Suspend */
#define NS_OP_CCBS_T_RESUME					60			/* CCBS-T-Resume */
#define NS_OP_CCBS_T_REMOTE_FREE			61			/* CCBS-T-RemoteUserFree */
#define NS_OP_CCBS_T_AVAILABLE				62			/* CCBS-T-Available */

		/*	NS interface additional Error identifiers for CCBS */

#define SS_ERR_CCBS_T_LONG_DENIAL			138			/* long term Denial */
#define SS_ERR_CCBS_T_SHORT_DENIAL			139			/* short term Denial */

		/* structure of data at NS interface : both ARGUMENT and RESULT are empty
			for all operations except for CCBS-T-Request operation */

	/* CCBS-T-Request operation : ARGUMENT */

struct ns_ccbs_t_rq_arg {
	uchar	dest_party_nb_type;				/* type of PartyNumber inside destinationAddress */
	uchar	dest_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside destinationAddress) */
	uchar	dest_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside destinationAddress */
	uchar	dest_sub_add_type;				/* type of PartySubaddress or 255 if absent inside destinationAddress */
	uchar	dest_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside destinationAddress) */
	uchar	dest_sub_address_size;			/* size of PartySubaddress string inside destinationAddress */
	uchar	q931_ie_sz;						/* size of Q931 IE string */
	uchar	retention_supp;					/* retention supported = TRUE / FALSE or 255 if absent */
	uchar	pres_allow_ind;					/* presentationAllowedIndicator : TRUE/FALSE or 255 if absent */
	uchar	orig_party_nb_type;				/* type of PartyNumber inside originatingAddress or 255 if absent (no originatingaddress) */
	uchar	orig_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside originatingAddress) */
	uchar	orig_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside originatingAddress */
	uchar	orig_sub_add_type;				/* type of PartySubaddress or 255 if absent inside originatingAddress */
	uchar	orig_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside originatingAddress) */
	uchar	orig_sub_address_size;			/* size of PartySubaddress string inside originatingAddress */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside destinationaddress */
		/*	Here are PartyNumber and PartySubaddress (if any) strings inside destinationaddress,
			then Q931 IE string, then PartyNumber and PartySubaddress strings inside originatingaddress if any */
};

#define Ns_ccbs_t_rq_dest_p_nb_t			((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> dest_party_nb_type
#define Ns_ccbs_t_rq_dest_t_of_nb			((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> dest_type_of_nb
#define Ns_ccbs_t_rq_dest_nb_sz				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> dest_nb_digits_size
#define Ns_ccbs_t_rq_dest_sa_t				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> dest_sub_add_type
#define Ns_ccbs_t_rq_dest_sa_odd_c			((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> dest_sub_add_odd_count
#define Ns_ccbs_t_rq_dest_sa_sz				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> dest_sub_address_size
#define Ns_ccbs_t_rq_q931_ie_sz				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> q931_ie_sz
#define Ns_ccbs_t_rq_retention				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> retention_supp
#define Ns_ccbs_t_rq_pres_allow				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> pres_allow_ind
#define Ns_ccbs_t_rq_orig_p_nb_t			((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> orig_party_nb_type
#define Ns_ccbs_t_rq_orig_t_of_nb			((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> orig_type_of_nb
#define Ns_ccbs_t_rq_orig_nb_sz				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> orig_nb_digits_size
#define Ns_ccbs_t_rq_orig_sa_t				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> orig_sub_add_type
#define Ns_ccbs_t_rq_orig_sa_odd_c			((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> orig_sub_add_odd_count
#define Ns_ccbs_t_rq_orig_sa_sz				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> orig_sub_address_size
#define Ns_ccbs_t_rq_first_nb				((struct ns_ccbs_t_rq_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* CCBS-T-Request operation : RESULT */

struct ns_ccbs_t_rq_res {
	uchar	retention_supp;					/* retention supported = TRUE / FALSE or 255 if absent */
};

#define Ns_ccbs_t_rq_res_retention			((struct ns_ccbs_t_rq_res FAR *)p_ssdu_val) -> retention_supp

#endif	/* end of "Completion of Calls to Busy Subscriber supported"} */

/*==========================================================================*/

		/* operations specific to supplementary Service interactions
		 * --------------------------------------------------------- */

#if NS_SS_INTERACTIONS == ON	/* Supplementary service interactions{ */

		/*	NS interface identifier of Operations */

#define NS_OP_INTERACT_ID_OF_CHARGE			63			/* IdentificationOfCharge : interaction between AOC and (Diversion (CFB/CFU/CFNR/CD) or ECT) SS */
#define NS_OP_INTERACT_ID_CONFEREE			64			/* IdentifyConferee : interaction between CONF and (TP or HOLD or UUS or ECT) SS */
#define NS_OP_INTERACT_UUS_RQ				65			/* UUSRequest : interaction between UUS and Diversion (CFB/CFU/CFNR/CD) SS */

		/* structure of data at NS interface */

#if (NS_SS_AOC_E == ON)	&& ((NS_SS_DIVERSION == ON) || (NS_SS_ECT == ON))	/* AOC-E SS and (Diversion or ECT SS) supported */

	/* IdentificationOfCharge operation : ARGUMENT */

struct ns_interact_id_of_charge_arg {
	uchar	charg_assoc_type;				/* type of ChargingAssociation */
	short	charg_identifier;				/* chargeIdentifier in ChargingAssociation : INTEGER (-32768..32767) */
	uchar	party_nb_type;					/* type of PartyNumber */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless */
	uchar	nb_digits_size;					/* size of NumberDigits string inside PartyNumber : maximum = 20 */
	uchar	first_nb_dig;					/* first octet of NumberDigits string */
		/* Here is NumberDigits string if any */
};

#define Ns_inter_id_charg_assoc_type		((struct ns_interact_id_of_charge_arg FAR *)p_ssdu_val) -> charg_assoc_type
#define Ns_inter_id_charg_id				((struct ns_interact_id_of_charge_arg FAR *)p_ssdu_val) -> charg_identifier
#define Ns_inter_id_charg_p_nb_type			((struct ns_interact_id_of_charge_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_inter_id_charg_type_of_nb		((struct ns_interact_id_of_charge_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_inter_id_charg_nb_sz				((struct ns_interact_id_of_charge_arg FAR *)p_ssdu_val) -> nb_digits_size
#define Ns_inter_id_charg_first_nb			((struct ns_interact_id_of_charge_arg FAR *)p_ssdu_val) -> first_nb_dig

#endif		/* end of AOC-E SS and (Diversion or ECT SS) supported */


#if NS_SS_CONFERENCE == ON	/* Conference call SS supported */

	/*	IdentifyConferee operation ARGUMENT = DropCONF operation ARGUMENT
			see above : struct ns_conf_add_res_or_other_arg */

#endif /* end of Conference call SS supported */


#if (NS_SS_DIVERSION == ON) && (NS_SS_USER_USER_EXP == ON)	/* Diversion SS and UUS SS supported */

	/*	UUSRequest operation ARGUMENT = UserUserService operation ARGUMENT
			see above : struct ns_uus_rq_arg */

#endif	/* end of Diversion SS and UUS SS supported */


#endif		/* end of Supplementary service interactions} */

/*==========================================================================

			- Q-SIG specific SS and operations -
*/

#if F_QSI == ON /* { */

	/*	List of octets contained in SPDU and passed transparently to SSDU
		or contained in SSDU and passed transparently to SPDU.
		This is used for "extension" inside Q-SIG operations ARGUMENT or RESULT
		that contains manufacturer-specific information.
		IT MAY MATCH FOLLOWING ASN1 TYPES :
			1) Extension
			2) SEQUENCE OF Extension
			3) CHOICE {[n1]IMPLICIT Extension, [n2]IMPLICIT SEQUENCE OF Extension}
			4) CHOICE {NULL, [n1]IMPLICIT Extension, [n2]IMPLICIT SEQUENCE OF Extension}

		The list of octets shall contain the whole "TLV" coding of these types
		and no checking shall be made.
	*/

struct ns_qsi_transparent_extension {
	uchar	size;							/* size of extension string */
	uchar	first_oct;						/* first octet of extension string */
		/* Here is extension string */
};

#define Ns_qsi_tsp_extension_sz			((struct ns_qsi_transparent_extension FAR *)p_ssdu_val) -> size
#define Ns_qsi_tsp_first_extension		((struct ns_qsi_transparent_extension FAR *)p_ssdu_val) -> first_oct

		/*	NS interface common Error identifier in ReturnError component ('op_err_pb_identifier' field) */

#define SS_ERR_QSI_UNSPECIFIED				150						/* unspecified */
#define SS_ERR_QSI_TMP_NOT_AVAIL			151						/* temporarily unavailable */

		/* possible types of Name */

#define NS_SS_QSI_NAME_ALLOWED_SIMP			0						/* namePresentationAllowedSimple */
#define NS_SS_QSI_NAME_ALLOWED_EXT			1						/* namePresentationAllowedExtended */
#define NS_SS_QSI_NAME_RESTRICT_SIMP		2						/* namePresentationRestrictedSimple */
#define NS_SS_QSI_NAME_RESTRICT_EXT			3						/* namePresentationRestrictedExtended */
#define NS_SS_QSI_NAME_NOT_AVAIL			4						/* NameNotAvailable */

#define NS_SS_QSI_MX_NAME_TYPE				NS_SS_QSI_NAME_NOT_AVAIL	/* maximum permitted value */

/*==========================================================================*/

		/*	NS interface additional Error identifier */

#define SS_ERR_QSI_NOT_AUTH						152			/* not authorized */

		/*	Diversion SS, including 4 services : Call Forwarding Unconditional (CFU),
		 *	Call Forwarding Busy (CFB), Call Forwarding No Reply (CFNR), Call Deflection (CD)
		 * ------------------------------------------------------------------ */

#if NS_SS_DIVERSION == ON /* Diversion SS supported{ */

		/*	NS interface identifiers of Operations for Diversion SS */

#define NS_OP_QSI_ACT_DIVERSION					70			/* activate Diversion */
#define NS_OP_QSI_DEACT_DIVERSION				71			/* deactivate Diversion */
#define NS_OP_QSI_INTEROG_DIVERSION				72			/* interrogate Diversion */
#define NS_OP_QSI_CHECK_RESTRICT				73			/* check Restriction */
#define NS_OP_QSI_CALL_REROUTING				74			/* call Rerouting */
#define NS_OP_QSI_DIVERTING_LEG_I_1				75			/* diverting Leg Information 1 */
#define NS_OP_QSI_DIVERTING_LEG_I_2				76			/* diverting Leg Information 2 */
#define NS_OP_QSI_DIVERTING_LEG_I_3				77			/* diverting Leg Information 3 */
#define NS_OP_QSI_CFNR_DIV_LEG_FAIL				78			/* CFNR diverted Leg Failed */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/* ActivateDiversionQ operation : ARGUMENT */

struct ns_qsi_activate_div_arg {
	uchar	procedure;						/* procedure : ENUMERATED {0, 1, 2} */
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	div_party_nb_type;				/* type of PartyNumber inside divertedToAddress */
	uchar	div_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside divertedToAddress) */
	uchar	div_nb_digits_size;				/* size of NumberDigits string in PartyNumber inside divertedToAddress */
	uchar	div_sub_add_type;				/* type of PartySubaddress or 255 if absent inside divertedToAddress */
	uchar	div_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside divertedToAddress) */
	uchar	div_sub_address_size;			/* size of PartySubaddress string inside divertedToAddress */
	uchar	srv_u_party_nb_type;			/* type of PartyNumber inside servedUserNr */
	uchar	srv_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	srv_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside servedUserNr */
	uchar	activ_u_party_nb_type;			/* type of PartyNumber inside activatingUserNr */
	uchar	activ_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside activatingUserNr) */
	uchar	activ_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside activatingUserNr */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside divertedToAddress */
		/*	PartyNumber string is immediately followed by PartySubaddress string inside divertedToAddress if any,
			which is itself immediately followed by PartyNumber string inside servedUserNr,
			immediately followed by PartyNumber string inside activatingUserNr,
			immediately followed by extension string if any */
};

#define Ns_qsi_act_div_procedure			((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> procedure
#define Ns_qsi_act_div_basic_service		((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> basic_service
#define Ns_qsi_act_div_p_nb_type			((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> div_party_nb_type
#define Ns_qsi_act_div_type_of_nb			((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> div_type_of_nb
#define Ns_qsi_act_div_nb_size				((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> div_nb_digits_size
#define Ns_qsi_act_div_sa_type				((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> div_sub_add_type
#define Ns_qsi_act_div_sa_odd_count			((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> div_sub_add_odd_count
#define Ns_qsi_act_div_sa_size				((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> div_sub_address_size
#define Ns_qsi_act_div_s_u_p_nb_type		((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> srv_u_party_nb_type
#define Ns_qsi_act_div_s_u_type_of_nb		((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> srv_u_type_of_nb
#define Ns_qsi_act_div_s_u_nb_size			((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> srv_u_nb_digits_size
#define Ns_qsi_act_div_a_u_p_nb_type		((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> activ_u_party_nb_type
#define Ns_qsi_act_div_a_u_type_of_nb		((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> activ_u_type_of_nb
#define Ns_qsi_act_div_a_u_nb_size			((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> activ_u_nb_digits_size
#define Ns_qsi_act_div_extension_size		((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_act_div_first_str			((struct ns_qsi_activate_div_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* ActivateDiversionQ operation : RESULT : this is simply the list of octets which is passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure is used. */

	/* DeactivateDiversionQ operation : ARGUMENT */

struct ns_qsi_dea_div_arg {
	uchar	procedure;						/* procedure : ENUMERATED {0, 1, 2} */
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	srv_u_party_nb_type;			/* type of PartyNumber inside servedUserNr */
	uchar	srv_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	srv_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside servedUserNr */
	uchar	dea_u_party_nb_type;			/* type of PartyNumber inside deactivatingUserNr */
	uchar	dea_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside deactivatingUserNr) */
	uchar	dea_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside deactivatingUserNr */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside servedUserNr */
		/*	Here is PartyNumber string inside servedUserNr,
			immediately followed by PartyNumber string inside deactivatingUserNr,
			immediately followed by extension string if any */
};

#define Ns_qsi_dea_div_procedure			((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> procedure
#define Ns_qsi_dea_div_basic_service		((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> basic_service
#define Ns_qsi_dea_div_s_u_p_nb_type		((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> srv_u_party_nb_type
#define Ns_qsi_dea_div_s_u_type_of_nb		((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> srv_u_type_of_nb
#define Ns_qsi_dea_div_s_u_nb_size			((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> srv_u_nb_digits_size
#define Ns_qsi_dea_div_d_u_p_nb_type		((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> dea_u_party_nb_type
#define Ns_qsi_dea_div_d_u_type_of_nb		((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> dea_u_type_of_nb
#define Ns_qsi_dea_div_d_u_nb_size			((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> dea_u_nb_digits_size
#define Ns_qsi_dea_div_extension_size		((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_dea_div_first_str			((struct ns_qsi_dea_div_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* DeactivateDiversionQ operation : RESULT : this is simply the list of octets which is passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure is used. */

	/*	InterrogateDiversionQ operation ARGUMENT : same as in DeactivateDiversionQ operation
		except that basic service is optional (255 if absent) */

#define ns_qsi_interrog_div_arg				ns_qsi_dea_div_arg

	/*	InterrogateDiversionQ operation RESULT : a list of IntResult structures (0 to NS_DIV_MX_INT_RESULT) */

#define ns_qsi_interrog_div_res				ns_qsi_diversion_int_result

struct ns_qsi_diversion_int_result {
	ushort	next_int_result;				/* offset for next instance */
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	procedure;						/* procedure : ENUMERATED {0, 1, 2} */
	uchar	remote_enabled;					/* remoteEnabled : TRUE/FALSE or 255 if absent */
	uchar	srv_u_party_nb_type;			/* type of PartyNumber inside servedUserNr */
	uchar	srv_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	srv_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside servedUserNr */
	uchar	div_party_nb_type;				/* type of PartyNumber inside divertedToAddress */
	uchar	div_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside divertedToAddress) */
	uchar	div_nb_digits_size;				/* size of NumberDigits string in PartyNumber inside divertedToAddress */
	uchar	div_sub_add_type;				/* type of PartySubaddress or 255 if absent inside divertedToAddress */
	uchar	div_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside divertedToAddress) */
	uchar	div_sub_address_size;			/* size of PartySubaddress string inside forwardedToAddress */
	uchar	extension_size;					/* size of "extension" string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside servedUserNr */
		/*	servedUserNr string is immediately followed by PartyNumber string inside divertedToAddress,
			which is itself immediately followed by PartySubaddress string inside divertedToAddress if any,
			immediately followed by extension string if any. */
};

#define Ns_qsi_int_res_div_service			((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> basic_service
#define Ns_qsi_int_res_div_procedure		((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> procedure
#define Ns_qsi_int_res_div_remote_e			((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> remote_enabled
#define Ns_qsi_int_res_div_s_u_p_nb_t		((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> srv_u_party_nb_type
#define Ns_qsi_int_res_div_s_u_t_of_nb		((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> srv_u_type_of_nb
#define Ns_qsi_int_res_div_s_u_nb_sz		((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> srv_u_nb_digits_size
#define Ns_qsi_int_res_div_p_nb_t			((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> div_party_nb_type
#define Ns_qsi_int_res_div_t_of_nb			((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> div_type_of_nb
#define Ns_qsi_int_res_div_nb_sz			((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> div_nb_digits_size
#define Ns_qsi_int_res_div_sa_t				((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> div_sub_add_type
#define Ns_qsi_int_res_div_sa_odd_c			((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> div_sub_add_odd_count
#define Ns_qsi_int_res_div_sa_sz			((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> div_sub_address_size
#define Ns_qsi_int_res_div_ext_sz			((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_int_res_div_first_str		((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> first_nb_digit
#define Ns_qsi_int_res_div_next				((struct ns_qsi_diversion_int_result FAR *)p_ssdu_val) -> next_int_result

	/* CheckRestriction operation : ARGUMENT */

struct ns_qsi_chk_rest_div_arg {
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	srv_u_party_nb_type;			/* type of PartyNumber inside servedUserNr */
	uchar	srv_u_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	srv_u_nb_digits_size;			/* size of NumberDigits string in PartyNumber inside servedUserNr */
	uchar	div_party_nb_type;				/* type of PartyNumber inside divertedToNr */
	uchar	div_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside divertedToNr) */
	uchar	div_nb_digits_size;				/* size of NumberDigits string in PartyNumber inside divertedToNr */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside servedUserNr */
		/*	Here is PartyNumber string inside servedUserNr,
			immediately followed by PartyNumber string inside divertedToNr,
			immediately followed by extension string if any */
};

#define Ns_qsi_chk_div_basic_service		((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> basic_service
#define Ns_qsi_chk_div_s_u_p_nb_type		((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> srv_u_party_nb_type
#define Ns_qsi_chk_div_s_u_type_of_nb		((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> srv_u_type_of_nb
#define Ns_qsi_chk_div_s_u_nb_size			((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> srv_u_nb_digits_size
#define Ns_qsi_chk_div_p_nb_type			((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> div_party_nb_type
#define Ns_qsi_chk_div_type_of_nb			((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> div_type_of_nb
#define Ns_qsi_chk_div_nb_size				((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> div_nb_digits_size
#define Ns_qsi_chk_div_extension_size		((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_chk_div_first_str			((struct ns_qsi_chk_rest_div_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* CheckRestriction operation : RESULT : this is simply the list of octets which is passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure is used. */

	/* CallRerouting operation : ARGUMENT */

struct ns_qsi_rerouting_div_arg {
	uchar	reason;							/* rerouting reason : ENUMERATED {0, 1, .. , 5} */
	uchar	counter;						/* diversion counter : INTEGER (1..15) */
	uchar	called_party_nb_type;			/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside calledAddress */
	uchar	called_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside calledAddress) */
	uchar	called_number_digits_sz;		/* size of PartyNumber string inside calledAddress */
	uchar	called_sub_add_type;			/* type of PartySubaddress or 255 if absent (inside calledAddress) */
	uchar	called_sub_add_odd_count;		/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside calledAddress) */
	uchar	called_sub_address_sz;			/* size of PartySubaddress string inside calledAddress */
	uchar	qsig_ie_sz;						/* size of Q-SIG IE string */
	uchar	subscription_option;			/* subscriptionOption : ENUMERATED {0, 1, 2} */
	uchar	last_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside lastReroutingNr */
	uchar	last_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside lastReroutingNr */
	uchar	last_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside lastReroutingNr) */
	uchar	last_number_digits_sz;			/* size of PartyNumber string inside lastReroutingNr */
	uchar	calling_sub_add_type;			/* type of PartySubaddress or 255 if absent (inside callingPartySubaddress) */
	uchar	calling_sub_add_odd_count;		/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside callingPartySubaddress) */
	uchar	calling_sub_address_sz;			/* size of PartySubaddress string inside callingPartySubaddress */
	uchar	calling_presented_nb_type;		/* type of PresentedNumberScreened (presentationAllowedNumber .. presentationRestrictedNumber) inside callingNumber */
	uchar	calling_party_nb_type;			/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside callingNumber */
	uchar	calling_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside callingNumber) */
	uchar	calling_number_digits_sz;		/* size of PartyNumber string inside callingNumber */
	uchar	calling_screening_ind;			/* ScreeningIndicator inside callingNumber or meaningless : ENUMERATED {0, 1, 2, 3} */
	uchar	calling_name_type;				/* Type of Name (namePresentationAllowedSimple .. nameNotAvailable) inside callingName or 255 if absent */
	uchar	calling_name_character;			/* CharacterSet or meaningless inside callingName */
	uchar	calling_name_sz;				/* size of nameData string inside callingName : in range [1..50] */
	uchar	orig_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside originalCalledNr */
	uchar	orig_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside originalCalledNr */
	uchar	orig_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside originalCalledNr) */
	uchar	orig_number_digits_sz;			/* size of PartyNumber string inside originalCalledNr */
	uchar	redir_name_character;			/* CharacterSet inside redirectingName */
	uchar	redir_name_sz;					/* size of nameData string inside redirectingName : in range [1..50] or 0 if absent */
	uchar	orig_name_character;			/* CharacterSet inside originalCalledName */
	uchar	orig_name_sz;					/* size of nameData string inside originalCalledName : in range [1..50] or 0 if absent */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str_oct;					/* first octet of first string */
		/*	Here are PartyNumber and PartySubaddress (if any) strings inside calledAddress,
			then Q-SIG IE string, then lastReroutingNr string, then callingPartySubaddress string if any,
			then callingNumber string, then callingName string if any, then originalCalledNr string if any,
			then redirectingName string, then originalCalledName string if any, then extension string if any.
		*/
};

#define Ns_qsi_rerout_reason					((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> reason
#define Ns_qsi_rerout_counter					((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> counter
#define Ns_qsi_rerout_called_nb_type			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> called_party_nb_type
#define Ns_qsi_rerout_called_t_of_nb			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> called_type_of_nb
#define Ns_qsi_rerout_called_nb_size			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> called_number_digits_sz
#define Ns_qsi_rerout_called_sa_type			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> called_sub_add_type
#define Ns_qsi_rerout_called_sa_odd_c			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> called_sub_add_odd_count
#define Ns_qsi_rerout_called_sa_size			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> called_sub_address_sz
#define Ns_qsi_rerout_ie_sz						((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> qsig_ie_sz
#define Ns_qsi_rerout_subscription				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> subscription_option
#define Ns_qsi_rerout_last_pres_t				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> last_presented_nb_type
#define Ns_qsi_rerout_last_nb_type				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> last_party_nb_type
#define Ns_qsi_rerout_last_t_of_nb				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> last_type_of_nb
#define Ns_qsi_rerout_last_nb_size				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> last_number_digits_sz
#define Ns_qsi_rerout_calling_sa_type			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_sub_add_type
#define Ns_qsi_rerout_calling_sa_odd_c			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_sub_add_odd_count
#define Ns_qsi_rerout_calling_sa_size			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_sub_address_sz
#define Ns_qsi_rerout_calling_pres_t			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_presented_nb_type
#define Ns_qsi_rerout_calling_nb_type			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_party_nb_type
#define Ns_qsi_rerout_calling_t_of_nb			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_type_of_nb
#define Ns_qsi_rerout_calling_nb_size			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_number_digits_sz
#define Ns_qsi_rerout_calling_scr_ind			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_screening_ind
#define Ns_qsi_rerout_calling_nm_type			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_name_type
#define Ns_qsi_rerout_calling_nm_char			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_name_character
#define Ns_qsi_rerout_calling_nm_size			((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> calling_name_sz
#define Ns_qsi_rerout_orig_pres_t				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> orig_presented_nb_type
#define Ns_qsi_rerout_orig_nb_type				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> orig_party_nb_type
#define Ns_qsi_rerout_orig_t_of_nb				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> orig_type_of_nb
#define Ns_qsi_rerout_orig_nb_size				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> orig_number_digits_sz
#define Ns_qsi_rerout_redir_nm_char				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> redir_name_character
#define Ns_qsi_rerout_redir_nm_size				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> redir_name_sz
#define Ns_qsi_rerout_orig_nm_char				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> orig_name_character
#define Ns_qsi_rerout_orig_nm_size				((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> orig_name_sz
#define Ns_qsi_rerout_ext_size					((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_rerout_first_str					((struct ns_qsi_rerouting_div_arg FAR *)p_ssdu_val) -> first_str_oct

	/* CallRerouting operation : RESULT : this is simply the list of octets which is passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure is used. */

	/* DivertingLegInformation1 operation */

struct ns_qsi_div_leg_info_1_arg {
	uchar	reason;							/* diversion reason : ENUMERATED {0, 1, .. , 5} */
	uchar	subscription_option;			/* subscriptionOption : ENUMERATED {0, 1, 2} */
	uchar	presented_nb_type;				/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside nominatedNr */
	uchar	party_nb_type;					/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside nominatedNr */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside nominatedNr) */
	uchar	number_digits_sz;				/* size of NumberDigits string in PartyNumber inside nominatedNr */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_dig;					/* first octet of nominatedNr string */
		/*	Here are nominatedNr string if any immediately followed by extension string if any */
};

#define Ns_qsi_leg_inf1_reason				((struct ns_qsi_div_leg_info_1_arg FAR *)p_ssdu_val) -> reason
#define Ns_qsi_leg_inf1_subscription		((struct ns_qsi_div_leg_info_1_arg FAR *)p_ssdu_val) -> subscription_option
#define Ns_qsi_leg_inf1_pres_type			((struct ns_qsi_div_leg_info_1_arg FAR *)p_ssdu_val) -> presented_nb_type
#define Ns_qsi_leg_inf1_nb_type				((struct ns_qsi_div_leg_info_1_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_qsi_leg_inf1_t_of_nb				((struct ns_qsi_div_leg_info_1_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_qsi_leg_inf1_nb_size				((struct ns_qsi_div_leg_info_1_arg FAR *)p_ssdu_val) -> number_digits_sz
#define Ns_qsi_leg_inf1_ext_size			((struct ns_qsi_div_leg_info_1_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_leg_inf1_nb_str				((struct ns_qsi_div_leg_info_1_arg FAR *)p_ssdu_val) -> first_nb_dig

	/* DivertingLegInformation2 operation */

struct ns_qsi_div_leg_info_2_arg {
	uchar	counter;						/* diversion counter : INTEGER (1..15) */
	uchar	reason;							/* diversion reason : ENUMERATED {0, 1, .. , 5} */
	uchar	div_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside divertingNr or 255 if absent */
	uchar	div_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside divertingNr */
	uchar	div_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside divertingNr) */
	uchar	div_number_sz;					/* size of NumberDigits string in PartyNumber inside divertingNr */
	uchar	orig_presented_nb_type;			/* type of PresentedNumberUnscreened (presentationAllowedNumber .. presentationRestrictedNumber) inside originalCalledNr or 255 if absent */
	uchar	orig_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside originalCalledNr */
	uchar	orig_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside originalCalledNr) */
	uchar	orig_number_sz;					/* size of NumberDigits string in PartyNumber inside originalCalledNr */
	uchar	redir_name_character;			/* CharacterSet inside redirectingName */
	uchar	redir_name_sz;					/* size of nameData string inside redirectingName : in range [1..50] or 0 if absent */
	uchar	orig_name_character;			/* CharacterSet inside originalCalledName */
	uchar	orig_name_sz;					/* size of nameData string inside originalCalledName : in range [1..50] or 0 if absent */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str;						/* first octet of first string */
		/*	Here are divertingNr string if any, then originalCalledNr string if any,
			then redirectingName string if any, then originalCalledName string if any,
			then extension string if any. */
};

#define Ns_qsi_leg_inf2_counter				((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> counter
#define Ns_qsi_leg_inf2_reason				((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> reason
#define Ns_qsi_leg_inf2_div_pres_type		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> div_presented_nb_type
#define Ns_qsi_leg_inf2_div_nb_type			((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> div_party_nb_type
#define Ns_qsi_leg_inf2_div_t_of_nb			((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> div_type_of_nb
#define Ns_qsi_leg_inf2_div_nb_size			((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> div_number_sz
#define Ns_qsi_leg_inf2_orig_pres_type		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_presented_nb_type
#define Ns_qsi_leg_inf2_orig_nb_type		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_party_nb_type
#define Ns_qsi_leg_inf2_orig_t_of_nb		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_type_of_nb
#define Ns_qsi_leg_inf2_orig_nb_size		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_number_sz
#define Ns_qsi_leg_inf2_redir_nm_char		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> redir_name_character
#define Ns_qsi_leg_inf2_redir_nm_size		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> redir_name_sz
#define Ns_qsi_leg_inf2_orig_nm_char		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_name_character
#define Ns_qsi_leg_inf2_orig_nm_size		((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> orig_name_sz
#define Ns_qsi_leg_inf2_ext_size			((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_leg_inf2_first_str			((struct ns_qsi_div_leg_info_2_arg FAR *)p_ssdu_val) -> first_str

	/* DivertingLegInformation3 operation */

struct ns_qsi_div_leg_info_3_arg {
	uchar	pres_allow_ind;					/* presentationAllowedIndicator : TRUE/FALSE */
	uchar	redir_name_character;			/* CharacterSet inside redirectionName */
	uchar	redir_name_sz;					/* size of nameData string inside redirectionName : in range [1..50] or 0 if absent */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str;						/* first octet of first string */
		/*	Here are redirectionName string if any immediately followed by extension string if any */
};

#define Ns_qsi_leg_inf3_pres_allow			((struct ns_qsi_div_leg_info_3_arg FAR *)p_ssdu_val) -> pres_allow_ind
#define Ns_qsi_leg_inf3_redir_char			((struct ns_qsi_div_leg_info_3_arg FAR *)p_ssdu_val) -> redir_name_character
#define Ns_qsi_leg_inf3_redir_size			((struct ns_qsi_div_leg_info_3_arg FAR *)p_ssdu_val) -> redir_name_sz
#define Ns_qsi_leg_inf3_ext_size			((struct ns_qsi_div_leg_info_3_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_leg_inf3_first_str			((struct ns_qsi_div_leg_info_3_arg FAR *)p_ssdu_val) -> first_str

	/* CfnrDivertedLegFailed operation : ARGUMENT : this is simply the list of octets which is passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure is used. */

#if (NS_SS_INTERACTIONS == ON) && ((NS_SS_CALL_OFFER == ON) || (NS_SS_CALL_INTRUSION == ON))

	/*	Supplementary service interactions between Call Forwarding Busy SS
		and Call offer SS or Call intrusion SS : 1 operation */

#define NS_OP_QSI_CFB_OVERRIDE					116			/* cfbOverride */

	/* ARGUMENT : this is simply the list of octets which is passed transparently
		between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure is used
	   RESULT : empty */

#endif

#endif /* end of "Diversion SS supported"} */

/*==========================================================================*/

		/*	Name Identification SS, including 2 services : Calling Name Identification
		 *	Presentation (SS-CNIP), Connected Name Identification Presentation (SS-CONP)
		 * ----------------------------------------------------------------------------- */

#if NS_SS_NAME_IDENT == ON /* Name Identification SS supported{ */

		/*	NS interface identifiers of Operations for Name Identification SS */

#define NS_OP_QSI_CALLING_NAME_ID				79			/* calling Name */
#define NS_OP_QSI_CALLED_NAME_ID				80			/* called Name */
#define NS_OP_QSI_CONNECTED_NAME_ID				81			/* connected Name */
#define NS_OP_QSI_BUSY_NAME_ID					82			/* busy Name */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/* ARGUMENT of all four operations (RESULT is empty for all operations) */

struct ns_qsi_name_ident_arg {
	uchar	name_type;						/* Type of Name (namePresentationAllowedSimple .. nameNotAvailable) */
	uchar	name_character;					/* CharacterSet inside Name or meaningless */
	uchar	name_sz;						/* size of nameData string inside Name : in range [1..50] or 0 if absent */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str;						/* first octet of first string */
		/*	Here are Name string if any immediately followed by extension string if any */
};

#define Ns_qsi_name_ident_type				((struct ns_qsi_name_ident_arg FAR *)p_ssdu_val) -> name_type
#define Ns_qsi_name_ident_char				((struct ns_qsi_name_ident_arg FAR *)p_ssdu_val) -> name_character
#define Ns_qsi_name_ident_size				((struct ns_qsi_name_ident_arg FAR *)p_ssdu_val) -> name_sz
#define Ns_qsi_name_ident_ext_size			((struct ns_qsi_name_ident_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_name_ident_first_str			((struct ns_qsi_name_ident_arg FAR *)p_ssdu_val) -> first_str

#endif /* end of "Name Identification SS supported"} */

/*==========================================================================*/

		/*	Call Transfer SS
		 * ----------------- */

#if NS_SS_CALL_TRANSFER == ON /* Call Transfer SS supported{ */

		/*	NS interface identifiers of Operations for Call Transfer SS */

#define NS_OP_QSI_TRF_IDENTIFY				83			/* CallTransferIdentify */
#define NS_OP_QSI_TRF_ABANDON				84			/* CallTransferAbandon */
#define NS_OP_QSI_TRF_INITIATE				85			/* CallTransferInitiate */
#define NS_OP_QSI_TRF_SETUP					86			/* CallTransferSetup */
#define NS_OP_QSI_TRF_ACTIVE				87			/* CallTransferActive */
#define NS_OP_QSI_TRF_COMPLETE				88			/* CallTransferComplete */
#define NS_OP_QSI_TRF_UPDATE				89			/* CallTransferUpdate */
#define NS_OP_QSI_TRF_SUBADD				90			/* SubaddressTransfer */

		/*	NS interface additional Error identifiers for Call Transfer */

#define SS_ERR_QSI_TRF_INV_NB				153			/* invalidReroutingNumber */
#define SS_ERR_QSI_TRF_UNREC_ID				154			/* unrecognizedCallIdentity */
#define SS_ERR_QSI_TRF_EST_FAIL				155			/* establishmentFailure */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/* CallTransferIdentify operation : ARGUMENT : this is simply the list of octets which is passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure is used. */

	/* CallTransferAbandon operation : ARGUMENT : list of octets passed transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure */

	/* CallTransferInitiate operation :
		- ARGUMENT : same as CallTransferIdentify RESULT -> 'ns_qsi_trf_identify_res' structure
		- RESULT : list of octets passed transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure
	*/

	/* CallTransferSetup operation : RESULT : list of octets passed transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure */

	/* CallTransferActive operation : ARGUMENT */

struct ns_qsi_trf_active_arg {
	uchar	presented_add_type;				/* type of PresentedAddressScreened (presentationAllowedAddress .. presentationRestrictedAddress) inside connectedAddress */
	uchar	party_nb_type;					/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside connectedAddress */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside connectedAddress) */
	uchar	number_digits_sz;				/* size of PartyNumber string inside connectedAddress */
	uchar	screening_ind;					/* ScreeningIndicator inside connectedAddress : ENUMERATED {0, 1, 2, 3} */
	uchar	sub_add_type;					/* type of PartySubaddress or 255 if absent (inside connectedAddress) */
	uchar	sub_add_odd_count;				/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside connectedAddress) */
	uchar	sub_address_sz;					/* size of PartySubaddress string inside connectedAddress */
	uchar	qsig_ie_sz;						/* size of Q-SIG IE string */
	uchar	name_type;						/* Type of Name (namePresentationAllowedSimple .. nameNotAvailable) inside connectedName or 255 if absent */
	uchar	name_character;					/* CharacterSet or meaningless inside connectedName */
	uchar	name_sz;						/* size of nameData string inside connectedName : in range [1..50] or 0 if absent */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str_oct;					/* first octet of first string */
	/*	Here are PartyNumber and PartySubaddress (if any) strings inside connectedAddress,
		then Q-SIG IE string if any, then connectedName string if any, then extension string if any. */
};

#define Ns_qsi_trf_active_pres_add_t		((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> presented_add_type
#define Ns_qsi_trf_active_p_nb_t			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_qsi_trf_active_t_of_nb			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_qsi_trf_active_nb_sz				((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> number_digits_sz
#define Ns_qsi_trf_active_scr_ind			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> screening_ind
#define Ns_qsi_trf_active_sa_t				((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> sub_add_type
#define Ns_qsi_trf_active_sa_odd_c			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> sub_add_odd_count
#define Ns_qsi_trf_active_sa_sz				((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> sub_address_sz
#define Ns_qsi_trf_active_ie_sz				((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> qsig_ie_sz
#define Ns_qsi_trf_active_name_t			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> name_type
#define Ns_qsi_trf_active_name_char			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> name_character
#define Ns_qsi_trf_active_name_sz			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> name_sz
#define Ns_qsi_trf_active_ext_sz			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_trf_active_first_str			((struct ns_qsi_trf_active_arg FAR *)p_ssdu_val) -> first_str_oct

	/* CallTransferComplete operation : ARGUMENT */

struct ns_qsi_trf_complete_arg {
	uchar	end_designation;				/* endDesignation */
	uchar	presented_nb_type;				/* type of PresentedNumberScreened (presentationAllowedNumber .. presentationRestrictedNumber) inside redirectionNumber */
	uchar	party_nb_type;					/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside redirectionNumber */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside redirectionNumber) */
	uchar	number_digits_sz;				/* size of PartyNumber string inside redirectionNumber */
	uchar	screening_ind;					/* ScreeningIndicator inside redirectionNumber : ENUMERATED {0, 1, 2, 3} */
	uchar	qsig_ie_sz;						/* size of Q-SIG IE string */
	uchar	name_type;						/* Type of Name (namePresentationAllowedSimple .. nameNotAvailable) inside redirectionName or 255 if absent */
	uchar	name_character;					/* CharacterSet or meaningless inside redirectionName */
	uchar	name_sz;						/* size of nameData string inside redirectionName : in range [1..50] or 0 if absent */
	uchar	call_status;					/* callStatus or 255 if absent */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str_oct;					/* first octet of first string */
	/*	Here are PartyNumber string inside redirectionNumber, then Q-SIG IE string if any,
		then redirectionName string if any, then extension string if any. */
};

#define Ns_qsi_trf_complete_end_desig		((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> end_designation
#define Ns_qsi_trf_complete_pres_nb_t		((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> presented_nb_type
#define Ns_qsi_trf_complete_p_nb_t			((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_qsi_trf_complete_t_of_nb			((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_qsi_trf_complete_nb_sz			((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> number_digits_sz
#define Ns_qsi_trf_complete_scr_ind			((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> screening_ind
#define Ns_qsi_trf_complete_ie_sz			((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> qsig_ie_sz
#define Ns_qsi_trf_complete_name_t			((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> name_type
#define Ns_qsi_trf_complete_name_char		((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> name_character
#define Ns_qsi_trf_complete_name_sz			((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> name_sz
#define Ns_qsi_trf_complete_call_stat		((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> call_status
#define Ns_qsi_trf_complete_ext_sz			((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_trf_complete_first_str		((struct ns_qsi_trf_complete_arg FAR *)p_ssdu_val) -> first_str_oct

		/* possible values of end_designation */

#define NS_QSI_TRF_DESIG_END_PRIMARY			0			/* primary end */
#define NS_QSI_TRF_DESIG_END_SECOND				1			/* secondary end */

		/* possible values of call_status */

#define NS_QSI_TRF_STAT_CALL_ANSWERED			0			/* answered */
#define NS_QSI_TRF_STAT_CALL_ALERTING			1			/* alerting */

	/* CallTransferUpdate operation : ARGUMENT */

struct ns_qsi_trf_update_arg {
	uchar	presented_nb_type;				/* type of PresentedNumberScreened (presentationAllowedNumber .. presentationRestrictedNumber) inside redirectionNumber */
	uchar	party_nb_type;					/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside redirectionNumber */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside redirectionNumber) */
	uchar	number_digits_sz;				/* size of PartyNumber string inside redirectionNumber */
	uchar	screening_ind;					/* ScreeningIndicator inside redirectionNumber : ENUMERATED {0, 1, 2, 3} */
	uchar	name_type;						/* Type of Name (namePresentationAllowedSimple .. nameNotAvailable) inside redirectionName or 255 if absent */
	uchar	name_character;					/* CharacterSet or meaningless inside redirectionName */
	uchar	name_sz;						/* size of nameData string inside redirectionName : in range [1..50] or 0 if absent */
	uchar	qsig_ie_sz;						/* size of Q-SIG IE string */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str_oct;					/* first octet of first string */
	/*	Here are PartyNumber string inside redirectionNumber, then redirectionName string if any,
		then Q-SIG IE string if any, then extension string if any. */
};

#define Ns_qsi_trf_update_pres_nb_t			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> presented_nb_type
#define Ns_qsi_trf_update_p_nb_t			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_qsi_trf_update_t_of_nb			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_qsi_trf_update_nb_sz				((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> number_digits_sz
#define Ns_qsi_trf_update_scr_ind			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> screening_ind
#define Ns_qsi_trf_update_ie_sz				((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> qsig_ie_sz
#define Ns_qsi_trf_update_name_t			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> name_type
#define Ns_qsi_trf_update_name_char			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> name_character
#define Ns_qsi_trf_update_name_sz			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> name_sz
#define Ns_qsi_trf_update_ext_sz			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_trf_update_first_str			((struct ns_qsi_trf_update_arg FAR *)p_ssdu_val) -> first_str_oct

	/* SubaddressTransfer operation : ARGUMENT */

struct ns_qsi_trf_subadd_arg {
	uchar	sub_add_type;					/* type of PartySubaddress inside redirectionSubaddress */
	uchar	sub_add_odd_count;				/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside redirectionSubaddress) */
	uchar	sub_address_sz;					/* size of PartySubaddress string inside redirectionSubaddress */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str_oct;					/* first octet of first string */
	/*	Here are redirectionSubaddress string and extension string if any. */
};

#define Ns_qsi_trf_subadd_sa_t				((struct ns_qsi_trf_subadd_arg FAR *)p_ssdu_val) -> sub_add_type
#define Ns_qsi_trf_subadd_sa_odd_c			((struct ns_qsi_trf_subadd_arg FAR *)p_ssdu_val) -> sub_add_odd_count
#define Ns_qsi_trf_subadd_sa_sz				((struct ns_qsi_trf_subadd_arg FAR *)p_ssdu_val) -> sub_address_sz
#define Ns_qsi_trf_subadd_ext_sz			((struct ns_qsi_trf_subadd_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_trf_subadd_first_str			((struct ns_qsi_trf_subadd_arg FAR *)p_ssdu_val) -> first_str_oct

#endif /* end of "Call Transfer SS supported"} */

#if (NS_SS_CALL_TRANSFER == ON) || (NS_SS_PATH_REPLACEMENT == ON) /* { */

	/* CallTransferIdentify operation : RESULT */

struct ns_qsi_trf_identify_res {
	uchar	call_identity_size;				/* size of NumberDigits string inside callIdentity : in range [1..4] */
	uchar	rerout_party_nb_type;			/* type of PartyNumber inside reroutingNumber */
	uchar	rerout_type_of_nb;				/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside reroutingNumber) */
	uchar	rerout_nb_size;					/* size of NumberDigits string in PartyNumber inside reroutingNumber */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside callIdentity */
		/*	Here is PartyNumber string inside callIdentity,
			immediately followed by PartyNumber string inside reroutingNumber,
			immediately followed by extension string if any */
};

#define Ns_qsi_trf_ident_call_id_sz			((struct ns_qsi_trf_identify_res FAR *)p_ssdu_val) -> call_identity_size
#define Ns_qsi_trf_ident_p_nb_type			((struct ns_qsi_trf_identify_res FAR *)p_ssdu_val) -> rerout_party_nb_type
#define Ns_qsi_trf_ident_type_of_nb			((struct ns_qsi_trf_identify_res FAR *)p_ssdu_val) -> rerout_type_of_nb
#define Ns_qsi_trf_ident_nb_sz				((struct ns_qsi_trf_identify_res FAR *)p_ssdu_val) -> rerout_nb_size
#define Ns_qsi_trf_ident_ext_sz				((struct ns_qsi_trf_identify_res FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_trf_ident_first_nb			((struct ns_qsi_trf_identify_res FAR *)p_ssdu_val) -> first_nb_digit

	/* CallTransferSetup operation : ARGUMENT */

struct ns_qsi_trf_setup_arg {
	uchar	call_identity_size;				/* size of NumberDigits string inside callIdentity : in range [1..4] */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside callIdentity */
		/*	Here is PartyNumber string inside callIdentity immediately followed by extension string if any */
};

#define Ns_qsi_trf_setup_call_id_sz			((struct ns_qsi_trf_setup_arg FAR *)p_ssdu_val) -> call_identity_size
#define Ns_qsi_trf_setup_ext_sz				((struct ns_qsi_trf_setup_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_trf_setup_first_nb			((struct ns_qsi_trf_setup_arg FAR *)p_ssdu_val) -> first_nb_digit

#endif /* end of "NS_SS_CALL_TRANSFER = ON or NS_SS_PATH_REPLACEMENT == ON"} */

/*==========================================================================*/

		/*	Path Replacement ANF (Additional Network Feature)
		 * -------------------------------------------------- */

#if NS_SS_PATH_REPLACEMENT == ON /* Path Replacement ANF supported{ */

		/*	NS interface identifiers of Operations for Path Replacement ANF */

#define NS_OP_QSI_PTHR_PROPOSE				91			/* PathReplacePropose */
#define NS_OP_QSI_PTHR_SETUP				92			/* PathReplaceSetup */
#define NS_OP_QSI_PTHR_RETAIN				93			/* PathReplaceRetain */

		/*	NS interface additional Error identifiers for Path Replacement ANF :
			in ReturnError component ('op_err_pb_identifier' field) */

#define SS_ERR_QSI_PTHR_COLLISION			156			/* collision */
#define SS_ERR_QSI_PTHR_CR_P_UNACH			157			/* criteriaPermanentlyUnachievable */
#define SS_ERR_QSI_PTHR_CR_T_UNACH			158			/* criteriaTemporarilyUnachievable */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/* PathReplacePropose operation :
		- ARGUMENT : same as CallTransferInitiate ARGUMENT -> 'ns_qsi_trf_identify_res' structure
		- RESULT : empty
	*/

	/* PathReplaceSetup operation :
		- ARGUMENT : same as CallTransferSetup ARGUMENT -> 'ns_qsi_trf_setup_arg' structure
		- RESULT : list of octets passed transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure
	*/

	/* PathReplaceRetain operation :
		- ARGUMENT : same as CallTransferInitiate ARGUMENT -> 'ns_qsi_trf_identify_res' structure
		- RESULT : list of octets passed transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure
	*/

#endif	/* end of "Path Replacement ANF supported"} */

/*==========================================================================*/

		/*	Call Offer SS
		 * -------------- */

		/*	NS interface additional Error identifier */

#define SS_ERR_QSI_NOT_BUSY					159			/* notBusy */

#if NS_SS_CALL_OFFER == ON /* Call Offer SS supported{ */

		/*	NS interface identifiers of Operations (other ones above) for Call Offer SS */

#define NS_OP_QSI_CO_REQUEST				94			/* CallOfferRequest */

	/*	CallOfferRequest operation : ARGUMENT and RESULT : list of octets passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure */

#endif	/* end of "Call Offer SS supported"} */

#define NS_OP_QSI_PATH_RETAIN				95			/* PathRetain */
#define NS_OP_QSI_SERVICE_AVAIL				96			/* ServiceAvailable */

	/* PathRetain and ServiceAvailable operations : ARGUMENT (RESULT is empty) */

struct ns_qsi_path_service_arg {
	uchar	service_unused_bits;			/* number of unused bits at the end of service list string : in range [0 ; 7] */
	uchar	service_size;					/* size of service list string */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str;						/* first octet of first string */
		/*	Here are servicelist string immediately followed by extension string if any */
};

#define Ns_qsi_path_service_unused			((struct ns_qsi_path_service_arg FAR *)p_ssdu_val) -> service_unused_bits
#define Ns_qsi_path_service_srv_size		((struct ns_qsi_path_service_arg FAR *)p_ssdu_val) -> service_size
#define Ns_qsi_path_service_ext_size		((struct ns_qsi_path_service_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_path_service_first_str		((struct ns_qsi_path_service_arg FAR *)p_ssdu_val) -> first_str

#define NS_SS_QSI_CO_MX_UNUSED_BITS			7			/* maximum value allowed for 'service_unused_bits' field */

/*==========================================================================*/

		/*	Do Not Disturb (DND) and Do Not Disturb Override (DNDO) SS
		 * ----------------------------------------------------------- */

#if NS_SS_DO_NOT_DISTURB == ON /* { */

		/*	NS interface identifiers of Operations for DND and DNDO SS */

#define NS_OP_QSI_DND_ACTIVATE				97			/* doNotDisturbActivateQ */
#define NS_OP_QSI_DND_DEACTIVATE			98			/* doNotDisturbDeactivateQ */
#define NS_OP_QSI_DND_INTERROGATE			99			/* doNotDisturbInterrogateQ */
#define NS_OP_QSI_DND_OVERRIDE				100			/* doNotDisturbOverrideQ */
#define NS_OP_QSI_DND_OVER_EXEC				101			/* doNotDisturbOvrExecuteQ */

		/* sizing constants for array (matching SET OF ASN1 Type) */

#define NS_SS_QSI_MX_DND_STATUS				3			/*	maximum number of 'status' (basicService + dndProtectionLevel)
															used for DND and DNDO inside an operation */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/* doNotDisturbActivateQ operation : ARGUMENT */

struct ns_qsi_dnd_activate_arg {
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	party_nb_type;					/* type of PartyNumber inside servedUserNr */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	nb_size;						/* size of PartyNumber string inside servedUserNr */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside servedUserNr */
	/*	Here is PartyNumber string inside servedUserNr immediately followed by extension string if any */
};

#define Ns_qsi_dnd_activ_basic_srv			((struct ns_qsi_dnd_activate_arg FAR *)p_ssdu_val) -> basic_service
#define Ns_qsi_dnd_activ_party_nb_t			((struct ns_qsi_dnd_activate_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_qsi_dnd_activ_type_of_nb			((struct ns_qsi_dnd_activate_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_qsi_dnd_activ_nb_sz				((struct ns_qsi_dnd_activate_arg FAR *)p_ssdu_val) -> nb_size
#define Ns_qsi_dnd_activ_ext_sz				((struct ns_qsi_dnd_activate_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_dnd_activ_first_nb			((struct ns_qsi_dnd_activate_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* doNotDisturbActivateQ operation : RESULT */

struct ns_qsi_dnd_activate_res {
	ushort	status_offset;					/* offset of first instance in status */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str;						/* first octet of extension string */
	/*	Here is extension string if any */
};

#define Ns_qsi_dnd_act_res_status			((struct ns_qsi_dnd_activate_res FAR *)p_ssdu_val) -> status_offset
#define Ns_qsi_dnd_act_res_ext_sz			((struct ns_qsi_dnd_activate_res FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_dnd_act_res_first_str		((struct ns_qsi_dnd_activate_res FAR *)p_ssdu_val) -> first_str

struct ns_qsi_dnd_status_instance {	/* instance in status */
	ushort	next_instance;					/* offset for next instance */
	uchar	basic_service;					/* basicService : ENUMERATED {0, 1, .. , 4, 32, 33, .. , 38} */
	uchar	protect_level;					/* dndProtectionLevel : ENUMERATED {0, 1, 2, 3} or 255 if absent */
};

#define Ns_qsi_dnd_status_next				((struct ns_qsi_dnd_status_instance FAR *)p_ssdu_val) -> next_instance
#define Ns_qsi_dnd_status_basic_srv			((struct ns_qsi_dnd_status_instance FAR *)p_ssdu_val) -> basic_service
#define Ns_qsi_dnd_status_protect_l			((struct ns_qsi_dnd_status_instance FAR *)p_ssdu_val) -> protect_level

		/* possible values of protect_level : see below DNDProtectionLevel */

	/* doNotDisturbDeactivateQ operation :
		- ARGUMENT : same as doNotDisturbActivateQ ARGUMENT -> 'ns_qsi_dnd_activate_arg' structure
		- RESULT : list of octets passed transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure
	*/

	/* doNotDisturbInterrogateQ operation : ARGUMENT */

struct ns_qsi_dnd_interog_arg {
	uchar	party_nb_type;					/* type of PartyNumber inside servedUserNr */
	uchar	type_of_nb;						/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside servedUserNr) */
	uchar	nb_size;						/* size of PartyNumber string inside servedUserNr */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_digit;					/* first octet of PartyNumber string inside servedUserNr */
	/*	Here is PartyNumber string inside servedUserNr immediately followed by extension string if any */
};

#define Ns_qsi_dnd_inter_party_nb_t			((struct ns_qsi_dnd_interog_arg FAR *)p_ssdu_val) -> party_nb_type
#define Ns_qsi_dnd_inter_type_of_nb			((struct ns_qsi_dnd_interog_arg FAR *)p_ssdu_val) -> type_of_nb
#define Ns_qsi_dnd_inter_nb_sz				((struct ns_qsi_dnd_interog_arg FAR *)p_ssdu_val) -> nb_size
#define Ns_qsi_dnd_inter_ext_sz				((struct ns_qsi_dnd_interog_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_dnd_inter_first_nb			((struct ns_qsi_dnd_interog_arg FAR *)p_ssdu_val) -> first_nb_digit

	/* doNotDisturbInterrogateQ operation : RESULT = same as doNotDisturbActivateQ RESULT */

	/* doNotDisturbOverrideQ operation : ARGUMENT */

struct ns_qsi_dnd_override_arg {
	uchar	capability_level;				/* dndoCapabilityLevel : ENUMERATED {1, 2, 3} */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str;						/* first octet of extension string */
	/*	Here is extension string if any */
};

#define Ns_qsi_dnd_over_capability			((struct ns_qsi_dnd_override_arg FAR *)p_ssdu_val) -> capability_level
#define Ns_qsi_dnd_over_ext_sz				((struct ns_qsi_dnd_override_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_dnd_over_first_str			((struct ns_qsi_dnd_override_arg FAR *)p_ssdu_val) -> first_str

		/* possible values of protect_level */

#define NS_QSI_DND_OVERRIDE_LOW_P			1			/* overrideLowProt */
#define NS_QSI_DND_OVERRIDE_MEDIUM_P		2			/* overrideMediumProt */
#define NS_QSI_DND_OVERRIDE_HIGH_P			3			/* overrideHighProt */

	/*	doNotDisturbOvrExecuteQ operation : ARGUMENT and RESULT : list of octets passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure */

#endif /* end of "NS_SS_DO_NOT_DISTURB = ON"} */

		/* possible values of DNDProtectionLevel */

#define NS_QSI_DND_LOW_PROTECTION				0			/* lowProtection */
#define NS_QSI_DND_MEDIUM_PROTECTION			1			/* mediumProtection */
#define NS_QSI_DND_HIGH_PROTECTION				2			/* highProtection */
#define NS_QSI_DND_FULL_PROTECTION				3			/* fullProtection */

/*==========================================================================*/

		/* Call Completion SS, including 2 services : Call Completion
		 * to Busy Subscriber (CCBS), Call Completion on No Reply (CCNR)
		 * ------------------------------------------------------------- */

#if NS_SS_CCBS == ON		/* Call Completion SS supported{ */

		/*	NS interface identifier of Operations */

#define NS_OP_QSI_CCBS_RQ					102			/* CcbsRequest */
#define NS_OP_QSI_CCNR_RQ					103			/* CcnrRequest */
#define NS_OP_QSI_CC_CANCEL					104			/* CcCancel */
#define NS_OP_QSI_CC_EXEC_POSSIBLE			105			/* CcExecPossible */
#define NS_OP_QSI_CC_PATH_RESERVE			106			/* CcPathReserve */
#define NS_OP_QSI_CC_RINGOUT				107			/* CcRingout */
#define NS_OP_QSI_CC_SUSPEND				108			/* CcSuspend */
#define NS_OP_QSI_CC_RESUME					109			/* CcResume */

		/*	NS interface additional Error identifiers for CCBS and CCNR SS */

#define SS_ERR_QSI_CC_SHORT_REJECT			160			/* shortTermRejection */
#define SS_ERR_QSI_CC_LONG_REJECT			161			/* longTermRejection */
#define SS_ERR_QSI_CC_REMOTE_BUSY			162			/* remoteUserBusyAgain */
#define SS_ERR_QSI_CC_FAIL_TO_MATCH			163			/* failureToMatch */
#define SS_ERR_QSI_CC_FAILED_INTERW			164			/* failedDueToInterworking */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/* CcbsRequest, CcnrRequest, CcCancel and CcExecPossible operations : ARGUMENT */

struct ns_qsi_ccbs_request_arg {
	uchar	A_presented_nb_type;			/* - CcbsRequest and CcnrRequest operations : type of PresentedNumberUnscreened
													(presentationAllowedNumber .. presentationRestrictedNumber) inside numberA
												- CcCancel and CcExecPossible operations : type of ARGUMENT (in CHOICE) */
	uchar	A_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside numberA */
	uchar	A_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside numberA) */
	uchar	A_number_digits_sz;				/* size of PartyNumber string inside numberA */
	uchar	B_party_nb_type;				/* type of PartyNumber (unknownPartyNumber .. nationalStandardPartyNumber) inside numberB */
	uchar	B_type_of_nb;					/* Type of number : PublicTypeOfNumber or PrivateTypeOfNumber or meaningless (inside numberB) */
	uchar	B_number_digits_sz;				/* size of PartyNumber string inside numberB */
	uchar	service_sz;						/* size of service (QSIG IE) string */
	uchar	A_sub_add_type;					/* type of PartySubaddress or 255 if absent (inside subaddrA) */
	uchar	A_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside subaddrA) */
	uchar	A_sub_address_sz;				/* size of PartySubaddress string inside subaddrA */
	uchar	B_sub_add_type;					/* type of PartySubaddress or 255 if absent (inside subaddrB) */
	uchar	B_sub_add_odd_count;			/* oddCountIndicator in PartySubaddress : TRUE/FALSE or 255 if absent (inside subaddrB) */
	uchar	B_sub_address_sz;				/* size of PartySubaddress string inside subaddrB */
	uchar	can_retain_service;				/* can-retain-service : TRUE/FALSE or 255 if absent (not relevant for CcCancel and CcExecPossible operations) */
	uchar	retain_sig_connection;			/* retain-sig-connection : TRUE/FALSE or 255 if absent (not relevant for CcCancel and CcExecPossible operations) */
	uchar	extension_size;					/* size of extension string */
	uchar	first_nb_dig;					/* first octet of PartyNumber string inside numberA */
	/*	Here are numberA string if any, then numberB string, then service string,
		then subaddrA string if any, then subaddrB string if any, then extension string if any */
};

#define Ns_qsi_ccbs_rq_A_pres_nb_t			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> A_presented_nb_type
#define Ns_qsi_cc_cncel_exec_arg_type		((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> A_presented_nb_type
#define Ns_qsi_ccbs_rq_A_party_nb_t			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> A_party_nb_type
#define Ns_qsi_ccbs_rq_A_t_of_nb			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> A_type_of_nb
#define Ns_qsi_ccbs_rq_A_nb_sz				((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> A_number_digits_sz
#define Ns_qsi_ccbs_rq_B_party_nb_t			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> B_party_nb_type
#define Ns_qsi_ccbs_rq_B_t_of_nb			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> B_type_of_nb
#define Ns_qsi_ccbs_rq_B_nb_sz				((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> B_number_digits_sz
#define Ns_qsi_ccbs_rq_service_sz			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> service_sz
#define Ns_qsi_ccbs_rq_A_sa_type			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> A_sub_add_type
#define Ns_qsi_ccbs_rq_A_sa_odd_c			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> A_sub_add_odd_count
#define Ns_qsi_ccbs_rq_A_sa_sz				((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> A_sub_address_sz
#define Ns_qsi_ccbs_rq_B_sa_type			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> B_sub_add_type
#define Ns_qsi_ccbs_rq_B_sa_odd_c			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> B_sub_add_odd_count
#define Ns_qsi_ccbs_rq_B_sa_sz				((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> B_sub_address_sz
#define Ns_qsi_ccbs_rq_can_ret_srv			((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> can_retain_service
#define Ns_qsi_ccbs_rq_ret_sig				((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> retain_sig_connection
#define Ns_qsi_ccbs_rq_ext_sz				((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_ccbs_rq_first_nb				((struct ns_qsi_ccbs_request_arg FAR *)p_ssdu_val) -> first_nb_dig

		/* possible types of ARGUMENT (= CcOptionalArg CHOICE) : for CcCancel and CcExecPossible operations */

#define NS_QSI_CC_OPTIONAL_FULL_ARG			0			/* type is fullArg : all parameters in ARGUMENT are relevant */
#define NS_QSI_CC_OPTIONAL_EXT_ARG			1			/* type is extArg : only extension parameter(size + string) is relevant */

	/* CcbsRequest and CcnrRequest operations : RESULT */

struct ns_qsi_ccbs_request_res {
	uchar	no_path_reservation;			/* no-path-reservation : TRUE/FALSE or 255 if absent */
	uchar	retain_service;					/* retain-service : TRUE/FALSE or 255 if absent */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str;						/* first octet of extension string */
	/*	Here is extension string if any */
};

#define Ns_qsi_ccbs_rq_res_no_path_r		((struct ns_qsi_ccbs_request_res FAR *)p_ssdu_val) -> no_path_reservation
#define Ns_qsi_ccbs_rq_res_retain_srv		((struct ns_qsi_ccbs_request_res FAR *)p_ssdu_val) -> retain_service
#define Ns_qsi_ccbs_rq_res_ext_sz			((struct ns_qsi_ccbs_request_res FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_ccbs_rq_res_first_str		((struct ns_qsi_ccbs_request_res FAR *)p_ssdu_val) -> first_str

	/*	CcPathReserve operation : ARGUMENT and RESULT : list of octets passed
		transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure */

	/*	CcRingout, CcSuspend and CcResume operations :
		- ARGUMENT : list of octets passed transparently between SPDU and SSDU -> 'ns_qsi_transparent_extension' structure
		- RESULT : empty */

#endif	/* end of "Call Completion SS supported"} */

/*==========================================================================*/

		/* Call Intrusion SS
		 * ----------------- */

#if NS_SS_CALL_INTRUSION == ON	/* Call intrusion SS supported{ */

		/*	NS interface identifier of Operations */

#define NS_OP_QSI_CI_RQ						110			/* callIntrusionRequest */
#define NS_OP_QSI_CI_GET_CIPL				111			/* callIntrusionGetCIPL */
#define NS_OP_QSI_CI_ISOLATE				112			/* callIntrusionIsolate */
#define NS_OP_QSI_CI_FORCED_REL				113			/* callIntrusionForcedRelease */
#define NS_OP_QSI_CI_WOB_RQ					114			/* callIntrusionWOBRequest */
#define NS_OP_QSI_CI_COMPLETED				115			/* callIntrusionCompleted */

		/* structure of data at NS interface for each operation clause (ARGUMENT and RESULT) */

	/*	callIntrusionRequest operation : ARGUMENT and RESULT
		callIntrusionGetCIPL operation : RESULT */

struct ns_qsi_ci_request_get_cipl {
	uchar	level_or_status;				/* in callIntrusionRequest ARGUMENT : ciCapabilityLevel
											   in callIntrusionRequest RESULT : ciUnwantedUserStatus
											   in callIntrusionGetCIPL ARGUMENT : ciProtectionLevel */
	uchar	extension_size;					/* size of extension string */
	uchar	first_str;						/* first octet of extension string */
	/*	Here is extension string if any */
};

#define Ns_qsi_ci_rq_get_level_status		((struct ns_qsi_ci_request_get_cipl FAR *)p_ssdu_val) -> level_or_status
#define Ns_qsi_ci_rq_get_ext_sz				((struct ns_qsi_ci_request_get_cipl FAR *)p_ssdu_val) -> extension_size
#define Ns_qsi_ci_rq_get_first_str			((struct ns_qsi_ci_request_get_cipl FAR *)p_ssdu_val) -> first_str

		/* possible values of ciCapabilityLevel */

#define NS_QSI_CI_INTRUSION_LOW_P			1			/* intrusionLowProt */
#define NS_QSI_CI_INTRUSION_MEDIUM_P		2			/* intrusionMediumProt */
#define NS_QSI_CI_INTRUSION_HIGH_P			3			/* intrusionHighProt */

		/* possible values of ciUnwantedUserStatus */

#define NS_QSI_CI_UNWANT_U_INTRUDED			0			/* unwantedUserIntruded */
#define NS_QSI_CI_UNWANT_U_ISOLATED			1			/* unwantedUserIsolated */

		/* possible values of ciProtectionLevel : same as in Do Not Disturb SS */

#endif	/* end of "Call intrusion SS supported"} */

#endif /* end of Q-SIG specific operations} */

#endif

/*EOF*/
