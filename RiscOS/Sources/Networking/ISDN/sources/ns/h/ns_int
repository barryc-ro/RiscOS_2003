
/*--------------------------------------------------------------------------*
 *						M O D U L E   H E A D E R
 *
 * filename - ns_int.h
 *
 * $Revision$
 *
 * $Date$
 *
 *  Header implementing the upper interface of the NS entity of
 *  the ISDN_BRICKS package.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef NS_INT
#	define NS_INT

/*--------------------------------------------------------------------------*/

#include "ns_par.h"

	/* Some parameters integrity checkings */

#if SIM_ANALYSER == OFF
#	undef  NS_SIM_ANALYSER
#	define NS_SIM_ANALYSER			OFF
#endif

#if SIM_BUILDER == OFF
#	undef  NS_SIM_BUILDER
#	define NS_SIM_BUILDER			OFF
#endif

#if NB_CALL_TIMER < 4
#	undef	NB_CALL_TIMER
#	define	NB_CALL_TIMER			4
#endif

#ifndef	NS_TYPE_BRI
#	define	NS_TYPE_BRI				ON			/* BRI access supported */
#endif

#ifndef	NS_TYPE_PRI
#	define	NS_TYPE_PRI				ON			/* PRI access supported */
#endif

#ifndef MX_EXTENDED_FAC
#	define MX_EXTENDED_FAC			2
#endif

#ifndef NS_SUPP_SERVICES
#	define NS_SUPP_SERVICES			OFF			/* Supplementary Services not supported */
#endif

#ifndef NS_MAINTENANCE_CAPABILITY
#	define NS_MAINTENANCE_CAPABILITY	OFF			/* Supplementary Services not supported */
#endif

#if NS_MAINTENANCE_CAPABILITY == OFF
#	define	NS_D_BACKUP				OFF				/* D channel backup requires NS_MAINTENANCE_CAPABILITY */
#endif

#ifndef NS_SS_AOC_S
#	define NS_SS_AOC_S				OFF
#endif

#ifndef NS_SS_AOC_D
#	define NS_SS_AOC_D				OFF
#endif

#ifndef NS_SS_AOC_E
#	define NS_SS_AOC_E				OFF
#endif

#ifndef NS_SS_CUG
#	define NS_SS_CUG				OFF
#endif

#ifndef NS_SS_DIVERSION
#	define NS_SS_DIVERSION			OFF
#endif

#ifndef NS_HOLD_RETRIEVE
#	define NS_HOLD_RETRIEVE			OFF
#endif

#ifndef NS_NB_HOLD_TIMER
#	define	NS_NB_HOLD_TIMER		0
#endif

#ifndef NS_SS_EXPL_CHAN_RESERVATION
#	define NS_SS_EXPL_CHAN_RESERVATION	OFF
#endif

#ifndef NS_COLP_COLR
#	define NS_COLP_COLR				OFF
#endif

#ifndef NS_SS_3_PARTY
#	define NS_SS_3_PARTY			OFF
#endif

#ifndef NS_SS_CONFERENCE
#	define NS_SS_CONFERENCE			OFF
#endif

#ifndef NS_SS_USER_USER_EXP
#	define NS_SS_USER_USER_EXP		OFF
#endif

#ifndef NS_SS_ECT
#	define NS_SS_ECT				OFF
#endif

#ifndef NS_SS_MALICIOUS_CALL_ID
#	define NS_SS_MALICIOUS_CALL_ID	OFF
#endif

#ifndef NS_SS_FREEPHONE
#	define NS_SS_FREEPHONE			OFF
#endif

#ifndef NS_SS_CCBS
#	define NS_SS_CCBS				OFF
#endif

#ifndef NS_SS_INTERACTIONS
#	define NS_SS_INTERACTIONS		OFF
#endif

#ifndef NS_SS_NAME_IDENT
#	define NS_SS_NAME_IDENT			OFF
#endif

#ifndef NS_SS_CALL_TRANSFER
#	define NS_SS_CALL_TRANSFER		OFF
#endif

#ifndef NS_SS_PATH_REPLACEMENT
#	define NS_SS_PATH_REPLACEMENT	OFF
#endif

#ifndef NS_SS_CALL_OFFER			
#	define NS_SS_CALL_OFFER			OFF
#endif

#ifndef NS_SS_DO_NOT_DISTURB		
#	define NS_SS_DO_NOT_DISTURB		OFF
#endif

#ifndef NS_SS_CALL_INTRUSION
#	define NS_SS_CALL_INTRUSION		OFF
#endif

/*--------------------------------------------------------------------------*/

				/* Additional codes for supplementary services */

					/*
						These codes are used in NS_SPF_FACILITY_xx
						primitives thru SERVICE_ID IE.
					*/

#define DA_CONF					'2'				/* conference */
#define DA_CONF_ACK				'3'				/* conference acknowledge */
#define DA_CONF_REJ				'4'				/* conference reject */
#define DA_TRANS				'5'				/* transfer */
#define DA_TRANS_ACK			'6'				/* transfer acknowledge */
#define DA_TRANS_REJ			'7'				/* transfer reject */
#define DA_ASSOC				'8'				/* associated */
#define DA_ASSOC_ACK			'9'				/* associated acknowledge */
#define DA_DROP					'i'				/* drop */
#define DA_DROP_ACK				'j'				/* drop acknowledge */
#define DA_DROP_REJ				'k'				/* drop reject */
#define DA_RECONN				'v'				/* reconnect */
#define DA_RECONN_ACK			'w'				/* reconnect acknowledge */
#define DA_RECONN_REJ			'x'				/* reconnect reject */
#define DA_REDIR				'z'				/* redirect */
#define DA_FACILITY				'2'				/* facility (NTT) */

#define DA_HOLD					NS_EXT + 'h'	/* hold */
#define DA_HOLD_ACK				NS_EXT + 'i'	/* hold acknowledge */
#define DA_HOLD_REJ				NS_EXT + 'j'	/* hold reject */

/*-------------------------------------------------------------------------*/

			/* NS SAPI : CALL CONTROL parameters */

#define NS_SAPI_SIG				0				/* NS SAP ID */
#define MNS_SAPI				0				/* MNS SAP ID */

			/* NS CONN_ID : connect ID */

typedef add_t					conn_id_t;		/* Connection ID */

			/* maximum range for a call connect ID */


#define MX_CONN_ID				((1 << (8 * (sizeof(conn_id_t)))) - 1)

			/*
			 * CC interface Id (Nai)
			 * Used by applications using the TSP mode in NFAS.
			 */

#define R_msg_cc_int_id			R_msg_inf0

/*-------------------------------------------------------------------------*/

#define	SIZEOF_TSP_OFFSET		2				/* size of the offset giving where are stored the Q931 data (transparent mode) */

						/* COMMUNICATION MESSAGE CODES */

						/* PRIMITIVE CODES */

						/* CC <-----> NS */

			/* NS extension code */


#define NS_EXT					128				/* starting code of the extended primitive codes */

#define NS_ERR_IN				'?'				/* response to an erroneous NS primitive */

#define NS_CONN_RQ				'A'				/* connection request */
#define NS_CONN_IN				'a'				/* connection indication */
#define NS_CONN_RS				'B'				/* connection response */
#define NS_CONN_CO				'b'				/* connection confirm */

#define NS_CLEAR_RQ				'C'				/* clear connection request */
#define NS_CLEAR_IN				'c'				/* clear connection indication */
#define NS_CLEAR_RS				'D'				/* clear connection response */
#define NS_CLEAR_CO				'd'				/* clear connection confirm */

#define NS_INFO_RQ				'E'				/* information request */
#define NS_INFO_IN				'e'				/* information indication */

#define NS_SUSPEND_RS			'F'				/* suspend response */
#define NS_SUSPEND_CO			'f'				/* suspend confirm */

#define NS_ALERT_RQ				'G'				/* alert request */
#define NS_ALERT_IN				'g'				/* alert indication */

#define NS_SUSPEND_RQ			'H'				/* suspend request */
#define NS_SUSPEND_IN			'h'				/* suspend indication */

#define NS_RESUME_RQ			'I'				/* resume request */
#define NS_RESUME_IN			'i'				/* resume indication */

#define NS_DETACH_RQ			'J'				/* detach request (TR6) */
#define NS_DETACH_IN			'j'				/* detach indication (TR6) */

#define NS_SPF_FACILITY_RQ		'K'				/* specific facility request */
#define NS_SPF_FACILITY_IN		'k'				/* specific facility indication */

#define	NS_K_SETUP_RQ			'>'				/* key setup request */
#define	NS_K_SETUP_IN			'='				/* key setup indication */

#define NS_FAC_RQ				'K'				/* facility request (ETSI) */
#define NS_FAC_IN				'k'				/* facility indication (ETSI) */

#define NS_SPF_REGISTRATION_RQ	'L'				/* registration request */
#define NS_SPF_REGISTRATION_IN	'l'				/* registration indication */

#define	NS_K_REL_RQ				'L'				/* key release request (FG_NT_TE, AT9) */
#define	NS_K_REL_IN				'l'				/* key release indication (AT9) */

#define NS_USER_INFO_RQ		 	'M'				/* user info request */
#define NS_USER_INFO_IN			'm'				/* user info indication */

#define	NS_K_HOLD_RQ			'M'				/* key hold request (FG_NT_TE, AT9) */
#define	NS_K_HOLD_IN			'm'				/* key hold indication (AT9) */

#define NS_CALL_PROC_RQ			'N'				/* call proceeding request */
#define NS_CALL_PROC_IN			'n'				/* call proceeding indication */

#define NS_SETUP_ACK_RQ			'O'				/* set_up acknoledge request */
#define NS_SETUP_ACK_IN			'o'				/* set_up acknowledged indication */

#define NS_ROUTED_CALL_RQ		'P'				/* routed call request (VN2) */
#define NS_ROUTED_CALL_IN		'p'				/* routed call indication (VN2) */
#define NS_PROGRESS_RQ			'P'				/* progress request */
#define NS_PROGRESS_IN			'p'			 	/* progress indication */

#define NS_RESTART_RQ			'Q'			 	/* Start request */
#define NS_RESTART_IN			'q'			 	/* Start indication */

#define NS_REDIR_CONN_RQ		'R'				/* Redirect NS_CONN_IN to another upper entity */

#define NS_STATUS_ENQ_RQ		'T'			 	/* Status enquiry */

#define NS_CONGEST_CONTROL_IN	't'			 	/* Congestion control indication */
#define NS_CONGEST_CONTROL_RQ	NS_EXT + 't'	/* Congestion control request (NT2) */

#define NS_CANCEL_RQ			'U'				/* Cancel request */
#define NS_CANCEL_IN			'u'				/* Cancel indication */

#define	NS_K_SETUP_ACK_RQ		'U'				/* key setup ack request (AT9) */
#define	NS_K_SETUP_ACK_IN		'u'				/* key setup ack indication (FG_NT_TE,AT9) */

#define NS_RESUME_RS			'V'				/* resume response */
#define NS_RESUME_CO			'v'				/* resume confirm */

#define NS_SPF_FACILITY_RS		'W'				/* specific facility response */
#define NS_SPF_FACILITY_CO		'w'				/* specific facility confirm */

#define NS_FAC_RS				'S'				/* facility response (ETSI) */
#define NS_FAC_CO				's'				/* facility confirm (ETSI) */

#define NS_SPF_REGISTRATION_RS	'X'				/* registration response */
#define NS_SPF_REGISTRATION_CO	'x'				/* registration confirm */

#define NS_RESTART_RS			'Y'				/* restart acknowledge request */
#define NS_RESTART_CO			NS_EXT + 'Y'	/* restart acknowledge confirm (NT2) */

#define NS_NOTIFY_RQ			'Z'				/* notify request */
#define NS_NOTIFY_IN			'z'				/* notify indication */

#define NS_HOLD_RQ				NS_EXT + 'n'	/* hold request */
#define NS_HOLD_IN				NS_EXT + 'N'	/* hold indication */

#define NS_HOLD_RS				NS_EXT + 'o'	/* hold response */
#define NS_HOLD_CO				NS_EXT + 'O'	/* hold confirm */

#define NS_RET_RQ				NS_EXT + 'p'	/* retrieve request */
#define NS_RET_IN				NS_EXT + 'P'	/* retrieve indication */

#define NS_RET_RS				NS_EXT + 'q'	/* retrieve response */
#define NS_RET_CO				NS_EXT + 'Q'	/* retrieve confirm */

	/* ABORT indication (used for Hold and Retrieve procedures) */

#define	NS_ABORT_IN				NS_EXT + 'M'

	/* TR6 EXTENDED CODES specific (protocol discriminator N0) - NOT IMPLEMENTED */

#define NS_CLOSE_RQ				NS_EXT + 'A'	/* close request */
#define NS_CLOSE_IN				NS_EXT + 'a'	/* close indication */

#define NS_CLOSE_RS				NS_EXT + 'B'	/* close response */
#define NS_CLOSE_CO				NS_EXT + 'b'	/* close confirm */

#define NS_FAC_INFO_RQ			NS_EXT + 'C'	/* facility information request */
#define NS_FAC_INFO_CO			NS_EXT + 'c'	/* facility information confirm */

#define NS_FAC_STAT_RQ			NS_EXT + 'D'	/* facility status request */
#define NS_FAC_STAT_CO			NS_EXT + 'd'	/* facility status confirm */

#define NS_CANC_IND_RQ			NS_EXT + 'E'	/* cancel indication */
#define NS_CANC_IND_IN			NS_EXT + 'e'	/* cancel indication */

#define NS_REG_IND_RQ			NS_EXT + 'F'	/* register indication */
#define NS_REG_IND_IN			NS_EXT + 'f'	/* register indication */

	/* Maintenance messages */

#define	NS_SERVICE_CO			NS_EXT + 'h'	/* Maintenance service request (NOT IMPLEMENTED) */

						/* NS <----> MNS */

#define MNS_ERR_IN				'?'				/* response to an erroneous MNS primitive */

#define MNS_SET_CONFIG_RQ		'A'				/* request configuration and initialisation of NS */
#define MNS_SET_CONFIG_CO		'a'				/* confirmation of NS configuration and initialisation */

#define MNS_RESET_CONFIG_RQ		'B'				/* request reset configuration NS */
#define MNS_RESET_CONFIG_CO		'b'				/* confirmation of NS reset configuration */

#define MNS_RESTART_RQ			'C'				/* request configuration and initialisation of NS */
#define MNS_RESTART_CO			'c'				/* confirmation of NS configuration and initialisation */

#define MNS_NA_POWER_ON_RQ		'D'				/* NA power on */
#define MNS_NA_POWER_OFF_RQ		'd'				/* NA power off */

#define MNS_REF_RQ				'E'				/* request reference allocated */
#define MNS_REF_IN				'e'				/* indication of reference allocation */

#define MNS_DL_DLCI_RQ			'F'				/* DLCI information */
#define MNS_RESTART_IN			'f'				/* indication on NS configuration and initialisation */

#define MNS_CLEAR_BUSY_RQ		'G'				/* clear busy request */

#define MNS_STATUS_IN			'g'				/* STATUS indication */
#define MNS_EVENT_IN			'h'				/* EVENT indication */

#define	MNS_SERVICE_RQ			'I'				/* Maintenance service request (same contents as NS_SERVICE_RQ) */
#define	MNS_SERVICE_CO			'i'				/* Maintenance service confirm (same contents as NS_SERVICE_RQ) */

#define SSDU_MINI				NS_K_SETUP_IN

#if EQUIPMENT == TE
#	define SSDU_MAXI			NS_RET_RS			/* Hold/Retrieve functions */
#else
#	define SSDU_MAXI    		NS_CONGEST_CONTROL_RQ
#endif


#define SSDU_NIL				0				/* SSDU ID NIL */

						/* TIMER EVENTS */

					/* NS time_out event */

#define TI_300					'0'				/* primitive time_out */
#define TI_301					'1'				/* timer 301 expired */
#define TI_302					'2'				/* timer 302 expired */
#define TI_303					'3'				/* timer 303 expired */
#define TI_304					'4'				/* timer 304 expired */
#define TI_305					'5'				/* timer 305 expired */
#define TI_306					'6'				/* timer 306 expired */
#define TI_307					'7'				/* timer 307 expired */
#define TI_308					'8'				/* timer 308 expired */
#define TI_309					'9'				/* timer 309 expired */
#define TI_310					'{'				/* timer 310 expired */
#define TI_312					'@'				/* timer 312 expired */
#define TI_313					'}'				/* timer 313 expired */
#define TI_314					'('				/* timer 314 expired */
#define TI_316					'<'				/* timer 316 expired */
#define TI_317					'='				/* timer 317 expired */
#define TI_318					'['				/* timer 318 expired */
#define TI_319					']'				/* timer 319 expired */
#define TI_320					'$'				/* timer 320 expired */
#define TI_321					'#'				/* timer 321 expired */
#define TI_322					'*'				/* timer 322 expired */
#define TI_391					'1'				/* timer 391 expired (SWD, network side) */
#define TI_397					'7'				/* timer 397 expired (SWD) */
#define TI_30Y					'+'				/* timer 30Y expired (BT2) */

#define TI_399					'|'				/* timer 399 expired */

#define TI_3D1					'('				/* timer 3D1 expired (TR6) */
#define TI_3D2					')'				/* timer 3D2 expired (TR6) */
#define TI_3AA					'+'				/* timer 3AA expired (TR6) */
#define TI_3AB					'!'				/* timer 3AB expired (TR6) */
#define TI_3AC					'$'				/* timer 3AC expired (TR6) */
#define TI_3AD					'#'				/* timer 3AD expired (TR6) */
#define TI_3AE					'*'				/* timer 3AE expired (TR6) */
#define TI_3AF					'/'				/* timer 3AF expired (TR6) */
#define TI_3AG					'\\'			/* timer 3AG expired (TR6) */

#define TI_3CW					'+'				/* timer 3CW expired (BG_V1, network side) */

#define TI_ANS					'&'				/* timer ANS expired */
#define TI_SPID					'.'				/* timer SPID expired */

#define	TI_3JA					'$'				/* timer JATE (NTT specific) */

#define	NS_TI_HOLD				'>'				/* timer T-HOLD (For Hold procedure) */
#define	NS_TI_RET				'?'				/* timer T-RETRIEVE (For Retrieve procedure) */

#define TI_DL					'-'				/* DL timer */
#define TI_DL_EST				'+'				/* DL establisment timer  */
#define TI_SRV					'\\'			/* Timer SERVICE expired */
#define TI_3M1					TI_SRV			/* Timer SERVICE expired */
#define	TI_3DW					')'				/* timer 3DW expired */
#define	TI_3MB					'('				/* timer 3MB expired */

	/*-------- NT side only -------*/

#define TI_304I					4				/* internal timer 304 expired */
#define TI_308I					8				/* internal timer 308 expired */
#define TI_310I					10				/* internal timer 310 expired */

/*--------------------------------------------------------------------------*/

			/* ABORT INDICATION to upper entity : Cause definitions
				(in inf0 field of message data area) (currently only 1 defined) */

#define NS_ABORT_CAUSE_CALL_ST_CHG		'A'		/* ABORT due to change of call state */ 

/*--------------------------------------------------------------------------*/

			/* MNS ERROR INDICATION */

#define MNS_MX_TEXT_LGTH				200

struct mns_err {
	struct sm_report ns_report;			/* report structure */

	uchar			cause;				/* error cause */
	uchar			tei;				/* terminal endpoint Id */
	uchar			protocol_discr;		/* protocol discriminator */
	uchar			call_ref_lgth;		/* call reference length */

#	if EQUIPMENT == NT2
		ulong		call_ref;			/* call reference value */
#	else
		uint		call_ref;			/* call reference value */
#	endif

	uchar			call_state;			/* call state */
	ushort			spdu_id;			/* SPDU message type (for ERR_N_... errors) */
	ushort			ssdu_id;			/* SSDU message type (for ERR_U_... errors) */
	uchar			ie_codeset;			/* IE codeset */
	ushort			ie_id;				/* IE ID */
	uchar			ie_instance;		/* IE instance */
	uchar			diagnostic;			/* diagnostic */
};

#define Mns_err_entity_origination	((struct mns_err FAR *)p_data) -> ns_report.entity_origination
#define Mns_err_report_type			((struct mns_err FAR *)p_data) -> ns_report.report_type

#define Mns_err_cause				((struct mns_err FAR *)p_data) -> cause
#define Mns_err_tei					((struct mns_err FAR *)p_data) -> tei
#define Mns_err_protocol_discr		((struct mns_err FAR *)p_data) -> protocol_discr
#define Mns_err_call_ref_lgth		((struct mns_err FAR *)p_data) -> call_ref_lgth
#define Mns_err_call_ref			((struct mns_err FAR *)p_data) -> call_ref
#define Mns_err_call_state			((struct mns_err FAR *)p_data) -> call_state
#define Mns_err_spdu_id				((struct mns_err FAR *)p_data) -> spdu_id
#define Mns_err_ssdu_id				((struct mns_err FAR *)p_data) -> ssdu_id
#define Mns_err_ie_codeset			((struct mns_err FAR *)p_data) -> ie_codeset
#define Mns_err_ie_id				((struct mns_err FAR *)p_data) -> ie_id
#define Mns_err_ie_instance			((struct mns_err FAR *)p_data) -> ie_instance
#define Mns_err_diagnostic			((struct mns_err FAR *)p_data) -> diagnostic

#define Mns_err_size				(sizeof (struct mns_err))

/*--------------------------------------------------------------------------*/

			/* MNS STATUS INDICATION */

struct mns_status {
	struct sm_report	ns_report;		/* report structure */

	uchar				tei;			/* terminal endpoint Id */

#	if EQUIPMENT == NT2
		ulong			call_ref;		/* call reference value */
#	else
		uint			call_ref;		/* call reference value */
#	endif

	uchar				location;		/* error location */
	uchar				cause_class;	/* error cause class */
	uchar				cause_val;		/* error cause value */
	uchar				diagnostic;		/* diagnostic */

	uchar				call_state;		/* call state */
};

#define Mns_status_entity_origination	((struct mns_status FAR *)p_data) -> ns_report.entity_origination
#define Mns_status_report_type			((struct mns_status FAR *)p_data) -> ns_report.report_type

#define Mns_status_tei					((struct mns_status FAR *)p_data) -> tei
#define Mns_status_call_ref				((struct mns_status FAR *)p_data) -> call_ref

#define Mns_status_location				((struct mns_status FAR *)p_data) -> location
#define Mns_status_cause_class			((struct mns_status FAR *)p_data) -> cause_class
#define Mns_status_cause_val			((struct mns_status FAR *)p_data) -> cause_val
#define Mns_status_diagnostic			((struct mns_status FAR *)p_data) -> diagnostic

#define Mns_status_call_state			((struct mns_status FAR *)p_data) -> call_state

#define Mns_status_size					(sizeof (struct mns_status))

/*--------------------------------------------------------------------------*/

			/* MNS EVENT INDICATION */

struct mns_event {
	struct sm_report	ns_report;		/* report structure */

#	if EQUIPMENT == NT2
		ulong			call_ref;		/* call reference value */
#	else
		uint			call_ref;		/* call reference value */
#	endif

	uchar				event_type;		/* event type */
	uchar				event_code;		/* event code */
	uchar				call_state;		/* call state */
	uchar				call_direction;	/* incoming or outgoing call */
#	if NS_SPID == ON
		uchar			usid;			/* User Id */
		uchar			tid;			/* Terminal Id */
#	endif
};

#define Mns_event_entity_origination	((struct mns_event FAR *)p_data) -> ns_report.entity_origination
#define Mns_event_report_type			((struct mns_event FAR *)p_data) -> ns_report.report_type

#define Mns_event_call_ref				((struct mns_event FAR *)p_data) -> call_ref
#define Mns_event_type					((struct mns_event FAR *)p_data) -> event_type
#define Mns_event_code					((struct mns_event FAR *)p_data) -> event_code
#define Mns_event_call_state			((struct mns_event FAR *)p_data) -> call_state
#define Mns_event_call_direction		((struct mns_event FAR *)p_data) -> call_direction
#define Mns_event_usid					((struct mns_event FAR *)p_data) -> usid
#define Mns_event_tid					((struct mns_event FAR *)p_data) -> tid

#define Mns_event_size					(sizeof (struct mns_event))

		/* EVENT TYPE CODES */

#define NS_EVENT_CALL_SETUP		'a'		/* Call setup event */
#define NS_EVENT_CALL_RELEASE	'b'		/* Call release event */
#define NS_EVENT_TIMER			'c'		/* Timer event */
#define NS_EVENT_PROTOCOL_ID	'd'		/* Protocol ID event */
#define NS_EVENT_SPID_OK		'e'		/* SPID negotiation OK */
#define NS_EVENT_SPID_NOK		'f'		/* SPID negotiation failed */

/*--------------------------------------------------------------------------*/

			/* MNS RESTART REQUEST / CONFIRM */

#if NS_RESTART_PROCEDURE == ON /* { */

struct mns_restart {
	struct sm_report	ns_report;				/* report structure */

	uchar				restart_class;			/* restart indicator class : RI_INDICATED_CHANNEL / RI_SINGLE_INTERFACE / RI_ALL_INTERFACES */

	uchar				b_chan_nb;				/* meaningless if class is different from RI_INDICATED_CHANNEL,
												   number of B-channel (to be) restarted */

	uchar				error_type;				/* type of error in MNS_RESTART_CO primitive if report structure indicates REPORT_TYPE_ERROR */

#	if NS_MAINTENANCE_CAPABILITY == ON
		uchar			int_id;					/* B channel Interface Id */
#	endif
};

#define Mns_restart_ent_origination		((struct mns_restart FAR *)p_data) -> ns_report.entity_origination
#define Mns_restart_report_type			((struct mns_restart FAR *)p_data) -> ns_report.report_type

#define Mns_restart_class				((struct mns_restart FAR *)p_data) -> restart_class
#define Mns_restart_b_chan_nb			((struct mns_restart FAR *)p_data) -> b_chan_nb

#define Mns_restart_error_type			((struct mns_restart FAR *)p_data) -> error_type

#if NS_MAINTENANCE_CAPABILITY == ON
#	define	Mns_restart_interface		((struct mns_restart FAR *)p_data) -> int_id
#endif

#define Mns_restart_size				(sizeof (struct mns_restart))

		/* ERROR TYPE CODES */

#define NS_RESTART_ERR_NOT_IMPLEMENTED		'a'		/* restart procedures not implemented in current network */
#define NS_RESTART_ERR_CLASS				'b'		/* Bad value for 'class' field */
#define NS_RESTART_ERR_CHAN_NB				'c'		/* Bad value for 'b_chan_nb' field */
#define NS_RESTART_ERR_TI_316				'd'		/* Timer T316 expiry */
#define NS_RESTART_ERR_TI_317				'e'		/* Timer T317 expiry */
#define NS_RESTART_ERR_STATE_INCOMP			'f'		/* STATUS received with incompatible Call State IE (Restart state)
														on global call ref -> stop restart procedure */

#endif /* RESTART_PROCEDURE = ON} */

/*--------------------------------------------------------------------------*/

			/* MNS SERVICE REQUEST / CONFIRM */

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

		/* Interface definition for MNS_SERVICE_RQ/CO */

	/* Action type */

#define	I_MAINTENANCE					0
#define	I_AUDIT							1

	/* Preference */

#define	I_PREF_INTERFACE				0
#define	I_PREF_B_CHANNEL				1
#define	I_PREF_D_CHANNEL				2

	/* D channel status */

#define	I_D_STATE_IS					0						/* In Service */
#define	I_D_STATE_STBY					1						/* Standby */
#define	I_D_STATE_OOS					2						/* Out Of Service */
#define	I_D_STATE_MOOS					3						/* Manual Out Of Service */
#define	I_D_STATE_MB					4						/* Maintenance Busy */
#define	I_D_STATE_WAIT					5						/* Wait for SERV_ACK */
#define	I_D_STATE_INB					6						/* Installation busy */

	/* B channel status */

#define	I_B_CHAN_IN_SERVICE				0			/* B channel in service */
#define	I_B_CHAN_MAINTENANCE			1          	/* B channel in maintenance */
#define	I_B_CHAN_OUT_OF_SERVICE			2			/* B channel out of order */

	/* Error */

#define	I_NO_ERROR						OK			/* No error */
#define	I_NO_ACTION						'A'			/* No action had been taken */
#define	I_MANAGEMENT_NOT_SUPPORTED		'M'			/* No D or B channel management */
#define	I_D_MANAGEMENT_NOT_SUPPORTED	'D'			/* No D channel management */
#define	I_WRONG_NAI						'N'			/* Wrong Nai */

			/* MNS SERVICE RQ/CO */

struct mns_service {
	uchar	preference;								/* service preference */
	uchar	int_id;									/* Interface Id if preference is I_PREF_D_CHAN or I_PREF_B_CHAN */
	uchar	b_chan;									/* What B channel if preference is I_PREF_B_CHAN */
	uchar	status;									/* new status (any case) */
	uchar	error_type;								/* type of error */
	uchar	maint_audit;							/* Maintenance oe Audit type of action */
};

#define Mns_service_pref				((struct mns_service FAR *)p_data) -> preference
#define Mns_service_int_id				((struct mns_service FAR *)p_data) -> int_id
#define Mns_service_b_chan				((struct mns_service FAR *)p_data) -> b_chan
#define Mns_service_status				((struct mns_service FAR *)p_data) -> status
#define Mns_service_error				((struct mns_service FAR *)p_data) -> error_type
#define Mns_service_action_type			((struct mns_service FAR *)p_data) -> maint_audit

#define Mns_service_size				(sizeof (struct mns_service))

#endif /* } */

/*--------------------------------------------------------------------------*/

						/* CONNECTION TYPE */

#define POINT_TO_POINT				1				/* point to point connection */
#define POINT_TO_MULTIPOINT			2				/* point to multipoint connection */

						/* SPID */

#define	NO_SPID						{0}				/* SPID is not provided */

						/* SUBSCRIPTION OPTION */

#define NO_SERVICE					0
#define ALL_SERVICES				255

						/* SUBSCRIPTION OPTION (AT5) */

#define	KEY_OPTION					1				/* Key system feature */
#define	TM_OPTION					2				/* Terminal management */
#define FCO_HCDT_OPTION				4				/* Flexible call offering / Hold-Conference-Drop-Transfer */
#define MM_OPTION					8				/* Management Maintenance */

#define SUBSCRIPTION_A				FCO_HCDT_OPTION
#define SUBSCRIPTION_B				FCO_HCDT_OPTION + TM_OPTION
#define SUBSCRIPTION_C				FCO_HCDT_OPTION + KEY_OPTION
#define SUBSCRIPTION_D				FCO_HCDT_OPTION + KEY_OPTION + TM_OPTION

						/* SUBSCRIPTION OPTION (NTT) */

#define	NOTIF_NO_CHAN				1				/* Notification of incoming call with NO_CHANNEL_AVAILABLE */
#define	CALL_WAITING				2				/* Call waiting */
#define THREE_PARTY_SERVICE			4				/* Three party service */
#define CALL_TRANSFER				8				/* Call transfer */
#define CALL_DEFLECTION				16				/* Call deflection */
#define INCOMING_CALL_BARRING		32				/* Incoming call barring control */
#define NOTIF_SUSP_RESUME			64				/* Notification of Suspend/Resume */
#define AUTOMATIC_CALL_ANSWERING	128				/* Automatic Telephone Answering */

						/* NS CONFIGURATION ERROR CODES */

#define	NS_CFG_ERR_MEMORY_FULL		'A'				/* Lack of memory */
#define	NS_CFG_ERR_NAI				'B'				/* NAI already configured */
#define	NS_CFG_ERR_NAI_TOO_BIG		'C'				/* NAI greater than the maximum allowed */
#define	NS_CFG_ERR_BUILD_NET_TABLE	'D'				/* error when building the network specific tables */
#define	NS_CFG_ERR_BUILD_P_TABLE	'E'				/* error when building the network specific pointer */
#define	NS_CFG_ERR_DL_TIMER			'F'				/* DL timer allocation */
#define	NS_CFG_ERR_NFAS_NAI_NB		'J'				/* Too many Nais supported by the same D channel bearer */
#define	NS_CFG_ERR_NFAS_GROUPS		'K'				/* Too many NFAS associations */

#define	NS_CFG_OK					OK				/* no configuration problems */

						/* MNS CONFIGURATION ERROR CODES */

#define	MNS_CFG_ERR_MEMORY_FULL		'G'				/* Lack of memory */
#define	MNS_CFG_ERR_NAI				'H'				/* NAI already configured */
#define	MNS_CFG_ERR_NAI_TOO_BIG		'I'				/* NAI greater than the maximum allowed */
#define	MNS_CFG_ERR_NB_CALL			'M'				/* too many calls */

#define	MNS_CFG_OK					OK				/* no configuration problems */

			/* Network signalling init configuration structure */

#if NS_HOLD_RETRIEVE == ON
#	define NS_MX_HOLD_TIMER			2				/* Maximum nb of timers used for Hold/Retrieve procedures */
#else
#	define NS_MX_HOLD_TIMER			0				/* Maximum nb of timers used for Hold/Retrieve procedures */
#endif

#define	NS_MX_CALL_TIMER			(19 + NS_MX_HOLD_TIMER)				/* Maximum nb of CALL timers */

#if NS_MAINTENANCE_CAPABILITY == ON
		/*NFAS D_BACKUP*/
#	define	NS_MX_DLCI_TIMER		9				/* Maximum nb of DLCI timers */
#else
#	define	NS_MX_DLCI_TIMER		5				/* Maximum nb of DLCI timers */
#endif

			/* NFAS mode */

#define	NFAS_TSP					1				/* No multiplexing at NS interface for the NFAS / D channel Backup */
#define	NFAS_X						2				/* Multiplexing done at NS interface for the NFAS / D channel Backup */

		/* Manual/Automatic DL activation */

#define	DL_INIT_AUTO				0				/* Automatic DL activation */
#define	DL_INIT_MANUAL				1				/* Manual DL activation */

struct ns_config {

	struct	confirm ns_confirm;								/* confirm ns */
	uchar			i_ns_na_nb;								/* number of network access */

	struct i_ns_na {
			nai_t		i_ns_nai;							/* NAI */
			uchar		i_ns_type;							/* type of network access */
			uchar		i_ns_fct;							/* function of the signalling entity */
			uchar		i_ns_channel_nb;					/* B channel nb */
			add_t		i_ns_outgoing_call_nb;				/* number of outgoing call contexts */
			add_t		i_ns_incoming_call_nb;				/* number of incoming call contexts */
			add_t		i_ns_mixed_call_nb;					/* number of mixed call contexts */
			uchar		i_ns_connection;					/* connection type : Point_multipoint or Point to point */
			uchar		i_ns_subscription;					/* subscription code */
			char		spid [NS_MX_SZ_SPID+1];				/* SPID : Service Profile ID (AT5/AT9) */
			timer_val_t i_ns_call_ti_val[NS_MX_CALL_TIMER];	/* timer values ( 0 ==> implicit value ) */
			timer_val_t i_ns_dl_ti_val[NS_MX_DLCI_TIMER];	/* DL timer value */
			uchar		i_ns_ti_309;						/* NS timer T309 option */
			ushort		i_na_country;						/* country where NS is running */
			uchar		i_na_operator_type;					/* network operator */
			add_t		i_ns_dl_ces;						/* DL ces to be selected for sending signalling messages */
			nai_t		i_ns_dl_nai;						/* DL interface access identifier */

#			if NS_MAINTENANCE_CAPABILITY == ON
				uchar	i_nfas_mode;						/*
																OFF : No NFAS support.

																NFAS_TSP : Transparent NFAS.
																		--> !!! INCOMPATIBLE MODE WHEN USING OMNITEL CC !!!
																		At NS interface, all incoming / outgoing calls are
																		sent/received on the Nai bearing the D channel.
																NFAS_X : Multiplexed NFAS.
																		--> !!! MUST BE CHOSEN WHEN USING OMNITEL CC !!!
																		At NS interface, the incoming / outgoing calls will
																		be passed on the actual Nai. (As if no NFAS was involved).
															*/

				uchar	i_d_channel_backup;					/* ON/OFF : D channel backup procedure */
				uchar	i_assoc_nb;							/* Number of items in the nai list */
				nai_t	i_nai_list[NS_MX_NFAS_NAI];			/* list of the Nai managed by the Nai. The first one will be used for the D channel backup if needed. */
				uchar	i_dl_init;							/* Manual or automatic DL activation */
#			endif

	} i_ns_na[NS_MX_NA];

	ushort	i_country;										/* country where NS is running */
	uchar	i_operator_type;								/* network operator */
	uchar	i_ie_tsp_checking;								/* check transparent IE */


};


			/* Manipulation macro's thru p_ns_config and p_ns_config_na pointers */

#define Ns_config_ret_code			p_ns_config -> ns_confirm.return_code	/* return code */
#define Ns_config_cause				p_ns_config -> ns_confirm.cause			/* cause Id */
#define Ns_config_diagnostic		p_ns_config -> ns_confirm.diagnostic	/* diagnostic*/

#define Ns_config_na_nb				p_ns_config -> i_ns_na_nb				/* number od network access */

#define Ns_config_na_a(xx)			&(p_ns_config -> i_ns_na[xx])			/* address of ns_na */

#define Ns_config_nai				p_ns_config_na -> i_ns_nai				/* NAI */
#define Ns_config_type				p_ns_config_na -> i_ns_type				/* network access type */
#define Ns_config_fct				p_ns_config_na -> i_ns_fct				/* NT : function of the NS entity */
#define Ns_config_connection		p_ns_config_na -> i_ns_connection		/* connection type : Point_multipoint or Point to point */
#define Ns_config_subscription		p_ns_config_na -> i_ns_subscription		/* subscription service code */
#define Ns_config_channel_nb		p_ns_config_na -> i_ns_channel_nb		/* number of B channels inside the	N A */
#define Ns_config_incoming_call_nb	p_ns_config_na -> i_ns_incoming_call_nb /* number of incoming call contexts */
#define Ns_config_outgoing_call_nb	p_ns_config_na -> i_ns_outgoing_call_nb /* number of outgoing call context */
#define Ns_config_mixed_call_nb		p_ns_config_na -> i_ns_mixed_call_nb	/* number of mixed call context */
#define Ns_config_call_ti_val(xx)	p_ns_config_na -> i_ns_call_ti_val[xx]	/* timer table */
#define Ns_config_dl_ti_val(xx)		p_ns_config_na -> i_ns_dl_ti_val[xx]	/* timer table */
#define Ns_config_a_spid			p_ns_config_na -> spid					/* SPID : Service Profile ID */
#define	Ns_config_T309_option		p_ns_config_na -> i_ns_ti_309			/* NS timer T309 option */
#define Ns_config_na_operator		p_ns_config_na -> i_na_operator_type	/* network operator (na specific)*/
#define Ns_config_na_country		p_ns_config_na -> i_na_country			/* country code (na specific) */
#define Ns_config_na_dl_ces			p_ns_config_na -> i_ns_dl_ces			/* DL ces */
#define Ns_config_dl_nai			p_ns_config_na -> i_ns_dl_nai			/* DL interface Nai */

#if NS_MAINTENANCE_CAPABILITY == ON
#	define Ns_config_nfas_mode		p_ns_config_na -> i_nfas_mode			/*	OFF, NFAS_TSP, NFAS_X */
#	define Ns_config_d_bck			p_ns_config_na -> i_d_channel_backup	/* Backup D channel feature (ON/OFF) */
#	define Ns_config_d_bck_nai		p_ns_config_na -> i_nai_list[0]			/* Nai for the backup D channel */
#	define Ns_config_nfas_number 	p_ns_config_na -> i_assoc_nb
#	define Ns_config_nfas_nai(x)	p_ns_config_na -> i_nai_list[x]			/* Nai number 'x' in the assoc list */
#	define Ns_config_dl_init 		p_ns_config_na -> i_dl_init				/* Manual or automatic DL activation */
#endif

#define Ns_config_operator			p_ns_config	-> i_operator_type			/* network operator (NS specific)*/
#define Ns_config_country			p_ns_config -> i_country				/* country code (NS specific)*/
#define	Ns_config_ie_tsp_checking	p_ns_config -> i_ie_tsp_checking        /* check transparent IE */

/*--------------------------------------------------------------------------*/

				/* interface specific to Supplementary Services */

#if NS_SUPP_SERVICES == ON
#	include "ns_ssint.h"
#endif

/*-------------------------------------------------------------------------*/

					/* FUNCTION DECLARATION */

#	if NS_SIM_BUILDER == OFF
#		define	build_sdu_cc_to_ns		FCT_NIL
#		define	build_sdu_dl_to_n		FCT_NIL
#		define	build_sdu_ti_to_ns		FCT_NIL
#		define	build_sdu_sm_to_mns		FCT_NIL
#	endif

#	if NS_SIM_ANALYSER == OFF
#		define	ana_sdu_ns				FCT_NIL
#		define	ana_sdu_mns				FCT_NIL
#		define	ana_sdu_ti_ns			FCT_NIL
#	endif

#	if NEW_FCT_STYLE == ON
		uchar	ns						(struct message FAR *p_msg);
		uchar	mns				 		(struct message FAR *p_msg);

		void	ns_var_init				(void);
		void	mns_var_init			(void);

#		if NS_SIM_BUILDER == ON
			uchar	build_sdu_cc_to_ns	(void);
			uchar	build_sdu_dl_to_n	(void);
			uchar	build_sdu_ti_to_ns	(void);
			uchar	build_sdu_sm_to_mns (void);
#		endif

#		if NS_SIM_ANALYSER == ON
			uchar	ana_sdu_ns			(struct message FAR *p_msg);
			uchar	ana_sdu_mns			(struct message FAR *p_msg);
			uchar	ana_sdu_ti_ns		(struct message FAR *p_msg);
#		endif

#	else
		uchar	ns						();
		uchar	mns				 		();

		void	ns_var_init				();
		void	mns_var_init			();

#		if NS_SIM_BUILDER == ON
			uchar	build_sdu_cc_to_ns	();
			uchar	build_sdu_dl_to_n	();
			uchar	build_sdu_ti_to_ns	();
			uchar	build_sdu_sm_to_mns ();
#		endif

#		if NS_SIM_ANALYSER == ON
			uchar	ana_sdu_ns			();
			uchar	ana_sdu_mns			();
			uchar	ana_sdu_ti_ns		();
#		endif

#	endif

/*--------------------------------------------------------------------------*/

#endif

/*EOF*/
