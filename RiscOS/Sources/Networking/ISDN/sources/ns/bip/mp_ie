
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ie.bip
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	bip_bc_spdu					(Void_parm);
	uchar	bip_calling_nb_spdu			(Void_parm);
	uchar	bip_cause_spdu				(Void_parm);
	uchar	bip_chan_id_spdu			(Void_parm);
	uchar	bip_llc_4ab_spdu			(Void_parm);
	uchar	bip_llc_4b_spdu				(Void_parm);
	uchar	bip_llc_5_spdu				(Void_parm);
	uchar	bip_llc_6_spdu				(Void_parm);
	uchar	bip_llc_7_spdu				(Void_parm);
	uchar	bip_progress_ind_check		(Void_parm);
	uchar	bip_restart_spdu			(Void_parm);

#endif


			/* ---------- Bearer capability (BC) */

D_START	(BIP_BC_P)
		D_VAL				(CODING_STD)
		D_TABL				(TRF_CAP)
		D_EXT_1				(_3)
		D_TABL				(TRF_MODE)

		D_IF_VAL			(MODE_CIRCUIT)
			D_VAL				(TRF_RATE_CIRCUIT)
		D_ELSE				(MODE_PKT)
			D_VAL				(TRF_RATE_PACKET)
		D_END_IF			(MODE)

		D_EXT_1				(_4)
		D_OPTIONAL_OCTET	(_5_5A)
		D_FUNCTION			(OCTETS_5)

		D_IF_VAL			(OCTET_5_PR)
			D_VAL			(LAYER_1)
			D_TABL			(PROTOCOL_1)

				/* V110 */

			D_IF_VAL		(V110)
				D_EXT_0_1	(_5)
				D_VAL		(V110_USER_RATE)
				D_PAD		(NS_PAD_5a)
			D_END_IF		(ENDIF_V110)

			D_EXT_1			(END_5)
		D_END_IF			(_5_PR)

		D_IF_VAL			(_TRF_MODE_PACKET)
			D_VAL			(_LAYER_ID_2)
			D_TABL			(_BC_PROTOCOL_ID_2)
			D_EXT_1			(_6_)

			D_VAL			(_LAYER_ID_2_)
			D_VAL			(_PROTOCOL_ID_3_X25_PL)
			D_EXT_1			(_7_)

		D_END_IF			(_MODE_PKT)

D_END	(BC_E)

START	(BIP_BC_P)
		VAL		(5,2,CODING_STD_CCITT,			&i_bc[0].coding_std)
		TABL	(0,5,BIP_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
		EXT_1	()
		TABL	(5,2,BIP_T_TRF_MODE,			&i_bc[0].trf_mode)

		IF_VAL	(I_IF, &i_bc[0].trf_mode, EQ, TRF_MODE_CIRCUIT)
			VAL	(0,5,TRF_RATE_64KBS,			&i_bc[0].trf_rate)
		ELSE	()
			VAL	(0,5,TRF_RATE_PACKET_MODE,		&i_bc[0].trf_rate)
		END_IF	()

		EXT_1	()
		OPTIONAL_OCTET ()
		FUNCTION(bip_bc_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,			&i_bc[0].layer_id_1)
			TABL	(0,5,BIP_T_BC_PROTOCOL_ID_1,&i_bc[0].protocol_id_1)

				/* V110 */

			IF_VAL  	(I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1 ()
				VAL		(0,5,RA_56KBS,			&i_bc[0].user_rate)
				PAD		(5,2)
			END_IF  	()

			EXT_1	()

		END_IF		()

		IF_VAL		(I_IF, &i_bc[0].trf_mode, EQ, TRF_MODE_PACKET)
			VAL		(5,2,LAYER_ID_2,			&i_bc[0].layer_id_2)
			TABL	(0,5,BIP_T_BC_PROTOCOL_ID_2,&i_bc[0].protocol_id_2)
			EXT_1	()

			VAL		(5,2,LAYER_ID_3,			&i_bc[0].layer_id_3)
			VAL		(0,5,PROTOCOL_ID_3_X25_PL,	&i_bc[0].protocol_id_3)
			EXT_1	()

		END_IF		()

END		(0)

			/* ---------- Call state (CALL_STATE) */

D_START	(BIP_CALL_STATE_P)
	D_TABL		(VAL_)
	D_PAD		(P3)
	D_END_OCTET (_3)
D_END			(CALL_STATE_E)

START	(BIP_CALL_STATE_P)
	TABL		(0,6,BIP_T_CALL_STATE,	&i_call_state[0].val)
	PAD			(6,2)
	END_OCTET	()
END				(0)

			/* ---------- Called party number (CALLED_NB) */

D_START	(BIP_CALLED_NB_P)
		D_TABL  (PLAN_ID)
		D_TABX  (TYPE)
		D_EXT_1 (_3)

		D_IF_VAL	(PLAN_UNKNOWN_)
			D_TEXT  (DIGIT_E_)
		D_ELSE		(_PLAN_ISDN_)
			D_TEXT  (_DIGIT_)
		D_END_IF	(_PLAN_)

D_END   (CALLED_NB_E)

START	(BIP_CALLED_NB_P)
		TABL	(0,4,BIP_T_CALLED_NB_PLAN,  &i_called_nb[0].plan_id)
		TABX	(4,3,BIP_TX_NB_PLAN, 		&i_called_nb[0].plan_id, &i_called_nb[0].nb_type)
		EXT_1   ()

		IF_VAL	(I_IF, &i_called_nb[0].plan_id, EQ, PLAN_UNKNOWN)
			TEXT(IA5, DIGIT_E, 				&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
		ELSE	()
			TEXT(IA5, DIGIT, 				&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
		END_IF	()
END	 (0)

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(BIP_CALLED_SUB_ADD_P)
	D_TABL  (TYPE)
	D_TABL  (IND)
	D_PAD	(NS_PAD_3)
	D_EXT_1 (_3)
	D_TEXT  (INFO_)
D_END		(CALLED_SUB_ADD_Q)

START	(BIP_CALLED_SUB_ADD_P)
	TABL	(4,3,BIP_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
	TABL	(3,1,BIP_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
	PAD		(0,3)
	EXT_1	()
	TEXT	(BINARY, ANY_OCTET, 	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
END			(0)

			/* ---------- Calling party number (CALLING_NB) */

D_START	(BIP_CALLING_NB_P)
	D_TABL			(TYPE)
	D_TABX			(PLAN_ID)

	D_FUNCTION		(CALLING_NB_FCT)
	D_IF_VAL		(DEFAULT_VAL)
		D_EXT_0_1	(_3)
		D_TABL		(PRESENTATION)
		D_PAD		(NS_PAD_3A)

		D_IF_VAL	(NOT_AVAIL)
			D_VAL	(NET_PROVIDED)
		D_ELSE		(_ELSE)
			D_TABL	(SCREEN_IND)
		D_END_IF	(_PRES)

	D_END_IF		(DEF_VAL)

	D_EXT_1			(_3A)
	D_OPTIONAL_OCTET(CALLING_NB_OPTIONAL)
	D_TEXT			(DIGIT_)
D_END   (CALLING_NB_E)

START	(BIP_CALLING_NB_P)
		TABL	(0,4,BIP_T_CALLING_NB_PLAN,	&i_calling_nb[0].plan_id)
		TABX	(4,3,BIP_TX_NB_PLAN, 		&i_calling_nb[0].plan_id, &i_calling_nb[0].nb_type)

		FUNCTION(bip_calling_nb_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,BIP_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
			PAD		(2,3)

			IF_VAL	(I_IF, &i_calling_nb[0].pres, EQ, PRES_NOT_AVAILABLE)
				VAL	(0,2, NETWORK_PROVIDED, &i_calling_nb[0].screen_ind)
			ELSE	()
				TABL(0,2, BIP_T_SCREEN_IND,	&i_calling_nb[0].screen_ind)
			END_IF	()

		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,ANY_CHAR, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

/*-------------------------------------------------------------------------*/

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(BIP_CALLING_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD	(NS_PAD_3)
		D_EXT_1 (_3)
		D_TEXT  (INFO_)
D_END	(CALLING_SUB_ADD_E)

START	(BIP_CALLING_SUB_ADD_P)
		TABL	(4,3,BIP_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		TABL	(3,1,BIP_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1	()
		TEXT	(BINARY, ANY_OCTET,			&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
END		(0)

			/* ---------- Cause (CAUSE) */

D_START	(BIP_CAUSE_P)
		D_TABL		(CODING_STD)
		D_PAD		(NS_PAD_3)
		D_TABL		(LOCATION)
		D_EXT_1		(_3A)

		D_IF_VAL	(_CODING_STD_CCITT)
			D_TABL	(_CLASS_)
			D_TABX	(_VAL_)
		D_ELSE		(_OTHER_CODING_)
			D_VAL	(_NORMAL_EVENT_0)
			D_TABX	(_C_V_NAT_SPF)
		D_END_IF	(_CODING_)

		D_EXT_1	 (_4)

D_END	(CAUSE_E_A)

START	(BIP_CAUSE_P)
		TABL	(5,2,BIP_T_CAUSE_CODING_STD,&i_cause[0].coding_std)
		PAD		(4,1)
		TABL	(0,4,BIP_T_LOCATION,		&i_cause[0].cause_loc)
		EXT_1	()

		IF_VAL	(I_IF, &i_cause[0].coding_std, EQ, CODING_STD_CCITT)
			TABL(4,3,BIP_T_C_C,				&i_cause[0].cause_class)
			TABX(0,4,BIP_TX_C_V_CCITT,		&i_cause[0].cause_class,  &i_cause[0].cause_val)
		ELSE	()
			TABL(4,3,BIP_T_C_C_SPF,			&i_cause[0].cause_class)
			TABX(0,4,BIP_TX_C_V_NAT_SPF,	&i_cause[0].cause_class,  &i_cause[0].cause_val)
		END_IF	()

		EXT_1	()
END	 (bip_cause_spdu)

D_START	(BIP_DIAG_P)
	D_TEXT	(OCTET)
D_END		(DIAGNOSTIC_E)

START	(BIP_DIAG_P)
	TEXT	(BINARY, ANY_OCTET,		&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END			(0)

			/* ---------- Channel idendification (CHAN_ID) */

D_START	(BIP_CHAN_ID_P)
	D_TABL  (INT_ID)
	D_VAL	(INT_TYPE)
	D_PAD   (NS_PAD_3)
	D_TABL  (PREF_EXCL)
	D_VAL	(D_CHAN_)
	D_TABL  (SEL)
	D_EXT_1 (_3)

	D_IF_VAL	(_INT_EXPL_)
		D_TABL	(_INT_ID_VAL_)
		D_EXT_1	(_INT_)
	D_END_IF	(_3_1_)

	D_IF_VAL	(IF_NO_CHAN)
		D_OPTIONAL_OCTET (_NEXT_)
	D_END_IF	(NO_CHANNEL)

	D_VAL	(CODING)
	D_VAL   (NB_MAP)
	D_VAL	(TYPE)
	D_EXT_1 (_3_2)
	D_TEXT  (NBER)

D_END   (CHAN_ID_E)

START	(BIP_CHAN_ID_P)
	TABL	(6,1,BIP_T_INT_ID, 		  	&i_chan_id[0].int_id)
	VAL		(5,1,INT_TYPE_PRI,			&i_chan_id[0].int_type)
	PAD		(4,1)
	TABL	(3,1,BIP_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	VAL		(2,1,NOT_D_CHAN,			&i_chan_id[0].d_chan)
	TABL	(0,2,BIP_T_CHAN_SEL_PRI,	&i_chan_id[0].chan_sel)
	EXT_1   ()

	IF_VAL	(I_IF, &i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		TABL(0,7,BIP_T_INT_ID_VAL, &i_chan_id[0].int_id_val)
		EXT_1()
	END_IF	()

	IF_VAL	(I_IF, &i_chan_id[0].chan_sel, EQ, NO_CHAN)
		OPTIONAL_OCTET ()
	END_IF	()

	VAL		(5,2,CODING_STD_CCITT,  	&i_chan_id[0].coding_std)
	VAL		(4,1,CHAN_NUMBER,   		&i_chan_id[0].nb_map)
	VAL		(0,4,B_CHAN,				&i_chan_id[0].chan_type)
	EXT_1	()
	TEXT	(IA5, ANY_OCTET,			&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
END		(bip_chan_id_spdu)

			/* ---------- High layer compatibility (HLC) */

D_START	(BIP_HLC_P)
	D_VAL				(INTERPRETATION)
	D_VAL				(PRESENTATION)
	D_TABL				(CODING_STD)
	D_EXT_1				(_3)

	D_IF_VAL			(IF_4)
		D_TABL			(TELESERVICE)

		D_IF_TABL		(IS_EXT_TELESERVICE)
			D_EXT_0_1	(_4)
			D_TABL		(EXT_TELESERVICE)
		D_END_IF		(IS_EXTENDED)

		D_EXT_1			(_5)
	D_ELSE				(ELSE_4)
		D_ANY_VAL		(TELESERVICE_SPF)
		D_EXT_1			(_4_SPF)
	D_END_IF			(ENDIF_4)

D_END					(HLC_E)

START	(BIP_HLC_P)
	VAL					(2,3,INTER_CCITT_CEPT,			&i_hlc[0].interpretation)
	VAL					(0,2,PRESENTATION_PROFIL,		&i_hlc[0].pres)
	TABL				(5,2,BIP_T_CODING_STD,			&i_hlc[0].coding_std)
	EXT_1				()

	IF_VAL				(I_IF, &i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL			(0,7,BIP_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)

		IF_TABL			(I_IF, &i_hlc[0].teleservice, IN, BIP_T_TELESERVICE_EXT)
			EXT_0_1		()
			TABL		(0,7,BIP_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
		END_IF			()
		EXT_1			()
	ELSE				()
		ANY_VAL			(0,7,	&i_hlc[0].teleservice)
		EXT_1			()
	END_IF				()

END						(0)

			/* ---------- Low layer compatibility (LLC) */

D_START	(BIP_LLC_P)
	D_TABL		(CODING_STD)
	D_TABL		(TRF_CAP)
	D_EXT_0_1	(_3)
	D_TABL		(OUT_BAND_NEG)
	D_PAD		(NS_PAD_3A)
	D_EXT_1		(_3A)
	D_TABL		(TRF_MODE)
	D_TABX		(TRF_RATE)
	D_FUNCTION  (IF_4AB)

	D_IF_VAL	(_4AB_NOT_DEFAULT)
		D_EXT_0_1	(_4)
		D_VAL	 	(CONFIG)
		D_VAL	 	(EST)
		D_TABL	 	(STRUCT)
		D_FUNCTION	(IF_4B)

		D_IF_VAL	(_4B_NOT_DEFAULT)
			D_EXT_0_1	(_4A)
			D_VAL		(SYMMETRY)
			D_TABX		(DEST_RATE)
		D_END_IF	(E_4B_NOT_DEFAULT)
	D_END_IF	(E_4AB_NOT_DEFAULT)
	D_EXT_1	 	(_4B)

	D_OPTIONAL_OCTET	(_5_6_7)

	D_FUNCTION	(IF_5)
	D_IF_VAL	(LLC_5_PR)

		D_VAL		(LAYER_1)
		D_TABL		(PROTOCOL_1)

			/* V110 */

		D_IF_VAL		(V110)
			D_EXT_0_1	(_5_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_EXT_0_1	(V110_5A)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(V110_PAD_5B)
			D_EXT_0_1	(V110_5B)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_EXT_0_1	(V110_5C)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
		D_END_IF		(ENDIF_V110)

			/* V120 */

		D_IF_VAL		(V120_)
			D_EXT_0_1	(_5_V120)
			D_TABL		(V120_SYN_ASYN)
			D_TABL		(V120_NEGOTIATION)
			D_TABL		(V120_USER_RATE)
			D_EXT_0_1	(V120_5A)
			D_TABL		(V120_HDR)
			D_TABL		(V120_MULTI_FRAME)
			D_TABL		(V120_OP_MODE)
			D_TABL		(V120_LLI)
			D_TABL		(V120_ASSIGN)
			D_TABL		(V120_BAND)
			D_PAD		(V120_PAD_5B)
			D_EXT_0_1	(V120_5B)
			D_TABL		(V120_STOP_BIT)
			D_TABL		(V120_DATA_BIT)
			D_TABL		(V120_PARITY)
			D_EXT_0_1	(V120_5C)
			D_TABL		(V120_DUPLEX)
			D_TABL		(V120_MODEM)
		D_END_IF	(ENDIF_V120)

		D_EXT_1		(_5_)

	D_END_IF	(ENDIF_5_PR)

	D_FUNCTION	(OCTET_6)
	D_IF_VAL	(OCTET_6_PR)
		D_VAL		(L_ID_2)
		D_TABL		(PROTOCOL_ID_2)
		D_EXT_0_1	(_6)
		D_ANY_VAL	(OPTION_2)
		D_EXT_1		(_6A)
	D_END_IF	(ENDIF_6_PR)

	D_FUNCTION	(OCTET_7)
	D_IF_VAL	(OCTET_7_PR)
		D_VAL		(L_ID_3)
		D_TABL		(PROTOCOL_ID_3)
		D_EXT_0_1	(_7)
		D_ANY_VAL	(OPTION_3)
		D_EXT_1		(_7A)
	D_END_IF	(ENDIF_7_PR)

D_END (LLC_E)

START	(BIP_LLC_P)
	TABL	(5,2,BIP_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(0,5,BIP_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
	EXT_0_1 ()
	TABL	(6,1,BIP_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
	PAD		(0,6)
	EXT_1	()
	TABL	(5,2,BIP_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(0,5,BIP_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
	FUNCTION(bip_llc_4ab_spdu)

	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 ()
		VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
		VAL		(0,2,EST_DEMAND,				&i_llc[0].est)
		TABL	(4,3,BIP_T_STRUCTURE,			&i_llc[0].structure)

		FUNCTION(bip_llc_4b_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_llc[0].symmetry)
			TABX	(0,5,BIP_TX_TRF_RATE,		&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
		END_IF	()
	END_IF	()
	EXT_1	()
	OPTIONAL_OCTET  ()

		/* following octets may be optional in some other circumstances */

	FUNCTION(bip_llc_5_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

		VAL		(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
		TABL	(0,5,BIP_T_PROTOCOL_ID_LLC_1,	&i_llc[0].protocol_id_1)

			/* V110 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			EXT_0_1 ()
			TABL	(6,1,BIP_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(5,1,BIP_T_NEGOTIATION,		&i_llc[0].in_band_neg)
			TABL	(0,5,BIP_T_USER_RATE,		&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(5,2,BIP_T_INTER_RATE,		&i_llc[0].inter_rate)
			TABL	(4,1,BIP_T_NIC_TX,			&i_llc[0].tx_nic)
			TABL	(3,1,BIP_T_NIC_RX,			&i_llc[0].rx_nic)
			TABL	(2,1,BIP_T_FLOW_CONTROL_TX,	&i_llc[0].tx_fc)
			TABL	(1,1,BIP_T_FLOW_CONTROL_RX,	&i_llc[0].rx_fc)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,BIP_T_STOP_BIT,		&i_llc[0].stop_bit)
			TABL	(3,2,BIP_T_DATA_BIT,		&i_llc[0].data_bit)
			TABL	(0,3,BIP_T_PARITY,			&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,BIP_T_DUPLEX,			&i_llc[0].duplex)
			TABL	(0,6,BIP_T_MODEM,			&i_llc[0].modem)
		END_IF  ()

			/* V120 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
			EXT_0_1 ()
			TABL	(6,1,BIP_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(5,1,BIP_T_NEGOTIATION,		&i_llc[0].in_band_neg)
			TABL	(0,5,BIP_T_USER_RATE,		&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(6,1,BIP_T_HEADER,			&i_llc[0].hdr)
			TABL	(5,1,BIP_T_MULTI_FRAME,		&i_llc[0].multi_frame)
			TABL	(4,1,BIP_T_OP_MODE,			&i_llc[0].op_mode)
			TABL	(3,1,BIP_T_LLI,				&i_llc[0].lli)
			TABL	(2,1,BIP_T_ASSIGN,			&i_llc[0].assign)
			TABL	(1,1,BIP_T_BAND,			&i_llc[0].band)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,BIP_T_STOP_BIT,		&i_llc[0].stop_bit)
			TABL	(3,2,BIP_T_DATA_BIT,		&i_llc[0].data_bit)
			TABL	(0,3,BIP_T_PARITY,			&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,BIP_T_DUPLEX,			&i_llc[0].duplex)
			TABL	(0,6,BIP_T_MODEM,			&i_llc[0].modem)
		END_IF	()
		EXT_1	()

	END_IF ()	/* octet 5 present */

	FUNCTION(bip_llc_6_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
		VAL		(5,2,LAYER_ID_2,				&i_llc[0].layer_id_2)
		TABL	(0,5,BIP_T_PROTOCOL_ID_LLC_2,	&i_llc[0].protocol_id_2)
		EXT_0_1 ()
		ANY_VAL	(0,7,							&i_llc[0].option_2)
		EXT_1	()
	END_IF ()	/* octet 6 present */

	FUNCTION(bip_llc_7_spdu)
	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		VAL		(5,2,LAYER_ID_3,				&i_llc[0].layer_id_3)
		TABL	(0,5,BIP_T_PROTOCOL_ID_LLC_3,	&i_llc[0].protocol_id_3)
		EXT_0_1	()
		ANY_VAL	(0,7,							&i_llc[0].option_3)
		EXT_1	()
	END_IF	()	/* octet 7 present */


END (0)

/*--------------------------------------------------------------------------*/

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(BIP_PROGRESS_IND_P)
	D_TABL  (CODING_STD)
	D_TABL	(LOCATION)
	D_PAD	(NS_PAD_3)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(BIP_PROGRESS_IND_P)
	TABL	(5,2,BIP_T_CAUSE_CODING_STD,	&i_progress_ind[0].coding_std)
	TABL	(0,4,BIP_T_LOCATION,			&i_progress_ind[0].progress_loc)
	PAD		(4,1)
	EXT_1	()
	TABL	(0,7,BIP_T_PROGRESS_IND_DESCR,	&i_progress_ind[0].progress_descr)
	EXT_1	()
END			(bip_progress_ind_check)

			/* ---------- Restart indicator */

D_START		(BIP_RESTART_IND_P)
	D_PAD	(NS_PAD_)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_IND_E)

START		(BIP_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,BIP_T_RESTART_IND_CLASS,	&i_restart_ind[0].restart_class)
	EXT_1	()
END			(bip_restart_spdu)

			/* ---------- Transit network selection (TRANSIT_NET_SEL) */

D_START	(BIP_TRANSIT_NET_SEL_P)
	D_VAL	(TYPE)
	D_VAL	(PLAN)
	D_EXT_1 (_3)
	D_TEXT  (NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(BIP_TRANSIT_NET_SEL_P)
	VAL		(4,3,NATIONAL_NETWORK_ID_TYPE,	&i_transit_net_sel[0].net_id_type)
	VAL		(0,4,CARRIER_ID_CODE,			&i_transit_net_sel[0].net_id_plan)
	EXT_1	()
	TEXT	(IA5,DIGIT,						&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

			/* ---------- Operator System Access (codeset 5, OS_ACCSS) */

D_START	(BIP_OS_ACCSS_P)
	D_VAL	(SERVICE_TYPE)
	D_TABL	(ACCSS_TYPE)
	D_EXT_1	(_3_)
D_END		(OS_ACCSS_E)

START	(BIP_OS_ACCSS_P)
	VAL		(2,5,	SERVICE_TYPE_UNSPECIFIED,	&i_os_accss[0].service_type)
	TABL	(0,2,	BIP_T_TYPE_ACCSS,				&i_os_accss[0].access_type)
	EXT_1	()
END			(0)

/*EOF*/
