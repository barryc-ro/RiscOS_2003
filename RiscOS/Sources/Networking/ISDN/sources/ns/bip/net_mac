
/*--------------------------------------------------------------------------*
 *                      M O D U L E     H E A D E R
 *
 * filename - net_mac.bip
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

				/*
                    MACROs and DECLARATIONS used to access the Network
                    Signalling entity (NS) from the user Layer 4 Signalling
                    entity (L4S).
                */

/*-------------------------------------------------------------------------*/


            /*
				Isdn_init_bip_ctx_???? = initialization of the common context
                                     used by a primitive macro :

                    INPUT :
                        - pr     = primitive ID,
                        - p_off  = pointer to the offset area,

            */

#define Isdn_init_bip_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(bip_,pr), p_off)
#define Isdn_init_bip_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define Get_ie_bip(pr,ie)                   Get_ie          (Paste(bip_,pr),Paste (bip_,ie))
#define Isdn_get_val_bip(pr,ie,fld)         Isdn_get_val    (Paste(bip_,pr),Paste (bip_,ie),fld)
#define Isdn_p_str_bip(pr,ie,fld)           Isdn_p_str      (Paste(bip_,pr),Paste (bip_,ie),fld)
#define Isdn_lgth_str_bip(pr,ie,fld)        Isdn_lgth_str   (Paste(bip_,pr),Paste (bip_,ie),fld)
#define Isdn_mx_lgth_str_bip(pr,ie,fld)     Isdn_mx_lgth_str(Paste(bip_,pr),Paste (bip_,ie),fld)
#define P_start_val_ns_bip(pr,ie)           P_start_val_ns  (Paste(bip_,pr),Paste (bip_,ie))
#define P_val_ns_bip(ie)                    P_val_ns        (Paste(bip_,ie))
#define Set_offset_bip(pr,ie)               Set_offset      (Paste(bip_,pr),Paste(bip_,ie))
#define Set_next_ie_bip(ie)                 Set_next_ie     (Paste(bip_,ie))
#define Set_val_bip(ie,fld,val)             Set_val         (Paste(bip_,ie),fld,val)
#define Set_str_bip(ie,lv,p_str,mx_sz)   	Set_str         (Paste(bip_,ie),lv,p_str,mx_sz)
#define Set_mem_bip(ie,lv,p_mem,sz)      	Set_mem         (Paste(bip_,ie),lv,p_mem,sz)
#define Set_to_next_ie_instance_bip(pr,ie)	Set_to_next_ie_instance (Paste(bip_,pr),Paste (bip_,ie))
#define Get_remaining_ie_instance_nb_bip(pr,ie,p_ie)		Get_remaining_ie_instance_nb (Paste(bip_,pr),Paste(bip_,ie),p_ie)

#if MESSAGE_HEADER_IE == ON
#   define Message_header_offset_bip	    ns_offset_t bip_message_header;
#else
#   define Message_header_offset_bip
#endif

/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

		/**************************************************
		**   Each offset is a relative pointer on the    **
		**   data of an IE element                       **
		**************************************************/

/*====================  CALL  ESTABLISHMENT  MESSAGES   =====================*/

		/* NS_ALERT_RQ */

struct off_ns_bip_te_alert_rq {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_chan_id;                     /* channel ID */
};

typedef struct off_ns_bip_te_alert_rq       off_ns_bip_alert_rq;
typedef struct off_ns_bip_te_alert_rq       off_ns_bip_net_alert_in;

        /* NS_ALERT_IN */

struct off_ns_bip_te_alert_in {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_progress_ind;                /* progress indicator */
};

typedef struct off_ns_bip_te_alert_in       off_ns_bip_net_alert_rq;
typedef struct off_ns_bip_te_alert_in       off_ns_bip_alert_in;

		/* NS_CALL_PROC_RQ */

struct off_ns_bip_te_call_proc_rq {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_chan_id;                     /* channel ID */
};

typedef struct off_ns_bip_te_call_proc_rq   off_ns_bip_call_proc_rq;
typedef struct off_ns_bip_te_call_proc_rq   off_ns_bip_net_call_proc_in;

		/* NS_CALL_PROC_IN */

struct off_ns_bip_te_call_proc_in {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_chan_id;                     /* channel ID */
};

typedef struct off_ns_bip_te_call_proc_in   off_ns_bip_net_call_proc_rq;
typedef struct off_ns_bip_te_call_proc_in   off_ns_bip_call_proc_in;

		/* NS_CONN_RQ */

struct off_ns_bip_te_conn_rq {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_bc;                          /* bearer capability */
	ns_offset_t bip_chan_id;                     /* channel ID */
	ns_offset_t bip_calling_nb;                  /* calling number */
	ns_offset_t bip_calling_sub_add;             /* calling sub-address */
	ns_offset_t bip_called_nb;                   /* called number */
	ns_offset_t bip_called_sub_add;              /* called sub-address */
	ns_offset_t bip_transit_net_sel;             /* transit network selection */
	ns_offset_t bip_llc;                         /* low layer compatibility */
	ns_offset_t bip_hlc;                         /* high layer compability */
	ns_offset_t bip_os_accss;                    /* operator system access */
};

typedef struct off_ns_bip_te_conn_rq        off_ns_bip_conn_rq;
typedef struct off_ns_bip_te_conn_rq        off_ns_bip_net_conn_in;

		/* NS_CONN_IN */

struct off_ns_bip_te_conn_in {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_bc;                          /* bearer capability */
	ns_offset_t bip_chan_id;                     /* channel ID */
	ns_offset_t bip_progress_ind;                /* progress indicator */
	ns_offset_t bip_calling_nb;                  /* calling number (from network) */
	ns_offset_t bip_calling_sub_add;             /* calling subaddress */
	ns_offset_t bip_called_nb;                   /* called number */
	ns_offset_t bip_called_sub_add;              /* called subaddress */
	ns_offset_t bip_llc;                         /* low layer capability */
	ns_offset_t bip_hlc;                         /* high layer compatibility */
};

typedef struct off_ns_bip_te_conn_in        off_ns_bip_net_conn_rq;
typedef struct off_ns_bip_te_conn_in        off_ns_bip_conn_in;

		/* NS_CONN_RS (CONN) */

struct off_ns_bip_te_conn_rs {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_chan_id;                     /* channel ID included for support of Annex D */
};

typedef struct off_ns_bip_te_conn_rs        off_ns_bip_conn_rs;
typedef struct off_ns_bip_te_conn_rs        off_ns_bip_net_conn_co;

		/* NS_CONN_CO (CONN or CONN_ACK) */

struct off_ns_bip_te_conn_co {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_progress_ind;                /* progress indicator */
};

typedef struct off_ns_bip_te_conn_co        off_ns_bip_net_conn_rs;
typedef struct off_ns_bip_te_conn_co        off_ns_bip_conn_co;

		/* NS_PROGRESS_IN */

struct off_ns_bip_te_progress_in {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_cause;                       /* cause */
	ns_offset_t bip_progress_ind;                /* progress indicator */
};

typedef struct off_ns_bip_te_progress_in    off_ns_bip_net_progress_rq;
typedef struct off_ns_bip_te_progress_in    off_ns_bip_progress_in;


/*===================== CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

struct off_ns_bip_te_clear_rq {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_cause;                       /* cause */
};

typedef struct off_ns_bip_te_clear_rq       off_ns_bip_clear_rq;
typedef struct off_ns_bip_te_clear_rq       off_ns_bip_net_clear_in;

		/* NS_CLEAR_IN */

struct off_ns_bip_te_clear_in {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_cause;                       /* cause */
};

typedef struct off_ns_bip_te_clear_in       off_ns_bip_net_clear_rq;
typedef struct off_ns_bip_te_clear_in       off_ns_bip_clear_in;

		/* NS_CLEAR_RS */

struct off_ns_bip_te_clear_rs {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_cause;                       /* cause */
};

typedef struct off_ns_bip_te_clear_rs       off_ns_bip_clear_rs;
typedef struct off_ns_bip_te_clear_rs       off_ns_bip_net_clear_co;

		/* NS_CLEAR_CO */

struct off_ns_bip_te_clear_co {
	Message_header_offset_bip               /* message header parameters */
	ns_offset_t bip_cause;                       /* cause */
};

typedef struct off_ns_bip_te_clear_co       off_ns_bip_net_clear_rs;
typedef struct off_ns_bip_te_clear_co       off_ns_bip_clear_co;

/*====================      MISCELLANEOUS  MESSAGES =======================*/

		/* NS_RESTART_RQ/IN/RS/CO */

struct off_ns_bip_te_restart_in {
	Message_header_offset_bip				/* message header parameters */
	ns_offset_t bip_chan_id;						/* channel identifier */
	ns_offset_t bip_restart_ind;					/* restart indicator */
};

typedef struct off_ns_bip_te_restart_in		off_ns_bip_restart_rq;
typedef struct off_ns_bip_te_restart_in		off_ns_bip_restart_in;

typedef struct off_ns_bip_te_restart_in		off_ns_bip_restart_rs;
typedef struct off_ns_bip_te_restart_in		off_ns_bip_restart_co;

		/******************************************************
		**  DESCRIPTION of the value of an IE.        		 **
		**  ---------------------------------           	 **
		**  EACH ENTRY SHALL BE IN ACCORDANCE WITH THE  	 **
		**  CORRESPONDING SSDU IE META-PROGRAM          	 **
		**                                                   **
		******************************************************/

		/* Bearer Capability (BC) */

struct val_ns_bip_bc {
	Next_instance_offset
	ie_val      trf_cap;                /* information transfer capability */
	ie_val      trf_mode;               /* information transfer mode */
	ie_val      protocol_id_1;          /* user information layer 1 protocol */
	ie_val      protocol_id_2;          /* user information layer 2 protocol */
};

		/* Called party number (CALLED_NB) */

struct val_ns_bip_called_nb {
	Next_instance_offset
	ie_val		plan_id;                /* numbering plan */
	ie_val      nb_type;           		/* type of number */
	ie_array    nb[BIP_MX_SZ_CALLED_NB+2];  /* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_bip_called_sub_add {
	Next_instance_offset
	ie_val      sub_add_type;           /* called subaddress type */
	ie_val      odd_even_ind;           /* odd/even indicator */
	ie_array    sub_add[BIP_MX_SZ_CALLED_SUB_ADD+2];    /* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_bip_calling_nb {
	Next_instance_offset
	ie_val		plan_id;                /* numbering plan */
	ie_val      nb_type;           		/* type of number */
	ie_val      pres;					/* presentation */
	ie_val		screen_ind;				/* screening indicators */
	ie_array    nb[BIP_MX_SZ_CALLING_NB+2]; /* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_bip_calling_sub_add {
	Next_instance_offset
	ie_val      sub_add_type;           /* calling subaddress type */
	ie_val      odd_even_ind;           /* odd/even indicator */
	ie_array    sub_add[BIP_MX_SZ_CALLING_SUB_ADD+2];   /* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_bip_cause {
	Next_instance_offset
	ie_val      coding_std;             /* coding standard */
	ie_val      cause_loc;              /* location */
	ie_val      cause_class;            /* cause class field */
	ie_val      cause_val;              /* cause value field */
	ie_array    cause_diag[BIP_MX_SZ_CAUSE_DIAG+2]; /* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_bip_chan_id {
	Next_instance_offset
	ie_val      int_type;               /* interface type */
	ie_val      int_id; 	            /* interface id type */
	ie_val      pref_excl;              /* preferred or exclusive channel */
	ie_val      chan_sel;               /* information channel selection */
	ie_val      int_id_val;	            /* interface id value */
	ie_array	chan_nb[BIP_MX_SZ_CHAN_ID+2];	/* channel number */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_bip_hlc {
	Next_instance_offset
	ie_val      coding_std;             /* coding standard */
	ie_val      teleservice;            /* high layer characteristics identification */
	ie_val      ext_teleservice;        /* extended high layer characteristics identification */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_bip_llc {
	Next_instance_offset
	ie_val      coding_std;             /* coding standard */
	ie_val      trf_cap;                /* information transfer capability */
	ie_val      out_band_neg;           /* out-band negotiation */
	ie_val      trf_mode;               /* transfer mode */
	ie_val      trf_rate;               /* information transfer rate */
	ie_val      structure;              /* structure */
	ie_val      dest_rate;              /* destination rate */
	ie_val      protocol_id_1;          /* user information layer 1 protocol */
	ie_val      syn_asyn;               /* synchronous/asynchronous */
	ie_val      negotiation;            /* negotiation */
	ie_val      user_rate;              /* user rate */
    ie_val      inter_rate;             /* intermediate rate */
	ie_val      nic_tx;                 /* network independent clock on transmission (Tx) */
    ie_val      nic_rx;                 /* network independent clock on reception (Rx) */
    ie_val      fc_tx;                  /* flow control on transmission (Tx) */
    ie_val      fc_rx;                  /* flow control on reception (Rx) */
    ie_val      hdr;                    /* rate adaption header included or not */
	ie_val      multi_frame;            /* multiple frame establishement support in DL */
	ie_val      op_mode;                /* mode of operation */
    ie_val      lli_negot;              /* logical link identifier negotiation */
    ie_val      assign;                 /* assignor/assignee */
    ie_val      band_negot;             /* in-band/out-band negotiation */
    ie_val      stop_bit;               /* number of stop bits */
    ie_val      data_bit;               /* number of data bits excluding parity if present */
    ie_val      parity;                 /* parity information */
    ie_val      duplex;                 /* duplex mode */
    ie_val      modem;                  /* modem type */
    ie_val      protocol_id_2;          /* user layer 2 protocol information */
    ie_val      option_2;               /* optional layer 2 protocol information */
    ie_val      protocol_id_3;          /* user information layer 3 protocol */
    ie_val      option_3;               /* optional layer 3 protocol information */
};


		/* Progress indicator (PROGRESS_IND) */

struct val_ns_bip_progress_ind {
	Next_instance_offset
	ie_val      coding_std;             /* coding standard */
	ie_val      progress_loc;           /* general location */
	ie_val      progress_descr;         /* progress description */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_bip_restart_ind {
	Next_instance_offset
	ie_val		restart_class;			/* class */
};

		/* Transit network selection (TRANSIT_NET_SEL) */

struct val_ns_bip_transit_net_sel {
	Next_instance_offset
	ie_array    net_id[BIP_MX_SZ_TRANSIT_NET_SEL+2];    /* address of network identification information */
};


		/* Operator system access (OS_ACCSS) */

struct val_ns_bip_os_accss {
	Next_instance_offset
	ie_val      access_type;			/* type of access */
};

/*=========================================================================*/

							/* Information Elements (IE) */

			/*
				Isdn_bip_store_bc : store the bearer capability information
									element :

					INPUT :
						- pr            = primitive ID,
						- trf_cap_      = information transfer capability,
						- trf_mode_     = information transfer mode,
						- protocol_id_1_= user information layer 1 protocol,
						- protocol_id_2_= user information layer 2 protocol,
			*/

#define Isdn_bip_store_bc(pr, trf_cap_, trf_mode_, protocol_id_1_, protocol_id_2_)  \
				Set_offset_bip  (pr,    bc);                                        \
				Set_val_bip     (bc,    trf_cap,        trf_cap_);                  \
				Set_val_bip     (bc,    trf_mode,       trf_mode_);                 \
				Set_val_bip     (bc,    protocol_id_1,  protocol_id_1_);            \
				Set_val_bip     (bc,    protocol_id_2,  protocol_id_2_);            \
				Set_next_ie_bip (bc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_called_nb : called number IE

					INPUT :
						- pr            = primitive ID,
						- plan_id_ 	    = numbering plan,
						- nb_type_  	= type of number,
						- nb_           = address of the literal string.
			*/

#define Isdn_bip_store_called_nb(pr, plan_id_, nb_type_, nb_)         \
		Set_offset_bip  (pr,        called_nb);                       \
		Set_val_bip     (called_nb, plan_id,   plan_id_);             \
		Set_val_bip     (called_nb, nb_type,   nb_type_);             \
		Set_str_bip     (called_nb, nb,             nb_,        BIP_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_called_sub_add : called sub-address IE

					INPUT :
						- pr            = primitive ID,
						- sub_add_type_ = subaddress type,
						- odd_even_ind_ = odd/even indicator,
						- sub_add_      = address of the literal string.

			*/

#define Isdn_bip_store_called_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
		Set_offset_bip  (pr,                called_sub_add);                        \
		Set_val_bip     (called_sub_add,    sub_add_type,   sub_add_type_);         \
		Set_val_bip     (called_sub_add,    odd_even_ind,   odd_even_ind_);         \
		Set_str_bip     (called_sub_add,    sub_add,        sub_add_, BIP_MX_SZ_CALLED_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_calling_nb : store calling number IE

					INPUT :
						- pr            = primitive ID,
						- plan_id_ 	    = numbering plan,
						- nb_type_  	= type of number,
						- pres_			= presentation,
						- screen_ind_  	= screening indicators,
						- nb_           = pointer on the calling number literal string.
			*/

#define Isdn_bip_store_calling_nb(pr, plan_id_, nb_type_, pres_, screen_ind_, nb_)     \
		Set_offset_bip  (pr,            calling_nb);                                \
		Set_val_bip     (calling_nb,	plan_id,	plan_id_);		\
		Set_val_bip     (calling_nb,	nb_type,	nb_type_);  	\
		Set_val_bip     (calling_nb,    pres,		pres_);  		\
		Set_val_bip     (calling_nb,    screen_ind,	screen_ind_);   \
		Set_str_bip     (calling_nb,    nb,             nb_, BIP_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_bip_calling_sub_add : calling sub-address IE

						INPUT :
						- pr            = primitive ID,
						- sub_add_type_ = subaddress type,
						- odd_even_ind_ = odd/even indicator,
						- sub_add_      = address of the literal string.

			*/

#define Isdn_bip_store_calling_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
		Set_offset_bip  (pr,                calling_sub_add);                       \
		Set_val_bip     (calling_sub_add,   sub_add_type,   sub_add_type_);         \
		Set_val_bip     (calling_sub_add,   odd_even_ind,   odd_even_ind_);         \
		Set_str_bip     (calling_sub_add,   sub_add,        sub_add_, BIP_MX_SZ_CALLING_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_cause : cause IE

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- cause_loc_    = cause location,
						- cause_class_  = cause class,
						- cause_val_    = cause value,
						- cause_diag_   = cause diagnostic.

			*/

#define Isdn_bip_store_cause(pr, coding_std_, cause_loc_, cause_class_, cause_val_, cause_diag_) \
		Set_offset_bip  (pr,    cause);                                             \
		Set_val_bip     (cause, coding_std, coding_std_);                           \
		Set_val_bip     (cause, cause_loc,  cause_loc_);                            \
		Set_val_bip     (cause, cause_class,cause_class_);                          \
		Set_val_bip     (cause, cause_val,  cause_val_);                            \
		Set_str_bip     (cause, cause_diag, cause_diag_, BIP_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_bip_store_chan_id_PRI : store channel ID IE

					INPUT :
						- pr            = primitive ID,
						- int_id_		= interface type,
						- pref_excl_    = preferred channel,
						- chan_sel_     = channel selection,
						- int_id_val_	= interface id value,
						- p_chan_nb_    = channel number.
			*/

#define Isdn_bip_store_chan_id_PRI(pr, int_id_, pref_excl_, chan_sel_, int_id_val_, p_chan_nb_) \
		Set_offset_bip  (pr,        chan_id);                           \
		Set_val_bip     (chan_id,   int_type,   INT_TYPE_PRI);          \
		Set_val_bip     (chan_id,   int_id, 	int_id_);          		\
		Set_val_bip     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_bip     (chan_id,   chan_sel,   chan_sel_);             \
		Set_val_bip     (chan_id,   int_id_val, int_id_val_);          	\
		Set_str_bip     (chan_id,   chan_nb,    p_chan_nb_,     BIP_MX_SZ_CHAN_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_hlc : high layer compatibility for
										non-CCITT coding standard

					INPUT :
						- pr        = primitive ID,
						- std       = coding standard,
						- tele    = teleservice,
						- ext_tele  = extended teleservice.
			*/

#define Isdn_bip_store_hlc(pr, std, tele, ext_tele)     	    \
		Set_offset_bip  (pr,    hlc);                           \
		Set_val_bip     (hlc,   coding_std,         std);       \
		Set_val_bip     (hlc,   teleservice,        tele);      \
		Set_val_bip     (hlc,   ext_teleservice,    ext_tele);  \
		Set_next_ie_bip (hlc)

			/*
				Isdn_bip_store_hlc_CCITT : high layer compatibility for
										CCITT coding standard

					INPUT :
						- pr        = primitive ID,
						- tele    	= teleservice,
						- ext_tele  = extended teleservice.
			*/

#define Isdn_bip_store_hlc_CCITT(pr, tele, ext_tele)        \
		Isdn_bip_store_hlc  (pr, CODING_STD_CCITT, tele, ext_tele)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_llc : low layer compatibility

				First definition : in one part :

					INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
						- trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
                        - trf_rate_     = information transfer rate,
                        - structure_    = structure,
                        - dest_rate_    = destination rate,
                        - protocol_id_1_= user information layer 1 protocol,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
                        - fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
						- hdr_          = rate adaption header included or not,
                        - multi_frame_  = multiple frame establishement support in DL,
                        - op_mode_      = mode of operation,
                        - lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - option_2_     = optional layer 2 protocol information,
                        - protocol_id_3_= user information layer 3 protocol,
                        - option_3_     = optional layer 3 protocol information.
            */

#define Isdn_bip_store_llc(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, protocol_id_1_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
		Set_offset_bip  (pr,    llc);                                       \
		Set_val_bip     (llc,   coding_std,     coding_std_);               \
		Set_val_bip     (llc,   trf_cap,        trf_cap_);                  \
		Set_val_bip     (llc,   out_band_neg,   out_neg);                   \
		Set_val_bip     (llc,   trf_mode,       trf_mode_);                 \
		Set_val_bip     (llc,   trf_rate,       trf_rate_);                 \
		Set_val_bip     (llc,   structure,      structure_);                \
		Set_val_bip     (llc,   dest_rate,      dest_rate_);                \
		Set_val_bip     (llc,   protocol_id_1,  protocol_id_1_);            \
		Set_val_bip     (llc,   syn_asyn,       syn_asyn_);                 \
		Set_val_bip     (llc,   negotiation,    negotiation_);              \
		Set_val_bip     (llc,   user_rate,      user_rate_);                \
		Set_val_bip     (llc,   inter_rate,     inter_rate_);               \
		Set_val_bip     (llc,   nic_tx,         nic_tx_);                   \
		Set_val_bip     (llc,   nic_rx,         nic_rx_);                   \
		Set_val_bip     (llc,   fc_tx,          fc_tx_);                    \
		Set_val_bip     (llc,   fc_rx,          fc_rx_);                    \
		Set_val_bip     (llc,   hdr,            hdr_);                      \
		Set_val_bip     (llc,   multi_frame,    multi_frame_);              \
		Set_val_bip     (llc,   op_mode,        op_mode_);                  \
		Set_val_bip     (llc,   lli_negot,      lli_negot_);                \
		Set_val_bip     (llc,   assign,         assign_);                   \
		Set_val_bip     (llc,   band_negot,     band_negot_);               \
		Set_val_bip     (llc,   stop_bit,       stop_bit_);                 \
		Set_val_bip     (llc,   data_bit,       data_bit_);                 \
		Set_val_bip     (llc,   parity,         parity_);                   \
		Set_val_bip     (llc,   duplex,         duplex_);                   \
		Set_val_bip     (llc,   modem,          modem_);                    \
		Set_val_bip     (llc,   protocol_id_2,  protocol_id_2_);            \
		Set_val_bip     (llc,   option_2,       option_2_);                 \
		Set_val_bip     (llc,   protocol_id_3,  protocol_id_3_);            \
		Set_val_bip     (llc,   option_3,       option_3_);                 \
		Set_next_ie_bip (llc)

            /*--------------------------------------------*/

            /*
				Isdn_bip_store_llc : low layer compatibility

                Second definition : DIVIDED IN 2 PARTS for compilers which
                do not accept so many parameters in macros :

					Isdn_bip_store_llc_1_4 : octet 1 to octet 4 included,

						INPUT :
                            - pr            = primitive ID,
                            - coding_std_   = coding standard,
							- trf_cap_      = information transfer capability,
                            - out_neg       = out band negotiation,
                            - trf_mode_     = transfer mode,
                            - trf_rate_     = information transfer rate,
                            - structure_    = structure,
                            - dest_rate_    = destination rate,

					Isdn_bip_store_llc_5_7 : octet 5 to octet 7 included,

                        - protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
                        - fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
                        - hdr_          = rate adaption header included or not,
                        - multi_frame_  = multiple frame establishement support in DL,
                        - op_mode_      = mode of operation,
                        - lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
						- data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - option_2_     = optional layer 2 protocol information,
                        - protocol_id_3_= user information layer 3 protocol,
                        - option_3_     = optional layer 3 protocol information.
            */

#define Isdn_bip_store_llc_1_4(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_)\
		Set_offset_bip  (pr,    llc);                                       \
		Set_val_bip     (llc,   coding_std,     coding_std_);               \
		Set_val_bip     (llc,   trf_cap,        trf_cap_);                  \
		Set_val_bip     (llc,   out_band_neg,   out_neg);                   \
		Set_val_bip     (llc,   trf_mode,       trf_mode_);                 \
		Set_val_bip     (llc,   trf_rate,       trf_rate_);                 \
		Set_val_bip     (llc,   structure,      structure_);                \
		Set_val_bip     (llc,   dest_rate,      dest_rate_)

#define Isdn_bip_store_llc_5_7(protocol_id_1_,  syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
		Set_val_bip     (llc,   protocol_id_1,  protocol_id_1_);            \
		Set_val_bip     (llc,   syn_asyn,       syn_asyn_);                 \
		Set_val_bip     (llc,   negotiation,    negotiation_);              \
		Set_val_bip     (llc,   user_rate,      user_rate_);                \
		Set_val_bip     (llc,   inter_rate,     inter_rate_);               \
		Set_val_bip     (llc,   nic_tx,         nic_tx_);                   \
		Set_val_bip     (llc,   nic_rx,         nic_rx_);                   \
		Set_val_bip     (llc,   fc_tx,          fc_tx_);                    \
		Set_val_bip     (llc,   fc_rx,          fc_rx_);                    \
		Set_val_bip     (llc,   hdr,            hdr_);                      \
		Set_val_bip     (llc,   multi_frame,    multi_frame_);              \
		Set_val_bip     (llc,   op_mode,        op_mode_);                  \
		Set_val_bip     (llc,   lli_negot,      lli_negot_);                \
		Set_val_bip     (llc,   assign,         assign_);                   \
		Set_val_bip     (llc,   band_negot,     band_negot_);               \
		Set_val_bip     (llc,   stop_bit,       stop_bit_);                 \
		Set_val_bip     (llc,   data_bit,       data_bit_);                 \
		Set_val_bip     (llc,   parity,         parity_);                   \
		Set_val_bip     (llc,   duplex,         duplex_);                   \
		Set_val_bip     (llc,   modem,          modem_);                    \
		Set_val_bip     (llc,   protocol_id_2,  protocol_id_2_);            \
		Set_val_bip     (llc,   option_2,       option_2_);                 \
		Set_val_bip     (llc,   protocol_id_3,  protocol_id_3_);            \
		Set_val_bip     (llc,   option_3,       option_3_);                 \
		Set_next_ie_bip (llc)

            /*--------------------------------------------*/

            /*
				Isdn_bip_store_llc_V110 : low layer compatibility for
                                            V110 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
                        - trf_rate_     = information transfer rate,
                        - structure_    = structure,
						- dest_rate_    = destination rate,
						- syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
						- inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
                        - fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_bip_store_llc_V110(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_bip_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
                            out_neg,        trf_mode_,      trf_rate_,          \
                            structure_,     dest_rate_);                        \
		Isdn_bip_store_llc_5_7(PROTOCOL_ID_1_V110,  syn_asyn_,  negotiation_,   \
                            user_rate_,     inter_rate_,    nic_tx_,            \
                            nic_rx_,        fc_tx_,         fc_rx_,             \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            stop_bit_,      data_bit_,      parity_,            \
							duplex_,        modem_,         protocol_id_2_,     \
                            BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

            /*--------------------------------------------*/
			/*
				Isdn_bip_store_llc_X31 : low layer compatibility for
											X31 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
                        - trf_rate_     = information transfer rate,
                        - structure_    = structure,
						- dest_rate_    = destination rate,
						- syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
						- inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
                        - fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_bip_store_llc_X31(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_bip_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
                            out_neg,        trf_mode_,      trf_rate_,          \
                            structure_,     dest_rate_);                        \
		Isdn_bip_store_llc_5_7(PROTOCOL_ID_1_X31,  syn_asyn_,  negotiation_,   \
                            user_rate_,     inter_rate_,    nic_tx_,            \
                            nic_rx_,        fc_tx_,         fc_rx_,             \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            stop_bit_,      data_bit_,      parity_,            \
							duplex_,        modem_,         protocol_id_2_,     \
                            BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

            /*--------------------------------------------*/

            /*
				Isdn_bip_store_llc_V120 : low layer compatibility for
                                            V120 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
                        - trf_rate_     = information transfer rate,
						- structure_    = structure,
						- dest_rate_    = destination rate,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
						- user_rate_    = user rate,
                        - hdr_          = rate adaption header included or not,
                        - multi_frame_  = multiple frame establishement support in DL,
                        - op_mode_      = mode of operation,
                        - lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
						- duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_bip_store_llc_V120(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_bip_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
                            out_neg,        trf_mode_,      trf_rate_,          \
                            structure_,     dest_rate_);                        \
		Isdn_bip_store_llc_5_7(PROTOCOL_ID_1_V120,                              \
                            syn_asyn_,      negotiation_,   user_rate_,         \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   hdr_,               \
							multi_frame_,   op_mode_,       lli_negot_,         \
							assign_,        band_negot_,    stop_bit_,          \
							data_bit_,      parity_,        duplex_,            \
							modem_,         protocol_id_2_, BYTE_VAL_NIL,       \
							protocol_id_3_,  BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_os_accss : Operator system access (OS_ACCSS)

					INPUT :
						- pr            = primitive ID,
						- accss_type_   = type of access
			*/

#define Isdn_bip_store_os_accss(pr, access_type_)               	\
		Set_offset_bip  (pr,        os_accss);                      \
		Set_val_bip     (os_accss,  access_type,    access_type_);  \
		Set_next_ie_bip (os_accss)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_progress_ind : progress indicator

					INPUT :
						- pr                = primitive ID,
						- coding_std_       = coding standard,
						- progress_loc_     = general location,
						- progress_descr_   = description.

			*/

#define Isdn_bip_store_progress_ind(pr, coding_std_, progress_loc_, progress_descr_)\
		Set_offset_bip  (pr,            progress_ind);                      \
		Set_val_bip     (progress_ind,  coding_std,     coding_std_);       \
		Set_val_bip     (progress_ind,  progress_loc,   progress_loc_);     \
		Set_val_bip     (progress_ind,  progress_descr, progress_descr_);   \
		Set_next_ie_bip (progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_bip_store_restart_ind(pr, class_)							\
		Set_offset_bip	(pr,			restart_ind);					\
		Set_val_bip		(restart_ind,	restart_class,	class_);		\
		Set_next_ie_bip	(restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_bip_store_transit_net_sel : transit network selection

					INPUT :
						- pr            = primitive ID,
						- net_id_       = address of network identification.
			*/

#define Isdn_bip_store_transit_net_sel(pr, net_id_type_, net_id_plan_, net_id_) \
		Set_offset_bip  (pr,                transit_net_sel);                   \
		Set_str_bip     (transit_net_sel,   net_id,         net_id_,    BIP_MX_SZ_TRANSIT_NET_SEL+1)

/*-------------------------------------------------------------------------*/


/*EOF*/
