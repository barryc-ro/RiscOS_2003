
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_switch.bip
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      bip_csc_dl_reinit - implement an unexpected data link reinit.
 *
 *		bip_circuit_switched_call - implements the processing of the call
 *								  control procedures.
 *
 *
 *		bip_circuit_switched_call_n - implements the processing of the call
 *									control procedures.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NEW_FCT_STYLE == ON
	void	bip_u0						(void);
	void	bip_u1						(void);
	void	bip_u3						(void);
	void	bip_u4						(void);
	void	bip_u6						(void);
	void	bip_u7						(void);
	void	bip_u8						(void);
	void	bip_u9						(void);
	void	bip_u10						(void);
	void	bip_u11						(void);
	void	bip_u12						(void);
	void	bip_u19						(void);
	void	bip_csc_dl_reinit			(void);
	uchar	bip_circuit_switched_call	(void);
	uchar	bip_error_handler			(void);
#else
	void	bip_u0						();
	void	bip_u1						();
	void	bip_u3						();
	void	bip_u4						();
	void	bip_u6						();
	void	bip_u7						();
	void	bip_u8						();
	void	bip_u9						();
	void	bip_u10						();
	void	bip_u11						();
	void	bip_u12						();
	void	bip_u19						();
	void	bip_csc_dl_reinit			();
	uchar	bip_circuit_switched_call	();
	uchar	bip_error_handler			();
#endif

						/*--------------*/
						/*				*/
						/*	USER SIDE	*/
						/*				*/
						/*--------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	bip_csc_dl_reinit () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void bip_csc_dl_reinit ();

Related
functions usage		void bip_csc_dl_reinit ();

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void bip_csc_dl_reinit ()
{
	/* nothing to do */
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			bip_circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage		  	uchar bip_circuit_switched_call ();

Related
functions usage void bip_u0 .... bip_u19 ()

Description	 bip_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value	uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*                                CLEARING PROCEDURES
*
*		TE                         NT/NETWORK                        TE
* _________________             _________________            _________________
* |               |             |               |            |               |
* |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
* |==========>....|------------>|.......|.....  |            |               |
* | start T305    |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
* |<===========...|<------------|...    |    ...|----------->|...===========>|
* |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
* |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
* |             ..|------------>|       |    ...|<-----------|...  start T308|
* |               |             |       |    .  |            |               |
* |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
* |               |             |       |    ...|----------->|...===========>|
* |               |             |       |       |            |     stop T308 |
* |---------------|             |---------------|            |---------------|
*/

uchar bip_circuit_switched_call ()
{

#	if NS_RESTART_PROCEDURE == ON
		uchar	FAR *p_data;
#	endif

					/* 1 - EVENT DRIVEN PROCESSING  */

	if (i_entity_origination == ENT_MNS) {

#		if NS_RESTART_PROCEDURE == ON

			switch (event_id) {

				case MNS_RESTART_RQ :

					if (Na_type == BRI) {

							/* Return MNS_RESTART_CO with error ("restart procedures not implemented") and do nothing else */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_NOT_IMPLEMENTED);
						return (STOP);
					}

					if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

						if (Mns_restart_b_chan_nb > 23) {

								/* Channel NB must be in range 1..23 ->
									Return MNS_RESTART_CO with error ("bad Channel Nb") and do nothing else */

							ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_CHAN_NB);
							return (STOP);
						}
					}

					if (Dl_rest_state == STATE_REST_0) {

							/* set current data pointer using p_ssdu pointer */

						p_data = p_ssdu;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */
							I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
							I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

							I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
							*I_chan_id_a_chan_number = Mns_restart_b_chan_nb;	/* channel number */
						}

						if (I_restart_ind_class == RI_ALL_INTERFACES) {
							csc_clear_all_call ();
							Na_internal_restart = ON;
						}

						Send_to_call_control (NS_RESTART_IN);	/* on CONN_ID_MANAGEMENT */
						Start_dl_timer (BIP_T317);

						Set_call_ref_not_nil ();

						if (I_chan_id_a_chan_number != A_NIL) {

							/* Set the extension bit to 1 in the chan_nb field before sending SPDU */

							Set_ext_bit (*I_chan_id_a_chan_number);
						}

						Send_to_d_channel (RESTART);	/* with CALL_REF_GLOBAL */
						N316 = 0;
						Start_dl_timer (BIP_T316);
						Dl_rest_state = STATE_REST_1;

					} else {

						ns_unexpected_ev ();
					}

					break;

#				if ASSERT == ON

				default :
					Trap (TRAP_MNS_CODE, "bip_circuit_switched_call");

#				endif

			}

#		endif

		return (OK);
	}


	switch (event_id) {

						/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

						/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) != OK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_RESOURCE_UNAVAILABLE, C_V_NO_CIRCUIT_AVAILABLE_34, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;

						/* DISCONNECT */

		case DA_DISC :

			switch (Call_state) {

				case STATE_DISCONNECT_REQUEST_11 :
					Stop_timer_ns (BIP_T305);
					Send_to_call_control (NS_CLEAR_IN);
					Reset_internal_ie ();

					if (disc_cause_error () == NOK) {
						set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					}

					Send_to_d_channel_and_save_spdu (REL);
					N308 = 0;
					Set_state (STATE_RELEASE_REQUEST_19);
					Start_timer_ns (BIP_T308);
					break;

				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
				case STATE_DISCONNECT_INDICATION_12 :
					ns_unexpected_ev ();
					break;

				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_CONNECT_REQUEST_8 :
					Release_saved_spdu ();			/* saved CONN no more useful */

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);
					Set_state (STATE_DISCONNECT_INDICATION_12);
					break;

			}

			return (OK);

						/* RELEASE */

		case DA_REL :

			switch (Call_state) {

				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
					ns_unexpected_ev ();
					break;

				case STATE_RELEASE_REQUEST_19 :
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);
					Reset_internal_ie ();
					set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
					Send_to_d_channel (REL_COMP);
					call_clear ();
			}

			return (OK);

						/* RELEASE COMPLETE */

		case DA_REL_COMP :
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();							/* free call context */
			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_WAIT_DL :
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_CALL_PRESENT_6 :
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_CONNECT_REQUEST_8 :
					ns_unexpected_ev ();
					break;

				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					disc_cause_error ();
					Stop_timer_ns  (BIP_T300);
					go_to_state_19 (BIP_T308);
					break;

				case STATE_CALL_INIT_1 :
					Release_saved_spdu ();							/* saved setup no more useful */

					/* process the default */

				default :
					ns_stop_all_timers ();
					Save_cause ();								/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);					/* send a DISCONNECT message */
					Start_timer_ns (BIP_T305);					/* start T305 */
					Set_state (STATE_DISCONNECT_REQUEST_11);	/* enter the Disconnect Request state */
					break;

			}

			return (OK);


						/* STATUS */

		case DA_STATUS :

			if (I_call_state_val == STATE_NULL_0) {

				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();							/* free call context */

			}

			return (OK);

						/* STATUS_ENQ */

		case DA_STATUS_ENQ :
			Reset_internal_ie ();
			set_i_state (Call_state);
			set_i_cause	(C_C_NORMAL_EVENT, C_V_RESPONSE_TO_STATUS_ENQUIRY_30, P_NIL);
			Send_to_d_channel (STATUS);
			return (OK);

#		if NS_RESTART_PROCEDURE == ON /* { */

			case TI_316 :

				if (Dl_rest_state == STATE_REST_1) {

					if (++N316 == BIP_MX_N316) {

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_316);
						Dl_restart_reset ();

					} else {

						Set_call_ref_not_nil ();

							/* store Restart Indicator with value saved in DL context */

						set_ie_i (CODESET_0, RESTART_IND);
						I_restart_ind_class = Dl_rest_class;

						if (I_restart_ind_class == RI_INDICATED_CHANNEL) {

								/* store Channel-ID */

							ie_implicit_val_x (CODESET_0, CHAN_ID, 0);
							set_ie_i (CODESET_0, CHAN_ID);

							I_chan_id_pref_excl = CHAN_EXCL;	/* Exclusive */

							I_chan_id_chan_sel = AS_INDICATED;	/* Channel Number as indicated in following octets */
							I_chan_id_chan_number_lgth = 1;		/* 1 Channel number */

							I_chan_id_a_chan_number = p_ind_buffer++;			/* save data into indirect buffer */
							*I_chan_id_a_chan_number = Dl_rest_chan_nb;	/* channel number */
							Set_ext_bit (*I_chan_id_a_chan_number);		/* Set the extension bit to 1 in the chan_nb field before sending SPDU */
						}

						Send_to_d_channel (RESTART);			/* with CALL_REF_GLOBAL */
						Restart_dl_timer (BIP_T316);
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case TI_317 :

				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

							/* Return MNS_RESTART_CO with error */

						ns_send_mns_restart (REPORT_TYPE_ERROR, 0, 0, NS_RESTART_ERR_TI_317);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART :

				if (Dl_rest_state == STATE_REST_0) {

					if (I_restart_ind_class == RI_ALL_INTERFACES) {
						csc_clear_all_call ();
						Na_internal_restart = ON;
					}

					Start_dl_timer (BIP_T317);
					Set_call_ref_nil ();		/* to use CONN_ID_MANAGEMENT */
					Send_to_call_control (NS_RESTART_IN);
					Dl_rest_state = STATE_REST_2;

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case DA_RESTART_ACK :

				if (Dl_rest_state == STATE_REST_1) {

					Stop_dl_timer (BIP_T316);

					if (Dl_rest_resp == ON) {

						ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
						Dl_restart_reset ();

					} else {

						Dl_rest_ack = ON;
					}

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RS :

				Stop_dl_timer (BIP_T317);
				switch (Dl_rest_state) {

					case STATE_REST_1 :

						if (Dl_rest_ack == ON) {

							ns_send_mns_restart (OK, I_restart_ind_class, 0, 0);
							Dl_restart_reset ();

						} else {

							Dl_rest_resp = ON;
						}

						break;

					case STATE_REST_2 :

						Set_call_ref_not_nil ();
						Send_to_d_channel (RESTART_ACK);
						Dl_restart_reset ();
						break;

					default :

						ns_unexpected_ev ();
				}

				return (OK);

			case NS_RESTART_RQ :

				if (Dl_rest_state != STATE_REST_0) {

					call_clear ();

				} else {

					ns_unexpected_ev ();
				}

				return (OK);

#		endif /* NS_RESTART_PROCEDURE == ON} */

	} /* End switch (event_id) */

/*.........................................................................*/

					/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

				Dispatch to the function that processes the state except if
				it is a clearing event not received  in an exceptional condition.
				In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "bip_circuit_switched_call");
	}

	switch (Call_state) {

			/* Null state (u0) */

		case STATE_NULL_0 :
		case STATE_WAIT_DL :
			bip_u0 ();
			break;

			/* Call initiated (u1) */

		case STATE_CALL_INIT_1 :
			bip_u1 ();
			break;

			/* Outgoing call proceeding (u3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			bip_u3 ();
			break;

			/* Call delivered (u4) */

		case STATE_CALL_DELIVERED_4 :
			bip_u4 ();
			break;

			/* Call present (u6) */

		case STATE_CALL_PRESENT_6 :
			bip_u6 ();
			break;

			/* Call received (u7) */

		case STATE_CALL_RECEIVED_7 :
			bip_u7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			bip_u8 ();
			break;

			/* Incoming call proceeding state (u9) */

		case STATE_INCOMING_CALL_PROC_9 :
			bip_u9 ();
			break;

			/*  Active (u10) */

		case STATE_ACTIVE_10 :
			bip_u10 ();
			break;

			/* Disconnect request (u11) */

		case STATE_DISCONNECT_REQUEST_11 :
			bip_u11 ();
			break;

			/* Disconnect indication (u12) */

		case STATE_DISCONNECT_INDICATION_12 :
			bip_u12 ();
			break;

			/* Release request (u19) */

		case STATE_RELEASE_REQUEST_19 :
			bip_u19 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "bip_circuit_switched_call");

	}

	return (OK);
}

#if EQUIPMENT == NT2

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	bip_csc_dl_reinit_n () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void bip_csc_dl_reinit_n ();

Related
functions usage		void send_state (uchar class, uchar value, uchar diagnostic);

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

void bip_csc_dl_reinit_n ()
{
	/* nothing to do */
}

/*--------------------------------------------------------------------------*/

/*                                CLEARING PROCEDURES
*
*       TE                         NT/NETWORK                        TE
* _________________             _________________            _________________
* |               |             |               |            |               |
* |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
* |==========>....|------------>|.......|.....  |            |               |
* | start T305    |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |               |             |  .    |    .  |            |               |
* |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
* |<===========...|<------------|...    |    ...|----------->|...===========>|
* |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
* |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
* |             ..|------------>|       |    ...|<-----------|...  start T308|
* |               |             |       |    .  |            |               |
* |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
* |               |             |       |    ...|----------->|...===========>|
* |               |             |       |       |            |     stop T308 |
* |---------------|             |---------------|            |---------------|
*
*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            bip_circuit_switched_call_n - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar bip_circuit_switched_call_n ();

Related
functions usage void bip_n0 .... bip_n254 ()

Description     bip_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

uchar bip_circuit_switched_call_n ()
{
	Trap (TRAP_NS_ERROR, "circuit_switched_call_n");
    return (NOK);
}

#endif

/*EOF*/
