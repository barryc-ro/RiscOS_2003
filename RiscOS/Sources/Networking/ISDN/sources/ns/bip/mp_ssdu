
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ssdu.bip
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	bip_calling_nb_ssdu			(Void_parm);
	uchar	bip_cause_ssdu				(Void_parm);
	uchar	bip_chan_id_chan_nb_ssdu	(Void_parm);
	uchar	bip_chan_id_ssdu			(Void_parm);
	uchar	bip_llc_ra_ssdu				(Void_parm);
	uchar	bip_progress_ind_check		(Void_parm);

#endif

		/*
			meta description of the primitives used to communicate between
			layer 4 and layer 3 of the network signalling entities.
			These primitives are network dependent.
			(Ordered alphabetically)
		*/

/*-------------------------------------------------------------------------*/

			/* BC : bearer capabilities */

D_START	(BIP_P_BC)
		D_TABL	(TRF_CAP)
		D_TABL	(TRF_MODE)
		D_TABL	(PROTOCOL_1)
		D_TABL	(PROTOCOL_2)
D_END	(P_BC_1)

START	(BIP_P_BC)
		TABL	(BIP_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
		TABL	(BIP_T_TRF_MODE,			&i_bc[0].trf_mode)
		TABL	(BIP_T_BC_PROTOCOL_ID_1,	&i_bc[0].protocol_id_1)
		TABL	(BIP_T_BC_PROTOCOL_ID_2,	&i_bc[0].protocol_id_2)
END		(0)

/*-------------------------------------------------------------------------*/

			/* CALL_STATE : call state */

D_START	(BIP_P_CALL_STATE)
	D_TABL	(VAL_)
D_END		(CALL_STATE_END)

START	(BIP_P_CALL_STATE)
	TABL	(BIP_T_CALL_STATE,				&i_call_state[0].val)
END			(0)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(BIP_P_CALLED_NB)
	D_TABL  (PLAN_ID)
	D_TABX  (TYPE)

	D_IF_VAL	(PLAN_UNKNOWN_)
		D_TEXT  (DIGIT_E_)
	D_ELSE		(_PLAN_ISDN_)
		D_TEXT  (_DIGIT_)
	D_END_IF	(_PLAN_)

D_END   (CALLED_NB_E)

START	(BIP_P_CALLED_NB)
	TABL	(BIP_T_CALLED_NB_PLAN,  &i_called_nb[0].plan_id)
	TABX	(BIP_TX_NB_PLAN, 		&i_called_nb[0].plan_id, &i_called_nb[0].nb_type)

	IF_VAL	(&i_called_nb[0].plan_id, EQ, PLAN_UNKNOWN)
		TEXT(1,BIP_MX_SZ_CALLED_NB,DIGIT_E,	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
	ELSE	()
		TEXT(1,BIP_MX_SZ_CALLED_NB,DIGIT, 	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
	END_IF	()
END	 (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_SUB_ADD : called party sub address */

D_START	(BIP_P_CALLED_SUB_ADD)
	D_TABL 		(NBERING_TYPE)
	D_TABL 		(ODD_EVEN_IND)
	D_IF_VAL	(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE		(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)
	D_TEXT 		(DIGIT_)
D_END (P_CALLED_SUB_ADD_END)

START	(BIP_P_CALLED_SUB_ADD)
	TABL (BIP_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
	TABL (BIP_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)

	IF_VAL  (&i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,BIP_MX_SZ_CALLED_SUB_ADD,DIGIT,		&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	ELSE	()
		TEXT (1,BIP_MX_SZ_CALLED_SUB_ADD,ANY_OCTET,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	END_IF	()

END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(BIP_P_CALLING_NB)
	D_TABL	(TYPE)
	D_TABX	(PLAN_ID)
	D_TABL	(PRESENTATION)
	D_TABL	(SCREEN_IND)
	D_TEXT	(DIGIT_)
D_END   (CALLING_NB_E)

START	(BIP_P_CALLING_NB)
	TABL	(BIP_T_CALLING_NB_PLAN,	&i_calling_nb[0].plan_id)
	TABX	(BIP_TX_NB_PLAN, 		&i_calling_nb[0].plan_id, &i_calling_nb[0].nb_type)
	TABL	(BIP_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
	TABL	(BIP_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
	TEXT 	(0,BIP_MX_SZ_CALLING_SUB_ADD,DIGIT,&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
END		(0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(BIP_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLING_SUB_ADD_END)

START	(BIP_P_CALLING_SUB_ADD)
	TABL (BIP_T_SUB_ADD_TYPE,			&i_calling_sub_add[0].sub_add_type)
	TABL (BIP_T_SUB_ADD_IND,			&i_calling_sub_add[0].odd_even_ind)
	TEXT (1,BIP_MX_SZ_CALLING_SUB_ADD,DIGIT,&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(BIP_P_CAUSE)
		D_TABL		(CODING_STD)
		D_TABL		(LOCATION)

		D_IF_VAL	(_CODING_STD_CCITT)
			D_TABL	(_CLASS_)
			D_TABX	(_VAL_)
		D_ELSE		(_OTHER_CODING_)
			D_TABL	(_NORMAL_EVENT_0)
			D_TABX	(_C_V_NAT_SPF)
		D_END_IF	(_CODING_)

D_END	(CAUSE_E_A)

START	(BIP_P_CAUSE)
		TABL	(BIP_T_CAUSE_CODING_STD,&i_cause[0].coding_std)
		TABL	(BIP_T_LOCATION,		&i_cause[0].cause_loc)

		IF_VAL	(&i_cause[0].coding_std, EQ, CODING_STD_CCITT)
			TABL(BIP_T_C_C,				&i_cause[0].cause_class)
			TABX(BIP_TX_C_V_CCITT,		&i_cause[0].cause_class,  &i_cause[0].cause_val)
		ELSE	()
			TABL(BIP_T_C_C_SPF,			&i_cause[0].cause_class)
			TABX(BIP_TX_C_V_NAT_SPF,	&i_cause[0].cause_class,  &i_cause[0].cause_val)
		END_IF	()

END	 (bip_cause_ssdu)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

D_START	(BIP_P_CHAN_ID)
	D_VAL		(INT_PRI)
	D_TABL  	(INT_ID)
	D_TABL  	(PREF_EXCL)
	D_TABL  	(SEL)

	D_IF_VAL	(_INT_EXPL_)
		D_TABL	(_INT_ID_VAL_)
	D_ELSE		(_INT_IMPL)
		D_PAD	(_1_)
	D_END_IF	(_3_1_)

	D_FUNCTION	(_CHAN_NB_)
	D_TEXT  	(NBER)

D_END   (CHAN_ID_E)

START	(BIP_P_CHAN_ID)
	VAL		(INT_TYPE_PRI,			&i_chan_id[0].int_type)
	TABL	(BIP_T_INT_ID, 		  	&i_chan_id[0].int_id)
	TABL	(BIP_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL	(BIP_T_CHAN_SEL_PRI,	&i_chan_id[0].chan_sel)

	IF_VAL	(&i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		TABL(BIP_T_INT_ID_VAL, 		&i_chan_id[0].int_id_val)
	ELSE	()
		PAD	(1)
	END_IF	()

	FUNCTION (bip_chan_id_chan_nb_ssdu)
	TEXT (1,BIP_MX_SZ_CHAN_ID,ANY_CHAR,&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
END (bip_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(BIP_P_HLC)
	D_TABL			(CODING_STD)

	D_IF_VAL		(CODING_CCITT)
		D_TABL		(TELESERVICE)
		D_TABL		(EXT_TELESERVICE)
	D_ELSE			(OTHER_CODING)
		D_ANY_VAL	(OTHER_TELE)
		D_PAD		(OTHER_EXT_TELE)
	D_END_IF		(CODING)

D_END				(HLC_END)

START	(BIP_P_HLC)
	TABL		(BIP_T_CODING_STD,			&i_hlc[0].coding_std)

	IF_VAL		(&i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL	(BIP_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		TABL	(BIP_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
	ELSE		()
		ANY_VAL	(&i_hlc[0].teleservice)
		PAD		(1)
	END_IF		()

END				(0)

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(BIP_P_LLC)
	D_TABL	(CODING_STD)
	D_TABL	(TRF_CAP)
	D_TABL	(OUT_BAND_NEG)
	D_TABL	(TRF_MODE)
	D_TABX	(TRF_RATE)
	D_TABL	(STRUCT)
	D_TABX	(DEST_RATE)
	D_TABL	(PROTOCOL_1)
D_END	(P_LLC_1)

START	(BIP_P_LLC)
	TABL	(BIP_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(BIP_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
	TABL	(BIP_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
	TABL	(BIP_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(BIP_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
	TABL	(BIP_T_STRUCTURE,				&i_llc[0].structure)
	TABX	(BIP_TX_TRF_RATE,					&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
	TABL	(BIP_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(bip_llc_ra_ssdu)

		/* V110 */

D_START	(BIP_P_LLC_V110)
	D_TABL	(V110_SYN_ASYN)
	D_TABL	(V110_NEGOTIATION)
	D_TABL	(V110_USER_RATE)
	D_TABL	(V110_INTER_RATE)
	D_TABL	(V110_TX_NIC)
	D_TABL	(V110_RX_NIC)
	D_TABL	(V110_TX_FC)
	D_TABL	(V110_RX_FC)
	D_PAD	(P_9_14)
	D_TABL	(V110_STOP_BIT)
	D_TABL	(V110_DATA_BIT)
	D_TABL	(V110_PARITY)
	D_TABL	(V110_DUPLEX)
	D_TABL	(V110_MODEM)
D_END (ENDIF_V110)

START	(BIP_P_LLC_V110)
	TABL	(BIP_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(BIP_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(BIP_T_USER_RATE,			&i_llc[0].user_rate)
	TABL	(BIP_T_INTER_RATE,			&i_llc[0].inter_rate)
	TABL	(BIP_T_NIC_TX,				&i_llc[0].tx_nic)
	TABL	(BIP_T_NIC_RX,				&i_llc[0].rx_nic)
	TABL	(BIP_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
	TABL	(BIP_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
	PAD		(6)
	TABL	(BIP_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(BIP_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(BIP_T_PARITY,				&i_llc[0].parity)
	TABL	(BIP_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(BIP_T_MODEM,				&i_llc[0].modem)
END	(0)

D_START	(BIP_P_LLC_V120)
	D_TABL	(V120_SYN_ASYN)
	D_TABL	(V120_NEGOTIATION)
	D_TABL	(V120_USER_RATE)
	D_PAD	(P_4_8)
	D_TABL	(V120_HDR)
	D_TABL	(V120_MULTI_FRAME)
	D_TABL	(V120_OP_MODE)
	D_TABL	(V120_LLI)
	D_TABL	(V120_ASSIGN)
	D_TABL	(V120_BAND)
	D_TABL	(V120_STOP_BIT)
	D_TABL	(V120_DATA_BIT)
	D_TABL	(V120_PARITY)
	D_TABL	(V120_DUPLEX)
	D_TABL	(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(BIP_P_LLC_V120)
	TABL	(BIP_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(BIP_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(BIP_T_USER_RATE,			&i_llc[0].user_rate)
	PAD		(5)
	TABL	(BIP_T_HEADER,				&i_llc[0].hdr)
	TABL	(BIP_T_MULTI_FRAME,			&i_llc[0].multi_frame)
	TABL	(BIP_T_OP_MODE,				&i_llc[0].op_mode)
	TABL	(BIP_T_LLI,					&i_llc[0].lli)
	TABL	(BIP_T_ASSIGN,				&i_llc[0].assign)
	TABL	(BIP_T_BAND,				&i_llc[0].band)
	TABL	(BIP_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(BIP_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(BIP_T_PARITY,				&i_llc[0].parity)
	TABL	(BIP_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(BIP_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(BIP_P_LLC_PAD)
	D_PAD	(P_1_19)
D_END		(END_PAD_RA)

START	(BIP_P_LLC_PAD)
	PAD		(19)
END			(0)

D_START	(BIP_P_LLC_2)
	D_TABL		(PROTOCOL_ID_2)
	D_ANY_VAL	(OPT_2)
	D_TABL		(PROTOCOL_ID_3)
	D_ANY_VAL	(OPT_3)
D_END		(LLC_E)

START	(BIP_P_LLC_2)
	TABL	(BIP_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
	ANY_VAL	(&i_llc[0].option_2)
	TABL	(BIP_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
	ANY_VAL	(&i_llc[0].option_3)
END			(0)

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(BIP_P_PROGRESS_IND)
	D_TABL	(CODING_STD)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(BIP_P_PROGRESS_IND)
	TABL	(BIP_T_CODING_STD,				&i_progress_ind[0].coding_std)
	TABL	(BIP_T_LOCATION,				&i_progress_ind[0].progress_loc)
	TABL	(BIP_T_PROGRESS_IND_DESCR,		&i_progress_ind[0].progress_descr)
END			(bip_progress_ind_check)

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START		(BIP_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(BIP_P_RESTART_IND)
	TABL	(BIP_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

/*-------------------------------------------------------------------------*/

			/* TRANSIT_NET_SEL : Transit network selection */

D_START	(BIP_P_TRANSIT_NET_SEL)
	D_TEXT	(NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(BIP_P_TRANSIT_NET_SEL)
	TEXT	(1,BIP_MX_SZ_TRANSIT_NET_SEL,ANY_CHAR,&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

/*----------------------------codeset 5------------------------------------*/

			/* Operator System Access (OS_ACCSS) */

D_START	(BIP_P_OS_ACCSS)
	D_TABL  (ACCSS_TYPE)
D_END       (E_OS_ACCSS)

START	(BIP_P_OS_ACCSS)
	TABL    (BIP_T_TYPE_ACCSS,	&i_os_accss[0].access_type)
END         (0)

/*EOF*/

