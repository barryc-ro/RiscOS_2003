
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_ssdu.bip
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.bip */

#include "bip.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			bip_cause_ssdu - implements the specific processing of a cause
							 Information Element (IE).

Usage			uchar bip_cause_ssdu ();

Return value :  bip_cause_ssdu returns	OK
									NOK

common constants and declarations : ns.h net_i_s.h

common objects : internal data structure i_cause, ie ssdu context.
						- direction = FROM or TO CALL_CONTROL side.

*--------------------------------------------------------------------------*/

uchar bip_cause_ssdu ()
{
	uchar	class_val;				/* cause class & value */

	class_val = C_v (I_(cause,cause_class), I_(cause,cause_val));

	switch (class_val) {

		case C_v (C_C_RESOURCE_UNAVAILABLE,	C_V_ACCESS_INFORMATION_DISCARDED_43):
		case C_v (C_C_PROTOCOL_ERROR,		C_V_MANDATORY_IE_MISSING_96)		:
		case C_v (C_C_PROTOCOL_ERROR,		C_V_MESSAGE_TYPE_NON_EXISTENT_97)	:
		case C_v (C_C_PROTOCOL_ERROR,		C_V_NON_EXISTENT_IE_99)				:
		case C_v (C_C_PROTOCOL_ERROR,		C_V_INVALID_IE_CONTENT_100)			:
		case C_v (C_C_PROTOCOL_ERROR,		C_V_MESSAGE_NOT_COMPATIBLE_101)		:
			break;

		default :

			if (I_(cause,diag_lgth) != 0) {

				if (I_cause_class < C_C_TIMER) {
					return (NOK);
				}

			}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		bip_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/
uchar bip_chan_id_chan_nb_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

		if (I_(chan_id,int_type) == INT_TYPE_PRI) {

			/*
			 * Reset the extension bit in the chan_nb field.
			 */

			for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
				Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}
		}
	}

	return (OK);
}

uchar bip_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		/*
		 * Set the extension bit to 1 in the chan_nb field.
		 */

		i = I_(chan_id, chan_nb_lgth)-1;

		Set_ext_bit (I_(chan_id, p_chan_nb)[i]);
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			bip_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage			uchar bip_llc_ra_ssdu ();

Return value : 	bip_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar bip_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&BIP_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&BIP_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&BIP_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&BIP_P_LLC_2));

	} else {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&BIP_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&BIP_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&BIP_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&BIP_P_LLC_2));
	}

}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------

		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |				 ssdu_ie
	|----|------|---------|	 ======================================
	|	 |	X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |	X------> START
	|----|------|---------|	 |---------|----|-----|------|--------|	 XXXX
	|	 |		|		  |	 |		   |	|	  |		 |		  |	 YYYY
	|----|------|---------|	 |---------|----|-----|------|--------|	 END
	|	 |		|		  |	 |		   |	|	  |		 |		  |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |		  |

*/

	/* NS primitive interface program */

/*====================	CALL  ESTABLISHMENT  MESSAGES	=====================*/

		/* NS_ALERT_RQ */

#define BIP_NET_ALERT_RQ		BIP_ALERT_IN

		/* NS_ALERT_IN */

#define	BIP_NET_ALERT_IN		BIP_ALERT_RQ

		/* NS_CALL_PROC_RQ */

#define BIP_NET_CALL_PROC_RQ	BIP_CALL_PROC_IN

		/* NS_CALL_PROC_IN */

#define BIP_NET_CALL_PROC_IN	BIP_CALL_PROC_RQ

		/* NS_CONN_RQ */

#define BIP_NET_CONN_RQ			BIP_CONN_IN

		/* NS_CONN_IN */

#define BIP_NET_CONN_IN			BIP_CONN_RQ

		/* NS_CONN_RS */

#define BIP_NET_CONN_RS			BIP_CONN_CO

		/* NS_CONN_CO */

#define BIP_NET_CONN_CO			BIP_CONN_RS

#define	BIP_NET_PROGRESS_RQ		BIP_PROGRESS_IN

/*=====================	CALL  CLEARING  MESSAGES	=======================*/

		/* NS_CLEAR_RQ */

#define BIP_NET_CLEAR_RQ		BIP_CLEAR_IN

		/* NS_CLEAR_IN */

#define	BIP_NET_CLEAR_IN		BIP_CLEAR_RQ

		/* NS_CLEAR_RS */

#define	BIP_NET_CLEAR_RS		BIP_CLEAR_CO

		/* NS_CLEAR_CO */

#define	BIP_NET_CLEAR_CO		BIP_CLEAR_RS

/*====================		MISCELLANEOUS  MESSAGES	=======================*/

		/* NS_RESTART_RQ - (No IE in this message) */

#define BIP_RESTART_RQ			BIP_RESTART_IN
#define BIP_NET_RESTART_RQ		BIP_RESTART_IN

		/* NS_RESTART_IN */

#define BIP_NET_RESTART_IN		BIP_RESTART_IN

		/* NS_RESTART_CO */

#define BIP_RESTART_RS			BIP_RESTART_IN
#define BIP_NET_RESTART_RS		BIP_RESTART_IN

		/* NS_RESTART_CO */

#define BIP_RESTART_CO			BIP_RESTART_IN
#define BIP_NET_RESTART_CO		BIP_RESTART_IN

/*=========================================================================*/

#define Ns_bip_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_bip_end_table_or_function		};

#define Ns_bip_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_bip_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_bip		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_bip_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_bip_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "bip.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define BIP_MX_SSDU (sizeof(BIP_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		bip_mx_size_ssdu = BIP_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_bip_table_or_function
#undef Ns_bip_end_table_or_function
#undef Ns_bip_tab_ssdu_ie_entry
#undef Ns_bip_tab_ssdu_ie_mx_entry
#undef Ns_bip_tab_ssdu_entry

#define Ns_bip_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_bip_end_table_or_function		}

#define Ns_bip_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_bip_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_bip_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_bip
#	define Message_header_ssdu_ie_bip		Ns_bip_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_bip_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_bip_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_bip_ssdu ()
{
	uchar   i_pic;

#	include "bip.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

