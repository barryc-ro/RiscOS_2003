
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_mac.dms
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

				/*
					MACROs and DECLARATIONS used to access the Network
					Signalling entity (NS) from the user Layer 4 Signalling
					entity (L4S).
				*/
/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_dms_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_dms_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(dms_,pr), p_off)
#define Isdn_init_dms_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_dms(pr,ie)					Get_ie 			(Paste(dms_,pr), Paste (dms_, ie))
#define	Isdn_get_val_dms(pr,ie,fld)			Isdn_get_val	(Paste(dms_,pr), Paste (dms_, ie), fld)
#define Isdn_p_str_dms(pr,ie,fld)			Isdn_p_str		(Paste(dms_,pr), Paste (dms_, ie), fld)
#define	Isdn_lgth_str_dms(pr,ie,fld)		Isdn_lgth_str	(Paste(dms_,pr), Paste (dms_, ie), fld)
#define	Isdn_mx_lgth_str_dms(pr,ie,fld)		Isdn_mx_lgth_str(Paste(dms_,pr), Paste (dms_, ie), fld)
#define	P_start_val_ns_dms(pr,ie)			P_start_val_ns	(Paste(dms_,pr), Paste (dms_, ie))
#define	P_val_ns_dms(ie)					P_val_ns		(Paste(dms_,ie))
#define Set_offset_dms(pr,ie)				Set_offset		(Paste(dms_,pr), Paste(dms_,ie))
#define	Set_next_ie_dms(ie)					Set_next_ie		(Paste(dms_,ie))
#define	Set_val_dms(ie,fld,val)				Set_val			(Paste(dms_,ie), fld, val)
#define Set_str_dms(ie, lv, p_str, mx_sz)	Set_str			(Paste(dms_,ie), lv, p_str, mx_sz)
#define Set_mem_dms(ie, lv, p_mem, sz)		Set_mem			(Paste(dms_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_dms(pr,ie)	Set_to_next_ie_instance (Paste(dms_,pr), Paste (dms_, ie))
#define Get_remaining_ie_instance_nb_dms(pr,ie,p_ie)		Get_remaining_ie_instance_nb (Paste(dms_,pr), Paste (dms_, ie), p_ie)
#define	Set_val_nil_dms(ie)					Set_val_nil		(Paste(dms_,ie))

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_dms	ns_offset_t dms_message_header;
#else
#	define Message_header_offset_dms
#endif

/*-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------*/

		/* Structures of the offset area of each primitive interfaces */

		/******************************************************
		**	 Each offset is a relative pointer on the	  	**
		**	 data of an IE element						 	**
		******************************************************/

/*====================	CALL  ESTABLISHMENT  MESSAGES	=====================*/

		/* NS_ALERT_RQ */
		/* NS_ALERT_IN */

struct off_ns_dms_te_alert_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_progress_ind;			/* progress indicator */
	ns_offset_t dms_signal;					/* signal */
	ns_offset_t dms_redir_nb;				/* redirecting number */
	ns_offset_t dms_redirection_nb;			/* redirection number */
	ns_offset_t dms_chan_id;				/* channel ID */
	ns_offset_t dms_facility;				/* facility */
};

typedef struct off_ns_dms_te_alert_in		off_ns_dms_alert_rq;
typedef struct off_ns_dms_te_alert_in		off_ns_dms_net_alert_in;
typedef struct off_ns_dms_te_alert_in		off_ns_dms_net_alert_rq;
typedef struct off_ns_dms_te_alert_in		off_ns_dms_alert_in;

		/* NS_CALL_PROC_RQ */
		/* NS_CALL_PROC_IN */

struct off_ns_dms_te_call_proc_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_chan_id;				/* channel ID */
	ns_offset_t dms_progress_ind;			/* progress indicator */
	ns_offset_t dms_notif_ind;				/* notify indicator */
	ns_offset_t dms_signal;					/* signal */
	ns_offset_t dms_feature_ind;			/* feature indication */
	ns_offset_t dms_called_nb;				/* called number */
};

typedef struct off_ns_dms_te_call_proc_in	off_ns_dms_call_proc_rq;
typedef struct off_ns_dms_te_call_proc_in	off_ns_dms_net_call_proc_in;
typedef struct off_ns_dms_te_call_proc_in	off_ns_dms_net_call_proc_rq;
typedef struct off_ns_dms_te_call_proc_in	off_ns_dms_call_proc_in;

		/* NS_CONN_RQ */
		/* NS_CONN_IN */

struct off_ns_dms_te_conn_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_bc;						/* bearer capability */
	ns_offset_t dms_chan_id;				/* channel ID */
	ns_offset_t dms_facility;				/* facility */
	ns_offset_t dms_progress_ind;			/* progress indicator */
	ns_offset_t dms_signal;					/* signal */
	ns_offset_t dms_endpoint_id;			/* endpoint identifier */
	ns_offset_t dms_calling_nb;				/* calling number (from network) */
	ns_offset_t dms_calling_sub_add;		/* calling subaddress */
	ns_offset_t dms_called_nb;				/* called number */
	ns_offset_t dms_called_sub_add;			/* called subaddress */
	ns_offset_t dms_redir_nb;				/* redirecting number */
	ns_offset_t dms_llc;					/* low layer capability */
	ns_offset_t dms_hlc;					/* high layer compatibility */
	ns_offset_t dms_call_appear;			/* call appearance */

#	if NS_SPF_FACILITY == ON
		ns_offset_t	dms_spf_fac;			/* specific facility */
#	endif

	ns_offset_t dms_display;				/* display */
	ns_offset_t dms_keypad;					/* keypad */
	ns_offset_t dms_transit_net_sel;		/* transit network selection */
	ns_offset_t dms_os_accss;				/* operator system access */
	ns_offset_t dms_o_called_nb;			/* original called number */
};

typedef struct off_ns_dms_te_conn_in		off_ns_dms_conn_rq;
typedef struct off_ns_dms_te_conn_in		off_ns_dms_net_conn_in;
typedef struct off_ns_dms_te_conn_in		off_ns_dms_net_conn_rq;
typedef struct off_ns_dms_te_conn_in		off_ns_dms_conn_in;

		/* NS_CONN_RS (CONN) */
		/* NS_CONN_CO (CONN or CONN_ACK) */

struct off_ns_dms_te_conn_co {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_conn_nb;				/* connected number */
	ns_offset_t dms_chan_id;				/* channel ID */
	ns_offset_t dms_progress_ind;			/* progress indicator */
	ns_offset_t dms_notif_ind;				/* notify indicator */
	ns_offset_t dms_signal;					/* signal */
};

typedef struct off_ns_dms_te_conn_co		off_ns_dms_conn_rs;
typedef struct off_ns_dms_te_conn_co		off_ns_dms_net_conn_co;
typedef struct off_ns_dms_te_conn_co		off_ns_dms_net_conn_rs;
typedef struct off_ns_dms_te_conn_co		off_ns_dms_conn_co;

		/* NS_PROGRESS_RQ */
		/* NS_PROGRESS_IN */

struct off_ns_dms_te_progress_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_cause;					/* cause */
	ns_offset_t dms_progress_ind;			/* progress indicator */
	ns_offset_t dms_notif_ind;				/* notify indicator */
	ns_offset_t dms_signal;					/* signal */
};

typedef struct off_ns_dms_te_progress_in	off_ns_dms_net_progress_in;
typedef struct off_ns_dms_te_progress_in	off_ns_dms_progress_rq;
typedef struct off_ns_dms_te_progress_in	off_ns_dms_net_progress_rq;
typedef struct off_ns_dms_te_progress_in	off_ns_dms_progress_in;

		/* NS_SETUP_ACK_IN */

struct off_ns_dms_te_setup_ack_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_chan_id;				/* channel ID */
	ns_offset_t dms_progress_ind;			/* progress indicator */
	ns_offset_t dms_notif_ind;				/* notify indicator */
	ns_offset_t dms_signal;					/* signal */
};

typedef struct off_ns_dms_te_setup_ack_in	off_ns_dms_net_setup_ack_rq;
typedef struct off_ns_dms_te_setup_ack_in	off_ns_dms_setup_ack_in;

/*===============	CALL  INFORMATION  PHASE  MESSAGES	====================*/

		/* NS_RET_RQ */

struct off_ns_dms_te_ret_rq {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_chan_id;				/* channel ID */
};

typedef struct off_ns_dms_te_ret_rq		off_ns_dms_ret_rq;
typedef struct off_ns_dms_te_ret_rq		off_ns_dms_net_ret_in;

		/* NS_RET_CO */

struct off_ns_dms_te_ret_co {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_cause;					/* cause */
	ns_offset_t dms_conn_nb;				/* connected number */
	ns_offset_t dms_chan_id;				/* channel ID */
	ns_offset_t dms_notif_ind;				/* notify indicator */
};

typedef struct off_ns_dms_te_ret_co		off_ns_dms_net_ret_rs;
typedef struct off_ns_dms_te_ret_co		off_ns_dms_ret_co;

		/* NS_HOLD_RQ */
		/* NS_HOLD_IN */

struct off_ns_dms_te_hold_in {
	Message_header_offset_dms				/* message header parameters */

#	if MESSAGE_HEADER_IE != ON
		ns_offset_t ie_nil;					/* or no IE */
#	endif

};

typedef struct off_ns_dms_te_hold_in		off_ns_dms_hold_rq;
typedef struct off_ns_dms_te_hold_in		off_ns_dms_net_hold_in;
typedef struct off_ns_dms_te_hold_in		off_ns_dms_hold_in;
typedef struct off_ns_dms_te_hold_in		off_ns_dms_net_hold_rq;

		/* NS_HOLD_RS */
		/* NS_HOLD_CO */

struct off_ns_dms_te_hold_co {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_cause;					/* cause */
	ns_offset_t dms_notif_ind;				/* notify indicator */
	ns_offset_t dms_signal;					/* signal */
};

typedef struct off_ns_dms_te_hold_co		off_ns_dms_hold_rs;
typedef struct off_ns_dms_te_hold_co		off_ns_dms_net_hold_co;
typedef struct off_ns_dms_te_hold_co		off_ns_dms_net_hold_rs;
typedef struct off_ns_dms_te_hold_co		off_ns_dms_hold_co;

/*=====================	CALL  CLEARING  MESSAGES	=======================*/

		/* NS_CLEAR_RQ */
		/* NS_CLEAR_IN */

struct off_ns_dms_te_clear_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_cause;					/* cause */
	ns_offset_t dms_signal;					/* signal */
	ns_offset_t dms_feature_ind;			/* feature indication */
};

typedef struct off_ns_dms_te_clear_in		off_ns_dms_clear_rq;
typedef struct off_ns_dms_te_clear_in		off_ns_dms_net_clear_in;
typedef struct off_ns_dms_te_clear_in		off_ns_dms_net_clear_rq;
typedef struct off_ns_dms_te_clear_in		off_ns_dms_clear_in;

		/* NS_CLEAR_RS */
		/* NS_CLEAR_CO */

struct off_ns_dms_te_clear_co {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_cause;					/* cause */
	ns_offset_t dms_facility;				/* facility */
	ns_offset_t dms_signal;					/* signal */
	ns_offset_t dms_feature_ind;			/* feature indication */
};

typedef struct off_ns_dms_te_clear_co		off_ns_dms_clear_rs;
typedef struct off_ns_dms_te_clear_co		off_ns_dms_net_clear_co;
typedef struct off_ns_dms_te_clear_co		off_ns_dms_net_clear_rs;
typedef struct off_ns_dms_te_clear_co		off_ns_dms_clear_co;

/*====================		MISCELLANEOUS  MESSAGES	=======================*/

		/* NS_INFO_RQ */
		/* NS_INFO_IN */

struct off_ns_dms_te_info_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_cause;					/* cause */
	ns_offset_t dms_information_rq;			/* information request */
	ns_offset_t dms_signal;					/* signal */
	ns_offset_t dms_feature_ind;			/* feature indication */
	ns_offset_t dms_endpoint_id;			/* endpoint identifier */
	ns_offset_t dms_prot_ver_ctrl;			/* protocol version control */
	ns_offset_t dms_keypad;					/* keypad */
	ns_offset_t dms_feature_act;			/* feature activation */
	ns_offset_t dms_spid;					/* spid */
	ns_offset_t dms_called_nb;				/* called number */
};

typedef struct off_ns_dms_te_info_in		off_ns_dms_info_rq;
typedef struct off_ns_dms_te_info_in		off_ns_dms_net_info_in;
typedef struct off_ns_dms_te_info_in		off_ns_dms_net_info_rq;
typedef struct off_ns_dms_te_info_in		off_ns_dms_info_in;

		/* NS_FAC_RQ */
		/* NS_FAC_IN */

struct off_ns_dms_te_fac_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_facility;				/* facility */
};

typedef struct off_ns_dms_te_fac_in			off_ns_dms_fac_rq;
typedef struct off_ns_dms_te_fac_in			off_ns_dms_net_fac_in;
typedef struct off_ns_dms_te_fac_in			off_ns_dms_net_fac_rq;
typedef struct off_ns_dms_te_fac_in			off_ns_dms_fac_in;

		/* NS_NOTIFY_RQ */
		/* NS_NOTIFY_IN */

struct off_ns_dms_te_notify_in {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_conn_nb;				/* connected number */
	ns_offset_t dms_facility;				/* facility */
	ns_offset_t dms_notif_ind;				/* notify indicator */
	ns_offset_t dms_feature_ind;			/* feature indication */
	ns_offset_t dms_calling_nb;				/* calling number (from network) */
	ns_offset_t dms_redirection_nb;			/* redirection number */
	ns_offset_t dms_cause;					/* cause */
	ns_offset_t dms_progress_ind;			/* progress indicator */
	ns_offset_t dms_display;				/* display */
	ns_offset_t dms_information_rq;			/* information request */
};

typedef struct off_ns_dms_te_notify_in		off_ns_dms_net_notify_in;
typedef struct off_ns_dms_te_notify_in		off_ns_dms_notify_rq;
typedef struct off_ns_dms_te_notify_in		off_ns_dms_net_notify_rq;
typedef struct off_ns_dms_te_notify_in		off_ns_dms_notify_in;

		/* NS_RESTART_RQ */
		/* NS_RESTART_RS */

struct off_ns_dms_te_restart_rs {
	Message_header_offset_dms				/* message header parameters */
	ns_offset_t dms_restart_ind;			/* restart indocator */
	ns_offset_t dms_chan_id;				/* channel ID */
};

typedef struct off_ns_dms_te_restart_rs		off_ns_dms_restart_rq;
typedef struct off_ns_dms_te_restart_rs		off_ns_dms_net_restart_in;
typedef struct off_ns_dms_te_restart_rs		off_ns_dms_restart_rs;
typedef struct off_ns_dms_te_restart_rs		off_ns_dms_net_restart_co;
typedef struct off_ns_dms_te_restart_rs		off_ns_dms_net_restart_rq;
typedef struct off_ns_dms_te_restart_rs		off_ns_dms_restart_in;

/*--------------------------------------------------------------------------*/

			/* NS MAINTENANCE REQUEST / CONFIRM */

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

	/* NS_SERVICE_RQ/CO */

struct off_ns_dms_te_service_rq {
	Message_header_offset_dms               /* message header parameters */
	ns_offset_t	dms_change_status;			/* Change Status */
	ns_offset_t	dms_chan_id;				/* Channel Id */
};

typedef struct off_ns_dms_te_service_rq		off_ns_dms_service_rq;
typedef struct off_ns_dms_te_service_rq		off_ns_dms_service_co;

#endif /* } */



		/*****************************************************
		**	DESCRIPTION of the value of an IE.				**
		**	---------------------------------				**
		**	EACH ENTRY SHALL BE IN ACCORDANCE WITH THE		**
		**	CORRESPONDING SSDU IE META-PROGRAM				**
		**													**
		*****************************************************/

		/* Bearer Capability (BC) */

struct val_ns_dms_bc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
};

		/* Called party number (CALLED_NB) */

struct val_ns_dms_called_nb {
	Next_instance_offset
	ie_val		nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_array 	nb[DMS_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_dms_called_sub_add {
	Next_instance_offset
	ie_val		sub_add_type;			/* called subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[DMS_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_dms_calling_nb {
	Next_instance_offset
	ie_val		nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[DMS_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_dms_calling_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* calling subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[DMS_MX_SZ_CALLING_SUB_ADD+2];	/* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_dms_cause {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		cause_loc;				/* location */
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
	ie_array	cause_diag[DMS_MX_SZ_CAUSE_DIAG+2];	/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_dms_chan_id {
	Next_instance_offset
	ie_val 		int_type;				/* interface type */
	ie_val 		int_id;					/* interface id */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val		d_chan;					/* D-channel indicator */
	ie_val		int_id_val;				/* interface id value */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val		chan_nb;				/* channel number */
};


		/* Change Status (CHANGE_STATUS) */

struct val_ns_dms_change_status {
	Next_instance_offset
	ie_val		status;						/* Status of the B channel(s) */
};

		/* Connected number (CONN_NB) */

struct val_ns_dms_conn_nb {
	Next_instance_offset
	ie_val		nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[DMS_MX_SZ_CONN_NB+2];	/* connected number digits */
};

		/* Display (DISPLAY) */

struct val_ns_dms_display {
	Next_instance_offset
	ie_val		display_type;					/* display type */
	ie_val		assoc_info;						/* associated info */
	ie_array 	text[DMS_MX_SZ_DISPLAY+2];		/* display information */
};

		/* Endpoint identifier (ENDPOINT_ID) */

struct val_ns_dms_endpoint_id {
	Next_instance_offset
	ie_val		usid;					/* user id */
	ie_val		tid;					/* terminal id */
	ie_val		interp;					/* interpreter flag */
    ie_val		ces;					/* CES */
};

		/* Facility (FACILITY) */

struct val_ns_dms_facility {
	Next_instance_offset
	ie_val		comp_tag;					/* component tag */
	ie_val		service;					/* service */
	ie_val		pref;						/* preferred */
	ie_val		error_val;					/* error value */
	ie_array	invoke_id[DMS_MX_SZ_FACILITY+2];	/* invoke id */
};

		/* Feature activation (FEATURE_ACT) */

struct val_ns_dms_feature_act {
	Next_instance_offset
	ie_val		feature_id;					/* feature identifier */
	ie_val		feature_id_2;				/* feature identifier (continuation) */
};

		/* Feature indication (FEATURE_IND) */

struct val_ns_dms_feature_ind {
	Next_instance_offset
	ie_val		feature_id;					/* feature identifier */
	ie_val		feature_id_2;				/* feature identifier (continuation) */
	ie_val		status_ind;					/* status indicator */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_dms_hlc {
	Next_instance_offset
	ie_val		coding_std;					/* coding standard */
	ie_val		teleservice;				/* high layer characteristics identification */
	ie_val		ext_teleservice;			/* extended high layer characteristics identification */
};

		/* Information request (INFORMATION_RQ) */

struct val_ns_dms_information_rq {
	Next_instance_offset
	ie_val		info_type;				/* information type */
	ie_val		info_ind;				/* information indicator */
	ie_val		info_specific;			/* specific information */
};

		/* Keypad */

struct val_ns_dms_keypad {
	Next_instance_offset
	ie_array 	text[DMS_MX_SZ_KEYPAD+2];			/* keypad information */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_dms_llc {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		out_band_neg;			/* out-band negotiation */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* destination rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock on transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock on reception (Rx) */
	ie_val		fc_tx;					/* flow control on transmission (Tx) */
	ie_val		fc_rx;					/* flow control on reception (Rx) */
	ie_val		hdr;					/* rate adaption header included or not */
	ie_val		multi_frame;			/* multiple frame establishement support in DL */
	ie_val		op_mode;				/* mode of operation */
	ie_val		lli_negot;				/* logical link identifier negotiation */
	ie_val		assign;					/* assignor/assignee */
	ie_val		band_negot;				/* in-band/out-band negotiation */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits excluding parity if present */
	ie_val		parity;					/* parity information */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user layer 2 protocol information */
	ie_val		option_2;				/* optional layer 2 protocol information */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
	ie_val		option_3;				/* optional layer 3 protocol information */
};

#if NS_SPF_FACILITY == ON

		/* Network Specific Facility (SPF_FAC) */

struct val_ns_dms_spf_fac {
	Next_instance_offset
	ie_val		net_id_lgth;	 		/* length of network identification */
	ie_val		net_id_type;			/* type of network identification */
	ie_val		net_id_plan;			/* network identification plan */
	ie_array	net_id[DMS_MX_SZ_NET_ID+1];	/* network identification array */
	ie_val      facility_code;			/* code */
	ie_array	fac_info[DMS_MX_SZ_SPF_FAC+2];/* network-specific facility specification */
};

#endif

		/* Notification indicator (NOTIF_IND) */

struct val_ns_dms_notif_ind {
	Next_instance_offset
	ie_val		notif_descr;			/* notification description*/
};

		/* Original called number (O_CALLED_NB) */

struct val_ns_dms_o_called_nb {
	Next_instance_offset
	ie_val		nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_val		reason;					/* reason */
	ie_val		cfnr;					/* cfnr*/
	ie_val		redir_counter;			/* counter */
	ie_array 	nb[DMS_MX_SZ_O_CALLED_NB+2];	/* original called number digits */
};

		/* Progress indicator (PROGRESS_IND) */

struct val_ns_dms_progress_ind {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		progress_loc;			/* progress location */
	ie_val		progress_descr;			/* progress description */
};

		/* Redirecting number (REDIR_NB) */

struct val_ns_dms_redir_nb {
	Next_instance_offset
	ie_val		nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_val		reason;					/* reason for redirection */
	ie_array 	nb[DMS_MX_SZ_REDIR_NB+2];	/* number digits */
};

		/* Redirection number (REDIRECTION_NB) */

struct val_ns_dms_redirection_nb {
	Next_instance_offset
	ie_val		nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_val		reason;					/* reason for redirection */
	ie_array 	nb[DMS_MX_SZ_REDIRECTION_NB+2];	/* number digits */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_dms_restart_ind {
	Next_instance_offset
	ie_val		restart_class;			/* class */
};

		/* Signal (SIGNAL) */

struct val_ns_dms_signal {
	Next_instance_offset
	ie_val		signal_val;				/* signal value */
};

		/* Spid (SPID) */

struct val_ns_dms_spid {
	Next_instance_offset
    ie_val		ces;
	ie_array 	p_spid[DMS_MX_SZ_SPID+2];	/* spid information */
};

		/* Transit network selection (TRANSIT_NET_SEL) */

struct val_ns_dms_transit_net_sel {
	Next_instance_offset
	ie_val		net_id_type;				/* numbering type */
	ie_val	 	net_id_plan;				/* numbering plan ID */
	ie_array	net_id[DMS_MX_SZ_TRANSIT_NET_SEL+2];	/* address of network identification information */
};

		/* Operator system access (OS_ACCSS) */

struct val_ns_dms_os_accss {
	Next_instance_offset
	ie_val		access_type;				/* type of access */
};

		/* Call appearance (CALL_APPEAR) */

struct val_ns_dms_call_appear {
	Next_instance_offset
	ie_val		call_appear_id;				/* call appearance identifier */
	ie_val		call_appear_id_2;			/* call appearance identifier (continuation) */
};

		/* Protocol version control (PROT_VER_CTRL) */

struct val_ns_dms_prot_ver_ctrl {
	Next_instance_offset
	ie_val		version;					/* version identifier */
	ie_val		issue;						/* issue code */
};

/*=========================================================================*/

							/* Information Elements (IE) */

			/*
				Isdn_dms_store_bc : store the bearer capability information
									element :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- protocol_id_1_= user information layer 1 protocol,
			*/

#define Isdn_dms_store_bc(pr, trf_cap_, protocol_id_1_)							\
				Set_offset_dms	(pr,	bc);										\
				Set_val_dms		(bc,	trf_cap,		trf_cap_);					\
				Set_val_dms		(bc,	protocol_id_1,	protocol_id_1_);			\
				Set_next_ie_dms	(bc)

			/*------------------------------------------------------*/

			/*
				Isdn_dms_store_bc_V110 : store the bearer capability information
										element for V110 rate adaption :

					INPUT :
						- pr			= primitive ID.
			*/

#define Isdn_dms_store_bc_V110(pr) 												\
		Isdn_dms_store_bc	(pr,		TRF_CAP_UNRESTRICTED,	PROTOCOL_ID_1_V110)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_called_nb : called number IE

					INPUT :
						- pr				= primitive ID,
						- nb_type_			= numbering type,
						- plan_id_			= numbering plan,
						- nb_				= address of the literal string.
			*/

#define Isdn_dms_store_called_nb(pr, nb_type_, plan_id_, nb_)					\
		Set_offset_dms	(pr,		called_nb);										\
		Set_val_dms		(called_nb,	nb_type,	nb_type_);							\
		Set_val_dms		(called_nb,	plan_id,	plan_id_);							\
		Set_str_dms		(called_nb,	nb,			nb_,		DMS_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_called_sub_add : called sub-address IE

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even_ind_	= odd/even indicator,
						- sub_add_		= address of the literal string.

			*/

#define Isdn_dms_store_called_sub_add(pr, sub_add_type_, odd_even_ind_,	sub_add_) \
		Set_offset_dms	(pr,				called_sub_add);						\
		Set_val_dms		(called_sub_add,	sub_add_type,	sub_add_type_);			\
		Set_val_dms		(called_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_str_dms 	(called_sub_add,	sub_add,		sub_add_, DMS_MX_SZ_CALLED_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- pres_				= presentation indicator,
						- screen_ind_		= screening indicator,
						- nb_				= pointer on the calling number literal string.
			*/

#define Isdn_dms_store_calling_nb(pr, pres_, screen_ind_, nb_)					\
		Set_offset_dms	(pr,			calling_nb);								\
		Set_val_dms		(calling_nb,	nb_type,		NB_UNKNOWN);					\
		Set_val_dms		(calling_nb,	plan_id,		PLAN_UNKNOWN);					\
		Set_val_dms		(calling_nb,	pres,			pres_);						\
		Set_val_dms		(calling_nb,	screen_ind, 	screen_ind_);				\
		Set_str_dms		(calling_nb,	nb, 			nb_, DMS_MX_SZ_CALLING_NB+1)

#define Isdn_dms_store_calling_nb_PRI(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)					\
		Set_offset_dms	(pr,			calling_nb);								\
		Set_val_dms		(calling_nb,	nb_type,		nb_type_);					\
		Set_val_dms		(calling_nb,	plan_id,		plan_id_);					\
		Set_val_dms		(calling_nb,	pres,			pres_);						\
		Set_val_dms		(calling_nb,	screen_ind, 	screen_ind_);				\
		Set_str_dms		(calling_nb,	nb, 			nb_, DMS_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_dms_calling_sub_add : calling sub-address IE

						INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even_ind_	= odd/even indicator,
						- sub_add_		= address of the literal string.

			*/

#define Isdn_dms_store_calling_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
		Set_offset_dms	(pr,				calling_sub_add);						\
		Set_val_dms		(calling_sub_add,	sub_add_type, 	sub_add_type_);			\
		Set_val_dms		(calling_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_str_dms		(calling_sub_add,	sub_add,		sub_add_, DMS_MX_SZ_CALLING_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_cause : cause IE

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- cause_loc_	= cause location,
						- cause_class_	= cause class,
						- cause_val_	= cause value,
						- cause_diag_	= cause diagnostic.

			*/

#define Isdn_dms_store_cause(pr, coding_std_, cause_loc_, cause_class_, cause_val_, cause_diag_) \
		Set_offset_dms	(pr,	cause);												\
		Set_val_dms		(cause,	coding_std,	coding_std_);							\
		Set_val_dms		(cause,	cause_loc,	cause_loc_);							\
		Set_val_dms		(cause,	cause_class,cause_class_);							\
		Set_val_dms		(cause,	cause_val,	cause_val_);							\
		Set_str_dms		(cause,	cause_diag,	cause_diag_, DMS_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_dms_store_chan_id_BRI : store channel ID IE

					INPUT :
						- pr 			= primitive ID,
						- pref_excl_	= preferred channel,
						- chan_sel_		= channel selection,
			*/

#define Isdn_dms_store_chan_id_BRI(pr, pref_excl_, chan_sel_)		\
		Set_offset_dms	(pr,		chan_id);							\
        Set_val_nil_dms	(chan_id);										\
		Set_val_dms		(chan_id,	int_type,	INT_TYPE_BRI);			\
		Set_val_dms		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_dms		(chan_id,	chan_sel,	chan_sel_);				\
		Set_next_ie_dms	(chan_id)

			/*

				 Isdn_dms_store_chan_id_PRI : store channel ID IE

					INPUT :
						- pr 			= primitive ID,
						- int_id_		= interface ID,
						- pref_excl_	= preferred channel,
						- d_chan_		= D-channel indicator,
						- int_id_val_	= interface ID value,
						- chan_sel_		= channel selection,
						- chan_nb_		= channel number.

			*/

#define Isdn_dms_store_chan_id_PRI(pr, int_id_,pref_excl_, d_chan_, chan_sel_, int_id_val_,chan_nb_) \
		Set_offset_dms	(pr,		chan_id);							\
		Set_val_dms		(chan_id,	int_type,	INT_TYPE_PRI);			\
		Set_val_dms		(chan_id,	int_id,		int_id_);				\
		Set_val_dms		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_dms		(chan_id,	d_chan,		d_chan_);				\
		Set_val_dms		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_dms		(chan_id,	chan_sel,	chan_sel_);				\
		Set_val_dms		(chan_id,	chan_nb,	chan_nb_);				\
		Set_next_ie_dms	(chan_id)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_dms_store_change_status : Change the status of a
												B channel.
					INPUT :
						- pr            = primitive ID,
						- status		= Status of the B channel(s)
			*/

#define Isdn_dms_store_change_status(pr, status_)  					\
		Set_offset_dms  (pr,        change_status);                 \
		Set_val_dms     (change_status, status,  	status_);   	\
		Set_next_ie_dms (change_status)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_dms_store_endpoint_id : store endpoint identifier

					INPUT :
						- pr 		= primitive ID,
						- us_id		= user id,
						- t_id		= terminal id,
						- interp_	= interpreter flag
                        - ces_		= CES
			*/

#define Isdn_dms_store_endpoint_id(pr, us_id, t_id, interp_, ces_)		\
				Set_offset_dms	(pr,			endpoint_id);			\
				Set_val_dms		(endpoint_id,	usid,		us_id);		\
				Set_val_dms		(endpoint_id,	tid,		t_id);		\
				Set_val_dms		(endpoint_id,	interp,		interp_);	\
				Set_val_dms		(endpoint_id,	ces,		ces_);		\
				Set_next_ie_dms	(endpoint_id)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_conn_nb : store connected number IE

					INPUT :
						- pr 				= primitive ID,
						- nb_type_			= numbering type,
						- plan_id_			= numbering plan,
						- pres_				= presentation indicator,
						- screen_ind_		= screening indicator,
						- nb_				= pointer on the conn number literal string.
			*/

#define Isdn_dms_store_conn_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)				\
		Set_offset_dms	(pr,		conn_nb);								\
		Set_val_dms		(conn_nb,	nb_type,		nb_type_);				\
		Set_val_dms		(conn_nb,	plan_id,		plan_id_);				\
		Set_val_dms		(conn_nb,	pres,			pres_);					\
		Set_val_dms		(conn_nb,	screen_ind, 	screen_ind_);			\
		Set_str_dms		(conn_nb,	nb, 			nb_, DMS_MX_SZ_CONN_NB+1)


/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_facility : facility IE

					INPUT :
						- pr 			= primitive ID,
						- comp_tag		= component tag
						- service		= service
						- pref			= preferred
						- error_val		= error value
						- p_invoke_id	= invoke id
			*/

#define Isdn_dms_store_facility(pr, comp_tag_, service_, pref_, error_val_, p_invoke_id) \
		Set_offset_dms	(pr,		facility);										\
		Set_val_dms		(facility,	comp_tag,	comp_tag_);							\
		Set_val_dms		(facility,	service,	service_);							\
		Set_val_dms		(facility,	pref,		pref_);								\
		Set_val_dms		(facility,	error_val,	error_val_);						\
		Set_str_dms		(facility,	invoke_id,	p_invoke_id,	DMS_MX_SZ_FACILITY+1)

			/*
				Isdn_dms_store_facility_INVOKE

					INPUT :
						- pr 			= primitive ID,
						- pref			= preferred
						- service		= service
						- invoke_id		= invoke id
			*/

#define Isdn_dms_store_facility_INVOKE(pr, service_, pref_, p_invoke_id)	\
		Isdn_dms_store_facility(pr,			FAC_INVOKE,	service_,			\
								pref_,		BYTE_VAL_NIL,p_invoke_id)

			/*
				Isdn_dms_store_facility_RESULT

					INPUT :
						- pr 			= primitive ID,
						- invoke_id		= invoke id
			*/

#define Isdn_dms_store_facility_RESULT(pr, p_invoke_id)							\
		Isdn_dms_store_facility(pr,			FAC_RETURN_RESULT,	BYTE_VAL_NIL,	\
								BYTE_VAL_NIL,BYTE_VAL_NIL,		p_invoke_id)

			/*
				Isdn_dms_store_facility_ERROR

					INPUT :
						- pr 			= primitive ID,
						- error_val		= error value
						- invoke_id		= invoke id
			*/

#define Isdn_dms_store_facility_ERROR(pr, error_val_, p_invoke_id)				\
		Isdn_dms_store_facility(pr,			FAC_RETURN_ERROR,	BYTE_VAL_NIL,	\
								BYTE_VAL_NIL,error_val_,		p_invoke_id)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_feature_act : store feature activation IE

					INPUT :
						- pr 				= primitive ID,
						- feature_id_		= feature identifier,
						- feature_id_2_		= feature identifier (continuation).
			*/

#define Isdn_dms_store_feature_act(pr, feature_id_,	feature_id_2_)	\
		Set_offset_dms	(pr,			feature_act);					\
		Set_val_dms		(feature_act,	feature_id,		feature_id_);	\
		Set_val_dms		(feature_act,	feature_id_2,	feature_id_2_);	\
		Set_next_ie_dms	(feature_act)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_feature_ind : store feature indication IE

					INPUT :
						- pr 				= primitive ID,
						- feature_id_		= feature identifier,
						- feature_id_2_		= feature identifier (continuation)
						- status_ind_		= status indicator.
			*/

#define Isdn_dms_store_feature_ind(pr, feature_id_,	feature_id_2_, status_ind_)	\
		Set_offset_dms	(pr,			feature_ind);								\
		Set_val_dms		(feature_ind,	feature_id,		feature_id_);				\
		Set_val_dms		(feature_ind,	feature_id_2,	feature_id_2_);				\
		Set_val_dms		(feature_ind,	status_ind,		status_ind_);				\
		Set_next_ie_dms	(feature_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_hlc : high layer compatibility for
										non-CCITT coding standard

					INPUT :
						- pr		= primitive ID,
						- std		= coding standard,
						- tele	  = teleservice,
						- ext_tele	= extended teleservice.
			*/

#define Isdn_dms_store_hlc(pr, std, tele, ext_tele)			\
		Set_offset_dms	(pr,	hlc);							\
		Set_val_dms		(hlc,	coding_std,			std);		\
		Set_val_dms		(hlc,	teleservice,		tele);		\
		Set_val_dms		(hlc,	ext_teleservice,	ext_tele);	\
		Set_next_ie_dms	(hlc)

			/*
				Isdn_dms_store_hlc_CCITT : high layer compatibility for
										CCITT coding standard

					INPUT :
						- pr		= primitive ID,
						- tele	  = teleservice,
						- ext_tele	= extended teleservice.
			*/

#define Isdn_dms_store_hlc_CCITT(pr, tele, ext_tele)				\
		Isdn_dms_store_hlc	(pr, CODING_STD_CCITT, tele, ext_tele)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_information_rq : information_rq IE

					INPUT :
						- pr			= primitive ID,
						- info_type_	= information type
						- info_ind_		= information indicator
						- specific_info_= specific information

			*/

#define Isdn_dms_store_information_rq(pr, info_type_, info_ind_, specif_)	\
		Set_offset_dms	(pr,				information_rq);				\
		Set_val_dms		(information_rq,	info_type,	info_type_);		\
		Set_val_dms		(information_rq,	info_ind,	info_ind_);			\
		Set_val_dms		(information_rq,	info_specific,	specif_);		\
		Set_next_ie_dms	(information_rq)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/

#define Isdn_dms_store_keypad(pr,p_text)							\
		Set_offset_dms	(pr,		keypad);							\
		Set_str_dms		(keypad,	text,	p_text,	DMS_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_llc : low layer compatibility

				First definition : in one part :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_dms_store_llc(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_,	protocol_id_1_,	syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	hdr_, multi_frame_,	op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	option_2_, protocol_id_3_, option_3_) \
		Set_offset_dms	(pr,	llc);										\
		Set_val_dms		(llc,	coding_std,		coding_std_);				\
		Set_val_dms		(llc,	trf_cap,		trf_cap_);					\
		Set_val_dms		(llc,	out_band_neg,	out_neg);					\
		Set_val_dms		(llc,	trf_mode,		trf_mode_);					\
		Set_val_dms		(llc,	trf_rate,		trf_rate_);					\
		Set_val_dms		(llc,	structure,		structure_);				\
		Set_val_dms		(llc,	dest_rate,		dest_rate_);				\
		Set_val_dms		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_dms		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_dms		(llc,	negotiation,	negotiation_);				\
		Set_val_dms		(llc,	user_rate,		user_rate_);				\
		Set_val_dms		(llc,	inter_rate,		inter_rate_);				\
		Set_val_dms		(llc,	nic_tx,			nic_tx_);					\
		Set_val_dms		(llc,	nic_rx,			nic_rx_);					\
		Set_val_dms		(llc,	fc_tx,			fc_tx_);					\
		Set_val_dms		(llc,	fc_rx,			fc_rx_);					\
		Set_val_dms		(llc,	hdr,			hdr_);						\
		Set_val_dms		(llc,	multi_frame,	multi_frame_);				\
		Set_val_dms		(llc,	op_mode,		op_mode_);					\
		Set_val_dms		(llc,	lli_negot,		lli_negot_);				\
		Set_val_dms		(llc,	assign,			assign_);					\
		Set_val_dms		(llc,	band_negot,		band_negot_);				\
		Set_val_dms		(llc,	stop_bit,		stop_bit_);					\
		Set_val_dms		(llc,	data_bit,		data_bit_);					\
		Set_val_dms		(llc,	parity,			parity_);					\
		Set_val_dms		(llc,	duplex,			duplex_);					\
		Set_val_dms		(llc,	modem,			modem_);					\
		Set_val_dms		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_dms		(llc,	option_2,		option_2_);					\
		Set_val_dms		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_val_dms		(llc,	option_3,		option_3_);					\
		Set_next_ie_dms	(llc)

			/*--------------------------------------------*/

			/*
				Isdn_dms_store_llc : low layer compatibility

				Second definition : DIVIDED IN 2 PARTS for compilers which
				do not accept so many parameters in macros :

					Isdn_dms_store_llc_1_4 : octet 1 to octet 4 included,

						INPUT :
							- pr			= primitive ID,
							- coding_std_	= coding standard,
							- trf_cap_		= information transfer capability,
							- out_neg		= out band negotiation,
							- trf_mode_		= transfer mode,
							- trf_rate_		= information transfer rate,
							- structure_	= structure,
							- dest_rate_	= destination rate,

					Isdn_dms_store_llc_5_7 : octet 5 to octet 7 included,

						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_dms_store_llc_1_4(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_)\
		Set_offset_dms	(pr,	llc);										\
		Set_val_dms		(llc,	coding_std,		coding_std_);				\
		Set_val_dms		(llc,	trf_cap,		trf_cap_);					\
		Set_val_dms		(llc,	out_band_neg,	out_neg);					\
		Set_val_dms		(llc,	trf_mode,		trf_mode_);					\
		Set_val_dms		(llc,	trf_rate,		trf_rate_);					\
		Set_val_dms		(llc,	structure,		structure_);				\
		Set_val_dms		(llc,	dest_rate,		dest_rate_)

#define Isdn_dms_store_llc_5_7(protocol_id_1_,	syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	hdr_, multi_frame_,	op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	option_2_, protocol_id_3_, option_3_) \
		Set_val_dms		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_dms		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_dms		(llc,	negotiation,	negotiation_);				\
		Set_val_dms		(llc,	user_rate,		user_rate_);				\
		Set_val_dms		(llc,	inter_rate,		inter_rate_);				\
		Set_val_dms		(llc,	nic_tx,			nic_tx_);					\
		Set_val_dms		(llc,	nic_rx,			nic_rx_);					\
		Set_val_dms		(llc,	fc_tx,			fc_tx_);					\
		Set_val_dms		(llc,	fc_rx,			fc_rx_);					\
		Set_val_dms		(llc,	hdr,			hdr_);						\
		Set_val_dms		(llc,	multi_frame,	multi_frame_);				\
		Set_val_dms		(llc,	op_mode,		op_mode_);					\
		Set_val_dms		(llc,	lli_negot,		lli_negot_);				\
		Set_val_dms		(llc,	assign,			assign_);					\
		Set_val_dms		(llc,	band_negot,		band_negot_);				\
		Set_val_dms		(llc,	stop_bit,		stop_bit_);					\
		Set_val_dms		(llc,	data_bit,		data_bit_);					\
		Set_val_dms		(llc,	parity,			parity_);					\
		Set_val_dms		(llc,	duplex,			duplex_);					\
		Set_val_dms		(llc,	modem,			modem_);					\
		Set_val_dms		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_dms		(llc,	option_2,		option_2_);					\
		Set_val_dms		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_val_dms		(llc,	option_3,		option_3_);					\
		Set_next_ie_dms	(llc)

			/*--------------------------------------------*/

			/*
				Isdn_dms_store_llc_V110 : low layer compatibility for
											V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_dms_store_llc_V110(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_dms_store_llc_1_4(pr,			coding_std_,	trf_cap_,			\
							out_neg,		trf_mode_,		trf_rate_,			\
							structure_,		dest_rate_);						\
		Isdn_dms_store_llc_5_7(PROTOCOL_ID_1_V110,	syn_asyn_,	negotiation_,	\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		fc_tx_,			fc_rx_,				\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							BYTE_VAL_NIL,	protocol_id_3_,	BYTE_VAL_NIL)

			/*--------------------------------------------*/

			/*
				Isdn_dms_store_llc_V120 : low layer compatibility for
											V120 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_dms_store_llc_V120(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_dms_store_llc_1_4(pr,			coding_std_,	trf_cap_,			\
							out_neg,		trf_mode_,		trf_rate_,			\
							structure_,		dest_rate_);						\
		Isdn_dms_store_llc_5_7(PROTOCOL_ID_1_V120,								\
							syn_asyn_,		negotiation_,	user_rate_,			\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	hdr_,				\
							multi_frame_,	op_mode_,		lli_negot_,			\
							assign_,		band_negot_,	stop_bit_,			\
							data_bit_,		parity_,		duplex_,			\
							modem_,			protocol_id_2_, BYTE_VAL_NIL,		\
							protocol_id_3_,	BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/
#if NS_SPF_FACILITY == ON

			/*
				Isdn_dms_store_spf_fac : network specific facility

					INPUT :
						- pr 			= primitive ID,
						- net_id_lgth_	= length of network identification,
						- net_id_type_	= network identification type,
						- net_id_plan_	= network identification plan,
						- p_net_id		= network identification array
						- fac_coding_	= facility coding value,
						- p_fac_info	= network-specific facility specification
			*/

#	define Isdn_dms_store_spf_fac(pr, net_id_lgth_, net_id_type_, net_id_plan_, p_net_id, fac_coding_, p_fac_info)	\
		{uchar FAR *p_sav;															\
		Set_offset_dms	(pr,		spf_fac);										\
		Set_val_dms		(spf_fac,	net_id_lgth,	net_id_lgth_);					\
		Set_val_dms		(spf_fac,	net_id_type,	net_id_type_);					\
		Set_val_dms		(spf_fac,	net_id_plan,	net_id_plan_);					\
		p_sav = ns_int_ctx.p__val;													\
		Set_mem_dms		(spf_fac,	net_id,			p_net_id,	(net_id_lgth_ > DMS_MX_SZ_NET_ID) ? DMS_MX_SZ_NET_ID : net_id_lgth_);\
		ns_int_ctx.p__val = p_sav;													\
		}																			\
		Set_val_dms		(spf_fac,	facility_coding,fac_coding_);					\
		Set_str_dms		(spf_fac,	fac_info,		p_fac_info, DMS_MX_SZ_SPF_FAC+1)

#endif

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_notif_ind : notification indicator

					INPUT :
						- pr	= primitive ID,
						- descr	= description.

			*/

#define Isdn_dms_store_notif_ind(pr, descr)				\
		Set_offset_dms	(pr,		notif_ind);				\
		Set_val_dms		(notif_ind,	notif_descr,	descr);	\
		Set_next_ie_dms	(notif_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_o_called_nb : store connected number IE

					INPUT :
						- pr 				= primitive ID,
						- nb_type_			= numbering type,
						- plan_id_			= numbering plan,
						- pres_				= presentation indicator,
						- screen_ind_		= screening indicator,
						- reason_			= reason
						- cfnr_				= cfnr
						- redir_counter_	= redir counter
						- nb_				= pointer on the conn number literal string.
			*/

#define Isdn_dms_store_o_called_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, reason_, cfnr_, redir_counter_, nb_)\
		Set_offset_dms	(pr,		o_called_nb);							\
		Set_val_dms		(o_called_nb,	nb_type,		nb_type_);			\
		Set_val_dms		(o_called_nb,	plan_id,		plan_id_);			\
		Set_val_dms		(o_called_nb,	pres,			pres_);				\
		Set_val_dms		(o_called_nb,	screen_ind, 	screen_ind_);		\
		Set_val_dms		(o_called_nb,	reason, 		reason_);			\
		Set_val_dms		(o_called_nb,	cfnr, 			cfnr_);				\
		Set_val_dms		(o_called_nb,	redir_counter,	redir_counter_);	\
		Set_str_dms		(o_called_nb,	nb, 			nb_, DMS_MX_SZ_CONN_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_progress_ind : progress indicator

					INPUT :
						- pr				= primitive ID,
						- coding_std_		= coding standard,
						- progress_loc_		= location.
						- progress_descr_	= description.

			*/

#define Isdn_dms_store_progress_ind(pr, coding_std_, progress_loc_,progress_descr_)	\
		Set_offset_dms	(pr,			progress_ind);						\
		Set_val_dms		(progress_ind,	coding_std,		coding_std_);		\
		Set_val_dms		(progress_ind,	progress_loc,	progress_loc_);		\
		Set_val_dms		(progress_ind,	progress_descr,	progress_descr_);	\
		Set_next_ie_dms	(progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_redir_nb : store connected number IE

					INPUT :
						- pr 				= primitive ID,
						- nb_type_			= numbering type,
						- plan_id_			= numbering plan,
						- pres_				= presentation indicator,
						- screen_ind_		= screening indicator,
						- reason_			= reason
						- nb_				= pointer on the conn number literal string.
			*/

#define Isdn_dms_store_redir_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, reason_, nb_)\
		Set_offset_dms	(pr,		redir_nb);							\
		Set_val_dms		(redir_nb,	nb_type,		nb_type_);			\
		Set_val_dms		(redir_nb,	plan_id,		plan_id_);			\
		Set_val_dms		(redir_nb,	pres,			pres_);				\
		Set_val_dms		(redir_nb,	screen_ind, 	screen_ind_);		\
		Set_val_dms		(redir_nb,	reason, 		reason_);			\
		Set_str_dms		(redir_nb,	nb, 			nb_, DMS_MX_SZ_REDIR+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_redirection_nb : store connected number IE

					INPUT :
						- pr 				= primitive ID,
						- nb_type_			= numbering type,
						- plan_id_			= numbering plan,
						- pres_				= presentation indicator,
						- screen_ind_		= screening indicator,
						- reason_			= reason
						- nb_				= pointer on the conn number literal string.
			*/

#define Isdn_dms_store_redirection_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, reason_, nb_)\
		Set_offset_dms	(pr,		redirection_nb);							\
		Set_val_dms		(redirection_nb,	nb_type,		nb_type_);			\
		Set_val_dms		(redirection_nb,	plan_id,		plan_id_);			\
		Set_val_dms		(redirection_nb,	pres,			pres_);				\
		Set_val_dms		(redirection_nb,	screen_ind, 	screen_ind_);		\
		Set_val_dms		(redirection_nb,	reason, 		reason_);			\
		Set_str_dms		(redirection_nb,	nb, 			nb_, DMS_MX_SZ_REDIR+1)

/*-------------------------------------------------------------------------*/
			/*

				Isdn_dms_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_dms_store_restart_ind(pr, class_)									\
		Set_offset_dms	(pr,			restart_ind);								\
		Set_val_dms		(restart_ind,	restart_class,	class_);					\
		Set_next_ie_dms	(restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_signal : signal message

					INPUT :
						- pr			= primitive ID,
						- signal_val	= signal value.

			*/

#define Isdn_dms_store_signal(pr, signal_val_)				\
		Set_offset_dms	(pr,		signal);					\
		Set_val_dms		(signal,	signal_val,	signal_val_);	\
		Set_next_ie_dms	(signal)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_spid

					INPUT :
						- pr		= primitive ID,
                        - ces_		= CES
						- spid_p	= spid.

			*/

#define Isdn_dms_store_spid(pr, spid_p, ces_)							\
		Set_offset_dms	(pr,		spid);								\
        Set_val_dms		(spid,		ces,		ces_);					\
		Set_str_dms		(spid,		p_spid,		spid_p,	DMS_MX_SZ_SPID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_transit_net_sel : transit network selection

					INPUT :
						- pr 			= primitive ID,
						- nb_type_		= numbering type,
						- plan_id_		= numbering plan,
						- net_id_		= address of network identification.
			*/

#define Isdn_dms_store_transit_net_sel(pr, nb_type_, nb_plan_, net_id_)								\
		Set_offset_dms	(pr,				transit_net_sel);						\
		Set_val_dms		(transit_net_sel,	net_id_type,	nb_type_);	\
		Set_val_dms		(transit_net_sel,	net_id_plan,	nb_plan_);	\
		Set_str_dms		(transit_net_sel,	net_id,			net_id_,	DMS_MX_SZ_TRANSIT_NET_SEL+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_os_accss : Operator system access (OS_ACCSS)

					INPUT :
						- pr 			= primitive ID,
						- accss_type_	= type of access
			*/

#define Isdn_dms_store_os_accss(pr, access_type_)				\
		Set_offset_dms	(pr,		os_accss);						\
		Set_val_dms		(os_accss,	access_type,	access_type_);	\
		Set_next_ie_dms	(os_accss)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_call_appear : Call appearance (CALL_APPEAR)

					INPUT :
						- pr 				= primitive ID,
						- call_appear_id_	= call appearance identifier
						- call_appear_id_2_	= call appearance identifier (cont.)
			*/

#define Isdn_dms_store_call_appear(pr, call_appear_id_, call_appear_id_2_)	\
		Set_offset_dms	(pr,			call_appear);							\
		Set_val_dms		(call_appear,	call_appear_id,		call_appear_id_);	\
		Set_val_dms		(call_appear,	call_appear_id_2,	call_appear_id_2_);	\
		Set_next_ie_dms	(call_appear)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_dms_store_prot_ver_ctrl : Protocol version control (PROT_VER_CTRL)

					INPUT :
						- pr 		= primitive ID,
						- version_	= version identifier
						- issue_	= issue code
			*/

#define Isdn_dms_store_prot_ver_ctrl(pr, version_, issue_)	\
		Set_offset_dms	(pr,			prot_ver_ctrl);			\
		Set_val_dms		(prot_ver_ctrl,	version,	version_);	\
		Set_val_dms		(prot_ver_ctrl,	issue,		issue_);	\
		Set_next_ie_dms	(prot_ver_ctrl)

/*EOF*/
