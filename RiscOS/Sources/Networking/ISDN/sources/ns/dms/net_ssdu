
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_ssdu.dms
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

	/* external functions prototype */

#if NEW_FCT_STYLE == ON
	uchar 	check_convert		(uchar FAR *p_to, uchar FAR *p_from, uint lgth, uchar code, uchar restriction);
#else
	uchar 	check_convert		();
#endif

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.dms */

#include "dms.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name		dms_cause_ssdu - implements the specific processing of a cause
								IE in a SSDU primitive.

Usage			uchar cause_ssdu ();

Return value : 	cause_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_cause, ssdu common context.

*--------------------------------------------------------------------------*/

uchar dms_cause_ssdu ()
{
	uchar	class_val;				/* cause class & value */

	if (direction == FROM_CALL_CONTROL) {

		class_val = C_v (I_cause_class, I_cause_val);

		switch (class_val) {

			case C_v (C_C_PROTOCOL_ERROR,	C_V_MANDATORY_IE_MISSING_96)		:
			case C_v (C_C_PROTOCOL_ERROR,	C_V_NON_EXISTENT_IE_99)				:
			case C_v (C_C_PROTOCOL_ERROR,	C_V_INVALID_IE_CONTENT_100)			:
			case C_v (C_C_PROTOCOL_ERROR,	C_V_MESSAGE_TYPE_NON_EXISTENT_97)	:
			case C_v (C_C_PROTOCOL_ERROR,	C_V_MESSAGE_NOT_COMPATIBLE_101)		:

				if (I_(cause,diag_lgth) == 0) {
					return (NOK);
				}

			default :
				return (OK);
		}
	}

	return (OK);
}

/*----------------------------------------------------------------------*/

uchar dms_chan_id_ssdu ()
{

	if (direction == FROM_CALL_CONTROL) {

		if (I_chan_id_int_type == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}

#			if NS_D_BACKUP == ON

					/*
					 * Check if the Na bears an active D channel
					 */

				if ((ns_nfas == ON) && (Nai != Nfas_nai_active_d_chan)) {

						/*
						 * This Nai does NOT bear an active D channel.
						 * We may have to modify the CHANNEL ID.
						 * The 'interface Id' MUST be EXPLICIT
						 * and the 'interface Id Value should be
						 * the CC Nai.
						 */

					if (I_(chan_id, int_id) == INT_ID_IMPLICIT) {

						I_(chan_id, int_id)	 	= INT_ID_EXPLICIT;
						I_(chan_id, int_id_val) = Nai;

					}

				}

#			endif

		}
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			fac_ssdu - implements the processing of the Facility IE
							of a received or to be sent SSDU message.

Usage			uchar fac_ssdu ();

Return value :  fac_ssdu returns	= OK valid data,
									= NOK invalid data and fatal error.

*--------------------------------------------------------------------------*/

uchar fac_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_facility_tag_component) {

			case FAC_INVOKE :
				return (r_exec_ssdu_ie ((uchar *) &DMS_FAC_INVOKE_SSDU));

			case FAC_RETURN_RESULT :
				return (r_exec_ssdu_ie ((uchar *) &DMS_FAC_RETURN_RESULT_SSDU));

			case FAC_RETURN_ERROR :
				return (r_exec_ssdu_ie ((uchar *) &DMS_FAC_RETURN_ERROR_SSDU));

			case FAC_REJECT :
				break;
		}

	} else {
			/* to CALL_CONTROL direction */

		switch (I_facility_tag_component) {

			case FAC_INVOKE :
				return (s_exec_ssdu_ie ((uchar *) &DMS_FAC_INVOKE_SSDU));

			case FAC_RETURN_RESULT :
				return (s_exec_ssdu_ie ((uchar *) &DMS_FAC_RETURN_RESULT_SSDU));

			case FAC_RETURN_ERROR :
				return (s_exec_ssdu_ie ((uchar *) &DMS_FAC_RETURN_ERROR_SSDU));

			case FAC_REJECT :
				break;
		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			dms_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage			uchar dms_llc_ra_ssdu ();

Return value : 	dms_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar dms_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&DMS_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&DMS_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&DMS_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&DMS_P_LLC_2));

	} else {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&DMS_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&DMS_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&DMS_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&DMS_P_LLC_2));
	}

}

#if NS_SPF_FACILITY == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		dms_spf_fac_ssdu - implements the processing of the specific facility
						  IE (received or to be sent in a SSDU message).

Usage	   uchar dms_spf_fac_ssdu ();

Return value :  dms_spf_fac_ssdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar dms_spf_fac_ssdu ()
{

	if (direction == TO_CALL_CONTROL) {

		if (check_convert (	(uchar FAR *) p_ssdu_val,
							I_spf_fac_a_net_id,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) {
		  return (NOK);
		}

	} else {

		if (check_convert (	I_spf_fac_a_net_id,
							(uchar FAR *) (p_ssdu_val+1),
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) {
			return (NOK);
		}
	}

	p_ssdu_val += (DMS_MX_SZ_NET_ID + 1);

	return (OK);

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		dms_call_appear_ssdu - implements the checking of the
						  call appearance IE received in a SSDU message.

Usage	   uchar dms_call_appear_ssdu ();

Return value :  dms_call_appear_ssdu returns = OK   valid data,
									 = NOK  invalid data.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar dms_call_appear_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

			/* call appearance identifier value already checked in SPDU meta-program */

		  return (OK);
	}

		/*	call appearance identifier value is given with 2 octets coding
			each a 7-bits value : first octet should not be BYTE_VAL_NIL
			and both octets should be in range 0 to 127 */

	if (I_(call_appear, call_appear_id) > 127) return (NOK);

		/* get second identifier */

	i = I_(call_appear, call_appear_id_2);

	if (i != BYTE_VAL_NIL) {

			/* second octet is provided : first octet should not be null */

		if ((i > 127) ||
			(I_(call_appear, call_appear_id) == 0)) {

			return (NOK);
		}
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------

		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |				 ssdu_ie
	|----|------|---------|	 ======================================
	|	 |	X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |	X------> START
	|----|------|---------|	 |---------|----|-----|------|--------|	 XXXX
	|	 |		|		  |	 |		   |	|	  |		 |		  |	 YYYY
	|----|------|---------|	 |---------|----|-----|------|--------|	 END
	|	 |		|		  |	 |		   |	|	  |		 |		  |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |		  |

*/

	/* NS primitive interface program */

/*====================	CALL  ESTABLISHMENT  MESSAGES	=====================*/

		/* NS_ALERT_RQ */
		/* NS_ALERT_IN */

#define DMS_ALERT_RQ			DMS_ALERT_IN
#define	DMS_NET_ALERT_IN		DMS_ALERT_IN
#define DMS_NET_ALERT_RQ		DMS_ALERT_IN

		/* NS_CALL_PROC_RQ */
		/* NS_CALL_PROC_IN */

#define DMS_NET_CALL_PROC_IN	DMS_CALL_PROC_IN
#define DMS_NET_CALL_PROC_RQ	DMS_CALL_PROC_IN
#define DMS_CALL_PROC_RQ		DMS_CALL_PROC_IN

		/* NS_CONN_RQ */
		/* NS_CONN_IN */

#define DMS_NET_CONN_IN			DMS_CONN_RQ
#define DMS_CONN_RQ				DMS_CONN_IN
#define DMS_NET_CONN_RQ			DMS_CONN_IN

		/* NS_CONN_RS */
		/* NS_CONN_CO */

#define DMS_NET_CONN_CO			DMS_CONN_RS
#define DMS_NET_CONN_RS			DMS_CONN_CO
#define DMS_CONN_RS				DMS_CONN_CO

		/* NS_PROGRESS_RQ */
		/* NS_PROGRESS_IN */

#define	DMS_NET_PROGRESS_RQ		DMS_PROGRESS_IN
#define	DMS_PROGRESS_RQ			DMS_PROGRESS_IN
#define	DMS_NET_PROGRESS_IN		DMS_PROGRESS_RQ


#define	DMS_NET_SETUP_ACK_RQ	DMS_SETUP_ACK_IN

/*===============	CALL  INFORMATION  PHASE  MESSAGES	====================*/

		/* NS_RET_RQ */

#define DMS_NET_RET_IN			DMS_RET_RQ
#define DMS_NET_RET_RS			DMS_RET_CO

		/* NS_HOLD_RQ */
		/* NS_HOLD_IN */

#define DMS_NET_HOLD_IN			DMS_HOLD_IN
#define DMS_NET_HOLD_RQ			DMS_HOLD_IN
#define DMS_HOLD_RQ				DMS_HOLD_IN

		/* NS_HOLD_RS */

#define DMS_NET_HOLD_RS			DMS_HOLD_CO

		/* NS_HOLD_CO */

#define DMS_NET_HOLD_CO			DMS_HOLD_RS
#define DMS_HOLD_RS				DMS_HOLD_CO
#define DMS_NET_HOLD_RS			DMS_HOLD_CO

/*=====================	CALL  CLEARING  MESSAGES	=======================*/

		/* NS_CLEAR_RQ */
		/* NS_CLEAR_IN */

#define DMS_NET_CLEAR_RQ		DMS_CLEAR_IN
#define DMS_CLEAR_RQ			DMS_CLEAR_IN
#define	DMS_NET_CLEAR_IN		DMS_CLEAR_RQ

		/* NS_CLEAR_RS */
		/* NS_CLEAR_CO */

#define	DMS_NET_CLEAR_CO		DMS_CLEAR_RS
#define	DMS_CLEAR_RS			DMS_CLEAR_CO
#define	DMS_NET_CLEAR_RS		DMS_CLEAR_CO

/*====================		MISCELLANEOUS  MESSAGES	=======================*/

		/* NS_FAC_RQ */
		/* NS_FAC_IN */

#define	DMS_NET_FAC_IN			DMS_FAC_RQ
#define DMS_FAC_RQ				DMS_FAC_IN
#define DMS_NET_FAC_RQ			DMS_FAC_IN

		/* NS_INFO_RQ */
		/* NS_INFO_IN */

#define DMS_NET_INFO_IN			DMS_INFO_RQ
#define DMS_NET_INFO_RQ			DMS_INFO_IN
#define DMS_INFO_RQ				DMS_INFO_IN


		/* NS_NOTIFY_RQ */
		/* NS_NOTIFY_IN */

#define	DMS_NET_NOTIFY_RQ		DMS_NOTIFY_IN
#define	DMS_NOTIFY_RQ			DMS_NOTIFY_IN
#define	DMS_NET_NOTIFY_IN		DMS_NOTIFY_RQ

		/* NS_RESTART_RQ */

#define	DMS_NET_RESTART_RQ		DMS_RESTART_IN

		/* NS_RESTART_IN */

#define DMS_RESTART_RQ				DMS_RESTART_IN
#define DMS_NET_RESTART_RQ			DMS_RESTART_IN
#define DMS_NET_RESTART_IN			DMS_RESTART_IN
#define DMS_RESTART_RS				DMS_RESTART_IN
#define DMS_NET_RESTART_RS			DMS_RESTART_IN
#define DMS_RESTART_CO				DMS_RESTART_IN
#define DMS_NET_RESTART_CO			DMS_RESTART_IN

#define	DMS_SERVICE_CO				DMS_SERVICE_RQ
#define	DMS_NET_SERVICE_RQ			DMS_SERVICE_RQ
#define	DMS_NET_SERVICE_CO			DMS_SERVICE_RQ

/*=========================================================================*/

#define Ns_dms_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_dms_end_table_or_function		};

#define Ns_dms_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_dms_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_dms		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_dms_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_dms_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "dms.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define DMS_MX_SSDU (sizeof(DMS_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		dms_mx_size_ssdu = DMS_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_dms_table_or_function
#undef Ns_dms_end_table_or_function
#undef Ns_dms_tab_ssdu_ie_entry
#undef Ns_dms_tab_ssdu_ie_mx_entry
#undef Ns_dms_tab_ssdu_entry

#define Ns_dms_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_dms_end_table_or_function		}

#define Ns_dms_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_dms_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_dms_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_dms
#	define Message_header_ssdu_ie_dms		Ns_dms_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_dms_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_dms_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_dms_ssdu ()
{
    uchar   i_pic;

#	include "dms.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

