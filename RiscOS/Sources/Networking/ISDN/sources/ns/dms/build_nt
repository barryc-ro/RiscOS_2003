/*--------------------------------------------------------------------------*
 *                      M O D U L E     H E A D E R
 *
 * filename - build_nt.dms
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      dms_net_build_pdu_ns - implements the simulation of the network side
 *                  for a call connection.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N    H E A D E R

Name            dms_net_build_pdu_ns - implements the simulation of the network side
					for a call connection.

Usage           dms_net_build_pdu_ns ()

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void dms_net_build_pdu_ns ()
{
        /* Message builder */

	switch (Tolower (g_spdu_id[0])) {

/*==========================================================================*/

		/*========== primitives as seen from TE side ==========*/

            /* Call establishment spdu event */

        case DA_ALERT :
                *p_info++ = ALERT;

                 p_ie_o = p_info;

                *p_info++ = PROGRESS_IND;
                *p_info++ = 2;
                *p_info++ = 0x82;   /* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
                *p_info++ = 0x88;   /* 1+ PROGRESS_DESCR_IN_BAND_NOW */

                 p_ie_m = p_info;

                *p_info++ = SIGNAL;
                *p_info++ = 1;
                *p_info++ = 0x00;   /* DIAL_TONE_ON */

				*p_info++ = REDIR_NB;
                *p_info++ = 5;
                *p_info++ = 0x00;   /* 0+ NB_UNKNOWN+ PLAN_UNKNOWN */
                *p_info++ = 0x03;   /* 1+ PRES_ALLOWED+ 000 + SCREENING_NET_PROVIDED */
                *p_info++ = 0x80;   /* 1+ 000 + REASON_UNKNOWN */
                 Put_text ("33");

                *p_info++ = REDIRECTION_NB;
                *p_info++ = 5;
				*p_info++ = 0x00;   /* 0+ NB_UNKNOWN+ PLAN_UNKNOWN */
                *p_info++ = 0x03;   /* 1+ PRES_ALLOWED+ 000 + SCREENING_NET_PROVIDED */
                *p_info++ = 0x80;   /* 1+ 000 + REASON_UNKNOWN */
                 Put_text ("44");

                break;

        case DA_CALL_PROC :
                *p_info++ = CALL_PROC;

				*p_info++ = CHAN_ID;
				if (Na_type == BRI) {	/* Channel ID IE for Basic Rate */

					*p_info++ = 1;
					*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
											CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
				} else {	/* Channel ID IE for Primary Rate */

					*p_info++ = 3;
					*p_info++ = 0xa9;
					*p_info++ = 0x83;
					*p_info++ = 0x81;
				}

				 p_ie_o = p_info;

                *p_info++ = PROGRESS_IND;
                *p_info++ = 2;
                *p_info++ = 0x82;   /* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
                *p_info++ = 0x88;   /* 1+ PROGRESS_DESCR_IN_BAND_NOW */

                *p_info++ = NOTIF_IND;
                *p_info++ = 1;
                *p_info++ = 0xf1;   /* 1+ 111 0001 = call info/event */

                *p_info++ = SIGNAL;
				*p_info++ = 1;
                *p_info++ = 0x00;   /* DIAL_TONE_ON */

                *p_info++ = FEATURE_IND;
                *p_info++ = 2;
                *p_info++ = 0x81;   /* 1+ feature #1 */
                *p_info++ = 0x01;   /* 0000 + status active */

                *p_info++ = CALLED_NB;
                *p_info++ = 11;
                *p_info++ = 0x80;   /* 1+ NB_UNKNOWN+ PLAN_UNKNWON */
                 Put_text ("1234567890");

                break;

        case DA_CONN :
                *p_info++ = CONN;

                 p_ie_o = p_info;

                *p_info++ = CONN_NB;
                *p_info++ = 3;
                *p_info++ = 0x80;   /* 1+ NB_UNKNOWN+ PLAN_UNKNOWN */
                 Put_text ("33");

                *p_info++ = PROGRESS_IND;
                *p_info++ = 2;
                *p_info++ = 0x82;   /* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
                *p_info++ = 0x88;   /* 1+ PROGRESS_DESCR_IN_BAND_NOW */

                *p_info++ = NOTIF_IND;
                *p_info++ = 1;
                *p_info++ = 0xf1;   /* 1+ 111 0001 = call info/event */

                *p_info++ = SIGNAL;
                *p_info++ = 1;
                *p_info++ = 0x00;   /* DIAL_TONE_ON */

                break;

        case DA_CONN_ACK :
                *p_info++ = CONN_ACK;

                 p_ie_o = p_info;

                *p_info++ = CONN_NB;
                *p_info++ = 3;
                *p_info++ = 0x80;   /* 1+ NB_UNKNOWN+ PLAN_UNKNOWN */
                 Put_text ("33");

				if (Na_type == BRI) {	/* Channel ID IE for Basic Rate */

					*p_info++ = CHAN_ID;
					*p_info++ = 1;
					*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
										CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
				}

				*p_info++ = NOTIF_IND;
                *p_info++ = 1;
                *p_info++ = 0xf1;   /* 1+ 111 0001 = call info/event */

                *p_info++ = SIGNAL;
                *p_info++ = 1;
                *p_info++ = 0x00;   /* DIAL_TONE_ON */

                break;

        case DA_SETUP :
                *p_info++ = SETUP;

                *p_info++ = BC;     /* Mandatory */
                *p_info++ = 2;
                *p_info++ = 0x88;   /* 1+ CODING_STD_CCITT+ TRF_CAP_UNRESTRICTED */
                *p_info++ = 0x90;   /* 0+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */

                 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				if (Na_type == BRI) {	/* Channel ID IE for Basic Rate */

					*p_info++ = 1;
					*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
											CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
				} else {	/* Channel ID IE for Primary Rate */

					*p_info++ = 3;
					*p_info++ = 0xa9;
					*p_info++ = 0x83;
					*p_info++ = 0x81;
				}

                    /* no facility IE */
                    /* no progress ind IE */

                 p_ie_o = p_info;

                *p_info++ = SIGNAL;
                *p_info++ = 1;
                *p_info++ = 0x00;   /* DIAL_TONE_ON */

				*p_info++ = ENDPOINT_ID;
                *p_info++ = 2;
                *p_info++ = 0x81;       /* USID #1 */
                *p_info++ = 0x81;       /* interpreter 0, TID #1 */

                *p_info++ = CALLING_NB;
                *p_info++ = 3;
                *p_info++ = 0x80;   /* 1+ NB_UNKNOWN+ PLAN_UNKNOWN */
                 Put_text ("33");

                    /* no calling sub add IE */

                *p_info++ = CALLED_NB;
                *p_info++ = 11;
                *p_info++ = 0x80;   /* 1+ NB_UNKNOWN+ PLAN_UNKNWON */
                 Put_text ("1234567890");

                *p_info++ = CALLED_SUB_ADD;
                *p_info++ = 5;
                *p_info++ = 0x80;   /* 1+ SUB_ADD_OSI+ SUB_ADD_EVEN+ 000 */
				 Put_text ("4321");

				if (Na_type != BRI) {

					*p_info++ = O_CALLED_NB;
					*p_info++ = 11;
					*p_info++ = 0x00;   /* 1+ NB_UNKNOWN+ PLAN_UNKNWON */
					*p_info++ = 0x00;
					*p_info++ = 0x0E;
					*p_info++ = 0xc5;

					Put_text ("1234*67");
				}

				*p_info++ = REDIR_NB;
                *p_info++ = 4;
                *p_info++ = 0x00;   /* 0+ NB_UNKNOWN+ PLAN_UNKNOWN */
                *p_info++ = 0x83;   /* 1+ PRES_ALLOWED+ 000 + SCREENING_NET_PROVIDED */
                 Put_text ("22");

                *p_info++ = LLC;
                *p_info++ = 12;
                *p_info++ = 0x08;   /* 0+ CODING_STD_CCITT+ TRF_CAP_UNRESTRICTED */
                *p_info++ = 0xc0;   /* 1+ OUT_BAND_POSSIBLE */
                *p_info++ = 0x10;   /* 0+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */
                *p_info++ = 0x10;   /* 0+ STRUCTURE_8_KHZ_INT+ 00+ 00 */
                *p_info++ = 0x90;   /* 1+ 00+ TRF_RATE_64KBS */
				*p_info++ = 0x21;   /* 0+ 01+ PROTOCOL_ID_1_V110 */
                *p_info++ = 0x02;   /* 0+ SYN+ NEGOTIATION_NOT_IN_BAND+ RA_1_2KBS */
                *p_info++ = 0x1A;   /* 0+ INTER_RA_UNUSED+ NIC_RQ_TX_DATA+
                                        NIC_ACCEPT_DATA+ FLOW_NOT_RQ_TX_DATA+
                                        FLOW_CAN_ACCEPT_DATA+ 0 */
                *p_info++ = 0x5b;   /* 0+ STOP_BIT_1_5+ DATA_BIT_8+ NO_PARITY */
                *p_info++ = 0xc0;   /* 1+ FULL_DUPLEX+ MODEM_RESERVED */
                *p_info++ = 0xc6;   /* 1+ 10+ PROTOCOL_ID_2_X25_LL */
                *p_info++ = 0xe6;   /* 1+ 11+ PROTOCOL_ID_3_X25_PL */

                *p_info++ = HLC;
                *p_info++ = 2;
                *p_info++ = 0x91;   /* 1+ CODING_STD_CCITT+ 100+ 01 */
                *p_info++ = 0x81;   /* 1+ SERVICE_TELEPHONY */

                *p_info++ = 0x96;   /* Shift to codeset 6 */

                *p_info++ = CALL_APPEAR;
                *p_info++ = 1;
                *p_info++ = 0x81;   /* 1+ CALL_APPEAR_ID #1*/

                break;

        case DA_SETUP_ACK :
                *p_info++ = SETUP_ACK;

                 p_ie_m = p_info;

				if (Na_type == BRI) {	/* Channel ID IE for Basic Rate */

					*p_info++ = CHAN_ID;
					*p_info++ = 1;
					*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
											CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
				}

				p_ie_o = p_info;

                *p_info++ = PROGRESS_IND;
                *p_info++ = 2;
                *p_info++ = 0x82;   /* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
                *p_info++ = 0x88;   /* 1+ PROGRESS_DESCR_IN_BAND_NOW */

                *p_info++ = NOTIF_IND;
                *p_info++ = 1;
                *p_info++ = 0xf1;   /* 1+ 111 0001 = call info/event */

                *p_info++ = SIGNAL;
                *p_info++ = 1;
                *p_info++ = 0x00;   /* DIAL_TONE_ON */

                break;

        case DA_PROGRESS :
                *p_info++ = PROGRESS;

                *p_info++ = CAUSE;
                *p_info++ = 2;
                *p_info++ = 82;         /* CODING STD & PUBLIC NETWORK */
                *p_info++ = 90;         /* #16 */

                 p_ie_m = p_info;

                *p_info++ = PROGRESS_IND;
                *p_info++ = 2;
                *p_info++ = 0x82;   /* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
                *p_info++ = 0x88;   /* 1+ PROGRESS_DESCR_IN_BAND_NOW */

                 p_ie_o = p_info;

                *p_info++ = NOTIF_IND;
                *p_info++ = 1;
                *p_info++ = 0xf1;   /* 1+ 111 0001 = call info/event */

                *p_info++ = SIGNAL;
				*p_info++ = 1;
                *p_info++ = 0x00;   /* DIAL_TONE_ON */

				break;

        case DA_DISC :
                *p_info++ = DISC;

                 p_ie_m = p_info;

                *p_info++ = CAUSE;
                *p_info++ = 2;
                *p_info++ = 0x82;   /* 1+ CODING_STD_CCITT+ 0+ LOCATION_PU_NET_LOC_USER */
                *p_info++ = 0x90;   /* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_CLEARING_16 */

                 p_ie_o = p_info;

                *p_info++ = SIGNAL;
                *p_info++ = 1;
                *p_info++ = 0x00;   /* DIAL_TONE_ON */

                break;

        case DA_REL :
                *p_info++ = REL;

                 p_ie_m = p_info;

                *p_info++ = CAUSE;
                *p_info++ = 2;
                *p_info++ = 0x82;
                *p_info++ = 0xD1;   /* 1+ C_C_NORMAL_EVENT+ C_V_81 */

                break;

        case DA_REL_COMP :
                *p_info++ = REL_COMP;

                 p_ie_m = p_info;

                *p_info++ = CAUSE;
                *p_info++ = 2;
                *p_info++ = 0x82;
                *p_info++ = 0x90;   /* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

                break;

        case DA_INFO :
				*p_info++ = INFO;

                *p_info++ = CAUSE;
                *p_info++ = 2;
                *p_info++ = 0x82;
                *p_info++ = 0x9f;   /* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

                 p_ie_o = p_info;

                *p_info++ = INFORMATION_RQ;
                *p_info++ = 1;
                *p_info++ = 0x80;   /* 1+ INFO COMPLETED+ INFO TYPE UNDEFINED */

				*p_info++ = ENDPOINT_ID;
				*p_info++ = 2;
				*p_info++ = 0x81;
				*p_info++ = 0x81;

			   *p_info++ = 0x96;   /* shift to codeset 6 */

                *p_info++ = PROT_VER_CTRL;
                *p_info++ = 3;
                *p_info++ = 0x82;
				*p_info++ = 0x00;
				*p_info++ = 0x80;

                break;

        case DA_NOTIFY :
                *p_info++ = NOTIFY;

                 p_ie_m = p_info;

                *p_info++ = NOTIF_IND;
                *p_info++ = 1;
                *p_info++ = 0xf1;   /* 1+ 111 0001 = call info/event */

                break;

        case DA_FAC :
				*p_info++ = FAC;

                 p_ie_m = p_info;

                *p_info++ = FACILITY;
                *p_info++ = 22;
                *p_info++ = 0x91;
                *p_info++ = 0xa1;       /* FAC_INVOKE */
                *p_info++ = 19;
                *p_info++ = 0x02;
				*p_info++ = 6;
                *p_info++ = 0x36;
                *p_info++ = 0x35;
                *p_info++ = 0x34;
                *p_info++ = 0x33;
                *p_info++ = 0x32;
                *p_info++ = 0x31;
                *p_info++ = 0x02;
                *p_info++ = 0x01;
                *p_info++ = 0x01;
                *p_info++ = 0x30;
                *p_info++ = 6;
                *p_info++ = 0x81;
                *p_info++ = 0x01;
                *p_info++ = 0x01;
                *p_info++ = 0x82;
                *p_info++ = 0x01;
                *p_info++ = 0x01;

                break;

        case DA_STATUS :
                *p_info++ = STATUS;

                 p_ie_m = p_info;

                *p_info++ = CAUSE;
                *p_info++ = 2;
                *p_info++ = 0x82;
                *p_info++ = 0x9f;   /* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

                *p_info++ = CALL_STATE;
                *p_info++ = 1;
                *p_info++ = 0;      /* N0 (NULL) */

                break;

        case DA_RESTART :
                *p_info++ = RESTART;

				 p_ie_m = p_info;

				*p_info++ = RESTART_IND;
				*p_info++ = 1;
				*p_info++ = 0x87;   /* 1+ RI_ALL_INTERFACES */

				break;

		case DA_STATUS_ENQ :
				*p_info++ = STATUS_ENQ;
				break;

		case DA_HOLD :
				*p_info++ = HOLD;
				break;

		case DA_HOLD_ACK :
				*p_info++ = HOLD_ACK;
				break;

		case DA_HOLD_REJ :
				*p_info++ = HOLD_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x82;
				*p_info++ = 0x91;   /* 1+ C_C_NORMAL_EVENT+ C_V_USER_BUSY_17 */
				break;

		case DA_RET_ACK :
				*p_info++ = RET_ACK;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
                *p_info++ = 1;
                *p_info++ = 0x8a;   /* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
                                        CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
                break;

		case DA_RET_REJ :
                *p_info++ = RET_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x82;
				*p_info++ = 0x91;   /* 1+ C_C_NORMAL_EVENT+ C_V_USER_BUSY_17 */

				break;

		case DA_K_SETUP :
				*p_info++ = ADDITIONAL_SPDU;
				*p_info++ = K_SETUP;

				*p_info++ = BC;	  /* Mandatory */
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ TRF_CAP_SPEECH */
				*p_info++ = 0x90;	/* 0+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */

				*p_info++ = ENDPOINT_ID;
				*p_info++ = 2;
				*p_info++ = 0x81;
				*p_info++ = 0x81;

				*p_info++ = CALLED_NB;
				*p_info++ = 8;
				*p_info++ = 0xc1;	/* 1+ NB_LOCAL+ PLAN_ISDN */
				 Put_text ("1234567");

				*p_info++ = 0x96;	/* Shift to codeset 6 */

				*p_info++ = CALL_APPEAR;
				*p_info++ = 1;
				*p_info++ = 0x81;	/* 1+ CALL_APPEAR_ID #1*/

				break;

		case DA_K_REL :
				*p_info++ = ADDITIONAL_SPDU;
				*p_info++ = K_REL;
				break;

		case DA_K_HOLD :
				*p_info++ = ADDITIONAL_SPDU;
				*p_info++ = K_HOLD;
				break;

		case DA_MAINT_SERVICE :
				*p_info++ = MAINT_SERVICE;

				*p_info++ = CHANGE_STATUS;
				*p_info++ = 0x01;
				*p_info++ = 0xc1;

				*p_info++ = CHAN_ID;
				*p_info++ = 3;
				*p_info++ = 0xa9;
				*p_info++ = 0x83;
				*p_info++ = 0x8c;
				break;

		case DA_SPDU_ID_UNKNOWN:
				*p_info++ = SPDU_ID_UNKNOWN;

                *p_info++ = CAUSE;
                *p_info++ = 2;
                *p_info++ = 0x82;
                *p_info++ = 0x9f;   /* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

                break;

		case '1' :
				Automata_1 ();
				break;

/*==========================================================================*/

/*---------------- UNKNOWN primitive */

		case DA_HEXA_CODING :
				mg_ns_hexa ();      /* Hexadecimal coding */
				break;

		default :
			return;

	}

}

/*EOF*/
