
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ssdu.dms
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	dms_cause_ssdu			(Void_parm);
	uchar	dms_chan_id_ssdu		(Void_parm);
	uchar	fac_ssdu				(Void_parm);
	uchar	dms_feature_act_range	(Void_parm);
	uchar	dms_feature_ind_range	(Void_parm);
	uchar	dms_llc_ra_ssdu			(Void_parm);
	uchar	dms_o_called_nb_spdu	(Void_parm);

#	if NS_SPF_FACILITY == ON
	uchar	dms_spf_fac_ssdu		(Void_parm);
#	endif

	uchar	dms_call_appear_ssdu	(Void_parm);

#endif

		/*
			meta description of the primitives used to communicate between
			layer 4 and layer 3 of the network signalling entities.
			These primitives are network dependent.
			(Ordered alphabetically)
		*/

/*-------------------------------------------------------------------------*/

			/* BC : bearer capabilities */

D_START	(DMS_P_BC)
		D_TABL	(TRF_CAP)
		D_TABL	(PROTOCOL_1)
D_END	(P_BC_1)

START	(DMS_P_BC)
		TABL	(DMS_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
		TABL	(DMS_T_BC_PROTOCOL_ID_1,	&i_bc[0].protocol_id_1)
END		(0)

/*-------------------------------------------------------------------------*/

			/* CALL_STATE : call state */

D_START	(DMS_P_CALL_STATE)
	D_TABL	(VAL_)
D_END		(CALL_STATE_END)

START	(DMS_P_CALL_STATE)
	TABL	(DMS_T_CALL_STATE,				&i_call_state[0].val)
END			(0)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(DMS_P_CALLED_NB)
	D_TABL (CALLED_NB_NBERING_TYPE)
	D_TABL (CALLED_NB_NBERING_PLAN_ID)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (P_CALLED_NB_END)

START	(DMS_P_CALLED_NB)
	TABL (DMS_T_NB_TYPE,		&i_called_nb[0].nb_type)
	TABL (DMS_T_NB_PLAN,		&i_called_nb[0].plan_id)
	TEXT (1,DMS_MX_SZ_CALLED_NB,DIGIT_E,	&i_called_nb[0].lgth,	(uchar **)&i_called_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_SUB_ADD : called party sub address */

D_START	(DMS_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLED_SUB_ADD_END)

START	(DMS_P_CALLED_SUB_ADD)
	TABL (DMS_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
	TABL (DMS_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
	TEXT (1,DMS_MX_SZ_CALLED_SUB_ADD,DIGIT,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(DMS_P_CALLING_NB)
	D_TABL (NBERING_TYPE)
	D_TABL (NBERING_PLAN)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_N)
	D_TEXT (DIGIT_N)
D_END (P_CALLING_NB_N_END)

START	(DMS_P_CALLING_NB)
	TABL (DMS_T_NB_TYPE,		&i_calling_nb[0].nb_type)
	TABL (DMS_T_NB_PLAN,		&i_calling_nb[0].plan_id)
	TABL (DMS_T_PRES_IND,		&i_calling_nb[0].pres)
	TABL (DMS_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
	TEXT (0,DMS_MX_SZ_CALLING_NB,DIGIT,	&i_calling_nb[0].lgth,	(uchar **)&i_calling_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(DMS_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLING_SUB_ADD_END)

START	(DMS_P_CALLING_SUB_ADD)
	TABL (DMS_T_SUB_ADD_TYPE,		&i_calling_sub_add[0].sub_add_type)
	TABL (DMS_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
	TEXT (1,DMS_MX_SZ_CALLING_SUB_ADD,DIGIT,&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(DMS_P_CAUSE)
	D_TABL (CODING_STD)
	D_TABL (LOCATION)
	D_TABL (OM_CLASS)

	D_IF_VAL	(CCITT_CODING)
		D_TABX	(VAL_CCITT)
	D_ELSE		(SPF_CODING)
		D_TABX	(VAL_SPF)
	D_END_IF	(CODING)

	D_TEXT	(DIAGNOSTICS)
D_END (CAUSE_END)

START	(DMS_P_CAUSE)
	TABL (DMS_T_CAUSE_CODING_STD,	&i_cause[0].coding_std)
	TABL (DMS_T_LOCATION,			&i_cause[0].cause_loc)
	TABL (DMS_T_C_C,				&i_cause[0].cause_class)

	IF_VAL		(&i_cause[0].coding_std, EQ, CODING_STD_CCITT)
		TABX	(DMS_TX_C_V_CCITT,&i_cause[0].cause_class, &i_cause[0].cause_val)
	ELSE		()
		TABX	(DMS_TX_C_V_SPF,&i_cause[0].cause_class, &i_cause[0].cause_val)
	END_IF		()

	TEXT (0,DMS_MX_SZ_CAUSE_DIAG,ANY_CHAR,	&i_cause[0].diag_lgth,(uchar **)&i_cause[0].p_diagnostic)
END (dms_cause_ssdu)

/*-------------------------------------------------------------------------*/
			/* CHAN_ID : channel identification */

D_START	(DMS_P_CHAN_ID)
	D_TABL	(INT_TYPE)
	D_TABL	(INT_ID)
	D_TABL	(PREF_EXCL)
	D_TABL	(D_CHAN_)
	D_TABL	(INT_ID_VAL)
	D_TABX	(SEL)

	D_IF_VAL	(INT_BRI)
		D_TABL	(CHANNEL_NUMBERS)
	D_ELSE		(NO_INT_BRI)
		D_PAD	(CODING_CHAN_TYPE_TEXT)
	D_END_IF	(BRI_INT)
D_END (P_CHAN_ID_END)

START	(DMS_P_CHAN_ID)
	TABL (DMS_T_INT_TYPE,					&i_chan_id[0].int_type)
	TABL (DMS_T_CHAN_INT,					&i_chan_id[0].int_id)
	TABL (DMS_T_CHAN_PREF_EXCL,				&i_chan_id[0].pref_excl)
	TABL (DMS_T_D_CHAN,						&i_chan_id[0].d_chan)
	TABL (DMS_T_INT_VALUE,					&i_chan_id[0].int_id_val)
	TABX (DMS_TX_CHAN_SEL,					&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)

	IF_VAL	(&i_chan_id[0].int_type, NE, INT_TYPE_BRI)
		TABL (DMS_T_CHAN_NUMBER,			&i_chan_id[0].chan_nb)
	ELSE	()
		PAD (3)
	END_IF	()
END (dms_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

			/* CHANGE_STATUS : change status of a B channel */

D_START (DMS_P_CHANGE_STATUS)
	D_TABL		(CHAN_STAT)
D_END	(DMS_CHANGE_STATUS_E)

START (DMS_P_CHANGE_STATUS)
	TABL	(DMS_T_CHANGE_STATUS,		&i_change_status[0].status)
END (0)


/*-------------------------------------------------------------------------*/

			/* CONN_NB : connected number */

D_START	(DMS_P_CONN_NB)
	D_TABL 	(NBERING_TYPE)
	D_TABL 	(NBERING_PLAN)
	D_TABL	(PRES_IND_N)
	D_TABL	(SCREEN_IND_N)
	D_TEXT	(DIGIT_N)
D_END		(P_CONN_NB_N_END)

START	(DMS_P_CONN_NB)
	TABL 	(DMS_T_NB_TYPE,				&i_conn_nb[0].nb_type)
	TABL 	(DMS_T_NB_PLAN,				&i_conn_nb[0].plan_id)
	TABL	(DMS_T_PRES_IND,			&i_conn_nb[0].pres)
	TABL	(DMS_T_SCREEN_IND,			&i_conn_nb[0].screen_ind)
	TEXT	(1,DMS_MX_SZ_CONN_NB,DIGIT,	&i_conn_nb[0].lgth,	(uchar **)&i_conn_nb[0].p_add)
END			(0)

/*-------------------------------------------------------------------------*/

			/* DISPLAY : display facility */

D_START	(DMS_P_DISPLAY)
	D_TABL	(DISP_TYPE)
	D_TABL	(ASSOC_INFO)
	D_TEXT (DISPLAY_INFO)
D_END (DISPLAY_END)

START	(DMS_P_DISPLAY)
	TABL	(DMS_T_DISPLAY_TYPE,			&i_display[0].display_type)
	TABL	(DMS_T_ASSOC_INFO,				&i_display[0].assoc_info)
	TEXT	(0,DMS_MX_SZ_DISPLAY,ANY_CHAR,	&i_display[0].lgth,	(uchar **)&i_display[0].p_info)
END			(0)

/*---------- Endpoint identifier (ENDPOINT_ID) */

D_START	(DMS_P_ENDPOINT_ID)
	D_ANY_VAL	(USID)
	D_ANY_VAL	(TID)
	D_TABL		(INTERP)
    D_ANY_VAL	(_CES)
D_END			(END_SSDU)

START	(DMS_P_ENDPOINT_ID)
	ANY_VAL (&i_endpoint_id[0].usid)
	ANY_VAL (&i_endpoint_id[0].tid)
	TABL	(DMS_T_INTERPRETER,			&i_endpoint_id[0].interp)
	ANY_VAL (&i_endpoint_id[0].ces)
END	 		(0)

/*-------------------------------------------------------------------------*/

			/* FACILITY : facility */

D_START	(DMS_P_FACILITY)
	D_TABL		(COMP_TAG)
D_END			(FACILITY_E)

START	(DMS_P_FACILITY)
	TABL		(DMS_T_FAC_COMP_TAG,			&i_facility[0].component.tag)
END				(fac_ssdu)

D_START	(DMS_FAC_INVOKE_SSDU)
	D_TABL		(SERVICE)
	D_TABL		(PREF)
	D_PAD		(OM_ERROR)
	D_TEXT		(INVOKE_ID)
D_END			(FACILITY_E)

START	(DMS_FAC_INVOKE_SSDU)
	TABL		(DMS_T_FAC_SERVICE,				&i_facility[0].service.id)
	TABL		(DMS_T_FAC_PREFERRED,			&i_facility[0].preferred.id)
	PAD			(1)
	TEXT		(1,DMS_MX_SZ_FACILITY,ANY_OCTET,&i_facility[0].invoke_id.lgth, (uchar **)&i_facility[0].invoke_id.p_id)
END				(0)

D_START	(DMS_FAC_RETURN_RESULT_SSDU)
	D_PAD		(P_2_4)
	D_TEXT		(INVOKE_ID)
D_END			(FACILITY_E)

START	(DMS_FAC_RETURN_RESULT_SSDU)
	PAD			(3)
	TEXT		(1,DMS_MX_SZ_FACILITY,ANY_OCTET,&i_facility[0].invoke_id.lgth, (uchar **)&i_facility[0].invoke_id.p_id)
END				(0)

D_START	(DMS_FAC_RETURN_ERROR_SSDU)
	D_PAD		(P_2_3)
	D_TABL		(ERROR_VAL)
	D_TEXT		(INVOKE_ID)
D_END			(FACILITY_E)

START	(DMS_FAC_RETURN_ERROR_SSDU)
	PAD			(2)
	TABL		(DMS_T_FAC_ERROR_VAL,			&i_facility[0].op_error_val.id)
	TEXT		(1,DMS_MX_SZ_FACILITY,ANY_OCTET,&i_facility[0].invoke_id.lgth, (uchar **)&i_facility[0].invoke_id.p_id)
END				(0)

/*-------------------------------------------------------------------------*/

D_START	(DMS_P_FEATURE_ACT)
	D_ANY_VAL	(FEATURE_ID_1)
	D_ANY_VAL	(FEATURE_ID_2)
D_END			(E_FEATURE_ACT)

START	(DMS_P_FEATURE_ACT)
	ANY_VAL	(&i_feature_act[0].feature_nb)
	ANY_VAL	(&i_feature_act[0].feature_nb_ext)
END	(dms_feature_act_range)

/*-------------------------------------------------------------------------*/

D_START	(DMS_P_FEATURE_IND)
	D_ANY_VAL	(FEATURE_ID_1)
	D_ANY_VAL	(FEATURE_ID_2)
	D_TABL      (STATUS_IND)
D_END (E_FEATURE_IND)

START	(DMS_P_FEATURE_IND)
	ANY_VAL	(&i_feature_ind[0].feature_nb)
	ANY_VAL	(&i_feature_ind[0].feature_nb_ext)
	TABL    (DMS_T_STATUS_IND, &i_feature_ind[0].status_ind)
END	(dms_feature_ind_range)

/*-------------------------------------------------------------------------*/

D_START	(DMS_P_INFORMATION_RQ)
	D_TABL	(INFO_TYPE)
	D_TABL	(INFO_IND)
	D_TABL  (INFO_SPECIFIC)
D_END		(E_INFORMATION_RQ)

START	(DMS_P_INFORMATION_RQ)
	TABL	(DMS_T_INFO_TYPE,	&i_information_rq[0].info_type)
	TABL	(DMS_T_INFO_IND,	&i_information_rq[0].info_ind)
	TABL    (DMS_T_INFO_SPECIF,	&i_information_rq[0].info_specific)
END			(0)

/*-------------------------------------------------------------------------*/

			/* TRANSIT_NET_SEL : Transit network selection */

D_START	(DMS_P_TRANSIT_NET_SEL)
	D_TABL 	(NBERING_TYPE)
	D_TABL 	(NBERING_PLAN)
	D_TEXT	(NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(DMS_P_TRANSIT_NET_SEL)
	TABL 	(DMS_T_NB_TYPE,				&i_transit_net_sel[0].net_id_type)
	TABL 	(DMS_T_NB_PLAN,				&i_transit_net_sel[0].net_id_plan)
	TEXT	(3,DMS_MX_SZ_TRANSIT_NET_SEL,ANY_CHAR,&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(DMS_P_HLC)
	D_TABL (CODING_STD)

	D_IF_VAL		(CODING_CCITT)
		D_TABL		(TELESERVICE)
		D_TABL		(EXT_TELESERVICE)
	D_ELSE			(OTHER_CODING)
		D_ANY_VAL	(OTHER_TELE)
		D_PAD		(OTHER_EXT_TELE)
	D_END_IF		(CODING)
D_END (HLC_END)

START	(DMS_P_HLC)
	TABL (DMS_T_CODING_STD,					&i_hlc[0].coding_std)

	IF_VAL		(&i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL	(DMS_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		TABL	(DMS_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
	ELSE		()
		ANY_VAL	(&i_hlc[0].teleservice)
		PAD		(1)
	END_IF		()
END (0)

/*-------------------------------------------------------------------------*/

			/* KEYPAD : keypad facility */

D_START	(DMS_P_KEYPAD)
	D_TEXT	(KEYPAD_INFO)
D_END		(KEYPAD_END)

START	(DMS_P_KEYPAD)
	TEXT	(0,DMS_MX_SZ_KEYPAD,DIGIT_E,		&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END			(0)

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(DMS_P_LLC)
	D_TABL	(CODING_STD)
	D_TABL	(TRF_CAP)
	D_TABL	(OUT_BAND_NEG)
	D_TABL	(TRF_MODE)
	D_TABX	(TRF_RATE)
	D_TABL	(STRUCT)
	D_TABX	(DEST_RATE)
	D_TABL	(PROTOCOL_1)
D_END	(P_LLC_1)

START	(DMS_P_LLC)
	TABL	(DMS_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(DMS_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
	TABL	(DMS_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
	TABL	(DMS_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(DMS_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
	TABL	(DMS_T_STRUCTURE,				&i_llc[0].structure)
	TABX	(DMS_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
	TABL	(DMS_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(dms_llc_ra_ssdu)

		/* V110 */

D_START	(DMS_P_LLC_V110)
	D_TABL	(V110_SYN_ASYN)
	D_TABL	(V110_NEGOTIATION)
	D_TABL	(V110_USER_RATE)
	D_TABL	(V110_INTER_RATE)
	D_TABL	(V110_TX_NIC)
	D_TABL	(V110_RX_NIC)
	D_TABL	(V110_TX_FC)
	D_TABL	(V110_RX_FC)
	D_PAD	(P_9_14)
	D_TABL	(V110_STOP_BIT)
	D_TABL	(V110_DATA_BIT)
	D_TABL	(V110_PARITY)
	D_TABL	(V110_DUPLEX)
	D_TABL	(V110_MODEM)
D_END (ENDIF_V110)

START	(DMS_P_LLC_V110)
	TABL	(DMS_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(DMS_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(DMS_T_USER_RATE,			&i_llc[0].user_rate)
	TABL	(DMS_T_INTER_RATE,			&i_llc[0].inter_rate)
	TABL	(DMS_T_NIC_TX,				&i_llc[0].tx_nic)
	TABL	(DMS_T_NIC_RX,				&i_llc[0].rx_nic)
	TABL	(DMS_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
	TABL	(DMS_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
	PAD		(6)
	TABL	(DMS_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(DMS_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(DMS_T_PARITY,				&i_llc[0].parity)
	TABL	(DMS_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(DMS_T_MODEM,				&i_llc[0].modem)
END	(0)

D_START	(DMS_P_LLC_V120)
	D_TABL	(V120_SYN_ASYN)
	D_TABL	(V120_NEGOTIATION)
	D_TABL	(V120_USER_RATE)
	D_PAD	(P_4_8)
	D_TABL	(V120_HDR)
	D_TABL	(V120_MULTI_FRAME)
	D_TABL	(V120_OP_MODE)
	D_TABL	(V120_LLI)
	D_TABL	(V120_ASSIGN)
	D_TABL	(V120_BAND)
	D_TABL	(V120_STOP_BIT)
	D_TABL	(V120_DATA_BIT)
	D_TABL	(V120_PARITY)
	D_TABL	(V120_DUPLEX)
	D_TABL	(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(DMS_P_LLC_V120)
	TABL	(DMS_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(DMS_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(DMS_T_USER_RATE,			&i_llc[0].user_rate)
	PAD		(5)
	TABL	(DMS_T_HEADER,				&i_llc[0].hdr)
	TABL	(DMS_T_MULTI_FRAME,			&i_llc[0].multi_frame)
	TABL	(DMS_T_OP_MODE,				&i_llc[0].op_mode)
	TABL	(DMS_T_LLI,					&i_llc[0].lli)
	TABL	(DMS_T_ASSIGN,				&i_llc[0].assign)
	TABL	(DMS_T_BAND,				&i_llc[0].band)
	TABL	(DMS_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(DMS_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(DMS_T_PARITY,				&i_llc[0].parity)
	TABL	(DMS_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(DMS_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(DMS_P_LLC_PAD)
	D_PAD	(P_1_19)
D_END		(END_PAD_RA)

START	(DMS_P_LLC_PAD)
	PAD		(19)
END			(0)

D_START	(DMS_P_LLC_2)
	D_TABL		(PROTOCOL_ID_2)
	D_ANY_VAL	(OPT_2)
	D_TABL		(PROTOCOL_ID_3)
	D_ANY_VAL	(OPT_3)
D_END (LLC_E)

START	(DMS_P_LLC_2)
	TABL		(DMS_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
	ANY_VAL		(&i_llc[0].option_2)
	TABL		(DMS_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
	ANY_VAL		(&i_llc[0].option_3)
END (0)

/*-------------------------------------------------------------------------*/

			/* NOTIF_IND : notification indicator */

D_START	(DMS_P_NOTIF_IND)
	D_TABL	(DESCR)
D_END		(NOTIF_IND_E)

START	(DMS_P_NOTIF_IND)
	TABL	(DMS_T_NOTIF_IND_DESCR,			&i_notif_ind[0].notif_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* Original Called party number (O_CALLED_NB) */

D_START (DMS_P_O_CALLED_NB)
	D_TABL	(TYPE)
	D_TABL	(PLAN_ID)
	D_TABL	(PRESENTATION)
	D_TABL	(SCREEN_IND)
	D_TABL	(O_REDIR_REASON)
	D_TABL	(_CFNR)
	D_TABL	(REDIR_COUNTER)
	D_TEXT	(DIGIT_)
D_END   (O_CALLED_NB_E)

START   (DMS_P_O_CALLED_NB)
	TABL    (DMS_T_NB_TYPE,  		&i_o_called_nb[0].nb_type)
	TABL    (DMS_T_NB_PLAN,  		&i_o_called_nb[0].plan_id)
	TABL    (DMS_T_PRES_IND,    	&i_o_called_nb[0].pres)
	TABL    (DMS_T_SCREEN_IND,  	&i_o_called_nb[0].screen_ind)
	TABL	(DMS_T_O_REDIR_REASON,	&i_o_called_nb[0].reason)
	TABL	(DMS_T_CFNR,			&i_o_called_nb[0].cfnr)
	TABL 	(DMS_T_REDIR_COUNTER, 	&i_o_called_nb[0].redir_counter)
	TEXT    (0,DMS_MX_SZ_O_CALLED_NB,DIGIT_E, &i_o_called_nb[0].lgth, (uchar **)&i_o_called_nb[0].p_add)
END     (0)

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(DMS_P_PROGRESS_IND)
	D_TABL	(CODING_STD)
	D_TABL  (LOCATION)
	D_TABX	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(DMS_P_PROGRESS_IND)
	TABL	(DMS_T_CODING_STD,				&i_progress_ind[0].coding_std)
	TABL    (DMS_T_PROGRESS_LOC,    		&i_progress_ind[0].progress_loc)
	TABX	(DMS_TX_PROG_DESCR,	&i_progress_ind[0].coding_std,	&i_progress_ind[0].progress_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* REDIR_NB : redirecting number */

D_START	(DMS_P_REDIR_NB)
	D_TABL 	(NBERING_TYPE)
	D_TABL 	(NBERING_PLAN)
	D_TABL	(PRES_IND_N)
	D_TABL	(SCREEN_IND_N)
	D_TABL	(REASON)
	D_TEXT	(DIGIT_N)
D_END		(P_REDIR_NB_N_END)

START	(DMS_P_REDIR_NB)
	TABL 	(DMS_T_NB_TYPE,					&i_redir_nb[0].nb_type)
	TABL 	(DMS_T_NB_PLAN,					&i_redir_nb[0].plan_id)
	TABL	(DMS_T_PRES_IND,				&i_redir_nb[0].pres)
	TABL	(DMS_T_SCREEN_IND,				&i_redir_nb[0].screen_ind)
	TABL	(DMS_T_REASON_REDIR,			&i_redir_nb[0].reason)
	TEXT	(1,DMS_MX_SZ_REDIR_NB,DIGIT,	&i_redir_nb[0].lgth,	(uchar **)&i_redir_nb[0].p_add)
END			(0)

/*-------------------------------------------------------------------------*/

			/* REDIRECTION_NB : redirection number */

D_START	(DMS_P_REDIRECTION_NB)
	D_TABL 	(NBERING_TYPE)
	D_TABL 	(NBERING_PLAN)
	D_TABL	(PRES_IND_N)
	D_TABL	(SCREEN_IND_N)
	D_TABL	(REASON)
	D_TEXT	(DIGIT_N)
D_END		(P_REDIRECTION_NB_N_END)

START	(DMS_P_REDIRECTION_NB)
	TABL 	(DMS_T_NB_TYPE,				&i_redirection_nb[0].nb_type)
	TABL 	(DMS_T_NB_PLAN,				&i_redirection_nb[0].plan_id)
	TABL	(DMS_T_PRES_IND,			&i_redirection_nb[0].pres)
	TABL	(DMS_T_SCREEN_IND,			&i_redirection_nb[0].screen_ind)
	TABL	(DMS_T_REASON_REDIR,		&i_redirection_nb[0].reason)
	TEXT	(1,DMS_MX_SZ_REDIRECTION_NB,DIGIT,	&i_redirection_nb[0].lgth,	(uchar **)&i_redirection_nb[0].p_add)
END			(0)

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START		(DMS_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(DMS_P_RESTART_IND)
	TABL	(DMS_T_RESTART_IND,		&i_restart_ind[0].restart_class)
END			(0)

/*-------------------------------------------------------------------------*/

			/* SIGNAL : Signal */

D_START	(DMS_P_SIGNAL)
	D_TABL	(VAL_)
D_END		(SIGNAL_E)

START	(DMS_P_SIGNAL)
	TABL	(DMS_T_SIGNAL_VAL,				&i_signal[0].val)
END			(0)

/*-------------------------------------------------------------------------*/

			/* SPID : service profile identifier */

D_START	(DMS_P_SPID)
	D_ANY_VAL (_CES)
	D_TEXT	(SPID_IA5)
D_END		(E_SPID)

START	(DMS_P_SPID)
	ANY_VAL (&i_spid[0].ces)
	TEXT	(1,DMS_MX_SZ_SPID,ANY_CHAR,	&i_spid[0].lgth,	(uchar **)&i_spid[0].p_spid)
END			(0)

#if NS_SPF_FACILITY == ON

			/* SPF_FAC : network specific facilities */

D_START	(DMS_P_SPF_FAC)
	D_ANY_VAL		(NETWORK_ID_LGTH)

	D_IF_VAL		(NOT_NULL_LGTH)
		D_ANY_VAL	(TYPE_NET_ID)
		D_ANY_VAL	(PLAN_NET_ID)
		D_FUNCTION	(SPF_FAC_FCT)
	D_ELSE			(NULL_LGTH)
		D_PAD		(TYPE_PLAN)
	D_END_IF		(NOT_NULL_LG)

	D_TABL			(FAC_CODE_)
	D_TEXT			(FAC_INFO_)
D_END				(SPF_FAC_END)

START	(DMS_P_SPF_FAC)
	ANY_VAL			(&i_spf_fac[0].net_id_lgth)

	IF_VAL			(&i_spf_fac[0].net_id_lgth, NE, 0)
		ANY_VAL		(&i_spf_fac[0].Net_id_type)
		ANY_VAL		(&i_spf_fac[0].Net_id_plan)
		FUNCTION	(dms_spf_fac_ssdu)
	ELSE			()
		PAD			(2+DMS_MX_SZ_NET_ID + 1)
	END_IF			()

	TABL			(DMS_T_FAC_CODE,				&i_spf_fac[0].facility_coding)
	TEXT			(0,DMS_MX_SZ_SPF_FAC,ANY_CHAR,	&i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
END		(0)

#endif


/*-------------------------------------------------------------------------*/

			/* Operator System Access (codeset 5, OS_ACCSS) */

D_START	(DMS_P_OS_ACCSS)
	D_TABL  (ACCSS_TYPE)
D_END       (E_OS_ACCSS)

START	(DMS_P_OS_ACCSS)
	TABL    (DMS_T_TYPE_ACCSS,	&i_os_accss[0].access_type)
END         (0)

/*-------------------------------------------------------------------------*/

			/* Call appearance (codeset 6, CALL_APPEAR) */

D_START	(DMS_P_CALL_APPEAR)
	D_ANY_VAL   (CALL_APPEAR_IDENT)
	D_ANY_VAL   (EXT_CALL_APPEAR_ID)
D_END       	(E_CALL_APPEAR)

START	(DMS_P_CALL_APPEAR)
	ANY_VAL (&i_call_appear[0].call_appear_id)
	ANY_VAL (&i_call_appear[0].call_appear_id_2)
END         (dms_call_appear_ssdu)

/*-------------------------------------------------------------------------*/

			/* Protocol version control (codeset 6, PROT_VER_CTRL) */

D_START	(DMS_P_PROT_VER_CTRL)
	D_TABL      (VERSION)
	D_ANY_VAL   (ISSUE)
D_END           (E_PROT_VER_CTRL)

START	(DMS_P_PROT_VER_CTRL)
	TABL    (DMS_T_VERSION,		&i_prot_ver_ctrl[0].version)
	ANY_VAL (&i_prot_ver_ctrl[0].issue)
END         (0)

/*EOF*/

