/*--------------------------------------------------------------------------*
 *					   M O D U L E   H E A D E R
 *
 * filename - mp_ie.hkt
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	hkt_bc_4ab_spdu			(Void_parm);
	uchar	hkt_bc_4b_spdu			(Void_parm);
	uchar	hkt_bc_5_spdu			(Void_parm);
	uchar	hkt_bc_6_spdu			(Void_parm);
	uchar	hkt_bc_7_spdu			(Void_parm);
	uchar	hkt_call_state_spdu		(Void_parm);
	uchar	hkt_calling_nb_spdu		(Void_parm);
	uchar	hkt_cause_spdu			(Void_parm);
	uchar	hkt_cause_3a_spdu		(Void_parm);
	uchar	hkt_chan_id_spdu		(Void_parm);
	uchar	hkt_llc_3a_spdu	        (Void_parm);
	uchar	hkt_llc_4ab_spdu        (Void_parm);
	uchar	hkt_llc_4b_spdu	        (Void_parm);
	uchar	hkt_llc_6_spdu	        (Void_parm);
	uchar	hkt_llc_5_spdu	        (Void_parm);
	uchar	hkt_llc_7_spdu	        (Void_parm);
	uchar	hkt_restart_spdu        (Void_parm);

#endif

			/* ---------- Bearer capability (BC) */

D_START	(HKT_BC_P)
		D_VAL				(CODING_STD)
		D_TABL				(TRF_CAP)
		D_EXT_1				(_3)
		D_VAL				(TRF_MODE)
		D_TABL				(TRF_RATE)
		D_FUNCTION			(OCTHKT_4ab)

		D_IF_VAL			(NOT_DEFAULT_4ab)
			D_EXT_0_1		(_4)
			D_TABL			(STRUCT)
			D_VAL			(CONFIG)
			D_VAL			(EST)
			D_FUNCTION		(OCTET_4b)

			D_IF_VAL		(NOT_DEFAULT_4b)
				D_EXT_0_1   (_4A)
				D_VAL		(SYMMETRY)
				D_VAL		(DEST_RATE)
			D_END_IF		(_4b)

		D_END_IF			(_4ab)

		D_EXT_1				(OCTET_4)
		D_OPTIONAL_OCTET	(_5ABCD_6_7)

		D_FUNCTION			(OCTET_5)
		D_IF_VAL			(OCTET_5_PR)
			D_VAL			(LAYER_1)
			D_TABX			(PROTOCOL_1)

				/* V110 */

			D_IF_VAL			(V110)
				D_EXT_0_1		(_5)
				D_TABL			(V110_SYN_ASYN)
				D_TABL			(V110_NEGOTIATION)
				D_TABL			(V110_USER_RATE)
				D_EXT_0_1		(V110_5A)
				D_TABL			(V110_INTER_RATE)
				D_TABL			(V110_TX_NIC)
				D_TABL			(V110_RX_NIC)
				D_TABL			(V110_TX_FC)
				D_TABL			(V110_RX_FC)
				D_PAD			(V110_PAD_5B)
				D_EXT_0_1		(V110_5B)
				D_TABL	 		(V110_STOP_BIT)
				D_TABL	 		(V110_DATA_BIT)
				D_TABL	 		(V110_PARITY)
				D_EXT_0_1		(V110_5C)
				D_TABL	 		(V110_DUPLEX)
				D_ANY_VAL 		(V110_MODEM)
			D_END_IF			(ENDIF_V110)

				/* V120 */

			D_IF_VAL		(V120_)
				D_EXT_0_1	(_5_V120)
				D_TABL		(V120_SYN_ASYN)
				D_TABL		(V120_NEGOTIATION)
				D_TABL		(V120_USER_RATE)
				D_EXT_0_1	(V120_5A)
				D_TABL		(V120_HDR)
				D_TABL		(V120_MULTI_FRAME)
				D_TABL		(V120_OP_MODE)
				D_TABL		(V120_LLI)
				D_TABL		(V120_ASSIGN)
				D_VAL		(V120_BAND_LL0)
				D_PAD		(V120_PAD_5B)
				D_EXT_0_1	(V120_5B)
				D_TABL		(V120_STOP_BIT)
				D_TABL		(V120_DATA_BIT)
				D_TABL		(V120_PARITY)
				D_EXT_0_1	(V120_5C)
				D_TABL		(V120_DUPLEX)
				D_ANY_VAL	(V120_MODEM)
			D_END_IF		(ENDIF_V120)

			D_IF_VAL		(BC_NON_CCITT)
				D_EXT_0_1	(BC_NON_CCITT_5)
				D_TABL		(BC_NON_CCITT_SYN_ASYN)
				D_TABL		(BC_NON_CCITT_NEGOTIATION)
				D_TABL		(BC_NON_CCITT_USER_RATE)
			D_END_IF		(BC_ENDIF_NON_CCITT)

			D_EXT_1			(BC_END_5)

		D_END_IF			(_5_PR)

		D_FUNCTION			(OCTET_6)
		D_IF_VAL			(OCTET_6_PR)
			D_VAL				(L_ID_2)
			D_TABX				(PROTOCOL_ID_2)
			D_EXT_1				(_6)
		D_END_IF			(_6_PR)

		D_FUNCTION			(OCTET_7)
		D_IF_VAL			(OCTET_7_PR)
			D_VAL				(L_ID_3)
			D_TABX				(PROTOCOL_ID_3)
			D_EXT_1				(_7)
		D_END_IF			(_7_PR)

D_END	(BC_E)

START	(HKT_BC_P)
		VAL		(5,2,CODING_STD_CCITT,				&i_bc[0].coding_std)
		TABL	(0,5,HKT_T_TRF_CAP_BC,				&i_bc[0].trf_cap)
		EXT_1   ()
		VAL		(5,2,TRF_MODE_CIRCUIT,				&i_bc[0].trf_mode)
		TABL	(0,5,HKT_T_TRF_RATE,				&i_bc[0].trf_rate)
		FUNCTION(hkt_bc_4ab_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1	()
			TABL	(4,3,HKT_T_STRUCTURE,			&i_bc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_bc[0].config)
			VAL		(0,2,EST_DEMAND,				&i_bc[0].est)
			FUNCTION(hkt_bc_4b_spdu)

			IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1 ()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_bc[0].symmetry)
				VAL		(0,5,TRF_RATE_64KBS,		&i_bc[0].dest_rate)
			END_IF		()

		END_IF	()

		EXT_1   ()

		OPTIONAL_OCTET ()

		FUNCTION	(hkt_bc_5_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,				&i_bc[0].layer_id_1)
			TABX	(0,5,HKT_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_1,		&i_bc[0].protocol_id_1)

				/* V110 */

			IF_VAL  	(I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_SYN_ASYN,			&i_bc[0].syn_asyn)
				TABL	(5,1,HKT_T_NEGOTIATION,			&i_bc[0].negotiation)
				TABL	(0,5,HKT_T_USER_RATE,			&i_bc[0].user_rate)
				EXT_0_1 ()
				TABL	(5,2,HKT_T_INTER_RATE,			&i_bc[0].inter_rate)
				TABL	(4,1,HKT_T_NIC_TX,				&i_bc[0].tx_nic)
				TABL	(3,1,HKT_T_NIC_RX,				&i_bc[0].rx_nic)
				TABL	(2,1,HKT_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
				TABL	(1,1,HKT_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,HKT_T_STOP_BIT,			&i_bc[0].stop_bit)
				TABL	(3,2,HKT_T_DATA_BIT,			&i_bc[0].data_bit)
				TABL	(0,3,HKT_T_PARITY,				&i_bc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_DUPLEX,				&i_bc[0].duplex)
				ANY_VAL	(0,6,							&i_bc[0].modem)
			END_IF  	()

				/* V120 */

			IF_VAL  (I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_SYN_ASYN,			&i_bc[0].syn_asyn)
				TABL	(5,1,HKT_T_NEGOTIATION,			&i_bc[0].negotiation)
				TABL	(0,5,HKT_T_USER_RATE,			&i_bc[0].user_rate)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_HEADER,				&i_bc[0].hdr)
				TABL	(5,1,HKT_T_MULTI_FRAME,			&i_bc[0].multi_frame)
				TABL	(4,1,HKT_T_OP_MODE,				&i_bc[0].op_mode)
				TABL	(3,1,HKT_T_LLI,					&i_bc[0].lli)
				TABL	(2,1,HKT_T_ASSIGN,				&i_bc[0].assign)
				VAL		(1,1,LL0,						&i_bc[0].band)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,HKT_T_STOP_BIT,			&i_bc[0].stop_bit)
				TABL	(3,2,HKT_T_DATA_BIT,			&i_bc[0].data_bit)
				TABL	(0,3,HKT_T_PARITY,				&i_bc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_DUPLEX,				&i_bc[0].duplex)
				ANY_VAL	(0,6,							&i_bc[0].modem)
			END_IF	()

				/* NON CCITT */

			IF_VAL (I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_RA_NON_CCITT)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_SYN_ASYN,			&i_bc[0].syn_asyn)
				TABL	(5,1,HKT_T_NEGOTIATION,			&i_bc[0].negotiation)
				TABL	(0,5,HKT_T_USER_RATE,			&i_bc[0].user_rate)
			END_IF		()

			EXT_1   ()

		END_IF		()

		FUNCTION(hkt_bc_6_spdu)
		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_2,					&i_bc[0].layer_id_2)
			TABX	(0,5,HKT_TX_PROTOCOL_ID_BC,			&i_bc[0].layer_id_2,		&i_bc[0].protocol_id_2)
			EXT_1   ()
		END_IF		()

		FUNCTION(hkt_bc_7_spdu)
		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_3,					&i_bc[0].layer_id_3)
			TABX	(0,5,HKT_TX_PROTOCOL_ID_BC,			&i_bc[0].layer_id_3,		&i_bc[0].protocol_id_3)
			EXT_1   ()
		END_IF		()

END (0)

			/* ---------- Call_identity (CALL_ID) */

D_START	(HKT_CALL_ID_P)
	D_TEXT  (CALL_ID_VAL)
D_END   (CALL_ID_E)

START	(HKT_CALL_ID_P)
	TEXT	(IA5, ANY_CHAR, &i_call_id[0].lgth, (uchar **)&i_call_id[0].p_val)
END	 (0)

			/* ---------- Call state (CALL_STATE) */

D_START	(HKT_CALL_STATE_P)
	D_VAL	  (CODING_STD)
	D_TABL	  (VAL_)
	D_END_OCTET (_3)
D_END   (CALL_STATE_E)

START	(HKT_CALL_STATE_P)
	VAL			(6,2,CODING_STD_CCITT,		&i_call_state[0].coding_std)
	TABL		(0,6,HKT_T_CALL_STATE,		&i_call_state[0].val)
	END_OCTET   ()
END	 (hkt_call_state_spdu)

			/* ---------- Called party number (CALLED_NB) */

D_START	(HKT_CALLED_NB_P)
		D_VAL  (TYPE)
		D_VAL  (PLAN_ID)
		D_EXT_1 (_3)
		D_TEXT  (DIGIT_)
D_END   (CALLED_NB_E)

START	(HKT_CALLED_NB_P)
		VAL		(4,3,NB_UNKNOWN,  	&i_called_nb[0].nb_type)
		VAL		(0,4,PLAN_UNKNOWN,	&i_called_nb[0].plan_id)
		EXT_1   ()
		TEXT	(IA5, ANY_CHAR, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END	 (0)

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(HKT_CALLED_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CALLED_SUB_ADD_E)

START	(HKT_CALLED_SUB_ADD_P)
		TABL	(4,3,HKT_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
		TABL	(3,1,HKT_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_called_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Calling party number (CALLING_NB) */

D_START	(HKT_CALLING_NB_P)
		D_TABL		(TYPE)
		D_TABL		(PLAN_ID)

		D_FUNCTION	(CALLING_NB_FCT)
		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABL		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END   (CALLING_NB_E)

START	(HKT_CALLING_NB_P)
		TABL	(4,3,HKT_T_CALLING_NB_TYPE, 	&i_calling_nb[0].nb_type)
		TABL	(0,4,HKT_T_CALLING_NB_PLAN, 	&i_calling_nb[0].plan_id)

		FUNCTION(hkt_calling_nb_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,HKT_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
			PAD		(2,3)
			TABL	(0,2,HKT_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
		END_IF	()

		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT	(IA5,ANY_CHAR, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END (0)

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(HKT_CALLING_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CALLING_SUB_ADD_E)

START	(HKT_CALLING_SUB_ADD_P)
		TABL	(4,3,HKT_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		TABL	(3,1,HKT_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_calling_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		END_IF	()

END		(0)

			/* ---------- Cause (CAUSE) */

D_START	(HKT_CAUSE_P)
		D_VAL	  (CODING_STD)
		D_PAD	  (NS_PAD_3)
		D_TABL	  (LOCATION)

		D_FUNCTION(CAUSE_3A)
		D_IF_VAL  (NOT_RECOM_Q931)
			D_EXT_0_1	(_3)
			D_VAL		(RECOMMENDATION)
		D_END_IF	(Q931E)

		D_EXT_1	 (_3A)

		D_TABL	  (C_CLASS)
		D_TABX	  (C_VAL)
		D_EXT_1	 (_4)
D_END   (CAUSE_E_A)

START	(HKT_CAUSE_P)
		VAL		(5,2,CODING_STD_CCITT,			&i_cause[0].coding_std)
		PAD		(4,1)
		TABL	(0,4,HKT_T_LOCATION,			&i_cause[0].cause_loc)

		FUNCTION(hkt_cause_3a_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			VAL	(0,7,RECOMMENDATION_Q931,  		&i_cause[0].recommend)
		END_IF	()

		EXT_1   ()

		TABL	(4,3,HKT_T_C_C,					&i_cause[0].cause_class)
		TABX	(0,4,HKT_TX_C_V,				&i_cause[0].cause_class,  &i_cause[0].cause_val)
		EXT_1   ()
END	 (hkt_cause_spdu)

D_START	(HKT_DIAG_P)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(HKT_DIAG_P)
	TEXT	(BINARY, ANY_OCTET, &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

D_START	(HKT_DIAG_CONDITION)
	D_TABL		(CONDITION)
	D_PAD		(PADDING)
	D_EXT_1		(DIAG)
D_END   (DIAGNOSTIC_E)

START	(HKT_DIAG_CONDITION)
	TABL	(0,2,HKT_T_STATUS_CONDITION,		&i_cause[0].tmp)
	PAD		(2,5)
	EXT_1	()
END		(0)

D_START	(HKT_DIAG_MSG)
	D_TABL		(MSG)
	D_END_OCTET	(DIAG)
D_END   (DIAGNOSTIC_E)

START	(HKT_DIAG_MSG)
	TABL		(0,8,HKT_T_S_MSG_TYPE,			&i_cause[0].tmp)
	END_OCTET	()
END		(0)

D_START	(HKT_DIAG_TIMER)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(HKT_DIAG_TIMER)
	TEXT	(IA5, DIGIT, &i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

			/* ---------- Channel idendification (CHAN_ID) */

D_START	(HKT_CHAN_ID_P)
	D_TABL		(INT_ID)
	D_TABL		(INT_TYPE)
	D_PAD   	(NS_PAD_3)
	D_TABL  	(PREF_EXCL)
	D_VAL		(D_CHAN_)
	D_TABX		(SEL)
	D_EXT_1		(_3)

D_END   (CHAN_ID_E)

START	(HKT_CHAN_ID_P)
	TABL	(6,1,HKT_T_CHAN_INT,		&i_chan_id[0].int_id)
	TABL	(5,1,HKT_T_INT_TYPE,		&i_chan_id[0].int_type)
	PAD		(4,1)
	TABL	(3,1,HKT_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	VAL		(2,1,NOT_D_CHAN,			&i_chan_id[0].d_chan)
	TABX	(0,2,HKT_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	EXT_1   ()
END	(hkt_chan_id_spdu)

D_START	(HKT_CHAN_ID_PRI_P)

	D_IF_VAL	(_INT_EXPL_)
		D_ANY_VAL	(_INT_ID_VAL_)
		D_EXT_1		(_INT_)
	D_END_IF	(_3_1_)

	D_VAL	  	(CODING)
	D_TABL   	(NB_MAP)
	D_VAL  		(TYPE)
	D_EXT_1 	(_3_2)
	D_TEXT  	(NBER)
D_END   (CHAN_ID_E)

START	(HKT_CHAN_ID_PRI_P)

	IF_VAL	(I_IF, &i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		ANY_VAL	(0,7,&i_chan_id[0].int_id_val)
		EXT_1	()
	END_IF	()

	VAL		(5,2,CODING_STD_CCITT,  	&i_chan_id[0].coding_std)
	TABL	(4,1,HKT_T_NB_MAP,		   	&i_chan_id[0].nb_map)
	VAL		(0,4,B_CHAN,			   	&i_chan_id[0].chan_type)
	EXT_1	()
	TEXT	(IA5,ANY_OCTET,				&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
END		(0)

			/* ---------- Display (DISPLAY) */

D_START	(HKT_DISPLAY_P)
	D_TEXT  (INFO_)
D_END   (DISPLAY_E)

START	(HKT_DISPLAY_P)
	TEXT	(IA5,ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END	 (0)


			/* ---------- High layer compatibility (HLC) */

D_START	(HKT_HLC_P)
		D_VAL		(CODING_STD)
		D_VAL		(INTERPRETATION)
		D_VAL		(PRESENTATION)
		D_EXT_1		(_3)
		D_TABL		(TELESERVICE)

		D_IF_TABL		(IS_EXT_TELESERVICE)
			D_EXT_0_1	(_4)
			D_TABL		(EXT_TELESERVICE)
		D_END_IF		(IS_EXTENDED)
		D_EXT_1			(_5)
D_END				(HLC_E)

START	(HKT_HLC_P)
		VAL			(5,2,CODING_STD_CCITT,		&i_hlc[0].coding_std)
		VAL			(2,3,INTER_CCITT_CEPT,		&i_hlc[0].interpretation)
		VAL			(0,2,PRESENTATION_PROFIL,	&i_hlc[0].pres)
		EXT_1		()

		TABL		(0,7,HKT_T_TELESERVICE_CCITT,&i_hlc[0].teleservice)

		IF_TABL		(I_IF, &i_hlc[0].teleservice, IN, HKT_T_TELESERVICE_EXT)
			EXT_0_1	()
			TABL	(0,7,HKT_T_TELESERVICE_CCITT,&i_hlc[0].ext_teleservice)
		END_IF		()
		EXT_1		()
END	(0)

			/* ---------- Feature activation (FEATURE_ACT) */

D_START	(HKT_FEATURE_ACT_P)
	D_ANY_VAL	(FEATURE_ID_NB)
	D_END_OCTET	(_3_)
D_END		(FEATURE_ACT_E)

START	(HKT_FEATURE_ACT_P)
	ANY_VAL		(0,7,	&i_feature_act[0].feature_nb)
	END_OCTET	()
END	(0)

			/* ---------- Feature indication (FEATURE_IND) */

D_START	(HKT_FEATURE_IND_P)
	D_ANY_VAL	(FEATURE_ID_NB)
	D_EXT_1		(_3_)
	D_PAD		(PADDING_4)
	D_TABL		(STATUS_IND)
	D_END_OCTET (_4_)
D_END	(FEATURE_IND_E)

START	(HKT_FEATURE_IND_P)
	ANY_VAL	(0,7,	&i_feature_ind[0].feature_nb)
	EXT_1	()
	PAD		(4,4)
	TABL	(0,4,	HKT_T_STATUS_IND, &i_feature_ind[0].status_ind)
	END_OCTET ()
END	(0)

			/* ---------- Information request (INFORMATION_RQ) */

D_START	(HKT_INFORMATION_RQ_P)
	D_TABL	(INFO_IND)
	D_VAL	(INFO_TYPE)
	D_EXT_1	(_3_)
D_END		(INFORMATION_RQ_E)

START	(HKT_INFORMATION_RQ_P)
	TABL	(6,1, HKT_T_INFO_IND,		&i_information_rq[0].info_ind)
	VAL		(0,6, INFO_TYPE_UNDEFINED,	&i_information_rq[0].info_type)
	EXT_1	()
END	(0)

			/* ---------- Keypad (KEYPAD) */

D_START	(HKT_KEYPAD_P)
	D_TEXT  (VAL_)
D_END		(KEYPAD_E)

START	(HKT_KEYPAD_P)
	TEXT	(IA5,ANY_CHAR, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END			(0)

			/* ---------- Low layer compatibility (LLC) */

D_START	(HKT_LLC_P)
		D_VAL		(CODING_STD)
		D_TABL		(TRF_CAP)

		D_FUNCTION	(LLC_3A_SET)
		D_IF_VAL	(LLC_3A_TEST)
			D_EXT_0_1	(LLC_3)
			D_TABL		(OUT_BAND_NEG)
			D_PAD		(NS_PAD_3A)
		D_END_IF (LLC_3A_END_IF)
		D_EXT_1		(_3A)

		D_VAL		(TRF_MODE)
		D_VAL		(TRF_RATE)
		D_FUNCTION  (IF_4AB)

		D_IF_VAL	(_4AB_NOT_DEFAULT)
			D_EXT_0_1	(_4)
			D_TABL	 	(STRUCT)
			D_VAL	 	(CONFIG)
			D_VAL	 	(EST)
			D_FUNCTION	(IF_4B)

			D_IF_VAL	(_4B_NOT_DEFAULT)
				D_EXT_0_1	(_4A)
				D_VAL		(SYMMETRY)
				D_VAL		(DEST_RATE)
			D_END_IF	(E_4B_NOT_DEFAULT)
		D_END_IF	(E_4AB_NOT_DEFAULT)
		D_EXT_1	 	(_4B)

		D_OPTIONAL_OCTET	(_5_6_7)

		D_FUNCTION	(LLC_5)

		D_IF_VAL	(OCTET_5_PR)

			D_VAL		(LAYER_1)
			D_TABL		(PROTOCOL_1)
			D_EXT_0_1	(_5_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)

				/* V110 */

			D_IF_VAL		(V110)
				D_EXT_0_1	(V110_5A)
				D_TABL		(V110_INTER_RATE)
				D_TABL		(V110_TX_NIC)
				D_TABL		(V110_RX_NIC)
				D_TABL		(V110_TX_FC)
				D_TABL		(V110_RX_FC)
				D_PAD		(V110_PAD_5B)
				D_EXT_0_1	(V110_5B)
				D_TABL		(V110_STOP_BIT)
				D_TABL		(V110_DATA_BIT)
				D_TABL		(V110_PARITY)
				D_EXT_0_1	(V110_5C)
				D_TABL		(V110_DUPLEX)
				D_ANY_VAL	(V110_MODEM)
			D_END_IF		(ENDIF_V110)

				/* V120 */

			D_IF_VAL		(V120_)
				D_EXT_0_1	(V120_5A)
				D_TABL		(V120_HDR)
				D_TABL		(V120_MULTI_FRAME)
				D_TABL		(V120_OP_MODE)
				D_TABL		(V120_LLI)
				D_TABL		(V120_ASSIGN)
				D_VAL		(V120_BAND_LL0)
				D_PAD		(V120_PAD_5B)
				D_EXT_0_1	(V120_5B)
				D_TABL		(V120_STOP_BIT)
				D_TABL		(V120_DATA_BIT)
				D_TABL		(V120_PARITY)
				D_EXT_0_1	(V120_5C)
				D_TABL		(V120_DUPLEX)
				D_ANY_VAL	(V120_MODEM)
			D_END_IF	(ENDIF_V120)

			D_EXT_1		(_5_)

		D_END_IF    (OCTET_5)

		D_FUNCTION	(OCTET_6)
		D_IF_VAL	(OCTET_6_PR)
			D_VAL		(L_ID_2)
			D_TABL		(PROTOCOL_ID_2)
			D_EXT_0_1	(_6)
			D_EXT_1		(_6A)
		D_END_IF	(ENDIF_6_PR)

		D_FUNCTION	(OCTET_7)
		D_IF_VAL	(OCTET_7_PR)
			D_VAL		(L_ID_3)
			D_TABL		(PROTOCOL_ID_3)
			D_EXT_0_1	(_7)
			D_EXT_1		(_7A)
		D_END_IF	(ENDIF_7_PR)

D_END (LLC_E)

START	(HKT_LLC_P)
		VAL		(5,2,CODING_STD_CCITT,				&i_llc[0].coding_std)
		TABL	(0,5,HKT_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)

		FUNCTION(hkt_llc_3a_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(6,1,HKT_T_OUT_BAND_NEG,		&i_llc[0].out_band_neg)
			PAD		(0,6)
		END_IF	()
		EXT_1   ()

		VAL		(5,2,TRF_MODE_CIRCUIT,				&i_llc[0].trf_mode)
		VAL		(0,5,TRF_RATE_64KBS,				&i_llc[0].trf_rate)
		FUNCTION(hkt_llc_4ab_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(4,3,HKT_T_STRUCTURE,			&i_llc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
			VAL		(0,2,EST_DEMAND,				&i_llc[0].est)

			FUNCTION(hkt_llc_4b_spdu)
			IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1 ()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_llc[0].symmetry)
				VAL		(0,5,TRF_RATE_64KBS,		&i_llc[0].dest_rate)
			END_IF	()
		END_IF	()
		EXT_1	()

		OPTIONAL_OCTET  ()

			/* following octets may be optional in some circumstances */

		FUNCTION(hkt_llc_5_spdu)

		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
			TABL	(0,5,HKT_T_PROTOCOL_ID_LLC_1,	&i_llc[0].protocol_id_1)
			EXT_0_1 ()
			TABL	(6,1,HKT_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,HKT_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,HKT_T_USER_RATE,			&i_llc[0].user_rate)

				/* V110 */

			IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1 ()
				TABL	(5,2,HKT_T_INTER_RATE,			&i_llc[0].inter_rate)
				TABL	(4,1,HKT_T_NIC_TX,				&i_llc[0].tx_nic)
				TABL	(3,1,HKT_T_NIC_RX,				&i_llc[0].rx_nic)
				TABL	(2,1,HKT_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
				TABL	(1,1,HKT_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,HKT_T_STOP_BIT,			&i_llc[0].stop_bit)
				TABL	(3,2,HKT_T_DATA_BIT,			&i_llc[0].data_bit)
				TABL	(0,3,HKT_T_PARITY,				&i_llc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_DUPLEX,				&i_llc[0].duplex)
				ANY_VAL	(0,6,							&i_llc[0].modem)
			END_IF  ()

				/* V120 */

			IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_HEADER,				&i_llc[0].hdr)
				TABL	(5,1,HKT_T_MULTI_FRAME,			&i_llc[0].multi_frame)
				TABL	(4,1,HKT_T_OP_MODE,				&i_llc[0].op_mode)
				TABL	(3,1,HKT_T_LLI,					&i_llc[0].lli)
				TABL	(2,1,HKT_T_ASSIGN,				&i_llc[0].assign)
				VAL		(1,1,LL0,						&i_llc[0].band)
				PAD		(0,1)
				EXT_0_1 ()
				TABL	(5,2,HKT_T_STOP_BIT,			&i_llc[0].stop_bit)
				TABL	(3,2,HKT_T_DATA_BIT,			&i_llc[0].data_bit)
				TABL	(0,3,HKT_T_PARITY,				&i_llc[0].parity)
				EXT_0_1 ()
				TABL	(6,1,HKT_T_DUPLEX,				&i_llc[0].duplex)
				ANY_VAL	(0,6,							&i_llc[0].modem)
			END_IF	()

			EXT_1	()

		END_IF 	()	/* octet 5 present */

		FUNCTION(hkt_llc_6_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_2,				&i_llc[0].layer_id_2)
			TABL	(0,5,HKT_T_PROTOCOL_ID_LLC_2,	&i_llc[0].protocol_id_2)
			EXT_0_1 ()
			/* No instruction for optional octet 6a to allow only reception */
			EXT_1   ()
		END_IF ()	/* octet 6 present */

		FUNCTION(hkt_llc_7_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_3,				&i_llc[0].layer_id_3)
			TABL	(0,5,HKT_T_PROTOCOL_ID_LLC_3,	&i_llc[0].protocol_id_3)
			EXT_0_1	()
			/* No instruction for optional octet 7a to allow only reception */
			EXT_1	()
		END_IF	()	/* octet 7 present */

END (0)

			/* ---------- Notification indicator (NOTIF_IND) */

D_START	(HKT_NOTIF_IND_P)
	D_TABL  (DESCR)
	D_EXT_1 (_3)
D_END		(NOTIF_IND_E)

START	(HKT_NOTIF_IND_P)
	TABL	(0,7,HKT_T_NOTIF_IND_DESCR,	 &i_notif_ind[0].notif_descr)
	EXT_1   ()
END			(0)

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(HKT_PROGRESS_IND_P)
	D_VAL	(CODING_STD)
	D_PAD   (NS_PAD_3)
	D_TABL  (LOCATION)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(HKT_PROGRESS_IND_P)
	VAL		(5,2,CODING_STD_CCITT,				&i_progress_ind[0].coding_std)
	PAD		(4,1)
	TABL	(0,4,HKT_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	EXT_1   ()
	TABL	(0,7,HKT_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
	EXT_1   ()
END			(0)

			/* ---------- Restart indicator */

D_START		(HKT_RESTART_IND_P)
	D_PAD	(NS_PAD_)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_IND_E)

START		(HKT_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,HKT_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
	EXT_1	()
END			(hkt_restart_spdu)

			/* ---------- Signal (SIGNAL) */

D_START	(HKT_SIGNAL_P)
	D_VAL		(VAL_)
	D_END_OCTET	(_3)
D_END			(SIGNAL_E)

START	(HKT_SIGNAL_P)
	VAL		(0,8,PATTERN_0,	&i_signal[0].val)
	END_OCTET	()
END				(0)


			/* ---------- User to user information (UUI) */

D_START	(HKT_UUI_P)
	D_VAL		(PROTOCOL_DISCR)
	D_END_OCTET	(_3)
	D_TEXT  	(INFO_OTHER)
D_END			(UUI_E)

START	(HKT_UUI_P)
	VAL			(0,8,PROTOCOL_DISCR_USER_SPF, 	&i_uui[0].protocol_discr)
	END_OCTET   ()
	TEXT		(BINARY, ANY_OCTET,				&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END				(0)

/*EOF*/

