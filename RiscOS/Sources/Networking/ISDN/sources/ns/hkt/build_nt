/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_nt.hkt
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        hkt_net_build_pdu_ns - implements the simulation of the network side
 *                   for a call connection.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            hkt_net_build_pdu_ns - implements the simulation of the network side
					for a call connection.

Usage           build_pdu_ns ()

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void hkt_net_build_pdu_ns ()
{
		/* Message builder */

	switch (Tolower (g_spdu_id[0])) {

/*==========================================================================*/

#if EQUIPMENT == TE

		/*========== primitives as seen from TE side ==========*/

			/* Call establishment spdu event */

		case DA_ALERT :
				*p_info++ = ALERT;
				break;


		case DA_CALL_PROC :
				*p_info++ = CALL_PROC;

				*p_info++ = CHAN_ID;
				if (Na_type == BRI) {

					*p_info++ = 1;
					*p_info++ = 0x8a;

				} else {

					*p_info++ = 3;
					*p_info++ = 0xa1;
					*p_info++ = 0x83;
					*p_info++ = 0x8c;
				}

				 p_ie_o = p_info;

				break;


		case DA_CONN :
				*p_info++ = CONN;

				 p_ie_o = p_info;

				break;


		case DA_CONN_ACK :
				*p_info++ = CONN_ACK;
				break;

		case DA_DISC :
				*p_info++ = DISC;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x90;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_CLEARING_16 */

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** disc ***");

				break;

		case DA_INFO :
				*p_info++ = INFO;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x9f;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** info ***");

				break;

		case DA_NOTIFY :
				*p_info++ = NOTIFY;

				 p_ie_m = p_info;

				*p_info++ = NOTIF_IND;
				*p_info++ = 1;
				*p_info++ = 0x80;	/* 1+ USER_SUSPENDED */

				break;

		case DA_PROGRESS :
				*p_info++ = PROGRESS;

				 p_ie_m = p_info;

				*p_info++ = PROGRESS_IND;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ PROGRESS_LOC_USER */
				*p_info++ = 0x88;	/* 1+ PROGRESS_DESCR_IN_BAND_NOW */

				break;

		case DA_REL :
				*p_info++ = REL;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0xD1;	/* 1+ C_C_NORMAL_EVENT+ C_V_81 */
				break;


		case DA_REL_COMP :
				*p_info++ = REL_COMP;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x90;	/* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

				break;


		case DA_RESTART :
				*p_info++ = RESTART;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** restart ***");

				 p_ie_m = p_info;

				*p_info++ = RESTART_IND;
				*p_info++ = 1;
				*p_info++ = 0x87;	/* 1+ RI_ALL_INTERFACES */

				break;

		case DA_RESTART_ACK :
				*p_info++ = RESTART_ACK;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** restart_ack ***");

				 p_ie_m = p_info;

				*p_info++ = RESTART_IND;
				*p_info++ = 1;
				*p_info++ = 0x87;	/* 1+ RI_ALL_INTERFACES */

				break;

		case DA_SETUP :
				*p_info++ = SETUP;

					/* no sending complete => overlap receiving */

				*p_info++ = BC;		/* Mandatory */
				*p_info++ = 2;
				*p_info++ = 0x88;	/* 1+ CODING_STD_CCITT+ TRF_CAP_UNRESTRICTED */
				*p_info++ = 0x90;	/* 0+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				if (Na_type == BRI) {

					*p_info++ = 1;
					*p_info++ = 0x8a;

				} else {

					*p_info++ = 5;
					*p_info++ = 0xe1;	/* Explicit interface id */
					*p_info++ = 0x83;	/* Intreface id value = 3 */
					*p_info++ = 0x93;	/* Map */
					*p_info++ = 0x00;   /* Channels 24 -> 17 not selected */
					*p_info++ = 0x08;	/* Cahnnel 12 selected */
				}

				 p_ie_o = p_info;

				*p_info++ = CALLING_NB;
				*p_info++ = 3;
				*p_info++ = 0x89;	/* 1+ NB_UNKNOWN+ PLAN_PRIVATE */
				 Put_text ("33");

					/* no calling sub add IE */

				*p_info++ = CALLED_NB;
				*p_info++ = 11;
				*p_info++ = 0x80;	/* 1+ NB_UNKNOWN+ PLAN_UNKNWON */
				 Put_text ("1234567890");

				*p_info++ = CALLED_SUB_ADD;
				*p_info++ = 6;
				*p_info++ = 0x80;	/* 1+ SUB_ADD_OSI+ SUB_ADD_EVEN+ 000 */
				*p_info++ = 0x50;	/* FORMAT_IA5 for OSI coding */
				 Put_text ("4321");

				*p_info++ = HLC;
				*p_info++ = 2;
				*p_info++ = 0x91;	/* 1+ CODING_STD_CCITT+ 100+ 01 */
				*p_info++ = 0x81;	/* 1+ SERVICE_TELEPHONY */

				*p_info++ = UUI;
				*p_info++ = 13;
				*p_info++	= 0x00;	/* USER SPECIFIC PROTOCOL */
				 Put_text ("** hello! **");

				break;

		case DA_SETUP_ACK :
				*p_info++ = SETUP_ACK;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				if (Na_type == BRI) {

					*p_info++ = 1;
					*p_info++ = 0x8a;

				} else {

					*p_info++ = 5;
					*p_info++ = 0xe1;	/* Explicit interface id */
					*p_info++ = 0x83;	/* Intreface id value = 3 */
					*p_info++ = 0x93;	/* Map */
					*p_info++ = 0x00;   /* Channels 24 -> 17 not selected */
				*p_info++ = CHAN_ID;
				if (Na_type == BRI) {

					*p_info++ = 1;
					*p_info++ = 0x8a;

				} else {

					*p_info++ = 5;
					*p_info++ = 0xe1;	/* Explicit interface id */
					*p_info++ = 0x83;	/* Intreface id value = 3 */
					*p_info++ = 0x93;	/* Map */
					*p_info++ = 0x00;   /* Channels 24 -> 17 not selected */
					*p_info++ = 0x08;	/* Cahnnel 12 selected */
				}

					*p_info++ = 0x08;	/* Cahnnel 12 selected */
				}

				break;


		case DA_STATUS :
				*p_info++ = STATUS;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x9f;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

				*p_info++ = CALL_STATE;
				*p_info++ = 1;
				*p_info++ = 0x03;		/* CODING_STD_CCITT+ U3 */

				break;

		case DA_STATUS_ENQ :
				*p_info++ = STATUS_ENQ;
				break;

		case DA_SUSP_ACK :
				*p_info++ = SUSP_ACK;
				break;

		case DA_SUSP_REJ :
				*p_info++ = SUSP_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x91;	/* 1+ C_C_NORMAL_EVENT+ C_V_USER_BUSY_17 */

				break;

		case DA_RES_ACK :
				*p_info++ = RES_ACK;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
										CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */

				break;


		case DA_RES_REJ :
				*p_info++ = RES_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x91;	/* 1+ C_C_NORMAL_EVENT+ C_V_USER_BUSY_17 */

				break;

		case DA_SPDU_ID_UNKNOWN:
				*p_info++ = SPDU_ID_UNKNOWN;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x9f;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

				break;

		case '1' :
				Automata_1 ();
				break;


/*==========================================================================*/

#endif

/*---------------- UNKNOWN primitive */

		case DA_HEXA_CODING :
				mg_ns_hexa ();		/* Hexadecimal coding */
				break;

		default :
			return;

	}

}

/*EOF*/
