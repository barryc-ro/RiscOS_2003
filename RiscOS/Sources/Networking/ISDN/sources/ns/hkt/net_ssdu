
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.hkt
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.hkt */

#include "hkt.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			hkt_bc_ra_ssdu - implements the specific processing
								  of a bc rate adaptation in a SSDU
								  primitive.

Usage           uchar hkt_bc_ra_ssdu ();

Return value : 	hkt_bc_ra_ssdu returns	= OK
										= NOK

common constants and declarations : ns.h, hkt_i_s.h

common objects : internal data structure i_bc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar hkt_bc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_bc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = r_exec_ssdu_ie((uchar *)&HKT_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_V120 :
				ret_code = r_exec_ssdu_ie((uchar *)&HKT_P_BC_V120);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_RA_NON_CCITT :
				ret_code = r_exec_ssdu_ie((uchar *)&HKT_P_BC_NON_CCITT);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				r_exec_ssdu_ie ((uchar *)&HKT_P_BC_PAD);
				break;
		}

		return (r_exec_ssdu_ie ((uchar *)&HKT_P_BC_2));

	} else {

		switch (I_bc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = s_exec_ssdu_ie((uchar *)&HKT_P_BC_V110);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_V120 :
				ret_code = s_exec_ssdu_ie((uchar *)&HKT_P_BC_V120);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			case PROTOCOL_ID_1_RA_NON_CCITT :
				ret_code = s_exec_ssdu_ie((uchar *)&HKT_P_BC_NON_CCITT);

				if (ret_code != OK) {
					return (ret_code);
				}
				break;

			default :
				s_exec_ssdu_ie ((uchar *)&HKT_P_BC_PAD);
				break;
		}
		return (s_exec_ssdu_ie ((uchar *)&HKT_P_BC_2));
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		hkt_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/
uchar hkt_chan_id_chan_nb_ssdu ()
{

	uchar i;

	if (direction == TO_CALL_CONTROL) {

		/*
		 * Reset the extension bit in the chan_nb field.
		 */

		for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
			Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
		}

	}

	return (OK);
}

uchar hkt_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		if ((I_chan_id_int_type != INT_TYPE_BRI) &&
			(i_chan_id[0].nb_map == CHAN_NUMBER)) {

					/* set the extension bit to 1 in the chan_nb field, unless it is slot map */

				i = I_(chan_id, chan_nb_lgth)-1;

				Set_ext_bit (I_(chan_id, p_chan_nb)[i]);
		}
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			hkt_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar hkt_llc_ra_ssdu ();

Return value : 	hkt_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, hkt_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar hkt_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_llc_protocol_id_1) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&HKT_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&HKT_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&HKT_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&HKT_P_LLC_2));

	} else {

			switch (I_llc_protocol_id_1) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&HKT_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&HKT_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&HKT_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&HKT_P_LLC_2));
	}

}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ */

#define HKT_NET_ALERT_RQ		HKT_ALERT_IN
#define HKT_ALERT_RQ			HKT_ALERT_IN

		/* NS_ALERT_IN */

#define HKT_NET_ALERT_IN		HKT_ALERT_RQ

		/* NS_CALL_PROC_RQ */

#define HKT_NET_CALL_PROC_RQ	HKT_CALL_PROC_IN
#define HKT_CALL_PROC_RQ		HKT_CALL_PROC_IN

		/* NS_CALL_PROC_IN */

#define HKT_NET_CALL_PROC_IN	HKT_CALL_PROC_RQ

		/* NS_CONN_RQ */

#define HKT_NET_CONN_RQ			HKT_CONN_IN
#define HKT_CONN_RQ				HKT_CONN_IN

		/* NS_CONN_IN */

#define HKT_NET_CONN_IN			HKT_CONN_RQ

		/* NS_CONN_RS */

#define HKT_NET_CONN_RS			HKT_CONN_CO
#define HKT_NET_CONN_CO			HKT_CONN_CO

		/* NS_CONN_CO */

#define HKT_CONN_RS				HKT_CONN_CO

#define HKT_NET_PROGRESS_RQ		HKT_PROGRESS_IN
#define HKT_PROGRESS_RQ			HKT_PROGRESS_IN

		/* NS_PROGRESS_IN */

#define HKT_NET_PROGRESS_IN		HKT_PROGRESS_RQ

#define HKT_NET_SETUP_ACK_RQ	HKT_SETUP_ACK_IN

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

#define HKT_NET_CLEAR_RQ		HKT_CLEAR_IN
#define HKT_CLEAR_RQ			HKT_CLEAR_IN

		/* NS_CLEAR_IN */

#define HKT_NET_CLEAR_IN		HKT_CLEAR_RQ

		/* NS_CLEAR_RS */

#define HKT_NET_CLEAR_RS		HKT_CLEAR_CO
#define HKT_CLEAR_RS			HKT_CLEAR_CO

		/* NS_CLEAR_CO */

#define HKT_NET_CLEAR_CO		HKT_CLEAR_RS

/*===============    CALL  INFORMATION  PHASE  MESSAGES    ====================*/

		/* NS_RESUME_RQ */

/*-------- NS_RESUME_IN */

#define HKT_NET_RESUME_IN			HKT_RESUME_RQ

/*-------- NS_RESUME_RS */

#define HKT_NET_RESUME_RS			HKT_RESUME_CO

		/* NS_RESUME_CO */

		/* NS_SUSPEND_RQ */

/*-------- NS_SUSPEND_IN */

#define HKT_NET_SUSPEND_IN			HKT_SUSPEND_RQ

/*-------- NS_SUSPEND_RS */

#define HKT_NET_SUSPEND_RS			HKT_SUSPEND_CO

		/* NS_SUSPEND_CO */

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/


#define HKT_NET_INFO_RQ			HKT_INFO_IN
#define HKT_INFO_RQ				HKT_INFO_IN

		/* NS_INFO_IN */

#define HKT_NET_INFO_IN			HKT_INFO_RQ

		/* NS_NOTIFY_RQ */

#define HKT_NET_NOTIFY_RQ		HKT_NOTIFY_IN
#define HKT_NOTIFY_RQ			HKT_NOTIFY_IN

		/* NS_NOTIFY_IN */

#define HKT_NET_NOTIFY_IN		HKT_NOTIFY_RQ

		/* NS_RESTART_RQ - (No IE in this message) */

#define HKT_NET_RESTART_RQ		HKT_RESTART_IN
#define HKT_NET_RESTART_RS		HKT_RESTART_IN
#define HKT_RESTART_RS			HKT_RESTART_IN
#define HKT_RESTART_RQ			HKT_RESTART_IN

#define HKT_NET_RESTART_CO		HKT_RESTART_IN
#define HKT_RESTART_CO			HKT_RESTART_IN

		/* NS_RESTART_IN */

#define HKT_NET_RESTART_IN		HKT_RESTART_IN

/*=========================================================================*/

#define Ns_hkt_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_hkt_end_table_or_function		};

#define Ns_hkt_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_hkt_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_hkt		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_hkt_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_hkt_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "hkt.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define HKT_MX_SSDU (sizeof(HKT_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		hkt_mx_size_ssdu = HKT_MX_SSDU;

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_hkt_table_or_function
#undef Ns_hkt_end_table_or_function
#undef Ns_hkt_tab_ssdu_ie_entry
#undef Ns_hkt_tab_ssdu_ie_mx_entry
#undef Ns_hkt_tab_ssdu_entry

#define Ns_hkt_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_hkt_end_table_or_function		}

#define Ns_hkt_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_hkt_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_hkt_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_hkt
#	define Message_header_ssdu_ie_hkt		Ns_hkt_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_hkt_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_hkt_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_hkt_ssdu ()
{
	uchar   i_pic;

#	include "hkt.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

