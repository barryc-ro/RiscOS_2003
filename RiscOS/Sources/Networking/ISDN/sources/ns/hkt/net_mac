

/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.hkt
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


				/*
				   MACROs and DECLARATIONS used to access the Network
				   Signalling entity (NS) from the user Layer 4 Signalling
				   entity (L4S).
				*/

/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_hkt_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_hkt_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(hkt_,pr), p_off)
#define Isdn_init_hkt_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_hkt(pr,ie)					Get_ie 			(Paste(hkt_,pr), Paste (hkt_, ie))
#define	Isdn_get_val_hkt(pr,ie,fld)			Isdn_get_val	(Paste(hkt_,pr), Paste (hkt_, ie), fld)
#define Isdn_p_str_hkt(pr,ie,fld)			Isdn_p_str		(Paste(hkt_,pr), Paste (hkt_, ie), fld)
#define	Isdn_lgth_str_hkt(pr,ie,fld)		Isdn_lgth_str	(Paste(hkt_,pr), Paste (hkt_, ie), fld)
#define	Isdn_mx_lgth_str_hkt(pr,ie,fld)		Isdn_mx_lgth_str(Paste(hkt_,pr), Paste (hkt_, ie), fld)
#define	P_start_val_ns_hkt(pr,ie)			P_start_val_ns	(Paste(hkt_,pr), Paste (hkt_, ie))
#define	P_val_ns_hkt(ie)					P_val_ns		(Paste(hkt_,ie))
#define Set_offset_hkt(pr,ie)				Set_offset		(Paste(hkt_,pr),Paste(hkt_,ie))
#define	Set_next_ie_hkt(ie)					Set_next_ie		(Paste(hkt_,ie))
#define	Set_val_hkt(ie,fld,val)				Set_val			(Paste(hkt_,ie), fld, val)
#define	Set_val_nil_hkt(ie,fld,val)			Set_val_nil		(Paste(hkt_,ie), fld, val)
#define Set_str_hkt(ie, lv, p_str, mx_sz)	Set_str			(Paste(hkt_,ie), lv, p_str, mx_sz)
#define Set_mem_hkt(ie, lv, p_mem, sz)		Set_mem			(Paste(hkt_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_hkt(pr,ie)	Set_to_next_ie_instance (Paste(hkt_,pr), Paste (hkt_, ie))
#define Get_remaining_ie_instance_nb_hkt(pr,ie,p_ie)	Get_remaining_ie_instance_nb(Paste(hkt_,pr), Paste (hkt_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_hkt	ns_offset_t hkt_message_header;
#else
#	define Message_header_offset_hkt
#endif

/*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ */

typedef struct off_ns_hkt_te_alert_in		off_ns_hkt_alert_rq;
typedef struct off_ns_hkt_te_alert_in		off_ns_hkt_net_alert_in;

		/* NS_ALERT_IN */

struct off_ns_hkt_te_alert_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_progress_ind;			/* progress indicator */
	ns_offset_t hkt_chan_id;				/* channel ID */
};

typedef struct off_ns_hkt_te_alert_in		off_ns_hkt_net_alert_rq;
typedef struct off_ns_hkt_te_alert_in		off_ns_hkt_alert_in;

		/* NS_CALL_PROC_RQ */

typedef struct off_ns_hkt_te_call_proc_in	off_ns_hkt_call_proc_rq;
typedef struct off_ns_hkt_te_call_proc_in	off_ns_hkt_net_call_proc_in;

		/* NS_CALL_PROC_IN */

struct off_ns_hkt_te_call_proc_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_chan_id;				/* channel ID */
	ns_offset_t hkt_progress_ind;			/* progress indicator */
};

typedef struct off_ns_hkt_te_call_proc_in	off_ns_hkt_net_call_proc_rq;
typedef struct off_ns_hkt_te_call_proc_in	off_ns_hkt_call_proc_in;

		/* NS_CONN_RQ */

typedef struct off_ns_hkt_te_conn_in		off_ns_hkt_conn_rq;
typedef struct off_ns_hkt_te_conn_in		off_ns_hkt_net_conn_in;

		/* NS_CONN_IN */

struct off_ns_hkt_te_conn_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_sending_complete;		/* sending complete */
	ns_offset_t hkt_bc;						/* bearer capability */
	ns_offset_t hkt_chan_id;				/* channel ID */
	ns_offset_t hkt_progress_ind;			/* progress indicator */
	ns_offset_t hkt_signal;					/* signal */
	ns_offset_t hkt_calling_nb;				/* calling number (from network) */
	ns_offset_t hkt_calling_sub_add;		/* calling subaddress */
	ns_offset_t hkt_called_nb;				/* called number */
	ns_offset_t hkt_called_sub_add;			/* called subaddress */
	ns_offset_t hkt_llc;					/* low layer capability */
	ns_offset_t hkt_hlc;					/* high layer compatibility */
	ns_offset_t hkt_uui;					/* user to user information */
	ns_offset_t hkt_keypad;					/* keypad */
};

typedef struct off_ns_hkt_te_conn_in		off_ns_hkt_net_conn_rq;
typedef struct off_ns_hkt_te_conn_in		off_ns_hkt_conn_in;

		/* NS_CONN_RS (CONN) */

typedef struct off_ns_hkt_te_conn_co		off_ns_hkt_conn_rs;
typedef struct off_ns_hkt_te_conn_co		off_ns_hkt_net_conn_co;

		/* NS_CONN_CO (CONN or CONN_ACK) */

struct off_ns_hkt_te_conn_co {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_chan_id;				/* channel ID */
	ns_offset_t hkt_progress_ind;			/* progress indicator */
	ns_offset_t hkt_display;				/* display */
	ns_offset_t hkt_llc;					/* low layer capability */
	ns_offset_t hkt_uui;					/* user to user information */
};

typedef struct off_ns_hkt_te_conn_co		off_ns_hkt_net_conn_rs;
typedef struct off_ns_hkt_te_conn_co		off_ns_hkt_conn_co;

		/* NS_PROGRESS_RQ */

typedef struct off_ns_hkt_te_progress_in	off_ns_hkt_progress_rq;
typedef struct off_ns_hkt_te_progress_in	off_ns_hkt_net_progress_in;

		/* NS_PROGRESS_IN */

struct off_ns_hkt_te_progress_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_cause;					/* cause */
	ns_offset_t hkt_progress_ind;			/* progress indicator */
};

typedef struct off_ns_hkt_te_progress_in	off_ns_hkt_net_progress_rq;
typedef struct off_ns_hkt_te_progress_in	off_ns_hkt_progress_in;

		/* NS_SETUP_ACK_IN */

struct off_ns_hkt_te_setup_ack_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_chan_id;				/* channel ID */
	ns_offset_t hkt_progress_ind;			/* progress indicator */
};

typedef struct off_ns_hkt_te_setup_ack_in	off_ns_hkt_net_setup_ack_rq;
typedef struct off_ns_hkt_te_setup_ack_in	off_ns_hkt_setup_ack_in;

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

typedef struct off_ns_hkt_te_clear_in		off_ns_hkt_clear_rq;
typedef struct off_ns_hkt_te_clear_in		off_ns_hkt_net_clear_in;

		/* NS_CLEAR_IN */

struct off_ns_hkt_te_clear_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_cause;					/* cause */
	ns_offset_t hkt_progress_ind;			/* progress indicator */
	ns_offset_t hkt_display;				/* display */
	ns_offset_t hkt_uui;					/* user to user information */
};

typedef struct off_ns_hkt_te_clear_in		off_ns_hkt_net_clear_rq;
typedef struct off_ns_hkt_te_clear_in		off_ns_hkt_clear_in;

		/* NS_CLEAR_RS */

typedef struct off_ns_hkt_te_clear_co		off_ns_hkt_clear_rs;
typedef struct off_ns_hkt_te_clear_co		off_ns_hkt_net_clear_co;

		/* NS_CLEAR_CO */

struct off_ns_hkt_te_clear_co {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_cause;					/* cause */
	ns_offset_t hkt_uui;					/* user to user information */
};

typedef struct off_ns_hkt_te_clear_co		off_ns_hkt_net_clear_rs;
typedef struct off_ns_hkt_te_clear_co		off_ns_hkt_clear_co;

/*===============    CALL  INFORMATION  PHASE  MESSAGES    ====================*/

		/* NS_RESUME_RQ/IN */

struct off_ns_hkt_te_resume_rq {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_call_id;				/* call identity */
};

typedef struct off_ns_hkt_te_resume_rq		off_ns_hkt_resume_in;
typedef struct off_ns_hkt_te_resume_rq		off_ns_hkt_resume_rq;

		/* NS_RESUME_RS/CO */

struct off_ns_hkt_te_resume_co {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_chan_id;				/* channel ID */
	ns_offset_t hkt_cause;					/* cause */
};

typedef struct off_ns_hkt_te_resume_co		off_ns_hkt_resume_rs;
typedef struct off_ns_hkt_te_resume_co		off_ns_hkt_resume_co;

		/* NS_SUSPEND_RQ/IN */

struct off_ns_hkt_te_suspend_rq {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_call_id;				/* call identity */
};

typedef struct off_ns_hkt_te_suspend_rq		off_ns_hkt_suspend_rq;
typedef struct off_ns_hkt_te_suspend_rq		off_ns_hkt_suspend_in;

		/* NS_SUSPEND_RS/CO */

struct off_ns_hkt_te_suspend_co {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_cause;					/* cause */
};

typedef struct off_ns_hkt_te_suspend_co		off_ns_hkt_suspend_co;
typedef struct off_ns_hkt_te_suspend_co		off_ns_hkt_suspend_rs;

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/


		/* NS_INFO_RQ */

typedef struct off_ns_hkt_te_info_in		off_ns_hkt_info_rq;
typedef struct off_ns_hkt_te_info_in		off_ns_hkt_net_info_in;

		/* NS_INFO_IN */

struct off_ns_hkt_te_info_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_sending_complete;		/* sending complete */
	ns_offset_t hkt_cause;					/* cause */
	ns_offset_t hkt_display;				/* display */
	ns_offset_t hkt_inforamtion_rq;			/* information request */
	ns_offset_t hkt_feature_ind;			/* feature indication */
	ns_offset_t hkt_keypad;					/* keypad */
	ns_offset_t hkt_feature_act;			/* feature activation */
	ns_offset_t hkt_called_nb;				/* called number */
};

typedef struct off_ns_hkt_te_info_in		off_ns_hkt_net_info_rq;
typedef struct off_ns_hkt_te_info_in		off_ns_hkt_info_in;

		/* NS_NOTIFY_RQ */

typedef struct off_ns_hkt_te_notify_in		off_ns_hkt_notify_rq;
typedef struct off_ns_hkt_te_notify_in		off_ns_hkt_net_notify_in;

		/* NS_NOTIFY_IN */

struct off_ns_hkt_te_notify_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_notif_ind;				/* notify indicator */
};

typedef struct off_ns_hkt_te_notify_in		off_ns_hkt_net_notify_rq;
typedef struct off_ns_hkt_te_notify_in		off_ns_hkt_notify_in;

		/* NS_RESTART_RQ */

typedef struct off_ns_hkt_te_restart_in		off_ns_hkt_restart_rq;
typedef struct off_ns_hkt_te_restart_in		off_ns_hkt_net_restart_in;

		/* NS_RESTART_RS */

typedef struct off_ns_hkt_te_restart_in		off_ns_hkt_restart_rs;
typedef struct off_ns_hkt_te_restart_in		off_ns_hkt_net_restart_co;

		/* NS_RESTART_IN */

struct off_ns_hkt_te_restart_in {
	Message_header_offset_hkt				/* message header parameters */
	ns_offset_t hkt_chan_id;				/* channel identifier */
	ns_offset_t hkt_display;				/* display */
	ns_offset_t hkt_restart_ind;			/* restart indicator */
};

typedef struct off_ns_hkt_te_restart_in		off_ns_hkt_net_restart_rq;
typedef struct off_ns_hkt_te_restart_in		off_ns_hkt_restart_in;

		/* NS_STATUS_ENQ_RQ */

struct off_ns_hkt_te_status_enq_rq {
	Message_header_offset_hkt				/* message header parameters */

#	if MESSAGE_HEADER_IE != ON
		ns_offset_t ie_nil;					/* or no IE */
#	endif

};

typedef struct off_ns_hkt_te_status_enq_rq	off_ns_hkt_status_enq_rq;
typedef struct off_ns_hkt_te_status_enq_rq	off_ns_hkt_net_status_enq_in;

		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/

		/* Bearer Capability (BC) */

struct val_ns_hkt_bc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* V110 intermediate rate */
	ie_val		nic_tx;					/* V110 network independent clock (NIC) on Transmission (Tx) */
	ie_val		nic_rx;					/* V110 network independent clock (NIC) on Reception (Rx) */
	ie_val		fc_tx;					/* V110 flow control on Transmission (Tx) */
	ie_val		fc_rx;					/* V110 flow control on Reception (Rx) */
	ie_val		hdr;					/* V120 rate adaption header included or not */
	ie_val		multi_frame;			/* V120 multiple frame establishement support in DL */
	ie_val		op_mode;				/* V120 mode of operation */
	ie_val		lli_negot;				/* V120 logical link identifier negotiation */
	ie_val		assign;					/* V120 assignor/assignee */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits */
	ie_val		parity;					/* number of parity bit */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user information layer 2 protocol */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */

};

		/* Call IDentification (CALL_ID) */

struct val_ns_hkt_call_id {
	Next_instance_offset
	ie_array 	value[HKT_MX_SZ_CALL_ID+2];	/* call identity */
};

		/* Called party number (CALLED_NB) */

struct val_ns_hkt_called_nb {
	Next_instance_offset
	ie_array 	nb[HKT_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_hkt_called_sub_add {
	Next_instance_offset
	ie_val		sub_add_type;			/* called subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[HKT_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_hkt_calling_nb {
	Next_instance_offset
	ie_val  	nb_type;				/* numbering type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[HKT_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_hkt_calling_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* calling subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[HKT_MX_SZ_CALLING_SUB_ADD+2];	/* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_hkt_cause {
	Next_instance_offset
	ie_val		cause_loc;				/* location */
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
	ie_array	cause_diag[HKT_MX_SZ_CAUSE_DIAG+2];	/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_hkt_chan_id {
	Next_instance_offset
	ie_val 		int_type;				/* interface type */
	ie_val 		int_id;					/* interface id */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val		int_id_val;				/* interface id value */
	ie_val		nb_map;					/* channel nb / mapping */
	ie_array	chan_nb[HKT_MX_SZ_CHAN_ID+2];	/* channel number */
};


		/* Display */

struct val_ns_hkt_display {
	Next_instance_offset
	ie_array 	text[HKT_MX_SZ_DISPLAY+2];		/* display information */
};

		/* Feature activation (FEATURE_ACT) */

struct val_ns_hkt_feature_act {
	Next_instance_offset
	ie_val      feature_id;                 /* feature identifier */
};

		/* Feature indication (FEATURE_IND) */

struct val_ns_hkt_feature_ind {
	Next_instance_offset
	ie_val      feature_id;                 /* feature identifier */
	ie_val      status_ind;                 /* feature status indicator */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_hkt_hlc {
	Next_instance_offset
	ie_val		teleservice;				/* high layer characteristics identification */
	ie_val		ext_teleservice;			/* extended high layer characteristics identification */
};

		/* Information request (INFORMATION_RQ) */

struct val_ns_hkt_information_rq {
	Next_instance_offset
	ie_val      info_ind;               /* information indicator */
};

		/* Keypad */

struct val_ns_hkt_keypad {
	Next_instance_offset
	ie_array 	text[HKT_MX_SZ_KEYPAD+2];			/* keypad information */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_hkt_llc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		out_band_neg;			/* out-band negotiation */
	ie_val		structure;				/* structure */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock on transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock on reception (Rx) */
	ie_val		fc_tx;					/* flow control on transmission (Tx) */
	ie_val		fc_rx;					/* flow control on reception (Rx) */
	ie_val		hdr;					/* rate adaption header included or not */
	ie_val		multi_frame;			/* multiple frame establishement support in DL */
	ie_val		op_mode;				/* mode of operation */
	ie_val		lli_negot;				/* logical link identifier negotiation */
	ie_val		assign;					/* assignor/assignee */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits excluding parity if present */
	ie_val		parity;					/* parity information */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user layer 2 protocol information */
	ie_val		option_2;				/* optional layer 2 protocol information */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
	ie_val		option_3;				/* optional layer 3 protocol information */
};

		/* Notification indicator (NOTIF_IND) */

struct val_ns_hkt_notif_ind {
	Next_instance_offset
	ie_val		notif_descr;			/* notification description*/
};


		/* Progress indicator (PROGRESS_IND) */

struct val_ns_hkt_progress_ind {
	Next_instance_offset
	ie_val		progress_loc;			/* location */
	ie_val		progress_descr;			/* progress description */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_hkt_restart_ind {
	Next_instance_offset
	ie_val		restart_class;			/* class */
};

		/* Signal (SIGNAL) */

struct val_ns_hkt_signal {
	Next_instance_offset
	ie_val	dummy;
};

		/* User-to-user information (UUI) */

struct val_ns_hkt_uui {
	Next_instance_offset
	ie_array	text[HKT_MX_SZ_UUI+2];		/* user information */
};

#if NS_IE_TSP_OUT == ON

			/* Definitions for compilation purpose only */

	struct val_ns_hkt_sending_complete {
		Next_instance_offset
		ie_val	unused;
	};


#endif

/*=========================================================================*/

							/* Information Elements (IE) */


			/*
			   Isdn_hkt_store_bc : store the bearer capability information
								   element :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- structure_	= structure,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_hkt_store_bc(pr, trf_cap_, trf_rate_, structure_, protocol_id_1_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
				Set_offset_hkt	(pr,	bc);										\
				Set_val_hkt		(bc,	trf_cap,		trf_cap_);					\
				Set_val_hkt		(bc,	trf_rate,		trf_rate_);					\
				Set_val_hkt		(bc,	structure,		structure_);				\
				Set_val_hkt		(bc,	protocol_id_1,	protocol_id_1_);			\
				Set_val_hkt		(bc,	syn_asyn,		syn_asyn_);					\
				Set_val_hkt		(bc,	negotiation,	negotiation_);				\
				Set_val_hkt		(bc,	user_rate,		user_rate_);				\
				Set_val_hkt		(bc,	inter_rate,		inter_rate_);				\
				Set_val_hkt		(bc,	nic_tx,			nic_tx_);					\
				Set_val_hkt		(bc,	nic_rx,			nic_rx_);					\
				Set_val_hkt		(bc,	fc_tx,			fc_tx_);					\
				Set_val_hkt		(bc,	fc_rx,			fc_rx_);					\
				Set_val_hkt		(bc,	hdr,			hdr_);						\
				Set_val_hkt		(bc,	multi_frame,	multi_frame_);				\
				Set_val_hkt		(bc,	op_mode,		op_mode_);					\
				Set_val_hkt		(bc,	lli_negot,		lli_negot_);				\
				Set_val_hkt		(bc,	assign,			assign_);					\
				Set_val_hkt		(bc,	stop_bit,		stop_bit_);					\
				Set_val_hkt		(bc,	data_bit,		data_bit_);					\
				Set_val_hkt		(bc,	parity,			parity_);					\
				Set_val_hkt		(bc,	duplex,			duplex_);					\
				Set_val_hkt		(bc,	modem,			modem_);					\
				Set_val_hkt		(bc,	protocol_id_2,	protocol_id_2_);			\
				Set_val_hkt		(bc,	protocol_id_3,	protocol_id_3_);			\
				Set_next_ie_hkt	(bc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_call_id : call ID

					INPUT :
						- pr	= primitive ID,
						- value_= call ID.

			*/


#define Isdn_hkt_store_call_id(pr, value_)										\
		Set_offset_hkt	(pr,		call_id);										\
		Set_str_hkt		(call_id,	value,	value_,	HKT_MX_SZ_CALL_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_called_nb : called number IE

					INPUT :
						- pr				= primitive ID,
						- nb_				= address of the literal string.
			*/

#define Isdn_hkt_store_called_nb(pr, nb_)					\
		Set_offset_hkt	(pr,		called_nb);										\
		Set_str_hkt		(called_nb,	nb,			nb_,		HKT_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_called_sub_add : called sub-address IE

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even_ind_	= odd/even indicator,
						- sub_add_		= address of the literal string.

			*/

#define Isdn_hkt_store_called_sub_add(pr, sub_add_type_, odd_even_ind_,	sub_add_) \
		Set_offset_hkt	(pr,				called_sub_add);						\
		Set_val_hkt		(called_sub_add,	sub_add_type,	sub_add_type_);			\
		Set_val_hkt		(called_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_str_hkt 	(called_sub_add,	sub_add,		sub_add_, HKT_MX_SZ_CALLED_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nb_type_		   	= numbering type,
						- plan_id_			= numbering plan ID,
						- pres_				= presentation indicator,
						- nb_				= pointer on the calling number literal string.
			*/

#define Isdn_hkt_store_calling_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)	\
		Set_offset_hkt	(pr,			calling_nb);								\
		Set_val_hkt		(calling_nb,	nb_type, 		nb_type_);					\
		Set_val_hkt		(calling_nb,	plan_id, 		plan_id_);					\
		Set_val_hkt		(calling_nb,	pres,			pres_);						\
		Set_val_hkt		(calling_nb,	screen_ind,		screen_ind_);						\
		Set_str_hkt		(calling_nb,	nb, 			nb_, HKT_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_hkt_calling_sub_add : calling sub-address IE

						INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even_ind_	= odd/even indicator,
						- sub_add_		= address of the literal string.


			*/

#define Isdn_hkt_store_calling_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
		Set_offset_hkt	(pr,				calling_sub_add);						\
		Set_val_hkt		(calling_sub_add,	sub_add_type, 	sub_add_type_);			\
		Set_val_hkt		(calling_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_str_hkt		(calling_sub_add,	sub_add,		sub_add_, HKT_MX_SZ_CALLING_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_call_id : call ID

					INPUT :
						- pr	= primitive ID,
						- value_= call ID.

			*/


#define Isdn_hkt_store_call_id(pr, value_)										\
		Set_offset_hkt	(pr,		call_id);										\
		Set_str_hkt		(call_id,	value,	value_,	HKT_MX_SZ_CALL_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_cause : cause IE

					INPUT :
						- pr			= primitive ID,
						- cause_loc_	= cause location,
						- cause_class_	= cause class,
						- cause_val_	= cause value,
						- cause_diag_	= cause diagnostic.

			*/

#define Isdn_hkt_store_cause(pr, cause_loc_, cause_class_, cause_val_, cause_diag_) \
		Set_offset_hkt	(pr,	cause);												\
		Set_val_hkt		(cause,	cause_loc,	cause_loc_);							\
		Set_val_hkt		(cause,	cause_class,cause_class_);							\
		Set_val_hkt		(cause,	cause_val,	cause_val_);							\
		Set_str_hkt		(cause,	cause_diag,	cause_diag_, HKT_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_hkt_store_chan_id_BRI : store channel ID IE

					INPUT :
						- pr 			= primitive ID,
						- pref_excl_	= preferred channel,
						- chan_sel_		= channel selection,
			*/

#define Isdn_hkt_store_chan_id_BRI(pr, pref_excl_, chan_sel_) 			\
		Set_offset_hkt	(pr,		chan_id);							\
		Set_val_hkt		(chan_id,	int_type,	INT_TYPE_BRI);			\
		Set_val_hkt		(chan_id,	int_id,		BYTE_VAL_NIL);			\
		Set_val_hkt		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_hkt		(chan_id,	chan_sel,	chan_sel_);				\
		Set_val_hkt		(chan_id,	int_id_val,	BYTE_VAL_NIL);			\
		Set_val_hkt		(chan_id,	nb_map,		BYTE_VAL_NIL);			\
		Set_str_hkt		(chan_id,	chan_nb,	P_NIL,		0)


			/*
				 Isdn_hkt_store_chan_id_PRI : store channel ID IE

					INPUT :
						- pr 			= primitive ID,
						- int_id_		= interface id,
						- pref_excl_	= preferred channel,
						- chan_sel_		= channel selection,
						- int_id_val_	= interface id value,
						- nb_map_		= channel nb / mapping,
						- p_chan_nb_	= channel number.
			*/

#define Isdn_hkt_store_chan_id_PRI(pr, int_id_, pref_excl_, chan_sel_, int_id_val_, nb_map_, p_chan_nb_) \
		Set_offset_hkt	(pr,		chan_id);							\
		Set_val_hkt		(chan_id,	int_type,	INT_TYPE_PRI);			\
		Set_val_hkt		(chan_id,	int_id,		int_id_);				\
		Set_val_hkt		(chan_id,	pref_excl,	pref_excl_);			\
		Set_val_hkt		(chan_id,	chan_sel,	chan_sel_);				\
		Set_val_hkt		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_hkt		(chan_id,	nb_map,		nb_map_);				\
		Set_str_hkt		(chan_id,	chan_nb,	p_chan_nb_,		HKT_MX_SZ_CHAN_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_display : display IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_hkt_store_display(pr,	p_text)										\
		Set_offset_hkt	(pr,		display);										\
		Set_str_hkt		(display,	text,	p_text,	HKT_MX_SZ_DISPLAY+1)


/*-------------------------------------------------------------------------*/

            /*
				Isdn_hkt_store_feature_act : store feature activation IE

                    INPUT :
                        - pr                = primitive ID,
						- feature_id_       = feature identifier,
			*/

#define Isdn_hkt_store_feature_act(pr, feature_id_)  \
		Set_offset_hkt  (pr,            feature_act);                   \
		Set_val_hkt     (feature_act,   feature_id,     feature_id_);   \
		Set_next_ie_hkt (feature_act)


#if EQUIPMENT == NT2

			/*
				Isdn_hkt_store_feature_ind : store feature indication IE

					INPUT :
						- pr                = primitive ID,
						- feature_id_       = feature identifier,
						- status_ind_       = status indicator.
			*/

#define Isdn_hkt_store_feature_ind(pr, feature_id_, status_ind_) \
		Set_offset_hkt  (pr,            feature_ind);                               \
		Set_val_hkt     (feature_ind,   feature_id,     feature_id_);               \
		Set_val_hkt     (feature_ind,   status_ind,     status_ind_);               \
		Set_next_ie_hkt (feature_ind)

#endif

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_hlc : high layer compatibility for
										non-CCITT coding standard

					INPUT :
						- pr		= primitive ID,
						- tele      = teleservice,
						- ext_tele	= extended teleservice.
			*/

#define Isdn_hkt_store_hlc(pr, tele, ext_tele)								\
		Set_offset_hkt	(pr,	hlc);										\
		Set_val_hkt		(hlc,	teleservice,		tele);					\
		Set_val_hkt		(hlc,	ext_teleservice,	ext_tele);				\
		Set_next_ie_hkt	(hlc)

#if EQUIPMENT == NT2

/*-------------------------------------------------------------------------*/
			/*

				Isdn_ni1_store_information_rq : information_rq IE

					INPUT :
						- pr            = primitive ID,
						- info_ind_     = information indicator

			*/

#define Isdn_hkt_store_information_rq(pr, info_ind_)    \
		Set_offset_hkt  (pr,                information_rq);            \
		Set_val_hkt     (information_rq,    info_ind,   info_ind);      \
		Set_next_ie_hkt (information_rq)

#endif
/*-------------------------------------------------------------------------*/
			/*
				Isdn_hkt_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_hkt_store_keypad(pr,p_text)										\
		Set_offset_hkt	(pr,		keypad);										\
		Set_str_hkt		(keypad,	text,	p_text,	HKT_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_hkt_store_llc : low layer compatibility

			   First definition : in one part :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- structure_	= structure,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_hkt_store_llc(pr, trf_cap_, out_neg, structure_, protocol_id_1_,	syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	hdr_, multi_frame_,	op_mode_, lli_negot_, assign_, stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	option_2_, protocol_id_3_, option_3_) \
		Set_offset_hkt	(pr,	llc);										\
		Set_val_hkt		(llc,	trf_cap,		trf_cap_);					\
		Set_val_hkt		(llc,	out_band_neg,	out_neg);					\
		Set_val_hkt		(llc,	structure,		structure_);				\
		Set_val_hkt		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_hkt		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_hkt		(llc,	negotiation,	negotiation_);				\
		Set_val_hkt		(llc,	user_rate,		user_rate_);				\
		Set_val_hkt		(llc,	inter_rate,		inter_rate_);				\
		Set_val_hkt		(llc,	nic_tx,			nic_tx_);					\
		Set_val_hkt		(llc,	nic_rx,			nic_rx_);					\
		Set_val_hkt		(llc,	fc_tx,			fc_tx_);					\
		Set_val_hkt		(llc,	fc_rx,			fc_rx_);					\
		Set_val_hkt		(llc,	hdr,			hdr_);						\
		Set_val_hkt		(llc,	multi_frame,	multi_frame_);				\
		Set_val_hkt		(llc,	op_mode,		op_mode_);					\
		Set_val_hkt		(llc,	lli_negot,		lli_negot_);				\
		Set_val_hkt		(llc,	assign,			assign_);					\
		Set_val_hkt		(llc,	stop_bit,		stop_bit_);					\
		Set_val_hkt		(llc,	data_bit,		data_bit_);					\
		Set_val_hkt		(llc,	parity,			parity_);					\
		Set_val_hkt		(llc,	duplex,			duplex_);					\
		Set_val_hkt		(llc,	modem,			modem_);					\
		Set_val_hkt		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_hkt		(llc,	option_2,		option_2_);					\
		Set_val_hkt		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_val_hkt		(llc,	option_3,		option_3_);					\
		Set_next_ie_hkt	(llc)



			/*--------------------------------------------*/


			/*
			   Isdn_hkt_store_llc : low layer compatibility

			   Second definition : DIVIDED IN 2 PARTS for compilers which
			   do not accept so many parameters in macros :

					Isdn_hkt_store_llc_1_4 : octet 1 to octet 4 included,

						INPUT :
							- pr			= primitive ID,
							- trf_cap_		= information transfer capability,
							- out_neg		= out band negotiation,
							- structure_	= structure,

					Isdn_hkt_store_llc_5_7 : octet 5 to octet 7 included,

						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- option_2_		= optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_		= optional layer 3 protocol information.
			*/

#define Isdn_hkt_store_llc_1_4(pr, trf_cap_, out_neg, structure_)\
		Set_offset_hkt	(pr,	llc);										\
		Set_val_hkt		(llc,	trf_cap,		trf_cap_);					\
		Set_val_hkt		(llc,	out_band_neg,	out_neg);					\
		Set_val_hkt		(llc,	structure,		structure_);				\

#define Isdn_hkt_store_llc_5_7(protocol_id_1_,	syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	hdr_, multi_frame_,	op_mode_, lli_negot_, assign_, stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	option_2_, protocol_id_3_, option_3_) \
		Set_val_hkt		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_hkt		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_hkt		(llc,	negotiation,	negotiation_);				\
		Set_val_hkt		(llc,	user_rate,		user_rate_);				\
		Set_val_hkt		(llc,	inter_rate,		inter_rate_);				\
		Set_val_hkt		(llc,	nic_tx,			nic_tx_);					\
		Set_val_hkt		(llc,	nic_rx,			nic_rx_);					\
		Set_val_hkt		(llc,	fc_tx,			fc_tx_);					\
		Set_val_hkt		(llc,	fc_rx,			fc_rx_);					\
		Set_val_hkt		(llc,	hdr,			hdr_);						\
		Set_val_hkt		(llc,	multi_frame,	multi_frame_);				\
		Set_val_hkt		(llc,	op_mode,		op_mode_);					\
		Set_val_hkt		(llc,	lli_negot,		lli_negot_);				\
		Set_val_hkt		(llc,	assign,			assign_);					\
		Set_val_hkt		(llc,	stop_bit,		stop_bit_);					\
		Set_val_hkt		(llc,	data_bit,		data_bit_);					\
		Set_val_hkt		(llc,	parity,			parity_);					\
		Set_val_hkt		(llc,	duplex,			duplex_);					\
		Set_val_hkt		(llc,	modem,			modem_);					\
		Set_val_hkt		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_hkt		(llc,	option_2,		option_2_);					\
		Set_val_hkt		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_val_hkt		(llc,	option_3,		option_3_);					\
		Set_next_ie_hkt	(llc)


			/*--------------------------------------------*/


			/*
			   Isdn_hkt_store_llc_V110 : low layer compatibility for
											V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- structure_	= structure,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_hkt_store_llc_V110(pr, trf_cap_, out_neg, structure_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_hkt_store_llc_1_4(pr,	trf_cap_, out_neg_, structure_);			\
		Isdn_hkt_store_llc_5_7(PROTOCOL_ID_1_V110,	syn_asyn_,	negotiation_,	\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		fc_tx_,			fc_rx_,				\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,						\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							BYTE_VAL_NIL,	protocol_id_3_,	BYTE_VAL_NIL)


			/*--------------------------------------------*/


			/*
			   Isdn_hkt_store_llc_V120 : low layer compatibility for
											V120 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- structure_	= structure,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_hkt_store_llc_V120(pr, trf_cap_, out_neg, structure_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_hkt_store_llc_1_4(pr,	trf_cap_,	out_neg, structure_);\
		Isdn_hkt_store_llc_5_7(PROTOCOL_ID_1_V120,								\
							syn_asyn_,		negotiation_,	user_rate_,			\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	hdr_,				\
							multi_frame_,	op_mode_,		lli_negot_,			\
							assign_,						stop_bit_,			\
							data_bit_,		parity_,		duplex_,			\
							modem_,			protocol_id_2_, BYTE_VAL_NIL,		\
							protocol_id_3_,	BYTE_VAL_NIL)


/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_notif_ind : notification indicator

					INPUT :
						- pr	= primitive ID,
						- descr	= description.

			*/

#define Isdn_hkt_store_notif_ind(pr, descr)										\
		Set_offset_hkt	(pr,		notif_ind);										\
		Set_val_hkt		(notif_ind,	notif_descr,	descr);							\
		Set_next_ie_hkt	(notif_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_progress_ind : progress indicator

					INPUT :
						- pr				= primitive ID,
						- progress_loc_		= location,
						- progress_descr_	= description.

			*/

#define Isdn_hkt_store_progress_ind(pr, progress_loc_, progress_descr_) \
		Set_offset_hkt	(pr,			progress_ind);								\
		Set_val_hkt		(progress_ind,	progress_loc,	progress_loc_);				\
		Set_val_hkt		(progress_ind,	progress_descr,	progress_descr_);			\
		Set_next_ie_hkt	(progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_hkt_store_restart_ind(pr, class_)									\
		Set_offset_hkt	(pr,			restart_ind);								\
		Set_val_hkt		(restart_ind,	restart_class,	class_);					\
		Set_next_ie_hkt	(restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_sending_complete : sending complete

					INPUT :
						- pr		= primitive ID,

			*/

#define Isdn_hkt_store_sending_complete(pr)	\
		Set_offset_hkt	(pr,				sending_complete)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_signal : signal message

					INPUT :
						- pr			= primitive ID,

			*/

#define Isdn_hkt_store_signal(pr)\
		Set_offset_hkt	(pr,		signal);										\
		Set_next_ie_hkt	(signal)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_hkt_store_uui : user to user information IE

					INPUT :
						- pr				= primitive ID,
						- p_text 			= address of the user info.
			*/

#define Isdn_hkt_store_uui(pr, p_text)							\
		Set_offset_hkt	(pr,	uui);												\
		Set_str_hkt		(uui, 	text,	p_text,	HKT_MX_SZ_UUI+1)

/*EOF*/

