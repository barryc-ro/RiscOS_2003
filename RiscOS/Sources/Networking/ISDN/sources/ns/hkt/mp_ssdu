
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.hkt
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	hkt_bc_ra_ssdu				(Void_parm);
	uchar	hkt_chan_id_ssdu			(Void_parm);
	uchar	hkt_chan_id_chan_nb_ssdu	(Void_parm);
	uchar	hkt_llc_ra_ssdu				(Void_parm);

#endif

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
			(Ordered alphabetically)
		*/



			/* BC : bearer capabilities */

D_START	(HKT_P_BC)
		D_TABL		(TRF_CAP)
		D_TABL		(TRF_RATE)
		D_TABL		(STRUCT)
		D_TABX		(PROTOCOL_1)
D_END (P_BC_1)

START	(HKT_P_BC)
		TABL	(HKT_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
		TABL	(HKT_T_TRF_RATE,			&i_bc[0].trf_rate)
		TABL	(HKT_T_STRUCTURE,			&i_bc[0].structure)
		TABX	(HKT_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_1,	&i_bc[0].protocol_id_1)
END	(hkt_bc_ra_ssdu)

		/* V110 */

D_START	(HKT_P_BC_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(SKIP_V120_INFO)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_TABL		(V110_DUPLEX)
			D_ANY_VAL	(V110_MODEM)
D_END (ENDIF_V110)

START	(HKT_P_BC_V110)
			TABL		(HKT_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL		(HKT_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL		(HKT_T_USER_RATE,			&i_bc[0].user_rate)
			TABL		(HKT_T_INTER_RATE,			&i_bc[0].inter_rate)
			TABL		(HKT_T_NIC_TX,				&i_bc[0].tx_nic)
			TABL		(HKT_T_NIC_RX,				&i_bc[0].rx_nic)
			TABL		(HKT_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
			TABL		(HKT_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
			PAD			(5)
			TABL		(HKT_T_STOP_BIT,			&i_bc[0].stop_bit)
			TABL		(HKT_T_DATA_BIT,			&i_bc[0].data_bit)
			TABL		(HKT_T_PARITY,				&i_bc[0].parity)
			TABL		(HKT_T_DUPLEX,				&i_bc[0].duplex)
			ANY_VAL		(							&i_bc[0].modem)
END	(0)

D_START	(HKT_P_BC_V120)
			D_TABL		(V120_SYN_ASYN)
			D_TABL		(V120_NEGOTIATION)
			D_TABL		(V120_USER_RATE)
			D_PAD		(SKIP_V110_INFO)
			D_TABL		(V120_HDR)
			D_TABL		(V120_MULTI_FRAME)
			D_TABL		(V120_OP_MODE)
			D_TABL		(V120_LLI)
			D_TABL		(V120_ASSIGN)
			D_TABL		(V120_STOP_BIT)
			D_TABL		(V120_DATA_BIT)
			D_TABL		(V120_PARITY)
			D_TABL		(V120_DUPLEX)
			D_ANY_VAL	(V120_MODEM)
D_END   (ENDIF_V120)

START	(HKT_P_BC_V120)

			TABL	(HKT_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL	(HKT_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL	(HKT_T_USER_RATE,			&i_bc[0].user_rate)
			PAD		(5)
			TABL	(HKT_T_HEADER,				&i_bc[0].hdr)
			TABL	(HKT_T_MULTI_FRAME,			&i_bc[0].multi_frame)
			TABL	(HKT_T_OP_MODE,				&i_bc[0].op_mode)
			TABL	(HKT_T_LLI,					&i_bc[0].lli)
			TABL	(HKT_T_ASSIGN,				&i_bc[0].assign)
			TABL	(HKT_T_STOP_BIT,			&i_bc[0].stop_bit)
			TABL	(HKT_T_DATA_BIT,			&i_bc[0].data_bit)
			TABL	(HKT_T_PARITY,				&i_bc[0].parity)
			TABL	(HKT_T_DUPLEX,				&i_bc[0].duplex)
			ANY_VAL	(							&i_bc[0].modem)
END		(0)

D_START	(HKT_P_BC_NON_CCITT)
			D_TABL		(BC_NON_CCITT_SYN_ASYN)
			D_TABL		(BC_NON_CCITT_NEGOTIATION)
			D_TABL		(BC_NON_CCITT_USER_RATE)
			D_PAD		(SKIP_V110_V120_INFO)
D_END	(ENDIF_NON_CCITT)

START	(HKT_P_BC_NON_CCITT)
			TABL	(HKT_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL	(HKT_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL	(HKT_T_USER_RATE,			&i_bc[0].user_rate)
			PAD		(15)
END		(0)

		/* other rate adaption */

D_START	(HKT_P_BC_PAD)
			D_PAD		(_SKIP_PROTO_ID_1_INFO)
D_END (END_PAD_RA)

START	(HKT_P_BC_PAD)
			PAD			(18)
END (0)

D_START	(HKT_P_BC_2)
		D_TABX	(PROTOCOL_ID_2)
		D_TABX	(PROTOCOL_ID_3)
D_END	(BC_E)

START	(HKT_P_BC_2)
		TABX	(HKT_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_2,	&i_bc[0].protocol_id_2)
		TABX	(HKT_TX_PROTOCOL_ID_BC,		&i_bc[0].layer_id_3,	&i_bc[0].protocol_id_3)
END 	(0)

/*-------------------------------------------------------------------------*/

			/* CALL_ID : call identity */

D_START	(HKT_P_CALL_ID)
	D_TEXT (CALL_ID_VAL_)
D_END (CALL_ID_END)

START	(HKT_P_CALL_ID)
	TEXT (1,HKT_MX_SZ_CALL_ID,ANY_CHAR,	&i_call_id[0].lgth,(uchar **)&i_call_id[0].p_val)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(HKT_P_CALLED_NB)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (P_CALLED_NB_END)

START	(HKT_P_CALLED_NB)
	TEXT (1,HKT_MX_SZ_CALLED_NB,DIGIT,	&i_called_nb[0].lgth,	(uchar **)&i_called_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLED_SUB_ADD : called party sub address */

D_START	(HKT_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLED_SUB_ADD_END)

START	(HKT_P_CALLED_SUB_ADD)
	TABL (HKT_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
	TABL (HKT_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
	TEXT (1,HKT_MX_SZ_CALLED_SUB_ADD,DIGIT,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(HKT_P_CALLING_NB)
	D_TABL (TYPE_N)
	D_TABL (PLAN_N)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_)
	D_TEXT (DIGIT_N)
D_END (P_CALLING_NB_N_END)

START	(HKT_P_CALLING_NB)
	TABL (HKT_T_CALLING_NB_TYPE,	&i_calling_nb[0].nb_type)
	TABL (HKT_T_CALLING_NB_PLAN,	&i_calling_nb[0].plan_id)
	TABL (HKT_T_CALLING_NB_PRES_U_N,&i_calling_nb[0].pres)
	TABL (HKT_T_SCREEN_IND,			&i_calling_nb[0].screen_ind)
	TEXT (0,HKT_MX_SZ_CALLING_NB,ANY_CHAR,	&i_calling_nb[0].lgth,	(uchar **)&i_calling_nb[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(HKT_P_CALLING_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLING_SUB_ADD_END)

START	(HKT_P_CALLING_SUB_ADD)
	TABL (HKT_T_SUB_ADD_TYPE,		&i_calling_sub_add[0].sub_add_type)
	TABL (HKT_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
	TEXT (1,HKT_MX_SZ_CALLING_SUB_ADD,DIGIT,&i_calling_sub_add[0].lgth,	(uchar **)&i_calling_sub_add[0].p_add)
END (0)

/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(HKT_P_CAUSE)
	D_TABL (LOCATION)
	D_TABL (OM_CLASS)
	D_TABX (VAL_)
	D_TEXT	(DIAGNOSTICS)
D_END (CAUSE_END)

START	(HKT_P_CAUSE)
	TABL (HKT_T_LOCATION,					&i_cause[0].cause_loc)
	TABL (HKT_T_C_C,						&i_cause[0].cause_class)
	TABX (HKT_TX_C_V,						&i_cause[0].cause_class, &i_cause[0].cause_val)
	TEXT (0,HKT_MX_SZ_CAUSE_DIAG,ANY_CHAR,	&i_cause[0].diag_lgth,(uchar **)&i_cause[0].p_diagnostic)
END (0)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

D_START	(HKT_P_CHAN_ID)
	D_TABL			(INT_TY)
	D_TABL			(INT_ID)
	D_TABL			(PREF_EXCL)
	D_TABX			(SEL)

	D_IF_VAL	(INT_BRI)
		D_ANY_VAL		(INT_ID_VAL)
		D_TABL			(CHAN_NB_MAP)
		D_FUNCTION		(_CHAN_NB_)
		D_TEXT			(CHANNEL_NUMBERS)
	D_ELSE		(NO_INT_BRI)
		D_PAD	(CODING_CHAN_TYPE_TEXT)
	D_END_IF	(BRI_INT)

D_END (P_CHAN_ID_END)

START	(HKT_P_CHAN_ID)
	TABL	(HKT_T_INT_TYPE,		&i_chan_id[0].int_type)
	TABL	(HKT_T_CHAN_INT,		&i_chan_id[0].int_id)
	TABL	(HKT_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABX 	(HKT_TX_CHAN_SEL,		&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)

	IF_VAL	(&i_chan_id[0].int_type, NE, INT_TYPE_BRI)
		ANY_VAL	(						&i_chan_id[0].int_id_val)
		TABL	(HKT_T_NB_MAP,		   	&i_chan_id[0].nb_map)

		FUNCTION(hkt_chan_id_chan_nb_ssdu)
		TEXT	(1,HKT_MX_SZ_CHAN_ID,ANY_CHAR,&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)

	ELSE	()
		PAD (3)
	END_IF	()

END (hkt_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

			/* DISPLAY : display facility */

D_START	(HKT_P_DISPLAY)
	D_TEXT (DISPLAY_INFO)
D_END (DISPLAY_END)

START	(HKT_P_DISPLAY)
	TEXT	(0,HKT_MX_SZ_DISPLAY,ANY_CHAR,		&i_display[0].lgth,	(uchar **)&i_display[0].p_info)
END			(0)

/*-------------------------------------------------------------------------*/

			/* Feature activation (FEATURE_ACT) */

D_START	(HKT_P_FEATURE_ACT)
	D_ANY_VAL	(FEATURE_ID_1)
D_END			(E_FEATURE_ACT)

START	(HKT_P_FEATURE_ACT)
	ANY_VAL	(&i_feature_act[0].feature_nb)
END			(0)

/*-------------------------------------------------------------------------*/

			/* Feature indication (FEATURE_IND) */

D_START	(HKT_P_FEATURE_IND)
	D_ANY_VAL	(FEATURE_ID_1)
	D_TABL		(STATUS_IND)
D_END			(E_FEATURE_IND)

START	(HKT_P_FEATURE_IND)
	ANY_VAL	(&i_feature_ind[0].feature_nb)
	TABL	(HKT_T_STATUS_IND,	&i_feature_ind[0].status_ind)
END			(0)

/*-------------------------------------------------------------------------*/

			/* Information request (INFORMATION_RQ) */

D_START	(HKT_P_INFORMATION_RQ)
	D_TABL	(INFO_IND)
D_END		(E_INFORMATION_RQ)

START	(HKT_P_INFORMATION_RQ)
	TABL	(HKT_T_INFO_IND,	&i_information_rq[0].info_ind)
END			(0)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(HKT_P_HLC)
	D_TABL		(TELESERVICE)
	D_TABL		(EXT_TELESERVICE)
D_END (HLC_END)

START	(HKT_P_HLC)
	TABL	(HKT_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
	TABL	(HKT_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
END (0)

/*-------------------------------------------------------------------------*/

			/* KEYPAD : keypad facility */

D_START	(HKT_P_KEYPAD)
	D_TEXT (KEYPAD_INFO)
D_END (KEYPAD_END)

START	(HKT_P_KEYPAD)
	TEXT (0,HKT_MX_SZ_KEYPAD,DIGIT_E,		&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END (0)

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(HKT_P_LLC)
		D_TABL		(TRF_CAP)
		D_TABL		(OUT_BAND_NEG)
		D_TABL		(STRUCT)
		D_TABL		(PROTOCOL_1)
		D_TABL		(SYN_ASYN)
		D_TABL		(NEGOTIATION)
		D_TABL		(USER_RATE)
D_END	(P_LLC_1)

START	(HKT_P_LLC)
		TABL	(HKT_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
		TABL	(HKT_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
		TABL	(HKT_T_STRUCTURE,				&i_llc[0].structure)
		TABL	(HKT_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
		TABL	(HKT_T_SYN_ASYN,				&i_llc[0].syn_asyn)
		TABL	(HKT_T_NEGOTIATION,				&i_llc[0].in_band_neg)
		TABL	(HKT_T_USER_RATE,				&i_llc[0].user_rate)
END		(hkt_llc_ra_ssdu)

		/* V110 */

D_START	(HKT_P_LLC_V110)
		D_TABL		(V110_INTER_RATE)
		D_TABL		(V110_TX_NIC)
		D_TABL		(V110_RX_NIC)
		D_TABL		(V110_TX_FC)
		D_TABL		(V110_RX_FC)
		D_PAD		(PAD_9_14)
		D_TABL		(V110_STOP_BIT)
		D_TABL		(V110_DATA_BIT)
		D_TABL		(V110_PARITY)
		D_TABL		(V110_DUPLEX)
		D_ANY_VAL	(V110_MODEM)
D_END (ENDIF_V110)

START	(HKT_P_LLC_V110)
		TABL		(HKT_T_INTER_RATE,			&i_llc[0].inter_rate)
		TABL		(HKT_T_NIC_TX,				&i_llc[0].tx_nic)
		TABL		(HKT_T_NIC_RX,				&i_llc[0].rx_nic)
		TABL		(HKT_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
		TABL		(HKT_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
		PAD			(5)
		TABL		(HKT_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(HKT_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(HKT_T_PARITY,				&i_llc[0].parity)
		TABL		(HKT_T_DUPLEX,				&i_llc[0].duplex)
		ANY_VAL		(							&i_llc[0].modem)
END	(0)

D_START	(HKT_P_LLC_V120)
		D_PAD		(PAD_4_8)
		D_TABL		(V120_HDR)
		D_TABL		(V120_MULTI_FRAME)
		D_TABL		(V120_OP_MODE)
		D_TABL		(V120_LLI)
		D_TABL		(V120_ASSIGN)
		D_TABL		(V120_STOP_BIT)
		D_TABL		(V120_DATA_BIT)
		D_TABL		(V120_PARITY)
		D_TABL		(V120_DUPLEX)
		D_ANY_VAL	(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(HKT_P_LLC_V120)
		PAD			(5)
		TABL		(HKT_T_HEADER,				&i_llc[0].hdr)
		TABL		(HKT_T_MULTI_FRAME,			&i_llc[0].multi_frame)
		TABL		(HKT_T_OP_MODE,				&i_llc[0].op_mode)
		TABL		(HKT_T_LLI,					&i_llc[0].lli)
		TABL		(HKT_T_ASSIGN,				&i_llc[0].assign)
		TABL		(HKT_T_STOP_BIT,			&i_llc[0].stop_bit)
		TABL		(HKT_T_DATA_BIT,			&i_llc[0].data_bit)
		TABL		(HKT_T_PARITY,				&i_llc[0].parity)
		TABL		(HKT_T_DUPLEX,				&i_llc[0].duplex)
		ANY_VAL		(							&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(HKT_P_LLC_PAD)
		D_PAD		(PAD_1_19)
D_END (END_PAD_RA)

START	(HKT_P_LLC_PAD)
		PAD			(15)
END (0)

D_START	(HKT_P_LLC_2)
		D_TABL		(PROTOCOL_ID_2)
		D_ANY_VAL	(OPT_2)
		D_TABL		(PROTOCOL_ID_3)
		D_ANY_VAL	(OPT_3)
D_END (LLC_E)

START	(HKT_P_LLC_2)
		TABL    	(HKT_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
		ANY_VAL		(&i_llc[0].option_2)
		TABL		(HKT_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
		ANY_VAL		(&i_llc[0].option_3)
END (0)

/*-------------------------------------------------------------------------*/

			/* NOTIF_IND : notification indicator */

D_START	(HKT_P_NOTIF_IND)
	D_TABL	(DESCR)
D_END		(NOTIF_IND_E)

START	(HKT_P_NOTIF_IND)
	TABL	(HKT_T_NOTIF_IND_DESCR,		&i_notif_ind[0].notif_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(HKT_P_PROGRESS_IND)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(HKT_P_PROGRESS_IND)
	TABL	(HKT_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	TABL	(HKT_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START		(HKT_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(HKT_P_RESTART_IND)
	TABL	(HKT_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

/*-------------------------------------------------------------------------*/

			/* SIGNAL : Signal */

D_START	(HKT_P_SIGNAL)
D_END		(SIGNAL_E)

START	(HKT_P_SIGNAL)
END			(0)


/*-------------------------------------------------------------------------*/

			/* UUI : user to user information */

D_START		(HKT_P_UUI)
	D_TEXT	(UUI_INFO)
D_END		(UUI_END)

START	(HKT_P_UUI)
	TEXT	(0,HKT_MX_SZ_UUI,ANY_CHAR, 	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END			(0)

/*EOF*/

