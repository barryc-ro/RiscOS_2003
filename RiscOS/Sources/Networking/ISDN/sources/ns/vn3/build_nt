
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_nt.vn3
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        build_pdu_ns - implements the simulation of the network side
 *                       for a call connection.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            vn3_net_build_pdu_ns - implements the simulation of the network side
					for a call connection.

Usage           vn3_net_build_pdu_ns ()

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void vn3_net_build_pdu_ns ()
{

		/* Message builder */

	switch (Tolower (g_spdu_id[0])) {

			/* Call establishment spdu event */

		case DA_ALERT :
				*p_info++ = ALERT;

				 p_ie_o = p_info;

#			if EQUIPMENT == NT2

				if (Na_fct == FG_NT_TE) {
					 Shift_to (CODESET_6, NON_LOCKING_SHIFT);
					*p_info++ = USER_MODE;
					*p_info++ = 1;
					*p_info++ = 0x80;

				} else {

					*p_info++ = DISPLAY;
					 Put_text_with_length ("*** alert ***");
				}

#			else

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** alert ***");

#			endif

				break;


		case DA_CALL_PROC :
				*p_info++ = CALL_PROC;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** proc ***");

				break;


		case DA_CONN :
				*p_info++ = CONN;


#			if EQUIPMENT == NT2

				if (Na_fct == FG_NT_TE) {
					 Shift_to (CODESET_6, NON_LOCKING_SHIFT);
					*p_info++ = USER_MODE;
					*p_info++ = 1;
					*p_info++ = 0x80;

				} else {

					*p_info++ = DISPLAY;
					 Put_text_with_length ("*** alert ***");
				}
#endif
				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** conn ***");

				*p_info++ = UUI;
				*p_info++ = 15;
				*p_info++ = 0x04;	/* IA5 */
				 Put_text ("** UUI conn **");
				break;


		case DA_CONN_ACK :
				*p_info++ = CONN_ACK;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** conn-ack ***");
				break;

		case DA_STATUS_ENQ :
				*p_info++ = STATUS_ENQ;
				break;

		case DA_SETUP :
				*p_info++ = SETUP;

				*p_info++ = BC;
				*p_info++ = 2;
				*p_info++ = 0x88;
				*p_info++ = 0x90;

#if 0
				*p_info++ = BC;
				*p_info++ = 2;
				*p_info++ = 0x88;
				*p_info++ = 0x90;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 3;
				*p_info++ = 0x0a;
				*p_info++ = 0;
				*p_info++ = 0x80;
#endif

#			if EQUIPMENT == NT2

				if (Na_fct == FG_NT_TE) {
					*p_info++ = CHAN_ID;
					*p_info++ = 1;
					*p_info++ = 0x89;
				}

#			endif

				*p_info++ = PROGRESS_IND;
				*p_info++ = 2;
				*p_info++ = 0x80;
				*p_info++ = 0x83;

#			if EQUIPMENT == NT2

				if (Na_fct == FG_NT_TE) {
					 Shift_to (CODESET_6, NON_LOCKING_SHIFT);
					*p_info++ = USER_MODE;
					*p_info++ = 1;
					*p_info++ = 0x80;
				}

#			endif

				 p_ie_o = p_info;

				*p_info++ = CALLING_NB;
				*p_info++ = 3;
				*p_info++ = 0x89;
				 Put_text ("33");

				*p_info++ = CALLING_NB;
				*p_info++ = 12;
				*p_info++ = 0x21;
				*p_info++ = 0x80;
				 Put_text ("0987654321");

				*p_info++ = CALLED_NB;
				*p_info++ = 11;
				*p_info++ = 0xd0;
				 Put_text ("1234567890");

				*p_info++ = CALLED_SUB_ADD;
				*p_info++ = 6;
				*p_info++ = 0x80;
				*p_info++ = 0x50;
				 Put_text ("4321");

#if 0
				*p_info++ = LLC;
				*p_info++ = 13;
				*p_info++ = 0x88;
				*p_info++ = 0x10;
				*p_info++ = 0x10;
				*p_info++ = 0x90;
				*p_info++ = 0x21;
				*p_info++ = 0x02;
				*p_info++ = 0x1A;
				*p_info++ = 0x5b;
				*p_info++ = 0xc0;
				*p_info++ = 0x46;
				*p_info++ = 0x80;
				*p_info++ = 0x66;
				*p_info++ = 0x80;

				*p_info++ = HLC;
				*p_info++ = 4;
				*p_info++ = 0x11;
				*p_info++ = 0x00;
				*p_info++ = 0x80;
				*p_info++ = 0x80;
#endif
				*p_info++ = HLC;
				*p_info++ = 2;
				*p_info++ = 0xc1;
				*p_info++ = 0x80;


				*p_info++ = UUI;
				*p_info++ = 16;
				*p_info++ = 0x04;	/* IA5 */
				 Put_text ("** UUI setup **");

				break;

		case DA_SETUP_ACK :
				*p_info++ = SETUP_ACK;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** setupack ***");
				break;

		case DA_ROUTED_CALL :
				*p_info++ = ROUTED_CALL;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0xf2;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** routed ***");
				break;

			/* Call information phase spdu event */

		case DA_RES :
				*p_info++ = RES;
				break;

		case DA_RES_ACK :
				*p_info++ = RES_ACK;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** res-ack ***");
				break;

		case DA_RES_REJ :
				*p_info++ = RES_REJ;
				break;

		case DA_SUSP :
				*p_info++ = SUSP;
				break;

		case DA_SUSP_ACK :
				*p_info++ = SUSP_ACK;
				break;

		case DA_SUSP_REJ :
				*p_info++ = SUSP_REJ;
				break;

		case DA_USER_INFO :
				*p_info++ = USER_INFO;

				 p_ie_o = p_info;

				 Shift_to (CODESET_6, NON_LOCKING_SHIFT);

				*p_info++ = USER_FAC;
				*p_info++ = 7;
				*p_info++ = 0x41;	/* protocol discr messaging */
				*p_info++ = 0xff;
				*p_info++ = 0xcc;
				*p_info++ = 0xff;
				*p_info++ = 0xcc;
				*p_info++ = 0xff;
				*p_info++ = 0xcc;

				*p_info++ = G_8 (1,0,1,0,0,0,0,0);	/* MORE DATA */

				*p_info++ = UUI;
				*p_info++ = 20;
				*p_info++ = 0x04;	/* IA5 */
				 Put_text ("** UUI user-info **");

				break;


			case DA_NOTIFY :
				*p_info++ = NOTIFY;

				 p_ie_m = p_info;

				*p_info++ = NOTIF_IND;
				*p_info++ = 1;
				*p_info++ = 0x80;	/* 1+ USER_SUSPENDED */

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** notify ***");

				break;


			/* Clear call spdu event */

		case DA_DISC :
				*p_info++ = DISC;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x90;

				 p_ie_o = p_info;

				*p_info++ = SPF_FAC;
				*p_info++ = 7;
				*p_info++ = 0;
				 Put_text ("24*");
				*p_info++ = 1;
				*p_info++ = 2;
				*p_info++ = 3;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** disc ***");

				break;


		case DA_REL :
				*p_info++ = REL;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x95;

				 p_ie_o = p_info;

#		if EQUIPMENT == TE

				*p_info++ = SPF_FAC;
				*p_info++ = 7;
				*p_info++ = 0;
				 Put_text ("24*");
				*p_info++ = 1;
				*p_info++ = 2;
				*p_info++ = 3;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** rel  ***");

#		else
				if (Na_fct == FG_NT_TE) {
					 Shift_to (CODESET_6, NON_LOCKING_SHIFT);
					*p_info++ = USER_MODE;
					*p_info++ = 1;
					*p_info++ = 0x80;
				}

				*p_info++ = UUI;
				*p_info++ = 18;
				*p_info++ = 0x04;
				 Put_text ("** UUI release **");

#		endif

				break;


		case DA_REL_COMP :
				*p_info++ = REL_COMP;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x95;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** rel-comp ***");

				break;


			/* Miscellaneous spdu event */

		case DA_CON_CON :
				break;

			/* Facility acknowledgement */

		case DA_FAC_ACK :
				*p_info++ = FT_FAC_ACK;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** fac-ack ***");

				break;

			/* Facility reject */

		case DA_FAC_REJ :
				*p_info++ = FT_FAC_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x90;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** fac-rej ***");

				break;

		case DA_INFO :
				*p_info++ = INFO;

				*p_info++ = SPF_FAC;
				*p_info++ = 7;
				*p_info++ = 0;
				 Put_text ("23*");
				*p_info++ = 1;
				*p_info++ = 2;
				*p_info++ = 3;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** info ***");
				break;


			/* Registration */

		case DA_REG :
				*p_info++ = REG;

				 p_ie_o = p_info;

				*p_info++ = SPF_FAC;
				*p_info++ = 6;
				*p_info++ = 0;
				 Put_text ("*321#");

				 Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = USER_MODE;
				*p_info++ = 1;
				*p_info++ = 0x80;
				break;

			/* Registration acknowlegdement */

		case DA_REG_ACK :
				*p_info++ = REG_ACK;

				 p_ie_m = p_info;

				*p_info++ = SPF_FAC;
				*p_info++ = 14;
				*p_info++ = 0;
				 Put_text ("21*123456789#");

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** reg-ack ***");

				break;

			/* Registration reject */

		case DA_REG_REJ :
				*p_info++ = FT_REG_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x90;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** reg-rej ***");

				break;

		case DA_STATUS :
				*p_info++ = STATUS;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x90;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x90;

				*p_info++ = CALL_STATE;
				*p_info++ = 1;
				*p_info++ = 2;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				 Put_text_with_length ("*** status ***");

				break;

		case DA_SPDU_ID_UNKNOWN:
				*p_info++ = SPDU_ID_UNKNOWN;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x90;

				break;

		case '1' :
				Automata_1 ();
				break;

		case DA_HEXA_CODING :
				mg_ns_hexa ();		/* Hexadecimal coding */
				break;

		 default :
				return;

	}

}

/*EOF*/
