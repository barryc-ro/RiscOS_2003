
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.vn3
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	vn3_chan_id_ssdu				(Void_parm);

#	if NS_SPF_FACILITY == ON
		uchar	vn3_spf_fac_ssdu			(Void_parm);
#	endif

	uchar	vn3_llc_protocol_1_ssdu			(Void_parm);
	uchar	vn3_llc_ra_ssdu					(Void_parm);
	uchar	vn3_llc_ssdu_check_modem		(Void_parm);
	uchar	vn3_uui_protocol_ssdu			(Void_parm);
	uchar	vn3_user_fac_protocol_ssdu		(Void_parm);

#endif

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
		*/

/*------------ BC : bearer capabilities */

D_START	(VN3_SSDU_BC)
	D_TABL (BC_CAP_TRF_CAP)
	D_TABL (BC_CAP_TRF_MODE)
	D_TABL (BC_PROTOCOL_ID_1)
D_END(BC_CAP_END)

START	(VN3_SSDU_BC)
	TABL (VN3_T_TRF_CAP,		&i_bc[0].trf_cap)
	TABL (VN3_T_TRF_MODE,		&i_bc[0].trf_mode)
	TABL (VN3_T_PROTOCOL_ID_1,	&i_bc[0].protocol_id_1)
END (0)

/*------------ CAUSE : Cause */

D_START	(VN3_SSDU_CAUSE)
	D_TABL	(_CAUSE_CLASS_PR)
	D_TABX	(_CAUSE_VAL_PR)
	D_TABL	(_CAUSE_LOCATION)
	D_TEXT	(DIAGNOSTICS)
D_END (CAUSE_END)

START	(VN3_SSDU_CAUSE)
	TABL	(VN3_T_C_C,							&i_cause[0].cause_class)
	TABX	(VN3_TX_C_V,						&i_cause[0].cause_class, &i_cause[0].cause_val)
	TABL	(VN3_T_CAUSE_LOCATION,				&i_cause[0].cause_loc)
	TEXT	(0,VN3_MX_SZ_CAUSE_DIAG,ANY_CHAR,	&i_cause[0].diag_lgth,(uchar **)&i_cause[0].p_diagnostic)
END (0)

/*------------ CALL_ID : call identity */

D_START	(VN3_SSDU_CALL_ID)
	D_TEXT (CALL_ID_VAL_)
D_END (CALL_ID_END)

START	(VN3_SSDU_CALL_ID)
	TEXT (1,VN3_MX_SZ_CALL_ID,ANY_CHAR,					&i_call_id[0].lgth,(uchar **)&i_call_id[0].p_val)
END (0)

/*------------ CHAN_ID : channel identification */

D_START	(VN3_SSDU_CHAN_ID)
	D_FUNCTION (CHAN_ID_1)
	D_TABL (CHAN_ID_INT_TYPE)
	D_TABL (CHAN_ID_PREF_EXCL)
	D_TABX (CHAN_ID_CHAN_SEL)
	D_TABL (CHAN_ID_CHAN_NUMBER)
D_END (SSDU_CHAN_ID_END)

START	(VN3_SSDU_CHAN_ID)
	FUNCTION (vn3_chan_id_ssdu)
	TABL (VN3_T_INT_TYPE,					&i_chan_id[0].int_type)
	TABL (VN3_T_CHAN_PREF_EXCL,				&i_chan_id[0].pref_excl)
	TABX (VN3_TX_CHAN_SEL,					&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)
	TABL (VN3_T_CHAN_NUMBER,				&i_chan_id[0].chan_nb)
END (0)

#if NS_SPF_FACILITY == ON

	/*------------ SPF_FAC : network specific facilities */

	D_START	(VN3_SSDU_SPF_FAC)
		D_TABL (SPF_FAC_ACTION)
		D_TABL (SPF_FAC_CODE)
		D_FUNCTION (SPF_FAC_FCT)
	D_END (SPF_FAC_END)

	START	(VN3_SSDU_SPF_FAC)
		TABL (VN3_T_SPF_FAC_ACTION,				&i_spf_fac[0].Action)
		TABL (VN3_T_SPF_FAC_CODE, 				&i_spf_fac[0].Code)
		FUNCTION (vn3_spf_fac_ssdu)
	END (0)

#endif

/*------------ DISPLAY : display facility */

D_START	(VN3_SSDU_DISPLAY)
	D_TEXT (DISPLAY_INFO)
D_END (DISPLAY_END)

START	(VN3_SSDU_DISPLAY)
	TEXT (0,VN3_MX_SZ_DISPLAY,ANY_CHAR,		&i_display[0].lgth,(uchar **)&i_display[0].p_info)
END (0)

/*------------ KEYPAD : keypad facility */

D_START	(VN3_SSDU_KEYPAD)
	D_TEXT (KEYPAD_INFO)
D_END (KEYPAD_END)

START	(VN3_SSDU_KEYPAD)
	TEXT (0,VN3_MX_SZ_KEYPAD,DIGIT_E,		&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END (0)

/*------------ CALLING_NB : calling party number */

D_START	(VN3_SSDU_CALLING_NB)
	D_TABL (CALLING_NB_1_TYPE)
	D_TABL (CALLING_NB_1_PLAN)
	D_TABL (CALLING_PRES)
	D_TABL (CALLING_NB_1_SCREEN_IND)
	D_TEXT (CALLING_NB_1_DIGIT)
D_END (SSDU_CALLING_NB_1_END)

START	(VN3_SSDU_CALLING_NB)
	TABL (VN3_T_CALLING_NB_TYPE,			&i_calling_nb[0].nb_type)
	TABL (VN3_T_CALLING_NB_PLAN,			&i_calling_nb[0].plan_id)
	TABL (VN3_T_CALLING_NB_PRES,			&i_calling_nb[0].pres)
	TABL (VN3_T_SCREEN_IND,					&i_calling_nb[0].screen_ind)
	TEXT (0,VN3_MX_SZ_CALLING_NB,DIGIT,		&i_calling_nb[0].lgth,(uchar **)&i_calling_nb[0].p_add)
END (0)

/*------------ CALLING_SUB_ADD : calling party sub adddress */

D_START	(VN3_SSDU_CALLING_SUB_ADD)
	D_TABL (CALLING_NB_NBERING_TYPE)
	D_TEXT (CALLING_SUB_ADD_U_DIGIT)
D_END (SSDU_CALLING_SUB_ADD_END)

START	(VN3_SSDU_CALLING_SUB_ADD)
	TABL (VN3_T_SUB_ADD_TYPE,				&i_calling_sub_add[0].sub_add_type)
	TEXT (1,VN3_MX_SZ_CALLING_SUB_ADD,DIGIT,&i_calling_sub_add[0].lgth,(uchar **)&i_calling_sub_add[0].p_add)
END (0)

/*------------ CALLED_NB : called party number */

D_START	(VN3_SSDU_CALLED_NB)
	D_TABL (CALLED_NB_NBERING_TYPE)
	D_TABL (CALLED_NB_NBERING_PLAN_ID)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (SSDU_CALLED_NB_END)

START	(VN3_SSDU_CALLED_NB)
	TABL (VN3_T_CALLED_NB_TYPE,				&i_called_nb[0].nb_type)
	TABL (VN3_T_CALLED_NB_PLAN,				&i_called_nb[0].plan_id)
	TEXT (1,VN3_MX_SZ_CALLED_NB,DIGIT,		&i_called_nb[0].lgth,(uchar **)&i_called_nb[0].p_add)
END (0)

/*------------ CALLED_SUB_ADD : called party sub address */

D_START	(VN3_SSDU_CALLED_SUB_ADD)
	D_TABL (CALLED_SUB_ADD_NBERING_TYPE)
	D_TEXT (CALLED_SUB_ADD_DIGIT)
D_END (SSDU_CALLED_SUB_ADD_END)

START	(VN3_SSDU_CALLED_SUB_ADD)
	TABL (VN3_T_SUB_ADD_TYPE,				&i_called_sub_add[0].sub_add_type)
	TEXT (1,VN3_MX_SZ_CALLED_SUB_ADD,DIGIT,	&i_called_sub_add[0].lgth,(uchar **)&i_called_sub_add[0].p_add)
END (0)

/*------------ LLC : low layer compatibility */

D_START	(VN3_SSDU_LLC)
		D_TABL (LLC_U_TRF_CAP)
		D_TABL (LLC_U_TRF_MODE)
		D_TABL (LLC_U_NEGOT)
		D_TABX (LLC_U_TRF_RATE)
		D_TABL (LLC_U_STRUCTURE)
		D_TABX (LLC_U_DEST_RATE)
D_END (LLC_U_END)

START	(VN3_SSDU_LLC)
		TABL (VN3_T_TRF_CAP,				&i_llc[0].trf_cap)
		TABL (VN3_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABL (VN3_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
		TABX (VN3_TX_TRF_RATE,				&i_llc[0].trf_mode,		&i_llc[0].trf_rate)
		TABL (VN3_T_STRUCTURE,				&i_llc[0].structure)
		TABX (VN3_TX_TRF_RATE,				&i_llc[0].trf_mode,		&i_llc[0].dest_rate)
END (vn3_llc_protocol_1_ssdu)

D_START	(VN3_SSDU_PROTOCOL_1)
		D_TABL (LLC_U_PROTOCOL_ID_1)
D_END (PROTOCOL_END)

START	(VN3_SSDU_PROTOCOL_1)
		TABL (VN3_T_PROTOCOL_ID_1,			&i_llc[0].protocol_id_1)
END (vn3_llc_ra_ssdu)

D_START	(VN3_SSDU_PROTOCOL_1_PAD)
		D_PAD (PROTOCOL_1_PAD)
D_END	  (SSDU_PROTOCOL_1_PAD_END)

START	(VN3_SSDU_PROTOCOL_1_PAD)
		PAD (1)
END	  (0)

D_START	(VN3_SSDU_V110)
			D_TABL	(V110_U_SYN_ASYN)
			D_TABL	(V110_U_NEGOTIATION)
			D_TABL	(V110_U_USER_RATE)
			D_TABL	(V110_U_INTER_RATE)
			D_TABL	(V110_U_TX_NIC)
			D_TABL	(V110_U_RX_NIC)
			D_TABL	(V110_U_TX_FC)
			D_TABL	(V110_U_RX_FC)
			D_TABL	(V110_U_STOP_BIT)
			D_TABL	(V110_U_DATA_BIT)
			D_TABL	(V110_U_PARITY)
			D_TABL	(V110_U_DUPLEX)
			D_FUNCTION	(V110_U_MODEM)
D_END		(V110_END)

START	(VN3_SSDU_V110)
			TABL	(VN3_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(VN3_T_NEGOTIATION,		&i_llc[0].in_band_neg)
			TABL	(VN3_T_USER_RATE,		&i_llc[0].user_rate)
			TABL	(VN3_T_INTER_RATE,		&i_llc[0].inter_rate)
			TABL	(VN3_T_NIC,				&i_llc[0].tx_nic)
			TABL	(VN3_T_NIC,				&i_llc[0].rx_nic)
			TABL	(VN3_T_FLOW_CONTROL_TX,	&i_llc[0].tx_fc)
			TABL	(VN3_T_FLOW_CONTROL_RX,	&i_llc[0].rx_fc)
			TABL	(VN3_T_STOP_BIT,		&i_llc[0].stop_bit)
			TABL	(VN3_T_DATA_BIT,		&i_llc[0].data_bit)
			TABL	(VN3_T_PARITY,			&i_llc[0].parity)
			TABL	(VN3_T_DUPLEX,			&i_llc[0].duplex)
			FUNCTION(vn3_llc_ssdu_check_modem)
END		(0)

D_START	(VN3_SSDU_V120)
			D_TABL	(V120_U_SYN_ASYN)
			D_TABL	(V120_U_NEGOTIATION)
			D_TABL	(V120_U_USER_RATE)
			D_PAD	(V120_5)
			D_TABL	(V110_U_STOP_BIT)
			D_TABL	(V110_U_DATA_BIT)
			D_TABL	(V110_U_PARITY)
			D_TABL	(V120_U_DUPLEX)
			D_FUNCTION(V120_U_MODEM)
D_END	(V120_END)

START	(VN3_SSDU_V120)
			TABL	(VN3_T_SYN_ASYN,		&i_llc[0].syn_asyn)
			TABL	(VN3_T_NEGOTIATION,		&i_llc[0].in_band_neg)
			TABL	(VN3_T_USER_RATE,		&i_llc[0].user_rate)
			PAD		(5)
			TABL	(VN3_T_STOP_BIT,		&i_llc[0].stop_bit)
			TABL	(VN3_T_DATA_BIT,		&i_llc[0].data_bit)
			TABL	(VN3_T_PARITY,			&i_llc[0].parity)
			TABL	(VN3_T_DUPLEX,			&i_llc[0].duplex)
			FUNCTION(vn3_llc_ssdu_check_modem)
END		(0)

D_START	(VN3_SSDU_LLC_PAD)
			D_PAD (LLC_PAD_1_13)
D_END (SSDU_LLC_PAD_END)

START	(VN3_SSDU_LLC_PAD)
			PAD (13)
END (0)

D_START	(VN3_SSDU_LLC_2)
			D_TABL	(LLC_U_PROTOCOL_ID_2)
			D_TABL	(LLC_U_PROTOCOL_ID_3)
D_END (LLC_U_END_2)

START	(VN3_SSDU_LLC_2)
			TABL    (VN3_T_PROTOCOL_ID_2,	&i_llc[0].protocol_id_2)
			TABL	(VN3_T_PROTOCOL_ID_3,	&i_llc[0].protocol_id_3)
END (0)

/*------------ HLC : high layer compatibility */

D_START	(VN3_SSDU_HLC)

		D_TABL	(HLC_CODING_STD)
		D_TABL	(HLC_INTERPRETATION)
		D_TABX	(HLC_TELESERVICE)

D_END	(END_SPDU)


START	(VN3_SSDU_HLC)

		TABL	(VN3_T_CODING_STD,			&i_hlc[0].coding_std)
		TABL	(VN3_T_INTERPRETATION,		&i_hlc[0].interpretation)
		TABX	(VN3_TX_TELESERVICE, 		&i_hlc[0].coding_std, &i_hlc[0].teleservice)

END		(0)

/*------------ UUI : user to user information */

D_START	(VN3_SSDU_UUI)
	D_FUNCTION	(UUI_PROTOCOL)
	D_TABL 		(PROTOCOL_DISCRIMINATOR)
	D_TEXT 		(UUI_INFO)
D_END (UUI_END)

START	(VN3_SSDU_UUI)
	FUNCTION	(vn3_uui_protocol_ssdu)
	TABL 		(VN3_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)
	TEXT 		(0, VN3_MX_SZ_UUI, ANY_CHAR,&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END (0)

/*------------ USER_FAC : user to user facility */

D_START	(VN3_SSDU_USER_FAC)
	D_FUNCTION	(USER_FAC_PROTOCOL)
	D_TABL 		(PROTOCOL_DISCRIMINATOR)
	D_TEXT 		(USER_FAC_INFO)
D_END (USER_FAC_END)

START	(VN3_SSDU_USER_FAC)
	FUNCTION	(vn3_user_fac_protocol_ssdu)
	TABL 		(VN3_T_USER_PROTOCOL_DISCR,			&i_user_fac[0].protocol_discr)
	TEXT 		(0, VN3_MX_SZ_USER_FAC, ANY_OCTET,	&i_user_fac[0].lgth, (uchar **)&i_user_fac[0].p_descr)
END (0)

/*-------------------------------------------------------------------------*/

			/* CONGEST_LEVEL : congestion level */

D_START	(VN3_SSDU_CONGEST_LEVEL)
	D_TABL (LEVEL)
D_END	(CONGEST_LEVEL_E)

START	(VN3_SSDU_CONGEST_LEVEL)
	TABL (VN3_T_CONGEST_LEVEL,		&i_congest_level[0].congest_level)
END		(0)


/*-------------------------------------------------------------------------*/

			/* DATE_TIME : date/time */

D_START	(VN3_SSDU_DATE_TIME)
	D_ANY_VAL	(YEAR_)
	D_ANY_VAL	(MONTH_)
	D_ANY_VAL	(DAY_)
	D_ANY_VAL	(HOUR_)
	D_ANY_VAL	(MINUTE_)
	D_ANY_VAL	(SECOND_)
D_END			(END_SSDU)

START	(VN3_SSDU_DATE_TIME)
	ANY_VAL		(&i_date_time[0].year)
	ANY_VAL		(&i_date_time[0].month)
	ANY_VAL		(&i_date_time[0].day)
	ANY_VAL		(&i_date_time[0].hour)
	ANY_VAL		(&i_date_time[0].minute)
	ANY_VAL		(&i_date_time[0].second)
END				(0)

/*-------------------------------------------------------------------------*/

			/* FACILITY : etsi facility */

D_START	(VN3_SSDU_FACILITY)
D_END	(END_FACILITY)

START	(VN3_SSDU_FACILITY)
	/*
	 * To be done
	 */
END (0)


/*-------------------------------------------------------------------------*/

			/* NOTIF_IND : notification indicator */

D_START	(VN3_SSDU_NOTIF_IND)
	D_TABL	(DESCR)
D_END		(NOTIF_IND_E)

START	(VN3_SSDU_NOTIF_IND)
	TABL	(VN3_T_NOTIF_IND_DESCR,		&i_notif_ind[0].notif_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(VN3_SSDU_PROGRESS_IND)
	D_TABL	(CODING_STD)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(VN3_SSDU_PROGRESS_IND)
	TABL	(VN3_T_CODING_STD,				&i_progress_ind[0].coding_std)
	TABL	(VN3_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	TABL	(VN3_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
END			(0)

/*-------------------------------------------------------------------------*/

			/* REDIR_NB: Redirection number */

D_START	(VN3_SSDU_REDIR_NB)
	D_TABL  	(TYPE)
	D_PAD		(_RES)
	D_TABL		(_PRES)
	D_ANY_VAL	(_CAUSE)
	D_PAD		(_RESERVED)
	D_TEXT  	(DIGIT_)
D_END   (END_SSDU)

START	(VN3_SSDU_REDIR_NB)
	TABL    (VN3_T_REDIR_NB_TYPE,	&i_redir_nb[0].nb_type)
	PAD		(1)
	TABL	(VN3_T_REDIR_NB_PRES,	&i_redir_nb[0].pres)
	ANY_VAL	(						&i_redir_nb[0].reason)
	PAD		(1)
	TEXT    (0,VN3_MX_SZ_REDIR_NB,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END     (0)

/*-------------------------------------------------------------------------*/

			/* RESTART_IND : Restart indicator */

D_START		(VN3_SSDU_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(VN3_SSDU_RESTART_IND)
	TABL	(VN3_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

/*-------------------------------------------------------------------------*/

			/* SIGNAL : Signal */

D_START		(VN3_SSDU_SIGNAL)
	D_TABL	(VAL_)
D_END		(SIGNAL_E)

START		(VN3_SSDU_SIGNAL)
	TABL	(VN3_T_SIGNAL_VAL,		&i_signal[0].val)
END			(0)

/*EOF*/

