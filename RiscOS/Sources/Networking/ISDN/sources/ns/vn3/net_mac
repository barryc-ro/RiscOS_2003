
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.vn3
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS VN3 macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


			/*
			   MACROs and DECLARATIONS used to access the Network
			   Signalling entity (NS) from the Call Control entity (CC).
			*/


/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_vn3_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_vn3_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(vn3_,pr), p_off)
#define Isdn_init_vn3_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_vn3(pr,ie)					Get_ie 			(Paste(vn3_,pr), Paste (vn3_, ie))
#define	Isdn_get_val_vn3(pr,ie,fld)			Isdn_get_val	(Paste(vn3_,pr), Paste (vn3_, ie), fld)
#define Isdn_p_str_vn3(pr,ie,fld)			Isdn_p_str		(Paste(vn3_,pr), Paste (vn3_, ie), fld)
#define	Isdn_lgth_str_vn3(pr,ie,fld)		Isdn_lgth_str	(Paste(vn3_,pr), Paste (vn3_, ie), fld)
#define	Isdn_mx_lgth_str_vn3(pr,ie,fld)		Isdn_mx_lgth_str(Paste(vn3_,pr), Paste (vn3_, ie), fld)
#define	P_start_val_ns_vn3(pr,ie)			P_start_val_ns	(Paste(vn3_,pr), Paste (vn3_, ie))
#define	P_val_ns_vn3(ie)					P_val_ns		(Paste(vn3_,ie))
#define Set_offset_vn3(pr,ie)				Set_offset		(Paste(vn3_,pr),Paste(vn3_,ie))
#define	Set_next_ie_vn3(ie)					Set_next_ie		(Paste(vn3_,ie))
#define	Set_val_vn3(ie,fld,val)				Set_val			(Paste(vn3_,ie), fld, val)
#define Set_str_vn3(ie, lv, p_str, mx_sz)	Set_str			(Paste(vn3_,ie), lv, p_str, mx_sz)
#define Set_mem_vn3(ie, lv, p_mem, sz)		Set_mem			(Paste(vn3_,ie), lv, p_mem, sz)
#define	Set_val_nil_vn3(ie)					Set_val_nil		(Paste(vn3_,ie))
#define Set_to_next_ie_instance_vn3(pr,ie)	Set_to_next_ie_instance (Paste(vn3_,pr), Paste (vn3_, ie))
#define Get_remaining_ie_instance_nb_vn3(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(vn3_,pr), Paste (vn3_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_vn3	ns_offset_t vn3_message_header;
#else
#	define Message_header_offset_vn3
#endif

/*-------------------------------------------------------------------------*/

		/* Structures of the offset area of each primitive interface */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

		/* NS_CONN_RQ/IN */

struct off_ns_vn3_te_conn_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_sending_complete;		/* sending complete */
	ns_offset_t vn3_bc;						/* bearer capability */
	ns_offset_t vn3_chan_id;				/* channel ID */
	ns_offset_t vn3_facility;				/* vn3 facility */
	ns_offset_t vn3_progress_ind;			/* progress indicator */
	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_signal;					/* signal */
	ns_offset_t vn3_calling_nb;				/* calling number (from network) */
	ns_offset_t vn3_calling_sub_add;		/* calling subaddress */
	ns_offset_t vn3_called_nb;				/* called number */
	ns_offset_t vn3_called_sub_add;			/* called subaddress */
	ns_offset_t vn3_redir_nb;				/* redirection number */
	ns_offset_t vn3_llc;					/* low layer capability */
	ns_offset_t vn3_hlc;					/* high layer compatibility */
	ns_offset_t vn3_uui;					/* user to user information */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn3_spf_fac;			/* network specific facility */
#	endif
};

typedef struct off_ns_vn3_te_conn_in		off_ns_vn3_conn_rq;
typedef struct off_ns_vn3_te_conn_in		off_ns_vn3_conn_in;

		/* NS_CONN_RS/CO */

struct off_ns_vn3_te_conn_co {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_chan_id;				/* channel ID */
	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_user_fac;				/* user to user facility */
	ns_offset_t vn3_uui;					/* user to user information */
};

typedef struct off_ns_vn3_te_conn_co		off_ns_vn3_conn_rs;
typedef struct off_ns_vn3_te_conn_co		off_ns_vn3_conn_co;

		/* NS_CLEAR_RQ/IN */

struct off_ns_vn3_te_clear_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_cause;					/* cause */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn3_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_user_fac;				/* user to user facility */
	ns_offset_t vn3_uui;					/* user to user information */
	ns_offset_t vn3_called_nb;				/* called number */
	ns_offset_t vn3_called_sub_add;			/* called sub-address */
};

typedef struct off_ns_vn3_te_clear_in		off_ns_vn3_clear_rq;
typedef struct off_ns_vn3_te_clear_in		off_ns_vn3_clear_in;

		/* NS_CLEAR_RS/CO */

struct off_ns_vn3_te_clear_co {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_cause;					/* cause */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn3_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_uui;					/* user to user information */
	ns_offset_t vn3_called_nb;				/* called number */
	ns_offset_t vn3_called_sub_add;			/* called sub-address */
};

typedef struct off_ns_vn3_te_clear_co		off_ns_vn3_clear_rs;
typedef struct off_ns_vn3_te_clear_co		off_ns_vn3_clear_co;

		/* NS_SETUP_ACK_RQ/IN */

struct off_ns_vn3_te_setup_ack_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_chan_id;				/* channel ID */
	ns_offset_t vn3_display;				/* display */
};

typedef struct off_ns_vn3_te_setup_ack_in	off_ns_vn3_setup_ack_rq;
typedef struct off_ns_vn3_te_setup_ack_in	off_ns_vn3_setup_ack_in;

		/* NS_CALL_PROC_RQ/IN */

struct off_ns_vn3_te_call_proc_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_chan_id;				/* channel ID */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn3_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn3_display;				/* display */
};

typedef struct off_ns_vn3_te_call_proc_in	off_ns_vn3_call_proc_rq;
typedef struct off_ns_vn3_te_call_proc_in	off_ns_vn3_call_proc_in;

		/* NS_ALERT_RQ/IN */

struct off_ns_vn3_te_alert_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_facility;				/* facility type ETSI */
	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_uui;					/* user to user information */
	ns_offset_t vn3_cause;					/* cause */
};

typedef struct off_ns_vn3_te_alert_in		off_ns_vn3_alert_rq;
typedef struct off_ns_vn3_te_alert_in		off_ns_vn3_alert_in;

		/* NS_ROUTED_CALL_RQ/IN */

struct off_ns_vn3_te_routed_call_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_cause;					/* cause */
	ns_offset_t vn3_display;				/* display */
};

typedef struct off_ns_vn3_te_routed_call_in	off_ns_vn3_routed_call_in;
typedef struct off_ns_vn3_te_routed_call_in	off_ns_vn3_routed_call_rq;

		/* NS_INFO_RQ/IN */

struct off_ns_vn3_te_info_in {
	Message_header_offset_vn3				/* message header parameters */

#	if NS_SPF_FACILITY == ON
		ns_offset_t vn3_spf_fac;			/* network specific facility */
#	endif

	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_signal;					/* signal */
	ns_offset_t vn3_sending_complete;		/* sending complete */
	ns_offset_t vn3_keypad;					/* keypad */
	ns_offset_t vn3_called_nb;				/* called number */
};

typedef struct off_ns_vn3_te_info_in		off_ns_vn3_info_rq;
typedef struct off_ns_vn3_te_info_in		off_ns_vn3_info_in;

		/* NS_USER_INFO_RQ/IN */

struct off_ns_vn3_te_user_info_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_user_fac;				/* user to user facility */
	ns_offset_t vn3_uui;					/* user to user information */
	ns_offset_t vn3_more_data;				/* more data */
};

typedef struct off_ns_vn3_te_user_info_in	off_ns_vn3_user_info_rq;
typedef struct off_ns_vn3_te_user_info_in	off_ns_vn3_user_info_in;

		/* NS_SUSPEND_RQ/IN/RS/CO */

struct off_ns_vn3_te_suspend_co {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_cause;					/* cause */
	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_call_id;				/* call identity */
};

typedef struct off_ns_vn3_te_suspend_co		off_ns_vn3_suspend_rq;
typedef struct off_ns_vn3_te_suspend_co		off_ns_vn3_suspend_in;
typedef struct off_ns_vn3_te_suspend_co		off_ns_vn3_suspend_rs;
typedef struct off_ns_vn3_te_suspend_co		off_ns_vn3_suspend_co;

		/* NS_RESUME_RQ/IN/RS/CO */

struct off_ns_vn3_te_resume_co {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_chan_id;				/* channel ID */
	ns_offset_t vn3_cause;					/* cause */
	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_call_id;				/* call identity */
};

typedef struct off_ns_vn3_te_resume_co		off_ns_vn3_resume_rq;
typedef struct off_ns_vn3_te_resume_co		off_ns_vn3_resume_in;
typedef struct off_ns_vn3_te_resume_co		off_ns_vn3_resume_rs;
typedef struct off_ns_vn3_te_resume_co		off_ns_vn3_resume_co;

#if NS_SPF_FACILITY == ON

			/* NS_SPF_FACILITY_RQ/IN/RS/CO */

	struct off_ns_vn3_te_spf_facility_co {
		Message_header_offset_vn3			/* message header parameters */
		ns_offset_t vn3_cause;				/* cause */
		ns_offset_t vn3_display;			/* display */
		ns_offset_t vn3_spf_fac;			/* specific facility */
	};

	typedef struct off_ns_vn3_te_spf_facility_co	off_ns_vn3_spf_facility_rq;
	typedef struct off_ns_vn3_te_spf_facility_co	off_ns_vn3_spf_facility_in;
	typedef struct off_ns_vn3_te_spf_facility_co	off_ns_vn3_spf_facility_rs;
	typedef struct off_ns_vn3_te_spf_facility_co	off_ns_vn3_spf_facility_co;

			/* NS_SPF_REGISTRATION_RQ/IN/RS/CO */

	struct off_ns_vn3_te_spf_reg_co {
		Message_header_offset_vn3			/* message header parameters */
		ns_offset_t vn3_cause;				/* cause */
		ns_offset_t vn3_display;			/* display */
		ns_offset_t vn3_spf_fac;			/* network specific facility */
	};

	typedef struct off_ns_vn3_te_spf_reg_co off_ns_vn3_spf_reg_rq;
	typedef struct off_ns_vn3_te_spf_reg_co off_ns_vn3_spf_reg_in;
	typedef struct off_ns_vn3_te_spf_reg_co off_ns_vn3_spf_reg_rs;
	typedef struct off_ns_vn3_te_spf_reg_co off_ns_vn3_spf_reg_co;

#endif

		/* NS_CONGEST_CONTROL_RQ/IN */

struct off_ns_vn3_te_con_con_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_congest_level;			/* congestion level */
	ns_offset_t vn3_cause;					/* cause */
	ns_offset_t vn3_display;				/* display */
};

typedef struct off_ns_vn3_te_con_con_in		off_ns_vn3_con_con_rq;
typedef struct off_ns_vn3_te_con_con_in		off_ns_vn3_con_con_in;

		/* NS_NOTIFY_RQ/IN */

struct off_ns_vn3_te_notify_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_notif_ind;				/* notify indicator */
	ns_offset_t vn3_display;				/* display */
};

typedef struct off_ns_vn3_te_notify_in		off_ns_vn3_notify_rq;
typedef struct off_ns_vn3_te_notify_in		off_ns_vn3_notify_in;

		/* NS_RESTART_RQ/IN/RS/CO */

struct off_ns_vn3_te_restart_in {
	Message_header_offset_vn3				/* message header parameters */
	ns_offset_t vn3_chan_id;				/* channel identifier */
	ns_offset_t vn3_display;				/* display */
	ns_offset_t vn3_restart_ind;			/* restart indicator */
};

typedef struct off_ns_vn3_te_restart_in		off_ns_vn3_restart_rq;
typedef struct off_ns_vn3_te_restart_in		off_ns_vn3_restart_in;
typedef struct off_ns_vn3_te_restart_in		off_ns_vn3_restart_rs;
typedef struct off_ns_vn3_te_restart_in		off_ns_vn3_restart_co;


			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
			/*                                              */
			/*	Type definitions for NT side point of view  */
			/*                                              */
			/*  (these definitions are here only for        */
			/*  compatibility with older versions because   */
			/*  the description of the messages are now     */
			/*  IDENTICAL for TE and NT sides).             */
			/*                                              */
			/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/


#if EQUIPMENT == NT2

typedef struct off_ns_vn3_te_conn_in		off_ns_vn3_net_conn_rq;
typedef struct off_ns_vn3_te_conn_in		off_ns_vn3_net_conn_in;
typedef struct off_ns_vn3_te_conn_co		off_ns_vn3_net_conn_rs;
typedef struct off_ns_vn3_te_conn_co		off_ns_vn3_net_conn_co;

typedef struct off_ns_vn3_te_clear_in		off_ns_vn3_net_clear_rq;
typedef struct off_ns_vn3_te_clear_in		off_ns_vn3_net_clear_in;
typedef struct off_ns_vn3_te_clear_co		off_ns_vn3_net_clear_rs;
typedef struct off_ns_vn3_te_clear_co		off_ns_vn3_net_clear_co;

typedef struct off_ns_vn3_te_setup_ack_in	off_ns_vn3_net_setup_ack_rq;
typedef struct off_ns_vn3_te_setup_ack_in	off_ns_vn3_net_setup_ack_in;

typedef struct off_ns_vn3_te_call_proc_in	off_ns_vn3_net_call_proc_rq;
typedef struct off_ns_vn3_te_call_proc_in	off_ns_vn3_net_call_proc_in;

typedef struct off_ns_vn3_te_alert_in		off_ns_vn3_net_alert_rq;
typedef struct off_ns_vn3_te_alert_in		off_ns_vn3_net_alert_in;

typedef struct off_ns_vn3_te_info_in		off_ns_vn3_net_info_rq;
typedef struct off_ns_vn3_te_info_in		off_ns_vn3_net_info_in;

typedef struct off_ns_vn3_te_user_info_in	off_ns_vn3_net_user_info_rq;
typedef struct off_ns_vn3_te_user_info_in	off_ns_vn3_net_user_info_in;

typedef struct off_ns_vn3_te_suspend_co		off_ns_vn3_net_suspend_in;
typedef struct off_ns_vn3_te_suspend_co		off_ns_vn3_net_suspend_rs;

typedef struct off_ns_vn3_te_resume_co		off_ns_vn3_net_resume_in;
typedef struct off_ns_vn3_te_resume_co		off_ns_vn3_net_resume_rs;

#if NS_SPF_FACILITY == ON

	typedef struct off_ns_vn3_te_spf_facility_co	off_ns_vn3_net_spf_facility_in;
	typedef struct off_ns_vn3_te_spf_facility_co	off_ns_vn3_net_spf_facility_rs;

	typedef struct off_ns_vn3_te_spf_reg_co off_ns_vn3_net_spf_reg_in;
	typedef struct off_ns_vn3_te_spf_reg_co off_ns_vn3_net_spf_reg_rs;

#endif

typedef struct off_ns_vn3_te_con_con_in		off_ns_vn3_net_con_con_rq;

typedef struct off_ns_vn3_te_notify_in		off_ns_vn3_net_notify_in;
typedef struct off_ns_vn3_te_notify_in		off_ns_vn3_net_notify_rq;

typedef struct off_ns_vn3_te_restart_in		off_ns_vn3_net_restart_rq;
typedef struct off_ns_vn3_te_restart_in		off_ns_vn3_net_restart_in;
typedef struct off_ns_vn3_te_restart_in		off_ns_vn3_net_restart_rs;
typedef struct off_ns_vn3_te_restart_in		off_ns_vn3_net_restart_co;

#endif /* NT2 */


		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/

		/* Bearer Capability (BC) */

struct val_ns_vn3_bc {
	Next_instance_offset
	ie_val 		trf_cap;				/* transfer mode transfer capability */
	ie_val 		trf_mode;				/* transfer mode transfer capability */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
};

		/* Call IDentification (CALL_ID) */

struct val_ns_vn3_call_id {
	Next_instance_offset
	ie_array 	value[VN3_MX_SZ_CALL_ID+2];	/* call identity */
};

#if NS_SPF_FACILITY == ON

			/* Network Specific Facility (SPF_FAC) */

	struct val_ns_vn3_spf_fac {
		Next_instance_offset
		ie_val 		action;				/* REQUEST : activate, clear or enquiry
										   INDICATION : transmission, acknowledgment, reject */
		ie_val 		code;				/* facility code */
		uchar		pad[VN3_SPF_FAC_PAD_SIZE];
		long 		charging;			/* charging value */
		ie_array 	nb[VN3_MX_SZ_CALLED_NB+2];	/* called number */
	};

#endif

		/* Called party number (CALLED_NB) */

struct val_ns_vn3_called_nb {
	Next_instance_offset
	ie_val   	nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_array 	nb[VN3_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_vn3_called_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* called subaddress type */
	ie_array 	sub_add[VN3_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_vn3_calling_nb {
	Next_instance_offset
	ie_val  	nb_type;				/* numbering type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[VN3_MX_SZ_CALLING_NB+2];		/* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_vn3_calling_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* calling subaddress type */
	ie_array 	sub_add[VN3_MX_SZ_CALLING_SUB_ADD+2];	/* sub-add information */
};

		/* Cause (CAUSE) */

struct val_ns_vn3_cause {
	Next_instance_offset
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
	ie_val		cause_loc;				/* cause location */
	ie_array	cause_diag[VN3_MX_SZ_CAUSE_DIAG+2];	/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_vn3_chan_id {
	Next_instance_offset
	ie_val		int_type;				/* interface type */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val 		chan_nb;				/* channel number */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_vn3_hlc {
	Next_instance_offset
	ie_val		coding_std;				/* hlc identification coding standard */
	ie_val		interpretation;			/* hlc interpretation */
	ie_val		teleservice;			/* hlc identification */
};

		/* Keypad */

struct val_ns_vn3_keypad {
	Next_instance_offset
	ie_array 	text[VN3_MX_SZ_KEYPAD+2];		/* keypad information */
};

		/* Display */

struct val_ns_vn3_display {
	Next_instance_offset
	ie_array 	text[VN3_MX_SZ_DISPLAY+2];	/* display information */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_vn3_llc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		out_band_neg;			/* out band negotiation */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* origination to destination transfer rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
		ie_val	syn_asyn;				/* synchronous/asynchronous */
		ie_val	negociation;			/* negotiation */
		ie_val	user_rate;				/* user rate */
		ie_val	inter_rate;				/* intermediate rate */
		ie_val	nic_tx;					/* network independent clock on transmission (Tx) */
		ie_val	nic_rx;					/* network independent clock on reception (Rx) */
		ie_val	fc_tx;					/* flow control on transmission (Tx) */
		ie_val	fc_rx;					/* flow control on reception (Rx) */
		ie_val	stop_bit;				/* number of stop bits */
		ie_val	data_bit;				/* number of data bits excluding parity if present */
		ie_val	parity;					/* parity information */
		ie_val	duplex;					/* duplex mode */
		ie_val	modem;					/* modem type */
	ie_val		protocol_id_2;			/* user information layer 2 protocol */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
};

		/* User-to-user information (UUI) */

struct val_ns_vn3_uui {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array	text[VN3_MX_SZ_UUI+2];		/* user information */
};

		/* User to user facility (USER_FAC) */

struct val_ns_vn3_user_fac {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array 	text[VN3_MX_SZ_USER_FAC+1];	/* user to user facility */
};

		/* Congestion level (CONGEST_LEVEL) */

struct val_ns_vn3_congest_level {
	Next_instance_offset
	ie_val		congest_level;				/* congestion level */
};

		/* Date/Time (DATE_TIME) */

struct val_ns_vn3_date_time {
	Next_instance_offset
	ie_val		year;
	ie_val		month;
	ie_val		day;
	ie_val		hour;
	ie_val		minute;
	ie_val		second;
};

		/* Facility (FACILITY) */

struct val_ns_vn3_facility {
	Next_instance_offset
	ie_val      unused;
};

		/* Notification indicator (NOTIF_IND) */

struct val_ns_vn3_notif_ind {
	Next_instance_offset
	ie_val		notif_descr;			/* notification description*/
};


		/* Progress indicator (PROGRESS_IND) */

struct val_ns_vn3_progress_ind {
	Next_instance_offset
	ie_val		coding_std;				/* coding standard */
	ie_val		progress_loc;			/* location */
	ie_val		progress_descr;			/* progress description */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_vn3_restart_ind {
	Next_instance_offset
	ie_val		restart_class;					/* class */
};


		/* Signal (SIGNAL) */

struct val_ns_vn3_signal {
	Next_instance_offset
	ie_val		signal_val;				/* signal value */
};

#if NS_IE_TSP_OUT == ON

			/* Definitions for compilation purpose only */

	struct val_ns_vn3_more_data {
		Next_instance_offset
		ie_val	unused;
	};

	struct val_ns_vn3_sending_complete {
		Next_instance_offset
		ie_val	unused;
	};


#endif

/***************************************************************************/

							/* Information Elements (IE) */


			/*
			   Isdn_vn3_store_bc : store the bearer capability information
								   element :

					INPUT :
						- pr		= primitive ID,
						- trf_cap_	= transfer capability.
						- trf_mode_	= transfer mode.
						- protocol_id_1_= user information layer 1 protocol,
			*/

#define Isdn_vn3_store_bc(pr, trf_cap_, trf_mode_, protocol_id_1_)	\
				Set_offset_vn3	(pr,	bc);						\
				Set_val_vn3		(bc,	trf_cap,		trf_cap_);	\
				Set_val_vn3		(bc,	trf_mode,		trf_mode_);	\
				Set_val_vn3		(bc,	protocol_id_1,	protocol_id_1_);\
				Set_next_ie_vn3	(bc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_bc_speech : speech bearer capability

					INPUT :
						- pr		= primitive ID.
						- trf_mode_	= transfer mode.

			*/

#define Isdn_vn3_store_bc_speech(pr, trf_mode_)						\
				Isdn_vn3_store_bc (pr, TRF_CAP_SPEECH, trf_mode_)


/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_call_id : call ID

					INPUT :
						- pr	= primitive ID,
						- id    = call ID.

			*/


#define Isdn_vn3_store_call_id(pr, id)						\
		Set_offset_vn3	(pr,		call_id);					\
		Set_str_vn3		(call_id,	value,	id,	VN3_MX_SZ_CALL_ID+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_called_nb : called number IE

					INPUT :
						- pr			= primitive ID,
						- nbering_type	= numbering type
						- p_string		= address of the literal string.
			*/

#define Isdn_vn3_store_called_nb(pr, nbering_type, nbering_plan_id, p_string) 	\
		Set_offset_vn3	(pr,		called_nb);										\
		Set_val_vn3		(called_nb,	nb_type,	nbering_type);						\
		Set_val_vn3		(called_nb,	plan_id,	nbering_plan_id);					\
		Set_str_vn3		(called_nb,	nb,			p_string,			VN3_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_called_sub_add : called sub-address IE

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- p_string		= address of the literal string.

			*/

#define Isdn_vn3_store_called_sub_add(pr, sub_add_type_, p_string) 		\
		Set_offset_vn3	(pr,				called_sub_add);				\
		Set_val_vn3		(called_sub_add,	sub_add_type,	sub_add_type_);	\
		Set_str_vn3 	(called_sub_add,	sub_add,		p_string,	VN3_MX_SZ_CALLED_SUB_ADD+1)


/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nbering_type   	= numbering type,
						- nbering_plan_id	= numbering plan ID,
						- pres_				= presentation,
						- screening_ind    	= screening indicator,
						- p_string  		= pointer on the calling number literal string.
			*/

#define Isdn_vn3_store_calling_nb(pr, nbering_type, nbering_plan_id, pres_, screening_ind, p_string) \
		Set_offset_vn3	(pr,			calling_nb);						\
		Set_val_vn3		(calling_nb,	nb_type, 		nbering_type);		\
		Set_val_vn3		(calling_nb,	plan_id, 		nbering_plan_id);	\
		Set_val_vn3		(calling_nb,	pres, 			pres_);				\
		Set_val_vn3		(calling_nb,	screen_ind, 	screening_ind);		\
		Set_str_vn3		(calling_nb,	nb, 			p_string, 			VN3_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_vn3_calling_sub_add : calling sub-address IE

						INPUT :
							- pr			= primitive ID,
							- sub_add_type_	= subaddress type,
							- p_string		= address of the subaddress literal string.

			*/

#define Isdn_vn3_store_calling_sub_add(pr, sub_add_type_, p_string)			\
		Set_offset_vn3	(pr,				calling_sub_add);					\
		Set_val_vn3		(calling_sub_add,	sub_add_type,		sub_add_type_);	\
		Set_str_vn3		(calling_sub_add,	sub_add,			p_string, VN3_MX_SZ_CALLING_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_cause : cause IE

					INPUT :
						- pr	= primitive ID,
						- cl    = cause class,
						- val   = cause value,
						- diag  = cause diagnostic.
						- loc   = cause location.

			*/

#define Isdn_vn3_store_cause(pr, cl, val,  loc, diag)	\
				Set_offset_vn3	(pr,	cause);				\
				Set_val_vn3		(cause,	cause_class,cl);	\
				Set_val_vn3		(cause,	cause_val,	val);	\
				Set_val_vn3		(cause,	cause_loc,	loc);	\
				Set_str_vn3		(cause,	cause_diag,	diag, VN3_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_vn3_store_chan_id : store channel ID IE

					INPUT :
						- pr 		= primitive ID,
						- int_type_	= interface type,
						- pref 		= preferred channel,
						- chan_sel_	= channel selection,
						- chan_nb_	= channel number.
			*/

#define Isdn_vn3_store_chan_id(pr, int_type_, pref, chan_sel_, chan_nb_)	\
				Set_offset_vn3	(pr,		chan_id);				\
				Set_val_vn3		(chan_id,	int_type,	int_type_);		\
				Set_val_vn3		(chan_id,	pref_excl,	pref);		\
				Set_val_vn3		(chan_id,	chan_sel,	chan_sel_);	\
				Set_val_vn3		(chan_id,	chan_nb,	chan_nb_);	\
				Set_next_ie_vn3	(chan_id)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_congest_level: congestion level

					INPUT :
						- pr 			= primitive ID,
						- congest_level_= congestion level.
			*/

#define Isdn_vn3_store_congest_level(pr, congest_level_)				\
		Set_offset_vn3	(pr,			congest_level);						\
		Set_val_vn3		(congest_level,	congest_level,	congest_level_);	\
		Set_next_ie_vn3	(congest_level)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_date_time : date / time

					INPUT :
						- pr= primitive ID,
						- y	= year,
						- mo= month,
						- d = day,
						- h = hour,
						- mi= minute.

			*/

#define Isdn_vn3_store_date_time(pr, y, mo, d, h, mi)							\
		Set_offset_vn3	(pr,		date_time);										\
		Set_val_vn3		(date_time,	year,	y);										\
		Set_val_vn3		(date_time,	month,	mo);									\
		Set_val_vn3		(date_time,	day,	d);										\
		Set_val_vn3		(date_time,	hour,	h);										\
		Set_val_vn3		(date_time,	minute,	mi);									\
		Set_next_ie_vn3	(date_time)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_display : display IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_vn3_store_display(pr,p_text)						\
		Set_offset_vn3	(pr,		display);						\
		Set_str_vn3		(display,	text,	p_text,	VN3_MX_SZ_DISPLAY+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_hlc : high layer compatibility IE

					INPUT :
						- pr			= primitive ID,
						- cod			= coding,
						- inter			= interpretation
						- teleservice_	= teleservice.
			*/

#define Isdn_vn3_store_hlc(pr, cod, inter, teleservice_)				\
				Set_offset_vn3	(pr,	hlc);							\
				Set_val_vn3		(hlc,	coding_std,		cod);			\
				Set_val_vn3		(hlc,	interpretation,	inter);			\
				Set_val_vn3		(hlc,	teleservice,	teleservice_);	\
				Set_next_ie_vn3	(hlc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_spf_fac : store facility

					INPUT :
						- pr 	= primitive ID,
						- val 	= facility value.
			*/

#define Isdn_vn3_store_spf_fac(pr, action_p , code_p, p_string) \
		Set_offset_vn3	(pr,		spf_fac);						\
		Set_val_vn3		(spf_fac,	action,	action_p);				\
		Set_val_vn3		(spf_fac,	code,	code_p);				\
		Set_str_vn3		(spf_fac,	nb,		p_string,	VN3_MX_SZ_CALLED_NB+1)
/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_vn3_store_keypad(pr,p_text)						\
		Set_offset_vn3	(pr,		keypad);						\
		Set_str_vn3		(keypad,	text,	p_text,	VN3_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_vn3_store_llc : low layer compatibility

			   First definition : in one part :

					INPUT :
						- pr			= primitive ID,
						- coding_std_	= coding standard,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- fc_tx_		= flow control on Transmission (Tx),
						- fc_rx_		= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,
			*/

#define Isdn_vn3_store_llc(pr, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_,	protocol_id_1_,	syn_asyn_, negociation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_,	fc_rx_,	stop_bit_, data_bit_, parity_, duplex_,	modem_,	protocol_id_2_,	protocol_id_3_) \
		Set_offset_vn3	(pr,	llc);										\
		Set_val_vn3		(llc,	trf_cap,		trf_cap_);					\
		Set_val_vn3		(llc,	trf_mode,		trf_mode_);					\
		Set_val_vn3		(llc,	out_band_neg,	out_neg);					\
		Set_val_vn3		(llc,	trf_rate,		trf_rate_);					\
		Set_val_vn3		(llc,	structure,		structure_);				\
		Set_val_vn3		(llc,	dest_rate,		dest_rate_);				\
		Set_val_vn3		(llc,	protocol_id_1,	protocol_id_1_);			\
		Set_val_vn3		(llc,	syn_asyn,		syn_asyn_);					\
		Set_val_vn3		(llc,	negociation,	negociation_);				\
		Set_val_vn3		(llc,	user_rate,		user_rate_);				\
		Set_val_vn3		(llc,	inter_rate,		inter_rate_);				\
		Set_val_vn3		(llc,	nic_tx,			nic_tx_);					\
		Set_val_vn3		(llc,	nic_rx,			nic_rx_);					\
		Set_val_vn3		(llc,	fc_tx,			fc_tx_);					\
		Set_val_vn3		(llc,	fc_rx,			fc_rx_);					\
		Set_val_vn3		(llc,	stop_bit,		stop_bit_);					\
		Set_val_vn3		(llc,	data_bit,		data_bit_);					\
		Set_val_vn3		(llc,	parity,			parity_);					\
		Set_val_vn3		(llc,	duplex,			duplex_);					\
		Set_val_vn3		(llc,	modem,			modem_);					\
		Set_val_vn3		(llc,	protocol_id_2,	protocol_id_2_);			\
		Set_val_vn3		(llc,	protocol_id_3,	protocol_id_3_);			\
		Set_next_ie_vn3	(llc)



/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_llc_no_ra : low layer compatibility IE
										   without RA.

					INPUT :
						- pr		 = primitive ID,
						- cap        = transfer capability,
						- mode       = transfer mode,
						- negot		 = negotiation,
						- rate       = transfer rate,
						- struct     = structure,
						- protocol_1 = protocol ID layer 1,
						- protocol_2 = protocol ID layer 2,
						- protocol_3 = protocol ID layer 3.

			*/

#define Isdn_vn3_store_llc_no_ra(pr, cap, mode , negot, rate, structur , protocol_1, protocol_2, protocol_3) \
				Set_offset_vn3 	(pr,	llc);						\
				Set_val_nil_vn3	(llc);								\
				Set_val_vn3 	(llc,	trf_cap,		cap);		\
				Set_val_vn3 	(llc,	trf_mode,		mode);		\
				Set_val_vn3 	(llc,	out_band_neg,	negot);		\
				Set_val_vn3 	(llc,	trf_rate,		rate);		\
				Set_val_vn3 	(llc,	structure,		structur);	\
				Set_val_vn3 	(llc,	dest_rate,		rate);		\
				Set_val_vn3 	(llc,	protocol_id_1,	protocol_1);\
				Set_val_vn3 	(llc,	protocol_id_2,	protocol_2);\
				Set_val_vn3 	(llc,	protocol_id_3,	protocol_3);\
				Set_next_ie_vn3	(llc)

#define Isdn_vn3_store_llc_56k(pr, cap, mode, rate, protocol_1, syn_asyn_, negot) \
				Set_offset_vn3 	(pr,	llc);						\
				Set_val_nil_vn3	(llc);								\
				Set_val_vn3 	(llc,	trf_cap,		cap);		\
				Set_val_vn3 	(llc,	trf_mode,		mode);		\
				Set_val_vn3 	(llc,	trf_rate,		rate);		\
				Set_val_vn3 	(llc,	protocol_id_1,	protocol_1);\
				Set_val_vn3		(llc,	syn_asyn,		syn_asyn_);	\
				Set_val_vn3		(llc,	negociation,	negot);		\
				Set_val_vn3		(llc,	user_rate,		RA_56KBS);	\
				Set_next_ie_vn3	(llc)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_vn3_store_llc_transparent : low layer compatibility IE
												   transparent 64 kbit/s.

					INPUT :
						- protocol_1 = protocol ID layer 1,
						- protocol_2 = protocol ID layer 2,
						- protocol_3 = protocol ID layer 3.

			*/

#define Isdn_vn3_store_llc_transparent(pr, negot, protocol_1, protocol_2, protocol_3) \
				Set_offset_vn3	(pr,	llc);									\
				Set_val_nil_vn3	(llc);											\
				Set_val_vn3		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn3		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_vn3 	(llc,	out_band_neg,	negot);		\
				Set_val_vn3		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_vn3		(llc,	structure,		STRUCTURE_DEFAULT);		\
				Set_val_vn3		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_vn3		(llc,	protocol_id_1,	protocol_1);			\
				Set_val_vn3		(llc,	protocol_id_2,	protocol_2);			\
				Set_val_vn3		(llc,	protocol_id_3,	protocol_3);			\
				Set_next_ie_vn3	(llc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_llc_v110_syn : llc V110 synchronous IE.

					INPUT :
						- out_neg 	= out band negotiation
						- negot		= negotiation,
						- rate		= user rate,
						- tx 		= NIC on Tx,
						- rx		= NIC on Rx,
						- protocol_2= protocol ID layer 2,
						- protocol_3= protocol ID layer 3.

			*/

#define Isdn_vn3_store_llc_v110_syn(pr, out_neg, negot, rate, tx, rx, protocol_2, protocol_3) \
				Set_offset_vn3	(pr,	llc);									\
				Set_val_nil_vn3	(llc);											\
				Set_val_vn3		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn3		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_vn3 	(llc,	out_band_neg,	out_neg);				\
				Set_val_vn3		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_vn3		(llc,	structure,		STRUCTURE_DEFAULT);		\
				Set_val_vn3		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_vn3		(llc,	protocol_id_1,	PROTOCOL_ID_1_V110);	\
				Set_val_vn3		(llc,	syn_asyn,		SYN);					\
				Set_val_vn3		(llc,	negociation,	negot);					\
				Set_val_vn3		(llc,	user_rate,		rate);					\
				Set_val_vn3		(llc,	nic_tx,			tx);					\
				Set_val_vn3		(llc,	nic_rx,			rx);					\
				Set_val_vn3		(llc,	protocol_id_2,	protocol_2);			\
				Set_val_vn3		(llc,	protocol_id_3,	protocol_3);			\
				Set_next_ie_vn3 (llc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_vn3_store_llc_v110_asyn : llc V110 asynchronous IE.

					INPUT :
						- out_neg 	= out band negotiation
						- negot		= negotiation,
						- rate		= user rate,
						- fc_tx_	= flow control on Tx,
						- fc_rx_	= flow control on Rx,
						- stop		= number of stop bits,
						- data		= number of data bits,
						- par		= parity,

			*/

#define Isdn_vn3_store_llc_v110_asyn(pr, out_neg, negot, rate, fc_tx_, fc_rx_, stop, data, par) \
				Set_offset_vn3	(pr,	llc); 									\
				Set_val_nil_vn3	(llc);											\
				Set_val_vn3		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn3		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_vn3 	(llc,	out_band_neg,	out_neg);				\
				Set_val_vn3		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_vn3		(llc,	structure,		STRUCTURE_DEFAULT);		\
				Set_val_vn3		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_vn3		(llc,	protocol_id_1,	PROTOCOL_ID_1_V110);	\
				Set_val_vn3		(llc,	syn_asyn,		ASYN);					\
				Set_val_vn3		(llc,	modem,			FT_MODEM_RESERVED);		\
				Set_val_vn3		(llc,	negociation,	negot);					\
				Set_val_vn3		(llc,	user_rate,		rate);					\
				Set_val_vn3		(llc,	fc_tx,			fc_tx_);				\
				Set_val_vn3		(llc,	fc_rx,			fc_rx_);				\
				Set_val_vn3		(llc,	stop_bit,		stop);					\
				Set_val_vn3		(llc,	data_bit,		data);					\
				Set_val_vn3		(llc,	parity,			par);					\
				Set_next_ie_vn3	(llc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_llc_v120 : llc V120 IE.

					INPUT :
						- out_neg 	= out band negotiation,
						- syn_asyn	= SYN or ASYN,
						- negot		= negotiation,
						- rate		= user rate,
						- duplex	= duplex mode,
						- modem		= modem type

			*/

#define Isdn_vn3_store_llc_v120(pr, out_neg, syn_asyn_, negot, rate, duplex_, modem_)\
				Set_offset_vn3	(pr,	llc);									\
				Set_val_nil_vn3	(llc);											\
				Set_val_vn3		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn3		(llc,	trf_mode,		TRF_MODE_CIRCUIT);		\
				Set_val_vn3 	(llc,	out_band_neg,	out_neg);				\
				Set_val_vn3		(llc,	trf_rate,		TRF_RATE_64KBS);		\
				Set_val_vn3		(llc,	structure,		STRUCTURE_DEFAULT);		\
				Set_val_vn3		(llc,	dest_rate,		TRF_RATE_64KBS);		\
				Set_val_vn3		(llc,	protocol_id_1,	PROTOCOL_ID_1_V120);	\
				Set_val_vn3		(llc,	syn_asyn,		syn_asyn_);				\
				Set_val_vn3		(llc,	negociation,	negot);					\
				Set_val_vn3		(llc,	user_rate,		rate);					\
				Set_val_vn3		(llc,	duplex,			duplex_);				\
				Set_val_vn3		(llc,	modem,			modem_);				\
				Set_next_ie_vn3 (llc)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_vn3_store_llc_x25_x31 : llc X.25/X.31 IE.

					INPUT : none
			*/

#define Isdn_vn3_store_llc_x25_x31(pr) 										\
				Set_offset_vn3	(pr,	llc);									\
				Set_val_nil_vn3	(llc);											\
				Set_val_vn3		(llc,	trf_cap,		TRF_CAP_UNRESTRICTED);	\
				Set_val_vn3		(llc,	trf_mode,		TRF_MODE_PACKET);		\
				Set_val_vn3		(llc,	out_band_neg,	OUT_BAND_NOT_POSSIBLE); \
				Set_val_vn3		(llc,	trf_rate,		TRF_RATE_PACKET_MODE);	\
				Set_val_vn3		(llc,	structure,		STRUCTURE_DEFAULT);		\
				Set_val_vn3		(llc,	dest_rate,		TRF_RATE_PACKET_MODE);	\
				Set_val_vn3		(llc,	protocol_id_1,	PROTOCOL_ID_1_X31);		\
				Set_val_vn3		(llc,	protocol_id_2,	PROTOCOL_ID_2_X25_LL);	\
				Set_val_vn3		(llc,	protocol_id_3,	PROTOCOL_ID_3_X25_PL);	\
				Set_next_ie_vn3	(llc)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_more_data : more data

					INPUT :
						- pr	= primitive ID,

			*/

#define Isdn_vn3_store_more_data(pr) 				\
				Set_offset_vn3	(pr,		more_data)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_notif_ind : notification indicator

					INPUT :
						- pr	= primitive ID,
						- descr	= description.

			*/

#define Isdn_vn3_store_notif_ind(pr, descr)										\
		Set_offset_vn3	(pr,		notif_ind);										\
		Set_val_vn3		(notif_ind,	notif_descr,	descr);							\
		Set_next_ie_vn3	(notif_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_progress_ind : progress indicator

					INPUT :
						- pr				= primitive ID,
						- coding_std_		= coding standard,
						- progress_loc_		= location,
						- progress_descr_	= description.

			*/

#define Isdn_vn3_store_progress_ind(pr, coding_std_, progress_loc_, progress_descr_) \
		Set_offset_vn3	(pr,			progress_ind);								\
		Set_val_vn3		(progress_ind,	coding_std,		coding_std_);				\
		Set_val_vn3		(progress_ind,	progress_loc,	progress_loc_);				\
		Set_val_vn3		(progress_ind,	progress_descr,	progress_descr_);			\
		Set_next_ie_vn3	(progress_ind)


/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_vn3_store_restart_ind(pr, class_)									\
		Set_offset_vn3	(pr,			restart_ind);								\
		Set_val_vn3		(restart_ind,	restart_class,	class_);					\
		Set_next_ie_vn3	(restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_sending_complete : sending complete

					INPUT :
						- pr		= primitive ID,

			*/

#define Isdn_vn3_store_sending_complete(pr)	\
		Set_offset_vn3	(pr,				sending_complete)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_signal : signal message

					INPUT :
						- pr			= primitive ID,
						- signal_val	= signal value.

			*/

#define Isdn_vn3_store_signal(pr, signal_val_)									\
		Set_offset_vn3	(pr,		signal);										\
		Set_val_vn3		(signal,	signal_val,	signal_val_);						\
		Set_next_ie_vn3	(signal)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_user_fac : user facility IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator
						- size				= size of the array,
						- p_array			= address of the character array.

			*/


#define Isdn_vn3_store_user_fac(pr, protocol_discr_, size, p_array) 		\
		Set_offset_vn3	(pr,		user_fac);									\
		Set_val_vn3		(user_fac,	protocol_discr,		protocol_discr_);		\
		Set_mem_vn3		(user_fac,	text,	p_array,	(size > VN3_MX_SZ_USER_FAC) \
											 ? VN3_MX_SZ_USER_FAC : size)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_vn3_store_uui : user to user information IE

					INPUT :
						- protocol_discr_	= protocol discriminator
						- p_text			= address of the literal string.

			*/

#define Isdn_vn3_store_uui(pr, protocol_discr_, p_text)			\
		Set_offset_vn3	(pr,	uui);								\
		Set_val_vn3		(uui,	protocol_discr,	protocol_discr_);	\
		Set_str_vn3		(uui, 	text,	p_text,	VN3_MX_SZ_UUI+1)


/*EOF*/


