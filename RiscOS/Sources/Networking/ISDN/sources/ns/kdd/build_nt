/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_nt.kdd
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *          kdd_net_build_pdu_ns
 *        - implements the simulation of the network side
 *                   for a call connection.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            kdd_net_build_pdu_ns - implements the simulation of the network side
					for a call connection.

Usage           void kdd_net_build_pdu_ns ()

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void kdd_net_build_pdu_ns ()
{
		/* Message builder */

	switch (Tolower (g_spdu_id[0])) {

			/* Call establishment spdu event */

		case DA_ALERT :
				*p_info++ = ALERT;

				break;


		case DA_CALL_PROC :
				*p_info++ = CALL_PROC;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;	/* 1+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
										CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */

				break;


		case DA_CONN :
				*p_info++ = CONN;

				break;


		case DA_CONN_ACK :
				*p_info++ = CONN_ACK;

				break;

		case DA_PROGRESS :
				*p_info++ = PROGRESS;

				 p_ie_m = p_info;

				*p_info++ = PROGRESS_IND;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ PROGRESS_LOC_USER */
				*p_info++ = 0x88;	/* 1+ PROGRESS_DESCR_IN_BAND_NOW */

				 p_ie_o = p_info;

				*p_info++ = UUI;
				*p_info++ = 17;
				*p_info++ = 0x04;	/* PROTOCOL_DISCR_IA5 */
				 Memcpy_far ((char FAR *)p_info, (char FAR *)"* progress/uui *", 16);
				 p_info += 16;

				break;

		case DA_SETUP :
				*p_info++ = SETUP;

				*p_info++ = BC;
				*p_info++ = 11;
				*p_info++ = 0x88;	/* 1+ CODING_STD_CCITT+ TRF_CAP_UNRESTRICTED */
				*p_info++ = 0x10;	/* 0+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */
				*p_info++ = 0x10;	/* 0+ STRUCTURE_8_KHZ_INT+ 00+ 00 */
				*p_info++ = 0x90;	/* 1+ 00+ TRF_RATE_64KBS */
				*p_info++ = 0x21;	/* 0+ 01+ PROTOCOL_ID_1_V110 */
				*p_info++ = 0x02;	/* 0+ SYN+ NEGOTIATION_NOT_IN_BAND+ RA_1_2KBS */
				*p_info++ = 0x1A;	/* 0+ INTER_RA_UNUSED+ NIC_RQ_TX_DATA+
										NIC_ACCEPT_DATA+ FLOW_NOT_RQ_TX_DATA+
										FLOW_CAN_ACCEPT_DATA+ 0 */
				*p_info++ = 0x5b;	/* 0+ STOP_BIT_1_5+ DATA_BIT_8+ NO_PARITY */
				*p_info++ = 0xc0;	/* 1+ FULL_DUPLEX+ MODEM_RESERVED */
				*p_info++ = 0xc6;	/* 1+ 10+ PROTOCOL_ID_2_X25_LL */
				*p_info++ = 0xe6;	/* 1+ 11+ PROTOCOL_ID_3_X25_PL */

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 3;
				*p_info++ = 0x0a;	/* 0+ INT_ID_IMPLICIT+ INT_TYPE_BRI+ 0+
										CHAN_EXCL+ NOT_D_CHAN+ B2_CHAN */
				*p_info++ = 0x03;	/* 0+ CODING_STD_CCITT+ CHAN_NUMBER+ B_CHAN */
				*p_info++ = 0x80;	/* 1+ chanel #0 */

				 p_ie_o = p_info;

				*p_info++ = CALLING_NB;
				*p_info++ = 3;
				*p_info++ = 0x89;	/* 1+ NB_UNKNOWN+ PLAN_PRIVATE */
				 Memcpy_far ((char FAR *)p_info, (char FAR *)"33", 2);
				 p_info += 2;

				*p_info++ = CALLING_NB;
				*p_info++ = 12;
				*p_info++ = 0x21;	/* 0+ NB_NATIONAL+ PLAN_ISDN */
				*p_info++ = 0x80;	/* 1+ PRES_ALLOWED+ 000+ USER_PROVIDED */
				 Memcpy_far ((char FAR *)p_info, (char FAR *)"0987654321", 10);
				 p_info += 10;

				*p_info++ = CALLED_NB;
				*p_info++ = 11;
				*p_info++ = 0x80;	/* 1+ NB_UNKNOWN+ PLAN_UNKNWON */
				 Memcpy_far ((char FAR *)p_info, (char FAR *)"1234567890", 10);
				 p_info += 10;

				*p_info++ = CALLED_SUB_ADD;
				*p_info++ = 6;
				*p_info++ = 0x80;	/* 1+ SUB_ADD_OSI+ SUB_ADD_EVEN+ 000 */
				*p_info++ = 0x50;	/* FORMAT_IA5 */
				 Memcpy_far ((char FAR *)p_info, (char FAR *)"4321", 4);
				 p_info += 4;

				*p_info++ = LLC;
				*p_info++ = 12;
				*p_info++ = 0x88;	/* 1+ CODING_STD_CCITT+ TRF_CAP_UNRESTRICTED */
				*p_info++ = 0xc0;	/* 1+ OUT_BAND_POSSIBLE */
				*p_info++ = 0x10;	/* 0+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */
				*p_info++ = 0x10;	/* 0+ STRUCTURE_8_KHZ_INT+ 00+ 00 */
				*p_info++ = 0x90;	/* 1+ 00+ TRF_RATE_64KBS */
				*p_info++ = 0x21;	/* 0+ 01+ PROTOCOL_ID_1_V110 */
				*p_info++ = 0x02;	/* 0+ SYN+ NEGOTIATION_NOT_IN_BAND+ RA_1_2KBS */
				*p_info++ = 0x1A;	/* 0+ INTER_RA_UNUSED+ NIC_RQ_TX_DATA+
										NIC_ACCEPT_DATA+ FLOW_NOT_RQ_TX_DATA+
										FLOW_CAN_ACCEPT_DATA+ 0 */
				*p_info++ = 0x5b;	/* 0+ STOP_BIT_1_5+ DATA_BIT_8+ NO_PARITY */
				*p_info++ = 0xc0;	/* 1+ FULL_DUPLEX+ MODEM_RESERVED */
				*p_info++ = 0xc6;	/* 1+ 10+ PROTOCOL_ID_2_X25_LL */
				*p_info++ = 0xe6;	/* 1+ 11+ PROTOCOL_ID_3_X25_PL */

				*p_info++ = HLC;
				*p_info++ = 2;
				*p_info++ = 0x91;	/* 1+ CODING_STD_CCITT+ 100+ 01 */
				*p_info++ = 0x81;	/* 1+ SERVICE_SPEECH */

				break;

			/* Clear call spdu event */

		case DA_DISC :
				*p_info++ = DISC;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x90;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_CLEARING_16 */

				break;


		case DA_REL :
				*p_info++ = REL;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x95;	/* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

				 p_ie_o = p_info;

#if EQUIPMENT == TE

#else
				*p_info++ = UUI;
				*p_info++ = 14;
				*p_info++	= 0x04;	/* PROTOCOL_DISCR_IA5 */
				 Memcpy_far ((char FAR *)p_info, (char FAR *)"** release **", 13);
				 p_info += 13;

#endif

				break;


		case DA_REL_COMP :
				*p_info++ = REL_COMP;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x95;	/* 1+ C_C_NORMAL_EVENT+ C_V_CALL_REJECT_21 */

				break;


			/* Miscellaneous spdu event */

		case DA_STATUS :
				*p_info++ = STATUS;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x9f;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x9f;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

				*p_info++ = CALL_STATE;
				*p_info++ = 1;
				*p_info++ = 0x01;	/* CODING_STD_CCITT+ N1 (STATE_CALL_INIT) */

				break;

		case DA_STATUS_ENQ :
				*p_info++ = STATUS_ENQ;

				break;

		case DA_SPDU_ID_UNKNOWN:
				*p_info++ = SPDU_ID_UNKNOWN;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x80;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_USER */
				*p_info++ = 0x9f;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

				break;

		case '1' :
				Automata_1 ();
				break;

		case DA_HEXA_CODING :
				mg_ns_hexa ();		/* Hexadecimal coding */
				break;

		default :
				return;

	}

}

/*EOF*/
