
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.kdd
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


				/*
				   MACROs and DECLARATIONS used to access the Network
				   Signalling entity (NS) from the user Layer 4 Signalling
				   entity (L4S).
				*/

/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_at5_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_kdd_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(kdd_,pr), p_off)
#define Isdn_init_kdd_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_kdd(pr,ie)					Get_ie 			(Paste(kdd_,pr), Paste (kdd_, ie))
#define	Isdn_get_val_kdd(pr,ie,fld)			Isdn_get_val	(Paste(kdd_,pr), Paste (kdd_, ie), fld)
#define Isdn_p_str_kdd(pr,ie,fld)			Isdn_p_str		(Paste(kdd_,pr), Paste (kdd_, ie), fld)
#define	Isdn_lgth_str_kdd(pr,ie,fld)		Isdn_lgth_str	(Paste(kdd_,pr), Paste (kdd_, ie), fld)
#define	Isdn_mx_lgth_str_kdd(pr,ie,fld)		Isdn_mx_lgth_str(Paste(kdd_,pr), Paste (kdd_, ie), fld)
#define	P_start_val_ns_kdd(pr,ie)			P_start_val_ns	(Paste(kdd_,pr), Paste (kdd_, ie))
#define	P_val_ns_kdd(ie)					P_val_ns		(Paste(kdd_,ie))
#define Set_offset_kdd(pr,ie)				Set_offset		(Paste(kdd_,pr),Paste(kdd_,ie))
#define	Set_next_ie_kdd(ie)					Set_next_ie		(Paste(kdd_,ie))
#define	Set_val_kdd(ie,fld,val)				Set_val			(Paste(kdd_,ie), fld, val)
#define Set_str_kdd(ie, lv, p_str, mx_sz)	Set_str			(Paste(kdd_,ie), lv, p_str, mx_sz)
#define Set_mem_kdd(ie, lv, p_mem, sz)		Set_mem			(Paste(kdd_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_kdd(pr,ie)	Set_to_next_ie_instance (Paste(kdd_,pr), Paste (kdd_, ie))
#define Get_remaining_ie_instance_nb_kdd(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(kdd_,pr), Paste (kdd_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_offset_kdd	ns_offset_t kdd_message_header;
#else
#	define Message_header_offset_kdd
#endif

/*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ */

typedef struct off_ns_kdd_te_alert_in		off_ns_kdd_alert_rq;
typedef struct off_ns_kdd_te_alert_in		off_ns_kdd_net_alert_in;

		/* NS_ALERT_IN */

struct off_ns_kdd_te_alert_in {
	Message_header_offset_kdd				/* message header parameters */
	ns_offset_t kdd_chan_id;				/* channel ID */
	ns_offset_t kdd_progress_ind;			/* progress indicator */
	ns_offset_t kdd_uui;					/* user to user information */
};

typedef struct off_ns_kdd_te_alert_in		off_ns_kdd_net_alert_rq;
typedef struct off_ns_kdd_te_alert_in		off_ns_kdd_alert_in;

		/* NS_CALL_PROC_RQ */

typedef struct off_ns_kdd_te_call_proc_in	off_ns_kdd_call_proc_rq;
typedef struct off_ns_kdd_te_call_proc_in	off_ns_kdd_net_call_proc_in;

		/* NS_CALL_PROC_IN */

struct off_ns_kdd_te_call_proc_in {
	Message_header_offset_kdd				/* message header parameters */
	ns_offset_t kdd_chan_id;				/* channel ID */
	ns_offset_t kdd_progress_ind;			/* progress indicator */
};

typedef struct off_ns_kdd_te_call_proc_in	off_ns_kdd_net_call_proc_rq;
typedef struct off_ns_kdd_te_call_proc_in	off_ns_kdd_call_proc_in;

		/* NS_CONN_RQ */

typedef struct off_ns_kdd_te_conn_in		off_ns_kdd_conn_rq;
typedef struct off_ns_kdd_te_conn_in		off_ns_kdd_net_conn_in;

		/* NS_CONN_IN */

struct off_ns_kdd_te_conn_in {
	Message_header_offset_kdd				/* message header parameters */
	ns_offset_t kdd_bc;						/* bearer capability */
	ns_offset_t kdd_chan_id;				/* channel ID */
	ns_offset_t kdd_progress_ind;			/* progress indicator */
	ns_offset_t kdd_calling_nb;				/* calling number (from network) */
	ns_offset_t kdd_calling_sub_add;		/* calling subaddress */
	ns_offset_t kdd_called_nb;				/* called number */
	ns_offset_t kdd_called_sub_add;			/* called subaddress */
	ns_offset_t kdd_llc;					/* low layer capability */
	ns_offset_t kdd_hlc;					/* high layer compatibility */
	ns_offset_t kdd_uui;					/* user to user information */
};

typedef struct off_ns_kdd_te_conn_in		off_ns_kdd_net_conn_rq;
typedef struct off_ns_kdd_te_conn_in		off_ns_kdd_conn_in;

		/* NS_CONN_RS */

typedef struct off_ns_kdd_te_conn_co		off_ns_kdd_conn_rs;
typedef struct off_ns_kdd_te_conn_co		off_ns_kdd_net_conn_co;

		/* NS_CONN_CO */

struct off_ns_kdd_te_conn_co {
	Message_header_offset_kdd				/* message header parameters */
	ns_offset_t kdd_chan_id;				/* channel ID */
	ns_offset_t kdd_progress_ind;			/* progress indicator */
	ns_offset_t kdd_llc;					/* low layer capability */
	ns_offset_t kdd_uui;					/* user to user information */
};

typedef struct off_ns_kdd_te_conn_co		off_ns_kdd_net_conn_rs;
typedef struct off_ns_kdd_te_conn_co		off_ns_kdd_conn_co;

		/* NS_PROGRESS_RQ */

typedef struct off_ns_kdd_te_progress_in	off_ns_kdd_progress_rq;
typedef struct off_ns_kdd_te_progress_in	off_ns_kdd_net_progress_in;

		/* NS_PROGRESS_IN */

struct off_ns_kdd_te_progress_in {
	Message_header_offset_kdd				/* message header parameters */
	ns_offset_t kdd_cause;					/* cause */
	ns_offset_t kdd_progress_ind;			/* progress indicator */
	ns_offset_t kdd_uui;					/* user to user information */
};

typedef struct off_ns_kdd_te_progress_in	off_ns_kdd_net_progress_rq;
typedef struct off_ns_kdd_te_progress_in	off_ns_kdd_progress_in;

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

typedef struct off_ns_kdd_te_clear_in		off_ns_kdd_clear_rq;
typedef struct off_ns_kdd_te_clear_in		off_ns_kdd_net_clear_in;

		/* NS_CLEAR_IN */

struct off_ns_kdd_te_clear_in {
	Message_header_offset_kdd				/* message header parameters */
	ns_offset_t kdd_cause;					/* cause */
	ns_offset_t kdd_progress_ind;			/* progress indicator */
	ns_offset_t kdd_uui;					/* user to user information */
};

typedef struct off_ns_kdd_te_clear_in		off_ns_kdd_net_clear_rq;
typedef struct off_ns_kdd_te_clear_in		off_ns_kdd_clear_in;

		/* NS_CLEAR_RS */

typedef struct off_ns_kdd_te_clear_co		off_ns_kdd_clear_rs;
typedef struct off_ns_kdd_te_clear_co		off_ns_kdd_net_clear_co;

		/* NS_CLEAR_CO */

struct off_ns_kdd_te_clear_co {
	Message_header_offset_kdd				/* message header parameters */
	ns_offset_t kdd_cause;					/* cause */
	ns_offset_t kdd_uui;					/* user to user information */
};

typedef struct off_ns_kdd_te_clear_co		off_ns_kdd_net_clear_rs;
typedef struct off_ns_kdd_te_clear_co		off_ns_kdd_clear_co;

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

		/* NS_RESTART_RQ */

typedef struct off_ns_kdd_te_restart_in		off_ns_kdd_restart_rq;
typedef struct off_ns_kdd_te_restart_in		off_ns_kdd_net_restart_in;

		/* NS_RESTART_ACK_RQ */

typedef struct off_ns_kdd_te_restart_in		off_ns_kdd_restart_rs;
typedef struct off_ns_kdd_te_restart_in		off_ns_kdd_net_restart_co;

		/* NS_RESTART_CO */

typedef struct off_ns_kdd_te_restart_in		off_ns_kdd_net_restart_rs;
typedef struct off_ns_kdd_te_restart_in		off_ns_kdd_restart_co;

		/* NS_RESTART_ACK_IN */

struct off_ns_kdd_te_restart_in {
	Message_header_offset_kdd				/* message header parameters */
	ns_offset_t kdd_chan_id;				/* channel identifier */
	ns_offset_t kdd_restart_ind;			/* restart indicator */
};

typedef struct off_ns_kdd_te_restart_in		off_ns_kdd_net_restart_rq;
typedef struct off_ns_kdd_te_restart_in		off_ns_kdd_restart_in;


		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/

		/* Bearer Capability (BC) */

struct val_ns_kdd_bc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;				/* destination rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock (NIC) on Transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock (NIC) on Reception (Rx) */
	ie_val		fc_tx;					/* flow control on Transmission (Tx) */
	ie_val		fc_rx;					/* flow control on Reception (Rx) */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits */
	ie_val		parity;					/* number of parity bit */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user information layer 2 protocol */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */

};

		/* Called party number (CALLED_NB) */

struct val_ns_kdd_called_nb {
	Next_instance_offset
	ie_val   	nb_type;				/* numbering type */
	ie_val	 	plan_id;				/* numbering plan ID */
	ie_array 	nb[KDD_MX_SZ_CALLED_NB+2];	/* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_kdd_called_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* called subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[KDD_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_kdd_calling_nb {
	Next_instance_offset
	ie_val  	nb_type;				/* numbering type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[KDD_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

struct val_ns_kdd_calling_nb_u {
	Next_instance_offset
	ie_val  	nb_type;				/* numbering type */
	ie_val		plan_id;				/* numbering plan ID */
	ie_val		pres;					/* presentation indicator */
	ie_val		screen_ind;				/* screening indicator */
	ie_array 	nb[KDD_MX_SZ_CALLING_NB+2];	/* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_kdd_calling_sub_add {
	Next_instance_offset
	ie_val  	sub_add_type;			/* calling subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[KDD_MX_SZ_CALLING_SUB_ADD+2];	/* sub-add information */
};

		/* Call State (CALL_STATE) */

struct val_ns_kdd_call_state {
	Next_instance_offset
	ie_val		state_val;				/* call state value */
};

		/* Cause (CAUSE) */

struct val_ns_kdd_cause {
	Next_instance_offset
	ie_val		cause_loc;				/* location */
	ie_val		recommend;				/* recommendation */
	ie_val 		cause_class;			/* cause class field */
	ie_val		cause_val;				/* cause value field */
	ie_val		cause_diag;				/* diagnostics */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_kdd_chan_id {
	Next_instance_offset
	ie_val 		int_type;				/* interface type */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val		d_chan;					/* D-channel indicator */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val 		chan_nb;				/* channel number */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_kdd_hlc {
	Next_instance_offset
	ie_val		teleservice;			/* high layer characteristics identification */
	ie_val		ext_teleservice;		/* extended high layer characteristics identification */
};

		/* Low Layer Compatibility (LLC) */

struct val_ns_kdd_llc {
	Next_instance_offset
	ie_val		trf_cap;				/* information transfer capability */
	ie_val		out_band_neg;			/* out-band negotiation */
	ie_val		trf_mode;				/* transfer mode */
	ie_val		trf_rate;				/* information transfer rate */
	ie_val		structure;				/* structure */
	ie_val		dest_rate;							/* destination rate */
	ie_val		protocol_id_1;			/* user information layer 1 protocol */
	ie_val		syn_asyn;				/* synchronous/asynchronous */
	ie_val		negotiation;			/* negotiation */
	ie_val		user_rate;				/* user rate */
	ie_val		inter_rate;				/* intermediate rate */
	ie_val		nic_tx;					/* network independent clock on transmission (Tx) */
	ie_val		nic_rx;					/* network independent clock on reception (Rx) */
	ie_val		fc_tx;					/* flow control on transmission (Tx) */
	ie_val		fc_rx;					/* flow control on reception (Rx) */
	ie_val		hdr;					/* rate adaption header included or not */
	ie_val		multi_frame;			/* multiple frame establishement support in DL */
	ie_val		op_mode;				/* mode of operation */
	ie_val		lli_negot;				/* logical link identifier negotiation */
	ie_val		assign;					/* assignor/assignee */
	ie_val		band_negot;				/* in-band/out-band negotiation */
	ie_val		stop_bit;				/* number of stop bits */
	ie_val		data_bit;				/* number of data bits excluding parity if present */
	ie_val		parity;					/* parity information */
	ie_val		duplex;					/* duplex mode */
	ie_val		modem;					/* modem type */
	ie_val		protocol_id_2;			/* user information layer 2 protocol */
	ie_val		protocol_id_3;			/* user information layer 3 protocol */
};

		/* Progress indicator (PROGRESS_IND) */

struct val_ns_kdd_progress_ind {
	Next_instance_offset
	ie_val		progress_loc;			/* location */
	ie_val		progress_descr;			/* progress description */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_kdd_restart_ind {
	Next_instance_offset
	ie_val		restart_class;			/* class */
};

		/* User-to-user information (UUI) */

struct val_ns_kdd_uui {
	Next_instance_offset
	ie_val		protocol_discr;			/* protocol discriminator */
	ie_array	text[KDD_MX_SZ_UUI+2];	/* user information */
};


/*=========================================================================*/

							/* Information Elements (IE) */


			/*
			   Isdn_kdd_store_bc : store the bearer capability information
								   element :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- flow_control_tx_= flow control on Transmission (Tx),
						- flow_control_rx_= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_kdd_store_bc(	pr,				trf_cap_,		trf_mode_,			\
							trf_rate_,		structure_,		dest_rate_,			\
							protocol_id_1_,	syn_asyn_,		negotiation_,		\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		flow_control_tx_,flow_control_rx_,	\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							protocol_id_3_) 									\
				Set_offset_kdd	(pr,	bc);										\
				Set_val_kdd		(bc,	trf_cap,		trf_cap_);					\
				Set_val_kdd		(bc,	trf_mode,		trf_mode_);					\
				Set_val_kdd		(bc,	trf_rate,		trf_rate_);					\
				Set_val_kdd		(bc,	structure,		structure_);				\
				Set_val_kdd		(bc,	dest_rate,		dest_rate_);				\
				Set_val_kdd		(bc,	protocol_id_1,	protocol_id_1_);			\
				Set_val_kdd		(bc,	syn_asyn,		syn_asyn_);					\
				Set_val_kdd		(bc,	negotiation,	negotiation_);				\
				Set_val_kdd		(bc,	user_rate,		user_rate_);				\
				Set_val_kdd		(bc,	inter_rate,		inter_rate_);				\
				Set_val_kdd		(bc,	nic_tx,			nic_tx_);					\
				Set_val_kdd		(bc,	nic_rx,			nic_rx_);					\
				Set_val_kdd		(bc,	fc_tx,			flow_control_tx_);			\
				Set_val_kdd		(bc,	fc_rx,			flow_control_rx_);			\
				Set_val_kdd		(bc,	stop_bit,		stop_bit_);					\
				Set_val_kdd		(bc,	data_bit,		data_bit_);					\
				Set_val_kdd		(bc,	parity,			parity_);					\
				Set_val_kdd		(bc,	duplex,			duplex_);					\
				Set_val_kdd		(bc,	modem,			modem_);					\
				Set_val_kdd		(bc,	protocol_id_2,	protocol_id_2_);			\
				Set_val_kdd		(bc,	protocol_id_3,	protocol_id_3_);			\
				Set_next_ie_kdd	(bc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_kdd_store_bc_V110 : store the bearer capability information
										element for V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- flow_control_tx_= flow control on Transmission (Tx),
						- flow_control_rx_= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_kdd_store_bc_V110(pr,			trf_cap_,	trf_mode_,				\
							trf_rate_,		structure_,		dest_rate_,			\
											syn_asyn_,		negotiation_,		\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		flow_control_tx_,flow_control_rx_,	\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							protocol_id_3_) 									\
		Isdn_kdd_store_bc(	pr,				trf_cap_,		trf_mode_,			\
							trf_rate_,		structure_,		dest_rate_,			\
							PROTOCOL_ID_1_V110,syn_asyn_,	negotiation_,		\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		flow_control_tx_,flow_control_rx_,	\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							protocol_id_3_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_called_nb : called number IE

					INPUT :
						- pr				= primitive ID,
						- nbering_type		= numbering type,
						- nbering_plan_id	= numbering plan,
						- p_string			= address of the literal string.
			*/

#define Isdn_kdd_store_called_nb(pr, nbering_type, nbering_plan_id, p_string)	\
		Set_offset_kdd	(pr,		called_nb);										\
		Set_val_kdd		(called_nb,	nb_type,	nbering_type);						\
		Set_val_kdd		(called_nb,	plan_id,	nbering_plan_id);					\
		Set_str_kdd		(called_nb,	nb,			p_string,	KDD_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_called_sub_add : called sub-address IE

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even		= odd/even indicator,
						- p_string    	= address of the literal string.

			*/

#define Isdn_kdd_store_called_sub_add(pr, sub_add_type_, odd_even, p_string)	\
		Set_offset_kdd	(pr,				called_sub_add);						\
		Set_val_kdd		(called_sub_add,	sub_add_type,	sub_add_type_);			\
		Set_val_kdd		(called_sub_add,	odd_even_ind,	odd_even);				\
		Set_str_kdd 	(called_sub_add,	sub_add,		p_string, KDD_MX_SZ_CALLED_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nbering_type   	= numbering type,
						- nbering_plan_id	= numbering plan ID,
						- pres_ind			= presentation indicator,
						- screening_ind    	= screening indicator,
						- p_string  		= pointer on the calling number literal string.
			*/

#define Isdn_kdd_store_calling_nb(pr, nbering_type, nbering_plan_id, pres_ind, screening_ind, p_string)\
		Set_offset_kdd	(pr,			calling_nb);								\
		Set_val_kdd		(calling_nb,	nb_type,	nbering_type);				\
		Set_val_kdd		(calling_nb,	plan_id,	nbering_plan_id);			\
		Set_val_kdd		(calling_nb,	pres,		pres_ind);					\
		Set_val_kdd		(calling_nb,	screen_ind,	screening_ind);				\
		Set_str_kdd		(calling_nb,	nb, 		p_string, KDD_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_kdd_calling_sub_add : calling sub-address IE

						INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even		= odd/even indicator,
						- p_string    	= address of the literal string.


			*/

#define Isdn_kdd_store_calling_sub_add(pr, sub_add_type_, odd_even, p_string)	\
		Set_offset_kdd	(pr,				calling_sub_add);						\
		Set_val_kdd		(calling_sub_add,	sub_add_type,	sub_add_type_);			\
		Set_val_kdd		(calling_sub_add,	odd_even_ind,	odd_even);				\
		Set_str_kdd		(calling_sub_add,	sub_add,		p_string, KDD_MX_SZ_CALLING_SUB_ADD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_call_state : call state

					INPUT :
						- pr	= primitive ID,
						- value	= call state value.

			*/


#define Isdn_kdd_store_call_state(pr, value)									\
				Set_offset_kdd	(pr,			call_state);						\
				Set_val_kdd		(call_state,	state_val,		value);				\
				Set_next_ie_kdd	(call_state);

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_cause : cause IE

					INPUT :
						- pr	= primitive ID,
						- loc	= cause location,
						- rec	= recommendation,
						- cl    = cause class,
						- val   = cause value,
						- diag  = cause diagnostic.

			*/

#define Isdn_kdd_store_cause(pr, loc, rec, cl, val, diag)					\
				Set_offset_kdd	(pr,	cause);									\
				Set_val_kdd		(cause,	cause_loc,		loc);					\
				Set_val_kdd		(cause,	recommend,		rec);					\
				Set_val_kdd		(cause,	cause_class,	cl);					\
				Set_val_kdd		(cause,	cause_val,		val);					\
				Set_val_kdd		(cause,	cause_diag,		diag);					\
				Set_next_ie_kdd	(cause)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_kdd_store_chan_id : store channel ID IE

					INPUT :
						- pr 		= primitive ID,
						- int_type_	= interface type,
						- pref 		= preferred channel,
						- d_ch		= D-channel indicator,
						- sel 		= channel selection,
						- chan_nber	= channel number.
			*/

#define Isdn_kdd_store_chan_id(pr, int_type_, pref,	d_ch,	sel,	chan_nber)		\
				Set_offset_kdd	(pr,		chan_id);							\
				Set_val_kdd		(chan_id,	int_type,	int_type_);	\
				Set_val_kdd		(chan_id,	pref_excl,	pref);					\
				Set_val_kdd		(chan_id,	d_chan,		d_ch);					\
				Set_val_kdd		(chan_id,	chan_sel,	sel);					\
				Set_val_kdd		(chan_id,	chan_nb,	chan_nber);				\
				Set_next_ie_kdd	(chan_id)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_hlc : high layer compatibility

					INPUT :
						- pr		= primitive ID,
						- tele      = teleservice,
						- ext_tele	= extended teleservice.
			*/

#define Isdn_kdd_store_hlc(pr,		tele,				ext_tele)				\
				Set_offset_kdd	(pr,	hlc);										\
				Set_val_kdd		(hlc,	teleservice,		tele);					\
				Set_val_kdd		(hlc,	ext_teleservice,	ext_tele);				\
				Set_next_ie_kdd	(hlc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_kdd_store_llc : low layer compatibility

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- flow_control_tx_= flow control on Transmission (Tx),
						- flow_control_rx_= flow control on Reception (Rx),
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_kdd_store_llc(pr,trf_cap_,out_neg,trf_mode_,trf_rate_,structure_,dest_rate_,protocol_id_1_,syn_asyn_,negotiation_,user_rate_,inter_rate_,nic_tx_,nic_rx_,flow_control_tx_,flow_control_rx_,hdr_,multi_frame_,op_mode_,lli_negot_,assign_,band_negot_,stop_bit_,data_bit_,parity_,duplex_,modem_,protocol_id_2_,protocol_id_3_) \
				Set_offset_kdd	(pr,	llc);										\
				Set_val_kdd		(llc,	trf_cap,		trf_cap_);					\
				Set_val_kdd		(llc,	out_band_neg,	out_neg);					\
				Set_val_kdd		(llc,	trf_mode,		trf_mode_);					\
				Set_val_kdd		(llc,	trf_rate,		trf_rate_);					\
				Set_val_kdd		(llc,	structure,		structure_);				\
				Set_val_kdd		(llc,	dest_rate,		dest_rate_);				\
				Set_val_kdd		(llc,	protocol_id_1,	protocol_id_1_);			\
				Set_val_kdd		(llc,	syn_asyn,		syn_asyn_);					\
				Set_val_kdd		(llc,	negotiation,	negotiation_);				\
				Set_val_kdd		(llc,	user_rate,		user_rate_);				\
				Set_val_kdd		(llc,	inter_rate,		inter_rate_);				\
				Set_val_kdd		(llc,	nic_tx,			nic_tx_);					\
				Set_val_kdd		(llc,	nic_rx,			nic_rx_);					\
				Set_val_kdd		(llc,	fc_tx,			flow_control_tx_);			\
				Set_val_kdd		(llc,	fc_rx,			flow_control_rx_);			\
				Set_val_kdd		(llc,	hdr,			hdr_);						\
				Set_val_kdd		(llc,	multi_frame,	multi_frame_);				\
				Set_val_kdd		(llc,	op_mode,		op_mode_);					\
				Set_val_kdd		(llc,	lli_negot,		lli_negot_);				\
				Set_val_kdd		(llc,	assign,			assign_);					\
				Set_val_kdd		(llc,	band_negot,		band_negot_);				\
				Set_val_kdd		(llc,	stop_bit,		stop_bit_);					\
				Set_val_kdd		(llc,	data_bit,		data_bit_);					\
				Set_val_kdd		(llc,	parity,			parity_);					\
				Set_val_kdd		(llc,	duplex,			duplex_);					\
				Set_val_kdd		(llc,	modem,			modem_);					\
				Set_val_kdd		(llc,	protocol_id_2,	protocol_id_2_);			\
				Set_val_kdd		(llc,	protocol_id_3,	protocol_id_3_);			\
				Set_next_ie_kdd	(llc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_kdd_store_llc_V110 : low layer compatibility for
											V110 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- inter_rate_	= intermediate rate,
						- nic_tx_		= network independent clock (NIC) on Transmission (Tx),
						- nic_rx_		= network independent clock (NIC) on Reception (Rx),
						- flow_control_tx_= flow control on Transmission (Tx),
						- flow_control_rx_= flow control on Reception (Rx),
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_kdd_store_llc_V110(pr,trf_cap_,out_neg,trf_mode_,trf_rate_,structure_,dest_rate_,syn_asyn_,negotiation_,user_rate_,inter_rate_,nic_tx_,nic_rx_,flow_control_tx_,flow_control_rx_,stop_bit_,data_bit_,parity_,duplex_,modem_,protocol_id_2_,protocol_id_3_)\
		Isdn_kdd_store_llc(pr, trf_cap_,	out_neg,		trf_mode_,	\
							trf_rate_,		structure_,		dest_rate_,			\
							PROTOCOL_ID_1_V110,	syn_asyn_,	negotiation_,		\
							user_rate_,		inter_rate_,	nic_tx_,			\
							nic_rx_,		flow_control_tx_,flow_control_rx_,	\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							protocol_id_3_)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_kdd_store_llc_V120 : low layer compatibility for
											V120 rate adaption :

					INPUT :
						- pr			= primitive ID,
						- trf_cap_		= information transfer capability,
						- out_neg		= out band negotiation,
						- trf_mode_		= transfer mode,
						- trf_rate_		= information transfer rate,
						- structure_	= structure,
						- dest_rate_	= destination rate,
						- syn_asyn_		= synchronous/asynchronous,
						- negotiation_	= negotiation,
						- user_rate_	= user rate,
						- hdr_			= rate adaption header included or not,
						- multi_frame_	= multiple frame establishement support in DL,
						- op_mode_		= mode of operation,
						- lli_negot_	= logical link identifier negotiation,
						- assign_		= assignor/assignee,
						- band_negot_	= in-band/out-band negotiation,
						- stop_bit_		= number of stop bits,
						- data_bit_		= number of data bits,
						- parity_		= number of parity bit,
						- duplex_		= duplex mode,
						- modem_		= modem type,
						- protocol_id_2_= user information layer 2 protocol,
						- protocol_id_3_= user information layer 3 protocol,

			*/

#define Isdn_kdd_store_llc_V120(pr,trf_cap_,out_neg,trf_mode_,trf_rate_,structure_,dest_rate_,syn_asyn_,negotiation_,hdr_,multi_frame_,op_mode_,lli_negot_,assign_,band_negot_,stop_bit_,data_bit_,parity_,duplex_,modem_,protocol_id_2_,protocol_id_3_) \
		Isdn_kdd_store_llc(pr, trf_cap_,	out_neg,		trf_mode_,			\
							trf_rate_,		structure_,		dest_rate_,			\
							PROTOCOL_ID_1_V120,	syn_asyn_,	negotiation_,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							BYTE_VAL_NIL,	BYTE_VAL_NIL,	BYTE_VAL_NIL,		\
							hdr_,			multi_frame_,	op_mode_,			\
							lli_negot_,		assign_,		band_negot_,		\
							stop_bit_,		data_bit_,		parity_,			\
							duplex_,		modem_,			protocol_id_2_,		\
							protocol_id_3_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_progress_ind : progress indicator

					INPUT :
						- pr	= primitive ID,
						- loc	= location,
						- descr	= description.

			*/

#define Isdn_kdd_store_progress_ind(pr, loc, descr)						\
				Set_offset_kdd	(pr,			progress_ind);				\
				Set_val_kdd		(progress_ind,	progress_loc,	loc);		\
				Set_val_kdd		(progress_ind,	progress_descr,	descr);		\
				Set_next_ie_kdd	(progress_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- cl	= class.

			*/

#define Isdn_kdd_store_restart_ind(pr, cl)										\
				Set_offset_kdd	(pr,			restart_ind);						\
				Set_val_kdd		(restart_ind,	restart_class,	cl);						\
				Set_next_ie_kdd	(restart_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_kdd_store_uui : user to user information IE

					INPUT :
						- pr		= primitive ID,
						- protocol	= protocol discriminator,
						- p_text 	= address of the user info.
			*/

#define Isdn_kdd_store_uui(pr, protocol, p_text)		\
		Set_offset_kdd	(pr,	uui);						\
		Set_val_kdd		(uui,	protocol_discr,	protocol);	\
		Set_str_kdd		(uui, 	text,	p_text,	KDD_MX_SZ_UUI+1)

/*EOF*/
