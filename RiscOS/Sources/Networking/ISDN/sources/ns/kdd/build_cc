
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_cc.kdd
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		kdd_cc_load_ns_test - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			kdd_cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar kdd_cc_load_ns_test (code_t primitive_code, nai_t nai,
									   conn_id_t conn_id);
							- primitive_code 	= code of the primitive to send,
							- nai				= network access ID,
							- conn_id			= connection ID.

Return value : 	kdd_cc_load_ns_test returns = OK
										= NOK

common constants and declarations : ns.h, isdn.h

common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar kdd_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t		prim_code;		/* primitive code */
	nai_t 		nai;			/* network access ID */
	sapi_t		sapi;			/* sapi */
	conn_id_t	conn_id;		/* connection ID */
{

		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

		/* Switch according to the primitive to send */

	switch (prim_code) {

/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :
			Isdn_init_kdd_ctx_rq_rs			(conn_rq,
											 Buffer_a_first_data
											);

			Isdn_kdd_store_bc_V110			(conn_rq,
											 TRF_CAP_VIDEO,
											 TRF_MODE_CIRCUIT,
											 TRF_RATE_2x64KBS,
											 STRUCTURE_UNSTRUCTURED,
											 TRF_RATE_384KBS,
											 ASYN,
											 NEGOTIATION_NOT_IN_BAND,
											 RA_0_300KBS,
											 INTER_RA_16KBS,
											 NIC_NOT_RQ_TX_DATA,
											 NIC_NOT_ACCEPT_DATA,
											 FLOW_NOT_RQ_TX_DATA,
											 FLOW_CANNOT_ACCEPT_DATA,
											 STOP_BIT_2,
											 DATA_BIT_7,
											 FORCED_TO_1,
											 FULL_DUPLEX,
											 MODEM_V21,
											 PROTOCOL_ID_2_X25_LL,
											 PROTOCOL_ID_3_X25_PL
											);

			Isdn_kdd_store_chan_id			(conn_rq,
											 INT_TYPE_BRI,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN,
											 1
											);

			Isdn_kdd_store_calling_nb		(conn_rq,
											 NB_UNKNOWN,
											 PLAN_TELEX,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 "30571841"
											);

			Isdn_kdd_store_calling_sub_add	(conn_rq,
											 SUB_ADD_USER,
											 SUB_ADD_ODD,
											 "4321"
											);

			Isdn_kdd_store_called_nb		(conn_rq,
											 NB_NATIONAL,
											 PLAN_UNKNOWN,
											 "12345"
											);

			Isdn_kdd_store_called_sub_add	(conn_rq,
											 SUB_ADD_OSI,
											 SUB_ADD_EVEN,
											 "4321"
											);

			Isdn_kdd_store_hlc				(conn_rq,
											 TELEPHONY,
											 FAX_3
											);

			Isdn_kdd_store_uui				(conn_rq,
											 PROTOCOL_DISCR_IA5,
											 "conn rq--- BONJOUR +++"
											);
			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_kdd_ctx_rq_rs 		(conn_rs,
											 Buffer_a_first_data
											);

			Isdn_kdd_store_uui				(conn_rs,
											 PROTOCOL_DISCR_OSI,
											 "conn rs--- BONJOUR +++"
											);
			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_kdd_ctx_rq_rs			(clear_rq,
											 Buffer_a_first_data
											);

			Isdn_kdd_store_cause			(clear_rq,
											 LOCATION_USER,
											 RECOMMENDATION_Q931,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 0
											);

			Isdn_kdd_store_uui				(clear_rq,
											 PROTOCOL_DISCR_V120,
											 "**** UUI clear rq ***"
											);
			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_kdd_ctx_rq_rs			(clear_rs,
											 Buffer_a_first_data
											);

			Isdn_kdd_store_uui				(clear_rs,
											 PROTOCOL_DISCR_Q931,
											 "**** UUI clear rs ***"
											);
			break;

/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_kdd_ctx_rq_rs			(alert_rq,
											 Buffer_a_first_data
											);

			Isdn_kdd_store_chan_id			(alert_rq,
											 INT_TYPE_BRI,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN,
											 1
											);

			Isdn_kdd_store_uui				(alert_rq,
											 PROTOCOL_DISCR_X244,
											 "*** UUI alert rq ***"
											);
			break;

#if EQUIPMENT == NT2

/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_kdd_ctx_rq_rs			(call_proc_rq,
											 Buffer_a_first_data
											);

			Isdn_kdd_store_chan_id			(call_proc_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN,
											 CODING_STD_CCITT,
											 1
											);
			break;

#endif

/*---------------- UNKNOWN primitive */

		default :
			return (NOK);
		}


			/* Load the communication message */

		Store_message (prim_code, nai, sapi, conn_id, p_buffer);
		Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);

		return (OK);

}

/*EOF*/
