
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_state.kdd
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        kdd_u0 to kdd_u19 - user side - implements the processing of an event
 *                     according to the state of the call (u0 to u254).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*       U        */
						/*----------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             kdd_u0 to kdd_u19 - user side - implements the processing of an
							  event according to the call state.

Usage            void kdd_uxx (void);

Related
functions usage void Stop_timer (uchar x_timer);

				void Start_timer (uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void kdd_u0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Send_to_call_control (NS_CONN_IN);
			Start_timer_ns (KDD_T300);
			Set_state (STATE_CALL_PRESENT_6);
			break;

		case NS_CONN_RQ :
			Send_to_d_channel_and_save_spdu (SETUP);
			Set_state (STATE_CALL_INIT_1);
			Start_timer_ns (KDD_T303);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of user
			   action requesting call establishment from the network.
			*/

void kdd_u1 ()
{
		switch (event_id) {

			case DA_CALL_PROC :
				Release_saved_spdu ();		/* saved setup no more useful */
				Stop_timer_ns (KDD_T303);
				Send_to_call_control (NS_CALL_PROC_IN);
				Start_timer_ns (KDD_T310);
				Set_state (STATE_OUTGOING_CALL_PROC_3);
				break;

			case TI_303 :

				if (++N303 < MX_N303) {
					Send_saved_spdu_to_d_channel (SETUP);
					Restart_timer_ns (KDD_T303);

				} else {

					set_i_cause (C_C_TIMER, C_V_T303, (char FAR *) &Call_state);
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
				}

				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC_3 */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void kdd_u3 ()
{
		switch (event_id) {

			case DA_ALERT :
				Stop_timer_ns (KDD_T310);
				Send_to_call_control (NS_ALERT_IN);
				Set_state (STATE_CALL_DELIVERED_4);
				break;

			case DA_CONN :
				Stop_timer_ns (KDD_T310);
				Send_to_call_control (NS_CONN_CO);
				Set_state (STATE_ACTIVE_10);
				break;

			case DA_PROGRESS :
				Stop_timer_ns (KDD_T310);
				Send_to_call_control (NS_PROGRESS_IN);
				break;

			case TI_310 :
				set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, P_NIL);
				Save_cause ();									/* to send the RELEASE if T305 expire */
				Send_to_d_channel (DISC);
				Start_timer_ns (KDD_T305);
				Set_state (STATE_DISCONNECT_REQUEST_11);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void kdd_u4 ()
{
	if (event_id == DA_CONN) {
		Send_to_call_control (NS_CONN_CO);
		Reset_internal_ie ();
		Set_state (STATE_ACTIVE_10);

	} else {

		ns_unexpected_ev ();
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void kdd_u6()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Stop_timer_ns (KDD_T300);
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CALL_PROC_RQ :
			Stop_timer_ns (KDD_T300);
			Send_to_d_channel (CALL_PROC);
			Set_state (STATE_INCOMING_CALL_PROC_9);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (KDD_T300);
			Send_to_d_channel (CONN);
			Start_timer_ns (KDD_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case TI_300 :

#			if NS_TYPE_PRI == ON

				if (Na_type == PRI) {
					set_i_cause (C_C_INVALID_MESSAGE, C_V_INCOMPATIBLE_DESTINATION_88, P_NIL);
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
				}

#			endif

			set_i_cause (C_C_TIMER, C_V_T300, (char FAR *) &Call_state);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void kdd_u7 ()
{
		switch (event_id) {

			case NS_CONN_RS :
				Send_to_d_channel (CONN);
				Start_timer_ns (KDD_T313);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void kdd_u8 ()
{
		switch (event_id) {

			case DA_CONN_ACK :
				Stop_timer_ns (KDD_T313);
				Send_to_call_control (NS_CONN_CO);
				Set_state (STATE_ACTIVE_10);
				break;

			case TI_313 :
				set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, P_NIL);
				Save_cause ();									/* to send the RELEASE if T305 expire */
				Send_to_d_channel (DISC);
				Start_timer_ns (KDD_T305);
				Set_state (STATE_DISCONNECT_REQUEST_11);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROCEEDING */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void kdd_u9 ()
{
		switch (event_id) {

			case NS_CONN_RS :
				Send_to_d_channel (CONN);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			case NS_ALERT_RQ :
				Send_to_d_channel (ALERT);
				Set_state (STATE_CALL_RECEIVED_7);
				break;

			case NS_PROGRESS_RQ :
				Send_to_d_channel (PROGRESS);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE_10 */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void kdd_u10 ()
{
	switch (event_id) {

#		if NS_T309 == ON

			case TI_309 :

				if (Na_T309_option == ON)  {
					set_i_cause (C_C_TIMER, C_V_T309, (char FAR *) &Call_state);
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;
				}

#		endif

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST_11 */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void kdd_u11 ()
{
	switch (event_id) {

		 case TI_305 :
			Restore_cause ();	/* send saved cause of the previous DISC */
			set_ie_i (CODESET_0, CAUSE);
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (KDD_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		 default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void kdd_u12 ()
{
		switch (event_id) {

			case NS_CLEAR_RS :
				disc_cause_error ();
				Send_to_d_channel_and_save_spdu (REL);
				N308 = 0;
				Start_timer_ns (T308);
				Set_state (STATE_RELEASE_REQUEST_19);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void kdd_u19 ()
{
		switch (event_id) {

			case TI_308 :

				if (++N308 < MX_N308) {
					Send_saved_spdu_to_d_channel (REL);
					Restart_timer_ns (KDD_T308);

				} else {

					set_i_cause (C_C_TIMER, C_V_T308, (char FAR *) &Call_state);
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
				}

				break;

			case NS_CLEAR_RS :
				break;

			default :
				ns_unexpected_ev ();
				break;
		}

}

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2


						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*        N          */
						/*-------------------*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             n0 to n254 - network side - implements the processing of an
							  event according to the call state.

Usage            void uxx (void);

Related
functions usage void Stop_timer_ns (KDD_uchar x_timer);

				void Start_timer_ns (KDD_uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void kdd_n0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Call_ref = i_call_ref;
			Call_ces = Dl_ces;
			Call_ces_setup =Dl_ces;
			Call_sub_state = N6;
			Dl_call_count++;
			ns_action_to_cc (KDD_T300, T3_NIL, NS_CONN_IN,
											   STATE_CALL_INIT_1);
			break;

		case NS_CONN_RQ :
			N303 = 0;
			Start_timer_ns (KDD_T303);
			Send_to_d_channel_and_save_spdu (SETUP);
			Call_ces_setup = Dl_ces;
			Set_state (STATE_CALL_PRESENT_6);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of  user
			   action requesting call establishment from the network.
			*/

void kdd_n1 ()
{
	switch (event_id) {

		case NS_CALL_PROC_RQ :
			ns_action_to_dl (KDD_T300, T3_NIL, CALL_PROC,
											   STATE_OUTGOING_CALL_PROC_3);
			break;

		case NS_CONN_RS :
			ns_action_to_dl (KDD_T300, T3_NIL, CONN,
											   STATE_ACTIVE_10);
			break;

		case NS_ALERT_RQ:
			ns_action_to_dl (KDD_T300, T3_NIL, ALERT,
											   STATE_CALL_DELIVERED_4);
			break;

		case TI_300 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_PROTOCOL_ERROR_UNSPECIFIED_111, P_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			go_to_state_19 (KDD_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}


/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void kdd_n3 ()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void kdd_n4 ()
{
	switch (event_id) {

		case NS_PROGRESS_RQ :
			Send_to_d_channel (PROGRESS);
			break;

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void kdd_n6 ()
{

	switch (event_id) {

		case DA_CALL_PROC :
			Release_saved_spdu ();
			ns_action_to_cc (KDD_T303, KDD_T310, NS_CALL_PROC_IN,
												 STATE_INCOMING_CALL_PROC_9);
			break;

		case DA_ALERT :
			Release_saved_spdu ();
			ns_action_to_cc (KDD_T303, T3_NIL, NS_ALERT_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_CONN :
			Release_saved_spdu ();
			ns_action_to_cc (KDD_T303, KDD_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case TI_303 :

			if (++N303 != MX_N303) {
				Send_saved_spdu_to_d_channel (SETUP);
				Start_timer_ns (KDD_T303);

			} else {

				set_i_cause (C_C_NORMAL_EVENT, C_V_NO_USER_RESPONDING_18, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);

				ns_action_to_dl (T3_NIL, KDD_T305, DISC,
												   STATE_DISCONNECT_INDICATION_12);
			}

			break;

		default :
			ns_unexpected_ev ();
			break;


	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void kdd_n7 ()
{

	switch (event_id) {

		case DA_CONN :
			ns_action_to_cc (T3_NIL, KDD_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case DA_PROGRESS :
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void kdd_n8 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			ns_action_to_dl (KDD_T300, T3_NIL, CONN_ACK,
											   STATE_ACTIVE_10);
			break;

		case TI_300 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_PROTOCOL_ERROR_UNSPECIFIED_111, P_NIL);
			Save_cause ();									/* to send the RELEASE if T305 expire */
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, KDD_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROCEEDING */

		/* Incoming call proceeding state */

			/*
			   This state exists for an incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void kdd_n9 ()
{

	switch (event_id) {

		case DA_ALERT :
			ns_action_to_cc (KDD_T310, T3_NIL, NS_ALERT_IN,
												 STATE_CALL_RECEIVED_7);
			break;

		case DA_CONN :
			ns_action_to_cc (KDD_T310, KDD_T300, NS_CONN_CO,
												 STATE_CONNECT_REQUEST_8);
			break;

		case DA_PROGRESS :
			Stop_timer_ns (KDD_T310);
			Send_to_call_control (NS_PROGRESS_IN);
			break;

		case TI_310 :
			set_i_cause (C_C_PROTOCOL_ERROR, C_V_RECOVERY_ON_TIMER_EXPIRY_102, "310");
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, KDD_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void kdd_n10 ()
{

	switch (event_id) {

		case DA_CONN_ACK :
			/* no process */
			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void kdd_n11 ()
{

	switch (event_id) {

		case NS_CLEAR_RS :
			Stop_timer_ns (KDD_T300);
			go_to_state_19 (KDD_T308);
			break;

		case TI_300 :

			if (disc_cause_error () == NOK) {
				set_i_cause	(C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, P_NIL);
			}

			go_to_state_19 (KDD_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void kdd_n12 ()
{
	switch (event_id) {

		case TI_305 :
			go_to_state_19 (KDD_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void kdd_n19 ()
{
	switch (event_id) {

		case TI_308 :
			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (KDD_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		case NS_CLEAR_RS :

			break;		/* ignore */

		default :
			ns_unexpected_ev ();
			break;
	}
}

#endif

/*EOF*/
