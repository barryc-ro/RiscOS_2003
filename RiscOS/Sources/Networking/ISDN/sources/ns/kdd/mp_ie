
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ie.kdd
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	kdd_called_sub_add_spdu		(Void_parm);
	uchar	kdd_calling_sub_add_spdu	(Void_parm);
	uchar	kdd_cause_spdu				(Void_parm);
	uchar	kdd_chan_id_spdu			(Void_parm);
	uchar	kdd_llc_4ab_spdu			(Void_parm);
	uchar	kdd_llc_4b_spdu				(Void_parm);
	uchar	kdd_uui_spdu				(Void_parm);
	uchar	kdd_bc_5_spdu				(Void_parm);
	uchar	kdd_bc_6_spdu				(Void_parm);
	uchar	kdd_bc_7_spdu				(Void_parm);

#endif

			/* Bearer capability (BC) */

D_START (KDD_BC_P)
		D_VAL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_EXT_1		(_3)
		D_TABL		(TRF_MODE)
		D_TABL		(TRF_RATE)
		D_EXT_0_1	(_4)
		D_TABL		(STRUCT)
/*$if default */
		D_VAL		(CONFIG)
		D_VAL		(EST)
		D_EXT_0_1	(_4A)
		D_VAL		(SYMMETRY)
		D_TABL		(DEST_RATE)
		D_EXT_1		(_4B)

		D_OPTIONAL_OCTET(_5ABCD_6_7)
		D_FUNCTION	(FUNCTION_5)

		D_IF_VAL	(OCTET_5_IF)

			D_VAL			(LAYER_1)
			D_TABL			(PROTOCOL_1)
			D_EXT_0_1		(_5)
			D_TABL			(SYN_ASYN)
			D_TABL			(NEGOTIATION)
			D_TABL			(USER_RATE)

			/* V110 */

			D_IF_VAL	(V110)
				D_EXT_0_1	(V110_5A)
				D_TABL		(V110_INTER_RATE)
				D_TABL		(V110_TX_NIC)
				D_TABL		(V110_RX_NIC)
				D_TABL		(V110_TX_FC)
				D_TABL		(V110_RX_FC)
				D_PAD		(V110_PAD_5B)
				D_EXT_0_1	(V110_5B)
				D_TABL		(V110_STOP_BIT)
				D_TABL		(V110_DATA_BIT)
				D_TABL		(V110_PARITY)
				D_EXT_0_1	(V110_5C)
				D_TABL		(V110_DUPLEX)
				D_TABL		(V110_MODEM)
			D_END_IF	(ENDIF_V110)

			D_EXT_1		(END_5)

		D_END_IF			(ENDIF_OCTET_5)

		D_FUNCTION			(OCTET_6)

		D_IF_VAL			(OCTET_6_PR)
			D_VAL			(L_ID_2)
			D_TABL			(PROTOCOL_ID_2)
			D_EXT_1			(_6)
		D_END_IF			(_6_PR)

		D_FUNCTION			(OCTET_7)

		D_IF_VAL			(OCTET_7_PR)
			D_VAL			(L_ID_3)
			D_TABL			(PROTOCOL_ID_3)
			D_EXT_1			(_7)
		D_END_IF			(_7_PR)

D_END (BC_E)

START (KDD_BC_P)
		VAL		(5,2,CODING_STD_CCITT,			&i_bc[0].coding_std)
		TABL	(0,5,KDD_T_TRF_CAP,				&i_bc[0].trf_cap)
		EXT_1	()
		TABL	(5,2,KDD_T_TRF_MODE,			&i_bc[0].trf_mode)
		TABL	(0,5,KDD_T_TRF_RATE,			&i_bc[0].trf_rate)
		EXT_0_1	()
		TABL	(4,3,KDD_T_STRUCTURE,			&i_bc[0].structure)
/*$ function to prevent from default value p79 ? */
		VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_bc[0].config)
		VAL		(0,2,EST_DEMAND,				&i_bc[0].est)
		EXT_0_1	()
		VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_bc[0].symmetry)
		TABL	(0,5,KDD_T_TRF_RATE,			&i_bc[0].dest_rate)
		EXT_1	()

		OPTIONAL_OCTET ()
		FUNCTION	(kdd_bc_5_spdu)

		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)

			VAL		(5,2,LAYER_ID_1,				&i_bc[0].layer_id_1)
			TABL	(0,5,KDD_T_PROTOCOL_ID_1,		&i_bc[0].protocol_id_1)
			EXT_0_1	()
			TABL	(6,1,KDD_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL	(5,1,KDD_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL	(0,5,KDD_T_USER_RATE,			&i_bc[0].user_rate)

			/* V110 */

			IF_VAL	(I_IF, &i_bc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
				EXT_0_1	()
				TABL	(5,2,KDD_T_INTER_RATE,			&i_bc[0].inter_rate)
				TABL	(4,1,KDD_T_NIC_TX,				&i_bc[0].tx_nic)
				TABL	(3,1,KDD_T_NIC_RX,				&i_bc[0].rx_nic)
				TABL	(2,1,KDD_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
				TABL	(1,1,KDD_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
				PAD		(0,1)
				EXT_0_1	()
				TABL	(5,2,KDD_T_STOP_BIT,			&i_bc[0].stop_bit)
				TABL	(3,2,KDD_T_DATA_BIT,			&i_bc[0].data_bit)
				TABL	(0,3,KDD_T_PARITY,				&i_bc[0].data_bit)
				EXT_0_1	()
				TABL	(6,1,KDD_T_DUPLEX,				&i_bc[0].duplex)
				TABL	(0,6,KDD_T_MODEM,				&i_bc[0].modem)
			END_IF	()
			EXT_1	()
		END_IF ()
		FUNCTION(kdd_bc_6_spdu)

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_2,				&i_bc[0].layer_id_2)
			TABL    (0,5,KDD_T_PROTOCOL_ID_2,		&i_bc[0].protocol_id_2)
			EXT_1   ()
		END_IF		()

		FUNCTION(kdd_bc_7_spdu)

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			VAL		(5,2,LAYER_ID_3,				&i_bc[0].layer_id_3)
			TABL	(0,5,KDD_T_PROTOCOL_ID_3,		&i_bc[0].protocol_id_3)
			EXT_1   ()
		END_IF		()
END (0)

			/* Call state (CALL_STATE) */

D_START	(KDD_CALL_STATE_P)
	D_VAL		(CODING_STD)
	D_TABL		(VAL)
	D_END_OCTET	(_3)
D_END	(CALL_STATE_E)

START	(KDD_CALL_STATE_P)
	VAL			(6,2, CODING_STD_CCITT,		&i_call_state[0].coding_std)
	TABL		(0,6,KDD_T_CALL_STATE,		&i_call_state[0].val)
	END_OCTET	()
END		(0)

			/* Called party number (CALLED_NB) */

D_START	(KDD_CALLED_NB_P)
		D_TABL	(TYPE)
		D_TABL	(PLAN_ID)
		D_EXT_1	(_3)
		D_TEXT	(DIGIT_)
D_END	(CALLED_NB_E)

START	(KDD_CALLED_NB_P)
		TABL	(4,3,KDD_T_CALLED_NB_TYPE,	&i_called_nb[0].nb_type)
		TABL	(0,4,KDD_T_CALLED_NB_PLAN,	&i_called_nb[0].plan_id)
		EXT_1	()
		TEXT	(IA5,DIGIT, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END		(0)

			/* Called subaddress (CALLED_SUB_ADD) */

D_START	(KDD_CALLED_SUB_ADD_P)
		D_TABL	(TYPE)
		D_TABL	(IND)
		D_PAD	(NS_PAD_3)
		D_EXT_1	(_3)
D_END	(CALLED_SUB_ADD_Q)

START	(KDD_CALLED_SUB_ADD_P)
		TABL	(4,3,KDD_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
		TABL	(3,1,KDD_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1	()
END		(kdd_called_sub_add_spdu)

D_START	(KDD_INFO_SUB_ADD_F_P)
		D_VAL		(FORMAT)
		D_END_OCTET	(_5)
		D_TEXT		(INFO_)
D_END	(INFO_SUB_ADD_F_E)

START	(KDD_INFO_SUB_ADD_F_P)
		VAL			(0,8,FORMAT_IA5, &i_called_sub_add[0].format)
		END_OCTET	()
		TEXT		(IA5,ANY_CHAR, &i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
END		(0)

D_START	(KDD_INFO_SUB_ADD_P)
		D_TEXT	(INFO_)
D_END	(INFO_SUB_ADD_E)

START	(KDD_INFO_SUB_ADD_P)
		TEXT	(BINARY, ANY_OCTET, &i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
END		(0)

			/* Calling party number (CALLING_NB) */

D_START	(KDD_CALLING_NB_P)
		D_TABL		(TYPE)
		D_TABL		(PLAN_ID)
		D_EXT_0_1	(_3)
		D_TABL		(PRESENTATION)
		D_PAD		(NS_PAD_3A)
		D_TABL		(SCREEN_IND)
		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT		(DIGIT_)
D_END	(CALLING_NB_E)

START	(KDD_CALLING_NB_P)
		TABL	(4,3,KDD_T_CALLING_NB_TYPE,	&i_calling_nb[0].nb_type)
		TABL	(0,4,KDD_T_CALLING_NB_PLAN,	&i_calling_nb[0].plan_id)
		EXT_0_1 ()
		TABL	(5,2,KDD_T_CALLING_NB_PRES,	&i_calling_nb[0].pres)
		PAD		(2,3)
		TABL	(0,2,KDD_T_SCREEN_IND,		&i_calling_nb[0].screen_ind)
		EXT_1	()
		OPTIONAL_OCTET ()
		TEXT	(IA5,DIGIT, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

			/* Calling subaddress (CALLING_SUB_ADD) */

D_START	(KDD_CALLING_SUB_ADD_P)
		D_TABL	(TYPE)
		D_TABL	(IND)
		D_PAD	(NS_PAD_3)
		D_EXT_1	(_3)
D_END	(CALLING_SUB_ADD_E)

START	(KDD_CALLING_SUB_ADD_P)
		TABL	(4,3,KDD_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		TABL	(3,1,KDD_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1	()
END		(kdd_calling_sub_add_spdu)

D_START	(KDD_ORIG_INFO_SUB_ADD_F_P)
		D_VAL		(FORMAT)
		D_END_OCTET	(_4)
		D_TEXT		(INFO_)
D_END	(ORIG_INFO_SUB_ADD_F_E)

START	(KDD_ORIG_INFO_SUB_ADD_F_P)
		VAL			(0,8,FORMAT_IA5, &i_calling_sub_add[0].format)
		END_OCTET	()
		TEXT		(IA5,ANY_CHAR, &i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
END		(0)

D_START	(KDD_ORIG_INFO_SUB_ADD_P)
		D_TEXT	(INFO_)
D_END	(ORIG_INFO_SUB_ADD_E)

START	(KDD_ORIG_INFO_SUB_ADD_P)
		TEXT	(BINARY, ANY_OCTET, &i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
END		(0)

			/* Cause (CAUSE) */

D_START	(KDD_CAUSE_P)
		D_VAL		(CODING_STD)
		D_PAD		(NS_PAD_3)
		D_TABL		(LOCATION)
		D_EXT_0_1	(_3)
		D_TABL		(RECOMMENDATION)
		D_EXT_1		(_3A)
		D_TABL		(C_CLASS)
		D_TABX		(C_VAL)
		D_EXT_1		(_4)
D_END	(CAUSE_E_A)

START	(KDD_CAUSE_P)
		VAL		(5,2,CODING_STD_CCITT,		&i_cause[0].coding_std)
		PAD		(4,1)
		TABL	(0,4,KDD_T_LOCATION,		&i_cause[0].cause_loc)
		EXT_0_1	()
		TABL	(0,7,KDD_T_RECOMMENDATION,	&i_cause[0].recommend)
		EXT_1	()
		TABL	(4,3,KDD_T_C_C,				&i_cause[0].cause_class)
		TABX	(0,4,KDD_TX_C_V,			&i_cause[0].cause_class,	&i_cause[0].cause_val)
		EXT_1	()
END		(kdd_cause_spdu)

/*$*/

D_START	(KDD_DIAGNOSTIC_P)
	D_TEXT	(DIAGNOSTIC)
D_END   (DIAGNOSTIC_E)

START	(KDD_DIAGNOSTIC_P)
	TEXT	(BINARY, ANY_OCTET, 			&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)


			/* Channel idendification (CHAN_ID) */

D_START	(KDD_CHAN_ID_P)
	D_VAL	(INT_ID)
	D_TABL	(INT_TYPE)
	D_PAD	(NS_PAD_3)
	D_TABL	(PREF_EXCL)
	D_TABL	(D_CHAN_)
	D_TABX	(SEL)
	D_EXT_1	(_3)
D_END	(CHAN_ID_E)

START	(KDD_CHAN_ID_P)
	VAL		(6,1,INT_ID_IMPLICIT,		&i_chan_id[0].int_id)
	TABL	(5,1,KDD_T_INT_TYPE,		&i_chan_id[0].int_type)
	PAD		(4,1)
	TABL	(3,1,KDD_T_CHAN_PREF_EXCL,	&i_chan_id[0].pref_excl)
	TABL	(2,1,KDD_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABX	(0,2,KDD_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	EXT_1	()
END	(kdd_chan_id_spdu)

	/*-----*/

	/* PRI-type chan_id */

D_START	(KDD_CHAN_ID_PRI_P)
	D_VAL	(CODING)
	D_VAL	(NB_MAP)
	D_VAL	(TYPE)
	D_EXT_1	(_3_2)
	D_TABL	(NBER)
	D_END_OCTET	(_5)
D_END   (CHAN_ID_PRI_E)

START	(KDD_CHAN_ID_PRI_P)
	VAL			(5,2,CODING_STD_CCITT,	&i_chan_id[0].coding_std)
	VAL			(4,1,CHAN_NUMBER,		&i_chan_id[0].nb_map)
	VAL			(0,4,B_CHAN,			&i_chan_id[0].chan_type)
	EXT_1		()
	TABL		(0,8,KDD_T_CHAN_NUMBER,	&i_chan_id[0].chan_nb)
	END_OCTET	()
END	(0)

			/* High layer compatibility (HLC) */

D_START	(KDD_HLC_P)
		D_VAL	(CODING_STD)
		D_VAL	(INTERPRETATION)
		D_VAL	(PRESENTATION)
		D_EXT_1	(_3)
		D_TABL		(TELESERVICE)
		D_EXT_0_1	(_4)
		D_TABL		(EXT_TELESERVICE)
		D_EXT_1		(_5)
D_END	(HLC_E)

START	(KDD_HLC_P)
		VAL		(5,2,CODING_STD_CCITT,			&i_hlc[0].coding_std)
		VAL		(2,3,INTER_CCITT_CEPT,			&i_hlc[0].interpretation)
		VAL		(0,2,PRESENTATION_PROFIL,		&i_hlc[0].pres)
		EXT_1	()
		TABL	(0,7,KDD_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
		EXT_0_1	()
		TABL	(0,7,KDD_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
		EXT_1	()
END		(0)

			/* Low layer compatibility (LLC) */

D_START	(KDD_LLC_P)
		D_VAL		(CODING_STD)
		D_TABL		(TRF_CAP)
		D_EXT_0_1	(_3)
		D_TABL		(OUT_BAND_NEG)
		D_PAD		(NS_PAD_3A)
		D_EXT_1		(_3A)
		D_TABL		(TRF_MODE)
		D_TABL		(TRF_RATE)
		D_FUNCTION	(IF_4A)

		D_IF_VAL		(_4AB_NOT_DEFAULT)
			D_EXT_0_1	(_4)
			D_TABL		(STRUCT)
			D_VAL		(CONFIG)
			D_VAL		(EST)
			D_FUNCTION	(IF_4B)

			D_IF_VAL		(_4B_NOT_DEFAULT)
				D_EXT_0_1	(_4A)
				D_VAL		(SYMMETRY)
				D_TABL		(DEST_RATE)
			D_END_IF		(E_4B_NOT_DEFAULT)

		D_END_IF		(E_4AB_NOT_DEFAULT)

		D_EXT_1		(_4B)

		D_IF_VAL	(TRF_MOD_CIRCUIT)

			D_IF_VAL				(UNRESTRICTED_DI)
				D_OPTIONAL_OCTET	(_5_6_7)
			D_END_IF				(UDI)

		D_ELSE		(TRP_MOD_PACKET)
			D_OPTIONAL_OCTET	(_567)
		D_END_IF	(ENDIF_TRF_MOD_PACKET)

		D_VAL		(LAYER_1)
		D_TABL		(PROTOCOL_1)
		D_EXT_0_1	(_5)

		/* V110 */

		D_IF_VAL	(V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_EXT_0_1	(V110_5A)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(V110_PAD_5B)
			D_EXT_0_1	(V110_5B)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_EXT_0_1	(V110_5C)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
			D_EXT_1		(V110_5D)
		D_END_IF	(ENDIF_V110)

		/* V120 */

		D_IF_VAL	(V120_)
			D_TABL		(V120_SYN_ASYN)
			D_TABL		(V120_NEGOTIATION)
			D_TABL		(V120_USER_RATE)
			D_EXT_0_1	(V120_5A)
			D_TABL		(V120_HDR)
			D_TABL		(V120_MULTI_FRAME)
			D_TABL		(V120_OP_MODE)
			D_TABL		(V120_LLI)
			D_TABL		(V120_ASSIGN)
			D_TABL		(V120_BAND)
			D_PAD		(V120_PAD_5B)
			D_EXT_0_1	(V120_5B)
			D_TABL		(V120_STOP_BIT)
			D_TABL		(V120_DATA_BIT)
			D_TABL		(V120_PARITY)
			D_EXT_0_1	(V120_5C)
			D_TABL		(V120_DUPLEX)
			D_TABL		(V120_MODEM)
			D_EXT_1		(V120_5D)
		D_END_IF	(ENDIF_V120)

		D_VAL		(L_ID_2)
		D_TABL		(PROTOCOL_ID_2)
		D_EXT_0_1	(_6)
		D_VAL		(OPTION_2)
		D_EXT_1		(_6A)
		D_VAL		(L_ID_3)
		D_TABL		(PROTOCOL_ID_3)
		D_EXT_0_1	(_7)
		D_VAL		(OPTION_3)
		D_EXT_1 	(_7A)

D_END (LLC_E)

START	(KDD_LLC_P)
		VAL		(5,2,CODING_STD_CCITT,				&i_llc[0].coding_std)
		TABL	(0,5,KDD_T_TRF_CAP,					&i_llc[0].trf_cap)
		EXT_0_1	()
		TABL	(6,1,KDD_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
		PAD		(0,6)
		EXT_1	()
		TABL	(5,2,KDD_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABL	(0,5,KDD_T_TRF_RATE,				&i_llc[0].trf_rate)
		FUNCTION(kdd_llc_4ab_spdu)

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1	()
			TABL	(4,3,KDD_T_STRUCTURE,			&i_llc[0].structure)
			VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
			VAL		(0,2,EST_DEMAND,				&i_llc[0].est)
			FUNCTION(kdd_llc_4b_spdu)

			IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
				EXT_0_1	()
				VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_llc[0].symmetry)
				TABL	(0,5,KDD_T_TRF_RATE,			&i_llc[0].dest_rate)
			END_IF		()

		END_IF		()

		EXT_1	()

		IF_VAL	(I_IF, &i_llc[0].trf_mode, EQ, TRF_MODE_CIRCUIT)

			IF_VAL				(I_IF, &i_llc[0].trf_cap, EQ, TRF_CAP_UNRESTRICTED)
				OPTIONAL_OCTET	()
			END_IF				()

		ELSE	()
			OPTIONAL_OCTET	()
		END_IF	()

		VAL		(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
		TABL	(0,5,KDD_T_PROTOCOL_ID_1,		&i_llc[0].protocol_id_1)
		EXT_0_1	()

		/* V110 */

		IF_VAL	(I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			TABL	(6,1,KDD_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,KDD_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,KDD_T_USER_RATE,			&i_llc[0].user_rate)
			EXT_0_1	()
			TABL	(5,2,KDD_T_INTER_RATE,			&i_llc[0].inter_rate)
			TABL	(4,1,KDD_T_NIC_TX,				&i_llc[0].tx_nic)
			TABL	(3,1,KDD_T_NIC_RX,				&i_llc[0].rx_nic)
			TABL	(2,1,KDD_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
			TABL	(1,1,KDD_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
			PAD		(0,1)
			EXT_0_1	()
			TABL	(5,2,KDD_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,KDD_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,KDD_T_PARITY,				&i_llc[0].data_bit)
			EXT_0_1	()
			TABL	(6,1,KDD_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,KDD_T_MODEM,				&i_llc[0].modem)
			EXT_1	()
		END_IF	()

		/* V120 */

		IF_VAL	(I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
			TABL	(6,1,KDD_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,KDD_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,KDD_T_USER_RATE,			&i_llc[0].user_rate)
			EXT_0_1	()
			TABL	(6,1,KDD_T_HEADER,				&i_llc[0].hdr)
			TABL	(5,1,KDD_T_MULTI_FRAME,			&i_llc[0].multi_frame)
			TABL	(4,1,KDD_T_OP_MODE,				&i_llc[0].op_mode)
			TABL	(3,1,KDD_T_LLI,					&i_llc[0].lli)
			TABL	(2,1,KDD_T_ASSIGN,				&i_llc[0].assign)
			TABL	(1,1,KDD_T_BAND,				&i_llc[0].band)
			PAD		(0,1)
			EXT_0_1	()
			TABL	(5,2,KDD_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,KDD_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,KDD_T_PARITY,				&i_llc[0].data_bit)
			EXT_0_1	()
			TABL	(6,1,KDD_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,KDD_T_MODEM,				&i_llc[0].modem)
			EXT_1	()
		END_IF	()

		VAL		(5,2,LAYER_ID_2,					&i_llc[0].layer_id_2)
		TABL    (0,5,KDD_T_LLC_PROTOCOL_ID_2,		&i_llc[0].protocol_id_2)
		EXT_0_1	()
		VAL		(0,7,0,								&i_llc[0].option_2)
		EXT_1	()
		VAL		(5,2,LAYER_ID_3,					&i_llc[0].layer_id_3)
		TABL	(0,5,KDD_T_LLC_PROTOCOL_ID_3,		&i_llc[0].protocol_id_3)
		EXT_0_1	()
		VAL		(0,7,0,								&i_llc[0].option_3)
		EXT_1 	()

END (0)

			/* Progress indicator (PROGRESS_IND) */

D_START	(KDD_PROGRESS_IND_P)
	D_VAL	(CODING_STD)
	D_PAD	(NS_PAD_3)
	D_TABL	(LOCATION)
	D_EXT_1 (_3)
	D_TABL	(DESCRIPTION)
	D_EXT_1	(_4)
D_END		(PROGRESS_IND_E)

START	(KDD_PROGRESS_IND_P)
	VAL		(5,2,CODING_STD_CCITT,				&i_progress_ind[0].coding_std)
	PAD		(4,1)
	TABL	(0,4,KDD_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	EXT_1 	()
	TABL	(0,7,KDD_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
	EXT_1	()
END	(0)

			/* Restart indicator */

D_START (KDD_RESTART_IND_P)
	D_PAD	(NS_PAD)
	D_TABL	(OM_CLASS)
	D_EXT_1	(_3)
D_END (RESTART_IND_E)

START (KDD_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,KDD_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
	EXT_1	()
END (0)

			/* User to user information (UUI) */

D_START	(KDD_UUI_P)
	D_TABL		(PROTOCOL_DISCR)
	D_END_OCTET (_3)
D_END	(UUI_E)

START	(KDD_UUI_P)
	TABL		(0,8,KDD_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)
	END_OCTET 	()
END		(kdd_uui_spdu)

D_START	(KDD_UUI_IA5_P)
	D_TEXT	(INFO_)
D_END	(KDD_UUI_IA5_E)

START	(KDD_UUI_IA5_P)
	TEXT	(IA5,ANY_CHAR, &i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END		(0)

D_START (KDD_UUI_TNA_P)
	D_TEXT	(INFO_)
D_END	(UUI_TNA_E)

START 	(KDD_UUI_TNA_P)
	TEXT	(BINARY, ANY_OCTET, &i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END		(0)

/*EOF*/
