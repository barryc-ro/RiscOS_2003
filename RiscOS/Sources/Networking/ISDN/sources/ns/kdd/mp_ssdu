
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.kdd
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	kdd_bc_ra_ssdu		(Void_parm);
	uchar	kdd_chan_id_ssdu	(Void_parm);
	uchar	kdd_llc_ra_ssdu		(Void_parm);

#endif

		/*
		   meta description of the primitives used to communicate between
		   layer 4 and layer 3 of the network signalling entities.
		   These primitives are network dependent.
			(Ordered alphabetically)
		*/


			/* BC : bearer capabilities */

D_START	(KDD_P_BC)
		D_TABL		(TRF_CAP)
		D_TABL		(TRF_MODE)
		D_TABL		(TRF_RATE)
		D_TABL		(STRUCT)
		D_TABL		(DEST_RATE)
		D_TABL		(PROTOCOL_1)
D_END (P_BC_1)

START	(KDD_P_BC)
		TABL	(KDD_T_TRF_CAP,					&i_bc[0].trf_cap)
		TABL	(KDD_T_TRF_MODE,				&i_bc[0].trf_mode)
		TABL	(KDD_T_TRF_RATE,				&i_bc[0].trf_rate)
		TABL	(KDD_T_STRUCTURE,				&i_bc[0].structure)
		TABL	(KDD_T_TRF_RATE,				&i_bc[0].dest_rate)
/* $ cas tordus ! */
		TABL	(KDD_T_PROTOCOL_ID_1,			&i_bc[0].protocol_id_1)
END	(kdd_bc_ra_ssdu)

		/* V110 */

D_START	(KDD_P_BC_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
D_END (ENDIF_V110)

START	(KDD_P_BC_V110)
			TABL		(KDD_T_SYN_ASYN,			&i_bc[0].syn_asyn)
			TABL		(KDD_T_NEGOTIATION,			&i_bc[0].negotiation)
			TABL		(KDD_T_USER_RATE,			&i_bc[0].user_rate)
			TABL		(KDD_T_INTER_RATE,			&i_bc[0].inter_rate)
			TABL		(KDD_T_NIC_TX,				&i_bc[0].tx_nic)
			TABL		(KDD_T_NIC_RX,				&i_bc[0].rx_nic)
			TABL		(KDD_T_FLOW_CONTROL_TX,		&i_bc[0].tx_fc)
			TABL		(KDD_T_FLOW_CONTROL_RX,		&i_bc[0].rx_fc)
			TABL		(KDD_T_STOP_BIT,			&i_bc[0].stop_bit)
			TABL		(KDD_T_DATA_BIT,			&i_bc[0].data_bit)
			TABL		(KDD_T_PARITY,				&i_bc[0].parity)
			TABL		(KDD_T_DUPLEX,				&i_bc[0].duplex)
			TABL		(KDD_T_MODEM,				&i_bc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(KDD_P_BC_PAD)
	D_PAD		(PAD_1_8_15_19)
D_END (END_PAD_RA)

START	(KDD_P_BC_PAD)
	PAD			(13)
END (0)


/* $ octets 6 & 7 : special cases */

D_START	(KDD_P_BC_2)
	D_TABL	(PROTOCOL_ID_2)
	D_TABL	(PROTOCOL_ID_3)
D_END (BC_E)

START	(KDD_P_BC_2)
	TABL    (KDD_T_PROTOCOL_ID_2,		&i_bc[0].protocol_id_2)
	TABL	(KDD_T_PROTOCOL_ID_3,		&i_bc[0].protocol_id_3)
END (0)

			/* CALL_STATE : call state */

D_START	(KDD_P_CALL_STATE)
	D_TABL (VAL)
D_END (CALL_STATE_END)

START	(KDD_P_CALL_STATE)
	TABL (KDD_T_CALL_STATE,			&i_call_state[0].val)
END (0)

			/* CALLED_NB : called party number */

D_START	(KDD_P_CALLED_NB)
	D_TABL (CALLED_NB_NBERING_TYPE)
	D_TABL (CALLED_NB_NBERING_PLAN_ID)
	D_TEXT (CALLED_NB_DIGIT_PR)
D_END (P_CALLED_NB_END)

START	(KDD_P_CALLED_NB)
	TABL (KDD_T_CALLED_NB_TYPE,		&i_called_nb[0].nb_type)
	TABL (KDD_T_CALLED_NB_PLAN,		&i_called_nb[0].plan_id)
	TEXT (1,KDD_MX_SZ_CALLED_NB,DIGIT,&i_called_nb[0].lgth,(uchar **)&i_called_nb[0].p_add)
END (0)

			/* CALLED_SUB_ADD : called party sub address */

D_START	(KDD_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (DIGIT_)
D_END (P_CALLED_SUB_ADD_END)

START	(KDD_P_CALLED_SUB_ADD)
	TABL (KDD_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
	TABL (KDD_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
	TEXT (1,KDD_MX_SZ_CALLED_SUB_ADD,DIGIT,&i_called_sub_add[0].lgth,(uchar **)&i_called_sub_add[0].p_add)
END (0)

			/* CALLING_NB : calling party number */

D_START	(KDD_P_CALLING_NB)
	D_TABL (TYPE_N)
	D_TABL (PLAN_N)
	D_TABL (PRES_IND_N)
	D_TABL (SCREEN_IND_N)
	D_TEXT (DIGIT_N)
D_END (P_CALLING_NB_N_END)

START	(KDD_P_CALLING_NB)
	TABL (KDD_T_CALLING_NB_TYPE,	&i_calling_nb[0].nb_type)
	TABL (KDD_T_CALLING_NB_PLAN,	&i_calling_nb[0].plan_id)
	TABL (KDD_T_CALLING_NB_PRES,	&i_calling_nb[0].pres)
	TABL (KDD_T_SCREEN_IND,			&i_calling_nb[0].screen_ind)
	TEXT (0,KDD_MX_SZ_CALLED_NB,DIGIT,&i_calling_nb[0].lgth,(uchar **)&i_calling_nb[0].p_add)
END (0)

			/* CALLING_SUB_ADD : calling party sub adddress */

D_START	(KDD_P_CALLING_SUB_ADD)
	D_TABL (CALLING_NB_NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)
	D_TEXT (CALLING_SUB_ADD_U_DIGIT)
D_END (P_CALLING_SUB_ADD_END)

START	(KDD_P_CALLING_SUB_ADD)
	TABL (KDD_T_SUB_ADD_TYPE,		&i_calling_sub_add[0].sub_add_type)
	TABL (KDD_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
	TEXT (1,KDD_MX_SZ_CALLING_SUB_ADD,DIGIT,&i_calling_sub_add[0].lgth,(uchar **)&i_calling_sub_add[0].p_add)
END (0)

			/* CAUSE : Cause */

D_START	(KDD_P_CAUSE)
	D_TABL (LOCATION)
	D_TABL (RECOMMENDATION)
	D_TABL (OM_CLASS)
	D_TABX (VAL)
D_END (CAUSE_END)

START	(KDD_P_CAUSE)
	TABL (KDD_T_LOCATION,			&i_cause[0].cause_loc)
	TABL (KDD_T_RECOMMENDATION,		&i_cause[0].recommend)
	TABL (KDD_T_C_C,				&i_cause[0].cause_class)
	TABX (KDD_TX_C_V,				&i_cause[0].cause_class, &i_cause[0].cause_val)
END (0)

			/* CHAN_ID : channel identification */

D_START	(KDD_P_CHAN_ID)
	D_FUNCTION	(CHAN_ID_1)
	D_TABL		(_INT_TYPE_)
	D_TABL		(PREF_EXCL)
	D_TABL		(D_CHAN_)
	D_TABX		(SEL)
	D_TABL		(CHANNEL_NUMBER)
D_END	(P_CHAN_ID_END)

START	(KDD_P_CHAN_ID)
	FUNCTION	(kdd_chan_id_ssdu)
	TABL (KDD_T_INT_TYPE,			&i_chan_id[0].int_type)
	TABL (KDD_T_CHAN_PREF_EXCL,		&i_chan_id[0].pref_excl)
	TABL (KDD_T_D_CHAN,				&i_chan_id[0].d_chan)
	TABX (KDD_TX_CHAN_SEL,			&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)
	TABL (KDD_T_CHAN_NUMBER,		&i_chan_id[0].chan_nb)
END (0)

/*-------------------------------------------------------------------------*/

			/* HLC : high layer compatibility */

D_START	(KDD_P_HLC)
	D_TABL (TELESERVICE)
	D_TABL (EXT_TELESERVICE)
D_END (HLC_END)

START	(KDD_P_HLC)
	TABL (KDD_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)
	TABL (KDD_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
END (0)

			/* LLC : low layer compatibility */

D_START	(KDD_P_LLC)
		D_TABL		(TRF_CAP)
		D_TABL		(OUT_BAND_NEG)
		D_TABL		(TRF_MODE)
		D_TABL		(TRF_RATE)
		D_TABL		(STRUCT)
		D_TABL		(DEST_RATE)
		D_TABL		(PROTOCOL_1)
D_END (P_LLC_1)

START	(KDD_P_LLC)
		TABL	(KDD_T_TRF_CAP,					&i_llc[0].trf_cap)
		TABL	(KDD_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
		TABL	(KDD_T_TRF_MODE,				&i_llc[0].trf_mode)
		TABL	(KDD_T_TRF_RATE,				&i_llc[0].trf_rate)
		TABL	(KDD_T_STRUCTURE,				&i_llc[0].structure)
		TABL	(KDD_T_TRF_RATE,				&i_llc[0].dest_rate)
/* $ cas tordus ! */
		TABL	(KDD_T_PROTOCOL_ID_1,			&i_llc[0].protocol_id_1)

END	(kdd_llc_ra_ssdu)

		/* V110 */

D_START	(KDD_P_LLC_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(PAD_9_14)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
D_END (ENDIF_V110)

START	(KDD_P_LLC_V110)
			TABL		(KDD_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL		(KDD_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL		(KDD_T_USER_RATE,			&i_llc[0].user_rate)
			TABL		(KDD_T_INTER_RATE,			&i_llc[0].inter_rate)
			TABL		(KDD_T_NIC_TX,				&i_llc[0].tx_nic)
			TABL		(KDD_T_NIC_RX,				&i_llc[0].rx_nic)
			TABL		(KDD_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
			TABL		(KDD_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
			PAD			(6)
			TABL		(KDD_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL		(KDD_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL		(KDD_T_PARITY,				&i_llc[0].parity)
			TABL		(KDD_T_DUPLEX,				&i_llc[0].duplex)
			TABL		(KDD_T_MODEM,				&i_llc[0].modem)
END	(0)


D_START	(KDD_P_LLC_V120)
			D_TABL		(V120_SYN_ASYN)
			D_TABL		(V120_NEGOTIATION)
			D_TABL		(V120_USER_RATE)
			D_PAD		(PAD_4_8)
			D_TABL		(V120_HDR)
			D_TABL		(V120_MULTI_FRAME)
			D_TABL		(V120_OP_MODE)
			D_TABL		(V120_LLI)
			D_TABL		(V120_ASSIGN)
			D_TABL		(V120_BAND)
			D_TABL		(V120_STOP_BIT)
			D_TABL		(V120_DATA_BIT)
			D_TABL		(V120_PARITY)
			D_TABL		(V120_DUPLEX)
			D_TABL		(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(KDD_P_LLC_V120)
			TABL		(KDD_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL		(KDD_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL		(KDD_T_USER_RATE,			&i_llc[0].user_rate)
			PAD			(5)
			TABL		(KDD_T_HEADER,				&i_llc[0].hdr)
			TABL		(KDD_T_MULTI_FRAME,			&i_llc[0].multi_frame)
			TABL		(KDD_T_OP_MODE,				&i_llc[0].op_mode)
			TABL		(KDD_T_LLI,					&i_llc[0].lli)
			TABL		(KDD_T_ASSIGN,				&i_llc[0].assign)
			TABL		(KDD_T_BAND,				&i_llc[0].band)
			TABL		(KDD_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL		(KDD_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL		(KDD_T_PARITY,				&i_llc[0].parity)
			TABL		(KDD_T_DUPLEX,				&i_llc[0].duplex)
			TABL		(KDD_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(KDD_P_LLC_PAD)
			D_PAD		(PAD_1_19)
D_END (END_PAD_RA)

START	(KDD_P_LLC_PAD)
			PAD			(19)
END (0)


/* $ octets 6 et 7 : cas tordus !!! */

D_START	(KDD_P_LLC_2)
		D_IF_VAL	(IF_6)
			D_TABL		(PROTOCOL_ID_2)
		D_ELSE		(ELSE_6)
			D_PAD		(NS_PAD_6)
		D_END_IF	(ENDIF_PKT)

		D_TABL		(PROTOCOL_ID_3)

D_END (LLC_E)

START	(KDD_P_LLC_2)
		IF_VAL		(&i_llc[0].trf_mode, EQ, TRF_MODE_PACKET)
			TABL    (KDD_T_PROTOCOL_ID_2,		&i_llc[0].protocol_id_2)
		ELSE		()
			PAD		(1)
		END_IF		()

		TABL		(KDD_T_PROTOCOL_ID_3,		&i_llc[0].protocol_id_3)
END (0)

			/* PROGRESS_IND : progress indicator */

D_START	(KDD_P_PROGRESS_IND)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END (PROGRESS_IND_E)

START	(KDD_P_PROGRESS_IND)
	TABL (KDD_T_PROGRESS_LOCATION,		&i_progress_ind[0].progress_loc)
	TABL (KDD_T_PROGRESS_DESCRIPTION,	&i_progress_ind[0].progress_descr)
END	(0)

			/* RESTART_IND : Restart indicator */

D_START (KDD_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END (RESTART_IND_E)

START (KDD_P_RESTART_IND)
	TABL (KDD_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END (0)

			/* UUI : user to user information */

D_START (KDD_P_UUI)
	D_TABL (PROTOCOL_DISCR)
	D_TEXT (UUI_INFO)
D_END (UUI_END)

START (KDD_P_UUI)
	TABL (KDD_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)
	TEXT (0, KDD_MX_SZ_UUI, ANY_CHAR, 	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END (0)

/*EOF*/
