
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.kdd
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.kdd */

#include "kdd.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		kdd_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/

uchar kdd_chan_id_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {
		I_chan_id_int_type = (Na_type == BRI) ? INT_TYPE_BRI : INT_TYPE_PRI;
	}

	return (OK);
}

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*====================   CALL  ESTABLISHMENT  MESSAGES    =====================*/

		/* NS_ALERT_RQ */

#define KDD_NET_ALERT_RQ		KDD_ALERT_IN
#define KDD_NET_ALERT_IN		KDD_ALERT_IN
#define KDD_ALERT_RQ			KDD_ALERT_IN

		/* NS_ALERT_IN */

		/* NS_CALL_PROC_RQ */

#define KDD_NET_CALL_PROC_IN	KDD_CALL_PROC_IN
#define KDD_NET_CALL_PROC_RQ	KDD_CALL_PROC_IN
#define KDD_CALL_PROC_RQ		KDD_CALL_PROC_IN

		/* NS_CALL_PROC_IN */

		/* NS_CONN_RQ */

#define KDD_NET_CONN_IN			KDD_CONN_IN
#define KDD_NET_CONN_RQ			KDD_CONN_IN
#define KDD_CONN_RQ				KDD_CONN_IN


		/* NS_CONN_IN */

		/* NS_CONN_RS */

#define KDD_NET_CONN_CO			KDD_CONN_CO
#define KDD_NET_CONN_RS			KDD_CONN_CO
#define KDD_CONN_RS				KDD_CONN_CO

		/* NS_CONN_CO */

		/* NS_PROGRESS_RQ */

#define KDD_NET_PROGRESS_IN		KDD_PROGRESS_IN
#define KDD_NET_PROGRESS_RQ		KDD_PROGRESS_IN
#define KDD_PROGRESS_RQ			KDD_PROGRESS_IN

/*=====================    CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_RQ */

#define KDD_NET_CLEAR_IN		KDD_CLEAR_IN
#define KDD_NET_CLEAR_RQ		KDD_CLEAR_IN
#define KDD_CLEAR_RQ			KDD_CLEAR_IN

		/* NS_CLEAR_IN */

		/* NS_CLEAR_RS */

#define KDD_NET_CLEAR_CO		KDD_CLEAR_CO
#define KDD_NET_CLEAR_RS		KDD_CLEAR_CO
#define KDD_CLEAR_RS			KDD_CLEAR_CO

/*====================    	MISCELLANEOUS  MESSAGES    =======================*/

		/* NS_RESTART_RQ */

		/* NS_RESTART_RS */

		/* NS_RESTART_IN */

#define KDD_NET_RESTART_IN		KDD_RESTART_IN
#define KDD_NET_RESTART_RS		KDD_RESTART_IN
#define KDD_RESTART_RS			KDD_RESTART_IN
#define KDD_NET_RESTART_RQ		KDD_RESTART_IN
#define KDD_RESTART_RQ			KDD_RESTART_IN
#define KDD_NET_RESTART_CO		KDD_RESTART_IN
#define KDD_RESTART_CO			KDD_RESTART_IN

/*=========================================================================*/

#define Ns_kdd_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_kdd_end_table_or_function		};

#define Ns_kdd_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_kdd_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_kdd		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_kdd_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_kdd_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "kdd.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define KDD_MX_SSDU (sizeof(KDD_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar		kdd_mx_size_ssdu = KDD_MX_SSDU;

/*===========================================================================

							SPECIFIC FUNCTIONS
							------------------

	FROM CALL PROC APPLI current context : p_ssdu_val points on the SSDU current
	------------------------------------   indirect primitive value area.

								p_ind_buffer points on the next free
								location in the ind_buffer (used in pool
								to store text).

								p_data_ref points the top of the SSDU area.

	TO CALL PROC current context :
	-----------------------------

===========================================================================*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			kdd_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar kdd_llc_ra_ssdu ();

Return value : 	kdd_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar kdd_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_llc_protocol_id_1) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&KDD_P_LLC_V110);
					if (ret_code != OK) return (ret_code);
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&KDD_P_LLC_V120);
					if (ret_code != OK) return (ret_code);
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&KDD_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&KDD_P_LLC_2));

	} else {

			switch (I_llc_protocol_id_1) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&KDD_P_LLC_V110);
					if (ret_code != OK) return (ret_code);
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&KDD_P_LLC_V120);
					if (ret_code != OK) return (ret_code);
					break;

				default :
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&KDD_P_LLC_2));
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			kdd_bc_ra_ssdu - implements the specific processing
								  of a bc rate adaptation IE in a SSDU
								  primitive.

Usage           uchar kdd_bc_ra_ssdu ();

Return value : 	kdd_bc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, kdd_i_s.h

common objects : internal data structure i_bc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar kdd_bc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

		switch (I_bc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = r_exec_ssdu_ie((uchar *)&KDD_P_BC_V110);
				if (ret_code != OK) return (ret_code);
				break;

			default :
				r_exec_ssdu_ie ((uchar *)&KDD_P_BC_PAD);
				break;
		}
		return (r_exec_ssdu_ie ((uchar *)&KDD_P_BC_2));

	} else {

		switch (I_bc_protocol_id_1) {

			case PROTOCOL_ID_1_V110 :
				ret_code = s_exec_ssdu_ie((uchar *)&KDD_P_BC_V110);
				if (ret_code != OK) return (ret_code);
				break;

			default :
				break;
		}

		return (s_exec_ssdu_ie ((uchar *)&KDD_P_BC_2));
	}

}

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_kdd_table_or_function
#undef Ns_kdd_end_table_or_function
#undef Ns_kdd_tab_ssdu_ie_entry
#undef Ns_kdd_tab_ssdu_ie_mx_entry
#undef Ns_kdd_tab_ssdu_entry

#define Ns_kdd_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_kdd_end_table_or_function		}

#define Ns_kdd_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_kdd_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_kdd_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_kdd
#	define Message_header_ssdu_ie_kdd		Ns_kdd_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_kdd_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_kdd_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_kdd_ssdu ()
{
	uchar   i_pic;

#	include "kdd.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/
