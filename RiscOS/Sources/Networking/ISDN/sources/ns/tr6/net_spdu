
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_spdu.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta description of the DEUTSCHE TELECOM 1TR6 messages
 * (signalling protocol data unit) .
 *
 *		TR6 specific function :
 *
 *		 ie_type_eval - implements the evaluation of a conditional
 *					    TR6 IE type : Mandatory or Optional.
 *
 *-------------------------------------------------------------------------*/


/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
*
*SPDU model description :
*------------------------
*
*            spdu    tab_spdu
*    =====================================================
*    | id | event_id | u_n | n_u | type | p_ie | p_ie_SO |
*    |----|----------|-----|-----|------|------|---------|
*    |    |          |     |     |      |  X-------   X-------------------
*    |----|----------|-----|-----|------|------|  |      |               |
*    |    |          |     |     |      |      |  |      |               |
*    |----|----------|-----|-----|------|------|- | -----|               |
*    |    |          |     |     |      |      |  |      |               |
*                                                 |                      |
*                            spdu_ie              |                      |
*            =====================================v====================  |
*            | id | codeset | u_n | n_u | type | lgth_mini |lgth_maxi |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            ----------------                                            |
*                       |                                                |
*                       |                                                |
*                       -------> tab_ie                                  |
*                                                     --------------------
*                                          spdu_ie_so |
*                                        =============v=====================
*                                        | id | codeset | u_n | n_u | type |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*
*/
				/*
					 NET_SPDU.TR6 : description in a meta language  of
					 DEUTSCHE TELECOM 1TR6 messages.

				*/

				/* 1TR6 SPDU parametrers description */

CONST	struct spdu_param TR6_SPDU_PARAM = {
	PROTOCOL_DISCRIMINATOR_N1,			/* Protocol discriminator */
	1,									/* BRI call reference length for outgoing SPDU */
	1,									/* BRI call reference minimum length for checking incoming SPDU */
	1,									/* BRI call refernce maximum length for  checking incoming SPDU */
	1,									/* PRI call reference length for outgoing SPDU */
	1,									/* PRI call reference minimum length for checking incoming SPDU */
	1,									/* PRI call reference maximum length for checking incoming SPDU */
	ON,									/* IE ordered by IE ID within each codeset in the SPDU */
	ON,									/* Locking shift allowed */
	ON,									/* Non locking shift allowed */
	OFF,								/* Null length IE are not considered as missing in the SPDU */
	1,									/* Message type maximum length */
	OFF,								/* Global call reference value not meaningful */
	OFF,								/* NS segmentation. WARNING : NOT DEFINED IN TR6. MUST BE SET TO OFF. */
	OFF,								/* NS restart procedure */
	0,									/* Maximum number of restablish Data Link retry */
	16,									/* D channel */
	31									/* Maximum number of B channels */
};

					/*
						1TR6 procedure parameters description
						ON approve of the comment / OFF disapprove
					*/

CONST	struct net_proc_param TR6_NET_PROC_PARAM = {
	ON,									/* Some timers depend from the configuration type (POINT_TO_?) */
	OFF,								/* IE comprehension required procedure is applicable */
	OFF,								/* The sending a STATUS message is filtered according the cause value */
	ON,									/* Clear internal call when data link failure */

#	if EQUIPMENT == NT2
		OFF,							/* Internal timers are handled */
#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		OFF,							/* NFAS support */
#	endif

	OFF,								/* NS_INFO_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_FAC_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_NOTIFY_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
};

						/*
							 SPDU message description :
								- information element identifier,
								- information element codeset,
								- call control to D channel transfer (ON or OFF),
								- D channel to call control transfer (ON or OFF),
								- type (Mandatory Optional, Conditional),
								- minimal length,
								- maximal length,
								- number of allowed repetition.
						*/



							/* Alerting (ALERT) */

CONST	struct spdu_ie ALERT_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CONN_NB,		CODESET_0,		U_N_ALL,	OFF,		CD,		2,		28,		1},
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{CALLED_STATUS,	CODESET_6,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL}
};

							/* Call proceeding (CALL_PROC) */

CONST	struct spdu_ie CALL_PROC_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		5,		1},
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{IE_NIL}
};

							/* Connect (CONNECT) */

CONST	struct spdu_ie CONN_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CONN_NB,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		28,		1},
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		5,		1},
	{SPF_FAC,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		6,		26,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{SERVICE_IND,	CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		4,		4,		1},
	{CHARGING_INFO,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		10,		1},
	{DATE,			CODESET_6,		OFF,		N_U_ALL,	MD,		16,		19,		1},
	{IE_NIL}
};

							/* Connect acknowledge (CONNECT_ACK) */

CONST	struct spdu_ie CONN_ACK_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{CHARGING_INFO,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		10,		1},
	{DATE,			CODESET_6,		OFF,		N_U_ALL,	MD,		16,		19,		1},
	{IE_NIL}
};

							/* Setup (SETUP) */

CONST	struct spdu_ie SETUP_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		5,		1},
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		5,		1},

#	if NS_SPF_FACILITY == ON
		{SPF_FAC,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		6,		26,		1},
#	endif

	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		34,		1},
	{CALLING_NB,	CODESET_0,		U_N_ALL,	OFF,		CD,		4,		28,		1},
	{CALLING_NB,	CODESET_0,		OFF,		N_U_ALL,	OP,		2,		28,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		28,		1},
	{SERVICE_IND,	CODESET_6,		U_N_ALL,	N_U_ALL,	MD,		4,		4,		1},
	{ADD_ATTRIB,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		4,		1},
	{IE_NIL}
};

							/* Setup acknowledge (SETUP_ACK) */

CONST	struct spdu_ie SETUP_ACK_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		5,		1},
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{IE_NIL}
};

							/* Resume (RES) */

CONST	struct spdu_ie RES_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CALL_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{SERVICE_IND,	CODESET_6,		U_N_ALL,	OFF,		CD,		4,		4,		1},
	{IE_NIL}
};

							/* Resume acknowledge (RES_ACK) */

CONST	struct spdu_ie RES_ACK_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		5,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{CHARGING_INFO,	CODESET_6,		OFF,		N_U_ALL,	CD,		4,		10,		1},
	{IE_NIL}
};

							/* Resume reject (RES_REJ) */

CONST	struct spdu_ie RES_REJ_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	CD,		2,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{IE_NIL}
};

							/* Suspension (SUSP) */

CONST	struct spdu_ie SUSP_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CALL_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{IE_NIL}
};

							/* Suspension acknowledge (SUSP_ACK) */

CONST	struct spdu_ie SUSP_ACK_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{IE_NIL}
};

							/* Suspension reject (SUSP_REJ) */

CONST	struct spdu_ie SUSP_REJ_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	CD,		2,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{IE_NIL}
};

							/* User information (USER_INFO) */

CONST	struct spdu_ie USER_INFO_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{UUI,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		2,		133,	1},
	{IE_NIL}
};

CONST	struct spdu_ie_so USER_INFO_IE_TR6_SO[] =	{
/*	   ie			codeset     	u ---> n    n ---> u    type */
	{MORE_DATA,		CODESET_0,		U_N_ALL,	N_U_ALL,	OP},
	{IE_NIL}
};

							/* Detach (DETACH) */

CONST	struct spdu_ie DETACH_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{IE_NIL}
};

							/* Disconnect (DISCONNECT) */

CONST	struct spdu_ie DISC_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	OFF,		OP,		2,		4,		1},
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		2,		4,		1},
	{SPF_FAC,		CODESET_0,		OFF,		N_U_ALL,	CD,		6,		26,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{CHARGING_INFO,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		10,		1},
	{DATE,			CODESET_6,		OFF,		N_U_ALL,	MD,		2,		19,		1},
	{IE_NIL}
};

							/* Release (REL) */

CONST	struct spdu_ie REL_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	OFF,		OP,		2,		4,		1},
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		2,		4,		1},
	{CONN_NB,		CODESET_0,		OFF,		N_U_ALL,	CD,		4,		28,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{CHARGING_INFO,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		10,		1},
	{DATE,			CODESET_6,		OFF,		N_U_ALL,	MD,		2,		19,		1},
	{IE_NIL}
};

							/* Release acknowledge (REL_COMP) */

CONST	struct spdu_ie REL_COMP_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{IE_NIL}
};

							/* Congestion Control (TR6_CON_CON) */

CONST	struct spdu_ie CON_CON_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		2,		4,		1},
	{IE_NIL}
};

CONST	struct spdu_ie_so CON_CON_IE_TR6_SO[] =	{
/*	   ie			codeset     	u ---> n    n ---> u    type */
	{CONGEST_LEVEL,	CODESET_0,		OFF,	    N_U_ALL,    MD},
	{IE_NIL}
};

							/* Facility (TR6_FAC) */

CONST	struct spdu_ie FAC_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{SPF_FAC,		CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		6,		26,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	OP,		2,		42,		1},
	{CALLING_NB,	CODESET_0,		U_N_ALL, 	OFF,		OP,		4,		28,		1},
	{IE_NIL}
};

							/* Facility acknowledge (TR6_FAC_ACK) */

CONST	struct spdu_ie FAC_ACK_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{FAC_SELECT,	CODESET_6,		U_N_ALL,	N_U_ALL,	MD,		4,		4,		1},
	{IE_NIL}
};

							/* Facility reject (TR6_FAC_REJ) */

CONST	struct spdu_ie FAC_REJ_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		2,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{FAC_SELECT,	CODESET_6,		U_N_ALL,	N_U_ALL,	MD,		4,		4,		1},
	{IE_NIL}
};

							/* Information (INFO) */

CONST	struct spdu_ie INFO_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{SPF_FAC,		CODESET_0,		U_N_ALL,	OFF,		CD,		6,		26,		1},
	{SPF_FAC,		CODESET_0,		OFF,		N_U_ALL,	OP,		6,		26,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		2,		34,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	OFF,		OP,		4,		28,		1},
	{CALLED_NB,		CODESET_0,		OFF,		N_U_ALL,	CD,		4,		28,		1},
	{CHARGING_INFO,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		10,		1},
	{IE_NIL}
};

							/* Status (STAT) */

CONST	struct spdu_ie STATUS_IE_TR6[] =	{
/*    	ie         	codeset 	  	u --->n   	n--->u		type	mini	maxi	repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	OFF,		CD,		2,		4,		1},
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		2,		4,		1},
	{DISPLAY,		CODESET_0,		OFF,		N_U_ALL,	CD,		2,		42,		1},
	{IE_NIL}
};


/*=========================================================================*/

#define Ns_tr6_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_tr6_end_table_or_function		};

#define Ns_tr6_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)		\
			Ns_tab_spdu_entry (pr, ev, u_n, n_u, usa, t_ie, t_so_ie),		

#include "tr6.tab_spdu"		/* include Table describing the primitives */

#define TR6_MX_TAB_SPDU (Rnd_sizeof (TR6_TAB_SPDU)/ SPDU_ELEM_SIZE) /* table size */

CONST uchar tr6_mx_size_spdu = TR6_MX_TAB_SPDU;

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             tr6_ie_type_eval - implements the evaluation of a conditional
									TR6 IE type : Mandatory or Optional.

Usage            uchar tr6_ie_type_eval (uchar spdu_id_p, uchar ie_id_p);
							- spdu_id_p : SPDU ID,
							- ie_id_p   :  IE ID,

Return value    tr6_ie_type_eval returns the IE type Mandatory or optional.

common constants and declarations : services.h, ns.h

common objects : call context
							- direction : from network or from user.

*--------------------------------------------------------------------------*/
uchar tr6_ie_type_eval (spdu_id_p, ie_id_p)
	uchar	spdu_id_p;			/* SPDU ID */
	uchar	ie_id_p;			/* IE ID */

{
	switch (i_entity_origination) {

		case ENT_CC :

			if (Na_connection == POINT_TO_MULTIPOINT) {

				switch (spdu_id_p) {

					case ALERT :
					case CALL_PROC :
					case CONN :
					case TR6_INFO :
					case SETUP_ACK :
					case TR6_STATUS :
						return (EX);

					case SUSP :
					case SETUP :
						return (OP);

					case RES :

						if (ie_id_p == CALL_ID) {
							return (OP);

						} else {

							return (MD);
						}
				}

			} else {

				switch (spdu_id_p) {

					case ALERT :
					case CONN :
					case TR6_INFO :
						return (OP);

					case CALL_PROC :
					case SETUP :
					case SETUP_ACK :
					case TR6_STATUS :
						return (MD);

					case RES :
					case SUSP :
						return (EX);

				}

			}

			break;

		case ENT_DL_D :

			if (Na_connection == POINT_TO_MULTIPOINT) {

				switch (spdu_id_p) {

					case TR6_INFO :

						if (ie_id_p == CALLED_NB) {
							return (EX);

						} else {

							return (OP);
						}

					case RES_ACK :

						if (ie_id_p == CHAN_ID) {
							return (MD);

						} else {

							return (OP);
						}

					case RES_REJ :
					case SUSP_REJ :

						if (ie_id_p == CAUSE) {
							return (MD);

						} else {

							return (OP);
						}

					default :
						return (OP);
				}


			} else {

				if ((spdu_id_p == TR6_INFO) && (ie_id_p == CALLED_NB)) {
					return (OP);

				} else {

					return (EX);
				}

			}
	}

	return (OP);

}

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Table above */

#undef Ns_tr6_table_or_function
#undef Ns_tr6_end_table_or_function
#undef Ns_tr6_tab_spdu_entry

#define Ns_tr6_table_or_function(str, tab)	i_pic = 0;						

#define Ns_tr6_end_table_or_function

#define Ns_tr6_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)						\
			Pic_init_struct_array (TR6_TAB_SPDU, i_pic, p_ie, (struct spdu_ie *)t_ie);	\
			Pic_init_struct_array_next (TR6_TAB_SPDU, p_ie_so, (struct spdu_ie_so *)t_so_ie);

void pic_init_ns_tr6_spdu ()
{
	uchar   i_pic;

#	include "tr6.tab_spdu"
}

#endif /* end of PIC used} */

/*EOF*/
