
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ssdu.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	tr6_spf_fac_ssdu				(Void_parm);
	uchar	tr6_charging_info_ssdu			(Void_parm);
	uchar	tr6_service_ind_add_info_ssdu	(Void_parm);

#endif

/*-------------------------------------------------------------------------*/

		/*
		   NET_SSDU.tr6 : meta description of the primitives used to
		   communicate between layer 4 and layer 3 of the network signalling
		   entities. These primitives are network dependent.
		*/

/*------------ CONGEST_LEVEL : congestion level */

D_START	(TR6_SSDU_CONGEST_LEVEL)
	D_TABL (LEVEL)
D_END	(END_SSDU)

START	(TR6_SSDU_CONGEST_LEVEL)
	TABL (TR6_T_CONGEST_LEVEL,				&i_congest_level[0].congest_level)
END		(0)

/*------------ CAUSE : Cause */

D_START	(TR6_SSDU_CAUSE)
	D_TABL (OM_CLASS)
	D_TABX (VAL_)
	D_TABL (LOCATION)
D_END (END_SSDU)

START	(TR6_SSDU_CAUSE)
	TABL (TR6_T_C_C,						&i_cause[0].cause_class)
	TABX (TR6_TX_C_V,						&i_cause[0].cause_class, &i_cause[0].cause_val)
	TABL (TR6_T_LOCATION,					&i_cause[0].cause_loc)
END (0)

/*------------ CONN_NB : conn party number */

D_START	(TR6_SSDU_CONN_NB)
	D_TABL (CONN_NB_NBERING_TYPE)
	D_TABL (CONN_NB_NBERING_PLAN_ID)
	D_TEXT (CONN_NB_DIGIT_PR)
D_END (END_SSDU)

START	(TR6_SSDU_CONN_NB)
	TABL (TR6_T_CONN_NB_TYPE,				&i_conn_nb[0].nb_type)
	TABL (TR6_T_CONN_NB_PLAN,				&i_conn_nb[0].plan_id)
	TEXT (0,26,DIGIT,					&i_conn_nb[0].lgth,	(uchar **)&i_conn_nb[0].p_add)
END (0)

/*------------ CALL_ID : call identity */

D_START	(TR6_SSDU_CALL_ID)
	D_ANY_VAL	(CALL_ID_VAL_)
D_END (END_SSDU)

START	(TR6_SSDU_CALL_ID)
	ANY_VAL (&i_call_id[0].val)
END (0)

/*------------ CHAN_ID : channel identification */

D_START	(TR6_SSDU_CHAN_ID)
	D_TABL	(INT_TYPE)
	D_TABL	(PREF_EXCL)
	D_TABX	(SEL)
	D_IF_VAL(IF_PRI)
		D_TABL	(CHANNEL_NUMBER)
	D_ELSE	(ELSE_)
		D_PAD	(NS_PAD_)
D_END (END_SSDU)

START	(TR6_SSDU_CHAN_ID)
	TABL 	(TR6_T_INT_TYPE,				&i_chan_id[0].int_type)
	TABL 	(TR6_T_CHAN_PREF_EXCL,			&i_chan_id[0].pref_excl)
	TABX 	(TR6_TX_CHAN_SEL,				&i_chan_id[0].int_type,	&i_chan_id[0].chan_sel)
	IF_VAL	(&i_chan_id[0].int_type, EQ, INT_TYPE_PRI)
		TABL 	(TR6_T_CHAN_NUMBER,			&i_chan_id[0].chan_nb)
	ELSE	()
		PAD		(1)
END (0)

#if NS_SPF_FACILITY == ON

/*------------ SPF_FAC : network specific facilities */

D_START	(TR6_SSDU_SPF_FAC)
	D_TABL		(FAC_CODE_)
	D_TABL		(SERVICE_)
D_END (SWITCH_CODE)

START	(TR6_SSDU_SPF_FAC)
	TABL (TR6_T_SPF_FAC_CODE, 				&i_spf_fac[0].Code)
	TABL (TR6_T_SERVICE_IND,				&i_spf_fac[0].Service)
END(tr6_spf_fac_ssdu)

/*---*/

	/*
	   The following meta-programs describe the 'Additional Information' field
	   decoding, according to the 'Service' field.
	*/

/*---*/

	D_START	(TR6_SSDU_SPF_FAC_ADD_NIL)
		D_VAL	(_ADD_INFO_NIL)
		D_PAD	(_6)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_ADD_NIL)
		VAL		(0,							&i_spf_fac[0].add_info)
		PAD		(6)
	END	(0)

		/*---*/

	D_START	(TR6_SSDU_SPF_FAC_ADD_DF)
		D_TABX	(_ADD_INFO_DEFAULT)
		D_PAD	(_6)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_ADD_DF)
		TABX	(TR6_TX_ADD_INFO,			&i_spf_fac[0].Service, &i_spf_fac[0].add_info)
		PAD		(6)
	END	(0)

		/*---*/

	D_START	(TR6_SSDU_SPF_FAC_64_SYN)
		D_PAD	(_ADD_INFO)
		D_VAL	(_SYN)
		D_TABL	(_PROT_1)
		D_PAD	(_3)
		D_TABL	(_USER_RATE_SYN)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_64_SYN)
		PAD		(1)
		VAL		(ADD_SYN,					&i_spf_fac[0].syn_asyn)
		TABL	(TR6_T_ADD_INFO_PROTOCOL_ID_1,	&i_spf_fac[0].protocol_id_1)
		PAD		(3)
		TABL	(TR6_T_ADD_INFO_USER_RATE_SYN,	&i_spf_fac[0].user_rate)
	END	(0)

		/*---*/

	D_START	(TR6_SSDU_SPF_FAC_64_ASYN)
		D_PAD	(_ADD_INFO)
		D_VAL	(_ASYN)
		D_PAD	(_PROT_1)
		D_TABL	(_DATA_BIT)
		D_TABL	(_STOP_BIT)
		D_TABL	(_PARITY)
		D_TABL	(_USER_RATE_ASYN)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_64_ASYN)
		PAD		(1)
		VAL		(ADD_ASYN,					&i_spf_fac[0].syn_asyn)
		PAD		(1)
		TABL	(TR6_T_ADD_INFO_DATA_BIT,		&i_spf_fac[0].data_bit)
		TABL	(TR6_T_ADD_INFO_STOP_BIT,		&i_spf_fac[0].stop_bit)
		TABL	(TR6_T_ADD_INFO_PARITY,			&i_spf_fac[0].parity)
		TABL	(TR6_T_ADD_INFO_USER_RATE_ASYN,	&i_spf_fac[0].user_rate)
	END	(0)

/*---*/

	/*
	   The following meta-programs describe the 'Parafeld' fields according
	   to the 'Facility code' field.
	*/

/*---*/

	D_START	(TR6_SSDU_SPF_FAC_CONGESTION)
		D_PAD	(PARAM_1_2)
		D_TEXT	(CONGEST_TYPES)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_CONGESTION)
		PAD		(2)
		TEXT	(1,18,ANY_CHAR, 		&i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)

				/*
				   Note about the use of ANY_CHAR here :
				   the actual CONGESTION TYPE valid values will be (have been)
				   checked by the SPDU sending (receiving) procedure, so it is
				   not necessary to check them very clothly at this point.
				*/
	END	(0)

		/*---*/

	D_START	(TR6_SSDU_SPF_FAC_REDIR_NB)
		D_TABL	(TYPE)
		D_TABL	(PLAN_ID)
		D_TEXT	(DIGITS_)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_REDIR_NB)
		TABL	(TR6_T_CONN_NB_TYPE,		&i_spf_fac[0].Fac_type)
		TABL	(TR6_T_CONN_NB_PLAN,		&i_spf_fac[0].Fac_plan_id)
		TEXT	(1,26,DIGIT, 			&i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
	END	(0)

		/*---*/

	D_START	(TR6_SSDU_SPF_FAC_B_CHANNEL)
		D_IF_VAL(BASIC_INTERFACE)
			D_TABL	(BRI_B_CHANNEL)
		D_ELSE	(PRIMARY_INTERFACE)
			D_TABL	(PRI_B_CHANNEL)
		D_END_IF(INTERFACE)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_B_CHANNEL)

	/*
		The 'spf_fac_ssdu' function sets 'ie_if_flag' to ON if the interface
		type is Basic-Rate-Interface, and to OFF otherwise.
	*/
		IF_VAL	(&ie_if_flag, EQ, ON)
			TABL	(TR6_T_SPF_FAC_B_CHAN,	&i_spf_fac[0].Fac_b_chan)
		ELSE	()
			TABL	(TR6_T_CHAN_NUMBER,		&i_spf_fac[0].Fac_b_chan)
		END_IF	()
	END	(0)

		/*---*/

	D_START	(TR6_SSDU_SPF_FAC_CUG_INDEX)
		D_TABL	(CUG_INDEX_1)
		D_TABL	(CUG_INDEX_0)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_CUG_INDEX)
		TABL	(TR6_T_DIGIT, 				&i_spf_fac[0].Fac_cug_index_1)
		TABL	(TR6_T_DIGIT, 				&i_spf_fac[0].Fac_cug_index_0)
	END	(0)

		/*---*/

	D_START	(TR6_SSDU_SPF_FAC_SHIFT)
		D_TABL	(EAZ_1)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_SHIFT)
		TABL	(TR6_T_DIGIT, 	 		&i_spf_fac[0].Fac_eaz_1)
	END	(0)

		/*---*/

	D_START	(TR6_SSDU_SPF_FAC_BILATERAL_SHIFT)
		D_TABL	(EAZ_1)
		D_TABL	(EAZ_2)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SPF_FAC_BILATERAL_SHIFT)
		TABL	(TR6_T_DIGIT, 	 		&i_spf_fac[0].Fac_eaz_1)
		TABL	(TR6_T_DIGIT, 	 		&i_spf_fac[0].Fac_eaz_2)
	END	(0)

#endif

/*------------ DISPLAY : display facility */

D_START	(TR6_SSDU_DISPLAY)
	D_TEXT (DISPLAY_INFO)
D_END (END_SSDU)

START	(TR6_SSDU_DISPLAY)
	TEXT (0,40,ANY_CHAR,				&i_display[0].lgth,	(uchar **)&i_display[0].p_info)
END (0)


/*------------ CALLING_NB : calling party number */

D_START	(TR6_SSDU_CALLING_NB)
	D_TABL (TYPE_N)
	D_TABL (PLAN_N)
	D_TEXT (DIGIT_N)
D_END (END_SSDU)

START	(TR6_SSDU_CALLING_NB)
	TABL (TR6_T_CONN_NB_TYPE,			&i_calling_nb[0].nb_type)
	TABL (TR6_T_CONN_NB_PLAN,			&i_calling_nb[0].plan_id)
	TEXT (0,22,DIGIT,					&i_calling_nb[0].lgth,(uchar **)&i_calling_nb[0].p_add)
END (0)

/*------------ CALLED_NB : called party number */

D_START	(TR6_SSDU_CALLED_NB)
	D_TABL (TYPE_N)
	D_TABL (PLAN_N)
	D_TEXT (DIGIT_N)
D_END (END_SSDU)

START	(TR6_SSDU_CALLED_NB)
	TABL (TR6_T_CONN_NB_TYPE,				&i_called_nb[0].nb_type)
	TABL (TR6_T_CONN_NB_PLAN,				&i_called_nb[0].plan_id)
	TEXT (1,22,DIGIT,					&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END (0)

/*-------------- KEYPAD : keypad facility */

D_START	(TR6_SSDU_KEYPAD)
	D_TEXT (KEYPAD_INFO)
D_END (KEYPAD_END)

START	(TR6_SSDU_KEYPAD)
	TEXT (0,32,DIGIT_E,					&i_keypad[0].lgth,(uchar **)&i_keypad[0].p_info)
END (0)

/*------------ UUI : user to user information */

D_START	(TR6_SSDU_UUI)
	D_TEXT (UUI_INFO)
D_END (END_SSDU)

START	(TR6_SSDU_UUI)
	TEXT (0, 128, ANY_CHAR, 			&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END (0)


/*========================= codeset 6 IEs =================================*/


/*------------ Service indicator (SERVICE_IND) */

D_START	(TR6_SSDU_SERVICE_IND)
	D_TABL	(SERVICE)
D_END	(END_SSDU)

START	(TR6_SSDU_SERVICE_IND)
	TABL	(TR6_T_SERVICE_IND,				&i_service_ind[0].service)
END	(tr6_service_ind_add_info_ssdu)

/*---*/

	D_START	(TR6_SSDU_SERVICE_IND_ADD_DF)
		D_TABX	(_ADD_INFO_DEFAULT)
		D_PAD	(_6_)
	D_END	(END_SSDU)

	START	(TR6_SSDU_SERVICE_IND_ADD_DF)
		TABX	(TR6_TX_ADD_INFO,			&i_service_ind[0].service, &i_service_ind[0].add_info)
		PAD		(6)
	END	(0)

/*---*/

	D_START	(TR6_SSDU_ADD_64_SYN)
		D_PAD	(_ADD_INFO)
		D_VAL	(_SYN)
		D_TABL	(_PROT_1)
		D_PAD	(_3_)
		D_TABL	(_USER_RATE_SYN)
	D_END	(END_SSDU)

	START	(TR6_SSDU_ADD_64_SYN)
		PAD		(1)
		VAL		(ADD_SYN,					&i_service_ind[0].syn_asyn)
		TABL	(TR6_T_ADD_INFO_PROTOCOL_ID_1,	&i_service_ind[0].protocol_id_1)
		PAD		(3)
		TABL	(TR6_T_ADD_INFO_USER_RATE_SYN,	&i_service_ind[0].user_rate)
	END	(0)

/*---*/

	D_START	(TR6_SSDU_ADD_64_ASYN)
		D_PAD	(_ADD_INFO)
		D_VAL	(_ASYN)
		D_PAD	(_PROT_1)
		D_TABL	(_DATA_BIT)
		D_TABL	(_STOP_BIT)
		D_TABL	(_PARITY)
		D_TABL	(_USER_RATE_aSYN)
	D_END	(END_SSDU)

	START	(TR6_SSDU_ADD_64_ASYN)
		PAD		(1)
		VAL		(ADD_ASYN,						&i_service_ind[0].syn_asyn)
		PAD		(1)
		TABL	(TR6_T_ADD_INFO_DATA_BIT,		&i_service_ind[0].data_bit)
		TABL	(TR6_T_ADD_INFO_STOP_BIT,		&i_service_ind[0].stop_bit)
		TABL	(TR6_T_ADD_INFO_PARITY,			&i_service_ind[0].parity)
		TABL	(TR6_T_ADD_INFO_USER_RATE_ASYN,	&i_service_ind[0].user_rate)
	END	(0)


/*------------ Charging information (CHARGING_INFO) */


D_START	(TR6_SSDU_CHARGING_INFO)
	D_PAD	(_PADDING_)
D_END	(END_SSDU)

START	(TR6_SSDU_CHARGING_INFO)
	PAD	(3)
END	(tr6_charging_info_ssdu)


/*------------ Date (DATE) */

D_START	(TR6_SSDU_DATE)
	D_TEXT	(DATE_INFO)
D_END	(END_SSDU)

START	(TR6_SSDU_DATE)
	TEXT	(14,17,ANY_CHAR,			&i_date[0].lgth,	(uchar **)&i_date[0].p_info)
END	(0)


/*------------ Facility select (FAC_SELECT) */

D_START	(TR6_SSDU_FAC_SELECT)
	D_TABL		(FAC_CODE)
	D_TABL		(SERVICE)
D_END	(END_SSDU)

START	(TR6_SSDU_FAC_SELECT)
	TABL	(TR6_T_SPF_FAC_CODE,			&i_fac_select[0].code)
	TABL	(TR6_T_SERVICE_IND,				&i_fac_select[0].service)
END	(0)


/*------------ Status of facilities (FAC_STAT) */

D_START	(TR6_SSDU_FAC_STAT)
	D_TEXT	(FAC_STAT_INFO)
D_END	(END_SSDU)

START	(TR6_SSDU_FAC_STAT)
	TEXT	(0,6,ANY_CHAR,				&i_fac_stat[0].lgth,	(uchar **)&i_fac_stat[0].p_info)
END	(0)


/*------------ Called status (CALLED_STATUS) */

D_START	(TR6_SSDU_CALLED_STATUS)
	D_TABL		(STATUS_)
D_END	(END_SSDU)

START	(TR6_SSDU_CALLED_STATUS)
	TABL	(TR6_T_CALLED_STATUS,			&i_call_state[0].val)
END	(0)


/*------------ Additional transmission attributes (ADD_ATTRIB) */

D_START	(TR6_SSDU_ADD_ATTRIB)
	D_TABL	(FLAG)
	D_TABL	(ATTRIB)
D_END	(END_SSDU)

START	(TR6_SSDU_ADD_ATTRIB)
	TABL	(TR6_T_RQ_IN_FLAG,				&i_add_attrib[0].rq_in_flag)
	TABL	(TR6_T_ADD_ATTRIB,				&i_add_attrib[0].attrib)
END	(0)

/*EOF*/
