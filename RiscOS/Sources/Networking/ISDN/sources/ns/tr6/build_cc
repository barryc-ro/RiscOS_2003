
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_cc.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		cc_load_ns_test - implements the loading of a NS test primitive
 *            ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage           uchar cc_load_ns_test (code_t primitive_code, nai_t nai,
									   conn_id_t conn_id);
							- primitive_code 	= code of the primitive to send,
							- nai				= network access ID,
							- conn_id			= connection ID.

Return value : 	cc_load_ns_test returns = OK
										= NOK

Common constants and declarations : ns.h, isdn.h

Common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar tr6_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t		prim_code;		/* primitive code */
	nai_t 		nai;			/* network access ID */
	sapi_t		sapi;			/* sapi */
	conn_id_t	conn_id;		/* connection ID */
{
		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

		/* Switch according to the primitive to send */

	switch (prim_code) {

/*==========================================================================*/

#if EQUIPMENT == TE

		/*========== primitives as seen from NT side ==========*/

	/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :
			Isdn_init_tr6_ctx_rq_rs				(conn_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_calling_nb		(conn_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "7"
											);

			Isdn_tr6_store_called_nb		(conn_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "149223771"
											);

			Isdn_tr6_store_service_ind_64_SYN(conn_rq,
											 ADD_PROTOCOL_ID_1_V110_X30,
											 ADD_2400
											);

			break;

	/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_tr6_ctx_rq_rs 			(conn_rs,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_conn_nb			(conn_rs,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "7"
											);

			break;

	/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_tr6_ctx_rq_rs				(clear_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_cause			(clear_rq,
											 C_C_000,
											 C_V_BEARER_SERVICE_NOT_IMPLEMENTED,
											 LOCATION_NOT_MEANINGFUL
											);

			break;

	/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_tr6_ctx_rq_rs				(clear_rs,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_cause			(clear_rs,
											 C_C_000,
											 C_V_BEARER_SERVICE_NOT_IMPLEMENTED,
											 LOCATION_NOT_MEANINGFUL
											);

			break;

	/*---------------- SETUP_ACK_RQ */

		case NS_SETUP_ACK_RQ :
			Isdn_init_tr6_ctx_rq_rs				(setup_ack_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_chan_id_BRI		(setup_ack_rq,
											 CHAN_PREF,
											 B1_CHAN
											);

			break;

	/*---------------- CALL_PROC_RQ (== CALL_SENT_RQ) */


		case NS_CALL_PROC_RQ :
			Isdn_init_tr6_ctx_rq_rs				(call_proc_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_chan_id_BRI		(call_proc_rq,
											 CHAN_EXCL,
											 B1_CHAN
											);

			break;

	/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_tr6_ctx_rq_rs				(alert_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_conn_nb			(alert_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "7"
											);

			break;

	/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_tr6_ctx_rq_rs				(info_rq,
											 Buffer_a_first_data
											);
/*
			Isdn_tr6_store_spf_fac_B_CHANNEL(info_rq,
											 SERVICE_IND_FERNSPRECHEN,
											 SPF_B1_CHANNEL
											);
*/
			Isdn_tr6_store_called_nb		(info_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "99"
											);

			break;

	/*---------------- USER INFORMATION*/

		case NS_USER_INFO_RQ :
			Isdn_init_tr6_ctx_rq_rs				(user_info_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_more_data		(user_info_rq
											);

			Isdn_tr6_store_uui				(user_info_rq,
											 "*** UUI user info rq ***"
											);

			break;

	/*---------------- SUSPEND REQUEST */

		case  NS_SUSPEND_RQ :
			Isdn_init_tr6_ctx_rq_rs				(suspend_rq,
											 Buffer_a_first_data
											);
/*
			Isdn_tr6_store_call_id			(suspend_rq,
											 28
											);
*/
			break;

	/*---------------- RESUME REQUEST */

		case  NS_RESUME_RQ :
			Isdn_init_tr6_ctx_rq_rs				(resume_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_call_id			(resume_rq,
											 28
											);
			Isdn_tr6_store_service_ind		(resume_rq,
											 SERVICE_IND_TELEFAX_G4,
											 ADD_INFO_NULL
											);

			break;

	/*---------------- FACILITY REQUEST */

#if NS_SPF_FACILITY == ON

		case  NS_SPF_FACILITY_RQ :
			Isdn_init_tr6_ctx_rq_rs				(spf_facility_rq,
											 Buffer_a_first_data
											);


			Isdn_tr6_store_spf_fac_SHIFT	(spf_facility_rq,
											 SERVICE_IND_DATA_TRANSFER,
											 0xb5,
											 D_2
											);

			Isdn_tr6_store_calling_nb		(spf_facility_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "5551234"
											);

			break;

#endif

	/*---------------- FACILITY RESPONSE (ACK) */

#if NS_SPF_FACILITY == ON

		case  NS_SPF_FACILITY_RS :
			Isdn_init_tr6_ctx_rq_rs				(spf_facility_rs,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_fac_select       (spf_facility_rs,
											 TR6_SPF_FAC_ANRUF_1,
											 SERVICE_IND_FERNSPRECHEN
											);
			break;

#endif

	/*---------------- SPECIFIC REGISTRATION REQUEST */

#if NS_SPF_FACILITY == ON

		case NS_SPF_REGISTRATION_RQ :
			Isdn_init_tr6_ctx_rq_rs				(spf_registration_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_spf_fac_B_CHANNEL(spf_facility_rq,
											 SERVICE_IND_FERNSPRECHEN,
											 SPF_B1_CHANNEL
											);

			break;

#endif

	/*---------------- DETACH REQUEST */

#if NS_SPF_FACILITY == ON

		case NS_DETACH_RQ :
			Isdn_init_tr6_ctx_rq_rs				(detach_rq,
											 Buffer_a_first_data
											);

			/* no ie in this primitive */

			break;

#endif

	/*---------------- FACILITY CANCEL REQUEST */

		case NS_CANCEL_RQ :
			Isdn_init_tr6_ctx_rq_rs				(cancel_rq,
											 Buffer_a_first_data
											);


#			if NS_SPF_FACILITY == ON

				Isdn_tr6_store_spf_fac_B_CHANNEL(cancel_rq,
											 SERVICE_IND_FERNSPRECHEN,
											 SPF_B1_CHANNEL
											);

#			endif

			break;

	/*------------------ STATUS_ENQ_RQ */

		case NS_STATUS_ENQ_RQ :
			Isdn_init_tr6_ctx_rq_rs				(status_enq_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_cause			(status_enq_rq,
											 C_C_000,
											 C_V_BEARER_SERVICE_NOT_IMPLEMENTED,
											 LOCATION_NOT_MEANINGFUL
											);


/*==========================================================================*/

#else

		/*========== primitives as seen from NT side ==========*/

	/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :
			Isdn_init_tr6_ctx_rq_rs			(conn_rq,
											 Buffer_a_first_data
											);


			Isdn_tr6_store_chan_id_BRI		(conn_rq,
											 CHAN_PREF,
											 B1_CHAN
											);

			Isdn_tr6_store_calling_nb		(conn_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "7"
											);

			Isdn_tr6_store_called_nb		(conn_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "149223771"
											);

			Isdn_tr6_store_service_ind		(conn_rq,
											 SERVICE_IND_FERNSPRECHEN,
											 ADD_INFO_3_1_AUDIO
											);

			break;

	/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_tr6_ctx_rq_rs 		(conn_rs,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_date				(conn_rs,
											"19.04.90-11:00"
											);
			break;

	/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_tr6_ctx_rq_rs			(clear_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_date				(clear_rq,
											 "20.03.91-14:48"
											);

#if 0
			Isdn_tr6_store_charging_info	(clear_rq,
											 "123"
											);
#endif

			Isdn_tr6_store_cause			(clear_rq,
											 C_C_000,
											 C_V_BEARER_SERVICE_NOT_IMPLEMENTED,
											 LOCATION_NOT_MEANINGFUL
											);

			break;

	/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_tr6_ctx_rq_rs			(clear_rs,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_date				(clear_rs,
											"19.04.90-11:00"
											);
			break;

	/*---------------- SETUP_ACK_RQ */

		case NS_SETUP_ACK_RQ :
			Isdn_init_tr6_ctx_rq_rs				(setup_ack_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_chan_id_BRI		(setup_ack_rq,
											 CHAN_PREF,
											 B1_CHAN
											);

			Isdn_tr6_store_display			(setup_ack_rq,
											 "*** NS_SETUP_ACK_RQ ***"
											);

			break;

	/*---------------- CALL_PROC_RQ (== CALL_SENT_RQ) */

		case NS_CALL_PROC_RQ :
			Isdn_init_tr6_ctx_rq_rs				(call_proc_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_chan_id_BRI		(call_proc_rq,
											 CHAN_EXCL,
											 B1_CHAN
											);

			Isdn_tr6_store_display			(call_proc_rq,
											 "*** NS_CALL_SENT_RQ ***"
											);

			break;

	/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_tr6_ctx_rq_rs				(alert_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_called_status	(alert_rq,
											 NO_ACTION
											);

			Isdn_tr6_store_display			(alert_rq,
											 "*** NS_ALERT_RQ ***"
											);

			break;

	/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_tr6_ctx_rq_rs				(info_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_called_nb		(info_rq,
											 NB_UNKNOWN,
											 PLAN_ISDN,
											 "99"
											);

			break;

	/*---------------- USER INFORMATION*/

		case NS_USER_INFO_RQ :
			Isdn_init_tr6_ctx_rq_rs				(user_info_rq,
											 Buffer_a_first_data
											);

			Isdn_tr6_store_uui				(user_info_rq,
											 "*** UUI user info rq ***"
											);

			break;

#if 0

	/*---------------- FACILITY CANCEL REQUEST */

		case NS_CANCEL_RQ :
			Isdn_init_tr6_ctx_rq_rs				(cancel_rq,
											 Buffer_a_first_data
											);


			Isdn_tr6_store_cause			(cancel_rq,
											 C_C_000,
											 C_V_BEARER_SERVICE_NOT_IMPLEMENTED,
											 LOCATION_NOT_MEANINGFUL
											);

			break;

#endif


#endif

	/*---------------- UNKNOWN primitive */

		default :
			return (NOK);
		}

			/* Load the communication message */

		Store_message (prim_code, nai, sapi, conn_id, p_buffer);
		Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);
		return (OK);

}

/*EOF*/
