
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_mac.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


				/*
				   MACROs and DECLARATIONS used to access the Network
				   Signalling entity (NS) from the Call Control entity (CC).
				*/

/*-------------------------------------------------------------------------*/


			/*
				Isdn_init_tr6_ctx_???? = initialization of the common context
									 used by a primitive macro :

					INPUT :
						- pr 	 = primitive ID,
						- p_off  = pointer to the offset area,

			*/

#define Isdn_init_tr6_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(tr6_,pr), p_off)
#define Isdn_init_tr6_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define	Get_ie_tr6(pr,ie)					Get_ie 			(Paste(tr6_,pr), Paste (tr6_, ie))
#define	Isdn_get_val_tr6(pr,ie,fld)			Isdn_get_val	(Paste(tr6_,pr), Paste (tr6_, ie), fld)
#define Isdn_p_str_tr6(pr,ie,fld)			Isdn_p_str		(Paste(tr6_,pr), Paste (tr6_, ie), fld)
#define	Isdn_lgth_str_tr6(pr,ie,fld)		Isdn_lgth_str	(Paste(tr6_,pr), Paste (tr6_, ie), fld)
#define	Isdn_mx_lgth_str_tr6(pr,ie,fld)		Isdn_mx_lgth_str(Paste(tr6_,pr), Paste (tr6_, ie), fld)
#define	P_start_val_ns_tr6(pr,ie)			P_start_val_ns	(Paste(tr6_,pr), Paste (tr6_, ie))
#define	P_val_ns_tr6(ie)					P_val_ns		(Paste(tr6_,ie))
#define Set_ns_offset_tr6(pr,ie)				Set_offset		(Paste(tr6_,pr),Paste(tr6_,ie))
#define	Set_next_ie_tr6(ie)					Set_next_ie		(Paste(tr6_,ie))
#define	Set_val_tr6(ie,fld,val)				Set_val			(Paste(tr6_,ie), fld, val)
#define Set_str_tr6(ie, lv, p_str, mx_sz)	Set_str			(Paste(tr6_,ie), lv, p_str, mx_sz)
#define Set_mem_tr6(ie, lv, p_mem, sz)		Set_mem			(Paste(tr6_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_tr6(pr,ie)	Set_to_next_ie_instance (Paste(tr6_,pr), Paste (tr6_, ie))
#define Get_remaining_ie_instance_nb_tr6(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(tr6_,pr), Paste (tr6_, ie), p_ie)

#if MESSAGE_HEADER_IE == ON
#	define Message_header_ns_offset_tr6	ns_offset_t tr6_message_header;
#else
#	define Message_header_ns_offset_tr6
#endif


/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

		/******************************************************
		**     Each offset is a relative pointer on the      **
		**     data of an IE element                         **
		******************************************************/

		/*    - 1 - primitives as seen from TERMINAL side    */

		/* NS_CONN_RQ */
		/* NS_CONN_IN */

struct off_ns_tr6_te_conn_in {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_chan_id;					/* channel ID */
#if NS_SPF_FACILITY == ON
	ns_offset_t tr6_spf_fac;					/* network specific facility */
#endif
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_calling_nb;					/* calling number (from network) */
	ns_offset_t tr6_called_nb;					/* called number */
	ns_offset_t tr6_service_ind;				/* service indicator */
	ns_offset_t tr6_add_attrib;					/* additional transmition attributes */
	ns_offset_t tr6_keypad;						/* keypad facility */
};

		/* NS_CONN_RS */
		/* NS_CONN_CO */

struct off_ns_tr6_te_conn_co {
	Message_header_ns_offset_tr6				/* message header parameters */
#if NS_SPF_FACILITY == ON
	ns_offset_t tr6_spf_fac;					/* network specific facility */
#endif
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_service_ind;				/* service indicator */
	ns_offset_t tr6_charging_info;				/* charging information */
	ns_offset_t tr6_date;						/* date */
	ns_offset_t tr6_conn_nb;					/* connected address */
	ns_offset_t tr6_chan_id;					/* channel ID */
};

		/* NS_CLEAR_RQ */
		/* NS_CLEAR_IN */

struct off_ns_tr6_te_clear_in {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_cause;						/* cause */
	ns_offset_t tr6_conn_nb;					/* connected address */
#if NS_SPF_FACILITY == ON
	ns_offset_t tr6_spf_fac;					/* network specific facility */
#endif
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_charging_info;				/* charging information */
	ns_offset_t tr6_date;						/* date */
};
		/* NS_CLEAR_RS */
		/* NS_CLEAR_CO */

struct off_ns_tr6_te_clear_co {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_cause;						/* cause */
	ns_offset_t tr6_conn_nb;					/* connected address */
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_charging_info;				/* charging information */
	ns_offset_t tr6_date;						/* date */
};

		/* NS_SETUP_ACK_RQ */
		/* NS_SETUP_ACK_IN */

struct off_ns_tr6_te_setup_ack_in {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_chan_id;					/* channel ID */
	ns_offset_t tr6_display;					/* display */
};

		/* NS_CALL_PROC_RQ */
		/* NS_CALL_PROC_IN */

struct off_ns_tr6_te_call_proc_in {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_chan_id;					/* channel ID */
	ns_offset_t tr6_display;					/* display */
};

		/* NS_ALERT_RQ */
		/* NS_ALERT_IN */

struct off_ns_tr6_te_alert_in {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_called_status;				/* called party status */
	ns_offset_t tr6_conn_nb;					/* connected address */
	ns_offset_t tr6_chan_id;					/* channel ID */
};

		/* NS_INFO_RQ */
		/* NS_INFO_IN */

struct off_ns_tr6_te_info_in {
	Message_header_ns_offset_tr6				/* message header parameters */
#if NS_SPF_FACILITY == ON
	ns_offset_t tr6_spf_fac;					/* network specific facility */
#endif
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_called_nb;					/* called number */
	ns_offset_t tr6_charging_info;				/* charging information */
	ns_offset_t tr6_keypad;						/* keypad facility */
};

		/* NS_USER_INFO_RQ */
		/* NS_USER_INFO_IN */

struct off_ns_tr6_te_user_info_in {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_more_data;					/* more data */
	ns_offset_t tr6_uui;						/* user to user information */
};

		/* NS_SUSPEND_RQ */
		/* NS_SUSPEND_CO (ACK & REJ) */

struct off_ns_tr6_te_suspend_co {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_cause;						/* cause (REJ only) */
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_call_id;					/* call identity */
};

		/* NS_RESUME_RQ */
		/* NS_RESUME_CO (ACK & REJ) */

struct off_ns_tr6_te_resume_co {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_chan_id;					/* channel ID */
	ns_offset_t tr6_cause;						/* cause (REJ only) */
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_charging_info;				/* charging information (ACK only) */
	ns_offset_t tr6_call_id;					/* call identity */
	ns_offset_t tr6_service_ind;				/* service indicator */
};

#if NS_SPF_FACILITY == ON


		/* NS_SPF_FACILITY_RS (ACK & REJ) */
		/* NS_SPF_FACILITY_CO (FAC & REJ) */

struct off_ns_tr6_te_spf_facility_co {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_cause;						/* cause (REJ only) */
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_fac_select;					/* facility select */
};

		/* NS_SPF_FACILITY_RQ */

struct off_ns_tr6_te_spf_facility_rq {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_spf_fac;					/* specific facility */
	ns_offset_t tr6_calling_nb;					/* calling number */
};

		/* NS_SPF_FACILITY_IN */

struct off_ns_tr6_te_spf_facility_in {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_spf_fac;					/* specific facility */
	ns_offset_t tr6_display;					/* display */
};

		/* NS_SPF_REGISTRATION_RQ */

struct off_ns_tr6_te_spf_registration_rq {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_spf_fac;					/* network specific facility */
};

		/* NS_SPF_REGISTRATION_CO (ACK & REJ) */

struct off_ns_tr6_te_spf_registration_co {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_cause;						/* cause (REJ only )*/
	ns_offset_t tr6_display;					/* display */
	ns_offset_t tr6_fac_select;					/* facility select */
};

#endif

		/* NS_DETACH_RQ */

struct off_ns_tr6_te_detach_rq {
	Message_header_ns_offset_tr6				/* message header parameters */

#	if MESSAGE_HEADER_IE != ON
		ns_offset_t ie_nil;						/* or no IE */
#	endif

};

		/* NS_CANCEL_RQ */

struct off_ns_tr6_te_cancel_rq {
	Message_header_ns_offset_tr6				/* message header parameters */

#	if NS_SPF_FACILITY == ON
		ns_offset_t tr6_spf_fac;				/* network specific facility */
#	else

#		if MESSAGE_HEADER_IE != ON
			ns_offset_t ie_nil;					/* or no IE */
#		endif

#	endif
};

		/* NS_CANCEL_CO (ACK & REJ) */

struct off_ns_tr6_te_cancel_co {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_cause;						/* cause (REJ only)	*/
	ns_offset_t tr6_display;					/* display			*/
	ns_offset_t tr6_fac_select;					/* facility select	*/
};

		/* NS_CON_CON_IN */

struct off_ns_tr6_te_con_con_in {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_congest_level;				/* congestion level */
	ns_offset_t tr6_cause;						/* cause */
};

		/* NS_STATUS_ENQ_RQ */

struct off_ns_tr6_te_status_enq_rq {
	Message_header_ns_offset_tr6				/* message header parameters */
	ns_offset_t tr6_cause;
};

		/*---------------------------------------------------**
		**                                                   **
		**         structures of the offset areas            **
		**                                                   **
		**          according to TE or NET side              **
		**                                                   **
		**---------------------------------------------------*/


		/*   - 2 - primitives as seen from TE or NT sides   */



		/* NS_CONN_RQ */

typedef struct off_ns_tr6_te_conn_in				off_ns_tr6_conn_rq;
typedef struct off_ns_tr6_te_conn_in				off_ns_tr6_net_conn_rq;

		/* NS_CONN_IN */

typedef struct off_ns_tr6_te_conn_in				off_ns_tr6_conn_in;
typedef struct off_ns_tr6_te_conn_in				off_ns_tr6_net_conn_in;

		/* NS_CONN_RS */

typedef struct off_ns_tr6_te_conn_co				off_ns_tr6_conn_rs;
typedef struct off_ns_tr6_te_conn_co				off_ns_tr6_net_conn_rs;

		/* NS_CONN_CO */

typedef struct off_ns_tr6_te_conn_co				off_ns_tr6_conn_co;
typedef struct off_ns_tr6_te_conn_co				off_ns_tr6_net_conn_co;

		/* NS_CLEAR_RQ */

typedef struct off_ns_tr6_te_clear_in				off_ns_tr6_clear_rq;
typedef struct off_ns_tr6_te_clear_in				off_ns_tr6_net_clear_rq;

		/* NS_CLEAR_IN */

typedef struct off_ns_tr6_te_clear_in				off_ns_tr6_clear_in;
typedef struct off_ns_tr6_te_clear_in				off_ns_tr6_net_clear_in;

		/* NS_CLEAR_RS */

typedef struct off_ns_tr6_te_clear_co				off_ns_tr6_clear_rs;
typedef struct off_ns_tr6_te_clear_co				off_ns_tr6_net_clear_rs;

		/* NS_CLEAR_CO */

typedef struct off_ns_tr6_te_clear_co				off_ns_tr6_clear_co;
typedef struct off_ns_tr6_te_clear_co				off_ns_tr6_net_clear_co;

		/* NS_SETUP_ACK_RQ */

typedef struct off_ns_tr6_te_setup_ack_in			off_ns_tr6_setup_ack_rq;
typedef struct off_ns_tr6_te_setup_ack_in			off_ns_tr6_net_setup_ack_rq;

		/* NS_SETUP_ACK_IN */

typedef struct off_ns_tr6_te_setup_ack_in			off_ns_tr6_setup_ack_in;
typedef struct off_ns_tr6_te_setup_ack_in			off_ns_tr6_net_setup_ack_in;

		/* NS_CALL_PROC_RQ */

typedef struct off_ns_tr6_te_call_proc_in			off_ns_tr6_call_proc_rq;
typedef struct off_ns_tr6_te_call_proc_in			off_ns_tr6_net_call_proc_rq;

		/* NS_CALL_PROC_IN */

typedef struct off_ns_tr6_te_call_proc_in			off_ns_tr6_call_proc_in;
typedef struct off_ns_tr6_te_call_proc_in			off_ns_tr6_net_call_proc_in;

		/* NS_ALERT_RQ */

typedef struct off_ns_tr6_te_alert_in				off_ns_tr6_alert_rq;
typedef struct off_ns_tr6_te_alert_in				off_ns_tr6_net_alert_rq;

		/* NS_ALERT_IN */

typedef struct off_ns_tr6_te_alert_in				off_ns_tr6_alert_in;
typedef struct off_ns_tr6_te_alert_in				off_ns_tr6_net_alert_in;

		/* NS_INFO_RQ */

typedef struct off_ns_tr6_te_info_in				off_ns_tr6_info_rq;
typedef struct off_ns_tr6_te_info_in				off_ns_tr6_net_info_rq;

		/* NS_INFO_IN */

typedef struct off_ns_tr6_te_info_in				off_ns_tr6_info_in;
typedef struct off_ns_tr6_te_info_in				off_ns_tr6_net_info_in;

		/* NS_USER_INFO_RQ */

typedef struct off_ns_tr6_te_user_info_in			off_ns_tr6_user_info_rq;
typedef struct off_ns_tr6_te_user_info_in			off_ns_tr6_net_user_info_rq;

		/* NS_USER_INFO_IN */

typedef struct off_ns_tr6_te_user_info_in			off_ns_tr6_user_info_in;
typedef struct off_ns_tr6_te_user_info_in			off_ns_tr6_net_user_info_in;

		/* NS_SUSPEND_RQ */

typedef struct off_ns_tr6_te_suspend_co				off_ns_tr6_suspend_rq;

		/* NS_SUSPEND_CO */

typedef struct off_ns_tr6_te_suspend_co				off_ns_tr6_suspend_co;

		/* NS_RESUME_RQ */

typedef struct off_ns_tr6_te_resume_co				off_ns_tr6_resume_rq;

		/* NS_RESUME_CO */

typedef struct off_ns_tr6_te_resume_co				off_ns_tr6_resume_co;

#if NS_SPF_FACILITY == ON


		/* NS_SPF_FACILITY_RQ */

typedef struct off_ns_tr6_te_spf_facility_rq				off_ns_tr6_spf_facility_rq;
typedef struct off_ns_tr6_te_spf_facility_in				off_ns_tr6_net_spf_facility_rq;

		/* NS_SPF_FACILITY_IN */

typedef struct off_ns_tr6_te_spf_facility_in				off_ns_tr6_spf_facility_in;
typedef struct off_ns_tr6_te_spf_facility_rq				off_ns_tr6_net_spf_facility_in;

		/* NS_SPF_FACILITY_RS */

typedef struct off_ns_tr6_te_spf_facility_co				off_ns_tr6_spf_facility_rs;
typedef struct off_ns_tr6_te_spf_facility_co				off_ns_tr6_net_spf_facility_rs;

		/* NS_SPF_FACILITY_CO */

typedef struct off_ns_tr6_te_spf_facility_co				off_ns_tr6_spf_facility_co;
typedef struct off_ns_tr6_te_spf_facility_co				off_ns_tr6_net_spf_facility_co;


		/* NS_SPF_REGISTRATION_RQ */

typedef struct off_ns_tr6_te_spf_registration_rq			off_ns_tr6_spf_registration_rq;

		/* NS_SPF_REGISTRATION_CO */

typedef struct off_ns_tr6_te_spf_registration_co			off_ns_tr6_spf_registration_co;


#endif

		/* NS_DETACH_RQ */

typedef struct off_ns_tr6_te_detach_rq						off_ns_tr6_detach_rq;

		/* NS_CANCEL_RQ */

typedef struct off_ns_tr6_te_cancel_rq						off_ns_tr6_cancel_rq;

		/* NS_CANCEL_CO */

typedef struct off_ns_tr6_te_cancel_co						off_ns_tr6_cancel_co;

		/* NS_CON_CON_IN */

typedef struct off_ns_tr6_te_con_con_in						off_ns_tr6_con_con_in;

		/* NS_STATUS_ENQ_RQ */

typedef struct off_ns_tr6_te_status_enq_rq					off_ns_tr6_status_enq_rq;

/*=========================================================================*/



		/* Information Element values structure */

		/******************************************************
		**    DESCRIPTION of the value of an IE.             **
		**    ---------------------------------              **
		**    EACH ENTRY SHALL BE IN ACCORDANCE WITH THE     **
		**    CORRESPONDING SSDU IE META-PROGRAM             **
		**			                                         **
		******************************************************/



/*=========================================================================*/

				/* Call identity (CALL_ID) */

struct val_ns_tr6_call_id {
	Next_instance_offset
	ie_val value;						/* call identity content (one octet) */
};

				/*  Called party number (CALLED_NB) */

struct val_ns_tr6_called_nb {
	Next_instance_offset
	ie_val nb_type;						/* type of number */
	ie_val plan_id;						/* numbering plan identification */
	ie_array nb[TR6_MX_SZ_CALLED_NB+2];		/* number digits */
};

				/* Calling party number (CALLING_NB) */

struct val_ns_tr6_calling_nb {
	Next_instance_offset
	ie_val nb_type;						/* calling party type of number */
	ie_val plan_id;						/* calling party numbering plan identification */
	ie_array nb[TR6_MX_SZ_CALLING_NB+2];	/* number digits */
};

				/* Cause (CAUSE) */

struct val_ns_tr6_cause {
	Next_instance_offset
	ie_val cause_class;					/* cause class */
	ie_val cause_val;					/* cause value */
	ie_val cause_loc;					/* location */
};

				/* Channel identification (CHAN_ID) */

struct val_ns_tr6_chan_id {
	Next_instance_offset
	ie_val int_type;					/* interface type */
	ie_val pref_excl;					/* preferred or exclusive */
	ie_val chan_sel;					/* information channel selection */
	ie_val chan_nb;						/* B channel number */
};

				/* Congestion level (CONGEST_LEVEL) */

struct val_ns_tr6_congest_level {
	Next_instance_offset
	ie_val	congest_level;				/* congestion level */
};

				/* Connected address (CONN_NB) */

struct val_ns_tr6_conn_nb {
	Next_instance_offset
	ie_val nb_type;						/* connected address type of number */
	ie_val plan_id;						/* connected address numbering plan identification */
	ie_array nb[TR6_MX_SZ_CONN_NB+2];		/* number digits */
};

				/* Network specific facility (SPF_FAC) */

struct val_ns_tr6_spf_fac {
	Next_instance_offset
	ie_val fac_code;					/* facility code */
	ie_val service;						/* service */

	ie_val add_info;					/* additional information */

	ie_val   syn_asyn;					/* syn/asyn */
	ie_val   protocol_id_1;				/* user information layer 1 protocol */
	ie_val   data_bit;					/* number of data bits excluding parity if present */
	ie_val   stop_bit;					/* number of stop bits */
	ie_val   parity;					/* parity information */
	ie_val   user_rate;					/* user rate */

	ie_val param_1;						/* first possible service describing byte */
	ie_val param_2;						/* second one */

	ie_array text[TR6_MX_SZ_SPF_FAC_TEXT+2];

};

				/* Display facility (DISPLAY) */

struct val_ns_tr6_display {
	Next_instance_offset
	ie_array 	text[TR6_MX_SZ_DISPLAY+2];	/* display information */
};

				/* Keypad facility (KEYPAD) */

struct val_ns_tr6_keypad {
	Next_instance_offset
	ie_array 	text[TR6_MX_SZ_KEYPAD+2];		/* keypad information */
};

				/* User to user information (UUI) */

struct val_ns_tr6_uui {
	Next_instance_offset
	ie_array text[TR6_MX_SZ_UUI+2];
};




/* ----------------  CODESET 6 IEs -------------------- */


				/* Additional transmission attributes (ADD_ATTRIB) */

struct val_ns_tr6_add_attrib {
	Next_instance_offset
	ie_val rq_in_flag;					/* request/indication flag */
	ie_val attrib;						/* attributes */
};

				/* Called party status (CALLED_STATUS) */

struct val_ns_tr6_called_status {
	Next_instance_offset
	ie_val status;						/* status */
};

				/* Charging information (CHARGING_INFO) */

struct val_ns_tr6_charging_info {
	Next_instance_offset
    char   pad[3];						/* padding for long alignment */
	long   value;						/* value of the charging information */
};


				/* Date (DATE) */

struct val_ns_tr6_date {
	Next_instance_offset
	ie_array date[TR6_MX_SZ_DATE+2];		/* date information */
};


				/* Facility select (FAC_SELECT) */

struct val_ns_tr6_fac_select {
	Next_instance_offset
	ie_val fac_code;					/* facility code */
	ie_val service;						/* service */
};


				/* Facility status (FAC_STAT) */

struct val_ns_tr6_fac_stat {
	Next_instance_offset
	ie_array info[TR6_MX_SZ_FAC_STAT+2];	/* information */
};


				/* Service indicator (SERVICE_IND) */

struct val_ns_tr6_service_ind {
	Next_instance_offset
	ie_val service;						/* service */
	ie_val add_info;					/* additional information */
	ie_val syn_asyn;					/* synchronous/asynchronous */
	ie_val protocol_id_1;				/* user information layer 1 protocol */
	ie_val data_bit;					/* data bits */
	ie_val stop_bit;					/* stop bits */
	ie_val parity;						/* parity */
	ie_val user_rate;					/* user rate */
};



/*=========================================================================*/

							/* Information Elements (IE) */


			/*
				Isdn_tr6_store_more_data : more data

					INPUT :
						- pr		= primitive ID,
			*/

#define Isdn_tr6_store_more_data(pr) \
				Set_ns_offset_tr6	(pr,	more_data)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_congest_level: congestion level

					INPUT :
						- pr 				= primitive ID,
						- level				= congestion level.
			*/

#define Isdn_tr6_store_congest_level(pr, level) \
				Set_ns_offset_tr6	(pr,			congest_level);\
				Set_val_tr6		(congest_level,	congest_level,	level);\
				Set_next_ie_tr6	(congest_level)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_cause : cause IE

					INPUT :
						- pr				= primitive ID,
						- cl    			= cause class,
						- value				= cause value,
						- loc				= cause location.

			*/

#define Isdn_tr6_store_cause(pr, cl, value, loc)\
				Set_ns_offset_tr6	(pr,	cause);\
				Set_val_tr6		(cause,	cause_class,cl);\
				Set_val_tr6		(cause,	cause_val,	value);\
				Set_val_tr6		(cause,	cause_loc,	loc);\
				Set_next_ie_tr6	(cause)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_conn_nb : store connected address IE

					INPUT :
						- pr 				= primitive ID,
						- nbering_type   	= numbering type,
						- nbering_plan_id	= numbering plan ID,
						- p_string  		= pointer on the connected address literal string.
			*/

#define Isdn_tr6_store_conn_nb(pr, nbering_type, nbering_plan_id, p_string) \
		Set_ns_offset_tr6	(pr,		conn_nb);\
		Set_val_tr6		(conn_nb,	nb_type, 	nbering_type);\
		Set_val_tr6		(conn_nb,	plan_id, 	nbering_plan_id);\
		Set_str_tr6		(conn_nb,	nb, 		p_string, 	TR6_MX_SZ_CONN_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_call_id : call identity ID

					INPUT :
						- pr				= primitive ID,
						- id    			= call ID.

			*/


#define Isdn_tr6_store_call_id(pr, id)\
				Set_ns_offset_tr6	(pr,		call_id);\
				Set_val_tr6		(call_id,	value,			id);\
				Set_next_ie_tr6	(call_id)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_tr6_store_chan_id_BRI : store channel ID IE for
												Basic rate interface

					INPUT :
						- pr 				= primitive ID,
						- pref 				= preferred channel,
						- sel 				= channel selection,
			*/

#define Isdn_tr6_store_chan_id_BRI(pr, pref, sel) \
				Set_ns_offset_tr6	(pr,		chan_id);\
				Set_val_tr6		(chan_id,	int_type,		INT_TYPE_BRI);\
				Set_val_tr6		(chan_id,	pref_excl,		pref);\
				Set_val_tr6		(chan_id,	chan_sel,		sel);\
				Set_next_ie_tr6	(chan_id)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_tr6_store_chan_id_PRI : store channel ID IE for
												Primary rate interface

					INPUT :
						- pr 				= primitive ID,
						- pref 				= preferred channel,
						- sel 				= channel selection,
						- chan_nber			= channel number.
			*/

#define Isdn_tr6_store_chan_id_PRI(pr, pref, sel, chan_nber) \
				Set_ns_offset_tr6	(pr,		chan_id);\
				Set_val_tr6		(chan_id,	int_type,	INT_TYPE_PRI);\
				Set_val_tr6		(chan_id,	pref_excl,	pref);\
				Set_val_tr6		(chan_id,	chan_sel,	sel);\
				Set_val_tr6		(chan_id,	chan_nb,	chan_nber);\
				Set_next_ie_tr6	(chan_id)

/*-------------------------------------------------------------------------*/

			/*
				_Isdn_tr6_internal_store_spf_fac : store facility


			-- WARNING : DO NOT USE THIS MACRO TO STORE FACILITY IE --
				-- SINCE IT IS DESIGNED FOR INTERNAL USE ONLY --

				  -- PLEASE USE THE ADAPTED FOLLOWING ONES --


					INPUT :
						- pr 				= primitive ID,
						- fac_code			= facility code,
						- fac_serv			= service,
						- fac_add_info		= additional information,
						- fac_param_1		= first possible additional parameter,
						- fac_param_2		= second possible aditional parameter,
						- p_text			= variable length additional information.
			*/

#define _Isdn_tr6_internal_store_spf_fac(pr, fac_code_, fac_serv, fac_add_info) \
			Set_ns_offset_tr6	(pr,		spf_fac);\
			Set_val_tr6		(spf_fac,	fac_code,	fac_code_);\
			Set_val_tr6		(spf_fac,	service,	fac_serv);\
			Set_val_tr6		(spf_fac,	add_info,	fac_add_info)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_spf_fac_CONGESTION : store facility with
													CONGESTION code.

					INPUT :
						- pr 				= primitive ID,
						- fac_serv			= service,
						- p_text			= variable length additional information.
			*/

#define Isdn_tr6_store_spf_fac_CONGESTION(pr, fac_serv, p_text) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_CONGESTION, fac_service, 0);\
			Set_str_tr6 (spf_fac, text, p_text, TR6_MX_SZ_SPF_FAC_TEXT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_spf_fac_ANRUF_1 : store facility
											   with ANRUF_1 code
					INPUT :
						- pr 				= primitive ID,
						- fac_serv			= service,
						- fac_type			= numbering type,
						- fac_plan			= numbering plan id,
						- p_nb				= number digits.
			*/

#define Isdn_tr6_store_spf_fac_ANRUF_1(pr, fac_serv, fac_type, fac_plan, p_nb) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_ANRUF_1, fac_serv, 0);\
			Set_val_tr6	(spf_fac, param_1,	fac_type);\
			Set_val_tr6	(spf_fac, param_2,	fac_plan);\
			Set_str_tr6 (spf_fac, text,		p_nb, TR6_MX_SZ_SPF_FAC_TEXT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_spf_fac_ANRUF_2 : store facility
											   with ANRUF_2 code

					INPUT :
						- pr 				= primitive ID,
						- fac_serv			= service,
						- fac_type			= numbering type,
						- fac_plan			= numbering plan id,
						- p_nb				= number digits.
			*/

#define Isdn_tr6_store_spf_fac_ANRUF_2(pr, fac_serv, fac_type, fac_plan, p_nb) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_ANRUF_2, fac_serv, 0);\
			Set_val_tr6	(spf_fac, param_1,	fac_type);\
			Set_val_tr6	(spf_fac, param_2,	fac_plan);\
			Set_str_tr6 (spf_fac, text,		p_nb, TR6_MX_SZ_SPF_FAC_TEXT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_spf_fac_B_CHANNEL : store facility
												with B_CHANNEL code.

					INPUT :
						- pr 				= primitive ID,
						- fac_serv			= service,
						- fac_b_chan		= B chanel number.
			*/

#define Isdn_tr6_store_spf_fac_B_CHANNEL(pr, fac_serv, fac_b_chan) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_B_CHANNEL, fac_serv, 0);\
			Set_val_tr6	(spf_fac, param_1,	fac_b_chan);\
			Set_str_tr6 (spf_fac, text,		"", TR6_MX_SZ_SPF_FAC_TEXT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_spf_fac_CUG : store facility
											with CUG code.

					INPUT :
						- pr 				= primitive ID,
						- fac_serv			= service,
						- cug_index_MSB		= CUG index most significant byte,
						- cug_index_LSB		= CUG index least significant byte.
			*/

#define Isdn_tr6_store_spf_fac_CUG(pr, fac_serv, cug_index_MSB, cug_index_LSB) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_CUG, fac_serv, 0);\
			Set_val_tr6	(spf_fac, param_1,	cug_index_MSB);\
			Set_val_tr6	(spf_fac, param_2,	cug_index_LSB);\
			Set_str_tr6 (spf_fac, text,		"", TR6_MX_SZ_SPF_FAC_TEXT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_spf_fac_SHIFT : store facility
					for one side shift facility code.

					INPUT :
						- pr 			= primitive ID,
						- fac_serv		= service,
						- fac_add_info	= additional information,
						- fac_EAZ		= EAZ parameter.
			*/

#define Isdn_tr6_store_spf_fac_SHIFT(pr, fac_serv, fac_add_info, fac_EAZ) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_SHIFT, fac_serv, fac_add_info);\
			Set_val_tr6	(spf_fac, syn_asyn,	BYTE_VAL_NIL);\
			Set_val_tr6	(spf_fac, param_1,	fac_EAZ);\
			Set_str_tr6 (spf_fac, text,		"", TR6_MX_SZ_SPF_FAC_TEXT+1)

			/*
				Isdn_tr6_store_spf_fac_64_SYN : TR6_SPF_FAC_SHIFT
					specific facility for DATA_TRANSFER Synchronous rate

					INPUT :
						- pr			= pritive ID,
						- protocol_id_1	= user information layer 1 protocol
						- user_rate		= user rate
						- fac_EAZ		= EAZ parameter.

			*/

#define Isdn_tr6_store_spf_fac_64_SYN(pr, prot_1, _user_rate, fac_EAZ) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_SHIFT, SERVICE_IND_DATA_TRANSFER, BYTE_VAL_NIL);\
			Set_val_tr6	(spf_fac, syn_asyn,	ADD_SYN);\
			Set_val_tr6	(spf_fac, protocol_id_1,prot_1);\
			Set_val_tr6	(spf_fac, user_rate,_user_rate);\
			Set_val_tr6	(spf_fac, param_1,	fac_EAZ);\
			Set_str_tr6 (spf_fac, text,	"", TR6_MX_SZ_SPF_FAC_TEXT+1)

			/*
				Isdn_tr6_store_spf_fac_64_ASYN : TR6_SPF_FAC_SHIFT
					specific facility for DATA_TRANSFER Asynchronous rate

					INPUT :
						- pr			= pritive ID,
						- data_bit		= data bits
						- stop_bit		= stop bits
						- parity		= parity
						- user_rate		= user rate
						- fac_EAZ		= EAZ parameter.

			*/

#define Isdn_tr6_store_spf_fac_64_ASYN(pr, _data_bit, _stop_bit, _parity, _user_rate, fac_EAZ) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_SHIFT, SERVICE_IND_DATA_TRANSFER, BYTE_VAL_NIL);\
			Set_val_tr6	(spf_fac,	syn_asyn,	ADD_ASYN);\
			Set_val_tr6	(spf_fac,	data_bit,	_data_bit);\
			Set_val_tr6	(spf_fac,	stop_bit,	_stop_bit);\
			Set_val_tr6	(spf_fac,	parity,		_parity);\
			Set_val_tr6	(spf_fac,	user_rate,	_user_rate);\
			Set_val_tr6	(spf_fac,	param_1,	fac_EAZ);\
			Set_str_tr6 (spf_fac, text,	"", TR6_MX_SZ_SPF_FAC_TEXT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_spf_fac_BILATERAL_SHIFT : store facility
					for bilateral shift facility code.

					INPUT :
						- pr 			= primitive ID,
						- fac_serv		= service,
						- fac_add_info	= additional information,
						- orig_EAZ		= origination side's EAZ parameter,
						- dest_EAZ		= destination side's EAZ parameter.
			*/

#define Isdn_tr6_store_spf_fac_BILATERAL_SHIFT(pr, fac_serv, fac_add_info, orig_EAZ, dest_EAZ) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_BILATERAL_SHIFT, fac_serv, fac_add_info);\
			Set_val_tr6	(spf_fac, syn_asyn,	BYTE_VAL_NIL);\
			Set_val_tr6	(spf_fac, param_1,	orig_EAZ);\
			Set_val_tr6	(spf_fac, param_2,	dest_EAZ);\
			Set_str_tr6 (spf_fac, text,		"", TR6_MX_SZ_SPF_FAC_TEXT+1)

			/*
				Isdn_tr6_store_spf_fac_BI_64_SYN : TR6_SPF_FAC_BILATERAL_SHIFT
					specific facility for DATA_TRANSFER Synchronous rate

					INPUT :
						- pr			= pritive ID,
						- protocol_id_1	= user information layer 1 protocol
						- user_rate		= user rate
						- orig_EAZ		= origination side's EAZ parameter,
						- dest_EAZ		= destination side's EAZ parameter.

			*/

#define Isdn_tr6_store_spf_fac_BI_64_SYN(pr, prot_1, _user_rate, orig_EAZ, dest_EAZ) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_BILATERAL_SHIFT, SERVICE_IND_DATA_TRANSFER, BYTE_VAL_NIL);\
			Set_val_tr6	(spf_fac, syn_asyn,	ADD_SYN);\
			Set_val_tr6	(spf_fac, protocol_id_1,prot_1);\
			Set_val_tr6	(spf_fac, user_rate,_user_rate);\
			Set_val_tr6	(spf_fac, param_1,	orig_EAZ);\
			Set_val_tr6	(spf_fac, param_2,	dest_EAZ);\
			Set_str_tr6 (spf_fac, text,	"", TR6_MX_SZ_SPF_FAC_TEXT+1)

			/*
				Isdn_tr6_store_spf_fac_64_ASYN : service indicator IE
				for 64 kb/s Asynchronous rate

					INPUT :
						- pr			= pritive ID,
						- data_bit		= data bits
						- stop_bit		= stop bits
						- parity		= parity
						- user_rate		= user rate
						- orig_EAZ		= origination side's EAZ parameter,
						- dest_EAZ		= destination side's EAZ parameter.

			*/

#define Isdn_tr6_store_spf_fac_BI_64_ASYN(pr, _data_bit, _stop_bit, _parity, _user_rate, orig_EAZ, dest_EAZ) \
			_Isdn_tr6_internal_store_spf_fac(pr, TR6_SPF_FAC_BILATERAL_SHIFT, SERVICE_IND_DATA_TRANSFER, BYTE_VAL_NIL);\
			Set_val_tr6	(spf_fac,	syn_asyn,	ADD_ASYN);\
			Set_val_tr6	(spf_fac,	data_bit,	_data_bit);\
			Set_val_tr6	(spf_fac,	stop_bit,	_stop_bit);\
			Set_val_tr6	(spf_fac,	parity,		_parity);\
			Set_val_tr6	(spf_fac,	user_rate,	_user_rate);\
			Set_val_tr6	(spf_fac,	param_1,	orig_EAZ);\
			Set_val_tr6	(spf_fac,	param_2,	dest_EAZ);\
			Set_str_tr6 (spf_fac,	text,	"", TR6_MX_SZ_SPF_FAC_TEXT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_spf_fac_blank : stores facility
							for facility codes that don't
							need additional informations ('parafeld').

					INPUT :
						- pr 				= primitive ID,
						- fac_code			= facility code,
						- fac_serv			= service.
			*/

#define Isdn_tr6_store_spf_fac_blank(pr, fac_code, fac_serv) \
		_Isdn_tr6_internal_store_spf_fac(pr, fac_code, fac_serv, 0);\
		Set_str_tr6 (spf_fac, text,	"", TR6_MX_SZ_SPF_FAC_TEXT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_display : display IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_tr6_store_display(pr,	p_text) \
		Set_ns_offset_tr6	(pr,		display);\
		Set_str_tr6		(display,	text,	p_text,	TR6_MX_SZ_DISPLAY+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_tr6_store_keypad(pr,p_text) \
		Set_ns_offset_tr6	(pr,		keypad);\
		Set_str_tr6		(keypad,	text,	p_text,	TR6_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_calling_nb : store calling number IE

					INPUT :
						- pr 				= primitive ID,
						- nbering_type   	= numbering type,
						- nbering_plan_id	= numbering plan ID,
						- p_string  		= pointer on the calling number literal string.
			*/

#define Isdn_tr6_store_calling_nb(pr, nbering_type, nbering_plan_id, p_string) \
		Set_ns_offset_tr6	(pr,			calling_nb);\
		Set_val_tr6		(calling_nb,	nb_type,	nbering_type);\
		Set_val_tr6		(calling_nb,	plan_id, 	nbering_plan_id);\
		Set_str_tr6		(calling_nb,	nb, 		p_string, TR6_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_called_nb : called number IE

					INPUT :
						- pr				= primitive ID,
						- nbering_type		= numbering type
						- nbering_plan_id	= numbering plan ID,
						- p_string			= address of the literal string.
			*/

#define Isdn_tr6_store_called_nb(pr, nbering_type, nbering_plan_id, p_string) \
		Set_ns_offset_tr6	(pr,		called_nb);\
		Set_val_tr6		(called_nb,	nb_type,	nbering_type);\
		Set_val_tr6		(called_nb,	plan_id,	nbering_plan_id);\
		Set_str_tr6		(called_nb,	nb,			p_string, TR6_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_uui : user to user information IE

					INPUT :
						- p_text = address of the literal string.

			*/

#define Isdn_tr6_store_uui(pr, p_text) \
		Set_ns_offset_tr6	(pr,	uui);\
		Set_str_tr6		(uui, 	text,	p_text,	TR6_MX_SZ_UUI+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_service_ind : service indicator IE

					INPUT :
						- pr				= pritive ID,
						- serv				= service,
						- add_inf			= additional information.

			*/

#define Isdn_tr6_store_service_ind(pr, serv, add_inf) \
				Set_ns_offset_tr6	(pr,			service_ind);\
				Set_val_tr6		(service_ind,	service,	serv);\
				Set_val_tr6		(service_ind,	syn_asyn,	BYTE_VAL_NIL);\
				Set_val_tr6		(service_ind,	add_info,	add_inf);\
				Set_next_ie_tr6	(service_ind)

			/*
				Isdn_tr6_store_service_ind_64_SYN : service indicator IE
				for 64 kb/s Synchronous rate

					INPUT :
						- pr				= pritive ID,
						- protocol_id_1		= user information layer 1 protocol
						- user_rate			= user rate

			*/

#define Isdn_tr6_store_service_ind_64_SYN(pr, prot_1, _user_rate) \
				Set_ns_offset_tr6	(pr,			service_ind);\
				Set_val_tr6		(service_ind,	service,	SERVICE_IND_DATA_TRANSFER);\
				Set_val_tr6		(service_ind,	syn_asyn,	ADD_SYN);\
				Set_val_tr6		(service_ind,	protocol_id_1,prot_1);\
				Set_val_tr6		(service_ind,	user_rate,	_user_rate);\
				Set_next_ie_tr6	(service_ind)

			/*
				Isdn_tr6_store_service_ind_64_ASYN : service indicator IE
				for 64 kb/s Asynchronous rate

					INPUT :
						- pr				= pritive ID,
						- data_bit			= data bits
						- stop_bit			= stop bits
						- parity			= parity
						- user_rate			= user rate

			*/

#define Isdn_tr6_store_service_ind_64_ASYN(pr, _data_bit, _stop_bit, _parity, _user_rate) \
				Set_ns_offset_tr6	(pr,			service_ind);\
				Set_val_tr6		(service_ind,	service,	SERVICE_IND_DATA_TRANSFER);\
				Set_val_tr6		(service_ind,	syn_asyn,	ADD_ASYN);\
				Set_val_tr6		(service_ind,	data_bit,	_data_bit);\
				Set_val_tr6		(service_ind,	stop_bit,	_stop_bit);\
				Set_val_tr6		(service_ind,	parity,		_parity);\
				Set_val_tr6		(service_ind,	user_rate,	_user_rate);\
				Set_next_ie_tr6	(service_ind)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_date : date IE

					INPUT :
						- p_date			= address of the date information.

			*/

#define Isdn_tr6_store_date(pr, p_date) \
		Set_ns_offset_tr6	(pr,	date);\
		Set_str_tr6		(date, 	date,	p_date,	TR6_MX_SZ_DATE+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_fac_select : fac_select IE

					INPUT :
						- fac_code			= facility code,
						- fac_service		= service.

			*/

#define Isdn_tr6_store_fac_select(pr, fac_code_, fac_service) \
				Set_ns_offset_tr6	(pr,	fac_select);\
				Set_val_tr6		(fac_select,	fac_code,	fac_code_);\
				Set_val_tr6		(fac_select,	service,	fac_service);\
				Set_next_ie_tr6	(fac_select)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_fac_stat : facility status IE

					INPUT :
						- p_fac_stat		= address of the fac_stat information.

			*/

#define Isdn_tr6_store_fac_stat(pr, p_fac_stat) \
		Set_ns_offset_tr6	(pr,		fac_stat);\
		Set_str_tr6		(fac_stat, 	info,	p_fac_stat,	TR6_MX_SZ_FAC_STAT+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_called_status : called_status IE

					INPUT :
						- pr				= primitive id,
						- called_stat		= status.

			*/

#define Isdn_tr6_store_called_status(pr, called_stat) \
				Set_ns_offset_tr6	(pr,			called_status);\
				Set_val_tr6		(called_status,	status,	called_stat);\
				Set_next_ie_tr6	(called_status)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_tr6_store_add_attrib : additional transmition attributes IE

					INPUT :
						- pr				= primitive id,
						- flag				= request/indication flag,
						- attributes		= attributes.

			*/

#define Isdn_tr6_store_add_attrib(pr, flag, attributes) \
				Set_ns_offset_tr6	(pr,			add_attrib);\
				Set_val_tr6		(add_attrib, 	rq_in_flag,	flag);\
				Set_val_tr6		(add_attrib, 	attrib,		attributes);\
				Set_next_ie_tr6	(add_attrib)


/*EOF*/
