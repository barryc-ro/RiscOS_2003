
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ie.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the DEUTSCHE TELECOM 1TR6 information
 * element and the integrity constraints associated to them.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/
/*

Table structures :
----------------

		tabl_item   TABL_ITEM                                    uchar
		==========================                             ============
		| tabl_id | size | p_val |---------------------------->|   val    |
		--------------------------  tabl_yy      ============  ------------
		|         |      |       |-------------->|   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |   val    |  |   val    |
		--------------------------               ------------  ------------
		|         |      |       |               |          |  |          |
		--------------------------
		|         |      |       |
		--------------------------
		|         |      |       |


	tabx_item   TABX_ITEM                   tabx_list                uchar
	=================================     =================        =========
	| tabl_id | size | list pointer |---->| tabl_id | size|------->| x_val |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------     -----------------        ---------
	|         |      |              |     |         |     |        |  val  |
	---------------------------------
	|         |      |              |

*/
/*-------------------------------------------------------------------------*/

		/*
			Access macros for spf facility when
			service = SERVICE_IND_DATA_TRANSFER
		*/

#define Add_parity				Get_bits (*p_ie, 3, 1)	/* bit 3 */
#define Add_protocol			Get_bits (*p_ie, 4, 2)	/* bits 4 and 5 */
#define Add_rate				Get_bits (*p_ie, 0, 3)	/* bits 0, 1 and 2*/
#define Add_syn_asyn			Get_bits (*p_ie, 6, 2)	/* bits 6 and 7 */


	/* Local functions prototypes */

#if NEW_FCT_STYLE == ON
	uchar tr6_check_date_argument 		(uchar **, uchar, uchar *);
#else
	uchar tr6_check_date_argument 		();
#endif

/*-------------------------------------------------------------------------*/

	/*
		Initialization constants of ie internal structure
		used by SPDU received processing.
	*/


		/* Congestion level (CONGEST_LEVEL) */

CONST   struct  i_congest_level     df_spdu_tr6_i_congest_level = {
	RECEIVER_READY,
};


		/* Cause (CAUSE) */

CONST   struct  i_cause     df_spdu_tr6_i_cause = {
	CODING_STD_NATIONAL,
	LOCATION_NOT_MEANINGFUL,
	BYTE_VAL_NIL,
	C_C_000,
	C_V_NORMAL_CLEARING_16,        /* not allowed in 1TR6, but necessary to process correctly the null length cause IE */
	0,
	0,
	A_NIL,
};


		/*  Connected address (CONN_NB) */

CONST   struct  i_conn_nb       df_spdu_tr6_i_conn_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL,
};


		/* Call identity (CALL_ID) */

CONST   struct  i_call_id   df_spdu_tr6_i_call_id = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};


		/* Channel identification (CHAN_ID) */

CONST   struct  i_chan_id   df_spdu_tr6_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_BRI,			/*$ BRI ? */
	CHAN_PREF,
	NOT_D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_NATIONAL,
	CHAN_NUMBER,
	B_CHAN,
	1,
	0,
	A_NIL,
};


#if NS_SPF_FACILITY == ON

		/* Network specific facilities (SPF_FAC) */

CONST   struct  i_spf_fac   df_spdu_tr6_i_spf_fac = {
	0,
	TR6_SPF_FAC_B_CHANNEL,			/* Facility code */
	SERVICE_IND_FERNSPRECHEN,		/* Service */
	0,								/* without meanings because of Facility code value */
	BYTE_VAL_NIL,					/* synchronous/asynchronous */
	BYTE_VAL_NIL,					/* user information layer 1 protocol */
	BYTE_VAL_NIL,					/* data bits */
	BYTE_VAL_NIL,					/* stop bits */
	BYTE_VAL_NIL,					/* parity */
	BYTE_VAL_NIL,					/* user rate */
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
};

#endif

		/* Display (DISPLAY) */

CONST   struct  i_display   df_spdu_tr6_i_display = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};


		/* Keypad facility (KEYPAD) */

CONST   struct  i_keypad    df_spdu_tr6_i_keypad = {
	BYTE_VAL_NIL,
	A_NIL,
};


		/* Calling party number (CALLING_NB) */

CONST   struct  i_calling_nb    df_spdu_tr6_i_calling_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL,
};


		/*  Called party number (CALLED_NB) */

CONST   struct  i_called_nb     df_spdu_tr6_i_called_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	0,
	A_NIL,
};


		/* User to user information (UUI) */

CONST   struct  i_uui   df_spdu_tr6_i_uui = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};



/* ----------  codeset 6 IEs  -------------- */


		/* Service indicator */

CONST   struct  i_service_ind   df_spdu_tr6_i_service_ind = {
	SERVICE_IND_FERNSPRECHEN,
	ADD_INFO_ANALOG_AUDIO,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/* Charging information */

CONST   struct  i_charging_info df_spdu_tr6_i_charging_info = {
	UNITS_TAX,
	0L,
};

		/* Date */

CONST   struct  i_date  df_spdu_tr6_i_date = {
	0,
	A_NIL,
};

		/* Facility select */

CONST   struct  i_fac_select    df_spdu_tr6_i_fac_select = {
	TR6_SPF_FAC_CONGESTION,
	SERVICE_IND_FERNSPRECHEN,
};

		/* Facility status */

CONST   struct  i_fac_stat  df_spdu_tr6_i_fac_stat = {
	0,
	A_NIL,
};

		/* Called party status */

CONST   struct  i_call_state df_spdu_tr6_i_call_state = {
	BYTE_VAL_NIL,
	NO_ACTION,
};

		/* Additional transmission attributes */

CONST   struct i_add_attrib df_spdu_tr6_i_add_attrib = {
	REQUEST,
	NO_SAT_LINK,
};

/*=========================================================================*/

	/*
		Initialization constants of the ie internal structure
		used by SSDU received processing.
	*/

		/* Congestion level (CONGEST_LEVEL) */

CONST   struct  i_congest_level     df_ssdu_tr6_i_congest_level = {
	RECEIVER_READY,
};


		/* Cause (CAUSE) */

CONST   struct  i_cause     df_ssdu_tr6_i_cause = {
	CODING_STD_NATIONAL,
	LOCATION_NOT_MEANINGFUL,
	BYTE_VAL_NIL,
	C_C_000,
	C_V_NORMAL_CLEARING_16,        /* not allowed in 1TR6, but necessary to process correctly the null length cause IE */
	0,
	0,
	A_NIL,
};


		/*  Connected address (CONN_NB) */

CONST   struct  i_conn_nb       df_ssdu_tr6_i_conn_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL,
};


		/* Call identity (CALL_ID) */

CONST   struct  i_call_id   df_ssdu_tr6_i_call_id = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};


		/* Channel identification (CHAN_ID) */

CONST   struct  i_chan_id   df_ssdu_tr6_i_chan_id = {
	INT_ID_IMPLICIT,
	INT_TYPE_BRI,			/*$ BRI ? */
	CHAN_PREF,
	NOT_D_CHAN,
	ANY_CHAN,
	BYTE_VAL_NIL,
	CODING_STD_NATIONAL,
	CHAN_NUMBER,
	B_CHAN,
	1,
	0,
	A_NIL,
};


#if NS_SPF_FACILITY == ON

		/* Network specific facilities (SPF_FAC) */

CONST   struct  i_spf_fac   df_ssdu_tr6_i_spf_fac = {
	0,
	TR6_SPF_FAC_B_CHANNEL,			/* Facility code */
	SERVICE_IND_FERNSPRECHEN,		/* Service */
	0,								/* without meanings because of Facility code value */
	BYTE_VAL_NIL,					/* synchronous/asynchronous */
	BYTE_VAL_NIL,					/* user information layer 1 protocol */
	BYTE_VAL_NIL,					/* data bits */
	BYTE_VAL_NIL,					/* stop bits */
	BYTE_VAL_NIL,					/* parity */
	BYTE_VAL_NIL,					/* user rate */
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
};

#endif

		/* Display (DISPLAY) */

CONST   struct  i_display   df_ssdu_tr6_i_display = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};


		/* Keypad facility (KEYPAD) */

CONST   struct  i_keypad    df_ssdu_tr6_i_keypad = {
	BYTE_VAL_NIL,
	A_NIL,
};


		/* Calling party number (CALLING_NB) */

CONST   struct  i_calling_nb    df_ssdu_tr6_i_calling_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	0,
	A_NIL,
};


		/*  Called party number (CALLED_NB) */

CONST   struct  i_called_nb     df_ssdu_tr6_i_called_nb = {
	NB_NATIONAL,
	PLAN_ISDN,
	0,
	A_NIL,
};


		/* User to user information (UUI) */

CONST   struct  i_uui   df_ssdu_tr6_i_uui = {
	BYTE_VAL_NIL,
	0,
	A_NIL,
};



/* ----------  codeset 6 IEs  -------------- */


		/* Service indicator */

CONST   struct  i_service_ind   df_ssdu_tr6_i_service_ind = {
	SERVICE_IND_FERNSPRECHEN,
	ADD_INFO_ANALOG_AUDIO,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
	BYTE_VAL_NIL,
};

		/* Charging information */

CONST   struct  i_charging_info df_ssdu_tr6_i_charging_info = {
	UNITS_TAX,
	0L,
};

		/* Date */

CONST   struct  i_date  df_ssdu_tr6_i_date = {
	BYTE_VAL_NIL,
	A_NIL,
};

		/* Facility select */

CONST   struct  i_fac_select    df_ssdu_tr6_i_fac_select = {
	TR6_SPF_FAC_CONGESTION,
	SERVICE_IND_FERNSPRECHEN,
};

		/* Facility status */

CONST   struct  i_fac_stat  df_ssdu_tr6_i_fac_stat = {
	BYTE_VAL_NIL,
	A_NIL,
};

		/* Called party status */

CONST   struct  i_call_state df_ssdu_tr6_i_call_state = {
	BYTE_VAL_NIL,
	NO_ACTION,
};

		/* Additional transmission attributes */

CONST   struct i_add_attrib df_ssdu_tr6_i_add_attrib = {
	REQUEST,
	NO_SAT_LINK,
};

/*=========================================================================*/

				/* TABLES : list of valid values */

					/* Cause location */

CONST   uchar LOCATION_TR6_S[] = {
						LOCATION_PR_NET_REMOTE_USER,
						LOCATION_PU_NET_REMOTE_USER,
						LOCATION_NOT_MEANINGFUL,
						};

					/* Numbering type */

CONST   uchar CONN_NB_TYPE_TR6_S[] = {
						NB_UNKNOWN,
						NB_INTERNATIONAL,
						NB_NATIONAL,
						};

					/* Numbering plan */

CONST   uchar CONN_NB_PLAN_TR6_S[] = {
						PLAN_UNKNOWN,
						PLAN_ISDN,
						};

					/* Interface type */

CONST   uchar INT_TYPE_TR6_S[] = {
						INT_TYPE_BRI,
						INT_TYPE_PRI,
						};


					/* Preferred/exclusive */

CONST   uchar CHAN_PREF_EXCL_TR6_S[] = {
						CHAN_PREF,
						CHAN_EXCL,
						};


					/* Channel number */

CONST   uchar CHAN_NUMBER_TR6_S[] = {
						1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
						17,18,19,20,21,22,23,24,25,26,27,28,29,30,31
						};


					/* Network specific facility code */

CONST   uchar SPF_FAC_CODE_TR6_S[] = {
						TR6_SPF_FAC_CONGESTION,
						TR6_SPF_FAC_ANRUF_1,
						TR6_SPF_FAC_ANRUF_2,
						TR6_SPF_FAC_CONFERENCE,
						TR6_SPF_FAC_B_CHANNEL,
						TR6_SPF_FAC_RESUME,
						TR6_SPF_FAC_THREE_PARTY,
						TR6_SPF_FAC_SHIFT,
						TR6_SPF_FAC_BILATERAL_SHIFT,
						TR6_SPF_FAC_CALL_NB_ID,
						TR6_SPF_FAC_CUG,
						TR6_SPF_FAC_CALL_DELIVERED_IN,
						TR6_SPF_FAC_SUSPEND_IN,
						TR6_SPF_FAC_CLEAR_A_CALL_NB,
						TR6_SPF_FAC_CALL_CLEAR,
						TR6_SPF_FAC_CALL_ESTABLISHED,
						TR6_SPF_FAC_SEMIPERMANENT_CONN,
						TR6_SPF_FAC_BILATERAL_BACK_SHIFT,
						TR6_SPF_FAC_PRIVATE_NET_CALL,
						};

					/* Congestion type */

CONST   uchar CONGESTION_TYPE_TR6_S[] = {
						ALL_CONNEXIONS,
						ALL__CONNEXIONS,
						ALL_STRANGER_CONNEXIONS,
						ALL_INTER_CONTINENTAL_CONNEXIONS,
						};

					/* Network specific facility B channel */

CONST   uchar SPF_FAC_B_CHAN_TR6_S[] = {
						SPF_B1_CHANNEL,
						SPF_B2_CHANNEL,
						};

CONST   uchar DIGIT_TR6_S[] = {
						D_0,
						D_1,
						D_2,
						D_3,
						D_4,
						D_5,
						D_6,
						D_7,
						D_8,
						D_9,
						};

					/* Facility status information */

CONST   uchar FAC_STAT_INFO_TR6_S[] = {
						CONGESTION_ACTIVE,
						ANRUF_1_ACTIVE,
						ANRUF_2_ACTIVE,
						LINK_BELONGING_TO_CUG,
						TAX_IND_DISPOSED,
						MALICIOUS_CALL_ID,
						};

					/* Called party status */

CONST   uchar CALLED_STATUS_TR6_S[] = {
						NO_ACTION,
						CALLED_USER_ALERTED,
						};

					/* Request/Indication flag */

CONST   uchar RQ_IN_FLAG_TR6_S[] = {
						REQUEST,
						INDICATION,
						};

					/* Additional attributes */

CONST   uchar ADD_ATTRIB_TR6_S[] = {
						NO_SAT_LINK,
						ONE_SAT_LINK,
						TWO_SAT_LINK,
						THREE_SAT_LINK,
						};

CONST   uchar ADD_INFO_SYN_ASYN_TR6_S[] = {
						ADD_SYN,
						ADD_ASYN,
						};

CONST   uchar ADD_INFO_PROTOCOL_ID_1_TR6_S[] = {
						ADD_PROTOCOL_ID_1_V110_X30,
						ADD_PROTOCOL_ID_1_V120,
						};

CONST   uchar ADD_INFO_DATA_BIT_TR6_S[] = {
						ADD_DATA_BIT_7,
						ADD_DATA_BIT_8,
						};

CONST   uchar ADD_INFO_STOP_BIT_TR6_S[] = {
						ADD_STOP_BIT_1,
						ADD_STOP_BIT_2,
						};

CONST   uchar ADD_INFO_PARITY_TR6_S[] = {
						ADD_NO_PARITY,
						ADD_EVEN_PARITY,
						};

CONST   uchar ADD_INFO_USER_RATE_SYN_TR6_S[] = {
						ADD_1200,
						ADD_1200_75,
						ADD_75_1200,
						ADD_2400,
						ADD_4800,
						ADD_9600,
						ADD_14400,
						ADD_19200,
						ADD_48000,
						ADD_56000,
						ADD_IN_BAND_NEGOCIATION,
						};

CONST   uchar ADD_INFO_USER_RATE_ASYN_TR6_S[] = {
						ADD_1200,
						ADD_1200_75,
						ADD_75_1200,
						ADD_2400,
						ADD_4800,
						ADD_9600,
						ADD_14400,
						ADD_19200,
						};

					/* Congestion level */

CONST   uchar CONGEST_LEVEL_TR6_S[] = {
						RECEIVER_READY,
						RECEIVER_NOT_READY,
						};

					/* Cause class */

CONST   uchar C_C_TR6_S[]={
						C_C_000,
						C_C_001,
						C_C_010,
						C_C_011,
						C_C_101,
						C_C_111,
						};

					/* Service indicator */

CONST   uchar SERVICE_IND_TR6_S[] = {
						0,                      /* for SPF_FAC only */
						SERVICE_IND_FERNSPRECHEN,
						SERVICE_IND_A_B,
						SERVICE_IND_X21,
						SERVICE_IND_TELEFAX_G4,
						SERVICE_IND_BTX_64,
						SERVICE_IND_DATA_TRANSFER,
						SERVICE_IND_X25,
						SERVICE_IND_TELETEX,
						SERVICE_IND_MIXED_MODE,
						SERVICE_IND_REMOTE_CONTROL,
						SERVICE_IND_GRAFIKTELEFON,
						SERVICE_IND_BTX,
						SERVICE_IND_BILDTELEFON,
						};

/*=========================================================================*/

	/* Tables selected according to another value (indexed tables) */


		/* Cause value  according to the class */

CONST   uchar C_V_000_TR6_S[] = {
						C_C_000,
						C_V_INVALID_CALL_REF,
						C_V_BEARER_SERVICE_NOT_IMPLEMENTED,
						C_V_NON_EXISTENT_CALL_ID,
						C_V_CALL_ID_IN_USE,
						C_V_NO_CHANNEL_AVAILABLE,
						C_V_NORMAL_CLEARING_16,		/* see CAUSE_SPDU meta-program for explainations */
						G_4 (1,1,1,1)				/* for some NT2 */
						};

CONST   uchar C_V_001_TR6_S[] = {
						C_C_001,
						C_V_RQ_FAC_NOT_IMPLEMENTED,
						C_V_RQ_FAC_NOT_SUBSCRIBED,

						};

CONST   uchar C_V_010_TR6_S[] ={
						C_C_010,
						C_V_OUTGOING_CALLS_BARRED,
						C_V_USER_ACCESS_BUSY,
						C_V_CUG_INCOMING_CALLS_BARRED,
						C_V_NON_EXISTENT_CUG,

						};

CONST   uchar C_V_011_TR6_S[] ={
						C_C_011,
						C_V_DEST_NOT_OBTAINABLE,
						C_V_NUMBER_CHANGED,
						C_V_OUT_OF_ORDER,
						C_V_NO_USER_RESPONDING,
						C_V_USER_BUSY,
						C_V_INCOMING_CALLS_BARRED,
						C_V_CALL_REJECTED,

						};

CONST   uchar C_V_101_TR6_S[] ={
						C_C_101,
						C_V_NETWORK_CONGESTION,
						C_V_REMOTE_USER_INITIATED,

						};

CONST   uchar C_V_111_TR6_S[] ={
						C_C_111,
						C_V_LOCAL_ERROR_PROCEDURE,
						C_V_REMOTE_PROCEDURE_ERROR,
						C_V_REMOTE_USER_SUSPENDED,
						C_V_REMOTE_USER_RESUMED,
						C_V_USER_INFO_DISCARDED,
						};

/*-------------------------------------------------------------------------*/

			/* Channel selection according to the interface type */

CONST   uchar CHAN_SEL_BRI_TR6_S[] = {
						INT_TYPE_BRI,
						NO_CHAN,
						B1_CHAN,
						B2_CHAN,
						ANY_CHAN,
						};

CONST   uchar CHAN_SEL_PRI_TR6_S[] = {
						INT_TYPE_PRI,
						NO_CHAN,
						AS_INDICATED,
						ANY_CHAN,
						};

/*-------------------------------------------------------------------------*/

		/* Additional information according to service indicator */

CONST   uchar ADD_INFO_FERNSPRECHEN_TR6_S[] = {
						SERVICE_IND_FERNSPRECHEN,
						ADD_INFO_3_1_AUDIO,
						ADD_INFO_ANALOG_AUDIO,
						ADD_INFO_7_AUDIO,
						};

CONST   uchar ADD_INFO_A_B_TR6_S[] = {
						SERVICE_IND_A_B,
						ADD_INFO_FAX_2,
						ADD_INFO_FAX_3,
						ADD_INFO_MODEM_DATEN,
						ADD_INFO_MODEM_BTX,
						};

CONST   uchar ADD_INFO_X21_TR6_S[] = {
						SERVICE_IND_X21,
						ADD_INFO_UC4,
						ADD_INFO_UC5,
						ADD_INFO_UC6,
						ADD_INFO_UC19,
						};

CONST   uchar ADD_INFO_TELEFAX_G4_TR6_S[] = {
						SERVICE_IND_TELEFAX_G4,
						ADD_INFO_NULL,
						};

CONST   uchar ADD_INFO_BTX_64_TR6_S[] = {
						SERVICE_IND_BTX_64,
						ADD_INFO_NULL,
						};

CONST   uchar ADD_INFO_X25_TR6_S[] = {
						SERVICE_IND_X25,
						ADD_INFO_UC8,
						ADD_INFO_UC9,
						ADD_INFO_UC10,
						ADD_INFO_UC11,
						ADD_INFO_UC13,
						ADD_INFO_19_2_KBS,
						};

CONST   uchar ADD_INFO_TELETEX_TR6_S[] = {
						SERVICE_IND_TELETEX,
						ADD_INFO_NULL,
						};

CONST   uchar ADD_INFO_DATA_TRANSFER_64_TR6_S[] = {
						SERVICE_IND_DATA_TRANSFER,
						ADD_DATA_TRANSFER_64,
						};

CONST   uchar ADD_INFO_MIXED_MODE_TR6_S[] = {
						SERVICE_IND_MIXED_MODE,
						ADD_INFO_NULL,
						};

CONST   uchar ADD_INFO_REMOTE_CONTROL_TR6_S[] = {
						SERVICE_IND_REMOTE_CONTROL,
						ADD_INFO_NULL,
						};

CONST   uchar ADD_INFO_GRAFIKTELEFON_TR6_S[] = {
						SERVICE_IND_GRAFIKTELEFON,
						ADD_INFO_NULL,
						};

CONST   uchar ADD_INFO_BTX_TR6_S[] = {
						SERVICE_IND_BTX,
						ADD_INFO_NULL,
						};

CONST   uchar ADD_INFO_BILDTELEFON_TR6_S[] = {
						SERVICE_IND_BILDTELEFON,
						ADD_INFO_3_1_TON,
						ADD_INFO_7_TON,
						ADD_INFO_BILD,
						};

/*-------------------------------------------------------------------------*/

		/*
		   Meta description of the information elements.
		   This description is  used to check an information element
		   inside a message and to store its value into  the internal
		   structure.
		   In the other way it is used to generate the information element of
		   a message from the internal structure.
		*/

#define NS_INCLUDE_IE_META_FUNCTION		ON		/* include prototypes of functions inside mp_ie.tr6 */

#include "tr6.mp_ie"  /* include IE meta-programs */

/*-------------------------------------------------------------------------*/

#define Ns_tr6_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_tr6_end_table_or_function		};
#define Ns_tr6_tab_tabl_entry(idx, tab)		Ns_tab_tabl_entry (idx, tab),
#define Ns_tr6_tabx_list_entry(tab)			Ns_tabx_list_entry (tab),
#define Ns_tr6_tab_tabx_entry(idx, tab)		Ns_tab_tabx_entry (idx, tab),

#define Ns_tr6_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx)	\
			Ns_tab_ie_entry (codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx, 0),

#define Ns_tr6_tab_ie_no_i_str(codes, ie, mx)	{codes, ie, A_NIL, 0, A_NIL, A_NIL, A_NIL, mx, 0},
#define Ns_tr6_tab_ie_msg_header			{CODESET_NIL, MESSAGE_HEADER, (uchar *)A_NIL, sizeof(struct i_message_header), (uchar *)Pic_address (&i_message_header), (uchar *)A_NIL, (uchar *)A_NIL, 1, 0},

#include "tr6.tab_ie"		/* include other Tables describing the IEs */

#define TR6_MX_TABL (Rnd_sizeof(TR6_TAB_TABL)/Rnd_sizeof (struct tabl))
CONST   uchar   tr6_size_tab_tabl = TR6_MX_TABL;

#define TR6_MX_TABX (Rnd_sizeof(TR6_TAB_TABX)/Rnd_sizeof (struct tabx))
CONST   uchar   tr6_size_tab_tabx = TR6_MX_TABX;

CONST	uchar	tr6_size_tab_ie = Rnd_sizeof (TR6_TAB_IE) / IE_ELEM_SIZE;	/* maximum number of item in the table */

/*==========================================================================*

			 SPECIFIC PROCEDURES  : called when the meta description cannot
			 -------------------    solve the integrity problem. The direction
									parameter indicates the origination
									of the SPDU message (D CHANNEL or APPLI).

	 FROM_D_CHANNEL common context :  p_ie points the current position in
	 -----------------------------    the SPDU message.

									p_ie_end points the end of the IE
									in the SPDU message.

									p_ind_buffer points the current free
									location in the ind_buffer.

		TO_D_CHANNEL common context :  p_ie points the current location of the
		---------------------------    SPDU message to generate.

*==========================================================================*/

uchar tr6_outgoing_cause_spdu ()
{

	ie_if_flag = ON;		/* default indicates not TO_D_CHANNEL */

		/*
		   if the outgoing cause value is corresponding to 'normal clearing',
		   which is not allowed in 1TR6, the cause IE must be coded with null length.
		   For incoming cause with null length, the default value is set to 'normal clearing'.
		*/

	if ( (direction == TO_D_CHANNEL)    &&
		 (I_cause_class == C_C_000)    &&
		 (I_cause_val   == C_V_NORMAL_CLEARING_16) ) {
		 ie_if_flag = OFF;
	}

	return (OK);

}

/*--------------------------------------------------------------------------*/

uchar tr6_incoming_cause_spdu ()
{

		/* check for wrong 'NORMAL CLEARING' incoming value (not allowed in 1TR6) */

	if ( (direction == FROM_D_CHANNEL) &&
		 (I_cause_class == C_C_000) &&
		 (I_cause_val   == C_V_NORMAL_CLEARING_16) ) {
		return (NOK);
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            tr6_check_sel_spdu - implements the checking of selection field
										in CHAN_ID IE.

Usage           uchar tr6_check_sel_spdu();

Return value :  tr6_date_spdu_fct returns OK
								NOK

common constants and declarations : ns.h tr6_i_s.h


*--------------------------------------------------------------------------*/

uchar tr6_check_sel_spdu ()
{

	if ((Call_current_exist)					&&
		(spdu_id			!= RES_ACK)			&&
		(direction			== FROM_D_CHANNEL)
	   ) {

			/*
				If not already done, initialize selection parameter
				and return OK.
			*/

		if (Is_call_ref_outgoing_call && (Call_chan_id_sel == BYTE_VAL_NIL)) {
			Call_chan_id_sel = I_chan_id_chan_sel;
			return (OK);
		}

			/*
				Check selection integrity if selection has been
				initialized.
			*/

		if (Call_chan_id_sel != BYTE_VAL_NIL) {

				/*
					If the initialization of selection field
					(Call_chan_id_sel) is not identical as the one
					which is included in the current
					message (I_chan_id_chan_sel) -> return NOK
				*/

			if (Call_chan_id_sel != I_chan_id_chan_sel) {
				return (NOK);
			}

		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            tr6_date_spdu_fct - implements the specific processing of a
							DATE Information Element (IE).

Usage           uchar tr6_date_spdu_fct();

Return value :  tr6_date_spdu_fct returns OK
								NOK

common constants and declarations : ns.h tr6_i_s.h

common objects : internal data structure i_date, ie  spdu context.

*--------------------------------------------------------------------------*/

uchar tr6_check_date_argument ( p_date_arg, following_char, returned_arg )

	/*  checks if the date argument is a two-IA5-digits number
		followed by 'following_char' character.
	*/

	uchar **p_date_arg;     /* address of the DATE information element
								scanning pointer */
	uchar following_char;   /* character to be encountered after the two bytes
								that are coding the date information */
	uchar *returned_arg;    /* returned date argument */
{

	uchar charac;  			/* current IA5 character scanned */

	charac = *(*p_date_arg)++;					/* most significant byte */

	if ( ! (Isdigit (charac)) ) {
		return (NOK);
	}

	*returned_arg	= 10 * (charac - D_0);
	charac			= *(*p_date_arg)++;			/* least significant byte */

	if ( ! (Isdigit (charac))) {
		return (NOK);
	}

	*returned_arg += charac - D_0;

	if ( (*(*p_date_arg)++ 	!= following_char) &&
		 (following_char != 0) ) {
		return (NOK);
	}

	return (OK);

}

/*------------------------------------------------------------------------*/

uchar tr6_date_spdu_fct ()
{
	uchar day;
	uchar month;
	uchar year;
	uchar hour;
	uchar minute;
	uchar second = 0;
	uchar * p_date;     /* pointer on the DATE information */

	p_date = I_date_p_info;

		/* Empty date */

	if (p_date == P_NIL) return (OK);

		/*
			extract and check day, month, year, hour, minute and second
			from the internal structure
		*/


	if (tr6_check_date_argument (&p_date, '.',  &day)    == NOK) {
		return (NOK);
	}

	if (tr6_check_date_argument (&p_date, '.',  &month)  == NOK) {
		return (NOK);
	}

	if (tr6_check_date_argument (&p_date, '-',  &year)   == NOK) {
		return (NOK);
	}

	if (tr6_check_date_argument (&p_date, ':',  &hour)   == NOK) {
		return (NOK);
	}

	if (tr6_check_date_argument (&p_date,  0 ,  &minute) == NOK) {
		return (NOK);
	}

		/* are the seconds present ? if so, check the seconds */

	if ( (I_date_lgth > 16) && (*p_date == ':') && (tr6_check_date_argument (&p_date, 0, &second) == NOK) ) {
		return (NOK);
	}

		/* now check the hour integrity */

	if ( (hour > 23) || (minute > 59) || (second > 59) ) {
		return (NOK);
	}

		/* and the date integrity */

	return (OK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name      tr6_charging_info_spdu_fct - implements the processing of a charging
								   info IE

Usage            uchar tr6_charging_info_spdu_fct();

Return value    return = OK
					   = NOK

common constants and declarations : ns.h, isdn.h

common objects : direction

*--------------------------------------------------------------------------*/

uchar tr6_charging_info_spdu_fct ()
{
	uchar i, lgth, charac;

		/* The direction is FROM_D_CHANNEL only */

	lgth = (uchar)Remainder_ie_octet;

	I_(charging_info,value) = 0;

	for (i = 0; i < lgth; i++) {
		charac = Get_inc_ie_octet;

			/* Is it a Digit */

		if ( ! (Isdigit (charac)) ) {
			return (NOK);
		}

		I_(charging_info,value) = 10 * I_(charging_info,value)
									+ (charac - '0');
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name        tr6_spf_fac_spdu_fct - implements the processing of a specific facility
						  IE (received in a SPDU message or to send in a
						  SPDU message).

Usage       uchar tr6_spf_fac_spdu_fct ();


Return value :  tr6_spf_fac_spdu_fct returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h
						- direction = direction of the message FROM D CHANNEL side
								 or TO D CHANNEL side.

*--------------------------------------------------------------------------*/

uchar tr6_spf_fac_spdu_fct ()
{
#if NS_SPF_FACILITY == OFF
		return (NOK);
#else

	if (direction == FROM_D_CHANNEL) {

					/* FROM D CHANNEL side */

		switch (I_spf_fac_code) {

			case TR6_SPF_FAC_CONGESTION :
				if (r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU) != OK) return (NOK);
				return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_CONGESTION_SPDU));

			case TR6_SPF_FAC_ANRUF_1 :
			case TR6_SPF_FAC_ANRUF_2 :
				if (r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU) != OK) return (NOK);
				return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_REDIR_NB_SPDU));

			case TR6_SPF_FAC_B_CHANNEL :

				if (r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU) != OK) return (NOK);

					/*
						The interface type must be tested at this point because
						it can't be directly tested inside the meta program.
					*/

				ie_if_flag = Na_type == BRI ? ON : OFF;
				return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_B_CHANNEL_SPDU));

			case TR6_SPF_FAC_CUG :
				if (r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU) != OK) return (NOK);
				return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_CUG_INDEX_SPDU));

			case TR6_SPF_FAC_CALL_ESTABLISHED :

					/*
						SPF_FAC_CALL_ESTABLISHED is used
						in the following spdu only
					*/

				switch (spdu_id) {

					case SETUP		:
					case CONN		:
					case TR6_FAC	:
					case TR6_FAC_ACK:
					case TR6_FAC_REJ:
						return (r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU));

					default		:
						return (NOK);
				}

			case TR6_SPF_FAC_SHIFT :
				if (tr6_spf_fac_add_info_spdu() != OK) return (NOK);
				return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_SHIFT_SPDU));

			case TR6_SPF_FAC_BILATERAL_SHIFT :
				if (tr6_spf_fac_add_info_spdu() != OK) return (NOK);
				return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_BILATERAL_SHIFT_SPDU));

			default :
				return (r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU));

		}

	} else {

				/* TO D CHANNEL side */

		switch (I_spf_fac_code) {

			case TR6_SPF_FAC_CONGESTION :
				if (s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU) != OK) return (NOK);
				return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_CONGESTION_SPDU));

			case TR6_SPF_FAC_ANRUF_1 :
			case TR6_SPF_FAC_ANRUF_2 :
				if (s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU) != OK) return (NOK);
				return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_REDIR_NB_SPDU));

			case TR6_SPF_FAC_B_CHANNEL :

				if (s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU) != OK) return (NOK);

					/*
						The interface type must be tested at this point because
						it can't be directly tested inside the meta program.
					*/

				ie_if_flag = Na_type == BRI ? ON : OFF;
				return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_B_CHANNEL_SPDU));

			case TR6_SPF_FAC_CUG :
				if (s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU) != OK) return (NOK);
				return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_CUG_INDEX_SPDU));

			case TR6_SPF_FAC_CALL_ESTABLISHED :


					/*
						SPF_FAC_CALL_ESTABLISHED is used
						in the following spdu only
					*/

				switch (spdu_id) {

					case SETUP	:
					case CONN	:
					case TR6_FAC	:
					case TR6_FAC_ACK:
					case TR6_FAC_REJ:
						return (s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU));

					default		:
						return (NOK);
				}

			case TR6_SPF_FAC_SHIFT :
				if (tr6_spf_fac_add_info_spdu() != OK) return (NOK);
				return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_SHIFT_SPDU));

			case TR6_SPF_FAC_BILATERAL_SHIFT :
				if (tr6_spf_fac_add_info_spdu() != OK) return (NOK);
				return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_BILATERAL_SHIFT_SPDU));

			default :
				return (s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_NIL_SPDU));

		}

	}

#endif

}

#if NS_SPF_FACILITY == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		tr6_spf_fac_add_info_spdu -

Usage		uchar tr6_spf_fac_add_info_spdu.

common constants and declarations : ns.h, isdn.h

*--------------------------------------------------------------------------*/

uchar tr6_spf_fac_add_info_spdu ()
{

	if (I_spf_fac_service == SERVICE_IND_DATA_TRANSFER) {

		if (direction == TO_D_CHANNEL) {

			switch (I_spf_fac_syn_asyn) {

				case BYTE_VAL_NIL :
					return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_DF_SPDU));

				case ADD_SYN :
					return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_64K_SYN_SPDU));

				case ADD_ASYN :
					return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_64K_ASYN_SPDU));

#			  if ASSERT == ON
				default :
					Trap (TRAP_SSDU, "tr6_spf_fac_add_info_ssdu");
#			  endif

			}

		} else {

			switch (Get_bits (*p_ie, 6, 2)) {

				case 0 :
					return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_DF_SPDU));

				case ADD_SYN :
					return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_64K_SYN_SPDU));

				case ADD_ASYN :
					return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_64K_ASYN_SPDU));

				default :
					return (NOK);
			}

		}

	} else {

		if (direction == TO_D_CHANNEL) {
			return(s_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_DF_SPDU));

		} else {

			return(r_exec_spdu_ie ((uchar *)&TR6_SPF_FAC_ADD_DF_SPDU));
		}
	}

	return (NOK);
}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		tr6_service_ind_add_info_spdu -

Usage		uchar tr6_service_ind_add_info_spdu.

common constants and declarations : ns.h, isdn.h

*--------------------------------------------------------------------------*/

uchar tr6_service_ind_add_info_spdu ()
{

	if (I_service_ind_service == SERVICE_IND_DATA_TRANSFER) {

		if (direction == TO_D_CHANNEL) {

			switch (I_service_ind_syn_asyn) {

				case BYTE_VAL_NIL :
					return(s_exec_spdu_ie ((uchar *)&TR6_SERVICE_IND_ADD_INFO_DF_SPDU));

				case ADD_SYN :
					return(s_exec_spdu_ie ((uchar *)&TR6_ADD_INFO_64K_SYN_SPDU));

				case ADD_ASYN :
					return(s_exec_spdu_ie ((uchar *)&TR6_ADD_INFO_64K_ASYN_SPDU));

#			  if ASSERT == ON
				default :
					Trap (TRAP_SSDU, "tr6_service_ind_add_info_ssdu");
#			  endif

			}

		} else {

			switch (Get_bits (*p_ie, 6, 2)) {

				case 0 :
					return(r_exec_spdu_ie ((uchar *)&TR6_SERVICE_IND_ADD_INFO_DF_SPDU));

				case ADD_SYN :
					return(r_exec_spdu_ie ((uchar *)&TR6_ADD_INFO_64K_SYN_SPDU));

				case ADD_ASYN :
					return(r_exec_spdu_ie ((uchar *)&TR6_ADD_INFO_64K_ASYN_SPDU));

				default :
					return (NOK);
			}

		}

	} else {

		if (direction == TO_D_CHANNEL) {
			return(s_exec_spdu_ie ((uchar *)&TR6_SERVICE_IND_ADD_INFO_DF_SPDU));

		} else {

			return(r_exec_spdu_ie ((uchar *)&TR6_SERVICE_IND_ADD_INFO_DF_SPDU));
		}
	}

	return (NOK);
}

/*------------------------------------------------------------------------*/

		/*
		   Test if interface type in chan_id IE and in
		   configuration are the same. If not return error.
		*/

uchar tr6_chan_id_spdu_fct ()
{

	if (direction == FROM_D_CHANNEL) {

		if (I_(chan_id,int_type) == INT_TYPE_BRI) {

			if (Na_type != BRI) return (NOK);

		} else {

			if (Na_type != PRI) return (NOK);
		}

	}

		/* Process PRI type chan_id */

	if (I_(chan_id,int_type) != INT_TYPE_BRI) {

		if ((I_(chan_id,chan_sel) == NO_CHAN) ||
			(I_(chan_id,chan_sel) == ANY_CHAN)) {
			ie_optional_octet = ON;
		}

		if (direction == FROM_D_CHANNEL) {
			return (r_exec_spdu_ie ((uchar *)&TR6_CHAN_ID_PRI_P));

		} else {

			return (s_exec_spdu_ie ((uchar *)&TR6_CHAN_ID_PRI_P));
		}

	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

#undef Ns_tr6_table_or_function
#undef Ns_tr6_end_table_or_function
#undef Ns_tr6_tab_tabl_entry
#undef Ns_tr6_tabx_list_entry
#undef Ns_tr6_tab_tabx_entry
#undef Ns_tr6_tab_ie_entry
#undef Ns_tr6_tab_ie_no_i_str
#undef Ns_tr6_tab_ie_msg_header

#define Ns_tr6_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_tr6_end_table_or_function		}

#define Ns_tr6_tab_tabl_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_val, (uchar *)tab);
#define Ns_tr6_tabx_list_entry(tab)			Pic_init_struct_array_next (p_table,  p_val, (uchar	*)tab);
#define Ns_tr6_tab_tabx_entry(idx, tab)		Pic_init_struct_array (p_table, idx, p_list_tab, (struct tabx_list *)tab);

#define Ns_tr6_tab_ie_entry(codes, ie, mp_a, i_str, df_spdu, df_ssdu, mx)	\
	Pic_init_struct_array (p_table,  i_pic, p_prog, (uchar	*)mp_a);		\
	Pic_init_struct_array (p_table,  i_pic, p_i_struct, (uchar	*)i_str);	\
	Pic_init_struct_array (p_table,  i_pic, p_init_spdu, (uchar	*)df_spdu);	\
	Pic_init_struct_array_next (p_table,  p_init_ssdu, (uchar	*)df_ssdu);

#define Ns_tr6_tab_ie_no_i_str(codes, ie, mx)	Ns_tr6_tab_ie_entry (0, 0, P_NIL, P_NIL, P_NIL, P_NIL, 0)

#define Ns_tr6_tab_ie_msg_header		Ns_tr6_tab_ie_entry (0, 0, P_NIL, &i_message_header, P_NIL, P_NIL, 0)

		/*	Function used to initialize address fields in Tables above */


void pic_init_ns_tr6_ie ()
{
	uchar	i_pic;			/* current index */

#	include "tr6.tab_ie"
}

#endif /* end of PIC used} */


/*EOF*/
