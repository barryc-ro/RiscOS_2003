
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_switch.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) Deutsche telekom 1TR6 switch :
 *
 *        csc_dl_reinit - implement an unexpected data link reinit.
 *
 *        circuit_switched_call - implements the processing of the call
 *		                          control procedures.
 *
 *        circuit_switched_call_n - implements the processing of the call
 *		                            control procedures.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*                */
						/*----------------*/

					/* FUNCTIONS DECLARATION */

#if NEW_FCT_STYLE == ON
	void	tr6_u0						(void);
	void	tr6_u1						(void);
	void	tr6_u2						(void);
	void	tr6_u3						(void);
	void	tr6_u4						(void);
	void	tr6_u6						(void);
	void	tr6_u7						(void);
	void	tr6_u8						(void);
	void	tr6_u9						(void);
	void	tr6_u10						(void);
	void	tr6_u11						(void);
	void	tr6_u12						(void);
	void	tr6_u14						(void);
	void	tr6_u15						(void);
	void	tr6_u17						(void);
	void	tr6_u19						(void);
	void	tr6_u25						(void);
	void	tr6_internal_process		(void);
	uchar	tr6_circuit_switched_call	(void);
	uchar	tr6_error_handler			(void);
	void	tr6_send_to_ces		 		(uchar ev_id, uchar ie_flag, uchar my_ces);
	void	tr6_send_to_other_ces 		(uchar ev_id, uchar ie_flag);
	uchar	tr6_nb_other_active_ces		(void);
	uchar	tr6_nb_active_ces			(void);
	void 	tr6_set_date_nil			(void);
#else
	void	tr6_u0						();
	void	tr6_u1						();
	void	tr6_u2						();
	void	tr6_u3						();
	void	tr6_u4						();
	void	tr6_u6						();
	void	tr6_u7						();
	void	tr6_u8						();
	void	tr6_u9						();
	void	tr6_u10						();
	void	tr6_u11						();
	void	tr6_u12						();
	void	tr6_u14						();
	void	tr6_u15						();
	void	tr6_u17						();
	void	tr6_u19						();
	void	tr6_u25						();
	uchar	tr6_circuit_switched_call	();
	uchar	tr6_error_handler			();
	void	tr6_internal_process		();
	void	tr6_send_to_ces		 		();
	void	tr6_send_to_other_ces 		();
	uchar	tr6_nb_other_active_ces		();
	uchar	tr6_nb_active_ces			();
	void 	tr6_set_date_nil			();
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	tr6_csc_dl_reinit () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN)
									   for TR6 implementation.

Usage           	void tr6_csc_dl_reinit ();

Related
functions usage		void tr6_csc_dl_reinit ()

Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA

*--------------------------------------------------------------------------*/

void tr6_csc_dl_reinit ()
{

	ns_access_first_call ();

	while (Call_current_exist) {

		if (Call_state != STATE_NIL) {
			I_call_ref = Call_ref;
			Set_call_ref_not_nil ();

			switch (Call_state) {
				case STATE_OVERLAP_SENDING_2 :
/*$*/			case STATE_CALL_RECEIVED_7 :
				case STATE_PASSIVE_14 :

					if ( ! (Call_state == STATE_CALL_RECEIVED_7 &&
							Na_connection == POINT_TO_POINT)) {

							/* Class and Value into a cause IE */

						set_i_cause (C_C_011, C_V_OUT_OF_ORDER, P_NIL);
						Send_to_call_control (NS_CLEAR_CO);
						ns_stop_all_timers ();
						Send_to_d_channel (DISC);
						Start_timer_ns (TR6_T305);
						Set_state (STATE_DISCONNECT_REQUEST_11);
					}

					break;
			}

		}

		ns_access_next_call ();
	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            tr6_circuit_switched_call - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar tr6_circuit_switched_call ();

Related
functions usage void tr6_u0 .... tr6_u25 ()

Description     tr6_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*								CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308     |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|     start T305|     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

uchar tr6_circuit_switched_call ()
{

					/* 1 - EVENT DRIVEN PROCESSING */

	switch (event_id) {

							/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

							/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) == NOK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_011, C_V_USER_BUSY, P_NIL);
				Send_to_d_channel (REL);
				return (OK);
			}

			break;

							/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_CALL_PRESENT_6 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_DISCONNECT_INDICATION_12 :
				case STATE_RELEASE_REQUEST_19 :
					ns_unexpected_ev ();
					break;

				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_RESUME_REQUEST_17 :
				case STATE_OVERLAP_RECEIVING_25 :
					Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel_and_save_spdu (REL);			/* send the Release Message to network */
					N308 = 0;
					Start_timer_ns (TR6_T308);

					if (Call_state == STATE_RESUME_REQUEST_17) {
						Stop_timer_ns (TR6_T318);
					}

					Set_state (STATE_RELEASE_REQUEST_19);
					break;

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_IN);
					Set_state (STATE_DISCONNECT_INDICATION_12);		/* enter disconnect indication state */
					break;
			}

			return (OK);

							/* - RELEASE */

		case DA_REL :

			switch (Call_state) {

				case STATE_NULL_0 :
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					return (OK);

				case STATE_RELEASE_REQUEST_19 :
					Send_to_call_control (NS_CLEAR_CO);
					break;


				case STATE_CALL_PRESENT_6 :

					if (Na_connection == POINT_TO_MULTIPOINT) {
						ns_unexpected_ev ();
						return (OK);
					}

					/* else default case */

				default :
					Send_to_call_control (NS_CLEAR_CO);			/* send NS clear confirm to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);				/* send the Release Complete Message to network */
					break;
			}

			Call_fac_rq 	= OFF;			/* reset of the start fac sequence flag */
			call_clear ();					/* free call context */
			return (OK);

						/* - RELEASE COMPLETE */

		case DA_REL_COMP :

			switch (Call_state) {

				case STATE_NULL_0 :
					call_clear ();
					break;

				case STATE_RELEASE_REQUEST_19 :
					Send_to_call_control (NS_CLEAR_CO);	/* send NS clear confirm to Layer 4 */
					call_clear ();
					break;

				case STATE_PASSIVE_14 :

					if (Na_connection == POINT_TO_MULTIPOINT) {
						Send_to_call_control (NS_CLEAR_CO);		/* send NS clear confirm to Layer 4 */
						Stop_timer_ns (TR6_T3D2);
						Reset_internal_ie ();
						Send_to_d_channel_and_save_spdu (REL);	/* send the Release Message to network */
						N308 = 0;
						Start_timer_ns (TR6_T308);
						Set_state (STATE_RELEASE_REQUEST_19);

					} else {

						Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_u14");
					}

					break;

				case STATE_CALL_PRESENT_6 :

					if (Na_connection == POINT_TO_MULTIPOINT) {
						ns_unexpected_ev ();
						return (OK);
					}

					/* else default case */

				default :
					ns_stop_all_timers ();
					Send_to_call_control (NS_CLEAR_CO);			/* send NS clear confirm to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel_and_save_spdu (REL);		/* send the Release Message to network */
					N308 = 0;
					Start_timer_ns (TR6_T308);
					Set_state (STATE_RELEASE_REQUEST_19);
			}

			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

/*$*/			case STATE_NULL_0 :
					Reset_internal_ie ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
					break;

				case STATE_DISCONNECT_REQUEST_11 :
					ns_stop_all_timers ();
					Send_to_d_channel_and_save_spdu (REL);
					Start_timer_ns (TR6_T308);
					Set_state (STATE_RELEASE_REQUEST_19); 			/* enter the Disconnect Request state */
					break;

				case STATE_DISCONNECT_INDICATION_12 :
					disc_cause_error ();
					Stop_timer_ns  (TR6_T300);
					go_to_state_19 (TR6_T308);
					break;

				case STATE_RELEASE_REQUEST_19 :

					/* error case */

					return (OK);

				case STATE_CALL_PRESENT_6 :

					if (Na_connection == POINT_TO_MULTIPOINT) {

						if ((is_ie_i (CODESET_0, CAUSE) == PRESENT)
							&&
							(
							 (
							  (I_cause_class == C_C_000) &&
							  (I_cause_val   == C_V_BEARER_SERVICE_NOT_IMPLEMENTED)
							 )
							 ||
							 (
							  (I_cause_class == C_C_011) &&
							  (I_cause_val   == C_V_NO_USER_RESPONDING)
							 )
							)
						   ) {

								/* Ignore any call which is not compatible */

							Reset_internal_ie ();
							Send_to_call_control (NS_CLEAR_CO);
							call_clear ();
							return (OK);

						} else {

							Stop_timer_ns (TR6_T300);
							Send_to_d_channel (DISC);
							Start_timer_ns (TR6_T305);
							Set_state (STATE_DISCONNECT_REQUEST_11); 			/* enter the Disconnect Request state */
							return (OK);
						}
					}

						/* else default */

				default :
					ns_stop_all_timers ();

					if (is_ie_i (CODESET_0, CAUSE) == ABSENT) {
						ie_implicit_val_x (CODESET_0, CAUSE, 0);	/* init implicit value */
					}

					Save_cause ();									/* to send the RELEASE if T305 expire */
					Send_to_d_channel (DISC);						/* send a DISCONNECT message */
					Start_timer_ns	(TR6_T305);								/* start T305 */
					Set_state (STATE_DISCONNECT_REQUEST_11); 		/* enter the Disconnect Request state */
					break;

			}

			return (OK);

							/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
				case STATE_INCOMING_CALL_PROC_9 :
				case STATE_RESUME_REQUEST_17 :

					ns_unexpected_ev ();
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					if (Na_connection == POINT_TO_MULTIPOINT ) {
							Send_to_call_control (NS_INFO_IN);

					} else {

						ns_unexpected_ev ();
						break;
					}

				case STATE_OVERLAP_SENDING_2 :

					Send_to_call_control (NS_INFO_IN);

					/* if add_info field is stored then */
					/* DA_INFO process is like DA_CALL_PROC */

#					if NS_SPF_FACILITY == ON

						if (is_ie_i (CODESET_0, SPF_FAC) == PRESENT) {

							if (I_spf_fac_add_info != 0) {

								/* like DA_CALL_PROC process */

								Stop_timer_ns (TR6_T304);
								Start_timer_ns (TR6_T310);
								Set_state (STATE_OUTGOING_CALL_PROC_3);
							}
						}

#					endif

					break;

				case STATE_OVERLAP_RECEIVING_25 :

					if (Na_connection == POINT_TO_POINT) {
						Send_to_call_control (NS_INFO_IN);
						Restart_timer_ns (TR6_T302);

					} else {

						Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_u25");
					}

					break;

				default :
					Send_to_call_control (NS_INFO_IN);
					break;

			}

			return (OK);

								/* STATUS */

		case DA_STATUS :

			switch (Call_state) {

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					if (Na_connection == POINT_TO_MULTIPOINT ) {

/*$ */						/* TU_status */

					} else {

						ns_unexpected_ev ();
						break;
					}

					break;

				case STATE_ACTIVE_10 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_DISCONNECT_INDICATION_12 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RELEASE_REQUEST_19 :

/*$ */						/* TU_status */

					break;

				default :
					ns_unexpected_ev ();

			}

			return (OK);

								/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			if (Call_state == STATE_OVERLAP_SENDING_2) {
				Send_to_d_channel (TR6_INFO);
				Restart_timer_ns (TR6_T304);

			} else {

				ns_unexpected_ev ();
				break;
			}

			return (OK);

	} /* End switch (event_id) */

/*.........................................................................*/

						/* 2 - STATE DRIVEN PROCESSING */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "tr6_circuit_switched_call");
	}

	switch (Call_state) {

			/* Null state (u0) */

		case STATE_NULL_0 :
		case STATE_WAIT_DL :
			tr6_u0 ();
			break;

			/* Call initiated (u1) */

		case STATE_CALL_INIT_1 :
			tr6_u1 ();
			break;

			/* Overlap sending (u2) */

		case STATE_OVERLAP_SENDING_2 :
			tr6_u2 ();
			break;

			/* Outgoing call proceeding (u3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			tr6_u3 ();
			break;

			/* Call delivered (u4) */

		case STATE_CALL_DELIVERED_4 :
			tr6_u4 ();
			break;

			/* Call present (u6) */

		case STATE_CALL_PRESENT_6 :
			tr6_u6 ();
			break;

			/* Call received (u7) */

		case STATE_CALL_RECEIVED_7 :
			tr6_u7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			tr6_u8 ();
			break;

			/* Incoming call proceeding (u9) */

		case STATE_INCOMING_CALL_PROC_9 :

			if (Na_connection == POINT_TO_POINT) {
				tr6_u9 ();

			} else {

				Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_u9");
			}

			break;

			/*  Active (u10) */

		case STATE_ACTIVE_10 :
			tr6_u10 ();
			break;

			/* Disconnect request (u11) */

		case STATE_DISCONNECT_REQUEST_11 :
			tr6_u11 ();
			break;

			/* Disconnect indication (u12) */

		case STATE_DISCONNECT_INDICATION_12 :
			tr6_u12 ();
			break;

		case STATE_PASSIVE_14 :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				tr6_u14 ();

			} else {

				Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_u14");
			}

			/* Suspend request (u15) */

		case STATE_SUSPEND_REQUEST_15 :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				tr6_u15 ();

			} else {

				Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_u15");
			}

			break;

			/* Resume request (u17) */

		case STATE_RESUME_REQUEST_17 :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				tr6_u17 ();

			} else {

				Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_u17");
			}

			break;

			/* Release request (u19) */

		case STATE_RELEASE_REQUEST_19 :
			tr6_u19 ();
			break;

		case STATE_OVERLAP_RECEIVING_25 :

			if (Na_connection == POINT_TO_POINT) {
				tr6_u25 ();

			} else {

				Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_u25");
			}

			break;

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "circuit_switched_call");

	}

	return (OK);
}

#if EQUIPMENT == NT2

#	if NEW_FCT_STYLE == ON
		void 		tr6_n0						(void);
		void 		tr6_n1						(void);
		void 		tr6_n2						(void);
		void 		tr6_n3						(void);
		void 		tr6_n4						(void);
		void 		tr6_n6						(void);
		void 		tr6_n7						(void);
		void 		tr6_n8						(void);
		void 		tr6_n10						(void);
		void 		tr6_n11						(void);
		void 		tr6_n12						(void);
		void 		tr6_n15						(void);
		void 		tr6_n16						(void);
		void 		tr6_n17						(void);
		void 		tr6_n19						(void);
		void 		tr6_n25						(void);
		void 		tr6_n0i						(void);
		void 		tr6_n7i						(void);
		void 		tr6_n8i						(void);
		void 		tr6_n19i					(void);
#	else
		void 		tr6_n0						();
		void 		tr6_n1						();
		void 		tr6_n2						();
		void 		tr6_n3						();
		void 		tr6_n4						();
		void 		tr6_n6						();
		void 		tr6_n7						();
		void 		tr6_n8						();
		void 		tr6_n10						();
		void 		tr6_n11						();
		void 		tr6_n12						();
		void 		tr6_n15						();
		void 		tr6_n16						();
		void 		tr6_n17						();
		void 		tr6_n19						();
		void 		tr6_n25						();
		void 		tr6_n0i						();
		void 		tr6_n7i						();
		void 		tr6_n8i						();
		void 		tr6_n19i					();
#	endif

#define Tr6_send_to_all_ces(ev_id, ie_flag)			tr6_send_to_other_ces (ev_id, ie_flag); \
													tr6_send_to_ces (ev_id, ie_flag, Call_ces)	/* send to all terminals ev_id. Flag = OFF for specific cause */




						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*                   */
						/*-------------------*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            tr6_circuit_switched_call_n - implements the processing of
				the sequence of messages and services primitives associated
				with the control of circuit-switched connections.

Usage          	uchar tr6_circuit_switched_call_n ();

Related
functions usage void n0 .... n25 () ; n0i(), n7i(), n8i(), n19i

Description     tr6_circuit_switched_call implements the processing of a received
				event according to the event (event driven) or to the state
				of the current call (state driven).

Return value    uchar = OK  the event processing is correctly done,
					  = NOK the event processing is not correctly done.

Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

/*								CLEARING PROCEDURES

	   TE                         NT/NETWORK                        TE
 _________________             _________________            _________________
 |               |             |               |            |               |
 |NS_CLEAR_RQ    |   DA_DISC   |       |       |            |               |
 |==========>....|------------>|.......|.....  |            |               |
 | start T305    |			   |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |               |             |  .    |    .  |            |               |
 |NS_CLEAR_CO    |   DA_REL    |  .    |    .  |   DA_DISC  |    NS_CLEAR_IN|
 |<===========...|<------------|...    |    ...|----------->|...===========>|
 |  stop T305  . |             |start T308	   |            |    NS_CLEAR_RS|
 |             . | DA_DISC_COMP|   start T305  |     REL    |  .<===========|
 |             ..|------------>|       |    ...|<-----------|...  start T308|
 |               |             |       |    .  |            |               |
 |               |             |       |    .  | DA_REL_COMP|    NS_CLEAR_CO|
 |               |             |       |    ...|----------->|...===========>|
 |               |             |       |       |            |     stop T308 |
 |---------------|             |---------------|            |---------------|

*/

uchar tr6_circuit_switched_call_n ()
{

/*
					if (multipoint) {

						if (from d_channel)
				1 - 		INTERNAL PROCESSING 	(Individual process)
						}
					}

				2 - EVENT DRIVEN PROCESSING 	(Global process)
				3 - STATE DRIVEN PROCESSING		(Global process)

					if (multipoint) {

						if (from call control)
				4 - 		INTERNAL PROCESSING 	(Individual process)
						}
					}
*/


/*.........................................................................*/

	if (Na_connection == POINT_TO_MULTIPOINT) {

					/* 1 - INTERNAL PROCESS */

		if ((i_entity_origination == ENT_DL_D) || (i_entity_origination == ENT_TI)) {
			tr6_internal_process ();
		}

		if (i_entity_origination == ENT_CC) {

			if (Call_ces_connect != NIL) {
				Ns_access_dl_ces (Call_ces_connect);
			}
		}
	}

/*.........................................................................*/

					/* 2 - EVENT DRIVEN PROCESS */


	switch (event_id) {


							/* EV_NIL : do nothing */

		case EV_NIL :
			return (OK);

							/* SETUP : allocate a call context */

		case DA_SETUP :

			if (allocate_call (INCOMING_CALL, 0) == NOK) {
				Reset_internal_ie ();
				set_i_cause	(C_C_101, C_V_NETWORK_CONGESTION, P_NIL);
				Send_to_d_channel (REL_COMP);
				return (OK);
			}
			break;

							/* DISCONNECT */

		case DA_DISC :
			Call_fac_rq		= OFF;

			switch (Call_state) {

				case STATE_CALL_RECEIVED_7 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Set_state (STATE_CALL_PRESENT_6);
						send_state (C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, DIAGNOSTIC_NIL);
						Set_state (STATE_CALL_RECEIVED_7);

					} else {

						ns_action_to_cc (T3_NIL, T3_NIL, NS_CLEAR_IN,
															 STATE_DISCONNECT_REQUEST_11);
					}

					break;


				case STATE_CONNECT_REQUEST_8 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Set_state (STATE_CALL_PRESENT_6);
						send_state (C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, DIAGNOSTIC_NIL);
						Set_state (STATE_CONNECT_REQUEST_8);

					} else {

						ns_action_to_cc (T3_NIL, T3_NIL, NS_CLEAR_IN,
														   STATE_DISCONNECT_REQUEST_11);
					}

					break;

				case STATE_CALL_PRESENT_6 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_DISCONNECT_INDICATION_12 :
					ns_stop_all_timers ();
					Reset_internal_ie ();
					go_to_state_19 (TR6_T308);
					break;


				case STATE_RELEASE_REQUEST_19 :
						/* no process */
					break;

				case STATE_NULL_0 :
				case STATE_SUSPEND_REQUEST_15 :
					ns_unexpected_ev ();
					break;

				default :
					ns_stop_all_timers ();
					ns_action_to_cc (T3_NIL, T3_NIL, NS_CLEAR_IN,
													   STATE_DISCONNECT_REQUEST_11);
					break;

			}

			return (OK);

							/* - RELEASE */

		case DA_REL :
			Call_fac_rq 	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

				case STATE_CALL_PRESENT_6 :
				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Reset_internal_ie ();
						Send_to_d_channel (REL_COMP);

					} else {

						Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
						Reset_internal_ie ();
						Send_to_d_channel (REL_COMP);
						call_clear ();
					}

					break;

				case STATE_SUSPEND_REQUEST_15 :
					ns_unexpected_ev ();
					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					Reset_internal_ie ();
					Send_to_d_channel (REL_COMP);					/* send the Release Complete Message to network */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);


						/* - RELEASE COMPLETE */

		case DA_REL_COMP :

			Call_fac_rq	= OFF;

			switch (Call_state) {

				case STATE_NULL_0 :

					/* no process */

					break;

				case STATE_CALL_INIT_1 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RESUME_REQUEST_17 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_PRESENT_6 :
				case STATE_INCOMING_CALL_PROC_9 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						save_ie_cause ();

						if (Call_state == STATE_CALL_PRESENT_6) {
							Call_sub_state = N6_REL_COMP;

						} else {

							Call_sub_state = N6;
						}

					} else {

						Send_to_call_control (NS_CLEAR_CO);			/* send NS clear to Layer 4 */
						call_clear ();
					}

					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					if (Call_ces_setup != DL_CES_BROADCAST) {
						Send_to_call_control (NS_CLEAR_CO);				/* send NS clear to Layer 4 */
						call_clear ();
					}

					break;

				default :
					Send_to_call_control (NS_CLEAR_CO);				/* send NS clear confirm to Layer 4 */
					call_clear ();									/* free call context */
					break;

			}

			return (OK);

						/* NS CLEAR REQUEST */

		case NS_CLEAR_RQ :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_DISCONNECT_REQUEST_11 :
				case STATE_RELEASE_REQUEST_19 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_PRESENT_6 :
					Release_saved_spdu ();								/* saved setup no more useful */
					Stop_timer_ns (TR6_T303);

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Send_to_call_control (NS_CLEAR_IN);				/* send NS clear to Layer 4 */
						Set_state (STATE_CALL_ABORT_22);

					} else {

						ns_action_to_dl (T3_NIL, TR6_T305, DISC,
														   STATE_DISCONNECT_INDICATION_12);
					}

					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Tr6_send_to_all_ces (REL, ON);			/* send a REL with cause #26 to all ces which responded with ALERT */
						Set_state (STATE_RELEASE_REQUEST_19);

					} else {

						ns_action_to_dl (T3_NIL, TR6_T305, DISC,
														   STATE_DISCONNECT_INDICATION_12);
					}

					break;

				default :
					ns_stop_all_timers ();
					Save_cause ();									/* to send the RELEASE if TR6_T305 expire */
					ns_action_to_dl (T3_NIL, TR6_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
					break;

			}

			return (OK);

							/* INFO */

		case DA_INFO :

			switch (Call_state) {

				case STATE_NULL_0 :
				case STATE_CALL_INIT_1 :
				case STATE_CALL_PRESENT_6 :
				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RESUME_REQUEST_17 :
				case STATE_CALL_ABORT_22 :
					ns_unexpected_ev ();
					break;

				case STATE_OVERLAP_SENDING_2 :
					Send_to_call_control (NS_INFO_IN);
					Start_timer_ns (TR6_T302);
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Set_state (STATE_CALL_PRESENT_6);
						send_state (C_C_NORMAL_EVENT, C_V_NORMAL_CLEARING_16, DIAGNOSTIC_NIL);

					} else {

						Send_to_call_control (NS_INFO_IN);
					}

					break;

				default :
					Send_to_call_control (NS_INFO_IN);
					break;

			}

			return (OK);

								/* STATUS */

								/* NS INFORMATION REQUEST */

		case  NS_INFO_RQ :

			switch (Call_state) {

				case STATE_CALL_PRESENT_6 :

					if (Na_connection == POINT_TO_POINT) {
						Send_to_d_channel (INFO);
					}

					break;

				case STATE_SUSPEND_REQUEST_15 :
				case STATE_RESUME_REQUEST_17 :
				case STATE_CALL_ABORT_22 :
					ns_unexpected_ev ();
					break;

				case STATE_CALL_RECEIVED_7 :
				case STATE_CONNECT_REQUEST_8 :
				case STATE_INCOMING_CALL_PROC_9 :

					if (Call_ces_setup == DL_CES_BROADCAST) {
						Tr6_send_to_all_ces (INFO, ON);
						break;
					}

					/* else default case */

				default :
					Send_to_d_channel (INFO);
					break;
			}

			return (OK);

		case DA_STATUS :
			return (OK);

		case DA_CONN :
		case INT_CONN_IN :
		case NS_CONN_RS :
			Call_ces_connect = Dl_ces;
			break;


	} /* End switch (event_id) */

/*.........................................................................*/

				/* 3 - STATE DRIVEN PROCESS */

			/*
					 Switch according to the call state :

			   Dispatch to the function that processes the state except if
			   it is a clearing event not received  in an exceptional condition.
			   In this case the event is processed independently of the call state.
			*/

	if (! Call_current_exist) {
		Trap (TRAP_STATE_NO_CALL, "tr6_circuit_switched_call_n");
	}

	switch (Call_state) {

			/* Null state (n0) */

		case STATE_NULL_0 :
			tr6_n0 ();
			break;

			/* Call initiated (n1) */

		case STATE_CALL_INIT_1 :
			tr6_n1 ();
			break;

			/* Overlap sending (n2) */

		case STATE_OVERLAP_SENDING_2 :
			tr6_n2 ();
			break;

			/* Outgoing call proceeding (n3) */

		case STATE_OUTGOING_CALL_PROC_3 :
			tr6_n3 ();
			break;

			/* Call delivered (n4) */

		case STATE_CALL_DELIVERED_4 :
			tr6_n4 ();
			break;

			/* Call present (n6) */

		case STATE_CALL_PRESENT_6 :
			tr6_n6 ();
			break;

			/* Call received (n7) */

		case STATE_CALL_RECEIVED_7 :
			tr6_n7 ();
			break;

			/* Connect request (u8) */

		case STATE_CONNECT_REQUEST_8 :
			tr6_n8 ();
			break;

			/*  Active (n10) */

		case STATE_ACTIVE_10 :
			tr6_n10 ();
			break;

			/* Disconnect request (n11) */

		case STATE_DISCONNECT_REQUEST_11 :
			tr6_n11 ();
			break;

			/* Disconnect indication (n12) */

		case STATE_DISCONNECT_INDICATION_12 :
			tr6_n12 ();
			break;

			/* Suspend request (n15) */

		case STATE_SUSPEND_REQUEST_15 :
			tr6_n15 ();
			break;

			/* Resume request (n17) */

		case STATE_RESUME_REQUEST_17 :
			tr6_n17 ();
			break;

			/* Release request (n19) */

		case STATE_RELEASE_REQUEST_19 :
			tr6_n19 ();
			break;

			/* Unknown state --> Trap */

		default :
			Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_circuit_switched_call_n");

	}

/*.........................................................................*/


	if (Na_connection == POINT_TO_MULTIPOINT) {

					/* 4 - INTERNAL PROCESS */

		if (i_entity_origination == ENT_CC) {
			tr6_internal_process ();
		}
	}

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            tr6_internal_process - (for individual terminals in multipoint
					configuration only)
Usage          	uchar tr6_internal_process ();


Common constants and declarations : ns.h

Common objects	call current context,
				message current context.

*--------------------------------------------------------------------------*/

void tr6_internal_process ()
{
	if (Call_current_exist) {

			/* Internal state are meaningful for outgoing calls only */

		if (Call_ces_setup != DL_CES_BROADCAST) return;

		switch (Call_int_state) {

			case STATE_0_I :
				tr6_n0i ();
				break;

			case STATE_7_I :
				tr6_n7i ();
				break;

			case STATE_8_I :
				tr6_n8i ();
				break;

			case STATE_19_I :
				tr6_n19i ();
				break;

			default :

				/* Unknown state --> Trap */

				Trap (TRAP_UNKNOWN_CALL_STATE, "tr6_circuit_switched_call_n");
				break;
		}

		switch (event_id) {	/* shall be done after the state-specific treatment */

			case INT_REL_RQ :
				Stop_int_timer  	(CURRENT_INT_TIMER);
				Start_int_timer 	(TR6_T308I);
				Send_to_d_channel_and_save_spdu (REL);
				Set_int_ces_state 	(STATE_19_I);
				break;
		}

	}


}

/*-------------------------------------------------------------------------*/

void tr6_send_to_ces (ev_id, ie_flag, the_ces)

	uchar 		ev_id;				/* event_id */
	uchar       ie_flag;            /* ON : use current cause, OFF : forced cause */
	uchar		the_ces;
{
	switch (ev_id) {

		case REL :

				/* Cause forced ? */

			if (ie_flag == OFF) {
				Reset_internal_ie   ();
				set_i_cause         (C_C_011, C_V_CALL_REJECTED, P_NIL);
			}

				/* Send RELEASE to the terminal on the_ces */

			Ns_access_dl_ces    (Ces_from_x (the_ces));
			Stop_int_timer 		(CURRENT_INT_TIMER);
			Start_int_timer		(TR6_T308I);
			tr6_set_date_nil 	();
			Send_to_d_channel   (REL);
			Set_int_ces_state 	(STATE_19_I);

		break;

		case INFO :
			Send_to_d_channel (INFO);
			break;
	}
}

/*-------------------------------------------------------------------------*/

void tr6_send_to_other_ces (ev_id, ie_flag)

	uchar 		ev_id;				/* event_id */
	uchar       ie_flag;            /* ON : use current cause, OFF : forced cause */
{
	register    uchar the_ces;		/* index */

	for (the_ces = 0; the_ces < DL_MX_DLCEP; the_ces++) {

		if (Call_alert (the_ces) == ON && (Ces_from_x (the_ces) != Call_ces)) {
			tr6_send_to_ces (ev_id, ie_flag, the_ces);
		}
	}

		/* Restore initial dl context */

	Ns_access_dl_ces (Call_ces);
}

/*-------------------------------------------------------------------------*/

uchar tr6_nb_other_active_ces ()
{
	uchar	the_ces;	/* index */
	uchar	active_ces;	/* nb of terminal with Call_alert == ON except the one on current ces */

	active_ces = 0;

	for (the_ces = 0; the_ces < DL_MX_DLCEP; the_ces++) {

		if (Call_alert (the_ces) == ON && (Ces_from_x (the_ces) != Dl_ces)) {
			active_ces++;
		}
	}

	return (active_ces);
}

/*-------------------------------------------------------------------------*/

uchar tr6_nb_active_ces ()
{
	uchar	the_ces;	/* index */
	uchar	active_ces;	/* nb of terminal with Call_alert == ON except the one on current ces */

	active_ces = 0;

	for (the_ces = 0; the_ces < DL_MX_DLCEP; the_ces++) {

		if (Call_alert (the_ces) == ON) {
			active_ces++;
		}
	}

	return (active_ces);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	tr6_csc_dl_reinit_n () - implements the circuit switched call
									   circuit process after an unexpected
									   restart of the data link (DL_EST_IN).

Usage           	void tr6_csc_dl_reinit_n ();


Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/

void tr6_csc_dl_reinit_n ()
{

	ns_access_first_call ();

	while (Call_current_exist) {

			/* Only the Call using the current DL */

		if (Call_ces == Dl_ces) {

			switch (Call_state) {


				case STATE_OVERLAP_SENDING_2 	:
					ns_stop_all_timers ();
					set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
					Send_to_d_channel (DISC);
					Set_state (STATE_DISCONNECT_INDICATION_12);
					Start_timer_ns (TR6_T305);

				default :
					break;


			}

		}

		ns_access_next_call ();
	}

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            	tr6_set_date_nil () - set a empty date IE.

Usage           	void tr6_set_date_nil ();


Common constants and declarations : ns.h

Common objects :    all the call contexts of the current NA, and the
					current DL context.

*--------------------------------------------------------------------------*/
void tr6_set_date_nil ()
{

	I_(date, lgth) 		= 0;
	I_(date, p_info) 	= P_NIL;
	set_ie_i (CODESET_6, DATE);
}

#endif

/*EOF*/
