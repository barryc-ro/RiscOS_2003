
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - mp_ie.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the DEUTSCHE TELECOM 1TR6 information
 * element and the integrity constraints associated to them.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	tr6_chan_id_spdu_fct			(Void_parm);
	uchar	tr6_spf_fac_spdu_fct			(Void_parm);
	uchar	tr6_spf_fac_add_info_spdu		(Void_parm);
	uchar	tr6_service_ind_add_info_spdu 	(Void_parm);
	uchar	tr6_charging_info_spdu_fct		(Void_parm);
	uchar	tr6_congest_level_spdu			(Void_parm);
	uchar	tr6_outgoing_cause_spdu			(Void_parm);
	uchar	tr6_incoming_cause_spdu			(Void_parm);
	uchar	tr6_date_spdu_fct				(Void_parm);
	uchar	tr6_check_sel_spdu				(Void_parm);

#endif

/*------------ Congestion level (CONGEST_LEVEL) */

D_START	(TR6_CONGEST_LEVEL_SPDU)
	D_TABL (LEVEL)
D_END   (END_SPDU)

START	(TR6_CONGEST_LEVEL_SPDU)
	TABL (0,4,TR6_T_CONGEST_LEVEL,				&i_congest_level[0].congest_level)
END     (0)


/*------------ Cause (CAUSE) */

D_START	(TR6_CAUSE_SPDU)
		D_FUNCTION  (OUTGOING_CAUSE)
		D_IF_VAL    (NOT_NORMAL_CLEARING)	/* Means that length is not 0 */
			D_TABL      (C_CLASS)
			D_TABX      (C_VAL)
			D_EXT_1     (_3)
			D_FUNCTION  (INCOMING_CAUSE)
			D_OPTIONAL_OCTET (_3_OPTION)
			D_VAL       (CODING_STD)
			D_PAD       (NS_PAD_4)
			D_TABL      (LOCATION)
			D_EXT_1     (_4)
D_END   (CAUSE_E_A)

START	(TR6_CAUSE_SPDU)
		FUNCTION(tr6_outgoing_cause_spdu)
		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

				/* length is not 0 */

			TABL    (4,3,TR6_T_C_C,             &i_cause[0].cause_class)
			TABX    (0,4,TR6_TX_C_V,            &i_cause[0].cause_class,    &i_cause[0].cause_val)
			EXT_1   ()
			FUNCTION(tr6_incoming_cause_spdu)
			OPTIONAL_OCTET ()
			VAL     (5,2,CODING_STD_NATIONAL,&i_cause[0].coding_std)
			PAD     (4,1)
			TABL    (0,4,TR6_T_LOCATION,        &i_cause[0].cause_loc)
			EXT_1	()
END     (0)

/*------------ Connected address (CONN_NB) */

D_START	(TR6_CONN_NB_SPDU)
		D_TABL      (TYPE)
		D_TABL      (PLAN_ID)
		D_EXT_1     (_3)
		D_TEXT      (DIGIT_)
D_END   (END_SPDU)

START	(TR6_CONN_NB_SPDU)
		TABL    (4,3,TR6_T_CONN_NB_TYPE,    &i_conn_nb[0].nb_type)
		TABL    (0,4,TR6_T_CONN_NB_PLAN,    &i_conn_nb[0].plan_id)
		EXT_1   ()
		TEXT    (IA5,DIGIT, &i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END     (0)


/*------------ Call_identity (CALL_ID) */
/*$ length may be 0 (RESume and SUSPend */

D_START	(TR6_CALL_ID_SPDU)
	D_ANY_VAL   (CALL_ID_VAL)
	D_END_OCTET (_3)
D_END   (END_SPDU)

START	(TR6_CALL_ID_SPDU)
	ANY_VAL     (0,8,   &i_call_id[0].val)
	END_OCTET   ()
END     (0)


/*------------ Channel idendification (CHAN_ID) */

D_START	(TR6_CHAN_ID_SPDU)
	D_VAL   (INT_ID)
	D_TABL  (INT_TYPE)
	D_PAD   (NS_PAD_3)
	D_TABL  (PREF_EXCL)
	D_VAL   (D_CHAN_)
	D_TABX  (SEL)
	D_FUNCTION (CHECK_SEL)
	D_EXT_1 (_3)
D_END   (END_SPDU)

START	(TR6_CHAN_ID_SPDU)
	VAL     (6,1,INT_ID_IMPLICIT,		&i_chan_id[0].int_id)
	TABL    (5,1,TR6_T_INT_TYPE,        &i_chan_id[0].int_type)
	PAD     (4,1)
	TABL    (3,1,TR6_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	VAL     (2,1,NOT_D_CHAN,        	&i_chan_id[0].d_chan)
	TABX    (0,2,TR6_TX_CHAN_SEL,       &i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	FUNCTION(tr6_check_sel_spdu)
	EXT_1   ()
END (tr6_chan_id_spdu_fct)

	/*-----*/

	/* PRI-type chan_id */

D_START	(TR6_CHAN_ID_PRI_P)
	D_VAL       (CODING)
	D_VAL       (NB_MAP)
	D_VAL       (TYPE)
	D_EXT_1     (_4)
	D_TABL      (NBER)
	D_END_OCTET (_5)
D_END   (CHAN_ID_PRI_E)

START	(TR6_CHAN_ID_PRI_P)
	VAL         (5,2,CODING_STD_NATIONAL,   &i_chan_id[0].coding_std)
	VAL         (4,1,CHAN_NUMBER,   		&i_chan_id[0].nb_map)
	VAL         (0,4,B_CHAN,        		&i_chan_id[0].chan_type)
	EXT_1       ()
	TABL        (0,8,TR6_T_CHAN_NUMBER, 	&i_chan_id[0].chan_nb)
	END_OCTET   ()
END	(0)

/*------------ Network-specific facilities (SPF_FAC) */

#if NS_SPF_FACILITY == ON

D_START	(TR6_SPF_FAC_SPDU)
	D_VAL       (NETWORK_ID_LGTH)
	D_END_OCTET (_3)
	D_TABL      (FAC_CODE)
	D_END_OCTET (_4)
	D_TABL      (SERVICE)
	D_END_OCTET (_5)
D_END     (SWITCH_CODE)

START	(TR6_SPF_FAC_SPDU)
	VAL     (0,8,0,					&i_spf_fac[0].net_id_lgth)
	END_OCTET()
	TABL    (0,8,TR6_T_SPF_FAC_CODE,	&i_spf_fac[0].Code)
	END_OCTET()
	TABL    (0,8,TR6_T_SERVICE_IND,		&i_spf_fac[0].Service)
	END_OCTET()
END (tr6_spf_fac_spdu_fct)

/*---*/

	/*
	   The following meta-programs describe the 'Additional Information' field
	   decoding, according to the 'Service' field.
	*/

/*---*/

	D_START	(TR6_SPF_FAC_ADD_NIL_SPDU)
		D_VAL       (ADD_INFO_)
		D_END_OCTET (_6)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_ADD_NIL_SPDU)
		VAL      (0,8,ADD_INFO_NULL,&i_spf_fac[0].add_info)
		END_OCTET()
	END (0)

		/*---*/

	D_START	(TR6_SPF_FAC_ADD_DF_SPDU)
		D_TABX	(ADD_INFO)
		D_END_OCTET (_6)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_ADD_DF_SPDU)
		TABX    (0,8,TR6_TX_ADD_INFO,   &i_spf_fac[0].Service, &i_spf_fac[0].add_info)
		END_OCTET()
	END (0)

		/*---*/

	D_START	(TR6_SPF_FAC_64K_SYN_SPDU)
		D_VAL	(_SYN)
		D_TABL	(_PROT_1)
		D_TABL	(_USER_RATE_SYN)
		D_END_OCTET(_6)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_64K_SYN_SPDU)
		VAL		(6,2,ADD_SYN,					&i_spf_fac[0].syn_asyn)
		TABL	(4,2,TR6_T_ADD_INFO_PROTOCOL_ID_1,	&i_spf_fac[0].protocol_id_1)
		TABL	(0,4,TR6_T_ADD_INFO_USER_RATE_SYN,	&i_spf_fac[0].user_rate)
		END_OCTET()
	END (0)

		/*---*/

	D_START	(TR6_SPF_FAC_64K_ASYN_SPDU)
		D_VAL	(_ASYN)
		D_TABL	(_DATA_BIT)
		D_TABL	(_STOP_BIT)
		D_TABL	(_PARITY)
		D_TABL	(_USER_RATE_ASYN)
		D_END_OCTET(_6)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_64K_ASYN_SPDU)
		VAL		(6,2,ADD_ASYN,					&i_spf_fac[0].syn_asyn)
		TABL	(5,1,TR6_T_ADD_INFO_DATA_BIT,		&i_spf_fac[0].data_bit)
		TABL	(4,1,TR6_T_ADD_INFO_STOP_BIT,		&i_spf_fac[0].stop_bit)
		TABL	(3,1,TR6_T_ADD_INFO_PARITY,			&i_spf_fac[0].parity)
		TABL	(0,3,TR6_T_ADD_INFO_USER_RATE_ASYN,	&i_spf_fac[0].user_rate)
		END_OCTET()
	END (0)

/*---*/

	/*
	   The following meta-programs describe the 'Parafeld' fields according
	   to the 'Facility code' field.
	*/

/*---*/

	D_START	(TR6_SPF_FAC_CONGESTION_SPDU)
		D_TEXT      (CONGEST_TYPES)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_CONGESTION_SPDU)
		TEXT    (TABLE,TR6_T_CONGESTION_TYPE, &i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
	END     (0)

/*---*/

	D_START	(TR6_SPF_FAC_REDIR_NB_SPDU)
		D_TABL  (TYPE)
		D_TABL  (PLAN_ID)
		D_EXT_1 (_7)
		D_TEXT  (DIGIT_)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_REDIR_NB_SPDU)
		TABL    (4,3,TR6_T_CONN_NB_TYPE,    &i_spf_fac[0].Fac_type)
		TABL    (0,4,TR6_T_CONN_NB_PLAN,    &i_spf_fac[0].Fac_plan_id)
		EXT_1   ()
		TEXT    (IA5,DIGIT, &i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
	END     (0)

/*---*/

	D_START	(TR6_SPF_FAC_B_CHANNEL_SPDU)
		D_IF_VAL    (BASIC_INTERFACE)
			D_TABL  (BRI_B_CHANNEL)
		D_ELSE      (PRIMARY_INTERFACE)
			D_TABL  (PRI_B_CHANNEL)
		D_END_IF    (INTERFACE)
		D_END_OCTET (_7)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_B_CHANNEL_SPDU)

			/*
				The 'tr6_spf_fac_spdu_fct' function sets 'ie_if_flag' to ON if the interface
				type is Basic-Rate-Interface, and to OFF otherwise.
			*/

		IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
			TABL    (0,8,TR6_T_SPF_FAC_B_CHAN,  &i_spf_fac[0].Fac_b_chan)
		ELSE    ()
			TABL    (0,8,TR6_T_CHAN_NUMBER, 	&i_spf_fac[0].Fac_b_chan)
		END_IF  ()
		END_OCTET()
	END     (0)

/*---*/

	D_START	(TR6_SPF_FAC_CUG_INDEX_SPDU)
		D_TABL      (CUG_INDEX_1)
		D_END_OCTET (CUG_1)
		D_TABL      (CUG_INDEX_0)
		D_END_OCTET (CUG_0)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_CUG_INDEX_SPDU)
		TABL    (0,8,TR6_T_DIGIT, &i_spf_fac[0].Fac_cug_index_1)
		END_OCTET()
		TABL    (0,8,TR6_T_DIGIT, &i_spf_fac[0].Fac_cug_index_0)
		END_OCTET()
	END     (0)

/*---*/

	D_START	(TR6_SPF_FAC_SHIFT_SPDU)
		D_TABL      (EAZ_1)
		D_END_OCTET (EAZ_1_)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_SHIFT_SPDU)
		TABL    		(0,8,TR6_T_DIGIT,		&i_spf_fac[0].Fac_eaz_1)
		END_OCTET()
	END     			(0)

/*---*/

	D_START	(TR6_SPF_FAC_BILATERAL_SHIFT_SPDU)
		D_TABL      (EAZ_1)
		D_END_OCTET (EAZ_1_)
		D_TABL      (EAZ_2)
		D_END_OCTET (EAZ_2_)
	D_END   (END_SPDU)

	START	(TR6_SPF_FAC_BILATERAL_SHIFT_SPDU)
		TABL			(0,8,TR6_T_DIGIT,		&i_spf_fac[0].Fac_eaz_1)
		END_OCTET()
		TABL			(0,8,TR6_T_DIGIT,		&i_spf_fac[0].Fac_eaz_2)
		END_OCTET()
	END     (0)

#endif

/*------------ Display (DISPLAY) */

D_START	(TR6_DISPLAY_SPDU)
	D_TEXT  (INFO_)
D_END   (END_SPDU)

START	(TR6_DISPLAY_SPDU)
	TEXT(IA5,ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END     (0)


/*------------ Keypad (KEYPAD) */

D_START	(TR6_KEYPAD_SPDU)
	D_TEXT  (VAL_)
D_END   (END_SPDU)

START	(TR6_KEYPAD_SPDU)
/* $ ANY_CHAR ou DIGIT_E ? */
	TEXT    (IA5,ANY_CHAR, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END (0)


/*------------ Calling party number (CALLING_NB) */

D_START	(TR6_CALLING_NB_SPDU)
		D_TABL      (TYPE)
		D_TABL      (PLAN_ID)
		D_EXT_1     (_3)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)
		D_TEXT      (DIGIT_)
D_END   (END_SPDU)

START	(TR6_CALLING_NB_SPDU)
		TABL    (4,3,TR6_T_CONN_NB_TYPE,    &i_calling_nb[0].nb_type)
		TABL    (0,4,TR6_T_CONN_NB_PLAN,    &i_calling_nb[0].plan_id)
		EXT_1   ()
		OPTIONAL_OCTET ()
		TEXT    (IA5,DIGIT, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END     (0)


/*------------ Called party number (CALLED_NB) */

D_START	(TR6_CALLED_NB_SPDU)
		D_TABL  (TYPE)
		D_TABL  (PLAN_ID)
		D_EXT_1 (_3)
		D_TEXT  (DIGIT_)
D_END   (END_SPDU)

START	(TR6_CALLED_NB_SPDU)
		TABL    (4,3,TR6_T_CONN_NB_TYPE,    &i_called_nb[0].nb_type)
		TABL    (0,4,TR6_T_CONN_NB_PLAN,    &i_called_nb[0].plan_id)
		EXT_1   ()
		TEXT    (IA5,DIGIT, &i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
END     (0)


/*------------ User to user information (UUI) */

D_START	(TR6_UUI_SPDU)
	D_TEXT  (INFO_)
D_END   (END_SPDU)

START	(TR6_UUI_SPDU)
	TEXT    (BINARY, ANY_OCTET, &i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
END     (0)



/* ------  CODESET 6  INFORMATION ELEMENTS  ------ */


/*------------ Service indicator (SERVICE_IND) */

D_START	(TR6_SERVICE_IND_SPDU)
	D_TABL      (SERVICE)
	D_END_OCTET (_3)
D_END   (END_SPDU)

START	(TR6_SERVICE_IND_SPDU)
	TABL    (0,8,TR6_T_SERVICE_IND, &i_service_ind[0].service)
	END_OCTET()
END (tr6_service_ind_add_info_spdu)

/*---*/

	D_START	(TR6_SERVICE_IND_ADD_INFO_DF_SPDU)
		D_TABX	(ADD_INFO)
		D_END_OCTET (_4)
	D_END   (END_SPDU)

	START	(TR6_SERVICE_IND_ADD_INFO_DF_SPDU)
		TABX    (0,8,TR6_TX_ADD_INFO,   &i_service_ind[0].service, &i_service_ind[0].add_info)
		END_OCTET()
	END (0)

/*---*/

	D_START	(TR6_ADD_INFO_64K_SYN_SPDU)
		D_VAL	(_SYN)
		D_TABL	(_PROT_1)
		D_TABL	(_USER_RATE_SYN)
		D_END_OCTET(_4)
	D_END   (END_SPDU)

	START	(TR6_ADD_INFO_64K_SYN_SPDU)
		VAL		(6,2,ADD_SYN,					&i_service_ind[0].syn_asyn)
		TABL	(4,2,TR6_T_ADD_INFO_PROTOCOL_ID_1,	&i_service_ind[0].protocol_id_1)
		TABL	(0,4,TR6_T_ADD_INFO_USER_RATE_SYN,	&i_service_ind[0].user_rate)
		END_OCTET()
	END (0)

/*---*/

	D_START	(TR6_ADD_INFO_64K_ASYN_SPDU)
		D_VAL	(_ASYN)
		D_TABL	(_DATA_BIT)
		D_TABL	(_STOP_BIT)
		D_TABL	(_PARITY)
		D_TABL	(_USER_RATE_ASYN)
		D_END_OCTET(_4)
	D_END   (END_SPDU)

	START	(TR6_ADD_INFO_64K_ASYN_SPDU)
		VAL		(6,2,ADD_ASYN,					&i_service_ind[0].syn_asyn)
		TABL	(5,1,TR6_T_ADD_INFO_DATA_BIT,		&i_service_ind[0].data_bit)
		TABL	(4,1,TR6_T_ADD_INFO_STOP_BIT,		&i_service_ind[0].stop_bit)
		TABL	(3,1,TR6_T_ADD_INFO_PARITY,			&i_service_ind[0].parity)
		TABL	(0,3,TR6_T_ADD_INFO_USER_RATE_ASYN,	&i_service_ind[0].user_rate)
		END_OCTET()
	END (0)

/*------------ Charging information (CHARGING_INFO) */

D_START	(TR6_CHARGING_INFO_SPDU)
	D_VAL       (TAX_INFO_TYPE)
	D_END_OCTET (_3)
D_END   (END_SPDU)

START	(TR6_CHARGING_INFO_SPDU)
	VAL     (0,8,UNITS_TAX,     &i_charging_info[0].type)
	END_OCTET()
END (tr6_charging_info_spdu_fct)


/*------------ Date (DATE) */


D_START	(TR6_DATE_SPDU)
	D_TEXT  (DATE_INFO)
D_END   (END_SPDU)

START	(TR6_DATE_SPDU)
	TEXT    (IA5,ANY_CHAR,  &i_date[0].lgth,    (uchar **)&i_date[0].p_info)
END (tr6_date_spdu_fct)


/*------------ Facility select (FAC_SELECT) */

D_START	(TR6_FAC_SELECT_SPDU)
	D_TABL      (FAC_CODE)
	D_END_OCTET (_3)
	D_TABL      (SERVICE)
	D_END_OCTET (_4)
D_END   (END_SPDU)

START	(TR6_FAC_SELECT_SPDU)
	TABL    (0,8,TR6_T_SPF_FAC_CODE,    &i_fac_select[0].code)
	END_OCTET()
	TABL    (0,8,TR6_T_SERVICE_IND,     &i_fac_select[0].service)
	END_OCTET()
END (0)


/*------------ Status of facilities (FAC_STAT) */

D_START	(TR6_FAC_STAT_SPDU)
	D_TEXT  (FAC_STAT_INFO)
D_END   (END_SPDU)

/*$ length maybe 0 */

START	(TR6_FAC_STAT_SPDU)
	TEXT    (TABLE,TR6_T_FAC_STAT_INFO, &i_fac_stat[0].lgth,    (uchar **)&i_fac_stat[0].p_info)
END (0)


/*------------ Called status (CALLED_STATUS) */

D_START	(TR6_CALLED_STATUS_SPDU)
	D_TABL      (STATUS_)
	D_END_OCTET (_3)
D_END   (END_SPDU)

START	(TR6_CALLED_STATUS_SPDU)
	TABL    (0,8,TR6_T_CALLED_STATUS,   &i_call_state[0].val)
	END_OCTET()
END (0)


/*------------ Additional transmission attributes (ADD_ATTRIB) */

/*$ may be repeated */

D_START	(TR6_ADD_ATTRIB_SPDU)
	D_TABL  (FLAG)
	D_TABL  (ATTRIB)
	D_END_OCTET (_3)
D_END   (END_SPDU)

START	(TR6_ADD_ATTRIB_SPDU)
	TABL    (7,1,TR6_T_RQ_IN_FLAG,  &i_add_attrib[0].rq_in_flag)
	TABL    (0,7,TR6_T_ADD_ATTRIB,  &i_add_attrib[0].attrib)
	END_OCTET()
END (0)

/*EOF*/
