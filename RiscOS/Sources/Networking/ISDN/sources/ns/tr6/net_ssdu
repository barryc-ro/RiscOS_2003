
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_ssdu.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.tr6 */

#include "tr6.mp_ssdu"

/*-------------------------------------------------------------------------*/

/*

SSDU description structure :
--------------------------


		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |                 ssdu_ie
	|----|------|---------|   ======================================
	|    |   X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |   X------> START
	|----|------|---------|   |---------|----|-----|------|--------|     XXXX
	|    |      |         |   |         |    |     |      |        |     YYYY
	|----|------|---------|   |---------|----|-----|------|--------|   END
	|    |      |         |   |         |    |     |      |        |
	|----|------|---------|   |---------|----|-----|------|--------|
	|    |      |         |   |         |    |     |      |        |

*/

	/* NS primitive interface program */

/*-------- NS_CONN_RQ */

#define NET_CONN_RQ_TR6			CONN_IN_TR6
#define CONN_RQ_TR6				CONN_IN_TR6

/*-------- NS_CONN_IN */

#define NET_CONN_IN_TR6				CONN_RQ_TR6

/*-------- NS_CONN_RS */

#define NET_CONN_RS_TR6				CONN_CO_TR6
#define CONN_RS_TR6					CONN_CO_TR6

/*-------- NS_CONN_CO */

#define NET_CONN_CO_TR6				CONN_RS_TR6

/*-------- NS_CLEAR_RQ */

#define NET_CLEAR_RQ_TR6			CLEAR_IN_TR6
#define CLEAR_RQ_TR6				CLEAR_IN_TR6

/*-------- NS_CLEAR_IN */

#define NET_CLEAR_IN_TR6			CLEAR_RQ_TR6

/*-------- NS_CLEAR_RS */

#define NET_CLEAR_RS_TR6			CLEAR_CO_TR6
#define CLEAR_RS_TR6				CLEAR_CO_TR6

/*-------- NS_CLEAR_CO */

#define NET_CLEAR_CO_TR6			CLEAR_RS_TR6

/*-------- NS_SETUP_ACK_RQ */

#define NET_SETUP_ACK_RQ_TR6		SETUP_ACK_IN_TR6
#define SETUP_ACK_RQ_TR6			SETUP_ACK_IN_TR6

/*-------- NS_SETUP_ACK_IN */

#define NET_SETUP_ACK_IN_TR6		SETUP_ACK_RQ_TR6

/*-------- NS_CALL_PROC_RQ */

#define NET_CALL_PROC_RQ_TR6		CALL_PROC_IN_TR6
#define CALL_PROC_RQ_TR6			CALL_PROC_IN_TR6

/*-------- NS_CALL_PROC_IN */

#define NET_CALL_PROC_IN_TR6		CALL_PROC_RQ_TR6

/*-------- NS_ALERT_RQ */

#define NET_ALERT_RQ_TR6			ALERT_IN_TR6
#define ALERT_RQ_TR6				ALERT_IN_TR6

/*-------- NS_ALERT_IN */

#define NET_ALERT_IN_TR6			ALERT_RQ_TR6

/*-------- NS_INFO_RQ */

#define NET_INFO_RQ_TR6				INFO_IN_TR6
#define INFO_RQ_TR6					INFO_IN_TR6

/*-------- NS_INFO_IN */

#define NET_INFO_IN_TR6				INFO_RQ_TR6

/*-------- NS_USER_INFO_RQ */

#define NET_USER_INFO_RQ_TR6		USER_INFO_IN_TR6
#define USER_INFO_RQ_TR6			USER_INFO_IN_TR6

/*-------- NS_USER_INFO_IN */

#define NET_USER_INFO_IN_TR6		USER_INFO_RQ_TR6

/*-------- NS_SUSPEND_RQ */

#define NET_SUSPEND_RQ_TR6			SUSPEND_CO_TR6
#define SUSPEND_RQ_TR6				SUSPEND_CO_TR6

/*-------- NS_SUSPEND_IN */

#define NET_SUSPEND_IN_TR6			SUSPEND_RQ_TR6

/*-------- NS_SUSPEND_RS */

#define NET_SUSPEND_RS_TR6			SUSPEND_CO_TR6

/*-------- NS_RESUME_RQ */

#define NET_RESUME_RQ_TR6			RESUME_RQ_TR6
#define RESUME_RQ_TR6				RESUME_CO_TR6


/*-------- NS_RESUME_IN */

#define NET_RESUME_IN_TR6			RESUME_RQ_TR6

/*-------- NS_RESUME_RS */

#define NET_RESUME_RS_TR6			RESUME_CO_TR6

#if NS_SPF_FACILITY == ON

/*-------- NS_SPF_FACILITY_IN */

#define NET_SPF_FACILITY_RQ_TR6		SPF_FACILITY_IN_TR6

#define	NET_SPF_FACILITY_IN_TR6		SPF_FACILITY_RQ_TR6

/*-------- NS_SPF_FACILITY_RS (ACK & REJ) */

#define	NET_SPF_FACILITY_RS_TR6		SPF_FACILITY_CO_TR6
#define	SPF_FACILITY_RS_TR6			SPF_FACILITY_CO_TR6

/*-------- NS_SPF_FACILITY_CO (ACK & REJ) */

#define	NET_SPF_FACILITY_CO_TR6		SPF_FACILITY_RS_TR6

#endif

/*-------- NS_DETACH_IN */

#define NET_DETACH_IN_TR6			DETACH_RQ_TR6

/*-------- NS_CON_CON_RQ */

#define NET_CON_CON_RQ_TR6			CON_CON_IN_TR6

/*-------- NS_STATUS_ENQ_RQ */
/*-------- POINT_TO_POINT_ONLY */

#define NET_STATUS_ENQ_IN_TR6			STATUS_ENQ_RQ_TR6

/*=========================================================================*/

#define Ns_tr6_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_tr6_end_table_or_function		};

#define Ns_tr6_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_tr6_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_tr6		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_tr6_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_tr6_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "tr6.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define TR6_MX_SSDU (Rnd_sizeof(TR6_TAB_SSDU) / SSDU_ELEM_SIZE) /* number of elements in the table */

CONST uchar	tr6_mx_size_ssdu = TR6_MX_SSDU;

/*===========================================================================

							SPECIFIC FUNCTIONS
							------------------

	FROM CALL PROC APPLI current context : p_ssdu_val points on the SSDU current
	------------------------------------   indirect primitive value area.

								p_ind_buffer points on the next free
								location in the ind_buffer (used in pool
								to store text).

								p_data_ref points the top of the SSDU area.

	TO CALL PROC current context :
	-----------------------------

===========================================================================*/

			/* local function prototype */

#if NS_SPF_FACILITY == ON
	uchar	tr6_spf_fac_add_info_ssdu	(Void_parm);
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name      tr6_spf_fac_ssdu - implements the processing of a facility IE
							in a NS_XXXX_RQ/RS and NS_YYYY_IN/CO primitives.

Usage			uchar tr6_spf_fac_ssdu ();

Return value	return	= OK
						= NOK

common constants and declarations : ns.h, isdn.h

common objects : direction

*--------------------------------------------------------------------------*/

uchar tr6_spf_fac_ssdu ()
{

#if NS_SPF_FACILITY == OFF
	return  (NOK);
#else

	if (direction == TO_CALL_CONTROL) {

		switch (I_spf_fac_code) {

			case TR6_SPF_FAC_CONGESTION :
				if (s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL) != OK) return (NOK);
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_CONGESTION));

			case TR6_SPF_FAC_ANRUF_1 :
			case TR6_SPF_FAC_ANRUF_2 :
				if (s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL) != OK) return (NOK);
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_REDIR_NB));

			case TR6_SPF_FAC_B_CHANNEL :

				if (s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL) != OK) return (NOK);

					/*
						The interface type must be tested at this point
						because it can't be directly tested inside the
						meta program.
					*/

				ie_if_flag = Na_type == BRI ? ON : OFF;
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_B_CHANNEL));

			case TR6_SPF_FAC_CUG :
				if (s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL) != OK) return (NOK);
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_CUG_INDEX));

			case TR6_SPF_FAC_SHIFT :
				if (tr6_spf_fac_add_info_ssdu() != OK) return (NOK);
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_SHIFT));

			case TR6_SPF_FAC_BILATERAL_SHIFT :
				if (tr6_spf_fac_add_info_ssdu() != OK) return (NOK);
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_BILATERAL_SHIFT));

			default :
				return (s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL));
		}

	} else {

		switch (I_spf_fac_code) {

			case TR6_SPF_FAC_CONGESTION :
				if (r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL) != OK) return (NOK);
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_CONGESTION));

			case TR6_SPF_FAC_ANRUF_1 :
			case TR6_SPF_FAC_ANRUF_2 :
				if (r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL) != OK) return (NOK);
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_REDIR_NB));

			case TR6_SPF_FAC_B_CHANNEL :

				if (r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL) != OK) return (NOK);

					/*
						The interface type must be tested at this point because
						it can't be directly tested inside the meta program.
					*/

				ie_if_flag = Na_type == BRI ? ON : OFF;
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_B_CHANNEL));

			case TR6_SPF_FAC_CUG :
				if (r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL) != OK) return (NOK);
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_CUG_INDEX));

			case TR6_SPF_FAC_SHIFT :
				if (tr6_spf_fac_add_info_ssdu() != OK) return (NOK);
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_SHIFT));

			case TR6_SPF_FAC_BILATERAL_SHIFT :
				if (tr6_spf_fac_add_info_ssdu() != OK) return (NOK);
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_BILATERAL_SHIFT));

			default :
				return (r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_NIL));
		}

	}

#endif

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		tr6_spf_fac_add_info_ssdu -

Usage		uchar tr6_spf_fac_add_info_ssdu.

common constants and declarations : ns.h, isdn.h

*--------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

uchar tr6_spf_fac_add_info_ssdu ()
{

	if (direction == TO_CALL_CONTROL) {

		switch (I_spf_fac_syn_asyn) {

			case BYTE_VAL_NIL :
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_DF));

			case ADD_SYN :
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_64_SYN));

			case ADD_ASYN :
				return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_64_ASYN));

#		  if ASSERT == ON
			default :
				Trap (TRAP_SSDU, "tr6_spf_fac_add_info_ssdu");

#		  endif

		}

	} else {

		switch (*(p_ssdu_val+1)) {

			case BYTE_VAL_NIL :
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_ADD_DF));

			case ADD_SYN :
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_64_SYN));

			case ADD_ASYN :
				return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SPF_FAC_64_ASYN));

			default :
				 if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
					 return (NOK);
				 }

		}
	}

	return (NOK);
}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		tr6_service_ind_add_info_ssdu -

Usage		uchar tr6_service_ind_add_info_ssdu.

common constants and declarations : ns.h, isdn.h

*--------------------------------------------------------------------------*/


uchar tr6_service_ind_add_info_ssdu ()
{

	if (I_service_ind_service == SERVICE_IND_DATA_TRANSFER) {

		if (direction == TO_CALL_CONTROL) {

			switch (I_service_ind_syn_asyn) {

				case BYTE_VAL_NIL :
					return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SERVICE_IND_ADD_DF));

				case ADD_SYN :
					return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_ADD_64_SYN));

				case ADD_ASYN :
					return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_ADD_64_ASYN));

#			  if ASSERT == ON
				default :
					Trap (TRAP_SSDU, "tr6_service_ind_add_info_ssdu");

#			  endif

			}

		} else {

			switch (*(p_ssdu_val+1)) {

				case BYTE_VAL_NIL :
					return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SERVICE_IND_ADD_DF));

				case ADD_SYN :
					return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_ADD_64_SYN));

				case ADD_ASYN :
					return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_ADD_64_ASYN));

				default :
					 if (error_set (ERR_U_PARAM_VAL, ie_id, Relative_add) == FATAL) {
						 return (NOK);
					 }

			}

		}

	} else {

		if (direction == TO_CALL_CONTROL) {
			return(s_exec_ssdu_ie ((uchar *)&TR6_SSDU_SERVICE_IND_ADD_DF));

		} else {

			return(r_exec_ssdu_ie ((uchar *)&TR6_SSDU_SERVICE_IND_ADD_DF));
		}
	}

	return (NOK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		tr6_charging_info_ssdu	- implements the processing of a charging
			info IE in a NS_XXXX_RQ/RS and NS_YYYY_IN/CO primitives.

Usage		uchar tr6_charging_info_ssdu();

Return value	return	= OK
						= NOK

common constants and declarations : ns.h, isdn.h

common objects : direction

*--------------------------------------------------------------------------*/


uchar tr6_charging_info_ssdu ()
{

		/* The direction is TO_CALL_CONTROL only */

	*(long *)p_ssdu_val	 = I_(charging_info,value);
	p_ssdu_val 			+= Rnd_sizeof (long);

	return (OK);
}

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_tr6_table_or_function
#undef Ns_tr6_end_table_or_function
#undef Ns_tr6_tab_ssdu_ie_entry
#undef Ns_tr6_tab_ssdu_ie_mx_entry
#undef Ns_tr6_tab_ssdu_entry

#define Ns_tr6_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_tr6_end_table_or_function		}

#define Ns_tr6_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_tr6_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tr6_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_tr6
#	define Message_header_ssdu_ie_tr6		Ns_tr6_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_tr6_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_tr6_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_tr6_ssdu ()
{
    uchar   i_pic;

#	include "tr6.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/
