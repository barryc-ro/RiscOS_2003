
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_state.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) : state driven automata for Deutsche Telekom 1TR6.
 *
 *        tr6_u0 to tr6_u25 - user side - implements the processing of an event
 *                     according to the state of the call (tr6_u0 to tr6_u25).
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

						/*----------------*/
						/*                */
						/*   USER SIDE    */
						/*       U        */
						/*----------------*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             tr6_u0 to tr6_u25 - user side - implements the processing of an
							  event according to the call state.

Usage            void tr6_uxx (void);

Related
functions usage void Stop_timer (uchar x_timer);

				void Start_timer_ns (uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL_0 */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void tr6_u0 ()
{

	switch (event_id) {

		case DA_SUSP_ACK :
		case DA_RES_REJ :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case DA_SETUP:
			Send_to_call_control (NS_CONN_IN);
			Start_timer_ns (TR6_T300);
			Set_state (STATE_CALL_PRESENT_6);
			break;

		case NS_CONN_RQ :
			Send_to_d_channel (SETUP);
			Start_timer_ns (TR6_T303);
			Set_state (STATE_CALL_INIT_1);
			break;

		case NS_RESUME_RQ :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				Send_to_d_channel (RES);
				Start_timer_ns (TR6_T318);
				Set_state (STATE_RESUME_REQUEST_17);
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		default :

			if (i_entity_origination == ENT_DL_D) {
				Reset_internal_ie ();
				Send_to_d_channel_and_save_spdu (REL);
				N308 = 0;
				Start_timer_ns (TR6_T308);
				Set_state (STATE_RELEASE_REQUEST_19);
				return;
			}

			ns_unexpected_ev ();
			break;
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of  user
			   action requesting call establishment from the network.
			*/

void tr6_u1 ()
{

	switch (event_id) {

		case DA_SUSP_ACK :
		case DA_RES_REJ :
		case DA_REG_ACK :
		case DA_REG_REJ :
		case DA_CANC_ACK :
		case DA_CANC_REJ :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				return;

			} else {

				break;
			}

		case DA_SETUP_ACK :

			Stop_timer_ns (TR6_T303);
			Send_to_call_control (NS_SETUP_ACK_IN);
			Start_timer_ns (TR6_T304);
			Set_state (STATE_OVERLAP_SENDING_2);
			return;

		case DA_CALL_PROC :
			Stop_timer_ns (TR6_T303);
			Send_to_call_control (NS_CALL_PROC_IN);
			Start_timer_ns (TR6_T310);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			return;

		case TI_303 :
			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Save_cause ();		/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (TR6_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			return;
	}

}

/*------------------------------------------------------------------------*/

		/* STATE_OVERLAP_SENDING_2 */

		/* Overlap sending state */

			/*
			   This state exists for an outgoing call when the user has
			   received acknowledgement of the call establishment request
			   which permits the user to send additional call information
			   to the network in overlap mode.
			*/


void tr6_u2 ()
{

	switch (event_id) {

		case DA_SUSP_ACK :
		case DA_RES_REJ :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				return;

			} else {

				break;
			}

		case DA_CALL_PROC :
			Send_to_call_control (NS_CALL_PROC_IN);
			Stop_timer_ns (TR6_T304);
			Start_timer_ns (TR6_T310);
			Set_state (STATE_OUTGOING_CALL_PROC_3);
			return;

		case DA_ALERT :
			Send_to_call_control (NS_ALERT_IN);
			Stop_timer_ns (TR6_T304);
			Set_state (STATE_CALL_DELIVERED_4);
			return;

		case DA_CONN :
			Send_to_call_control (NS_CONN_CO);
			Stop_timer_ns (TR6_T304);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			return;

		case TI_304 :
			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			Save_cause ();		/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (TR6_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :

			if (i_entity_origination != ENT_DL_D) {
				ns_unexpected_ev ();
			}
	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PROC */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void tr6_u3 ()
{
	switch (event_id) {

		case DA_SUSP_ACK :
		case DA_RES_REJ :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case DA_ALERT :
			Send_to_call_control (NS_ALERT_IN);
			Stop_timer_ns (TR6_T310);
			Set_state (STATE_CALL_DELIVERED_4);
			break;

		case DA_CONN :
			Send_to_call_control (NS_CONN_CO);
			Stop_timer_ns (TR6_T310);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;


		case TI_310 :
			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Save_cause ();		/* to send the RELEASE if T305 expire */
			Send_to_call_control (NS_CLEAR_CO);
			Send_to_d_channel (DISC);
			Start_timer_ns (TR6_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED_4 */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void tr6_u4 ()
{
	switch (event_id) {


		case DA_SUSP_ACK :
		case DA_RES_REJ :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case DA_CONN :
			Send_to_call_control (NS_CONN_CO);
			Reset_internal_ie ();
			Send_to_d_channel (CONN_ACK);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_ALERT :
			Send_to_call_control (NS_ALERT_IN);
			break;

		case DA_FAC_ACK :
		case DA_FAC_REJ :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				Send_to_call_control (NS_SPF_FACILITY_CO);
				Stop_timer_ns (TR6_T3D2);
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}


		case NS_SPF_FACILITY_RQ :

			if (Na_connection == POINT_TO_MULTIPOINT) {

				if (Call_fac_rq == ON) {
					ns_unexpected_ev ();
					return;
				}

				Call_fac_rq = ON;
				Send_to_d_channel (TR6_FAC);
				Start_timer_ns (TR6_T3D2);
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case TI_3D2 :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}
}


/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void tr6_u6()
{
	switch (event_id) {

		case NS_SETUP_ACK_RQ :

			if (Na_connection == POINT_TO_POINT) {
				Send_to_d_channel (SETUP_ACK);
				Stop_timer_ns (TR6_T300);
				Start_timer_ns (TR6_T302);
				Set_state (STATE_OVERLAP_RECEIVING_25);
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case NS_CALL_PROC_RQ :

			if (Na_connection == POINT_TO_POINT) {
				Send_to_d_channel (CALL_PROC);
				Set_state (STATE_INCOMING_CALL_PROC_9);
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case NS_ALERT_RQ :
			Stop_timer_ns (TR6_T300);
			Send_to_d_channel (ALERT);

			if (Na_connection == POINT_TO_POINT) {
				Start_timer_ns (TR6_T3AA);
			}

			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (TR6_T300);
			Send_to_d_channel (CONN);
			Start_timer_ns (TR6_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case TI_300 :

#			if NS_TYPE_PRI == ON

				if (Na_type == PRI) {
					set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
					Send_to_d_channel (REL_COMP);
					Reset_internal_ie ();
				}

#			endif

			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			call_clear ();
			break;

		default :
			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED_7 */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void tr6_u7 ()
{
	switch (event_id) {

		case DA_SUSP_ACK :
		case DA_RES_REJ :
			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case NS_CONN_RS :
			Send_to_d_channel (CONN);

			if (Na_connection == POINT_TO_POINT) {
				Stop_timer_ns (TR6_T3AA);
			}

			Start_timer_ns (TR6_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case NS_SPF_FACILITY_RQ :		/* FAC case only */

			if (Call_fac_rq == ON ||
				 is_ie_i (CODESET_0, SPF_FAC) == ABSENT) { /* -> FAC case only */
				ns_unexpected_ev ();
				break;
			}

			Call_fac_rq = ON;
			Send_to_d_channel (TR6_FAC);
			Start_timer_ns (TR6_T3D2);
			break;

		case DA_FAC_ACK :
		case DA_FAC_REJ :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Send_to_call_control (NS_SPF_FACILITY_CO);
				Stop_timer_ns (TR6_T3D2);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_STATUS :
			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case TI_3D2 :
			break;

		case TI_3AA :

			if (Na_connection == POINT_TO_POINT) {

				if (State_timer_ns (TR6_T3D2) == ON) {
					Stop_timer_ns (TR6_T3D2);
				}

				set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				Save_cause ();		/* to send the RELEASE if T305 expire */
				Send_to_d_channel (DISC);
				Start_timer_ns (TR6_T305);
				Set_state (STATE_DISCONNECT_REQUEST_11);
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST_8 */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void tr6_u8 ()
{
	switch (event_id) {

		case NS_SPF_FACILITY_RQ : /* FAC case only */

			if (Call_fac_rq == ON ||
				 is_ie_i (CODESET_0, SPF_FAC) == ABSENT) { /* -> FAC case only */
				ns_unexpected_ev ();
				break;
			}

			Call_fac_rq = ON;
			Send_to_d_channel (TR6_FAC);
			Start_timer_ns (TR6_T3D2);
			break;

		case DA_CONN_ACK :
			Send_to_call_control (NS_CONN_CO);
			Stop_timer_ns (TR6_T313);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_STATUS :
			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case DA_FAC_ACK :
		case DA_FAC_REJ :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Send_to_call_control (NS_SPF_FACILITY_CO);
				Stop_timer_ns (TR6_T3D2);
			}

			break;

		case TI_313 :
				set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Save_cause ();		/*	 to send the RELEASE if T305 expires */

			if (State_timer_ns (TR6_T3D2) == ON) {
				Stop_timer_ns (TR6_T3D2);
			}

			Send_to_call_control (NS_CLEAR_CO);
			Save_cause ();		/* to send the RELEASE if T305 expire */
			Send_to_d_channel (DISC);
			Start_timer_ns (TR6_T305);
			Set_state (STATE_DISCONNECT_REQUEST_11);
			break;

		case TI_3D2 :
			break;

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_INCOMING_CALL_PROCEEDING */
		/* Incoming call proceeding state */
		/* POINT TO POINT ONLY */

			/*
			   This state exists for an point to point incoming call when the user has
			   sent acknowlegdement that the user has received all call
			   information necessary to effect call establishment.
			*/

void tr6_u9 ()
{
	switch (event_id) {

		case NS_ALERT_RQ :
			Send_to_d_channel (ALERT);
			Start_timer_ns (TR6_T3AA);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Send_to_d_channel (CONN);
			Start_timer_ns (TR6_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;		/* no process */
			}

			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE_10 */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void tr6_u10 ()
{
	switch (event_id) {

		case NS_SPF_FACILITY_RQ :
		case NS_SPF_FACILITY_RS :

			if (Call_fac_rq == ON) {

			/* no process */
				return;
			}

			Call_fac_rq = ON;

			if (is_ie_i (CODESET_0, SPF_FAC) == PRESENT) {
				Start_timer_ns (TR6_T3D2);
				Send_to_d_channel (TR6_FAC);
				return;
			}

			if (is_ie_i (CODESET_0, CAUSE) == PRESENT) {
				Send_to_d_channel (TR6_FAC_REJ);

			} else {

				Send_to_d_channel (TR6_FAC_ACK);
			}

			break;

		case NS_USER_INFO_RQ :
			Send_to_d_channel (USER_INFO);
			break;

		case NS_SUSPEND_RQ :

			if ((Na_connection == POINT_TO_MULTIPOINT) && (Call_fac_rq == OFF)) {
				Send_to_d_channel (SUSP);
				Start_timer_ns (TR6_T319);
				Set_state (STATE_SUSPEND_REQUEST_15);
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case NS_STATUS_ENQ_RQ :
			Send_to_d_channel (STATUS);
			break;

		case DA_RES_REJ :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case DA_FAC_ACK :
		case DA_FAC_REJ :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Send_to_call_control (NS_SPF_FACILITY_CO);
				Stop_timer_ns (TR6_T3D2);

			} else {

				ns_unexpected_ev ();
			}
			break;

		case DA_FAC :
			Send_to_call_control (NS_SPF_FACILITY_IN);
			break;

		case DA_STATUS :
			break;

		case DA_USER_INFO :
			Send_to_call_control (NS_USER_INFO_IN);
			break;

		case DA_CON_CON :
			Send_to_call_control (NS_CONGEST_CONTROL_IN);
			break;

		case DA_SUSP_ACK :

			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

		case TI_3D2 :
			break;

		default :

			if (i_entity_origination == ENT_DL_D) {

					/* no process */

				return;
			}

			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST_11 */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void tr6_u11 ()
{
	switch (event_id) {

		case NS_DETACH_RQ :
			if (Na_connection == POINT_TO_POINT) {
				Send_to_d_channel (DETACH);
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}

/*$*/
		case DA_FAC_ACK :
		case DA_FAC_REJ :
			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Send_to_call_control (NS_SPF_FACILITY_CO);

			} else {

				ns_unexpected_ev ();
			}
			break;


		case DA_SUSP_ACK :
			if (Na_connection == POINT_TO_MULTIPOINT) {
				break;

			} else {

				ns_unexpected_ev ();
				break;
			}


		case DA_STATUS :
			break;

		case TI_305 :
			Restore_cause ();		/* send saved cause of the previous DISC */
			set_ie_i (CODESET_0, CAUSE);
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (TR6_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		 default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION_12 */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void tr6_u12 ()
{
	switch (event_id) {

		case NS_DETACH_RQ :
			Send_to_d_channel (DETACH);
			break;

		case NS_SPF_FACILITY_RQ :	/* FAC case only */

			if (Call_fac_rq == ON ||
				is_ie_i (CODESET_0, SPF_FAC) == ABSENT) { /* -> FAC only */
				 ns_unexpected_ev ();
				 return;
			}

			Stop_timer_ns (TR6_T300);
			Send_to_d_channel (TR6_FAC);
			Start_timer_ns (TR6_T3D2);
			Call_fac_rq = ON;
			break;

		case DA_FAC_ACK :
		case DA_FAC_REJ :
			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Send_to_call_control (NS_SPF_FACILITY_CO);
				Stop_timer_ns (TR6_T3D2);

			} else {

				ns_unexpected_ev ();
			}
			break;

		case DA_STATUS :
			break;


		case NS_CLEAR_RS :
			ns_stop_all_timers ();
			Send_to_d_channel_and_save_spdu (REL);
			N308 = 0;
			Start_timer_ns (TR6_T308);
			Set_state (STATE_RELEASE_REQUEST_19);
			break;

		case TI_3D2 :
			break;

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}

}


/*-------------------------------------------------------------------------*/

		/* STATE_PASSIVE */

		/* Detach state, for further study */
		/* POINT_TO_MULTIPOINT only */

			/*
			   This state exists when the B-channel has been realesed but the
			   call has not been be clear.
			*/

void tr6_u14 ()
{
	if (Na_connection == POINT_TO_MULTIPOINT) {

		switch (event_id) {

			case NS_CONN_RQ :
/*$*/			Send_to_d_channel (CONN);
				Start_timer_ns (TR6_T313);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			case DA_FAC_ACK :
			case DA_FAC_REJ :

				if (Call_fac_rq == ON) {
					Call_fac_rq = OFF;
					Send_to_call_control (NS_SPF_FACILITY_CO);
					Stop_timer_ns (TR6_T3D2);

				} else {

					ns_unexpected_ev ();
				}
				break;

			case DA_CONN_ACK :
				Send_to_call_control (NS_CONN_CO);
				Stop_timer_ns (TR6_T3D2);
				Set_state (STATE_ACTIVE_10);
				break;

			default :

				if (i_entity_origination == ENT_DL_D) {
					return;							/* no process */
				}

				ns_unexpected_ev ();
		}

	} else {

		Trap (TRAP_UNKNOWN_CALL_STATE, "u14");
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE SUSPEND_REQUEST */
		/* Suspend request state */
		/* POINT_TO_MULTIPOINT only */

			/*
			   This state exists  after the user has requested the network
			   to suspend the call and is waiting for a response.
			*/

void tr6_u15 ()
{
	switch (event_id) {

		case DA_SUSP_ACK :
			Send_to_call_control (NS_SUSPEND_CO);
			call_clear ();
			break;

		case DA_SUSP_REJ :
			Send_to_call_control (NS_SUSPEND_CO);
			Stop_timer_ns (TR6_T319);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_STATUS :
			break;

		case TI_319 :
			Set_state (STATE_ACTIVE_10);
			break;

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RESUME_REQUEST_17 */
		/* Resume request state */
		/* POINT_TO_MULTIPOINT only */

			/*
			   This state exists  after the user has requested the network
			   to resume a previously suspend call and is waiting for a
			   response.
			*/

void tr6_u17 ()
{
	switch (event_id) {

		case DA_SUSP_ACK :
			break;

		case DA_RES_ACK :
			Send_to_call_control (NS_RESUME_CO);
			Stop_timer_ns (TR6_T318);
			Set_state (STATE_ACTIVE_10);
			break;

		case DA_RES_REJ :
			Send_to_call_control (NS_RESUME_CO);
			call_clear ();
			break;

		case TI_318 :
			call_clear ();
			break;

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST_19 */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void tr6_u19 ()
{
	switch (event_id) {

		case DA_FAC_ACK :
		case DA_FAC_REJ :

			if (Call_fac_rq == ON) {
				Call_fac_rq = OFF;
				Send_to_call_control (NS_SPF_FACILITY_CO);

			} else {

				ns_unexpected_ev ();
			}

			break;

		case DA_STATUS :
			break;

		case NS_CLEAR_RS :
			break;

		case TI_308 :

			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (TR6_T308);

			} else {

				Send_to_call_control (NS_CLEAR_CO);
				Send_to_dl (DL_REL_RQ, Dl_ces);
				Lc_state = LC_AWAITING_REL;

				/* DL timer OFF */

				Stop_dl_timer (T3DL);
				call_clear ();
			}

			break;

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_OVERLAP_RECEIVING_25 */
		/* Overlap receiving */
		/* POINT TO POINT only */

			/*
			   This state exits for an incoming call when the user
			   has acknowledged the call establishment request from
			   the network and is prepared to received additional call
			   information (if any) in overlap mode.
			*/

void tr6_u25 ()
{
	switch (event_id) {

		case NS_CALL_PROC_RQ :
			Stop_timer_ns (TR6_T302);
			Send_to_d_channel (CALL_PROC);
			Set_state (STATE_INCOMING_CALL_PROC_9);
			break;

		case NS_ALERT_RQ :
			Stop_timer_ns (TR6_T302);
			Send_to_d_channel (ALERT);
			Start_timer_ns (TR6_T3AA);
			Set_state (STATE_CALL_RECEIVED_7);
			break;

		case NS_CONN_RS :
			Stop_timer_ns (TR6_T302);
			Send_to_d_channel (CONN);
			Start_timer_ns (TR6_T313);
			Set_state (STATE_CONNECT_REQUEST_8);
			break;

		case DA_REG_ACK :
		case DA_REG_REJ :
		case DA_CANC_ACK :
		case DA_CANC_REJ :
			break;

		default :

			if (i_entity_origination == ENT_DL_D) {
				return;							/* no process */
			}

			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2

#define Tr6_send_to_all_ces(ev_id, ie_flag)			tr6_send_to_other_ces (ev_id, ie_flag); \
													tr6_send_to_ces (ev_id, ie_flag, Call_ces)	/* send to all terminals ev_id. Flag = OFF for specific cause */

#if NEW_FCT_STYLE == ON
	void	tr6_send_to_ces		 		(uchar ev_id, uchar ie_flag, uchar my_ces);
	void	tr6_send_to_other_ces 		(uchar ev_id, uchar ie_flag);
	uchar	tr6_nb_other_active_ces		(void);
	uchar	tr6_nb_active_ces			(void);
	void 	tr6_set_date_nil			(void);
#else
	void	tr6_send_to_ces		 		();
	void	tr6_send_to_other_ces 		();
	uchar	tr6_nb_other_active_ces		();
	uchar	tr6_nb_active_ces			();
	void 	tr6_set_date_nil			();
#endif


						/*-------------------*/
						/*                   */
						/*   NETWORK SIDE    */
						/*        N          */
						/*-------------------*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             n0 to n25 - network side - implements the processing of an
							  event according to the call state.

Usage            void nxx (void);

Related
functions usage void Stop_timer_ns (TR6_uchar x_timer);

				void Start_timer_ns (TR6_uchar x_timer);
						- x_timer : timer index.

				void Send_to_d_channel (uchar spdu_id);
						- spdu_id : spdu message type (ID).

				void Send_to_call_control (uchar ssdu_id);
						- ssdu_id : ssdu primitive code (ID).

				void Set_state (uchar call_state);
						- call_state : state of the call.

				void call_clear (void);

				void ns_unexpected_ev (void);

Return value    void

Common constants and declarations : ns.h

Common objects : call and na object, internal data structure.

*-------------------------------------------------------------------------*/

		/* STATE_NULL */

		/* Null state */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void tr6_n0 ()
{

	switch (event_id) {

		case DA_SETUP:
			Call_ref 		= i_call_ref;
			Call_ces 		= Dl_ces;
			Call_ces_setup 	= Dl_ces;
			Call_sub_state 	= N6;
			Dl_call_count++;
			ns_action_to_cc (TR6_T300, T3_NIL, NS_CONN_IN,
											   STATE_CALL_INIT_1);
			break;

		case DA_RES :
			ns_action_to_cc (T3_NIL, TR6_T300, NS_RESUME_CO,
											   STATE_RESUME_REQUEST_17);
			break;

		case NS_CONN_RQ :
			N303 = 0;
			Start_timer_ns (TR6_T303);

			if (Na_connection == POINT_TO_MULTIPOINT) {
				reset_multipoint_context ();
				Send_to_d_channel_and_save_spdu (SETUP);
				Call_setup_ack = 0;

			} else {

				Send_to_d_channel_and_save_spdu (SETUP);
			}

			if (Call_ces == DL_CES_NIL) {
				Call_ces_setup = DL_CES_BROADCAST;

			} else {

				Call_ces_setup = Dl_ces;
			}

			Call_ces_connect = NIL;

			Set_state (STATE_CALL_PRESENT_6);
			break;

		case INT_REL_COMP_IN :
				Call_alert (Dl_ces) = OFF;
			break;

		case NS_NOTIFY_RQ :
			/* no process */
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_INIT_1 */

		/* Call initialization state */

			/*
			   This state exists for an outgoing call, as a result of  user
			   action requesting call establishment from the network.
			*/

void tr6_n1 ()
{
	switch (event_id) {

		case NS_CALL_PROC_RQ :
			ns_action_to_dl (TR6_T300, T3_NIL, CALL_PROC,
											   STATE_OUTGOING_CALL_PROC_3);
			break;

		case NS_SETUP_ACK_RQ :
			ns_action_to_dl (TR6_T300, TR6_T302, SETUP_ACK,
												 STATE_OVERLAP_SENDING_2);
			break;

		case NS_CONN_RS :
			Dl_call_count++;
			ns_action_to_dl (TR6_T300, T3_NIL, CONN,
											   STATE_ACTIVE_10);
			break;

		case NS_ALERT_RQ:
			ns_action_to_dl (TR6_T300, T3_NIL, ALERT,
											   STATE_CALL_DELIVERED_4);
			break;


		case TI_300 :
			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Send_to_call_control (NS_CLEAR_CO);
			go_to_state_19 (TR6_T308);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OVERLAP_SENDING */

		/* Overlap sending state */

			/*
			   This state exists for an outgoing call when the user has
			   received acknowledgement of the call establishment request
			   which permits the user to send additional call information
			   to the network in overlap mode.
			*/


void tr6_n2 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Dl_call_count++;
			ns_action_to_dl (TR6_T302, T3_NIL, CONN,
											   STATE_ACTIVE_10);
			break;

		case NS_CALL_PROC_RQ :
			ns_action_to_dl (TR6_T302, T3_NIL, CALL_PROC,
											   STATE_OUTGOING_CALL_PROC_3);
			break;

		case NS_ALERT_RQ:
			ns_action_to_dl (TR6_T302, TR6_T3AA, ALERT,
											   STATE_CALL_DELIVERED_4);
			break;

		case TI_302 :
			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Save_cause ();									/* to send the RELEASE if T305 expire */
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, TR6_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_OUTGOING_CALL_PROC */

		/* Outgoing call proceeding state */

			/*
			   This state exists for an outgoing call when the user
			   has received acknowledgement that the network has received
			   all call information necessary to effect call establishment.
			*/

void tr6_n3 ()
{
	switch (event_id) {

		case NS_ALERT_RQ:
			ns_action_to_dl (T3_NIL, TR6_T3AA, ALERT,
											   STATE_CALL_DELIVERED_4);
			break;

		case NS_CONN_RS :
			Dl_call_count++;
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_DELIVERED */

		/* Call delivered state */

			/*
			   This state exists for an outgoing call when the calling user
			   has received an indication that the remote user alerting has
			   been initiated.
			*/

void tr6_n4 ()
{
	switch (event_id) {

		case NS_CONN_RS :
			Dl_call_count++;
			Stop_timer_ns (TR6_T3AA);
			Send_to_d_channel (CONN);
			Set_state (STATE_ACTIVE_10);
			break;

		case TI_3AA :
			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Save_cause ();									/* to send the RELEASE if T305 expire */
			Send_to_call_control (NS_CLEAR_IN);

			ns_action_to_dl (T3_NIL, TR6_T305, DISC,
											   STATE_DISCONNECT_INDICATION_12);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_PRESENT_6 */

		/* Call present state */

			/*
			   This state exists for an incoming call when the user
			   has received a call establishment request but not yet
			   responded.
			*/

void tr6_n6 ()
{

	if (Call_ces_setup == DL_CES_BROADCAST) {

		switch (event_id) {

			case INT_REL_COMP_IN :
				Call_alert (Dl_ces) = OFF;
				break;

			case DA_CONN :
				Stop_timer_ns (TR6_T303);
				Release_saved_spdu ();
				Send_to_call_control (NS_CONN_CO);
				Start_timer_ns (TR6_T300);
				Set_state (STATE_CONNECT_REQUEST_8);
				Call_ces = Dl_ces;
				break;

			case TI_303 :

				if (++N303 != MX_N303) {

					switch (Call_sub_state) {

						case N6 :
							Send_saved_spdu_to_d_channel (SETUP);
							Start_timer_ns (TR6_T303);
							break;
					}


				} else {	/* N303 == MX_N303 */

					Release_saved_spdu ();
					load_ie_cause ();
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();

				}

				break;

			default :
				ns_unexpected_ev ();
				break;


		}	/* end switch event_id */

	} else {

		switch (event_id) {

			case DA_SETUP_ACK :
				Release_saved_spdu ();
				ns_action_to_cc (TR6_T303, T3_NIL, NS_SETUP_ACK_IN,
													 STATE_CALL_PRESENT_6);
				break;

			case DA_CALL_PROC :
				Release_saved_spdu ();
				ns_action_to_cc (TR6_T303, T3_NIL, NS_CALL_PROC_IN,
													 STATE_CALL_PRESENT_6);
				break;

			case DA_ALERT :
				Release_saved_spdu ();
				ns_action_to_cc (TR6_T303, T3_NIL, NS_ALERT_IN,
													 STATE_CALL_RECEIVED_7);
				break;

			case DA_CONN :
				Release_saved_spdu ();
				ns_action_to_cc (TR6_T303, T3_NIL, NS_CONN_CO,
													 STATE_CONNECT_REQUEST_8);
				Call_ces = Dl_ces;
				break;

			case TI_303 :

				if (++N303 != MX_N303) {
					Send_saved_spdu_to_d_channel (SETUP);
					Start_timer_ns (TR6_T303);

				} else {

					set_i_cause (C_C_011, C_V_NO_USER_RESPONDING, P_NIL);
					Send_to_call_control (NS_CLEAR_CO);

					ns_action_to_dl (T3_NIL, TR6_T305, DISC,
													   STATE_DISCONNECT_INDICATION_12);
				}

				break;

			default :
				ns_unexpected_ev ();
				break;


		}

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void tr6_n7 ()
{

	if (Call_ces_setup == DL_CES_BROADCAST) {

		switch (event_id) {

			case INT_REL_COMP_IN :
				Call_alert (Dl_ces) = OFF;
				break;

			case DA_CONN :
				Send_to_call_control (NS_CONN_CO);
				Call_ces = Dl_ces;
				Start_timer_ns (TR6_T300);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			case DA_SETUP_ACK :
				/* no process (already done at the corresponding state_xx_I) */
				break;

			case DA_CALL_PROC :
				/* no process (already done at the corresponding state_xx_I) */
				break;

			case INT_INFO_IN :
				Send_to_call_control (NS_INFO_IN);
				break;

			case INT_REL_IN :

				if (tr6_nb_other_active_ces () > 0) {
					save_ie_cause ();
					return;
				}

					/* no more ces able to proceed and no timer T312 */

				load_ie_cause ();
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
				break;

			case DA_ALERT :
				Set_alert ();
				break;

			case INT_CALL_PROC_IN :
			case INT_ALERT_IN :
					/* no process */
				break;

			case INT_CONN_IN :
				Call_ces = Dl_ces;
				Send_to_call_control (NS_CONN_CO);
				Start_timer_ns (TR6_T300);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

	}

		/* SETUP was not broadcast */

	else {

		switch (event_id) {

			case DA_CONN :
				ns_action_to_cc (T3_NIL, T3_NIL, NS_CONN_CO,
													 STATE_CONNECT_REQUEST_8);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void tr6_n8 ()
{
	if (Call_ces_setup == DL_CES_BROADCAST) {

		switch (event_id) {

			case INT_REL_COMP_IN :
				Call_alert (Dl_ces) = OFF;
				break;

			case DA_ALERT :
			case DA_CONN :
			case DA_SETUP_ACK :
			case DA_CALL_PROC :
				Reset_internal_ie	();
				set_i_cause	(C_C_011, C_V_CALL_REJECTED, P_NIL);
				Send_to_d_channel (REL);
				break;

			case INT_CALL_PROC_IN :
			case INT_ALERT_IN :
			case INT_CONN_IN :
				/* no process */
				break;

			case INT_REL_IN :

				if (Dl_ces == Call_ces) {
					Tr6_send_to_all_ces (REL, OFF);

					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();

					return;
				}

				/* else no process */

				break;

			case NS_CONN_RS :
				Dl_call_count++;
				Stop_timer_ns (TR6_T300);
				Call_ces = Dl_ces;
				Send_to_d_channel (CONN_ACK);
				Set_int_ces_state (STATE_0_I);
				tr6_send_to_other_ces (REL, OFF);
				Set_state (STATE_ACTIVE_10);
				break;

			case INT_INFO_IN :
				Send_to_call_control (NS_INFO_IN);
				break;

			case INT_PROGRESS_IN :
				Send_to_call_control (NS_PROGRESS_IN);
				break;

			case TI_300 :
				set_i_cause (C_C_011, C_V_CALL_REJECTED, P_NIL);
				Save_cause ();									/* to send the RELEASE if T305 expire */
				Send_to_call_control (NS_CLEAR_IN);

				ns_action_to_dl (T3_NIL, TR6_T305, DISC,
												   STATE_DISCONNECT_INDICATION_12);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

	}

	else {

		switch (event_id) {

			case NS_CONN_RS :
				Dl_call_count++;
				ns_action_to_dl (T3_NIL, T3_NIL, CONN_ACK,
												   STATE_ACTIVE_10);
				break;

			default :
				ns_unexpected_ev ();
				break;

		}

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_ACTIVE */

		/* Active state */

			/*
			   This state exists if an incoming call when the user has
			   received an ackknowledgement from the network that the user
			   has been awarded the call. This state exists for an outgoing
			   call when the user has received an indication that the remote
			   user has answered the call.
			*/

void tr6_n10 ()
{

	switch (event_id) {

		case DA_CONN_ACK :
			/* no process */
			break;

		case DA_SUSP :

			if (Na_type == BRI) {
				ns_action_to_cc (T3_NIL, TR6_T300, NS_SUSPEND_CO,
												   STATE_SUSPEND_REQUEST_15);
			} else {

				ns_unexpected_ev ();
			}

			break;

		case NS_NOTIFY_RQ :
			Send_to_d_channel (NOTIFY);
			break;

		case DA_NOTIFY :
			Send_to_call_control (NS_NOTIFY_IN);
			break;


		case INT_REL_COMP_IN :

			if (Call_ces_setup == DL_CES_BROADCAST) {
				Call_alert (Dl_ces) = OFF;
			}

#			if ASSERT == ON

				else {

					Trap (TRAP_NS_BROADCAST, "n10 -> INT_REL_COMP_IN");
				}

#			endif

			break;

		default :
			ns_unexpected_ev ();
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_REQUEST */

		/* Disconnect request state */

			/*
			   This state exists when the user has requested the network
			   to clear the end-to-end connection (if any) and is waiting
			   for a response.
			*/

void tr6_n11 ()
{

	switch (event_id) {

		case NS_CLEAR_RS :
			Release_saved_spdu ();
			Stop_timer_ns (TR6_T300);
			go_to_state_19 (TR6_T308);
			break;

		case INT_REL_COMP_IN :

			Call_alert (Dl_ces) = OFF;

			if (Call_ces_connect == Dl_ces) {
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}


			break;

		default :
			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_DISCONNECT_INDICATION */

		/* Disconnect indication state */

			/*
			   This state exists when the user has received an invitation
			   to disconnect because the network has disconnected the
			   end-to-end connection (if any).
			*/

void tr6_n12 ()
{
	switch (event_id) {

		case TI_305 :
			go_to_state_19 (TR6_T308);
			break;

		case INT_REL_COMP_IN :

			Call_alert (Dl_ces) = OFF;

			if (Call_ces_connect == Dl_ces) {
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}


			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE SUSPEND_REQUEST */

		/* Suspend request state */

			/*
			   This state exists  after the user has requested the network
			   to suspend the call and is waiting for a response.
			*/

void tr6_n15 ()
{
	switch (event_id) {

		case NS_SUSPEND_RQ :
			Stop_timer_ns (TR6_T300);

			if (is_ie_i (CODESET_0, CAUSE) == PRESENT) {
				Send_to_d_channel (SUSP_REJ);
				Set_state (STATE_ACTIVE_10);

			} else {

				Send_to_d_channel (SUSP_ACK);
				call_clear ();
			}

			break;

		case NS_NOTIFY_RQ :
			Send_to_d_channel (NOTIFY);
			break;

		case TI_300 :
			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Send_to_d_channel (SUSP_REJ);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RESUME_REQUEST_17 */

		/* Resume request state */

			/*
			   This state exists  after the user has requested the network
			   to resume a previously suspend call and is waiting for a
			   response.
			*/

void tr6_n17 ()
{
	switch (event_id) {

		case NS_RESUME_RQ :
			Stop_timer_ns (TR6_T300);

			if (is_ie_i (CODESET_0, CAUSE) == PRESENT) {
				Send_to_d_channel (RES_REJ);
				call_clear ();

			} else {

				Send_to_d_channel (RES_ACK);
				Set_state (STATE_ACTIVE_10);
			}

			break;

		case TI_300 :
			set_i_cause (C_C_111, C_V_LOCAL_ERROR_PROCEDURE, P_NIL);
			Send_to_d_channel (SUSP_REJ);
			Set_state (STATE_ACTIVE_10);
			break;

		default :
			ns_unexpected_ev ();
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void tr6_n19 ()
{
	switch (event_id) {

		case INT_REL_COMP_IN :

			if (Call_ces_setup == DL_CES_BROADCAST) {
				Call_alert (Dl_ces) = OFF;

				if ((Call_ces_connect == Dl_ces) || (tr6_nb_active_ces () == 0)) {
					Send_to_call_control (NS_CLEAR_CO);
					call_clear ();
				}

			}

#			if ASSERT == ON

				else {

					Trap (TRAP_NS_BROADCAST, "n19 -> INT_REL_COMP_IN");
				}

#			endif

			break;

		case INT_INFO_IN :

			if (Call_ces_setup == DL_CES_BROADCAST) {
				Send_to_call_control (NS_INFO_IN);
			}

#			if ASSERT == ON

				else {

					Trap (TRAP_NS_BROADCAST, "n10 -> INT_INFO_IN");
				}

#			endif

			break;

		case TI_308 :

			if (++N308 < MX_N308) {
				Send_saved_spdu_to_d_channel (REL);
				Restart_timer_ns (TR6_T308);

			} else {

				set_i_cause (C_C_TIMER, C_V_T308, P_NIL);
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
			}

			break;

		default :
			ns_unexpected_ev ();
			break;
	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_OVERLAP_RECEIVING */

		/* Overlap receiving */

			/*
			   This state exits for an incoming call when the user
			   has acknowledged the call establishment request from
			   the network and is prepared to received additional call
			   information (if any) in overlap mode.
			*/

void tr6_n25 ()
{
	if (Call_ces_setup == DL_CES_BROADCAST) {

		switch (event_id) {

			case DA_SETUP_ACK :

				if (Call_setup_ack > MX_INT_PROC) {
					Start_int_timer (TR6_T308I);
					tr6_set_date_nil ();
					Send_to_d_channel_and_save_spdu (REL);
					Set_int_ces_state (STATE_19_I);

				} else {

					Set_int_ces_state (STATE_25_I);
					Send_to_d_channel (INFO);
				}

				break;

			case NS_SETUP_ACK_RQ :
				Stop_timer_ns (TR6_T304);
/*$*/			Tr6_send_to_all_ces (INFO, ON);
				Start_timer_ns (TR6_T304);
				break;

			case INT_ALERT_IN :
				Stop_timer_ns (TR6_T304);
				Send_to_call_control (NS_ALERT_IN);
				Set_state (STATE_CALL_RECEIVED_7);
				break;

			case INT_REL_COMP_IN :
				Call_alert (Dl_ces) = OFF;
				break;

			case INT_CALL_PROC_IN :
				Stop_timer_ns (TR6_T304);
				Send_to_call_control (NS_CALL_PROC_IN);
				Start_timer_ns (TR6_T310);
				Set_state (STATE_INCOMING_CALL_PROC_9);
				break;

			case INT_CONN_IN  :
				Stop_timer_ns (TR6_T304);
				Send_to_call_control (NS_CONN_IN);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			case INT_INFO_IN :
				Send_to_call_control (NS_INFO_IN);
				break;

			case INT_PROGRESS_IN :
				Send_to_call_control (NS_PROGRESS_IN);
				break;

			case INT_REL_IN :

				if (tr6_nb_other_active_ces () > 0) {
					save_ie_cause ();
					return;
				}

				load_ie_cause ();
				Send_to_call_control (NS_CLEAR_CO);
				call_clear ();
				break;

			case DA_ALERT :
				Stop_timer_ns (TR6_T304);
				Send_to_call_control (NS_ALERT_IN);
				Set_state (STATE_CALL_RECEIVED_7);
				break;

			case DA_CONN :
				Stop_timer_ns (TR6_T304);
				Send_to_call_control (NS_CONN_IN);
				Set_state (STATE_CONNECT_REQUEST_8);
				break;

			case DA_CALL_PROC :
				Stop_timer_ns (TR6_T304);
				Send_to_call_control (NS_CALL_PROC_IN);
				Start_timer_ns (TR6_T310);
				Set_state (STATE_INCOMING_CALL_PROC_9);
				break;

			case TI_304 :
				Tr6_send_to_all_ces (REL, OFF);
				load_ie_cause ();
				Send_to_call_control (NS_CLEAR_CO);

				call_clear ();

				break;

		}

	}
}

/*==============  INTERNAL STATE FOR INDIVIDUAL TERMINALS	============*/
/*==============			MULTIPOINT ONLY					============*/

		/* STATE_NULL */

			/*
			   No call exists : used when a call context is
			   allocated to a call or a registration.
			*/

void tr6_n0i ()
{

	switch (event_id) {

		case DA_ALERT :

			Release_saved_spdu ();							/* saved setup no more useful */

			if (Call_state == STATE_CONNECT_REQUEST_8) {
				event_id = INT_REL_RQ;

			} else {

				Stop_timer_ns (TR6_T303);
				Set_int_ces_state (STATE_7_I);
				Set_state (STATE_CALL_RECEIVED_7);
				Call_alert (Dl_ces) = ON;
				event_id = EV_NIL;	/* no more actions */
			}

			break;

		case DA_CONN :

			Release_saved_spdu ();							/* saved setup no more useful */

			if (Call_state == STATE_CONNECT_REQUEST_8) {
				event_id = INT_REL_RQ;

			} else {

				Set_int_ces_state (STATE_8_I);
			}

			break;

		case DA_REL :
			Send_to_d_channel (REL_COMP);
		case DA_REL_COMP :
			event_id = INT_REL_COMP_IN;
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_CALL_RECEIVED */

		/* Call received state */

			/*
			   This state exists for an incomming call when the user has
			   indicated alerting but not yet answered.
			*/

void tr6_n7i ()
{
	switch (event_id) {

		case DA_DISC :
			event_id = INT_REL_IN;
			tr6_set_date_nil ();
			Send_to_d_channel_and_save_spdu (REL);
			Start_int_timer (TR6_T308I);
			Set_int_ces_state (STATE_19_I);
			Call_alert (Dl_ces) = OFF;
			break;

		case DA_REL_COMP :
			event_id = INT_REL_COMP_IN;
			Set_int_ces_state (STATE_0_I);
			break;

		case DA_REL :
			Send_to_d_channel (REL_COMP);
			event_id = INT_REL_COMP_IN;
			Set_int_ces_state (STATE_0_I);
			break;

		case DA_CONN :
			Set_int_ces_state (STATE_8_I);
			break;

		case INT_INFO_RQ :
			Send_to_d_channel (INFO);
			break;

	}
}

/*-------------------------------------------------------------------------*/

		/* STATE_CONNECT_REQUEST */

		/* Connect request state */

			/*
			   This state exists for an incoming call when the user
			   has answered the call and is waiting to be awarded.
			*/

void tr6_n8i ()
{
	switch (event_id) {

		case DA_DISC :
			event_id = INT_REL_IN;
			tr6_set_date_nil ();
			Send_to_d_channel_and_save_spdu (REL);
			Start_int_timer (TR6_T308I);
			Set_int_ces_state (STATE_19_I);
			Call_alert (Dl_ces) = OFF;
			break;

		case DA_REL_COMP :
			event_id = INT_REL_COMP_IN;
			Set_int_ces_state (STATE_0_I);
			break;

		case DA_REL :
			Send_to_d_channel (REL_COMP);
			event_id = INT_REL_COMP_IN;
			Set_int_ces_state (STATE_0_I);
			break;

		case INT_INFO_RQ :
			Send_to_d_channel (INFO);
			break;

	}

}

/*-------------------------------------------------------------------------*/

		/* STATE_RELEASE_REQUEST */

		/* Release request state */

			/*
			   This state exists when the user has requested the network
			   to release and is waiting for a response.
			*/

void tr6_n19i ()
{
	switch (event_id) {

		case DA_REL_COMP :
			Stop_int_timer (TR6_T308I);
			event_id = INT_REL_COMP_IN;
			Set_int_ces_state (STATE_0_I);
			break;

		case DA_REL :
			Stop_int_timer (TR6_T308I);
			Send_to_d_channel (REL_COMP);
			event_id = INT_REL_COMP_IN;
			Set_int_ces_state (STATE_0_I);
			break;

		case DA_DISC :
			/* no process */
			break;

		case TI_308I :

			if (++R_msg_inf0 < MX_N308) {
				set_i_cause	(C_C_011, C_V_CALL_REJECTED, P_NIL);
				tr6_set_date_nil 	();
				Send_to_d_channel   (REL);
				Restart_int_timer	(TR6_T308I, R_msg_inf0);
				event_id = EV_NIL;	/* no more actions */

			} else {

				event_id = INT_REL_COMP_IN;
				Set_int_ces_state (STATE_0_I);
			}

			break;

		case DA_INFO :
		case DA_STATUS :
				/* no process */
			break;

	}
}

#endif

/*EOF*/

