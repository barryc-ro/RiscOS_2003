
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - build_nt.tr6
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        tr6_build_pdu_ns - implements the simulation of the network side
 *                   for a call connection.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name            tr6_net_build_pdu_ns - implements the simulation of the network
					side for a call connection.

Usage           tr6_net_build_pdu_ns ()

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void tr6_net_build_pdu_ns ()
{

		/* Message builder */

	switch (Tolower (g_spdu_id[0])) {

#if EQUIPMENT == TE

			/* Call establishment spdu event */

		case DA_ALERT :
				*p_info++ = ALERT;

				 p_ie_o = p_info;

/*				*p_info++ = DISPLAY;
				Put_text_with_length ("*** alert ***");

*/				 p_ie_m = p_info;

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = CALLED_STATUS;
				*p_info++ = 1;
				*p_info++ = 0x01;		/* NO_ACTION */

				break;


		case DA_CALL_PROC :
				*p_info++ = CALL_PROC;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;		/* INT_TYPE_BRI+CHAN_EXCL+B2_CHAN */

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** call sent ***");
*/
				break;


		case DA_CANC_ACK :
				*p_info++ = CANC_ACK;

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** cancel_ack ***");
*/
				 p_ie_m = p_info;

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = FAC_SELECT;
				*p_info++ = 2;
				*p_info++ = 0x0f;		/* SPF_FAC_B_CHANNEL */
				*p_info++ = 0x02;		/* SPF_B2_CHAN */

				break;

		case DA_CANC_REJ :
				*p_info++ = CANC_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x83;		/* bearer service not implemented */
				*p_info++ = 0xcf;		/* location not meaningful */

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
*/				Put_text_with_length ("*** cancel_reject ***");

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = FAC_SELECT;
				*p_info++ = 2;
				*p_info++ = 0x0f;		/* SPF_FAC_B_CHANNEL */
				*p_info++ = 0x02;		/* SPF_B2_CHAN */

				break;

		case DA_CONN :
				*p_info++ = CONN;

				 p_ie_m = p_info;

				Shift_to (CODESET_6, LOCKING_SHIFT);

				*p_info++ = CHARGING_INFO;
				*p_info++ = 4;
				*p_info++ = 0x01;
				*p_info++ = 0x30;
				*p_info++ = 0x30;
				*p_info++ = 0x37;

				*p_info++ = DATE;
				Put_text_with_length ("19.04.90-11:00");

				 p_ie_o = p_info;

/*				*p_info++ = DISPLAY;
				Put_text_with_length ("*** conn ***");

				Shift_to (CODESET_6, LOCKING_SHIFT);
*/



				break;

		case DA_CONN_ACK :
				*p_info++ = CONN_ACK;

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** conn_ack ***");
*/
				 p_ie_m = p_info;

				Shift_to (CODESET_6, LOCKING_SHIFT);
				*p_info++ = DATE;
				Put_text_with_length ("28.11.90-11:15:24");

				break;


		case DA_CON_CON :

				*p_info++ = TR6_CON_CON;

				 p_ie_m = p_info;

				*p_info++ = CONGEST_LEVEL & 0xf0;	/* receiver ready */

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x83;		/* bearer service not implemented */
				*p_info++ = 0xcf;		/* location not meaningfull */

				break;


		case DA_DISC :
				*p_info++ = DISC;

				*p_info++ = CAUSE;
				*p_info++ = 0;

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** disc ***");

*/
				 p_ie_m = p_info;

				Shift_to (CODESET_6, LOCKING_SHIFT);
				*p_info++ = DATE;
				Put_text_with_length ("28.11.90-11:16");

				break;


		case DA_FAC :
				*p_info++ = TR6_FAC;

				 p_ie_m = p_info;

				*p_info++ = SPF_FAC;
				*p_info++ = 5;
				*p_info++ = 0;          /* Network id length */
				*p_info++ = 0x0f;		/* FAC CODE = SPF_FAC_B_CHANNEL */
				*p_info++ = 0x02;		/* SERVICE = AB DIENST */
				*p_info++ = 0x00;		/* ADD INFO = 0 (no significant) */
				*p_info++ = 0x02;		/* PARAFELD = CHANNEL 2*/

				p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** fac ***");
*/
				break;


		case DA_FAC_ACK :
				*p_info++ = TR6_FAC_ACK;

				 p_ie_o = p_info;

/*				*p_info++ = DISPLAY;
				Put_text_with_length ("*** fac_ack ***");
*/
				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = FAC_SELECT;
				*p_info++ = 2;
				*p_info++ = 0x0f;		/* SPF_FAC_B_CHANNEL */
				*p_info++ = 0x02;		/* SPF_B2_CHAN */

				break;


		case DA_FAC_REJ :
				*p_info++ = TR6_FAC_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x83;		/* bearer service not implemented */
				*p_info++ = 0xcf;		/* location not meaningful */

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** fac_rej ***");
*/
				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = FAC_SELECT;
				*p_info++ = 2;
				*p_info++ = 0x0f;		/* SPF_FAC_B_CHANNEL */
				*p_info++ = 0x02;		/* SPF_B2_CHAN */

				break;


		case DA_INFO :
				*p_info++ = TR6_INFO;

				 p_ie_o = p_info;

				*p_info++ = BC;
				*p_info++ = 1;
				*p_info++ = 0x33;

				*p_info++ = SPF_FAC;
				*p_info++ = 5;
				*p_info++ = 0;		/* network id length */
				*p_info++ = 0x12;   /* Fac code = SHIFT */
				*p_info++ = 0x07;	/* Service = TRANSFER 64 kb */
				*p_info++ = 0xb5;	/* Add info : synchrone + v120 + 9600 bit */
				*p_info++ = 0x32;	/* EAZ1 = '2' */

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = CHARGING_INFO;
				*p_info++ = 3;
				*p_info++ = 0x01;
				*p_info++ = '1';
				*p_info++ = '4';


				break;


		case DA_REG_ACK :
				*p_info++ = REG_ACK;

				 p_ie_o = p_info;

/*				*p_info++ = DISPLAY;
				Put_text_with_length ("*** reg_ack ***");
*/
				 p_ie_m = p_info;

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = FAC_SELECT;
				*p_info++ = 2;
				*p_info++ = 0x0f;		/* SPF_FAC_B_CHANNEL */
				*p_info++ = 0x02;		/* SPF_B2_CHAN */

				break;


		case DA_REG_REJ :
				*p_info++ = TR6_REG_REJ;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x83;		/* bearer service not implemented */
				*p_info++ = 0xcf;		/* location not meaningfull */

				 p_ie_o = p_info;

/*				*p_info++ = DISPLAY;
				Put_text_with_length ("*** reg_rej ***");
*/
				 p_ie_m = p_info;

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = FAC_SELECT;
				*p_info++ = 2;
				*p_info++ = 0x0f;		/* SPF_FAC_B_CHANNEL */
				*p_info++ = 0x02;		/* SPF_B2_CHAN */

				break;


		case DA_REL :
				*p_info++ = REL;

				*p_info++ = CAUSE;
				*p_info++ = 0;

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** rel ***");

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = CHARGING_INFO;
				*p_info++ = 4;
				*p_info++ = 0x01;
				*p_info++ = '1';
				*p_info++ = '1';
				*p_info++ = '1';
*/
				 p_ie_m = p_info;

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = DATE;
				Put_text_with_length ("28.11.90-11:15:24");

				break;


		case DA_REL_COMP :
				*p_info++ = REL_COMP;

				break;

/*
		case DA_RES_ACK :
				*p_info++ = RES_ACK;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;		 INT_TYPE_BRI+CHAN_EXCL+B2_CHAN

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** resume_ack ***");

				Shift_to (CODESET_6, NON_LOCKING_SHIFT);
				*p_info++ = CHARGING_INFO;
				*p_info++ = 2;
				*p_info++ = 0x01;
				*p_info++ = '5';

				break;


		case DA_RES_REJ :
				*p_info++ = RES_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0xbe;		 call rejected
				*p_info++ = 0xcf;		 location not meaningful

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** resume_rej ***");

				break;
*/

		case DA_SETUP :
				*p_info++ = SETUP;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x81;		/* INT_TYPE_BRI+CHAN_EXCL+B1_CHAN */

				Shift_to (CODESET_6, LOCKING_SHIFT);
				 p_ie_m	  = p_info;
				*p_info++ = SERVICE_IND;
				*p_info++ = 2;
				*p_info++ = 0x07;		/* datenuebertragung */
				*p_info++ = 0xf3;

				 p_ie_o = p_info;

				Shift_to (CODESET_0, NON_LOCKING_SHIFT);
				*p_info++ = CALLING_NB;
				*p_info++ = 12;
				*p_info++ = 0x81;		/* unknown numbering type + ISDN numbering plan */
				 Put_text ("06151868124");

				break;


		case DA_SETUP_ACK :
				*p_info++ = SETUP_ACK;

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** setup_ack ***");
*/
				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;		/* INT_TYPE_BRI+CHAN_EXCL+B2_CHAN */

				break;


		case DA_STATUS :
				*p_info++ = TR6_STATUS;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0xbe;		/* call rejected */
				*p_info++ = 0xcf;		/* location not meaningful */

				 p_ie_o = p_info;
/*
				*p_info++ = DISPLAY;
				Put_text_with_length ("*** status ***");
*/
				break;

/*
		case DA_SUSP_ACK :
				*p_info++ = SUSP_ACK;

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** susp_ack ***");

				break;

		case DA_SUSP_REJ :
				*p_info++ = SUSP_REJ;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0xbe;		 call rejected
				*p_info++ = 0xcf;		 location not meaningful

				 p_ie_o = p_info;

				*p_info++ = DISPLAY;
				Put_text_with_length ("*** susp_rej ***");

				break;
*/
		case DA_USER_INFO :
				*p_info++ = USER_INFO;

				 p_ie_o = p_info;

				*p_info++ = MORE_DATA + 0x80;	/* A0 */
				 p_ie_m = p_info;

				*p_info++ = UUI;
				 Put_text_with_length ("** user-info **");

				break;
#else

			/* Call establishment spdu event */

		case DA_ALERT :
				*p_info++ = ALERT;
				break;


		case DA_CALL_PROC :
				*p_info++ = CALL_PROC;

				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;		/* INT_TYPE_BRI+CHAN_EXCL+B2_CHAN */

				 p_ie_o = p_info;

				break;

		case DA_CONN :
				*p_info++ = CONN;
				break;


		case DA_DISC :
				*p_info++ = DISC;

				*p_info++ = CAUSE;
				*p_info++ = 0;

				break;


		case DA_INFO :
				*p_info++ = TR6_INFO;
				break;


		case DA_REL :
				*p_info++ = REL;

				*p_info++ = CAUSE;
				*p_info++ = 0;

				 p_ie_o = p_info;

				break;


		case DA_REL_COMP :
				*p_info++ = REL_COMP;

				break;


		case DA_SETUP :
				*p_info++ = SETUP;

				Shift_to (CODESET_6, LOCKING_SHIFT);
				 p_ie_m	  = p_info;
				*p_info++ = SERVICE_IND;
				*p_info++ = 2;
				*p_info++ = 0x07;		/* datenuebertragung */
				*p_info++ = 0xf3;

				 p_ie_o = p_info;

				Shift_to (CODESET_0, NON_LOCKING_SHIFT);
				*p_info++ = CALLING_NB;
				*p_info++ = 12;
				*p_info++ = 0x81;		/* unknown numbering type + ISDN numbering plan */
				 Put_text ("06151868124");

				break;


		case DA_SETUP_ACK :
				*p_info++ = SETUP_ACK;

				 p_ie_o = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0x8a;		/* INT_TYPE_BRI+CHAN_EXCL+B2_CHAN */

				break;


		case DA_STATUS :
				*p_info++ = TR6_STATUS;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0xbe;		/* call rejected */
				*p_info++ = 0xcf;		/* location not meaningful */

				 p_ie_o = p_info;
				break;

#endif

		case DA_SPDU_ID_UNKNOWN:
				*p_info++ = SPDU_ID_UNKNOWN;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x87;
				*p_info++ = 0x90;

				break;

		case DA_HEXA_CODING :
				mg_ns_hexa ();		/* Hexadecimal coding */
				break;

		case '1' :
			Automata_1 ();
			break;

		default :
			return;
	}


}

/*EOF*/
