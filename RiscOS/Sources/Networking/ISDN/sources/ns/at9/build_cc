
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - build_cc.at9
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		at9_cc_load_ns_test - implements the loading of a NS test primitive
 *			ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			at9_cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage			uchar at9_cc_load_ns_test (code_t primitive_code, nai_t nai,
										conn_id_t conn_id);
							- primitive_code 	= code of the primitive to send,
							- nai				= network access ID,
							- conn_id			= connection ID.

Return value : 	at9_cc_load_ns_test returns = OK
										= NOK

common constants and declarations : ns.h, isdn.h

common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

uchar at9_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t		prim_code;		/* primitive code */
	nai_t 		nai;			/* network access ID */
	sapi_t		sapi;			/* sapi */
	conn_id_t	conn_id;		/* connection ID */
{

	char p_chan_id[10];

#	if NS_IE_TSP_OUT == ON
		uchar tsp_data[5];
#	endif


	p_chan_id[0] = 0x0c;
	p_chan_id[1] = 0;

		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

		/* Switch according to the primitive to send */

	switch (prim_code) {

/*==========================================================================*/

#	if EQUIPMENT == TE

		/*========== primitives as seen from TE side ==========*/

/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :

#		if NS_IE_TSP_OUT == ON
			Isdn_init_at9_ctx_rq_rs_tsp		(conn_rq,
											 Buffer_a_first_data,
											 Buffer_data_lgth
											);
#		else
			Isdn_init_at9_ctx_rq_rs			(conn_rq,
											 Buffer_a_first_data
											 );
#		endif

#		if NS_IE_TSP_OUT == OFF


			Isdn_at9_store_bc				(conn_rq,
											 TRF_CAP_UNRESTRICTED,
											 TRF_MODE_CIRCUIT,
											 TRF_RATE_64KBS,
											 BYTE_VAL_NIL,
											 BYTE_VAL_NIL,
											 BYTE_VAL_NIL
											);
/*

			Isdn_at9_store_bc_N_64			(conn_rq, 12);
*/


			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(conn_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);

				Isdn_at9_store_keypad		(conn_rq,
											 "1212"
											);
			} else {

				Isdn_at9_store_chan_id_NB_PRI(conn_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);

				Isdn_at9_store_called_nb	(conn_rq,
											 NB_NATIONAL,
											 PLAN_ISDN,
											 "0123456789"
											);
			}

			Isdn_at9_store_calling_nb		(conn_rq,
											 NB_NATIONAL,
											 PLAN_ISDN,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 "3369855044"
											);

			Isdn_at9_store_calling_sub_add	(conn_rq,
											 SUB_ADD_OSI,
											 SUB_ADD_ODD,
											 "4321"
											);

			Isdn_at9_store_called_sub_add_u	(conn_rq,
											 SUB_ADD_EVEN,
											 "4444",
											 4
											);

			Isdn_at9_store_transit_net_sel	(conn_rq,
											 NATIONAL_NETWORK_ID_TYPE,
											 UNKNOWN_PLAN,
											 "123"
											);

			Isdn_at9_store_hlc_CCITT		(conn_rq,
											 TELEPHONY,
											 BYTE_VAL_NIL
											);

			Isdn_at9_store_os_accss			(conn_rq,
											 ACCSS_TYPE_PU_PRINC_DEF
											);


#else
					/* Q931 encoding */

			tsp_data[0] = 2;
			tsp_data[1] = 0x88;
			tsp_data[2] = 0x90;

			Isdn_at9_store_bc_tsp			(conn_rq,
												tsp_data
											);

			if (Na_type != BRI) {

				tsp_data[0] = 3;
				tsp_data[1] = 0xa9;
				tsp_data[2] = 0x83;
				tsp_data[3] = 0x81;

				Isdn_at9_store_chan_id_tsp	(conn_rq,
											 tsp_data
											);

				Isdn_at9_store_called_nb	(conn_rq,
											 NB_UNKNOWN,
											 PLAN_UNKNOWN,
											 "3369855044"
											);
			} else {

				tsp_data[0] = 1;
				tsp_data[1] = 0x89;

				Isdn_at9_store_chan_id_tsp	(conn_rq,
												tsp_data
											);

				tsp_data[0] = 4;
				tsp_data[1] = 0x31;
				tsp_data[2] = 0x32;
				tsp_data[3] = 0x31;
				tsp_data[4] = 0x32;

				Isdn_at9_store_keypad_tsp	(conn_rq,
											 tsp_data
											);
			}

			tsp_data[0] = 0xc;
			tsp_data[1] = 0x21;
			tsp_data[2] = 0x80;
			tsp_data[3] = 0x33;
			tsp_data[4] = 0x33;
			tsp_data[5] = 0x36;
			tsp_data[6] = 0x39;
			tsp_data[7] = 0x38;
			tsp_data[8] = 0x35;
			tsp_data[9] = 0x35;
			tsp_data[10] = 0x30;
			tsp_data[11] = 0x34;
			tsp_data[12] = 0x34;

			Isdn_at9_store_calling_nb_tsp	(conn_rq,
												tsp_data
											);

			tsp_data[0] = 0x5;
			tsp_data[1] = 0xa8;
			tsp_data[2] = 0x34;
			tsp_data[3] = 0x33;
			tsp_data[4] = 0x32;
			tsp_data[5] = 0x31;

			Isdn_at9_store_calling_sub_add_tsp	(conn_rq,
												tsp_data
											);

			tsp_data[0] = 0x5;
			tsp_data[1] = 0x80;
			tsp_data[2] = 0x34;
			tsp_data[3] = 0x33;
			tsp_data[4] = 0x32;
			tsp_data[5] = 0x31;

			Isdn_at9_store_called_sub_add_tsp(conn_rq,
												tsp_data
											);

			tsp_data[0] = 0x4;
			tsp_data[1] = 0xa0;
			tsp_data[2] = 0x31;
			tsp_data[3] = 0x32;
			tsp_data[4] = 0x33;

			Isdn_at9_store_transit_net_sel_tsp(conn_rq,
												tsp_data
											);

			tsp_data[0] = 0x2;
			tsp_data[1] = 0x91;
			tsp_data[2] = 0x81;

			Isdn_at9_store_hlc_tsp	(conn_rq,
										tsp_data
											);

			tsp_data[0] = 0x1;
			tsp_data[1] = 0x80;

			Isdn_at9_store_os_accss_tsp		(conn_rq,
												tsp_data
											);
#endif

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_at9_ctx_rq_rs 		(conn_rs,
											 Buffer_a_first_data
											);

			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(conn_rs,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);
			} else {

				Isdn_at9_store_chan_id_NB_PRI(conn_rs,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);
			}

			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_at9_ctx_rq_rs			(clear_rq,
											 Buffer_a_first_data
											);

			Isdn_at9_store_cause			(clear_rq,
											 CODING_STD_CCITT,
											 LOCATION_USER,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											);


			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_at9_ctx_rq_rs			(clear_rs,
											 Buffer_a_first_data
											);

			Isdn_at9_store_cause			(clear_rs,
											 CODING_STD_CCITT,
											 BYTE_VAL_NIL,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											);

			break;

/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_at9_ctx_rq_rs			(info_rq,
											 Buffer_a_first_data
											);

			Isdn_at9_store_keypad			(info_rq,
											 "8901234"
											);

			Isdn_at9_store_feature_act		(info_rq,
											 1,
											 BYTE_VAL_NIL
											);


			Isdn_at9_store_called_nb		(info_rq,
											 NB_LOCAL,
											 PLAN_ISDN,
											 "1234567"
											);

			break;

/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_at9_ctx_rq_rs			(alert_rq,
											 Buffer_a_first_data
											);

			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(alert_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);

			} else {

				Isdn_at9_store_chan_id_NB_PRI(alert_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);
			}

			break;

/*---------------- HOLD REQUEST */

		case  NS_HOLD_RQ :
			Isdn_init_at9_ctx_rq_rs			(hold_rq,
											 Buffer_a_first_data
											);

			break;

/*---------------- HOLD RESPONSE */

		case  NS_HOLD_RS :
			Isdn_init_at9_ctx_rq_rs			(hold_rs,
											 Buffer_a_first_data
											);

			Isdn_at9_store_cause			(hold_rs,
											 BYTE_VAL_NIL,
											 BYTE_VAL_NIL,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											)

			break;

/*---------------- RETRIEVE REQUEST */

		case  NS_RET_RQ :
			Isdn_init_at9_ctx_rq_rs			(ret_rq,
											 Buffer_a_first_data
											);

			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(ret_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);
			} else {

				Isdn_at9_store_chan_id_NB_PRI(ret_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);
			}

			break;

/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_at9_ctx_rq_rs			(call_proc_rq,
											 Buffer_a_first_data
											);

			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(call_proc_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);

			} else {

				Isdn_at9_store_chan_id_NB_PRI(call_proc_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);
			}

			break;

/*---------------- RESTART_RS */

		case NS_RESTART_RS :
			Isdn_init_at9_ctx_rq_rs			(restart_rs,
											 Buffer_a_first_data
											);

			Isdn_at9_store_restart_ind		(restart_rs,
											 RI_ALL_INTERFACES
											);

			break;

/*---------------- RESTART_RQ */

		case NS_RESTART_RQ :
			break;

#	else

		/*========== primitives as seen from NT side ==========*/

/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :
			Isdn_init_at9_ctx_rq_rs			(conn_rq,
											 Buffer_a_first_data
											);

			Isdn_at9_store_bc				(conn_rq,
											 TRF_CAP_UNRESTRICTED,
											 TRF_MODE_CIRCUIT,
											 TRF_RATE_64KBS,
											 BYTE_VAL_NIL,
											 BYTE_VAL_NIL,
											 BYTE_VAL_NIL
											);

			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(conn_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);
			} else {

				Isdn_at9_store_chan_id_NB_PRI(conn_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);
			}

			Isdn_at9_store_calling_nb		(conn_rq,

											 NB_NATIONAL,
											 PLAN_ISDN,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 "3369855044"
											);

			Isdn_at9_store_calling_sub_add	(conn_rq,
											 SUB_ADD_USER,
											 SUB_ADD_ODD,
											 "4321"
											);

			Isdn_at9_store_called_nb		(conn_rq,
											 NB_NATIONAL,
											 PLAN_ISDN,
											 "0123456789"
											);

			Isdn_at9_store_called_sub_add	(conn_rq,
											 SUB_ADD_OSI,
											 SUB_ADD_EVEN,
											 "4321"
											);

			Isdn_at9_store_hlc_CCITT		(conn_rq,
											 TELEPHONY,
											 BYTE_VAL_NIL
											);

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_at9_ctx_rq_rs 		(conn_rs,
											 Buffer_a_first_data
											);

			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(conn_rs,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);
			} else {

				Isdn_at9_store_chan_id_NB_PRI(conn_rs,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);
			}

			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_at9_ctx_rq_rs			(clear_rq,
											 Buffer_a_first_data
											);

			Isdn_at9_store_cause			(clear_rq,
											 CODING_STD_CCITT,
											 LOCATION_USER,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											);


			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_at9_ctx_rq_rs			(clear_rs,
											 Buffer_a_first_data
											);

			Isdn_at9_store_cause			(clear_rs,
											 CODING_STD_CCITT,
											 BYTE_VAL_NIL,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											);

			break;

/*---------------- INFORMATION REQUEST */

		case  NS_INFO_RQ :
			Isdn_init_at9_ctx_rq_rs			(info_rq,
											 Buffer_a_first_data
											);


			break;

/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_at9_ctx_rq_rs			(alert_rq,
											 Buffer_a_first_data
											);

			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(alert_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);
			} else {

				Isdn_at9_store_chan_id_NB_PRI(alert_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);
			}

			Isdn_at9_store_signal		(alert_rq,
											DIAL_ON);

			break;

/*---------------- HOLD REQUEST */

		case  NS_HOLD_RQ :
			Isdn_init_at9_ctx_rq_rs			(hold_rq,
											 Buffer_a_first_data
											);

			break;

/*---------------- HOLD RESPONSE */

		case  NS_HOLD_RS :
			Isdn_init_at9_ctx_rq_rs			(hold_rs,
											 Buffer_a_first_data
											);

			Isdn_at9_store_cause			(hold_rs,
											 BYTE_VAL_NIL,
											 BYTE_VAL_NIL,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											)

			break;


/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_at9_ctx_rq_rs			(call_proc_rq,
											 Buffer_a_first_data
											);

			if (Na_type == BRI) {

				Isdn_at9_store_chan_id_BRI	(call_proc_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 B1_CHAN
											);
			} else {

				Isdn_at9_store_chan_id_NB_PRI(call_proc_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_chan_id
											);
			}

			break;

/*---------------- RESTART_RS */

		case NS_RESTART_RS :
			Isdn_init_at9_ctx_rq_rs			(restart_rs,
											 Buffer_a_first_data
											);

			Isdn_at9_store_restart_ind		(restart_rs,
											 RI_ALL_INTERFACES
											);

			break;

/*---------------- RESTART_RQ */

		case NS_RESTART_RQ :
			break;


#	endif

/*---------------- UNKNOWN primitive */

		default :
			return (NOK);
		}
			/* Load the communication message */

		Store_message (prim_code, nai, sapi, conn_id, p_buffer);
		Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);

		return (OK);

}

/*EOF*/
