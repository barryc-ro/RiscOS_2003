
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_spdu.at9
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta description of the messages
 * (signalling protocol data unit).
 *
 *		ATT_5E9 specific function :
 *
 *		 ie_type_eval - implements the evaluation of a conditional
 *						IE type : Mandatory or Optional.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
*
*SPDU model description :
*------------------------
*
*            spdu    tab_spdu
*    =====================================================
*    | id | event_id | u_n | n_u | type | p_ie | p_ie_SO |
*    |----|----------|-----|-----|------|------|---------|
*    |    |          |     |     |      |  X-------   X-------------------
*    |----|----------|-----|-----|------|------|  |      |               |
*    |    |          |     |     |      |      |  |      |               |
*    |----|----------|-----|-----|------|------|- | -----|               |
*    |    |          |     |     |      |      |  |      |               |
*                                                 |                      |
*                            spdu_ie              |                      |
*            =====================================v====================  |
*            | id | codeset | u_n | n_u | type | lgth_mini |lgth_maxi |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            ----------------                                            |
*                       |                                                |
*                       |                                                |
*                       -------> tab_ie                                  |
*                                                     --------------------
*                                          spdu_ie_so |
*                                        =============v=====================
*                                        | id | codeset | u_n | n_u | type |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*
*/

					/* ATT_5E9 SPDU parametrers description */

CONST	struct spdu_param AT9_SPDU_PARAM = {
	PROTOCOL_DISCRIMINATOR_I451,		/* Protocol discriminator I.451 (Q.931) */
	1,									/* BRI call reference length for outgoing SPDU */
	0,									/* BRI call reference minimum length for checking incoming SPDU */
	2,									/* BRI call refernce maximum length for  checking incoming SPDU */
	2,									/* PRI call reference length for outgoing SPDU */
	0,									/* PRI call reference minimum length for checking incoming SPDU */
	2,									/* PRI call reference maximum length for checking incoming SPDU */
	ON,									/* IE ordered first by codeset and by IE ID within each codeset */
	ON,									/* Locking shift allowed */
	OFF,								/* Non locking shift not allowed */
	OFF,								/* Null length IE are considered as missing in the SPDU */
	2,									/* Message type maximum length */
	OFF,								/* Global call reference value not meaningful */
	OFF,								/* NS segmentation. */
	ON,									/* NS restart procedure. */
	0,									/* Maximum number of restablish Data Link retry */
	24,									/* D channel */
	23									/* Maximum number of B channels */
};

					/*
						ATT_5E9 procedure parameters description
						ON approve of the comment / OFF disapprove
					*/

CONST	struct net_proc_param AT9_NET_PROC_PARAM = {
	OFF,								/* Some timers depend from the configuration type (POINT_TO_?) */
	OFF,								/* IE comprehension required procedure is applicable */
	OFF,								/* The sending a STATUS message is filtered according the cause value */
	ON,									/* Clear internal call when data link failure */

#	if EQUIPMENT == NT2
		OFF,							/* Internal timers are handled */
#	endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		ON,								/* NFAS support */
#	endif

	ON,									/* NS_INFO_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_FAC_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_NOTIFY_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
};

					/*
						 Message description :
							- information element identifier,
							- information element codeset,
							- call control to D channel transfer (ON or OFF),
							- D channel to call control transfer (ON or OFF),
							- type (Mandatory Optional, Conditional),
							- minimal length,
							- maximal length,
							- number of allowed repetition.
					*/


/*====================	CALL  ESTABLISHMENT  MESSAGES	=====================*/

							/* Alerting (ALERT) */

CONST	struct spdu_ie ALERT_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		CD,		3,		8,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	CD,		4,		4,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Call proceeding (CALL_PROC) */

CONST	struct spdu_ie CALL_PROC_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		3,		8,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{INFORMATION_RQ,CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{CALLED_NB,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		10,		1},
	{CALLED_SUB_ADD,CODESET_0,		OFF,		N_U_ALL,	OP,		4,		23,		1},
	{REDIRECTION_NB,CODESET_0,		OFF,		N_U_ALL,	OP,		6,		13,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Connect (CONNECT) */

CONST	struct spdu_ie CONN_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		8,		1},
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		8,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Connect acknowledge (CONNECT_ACK) */

CONST	struct spdu_ie CONN_ACK_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		8,		1},
	{NOTIF_IND,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		MX_NOTIF_IND},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Progress (PROGRESS) */

CONST	struct spdu_ie PROGRESS_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_CAUSE},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		MX_PROGRESS_IND},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Setup (SETUP) */

CONST	struct spdu_ie SETUP_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{BC,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		6,		1},
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		3,		8,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		34,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_ACT,	CODESET_0,		U_N_ALL,	OFF,		OP,		3,		4,		1},
	{ENDPOINT_ID,	CODESET_0,		OFF,		N_U_ALL,	OP,		3,		4,		2},
	{CALLING_NB,	CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		3,		19,		1},
	{CALLING_SUB_ADD,CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		23,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	OFF,		OP,		6,		35,		1},
	{CALLED_NB,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		18,		1},
	{CALLED_SUB_ADD,CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		23,		1},
	{REDIR_NB,		CODESET_0,		OFF,		N_U_ALL,	OP,		5,		20,		1},
	{TRANSIT_NET_SEL,CODESET_0,		U_N_ALL,	OFF,		OP,		4,		8,		1},
	{LLC,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		16,		1},
	{HLC,			CODESET_0,		U_N_ALL,	N_U_ALL,	OP,		4,		5,		1},
	{OS_ACCSS,		CODESET_5,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{CALL_APPEAR,	CODESET_6,		U_N_ALL,	N_U_ALL,	OP,		3,		4,		1},
	{IE_NIL}
};

							/* Setup acknowledge (SETUP_ACK) */

CONST	struct spdu_ie SETUP_ACK_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		8,		1},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{INFORMATION_RQ,CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

/*===============	CALL  INFORMATION  PHASE  MESSAGES	====================*/

							/* Retrieve (RET) */

CONST	struct spdu_ie RET_IE_AT9[] =	{
/*		ie		 	codeset 	  u --->n		n--->u		type	mini	maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		8,		1},
	{IE_NIL}
};

							/* Retrieve acknowledge (RET_ACK) */

CONST	struct spdu_ie RET_ACK_IE_AT9[] =	{
/*		ie		 	codeset 	  u --->n		n--->u		type	mini	maxi repetition */
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		8,		1},
	{NOTIF_IND,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		MX_NOTIF_IND},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Retrieve reject (RET_REJ) */

CONST	struct spdu_ie RET_REJ_IE_AT9[] =	{
/*		ie			codeset		  u --->n 	 	n--->u 		type	mini	maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		5,		MX_CAUSE},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Hold (HOLD) */

CONST	struct spdu_ie HOLD_IE_AT9[] =	{
/*		ie		 	codeset 	  	u --->n 	n--->u  	type	mini	maxi repetition */
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Hold acknowledge (HOLD_ACK) */

CONST	struct spdu_ie HOLD_ACK_IE_AT9[] =	{
/*		ie		 	codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{NOTIF_IND,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		MX_NOTIF_IND},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Hold reject (HOLD_REJ) */

CONST	struct spdu_ie HOLD_REJ_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		5,		MX_CAUSE},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		255,	1},
	{IE_NIL}
};

/*=====================	CALL  CLEARING  MESSAGES	=======================*/

							/* Disconnect (DISCONNECT) */

CONST	struct spdu_ie DISC_IE_AT9[] =	{
/*		ie			codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		5,		MX_CAUSE},
	{INFORMATION_RQ,CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{REDIRECTION_NB,CODESET_0,		OFF,		N_U_ALL,	OP,		6,		13,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Release (REL) */

CONST	struct spdu_ie REL_IE_AT9[] =	{
/*		ie		 	codeset 	  	u --->n 	n--->u  	type	mini	maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		5,		MX_CAUSE},
	{CHAN_ID,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		8,		1},
	{INFORMATION_RQ,CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{REDIRECTION_NB,CODESET_0,		OFF,		N_U_ALL,	OP,		6,		13,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Release complete (REL_COMP) */

CONST	struct spdu_ie REL_COMP_IE_AT9[] =	{
/*		ie		 	codeset 	  	u --->n  	n--->u 		type	mini	maxi	repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		4,		5,		MX_CAUSE},
	{INFORMATION_RQ,CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{REDIRECTION_NB,CODESET_0,		OFF,		N_U_ALL,	OP,		6,		13,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

/*====================		MISCELLANEOUS  MESSAGES	=======================*/

							/* Information (INFO) */

CONST	struct spdu_ie INFO_IE_AT9[] =	{
/*		ie		 	codeset			u --->n 	n--->u  	type	mini	maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_CAUSE},
	{PROGRESS_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{KEYPAD,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		34,		1},
	{INFORMATION_RQ,CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_ACT,	CODESET_0,		U_N_ALL,	OFF,		OP,		3,		4,		1},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{SPID,			CODESET_0,		U_N_ALL,	OFF,		OP,		11,		22,		1},
	{ENDPOINT_ID,	CODESET_0,		OFF,		N_U_ALL,	OP,		3,		4,		1},
	{CALLED_NB,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		18,		1},
	{REDIRECTION_NB,CODESET_0,		OFF,		N_U_ALL,	OP,		6,		13,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

#if AT9_SUPPLEMENTARY_SERVICES == ON

							/* Key Hold (K_HOLD) */

CONST	struct spdu_ie K_HOLD_IE_AT9[] =	{
/*		ie		 	codeset			u --->n 	n--->u  	type	mini	maxi repetition */
	{CAUSE,			CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_CAUSE},
	{NOTIF_IND,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		MX_NOTIF_IND},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Key release (K_REL) */

CONST	struct spdu_ie K_REL_IE_AT9[] =	{
/*		ie		 	codeset			u --->n 	n--->u  	type	mini	maxi repetition */
	{NOTIF_IND,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		MX_NOTIF_IND},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Key setup (K_SETUP) */

CONST	struct spdu_ie K_SETUP_IE_AT9[] =	{
/*		ie		 	codeset			u --->n 	n--->u  	type	mini	maxi repetition */
	{BC,			CODESET_0,		OFF,		N_U_ALL,	MD,		4,		5,		1},
	{NOTIF_IND,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		MX_NOTIF_IND},
	{ENDPOINT_ID,	CODESET_0,		OFF,		N_U_ALL,	OP,		3,		4,		1},
	{CALLED_NB,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		10,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		4,		1},
	{IE_NIL}
};

							/* Key setup acknowledge (K_SETUP_ACK) */

CONST	struct spdu_ie K_SETUP_ACK_IE_AT9[] =	{
/*		ie		 	codeset			u --->n 	n--->u  	type	mini	maxi repetition */
	{IE_NIL}
};

#endif

							/* Notify (NOTIFY) */

CONST	struct spdu_ie NOTIFY_IE_AT9[] =	{
/*		ie		 	codeset 	  u --->n 		n--->u  	type	mini	maxi repetition */
	{BC,			CODESET_0,		OFF,		N_U_ALL,	OP,		4,		6,		1},
	{NOTIF_IND,		CODESET_0,		OFF,		N_U_ALL,	MD,		3,		3,		MX_NOTIF_IND},
	{FEATURE_IND,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		5,		MX_FEATURE_IND},
	{CALLING_NB,	CODESET_0,		OFF,		N_U_ALL,	OP,		4,		19,		1},
	{CALLING_SUB_ADD,CODESET_0,		OFF,		N_U_ALL,	OP,		4,		23,		1},
	{CALLED_NB,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		10,		1},
	{CALLED_SUB_ADD,CODESET_0,		OFF,		N_U_ALL,	OP,		4,		23,		1},
	{SIGNAL,		CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Restart (RESTART) */

CONST	struct spdu_ie RESTART_IE_AT9[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		2,		8,		1},
	{RESTART_IND,	CODESET_0,  	U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL}
};

							/* Restart acknowledge (RESTART_ACK) */

CONST	struct spdu_ie RESTART_ACK_IE_AT9[] =	{
/*    ie         	codeset 	  	u --->n  	n--->u 		type    mini    maxi repetition */
	{CHAN_ID,		CODESET_0,		U_N_ALL,	N_U_ALL,	CD,		2,		8,		1},
	{RESTART_IND,	CODESET_0,  	U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{IE_NIL}
};

							/* Status (STATUS) */

CONST	struct spdu_ie STATUS_IE_AT9[] =	{
/*		ie		 	codeset 	 	u --->n  	n--->u  	type	mini	maxi repetition */
	{CAUSE,			CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		4,		10,		MX_CAUSE},
	{CALL_STATE,	CODESET_0,		U_N_ALL,	N_U_ALL,	MD,		3,		3,		1},
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

							/* Status enquiry (STATUS_ENQ) */

CONST	struct spdu_ie STATUS_ENQ_IE_AT9[] =	{
/*		ie		 	codeset 	 	u --->n  	n--->u  	type	mini	maxi repetition */
	{DISPLAY_TXT,	CODESET_5,		OFF,		N_U_ALL,	OP,		2,		128,	1},
	{IE_NIL}
};

/*====================      MAINTENANCE  MESSAGES =======================*/

							/* Service (MAINT_SERVICE) */

CONST   struct spdu_ie MAINT_SERVICE_IE_AT9[] =  {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi    repetition */
	{CHANGE_STATUS,         CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,     	3,      1},
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,      6,      1},
	{IE_NIL}
};

							/* Service Acknowledge (MAINT_SERVICE_ACK) */

CONST   struct spdu_ie MAINT_SERVICE_ACK_IE_AT9[] =  {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi    repetition */
	{CHANGE_STATUS,         CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,     	3,      1},
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,      6,      1},
	{IE_NIL}
};


/*=========================================================================*/

#define Ns_at9_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_at9_end_table_or_function		};

#define Ns_at9_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)		\
			Ns_tab_spdu_entry (pr, ev, u_n, n_u, usa, t_ie, t_so_ie),

#define Ns_at9_tab_spdu_maint_e(pr, ev, u_n, n_u, usa, t_ie, t_so_ie, prot)		\
			Ns_tab_spdu_maint_e (pr, ev, u_n, n_u, usa, t_ie, t_so_ie, prot),

#include "at9.tab_spdu"		/* include Table describing the primitives */

#define AT9_MX_TAB_SPDU (sizeof (AT9_TAB_SPDU)/ sizeof (struct spdu)) /* table size */

CONST	uchar	at9_mx_size_spdu = AT9_MX_TAB_SPDU;

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			 at9_ie_type_eval - implements the evaluation of a conditional
									IE type : Mandatory or Optional.

Usage			uchar at9_ie_type_eval (uchar spdu_id_p, uchar ie_id_p);
							- spdu_id_p : SPDU ID,
							- ie_id_p	:  IE ID,

Return value	at9_ie_type_eval returns the IE type
				Mandatory, Optional or eXcluded.

common constants and declarations : ns.h

common objects : call context
							- direction : from network or from user.

*--------------------------------------------------------------------------*/

uchar at9_ie_type_eval (spdu_id_p, ie_id_p)
	uchar	spdu_id_p;							/* SPDU ID */
	uchar	ie_id_p;							/* IE ID */

{

	switch (spdu_id_p) {

		case ALERT :

			switch (ie_id_p) {

				case PROGRESS_IND :

					if (Call_current_exist && (Call_bc_trf_cap != TRF_CAP_UNRESTRICTED)) {
						return (OP);

					} else {

						return (EX);
					}

				case CHAN_ID :

						/* Mandatory if network first response to setup
							but eXclude if SETUP contained NO_CHAN indication
						*/

					if (Call_current_exist) {

						if (Call_chan_id_sel == NO_CHAN) {
							return (EX);
						}

						if ((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) {
							return (MD);
						}

					}

					return (OP);

				case SIGNAL :

					if (Na_type == BRI) return (MD);

					return (OP);
			}

		case CALL_PROC :

			switch (ie_id_p) {

				case CHAN_ID :

						/* Mandatory if network first response to setup
							but eXclude if SETUP contained NO_CHAN indication
						*/

					if (Call_current_exist) {

						if (Call_chan_id_sel == NO_CHAN) {
							return (EX);
						}

						if ((Call_state == STATE_CALL_INIT_1) || (Call_state == STATE_CALL_PRESENT_6)) {
							return (MD);
						}

					}

					return (OP);
			}

			break;

		case CONN :

			if (Na_type == BRI) return (EX);

			return (OP);

		case CONN_ACK :

				/* CHAN_ID is Mandatory only if SETUP has indicated NO_CHAN */

			if	(Call_current_exist && (Call_chan_id_sel == NO_CHAN)) {
				return (MD);

			} else {

				return (EX);
			}


		case REL :
		case REL_COMP :

				if (Na_type == BRI) return (OP);

				/*
					CAUSE is Mandatory when first clearing message.
					but is either optional or to exclude from the message.
				*/

				if ((! Call_current_exist) || (Call_rel_flag == ON)) {
					return (MD);
				}

				return (OP);

		case RESTART :
		case RESTART_ACK :

			if (i_entity_origination == ENT_DL_D) {
				return (OP);

			} else {

				if (I_restart_ind_class == RI_INDICATED_CHANNEL) return (MD);
				if (I_restart_ind_class == RI_SINGLE_INTERFACE)  return (OP);
				return (EX);
			}

		case SETUP :

				if (Na_type == BRI) {

					if (direction != FROM_D_CHANNEL) {
						return (OP);
					}
				}

				return (MD);

		case SETUP_ACK :

						/* Signal IE in not included if contain adress digits */

				return (OP);

			/* Inconsistency */

		default :
			Trap (TRAP_IE_TYPE, "at9_ie_type_eval");

	}

	return (OP);
}

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Table above */

#undef Ns_at9_table_or_function
#undef Ns_at9_end_table_or_function
#undef Ns_at9_tab_spdu_entry
#undef Ns_at9_tab_spdu_maint_e

#define Ns_at9_table_or_function(str, tab)	i_pic = 0;

#define Ns_at9_end_table_or_function

#define Ns_at9_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)						\
			Pic_init_struct_array (AT9_TAB_SPDU, i_pic, p_ie, (struct spdu_ie *)t_ie);	\
			Pic_init_struct_array_next (AT9_TAB_SPDU, p_ie_so, (struct spdu_ie_so *)t_so_ie);

#define Ns_at9_tab_spdu_maint_e(pr, ev, u_n, n_u, usa, t_ie, t_so_ie, prot)		Ns_at9_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)						

void pic_init_ns_at9_spdu ()
{
	uchar   i_pic;

#	include "at9.tab_spdu"
}

#endif /* end of PIC used} */

/*EOF*/
