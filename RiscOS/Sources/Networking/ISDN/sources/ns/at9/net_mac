
/*--------------------------------------------------------------------------*
 *                      M O D U L E     H E A D E R
 *
 * filename - net_mac.at9
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

                /*
                    MACROs and DECLARATIONS used to access the Network
                    Signalling entity (NS) from the user Layer 4 Signalling
                    entity (L4S).
                */

/*-------------------------------------------------------------------------*/


            /*
                Isdn_init_at9_ctx_???? = initialization of the common context
                                     used by a primitive macro :

                    INPUT :
                        - pr     = primitive ID,
                        - p_off  = pointer to the offset area,

            */

#if NS_IE_TSP_OUT == ON
#	define Isdn_init_at9_ctx_rq_rs_tsp(pr, p_off, data_lg)	Isdn_init_ctx_rq_rs_tsp(Paste(at9_,pr), p_off, data_lg)
#endif

#define Isdn_init_at9_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(at9_,pr), p_off)
#define Isdn_init_at9_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define Get_ie_at9(pr,ie)                   Get_ie          (Paste(at9_,pr), Paste (at9_, ie))
#define Isdn_get_val_at9(pr,ie,fld)         Isdn_get_val    (Paste(at9_,pr), Paste (at9_, ie), fld)
#define Isdn_p_str_at9(pr,ie,fld)           Isdn_p_str      (Paste(at9_,pr), Paste (at9_, ie), fld)
#define Isdn_lgth_str_at9(pr,ie,fld)        Isdn_lgth_str   (Paste(at9_,pr), Paste (at9_, ie), fld)
#define Isdn_mx_lgth_str_at9(pr,ie,fld)     Isdn_mx_lgth_str(Paste(at9_,pr), Paste (at9_, ie), fld)
#define P_start_val_ns_at9(pr,ie)           P_start_val_ns  (Paste(at9_,pr), Paste (at9_, ie))
#define P_val_ns_at9(ie)                    P_val_ns        (Paste(at9_,ie))
#define Set_offset_at9(pr,ie)               Set_offset      (Paste(at9_,pr),Paste(at9_,ie))
#define Set_next_ie_at9(ie)                 Set_next_ie     (Paste(at9_,ie))
#define Set_val_at9(ie,fld,val)             Set_val         (Paste(at9_,ie), fld, val)
#define Set_str_at9(ie, lv, p_str, mx_sz)   Set_str         (Paste(at9_,ie), lv, p_str, mx_sz)
#define Set_mem_at9(ie, lv, p_mem, sz)      Set_mem         (Paste(at9_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_at9(pr,ie)	Set_to_next_ie_instance (Paste(at9_,pr), Paste (at9_, ie))
#define Get_remaining_ie_instance_nb_at9(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(at9_,pr), Paste (at9_, ie), p_ie)
#define	Set_val_nil_at9(ie)					Set_val_nil		(Paste(at9_,ie))

#if MESSAGE_HEADER_IE == ON
#   define Message_header_offset_at9    ns_offset_t at9_message_header;
#else
#   define Message_header_offset_at9
#endif

#define Set_ns_offset_tsp_at9(pr,ie)			Set_ns_offset_tsp	(Paste(at9_,pr),Paste(at9_,ie))
#define Set_mem_eob_at9(ie,lv,p_mem,sz)		Set_mem_eob		(Paste(at9_,ie), lv, p_mem, sz)


/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

		/**************************************************
		**   Each offset is a relative pointer on the    **
		**   data of an IE element                       **
		**************************************************/

/*====================  CALL  ESTABLISHMENT  MESSAGES   =====================*/

		/* NS_ALERT_IN */

struct off_ns_at9_te_alert_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_chan_id;                     /* channel ID */
	ns_offset_t at9_progress_ind;                /* progress indicator */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_alert_in       off_ns_at9_alert_rq;
typedef struct off_ns_at9_te_alert_in       off_ns_at9_alert_in;

		/* NS_CALL_PROC_IN */

struct off_ns_at9_te_call_proc_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_chan_id;                     /* channel ID */
	ns_offset_t at9_progress_ind;                /* progress indicator */
	ns_offset_t at9_information_rq;              /* information request */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_called_nb;                   /* called number */
	ns_offset_t at9_called_sub_add;              /* called sub-address */
	ns_offset_t at9_redirection_nb;              /* redirection number */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_call_proc_in   off_ns_at9_call_proc_rq;
typedef struct off_ns_at9_te_call_proc_in   off_ns_at9_call_proc_in;


		/* NS_CONN_IN */

struct off_ns_at9_te_conn_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_bc;                          /* bearer capability */
	ns_offset_t at9_chan_id;                     /* channel ID */
	ns_offset_t at9_progress_ind;                /* progress indicator */
	ns_offset_t at9_keypad;                      /* keypad */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_act;                 /* feature activation */
	ns_offset_t at9_endpoint_id;                 /* endpoint identifier */
	ns_offset_t at9_calling_nb;                  /* calling number (from network) */
	ns_offset_t at9_calling_sub_add;             /* calling subaddress */
	ns_offset_t at9_called_nb;                   /* called number */
	ns_offset_t at9_called_sub_add;              /* called subaddress */
	ns_offset_t at9_redir_nb;                    /* redirecting number */
	ns_offset_t at9_transit_net_sel;			/* transit network selection */
	ns_offset_t at9_llc;                         /* low layer capability */
	ns_offset_t at9_hlc;                         /* high layer compatibility */
	ns_offset_t at9_os_accss;                    /* operator system access */
	ns_offset_t at9_display;                     /* display */
	ns_offset_t at9_call_appear;                 /* call appearance */
};

typedef struct off_ns_at9_te_conn_in        off_ns_at9_conn_rq;
typedef struct off_ns_at9_te_conn_in        off_ns_at9_conn_in;


		/* NS_CONN_CO (CONN or CONN_ACK) */

struct off_ns_at9_te_conn_co {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_chan_id;                     /* channel ID */
	ns_offset_t at9_progress_ind;                /* progress indicator */
	ns_offset_t at9_notif_ind;                   /* notify indicator */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_conn_co        off_ns_at9_conn_rs;
typedef struct off_ns_at9_te_conn_co        off_ns_at9_conn_co;

		/* NS_PROGRESS_IN */

struct off_ns_at9_te_progress_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_cause;                       /* cause */
	ns_offset_t at9_progress_ind;                /* progress indicator */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_progress_in    off_ns_at9_progress_rq;
typedef struct off_ns_at9_te_progress_in    off_ns_at9_progress_in;

		/* NS_SETUP_ACK_IN */

struct off_ns_at9_te_setup_ack_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_chan_id;                     /* channel ID */
	ns_offset_t at9_progress_ind;                /* progress indicator */
	ns_offset_t at9_information_rq;              /* information request */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_setup_ack_in   off_ns_at9_setup_ack_rq;
typedef struct off_ns_at9_te_setup_ack_in   off_ns_at9_setup_ack_in;

/*===============   CALL  INFORMATION  PHASE  MESSAGES  ====================*/

		/* NS_RET_CO */

struct off_ns_at9_te_ret_co {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_cause;                       /* cause */
	ns_offset_t at9_chan_id;                     /* channel ID */
	ns_offset_t at9_notif_ind;                   /* notify indicator */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_ret_co     off_ns_at9_ret_rs;
typedef struct off_ns_at9_te_ret_co     off_ns_at9_ret_co;
typedef struct off_ns_at9_te_ret_co     off_ns_at9_ret_rq;
typedef struct off_ns_at9_te_ret_co     off_ns_at9_ret_in;

		/* NS_HOLD_IN */

struct off_ns_at9_te_hold_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_hold_in        off_ns_at9_hold_in;
typedef struct off_ns_at9_te_hold_in        off_ns_at9_hold_rq;

		/* NS_HOLD_CO */

struct off_ns_at9_te_hold_co {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_cause;                       /* cause */
	ns_offset_t at9_notif_ind;                   /* notify indicator */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_hold_co        off_ns_at9_hold_rs;
typedef struct off_ns_at9_te_hold_co        off_ns_at9_hold_co;

		/* NS_KEY_HOLD_IN */

struct off_ns_at9_te_key_hold_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_cause;                       /* cause */
	ns_offset_t at9_notif_ind;                   /* notify indicator */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_key_hold_in	off_ns_at9_key_hold_in;
typedef struct off_ns_at9_te_key_hold_in	off_ns_at9_key_hold_rq;

		/* NS_KEY_REL_IN */

struct off_ns_at9_te_key_rel_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_cause;                       /* cause */
	ns_offset_t at9_notif_ind;                   /* notify indicator */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_key_rel_in		off_ns_at9_key_rel_in;
typedef struct off_ns_at9_te_key_rel_in		off_ns_at9_key_rel_rq;

		/* NS_KEY_SETUP_IN */

struct off_ns_at9_te_key_setup_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_bc;                          /* bearer capability */
	ns_offset_t at9_notif_ind;                   /* notify indicator */
	ns_offset_t at9_endpoint_id;                 /* endpoint identifier */
	ns_offset_t at9_called_nb;                   /* called number */
	ns_offset_t at9_display;                     /* display */
	ns_offset_t at9_call_appear;                 /* call appearance */
};

typedef struct off_ns_at9_te_key_setup_in	off_ns_at9_key_setup_in;
typedef struct off_ns_at9_te_key_setup_in	off_ns_at9_key_setup_rq;

		/* NS_KEY_SETUP_ACK_RQ */

struct off_ns_at9_te_key_setup_ack_rq {
	Message_header_offset_at9               /* message header parameters */

#	if MESSAGE_HEADER_IE != ON
		ns_offset_t ie_nil;						/* or no IE */
#	endif

};

typedef struct off_ns_at9_te_key_setup_ack_rq	off_ns_at9_key_setup_ack_rq;
typedef struct off_ns_at9_te_key_setup_ack_rq	off_ns_at9_key_setup_ack_in;

/*===================== CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_IN */

struct off_ns_at9_te_clear_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_cause;                       /* cause */
	ns_offset_t at9_chan_id;                     /* channel ID */
	ns_offset_t at9_information_rq;              /* information request */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_redirection_nb;              /* redirection number */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_clear_in       off_ns_at9_clear_rq;
typedef struct off_ns_at9_te_clear_in       off_ns_at9_clear_in;

		/* NS_CLEAR_CO */

struct off_ns_at9_te_clear_co {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_cause;                       /* cause */
	ns_offset_t at9_information_rq;              /* information request */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_redirection_nb;              /* redirection number */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_clear_co       off_ns_at9_clear_rs;
typedef struct off_ns_at9_te_clear_co       off_ns_at9_clear_co;

/*====================      MISCELLANEOUS  MESSAGES =======================*/

		/* NS_INFO_IN */

struct off_ns_at9_te_info_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_cause;                       /* cause */
	ns_offset_t at9_progress_ind;                /* progress indicator */
	ns_offset_t at9_keypad;                      /* keypad */
	ns_offset_t at9_information_rq;              /* information request */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_feature_act;                 /* feature activation */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_endpoint_id;                 /* endpoint identifier */
	ns_offset_t at9_called_nb;                   /* called number */
	ns_offset_t at9_redirection_nb;              /* redirection number */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_info_in        off_ns_at9_info_rq;
typedef struct off_ns_at9_te_info_in        off_ns_at9_info_in;

		/* NS_NOTIFY_IN */

struct off_ns_at9_te_notify_in {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t at9_bc;                          /* bearer capability */
	ns_offset_t at9_notif_ind;                   /* notify indicator */
	ns_offset_t at9_feature_ind;                 /* feature indication */
	ns_offset_t at9_endpoint_id;                 /* endpoint identifier */
	ns_offset_t at9_calling_nb;                  /* calling number (from network) */
	ns_offset_t at9_calling_sub_add;             /* calling subaddress */
	ns_offset_t at9_called_nb;                   /* called number */
	ns_offset_t at9_called_sub_add;              /* called subaddress */
	ns_offset_t at9_signal;                      /* signal */
	ns_offset_t at9_display;                     /* display */
};

typedef struct off_ns_at9_te_notify_in      off_ns_at9_notify_rq;
typedef struct off_ns_at9_te_notify_in      off_ns_at9_notify_in;

		/* NS_RESTART_RQ/IN/RS/CO */

struct off_ns_at9_te_restart_in {
	Message_header_offset_at9				/* message header parameters */
	ns_offset_t at9_chan_id;						/* channel identifier */
	ns_offset_t at9_restart_ind;					/* restart indicator */
};

typedef struct off_ns_at9_te_restart_in		off_ns_at9_restart_rq;
typedef struct off_ns_at9_te_restart_in		off_ns_at9_restart_in;

typedef struct off_ns_at9_te_restart_in		off_ns_at9_restart_rs;
typedef struct off_ns_at9_te_restart_in		off_ns_at9_restart_co;

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

	/* NS_SERVICE_CO */

struct off_ns_at9_te_service_co {
	Message_header_offset_at9               /* message header parameters */
	ns_offset_t	at9_change_status;			/* Change Status */
	ns_offset_t	at9_chan_id;				/* Channel Id */
};

typedef struct off_ns_at9_te_service_co		off_ns_at9_service_co;

#endif /* } */

		/**************************************************
		**  DESCRIPTION of the value of an IE.           **
		**  ---------------------------------            **
		**  EACH ENTRY SHALL BE IN ACCORDANCE WITH THE   **
		**  CORRESPONDING SSDU IE META-PROGRAM           **
		**                                               **
		***************************************************/

		/* Bearer Capability (BC) */

struct val_ns_at9_bc {
	Next_instance_offset
	ie_val      trf_cap;                /* information transfer capability */
	ie_val      trf_mode;               /* information transfer mode */
	ie_val      trf_rate;               /* information transfer rate */
	ie_val		multiplier;				/* multiplier in case of n*64kb/s service */
	ie_val      protocol_id_1;          /* user information layer 1 protocol */
	ie_val      protocol_id_2;          /* user information layer 2 protocol */
};

		/* Called party number (CALLED_NB) */

struct val_ns_at9_called_nb {
	Next_instance_offset
	ie_val      plan_id;           /* numbering plan */
	ie_val      nb_type;           /* type of number */
	ie_array    nb[AT9_MX_SZ_CALLED_NB+2];  /* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_at9_called_sub_add {
	Next_instance_offset
	ie_val      sub_add_type;           /* called subaddress type */
	ie_val      odd_even_ind;           /* odd/even indicator */
	ie_array    sub_add[AT9_MX_SZ_CALLED_SUB_ADD+2];    /* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_at9_calling_nb {
	Next_instance_offset
	ie_val      plan_id;			/* numbering plan */
	ie_val      nb_type;			/* type of number */
	ie_val      pres;				/* presentation */
	ie_val		screen_ind;			/* screening indicators */
	ie_array    nb[AT9_MX_SZ_CALLING_NB+2]; /* calling number digits */
};

		/* Calling party subaddress (CALLING_SUB_ADD) */

struct val_ns_at9_calling_sub_add {
	Next_instance_offset
	ie_val      sub_add_type;           /* calling subaddress type */
	ie_val      odd_even_ind;           /* odd/even indicator */
    ie_array    sub_add[AT9_MX_SZ_CALLING_SUB_ADD+2];   /* sub-add information */
};

        /* Cause (CAUSE) */

struct val_ns_at9_cause {
    Next_instance_offset
	ie_val      coding_std;             /* coding standard */
	ie_val      cause_loc;              /* location */
	ie_val      cause_class;            /* cause class field */
	ie_val      cause_val;              /* cause value field */
	ie_array    cause_diag[AT9_MX_SZ_CAUSE_DIAG+2]; /* diagnostics */
};

		/* Change Status (CHANGE_STATUS) */

struct val_ns_at9_change_status {
	Next_instance_offset
	ie_val		preference;					/* All interface, single B channel */
	ie_val		status;						/* Status of the B channel(s) */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_at9_chan_id {
	Next_instance_offset
	ie_val 		int_id;					/* interface id */
	ie_val 		int_type;				/* interface type */
	ie_val 		pref_excl;				/* preferred or exclusive channel */
	ie_val		d_chan;					/* D-channel indicator */
	ie_val 		chan_sel;				/* information channel selection */
	ie_val		int_id_val;				/* interface id value */
	ie_val		nb_map;					/* channel nb / mapping */
	ie_array	chan_nb[AT9_MX_SZ_CHAN_ID+2];	/* channel number */
};

        /* Endpoint identifier (ENDPOINT_ID) */

struct val_ns_at9_endpoint_id {
    Next_instance_offset
    ie_val      usid;                   /* user id */
    ie_val      tid;                    /* terminal id */
    ie_val      interp;                 /* interpreter flag */
};

        /* Feature activation (FEATURE_ACT) */

struct val_ns_at9_feature_act {
    Next_instance_offset
    ie_val      feature_id;                 /* feature identifier */
    ie_val      feature_id_2;               /* feature identifier (continuation) */
};

		/* Feature indication (FEATURE_IND) */

struct val_ns_at9_feature_ind {
    Next_instance_offset
    ie_val      feature_id;                 /* feature identifier */
    ie_val      feature_id_2;               /* feature identifier (continuation) */
	ie_val      status_ind;                 /* feature status indicator */
};

		/* High Layer Compatibility (HLC) */

struct val_ns_at9_hlc {
    Next_instance_offset
    ie_val      coding_std;                 /* coding standard */
    ie_val      teleservice;                /* high layer characteristics identification */
	ie_val      ext_teleservice;            /* extended high layer characteristics identification */
};

        /* Information request (INFORMATION_RQ) */

struct val_ns_at9_information_rq {
    Next_instance_offset
    ie_val      info_type;              /* information type */
    ie_val      info_ind;               /* information indicator */
};

        /* Keypad */

struct val_ns_at9_keypad {
    Next_instance_offset
    ie_array    text[AT9_MX_SZ_KEYPAD+2];           /* keypad information */
};

        /* Low Layer Compatibility (LLC) */

struct val_ns_at9_llc {
    Next_instance_offset
    ie_val      coding_std;             /* coding standard */
    ie_val      trf_cap;                /* information transfer capability */
    ie_val      out_band_neg;           /* out-band negotiation */
    ie_val      trf_mode;               /* transfer mode */
    ie_val      trf_rate;               /* information transfer rate */
    ie_val      structure;              /* structure */
    ie_val      dest_rate;              /* destination rate */
    ie_val      protocol_id_1;          /* user information layer 1 protocol */
	ie_val      syn_asyn;               /* synchronous/asynchronous */
    ie_val      negotiation;            /* negotiation */
	ie_val      user_rate;              /* user rate */
    ie_val      inter_rate;             /* intermediate rate */
    ie_val      nic_tx;                 /* network independent clock on transmission (Tx) */
    ie_val      nic_rx;                 /* network independent clock on reception (Rx) */
	ie_val      fc_tx;                  /* flow control on transmission (Tx) */
    ie_val      fc_rx;                  /* flow control on reception (Rx) */
    ie_val      hdr;                    /* rate adaption header included or not */
	ie_val      multi_frame;            /* multiple frame establishement support in DL */
    ie_val      op_mode;                /* mode of operation */
    ie_val      lli_negot;              /* logical link identifier negotiation */
    ie_val      assign;                 /* assignor/assignee */
    ie_val      band_negot;             /* in-band/out-band negotiation */
    ie_val      stop_bit;               /* number of stop bits */
	ie_val      data_bit;               /* number of data bits excluding parity if present */
    ie_val      parity;                 /* parity information */
	ie_val      duplex;                 /* duplex mode */
    ie_val      modem;                  /* modem type */
    ie_val      protocol_id_2;          /* user layer 2 protocol information */
    ie_val      option_2;               /* optional layer 2 protocol information */
    ie_val      protocol_id_3;          /* user information layer 3 protocol */
    ie_val      option_3;               /* optional layer 3 protocol information */
};

		/* Notification indicator (NOTIF_IND) */

struct val_ns_at9_notif_ind {
	Next_instance_offset
	ie_val      notif_descr;            /* notification description*/
};

		/* Progress indicator (PROGRESS_IND) */

struct val_ns_at9_progress_ind {
	Next_instance_offset
	ie_val      coding_std;             /* coding standard */
	ie_val      progress_loc;           /* general location */
	ie_val      progress_descr;         /* progress description */
};

		/* Redirecting number (REDIR_NB) */

struct val_ns_at9_redir_nb {
	Next_instance_offset
	ie_val      plan_id;			/* numbering plan */
	ie_val      nb_type;			/* type of number */
	ie_val      pres;				/* presentation */
	ie_val		screen_ind;			/* screening indicators */
	ie_val      reason;             /* reason for redirection */
	ie_array    nb[AT9_MX_SZ_REDIR_NB+2];   /* number digits */
};

		/* Redirection number (REDIRECTION_NB) */

struct val_ns_at9_redirection_nb {
	Next_instance_offset
	ie_array    nb[AT9_MX_SZ_REDIRECTION_NB+2]; /* number digits */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_at9_restart_ind {
	Next_instance_offset
	ie_val		restart_class;					/* class */
};

		/* Signal (SIGNAL) */

struct val_ns_at9_signal {
    Next_instance_offset
    ie_val      signal_val;             /* signal value */
};

		/* Transit network selection (TRANSIT_NET_SEL) */

struct val_ns_at9_transit_net_sel {
    Next_instance_offset
    ie_val      net_id_type;            /* network id type */
    ie_val      net_id_plan;            /* network id plan */
    ie_array    net_id[AT9_MX_SZ_TRANSIT_NET_SEL+2];    /* address of network identification information */
};

		/* Operator system access (OS_ACCSS) */

struct val_ns_at9_os_accss {
    Next_instance_offset
    ie_val      access_type;                /* type of access */
};

        /* Display */

struct val_ns_at9_display {
    Next_instance_offset
	ie_array    text[AT9_MX_SZ_DISPLAY+2];      /* display information */
};

		/* Call appearance (CALL_APPEAR) */

struct val_ns_at9_call_appear {
	Next_instance_offset
	ie_val      call_appear_id;             /* call appearance identifier */
	ie_val      call_appear_id_2;           /* call appearance identifier (continuation) */
};

/*=========================================================================*/

							/* Information Elements (IE) */

			/*
				Isdn_at9_store_bc : store the bearer capability information
									element :

					INPUT :
						- pr            = primitive ID,
						- trf_cap_      = information transfer capability,
						- trf_mode_     = information transfer mode,
						- trf_rate_     = information transfer rate,
						- multi_     	= multiplier,
						- protocol_id_1_= user information layer 1 protocol,
						- protocol_id_2_= user information layer 2 protocol,
			*/

#define Isdn_at9_store_bc(pr, trf_cap_, trf_mode_, trf_rate_, multi_, protocol_id_1_, protocol_id_2_)  \
				Set_offset_at9  (pr,    bc);                                        \
				Set_val_at9     (bc,    trf_cap,        trf_cap_);                  \
				Set_val_at9     (bc,    trf_mode,       trf_mode_);                 \
				Set_val_at9     (bc,    trf_rate,       trf_rate_);                 \
				Set_val_at9     (bc,    multiplier, 	multi_);                 \
				Set_val_at9     (bc,    protocol_id_1,  protocol_id_1_);            \
				Set_val_at9     (bc,    protocol_id_2,  protocol_id_2_);            \
				Set_next_ie_at9 (bc)

			/*
				Isdn_at9_store_bc_N_64 : bearer capability for N*64  :

					INPUT :
						- pr            = primitive ID,
						- multi_		= multiplier,

			*/

#define Isdn_at9_store_bc_N_64(pr, multi_)									\
		Isdn_at9_store_bc(pr,	TRF_CAP_UNRESTRICTED,	TRF_MODE_CIRCUIT,	\
								TRF_RATE_MULTI_RATE,	multi_,				\
								BYTE_VAL_NIL,   		BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at9_store_called_nb : called number IE

                    INPUT :
						- pr			= primitive ID,
						- nb_type_	    = type of number,
						- plan_id_  	= numbering plan,
						- nb_           = address of the literal string.
			*/

#define Isdn_at9_store_called_nb(pr, nb_type_, plan_id_, nb_)                    \
		Set_offset_at9  (pr,        called_nb);                                 \
		Set_val_at9     (called_nb, nb_type,   nb_type_);             \
		Set_val_at9     (called_nb, plan_id,   plan_id_);             \
		Set_str_at9     (called_nb, nb,             nb_,        AT9_MX_SZ_CALLED_NB+1)

/*-------------------------------------------------------------------------*/

			/*
                Isdn_at9_store_called_sub_add : called sub-address IE

                    INPUT :
                        - pr            = primitive ID,
                        - sub_add_type_ = subaddress type,
                        - odd_even_ind_ = odd/even indicator,
                        - sub_add_      = address of the literal string.

            */

#define Isdn_at9_store_called_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
        Set_offset_at9  (pr,                called_sub_add);                        \
        Set_val_at9     (called_sub_add,    sub_add_type,   sub_add_type_);         \
        Set_val_at9     (called_sub_add,    odd_even_ind,   odd_even_ind_);         \
        Set_str_at9     (called_sub_add,    sub_add,        sub_add_, AT9_MX_SZ_CALLED_SUB_ADD+1)

#define Isdn_at9_store_called_sub_add_u(pr, odd_even_ind_, sub_add_, sz_) \
		Set_offset_at9  (pr,                called_sub_add);                        \
		Set_val_at9     (called_sub_add,    sub_add_type,   SUB_ADD_USER);         \
		Set_val_at9     (called_sub_add,    odd_even_ind,   odd_even_ind_);         \
		Set_mem_at9     (called_sub_add,    sub_add,        sub_add_, sz_)

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at9_store_calling_nb : store calling number IE

                    INPUT :
                        - pr                = primitive ID,
						- nb_type_     		= type of number,
						- plan_id_     		= numbering plan,
						- screen_ind_  		= screening indicators,
						- pres_  			= presentation,
						- nb_               = pointer on the calling number literal string.
			*/

#define Isdn_at9_store_calling_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)  \
		Set_offset_at9  (pr,            calling_nb);                                \
		Set_val_at9     (calling_nb,    nb_type,   	nb_type_);  \
		Set_val_at9     (calling_nb,    plan_id,	plan_id_);  \
		Set_val_at9     (calling_nb,    pres,		pres_);     \
		Set_val_at9     (calling_nb,    screen_ind,	screen_ind_);\
		Set_str_at9     (calling_nb,    nb,             nb_, AT9_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				  Isdn_at9_calling_sub_add : calling sub-address IE

						INPUT :
						- pr            = primitive ID,
						- sub_add_type_ = subaddress type,
						- odd_even_ind_ = odd/even indicator,
						- sub_add_      = address of the literal string.

			*/

#define Isdn_at9_store_calling_sub_add(pr, sub_add_type_, odd_even_ind_, sub_add_) \
		Set_offset_at9  (pr,                calling_sub_add);                       \
		Set_val_at9     (calling_sub_add,   sub_add_type,   sub_add_type_);         \
		Set_val_at9     (calling_sub_add,   odd_even_ind,   odd_even_ind_);         \
		Set_str_at9     (calling_sub_add,   sub_add,        sub_add_, AT9_MX_SZ_CALLING_SUB_ADD+1)

#define Isdn_at9_store_calling_sub_add_u(pr, odd_even_ind_, sub_add_, sz_) \
		Set_offset_at9  (pr,                calling_sub_add);                       \
		Set_val_at9     (calling_sub_add,   sub_add_type,   SUB_ADD_USER);         \
		Set_val_at9     (calling_sub_add,   odd_even_ind,   odd_even_ind_);         \
		Set_mem_at9     (calling_sub_add,   sub_add,        sub_add_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_at9_store_cause : cause IE

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- cause_loc_    = cause location,
                        - cause_class_  = cause class,
                        - cause_val_    = cause value,
                        - cause_diag_   = cause diagnostic.

            */

#define Isdn_at9_store_cause(pr, coding_std_, cause_loc_, cause_class_, cause_val_, cause_diag_) \
        Set_offset_at9  (pr,    cause);                                             \
        Set_val_at9     (cause, coding_std, coding_std_);                           \
        Set_val_at9     (cause, cause_loc,  cause_loc_);                            \
        Set_val_at9     (cause, cause_class,cause_class_);                          \
        Set_val_at9     (cause, cause_val,  cause_val_);                            \
        Set_str_at9     (cause, cause_diag, cause_diag_, AT9_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_at9_store_chan_id_BRI : store channel ID IE

					INPUT :
						- pr            = primitive ID,
						- pref_excl_    = preferred channel,
						- d_chan_		= D-channel indicator,
						- chan_sel_     = channel selection,
			*/

#define Isdn_at9_store_chan_id_BRI(pr, pref_excl_, d_chan_, chan_sel_)  \
		Set_offset_at9  (pr,        chan_id);                           \
		Set_val_nil_at9	(chan_id);										\
		Set_val_at9     (chan_id,   int_type,   INT_TYPE_BRI);          \
		Set_val_at9     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_at9     (chan_id,   d_chan,  	d_chan_);   	        \
		Set_val_at9     (chan_id,   chan_sel,   chan_sel_);             \
		Set_next_ie_at9 (chan_id)

		/*
				 Isdn_at9_store_chan_id_MAP_/NB_PRI : store channel ID IE

					INPUT :
						- pr            = primitive ID,
						- int_id_		= interface id,
						- pref_excl_    = preferred channel,
						- int_id_val_   = interface Id value,
						- p_chan_nb_    = channel number,
						-  chan_lgth_	= length of info.

		*/


#define Isdn_at9_store_chan_id_MAP_PRI(pr, int_id_, pref_excl_,int_id_val_,  p_chan_nb_, chan_lgth_) \
		Set_offset_at9  (pr,        chan_id);                           \
		Set_val_at9     (chan_id,   int_type,   INT_TYPE_PRI);          \
		Set_val_at9		(chan_id,	int_id,		int_id_);				\
		Set_val_at9     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_at9     (chan_id,   d_chan,  	NOT_D_CHAN);   	        \
		Set_val_at9     (chan_id,   chan_sel,   AS_INDICATED);          \
		Set_val_at9		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_at9		(chan_id,	nb_map,		CHAN_MAP);				\
		Set_mem_at9     (chan_id,   chan_nb,    p_chan_nb_,     chan_lgth_)

#define Isdn_at9_store_chan_id_NB_PRI(pr, int_id_, pref_excl_,int_id_val_,  p_chan_nb_) \
		Set_offset_at9  (pr,        chan_id);                           \
		Set_val_at9     (chan_id,   int_type,   INT_TYPE_PRI);          \
		Set_val_at9		(chan_id,	int_id,		int_id_);				\
		Set_val_at9     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_at9     (chan_id,   d_chan,  	NOT_D_CHAN);   	        \
		Set_val_at9     (chan_id,   chan_sel,   AS_INDICATED);          \
		Set_val_at9		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_at9		(chan_id,	nb_map,		CHAN_NUMBER);				\
		Set_str_at9     (chan_id,   chan_nb,    p_chan_nb_,     AT9_MX_SZ_CHAN_ID+2)

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2

			/*
				 Isdn_at9_store_endpoint_id : store endpoint identifier

                    INPUT :
						- pr        = primitive ID,
                        - us_id     = user id,
                        - t_id      = terminal id,
                        - interp_   = interpreter flag
            */

#define Isdn_at9_store_endpoint_id(pr, us_id, t_id, interp_)        \
				Set_offset_at9  (pr,            endpoint_id);           \
				Set_val_at9     (endpoint_id,   usid,       us_id);     \
				Set_val_at9     (endpoint_id,   tid,        t_id);      \
				Set_val_at9     (endpoint_id,   interp,     interp_);   \
				Set_next_ie_at9 (endpoint_id)

#endif

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at9_store_feature_act : store feature activation IE

                    INPUT :
                        - pr                = primitive ID,
                        - feature_id_       = feature identifier,
                        - feature_id_2_     = feature identifier (continuation).
            */

#define Isdn_at9_store_feature_act(pr, feature_id_, feature_id_2_)  \
        Set_offset_at9  (pr,            feature_act);                   \
        Set_val_at9     (feature_act,   feature_id,     feature_id_);   \
		Set_val_at9     (feature_act,   feature_id_2,   feature_id_2_); \
        Set_next_ie_at9 (feature_act)

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2

            /*
                Isdn_at9_store_feature_ind : store feature indication IE

					INPUT :
                        - pr                = primitive ID,
                        - feature_id_       = feature identifier,
                        - feature_id_2_     = feature identifier (continuation)
                        - status_ind_       = status indicator.
            */

#define Isdn_at9_store_feature_ind(pr, feature_id_, feature_id_2_, status_ind_) \
        Set_offset_at9  (pr,            feature_ind);                               \
        Set_val_at9     (feature_ind,   feature_id,     feature_id_);               \
        Set_val_at9     (feature_ind,   feature_id_2,   feature_id_2_);             \
        Set_val_at9     (feature_ind,   status_ind,     status_ind_);               \
        Set_next_ie_at9 (feature_ind)

#endif

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at9_store_hlc : high layer compatibility for
                                        non-CCITT coding standard

                    INPUT :
                        - pr        = primitive ID,
                        - std       = coding standard,
                        - tele    = teleservice,
                        - ext_tele  = extended teleservice.
            */

#define Isdn_at9_store_hlc(pr, std, tele, ext_tele)         \
        Set_offset_at9  (pr,    hlc);                           \
        Set_val_at9     (hlc,   coding_std,         std);       \
        Set_val_at9     (hlc,   teleservice,        tele);      \
        Set_val_at9     (hlc,   ext_teleservice,    ext_tele);  \
        Set_next_ie_at9 (hlc)

            /*
                Isdn_at9_store_hlc_CCITT : high layer compatibility for
                                        CCITT coding standard

                    INPUT :
                        - pr        = primitive ID,
                        - tele    = teleservice,
                        - ext_tele  = extended teleservice.
			*/

#define Isdn_at9_store_hlc_CCITT(pr, tele, ext_tele)        \
        Isdn_at9_store_hlc  (pr, CODING_STD_CCITT, tele, ext_tele)

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2

            /*
                Isdn_at9_store_information_rq : information_rq IE

                    INPUT :
                        - pr            = primitive ID,
                        - info_type_    = information type
                        - info_ind_     = information indicator

            */

#define Isdn_at9_store_information_rq(pr, info_type_, info_ind_)    \
        Set_offset_at9  (pr,                information_rq);            \
        Set_val_at9     (information_rq,    info_type,  info_type_);    \
        Set_val_at9     (information_rq,    info_ind,   info_ind);      \
        Set_next_ie_at9 (information_rq)

#endif

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at9_store_keypad : keypad IE

                    INPUT :
                        - pr     = primitive ID,
                        - p_text = address of the literal string.

			*/

#define Isdn_at9_store_keypad(pr,p_text)                            \
        Set_offset_at9  (pr,        keypad);                            \
        Set_str_at9     (keypad,    text,   p_text, AT9_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

            /*
				Isdn_at9_store_llc : low layer compatibility

                First definition : in one part :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
						- trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
                        - trf_rate_     = information transfer rate,
                        - structure_    = structure,
                        - dest_rate_    = destination rate,
                        - protocol_id_1_= user information layer 1 protocol,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
						- nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
                        - fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
                        - hdr_          = rate adaption header included or not,
                        - multi_frame_  = multiple frame establishement support in DL,
                        - op_mode_      = mode of operation,
                        - lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - option_2_     = optional layer 2 protocol information,
                        - protocol_id_3_= user information layer 3 protocol,
						- option_3_     = optional layer 3 protocol information.
            */

#define Isdn_at9_store_llc(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, protocol_id_1_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
        Set_offset_at9  (pr,    llc);                                       \
        Set_val_at9     (llc,   coding_std,     coding_std_);               \
        Set_val_at9     (llc,   trf_cap,        trf_cap_);                  \
        Set_val_at9     (llc,   out_band_neg,   out_neg);                   \
        Set_val_at9     (llc,   trf_mode,       trf_mode_);                 \
		Set_val_at9     (llc,   trf_rate,       trf_rate_);                 \
		Set_val_at9     (llc,   structure,      structure_);                \
        Set_val_at9     (llc,   dest_rate,      dest_rate_);                \
        Set_val_at9     (llc,   protocol_id_1,  protocol_id_1_);            \
        Set_val_at9     (llc,   syn_asyn,       syn_asyn_);                 \
        Set_val_at9     (llc,   negotiation,    negotiation_);              \
        Set_val_at9     (llc,   user_rate,      user_rate_);                \
		Set_val_at9     (llc,   inter_rate,     inter_rate_);               \
        Set_val_at9     (llc,   nic_tx,         nic_tx_);                   \
        Set_val_at9     (llc,   nic_rx,         nic_rx_);                   \
        Set_val_at9     (llc,   fc_tx,          fc_tx_);                    \
        Set_val_at9     (llc,   fc_rx,          fc_rx_);                    \
        Set_val_at9     (llc,   hdr,            hdr_);                      \
        Set_val_at9     (llc,   multi_frame,    multi_frame_);              \
        Set_val_at9     (llc,   op_mode,        op_mode_);                  \
        Set_val_at9     (llc,   lli_negot,      lli_negot_);                \
        Set_val_at9     (llc,   assign,         assign_);                   \
        Set_val_at9     (llc,   band_negot,     band_negot_);               \
		Set_val_at9     (llc,   stop_bit,       stop_bit_);                 \
        Set_val_at9     (llc,   data_bit,       data_bit_);                 \
        Set_val_at9     (llc,   parity,         parity_);                   \
        Set_val_at9     (llc,   duplex,         duplex_);                   \
        Set_val_at9     (llc,   modem,          modem_);                    \
        Set_val_at9     (llc,   protocol_id_2,  protocol_id_2_);            \
        Set_val_at9     (llc,   option_2,       option_2_);                 \
        Set_val_at9     (llc,   protocol_id_3,  protocol_id_3_);            \
        Set_val_at9     (llc,   option_3,       option_3_);                 \
        Set_next_ie_at9 (llc)

            /*--------------------------------------------*/

            /*
                Isdn_at9_store_llc : low layer compatibility

                Second definition : DIVIDED IN 2 PARTS for compilers which
                do not accept so many parameters in macros :

                    Isdn_at9_store_llc_1_4 : octet 1 to octet 4 included,

                        INPUT :
                            - pr            = primitive ID,
                            - coding_std_   = coding standard,
                            - trf_cap_      = information transfer capability,
                            - out_neg       = out band negotiation,
                            - trf_mode_     = transfer mode,
							- trf_rate_     = information transfer rate,
							- structure_    = structure,
                            - dest_rate_    = destination rate,

                    Isdn_at9_store_llc_5_7 : octet 5 to octet 7 included,

                        - protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
                        - fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
                        - hdr_          = rate adaption header included or not,
                        - multi_frame_  = multiple frame establishement support in DL,
                        - op_mode_      = mode of operation,
						- lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - option_2_     = optional layer 2 protocol information,
                        - protocol_id_3_= user information layer 3 protocol,
                        - option_3_     = optional layer 3 protocol information.
            */

#define Isdn_at9_store_llc_1_4(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_)\
        Set_offset_at9  (pr,    llc);                                       \
        Set_val_at9     (llc,   coding_std,     coding_std_);               \
        Set_val_at9     (llc,   trf_cap,        trf_cap_);                  \
		Set_val_at9     (llc,   out_band_neg,   out_neg);                   \
        Set_val_at9     (llc,   trf_mode,       trf_mode_);                 \
        Set_val_at9     (llc,   trf_rate,       trf_rate_);                 \
        Set_val_at9     (llc,   structure,      structure_);                \
        Set_val_at9     (llc,   dest_rate,      dest_rate_)

#define Isdn_at9_store_llc_5_7(protocol_id_1_,  syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
        Set_val_at9     (llc,   protocol_id_1,  protocol_id_1_);            \
        Set_val_at9     (llc,   syn_asyn,       syn_asyn_);                 \
		Set_val_at9     (llc,   negotiation,    negotiation_);              \
		Set_val_at9     (llc,   user_rate,      user_rate_);                \
        Set_val_at9     (llc,   inter_rate,     inter_rate_);               \
        Set_val_at9     (llc,   nic_tx,         nic_tx_);                   \
        Set_val_at9     (llc,   nic_rx,         nic_rx_);                   \
        Set_val_at9     (llc,   fc_tx,          fc_tx_);                    \
        Set_val_at9     (llc,   fc_rx,          fc_rx_);                    \
		Set_val_at9     (llc,   hdr,            hdr_);                      \
        Set_val_at9     (llc,   multi_frame,    multi_frame_);              \
        Set_val_at9     (llc,   op_mode,        op_mode_);                  \
        Set_val_at9     (llc,   lli_negot,      lli_negot_);                \
        Set_val_at9     (llc,   assign,         assign_);                   \
        Set_val_at9     (llc,   band_negot,     band_negot_);               \
        Set_val_at9     (llc,   stop_bit,       stop_bit_);                 \
        Set_val_at9     (llc,   data_bit,       data_bit_);                 \
        Set_val_at9     (llc,   parity,         parity_);                   \
        Set_val_at9     (llc,   duplex,         duplex_);                   \
        Set_val_at9     (llc,   modem,          modem_);                    \
		Set_val_at9     (llc,   protocol_id_2,  protocol_id_2_);            \
        Set_val_at9     (llc,   option_2,       option_2_);                 \
        Set_val_at9     (llc,   protocol_id_3,  protocol_id_3_);            \
        Set_val_at9     (llc,   option_3,       option_3_);                 \
        Set_next_ie_at9 (llc)

            /*--------------------------------------------*/

            /*
                Isdn_at9_store_llc_V110 : low layer compatibility for
                                            V110 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
                        - structure_    = structure,
                        - dest_rate_    = destination rate,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
						- fc_tx_        = flow control on Transmission (Tx),
						- fc_rx_        = flow control on Reception (Rx),
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_at9_store_llc_V110(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
        Isdn_at9_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
                            out_neg,        trf_mode_,      trf_rate_,          \
                            structure_,     dest_rate_);                        \
        Isdn_at9_store_llc_5_7(PROTOCOL_ID_1_V110,  syn_asyn_,  negotiation_,   \
                            user_rate_,     inter_rate_,    nic_tx_,            \
							nic_rx_,        fc_tx_,         fc_rx_,             \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            stop_bit_,      data_bit_,      parity_,            \
                            duplex_,        modem_,         protocol_id_2_,     \
                            BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

            /*--------------------------------------------*/
			/*
				Isdn_at9_store_llc_X31 : low layer compatibility for
											X31 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
                        - structure_    = structure,
                        - dest_rate_    = destination rate,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
						- fc_tx_        = flow control on Transmission (Tx),
						- fc_rx_        = flow control on Reception (Rx),
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_at9_store_llc_X31(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
        Isdn_at9_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
                            out_neg,        trf_mode_,      trf_rate_,          \
                            structure_,     dest_rate_);                        \
		Isdn_at9_store_llc_5_7(PROTOCOL_ID_1_X31,  syn_asyn_,  negotiation_,   \
                            user_rate_,     inter_rate_,    nic_tx_,            \
							nic_rx_,        fc_tx_,         fc_rx_,             \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            stop_bit_,      data_bit_,      parity_,            \
                            duplex_,        modem_,         protocol_id_2_,     \
                            BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

            /*--------------------------------------------*/

            /*
                Isdn_at9_store_llc_V120 : low layer compatibility for
                                            V120 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
						- trf_mode_     = transfer mode,
                        - trf_rate_     = information transfer rate,
                        - structure_    = structure,
                        - dest_rate_    = destination rate,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - hdr_          = rate adaption header included or not,
                        - multi_frame_  = multiple frame establishement support in DL,
						- op_mode_      = mode of operation,
						- lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
						- duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_at9_store_llc_V120(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
        Isdn_at9_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
                            out_neg,        trf_mode_,      trf_rate_,          \
                            structure_,     dest_rate_);                        \
		Isdn_at9_store_llc_5_7(PROTOCOL_ID_1_V120,                              \
                            syn_asyn_,      negotiation_,   user_rate_,         \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   hdr_,               \
                            multi_frame_,   op_mode_,       lli_negot_,         \
                            assign_,        band_negot_,    stop_bit_,          \
                            data_bit_,      parity_,        duplex_,            \
                            modem_,         protocol_id_2_, BYTE_VAL_NIL,       \
							protocol_id_3_,  BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2

            /*
                Isdn_at9_store_notif_ind : notification indicator

                    INPUT :
						- pr    = primitive ID,
                        - descr = description.

            */

#   define Isdn_at9_store_notif_ind(pr, descr)          \
        Set_offset_at9  (pr,        notif_ind);             \
        Set_val_at9     (notif_ind, notif_descr,    descr); \
        Set_next_ie_at9 (notif_ind)

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at9_store_progress_ind : progress indicator

                    INPUT :
						- pr                = primitive ID,
                        - coding_std_       = coding standard,
                        - progress_loc_     = general location,
                        - progress_descr_   = description.

            */

#   define Isdn_at9_store_progress_ind(pr, coding_std_, progress_loc_, progress_descr_)\
        Set_offset_at9  (pr,            progress_ind);                      \
        Set_val_at9     (progress_ind,  coding_std,     coding_std_);       \
        Set_val_at9     (progress_ind,  progress_loc,   progress_loc_);     \
		Set_val_at9     (progress_ind,  progress_descr, progress_descr_);   \
        Set_next_ie_at9 (progress_ind)

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at9_store_signal : signal message

                    INPUT :
                        - pr            = primitive ID,
                        - signal_val    = signal value.

            */

#define Isdn_at9_store_signal(pr, signal_val_)              \
        Set_offset_at9  (pr,        signal);                    \
        Set_val_at9     (signal,    signal_val, signal_val_);   \
        Set_next_ie_at9 (signal)

#endif

/*-------------------------------------------------------------------------*/
			/*

				Isdn_at9_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_at9_store_restart_ind(pr, class_)									\
		Set_offset_at9	(pr,			restart_ind);							\
		Set_val_at9		(restart_ind,	restart_class,	class_);				\
		Set_next_ie_at9	(restart_ind)

/*-------------------------------------------------------------------------*/

            /*
                Isdn_at9_store_transit_net_sel : transit network selection

                    INPUT :
						- pr            = primitive ID,
						- net_id_type_  = network identification type,
                        - net_id_plan_  = network identificationplan,
                        - net_id_       = address of network identification.
            */

#define Isdn_at9_store_transit_net_sel(pr, net_id_type_, net_id_plan_, net_id_) \
		Set_offset_at9  (pr,                transit_net_sel);                       \
        Set_val_at9     (transit_net_sel,   net_id_type,    net_id_type_);          \
        Set_val_at9     (transit_net_sel,   net_id_plan,    net_id_plan_);          \
        Set_str_at9     (transit_net_sel,   net_id,         net_id_,    AT9_MX_SZ_TRANSIT_NET_SEL+1)

/*-------------------------------------------------------------------------*/

            /*
				Isdn_at9_store_os_accss : Operator system access (OS_ACCSS)

                    INPUT :
						- pr            = primitive ID,
                        - accss_type_   = type of access
            */

#define Isdn_at9_store_os_accss(pr, access_type_)               \
        Set_offset_at9  (pr,        os_accss);                      \
        Set_val_at9     (os_accss,  access_type,    access_type_);  \
        Set_next_ie_at9 (os_accss)

/*-------------------------------------------------------------------------*/

#if EQUIPMENT == NT2

            /*
				Isdn_at9_store_display : display (DISPLAY_TXT)

                    INPUT :
                        - pr     = primitive ID,
                        - p_text = address of the literal string.

            */

#define Isdn_at9_store_display(pr,  p_text)                     \
		Set_offset_at9  (pr,        display);                       \
		Set_str_at9     (display,   text,   p_text, AT9_MX_SZ_DISPLAY+1)

#endif

/*-------------------------------------------------------------------------*/

            /*
				Isdn_at9_store_call_appear : Call appearance (CALL_APPEAR)

                    INPUT :
						- pr                = primitive ID,
						- call_appear_id_   = call appearance identifier
						- call_appear_id_2_ = call appearance identifier (cont.)
            */

#define Isdn_at9_store_call_appear(pr, call_appear_id_, call_appear_id_2_)  \
		Set_offset_at9  (pr,            call_appear);                           \
		Set_val_at9     (call_appear,   call_appear_id,     call_appear_id_);   \
        Set_val_at9     (call_appear,   call_appear_id_2,   call_appear_id_2_); \
        Set_next_ie_at9 (call_appear)


/*-------------------------------------------------------------------------*/
/*						Q931 (TRANSPARENT) IE ENCODING							   */
/*-------------------------------------------------------------------------*/


#if NS_IE_TSP_OUT == ON

#	define	Isdn_at9_store_bc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, bc);						\
		Set_mem_eob_at9	(bc, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_BC_TSP) ? 1 + AT9_MX_SZ_BC_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(bc)

#	define	Isdn_at9_store_call_appear_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, call_appear);						\
		Set_mem_eob_at9	(call_appear, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_CALL_APPEAR_TSP) ? 1 + AT9_MX_SZ_CALL_APPEAR_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(call_appear)

#	define	Isdn_at9_store_called_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, called_nb);						\
		Set_mem_eob_at9	(called_nb, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_CALLED_NB_TSP) ? 1 + AT9_MX_SZ_CALLED_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(called_nb)

#	define	Isdn_at9_store_calling_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, calling_nb);						\
		Set_mem_eob_at9	(calling_nb, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_CALLING_NB_TSP) ? 1 + AT9_MX_SZ_CALLING_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(calling_nb)

#	define	Isdn_at9_store_called_sub_add_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, called_sub_add);						\
		Set_mem_eob_at9	(called_sub_add, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_CALLED_SUB_ADD_TSP) ? 1 + AT9_MX_SZ_CALLED_SUB_ADD_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(called_sub_add)

#	define	Isdn_at9_store_calling_sub_add_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, calling_sub_add);						\
		Set_mem_eob_at9	(calling_sub_add, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_CALLING_SUB_ADD_TSP) ? 1 + AT9_MX_SZ_CALLING_SUB_ADD_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(calling_sub_add)

#	define	Isdn_at9_store_cause_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, cause);						\
		Set_mem_eob_at9	(cause, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_CAUSE_TSP) ? 1 + AT9_MX_SZ_CAUSE_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(cause)

#	define	Isdn_at9_store_chan_id_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, chan_id);						\
		Set_mem_eob_at9	(chan_id, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_CHAN_ID_TSP) ? 1 + AT9_MX_SZ_CHAN_ID_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(chan_id)

#	define	Isdn_at9_store_display_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, display);						\
		Set_mem_eob_at9	(display, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_DISPLAY_TSP) ? 1 + AT9_MX_SZ_DISPLAY_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(display)

#	define	Isdn_at9_store_endpoint_id_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, endpoint_id);						\
		Set_mem_eob_at9	(endpoint_id, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_ENDPOINT_ID_TSP) ? 1 + AT9_MX_SZ_ENDPOINT_ID_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(endpoint_id)

#	define	Isdn_at9_store_feature_act_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, feature_act);						\
		Set_mem_eob_at9	(feature_act, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_FEATURE_ACT_TSP) ? 1 + AT9_MX_SZ_FEATURE_ACT_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(feature_act)

#	define	Isdn_at9_store_feature_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, feature_ind);						\
		Set_mem_eob_at9	(feature_ind, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_FEATURE_IND_TSP) ? 1 + AT9_MX_SZ_FEATURE_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(feature_ind)

#	define	Isdn_at9_store_hlc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, hlc);						\
		Set_mem_eob_at9	(hlc, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_HLC_TSP) ? 1 + AT9_MX_SZ_HLC_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(hlc)

#	define	Isdn_at9_store_information_rq_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, information_rq);						\
		Set_mem_eob_at9	(information_rq, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_INFORMATION_RQ_TSP) ? 1 + AT9_MX_SZ_INFORMATION_RQ_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(information_rq)

#	define	Isdn_at9_store_keypad_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, keypad);						\
		Set_mem_eob_at9	(keypad, tsp_data, p_data_,(p_data_[0] > AT9_MX_SZ_KEYPAD_TSP) ? 1 + AT9_MX_SZ_KEYPAD_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(keypad)

#	define	Isdn_at9_store_llc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, llc);						\
		Set_mem_eob_at9	(llc, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_LLC_TSP) ? 1 + AT9_MX_SZ_LLC_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(llc)

#	define	Isdn_at9_store_notif_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, notif_ind);						\
		Set_mem_eob_at9	(notif_ind, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_NOTIF_IND_TSP) ? 1 + AT9_MX_SZ_NOTIF_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(notif_ind)

#	define	Isdn_at9_store_os_accss_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, os_accss);						\
		Set_mem_eob_at9	(os_accss, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_OS_ACCSS_TSP) ? 1 + AT9_MX_SZ_OS_ACCSS_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(os_accss)

#	define	Isdn_at9_store_progress_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, progress_ind);						\
		Set_mem_eob_at9	(progress_ind, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_PROGRESS_IND_TSP) ? 1 + AT9_MX_SZ_PROGRESS_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(progress_ind)

#	define	Isdn_at9_store_redir_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, redir_nb);						\
		Set_mem_eob_at9	(redir_nb, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_REDIR_NB_TSP) ? 1 + AT9_MX_SZ_REDIR_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(redir_nb)

#	define	Isdn_at9_store_redirection_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, redirection_nb);						\
		Set_mem_eob_at9	(redirection_nb, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_REDIRECTION_NB_TSP) ? 1 + AT9_MX_SZ_REDIRECTION_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(redirection_nb)

#	define	Isdn_at9_store_restart_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, restart_ind);						\
		Set_mem_eob_at9	(restart_ind, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_RESTART_IND_TSP) ? 1 + AT9_MX_SZ_RESTART_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(restart_ind)

#	define	Isdn_at9_store_signal_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, signal);						\
		Set_mem_eob_at9	(signal, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_SIGNAL_TSP) ? 1 + AT9_MX_SZ_SIGNAL_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(signal)

#	define	Isdn_at9_store_transit_net_sel_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_at9	(pr, transit_net_sel);						\
		Set_mem_eob_at9	(transit_net_sel, tsp_data,p_data_, (p_data_[0] > AT9_MX_SZ_TRANSIT_NET_SEL_TSP) ? 1 + AT9_MX_SZ_TRANSIT_NET_SEL_TSP : 1 + p_data_[0]);\
		Set_next_ie_at9	(transit_net_sel)

#endif

/*EOF*/
