
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ie.at9
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	at9_bc_spdu					(Void_parm);
	uchar	at9_octet_5					(Void_parm);
	uchar	at9_access_type_spdu		(Void_parm);

#	if 0
		uchar	at9_check_length		(Void_parm);
#	endif

	uchar	at9_calling_nb_spdu			(Void_parm);
	uchar	at9_cause_spdu				(Void_parm);
	uchar	at9_cause_31_spdu			(Void_parm);
	uchar	at9_chk_change_status		(Void_parm);
	uchar	at9_chan_id_check			(Void_parm);
	uchar	at9_llc_4ab_spdu			(Void_parm);
	uchar	at9_llc_4b_spdu				(Void_parm);
	uchar	at9_llc_5_spdu				(Void_parm);
	uchar	at9_llc_6_spdu				(Void_parm);
	uchar	at9_llc_7_spdu				(Void_parm);
	uchar	at9_progress_ind_check		(Void_parm);
	uchar	at9_redir_spdu				(Void_parm);
	uchar	at9_restart_spdu			(Void_parm);
	uchar	at9_call_appear_ext			(Void_parm);

#endif

			/* ---------- Bearer capability (BC) */

D_START	(AT9_BC_P)
	D_VAL					(CODING_STD)
	D_TABL					(TRF_CAP)
	D_EXT_1					(_3)
	D_TABL					(TRF_MODE)

	D_IF_VAL				(_MODE_CIRCUIT)
		D_TABX				(TRF_RATE_)
		D_EXT_1				(_4)
		D_OPTIONAL_OCTET	(_5_5A)

		D_IF_VAL			(_TRF_RATE_MULTI_RATE)
			D_TABL 			(_T_MULTIPLIER)
			D_EXT_1			(_MULTI)
		D_END_IF			(_N_64)

		D_FUNCTION			(_5_PRES)

		D_IF_VAL			(_5_PRESENT)
			D_VAL			(_LAYER_1)
			D_TABL			(_PROTO_1)

			D_IF_VAL 		(_RATE_ADAPT)
				D_EXT_0_1	(_5A)
				D_VAL		(TRF_RATE_56)
				D_VAL		(NO_NEGOT)
				D_VAL		(_SYNC_)
			D_END_IF		(_RATE_ADAPT_)

			D_EXT_1			(_5A_B)
		D_END_IF			(_5_)


	D_ELSE					(_MODE_PACKET)
		D_VAL				(TRF_RATE_PCKT)
		D_EXT_1				(_4_)
		D_VAL				(_LAYER_2)
		D_TABL				(_PROTO_2)
		D_EXT_1				(_6)
		D_VAL				(_LAYER_3)
		D_VAL				(_PROTO_3)
		D_EXT_1				(_7)
	D_END_IF				(_MODE_)

D_END	(BC_E)

START	(AT9_BC_P)
	VAL					(5,2,CODING_STD_CCITT,			&i_bc[0].coding_std)
	TABL				(0,5,AT9_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
	EXT_1				()
	TABL				(5,2,AT9_T_TRF_MODE,			&i_bc[0].trf_mode)

	IF_VAL				(I_IF, &i_bc[0].trf_mode, EQ, TRF_MODE_CIRCUIT)
		TABX			(0,5,AT9_TX_TRF_RATE,			&i_bc[0].trf_mode,		&i_bc[0].trf_rate)
		EXT_1			()
		OPTIONAL_OCTET	()

		IF_VAL			(I_IF, &i_bc[0].trf_rate, EQ, TRF_RATE_MULTI_RATE)
			TABL 		(0,7, AT9_T_MULTIPLIER, 		&i_bc[0].Multiplier)
			EXT_1		()
		END_IF			()

		FUNCTION		(at9_octet_5)

		IF_VAL			(N_IF, &ie_if_flag, EQ, ON)
			VAL			(5,2,LAYER_ID_1,			&i_bc[0].layer_id_1)
			TABL		(0,5,AT9_T_BC_PROTOCOL_ID_1,&i_bc[0].protocol_id_1)

			IF_VAL 		(I_IF, &i_bc[0].protocol_id_1, NE, PROTOCOL_ID_1_G711_u)
				EXT_0_1	()
				VAL		(0,5,RA_56KBS,				&i_bc[0].user_rate)
				VAL		(5,1,NEGOTIATION_NOT_IN_BAND,&i_bc[0].negotiation)
				VAL		(6,1,SYN,					&i_bc[0].syn_asyn)
			END_IF		()
			EXT_1		()
		END_IF			()

	ELSE				()
		VAL				(0,5,TRF_RATE_PACKET_MODE,	&i_bc[0].trf_rate)
		EXT_1			()
		VAL				(5,2,LAYER_ID_2,			&i_bc[0].layer_id_2)
		TABL			(0,5,AT9_T_BC_PROTOCOL_ID_2,&i_bc[0].protocol_id_2)
		EXT_1			()
		VAL				(5,2,LAYER_ID_3,			&i_bc[0].layer_id_3)
		VAL				(0,5,PROTOCOL_ID_3_X25_PL,	&i_bc[0].protocol_id_3)
		EXT_1			()
	END_IF				()

END		(at9_bc_spdu)

			/* ---------- Call state (CALL_STATE) */

D_START	(AT9_CALL_STATE_P)
	D_TABL		(VAL_)
	D_PAD		(P3)
	D_END_OCTET (_3)
D_END			(CALL_STATE_E)

START	(AT9_CALL_STATE_P)
	TABL		(0,6,AT9_T_CALL_STATE,	&i_call_state[0].val)
	PAD			(6,2)
	END_OCTET	()
END				(0)

			/* ---------- Called party number (CALLED_NB) */

D_START	(AT9_CALLED_NB_P)

	D_TABL  		(PLAN_)
	D_FUNCTION		(_CALLED_NB)

	D_IF_VAL		(_BRI)
		D_TABX  	(_TYPE)
		D_EXT_1 	(_3)

		D_IF_VAL	(_PLAN_UNKNOWN)
			D_TEXT	(IA5_DIGIT_E_)
		D_ELSE		(_ELSE)
			D_TEXT	(_IA5_DIGIT_)
		D_END_IF	(_PLAN)

	D_ELSE			(OTHER_CODEPOINT)
		D_TABL  	(_TYPE_)
		D_EXT_1 	(_3_)
		D_TEXT		(IA5_DIGIT_EXT_)
	D_END_IF		(TYPE_PLAN)

D_END	(CALLED_NB_E)

START	(AT9_CALLED_NB_P)

	TABL			(0,4,AT9_T_CALLED_NB_PLAN,  &i_called_nb[0].plan_id)
	FUNCTION		(at9_access_type_spdu)

	IF_VAL			(N_IF, &ie_if_flag, EQ, ON)

			/* BRI access */

		TABX		(4,3,AT9_TX_CALLED_NB_TYPE,	&i_called_nb[0].plan_id,  &i_called_nb[0].nb_type)
		EXT_1		()

		IF_VAL		(I_IF, &i_called_nb[0].plan_id, EQ, PLAN_UNKNOWN)
			TEXT	(IA5, DIGIT_E,	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
		ELSE		()
			TEXT	(IA5, DIGIT,	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
		END_IF		()

	ELSE			()

			/* PRI access */

		TABL		(4,3,AT9_T_NB_TYPE, &i_called_nb[0].nb_type)
		EXT_1		()
		TEXT		(IA5, DIGIT_E, 	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)
	END_IF			()

END	(0)

#if 0

	/*	ISDN Number shall have at least 7 digits :
		It is a Bellcore requirement but it is not
		implemented in many US PABX */

END	(at9_check_length)

#endif	/* end of #if 0 */

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(AT9_CALLED_SUB_ADD_P)
	D_TABL  		(TYPE)
	D_TABL  		(IND)
	D_PAD			(NS_PAD_3)
	D_EXT_1 		(_3)

	D_IF_VAL		(OSI_SUB_ADD)
		D_VAL		(INFO_SUB_ADD_F)
		D_END_OCTET	(INFO_SUB_ADD_5)
		D_TEXT  	(INFO_OSI)
	D_ELSE			(NOT_OSI)
		D_TEXT  	(INFO_NOT_OSI)
	D_END_IF		(TYPE_SUB_ADD)

D_END		(CALLED_SUB_ADD_Q)

START(AT9_CALLED_SUB_ADD_P)
	TABL		(4,3,AT9_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
	TABL		(3,1,AT9_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
	PAD			(0,3)
	EXT_1		()
	IF_VAL  	(I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		VAL		(0,8,		FORMAT_IA5,		&i_called_sub_add[0].format)
		END_OCTET()
		TEXT	(IA5,	 	ANY_CHAR, 		&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
	ELSE		()
		TEXT	(BINARY, 	ANY_OCTET,		&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
	END_IF		()
END	(0)

			/* ---------- Calling party number (CALLING_NB) */

D_START	(AT9_CALLING_NB_P)
		D_TABL		(PLAN)
		D_FUNCTION	(ACCSS_TYPE)

		D_IF_VAL	(_BRI)
			D_TABX	(TYPE)
		D_ELSE		(_PRI)
			D_TABL	(TYPE_)
		D_END_IF	(_ACCSS)

		D_FUNCTION	(CALLING_NB_FCT)
		D_IF_VAL(DEFAULT_VAL)
			D_EXT_0_1	(_3)
			D_TABL		(PRESENTATION)
			D_PAD		(NS_PAD_3A)
			D_TABX		(SCREEN_IND)
		D_END_IF(DEF_VAL)

		D_EXT_1		(_3A)
		D_OPTIONAL_OCTET (CALLING_NB_OPTIONAL)

		D_IF_VAL	(_BRI_TY)
			D_TEXT	(DIGIT_)
		D_ELSE		(_PRI_TY)
			D_TEXT	(DIGIT_E_)
		D_END_IF	(_ACCSS_TY)

D_END   (CALLING_NB_E)

START	(AT9_CALLING_NB_P)
		TABL		(0,4,AT9_T_CALLING_NB_PLAN,  	&i_calling_nb[0].plan_id)
		FUNCTION	(at9_access_type_spdu)

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)

				/* BRI access */

			TABX	(4,3,AT9_TX_CALLING_NB_TYPE,	&i_calling_nb[0].plan_id,	&i_calling_nb[0].nb_type)
		ELSE		()

				/* PRI access */

			TABL	(4,3,AT9_T_NB_TYPE,				&i_calling_nb[0].nb_type)
		END_IF		()


		FUNCTION(at9_calling_nb_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			TABL	(5,2,AT9_T_CALLING_NB_PRES, &i_calling_nb[0].pres)
			PAD		(2,3)
			TABX	(0,2,AT9_TX_CALLING_SCREEN,	&i_calling_nb[0].pres,	&i_calling_nb[0].screen_ind)
		END_IF	()

		EXT_1   	()
		OPTIONAL_OCTET ()

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			TEXT	(IA5,DIGIT, 	&i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
		ELSE		()
			TEXT	(IA5,DIGIT_E, 	&i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
		END_IF		()
END		(0)

			/* ---------- Calling subaddress (CALLING_SUB_ADD) */

D_START	(AT9_CALLING_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD	(NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END	(CALLING_SUB_ADD_E)

START	(AT9_CALLING_SUB_ADD_P)
		TABL	(4,3,AT9_T_SUB_ADD_TYPE,	&i_calling_sub_add[0].sub_add_type)
		TABL	(3,1,AT9_T_SUB_ADD_IND,		&i_calling_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1	()

		IF_VAL  	(I_IF, &i_calling_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,		FORMAT_IA5,		&i_calling_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 	ANY_CHAR, 		&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		ELSE		()
			TEXT	(BINARY, 	ANY_OCTET,		&i_calling_sub_add[0].lgth, (uchar **)&i_calling_sub_add[0].p_add)
		END_IF		()
END		(0)


			/* ---------- Cause (CAUSE) */

D_START	(AT9_CAUSE_P)
		D_TABL		(CODING_STD)
		D_PAD		(NS_PAD_3)
		D_TABL		(LOCATION)
		D_EXT_1		(_3A)

		D_IF_VAL	(CODING_STD_IS_CCITT)
			D_FUNCTION (CAUSE_31)
			D_TABL	(C_CLASS_CCITT)
			D_TABX	(C_V_CCITT)
		D_ELSE		(CODING_SPF)
			D_TABL	(C_CLASS_SPF)
			D_TABX	(C_V_SPF)
		D_END_IF	(X_C_V)

		D_EXT_1	 (_4)
D_END	(CAUSE_E_A)

START	(AT9_CAUSE_P)
		TABL	(5,2,AT9_T_CAUSE_CODING_STD,		&i_cause[0].coding_std)
		PAD		(4,1)
		TABL	(0,4,AT9_T_LOCATION,				&i_cause[0].cause_loc)
		EXT_1	()

		IF_VAL	(I_IF, &i_cause[0].coding_std, EQ, CODING_STD_CCITT)
			FUNCTION (at9_cause_31_spdu)
			TABL(4,3,AT9_T_C_C,				&i_cause[0].cause_class)
			TABX(0,4,AT9_TX_C_V_CCITT,		&i_cause[0].cause_class,  &i_cause[0].cause_val)
		ELSE	()
			TABL(4,3,AT9_T_C_C_SPF,			&i_cause[0].cause_class)
			TABX(0,4,AT9_TX_C_V_SPF,		&i_cause[0].cause_class,  &i_cause[0].cause_val)
		END_IF	()

		EXT_1	()
END	 (at9_cause_spdu)

D_START	(AT9_DIAG_P)
	D_TEXT	(OCTET)
D_END		(DIAGNOSTIC_E)

START	(AT9_DIAG_P)
	TEXT	(BINARY, ANY_OCTET,		&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END			(0)

			/* ---------- Change status (CHANGE STATUS) */

D_START (AT9_CHANGE_STATUS_P)
	D_ANY_VAL 	(PREF)
	D_PAD		(_3)
	D_TABL		(CHAN_STAT)
	D_EXT_1	(_3_)
D_END	(AT9_CHANGE_STATUS_E)

START (AT9_CHANGE_STATUS_P)
	ANY_VAL	(6,1,    			&i_change_status[0].preference)
	PAD		(3,3)
	TABL	(0,3,AT9_T_STATUS,	&i_change_status[0].status)
	EXT_1	()
END (at9_chk_change_status)

			/* ---------- Channel idendification (CHAN_ID) */

D_START	(AT9_CHAN_ID_P)
	D_TABL			(INT_ID)
	D_TABL  		(INT_TYPE)
	D_PAD			(NS_PAD_3)
	D_TABL  		(PREF_EXCL)
	D_VAL			(D_CHAN_)
	D_TABX  		(SEL)
	D_EXT_1 		(_3)

	D_IF_VAL		(IF_INT)
		D_TABL 		(_INT_)
		D_EXT_1		(_3_1)
	D_END_IF		(INT_)

D_END	(CHAN_ID_E)

START	(AT9_CHAN_ID_P)
	TABL			(6,1,AT9_T_CHAN_INT,		&i_chan_id[0].int_id)
	TABL			(5,1,AT9_T_INT_TYPE,		&i_chan_id[0].int_type)
	PAD				(4,1)
	TABL			(3,1,AT9_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL			(2,1,AT9_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABX			(0,2,AT9_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	EXT_1   		()

	IF_VAL			(I_IF, &i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		TABL		(0,7,AT9_T_CHAN_INT_VAL,	&i_chan_id[0].int_id_val)
		EXT_1		()
	END_IF			()

END		(at9_chan_id_check)

	/*-----*/

	/* PRI-type chan_id */

D_START	(AT9_CHAN_ID_PRI_P)
		D_VAL		(CODING)
		D_TABL  	(NB_MAP)
		D_VAL		(TYPE)
		D_EXT_1 	(_3_2)

		D_IF_VAL	(_MAP)
			D_TEXT  (_MAPPING)
		D_ELSE		(CHAN_NB_)
			D_TEXT  (NBER)
		D_END_IF	(MAP_CHAN)
D_END   (CHAN_ID_PRI_E)

START	(AT9_CHAN_ID_PRI_P)
		VAL			(5,2,CODING_STD_CCITT,  	&i_chan_id[0].coding_std)
		TABL		(4,1,AT9_T_NB_MAP,			&i_chan_id[0].nb_map)
		VAL			(0,4,B_CHAN,   				&i_chan_id[0].chan_type)
		EXT_1		()

		IF_VAL		(I_IF, &i_chan_id[0].nb_map, EQ, CHAN_NUMBER)
			TEXT	(IA5,ANY_OCTET,				&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		ELSE		()
			TEXT	(BINARY,ANY_OCTET,			&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		END_IF		()
END	(0)

			/* ---------- Display (DISPLAY_TXT) */

D_START	(AT9_DISPLAY_P)
	D_VAL	(TYPE)
	D_EXT_1	(_3)
	D_TEXT  (INFO_)
D_END		(DISPLAY_E)

START	(AT9_DISPLAY_P)
	VAL		(0,7,DISPLAY_TYPE_NORMAL,	&i_display[0].display_type)
	EXT_1	()
	TEXT	(BINARY,ANY_OCTET, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END			(0)

			/*---------- Endpoint identifier (ENDPOINT_ID) */

D_START	(AT9_ENDPOINT_ID_P)
	D_ANY_VAL	(USID)
	D_EXT_1		(_3E)
	D_OPTIONAL_OCTET(_4O)
	D_TABL		(INTERP)
	D_ANY_VAL	(TID)
	D_EXT_1		(_4E)
D_END	(END_SPDU)

START	(AT9_ENDPOINT_ID_P)
	ANY_VAL	(0,7,						&i_endpoint_id[0].usid)
	EXT_1	()
	OPTIONAL_OCTET ()
	TABL	(6,1,AT9_T_INTERPRETER,		&i_endpoint_id[0].interp)
	ANY_VAL	(0,6,						&i_endpoint_id[0].tid)
	EXT_1	()
END		(0)

			/* ---------- Feature activation (FEATURE_ACT) */

D_START	(AT9_FEATURE_ACT_P)
	D_ANY_VAL	(FEATURE_ID_NB)

	D_IF_VAL	(EXT_PRESENT)
		D_EXT_0_1	(_3_)
		D_ANY_VAL	(EXT_FEATURE_ID_NB)
	D_END_IF	(_3A)

	D_EXT_1		(_3_OR_3a)
D_END		(FEATURE_ACT_E)

START	(AT9_FEATURE_ACT_P)
	ANY_VAL	(0,7,	&i_feature_act[0].feature_nb)

	IF_VAL	(I_IF, &i_feature_act[0].feature_nb_ext, NE, BYTE_VAL_NIL)
		EXT_0_1	()
		ANY_VAL	(0,7,	&i_feature_act[0].feature_nb_ext)
	END_IF	()

	EXT_1	()
END			(0)

			/* ---------- Feature indication (FEATURE_IND) */

D_START	(AT9_FEATURE_IND_P)
	D_ANY_VAL	(FEATURE_ID_NB)
	D_EXT_0_1	(_3_)
	D_ANY_VAL	(EXT_FEATURE_ID_NB)
	D_EXT_1		(_3_OR_3a)
	D_PAD		(PADDING_4)
	D_TABL		(STATUS_IND)
	D_END_OCTET (_4_)
D_END	(FEATURE_IND_E)

START	(AT9_FEATURE_IND_P)
	ANY_VAL	(0,7,	&i_feature_ind[0].feature_nb)
	EXT_0_1	()
	ANY_VAL	(0,7,	&i_feature_ind[0].feature_nb_ext)
	EXT_1	()
	PAD		(4,4)
	TABL	(0,4,	AT9_T_STATUS_IND, &i_feature_ind[0].status_ind)
	END_OCTET ()
END		(0)

			/* ---------- High layer compatibility (HLC) */

D_START	(AT9_HLC_P)
	D_VAL				(INTERPRETATION)
	D_VAL				(PRESENTATION)
	D_TABL				(CODING_STD)
	D_EXT_1				(_3)

	D_IF_VAL			(IF_4)
		D_TABL			(TELESERVICE)

		D_IF_TABL		(IS_EXT_TELESERVICE)
			D_EXT_0_1	(_4)
			D_TABL		(EXT_TELESERVICE)
		D_END_IF		(IS_EXTENDED)

		D_EXT_1			(_5)
	D_ELSE				(ELSE_4)
		D_ANY_VAL		(TELESERVICE_SPF)
		D_EXT_1			(_4_SPF)
	D_END_IF			(ENDIF_4)

D_END					(HLC_E)

START	(AT9_HLC_P)
	VAL					(2,3,INTER_CCITT_CEPT,		&i_hlc[0].interpretation)
	VAL					(0,2,PRESENTATION_PROFIL,	&i_hlc[0].pres)
	TABL				(5,2,AT9_T_CODING_STD,			&i_hlc[0].coding_std)
	EXT_1				()

	IF_VAL				(I_IF, &i_hlc[0].coding_std, EQ, CODING_STD_CCITT)
		TABL			(0,7,AT9_T_TELESERVICE_CCITT,	&i_hlc[0].teleservice)

		IF_TABL			(I_IF, &i_hlc[0].teleservice, IN, AT9_T_TELESERVICE_EXT)
			EXT_0_1		()
			TABL		(0,7,AT9_T_TELESERVICE_CCITT,	&i_hlc[0].ext_teleservice)
		END_IF			()
		EXT_1			()
	ELSE				()
		ANY_VAL			(0,7,	&i_hlc[0].teleservice)
		EXT_1			()
	END_IF				()

END						(0)

			/* ---------- Information request (INFORMATION_RQ) */

D_START	(AT9_INFORMATION_RQ_P)
	D_TABL	(INFO_TYPE)
	D_TABL	(INFO_IND)
	D_EXT_1	(_3_)
D_END		(INFORMATION_RQ_E)

START	(AT9_INFORMATION_RQ_P)
	TABL	(0,6, AT9_T_INFO_TYPE,	&i_information_rq[0].info_type)
	TABL	(6,1, AT9_T_INFO_IND,	&i_information_rq[0].info_ind)
	EXT_1	()
END			(0)

			/* ---------- Keypad (KEYPAD) */

D_START	(AT9_KEYPAD_P)
	D_TEXT  (VAL_)
D_END		(KEYPAD_E)

START	(AT9_KEYPAD_P)
	TEXT	(IA5,DIGIT_E, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END			(0)

			/* ---------- Low layer compatibility (LLC) */

D_START	(AT9_LLC_P)
	D_TABL		(CODING_STD)
	D_TABL		(TRF_CAP)
	D_EXT_0_1	(_3)
	D_TABL		(OUT_BAND_NEG)
	D_PAD		(NS_PAD_3A)
	D_EXT_1		(_3A)
	D_TABL		(TRF_MODE)
	D_TABX		(TRF_RATE)
	D_FUNCTION  (IF_4AB)

	D_IF_VAL	(_4AB_NOT_DEFAULT)
		D_EXT_0_1	(_4)
		D_VAL	 	(CONFIG)
		D_VAL	 	(EST)
		D_TABL	 	(STRUCT)
		D_FUNCTION	(IF_4B)

		D_IF_VAL	(_4B_NOT_DEFAULT)
			D_EXT_0_1	(_4A)
			D_VAL		(SYMMETRY)
			D_TABX		(DEST_RATE)
		D_END_IF	(E_4B_NOT_DEFAULT)
	D_END_IF	(E_4AB_NOT_DEFAULT)
	D_EXT_1	 	(_4B)

	D_OPTIONAL_OCTET	(_5_6_7)

	D_FUNCTION	(IF_5)
	D_IF_VAL	(LLC_5_PR)

		D_VAL		(LAYER_1)
		D_TABL		(PROTOCOL_1)

			/* V110 */

		D_IF_VAL		(V110)
			D_EXT_0_1	(_5_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_EXT_0_1	(V110_5A)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(V110_PAD_5B)
			D_EXT_0_1	(V110_5B)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_EXT_0_1	(V110_5C)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
		D_END_IF		(ENDIF_V110)

			/* V120 */

		D_IF_VAL		(V120_)
			D_EXT_0_1	(_5_V120)
			D_TABL		(V120_SYN_ASYN)
			D_TABL		(V120_NEGOTIATION)
			D_TABL		(V120_USER_RATE)
			D_EXT_0_1	(V120_5A)
			D_TABL		(V120_HDR)
			D_TABL		(V120_MULTI_FRAME)
			D_TABL		(V120_OP_MODE)
			D_TABL		(V120_LLI)
			D_TABL		(V120_ASSIGN)
			D_TABL		(V120_BAND)
			D_PAD		(V120_PAD_5B)
			D_EXT_0_1	(V120_5B)
			D_TABL		(V120_STOP_BIT)
			D_TABL		(V120_DATA_BIT)
			D_TABL		(V120_PARITY)
			D_EXT_0_1	(V120_5C)
			D_TABL		(V120_DUPLEX)
			D_TABL		(V120_MODEM)
		D_END_IF	(ENDIF_V120)

		D_EXT_1		(_5_)

	D_END_IF	(ENDIF_5_PR)

	D_FUNCTION	(OCTET_6)
	D_IF_VAL	(OCTET_6_PR)
		D_VAL		(L_ID_2)
		D_TABL		(PROTOCOL_ID_2)
		D_EXT_0_1	(_6)
		D_ANY_VAL	(OPTION_2)
		D_EXT_1		(_6A)
	D_END_IF	(ENDIF_6_PR)

	D_FUNCTION	(OCTET_7)
	D_IF_VAL	(OCTET_7_PR)
		D_VAL		(L_ID_3)
		D_TABL		(PROTOCOL_ID_3)
		D_EXT_0_1	(_7)
		D_ANY_VAL	(OPTION_3)
		D_EXT_1		(_7A)
	D_END_IF	(ENDIF_7_PR)

D_END (LLC_E)

START	(AT9_LLC_P)
	TABL	(5,2,AT9_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(0,5,AT9_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
	EXT_0_1 ()
	TABL	(6,1,AT9_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
	PAD		(0,6)
	EXT_1	()
	TABL	(5,2,AT9_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(0,5,AT9_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
	FUNCTION(at9_llc_4ab_spdu)

	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 ()
		VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
		VAL		(0,2,EST_DEMAND,				&i_llc[0].est)
		TABL	(4,3,AT9_T_STRUCTURE,			&i_llc[0].structure)

		FUNCTION(at9_llc_4b_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_llc[0].symmetry)
			TABX	(0,5,AT9_TX_TRF_RATE,		&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
		END_IF	()
	END_IF	()
	EXT_1	()
	OPTIONAL_OCTET  ()

		/* following octets may be optional in some other circumstances */

	FUNCTION(at9_llc_5_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

		VAL		(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
		TABL	(0,5,AT9_T_PROTOCOL_ID_LLC_1,	&i_llc[0].protocol_id_1)

			/* V110 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			EXT_0_1 ()
			TABL	(6,1,AT9_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,AT9_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,AT9_T_USER_RATE,			&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(5,2,AT9_T_INTER_RATE,			&i_llc[0].inter_rate)
			TABL	(4,1,AT9_T_NIC_TX,				&i_llc[0].tx_nic)
			TABL	(3,1,AT9_T_NIC_RX,				&i_llc[0].rx_nic)
			TABL	(2,1,AT9_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
			TABL	(1,1,AT9_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,AT9_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,AT9_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,AT9_T_PARITY,				&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,AT9_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,AT9_T_MODEM,				&i_llc[0].modem)
		END_IF  ()

			/* V120 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
			EXT_0_1 ()
			TABL	(6,1,AT9_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,AT9_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,AT9_T_USER_RATE,			&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(6,1,AT9_T_HEADER,				&i_llc[0].hdr)
			TABL	(5,1,AT9_T_MULTI_FRAME,			&i_llc[0].multi_frame)
			TABL	(4,1,AT9_T_OP_MODE,				&i_llc[0].op_mode)
			TABL	(3,1,AT9_T_LLI,					&i_llc[0].lli)
			TABL	(2,1,AT9_T_ASSIGN,				&i_llc[0].assign)
			TABL	(1,1,AT9_T_BAND,				&i_llc[0].band)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,AT9_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,AT9_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,AT9_T_PARITY,				&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,AT9_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,AT9_T_MODEM,				&i_llc[0].modem)
		END_IF	()
		EXT_1	()

	END_IF ()	/* octet 5 present */

	FUNCTION(at9_llc_6_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
		VAL		(5,2,LAYER_ID_2,					&i_llc[0].layer_id_2)
		TABL	(0,5,AT9_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
		EXT_0_1 ()
		ANY_VAL	(0,7,								&i_llc[0].option_2)
		EXT_1	()
	END_IF ()	/* octet 6 present */

	FUNCTION(at9_llc_7_spdu)
	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		VAL		(5,2,LAYER_ID_3,					&i_llc[0].layer_id_3)
		TABL	(0,5,AT9_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
		EXT_0_1	()
		ANY_VAL	(0,7,								&i_llc[0].option_3)
		EXT_1	()
	END_IF	()	/* octet 7 present */


END (0)

			/* ---------- Notification indicator (NOTIF_IND) */

D_START	(AT9_NOTIF_IND_P)
	D_TABL  (DESCR)
	D_EXT_1 (_3)
D_END		(NOTIF_IND_E)

START	(AT9_NOTIF_IND_P)
	TABL	(0,7,AT9_T_NOTIF_IND_DESCR,	 &i_notif_ind[0].notif_descr)
	EXT_1	()
END			(0)

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(AT9_PROGRESS_IND_P)
	D_TABL  (CODING_STD)
	D_TABL	(LOCATION)
	D_PAD	(NS_PAD_3)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(AT9_PROGRESS_IND_P)
	TABL	(5,2,AT9_T_CAUSE_CODING_STD,	&i_progress_ind[0].coding_std)
	TABL	(0,4,AT9_T_LOCATION,			&i_progress_ind[0].progress_loc)
	PAD		(4,1)
	EXT_1	()
	TABL	(0,7,AT9_T_PROGRESS_IND_DESCR,	&i_progress_ind[0].progress_descr)
	EXT_1	()
END			(at9_progress_ind_check)

			/* ---------- Redirecting number (REDIR_NB) */

D_START	(AT9_REDIR_NB_P)
	D_TABL  	(TYPE_)
	D_TABX  	(_PLAN_ID)
	D_EXT_0_1	(_3)
	D_ANY_VAL	(SCREEN_IND)
	D_PAD		(_3_)
	D_ANY_VAL	(PRES_)
	D_EXT_0_1	(_3a)
	D_TABL		(REASON_REDIR)
	D_PAD		(_3b_)
	D_EXT_1		(_3_OR_3b)
	D_TEXT		(DIGIT_)
D_END	(REDIR_NB_E)

START	(AT9_REDIR_NB_P)
	TABL	(0,4,AT9_T_REDIR_NB_PLAN,  	&i_redir_nb[0].plan_id)
	TABX	(4,3,AT9_TX_REDIR_NB_TYPE,	&i_redir_nb[0].plan_id,  &i_redir_nb[0].nb_type)
	EXT_0_1 ()
	ANY_VAL	(0,2,						&i_redir_nb[0].screen_ind)
	PAD		(2,3)
	ANY_VAL	(5,2,						&i_redir_nb[0].pres)
	EXT_0_1 ()
	TABL	(0,4,AT9_T_REASON_REDIR,	&i_redir_nb[0].reason)
	PAD		(4,3)
	EXT_1	()
	TEXT	(IA5,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END		(at9_redir_spdu)

			/* ---------- Redirection number (REDIRECTION_NB) */

D_START	(AT9_REDIRECTION_NB_P)
	D_VAL		(TYPE_)
	D_VAL		(_PLAN_ID)
	D_EXT_1		(_3A)
	D_TEXT		(DIGIT_)
D_END	(REDIRECTION_NB_E)

START	(AT9_REDIRECTION_NB_P)
	VAL		(0,4,PLAN_ISDN,			&i_redirection_nb[0].plan_id)
	VAL		(4,3,NB_LOCAL,			&i_redirection_nb[0].nb_type)
	EXT_1	()
	TEXT	(IA5,DIGIT, &i_redirection_nb[0].lgth, (uchar **)&i_redirection_nb[0].p_add)
END		(0)

			/* ---------- Restart indicator */

D_START		(AT9_RESTART_IND_P)
	D_PAD	(NS_PAD_)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_IND_E)

START		(AT9_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,AT9_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
	EXT_1	()
END			(at9_restart_spdu)

			/* ---------- Signal (SIGNAL) */

D_START	(AT9_SIGNAL_P)
	D_TABL		(VAL_)
	D_END_OCTET	(_3)
D_END			(SIGNAL_E)

START	(AT9_SIGNAL_P)
	TABL		(0,8,AT9_T_SIGNAL_VAL,	&i_signal[0].val)
	END_OCTET	()
END				(0)

			/* ---------- spid (SPID) */

D_START	(AT9_SPID_P)
	D_TEXT  (VAL_)
D_END		(SPID_E)

START	(AT9_SPID_P)
	TEXT	(IA5,DIGIT, &i_spid[0].lgth, (uchar **)&i_spid[0].p_spid)
END			(0)

			/* ---------- Transit network selection (TRANSIT_NET_SEL) */

D_START	(AT9_TRANSIT_NET_SEL_P)
	D_TABL	(TYPE)
	D_TABL	(PLAN)
	D_EXT_1 (_3)
	D_TEXT  (NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(AT9_TRANSIT_NET_SEL_P)
	TABL	(4,3,AT9_T_TRANSIT_NET_TYPE,&i_transit_net_sel[0].net_id_type)
	TABL	(0,4,AT9_T_TRANSIT_NET_PLAN,&i_transit_net_sel[0].net_id_plan)
	EXT_1	()
	TEXT	(IA5,ANY_CHAR,				&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)


			/* ---------- Operator System Access (codeset 5, OS_ACCSS) */

D_START	(AT9_OS_ACCSS_P)
	D_VAL	(SERVICE_TYPE)
	D_TABL	(ACCSS_TYPE)
	D_EXT_1	(_3_)
D_END		(OS_ACCSS_E)

START	(AT9_OS_ACCSS_P)
	VAL		(2,5,	SERVICE_TYPE_UNSPECIFIED,	&i_os_accss[0].service_type)
	TABL	(0,2,	AT9_T_TYPE_ACCSS,			&i_os_accss[0].access_type)
	EXT_1	()
END			(0)

			/* ---------- Call appearance (codeset 6, CALL_APPEAR) */

D_START	(AT9_CALL_APPEAR_P)
	D_ANY_VAL	(CALL_APPEAR_IDENT)
	D_FUNCTION	(TEST_EXT_CALL_APPEAR_ID)

	D_IF_VAL	(EXT_PRESENT)
		D_EXT_0_1	(_3_)
		D_ANY_VAL	(EXT_CALL_APPEAR_ID)
	D_END_IF	(_3A)

	D_EXT_1		(_3_OR_3a)
D_END		(CALL_APPEAR_E)

START	(AT9_CALL_APPEAR_P)
	ANY_VAL	(0,7,		&i_call_appear[0].call_appear_id)
	FUNCTION(at9_call_appear_ext)

	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1	()
		ANY_VAL	(0,7,	&i_call_appear[0].call_appear_id_2)
	END_IF	()

	EXT_1	()
END			(0)

/*EOF*/
