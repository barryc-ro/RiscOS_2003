
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ie.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * Implements the meta description of all the information
 * elements and the integrity constraints associated to.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_IE_META_FUNCTION == ON

	uchar	e10_bc_spdu						(Void_parm);
	uchar	e10_calling_nb_spdu				(Void_parm);
	uchar	e10_chan_id_check				(Void_parm);
	uchar	e10_llc_4ab_spdu				(Void_parm);
	uchar	e10_llc_4b_spdu					(Void_parm);
	uchar	e10_llc_5_spdu					(Void_parm);
	uchar	e10_llc_6_spdu					(Void_parm);
	uchar	e10_llc_7_spdu					(Void_parm);

#	if NS_SPF_FACILITY == ON
		uchar	e10_spf_fac_spdu			(Void_parm);		/* this function interpretes octets 3.2 */
#	endif

#	if NS_TYPE_BRI == ON
		uchar	e10_bc_layer_nb_spdu		(Void_parm);
		uchar	e10_bc_is_layer_spdu		(Void_parm);
		uchar	e10_keypad_spdu				(Void_parm);
		uchar	e10_spdu_man_parameters		(Void_parm);
#	endif

#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		uchar	e10_dest_call_appear_spdu	(Void_parm);		/* test for value between 1 and 254 */
		uchar	e10_feature_act_spdu		(Void_parm);		/* test for value between 1 and 254 */
		uchar	e10_feature_ind_init_spdu	(Void_parm);		/* init flag for MBS */
		uchar	e10_feature_ind_spdu		(Void_parm);
		uchar	e10_ori_call_appear_spdu	(Void_parm);		/* test for value between 1 and 254 */
		uchar	e10_call_ref_to_conn_id		(Void_parm);
		uchar	e10_sel_call_appear_spdu	(Void_parm);		/* test for value between 1 and 254 */
#	endif

#	if NS_TYPE_PRI == ON
		uchar	e10_bc_4ab_spdu				(Void_parm);
		uchar	e10_bc_4b_spdu				(Void_parm);
		uchar	e10_bc_5_spdu				(Void_parm);
		uchar	e10_chk_change_status		(Void_parm);
		uchar	e10_conn_nb_spdu			(Void_parm);
		uchar	e10_redir_nb_spdu			(Void_parm);
		uchar	e10_restart_spdu			(Void_parm);
#	endif

#endif

/*--------------------------------------------------------------------------*/

D_START	(E10_BC_P)
D_END	(E10_BC_E)

START	(E10_BC_P)
END		(e10_bc_spdu)

/*--------------------------------------------------------------------------*/

			/* ---------- Call state (CALL_STATE) */

D_START	(E10_CALL_STATE_P)
	D_TABL		(VAL_)
	D_PAD		(P3)
	D_END_OCTET (_3)
D_END			(CALL_STATE_E)

START	(E10_CALL_STATE_P)
	TABL		(0,6,E10_T_CALL_STATE,	&i_call_state[0].val)
	PAD			(6,2)
	END_OCTET	()
END				(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Called party number (CALLED_NB) */

D_START	(E10_CALLED_NB_P)

	D_TABL	(PLAN_)
	D_TABL 	(_TYPE_)
	D_EXT_1	(_3_)
	D_TEXT	(IA5_DIGIT_EXT_)

D_END	(CALLED_NB_E)

START	(E10_CALLED_NB_P)

	TABL	(0,4,E10_T_NB_PLAN,  		&i_called_nb[0].plan_id)
	TABL	(4,3,E10_T_NB_TYPE, 		&i_called_nb[0].nb_type)
	EXT_1	()
	TEXT	(IA5, DIGIT_E, 				&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)

END	(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Calling party number (CALLING_NB) */

D_START	(E10_CALLING_NB_P)
	D_TABL			(PLAN)
	D_TABL			(TYPE_)
	D_FUNCTION		(DEFAULT_TYPE)

	D_IF_VAL		(DEFAULT_VAL)
		D_EXT_0_1	(_3)
		D_TABL		(PRESENTATION)
		D_PAD		(NS_PAD_3A)
		D_TABL		(SCREEN_IND)
	D_END_IF		(DEF_VAL)

	D_EXT_1			(_3_)
	D_OPTIONAL_OCTET(CALLING_NB_OPTIONAL)
	D_TEXT			(DIGIT_)

D_END   (CALLING_NB_E)

START	(E10_CALLING_NB_P)
	TABL			(0,4,E10_T_NB_PLAN,  			&i_calling_nb[0].plan_id)
	TABL			(4,3,E10_T_NB_TYPE,				&i_calling_nb[0].nb_type)

	FUNCTION		(e10_calling_nb_spdu)

	IF_VAL			(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 	()
		TABL		(5,2,E10_T_CALLING_NB_PRES, 	&i_calling_nb[0].pres)
		PAD			(2,3)
		TABL		(0,2,E10_T_SCREEN_IND,			&i_calling_nb[0].screen_ind)
	END_IF			()

	EXT_1   		()
	OPTIONAL_OCTET	()
	TEXT			(IA5,DIGIT_E, &i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

/*-------------------------------------------------------------------------*/

			/* ---------- Cause (CAUSE) */

D_START	(E10_CAUSE_P)
	D_TABL			(CODING_STD)
	D_PAD			(NS_PAD_3)
	D_TABL			(LOCATION)
	D_EXT_1			(_3A)
	D_TABL			(C_CLASS_CCITT)
	D_TABX			(C_V_CCITT)
	D_EXT_1			(_4)
	D_OPTIONAL_OCTET (DIAG)
	D_TEXT			(OCTET)

D_END	(CAUSE_E_A)

START	(E10_CAUSE_P)
	TABL			(5,2,E10_T_CODING_STD_CAUSE,		&i_cause[0].coding_std)
	PAD				(4,1)
	TABL			(0,4,E10_T_LOCATION,				&i_cause[0].cause_loc)
	EXT_1			()
	TABL			(4,3,E10_T_C_C,						&i_cause[0].cause_class)
	TABX			(0,4,E10_TX_C_V,					&i_cause[0].cause_class,  &i_cause[0].cause_val)
	EXT_1			()
	OPTIONAL_OCTET	()
	TEXT			(BINARY, ANY_OCTET,	&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	(0)

/*--------------------------------------------------------------------------*/

			/* ---------- Channel idendification (CHAN_ID) */

D_START	(E10_CHAN_ID_P)
	D_TABL			(INT_ID)
	D_TABL  		(INT_TYPE)
	D_PAD			(NS_PAD_3)
	D_TABL  		(PREF_EXCL)
	D_VAL			(D_CHAN_)
	D_TABX  		(SEL)
	D_EXT_1 		(_3)

	D_IF_VAL		(IF_INT)
		D_TABL 		(_INT_)
		D_EXT_1		(_3_1)
	D_END_IF		(INT_)

D_END	(CHAN_ID_E)

START	(E10_CHAN_ID_P)
	TABL			(6,1,E10_T_CHAN_INT,		&i_chan_id[0].int_id)
	TABL			(5,1,E10_T_INT_TYPE,		&i_chan_id[0].int_type)
	PAD				(4,1)
	TABL			(3,1,E10_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL			(2,1,E10_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABX			(0,2,E10_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)
	EXT_1   		()

	IF_VAL			(I_IF, &i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		TABL		(0,7,E10_T_CHAN_INT_VAL,	&i_chan_id[0].int_id_val)
		EXT_1		()
	END_IF			()

END		(e10_chan_id_check)

	/*-----*/

#if NS_TYPE_PRI == ON /* { */

	/* PRI-type chan_id */

D_START	(E10_CHAN_ID_PRI_P)
		D_VAL		(CODING)
		D_TABL  	(NB_MAP)
		D_VAL		(TYPE)
		D_EXT_1 	(_3_2)

		D_IF_VAL	(_MAP)
			D_TEXT  (_MAPPING)
		D_ELSE		(CHAN_NB_)
			D_TEXT  (NBER)
		D_END_IF	(MAP_CHAN)
D_END   (CHAN_ID_PRI_E)

START	(E10_CHAN_ID_PRI_P)
		VAL			(5,2,CODING_STD_CCITT,  	&i_chan_id[0].coding_std)
		TABL		(4,1,E10_T_NB_MAP,			&i_chan_id[0].nb_map)
		VAL			(0,4,B_CHAN,   				&i_chan_id[0].chan_type)
		EXT_1		()

		IF_VAL		(I_IF, &i_chan_id[0].nb_map, EQ, CHAN_NUMBER)
			TEXT	(IA5,ANY_OCTET,				&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		ELSE		()
			TEXT	(BINARY,ANY_OCTET,			&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		END_IF		()
END	(0)

#endif /* } */

/*--------------------------------------------------------------------------*/

			/* ---------- Low layer compatibility (LLC) */

D_START	(E10_LLC_P)
	D_TABL		(CODING_STD)
	D_TABL		(TRF_CAP)
	D_EXT_0_1	(_3)
	D_TABL		(OUT_BAND_NEG)
	D_PAD		(NS_PAD_3A)
	D_EXT_1		(_3A)
	D_TABL		(TRF_MODE)
	D_TABX		(TRF_RATE)
	D_FUNCTION  (IF_4AB)

	D_IF_VAL	(_4AB_NOT_DEFAULT)
		D_EXT_0_1	(_4)
		D_VAL	 	(CONFIG)
		D_VAL	 	(EST)
		D_TABL	 	(STRUCT)
		D_FUNCTION	(IF_4B)

		D_IF_VAL	(_4B_NOT_DEFAULT)
			D_EXT_0_1	(_4A)
			D_VAL		(SYMMETRY)
			D_TABX		(DEST_RATE)
		D_END_IF	(E_4B_NOT_DEFAULT)
	D_END_IF	(E_4AB_NOT_DEFAULT)
	D_EXT_1	 	(_4B)

	D_OPTIONAL_OCTET	(_5_6_7)

	D_FUNCTION	(IF_5)
	D_IF_VAL	(LLC_5_PR)

		D_VAL		(LAYER_1)
		D_TABL		(PROTOCOL_1)

			/* V110 */

		D_IF_VAL		(V110)
			D_EXT_0_1	(_5_V110)
			D_TABL		(V110_SYN_ASYN)
			D_TABL		(V110_NEGOTIATION)
			D_TABL		(V110_USER_RATE)
			D_EXT_0_1	(V110_5A)
			D_TABL		(V110_INTER_RATE)
			D_TABL		(V110_TX_NIC)
			D_TABL		(V110_RX_NIC)
			D_TABL		(V110_TX_FC)
			D_TABL		(V110_RX_FC)
			D_PAD		(V110_PAD_5B)
			D_EXT_0_1	(V110_5B)
			D_TABL		(V110_STOP_BIT)
			D_TABL		(V110_DATA_BIT)
			D_TABL		(V110_PARITY)
			D_EXT_0_1	(V110_5C)
			D_TABL		(V110_DUPLEX)
			D_TABL		(V110_MODEM)
		D_END_IF		(ENDIF_V110)

			/* V120 */

		D_IF_VAL		(V120_)
			D_EXT_0_1	(_5_V120)
			D_TABL		(V120_SYN_ASYN)
			D_TABL		(V120_NEGOTIATION)
			D_TABL		(V120_USER_RATE)
			D_EXT_0_1	(V120_5A)
			D_TABL		(V120_HDR)
			D_TABL		(V120_MULTI_FRAME)
			D_TABL		(V120_OP_MODE)
			D_TABL		(V120_LLI)
			D_TABL		(V120_ASSIGN)
			D_TABL		(V120_BAND)
			D_PAD		(V120_PAD_5B)
			D_EXT_0_1	(V120_5B)
			D_TABL		(V120_STOP_BIT)
			D_TABL		(V120_DATA_BIT)
			D_TABL		(V120_PARITY)
			D_EXT_0_1	(V120_5C)
			D_TABL		(V120_DUPLEX)
			D_TABL		(V120_MODEM)
		D_END_IF	(ENDIF_V120)

		D_EXT_1		(_5_)

	D_END_IF	(ENDIF_5_PR)

	D_FUNCTION	(OCTET_6)
	D_IF_VAL	(OCTET_6_PR)
		D_VAL		(L_ID_2)
		D_TABL		(PROTOCOL_ID_2)
		D_EXT_0_1	(_6)
		D_ANY_VAL	(OPTION_2)
		D_EXT_1		(_6A)
	D_END_IF	(ENDIF_6_PR)

	D_FUNCTION	(OCTET_7)
	D_IF_VAL	(OCTET_7_PR)
		D_VAL		(L_ID_3)
		D_TABL		(PROTOCOL_ID_3)
		D_EXT_0_1	(_7)
		D_ANY_VAL	(OPTION_3)
		D_EXT_1		(_7A)
	D_END_IF	(ENDIF_7_PR)

D_END (LLC_E)

START	(E10_LLC_P)
	TABL	(5,2,E10_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(0,5,E10_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
	EXT_0_1 ()
	TABL	(6,1,E10_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
	PAD		(0,6)
	EXT_1	()
	TABL	(5,2,E10_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(0,5,E10_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
	FUNCTION(e10_llc_4ab_spdu)

	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 ()
		VAL		(2,2,CONFIG_POINT_TO_POINT,		&i_llc[0].config)
		VAL		(0,2,EST_DEMAND,				&i_llc[0].est)
		TABL	(4,3,E10_T_STRUCTURE,			&i_llc[0].structure)

		FUNCTION(e10_llc_4b_spdu)
		IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			VAL		(5,2,BIDIRECTIONAL_SYMMETRY,&i_llc[0].symmetry)
			TABX	(0,5,E10_TX_TRF_RATE,		&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
		END_IF	()
	END_IF	()
	EXT_1	()
	OPTIONAL_OCTET  ()

		/* following octets may be optional in some other circumstances */

	FUNCTION(e10_llc_5_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)

		VAL		(5,2,LAYER_ID_1,				&i_llc[0].layer_id_1)
		TABL	(0,5,E10_T_PROTOCOL_ID_LLC_1,	&i_llc[0].protocol_id_1)

			/* V110 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V110)
			EXT_0_1 ()
			TABL	(6,1,E10_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,E10_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,E10_T_USER_RATE,			&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(5,2,E10_T_INTER_RATE,			&i_llc[0].inter_rate)
			TABL	(4,1,E10_T_NIC_TX,				&i_llc[0].tx_nic)
			TABL	(3,1,E10_T_NIC_RX,				&i_llc[0].rx_nic)
			TABL	(2,1,E10_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
			TABL	(1,1,E10_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,E10_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,E10_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,E10_T_PARITY,				&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,E10_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,E10_T_MODEM,				&i_llc[0].modem)
		END_IF  ()

			/* V120 */

		IF_VAL  (I_IF, &i_llc[0].protocol_id_1, EQ, PROTOCOL_ID_1_V120)
			EXT_0_1 ()
			TABL	(6,1,E10_T_SYN_ASYN,			&i_llc[0].syn_asyn)
			TABL	(5,1,E10_T_NEGOTIATION,			&i_llc[0].in_band_neg)
			TABL	(0,5,E10_T_USER_RATE,			&i_llc[0].user_rate)
			EXT_0_1 ()
			TABL	(6,1,E10_T_HEADER,				&i_llc[0].hdr)
			TABL	(5,1,E10_T_MULTI_FRAME,			&i_llc[0].multi_frame)
			TABL	(4,1,E10_T_OP_MODE,				&i_llc[0].op_mode)
			TABL	(3,1,E10_T_LLI,					&i_llc[0].lli)
			TABL	(2,1,E10_T_ASSIGN,				&i_llc[0].assign)
			TABL	(1,1,E10_T_BAND,				&i_llc[0].band)
			PAD		(0,1)
			EXT_0_1 ()
			TABL	(5,2,E10_T_STOP_BIT,			&i_llc[0].stop_bit)
			TABL	(3,2,E10_T_DATA_BIT,			&i_llc[0].data_bit)
			TABL	(0,3,E10_T_PARITY,				&i_llc[0].parity)
			EXT_0_1 ()
			TABL	(6,1,E10_T_DUPLEX,				&i_llc[0].duplex)
			TABL	(0,6,E10_T_MODEM,				&i_llc[0].modem)
		END_IF	()
		EXT_1	()

	END_IF ()	/* octet 5 present */

	FUNCTION(e10_llc_6_spdu)
	IF_VAL  (N_IF, &ie_if_flag, EQ, ON)
		VAL		(5,2,LAYER_ID_2,					&i_llc[0].layer_id_2)
		TABL	(0,5,E10_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
		EXT_0_1 ()
		ANY_VAL	(0,7,								&i_llc[0].option_2)
		EXT_1	()
	END_IF ()	/* octet 6 present */

	FUNCTION(e10_llc_7_spdu)
	IF_VAL	(N_IF, &ie_if_flag, EQ, ON)
		VAL		(5,2,LAYER_ID_3,					&i_llc[0].layer_id_3)
		TABL	(0,5,E10_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
		EXT_0_1	()
		ANY_VAL	(0,7,								&i_llc[0].option_3)
		EXT_1	()
	END_IF	()	/* octet 7 present */


END (0)

#if NS_SPF_FACILITY == ON

			/* ---------- Network-specific facilities (SPF_FAC) */

D_START	(E10_SPF_FAC_P)
	D_TABL			(NETWORK_ID_LGTH)
	D_END_OCTET		(_3)

	D_IF_VAL		(IF_3)
		D_VAL		(TYPE_NET_ID)
		D_VAL		(PLAN_NET_ID)
		D_EXT_1		(_3_1)
		D_FUNCTION	(NET_ID)
		D_END_OCTET	(_NET)
	D_END_IF		(_3_)

	D_TABL			(_PARAM_BIN)
	D_VAL			(_VAL_6_BITS)
	D_TABL			(SERVICE_FEATURE)
	D_TABX			(_FAC_CODE)
	D_END_OCTET		(_4_)
	D_TEXT			(_FAC_INFO)
D_END				(SPF_FAC_E)

START	(E10_SPF_FAC_P)
	TABL			(0,8,E10_T_NET_ID_LGTH, &i_spf_fac[0].net_id_lgth)
	END_OCTET		()

	IF_VAL			(I_IF, &i_spf_fac[0].net_id_lgth, NE, 0)
		VAL			(4,3,NATIONAL_NETWORK_ID_TYPE,	&i_spf_fac[0].Net_id_type)
		VAL			(0,4,CARRIER_ID_CODE,	 		&i_spf_fac[0].Net_id_plan)
		EXT_1		()

			/* WARNING !!!!!! That coding does not respect the Q931 */
			/* So, we do not use a TEXT instruction, because it put */
			/* the pointer to the end of IE ... */

		FUNCTION	(e10_spf_fac_spdu)
		END_OCTET	()
	END_IF			()

	TABL			(7,1, E10_T_PARAMETER_BINARY,	&i_spf_fac[0].action)
	VAL				(6,1, FAC_VAL_6_BITS,			&i_spf_fac[0].expansion)
	TABL			(5,1, E10_T_FAC_SERV_FEAT,		&i_spf_fac[0].serv_feature)
	TABX			(0,5, E10_TX_FAC_CODE,			&i_spf_fac[0].action, &i_spf_fac[0].facility_coding)
	END_OCTET		()
	TEXT			(IA5,DIGIT, &i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
END					(0)

#endif

/*--------------------------------------------------------------------------*/

			/* ---------- Progress indicator (PROGRESS_IND) */

D_START	(E10_PROGRESS_IND_P)
	D_TABL  (CODING_STD)
	D_TABL	(LOCATION)
	D_PAD	(NS_PAD_3)
	D_EXT_1 (_3)
	D_TABL  (DESCRIPTION)
	D_EXT_1 (_4)
D_END		(PROGRESS_IND_E)

START	(E10_PROGRESS_IND_P)
	TABL	(5,2,E10_T_CODING_STD_PROGRESS,	&i_progress_ind[0].coding_std)
	TABL	(0,4,E10_T_LOCATION,			&i_progress_ind[0].progress_loc)
	PAD		(4,1)
	EXT_1	()
	TABL	(0,7,E10_T_PROGRESS_IND_DESCR,	&i_progress_ind[0].progress_descr)
	EXT_1	()
END			(0)

			/* ---------- User entered code (USER_ENTERED_CODE) */

D_START	(E10_USER_ENTERED_CODE_P)
	D_TABL	(TYPE)
	D_EXT_1 (_3)
	D_TEXT  (CODE)
D_END		(TRANSIT_NET_SEL_E)

START	(E10_USER_ENTERED_CODE_P)
	TABL	(0,7,E10_T_CODE_TYPE,			&i_user_entered_code[0].code_type)
	EXT_1	()
	TEXT	(IA5,ANY_CHAR,					&i_user_entered_code[0].lgth, (uchar **)&i_user_entered_code[0].p_user_code)
END			(0)

/*--------------------------------------------------------------------------*/

/****************************************************************************/
/*					Basic Rate specific IES meta programms					*/
/****************************************************************************/

#if NS_TYPE_BRI == ON /* { */

/*---------- Bearer capability (BC) */

D_START (E10_BC_BRI_P)
        D_VAL                   (CODING_STD)
        D_TABL                  (TRF_CAP)
        D_EXT_1                 (_3)

        D_IF_VAL                (BASIC_VOICE)
            D_VAL               (TRF_MODE_V)
            D_VAL               (TRF_RATE_4_V)
			D_EXT_1             (_4)
			D_VAL               (LAYER_1_V)
			D_VAL               (PROTOCOL_1_V)
			D_EXT_1             (_5)
		D_ELSE                  (BASIC_DATA)
            D_TABL              (TRF_MODE)
            D_TABX              (TRF_RATE_4b)
            D_EXT_1             (_4b)
            D_OPTIONAL_OCTET    (_5_6)
			D_FUNCTION          (IS_LAYER)

            D_IF_VAL            (IF_LAYER)

				D_IF_VAL        (MODE_CIRCUIT)
                    D_VAL       (LAYER_1)
                    D_TABX      (BC_PROT_ID)

                    D_IF_VAL    (PROT_ID_1_RA_I461)
                        D_EXT_0_1(_5_01)
						D_PAD   (NS_PAD_5a)
                        D_VAL   (RATE_56KBS)
                    D_END_IF    (ENDIF_RA_I461)
                    D_EXT_1     (_5_1)
                D_ELSE          (MODE_PACKET)
                    D_TABX      (LAYER_ID_2_3)
                    D_TABX      (BC_PROT_ID_2_3)
                    D_EXT_1     (_5a)
                    D_FUNCTION  (LAYER_NB_FCT)

					D_IF_VAL    (LAYER_2_3)
                        D_TABX  (LAYER_ID_2_3p)
						D_TABX  (BC_PROT_ID_2_3p)
						D_EXT_1 (_5ap)
                    D_END_IF    (ENDIF_LAYER_2_3)
                D_END_IF        (ENDIF_MODE_CIRCUIT)
            D_END_IF            (LAYER_IF)
        D_END_IF                (SERVICE_TYPE)
D_END (END_SPDU)

START   (E10_BC_BRI_P)
        VAL         (5,2,CODING_STD_CCITT,          &i_bc[0].coding_std)
		TABL        (0,5,E10_T_TRF_CAP_BC,          &i_bc[0].trf_cap)
		EXT_1       ()

		IF_VAL  (I_IF, &i_bc[0].trf_cap, EQ, TRF_CAP_SPEECH)

				/* Basic Voice Services */

			VAL     (5,2,TRF_MODE_CIRCUIT,          &i_bc[0].trf_mode)
			VAL     (0,5,TRF_RATE_64KBS,            &i_bc[0].trf_rate)
			EXT_1   ()

			VAL     (5,2,LAYER_ID_1,                &i_bc[0].Layer_id)
			VAL     (0,5,PROTOCOL_ID_1_G711_u,      &i_bc[0].Protocol_id)
			EXT_1   ()

		ELSE    ()

				/* Basic data */

			TABL                (5,2,E10_T_TRF_MODE,                &i_bc[0].trf_mode)
			TABX                (0,5,E10_TX_TRF_RATE,               &i_bc[0].trf_mode,      &i_bc[0].trf_rate)
			EXT_1               ()
			OPTIONAL_OCTET      ()
			FUNCTION            (e10_bc_is_layer_spdu)
			IF_VAL              (N_IF, &ie_if_flag, EQ, ON)

				IF_VAL          (I_IF, &i_bc[0].trf_mode, EQ, TRF_MODE_CIRCUIT)
					VAL         (5,2,LAYER_ID_1,    	            &i_bc[0].Layer_id)
					TABX        (0,5,E10_TX_BC_PROTOCOL_ID,         &i_bc[0].Layer_id,      &i_bc[0].Protocol_id)

					IF_VAL      (I_IF, &i_bc[0].Protocol_id, EQ, PROTOCOL_ID_1_RA_I461)
						EXT_0_1 ()
						PAD     (5,2)       /*$ ASYN is then spare here */
						VAL     (0,5,RA_56KBS,          	        &i_bc[0].user_rate)
					END_IF      ()
					EXT_1       ()

				ELSE            ()
					TABX        (5,2,E10_TX_LAYER_ID,               &i_bc[0].trf_mode,      &i_bc[0].Layer_id)
					TABX        (0,5,E10_TX_BC_PROTOCOL_ID,         &i_bc[0].Layer_id,      &i_bc[0].Protocol_id)
					EXT_1       ()
					FUNCTION    (e10_bc_layer_nb_spdu)

					IF_VAL      (N_IF, &ie_if_flag, EQ, ON)
						TABX    (5,2,E10_TX_LAYER_ID,               &i_bc[0].trf_mode,      &i_bc[0].Add_layer_id)
						TABX    (0,5,E10_TX_BC_PROTOCOL_ID,         &i_bc[0].Add_layer_id,  &i_bc[0].Add_protocol_id)
						EXT_1   ()
					END_IF  ()
				END_IF  ()
			END_IF  ()
		END_IF  ()
END (0)

			/* ---------- Called subaddress (CALLED_SUB_ADD) */

D_START	(E10_CALLED_SUB_ADD_P)
		D_TABL  (TYPE)
		D_TABL  (IND)
		D_PAD   (NS_PAD_3)
		D_EXT_1 (_3)

		D_IF_VAL(OSI_SUB_ADD)
			D_VAL	(INFO_SUB_ADD_F)
			D_END_OCTET(INFO_SUB_ADD_5)
			D_TEXT  (INFO_OSI)
		D_ELSE	(NOT_OSI)
			D_TEXT  (INFO_NOT_OSI)
		D_END_IF	(TYPE_SUB_ADD)

D_END   (CALLED_SUB_ADD_E)

START	(E10_CALLED_SUB_ADD_P)
		TABL	(4,3,E10_T_SUB_ADD_TYPE,	&i_called_sub_add[0].sub_add_type)
		TABL	(3,1,E10_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)
		PAD		(0,3)
		EXT_1   ()

		IF_VAL  (I_IF, &i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
			VAL		(0,8,FORMAT_IA5,	&i_called_sub_add[0].format)
			END_OCTET()
			TEXT	(IA5,	 ANY_CHAR, 	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		ELSE	()
			TEXT	(BINARY, ANY_OCTET,	&i_called_sub_add[0].lgth, (uchar **)&i_called_sub_add[0].p_add)
		END_IF	()

END		(0)

/*---------- Keypad (KEYPAD) */

D_START (E10_KEYPAD_SPDU_P)
		D_TEXT  (KEYPAD_VAL)
D_END   (END_SPDU)

START   (E10_KEYPAD_SPDU_P)
		TEXT(IA5,DIGIT_E, &i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END (e10_keypad_spdu)

			/* ---------- Signal (SIGNAL) */

D_START	(E10_SIGNAL_P)
	D_TABL		(VAL_)
	D_END_OCTET	(_3)
D_END			(SIGNAL_E)

START	(E10_SIGNAL_P)
	TABL		(0,8,E10_T_SIGNAL_VAL,	&i_signal[0].val)
	END_OCTET	()
END				(0)


/*---------- Terminal capabilities (TE_CAP) */

D_START (E10_TE_CAP_SPDU)
		D_VAL   (CODING_STD)
		D_VAL   (DESCRIPTION)
		D_END_OCTET(_3)
D_END   (END_SPDU)

START   (E10_TE_CAP_SPDU)
		VAL     (6,2,CODING_STD_CCITT,  &i_te_cap[0].coding_std)
		VAL     (0,6,TYPE_2_STIMULUS,   &i_te_cap[0].te_cap_descr)
		END_OCTET()
END (0)


/*---------- Endpoint identifier (E10_ENDPOINT_ID) */

D_START (E10_ENDPOINT_ID_SPDU)
		D_ANY_VAL   (USID)
		D_END_OCTET (_3)

		D_TABL      (INTERP)
		D_ANY_VAL   (TID)
		D_END_OCTET (_4)
D_END   (END_SPDU)

START   (E10_ENDPOINT_ID_SPDU)
		ANY_VAL (0,8,                   &i_endpoint_id[0].usid)
		END_OCTET()
		TABL    (7,1,E10_T_INTERPRETER, &i_endpoint_id[0].interp)
		ANY_VAL (0,7,                   &i_endpoint_id[0].tid)
		END_OCTET()
END (0)

/*-------------------------------------------------------------------------*/

D_START (E10_MANAGMNT_SPDU)
	D_VAL       (PROTOCOL_DISCR)
	D_END_OCTET (OCTET_7c)
	D_ANY_VAL   (TRANS_REF)
    D_EXT_1     (OCTET_7d)
    D_TABL      (OP_CLASS)
    D_PAD       (_7e)
    D_TABX      (OP_TYPE)
    D_EXT_1     (OCTET_7e)

	D_IF_VAL    (CLASS_REJECT)
        D_TABL  (MAN_ERR_CODE)
    D_ELSE      (OTHER_CLASSES)
        D_TABX  (MAN_CODE)
    D_END_IF    (CODE)
    D_EXT_1     (OCTET_7f)

D_END   (END_SPDU)

START   (E10_MANAGMNT_SPDU)
    VAL         (0,8,PROTOCOL_DISCR_ATT_ISDN_MAN,   &i_managmnt[0].protocol_discr)
    END_OCTET   ()
    ANY_VAL     (0,7,                               &i_managmnt[0].trans_ref)
    EXT_1       ()
	TABL        (4,3,E10_T_OP_CLASS,                &i_managmnt[0].op_class)
    PAD         (2,2)
	TABX        (0,3,E10_TX_OP_TYPE,    &i_managmnt[0].op_class,    &i_managmnt[0].op_type)
    EXT_1       ()

    IF_VAL      (I_IF, &i_managmnt[0].op_class, EQ, REJECT)
		TABL    (0,7,E10_T_MAN_ERR_CODE,                &i_managmnt[0].man_code)
	ELSE        ()
		TABX    (0,7,E10_TX_MAN_CODE,   &i_managmnt[0].op_type,     &i_managmnt[0].man_code)
	END_IF      ()
	EXT_1       ()

END     (e10_spdu_man_parameters)

#endif /* } */

#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */

/*---------- Adjunct Control (ADJUNCT_CON) */

D_START (E10_ADJUNCT_CON_SPDU)
		D_TABL      (ADJUNCT_VAL)
		D_END_OCTET (ADJUNCT_CON_VAL)
D_END   (END_SPDU)

START   (E10_ADJUNCT_CON_SPDU)
		TABL        (0,8, E10_T_ADJUNCT_VAL,        &i_adjunct_con[0].adjunct_val)
        END_OCTET   ()
END     (0)

/*---------- associated type (ASSOC_TYPE) */

D_START (E10_ASSOC_TYPE_SPDU)
	D_TABL  (ASSOC_STATUS)
D_END   (END_SPDU)

START   (E10_ASSOC_TYPE_SPDU)
	TABL    (0,8, E10_T_ASSOC_STATUS,               &i_assoc_type[0].assoc_status)
END     (0)

/*---------- Destination Call Appearance (DEST_CALL_APPEAR) */

D_START (E10_DEST_CALL_APPEAR_SPDU_P)
D_END   (END_SPDU)

START   (E10_DEST_CALL_APPEAR_SPDU_P)
END     (e10_dest_call_appear_spdu)

/*---------- Display Control (DISPLAY_CON) */

D_START (E10_DISPLAY_CON_SPDU)
		D_PAD       (BITS_0_3)
		D_TABL      (DISPLAY_MODE)
		D_END_OCTET (DISPLAY_CON_MODE)
D_END   (END_SPDU)

START   (E10_DISPLAY_CON_SPDU)
		PAD         (0,4)
		TABL        (4,4, E10_T_DISPLAY_CON_MODE,   &i_display_con[0].display_con_mode)
		END_OCTET   ()
END     (0)

/*---------- Display Field (DISPLAY_FLD) */

D_START (E10_DISPLAY_FLD_SPDU)
		D_TABL      (DISPLAY_MODE)
		D_TABL      (SUB_MODE)
		D_END_OCTET (OCTET_3)
		D_TABL      (DISPLAY_FLD_TYPE)
		D_PAD       (NS_PAD_4)
		D_END_OCTET (OCTET_4)
		D_IF_VAL	(_TYPE_CALL_APPEAR_ID)
			D_TEXT  (DISPLAY_INFO_BINARY)
		D_ELSE		(_OTHER_TYPE)
			D_TEXT  (DISPLAY_INFO_TEXT)
		D_END_IF	(_TYPE)
D_END   (END_SPDU)

START   (E10_DISPLAY_FLD_SPDU)
		TABL        (4,4, E10_T_DISPLAY_FLD_MODE,   &i_display_fld[0].display_fld_mode)
		TABL        (0,4, E10_T_DISPLAY_SUBMODE,    &i_display_fld[0].submode)
		END_OCTET   ()
		TABL        (0,5, E10_T_DISPLAY_FLD_TYPE,   &i_display_fld[0].display_fld_type)
		PAD         (5,3)
		END_OCTET   ()

		IF_VAL		(I_IF, &i_display_fld[0].display_fld_type, EQ, CALL_APPEAR_ID)
			TEXT	(BINARY, ANY_OCTET, &i_display_fld[0].info_lgth,(uchar **)&i_display_fld[0].p_info)
		ELSE		()
			TEXT	(IA5, ANY_CHAR, &i_display_fld[0].info_lgth,(uchar **)&i_display_fld[0].p_info)
		END_IF		()

END     (0)

/*---------- Display (DISPLAY) */

D_START (E10_DISPLAY_SPDU)
	D_TEXT      (DISPLAY_INFO_TEXT)
D_END   (END_SPDU)

START   (E10_DISPLAY_SPDU)
		TEXT        (IA5, ANY_CHAR, &i_display[0].lgth, (uchar **)&i_display[0].p_info)
END		(0)

/*---------- Feature Activation (FEATURE_ACT) */

D_START (E10_FEATURE_ACT_SPDU_P)
		D_TABL      (BUTTON_TYPE)
		D_TABL      (MODULE_NB)
		D_VAL       (STATUS_TYPE)
		D_END_OCTET (OCTET_3)
D_END   (END_SPDU)

START   (E10_FEATURE_ACT_SPDU_P)
		TABL        (6,2, E10_T_BUTTON_TYPE_ACT,        &i_feature_act[0].button_type_act)
		TABL        (3,3, E10_T_MODULE_NB,              &i_feature_act[0].module_nb)
		VAL         (0,3, FEATURE_NUMBER_STATUS,    &i_feature_act[0].status_type)
		END_OCTET   ()
END     (e10_feature_act_spdu)

/*---------- Feature Indication (FEATURE_IND) */

D_START (E10_FEATURE_IND_SPDU_P)
		D_TABL      (BUTTON_TYPE)
		D_TABL      (MODULE_NB)
        D_TABL      (STATUS_TYPE)
        D_FUNCTION  (INIT_FLAG_MBS)
        D_END_OCTET (OCTET_3)
D_END   (END_SPDU)

START   (E10_FEATURE_IND_SPDU_P)
		TABL        (6,2, E10_T_BUTTON_TYPE_IND,        &i_feature_ind[0].button_type_ind)
		TABL        (3,3, E10_T_MODULE_NB,              &i_feature_ind[0].module_nb)
		TABL        (0,3, E10_T_STATUS_TYPE,            &i_feature_ind[0].status_type)
		FUNCTION(e10_feature_ind_init_spdu)
        END_OCTET   ()
END     (e10_feature_ind_spdu)

D_START (E10_FEATURE_IND_MS_SPDU)
		D_TABL      (MEANING)
        D_END_OCTET (_4_)
D_END   (END_SPDU)

START   (E10_FEATURE_IND_MS_SPDU)
		TABL        (0,8, E10_T_FEATURE_MEANING,        &i_feature_ind[0].meaning)
        END_OCTET   ()
END     (0)

/*---------- Keypad Control (KEYPAD_CON) */

D_START (E10_KEYPAD_CON_SPDU)
        D_TABL      (CALL_REF_TYPE)
        D_END_OCTET (OCTET_3)
D_END   (END_SPDU)

START   (E10_KEYPAD_CON_SPDU)
		TABL        (0,8, E10_T_CALL_REF_TYPE,          &i_keypad_con[0].call_ref_type)
        END_OCTET   ()
END     (0)

/*---------- Origination Call Appearance (ORI_CALL_APPEAR) */

D_START (E10_ORI_CALL_APPEAR_SPDU_P)
D_END   (END_SPDU)

START   (E10_ORI_CALL_APPEAR_SPDU_P)
END     (e10_ori_call_appear_spdu)

/*---------- Other Call Reference (OTHER_CALL_REF) */

D_START (E10_OTHER_CALL_REF_SPDU)
		D_IF_VAL    (_FROM_D)
			D_FUNCTION  (_CALL_REF_TO_CONN_ID)
        D_ELSE      (_FROM_CC)
            D_ANY_VAL   (_CALL_REF_FLAG)
            D_ANY_VAL   (_CALL_REF_VALUE)
            D_END_OCTET (_CALL_REF)
        D_END_IF    (_E)
D_END   (END_SPDU)

START   (E10_OTHER_CALL_REF_SPDU)
        IF_VAL  (N_IF, &direction, EQ, FROM_D_CHANNEL)
			FUNCTION (e10_call_ref_to_conn_id)
        ELSE    ()
            ANY_VAL (7,1, &i_other_call_ref[0].call_ref_flag)
            ANY_VAL (0,7, &i_other_call_ref[0].call_ref_val)
            END_OCTET ()
        END_IF  ()
END     (0)

/*---------- Selected Call Appearance (SEL_CALL_APPEAR) */

D_START (E10_SEL_CALL_APPEAR_SPDU_P)
D_END   (END_SPDU)

START   (E10_SEL_CALL_APPEAR_SPDU_P)
END     (e10_sel_call_appear_spdu)

/*---------- Switchhook (SWITCHHOOK) */

D_START (E10_SWITCHHOOK_SPDU)
		D_TABL      (HOOK_VAL)
		D_END_OCTET (OCTET_3)
D_END   (END_SPDU)

START   (E10_SWITCHHOOK_SPDU)
		TABL        (0,8, E10_T_HOOK_VAL,           &i_switchhook[0].hook_val)
		END_OCTET   ()
END     (0)

#endif /* } */

/****************************************************************************/
/*					Primary Rate specific IES meta programms				*/
/****************************************************************************/

#if NS_TYPE_PRI == ON /* { */

			/* ---------- Bearer capability (BC) */



D_START	(E10_BC_PRI_P)
	D_VAL					(CODING_STD)
	D_TABL					(TRF_CAP)
	D_EXT_1					(_3)
	D_VAL					(TRF_MODE_)
	D_TABL					(TRF_RATE_)

	D_FUNCTION				(OCTETS_4ab)

	D_IF_VAL				(NOT_DEFAULT_4ab)
		D_EXT_0_1			(_4)
		D_VAL				(STRUCT)
		D_VAL				(CONFIG)
		D_VAL				(EST)
		D_FUNCTION			(OCTET_4b)

		D_IF_VAL			(NOT_DEFAULT_4b)
			D_EXT_0_1   	(_4A)
			D_VAL			(SYMMETRY)
			D_TABL			(DEST_RATE)
		D_END_IF			(_4b)

	D_END_IF				(_4ab)

	D_EXT_1					(_4_)
	D_OPTIONAL_OCTET		(_5_5A)

	D_IF_VAL				(_TRF_RATE_MULTI_RATE)
		D_TABL 				(_T_MULTIPLIER)
		D_EXT_1				(_MULTI)
	D_END_IF				(_N_64)

	D_FUNCTION				(_5_PRES)

	D_IF_VAL				(_5_PRESENT)
		D_VAL				(_LAYER_1)
		D_TABL				(_PROTO_1)

		D_IF_VAL 			(_RATE_ADAPT)
			D_EXT_0_1		(_5A)
			D_VAL			(TRF_RATE_56)
			D_PAD			(NO_NEGOT)
			D_VAL			(_SYNC_)
		D_END_IF			(_RATE_ADAPT_)

		D_EXT_1				(_5A_B)

	D_END_IF				(_5_)

D_END	(BC_E)

START	(E10_BC_PRI_P)
	VAL				(5,2,CODING_STD_CCITT,		&i_bc[0].coding_std)
	TABL			(0,5,E10_T_TRF_CAP_BC,		&i_bc[0].trf_cap)
	EXT_1			()
	VAL				(5,2,TRF_MODE_CIRCUIT,		&i_bc[0].trf_mode)
	TABL			(0,5,E10_T_TRF_RATE,		&i_bc[0].trf_rate)

	FUNCTION		(e10_bc_4ab_spdu)

	IF_VAL			(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1	()
		VAL			(4,3,STRUCTURE_DEFAULT,			&i_bc[0].structure)
		VAL			(2,2,CONFIG_POINT_TO_POINT,		&i_bc[0].config)
		VAL			(0,2,EST_DEMAND,				&i_bc[0].est)
		FUNCTION	(e10_bc_4b_spdu)

		IF_VAL		(N_IF, &ie_if_flag, EQ, ON)
			EXT_0_1 ()
			VAL		(5,2,BIDIRECTIONAL_SYMMETRY,	&i_bc[0].symmetry)
			TABL	(0,5,E10_T_TRF_RATE,			&i_bc[0].dest_rate)
		END_IF		()

	END_IF			()

	EXT_1   		()

	OPTIONAL_OCTET	()

	IF_VAL			(I_IF, &i_bc[0].trf_rate, EQ, TRF_RATE_MULTI_RATE)
		TABL 		(0,7, E10_T_MULTIPLIER, 	&i_bc[0].Multiplier)
		EXT_1		()
	END_IF			()

	FUNCTION		(e10_bc_5_spdu)

	IF_VAL			(N_IF, &ie_if_flag, EQ, ON)
		VAL			(5,2,LAYER_ID_1,			&i_bc[0].layer_id_1)
		TABL		(0,5,E10_T_BC_PROTOCOL_ID_1,&i_bc[0].protocol_id_1)

		IF_VAL 		(I_IF, &i_bc[0].protocol_id_1, NE, PROTOCOL_ID_1_G711_u)
			EXT_0_1	()
			VAL		(0,5,RA_56KBS,				&i_bc[0].user_rate)
			PAD		(5,1)
			VAL		(6,1,SYN,					&i_bc[0].syn_asyn)
		END_IF		()

		EXT_1		()
	END_IF			()

END		(0)

			/* ---------- Change status (CHANGE STATUS) */

D_START (E10_CHANGE_STATUS_P)
	D_ANY_VAL 	(PREF)
	D_PAD		(_3)
	D_TABL		(CHAN_STAT)
	D_EXT_1	(_3_)
D_END	(E10_CHANGE_STATUS_E)

START (E10_CHANGE_STATUS_P)
	ANY_VAL	(6,1,    			&i_change_status[0].preference)
	PAD		(3,3)
	TABL	(0,3,E10_T_STATUS,	&i_change_status[0].status)
	EXT_1	()
END (e10_chk_change_status)

			/* ---------- Connected number (CONN_NB) */

D_START	(E10_CONN_NB_P)
	D_TABL		(PLAN)
	D_TABL			(TYPE_)
	D_FUNCTION		(DEFAULT_TYPE)

	D_IF_VAL		(DEFAULT_VAL)
		D_EXT_0_1	(_3)
		D_TABL		(PRESENTATION)
		D_PAD		(NS_PAD_3A)
		D_TABL		(SCREEN_IND)
	D_END_IF		(DEF_VAL)

	D_EXT_1			(_3_)
	D_OPTIONAL_OCTET(CONN_NB_OPTIONAL)
	D_TEXT			(DIGIT_)

D_END   (CONN_NB_E)

START	(E10_CONN_NB_P)
	TABL			(0,4,E10_T_NB_PLAN,  			&i_conn_nb[0].plan_id)
	TABL			(4,3,E10_T_NB_TYPE,				&i_conn_nb[0].nb_type)

	FUNCTION		(e10_conn_nb_spdu)

	IF_VAL			(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 	()
		TABL		(5,2,E10_T_CALLING_NB_PRES,		&i_conn_nb[0].pres)
		PAD			(2,3)
		TABL		(0,2,E10_T_SCREEN_IND,			&i_conn_nb[0].screen_ind)
	END_IF			()

	EXT_1   		()
	OPTIONAL_OCTET	()
	TEXT			(IA5,DIGIT, &i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END		(0)

			/* ---------- Facility (FACILITY) */

D_START	(E10_FACILITY_P)
	D_TEXT			(DIGIT_)
D_END   (E10_FACILITY_E)

START	(E10_FACILITY_P)
	TEXT (BINARY,ANY_OCTET, &i_facility[0].lgth, (uchar **)&i_facility[0].p_info)
END		(0)

			/* ---------- Precedence level (PRECEDENCE_LEVEL) */

D_START	(E10_PRECEDENCE_LEVEL_P)
	D_TABL  (CODING_STD)
	D_PAD	(NS_PAD_5)
	D_TABL  (LEVEL)
	D_EXT_1 (_3)
	D_PAD	(NS_PAD_7)
	D_TABL  (CHANGE_VALUE)
	D_PAD	(NS_PAD_3)
	D_TABL  (LFB)
	D_EXT_1 (_4)
	D_TEXT(	MLPP_SERV)
D_END		(PROGRESS_IND_E)

START	(E10_PRECEDENCE_LEVEL_P)
	TABL	(5,2,E10_T_CODING_STD_PRECEDENCE,&i_precedence_level[0].coding_std)
	PAD		(4,1)
	TABL	(0,4,E10_T_PRECEDENCE,			&i_precedence_level[0].level)
	EXT_1	()
	PAD		(4,2)
	TABL	(3,1,E10_T_CHANGE_VALUE,		&i_precedence_level[0].change_value)
	PAD		(2,1)
	TABL	(0,2,E10_T_LFB,					&i_precedence_level[0].lfb_ind)
	EXT_1	()
	TEXT 	(BINARY,ANY_OCTET, 				&i_precedence_level[0].lgth, (uchar **)&i_precedence_level[0].p_info)
END			(0)

			/* ---------- Redirecring number (REDIR_NB) */

D_START	(E10_REDIR_NB_P)
	D_TABL		(PLAN)
	D_TABL			(TYPE_)
	D_FUNCTION		(DEFAULT_TYPE)

	D_IF_VAL		(DEFAULT_VAL)
		D_EXT_0_1	(_3)
		D_TABL		(PRESENTATION)
		D_PAD		(NS_PAD_3A)
		D_TABL		(SCREEN_IND)
		D_EXT_0_1	(_3_a)
		D_TABL		(_REASON)
		D_PAD		(NS_PAD_3)
	D_END_IF		(DEF_VAL)

	D_EXT_1			(_3_)
	D_OPTIONAL_OCTET(REDIR_NB_OPTIONAL)
	D_TEXT			(DIGIT_)

D_END   (REDIR_NB_E)

START	(E10_REDIR_NB_P)
	TABL			(0,4,E10_T_NB_PLAN,  			&i_redir_nb[0].plan_id)
	TABL			(4,3,E10_T_NB_TYPE,				&i_redir_nb[0].nb_type)

	FUNCTION		(e10_redir_nb_spdu)

	IF_VAL			(N_IF, &ie_if_flag, EQ, ON)
		EXT_0_1 	()
		TABL		(5,2,E10_T_CALLING_NB_PRES,		&i_redir_nb[0].pres)
		PAD			(2,3)
		TABL		(0,2,E10_T_SCREEN_IND,			&i_redir_nb[0].screen_ind)
		EXT_0_1		()
		TABL		(0,4,E10_T_REASON_REDIR,		&i_redir_nb[0].reason)
		PAD			(4,3)
	END_IF			()

	EXT_1   		()
	OPTIONAL_OCTET	()
	TEXT			(IA5,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END		(0)

			/* ---------- Restart indicator */

D_START		(E10_RESTART_IND_P)
	D_PAD	(NS_PAD_)
	D_TABL	(OM_CLASS)
	D_EXT_1 (_3)
D_END		(RESTART_IND_E)

START		(E10_RESTART_IND_P)
	PAD		(3,4)
	TABL	(0,3,E10_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
	EXT_1	()
END			(e10_restart_spdu)

			/* ---------- Transit network selection (TRANSIT_NET_SEL) */

D_START	(E10_TRANSIT_NET_SEL_P)
	D_VAL	(TYPE)
	D_VAL	(CDOE)
	D_EXT_1 (_3)
	D_TEXT  (NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(E10_TRANSIT_NET_SEL_P)
	VAL		(4,3,NATIONAL_NETWORK_ID_TYPE,	&i_transit_net_sel[0].net_id_type)
	VAL		(0,4,CARRIER_ID_CODE,			&i_transit_net_sel[0].net_id_plan)
	EXT_1	()
	TEXT	(IA5,ANY_CHAR,					&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

			/* ---------- Traveling classmark (TRAVELING_CLASSMARK) */

D_START	(E10_TRAVELING_CLASSMARK_P)
	D_VAL	(CODING)
	D_VAL	(CDOE)
	D_PAD	(_4)
	D_EXT_1 (_3)
	D_TABL	(FAC_REST)
	D_END_OCTET (_3_)
	D_TABL	(SATELLITE)
	D_END_OCTET (_4_)
	D_TABL	(CONNECTIVITY)
	D_EXT_1  (_5_)
D_END		(CLASSMARK_E)

START	(E10_TRAVELING_CLASSMARK_P)
	VAL		(5,2,CODING_STD_NATIONAL,		&i_traveling_classmark[0].coding_std)
	VAL		(4,1,REQUIRED_VALUE,			&i_traveling_classmark[0].change_value)
	PAD		(0,4)
	EXT_1	()
	TABL	(0,8,E10_T_FAC_RESTR_LEVEL,		&i_traveling_classmark[0].fac_restriction)
	END_OCTET()
	TABL	(0,8,E10_T_SATELLITE_HOP,		&i_traveling_classmark[0].satellite_hop_counter)
	END_OCTET()
	TABL	(0,7,E10_T_CONNECTIVITY,		&i_traveling_classmark[0].end_to_end_isdn)
	EXT_1	()
END			(0)

			/* ---------- User to user information (UUI) */

D_START	(E10_UUI_P)
	D_TABL		(PROTOCOL_DISCR)
	D_END_OCTET	(_3)
	D_IF_VAL	(DISCR_IA5)
		D_TEXT  (INFO_IA5)
	D_ELSE		(OTHER_DISCR)
		D_TEXT  (INFO_OTHER)
	D_END_IF	(DISCR)
D_END			(UUI_E)

START	(E10_UUI_P)
	TABL		(0,8,E10_T_UUI_PROTOCOL_DISCR,  &i_uui[0].protocol_discr)
	END_OCTET   ()
	IF_VAL		(I_IF, &i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT	(IA5,ANY_CHAR,					&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE		()
		TEXT	(BINARY, ANY_OCTET, 			&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF		()
END		(0)

#endif /* } */

/*EOF*/
