
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - net_ssdu.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/* external functions prototype */

#if NEW_FCT_STYLE == ON
	uchar 	check_convert		(uchar FAR *p_to, uchar FAR *p_from, uint lgth, uchar code, uchar restriction);
#else
	uchar 	check_convert		();
#endif

#define NS_INCLUDE_SSDU_META_FUNCTION		ON		/* include prototypes of functions inside mp_ssdu.e10 */

#include "e10.mp_ssdu"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		e10_chan_id_ssdu - implements the specific processing of a chan_id
								IE in a SSDU primitive.

Usage           uchar chan_id_ssdu ();

Return value : 	chan_id_ssdu returns = OK
									 = NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_chan_id, ssdu common context.

*--------------------------------------------------------------------------*/
uchar e10_chan_id_chan_nb_ssdu ()
{
	uchar i;

	if (direction == TO_CALL_CONTROL) {

		if ((I_(chan_id,int_type) == INT_TYPE_PRI) &&
        	(I_(chan_id, p_chan_nb)!= P_NIL)) {


			/*
			 * Reset the extension bit in the chan_nb field.
			 */

			for (i = 0; i < I_(chan_id, chan_nb_lgth); i++) {
				Reset_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}
		}
	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar e10_chan_id_ssdu ()
{
	uchar i;

	if (direction == FROM_CALL_CONTROL) {

		if (I_chan_id_int_type == INT_TYPE_BRI) {

			if (Na_type == PRI) {
				return (NOK);
			}

		} else {

			if (Na_type == BRI) {
				return (NOK);
			}


				/*
				 * Set the extension bit to 1 in the chan_nb field,
				 * unless it is slot map.
				 */

			if (i_chan_id[0].nb_map == CHAN_NUMBER) {

				i = I_(chan_id, chan_nb_lgth)-1;

				Set_ext_bit (I_(chan_id, p_chan_nb)[i]);
			}

#			if NS_D_BACKUP == ON

					/*
					 * Check if the Na bears an active D channel
					 */

				if ((ns_nfas == ON) && (Nai != Nfas_nai_active_d_chan)) {

						/*
						 * This Nai does NOT bear an active D channel.
						 * We may have to modify the CHANNEL ID.
						 * The 'interface Id' MUST be EXPLICIT
						 * and the 'interface Id Value should be
						 * the CC Nai.
						 */

					if (I_(chan_id, int_id) == INT_ID_IMPLICIT) {

						I_(chan_id, int_id)	 	= INT_ID_EXPLICIT;
						I_(chan_id, int_id_val) = Nai;

					}

				}

#			endif

		}
	}

	return (OK);

}

/*-------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		e10_spf_fac_ssdu - implements the processing of the specific facility
						  IE (received or to be sent in a SSDU message).

Usage	   uchar e10_spf_fac_ssdu ();

Return value :  e10_spf_fac_ssdu returns = OK   valid data,
									 = NOK  invalid data if fatal error.

common constants and declarations : isdn.h

*--------------------------------------------------------------------------*/

uchar e10_spf_fac_ssdu ()
{

	if (direction == TO_CALL_CONTROL) {

		if (check_convert (	(uchar FAR *) p_ssdu_val,
							I_spf_fac_a_net_id,
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) {
		  return (NOK);
		}

	} else {

		if (check_convert (	I_spf_fac_a_net_id,
							(uchar FAR *) (p_ssdu_val+1),
							I_spf_fac_net_id_lgth,
							IA5, ANY_CHAR
						  ) != OK ) {
			return (NOK);
		}
	}

	p_ssdu_val += (E10_MX_SZ_NET_ID + 1);

	return (OK);

}

#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			e10_llc_ra_ssdu - implements the specific processing
								  of a llc rate adaptation IE in a SSDU
								  primitive.

Usage			uchar e10_llc_ra_ssdu ();

Return value : 	e10_llc_ra_ssdu returns = OK
									= NOK

common constants and declarations : ns.h, net_i_s.h

common objects : internal data structure i_llc, ssdu common context.

*--------------------------------------------------------------------------*/

uchar e10_llc_ra_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = r_exec_ssdu_ie((uchar *)&E10_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = r_exec_ssdu_ie ((uchar *)&E10_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					r_exec_ssdu_ie ((uchar *)&E10_P_LLC_PAD);
					break;
			}
			return (r_exec_ssdu_ie ((uchar *)&E10_P_LLC_2));

	} else {

			switch (I_(llc,protocol_id_1)) {

				case PROTOCOL_ID_1_V110 :
					ret_code = s_exec_ssdu_ie((uchar *)&E10_P_LLC_V110);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				case PROTOCOL_ID_1_V120 :
					ret_code = s_exec_ssdu_ie ((uchar *)&E10_P_LLC_V120);

					if (ret_code != OK) {
						return (ret_code);
					}
					break;

				default :
					s_exec_ssdu_ie ((uchar *)&E10_P_LLC_PAD);
					break;
			}

			return (s_exec_ssdu_ie ((uchar *)&E10_P_LLC_2));
	}

}

uchar e10_bc_ssdu ()
{
	if (direction == FROM_CALL_CONTROL) {

#		if NS_TYPE_BRI == ON

			if (Na_type == BRI) return (r_exec_ssdu_ie ((uchar *)&E10_P_BC_BRI));

#		endif

#		if NS_TYPE_PRI == ON

			if (Na_type == PRI) return (r_exec_ssdu_ie ((uchar *)&E10_P_BC_PRI));

#		endif

	} else {

#		if NS_TYPE_BRI == ON

			if (Na_type == BRI) return (s_exec_ssdu_ie ((uchar *)&E10_P_BC_BRI));

#		endif

#		if NS_TYPE_PRI == ON

			if (Na_type == PRI) return (s_exec_ssdu_ie ((uchar *)&E10_P_BC_PRI));

#		endif
	}

	return (NOK);
}

/*

SSDU description structure :
--------------------------

		ssdu tab_ssdu
	=======================
	| id | p_ie | ie_size |				 ssdu_ie
	|----|------|---------|	 ======================================
	|	 |	X--------------->| codeset | id | add | type | p_prog |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |	X------> START
	|----|------|---------|	 |---------|----|-----|------|--------|	 XXXX
	|	 |		|		  |	 |		   |	|	  |		 |		  |	 YYYY
	|----|------|---------|	 |---------|----|-----|------|--------|	 END
	|	 |		|		  |	 |		   |	|	  |		 |		  |
	|----|------|---------|	 |---------|----|-----|------|--------|
	|	 |		|		  |	 |		   |	|	  |		 |		  |

*/

	/* NS primitive interface program */

/*====================	CALL  ESTABLISHMENT  MESSAGES	=====================*/

		/* NS_ALERT_IN */

#define E10_ALERT_RQ			E10_ALERT_IN
#define	E10_NET_ALERT_RQ		E10_ALERT_IN
#define	E10_NET_ALERT_IN		E10_ALERT_RQ

		/* NS_CALL_PROC_IN */

#define E10_CALL_PROC_RQ		E10_CALL_PROC_IN
#define E10_NET_CALL_PROC_RQ	E10_CALL_PROC_IN
#define E10_NET_CALL_PROC_IN	E10_CALL_PROC_RQ

		/* NS_CONN_IN */

		/* NS_CONN_CO */

#define E10_CONN_RQ					E10_CONN_IN
#define E10_CONN_RS					E10_CONN_CO
#define E10_NET_CONN_RQ				E10_CONN_IN
#define E10_NET_CONN_IN				E10_CONN_RQ
#define E10_NET_CONN_RS				E10_CONN_CO
#define E10_NET_CONN_CO				E10_CONN_RS


		/* NS_PROGRESS_IN */

#define	E10_PROGRESS_RQ				E10_PROGRESS_IN
#define	E10_NET_PROGRESS_RQ			E10_PROGRESS_IN
#define	E10_NET_PROGRESS_IN			E10_PROGRESS_RQ

#if NS_TYPE_BRI == ON /* { */

/*-------- NS_SETUP_ACK_RQ */

#define NET_SETUP_ACK_RQ_E10		SETUP_ACK_IN_E10

/*-------- NS_SETUP_ACK_IN */

#define NET_SETUP_ACK_IN_E10		SETUP_ACK_RQ_E10

#endif /* } */

/*=====================	CALL  CLEARING  MESSAGES	=======================*/

		/* NS_CLEAR_IN */

		/* NS_CLEAR_CO */

#define	E10_CLEAR_RQ				E10_CLEAR_IN
#define	E10_CLEAR_RS				E10_CLEAR_CO
#define	E10_NET_CLEAR_RQ			E10_CLEAR_IN
#define	E10_NET_CLEAR_IN			E10_CLEAR_RQ
#define	E10_NET_CLEAR_RS			E10_CLEAR_CO
#define	E10_NET_CLEAR_CO			E10_CLEAR_RS

/*====================		MISCELLANEOUS  MESSAGES	=======================*/


		/* NS_FAC_IN */

#define E10_FAC_RQ					E10_FAC_IN
#define E10_NET_FAC_RQ				E10_FAC_IN
#define E10_NET_FAC_IN				E10_FAC_RQ
#define E10_FAC_INFO_RQ				E10_FAC_IN
#define E10_FAC_INFO_IN				E10_FAC_RQ


		/* NS_RESTART_RQ - (No IE in this message) */

#define E10_RESTART_RQ				E10_RESTART_IN
#define E10_NET_RESTART_RQ			E10_RESTART_IN

		/* NS_RESTART_IN */

#define E10_NET_RESTART_IN			E10_RESTART_IN

		/* NS_RESTART_CO */

#define E10_RESTART_RS				E10_RESTART_IN
#define E10_NET_RESTART_RS			E10_RESTART_IN

		/* NS_RESTART_CO */

#define E10_RESTART_CO				E10_RESTART_IN
#define E10_NET_RESTART_CO			E10_RESTART_IN

		/* NS_SERVICE_CO */

#if NS_TYPE_BRI == ON

/*-------- NS_INFO_IN */

#define INFO_RQ_E10			 	INFO_IN_E10
#define NET_INFO_IN_E10			INFO_RQ_E10
#define NET_INFO_RQ_E10			INFO_IN_E10

/*-------- NS_SPF_FACILITY_RQ */

#define E10_NET_SPF_FACILITY_CO			 E10_SPF_FACILITY_RQ
#define E10_SPF_FACILITY_CO				 E10_SPF_FACILITY_RQ
#define E10_NET_SPF_FACILITY_RQ			 E10_SPF_FACILITY_CO

#endif

/*=========================================================================*/

#define Ns_e10_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_e10_end_table_or_function		};

#define Ns_e10_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		\
			Ns_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a),

#define Ns_e10_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_tab_ssdu_ie_mx_entry (codes, ie, pr, o_m, mp_a, mx),

#define Message_header_ssdu_ie_e10		Message_header_ssdu_ie

#	if EQUIPMENT == TE
#		define Ns_e10_tab_ssdu_entry(pr, u_n, p_ie, nb_ie)		\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie),
#	else
#		define Ns_e10_tab_ssdu_entry(pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie)	\
					Ns_tab_ssdu_entry (pr, u_n, p_ie, nb_ie, p_nt_ie, nb_nt_ie),
#	endif

#include "e10.tab_ssdu"		/* include other Tables describing the IEs and primitives */

#define E10_MX_SSDU (sizeof(E10_TAB_SSDU)/sizeof(struct ssdu)) /* number of element in the table */

CONST uchar	e10_mx_size_ssdu = E10_MX_SSDU;

/*--------------------------------------------------------------------------*/
#if NS_TYPE_BRI == ON

uchar e10_get_spid ()
{

	I_man_param_counter = 0;        /* initialize the parameter counter */

	if (direction == TO_CALL_CONTROL) {

    	*p_ssdu_val++ = Dl_ces;
        while (I_man_param_counter < NS_MX_MAN_PARAM) {

            if (I_man_param_id == PARAM_SPID) {

            		*p_ssdu_val++ = (I_man_param_lgth + 1);
                    if (check_convert ( (uchar FAR *) p_ssdu_val,
                                        (uchar FAR *) I_man_param_a_spid,
                                        I_man_param_lgth,
                                        IA5, ANY_CHAR
                                      ) != OK ) return (NOK);

                    p_ssdu_val += I_man_param_lgth;
                    *p_ssdu_val++ = 0;
                    return (OK);
            }

            I_man_param_counter++;
        }

        return (NOK);
    }

    return (OK);
}

#endif

#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */

#   if NEW_FCT_STYLE == ON
	uchar   e10_check_1_254_ssdu    (uchar FAR * p_i_field);
	uchar	e10_check_sca_ssdu		(uchar FAR * p_i_field);
#else
	uchar   e10_check_1_254_ssdu    ();
	uchar	e10_check_sca_ssdu		();
#endif

/*--------------------------------------------------------------------------*/

uchar   e10_dest_call_appear_ssdu ()        /* test for value between 1 and 254 */
{
	return (e10_check_1_254_ssdu (&(I_dest_call_appear_button_nb)));
}

/*--------------------------------------------------------------------------*/

uchar   e10_feature_act_ssdu ()             /* test for value between 1 and 254 */
{
	return (e10_check_1_254_ssdu (&(I_feature_act_button_nb)));
}

/*--------------------------------------------------------------------------*/

uchar   e10_feature_ind_init_ssdu ()        /* init flag for MBS */
{
	I_feature_ind_i_flag = ON;
	I_feature_ind_i_counter_ssdu = 0;
	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar   e10_feature_ind_ssdu ()
{
	switch (I_feature_ind_status_type) {

		case FEATURE_NUMBER_STATUS :

			if (I_feature_ind_i_flag == ON) {
				I_feature_ind_i_flag = OFF;
				*p_ssdu_val++ = I_feature_ind_i_counter_spdu;
			}

			if ((I_feature_ind_feature_ssdu == 0) ||
				(I_feature_ind_feature_ssdu == 253) ||
				(I_feature_ind_feature_ssdu == 255))
				return (NOK);
			*p_ssdu_val++ = I_feature_ind_feature_ssdu;

			switch (I_feature_ind_status_ssdu) {
				case STATUS_ACTIVATED :
				case STATUS_DEACTIVATED :
				case STATUS_PENDING :
				case STATUS_LOCAL_HOLD :
				case STATUS_REMOTE_HOLD :
				case STATUS_CONFIRMED :
				case STATUS_ALREADY_IN_RQ_STATE :
				case STATUS_REJECTED :
					*p_ssdu_val++ = I_feature_ind_status_ssdu;
					break;
				default :
					return (NOK);
			}

			if (I_feature_ind_i_counter_ssdu++ == I_feature_ind_i_counter_spdu) return (OK);
			return (e10_feature_ind_ssdu ());

		case FEATURE_BUTTON_STATUS :

			if (I_feature_ind_i_flag == ON) {
				I_feature_ind_i_flag = OFF;
				*p_ssdu_val++ = I_feature_ind_i_counter_spdu;
			}

			if (e10_check_1_254_ssdu (&(I_feature_ind_feature_ssdu)) != OK) return (NOK);

			switch (I_feature_ind_indicator_ssdu) {
				case INDICATOR_0 :
				case INDICATOR_1 :
				case INDICATOR_2 :
				case INDICATOR_3 :
					*p_ssdu_val++ = I_feature_ind_indicator_ssdu;
					break;
				default :
					return (NOK);
			}

			switch (I_feature_ind_status_ssdu) {
				case STATUS_ACTIVATED :
				case STATUS_DEACTIVATED :
				case STATUS_PENDING :
				case STATUS_LOCAL_HOLD :
				case STATUS_REMOTE_HOLD :
				case STATUS_CONFIRMED :
				case STATUS_ALREADY_IN_RQ_STATE :
				case STATUS_REJECTED :
					*p_ssdu_val++ = I_feature_ind_status_ssdu;
					break;
				default :
					return (NOK);
			}

			if (I_feature_ind_i_counter_ssdu++ == I_feature_ind_i_counter_spdu) return (OK);
			return (e10_feature_ind_ssdu ());

		case MULTIPLE_BUTTON_STATUS :

			if (I_feature_ind_i_flag == ON) {
				I_feature_ind_i_flag = OFF;
				if (e10_check_1_254_ssdu (&(I_feature_ind_starting_feature)) != OK) return (NOK);
				if (e10_check_1_254_ssdu (&(I_feature_ind_number_of_button)) != OK) return (NOK);
				*p_ssdu_val++ = I_feature_ind_i_counter_spdu;
			}

			*p_ssdu_val++ = I_feature_ind_status_ssdu;

			if (I_feature_ind_i_counter_ssdu++ == I_feature_ind_i_counter_spdu) return (OK);
			return (e10_feature_ind_ssdu ());

		case MAINTENANCE_STATUS :
			return (s_exec_ssdu_ie ((uchar *)&E10_P_FEATURE_IND_MS));

		default :
			return (NOK);
	}
}

/*--------------------------------------------------------------------------*/

uchar   e10_ori_call_appear_ssdu ()         /* test for value between 1 and 254 */
{

	if (direction == FROM_CALL_CONTROL)	{

		I_ori_call_appear_button_nb = *p_ssdu_val;

		if (I_ori_call_appear_button_nb == 255) return (NOK);

		Dl_button_user = I_ori_call_appear_button_nb;

		if (I_ori_call_appear_button_nb == 0) {

			if (Dl_button_net == 0) {
				I_ori_call_appear_button_nb = 1;

			} else {

				I_ori_call_appear_button_nb = Dl_button_net;

			}

		}

	}

	return (OK);
}

/*--------------------------------------------------------------------------*/

uchar   e10_sel_call_appear_ssdu ()         /* test for value between 0 and 254 */
{
	return (e10_check_sca_ssdu (&(I_sel_call_appear_button_nb)));
}

/*--------------------------------------------------------------------------*/

uchar   e10_check_1_254_ssdu (p_i_field)        /* test for value between 1 and 254 */
	uchar FAR * p_i_field;
{
	uchar   code;           /* code */

	if (direction == FROM_CALL_CONTROL) {

		code = *p_ssdu_val++;

		if (code > 0 && code < 255) {
			*p_i_field = code;
			return (OK);

		} else {

			return (NOK);
		}

	} else {

			/* from NETWORK - check done at the receipt of the spdu */

#		if ASSERT == ON
		if ((*p_i_field == 0) || (*p_i_field == 255)) return (NOK);
#		endif
		*p_ssdu_val++ = *p_i_field;
		return (OK);
	}

}

/*--------------------------------------------------------------------------*/

uchar   e10_check_sca_ssdu (p_i_field)
	uchar FAR * p_i_field;
{
	uchar   code;           /* code */

	if (direction == FROM_CALL_CONTROL) {

		code = *p_ssdu_val++;

		if (code > 0 && code < 255) {
			*p_i_field = code;
			return (OK);

		} else {

			return (NOK);
		}

	} else {

			/* from NETWORK - check done at the receipt of the spdu */

#		if ASSERT == ON
		if (*p_i_field == 255) return (NOK);
#		endif
		*p_ssdu_val++ = *p_i_field;
		return (OK);
	}

}

/*--------------------------------------------------------------------------*/

uchar e10_conn_id_to_call_ref ()
{
	uchar ret;
	struct call *p_save_call;

	if (direction == FROM_CALL_CONTROL) {
		p_save_call = p_call;
		ret = ns_access_conn_id (ANY_CALL, I_other_call_ref_conn_id);
		I_other_call_ref_flag = (Call_ref & Mask (1));
		I_other_call_ref_val = ((Call_ref >> 1) & Mask (7));
		p_call = p_save_call;
		return (ret);

	} else {

			/* from D_CHANNEL - check done at the receipt of the spdu */

		return (OK);
	}

}

#endif /* } */

/*-------------------------------------------------------------------------*/

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Tables above */

#undef Ns_e10_table_or_function
#undef Ns_e10_end_table_or_function
#undef Ns_e10_tab_ssdu_ie_entry
#undef Ns_e10_tab_ssdu_ie_mx_entry
#undef Ns_e10_tab_ssdu_entry

#define Ns_e10_table_or_function(str, tab)	i_pic = 0;						\
											{								\
												struct str FAR	*p_table;	\
												p_table = tab;

#define Ns_e10_end_table_or_function		}

#define Ns_e10_tab_ssdu_ie_entry(codes, ie, pr, o_m, mp_a)		Pic_init_struct_array_next (p_table, p_prog, mp_a);

#define Ns_e10_tab_ssdu_ie_mx_entry(codes, ie, pr, o_m, mp_a, mx)	\
			Ns_e10_tab_ssdu_ie_entry (codes, ie, pr, o_m, mp_a)

#if MESSAGE_HEADER_IE == ON
#	undef Message_header_ssdu_ie_e10
#	define Message_header_ssdu_ie_e10		Ns_e10_tab_ssdu_ie_entry (0, 0, 0, 0, (uchar *)&SSDU_MESSAGE_HEADER)
#endif

#if EQUIPMENT == TE
#	define Ns_e10_tab_ssdu_entry(pr, u_n, tab, nb_ie)		Pic_init_struct_array_next (p_table, p_ie, tab);
#else
#	define Ns_e10_tab_ssdu_entry(pr, u_n, tab, nb_ie, nt_tab, nb_nt_ie)		\
			Pic_init_struct_array (p_table, i_pic, p_ie, tab);				\
			Pic_init_struct_array_next (p_table, p_net_ie, nt_tab);
#endif

void pic_init_ns_e10_ssdu ()
{
	uchar   i_pic;

#	include "e10.tab_ssdu"
}

#endif /* end of PIC used} */

/*EOF*/

