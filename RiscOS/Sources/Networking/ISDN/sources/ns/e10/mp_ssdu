
/*-------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - mp_ssdu.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta definition of the interface between the Call Control
 * (CC) and the network signalling entity (NS).
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#if NS_INCLUDE_SSDU_META_FUNCTION == ON

	uchar	e10_chan_id_ssdu					(Void_parm);
	uchar	e10_chan_id_chan_nb_ssdu			(Void_parm);

#	if NS_SPF_FACILITY == ON
		uchar	e10_spf_fac_ssdu				(Void_parm);
#	endif

	uchar	e10_llc_ra_ssdu						(Void_parm);
	uchar	e10_bc_ssdu							(Void_parm);

#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		uchar	e10_dest_call_appear_ssdu		(Void_parm);		/* test for value between 1 and 254*/
		uchar	e10_feature_act_ssdu			(Void_parm);		/* test for value between 1 and 254 */
		uchar	e10_feature_ind_init_ssdu		(Void_parm);		/* init flag for MBS */
		uchar	e10_feature_ind_ssdu			(Void_parm);
		uchar	e10_insert_button_nb			(Void_parm);
		uchar	e10_ori_call_appear_ssdu		(Void_parm);		/* test for value between 1 and 254 */
		uchar	e10_conn_id_to_call_ref			(Void_parm);
		uchar	e10_sel_call_appear_ssdu		(Void_parm);		/* test for value between 1 and 254 */
#	endif

#endif

		/*
			meta description of the primitives used to communicate between
			layer 4 and layer 3 of the network signalling entities.
			These primitives are network dependent.
			(Ordered alphabetically)
		*/
/*-------------------------------------------------------------------------*/

			/* CALL_STATE : call state */

D_START	(E10_P_CALL_STATE)
	D_TABL	(VAL_)
D_END		(CALL_STATE_END)

START	(E10_P_CALL_STATE)
	TABL	(E10_T_CALL_STATE,				&i_call_state[0].val)
END			(0)

/*-------------------------------------------------------------------------*/

			/* CALLED_NB : called party number */

D_START	(E10_P_CALLED_NB)
	D_TABL	(PLAN_)
	D_TABL	(_TYPE)
	D_TEXT	(IA5_DIGIT_E)

D_END (P_CALLED_NB_END)

START (E10_P_CALLED_NB)

	TABL	(E10_T_NB_PLAN, &i_called_nb[0].plan_id)
	TABL	(E10_T_NB_TYPE,	&i_called_nb[0].nb_type)
	TEXT	(1,E10_MX_SZ_CALLED_NB, DIGIT_E,	&i_called_nb[0].lgth, (uchar **)&i_called_nb[0].p_add)

END			(0)

/*-------------------------------------------------------------------------*/

			/* CALLING_NB : calling party number */

D_START	(E10_P_CALLING_NB)
	D_TABL	(PLAN)
	D_TABL	(TYPE)
	D_TABL	(PRESENTATION)
	D_TABL	(SCREEN_IND)
	D_TEXT	(DIGIT_TY)
D_END   (CALLING_NB_E)

START	(E10_P_CALLING_NB)
	TABL	(E10_T_NB_PLAN, 			&i_calling_nb[0].plan_id)
	TABL	(E10_T_NB_TYPE,				&i_calling_nb[0].nb_type)
	TABL	(E10_T_CALLING_NB_PRES,		&i_calling_nb[0].pres)
	TABL	(E10_T_SCREEN_IND,			&i_calling_nb[0].screen_ind)
	TEXT	(0,E10_MX_SZ_CALLING_NB,DIGIT_E, 	&i_calling_nb[0].lgth, (uchar **)&i_calling_nb[0].p_add)
END		(0)

/*-------------------------------------------------------------------------*/

			/* CAUSE : Cause */

D_START	(E10_P_CAUSE)
	D_TABL		(CODING_STD)
	D_TABL		(LOCATION)
	D_TABL		(C_CLASS_)
	D_TABX		(C_V_)
	D_TEXT		(DIAG_OCTETS)
D_END	(CAUSE_E_A)

START	(E10_P_CAUSE)
	TABL	(E10_T_CODING_STD_CAUSE,	&i_cause[0].coding_std)
	TABL	(E10_T_LOCATION,			&i_cause[0].cause_loc)
	TABL	(E10_T_C_C,					&i_cause[0].cause_class)
	TABX	(E10_TX_C_V,				&i_cause[0].cause_class,  &i_cause[0].cause_val)
	TEXT	(0,E10_MX_SZ_CAUSE_DIAG,ANY_CHAR,&i_cause[0].diag_lgth, (uchar **)&i_cause[0].p_diagnostic)
END	 (0)

/*-------------------------------------------------------------------------*/

			/* CHAN_ID : channel identification */

D_START	(E10_P_CHAN_ID)
	D_TABL			(INT_ID)
	D_TABL  		(INT_TYPE)
	D_TABL  		(PREF_EXCL)
	D_TABL  		(_D_CHAN)
	D_TABX  		(SEL)

	D_IF_VAL		(IF_INT)
		D_TABL 		(_INT_)
	D_ELSE			(_NOT_PROVIDED)
		D_PAD		(_INT)
	D_END_IF		(INT_)

	D_IF_VAL		(IF_3_2)
		D_TABL  	(NB_MAP)

		D_IF_VAL	(_MAP)
			D_FUNCTION	(_CHAN_NB_)
			D_TEXT  (NBER)
		D_ELSE		(CHAN_NB_)
			D_TEXT  (_MAPPING)
		D_END_IF	(MAP_CHAN)

	D_ELSE			(_BRI_TYPE)
		D_PAD		(_1)
	D_END_IF		(BRI_TYPE)

D_END	(CHAN_ID_E)

START	(E10_P_CHAN_ID)
	TABL			(E10_T_CHAN_INT,		&i_chan_id[0].int_id)
	TABL			(E10_T_INT_TYPE,		&i_chan_id[0].int_type)
	TABL			(E10_T_CHAN_PREF_EXCL,  &i_chan_id[0].pref_excl)
	TABL			(E10_T_D_CHAN,			&i_chan_id[0].d_chan)
	TABX			(E10_TX_CHAN_SEL,		&i_chan_id[0].int_type, &i_chan_id[0].chan_sel)

	IF_VAL			(&i_chan_id[0].int_id, EQ, INT_ID_EXPLICIT)
		TABL		(E10_T_CHAN_INT_VAL,	&i_chan_id[0].int_id_val)
	ELSE			()
		PAD			(1)
	END_IF			()

	IF_VAL  		(&i_chan_id[0].int_type, NE, INT_TYPE_BRI)
		TABL		(E10_T_NB_MAP,			&i_chan_id[0].nb_map)

		IF_VAL		(&i_chan_id[0].nb_map, EQ, CHAN_NUMBER)
			FUNCTION(e10_chan_id_chan_nb_ssdu)
			TEXT	(0,E10_MX_SZ_CHAN_ID,ANY_CHAR,	&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		ELSE		()
			TEXT	(0,E10_MX_SZ_CHAN_ID,ANY_OCTET,	&i_chan_id[0].chan_nb_lgth, (uchar **)&i_chan_id[0].p_chan_nb)
		END_IF		()

	ELSE			()
		PAD			(1)
	END_IF			()

END		(e10_chan_id_ssdu)

/*-------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

			/* SPF_FAC : network specific facilities */

D_START	(E10_P_SPF_FAC)
	D_TABL		(NETWORK_ID_LGTH)
	D_FUNCTION	(SPF_FAC_FCT)
	D_TABL		(FAC_ACTION_)
	D_TABL		(FAC_SERV_FEAT_)
	D_TABX		(FAC_CODE_)
	D_TEXT		(FAC_INFO_)
D_END			(SPF_FAC_END)

START	(E10_P_SPF_FAC)
	TABL		(E10_T_NET_ID_LGTH,				&i_spf_fac[0].net_id_lgth)
	FUNCTION	(e10_spf_fac_ssdu)
	TABL		(E10_T_PARAMETER_BINARY,		&i_spf_fac[0].action)
	TABL		(E10_T_FAC_SERV_FEAT,			&i_spf_fac[0].serv_feature)
	TABX		(E10_TX_FAC_CODE,				&i_spf_fac[0].action, &i_spf_fac[0].facility_coding)
	TEXT		(0,E10_MX_SZ_SPF_FAC,DIGIT,		&i_spf_fac[0].lgth, (uchar **)&i_spf_fac[0].p_fac)
END		(0)

#endif

/*-------------------------------------------------------------------------*/

			/* LLC : low layer compatibility */

D_START	(E10_P_LLC)
	D_TABL	(CODING_STD)
	D_TABL	(TRF_CAP)
	D_TABL	(OUT_BAND_NEG)
	D_TABL	(TRF_MODE)
	D_TABX	(TRF_RATE)
	D_TABL	(STRUCT)
	D_TABX	(DEST_RATE)
	D_TABL	(PROTOCOL_1)
D_END	(P_LLC_1)

START	(E10_P_LLC)
	TABL	(E10_T_CODING_STD,				&i_llc[0].coding_std)
	TABL	(E10_T_TRF_CAP_LLC,				&i_llc[0].trf_cap)
	TABL	(E10_T_OUT_BAND_NEG,			&i_llc[0].out_band_neg)
	TABL	(E10_T_TRF_MODE,				&i_llc[0].trf_mode)
	TABX	(E10_TX_TRF_RATE,				&i_llc[0].trf_mode,	&i_llc[0].trf_rate)
	TABL	(E10_T_STRUCTURE,				&i_llc[0].structure)
	TABX	(E10_TX_TRF_RATE,					&i_llc[0].trf_mode,	&i_llc[0].dest_rate)
	TABL	(E10_T_PROTOCOL_ID_LLC_1,		&i_llc[0].protocol_id_1)
END		(e10_llc_ra_ssdu)

		/* V110 */

D_START	(E10_P_LLC_V110)
	D_TABL	(V110_SYN_ASYN)
	D_TABL	(V110_NEGOTIATION)
	D_TABL	(V110_USER_RATE)
	D_TABL	(V110_INTER_RATE)
	D_TABL	(V110_TX_NIC)
	D_TABL	(V110_RX_NIC)
	D_TABL	(V110_TX_FC)
	D_TABL	(V110_RX_FC)
	D_PAD	(P_9_14)
	D_TABL	(V110_STOP_BIT)
	D_TABL	(V110_DATA_BIT)
	D_TABL	(V110_PARITY)
	D_TABL	(V110_DUPLEX)
	D_TABL	(V110_MODEM)
D_END (ENDIF_V110)

START	(E10_P_LLC_V110)
	TABL	(E10_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(E10_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(E10_T_USER_RATE,			&i_llc[0].user_rate)
	TABL	(E10_T_INTER_RATE,			&i_llc[0].inter_rate)
	TABL	(E10_T_NIC_TX,				&i_llc[0].tx_nic)
	TABL	(E10_T_NIC_RX,				&i_llc[0].rx_nic)
	TABL	(E10_T_FLOW_CONTROL_TX,		&i_llc[0].tx_fc)
	TABL	(E10_T_FLOW_CONTROL_RX,		&i_llc[0].rx_fc)
	PAD		(6)
	TABL	(E10_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(E10_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(E10_T_PARITY,				&i_llc[0].parity)
	TABL	(E10_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(E10_T_MODEM,				&i_llc[0].modem)
END	(0)

D_START	(E10_P_LLC_V120)
	D_TABL	(V120_SYN_ASYN)
	D_TABL	(V120_NEGOTIATION)
	D_TABL	(V120_USER_RATE)
	D_PAD	(P_4_8)
	D_TABL	(V120_HDR)
	D_TABL	(V120_MULTI_FRAME)
	D_TABL	(V120_OP_MODE)
	D_TABL	(V120_LLI)
	D_TABL	(V120_ASSIGN)
	D_TABL	(V120_BAND)
	D_TABL	(V120_STOP_BIT)
	D_TABL	(V120_DATA_BIT)
	D_TABL	(V120_PARITY)
	D_TABL	(V120_DUPLEX)
	D_TABL	(V120_MODEM)
D_END (ENDIF_V120)

		/* V120 */

START	(E10_P_LLC_V120)
	TABL	(E10_T_SYN_ASYN,			&i_llc[0].syn_asyn)
	TABL	(E10_T_NEGOTIATION,			&i_llc[0].in_band_neg)
	TABL	(E10_T_USER_RATE,			&i_llc[0].user_rate)
	PAD		(5)
	TABL	(E10_T_HEADER,				&i_llc[0].hdr)
	TABL	(E10_T_MULTI_FRAME,			&i_llc[0].multi_frame)
	TABL	(E10_T_OP_MODE,				&i_llc[0].op_mode)
	TABL	(E10_T_LLI,					&i_llc[0].lli)
	TABL	(E10_T_ASSIGN,				&i_llc[0].assign)
	TABL	(E10_T_BAND,				&i_llc[0].band)
	TABL	(E10_T_STOP_BIT,			&i_llc[0].stop_bit)
	TABL	(E10_T_DATA_BIT,			&i_llc[0].data_bit)
	TABL	(E10_T_PARITY,				&i_llc[0].parity)
	TABL	(E10_T_DUPLEX,				&i_llc[0].duplex)
	TABL	(E10_T_MODEM,				&i_llc[0].modem)
END	(0)

		/* other rate adaption */

D_START	(E10_P_LLC_PAD)
	D_PAD	(P_1_19)
D_END		(END_PAD_RA)

START	(E10_P_LLC_PAD)
	PAD		(19)
END			(0)

D_START	(E10_P_LLC_2)
	D_TABL		(PROTOCOL_ID_2)
	D_ANY_VAL	(OPT_2)
	D_TABL		(PROTOCOL_ID_3)
	D_ANY_VAL	(OPT_3)
D_END		(LLC_E)

START	(E10_P_LLC_2)
	TABL	(E10_T_PROTOCOL_ID_LLC_2,		&i_llc[0].protocol_id_2)
	ANY_VAL	(&i_llc[0].option_2)
	TABL	(E10_T_PROTOCOL_ID_LLC_3,		&i_llc[0].protocol_id_3)
	ANY_VAL	(&i_llc[0].option_3)
END			(0)

/*-------------------------------------------------------------------------*/

			/* PROGRESS_IND : progress indicator */

D_START	(E10_P_PROGRESS_IND)
	D_TABL	(CODING_STD)
	D_TABL	(LOCATION)
	D_TABL	(DESCRIPTION)
D_END		(PROGRESS_IND_E)

START	(E10_P_PROGRESS_IND)
	TABL	(E10_T_CODING_STD_PROGRESS,		&i_progress_ind[0].coding_std)
	TABL	(E10_T_LOCATION,				&i_progress_ind[0].progress_loc)
	TABL	(E10_T_PROGRESS_IND_DESCR,		&i_progress_ind[0].progress_descr)
END			(0)

			/* ---------- User entered code (USER_ENTERED_CODE) */

D_START	(E10_P_USER_ENTERED_CODE)
	D_TABL	(TYPE)
	D_TEXT  (CODE)
D_END		(TRANSIT_NET_SEL_E)

START	(E10_P_USER_ENTERED_CODE)
	TABL	(E10_T_CODE_TYPE,				&i_user_entered_code[0].code_type)
	TEXT	(0,E10_MX_SZ_USER_ENTERED_CODE, ANY_CHAR,&i_user_entered_code[0].lgth, (uchar **)&i_user_entered_code[0].p_user_code)
END			(0)



/*-------------------------------------------------------------------------*/

			/* BC : bearer capabilities */

#if NS_TYPE_PRI == ON /* { */

D_START	(E10_P_BC_PRI)
	D_TABL		(TRF_CAP)
	D_TABL		(TRF_RATE_)

	D_IF_VAL	(_TRF_RATE_MULTI_RATE)
		D_TABL	(_MULTIPLIER)
		D_PAD	(_PROTO_1_AND_2)
	D_ELSE		(_NO_MULT)
		D_PAD	(_MULTI)
		D_TABL	(PROTOCOL_1)
	D_END_IF	(_N_64)

	D_PAD		(_BRI)

D_END	(P_BC_1)

START	(E10_P_BC_PRI)
	TABL		(E10_T_TRF_CAP_BC,			&i_bc[0].trf_cap)
	TABL		(E10_T_TRF_RATE,			&i_bc[0].trf_rate)

	IF_VAL		(&i_bc[0].trf_rate, EQ, TRF_RATE_MULTI_RATE)
		TABL	(E10_T_MULTIPLIER,			&i_bc[0].Multiplier)
		PAD		(1)
	ELSE		()
		PAD		(1)
		TABL	(E10_T_BC_PROTOCOL_ID_1,	&i_bc[0].protocol_id_1)
	END_IF		()

	PAD			(7)
END		(0)

#endif /* } */

#if NS_TYPE_BRI == ON /* { */

/*---------- Bearer capability (BC) */

D_START	(E10_P_BC_BRI)
		D_TABL              (TRF_CAP)
		D_PAD				(_PRI)

		D_IF_VAL            (BASIC_DATA)

			D_TABL          (TRF_MODE)
			D_TABX          (TRF_RATE_4b)
			D_TABL          (LAYER_NB)

			D_IF_VAL        (IS_LAYER)
				D_TABX      (LAYER_ID)
				D_TABX      (BC_PROT_ID)

				D_IF_VAL    (TWO_LAYERS)
					D_TABX  (LAYER_ID_2_3)
					D_TABX  (BC_PROT_ID_2_3)
				D_ELSE      (LAYER_2)
					D_PAD   (P_1_2)
				D_END_IF    (LAYER_2_OR_NOT)
			D_ELSE          (NO_LAYER)
				D_PAD       (P_3_6)
			D_END_IF        (LAYER_IS)
		D_ELSE              (VOICE_SERVICE)
			D_PAD           (P_7_13)
		D_END_IF            (SERVICE_TYPE)

D_END   (END_SSDU)

START	(E10_P_BC_BRI)
		TABL    (E10_T_TRF_CAP_BC,                         &i_bc[0].trf_cap)
		PAD		(3)

		IF_VAL  (&i_bc[0].trf_cap, NE, TRF_CAP_SPEECH)

				/* Basic data */

			TABL            (E10_T_TRF_MODE,            &i_bc[0].trf_mode)
			TABX            (E10_TX_TRF_RATE,           &i_bc[0].trf_mode,      &i_bc[0].trf_rate)
			TABL            (E10_T_LAYER_NB,            &i_bc[0].Layer_nb)

			IF_VAL          (&i_bc[0].Layer_nb, NE, 0)
				TABX        (E10_TX_LAYER_ID,           &i_bc[0].trf_mode,      &i_bc[0].Layer_id)
				TABX        (E10_TX_BC_PROTOCOL_ID,     &i_bc[0].Layer_id,      &i_bc[0].Protocol_id)

				IF_VAL      (&i_bc[0].Layer_nb, EQ, 2)
					TABX    (E10_TX_LAYER_ID,           &i_bc[0].trf_mode,      &i_bc[0].Add_layer_id)
					TABX    (E10_TX_BC_PROTOCOL_ID,     &i_bc[0].Add_layer_id,  &i_bc[0].Add_protocol_id)
				ELSE        ()
					PAD     (2)
				END_IF      ()
			ELSE            ()
				PAD         (4)
			END_IF          ()
		ELSE                ()
			PAD             (7)
		END_IF              ()
END     (0)

#endif /* } */


D_START (E10_P_BC)
D_END	(E10_P_BC_E)

START	(E10_P_BC)
END		(e10_bc_ssdu)

/****************************************************************************/
/*					Basic Rate specific IES meta programms					*/
/****************************************************************************/

#if NS_TYPE_BRI == ON /* { */

			/* CALLED_SUB_ADD : called party sub address */

D_START	(E10_P_CALLED_SUB_ADD)
	D_TABL (NBERING_TYPE)
	D_TABL (ODD_EVEN_IND)

	D_IF_VAL(OSI_SUB_ADD)
		D_TEXT  (INFO_OSI)
	D_ELSE	(NOT_OSI)
		D_TEXT  (INFO_NOT_OSI)
	D_END_IF	(TYPE_SUB_ADD)

D_END (P_CALLED_SUB_ADD_END)

START	(E10_P_CALLED_SUB_ADD)
	TABL (E10_T_SUB_ADD_TYPE,		&i_called_sub_add[0].sub_add_type)
	TABL (E10_T_SUB_ADD_IND,		&i_called_sub_add[0].odd_even_ind)

	IF_VAL  (&i_called_sub_add[0].sub_add_type, EQ, SUB_ADD_OSI)
		TEXT (1,E10_MX_SZ_CALLED_SUB_ADD,DIGIT,		&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	ELSE	()
		TEXT (1,E10_MX_SZ_CALLED_SUB_ADD,ANY_OCTET,	&i_called_sub_add[0].lgth,	(uchar **)&i_called_sub_add[0].p_add)
	END_IF	()
END (0)

/*---------- Service Identifier         (SERVICE_ID) */

D_START	(E10_P_SERVICE_ID)
		D_ANY_VAL   (SERVICE_ID_CODE)
D_END   (END_SSDU)

START	(E10_P_SERVICE_ID)
		ANY_VAL     (&i_service_id[0].service_id)       /* check done in the automaton */
END     (0)

/*---------- Keypad (KEYPAD) */

D_START	(E10_P_KEYPAD)
		D_TEXT  (KEYPAD_VAL)
D_END   (END_SSDU)

START	(E10_P_KEYPAD)
		TEXT(1,E10_MX_SZ_KEYPAD,DIGIT_E,	&i_keypad[0].lgth, (uchar **)&i_keypad[0].p_info)
END     (0)

/*---------- Terminal capabilities (TE_CAP) */

D_START	(E10_P_TE_CAP)
D_END   (END_SSDU)

START	(E10_P_TE_CAP)
END     (0)

#endif /* } */

#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */

/*---------- Adjunct Control            (ADJUNCT_CON) */

D_START	(E10_P_ADJUNCT_CON)
		D_TABL  (ADJUNCT_VAL)
D_END   (END_SSDU)

START	(E10_P_ADJUNCT_CON)
		TABL    (E10_T_ADJUNCT_VAL,             &i_adjunct_con[0].adjunct_val)
END     (0)

/*---------- associated type            (ASSOC_TYPE) */

D_START	(E10_P_ASSOC_TYPE)
	D_TABL  (ASSOC_STATUS)
D_END   (END_SSDU)

START	(E10_P_ASSOC_TYPE)
	TABL    (E10_T_ASSOC_STATUS,                &i_assoc_type[0].assoc_status)
END     (0)

/*---------- Destination Call Appearance (DEST_CALL_APPEAR) */

D_START	(E10_P_DEST_CALL_APPEAR)
D_END   (END_SSDU)

START	(E10_P_DEST_CALL_APPEAR)
END     (e10_dest_call_appear_ssdu)

/*---------- Display Control            (DISPLAY_CON) */

D_START	(E10_P_DISPLAY_CON)
		D_TABL  (DISPLAY_MODE)
D_END   (END_SSDU)

START	(E10_P_DISPLAY_CON)
		TABL    (E10_T_DISPLAY_CON_MODE,        &i_display_con[0].display_con_mode)
END     (0)

/*---------- Display Field              (DISPLAY_FLD) */

D_START (E10_P_DISPLAY_FLD)
		D_TABL  (DISPLAY_MODE)
		D_TABL  (SUB_MODE)
		D_TABL  (DISPLAY_FLD_TYPE)
		D_IF_VAL(_TYPE_CALL_APPEAR_ID)
			D_TEXT (DISPLAY_INFO_BINARY)
		D_ELSE(_OTHER_TYPE)
			D_TEXT (DISPLAY_INFO_TEXT)
		D_END_IF(_TYPE)
D_END   (END_SSDU)

START   (E10_P_DISPLAY_FLD)
		TABL    (E10_T_DISPLAY_FLD_MODE,        &i_display_fld[0].display_fld_mode)
		TABL    (E10_T_DISPLAY_SUBMODE,         &i_display_fld[0].submode)
		TABL    (E10_T_DISPLAY_FLD_TYPE,        &i_display_fld[0].display_fld_type)
		IF_VAL  (&i_display_fld[0].display_fld_type, EQ, CALL_APPEAR_ID)
			TEXT(1,E10_MX_SZ_DISPLAY_FLD, ANY_OCTET,  &i_display_fld[0].info_lgth, (uchar **)&i_display_fld[0].p_info)
		ELSE    ()
			TEXT(1,E10_MX_SZ_DISPLAY_FLD, ANY_CHAR,  &i_display_fld[0].info_lgth, (uchar **)&i_display_fld[0].p_info)
		END_IF  ()
END     (0)


/*---------- Feature Activation         (FEATURE_ACT) */

D_START	(E10_P_FEATURE_ACT)
		D_TABL  (BUTTON_TYPE)
		D_TABL  (MODULE_NB)
D_END   (END_SSDU)

START	(E10_P_FEATURE_ACT)
		TABL    (E10_T_BUTTON_TYPE_ACT,         &i_feature_act[0].button_type_act)
		TABL    (E10_T_MODULE_NB,               &i_feature_act[0].module_nb)
END     (e10_feature_act_ssdu)

/*---------- Feature Indication         (FEATURE_IND) */

D_START	(E10_P_FEATURE_IND)
		D_TABL      (BUTTON_TYPE)
		D_TABL      (MODULE_NB)
		D_TABL      (STATUS_TYPE)
		D_FUNCTION  (INIT_FLAG_MBS)
D_END   (END_SSDU)

START	(E10_P_FEATURE_IND)
		TABL        (E10_T_BUTTON_TYPE_IND,         &i_feature_ind[0].button_type_ind)
		TABL        (E10_T_MODULE_NB,               &i_feature_ind[0].module_nb)
		TABL        (E10_T_STATUS_TYPE,             &i_feature_ind[0].status_type)
		FUNCTION    (e10_feature_ind_init_ssdu)
END     (e10_feature_ind_ssdu)

D_START	(E10_P_FEATURE_IND_MS)
		D_TABL  (MEANING)
D_END   (END_SSDU)

START	(E10_P_FEATURE_IND_MS)
		TABL    (E10_T_FEATURE_MEANING,             &i_feature_ind[0].meaning)
END     (0)

/*---------- Keypad Control             (KEYPAD_CON) */

D_START	(E10_P_KEYPAD_CON)
		D_TABL  (CALL_REF_TYPE)
D_END   (END_SSDU)

START	(E10_P_KEYPAD_CON)
		TABL    (E10_T_CALL_REF_TYPE,           &i_keypad_con[0].call_ref_type)
END     (0)

/*---------- Origination Call Appearance (ORI_CALL_APPEAR) */

D_START	(E10_P_ORI_CALL_APPEAR)
D_END   (END_SSDU)

START	(E10_P_ORI_CALL_APPEAR)
END     (e10_ori_call_appear_ssdu)

/*---------- Other Call Reference       (OTHER_CALL_REF) */

D_START	(E10_P_OTHER_CALL_REF)
		D_ANY_VAL   (CONN_ID_VAL)
D_END   (END_SSDU)

START	(E10_P_OTHER_CALL_REF)
		ANY_VAL     (&i_other_call_ref[0].conn_id)
END     (e10_conn_id_to_call_ref)

/*---------- Selected Call Appearance   (SEL_CALL_APPEAR) */

D_START	(E10_P_SEL_CALL_APPEAR)
D_END   (END_SSDU)

START	(E10_P_SEL_CALL_APPEAR)
END     (e10_sel_call_appear_ssdu)

/*---------- Switchhook                 (SWITCHHOOK) */

D_START	(E10_P_SWITCHHOOK)
		D_TABL  (HOOK_VAL)
D_END   (END_SSDU)

START	(E10_P_SWITCHHOOK)
		TABL    (E10_T_HOOK_VAL,                &i_switchhook[0].hook_val)
END     (0)

#endif /* } */

#if NS_TYPE_BRI == ON

			/* SIGNAL : Signal */

D_START	(E10_P_SIGNAL)
	D_TABL	(VAL_)
D_END		(SIGNAL_E)

START	(E10_P_SIGNAL)
	TABL	(E10_T_SIGNAL_VAL,				&i_signal[0].val)
END			(0)

#else

D_START	(E10_P_SIGNAL)
D_END		(SIGNAL_E)

START	(E10_P_SIGNAL)
END			(0)

#endif

#if NS_TYPE_BRI == ON

			/* Endpoint identifier (ENDPOINT_ID) */

D_START	(E10_P_ENDPOINT_ID)
	D_ANY_VAL	(USID)
	D_ANY_VAL	(TID)
	D_TABL		(INTERP)
    D_ANY_VAL	(_CES)
D_END			(END_SSDU)

START	(E10_P_ENDPOINT_ID)
	ANY_VAL (&i_endpoint_id[0].usid)
	ANY_VAL (&i_endpoint_id[0].tid)
	TABL	(E10_T_INTERPRETER,	&i_endpoint_id[0].interp)
	ANY_VAL (&i_endpoint_id[0].ces)
END	 		(0)

			/* Information request (INFORMATION_RQ) */

D_START	(E10_P_INFORMATION_RQ)
	D_ANY_VAL	(INFO_TYPE)
	D_ANY_VAL	(INFO_IND)
D_END		(E_INFORMATION_RQ)

START	(E10_P_INFORMATION_RQ)
	ANY_VAL	(&i_information_rq[0].info_type)
	ANY_VAL	(&i_information_rq[0].info_ind)
END			(0)

			/* SPID */

uchar e10_get_spid ();

D_START	(E10_P_SPID)
D_END	(P_SPID_END)

START (E10_P_SPID)
END	(e10_get_spid)

#endif

/****************************************************************************/
/*					Primary Rate specific IES meta programms				*/
/****************************************************************************/


#if NS_TYPE_PRI == ON /* { */

			/* CHANGE_STATUS : change status of a B channel */

D_START (E10_P_CHANGE_STATUS)
	D_ANY_VAL 	(PREF)
	D_TABL		(CHAN_STAT)
D_END	(E10_CHANGE_STATUS_E)

START (E10_P_CHANGE_STATUS)
	ANY_VAL	(    			&i_change_status[0].preference)
	TABL	(E10_T_STATUS,	&i_change_status[0].status)
END (0)

#else

D_START (E10_P_CHANGE_STATUS)
D_END	(E10_CHANGE_STATUS_E)

START (E10_P_CHANGE_STATUS)
END (0)


#endif

/*-------------------------------------------------------------------------*/

#if NS_TYPE_PRI == ON /* { */

			/* CONN_NB : connected number */

D_START	(E10_P_CONN_NB)
	D_TABL	(PLAN)
	D_TABL	(TYPE)
	D_TABL	(PRESENTATION)
	D_TABL	(SCREEN_IND)
	D_TEXT	(DIGIT_TY)
D_END   (CONN_NB_E)

START	(E10_P_CONN_NB)
	TABL	(E10_T_NB_PLAN, 			&i_conn_nb[0].plan_id)
	TABL	(E10_T_NB_TYPE,				&i_conn_nb[0].nb_type)
	TABL	(E10_T_CALLING_NB_PRES,		&i_conn_nb[0].pres)
	TABL	(E10_T_SCREEN_IND,			&i_conn_nb[0].screen_ind)
	TEXT	(1,E10_MX_SZ_CONN_NB,DIGIT, &i_conn_nb[0].lgth, (uchar **)&i_conn_nb[0].p_add)
END		(0)

#else

D_START	(E10_P_CONN_NB)
D_END   (CONN_NB_E)

START	(E10_P_CONN_NB)
END		(0)

#endif

/*-------------------------------------------------------------------------*/

#if NS_TYPE_PRI == ON

			/* REDIR_NB : redir party number */

D_START	(E10_P_REDIR_NB)
	D_TABL	(TYPE)
	D_TABL	(PLAN)
	D_TABL	(PRESENTATION)
	D_TABL	(SCREEN_IND)
	D_TABL	(REASON)
	D_TEXT	(DIGIT_TY)
D_END   (REDIR_NB_E)

START	(E10_P_REDIR_NB)
	TABL	(E10_T_NB_TYPE,				&i_redir_nb[0].nb_type)
	TABL	(E10_T_NB_PLAN, 			&i_redir_nb[0].plan_id)
	TABL	(E10_T_CALLING_NB_PRES,		&i_redir_nb[0].pres)
	TABL	(E10_T_SCREEN_IND,			&i_redir_nb[0].screen_ind)
	TABL	(E10_T_REASON_REDIR,		&i_redir_nb[0].reason)
	TEXT	(1,E10_MX_SZ_REDIR_NB,DIGIT, &i_redir_nb[0].lgth, (uchar **)&i_redir_nb[0].p_add)
END		(0)

#else

D_START	(E10_P_REDIR_NB)
D_END   (REDIR_NB_E)

START	(E10_P_REDIR_NB)
END		(0)

#endif

/*-------------------------------------------------------------------------*/

#if NS_TYPE_PRI == ON

			/* RESTART_IND : Restart indicator */

D_START		(E10_P_RESTART_IND)
	D_TABL	(OM_CLASS)
D_END		(RESTART_IND_E)

START		(E10_P_RESTART_IND)
	TABL	(E10_T_RESTART_IND_CLASS,		&i_restart_ind[0].restart_class)
END			(0)

#else

D_START		(E10_P_RESTART_IND)
D_END		(RESTART_IND_E)

START		(E10_P_RESTART_IND)
END			(0)

#endif

/*-------------------------------------------------------------------------*/

#if NS_TYPE_PRI == ON

			/* TRANSIT_NET_SEL : Transit network selection */

D_START	(E10_P_TRANSIT_NET_SEL)
	D_TEXT	(NET_ID)
D_END		(TRANSIT_NET_SEL_E)

START	(E10_P_TRANSIT_NET_SEL)
	TEXT	(1,E10_MX_SZ_TRANSIT_NET_SEL,ANY_CHAR,&i_transit_net_sel[0].net_id_lgth, (uchar **)&i_transit_net_sel[0].p_net_id)
END			(0)

#else

D_START	(E10_P_TRANSIT_NET_SEL)
D_END		(TRANSIT_NET_SEL_E)

START	(E10_P_TRANSIT_NET_SEL)
END			(0)

#endif

/*-------------------------------------------------------------------------*/

#if NS_TYPE_PRI == ON

			/* UUI : user to user information */

D_START	(E10_P_UUI)
	D_TABL		(PROTOCOL_DISCR)
	D_IF_VAL	(DISCR_IA5)
		D_TEXT  (INFO_IA5)
	D_ELSE		(OTHER_DISCR)
		D_TEXT  (INFO_OTHER)
	D_END_IF	(DISCR)
D_END		(UUI_END)

START	(E10_P_UUI)
	TABL	(E10_T_UUI_PROTOCOL_DISCR,	&i_uui[0].protocol_discr)
	IF_VAL		(&i_uui[0].protocol_discr, EQ, PROTOCOL_DISCR_IA5)
		TEXT	(0,E10_MX_SZ_UUI,ANY_CHAR, 	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	ELSE		()
		TEXT	(0,E10_MX_SZ_UUI,ANY_OCTET,	&i_uui[0].lgth, (uchar **)&i_uui[0].p_info)
	END_IF		()
END			(0)

#else

D_START	(E10_P_UUI)
D_END	(UUI_END)

START	(E10_P_UUI)
END			(0)

#endif

/*----------------------------codeset 5------------------------------------*/

#if NS_TYPE_PRI == ON

			/* PRECEDENCE_LEVEL : Precedence level */

D_START	(E10_P_PRECEDENCE_LEVEL)
	D_TABL  (CODING_STD)
	D_TABL  (LEVEL)
	D_TABL  (CHANGE_VALUE)
	D_TABL  (LFB)
	D_TEXT(	MLPP_SERV)
D_END		(PROGRESS_IND_E)

START	(E10_P_PRECEDENCE_LEVEL)
	TABL	(E10_T_CODING_STD_PRECEDENCE,&i_precedence_level[0].coding_std)
	TABL	(E10_T_PRECEDENCE,			&i_precedence_level[0].level)
	TABL	(E10_T_CHANGE_VALUE,		&i_precedence_level[0].change_value)
	TABL	(E10_T_LFB,					&i_precedence_level[0].lfb_ind)
	TEXT 	(1,E10_MX_SZ_MLPP,ANY_OCTET,&i_precedence_level[0].lgth, (uchar **)&i_precedence_level[0].p_info)
END			(0)

#else

D_START	(E10_P_PRECEDENCE_LEVEL)
D_END		(PROGRESS_IND_E)

START	(E10_P_PRECEDENCE_LEVEL)
END			(0)

#endif

/*----------------------------codeset 6------------------------------------*/


#if NS_TYPE_PRI == ON

			/* FACILITY : facility */

D_START (E10_P_FACILITY)
	D_TEXT	(_INFO)
D_END	(E10_FACILITY_E)

START	(E10_P_FACILITY)
	TEXT	(1,E10_MX_SZ_FACILITY,ANY_OCTET,	&i_facility[0].lgth, (uchar **)&i_facility[0].p_info)
END		(0)

#else

D_START (E10_P_FACILITY)
D_END	(E10_FACILITY_E)

START	(E10_P_FACILITY)
END		(0)

#endif

#if NS_TYPE_PRI == ON

			/* ---------- Traveling classmark (TRAVELING_CLASSMARK) */

D_START	(E10_P_TRAVELING_CLASSMARK)
	D_TABL	(FAC_REST)
	D_TABL	(SATELLITE)
	D_TABL	(CONNECTIVITY)
D_END		(CLASSMARK_E)

START	(E10_P_TRAVELING_CLASSMARK)
	TABL	(E10_T_FAC_RESTR_LEVEL,		&i_traveling_classmark[0].fac_restriction)
	TABL	(E10_T_SATELLITE_HOP,		&i_traveling_classmark[0].satellite_hop_counter)
	TABL	(E10_T_CONNECTIVITY,		&i_traveling_classmark[0].end_to_end_isdn)
END			(0)

#else

D_START	(E10_P_TRAVELING_CLASSMARK)
D_END		(CLASSMARK_E)

START	(E10_P_TRAVELING_CLASSMARK)
END			(0)

#endif

/*EOF*/

