
/*--------------------------------------------------------------------------*
 *                      M O D U L E     H E A D E R
 *
 * filename - net_mac.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * Header source, implementing the ISDN_BRICKS macro interface.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

                /*
                    MACROs and DECLARATIONS used to access the Network
                    Signalling entity (NS) from the user Layer 4 Signalling
                    entity (L4S).
                */

/*-------------------------------------------------------------------------*/


            /*
                Isdn_init_e10_ctx_???? = initialization of the common context
                                     used by a primitive macro :

                    INPUT :
                        - pr     = primitive ID,
                        - p_off  = pointer to the offset area,

            */

#if NS_IE_TSP_OUT == ON
#	define Isdn_init_e10_ctx_rq_rs_tsp(pr, p_off, data_lg)	Isdn_init_ctx_rq_rs_tsp(Paste(e10_,pr), p_off, data_lg)
#endif

#define Isdn_init_e10_ctx_rq_rs(pr, p_off)	Isdn_init_ctx_rq_rs(Paste(e10_,pr), p_off)
#define Isdn_init_e10_ctx_in_co(p_off)		Isdn_init_ctx_in_co(p_off)

/*-------------------------------------------------------------------------*/

#define Get_ie_e10(pr,ie)                   Get_ie          (Paste(e10_,pr), Paste (e10_, ie))
#define Isdn_get_val_e10(pr,ie,fld)         Isdn_get_val    (Paste(e10_,pr), Paste (e10_, ie), fld)
#define Isdn_p_str_e10(pr,ie,fld)           Isdn_p_str      (Paste(e10_,pr), Paste (e10_, ie), fld)
#define Isdn_lgth_str_e10(pr,ie,fld)        Isdn_lgth_str   (Paste(e10_,pr), Paste (e10_, ie), fld)
#define Isdn_mx_lgth_str_e10(pr,ie,fld)     Isdn_mx_lgth_str(Paste(e10_,pr), Paste (e10_, ie), fld)
#define P_start_val_ns_e10(pr,ie)           P_start_val_ns  (Paste(e10_,pr), Paste (e10_, ie))
#define P_val_ns_e10(ie)                    P_val_ns        (Paste(e10_,ie))
#define Set_offset_e10(pr,ie)               Set_offset      (Paste(e10_,pr),Paste(e10_,ie))
#define Set_next_ie_e10(ie)                 Set_next_ie     (Paste(e10_,ie))
#define Set_val_e10(ie,fld,val)             Set_val         (Paste(e10_,ie), fld, val)
#define Set_str_e10(ie, lv, p_str, mx_sz)   Set_str         (Paste(e10_,ie), lv, p_str, mx_sz)
#define Set_mem_e10(ie, lv, p_mem, sz)      Set_mem         (Paste(e10_,ie), lv, p_mem, sz)
#define Set_to_next_ie_instance_e10(pr,ie)	Set_to_next_ie_instance (Paste(e10_,pr), Paste (e10_, ie))
#define Get_remaining_ie_instance_nb_e10(pr,ie,p_ie)	Get_remaining_ie_instance_nb (Paste(e10_,pr), Paste (e10_, ie), p_ie)
#define	Set_val_nil_e10(ie)					Set_val_nil		(Paste(e10_,ie))

#if MESSAGE_HEADER_IE == ON
#   define Message_header_offset_e10    	ns_offset_t e10_message_header;
#else
#   define Message_header_offset_e10
#endif

#define Set_ns_offset_tsp_e10(pr,ie)			Set_ns_offset_tsp	(Paste(e10_,pr),Paste(e10_,ie))
#define Set_mem_eob_e10(ie,lv,p_mem,sz)		Set_mem_eob		(Paste(e10_,ie), lv, p_mem, sz)


/*-------------------------------------------------------------------------*/
		/* Structures of the offset area of each primitive interfaces */

		/**************************************************
		**   Each offset is a relative pointer on the    **
		**   data of an IE element                       **
		**************************************************/

/*====================  CALL  ESTABLISHMENT  MESSAGES   =====================*/

		/* NS_ALERT_IN */

struct off_ns_e10_te_alert_in {
	Message_header_offset_e10               /* message header parameters */
	ns_offset_t e10_chan_id;                /* channel ID */
	ns_offset_t e10_progress_ind;           /* progress indicator */
	ns_offset_t e10_redir_nb;		        /* redirecting number */
	ns_offset_t e10_uui;					/* user-to-user information */

#if NS_TYPE_BRI == ON
	ns_offset_t e10_te_cap;					/* terminal capabilities */
	ns_offset_t e10_signal;					/* signal */
#endif
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_feature_ind;			/* feature indication */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_alert_in       off_ns_e10_alert_rq;
typedef struct off_ns_e10_te_alert_in       off_ns_e10_alert_in;

		/* NS_CALL_PROC_IN */

struct off_ns_e10_te_call_proc_in {
	Message_header_offset_e10               /* message header parameters */
	ns_offset_t e10_chan_id;                /* channel ID */

#if NS_TYPE_BRI == ON
	ns_offset_t e10_te_cap;					/* terminal capabilities */
	ns_offset_t e10_signal;					/* signal */
#endif
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_call_proc_in   off_ns_e10_call_proc_rq;
typedef struct off_ns_e10_te_call_proc_in   off_ns_e10_call_proc_in;


		/* NS_CONN_IN */

struct off_ns_e10_te_conn_in {
	Message_header_offset_e10               /* message header parameters */
	ns_offset_t e10_bc;                     /* bearer capability */
	ns_offset_t e10_chan_id;                /* channel ID */
	ns_offset_t e10_progress_ind;           /* progress indicator */

#if NS_SPF_FACILITY == ON
	ns_offset_t e10_spf_fac;				/* network specific facility */
#endif

	ns_offset_t e10_calling_nb;             /* calling number (from network) */
	ns_offset_t e10_called_nb;              /* called number */
	ns_offset_t e10_redir_nb;               /* redirecting number */
	ns_offset_t e10_transit_net_sel;		/* transit network selection */
	ns_offset_t e10_llc;                    /* low layer capability */
	ns_offset_t e10_uui;			        /* user-to-user information */
	ns_offset_t e10_precedence_level;		/* precedence level information */
	ns_offset_t e10_user_entered_code;		/* user code */
	ns_offset_t e10_facility;				/* facility */
	ns_offset_t e10_traveling_classmark;	/* traveling classmark */

#if NS_TYPE_BRI == ON
	ns_offset_t e10_te_cap;					/* terminal capabilities */
	ns_offset_t e10_keypad;					/* keypad */
	ns_offset_t e10_signal;					/* signal */
	ns_offset_t e10_called_sub_add;			/* called sub addres */
	ns_offset_t e10_endpoint_id;            /* endpoint identifier */
#endif
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_switchhook;				/* switchhook */
	ns_offset_t e10_sel_call_appear;		/* selection call appearance */
	ns_offset_t e10_ori_call_appear;		/* origination call appearance */
	ns_offset_t e10_dest_call_appear;		/* destination call appearance */
	ns_offset_t e10_feature_act;			/* feature activation */
	ns_offset_t e10_feature_ind;			/* feature indication */
	ns_offset_t e10_adjunct_con;			/* adjunct control */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_conn_in        off_ns_e10_conn_rq;
typedef struct off_ns_e10_te_conn_in        off_ns_e10_conn_in;


		/* NS_CONN_CO (CONN or CONN_ACK) */

struct off_ns_e10_te_conn_co {
	Message_header_offset_e10               /* message header parameters */
	ns_offset_t e10_conn_nb;                /* connected number */
	ns_offset_t e10_chan_id;                /* channel ID */
	ns_offset_t e10_progress_ind;           /* progress indicator */
	ns_offset_t e10_redir_nb;		        /* redirecting number */
	ns_offset_t e10_uui;			        /* user-to-user information */

#if NS_TYPE_BRI == ON
	ns_offset_t e10_te_cap;					/* terminal capabilities */
	ns_offset_t e10_signal;					/* signal */
#endif
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_switchhook;				/* switchhook */
	ns_offset_t e10_feature_ind;			/* feature indication */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_conn_co        off_ns_e10_conn_rs;
typedef struct off_ns_e10_te_conn_co        off_ns_e10_conn_co;

		/* NS_PROGRESS_IN */

struct off_ns_e10_te_progress_in {
	Message_header_offset_e10               /* message header parameters */
	ns_offset_t e10_cause;                  /* cause */
	ns_offset_t e10_progress_ind;           /* progress indicator */

#if NS_TYPE_BRI == ON
	ns_offset_t e10_signal;					/* signal */
#endif
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_progress_in    off_ns_e10_progress_rq;
typedef struct off_ns_e10_te_progress_in    off_ns_e10_progress_in;

#if NS_TYPE_BRI == ON

		/* NS_TE_SETUP_ACK_IN */

struct off_ns_e10_te_setup_ack_in {
	Message_header_offset_e10				/* message header parameters */
	ns_offset_t e10_chan_id;				/* channel ID */
	ns_offset_t e10_signal;					/* signal */
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_feature_ind;			/* feature indication */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_setup_ack_in	off_ns_e10_net_setup_ack_rq;
typedef struct off_ns_e10_te_setup_ack_in	off_ns_e10_setup_ack_in;

#endif

/*===================== CALL  CLEARING  MESSAGES    =======================*/

		/* NS_CLEAR_IN */

struct off_ns_e10_te_clear_in {
	Message_header_offset_e10               /* message header parameters */
	ns_offset_t e10_cause;                  /* cause */
	ns_offset_t e10_uui;			        /* user-to-user information */
	ns_offset_t e10_facility;				/* facility */

#if NS_TYPE_BRI == ON
	ns_offset_t e10_signal;					/* signal */
#endif
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_switchhook;				/* switchhook */
	ns_offset_t e10_adjunct_con;			/* adjunct control */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_clear_in       off_ns_e10_clear_rq;
typedef struct off_ns_e10_te_clear_in       off_ns_e10_clear_in;

		/* NS_CLEAR_CO */

struct off_ns_e10_te_clear_co {
	Message_header_offset_e10               /* message header parameters */
	ns_offset_t e10_cause;                  /* cause */
	ns_offset_t e10_facility;				/* facility */

#if NS_TYPE_BRI == ON
	ns_offset_t e10_chan_id;                /* channel ID */
	ns_offset_t e10_signal;					/* signal */
#endif
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_sel_call_appear;		/* selection call appearance */
	ns_offset_t e10_keypad_con;				/* keypad control */
	ns_offset_t e10_feature_ind;			/* feature indication */
	ns_offset_t e10_adjunct_con;			/* adjunct control */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_clear_co       off_ns_e10_clear_rs;
typedef struct off_ns_e10_te_clear_co       off_ns_e10_clear_co;

/*====================      MISCELLANEOUS  MESSAGES =======================*/

		/* NS_FAC_RQ/IN/RS/CO */

struct off_ns_e10_te_fac_rq {
	Message_header_offset_e10				/* message header parameters */
	ns_offset_t e10_facility;				/* facility */
};

typedef struct off_ns_e10_te_fac_rq			off_ns_e10_fac_rq;
typedef struct off_ns_e10_te_fac_rq			off_ns_e10_fac_in;
typedef struct off_ns_e10_te_fac_rq			off_ns_e10_fac_co;
typedef struct off_ns_e10_te_fac_rq			off_ns_e10_fac_rs;

		/* NS_RESTART_RQ/IN/RS/CO */

struct off_ns_e10_te_restart_in {
	Message_header_offset_e10				/* message header parameters */
	ns_offset_t e10_chan_id;				/* channel identifier */
	ns_offset_t e10_restart_ind;			/* restart indicator */
};

typedef struct off_ns_e10_te_restart_in		off_ns_e10_restart_rq;
typedef struct off_ns_e10_te_restart_in		off_ns_e10_restart_in;

typedef struct off_ns_e10_te_restart_in		off_ns_e10_restart_rs;
typedef struct off_ns_e10_te_restart_in		off_ns_e10_restart_co;

#if NS_TYPE_BRI == ON /* { */

		/* NS_TE_SPF_FAC_RQ (HOLD/RECONN/CONF/DROP/TRANS) */

struct off_ns_e10_te_spf_fac_rq {
	Message_header_offset_e10				/* message header parameters */
	ns_offset_t e10_service_id;				/* service identifier */
	ns_offset_t e10_cause;					/* cause */
	ns_offset_t e10_chan_id;				/* channel ID */
	ns_offset_t e10_signal;					/* signal */
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_assoc_type;				/* associated_type */
	ns_offset_t e10_sel_call_appear;		/* selection call appearance */
	ns_offset_t e10_dest_call_appear;		/* destination call appearance */
	ns_offset_t e10_other_call_ref;			/* other call reference */
	ns_offset_t e10_feature_ind;			/* feature indication */
	ns_offset_t e10_adjunct_con;			/* adjunct control */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_spf_fac_rq		off_ns_e10_spf_fac_rq;
typedef struct off_ns_e10_te_spf_fac_rq		off_ns_e10_spf_fac_co;

		/* NS_INFO_RQ/IN */

struct off_ns_e10_te_info_in {
	Message_header_offset_e10				/* message header parameters */
	ns_offset_t e10_cause;					/* cause */
	ns_offset_t e10_chan_id;				/* channel ID */
	ns_offset_t e10_keypad;					/* keypad */
	ns_offset_t e10_signal;					/* signal */
	ns_offset_t e10_endpoint_id;            /* endpoint identifier */
	ns_offset_t e10_information_rq;         /* information request */
    ns_offset_t e10_spid;					/* SPID */
#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON) /* { */
	ns_offset_t e10_switchhook;				/* switchhook */
	ns_offset_t e10_sel_call_appear;		/* selection call appearance */
	ns_offset_t e10_keypad_con;				/* keypad control */
	ns_offset_t e10_other_call_ref;			/* other call reference */
	ns_offset_t e10_feature_act;			/* feature activation */
	ns_offset_t e10_feature_ind;			/* feature indication */
	ns_offset_t e10_adjunct_con;			/* adjunct control */
	ns_offset_t e10_display_con;			/* display control */
	ns_offset_t e10_display_fld;			/* display field */
#endif
};

typedef struct off_ns_e10_te_info_in		off_ns_e10_info_in;
typedef struct off_ns_e10_te_info_in		off_ns_e10_info_rq;

#endif /* } */

/*--------------------------------------------------------------------------*/

			/* NS MAINTENANCE REQUEST / CONFIRM */

#if NS_MAINTENANCE_CAPABILITY == ON /* { */

	/* NS_SERVICE_CO */

struct off_ns_e10_te_service_co {
	Message_header_offset_e10               /* message header parameters */
	ns_offset_t	e10_change_status;			/* Change Status */
	ns_offset_t	e10_chan_id;				/* Channel Id */
};

typedef struct off_ns_e10_te_service_co		off_ns_e10_service_co;

#endif /* } */


		/**************************************************
		**  DESCRIPTION of the value of an IE.           **
		**  ---------------------------------            **
		**  EACH ENTRY SHALL BE IN ACCORDANCE WITH THE   **
		**  CORRESPONDING SSDU IE META-PROGRAM           **
		**                                               **
		***************************************************/

		/* Bearer Capability (BC) */

struct val_ns_e10_bc {
	Next_instance_offset
	ie_val		trf_cap;            	    /* information transfer capability */
	ie_val		trf_rate;           	    /* information transfer rate */
	ie_val		multiplier;					/* multiplier in case of n*64kb/s service */
	ie_val		protocol_id_1;      	    /* user information layer 1 protocol */

	ie_val		trf_mode;					/* transfer mode */
	ie_val		trf_rate2;           	    /* information transfer rate (BRI) */
	ie_val		layer_nb;					/* (fictitious field) number of layer identifiers actually present in the bc IE */
	ie_val		layer_id;					/* user information layer protocol identifier */
	ie_val		protocol_id;				/* user information protocol identifier */
	ie_val		add_layer_id;				/* additional user information layer protocol identifier */
	ie_val		add_protocol_id;			/* additional user information protocol identifier */
};

		/* Called party number (CALLED_NB) */

struct val_ns_e10_called_nb {
	Next_instance_offset
	ie_val		plan_id;           			/* numbering plan */
	ie_val		nb_type;           			/* type of number */
	ie_array	nb[E10_MX_SZ_CALLED_NB+2];  /* called number digits */
};

		/* Called party subaddress (CALLED_SUB_ADD) */

struct val_ns_e10_called_sub_add {
	Next_instance_offset
	ie_val		sub_add_type;			/* called subaddress type */
	ie_val		odd_even_ind;			/* odd/even indicator */
	ie_array 	sub_add[E10_MX_SZ_CALLED_SUB_ADD+2];	/* sub-add information */
};

		/* Calling party number (CALLING_NB) */

struct val_ns_e10_calling_nb {
	Next_instance_offset
	ie_val		plan_id;					/* numbering plan */
	ie_val		nb_type;					/* type of number */
	ie_val		pres;						/* presentation */
	ie_val		screen_ind;					/* screening indicators */
	ie_array	nb[E10_MX_SZ_CALLING_NB+2]; /* calling number digits */
};

		/* Cause (CAUSE) */

struct val_ns_e10_cause {
	Next_instance_offset
	ie_val		coding_std;             	/* coding standard */
	ie_val		cause_loc;              	/* location */
	ie_val		cause_class;            	/* cause class field */
	ie_val		cause_val;              	/* cause value field */
	ie_array	cause_diag[E10_MX_SZ_CAUSE_DIAG+2]; /* diagnostics */
};

		/* Change Status (CHANGE_STATUS) */

struct val_ns_e10_change_status {
	Next_instance_offset
	ie_val		preference;					/* All interface, single B channel */
	ie_val		status;						/* Status of the B channel(s) */
};

		/* Channel ID (CHAN_ID) */

struct val_ns_e10_chan_id {
	Next_instance_offset
	ie_val		int_id;						/* interface id */
	ie_val 		int_type;					/* interface type */
	ie_val 		pref_excl;					/* preferred or exclusive channel */
	ie_val		d_chan;						/* D-channel indicator */
	ie_val 		chan_sel;					/* information channel selection */
	ie_val		int_id_val;					/* interface id value */
	ie_val		nb_map;						/* channel nb / mapping */
	ie_array	chan_nb[E10_MX_SZ_CHAN_ID+2];/* channel number */
};

		/* Connected party number (CONN_NB) */

struct val_ns_e10_conn_nb {
	Next_instance_offset
	ie_val		plan_id;					/* numbering plan */
	ie_val		nb_type;					/* type of number */
	ie_val		pres;						/* presentation */
	ie_val		screen_ind;					/* screening indicators */
	ie_array	nb[E10_MX_SZ_CONN_NB+2];	/* connected number digits */
};

		/* Facility (FACILITY) */

struct val_ns_e10_facility {
	Next_instance_offset
	ie_array	info[E10_MX_SZ_FACILITY+1];		/* facility contents */
};

		/* Keypad */

struct val_ns_e10_keypad {
	Next_instance_offset
	ie_array 	text[E10_MX_SZ_KEYPAD+2];		/* keypad information */
};
		/* Low Layer Compatibility (LLC) */

struct val_ns_e10_llc {
	Next_instance_offset
	ie_val		coding_std;             	/* coding standard */
	ie_val		trf_cap;                	/* information transfer capability */
	ie_val		out_band_neg;           	/* out-band negotiation */
	ie_val		trf_mode;               	/* transfer mode */
	ie_val		trf_rate;               	/* information transfer rate */
	ie_val		structure;              	/* structure */
	ie_val		dest_rate;              	/* destination rate */
	ie_val		protocol_id_1;          	/* user information layer 1 protocol */
	ie_val		syn_asyn;               	/* synchronous/asynchronous */
	ie_val		negotiation;            	/* negotiation */
	ie_val		user_rate;              	/* user rate */
	ie_val		inter_rate;             	/* intermediate rate */
	ie_val		nic_tx;                 	/* network independent clock on transmission (Tx) */
	ie_val		nic_rx;                 	/* network independent clock on reception (Rx) */
	ie_val		fc_tx;                  	/* flow control on transmission (Tx) */
	ie_val		fc_rx;                  	/* flow control on reception (Rx) */
	ie_val		hdr;                    	/* rate adaption header included or not */
	ie_val		multi_frame;            	/* multiple frame establishement support in DL */
	ie_val		op_mode;                	/* mode of operation */
	ie_val		lli_negot;              	/* logical link identifier negotiation */
	ie_val		assign;                 	/* assignor/assignee */
	ie_val		band_negot;             	/* in-band/out-band negotiation */
	ie_val		stop_bit;               	/* number of stop bits */
	ie_val		data_bit;               	/* number of data bits excluding parity if present */
	ie_val		parity;                 	/* parity information */
	ie_val		duplex;                 	/* duplex mode */
	ie_val		modem;                  	/* modem type */
	ie_val		protocol_id_2;          	/* user layer 2 protocol information */
	ie_val		option_2;               	/* optional layer 2 protocol information */
	ie_val		protocol_id_3;          	/* user information layer 3 protocol */
	ie_val		option_3;               	/* optional layer 3 protocol information */
};

#if NS_SPF_FACILITY == ON

		/* Network Specific Facility (SPF_FAC) */

struct val_ns_e10_spf_fac {
	Next_instance_offset
	ie_val		net_id_lgth;	 			/* length of network identification */
	ie_array	net_id[E10_MX_SZ_NET_ID+1];	/* network identification array */
	ie_val		action;						/* parameterized/binary indicator */
	ie_val		serv_feature;				/* service/feature indicator */
	ie_val		facility_coding;			/* facility coding */
	ie_array	fac_info[E10_MX_SZ_SPF_FAC+2];/* network-specific facility specification */
};

#endif

		/* Precedence level (PRECEDENCE_LEVEL) */

struct val_ns_e10_precedence_level {
	Next_instance_offset
	ie_val  	coding_std;             	/* coding standard */
	ie_val  	level;						/* precedence level */
	ie_val		change_value;         		/* change value */
	ie_val		lfb;		         		/* LFB indicator */
	ie_array 	info[E10_MX_SZ_MLPP+2];		/* MLPP service domain */
};

		/* Progress indicator (PROGRESS_IND) */

struct val_ns_e10_progress_ind {
	Next_instance_offset
	ie_val		coding_std;             	/* coding standard */
	ie_val		progress_loc;           	/* general location */
	ie_val		progress_descr;         	/* progress description */
};

		/* Redirecting number (REDIR_NB) */

struct val_ns_e10_redir_nb {
	Next_instance_offset
	ie_val		nb_type;					/* type of number */
	ie_val		plan_id;					/* numbering plan */
	ie_val		pres;						/* presentation */
	ie_val		screen_ind;					/* screening indicators */
	ie_val		reason;						/* reason for redirection */
	ie_array    nb[E10_MX_SZ_REDIR_NB+2];   /* information */
};

		/* Restart indicator (RESTART_IND) */

struct val_ns_e10_restart_ind {
	Next_instance_offset
	ie_val		restart_class;				/* class */
};

		/* Signal (SIGNAL) */

struct val_ns_e10_signal {
	Next_instance_offset
	ie_val      signal_val;             /* signal value */
};

		/* Transit network selection (TRANSIT_NET_SEL) */

struct val_ns_e10_transit_net_sel {
	Next_instance_offset
	ie_array    net_id[E10_MX_SZ_TRANSIT_NET_SEL+2];    /* address of network identification information */
};

		/* Travaling classmark (TRAVELING_CLASSMARK) */

struct val_ns_e10_traveling_classmark {
	Next_instance_offset
	ie_val		fac_restriction;            /* facility restriction level */
	ie_val		satellite_hop_counter;      /* satellite hop counter */
	ie_val		end_to_end_isdn;		    /* end-to-end ISDN(connectivity) indication */
};

		/* User entered code (USER_ENTERED_CODE) */

struct val_ns_e10_user_entered_code {
	Next_instance_offset
	ie_val    	code_type;      					/* type of user code */
	ie_array    user_code[E10_MX_SZ_USER_ENTERED_CODE+2];   /* user code digits */
};

		/* User to User information (UUI) */

struct val_ns_e10_uui {
	Next_instance_offset
	ie_val		protocol_discr;				/* protocol discriminator */
	ie_array	text[E10_MX_SZ_UUI+2];		/* user information */
};

/*--------------------------------------------------------------------------*/

#if NS_TYPE_BRI == ON /* { */


		/* Endpoint identifier 					(ENDPOINT_ID) */

struct val_ns_e10_endpoint_id {
	Next_instance_offset
	ie_val      usid;                   	/* user id */
	ie_val      tid;                	    /* terminal id */
	ie_val      interp;             	    /* interpreter flag */
    ie_val		ces;						/* CES */
};

        /* SPID */

struct val_ns_e10_spid {
    Next_instance_offset
    ie_val		ces;
	ie_array    p_spid[E10_MX_SZ_SPID+2];     /* SPID information */
};

		/* Information request (INFORMATION_RQ) */

struct val_ns_e10_information_rq {
	Next_instance_offset
	ie_val		info_type;				/* information type */
	ie_val		info_ind;				/* information indicator */
};

				/* switchhook					(SWITCHHOOK) */

struct val_ns_e10_switchhook {
	Next_instance_offset
	ie_val hook_val;						/* hook value */
};

				/* service identifier			(SERVICE_ID) */

struct val_ns_e10_service_id {
	Next_instance_offset
	ie_val service_id;						/* service id */
};

			/* ======== codeset 6 ======== */

				/* adjunct control 				(ADJUNCT_CON) */

struct val_ns_e10_adjunct_con {
	Next_instance_offset
	ie_val adjunct_val;						/* adjunct control value */
};

				/* associated type				(ASSOC_TYPE) */

struct val_ns_e10_assoc_type {
	Next_instance_offset
	ie_val assoc_status;
};

				/* destination call appearance	(DEST_CALL_APPEAR) */

struct val_ns_e10_dest_call_appear {
	Next_instance_offset
	ie_val button_nb;						/* button number (1..254) */
};

				/* display control				(DISPLAY_CON) */

struct val_ns_e10_display_con {
	Next_instance_offset
	ie_val display_con_mode;				/* display mode */
};

				/* display field				(DISPLAY_FLD) */

struct val_ns_e10_display_fld {
	Next_instance_offset
	ie_val display_fld_mode;				/* display mode */
	ie_val submode;							/* submode */
	ie_val display_fld_type;				/* display field type */
	ie_array info[E10_MX_SZ_DISPLAY_FLD+2];		/* display information */
};

				/* feature activation			(FEATURE_ACT) */

struct val_ns_e10_feature_act {
	Next_instance_offset
	ie_val button_type_act;					/* button type */
	ie_val module_nb;						/* module number */
	ie_val button_nb;						/* button number (1..254) */
};

				/* feature indication 			(FEATURE_IND) */

struct val_ns_e10_feature_ind {
	Next_instance_offset
	ie_val button_type_ind;					/* button type */
	ie_val module_nb;						/* module number */
	ie_val status_type;						/* status type */
	ie_val info_lgth;						/* length of the following information */
	ie_array info[E10_MX_SZ_FEATURE_IND+2];		/* information dependent from the status type */
};

				/* keypad control 				(KEYPAD_CON) */

struct val_ns_e10_keypad_con {
	Next_instance_offset
	ie_val call_ref_type;					/* call reference type */
};

				/* origination call appearance	(ORI_CALL_APPEAR) */

struct val_ns_e10_ori_call_appear {
	Next_instance_offset
	ie_val button_nb;						/* button number (1..254) */
};

				/* other call reference 		(OTHER_CALL_REF) */

struct val_ns_e10_other_call_ref {
	Next_instance_offset
	ie_val conn_id;							/* conn ID */
};

				/* selected call appearance 	(SEL_CALL_APPEAR) */

struct val_ns_e10_sel_call_appear {
	Next_instance_offset
	ie_val button_nb_call_appear;			/* button number / call appearance */
};


#endif /* } */


/*=========================================================================*/

							/* Information Elements (IE) */

/*-------------------------------------------------------------------------*/

			/*
			   _Isdn_e10_store_bc : store the bearer capability information
								   element (BRI+PRI):

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate (BRI),
						- nb_layer			= number of layer identifiers actually present in the IE,
						- first_layer		= first layer identifier,
						- first_protocol	= first protocol identifier,
						- second_layer		= second layer identifier,
						- second_protocol	= second protocol identifier.
						- trfratep			= transfer rate (PRI),
						- multi_     		= multiplier,
						- protocol_id_1_	= user information layer 1 protocol,
			*/

#define _Isdn_e10_store_bc(pr, trfcap, trfmode, trfrateb, nb_layer, first_layer, first_protocol, second_layer, second_protocol,trfratep, multi_, protocol_id_1_) \
				Set_offset_e10	(pr,	bc);\
				Set_val_e10		(bc,	trf_cap,		trfcap);\
				Set_val_e10		(bc,	trf_mode,		trfmode);\
				Set_val_e10		(bc,	trf_rate2,		trfrateb);\
				Set_val_e10		(bc,	layer_nb,		nb_layer);\
				Set_val_e10		(bc,	layer_id,		first_layer);\
				Set_val_e10		(bc,	protocol_id,	first_protocol);\
				Set_val_e10		(bc,	add_layer_id,	second_layer);\
				Set_val_e10		(bc,	add_protocol_id,second_protocol);\
				Set_val_e10		(bc,	trf_rate,		trfratep);\
				Set_val_e10     (bc,    multiplier, 	multi_);            \
				Set_val_e10     (bc,    protocol_id_1,  protocol_id_1_);    \
				Set_next_ie_e10	(bc)

			/*
			   _Isdn_e10_store_bc_BRI : store the bearer capability information
								   element :

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- nb_layer			= number of layer identifiers actually present in the IE,
						- first_layer		= first layer identifier,
						- first_protocol	= first protocol identifier,
						- second_layer		= second layer identifier,
						- second_protocol	= second protocol identifier.
			*/

#define _Isdn_e10_store_bc_BRI(pr, trfcap, trfmode, trfrate, nb_layer, first_layer, first_protocol, second_layer, second_protocol) \
				Set_offset_e10	(pr,	bc);\
				Set_val_e10		(bc,	trf_cap,		trfcap);\
				Set_val_e10		(bc,	trf_mode,		trfmode);\
				Set_val_e10		(bc,	trf_rate2,		trfrate);\
				Set_val_e10		(bc,	layer_nb,		nb_layer);\
				Set_val_e10		(bc,	layer_id,		first_layer);\
				Set_val_e10		(bc,	protocol_id,	first_protocol);\
				Set_val_e10		(bc,	add_layer_id,	second_layer);\
				Set_val_e10		(bc,	add_protocol_id,second_protocol);\
				Set_next_ie_e10	(bc)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_e10_store_bc_SPEECH_BRI : store the bearer capability
										  information element for
										  Speech Circuit Transport Mode
										  Data Calls.

			   Note : these parameters are useless, because forced in the
						SPDU building.

					INPUT :
						- pr				= primitive ID,
			*/

#define Isdn_e10_store_bc_SPEECH_BRI(pr)	\
				_Isdn_e10_store_bc_BRI(pr,	\
				TRF_CAP_SPEECH, TRF_MODE_CIRCUIT, TRF_RATE_64KBS, \
				1, LAYER_ID_1, PROTOCOL_ID_1_G711_u, \
				BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_e10_store_bc_AUDIO_CIRCUIT_DATA_BRI : store the bearer capability
													information element for
													3.1 kHz Audio Circuit Transport Mode
													Data calls.

					INPUT :
						- pr				= primitive ID,
			*/

#define Isdn_e10_store_bc_AUDIO_CIRCUIT_DATA_BRI(pr) \
				_Isdn_e10_store_bc_BRI(pr, \
				TRF_CAP_3_1_AUDIO, TRF_MODE_CIRCUIT, TRF_RATE_64KBS, \
				1, LAYER_ID_1, PROTOCOL_ID_1_G711_u, \
				BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_e10_store_bc_CIRCUIT_DATA_BRI : store the bearer capability
												information element for
												Circuit Transport Mode
												Data Calls.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
			*/

#define Isdn_e10_store_bc_CIRCUIT_DATA_BRI(pr, trfcap) \
				_Isdn_e10_store_bc_BRI(pr, \
				trfcap, TRF_MODE_CIRCUIT, TRF_RATE_64KBS, \
				1, LAYER_ID_1, PROTOCOL_ID_1_RA_I461, \
				BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_e10_store_bc_X31_PACKET_BRI : store the bearer capability
											  information element for
											  X.31 Packet Transport Mode Connections.

					INPUT :
						- pr				= primitive ID,
			*/

#define Isdn_e10_store_bc_X31_PACKET_BRI(pr) \
				_Isdn_e10_store_bc_BRI(pr, \
				TRF_CAP_UNRESTRICTED, TRF_MODE_PACKET, TRF_RATE_PACKET, \
				2, LAYER_ID_2, PROTOCOL_ID_2_X25_LL, \
				LAYER_ID_3, PROTOCOL_ID_3_X25_PL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_e10_store_bc_NO_LAYER_BRI : store the bearer capability
											 information element without
											 Layer-Protocol field.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
			*/

#define Isdn_e10_store_bc_NO_LAYER_BRI(pr, trfcap, trfmode, trfrate)	\
		_Isdn_e10_store_bc_BRI(pr, trfcap, trfmode, trfrate, 0, BYTE_VAL_NIL, BYTE_VAL_NIL, BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_e10_store_bc_ONE_LAYER_BRI : store the bearer capability
											 information element with only
											 one Layer-Protocol field.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- layer				= layer identifier,
						- protocol			= protocol identifier,
			*/

#define Isdn_e10_store_bc_ONE_LAYER_BRI(pr, trfcap, trfmode, trfrate, layer, protocol) \
		_Isdn_e10_store_bc(pr, trfcap, trfmode, trfrate, 1, layer, protocol, BYTE_VAL_NIL, BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

			/*
			   Isdn_e10_store_bc_TWO_LAYERS_BRI : store the bearer capability
											 information element with
											 two Layer-Protocol field.

					INPUT :
						- pr				= primitive ID,
						- trfcap			= transfer capability,
						- trfmode			= transfer mode,
						- trfrate			= transfer rate,
						- first_layer		= first layer identifier,
						- first_protocol	= first protocol identifier,
						- second_layer		= second layer identifier,
						- second_protocol	= second protocol identifier.
			*/

#define Isdn_e10_store_bc_TWO_LAYERS_BRI(pr, trfcap, trfmode, trfrate, first_layer, first_protocol, second_layer, second_protocol) \
		_Isdn_e10_store_bc(pr, trfcap, trfmode, trfrate, 2, first_layer, first_protocol, second_layer, second_protocol)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_bc_PRI : store the bearer capability information
									element :

					INPUT :
						- pr            = primitive ID,
						- trf_cap_      = information transfer capability,
						- trf_rate_     = information transfer rate,
						- multi_     	= multiplier,
						- protocol_id_1_= user information layer 1 protocol,
			*/

#define Isdn_e10_store_bc_PRI(pr, trf_cap_, trf_rate_, multi_, protocol_id_1_) Isdn_e10_store_bc(pr, trf_cap_, trf_rate_, multi_, protocol_id_1_)

#define Isdn_e10_store_bc(pr, trf_cap_, trf_rate_, multi_, protocol_id_1_)  \
				Set_offset_e10  (pr,    bc);                                \
				Set_val_e10     (bc,    trf_cap,        trf_cap_);          \
				Set_val_e10     (bc,    trf_rate,       trf_rate_);         \
				Set_val_e10     (bc,    multiplier, 	multi_);            \
				Set_val_e10     (bc,    protocol_id_1,  protocol_id_1_);    \
				Set_next_ie_e10 (bc)

			/*
				Isdn_e10_store_bc_N_64 : bearer capability for N*64  :

					INPUT :
						- pr            = primitive ID,
						- multi_		= multiplier,

			*/

#define Isdn_e10_store_bc_N_64(pr, multi_)									\
		Isdn_e10_store_bc(pr,	TRF_CAP_UNRESTRICTED,						\
								TRF_RATE_MULTI_RATE,	multi_,				\
								BYTE_VAL_NIL)

			/*
				Isdn_e10_store_bc_56K: bearer capability for rate adaptation 56K :

					INPUT :
						- pr            = primitive ID,
			*/

#define Isdn_e10_store_bc_56K(pr)								\
		Isdn_e10_store_bc(pr,	TRF_CAP_UNRESTRICTED,			\
								TRF_RATE_64KBS,	BYTE_VAL_NIL,	\
								PROTOCOL_ID_1_V110)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_called_nb : called number IE

					INPUT :
						- pr			= primitive ID,
						- nb_type_	    = type of number,
						- plan_id_  	= numbering plan,
						- nb_           = address of the literal string.
			*/

#define Isdn_e10_store_called_nb(pr, nb_type_, plan_id_, nb_)                    \
		Set_offset_e10  (pr,        called_nb);                                 \
		Set_val_e10     (called_nb, nb_type,   nb_type_);             \
		Set_val_e10     (called_nb, plan_id,   plan_id_);             \
		Set_str_e10     (called_nb, nb,             nb_,        E10_MX_SZ_CALLED_NB+1)


/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_called_sub_add   : called sub-address IE
				Isdn_e10_store_called_sub_add_u : called sub-address IE
												  for SUB_ADD_USER type.

					INPUT :
						- pr			= primitive ID,
						- sub_add_type_	= subaddress type,
						- odd_even_ind_	= odd/even indicator,
						- sub_add_		= address of the literal string.
						- sz_            = size of the block for SUB_ADD_USER.

			*/

#define Isdn_e10_store_called_sub_add(pr, sub_add_type_, odd_even_ind_,	sub_add_)	\
		Set_offset_e10	(pr,				called_sub_add);						\
		Set_val_e10		(called_sub_add,	sub_add_type,	sub_add_type_);			\
		Set_val_e10		(called_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_str_e10 	(called_sub_add,	sub_add,		sub_add_, E10_MX_SZ_CALLED_SUB_ADD+1)

#define Isdn_e10_store_called_sub_add_u(pr, odd_even_ind_,	sub_add_, sz_)			\
		Set_offset_e10	(pr,				called_sub_add);						\
		Set_val_e10		(called_sub_add,	sub_add_type,	SUB_ADD_USER);			\
		Set_val_e10		(called_sub_add,	odd_even_ind,	odd_even_ind_);			\
		Set_mem_e10 	(called_sub_add,	sub_add,		sub_add_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_calling_nb : store calling number IE

					INPUT :
						- pr                = primitive ID,
						- nb_type_     		= type of number,
						- plan_id_     		= numbering plan,
						- screen_ind_  		= screening indicators,
						- pres_  			= presentation,
						- nb_               = pointer on the calling number literal string.
			*/

#define Isdn_e10_store_calling_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)  \
		Set_offset_e10  (pr,            calling_nb);                                \
		Set_val_e10     (calling_nb,    nb_type,   	nb_type_);  \
		Set_val_e10     (calling_nb,    plan_id,	plan_id_);  \
		Set_val_e10     (calling_nb,    pres,		pres_);     \
		Set_val_e10     (calling_nb,    screen_ind,	screen_ind_);\
		Set_str_e10     (calling_nb,    nb,             nb_, E10_MX_SZ_CALLING_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_conn_nb : store connected number IE

					INPUT :
						- pr                = primitive ID,
						- nb_type_     		= type of number,
						- plan_id_     		= numbering plan,
						- screen_ind_  		= screening indicators,
						- pres_  			= presentation,
						- nb_               = pointer on the conn number literal string.
			*/

#define Isdn_e10_store_conn_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, nb_)  \
		Set_offset_e10  (pr,         conn_nb);                                \
		Set_val_e10     (conn_nb,    nb_type,   	nb_type_);  \
		Set_val_e10     (conn_nb,    plan_id,		plan_id_);  \
		Set_val_e10     (conn_nb,    pres,			pres_);     \
		Set_val_e10     (conn_nb,    screen_ind,	screen_ind_);\
		Set_str_e10     (conn_nb,    nb,            nb_, E10_MX_SZ_CONN_NB+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_cause : cause IE

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- cause_loc_    = cause location,
						- cause_class_  = cause class,
						- cause_val_    = cause value,
						- cause_diag_   = cause diagnostic.

			*/

#define Isdn_e10_store_cause(pr, coding_std_, cause_loc_, cause_class_, cause_val_, cause_diag_) \
		Set_offset_e10  (pr,    cause);                                             \
		Set_val_e10     (cause, coding_std, coding_std_);                           \
		Set_val_e10     (cause, cause_loc,  cause_loc_);                            \
		Set_val_e10     (cause, cause_class,cause_class_);                          \
		Set_val_e10     (cause, cause_val,  cause_val_);                            \
		Set_str_e10     (cause, cause_diag, cause_diag_, E10_MX_SZ_CAUSE_DIAG+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_e10_store_chan_id_BRI : store channel ID IE

					INPUT :
						- pr            = primitive ID,
						- pref_excl_    = preferred channel,
						- d_chan_		= D-channel indicator,
						- chan_sel_     = channel selection,
			*/

#define Isdn_e10_store_chan_id_BRI(pr, pref_excl_, d_chan_, chan_sel_)  \
		Set_offset_e10  (pr,        chan_id);                           \
		Set_val_nil_e10	(chan_id);										\
		Set_val_e10     (chan_id,   int_type,   INT_TYPE_BRI);          \
		Set_val_e10     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_e10     (chan_id,   d_chan,  	d_chan_);   	        \
		Set_val_e10     (chan_id,   chan_sel,   chan_sel_);             \
		Set_next_ie_e10 (chan_id)

		/*
				 Isdn_e10_store_chan_id_MAP_/NB_PRI : store channel ID IE

					INPUT :
						- pr            = primitive ID,
						- int_id_		= interface id,
						- pref_excl_    = preferred channel,
						- int_id_val_   = interface Id value,
						- p_chan_nb_    = channel number,
						-  chan_lgth_	= length of info.

		*/


#define Isdn_e10_store_chan_id_MAP_PRI(pr, int_id_, pref_excl_,int_id_val_,  p_chan_nb_, chan_lgth_) \
		Set_offset_e10  (pr,        chan_id);                           \
		Set_val_e10     (chan_id,   int_type,   INT_TYPE_PRI);          \
		Set_val_e10		(chan_id,	int_id,		int_id_);				\
		Set_val_e10     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_e10     (chan_id,   d_chan,  	NOT_D_CHAN);   	        \
		Set_val_e10     (chan_id,   chan_sel,   AS_INDICATED);          \
		Set_val_e10		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_e10		(chan_id,	nb_map,		CHAN_MAP);				\
		Set_mem_e10     (chan_id,   chan_nb,    p_chan_nb_,     chan_lgth_)

#define Isdn_e10_store_chan_id_NB_PRI(pr, int_id_, pref_excl_,int_id_val_,  p_chan_nb_) \
		Set_offset_e10  (pr,        chan_id);                           \
		Set_val_e10     (chan_id,   int_type,   INT_TYPE_PRI);          \
		Set_val_e10		(chan_id,	int_id,		int_id_);				\
		Set_val_e10     (chan_id,   pref_excl,  pref_excl_);            \
		Set_val_e10     (chan_id,   d_chan,  	NOT_D_CHAN);   	        \
		Set_val_e10     (chan_id,   chan_sel,   AS_INDICATED);          \
		Set_val_e10		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_e10		(chan_id,	nb_map,		CHAN_NUMBER);				\
		Set_str_e10     (chan_id,   chan_nb,    p_chan_nb_,     E10_MX_SZ_CHAN_ID+2)

#define Isdn_e10_store_chan_id_NO_CHAN_PRI(pr, int_id_, int_id_val_) 	\
		Set_offset_e10  (pr,        chan_id);                           \
		Set_val_e10     (chan_id,   int_type,   INT_TYPE_PRI);          \
		Set_val_e10		(chan_id,	int_id,		int_id_);				\
		Set_val_e10     (chan_id,   pref_excl,  CHAN_EXCL);            	\
		Set_val_e10     (chan_id,   d_chan,  	NOT_D_CHAN);   	        \
		Set_val_e10     (chan_id,   chan_sel,   NO_CHAN);          		\
		Set_val_e10		(chan_id,	int_id_val,	int_id_val_);			\
		Set_val_e10		(chan_id,	nb_map,		BYTE_VAL_NIL);			\
		Set_str_e10     (chan_id,   chan_nb,    P_NIL,     0)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_e10_store_facility : store facility IE

					INPUT :
						- pr            = primitive ID,
						- fac			= facility information
						- sz			= info size
			*/

#define Isdn_e10_store_facility(pr, fac_, sz_)			\
		Set_offset_e10  (pr,        facility);          \
		Set_mem_e10     (facility, info,  fac_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_e10_store_keypad(pr,p_text) \
		Set_offset_e10	(pr,		keypad);\
		Set_str_e10		(keypad,	text,	p_text,	E10_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_llc : low layer compatibility

				First definition : in one part :

					INPUT :
						- pr            = primitive ID,
						- coding_std_   = coding standard,
						- trf_cap_      = information transfer capability,
						- out_neg       = out band negotiation,
						- trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
						- structure_    = structure,
						- dest_rate_    = destination rate,
						- protocol_id_1_= user information layer 1 protocol,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
						- user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
						- nic_tx_       = network independent clock (NIC) on Transmission (Tx),
						- nic_rx_       = network independent clock (NIC) on Reception (Rx),
                        - fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
                        - hdr_          = rate adaption header included or not,
                        - multi_frame_  = multiple frame establishement support in DL,
						- op_mode_      = mode of operation,
                        - lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - option_2_     = optional layer 2 protocol information,
						- protocol_id_3_= user information layer 3 protocol,
						- option_3_     = optional layer 3 protocol information.
            */

#define Isdn_e10_store_llc(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, protocol_id_1_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
        Set_offset_e10  (pr,    llc);                                       \
        Set_val_e10     (llc,   coding_std,     coding_std_);               \
		Set_val_e10     (llc,   trf_cap,        trf_cap_);                  \
        Set_val_e10     (llc,   out_band_neg,   out_neg);                   \
        Set_val_e10     (llc,   trf_mode,       trf_mode_);                 \
		Set_val_e10     (llc,   trf_rate,       trf_rate_);                 \
		Set_val_e10     (llc,   structure,      structure_);                \
        Set_val_e10     (llc,   dest_rate,      dest_rate_);                \
        Set_val_e10     (llc,   protocol_id_1,  protocol_id_1_);            \
        Set_val_e10     (llc,   syn_asyn,       syn_asyn_);                 \
        Set_val_e10     (llc,   negotiation,    negotiation_);              \
        Set_val_e10     (llc,   user_rate,      user_rate_);                \
		Set_val_e10     (llc,   inter_rate,     inter_rate_);               \
        Set_val_e10     (llc,   nic_tx,         nic_tx_);                   \
        Set_val_e10     (llc,   nic_rx,         nic_rx_);                   \
        Set_val_e10     (llc,   fc_tx,          fc_tx_);                    \
        Set_val_e10     (llc,   fc_rx,          fc_rx_);                    \
        Set_val_e10     (llc,   hdr,            hdr_);                      \
		Set_val_e10     (llc,   multi_frame,    multi_frame_);              \
        Set_val_e10     (llc,   op_mode,        op_mode_);                  \
        Set_val_e10     (llc,   lli_negot,      lli_negot_);                \
		Set_val_e10     (llc,   assign,         assign_);                   \
        Set_val_e10     (llc,   band_negot,     band_negot_);               \
		Set_val_e10     (llc,   stop_bit,       stop_bit_);                 \
        Set_val_e10     (llc,   data_bit,       data_bit_);                 \
        Set_val_e10     (llc,   parity,         parity_);                   \
        Set_val_e10     (llc,   duplex,         duplex_);                   \
        Set_val_e10     (llc,   modem,          modem_);                    \
        Set_val_e10     (llc,   protocol_id_2,  protocol_id_2_);            \
		Set_val_e10     (llc,   option_2,       option_2_);                 \
        Set_val_e10     (llc,   protocol_id_3,  protocol_id_3_);            \
        Set_val_e10     (llc,   option_3,       option_3_);                 \
        Set_next_ie_e10 (llc)

            /*--------------------------------------------*/

            /*
                Isdn_e10_store_llc : low layer compatibility

                Second definition : DIVIDED IN 2 PARTS for compilers which
				do not accept so many parameters in macros :

                    Isdn_e10_store_llc_1_4 : octet 1 to octet 4 included,

                        INPUT :
                            - pr            = primitive ID,
                            - coding_std_   = coding standard,
							- trf_cap_      = information transfer capability,
                            - out_neg       = out band negotiation,
                            - trf_mode_     = transfer mode,
							- trf_rate_     = information transfer rate,
							- structure_    = structure,
                            - dest_rate_    = destination rate,

                    Isdn_e10_store_llc_5_7 : octet 5 to octet 7 included,

                        - protocol_id_1_= user information layer 1 protocol,
						- syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
                        - inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
						- fc_tx_        = flow control on Transmission (Tx),
                        - fc_rx_        = flow control on Reception (Rx),
                        - hdr_          = rate adaption header included or not,
						- multi_frame_  = multiple frame establishement support in DL,
						- op_mode_      = mode of operation,
						- lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
						- duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - option_2_     = optional layer 2 protocol information,
                        - protocol_id_3_= user information layer 3 protocol,
                        - option_3_     = optional layer 3 protocol information.
            */

#define Isdn_e10_store_llc_1_4(pr,coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_)\
        Set_offset_e10  (pr,    llc);                                       \
        Set_val_e10     (llc,   coding_std,     coding_std_);               \
		Set_val_e10     (llc,   trf_cap,        trf_cap_);                  \
		Set_val_e10     (llc,   out_band_neg,   out_neg);                   \
        Set_val_e10     (llc,   trf_mode,       trf_mode_);                 \
        Set_val_e10     (llc,   trf_rate,       trf_rate_);                 \
        Set_val_e10     (llc,   structure,      structure_);                \
        Set_val_e10     (llc,   dest_rate,      dest_rate_)

#define Isdn_e10_store_llc_5_7(protocol_id_1_,  syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, option_2_, protocol_id_3_, option_3_) \
        Set_val_e10     (llc,   protocol_id_1,  protocol_id_1_);            \
        Set_val_e10     (llc,   syn_asyn,       syn_asyn_);                 \
		Set_val_e10     (llc,   negotiation,    negotiation_);              \
		Set_val_e10     (llc,   user_rate,      user_rate_);                \
        Set_val_e10     (llc,   inter_rate,     inter_rate_);               \
        Set_val_e10     (llc,   nic_tx,         nic_tx_);                   \
        Set_val_e10     (llc,   nic_rx,         nic_rx_);                   \
        Set_val_e10     (llc,   fc_tx,          fc_tx_);                    \
        Set_val_e10     (llc,   fc_rx,          fc_rx_);                    \
		Set_val_e10     (llc,   hdr,            hdr_);                      \
        Set_val_e10     (llc,   multi_frame,    multi_frame_);              \
        Set_val_e10     (llc,   op_mode,        op_mode_);                  \
        Set_val_e10     (llc,   lli_negot,      lli_negot_);                \
        Set_val_e10     (llc,   assign,         assign_);                   \
        Set_val_e10     (llc,   band_negot,     band_negot_);               \
		Set_val_e10     (llc,   stop_bit,       stop_bit_);                 \
        Set_val_e10     (llc,   data_bit,       data_bit_);                 \
        Set_val_e10     (llc,   parity,         parity_);                   \
		Set_val_e10     (llc,   duplex,         duplex_);                   \
        Set_val_e10     (llc,   modem,          modem_);                    \
		Set_val_e10     (llc,   protocol_id_2,  protocol_id_2_);            \
        Set_val_e10     (llc,   option_2,       option_2_);                 \
        Set_val_e10     (llc,   protocol_id_3,  protocol_id_3_);            \
        Set_val_e10     (llc,   option_3,       option_3_);                 \
        Set_next_ie_e10 (llc)

			/*--------------------------------------------*/

            /*
                Isdn_e10_store_llc_V110 : low layer compatibility for
                                            V110 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
                        - structure_    = structure,
                        - dest_rate_    = destination rate,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
						- inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
						- fc_tx_        = flow control on Transmission (Tx),
						- fc_rx_        = flow control on Reception (Rx),
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_e10_store_llc_V110(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_e10_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
                            out_neg,        trf_mode_,      trf_rate_,          \
							structure_,     dest_rate_);                        \
		Isdn_e10_store_llc_5_7(PROTOCOL_ID_1_V110,  syn_asyn_,  negotiation_,   \
                            user_rate_,     inter_rate_,    nic_tx_,            \
							nic_rx_,        fc_tx_,         fc_rx_,             \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            stop_bit_,      data_bit_,      parity_,            \
                            duplex_,        modem_,         protocol_id_2_,     \
                            BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

            /*--------------------------------------------*/
			/*
				Isdn_e10_store_llc_X31 : low layer compatibility for
											X31 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
                        - trf_mode_     = transfer mode,
						- trf_rate_     = information transfer rate,
                        - structure_    = structure,
                        - dest_rate_    = destination rate,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
                        - user_rate_    = user rate,
						- inter_rate_   = intermediate rate,
                        - nic_tx_       = network independent clock (NIC) on Transmission (Tx),
                        - nic_rx_       = network independent clock (NIC) on Reception (Rx),
						- fc_tx_        = flow control on Transmission (Tx),
						- fc_rx_        = flow control on Reception (Rx),
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
                        - duplex_       = duplex mode,
                        - modem_        = modem type,
						- protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_e10_store_llc_X31(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, inter_rate_, nic_tx_, nic_rx_, fc_tx_, fc_rx_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
		Isdn_e10_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
							out_neg,        trf_mode_,      trf_rate_,          \
                            structure_,     dest_rate_);                        \
		Isdn_e10_store_llc_5_7(PROTOCOL_ID_1_X31,  syn_asyn_,  negotiation_,   \
                            user_rate_,     inter_rate_,    nic_tx_,            \
							nic_rx_,        fc_tx_,         fc_rx_,             \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            stop_bit_,      data_bit_,      parity_,            \
                            duplex_,        modem_,         protocol_id_2_,     \
                            BYTE_VAL_NIL,   protocol_id_3_, BYTE_VAL_NIL)

            /*--------------------------------------------*/

            /*
                Isdn_e10_store_llc_V120 : low layer compatibility for
                                            V120 rate adaption :

                    INPUT :
                        - pr            = primitive ID,
                        - coding_std_   = coding standard,
                        - trf_cap_      = information transfer capability,
                        - out_neg       = out band negotiation,
						- trf_mode_     = transfer mode,
                        - trf_rate_     = information transfer rate,
                        - structure_    = structure,
                        - dest_rate_    = destination rate,
                        - syn_asyn_     = synchronous/asynchronous,
                        - negotiation_  = negotiation,
						- user_rate_    = user rate,
                        - hdr_          = rate adaption header included or not,
                        - multi_frame_  = multiple frame establishement support in DL,
						- op_mode_      = mode of operation,
						- lli_negot_    = logical link identifier negotiation,
                        - assign_       = assignor/assignee,
                        - band_negot_   = in-band/out-band negotiation,
                        - stop_bit_     = number of stop bits,
                        - data_bit_     = number of data bits,
                        - parity_       = number of parity bit,
						- duplex_       = duplex mode,
                        - modem_        = modem type,
                        - protocol_id_2_= user information layer 2 protocol,
                        - protocol_id_3_= user information layer 3 protocol,

            */

#define Isdn_e10_store_llc_V120(pr, coding_std_, trf_cap_, out_neg, trf_mode_, trf_rate_, structure_, dest_rate_, syn_asyn_, negotiation_, user_rate_, hdr_, multi_frame_, op_mode_, lli_negot_, assign_, band_negot_, stop_bit_, data_bit_, parity_, duplex_, modem_, protocol_id_2_, protocol_id_3_) \
        Isdn_e10_store_llc_1_4(pr,          coding_std_,    trf_cap_,           \
							out_neg,        trf_mode_,      trf_rate_,          \
                            structure_,     dest_rate_);                        \
		Isdn_e10_store_llc_5_7(PROTOCOL_ID_1_V120,                              \
                            syn_asyn_,      negotiation_,   user_rate_,         \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   BYTE_VAL_NIL,       \
                            BYTE_VAL_NIL,   BYTE_VAL_NIL,   hdr_,               \
                            multi_frame_,   op_mode_,       lli_negot_,         \
                            assign_,        band_negot_,    stop_bit_,          \
							data_bit_,      parity_,        duplex_,            \
                            modem_,         protocol_id_2_, BYTE_VAL_NIL,       \
							protocol_id_3_,  BYTE_VAL_NIL)

/*-------------------------------------------------------------------------*/

#if NS_SPF_FACILITY == ON

			/*
				Isdn_e10_store_spf_fac : network specific facility

					INPUT :
						- pr 			= primitive ID,
						- net_id_lgth_	= length of network identification,
						- p_net_id		= network identification array
						- param_binary	= parameter/binary,
						- serv_feature	= service/feature,
						- fac_code		= facility code
						- p_fac_info	= network-specific facility specification
			*/

#	define Isdn_e10_store_spf_fac(pr, net_id_lgth_, p_net_id, param_binary_, serv_feature_, fac_code_, p_fac_info)	\
		{uchar FAR *p_sav;															\
		Set_offset_e10	(pr,		spf_fac);										\
		Set_val_e10		(spf_fac,	net_id_lgth,	net_id_lgth_);					\
		p_sav = ns_int_ctx.p__val;													\
		Set_mem_e10		(spf_fac,	net_id,			p_net_id,	(net_id_lgth_ > E10_MX_SZ_NET_ID) ? E10_MX_SZ_NET_ID : net_id_lgth_);\
		ns_int_ctx.p__val = p_sav;													\
		}																			\
		Set_val_e10		(spf_fac,	serv_feature,	serv_feature_);					\
		Set_val_e10		(spf_fac,	action,			param_binary_);					\
		Set_val_e10		(spf_fac,	facility_coding,fac_code_);						\
		Set_str_e10		(spf_fac,	fac_info,		p_fac_info, E10_MX_SZ_SPF_FAC+1)

#endif

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_precedence_level: precedence level

					INPUT :
						- pr 			= primitive ID,
						- coding_std	= coding standard
						- level			= precedence level
						- change		= change value
						- lfb			= LFB indicator
						- mlpp			= MLPP info
						- sz_			= size of MLPP info
			*/

#define Isdn_e10_store_precedence_level(pr, coding_std_, level_, change_, lfb_, mlpp_, sz_)	\
		Set_offset_e10	(pr,				precedence_level);								\
		Set_val_e10		(precedence_level,	coding_std,			coding_std_);				\
		Set_val_e10		(precedence_level,	level,				level_);					\
		Set_val_e10		(precedence_level,	change_value,		change_);					\
		Set_val_e10		(precedence_level,	lfb,				lfb_);						\
		Set_mem_e10		(precedence_level,	info,				mlpp_, sz_)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_progress_ind : progress indicator

					INPUT :
						- pr                = primitive ID,
						- coding_std_       = coding standard,
						- progress_loc_     = general location,
						- progress_descr_   = description.

			*/

#define Isdn_e10_store_progress_ind(pr, coding_std_, progress_loc_, progress_descr_)\
		Set_offset_e10  (pr,            progress_ind);                      \
		Set_val_e10     (progress_ind,  coding_std,     coding_std_);       \
		Set_val_e10     (progress_ind,  progress_loc,   progress_loc_);     \
		Set_val_e10     (progress_ind,  progress_descr, progress_descr_);   \
		Set_next_ie_e10 (progress_ind)

/*-------------------------------------------------------------------------*/
			/*
				Isdn_e10_store_redir_nb : store redir number IE

					INPUT :
						- pr                = primitive ID,
						- nb_type_     		= type of number,
						- plan_id_     		= numbering plan,
						- screen_ind_  		= screening indicators,
						- pres_  			= presentation,
						- reason_  			= reason,
						- nb_               = pointer on the redir number literal string.
			*/

#define Isdn_e10_store_redir_nb(pr, nb_type_, plan_id_, pres_, screen_ind_, reason_, nb_) \
		Set_offset_e10  (pr,          redir_nb);                                \
		Set_val_e10     (redir_nb,    nb_type,   	nb_type_);  \
		Set_val_e10     (redir_nb,    plan_id,		plan_id_);  \
		Set_val_e10     (redir_nb,    pres,			pres_);     \
		Set_val_e10     (redir_nb,    screen_ind,	screen_ind_);\
		Set_val_e10     (redir_nb,    reason,		reason_);\
		Set_str_e10     (redir_nb,    nb,            nb_, E10_MX_SZ_REDIR_NB+1)

/*-------------------------------------------------------------------------*/
			/*

				Isdn_e10_store_restart_ind : restart indicator

					INPUT :
						- pr	= primitive ID,
						- class_= class.

			*/

#define Isdn_e10_store_restart_ind(pr, class_)									\
		Set_offset_e10	(pr,			restart_ind);							\
		Set_val_e10		(restart_ind,	restart_class,	class_);				\
		Set_next_ie_e10	(restart_ind)

/*-------------------------------------------------------------------------*/

            /*
                Isdn_e10_store_signal : signal message

                    INPUT :
                        - pr            = primitive ID,
                        - signal_val    = signal value.

            */

#define Isdn_e10_store_signal(pr, signal_val_)              \
        Set_offset_e10  (pr,        signal);                    \
        Set_val_e10     (signal,    signal_val, signal_val_);   \
        Set_next_ie_e10 (signal)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_transit_net_sel : transit network selection

					INPUT :
						- pr            = primitive ID,
						- net_id_       = address of network identification.
			*/

#define Isdn_e10_store_transit_net_sel(pr, net_id_) \
		Set_offset_e10  (pr,                transit_net_sel);                       \
		Set_str_e10     (transit_net_sel,   net_id,         net_id_,    E10_MX_SZ_TRANSIT_NET_SEL+1)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_travel_classmark : traveling classmark

					INPUT :
						- pr   			         = primitive ID,
						- fac_restriction        = facility restriction level
						- satellite_hop_counter  = satellite hop counter
						- end_to_end_isdn		 = end-to-end ISDN(connectivity) indication
			*/

#define Isdn_e10_store_traveling_classmark(pr, fac_rest_, sat_, end_) \
		Set_offset_e10  (pr,                	traveling_classmark);                  	\
		Set_val_e10     (traveling_classmark,   fac_restriction,	    fac_rest_);	\
		Set_val_e10     (traveling_classmark,   satellite_hop_counter,  sat_);      \
		Set_val_e10     (traveling_classmark,   end_to_end_isdn,       	end_);		\
		Set_next_ie_e10	(traveling_classmark)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_user_entered_code : user entered code

					INPUT :
						- pr   			         = primitive ID,
						- code_type				 = type of user code
						- user_code				 = user code digit
			*/

#define Isdn_e10_store_user_entered_code(pr, code_type_, user_code_) \
		Set_offset_e10  (pr,            user_entered_code);                  	\
		Set_val_e10     (user_entered_code,		code_type,	    code_type_);	\
		Set_str_e10		(user_entered_code,		user_code,		user_code_,	E10_MX_SZ_USER_ENTERED_CODE+2);

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_uui : user to user information IE

					INPUT :
						- pr				= primitive ID,
						- protocol_discr_	= protocol discriminator,
						- p_text 			= address of the user info.
			*/

#define Isdn_e10_store_uui(pr, protocol_discr_, p_text)							\
		Set_offset_e10	(pr,	uui);												\
		Set_val_e10		(uui,	protocol_discr,	protocol_discr_);					\
		Set_str_e10		(uui, 	text,	p_text,	E10_MX_SZ_UUI+1)

#if NS_TYPE_BRI == ON /* { */

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_keypad : keypad IE

					INPUT :
						- pr	 = primitive ID,
						- p_text = address of the literal string.

			*/


#define Isdn_e10_store_keypad(pr,p_text) \
		Set_offset_e10	(pr,		keypad);\
		Set_str_e10		(keypad,	text,	p_text,	E10_MX_SZ_KEYPAD+1)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_e10_store_te_cap : store terminal capabilities

					INPUT :
						- pr 		= primitive ID
			*/

#define Isdn_e10_store_te_cap(pr) \
				Set_offset_e10	(pr,		te_cap)

				/* switchhook					(SWITCHHOOK) */

#define Isdn_e10_store_switchhook(	pr, hook_val_)						\
				Set_offset_e10			(pr, switchhook);					\
				Set_val_e10				(switchhook, hook_val, hook_val_);	\
				Set_next_ie_e10			(switchhook)

				/* adjunct control 				(ADJUNCT_CON) */

#define Isdn_e10_store_adjunct_con(	pr, adjunct_val_)							\
				Set_offset_e10			(pr, adjunct_con);							\
				Set_val_e10				(adjunct_con, adjunct_val, adjunct_val_);	\
				Set_next_ie_e10			(adjunct_con)

#define Isdn_e10_store_assoc_type	/* not used */

				/* destination call appearance	(DEST_CALL_APPEAR) */

#define Isdn_e10_store_dest_call_appear(pr, button_nb_)								\
				Set_offset_e10				(pr, dest_call_appear);						\
				Set_val_e10					(dest_call_appear, button_nb, button_nb_);	\
				Set_next_ie_e10				(dest_call_appear)

				/* display control				(DISPLAY_CON) */

#define Isdn_e10_store_display_con(	pr, display_con_mode_)								\
				Set_offset_e10			(pr, display_con);									\
				Set_val_e10				(display_con, display_con_mode, display_con_mode);	\
				Set_next_ie_e10			(display_con)

				/* display field				(DISPLAY_FLD) */

#define Isdn_e10_store_display_fld(	pr, display_fld_mode_, submode_, display_fld_type_, p_info)\
		Set_offset_e10	(pr, display_fld);									\
		Set_val_e10		(display_fld, display_fld_mode, display_fld_mode_);	\
		Set_val_e10		(display_fld, submode, submode_);					\
		Set_val_e10		(display_fld, display_fld_type, display_fld_type_;	\
		Set_str_e10		(display_fld, info, p_info, E10_MX_SZ_DISPLAY_FLD+1)

				/* feature activation			(FEATURE_ACT) */

#define Isdn_e10_store_feature_act(	pr, button_type_act_, module_nb_, button_nb_)		\
				Set_offset_e10			(pr, feature_act);									\
				Set_val_e10				(feature_act, button_type_act, button_type_act_);	\
				Set_val_e10				(feature_act, module_nb, module_nb_);				\
				Set_val_e10				(feature_act, button_nb, button_nb_);				\
				Set_next_ie_e10			(feature_act)

				/* keypad control 				(KEYPAD_CON) */

#define Isdn_e10_store_keypad_con(	pr, call_ref_type_)								\
				Set_offset_e10			(pr, keypad_con);								\
				Set_val_e10				(keypad_con, call_ref_type, call_ref_type_);	\
				Set_next_ie_e10			(keypad_con)

				/* origination call appearance	(ORI_CALL_APPEAR) */

#define Isdn_e10_store_ori_call_appear(	pr, button_nb_)								\
				Set_offset_e10				(pr, ori_call_appear);						\
				Set_val_e10					(ori_call_appear, button_nb, button_nb_);	\
				Set_next_ie_e10				(ori_call_appear)

				/* other call reference 		(OTHER_CALL_REF) */

#define Isdn_e10_store_other_call_ref(pr, conn_id_)								\
				Set_offset_e10				(pr, other_call_ref);						\
				Set_val_e10					(other_call_ref, conn_id, conn_id_);		\
				Set_next_ie_e10				(other_call_ref)

				/* selected call appearance 	(SEL_CALL_APPEAR) */

#define Isdn_e10_store_sel_call_appear(	pr, button_nb_call_appear_)								\
				Set_offset_e10	(pr, sel_call_appear);												\
				Set_val_e10		(sel_call_appear, button_nb_call_appear, button_nb_call_appear_);	\
				Set_next_ie_e10	(sel_call_appear)

				/* service identifier			(SERVICE_ID) */

#define Isdn_e10_store_service_id(pr, service_id_)							\
				Set_offset_e10			(pr, service_id);						\
				Set_val_e10				(service_id, service_id, service_id_);	\
				Set_next_ie_e10			(service_id)

/*-------------------------------------------------------------------------*/

			/*
				 Isdn_e10_store_endpoint_id : store endpoint identifier

					INPUT :
						- pr        = primitive ID,
						- us_id     = user id,
						- t_id      = terminal id,
						- interp_   = interpreter flag
                        - ces_		= CES
			*/
#define Isdn_e10_store_endpoint_id(pr, us_id, t_id, interp_, ces_)      \
				Set_offset_e10  (pr,            endpoint_id);           \
				Set_val_e10     (endpoint_id,   usid,       us_id);     \
				Set_val_e10     (endpoint_id,   tid,        t_id);      \
				Set_val_e10     (endpoint_id,   interp,     interp_);   \
				Set_val_e10     (endpoint_id,   ces,     	ces_);   	\
				Set_next_ie_e10 (endpoint_id)

/*-------------------------------------------------------------------------*/

			/*
				Isdn_e10_store_information_rq : information_rq IE

					INPUT :
						- pr            = primitive ID,
						- info_type_    = information type
						- info_ind_     = information indicator

			*/

#define Isdn_e10_store_information_rq(pr,info_type_,info_ind_)    		\
		Set_offset_e10  (pr,                information_rq);			\
		Set_val_e10     (information_rq,    info_type,  info_type_);   	\
		Set_val_e10     (information_rq,    info_ind,   info_ind_);    	\
		Set_next_ie_e10 (information_rq)

/*--------------------------------------------------------------------------*/
/*				feature indication specific macros	(FEATURE_IND)			*/
/*--------------------------------------------------------------------------*/

#define Isdn_e10_get_feature_ind_FNS_feature_number(pr, index) (					\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*2]\
		)

#define Isdn_e10_get_feature_ind_FNS_status(pr, index) (							\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*2+1]\
		)

#define Isdn_e10_get_feature_ind_FBS_feature_number(pr, index) (					\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*3]\
		)

#define Isdn_e10_get_feature_ind_FBS_indicator(pr, index) (							\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*3+1]\
		)

#define Isdn_e10_get_feature_ind_FBS_status(pr, index) (							\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index*3+2]\
		)

#define Isdn_e10_get_featur_ind_MBS_starting(pr) (									\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[0]\
		)

#define Isdn_e10_get_feature_ind_MBS_nb_button(pr) (								\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset + \
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[1]\
		)

#define Isdn_e10_get_feature_ind_MBS_status(pr, index) (							\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[index+2]\
		)

#define Isdn_e10_get_feature_ind_MS_meaning(pr) (									\
		(((Paste (off_ns_e10_,pr) FAR *) p__offset) ->feature_ind == 0) ?			\
		BYTE_VAL_NIL :														\
		((struct val_ns_e10_feature_ind) FAR *)(p__offset +							\
			  (((Paste (off_ns_e10_,pr) FAR *) p__offset) -> feature_ind) )) -> info[0]\
		)

#endif /* } */

/*-------------------------------------------------------------------------*/
/*						Q931 (TRANSPARENT) IE ENCODING							   */
/*-------------------------------------------------------------------------*/


#if NS_IE_TSP_OUT == ON

#	define	Isdn_e10_store_bc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, bc);						\
		Set_mem_eob_e10	(bc, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_BC_TSP) ? 1 + E10_MX_SZ_BC_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(bc)

#	define	Isdn_e10_store_called_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, called_nb);						\
		Set_mem_eob_e10	(called_nb, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_CALLED_NB_TSP) ? 1 + E10_MX_SZ_CALLED_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(called_nb)

#	define	Isdn_e10_store_called_sub_add_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, called_sub_add);						\
		Set_mem_eob_e10	(called_sub_add, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_CALLED_SUB_ADD_TSP) ? 1 + E10_MX_SZ_CALLED_SUB_ADD_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(called_sub_add)

#	define	Isdn_e10_store_calling_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, calling_nb);						\
		Set_mem_eob_e10	(calling_nb, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_CALLING_NB_TSP) ? 1 + E10_MX_SZ_CALLING_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(calling_nb)

#	define	Isdn_e10_store_conn_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, conn_nb);						\
		Set_mem_eob_e10	(conn_nb, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_CONN_NB_TSP) ? 1 + E10_MX_SZ_CONN_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(conn_nb)

#	define	Isdn_e10_store_cause_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, cause);						\
		Set_mem_eob_e10	(cause, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_CAUSE_TSP) ? 1 + E10_MX_SZ_CAUSE_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(cause)

#	define	Isdn_e10_store_chan_id_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, chan_id);						\
		Set_mem_eob_e10	(chan_id, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_CHAN_ID_TSP) ? 1 + E10_MX_SZ_CHAN_ID_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(chan_id)

#	define	Isdn_e10_store_facility_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, facility);						\
		Set_mem_eob_e10	(facility, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_FACILITY_TSP) ? 1 + E10_MX_SZ_FACILITY_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(facility)

#	define	Isdn_e10_store_keypad_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, keypad);						\
		Set_mem_eob_e10	(keypad, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_KEYPAD_TSP) ? 1 + E10_MX_SZ_KEYPAD_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(keypad)

#	define	Isdn_e10_store_llc_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, llc);						\
		Set_mem_eob_e10	(llc, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_LLC_TSP) ? 1 + E10_MX_SZ_LLC_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(llc)

#	define	Isdn_e10_store_precedence_level_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, precedence_level);						\
		Set_mem_eob_e10	(precedence_level, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_PRECEDENCE_LEVEL_TSP) ? 1 + E10_MX_SZ_PRECEDENCE_LEVEL_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(precedence_level)

#	define	Isdn_e10_store_progress_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, progress_ind);						\
		Set_mem_eob_e10	(progress_ind, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_PROGRESS_IND_TSP) ? 1 + E10_MX_SZ_PROGRESS_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(progress_ind)

#	define	Isdn_e10_store_redir_nb_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, redir_nb);						\
		Set_mem_eob_e10	(redir_nb, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_REDIR_NB_TSP) ? 1 + E10_MX_SZ_REDIR_NB_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(redir_nb)

#	define	Isdn_e10_store_restart_ind_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, restart_ind);						\
		Set_mem_eob_e10	(restart_ind, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_RESTART_IND_TSP) ? 1 + E10_MX_SZ_RESTART_IND_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(restart_ind)

#	define	Isdn_e10_store_signal_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, signal);						\
		Set_mem_eob_e10	(signal, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_SIGNAL_TSP) ? 1 + E10_MX_SZ_SIGNAL_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(signal)

#	define	Isdn_e10_store_spf_fac_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, spf_fac);						\
		Set_mem_eob_e10	(spf_fac, tsp_data, p_data_,(p_data_[0] > E10_MX_SZ_SPF_FAC_TSP) ? 1 + E10_MX_SZ_SPF_FAC_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(spf_fac)

#	define	Isdn_e10_store_transit_net_sel_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, transit_net_sel);						\
		Set_mem_eob_e10	(transit_net_sel, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_TRANSIT_NET_SEL_TSP) ? 1 + E10_MX_SZ_TRANSIT_NET_SEL_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(transit_net_sel)

#	define	Isdn_e10_store_travel_classmark_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, traveling_classmark);						\
		Set_mem_eob_e10	(traveling_classmark, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_TRAVELING_CLASSMARK_TSP) ? 1 + E10_MX_SZ_TRAVELING_CLASSMARK_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(traveling_classmark)

#	define	Isdn_e10_store_user_entered_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, user_code);						\
		Set_mem_eob_e10	(user_code, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_USER_ENTERED_CODE_TSP) ? 1 + E10_MX_SZ_USER_ENTERED_CODE_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(user_code)

#	define	Isdn_e10_store_uui_tsp(pr, p_data_)				\
		Set_ns_offset_tsp_e10	(pr, uui);						\
		Set_mem_eob_e10	(uui, tsp_data,p_data_, (p_data_[0] > E10_MX_SZ_UUI_TSP) ? 1 + E10_MX_SZ_UUI_TSP : 1 + p_data_[0]);\
		Set_next_ie_e10	(uui)

#endif

/*EOF*/
