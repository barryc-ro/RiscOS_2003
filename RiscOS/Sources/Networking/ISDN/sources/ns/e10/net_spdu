
/*--------------------------------------------------------------------------*
 *                      M O D U L E     H E A D E R
 *
 * filename - net_spdu.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * implements the meta description of the messages
 * (signalling protocol data unit).
 *
 *      ATT_5E10 specific function :
 *
 *       e10_ie_type_eval - implements the evaluation of a conditional
 *                      IE type : Mandatory or Optional.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*
*
*SPDU model description :
*------------------------
*
*            spdu    tab_spdu
*    =====================================================
*    | id | event_id | u_n | n_u | type | p_ie | p_ie_SO |
*    |----|----------|-----|-----|------|------|---------|
*    |    |          |     |     |      |  X-------   X-------------------
*    |----|----------|-----|-----|------|------|  |      |               |
*    |    |          |     |     |      |      |  |      |               |
*    |----|----------|-----|-----|------|------|- | -----|               |
*    |    |          |     |     |      |      |  |      |               |
*                                                 |                      |
*                            spdu_ie              |                      |
*            =====================================v====================  |
*            | id | codeset | u_n | n_u | type | lgth_mini |lgth_maxi |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            |----|---------|-----|-----|------|-----------|----------|  |
*            |    |         |     |     |      |           |          |  |
*            ----------------                                            |
*                       |                                                |
*                       |                                                |
*                       -------> tab_ie                                  |
*                                                     --------------------
*                                          spdu_ie_so |
*                                        =============v=====================
*                                        | id | codeset | u_n | n_u | type |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*                                        |----|---------|-----|-----|------|
*                                        |    |         |     |     |      |
*
*/

                    /* ATT_5E10 SPDU parametrers description */

CONST   struct spdu_param E10_SPDU_PARAM = {
    PROTOCOL_DISCRIMINATOR_I451,        /* Protocol discriminator I.451 (Q.931) */
    1,                                  /* BRI call reference length for outgoing SPDU */
    0,                                  /* BRI call reference minimum length for checking incoming SPDU */
    2,                                  /* BRI call refernce maximum length for  checking incoming SPDU */
    2,                                  /* PRI call reference length for outgoing SPDU */
    0,                                  /* PRI call reference minimum length for checking incoming SPDU */
    2,                                  /* PRI call reference maximum length for checking incoming SPDU */
    ON,                                 /* IE ordered first by codeset and by IE ID within each codeset */
    ON,                                 /* Locking shift allowed */
	OFF,                                /* Non locking shift not allowed */
	ON,                                 /* Null length IE are considered as missing in the SPDU */

#if NS_TYPE_BRI == ON
		2,                              /* Message type maximum length */
#else
		1,                              /* Message type maximum length */
#endif
	OFF,                                /* Global call reference value not meaningful */
	OFF,                                /* NS segmentation. */
	ON,                                 /* NS restart procedure. */
	0,									/* Maximum number of restablish Data Link retry */
	24,									/* D channel */
	23									/* Maximum number of B channels */
};

                    /*
                        ATT_5E10 procedure parameters description
                        ON approve of the comment / OFF disapprove
                    */

CONST   struct net_proc_param E10_NET_PROC_PARAM = {
    OFF,                                /* Some timers depend from the configuration type (POINT_TO_?) */
    OFF,                                /* IE comprehension required procedure is applicable */
    OFF,                                /* The sending a STATUS message is filtered according the cause value */
    ON,                                 /* Clear internal call when data link failure */

#   if EQUIPMENT == NT2
        OFF,                            /* Internal timers are handled */
#   endif

#	if NS_MAINTENANCE_CAPABILITY == ON
		ON,								/* NFAS support */
#	endif

	ON,									/* NS_INFO_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_FAC_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
	OFF,								/* NS_NOTIFY_RQ primitive is acccepted with conn ID set to CONN_ID_MANAGEMENT (for dummy call ref) */
};

                    /*
                         Message description :
                            - information element identifier,
                            - information element codeset,
                            - call control to D channel transfer (ON or OFF),
                            - D channel to call control transfer (ON or OFF),
                            - type (Mandatory Optional, Conditional),
                            - minimal length,
                            - maximal length,
                            - number of allowed repetition.
					*/


/*====================  CALL  ESTABLISHMENT  MESSAGES   =====================*/

							/* Alerting (ALERT) */

CONST   struct spdu_ie ALERT_IE_E10[] = {
/*      ie                  codeset       u --->n       n--->u      type    mini    maxi repetition */
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     2,      8,      1},
	{PROGRESS_IND,          CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     4,      4,      1},

#	if NS_TYPE_BRI == ON
		{TE_CAP,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
		{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif

#	if NS_TYPE_PRI == ON
		{REDIR_NB,          CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     5,      20,     1},
		{UUI,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     2,      64,     1},
#	endif

#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif

	{IE_NIL}
};

							/* Call proceeding (CALL_PROC) */

CONST   struct spdu_ie CALL_PROC_IE_E10[] = {
/*      ie                  codeset       u --->n       n--->u      type    mini    maxi repetition */
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     2,      8,      1},

#	if NS_TYPE_BRI == ON
		{TE_CAP,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
		{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif

	{IE_NIL}
};

							/* Connect (CONNECT) */

CONST   struct spdu_ie CONN_IE_E10[] =  {
/*      ie
			codeset       u --->n       n--->u      type    mini    maxi repetition */
#	if NS_TYPE_PRI == ON
		{CONN_NB,           CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     3,      18,     1},
#	endif

	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     2,      8,      1},
	{PROGRESS_IND,          CODESET_0,      OFF,        N_U_ALL,    OP,     4,      4,      1},

#	if NS_TYPE_BRI == ON
		{TE_CAP,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
		{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif

#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{SWITCHHOOK,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
#	endif

#	if NS_TYPE_PRI == ON
		{REDIR_NB,          CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     5,      20,     1},
		{UUI,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     2,      64,     1},
#	endif

#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif

	{IE_NIL}
};

							/* Connect acknowledge (CONNECT_ACK) */

CONST   struct spdu_ie CONN_ACK_IE_E10[] =  {
/*      ie                  codeset       u --->n       n--->u      type    mini    maxi repetition */
#	if NS_TYPE_BRI == ON
		{CHAN_ID,           CODESET_0,      OFF,	    N_U_ALL,    OP,     2,      8,      1},
		{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif

	{IE_NIL}
};


CONST   struct spdu_ie PROGRESS_IE_E10[] =  {
/*      ie                  codeset       u --->n       n--->u      type    mini    maxi repetition */
	{CAUSE,                 CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     4,      5,      MX_CAUSE},
    {PROGRESS_IND,          CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     4,      4,      2},

#	if NS_TYPE_BRI == ON
		{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif

	{IE_NIL}
};

                            /* Setup (SETUP) */

CONST   struct spdu_ie SETUP_IE_E10[] = {
/*      ie                  codeset       u --->n       n--->u      type    mini    maxi repetition */
	{BC,                    CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     4,      6,      1},
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     2,      8,      1},
	{PROGRESS_IND,          CODESET_0,      OFF,        N_U_ALL,    OP,     4,      4,      1},

#	if NS_TYPE_BRI == ON
		{TE_CAP,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
		{KEYPAD,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		22,		1},
		{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{SWITCHHOOK,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
#	endif

#   if (NS_TYPE_PRI == ON) && (NS_SPF_FACILITY == ON)
		{SPF_FAC,           CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     4,      14,     1},
#   endif

	{CALLING_NB,            CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     3,      19,     1},
	{CALLED_NB,             CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     3,      21,     1},

#	if NS_TYPE_BRI == ON
		{CALLED_SUB_ADD,    CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     3,      23,     1},
#	endif

#	if NS_TYPE_PRI == ON
		{REDIR_NB,          CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     5,      20,     1},
		{TRANSIT_NET_SEL,   CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     6,      7,      1},
#	endif

	{LLC,					CODESET_0,      U_N_ALL,    N_U_ALL,    OP,     2,      16,     1},

#	if NS_TYPE_PRI == ON
		{UUI,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     2,      64,     1},
		{PRECEDENCE_LEVEL,  CODESET_5,      U_N_ALL,    N_U_ALL,    OP,     2,      7,      1},
#	endif

	{USER_ENTERED_CODE,     CODESET_6,      U_N_ALL,    N_U_ALL,    OP,     2,      18,     1},

#	if NS_TYPE_PRI == ON
		{TRAVELING_CLASSMARK,CODESET_6,     U_N_ALL,    N_U_ALL,    OP,     2,      6,      1},
		{FACILITY,          CODESET_6,      OFF,        N_U_ALL,    OP,     2,      240,    1},
#	endif

#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{SEL_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{ORI_CALL_APPEAR,	CODESET_6,		U_N_ALL,	OFF,		OP,		3,		3,		1},
		{DEST_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif
#	if NS_TYPE_BRI == ON
		{E10_ENDPOINT_ID,	CODESET_6,		OFF,		N_U_ALL,	OP,		4,		4,		1},
#	endif
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{FEATURE_ACT,		CODESET_6,		U_N_ALL,	OFF,		OP,		4,		4,	1},
		{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
		{ADJUNCT_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif

	{IE_NIL}
};

#if NS_TYPE_BRI == ON /* { */

							/* Setup acknowledge (SETUP_ACK) */

CONST	struct spdu_ie SETUP_ACK_IE_E10[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition */
	{CHAN_ID,				CODESET_0,		OFF,		N_U_ALL,	MD,		2,		3,		1},
	{SIGNAL,				CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif
	{IE_NIL},
};

							/* Information (INFO) */

CONST	struct spdu_ie INFO_IE_E10[] =	{
/*		ie         	codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CAUSE,             	CODESET_0,      OFF,		N_U_ALL,    OP,     4,      5,      MX_CAUSE},
	{CHAN_ID,				CODESET_0,		OFF,		N_U_ALL,	OP,		2,		3,		1},
	{KEYPAD,				CODESET_0,		U_N_ALL,	OFF,		OP,		2,		22,		1},
	{SIGNAL,				CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{SWITCHHOOK,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
		{SEL_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{KEYPAD_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{OTHER_CALL_REF,	CODESET_6,		U_N_ALL,	OFF,		OP,		3,		3,		1},
		{FEATURE_ACT,		CODESET_6,		U_N_ALL,	OFF,		OP,		4,		4,		1},
		{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
		{ADJUNCT_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{DISPLAY_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif
	{IE_NIL},
};

#endif /* } */

/*===================== CALL  CLEARING  MESSAGES    =======================*/

							/* Disconnect (DISCONNECT) */

CONST   struct spdu_ie DISC_IE_E10[] =  {
/*      ie                  codeset       u --->n       n--->u      type    mini    maxi repetition */
	{CAUSE,                 CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     4,      5,      MX_CAUSE},

#	if NS_TYPE_BRI == ON
		{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{SWITCHHOOK,		CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
#	endif

#	if NS_TYPE_PRI == ON
		{UUI,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     4,      5,      1},
		{FACILITY,          CODESET_6,      U_N_ALL,    OFF,        OP,     3,      240,    1},
#	endif

#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{ADJUNCT_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif

	{IE_NIL}
};

							/* Release (REL) */

CONST   struct spdu_ie REL_IE_E10[] =   {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi repetition */
	{CAUSE,                 CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     4,      5,      MX_CAUSE},

#	if NS_TYPE_BRI == ON
		{CHAN_ID,			CODESET_0,		OFF,		N_U_ALL,	OP,		2,		3,		1},
		{SIGNAL,			CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
#	endif
#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{SEL_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{KEYPAD_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
		{ADJUNCT_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif

	{IE_NIL}
};

							/* Release complete (REL_COMP) */

CONST   struct spdu_ie REL_COMP_IE_E10[] =  {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi    repetition */
	{CAUSE,                 CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     4,      5,      MX_CAUSE},

#	if NS_TYPE_PRI == ON
		{FACILITY,          CODESET_6,      U_N_ALL,    OFF,        OP,     3,      240,    1},
#	endif

#	if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)
		{SEL_CALL_APPEAR,	CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{KEYPAD_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{FEATURE_IND,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
		{ADJUNCT_CON,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
		{DISPLAY_FLD,		CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
#	endif
	{IE_NIL}
};

/*====================      MAINTENANCE  MESSAGES =======================*/

							/* Service (MAINT_SERVICE) */

CONST   struct spdu_ie MAINT_SERVICE_IE_E10[] =  {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi    repetition */
	{CHANGE_STATUS,         CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,     	3,      1},
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,      6,      1},
	{IE_NIL}
};

							/* Service Acknowledge (MAINT_SERVICE_ACK) */

CONST   struct spdu_ie MAINT_SERVICE_ACK_IE_E10[] =  {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi    repetition */
	{CHANGE_STATUS,         CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,     	3,      1},
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,      6,      1},
	{IE_NIL}
};

#if NS_TYPE_BRI == ON /* { */

							/* Management information (MAN_INFO) */

CONST	struct spdu_ie MAN_INFO_IE_E10[] =	{
/*    	ie         	codeset			u --->n 	n--->u  	type    mini    maxi repetition */
	{MANAGMNT,		CODESET_6,		U_N_ALL,	N_U_ALL,	MD,		6,		255,	E10_MX_MANAGMNT},
	{IE_NIL},
};

#endif /* } */

/*====================      MISCELLANEOUS  MESSAGES =======================*/

#if NS_TYPE_PRI == ON

							/* Restart (RESTART) */

CONST   struct spdu_ie RESTART_IE_E10[] =   {
/*    ie                    codeset         u --->n     n--->u      type    mini    maxi repetition */
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     2,      8,      1},
	{RESTART_IND,           CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,      3,      1},
	{IE_NIL}
};

							/* Restart acknowledge (RESTART_ACK) */

CONST   struct spdu_ie RESTART_ACK_IE_E10[] =   {
/*    ie                    codeset         u --->n     n--->u      type    mini    maxi repetition */
	{CHAN_ID,               CODESET_0,      U_N_ALL,    N_U_ALL,    CD,     2,      8,      1},
	{RESTART_IND,           CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,      3,      1},
	{IE_NIL}
};

#endif
                            /* Status (STATUS) */

CONST   struct spdu_ie STATUS_IE_E10[] =    {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi repetition */
    {CAUSE,                 CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     4,      10,     MX_CAUSE},
    {CALL_STATE,            CODESET_0,      U_N_ALL,    N_U_ALL,    MD,     3,      3,      1},
    {IE_NIL}
};

							/* Status enquiry (STATUS_ENQ) */

CONST   struct spdu_ie STATUS_ENQ_IE_E10[] =    {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi repetition */
    {IE_NIL}
};

                            /* Facilty (FAC) */

CONST   struct spdu_ie FAC_IE_E10[] =   {
/*      ie                  codeset         u --->n     n--->u      type    mini    maxi repetition */
    {FACILITY,              CODESET_6,      U_N_ALL,    N_U_ALL,    MD,     2,      240,    1},
    {IE_NIL}
};

/*=========================================================================*/


		/* Supplementary services spdu messages */

#if (NS_TYPE_BRI == ON) && (E10_SUPPLEMENTARY_SERVICES == ON)

CONST	struct spdu_ie CONF_IE_E10[] =	{
/*    ie         			codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{OTHER_CALL_REF,		CODESET_6,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{IE_NIL},
};

							/* Conference acknowledge (CONF_ACK) */

CONST	struct spdu_ie CONF_ACK_IE_E10[] =	{
/*    ie		         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{OTHER_CALL_REF,		CODESET_6,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Conference reject (CONF_REJ) */

CONST	struct spdu_ie CONF_REJ_IE_E10[] =	{
/*    ie         			codeset		  u --->n  		n--->u 		type    mini    maxi repetition*/
	{CAUSE,					CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		1},
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Drop (DROP) */

CONST	struct spdu_ie DROP_IE_E10[] =	{
/*    ie         			codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{IE_NIL},
};

							/* Drop acknowledge (DROP_ACK) */

CONST	struct spdu_ie DROP_ACK_IE_E10[] =	{
/*    ie         			codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Drop reject (DROP_REJ) */

CONST	struct spdu_ie DROP_REJ_IE_E10[] =	{
/*    ie         			codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Hold (E10_HOLD) */

CONST	struct spdu_ie HOLD_IE_E10[] =	{
/*    ie         			codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{IE_NIL},
};

							/* Hold acknowledge (E10_HOLD_ACK) */

CONST	struct spdu_ie HOLD_ACK_IE_E10[] =	{
/*    ie         			codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{SEL_CALL_APPEAR,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{ADJUNCT_CON,			CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Hold reject (E10_HOLD_REJ) */

CONST	struct spdu_ie HOLD_REJ_IE_E10[] =	{
/*    ie         			codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{CAUSE,					CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		1},
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Reconnect (E10_RECONN) */

CONST	struct spdu_ie RECONN_IE_E10[] =	{
/*    	ie         			codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CHAN_ID,				CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{SWITCHHOOK,			CODESET_0,		U_N_ALL,	OFF,		OP,		3,		3,		1},
	{IE_NIL},
};

							/* Reconnect acknowledge (E10_RECONN_ACK) */

CONST	struct spdu_ie RECONN_ACK_IE_E10[] =	{
/*    	ie         			codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CHAN_ID,				CODESET_0,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{SIGNAL,				CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Reconnect reject (E10_RECONN_REJ) */

CONST	struct spdu_ie RECONN_REJ_IE_E10[] =	{
/*    	ie         			codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{CAUSE,					CODESET_0,		OFF,		N_U_ALL,	MD,		4,		22,		1},
	{SEL_CALL_APPEAR,		CODESET_6,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Redirect (REDIR) */

CONST	struct spdu_ie REDIR_IE_E10[] =	{
/*    	ie         			codeset 	  u --->n 		n--->u  	type    mini    maxi repetition */
	{SIGNAL,				CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Transfer (TRANS) */

CONST	struct spdu_ie TRANS_IE_E10[] =	{
/*    	ie         			codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{OTHER_CALL_REF,		CODESET_6,		U_N_ALL,	OFF,		CD,		3,		3,		1},
	{IE_NIL},
};

							/* Transfer acknowledge (TRANS_ACK) */

CONST	struct spdu_ie TRANS_ACK_IE_E10[] =	{
/*    	ie         			codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Transfer reject (TRANS_REJ) */

CONST	struct spdu_ie TRANS_REJ_IE_E10[] =	{
/*    	ie         			codeset 	 	u --->n  	n--->u  	type    mini    maxi repetition */
	{CAUSE,					CODESET_0,		OFF,		N_U_ALL,	MD,		4,		4,		1},
	{FEATURE_IND,			CODESET_6,		OFF,		N_U_ALL,	OP,		4,		255,	1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Associated (ASSOC) */

CONST	struct spdu_ie ASSOC_IE_E10[] =	{
/*    ie         				codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{CAUSE,					CODESET_0,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{SIGNAL,				CODESET_0,		OFF,		N_U_ALL,	OP,		3,		3,		1},
	{ASSOC_TYPE,			CODESET_6,		OFF,		N_U_ALL,	MD,		3,		3,		1},
	{SEL_CALL_APPEAR,		CODESET_6,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{DEST_CALL_APPEAR,		CODESET_6,		OFF,		N_U_ALL,	CD,		3,		3,		1},
	{E10_ENDPOINT_ID,		CODESET_6,		OFF,		N_U_ALL,	OP,		4,		4,		1},
	{DISPLAY_FLD,			CODESET_6,		OFF,		N_U_ALL,	OP,		5,		44,		E10_MX_DISPLAY_FLD},
	{IE_NIL},
};

							/* Associated acknowledge (ASSOC_ACK) */

CONST	struct spdu_ie ASSOC_ACK_IE_E10[] =	{
/*    ie         	codeset 	  u --->n  		n--->u 		type    mini    maxi repetition*/
	{IE_NIL},
};

#endif /* } */

/*=========================================================================*/

#define Ns_e10_table_or_function(str, tab)	PIC_CONST_ARRAY struct str tab[] = {
#define Ns_e10_end_table_or_function		};

#define Ns_e10_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)		\
			Ns_tab_spdu_entry (pr, ev, u_n, n_u, usa, t_ie, t_so_ie),

#define Ns_e10_tab_spdu_maint_e(pr, ev, u_n, n_u, usa, t_ie, t_so_ie, prot)		\
			Ns_tab_spdu_maint_e (pr, ev, u_n, n_u, usa, t_ie, t_so_ie, prot),

#include "e10.tab_spdu"		/* include Table describing the primitives */

#define E10_MX_TAB_SPDU (sizeof (E10_TAB_SPDU)/ sizeof (struct spdu)) /* table size */

CONST   uchar   e10_mx_size_spdu = E10_MX_TAB_SPDU;

/*--------------------------------------------------------------------------*
					 F U N C T I O N    H E A D E R

Name             e10_ie_type_eval - implements the evaluation of a conditional
									IE type : Mandatory or Optional.

Usage           uchar e10_ie_type_eval (uchar spdu_id_p, uchar ie_id_p);
							- spdu_id_p : SPDU ID,
							- ie_id_p   :  IE ID,

Return value    e10_ie_type_eval returns the IE type
                Mandatory, Optional or eXcluded.

common constants and declarations : ns.h

common objects : call context
							- direction : from network or from user.

*--------------------------------------------------------------------------*/

uchar e10_ie_type_eval (spdu_id_p, ie_id_p)
	uchar   spdu_id_p;                          /* SPDU ID */
	uchar   ie_id_p;                            /* IE ID */

{

	if (ie_id_p == UUI) {

		if (Na_type == BRI) return (EX);
		if (Na_type == PRI) return (OP);
	}

	switch (spdu_id_p) {

		case ALERT :
		case CONN :

			switch (ie_id_p) {

				case CHAN_ID :

						/* Mandatory if network first response to setup */

					if (Call_current_exist) {

						if (Call_state == STATE_CALL_INIT_1) {
							return (MD);
						}

					}

					return (OP);
			}


		case CALL_PROC :

			if (Na_type == PRI) return (MD);

			return (OP);

		case REL :
		case REL_COMP :

				/* CAUSE is Mandatory when first clearing message */

			if ((! Call_current_exist) || (Call_rel_flag == ON)) {
				return (MD);

			} else {

				return (OP);
            }


        case RESTART :
		case RESTART_ACK :

            if (i_entity_origination == ENT_DL_D) {
				return (OP);

            } else {

                if (I_restart_ind_class == RI_INDICATED_CHANNEL) return (MD);
				if (I_restart_ind_class == RI_SINGLE_INTERFACE)  return (OP);
				return (EX);
			}

		case SETUP :

				/* Called number */

			if (Na_type == PRI) return (MD);
			return (OP);

            /* Inconsistency */

		default :
			Trap (TRAP_IE_TYPE, "e10_ie_type_eval");

	}

	return (OP);
}

#if OM_CODE_TYPE == OM_PIC /* PIC used{ */

		/* Function used to initialize address fields in Table above */

#undef Ns_e10_table_or_function

#undef Ns_e10_end_table_or_function
#undef Ns_e10_tab_spdu_entry
#undef Ns_e10_tab_spdu_maint_e

#define Ns_e10_table_or_function(str, tab)	i_pic = 0;

#define Ns_e10_end_table_or_function

#define Ns_e10_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)						\
			Pic_init_struct_array (E10_TAB_SPDU, i_pic, p_ie, (struct spdu_ie *)t_ie);	\
			Pic_init_struct_array_next (E10_TAB_SPDU, p_ie_so, (struct spdu_ie_so *)t_so_ie);

#define Ns_e10_tab_spdu_maint_e(pr, ev, u_n, n_u, usa, t_ie, t_so_ie, prot)		Ns_e10_tab_spdu_entry(pr, ev, u_n, n_u, usa, t_ie, t_so_ie)

void pic_init_ns_e10_spdu ()
{
	uchar   i_pic;

#	include "e10.tab_spdu"
}

#endif /* end of PIC used} */

/*EOF*/
