
/*--------------------------------------------------------------------------*
 *						M O D U L E		H E A D E R
 *
 * filename - build_cc.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		e10_cc_load_ns_test - implements the loading of a NS test primitive
 *			ready to be sent to the Network Signalling function.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

/*--------------------------------------------------------------------------*
					 F U N C T I O N	H E A D E R

Name			e10_cc_load_ns_test - implements the sending of a test primitive
								  to the NS entity.

Usage			uchar e10_cc_load_ns_test (code_t primitive_code, nai_t nai,
										conn_id_t conn_id);
							- primitive_code 	= code of the primitive to send,
							- nai				= network access ID,
							- conn_id			= connection ID.

Return value : 	e10_cc_load_ns_test returns = OK
										= NOK

common constants and declarations : ns.h, isdn.h

common objects : Isdn_ctx.

*--------------------------------------------------------------------------*/

#if NS_MAINTENANCE_CAPABILITY == ON
	extern	uchar	g_ns_maint_state;
	extern	uchar 	g_ns_maint_pref;
	extern	uchar	g_ns_maint_b_channel;
	extern  uchar	g_ns_maint_int;
#endif

uchar e10_cc_load_ns_test (prim_code, nai, sapi, conn_id)
	code_t		prim_code;		/* primitive code */
	nai_t 		nai;			/* network access ID */
	sapi_t		sapi;			/* sapi */
	conn_id_t	conn_id;		/* connection ID */
{

	char p_data[10];

#	if NS_IE_TSP_OUT == ON
		uchar tsp_data[5];
#	endif



		/* Allocate a message */

	S_msg_alloc;

		/* Allocate or reused a buffer */

	Buffer_alloc_reused;

		/* Switch according to the primitive to send */

	switch (prim_code) {

/*==========================================================================*/

/*---------------- CONNECTION REQUEST */

		case  NS_CONN_RQ :

#		if NS_IE_TSP_OUT == ON
			Isdn_init_e10_ctx_rq_rs_tsp		(conn_rq,
											 Buffer_a_first_data,
											 Buffer_data_lgth
											);
#		else
			Isdn_init_e10_ctx_rq_rs			(conn_rq,
											 Buffer_a_first_data
											 );
#		endif

#		if NS_IE_TSP_OUT == OFF


			if (Na_type == PRI) {

				Isdn_e10_store_bc_N_64			(conn_rq, 12);
			} else {
				Isdn_e10_store_bc_SPEECH_BRI	(conn_rq);
			}

			p_data[0] = 0x0c;
			p_data[1] = 0;

			if (Na_type == PRI) {
				Isdn_e10_store_chan_id_NB_PRI	(conn_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_data
											);
			} else {

#				if NS_TYPE_BRI == ON

					Isdn_e10_store_chan_id_BRI	(conn_rq,
											 CHAN_EXCL,
											 NOT_D_CHAN,
											 1
											);

					Isdn_e10_store_keypad		(conn_rq,
											 "45#"
											);
#				endif
			}

#			if NS_SPF_FACILITY == ON

				Isdn_e10_store_spf_fac		(conn_rq,
											 4,
											 "789",
											 SPF_FAC_BINARY,
											 FAC_SERVICE,
											 ATT_BINARY_MEGACOM_800,
											 "0123456789"
											 );
#			endif

			Isdn_e10_store_called_nb		(conn_rq,
											 NB_NATIONAL,
											 PLAN_ISDN,
											 "0123456789"
											);

			Isdn_e10_store_calling_nb		(conn_rq,
											 NB_NATIONAL,
											 PLAN_ISDN,
											 PRES_ALLOWED,
											 USER_PROVIDED,
											 "3369855044"
											);

			Isdn_e10_store_redir_nb			(conn_rq,
											 NB_NATIONAL,
											 PLAN_ISDN,
											 PRES_ALLOWED,
											 USER_PASSED,
											 R_CALL_FORWARDING_BY_CALLED,
											 "12435"
											);

			Isdn_e10_store_transit_net_sel	(conn_rq,
											 "123"
											);

			Isdn_e10_store_uui				(conn_rq,
											 PROTOCOL_DISCR_IA5,
											 "conn rq--- BONJOUR +++"
											);

			p_data[0] = 0x12;
			p_data[1] = 0x13;
			p_data[2] = 0x14;

			Isdn_e10_store_precedence_level	(conn_rq,
											 CODING_STD_NATIONAL,
											 L_IMMEDIATE,
											 CHANGED_AT_NET_BOUNDARIES,
											 LFB_ALLOWED,
											 p_data,
											 3
											);

			Isdn_e10_store_user_entered_code(conn_rq,
											 UC_AUTHO_CODE,
											 "2468"
											);

			Isdn_e10_store_traveling_classmark(conn_rq,
												7,
												5,
												NO_END_TO_END_ISDN_PREFERRED
												);
#else

					/* Q931 encoding */

			tsp_data[0] = 2;
			tsp_data[1] = 0x88;
			tsp_data[2] = 0x90;

			Isdn_e10_store_bc_tsp			(conn_rq,
												tsp_data
											);
			tsp_data[0] = 3;
			tsp_data[1] = 0xa9;
			tsp_data[2] = 0x83;
			tsp_data[3] = 0x81;

			Isdn_e10_store_chan_id_tsp		(conn_rq,
											 tsp_data
											);

			Isdn_e10_store_called_nb		(conn_rq,
											 NB_UNKNOWN,
											 PLAN_UNKNOWN,
											 "3369855044"
											);

			tsp_data[0] = 0xc;
			tsp_data[1] = 0x21;
			tsp_data[2] = 0x80;
			tsp_data[3] = 0x33;
			tsp_data[4] = 0x33;
			tsp_data[5] = 0x36;
			tsp_data[6] = 0x39;
			tsp_data[7] = 0x38;
			tsp_data[8] = 0x35;
			tsp_data[9] = 0x35;
			tsp_data[10] = 0x30;
			tsp_data[11] = 0x34;
			tsp_data[12] = 0x34;

			Isdn_e10_store_calling_nb_tsp	(conn_rq,
												tsp_data
											);

			tsp_data[0] = 0x4;
			tsp_data[1] = 0xa0;
			tsp_data[2] = 0x31;
			tsp_data[3] = 0x32;
			tsp_data[4] = 0x33;

			Isdn_e10_store_transit_net_sel_tsp(conn_rq,
												tsp_data
											);

			tsp_data[0] = 0x2;
			tsp_data[1] = 0x91;
			tsp_data[2] = 0x81;

#endif

			break;

/*---------------- CONNECTION RESPONSE */

		case  NS_CONN_RS :
			Isdn_init_e10_ctx_rq_rs 		(conn_rs,
											 Buffer_a_first_data
											);

			p_data[0] = 0x0c;
			p_data[1] = 0;

			if (Na_type == PRI) {
				Isdn_e10_store_chan_id_NB_PRI	(conn_rs,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_data
											);
			}

			break;

/*---------------- CONNECTION CLEAR REQUEST */

		case  NS_CLEAR_RQ :
			Isdn_init_e10_ctx_rq_rs			(clear_rq,
											 Buffer_a_first_data
											);

			Isdn_e10_store_cause			(clear_rq,
											 CODING_STD_CCITT,
											 LOCATION_USER,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											);


			break;

/*---------------- CONNECTION CLEAR RESPONSE */

		case  NS_CLEAR_RS :
			Isdn_init_e10_ctx_rq_rs			(clear_rs,
											 Buffer_a_first_data
											);

			Isdn_e10_store_cause			(clear_rs,
											 CODING_STD_CCITT,
											 BYTE_VAL_NIL,
											 C_C_NORMAL_EVENT,
											 C_V_NORMAL_CLEARING_16,
											 A_NIL
											);

			break;


/*---------------- ALERTING REQUEST */

		case  NS_ALERT_RQ :
			Isdn_init_e10_ctx_rq_rs			(alert_rq,
											 Buffer_a_first_data
											);

			p_data[0] = 0x0c;
			p_data[1] = 0;

			if (Na_type == PRI) {

				Isdn_e10_store_chan_id_NB_PRI	(alert_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_data
											);
			}

			break;

/*---------------- CALL_PROC_RQ */

		case NS_CALL_PROC_RQ :
			Isdn_init_e10_ctx_rq_rs			(call_proc_rq,
											 Buffer_a_first_data
											);

			p_data[0] = 0x0c;
			p_data[1] = 0;

			Isdn_e10_store_chan_id_NB_PRI	(call_proc_rq,
											 INT_ID_IMPLICIT,
											 CHAN_EXCL,
											 BYTE_VAL_NIL,
											 p_data
											);
			break;

/*---------------- FACILITY RQ */

		case NS_FAC_RQ :
			Isdn_init_e10_ctx_rq_rs			(fac_rq,
											 Buffer_a_first_data
											);

			p_data[0] = 0x04;
			p_data[1] = 0x01;
			p_data[2] = 0x02;
			p_data[3] = 0x03;
			p_data[4] = 0x04;

			Isdn_e10_store_facility			(fac_rq,
											p_data,
											5
											);

			break;

/*---------------- RESTART_RS */

		case NS_RESTART_RS :
			Isdn_init_e10_ctx_rq_rs			(restart_rs,
											 Buffer_a_first_data
											);

			Isdn_e10_store_restart_ind		(restart_rs,
											 RI_ALL_INTERFACES
											);

			break;

/*---------------- RESTART_RQ */

		case NS_RESTART_RQ :
			break;

/*---------------- UNKNOWN primitive */

		default :
			return (NOK);
		}
			/* Load the communication message */

		Store_message (prim_code, nai, sapi, conn_id, p_buffer);
		Buffer_data_size = (ushort)(Get_p_val - Buffer_a_first_data);

		return (OK);

}

/*EOF*/
