/*--------------------------------------------------------------------------*
 *                      M O D U L E     H E A D E R
 *
 * filename - build_nt.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *      e10_net_build_pdu_ns - implements the simulation of the network side
 *                  for a call connection.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


/*--------------------------------------------------------------------------*
					 F U N C T I O N    H E A D E R

Name            e10_net_build_pdu_ns - implements the simulation of the network side
					for a call connection.

Usage           e10_build_pdu_ns ()

Common constants and declarations : ns.h

*--------------------------------------------------------------------------*/

void e10_net_build_pdu_ns ()
{
		/* Message builder */

	 switch (Tolower (g_spdu_id[0])) {

/*==========================================================================*/

			/*========== primitives as seen from TE side ==========*/

				/* Call establishment spdu event */

		case DA_ALERT :
				*p_info++ = ALERT;

				 p_ie_o = p_info;

				*p_info++ = PROGRESS_IND;
				*p_info++ = 2;
				*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
				*p_info++ = 0x88;	/* 1+ PROGRESS_DESCR_IN_BAND_NOW */

				*p_info++ = REDIR_NB;
				*p_info++ = 5;
				*p_info++ = 0x00;	/* 0+ NB_UNKNOWN+ PLAN_UNKNOWN */
				*p_info++ = 0x03;	/* 0+ PRES_ALLOWED+ 000 + SCREENING_NET_PROVIDED */
				*p_info++ = 0x80;	/* 0+ 000 + REASON_UNKNOWN */
				 Put_text ("22");

				*p_info++ = UUI;
				*p_info++ = 10;
				*p_info++ = 0x04;	/* PROTOCOL_DISCR_IA5 */
				 Put_text ("* alert *");

				break;

		case DA_CALL_PROC :
				*p_info++ = CALL_PROC;
				 p_ie_m = p_info;

				*p_info++ = CHAN_ID;
				*p_info++ = 3;
				*p_info++ = 0xa9;
				*p_info++ = 0x83;
				*p_info++ = 0x81;
				break;

		case DA_CONN :
				*p_info++ = CONN;

				 p_ie_o = p_info;

				*p_info++ = CONN_NB;
				*p_info++ = 5;
				*p_info++ = 0x00;	/* 0+ NB_UNKNOWN+ PLAN_UNKNOWN */
				*p_info++ = 0x03;	/* 0+ PRES_ALLOWED+ 000 + SCREENING_NET_PROVIDED */
				*p_info++ = 0x80;	/* 0+ 000 + REASON_UNKNOWN */
				 Put_text ("20");

				*p_info++ = PROGRESS_IND;
				*p_info++ = 2;
				*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
				*p_info++ = 0x82;	/* 1+ PROGRESS_2 */

				*p_info++ = REDIR_NB;
				*p_info++ = 5;
				*p_info++ = 0x00;	/* 0+ NB_UNKNOWN+ PLAN_UNKNOWN */
				*p_info++ = 0x03;	/* 0+ PRES_ALLOWED+ 000 + SCREENING_NET_PROVIDED */
				*p_info++ = 0x80;	/* 0+ 000 + REASON_UNKNOWN */
				 Put_text ("88");

				break;

		case DA_CONN_ACK :
				*p_info++ = CONN_ACK;
				break;

		case DA_SETUP :
				*p_info++ = SETUP;

				*p_info++ = BC;	  /* Mandatory */
				*p_info++ = 2;
				*p_info++ = 0x88;	/* 1+ CODING_STD_CCITT+ TRF_CAP_SPEECH */
				*p_info++ = 0x90;	/* 0+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */

				 p_ie_m = p_info;

				if (Na_type == PRI) {
					*p_info++ = CHAN_ID;
					*p_info++ = 3;
					*p_info++ = 0xa9;
					*p_info++ = 0x83;
					*p_info++ = 0x81;
				} else {
					*p_info++ = CHAN_ID;
					*p_info++ = 1;
					*p_info++ = 0x8a;
				}

				*p_info++ = PROGRESS_IND;
				*p_info++ = 2;
				*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
				*p_info++ = 0x82;	/* 1+ PROGRESS_2 */

				 p_ie_o = p_info;

#				if NS_SPF_FACILITY == ON

					*p_info++ = SPF_FAC;
					*p_info++ = 0x09;
					*p_info++ = 0x04;
					*p_info++ = 0xa1;
					*p_info++ = 0x31;
					*p_info++ = 0x32;
					*p_info++ = 0x33;
					*p_info++ = 0x61;
					*p_info++ = 0x39;
					*p_info++ = 0x39;
					*p_info++ = 0x39;
#				endif

				*p_info++ = CALLING_NB;
				*p_info++ = 8;
				*p_info++ = 0x80;	/* 1+ NB_UNKNOWN+ PLAN_UNKNOWN */
				 Put_text ("7777777");

				*p_info++ = CALLED_NB;
				*p_info++ = 8;
				*p_info++ = 0xc1;	/* 1+ NB_LOCAL+ PLAN_ISDN */
				 Put_text ("1234567");

				*p_info++ = CALLED_SUB_ADD;
				*p_info++ = 6;
				*p_info++ = 0x80;	/* 1+ NB_LOCAL+ PLAN_ISDN */
				 Put_text ("P1234");

				*p_info++ = REDIR_NB;
				*p_info++ = 5;
				*p_info++ = 0x00;	/* 0+ NB_UNKNOWN+ PLAN_UNKNOWN */
				*p_info++ = 0x03;	/* 0+ PRES_ALLOWED+ 000 + SCREENING_NET_PROVIDED */
				*p_info++ = 0x80;	/* 0+ 000 + REASON_UNKNOWN */
				 Put_text ("22");

				*p_info++ = TRANSIT_NET_SEL;
				*p_info++ = 0x04;
				*p_info++ = 0xa1;
				*p_info++ = 0x38;
				*p_info++ = 0x38;
				*p_info++ = 0x38;

				*p_info++ = LLC;
				*p_info++ = 12;
				*p_info++ = 0x08;	/* 0+ CODING_STD_CCITT+ TRF_CAP_UNRESTRICTED */
				*p_info++ = 0xc0;	/* 1+ OUT_BAND_POSSIBLE */
				*p_info++ = 0x10;	/* 0+ TRF_MODE_CIRCUIT+ TRF_RATE_64KBS */
				*p_info++ = 0x10;	/* 0+ STRUCTURE_8_KHZ_INT+ 00+ 00 */
				*p_info++ = 0x90;	/* 1+ 00+ TRF_RATE_64KBS */
				*p_info++ = 0x21;	/* 0+ 01+ PROTOCOL_ID_1_V110 */
				*p_info++ = 0x02;	/* 0+ SYN+ NEGOTIATION_NOT_IN_BAND+ RA_1_2KBS */
				*p_info++ = 0x1A;	/* 0+ INTER_RA_UNUSED+ NIC_RQ_TX_DATA+
										NIC_ACCEPT_DATA+ FLOW_NOT_RQ_TX_DATA+
										FLOW_CAN_ACCEPT_DATA+ 0 */
				*p_info++ = 0x5b;	/* 0+ STOP_BIT_1_5+ DATA_BIT_8+ NO_PARITY */
				*p_info++ = 0xc0;	/* 1+ FULL_DUPLEX+ MODEM_RESERVED */
				*p_info++ = 0xc6;	/* 1+ 10+ PROTOCOL_ID_2_X25_LL */
				*p_info++ = 0xe6;	/* 1+ 11+ PROTOCOL_ID_3_X25_PL */

				*p_info++ = UUI;
				*p_info++ = 10;
				*p_info++ = 0x04;	/* PROTOCOL_DISCR_IA5 */
				 Put_text ("* setup *");

				*p_info++ = 0x95;	/* Shift to codeset 5 */

				*p_info++ = PRECEDENCE_LEVEL;
				*p_info++ = 5;
				*p_info++ = 0xc4;
				*p_info++ = 0x82;
				*p_info++ = 1;
				*p_info++ = 2;
				*p_info++ = 3;

				*p_info++ = 0x96;	/* Shift to codeset 6 */

				*p_info++ = USER_ENTERED_CODE;
				*p_info++ = 0x03;
				*p_info++ = 0x80;
				*p_info++ = 0x31;
				*p_info++ = 0x39;

				*p_info++ = TRAVELING_CLASSMARK;
				*p_info++ = 0x04;
				*p_info++ = 0xd0;
				*p_info++ = 0x02;
				*p_info++ = 0x03;
				*p_info++ = 0x82;

				*p_info++ = FACILITY;
				*p_info++ = 0x03;
				*p_info++ = 0x01;
				*p_info++ = 0x02;
				*p_info++ = 0x03;


				break;

		case DA_PROGRESS :
				*p_info++ = PROGRESS;

				 p_ie_m = p_info;

				*p_info++ = PROGRESS_IND;
				*p_info++ = 2;
				*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
				*p_info++ = 0x88;	/* 1+ PROGRESS_DESCR_IN_BAND_NOW */

				*p_info++ = PROGRESS_IND;
				*p_info++ = 2;
				*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ PROGRESS_PU_NET_LOC_USER */
				*p_info++ = 0x81;	/* 1+ PROGRESS_DESCR_IN_BAND_NOW */

				break;

		case DA_DISC :
				*p_info++ = DISC;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x82;	/* 1+ CODING_STD_CCITT+ 0+ LOCATION_PU_NET_LOC_USER */
				*p_info++ = 0x90;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_CLEARING_16 */

				p_ie_o = p_info;

				*p_info++ = UUI;
				*p_info++ = 12;
				*p_info++ = 0x04;	/* PROTOCOL_DISCR_IA5 */
				 Put_text ("* RELEASE *");
				break;

		case DA_REL :
				*p_info++ = REL;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x82;
				*p_info++ = 0x90;	/* 1+ C_C_NORMAL_EVENT+ C_V_16 */

				break;

		case DA_REL_COMP :
				*p_info++ = REL_COMP;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x82;
				*p_info++ = 0x90;	/* 1+ C_C_NORMAL_EVENT+ C_V_16 */

				break;

		case DA_STATUS :
				*p_info++ = STATUS;

				 p_ie_m = p_info;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x82;
				*p_info++ = 0x90;	/* 1+ C_C_NORMAL_EVENT+ C_V_16 */

				*p_info++ = CALL_STATE;
				*p_info++ = 1;
				*p_info++ = 0x0a;		/* ACTIVE state */

				break;

		case DA_STATUS_ENQ :
				*p_info++ = STATUS_ENQ;
				break;

		case DA_RESTART :
				*p_info++ = RESTART;

				 p_ie_m = p_info;

				*p_info++ = RESTART_IND;
				*p_info++ = 1;
				*p_info++ = 0x87;	/* 1+ RI_ALL_INTERFACES */

				break;

		case DA_RESTART_ACK :
				*p_info++ = RESTART_ACK;

				 p_ie_m = p_info;

				*p_info++ = RESTART_IND;
				*p_info++ = 1;
				*p_info++ = 0x87;	/* 1+ RI_ALL_INTERFACES */

				break;

		case DA_FAC :
				*p_info++ = FAC;

				 *p_info++ = 0x96;

				 p_ie_m = p_info;

				*p_info++ = FACILITY;
				*p_info++ = 5;
				*p_info++ = 0x01;
				*p_info++ = 0x02;
				*p_info++ = 0x03;
				*p_info++ = 0x04;
				*p_info++ = 0x05;

				break;

		case DA_MAINT_SERVICE :
				*p_info++ = MAINT_SERVICE;

				p_ie_m = p_info;
				*p_info++ = CHANGE_STATUS;
				*p_info++ = 0x01;
				*p_info++ = 0xc0;

				*p_info++ = CHAN_ID;
				*p_info++ = 4;
				*p_info++ = 0xe9;
				*p_info++ = 0x80;
				*p_info++ = 0x83;
				*p_info++ = 0x81;

				break;

		case DA_MAINT_SERVICE_ACK :
				*p_info++ = MAINT_SERVICE_ACK;
				p_ie_m = p_info;

				*p_info++ = CHANGE_STATUS;
				*p_info++ = 0x01;
				*p_info++ = 0xc0;
/*
				*p_info++ = CHAN_ID;
				*p_info++ = 4;
				*p_info++ = 0xe9;
				*p_info++ = 0x80;
				*p_info++ = 0x83;
				*p_info++ = 0x81;
*/
				*p_info++ = CHAN_ID;
				*p_info++ = 1;
				*p_info++ = 0xac;

				break;

		case DA_SPDU_ID_UNKNOWN:
				*p_info++ = SPDU_ID_UNKNOWN;

				*p_info++ = CAUSE;
				*p_info++ = 2;
				*p_info++ = 0x82;
				*p_info++ = 0x9f;	/* 1+ C_C_NORMAL_EVENT+ C_V_NORMAL_UNSPECIFIED_31 */

				break;

		case '1' :
				Automata_1 ();
				break;

/*==========================================================================*/

/*---------------- UNKNOWN primitive */

		case DA_HEXA_CODING :
				mg_ns_hexa ();		/* Hexadecimal coding */
				break;

		default :
			return;

	}

}

/*EOF*/
