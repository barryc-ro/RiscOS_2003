
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - net_tim.e10
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		- Implements the ATT_5E10 specific timer tables of the NETWORK SIGNALLING
 *			layer of the ISDN-BRICKS product.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    ISDN-BRICKS                                      |*/
/*|    Network Signalling (NS) Entity                   |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

			/* TIMERS IMPLICIT VALUES */

				/* Network timer implicit values */

#define E10_NET_T300				(2		* SECOND)	/* T300 */
#define E10_NET_T303				(4		* SECOND)	/* T303 */
#define E10_NET_T305				(4		* SECOND)	/* T305 */
#define E10_NET_T306				(4		* SECOND)	/* T305 */
#define E10_NET_T308				(4		* SECOND)	/* T308 */
#define E10_NET_T309				(90		* SECOND)	/* T309 */
#define E10_NET_T310				(10		* SECOND)	/* T310 */
#define E10_NET_T316				(30		* SECOND)	/* T316 */
#define E10_NET_T317				(120	* SECOND)	/* T317 */
#define E10_NET_T321				(5		* SECOND)	/* T321 */

				/* User timer values */

#define E10_USER_T300				(2		* SECOND)	/* T300 */
#define E10_USER_T303				(4		* SECOND)	/* T303 */
#define E10_USER_T305				(4		* SECOND)	/* T305 */
#define E10_USER_T308				(4		* SECOND)	/* T308 */
#define E10_USER_T309				(90		* SECOND)	/* T309 */
#define E10_USER_T310				(45		* SECOND)	/* T309 */
#define E10_USER_T313				(4		* SECOND)	/* T309 */
#define E10_USER_T316				(30		* SECOND)	/* T316 */
#define E10_USER_T317				(120	* SECOND)	/* T317 */
#define E10_USER_T321				(5		* SECOND)	/* T321 */
#define E10_USER_TSRV				(60		* SECOND)	/* TSERV */
#define E10_USER_TSPID				(20		* SECOND)	/* TSPID */
#define E10_USER_TSRV				(60		* SECOND)	/* TSERV */

			/* NS timer implicit value table */

		/* Call associated timers */

CONST_ARRAY struct ns_timer E10_TI_CALL[] = {

/*	NT value				User value		Event ID		Index (0 -> NB_CALL_TIMER-1) */

	{E10_NET_T300,			E10_USER_T300,		TI_300,			E10_T300_IDX},		/* T300 */
	{E10_NET_T303,			E10_USER_T303,		TI_303,			E10_T303_IDX},		/* T303 */
	{E10_NET_T305,			E10_USER_T305,		TI_305,			E10_T305_IDX},		/* T305 */
	{E10_NET_T306,			0,					TI_306,			E10_T306_IDX},		/* T306 */
	{E10_NET_T308,			E10_USER_T308,		TI_308,			E10_T308_IDX},		/* T308 */


	{E10_NET_T310,			E10_USER_T310,		TI_310,			E10_T310_IDX},		/* T308 */
	{0,						E10_USER_T313,		TI_313,			E10_T313_IDX},		/* T308 */

#	if NS_T309 == ON
		{E10_USER_T309,		E10_USER_T309,		TI_309,			E10_T309_IDX},		/* T309 */
#	endif

};

		/* DLCI associated timers */

CONST_ARRAY struct ns_timer E10_TI_DLCI[] = {

/*	NT value			User value			Event ID		Index (0 -> MX_DLCI_TIMER-1) */

	{TI_DL_VAL,			TI_DL_VAL,			TI_DL	},		/* T3DL */
	{TI_DL_EST_VAL,		TI_DL_EST_VAL,		TI_DL_EST},		/* T3_DL_EST */

#	if (NS_RESTART_PROCEDURE == ON) || (NS_MAINTENANCE_CAPABILITY == ON)
		{E10_NET_T316,	E10_USER_T316,		TI_316	},		/* T316 */
		{E10_NET_T317,	E10_USER_T317,		TI_317	},		/* T317 */
#	endif

	{0,					E10_USER_TSPID,		TI_SPID	},		/* TSPID */

#	if NS_MAINTENANCE_CAPABILITY == ON
		{E10_NET_T321,	E10_USER_T321,		TI_321},		/* T321 */
		{0,				E10_USER_TSRV,		TI_SRV},		/* TSRV */
#	endif
};


	/* Index table for timers used in the kernel */

CONST_ARRAY uchar E10_TI_IDX[] = {

#	if NS_T309 == ON
		E10_T309,
#	endif

#	if (NS_RESTART_PROCEDURE == ON) || (NS_MAINTENANCE_CAPABILITY == ON)
		E10_T316,
		E10_T317,
#	endif

	E10_TSPID,

#	if NS_MAINTENANCE_CAPABILITY == ON
		E10_T321,
		E10_TSRV,
#	endif 

	TI_EOT,
};


/*EOF*/
