
/*-------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - s_vs.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *        main - implements the main function of a server composed of
 *		         SM, VS entities
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"

#include "simul.h"

#include "vs_int.h"

		/* Common */

	Server_common;

#if NEW_FCT_STYLE == ON
	uchar sim_mdl	(struct message FAR *p_msg);
#else
	uchar sim_mdl	();
#endif


		/* Server definition */

CONST struct server_def p_server_def_s_vs [] = {

	/* entity ID,   entry point, congestion processing, global vars init function */

		{VS_TERMINAL_ENTITY,	vs,			OFF,	OFF,	vs_var_init},
		{ENT_SM,				sm,			OFF,	OFF,	sm_var_init},
		{ENT_MDL,				sim_mdl,	OFF,	OFF,	FCT_NIL},

#if SIMULATION == ON
		{ENT_TI,				FCT_NIL,	OFF},
#endif

		{ENT_NIL},
};

		/* ------------ Server queue ID ------------ */

uint		qid_s_vs;

		/* ----- Server's specific flags list ------ */

#if SIMULATION == ON

#	if	NEW_FCT_STYLE == ON
		uchar	s_vs_flag	(uchar flag_val, char code);

#	else

		uchar	s_vs_flag ();
#	endif

	struct server_flag s_vs_flag_list [] = {
		{'1',		s_vs_flag},
		{'2',		s_vs_flag},
		{'9',		s_vs_flag},
		{FLAG_NIL}
	};

#endif

	/* -- Message building and analysing functions lists -- */

#if (SIM_ANALYSER == ON) || (SIM_BUILDER == ON)

		/* ---- Global data ---- */

	CONST struct server_simul_to p_app_to [] = {
		{VS_TERMINAL_ENTITY,	ana_sdu_vs, 		build_sdu_app_to_vs},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_dl_to [] = {
		{VS_TERMINAL_ENTITY,	ana_sdu_dl, 		build_sdu_dl_to_vs},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_dl_v120_to [] = {
		{VS_TERMINAL_ENTITY,	ana_sdu_dl, 		build_sdu_v120_to_vs},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_mdl_to [] = {
		{ENT_NIL},
	};

	CONST struct server_simul_to p_sm_to [] = {
		{ENT_SM,				ana_sdu_sm, 		build_sdu_sm_to_vs},
		{VS_TERMINAL_ENTITY,	ana_sdu_sm, 		FCT_NIL},
		{ENT_MDL,				ana_sdu_sm, 		FCT_NIL},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_ti_to [] = {
		{VS_TERMINAL_ENTITY,	ana_sdu_ti_vs, 		build_sdu_ti_to_vs},
		{ENT_NIL},
	};

	CONST struct server_simul_to p_vs_to [] = {
		{ENT_SM,				ana_sdu_sm, 		FCT_NIL},
		{VS_TERMINAL_IT_ENTITY,	ana_sdu_vs, 		FCT_NIL},
		{ENT_DL,				ana_sdu_dl, 		FCT_NIL},
		{ENT_DL_V120,			ana_sdu_dl, 		FCT_NIL},
		{ENT_NIL},
	};


		/* ---- Server "from" list ---- */

	CONST struct server_simul_from p_from [] = {
		{ENT_SM,				"System Management",	p_sm_to			},
		{ENT_TI,				"Timer Management",		p_ti_to			},

		{VS_TERMINAL_ENTITY,	"VS",					p_vs_to			},
		{VS_TERMINAL_IT_ENTITY,	"Application",			p_app_to		},

		{ENT_MDL,				"DL Management",		p_mdl_to		},
		{ENT_DL,				"Data Link",			p_dl_to			},
		{ENT_DL_V120,			"Data Link V.120",		p_dl_v120_to	},

		{ENT_NIL},
	};

#endif

/*-------------------------------------------------------------------------*/

	Server_main(

		s_vs,					/* name of the server's main function */
		p_server_def_s_vs,		/* pointer on the server's definition list */
		qid_s_vs,				/* variable containing the queue identifier */
		0,						/* size of the external FIFO queue (0 means implicit value) */
		p_from,					/* pointer on the messages origination
								   entities' list (used for simulation only) */
		s_vs_flag_list			/* pointer on the server's flags list */

	)

/*-------------------------------------------------------------------------*/

#if SIMULATION == ON

uchar s_vs_flag (flag_val, code)
	uchar	flag_val;			/* ON or OFF */
	char	code;				/* flag code */
{
	return (OK);
}

/*-------------------------------------------------------------------------*/

uchar sim_mdl (p_msg)
struct message FAR *p_msg;
{
	ent_id_t			 from;
	ent_id_t			 to;
	struct message 	FAR	*p_rcv_msg;
	struct buffer 	FAR	*p_buffer;
	uchar			FAR	*p_data;

	p_rcv_msg	= p_msg;
	p_data		= R_a_data;
	from		= R_msg_from;
	to			= R_msg_to;

	switch (R_msg_from) {
	default:
		break;

	case ENT_SM:
		switch (R_msg_code) {
		default:
			break;

		case SM_DL_ATTACH_SAPI_RQ:
		case SM_DL_DETACH_SAPI_RQ:
			R_msg_to			= from;
			R_msg_from			= to;
			R_msg_code			= SM_DL_SAPI_CO;
			Confirm_ret_code	= OK;

			Send_message (p_rcv_msg);

			p_rcv_msg	= P_NIL;
			break;
		}
		break;
	}
	Free_msg (p_rcv_msg);
	return (OK);
}

#endif

/*EOF*/

