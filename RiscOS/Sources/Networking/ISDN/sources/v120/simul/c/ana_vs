
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - ana_vs.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *         ana_sdu_dl - implements the analysis of a DL SDU message.
 *         ana_sdu_vs - implements the analysis of a VS SDU message.
 *         ana_sdu_ti_vs - implements the analysis of a Timer VS message.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/


#include "services.h"

#if SIMULATION == ON
#	include "dl_int.h"
#	include "vs_int.h"
#	include "simul.h"

/*-------------------------------------------------------------------------*/

#define Pr_msg_dl 		\
	fprintf (f_out, "from = %c to = %c code = %s nai = %-1u sapi = %-3u ces = %-1u",\
	L_msg_from, L_msg_to, dl_prim[strchar(dl_prim, L_msg_code)].p_text, L_msg_nai, L_msg_sapi, L_msg_ces)

#define Pr_msg_vs 		\
	fprintf (f_out, "from = %c to = %c code = %s nai = %-1u sapi = %-3u ces = %-1u",\
	L_msg_from, L_msg_to, vs_prim[strchar(vs_prim, L_msg_code)].p_text, L_msg_nai, L_msg_sapi, L_msg_ces)

#define Pr_msg_ti_vs 	\
	fprintf (f_out, "from = %c to = %c code = %s nai = %-1u sapi = %-u ces = %-1u sn = %-u",\
	L_msg_from, L_msg_to, ti_vs_prim[strchar (ti_vs_prim, L_msg_code)].p_text, L_msg_nai, L_msg_sapi, L_msg_conn_id, L_msg_inf0)

/*-------------------------------------------------------------------------*/

			/* DL primitives */

CONST struct code_text dl_prim [] = {
	  {DL_EST_RQ,			"DL_EST_RQ"},
	  {DL_U_EST_RQ,			"DL_U_EST_RQ"},
	  {DL_EST_IN,			"DL_EST_IN"},
	  {DL_U_EST_IN,			"DL_U_EST_IN"},
	  {DL_EST_CO,			"DL_EST_CO"},
	  {DL_REL_RQ,			"DL_REL_RQ"},
	  {DL_REL_IN,			"DL_REL_IN"},
	  {DL_REL_CO,			"DL_REL_CO"},
	  {DL_DA_RQ,			"DL_DA_RQ"},
	  {DL_DA_IN,			"DL_DA_IN"},
	  {DL_ACK_CO,			"DL_ACK_CO"},
	  {DL_U_DA_RQ,			"DL_U_DA_RQ"},
	  {DL_U_DA_IN,			"DL_U_DA_IN"},
	  {DL_COMMIT_RQ,		"DL_COMMIT_RQ"},
	  {DL_COMMIT_CO,		"DL_COMMIT_CO"},
	  {WAIT_ACK,			"WAIT_ACK"},
	  {DL_BUSY_RQ,			"DL_BUSY_RQ"},
	  {DL_BUSY_IN,			"DL_BUSY_IN"},
	  {DL_CLEAR_BUSY_RQ,	"DL_CLEAR_BUSY_RQ"},
	  {DL_CLEAR_BUSY_IN,	"DL_CLEAR_BUSY_IN"},
	  {DL_INT_SYNC_RQ,		"DL_INT_SYNC_RQ"},
	  {DL_INT_SYNC_CO,		"DL_INT_SYNC_CO"},
	  {V120_SETPARM_RQ,		"V120_SETPARM_RQ"},
	  {V120_SETPARM_IN,		"V120_SETPARM_IN"},
	  {V120_SETPARM_RS,		"V120_SETPARM_RS"},
	  {V120_SETPARM_CO,		"V120_SETPARM_CO"},
	  {0,					"NONAME"},
  };


			/* VS primitives */

CONST struct code_text vs_prim [] = {
	  {VS_INIT_RQ,			"VS_INIT_RQ"},
	  {VS_INIT_CO,			"VS_INIT_CO"},
	  {VS_STOP_RQ,			"VS_STOP_RQ"},
	  {VS_STOP_CO,			"VS_STOP_CO"},
	  {VS_DA_RQ,			"VS_DA_RQ"},
	  {VS_DA_IN,			"VS_DA_IN"},
	  {VS_BUSY_RQ,			"VS_BUSY_RQ"},
	  {VS_BUSY_IN,			"VS_BUSY_IN"},
	  {VS_CLEAR_BUSY_RQ,	"VS_CLEAR_BUSY_RQ"},
	  {VS_CLEAR_BUSY_IN,	"VS_CLEAR_BUSY_IN"},
	  {VS_INT_SYNC_RQ,		"VS_INT_SYNC_RQ"},
	  {VS_INT_SYNC_CO,		"VS_INT_SYNC_CO"},
	  {VS_SIGNAL_IN,		"VS_SIGNAL_IN"},
	  {0,					"NONAME"},
  };

/*-------------------------------------------------------------------------*/

			/* VS timer event */

CONST struct code_text ti_vs_prim[] = {
	 {0,					"NONAME"},
	 };

/*-------------------------------------------------------------------------*/

uchar ana_sdu_dl (p_msg)
struct message FAR *p_msg;		/* pointer on message to print */
{
	struct buffer FAR	*p_buffer;	/* pointer on the buffer */

	Pr_msg_dl;

	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

uchar ana_sdu_vs (p_msg)
struct message FAR *p_msg;		/* pointer on message to print */
{
	struct buffer FAR	*p_buffer;	/* pointer on the buffer */

	Pr_msg_vs;

	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

uchar ana_sdu_ti_vs (p_msg)
	struct message FAR *p_msg;
{
	Pr_msg_ti_vs;
	return (CONTINUE);
}

/*-------------------------------------------------------------------------*/

#endif /* SIMULATION == ON */	/* } */

/*EOF*/

