
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - sim_app.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		build_sdu_app_to_vs	- implements the building of a message
 *							  from VS_TERMINAL_IT_ENTITY to VS_TERMINAL_ENTITY
 *		build_sdu_sm_to_vs	- implements the building of a message
 *							  from ENT_SM to VS_TERMINAL_ENTITY
 *		build_sdu_ti_to_vs	- implements the building of a message
 *							  from ENT_TI to VS_TERMINAL_ENTITY
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"

#if SIMULATION == ON	/* { */

#include "simul.h"

#include "vs_int.h"

#	if NEW_FCT_STYLE == ON
		void	mg_term_id		 	(void);
		void	pr_app_to_vs_code 	(void);
		void	pr_sm_to_vs_code 	(void);
#	else
		void	mg_term_id		 	();
		void	pr_app_to_vs_code 	();
		void	pr_sm_to_vs_code 	();
#	endif

extern struct vs_config CONST vs_config_data;

/*-------------------------------------------------------------------------*/

		/* Addressing information */

void mg_term_id ()
{
	Prompt	("                 term_id", u, g_nai);
	Scan	(d, &g_nai);
	Echo	(u, g_nai);
}

/*--------------------------------------------------------------------------*/

uchar build_sdu_app_to_vs ()
{
	nai_t		nai;					/* network access identifier (identifies the NETWORK access, not the DTE/application) */
	add_t		chan_id;				/* B-channel id (1..) */
	sapi_t		sapi;					/* DL service access point id */
	add_t		ces;					/* DL connection endpoint identifier */
	ushort		lli;					/* LLI, logical link id */
	uchar		direction;				/* call direction : VS_CALL_OUTGOING, VS_CALL_INCOMING or VS_CALL_NONE */

	char		t_profile_id  [VS_PROFILE_ID_MAX_LGTH + 1];	/* parameter profile id */
	char		t_servprof_id [VS_SERVPROF_ID_MAX_LGTH + 1];/* service profile id */

	struct vs_config FAR	*p_config;
	uchar 			 FAR	*p_data;

	mg_code ();

	while (g_code[0] == '?') {
		pr_app_to_vs_code ();
		mg_code ();
	}

	mg_term_id 	();

	g_sapi	= SAPI_NIL;
	g_add	= ADD_NIL;

	p_config	= &vs_config_data;

	nai			= Vs_cfg_nai (0);
	chan_id		= 1;
	sapi		= Vs_cfg_servprof_sapi (0);
	ces			= Vs_cfg_servprof_ces (0);
	lli			= Vs_cfg_servprof_lli (0);
	direction	= VS_CALL_OUTGOING;

	Memcpy_far (&t_profile_id [0], Vs_cfg_a_profile_id (0),
				VS_PROFILE_ID_MAX_LGTH + 1);
	Memcpy_far (&t_servprof_id [0], Vs_cfg_a_servprof_id (0),
				VS_SERVPROF_ID_MAX_LGTH + 1);

	switch (g_code [0]) {
	default:
		break;

	case VS_INIT_RQ:
		p_buffer	= Alloc_buffer ();
		S_msg_init_link_buffer;					/* link the buffer */

		p_data	= S_a_data;

		Memset_far ((char FAR*)p_data, 0, Sizeof_vs_init);

		Vs_init_nai				= nai;
		Vs_init_chan_id			= chan_id;
		Vs_init_sapi			= sapi;
		Vs_init_ces				= ces;
		Vs_init_lli				= lli;
		Vs_init_direction		= direction;

		Memcpy_far (Vs_init_a_profile_id, &t_profile_id [0],
					VS_PROFILE_ID_MAX_LGTH + 1);
		Memcpy_far (Vs_init_a_servprof_id, &t_servprof_id [0],
					VS_SERVPROF_ID_MAX_LGTH + 1);

		Vs_init_ph_ch_nb		= 1;
		Vs_init_ph_ch_nai(0)	= nai;
		Vs_init_ph_ch_sapi(0)	= SAPI_NIL;
		Vs_init_ph_ch_chani(0)	= chan_id;

		Vs_init_conn_est_timer_val		= 2000;

#		if VS_V42B_NEGOTIATION == ON
			Vs_init_v42b_resp_timer_val	= 1000;
			Vs_init_v42b_p0				= 0;
			Vs_init_v42b_p1				= 0;
			Vs_init_v42b_p2				= 0;
#		endif

		Buffer_data_size		= Sizeof_vs_init;
		break;

	case VS_STOP_RQ:
		p_buffer	= Alloc_buffer ();
		S_msg_init_link_buffer;					/* link the buffer */

		p_data	= S_a_data;

		Vs_term_stop_rq_nai		= nai;
		Vs_term_stop_rq_chan_id	= chan_id;
		Vs_term_stop_rq_cause	= 0;

		Buffer_data_size		= Sizeof_vs_term_stop_rq;
		break;

	}

	load_message (g_from[0], VS_TERMINAL_ENTITY);

	return (OK);

}

/*--------------------------------------------------------------------------*/

uchar build_sdu_sm_to_vs ()
{
	mg_code ();

	while (g_code[0] == '?') {
		pr_sm_to_vs_code ();
		mg_code ();
	}

	mg_nai 	();
	g_sapi	= SAPI_NIL;
	g_add	= ADD_NIL;

	switch (g_code [0]) {
	default:
		break;

	case SM_SET_CONFIG_RQ:
		p_buffer	= Alloc_buffer ();
		S_msg_init_link_buffer;					/* link the buffer */
		Memcpy_far ((char FAR *)Buffer_a_start_data,
					(char FAR *)&vs_config_data,
					 sizeof (struct vs_config));
		Buffer_data_size	= sizeof (struct vs_config);
		break;

	case SM_RESET_CONFIG_RQ:
		S_msg_data_size	= sizeof (struct confirm);
		break;
	}

	load_message (g_from[0], VS_TERMINAL_ENTITY);

	return (OK);

}


/*-------------------------------------------------------------------------*/

		/* Timer simulation : ---> to VS */

uchar build_sdu_ti_to_vs ()
{
	mg_nai 	();
	mg_sapi ();
	mg_ces 	();

	Prompt	("    timer T200=0, T203=3", c, g_code[0]);
	Scan	(1s, g_code);
	Echo	(c, g_code[0]);

	Prompt	("         sequence number", 3d, g_inf0);
	Scan	(3d, &g_inf0);
	Echo	(3d, g_inf0);

		/* Load the message */

	load_message (ENT_TI, VS_TERMINAL_ENTITY);

	return (OK);
}

/*-------------------------------------------------------------------------*/

void	pr_app_to_vs_code ()
{
	fprintf (f_out, "		%c : VS_INIT_RQ",		VS_INIT_RQ);
	fprintf (f_out, "\n		%c : VS_STOP_RQ",		VS_STOP_RQ);
	fprintf (f_out, "\n		%c : VS_DA_RQ",			VS_DA_RQ);
	fprintf (f_out, "\n		%c : VS_BUSY_RQ",		VS_BUSY_RQ);
	fprintf (f_out, "\n		%c : VS_CLEAR_BUSY_RQ",	VS_CLEAR_BUSY_RQ);
	fprintf (f_out, "\n		%c : VS_INT_SYNC_RQ",	VS_INT_SYNC_RQ);
	fprintf (f_out, "\n		%c : VS_SIGNAL_RQ",		VS_SIGNAL_RQ);
	fprintf (f_out, "\n");

}

/*-------------------------------------------------------------------------*/

void	pr_sm_to_vs_code ()
{
	fprintf (f_out, "		%c : SM_SET_CONFIG_RQ",		SM_SET_CONFIG_RQ);
	fprintf (f_out, "\n		%c : SM_RESET_CONFIG_RQ",	SM_RESET_CONFIG_RQ);
	fprintf (f_out, "\n		%c : SM_INIT_RQ",			SM_INIT_RQ);
	fprintf (f_out, "\n		%c : SM_STOP_RQ",			SM_STOP_RQ);
	fprintf (f_out, "\n		%c : SM_BUSY_RQ",			SM_BUSY_RQ);
	fprintf (f_out, "\n		%c : SM_CLEAR_BUSY_RQ",		SM_CLEAR_BUSY_RQ);
	fprintf (f_out, "\n");
}

#endif	/* SIMULATION == ON */	/* } */

/*EOF*/
