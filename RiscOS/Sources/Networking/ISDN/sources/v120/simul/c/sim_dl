
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - sim_dl.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	   build_sdu_dl_to_vs - implement the simulation of a message coming
 *                          from the DL entity and sent to the VS entity.
 *	   build_sdu_v120_to_vs - implement the simulation of a message coming
 *                          from the DL/V.120 entity and sent to the VS
 *							entity.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "services.h"

#if SIMULATION == ON	/* { */

#include "simul.h"
#include "dl_int.h"

#include "vs_int.h"		/* to get VS_TERMINAL_ENTITY definition only */

#if NEW_FCT_STYLE == ON
	uchar 	build_sdu_l2_to_vs 	(ent_id_t ent_id);
	void	pr_l2_to_vs_code 	(void);
#else
	uchar 	build_sdu_l2_to_vs 	();
	void	pr_l2_to_vs_code 	();
#endif

/*-------------------------------------------------------------------------*/

uchar build_sdu_dl_to_vs ()
{
	return (build_sdu_l2_to_vs (ENT_DL));
}

/*--------------------------------------------------------------------------*/

uchar build_sdu_v120_to_vs ()
{
	return (build_sdu_l2_to_vs (ENT_DL_V120));
}

/*--------------------------------------------------------------------------*/

uchar build_sdu_l2_to_vs (ent_id)
ent_id_t	ent_id;
{
	mg_code ();

	while (g_code[0] == '?') {
		pr_l2_to_vs_code ();
		mg_code ();
	}

	mg_nai ();
	mg_sapi ();
	mg_ces ();

	switch (g_code [0]) {
	default:
	case DL_EST_IN:
	case DL_U_EST_IN:
	case DL_EST_CO:
	case DL_REL_IN:
	case DL_REL_CO:
		break;					/* load message as is */

	case DL_DA_IN:
	case DL_U_DA_IN:
	case DL_COMMIT_CO:
	case DL_ACK_CO:
		break;
	}

	load_message (ent_id, VS_TERMINAL_ENTITY);

	return (OK);
}

/*-------------------------------------------------------------------------*/

void	pr_l2_to_vs_code ()
{
	fprintf (f_out, "		%c : DL_EST_IN",			DL_EST_IN);
	fprintf (f_out, "		%c : DL_U_EST_IN",			DL_U_EST_IN);
	fprintf (f_out, "\n		%c : DL_EST_CO",			DL_EST_CO);
	fprintf (f_out, "\n		%c : DL_REL_IN",			DL_REL_IN);
	fprintf (f_out, "		%c : DL_REL_CO",			DL_REL_CO);
	fprintf (f_out, "\n		%c : DL_DA_IN",				DL_DA_IN);
	fprintf (f_out, "		%c : DL_U_DA_IN",			DL_U_DA_IN);
	fprintf (f_out, "\n		%c : DL_COMMIT_CO",			DL_COMMIT_CO);
	fprintf (f_out, "\n		%c : DL_ACK_CO",			DL_ACK_CO);
	fprintf (f_out, "\n		%c : DL_BUSY_IN",			DL_BUSY_IN);
	fprintf (f_out, "		%c : DL_CLEAR_BUSY_IN",		DL_CLEAR_BUSY_IN);
	fprintf (f_out, "\n		%c : DL_INT_SYNC_CO",		DL_INT_SYNC_CO);
	fprintf (f_out, "\n		%c : V120_SETPARM_IN",		V120_SETPARM_IN);
	fprintf (f_out, "		%c : V120_SETPARM_CO",		V120_SETPARM_CO);
	fprintf (f_out, "\n");
}

/*--------------------------------------------------------------------------*/

#endif /* SIMULATION == ON */	/* } */

/*EOF*/
