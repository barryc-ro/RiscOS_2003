
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_err.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	vs_error_process	- error processing routine
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : 		vs_error_process : error processing routine

Usage :		uchar vs_error_process (ushort err)
						- err		: error code

Description : parse errors, process error, trap at fatal error.
			  return NOK if necessary, or return OK and let routine continue.

Return value :
		OK	: go on.
		NOK	: quit from current routine.

*--------------------------------------------------------------------------*/

uchar vs_error_process (err)
ushort		err;
{
	if (err == VS_ERR_NONE) {
		return (OK);
	}
	Vs_error = err;

	switch (err) {

	case VS_ERR_PROFILE_ID_MISSING					:				/* profile id is missing */
	case VS_ERR_SERVPROF_ID_MISSING					:				/* profile id is missing */
	case VS_ERR_PROFILE_LGTH_EXCEEDED				:				/* parameter profile length is exceeded */
	case VS_ERR_SERVPROF_LGTH_EXCEEDED				:				/* service profile length is exceeded */
		break;

	case VS_ERR_PROFILE_INVALID					:				/* parameter profile is invalid */
	case VS_ERR_PROFILE_UNKNOWN					:				/* parameter profile is unknown */
	case VS_ERR_SERVPROF_UNKNOWN					:				/* service profile is unknown */

		switch (Vs_event_id) {

		case VS_EV_SM_SET_CONFIG_RQ	:

			Vs_assert (0, err, "");
			Vs_config_co (NOK);
			break;

		case VS_EV_NIL:
		case VS_EV_STOP:				/* stop VS unit event */
		case VS_EV_START:				/* start VS unit event */
			break;

		default:
			break;
		}

		break;

#if VS_ASSERT == ON

	case VS_ERR_CONF_WITHOUT_REQUEST				:				/* confirmation received without request */
	case VS_ERR_INAPPROPRIATE_EVENT					:				/* event is not appropriate to the current state */
		Vs_assert (0, err, "");

		break;
#endif

	/*---------------------------------
		ERRORS TERMINAL / CONNECTION
	----------------------------------*/

	case VS_ERR_NO_CONNECTION_ESTABLISHED:	/* no connection established */
		switch (Vs_event_id) {
		default:
			break;

		case VS_EV_NETWORK_REL_IN:

			/* REL_IN upon non existing (already disconnected) terminal is allowed */

			Vs_event_id	= VS_EV_NIL;
			return (NOK);
		}
		break;

	case VS_ERR_DL_SAPI_ATTACH_FAILED:
	case VS_ERR_DL_SAPI_DETACH_FAILED:
		if (Vs_term_channel_reassign == ON) {
			Vs_term_channel_reassign = OFF;
			vs_cur_servprof_update ();
		}

		vs_disconnection ();

		Vs_assert (0, VS_TRAP_ASSERT_01, "V.120:channel attach/detach failed 2");
		break;

		/* ERRORS SYSTEM
		----------------*/

#if VS_ASSERT == ON

	case VS_ERR_INCOHERENT_ACTION_CONFIRMATION:	/* confirmation to undertaken action is not coherent */
	case VS_ERR_CONNECTION_SATURATE:			/* connections are saturate */
	case VS_ERR_TERMINAL_REFERENCE_1:			/* terminal reference (term_id) is not correct */
	case VS_ERR_TERMINAL_REFERENCE_2:			/* terminal reference (term_id) is not correct */
	case VS_ERR_ERRONEOUS_NETWORK_REFERENCE:	/* network access reference (nai) is not correct */
	case VS_ERR_ERRONEOUS_SERVICE_REFERENCE:	/* connection references sapi is not correct */
	case VS_ERR_ERRONEOUS_CONNECTION_REFERENCE:	/* connection reference (dl_ces) is not correct */
	case VS_ERR_CTX_ASSIGNMENT:					/* incorrect context assignment */
	case VS_ERR_WORK_BUFFER_OVERFLOW:			/* work buffer is overflow */
	case VS_ERR_ENTITY_UNKNOWN:					/* entity is unknown */
	case VS_ERR_EVENT_UNKNOWN:					/* event is unknown */
		Vs_assert (0, err, "");
		break;
#endif

		/* ERRORS CONFIGURATION
		-----------------------*/

	case VS_ERR_CONFIG_NEVER_BEEN:				/* must set configuration before running */
		Vs_assert (0, err, "");
		break;

	case VS_ERR_INSUFFICIENT_RESOURCE:			/* Can't allocate resource */
	case VS_ERR_CONFIG_NULL_NB_CFG_OBJECT:		/* number of configuration objects is null in VS inactive state */
	case VS_ERR_CONFIG_INCOHERENT_DATA:			/* incoherent data detected */
	case VS_ERR_CONFIG_CTX_ACC:					/* context access error */
	case VS_ERR_NET_FIFO_THRESHOLDS:			/* error in the transmit (to network) fifo thresholds */
		Vs_assert (0, err, "");
		Vs_config_co (NOK);
		break;

		/* ERRORS UNDEFINED
		-------------------*/

	case VS_ERR_UNDEFINED:
	default:									/* not specified errors */
		Vs_assert (0, err, "");
		break;
	}

	if (Vs_error != VS_ERR_NONE) {
		Vs_error = VS_ERR_NONE;									/* reset error indicator */
	}

	if (Vs_p_msg != P_NIL) {
		Free_msg (Vs_p_msg);
		Vs_p_msg = P_NIL;
	}

	switch (Vs_event_id) {

	case VS_EV_NIL				:				/* undefined event */
	case VS_EV_STOP				:				/* stop VS unit event */
	case VS_EV_START			:				/* start VS unit event */
	case VS_EV_SM_SET_CONFIG_RQ	:				/* SM set configuration event */

		break;

	default						:
		Vs_term_state_reset ();					/* reset terminal state */
		vs_term_queued_data_transmit ();		/* transmit to terminal possible queued data */
	}

	return (NOK);
}

/*EOF*/

