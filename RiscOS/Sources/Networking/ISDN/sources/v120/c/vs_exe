
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_exe.c (vs command execution)
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	vs_exe_profile		- PROFILE selection command execution
 *	vs_exe_read			- READ parameter(s) command execution
 *	vs_exe_set			- SET parameter(s) command execution
 *	vs_exe_setread		- SET & READ parameter(s) command execution
 *	vs_exe_status		- STATUS indication command execution
 *
 *	vs_dl_send_jn_state	- send junction state to network
 *	vs_oper_break		- BREAK operation
 *	vs_oper_profile		- PROFILE operation
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "dl_int.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Names & fonctions	:

	vs_exe_profile		: PROFILE selection command execution
	vs_exe_read			: READ parameter(s) command execution
	vs_exe_set			: SET parameter(s) command execution
	vs_exe_setread		: SET & READ parameter(s) command execution

Usages				:
		uchar vs_exe_break			(void);
		uchar vs_exe_profile		(void);
		uchar vs_exe_read			(void);
		uchar vs_exe_set			(void);
		uchar vs_exe_setread		(void);


Description :	execute a VS command (send primitive, set parameters...)

Return value :	OK or NOK

common constants and declarations : vs.h

common objects :

*--------------------------------------------------------------------------*/

/*-----------------
	EXIT FROM VS
------------------*/

/*--------
	SET
---------*/

uchar vs_exe_set ()
{
	Vs_parameter_set (OFF);											/* set X.3 parameter common routine */

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Names & fonctions	:

	vs_dl_est_rq	: DL establishment
	vs_oper_break	: BREAK operation
	vs_oper_profile	: PROFILE load operation

Usages			:
		void  vs_oper_break			(void);
		uchar vs_oper_profile		(char FAR * p_prof_id);

Description		:
	Call		: Establish call
	Info status	: Information status format and send
	Break		: break command or signal received from terminal operation
	Profile		: load profile operation

Return value	: OK or NOK

*--------------------------------------------------------------------------*/

/*----------
	CALL
-----------*/
void vs_dl_est_rq ()
{
	Vs_conn_state_set (VS_CONN_STATE_CONN_IN_PROGRESS);
	vs_term_state_set (VS_TERM_STATE_INACTIVE);

		/* Fill & send message
		----------------------*/

	prepare_sending_message (0, P_NIL);
	vs_snd_network (DL_EST_RQ, P_NIL);
}

/*---------------
	INFO STATUS
----------------*/

void vs_dl_send_jn_state ()
{
	struct buffer FAR *	p_buffer;
	uchar				send_first_byte;
	uchar				send_second_byte;

	Vs_assert ((p_snd_msg == P_NIL), VS_TRAP_P_SND_MSG, "vs_dl_send_jn_state/p_snd_msg");

	send_first_byte		= OFF;
	send_second_byte	= OFF;

	if (Vs_last_sent_terminal_present != vs_terminal_is_present (Vs_term_id)) {
		Vs_last_sent_terminal_present	= vs_terminal_is_present (Vs_term_id);
		send_second_byte	= ON;
	}
	if (Vs_last_sent_term_busy != Vs_term_busy) {
		Vs_last_sent_term_busy	= Vs_term_busy;
		send_second_byte	= ON;
	}
	if (Vs_last_sent_break_rq != Vs_term_break_rq) {
		Vs_last_sent_break_rq	= Vs_term_break_rq;
		send_first_byte		= ON;
	}

	if (send_second_byte == ON) {
		send_first_byte	= ON;
	}
	if (send_first_byte == OFF) {	/* no information to send */
		return;
	}

	prepare_sending_message (Vs_min_dl_hole_size + V120_HEADER_SIZE,
							 p_rcv_msg);
	p_rcv_msg = P_NIL;

	if ((p_buffer = S_msg_p_buffer) == P_NIL) {
		S_msg_data_size		 = 0;
		S_msg_data_offset	+= Vs_min_dl_hole_size + V120_HEADER_SIZE;
	}
	else {
		Buffer_data_size	 = 0;
		Buffer_data_offset	+= Vs_min_dl_hole_size + V120_HEADER_SIZE;
	}
	vs_info_header_format (p_snd_msg, p_buffer, send_first_byte,
						   send_second_byte);

	S_msg_sapi	= OFF;						/* these are NOT user data */

	/* queue then send data to network */

	Fifo_put_msg (&Vs_conn_to_net_fifo_first, &Vs_conn_to_net_fifo_last,
				  p_snd_msg);
	++Vs_conn_to_net_in_fifo;

	p_snd_msg	= P_NIL;

	vs_network_queued_frames_transmit ();			/* transmit data to network */

}

/*----------
	BREAK
-----------*/

void vs_oper_break ()
{

		/* Begin break */

	Vs_term_break_rq = ON;
	vs_dl_send_jn_state ();		/* break ON */

		/* End break */

	Vs_term_break_rq = OFF;
	vs_dl_send_jn_state ();		/* break OFF */
}

/*------------
	PROFILE
-------------*/

uchar vs_oper_profile (a_new_prof_id, a_new_servprof_id)
	char FAR *	a_new_prof_id;										/* new parameter profile id */
	char FAR *	a_new_servprof_id;									/* new service profile id */
{
	char FAR *	p_servprof_id;
	uchar		profile_acceded		= FALSE;						/* parameter profile context hes been acceded */

	if ((a_new_prof_id != P_NIL) && (*a_new_prof_id)) {				/* access to the new requested profile context */
		if (vs_profile_access (a_new_prof_id) == NOK) {
			vs_error_process (VS_ERR_PROFILE_UNKNOWN);
			return (NOK);
		}
		Strcpy_far ((char FAR *)Vs_a_cur_prof_id,
					(char FAR *)a_new_prof_id,
					VS_PROFILE_ID_MAX_LGTH + 1);					/* save profile id */
		profile_acceded		= TRUE;
	}

	if ((a_new_servprof_id != P_NIL) && (*a_new_servprof_id)) {
		p_servprof_id		= a_new_servprof_id;
	} else {

		if (profile_acceded == TRUE) {								/* if parameter profile context has been acceded */
			p_servprof_id = Vs_a_profile_servprof_id;				/* use default service profile */
		} else {
			return (OK);											/* neither parameter nor service profile has been acceded ! nothing to do */
		}

	}

	if (vs_servprof_access (p_servprof_id) == NOK) {	/* access to the new service profile context */
		vs_error_process (VS_ERR_SERVPROF_UNKNOWN);
		return (NOK);
	}

	Vs_parm_invalid_ref_detected = FALSE;							/* reset invalid reference detected flag */

	Vs_set_new_profile (Vs_a_profile_parm, FALSE);					/* set a new profile */
	Vs_exe_set ();													/* modify current parameters */

	if (Vs_term_channel_reassign == ON) {							/* reassign channel to another dl sap */

		if (!Vs_conn_state_check (VS_CONN_STATE_CONNECTED)) {

			if (Vs_dl_sapi_attach_state_read (Vs_network_nai, Vs_term_first_chan_id)
				== VS_DL_SAP_ATTACHED) {							/* Dl sap is still attached to channel */

				switch (appli_sm_dl_sapi_detach_rq (Vs_network_nai,
						Vs_term_first_chan_id, &Vs_term_ph_ch_list)) {

				case CONTINUE	:
					vs_cur_servprof_update ();

					break;

				case STOP		:
					vs_cur_servprof_update ();

					return (NOK);									/* Quit VS unit and wait for dl sapi attached confirmation */

				case NOK		:
					vs_cur_servprof_update ();
					vs_error_process (VS_ERR_DL_SAPI_ATTACH_FAILED);

					return (NOK);
				}

			} else {
				vs_cur_servprof_update ();
			}

		}

	}

	return (OK);
}


/* END OF FILE */
