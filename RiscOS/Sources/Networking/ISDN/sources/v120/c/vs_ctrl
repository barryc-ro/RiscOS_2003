/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_ctrl.c (VS control)
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	vs_ctrl_network		- network incoming events control routine
 *	vs_ctrl_terminal	- terminal incoming events control routine
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "dl_int.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: 	vs_ctrl_network

Usage		: 	uchar vs_ctrl_network (void)

Description : 	controls network incoming events.

Return value : 	OK
				NOK
				STOP : stop communication (clear call etc)

*--------------------------------------------------------------------------*/

uchar vs_ctrl_network ()
{
	uchar		 		 go_on;
	uchar		 		 connection_established;		/* ON if connection has just been established */
	uchar		 		 reestablished;					/* ON if data link has just been reestablished */
	uchar				 forward_data;					/* ON if data to forward to upper layer */
	uchar				 ret_code;
	struct buffer FAR	*p_buffer;
	uchar FAR			*p_data;

	ret_code				= OK;
	go_on 					= FALSE;
	connection_established	= OFF;
	reestablished			= OFF;
	forward_data			= OFF;
	p_data					= R_a_data;

		/* Events under temporal constraint
		-----------------------------------*/

	switch (Vs_conn_state_read ()) {

	/*-----------------------------------------------------------------------
	 *	VS_CONN_STATE_CONNECTED : connected, part 1
	 *----------------------------------------------------------------------*/
	case VS_CONN_STATE_CONNECTED				:					/* connection is established */

		switch (Vs_event_id) {

		case VS_EV_NETWORK_DA_IN				:					/* network data indication */
			Vs_evnt_data ();										/* data indicaton event processing */
			break;

		case VS_EV_NETWORK_CLEAR_BUSY_IN		:					/* network clear busy indication */
			Vs_conn_to_net_line_busy = OFF;

			vs_network_queued_frames_transmit ();					/* transmit queued data to network */

			break;

		case VS_EV_NETWORK_BUSY_IN				:					/* network busy indication */
			Vs_conn_to_net_line_busy	= ON;
			break;

		case VS_EV_NETWORK_INT_SYNC_CO:		/* network interface synchro confirmation */
			Vs_conn_to_net_cpu_busy	= OFF;
			Vs_conn_to_net_nb_sent	= 0;

			vs_network_queued_frames_transmit ();

			break;

		default:
			go_on = TRUE;
			break;
		}

		break;

	default:
		go_on = TRUE;

	}

	if (go_on == TRUE) {

			/* Events not under temporal constraint
			---------------------------------------*/

		switch (Vs_conn_state_read ()) {

		/*-------------------------------------------------------------------
		 *	VS_CONN_STATE_DISCONNECTED : disconnected
		 *------------------------------------------------------------------*/
		case VS_CONN_STATE_DISCONNECTED:	/* no established connection */

			switch (Vs_event_id) {

			case VS_EV_NETWORK_EST_IN:	/* DL_EST_IN received */

#				if VS_V42B_NEGOTIATION == ON
					if (Vs_term_v42b_resp_timer_val != 0) {
						/*
						 *	Negotiation requested :
						 *	wait for negotiation indication from DL,
						 *	with watchdog.
						 */
						Vs_timer_term_start (VS_TI_RESP_NEGOTIATION_IX);
						Vs_conn_state_set (VS_CONN_STATE_NEGO_IN_PROGRESS);
					}
					else {
						connection_established	= ON;
					}
#				else
					connection_established	= ON;
#				endif
				break;

			case VS_EV_NETWORK_REL_CO:							/* network clear confirmation */
				if (Vs_term_call_direction == VS_CALL_INCOMING) {
					Vs_term_call_direction = VS_CALL_NONE;
				}
				else {
					Vs_error = VS_ERR_INAPPROPRIATE_EVENT;			/* inappropriate incoming event in data transfer state */
				}
				vs_snd_network (DL_CLEAR_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
				break;

			case VS_EV_TI_CONN_ESTABLISHMENT:	/* connection establishment timer expiration */
				break;							/* ignore */

			default:
				Vs_error = VS_ERR_INAPPROPRIATE_EVENT;				/* inappropriate incoming event in data transfer state */
			}
			break;

		/*-------------------------------------------------------------------
		 *	VS_CONN_STATE_CONN_IN_PROGRESS : connection in progress
		 *------------------------------------------------------------------*/
		case VS_CONN_STATE_CONN_IN_PROGRESS:	/* connection is being established */

			switch (Vs_event_id) {

			case VS_EV_NETWORK_EST_CO:	/* DL_EST_CO received */

#				if VS_V42B_NEGOTIATION == ON
					if (Vs_term_v42b_resp_timer_val != 0) {

						vs_snd_network (V120_SETPARM_RQ,
										prepare_sending_message (
											V120_setparm_size, P_NIL));
						Vs_conn_state_set (VS_CONN_STATE_NEGO_IN_PROGRESS);
					}
					else {
						connection_established	= ON;
					}
#				else
					connection_established	= ON;
#				endif
				break;

			case VS_EV_NETWORK_EST_IN:	/* network incoming call indication */
				break;

			case VS_EV_NETWORK_REL_IN:			/* network clear indication */
			case VS_EV_TI_CONN_ESTABLISHMENT:	/* connection establishment timer expiration */
				vs_disconnection ();								/* disconnection */
				Vs_term_state_set (VS_TERM_STATE_WAIT_FOR_COMMAND);	/* terminal wait for command state */
				vs_snd_network (DL_CLEAR_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
				ret_code	= STOP;
				break;

			case VS_EV_NETWORK_REL_CO:	/* network clear confirmation */
				vs_disconnection ();								/* disconnect VS */
				vs_snd_network (DL_CLEAR_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
				break;

			default:
				Vs_error = VS_ERR_INAPPROPRIATE_EVENT;				/* inappropriate incoming event */
				break;
			}

			break;

#if VS_V42B_NEGOTIATION	== ON
		/*-------------------------------------------------------------------
		 *	VS_CONN_STATE_NEGO_IN_PROGRESS : negotiation in progress
		 *------------------------------------------------------------------*/
		case VS_CONN_STATE_NEGO_IN_PROGRESS:

			/*---------------------------------*/
			/* V.42bis negotiation in progress */
			/*---------------------------------*/
			switch (Vs_event_id) {

			case VS_EV_NETWORK_SETPARM_CO:
				/*
				 *	Save agreed parameters
				 */
				if (V120_setparm_ret_code != OK) {

					/* Negotiation has failed */

					Vs_term_v42b_resp_timer_val	= 0;	/* unsuccessful */
					Vs_term_v42b_p0				= V120_DIRECTION_NEITHER;
					Vs_term_v42b_p1				= 0;
					Vs_term_v42b_p2				= 0;
				}
				else {

					/* Update V.42bis parameters */

					Vs_term_v42b_p0	= V120_setparm_p0;
					Vs_term_v42b_p1	= V120_setparm_p1;
					Vs_term_v42b_p2	= V120_setparm_p2;
				}
				connection_established	= ON;
				break;

			case VS_EV_NETWORK_SETPARM_IN:

				Vs_timer_term_stop (VS_TI_RESP_NEGOTIATION_IX);

				/*
				 *	Negotiate, save results of negotiation,
				 *	signal connection is established.
				 */
				switch (Vs_term_v42b_p0) {

				default:
				case V120_DIRECTION_NEITHER:	/* neither direction (default) */
					break;

				case V120_DIRECTION_BOTH:		/* both direction */
					Vs_term_v42b_p0 = V120_setparm_p0;
					break;

				case V120_DIRECTION_INIT_RESP: 	/* initiator-responder direction */

					switch (V120_setparm_p0) {
					default:
					case V120_DIRECTION_NEITHER:	/* neither direction (default) */
					case V120_DIRECTION_RESP_INIT:	/* reponder-initiator direction */
						Vs_term_v42b_p0 = V120_DIRECTION_NEITHER;
						break;
					case V120_DIRECTION_BOTH:		/* both direction */
					case V120_DIRECTION_INIT_RESP: 	/* initiator-responder direction */
						break;
					}
					break;

				case V120_DIRECTION_RESP_INIT:	/* reponder-initiator direction */
					switch (V120_setparm_p0) {
					default:
					case V120_DIRECTION_NEITHER:	/* neither direction (default) */
					case V120_DIRECTION_INIT_RESP: 	/* initiator-responder direction */
						Vs_term_v42b_p0 = V120_DIRECTION_NEITHER;
						break;
					case V120_DIRECTION_RESP_INIT:	/* reponder-initiator direction */
					case V120_DIRECTION_BOTH:		/* both direction */
						break;
					}
				}
				Vs_term_v42b_p1	= Min (V120_setparm_p1, Vs_term_v42b_p1);
				Vs_term_v42b_p2	= Min (V120_setparm_p2, Vs_term_v42b_p2);

				/* Echo primitive to DL */

				vs_snd_network (V120_SETPARM_RS,
								prepare_sending_message (
								V120_setparm_size, P_NIL));

				connection_established	= ON;
				break;

			case VS_EV_TI_RESP_NEGOTIATION:
				/*
				 *	Timer expiration, negotiation was unsuccessful
				 *	(responder side).
				 *	Save results of negotiation,
				 *	signal connection is established.
				 */
				Vs_term_v42b_resp_timer_val	= 0;	/* unsuccessful */
				Vs_term_v42b_p0				= V120_DIRECTION_NEITHER;
				Vs_term_v42b_p1				= 0;
				Vs_term_v42b_p2				= 0;
				connection_established	= ON;
				break;

			case VS_EV_NETWORK_EST_IN:		/* data link reestablishment. Terminate negotiation */
				/*
				 *	data link restablishment, negotiation was unsuccessful
				 *	Save results of negotiation,
				 *	signal connection is established.
				 */
				Vs_timer_term_stop (VS_TI_RESP_NEGOTIATION_IX);
				Vs_term_v42b_resp_timer_val	= 0;	/* unsuccessful */
				Vs_term_v42b_p0				= V120_DIRECTION_NEITHER;
				Vs_term_v42b_p1				= 0;
				Vs_term_v42b_p2				= 0;
				connection_established	= ON;
				break;

			case VS_EV_NETWORK_DA_IN:
				/*----------------------------------------------*/
				/* data received from network while negotiating */
				/*----------------------------------------------*/
				if (Vs_term_call_direction == VS_CALL_OUTGOING) {
					/*
					 *	Originating : data has been supplied in a DL_U_DA_IN
					 *	Save results of negotiation (unsuccessful)
					 *	signal connection is established.
					 *	forward data
					 */
					forward_data			= ON;
				}
				else {
					/*
					 *	Responding, data received :
					 *	Save results of negotiation (unsuccessful)
					 *	signal connection is established.
					 */
					Vs_timer_term_stop (VS_TI_RESP_NEGOTIATION_IX);
				}
				Vs_term_v42b_resp_timer_val	= 0;	/* unsuccessful */
				Vs_term_v42b_p0				= V120_DIRECTION_NEITHER;
				Vs_term_v42b_p1				= 0;
				Vs_term_v42b_p2				= 0;
				connection_established		= ON;
				break;

			case VS_EV_TI_CONN_ESTABLISHMENT:	/* connection establishment timer expiration */
			case VS_EV_NETWORK_REL_IN:			/* network clear indication */
				Vs_timer_term_stop (VS_TI_RESP_NEGOTIATION_IX);
				vs_disconnection ();								/* disconnection */
				Vs_term_state_set (VS_TERM_STATE_WAIT_FOR_COMMAND);	/* terminal wait for command state */
				vs_snd_network (DL_CLEAR_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
				ret_code	= STOP;
				break;

			case VS_EV_NETWORK_REL_CO			:					/* network clear confirmation */
				Vs_timer_term_stop (VS_TI_RESP_NEGOTIATION_IX);
				vs_disconnection ();								/* disconnect VS */
				vs_snd_network (DL_CLEAR_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
				break;

			default:
				Vs_error = VS_ERR_INAPPROPRIATE_EVENT;				/* inappropriate incoming event */
				break;
			}
			break;

#endif	/* VS_V42B_NEGOTIATION == ON */


		/*-------------------------------------------------------------------
		 *	VS_CONN_STATE_CONNECTED : connected, part 2
		 *------------------------------------------------------------------*/
		case VS_CONN_STATE_CONNECTED:								/* connection is established */

			switch (Vs_event_id) {

#if VS_V42B_NEGOTIATION	== ON
			case VS_EV_NETWORK_SETPARM_CO:	/* ignore */
			case VS_EV_TI_RESP_NEGOTIATION:	/* ignore */
				break;

			case VS_EV_NETWORK_SETPARM_IN:
				/*
				 *	Unexpected indication for negotiation
				 *	Acknowledge to the remote.
				 */
				Vs_term_v42b_p0 = V120_DIRECTION_NEITHER;
				Vs_term_v42b_p1	= Min (V120_setparm_p1, Vs_term_v42b_p1);
				Vs_term_v42b_p2	= Min (V120_setparm_p2, Vs_term_v42b_p2);

				/* Echo primitive to DL */

				vs_snd_network (V120_SETPARM_RS,
								prepare_sending_message (
								V120_setparm_size, P_NIL));
				break;

#endif

			case VS_EV_NETWORK_EST_IN:		/* data link reestablishment. May be harmful */
				if (Vs_conn_user_data_sent == OFF) {
					reestablished	= ON;
					break;					/* no data lost : try to continue */
				}

				/* no break */

			case VS_EV_NETWORK_REL_IN:		/* network clear indication */
				vs_disconnection ();		/* disconnection */
				vs_snd_network (DL_CLEAR_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
				ret_code	= STOP;
				break;

			case VS_EV_NETWORK_REL_CO			:					/* network clear confirmation */
				vs_disconnection ();								/* disconnect VS */
				vs_snd_network (DL_CLEAR_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
				break;

			case VS_EV_TI_CONN_ESTABLISHMENT:	/* connection establishment timer expiration */
				break;		/* ignore (should not happen) */

#			if VS_ASSERT == ON
			default:
				Vs_error = VS_ERR_INAPPROPRIATE_EVENT;				/* inappropriate incoming event in data transfer state */
#			endif
			}

			break;

		} /* end switch 'connection state' */

	}


	if (reestablished == ON) {

		/* reinitialize context */

		Vs_conn_mfo_established	= ON;
		Vs_conn_user_data_sent	= OFF;

#		if VS_V42B_NEGOTIATION == ON
			Vs_timer_term_stop (VS_TI_RESP_NEGOTIATION_IX);
#		endif
		connection_established	= ON;
	}

	if (connection_established == ON) {

		Vs_timer_term_stop (VS_TI_CONN_ESTABLISHMENT_IX);	/* stop connection establishment watchdog timer */

		Vs_conn_state_set (VS_CONN_STATE_CONNECTED);		/* connection established */
		Vs_new_conn_state_report (VS_CONN_STATE_CONNECTED);	/* report to interrupt terminal new connection state */

		Vs_conn_set_DR_RR_SR_R ();
		Vs_conn_mfo_established	= ON;
		Vs_conn_user_data_sent	= OFF;

		Vs_term_state_set (VS_TERM_STATE_DATA_TRANSFER);	/* terminal data transfer state */

		vs_flow_ctrl_rq_to_terminal (ON);					/* reset terminal flow control state */

		Vs_term_busy					= OFF;

		Vs_last_sent_terminal_present	= OFF;
		Vs_last_sent_term_busy			= OFF;
		Vs_last_sent_break_rq			= OFF;

		if (Vs_conn_send_initial_cs == ON) {
			vs_dl_send_jn_state ();		/* initial sending of state */
		}

#		if VS_TERMINAL_ENTITY == ENT_VS
			/*
			 *	Echo the VS_INIT_RQ message
			 */
			Vs_echo_init_co_ok (Vs_term_p_init_stop_msg);
			Vs_term_p_init_stop_msg	= P_NIL;
#		endif

	} /* end if 'connection_established == ON' */


	if (forward_data == ON) {
		Vs_evnt_data ();
	}

	if (Vs_error != VS_ERR_NONE) {
		vs_error_process (Vs_error);								/* Possible error processing */
		return (NOK);
	}

	return (ret_code);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

name		: vs_ctrl_terminal

Usage		: uchar vs_ctrl_terminal (void)

Description : terminal state control routine.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_ctrl_terminal ()
{
	struct message FAR *	p_msg;
	uchar	go_on = FALSE;

		/* Events under temporal constraint
		-----------------------------------*/

	switch (Vs_term_state_read ()) {

	case VS_TERM_STATE_DATA_TRANSFER:	/* terminal data transfer state */

		switch (Vs_event_id) {

		case VS_EV_TERMINAL_DA_RQ:		/* data request */
			p_msg		= p_rcv_msg;
			p_rcv_msg	= P_NIL;
			vs_term_data_receive (p_msg);
			break;

		case VS_EV_TERMINAL_CLEAR_BUSY_RQ:	/* flow control request */
			if (Vs_term_busy != OFF) {
				Vs_term_busy	= OFF;
				if (Vs_conn_mfo_established	== ON) {
					vs_snd_network (DL_CLEAR_BUSY_RQ,
									prepare_sending_message (0, P_NIL));
				}
				else {
					vs_dl_send_jn_state ();		/* UI only, RTS ON */
				}
			}

			vs_term_queued_data_transmit ();
			break;

		case VS_EV_TERMINAL_BUSY_RQ:		/* flow control request */
			if (Vs_term_busy != ON) {
				Vs_term_busy	= ON;
				if (Vs_conn_mfo_established	== ON) {
					vs_snd_network (DL_BUSY_RQ,
									prepare_sending_message (0, P_NIL));
				}
				else {
					vs_dl_send_jn_state ();		/* UI only, RTS OFF */
				}
			}

			break;

		case VS_EV_TERMINAL_BREAK_RQ:				/* terminal signal break */
			vs_oper_break ();
			break;

		default:
			go_on = TRUE;
		}
		break;

	default:							/* other states */

		switch (Vs_event_id) {
		case VS_EV_TERMINAL_CLEAR_BUSY_RQ:	/* flow control request */
			if (Vs_term_busy != OFF) {
				Vs_term_busy	= OFF;
				vs_snd_network (DL_CLEAR_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
			}
			break;

		case VS_EV_TERMINAL_BUSY_RQ:		/* flow control request */
			if (Vs_term_busy != ON) {
				Vs_term_busy	= ON;
				vs_snd_network (DL_BUSY_RQ,
								prepare_sending_message (0, P_NIL));
			}
			break;

		default:
			go_on = TRUE;
		}

	}

	if (go_on == TRUE) {
		vs_error_process (VS_ERR_UNDEFINED);
		return (NOK);
	}

	if (Vs_error != VS_ERR_NONE) {
		vs_error_process (Vs_error);		/* Possible error processing */
		return (NOK);
	}

	return (OK);
}

/*EOF*/

