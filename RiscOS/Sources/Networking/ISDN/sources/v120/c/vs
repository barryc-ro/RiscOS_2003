
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s) :
 *
 *		vs ()		- VS entity processing main routine
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if REVISION_STRING == ON
#	include "rev.v120"
#endif

#if VS_TERMINAL_ENTITY == ENT_VS

/*---------------------------------------------------------------------------
						GLOBAL VARIABLES
 ---------------------------------------------------------------------------*/
	Entity_common (vs);										/* Entity common varaibles */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs : VS entity main routine.

Usage		: uchar vs (struct message FAR * p_msg);
						- p_msg		: message (from server) address.

Description : VS entity main routine.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs (p_msg)
struct message FAR * p_msg;
{
	vs_ev_id_t		event_id;		/* event id */

	p_snd_msg	= P_NIL;
	p_rcv_msg	= p_msg;

	if ((Vs_status != OFF) ||
		((R_msg_from == ENT_SM) && (R_msg_code == SM_SET_CONFIG_RQ))) {

			/* VS is active, receive message and generate internal event */

		if ((event_id = vs_rcv ()) != VS_EV_NIL) {

				/* process VS event */

			vs_process (event_id, R_a_data, R_data_size);

		}
	}
	else {
		vs_error_process (VS_ERR_CONFIG_NEVER_BEEN);	/* Unexpected primitive (before configuration) : discard */
		/* continue */
	}

	Free_msg (p_snd_msg);
	Free_msg (p_rcv_msg);

	return (OK);
}

#endif

/* END OF FILE */
