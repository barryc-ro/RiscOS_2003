
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_outp.c
 *
 *		Asynchronous V.120 output interface : routines called to
 *		interface with other entities.
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *	vs_snd_terminal_preamble		- send message to terminal preamble
 *	vs_snd_terminal					- send message to terminal
 *	vs_term_it_send_data_in			- send data to Physical terminal
 *	vs_snd_network					- send message to network
 *	vs_flow_ctrl_rq_to_terminal		- physical terminal flow control request
 *	vs_new_conn_state_report		- report new connection state
 *	vs_terminal_is_present			- compute if terminal is present
 *	vs_term_it_ctx_acc_in 			- access to interrupt terminal context
 *	vs_term_it_mode_set				- set physical terminal (driver) mode.
 *	vs_term_break_signal_transmit	- transmit break from network to terminal
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if VS_TERMINAL_ENTITY == ENT_DTE_INT
#	include "dte_int.h"
#endif

#include "dl_int.h"

/*****************************************************************************

							TO PHYSICAL TERMINAL

*****************************************************************************/


/*----------------------------------------------------------------------------
						PRIMITIVE CODES CONVERSION
----------------------------------------------------------------------------*/

#if VS_TERMINAL_ENTITY == ENT_VS
#	define	Vs_term_code(vs_code,dte_code)	(vs_code)
#endif

#if VS_TERMINAL_ENTITY == ENT_DTE_INT
#	define	Vs_term_code(vs_code,dte_code)	(dte_code)
#endif

	/* Primitive code is converted from internal code to interface code
		using the following list before sending */

code_t CONST_ARRAY t_vs_conv_term_snd_code [] = {

/* 0 VS_TERMINAL_DA_IN		*/	Vs_term_code (VS_DA_IN,		DTE_INT_DA_IN),
/* 1 VS_TERMINAL_SIGNAL_IN	*/	Vs_term_code (VS_SIGNAL_IN,	DTE_INT_SIGNAL_IN),
/* 2 VS_TERMINAL_BUSY_IN */		Vs_term_code (VS_BUSY_IN,	DTE_INT_BUSY_IN),
/* 3 VS_TERMINAL_CLEAR_BUSY_IN*/Vs_term_code (VS_CLEAR_BUSY_IN,	DTE_INT_CLEAR_BUSY_IN),

};

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_snd_terminal_preamble

Usage		: void vs_snd_terminal_preamble (code_t code)

In			:
	code	: primitive code

Description : send message to terminal preamble.

Return value : none

*--------------------------------------------------------------------------*/

void vs_snd_terminal_preamble (code, priority)
code_t			code;											/* primitive code */
priority_t		priority;										/* message priority */
{
	S_msg_from		= VS_TERMINAL_ENTITY;							/* from terminal entity */
	S_msg_to		= VS_TERMINAL_IT_ENTITY;						/* to interrupt terminal entity */

	S_msg_nai		= Vs_term_id;									/* terminal identifier */
	S_msg_code		= Vs_conv_term_snd_code (code);					/* primitive code */
	S_msg_priority	= priority;										/* message priority */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_snd_terminal

Usage		: uchar vs_snd_terminal (code_t code, uchar priority);

In			:
	code	: primitive code
	priority: priority

Description : send message to terminal.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_snd_terminal (code, priority)
code_t			code;											/* primitive code */
priority_t		priority;										/* send message priority */
{

#	if VS_ASSERT == ON
		if (S_msg_p_buffer != P_NIL) {
			struct buffer FAR * p_buffer;

			p_buffer = S_msg_p_buffer;
			if (Buffer_data_size > Vs_buffer_data_lgth) {
				vs_error_process (VS_ERR_UNDEFINED);
				return (NOK);
			}
		}
#	endif

	switch (code) {

	case VS_TERMINAL_DA_IN			:

			/* Flow control
			---------------*/

		switch (priority) {

		case VS_MSG_PRIORITY_LOW		:
		case VS_MSG_PRIORITY_HIGH		:

			if ((Vs_term_busy == ON)	||
				(!Vs_term_stop_requested			&&
				 (Vs_term_state_read () == VS_TERM_STATE_COMMAND_IN_PROGRESS))) {
																	/* transmitting data to terminal is disabled or command in progress state */
				vs_term_data_queue (p_snd_msg, priority);			/* data will be queued in 'FIFO' */
				p_snd_msg	= P_NIL;
				return (OK);										/* quit from VS unit */
			}

			break;

		}

			/* Consistency checking
			-----------------------*/

#		if VS_ASSERT == ON
			if (p_snd_msg == P_NIL) {
				vs_error_process (VS_ERR_UNDEFINED);
				return (NOK);
			}
#		endif


		if (S_data_size != 0) {										/* if there were data */

#			if VS_ASSERT == ON
				if (S_msg_p_buffer != P_NIL) {
					struct buffer FAR * p_buffer;

					p_buffer = S_msg_p_buffer;
					if (Buffer_data_size > Vs_buffer_data_lgth) {
						vs_error_process (VS_ERR_UNDEFINED);
						return (NOK);
					}
				}
#			endif

			vs_snd_terminal_preamble (code, priority);				/* send message to terminal preamble */

				/* Send data to interrupt terminal
				----------------------------------*/

			Vs_term_it_send_data_in (p_snd_msg);					/* send data to terminal */

		} else {
			Free_msg (p_snd_msg);
			p_snd_msg = P_NIL;
		}

		break;

	case VS_TERMINAL_SIGNAL_IN		:
		vs_snd_terminal_preamble (code, priority);					/* send message to terminal preamble */

#		if VS_TERMINAL_ENTITY == ENT_VS
			Vs_term_it_send_data_in (p_snd_msg);					/* send data to terminal */
#		endif

		break;


#if VS_TERMINAL_ENTITY == ENT_VS
	case VS_TERMINAL_CLEAR_BUSY_IN	:
	case VS_TERMINAL_BUSY_IN		:
		vs_snd_terminal_preamble (code, priority);
		Vs_term_it_send_data_in (p_snd_msg);
		break;
#endif

	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_term_it_send_data_in

Usage		: void vs_term_it_send_data_in (struct message FAR * p_msg);

Description : send message to terminal.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

#if VS_TERMINAL_ENTITY == ENT_DTE_INT

void vs_term_it_send_data_in (p_msg)
struct message FAR * p_msg;
{
	dte_dcc_v120_data_in (p_msg);
}

#endif


/*****************************************************************************

								TO NETWORK

*****************************************************************************/


/*----------------------------------------------------------------------------
						PRIMITIVE CODES CONVERSION
----------------------------------------------------------------------------*/

#define	Vs_netw_snd(code)			(code)


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			: vs_snd_network

Usage			: void vs_snd_network (code_t code, uchar FAR *p_data);
						code	: primitive code
						p_data	: address of arguments.
						(global) p_snd_msg : address of message cell
Description 	: send message routine.

Return value 	: none

*--------------------------------------------------------------------------*/

void vs_snd_network (code, p_data)
code_t			 code;
uchar FAR		*p_data;
{
#	if VS_ASSERT == ON
		if (p_snd_msg == P_NIL) {
			vs_error_process (VS_ERR_UNDEFINED);
			return;
		}

		if (S_msg_p_buffer != P_NIL) {
			struct buffer FAR * p_buffer;

			p_buffer = S_msg_p_buffer;
			if ((code == DL_DA_RQ) || (code == DL_U_DA_RQ)) {
				if (Buffer_data_offset <
					BUFFER_HEADER_SIZE + Vs_min_dl_hole_size) {
					vs_error_process (VS_ERR_UNDEFINED);
					return;
				}
			}

			if (Buffer_data_size > Vs_buffer_data_lgth) {
				vs_error_process (VS_ERR_UNDEFINED);
				return;
			}
		}
#	endif

	S_msg_from		= VS_TERMINAL_ENTITY;							/* from terminal entity */
	S_msg_to		= ENT_DL_V120;									/* to network entity */

	S_msg_nai		= Vs_network_nai;								/* network access identifier */
	S_msg_sapi		= Vs_sapi;										/* network service access point identifier */
	S_msg_conn_id	= Vs_dl_ces;									/* connection identifier */
	S_msg_code		= code;											/* primitive code */

	switch (code) {
	default:
		break;

#	if VS_V42B_NEGOTIATION == ON
	case V120_SETPARM_RQ:
	case V120_SETPARM_RS:
		V120_setparm_ret_code	= (code == V120_SETPARM_RS) ? OK : 0;
		V120_setparm_cause		= 0;
		V120_setparm_diagnostic	= 0;
		V120_setparm_p0			= Vs_term_v42b_p0;
		V120_setparm_p1			= Vs_term_v42b_p1;
		V120_setparm_p2			= Vs_term_v42b_p2;
		break;
#	endif

	}

	Send_message (p_snd_msg);
	p_snd_msg		= P_NIL;

}


/*****************************************************************************

						INTERRUPT TERMINAL DRIVER

*****************************************************************************/

/*----------------------------------------------------------------------------
						TERMINAL IT MODE CONVERSION
----------------------------------------------------------------------------*/

#if VS_TERMINAL_ENTITY == ENT_VS
#	define	Vs_term_mode(vs_mode, pdte_mode)	(vs_mode)
#endif

#if VS_TERMINAL_ENTITY == ENT_DTE_INT
#	define	Vs_term_mode(vs_mode, pdte_mode)	(pdte_mode)
#endif

uchar CONST_ARRAY t_vs_conv_term_it_mode [] = {

/*  0 VS_TERM_IT_MODE_UNDEFINED	*/	Vs_term_mode ('-',	0),
/*  1 VS_TERM_IT_MODE_COMMAND	*/	Vs_term_mode ('C',	0),
/*  2 VS_TERM_IT_MODE_DATA		*/	Vs_term_mode ('D',	DTE_ASYN_V120),

};

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_flow_ctrl_rq_to_terminal

Usage		: void vs_flow_ctrl_rq_to_terminal (uchar xon)

In			:
	xon		:	ON  for clear busy
				OFF for busy

Description : request flow control to terminal.

Return value : none

*--------------------------------------------------------------------------*/

void vs_flow_ctrl_rq_to_terminal (xon)
uchar 			xon;
{
#if VS_TERMINAL_ENTITY == ENT_DTE_INT

	dte_dcc_pad_busy_in (xon);

#endif

#if VS_TERMINAL_ENTITY == ENT_VS

	prepare_sending_message (0, P_NIL);
	vs_snd_terminal ((xon == ON) ? VS_TERMINAL_CLEAR_BUSY_IN : VS_TERMINAL_BUSY_IN,
					 VS_MSG_PRIORITY_HIGH);

#endif


}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_new_conn_state_report

Usage		: void vs_new_conn_state_report (conn_state)

Description : report new changed connection state.

Return value : none

*--------------------------------------------------------------------------*/

void vs_new_conn_state_report (conn_state)
uchar			conn_state;
{
	if ((conn_state		== VS_CONN_STATE_DISCONNECTED)	&&
		(Vs_conn_state	== VS_CONN_STATE_CONNECTED)) {

#		if VS_TERMINAL_ENTITY == ENT_DTE_INT
			Dte_v120_link_new_state_in (OFF);
#		endif
	}
	else {

		if ((conn_state		== VS_CONN_STATE_CONNECTED) &&
			(Vs_conn_state	!= VS_CONN_STATE_CONNECTED)) {

#			if VS_TERMINAL_ENTITY == ENT_DTE_INT

#				if VS_V42B_NEGOTIATION == ON
					Dte_v120_report_v42b_negotiation (
						(Vs_term_v42b_resp_timer_val != 0) ? OK : NOK,
						 Vs_term_v42b_p0,
						 Vs_term_v42b_p1,
						 Vs_term_v42b_p2);
#				endif

				Dte_v120_link_new_state_in (ON);

#			endif
		}

	}
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_terminal_is_present

Usage		: uchar vs_terminal_is_present (vs_term_id_t term_id)

Description : compute is terminal is present

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_terminal_is_present (term_id)
vs_term_id_t		term_id;
{
	return (TRUE);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_term_it_ctx_acc_in

Usage		: uchar vs_term_it_ctx_acc_in (vs_term_id_t term_id)

Description : access to interrupt terminal context

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_term_it_ctx_acc_in (term_id)
vs_term_id_t		term_id;
{
#	if VS_TERMINAL_ENTITY == ENT_DTE_INT
		return (Get_pdte_ctxt (term_id));
#	else
		return (OK);
#	endif
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_term_it_mode_set

Usage		: void vs_term_it_mode_set (uchar mode)

Description : set interrupt terminal mode

Return value : none

*--------------------------------------------------------------------------*/

void vs_term_it_mode_set (mode)
uchar			mode;
{
	Vs_term_it_mode = mode;

#	if VS_TERMINAL_ENTITY == ENT_DTE_INT
		Dte_change_mode (Vs_conv_term_it_mode (mode), ON);
#	endif
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_term_break_signal_transmit

Usage		: void vs_term_break_signal_transmit (void)

Description : transmit break signal to terminal.
				(This routine is only used under ENT_DTE_INT)

Return value : none

*--------------------------------------------------------------------------*/

void vs_term_break_signal_transmit ()
{
#	if VS_TERMINAL_ENTITY == ENT_VS
		prepare_sending_message (0, P_NIL);
		vs_snd_terminal (VS_TERMINAL_SIGNAL_IN, VS_MSG_PRIORITY_LOW);
#	endif

#	if VS_TERMINAL_ENTITY == ENT_DTE_INT
			dte_dcc_pad_break_in ();
#	endif

}

/* END OF FILE */
