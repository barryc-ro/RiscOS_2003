
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_proc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	vs_acc_info_path_disc			- access information path disconnection
 *	vs_conn_state_check				- check connection state
 *	vs_cur_servprof_update			- update current service profile references
 *	vs_cur_servprof_update_needed	- check if current service profile needed to be uvsted
 *	vs_format_data_to_terminal		- format data from network to terminal
 *	vs_network_queued_frames_transmit- transmit queued frames to network
 *	vs_new_connection_init			- initialize a new connection context
 *	vs_queued_data_purge			- purge queued data
 *	vs_set_new_profile				- load a profile parameter
 *	vs_term_data_queue				- queue data to terminal
 *	vs_term_queued_data_transmit	- transmit queued data to DTE
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "dl_int.h"

/*---------------------------------------------------------------------------
					VS GLOBAL VARIABLES DECLARATIONS
---------------------------------------------------------------------------*/
struct vs		s_vs;			/* vs main structure */

/*---------------------------------------------------------------------------
						CONSTANTS
 --------------------------------------------------------------------------*/
struct _vs_constants CONST vs_constants =
{
	DL_MX_FRAME_HEADER,			/* defined in dl_int.h - minimum safe hole for data primitives to DL */
};


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_acc_info_path_disc

Usage		: uchar vs_acc_info_path_disc (void)

Description : release the line.

Return value : NOK

*--------------------------------------------------------------------------*/

uchar vs_acc_info_path_disc ()
{

	Vs_term_stop_requested = OFF;									/* reset stop VS unit requested flag */
	Vs_term_channel_reassign = OFF;									/* reset reassign channel flag */

		/* Purge all queued data
		------------------------*/

	vs_queued_data_purge (	VS_TERMINAL_DATA	|					/* purge 'to terminal' data */
							VS_TERMINAL_SERVICE	|					/* purge 'to terminal' service */
							VS_NETWORK_DATA);						/* purge 'to network' data */

		/* Vs identification message
		-----------------------------*/

	Vs_terminal_nsc_unlink ();										/* unlink terminal context to network-service-connection context */
	Vs_term_status	= OFF;											/* stop VS unit */

		/* VS is now disconnected from the terminal
		--------------------------------------------*/

	return (NOK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_conn_state_check ()

Usage		: uchar vs_conn_state_check (uchar);

Description : check connection state

Return value : TRUE or FALSE

*--------------------------------------------------------------------------*/

uchar vs_conn_state_check (check_conn_state)
uchar	check_conn_state;
{
	uchar	conn_state;

	if (Vs_term_p_conn != P_NIL) {
		conn_state = Vs_conn_state_read ();
	} else {
		conn_state = VS_CONN_STATE_DISCONNECTED;
	}

	return ((check_conn_state & conn_state) ? TRUE : FALSE);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name :
	vs_cur_servprof_update ()			- update current service profile
	vs_cur_servprof_update_needed ()	- check if current service profile
											need to be updated
Usage :
	void vs_cur_servprof_update (void);
	uchar vs_cur_servprof_update_needed (void);

Return value :
	none

*--------------------------------------------------------------------------*/

void vs_cur_servprof_update ()
{
	Strcpy_far (Vs_a_cur_servprof_id, Vs_a_servprof_id,
				VS_PROFILE_ID_MAX_LGTH + 1);

	Vs_cur_servprof_sapi	= Vs_servprof_sapi;
	Vs_cur_servprof_ces		= Vs_servprof_ces;
	Vs_cur_servprof_lli		= (	(Vs_servprof_lli == 0) ||
								(Vs_servprof_lli < VS_DEFAULT_LLI)) ?
								VS_DEFAULT_LLI : Vs_servprof_lli;
}

uchar vs_cur_servprof_update_needed ()
{
	return (Strcmp_far (Vs_a_servprof_id, Vs_a_cur_servprof_id) ? TRUE : FALSE);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_network_queued_frames_transmit : transmit queued data to
												  network

Usage		: void vs_network_queued_frames_transmit (void)

Description : send queued frames to network, if possible

Return value : none

*--------------------------------------------------------------------------*/

void vs_network_queued_frames_transmit ()
{
	uchar			send_data;			/* ON if we must send data to network */
	uchar			send_sync;			/* ON if we must send a SYNC_RQ */


	send_data	= ON;
	send_sync	= OFF;

	if ((Vs_conn_to_net_line_busy == ON) ||
		(Vs_conn_to_net_cpu_busy == ON)) {	/* if network blocks */

		send_data	= OFF;
		if (Vs_system_congestion_busy) {	/* local system is congested */
			/*
			 *	We are about to explode (or implode ?)
			 *	Discard data, free system ressources
			 */
			vs_queued_data_purge (VS_NETWORK_DATA);						/* purge 'to network' data */

			Vs_assert (0, VS_TRAP_ASSERT_09, "V.120: busy+congestion");
		}
	}
	send_sync	= OFF;

	while (send_data == ON) {

		Fifo_get_msg (&Vs_conn_to_net_fifo_first, &Vs_conn_to_net_fifo_last,
					  p_snd_msg);
		if (p_snd_msg == P_NIL) {
			break;					/* exit 'while' */
		}
		--Vs_conn_to_net_in_fifo;

		if (S_data_size != 0) {								/* if there were data */

			if (S_msg_sapi == ON) {		/* user data */
				Vs_conn_user_data_sent	= ON;
			}

			/* send data to network */

			vs_snd_network ((Vs_conn_mfo_established == ON) ? DL_DA_RQ : DL_U_DA_RQ, P_NIL);

			++Vs_conn_to_net_nb_sent;

			if ((Vs_conn_to_net_sync_window != 0) &&
				(Vs_conn_to_net_nb_sent >= Vs_conn_to_net_sync_window)) {

				/* Send synchronization primitive, wait for acknowledgement */

				send_sync	= ON;
				Vs_conn_to_net_cpu_busy	= ON;
				break;					/* exit 'while' */
			}
		}
		else {
			Free_msg (p_snd_msg);
		}
		p_snd_msg	= P_NIL;
	} /* end while */

	if (send_sync == ON) {
		vs_snd_network (DL_INT_SYNC_RQ,
						prepare_sending_message (0, P_NIL));
	}

	/*
	 *	We pass here each time an action has been performed on the queue.
	 *	Evaluate new state of the queue.
	 */
	if ((Vs_conn_to_net_queue_busy == OFF) &&
		(Vs_conn_to_net_in_fifo > Vs_conn_to_net_fifo_high)) {
		/*
		 *	We just passed over the high threshold (which may be zero)
		 */
		Vs_conn_to_net_queue_busy	= ON;
		vs_flow_ctrl_rq_to_terminal (OFF);
	}
	else if ((Vs_conn_to_net_queue_busy == ON) &&
			 (Vs_conn_to_net_in_fifo <= Vs_conn_to_net_fifo_low)) {
		/*
		 *	We reached the low threshold (which may be zero)
		 */
		Vs_conn_to_net_queue_busy	= OFF;
		vs_flow_ctrl_rq_to_terminal (ON);
	}

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_new_connection_init

Usage		: void vs_new_connection_init (void);

Description : initialize a new connection.

Return value : NONE

*--------------------------------------------------------------------------*/

void vs_new_connection_init ()
{
	Vs_conn_to_net_nb_sent		= 0;
	Vs_conn_to_net_cpu_busy		= OFF;
	Vs_conn_to_net_line_busy	= OFF;
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_queued_data_purge

Usage		: void vs_queued_data_purge (uchar purge);

In			:
	purge	: type of data to be purged between following types
		VS_TERMINAL_DATA			purge 'to terminal' data
		VS_TERMINAL_SERVICE			purge 'to terminal' service
		VS_NETWORK_DATA				purge 'to network' data
			and all combinaisons using OR operator can be used.

Description : purge queue data.

Return value : none

*--------------------------------------------------------------------------*/

void vs_queued_data_purge (purge)
	uchar					purge;									/* purge queued data type */
{
	struct message FAR *	p_msg;									/* current message pointer */
	struct message FAR *	p_next;									/* next message pointer */
	uchar					cur_pos;

	cur_pos	= 0;
	while (TRUE) {
		++cur_pos;

		switch (cur_pos) {

		case 1 :

			if (purge & VS_TERMINAL_DATA) {						/* purge 'to terminal' data */
				p_msg = Vs_term_a_queued_msg_high_prt;				/* load 'to terminal' first queued message address */
				Vs_term_a_queued_msg_high_prt = P_NIL;
				break;
			}

			continue;

		case 2:
			if (purge & VS_TERMINAL_SERVICE) {						/* purge 'to terminal' service */
				p_msg = Vs_term_a_queued_msg_low_prt;				/* load 'to terminal' first queued message address */
				Vs_term_a_queued_msg_low_prt = P_NIL;
				break;
			}

			continue;

		case 3:
			if (purge & VS_NETWORK_DATA) {							/* purge 'to network' data */
				for (;;) {
					Fifo_get_msg (&Vs_conn_to_net_fifo_first,
								  &Vs_conn_to_net_fifo_last, p_msg);
					if (p_msg == P_NIL) {
						break;
					}
					--Vs_conn_to_net_in_fifo;
					Free_msg (p_msg);
				} /* end for */

				Vs_assert (Vs_conn_to_net_in_fifo == 0,
						   VS_TRAP_NET_QUEUE, "vs_queued_data_purge");

				Vs_conn_to_net_cpu_busy		= OFF;

				if (Vs_conn_to_net_queue_busy == ON) {
					/*
					 *	We reached the low threshold (which may be zero)
					 */
					Vs_conn_to_net_queue_busy	= OFF;
					vs_flow_ctrl_rq_to_terminal (ON);
				}

				p_msg 	= P_NIL;

				break;
			}

			continue;

		default :
			return;
		}

		while (p_msg != P_NIL) {									/* while there are messages in queue */
			p_next	= Next (p_msg);									/* save next message address */
			Free_msg (p_msg);										/* free current message */
			p_msg = p_next;											/* restore next message as current */
		}

	}

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_set_new_profile

Usage		: uchar vs_set_new_profile (
						vs_parm_val_t FAR * a_prof_parm
						uchar					remote);

In			:
		a_prof_parm : address of profile parameter source.
		remote		: set remote profile.

Description : load a parameter profile.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_set_new_profile (a_prof_parm, remote)

	vs_parm_val_t FAR * a_prof_parm;								/* address of profile parameter source */
	uchar				remote;										/* set remote profile */
{
	struct vs_parm_description CONST FAR *	a_parm_desc_sav;/* parameter description list saved address */
	uchar						ref;			/* parameter reference */
	uchar						val;			/* parameter value */

	a_parm_desc_sav = Vs_a_parm_description;

	switch (Vs_profile_type) {										/* current profile context profile type */

	case VS_PROFT_V120					:							/* standard VS profile type */
		Vs_a_parm_description	= Vs_t_parm_description;			/* VS parameter description list address */

		break;
	}

	for (ref = 1; ref <= VS_NB_PARM; ref++) {
		val = a_prof_parm [ref-1];

		if (vs_parm_val_valid (ref, val)) {					/* Test parameter value validity */
			Vs_parm_ref_select (ref) =
				(Vs_parm_read_only (ref) == VS_PARM_READONLY) ?
					FALSE : TRUE;									/* selected parameters excepted not managed by the VS read only parameters */
			Vs_parm_val_valid	(ref)	= TRUE;						/* indicate that the value is valid */
			Vs_parm_new_parm	(ref)	= val;						/* save parameter value */
		}
		else {
			Vs_a_parm_description = a_parm_desc_sav;				/* error detected, set profile operation aborted, restore last
																		parameter description list address */
			vs_error_process (VS_ERR_PROFILE_INVALID);

			return (NOK);
		}															/* save parameter value */

	}

	if (!remote) {
		Vs_cur_prof_type				= Vs_profile_type;			/* update current terminal profile type */
		if ((Vs_status == OFF) || (Vs_term_status == OFF)) {
			vs_cur_servprof_update ();
			return (OK);
		}

		if (vs_cur_servprof_update_needed ()) {

			if (!Vs_conn_state_check (VS_CONN_STATE_CONNECTED)) {

				if (Vs_dl_sapi_attach_state_read (
					Vs_network_nai, Vs_term_first_chan_id) == VS_DL_SAP_DETACHED) {
					vs_cur_servprof_update ();
				}
				else {
					Vs_term_channel_reassign = ON;			/* set reassign channel to another dl sap flag */
				}

			}

		}

	}

	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name :			vs_term_data_queue () : queue data to terminal

Usage :			void vs_term_data_queue (struct message FAR *p_msg,
										 priority			 priority);
							- p_msg		: address of message
							- priority  : queue to select

Description :	implements the queuing of data to terminal

Return value :	none

*--------------------------------------------------------------------------*/

void vs_term_data_queue (p_msg, priority)
struct message FAR *	p_msg;									/* message to queue */
priority_t				priority;								/* message priority */
{
	struct message FAR * FAR *	p_a_queued_msg;						/* pointer to queued message address */
	struct message FAR *		p_message;							/* pointer to message */

	switch (priority) {

	default:
	case VS_MSG_PRIORITY_HIGH	:
		p_a_queued_msg =
			(struct message FAR * FAR *)(&Vs_term_a_queued_msg_high_prt);
		break;

	case VS_MSG_PRIORITY_LOW	:
		p_a_queued_msg =
			(struct message FAR * FAR *)(&Vs_term_a_queued_msg_low_prt);
		break;
	}

	if (*p_a_queued_msg == P_NIL) {									/* no message in queue */
		*p_a_queued_msg				= p_msg;						/* incoming message will be the first queuing message */
		Next (p_msg)				= P_NIL;
	} else {														/* there are at least one message in queue */

		p_message				= *p_a_queued_msg;

		while (Next (p_message) != P_NIL) {						/* search for the last message in queue */
			p_message = Next (p_message);
		}

		Next (p_message)		= p_msg;						/* link the incoming message to the ex-last message */
		Next (p_msg)			= P_NIL;
	}

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_term_queued_data_transmit : transmit queued data to DTE

Usage		: void vs_term_queued_data_transmit (void)

Description : transmit to DTE queued data, if possible

Return value : none

*--------------------------------------------------------------------------*/

void vs_term_queued_data_transmit ()
{
	struct message FAR * FAR *	p_a_queued_msg;		/* pointer to queued message address */
	uchar						i;

	if (Vs_term_busy != OFF) {		/* enable transmitting data to terminal */
		return;
	}

	p_a_queued_msg = (struct message FAR * FAR *)(
					&Vs_term_a_queued_msg_high_prt);		/* terminal high_priority_queue */

	for (i = 0; i < 2; ++i) {

		while ((Vs_term_busy == OFF) && 					/* while data may be extracted from queue */
				*p_a_queued_msg != P_NIL) {					/* while there are queued data */

			/*
			 *	Note : Vs_term_busy can change state during one loop
			 *	iteration (in Vs_snd_terminal)
			 */

			p_snd_msg		= *p_a_queued_msg;				/* extract the first message from queue */
			*p_a_queued_msg	= Next ((*p_a_queued_msg));		/* set the queue pointer to the next message address */
			Next (p_snd_msg)= P_NIL;

			if (S_data_size != 0) {							/* if there are data */
				Vs_service_indication = i ? FALSE : TRUE;
				vs_snd_terminal (VS_TERMINAL_DA_IN,
					i ? VS_MSG_PRIORITY_LOW : VS_MSG_PRIORITY_HIGH);
															/* send data to terminal */
			} else {
				Free_msg (p_snd_msg);
				p_snd_msg = P_NIL;
			}
		}

		p_a_queued_msg = (struct message FAR * FAR *)(
						&Vs_term_a_queued_msg_low_prt);		/* terminal low priority queue */
	}

}


/* END OF FILE */
