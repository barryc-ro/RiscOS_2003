
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename	: vs_cfg.c (configuration)
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	vs_set_config		- VS set configuration main routine
 *	vs_config_co		- report 'set configuration' confirmation to the SM
 *	vs_desactivate		- desactivate the VS, free all allocated resources
 *	vs_list_build		-
 *	vs_object_build		- build VS objects
 *	vs_object_init		- initialize VS objects
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_set_config : VS set configuration main routine

Usage		: uchar vs_set_config (uchar FAR *p_data)
						- p_data	: address of SM_SET_CONFIG_RQ arguments

Description : implements the processing of the configuration.

Return value : 	returns OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_set_config (p_data)
uchar FAR *p_data;
{
	Vs_p_msg	= P_NIL;										/* initialize save message */
	Vs_error	= VS_ERR_NONE;									/* reset error indicator */

	Vs_message_save (p_rcv_msg);									/* save configuration message */

	if (vs_object_build (p_data) == NOK) {
		return (NOK);
	}
	if (vs_object_init (p_data) == NOK) {	/* initialize VS objects */
		return (NOK);
	}

	Vs_config_co (OK);					/* send confirmation */

	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_reset_config

Usage		: uchar vs_reset_config (void)

Description : reset configuration of a line (terminal)

Return value : 	returns OK or NOK

*--------------------------------------------------------------------------*/
#if VS_RESET_CONFIG == ON
uchar vs_reset_config ()
{
	nai_t	term_id;

	term_id	= R_msg_nai;
	if (vs_terminal_access_from_term_id (term_id) != term_id) {
		Vs_assert (0, VS_TRAP_ASSERT_10, "V.120:terminal id incorrect 10");
		return (NOK);
	}

	return (OK);
}
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_config_co

Usage		: uchar vs_config_co (ret_code)
						ret_code	- return code	: OK or NOK

Description : report 'set configuration' confirmation to the System Manager.

Return value : 	OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_config_co (ret_code)
uchar 		ret_code;												/* return code */
{
	uchar			FAR * p_config;									/* configuration structure pointer */
	struct message	FAR * p_msg;									/* local message */

	p_msg				= P_NIL;
	Vs_message_restore (p_msg);										/* restore config message */

	p_config			= L_a_data;

	L_msg_from			= VS_TERMINAL_ENTITY;						/* from terminal entity */
	L_msg_to			= ENT_SM;									/* to System Manager entity */
	L_msg_code			= SM_SET_CONFIG_CO;							/* set configuration confirmation */

	Vs_cfg_ret_code	= ret_code;										/* return code */
	Vs_cfg_cause	= (ret_code == OK) ? 0 : Vs_error;				/* cause = error code */
	Vs_cfg_diag		= (ret_code == OK) ? 0 : VS_TERMINAL_ENTITY;	/* diagnostic = from terminal entity */
	Send_message (p_msg);

	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_desactivate

Usage		: uchar vs_desactivate (void)

Description : desactivate the VS, free all allocated resources.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_desactivate ()
{

	/* Free allocated context resources
	-----------------------------------*/

	/* Free allocated timer resources
	---------------------------------*/

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_list_build

Usage		: struct node FAR * vs_list_build (ushort nb_object, ushort object_size);

In			:
		nb_object	: number of objects to build in list.
		object_size : size of one object.

Description : build a list of objects.

Return value : returns the first object address.

*--------------------------------------------------------------------------*/

struct node FAR * vs_list_build (nb_object, object_size)
ushort							nb_object;						/* number of objects in list */
ushort							object_size;					/* objects size */
{
	struct node FAR *	a_first_node;								/* save first node address */
	struct node FAR *	p_node;										/* node structure pointer */
	ushort				i;

	a_first_node	= P_NIL;
	if ((p_node = (struct node FAR *)Mem_alloc (object_size, PID_VL)) != P_NIL) {
																	/* allocate first object resource */
		a_first_node = p_node;										/* save first node structure address */

		for (i = 1; i < nb_object; i++) {

			if ((p_node = Next_node = (struct node FAR *) Mem_alloc (
					object_size, PID_VL)) == P_NIL) {				/* allocate other object resource */
				Vs_error = VS_ERR_INSUFFICIENT_RESOURCE;
			}

		}

	} else {
		Vs_error = VS_ERR_INSUFFICIENT_RESOURCE;
	}

	Next_node = P_NIL;												/* terminals contexts list end */

	return (a_first_node);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_object_build : build VS objects

Usage		: uchar vs_object_build (uchar FAR *p_data)
						- p_data	: address of SM_SET_CONFIG_RQ primitive
									  arguments

Description : build VS objects (for terminal, network, service, connection
									profile, dl_sapi_attach contexts)

Return value : returns OK or NOK

*--------------------------------------------------------------------------*/

/*	Network, service & connection objects lists hierarchical diagram
	----------------------------------------------------------------

	Network common
	Network 1
		Service common
		Service 1
			Connection common
			Connection 1
			............
			Connection k
		.........
		Service j
			Connection common
			Connection 1
			............
			Connection k
	.........
	Network i
		Service common
		Service 1
			Connection common
			Connection 1
			............
			Connection k
		.........
		Service j
			Connection common
			Connection 1
			............
			Connection k
*/


uchar vs_object_build (p_data)
uchar FAR *	p_data;
{

	struct vs_config FAR *	p_config;								/* configuration buffer pointer */
	struct node FAR *		p_node;									/* node structure pointer */
	struct node FAR *		p_node_network;							/* network access current node structure address */
	struct node FAR *		p_node_service;							/* service access current node structure address */
	ushort					n;										/* configuration network objects list index */
	ushort					s;										/* configuration service objects list index */
	ushort					c;										/* configuration connection objects list index / general counter */

	uchar	nb_terminals_to_build;		/* number of terminal objects to build */
	uchar	nb_networks_to_build;		/* number of network objects to build */
	uchar	nb_services_to_build;		/* number of service objects to build */
	uchar	nb_connections_to_build;	/* number of connection objects to build */
	uchar	nb_profiles_to_build;		/* number of profile objects to build */
	uchar	nb_servprofs_to_build;		/* number of VS service profile objects to build */

	vs_term_id_t			t_term_id	[VS_CONFIG_MAX_NB_CFG_TERMINAL];
	nai_t					t_nai		[VS_CONFIG_MAX_NB_CFG_NETWORK];
	sapi_t					t_sapi		[VS_CONFIG_MAX_NB_CFG_SERVICE];
	add_t					t_dl_ces	[VS_CONFIG_MAX_NB_CFG_CONNECTION];
	char					t_prof_id	[VS_CONFIG_MAX_NB_CFG_PROFILE]
										[VS_PROFILE_ID_MAX_LGTH + 1];
	char					t_servprof_id [VS_CONFIG_MAX_NB_CFG_SERVPROF]
										  [VS_SERVPROF_ID_MAX_LGTH + 1];


	p_config = (struct vs_config FAR *) p_data;

		/*----------------------------------
			VS terminals objects building
		------------------------------------*/

	if (Vs_status == OFF) {										/* if VS is not active */

		if (Vs_cfg_nb_cfg_terminal != 0) {
			Vs_a_terminal_node = p_node = vs_list_build (
				1, Sizeof_vs_terminal_common);						/* build the terminal common object */
			Vs_p_terminal_common =
				(struct vs_terminal_common FAR *)(p_node + 1);		/* set terminal common address */
			Vs_nb_terminal = nb_terminals_to_build = Vs_cfg_nb_cfg_terminal;
																	/* set number of terminal objects to be built */
		}
		else {
			Vs_error = VS_ERR_CONFIG_NULL_NB_CFG_OBJECT;			/* no objects to be built ?! */
		}

		if (Vs_error != VS_ERR_NONE) {
			vs_error_process (Vs_error);								/* possible error processing */
			return (NOK);
		}
	} else {
		nb_terminals_to_build = 0;

		for (c = 0; c < Vs_cfg_nb_cfg_terminal; c++) {

			if (vs_terminal_access_from_term_id (Vs_cfg_term_id (c)) !=
				Vs_cfg_term_id (c)) {
				t_term_id [nb_terminals_to_build++] = Vs_cfg_term_id (c);
			}

		}

		Vs_nb_terminal += nb_terminals_to_build;					/* update VS number of terminals */
	}

	if (nb_terminals_to_build != 0) {
		p_node = vs_last_node_access (Vs_a_terminal_node);			/* access to the last terminal node structure */
		Next_node	= vs_list_build (
			nb_terminals_to_build, Sizeof_vs_terminal);				/* build the terminal object list */
		if (Vs_error != VS_ERR_NONE) {
			vs_error_process (Vs_error);								/* possible error processing */
			return (NOK);
		}

		for (c = 0; c < nb_terminals_to_build; c++) {
			Vs_next_terminal_access ();
			Vs_term_id = (Vs_status == OFF) ?
				 Vs_cfg_term_id (c) : t_term_id [c];				/* set terminal id in each new terminal context */

#			if VS_ASSERT == ON
				Vs_term_p_network	= P_NIL;
				Vs_term_p_service	= P_NIL;
				Vs_term_p_conn		= P_NIL;
#			endif
		}

	}

		/*-----------------------------------------------------
			VS network, service, connection objects building
		------------------------------------------------------*/

			/* VS network objects building
			-------------------------------*/

	if (Vs_status == OFF) {											/* if VS is not active */

		if (Vs_cfg_nb_cfg_network != 0) {
			Vs_a_network_node = p_node = vs_list_build (
				1, Sizeof_vs_network_common);						/* build the network common object */
			Vs_p_network_common = (struct vs_network_common FAR *)
				(p_node + 1);										/* set network common address */
		} else {
			Vs_error = VS_ERR_CONFIG_NULL_NB_CFG_OBJECT;			/* no objects to be built ?! */
		}

		if (Vs_error != VS_ERR_NONE) {
			vs_error_process (Vs_error);								/* possible error processing */
			return (NOK);
		}
		Vs_nb_network = nb_networks_to_build = Vs_cfg_nb_cfg_network;
	}
	else {
		nb_networks_to_build = 0;

		for (c = 0; c < Vs_cfg_nb_cfg_network; c++) {

			if (vs_network_access (Vs_cfg_nai (c)) != Vs_cfg_nai (c)) {
				t_nai [nb_networks_to_build++] = Vs_cfg_nai (c);		/* verify if the network exists yet, if the network
																		context don't exist save the network id */
			}

		}

		Vs_nb_network += nb_networks_to_build;						/* update number of networks */
	}

	if (Vs_cfg_nb_cfg_network != 0) {

		if (nb_networks_to_build != 0) {
			p_node		= vs_last_node_access (Vs_a_network_node);	/* access to the last network context */
			Next_node	= vs_list_build (
				nb_networks_to_build, Sizeof_vs_network);			/* build the network object list */
			if (Vs_error != VS_ERR_NONE) {
				vs_error_process (Vs_error);							/* possible error processing */
				return (NOK);
			}

			for (c = 0; c < nb_networks_to_build; c++) {
				Vs_next_network_access ();							/* access to next network context */
				Vs_network_nai	= (Vs_status == OFF) ? Vs_cfg_nai (c) : t_nai [c];
			}

		}

		for (n = 0; n < Vs_cfg_nb_cfg_network; n++) {
			Vs_network_access (Vs_cfg_nai (n));						/* access to network context */
			p_node_network = p_node = ((struct node FAR *)Vs_p_network) - 1;

				/* VS service objects building
				-------------------------------*/

			if (Vs_status == OFF) {									/* if VS is not active */

				if (Vs_cfg_nb_cfg_service (n) != 0) {
					p_node = Down_node = vs_list_build (
						1, Sizeof_vs_service_common);				/* build a service common object */
					Vs_p_service_common = (struct vs_service_common FAR *)
						(p_node + 1);								/* set service common address */
				} else {
					Vs_error = VS_ERR_CONFIG_NULL_NB_CFG_OBJECT;	/* no objects to be built ?! */
				}

				if (Vs_error != VS_ERR_NONE) {
					vs_error_process (Vs_error);						/* possible error processing */
					return (NOK);
				}
				Vs_nb_service = nb_services_to_build =
					Vs_cfg_nb_cfg_service (n);						/* set number of services objects (per network object) to be built */

			} else {
				nb_services_to_build = 0;

				for (c = 0; c < Vs_cfg_nb_cfg_service (n); c++) {

					if (vs_service_access (Vs_cfg_sapi (n,c)) !=
						Vs_cfg_sapi (n,c)) {
						t_sapi [nb_services_to_build++] = Vs_cfg_sapi (n,c);
					}

				}

				Vs_nb_service += nb_services_to_build;				/* update number of service contexts (per network context) */
			}

			if (Vs_cfg_nb_cfg_service (n) != 0) {

				if (nb_services_to_build != 0) {
					p_node = vs_last_node_access (((struct node FAR *)
						Vs_p_service_common) - 1);					/* access to the last service context */
					Next_node = vs_list_build (
						nb_services_to_build, Sizeof_vs_service);	/* build a service object list */
					if (Vs_error != VS_ERR_NONE) {
						vs_error_process (Vs_error);					/* possible error processing */
						return (NOK);
					}

					for (c = 0; c < nb_services_to_build; c++) {
						Vs_next_service_access ();					/* access to next service context */
						Vs_sapi = (Vs_status == OFF) ?
							Vs_cfg_sapi (n,c) : t_sapi [c];			/* set new service context sapi */
					}

				}


				for (s = 0; s < Vs_cfg_nb_cfg_service (n); s++) {
					Vs_service_access (Vs_cfg_sapi (n,s));		/* access to service context */
					p_node_service = p_node =
						((struct node FAR *)Vs_p_service) - 1;

						/* VS connections objects building
						-----------------------------------*/

					if (Vs_status == OFF) {

						if (Vs_cfg_nb_cfg_connection (n,s) != 0) {
							p_node = Down_node = vs_list_build (
								1, Sizeof_vs_connection_common);	/* build a connection common object */
							Vs_p_connection_common = (struct
								vs_connection_common FAR *)(p_node + 1);
																	/* set connection common address */
						} else {
							Vs_error = VS_ERR_CONFIG_NULL_NB_CFG_OBJECT;
						}											/* no objects to be built ?! */

						if (Vs_error != VS_ERR_NONE) {
							vs_error_process (Vs_error);				/* possible error processing */
							return (NOK);
						}
						Vs_nb_connection = nb_connections_to_build =
							Vs_cfg_nb_cfg_connection (n,s);		/* set number of connection object to be built */

					} else {

						nb_connections_to_build = 0;

						for (c = 0; c < Vs_cfg_nb_cfg_connection (n,s); c++) {

							if (vs_connection_access (Vs_cfg_dl_ces (n,s,c))
								!= Vs_cfg_dl_ces (n,s,c)) {
								t_dl_ces [nb_connections_to_build++] =
									Vs_cfg_dl_ces (n,s,c);	/* verify if the connection context exists yet,
															   if the connection context don't exist save the connection id */
							}

						}

						Vs_nb_connection += nb_connections_to_build;/* update number of connection contexts (per service context) */
					}

					if (Vs_cfg_nb_cfg_connection (n,s) != 0) {

						if (nb_connections_to_build != 0) {
							p_node = vs_last_node_access (((struct node FAR *)
								Vs_p_connection_common) - 1);		/* access to the last connection context */
							Next_node = vs_list_build (nb_connections_to_build,
								Sizeof_vs_connection);				/* build a connection object list */
							if (Vs_error != VS_ERR_NONE) {
								vs_error_process (Vs_error);
								return (NOK);
							}

							for (c = 0; c < nb_connections_to_build; c++) {
								Vs_next_connection_access ();
								Vs_dl_ces = (Vs_status == OFF) ?
									Vs_cfg_dl_ces (n,s,c) : t_dl_ces [c];
							}

						}

					} else {
						vs_error_process (VS_ERR_CONFIG_NULL_NB_CFG_OBJECT);
						return (NOK);
					}

					p_node = p_node_service;						/* restore service node structure last address */
					p_node_service = p_node = Next_node;			/* go to next service object */

				} /* end for 'services' */
			}
			else {
				vs_error_process (VS_ERR_CONFIG_NULL_NB_CFG_OBJECT);
				return (NOK);
			}

			p_node = p_node_network;								/* restore network node structure last address */
			p_node_network = p_node = Next_node;					/* go to next network object */

		} /* end for 'networks' */

	} else {

		if (Vs_status == OFF) {
			vs_error_process (VS_ERR_CONFIG_NULL_NB_CFG_OBJECT);
			return (NOK);
		}

	}

		/*----------------------------------------
			VS parameter profile objects building
		------------------------------------------*/

	if (Vs_status == OFF) {											/* if VS is not active */

		if (Vs_cfg_nb_cfg_profile != 0) {
			Vs_a_profile_node = p_node = vs_list_build (
				1, Sizeof_vs_profile_common);						/* build the profile common object */
			Vs_p_profile_common =
				(struct vs_profile_common FAR *)(p_node + 1);		/* set profile common address */
		}
		else {
			vs_error_process (VS_ERR_CONFIG_NULL_NB_CFG_OBJECT);
			return (NOK);
		}

		Vs_nb_profile = nb_profiles_to_build = Vs_cfg_nb_cfg_profile;
	}
	else {
		nb_profiles_to_build = 0;

		for (c = 0; c < Vs_cfg_nb_cfg_profile; c++) {

			if (vs_profile_access (Vs_cfg_a_profile_id (c)) == NOK) {
				Strcpy_far ((char FAR *)(&t_prof_id [nb_profiles_to_build++][0]),
							Vs_cfg_a_profile_id (c),
							VS_PROFILE_ID_MAX_LGTH + 1);	/* verify if the profile context exists yet,
															   if the profile context don't exist save the profile id */
			}

		}

		Vs_nb_profile += nb_profiles_to_build;						/* update number of profile contexts */
	}

	if (nb_profiles_to_build != 0) {
		p_node = vs_last_node_access (Vs_a_profile_node);			/* access to the last profile node structure */
		Next_node = vs_list_build (
			nb_profiles_to_build, Sizeof_vs_profile);				/* build the profile object list */
		if (Vs_error != VS_ERR_NONE) {
			vs_error_process (Vs_error);							/* possible error processing */
			return (NOK);
		}

		for (c = 0; c < nb_profiles_to_build; c++) {
			Vs_next_profile_access ();
			Strcpy_far (Vs_a_profile_id,
						(Vs_status == OFF) ? Vs_cfg_a_profile_id (c) :
							(char FAR *)(&t_prof_id [c][0]),
						VS_PROFILE_ID_MAX_LGTH + 1);				/* set profile id in each new profile context */
		}

	}

		/*----------------------------------------
			VS service profile objects building
		------------------------------------------*/

	if (Vs_status == OFF) {											/* if VS is not active */

		if (Vs_cfg_nb_cfg_servprof != 0) {
			Vs_a_servprof_node = p_node = vs_list_build (
				1, Sizeof_vs_servprof_common);						/* build the service profile common object */
			Vs_p_servprof_common =
				(struct vs_servprof_common FAR *)(p_node + 1);		/* set service profile common address */
		}
		else {
			vs_error_process (VS_ERR_CONFIG_NULL_NB_CFG_OBJECT);
			return (NOK);
		}

		Vs_nb_servprof = nb_servprofs_to_build = Vs_cfg_nb_cfg_servprof;
	}
	else {
		nb_servprofs_to_build = 0;

		for (c = 0; c < Vs_cfg_nb_cfg_servprof; c++) {

			if (vs_servprof_access (Vs_cfg_a_servprof_id (c)) == NOK) {
				Strcpy_far ((char FAR *)(&t_servprof_id [nb_servprofs_to_build++][0]),
							Vs_cfg_a_servprof_id (c),
							VS_SERVPROF_ID_MAX_LGTH + 1);			/* verify if the service profile context exists yet,
																		if the service profile context don't exist save the service profile id */
			}

		}

		Vs_nb_servprof += nb_servprofs_to_build;					/* update number of service profile contexts */
	}

	if (nb_servprofs_to_build != 0) {
		p_node = vs_last_node_access (Vs_a_servprof_node);			/* access to the last service profile node structure */
		Next_node = vs_list_build (
			nb_servprofs_to_build, Sizeof_vs_servprof);				/* build the service profile object list */
		if (Vs_error != VS_ERR_NONE) {
			vs_error_process (Vs_error);							/* possible error processing */
			return (NOK);
		}

		for (c = 0; c < nb_servprofs_to_build; c++) {
			Vs_next_servprof_access ();
			Strcpy_far (Vs_a_servprof_id,
						(Vs_status == OFF) ? Vs_cfg_a_servprof_id (c) :
								(char FAR *)(&t_servprof_id [c][0]),
						VS_SERVPROF_ID_MAX_LGTH + 1);		/* set service profile id in each new service profile context */
		}
	}

		/*----------------------------------
			VS interface object building
		-----------------------------------*/

	if (Vs_status == OFF) {				/* if VS is not active */

		if ((Vs_p_interface = (struct vs_interface FAR *) Mem_alloc (
			Sizeof_vs_interface, PID_VL)) == P_NIL) {					/* allocate resource for interface object */
			vs_error_process (VS_ERR_INSUFFICIENT_RESOURCE);
			return (NOK);
		}

	}

	if (Vs_status == OFF) {				/* if VS is not active */

		if ((Vs_cfg_max_nb_line != 0) &&
			(Vs_cfg_max_nb_channel_per_line != 0)) {

			/* set configuration of Vs dl sapi attach management unit */

			if ((appli_sm_dl_sapi_attach_cfg (Vs_cfg_max_nb_line,
											  Vs_cfg_max_nb_channel_per_line)) != OK) {
				return (NOK);
			}
		}
	}

	return (OK);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_object_init : initialize VS objects

Usage		: uchar vs_object_init (uchar FAR *p_data)
						- p_data : address of SM_SET_CONFIG_RQ primitive
								   arguments

Description : initialization of VS objects

Return value : 	returns OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_object_init (p_data)
uchar FAR *p_data;
{
	struct vs_config FAR *	p_config;								/* configuration buffer pointer */
	ushort					n;										/* configuration network objects list index */
	ushort					s;										/* configuration service objects list index */
	ushort					c;										/* configuration connection objects list index / general counter */
	ushort					i;										/* general counter */

	p_config = (struct vs_config FAR *)p_data;

		/*------------------------------------
			VS main context initialization
		-------------------------------------*/

	Vs_buffer_data_lgth	= Buffer_data_lgth;

		/*-----------------------------------------------------------
			VS network, service, connection objects initialization
		------------------------------------------------------------*/

	for (n = 0; n < Vs_cfg_nb_cfg_network; n++) {

		if (vs_network_access (Vs_cfg_nai (n)) == Vs_cfg_nai (n)) {
			Vs_network_p_term	= P_NIL;

			for (s = 0; s < Vs_cfg_nb_cfg_service (n); s++) {

				if (vs_service_access (Vs_cfg_sapi (n,s)) ==
					Vs_cfg_sapi (n,s)) {

					for (c = 0; c < Vs_cfg_nb_cfg_connection (n,s); c++) {

						if (vs_connection_access (Vs_cfg_dl_ces (n,s,c)) ==
							Vs_cfg_dl_ces (n,s,c)) {

							Vs_conn_to_net_fifo_high	= Vs_cfg_to_net_queue_high_mark (n,s);
							Vs_conn_to_net_fifo_low		= Vs_cfg_to_net_queue_low_mark (n,s);
							if (Vs_conn_to_net_fifo_low	>
								Vs_conn_to_net_fifo_high) {
								vs_error_process (VS_ERR_NET_FIFO_THRESHOLDS);
								return (NOK);
							}


							Vs_conn_to_net_sync_window	= Vs_cfg_to_net_sync_window (n,s);
							Vs_conn_to_net_in_fifo		= 0;

							Free_msg (Vs_conn_to_net_fifo_first);
							Vs_conn_to_net_fifo_first	= P_NIL;

							Free_msg (Vs_conn_to_net_fifo_last);
							Vs_conn_to_net_fifo_last	= P_NIL;

							Vs_conn_to_net_queue_busy	= OFF;
							Vs_conn_to_net_nb_sent		= 0;
							Vs_conn_to_net_cpu_busy		= OFF;
							Vs_conn_p_term				= P_NIL;
							Vs_conn_send_initial_cs		= ON;
							Vs_conn_mfo_established		= OFF;
							Vs_conn_user_data_sent		= OFF;
							Vs_conn_state_set (VS_CONN_STATE_DISCONNECTED);
						}

					}

				}

			}

		}

	}

		/*------------------------------------------------
			VS parameter profile objects initialization
		-------------------------------------------------*/

	for (c = 0; c < Vs_cfg_nb_cfg_profile; c++) {
		if (vs_profile_access (Vs_cfg_a_profile_id (c)) == NOK) {	/* access to the parameter profile context */
			vs_error_process (VS_ERR_PROFILE_UNKNOWN);
			return (NOK);
		}
		Memcpy_far ((char FAR *)Vs_a_profile_base,
					(char FAR *)(&Vs_cfg_a_profile_base (c)),
					Sizeof_vs_profile_base);						/* store configurating parameter profile */
	}

		/*------------------------------------------------
			VS service profile objects initialization
		-------------------------------------------------*/

	for (c = 0; c < Vs_cfg_nb_cfg_servprof; c++) {
		if (vs_servprof_access (Vs_cfg_a_servprof_id (c)) == NOK) {	/* access to the parameter profile context */
			vs_error_process (VS_ERR_SERVPROF_UNKNOWN);
			return (NOK);
        }
		Memcpy_far ((char FAR *)Vs_a_servprof_base,
					(char FAR *)(&Vs_cfg_a_servprof_base (c)),
					Sizeof_vs_servprof_base);						/* store configurating parameter profile */
	}

		/*---------------------------------------
			VS terminal objects initialization
		----------------------------------------*/

	for (c = 0; c < Vs_cfg_nb_cfg_terminal; c++) {

		if ((vs_terminal_access_from_term_id (Vs_cfg_term_id (c)) ==
			 Vs_cfg_term_id (c)) &&
			(Vs_term_it_ctx_acc_in (Vs_cfg_term_id (c)) == OK)) {
			Vs_term_p_network			= P_NIL;
			Vs_term_p_service			= P_NIL;
			Vs_term_p_conn				= P_NIL;
			Vs_term_nb_chani			= 0;
			Vs_term_first_chan_id		= ADD_NIL;
			Vs_term_channel_reassign	= OFF;
			Vs_term_conn_est_timer_val	= 0;

#			if VS_V42B_NEGOTIATION == ON
				Vs_term_v42b_resp_timer_val	= 0;
#			endif

			Vs_term_incoming_priority	= Vs_cfg_term_incoming_priority (c);	/* store default nai & sapi for outgoing & incoming calls */
			if (vs_profile_access (Vs_cfg_a_def_profile_id (c)) == NOK) {	/* access to default profile context */
				vs_error_process (VS_ERR_PROFILE_UNKNOWN);
				return (NOK);
			}
			if (vs_servprof_access (Vs_a_profile_servprof_id) == NOK) {		/* access to service profile context associated to default profile */
				vs_error_process (VS_ERR_SERVPROF_UNKNOWN);
				return (NOK);
			}

			Strcpy_far ((char FAR *)Vs_a_default_profile_id,
						(char FAR *)Vs_cfg_a_def_profile_id (c),
						VS_PROFILE_ID_MAX_LGTH + 1);				/* save profile id */

			Vs_term_status					= OFF;					/* the VS is now active */
			Vs_set_new_profile (Vs_a_profile_parm, FALSE);			/* set a new profile */
			Vs_parameter_set (ON);									/* update current parameters */

			for (i = 0; i < VS_NB_TERMINAL_TIMERS; i++) {

				if (Vs_term_a_ti_id (i) == P_NIL) {
					if ((Vs_term_a_ti_id (i) = Timer_alloc (VS_TERMINAL_ENTITY,
						Vs_term_id, SAPI_NIL, ADD_NIL)) != P_NIL) {		/* timer allocation */
						Vs_term_ti_sn		(i)	= 0;					/* reset timer sequence number */
					}
					else {
						vs_error_process (VS_ERR_INSUFFICIENT_RESOURCE);
						return (NOK);
					}
				}
				Vs_term_ti_state (i)		= OFF;					/* reset timer state */

			}

			Vs_term_break_rq				= OFF;
			Vs_term_stop_requested			= OFF;					/* reset stop VS unit requested flag */
			Vs_term_busy					= OFF;					/* enable transmitting data to terminal */

			Free_msg (Vs_term_a_queued_msg_high_prt);
			Vs_term_a_queued_msg_high_prt	= P_NIL;				/* reset high priority queued message pointer */

			Free_msg (Vs_term_a_queued_msg_low_prt);
			Vs_term_a_queued_msg_low_prt	= P_NIL;				/* reset low priority queued message pointer */

			Vs_service_indication			= FALSE;				/* reset VS service signal indication flag */

			Vs_last_sent_terminal_present	= OFF;
			Vs_last_sent_term_busy			= OFF;
			Vs_last_sent_break_rq			= OFF;

#			if VS_TERMINAL_ENTITY == ENT_VS
				Free_msg (Vs_term_p_init_stop_msg);
				Vs_term_p_init_stop_msg		= P_NIL;
#			endif
		}
		else {
			vs_error_process (VS_ERR_CONFIG_CTX_ACC);
			return (NOK);
		}

	}

	Vs_status	= ON;					/* the VS is now active */

	return (OK);
}


/* END OF FILE */

