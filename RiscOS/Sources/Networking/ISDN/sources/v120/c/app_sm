
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - app_sm.c (Application management SM)
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *	appli_sm_ctx_access_chani		- access to a context from a B-channel
 *	appli_sm_ctx_access_dl_sapi_ces	- access to a context from a DL SAP and DL
 *									  CES
 *	appli_sm_line_status_signal		- signal the status of the line.
 *	appli_sm_dl_sapi_attach_cfg		- set configuration.
 *	appli_sm_dl_sapi_attach_rq		- attach dl_sapi to physical channels
 *									  request.
 *	appli_sm_dl_sapi_detach_rq		- detach dl_sapi from channel request.
 *	appli_sm_dl_sapi_co				- data link sapi confirmation processing.
 *	appli_sm_dl_sapi_state_read		- read the state of the DL_SAP attached
 *									  to the channel
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include	"services.h"
#include	"vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#	include "app_sm.h"
#	include "dl_int.h"

	struct	appli_sm	s_appli_sm;								/* Application management X25 context */

	uchar				appli_sm_error_cause;						/* error cause */


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: appli_sm_ctx_access_chani : access to a context from a B-channel

Usage		: ushort appli_sm_ctx_access_chani (nai_t nai, add_t chani);
								nai		: network_access_id
								chani	: B-channel id

Description : 	access to the context

Return value : 	context index or APPLI_SM_CTX_NIL

*--------------------------------------------------------------------------*/

ushort	appli_sm_ctx_access_chani (nai, chani)
nai_t				nai;
add_t				chani;
{
	ushort			ctx_idx;	/* context index */

	if (Appli_sm_a_context == P_NIL) {
		return (APPLI_SM_CTX_NIL);	/* No attach managemement */
	}
	if ((nai == NAI_NIL) || (chani == ADD_NIL)) {
		return (APPLI_SM_CTX_NIL);	/* Invalid references - attach not done */
	}

	ctx_idx = 0;

	while (	(Appli_sm_nb_ctx				> ctx_idx)	&&		/* where there are contexts */
		   ((Appli_sm_nai		(ctx_idx)	!= nai)		||
			(Appli_sm_chani		(ctx_idx)	!= chani)))	{		/* requested nai & chani found */
		++ctx_idx;
	}

	if ((ctx_idx < Appli_sm_nb_ctx)						&&
		(Appli_sm_nai			(ctx_idx)	== nai)		&&
		(Appli_sm_chani			(ctx_idx)	== chani))	{		/* requested nai & chani found */
		;
	}
	else {
		ctx_idx = 0;

		while (	(Appli_sm_nb_ctx			> ctx_idx)	&&		/* while there are contexts */
				(Appli_sm_nai	(ctx_idx)	!= NAI_NIL)){		/* while empty context not found */
			++ctx_idx;
		}

		if ((ctx_idx < Appli_sm_nb_ctx)	&&
			(Appli_sm_nai (ctx_idx) == NAI_NIL)) {

			/* Empty context found, reserve it */

			Appli_sm_nai		(ctx_idx)	= nai;
			Appli_sm_chani		(ctx_idx)	= chani;			/* set new context */
		}
		else {
			Vs_assert (0, VS_TRAP_ACCESS_CHAN_1, "app_sm/21");
			return (APPLI_SM_CTX_NIL);							/* no available context */
		}

	}

	return (ctx_idx);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: appli_sm_ctx_access_dl_sapi_ces : access to a context from a
												DL SAP and DL CES

Usage		: ushort appli_sm_ctx_access_dl_sapi_ces (nai_t nai, sapi_t dl_sapi, add_t dl_ces);
						nai		: network_access_id
						dl_sapi	: DL SAP id
						dl_ces	: DL CES id

Description : 	access to the context

Return value : 	context index or APPLI_SM_CTX_NIL

*--------------------------------------------------------------------------*/

ushort	appli_sm_ctx_access_dl_sapi_ces (nai, dl_sapi, dl_ces)
nai_t				nai;
sapi_t				dl_sapi;
add_t				dl_ces;
{
	ushort			ctx_idx;	/* context index */

	if (Appli_sm_a_context == P_NIL) {
		return (APPLI_SM_CTX_NIL);	/* No attach managemement */
	}
	if (nai == NAI_NIL) {
		Vs_assert (0, VS_TRAP_ACCESS_CES_2, "app_sm/32");
		return (APPLI_SM_CTX_NIL);	/* Invalid references */
	}

	ctx_idx = 0;
	while ((Appli_sm_nb_ctx > ctx_idx)	&&
		   ((Appli_sm_nai		(ctx_idx)	!= nai)		||
			(Appli_sm_dl_sapi	(ctx_idx)	!= dl_sapi) ||
			(Appli_sm_dl_ces	(ctx_idx)	!= dl_ces)
		  )) {
		++ctx_idx;
	}

	if ((Appli_sm_nai		(ctx_idx)	== nai)		&&
		(Appli_sm_dl_sapi	(ctx_idx)	== dl_sapi) &&
		(Appli_sm_dl_ces	(ctx_idx)	== dl_ces))	{
		;
	}
	else {
		Vs_assert (0, VS_TRAP_ACCESS_CES_1, "app_sm/31");
		return (APPLI_SM_CTX_NIL);			/* no available context */
	}

	return (ctx_idx);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: appli_sm_line_status_signal

Usage		: uchar appli_sm_line_status_signal (	nai_t	nai,
													add_t	chani
													uchar	line_status);
In			:
		nai			: network_access_id
		chani		: channel id
		line_status	: ON (off hook) / OFF (on hook)

Description : signal the status of the line.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar appli_sm_line_status_signal (nai, chani, line_status)
nai_t				nai;
add_t				chani;
uchar				line_status;
{
	ushort			ctx_idx;			/* context index */
	uchar			ret_code;

	if ((ctx_idx = appli_sm_ctx_access_chani (nai, chani)) !=
				   APPLI_SM_CTX_NIL) {
		Appli_sm_line_status (ctx_idx) = line_status;
		ret_code = OK;
	}
	else {
		ret_code				= NOK;
		appli_sm_error_cause	= APPLI_SM_ERR_CTX_ACCESS;
	}

	return (ret_code);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: appli_sm_dl_sapi_attach_cfg

Usage		: uchar appli_sm_dl_sapi_attach_cfg (
										nai_t	max_nb_line,
										add_t	max_nb_channel_per_line)
					- max_nb_line			  : maximum number of lines
					- max_nb_channel_per_line : maximum number of (B) channels per line

Description : Set configuration of dl sapi attachment application management
			  contexts.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar appli_sm_dl_sapi_attach_cfg (max_nb_line, max_nb_channel_per_line)
nai_t				max_nb_line;
add_t				max_nb_channel_per_line;
{
	ushort			ctx_idx;		/* context index */

	Appli_sm_nb_ctx 	= max_nb_line * max_nb_channel_per_line;	/* number of contexts */
	Appli_sm_a_context 	= P_NIL;

	if (Appli_sm_nb_ctx == 0) {			/* no attach management */
		return (OK);
	}

		/* allocate resources */

	if ((Appli_sm_a_context = (struct appli_sm_context FAR *)
		Mem_alloc (Appli_sm_nb_ctx * Sizeof_appli_sm_context,
				   PID_VL)) != P_NIL) {

		for (ctx_idx = 0; ctx_idx < Appli_sm_nb_ctx; ctx_idx++) {
			Appli_sm_nai (ctx_idx)				= NAI_NIL;
			Appli_sm_chani (ctx_idx)			= ADD_NIL;
			Appli_sm_channel_state (ctx_idx)	= APPLI_SM_STATE_DETACHED;
		}

	}
	else {
		Vs_assert (0, VS_TRAP_ATTACH_CFG, "app_sm/1");
		appli_sm_error_cause = APPLI_SM_ERR_RESOURCE_ALLOC;
		return (NOK);
	}
	appli_sm_error_cause	= APPLI_SM_ERR_NONE;
	return (OK);

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: appli_sm_dl_sapi_attach_rq

Usage		: uchar appli_sm_dl_sapi_attach_rq (
						ent_id_t	from,
						nai_t		nai,
						sapi_t		dl_sapi,
						add_t		dl_ces,
						ushort		dl_lli,
						uchar		outgoing,
						struct v120_ph_ch_list FAR *p_ph_ch_list)
				from			: from entity.
				nai				: network access id.
				dl_sapi			: data link service access point id.
				a_dl_ces		: address of dl_ces to be updated.
				outgoing		: outgoing or incoming call.
				p_ph_ch_list	: address of a list of physical channels,
								  or P_NIL (list is empty, use chan_id).

Description : 	implements the sending of message to management entity
				requesting the attachment of a data link to one or several
				physical channels.

Return value :
	CONTINUE	- DL_SAP is attached to channel, just go on.
	STOP		- DL_SAP is being attached to channel, stop and wait.
	NOK			- DL_SAP can't be attached to the channel.

*--------------------------------------------------------------------------*/

uchar appli_sm_dl_sapi_attach_rq (from, nai, dl_sapi, dl_ces, dl_lli,
								  outgoing, p_ph_ch_list)
ent_id_t					from;			/* from entity */
nai_t						nai;			/* network access id */
sapi_t						dl_sapi;		/* data link service access point id */
add_t						dl_ces;			/* address of data link lever connection end point */
ushort						dl_lli;			/* logical link */
uchar						outgoing;		/* TRUE for outgoing call, FALSE otherwise */
struct v120_ph_ch_list FAR *p_ph_ch_list;	/* P_NIL, or list of physical channels */
{
	uchar					ret_code;		/* return code */
	ushort					ctx_idx;		/* context index */
	uchar 			FAR *	p_data;
	short					i;

	if ((ctx_idx = appli_sm_ctx_access_chani (nai, V120_ph_ch_chani (0)))
			== APPLI_SM_CTX_NIL) {
		appli_sm_error_cause	= APPLI_SM_ERR_CTX_ACCESS;
		return (NOK);
	}

	if (Appli_sm_line_status (ctx_idx) != ON) {				/* 'line status' active */
		appli_sm_error_cause	= APPLI_SM_ERR_NO_CHANNEL;	/* no channel to attach */
		return (NOK);
	}

	switch (Appli_sm_channel_state (ctx_idx)) {
	default:
	case APPLI_SM_STATE_DETACHED			:

		Appli_sm_from		(ctx_idx)	= from;				/* set 'from entity' */
		Appli_sm_dl_sapi	(ctx_idx)	= dl_sapi;			/* set data link lever sapi */
		Appli_sm_dl_ces		(ctx_idx)	= dl_ces;			/* reset data link lever connection end point */
		Appli_sm_dl_lli		(ctx_idx)	= dl_lli;			/* reset data link lever logical link id */
		Appli_sm_outgoing	(ctx_idx)	= outgoing;			/* reset data link lever outgoing call flag */

		p_data	= prepare_sending_message (DL_ASS_SIZE, P_NIL);
		Memset_far ((char FAR *)p_data, 0, DL_ASS_SIZE);		/* reset all fields in terminal set parmameters primitive */
		S_msg_data_size 	= DL_ASS_SIZE;					/* set message data size */

		S_msg_from 			= from;							/* from entity */
		S_msg_to   			= ENT_SM;						/* to X25 management entity */
		S_msg_code 			= SM_DL_ATTACH_SAPI_IN;			/* X25 management data link sapi attach request */
		S_msg_nai  			= nai;							/* network access id */
		S_msg_sapi 			= SAPI_NIL;						/* network access id */
		S_msg_conn_id		= ADD_NIL;						/* not used */

		Dl_ass_role			= outgoing ? DL_DTE : DL_DCE;	/* DTE or DCE role */
		Dl_ass_sapi			= dl_sapi;						/* data link sapi */
		Dl_ass_ces			= dl_ces;						/* not used */
		Dl_ass_lli			= dl_lli;						/* entity originator */
		Dl_ass_from			= from;							/* entity originator */


		/* Specify list of physical channels, if necessary */

		for (i = Min (V120_ph_ch_nb, DL_MLP_MX_PH_CHANNEL) - 1; i >= 0; --i) {
			Dl_ass_mlp_ph_nai(i)	= V120_ph_ch_nai (i);
			Dl_ass_mlp_ph_sapi(i)	= V120_ph_ch_sapi (i);
			Dl_ass_mlp_ph_chani(i)	= V120_ph_ch_chani (i);
		}
		Dl_ass_chani	= V120_ph_ch_chani (0);		/* channel id */

		Send_message (p_snd_msg);
		p_snd_msg	= P_NIL;

		Appli_sm_channel_state (ctx_idx) = APPLI_SM_STATE_BEING_ATTACHED;	/* DL_SAP is being attached to channel */
		ret_code = STOP;									/* waiting for dl sapi attached confirmation */
		break;

	case APPLI_SM_STATE_ATTACHED:
	case APPLI_SM_STATE_BEING_ATTACHED:

		if ((from		== Appli_sm_from	(ctx_idx))	&&
			(dl_sapi	== Appli_sm_dl_sapi	(ctx_idx)))	{
			if (Appli_sm_channel_state (ctx_idx) == APPLI_SM_STATE_BEING_ATTACHED) {
				ret_code = STOP;							/* dl_sapi is being attached, wait */
			}
			else {
				ret_code = CONTINUE;						/* dl_sapi is attached, go on */
			}
		}
		else {
			appli_sm_error_cause	= APPLI_SM_ERR_DATA_LINK_BUSY;
			ret_code				= NOK;					/* Can't distribute a data link for two entity at the same time */
		}
		break;

	case APPLI_SM_STATE_BEING_DETACHED	:
		ret_code				= NOK;
		appli_sm_error_cause	= APPLI_SM_ERR_STATE_NOT_RESPECT;
		break;
	}
	return (ret_code);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: appli_sm_dl_sapi_detach_rq

Usage		: uchar appli_sm_dl_sapi_detach_rq (
						nai_t		nai,
						add_t		chani,
						struct v120_ph_ch_list FAR *p_ph_ch_list)
				nai				: network access id.
				chani			: first channel id
				p_ph_ch_list	: address of a list of physical channels,

Description : implements the sending of message to SM entity
			  requesting the release of data link being attached channel.

Return value : CONTINUE, STOP or NOK

*--------------------------------------------------------------------------*/

uchar appli_sm_dl_sapi_detach_rq (nai, chani, p_ph_ch_list)
nai_t						nai;
add_t						chani;
struct v120_ph_ch_list FAR *p_ph_ch_list;
{
	uchar					ret_code;		/* return code */
	ushort					ctx_idx;		/* context index */
	uchar FAR				*p_data;
	short					i;

	if (chani == ADD_NIL) {
		return (CONTINUE);
	}

	if ((ctx_idx = appli_sm_ctx_access_chani (nai, chani)) ==
		APPLI_SM_CTX_NIL) {
		appli_sm_error_cause	= APPLI_SM_ERR_CTX_ACCESS;
		return (NOK);
	}

	switch (Appli_sm_channel_state (ctx_idx)) {

	case APPLI_SM_STATE_ATTACHED:
	case APPLI_SM_STATE_BEING_ATTACHED:

		p_data	= prepare_sending_message (DL_ASS_SIZE, P_NIL);
		Memset_far ((char FAR *)p_data, 0, DL_ASS_SIZE);
		S_msg_data_size 	= DL_ASS_SIZE;
		S_msg_from 			= Appli_sm_from (ctx_idx);
		S_msg_to   			= ENT_SM;
		S_msg_code 			= SM_DL_DETACH_SAPI_IN;
		S_msg_nai  			= Appli_sm_nai (ctx_idx);							/* network access id */
		S_msg_sapi 			= SAPI_NIL;
		S_msg_conn_id		= ADD_NIL;

		Dl_ass_role			= Appli_sm_outgoing (ctx_idx) ? DL_DTE : DL_DCE;
		Dl_ass_sapi			= Appli_sm_dl_sapi (ctx_idx);
		Dl_ass_ces			= Appli_sm_dl_ces (ctx_idx);
		Dl_ass_lli			= Appli_sm_dl_lli (ctx_idx);
		Dl_ass_from			= Appli_sm_from (ctx_idx);

		/* Specify list of physical channels, if necessary */

		for (i = Min (V120_ph_ch_nb, DL_MLP_MX_PH_CHANNEL) - 1; i >= 0; --i) {
			Dl_ass_mlp_ph_nai(i)	= V120_ph_ch_nai (i);
			Dl_ass_mlp_ph_sapi(i)	= V120_ph_ch_sapi (i);
			Dl_ass_mlp_ph_chani(i)	= V120_ph_ch_chani (i);
		}
		Dl_ass_chani	= V120_ph_ch_chani (0);		/* channel id */

		Send_message (p_snd_msg);
		p_snd_msg	= P_NIL;

		Appli_sm_channel_state (ctx_idx) = 	APPLI_SM_STATE_BEING_DETACHED;

		ret_code = STOP;
		break;

	case APPLI_SM_STATE_BEING_DETACHED:
		ret_code = STOP;
		break;

	case APPLI_SM_STATE_DETACHED:
		ret_code = CONTINUE;
		break;

	} /* end switch */

	return (ret_code);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: appli_sm_dl_sapi_co

Usage		: uchar appli_sm_dl_sapi_co (	nai_t		nai,
											uchar FAR * p_data)
In			:
	nai		: network access id.
	p_data	: input address of (message or buffer) data zone.

Description : implements the processing of data link sapi confirmation.

Return value : ret code OK or NOK

*--------------------------------------------------------------------------*/

uchar appli_sm_dl_sapi_co (nai, p_data)
nai_t				nai;				/* network access id */
uchar FAR *			p_data;				/* message or buffer data zone address */
{
	ushort			ctx_idx;			/* context index */
	uchar			channel_state;		/* DL_SAP attached to channel state */
	uchar			ret_code;

	if ((ctx_idx = appli_sm_ctx_access_dl_sapi_ces (nai, Dl_ass_sapi, Dl_ass_ces)) !=
		APPLI_SM_CTX_NIL) {

		if (Dl_ass_ret_code == OK) {

			switch (Appli_sm_channel_state (ctx_idx)) {

			case APPLI_SM_STATE_BEING_DETACHED	:
			case APPLI_SM_STATE_ATTACHED			:				/* DL_SAP detach indication */
				channel_state = APPLI_SM_STATE_DETACHED;
				/*
				 *	Free the context
				 */

				Appli_sm_nai (ctx_idx)		= NAI_NIL;
				Appli_sm_chani (ctx_idx)	= ADD_NIL;
				Appli_sm_dl_sapi (ctx_idx)	= SAPI_NIL;
				Appli_sm_dl_ces (ctx_idx)	= ADD_NIL;
				break;

			case APPLI_SM_STATE_BEING_ATTACHED	:

				channel_state = APPLI_SM_STATE_ATTACHED;

				if (Appli_sm_line_status (ctx_idx) == ON) {			/* line is still connected */
					channel_state = APPLI_SM_STATE_ATTACHED;
				}
				else {

					if (appli_sm_dl_sapi_detach_rq (
							Appli_sm_nai (ctx_idx),
							Appli_sm_chani (ctx_idx),
							&Vs_term_ph_ch_list) == STOP) {
						channel_state = APPLI_SM_STATE_BEING_DETACHED;
					}
					else {
						Vs_assert (0, VS_TRAP_ATTACH_COLLISION, "app_sm/2");
					}
				}

				break;

			case APPLI_SM_STATE_DETACHED:
				Vs_assert (0, VS_TRAP_ATTACH_STATE, "app_sm/3");
				break;
			}
			Appli_sm_channel_state	(ctx_idx)	= channel_state;
			ret_code							= OK;

		}
		else {
			ret_code				= NOK;
			appli_sm_error_cause	= APPLI_SM_ERR_REFUSED_BY_SM;

			Vs_assert (0, VS_TRAP_ATTACH_REJECTED, "app_sm/4");
		}

	} else {
		ret_code				= NOK;
		appli_sm_error_cause	= APPLI_SM_ERR_CTX_ACCESS;
	}

	return (ret_code);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: appli_sm_dl_sapi_state_read

Usage		: uchar appli_sm_dl_sapi_state_read (	nai_t	nai,
													add_t	chan_id);
In			:
	nai		: network access id.
	chan_id	: physical channel id.

Description : implements the reading of DL_SAP attach to channel state

Return value : current state

*--------------------------------------------------------------------------*/

uchar appli_sm_dl_sapi_state_read (nai, chani)
nai_t				nai;			/* network access id */
add_t				chani;			/* physical channel id */
{
	ushort			ctx_idx;		/* context index */
	uchar			ret_state;


	if ((ctx_idx = appli_sm_ctx_access_chani (nai, chani)) !=
		APPLI_SM_CTX_NIL) {										/* accede to context */
		ret_state = Appli_sm_channel_state (ctx_idx);				/* return current state */
	}
	else {
		ret_state				= APPLI_SM_STATE_UNDEFINED;		/* return undefined state */
		appli_sm_error_cause	= APPLI_SM_ERR_CTX_ACCESS;
	}

	return (ret_state);
}

/* END OF FILE */
