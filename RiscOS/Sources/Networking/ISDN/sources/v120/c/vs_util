
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_util.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	- prepare_sending_message	VS centralized error processing routine
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if VS_TERMINAL_ENTITY == ENT_VS

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name : prepare_sending_message

Usage :
	uchar FAR *prepare_sending_message (ushort data_size, struct message FAR
										*p_old_msg);

In :
	data_size : size of data to be stored in message or buffer.
	p_old_msg : old received message address.

Description :

	if data_size is more than place available in message, this routine will
		allocate a buffer, link it to message, declare data size, and return
		address where to store data.

	if p_old_msg != P_NIL, the old received message which address is stored
		in p_old_msg will be reused, buffer will be allocated, reused or freed.


Return value : 	return (void) address where to store data if allright;
				P_NIL if can't allocate message or buffer.

common constants and declarations : services.h

common objects :
				Buffer_xxx	(struct buffer)
				S_msg_xxx	(struct message)

*--------------------------------------------------------------------------*/


uchar FAR *prepare_sending_message (data_size, p_old_msg)
	ushort				data_size;									/* data size */
	struct message FAR	*p_old_msg;									/* old message address */
{

#	if VS_ASSERT == ON
		if (p_snd_msg != P_NIL) {									/* check for security */
			Vs_assert (p_snd_msg != p_old_msg,
					   VS_TRAP_ASSERT_11,
					   "V.120:prepare_sending_message/p_snd_msg");
		}
#	endif

	if (p_old_msg == P_NIL) {
		S_msg_alloc;												/* allocate a new message */
	} else {
		p_snd_msg = p_old_msg;										/* use old received message to send */
		S_msg_header_init;											/* initialization of message 's header */
	}

	if (Message_data_lgth >= data_size) {							/* data can be stored in message */
		S_msg_data_size = data_size;

		if (S_msg_p_buffer != P_NIL) {								/* a buffer has been linked to this message */
			Free_buffer (S_msg_p_buffer);							/* free the buffer */
			S_msg_p_buffer = P_NIL;
		}

		return (S_msg_a_first_data);
	}

	if ((p_buffer = S_msg_p_buffer) == P_NIL) {						/* no buffer is linked to message */
		S_msg_p_buffer = Buffer_alloc;								/* buffer allocation */
	} else {
		Buffer_header_init;											/* buffer 's header initialization */
	}

	Buffer_link_count	= 1;										/* link buffer to message */
	Buffer_data_size	= data_size;								/* data size declaration */
	S_msg_frag_size		= Buffer_data_size;							/* set message fragment size */

	return (Buffer_a_first_data);

}

#endif /* VS_TERMINAL_ENTITY == ENT_VS */

/* END OF FILE */
