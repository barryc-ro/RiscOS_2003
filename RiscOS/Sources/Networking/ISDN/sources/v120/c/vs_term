
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_term.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	vs_term_data_receive			- receive data from terminal and send it
 *									  to network
 *	vs_term_recall					- VS recall using a character
 *	vs_term_state_reset				- reset terminal state
 *	vs_term_state_set				- set (change) terminal state
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "dl_int.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_term_data_receive

Usage		: void vs_term_data_receive (struct message FAR *p_msg)

Description : implements the receiving of data from terminal to network.

Return value : none

*--------------------------------------------------------------------------*/

void vs_term_data_receive (p_msg)
struct message	FAR	*p_msg;
{
	struct buffer	FAR *p_buffer;

	Vs_assert (p_msg != P_NIL, VS_TRAP_P_MSG, "vs_term_data_receive/p_msg");
	Vs_assert ((p_snd_msg == P_NIL), VS_TRAP_P_SND_MSG, "vs_term_data_receive/p_snd_msg");

	p_buffer	= L_msg_p_buffer;

	if ((p_buffer != P_NIL) && (Buffer_data_size == 0)) {
		Free_msg (p_msg);
		return;
	}

	Vs_assert (((p_buffer == P_NIL) ||
				(Buffer_data_offset >= BUFFER_HEADER_SIZE + Vs_min_dl_hole_size)),
				VS_TRAP_HOLE, "vs_term_data_receive/hole");

	vs_info_header_format (p_msg, p_buffer, ON, OFF);	/* format V.120 header */

	L_msg_sapi	= ON;						/* these are user data */

		/* queue data */

	Fifo_put_msg (&Vs_conn_to_net_fifo_first, &Vs_conn_to_net_fifo_last,
				  p_msg);
	++Vs_conn_to_net_in_fifo;
	p_msg	= P_NIL;

	vs_network_queued_frames_transmit ();	/* transmit data to network */

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_term_state_reset

Usage		: uchar vs_term_state_reset (void);

Description : reset VS terminal state

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_term_state_reset ()
{
	if (Vs_term_p_conn != P_NIL) {

		switch (Vs_conn_state_read ()) {

		case VS_CONN_STATE_DISCONNECTED		:						/* VS is disconnected */
			Vs_term_state_set (VS_TERM_STATE_WAIT_FOR_COMMAND);
																	/* switch terminal to 'wait for command' state (state 5 CCITT) */
			break;

		case VS_CONN_STATE_CONNECTED		:						/* VS is connected */
			Vs_term_state_set (VS_TERM_STATE_DATA_TRANSFER);		/* switch terminal to 'data transfer' state (state 9 CCITT) */
			break;
		}

	} else {
		Vs_term_state_set (VS_TERM_STATE_WAIT_FOR_COMMAND);
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_term_state_set

Usage		: uchar vs_term_state_set (uchar term_state);

Description : set VS terminal state

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_term_state_set (term_state)
	uchar			term_state;										/* terminal state */
{
	uchar			state_changed;									/* state is changed or not */

	if (Vs_term_state == term_state) {
		state_changed = OFF;
	} else {
		state_changed = ON;
		Vs_term_state_modify (term_state);
	}

	switch (term_state) {

	case VS_TERM_STATE_WAIT_FOR_COMMAND	:							/* terminal in 'wait for command state' */

		if (state_changed) {
			vs_term_it_mode_set (VS_TERM_IT_MODE_COMMAND);			/* set interrupt terminal to 'COMMAND' mode */
		}

		break;

	case VS_TERM_STATE_DATA_TRANSFER		:						/* terminal in data transfer state */

		if (state_changed) {
			vs_term_it_mode_set (VS_TERM_IT_MODE_DATA);				/* set interrupt terminal to 'DATA' mode */
		}

		break;

	}

	Vs_service_indication = FALSE;									/* reset flag */

	return (OK);
}


/* END OF FILE */
