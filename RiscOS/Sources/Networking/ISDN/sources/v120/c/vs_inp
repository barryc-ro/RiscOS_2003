
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_inp.c
 *
 *		Asynchronous V.120 input interface : entry point routines called by
 *		application or any other entity.
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *	vs_rcv					- VS unit message receive.
 *	vs_process				- VS main processing routine.
 *	vs_start				- start V.120, old style
 *	v120_init_rq			- start V.120, new style
 *	vs_stop					- stop VS unit routine.
 *	vs_var_init 			- initialize VS internal variables
 *	vs_parameter_extern		- set VS parameters by external unit
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#define	VS_INPUT_INTERFACE

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#if VS_TERMINAL_ENTITY == ENT_DTE_INT
#	include "dte_int.h"
#endif

#include "dl_int.h"

/*----------------------------------------------------------------------------
						PRIMITIVE CODES CONVERSION
----------------------------------------------------------------------------*/

#if VS_TERMINAL_ENTITY == ENT_VS
#	define	Vs_term_rcv(vs_code,dte_code)		(vs_code)
#endif

#if VS_TERMINAL_ENTITY == ENT_DTE_INT
#	define	Vs_term_rcv(vs_code, dte_code)		(dte_code)
#endif

#define		VS_TERMINAL_DA_RQ					Vs_term_rcv (VS_DA_RQ,				DTE_INT_DA_RQ)
#define		VS_TERMINAL_DA_RS					Vs_term_rcv (NIL,					DTE_INT_DA_RS)
#define		VS_TERMINAL_SIGNAL_RQ				Vs_term_rcv (VS_SIGNAL_RQ,			DTE_INT_SIGNAL_RQ)
#define		VS_TERMINAL_CLEAR_BUSY_RQ			Vs_term_rcv (VS_CLEAR_BUSY_RQ,		DTE_INT_CLEAR_BUSY_RQ)
#define		VS_TERMINAL_BUSY_RQ					Vs_term_rcv (VS_BUSY_RQ,			DTE_INT_BUSY_RQ)

#if VS_TERMINAL_ENTITY == ENT_VS
#	define	VS_TERMINAL_STOP_RQ					Vs_term_rcv (VS_STOP_RQ,		NIL)
#	define	VS_TERMINAL_INT_SYNC_RQ				Vs_term_rcv (VS_INT_SYNC_RQ,	NIL)
#endif


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_rcv

Usage		: vs_ev_id_t vs_rcv ()

Description : receive message routine.

Return value : event id.

*--------------------------------------------------------------------------*/

vs_ev_id_t vs_rcv ()
{
	vs_ev_id_t			event_id;		/* event id */
	ushort				error;			/* error */
	uchar				go_on;
	uchar FAR *			p_data;

	event_id	= VS_EV_NIL;
	error		= VS_ERR_NONE;
	go_on		= FALSE;
	p_data 		= R_a_data;

#	if VS_ASSERT == ON
		Vs_p_terminal	= P_NIL;
#	endif


		/* Primitives under temporal constraint
		---------------------------------------*/

	switch (R_msg_from) {

	case VS_TERMINAL_IT_ENTITY	:									/* IT terminal interface entity */

		switch (R_msg_code) {

		case VS_TERMINAL_DA_RQ						:				/* terminal data request  */
			event_id = VS_EV_TERMINAL_DA_RQ;
			break;

		case VS_TERMINAL_CLEAR_BUSY_RQ:	/* flow control released by the terminal */
			event_id = VS_EV_TERMINAL_CLEAR_BUSY_RQ;
			break;

		case VS_TERMINAL_BUSY_RQ:		/* flow control requested by the terminal */
			event_id = VS_EV_TERMINAL_BUSY_RQ;
			break;

#if VS_TERMINAL_ENTITY == ENT_VS

		case VS_TERMINAL_INT_SYNC_RQ:	/* interface synchronization request */
			event_id = VS_EV_TERMINAL_INT_SYNC_RQ;
			break;

#endif

#if VS_TERMINAL_ENTITY == ENT_DTE_INT

		case VS_TERMINAL_SIGNAL_RQ:		/* terminal signal request  */

			switch (Dte_int_signal_rq_signal_name) {

			case DI_SIG_BUSY:		/* flow control requested by the terminal */
				event_id = VS_EV_TERMINAL_BUSY_RQ;
				break;

			case DI_SIG_CLEAR_BUSY:	/* flow control requested by the terminal */
				event_id = VS_EV_TERMINAL_CLEAR_BUSY_RQ;
				break;

			case DI_SIG_BREAK:	/* break requested by the terminal */
				event_id = VS_EV_TERMINAL_BREAK_RQ;
				break;

			default									:
				go_on = TRUE;
			}
			break;
#endif

		default:
			go_on = TRUE;
		}

		if (go_on == FALSE) {
			Vs_terminal_access (R_msg_nai);		/* accesses to referenced terminal */
			break;
		}
		break;

	case ENT_DL:    		/* MLP */
	case ENT_DL_V120:

		switch (R_msg_code) {
		case DL_DA_IN:			/* network acknowledged data indication  */
		case DL_U_DA_IN:		/* network unacknowledged data indication  */
			event_id = VS_EV_NETWORK_DA_IN;
			break;

		case DL_CLEAR_BUSY_IN:	/* network flow control indication */
			event_id = VS_EV_NETWORK_CLEAR_BUSY_IN;
			break;

		case DL_BUSY_IN:		/* network flow control indication */
			event_id = VS_EV_NETWORK_BUSY_IN;
			break;

		case DL_INT_SYNC_CO:	/* network interface synchonisation confirmationn */
			event_id = VS_EV_NETWORK_INT_SYNC_CO;
			break;

		case DL_EST_IN:			/* DL establish indication */
			event_id = VS_EV_NETWORK_EST_IN;
			break;

		case DL_EST_CO:			/* DL establish confirmation */
			event_id = VS_EV_NETWORK_EST_CO;
			break;

#		if VS_V42B_NEGOTIATION == ON
		case V120_SETPARM_CO:		/* DL negotiation confirmation */
			event_id = VS_EV_NETWORK_SETPARM_CO;
			break;

		case V120_SETPARM_IN:		/* DL negotiation indication */
			event_id = VS_EV_NETWORK_SETPARM_IN;
			break;
#		endif

		case DL_REL_IN:				/* DL release indication */
			event_id = VS_EV_NETWORK_REL_IN;
			break;

		case DL_REL_CO:				/* DL release confirmation */
			event_id = VS_EV_NETWORK_REL_CO;
			break;

		default:
			go_on = TRUE;
			break;
		}
		if (go_on == FALSE) {
			if (vs_nsc_access (R_msg_nai, R_msg_sapi, R_msg_conn_id) != OK) {
				goto VS_EXIT;
			}
		}
		break;

	default						:
		go_on = TRUE;
	}

	if (go_on) {

			/* Primitives not under temporal constraint
			-------------------------------------------*/

		switch (R_msg_from) {

		case ENT_DL:
		case ENT_DL_V120:

			switch (R_msg_code) {

			default:
				error = VS_ERR_PRIMITIVE_UNKNOWN;					/* unknown primitive */
			}

			switch (event_id) {
			case VS_EV_NIL							:				/* unknown event */
				break;

			default:
				if (vs_nsc_access (R_msg_nai, R_msg_sapi, R_msg_conn_id) != OK) {
					goto VS_EXIT;
				}
			}
			break;

		case ENT_SM					:								/* system manager entity */

			switch (R_msg_code) {
			default:					/* unknown primitive : ignore */
				break;

			case SM_CLEAR_BUSY_RQ:		/* system manager no more busy  */
				event_id = VS_EV_SM_CLEAR_BUSY_RQ;
				break;

			case SM_BUSY_RQ:			/* system manager busy  */
				event_id = VS_EV_SM_BUSY_RQ;
				break;

			case SM_DL_SAPI_RS:
				event_id = VS_EV_SM_DL_SAPI_RS;						/* DL sapi response */
				break;

			case SM_DL_DETACH_SAPI_RQ:
				event_id = VS_EV_SM_DL_DETACH_SAPI_RQ;				/* DL sapi detached request */
				break;

			case SM_SET_CONFIG_RQ:		/* system manager set configuration  */
				event_id = VS_EV_SM_SET_CONFIG_RQ;
				break;

#			if VS_RESET_CONFIG == ON

			case SM_RESET_CONFIG_RQ:	/* system manager reset configuration  */
				event_id = VS_EV_SM_RESET_CONFIG_RQ;
				break;

#			endif

			case SM_STOP_RQ:			/* system manager desactivates VS  */
				event_id = VS_EV_SM_STOP_RQ;
				break;
			}

			switch (event_id) {
			default:
				break;
			case VS_EV_SM_DL_SAPI_RS:
			case VS_EV_SM_DL_DETACH_SAPI_RQ:
				if (Vs_network_nai != R_msg_nai) {
					Vs_network_access (R_msg_nai);
				}
				if (vs_terminal_access_from_dl_sapi_ces (Dl_ass_sapi, Dl_ass_ces)
					 == NAI_NIL) {
					vs_error_process (VS_ERR_TERMINAL_REFERENCE_2);
					goto VS_EXIT;
				}
				break;
			}
			break;

		case ENT_TI					:								/* timer entity */

			switch (R_msg_code) {
			default:				/* unrecognized primitive: ignore */
				break;

			case TI_V120_CONN_ESTABLISHMENT:
				event_id = VS_EV_TI_CONN_ESTABLISHMENT;
				break;

#			if VS_V42B_NEGOTIATION == ON
			case TI_V120_RESP_NEGOTIATION:
				event_id = VS_EV_TI_RESP_NEGOTIATION;
				break;
#			endif
			}

			switch (event_id) {
			case VS_EV_NIL							:				/* unknown event */
				break;

			default									:
				Vs_terminal_access (R_msg_nai);		/* accesses to referenced terminal */
				break;
			}

			break;

		case VS_TERMINAL_IT_ENTITY	:								/* IT terminal interface entity */

			switch (R_msg_code) {

#	if VS_TERMINAL_ENTITY == ENT_VS

			case VS_TERMINAL_SIGNAL_RQ				:				/* terminal signal request  */
				event_id = VS_EV_TERMINAL_BREAK_RQ;
				break;

			case VS_INIT_RQ:				/* start VS unit request */
				event_id = VS_EV_INIT_RQ;
				break;

			case VS_TERMINAL_STOP_RQ:								/* stop VS unit request */
				event_id = VS_EV_STOP_RQ;
				break;
#	endif


#	if VS_TERMINAL_ENTITY == ENT_DTE_INT

			case VS_TERMINAL_DA_RS					:				/* terminal data response */
				event_id = VS_EV_TERMINAL_DA_RS;
				break;

			case VS_TERMINAL_SIGNAL_RQ				:				/* terminal signal request  */
				switch (Dte_int_signal_rq_signal_name) {
				default:
					break;
				}
				break;
#	endif

			default									:
				error = VS_ERR_PRIMITIVE_UNKNOWN;					/* unknown primitive */
			}

			switch (event_id) {
			case VS_EV_NIL							:				/* unknown event */
				break;
			default									:
				Vs_terminal_access (R_msg_nai);		/* accesses to referenced terminal */
				break;
			}

			break;

		default:
			error = VS_ERR_ENTITY_UNKNOWN;							/* unknown entity */
		}
	}

	if (error != VS_ERR_NONE) {
		vs_error_process (error);
		goto VS_EXIT;
	}

	return (event_id);

VS_EXIT :
	return (VS_EV_NIL);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_process : message processing routine.


Usage		: uchar vs_process (vs_ev_id_t event_id,
								uchar FAR * p_data,
								ushort		data_size);
						- event_id	: event identifier
						- p_data	: address of primitive arguments
						- data_size	: size of the arguments

Description : 	main processing routine
				p_rcv_msg points at the received message.

Return value :
		STOP	: quit the VS with access information path disconnected.
		CONTINUE: disconnect the call
		other

*--------------------------------------------------------------------------*/

uchar vs_process (event_id, p_data, data_size)
vs_ev_id_t		event_id;
uchar FAR * 	p_data;
ushort			data_size;
{
	struct node FAR *p_node;			/* node structure pointer */
	uchar		     header_size;
	uchar			 ret_code;
	uchar			 go_on;

	go_on 				= FALSE;
	ret_code 			= OK;

	Vs_event_id			= event_id;									/* set VS event */
	Vs_data_size		= data_size;								/* set event data size */

	if (event_id == VS_EV_NETWORK_DA_IN) {					/* Network data indication */
		struct buffer FAR * p_buffer;						/* buffer pointer */

		header_size	= v120_data_analyze (p_data, data_size);

			/* suppress V.120 information state header */

		if ((p_buffer = R_msg_p_buffer) == P_NIL) {
			R_msg_data_offset	+= header_size;
			R_msg_data_size		-= header_size;
		} else {
			Buffer_data_offset	+= header_size;
			Buffer_data_size	-= header_size;
		}
	}

	switch (event_id) {												/* events under temporal constraint */

		/* Event generated by the DTE
		------------------------------*/

	case VS_EV_TERMINAL_DA_RQ				:						/* terminal data request */
	case VS_EV_TERMINAL_BUSY_RQ				:						/* terminal flow control request */
	case VS_EV_TERMINAL_CLEAR_BUSY_RQ		:						/* terminal flow control request */
	case VS_EV_TERMINAL_BREAK_RQ			:						/* terminal break request */
		Vs_ctrl_terminal ();										/* VS terminal event control routine */
		break;

#	if VS_TERMINAL_ENTITY == ENT_VS

	case VS_EV_TERMINAL_INT_SYNC_RQ:	/* interface synchronization request */

			/* Echo immediately VS_INT_SYNC_CO */

		R_msg_from	= VS_TERMINAL_ENTITY;
		R_msg_to	= VS_TERMINAL_IT_ENTITY;
		R_msg_code	= VS_INT_SYNC_CO;
		Send_message (p_rcv_msg);
		p_rcv_msg	= P_NIL;

		break;

#	endif

		/* Event generated by the Network
		---------------------------------*/

	case VS_EV_NETWORK_EST_IN:

		switch (vs_ctrl_network ()) {

		case OK:
			break;
		case STOP:			/* end of communication requested */
			ret_code = CONTINUE;
			break;
		default:
			goto VS_EXIT;
		}

		break;

	case VS_EV_NETWORK_EST_CO:
	case VS_EV_NETWORK_REL_IN:
	case VS_EV_NETWORK_REL_CO:
	case VS_EV_NETWORK_DA_IN:
	case VS_EV_NETWORK_BUSY_IN:
	case VS_EV_NETWORK_CLEAR_BUSY_IN:
	case VS_EV_NETWORK_INT_SYNC_CO:

#	if VS_V42B_NEGOTIATION == ON
	case VS_EV_NETWORK_SETPARM_CO:
	case VS_EV_NETWORK_SETPARM_IN:
#	endif
		if (vs_ctrl_network () != OK) {
			goto VS_EXIT;
		}
		break;

	default:
		go_on = TRUE;
	}

	if (go_on == TRUE) {

		switch (event_id) {											/* events not under temporal constraint */

		case VS_EV_TERMINAL_BREAK_RQ			:					/* terminal break request */
			Vs_ctrl_terminal ();									/* VS terminal event control routine */
			break;

		case VS_EV_TERMINAL_DA_RS				:					/* terminal data response */
			break;

#	if VS_TERMINAL_ENTITY == ENT_VS		/* { */

		case VS_EV_INIT_RQ:
			/*---------------------------------------------------------------
			 *	Terminal initialization request
			 *--------------------------------------------------------------*/
			/*
			 *	Signal line is active, allocate nai/chani context
			 */
			appli_sm_line_status_signal (Vs_init_nai,
										 Vs_init_chan_id,
										 ON);
			/*
			 *	Initialize operations on the terminal
			 */
			if (vs_start (Vs_term_id,
						  Vs_init_nai,
						  Vs_init_chan_id,
						  Vs_init_direction,
						  Vs_init_a_profile_id,
						  Vs_init_a_servprof_id,
						  p_data) != OK) {
				/*
				 *	error : echo immediately
				 */
				Vs_echo_init_co_nok (p_rcv_msg);
				p_rcv_msg	= P_NIL;
				goto VS_EXIT;
			}
			else {
				/*
				 *	save the VS_INIT_RQ message, for later echo
				 */
				Free_msg (Vs_term_p_init_stop_msg);		/* make sure no message is lost */
				Vs_term_p_init_stop_msg	= p_rcv_msg;
				p_rcv_msg				= P_NIL;
			}
			break;

		case VS_EV_STOP_RQ:
			/*---------------------------------------------------------------
			 *	Terminal stop request
			 *--------------------------------------------------------------*/
			Vs_timer_term_stop (VS_TI_CONN_ESTABLISHMENT_IX);	/* stop connection establishment watchdog timer */
			/*
			 *	Signal line is not active.
			 */
			appli_sm_line_status_signal (Vs_term_stop_rq_nai,
										 Vs_term_stop_rq_chan_id,
										 OFF);
			/*
			 *	Echo VS_INIT_CO (NOK) if a VS_INIT_RQ is pending
			 */
			if (Vs_term_p_init_stop_msg != P_NIL) {
				struct message FAR	*p_msg;

				p_msg	= Vs_term_p_init_stop_msg;
				switch (L_msg_code) {
				default:
					Free_msg (Vs_term_p_init_stop_msg);		/* make sure no message is lost */
					break;

				case VS_INIT_RQ:
					Vs_echo_init_co_nok (Vs_term_p_init_stop_msg);
					break;
				}
				Vs_term_p_init_stop_msg	= P_NIL;
			}

			ret_code	= vs_stop (Vs_term_id, Vs_term_stop_rq_cause);

			switch (ret_code) {
			case STOP:
				/* V.120 is stopped */
				Vs_echo_confirm (p_rcv_msg, VS_STOP_CO, OK, 0, 0);
				p_rcv_msg	= P_NIL;
				break;

			default:
			case CONTINUE:
			case OK:
				/* OK, V.120 stop cannot be performed now, wait */
				/* Save the VS_STOP_RQ message */
				Vs_term_p_init_stop_msg	= p_rcv_msg;
				p_rcv_msg				= P_NIL;
				break;

			case NOK:
				/* Error detected */
				Vs_echo_confirm (p_rcv_msg, VS_STOP_CO, NOK, 0, 0);
				p_rcv_msg	= P_NIL;
				break;
			}

			if (ret_code != OK) {
				goto VS_EXIT;
			}
			break;

#	endif	/* VS_TERMINAL_ENTITY == ENT_VS */	/* } */


		case VS_EV_SM_DL_SAPI_RS:		/* DL sap attached confirmation */
			/*---------------------------------------------------------------
			 *	Answer to an attach/detach initiated by us
			 *--------------------------------------------------------------*/
			switch (Vs_dl_sapi_attach_state_read (Vs_network_nai, Vs_term_first_chan_id)) {

			case VS_DL_SAP_BEING_ATTACHED:
				/*
				 *	Answer to an attach initiated by us
				 */
				if (appli_sm_dl_sapi_co (Vs_network_nai, p_data) == NOK) {
					vs_error_process (VS_ERR_DL_SAPI_ATTACH_FAILED);
					goto VS_EXIT;
				}

				if ((Vs_term_p_conn != P_NIL) &&
					(Vs_term_call_direction == VS_CALL_OUTGOING)) {

					/*
					 *	DL sap/ces is attached to channel, try to establish
					 *	data link.
					 */
					vs_dl_est_rq ();
				}
				break;

			case VS_DL_SAP_BEING_DETACHED:
				/*
				 *	Answer to a detach initiated by us
				 */
				if (appli_sm_dl_sapi_co (Vs_network_nai, p_data) == NOK) {
					vs_error_process (VS_ERR_DL_SAPI_DETACH_FAILED);
					goto VS_EXIT;
				}

				if (Vs_term_stop_requested) {
#					if VS_TERMINAL_ENTITY == ENT_VS
						/*
						 *	Echo the VS_STOP_CO message, if present
						 */
						Vs_echo_confirm (Vs_term_p_init_stop_msg, VS_STOP_CO,
										 OK, 0, 0);
						Vs_term_p_init_stop_msg	= P_NIL;
#					endif

					Vs_acc_info_path_disc ();	/* disconnect access information path */
				}
				else {

					if (Vs_term_channel_reassign == ON) {
						Vs_term_channel_reassign = OFF;					/* reset channel reassign flag */

						if (appli_sm_dl_sapi_attach_rq (
							VS_TERMINAL_ENTITY,
							Vs_network_nai,					/* network access id */
							Vs_sapi,						/* data link service access id */
							Vs_dl_ces,						/* data link connection id */
							Vs_conn_lli,					/* data link logical link id */
							(Vs_term_call_direction == VS_CALL_INCOMING) ?
								FALSE : TRUE,
							&Vs_term_ph_ch_list) == NOK) {
							vs_error_process (VS_ERR_DL_SAPI_ATTACH_FAILED);
							goto VS_EXIT;
						}
					}
				}
				break;


			case VS_DL_SAP_DETACHED		:	/* Dl sap is detached */
				/*
				 *	Detach collision
				 */
				break;

			case VS_DL_SAP_ATTACHED		:	/* Dl sap is attached */
			default:
#				if VS_ASSERT == ON
					vs_error_process (VS_ERR_DL_SAPI_DETACH_FAILED);
#				endif
				break;
			}

			break;


		case VS_EV_SM_DL_DETACH_SAPI_RQ		:					/* DL sapi detached indication */
			/*---------------------------------------------------------------
			 *	Spontaneous detach signalled
			 *--------------------------------------------------------------*/
			switch (Vs_dl_sapi_attach_state_read (Vs_network_nai, Vs_term_first_chan_id)) {

			case VS_DL_SAP_ATTACHED:
			case VS_DL_SAP_BEING_ATTACHED:

				if (appli_sm_dl_sapi_co (Vs_network_nai, p_data) == NOK) {
					vs_error_process (VS_ERR_DL_SAPI_DETACH_FAILED);
					goto VS_EXIT;
				}

					/* dl_sapi detached indication processing */

				if (appli_sm_dl_sapi_attach_rq (
						VS_TERMINAL_ENTITY,
						Vs_network_nai,								/* network access id */
						Vs_sapi,									/* data link service access id */
						Vs_dl_ces,									/* data link connection id */
						Vs_conn_lli,								/* data link logical link id */
						(Vs_term_call_direction == VS_CALL_INCOMING) ?
							FALSE : TRUE,
						&Vs_term_ph_ch_list) == NOK) {
					vs_error_process (VS_ERR_DL_SAPI_DETACH_FAILED);
					goto VS_EXIT;
				}

				break;

			case VS_DL_SAP_BEING_DETACHED	:
				/*
				 *	Detach collision
				 */
				if (appli_sm_dl_sapi_co (Vs_network_nai, p_data) == NOK) {
					vs_error_process (VS_ERR_DL_SAPI_DETACH_FAILED);
					goto VS_EXIT;
				}													/* dl_sapi detached indication processing */

				if (Vs_term_stop_requested) {
#					if VS_TERMINAL_ENTITY == ENT_VS
						/*
						 *	echo the VS_STOP_CO message, if present
						 */
						Vs_echo_confirm (Vs_term_p_init_stop_msg, VS_STOP_CO,
										 OK, 0, 0);
						Vs_term_p_init_stop_msg	= P_NIL;
#					endif

					Vs_acc_info_path_disc ();						/* disconnect acess information path if parameter 6 is set to 'silence mode' */
				}

				break;

			default:
			case VS_DL_SAP_DETACHED		:
#				if VS_ASSERT == ON
					vs_error_process (VS_ERR_DL_SAPI_DETACH_FAILED);
#				endif
				break;

			}

			break;

			/* Event generated by the timer entity
			---------------------------------------*/

			/*--------------------------*/
		case VS_EV_TI_CONN_ESTABLISHMENT:
			/*--------------------------*/

			ret_code = vs_ctrl_network ();

#			if VS_TERMINAL_ENTITY == ENT_VS		/* { */
				if (Vs_term_p_init_stop_msg != P_NIL) {
					struct message FAR	*p_msg;

					p_msg	= Vs_term_p_init_stop_msg;
					switch (L_msg_code) {
					default:
						break;
					case VS_INIT_RQ:
						Vs_echo_init_co_nok (Vs_term_p_init_stop_msg);
						break;
					}
					Vs_term_p_init_stop_msg	= P_NIL;
				}
#			endif	/* VS_TERMINAL_ENTITY == ENT_VS */	/* } */


			if (ret_code != OK) {
				goto VS_EXIT;
			}
			break;


#		if VS_V42B_NEGOTIATION == ON
			/*------------------------*/
		case VS_EV_TI_RESP_NEGOTIATION:
			/*------------------------*/
			if (vs_ctrl_network () != OK) {
				goto VS_EXIT;
			}
			break;
#		endif


			/* Events generated by the System Manager
			-----------------------------------------*/

		case VS_EV_SM_CLEAR_BUSY_RQ			:

			p_node = Vs_a_terminal_node;

			do {
				Vs_next_terminal_access ();						/* access to next terminal context */
				vs_term_queued_data_transmit ();

			} while (Next_node != P_NIL);

			break;

		case VS_EV_SM_SET_CONFIG_RQ			:					/* System Manager configuration */
			if (vs_set_config (p_data) != OK) {
				goto VS_EXIT;
			}
			break;

		case VS_EV_SM_STOP_RQ					:					/* VS desactivation requested by the system manager */
			ret_code	= vs_desactivate ();
#			if VS_TERMINAL_ENTITY == ENT_VS
				Vs_echo_confirm (p_rcv_msg, SM_STOP_CO, ret_code, 0, 0);
				p_rcv_msg	= P_NIL;
#			endif
			break;

		case VS_EV_SM_BUSY_RQ					:					/* system manager busy request */
			break;

#		if VS_RESET_CONFIG == ON

		case VS_EV_SM_RESET_CONFIG_RQ:	/* SM reset configuration */

			ret_code	= vs_reset_config ();

#			if VS_TERMINAL_ENTITY == ENT_VS
				Vs_echo_confirm (p_rcv_msg, SM_RESET_CONFIG_CO, ret_code, 0, 0);
				p_rcv_msg	= P_NIL;
#			endif

			break;

#		endif

		default									:
			vs_error_process (VS_ERR_EVENT_UNKNOWN);				/* event is unknown */
			goto VS_EXIT;
		}

	}

	Vs_event_id		= VS_EV_NIL;

	return (ret_code);

VS_EXIT :

	Vs_event_id		= VS_EV_NIL;

	if ((event_id == VS_EV_SM_SET_CONFIG_RQ) || (Vs_term_status == ON)) {
		return (NOK);
	} else {
		return (STOP);
	}

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_start	: start V.120, old style

Usage		: uchar vs_start (	vs_term_id_t	term_id,
								nai_t			nai,
								add_t			chan_id,
								uchar			direction,
								char *			a_profile_id,
								char *			a_servprof_id,
								uchar FAR *		p_more);
In			:
		term_id 		: terminal identifier.
		nai				: network access id.
		chan_id			: channel id.
		call_direction	: is an outgoing call (TRUE/FALSE).
		a_profile_id	: VS X3 parameter profile identifier.
		a_servprof_id	: VS service profile identifier.
		p_more			: address of a vs_terminal_start_rq structure

Description : start VS routine.

			This routine is kept for compatibility.
			Use of this routine is deprecated.
			Use rather v120_init_rq().

Return value : OK, NOK, STOP
		STOP	: quit the VS with access information path disconnected.
		OTHER	: wait !

*--------------------------------------------------------------------------*/

uchar vs_start (term_id, nai, chan_id, call_direction, a_profile_id,
				a_servprof_id, p_more)
vs_term_id_t	term_id;										/* terminal id */
nai_t			nai;											/* network access id */
add_t			chan_id;										/* channel id */
uchar			call_direction;									/* outgoing call ? TRUE/FALSE */
char FAR *		a_profile_id;									/* X3 parameter profile id */
char FAR *		a_servprof_id;									/* VS service profile id */
uchar FAR *		p_more;
{
	uchar				   FAR	*p_data;
	struct v120_v42b	   FAR	*p_v42b;
	struct v120_ph_ch_list FAR	*p_ph_ch_list;
	uchar						 i;
	struct v120_init			 v120_init_data;

	p_data			= (uchar FAR *)&v120_init_data;
	p_v42b			= V120_init_a_v42b;
	p_ph_ch_list	= V120_init_a_ph_ch_list;

	/* Build initialization data structure */

	Memset_far	((char FAR *)p_data, 0, V120_init_size);

	if (p_more != P_NIL) {
		timer_val_t		conn_est_timer_val;

		p_data	= p_more;
		conn_est_timer_val	= Vs_init_conn_est_timer_val;

		/*
		 *	Copy the channel list
		 */
		Memcpy_far	((char FAR *)p_ph_ch_list,
					 (char FAR *)Vs_init_a_ph_ch_list,
					  V120_ph_ch_list_size);
		/*
		 *	Copy the V.42bis parameters list
		 */
		Memcpy_far	((char FAR *)p_v42b,
					 (char FAR *)Vs_init_a_v42b,
					  V120_v42b_size);

		p_data	= (uchar FAR *)&v120_init_data;
		V120_init_conn_est_timer_val	= conn_est_timer_val;
	}

	p_data			= (uchar FAR *)&v120_init_data;

	V120_init_jn_id					= term_id;
	V120_init_nai					= nai;
	V120_init_call_direction		= call_direction;

	/* Copy profile name */

	if (a_profile_id != P_NIL) {
		for (i = 0; i < VS_PROFILE_ID_MAX_LGTH; ++i) {
			V120_init_profile_id[i]	= a_profile_id [i];
			if (a_profile_id [i] == '\0') break;
		}
	}
	V120_init_profile_id [VS_PROFILE_ID_MAX_LGTH]	= '\0';

	/* Copy service profile name */

	if (a_servprof_id != P_NIL) {
		for (i = 0; i < VS_SERVPROF_ID_MAX_LGTH; ++i) {
			V120_init_servprof_id[i] = a_servprof_id [i];
			if (a_servprof_id [i] == '\0') break;
		}
	}
	V120_init_servprof_id [VS_SERVPROF_ID_MAX_LGTH]	= '\0';

	if (V120_ph_ch_nb == 0) {
		V120_ph_ch_nb			= 1;
		V120_ph_ch_nai(0)		= nai;
		V120_ph_ch_sapi(0)		= SAPI_NIL;
		V120_ph_ch_chani(0)		= chan_id;
	}
	return (v120_init_rq (&v120_init_data));
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: v120_init_rq	: start V.120, new_style

Usage		: uchar v120_init_rq (struct v120_init FAR *p_data)
					p_data	: address of a v120_init structure, containing V.120 start parameters

Return value : OK, NOK, STOP
		STOP	: quit the VS with access information path disconnected.
		OTHER	: wait !

Description : start V.120.

*--------------------------------------------------------------------------*/

uchar v120_init_rq (p_data)
struct v120_init	FAR *p_data;
{
	struct v120_ph_ch_list FAR *p_ph_ch_list;	/* P_NIL, or list of physical channels */


	p_ph_ch_list	= V120_init_a_ph_ch_list;

	if (Vs_status == OFF) {			/* V.120 PAD is not active */
#		if VS_ASSERT == ON
			vs_error_process (VS_ERR_CONFIG_NEVER_BEEN);
#		endif
		return (STOP);
	}

	Vs_event_id = VS_EV_START;			/* start V.120 unit event */

	/* Check that a channel exists */

	if (V120_ph_ch_nb == 0) {
		Vs_assert (0, VS_TRAP_ASSERT_02, "V.120:no channel");
		goto VS_EXIT;
	}

	if (V120_init_jn_id	!= NAI_NIL) {
		if (vs_terminal_access_from_term_id (V120_init_jn_id) !=
			 V120_init_jn_id) {
			Vs_assert (0, VS_TRAP_ASSERT_03, "V.120:terminal id incorrect 1");
			goto VS_EXIT;
		}
	}
	else {
		Vs_assert (0, VS_TRAP_ASSERT_04, "V.120:terminal id incorrect 2");
		goto VS_EXIT;
	}

	/* Load profile */

	if ((V120_init_profile_id [0] != '\0') ||
		(V120_init_servprof_id [0] != '\0')) {
		if (vs_oper_profile (V120_init_profile_id, V120_init_servprof_id) == NOK) {
			Vs_assert (0, VS_TRAP_ASSERT_05, "V.120:profile incorrect 2");
			goto VS_EXIT;
		}
	}

	/* Network contexts */

	if ((vs_network_access (V120_init_nai) == V120_init_nai) &&
		(vs_service_access (Vs_cur_servprof_sapi) == Vs_cur_servprof_sapi) &&
		(vs_connection_access (Vs_cur_servprof_ces)	== Vs_cur_servprof_ces)) {
		Vs_conn_lli 			= Vs_cur_servprof_lli;
		Vs_conn_send_initial_cs	= ON;
	}
	else {
		Vs_assert (0, VS_TRAP_ASSERT_06, "V.120:nai/sapi/ces incorrect");
		goto VS_EXIT;
	}

	Vs_terminal_nsc_link ();			/* link terminal <-> network contexts */

	Vs_term_call_direction	= V120_init_call_direction;	/* save call direction */


	/* Save physical channels references in terminal context */

	Memcpy_far	((char FAR *)&Vs_term_ph_ch_list,
				 (char FAR *)V120_init_a_ph_ch_list,
				 V120_ph_ch_list_size);

	Vs_term_conn_est_timer_val	= V120_init_conn_est_timer_val;

	/* Save requested negotiation parameters in terminal context */

#	if VS_V42B_NEGOTIATION == ON
		Vs_term_v42b_resp_timer_val	= V120_init_v42b_resp_timer_val;
		Vs_term_v42b_p0				= V120_init_v42b_p0;
		Vs_term_v42b_p1				= V120_init_v42b_p1;
		Vs_term_v42b_p2				= V120_init_v42b_p2;
#	endif

	/* Connection establishment watchdog timer */

	Vs_timer_term_start (VS_TI_CONN_ESTABLISHMENT_IX);

	/* Channel attach */

	if (Vs_term_call_direction != VS_CALL_NONE) {

		vs_outgoing_nsc_assign ();

		if (appli_sm_dl_sapi_attach_rq (
			VS_TERMINAL_ENTITY,
			Vs_network_nai,											/* network access id */
			Vs_sapi,												/* data link service access id */
			Vs_dl_ces,												/* data link connection id */
			Vs_conn_lli,											/* data link logical link id */
			(Vs_term_call_direction == VS_CALL_INCOMING) ? FALSE : TRUE,
			&Vs_term_ph_ch_list) == NOK) {

			Vs_assert (0, VS_TRAP_ASSERT_07, "V.120:channel attach failed 1");
			goto VS_EXIT;
		}
	}

	if (Vs_term_status != ON) {
		Vs_term_state_modify (VS_TERM_STATE_UNDEFINED);
		Vs_term_status			= ON;
	}

	Vs_term_state_set (VS_TERM_STATE_WAIT_FOR_COMMAND);				/* terminal wait for command state */
	return (OK);

VS_EXIT :
	vs_disconnection ();
	vs_acc_info_path_disc ();										/* Disconnect access information path (junction DTE/DCE) */
	return ((Vs_term_status == ON) ? NOK : STOP);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_stop

Usage		: uchar vs_stop (uchar cause);

Description : stop VS unit (this routine is used to stop the VS unit at the
				line disconnection while VS unit is still active )

Return value :
		STOP	: V.120 is completely stopped.
		OK		: V.120 is not completely stopped: wait.
		NOK		: an error occurred during stop.

*--------------------------------------------------------------------------*/

uchar vs_stop (term_id, cause)
vs_term_id_t	term_id;										/* terminal id */
uchar			cause;											/* cause */
{
	if (vs_terminal_access_from_term_id (term_id) != term_id) {
		Vs_assert (0, VS_TRAP_ASSERT_08, "V.120:terminal id incorrect 3");
		return (NOK);
	}

	if (Vs_term_status == OFF) {
		return (STOP);
	}

	Vs_event_id = VS_EV_STOP;

	switch (cause) {
	default:
	case VS_STOP_CAUSE_ORIGINATED:

		Vs_term_stop_requested = ON;					/* Just wait for the Network Clear Indication before quitting the VS unit */

#		if 0
			if (Vs_conn_state_read () != VS_CONN_STATE_DISCONNECTED) {
				/*
				 *	Data link is still active, wait for data link termination
				 *	before detaching
				 */
				return (OK);
			}
#		endif

		switch (appli_sm_dl_sapi_detach_rq (Vs_network_nai,
				Vs_term_first_chan_id, &Vs_term_ph_ch_list)) {

		case CONTINUE	:
			vs_acc_info_path_disc ();	/* Disconnect access information path (junction DTE/DCE) */
			return (STOP);

		case STOP		:
			return (OK);

		default:
		case NOK		:
			vs_error_process (VS_ERR_DL_SAPI_DETACH_FAILED);	/* data link sapi attach failed */
			return (NOK);
		}

	} /* end switch */

VS_EXIT :
	return (NOK);

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_var_init : initialize VS internal variables

Usage		: void vs_var_init ();

Description : initialize VS internal variables.

Return value : none

*--------------------------------------------------------------------------*/

void vs_var_init () {
	Vs_status					= OFF;							/* VS is not active yet */

#	if OM_CODE_TYPE == OM_PIC
		pic_init_t_vs_parm_description ();
#	endif

}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_parameter_extern

Usage		: uchar vs_parameter_extern (
						vs_term_id_t		term_id,
						uchar				reference,
						vs_parm_val_t	a_value);

Description : set VS parameters by external unit other then VS.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

#if VS_TERMINAL_ENTITY == ENT_DTE_INT

uchar vs_parameter_extern (term_id, reference, a_value, read)
vs_term_id_t			term_id;								/* terminal id */
uchar					reference;								/* X.3 parameter reference */
vs_parm_val_t FAR *	a_value;									/* X.3 parameter value */
uchar					read;									/* read parameter (TRUE), set parameter (FALSE) */
{
	if (Vs_term_id != term_id) {
		Vs_terminal_access (term_id);								/* accede to selected terminal context */
	}

	if (Vs_parm_ref_valid (reference)) {							/* check if parameter reference is valid */

		if (read) {

			if (vs_parm_val_valid (reference, *a_value)) {		/* Test pamameter value validity */
				Vs_parm(reference) = *a_value;						/* update parameter */
			} else {
				goto VS_EXIT;										/* invalid X.3 parameter value */
			}

		}

		*a_value = Vs_parm (reference);

	} else {
		goto VS_EXIT;												/* invalid X.3 parameter reference */
	}

	return (OK);

VS_EXIT :

	return (NOK);
}

#endif

/*EOF*/
