
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_acc.c
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	- vs_connection_access		- accede to a connection context
 *	- vs_disconnection			- disconnect the VS
 *	- vs_last_node_access		- accede to the last structure node
 *	- vs_nsc_access				- accede to network, service, connection contexts
 *	- vs_outgoing_nsc_assign	- assign network, service, connection context for outgoing calls
 *	- vs_network_access			- access to a network context
 *	- vs_profile_access			- access to a parameter profile
 *	- vs_servprof_access		- access to a service profile
 *	- vs_service_access			- access to a service context
 *	- vs_terminal_access_from_dl_sapi_ces - access to a terminal context
 *								  from a DLSAP and a DLCES
 *	- vs_terminal_access_from_term_id 	  - access to a terminal context
 *								  from terminal id
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_connection_access

Usage		: add_t vs_connection_access (add_t conn_id)

Description : access to the connection context

Return value : acceded connection context conn_id

*--------------------------------------------------------------------------*/

add_t vs_connection_access (dl_ces)
add_t				dl_ces;			/* DL CES, connection identifier */
{
	register	struct node FAR *	p_node;							/* node structure pointer */

	Vs_connection_common_access ();								/* access to connection common context */
	do {
		Vs_next_connection_access ();								/* access to next connection context */
	} while ((Next_node != P_NIL) && (Vs_dl_ces != dl_ces));
	return (Vs_dl_ces);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_disconnection

Usage		: void vs_disconnection (void);

Description : disconnect the 'VC'.

Return value : none

*--------------------------------------------------------------------------*/

void vs_disconnection ()
{
	Vs_timer_term_stop (VS_TI_CONN_ESTABLISHMENT_IX);			/* stop connection establishment watchdog timer */

	vs_queued_data_purge (VS_NETWORK_DATA);						/* purge 'to network' data */

	Vs_conn_state_set (VS_CONN_STATE_DISCONNECTED);				/* reset connection state */
	Vs_conn_mfo_established	= OFF;
	Vs_conn_user_data_sent	= OFF;

	vs_term_queued_data_transmit ();							/* transmit to terminal possible queued data */

	Vs_conn_p_term			= P_NIL;
	Vs_term_p_conn			= P_NIL;

}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_last_node_access

Usage		: struct node FAR * vs_last_node_access (struct node FAR * a_node);

In			:
		a_node : first node address.

Description : access to the last structure node.

Return value : last node address.

*--------------------------------------------------------------------------*/

struct node FAR * vs_last_node_access (a_node)
	struct node FAR *	a_node;										/* first node address */
{
	register	struct node FAR * p_node;							/* node structure pointer */

	p_node = a_node;

	while (Next_node != P_NIL) {
		p_node = Next_node;
	}

	return (p_node);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_nsc_access

Usage		: uchar vs_nsc_access (nai_t nai, sapi_t sapi, add_t dl_ces);

Description : access to network, service, connection ccontexts.

Return value : 	returns OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_nsc_access (nai, sapi, dl_ces)
nai_t			nai;
sapi_t			sapi;
add_t			dl_ces;
{
	Vs_network_access (nai);				/* access to network context */
	Vs_service_access (sapi);				/* access to service context */
	Vs_connection_access (dl_ces);			/* access to connection context */

	if (Vs_conn_p_term != P_NIL) {
		Vs_p_terminal = Vs_conn_p_term;
	} else {
		vs_error_process (VS_ERR_NO_CONNECTION_ESTABLISHED);	/* no connection has been established with these contexts */
		return (NOK);
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_outgoing_nsc_assign

Usage		: void vs_outgoing_nsc_assign (void)

Description : 	access to network, service and connection contexts
				for outgoing call

Return value : 	none

*--------------------------------------------------------------------------*/

void vs_outgoing_nsc_assign ()
{
	/* Access to service context */

	Vs_term_p_service	= Vs_p_service;		/* link service to terminal context */

	vs_new_connection_init ();

	Vs_term_p_conn		= Vs_p_connection;	/* link terminal context to connection context */
	Vs_conn_p_term		= Vs_p_terminal;	/* link connection context to terminal context */
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_network_access

Usage		: nai_t vs_network_access (nai_t nai)

Related
functions usage ();

Description : access to the network context

Return value : acceded network context nai.

*--------------------------------------------------------------------------*/

nai_t vs_network_access (nai)
	nai_t							nai;							/* network access identifier */
{
	register	struct node FAR *	p_node;							/* node structure pointer */

	p_node = Vs_a_network_node;

	do {
		Vs_next_network_access ();									/* access to next network context */
	} while ((Next_node != P_NIL) && (Vs_network_nai != nai));

	return (Vs_network_nai);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_profile_access

Usage		: uchar vs_profile_access ((char FAR *) p_profile_id);

Related
functions usage ();

Description : access to a parameter profile.

Return value : 	returns OK or NOK

common constants and declarations : vs.h

common objects :

*--------------------------------------------------------------------------*/

uchar vs_profile_access (p_profile_id)
	char FAR *		p_profile_id;
{
	register	struct node FAR *	p_node;							/* node structure pointer */

	p_node				= Vs_a_profile_node;						/* set parameter profile node structure address */
	Vs_p_profile		= (struct vs_profile FAR *)(Next_node + 1);/* set parameter profile context address */

	while ((p_node != P_NIL) && Strcmp_far ((char FAR *)Vs_a_profile_id,
			p_profile_id)) {										/* search for the default parameter profile */
		Vs_next_profile_access ();									/* access to parameter profile context */
	}

	if (p_node == P_NIL) {
		return (NOK);
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_service_access

Usage		: sapi_t vs_service_access (sapi_t sapi)

Description : access to the service context

Return value : acceded service context sapi.

*--------------------------------------------------------------------------*/

sapi_t vs_service_access (sapi)
	sapi_t							sapi;							/* network access identifier */
{
	register	struct node FAR *	p_node;							/* node structure pointer */

	Vs_service_common_access ();									/* access to the service common context */
	do {
		Vs_next_service_access ();									/* access to service context */
	} while ((Next_node != P_NIL) && (Vs_sapi != sapi));

	return (Vs_sapi);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_servprof_access

Usage		: uchar vs_servprof_access ((char FAR *) p_servprof_id);

Description : access to a service profile.

Return value : 	returns OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_servprof_access (p_servprof_id)
	char FAR *		p_servprof_id;
{
	register	struct node FAR *	p_node;							/* node structure pointer */

	p_node				= Vs_a_servprof_node;						/* set service profile node structure address */
	Vs_p_servprof		= (struct vs_servprof FAR *)(Next_node + 1);/* set service profile context address */

	while ((p_node != P_NIL) && Strcmp_far ((char FAR *)Vs_a_servprof_id,
			p_servprof_id)) {										/* search for the default service profile */
		Vs_next_servprof_access ();								/* access to service profile context */
	}

	if (p_node == P_NIL) {
		return (NOK);
	}

	return (OK);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_terminal_access_from_dl_sapi_ces  - access to a terminal
						from a DLSAP and a DLCES

Usage		: vs_term_id_t vs_terminal_access_from_dl_sapi_ces
								(sapi_t dl_sapi, add_t dl_ces)
								dl_sapi		: DL SAP identifier
								dl_ces		: DL CES identifier

Description : access to a terminal using DLSAP and DLCES

Return value : terminal id

*--------------------------------------------------------------------------*/

vs_term_id_t vs_terminal_access_from_dl_sapi_ces (dl_sapi, dl_ces)
sapi_t			dl_sapi;
add_t			dl_ces;
{
	struct node FAR *	p_node;		/* node structure pointer */

	p_node = Vs_a_terminal_node;
	do {
		Vs_next_terminal_access ();	/* access to next terminal context */
	} while ((Next_node != P_NIL)		&&
			 ((Vs_cur_servprof_sapi != dl_sapi)	||
			  (Vs_cur_servprof_ces != dl_ces)	||
			  (Vs_term_p_network -> nai != Vs_network_nai)));

	if ((Vs_cur_servprof_sapi == dl_sapi) &&
		(Vs_cur_servprof_ces  == dl_ces)  &&
		(Vs_term_p_network -> nai == Vs_network_nai)) {

		if (Vs_term_p_network != P_NIL) {
			Vs_p_network 	= Vs_term_p_network;
		}
		if (Vs_term_p_service != P_NIL) {
			Vs_p_service	= Vs_term_p_service;
		}
		if (Vs_term_p_conn != P_NIL) {
			Vs_p_connection = Vs_term_p_conn;
		}
		return (Vs_term_id);
	}
	else {
		return (NAI_NIL);
	}
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_terminal_access_from_term_id

Usage		: vs_term_id_t vs_terminal_access_from_term_id
								(vs_term_id_t term_id)

Description : access to a terminal.

Return value : accessed terminal context term_id

*--------------------------------------------------------------------------*/

uchar vs_terminal_access_from_term_id (term_id)
	vs_term_id_t					term_id;						/* terminal identifier */
{
	register	struct node FAR *	p_node;							/* node structure pointer */

	if (Vs_term_id != term_id) {
		p_node = Vs_a_terminal_node;
		do {
			Vs_next_terminal_access ();							/* access to next terminal context */
		} while ((Next_node != P_NIL) && (Vs_term_id != term_id));
	}

	if (Vs_term_p_network != P_NIL) {
		Vs_p_network = Vs_term_p_network;
	}

	if (Vs_term_p_service != P_NIL) {
		Vs_p_service		= Vs_term_p_service;
	}

	if (Vs_term_p_conn != P_NIL) {
		Vs_p_connection	= Vs_term_p_conn;
	}
	return (Vs_term_id);
}


/* END OF FILE */
