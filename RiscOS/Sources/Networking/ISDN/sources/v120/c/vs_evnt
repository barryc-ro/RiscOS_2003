
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_evnt.c (Event from network)
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *	vs_evnt_data		- network data indication event processing
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "dl_int.h"

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: vs_evnt_data

Usage		: uchar vs_evnt_data (void)

Description : implements the processing of data indication event from
				network : transmits data to terminal.

Return value : OK or NOK

*--------------------------------------------------------------------------*/

uchar vs_evnt_data ()
{
	uchar							send_frame;
	register struct message FAR *	p_msg;

	send_frame	= FALSE;

	if (!vs_terminal_is_present (Vs_term_id)) {
		Free_msg (p_rcv_msg);
		p_rcv_msg = P_NIL;
		return (OK);
	}

	Next (p_rcv_msg) = P_NIL;

	if (R_data_size != 0) {	/* some user data to process */

		if (Vs_conn_first_block) {

			if (Vs_conn_a_msg_rcv_block != P_NIL) {

					/* A new frame appears, but the old has not been completly
						filled, A block must have been lost : Discard the old one.
					*/

				Vs_free_multi_msg (Vs_conn_a_msg_rcv_block);
			}

			Vs_conn_p_msg_rcv_block			= Vs_conn_a_msg_rcv_block = p_rcv_msg;
			if (Vs_conn_last_block) {									/* Frame in one block ? */
				send_frame					= TRUE;
			}

		} else {
			if (Vs_conn_a_msg_rcv_block == P_NIL) {

					/* A middle or last block appears without receiving any first
						block before : Discard it.
					*/

				Free_msg (p_rcv_msg);
				p_rcv_msg	= P_NIL;

			} else {
				if (Vs_conn_last_block) {								/* Last block ? */
					send_frame					= TRUE;
				}

					/* Queue the block to the building frame */

				Next (Vs_conn_p_msg_rcv_block)	= p_rcv_msg;
				Vs_conn_p_msg_rcv_block			= Next (Vs_conn_p_msg_rcv_block);
				Next (Vs_conn_p_msg_rcv_block)	= P_NIL;
			}

		}

	}
	else {	/* no user data to process */
		Free_msg (p_rcv_msg);
	}
	p_rcv_msg = P_NIL;

	if (send_frame) {

		if ((Vs_term_busy == OFF) &&							/* enable transmitting data to terminal */
			(Vs_term_state_read () == VS_TERM_STATE_DATA_TRANSFER)) {

			if (Vs_term_a_queued_msg_low_prt != P_NIL) {			/* if there are queued data */

				if (Vs_system_congestion_busy) {
					Vs_free_multi_msg (Vs_conn_a_msg_rcv_block);	/* System is under congestion, VS stops to queue new message */
					Vs_conn_p_msg_rcv_block	= Vs_conn_a_msg_rcv_block = P_NIL;
				} else {
					Vs_term_multi_data_queue (Vs_conn_a_msg_rcv_block);	/* queue data in 'FIFO' */
					vs_term_queued_data_transmit ();				/* transmit queued data */
				}

			} else {
				p_msg					= Vs_conn_a_msg_rcv_block;
				Vs_conn_a_msg_rcv_block	= P_NIL;

				while (p_msg != P_NIL) {
					p_snd_msg	= p_msg;
					p_msg		= Next (p_msg);
					Vs_snd_terminal (VS_TERMINAL_DA_IN, VS_MSG_PRIORITY_LOW);
																	/* send data to terminal */
				}

			}

			Vs_conn_p_msg_rcv_block = P_NIL;

		} else {

			if (Vs_system_congestion_busy) {
				Vs_free_multi_msg (Vs_conn_a_msg_rcv_block);		/* System is under congestion, VS stops to queue new message */
				Vs_conn_p_msg_rcv_block	= Vs_conn_a_msg_rcv_block = P_NIL;
			} else {
				Vs_term_multi_data_queue (Vs_conn_a_msg_rcv_block);	/* queue data in 'FIFO' */
			}

		}

	}
	else {

		if (!Vs_conn_DR_R_on ()) {

			if (Vs_conn_a_msg_rcv_block != P_NIL) {

				/*
					Remote terminal is no more ready for data, partial frame
					must be discarded
				*/

				Vs_free_multi_msg (Vs_conn_a_msg_rcv_block);
				Vs_conn_p_msg_rcv_block	= Vs_conn_a_msg_rcv_block = P_NIL;
			}


		}

	}

	if (Vs_conn_break_in) {					/* BREAK indication */
		Vs_conn_break_in = FALSE;
		vs_term_break_signal_transmit ();	/* send BREAK to terminal */
	}

	return (OK);
}


/* END OF FILE */

