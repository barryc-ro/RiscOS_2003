/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - v120.c
 *
 *		Implements the V120 message formatting, ...
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "vs.h"

#if C_COMPILER == TC
#	pragma hdrstop
#endif

#include "dl_int.h"


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name		: v120_data_analyze

Usage		: uchar v120_data_analyze (uchar FAR * a_data);

Description : analyse network data to set event (CALL, CLEAR...)

Return value :	length of header

*--------------------------------------------------------------------------*/

uchar	v120_data_analyze (a_data, data_size)
uchar FAR *		a_data;
ushort			data_size;
{
	uchar			cur_info;							/* current information header */
	uchar			new_info;							/* new information header */
	uchar			hdr_length;

	hdr_length	= 0;
	if (data_size > 0) {

		/* Information header */

		new_info 	= a_data [V120_IDX_INFO_HEADER];

		if (!Vs_conn_break_in) {
			Vs_conn_break_in		= new_info & Sfi (V120_HDR_BR,	V120_HDR_BR_ON);
		}

		Vs_conn_first_block			= new_info & Sfi (V120_HDR_B,	V120_HDR_B_ON);
		Vs_conn_last_block			= new_info & Sfi (V120_HDR_L,	V120_HDR_L_ON);
		Vs_conn_err_abort_or_parity	= new_info & Sfi (V120_HDR_C1,	V120_HDR_C1_ON);
		Vs_conn_err_fcs_or_stop_bit	= new_info & Sfi (V120_HDR_C2,	V120_HDR_C2_ON);

		hdr_length	= 1;

			/* Information Control State */

		cur_info = Vs_conn_info_ctrl_state;
		if ((new_info & Sfi (V120_HDR_E, V120_HDR_E_ON)) == 0) {

			/* Get control state information from 2-byte header */

			new_info = a_data [V120_IDX_INFO_CTRL_STATE];
			++hdr_length;
		}
		else {
			new_info	= cur_info;
		}

		if (new_info != cur_info) {		/* information control state byte has been changed */

			/* update new information control state */

			Vs_conn_info_ctrl_state = new_info;
		}

	}

	return (hdr_length);
}


/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name			: vs_info_header_format

Usage			: vs_info_header_format (struct message FAR *p_msg,
										 struct buffer FAR  *p_buffer,
										 uchar				 put_first,
										 uchar				 put_second);
							put_first	: put first header byte
							put_second	: put second header byte

Description		: format the control header and the mandatory information
				  element fields.

Return value	: none

*--------------------------------------------------------------------------*/

void vs_info_header_format (p_msg, p_buffer, put_first, put_second)
struct message	FAR *	p_msg;
struct buffer	FAR *	p_buffer;
uchar					put_first;
uchar					put_second;
{
	uchar FAR * p_data;
	uchar		dat_ready;
	uchar		rcv_ready;
	uchar		snd_ready;
	uchar		break_rq;
	uchar		header_length;

	dat_ready = vs_terminal_is_present (Vs_term_id)		? 	V120_CS_DR_ON	:
															V120_CS_DR_OFF;
	rcv_ready = (dat_ready && !Vs_term_busy)			?	V120_CS_RR_ON	:
															V120_CS_RR_OFF;
	snd_ready = dat_ready								?	V120_CS_DR_ON	:
															V120_CS_DR_OFF;
	break_rq  = Vs_term_break_rq						?	V120_HDR_BR_ON	:
															V120_HDR_BR_OFF;

	header_length	 = (put_first == ON) ? 1 : 0;
	header_length	+= (put_second == ON) ? 1 : 0;

	if (p_buffer != P_NIL) {
		Buffer_data_offset	-= header_length;
		Buffer_data_size	+= header_length;
		p_data				 = Buffer_a_start_data;
	} else {
		L_msg_data_offset	-= header_length;
		L_msg_data_size		+= header_length;
		p_data				 = L_msg_a_start_data;
	}

	if (put_first == ON) {
		p_data [V120_IDX_INFO_HEADER] =
			((put_second == OFF) ? (Sfi (V120_HDR_E, V120_HDR_E_ON)) :
								   (Sfi (V120_HDR_E, V120_HDR_E_OFF))) |
			Sfi (V120_HDR_B,  	V120_HDR_B_ON	) |
			Sfi (V120_HDR_L,	V120_HDR_L_ON	) |
			Sfi (V120_HDR_BR,	break_rq		);
	}
	if (put_second == ON) {
		p_data [V120_IDX_INFO_CTRL_STATE] =
				Sfi (V120_CS_E,		V120_CS_E_ON	) |
				Sfi (V120_CS_DR,	dat_ready		) |
				Sfi (V120_CS_SR,	snd_ready		) |
				Sfi (V120_CS_RR,	rcv_ready		);
	}
}

/*EOF*/

