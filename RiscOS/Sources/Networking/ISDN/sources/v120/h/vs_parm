
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_parm.h
 *
 * $Revision$
 *
 * $Date$
 *
 *	VS parameters header.
 *
 *-------------------------------------------------------------------------*/


/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef VS_PARM_H
#define	VS_PARM_H

/*****************************************************************************

								CONSTANTS

*****************************************************************************/

#define		VS_PARM_READWRITE					0					/* VS read/write parameters */
#define		VS_PARM_READONLY					1					/* VS external read only parameters (not managed by the VS) */

/*----------------------------------------------------------------------------
								VS PARAMETERS
----------------------------------------------------------------------------*/

#define		VS_R1_PARITY						1					/* reference  1 : parity treatment */
#define		VS_R2_ECHO							2					/* referenec  2 : echo active or not */
#define		VS_R3_FLOW_CTRL						3					/* reference  3 : flow control of the VS */
#define		VS_R4_IDLE_TIMER					4					/* reference  4 : idle timer in 1/20 seconds */
#define		VS_R5_BREAK_OPER					5					/* reference  7 : Operation on receipt of break signal */
#define		VS_R6_SIGNAL_CTRL					6					/* reference  6 : control of VS service signal */

/*--------------------------------
	VALUES 1 : PARITY TREATMENT
---------------------------------*/

#define		VS_V1_NO_PARITY						0					/* No parity checking or generation */

/*--------------------
	VALUES 2 : ECHO
---------------------*/

#define		VS_V2_NO_ECHO						0					/* no echo */
#define		VS_V2_ECHO							1					/* echo */

/*-----------------------------
	VALUES 3 : FLOW CONTROL
------------------------------*/

#define		VS_V3_FLOW_CTRL_RTS_CTS				0					/* No use of X-ON and X-OFF for flow control */
#define		VS_V3_FLOW_CTRL_XON_XOFF			1					/* Use of X-ON and X-OFF for flow control */

/*-------------------------------
	VALUES 5 : BREAK OPERATION
--------------------------------*/

#define		VS_V5_NO_BREAK						0x00				/* no equivalent operation for break */
#define		VS_V5_SEND_BREAK					0x01				/* send break */

/*---------------------------------
	VALUES 6 : SIGNAL CONTROL
----------------------------------*/

#define		VS_V6_NO_SERV						0x00				/* no service signals are transmitted to S/S DTE */
#define		VS_V6_STD_SERV						0x01				/* service signals other than prompt VS service signal
																		are transmitted in standard format */

/*****************************************************************************

							VS PARAMETERS STRUCTURES

*****************************************************************************/


struct vs_parm_valid_range {						/* valid range of vs parameter */
	uchar		value_min;								/* range minimum value */
	uchar		value_max;								/* range maximum value */
};

struct vs_parm_description {						/* vs parameter description */
	uchar						 read_only;				/* read only parameter flag */
	struct vs_parm_valid_range	*a_parm_valid_range;	/* address of parameter valid range structure */
};


/****************************************************************************\

						VS MACRO-FUNCTIONS DEFINITIONS

\****************************************************************************/


/*----------------------------------------------------------------------------
							ARRAY ACCESS MACRO
----------------------------------------------------------------------------*/

/* Parameters valid range list
------------------------------*/

#define		Vs_t_parm_description			t_vs_parm_description

#define		Vs_parm_read_only(ref)			(Vs_a_parm_description[ref]. read_only)
#define		Vs_t_parm_valid_range(ref)		(Vs_a_parm_description[ref]. a_parm_valid_range)

#define		Vs_parm_valid_nb_range(ref)		(Vs_t_parm_valid_range(ref) [0]. value_min)
#define		Vs_parm_valid_min_range(ref,i)	(Vs_t_parm_valid_range(ref) [i]. value_min)
#define		Vs_parm_valid_max_range(ref,i)	(Vs_t_parm_valid_range(ref) [i]. value_max)


/****************************************************************************\

						EXTERNAL DECLARATION

\****************************************************************************/


extern struct vs_parm_description	PIC_CONST_ARRAY	t_vs_parm_description [];

extern struct vs_parm_valid_range	CONST_ARRAY	t_vs_r1_valid_range [];
extern struct vs_parm_valid_range	CONST_ARRAY	t_vs_r2_valid_range [];
extern struct vs_parm_valid_range	CONST_ARRAY	t_vs_r3_valid_range [];
extern struct vs_parm_valid_range	CONST_ARRAY	t_vs_r4_valid_range [];
extern struct vs_parm_valid_range	CONST_ARRAY	t_vs_r5_valid_range [];
extern struct vs_parm_valid_range	CONST_ARRAY	t_vs_r6_valid_range [];

/****************************************************************************\

						PROTOTYPES DECLARATIONS

\****************************************************************************/


#if NEW_FCT_STYLE == ON

	uchar		vs_parm_val_valid			(uchar reference,
											 vs_parm_val_t value);	/* received remote 'Break' VS message processing */
	uchar		vs_parameter_set			(uchar force);			/* set X.3 parameters routine */
	uchar		vs_term_it_setparm_rq		(void);					/* set parameter requested by interrupt terminal */

#else

	uchar		vs_parm_val_valid			();						/* received remote 'Break' VS message processing */
	uchar		vs_parameter_set			();						/* set X.3 parameters routine */
	uchar		vs_term_it_setparm_rq		();						/* set parameter requested by interrupt terminal */

#endif

#endif	/* VS_PARM_H */


/* END OF FILE */
