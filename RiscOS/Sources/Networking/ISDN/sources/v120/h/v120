/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - v120.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef	V120_H
#define	V120_H

/*----------------------------------------------------------------------------

				V120 INFORMATION HEADER STRUCTURE & MACROs

----------------------------------------------------------------------------*/

/*
 *                        |-----|---------------------------------------|
 *                        | bit |  8    7    6    5    4    3    2    1 |
 *		                  |-----+---------------------------------------|
 *	       HEADER         |  1  |  E | BR | reserve | C2 | C1 |  B |  F |
 *                        |     |---------------------------------------|
 *     CONTROL STATE      |  2  |  E | DR | SR | RR |      reserved     |
 *                        |     |---------------------------------------|
 * PROTOCOL DISCRIMINATOR |  3  |  0 |  0 |  0 |  0 |  1 |  0 |  0 |  1 |
 *                        |     |---------------------------------------|
 *                        |  4  |                                       |
 *     CALL REFERENCE     |     |                 Number                |
 *                        |  5  |                                       |
 *                        |     |---------------------------------------|
 *      MESSAGE TYPE      |  6  | SETUP, CONN, REL, REL-COMP, USER-INFO |
 *                        |     |---------------------------------------|
 *                        |  7  |                                       |
 *                        .     .                                       .
 *     OPTIONAL FIELDS    .     .    Message dependent optional fields  .
 *
 *                        |  N  |                                       |
 *                        |-----|---------------------------------------|
 *
 *
 * E  : Extension, for further extension of header octets.
 * BR : Break invoked by the terminal.
 * Ci : error Control.
 * B  : Beginning portion of a frame in asynchronous mode.
 * F  : Final     portion of a frame in asynchronous mode.
 *
 * DR : Data Ready, terminal interface is active.
 * SR : Send    Ready.
 * RR : Receive Ready.
 *
 */

		/* BYTE INDEX
		-------------*/

#	define	V120_IDX_INFO_HEADER			0						/* Index of Information Header */
#	define	V120_IDX_INFO_CTRL_STATE		1						/* Index of Information Control State */
#	define	V120_IDX_INFO_PROT_DISCR		2						/* Index of Information Protocol Discriminator */
#	define	V120_IDX_INFO_CALL_REF_H		3						/* Index of Information Call reference high */
#	define	V120_IDX_INFO_CALL_REF_L		4						/* Index of Information Call reference low */
#	define	V120_IDX_INFO_MSG_TYPE			5						/* Index of Information Message type */
#	define	V120_IDX_INFO_OPT_FIELD			6						/* Index of Information first optional field */
#	define	V120_IDX_INFO_USER_DATA			6						/* Index of Information first user data */

		/* Header EXTENSION bit */

#	define	V120_HDR_E_P					7
#	define	V120_HDR_E_L					1

#	define	V120_HDR_E_OFF					G_1 (0)
#	define	V120_HDR_E_ON					G_1 (1)

		/* Header BREAK bit */

#	define	V120_HDR_BR_P					6
#	define	V120_HDR_BR_L					1

#	define	V120_HDR_BR_OFF					G_1 (0)
#	define	V120_HDR_BR_ON					G_1 (1)

		/* Header ERROR CONTROL bits */

#	define	V120_HDR_C2_P					3
#	define	V120_HDR_C2_L					1

#	define	V120_HDR_C2_OFF					G_1 (0)
#	define	V120_HDR_C2_ON					G_1 (1)

		/* Header ERROR CONTROL bits */

#	define	V120_HDR_C1_P					2
#	define	V120_HDR_C1_L					1

#	define	V120_HDR_C1_OFF					G_1 (0)
#	define	V120_HDR_C1_ON					G_1 (1)

		/* Header frame BEGINNING portion bit */

#	define	V120_HDR_B_P					1
#	define	V120_HDR_B_L					1

#	define	V120_HDR_B_OFF					G_1 (0)
#	define	V120_HDR_B_ON					G_1 (1)

		/* Header frame LAST portion bit */

#	define	V120_HDR_L_P					0
#	define	V120_HDR_L_L					1

#	define	V120_HDR_L_OFF					G_1 (0)
#	define	V120_HDR_L_ON					G_1 (1)

		/* Control State EXTENSION bit */

#	define	V120_CS_E_P						7
#	define	V120_CS_E_L						1

#	define	V120_CS_E_OFF					G_1 (0)
#	define	V120_CS_E_ON					G_1 (1)

		/* Control State DATA READY bit */

#	define	V120_CS_DR_P					6
#	define	V120_CS_DR_L					1

#	define	V120_CS_DR_OFF					G_1 (0)
#	define	V120_CS_DR_ON					G_1 (1)

		/* Control State SEND READY bit */

#	define	V120_CS_SR_P					5
#	define	V120_CS_SR_L					1

#	define	V120_CS_SR_OFF					G_1 (0)
#	define	V120_CS_SR_ON					G_1 (1)

		/* Control State RECEIVE READY bit */

#	define	V120_CS_RR_P					4
#	define	V120_CS_RR_L					1

#	define	V120_CS_RR_OFF					G_1 (0)
#	define	V120_CS_RR_ON					G_1 (1)

		/* INFORMATION HEADER
		---------------------*/

#	define	V120_HEADER_SIZE				2

		/* LOGICAL LINK ID
		------------------*/

#	define	VS_DEFAULT_LLI					256

		/* MACROs
		---------*/

			/* modify a bitfield */

#	define	Mf_vs_b(p_add,name,val)			Wr_vs_b (p_add, ((((uchar) ~Mask_field(name)) & Rd_vs_b (p_add)) | Sfi (name,val)))
#	define	Mf_vs_w(p_add,name,val)			Wr_vs_w (p_add, ((((ushort)~Mask_field(name)) & Rd_vs_w (p_add)) | Sfi (name,val)))
#	define	Mf_vs_d(p_add,name,val)			Wr_vs_d (p_add, ((((ulong) ~Mask_field(name)) & Rd_vs_l (p_add)) | Sfi (name,val)))

			/* Mask for getting n bits */

#	define	V120_6_BITS_MASK				G_6(1,1,1,1,1,1)
#	define	V120_7_BITS_MASK				G_7(1,1,1,1,1,1,1)

/*----------------------------------------------------------------------------

								PROTOTYPES

----------------------------------------------------------------------------*/

#if NEW_FCT_STYLE == ON
	uchar	v120_data_analyze (uchar FAR * a_data, ushort data_size);
#else
	uchar	v120_data_analyze ();
#endif

/*-------------------------------------------------------------------------*/

#endif	/* ifndef V120_H */

/*EOF*/
