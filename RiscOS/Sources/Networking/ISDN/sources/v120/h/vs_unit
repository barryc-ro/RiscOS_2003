
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs_unit.h
 *
 * $Revision$
 *
 * $Date$
 *
 * function(s)
 *
 *		VS unit interface.
 *		Used when VS is implemented as an entity, or as a component of the
 *		DTE_INT entity.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef VS_UNIT_H
#define	VS_UNIT_H

#include "v120_par.h"

#if VS_V42B_NEGOTIATION	== ON
#	include	"v120_int.h"
#endif

/*----------------------------------------------------------------------------
							VS TYPE DEFINITIONS
 ---------------------------------------------------------------------------*/
typedef	ushort                      vs_ev_id_t;		/* VS event id type */
typedef nai_t                       vs_term_id_t;	/* terminal id type */
typedef	uchar						vs_parm_val_t;	/* parameter type */

#define	VS_NB_PARM					6	/* number of parameters in a profile */
#define VS_PROFILE_ID_MAX_LGTH	    2	/* maximum length of alphanumeric profile id */
#define VS_SERVPROF_ID_MAX_LGTH		2	/* maximum length of alphanumeric service profile id */


/*---------------------------------------------------------------------------
 *		Event code identifier, for event to be processed by the VS unit
 *--------------------------------------------------------------------------*/
#define     V120_EVENT	   						0x6000

/*----------------------------------------------------------------------------
							TIME OUT INDICATION EVENTS
 ---------------------------------------------------------------------------*/
#define	TI_V120_RESP_NEGOTIATION	'8'	/* V.42bis negotiation watchdog timer, responder side */
#define	TI_V120_CONN_ESTABLISHMENT	'9'	/* V.120 connection establishment watchdog timer */

/*---------------------------------------------------------------------------
 *		V.42bis parameters data structure
 *--------------------------------------------------------------------------*/
struct v120_v42b {                 				/* V.42bis negotiation parameters */
		timer_val_t				resp_timer_val;	/* negotiation timer duration (responder). */
												/* 0 means : no negotiation */
		uchar					p0;				/* direction for compression (V120_DIRECTION_xxx) */
												/* The V120_DIRECTION_xxx constants are defined in dl\v120_int.h */
		ushort					p1;				/* V.42bis number of codewords */
		uchar					p2;				/* V.42bis maximum string length */
};
#define	V120_v42b_size			sizeof (struct v120_v42b)


/*---------------------------------------------------------------------------
 *		List of physical channels data structure
 *--------------------------------------------------------------------------*/
#ifndef		V120_MX_PH_CHANNEL
#	define		V120_MX_PH_CHANNEL	2
#endif

struct v120_ph_ch_list {
	uchar		nb_chani;		/* number of physical channel in the list */
	struct {
		nai_t	ph_nai;			/* MLP PH NA ID : if NAI_NIL current NAI */
		sapi_t	ph_sapi;		/* MLP PH SAP ID */
		add_t	ph_chani;		/* MLP PH CHANNEL ID */
	} ph_ch [V120_MX_PH_CHANNEL];
};
#define	V120_ph_ch_nb			(p_ph_ch_list -> nb_chani)
#define	V120_ph_ch_nai(i)		(p_ph_ch_list -> ph_ch[i].ph_nai)
#define	V120_ph_ch_sapi(i)		(p_ph_ch_list -> ph_ch[i].ph_sapi)
#define	V120_ph_ch_chani(i)		(p_ph_ch_list -> ph_ch[i].ph_chani)
#define	V120_ph_ch_list_size	sizeof (struct v120_ph_ch_list)


/*---------------------------------------------------------------------------
 *	VS_INIT_RQ (VS_START_RQ)
 *	VS_INIT_CO (VS_START_CO)
 *--------------------------------------------------------------------------*/
struct _vs_init_args {

	struct confirm	confirm;			/*    co : 'return_code' is OK or NOK */

	nai_t		nai;					/* rq co : network access identifier (identifies the NETWORK access, not the DTE/application) */
	add_t		chan_id;				/* rq co : B-channel id (1..) */
	sapi_t		sapi;					/* rq co : DL service access point id */
	add_t		ces;					/* rq co : DL connection index */
	ushort		lli;					/* rq co : logical link id */
	uchar		direction;				/* rq co : call direction : */
										/* 		   VS_CALL_OUTGOING, VAS_CALL_INCOMING or VS_CALL_NONE */

	char		t_profile_id  [VS_PROFILE_ID_MAX_LGTH  + 1];/* rq co : parameter profile id */
	char		t_servprof_id [VS_SERVPROF_ID_MAX_LGTH + 1];/* rq co : service profile id */

	timer_val_t	conn_est_timer_val;		/* rq    : 'conn_est_timer_val' : maximum duration for V.120 connection establishment */
										/* 			0: no maximum duration */
	struct v120_v42b		v42b;		/* rq co : V.42bis negotiation parameters */
	struct v120_ph_ch_list 	ph_ch_list;	/* rq co : channel list */
};

#define Vs_init_ret_code			(((struct _vs_init_args FAR *) p_data) -> confirm.return_code)
#define Vs_init_cause				(((struct _vs_init_args FAR *) p_data) -> confirm.cause)
#define Vs_init_diagnostic			(((struct _vs_init_args FAR *) p_data) -> confirm.diagnostic)

#define	Vs_init_nai					(((struct _vs_init_args FAR *) p_data) -> nai)
#define	Vs_init_chan_id				(((struct _vs_init_args FAR *) p_data) -> chan_id)
#define	Vs_init_sapi				(((struct _vs_init_args FAR *) p_data) -> sapi)
#define	Vs_init_ces					(((struct _vs_init_args FAR *) p_data) -> ces)
#define	Vs_init_lli					(((struct _vs_init_args FAR *) p_data) -> lli)
#define	Vs_init_direction			(((struct _vs_init_args FAR *) p_data) -> direction)
#define	Vs_init_a_profile_id		(((struct _vs_init_args FAR *) p_data) -> t_profile_id)
#define	Vs_init_a_servprof_id		(((struct _vs_init_args FAR *) p_data) -> t_servprof_id)
#define	Vs_init_conn_est_timer_val	(((struct _vs_init_args FAR *) p_data) -> conn_est_timer_val)

#define	Vs_init_a_ph_ch_list		(&(((struct _vs_init_args FAR *)(p_data)) -> ph_ch_list))

#define	_Vs_init_ph_ch_list			(((struct _vs_init_args FAR *)(p_data)) -> ph_ch_list) .
#define	Vs_init_ph_ch_nb			_Vs_init_ph_ch_list nb_chani
#define	Vs_init_ph_ch_nai(i)		_Vs_init_ph_ch_list ph_ch[(i)].ph_nai
#define	Vs_init_ph_ch_sapi(i)		_Vs_init_ph_ch_list ph_ch[(i)].ph_sapi
#define	Vs_init_ph_ch_chani(i)		_Vs_init_ph_ch_list ph_ch[(i)].ph_chani

#define	Vs_init_a_v42b				(&(((struct _vs_init_args FAR *)(p_data)) -> v42b))
#define	Vs_init_v42b_resp_timer_val	(((struct _vs_init_args FAR *)(p_data)) -> v42b.resp_timer_val)
#define	Vs_init_v42b_p0				(((struct _vs_init_args FAR *)(p_data)) -> v42b.p0)
#define	Vs_init_v42b_p1				(((struct _vs_init_args FAR *)(p_data)) -> v42b.p1)
#define	Vs_init_v42b_p2				(((struct _vs_init_args FAR *)(p_data)) -> v42b.p2)

#define	Sizeof_vs_init				(sizeof (struct _vs_init_args))

/*
 *	Obsolete names. Kept for compatibility. Do not use.
 */
#define	vs_terminal_start_rq					_vs_init_args
#define	Vs_term_start_rq_nai 					Vs_init_nai
#define	Vs_term_start_rq_chan_id				Vs_init_chan_id
#define	Vs_term_start_rq_sapi					Vs_init_sapi
#define	Vs_term_start_rq_ces					Vs_init_ces
#define	Vs_term_start_rq_lli					Vs_init_lli
#define	Vs_term_start_rq_direction				Vs_init_direction
#define	Vs_term_start_rq_a_profile_id			Vs_init_a_profile_id
#define	Vs_term_start_rq_a_servprof_id			Vs_init_a_servprof_id
#define	Vs_term_start_rq_a_ph_ch_list			Vs_init_a_ph_ch_list
#define	Vs_term_start_rq_a_v42b					Vs_init_a_v42b
#define	Vs_term_start_rq_v42b_resp_timer_val	Vs_init_v42b_resp_timer_val
#define	Vs_term_start_rq_v42b_p0				Vs_init_v42b_p0
#define	Vs_term_start_rq_v42b_p1				Vs_init_v42b_p1
#define	Vs_term_start_rq_v42b_p2				Vs_init_v42b_p2

#define	Sizeof_vs_term_start_rq 				Sizeof_vs_init

/*---------------------------------------------------------------------------
 *	VS_STOP_RQ
 *	VS_STOP_CO
 *--------------------------------------------------------------------------*/
struct vs_terminal_stop_rq {

	struct confirm	confirm;			/*    co : 'return_code' is OK or NOK */

	nai_t		nai;					/* rq    : network access identifier (identifies the NETWORK access, not the DTE/application) */
	add_t		chan_id;				/* rq    : B-channel id (1..) */
	uchar		cause;					/* rq    : stop requested cause */
										/* 		   Possible values: VS_STOP_CAUSE_ORIGINATED, VS_STOP_CAUSE_LINE_DISC */
};

#define Vs_stop_ret_code			(((struct vs_terminal_stop_rq FAR *) p_data) -> confirm.return_code)
#define Vs_stop_confirm_cause		(((struct vs_terminal_stop_rq FAR *) p_data) -> confirm.cause)
#define Vs_stop_confirm_diagnostic	(((struct vs_terminal_stop_rq FAR *) p_data) -> confirm.diagnostic)
#define	Vs_stop_nai					(((struct vs_terminal_stop_rq FAR *) p_data) -> nai)
#define	Vs_stop_chan_id				(((struct vs_terminal_stop_rq FAR *) p_data) -> chan_id)
#define	Vs_stop_stop_cause			(((struct vs_terminal_stop_rq FAR *) p_data) -> cause)

/*
 *	Obsolete names. Kept for compatibility. Do not use.
 */
#define	Vs_term_stop_rq_nai			Vs_stop_nai
#define	Vs_term_stop_rq_chan_id		Vs_stop_chan_id
#define	Vs_term_stop_rq_cause		Vs_stop_stop_cause

#define	Sizeof_vs_term_stop_rq		(sizeof (struct vs_terminal_stop_rq))


/*---------------------------------------------------------------------------
 *		Internal primitives
 *--------------------------------------------------------------------------*/

	/*--------------------------*/
	/* Initialize (start) V.120 */
	/*--------------------------*/
struct v120_init {
	vs_term_id_t			jn_id;				/* junction (terminal) identifier */
	uchar					call_direction;		/* call direction : */
												/* VS_CALL_OUTGOING, VS_CALL_INCOMING or VS_CALL_NONE */
	char 					profile_id [VS_PROFILE_ID_MAX_LGTH + 1];	/* parameter profile identifier */
	char 					servprof_id[VS_SERVPROF_ID_MAX_LGTH + 1];	/* associated service profile identifier */

	timer_val_t				conn_est_timer_val;	/* 'conn_est_timer_val' : maximum duration for V.120 connection establishment */
												/* 0: no maximum duration */
	struct v120_v42b		v42b;				/* V.42bis negotiation parameters */
	struct v120_ph_ch_list 	ph_ch_list;			/* channel list */
};
#define	V120_init_a_ph_ch_list		(&(((struct v120_init FAR *)(p_data)) -> ph_ch_list))
#define	V120_init_call_direction	(((struct v120_init FAR *)(p_data)) -> call_direction)
#define	V120_init_conn_est_timer_val	\
			(((struct v120_init FAR *)(p_data)) -> conn_est_timer_val)
#define	V120_init_jn_id				(((struct v120_init FAR *)(p_data)) -> jn_id)
#define	V120_init_nai				(((struct v120_init FAR *)(p_data)) -> ph_ch_list.ph_ch[0].ph_nai)
#define	V120_init_profile_id		(((struct v120_init FAR *)(p_data)) -> profile_id)
#define	V120_init_servprof_id		(((struct v120_init FAR *)(p_data)) -> servprof_id)

#define	V120_init_a_v42b			(&(((struct v120_init FAR *)(p_data)) -> v42b))
#define	V120_init_v42b_resp_timer_val	\
									(((struct v120_init FAR *)(p_data)) -> v42b.resp_timer_val)
#define	V120_init_v42b_p0			(((struct v120_init FAR *)(p_data)) -> v42b.p0)
#define	V120_init_v42b_p1			(((struct v120_init FAR *)(p_data)) -> v42b.p1)
#define	V120_init_v42b_p2			(((struct v120_init FAR *)(p_data)) -> v42b.p2)

#define	V120_init_size				(sizeof (struct v120_init))


/*----------------------------------------------------------------------------
							VS PRIORITIES
 ---------------------------------------------------------------------------*/
#define	VS_MSG_PRIORITY_LOW		2					/* low priority message */
#define	VS_MSG_PRIORITY_HIGH	1					/* High priority message */

/*----------------------------------------------------------------------------
							VS CALL DIRECTION
 ---------------------------------------------------------------------------*/
#define	VS_CALL_NONE		'-'		/* no call (permanent link) */
#define	VS_CALL_INCOMING	'I'		/* incoming call */
#define	VS_CALL_OUTGOING	'O'		/* outgoing call */

/*----------------------------------------------------------------------------
							VS STOP CAUSES
 ---------------------------------------------------------------------------*/
#define		VS_STOP_CAUSE_ORIGINATED			'O'					/* originated by the DTE */
#define		VS_STOP_CAUSE_LINE_DISC				'C'					/* line is disconnected */

/*----------------------------------------------------------------------------
							VS PROFILES
 ---------------------------------------------------------------------------*/
#define		VS_PROFT_V120						1					/* standard VS profile type */

/*
 *	Obsolete names. Kept for compatibility. Do not use
 */
#define		VS_INTERFACE_V120				120					/* kept for compatibility with older versions */


/****************************************************************************
					CONFIGURATION (Structures & Parameters)
****************************************************************************/

/*
	WARNING :
		The first buffer of configuration must contain un minimum of
		informations to enable the VS to start : i.e. at least one network
		access context which contain at least ane service access context
		which contain at least one connection context; at least the default
		parameter profile context; and at least one terminal context.

		Additional (Network, service, connection, profile, or terminal)
		contexts can be added at any time using other buffers.

		Informations inside a context can be modified by giving the existing
		context reference with contained information fields changed.

		You can also add a new sub-context inside a context whenever you
		want (ex: service access context is a sub-context inside network
		access context) by giving the existing context reference with
		information fields unchanged and a new sub-context reference.
*/


#define		_Vs_configuration				((struct vs_config FAR *)(p_config))->

	/* Confirmation structure access macro
	--------------------------------------*/

#define 	Vs_cfg_ret_code					(Vs_cfg_confirm		return_code)
#define		Vs_cfg_diag						(Vs_cfg_confirm		diagnostic)
#define		Vs_cfg_cause					(Vs_cfg_confirm		cause)


	/* Data link level sapi attach management structure
	---------------------------------------------------*/

struct vs_config_dl_sapi_attach {
	nai_t					max_nb_line;							/* maximum number of lines supported */
	add_t					max_nb_channel_per_line;				/* maximum number of channels per line */
};

#define		Vs_cfg_max_nb_line				(Vs_cfg_dl_sapi_attach max_nb_line)
#define		Vs_cfg_max_nb_channel_per_line	(Vs_cfg_dl_sapi_attach max_nb_channel_per_line)

	/* Network configuration structure
	----------------------------------*/

struct vs_config_network {

	uchar									nb_cfg_network;			/* number of network access objects */

	struct {

		nai_t						nai;					/* network access identifier */

		struct {

			uchar 					nb_cfg_service;			/* number of service access objects */

			struct {

				sapi_t				sapi;					/* service access point id */
				uchar				interface;				/* obsolete and reserved - not used anymore */

				struct {	/* connection configuration main structure */

					uchar	nb_cfg_connection;				/* number of connections objects */

					struct {	/* connection configuration structure list */

						add_t		conn_id;		/* DL_CES, connection identifier */

					} t_connection [VS_CONFIG_MAX_NB_CFG_CONNECTION];

					/* Transmit queue parameters, to network (DL) */

					uchar	to_net_queue_high_mark;			/* high threshold in transmit queue (to network) before flow-controlling the DTE. Zero is possible */
					uchar	to_net_queue_low_mark;			/* low threshold in transmit queue (to network) before flow-releasing the DTE. Zero is possible. */
					uchar	to_net_sync_window;				/* max number of DA_RQ to send between two SYNC_RQ. */
															/* 0 means : no SYNC_RQ is ever sent (not recommended) */
															/* 2 means : two DA_RQ, one SYNC_RQ, two DA_RQ, etc. */
															/* Suggested values: (3,0,3) for a MLP connection */
															/* 					 (0,0,4) for a non multilink connection */

				} s_connection;

			} t_service [VS_CONFIG_MAX_NB_CFG_SERVICE];			/* service access configuration structure list */

		} s_service;												/* service access configuration main structure */

	} t_network [VS_CONFIG_MAX_NB_CFG_NETWORK];					/* network access configuration structure list */

};


#define		Vs_cfg_service(n)				(Vs_cfg_network			t_network[n].	s_service).
#define		Vs_cfg_connection(n,s)			(Vs_cfg_service(n)			t_service[s].	s_connection).

#define		Vs_cfg_nb_cfg_network			(Vs_cfg_network			nb_cfg_network)
#define		Vs_cfg_nai(n)					(Vs_cfg_network			t_network[n].	nai)

#define		Vs_cfg_nb_cfg_service(n)		(Vs_cfg_service(n)			nb_cfg_service)
#define		Vs_cfg_sapi(n,s)				(Vs_cfg_service(n)			t_service[s].	sapi)
#define		Vs_cfg_nb_cfg_connection(n,s)	(Vs_cfg_connection(n,s)	nb_cfg_connection)
#define		Vs_cfg_dl_ces(n,s,c)			(Vs_cfg_connection(n,s)	t_connection[c].conn_id)

#define		Vs_cfg_to_net_queue_high_mark(n,s)		(Vs_cfg_connection(n,s)	to_net_queue_high_mark)
#define		Vs_cfg_to_net_queue_low_mark(n,s)		(Vs_cfg_connection(n,s)	to_net_queue_low_mark)
#define		Vs_cfg_to_net_sync_window(n,s)			(Vs_cfg_connection(n,s)	to_net_sync_window)

	/* Terminal configuration structure
	-----------------------------------*/

struct vs_config_terminal {

	uchar				nb_cfg_terminal;		/* number of terminals */

	struct {
		vs_term_id_t	term_id;				/* terminal identifier */
		uchar			incoming_priority;		/* priority to receive incoming call */
		char			t_default_profile_id [VS_PROFILE_ID_MAX_LGTH + 1];
												/* default selected profile id */
	} t_terminal [VS_CONFIG_MAX_NB_CFG_TERMINAL];

	uchar				identification;			/* VS identification ON/OFF */
};

#define		Vs_cfg_nb_cfg_terminal			(Vs_cfg_terminal	nb_cfg_terminal)

#define		Vs_cfg_term_id(t)				(Vs_cfg_terminal	t_terminal[t].	term_id)
#define		Vs_cfg_term_incoming_priority(t) (Vs_cfg_terminal	t_terminal[t].	incoming_priority)
#define		Vs_cfg_a_def_profile_id(t)		(Vs_cfg_terminal	t_terminal[t].	t_default_profile_id)
#define		Vs_cfg_identification			(Vs_cfg_terminal	identification)

	/* Profile basic structure & configuration structure
	----------------------------------------------------*/

struct vs_profile_base {											/* basic vs parameter profile structure */
	char 			t_profile_id [VS_PROFILE_ID_MAX_LGTH + 1];	/* parameter profile identifier */
	char 			t_servprof_id[VS_SERVPROF_ID_MAX_LGTH + 1];	/* associated service profile identifier */
	vs_parm_val_t	t_profile_parm [VS_NB_PARM];			/* parameter profile values list */
	uchar			profile_type;							/* profile type */
};

#define		Sizeof_vs_profile_base			(sizeof (struct vs_profile_base))

	/* Profile basic structure & configuration structure
	----------------------------------------------------*/
struct vs_servprof_base {											/* basic vs service profile structure */
	char 		t_servprof_id [VS_SERVPROF_ID_MAX_LGTH + 1];/* service profile identifier */
	sapi_t		sapi;										/* service access id */
	add_t		ces;										/* connection id */
	ushort		lli;										/* logical link id */
};

#define		Sizeof_vs_servprof_base			(sizeof (struct vs_servprof_base))

struct vs_config_profile {											/* vs profiles configuration structure */
	uchar					nb_cfg_servprof;						/* number of service profiles */
	struct {
		struct vs_servprof_base
							s_servprof;								/* service profiles list */
	} t_servprof [VS_CONFIG_MAX_NB_CFG_SERVPROF];

	uchar					nb_cfg_prof;							/* number of profiles */
	struct {
		struct vs_profile_base
							s_profile;								/* profiles list */
	} t_profile [VS_CONFIG_MAX_NB_CFG_PROFILE];

};

#define		Vs_cfg_nb_cfg_servprof			(Vs_cfg_profile	nb_cfg_servprof)
#define		Vs_cfg_a_servprof_base(i)		(Vs_cfg_profile	t_servprof[i].	s_servprof)
#define		Vs_cfg_a_servprof_id(i)			(Vs_cfg_profile	t_servprof[i].	s_servprof.	t_servprof_id)
#define		Vs_cfg_servprof_sapi(i)			(Vs_cfg_profile	t_servprof[i].	s_servprof.	sapi)
#define		Vs_cfg_servprof_ces(i)			(Vs_cfg_profile	t_servprof[i].	s_servprof.	ces)
#define		Vs_cfg_servprof_lli(i)			(Vs_cfg_profile	t_servprof[i].	s_servprof.	lli)

#define		Vs_cfg_nb_cfg_profile			(Vs_cfg_profile	nb_cfg_prof)
#define		Vs_cfg_a_profile_base(i)		(Vs_cfg_profile	t_profile[i].	s_profile)
#define		Vs_cfg_a_profile_id(i)			(Vs_cfg_profile	t_profile[i].	s_profile.	t_profile_id)
#define		Vs_cfg_a_profile_parm(i)		(Vs_cfg_profile	t_profile[i].	s_profile.	t_profile_parm)

	/* VS configuration structure
	------------------------------*/

struct vs_config {

	struct confirm						s_cfg_confirm;				/* confirmation structure */
	uchar								unit;						/* VS or other unit */
	struct vs_config_dl_sapi_attach		s_cfg_dl_sapi_attach;		/* dl sapi attach management structure */
	struct vs_config_network			s_cfg_network;				/* vs network configuration structure */
	struct vs_config_terminal			s_cfg_terminal;				/* vs terminals configuration structure */
	struct vs_config_profile			s_cfg_profile;				/* vs profiles configuration structure */
	ulong								audit_add;					/* Not used naymore (audit start address : 0 (with VS_AUDIT_ARRAY == ON) to use internal array) */
	ushort								audit_size;					/* Not used anymore (audit area size) */
};

#define		Sizeof_vs_data_config			(sizeof (struct vs_config))

#define		Vs_cfg_confirm					(_Vs_configuration	s_cfg_confirm)			.
#define		Vs_cfg_unit						(_Vs_configuration	unit)
#define		Vs_cfg_dl_sapi_attach			(_Vs_configuration	s_cfg_dl_sapi_attach)	.
#define		Vs_cfg_network					(_Vs_configuration	s_cfg_network)			.
#define		Vs_cfg_terminal					(_Vs_configuration	s_cfg_terminal)			.
#define		Vs_cfg_profile					(_Vs_configuration	s_cfg_profile)			.
#define		Vs_cfg_timer					(_Vs_configuration	s_cfg_timer)			.
#define		Vs_cfg_audit_add				(_Vs_configuration	audit_add)
#define		Vs_cfg_audit_size				(_Vs_configuration	audit_size)


/*----------------------------------------------------------------------------
							VS EVENTS DEFINITIONS
----------------------------------------------------------------------------*/
#define		Vs_ev_mask(i)						(V120_EVENT | (i))

#define		VS_EV_NIL							Vs_ev_mask (0)		/* undefined event */
#define		VS_EV_START							Vs_ev_mask (1)		/* start VS unit event */
#define		VS_EV_STOP							Vs_ev_mask (2)		/* stop VS unit event */

#define		VS_EV_NETWORK_EST_IN				Vs_ev_mask (10)		/* network data indication event */
#define		VS_EV_NETWORK_EST_CO				Vs_ev_mask (11)		/* network data indication event */
#define		VS_EV_NETWORK_REL_IN				Vs_ev_mask (12)		/* network data indication event */
#define		VS_EV_NETWORK_REL_CO				Vs_ev_mask (13)		/* network data indication event */
#define		VS_EV_NETWORK_DA_IN					Vs_ev_mask (14)		/* network data indication event */
#define		VS_EV_NETWORK_BUSY_IN				Vs_ev_mask (15)		/* network busy indication event */
#define		VS_EV_NETWORK_CLEAR_BUSY_IN			Vs_ev_mask (16)		/* network clear busy indication event */
#define		VS_EV_NETWORK_INT_SYNC_CO			Vs_ev_mask (17)		/* network interface synchronization confirmation */

#if VS_V42B_NEGOTIATION == ON
#	define	VS_EV_NETWORK_SETPARM_CO			Vs_ev_mask (21)		/* DL negotiation confirmation */
#	define	VS_EV_NETWORK_SETPARM_IN			Vs_ev_mask (22)		/* DL negotiation confirmation */
#endif

#define		VS_EV_SM_DL_SAPI_RS					Vs_ev_mask (28)		/* X25 management sapi confirm event */
#define		VS_EV_SM_DL_DETACH_SAPI_RQ			Vs_ev_mask (29)		/* X25 management sapi detached indication event */

#define		VS_EV_TI_CONN_ESTABLISHMENT			Vs_ev_mask (31)		/* V.120 connection establishment watchdog expiration */
#if VS_V42B_NEGOTIATION == ON
#	define	VS_EV_TI_RESP_NEGOTIATION			Vs_ev_mask (32)		/* V.42bis negotiation watchdog expiration */
#endif

#define		VS_EV_TERMINAL_DA_RQ				Vs_ev_mask (41)		/* terminal data request event */
#define		VS_EV_TERMINAL_DA_RS				Vs_ev_mask (42)		/* terminal data request event */
#define		VS_EV_INIT_RQ						Vs_ev_mask (46)		/* terminal start request event */
#define		VS_EV_STOP_RQ						Vs_ev_mask (47)		/* terminal stop request event */
#define		VS_EV_TERMINAL_BUSY_RQ				Vs_ev_mask (49)		/* terminal flow control Busy request event */
#define		VS_EV_TERMINAL_CLEAR_BUSY_RQ		Vs_ev_mask (50)		/* terminal flow control clear busy request event */
#define		VS_EV_TERMINAL_BREAK_RQ				Vs_ev_mask (51)		/* terminal break request event */
#define		VS_EV_TERMINAL_INT_SYNC_RQ			Vs_ev_mask (52)		/* terminal interface synchronization request event */

#define		VS_EV_SM_SET_CONFIG_RQ				Vs_ev_mask (90)		/* system manager set configuration event */
#define		VS_EV_SM_BUSY_RQ					Vs_ev_mask (91)		/* system manager busy event */
#define		VS_EV_SM_CLEAR_BUSY_RQ				Vs_ev_mask (92)		/* system manager no more busy event */
#define		VS_EV_SM_STOP_RQ					Vs_ev_mask (93)		/* system manager desactivates VS event */
#if VS_RESET_CONFIG == ON
#	define	VS_EV_SM_RESET_CONFIG_RQ			Vs_ev_mask (94)		/* system manager reset configuration event */
#endif

#if NEW_FCT_STYLE == ON

	uchar			appli_sm_line_status_signal (
											nai_t		nai,
											add_t		chani,
											uchar		line_status);
	uchar 			v120_init_rq 			(struct v120_init FAR *p_data);
	void			vs_new_conn_state_report(uchar conn_state);
	uchar			vs_parameter_extern		(vs_term_id_t		term_id,
											 uchar				reference,
											 vs_parm_val_t FAR *a_value,
											 uchar				read);
	uchar			vs_process				(vs_ev_id_t 	event_id,
											 uchar FAR *	a_data,
											 ushort			data_size);
	vs_ev_id_t		vs_rcv					(void);
	uchar			vs_start				(vs_term_id_t	term_id,
											 nai_t			nai,
											 add_t			chan_id,
											 uchar			call_direction,
											 char FAR *		p_prof_id,
											 char FAR *		p_servprof_id,
											 uchar FAR *	p_more);
	uchar			vs_stop					(vs_term_id_t	term_id,
											 uchar			cause);
	uchar			vs_term_it_ctx_acc_in	(vs_term_id_t term_id);
	void			vs_term_it_send_data_in(struct message FAR * p_msg);
	void			vs_var_init			(void);					/* VS variables initialization */


#else	/* NEW_FCT_STYLE == ON */

	uchar			appli_sm_line_status_signal		();
	uchar 			v120_init_rq 			();
	void			vs_new_conn_state_report();
	uchar			vs_parameter_extern		();
	uchar			vs_process				();						/* vs event processing routine */
	vs_ev_id_t		vs_rcv					();						/* receive message routine */
	uchar			vs_start				();
	uchar			vs_stop					();						/* stop VS unit at line disconnection while it is still active */
	uchar			vs_term_it_ctx_acc_in	();						/* access to interrupt terminal context */
	void			vs_term_it_send_data_in	();						/* transmit data to interrupt terminal */
	void			vs_var_init				();						/* VS variables initialization */

#endif	/* NEW_FCT_STYLE == ON */


#if SIMULATION == ON			/* { */

#	if NEW_FCT_STYLE == ON
		uchar ana_sdu_dl 			(struct message FAR *p_msg);
		uchar ana_sdu_ti_vs 		(struct message FAR *p_msg);
		uchar ana_sdu_vs 			(struct message FAR *p_msg);
		uchar build_sdu_app_to_vs 	(void);
		uchar build_sdu_dl_to_vs 	(void);
		uchar build_sdu_sm_to_vs 	(void);
		uchar build_sdu_ti_to_vs 	(void);
		uchar build_sdu_v120_to_vs 	(void);
#	else
		uchar ana_sdu_dl 			();
		uchar ana_sdu_ti_vs 		();
		uchar ana_sdu_vs 			();
		uchar build_sdu_app_to_vs 	();
		uchar build_sdu_dl_to_vs 	();
		uchar build_sdu_sm_to_vs 	();
		uchar build_sdu_ti_to_vs 	();
		uchar build_sdu_v120_to_vs 	();
#	endif

#endif	/* SIMULATION == ON */	/* } */

#endif	/* ifndef VS_UNIT_H */

/*EOF*/

