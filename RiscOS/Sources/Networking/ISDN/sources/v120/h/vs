
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - vs.h
 *
 * $Revision$
 *
 * $Date$
 *
 *      - VS header
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    V.120 Functions Library                          |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef VS_H
#define VS_H

#include "services.h"
#include "vs_unit.h"

#if VS_TERMINAL_ENTITY == ENT_VS
#   include "vs_int.h"
#endif
/*---------------------------------------------------------------------------
                            FLAGS CONSISTENCY
 ---------------------------------------------------------------------------*/
#ifndef VS_ASSERT
#   define  VS_ASSERT			OFF
#endif
#ifndef VS_RESET_CONFIG
#   define  VS_RESET_CONFIG		RESET_CONFIG
#endif


#include "vs_util.h"
#include "vs_parm.h"
#include "app_sm.h"
#include "v120.h"

#if SIMULATION == ON
#   include "stdio.h"                                               /* only for fprintf () */
    extern      FILE    *f_out;                                     /* current output */
#endif


/*---------------------------------------------------------------------------
                                GLOBAL DATA
 ---------------------------------------------------------------------------*/
#if SIMULATION == ON

    extern  struct buffer   FAR *   p_buffer;                       /* point to buffer */
    extern  struct message  FAR *   p_snd_msg;                      /* point to sending message */
    extern  struct message  FAR *   p_rcv_msg;                      /* point to received message */

#else

#   if VS_TERMINAL_ENTITY == ENT_VS
#       define      p_buffer        p_buffer_vs
#       define      p_snd_msg       p_snd_msg_vs
#       define      p_rcv_msg       p_rcv_msg_vs

        extern  struct buffer   FAR *   p_buffer_vs;            /* point to buffer */
        extern  struct message  FAR *   p_snd_msg_vs;           /* point to sending message */
        extern  struct message  FAR *   p_rcv_msg_vs;           /* point to received message */
#   endif

#   if VS_TERMINAL_ENTITY == ENT_DTE_INT
#       define      p_buffer        p_buffer_dte
#       define      p_snd_msg       p_snd_msg_dte
#       define      p_rcv_msg       p_rcv_msg_dte

        extern  struct buffer   FAR *   p_buffer_dte;           /* point to buffer */
        extern  struct message  FAR *   p_snd_msg_dte;          /* point to sending message */
        extern  struct message  FAR *   p_rcv_msg_dte;          /* point to received message */
#   endif

#endif                                                              /* SIMULATION == ON */

/*----------------------------------------------------------------------------
                        VS NETWORK INTERFACE STATE
----------------------------------------------------------------------------*/
#define     VS_CONN_STATE_DISCONNECTED          0x01    /* no connection established */
#define     VS_CONN_STATE_CONNECTED             0x02    /* connection established */
#define     VS_CONN_STATE_CONN_IN_PROGRESS      0x04    /* connection is being established */
#if VS_V42B_NEGOTIATION == ON
#   define  VS_CONN_STATE_NEGO_IN_PROGRESS      0x08    /* V.42bis negotiation in progress */
#endif

/*----------------------------------------------------------------------------
                        VS TERMINAL INTERFACE STATE
 ---------------------------------------------------------------------------*/
#define VS_TERM_STATE_UNDEFINED             '-'

#define VS_TERM_STATE_BUSY                  'B'                 /* terminal is busy (treatment in progress) */
#define VS_TERM_STATE_COMMAND_IN_PROGRESS   'C'                 /* terminal command IN PROGRESS */
#define VS_TERM_STATE_DATA_TRANSFER         'D'                 /* terminal DATA TRANSFER */
#define VS_TERM_STATE_INACTIVE              'I'                 /* terminal is not active while network in CONN_IN_PROGRESS state */
#define VS_TERM_STATE_WAIT_FOR_COMMAND      'W'                 /* terminal waits for command while network in DISCONNECTED or CONNECTED state */


/*----------------------------------------------------------------------------
                        DL SAPI ATTACHED TO CHANNEL STATE
 ---------------------------------------------------------------------------*/
#define VS_DL_SAP_UNDEFINED         APPLI_SM_STATE_UNDEFINED        /* dl sap si undefined */
#define VS_DL_SAP_DETACHED          APPLI_SM_STATE_DETACHED         /* dl sap detached from channel */
#define VS_DL_SAP_BEING_ATTACHED    APPLI_SM_STATE_BEING_ATTACHED   /* dl sap being attached to channel */
#define VS_DL_SAP_ATTACHED          APPLI_SM_STATE_ATTACHED         /* dl sap attached to channel */
#define VS_DL_SAP_BEING_DETACHED    APPLI_SM_STATE_BEING_DETACHED   /* dl sap being detached from channel */


/*----------------------------------------------------------------------------
                        VS INTERRUPT TERMINAL MODES
 ---------------------------------------------------------------------------*/
#define VS_TERM_IT_MODE_UNDEFINED   0   /* interrupt terminal 'UNDEFINED' mode */
#define VS_TERM_IT_MODE_COMMAND     1   /* interrupt terminal 'COMMAND' mode */
#define VS_TERM_IT_MODE_DATA        2   /* interrupt terminal 'DATA' mode */

/*----------------------------------------------------------------------------
                            VS PURGE DATA TYPES
 ---------------------------------------------------------------------------*/
#define VS_TERMINAL_DATA            0x01                /* 'to terminal' data */
#define VS_TERMINAL_SERVICE         0x02                /* 'to terminal' service */
#define VS_NETWORK_DATA             0x04                /* 'to network' data */

/*----------------------------------------------------------------------------
                                    TIMERS
 ---------------------------------------------------------------------------*/

	/* Timer indexes */

#define  	VS_TI_CONN_ESTABLISHMENT_IX	0       /* 0: V.120 connection establishment */
#if VS_V42B_NEGOTIATION == ON
#   define  VS_TI_RESP_NEGOTIATION_IX   1       /* 1: V.42bis negotiation, responder side */
#endif

#if VS_V42B_NEGOTIATION == ON
#	define	VS_NB_TERMINAL_TIMERS       2
#else
#	define	VS_NB_TERMINAL_TIMERS		1
#endif

/*----------------------------------------------------------------------------
                            MISCELLANEOUS
 ---------------------------------------------------------------------------*/

#define     VS_CONN_INPUT_DATA_LGTH_IDX     0                       /* connection context  input data length index */
#define     VS_CONN_OUTPUT_DATA_LGTH_IDX    1                       /* connection context output data length index */


/****************************************************************************\

                            VS STRUCTURES DEFINITIONS

\****************************************************************************/


#define     _Vs_main                s_vs                            .
#define     _Vs_terminal_common     Vs_p_terminal_common            ->
#define     _Vs_terminal            Vs_p_terminal                   ->
#define     _Vs_network_common      Vs_p_network_common             ->
#define     _Vs_network             Vs_p_network                    ->
#define     _Vs_service_common      Vs_p_service_common             ->
#define     _Vs_service             Vs_p_service                    ->
#define     _Vs_connection_common   Vs_p_connection_common          ->
#define     _Vs_connection          Vs_p_connection                 ->
#define     _Vs_profile_common      Vs_p_profile_common             ->
#define     _Vs_profile             Vs_p_profile                    ->
#define     _Vs_servprof_common     Vs_p_servprof_common            ->
#define     _Vs_servprof            Vs_p_servprof                   ->
#define     _Vs_interface           Vs_p_interface                  ->


/*----------------------------------------------------------------------------

                                VS STRUCTURES

----------------------------------------------------------------------------*/


/*----------------------------
    VS TERMINAL STRUCTURES
-----------------------------*/

struct vs_terminal_common {

    uchar                       nb_terminal;                        /* number od terminals */
};

#define     Sizeof_vs_terminal_common       (Rnd_sizeof (struct node) +         \
                                             Rnd_sizeof (struct vs_terminal_common))
#define     Vs_nb_terminal                  (_Vs_terminal_common    nb_terminal)
#define     Vs_cmd_toupper                  (_Vs_terminal_common    cmd_toupper)


struct vs_terminal {    /* Asynchronous V.120 terminal context */
                        /*-------------------------------------*/
    vs_term_id_t                 term_id;       /* terminal identifier */

    struct vs_network       FAR *p_network;     /* associated network context pointer */
    struct vs_service       FAR *p_service;     /* associated service context pointer */
    struct vs_connection    FAR *p_connection;  /* associated connection context pointer */

    uchar                        status;        /* terminal status : ON <-> access information path is connected */
    uchar                        incoming_priority; /* priority to receive incoming call */

    struct v120_ph_ch_list       ph_ch_list;    /* list of physical channels */
    uchar                        busy;          /* ON: terminal is busy. OFF: terminal is not busy */
    uchar                        call_direction;/* call direction */
    uchar                        stop_requested;    /* stop VS unit is requested */
    uchar                        channel_reassign;  /* reassign channel to another dl sap */

	timer_val_t             	 conn_est_timer_val;/* V.120 connection establishment timer duration. 0: no watchdog */
	/*
     *  V.42bis compression parameters
     */
#   if VS_V42B_NEGOTIATION  == ON
        timer_val_t             resp_timer_val; /* V.42bis negotiation timer duration. 0: no negotiation */
        uchar                   p0;             /* V.42bis data compression request */
        ushort                  p1;             /* V.42bis number of codewords */
        uchar                   p2;             /* V.42bis maximum string length */
#   endif

    /*-----------------------
        profile parameters
    ------------------------*/

    struct vs_parm_description CONST FAR *a_parm_description;       /* parameters description list address */
    char                        t_default_prof_id [VS_PROFILE_ID_MAX_LGTH + 1];
                                                                    /* default profile id */
    struct vs_profile_base      s_current_profile;                  /* current parameter profile in use */
    struct vs_servprof_base     s_current_servprof;                 /* current service profile in use */

    /*----------
        timer
    -----------*/

    struct timer                s_timer [VS_NB_TERMINAL_TIMERS];    /* guard timer */

    /*----------
        status
    -----------*/

    uchar                       state;                              /* terminal state */

    uchar                       term_it_mode;                       /* interrupt terminal mode */
    uchar                       service_indication;                 /* set to TRUE after a service signal indication */

    uchar                       break_rq;                           /* BREAK requested by the terminal */

    struct message FAR *        a_queued_msg_high_prt;              /* output high priority queued messages */
    struct message FAR *        a_queued_msg_low_prt;               /* output low priority queued messages */

#   if VS_TERMINAL_ENTITY == ENT_VS
		struct message FAR *    p_init_stop_msg;                    /* address of the saved VS_INIT_RQ or VS_STOP_RQ message */
#   endif
};

#define     Sizeof_vs_terminal              (Rnd_sizeof (struct node) +         \
                                             Rnd_sizeof (struct vs_terminal))
#define     Vs_term_id                      (_Vs_terminal   term_id)
#define     Vs_term_status                  (_Vs_terminal   status)
#define     Vs_term_incoming_priority       (_Vs_terminal   incoming_priority)
#define     Vs_term_busy                    (_Vs_terminal   busy)
#define     Vs_term_stop_requested          (_Vs_terminal   stop_requested)
#define     Vs_term_ph_ch_list              (_Vs_terminal   ph_ch_list)
#define     Vs_term_first_chan_id           Vs_term_ph_ch_list.ph_ch[0].ph_chani
#define     Vs_term_nb_chani                Vs_term_ph_ch_list.nb_chani

#define     Vs_term_call_direction          (_Vs_terminal   call_direction)
#define     Vs_term_channel_reassign        (_Vs_terminal   channel_reassign)

#define     Vs_term_conn_est_timer_val      (_Vs_terminal   conn_est_timer_val)

#define     Vs_term_v42b_resp_timer_val     (_Vs_terminal   resp_timer_val)
#define     Vs_term_v42b_p0                 (_Vs_terminal   p0)
#define     Vs_term_v42b_p1                 (_Vs_terminal   p1)
#define     Vs_term_v42b_p2                 (_Vs_terminal   p2)

#define     Vs_a_parm_description           (_Vs_terminal   a_parm_description)
#define     Vs_a_default_profile_id         (_Vs_terminal   t_default_prof_id)
#define     Vs_a_cur_prof_id                (_Vs_terminal   s_current_profile.  t_profile_id)
#define     Vs_a_parm                       (_Vs_terminal   s_current_profile.  t_profile_parm)
#define     Vs_parm(ref)                    (_Vs_terminal   s_current_profile.  t_profile_parm [ref-1])
#define     Vs_cur_prof_type                (_Vs_terminal   s_current_profile.  profile_type)
#define     Vs_cur_servprof_sapi            (_Vs_terminal   s_current_servprof. sapi)
#define     Vs_cur_servprof_ces             (_Vs_terminal   s_current_servprof. ces)
#define     Vs_cur_servprof_lli             (_Vs_terminal   s_current_servprof. lli)
#define     Vs_a_cur_servprof_id            (_Vs_terminal   s_current_servprof. t_servprof_id)

#define     Vs_term_state                   (_Vs_terminal   state)
#define     Vs_service_indication           (_Vs_terminal   service_indication)

#define     Vs_term_timer(xx)               (_Vs_terminal   s_timer [xx])
#define     Vs_term_a_ti_id(xx)             (_Vs_terminal   s_timer [xx].id)
#define     Vs_term_ti_sn(xx)               (_Vs_terminal   s_timer [xx].sn)
#define     Vs_term_ti_state(xx)            (_Vs_terminal   s_timer [xx].state)

#define     Vs_term_it_mode                 (_Vs_terminal   term_it_mode)
#define     Vs_term_a_queued_msg_high_prt   (_Vs_terminal   a_queued_msg_high_prt)
#define     Vs_term_a_queued_msg_low_prt    (_Vs_terminal   a_queued_msg_low_prt)

#if VS_TERMINAL_ENTITY == ENT_VS
#   define  Vs_term_p_init_stop_msg			(_Vs_terminal   p_init_stop_msg)
#endif

#define     Vs_term_break_rq                (_Vs_terminal   break_rq)

#define     Vs_term_p_network               (_Vs_terminal   p_network)
#define     Vs_term_p_service               (_Vs_terminal   p_service)
#define     Vs_term_p_conn                  (_Vs_terminal   p_connection)

/*-------------------------
    VS NETWORK STRUCTURE
--------------------------*/

struct vs_network_common {

    uchar                       nb_network;                         /* number of following network access contexts */
};

#define     Sizeof_vs_network_common        (Rnd_sizeof (struct node) +     \
                                             Rnd_sizeof (struct vs_terminal_common))
#define     Vs_nb_network                   (_Vs_network_common nb_network)

struct vs_network {

    nai_t                       nai;                                /* Network access id */

    struct vs_terminal      FAR *p_terminal;                        /* associated terminal context pointer */
};

#define     Sizeof_vs_network               (Rnd_sizeof (struct node) +     \
                                             Rnd_sizeof (struct vs_terminal))
#define     Vs_network_nai                  (_Vs_network    nai)
#define     Vs_network_p_term               (_Vs_network    p_terminal)

/*--------------------------
    VS SERVICE STRUCTURES
---------------------------*/

struct vs_service_common {
    uchar                       nb_service;                         /* number of following service access contexts */
};

#define     Sizeof_vs_service_common        (Rnd_sizeof (struct node) +     \
                                             Rnd_sizeof (struct vs_service_common))
#define     Vs_nb_service                   (_Vs_service_common nb_service)

struct vs_service {
    sapi_t                      sapi;                               /* service access point id */
};

#define     Sizeof_vs_service               (Rnd_sizeof (struct node) +     \
                                             Rnd_sizeof (struct vs_service))
#define     Vs_sapi                         (_Vs_service    sapi)

/*-----------------------------
    VS CONNECTION STRUCTURES
------------------------------*/

struct vs_connection_common {
    uchar                       nb_connection;                      /* number of connections */
};

#define     Sizeof_vs_connection_common (Rnd_sizeof (struct node) +     \
                                             Rnd_sizeof (struct vs_connection_common))
#define     Vs_nb_connection                (_Vs_connection_common  nb_connection)

struct vs_connection {

    add_t           dl_ces;                 /* DL CES, connection id */

    uchar           send_initial_cs;        /* ON: send initial CS byte. OFF: do not send */
    uchar           state;                  /* connection state */

    ushort                  lli;                    /* logical link id */
    uchar                   info_ctrl_state;        /* information control state */
    uchar                   break_in;               /* break indication */
    uchar                   first_block;            /* first block of a frame */
    uchar                   last_block;             /* last block of a frame */
    uchar                   err_parity;             /* parity error */
    uchar                   err_stop_bit;           /* stop bit error */
    uchar                   mfo_established;        /* ON: multiple frame operation is established */
    uchar                   user_data_sent;         /* ON: user data have been sent to network */

    uchar                   last_sent_terminal_present; /* last 'terminal present' information sent to the remote */
    uchar                   last_sent_term_busy;    /* last 'terminal busy' information sent to the remote */
    uchar                   last_sent_break_rq;     /* last 'break present at the junction' information sent to the remote */

    struct message FAR *    a_msg_rcv_block;        /* (first) receive block message address */
    struct message FAR *    p_msg_rcv_block;        /* (last) receive block message pointer */

    struct message FAR *    to_net_fifo_first;      /* 'to network' fifo, address of first queued message */
    struct message FAR *    to_net_fifo_last;       /* 'to network' fifo, address of last  queued message */
    short                   to_net_fifo_high;       /* high mark. May be zero */
    short                   to_net_fifo_low;        /* low mark. May be zero */
    short                   to_net_in_fifo;         /* number of elements in 'to network' fifo */
    uchar                   to_net_queue_busy;      /* ON: transmit queue to network is too log. */
                                                    /* interface synchronization with DL */
    uchar                   to_net_nb_sent;         /* number of DATA_RQ sent since lat SYNC_RQ */
    uchar                   to_net_sync_window;     /* max number of DATA_RQ to send between two SYNC_RQ */
    uchar                   to_net_cpu_busy;        /* ON: CPU is busy, DL did not answer to our SYNC_RQ */
    uchar                   to_net_line_busy;       /* ON: DL sent us a DL_BUSY_IN */

    struct vs_terminal FAR* p_terminal;             /* associated terminal context pointer */
};

#define     Sizeof_vs_connection            (Rnd_sizeof (struct node) +     \
                                             Rnd_sizeof (struct vs_connection))

#define     Vs_dl_ces                       (_Vs_connection dl_ces)
#define     Vs_conn_state                   (_Vs_connection state)

#define     Vs_conn_lli                     (_Vs_connection lli)
#define     Vs_conn_break_in                (_Vs_connection break_in)
#define     Vs_conn_first_block             (_Vs_connection first_block)
#define     Vs_conn_last_block              (_Vs_connection last_block)
#define     Vs_conn_err_abort_or_parity     (_Vs_connection err_parity)
#define     Vs_conn_err_fcs_or_stop_bit     (_Vs_connection err_stop_bit)

#define     Vs_conn_info_ctrl_state         (_Vs_connection info_ctrl_state)
#define     Vs_conn_mfo_established         (_Vs_connection mfo_established)
#define     Vs_conn_send_initial_cs         (_Vs_connection send_initial_cs)
#define     Vs_conn_user_data_sent          (_Vs_connection user_data_sent)

#define     Vs_last_sent_terminal_present   (_Vs_connection last_sent_terminal_present)
#define     Vs_last_sent_term_busy          (_Vs_connection last_sent_term_busy)
#define     Vs_last_sent_break_rq           (_Vs_connection last_sent_break_rq)

#define     Vs_conn_a_msg_rcv_block         (_Vs_connection a_msg_rcv_block)
#define     Vs_conn_p_msg_rcv_block         (_Vs_connection p_msg_rcv_block)

#define     Vs_conn_to_net_fifo_first       (_Vs_connection to_net_fifo_first)
#define     Vs_conn_to_net_fifo_last        (_Vs_connection to_net_fifo_last)
#define     Vs_conn_to_net_fifo_high        (_Vs_connection to_net_fifo_high)
#define     Vs_conn_to_net_fifo_low         (_Vs_connection to_net_fifo_low)
#define     Vs_conn_to_net_in_fifo          (_Vs_connection to_net_in_fifo)
#define     Vs_conn_to_net_queue_busy       (_Vs_connection to_net_queue_busy)
#define     Vs_conn_to_net_nb_sent          (_Vs_connection to_net_nb_sent)
#define     Vs_conn_to_net_sync_window      (_Vs_connection to_net_sync_window)
#define     Vs_conn_to_net_cpu_busy         (_Vs_connection to_net_cpu_busy)
#define     Vs_conn_to_net_line_busy        (_Vs_connection to_net_line_busy)

#define     Vs_conn_p_term                  (_Vs_connection p_terminal)

#define Vs_conn_DR_R_on()           ((Vs_conn_info_ctrl_state & Sfi (V120_CS_DR, V120_CS_DR_ON)) != 0)
#define Vs_conn_RR_R_on()           ((Vs_conn_info_ctrl_state & Sfi (V120_CS_RR, V120_CS_RR_ON)) != 0)
#define Vs_conn_set_DR_RR_SR_R()    (Vs_conn_info_ctrl_state = (Sfi (V120_CS_DR, V120_CS_DR_ON) | Sfi (V120_CS_RR, V120_CS_RR_ON) | Sfi (V120_CS_SR, V120_CS_SR_ON)))


/*--------------------------
    VS PROFILE STRUCTURE
---------------------------*/

struct vs_profile_common {

    uchar                       nb_profile;                         /* number fo profiles */
};

#define     Sizeof_vs_profile_common        (Rnd_sizeof (struct vs_profile_common))

#define     Vs_nb_profile                   (_Vs_profile_common nb_profile)

struct vs_profile {
    struct vs_profile_base      s_profile_base;
};

#define     Sizeof_vs_profile               (Rnd_sizeof (struct node) +     \
                                             Rnd_sizeof (struct vs_profile))
#define     Vs_a_profile_base               ((struct vs_profile_base FAR *)\
                                             (&(_Vs_profile s_profile_base)))
#define     Vs_a_profile_id                 (_Vs_profile        s_profile_base. t_profile_id)
#define     Vs_a_profile_servprof_id        (_Vs_profile        s_profile_base. t_servprof_id)
#define     Vs_a_profile_parm               (_Vs_profile        s_profile_base. t_profile_parm)
#define     Vs_profile_type                 (_Vs_profile        s_profile_base. profile_type)

/*---------------------------------
    VS SERVICE PROFILE STRUCTURE
----------------------------------*/

struct vs_servprof_common {
    uchar                       nb_servprof;                            /* number fo profiles */
};

#define     Sizeof_vs_servprof_common       (Rnd_sizeof (struct vs_servprof_common))

#define     Vs_nb_servprof                  (_Vs_servprof_common    nb_servprof)

struct vs_servprof {
    struct vs_servprof_base s_servprof_base;
};

#define     Sizeof_vs_servprof              (Rnd_sizeof (struct node) +     \
                                             Rnd_sizeof (struct vs_servprof))
#define     Vs_a_servprof_base              ((struct vs_servprof_base FAR *)\
                                             (&(_Vs_servprof    s_servprof_base)))
#define     Vs_servprof_sapi                (_Vs_servprof       s_servprof_base.    sapi)
#define     Vs_servprof_ces                 (_Vs_servprof       s_servprof_base.    ces)
#define     Vs_servprof_lli                 (_Vs_servprof       s_servprof_base.    lli)
#define     Vs_a_servprof_id                (_Vs_servprof       s_servprof_base.    t_servprof_id)

/*---------------------------------------------
    VS PARSING/EXECUTION INTERFACE STRUCTURE
----------------------------------------------*/

struct vs_interface {

    uchar           parm_invalid_val_detected;          /* invalid value detected */
    uchar           parm_invalid_ref_detected;          /* invalid reference detected */


    uchar           t_parm_ref_select   [VS_NB_PARM+1]; /* X.3 parameters selected (to be read or/and set) indication table */
	uchar           t_parm_val_valid    [VS_NB_PARM+1]; /* X.3 parameters selected (to be read or/and set) indication table */
    vs_parm_val_t   t_parm_new_parm [VS_NB_PARM+1];     /* X.3 new parameters values */


    char            t_new_prof_id       [VS_PROFILE_ID_MAX_LGTH + 1];
    char            t_new_servprof_id   [VS_SERVPROF_ID_MAX_LGTH + 1];
                                                                    /* new parameter & service profile id */
};

#define     Sizeof_vs_interface             (Rnd_sizeof (struct vs_interface))

#define     Vs_parm_invalid_val_detected    (_Vs_interface      parm_invalid_val_detected)
#define     Vs_parm_invalid_ref_detected    (_Vs_interface      parm_invalid_ref_detected)
#define     Vs_parm_t_ref_select            (_Vs_interface      t_parm_ref_select)
#define     Vs_parm_t_val_valid             (_Vs_interface      t_parm_val_valid)
#define     Vs_parm_t_new_parm              (_Vs_interface      t_parm_new_parm)
#define     Vs_parm_ref_select(ref)         (_Vs_interface      t_parm_ref_select   [ref])
#define     Vs_parm_val_valid(ref)          (_Vs_interface      t_parm_val_valid    [ref])
#define     Vs_parm_new_parm(ref)           (_Vs_interface      t_parm_new_parm [ref])

#define     Vs_a_new_prof_id                (_Vs_interface      t_new_prof_id)
#define     Vs_a_new_servprof_id            (_Vs_interface      t_new_servprof_id)

/*-----------------------
    VS MAIN STRUCTURE
------------------------*/

struct vs {

    vs_ev_id_t                              event_id;               /* event identifier */
    uchar                                   status;                 /* VS status */
    ushort                                  error;                  /* possible error indicator */

    struct message                  FAR *   p_msg;                  /* message pointer */
    ushort                                  data_size;              /* buffer data size */
    ushort                                  buffer_data_lgth;       /* buffer data length */

    struct node                     FAR *   a_terminal_node;        /* terminal node structure address */
    struct vs_terminal_common       FAR *   p_terminal_common;      /* terminal common structure address */
    struct vs_terminal              FAR *   p_terminal;             /* current terminal structure address */

    struct node                     FAR *   a_network_node;         /* network node structure address */
    struct vs_network_common        FAR *   p_network_common;       /* network common structure address */
    struct vs_network               FAR *   p_network;              /* current network structure address */

    struct vs_service_common        FAR *   p_service_common;       /* service common structure address */
    struct vs_service               FAR *   p_service;              /* current service structure address */

    struct vs_connection_common     FAR *   p_connection_common;    /* connection common structure address */
    struct vs_connection            FAR *   p_connection;           /* current connection structure address */

    struct node                     FAR *   a_profile_node;         /* profile node structure address */
    struct vs_profile_common        FAR *   p_profile_common;       /* profile common structure address */
    struct vs_profile               FAR *   p_profile;              /* current profil structure pointer */

    struct node                     FAR *   a_servprof_node;        /* profile node structure address */
    struct vs_servprof_common       FAR *   p_servprof_common;      /* profile common structure address */
    struct vs_servprof              FAR *   p_servprof;             /* current profil structure pointer */

    struct vs_interface             FAR *   p_interface;            /* parsing/execution interface structure address */

};

#define     Vs_event_id                     (_Vs_main           event_id)
#define     Vs_status                       (_Vs_main           status)
#define     Vs_error                        (_Vs_main           error)

#define     Vs_p_msg                        (_Vs_main           p_msg)
#define     Vs_data_size                    (_Vs_main           data_size)
#define     Vs_buffer_data_lgth             (_Vs_main           buffer_data_lgth)

#define     Vs_a_terminal_node              (_Vs_main           a_terminal_node)
#define     Vs_p_terminal_common            (_Vs_main           p_terminal_common)
#define     Vs_p_terminal                   (_Vs_main           p_terminal)
#define     Vs_a_network_node               (_Vs_main           a_network_node)
#define     Vs_p_network_common             (_Vs_main           p_network_common)
#define     Vs_p_network                    (_Vs_main           p_network)
#define     Vs_p_service_common             (_Vs_main           p_service_common)
#define     Vs_p_service                    (_Vs_main           p_service)
#define     Vs_p_connection_common          (_Vs_main           p_connection_common)
#define     Vs_p_connection                 (_Vs_main           p_connection)
#define     Vs_a_profile_node               (_Vs_main           a_profile_node)
#define     Vs_p_profile_common             (_Vs_main           p_profile_common)
#define     Vs_p_profile                    (_Vs_main           p_profile)
#define     Vs_a_servprof_node              (_Vs_main           a_servprof_node)
#define     Vs_p_servprof_common            (_Vs_main           p_servprof_common)
#define     Vs_p_servprof                   (_Vs_main           p_servprof)
#define     Vs_p_interface                  (_Vs_main           p_interface)

/*---------------
    VARIABLES
----------------*/

extern struct vs                        s_vs;                       /* VS main structure */

/*------------
    CONSTANTS
 ------------*/
struct _vs_constants {
    uchar       min_dl_hole_size;       /* Minimum safe hole for data primitives to DL */
};

#define Vs_min_dl_hole_size             vs_constants.min_dl_hole_size

extern struct _vs_constants CONST vs_constants;

/****************************************************************************\

                        VS MACRO-FUNCTIONS DEFINITIONS

\****************************************************************************/

/*----------------------------------------------------------------------------

                            MACRO-FUNCTIONS

----------------------------------------------------------------------------*/

/*------------
    General
-------------*/
#if VS_TERMINAL_ENTITY == ENT_VS
    /*
     *  Echo a primitive, with a struct confirm at the beginning of the
     *  arguments.
     */
#define Vs_echo_confirm(_p_msg, code, ret_code, cause, diagnostic)      \
    { struct message FAR *p_msg; struct buffer FAR *p_buffer;           \
      uchar FAR *p_data; ent_id_t ent_tmp;                              \
      p_msg = _p_msg;                                                   \
      if (p_msg != P_NIL) {  p_data = L_a_data;                         \
		ent_tmp = L_msg_from; L_msg_from = L_msg_to; L_msg_to = ent_tmp;\
		L_msg_code = code; Confirm_ret_code = ret_code;                 \
		Confirm_cause = cause; Confirm_diagnostic = diagnostic;         \
		Send_message (p_msg); }                                         \
	}

#if VS_V42B_NEGOTIATION == ON
#	define	Vs_echo_init_co_ok(_p_msg)										\
	{ struct message FAR *p_msg; struct buffer FAR *p_buffer;				\
	  uchar FAR *p_data;													\
		p_msg = _p_msg; p_data = L_a_data;									\
		Vs_init_v42b_resp_timer_val = Vs_term_v42b_resp_timer_val;			\
		Vs_init_v42b_p0		= Vs_term_v42b_p0;								\
		Vs_init_v42b_p1		= Vs_term_v42b_p1;								\
		Vs_init_v42b_p2		= Vs_term_v42b_p2;								\
	} Vs_echo_confirm (_p_msg, VS_INIT_CO, OK, 0, 0);

#else
#	define	Vs_echo_init_co_ok(_p_msg)										\
	{ struct message FAR *p_msg; struct buffer FAR *p_buffer;				\
	  uchar FAR *p_data;													\
		p_msg = _p_msg; p_data = L_a_data;									\
		Vs_init_v42b_resp_timer_val = 0;									\
		Vs_init_v42b_p0		= 0;											\
		Vs_init_v42b_p1		= 0;											\
		Vs_init_v42b_p2		= 0;											\
	} Vs_echo_confirm (_p_msg, VS_INIT_CO, OK, 0, 0);

#endif

#define	Vs_echo_init_co_nok(_p_msg)										\
			Vs_echo_confirm (_p_msg, VS_INIT_CO, NOK, 0, 0);

#endif

#define     No_break

#   ifdef VS_INPUT_INTERFACE

#       define  Vs_exit_if(expression)                                          \
            if (expression != OK) goto VS_EXIT
#   else

#       define  Vs_exit_if(expression)                                          \
            if (expression == NOK) return (NOK)

#   endif


/*-----------------
    ACCESS MACRO
------------------*/

    /* Access to the connection common context
    ------------------------------------------*/

#define     Vs_connection_common_access()                                   \
    p_node                  = ((struct node FAR *) (Vs_p_service)) - 1;     \
    p_node                  = Down_node;                                    \
    Vs_p_connection_common  = (struct vs_connection_common FAR *)(p_node + 1)

    /* Access to next terminal context
    ----------------------------------*/

#define     Vs_next_terminal_access()                                       \
    p_node          = Next_node;                                            \
    Vs_p_terminal   = (struct vs_terminal FAR *)(p_node + 1)

    /* Access to next network context
    ---------------------------------*/

#define     Vs_next_network_access()                                        \
    p_node          = Next_node;                                            \
    Vs_p_network    = (struct vs_network FAR *)(p_node + 1)

    /* Access to next service context
    ---------------------------------*/

#define     Vs_next_service_access()                                        \
    p_node          = Next_node;                                            \
    Vs_p_service    = (struct vs_service FAR *)(p_node + 1)

    /* Access to next connection context
    ------------------------------------*/

#define     Vs_next_connection_access()                                     \
    p_node          = Next_node;                                            \
    Vs_p_connection= (struct vs_connection FAR *)(p_node + 1)

    /* Access to next parameter profile context
    -------------------------------------------*/

#define     Vs_next_profile_access()                                        \
    p_node          = Next_node;                                            \
    Vs_p_profile    = (struct vs_profile FAR *)(p_node + 1)

    /* Access to the service common context
    ---------------------------------------*/

#define     Vs_service_common_access()                                      \
    p_node                  = ((struct node FAR *) (Vs_p_network)) - 1;     \
    p_node                  = Down_node;                                    \
    Vs_p_service_common = (struct vs_service_common FAR *)(p_node + 1)

    /* Access to next service profile context
    -----------------------------------------*/

#define     Vs_next_servprof_access()                                       \
    p_node          = Next_node;                                            \
    Vs_p_servprof   = (struct vs_servprof FAR *)(p_node + 1)

    /* Link terminal context to network-service-connection context
    --------------------------------------------------------------*/

#define     Vs_terminal_nsc_link()                                          \
    Vs_term_p_network   = Vs_p_network;                                     \
    Vs_term_p_service   = Vs_p_service;                                     \
    Vs_term_p_conn      = Vs_p_connection;                                  \
    Vs_conn_p_term      = Vs_p_terminal;                                    \
    Vs_network_p_term   = Vs_p_terminal

    /* unlink terminal context to network-service-connection context
    ----------------------------------------------------------------*/

#define     Vs_terminal_nsc_unlink()                                   \
	Vs_term_p_network   = P_NIL;   	                                   \
	Vs_term_p_service   = P_NIL;                                       \
	Vs_term_p_conn      = P_NIL;                                       \
	Vs_network_p_term   = P_NIL;                                       \
	Vs_conn_p_term      = P_NIL

    /* set parameters value
    ---------------------------*/

#define     Vs_setparm(ref,val)                                             \
    Vs_parm ((ref)) = val

/*----------------
    STATE MACRO
-----------------*/
    /*
     *  read and set connection state
     */
#define Vs_conn_state_read()                Vs_conn_state
#define Vs_conn_state_set(conn_state)                                   \
        Vs_new_conn_state_report (conn_state); Vs_conn_state = conn_state

    /*
     *  read and set terminal state
     */
#define Vs_term_state_modify(term_state)    Vs_term_state = term_state
#define Vs_term_state_read()                Vs_term_state

    /* reset terminal last state
    ----------------------------*/
#define Vs_term_last_state_reset()          Vs_term_last_state = VS_TERM_STATE_UNDEFINED


/*----------------------
    DATA END OF STREAM
-----------------------*/

    /* Reading of end of stream condition in a data message/buffer
    --------------------------------------------------------------*/

#define Vs_s_end_of_stream                  (S_msg_inf0 == ON)
#define Vs_r_end_of_stream                  (R_msg_inf0 == ON)
#define Vs_l_end_of_stream                  (L_msg_inf0 == ON)

    /* Setting of end of stream condition in a data message/buffer
    --------------------------------------------------------------*/

#define Vs_s_set_end_of_stream()            (S_msg_inf0 = ON)
#define Vs_s_reset_end_of_stream()          (S_msg_inf0 = OFF)

/*----------------
    TIMER MACRO
-----------------*/

#define Vs_time_out_valid_term(xx)                                          \
    ((Vs_term_ti_state((xx)) == ON) && (R_msg_inf0 == Vs_term_ti_sn((xx))))


/*----------------
    OTHER MACRO
-----------------*/

    /* Event definition macro
    -------------------------*/

#define     Vs_free_multi_msg(p_message)                                    \
    {                                                                       \
        register struct message FAR *p_msg;                                 \
        register struct message FAR *p_next_msg;                            \
                                                                            \
        p_msg = p_message;                                                  \
                                                                            \
        while (p_msg != P_NIL) {                                            \
            p_next_msg = Next (p_msg);                                      \
            Free_msg (p_msg);                                               \
            p_msg = p_next_msg;                                             \
        }                                                                   \
                                                                            \
        p_message = P_NIL;                                                  \
    }

    /* save & restore message
    -------------------------*/

#if VS_ASSERT == ON

#   define      Vs_message_save(p_msg)                                      \
        if (Vs_p_msg == P_NIL) {                                            \
            Vs_p_msg    = p_msg;                                            \
            p_msg       = P_NIL;                                            \
        } else {                                                            \
            vs_error_process (VS_ERR_UNDEFINED);                            \
            return (NOK);                                                   \
        }

#   define      Vs_message_restore(p_msg)                                   \
        if (p_msg == P_NIL) {                                               \
            p_msg       = Vs_p_msg;                                         \
            Vs_p_msg    = P_NIL;                                            \
        } else {                                                            \
            vs_error_process (VS_ERR_UNDEFINED);                            \
            return (NOK);                                                   \
        }

#else

#   define      Vs_message_save(p_msg)                                      \
        Vs_p_msg    = p_msg;                                                \
        p_msg       = P_NIL

#   define      Vs_message_restore(p_msg)                                   \
        p_msg       = Vs_p_msg;                                             \
        Vs_p_msg    = P_NIL
#endif

	/* Check if parameter reference is valid
    -------------------------------------------*/

#define     Vs_parm_ref_valid(ref)      ((ref) && ((ref) <= VS_NB_PARM))

	/* Test congestion
    ------------------*/
#define  Vs_system_congestion_busy   Congestion_busy

/*----------------------------------------------------------------------------

                        FUNCTIONS CALLED BY MACRO

----------------------------------------------------------------------------*/

#define     Vs_acc_info_path_disc()                                         \
    Vs_exit_if (vs_acc_info_path_disc ())

#define     Vs_config_co(ret_code)                                          \
    Vs_exit_if (vs_config_co (ret_code))

#define     Vs_conn_state_check(check_conn_state)                           \
    vs_conn_state_check (check_conn_state)

#define     Vs_connection_access(dl_ces)                                    \
    if (vs_connection_access (dl_ces) != dl_ces) {                          \
        vs_error_process (VS_ERR_ERRONEOUS_CONNECTION_REFERENCE);           \
        return (NOK);                                                       \
    }

#define     Vs_ctrl_terminal()                                              \
    Vs_exit_if (vs_ctrl_terminal ())

#define Vs_dl_sapi_attach_state_read(nai, chani)                            \
        ((Vs_term_call_direction == VS_CALL_NONE) ?                         \
            VS_DL_SAP_DETACHED : appli_sm_dl_sapi_state_read (nai, chani))

#define     Vs_evnt_data()                                                  \
    Vs_exit_if (vs_evnt_data ())

#define     Vs_exe_set()                                                    \
    Vs_exit_if (vs_exe_set ())

#define     Vs_incoming_terminal_assign()                                   \
    Vs_exit_if (vs_incoming_terminal_assign ())

#define     Vs_network_access(nai)                                          \
    if (vs_network_access (nai) != nai) {                                   \
        vs_error_process (VS_ERR_ERRONEOUS_NETWORK_REFERENCE);              \
        return (NOK);                                                       \
    }

#define     Vs_nsc_access(nai, sapi, dl_ces)                                \
    Vs_exit_if (vs_nsc_access (nai, sapi, dl_ces))

#define     Vs_oper_profile(p_prof_id, p_servprof_id)                       \
    Vs_exit_if (vs_oper_profile (p_prof_id, p_servprof_id))

#if VS_ASSERT == ON
#   define      Vs_assert(cond, cause, string)  if (!(cond)) { Trap (cause, string); }
#else
#   define      Vs_assert(cond, cause, string)
#endif

#define     Vs_service_access(sapi)                                         \
    if (vs_service_access (sapi) != sapi) {                                 \
        vs_error_process (VS_ERR_ERRONEOUS_SERVICE_REFERENCE);              \
        return (NOK);                                                       \
    }

#define     Vs_set_new_profile(a_prof_parm, remote)                         \
    Vs_exit_if (vs_set_new_profile (a_prof_parm, remote))

#define     Vs_snd_terminal(code, priority)                                 \
    Vs_exit_if (vs_snd_terminal (code, priority))

#define     Vs_term_multi_data_queue(p_message)                             \
    {                                                                       \
        register struct message FAR *p_msg;                                 \
                                                                            \
        p_msg = p_message;                                                  \
                                                                            \
        while (p_msg != P_NIL) {                                            \
            vs_term_data_queue (p_msg, VS_MSG_PRIORITY_LOW);                            \
            p_msg = Next (p_msg);                                           \
        }                                                                   \
                                                                            \
        p_message = P_NIL;                                                  \
    }

#if VS_TERMINAL_ENTITY == ENT_DTE_INT

#   define      Vs_term_it_setparm_rq()                                     \
        Vs_exit_if (vs_term_it_setparm_rq ())

#endif

#if VS_TERMINAL_ENTITY == ENT_VS

#   define      Vs_term_it_setparm_rq()

#endif

#define     Vs_term_state_reset()                                           \
    Vs_exit_if (vs_term_state_reset ())

#define     Vs_term_state_set(term_state)                                   \
    Vs_exit_if (vs_term_state_set (term_state))

#define     Vs_terminal_access(term_id)                                     \
	if (vs_terminal_access_from_term_id (term_id) != term_id) {             \
        vs_error_process (VS_ERR_TERMINAL_REFERENCE_1);                     \
        return (NOK);                                                       \
    }

#define Vs_timer_term_start(type)           vs_timer_term_set (type, ON)
#define Vs_timer_term_stop(type)            vs_timer_term_set (type, OFF)

#define     Vs_parameter_set(force)                                         \
    Vs_exit_if (vs_parameter_set (force))


/*----------------------------------------------------------------------------
                                ERROR CODES
 ---------------------------------------------------------------------------*/
#define     VS_ERR_NONE                             0       /* no error */

#define     VS_ERR_PROFILE_ID_MISSING               2330    /* 0x91A : profile id is missing */
#define     VS_ERR_PROFILE_UNKNOWN                  2331    /* 0x91B : parameter profile is unknown */
#define     VS_ERR_PROFILE_LGTH_EXCEEDED            2332    /* 0x91C : parameter profile length is exceeded */
#define     VS_ERR_PROFILE_INVALID                  2333    /* 0x91D : profile is invalid */
#define     VS_ERR_SERVPROF_ID_MISSING              2334    /* 0x91E : service profile id is missing */
#define     VS_ERR_SERVPROF_UNKNOWN                 2335    /* 0x91F : service profile is unknown */
#define     VS_ERR_SERVPROF_LGTH_EXCEEDED           2336    /* 0x920 : service profile length is exceeded */

/*---------------------------------------------------------------------------
 *                          Trap codes for APP_SM
 *--------------------------------------------------------------------------*/
#define     VS_TRAP_ATTACH_CFG                      2341    /* 0x925 : error while configuring attach data structure */
#define     VS_TRAP_ATTACH_COLLISION                2342    /* 0x926 : error upon attach confirmation, unprocessed collision */
#define     VS_TRAP_ATTACH_STATE                    2343    /* 0x927 : error, state inconsistency */
#define     VS_TRAP_ATTACH_REJECTED                 2344    /* 0x928 : error, attach or detach rejected by SM */
#define     VS_TRAP_ACCESS_CHAN_1                   2345    /* 0x929 : attach context not found, all contexts are in use */
#define     VS_TRAP_ACCESS_CES_1                    2347    /* 0x92B : attach context not found, all contexts are in use */
#define     VS_TRAP_ACCESS_CES_2                    2348    /* 0x92C : attach context not found, invalid nai */

/*--------------------------------------------------------------------------*/

#define     VS_ERR_INSUFFICIENT_RESOURCE            2351    /* 0x92F : can't allocate resource */
#define     VS_ERR_ENTITY_UNKNOWN                   2352    /* 0x930 : entity is unknown */
#define     VS_ERR_PRIMITIVE_UNKNOWN                2353    /* 0x931 : primitive is unknown */
#define     VS_ERR_EVENT_UNKNOWN                    2354    /* 0x932 : event is unknown */
#define     VS_ERR_TERMINAL_REFERENCE_1             2355    /* 0x933 : connection references (nai, sapi, dl_ces) are not correct */
#define     VS_ERR_TERMINAL_REFERENCE_2             2356    /* 0x934 : connection references (nai, sapi, dl_ces) are not correct */
#define     VS_ERR_NET_FIFO_THRESHOLDS              2357    /* 0x935 : error in the transmit (to network) fifo thresholds */


#define     VS_ERR_ERRONEOUS_NETWORK_REFERENCE      2361    /* 0x939 : connection references (nai, sapi, dl_ces) are not correct */
#define     VS_ERR_ERRONEOUS_SERVICE_REFERENCE      2362    /* 0x93A : connection references (nai, sapi, dl_ces) are not correct */
#define     VS_ERR_ERRONEOUS_CONNECTION_REFERENCE   2363    /* 0x93B : connection references (nai, sapi, dl_ces) are not correct */
#define     VS_ERR_DL_SAPI_DETACH_FAILED            2364    /* 0x93C : data link level sapi detach failed */
#define     VS_ERR_CTX_ASSIGNMENT                   2365    /* 0x93D : VS contexts are not correctly assigned */
#define     VS_ERR_DL_SAPI_ATTACH_FAILED            2366    /* 0x93E : data link level sapi attach failed */
#define     VS_ERR_CONFIG_NEVER_BEEN                2367    /* 0x93F : must set configuration before running */
#define     VS_ERR_NO_CONNECTION_ESTABLISHED        2369    /* 0x941 : connection is not established */

#define     VS_ERR_CONNECTION_SATURATE              2370    /* 0x942 : connections are saturate */
#define     VS_ERR_CONFIG_NULL_NB_CFG_OBJECT        2372    /* 0x944 : null number of configuration objects to configurate in VS inactive state */
#define     VS_ERR_CONFIG_CTX_ACC                   2373    /* 0x945 : context access error */
#define     VS_ERR_CONF_WITHOUT_REQUEST             2374    /* 0x946 : confirmation received without request */
#define     VS_ERR_INAPPROPRIATE_EVENT              2375    /* 0x947 : event is not appropriate to the current state */
#define     VS_ERR_INCOHERENT_ACTION_CONFIRMATION   2378    /* 0x94A : confirmation to undertaken action is not coherent */
#define     VS_ERR_WORK_BUFFER_OVERFLOW             2379    /* 0x94B : work buffer is overflow */
#define     VS_ERR_CONFIG_INCOHERENT_DATA           2380    /* 0x94C : incoherent data detected */

#define     VS_TRAP_P_SND_MSG                       2382    /* 0x94E : problem with p_snd_msg */
#define     VS_TRAP_P_MSG                           2383    /* 0x94F : problem with p_msg */
#define     VS_TRAP_HOLE                            2384    /* 0x950 : data do not leave space for hole */
#define     VS_TRAP_NET_QUEUE                       2385    /* 0x951 : queue 'to network' is in an inconsistent state */

#define     VS_ERR_UNDEFINED                        2399    /* 0x95F : undefined error */

#define     VS_TRAP_ASSERT_01                       2401    /* 0x961 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_02                       2402    /* 0x962 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_03                       2403    /* 0x963 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_04                       2404    /* 0x964 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_05                       2405    /* 0x965 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_06                       2406    /* 0x966 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_07                       2407    /* 0x967 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_08                       2408    /* 0x968 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_09                       2409    /* 0x969 : assertion trap # 1 */
#define     VS_TRAP_ASSERT_10                       2410    /* 0x96A : assertion trap # 10 */
#define     VS_TRAP_ASSERT_11                       2411    /* 0x96B : assertion trap # 11 */

/*****************************************************************************
                            INTERNAL SEND CODES
*****************************************************************************/

/*-------------
    TERMINAL
--------------*/

#   define  VS_TERMINAL_DA_IN               0                       /* terminal data indication */
#   define  VS_TERMINAL_SIGNAL_IN           1                       /* terminal signal indication */
#   define  VS_TERMINAL_BUSY_IN             2                       /* terminal Flow Control busy indication */
#   define  VS_TERMINAL_CLEAR_BUSY_IN       3                       /* terminal Flow Control clear busy indication */

/*-----------------
    TABLE ACCESS
------------------*/
#define     Vs_conv_term_snd_code(int_code)     t_vs_conv_term_snd_code[int_code]
#define     Vs_conv_term_it_mode(mode)          t_vs_conv_term_it_mode [mode]

/*--------------------
    MACRO FUNCTIONS
---------------------*/

#if VS_TERMINAL_ENTITY == ENT_VS

#   define  Vs_term_it_send_data_in(p_msg)                                  \
        Send_message (p_msg);                                               \
        p_msg = P_NIL

#   define  Vs_term_it_ctx_acc_in(term_id)      OK
#   define  Vs_new_conn_state_report(conn_state)

#endif

#if VS_TERMINAL_ENTITY == ENT_DTE_INT

#   define  Vs_term_it_send_data_in(p_msg)                                  \
        vs_term_it_send_data_in(p_msg);                                     \
        p_msg = P_NIL

#   define  Vs_term_it_ctx_acc_in(term_id)                                  \
        vs_term_it_ctx_acc_in (term_id)

#   define  Vs_new_conn_state_report(conn_state)                            \
        vs_new_conn_state_report (conn_state)

#endif


/*****************************************************************************

                    EXTERNAL DECLARATION & PROTOTYPES

*****************************************************************************/

extern code_t   CONST_ARRAY t_vs_conv_term_snd_code [];         /* terminal send code conversion table */
extern uchar    CONST_ARRAY t_vs_conv_term_it_mode      [];         /* interrupt terminal mode conversion table */

/****************************************************************************\

                        PROTOTYPES DECLARATIONS

\****************************************************************************/

		/*----------------
            VS ROUTINES
        -----------------*/

#if NEW_FCT_STYLE == ON

#   if OM_CODE_TYPE == OM_PIC
    void        pic_init_t_vs_parm_description (void);              /* PIC initialization */
#   endif

    uchar       vs_acc_info_path_disc       (void);                 /* access information path disconnection */

	uchar       vs_config_co                (uchar ret_code);       /* configuration confirmation routine */
    uchar       vs_conn_state_check         (uchar check_conn_state);
    add_t       vs_connection_access        (add_t  dl_ces);        /* access to connection */
    uchar       vs_ctrl_network             (void);                 /* network incoming events control routine */
    uchar       vs_ctrl_terminal            (void);                 /* terminal events control routine */
    void        vs_cur_servprof_update      (void);                 /* update current profile references */
    uchar       vs_cur_servprof_update_needed
                                            (void);                 /* need to update current profile references */
    uchar       vs_desactivate              (void);                 /* desactivate the VS, free all allocated ressources */
    void        vs_disconnection            (void);
    void        vs_dl_est_rq                (void);
    void        vs_dl_send_jn_state         (void);
    uchar       vs_error_process            (ushort err);
    uchar       vs_evnt_data                (void);                 /* data indication event processing routine */
    uchar       vs_exe_break                (void);                 /* Break execution */
    uchar       vs_exe_exit_from_vs         (void);                 /* Exit from VS */
    uchar       vs_exe_profile              (void);                 /* Profile id execution */
    uchar       vs_exe_read                 (void);                 /* Read parameters execution */
    uchar       vs_exe_set                  (void);                 /* Set parameters execution */
    uchar       vs_exe_setread              (void);                 /* Set and read parameters execution */
	void        vs_flow_ctrl_rq_to_terminal (uchar);                /* request flow control to terminal */
    uchar       vs_incoming_terminal_assign (void);                 /* assign a terminal to an incoming call */
    void        vs_info_header_format       (struct message FAR * p_msg,
                                             struct buffer  FAR * p_buffer,
                                             uchar put_first,
                                             uchar put_second);
    struct node FAR *
                vs_last_node_access         (struct node FAR * a_node);
    struct node FAR *
                vs_list_build               (ushort nb_object,
                                             ushort object_size);   /* build one objects list */
    nai_t       vs_network_access           (nai_t nai);            /* access to network context */
    void        vs_network_queued_frames_transmit   (void);
    void        vs_new_connection_init      (void);                 /* initialize new connection */
    uchar       vs_nsc_access               (nai_t  nai,
                                             sapi_t sapi,
                                             add_t  dl_ces);        /* access to network, service and connection contexts */
    uchar       vs_object_build             (uchar FAR *p_data);
    uchar       vs_object_init              (uchar FAR *p_data);
    void        vs_oper_break               (void);                 /* Break operation */
	uchar       vs_oper_profile             (char FAR * p_prof_id,
											 char FAR * p_servprof_id);
	void        vs_outgoing_nsc_assign      (void);                 /* access to network, service and connection contexts for outgoing call */
	void        vs_queued_data_purge        (uchar purge);
	uchar       vs_profile_access           (char FAR *p_profile_id);
#	if VS_RESET_CONFIG == ON
		uchar	vs_reset_config             (void);
#	endif
	sapi_t      vs_service_access           (sapi_t sapi);          /* access to service context */
	uchar       vs_servprof_access          (char FAR *p_servprof_id);
	uchar       vs_set_config               (uchar FAR *p_data);
	uchar       vs_set_new_profile          (vs_parm_val_t FAR *
														a_prof_parm,
											 uchar      remote);    /* set new profile */
	void        vs_snd_network              (code_t code, uchar FAR *p_data);
	uchar       vs_snd_terminal             (code_t     code,
											 priority_t priority);  /* send message to terminal */
	void        vs_snd_terminal_preamble    (code_t     code,
											 priority_t priority);  /* send message to terminal preamble */
	void        vs_term_break_signal_transmit (void);
	void        vs_term_data_queue          (struct message FAR *p_msg,
											 priority_t priority);
    void        vs_term_data_receive        (struct message FAR * p_msg);
    void        vs_term_queued_data_transmit (void);
    uchar       vs_term_state_reset         (void);                 /* terminal state reset routine */
    uchar       vs_term_state_set           (uchar term_state);     /* terminal state set routine */
    void        vs_term_it_mode_set         (uchar mode);           /* set interrupt terminal mode */
	nai_t       vs_terminal_access_from_dl_sapi_ces (sapi_t dl_sapi, add_t dl_ces);
	nai_t       vs_terminal_access_from_term_id  (vs_term_id_t term_id);
	uchar       vs_terminal_is_present      (vs_term_id_t term_id); /* check if the terminal is present */
    void        vs_timer_term_set           (uchar timer_type,
                                             uchar timer_onoff);

#else   /* if NEW_FCT_STYLE == ON */

#   if OM_CODE_TYPE == OM_PIC
    void        pic_init_t_vs_parm_description ();                  /* PIC initialization */
#   endif

    uchar       vs_acc_info_path_disc       ();                     /* access information path disconnection */
	uchar       vs_config_co                ();                     /* configuration confirmation routine */
    uchar       vs_conn_state_check         ();                     /* connection state check */
    void        vs_cur_servprof_update      ();                     /* update current profile references */
    uchar       vs_cur_servprof_update_needed
                                            ();                     /* need to update current profile references */
    uchar       vs_desactivate              ();                     /* desactivate the VS, free all allocated ressources */
    void        vs_disconnection            ();
    uchar       vs_error_process            ();
    void        vs_flow_ctrl_rq_to_terminal ();                     /* request flow control to terminal */
    void        vs_info_header_format       ();                     /* format header and mandatory information elements */
    void        vs_network_queued_frames_transmit ();
    void        vs_new_connection_init      ();                     /* initialize new connection */
    void        vs_queued_data_purge        ();                     /* purge queued data */
#	if VS_RESET_CONFIG == ON
		uchar	vs_reset_config             ();
#	endif
	uchar       vs_set_config               ();
	uchar       vs_set_new_profile          ();                     /* set new profile */
	void        vs_snd_network              ();                     /* send message to network */
	uchar       vs_snd_terminal             ();                     /* send message to terminal */
	void        vs_snd_terminal_preamble    ();                     /* send message to terminal preamble */
    void        vs_term_data_queue          ();
    void        vs_term_queued_data_transmit ();

        /*-------------------
            ACCESS ROUTINES
        --------------------*/

	struct node FAR *vs_last_node_access    ();
	uchar       vs_nsc_access               ();                     /* access to network, service and connection contexts */
    void        vs_outgoing_nsc_assign      ();                     /* access to network, service and connection contexts for outgoing call */
    uchar       vs_incoming_terminal_assign();                      /* assign a terminal to an incoming call */
    add_t       vs_connection_access        ();                     /* access to connection */
    nai_t       vs_network_access           ();                     /* access to network context */
    uchar       vs_profile_access           ();                     /* access to parameter profile context */
    sapi_t      vs_service_access           ();                     /* access to service context */
    uchar       vs_servprof_access          ();                     /* access to service profile context */
	nai_t       vs_terminal_access_from_dl_sapi_ces ();
	nai_t       vs_terminal_access_from_term_id     ();

        /*--------------------------
            CONFIGURATION ROUTINES
        ---------------------------*/

    struct node FAR *
                vs_list_build               ();                     /* build one objects list */
    uchar       vs_object_build             ();                     /* VS build objects routine */
    uchar       vs_object_init              ();                     /* VS objects initialization routine */

        /*--------------------
            CONTROL ROUTINES
        ---------------------*/

    uchar       vs_ctrl_network             ();                     /* network incoming events control routine */
    uchar       vs_ctrl_terminal            ();                     /* terminal events control routine */

        /*------------------
            EVENT ROUTINES
        -------------------*/

    uchar       vs_evnt_data                ();                     /* data indication event processing routine */

        /*----------------------------------
            EXECUTION & OPERATION ROUTINES
        -----------------------------------*/

    uchar       vs_exe_break                ();                     /* Break execution */
    uchar       vs_exe_exit_from_vs         ();                     /* Exit from VS */
    uchar       vs_exe_profile              ();                     /* Profile id execution */
    uchar       vs_exe_read                 ();                     /* Read parameters execution */
    uchar       vs_exe_set                  ();                     /* Set parameters execution */
    uchar       vs_exe_setread              ();                     /* Set and read parameters execution */

    void        vs_dl_est_rq                ();
    void        vs_dl_send_jn_state         ();
    void        vs_oper_break               ();                     /* Break operation */
    uchar       vs_oper_profile             ();                     /* Profile load operation */

		/*---------------------
            TERMINAL ROUTINES
        ----------------------*/

    void        vs_term_break_signal_transmit ();
    void        vs_term_data_receive        ();                     /* receive terminal data from terminal */
    uchar       vs_term_state_reset         ();                     /* terminal state reset routine */
    uchar       vs_term_state_set           ();                     /* terminal state set routine */
    uchar       vs_terminal_is_present      ();                     /* check if the terminal is present */
    void        vs_term_it_mode_set         ();                     /* set interrupt terminal mode */

        /*----------
            TIMER
        ----------*/

    void        vs_timer_term_set           ();

#endif  /* if NEW_FCT_STYLE == ON */

#endif  /* ifndef VS_H */

/* END OF FILE */
