
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - asn1_prc.c
 *
 * $Revision$
 *
 * $Date$
 *
 *		implements all the general functions used by ASN1 mechanism.
 *
 * function (s)
 *
 *		asn1_set_node_and_append_list - implements the initialisation of
 *										the list of OBJECT IDENTIFIERs
 *										and of pointer to list of sub-identifiers
 *										to be appended to the end of some
 *										OBJECT IDENTIFIER values.
 *
 *		asn1_search_store_ctx - 	implements the search of the current
 *									storage context associated with a field
 *									of a meta-program or with a meta-program.
 *
 *		asn1_search_obj_id_node - 	implements the search of an OBJECT IDENTIFIER
 *									node in tree table according to
 *									the node identifier (index in table).
 *
 *		asn1_search_son_node - 		implements the search of a son of a node
 *									in OBJECT IDENTIFIER tree table with a
 *									given component (sub-identifier).
 *
 *		asn1_value_present - 		implements the search of the optional
 *									indicator associated with current instance
 *									of current type to know if a value is provided.
 *
 *		asn1_set_optional_value - 	implements the update of optional
 *									indicator associated with current instance
 *									of current type to be analysed.
 *
 *		asn1_compare_type_ident -	implements the comparaison of current data
 *									with type identification of given meta-program.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    ASN1 language notation encoding/decoding library |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#include "asn1.h"

		/* Copyright */

CONST char 	asn1_prc_copyright[]	= "Copyright (c) 1989/96 by OMNITEL SA - All Rights Reserved";
CONST char 	asn1_prc_licence[]		= LICENSE_NBER;

/*-------------------------------------------------------------------------*/

		/* Common ASN1 variables */
		/* --------------------- */

			/* pointer to table of all OBJECT IDENTIFIERs and number in table */

asn1_node_id_t						asn1_obj_id_nb;
struct asn1_obj_id_node CONST FAR	*p_asn1_obj_id_list;

	/*
		List of object identifier components that are appended at the end of OBJECT IDENTIFIER values :
		the size field of the current storage context associated with the value represents the
		number of sub-identifiers that are appended at the end of the value, one sub-identifier
		corresponds to one storage context in this list
	*/

asn1_store_ctx_t FAR 	*p_asn1_appended_obj_id;

			/* error report */

uchar			asn1_error_type;				/* type of error that has occurred */
uchar	FAR		*p_asn1_erroneous_value;		/* pointer to value that caused the error */
uchar	FAR		*p_pc_asn1_error;				/* pointer to meta-program in which the error occurred */
uchar			asn1_error_cause;				/* event that caused the error : it is a supplementary information that is not always used */

			/* flag indicating if current type in data is constructed (ON) or primitive (OFF) */

uchar		asn1_constructed_flag;

	/* flag indicating if user can pass storage contexts during ASN1 process */

#if ASN1_DYNAMIC_STORE_CTX_USED == ON
	uchar	asn1_user_ctx_flag;
#endif

	/* flag indicating if user can update storage contexts during ASN1 decoding */

#if ASN1_DYNAMIC_APPEND_CTX_USED == ON
	uchar	asn1_user_append_ctx_flag;
#endif

#if ASN1_OPTIONAL_USED == ON
	uchar FAR	*p_asn1_optional_ind;			/* pointer to list of optional indicators associated with current type */
#endif

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	asn1_set_node_and_append_list - implements the initialisation
					of pointer to table of OBJECT IDENTIFIERs, of their number
					in table and of pointer to list of sub-identifiers to be
					appended to the end of some OBJECT IDENTIFIER values.

Usage            	void asn1_set_node_and_append_list (asn1_node_id_t obj_id_nb, struct asn1_obj_id_node FAR *p_obj_id_tab, asn1_store_ctx_t FAR *p_append_subid_list);

Common constants and declarations : asn1.h.

*--------------------------------------------------------------------------*/

void asn1_set_node_and_append_list (obj_id_nb, p_obj_id_tab, p_append_subid_list)
	asn1_node_id_t						obj_id_nb;
	struct asn1_obj_id_node CONST FAR	*p_obj_id_tab;
	asn1_store_ctx_t FAR 				*p_append_subid_list;
{
	asn1_obj_id_nb			= obj_id_nb;
	p_asn1_obj_id_list		= p_obj_id_tab;
	p_asn1_appended_obj_id	= p_append_subid_list;
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	asn1_search_store_ctx - implements the search of the
					current storage context associated with a field of a
					meta-program or with a meta-program.

Usage            	uchar asn1_search_store_ctx (asn1_store_t FAR *p_store_list, uchar FAR *p_nb, uchar FAR *p_pc, uchar field_nb);

Return value :      index in list if meta-program pointer and
					meta-program field pointer were found, INDEX_NIL else.

Common constants and declarations : asn1.h.

*--------------------------------------------------------------------------*/

uchar asn1_search_store_ctx (p_store_list, p_nb, p_pc, field_nb)
	asn1_store_t FAR	*p_store_list;		/* pointer to list where to search the pointers */
	uchar FAR 			*p_nb;				/* pointer to number of items in the list */
	uchar FAR			*p_pc;				/* pointer to meta-program to search */
	uchar 				field_nb;			/* number of the meta-program field to search (or 0 if search is related to the whole meta-program) */
{
	uchar i;		/* loop index */

	for (i = 0; i < (*p_nb); i++) {

		if ((Asn1_store_list_p_pc == p_pc) &&
			(Asn1_store_list_field_nb == field_nb)) {

				/* pointer and field number match the ones in the table : entry in table is found -> return index i */

			return (i);
		}

			/* next item in list */

		p_store_list++;
	}

		/* all the list is scanned and no matching entry has been found
			call user function if permitted to get a new storage context */

#	if ASN1_DYNAMIC_STORE_CTX_USED == ON

		if (Asn1_dynamic_ctx_used == ON) {

			if ((i = Asn1_user_store_ctx (p_pc, field_nb)) != 0) {

					/*	value returned is the number of storage contexts
						that were added at the end of the list : update
						this number and return index corresponding to
						previous list end */

				(*p_nb) += i;
				return ((*p_nb) - i);
			}
		}

#	endif

		/* and no matching entry has been found and none returned by user
			-> return NIL index */

	return (ASN1_INDEX_NIL);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	asn1_search_obj_id_node - implements the search of an
					OBJECT IDENTIFIER node in tree table according to
					the node identifier (index in table).

Usage            	struct asn1_obj_id_node	FAR * asn1_search_obj_id_node (asn1_node_id_t node_id);
							- node_id : identifier of a node in the OBJECT IDENTIFIER tree.

Return value		returns pointer to node structure in table if found,
					else P_NIL.

Common constants and declarations : asn1.h.

*--------------------------------------------------------------------------*/

struct asn1_obj_id_node	CONST FAR * asn1_search_obj_id_node (node_id)
	asn1_node_id_t	node_id;		/* identifier of node to search */
{
	struct asn1_obj_id_node	CONST FAR *p_cur_node;		/* pointer to current node structure */

		/* check that node_id is not greater than the size
			of the OBJECT IDENTIFIER table */

	if (node_id > asn1_obj_id_nb) {

		return (P_NIL);
	}

		/* get the structure using node_id : this is simply the index in table */

	p_cur_node = p_asn1_obj_id_list + node_id;

#if ASSERT == ON

		/* "node_id" field in table should contain the index in table */

	if (Asn1_cur_node_id != node_id) {

		Trap	(TRAP_ASN1_NODE_INCONSISTENCY, "asn1_search_obj_id_node");
	}

#endif

		/* return pointer to found structure */

	return (p_cur_node);
}

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	asn1_search_son_node - implements the search of a son
					of a node in OBJECT IDENTIFIER tree table with a given
					component (sub-identifier).

Usage            	struct asn1_obj_id_node	FAR * asn1_search_son_node (struct asn1_obj_id_node	FAR	*p_cur_node, ulong sub_id);
							- p_cur_node : pointer to current node,
							- sub_id : sub-identifier to search.

Description			the function scans all the son nodes of given node if any
					and checks if the component that labels the arc between the
					node and its son match the sub-identifier : if so, the right
					son node is found.

Return value		returns pointer to son node structure in table if found,
					else P_NIL.

Common constants and declarations : asn1.h.

*--------------------------------------------------------------------------*/

struct asn1_obj_id_node	CONST FAR * asn1_search_son_node (p_cur_node, sub_id)
	struct asn1_obj_id_node	CONST FAR	*p_cur_node;		/* pointer to current node */
	ulong								sub_id;				/* sub-identifier to search */
{
	uchar						son_nb;					/* number of son nodes */
	asn1_obj_id_component_t		component;				/* component of object identifier */

		/* check that current pointer is not null */

	if (p_cur_node == P_NIL) {

		return (P_NIL);
	}

		/* check that current sub-identifier is not too high for an OBJ ID component */

	if (sub_id > (asn1_obj_id_component_t)(~0)) {

		return (P_NIL);
	}

		/* get OBJECT IDENTIFIER component to search */

	component = (asn1_obj_id_component_t)sub_id;

		/* check pointer to OBJ ID tree is not null */

	if (p_asn1_obj_id_list == P_NIL) {

		return (P_NIL);
	}

#	if ASSERT == ON

			/* "node_id" field should not exceed total number of nodes */

		if (Asn1_cur_node_id > asn1_obj_id_nb) {

			return (P_NIL);
		}

			/* "node_id" field should be the index in table pointed to by p_asn1_obj_id_list */

		if (p_cur_node != p_asn1_obj_id_list + Asn1_cur_node_id) {

			return (P_NIL);
		}

#	endif

		/* get number of son nodes and node associated with first son */

	son_nb = Asn1_son_node_nb;
	p_cur_node = asn1_search_obj_id_node (Asn1_son_node_id);

	if (p_cur_node == P_NIL) {

		return (P_NIL);
	}

		/* scan all the son nodes */

	while (son_nb-- > 0) {

		if (component == Asn1_cur_component) {

				/* component matches the label component : this is the right one
					-> stop scanning and return pointer to son node */

			return (p_cur_node);
		}

			/* component does not match -> get next son */

		p_cur_node++;
	}

		/* no label component match -> return P_NIL */

	return (P_NIL);
}

#if ASN1_OPTIONAL_USED == ON /* { */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	asn1_value_present - implements the search of the
					optional indicator associated with current instance
					of current type to be analysed to know if value is
					to be encoded.

					asn1_set_optional_value - implements the update of
					optional indicator associated with current instance
					of current type to be analysed to indicate to user
					if optional type was encoded in data.

Usage            	uchar asn1_value_present (void);
					void asn1_set_optional_value (uchar presence);

Return value :      asn1_value_present returns PRESENT if type is to be analysed :
					type is mandatory or it is optional but a value is provided,
					ABSENT else.

Common constants :	global p_asn1_optional_ind pointer to list of indicators.

*--------------------------------------------------------------------------*/

uchar asn1_value_present ()
{

	if (p_asn1_optional_ind == P_NIL) {

		/* No list of optional indicators : the type is mandatory */

		return (PRESENT);
	}

		/* search first indicator in the list which has not already been used */

	while (*p_asn1_optional_ind == ASN1_OPTIONAL_PROCESSED) {

		p_asn1_optional_ind++;
	}

	if (*p_asn1_optional_ind == ASN1_OPTIONAL_PRESENT) {

			/* type is optional but a value is provided : it is to be analysed
				-> Mark indicator "processed" and return PRESENT */

		*p_asn1_optional_ind = ASN1_OPTIONAL_PROCESSED;
		return (PRESENT);
	}

		/* type is optional and no value is provided : it is not to be analysed
			-> Mark indicator "processed" and return ABSENT */

	*p_asn1_optional_ind = ASN1_OPTIONAL_PROCESSED;
	return (ABSENT);
}

	/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

void asn1_set_optional_value (presence)
	uchar presence;			/* indicates if type is present in encoded data */
{

	while ((*p_asn1_optional_ind == ASN1_OPTIONAL_PRESENT) ||
		   (*p_asn1_optional_ind == ASN1_OPTIONAL_ABSENT)) {

		p_asn1_optional_ind++;
	}

	if (presence == PRESENT) {

			/* type is in data -> set indicator "PRESENT" */

		*p_asn1_optional_ind = ASN1_OPTIONAL_PRESENT;

	} else {

			/* type is not in data -> set indicator "ABSENT" */

		*p_asn1_optional_ind = ASN1_OPTIONAL_ABSENT;
	}
}

#endif /* ASN1_OPTIONAL_USED == ON} */

/*--------------------------------------------------------------------------*
					 F U N C T I O N   H E A D E R

Name             	asn1_compare_type_ident - implements the comparaison of
					current data with type identification of given meta-program.

Usage            	uchar asn1_compare_type_ident (uchar FAR *p_data, uchar FAR *p_limit, uchar FAR *p_pc);
						- p_data : pointer to current data,
						- p_limit : pointer to data area limit,
						- p_pc : pointer to meta-program corresponding to a field of a CHOICE meta-program.

Description         the function reads the type identification description in
					the meta-program and possibly of any imbricated meta-program
					until a type can be completely identified and it compares
					the identified type with the data (which are IDENTIFIER OCTETS).
					If the comparaison is OK it returns OK, else it continue to
					scan the imbricated fields of the meta-program and it stops
					process if a comparaison is OK or if there is no more field.

Return value :		OK if comparaison is right (given meta-program is the right one),
					NOK else.

Common constants and declarations : asn1.h

*--------------------------------------------------------------------------*/

	/* local arrays and Macros used for management of the type identification
		decoding : it is used for imbricated types for which an analyse of their
		fields is required to be identified (CHOICE or type that refers to
		another type defined with another meta-program) */

static struct asn1_type_common FAR *	tab_sav_p_type_desc		[ASN1_MX_CHOICE_LEVEL];		/* current saved pointer to type description */
static uchar			tab_sav_field_nb		[ASN1_MX_CHOICE_LEVEL];		/* current number of type fields already scanned for type identification in a meta-program */
static uchar			tab_sav_tag_class		[ASN1_MX_CHOICE_LEVEL];		/* current saved tag class used for type identification */
static asn1_tag_nb_t	tab_sav_tag_nb			[ASN1_MX_CHOICE_LEVEL];		/* current saved tag number used for type identification */

#if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

	static uchar FAR *		tab_sav_p_tag_nb		[ASN1_MX_CHOICE_LEVEL];		/* current saved tag number pointer used for type identification */

#	define Current_p_tag_nb			tab_sav_p_tag_nb[level]
#	define Upper_p_tag_nb			tab_sav_p_tag_nb[level - 1]

#endif

#define Current_sav_p_type_desc		tab_sav_p_type_desc[level]
#define Current_sav_field_nb		tab_sav_field_nb[level]
#define Current_class				tab_sav_tag_class[level]
#define Current_tag_nb				tab_sav_tag_nb[level]
#define Upper_class					tab_sav_tag_class[level - 1]
#define Upper_tag_nb				tab_sav_tag_nb[level - 1]

uchar asn1_compare_type_ident (p_data, p_limit, p_pc)
	uchar FAR	*p_data;			/* pointer to data area */
	uchar FAR	*p_limit;			/* pointer to data area limit */
	uchar FAR	*p_pc;				/* pointer to current meta-program */
{
	uchar FAR						*p_cur_data;		/* current data pointer */
	struct asn1_type_common	FAR		*p_type_desc;		/* pointer to common fields used in a type description meta-program */
	uchar							level;				/* current imbrication level */

		/* init imbrication level */

	level = 0;

		/* get current type description */

	if ((p_type_desc = (struct asn1_type_common FAR *)p_pc) == P_NIL) {

		return (NOK);
	}

	Current_sav_p_type_desc = p_type_desc;

		/* init current saved tag context and field Nb */

	Current_sav_field_nb = 0;
	Current_class = Asn1_get_tag_class;
	Current_tag_nb = Asn1_get_tag_nb;
	Asn1_get_p_tag_nb	(Current_p_tag_nb)

	while (TRUE) {

#		if ASN1_ANY_TYPE_USED == ON

			if (Asn1_type_id == ASN1_ANY_TYPE_ID) {

					/* "ANY" Type matches any data : decoded type identification matches the one in
						meta-program -> restore global Tag context (stored at level 0) and return OK */

				level = 0;
				Asn1_store_tag_class	(Current_class);
				Asn1_store_tag_nb		(Current_tag_nb);
				Asn1_store_p_tag_nb		(Current_p_tag_nb)
				return (OK);
			}

#		endif

		p_cur_data = p_data;

			/* try and decode its type identification */

		switch (Asn1_decode_type_ident (&p_cur_data, p_limit, Asn1_type_id,
									Asn1_type_impl_flag, Asn1_type_tag_class,
									Asn1_type_tag_nb, Asn1_type_p_tag_nb))
		{
			case 0 :

					/* type identification cannot be decoded : it requires further analyse
						-> increment level and get pointer to meta-program corresponding
						to first field */

					/* type cannot be identified : it should not be a Basic type */

				if (Asn1_type_field_nb == 0) {

					Trap (TRAP_ASN1_BASIC_TYPE_ID_NIL, "asn1_compare_type_ident");
					return (NOK);
				}

				if ((level + 1) >= ASN1_MX_CHOICE_LEVEL) {

					Trap (TRAP_ASN1_CHOICE_IMBRICATION, "asn1_compare_type_ident");
					return (NOK);
				}

				level++;

				p_pc = Asn1_type_p_pc (0);

					/* get current type description */

				if ((p_type_desc = (struct asn1_type_common FAR *)p_pc) == P_NIL) {

					return (NOK);
				};

				Current_sav_p_type_desc = p_type_desc;

					/* init current saved tag context and field Nb */

				Current_sav_field_nb = 0;
				Current_class = Upper_class;
				Current_tag_nb = Upper_tag_nb;

#				if ASN1_TAG_NB_EXTENSION_MECHANISM == ON
					Current_p_tag_nb = Upper_p_tag_nb;
#				endif

				break;

			case ASN1_ERR_TYPE_IDENT_LGTH :

					/* decoded type identification does not match the one in meta-program
						-> one more field Nb processed */

				if (level == 0) {

					Asn1_store_tag_class	(Current_class);
					Asn1_store_tag_nb		(Current_tag_nb);
					Asn1_store_p_tag_nb		(Current_p_tag_nb)
					return (NOK);
				}

				level--;
				Current_sav_field_nb++;
				p_type_desc = Current_sav_p_type_desc;

					/* if current saved field Nb equals the number of fields in
						current meta-program, this meta-program does not match
						-> if level is null, return NOK else get meta_program
						corresponding to lower level if any */

				while (Current_sav_field_nb >= Asn1_type_field_nb) {

					if (level == 0) {

						Asn1_store_tag_class	(Current_class);
						Asn1_store_tag_nb		(Current_tag_nb);
						Asn1_store_p_tag_nb		(Current_p_tag_nb)
						return (NOK);
					}

					level--;

						/* one more field processed : the one corresponding to upper level */

					Current_sav_field_nb++;
					p_type_desc = Current_sav_p_type_desc;
				}

				p_pc = Asn1_type_p_pc (Current_sav_field_nb);

					/* get current type description */

				if ((p_type_desc = (struct asn1_type_common FAR *)p_pc) == P_NIL) {

					return (NOK);
				};

				Asn1_store_tag_class	(Current_class);
				Asn1_store_tag_nb		(Current_tag_nb);
				Asn1_store_p_tag_nb		(Current_p_tag_nb)

				level++;
				Current_sav_field_nb = 0;
				Current_sav_p_type_desc = p_type_desc;
				break;

			default :

					/* decoded type identification matches the one in meta-program
						restore global Tag context (stored at level 0) and return OK */

				level = 0;
				Asn1_store_tag_class	(Current_class);
				Asn1_store_tag_nb		(Current_tag_nb);
				Asn1_store_p_tag_nb		(Current_p_tag_nb)
				return (OK);
		}
	}
}


/* EOF */
