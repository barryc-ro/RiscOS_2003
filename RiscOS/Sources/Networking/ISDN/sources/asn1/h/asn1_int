
/*--------------------------------------------------------------------------*
 *						M O D U L E   H E A D E R
 *
 * filename - asn1_int.h
 *
 * $Revision$
 *
 * $Date$
 *
 *  Header implementing the interface to be used by any entity for
 *  ASN1 implementation.
 *
 *	Content :	- C interface typedef
 *				- value definitions for type identification description
 *				- interface structure and Macros for OBJECT IDENTIFIER ASN1 Type
 *				- interface error management
 *				- Macros for ASN1 meta-programs
 *				- interface function declarations
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    ASN1 language notation encoding/decoding library |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef ASN1_INT_H
#define ASN1_INT_H

#include "asn1_par.h"					/* ASN1 parameters */

	/* Check defines to ensure compatibility with previous ASN1_PAR.H */

#ifndef ASN1_BIT_STRING_TYPE_USED
#	define ASN1_BIT_STRING_TYPE_USED		OFF
#endif

#ifndef ASN1_OBJ_DESC_TYPE_USED
#	define ASN1_OBJ_DESC_TYPE_USED			OFF
#endif

#ifndef ASN1_NUMERIC_S_TYPE_USED
#	define ASN1_NUMERIC_S_TYPE_USED			ON
#endif

#ifndef ASN1_PRINTABLE_S_TYPE_USED
#	define ASN1_PRINTABLE_S_TYPE_USED		OFF
#endif

#ifndef ASN1_TELETEX_S_TYPE_USED
#	define ASN1_TELETEX_S_TYPE_USED			OFF
#endif

#ifndef ASN1_VIDEOTEX_S_TYPE_USED
#	define ASN1_VIDEOTEX_S_TYPE_USED		OFF
#endif

#ifndef ASN1_IA5_S_TYPE_USED
#	define ASN1_IA5_S_TYPE_USED				ON
#endif

#ifndef ASN1_GRAPHIC_S_TYPE_USED
#	define ASN1_GRAPHIC_S_TYPE_USED			OFF
#endif

#ifndef ASN1_VISIBLE_S_TYPE_USED
#	define ASN1_VISIBLE_S_TYPE_USED			OFF
#endif

#ifndef ASN1_GENERAL_S_TYPE_USED
#	define ASN1_GENERAL_S_TYPE_USED			OFF
#endif

/*-------------------------------------------------------------------------*/

	/*
		interface typedef for ASN1 INTEGER values : an integer value
		is provided by the user using C ulong type, the sign is provided
		with "coding_flag" field in storage context associated with the
		value, using the ASN1_CODING_POSITIVE/NEGATIVE definitions below
	*/

typedef ulong	asn1_integer_t;

/*--------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         		 */
				/*	ASN1 DEFINITIONS to be used  */
				/*		in definition and		 */
				/*	description meta-programs	 */
				/*						   		 */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

				/*
				 *	Type identification description : 4 items may be
				 *	necessary for a complete description of the
				 *	type identification of the type :Tag Class,
				 *	Tag Number, Implicit Flag and Type ID. For example,
				 *	an ASN1 Type may be :
				 *
				 *		Type ::= [APPLICATION 2] IMPLICIT INTEGER
				 *
				 *	To describe this type, we need a tag class : APPLICATION,
				 *	a tag number : 2, a flag : IMPLICIT and the type ID :
				 *	INTEGER. When no class is specified ("[2]"), class is
				 *	context-specific and ASN1_TYPE_CLASS_CONTEXT_SPFC shall
				 *	be used, when no tag is specified, ASN1_TYPE_NO_TAG shall
				 *	be used, when no flag is specified, ASN1_TYPE_NO_IMPLICIT_KEYW
				 *	shall be used.
				 *
				 */

	/* common structure used to describe how to identify an ASN1 type */

struct asn1_type_identification {

	uchar			type_id;			/* Type identification corresponding to the ASN1 keyword used to define the type (BOOLEAN,...) */
	uchar 			implicit_flag;		/* use of IMPLICIT/EXPLICIT keywords or none in ASN1 description */
	uchar 			tag_class;			/* class of the tag of the type : APPLICATION/UNIVERSAL/PRIVATE or none keyword used */
	asn1_tag_nb_t	tag_number;			/* number of the tag of the type : C type is a typedef defined in ASN1_PAR.H file */

#if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

	uchar	FAR		*p_tag_nb;				/* used only if the tag number is too high to be described with asn1_tag_nb_t C type, else it is set to P_NIL */

#endif
};

	/* ASN1 Implicit flag values */

#define ASN1_TYPE_IMPLICIT				1		/* IMPLICIT keyword used in ASN1 Type description */
#define ASN1_TYPE_EXPLICIT				2		/* EXPLICIT keyword used in ASN1 Type description */
#define ASN1_TYPE_NO_IMPLICIT_KEYW		3		/* IMPLICIT and EXPLICIT keywords not used in ASN1 Type description */

	/* ASN1 Tag Class values */

#define ASN1_TYPE_CLASS_UNIVERSAL		0		/* UNIVERSAL keyword used in ASN1 Type description for the tag class */
#define ASN1_TYPE_CLASS_APPLICATION		1		/* APPLICATION keyword used in ASN1 Type description for the tag class */
#define ASN1_TYPE_CLASS_CONTEXT_SPFC	2		/* no keyword used in ASN1 Type description for the tag class but tag nb used ("[Tag_nb]") : the class is context-specific */
#define ASN1_TYPE_CLASS_PRIVATE			3		/* PRIVATE keyword used in ASN1 Type description for the tag class */
#define ASN1_TYPE_NO_TAG				255		/* description of an ASN1 non-tagged Type (no "[Tag_Class Tag_Nb]" used) */

	/* ASN1 Type ID values : these values are not described in X208,
		they are defined here as an equivalent of the textual X208 keywords
		used to define ASN1 types (SEQUENCE, SET OF, INTEGER, ...) */

#define ASN1_BOOLEAN_TYPE_ID			'B'		/* Type ID for BOOLEAN keyword */
#define ASN1_INTEGER_TYPE_ID			'I'		/* Type ID for INTEGER keyword */
#define ASN1_BITSTRING_TYPE_ID			'b'		/* Type ID for BIT STRING keyword */
#define ASN1_OCTETSTRING_TYPE_ID		'O'		/* Type ID for OCTET STRING keyword */
#define ASN1_NULL_TYPE_ID				'N'		/* Type ID for NULL keyword */
#define ASN1_OBJECTIDENT_TYPE_ID		'J'		/* Type ID for OBJECT IDENTIFIER keyword */
#define ASN1_OBJECTDESCR_TYPE_ID		'j'		/* Type ID for Objectdescriptor keyword */
#define ASN1_EXTERNAL_TYPE_ID			'X'		/* Type ID for EXTERNAL keyword */
#define ASN1_REAL_TYPE_ID				'R'		/* Type ID for REAL keyword */
#define ASN1_ENUMERATED_TYPE_ID			'E'		/* Type ID for ENUMERATED keyword */

#define ASN1_SEQUENCE_TYPE_ID			'S'		/* Type ID for SEQUENCE keyword */
#define ASN1_SEQUENCEOF_TYPE_ID			's'		/* Type ID for SEQUENCE OF keyword */
#define ASN1_SET_TYPE_ID				'F'		/* Type ID for SET keyword */
#define ASN1_SETOF_TYPE_ID				'f'		/* Type ID for SET OF keyword */

#define ASN1_NUMERICSTRING_TYPE_ID		'n'		/* Type ID for NumericString keyword */
#define ASN1_PRINTABLESTRING_TYPE_ID	'P'		/* Type ID for PrintableString keyword */
#define ASN1_TELETEXSTRING_TYPE_ID		'x'		/* Type ID for TeletexString keyword */
#define ASN1_VIDEOTEXSTRING_TYPE_ID		'v'		/* Type ID for VideotexString keyword */
#define ASN1_IA5STRING_TYPE_ID			'i'		/* Type ID for IA5String keyword */
#define ASN1_GRAPHICSTRING_TYPE_ID		'g'		/* Type ID for GraphicString keyword */
#define ASN1_VISIBLESTRING_TYPE_ID		'V'		/* Type ID for VisibleString keyword */
#define ASN1_GENERALSTRING_TYPE_ID		'G'		/* Type ID for GeneralString keyword */

#define ASN1_UNIVERSALTIME_TYPE_ID		'T'		/* Type ID for UTCTime keyword */
#define ASN1_GENERALIZEDTIME_TYPE_ID	't'		/* Type ID for GeneralizedTime keyword */

#define ASN1_CHOICE_TYPE_ID				'C'		/* Type ID for CHOICE keyword */
#define ASN1_ANY_TYPE_ID				'A'		/* Type ID for ANY keyword */

#define ASN1_TYPE_ID_NIL				0		/* NIL Type ID */

	/* type identification structure values associated with each UNIVERSAL types */

#if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

#	define ASN1_BOOLEAN					{ASN1_BOOLEAN_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_INTEGER					{ASN1_INTEGER_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_BIT_STRING				{ASN1_BITSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_OCTET_STRING			{ASN1_OCTETSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_NULL					{ASN1_NULL_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_OBJECT_IDENTIFIER		{ASN1_OBJECTIDENT_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_OBJECT_DESCRIPTOR		{ASN1_OBJECTDESCR_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_EXTERNAL				{ASN1_EXTERNAL_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_REAL					{ASN1_REAL_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_ENUMERATED				{ASN1_ENUMERATED_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}

#	define ASN1_SEQUENCE				{ASN1_SEQUENCE_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_SEQUENCE_OF				{ASN1_SEQUENCEOF_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_SET						{ASN1_SET_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_SET_OF					{ASN1_SETOF_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}

#	define ASN1_NUMERIC_STRING			{ASN1_NUMERICSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_PRINTABLE_STRING		{ASN1_PRINTABLESTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_TELETEX_STRING			{ASN1_TELETEXSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_VIDEOTEX_STRING			{ASN1_VIDEOTEXSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_IA5_STRING				{ASN1_IA5STRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_GRAPHIC_STRING			{ASN1_GRAPHICSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_VISIBLE_STRING			{ASN1_VISIBLESTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_GENERAL_STRING			{ASN1_GENERALSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}

#	define ASN1_UTC_TIME				{ASN1_UNIVERSALTIME_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_GENERALIZED_TIME		{ASN1_GENERALIZEDTIME_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}

#	define ASN1_CHOICE					{ASN1_CHOICE_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}
#	define ASN1_ANY						{ASN1_ANY_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}

#	define ASN1_NIL_TYPE_IDENT			{ASN1_TYPE_ID_NIL, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG, P_NIL}

#else

#	define ASN1_BOOLEAN					{ASN1_BOOLEAN_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_INTEGER					{ASN1_INTEGER_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_BIT_STRING				{ASN1_BITSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_OCTET_STRING			{ASN1_OCTETSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_NULL					{ASN1_NULL_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_OBJECT_IDENTIFIER		{ASN1_OBJECTIDENT_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_OBJECT_DESCRIPTOR		{ASN1_OBJECTDESCR_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_EXTERNAL				{ASN1_EXTERNAL_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_REAL					{ASN1_REAL_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_ENUMERATED				{ASN1_ENUMERATED_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}

#	define ASN1_SEQUENCE				{ASN1_SEQUENCE_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_SEQUENCE_OF				{ASN1_SEQUENCEOF_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_SET						{ASN1_SET_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_SET_OF					{ASN1_SETOF_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}

#	define ASN1_NUMERIC_STRING			{ASN1_NUMERICSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_PRINTABLE_STRING		{ASN1_PRINTABLESTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_TELETEX_STRING			{ASN1_TELETEXSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_VIDEOTEX_STRING			{ASN1_VIDEOTEXSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_IA5_STRING				{ASN1_IA5STRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_GRAPHIC_STRING			{ASN1_GRAPHICSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_VISIBLE_STRING			{ASN1_VISIBLESTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_GENERAL_STRING			{ASN1_GENERALSTRING_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}

#	define ASN1_UTC_TIME				{ASN1_UNIVERSALTIME_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_GENERALIZED_TIME		{ASN1_GENERALIZEDTIME_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}

#	define ASN1_CHOICE					{ASN1_CHOICE_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}
#	define ASN1_ANY						{ASN1_ANY_TYPE_ID, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}

#	define ASN1_NIL_TYPE_IDENT			{ASN1_TYPE_ID_NIL, ASN1_TYPE_NO_IMPLICIT_KEYW, ASN1_TYPE_NO_TAG, (asn1_tag_nb_t)ASN1_TYPE_NO_TAG}

#endif /* ASN1_TAG_NB_EXTENSION_MECHANISM */

#if ASN1_OPTIONAL_USED == ON

		/* structure used to describe optional type fields in ASN1 meta-program */

	struct asn1_optional_type {

		uchar FAR	*p_pc;						/* pointer to the meta-program describing the type */
		uchar FAR	*opt_ind_list;				/* list of all optional indicators (1 per instance of the type) or P_NIL if type is mandatory */
	};

		/* possible values of optional indicator */

#	define ASN1_OPTIONAL_PRESENT			1		/* current instance of the type is to be encoded or has been decoded */
#	define ASN1_OPTIONAL_ABSENT				2		/* current instance of the type is not to be encoded or was not in decoded data */
#	define ASN1_OPTIONAL_PROCESSED			3		/* indicator for current instance of the type has been processed (after encoding) */
#	define ASN1_OPTIONAL_NOT_PROCESSED		4		/* indicator for current instance of the type has not been processed (before decoding) */

#endif /* ASN1_OPTIONAL_USED */

/*--------------------------------------------------------------------------*/

	/*
		OBJECT IDENTIFIER Type : the semantics of the structure refers to
		an object identifier tree. An object identifier value is a list of
		numerical values (the components or subidentifiers), each
		labelling an arc in the tree : these arcs constitute the path from
		the root of the tree to the vertex allocated to the information object.
		A table that contains all the nodes describes this tree.

		The nodes in the tree : they consist of the index in the table,
		the upper node in the tree, the OBJECT IDENTIFIER component that
		labels the arc between upper and current nodes, the first "son" node
		(under current node) in the table and the number of "son" nodes.

					  upper node -> *
									|
									|label (= OBJECT IDENTIFIER component)
									|
					current node -> *_    _
									| |... |
									| |    |
									| |    |
					   son nodes -> * *    *

		An index identifies uniquely an OBJECT IDENTIFIER.
	*/

struct asn1_obj_id_node {

	asn1_node_id_t					cur_node_x;				/* identifier of current node (index in table) */
	asn1_node_id_t					upper_node_x;			/* identifier of upper node (index in table) */
	asn1_obj_id_component_t			label_component;		/* component of object identifier : it labels the "arc" from upper node to current node in the tree */
	asn1_node_id_t					first_son_node_x;		/* identifier of first son node (index in table) */
	uchar							son_nb;					/* number of son nodes associated with current node */
};

	/* common definitions for the nodes */

#define ASN1_OBJ_ID_ROOT					0						/* identifier of the root : no other node shall have this identifier */
#define ASN1_OBJ_ID_NIL						(asn1_node_id_t)(~0)	/* NIL node identifier */

#define ASN1_OBJ_ID_NO_SON_NODE				0						/* for a node which is a leaf of the tree (no node under it) */

	/* first node = the root : no upper node, 1 son node = the following in the table (index = 1) */

#define ASN1_NODE_ROOT						{ASN1_OBJ_ID_ROOT, 0, 0, 1, 1}

	/* access Macros using p_cur_node pointer */

#define Asn1_cur_node_id					p_cur_node -> cur_node_x
#define Asn1_upper_node_id					p_cur_node -> upper_node_x
#define Asn1_cur_component					p_cur_node -> label_component
#define Asn1_son_node_id					p_cur_node -> first_son_node_x
#define Asn1_son_node_nb					p_cur_node -> son_nb

/*--------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         */
				/*	ASN1 ERROR MANAGEMENT  */
				/*						   */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-*/

	/* error type code definitions */

#define ASN1_ERR_ENCOD_START				1				/* asn1_encoding_start function was called with a null meta-program pointer */
#define ASN1_ERR_ENCOD_START_P_DATA			2				/* asn1_encoding_start function was called with a null data area pointer */
#define ASN1_ERR_ENCOD_START_P_LIM			3				/* asn1_encoding_start function was called with a null limit pointer or data area pointer exceeded p_limit pointer */
#define ASN1_ERR_ENCOD_NIL_TYPE_DESC		4				/* asn1_encoding_start function gets a NIL type description pointer from current meta-program pointer */
#define ASN1_ERR_ENCOD_DATA_TOO_BIG			5				/* data area pointer exceeds p_limit : encoded data are too big */
#define ASN1_ERR_ENCOD_TYPE_IDENT			6				/* an error occurred during type identification encoding */
#define ASN1_ERR_ENCOD_SIZED_LGTH			7				/* an error occurred during encoding of length with expected size */
#define ASN1_ERR_ENCOD_TOO_MANY_TYPES		8				/* user attempts to process more encodings in a SET OF or a SEQUENCE OF
																Type than the maximum value permitted */
#define ASN1_ERR_ENCOD_NO_STORE_CTX			9				/* No valid storage information context available for current type to be encoded */

#define ASN1_ERR_ENCOD_BASIC_START			10				/* asn1_encode_basic_type function was called with a null meta-program pointer */
#define ASN1_ERR_ENCOD_BASIC_P_DATA			11				/* asn1_encode_basic_type function was called with a null data area pointer */
#define ASN1_ERR_ENCOD_BASIC_P_LIM			12				/* asn1_encode_basic_type function was called with a null limit pointer or data area pointer exceeded p_limit pointer */
#define ASN1_ERR_ENCOD_BASIC_P_STORE		13				/* asn1_encode_basic_type function was called with a null storage pointer */
#define ASN1_ERR_ENCOD_NOT_BASIC			14				/* asn1_encode_basic_type function was called but type is not a basic type (field_nb is not null in description meta-program) */

#define ASN1_ERR_ENCOD_BOOLEAN				20				/* an error occurred during BOOLEAN encoding */
#define ASN1_ERR_ENCOD_INTEGER				21				/* an error occurred during INTEGER encoding */
#define ASN1_ERR_ENCOD_ENUMERATED			22				/* an error occurred during ENUMERATED encoding */
#define ASN1_ERR_ENCOD_BITSTRING			23				/* an error occurred during BIT STRING encoding */
#define ASN1_ERR_ENCOD_OCTETSTRING			24				/* an error occurred during OCTET STRING encoding */
#define ASN1_ERR_ENCOD_NUMERICSTR			25				/* an error occurred during NumericString encoding */
#define ASN1_ERR_ENCOD_PRINTABLESTR			26				/* an error occurred during PrintableString encoding */
#define ASN1_ERR_ENCOD_TELETEXSTR			27				/* an error occurred during TeletexString encoding */
#define ASN1_ERR_ENCOD_VIDEOTEXSTR			28				/* an error occurred during VideotexString encoding */
#define ASN1_ERR_ENCOD_IA5STR				29				/* an error occurred during IA5String encoding */
#define ASN1_ERR_ENCOD_GRAPHICSTR			30				/* an error occurred during GraphicString encoding */
#define ASN1_ERR_ENCOD_VISIBLESTR			31				/* an error occurred during VisibleString encoding */
#define ASN1_ERR_ENCOD_GENERALSTR			32				/* an error occurred during GeneralString encoding */
#define ASN1_ERR_ENCOD_NULL					33				/* an error occurred during NULL encoding */
#define ASN1_ERR_ENCOD_OBJ_ID				34				/* an error occurred during OBJECT IDENTIFIER encoding */
#define ASN1_ERR_ENCOD_OBJ_DESC				35				/* an error occurred during ObjectDescriptor encoding */

#define ASN1_ERR_ENCOD_CHOICE				36				/* field number requested for CHOICE encoding is higher than
																the number of fields in meta-program description : type
																matches no one of the types in the CHOICE */

#define ASN1_ERR_DECOD_START				101				/* asn1_decoding_start function was called with a null meta-program pointer */
#define ASN1_ERR_DECOD_START_P_DATA			102				/* asn1_decoding_start function was called with a null data area pointer */
#define ASN1_ERR_DECOD_START_P_LIM			103				/* asn1_decoding_start function was called with a null limit pointer or data area pointer exceeded p_limit pointer */
#define ASN1_ERR_DECOD_NIL_TYPE_DESC		104				/* asn1_decoding_start function gets a NIL type description pointer from current meta-program pointer */
#define ASN1_ERR_DECOD_DATA_TOO_BIG			105				/* data area pointer exceeds p_limit : encoded data are too big */
#define ASN1_ERR_DECOD_TYPE_IDENT			106				/* an error occurred during type identification decoding */
#define ASN1_ERR_DECOD_SIZED_LGTH			107				/* an error occurred during decoding of length with expected size */
#define ASN1_ERR_DECOD_MISSING_TYPES		108				/* 1 or more mandatory type(s) in a SET or a SEQUENCE Type is (are) missing in encoded data */
#define ASN1_ERR_DECOD_NO_STORE_CTX			109				/* No valid storage information context available for current type to be decoded */

#define ASN1_ERR_DECOD_BASIC_START			110				/* asn1_decode_basic_type function was called with a null meta-program pointer */
#define ASN1_ERR_DECOD_BASIC_P_DATA			111				/* asn1_decode_basic_type function was called with a null data area pointer */
#define ASN1_ERR_DECOD_BASIC_P_LIM			112				/* asn1_decode_basic_type function was called with a null limit pointer or data area pointer exceeded p_limit pointer */
#define ASN1_ERR_DECOD_BASIC_P_STORE		113				/* asn1_decode_basic_type function was called with a null storage pointer */
#define ASN1_ERR_DECOD_NOT_BASIC			114				/* asn1_decode_basic_type function was called but type is not a basic type (field_nb is not null in description meta-program) */

#define ASN1_ERR_DECOD_IMBRIC_LGTH			117				/* length of current type is inconsistent with length of imbricated type(s) */

#define ASN1_ERR_DECOD_BOOLEAN				120				/* an error occurred during BOOLEAN decoding */
#define ASN1_ERR_DECOD_INTEGER				121				/* an error occurred during INTEGER decoding */
#define ASN1_ERR_DECOD_ENUMERATED			122				/* an error occurred during ENUMERATED decoding */
#define ASN1_ERR_DECOD_BITSTRING			123				/* an error occurred during BIT STRING decoding */
#define ASN1_ERR_DECOD_OCTETSTRING			124				/* an error occurred during OCTET STRING decoding */
#define ASN1_ERR_DECOD_NUMERICSTR			125				/* an error occurred during NumericString decoding */
#define ASN1_ERR_DECOD_PRINTABLESTR			126				/* an error occurred during PrintableString decoding */
#define ASN1_ERR_DECOD_TELETEXSTR			127				/* an error occurred during TeletexString decoding */
#define ASN1_ERR_DECOD_VIDEOTEXSTR			128				/* an error occurred during VideotexString decoding */
#define ASN1_ERR_DECOD_IA5STR				129				/* an error occurred during IA5String decoding */
#define ASN1_ERR_DECOD_GRAPHICSTR			130				/* an error occurred during GraphicString decoding */
#define ASN1_ERR_DECOD_VISIBLESTR			131				/* an error occurred during VisibleString decoding */
#define ASN1_ERR_DECOD_GENERALSTR			132				/* an error occurred during GeneralString decoding */
#define ASN1_ERR_DECOD_NULL					133				/* an error occurred during NULL decoding */
#define ASN1_ERR_DECOD_OBJ_ID				134				/* an error occurred during OBJECT IDENTIFIER decoding */
#define ASN1_ERR_DECOD_OBJ_DESC				135				/* an error occurred during ObjectDescriptor decoding */

#define ASN1_ERR_DECOD_CHOICE				136				/* field number requested for CHOICE decoding is higher than
																the number of fields in meta-program description : type
																matches no one of the types in the CHOICE */

#define ASN1_ERR_NIL						(uchar)(~0)		/* No error */

	/* error cause code definitions */

#define ASN1_ERR_CAUSE_DEC_LEVEL			1				/* an error occurred immediately after decreasing imbrication level */
#define ASN1_ERR_CAUSE_INC_LEVEL			2				/* an error occurred immediately after increasing imbrication level */
#define ASN1_ERR_CAUSE_NOT_BASIC			3				/* an error occurred during analysis of a non basic type */

#define ASN1_ERR_CAUSE_TOO_BIG_DATA			11				/* data were too big for data area */
#define ASN1_ERR_CAUSE_LGTH_SIZE			12				/* expected size to encode the length is inconsistent with the length to be encoded */
#define ASN1_ERR_CAUSE_NIL_P_DATA			13				/* a function was called with a NIL p_p_data or (*p_p_data) pointer (pointer to data area pointer) */
#define ASN1_ERR_CAUSE_NIL_P_STORE			14				/* a function was called with a NIL p_store pointer (pointer to storage context) */
#define ASN1_ERR_CAUSE_NIL_POINTER			15				/* a function was called with a NIL argument pointer (other than p_p_data) */
#define ASN1_ERR_CAUSE_PRIM_INDEF_LGTH		16				/* indefinite length form used for primitive type */
#define ASN1_ERR_CAUSE_UNUSED_BITS_NB		17				/* number of unused bits in BIT STRING value is not permitted */
#define ASN1_ERR_CAUSE_NO_OBJ_ID_NODE		18				/* OBJECT IDENTIFIER node cannot be found */
#define ASN1_ERR_CAUSE_OBJ_ID_COMP_NB		19				/* number of components in OBJECT IDENTIFIER value is not permitted */
#define ASN1_ERR_CAUSE_TOO_MANY_SUBID		20				/* number of appended sub-identifiers in OBJECT IDENTIFIER value is not permitted */
#define ASN1_ERR_CAUSE_NO_APPEND_OBJ		21				/* attempt to append a sub-identifier but no associated storage context exists */
#define ASN1_ERR_CAUSE_UNKNOWN_SIGN			23				/* request encoding of an INTEGER with unknown sign flag */
#define ASN1_ERR_CAUSE_BAD_LENGTH			24				/* bad length : inconsistent with type coding */
#define ASN1_ERR_CAUSE_NOT_MINIMAL			25				/* minimal form was not used for encoding though it is mandatory */
#define ASN1_ERR_CAUSE_TOO_HIGH_VAL			26				/* value is too high to be decoded */

#define ASN1_ERR_CAUSE_BAD_TAG				30				/* Tag Number in data does not match the one in type identification description */
#define ASN1_ERR_CAUSE_BAD_P_C_FLAG			31				/* Constructor flag in data does not match the one in type identification description */

#define ASN1_ERR_CAUSE_NIL					(uchar)(~0)		/* No error cause */

	/* Macro for external declaration of ASN1 error context */

#define Asn1_ext_error_context									\
			extern uchar			asn1_error_type;			\
			extern uchar	FAR		*p_asn1_erroneous_value;	\
			extern uchar	FAR		*p_pc_asn1_error;			\
			extern uchar			asn1_error_cause

	/* Macro to get ASN1 error context */

#define Asn1_get_error(type, p_err_value, p_pc_err, cause)		\
			type			= asn1_error_type;					\
			p_err_value		= p_asn1_erroneous_value;			\
			p_pc_err		= p_pc_asn1_error;					\
			cause			= asn1_error_cause

/*-------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         		   */
				/*	definitions used to describe   */
				/*	value storage information	   */
				/*                         		   */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

	/* common structure used to describe data storage information (address, size, ...) */

struct asn1_address_size {

	uchar	FAR 					*address;		/* address where to store decoded data or containing value to be encoded */
	ulong 							size;			/* size of decoded data result or of value to be encoded */
	uchar							coding_flag;	/* flag indicating if value has been encoded or decoded */
	struct asn1_address_size 	FAR	*p_next;		/* pointer to next addressing information structure (used for list of values specified with SEQUENCE OF or SET OF) */
};

	/* C typedef asssociated with storage context structure */

typedef struct asn1_address_size	asn1_store_ctx_t;

	/* common structure used to specify the storage context
		for a meta-program or a "type field" of a meta-program */

struct asn1_store {

	uchar	FAR			*p_pc;			/* pointer to meta-program associated with this storage context */
	uchar				field_nb;		/* number of the field in meta-program associated with this storage context */
	asn1_store_ctx_t	store_ctx;		/* context to store storage information for first instance of current type */
};

	/* C typedef asssociated with meta-program storage structure */

typedef struct asn1_store	asn1_store_t;

	/*	values of coding flag field, this flag is also used to provide
		the sign of an INTEGER value or the number of sub-identifiers
		appended to an OBJECT IDENTIFIER value */

#define ASN1_NO_CODING_DONE				255		/* No encoding or decoding processed */
#define ASN1_ENCODED_VALUE				251		/* Value has been encoded successfully */
#define ASN1_DECODED_VALUE				252		/* Value has been decoded successfully */
#define ASN1_NOT_ENCODED_VALUE			253		/* Attempt to encode the value failed */
#define ASN1_NOT_DECODED_VALUE			254		/* Attempt to decode the value failed */

#define ASN1_CODING_POSITIVE			249		/* encoding of a positive or null INTEGER : This value must be different from all other coding flag values */
#define ASN1_CODING_NEGATIVE			250		/* encoding of a negative INTEGER : This value must be different from all other coding flag values */

	/*	When sub-identifiers are appended to an OBJECT IDENTIFIER value, a specific
		list of storage contexts is provided via "Asn1_set_obj_id_lists" Macro and
		the "address" field may be used to provide a string of octets as sub-identfiers.
		If so, the "coding flag" field indicates how the string is to be processed :
			- value above = copy string as provided,
            - other value = encode each octet of the string as a separate sub-identifier.
		*/

#define ASN1_FLAG_OBJ_ID_APPEND_STR		2

	/* Macros to access the storage context from meta-program storage description */

#define Asn1_get_p_store_ctx(p)			&((p) -> store_ctx)

	/* Macros to initialise a storage context */

#define Asn1_init_store_ctx(p_store_ctx)		(p_store_ctx) -> coding_flag = ASN1_NO_CODING_DONE;	\
												(p_store_ctx) -> p_next = (asn1_store_ctx_t FAR *)P_NIL

	/* Macros to link 2 storage contexts */

#define Asn1_link_store_ctx(p_first_ctx, p_next_ctx)	(p_first_ctx) -> p_next = (p_next_ctx)

	/* Macros to store a value (size + address) in a context */

#define Asn1_store_value(p_store_ctx, val_size, p_value)	(p_store_ctx) -> address = (p_value);	\
															(p_store_ctx) -> size = (ulong)val_size

	/* Macros to read storage flag */

#define Asn1_get_store_flag(p_store_ctx)		(p_store_ctx) -> coding_flag

	/* Macros to get size of stored value */

#define Asn1_get_stored_size(p_store_ctx)		(p_store_ctx) -> size

	/* Macros to get size of stored value */

#define Asn1_get_stored_address(p_store_ctx)	(p_store_ctx) -> address

	/* Macros to get next storage context */

#define Asn1_get_next_store_ctx(p_store_ctx)	(p_store_ctx) -> p_next

	/* Macro used to pass the table of all OBJECT IDENTIFIERS (number + address)
		and the list of sub-identifiers to be appended to some OBJECT IDENTIFIER values */

#define Asn1_set_obj_id_lists(nb, p_obj_id, p_sub_id)		asn1_set_node_and_append_list (nb, p_obj_id, p_sub_id)

#if ASN1_DYNAMIC_STORE_CTX_USED == ON

		/* flag and Macro to indicate if user can pass storage context during ASN1 process */

	extern uchar asn1_user_ctx_flag;

#	define Asn1_dynamic_ctx_used	asn1_user_ctx_flag

#endif

#if ASN1_DYNAMIC_APPEND_CTX_USED == ON

		/* flag and Macro to indicate if user can update storage contexts
			used for appended sub-identifiers during ASN1 decoding */

	extern uchar asn1_user_append_ctx_flag;

#	define Asn1_dynamic_append_ctx_used		asn1_user_append_ctx_flag

#endif

/*-------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         				   */
				/* Meta-programs to describe an ASN1 Type  */
				/*                         				   */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#include "asn1_mac.h"

/*-------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         				   */
				/* ASN1 : interface function DECLARATIONS  */
				/*                         				   */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#if NEW_FCT_STYLE == ON

	ulong		asn1_encoding_start					(uchar FAR *p_pc, uchar FAR * FAR *p_p_data, uchar FAR *p_limit, uchar store_nb, asn1_store_t FAR *p_store_list);
	void		asn1_set_node_and_append_list		(asn1_node_id_t obj_id_nb, struct asn1_obj_id_node CONST FAR *p_obj_id_tab, asn1_store_ctx_t FAR *p_append_subid_list);
	ulong		asn1_decoding_start					(uchar FAR *p_pc, uchar FAR * FAR *p_p_data, uchar FAR *p_limit, uchar store_nb, asn1_store_t FAR *p_store_list);

#	if ASN1_DYNAMIC_STORE_CTX_USED == ON
		uchar	Asn1_user_store_ctx					(uchar FAR *p_pc, uchar field_nb);
#	endif

#	if ASN1_DYNAMIC_APPEND_CTX_USED == ON
		void	Asn1_user_append_store_ctx			(asn1_node_id_t node_id, uchar sub_id_nb, asn1_store_ctx_t FAR *p_store);
#	endif

#else

	ulong		asn1_encoding_start					();
	void		asn1_set_node_and_append_list		();
	ulong		asn1_decoding_start					();

#	if ASN1_DYNAMIC_STORE_CTX_USED == ON
		uchar	Asn1_user_store_ctx					();
#	endif

#	if ASN1_DYNAMIC_APPEND_CTX_USED == ON
		void	Asn1_user_append_store_ctx			();
#	endif

#endif

#endif	/* ASN1_INT_H */


/* EOF */
