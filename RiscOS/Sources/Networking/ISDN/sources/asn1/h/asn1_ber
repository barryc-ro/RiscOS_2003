
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - asn1_ber.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Header implementing the common definitions used in Basic Encoding Rules
 * (BER) specified in recommendation X209 of ITU.
 * The BER provides a set of rules that can applied to values of abstract
 * syntaxes defined with ANS1 in order to encode or decode these values,
 * that is to say a transfer syntax.
 *
 * Content :    -
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    ASN1 language notation encoding/decoding library |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef ASN1_BER_H
#define ASN1_BER_H

	/*
	 *	General structure of the BER encoding of a data value is :
	 *
	 *		- IDENTIFIERS OCTETS : encode the tag of the type
	 *		- LENGTH OCTETS : encode the length of content octets
	 *		- CONTENT OCTETS : encode the data value itself
	 *		- END-OF-CONTENT OCTETS : present only if length octets specify
	 *					indefinite form, encode the end of the content.
	 *
	 *	In following descriptions, bit 1 is the least significant bit,
	 *	bit 8 the most significant one.
	 *
	 */



/*--------------------------------------------------------------------------*/

		/* Description of first octet of IDENTIFIER OCTETS */
		/* ----------------------------------------------- */

	/* BER encoding of class of tag */

#define BER_TAG_CLASS_UNIVERSAL			G_2 (0,0)				/* Bits 8 and 7 of first octet of identifier octets : Tag Class encoding */
#define BER_TAG_CLASS_APPLICATION		G_2 (0,1)				/* Bits 8 and 7 of first octet of identifier octets : Tag Class encoding */
#define BER_TAG_CLASS_CTX_SPECIFIC		G_2 (1,0)				/* Bits 8 and 7 of first octet of identifier octets : Tag Class encoding */
#define BER_TAG_CLASS_PRIVATE			G_2 (1,1)				/* Bits 8 and 7 of first octet of identifier octets : Tag Class encoding */

	/* BER encoding of Primitive/Constructed flag */

#define BER_PRIMITIVE_ENCODING			G_1 (0)					/* Bit 6 of first octet of identifier octets : primitive encoding */
#define BER_CONSTRUCTOR_ENCODING		G_1 (1)					/* Bit 6 of first octet of identifier octets : constructor encoding */

#define BER_BOTH_PRIM_CONS_ENCODING		2						/* value indicating that BER type encoding may be primitive or constructed (sender's option) */

	/* BER encoding of Tag Number on several octets */

#define BER_TAG_NB_EXTENDED				G_5 (1,1,1,1,1)			/* Bit 5 to 1 of first octet of identifier octets : if it is 11111,
																	tag number is extended to following octets and is greater than or equal to 31 */

struct ber_primitive_tag_nb {

	uchar type_id;		/* Type ID used to identify an ASN1 type (equivalent to ASN1 keywords SEQUENCE, CHOICE, ...) */
	uchar prim_flag;	/* encoding way of the type : primitive, constructed or both */
	uchar tag_nb;		/* number of the tag of the type */
};

	/* Access Macros */

#define Ber_type_id(xx)							p_ber_prim_tag_nb[xx].type_id
#define Ber_type_prim_flag(xx)					p_ber_prim_tag_nb[xx].prim_flag
#define Ber_type_tag_nb(xx)						p_ber_prim_tag_nb[xx].tag_nb

	/* encoding Macros */

#define Ber_encode_tag_class(class, p)			Asn1_put_field (p, 6, 2, class)		/* Bit 7 to 8 */
#define Ber_encode_prim_cons_flag(flag, p)		Asn1_put_field (p, 5, 1, flag)		/* Bit 6 */
#define Ber_encode_tag_nb_1o(tag_nb, p)			Asn1_put_field (p, 0, 5, tag_nb)	/* Bit 1 to 5 */

	/* length returned by IDENTIFIER OCTETS field encoding function
		to indicate a problem : it  cannot be 0 for 0 may be returned
		in valid situations */

#define BER_ERR_TYPE_IDENT_LGTH					(ushort)0xFFFF

/*--------------------------------------------------------------------------*/

		/* Description of first octet of LENGTH OCTETS */
		/* ------------------------------------------- */

	/* BER encoding of indefinite form length */

#define BER_LGTH_INDEFINITE_FORM		G_8 (1,0,0,0,0,0,0,0)	/* Bit 8 to 1 of single octet of LENGTH OCTETS : The length is unspecified, the
																	END-OF-CONTENT OCTETS shall be present. It may not be used if encoding is primitive */
	/* BER encoding of definite short form length */

#define BER_LGTH_SHORT_FORM				G_1 (0)					/* Bit 8 of single octet of LENGTH OCTETS 0 specifies short form : length L is encoded on 1 octet */

	/* maximum value for definite short form length */

#define BER_MX_LGTH_SHORT_FORM			127						/* short form : length L is encoded on 1 octet and L <= 127 */

	/* BER encoding of definite long form length */

#define BER_LGTH_LONG_FORM				G_8 (1,0,0,0,0,0,0,0)	/* Bit 8 of first octet of LENGTH OCTETS 1 specifies long form : Bits 7 to 1 specify LL
																	(number of following octets in LENGTH OCTETS), length L is encoded on LL octet */
																	
	/* maximum value of length of the length (LL)  for definite long form length */

#define BER_MX_LL_LONG_FORM				126						/* long form : length L is encoded on LL octets and LL <= 126 */

		/* size of hole reserved for the length field : the maximum
			number of octets that may be required to encode the length
			depends on the maximum permitted data size.
		*/

#if ASN1_MX_SIZE_DATA <= BER_MX_LGTH_SHORT_FORM

		/* short form may always be used for the length : 1 octet */

#	define BER_LGTH_HOLE_SIZE			1

#else

		/* long form is necessary : 1 leading octet + n octets to specify the length */

#	define BER_LGTH_HOLE_SIZE			(uchar)(2 + (ASN1_MX_SIZE_DATA/(ushort)256))

#endif


/*--------------------------------------------------------------------------*/

		/* definitions used to encode particular values */
		/* -------------------------------------------- */

#define BER_BOOLEAN_FALSE				G_8 (0,0,0,0,0,0,0,0)	/* encoding of BOOLEAN value FALSE */
#define BER_BOOLEAN_DEF_TRUE			G_8 (1,1,1,1,1,1,1,1)	/* default encoding of BOOLEAN value TRUE (TRUE associated with any non-zero value) */

#define BER_EXT_BIT_CONTINUE			G_1 (1)					/* Extension Bit 8 = 1 : value continued into following octet */
#define BER_EXT_BIT_STOP				G_1 (0)					/* Extension Bit 8 = 0 : end of value in current octet */

			/* encoding Macros */

#define Ber_encode_ext_bit(ext, p)		Asn1_put_field (p, 7, 1, ext)		/* Extension Bit 8 of octet pointed to by p */

/*--------------------------------------------------------------------------*/

		/* Description of END-OF-CONTENT OCTETS */
		/* ------------------------------------ */

	/* the end-of_content octets shall consist of 2 null octets */

#define BER_END_OF_CONTENT_SIZE			2
#define BER_END_OF_CONTENT_OCTET		G_8 (0,0,0,0,0,0,0,0)

/*-------------------------------------------------------------------------*/

		/* external declarations for BER encoding/decoding */
		/* ----------------------------------------------- */

extern struct ber_primitive_tag_nb	FAR		*p_ber_prim_tag_nb;

/*-------------------------------------------------------------------------*/

		/* Basic Encoding Rules : FUNCTION DECLARATIONS */
		/* -------------------------------------------- */

#if NEW_FCT_STYLE == ON

			/* BER encoding functions */

#	if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

		ushort		ber_encode_type_ident			(uchar FAR * FAR *p_p_data, uchar FAR *p_limit, uchar type_id, uchar impl, uchar class, asn1_tag_nb_t tag_nb, uchar FAR *p_tag_nb);

#	else

		ushort		ber_encode_type_ident			(uchar FAR * FAR *p_p_data, uchar FAR *p_limit, uchar type_id, uchar impl, uchar class, asn1_tag_nb_t tag_nb);

#	endif

	uchar 		ber_encode_length 					(ulong length, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar		ber_encode_sized_length 			(ulong length, uchar size, uchar FAR * FAR *p_p_data);
	uchar 		ber_encode_boolean 					(uchar value, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar 		ber_encode_integer 					(ulong value, uchar sign, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	ushort		ber_encode_prim_bitstring 			(ushort size, uchar FAR *p_string, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	ushort  	ber_encode_prim_o_c_string			(ushort size, uchar FAR *p_string, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar  		ber_encode_null 					(uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	ushort  	ber_encode_object_id 				(asn1_node_id_t node_id, uchar sub_id_nb, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar 		ber_octet_nb_in_obj_component 		(ulong component);
	uchar		ber_encode_obj_component 			(ulong component, uchar FAR *p_data);

			/* BER decoding functions */

#	if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

		ushort		ber_decode_type_ident			(uchar FAR * FAR *p_p_data, uchar FAR *p_limit, uchar type_id, uchar impl, uchar class, asn1_tag_nb_t tag_nb, uchar FAR *p_tag_nb);

#	else

		ushort		ber_decode_type_ident			(uchar FAR * FAR *p_p_data, uchar FAR *p_limit, uchar type_id, uchar impl, uchar class, asn1_tag_nb_t tag_nb);

#	endif

	uchar		ber_decode_length					(ushort FAR *p_length, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar		ber_decode_boolean					(asn1_store_ctx_t FAR *p_store, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar		ber_decode_integer					(asn1_store_ctx_t FAR *p_store, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar		ber_decode_prim_bitstring			(asn1_store_ctx_t FAR *p_store, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar		ber_decode_prim_o_c_string			(asn1_store_ctx_t FAR *p_store, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar		ber_decode_null						(uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar		ber_decode_object_id				(asn1_store_ctx_t FAR *p_store, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar 		ber_decode_obj_sub_id 				(uchar FAR * FAR *p_p_data, ulong FAR *p_sub_id);

	uchar 		ber_compare_length					(ulong length, uchar FAR *p_length, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);

#	if ASN1_ANY_TYPE_USED == ON
		uchar	ber_skip_type_id					(uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
#	endif

#else	/* NEW_FCT_STYLE == OFF */

			/* BER encoding functions */

	ushort		ber_encode_type_ident				();

	uchar 		ber_encode_length 					();
	uchar		ber_encode_sized_length 			();
	uchar 		ber_encode_boolean 					();
	uchar 		ber_encode_integer 					();
	ushort		ber_encode_prim_bitstring 			();
	ushort  	ber_encode_prim_o_c_string			();
	uchar  		ber_encode_null 					();
	ushort  	ber_encode_object_id 				();
	uchar 		ber_octet_nb_in_obj_component 		();
	uchar		ber_encode_obj_component 			();

			/* BER decoding functions */

	ushort		ber_decode_type_ident				();

	uchar		ber_decode_length					();
	uchar		ber_decode_boolean					();
	uchar		ber_decode_integer					();
	uchar		ber_decode_prim_bitstring			();
	uchar		ber_decode_prim_o_c_string			();
	uchar		ber_decode_null						();
	uchar		ber_decode_object_id				();
	uchar 		ber_decode_obj_sub_id 				();

	uchar 		ber_compare_length					();

#	if ASN1_ANY_TYPE_USED == ON
		uchar	ber_skip_type_id					();
#	endif

#endif /* NEW_FCT_STYLE */

#endif /* ASN1_BER_H */


/* EOF */
