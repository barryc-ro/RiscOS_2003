
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - asn1_mac.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Header implementing the description of an ASN1 type and of the context
 * used to encode and to decode this type. It defines C Macros that provide
 * a mean to implement the ASN1 meta-programs : For each ASN1 type there
 * shall be 2 meta-programs, 1 definition meta-program that defines a C
 * structure associated to the type analysis and 1 description meta-program
 * that declares a CONSTANT value of this structure.
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    ASN1 language notation encoding/decoding library |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef ASN1_MAC_H
#define ASN1_MAC_H

/*--------------------------------------------------------------------------*/

		/*
		 *	Description Macros for list of instructions
		 *	to be processed to encode or decode an ASN1 Type.
		 *	There are 2 categories of Macros : definition Macros
		 *	(name starts with D_) and description Macros.
		 *	Implementation of an ASN1 Type shall be as follows :
		 *    _
		 *   |
		 *	 | 	D_ASN1_TYPE_START		(type_toto)
		 * 1)|		D_ASN1_TYPE_FIELD_NB	(nb_of_fields)
		 *	 |	D_ASN1_TYPE_END
		 *	 |_
		 *    _
		 *   |
		 *	 |	ASN1_TYPE_START			(type_toto)
		 *	 |		"Type identification"
		 *	 |		ASN1_TYPE_FIELD_NB			(n)
		 * 2)|		ASN1_TYPE_FIELD				(toto_field_1)
		 *	 |			...
		 *	 |		ASN1_TYPE_OPTIONAL_FIELD	(toto_field_i, ind_list)
		 *	 |			...
		 *	 |		ASN1_TYPE_FIELD				(toto_field_n-1)
		 *	 |		ASN1_TYPE_LAST_FIELD		(toto_field_n)
		 *	 |	ASN1_TYPE_END
		 *	 |_
		 *
		 *	1) is the definition meta-program and 2) is the description meta-program.
		 *
		 *
		 *	"Type identification" may be either ANS1_TYPE_IDENT	(...) or
		 *	ANS1_TYPE_IDENT_EXT	(...) or a direct identification
		 *	of the type using values defined in asn1_int.h file as :
		 *	ASN1_INTEGER, or ASN1_OCTET_STRING, (with a "," afterwards)
		 *
		 *	If there is no field in the type, D_ASN1_TYPE_FIELD_NB Macro
		 *	shall not be used, ASN1_TYPE_NO_FIELD Macro shall remplace
		 *	ASN1_TYPE_FIELD_NB and subsequent ASN1_TYPE_FIELD and
		 *	ASN1_TYPE_LAST_FIELD Macros.
		 *
		 *  Any ASN1_TYPE_FIELD shall be replaced by ASN1_TYPE_OPTIONAL_FIELD
		 *	if the type field is optional (in SEQUENCE and SET) : one more
		 *	argument is needed = the address of the list of all optional
		 *	indicators (1 per each possible instance of the type if it is
		 *	included in a SET OF or SEQUENCE OF, only 1 indicator else).
		 *	In the same way, ASN1_TYPE_LAST_FIELD Macro may be replaced
		 *	by ASN1_TYPE_OPT_LAST_FIELD.
		 *
		 */


	/* First Macro used for any ASN1 type definition */

#define D_ASN1_TYPE_START(type)											\
			struct type {												\
				struct asn1_type_identification id;						\
				uchar  							field_nb;

	/* Macro used to define the addresses of meta-program
		that will be used to analyse "components" of the type
		and the number of these components */

#if ASN1_OPTIONAL_USED == ON

#	define D_ASN1_TYPE_FIELD_NB(nb)		struct asn1_optional_type next_p_pc_tab[nb];

#else

#	define D_ASN1_TYPE_FIELD_NB(nb)		uchar FAR *next_p_pc_tab[nb];

#endif

	/* Last Macro used for any ASN1 type definition : DO NOT FORGET IT ! */

#define D_ASN1_TYPE_END				};


	/* First Macro used for any type description */

#define ASN1_TYPE_START(type)		CONST struct type type = {

	/* Macros used to describe type identification (class and number
		of the tag, implicit/explicit flag). A pointer P_TAG may be
		needed if tag number extension mechanism is used */

#if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

#	define ASN1_TYPE_IDENT(TYPE_ID, IMPL, CLASS, TAG_NB)		\
				{TYPE_ID, IMPL, CLASS, TAG_NB, P_NIL},

#	define ASN1_TYPE_IDENT_EXT(IMPL, CLASS, TAG_NB, P_TAG)		\
				{TYPE_ID, IMPL, CLASS, TAG_NB, P_TAG},

#else

#	define ASN1_TYPE_IDENT(TYPE_ID, IMPL, CLASS, TAG_NB)		\
				{TYPE_ID, IMPL, CLASS, TAG_NB},

#endif

	/* Macro used to describe the number of components in the type */

#define ASN1_TYPE_FIELD_NB(nb)			nb,		\
										{

	/* Macro used to describe no components in the type */

#define ASN1_TYPE_NO_FIELD				0

	/*	Macro used to specify the address of meta-program
		that will be used to analyse "component" of the type :
		The value must be a type which is defined elsewhere in a
		ASN1_TYPE_START Macro ! */

#if ASN1_OPTIONAL_USED == ON

#	define ASN1_TYPE_FIELD(name)						{(uchar FAR *)&name, P_NIL},

	/* OPTIONAL keyword is used in ASN1 description : second argument is a
		pointer to the list of all optional indicators (1 for each instance of the type) */

#	define ASN1_TYPE_OPTIONAL_FIELD(name, ind_list)		{(uchar FAR *)&name, ind_list},

#else

#	define ASN1_TYPE_FIELD(name)						(uchar FAR *)&name,

#endif

	/* These Macros are the same as the Macros above but they must
		be used for the last field in the meta-program */

#if ASN1_OPTIONAL_USED == ON

#	define ASN1_TYPE_LAST_FIELD(name)					{(uchar FAR *)&name, P_NIL}}
#	define ASN1_TYPE_OPT_LAST_FIELD(name, ind_list)		{(uchar FAR *)&name, ind_list}}

#else

#	define ASN1_TYPE_LAST_FIELD(name)					(uchar FAR *)&name}

#endif

	/* Last Macro used for any type description : DO NOT FORGET IT ! */

#define ASN1_TYPE_END				};


	/* Macro used for external declarations of Meta-programs structures */

#define ASN1_TYPE_EXT_META_PROG(type)		extern CONST struct type type;

#endif /* ASN1_MAC_H */


/* EOF */
