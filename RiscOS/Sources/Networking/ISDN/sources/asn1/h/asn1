
/*--------------------------------------------------------------------------*
 *                       M O D U L E   H E A D E R
 *
 * filename - asn1.h
 *
 * $Revision$
 *
 * $Date$
 *
 * Header implementing the common definitions used in Abstract Syntax
 * Notation 1 (ASN1) specified in recommendation X208 of ITU.
 * The ASN1 provides a notation to define abstract syntax (language).
 *
 * Content :    - General Macro
 *				- structure and Macros for meta-program analysis
 *				- Tag numbers of UNIVERSAL class types
 *				- ERROR management
 *				- TRAP management
 *				- object identifiers tree management
 *				- encoding macros
 *				- function prototype definitions
 *
 *-------------------------------------------------------------------------*/

/*[]---------------------------------------------------[]*/
/*|                                                     |*/
/*|    OMNITEL-BRICKS                                   |*/
/*|    ASN1 language notation encoding/decoding library |*/
/*|                                                     |*/
/*|    Copyright (c) 1989-1997 by OMNITEL SA            |*/
/*|    All Rights Reserved.                             |*/
/*|                                                     |*/
/*[]---------------------------------------------------[]*/

#ifndef ASN1_H
#define ASN1_H

#include "services.h"
#include "asn1_int.h"

/*--------------------------------------------------------------------------*/

		/* General macro used to put the field "field" of "lgth" bits
			into octet pointed to by pointer "p" at position "pos" (0 to 7). */

#define Asn1_put_field(p, pos, lgth, field)			*(p) = ( (*(p) & ( (uchar)(~((Mask (lgth))<<(pos)) ) ) ) | ( ((field)&(Mask(lgth))) << (pos) ) )

/*--------------------------------------------------------------------------*/

			/* definition of NIL index used for search in table */

#define ASN1_INDEX_NIL				(uchar)(~0)

/*--------------------------------------------------------------------------*/

		/* common structure used to process the meta-programs : all the
			ASN1 types descriptions contain the fields of this structure,
			except the basic types that has no p_next_pc field */

struct asn1_type_common {

	struct asn1_type_identification		id;						/* identification of the type : class and number of the tag, use of IMPLICIT/EXPLICIT keywords */
	uchar  								field_nb;				/* number of "components" in the type */

#	if ASN1_OPTIONAL_USED == ON
		struct asn1_optional_type		next_pc[1];				/* description of meta-program related to first component of the type */
#	else
		uchar 	FAR						*p_next_pc[1];			/* pointer to the meta-program related to first component of the type */
#	endif

};

	/* Access Macros using p_type_desc pointer */

#define Asn1_type_id							p_type_desc -> id.type_id
#define Asn1_type_impl_flag						p_type_desc -> id.implicit_flag
#define Asn1_type_tag_class						p_type_desc -> id.tag_class
#define Asn1_type_tag_nb						p_type_desc -> id.tag_number
#define Asn1_type_field_nb						p_type_desc -> field_nb

#if ASN1_OPTIONAL_USED == ON

#	define Asn1_type_p_pc(field_nb)				((p_type_desc -> next_pc) + field_nb) -> p_pc
#	define Asn1_type_opt_ind_list(field_nb)		((p_type_desc -> next_pc) + field_nb) -> opt_ind_list

#else

#	define Asn1_type_p_pc(field_nb)				*((p_type_desc -> p_next_pc) + field_nb)

#endif

#if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

#	define Asn1_type_p_tag_nb		p_type_desc -> id.p_tag_nb

#endif

#define Asn1_get_p_type_desc		p_type_desc = (struct asn1_type_common FAR *)Current_p_pc

	/* Macros to access the storage address context using p_store_list pointer */

#define Asn1_store_list_p_pc		p_store_list -> p_pc
#define Asn1_store_list_field_nb	p_store_list -> field_nb
#define Asn1_store_list_p_ctx(xx)	&(p_store_list[xx].store_ctx)

#define Asn1_get_p_store(xx)		p_store = Asn1_store_list_p_ctx(xx)

	/* Macros to access the storage address informations using p_store pointer */

#define Asn1_type_store_add			p_store -> address
#define Asn1_type_store_size		p_store -> size
#define Asn1_type_store_flag		p_store -> coding_flag
#define Asn1_type_next_store		p_store -> p_next

/*--------------------------------------------------------------------------*/

	/* tag numbers of UNIVERSAL class types (= the types defined in X208),
		other may be used for non UNIVERSAL class types */

#define ASN1_BOOLEAN_TAG_NB				1		/* tag number of BOOLEAN type */
#define ASN1_INTEGER_TAG_NB				2		/* tag number of INTEGER type */
#define ASN1_BITSTRING_TAG_NB			3		/* tag number of BIT STRING type */
#define ASN1_OCTETSTRING_TAG_NB			4		/* tag number of OCTET STRING type */
#define ASN1_NULL_TAG_NB				5		/* tag number of NULL type */
#define ASN1_OBJECTIDENT_TAG_NB			6		/* tag number of OBJECT IDENTIFIER type */
#define ASN1_OBJECTDESCR_TAG_NB			7		/* tag number of Objectdescriptor type */
#define ASN1_EXTERNAL_TAG_NB			8		/* tag number of EXTERNAL type */
#define ASN1_REAL_TAG_NB				9		/* tag number of REAL type */
#define ASN1_ENUMERATED_TAG_NB			10		/* tag number of ENUMERATED type */

#define ASN1_SEQUENCE_TAG_NB			16		/* tag number of SEQUENCE type */
#define ASN1_SEQUENCEOF_TAG_NB			16		/* tag number of SEQUENCE OF type */
#define ASN1_SET_TAG_NB					17		/* tag number of SET type */
#define ASN1_SETOF_TAG_NB				17		/* tag number of SET OF type */

#define ASN1_NUMERICSTRING_TAG_NB		18		/* tag number of NumericString type */
#define ASN1_PRINTABLESTRING_TAG_NB		19		/* tag number of PrintableString type */
#define ASN1_TELETEXSTRING_TAG_NB		20		/* tag number of TeletexString type */
#define ASN1_VIDEOTEXSTRING_TAG_NB		21		/* tag number of VideotexString type */
#define ASN1_IA5STRING_TAG_NB			22		/* tag number of IA5String type */
#define ASN1_GRAPHICSTRING_TAG_NB		25		/* tag number of GraphicString type */
#define ASN1_VISIBLESTRING_TAG_NB		26		/* tag number of VisibleString type */
#define ASN1_GENERALSTRING_TAG_NB		27		/* tag number of GeneralString type */

#define ASN1_UNIVERSALTIME_TAG_NB		23		/* tag number of UTCTime type */
#define ASN1_GENERALIZEDTIME_TAG_NB		24		/* tag number of GeneralizedTime type */

	/* external declarations for tag storage */

extern uchar			asn1_type_tag_class;			/* storage of the tag class of current type for type identification encoding */
extern asn1_tag_nb_t	asn1_type_tag_nb;				/* storage of the tag number of current type for type identification encoding */

#if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

	extern uchar FAR 	*p_asn1_tag_nb;			/* storage of pointer to extended tag nb */

#endif

	/* flag indicating if current type in data is constructed (ON) or primitive (OFF) */

extern uchar 			asn1_constructed_flag;

	/* Tag store and get Macros */

#define Asn1_store_tag_class(class)		asn1_type_tag_class = class
#define Asn1_store_tag_nb(nb)			asn1_type_tag_nb = nb

#define Asn1_get_tag_class				asn1_type_tag_class
#define Asn1_get_tag_nb					asn1_type_tag_nb

#if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

#	define Asn1_get_p_tag_nb(p)				p = p_asn1_tag_nb;
#	define Asn1_store_p_tag_nb(p)			p_asn1_tag_nb = p;

#else

#	define Asn1_get_p_tag_nb(p)
#	define Asn1_store_p_tag_nb(p)

#endif

#define Asn1_reset_stored_tag()										\
					Asn1_store_tag_class	(ASN1_TYPE_NO_TAG);		\
					Asn1_store_tag_nb		(ASN1_TYPE_NO_TAG);		\
					Asn1_store_p_tag_nb		(P_NIL)

/*--------------------------------------------------------------------------*/

	/* external declaration of list of sub-identifiers to be appended to OBJECT IDENTIFIER values */

extern asn1_store_ctx_t FAR 	*p_asn1_appended_obj_id;

	/* Macro to get an OBJECT IDENTIFIER node from list */

#define Asn1_get_obj_id_node(node_id)			asn1_search_obj_id_node	(node_id)
#define Asn1_get_son_node(p_node, sub_id)		asn1_search_son_node (p_node, sub_id)

/*--------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         */
				/*	Type encoding Macros   */
				/*						   */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-*/

#if ASN1_BER_USED == ON /*{*/

	/* Basic Encoding Rules are used -> ber_functions defined in ber_enc.c */

#	if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

#		define Asn1_encode_type_ident(p_p_data, p_limit, type_id, impl, class, tag_nb, p_tag_nb)		\
						ber_encode_type_ident (p_p_data, p_limit, type_id, impl, class, tag_nb, p_tag_nb)
#	else

#		define Asn1_encode_type_ident(p_p_data, p_limit, type_id, impl, class, tag_nb, p_tag_nb)		\
						ber_encode_type_ident (p_p_data, p_limit, type_id, impl, class, tag_nb)
#	endif

#	define Asn1_encode_length(length, p_p_data, p_limit) 							ber_encode_length (length, p_p_data, p_limit)
#	define Asn1_encode_sized_length(length, size, p_p_data) 						ber_encode_sized_length (length, size, p_p_data)
#	define Asn1_encode_boolean(value, p_p_data, p_limit) 							ber_encode_boolean (value, p_p_data, p_limit)
#	define Asn1_encode_integer(value, sign, p_p_data, p_limit) 					 	ber_encode_integer (value, sign, p_p_data, p_limit)
#	define Asn1_encode_enumerated(value, sign, p_p_data, p_limit) 					ber_encode_integer (value, sign, p_p_data, p_limit)
#	define Asn1_encode_bit_string(size, p_string, p_p_data, p_limit) 				ber_encode_prim_bitstring (size, p_string, p_p_data, p_limit)

#	define Asn1_encode_octet_string(size, p_string, p_p_data, p_limit) 				ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)
#	define Asn1_encode_numeric_string(size, p_string, p_p_data, p_limit) 			ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)
#	define Asn1_encode_printable_string(size, p_string, p_p_data, p_limit) 			ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)
#	define Asn1_encode_teletex_string(size, p_string, p_p_data, p_limit) 			ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)
#	define Asn1_encode_videotex_string(size, p_string, p_p_data, p_limit) 			ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)
#	define Asn1_encode_IA5_string(size, p_string, p_p_data, p_limit) 				ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)
#	define Asn1_encode_graphic_string(size, p_string, p_p_data, p_limit) 			ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)
#	define Asn1_encode_visible_string(size, p_string, p_p_data, p_limit) 			ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)
#	define Asn1_encode_general_string(size, p_string, p_p_data, p_limit) 			ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)

#	define Asn1_encode_null(p_p_data, p_limit) 										ber_encode_null (p_p_data, p_limit)
#	define Asn1_encode_object_identifier(node_id, sub_id_nb, p_p_data, p_limit)		ber_encode_object_id (node_id, sub_id_nb, p_p_data, p_limit)
#	define Asn1_encode_object_descriptor(size, p_string, p_p_data, p_limit) 		ber_encode_prim_o_c_string (size, p_string, p_p_data, p_limit)

		/* size of hole reserved for the length field : as total data length
			is unknown at the beginning of the encoding, a space is reserved
			to store this length after that encoding is done. Thus, we do not
			have to translate the content data inside the data area after the encoding.
		*/

#	define ASN1_LGTH_HOLE_SIZE												BER_LGTH_HOLE_SIZE

		/* length returned by type identification encoding function to indicate that a problem occurred */

#	define ASN1_ERR_TYPE_IDENT_LGTH											BER_ERR_TYPE_IDENT_LGTH

	/* Basic Encoding Rules are used -> ber_functions defined in ber_dec.c */

#	if ASN1_TAG_NB_EXTENSION_MECHANISM == ON

#		define Asn1_decode_type_ident(p_p_data, p_limit, type_id, impl, class, tag_nb, p_tag_nb)		\
						ber_decode_type_ident (p_p_data, p_limit, type_id, impl, class, tag_nb, p_tag_nb)
#	else

#		define Asn1_decode_type_ident(p_p_data, p_limit, type_id, impl, class, tag_nb, p_tag_nb)		\
						ber_decode_type_ident (p_p_data, p_limit, type_id, impl, class, tag_nb)
#	endif

#	define Asn1_decode_length(p_length, p_p_data, p_limit) 				ber_decode_length (p_length, p_p_data, p_limit)
#	define Asn1_decode_boolean(p_store, p_p_data, p_limit) 				ber_decode_boolean (p_store, p_p_data, p_limit)
#	define Asn1_decode_integer(p_store, p_p_data, p_limit) 				ber_decode_integer (p_store, p_p_data, p_limit)
#	define Asn1_decode_enumerated(p_store, p_p_data, p_limit) 			ber_decode_integer (p_store, p_p_data, p_limit)
#	define Asn1_decode_bit_string(p_store, p_p_data, p_limit) 			ber_decode_prim_bitstring (p_store, p_p_data, p_limit)

#	define Asn1_decode_octet_string(p_store, p_p_data, p_limit) 		ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)
#	define Asn1_decode_numeric_string(p_store, p_p_data, p_limit) 		ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)
#	define Asn1_decode_printable_string(p_store, p_p_data, p_limit) 	ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)
#	define Asn1_decode_teletex_string(p_store, p_p_data, p_limit) 		ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)
#	define Asn1_decode_videotex_string(p_store, p_p_data, p_limit) 		ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)
#	define Asn1_decode_IA5_string(p_store, p_p_data, p_limit) 			ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)
#	define Asn1_decode_graphic_string(p_store, p_p_data, p_limit) 		ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)
#	define Asn1_decode_visible_string(p_store, p_p_data, p_limit) 		ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)
#	define Asn1_decode_general_string(p_store, p_p_data, p_limit) 		ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)

#	define Asn1_decode_null(p_p_data, p_limit)							ber_decode_null (p_p_data, p_limit)
#	define Asn1_decode_object_identifier(p_store, p_p_data, p_limit)	ber_decode_object_id (p_store, p_p_data, p_limit)
#	define Asn1_decode_object_descriptor(p_store, p_p_data, p_limit) 	ber_decode_prim_o_c_string (p_store, p_p_data, p_limit)

#	define Asn1_compare_length(length, p_length, p_p_data, p_limit) 	ber_compare_length (length, p_length, p_p_data, p_limit)

#	if ASN1_ANY_TYPE_USED == ON
#		define Asn1_skip_type_id(p_p_data, p_limit) 					ber_skip_type_id (p_p_data, p_limit)
#	endif 

#	include "asn1_ber.h"

#endif	/* ASN1_BER_USED} */

#define Asn1_compare_type_ident(p_data, p_limit, p_pc) 					asn1_compare_type_ident (p_data, p_limit, p_pc)

/*--------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         */
				/*	ASN1 SET ERROR MACROS  */
				/*						   */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-*/

	/* external declarations */

extern uchar			asn1_error_type;				/* type of error that has occurred */
extern uchar	FAR		*p_asn1_erroneous_value;		/* pointer to value that caused the error */
extern uchar	FAR		*p_pc_asn1_error;				/* pointer to meta-program in which the error occurred */
extern uchar			asn1_error_cause;				/* event that caused the error : it is a supplementary information that is not always used */

	/* All the definitions of error codes and the error get Macro
		are defined in asn1_int.h file */

#define Asn1_set_error(type, p_err_value, p_pc_err)			\
			asn1_error_type			= type;					\
			p_asn1_erroneous_value	= p_err_value;			\
			p_pc_asn1_error			= p_pc_err

#define Asn1_set_error_cause(cause)			asn1_error_cause = cause

#define Asn1_set_error_and_cause(type, p_err_value, p_pc_err, cause)				\
						Asn1_set_error			(type, p_err_value, p_pc_err);		\
						Asn1_set_error_cause	(cause)

/*--------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         */
				/*	ASN1 TRAP MANAGEMENT   */
				/*						   */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-*/

#define TRAP_ASN1_BASE						800						/* Base code for ASN1 TRAP codes */

#define TRAP_ASN1_NODE_INCONSISTENCY		(TRAP_ASN1_BASE + 1)	/* inconsistency in OBJECT IDENTIFIER tree table */
#define TRAP_ASN1_NIL_PC					(TRAP_ASN1_BASE + 2)	/* Request to analyse a meta-program with a NIL meta-program pointer (type has non null field_nb but NIL type field specified) */
#define TRAP_ASN1_IMBRICATION				(TRAP_ASN1_BASE + 3)	/* Too many imbrication levels implemented in meta-program */
#define TRAP_ASN1_TAG_CLASS					(TRAP_ASN1_BASE + 4)	/* unknown Tag Class contained in meta-program description */
#define TRAP_ASN1_TAG_NB					(TRAP_ASN1_BASE + 5)	/* empty extended Tag Nb : p_tag_nb points to a list of 0 value */
#define TRAP_ASN1_TYPE_NOT_IMPLEMENTED		(TRAP_ASN1_BASE + 6)	/* ASN1 type is unknown or not implemented */

#define TRAP_ASN1_ENCOD_NO_STORE_CTX		(TRAP_ASN1_BASE + 10)	/* attempt to encode an ASN1 value with no associated storage context */
#define TRAP_ASN1_ENCOD_NO_UPPER_NODE		(TRAP_ASN1_BASE + 11)	/* attempt to encode an ASN1 OBJECT IDENTIFIER node whose upper node cannot be found */
#define TRAP_ASN1_ENCOD_NO_NODE				(TRAP_ASN1_BASE + 12)	/* OBJECT IDENTIFIER node cannot be found though it has already been found before */

#define TRAP_ASN1_CHOICE_IMBRICATION		(TRAP_ASN1_BASE + 20)	/* Too many imbrication levels implemented in a CHOICE meta-program for types whose
																		type ID is set to TYPE ID NIL or CHOICE */
#define TRAP_ASN1_BASIC_TYPE_ID_NIL			(TRAP_ASN1_BASE + 21)	/* Basic type cannot be identified for it has type id set to TYPE ID NIL */

/*-------------------------------------------------------------------------*/

				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
				/*                         				   */
				/* ASN1 : function prototype DECLARATIONS  */
				/*                         				   */
				/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#if NEW_FCT_STYLE == ON

	void							asn1_init 					(void);
	ulong							asn1_encode_basic_type 		(asn1_store_ctx_t FAR *p_store, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);
	uchar							asn1_search_store_ctx 		(asn1_store_t FAR *p_store_list, uchar FAR *p_nb, uchar FAR *p_pc, uchar field_nb);
	struct asn1_obj_id_node	CONST FAR *	asn1_search_obj_id_node	(asn1_node_id_t node_id);
	struct asn1_obj_id_node	CONST FAR *	asn1_search_son_node	(struct asn1_obj_id_node CONST FAR *p_cur_node, ulong sub_id);
	uchar							asn1_compare_type_ident		(uchar FAR *p_data, uchar FAR *p_limit, uchar FAR *p_pc);

	ulong							asn1_decode_basic_type 		(asn1_store_ctx_t FAR *p_store, uchar FAR * FAR *p_p_data, uchar FAR *p_limit);

#	if ASN1_OPTIONAL_USED == ON
		uchar 						asn1_value_present 			(void);
		void						asn1_set_optional_value		(uchar presence);
#	endif

#else

	void							asn1_init 					();
	ulong 							asn1_encode_basic_type		();
	uchar							asn1_search_store_ctx 		();
	struct asn1_obj_id_node	CONST FAR *	asn1_search_obj_id_node	();
	struct asn1_obj_id_node	CONST FAR *	asn1_search_son_node	();
	uchar							asn1_compare_type_ident		();

	ulong 							asn1_decode_basic_type		();

#	if ASN1_OPTIONAL_USED == ON
		uchar 						asn1_value_present 			();
		void						asn1_set_optional_value		();
#	endif

#endif


#endif /* ASN1_H */


/* EOF */
