/* ANSI includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* RISC OS system includes */
#include "kernel.h"
#include "swis.h"

/* includes for other .c files go here*/
#include "module.h"
#include "device.h"
#include "isdnctrl.h"

/* OMNITEL includes  files go here*/
#include "services.h"
#include "ob_int.h"
#include "cc_int.h"
#include "acu_int.h"
#include "ap_par.h"
#include "ph_d_par.h"
#include "ph_int.h"
#include "dd_int.h"

#if MULTILINK_PPP_SUPPORT == ON
#    include "mppp_int.h"
#endif

    /* ISDN card current informations (global) */

extern struct buffer 	FAR	*VOLATILE p_it_stack_buffer;


int isdn_card_slot_number;
VOLATILE int isdn_card_isr_address; 	/* address of ISDN card Interrupt Status Register */
VOLATILE int isdn_card_cr_address;  	/* address of ISDN card Control Register */
unsigned char isdn_card_cr_val;      	/* copy value of ISDN card Control Register */
VOLATILE int isdn_card_EASI_address;	/* address of ISDN card EASI space */
int irq_cnt = 0;			/* Counts interrupt calls */
int in_callback = FALSE;		/* TRUE if in callback routine */
int callback_pending = FALSE;		/* TRUE if callback routine is pending */

extern int  isdn_irq_entry (_kernel_swi_regs *r, void *pw);
extern void hscx_it (uchar hscx_id);

#if PH_D_U == ON
	extern void iec_it (uchar PI_tab_id);
#endif
extern void isac_it (uchar isac_id);
extern int  timer_it_entry (_kernel_swi_regs *r, void *pw);
extern void timer_it (void);
extern int  isdn_callback_entry (_kernel_swi_regs *r, void *pw);

extern int  omnitel_event_entry (_kernel_swi_regs *r, void *pw);
extern _kernel_oserror *omnitel_init(void);
extern _kernel_oserror *omnitel_final(void);
extern int  omnitel_server			(uchar);

extern void user_build_and_send_to_appli (uchar sapi, uchar code, int argc, char **argv);
extern void   enable_podule_irqs (unsigned int);
extern void   disable_podule_irqs (unsigned int);

void isdn_card_init (void);
void isdn_card_final (void);

/* structure containing pointers to cmd functions */

struct cmdent module_cmds[MAXCMD + 1] = {
       /* these are function pointers - one function handles each *command  */
    do_ISDNDial,	/* 0 */
    do_ISDNHook,	/* 1 */
    do_ISDNAnsw,	/* 2 */
    do_ISDNHookin,	/* 3 */
    do_ISDNLog,		/* 4 */
    do_ISDNLoop,	/* 5 */
    do_ISDNList,	/* 6 */
#if MULTILINK_PPP_SUPPORT == ON
    do_MPPPDbg,		/* 7 */
    do_MPPPAdd,		/* 8 */
    do_MPPPDrop,	/* 9 */
#else
    do_nothing, 
    do_nothing,
    do_nothing,
#endif
    do_nothing,
    do_nothing,
    do_nothing,
    do_nothing,
    do_nothing,
    do_nothing,
    do_nothing,
    0,
};

/* structure containing pointers to SWI functions */
struct swient module_swis[MAXSWI + 1] = {
       /* these are function pointers - one function handles each SWI  */
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    isdn_nullswi,
    0,
};

int search_isdn_card (void)
{

#   if ISDN_CARD_EEPROM_LOADED == ON

    int n, m[2];
    _kernel_swi_regs r;

    for (n=0; n<8; n++) {

    	    /* check expansion card product type */

    	r.r[0] =    EXPANSION_CARD_PRODUCT_TYPE_MASK |
    	    	    EASI_SPACE_ADDRESS_MASK ;
    	r.r[1] = (int) &m;  /* result address */
    	r.r[2] = 8; 	    /* length in bytes */
    	r.r[3] = n; 	    /* ROM section (expansion card number) */
    	_kernel_swi (XOS_Bit|Podule_ReadInfo, &r, &r);

    	if (m[0] == ISDN_CARD_PRODUCT_ID) {

    	    	/* set address for EASI space  */

    	    isdn_card_EASI_address = m[1];
    	    	/* set address for Interrupt Status Register */

    	    isdn_card_isr_address = isdn_card_EASI_address
    	    	    	    	    + ISDN_CARD_ISR_OFFSET
    	    	    	    	    + ISDN_CARD_SLOT_OFFSET(n);

    	    	/* set address for Control Register and reset value */

    	    isdn_card_cr_address =  isdn_card_EASI_address
    	    	    	    	    + ISDN_CARD_CR_OFFSET
    	    	    	    	    + ISDN_CARD_SLOT_OFFSET(n);
    	    Isdn_card_cr_reset ();

    	    return (n); /* return Slot number */
    	}
    }
    return (-1);    /* card not found */

#else
    	    isdn_card_EASI_address = ISDN_CARD_EASI_ADDRESS;
    	    	/* set address for Interrupt Status Register */

    	    isdn_card_isr_address = isdn_card_EASI_address
    	    	    	    	    + ISDN_CARD_ISR_OFFSET
    	    	    	    	    + ISDN_CARD_SLOT_OFFSET(ISDN_CARD_SLOT_NUMBER);

    	    	/* set address for Control Register and reset value */

    	    isdn_card_cr_address =  isdn_card_EASI_address
    	    	    	    	    + ISDN_CARD_CR_OFFSET
    	    	    	    	    + ISDN_CARD_SLOT_OFFSET(ISDN_CARD_SLOT_NUMBER);
   	    Isdn_card_cr_reset ();
    	    return (ISDN_CARD_SLOT_NUMBER); /* return Slot number */

#endif
}


    /* Module initialisation code */

_kernel_oserror  module_e;
void 	    	*module_wsp;

#if MESSAGE_AUDIT == ON

FILE 	    	*f_cap;
static char 	 f_cap_name[40] = "capture";
#endif

#if ASSERT == ON
FILE 	    	*f_trace;
VOLATILE static char  	*p_trace;
static char 	 f_trace_name[40] = "trace";
char	    	 data_trace [TRACE_SIZE];
#endif

_kernel_oserror *module_init(char *cmd_tail, int pbase, void *pw)
{
	_kernel_oserror *e;

	module_wsp = pw;

#   	if ASSERT == ON
    		p_trace = data_trace;
#   	endif
		/* check ISDN card presence */

	if ((isdn_card_slot_number = search_isdn_card()) < 0) {

      		    /* card not found: no need to go on */

    		module_e.errnum = ISDN_CARD_NOT_FOUND;
	
	    	return ((_kernel_oserror *)&module_e);

    	}


   
		/* device driver init (must be called before omnitel_init enables interrupts etc */

	e = device_init (module_wsp);    
		
 	/* do module set up, eg claim memory, claim interrupts, etc. */

	if (e == P_NIL) {
		e = omnitel_init ();

			/* initialize ISDN card control register */

		isdn_card_init ();
	}		
	
	return (e);
}

_kernel_oserror *module_cmd_handler(char *arg_string, int arg_count, int cmd_no, void *pw)
{
    struct cmdent *callp;
    int margc;
    char *margv[20];
    char *cp;
    char **argp = margv;

    if( cmd_no >= sizeof(module_cmds) / sizeof(module_cmds[0]) ) {
	module_e.errnum = 42;
	sprintf(module_e.errmess, "ISDN: bad command number: %d\n",
		cmd_no);
	return &module_e;
    }

    /*
     * YEURGH!
     *
     * This time it is RISC OS and cmhg conspiring to necessitate
     * more grungy code: if the arg_count is "too large", assume
     * that this is a help request, rather than a *-command, in
     * which case arg_string is a text buffer, and arg_count is
     * the buffer length, and breaking the string up is a bad idea.
     * The "too large" level is set at 128, on the assumption that
     * the max. length of a command line is 256 bytes which gives a
     * (theoritical) maximum of 128 arguments
     */
    if (arg_count < 128) {

	if (arg_count > 20)
	    /* limit set by size of margv array */
	    arg_count = 20;

	margc = 0;
	cp = arg_string;
	while (*cp && arg_count-- > 0)	{
	    while (*cp == ' ' || *cp == '\t')
		cp++;

	    if (*cp < ' ') {
	        *cp = '\0';
		break;
	    }

	    *argp++ = cp;
	    margc++;
	    while (*cp >= ' ' && *cp != ' ' && *cp != '\t')
		cp++;

	    if (*cp < ' ') {
	        *cp = '\0';
		break;
	    }

	    *cp++ = '\0';
	}

	*argp++ = 0;

    } else {

	/* its a help request */

	/* This is very, very, very yucky. But it has to work on 3.10, and
	   CMHG won't co-operate */

	switch (cmd_no)	{
	    case CMD_ISDNDial:
            	sprintf(arg_string, "*ISDNdial dials the number entered in argument "
                                "Syntax: *ISDNDial service number");
            	break;
            case CMD_ISDNHook:
            	sprintf(arg_string, "*ISDNhook clears the last connected call"
                                "Syntax: *ISDNHook");
            	break;
	    case CMD_ISDNAnsw:
            	sprintf(arg_string, "*ISDNAnsw answers to an incoming call "
                                "Syntax: *ISDNAnsw ");
            	break;
	    case CMD_ISDNHookin:
            	sprintf(arg_string, "*ISDNdial hooks the incoming call "
                                "Syntax: *ISDNHookin ");
            	break;
	    case CMD_ISDNLog:
            	sprintf(arg_string, "*ISDNLog saves capture and trace files "
                                "Syntax: *ISDNLog");
            	break;
	    case CMD_ISDNLoop:
            	sprintf(arg_string, "*ISDNLoop loops B channels "
                                "Syntax: *ISDNLoop B_channel activate ");
            	break;
	    case CMD_ISDNList:
            	sprintf(arg_string, "*ISDNList shows log of ISDNctrl commands and responses"
                                "Syntax: *ISDNList");
            	break;

#if MULTILINK_PPP_SUPPORT == ON     	
	    case CMD_MPPPDbg:
            	sprintf(arg_string, "*MPPPDbg sets the ML PPP debug flags (decimal value) "
                                "Syntax: *MPPPDbg flags_bit_mask ");
            	break;
	    case CMD_MPPPAdd:
            	sprintf(arg_string, "*MPPPAdd adds a link to the MPPP connection"
                                "Syntax: *MPPPAdd ");
            	break;
	    case CMD_MPPPDrop:
            	sprintf(arg_string, "*MPPPDrop removes a link from the MPPP connection"
                                "Syntax: *MPPPDrop ");
            	break;
#endif

            default:
            	return 0;
        }

        return (_kernel_oserror *)arg_string;
    }

    callp = &module_cmds [cmd_no];
    return ((callp->cmd_call)(margc, margv));
}


_kernel_oserror *module_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
/* add SWI handler code here */
    struct swient *callp;
    int error;

    callp = &module_swis[swinum];
    error = (*(callp->swi_call))(r);
    return((_kernel_oserror *)NULL);

}
#if MESSAGE_AUDIT == ON
extern struct	msg_audit  VOLATILE msg_audit [];
#endif

void module_save_capture (void) 
{
#if MESSAGE_AUDIT == ON
 
    	    /* transfer message audit on file "capture" */

    	if ((f_cap = fopen (f_cap_name, "wb")) != FILE_NIL) {
    		fwrite ((void *) &msg_audit[0],
    		(size_t)sizeof(struct msg_audit),
    		(size_t) MESSAGE_AUDIT_SIZE,
    		f_cap);
    		fclose (f_cap);

    	}
#endif
}

void module_save_trace (void) 
{

#if ASSERT == ON

    	*p_trace = '?';

    	    /* open trace file */

    	if ((f_trace = fopen (f_trace_name, "w")) != FILE_NIL) {
    		fwrite ((void *) data_trace,
    		(size_t) TRACE_RECORD_SIZE,
    		(size_t) TRACE_RECORD_NB,
    		f_trace);

    	    		/* closes trace file */

    		fclose (f_trace);

    	}
#endif
}

_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
_kernel_oserror *e;
    		/* add module finalisation code here, eg. free memory, release interrupts etc. */
    		/* deallocate sockets */

	e = omnitel_final();

			/* reset ISDN card control register */
	
	isdn_card_final();

		/* add device finalisation code here */		

	e = device_final();
	
	module_save_capture ();
	module_save_trace ();
	return (e);

}

int isdn_nullswi(_kernel_swi_regs *r)
{
    return(0);
}

/**********************************************************************/

static _kernel_oserror *do_ISDNDial (int argc, char **argv)
{
    user_build_and_send_to_appli (USER_ACU_SAPI, ACU_CONN_RQ, argc, argv);
    return (P_NIL);
}

static _kernel_oserror *do_ISDNHook (int argc, char **argv)
{
    user_build_and_send_to_appli (USER_ACU_SAPI, ACU_CLEAR_RQ, argc, argv);
    return (P_NIL);
}

static _kernel_oserror *do_ISDNAnsw (int argc, char **argv)
{
    user_build_and_send_to_appli (USER_ACU_SAPI, ACU_CONN_RS, argc, argv);
    return (P_NIL);
}

static _kernel_oserror *do_ISDNHookin (int argc, char **argv)
{
    user_build_and_send_to_appli (USER_ACU_SAPI, ACU_CLEAR_RS, argc, argv);
    return (P_NIL);
}

static _kernel_oserror *do_ISDNLog (int argc, char **argv)
{
    module_save_capture ();
    module_save_trace ();
    return (P_NIL);
}

static _kernel_oserror *do_ISDNLoop (int argc, char **argv)
{
    user_build_and_send_to_appli (USER_ACU_SAPI, ACU_TEST_RQ, argc, argv);
    return (P_NIL);
}

static _kernel_oserror *do_ISDNList (int argc, char **argv)
{
    isdnctrl_showlog();
    return (P_NIL);
}

#if MULTILINK_PPP_SUPPORT == ON /* { */

#if MPPP_DEBUG == ON /* { */

    extern ushort MpppDbgFlags;
    static _kernel_oserror *do_MPPPDbg (int argc, char **argv)
    {
        if (argc >= 1) {
            MpppDbgFlags = (ushort)atoi (argv[0]);
        } else {
            MpppDbgFlags = 0x0083; /* (Error)+(Warning)+Notice+Trace+(Packets)  */ 
        }
        Trace_string ("MpppDbgFlags=");
        Trace_int (MpppDbgFlags);
        Trace('\n');
        return (P_NIL);
   }
   
#else /* } { */

    static _kernel_oserror *do_MPPPDbg (int argc, char **argv)
    {
        return (P_NIL);
    }
    
#endif /* } */   

static _kernel_oserror *do_MPPPAdd (int argc, char **argv)
{
    user_build_and_send_to_appli (USER_EXT_EVENTS_SAPI, MPPP_EXT_ADD_LINK_RQ, argc, argv);
    return (P_NIL);
}


static _kernel_oserror *do_MPPPDrop (int argc, char **argv)
{
    user_build_and_send_to_appli (USER_EXT_EVENTS_SAPI, MPPP_EXT_DROP_LINK_RQ, argc, argv);
    return (P_NIL);
}

#endif /* } */

/**********************************************************************/

static _kernel_oserror *do_nothing (int argc, char **argv)
{
    return (P_NIL);
}

/**********************************************************************/
/*
	Module Service Call
	-------------------
*/
/**********************************************************************/
	


_kernel_oserror *module_service(int service_number, _kernel_swi_regs *regs, void *pw)
{
  return device_service(service_number, regs, pw);
}

/**********************************************************************/

int isdn_irq_handler(_kernel_swi_regs *r, void *pw)
{
Trace('<');
	irq_cnt++;
Trace_int(irq_cnt);
    	hscx_it (0);	/* call HSCX-TE interrupt handling routine */

#	if (PH_D_MODE == MODE_IT) && (PH_D_U == ON)
		iec_it (0); 
#	endif	
    	isac_it (0);    /* call ISAC-S interrupt handling routine */

	irq_cnt--;
Trace('>');
    	return (1);   	/* interrupt handled */
}

int timer_it_handler(_kernel_swi_regs *r, void *pw)
{
    irq_cnt++;
    timer_it ();	/* call OMNITEL timer it */
    isdnctrl_timer();
    irq_cnt--;
    return (1);     	/* interrupt handled */
}

/*	Callback Handler
	----------------
	
The Callback handler calls omnitel_server to process all the
messages in the external and internal queues.

A Callback is requested by the driver when it receives a wakeup
for TX notification from the buffer manager, or when an Omnitel
message is sent (this may be from an interrupt routine caused by
the ISDN card).

Before calling the omnitel_server we check to see if there is data
in the ISDNdata tx stream in the buffer manager, and if there is we
call isdndatatx_sendpending to send it. This is better than sending
the data whenever we receive a Wakeup for TX as that would result
in many small messages being sent. This way we can send the data
in large blocks.

*/

uchar server_first_time;  	/* ON if server has not yet been called */
extern int isdndata_tx_pending;	/* Flag that there is data in buffer manager buffer to transmit */

int isdn_callback_handler(_kernel_swi_regs *dummyr, void *dummypw)
{
  /* Don't use dummyr and dummypw here - they may be NULL if called directly
     from ISDNctrl instead of on a true callback */
Trace('{');
    in_callback = TRUE;
    callback_pending = FALSE;

    if (server_first_time == ON) {
    	omnitel_server (ON);	/* call OMNITEL server for the first time */
    	server_first_time = OFF;

    } else {
      
      /*  Send Data and Process Messages
      
      If we have data pending then take it from the buffer manager and send it
      in a message before calling omnitel_server. We only send one message
      at a time so the various Omnitel entities have a chance to send a BUSY
      notification before we send too many messages.
      
      If we still have more data to send and the Omnitel system is not busy
      (!isdntxbusy) then we send another block of data and call the
      omnitel_server again.
      */
      
      int sent;			/* Number of bytes sent in the message */

	if (isdndata_active) {
      		sent=isdndata_sendpending();	/* Send any data that is pending */
	}
      	omnitel_server (OFF);	/* call OMNITEL server */

      			/* Try and send more data if we have any and tx is not busy:  */

      		while (isdndata_active && isdndata_tx_pending && !isdntxbusy)
      		{
			sent=isdndata_sendpending();		/* Send any data that is pending */

    			if (sent>0) {
    	  			omnitel_server (OFF);	/* call OMNITEL server if we sent a message */
    						/* sent=-1 if unable to send or 0 if none sent */
			}    						
      		}
    }
    It_disable ();    	
    in_callback = FALSE;
    It_enable ();    	
   
Trace('}');
    return (1);     	/* callback handled */

}

void isdn_card_init()
{
	ulong		i;	/* loop counter of HSCX reset */

        /* Enable IRQs for ISDN card podule     */

	enable_podule_irqs ((unsigned int)isdn_card_slot_number);

		/* Enable interrupts for the ISDN card */

	Isdn_card_cr_reset();
	
	/*
	enabling of S and  U chip is done later 
	in load_config_update_parameters function 
	because we only know then which interface 
	is being used (U or S) 
	*/

#	if ISDN_CARD_VERSION >= 3	/* from version 3 */
					/* one bit for HSCX reset */

			/* set HSCX reset bit */
		Isdn_card_hscx_reset_on();

			/* wait for at least 1.8 microsecond */

		for (i=0; i < ISDN_CARD_HSCX_RESET_LOOP_MAX; i++) 

			/* reset HSCX reset bit now */

		Isdn_card_hscx_reset_off();
#	endif

}

void isdn_card_final()
{
    Isdn_card_cr_reset();

        /* Disable IRQs for ISDN card podule     */

    disable_podule_irqs ((unsigned int)isdn_card_slot_number);

}

#if ASSERT == ON

/****************************************************/
/*  	    TRACE ROUTINES  	    	    	    */
/*  	    	    	  	    	    	    */
/****************************************************/
/*  C Functions to convert numbers to ASCII strings */

/*  Integer to ASCII String

Converts integer to ASCII string. Negative numbers are
returned with leading - sign. Zero is returned as "0".

Writes number to buffer, right justified and returns pointer to
start of string.

Doesn't use floating point or any OS routines.

Buffer must be 12 bytes.
*/

unsigned char *itoa(int num, unsigned char *buff)
{
  int p, negative=0;
  
  p=12;
  buff[--p]='\0';

  if ( (negative= (num<0))!=0 ) 
    num=-num;
  do
  {
    buff[--p]='0'+num % 10;
    num=num/10;
  }
  while (num && p>0);
  if (negative)
    buff[--p]='-' ;
  return buff+p;
}

/*  Integer to Hexadecimal ASCII String

Converts integer to Hexadecimal ASCII string. 
Zero returned as "0". 

Writes number to buffer, right justified and returns pointer to
start of string.

Doesn't use floating point or any OS routines.

Buffer must be 12 bytes.

*/


unsigned char *hextoa(unsigned int num, unsigned char *buff)
{
  char *hexdigits="0123456789ABCDEF";
  int p;
  
  p=10;
  buff[--p]='\0';

  do
  {
    buff[--p]=hexdigits[num % 16];
    num=num/16;
  }
  while (num && p>0);
  return buff+p;
}

void check_trace_ptr(void)
{
    if (p_trace >= (data_trace + TRACE_SIZE))  {
    	p_trace = data_trace;
    }
}

void module_trace_byte (unsigned char b)
{
    if (p_trace>=data_trace && p_trace<=data_trace + TRACE_SIZE) *p_trace++ = b;
    check_trace_ptr();
}

void module_trace_string (unsigned char *s)
{
    uchar *p;
    p=s; while  (*p != 0) module_trace_byte(*p++);
}

void module_trace_int (int i)
{
    unsigned char buff[12];
	
    module_trace_string(itoa(i, buff));
}

void module_trace_ptr (char *p)
{
    unsigned char buff[12];
	
    module_trace_string(hextoa((unsigned int)p, buff));
}

#endif

/*EOF*/


