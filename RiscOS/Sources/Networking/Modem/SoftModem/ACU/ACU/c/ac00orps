/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00orps.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the action Routines for the ORIG
/                       state of type AT_PSTN.
/
/     Product:          ACU core code
/
/     History:          ac00orps.c v3.90
/                       ac00orps.c v3.92
/                       ac00orps.c v3.93
/                       ac00orps.c v3.94
/                       ac00orps.c v3.95
/                       ac00orps.c v3.96
/
/        Created:       10/7/91
/                       10/8/91
/                       12/04/91
/                       1/21/92
/                       3/6/92
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "acu_epro.h"     /* ACU ETC Driver interface routines */
#include "wl_pro.h"       /* ACU Wireless prototypes */

void orig_pstn_bg(void);
void orig_init(void);
void orig_init_dial(void);
void orig_init_no_dial(void);
void orig_init_modem(void);
void originate_handshaking(void);
void acu_connect(void);


/*******************************************************************************
/
/     Routine:       orig_pstn_bg
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will process the background functions for
/                    the ORIG state of type AT_PSNT and V25_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_orig.state
/
/     Users: proc_orig
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_pstn_bg(void)
{
   switch (st_orig.state)
   {
      case INIT_ACU_DIAL:
         /* In this state the ACU is being initialized to dial a
            number.
         */
         orig_init_dial();
         break;

      case INIT_ACU_NO_DIAL:
         /* In this state the ACU is being initialized to make a
            connection.
         */
         orig_init_no_dial();
         break;

      case ORIG_WAIT_FOR_TONE:
         /* In this state the ACU is waiting for dialtone detection,
            if enabled.
         */
         orig_wait_for_dialtone();
         break;

      case ORIG_DIAL:
         /* In this state the ACU is processing the dial command
            */
         originate_dial();
         break;

      case INIT_MODEM_ORIG:
         /* In this state the ACU will make function calls to
            set up the modem task to originate a call
            */
         orig_init_modem();
         break;

      case ORIG_HANDSHAKING:
         /* In this state the ACU performs handshaking in the
            originate mode.
         */
         originate_handshaking();
         break;

      case PROCESS_DIAL_MOD:
         /* In this state the ACU will process any dial modifiers
            that takes any length of time
            */
         process_modifiers();
         break;
   }
}


/*******************************************************************************
/
/     Routine:       orig_init
/
/     Author:        RSA
/
/     Creation Date: 06/18/91
/
/     Description:   This Routine is called to setup the ORIG state to make
/                    a connection.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  sr14.originate_flag
/
/     Users:   init_orig_dial, init_orig_no_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_init(void)
{
   sr14.originate_flag = TRUE;

   if (!v25bis_active)
   {
      /* CTS pin */
      if ((comm_mode == SYNC_DTR) || (comm_mode == SYNC_TALK))
         modem_dte_cts(OFF);
      if (comm_mode == ASYNC)
         modem_dte_cts(ON);
   }
   modem_serial_echo(OFF);
   modem_td_relay(ON);

   /* Turn off RI indications incase ATD in the middle of a RING */
   modem_ri_led(OFF);
   modem_dte_ri(OFF);

   off_hook();
   if (sr21.auxiliary_relay_ctrl == 1)
      modem_AA1_relay(ON);
}


/*******************************************************************************
/
/     Routine:       orig_init_dial
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to initialize the ORIG state
/                    to dial a number.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_orig.state, timer1, error_flag
/                    timer2, timer3, send_ok, valid_char,
/
/     Users:   orig_pstn_bg();
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_init_dial(void)
{
   send_ok = FALSE;
   valid_char = TRUE;
   error_flag = FALSE;

   /* Don't go off hook during a ring */
   if (modem_call_progress() != RINGON)
   {
      if (hook)
      {
         orig_init();
         /* If wait-for-dialtone is enabled, wait 5 seconds
            for 1 continuous second of dialtone */
         if ((sr22.dialtone_enable) && (st_orig.type != PSTN_PHONE))
         {
            /* Set up the following timers:
               timer1: 5 second wait-for-dialtone
               timer2: 1 second of dialtone required
            */
            timer1 = dialtone_wait_limit;
            timer2 = length_of_dialtone;

            modem_init_call_progress(OFF_HOOK_NOT_DIALED);
            st_orig.state = ORIG_WAIT_FOR_TONE;
            return;
         }
         /* Else set up the blind dialing (timer3): The greater
            of (s[6] * 100) and 2, in seconds */
         else
            timer3 = s[6] * 100;
      }

      modem_config_dtmf_dial(s[11],s[11]);
      st_orig.state = ORIG_DIAL;
   }
}

/*******************************************************************************
/
/     Routine:       orig_init_no_dial
/
/     Author:        RSA
/
/     Creation Date: 06/18/91
/
/     Description:   This Routine is called to initialize the ORIG state
/                    and skip the dialing process.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_orig.state
/
/     Users:   orig_pstn_bg();
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_init_no_dial(void)
{
   /* If on hook, initialize originating flags */
   if (hook)
      orig_init();

   /* Next step is to configuring the data pump */
   st_orig.state = INIT_MODEM_ORIG;

   /* PSTN Phone mode uses this data orig routines to save code space:
      No Data pump action for phone mode! */
   if (st_orig.type == PSTN_PHONE)
      build_event(E_CONNECT,UNUSED);
}


/*******************************************************************************
/
/     Routine:       orig_init_modem
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine will initialize the modem to start a
/                    connection as the originator. It will look for ring back,
/                    answer tone, or busy signals.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  modem_modem, modem_baud, last_async_sync
/               acu_state
/
/     Users:   orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_init_modem(void)
{
   ubyte tmp, temp_tx_level;

   busy_detect = TRUE;

   /* Configure datapump for V.34 */
   modem_v34_configure(sr116.asym_rates,sr116.asym_symbols,sr116.aux_channel,
      s[115],s[115],*(ubyte *)&sr114);

   /* Configure datapump for V.8: V8 enabled? */
   if (automode & V8_ENABLED_BIT)
   {
       /* LAPM enabled? */
       if ((slN > 2) && !hyK)
           tmp = TRUE;
       else
           tmp = FALSE;

       modem_v8_configure(V8_DUPLEX_DATA,tmp,wireless_in_use());
   }

   /* If cellular operation is enabled, Need to force the transmit level to
      be -10 dB. */
   if ((prnM || dial_K) && (dial_J || (link_negot == CONNECT_1200BPS)))
      temp_tx_level = 10;
   else
      temp_tx_level = s[91];

   modem_init_call_progress(OFF_HOOK_DIALED);

   modem_set_parameters(s[9],s[7],s[10],v32_retrain,temp_tx_level,
      receive_threshold,s[108]);

   modem_baud = translate_modem_baud();
   modem_mode = translate_modem_mode(modem_baud);

   if (dial_J || (link_negot == CONNECT_1200BPS))
   {
      dial_J = FALSE;
      modem_baud = BPS1200;
      modem_mode = V22;
   }

   /* Need to update the modem with the selected baud rates   */
   update_modem_rate_seq();

   /* Reset the system and determine the type of connection to be tried   */
   system_reset();
   system_set_parameters();

   if ((operating_mode == DIRECT) && (init_type == HARDWARE))
      modem_char(last_async_sync,dipsw_char_size,dipsw_overspeed);
   else
      modem_char(last_async_sync,char_size,overspeed);

   st_orig.state = ORIG_HANDSHAKING;
   tmp = calling_tone;

   modem_connect((ubyte)sr14.originate_flag,modem_baud,modem_mode,
      (ubyte)sr27.clock_source,(ubyte)sr27.leased_line,automode,
      (ubyte)(fax_class ? 1:0) ,tmp,
      (acu_ETC_enabled() && !fax_class));

   /* If ETC and no FAX, signal the modem task to make an ETC connection */
   if (acu_ETC_enabled() && (fax_class == 0))
      acu_ETC_init_modem();
}

/*******************************************************************************
/
/     Routine:       originate_handshaking
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is performs the handshaking for the ORIG state.
/                    It is waiting for carrier in order to proceed to the
/                    ONLINE state.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  busy_detect
/
/     Users:   orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void originate_handshaking(void)
{
   ubyte call_prog_status;

   if (modem_status != IDLE_STATUS)
   {
      if (modem_check_dsr())
         if ((DSR_only_at_handshaking) || (comm_mode != ASYNC))
            modem_dte_dsr(ON);

      call_prog_status = modem_call_progress();

      if (call_prog_status == ANSWER_TONE)
      {
         busy_detect = FALSE;
      }

      if (call_prog_status == RINGBACK)
         busy_detect = FALSE;

      if ((busy_detect == TRUE) && ((sr22.busy_enable)
         && (call_prog_status == BUSY_SIGNAL)))
      {
         build_event(E_HANGUP,BUSY);
         return;
      }

      if (modem_status == FAX_CONNECTED)
      {
         start_fax_connection();
      }
      else if (modem_status == CONNECTED_STATUS)
      {
         acu_connect();
      }
   }
   else
      build_event(E_HANGUP,NO_CARRIER);
}


/*******************************************************************************
/
/     Routine:       acu_connect
/
/     Author:        RSA
/
/     Creation Date:  05/07/91
/
/     Description:   This Routine is called to start the data phase after
/                    carrier is present.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  modem_baud, last_status, dtr_timer1sec,
/                    CTS_up_flag, CTS_turn_on_flag, acu_state
/                    cts_timer
/
/     Users: answ_handshaking, originate_handshaking
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_connect(void)
{
   ubyte tmp;

   if ((sr22.speaker_ctrl == ON_UNTIL_CD) ||
      (sr22.speaker_ctrl == OFF_DIALING))
      modem_speaker(OFF);

   get_modem_baud_and_mode();

   /* Added to have the HS LED reflect the line speed while connected */
   if (modem_baud >= BPS2400 && modem_baud <= BPS57600)
      modem_hs_led(modem_baud);
   else
      modem_hs_led(OFF);

   modem_dte_112(ON);
   fp_mode_led_on();

   modem_init_call_progress(ON_LINE);

   if (comm_mode == AUTOSYNC)
   {
      build_event(E_CONNECT,CONN_AUTOSYNC);
      build_event(E_MSG,CONNECT_XXXX);
      return;
   }

   /* Cannot change line speed if running asynchronous direct or \J1        */
   tmp = ((((operating_mode != DIRECT) && (!bps_adjust)) ||
      (comm_mode != ASYNC)) && (autofallback));

   modem_retrain_enable(perE,s[110],tmp);

   /* Output carrier message   */
   build_event(E_MSG,CARRIER_XXXX);

   build_event(E_CONNECT,CONN_DATA);

   /* Need to initialize the system for a connection   */
   system_init();

   if (operating_mode == DIRECT)
   {
      if (comm_mode != ASYNC)
         modem_char(SYNC_NORMAL,char_size,overspeed);
      build_event(E_MSG,CONNECT_XXXX);
   }
   else
   {
      /* Temp solution PDS 9/13/90, disable TX A/S converter */
/*      modem_char(0X02,char_size,overspeed);*/
      modem_serial_direct(NORMAL);

      if (sr14.originate_flag == TRUE)
         system_start(ORIGINATE);
      else
         system_start(ANSWER);
      last_status = 0xff;
   }
}

