/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00lib3.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains misc Routines for the ACU code.
/
/     Product:          ACU core code
/
/     History:          ac00lib3.c v3.90
/                       ac00lib3.c v3.91
/                       ac00lib3.c v3.94
/                       ac00lib3.c v3.95
/                       ac00lib3.c v3.96
/
/        Created:       10/7/91
/                       12/04/91
/                       1/21/92
/                       3/10/92
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "v25_pro.h"
#include "ll_pro.h"
#include "acu_vce.h"
#include "acu_epro.h"       /* ACU ETC Driver interface prototypes */
#include "wl_pro.h"
#include "par_def.h"
#include "par_pro.h"

void acu_init(void);
void acu_reset_eeprom(void);
void acu_reset(void);
void retrieve_profile(ubyte,ubyte);
void led_init(void);
void v24_init(void);
void store_profile(ubyte);
void acu_load_defaults(ubyte);

/*******************************************************************************
/
/     Routine:       acu_init
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to initialize parameters and
/                    flags used in the ACU code.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  All flags that need to be initialized
/
/     Users:   master_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_init(void)
{
   system_status = V42_HALTED;

   acu_state = S_IDLE;
   st_idle.state = S_IDLE;
   st_idle.type = AT_OFFLINE;
   st_retrain.state = S_IDLE;

   /* Initialize the ACU features   */
   acu_cfg.direct = CONFIG_DIRECT;
   acu_cfg.hw_echo = CONFIG_ECHO;
   acu_cfg.mode = CONFIG_MODE;
   acu_cfg.fax_class = CONFIG_FAX_CLASS;
   acu_cfg.v23 = CONFIG_V23;
   acu_cfg.extended_cmds = CONFIG_EXT_CMDS;

   overspeed = DISABLED;
   last_status = 0xff;
   last_async_sync = ASYNC;

   /* Turn off all LEDs and DTE signals */
   led_init();
   v24_init();

   /* Null out the command line incase first thing entered is A/ */
   cmd_line[0] = '\0';

   /* Initialize the Parser */
   at_parser_init();
   /* Enable basic and DATA AT commands */
   set_acu_at_cmds(ON);
   set_acu_data_cmds(ON);
   set_acu_phbk_cmds(OFF);

   /* Load the dial string pointer to the NULL command line */
   acu_dial_string_ptr = (ubyte *)&cmd_line[0];
   error_flag = FALSE;
   error_occurred = FALSE;
   valid_char = TRUE;
   on_line_command = FALSE;
   reconfigure = FALSE;
   send_ok = FALSE;
   current_register = 0;
   R_mode = FALSE;
   return_to_idle = FALSE;
   hook = TRUE;
   result_message_sent = FALSE;
   long_space_disconnect = FALSE;
   user_initiated_hangup = FALSE;
   delay_before_hangup = FALSE;
   at_h_command = FALSE;
   at_z_command = FALSE;
   acu_hangup_line = TRUE;

   test_in_progress = FALSE;
   timer_activated = FALSE;

   dtr_timer = 0;
   dtr_timer1sec = 0;
   timer1 = 0;
   timer2 = 0;
   timer3 = 0;
   timer100mS = 9;
   timer1sec = 9;
   acu_1sec_timer = 0;
   acu_100msec_timer = 0;
   acu_10msec_timer = 0;
   acu_1min_timer = 0;

   /* Initialize timer values */
   delay_to_exec = ACU_EXEC_DELAY; /* Delay from <CR> until command execution */
   dialtone_wait_limit = 500;      /* Length of time to wait for dialtone */
   length_of_dialtone = 100;       /* Length of dialtone needed to be detected */
   inter_digit_delay = 75;         /* Delay between pulsed characters   */
   flash_time = 50;                /* Length of on hook and off hook periods */
   mod_dialtone_length = 300;      /* Length of dialtone to detect in dial modifier W */
   mod_quiet_answ_length = 500;    /* Length of quiet answer to detect in dial modifier @ */
   answ_tone_delay = 200;          /* Delay before sending answer tone */
   time_between_rings = TIME_BETWEEN_CALLS;    /* Max time allowed between rings */
   long_space_send_time = 255;     /* Length of the break for long space disconnect   */
   RDL_response_time = 300;        /* Time ACU will wait for a RDL response from the remote modem   */
   ALB_response_time = 12000;      /* Time ACU will wait for a carrier to be present during ALB tests (2 min)*/
   receive_threshold = 10;

   /* DTE defaults */
   escape_received = FALSE;
   DTR_always_on = FALSE;
   RTS_always_on = FALSE;

   /* Get current DTR status */
   if (modem_dte_DTR_status() == TRUE)
   {
      dte_DTR_flag = TRUE;
      DTR_valid_up_flag = TRUE;
      look_for_DTR_high_to_low = TRUE;
      look_for_DTR_low_to_high = FALSE;
      modem_tr_led(ON);
   }
   else
   {
      dte_DTR_flag = FALSE;
      DTR_valid_up_flag = FALSE;
      look_for_DTR_high_to_low = FALSE;
      look_for_DTR_low_to_high = TRUE;
      modem_tr_led(OFF);
   }
   DTR_high_to_low = FALSE;
   DTR_low_to_high = FALSE;
   RLSD_reflects_CD_temp = FALSE;

   slO = FALSE;
   slU = FALSE;
   slY = FALSE;
   slZ = FALSE;
   mnp_advanced_commands = FALSE;
   operating_mode = NORMAL;

   /* Initialize S registers that are not stored in EEprom */
   s[1] = 0;
   s[3] = DEFAULT_S3;
   s[4] = DEFAULT_S4;
   s[5] = DEFAULT_S5;
   escape_mode = GUARD_TIME_ESCAPE_ENABLED;
   detect_disconnect_tone = FALSE;
   tone_disconnect = FALSE;
   switch_to_leased_line = FALSE;

   modem_init_call_progress(ON_HOOK);
   modem_serial_direct(NORMAL);
   modem_serial_echo(OFF);
   modem_speaker(OFF);

   connect_type = CONNECT_DATA_ONLY;

   v42_running_mnp10 = FALSE;
   dial_J = FALSE;
   dial_K = FALSE;
   btlz_dict_size = DSIZE;

   voice_cmd_set = NO_VOICE;
   voice_dist_ring_active = FALSE;
   voice_dist_ring_sent = FALSE;
   voice_ring_timer =0;
   voice_dist_ring_intvl = 0;
   voice_dist_ctl_active = FALSE;
   voice_dist_ctl_sent = FALSE;

   /* Init the ACU cellular mode driver if available */
   wireless_init();

   /* Init customer AT commands and flags */
   acu_customer_init();
}


/*******************************************************************************
/
/     Routine:       acu_reset_eeprom
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to reinitialize the ACU's eeprom
/                    locations.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   acu_reset
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_reset_eeprom(void)
{
   ubyte i;

   /* Load eeprom defaults first */
   acu_load_defaults(POWERUP);

   /* Store the factory defaults and the power up profile   */
   for (i=0; i<NUMBER_OF_PROFILES;i++)
      store_profile(i);

   /* Set Power up Profile to Profile 0 */
   temp_array[0] = 0;
   modem_write_data(POWER_UP_PROFILE,POWER_UP_SIZE,(ubyte *)&temp_array[0]);

   /* Clear out the stored telephone numbers */
   temp_array[0] = '\0';
   modem_write_data(TELE_NUMBER_0_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_1_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_2_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_3_ADD,1,(ubyte *)&temp_array[0]);

   /* If V25bis is included need to clear out it's eeprom locations   */
   v25_clear_stored_num();

   /* Store the new version number   */
   /* Need to move the contents of the const version_num[] into the
      variable temp_array[].  Version_num[] may be relocated to the page
      that contains the file ac00tab1.c. Therefore this location cannot
      be accessed by the modem task page. */
   for (i=0; i<VERSION_SIZE; i++)
      temp_array[i] = version_num[i];
   modem_write_data(VERSION_ADDR,VERSION_SIZE,(ubyte *)&temp_array[0]);

   /* Recalculate the checksum */
   temp_array[0] = modem_eeprom_checksum();
   modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&temp_array[0]);
}


/*******************************************************************************
/
/     Routine:       acu_reset
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to reinitialize the ACU on power
/                    up or hard reset.
/
/     Input Parameters: None
/
/     Output Parameters: None
/
/     Global Variables Changed:  init_type, DTR_always_on, RTS_always_on
/
/     Users:   master_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_reset(void)
{
   ubyte eeprom_error,i;

   #ifdef TMLDEBUG
   Printf("acu_reset\n");
   #endif
   /* Initialize the modem using stored EEprom values */
   init_type = SOFTWARE;
   DTR_always_on = FALSE;
   RTS_always_on = FALSE;

   /* Reset the wireless module */
   wireless_reset();

   /* Reset customer commands and flags (may require wireless_reset first) */
   acu_customer_reset();

   /* See if the version number of the code matches the number stored in EEprom */
   eeprom_error = modem_read_data(VERSION_ADDR,VERSION_SIZE,
                                   (ubyte *)&temp_array[0]);
   #ifdef TMLDEBUG
   Printf("eeprom_error = %d\n", eeprom_error);
   #endif
   if (eeprom_error == FALSE)
   {
      for (i=0; i<VERSION_SIZE; i++)
      {
         /* If the version numbers do not match then reset the EEprom */
         if (version_num[i] != temp_array[i])
         {
            acu_reset_eeprom();
            return;
         }
      }
   }

   /* Recall last saved EEPROM checksum from EEPROM */
   eeprom_error =
      modem_read_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&temp_array[0]);

   /* If the EEPROM checksum cannot be read, restore factory settings and
      display error message */
   if (eeprom_error == TRUE)
   {
      acu_load_defaults(POWERUP);
      build_event(E_MSG,ERROR);
   }
   else
   {
      /* If the saved checksum matches the calculated checksum, read the
         stored profile */
      if (temp_array[0] == modem_eeprom_checksum())
      {
         modem_read_data(POWER_UP_PROFILE,POWER_UP_SIZE,(ubyte *)&temp_array[0]);
         retrieve_profile(temp_array[0],POWERUP);

         /* Reset the ETC driver with it's AT commands stored in EEPROM */
         acu_ETC_reset();
      }
      else
      {
         /* Need to reset ACU eeprom locations */
         acu_reset_eeprom();
      }
   }
}


/*******************************************************************************
/
/     Routine:       retrieve_profile
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to retrieve the selected profile
/                    from the EEprom.
/
/     Input Parameters:
/                    ubyte num - location of profile
/                    ubyte type - Tells if this Routine has been called during
/                                powerup or from a command.
/
/     Output Parameters: None
/
/     Global Variables Changed:  all AT command variables
/
/     Users:   at_Z, acu_reset
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void retrieve_profile(ubyte num,ubyte type)
{
   ubyte *string,i;
   ubyte temp_parity,temp_data,temp_stop,temp_baud;
   uword address;
   ubyte eeprom_error;

   switch (num)
   {
      case 0: address = PROFILE_0_ADD;
         break;

      case 1: address = PROFILE_1_ADD;
         break;

      case 2: address = PROFILE_2_ADD;
         break;
   }

   eeprom_error = modem_read_data(address,PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /* If the EEPROM failed, the do not change the profile */
   if (eeprom_error == TRUE)
   {
      error_occurred = TRUE;
      return;
   }

   string = (ubyte *)&temp_array[0];

   /* save sr23.acu_parity incase this Routine is called from ATZ command */
   temp_parity = (ubyte)sr23.acu_parity;

   /* Need to save these variables in case this has not been called on power up */
   temp_data = acu_data_bits;
   temp_stop = acu_stop_bits;
   temp_baud = dte_baud;

   for (i = 0; i <= PROFILE_SIZE-1; i++)
      *variable_addr[i] = *string++;

   /* If not retrieving profile during powerup, we do not want to reset the
      baud rate, parity, stop bits, and data bits. */
   if (type != POWERUP)
   {
      acu_data_bits = temp_data;
      acu_stop_bits = temp_stop;
      dte_baud = temp_baud;
      sr23.acu_parity = temp_parity;
   }

   /* Determine character size for modem_char() */
   switch (acu_data_bits)
   {
      case SEVEN:
      case EIGHT:
         char_size = TEN_BITS;
         break;
   }

   /* Determine the value of &K based upon the stored value of \Q */
   andK = slQ;
   if (andK == 1)
      andK = 4;

   switch (sr23.acu_parity)
   {
      case SR23_MARK:
      case SR23_SPACE:
         acu_parity = NO_PARITY;
         break;

      case SR23_ODD:
         acu_parity = ODD;
         break;

      case SR23_EVEN:
         acu_parity = EVEN;
         break;
   }

   if ((dte_baud >= BPS2400 && dte_baud <= BPS57600) ||
      dte_baud == BPS115200)
      modem_hs_led(dte_baud);
   else
      modem_hs_led(OFF);

   dial_pause_time = s[8];

   RLSD_reflects_CD_temp = (ubyte)sr21.RLSD_reflects_CD;

   modem_speaker_vol((ubyte)sr22.speaker_vol);
   modem_rdl_enable((ubyte)sr23.grant_rdl);

   switch (sr22.uk_hook)
   {
       case 0:
         make_time = US_MAKE_TIME;
         break_time = US_BREAK_TIME;
         break;

      case 1:
         make_time = UK_MAKE_TIME;
         break_time = UK_BREAK_TIME;
         break;
   }

   /* Need to turn on or turn off the auto-answer LED depending upon the
      value of s[0]. */
   if (s[0] > 0)
      modem_aa_led(ON);
   else
      modem_aa_led(OFF);

   /* Retrieve the V.25bis stored values */
   v25_retrieve_profile(num);

   /* Retrieve the leased line stored values */
   ll_retrieve_profile(num);

   /* Retrieve the Wireless stored values (use type to reset
       modes (PSTN vs Wireless) */
   wireless_retrieve_profile(num,type);
}


/*******************************************************************************
/
/     Routine:       led_init
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to initialize all LEDs to OFF.
/
/     Input Parameters: None
/
/     Output Parameters: None
/
/     Global Variables Changed:  mr_on_flag
/
/     Users:   acu_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void led_init(void)
{
   modem_dc_led(OFF);
   modem_aa_led(OFF);
   modem_ec_led(OFF);
   modem_v32_led(OFF);
   modem_v23_led(OFF);
   modem_oh_led(OFF);
   modem_hs_led(OFF);
   modem_tr_led(OFF);
   modem_cd_led(OFF);
   mr_on_flag = FALSE;
   modem_mr_led(OFF);
   modem_fax_led(OFF);
 }

/*******************************************************************************
/
/     Routine:       v24_init
/
/     Author:        RSA
/
/     Creation Date: 09/09/91
/
/     Description:   This Routine is called to initialize all V.24 signals
/
/     Input Parameters: None
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:   acu_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void v24_init(void)
{
   modem_dte_112(ON);
   modem_dte_117(OFF);
   modem_dte_rlsd(OFF);
   modem_dte_dsr(OFF);
   modem_dte_cts(OFF);
   modem_cts_led(OFF);
   modem_ri_led(OFF);
   modem_dte_ri(OFF);

   /* Turn off Circuit 142 - DTE TEST */
   modem_dte_test(OFF);
}

/*******************************************************************************
/
/     Routine:       store_profile
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to store the current profile
/                    in eeprom at the location specified.
/
/     Input Parameters: num  (byte)  - location to store profile
/
/     Output Parameters: none
/
/     Global Variables Changed:  none
/
/     Users:   acu_reset_eeprom, and_W
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void store_profile(ubyte num)
{
   ubyte *string,eeprom_error,i;
   uword address;

   string = (ubyte *)&temp_array[0];
   for (i = 0; i <= PROFILE_SIZE-1; i++)
      *string++ = *variable_addr[i];

   switch (num)
   {
      case 0:
         address = PROFILE_0_ADD;
         break;

      case 1:
         address = PROFILE_1_ADD;
         break;

      case 2:
         address = PROFILE_2_ADD;
         break;
   }

   eeprom_error = modem_write_data(address,PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /* If a EEPROM write error occurred, display error and return */
   if (eeprom_error == TRUE)
   {
      error_occurred = TRUE;
      return;
   }

   temp_array[0] = modem_eeprom_checksum();
   modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&temp_array[0]);

   /* Store the V.25bis values */
   v25_store_profile(num);

   /* Store the Leased line values */
   ll_store_profile(num);

   /* Store the Wireless values */
   wireless_store_profile(num);
}


/*******************************************************************************
/
/     Routine:       acu_load_defaults
/
/     Author:        RSA
/
/     Creation Date: 12/15/94
/
/     Description:   This Routine will configure the ACU to it's factory default
/                    condition.
/
/     Input Parameters: type - POWER_UP (0) or COMMAND (1,2).  Commands to
/                          restore defaults must not configure DTE port data.
/
/     Output Parameters: none.
/
/     Global Variables Changed: all ACU AT command variables,
/                    acu_data_bits, acu_stop_bits, dte_baud, acu_parity,
/                    char_size, sr23 dial_pause_time, RLSD_reflects_CD_temp,
/
/     Users: and_F, and_Z
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA keh 10/29/96
/     Description: Use POWERUP input to not build a parse event in
/          "initialize_voice()" for voice default interface.
/     Reason: after DTR toggle to modem for hangup, the db4000 would remain
/          in parse state, and scramble the output RING message for the
/          next incomming call.
/
*******************************************************************************/
void acu_load_defaults(ubyte type)
{
   ubyte *string,i;
   ubyte temp_parity,temp_data,temp_stop,temp_baud,temp_char;
   ubyte temp_sr23_parity;

   /* Save current terminal configuration if not power case */
   if (type != POWERUP)
   {
       temp_data = acu_data_bits;
       temp_stop = acu_stop_bits;
       temp_baud = dte_baud;
       temp_parity = acu_parity;
       temp_sr23_parity = (ubyte)sr23.acu_parity;
       temp_char = char_size;
   }

   /* Get factory defaults from ROM */
   string = (ubyte *)&factory_defaults[0];

   #ifdef TMLDEBUG
   Printf("Store factory defaults into their RAM variables\n");
   #endif
   /* Store factory defaults into their RAM variables */
   for (i = 0; i <= DEFAULT_SIZE-2; i++)
      *variable_addr[i] = *string++;

   /* If this is not being called during powerup, then reset baud rate,
      data bits, parity, and stop bits to their current values */
   if (type != POWERUP)
   {
      #ifdef TMLDEBUG
      Printf("type != POWERUP  Set baud rate parameters\n");
      #endif
      /* Set baud rate parameters */
      acu_data_bits = temp_data;
      acu_stop_bits = temp_stop;
      dte_baud = temp_baud;
      acu_parity = temp_parity;
      char_size = temp_char;
      sr23.acu_parity = temp_sr23_parity;
   }
   /* Power-Up Profile selection is reset at power-up only */
   else /* (type == POWERUP) */
   {
      #ifdef TMLDEBUG
      Printf("type == POWERUP  Get default Power-Up Profile\n");
      #endif
       /* Get default Power-Up Profile */
       temp_array[0] = *string++;

       /* Save factory's power-up-profile */
       modem_write_data(POWER_UP_PROFILE,1,(ubyte *)&temp_array[0]);

       /* Recalculate and save checksum after EEPROM write */
       temp_array[0] = modem_eeprom_checksum();
       modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&temp_array[0]);
   }

   #ifdef TMLDEBUG
   Printf("High speed LED\n");
   #endif
   /* High speed LED */
   if ((dte_baud >= BPS2400 && dte_baud <= BPS57600) ||
      dte_baud == BPS115200)
      modem_hs_led(dte_baud);

   dial_pause_time = s[8];

   #ifdef TMLDEBUG
   Printf("V.25bis and Leased Line default interface\n");
   #endif
   /* V.25bis and Leased Line default interface */
   v25_set_defaults();
   ll_set_defaults();

   /* Auto answer LED */
   if (s[0])
      modem_aa_led(ON);
   else
      modem_aa_led(OFF);

   RLSD_reflects_CD_temp = (ubyte)sr21.RLSD_reflects_CD;

   #ifdef TMLDEBUG
   Printf("Fax default interface\n");
   #endif
   /* Fax default interface */
   initialize_fax(type);

   #ifdef TMLDEBUG
   Printf("Configure ETC Driver from ACU factory defaults list\n");
   #endif
   /* Configure ETC Driver from ACU factory defaults list */
   if (type == POWERUP)
      acu_ETC_reset();

/* start change keh => use power-up or ATZ only */
   /* Voice default interface. Use POWERUP input to not build a
       parse event in "initialize_voice()" */
   if (type == POWERUP)
   {
       #ifdef TMLDEBUG
       Printf("initialize_voice(POWERUP)\n");
       #endif
       initialize_voice(POWERUP);
   }
   else
   {
       #ifdef TMLDEBUG
       Printf("initialize_voice(VOICE_INIT_ATZ)\n");
       #endif
       initialize_voice(VOICE_INIT_ATZ);
   }
/* end change keh => use power-up or ATZ only */

   #ifdef TMLDEBUG
   Printf("VoiceView default interface\n");
   #endif
   /* VoiceView default interface */
   initialize_vcv();

   #ifdef TMLDEBUG
   Printf("Load Cellular/Wireless defaults\n");
   #endif
   /* Load Cellular/Wireless defaults */
   wireless_load_defaults();

   #ifdef TMLDEBUG
   Printf("Load customer defaults\n");
   #endif
   /* Load customer defaults */
   acu_customer_load_defaults(type);
}

/*******************************************************************************
/
/	Routine:        acu_wireless_link_type
/
/	Author:         RSA
/
/	Creation Date:  12/8/95
/
/	Description:    This Routine will return a code used for physical
/                  configuration of the data pump, based on user's link
/                  configuration.
/
/	Input Parameters: none
/
/	Output Parameters: wireless link type:
/
/                      0x00 - NO cellular link
/                      0x01 - ETC: local is PSTN
/                      0x81 - ETC: local is Wireless
/                      0x02 - MNP10: local is PSTN
/                      0x82 - MNP10: local is Wireless
/                      0x03 - TX-CELL: local is PSTN
/                      0x83 - TX-CELL: local is Wireless
/
/
/	-------------------------------------------------------------
/	-			            Modifications			            -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte acu_wireless_link_type(void)
{
   ubyte return_code;

   /* Get link status from wireless layer */
   if (wireless_in_use())
       return_code = LOCAL_WIRELESS_BIT;
   else
       return_code = CELLULAR_PUMP__NONE;

   /* ETC active? (ETC is not spec'ed for FAX) */
   /* Note ETC disables MNP10 */
   if (acu_ETC_enabled() && !fax_class)
   {
       return_code |= CELLULAR_PUMP__ETC;
   }

   /* MNP10 cellular active? */
   if ((prnM || dial_K) && !fax_class)
   {
       return_code |= CELLULAR_PUMP__MNP10;
   }

   /* TX-CELL runs regardless of fax class */
   if (return_code & LOCAL_WIRELESS_BIT || prnM || dial_K)
   {
       return_code |= CELLULAR_PUMP__TXCELL;
   }

   return (return_code);
}


