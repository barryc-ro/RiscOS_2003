/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00orat.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains action routines needed for
/                       st_orig_at[].
/
/     Product:          ACU core code
/
/     History:          ac00orat.c v3.90
/                       ac00orat.c v3.91
/                       ac00orat.c v3.94
/                       ac00orat.c v3.95
/                       ac00orat.c v3.96
/
/        Created:       10/3/91
/                       12/04/91
/                       1/21/92
/                       3/10/92
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"

void proc_orig_at(void);
void at_pstn_online(void);
void kb_abort(void);
void at_pstn_DTR_off(void);
void orig_at_parse(void);
void orig_at_msg(void);

/*******************************************************************************
/
/     Routine:       proc_orig_at
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the ORIG
/                    state of type AT_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_state, acu_proc
/
/     Users: proc_orig
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_orig_at(void)
{
   acu_state = st_orig_at[acu_event->type].new_state;
   acu_proc = st_orig_at[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/     Routine:       at_pstn_online
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will change states from AT_PSTN ORIG to
/                    AT_PSTN ONLINE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_online.state, st_online.type, dtr_timer1sec
/               CTS_up_flag, CTS_turn_on_flag, cts_timer
/
/     Users: st_orig_at[], st_answ_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void at_pstn_online(void)
{
   if (acu_event->parm == CONN_FAX)
   {
      st_online.type = FAX_ONLINE;
   }
   else if (acu_event->parm == CONN_AUTOSYNC)
   {
      start_as_connection();
   }
   else
   {
      st_online.state = S_IDLE;
      st_online.type = AT_PSTN;
      if (comm_mode == SYNC_NORMAL)
      {
         dtr_timer1sec = s[25];
         modem_dte_cts(OFF);
      }
      else
         dtr_timer1sec = 0;

      if (modem_dte_CTS_status() == FALSE)
      {
         CTS_up_flag = FALSE;
         CTS_turn_on_flag = TRUE;
      }
      else
      {
         CTS_up_flag = TRUE;
         CTS_turn_on_flag = FALSE;
      }
      cts_timer = 0;
   }
}

/*******************************************************************************
/
/     Routine:       kb_abort
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event of keyboard abort.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_orig_at[], st_answ_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void kb_abort(void)
{
   if ((comm_mode == ASYNC) || (comm_mode == SYNC_NORMAL))
   {
      build_event(E_HANGUP,NO_CARRIER);
      user_initiated_hangup = TRUE;
   }
}


/*******************************************************************************
/
/     Routine:       at_pstn_DTR_off
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event of DTR dropping
/                    during the ORIG state of type AT_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_orig_at[], st_answ_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void at_pstn_DTR_off(void)
{
   if (sr21.DTR_control == 3)
      build_event(E_RESET,UNUSED);

   if ((sr21.DTR_control == 2) ||
      ((comm_mode == SYNC_DTR) || (comm_mode == SYNC_TALK)) ||
      ((sr21.DTR_control == 0) && (comm_mode == SYNC_NORMAL)))
      build_event(E_HANGUP,OK);
}

/*******************************************************************************
/
/     Routine:       orig_at_parse
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will change states from ORIG to PARSE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_parse.type, st_parse.state
/
/     Users: st_orig_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_at_parse(void)
{
   /* Set parse type and sub-state */
   if (on_line_command == TRUE)
      st_parse.type = AT_ONLINE;
   else
      st_parse.type = AT_OFFLINE;
   st_parse.state = CMD4; /* Parse AT commands */
}

/*******************************************************************************
/
/     Routine:       orig_at_msg
/
/     Author:        RSA
/
/     Creation Date: 01/21/92
/
/     Description:   This Routine will output a message to the terminal
/                    while in the ORIG or ANSW state.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  result_message_sent
/
/     Users:         st_orig_at[], st_answ_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_at_msg(void)
{
   if ((!sr14.disable_result_code) && (acu_event->parm != NONE))
   {
      output_result((ubyte) acu_event->parm);
      if (result_message_sent == TRUE)
      {
         result_message_sent = FALSE;
#ifndef __riscos
         while (acu_to_num() > 0)
            ;
         while (!check_all_sent())
            ;
#endif
      }
   }
}

