/****************************************************************************
/
/  Copyright 1988,1989,1990,1991,1992,1993,1994,1995
/  All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/      File:           ac01cust.c
/
/      Module Version: ACU 5.00
/
/      Function:       This file contains the entry points for Cutlass DSP
/                      debug AT commands.
/
/      Product:        ACU core code
/
/      History:
/
/          Created:    10/5/95
/
/          ---------------------------------------------------------
/          -                 Modifications                         -
/          ---------------------------------------------------------
/
/          Author & Date:   RSA
/          Description:
/          Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "par_def.h"
#include "par_pro.h"

#undef RING_BACK
#undef LOCAL_TEST
#undef BUSY

#include "../dp_crus/mt_voice.h"
#include "../dp_crus/mt_gpio.h"
#include "../dp_crus/mt_coext.h"
#include "../dp_crus/mt_codef.h"
#include "../dp_crus/mt_copro.h"
#include "../dp_crus/dsp_drv.h"

#include <stdio.h>
#include <string.h>

/* Constants */
#define DATA    0
#define PROGRAM 1

/* Global variables */
ulong num_peek_display_bytes = 40;   /* Default */

/* No parameters */
void splat_question (void);
void splat_run (void);
void splat_r_question (void);

/* UWORD *  parameters */
void splat_V_equals (uword *data);

/* ULONG *  parameters */
void splat_SD (ulong *data);

/* UBYTE *  parameters */
void splat_rh (ubyte *data);
void splat_rv (ubyte *data);
void splat_rd (ubyte *data);
void splat_rc (ubyte *data);
void splat_rs (ubyte *data);
void splat_ra (ubyte *data);
void splat_C_e(ubyte *parm_ptr);

/* New peek/poke routines for Cutlass II with paging */
void splat_P_question (ulong *command);
void splat_D_question (ulong *command);
void splat_D_equals (ulong *data);
void splat_P_equals (ulong *data);

/* External function prototypes */
extern void new_mt_peek (ulong, ulong, byte);
extern void new_mt_poke (ulong, word, byte);
extern void dspdrv_run_dsp (void);


/* Externd data */
extern ubyte Cdata[MAX_PACKET_SIZE];

/******************************************************************************
/
/    Parser Structure for custom Cutlass Debug AT Commands
/
*******************************************************************************/
PARSE_CMD_TABLE_STRUCT cutlass_debug_commands[]=
{
   /* Read DSP Data Memory (Bank 0 / 1 - default to bank 0) */
   (ubyte *)"*D?",         splat_D_question,  LONG_HEX,          NO_FLAGS,
   /* Write DSP Data Memory (Bank 0 / 1 - default to bank 0) */
   (ubyte *)"*D=",         splat_D_equals,    COMPOUND_LONG_HEX, NO_FLAGS,

   /* Read DSP Program Memory */
   (ubyte *)"*P?",         splat_P_question,  LONG_HEX,          NO_FLAGS,
   /* Write DSP Program Memory */
   (ubyte *)"*P=",         splat_P_equals,    COMPOUND_LONG_HEX, NO_FLAGS,

   /* Set DSP Data/Program number of words to display */
   (ubyte *)"*SD",         splat_SD,          LONG_NUMERIC,      NO_FLAGS,

   /* Query debug capabilities */
   (ubyte *)"*?",          splat_question,    NO_PARAM,          NO_FLAGS,

   /* Set hook relay (for GPIO debug) */
   (ubyte *)"*RH",         splat_rh,          BYTE_NUMERIC,       NO_FLAGS,
   /* Set voice relay (for GPIO debug) */
   (ubyte *)"*RV",         splat_rv,          BYTE_NUMERIC,       NO_FLAGS,
   /* Set dsvd relay (for GPIO debug) */
   (ubyte *)"*RD",         splat_rd,          BYTE_NUMERIC,       NO_FLAGS,
   /* Set CID relay (for GPIO debug) */
   (ubyte *)"*RC",         splat_rc,          BYTE_NUMERIC,       NO_FLAGS,
   /* Set SPK_HS relay (for GPIO debug) */
   (ubyte *)"*RS",         splat_rs,          BYTE_NUMERIC,       NO_FLAGS,
   /* Set all relays (for GPIO debug) */
   (ubyte *)"*RA",         splat_ra,          BYTE_NUMERIC,       NO_FLAGS,
   /* Display status of all relays */
   (ubyte *)"*R?",         splat_r_question,  NO_PARAM,           NO_FLAGS,

   /* Packet info <-> COMRAM */
   (ubyte *) "*C=",  splat_C_e,  COMPOUND_BYTE_HEX, SEMICOL_END,

   END_OF_PARSE_TABLE
};


/*******************************************************************************
/
/  Routine:        acu_customer_init
/
/    Author:         RSA
/
/    Creation Date:  10/05/95
/
/    Description:    This Routine is called every time acu_init is called to
/                  initialize  any cusotmer specific parameters and
/                    flags used in the ACU code.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:
/
/    Users:    acu_init
/
/        -------------------------------------------------------------
/        -                       Modifications                        -
/        -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void acu_customer_init(void)
{
   at_parser_tables (ENABLE_TABLE, cutlass_debug_commands);
}

/*******************************************************************************
/
/  Routine:        acu_customer_reset
/
/    Author:         RSA
/
/    Creation Date:  10/05/95
/
/    Description:    This Routine is called to reinitialize the ACU customer
/                  specific parameters on power up or hard reset.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:
/
/    Users:    acu_reset
/
/    -------------------------------------------------------------
/    -                        Modifications                        -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void acu_customer_reset(void)
{
  /* Stubbed */
}

/*******************************************************************************
/
/  Routine:        acu_customer_load_defaults
/
/    Author:         RSA
/
/    Creation Date:  10/05/95
/
/    Description:    This Routine is called to reinitialize the ACU customer
/                  AT command paramters (typically due to AT&F)
/
/    Input Parameters: type - POWER_UP (0) or COMMAND (1,2).  Commands to
/                      restore defaults must not configure DTE port data.
/
/    Output Parameters: None
/
/    Global Variables Changed:
/
/    Users:    acu_load_defaults
/
/    -------------------------------------------------------------
/    -                        Modifications                        -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void acu_customer_load_defaults(ubyte type)
{
   type=0;
}

/*******************************************************************************
/
/  Routine:        acu_customer_bg
/
/    Author:         RSA
/
/    Creation Date:  10/17/95
/
/    Description:    This Routine gives background processing for
/                  customer specific functions.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:
/
/    Users:
/
/    -------------------------------------------------------------
/    -                        Modifications                        -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void acu_customer_bg(void)
{
  /* Stubbed */
}

/*******************************************************************************
/
/  Routine:        process_customer_timer
/
/    Author:         RSA
/
/    Creation Date:  10/17/95
/
/    Description:    This Routine processes any customer-specific timers.
/                  It's called every 10 milliseconds.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:
/
/    Users:
/
/    -------------------------------------------------------------
/    -                        Modifications                        -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void process_customer_timer(void)
{
  /* Stubbed */
}



/*
 *  Display setup commands
 */

/* Set number of bytes to display for DSP RAM peeks */
void splat_SD (ulong *data)
{
  num_peek_display_bytes = (ulong) *data;
}

/*
 *  DSP Data/Program memory peek commands
 */
void splat_P_question (ulong *address)         /* Cutlass II with paging */
{
  new_mt_peek ((ulong) *address, num_peek_display_bytes, PROGRAM);
}

void splat_D_question (ulong *address)         /* Cutlass II with paging */
{
  new_mt_peek ((ulong) *address, num_peek_display_bytes, DATA);
}


/*
 *  DSP Program/Data memory poke commands
 */
void splat_P_equals (ulong *command)         /* Cutlass II with paging */
{
  ulong index, address, data, *ptr;

  ptr = (ulong *) command;
  index = *ptr++;
  address = *ptr++;
  index = *ptr++;
  data = *ptr++;
  index = *ptr;

  new_mt_poke ((ulong) address, (word) data, PROGRAM);
}

void splat_D_equals (ulong *command)         /* Cutlass II with paging */
{
  ulong index, address, data, *ptr;

  ptr = (ulong *) command;
  index = *ptr++;
  address = *ptr++;
  index = *ptr++;
  data = *ptr++;
  index = *ptr;

  new_mt_poke ((ulong) address, (word) data, DATA);
}

/* Display valid Cutlass Debug AT commands */
void splat_question (void)
{
  output_info ((ubyte *) " ", VERBOSE_FORM);      /* Blank line */
  output_info ((ubyte *) "Cutlass DSP Debug AT Commands (caps not required)\0", NUMERIC_FORM);
  output_info ((ubyte *) "-------------------------------------------------\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*d?n   - Display Data RAM at n\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*d=a,n - Set Data RAM address a to value n\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*p?n   - Display Program RAM at n\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*p=a,n - Set Program RAM address a to value n\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*SDn   - Set num DSP bytes to display for AT*p and AT*d\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*rh    - Set hook relay (0 or 1)\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*rv    - Set voice relay (0 or 1)\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*rc    - Set CID relay (0 or 1)\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*rd    - Set DSVD relay (0 or 1)\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*ra    - Set all relays (0 or 1)\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*r?    - Get all relays state\0", NUMERIC_FORM);
  output_info ((ubyte *) "at*c=    - Read comma delimited ICD packet -> COMRAM\0", NUMERIC_FORM);
}

void splat_rh (ubyte *data)
{
  gpio_hook_relay ((ubyte) *data);
}

void splat_rv (ubyte *data)
{
  set_voice_relay ((ubyte) *data);
}

void splat_rd (ubyte *data)
{
  set_dsvd_relay ((ubyte) *data);
}

void splat_rc (ubyte *data)
{
  set_cid_relay ((ubyte) *data);
}

void splat_rs (ubyte *data)
{
  set_spk_hs_relay ((ubyte) *data);
}

void splat_ra (ubyte *data)
{
  gpio_hook_relay ((ubyte) *data);
  set_voice_relay ((ubyte) *data);
  set_dsvd_relay ((ubyte) *data);
  set_cid_relay ((ubyte) *data);
  set_spk_hs_relay ((ubyte) *data);
}

void splat_r_question (void)
{
  ubyte state;

  state = get_hook_relay();
  output_info ((ubyte *) (state ? "\r\nHook: ON" : "\r\nHook: OFF"), UNFORMATTED);

  state = get_voice_relay();
  output_info ((ubyte *) (state ? "  Voice: ON" : "  Voice: OFF"), UNFORMATTED);

  state = get_cid_relay();
  output_info ((ubyte *) (state ? "  CID: ON" : "  CID: OFF"), UNFORMATTED);

  state = get_dsvd_relay();
  output_info ((ubyte *) (state ? "  DSVD: ON" : "  DSVD: OFF"), UNFORMATTED);

  state = get_spk_hs_relay();
  output_info ((ubyte *) (state ? "  SPK_HS: ON" : "  SPK_HS: OFF"), UNFORMATTED);

  state = get_phone_relay();
  output_info ((ubyte *) (state ? "  LPOHD: ON\r\n" : "  LPOHD: OFF\r\n"), UNFORMATTED);
}


void splat_C_e(ubyte *parm_ptr)
{
   ubyte  field, value, i, done;
   ubyte  j, k, *ptr, str[80];
   ubyte display_return_info;

   /* Convert command line into current_command[] */
   i = 0;
   done = FALSE;
   while( !done )
   {
       field = *parm_ptr++;
       value = *parm_ptr++;

       if( field )
       {
           current_command[i++] = value;
       }
       else
       {
           done = TRUE;
       }
   }

   /* Min packet length == 4 */
   if (i < 4)
   {
       error_occurred = TRUE;
       return;
   }


   ack_or_response = ACK;
   display_return_info = FALSE;

   /* Only some PACKETs return info */
   switch(current_command[0])
   {
       case 0x08:
       case 0x0C:
       case 0x0D:
       case 0x0E:
       case 0x0F:
           ack_or_response = NO_REPLY;
           break;

       case 0x09:
           dsp_cp_packet = 0x14;
           display_return_info = TRUE;
           ack_or_response = RESPONSE;
           break;

       case 0x0A:
       case 0x0B:
           dsp_cp_packet = 0x15;
           display_return_info = TRUE;
           ack_or_response = RESPONSE;
           break;

       case 0x70:
           dsp_cp_packet = 0xC1;
           display_return_info = TRUE;
           ack_or_response = RESPONSE;
           break;

       case 0x72:
           dsp_cp_packet = 0xC2;
           display_return_info = TRUE;
           ack_or_response = RESPONSE;
           break;

       case 0x91:
           dsp_cp_packet = 0xC6;
           display_return_info = TRUE;
           ack_or_response = RESPONSE;
           break;

       case 0x94:
           dsp_cp_packet = 0xCB;
           display_return_info = TRUE;
           ack_or_response = RESPONSE;
           break;

       case 0x9D:
           dsp_cp_packet = 0xC3;
           display_return_info = TRUE;
           ack_or_response = RESPONSE;
           break;
   }

   /* Only write the packet -> DSP. Any response is in Cdata[] */
   send_pkt_to_dsp();

   /* Clear it out 1st */
   memset( str, 0, 80 );

   /* Is there some data available. send_pkt_to_dsp() will
      reset the flag as required.
   */
   if( display_return_info )
   {
       k = sprintf( (char *) str, "%02x", Cdata[0] );

       for(i = 1; i < Cdata[2] + 4; i++)
       {
           /* convert num to hex display, put into pt[] */
           k += sprintf( (char *) &str[k], ",%02x", Cdata[i] );
       }

       output_info(str,(ubyte)sr14.verbose_form);
   }

}
