/*****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00tsrm.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains action routines for the AT command
/                       remote loop test mode
/
/     Product:          ACU core code
/
/     History:          ac00tsrm.c v3.90
/                       ac00tsrm.c v3.91
/                       ac00tsrm.c v4.02
/
/        Created:       9/18/91
/                       3/10/92
/                       10//10/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "edf.v42"
#include "edf.dte"
#include "edf.dce_line"

/* Local prototypes */
void start_at_test(void);
void test_rmt_at_bg(void);
void proc_test_rmt_at(void);
void rmt_test_hangup(void);


/*******************************************************************************
/
/     Routine:       start_at_test
/
/     Author:        RSA
/
/     Creation Date: 07/16/91
/
/     Description:   This Routine will change the state to TEST.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_test.type, st_test.state
/
/     Users: st_idle_at[],
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void start_at_test(void)
{
   /* Initialize TEST sub-state machine */
   st_test.state = TEST_INIT;

   /* If the test was intiated by the remote modem */
   if (acu_event->parm == RMT_TEST)
   {
      st_test.type = RMT_AT_TEST;

      modem_dte_test(ON);     /* Circuit 142      */
      modem_b2l_led(ON);      /* Led b2l         */
   }
   /* Else the test was intiated locally (acu_event->parm == LOCAL_TEST) */
   else
   {
      st_test.type = AT_TEST;
   }

   /* Save IDLE type so it can be restored when the test is terminated */
   previous_idle_type = st_idle.type;
}


/******************************************************************************
/
/     Routine:       test_rmt_at_bg
/
/     Author:        RSA
/
/     Creation Date: 08/22/91
/
/     Description:   This Routine will process the background functions during
/                    a LDL requested by the remote modem.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   test_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_rmt_at_bg(void)
{
   flash_mr();

   switch (st_test.state)
   {
       case TEST_INIT:

           /* Retrain during RDL */
           if (modem_status == RETRAINING_STATUS)
           {
               st_test.state = TEST_WAIT_PHYS_CONNECT;
               break;
           }

           /* Check for end of Remote test */
           if (modem_status == CONNECTED_STATUS)
           {
               /* Clear data path of any test characters */
               line_from_clear();
               dte_to_clear();

               /* Update LEDs */
               modem_mr_led(ON);
               modem_dte_test(OFF);
               modem_b2l_led(OFF);

               /* What state before the remote test? */
               if (previous_acu_state == S_IDLE)
                   build_event(E_IDLE,UNUSED);
               else if (previous_acu_state == S_PARSE)
                   build_event(E_PARSE,UNUSED);
               else
                   build_event(E_CONNECT,UNUSED);
           }
           break;

       case TEST_WAIT_PHYS_CONNECT:

           /* Clear data path of any test characters */
           line_from_clear();

           /* Retrain failed? */
           if (modem_status == IDLE_STATUS)
           {
               build_event(E_HANGUP,NO_CARRIER);
           }
           /* Retrain finished? */
           else if (modem_status == CONNECTED_STATUS)
           {
               /* Return to test mode */
               st_test.state = TEST_INIT;
           }
           break;
   }
}


/*******************************************************************************
/
/     Routine:       proc_test_rmt_at
/
/     Author:        RSA
/
/     Creation Date: 08/22/91
/
/     Description:   This Routine will process the state table for the
/                    LDL requested by the remote modem.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   proc_test
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_test_rmt_at(void)
{
   acu_state = st_test_rmt_at[acu_event->type].new_state;
   acu_proc = st_test_rmt_at[acu_event->type].fnc_ptr;
}

/*******************************************************************************
/
/     ROUTINE:       rmt_test_hangup
/
/     Author:        RSA
/
/     Creation Date: 10/3/91
/
/     Description:   This routine will process a hangup event when the
/                    modem is in the Remote Test State.
/
/   PARAMETERS IN: None
/
/   PARAMETERS OUT: none
/
/     Global Variables Changed:  None
/
/     Users:   st_test_rmt_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void rmt_test_hangup(void)
{
   modem_digital_loopback(OFF);

   /* Configure HANGUP state variables */
   st_hangup.type = st_online.type;
   st_hangup.state = HANGUP_INIT;
   hangup_result_type = (ubyte)acu_event->parm;

   modem_dte_test(OFF);    /* Circuit 142 */
   modem_b2l_led(OFF);     /* Led b2l      */
}

