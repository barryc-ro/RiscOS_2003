/*****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00tab1.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains initialization tables for the ACU
/                       code.
/
/     Product:          ACU core code. V.32 modem with software echo and no
/                       DIRECT mode.
/
/     History:          ac00tab.c v3.90
/                       ac00tab.c v3.91
/                       ac00tab.c v3.92
/                       ac00tab.c v3.93
/                       ac00tab.c v3.95
/                       ac00tab.c v3.96
/
/        Created:       10/8/91
/                       12/04/91
/                       1/21/92
/                       3/10/92
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_edef.h"       /* ACU ETC defines */

/*
   Code version number.
   Note: This needs to be changed if the order of the variables stored
   to EEprom change.
*/
const ubyte version_num[VERSION_SIZE] = "500";

#ifdef NO_STATIC_INIT
ubyte * srptr[NUM_S_REGS];
ubyte * variable_addr[NUM_OF_VARIABLES];
#else
/*
   Array of linear S-Register Addresses.
   Used to simplify value assignment.
*/
ubyte * const srptr[NUM_S_REGS] = {
      &s[0],         &s[1],
      &s[2],         &s[3],
      &s[4],         &s[5],
      &s[6],         &s[7],
      &s[8],         &s[9],
      &s[10],        &s[11],
      &s[12],        &s[13],
      (ubyte *)&sr14,&s[15],
      (ubyte *)&sr16,&s[17],
      &s[18],        &s[19],
      &s[20],        (ubyte *)&sr21,
      (ubyte *)&sr22,(ubyte *)&sr23,
      &s[24],        &s[25],
      &s[26],        (ubyte *)&sr27,
      &s[28],        &s[29],
      &s[30],        &s[31],
      &s[32],        &s[33],
      &s[34],        &s[35],
      &s[36],        &s[37],
      &s[38],        &s[39],
      &s[40],        &s[41],
      &s[42],        &s[43],
      &s[44],        &s[45],
      &s[46],        &s[47],
      &s[48],        &s[49],
      &s[50],        &s[51],
      &s[52],        &s[53],
      &s[54],        &s[55],
      &s[56],        &s[57],
      &s[58],        &s[59],
      &s[60],        &s[61],
      &s[62],        &s[63],
      &s[64],        &s[65],
      &s[66],        &s[67],
      &s[68],        &s[69],
      &s[70],        &s[71],
      &s[72],        &s[73],
      &s[74],        &s[75],
      &s[76],        &s[77],
      &s[78],        &s[79],
      &s[80],        &s[81],
      &s[82],        &s[83],
      &s[84],        &s[85],
      &s[86],        &s[87],
      &s[88],        &s[89],
      &s[90],        &s[91],
      &s[92],        &s[93],
      &s[94],        (ubyte *)&sr95,
      &s[96],        &s[97],
      &s[98],        &s[99],
      &s[100],       &s[101],
      &s[102],       &s[103],
      &s[104],       &s[105],
      &s[106],       &s[107],
      &s[108],       &s[109],
      &s[110],       &s[111],
      &s[112],
      &s[113],       (ubyte *)&sr114,
      &s[115],       (ubyte *)&sr116,
      &s[117],       &s[118]
};

/*
   Array of pointers to variables accessed in the AT command restoration
   routines (i.e.: store_profile(), and retrieve_profile()).

   If the variable is to be stored in the EEprom be sure to change the
   define PROFILE_SIZE located in the file EExxDEF.H.

   Also need to change the define "version_num[]" (above) so the EEprom will
   be updated on powerup. This define is also found in EExxDEF.H.
*/
ubyte * const variable_addr[NUM_OF_VARIABLES] =
{
   &s[0],                     /* temp_array[0] */
   &s[2],                     /* temp_array[1] */
   &s[6],                     /* temp_array[2] */
   &s[7],                     /* temp_array[3] */
   &s[8],                     /* temp_array[4] */
   &s[9],                     /* temp_array[5] */
   &s[10],                    /* temp_array[6] */
   &s[11],                    /* temp_array[7] */
   &s[12],                    /* temp_array[8] */
   (ubyte *)&sr14,            /* temp_array[9] */
   (ubyte *)&sr16,            /* temp_array[10] */
   &s[18],                    /* temp_array[11] */
   (ubyte *)&sr21,            /* temp_array[12] */
   (ubyte *)&sr22,            /* temp_array[13] */
   (ubyte *)&sr23,            /* temp_array[14] */
   &s[25],                    /* temp_array[15] */
   &s[26],                    /* temp_array[16] */
   (ubyte *)&sr27,            /* temp_array[17] */
   &s[30],                    /* temp_array[18] */
   &s[37],                    /* temp_array[19] */
   &s[63],                    /* temp_array[20] */
   &s[91],                    /* temp_array[21] */
   (ubyte *)&sr95,            /* temp_array[22] */
   &s[108],                   /* temp_array[23] */
   &s[109],                   /* temp_array[24] */
   &s[110],                   /* temp_array[25] */
   &s[112],                   /* temp_array[26] */
   &atW,                      /* temp_array[27] */
   &valueX,                   /* temp_array[28] */
   &slA,                      /* temp_array[29] */
   &perA,                     /* temp_array[30] */
   &slC,                      /* temp_array[31] */
   &perC,                     /* temp_array[32] */
   &perE,                     /* temp_array[33] */
   &slG,                      /* temp_array[34] */
   &slI,                      /* temp_array[35] */
   &bps_adjust,               /* temp_array[36] */
   &slK,                      /* temp_array[37] */
   &slL,                      /* temp_array[38] */
   &slN,                      /* temp_array[39] */
   &slQ,                      /* temp_array[40] */
   &slX,                      /* temp_array[41] */
   &slV,                      /* temp_array[42] */
   &automode,                 /* temp_array[43] */
   &hyJ,                      /* temp_array[44] */
   &quH,                      /* temp_array[45] */
   &quO,                      /* temp_array[46] */
   &acu_data_bits,            /* temp_array[47] */
   &acu_stop_bits,            /* temp_array[48] */
   &dte_baud,                 /* temp_array[49] */
   &acu_parity,               /* temp_array[50] */
   &char_size,                /* temp_array[51] */
   &v32_retrain,              /* temp_array[52] */
   &autofallback,             /* temp_array[53] */
   &atB.group1,               /* temp_array[54] */
   &atB.group2,               /* temp_array[55] */
   &atB.group3,               /* temp_array[56] */
   &atB.group4,               /* temp_array[57] */
   &atB.group5,               /* temp_array[58] */
   &atB.group6,               /* temp_array[59] */
   &atB.group7,               /* temp_array[60] */
   &atB.group8,               /* temp_array[61] */
   &atB.group9,               /* temp_array[62] */
   &atB.group10,              /* temp_array[63] */
   &atB.group11,              /* temp_array[64] */
   &atB.group12,              /* temp_array[65] */
   &atB.group13,              /* temp_array[66] */
   &atB.group14,              /* temp_array[67] */
   &atB.group15,              /* temp_array[68] */
   &atB.group16,              /* temp_array[69] */
   &trellis,                  /* temp_array[70] */
   &break_length,             /* temp_array[71] */
   &calling_tone,             /* temp_array[72] */
   &detect_disconnect_tone,   /* temp_array[73] */
   &link_negot,               /* temp_array[74] */
   &prnM,                     /* temp_array[75] */
   &hyK,                      /* temp_array[76] */
   &hyQ,                      /* temp_array[77] */
   &quM,                      /* temp_array[78] */
   &andK,                     /* temp_array[79] */
   &andF,                     /* temp_array[80] */
   &andI,                     /* temp_array[81] */
   &perB,                     /* temp_array[82] */
   &astA,                     /* temp_array[83] */
   &astB,                     /* temp_array[84] */
   &s[113],                   /* temp_array[85] */
   (ubyte *)&sr114,           /* temp_array[86] */
   &s[115],                   /* temp_array[87] */
   (ubyte *)&sr116,           /* temp_array[88] */
   &s[117],                   /* temp_array[89] */
   &s[118],                   /* temp_array[90] */


/*
 * Start of variables that have defaults but are not stored in the EEprom
 */
   &s[1],                     /* temp_array[91] */
   &s[3],                     /* temp_array[92] */
   &s[4],                     /* temp_array[93] */
   &s[5],                     /* temp_array[94] */
   &make_time,                /* temp_array[95] */
   &break_time,               /* temp_array[96] */
   &operating_mode,           /* temp_array[97] */
   &current_register,         /* temp_array[98] */
   &s[19],                    /* temp_array[99] */
   &s[20]                     /* temp_array[100] */
};
#endif

/*
   S registers bounds which are a function of the modem type.
   (Used below in "s_range"[][])
*/
/*   S-register values for V.22bis modem.   */
#if CONFIG_MODE == CFG_V22BIS
#define MAX_S37     6
#define MIN_S108    2
#define MAX_S108    2
#define MIN_S109    0
#define MAX_S109    0
#define MIN_S110    0
#define MAX_S110    0
#define MAX_S113    0

/*   S-register values for V.32 modem.   */
#elif CONFIG_MODE == CFG_V32
#define MAX_S37     9
#define MIN_S108    2
#define MAX_S108    2
#define MIN_S109    10
#define MAX_S109    10
#define MIN_S110    0
#define MAX_S110    0
#define MAX_S113    0

/*   S-register values for V.32bis modem.   */
#elif CONFIG_MODE == CFG_V32BIS
#define MAX_S37     11
#define MIN_S108    0
#define MAX_S108    3
#define MIN_S109    0
#define MAX_S109    255
#define MIN_S110    0
#define MAX_S110    2
#define MAX_S113    0

/*   S-register values for V.34 modem.   */
#elif CONFIG_MODE == CFG_V34
#define MAX_S37     S37_28800_BPS
#define MIN_S108    0
#define MAX_S108    3
#define MIN_S109    0
#define MAX_S109    255
#define MIN_S110    0
#define MAX_S110    3
#define MAX_S113    0x0F    /* BPS28800 */

/*   S-register values for V.34Bis modem.   */
#elif CONFIG_MODE == CFG_V34BIS
#define MAX_S37     S37_33600_BPS
#define MIN_S108    0
#define MAX_S108    3
#define MIN_S109    0
#define MAX_S109    255
#define MIN_S110    0
#define MAX_S110    3
#define MAX_S113    0x3F    /* BPS33600 */
#endif

/*
   Table of ranges for the S registers:
   The 1st value defines the number of ranges associated with each register,
   following values are the ranges defined for each register.
*/
const ubyte s_range[][NUM_RANGES] = {
   {1,0,255},  {1,0,255},     {1,0,255},     /* s0-s2     */
   {1,0,127},  {1,0,127},     {1,0,127},     /* s3-s5     */
   {1,2,255},  {1,1,255},     {1,0,255},     /* s6-s8     */
   {1,1,255},  {1,1,255},     {1,50,255},    /* s9-s11    */
   {1,0,255},  {1,0,0},       {0,0,0},       /* s12-s14   */
   {1,0,0},    {0,0,0},       {1,0,0},       /* s15-s17   */
   {1,0,255},  {1,0,255},     {1,0,255},     /* s18-s20   */
   {0,0,0},    {0,0,0},       {0,0,0},       /* s21-s23   */
   {1,0,0},    {1,0,255},     {1,0,255},     /* s24-s26   */
   {0,0,0},    {1,0,0},       {1,0,0},       /* s27-s29   */
   {1,0,90},   {1,0,0},       {1,0,0},       /* s30-s32   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s33-s35   */
   {1,0,0},    {1,0,MAX_S37}, {1,0,0},       /* s36-s38   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s39-s41   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s42-s44   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s45-s47   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s48-s50   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s51-s53   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s54-s56   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s57-s59   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s60-s62   */
   {1,0,15},   {1,0,0},       {1,0,0},       /* s63-s65   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s66-s68   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s69-s71   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s72-s74   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s75-s77   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s78-s80   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s81-s83   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s84-s86   */
   {1,0,0},    {1,0,0},       {1,0,0},       /* s87-s89   */
   {1,0,0},    {1,0,15},      {1,0,0},       /* s90-s92   */
   {1,0,0},    {1,0,0},       {1,0,255},     /* s93-s95   */
   {1,0,0},    {1,0,0},       {1,0,255},     /* s96-s98   */
   {1,0,0},    {1,0,0},       {1,0,255},     /* s99-s101  */
   {1,0,0},    {1,0,0},       {1,0,255},     /* s102-s104 */
   {1,0,0},    {1,0,0},       {1,0,255},     /* s105-s107 */
   {1,MIN_S108,MAX_S108},                    /* s108      */
   {1,MIN_S109,MAX_S109},                    /* s109      */
   {1,MIN_S110,MAX_S110},                    /* s110      */
   {1,0,0},    {1,0,14},                     /* s111-s112 */
   {1,0,MAX_S113}, {1,0,0xEF},{1,0,0x3F},    /* s113-s115 */
   {1,0,0x0F}, {1,0,0xFF},    {1,0,0x0F}     /* s116-s118 */
};




/*
   Factory default settings which are a function of the modem type.
   (Used below in "factory_defaults[]")
*/

/*   Factory default values for V.22bis modem */
#if CONFIG_MODE == CFG_V22BIS
#define DEFAULT_S108       2
#define DEFAULT_S109       0
#define DEFAULT_S110       0
#define DEFAULT_V32_RET    0
#define DEFAULT_G5         30
#define DEFAULT_G6         0
#define DEFAULT_G7         0
#define DEFAULT_G8         0
#define DEFAULT_G9         0
#define DEFAULT_G10        0
#define DEFAULT_G11        0
#define DEFAULT_G12        0
#define DEFAULT_G13        0
#define DEFAULT_G14        0
#define DEFAULT_G15        0
#define DEFAULT_G16        0
#define DEFAULT_AUTOFB     0
#define DEFAULT_AUTOMODE   AUTOMODE_NO_V8
#define DEFAULT_S113       0x00
#define DEFAULT_S114       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S116       0x00
#define DEFAULT_S117       0x00
#define DEFAULT_S118       0x00

/*   Factory default values for V.32 modem */
#elif CONFIG_MODE == CFG_V32
#define DEFAULT_S108       2
#define DEFAULT_S109       0
#define DEFAULT_S110       0
#define DEFAULT_V32_RET    1
#define DEFAULT_G5         30
#define DEFAULT_G6         41
#define DEFAULT_G7         0
#define DEFAULT_G8         60
#define DEFAULT_G9         0
#define DEFAULT_G10        0
#define DEFAULT_G11        0
#define DEFAULT_G12        0
#define DEFAULT_G13        0
#define DEFAULT_G14        0
#define DEFAULT_G15        0
#define DEFAULT_G16        0
#define DEFAULT_AUTOFB     0
#define DEFAULT_AUTOMODE   AUTOMODE_NO_V8
#define DEFAULT_S113       0x00
#define DEFAULT_S114       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S116       0x00
#define DEFAULT_S117       0x00
#define DEFAULT_S118       0x00


/*   Factory default values for V.32bis modem */
#elif CONFIG_MODE == CFG_V32BIS
#define DEFAULT_S108       1
#define DEFAULT_S109       62
#define DEFAULT_S110       2
#define DEFAULT_V32_RET    1
#define DEFAULT_G5         30
#define DEFAULT_G6         41
#define DEFAULT_G7         52
#define DEFAULT_G8         60
#define DEFAULT_G9         70
#define DEFAULT_G10        75
#define DEFAULT_G11        0
#define DEFAULT_G12        0
#define DEFAULT_G13        0
#define DEFAULT_G14        0
#define DEFAULT_G15        0
#define DEFAULT_G16        0
#define DEFAULT_AUTOFB     1
#define DEFAULT_AUTOMODE   AUTOMODE_NO_V8
#define DEFAULT_S113       0x00
#define DEFAULT_S114       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S116       0x00
#define DEFAULT_S117       0x00
#define DEFAULT_S118       0x00

/*   Factory default values for V.34/bis modem */
#elif CONFIG_MODE == CFG_V34 || CONFIG_MODE == CFG_V34BIS
#define DEFAULT_S108       2
#define DEFAULT_S109       255
#define DEFAULT_S110       3
#define DEFAULT_V32_RET    1
#define DEFAULT_G5         32
#define DEFAULT_G6         42
#define DEFAULT_G7         53
#define DEFAULT_G8         61
#define DEFAULT_G9         71
#define DEFAULT_G10        76
#define DEFAULT_AUTOFB     1       /* Autofall back enabled */
#define DEFAULT_AUTOMODE   AUTOMODE_AND_V8
#define DEFAULT_G11        80
#define DEFAULT_G12        85
#define DEFAULT_G13        90
#define DEFAULT_G14        95
#define DEFAULT_G15        100
#define DEFAULT_G16        105
#define DEFAULT_S113       MAX_S113
#define DEFAULT_S114       0x7F
#define DEFAULT_S115       0x3F
#define DEFAULT_S115       0x3F
#define DEFAULT_S116       0x00
#define DEFAULT_S117       0xFF
#define DEFAULT_S118       0x0F
#endif

/*   Factory default values for MNP10 and high speed modems */
#if CONFIG_MNP10 == 1 || CONFIG_MODE == CFG_V32 || CONFIG_MODE == CFG_V32BIS \
   || CONFIG_MODE == CFG_V34 || CONFIG_MODE == CFG_V34BIS
#define DEFAULT_S7   90
#else
#define DEFAULT_S7   30
#endif

/*   Factory default values for MNP10 modems */
#if CONFIG_MNP10 == 1
#define DEFAULT_MNP10   1
#else
#define DEFAULT_MNP10   0
#endif

const ubyte factory_defaults[DEFAULT_SIZE] = {
   0,                   /* s[0]                    */
   43,                  /* s[2]                    */
   2,                   /* s[6]                    */
   DEFAULT_S7,          /* s[7]                    */
   2,                   /* s[8]                    */
   6,                   /* s[9]                    */
   14,                  /* s[10]                   */
   95,                  /* s[11]                   */
   50,                  /* s[12]                   */
   0xaa,                /* *srptr[14]              */
   0x00,                /* *srptr[16]              */
   0,                   /* s[18]                   */
   0x30,                /* *srptr[21]              */
   0x76,                /* *srptr[22]              */
   0x0F,                /* *srptr[23]              */
   5,                   /* s[25]                   */
   1,                   /* s[26]                   */
   0x40,                /* *srptr[27]              */
   0,                   /* s[30]                   */
   0,                   /* s[37]                   */
   9,                   /* s[63]                   */
   9,                   /* s[91]                   */
   0x00,                /* *srptr[95]              */
   DEFAULT_S108,        /* s[108]                  */
   DEFAULT_S109,        /* s[109]                  */
   DEFAULT_S110,        /* s[110]                  */
   0,                   /* s[112]                  */
   0,                   /* atW                     */
   4,                   /* valueX                  */
   3,                   /* slA                     */
   13,                  /* perA                    */
   0,                   /* slC                     */
   1,                   /* perC                    */
   1,                   /* perE                    */
   0,                   /* slG                     */
   0,                   /* slI                     */
   0,                   /* bps_adjust              */
   5,                   /* slK                     */
   0,                   /* slL                     */
   3,                   /* slN                     */
   3,                   /* slQ                     */
   0,                   /* slX                     */
   0,                   /* slV                     */
   DEFAULT_AUTOMODE,    /* automode + V.8          */
   1,                   /* hyJ                     */
   3,                   /* quH                     */
   32,                  /* quO                     */
   0,                   /* acu_data_bits           */
   0,                   /* acu_stop_bits           */
   12,                  /* dte_baud                */
   2,                   /* acu_parity              */
   2,                   /* char_size               */
   DEFAULT_V32_RET,     /* v32_retrain             */
   DEFAULT_AUTOFB,      /* perG/autofallback       */
   1,                   /* ATB group 1             */
   0,                   /* ATB group 2             */
   16,                  /* ATB group 3             */
   0,                   /* ATB group 4             */
   DEFAULT_G5,          /* ATB group 5             */
   DEFAULT_G6,          /* ATB group 6             */
   DEFAULT_G7,          /* ATB group 7             */
   DEFAULT_G8,          /* ATB group 8             */
   DEFAULT_G9,          /* ATB group 9             */
   DEFAULT_G10,         /* ATB group 10            */
   DEFAULT_G11,         /* ATB group 11            */
   DEFAULT_G12,         /* ATB group 12            */
   DEFAULT_G13,         /* ATB group 13            */
   DEFAULT_G14,         /* ATB group 14            */
   DEFAULT_G15,         /* ATB group 15            */
   DEFAULT_G16,         /* ATB group 16            */
   0,                   /* trellis coding          */
   5,                   /* break_length            */
   0,                   /* calling_tone            */
   1,                   /* detect_disconnect_tone  */
   0,                   /* link_negot              */
   0,                   /* prnM                    */
   DEFAULT_MNP10,       /* hyK                     */
   2,                   /* hyQ                     */
   DEFAULT_MNP10,       /* quM                     */
   3,                   /* andK                    */
   ETC_MODE__DISABLE,   /* andF (ETC mode)         */
   ETC_TXLVL__AUTO,     /* andI (ETC power level)  */
   ETC_MAXRATE_DEFAULT, /* perB (ETC max rate)     */
   AUTORATE_MAX,        /* astA (ETC Autorate)     */
   ETC_HW__PSTN,        /* astB (ETC hardware)     */
   DEFAULT_S113,        /* V.34 SReg 113           */
   DEFAULT_S114,        /* V.34 SReg 114           */
   DEFAULT_S115,        /* V.34 SReg 115           */
   DEFAULT_S116,        /* V.34 SReg 116           */
   DEFAULT_S117,        /* V.34 SReg 117           */
   DEFAULT_S118,        /* V.34 SReg 118           */

/*
 * Start of variables that have defaults but are not stored in the EEprom
 */
   0,                   /* s[1]                    */
   13,                  /* s[3]                    */
   10,                  /* s[4]                    */
   8,                   /* s[5]                    */
   US_MAKE_TIME,        /* make_time               */
   US_BREAK_TIME,       /* break_time              */
   2,                   /* operating_mode          */
   0,                   /* current_register        */
   0,                   /* s[19]                   */
   0,                   /* s[20]                   */
   0                    /* power up profile        */
};

#ifdef NO_STATIC_INIT

void ac00tab1_init_statics(void)
{
      srptr[0] = &s[0],
      srptr[1] = &s[1],
      srptr[2] = &s[2],
      srptr[3] = &s[3],
      srptr[4] = &s[4],
      srptr[5] = &s[5],
      srptr[6] = &s[6],
      srptr[7] = &s[7],
      srptr[8] = &s[8],
      srptr[9] = &s[9],
      srptr[10] = &s[10],
      srptr[11] = &s[11],
      srptr[12] = &s[12],
      srptr[13] = &s[13],
      srptr[14] = (ubyte *)&sr14,
      srptr[15] = &s[15],
      srptr[16] = (ubyte *)&sr16,
      srptr[17] = &s[17],
      srptr[18] = &s[18],
      srptr[19] = &s[19],
      srptr[20] = &s[20],
      srptr[21] = (ubyte *)&sr21,
      srptr[22] = (ubyte *)&sr22,
      srptr[23] = (ubyte *)&sr23,
      srptr[24] = &s[24],
      srptr[25] = &s[25],
      srptr[26] = &s[26],
      srptr[27] = (ubyte *)&sr27,
      srptr[28] = &s[28],
      srptr[29] = &s[29],
      srptr[30] = &s[30],
      srptr[31] = &s[31],
      srptr[32] = &s[32],
      srptr[33] = &s[33],
      srptr[34] = &s[34],
      srptr[35] = &s[35],
      srptr[36] = &s[36],
      srptr[37] = &s[37],
      srptr[38] = &s[38],
      srptr[39] = &s[39],
      srptr[40] = &s[40],
      srptr[41] = &s[41],
      srptr[42] = &s[42],
      srptr[43] = &s[43],
      srptr[44] = &s[44],
      srptr[45] = &s[45],
      srptr[46] = &s[46],
      srptr[47] = &s[47],
      srptr[48] = &s[48],
      srptr[49] = &s[49],
      srptr[50] = &s[50],
      srptr[51] = &s[51],
      srptr[52] = &s[52],
      srptr[53] = &s[53],
      srptr[54] = &s[54],
      srptr[55] = &s[55],
      srptr[56] = &s[56],
      srptr[57] = &s[57],
      srptr[58] = &s[58],
      srptr[59] = &s[59],
      srptr[60] = &s[60],
      srptr[61] = &s[61],
      srptr[62] = &s[62],
      srptr[63] = &s[63],
      srptr[64] = &s[64],
      srptr[65] = &s[65],
      srptr[66] = &s[66],
      srptr[67] = &s[67],
      srptr[68] = &s[68],
      srptr[69] = &s[69],
      srptr[70] = &s[70],
      srptr[71] = &s[71],
      srptr[72] = &s[72],
      srptr[73] = &s[73],
      srptr[74] = &s[74],
      srptr[75] = &s[75],
      srptr[76] = &s[76],
      srptr[77] = &s[77],
      srptr[78] = &s[78],
      srptr[79] = &s[79],
      srptr[80] = &s[80],
      srptr[81] = &s[81],
      srptr[82] = &s[82],
      srptr[83] = &s[83],
      srptr[84] = &s[84],
      srptr[85] = &s[85],
      srptr[86] = &s[86],
      srptr[87] = &s[87],
      srptr[88] = &s[88],
      srptr[89] = &s[89],
      srptr[90] = &s[90],
      srptr[91] = &s[91],
      srptr[92] = &s[92],
      srptr[93] = &s[93],
      srptr[94] = &s[94],
      srptr[95] = (ubyte *)&sr95,
      srptr[96] = &s[96],
      srptr[97] = &s[97],
      srptr[98] = &s[98],
      srptr[99] = &s[99],
      srptr[100] = &s[100],
      srptr[101] = &s[101],
      srptr[102] = &s[102],
      srptr[103] = &s[103],
      srptr[104] = &s[104],
      srptr[105] = &s[105],
      srptr[106] = &s[106],
      srptr[107] = &s[107],
      srptr[108] = &s[108],
      srptr[109] = &s[109],
      srptr[110] = &s[110],
      srptr[111] = &s[111],
      srptr[112] = &s[112],
      srptr[113] = &s[113],
      srptr[114] = (ubyte *)&sr114,
      srptr[115] = &s[115],
      srptr[116] = (ubyte *)&sr116,
      srptr[117] = &s[117],
      srptr[118] = &s[118];

      variable_addr[0] = &s[0],                     /* temp_array[0] */
      variable_addr[1] = &s[2],                     /* temp_array[1] */
      variable_addr[2] = &s[6],                     /* temp_array[2] */
      variable_addr[3] = &s[7],                     /* temp_array[3] */
      variable_addr[4] = &s[8],                     /* temp_array[4] */
      variable_addr[5] = &s[9],                     /* temp_array[5] */
      variable_addr[6] = &s[10],                    /* temp_array[6] */
      variable_addr[7] = &s[11],                    /* temp_array[7] */
      variable_addr[8] = &s[12],                    /* temp_array[8] */
      variable_addr[9] = (ubyte *)&sr14,            /* temp_array[9] */
      variable_addr[10] = (ubyte *)&sr16,            /* temp_array[10] */
      variable_addr[11] = &s[18],                    /* temp_array[11] */
      variable_addr[12] = (ubyte *)&sr21,            /* temp_array[12] */
      variable_addr[13] = (ubyte *)&sr22,            /* temp_array[13] */
      variable_addr[14] = (ubyte *)&sr23,            /* temp_array[14] */
      variable_addr[15] = &s[25],                    /* temp_array[15] */
      variable_addr[16] = &s[26],                    /* temp_array[16] */
      variable_addr[17] = (ubyte *)&sr27,            /* temp_array[17] */
      variable_addr[18] = &s[30],                    /* temp_array[18] */
      variable_addr[19] = &s[37],                    /* temp_array[19] */
      variable_addr[20] = &s[63],                    /* temp_array[20] */
      variable_addr[21] = &s[91],                    /* temp_array[21] */
      variable_addr[22] = (ubyte *)&sr95,            /* temp_array[22] */
      variable_addr[23] = &s[108],                   /* temp_array[23] */
      variable_addr[24] = &s[109],                   /* temp_array[24] */
      variable_addr[25] = &s[110],                   /* temp_array[25] */
      variable_addr[26] = &s[112],                   /* temp_array[26] */
      variable_addr[27] = &atW,                      /* temp_array[27] */
      variable_addr[28] = &valueX,                   /* temp_array[28] */
      variable_addr[29] = &slA,                      /* temp_array[29] */
      variable_addr[30] = &perA,                     /* temp_array[30] */
      variable_addr[31] = &slC,                      /* temp_array[31] */
      variable_addr[32] = &perC,                     /* temp_array[32] */
      variable_addr[33] = &perE,                     /* temp_array[33] */
      variable_addr[34] = &slG,                      /* temp_array[34] */
      variable_addr[35] = &slI,                      /* temp_array[35] */
      variable_addr[36] = &bps_adjust,               /* temp_array[36] */
      variable_addr[37] = &slK,                      /* temp_array[37] */
      variable_addr[38] = &slL,                      /* temp_array[38] */
      variable_addr[39] = &slN,                      /* temp_array[39] */
      variable_addr[40] = &slQ,                      /* temp_array[40] */
      variable_addr[41] = &slX,                      /* temp_array[41] */
      variable_addr[42] = &slV,                      /* temp_array[42] */
      variable_addr[43] = &automode,                 /* temp_array[43] */
      variable_addr[44] = &hyJ,                      /* temp_array[44] */
      variable_addr[45] = &quH,                      /* temp_array[45] */
      variable_addr[46] = &quO,                      /* temp_array[46] */
      variable_addr[47] = &acu_data_bits,            /* temp_array[47] */
      variable_addr[48] = &acu_stop_bits,            /* temp_array[48] */
      variable_addr[49] = &dte_baud,                 /* temp_array[49] */
      variable_addr[50] = &acu_parity,               /* temp_array[50] */
      variable_addr[51] = &char_size,                /* temp_array[51] */
      variable_addr[52] = &v32_retrain,              /* temp_array[52] */
      variable_addr[53] = &autofallback,             /* temp_array[53] */
      variable_addr[54] = &atB.group1,               /* temp_array[54] */
      variable_addr[55] = &atB.group2,               /* temp_array[55] */
      variable_addr[56] = &atB.group3,               /* temp_array[56] */
      variable_addr[57] = &atB.group4,               /* temp_array[57] */
      variable_addr[58] = &atB.group5,               /* temp_array[58] */
      variable_addr[59] = &atB.group6,               /* temp_array[59] */
      variable_addr[60] = &atB.group7,               /* temp_array[60] */
      variable_addr[61] = &atB.group8,               /* temp_array[61] */
      variable_addr[62] = &atB.group9,               /* temp_array[62] */
      variable_addr[63] = &atB.group10,              /* temp_array[63] */
      variable_addr[64] = &atB.group11,              /* temp_array[64] */
      variable_addr[65] = &atB.group12,              /* temp_array[65] */
      variable_addr[66] = &atB.group13,              /* temp_array[66] */
      variable_addr[67] = &atB.group14,              /* temp_array[67] */
      variable_addr[68] = &atB.group15,              /* temp_array[68] */
      variable_addr[69] = &atB.group16,              /* temp_array[69] */
      variable_addr[70] = &trellis,                  /* temp_array[70] */
      variable_addr[71] = &break_length,             /* temp_array[71] */
      variable_addr[72] = &calling_tone,             /* temp_array[72] */
      variable_addr[73] = &detect_disconnect_tone,   /* temp_array[73] */
      variable_addr[74] = &link_negot,               /* temp_array[74] */
      variable_addr[75] = &prnM,                     /* temp_array[75] */
      variable_addr[76] = &hyK,                      /* temp_array[76] */
      variable_addr[77] = &hyQ,                      /* temp_array[77] */
      variable_addr[78] = &quM,                      /* temp_array[78] */
      variable_addr[79] = &andK,                     /* temp_array[79] */
      variable_addr[80] = &andF,                     /* temp_array[80] */
      variable_addr[81] = &andI,                     /* temp_array[81] */
      variable_addr[82] = &perB,                     /* temp_array[82] */
      variable_addr[83] = &astA,                     /* temp_array[83] */
      variable_addr[84] = &astB,                     /* temp_array[84] */
      variable_addr[85] = &s[113],                   /* temp_array[85] */
      variable_addr[86] = (ubyte *)&sr114,           /* temp_array[86] */
      variable_addr[87] = &s[115],                   /* temp_array[87] */
      variable_addr[88] = (ubyte *)&sr116,           /* temp_array[88] */
      variable_addr[89] = &s[117],                   /* temp_array[89] */
      variable_addr[90] = &s[118],                   /* temp_array[90] */


/*
 * Start of variables that have defaults but are not stored in the EEprom
 */
      variable_addr[91] = &s[1],                     /* temp_array[91] */
      variable_addr[92] = &s[3],                     /* temp_array[92] */
      variable_addr[93] = &s[4],                     /* temp_array[93] */
      variable_addr[94] = &s[5],                     /* temp_array[94] */
      variable_addr[95] = &make_time,                /* temp_array[95] */
      variable_addr[96] = &break_time,               /* temp_array[96] */
      variable_addr[97] = &operating_mode,           /* temp_array[97] */
      variable_addr[98] = &current_register,         /* temp_array[98] */
      variable_addr[99] = &s[19],                    /* temp_array[99] */
      variable_addr[100] = &s[20];                   /* temp_array[100] */
}

#endif
