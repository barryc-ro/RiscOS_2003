/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00mstr.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the control code for the ACU.
/
/     Product:          ACU core code
/
/     History:          ac00mstr.c v3.90
/                       ac00mstr.c v3.91
/                       ac00mstr.c v3.96
/
/        Created:       10/7/91
/                       3/6/92
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"

#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "ll_pro.h"
#include "v25_pro.h"
#include "fp_pro.h"
#include "ds_pro.h"
#include "acu_epro.h"       /* ACU ETC Driver interface prototypes */
#include "wl_pro.h"

int  main(void);
void acu_bg(void);
void ACU_Main(void);
void master_bg(void);
void master_init(void);
void build_event(ubyte,ubyte);

/* These variables are for debug */
ubyte last_event,last_built;

/****************************************************************************
 *
 *   Routine:           MAIN()
 *
 *   Author:            RSA
 *
 *   Creation Data:     12/4/1996
 *
 *   Description: Customer main entry point. Macro MAIN in sys_def.h
 *                resolves to main if required.
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

int MAIN(void)
{
   while (1)
   {
      master_init();

      while (acu_loop == TRUE)
      {
         ACU_Main();
      }
   }
}

/*******************************************************************************
/
/     Routine:       ACU_Main
/
/     Author:        RSA
/
/     Creation Date: 06/13/91
/
/     Description:   This Routine is the main controlling code for this
/                    system.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void ACU_Main(void)
{
   mmu_force_acu_pg
   process_acu_timer();

   /* Process background functions   */
   mmu_force_acu_pg

   if ((operating_mode != DIRECT) && (!test_in_progress))
      system_bg();

   process_fax_bg();

   process_voice_bg();

   /* Need to prevent the modem_task from being called if
      MNP 10 is running .   All data pump operations should
      be handled by the MNP 10 code. */
   if (!v42_running_mnp10)
      modem_task();

   wireless_bg();
   acu_bg();
   master_bg();
   frontpanel_bg();
}


/*******************************************************************************
/
/     Routine:       master_init
/
/     Author:        RSA
/
/     Creation Date: 06/13/91
/
/     Description:   This Routine is called to initialize the modules needed
/                    in this system.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_loop
/
/     Users:   main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void master_init(void)
{
   mmu_pg_init

   #ifdef TMLDEBUG
   Printf("master_init\n");
   #endif

   acu_loop = TRUE;

   /* initialize the acu and modem, and reset v42 */
   system_reset();

   modem_disable_interrupts();
   modem_ram_init();

   modem_init();

   mmu_force_parse_pg
   acu_init();
   init_event_que();

   initialize_voice(POWERUP);

   initialize_vcv();

   acu_phbk_init();

   /* Included if there is a front pannel   */
   mmu_force_acu_pg
   frontpanel_init();

   /* Included if V25bis code is included   */
   v25bis_init();

   /* Included if Leased line code is included     */
   /*   mmu_force_acu_pg   not needed, done above for frontpanel */
   ll_init();

   /* Included if ETC code is included   */
   acu_ETC_init();

   /* initialize the ACU io code */
   acu_port_init();

   mmu_force_parse_pg
   initialize_fax(FAX_INIT_POWERUP);

   /* give control of the terminal to the acu */
   mmu_force_acu_pg
   enable_acu_on_terminal();

   /* start the system running */
   modem_enable_interrupts();

   modem_mr_led(ON);

   mmu_force_parse_pg
   if (init_dipswitch_parms() == 0)
   {
/*      mmu_force_parse_pg       Not Needed, Done above for init_dipswitch_parms */
      acu_reset();

      if (sr27.leased_line)
      {
         if (sr14.originate_flag)
            build_event(E_ORIG,UNUSED);
         else
            build_event(E_ANSW,UNUSED);
         return;
      }
      else
         modem_line_select(PSTN);

      if (v25bis_active)
         init_v25_communication();
   }

   if (!v25bis_active)
   {
      autobaud_on();
      if (sr14.echo_cmd_flag)
         modem_serial_echo(ON);
      else
         modem_serial_echo(OFF);
   }

   /* If ignore DTR is selected, turn the TR LED on   */
   if ((sr27.comm_mode == ASYNC) && (sr21.DTR_control == 0))
      modem_tr_led(ON);
}


/*******************************************************************************
/
/     Routine:       acu_bg
/
/     Author:        RSA
/
/     Creation Date: 06/13/91
/
/     Description:   This Routine is called to process the ACU background
/                    functions.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_bg(void)
{
   switch (acu_state)
   {
      case S_IDLE: mmu_force_acu_pg
         idle_bg();
         break;

      case S_PARSE: mmu_force_parse_pg
         parse_bg();
         break;

      case S_ORIG: mmu_force_acu_pg
         orig_bg();
         break;

      case S_ANSW: mmu_force_acu_pg
         answ_bg();
         break;

      case S_ONLINE: mmu_force_acu_pg
         online_bg();
         break;

      case S_HANGUP: mmu_force_acu_pg
         hangup_bg();
         break;

      case S_TEST: mmu_force_acu_pg
         test_bg();
         break;
   }
}

/*******************************************************************************
/
/     Routine:       master_bg
/
/     Author:        RSA
/
/     Creation Date: 09/16/91
/
/     Description:   This Routine is called to process the core code for the
/                    autodialer.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_event
/
/     Users:   main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void master_bg(void)
{
   mmu_force_acu_pg
   check_char_rcvd();

   /* This Routine needs the ACU page to be open */
   check_V24_transition();

   /* This Routine needs the ACU page to be open */
   check_modem_status();

   /* See if there are events to be processed */
   if ((struct ACU_event *)event_que.fill_begin != NULL)
   {
      /* Remove event from the queue   */
      acu_event = dq_event();

      /* Process all events that are on the queue   */
      while (acu_event != NULL)
      {
         /* This code is used for DEBUG   */
         if (last_event != acu_event->type)
            last_event = (ubyte)acu_event->type;

         switch (acu_state)
         {
            case S_IDLE: mmu_force_acu_pg
               proc_idle();
               break;

            case S_PARSE: mmu_force_parse_pg
               proc_parse();
               break;

            case S_ORIG: mmu_force_acu_pg
               proc_orig();
               break;

            case S_ANSW: mmu_force_acu_pg
               proc_answ();
               break;

            case S_ONLINE: mmu_force_acu_pg
               proc_online();
               break;

            case S_HANGUP: mmu_force_acu_pg
               proc_hangup();
               break;

            case S_TEST: mmu_force_acu_pg
               proc_test();
               break;
         }

         /* Process the event Routine   */
         mmu_force_acu_pg
         (*acu_proc)();

         /* Place the event buffer back onto the empty queue   */
         fq_event(acu_event);

         /* See if there is another event to process   */
         acu_event = dq_event();
      }
   }
}



/*******************************************************************************
/
/     Routine:       build_event
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called allocate an event buffer, set
/                    the event and parameter fields, and queue it to be
/                    processed later.
/
/     Input Parameters:
/                    ubyte type - type of event to be built
/                    ubyte parm - parameter to be placed in the event buffer
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void build_event(ubyte type, ubyte parm)
{
   struct ACU_event *add;

   /* Get event buffer address   */
   add = aq_event();

   /* Build event if there is an event buffer available   */
   if (add != NULL)
   {
      /* This code is used for DEBUG   */
      last_built = type;

      add->type = type;
      add->parm = parm;

      qq_event(add);
   }
}

