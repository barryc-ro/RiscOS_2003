/*****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00tab2.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains &V profile display tables for
/                       AT&V AT command.
/
/     Product:          ACU core code.
/
/     History:          ac00tab1.c v4.02
/
/        Created:       10/8/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"

/*
   Arrays used for the &V command.

   The information in the arrays indicates to send_andV_string() how the
   AT command display should look.  They are encoded as follows:
   0 - Exit routine
   1 - will retrieve a value from the address array and sent 1 ASCII
       character to the terminal.
   2 - will retrieve a value from the address array and send 2 ASCII
       characters to the terminal.
   3 - will retrieve a value from the address array and send 3 ASCII
       characters to the terminal.
   4 - will send CR(s[3]) and LF(s[4]) to the terminal.
   5 - will check sr14.pulse to determine if a 'P' or 'T' should be sent to
       the terminal.
   6 - will indicate that the value to be sent back is located in a bit
       mapped register, therefore it needs to be translated into a byte
       value. This is followed by the following values:
         14 - indicates S14
         21 - indicates S21
         22 - indicates S22
         23 - indicates S23
         27 - indicates S27
         95 - indicates S95
   7 - End of current string. Increment profile pointer.
   8 - Command entry absent from display. Increment profile pointer and
       address array offset.
   9 - Verbose baud rate from ACU single char baud rate type.
      Will send a V.32bis rate in ASCII characters to the terminal.  This is
      used for the AT%B command which sets the max V.32bis DCE rate, and has
      the form: AT%B7200
   ASCII character - Send to the terminal.
*/

const ubyte E_ptr[]    = {'E',6,14,1,' ',7};
const ubyte L_ptr[]    = {'L',6,22,0,' ',7};
const ubyte M_ptr[]    = {'M',6,22,2,' ',7};
const ubyte N_ptr[]    = {'N',1,' ',7};
const ubyte P_ptr[]    = {5,' ',7};
const ubyte Q_ptr[]    = {'Q',6,14,2,' ',7};
const ubyte V_ptr[]    = {'V',6,14,3,' ',7};
const ubyte W_ptr[]    = {'W',1,' ',7};
const ubyte X_ptr[]    = {'X',1,' ',7};
const ubyte Y_ptr[]    = {'Y',6,21,7,' ',7};
const ubyte ANDC_ptr[] = {'&','C',6,21,5,' ',7};
const ubyte ANDD_ptr[] = {'&','D',6,21,3,' ',7};
const ubyte ANDG_ptr[] = {'&','G',6,23,6,' ',7};
const ubyte ANDJ_ptr[] = {'&','J',6,21,0,' ',7};
const ubyte ANDK_ptr[] = {'&','K',1,' ',7};
const ubyte ANDL_ptr[] = {'&','L',6,27,2,' ',7};
const ubyte ANDP_ptr[] = {'&','P',6,22,7,' ',7};
const ubyte ANDQ_ptr[] = {'&','Q',6,27,0,' ',7};
const ubyte ANDR_ptr[] = {'&','R',6,21,2,' ',7};
const ubyte ANDS_ptr[] = {'&','S',6,21,6,' ',7};
const ubyte ANDX_ptr[] = {'&','X',6,27,4,' ',7};
const ubyte ANDY_ptr[] = {'&','Y',1,' ',7};
const ubyte SLA_ptr[]  = {'\\','A',1,' ',7};
const ubyte PERA_ptr[] = {'%','A',3,' ',7};
const ubyte SLC_ptr[]  = {'\\','C',1,' ',7};
const ubyte PERC_ptr[] = {'%','C',1,' ',7};
const ubyte PERE_ptr[] = {'%','E',1,' ',7};
const ubyte SLG_ptr[]  = {'\\','G',1,' ',7};
const ubyte PERG_ptr[] = {'%','G',1,' ',7};
const ubyte SLJ_ptr[]  = {'\\','J',1,' ',7};
const ubyte SLK_ptr[]  = {'\\','K',1,' ',7};
const ubyte SLN_ptr[]  = {'\\','N',1,' ',7};
const ubyte SLQ_ptr[]  = {'\\','Q',1,' ',7};
const ubyte SLT_ptr[]  = {'\\','T',3,' ',7};
const ubyte SLV_ptr[]  = {'\\','V',6,95,1,' ',7};
const ubyte SLX_ptr[]  = {'\\','X',1,' ',7};
const ubyte HYJ_ptr[]  = {'-','J',1,' ',7};
const ubyte QUH_ptr[]  = {'\"','H',1,' ',7};
const ubyte QUO_ptr[]  = {'\"','O',3,' ',7};
const ubyte B1_ptr[]   = {'B',1,' ',7};
const ubyte B3_ptr[]   = {'B',2,' ',7};
const ubyte B5_ptr[]   = {'B',2,' ',7};

/* Array definitions for a V.22bis modem */
#if CONFIG_MODE == CFG_V22BIS
const ubyte B6_ptr[]   = {8};
const ubyte B8_ptr[]   = {8};
const ubyte ANDB_ptr[] = {8};
const ubyte ANDU_ptr[] = {8};
const ubyte B7_ptr[]   = {8};
const ubyte B9_ptr[]   = {8};
const ubyte B10_ptr[]  = {8};

/* Array definitions for a V.32bis or V.32 modem */
#elif (CONFIG_MODE == CFG_V32 || CONFIG_MODE == CFG_V32BIS)
const ubyte B6_ptr[]   = {'B',2,' ',7};
const ubyte B8_ptr[]   = {'B',2,' ',7};
const ubyte ANDB_ptr[] = {'&','B',1,' ',7};
const ubyte ANDU_ptr[] = {'&','U',1,' ',7};
const ubyte B7_ptr[]   = {8};
const ubyte B9_ptr[]   = {8};
const ubyte B10_ptr[]  = {8};

/* Array definitions for a V.34 modem */
#else /* CONFIG_MODE >= CFG_V34 */
const ubyte B6_ptr[]   = {'B',2,' ',7};
const ubyte B8_ptr[]   = {'B',2,' ',7};
const ubyte ANDB_ptr[] = {'&','B',1,' ',7};
const ubyte ANDU_ptr[] = {'&','U',1,' ',7};
const ubyte B7_ptr[]   = {'B',2,' ',7};
const ubyte B9_ptr[]   = {'B',2,' ',7};
const ubyte B10_ptr[]  = {'B',2,' ',7};
#endif

/* Array definitions for a MNP10 modem */
#if CONFIG_MNP10 == 1
const ubyte HYK_ptr[]  = {'-','K',1,' ',7};
const ubyte HYQ_ptr[]  = {'-','Q',1,' ',7};
const ubyte QUM_ptr[]  = {'\"','M',1,' ',7};
const ubyte ASTH_ptr[] = {'*','H',1,' ',7};
const ubyte PRNM_ptr[] = {')','M',1,' ',7};
#else
const ubyte HYK_ptr[]  = {8};
const ubyte HYQ_ptr[]  = {8};
const ubyte QUM_ptr[]  = {8};
const ubyte ASTH_ptr[] = {8};
const ubyte PRNM_ptr[] = {8};
#endif

/* S Registers in the display */
const ubyte S0_ptr[]   = {'S','0','0',':',3,' ',7};
const ubyte S1_ptr[]   = {'S','0','1',':',3,' ',7};
const ubyte S2_ptr[]   = {'S','0','2',':',3,' ',7};
const ubyte S3_ptr[]   = {'S','0','3',':',3,' ',7};
const ubyte S4_ptr[]   = {'S','0','4',':',3,' ',7};
const ubyte S5_ptr[]   = {'S','0','5',':',3,' ',7};
const ubyte S6_ptr[]   = {'S','0','6',':',3,' ',7};
const ubyte S7_ptr[]   = {'S','0','7',':',3,' ',7};
const ubyte S8_ptr[]   = {'S','0','8',':',3,' ',7};
const ubyte S9_ptr[]   = {'S','0','9',':',3,' ',7};
const ubyte S10_ptr[]  = {'S','1','0',':',3,' ',7};
const ubyte S11_ptr[]  = {'S','1','1',':',3,' ',7};
const ubyte S12_ptr[]  = {'S','1','2',':',3,' ',7};
const ubyte S18_ptr[]  = {'S','1','8',':',3,' ',7};
const ubyte S25_ptr[]  = {'S','2','5',':',3,' ',7};
const ubyte S26_ptr[]  = {'S','2','6',':',3,' ',7};
const ubyte S37_ptr[]  = {'S','3','7',':',3,' ',7};
const ubyte S112_ptr[] = {'S','1','1','2',':',3,' ',7};

/* For an ETC Modem */
const ubyte ANDF_ptr[] = {'&','F',1,' ',7};
const ubyte ANDI_ptr[] = {'&','I',2,' ',7};
const ubyte ASTA_ptr[] = {'*','A',1,' ',7};
const ubyte ASTB_ptr[] = {'*','B',2,' ',7};
const ubyte PERB_ptr[] = {'%','B',9,' ',7};
const ubyte CRLF_ptr[] = {4,7};
const ubyte END_ptr[]  = {0,7};
#ifdef NO_STATIC_INIT
const ubyte * cr_lf_string[2];
const ubyte * current_profile[ANDV_CURRENT_PRO_SIZE];
ubyte * current_pro_addr[ANDV_CURRENT_ADD_SIZE];
const ubyte * stored_profile[ANDV_STORED_PRO_SIZE];
ubyte * stored_pro_addr[ANDV_STORED_ADD_SIZE];
#else
const ubyte * const cr_lf_string[2] = {CRLF_ptr, END_ptr};

/*
   This array shows how the current AT command values are displayed
*/
const ubyte * const current_profile[ANDV_CURRENT_PRO_SIZE] =  {

/* First line of the profile display */
   B1_ptr,
   B3_ptr,
   B5_ptr,
   B6_ptr,
   B7_ptr,
   B8_ptr,
   B9_ptr,
   B10_ptr,
   E_ptr,
   L_ptr,
   M_ptr,
   N_ptr,
   P_ptr,
   Q_ptr,
   V_ptr,
   W_ptr,
   X_ptr,
   Y_ptr,
   CRLF_ptr,

/* Second line of the profile display */
   ANDB_ptr,
   ANDC_ptr,
   ANDD_ptr,
   ANDF_ptr,
   ANDG_ptr,
   ANDI_ptr,
   ANDJ_ptr,
   ANDK_ptr,
   ANDL_ptr,
   ANDP_ptr,
   ANDQ_ptr,
   ANDR_ptr,
   ANDS_ptr,
   ANDU_ptr,
   ANDX_ptr,
   ANDY_ptr,
   CRLF_ptr,

/* Third line of the profile display */
   PERA_ptr,
   PERB_ptr,
   PERC_ptr,
   PERE_ptr,
   PERG_ptr,
   SLA_ptr,
   SLC_ptr,
   SLG_ptr,
   SLJ_ptr,
   SLK_ptr,
   SLN_ptr,
   SLQ_ptr,
   SLT_ptr,
   SLV_ptr,
   SLX_ptr,
   CRLF_ptr,

/* Fourth line of the profile display */
   HYJ_ptr,
   HYK_ptr,
   HYQ_ptr,
   QUH_ptr,
   QUM_ptr,
   QUO_ptr,
   ASTA_ptr,
   ASTB_ptr,
   ASTH_ptr,
   PRNM_ptr,
   CRLF_ptr,

/* Fifth line of the profile display */
   S0_ptr,
   S1_ptr,
   S2_ptr,
   S3_ptr,
   S4_ptr,
   S5_ptr,
   S6_ptr,
   S7_ptr,
   S8_ptr,
   CRLF_ptr,

/* Sixth line of the profile display */
   S9_ptr,
   S10_ptr,
   S11_ptr,
   S12_ptr,
   S18_ptr,
   S25_ptr,
   S26_ptr,
   S37_ptr,
   S112_ptr,
   CRLF_ptr,

/* END of the profile display */
   CRLF_ptr,
   END_ptr
};


/*
   This array contains the addresses of the current AT command values
*/
ubyte * const current_pro_addr[ANDV_CURRENT_ADD_SIZE] = {
   &atB.group1,
   &atB.group3,
   &atB.group5,
   &atB.group6,
   &atB.group7,
   &atB.group8,
   &atB.group9,
   &atB.group10,
   &automode,
   &atW,
   &valueX,
   &v32_retrain,
   &andF,  &andI,
   &andK,
   &trellis,
   &temp_array[0],
   &perA,
   &perB,
   &perC,
   &perE,
   &autofallback,
   &slA,
   &slC,
   &slG,
   &bps_adjust,
   &slK,
   &slN,
   &slQ,
   &s[30],
   &slX,
   &hyJ,
   &hyK,
   &hyQ,
   &quH,
   &quM,
   &quO,
   &astA,
   &astB,
   &link_negot,
   &prnM,
   &s[0],
   &s[1],
   &s[2],
   &s[3],
   &s[4],
   &s[5],
   &s[6],
   &s[7],
   &s[8],
   &s[9],
   &s[10],
   &s[11],
   &s[12],
   &s[18],
   &s[25],
   &s[26],
   &s[37],
   &s[112]
};

/*
   This array shows how the stored AT command values are displayed
*/
const ubyte * const stored_profile[ANDV_STORED_PRO_SIZE] =  {
/* First line of the stored profile display */
   B1_ptr,
   B3_ptr,
   B5_ptr,
   B6_ptr,
   B7_ptr,
   B8_ptr,
   B9_ptr,
   B10_ptr,
   E_ptr,
   L_ptr,
   M_ptr,
   N_ptr,
   P_ptr,
   Q_ptr,
   V_ptr,
   W_ptr,
   X_ptr,
   Y_ptr,
   CRLF_ptr,

/* Second line of the stored profile display */
   ANDB_ptr,
   ANDC_ptr,
   ANDD_ptr,
   ANDF_ptr,
   ANDG_ptr,
   ANDI_ptr,
   ANDJ_ptr,
   ANDK_ptr,
   ANDL_ptr,
   ANDP_ptr,
   ANDQ_ptr,
   ANDR_ptr,
   ANDS_ptr,
   ANDU_ptr,
   ANDX_ptr,
   CRLF_ptr,

/* Third line of the stored profile display */
   PERA_ptr,
   PERB_ptr,
   PERC_ptr,
   PERE_ptr,
   PERG_ptr,
   SLA_ptr,
   SLC_ptr,
   SLG_ptr,
   SLJ_ptr,
   SLK_ptr,
   SLN_ptr,
   SLQ_ptr,
   SLT_ptr,
   SLV_ptr,
   SLX_ptr,
   CRLF_ptr,

/* Fourth line of the stored profile display */
   HYJ_ptr,
   HYK_ptr,
   HYQ_ptr,
   QUH_ptr,
   QUM_ptr,
   QUO_ptr,
   ASTA_ptr,
   ASTB_ptr,
   ASTH_ptr,
   PRNM_ptr,
   CRLF_ptr,

/* Fifth line of the stored profile display */
   S0_ptr,
   S2_ptr,
   S6_ptr,
   S7_ptr,
   S8_ptr,
   S9_ptr,
   S10_ptr,
   S11_ptr,
   CRLF_ptr,

/* Sixth line of the stored profile display */
   S12_ptr,
   S18_ptr,
   S25_ptr,
   S26_ptr,
   S37_ptr,
   S112_ptr,
   CRLF_ptr,

/* End line of the stored profile display */
   CRLF_ptr,
   END_ptr
};


/*
   This array contains the addresses of the stored AT command values
*/
ubyte * const stored_pro_addr[ANDV_STORED_ADD_SIZE] = {
   &temp_array[54],  /* atB.group1  */
   &temp_array[56],  /* atB.group3  */
   &temp_array[58],  /* atB.group5  */
   &temp_array[59],  /* atB.group6  */
   &temp_array[60],  /* atB.group7  */
   &temp_array[61],  /* atB.group8  */
   &temp_array[62],  /* atB.group9  */
   &temp_array[63],  /* atB.group10 */
   &temp_array[43],  /* automode    */
   &temp_array[27],  /* atW         */
   &temp_array[28],  /* valueX      */
   &temp_array[52],  /* v32_retrain */
   &temp_array[80],  /* andF        */
   &temp_array[81],  /* andI        */
   &temp_array[79],  /* andK        */
   &temp_array[70],  /* trellis     */
   &temp_array[30],  /* perA        */
   &temp_array[82],  /* perB        */
   &temp_array[32],  /* perC        */
   &temp_array[33],  /* perE        */
   &temp_array[53],  /* autofallback */
   &temp_array[29],  /* slA         */
   &temp_array[31],  /* slC         */
   &temp_array[34],  /* slG         */
   &temp_array[36],  /* bps_adjust  */
   &temp_array[37],  /* slK         */
   &temp_array[39],  /* slN         */
   &temp_array[40],  /* slQ         */
   &temp_array[18],  /* s[30]       */
   &temp_array[41],  /* slX         */
   &temp_array[44],  /* hyJ         */
   &temp_array[76],  /* hyK         */
   &temp_array[77],  /* hyQ         */
   &temp_array[45],  /* quH         */
   &temp_array[78],  /* quM         */
   &temp_array[46],  /* quO         */
   &temp_array[83],  /* astA        */
   &temp_array[84],  /* ETC hardware */
   &temp_array[74],  /* link_negot  */
   &temp_array[75],  /* prnM        */
   &temp_array[0],   /* s[0]        */
   &temp_array[1],   /* s[2]        */
   &temp_array[2],   /* s[6]        */
   &temp_array[3],   /* s[7]        */
   &temp_array[4],   /* s[8]        */
   &temp_array[5],   /* s[9]        */
   &temp_array[6],   /* s[10]       */
   &temp_array[7],   /* s[11]       */
   &temp_array[8],   /* s[12]       */
   &temp_array[11],  /* s[18]       */
   &temp_array[15],  /* s[25]       */
   &temp_array[16],  /* s[26]       */
   &temp_array[19],  /* s[37]       */
   &temp_array[26],  /* s[112]      */
};

#endif



#ifdef NO_STATIC_INIT

void ac00tab2_init_statics(void)
{
   cr_lf_string[0] = CRLF_ptr;
   cr_lf_string[1] = END_ptr;

/* First line of the profile display */
   current_profile[0] = B1_ptr;
   current_profile[1] = B3_ptr;
   current_profile[2] = B5_ptr;
   current_profile[3] = B6_ptr;
   current_profile[4] = B7_ptr;
   current_profile[5] = B8_ptr;
   current_profile[6] = B9_ptr;
   current_profile[7] = B10_ptr;
   current_profile[8] = E_ptr;
   current_profile[9] = L_ptr;
   current_profile[10] = M_ptr;
   current_profile[11] = N_ptr;
   current_profile[12] = P_ptr;
   current_profile[13] = Q_ptr;
   current_profile[14] = V_ptr;
   current_profile[15] = W_ptr;
   current_profile[16] = X_ptr;
   current_profile[17] = Y_ptr;
   current_profile[18] = CRLF_ptr;

/* Second line of the profile display */
   current_profile[19] = ANDB_ptr;
   current_profile[20] = ANDC_ptr;
   current_profile[21] = ANDD_ptr;
   current_profile[22] = ANDF_ptr;
   current_profile[23] = ANDG_ptr;
   current_profile[24] = ANDI_ptr;
   current_profile[25] = ANDJ_ptr;
   current_profile[26] = ANDK_ptr;
   current_profile[27] = ANDL_ptr;
   current_profile[28] = ANDP_ptr;
   current_profile[29] = ANDQ_ptr;
   current_profile[30] = ANDR_ptr;
   current_profile[31] = ANDS_ptr;
   current_profile[32] = ANDU_ptr;
   current_profile[33] = ANDX_ptr;
   current_profile[34] = ANDY_ptr;
   current_profile[35] = CRLF_ptr;

/* Third line of the profile display */
   current_profile[36] = PERA_ptr;
   current_profile[37] = PERB_ptr;
   current_profile[38] = PERC_ptr;
   current_profile[39] = PERE_ptr;
   current_profile[40] = PERG_ptr;
   current_profile[41] = SLA_ptr;
   current_profile[42] = SLC_ptr;
   current_profile[43] = SLG_ptr;
   current_profile[44] = SLJ_ptr;
   current_profile[45] = SLK_ptr;
   current_profile[46] = SLN_ptr;
   current_profile[47] = SLQ_ptr;
   current_profile[48] = SLT_ptr;
   current_profile[49] = SLV_ptr;
   current_profile[50] = SLX_ptr;
   current_profile[51] = CRLF_ptr;

/* Fourth line of the profile display */
   current_profile[52] = HYJ_ptr;
   current_profile[53] = HYK_ptr;
   current_profile[54] = HYQ_ptr;
   current_profile[55] = QUH_ptr;
   current_profile[56] = QUM_ptr;
   current_profile[57] = QUO_ptr;
   current_profile[58] = ASTA_ptr;
   current_profile[59] = ASTB_ptr;
   current_profile[60] = ASTH_ptr;
   current_profile[61] = PRNM_ptr;
   current_profile[62] = CRLF_ptr;

/* Fifth line of the profile display */
   current_profile[63] = S0_ptr;
   current_profile[64] = S1_ptr;
   current_profile[65] = S2_ptr;
   current_profile[66] = S3_ptr;
   current_profile[67] = S4_ptr;
   current_profile[68] = S5_ptr;
   current_profile[69] = S6_ptr;
   current_profile[70] = S7_ptr;
   current_profile[71] = S8_ptr;
   current_profile[72] = CRLF_ptr;

/* Sixth line of the profile display */
   current_profile[73] = S9_ptr;
   current_profile[74] = S10_ptr;
   current_profile[75] = S11_ptr;
   current_profile[76] = S12_ptr;
   current_profile[77] = S18_ptr;
   current_profile[78] = S25_ptr;
   current_profile[79] = S26_ptr;
   current_profile[80] = S37_ptr;
   current_profile[81] = S112_ptr;
   current_profile[82] = CRLF_ptr;

/* END of the profile display */
   current_profile[83] = CRLF_ptr;
   current_profile[84] = END_ptr;

   current_pro_addr[0] = &atB.group1;
   current_pro_addr[1] = &atB.group3;
   current_pro_addr[2] = &atB.group5;
   current_pro_addr[3] = &atB.group6;
   current_pro_addr[4] = &atB.group7;
   current_pro_addr[5] = &atB.group8;
   current_pro_addr[6] = &atB.group9;
   current_pro_addr[7] = &atB.group10;
   current_pro_addr[8] = &automode;
   current_pro_addr[9] = &atW;
   current_pro_addr[10] = &valueX;
   current_pro_addr[11] = &v32_retrain;
   current_pro_addr[12] = &andF;
   current_pro_addr[13] = &andI;
   current_pro_addr[14] = &andK;
   current_pro_addr[15] = &trellis;
   current_pro_addr[16] = &temp_array[0];
   current_pro_addr[17] = &perA;
   current_pro_addr[18] = &perB;
   current_pro_addr[19] = &perC;
   current_pro_addr[20] = &perE;
   current_pro_addr[21] = &autofallback;
   current_pro_addr[22] = &slA;
   current_pro_addr[23] = &slC;
   current_pro_addr[24] = &slG;
   current_pro_addr[25] = &bps_adjust;
   current_pro_addr[26] = &slK;
   current_pro_addr[27] = &slN;
   current_pro_addr[28] = &slQ;
   current_pro_addr[29] = &s[30];
   current_pro_addr[30] = &slX;
   current_pro_addr[31] = &hyJ;
   current_pro_addr[32] = &hyK;
   current_pro_addr[33] = &hyQ;
   current_pro_addr[34] = &quH;
   current_pro_addr[35] = &quM;
   current_pro_addr[36] = &quO;
   current_pro_addr[37] = &astA;
   current_pro_addr[38] = &astB;
   current_pro_addr[39] = &link_negot;
   current_pro_addr[40] = &prnM;
   current_pro_addr[41] = &s[0];
   current_pro_addr[42] = &s[1];
   current_pro_addr[43] = &s[2];
   current_pro_addr[44] = &s[3];
   current_pro_addr[45] = &s[4];
   current_pro_addr[46] = &s[5];
   current_pro_addr[47] = &s[6];
   current_pro_addr[48] = &s[7];
   current_pro_addr[49] = &s[8];
   current_pro_addr[50] = &s[9];
   current_pro_addr[51] = &s[10];
   current_pro_addr[52] = &s[11];
   current_pro_addr[53] = &s[12];
   current_pro_addr[54] = &s[18];
   current_pro_addr[55] = &s[25];
   current_pro_addr[56] = &s[26];
   current_pro_addr[57] = &s[37];
   current_pro_addr[58] = &s[112];

/* First line of the stored profile display */
   stored_profile[0] = B1_ptr;
   stored_profile[1] = B3_ptr;
   stored_profile[2] = B5_ptr;
   stored_profile[3] = B6_ptr;
   stored_profile[4] = B7_ptr;
   stored_profile[5] = B8_ptr;
   stored_profile[6] = B9_ptr;
   stored_profile[7] = B10_ptr;
   stored_profile[8] = E_ptr;
   stored_profile[9] = L_ptr;
   stored_profile[10] = M_ptr;
   stored_profile[11] = N_ptr;
   stored_profile[12] = P_ptr;
   stored_profile[13] = Q_ptr;
   stored_profile[14] = V_ptr;
   stored_profile[15] = W_ptr;
   stored_profile[16] = X_ptr;
   stored_profile[17] = Y_ptr;
   stored_profile[18] = CRLF_ptr;

/* Second line of the stored profile display */
   stored_profile[19] = ANDB_ptr;
   stored_profile[20] = ANDC_ptr;
   stored_profile[21] = ANDD_ptr;
   stored_profile[22] = ANDF_ptr;
   stored_profile[23] = ANDG_ptr;
   stored_profile[24] = ANDI_ptr;
   stored_profile[25] = ANDJ_ptr;
   stored_profile[26] = ANDK_ptr;
   stored_profile[27] = ANDL_ptr;
   stored_profile[28] = ANDP_ptr;
   stored_profile[29] = ANDQ_ptr;
   stored_profile[30] = ANDR_ptr;
   stored_profile[31] = ANDS_ptr;
   stored_profile[32] = ANDU_ptr;
   stored_profile[33] = ANDX_ptr;
   stored_profile[34] = CRLF_ptr;

/* Third line of the stored profile display */
   stored_profile[35] = PERA_ptr;
   stored_profile[36] = PERB_ptr;
   stored_profile[37] = PERC_ptr;
   stored_profile[38] = PERE_ptr;
   stored_profile[39] = PERG_ptr;
   stored_profile[40] = SLA_ptr;
   stored_profile[41] = SLC_ptr;
   stored_profile[42] = SLG_ptr;
   stored_profile[43] = SLJ_ptr;
   stored_profile[44] = SLK_ptr;
   stored_profile[45] = SLN_ptr;
   stored_profile[46] = SLQ_ptr;
   stored_profile[47] = SLT_ptr;
   stored_profile[48] = SLV_ptr;
   stored_profile[49] = SLX_ptr;
   stored_profile[50] = CRLF_ptr;

/* Fourth line of the stored profile display */
   stored_profile[51] = HYJ_ptr;
   stored_profile[52] = HYK_ptr;
   stored_profile[53] = HYQ_ptr;
   stored_profile[54] = QUH_ptr;
   stored_profile[55] = QUM_ptr;
   stored_profile[56] = QUO_ptr;
   stored_profile[57] = ASTA_ptr;
   stored_profile[58] = ASTB_ptr;
   stored_profile[59] = ASTH_ptr;
   stored_profile[60] = PRNM_ptr;
   stored_profile[61] = CRLF_ptr;

/* Fifth line of the stored profile display */
   stored_profile[62] = S0_ptr;
   stored_profile[63] = S2_ptr;
   stored_profile[64] = S6_ptr;
   stored_profile[65] = S7_ptr;
   stored_profile[66] = S8_ptr;
   stored_profile[67] = S9_ptr;
   stored_profile[68] = S10_ptr;
   stored_profile[69] = S11_ptr;
   stored_profile[70] = CRLF_ptr;

/* Sixth line of the stored profile display */
   stored_profile[71] = S12_ptr;
   stored_profile[72] = S18_ptr;
   stored_profile[73] = S25_ptr;
   stored_profile[74] = S26_ptr;
   stored_profile[75] = S37_ptr;
   stored_profile[76] = S112_ptr;
   stored_profile[77] = CRLF_ptr;

/* End line of the stored profile display */
   stored_profile[78] = CRLF_ptr;
   stored_profile[79] = END_ptr;

   stored_pro_addr[0] = &temp_array[54];  /* atB.group1  */
   stored_pro_addr[1] = &temp_array[56];  /* atB.group3  */
   stored_pro_addr[2] = &temp_array[58];  /* atB.group5  */
   stored_pro_addr[3] = &temp_array[59];  /* atB.group6  */
   stored_pro_addr[4] = &temp_array[60];  /* atB.group7  */
   stored_pro_addr[5] = &temp_array[61];  /* atB.group8  */
   stored_pro_addr[6] = &temp_array[62];  /* atB.group9  */
   stored_pro_addr[7] = &temp_array[63];  /* atB.group10 */
   stored_pro_addr[8] = &temp_array[43];  /* automode    */
   stored_pro_addr[9] = &temp_array[27];  /* atW         */
   stored_pro_addr[10] = &temp_array[28];  /* valueX      */
   stored_pro_addr[11] = &temp_array[52];  /* v32_retrain */
   stored_pro_addr[12] = &temp_array[80];  /* andF        */
   stored_pro_addr[13] = &temp_array[81];  /* andI        */
   stored_pro_addr[14] = &temp_array[79];  /* andK        */
   stored_pro_addr[15] = &temp_array[70];  /* trellis     */
   stored_pro_addr[16] = &temp_array[30];  /* perA        */
   stored_pro_addr[17] = &temp_array[82];  /* perB        */
   stored_pro_addr[18] = &temp_array[32];  /* perC        */
   stored_pro_addr[19] = &temp_array[33];  /* perE        */
   stored_pro_addr[20] = &temp_array[53];  /* autofallback */
   stored_pro_addr[21] = &temp_array[29];  /* slA         */
   stored_pro_addr[22] = &temp_array[31];  /* slC         */
   stored_pro_addr[23] = &temp_array[34];  /* slG         */
   stored_pro_addr[24] = &temp_array[36];  /* bps_adjust  */
   stored_pro_addr[25] = &temp_array[37];  /* slK         */
   stored_pro_addr[26] = &temp_array[39];  /* slN         */
   stored_pro_addr[27] = &temp_array[40];  /* slQ         */
   stored_pro_addr[28] = &temp_array[18];  /* s[30]       */
   stored_pro_addr[29] = &temp_array[41];  /* slX         */
   stored_pro_addr[30] = &temp_array[44];  /* hyJ         */
   stored_pro_addr[31] = &temp_array[76];  /* hyK         */
   stored_pro_addr[32] = &temp_array[77];  /* hyQ         */
   stored_pro_addr[33] = &temp_array[45];  /* quH         */
   stored_pro_addr[34] = &temp_array[78];  /* quM         */
   stored_pro_addr[35] = &temp_array[46];  /* quO         */
   stored_pro_addr[36] = &temp_array[83];  /* astA        */
   stored_pro_addr[37] = &temp_array[84];  /* ETC hardware */
   stored_pro_addr[38] = &temp_array[74];  /* link_negot  */
   stored_pro_addr[39] = &temp_array[75];  /* prnM        */
   stored_pro_addr[40] = &temp_array[0];   /* s[0]        */
   stored_pro_addr[41] = &temp_array[1];   /* s[2]        */
   stored_pro_addr[42] = &temp_array[2];   /* s[6]        */
   stored_pro_addr[43] = &temp_array[3];   /* s[7]        */
   stored_pro_addr[44] = &temp_array[4];   /* s[8]        */
   stored_pro_addr[45] = &temp_array[5];   /* s[9]        */
   stored_pro_addr[46] = &temp_array[6];   /* s[10]       */
   stored_pro_addr[47] = &temp_array[7];   /* s[11]       */
   stored_pro_addr[48] = &temp_array[8];   /* s[12]       */
   stored_pro_addr[49] = &temp_array[11];  /* s[18]       */
   stored_pro_addr[50] = &temp_array[15];  /* s[25]       */
   stored_pro_addr[51] = &temp_array[16];  /* s[26]       */
   stored_pro_addr[52] = &temp_array[19];  /* s[37]       */
   stored_pro_addr[53] = &temp_array[26];  /* s[112]      */

}

#endif
