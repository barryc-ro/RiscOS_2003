/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00onat.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains action routines for the ONLINE
/                       state of type AT_PSTN.
/
/     Product:          ACU core code
/
/     History:          ac00sys.c v3.92
/                       ac00onat.c v3.93
/                       ac00onat.c v3.94
/                       ac00onat.c v3.96
/
/        Created:       11/16/91
/                       1/21/92
/                       3/10/92
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"

void proc_online_at(void);
void online_pstn_bg(void);
void pstn_status_check(void);
void online_pstn_retrain(void);
void online_at_DTR_off(void);
void online_at_RTS_on(void);
void online_at_RTS_off(void);
void online_chk_char(void);
void online_pstn_idle(void);
void online_at_esc(void);

/*******************************************************************************
/
/     Routine:       proc_online_at
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the ONLINE
/                    state of type AT_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_state, acu_proc
/
/     Users: proc_online
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_online_at(void)
{
   acu_state = st_online_at[acu_event->type].new_state;
   acu_proc = st_online_at[acu_event->type].fnc_ptr;
}

/*******************************************************************************
/
/     Routine:       online_pstn_bg
/
/     Author:        RSA
/
/     Creation Date: 06/24/91
/
/     Description:   This Routine will process the background functions for
/                    the ONLINE state of type AT_PSTN and V25_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  long_space_disconnect
/
/     Users: proc_online
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_pstn_bg(void)
{
   if (escape_received)
   {
      build_event(E_ESC_RXD,UNUSED);
      escape_received = FALSE;
   }

   /* Hang up if long space disconnect sequence was enabled and detected */
   if (long_space_disconnect == TRUE)
   {
      if ((operating_mode != RELIABLE) && (sr21.long_space_discon))
         build_event(E_HANGUP,NO_CARRIER);
      else
         long_space_disconnect = FALSE;
   }
   /*   Else check for disconnect tones received from the PSTN.
      Check not valid for V.23 modes because the 75 bps channel
      uses the 400 hz band we are trying to detect */
   else if ((modem_mode != V23_ADX) && (modem_mode != V23_HDX))
   {
      if (detect_disconnect_tone)
      {
         if (modem_call_progress() == TONE_DISCONNECT)
         {
            build_event(E_HANGUP,NO_CARRIER);
            tone_disconnect = TRUE;
         }
      }
   }
}


/*******************************************************************************
/
/     Routine:       pstn_status_check
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to evaluate the status returned
/                    from the error correcting code.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  operating_mode
/
/     Users:   st_online_at[], st_idle_online[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pstn_status_check(void)
{
   ubyte ptr[SYSTEM_INFO_SIZE];

   switch (system_status)
   {
       case V42_MNP:
       case V42_LAPM:
       case V42_SPEED:
           slU = FALSE;

           /* If MNP connection need to reconfigure incase \O or \Y so that
               retry_limit is 12 instead of 2   */
           if (system_status == V42_MNP)
               system_reconfigure();

           if (system_status == V42_SPEED)
           {
               if (slZ == TRUE)
               {
                   slZ = FALSE;
                   system_start(CONTINUE);
               }
               operating_mode = NORMAL;
               modem_ec_led(OFF);
               modem_dc_led(OFF);
               modem_rdl_enable((ubyte)sr23.grant_rdl);

/* start change keh 6/25/96 => id#138 */
               /* If the line speed changed from the initial link during
                   V.42 detection, reconfigure the line now for proper
                   speed matching operation */
               ptr[0] = modem_baud;
/* start change keh 11/7/96 => defect#238 => V.23 links fail to pass data */
/*               modem_baud = modem_get_baud_rate(); */
               /* Update acu's modem rate status, and if it's changed,
                   reset the line driver code */
               get_modem_baud_and_mode();
/* end change keh 11/7/96 => defect#238 => V.23 links fail to pass data */
               if (ptr[0] != modem_baud)
               {
                   system_set_line_baud();
               }
/* end change keh 6/25/96 => id#138 */
           }
           /* Else MNP or LAPM is running */
           else
           {
               /* Turn on the error-correction LED */
               modem_ec_led(ON);

               /* Disable remote loopback tests */
               modem_rdl_enable(DISABLED);
           }

           build_event(E_MSG,CONNECT_XXXX);

           system_info((ubyte *)&ptr[0]);
/* start change keh 6/28/96 => id#138 mnp10 set in fallbacks after LR fails */
           v42_running_mnp10 = ptr[OFFSET_NEGOT_MNP10];
/* end change keh 6/28/96 => id#138 mnp10 set in fallbacks after LR fails */
           /* Update the line baud rate in case MNP 10 has changed it */
           if (v42_running_mnp10)
           {
               modem_baud = ptr[OFFSET_LINE_BAUD];
           }
           /* Else correct pump speeds after MNP10 attempts */
           else
           {
               /* MNP10 *H command may effect some data pump rate maps */
               switch (link_negot)
               {
                   case CONNECT_1200BPS:
                   case CONNECT_4800BPS:
                       update_modem_rate_seq();
                       break;
               }
           }

           if (v25bis_active)
               modem_dte_cts(ON);

           if (ptr[OFFSET_COMPRESSION])
               modem_dc_led(ON);
           break;

       case V42_IDLING:
           build_event(E_IDLE,UNUSED);
           break;

       case V42_DISCONNECTING:
           enable_acu_on_terminal();
           break;

       case V42_HALTED:
           if (slZ == TRUE)
           {
               system_init();
               system_start(ANSWER);
               return;
           }
           if (delay_before_hangup == TRUE)
           {
               delay_before_hangup = FALSE;
           }
           else
               build_event(E_HANGUP,NO_CARRIER);
           break;

       case V42_CONNECTING:
           break;

       default:
           build_event(E_HANGUP,NO_CARRIER);
           break;
   }
}


/*******************************************************************************
/
/     Routine:       online_pstn_retrain
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called tell the ACU that the modem is
/                    retraining.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_retrain.state, st_retrain.type
/
/     Users:   st_online_at[], at_idle_online[], st_online_v25[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_pstn_retrain(void)
{
   st_retrain.state = S_RETRAIN;
   st_retrain.type = AT_PSTN;

   if (operating_mode == DIRECT)
      modem_dte_cts(OFF);
}

/*******************************************************************************
/
/     Routine:       online_at_DTR_off
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event of DTR dropping while
/                    in the ONLINE state of type AT_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_online_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_at_DTR_off(void)
{
   /* DTR has toggled to off, check for any action that needs to be taken
      based on &D setting */
   if (dtr_timer1sec == 0)
   {
      if (sr21.DTR_control == 3)
      {
         build_event(E_RESET,UNUSED);
         return;
      }

      if ((sr21.DTR_control == 1) && ((comm_mode == ASYNC) || (comm_mode == SYNC_NORMAL)))
      {
         if (operating_mode != DIRECT)
            system_idle();
         else
            build_event(E_IDLE,UNUSED);
      }

      if ((sr21.DTR_control == 2) || ((comm_mode == SYNC_DTR) || (comm_mode == SYNC_TALK))
         || ((sr21.DTR_control == 0) && (comm_mode == SYNC_NORMAL)))
      {
         hangup_connection(OK);
         user_initiated_hangup = TRUE;
         acu_cntrld_hangup = FALSE;
      }
   }
}

/*******************************************************************************
/
/     Routine:       online_at_RTS_on
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event of RTS rising while
/                    in the ONLINE state of type AT_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  CTS_up_flag, CTS_turn_on_flag, cts_timer
/
/     Users: st_online_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_at_RTS_on(void)
{
   if (dtr_timer1sec == 0)
   {
      /* If &R1 is selected then CTS is always on   */
      if (sr21.CTS_on == TRUE)
      {
         if (operating_mode == DIRECT)
            modem_dte_cts(ON);
      }
      /* Else if &R0 and &Q1 - &Q4 is selected then CTS will follow RTS   */
      else
      {
         if (comm_mode != ASYNC)
         {
            if (CTS_turn_on_flag == TRUE)
            {
               if (CTS_up_flag == FALSE)
               {
                  CTS_up_flag = TRUE;

                  /* If S26 = 0 immediately turn on CTS */
                  if (s[26] == 0)
                  {
                     modem_dte_cts(ON);
                     CTS_turn_on_flag = FALSE;
                  }
                  else
                     cts_timer = s[26];
               }
               else
               {
                  if (cts_timer == 0)
                  {
                     modem_dte_cts(ON);
                     CTS_turn_on_flag = FALSE;
                  }
               }
            }
         }
      }
   }
}

/*******************************************************************************
/
/     Routine:       online_at_RTS_off
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event of RTS dropping while
/                    in the ONLINE state of type AT_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  CTS_up_flag, CTS_turn_on_flag
/
/     Users: st_online_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_at_RTS_off(void)
{
   if (dtr_timer1sec == 0)
   {
      if (comm_mode != ASYNC)
      {
         if ((cts_timer == 0) && (CTS_up_flag == TRUE))
         {
            modem_dte_cts(OFF);
            CTS_up_flag = FALSE;
            CTS_turn_on_flag = TRUE;
         }
      }
   }
}

/*******************************************************************************
/
/     Routine:       online_check_char
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event of keyboard abort while
/                    V.42 is connecting.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_online_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_chk_char(void)
{
   /* Abort connection if character is received   */
   if (system_status == V42_CONNECTING)
   {
      system_reset();
      build_event(E_HANGUP,NO_CARRIER);
   }
}

/*******************************************************************************
/
/     Routine:       online_pstn_idle
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the state change from ONLINE
/                    AT_PSTN to IDLE AT_ONLINE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_idle.state, st_idle.type, CTS_up_flag
/               CTS_turn_on_flag, reconfigure, on_line_command
/
/     Users: st_online_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_pstn_idle(void)
{
   /* If direct need to switch the data path */
   if (operating_mode == DIRECT)
      modem_serial_direct(NORMAL);

   /* Switch the DTE interrupts back to the ACU */
   if (acu_event->parm == UNUSED)
   {
      enable_acu_on_terminal();
      st_idle.state = S_IDLE;
      st_idle.type = AT_ONLINE;
      build_event(E_MSG,OK);
   }

   /* Need to turn CTS back on */
   CTS_up_flag = TRUE;
   CTS_turn_on_flag = FALSE;
   modem_dte_cts(ON);
   reconfigure = FALSE;
   on_line_command = TRUE;
}


/*******************************************************************************
/
/     Routine:       online_at_esc
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event of the escape sequence
/                    being detected while online.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:         st_online_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_at_esc(void)
{
   if (operating_mode != DIRECT)
      system_idle();
   else
      build_event(E_IDLE,UNUSED);
}

