/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00ordl.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for dialing a number.
/
/     Product:          ACU core code
/
/     History:          ac00ordl.c v3.90
/                       ac00ordl.c v3.91
/
/        Created:       11/16/91
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"

void orig_wait_for_dialtone(void);
void originate_dial(void);
void tone_char(ubyte ch);
void pulse_char(ubyte ch);
ubyte wait_for_digit(void);
ubyte quiet_answer(void);
void build_stored_dial_string(void);
ubyte wait_for_tone(void);
void flash(void);
ubyte wait_for_flash(void);
void process_modifiers(void);

/*******************************************************************************
/
/     Routine:       orig_wait_for_dialtone
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called while the ACU is waiting to
/                    detect dialtone. If detected the ACU will continue dialing,
/                    if not then the ACU will hang up.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_orig.state, timer2
/
/     Users: orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wait_for_dialtone(void)
{
   ubyte type;

   if (timer1)
   {
      type = modem_call_progress();
      if (type == DIALTONE)
      {
         if (timer2 == 0)
         {
            modem_config_dtmf_dial(s[11],s[11]);
            st_orig.state = ORIG_DIAL;
            return;
         }
      }
      else
         timer2 = length_of_dialtone;
   }
   else
      build_event(E_HANGUP,NO_DIALTONE);
}


/*******************************************************************************
/
/     Routine:       originate_dial
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called to perform any dialing function
/                    needed.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  sr14.pulse, timer2, timer1, look_for_signal
/                    at_orig.state, modifier_type, return_to_idle
/                    valid_char, R_mode, dial_J, dial_K
/
/     Users: orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void originate_dial(void)
{
   ubyte ch;

   if (timer3 == 0)   /* remainder of billing delay */
   {
      if (valid_char)
      {
         ch = *acu_dial_string_ptr++;
         switch (ch)
         {
            case '*':
            case 'B':
            case 'C':
            case 'D':
            case '#':
            case 'A':
               if (sr14.pulse)
                  break;

            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
               if (sr14.pulse)
                  pulse_char(ch);
               else
                  tone_char(ch);
               break;

            case 'T':   /* Tone dial */
               sr14.pulse = FALSE;
               modem_shrt_relay(OFF);
               break;

            case 'P':   /* Pulse dial */
               sr14.pulse = TRUE;
               break;

            case '@':  /* Quiet Answer */
               timer1 = (s[7] * 100);
               timer2 = 0;
               look_for_signal = TRUE;
               line_signal_seen = FALSE;
               modem_shrt_relay(OFF);
               modem_init_call_progress(OFF_HOOK_DIALED);
               st_orig.state = PROCESS_DIAL_MOD;
               modifier_type = QUIET_ANSWER;
               break;

            case '!':   /* Hook flash */
               flash();
               break;

            case ',':   /* Pause */
               timer1 = (dial_pause_time * 100);
               st_orig.state = PROCESS_DIAL_MOD;
               modifier_type = PAUSE;
               break;

            case 'R':   /* Reverse mode */
               R_mode = TRUE;
               break;

            case 'S':   /* Dial stored number */
               /* Modify "acu_dial_string_ptr" to point to a
                  number stored in EEPROM */
               build_stored_dial_string();
               break;

            case 'W':   /* Wait for tone */
               timer1 = (s[7] * 100);
               timer2 = 0;
               look_for_signal = TRUE;
               modem_shrt_relay(OFF);
               modem_init_call_progress(OFF_HOOK_DIALED);
               st_orig.state = PROCESS_DIAL_MOD;
               modifier_type = WAIT_TONE;
               break;

            case ';':   /* Return to idle */
               return_to_idle = TRUE;
               valid_char = FALSE;
               break;

            case 'J':   /* MNP10 J modifier (Connect at 1200) */
               dial_J = TRUE;
               break;

            case 'K':   /* MNP10 K modifier (Cellular mode) */
               dial_K = TRUE;
               break;

            case '\0':  /* End of dial string */
               valid_char = FALSE;
               break;
         } /* switch */
      }
      else
      {
         modem_shrt_relay(OFF);

         /* No Modem action for phone mode */
         if (st_orig.type == PSTN_PHONE)
         {
            build_event(E_CONNECT,UNUSED);
         }
         else if (R_mode)
         {
            R_mode = FALSE;
            build_event(E_ANSW,UNUSED);
         }
         else if (return_to_idle)
         {
            return_to_idle = FALSE;
            timer1 = 0;
            build_event(E_PARSE,UNUSED);
            send_ok = TRUE;
         }
         else
            st_orig.state = INIT_MODEM_ORIG;

         if (sr22.speaker_ctrl == OFF_DIALING)
            modem_speaker(ON);
      }
   }
}


/*******************************************************************************
/
/     Routine:       tone_char
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called to tone dial the selected
/                    character.
/
/     Input Parameters: ubyte ch - character to be dialed
/
/     Output Parameters: none
/
/     Global Variables Changed:  dial_timer
/
/     Users: originate_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void tone_char(ubyte ch)
{
   /* Start DTMF tone generation at the physical level */
   modem_tone_on(ch);
   dial_flag = TRUE;      /* Flag denoting that DTMF is ON */
   dial_timer = s[11];    /* Tone-on time */

   /* Use "dial modifier" sub-state to wait until the entire tone is
      generated AND until an equal delay of tone-off has passed */
   st_orig.state = PROCESS_DIAL_MOD;
   modifier_type = DIAL_DIGIT_WAIT;
}


/*******************************************************************************
/
/     Routine:       pulse_char
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called to pulse dial a selected
/                    character.
/
/     Input Parameters: ubyte ch - character to be dialed
/
/     Output Parameters: none
/
/     Global Variables Changed:  dial_timer, timer1
/
/     Users: originate_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pulse_char(ubyte ch)
{
   /* Set hold relay */
   modem_shrt_relay(ON);

   /* The '0' digit is 10 pulses */
   if (!(number_of_pulses = ch - '0'))
      number_of_pulses = 10;

   /* Use "dial modifier" sub-state to wait until the entire pulse is
      generated AND until an equal amount of post pulse delay has passed */
   st_orig.state = PROCESS_DIAL_MOD;
   modifier_type = DIAL_DIGIT_WAIT;

   /* Background flag denoting the pulse required is ON */
   dial_flag = TRUE;
}

/*******************************************************************************
/
/     Routine:       wait_for_digit
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to perform background timing
/                    on TONE and PULSE dialed digits.
/
/     Input Parameters: none
/
/     Output Parameters: 0 (FALSE) digit not finished, otherwise finished.
/
/     Global Variables Changed:  dial_timer, number_of_pulses,dial_flag
/
/     Users: orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte wait_for_digit(void)
{
   if (!dial_timer)
   {
      /* First test for PULSE dialing delays */
      if (sr14.pulse)
      {
         /* A pulse consists of on/off-hook sequence "n" times.  Where
            "n" is the digit number */
         /* Any pulses left in the digit? */
         if (number_of_pulses)
         {
            /* On-hook sequence? */
            if (dial_flag)
            {
               on_hook();
               dial_timer = break_time;
               dial_flag = FALSE;
            }
            /* Else Off-hook sequence */
            else
            {
               off_hook();
               dial_timer = make_time;
               dial_flag = TRUE;
               number_of_pulses--;
            }
         }
         /* Else no pulses left in the digit so time the interdigit
            delay time */
         else
         {
            /* Interdigit delay still running? */
            if (dial_flag)
            {
               /*   Reuse the dial timer (8bit, 10 msec) to time
                  the 750 (3 x 250) msec interdigit delay */
               dial_timer = 250;
               /* Set delay complete flag after 750 msecs */
               if (dial_flag >= 3)
                  dial_flag = FALSE;
               else
                  dial_flag++;
            }
            /* Else the interdigit delay is complete, so return to the
               main dialing state */
            else
            {
               return TRUE;
            }
         }
      }
      /* Else TONE dialing */
      else
      {
         /* If the tone was ON */
         if (dial_flag)
         {
            /* The tone was on, so turn the tone off, and wait an
               equal amount of tone-off time */
            modem_tone_off();
            dial_timer = s[11];
            /* Set tone-off flag */
            dial_flag = FALSE;
         }
         /* Else the tone was OFF */
         else
         {
            /* The tone off time has expired, so return to the
               main dial state */
            return TRUE;   /* Digit timing is complete */
         }
      }
   }

   return FALSE;   /* Digit timing not complete */
}

/*******************************************************************************
/
/     Routine:       quiet_answer
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called to process the wait for quiet
/                    answer dial modifier '@'.
/
/     Input Parameters: None
/
/     Output Parameters: ubyte   TRUE - if quiet answer was detected
/                                FALSE - If not detected
/
/     Global Variables Changed:  timer2, look_for_signal
/
/     Users: originate_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte quiet_answer(void)
{
   ubyte type;

   /* Silence was not detected within S7 seconds */
   if (!timer1)
   {
      build_event(E_HANGUP,NO_ANSWER);
      return (FALSE);
   }

   /* Get CP from modem task */
   type = modem_call_progress();

   /* Always check for BUSY first */
   if (type == BUSY_SIGNAL)
   {
      build_event(E_HANGUP,BUSY);
   }
   /* Else look for any other Call Progress signal to start the timer */
   else if (!line_signal_seen)
   {
      if ((type == LINE_SIGNAL) || (type == RINGBACK))
      {
         line_signal_seen = TRUE;
         /* Reuse "look_for_signal" as quiet timer started flag */
         look_for_signal = FALSE;
      }
   }
   /* Else wait for 5 secs of Quiet */
   else
   {
      if ((type == SILENCE) || (type == NO_ANSWER_TONE))
      {
         /* Reuse "look_for_signal" as quiet timer started flag */
         /* If first time silence is detected set up for the 5 sec. wait */
         if (!look_for_signal)
         {
            timer2 = mod_quiet_answ_length;
            look_for_signal = TRUE;
         }
         /* If silence is qualified */
         else if (!timer2)
         {
            return (TRUE);
         }
      }
      /* Else reset silence timer */
      else
      {
         look_for_signal = FALSE;
      }
   }

   return (FALSE);
}


/*******************************************************************************
/
/     Routine:       dial_stored_num
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine dials a number stored by the &Zn command.
/                    The number is determined by the S=n dial modifier.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: originate_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void build_stored_dial_string(void)
{
   ubyte *string;
   uword address = 0;
   ubyte error = FALSE;

   /* Determine which stored number to dial.
      The AT command has the form: "S=n", but the "S" has already
      been determined by originate_dial()
   */
   /* First test ATDS case (implies num 0)*/
   if (*acu_dial_string_ptr == '\0')
   {
      address = TELE_NUMBER_0_ADD;
   }
   /* Then parse for any '=' */
   else if (*acu_dial_string_ptr == '=')
   {
      /* Get char after the '=' */
      switch (*++acu_dial_string_ptr)
      {
         case NULL:  /* ATDS= defaults to zero */
         case '0':   /* ATDS=0 */
            address = TELE_NUMBER_0_ADD;
            break;

         case '1':   /* ATDS=1 */
            address = TELE_NUMBER_1_ADD;
            break;

         case '2':   /* ATDS=2 */
            address = TELE_NUMBER_2_ADD;
            break;

         case '3':   /* ATDS=3 */
            address = TELE_NUMBER_3_ADD;
            break;

         default:
            error = TRUE;
            break;
      } /* switch */
   }
   else
   {
      error = TRUE;
   }

   /* If no parse error, get stored number from EEPROM */
   if (!error)
   {
      /* Use the temp array for storeage */
      string = (ubyte *)&temp_array[0];

      /* Get stored number from the eeprom */
      error = modem_read_data(address,TELE_NUMBER_SIZE,string);

      /* If no EEPROM read error, continue */
      if (!error)
      {
         /* Force EndOfString char */
         temp_array[TELE_NUMBER_SIZE] = '\0';

         /* Echo the number to the Terminal */
         output_info(string,STORED_NUM);

         /* Move the dial string to the stored number */
         acu_dial_string_ptr = string;
      }
   }

   /* Any dial error results in hangup */
   if (error)
      build_event(E_HANGUP,ERROR);
}

/*******************************************************************************
/
/     Routine:       wait_for_tone
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called to process the wait for dial tone
/                    dial modifier 'W'.
/
/     Input Parameters: None
/
/     Output Parameters: ubyte   TRUE  - dial tone was detected
/                                FALSE - dial tone was not detected
/
/     Global Variables Changed:  timer2, look_for_signal
/
/     Users: originate_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte wait_for_tone(void)
{
   ubyte type;

   /* Wait for time specified in S7   */
   if (timer1)
   {
      type = modem_call_progress();
      if (type == BUSY_SIGNAL)
      {
         build_event(E_HANGUP,BUSY);
         return (FALSE);
      }
      else if (type == DIALTONE)
      {
         if (timer2 == 0)
         {
            /* If first time dialtone is detected then set up for
               the 3 second wait   */
            if (look_for_signal)
            {
               timer2 = mod_dialtone_length;
               look_for_signal = FALSE;
            }
            /* Else dialtone detection is valid   */
            else
               return (TRUE);
         }
      }
      /* If dialtone is not detected within the 3 seconds then wait again   */
      else
      {
         timer2 = 0;
         look_for_signal = TRUE;
      }
   }
   /* Dialtone was not detected within S7 seconds   */
   else
      build_event(E_HANGUP,NO_DIALTONE);

   return (FALSE);
}


/*******************************************************************************
/
/     Routine:       flash
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called to process the flash '!' dial
/                    modifier.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  timer1
/
/     Users: originate_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void flash(void)
{
   /* Start the falsh sequence (on- then off-hook) now, and do the
      timing in the orig_pstn_bg() */
   on_hook();
   timer1 = flash_time;
   dial_flag = TRUE;

   /* Set orig_pstn_bg to time the flash in the background */
   st_orig.state = PROCESS_DIAL_MOD;
   modifier_type = DIAL_FLASH_WAIT;
}


/*******************************************************************************
/
/     Routine:       wait_for_flash
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to perform background timing
/                    for hook flashes
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  timer1, dial_flag
/
/     Users: orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte wait_for_flash(void)
{
   /* A FLASH consists of on/off-hook sequence.  This routine times the
      on-hook delay (done by flash()), returns the hook back off, times
      the off-hook delay, and returns to TRUE to indicate flash is complete */
   /* Flash time complete? */
   if (!timer1)
   {
      /* Currently on-hook? */
      if (dial_flag)
      {
         off_hook();
         timer1 = flash_time;
         dial_flag = FALSE;
      }
      /* Else currently off-hook, so flash is complete */
      else
      {
         return TRUE; /* Flash complete */
      }
   } /* timer1 time-out */

   return FALSE;   /* Flash not complete */
}


/*******************************************************************************
/
/     Routine:       process_modifiers
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called to process any dial modifiers that
/                    will take time to process.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_orig.state
/
/     Users:  orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void process_modifiers(void)
{
   switch (modifier_type)
   {
      case WAIT_TONE:
         if (wait_for_tone())
            st_orig.state = ORIG_DIAL;
         break;

      case PAUSE:
         if (timer1 == 0)
            st_orig.state = ORIG_DIAL;
         break;

      case QUIET_ANSWER:
         if (quiet_answer())
            st_orig.state = ORIG_DIAL;
         break;

      case DIAL_DIGIT_WAIT:
         /* When the dial timer times-out, change back to
            dialing digit state */
         if (wait_for_digit())
            st_orig.state = ORIG_DIAL;
         break;

      case DIAL_FLASH_WAIT:
         /* When the dial timer times-out, change back to
            dialing digit state */
         if (wait_for_flash())
            st_orig.state = ORIG_DIAL;
         break;
   }
}

