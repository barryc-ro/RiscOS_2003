/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00lib4.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the misc Routines for the ACU code
/
/     Product:          ACU core code
/
/     History:          ac00lib4.c v3.90
/                       ac00lib4.c v3.91
/                       ac00lib4.c v3.92
/                       ac00lib4.c v3.94
/                       ac00lib4.c v3.96
/                       ac00lib4.c v4.02
/
/        Created:       10/7/91
/                       10/21/91
/                       12/04/91
/                       3/10/91
/                       1/12/93
/                       12/12/94
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "v25_pro.h"
#include "ll_pro.h"
#include "fp_pro.h"
#include "acu_vce.h"
#include "acu_epro.h"           /* ACU ETC Driver interface prototypes */

void output_result(ubyte);
void output_result_message(ubyte,ubyte);
void process_acu_timer(void);
void check_char_rcvd(void);
void fp_mode_led_on(void);
void fp_mode_led_off(void);
ubyte translate_modem_mode(ubyte);
void check_modem_status(void);

/*******************************************************************************
/
/     Routine:       output_result
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to out put a result message to the
/            terminal.  It will decide what messages are to be sent
/            and it will send them to output_result_message to place
/            then on the DTE.
/
/     Input Parameters: ubyte type  - type of result message to be sent
/                    0  - OK
/                    1  - CONNECT
/                    2  - RING
/                    3  - NO CARRIER
/                    4  - ERROR
/                    5  - CONNECT 1200
/                    6  - NO DIALTONE
/                    7  - BUSY
/                    8  - NO ANSWER
/                    9  - CONNECT 0600
/                    10 - CONNECT 2400
/                    11 - CONNECT 4800
/                    12 - CONNECT 9600
/                    13 - NONE
/                    14 - CONNECT 19200
/                    15 - CONNECT XXXX
/                    16 - CARRIER XXXX
/                    17 to 24 - Reserved
/
/                    25 - CONNECT 75/1200
/                    26 - CONNECT 1200/75
/                    27 - Reserved
/                    28 - CONNECT 38400
/                    28 to 39 - Reserved
/
/                    40 - CARRIER 300
/                    41 - Reserved
/                    42 - CARRIER 75/1200
/                    43 - CARRIER 1200/75
/                    44 - Reserved
/                    45 - Reserved
/                    46 - CARRIER 1200
/                    47 - CARRIER 2400
/                    48 - CARRIER 4800
/                    49 - Reserved
/                    50 - CARRIER 9600
/                    51 - CARRIER 12000
/                    52 - CARRIER 14400
/                    53 - CARRIER 16800
/                    54 - CARRIER 19200
/                    55 - CARRIER 21600
/                    56 - CARRIER 24000
/                    57 - CARRIER 26400
/                    58 - CARRIER 28800
/                    59 - CONNECT 16800
/                    61 - CONNECT 21600
/                    62 - CONNECT 24000
/                    63 - CONNECT 26400
/                    64 - CONNECT 28800
/                    65 - Reserved
/                    66 - COMPRESSIION_MNP5
/                    67 - COMPRESSIION_V42BIS
/                    68 - Reserved
/                    69 - COMPRESSIION_NONE
/                    70 - PROTOCOL NONE
/                    71 to 76 - Reserved
/                    77 - PROTOCOL LAP_M
/                    78 - PROTOCOL LAP_M/ETC
/                    79 - Reserved
/                    80 - PROTOCOL MNP
/                    81 - PROTOCOL MNP2
/                    82 - PROTOCOL MNP3
/                    83 - PROTOCOL MNP4
/                    84 - Reserved
/                    85 - RING_BACK
/                    86 - CONNECT 57600
/                    87 - CONNECT 115200
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   execute_cmd
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void output_result(ubyte type)
{
   ubyte ptr[SYSTEM_INFO_SIZE];
   ubyte tmp_byte;
   ubyte arq_en;

   modem_serial_direct(NORMAL);
   modem_serial_echo(OFF);
   set_parms(acu_data_bits,acu_parity,acu_stop_bits);

   arq_en = NONE;

   /* Output CARRIER message */
   if (type == CARRIER_XXXX)
   {
      if (((sr95.carrier) || (atW == 1)) && (sr22.enable_result5))
      {
         switch (modem_baud)          /* DCE Speed */
         {
            case BPS300:
               type = CARRIER_300;
               break;

            case BPS600:
               type = CARRIER_600;
               break;

            case BPS1200_75:
               type = CARRIER_1200_75;
               break;

            case BPS75_1200:
               type = CARRIER_75_1200;
               break;

            case BPS1200:
               type = CARRIER_1200;
               break;

            case BPS2400:
               type = CARRIER_2400;
               break;

            case BPS4800:
               type = CARRIER_4800;
               break;

            case BPS9600:
               type = CARRIER_9600;
               break;

            case BPS7200:
               type = CARRIER_7200;
               break;

            case BPS12000:
               type = CARRIER_12000;
               break;

            case BPS14400:
               type = CARRIER_14400;
               break;

            case BPS16800:
               type = CARRIER_16800;
               break;

            case BPS19200:
               type = CARRIER_19200;
               break;

            case BPS21600:
               type = CARRIER_21600;
               break;

            case BPS24000:
               type = CARRIER_24000;
               break;

            case BPS26400:
               type = CARRIER_26400;
               break;

            case BPS28800:
               type = CARRIER_28800;
               break;

            case BPS31200:
               type = CARRIER_31200;
               break;

            case BPS33600:
               type = CARRIER_33600;
               break;

            default: type = NONE;
               break;
         }
      }
      else
         type = NONE;
   }

   if (type == CONNECT_XXXX)
   {
      if (sr22.enable_result5)            /* ATX > 0 */
      {
         system_info((ubyte *)&ptr[0]);

         /* Test to see if protocol is to be reported */
         /* autosync ignores S95 register */
         if ((!test_in_progress) && ((atW == 1) || (sr95.protocol))
            && (comm_mode != AUTOSYNC) )
         {
            /* Print protocol type */
            if ((system_status == V42_SPEED) || (operating_mode == DIRECT))
               type = PROTOCOL_NONE;

            if (system_status == V42_LAPM)
            {
               if (acu_ETC_enabled())
                  type = PROTOCOL_LAP_M__ETC;
               else
                  type = PROTOCOL_LAP_M;
            }

            if (system_status == V42_MNP)
            {
               if (!sr95.mnp_level)
                  type = PROTOCOL__MNP;
               else
               {
                   /* Select MNP2/3 */
                   if (ptr[OFFSET_ASYNC_SYNC])
                       type = PROTOCOL_MNP3;
                   else
                       type = PROTOCOL_MNP2;

                   /* Add MNP4? */
                   if (ptr[OFFSET_OPTIMIZATION])
                       type += PROTOCOL_MNP4;

                   /* Add mnp10 message */
                   if (ptr[OFFSET_NEGOT_MNP10])
                   {
                       type += PROTOCOL_MNP10;

                       /* Add MNP10 CELLULAR or EC message */
                       if (ptr[OFFSET_NEGOT_MNP10] > 1)
                       {
                           type += ptr[OFFSET_NEGOT_MNP10] * 2;
                           if (ptr[OFFSET_OPTIMIZATION])
                               type += PROTOCOL_MNP4;
                       }
                   }
               }
            }

            output_result_message(type, arq_en);
         }

         /* Test to see if compression is to be reproted */
         /* AutoSync never reports compression */
         if ((!test_in_progress) && (sr95.compression)
            && (comm_mode != AUTOSYNC) )
         {
            /* Printing compression type */
            if ((ptr[OFFSET_COMPRESSION] == 0) ||
               (operating_mode == DIRECT))
               type = COMPRESSION_NONE;
            else
            {
               if (system_status == V42_LAPM)
                  type = COMPRESSION_V42BIS;
               else
               {
                  if (ptr[OFFSET_COMPRESSION] == 1)
                     type = COMPRESSION_MNP5;
                  else
                     type = COMPRESSION_V42BIS;
               }
            }
            output_result_message(type, arq_en);
         }

         /* See what type of connection message should be sent */
         /* Autosync always reports modem baud */
         if ((!test_in_progress) && (((atW == 0) || (atW == 1)) && (slN!=1)
            && (!sr95.connect)) && !bps_adjust && (comm_mode != AUTOSYNC))
         {
            if (s[112])
               tmp_byte = s[112];
            else
               tmp_byte = dte_baud;
         }
         else
            tmp_byte = modem_baud;

         switch (tmp_byte)
         {
            case BPS300:
               type = CONNECT;
               break;

            case BPS600:
               type = CONNECT_0600;
               break;

            case BPS1200_75:
               type = CONNECT_1200_75;
               break;

            case BPS75_1200:
               type = CONNECT_75_1200;
               break;

            case BPS1200:
               type = CONNECT_1200;
               break;

            case BPS2400:
               type = CONNECT_2400;
               break;

            case BPS4800:
               type = CONNECT_4800;
               break;

            case BPS7200:
               type = CONNECT_7200;
               break;

            case BPS9600:
               type = CONNECT_9600;
               break;

            case BPS12000:
               type = CONNECT_12000;
               break;

            case BPS14400:
               type = CONNECT_14400;
               break;

            case BPS19200:
               type = CONNECT_19200;
               break;

            case BPS38400:
               type = CONNECT_38400;
               break;

            case BPS57600:
               type = CONNECT_57600;
               break;

            case BPS115200:
               type = CONNECT_115200;
               break;

            case BPS16800:
               type = CONNECT_16800;
               break;

            case BPS21600:
               type = CONNECT_21600;
               break;

            case BPS24000:
               type = CONNECT_24000;
               break;

            case BPS26400:
               type = CONNECT_26400;
               break;

            case BPS28800:
               type = CONNECT_28800;
               break;

            case BPS31200:
               type = CONNECT_31200;
               break;

            case BPS33600:
               type = CONNECT_33600;
               break;

            default:
               type= NONE;
               break;
         }

         if ((!test_in_progress) && (sr95.arq))
            if ((operating_mode != DIRECT) && (system_status != V42_SPEED)
               && (comm_mode != AUTOSYNC) )
               arq_en = TRUE;
      }
      else
         type = CONNECT;
   }

   output_result_message(type, arq_en);
}


/*******************************************************************************
/
/     Routine:       output_result_message
/
/     Author:        RSA
/
/     Creation Date: 07/18/91
/
/     Description:   This Routine is called to out put the selected result
/                    message to the terminal.
/
/     Input Parameters: byte type - type of result message to be sent
/                    0  - OK
/                    1  - CONNECT
/                    2  - RING
/                    3  - NO CARRIER
/                    4  - ERROR
/                    5  - CONNECT 1200
/                    6  - NO DIALTONE
/                    7  - BUSY
/                    8  - NO ANSWER
/                    9  - CONNECT 0600
/                    10 - CONNECT 2400
/                    11 - CONNECT 4800
/                    12 - CONNECT 9600
/                    13 - NONE
/                    14 - CONNECT 19200
/                    15 - CONNECT XXXX
/                    16 - CARRIER XXXX
/                    17 to 24 - Reserved
/                    25 - CONNECT 75/1200
/                    26 - CONNECT 1200/75
/                    27 - Reserved
/                    28 - CONNECT 38400
/                    28 to 39 - Reserved
/                    40 - CARRIER 300
/                    41 - Reserved
/                    42 - CARRIER 75/1200
/                    43 - CARRIER 1200/75
/                    44 - Reserved
/                    45 - Reserved
/                    46 - CARRIER 1200
/                    47 - CARRIER 2400
/                    48 - CARRIER 4800
/                    49 - Reserved
/                    50 - CARRIER 9600
/                    51 - CARRIER 12000
/                    52 - CARRIER 14400
/                    53 - CARRIER 16800
/                    54 - CARRIER 19200
/                    55 - CARRIER 21600
/                    56 - CARRIER 24000
/                    57 - CARRIER 26400
/                    58 - CARRIER 28800
/                    59 - CONNECT 16800
/                    61 - CONNECT 21600
/                    62 - CONNECT 24000
/                    63 - CONNECT 26400
/                    64 - CONNECT 28800
/                    65 - Reserved
/                    66 - COMPRESSIION_MNP5
/                    67 - COMPRESSIION_V42BIS
/                    68 - Reserved
/                    69 - COMPRESSIION_NONE
/                    70 - PROTOCOL NONE
/                    71 to 76 - Reserved
/                    77 - PROTOCOL LAP_M
/                    78 - PROTOCOL LAP_M/ETC
/                    79 - Reserved
/                    80 - PROTOCOL MNP
/                    81 - PROTOCOL MNP2
/                    82 - PROTOCOL MNP3
/                    83 - PROTOCOL MNP4
/                    84 - Reserved
/                    85 - RING_BACK
/                    86 - CONNECT 57600
/                    87 - CONNECT 115200
/
/               arq  0 - /ARQ not displayed
/                    1 - /ARQ displayed
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   output_result
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void output_result_message(ubyte type,ubyte arq_en)
{
   ubyte *msg;

   if ((!sr14.disable_result_code) && (type != NONE))
   {
      result_message_sent = TRUE;
      if (!sr14.verbose_form && type < ACU_MESSAGE_PTR)
      {
         if (type == FCERROR)
         {
            acu_to_char('+');
            acu_to_char('F');
            acu_to_char('4');
         }
         else
         {
            msg = d_to_a(type);
            msg++;
            if (*msg != '0')
               acu_to_char(*msg);
            msg++;
            acu_to_char(*msg);
         }

         if (s[3] != NULL)
            acu_to_char(s[3]);
      }
      else if ((type == DROF) || (type == DRON) ||
         (type == CPOF) || (type == CPON))
      {
         while (acu_to_free() <= 25){}

         /* Add spacing between CPOF/CPON messages if not in voice mode */
         if ((type == CPOF) && (voice_cmd_set != TIA_IS_101))
            output_send_cr_lf();

         /* Output Voice Distinctive Cadence message */
         msg =  (ubyte *)(*(out_put + type))[0];
         while (*msg != NULL)
            acu_to_char(*msg++);

         /* Output value of distinctive cadence time */
         if ((type == DROF) || (type == DRON))
            msg = d_to_a(voice_dist_ring_time);
         else if (type == CPOF)
            msg = d_to_a(voice_ctl_tone_off);
         else if (type == CPON)
            msg = d_to_a(voice_ctl_tone_on);

         /* Send only 2 least significant digits of ASCII number */
         msg++;
         if (*msg != '0')
            acu_to_char(*msg);
         msg++;
         acu_to_char(*msg);
         output_send_cr_lf();
      }
      else
      {
         while (acu_to_free() <= 25){}

         /* MESSAGE_PTRs don't require padding (RESULT_PTRs do) */
         if (type != ACU_MESSAGE_PTR)
             output_send_cr_lf();

         /* Output connection baud rate message... */
         /* Use the message pointer for custom inter-module messages */
         if (type == ACU_RESULT_PTR || type == ACU_MESSAGE_PTR)
            msg = message_ptr;
         /* Else use canned ACU messages */
         else
            msg = (ubyte *)(*(out_put + type))[0];

            while (*msg != NULL)
                acu_to_char(*msg++);

            /* Output ARQ message      */
            if (arq_en == TRUE)
            {
                msg = (ubyte *)"/ARQ";
                while (*msg != NULL)
                    acu_to_char(*msg++);
            }

            /* MESSAGE_PTRs don't require padding (RESULT_PTRs do) */
            if (type != ACU_MESSAGE_PTR)
                output_send_cr_lf();
        }
    }
}

/*******************************************************************************
/
/     Routine:       process_acu_timer
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called every 10 msecs to provide timing
/                    for the modules of the ACU.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  All timer varables
/
/     Users:   timer interrupt
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void process_acu_timer(void)
{
   /* Process 0.01 second timers   */
   while (acu_10msec_timer != 0)
   {
      acu_10msec_timer--;

      v25_10ms_timer();

      process_customer_timer();

      check_frontpan_switches();
      /* Determine if DTR change is valid or just a glitch   */
      if ((!modem_dte_DTR_status()) && (!DTR_always_on))
      {
         if (dte_DTR_flag)
         {
            dtr_timer = s[25];
            dte_DTR_flag = FALSE;
         }
         else if ((dtr_timer == 0) && (DTR_valid_up_flag))
         {
            DTR_valid_up_flag = FALSE;
            if ((comm_mode != ASYNC) || (sr21.DTR_control != 0))
               modem_tr_led(OFF);
         }
      }
      else
      {
         if (!dte_DTR_flag)
         {
            dtr_timer = s[25];
            dte_DTR_flag = TRUE;
         }
         else if ((dtr_timer == 0) && (!DTR_valid_up_flag))
         {
            DTR_valid_up_flag = TRUE;
            modem_tr_led(ON);
         }
      }

      if (dtr_timer) dtr_timer--;
      if (cts_timer) cts_timer--;
      if (timer1) timer1--;
      if (timer2) timer2--;
      if (timer3) timer3--;
      if (timer5) timer5--;

      /* Process Leased line 10 msec timers   */
      ll_10msec_timer();

      /* Process Fax 10 msec timers   */
      process_fax_timer();
   }

   /* Process 0.1 second timers   */
   while (acu_100msec_timer != 0)
   {
      acu_100msec_timer--;
      system_timer();

      /* Process Front panel 100 msec timers    */
      fp_100msec_timer();

      /* Process voice 100 msec timers */
      acu_voice_timer();

      if (voice_ring_rpt_timer)
      {
         voice_ring_rpt_timer--;
         if (!voice_ring_rpt_timer)
         {
            build_event(E_MSG,RING);
            if (voice_cmd_set == TIA_IS_101)
               build_event(E_MSG,COMPLEX_PACKET_END);
         }
      }

      voice_ring_timer++;
    }

   /* Process 1 second timers */
   while (acu_1sec_timer != 0)
   {
      acu_1sec_timer--;
      if (dtr_timer1sec)
      {
         dtr_timer1sec--;
         if (dtr_timer1sec==0)
         {
            if (!DTR_valid_up_flag)
               build_event(E_V24,DTR_OFF);
         }
      }
      /* Process Leased line 1 sec timers      */
      ll_1sec_timer();

      /* Process V.25bis 1 sec timers     */
      v25_1sec_timer();

      /* Run sleep timer if idle */
      if (acu_state == S_IDLE && !on_line_command)
         acu_process_sleep_timer();
   }

   while (acu_1min_timer != 0)
   {
      acu_1min_timer--;

      /* Process Leased line 1 min timers      */
      ll_1min_timer();

      /* Process V.25bis 1 min timers     */
      v25_1min_timer();
   }
}

/*******************************************************************************
/
/     Routine:       check_char_rcvd
/
/     Author:        RSA
/
/     Creation Date: 06/13/91
/
/     Description:   This Routine is called to check if a character has been
/                    received from the terminal.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void check_char_rcvd(void)
{
   if (acu_from_num())
      build_event(E_CHAR_RCVD,UNUSED);
}

/******************************************************************************
/
/     ROUTINE:       fp_mode_led_on
/
/     Author:        RSA
/
/     Creation Date: 02/26/91
/
/     Description:   This routine will turn on the front panel mode leds
/                    depending upon the value of modem_mode.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: acu_connect(), leased_line_init()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void fp_mode_led_on(void)
{
   switch(modem_mode)
   {
      case V21:
         modem_v21_led(ON);
         break;

      case V23_ADX:      /* V23 = ALL mode LEDS OFF */
      case V23_HDX:
         modem_v23_led(ON);
         break;

      case V22:
         modem_v22_led(ON);
         break;

      case V22BIS:
         modem_v22bis_led(ON);
         break;

      case V32:
      case V32_TCM:
      case V32BIS:
         modem_v32_led(ON);
         break;

/* TBD...
      case V34:
      case V34_ASYMETRIC:
         modem_v34_led(ON);
         break;
...TBD */
   }
}


/******************************************************************************
/
/     ROUTINE:       fp_mode_led_off
/
/     Author:        RSA
/
/     Creation Date: 10/3/91
/
/     Description:   This routine will turn off the front panel mode leds
/                    depending upon the value of modem_mode.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void fp_mode_led_off(void)
{
   switch(modem_mode)
   {
      case V21:
         modem_v21_led(OFF);
         break;

      case V23_ADX:      /* V23 = ALL mode LEDS ALREADY OFF */
      case V23_HDX:
         modem_v23_led(OFF);
         break;

      case V22:
         modem_v22_led(OFF);
         break;

      case V22BIS:
         modem_v22bis_led(OFF);
         break;

      case V32:
      case V32_TCM:
      case V32BIS:
         modem_v32_led(OFF);
         break;
   }
}


/*******************************************************************************
/
/     Routine:       translate_modem_mode
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to translate the baud rate passed
/                    in into parameter values for modem_connect()
/
/     Input Parameters: ubyte baud_rate - baud rate to be used to select the mode
/
/     Output Parameters: ubyte mode - type of mode for the connection
/                    0 - Bell 103
/                    1 - Bell 212
/                    2   V21
/                    3   V21_CHAN2
/                    4   V23_ADX
/                    5   V23_HDX
/                    6   V22
/                    7   V22BIS
/                    8   V27_SHORT
/                    9   V27_LONG
/                    10  V27_TER
/                    11  V29
/                    12  V32
/                    13  V32_TCM
/                    14  V17
/                    15  V33
/                    16  V32bis
/                    17  V34
/                    18  V34 Asymetric
/
/     Global Variables Changed:  none
/
/     Users:   answ_init_modem, orig_init_modem, init_ALB_test
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte translate_modem_mode(ubyte baud_rate)
{
   ubyte mode;

   /* If baud rate is greater than 2400 need to force the rate to 2400
      if this is a V.22bis modem. */
   if ((baud_rate > BPS2400) && (baud_rate != BPS600))
      if (acu_cfg.mode == CFG_V22BIS)
         baud_rate = BPS2400;

   switch (baud_rate)
   {
      case BPS75_1200:
         mode = V23_ADX;
         break;

      case BPS300:
         switch (atB.group3)
         {
            case 15:
               mode = V21;
               break;

            case 16:
               mode = BELL_103;
               break;
         }
         break;

      case BPS600:
         mode = V22;
         break;

      case BPS1200:
         switch (atB.group1)
         {
            case 0:
               mode = V22;
               break;

            case 1:
               mode = BELL_212;
               break;

            case 2:
            case 3:
               mode = V23_ADX;
               break;
         }
         break;

      case BPS2400:
         switch (atB.group5)
         {
            case 30:
               mode = V22BIS;
               break;

            case 32:
               if( s[110] == ENABLE_V34 )
                  mode = V34;
               else
                   mode = V22BIS;
               break;
         }
         break;

      case BPS4800:
         switch (atB.group6)
         {
            default:
            case 41:
               if (s[110] == ENABLE_V32)
                  mode = V32;
               else
                  mode = V32BIS;
               break;

            case 42:
               if (s[110] == ENABLE_V34)
                   mode = V34;
               else if (s[110] == ENABLE_V32)
                  mode = V32;
               else
                  mode = V32BIS;
               break;
         }
         break;

      case BPS7200:
         switch (atB.group7)
         {
            case 53:
               if (s[110] == ENABLE_V34)
                   mode = V34;
               else
                   mode = V32BIS;
               break;

            default:
               mode = V32BIS;
               break;
         }
         break;

      case BPS9600:
         switch (atB.group8)
         {
            case 61:
               if (s[110] == ENABLE_V34)
                   mode = V34;
               else if (s[110] == ENABLE_V32)
               {
                  /* If running V.32bis trellis coding is always enabled,
                  for V.32 need to look at the setting of the &U command. */

                  /* For the variable trellis 0 = Enabled and
                     1 = Disabled   */
                  if (!trellis)
                     mode = V32_TCM;
                  else
                     mode = V32;
               }
               else
                  mode = V32BIS;
               break;

            default:
            case 60:
               /* If running V.32bis trellis coding is always enabled,
                  for V.32 need to look at the setting of the &U command. */
               if (s[110] == ENABLE_V32)
               {
                  /* For the variable trellis 0 = Enabled and
                     1 = Disabled   */
                  if (!trellis)
                     mode = V32_TCM;
                  else
                     mode = V32;
               }
               else
                  mode = V32BIS;
               break;
         }
         break;

      case BPS12000:
         switch (atB.group9)
         {
            default:
            case 70:
               mode = V32BIS;
               break;

            case 71:
               if (s[110] == ENABLE_V34)
                   mode = V34;
               else
                   mode = V32BIS;
               break;
         }
         break;

      case BPS14400:
         switch (atB.group10)
         {
            default:
            case 75:
               mode = V32BIS;
               break;

            case 76:
               if (s[110] == ENABLE_V34)
                   mode = V34;
               else
                   mode = V32BIS;
               break;
         }
         break;

      case BPS16800:
      case BPS19200:
      case BPS38400:
      case BPS57600:
      case BPS115200:
      case BPS21600:
      case BPS24000:
      case BPS26400:
      case BPS28800:
      case BPS31200:
      case BPS33600:
      case BPS36000:
         mode = V34;
         break;

      default:
         mode = 0;
         break;
   }

   return (mode);
}

/*******************************************************************************
/
/     Routine:       check_modem_status
/
/     Author:        RSA
/
/     Creation Date: 06/24/91
/
/     Description:   This Routine is called to build events based upon
/                    the status of the modem.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:  master_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void check_modem_status(void)
{
   /* Don't check modem status in VoiceView mode */
   if (fax_class == 80)
      return;

   /* Test for Carrier signal */
   if (!modem_check_CD())
      build_event(E_DP_CD_OFF,UNUSED);

   /* Test for change in modem status */
   if (last_modem_status != modem_status)
   {
      last_modem_status = modem_status;

      /* If under RDL, build test event */
      if ((modem_status == REMOTE_TEST_STATUS) && (!test_in_progress))
      {
         build_event(E_TEST,RMT_TEST);
         previous_acu_state = acu_state;
      }
      /* Else if retrain, build retrain event */
      else if (modem_status == RETRAINING_STATUS)
         build_event(E_RETRAIN,UNUSED);
   }

   /* Execute ACU's retrain background processing */
   if (st_retrain.state == S_RETRAIN)
   {
      retrain_bg();
   }

   /* Test modem call progress RING detection and CP tone reporting */
   switch (modem_call_progress())
   {
      case UNDETERMINED:
      case SILENCE:
      case LINE_SIGNAL:
      default:
         /* Reset control tone reporting trigger */
         voice_dist_ctl_sent = FALSE;
         break;

      case RINGON:
         /* Ring is posted in the voice driver under voice mode */
         if (fax_class != 8)
            build_event(E_RING,RINGON);
         break;

      case BUSY_SIGNAL:
      case RINGBACK:
         /* Report Control Tone Cadences if enabled */
         if (voice_dist_ctl_active && !voice_dist_ctl_sent)
         {
            voice_dist_ctl_sent = TRUE;
            modem_ctl_tone_energy(&voice_ctl_tone_on,&voice_ctl_tone_off);
            build_event(E_MSG,CPOF);
            build_event(E_MSG,CPON);
         }
         break;

      case RINGOFF:
         /* Ring is posted in the voice driver under voice mode */
         if (fax_class != 8)
            build_event(E_RING,RINGOFF);
         break;
   }
}
