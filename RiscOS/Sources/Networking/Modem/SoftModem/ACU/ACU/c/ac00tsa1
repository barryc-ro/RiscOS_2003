/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00tsa1.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the action routines for the AT
/                       test commands.
/
/     Product:          ACU core code
/
/     History:          ac00tsa1.c v3.90
/                       ac00tsa1.c v3.91
/                       ac00tsa1.c v3.94
/                       ac00tsa1.c v3.95
/                       ac00tsa1.c v3.96
/                       ac00tsa1.c v4.02
/
/        Created:       11/16/91
/                       12/04/91
/                       1/21/91
/                       3/10/92
/                       1/12/92
/                       10/10/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "edf.v42"
#include "edf.dte"
#include "edf.dce_line"

/* Local prototypes */
void test_at_bg(void);
void proc_test_at(void);
void proc_idle_test(void);
void acu_test_init(void);
void init_ALB_test(void);
void init_RDL_test(void);
void test_online(void);
void flash_mr(void);
void acu_self_test(void);
void test_wait_link_drop(void);
void test_wait_for_physical_link(void);
void test_wait_for_rdl_rspns(void);
void test_wait_for_logical_link(void);
void test_terminate_waiting(void);
void test_terminate_cleanup(void);
void test_return_to_test(void);

/*******************************************************************************
/
/     Routine:       test_at_bg
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will perform the background function for
/                    the ACU state TEST of type AT_TEST.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: test_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_at_bg(void)
{
   switch (st_test.state)
   {
      case TEST_INIT:
         /* In this state the ACU will initiate the selected test. */
         acu_test_init();
         break;

      case TEST_DROP_CURRENT:
         /* In this state we hangup the current physical link before
            starting the selected TEST. */
         test_wait_link_drop();
         break;

      case TEST_WAIT_PHYS_CONNECT:
         /* In this state the ACU is waiting for the modem to
            detect carrier (ALB) or a remote response (RDL). */
         test_wait_for_physical_link();
         break;

      case TEST_WAIT_LOGI_CONNECT:
         /*   In this state the ACU is waiting for the V.42 to
            connect in Speed Matching mode (required for data transfer). */
         test_wait_for_logical_link();
         break;

      case TEST_SETTLING_DELAY:
         /* Wait for the selftest line settling timer has expired, then
            start the test pattern tx and rx */
         if (!timer1)
         {
            self_test_ready();
         }
         break;

      case TEST_ONLINE:
         /*   In this state the ACU will perform Analog loopback and
            Remote Digital loopback tests. */
         test_online();
         break;

      case TEST_RETURN_TO_TEST:
         /*   In this state the ACU returns to an on-going test */
         test_return_to_test();
         break;

      case TEST_TERMINATE:
         /*   In this state the ACU will terminate the test in progress. */
         terminate_test();
         break;

      case TEST_TERMINATE_WAIT:
         /*   In this state the ACU will terminate the test in progress. */
         test_terminate_waiting();
         break;


      case TEST_TERMINATE_COMPLETE:
         /*   In this state the ACU will terminate the test in progress. */
         test_terminate_cleanup();
         break;
   }
}


/*******************************************************************************
/
/     Routine:       proc_test_at
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the TEST
/                    state of type AT_TEST.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_state, acu_proc
/
/     Users: proc_test
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_test_at(void)
{
   acu_state = st_test_at[acu_event->type].new_state;
   acu_proc = st_test_at[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/     Routine:       proc_idle_test
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the IDLE
/                    state of type TEST.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_state, acu_proc
/
/     Users: proc_idle
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_idle_test(void)
{
   acu_state = st_idle_test[acu_event->type].new_state;
   acu_proc = st_idle_test[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/     Routine:       acu_test_init
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine will setup and initiate the selected
/                    test.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_test.state, timer_activated, timer2
/
/     Users:   test_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_test_init(void)
{
   switch (test_in_progress)
   {
      case ALB:

         /* Fall through */

      case ALB_SELF_TEST:
         init_ALB_test();
         break;

      case LDL:
         modem_digital_loopback(ON);

         /* LDL is processeed from the IDLE state inorder to take
            AT commands to cancel the test */
         build_event(E_IDLE,UNUSED);

         /* Activate Test Timer (S18) */
         start_test_timer();
         break;

      case RDL:

         /* Fall through */

      case RDL_SELF_TEST:
         /* Init parameters for the RDL test */
         init_RDL_test();
            break;
   }

   if (sr21.DSR_only_at_handshaking)
      modem_dte_dsr(OFF);
}


/*******************************************************************************
/
/     Routine:       init_ALB_test
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine will initiate a Local Analog Loopback
/                    test
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  cmd_ptr, timer1
/
/     Users:   acu_test_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void init_ALB_test(void)
{
   ubyte modem_mode;

   /* Need to disconnect the current link if the modem is on line */
   if (on_line_command == TRUE)
   {
      modem_drop(ENABLED);

      /* Start timer to time-out if modem does not drop carrier */
      timer1 = 1000; /* 10 secs to wait on drop */

      /* Move to a state to monitor the Carrier drop */
      st_test.state = TEST_DROP_CURRENT;
   }
   /* The modem is off-line so configure physically and logically for ALB */
   else
   {
      /* Go on hook */
      on_hook();

      /* Set up the operating_mode variable for the ALB test. */
      system_set_parameters();

      /* Tell the data pump what type of terminal communication to use */
      if (sr27.comm_mode != ASYNC)
      {
         modem_char(SYNC_NORMAL,char_size,overspeed);
      }
      else
      {
         /* Connect type is direct by default */
         if ((init_type == HARDWARE) && (operating_mode == DIRECT)
            && (test_in_progress != ALB_SELF_TEST))
            modem_char(ASYNC,dipsw_char_size,dipsw_overspeed);
         else
            modem_char(ASYNC,char_size,overspeed);
      }

      /* Need to determine if V.32bis is enabled in by s110.  This variable
         needs to be set before translate_modem_baud() or
         update_modem_rate_seq() is called */
      v32bis_enable = s[110];

      /* Get the type of line connection selected   */
      modem_baud = translate_modem_baud();
      modem_mode = translate_modem_mode(modem_baud);
      dte_init_baud = dte_baud;

      /* Need to update the modem with the selected baud rates */
      update_modem_rate_seq();

      /* Which band? */
      if (sr14.originate_flag)
         modem_alb(1, modem_baud,modem_mode);
      else
         modem_alb(0, modem_baud,modem_mode);

      /* Start timer to time out if modem does not produce carrier */
      timer1 = ALB_response_time;

      /* Move to a state to monitor for Carrier */
      st_test.state = TEST_WAIT_PHYS_CONNECT;
   }
}


/*******************************************************************************
/
/     Routine:       init_RDL_test
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine will initiate a Remote Digital Loopback
/                    test.
/
/     Input Parameters: none
/
/     Output Parameters: None
/
/     Global Variables Changed:  timer1, timer_activated, timer2
/
/     Users:   acu_test_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void init_RDL_test(void)
{
   /* Send RDL request to remote modem */
   modem_send_rdl_request();

   /* Wait 3 sec for RDL response from peer */
   timer1 = RDL_response_time;

   /* Change states to wait for RDL response */
   st_test.state = TEST_WAIT_PHYS_CONNECT;
}


/*******************************************************************************
/
/     Routine:       test_online
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine will look for test-timeout, escape
/                    sequence, or carrier loss while a Local Analog or
/                    Remote Digital test is being performed.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: test_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_online(void)
{
   /* Test LED */
   flash_mr();

   /* Check to see if s18 time limit has been reached */
   if ((timer_activated) && (timer2 == 0))
   {
      /* Switch the DTE interrupts back to the ACU   */
      modem_serial_direct(NORMAL);
      enable_acu_on_terminal();

      /* Need to return the Speed matching code to an idle state */
      system_idle();

      /* Halt test via hangup event, add OK message */
      build_event(E_HANGUP,OK);
      return;
   }

   /* Escape sequence is entered */
   if (escape_received)
   {
      build_event(E_ESC_RXD,UNUSED);
      escape_received = FALSE;
   }

   /* Run speed matching */
   if (operating_mode != DIRECT)
      system_bg();
}


/*******************************************************************************
/
/     Routine:       flash_mr
/
/     Author:        RSA
/
/     Creation Date: 07/12/91
/
/     Description:   This Routine will flash the MR led furing the test process
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  timer3, mr_on_flag
/
/     Users: idle_test_bg, test_online
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void flash_mr(void)
{
   /* Turn ON/OFF MR led on time-out */
   if (!timer3)
   {
      timer3 = 100;   /* Reset timer */

      if (mr_on_flag == ON)
         mr_on_flag = OFF;
      else
         mr_on_flag = ON;
      modem_mr_led(mr_on_flag);
   }
}


/*******************************************************************************
/
/     Routine:       acu_self_test
/
/     Author:        RSA
/
/     Creation Date: 07/12/91
/
/     Description:   This Routine will send and receive the test pattern for
/                    the Analog loopback w/self test and the Remote digital
/                    loopback w/self test modes.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  self_test_error_count
/
/     Users: idle_test_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_self_test(void)
{
   ubyte i;

   if (modem_status != RETRAINING_STATUS)
   {
      /* Send out the test pattern */
      for (i=0;i<=15;i++)
      {
         if (line_to_free() > 4)
            line_to_char(SLFTST_TEST_CHAR);
      }
   }

   /* Receive and verify the test pattern   */
   while (line_from_num() > 0)
   {
      /* Mask off the parity Bit! */
      if ((line_from_char() & CHAR_MASK) != SLFTST_TEST_CHAR)
         if (self_test_error_count < 255)
            self_test_error_count++;

      /* Set character received flag   */
      if (!self_test_char_rx)
         self_test_char_rx = TRUE;
   }
}

/*******************************************************************************
/
/     Routine:       test_wait_link_drop
/
/     Author:        RSA
/
/     Creation Date: 01/24/95
/
/     Description:   This Routine will wait until the modem task has hungup
/                    OR a time-out has occured.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  on_line_command,operating_mode,st_test.state
/
/     Users: test_at_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_wait_link_drop(void)
{
   /* Wait until the modem task has hungup OR timed out */
   if (!modem_check_CD() || !timer1)
   {
      /* Need to reset the V.42 connection  */
      system_reset();
      on_line_command = FALSE;
      operating_mode = NORMAL;

      /* Reinitialize for the test */
      st_test.state = TEST_INIT;
   }
}


/*******************************************************************************
/
/     Routine:       test_wait_for_physical_link
/
/     Author:        RSA
/
/     Creation Date: 01/24/95
/
/     Description:   This Routine will wait for the modem to establish the
/                    physical link required by the test.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: timer1, st_test.state
/
/     Users: test_at_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_wait_for_physical_link(void)
{
   switch (test_in_progress)
   {
      case ALB:
      case ALB_SELF_TEST:
         modem_dte_cts(ON);

         /* Time-out waiting on the physical connection */
         if (!timer1)
         {
            st_test.state = TEST_TERMINATE;
         }
         /* Else got the physical connection */
         else if (modem_check_CD())
         {
            /* Carrier and Rx Signal LEDs ON */
            modem_cd_led(ON);
            modem_dte_rlsd(ON);

            /* Update current modulation status */
            get_modem_baud_and_mode();

            /* Initialize V.42 for a test link */
            system_init_test_link();

            /* Wait up to 2 seconds for the test link */
            timer1 = 200; /* 200 == 2 sec */
            st_test.state = TEST_WAIT_LOGI_CONNECT;
         }
         break;

      case RDL:
      case RDL_SELF_TEST:
      default:
         test_wait_for_rdl_rspns();
         break;
   }

}

/*******************************************************************************
/
/     Routine:       test_wait_for_rdl_rspns
/
/     Author:        RSA
/
/     Creation Date: 01/24/95
/
/     Description:   This Routine will wait on a response from the remote modem
/                    to a request for RDL. It will either hangup, or continue
/                    the test phase based on the remote's response.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: timer1, st_test.state
/
/     Users: test_at_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_wait_for_rdl_rspns(void)
{
   /* If no response then terminate test command */
   if (!timer1)
   {
      /* ERROR message followed by hangup */
      build_event(E_HANGUP,ERROR);
   }
   else if (modem_received_RDL())
   {
      /* If running DIRECT mode, need to start up a Speed matching link.
         Move to a state to wait for the V.42 code to establish itself */
      if (operating_mode == DIRECT)
      {
         system_init_test_link();

         /* Wait 2 secs for the test link */
         timer1 = 200; /* 200 == 2 sec */
         st_test.state = TEST_WAIT_LOGI_CONNECT;
      }
      /* Else data transfer is already connected so we only have
         move to the test-online state */
      else
      {
         /* Activate Test Timer (S18) */
         start_test_timer();

         /* Finalize test parameters when data link is ready */
         switch (test_in_progress)
         {
            case RDL:
               /* Show connect to terminal */
               build_event(E_MSG,CONNECT_XXXX);

               /* Need to continue the error correction code running */
               system_start(CONTINUE);

               /* Monitor the test from the online test state */
               st_test.state = TEST_ONLINE;
               break;

            case RDL_SELF_TEST:
            default:
               /* Initialize IO to send and receive test data   */
               self_test_init();
               break;
         }  /* switch */
      }
   }
}


/*******************************************************************************
/
/     Routine:       test_wait_for_logical_link
/
/     Author:        RSA
/
/     Creation Date: 01/24/95
/
/     Description:   This Routine will wait on the data link layer to establish
/                    a path for the test data.  In our case it's V.42 running
/                    in speed matching mode.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: st_test.state
/
/     Users: test_at_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_wait_for_logical_link(void)
{
   ubyte v42status;

   /* Time-out waiting? */
   if (!timer1)
   {
      st_test.state = TEST_TERMINATE;
      return;
   }

   /* Test V.42 status for a Speed Matching connection */
   mmu_open_v42_pg
   v42status = v42_bg();
   mmu_restore_stored_pg

   /* Wait until a Speed Matching connection has been made */
   if (v42status == V42_SPEED)
   {
      /* Finalize test parameters when data link is ready */
      switch (test_in_progress)
      {
         case ALB:
            /* Init the DTE port and send CONNECT message */
            dte_init(dte_baud,acu_data_bits,acu_stop_bits,acu_parity,
               terminal_DTE_flowctrl,terminal_DTE_xon_char,
               terminal_DTE_xoff_char,modem_DTE_flowctrl,
               modem_DTE_xon_char,modem_DTE_xoff_char,
               DISABLED,s[2],s[12],escape_mode);

            build_event(E_MSG,CONNECT_XXXX);

            /* Move to TEST to online sub-state */
            st_test.state = TEST_ONLINE;
            break;

         case RDL:
            /* If RDL send CONNECT message */
            build_event(E_MSG,CONNECT_XXXX);

            /* Get the error correction code running */
            system_start(CONTINUE);

            /* Move to TEST to online sub-state */
            st_test.state = TEST_ONLINE;
            break;

         case ALB_SELF_TEST:
         case RDL_SELF_TEST:
         default:
            /* If ALB selftest, init the test and send OK message */
            /* Initialize IO to send and receive test data   */
            self_test_init();
            break;
      }  /* switch */

      /* Turn on the RLSD Signal */
      if ((sr21.RLSD_reflects_CD) || (sr27.comm_mode != ASYNC))
         modem_dte_rlsd(ON);

      /* Activate Test timer (S-Register 18) */
      start_test_timer();
   }
}


/*******************************************************************************
/
/     Routine:       test_terminate_waiting
/
/     Author:        RSA
/
/     Creation Date: 01/20/95
/
/     Description:   This Routine will wait for an orderly shut down of the
/                    test at the physical layer.  If test does not terminate,
/                    a hard reset to the modem occurs.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: none.
/
/     Users: void test_at_bg(void)
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_terminate_waiting(void)
{
   /* If the the test fails to abort do a system reset */
   if (!timer1)
   {
      build_event(E_RESET,UNUSED);
   }
   else if ((modem_status != REMOTE_TEST_STATUS) &&
      (modem_status != LOCAL_TEST_STATUS))
   {
      st_test.state = TEST_TERMINATE_COMPLETE;
      if ((test_in_progress == ALB) || (test_in_progress == ALB_SELF_TEST))
      {
         if ((v25bis_active) && (v25_operating_mode == V25_108_2_MODE))
         {
            modem_dte_dsr(OFF);
         }
         else
         {
            modem_cd_led(OFF);
            if ((sr21.RLSD_reflects_CD) || (sr27.comm_mode != ASYNC))
               modem_dte_rlsd(OFF);
         }
      }
   }
}


/*******************************************************************************
/
/     Routine:       test_terminate_cleanup
/
/     Author:        RSA
/
/     Creation Date: 01/20/95
/
/     Description:   This Routine leave the ACU in the proper state
/                    after a test.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: send_ok
/
/     Users: void test_at_bg(void)
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_terminate_cleanup(void)
{
   /* Send selftest result message */
   if ((test_in_progress == ALB_SELF_TEST) ||
      (test_in_progress == RDL_SELF_TEST))
   {
      if (test_hangup_msg != ERROR)
         output_test_message(self_test_error_count);
   }

   /* If the hangup was due to ATH, we must continue parsing the cmd line */
   if (at_h_command == TRUE)
   {
      /* Parse event to finish parsing the command line */
      build_event(E_PARSE,UNUSED);
      build_event(E_HANGUP,OK);
      send_ok = TRUE;
   }
   /* Else return the ACU to IDLE */
   else
   {
      /* Move ACU to same IDLE state as before tests */
      build_event(E_IDLE,TEST_RESET);
      build_event(E_MSG,test_hangup_msg);
   }

   modem_mr_led(ON);
   test_in_progress = FALSE;
   timer_activated = FALSE;

   /* Clear out the DCE data buffers */
   line_to_clear();
   line_from_clear();
}

/*******************************************************************************
/
/     Routine:       test_return_to_test
/
/     Author:        RSA
/
/     Creation Date: 01/21/95
/
/     Description:   This Routine will cause the ACU to return to an online
/                    test state.  This is usually a result of escape (+++)
/                    followed by a return to online command (ATO).
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_test.state
/
/     Users: st_parse_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_return_to_test(void)
{
   /* Post connect message and restart DECC code */
   build_event(E_MSG,CONNECT_XXXX);
   system_reconfigure();
   system_start(CONTINUE);
   st_test.state = TEST_ONLINE;
}

