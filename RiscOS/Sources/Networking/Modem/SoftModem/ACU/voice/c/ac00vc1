/*****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00vc1.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains ACU specific interface routines
/                       to Voice.
/
/     Product:          ACU core code
/
/     History:
/
/        Created:
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vce.h"
#include "vce_pro.h"
#include "fp_pro.h"
#include "mt_pro.h"

void process_voice_bg(void);
void orig_voice_bg(void);
void proc_idle_voice(void);
void proc_orig_voice(void);
void proc_online_voice(void);
void parse_voice(void);
void parse_answ_voice(void);
void parse_orig_voice(void);
void orig_voice_hangup(void);
void parse_connect_voice(void);
void online_hangup_voice(void);
void idle_voice_v24(void);
void online_voice_v24(void);
void orig_voice_msg(void);
void idle_voice_ring(void);
void output_voice_result(ubyte type);
void idle_voice_msg(void);


const ubyte *voice_result_code_table[] =
{
   (ubyte *) "\x10R",   /* MSG type: 102 Voice mode Ring message */
   (ubyte *) "\x10X",   /* MSG type: 103 Voice message start */
   (ubyte *) "\x10.",   /* MSG type: 104 Voice message end */
};


/*******************************************************************************
/
/     Routine:       process_voice_bg
/
/     Author:        RSA
/
/     Creation Date: 10/26/92
/
/     Description:   This routine will process the voice code.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void process_voice_bg(void)
{
   ubyte status;

   /* Only call Voice code if it has been selected */
   if (fax_class != 8)
      return;

   status = voice_bg(&message_ptr);
   switch (status)
   {
      case STAY_PARSE:
         break;

      case GOTO_IDLE_NONE:
         voice_dte_reset();
         acu_restart();
         set_parms(acu_data_bits,acu_parity,acu_stop_bits);
         build_event(E_IDLE,UNUSED);
         build_event(E_MSG,NONE);
         break;

      case GOTO_IDLE_OK:
         voice_dte_reset();
         acu_restart();
         set_parms(acu_data_bits,acu_parity,acu_stop_bits);
         build_event(E_IDLE,UNUSED);
         build_event(E_MSG,OK);
         break;

      case RING_ON_DETECTED:
         build_event(E_RING,RINGON);
         break;

      case RING_OFF_DETECTED:
         build_event(E_RING,RINGOFF);
         break;

      case STAY_ONLINE:
         if (acu_10msec_timer > 1)
            acu_10msec_timer = 1;
         if (acu_100msec_timer > 1)
            acu_100msec_timer = 1;
         if (acu_1sec_timer > 1)
            acu_1sec_timer = 1;
         if (acu_1min_timer > 1)
            acu_1min_timer = 1;
         break;

      case GOTO_IDLE_INACTIVITY:
         voice_dte_reset();
         acu_restart();
         set_parms(acu_data_bits,acu_parity,acu_stop_bits);
         build_event(E_IDLE,UNUSED);
         online_hangup_voice();
         break;

      case RINGBACK_DETECTED:
         if (voice_dist_ctl_active)
         {
            voice_rpt_ctl_cadence(RINGBACK_DETECTED,
               &voice_ctl_tone_on,&voice_ctl_tone_off);
            if ((fax_class == 8) && (voice_cmd_set == TIA_IS_101))
            {
               build_event(E_MSG,COMPLEX_PACKET_START);
               build_event(E_MSG,CPOF);
               build_event(E_MSG,CPON);
               build_event(E_MSG,COMPLEX_PACKET_END);
            }
            else
            {
               build_event(E_MSG,CPOF);
               build_event(E_MSG,CPON);
              }
         }
         break;

      case BUSY_DETECTED:
         if (voice_dist_ctl_active)
         {
            voice_rpt_ctl_cadence(BUSY_DETECTED,
               &voice_ctl_tone_on,&voice_ctl_tone_off);
            if ((fax_class == 8) && (voice_cmd_set == TIA_IS_101))
            {
               build_event(E_MSG,COMPLEX_PACKET_START);
               build_event(E_MSG,CPOF);
               build_event(E_MSG,CPON);
               build_event(E_MSG,COMPLEX_PACKET_END);
            }
            else
            {
               build_event(E_MSG,CPOF);
               build_event(E_MSG,CPON);
            }
         }
         break;
   }

   /* Return any information to the terminal from the voice code.
       NOTE: Use ACU_MESSAGE_PTR with caution, as it can be overwritten
       by other parts of the ACU */
   if (*message_ptr != NULL)
   {
       build_event(E_MSG,ACU_MESSAGE_PTR);
   }

}


/*******************************************************************************
/
/     Routine:       orig_voice_bg
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will process the background functions for
/                    the ORIG state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_orig.state
/
/     Users: proc_orig
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_voice_bg(void)
{
   switch (st_orig.state)
   {
      case ORIG_DIAL:
         /* In this state the ACU is processing the dial command */
         originate_dial();
         break;

      case INIT_MODEM_ORIG:
         /* Force the voice code in to the online command state */
         voice_connect(ORIGINATE);
         timer2 = s[7] * 100;
         st_orig.state = ORIG_HANDSHAKING;
         break;

      case ORIG_HANDSHAKING:
         /* Wait until the voice mode indicates it has detected the remote
            off hook by detecting ringback. If not detected before s7 timer
            expires then abort call */
         if (!timer2)
         {
            build_event(E_HANGUP,NONE);
            build_event(E_MSG,NO_ANSWER);
         }
         break;

      case PROCESS_DIAL_MOD:
         /* In this state the ACU will process any dial modifiers that takes
            any length of time */
         process_modifiers();
         break;
   }
}

/*******************************************************************************
/
/   State Table:        st_idle_voice
/
/   Author:  RSA
/
/   Creation Date: 06/17/94
/
/   Description:  This table contains the action routines for Voice in IDLE mode.
/
/   Users: proc_orig
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
const struct stateTab_struct st_idle_voice[EVT_MAX+1] =
{
/* MSG        */    {S_IDLE,       idle_voice_msg},
/* CHAR_RCVD  */    {S_IDLE,       idle_chk_char},
/* ORIG       */    {S_ORIG,       parse_orig_voice},
/* ANSW       */    {S_IDLE,       parse_answ_voice},
/* CONNECT    */    {S_IDLE,       ignore},
/* IDLE       */    {S_IDLE,       ignore},
/* RESET      */    {S_IDLE,       hard_reset},
/* SYS_STAT   */    {S_IDLE,       ignore},
/* RING       */    {S_IDLE,       idle_voice_ring},
/* DP_CD_OFF  */    {S_IDLE,       ignore},
/* HANGUP     */    {S_IDLE,       orig_voice_hangup},
/* RETRAIN    */    {S_IDLE,       ignore},
/* TEST       */    {S_IDLE,       ignore},
/* PARSE      */    {S_PARSE,      idle_to_parse},
/* V24        */    {S_IDLE,       idle_voice_v24},
/* FP         */    {S_IDLE,       proc_fp},
/* ESC_RXD    */    {S_IDLE,       ignore},
};


/*******************************************************************************
/
/     Routine:       proc_idle_voice
/
/     Author:        RSA
/
/     Creation Date: 10/26/92
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the IDLE
/                    state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_idle_voice(void)
{
   acu_state = st_idle_voice[acu_event->type].new_state;
   acu_proc = st_idle_voice[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/   State Table:        st_orig_voice
/
/   Author:  RSA
/
/   Creation Date: 06/17/94
/
/   Description:  This table contains the action routines for Voice in ORIG mode.
/
/   Users: proc_orig
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
const struct stateTab_struct st_orig_voice[EVT_MAX+1] =
{
/* MSG        */    {S_ORIG,       orig_voice_msg},
/* CHAR_RCVD  */    {S_ORIG,       kb_abort},
/* ORIG       */    {S_ORIG,       ignore},
/* ANSW       */    {S_IDLE,       parse_answ_voice},
/* CONNECT    */    {S_ORIG,       ignore},
/* IDLE       */    {S_IDLE,       ignore},
/* RESET      */    {S_IDLE,       hard_reset},
/* SYS_STAT   */    {S_ORIG,       ignore},
/* RING       */    {S_ORIG,       ignore},
/* DP_CD_OFF  */    {S_ORIG,       ignore},
/* HANGUP     */    {S_IDLE,       orig_voice_hangup},
/* RETRAIN    */    {S_ORIG,       ignore},
/* TEST       */    {S_ORIG,       ignore},
/* PARSE      */    {S_PARSE,      orig_at_parse},
/* V24        */    {S_ORIG,       pstn_at_v24},
/* FP         */    {S_ORIG,       proc_fp},
/* ESC_RXD    */    {S_ORIG,       ignore},
};


/*******************************************************************************
/
/     Routine:       proc_orig_voice
/
/     Author:        RSA
/
/     Creation Date: 10/26/92
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the ORIG
/                    state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_orig_voice(void)
{
   acu_state = st_orig_voice[acu_event->type].new_state;
   acu_proc = st_orig_voice[acu_event->type].fnc_ptr;
}

/*******************************************************************************
/
/   State Table:        st_online_voice
/
/   Author:  RSA
/
/   Creation Date: 06/17/94
/
/   Description:  This table contains the action routines for Voice in
/                  ONLINE mode.
/
/   Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
const struct stateTab_struct st_online_voice[EVT_MAX+1] =
{
/* MSG        */    {S_ONLINE,     ignore},
/* CHAR_RCVD  */    {S_ONLINE,     ignore},
/* ORIG       */    {S_ONLINE,     ignore},
/* ANSW       */    {S_ONLINE,     ignore},
/* CONNECT    */    {S_ONLINE,     ignore},
/* IDLE       */    {S_IDLE,       ignore},
/* RESET      */    {S_IDLE,       hard_reset},
/* SYS_STAT   */    {S_ONLINE,     ignore},
/* RING       */    {S_ONLINE,     ignore},
/* DP_CD_OFF  */    {S_ONLINE,     ignore},
/* HANGUP     */    {S_IDLE,       online_hangup_voice},
/* RETRAIN    */    {S_ONLINE,     ignore},
/* TEST       */    {S_ONLINE,     ignore},
/* PARSE      */    {S_ONLINE,     ignore},
/* V24        */    {S_ONLINE,     online_voice_v24},
/* FP         */    {S_ONLINE,     proc_fp},
/* ESC_RXD    */    {S_ONLINE,     ignore},
};


/*******************************************************************************
/
/     Routine:       proc_online_voice
/
/     Author:        RSA
/
/     Creation Date: 10/26/92
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the ONLINE
/                    state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_online_voice(void)
{
   acu_state = st_online_voice[acu_event->type].new_state;
   acu_proc = st_online_voice[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/     Routine:       parse_voice
/
/     Author:        RSA
/
/     Creation Date: 10/26/94
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the PARSE
/                    state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parse_voice(void)
{
   if (acu_event->parm == CONN_DATA || acu_event->parm == CONN_FAX ||
      acu_event->parm == CONN_VOICEVIEW)
   {
      /* Place the modem and voice code into idle states */
      modem_return_to_idle();

      /* Force the voice code in to the online command state */
      voice_reset();

      if (acu_event->parm == CONN_VOICEVIEW)
      {
         st_idle.type = VOICE_VIEW;
         st_parse.type = VOICE_VIEW;
      }
      else
      {
         st_idle.type = AT_OFFLINE;
         st_parse.type = AT_OFFLINE;
      }
   }
}


/*******************************************************************************
/
/     Routine:       parse_answ_voice
/
/     Author:        RSA
/
/     Creation Date: 10/26/94
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the ANSWER
/                    state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parse_answ_voice(void)
{
   on_line_command = TRUE;

   /* Force the voice code in to the online command state */
   voice_connect(ANSWER);
}

/*******************************************************************************
/
/     Routine:       parse_orig_voice
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will setup the ACU state of ORIG with type
/                    VOICE
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_orig.state, st_orig.state, cmd_line[],
/               cmd_ptr
/
/     Users: st_idle_voice[], st_parse_voice[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parse_orig_voice(void)
{
   st_orig.type = VOICE;

   /* Inform the voice code that the modem is originating a call but has not
      dialed.  The voice code is responsible for going off hook if selected */
   voice_connect(ORIG_NOT_DIALED);

   send_ok = FALSE;
   valid_char = TRUE;
   error_flag = FALSE;
   modem_dte_cts(ON);
   modem_serial_echo(OFF);
   modem_td_relay(ON);
   modem_config_dtmf_dial(s[11],s[11]);

   /* Setup blind dial timer */
   timer3 = s[6] * 100;

   switch (acu_event->parm)
   {
      /* Setup the command line to not dial any number */
      case NO_DIAL:
         st_orig.state = INIT_MODEM_ORIG;
         break;

      /* Setup the command line to number stored at location 0 */
      case DIAL_NUM0:
         cmd_line[0] = 'S';
         cmd_line[1] = '\0';
         cmd_ptr = (ubyte *)&cmd_line[0];
         st_orig.state = ORIG_DIAL;
         break;

      default:
         st_orig.state = ORIG_DIAL;
         break;
   }
}

/*******************************************************************************
/
/     Routine:       orig_voice_hangup
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will process hangup events to be performed for
/                    the ORIG state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:
/
/     Users: st_orig_voice[],
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_voice_hangup(void)
{
   /* Hang up the voice code */
   voice_hangup();

   /* Reset voice variables */
   fax_class = 0;
   voice_cmd_set = NONE;
   hook_control = FALSE;
   dont_autobaud = 0;
   voice_port_rate = 0;
   on_line_command = FALSE;
   voice_inactivity_timer_on = FALSE;
   acu_cntrld_hangup = FALSE;

   /* Reset the ACU back in to AT mode */
   st_idle.type = AT_OFFLINE;
   st_parse.type = AT_OFFLINE;

   /* Disable Parsing of all VOICE online commands */
   set_voice_tia_at_cmds(OFF);
   set_voice_rock_at_cmds(OFF);
}

/*******************************************************************************
/
/     Routine:       parse_connect_voice
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will process CONNECT events performed for
/                    the PARE state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:
/
/     Users: st_orig_voice[],
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parse_connect_voice(void)
{
   st_online.type = VOICE;

   /* Wait for any messages to go to termial */
#ifndef __riscos
   while (acu_to_num());
   while (!check_all_sent());
#endif
}


/*******************************************************************************
/
/     Routine:       online_hangup_voice
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will process HANGUP events performed for
/                    the ONLINE state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:
/
/     Users: st_orig_voice[],
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_hangup_voice(void)
{
   /* Place the modem task back in to the idle state */
/* start change keh 6/5/96 => +VIT does not hangup */
/*  modem_return_to_idle(); */
   modem_reset();
/* end change keh 6/5/96 => +VIT does not hangup */


   /* Reset voice variables */
   fax_class = 0;
   voice_cmd_set = NONE;
   hook_control = FALSE;
   dont_autobaud = 0;
   voice_port_rate = 0;
   on_line_command = FALSE;

   /* Reset the ACU back in to AT mode */
   st_idle.type = AT_OFFLINE;
   st_parse.type = AT_OFFLINE;

   /* Force the modem out of voice mode */
   voice_reset();

   voice_inactivity_timer_on = FALSE;
   acu_cntrld_hangup = FALSE;
   at_h_command = FALSE;
   build_event(E_MSG,OK);
}


/*******************************************************************************
/
/     Routine:       idle_voice_v24
/
/     Author:        RSA
/
/     Creation Date: 5/24/1994.
/
/     Description:   This Routine will process V24 signal changes.
/                    DTR drop is the only event processed.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_idle_voice_on[], st_parse_voice_on[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_voice_v24(void)
{
   if (acu_event->parm == DTR_OFF)
   {
      if (sr21.DTR_control == 2)
         build_event(E_HANGUP,OK);
   }
}

/*******************************************************************************
/
/     Routine:       online_voice_v24
/
/     Author:        RSA
/
/     Creation Date: 5/24/1994.
/
/     Description:   This Routine will process V24 signal changes in voice online
/                    state. DTR drop is the only event processed.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_online_voice[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_voice_v24(void)
{
   if (acu_event->parm == DTR_OFF)
   {
      if (sr21.DTR_control == 2)
      {
         voice_hangup(); /* terminate any existing connection */
         acu_restart(); /* take back the DTE port */
         set_parms(acu_data_bits, acu_parity, acu_stop_bits);
         build_event(E_HANGUP, OK); /* respond OK after hanging up */
      }
   }
}


/*******************************************************************************
/
/     Routine:       idle_voice_msg
/
/     Author:        RSA
/
/     Creation Date: 03/23/95.
/
/     Description:   This Routine will process Message events during the IDLE
/                    state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_idle_voice[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_voice_msg(void)
{
   ubyte msg_type;

   msg_type = (ubyte)acu_event->parm;

   /* Test for messages EXCLUSIVE to voice */
   if ((msg_type >= SHIELDED_RING) && (msg_type <= COMPLEX_PACKET_END))
   {
      /* Turn off Autobaud to send message! */
      autobaud_off();

      /* Send message to the terminal... */
      output_voice_result(msg_type);

      /* Wait for message to arrive at terminal */
      if (result_message_sent == TRUE)
      {
         result_message_sent = FALSE;
#ifndef __riscos
         while (acu_to_num() > 0)
            ;
         while (!check_all_sent())
            ;
#endif
      }
      /* Reconfigure port after message */
      if (dont_autobaud == FALSE)
      {
         acu_from_clear();
         autobaud_on();
      }
      if (sr14.echo_cmd_flag && !dont_echo)
         modem_serial_echo(ON);
   }
   /* Else pass to standard idle mode messaging */
   else
   {
      idle_at_msg();
   }
}

/*******************************************************************************
/
/     Routine:       output_voice_result
/
/     Author:        RSA
/
/     Creation Date: 03/23/95.
/
/     Description:   This Routine will output messages to the terminal in states
/                    of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_idle_voice[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void output_voice_result(ubyte type)
{
   ubyte *msg;

   /* If special voice message... */
   if ((type >= SHIELDED_RING) && (type <= COMPLEX_PACKET_END))
   {
      /* Configure DTE port for message */
      modem_serial_direct(NORMAL);
      modem_serial_echo(OFF);
      set_parms(acu_data_bits,acu_parity,acu_stop_bits);

      /* Wait for the buffer to free up 10 chars */
      while (acu_to_free() < 10)
         ;
      result_message_sent = TRUE;

      /* Get and send canned message to termanal */
      msg = (ubyte *)voice_result_code_table[type-SHIELDED_RING];
      while (*msg != NULL)
         acu_to_char(*msg++);

      if (type != SHIELDED_RING)
         output_send_cr_lf();
      result_message_sent = TRUE;
   }
}


/*******************************************************************************
/
/     Routine:       idle_voice_ring
/
/     Author:        RSA
/
/     Creation Date: 03/23/95.
/
/     Description:   This Routine will process RING events during the IDLE
/                    state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_idle_voice[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_voice_ring(void)
{
   if (acu_event->parm == RINGON)
   {
      modem_ri_led(ON);
      modem_dte_ri(ON);
      if ((voice_dist_ring_active) && (!voice_dist_ring_sent))
      {
         voice_dist_ring_sent = TRUE;
         voice_dist_ring_time = voice_ring_timer;
         voice_ring_timer = 0;

         /* Send DROF (Ring-OFF cadence) to terminal */
         if ((voice_cmd_set == TIA_IS_101) && !voice_ring_rpt_timer)
            build_event(E_MSG,COMPLEX_PACKET_START);
         voice_ring_rpt_timer = 0;
         build_event(E_MSG,DROF);
      }
   }
   else if (acu_event->parm == RINGOFF)
   {
      modem_ri_led(OFF);
      modem_dte_ri(OFF);
      if (voice_dist_ring_active)
      {
         voice_dist_ring_sent = FALSE;
         voice_dist_ring_time = voice_ring_timer;
         voice_ring_timer = 0;

         /* Send DRON (Ring-ON cadence) to terminal */
         build_event(E_MSG,DRON);
      }

      /* Queue event to send the RING message back to the terminal */
      if ((voice_cmd_set == TIA_IS_101) && (!voice_dist_ring_active))
      {
         /* Send Voice Ring message (DLE+r) to terminal */
         build_event(E_MSG,SHIELDED_RING);
      }
      else
      {
         /* Send Ring message to terminal */
         /* If Distinctive Ring Report delay, wait to send RING message */
         if (voice_dist_ring_active && voice_dist_ring_intvl)
         {
            voice_ring_rpt_timer = voice_dist_ring_intvl;
         }
         /* Else send RING Now */
         else
         {
            /* Send standard RING message to terminal */
            build_event(E_MSG,RING);
            /* Complex message END for Voice Mode only */
            if (voice_cmd_set == TIA_IS_101)
               build_event(E_MSG,COMPLEX_PACKET_END);
         }
      }
   }
}


/*******************************************************************************
/
/     Routine:       orig_voice_msg
/
/     Author:        RSA
/
/     Creation Date: 03/29/95.
/
/     Description:   This Routine will process Message events during the ORIG
/                    state of type VOICE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_idle_voice[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_voice_msg(void)
{
   ubyte msg_type;
   msg_type = (ubyte)acu_event->parm;

   /* Test for messages exclusive to voice */
   if ((msg_type >= SHIELDED_RING) && (msg_type <= COMPLEX_PACKET_END))
   {
      /* Send message to the terminal... */
      output_voice_result(msg_type);

      /* Wait for message to arrive at terminal */
      if (result_message_sent == TRUE)
      {
         result_message_sent = FALSE;
#ifndef __riscos
         while (acu_to_num() > 0)
            ;
         while (!check_all_sent())
            ;
#endif
      }
   }
   /* Else pass to standard DATA mode messaging */
   else
   {
      orig_at_msg();
   }
}

