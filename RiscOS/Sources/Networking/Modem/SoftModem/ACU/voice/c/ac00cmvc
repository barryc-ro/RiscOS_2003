/****************************************************************************
/
/     Copyright 1993,1994,1995,1996.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00cmvc.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains driver routines for the Voice AT
/                       commands.  The Voice AT commands listed in this file
/                       are either supported by Modules other than Voice
/                       (i.e. FAX), or have functional demands that fall
/                       under ACU control (i.e. RING control).
/
/     Product:          ACU Digital Voice Driver
/
/     History:          ac00cp.c V4.02
/
/        Created:       2/9/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vce.h"
#include "vce_pro.h"
#include "mt_pro.h"
#include "fp_pro.h"
#include "par_def.h"
#include "par_pro.h"

/* Local voice routines */
void set_voice_acu_at_cmds(ubyte);
void acu_vce_command(uword,ubyte);
void acu_vce_query(uword);
void acu_vce_command_error(void);
void acu_config_voice(void);
void voice_plus_FMR(void);
void plus_VPR_eq(void);
void plus_VPR_e(ubyte *);
void plus_VPR_q(void);
void plus_VIP_eq(void);
void plus_VIP_e(void);
void plus_VNH_eq(void);
void plus_VNH_e(ubyte *);
void plus_VNH_q(void);
void plus_VCID_eq(void);
void plus_VCID_e(ubyte *);
void plus_VCID_q(void);
void plus_VDR_eq(void);
void plus_VDR_e(ubyte *);
void plus_VDT_eq(void);
void plus_VDT_e(ubyte *);
void plus_VPP_eq(void);
void plus_VPP_e(ubyte *);
void plus_VPP_q(void);
void pnd_BDR_eq(void);
void pnd_BDR_e(ubyte *);
void pnd_BDR_q(void);
void pnd_CID_eq(void);
void pnd_CID_q(void);
void pnd_CID_e(ubyte *);
void pnd_CLS_eq(void);
void pnd_CLS_q(void);
void pnd_CLS_e(ubyte *);
void pnd_MDL_q(void);
void pnd_MFR_q(void);
void pnd_REV_q(void);

/* External Routines used locally */
extern void set_voice_tia_at_cmds(ubyte);
extern void set_voice_rock_at_cmds(ubyte);


/******************************************************************************
/
/                  Parser Structure for TIA Voice commands
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
PARSE_CMD_TABLE_STRUCT voice_acu_commands []=
{
/* Fax commands defined by TIA IS-101 (Requires the
  ACU FAX AT Command Driver (ac00cmfx.c) */
/*  "+FCLASS=?",   plus_FCLASS_eq, NO_PARAM,           SEMICOL_END,
 *  "+FCLASS=",    plus_FCLASS_e,  REAL_NUM_STRING,    SEMICOL_END,
 *  "+FCLASS?",    plus_FCLASS_q,  NO_PARAM,           SEMICOL_END,
 *  "+FMI?",       plus_FMI,       NO_PARAM,           SEMICOL_END,
 *  "+FMM?",       plus_FMM,       NO_PARAM,           SEMICOL_END,
 *  "+FLO=?",      plus_FLO_eq,    NO_PARAM,           SEMICOL_END,
 *  "+FLO=",       plus_FLO_e,     BYTE_NUMERIC,       SEMICOL_END,
 *  "+FLO?",       plus_FLO_q,     NO_PARAM,           SEMICOL_END,
 */
/* TIA Voice AT Commands that specify ACU funcitons */
    (ubyte *) "+FMR?",   voice_plus_FMR,NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VPR=?",  plus_VPR_eq,   NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VPR=",   plus_VPR_e,    BYTE_NUMERIC,   SEMICOL_END,
    (ubyte *) "+VPR?",   plus_VPR_q,    NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VIP=?",  plus_VIP_eq,   NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VIP",    plus_VIP_e,    NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VNH=?",  plus_VNH_eq,   NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VNH=",   plus_VNH_e,    BYTE_NUMERIC,   SEMICOL_END,
    (ubyte *) "+VNH?",   plus_VNH_q,    NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VCID=?", plus_VCID_eq,  NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VCID=",  plus_VCID_e,   BYTE_NUMERIC,   SEMICOL_END,
    (ubyte *) "+VCID?",  plus_VCID_q,   NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VDR=?",  plus_VDR_eq,   NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VDR=",   plus_VDR_e,    COMPOUND_BYTE,  SEMICOL_END,
    (ubyte *) "+VDT=?",  plus_VDT_eq,   NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VDT=",   plus_VDT_e,    COMPOUND_BYTE,  SEMICOL_END,
    (ubyte *) "+VPP=?",  plus_VPP_eq,   NO_PARAM,       SEMICOL_END,
    (ubyte *) "+VPP=",   plus_VPP_e,    BYTE_NUMERIC,   SEMICOL_END,
    (ubyte *) "+VPP?",   plus_VPP_q,    NO_PARAM,       SEMICOL_END,

/* TIA IS 101 Voice commands not supported...
 *  "+VDID=?",          plus_VDID_eq,   NO_PARAM,       SEMICOL_END,
 *  "+VDID=",           plus_VDID_e,    BYTE_NUMERIC,   SEMICOL_END,
 *  "+VDID?",           plus_VDID_q,    NO_PARAM,       SEMICOL_END,
 */

/* Rockwell Voice AT Commands that specify ACU funcitons */
    (ubyte *) "#BDR=?",  pnd_BDR_eq,    NO_PARAM,       SEMICOL_END,
    (ubyte *) "#BDR=",   pnd_BDR_e,     BYTE_NUMERIC,   SEMICOL_END,
    (ubyte *) "#BDR?",   pnd_BDR_q,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "#CID=?",  pnd_CID_eq,    NO_PARAM,       SEMICOL_END,
    (ubyte *) "#CID=",   pnd_CID_e,     BYTE_NUMERIC,   SEMICOL_END,
    (ubyte *) "#CID?",   pnd_CID_q,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "#CLS=?",  pnd_CLS_eq,    NO_PARAM,       SEMICOL_END,
    (ubyte *) "#CLS=",   pnd_CLS_e,     BYTE_NUMERIC,   SEMICOL_END,
    (ubyte *) "#CLS?",   pnd_CLS_q,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "#MDL?",   pnd_MDL_q,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "#MFR?",   pnd_MFR_q,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "#REV?",   pnd_REV_q,     NO_PARAM,       SEMICOL_END,
    END_OF_PARSE_TABLE
};



/*******************************************************************************
/
/     Routine:       set_voice_acu_at_cmds
/
/     Author:        RSA
/
/     Creation Date: 12/16/94
/
/     Description:   This Routine enables parsing of ACU VOICE AT commands.
/                    These are commands defined by voice specifications
/                    which are implemented by the ACU.
/
/     Input Parameters: state - OFF (0) to disable, ON (otherwise) to enable.
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void set_voice_acu_at_cmds(ubyte state)
{
   if (state == OFF)
       at_parser_tables(DISABLE_TABLE,voice_acu_commands);
   else
       at_parser_tables(ENABLE_TABLE,voice_acu_commands);
}


/*******************************************************************************
/
/     Routine:       acu_vce_command_error
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This is called when any VOICE AT command has an error.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: error_occurred
/
/     Users: All VOICE AT command action routines
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_vce_command_error(void)
{
    error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       acu_config_voice
/
/     Author:        RSA
/
/     Creation Date: 12/16/94
/
/     Description:   This Routine configures the VOICE module with
/                    the current ACU parameters.  It is typically called
/                    before voice command executions to update voice to
/                    the current non-voice specific conditions of the ACU.
/
/     Input Parameters:   None.
/
/     Output Parameters:  None
/
/     Global Variables Changed:  None.
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_config_voice(void)
{
   /* Rockwell voice does not define a flow control command */
   if (voice_cmd_set == ROCKWELL)
   {
       switch (slQ)
       {
           case 3:
           case 2:
               fax_flow_control = CTS_RTS;
               break;

           case 1:
           case 0:
               fax_flow_control = XON_XOFF;
               break;
       }
   }

   voice_configure(dte_baud,voice_cmd_set,sr22.speaker_vol,fax_flow_control,
               voice_caller_id);
}

/******************************************************************************
/
/     Routine:       voice_plus_FMR
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT_FMR?"
/                    The +FRM? command is used to report the Manufacture Revision
/                    string.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void voice_plus_FMR(void)
{
    output_info(VOICE_FMR_IDENTIFICATION,VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_VPR_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VPR=?"
/                    The +VPR command is used to set DTE Rate.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VPR_eq(void)
{
    output_info((ubyte *)PND_BDR_QUERY,VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_VPR_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VPR="
/                    The +VPR command is used to set DTE Rate.
/                    This routine will set DTE Rate.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VPR_e(ubyte *parm_ptr)
{
   ubyte rate = 0;

   /* Which rate was requested? */
   switch (*parm_ptr)
   {
      case 0: dont_autobaud = FALSE;
         break;
      case 1: rate = BPS2400;
         break;
      case 2: rate = BPS4800;
         break;
      case 3: rate = BPS7200;
         break;
      case 4: rate = BPS9600;
         break;
      case 5: rate = BPS12000;
         break;
      case 6: rate = BPS14400;
         break;
      case 7: rate = BPS16800;
         break;
      case 8: rate = BPS19200;
         break;
      case 16: rate = BPS38400;
         break;
      case 24: rate = BPS57600;
         break;
      case 48: rate = BPS115200;
         break;
      default:
         acu_vce_command_error();
         return; /* Don't fall through! */
   }

   /* If we've gotten this far, its a vaild command, so */
   /* Set command variable, and corresponding ACU Baud value */
   voice_port_rate = *parm_ptr;
   new_dte_baud = rate;

   /* If a rate has been set... */
   if (rate)
   {
      dont_autobaud = TRUE;       /* Force the ACU to remain at the new rate */
      voice_inactivity_timer_on = TRUE;   /* Start deadman timer */
      voice_enable_inact_timer();
   }
}

/******************************************************************************
/
/     Routine:       plus_VPR_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VPR?"
/                    The +VPR command is used to set DTE Rate.
/                    This routine responds to the terminal with
/                    the current command value.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VPR_q(void)
{
   output_info(d_to_a(voice_port_rate), VERBOSE_FORM);
}


/******************************************************************************
/
/     Routine:       plus_VIP_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VIP=?"
/                    The +VIP command is used to initialize Voice Parameters.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VIP_eq(void)
{
   /* Only output OK, verifing command support */
}

/******************************************************************************
/
/     Routine:       pnd_VIP_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VIP="
/                    The +VIP command is used to initialize Voice Parameters.
/                    This routine will initialize Voice Parameters.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VIP_e(void)
{
   /* Init the AT commands */
   voice_command_init(voice_cmd_set);

   /* Init the Voice Module */
   initialize_voice(VOICE_INIT_VIP);
}


/******************************************************************************
/
/     Routine:       plus_VNH_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VNH=?"
/                    The +VNH command is used to set the Hangup condition.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VNH_eq(void)
{
   output_info((ubyte *)"(0-1)",VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_VNH_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VNH="
/                    The +VNH command is used to set the Hangup condition.
/                    This routine will set the Hangup condition.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VNH_e(ubyte *parm_ptr)
{
   if (*parm_ptr <= 1)
      acu_cntrld_hangup = *parm_ptr;
   else
      acu_vce_command_error();
}

/******************************************************************************
/
/     Routine:       plus_VNH_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VNH?"
/                    The +VNH command is used to set the Hangup condition.
/                    This routine responds to the terminal with
/                    the current command value.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VNH_q(void)
{
   output_info(d_to_a(acu_cntrld_hangup), VERBOSE_FORM);
}


/******************************************************************************
/
/     Routine:       plus_VCID_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VCID=?"
/                    The +VCID command is used to configure voice Caller ID.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VCID_eq(void)
{
   output_info((ubyte *)PND_CID_QUERY,VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_VCID_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VCID="
/                    The +VCID command is used to configure voice Caller ID.
/                    This routine will configure voice Caller ID.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VCID_e(ubyte *parm_ptr)
{
   if (*parm_ptr >= 0)
      voice_caller_id = *parm_ptr;
   else
      acu_vce_command_error();
}

/******************************************************************************
/
/     Routine:       plus_VCID_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VCID?"
/                    The +VCID command is used to configure voice Caller ID.
/                    This routine responds to the terminal with
/                    the current command value.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VCID_q(void)
{
   output_info(d_to_a(voice_caller_id), VERBOSE_FORM);
}


/******************************************************************************
/
/     Routine:       plus_VDR_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VDR=?"
/                    The +VDR command is used to set the Distinctive Ring report.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VDR_eq(void)
{
   output_info((ubyte *)"0-255", VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_VDR_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VDR="
/                    The +VDR command is used to set the Distinctive Ring report.
/                    This routine will set the Distinctive Ring reporting.
/
/     Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/
/       Parameter structure for AT command's w/ compound byte values
/        [f,p,f,p,...0] (f=field, p=parameter value, 0 is end of parameters)
/       Example:
/           AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00]
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VDR_e(ubyte *parm_ptr)
{
   ubyte field,value,i;

   /* Command format: at+vdr=e,r
      where field 1 (e) = enable, and field 2 (r) = report.
      if e = 0, r is N/A,
      if e = 1 and r = 0, reporting of DRON/DROFF is enabled.
      if e = 1 and r != 0, r == reserved (report error)
   */
   /* 3 fields to parse, Enable,Report, and END */
   for (i=0; i<3; i++)
   {
      field = *parm_ptr++;
      value = *parm_ptr++;
      switch (field)
      {
         case 0:
            /* If no fields are present (i==0 and AT+VDR=<CR>) set
               the defaults, otherwise its the endof parameter array */
            if (i==0)
            {
               voice_dist_ring_active = FALSE;
               voice_dist_ring_intvl = 0;
            }
            return;

         case 1:
            /* If field 1 (ENABLE) is present, check it's value. */
            /* 0 == Disabled (AT+VDR=0) */
            if (value == 0)
            {
               voice_dist_ring_active = FALSE;

               /* Any other values are N/A, so return */
               return;
            }
            /* 1 == Enable */
            else if (value == 1)
            {
               /* AT+VDR=1 */
               voice_dist_ring_active = TRUE;
            }
            /* Else out of bounds */
            else
            {
               acu_vce_command_error();
               return;
            }
            break;

         case 2:
            /* If field 2 (REPORT) is present all values are spec'ed. */
            voice_dist_ring_intvl = value;
            break;

         default:
            acu_vce_command_error();
            return;
      }  /* switch on parameter field */
   } /* for */

   /* If we exit the FOR loop there were more than 2 parameters for
      the command... */
   acu_vce_command_error();
}


/******************************************************************************
/
/     Routine:       plus_VDT_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VDT=?"
/                    The +VDT command is used to set Callback Cadence reporting.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VDT_eq(void)
{
   output_info((ubyte *)"0-255", VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_VDT_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the TIA Voice command:
/                       "AT+VDT="
/                    The +VDT command is used to set Callback Cadence reporting.
/                    This routine will set Callback Cadence reporting.
/
/     Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/
/       Parameter structure for AT command's w/ compound byte values
/        [f,p,f,p,...0] (f=field, p=parameter value, 0 is end of parameters)
/       Example:
/           AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00]
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VDT_e(ubyte *parm_ptr)
{
   ubyte field,value,i;

   /* Command format: at+vdt=e,r
      where field 1 (e) = enable, and field 2 (r) = report.
      if e = 0, r is N/A,
      if e = 1 and r = 0, reporting of CPON,OFF is enabled.
      if e = 1 and r != 0, reserved (report error)
      */
   /* 3 fields to parse, Enable,Report, and END */
   for (i=0; i<3; i++)
   {
      field = *parm_ptr++;
      value = *parm_ptr++;
      switch (field)
      {
         case 0:
            /* If no fields are present (AT+VDT=<CR>) set the defaults,
               otherwise its the endof parameter array */
            if (i==0)
            {
               /* Defaults */
               voice_dist_ctl_active = FALSE;
               voice_dist_ctl_intvl = 0;
               voice_enable_cadence_rpt(voice_dist_ctl_active,
                  voice_dist_ctl_intvl);
            }
            return;

         case 1:
            /* If field 1 (ENABLE) is present, check it's value. */
            /* 0 == Disabled (AT+VDT=0) */
            if (value == 0)
            {
               voice_dist_ctl_active = FALSE;
               voice_enable_cadence_rpt(voice_dist_ctl_active,0);

               /* Any other values are N/A, so return */
               return;
            }
            /* 1 == Enabled (AT+VDT=1) */
            else if (value == 1)
            {
               voice_dist_ctl_active = TRUE;
               voice_enable_cadence_rpt(voice_dist_ctl_active,
                  voice_dist_ctl_intvl);
            }
            /* Else out of bounds */
            else
            {
               acu_vce_command_error();
               return;
            }
            break;

         case 2:
            /* Test Enable parameter: 0 = disabled (AT+VDT=0) */
            if (value == 0)
            {
               voice_dist_ctl_intvl = 0;
               voice_enable_cadence_rpt(voice_dist_ctl_active,
                  voice_dist_ctl_intvl);
            }
            /* Non-zero is reserved for further study */
            else
            {
               acu_vce_command_error();
               return;
            }
            break;

         default:
            acu_vce_command_error();
            return;
      }  /* switch on parameter field */
   } /* for */

   /* If we exit the FOR loop there were more than 2 parameters for
      a 2 parameter only command */
   acu_vce_command_error();
}


/******************************************************************************
/
/     Routine:       plus_VPP_eq
/
/     Author:        RSA
/
/     Creation Date: 12/16/95
/
/     Description:   This routine is called to implement the VOICE command:
/                          "AT+VPP=?"
/                    The +VPP command is used to set the Packet Protocol Parm.
/                    This routine will output an ASCII string representing
/                    the allowed values for the "AT+VPP=<value>" command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VPP_eq(void)
{
   /* Respond to dte with capability */
   output_info((ubyte *)FAX_FPP_QUERY, VERBOSE_FORM);
}


/******************************************************************************
/
/     Routine:       plus_VPP_e
/
/     Author:        RSA
/
/     Creation Date: 12/16/95
/
/     Description:   This routine is called to implement the FAX command:
/                          "AT+VPP=<value>"
/                    The +VPP command is used to set the Packet Protocol Parm.
/                    This action routine will set the Packet Protocol Parameter.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VPP_e(ubyte *parm_ptr)
{
   ubyte num;

   /* Get AT command parameter locally */
   num = *parm_ptr;

   /* Only 1 and 0 are valid AT command parms for +VPP */
   if (num <= 1)
   {
      /* if the value changed, and fax is active, reconfigure the I/O */
      if (fax_packet_protocol != num && fax_class)
      {
#ifndef __riscos
         while (acu_to_num());          /* make sure all the outgoing data */
         while (!check_all_sent());     /* is flushed */
#endif
         if (num)
         {
            acu_packet_protocol(ON, PP_TIMEOUT);
            dont_echo = TRUE;
         }
         else
         {
            acu_packet_protocol(OFF, PP_TIMEOUT);
            dont_echo = FALSE;
         }
      }
      fax_packet_protocol = num;  /* assign new value */
   }
   else
   {
      acu_vce_command_error();
   }
}

/******************************************************************************
/
/     Routine:       plus_VPP_q
/
/     Author:        RSA
/
/     Creation Date: 12/16/95
/
/     Description:   This routine is called to implement the FAX command:
/                          "AT+VPP?"
/                    The +VPP command is used to set the Packet Protocol Parm.
/                    This routine will output an ASCII string representing
/                    the current Packet Protocol Parameter.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_VPP_q(void)
{
   output_info(d_to_a(fax_packet_protocol), VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       pnd_BDR_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#BDR=?"
/                    The #BDR command is used to set DTE Rate.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_BDR_eq(void)
{
   output_info((ubyte *)PND_BDR_QUERY,VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       pnd_BDR_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:    This routine is called to implement the Rockwell Voice
/                          command: "AT#BDR="
/                    The #BDR command is used to set DTE Rate.
/                    This routine will set DTE Rate.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_BDR_e(ubyte *parm_ptr)
{
   ubyte ch;

   ch = *parm_ptr;

   /* Parameter out-of-bounds checking */
   if (! ((ch <= 8) || (ch == 16) || (ch == 24) || (ch == 48)))
   {
      acu_vce_command_error();
   }
   /* Else parameter is in bounds */
   else
   {
      voice_port_rate = ch;

      /* Determine what the new baud rate should be */
      /* Zero is autobaud */
      if (ch == 0)
      {
         dont_autobaud = FALSE;
         new_dte_baud = 0;
      }
      else
      {
            voice_inactivity_timer_on = TRUE;   /* Start deadman timer */
            voice_enable_inact_timer();

            dont_autobaud = TRUE;
            switch (ch)
            {
               case 1: new_dte_baud = BPS2400;
                   break;
               case 2: new_dte_baud = BPS4800;
                   break;
               case 3: new_dte_baud = BPS7200;
                   break;
               case 4: new_dte_baud = BPS9600;
                   break;
               case 5: new_dte_baud = BPS12000;
                   break;
               case 6: new_dte_baud = BPS14400;
                   break;
               case 7: new_dte_baud = BPS16800;
                   break;
               case 8: new_dte_baud = BPS19200;
                   break;
               case 16: new_dte_baud = BPS38400;
                   break;
               case 24: new_dte_baud = BPS57600;
                   break;
               case 48: new_dte_baud = BPS115200;
                   break;
            }
      }
   }
}


/******************************************************************************
/
/     Routine:       pnd_BDR_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#BDR?"
/                    The #BDR command is used to set DTE Rate.
/                    This routine responds to the terminal with
/                    the current command value.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_BDR_q(void)
{
   output_info(d_to_a(voice_port_rate), VERBOSE_FORM);
}


/******************************************************************************
/
/     Routine:       pnd_CID_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#CID=?"
/                    The #CID command is used to set Caller ID options.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_CID_eq(void)
{
   output_info((ubyte *)PND_CID_QUERY,VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       pnd_CID_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#CID?"
/                    The #CID command is used to set Caller ID options.
/                    This routine responds to the terminal with
/                    the current command value.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_CID_q(void)
{
   output_info(d_to_a(voice_caller_id), VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       pnd_CID_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#CID="
/                    The #CID command is used to set Caller ID options.
/                    This routine will set Caller ID options.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_CID_e(ubyte *parm_ptr)
{
   if (*parm_ptr == 0)
      voice_caller_id = *parm_ptr;
   else
      acu_vce_command_error();
}


/******************************************************************************
/
/     Routine:       pnd_CLS_eq
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#CLS=?"
/                    The #CLS command is used to set Rockwell voice mode.
/                    This routine responds to the terminal with
/                    the vaild command input.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_CLS_eq(void)
{
   output_info((ubyte *)PND_CLS_QUERY,VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       pnd_CLS_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#CLS?"
/                    The #CLS command is used to set Rockwell voice mode.
/                    This routine responds to the terminal with
/                    the current command value.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_CLS_q(void)
{
   output_info(d_to_a(fax_class), VERBOSE_FORM);
}

/* start change keh 6/5/96 => vce to fax fails on winfax */
/******************************************************************************
/
/     Routine:       acu_verify_class_switch
/
/     Author:        RSA
/
/     Creation Date: 6/5/96
/
/     Description:   This routine is tests the current state of voice
/                    and configures the ACU to allow a voice to fax
/                    context switch.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_verify_class_switch(void)
{
   /* Rockwell Voice uses ATA to start a fax call from voice.
       We must not be faxing, but in on-line voice mode to allow ATA again */
   if (!fax_connected && fax_class == 8 && on_line_command)
   {
       /* Allow for call discrimination (hangup w/out acutally hanging up) */
       acu_cntrld_hangup = TRUE;
       acu_hangup_line = FALSE;
       on_line_command=FALSE;
   }
}
/* end change keh 6/5/96 => vce to fax fails on winfax */

/******************************************************************************
/
/     Routine:       pnd_CLS_e
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#CLS="
/                    The #CLS command is used to set Rockwell voice mode.
/                    This routine will set Rockwell voice mode.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_CLS_e(ubyte *parm_ptr)
{
   if (*parm_ptr == 0)
   {
       if (!fax_connected)
       {
           acu_cntrld_hangup = FALSE;

           fax_class = 0;              /* Take ACU out of fax mode */

           /* Take ACU out of voice mode */
           acu_voice_cmd_init(NO_VOICE);

           /* Take ACU out of voice view mode */
           acu_vv_cmd_init(OFF);

           /* Return ACU to only Data */
           build_event(E_PARSE, CONN_DATA);

           /* Enable parsing of all fax commands in data mode.  This is
               in violation of the FAX specs, but all fax applications
               ignore this */
           if (acu_cfg.fax_class & CLASS1_ENABLED_MASK)
               acu_set_fax1_commands(ON);
           if (acu_cfg.fax_class & CLASS2_ENABLED_MASK)
               acu_set_fax2_commands(ON);
           if (acu_cfg.fax_class & CLASS20_ENABLED_MASK)
               acu_set_fax20_commands(ON);
       }
   }
   else if (*parm_ptr == 1)
   {
/* start change keh 6/5/96 => vce to fax fails on winfax */
       /* Rockwell uses ATA to go from voice to fax */
       acu_verify_class_switch();
       build_event(E_PARSE,CONN_DATA);
/* end change keh 6/5/96 => vce to fax fails on winfax */

       fax_class = 1;

       /* Enable FAX 1 commands */
       acu_set_fax1_commands(ON);

       /* Disable other +FCLASS= modules AT commands */
       acu_voice_cmd_init(NO_VOICE);   /* Voice */
       acu_vv_cmd_init(OFF);           /* Voice View */
       acu_set_fax2_commands(OFF);     /* Fax Class 2 */
       acu_set_fax20_commands(OFF);    /* Fax Class 2.0 */
   }
   else if (*parm_ptr == 2)
   {
/* start change keh 6/5/96 => vce to fax fails on winfax */
       /* Rockwell uses ATA to go from voice to fax */
       acu_verify_class_switch();
       build_event(E_PARSE,CONN_DATA);
/* end change keh 6/5/96 => vce to fax fails on winfax */
       fax_class = 2;

       /* Enable Class 2 commands */
       acu_set_fax2_commands(ON);

       /* Disable other +FCLASS= modules AT commands */
       acu_voice_cmd_init(NO_VOICE);   /* Voice */
       acu_vv_cmd_init(OFF);           /* Voice View */
       acu_set_fax1_commands(OFF);     /* Fax Class 1 */
       acu_set_fax20_commands(OFF);    /* Fax Class 2.0 */
   }
   else if (*parm_ptr == 8)
   {
       voice_init(VOICE_INIT_CLS_8);
       voice_cmd_set = ROCKWELL;
       fax_class = *parm_ptr;
       hook_control = TRUE;
       fax_flow_control = CTS_RTS;

       acu_voice_cmd_init(ROCKWELL);

       /* Disable other +FCLASS= modules AT commands */
       acu_vv_cmd_init(OFF);           /* Voice View */
       acu_set_fax1_commands(OFF);     /* Fax Class 1 */
       acu_set_fax2_commands(OFF);     /* Fax Class 2 */
       acu_set_fax20_commands(OFF);    /* Fax Class 2.0 */

       /* If voice is selected the place the ACU into a voice
           processing state */
       build_event(E_PARSE,CONN_VOICE);
   }
   else
   {
       acu_vce_command_error();
   }
}

/******************************************************************************
/
/     Routine:       pnd_MDL_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#MDL?"
/                    This routine responds to the terminal with
/                    the Manufactureer Model Number.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_MDL_q(void)
{
   output_info((ubyte *)MDL_REQUEST,VERBOSE_FORM);
}


/******************************************************************************
/
/     Routine:       pnd_MFR_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#MFR?"
/                    This routine responds to the terminal with
/                    the Manufactureer ID.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void pnd_MFR_q(void)
{
   output_info(VOICE_MFR_IDENTIFICATION,VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       pnd_REV_q
/
/     Author:        RSA
/
/     Creation Date: 2/16/95
/
/     Description:   This routine is called to implement the Rockwell Voice
/                          command: "AT#REV?"
/                    This routine responds to the terminal with
/                    the Firmware Revision Number.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT voice_acu_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/
*******************************************************************************/
void pnd_REV_q(void)
{
    output_info((ubyte *)REV_REQUEST,VERBOSE_FORM);
}
