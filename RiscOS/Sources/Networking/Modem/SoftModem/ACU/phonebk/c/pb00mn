/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             pb00mn.c
/
/     Module Version:   ACU 5.00
/
/     Function:         Contains the core routines for the Phonebook Submodule.
/
/     Product:          ACU Core Code
/
/     History:
/
/        Created:       9/5/1995.
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "phbk_def.h"
#include "phbk_pro.h"
#include "phbk_mem.h"
#include "v25_def.h"
#include "ee_def.h"
#include "mt_pro.h"

void phbk_init(void);
void phbk_read_entry(ubyte,ubyte *);
void phbk_write_entry(ubyte, ubyte *);
void phbk_delete_entry(ubyte);
void phbk_error(ubyte);
void phbk_empty_entry(void);

/*******************************************************************************
/
/   Routine: phbk_init
/
/   Author: RSA
/
/   Creation Date: 9/5/1995.
/
/   Description: This routine is called to determine the Phonebook Capabilities
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed: phbk_cmee_flag, phbk_number_length, phbk_text_length,
/                             phbk_max_entries, phbk_last_accessed, phbk_head_of_list
/   Users:
/
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:
/   Description:
/   Reason:
/
*******************************************************************************/
void phbk_init(void)
{
   ubyte i, error;
   uword eeprom_addr, eeprom_size;
   ubyte *entry_ptr;

   /* Initialize all the Phonebook Variables */
   phbk_cmee_flag = TRUE;
   phbk_number_length = PHBK_NUMBER_SIZE;
   phbk_text_length = PHBK_TEXT_SIZE;
   phbk_max_entries = PHBK_MAX_INDICIES;
   phbk_last_accessed = INVALID;

   /* Get the stored first element index in the list */
   error = modem_read_data(PHBK_FIRST_ENTRY,1,&phbk_head_of_list);

   if ((!phbk_head_of_list) || (phbk_head_of_list > phbk_max_entries) || error)
      phbk_head_of_list = EMPTY_LIST;
   else
   {
      /* Read the phonebook in from the Non-Volatile Memory */
      eeprom_size = sizeof(struct phbk_bcd_entry_struct);

      for (i = 0; i < phbk_max_entries; i++)
      {
         eeprom_addr = (PHBK_BASE + (eeprom_size * i));
         entry_ptr = &phonebook_entry[i].num[0];
         error = modem_read_data(eeprom_addr,eeprom_size,entry_ptr);
         if (error)
            phbk_error(UNKNOWN);

         /* Clear out read in RAM locations in case garbage from EEPROM */
         if (phonebook_entry[i].in_use != TRUE)
         {
            phonebook_entry[i].next = EMPTY_LIST;
            phonebook_entry[i].previous = EMPTY_LIST;
            phonebook_entry[i].in_use = FALSE;
         }
      }
   }
}

/*******************************************************************************
/
/   Routine: phbk_read_entry
/
/   Author: RSA
/
/   Creation Date: 9/5/1995.
/
/   Description: This routine is called to read an entry from the Phonebook
/                Submodule.
/
/   Input Parameters: index - the index into the phonebook
/                     *src - pointer to the table src of the phonebook
/
/   Output Parameters: none
/
/   Global Variables Changed:  phbk_last_accessed
/
/   Users:
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:
/   Description:
/   Reason:
/
*******************************************************************************/
void phbk_read_entry(ubyte index, ubyte *src)
{
   ubyte temp_array[PHBK_NUMBER_SIZE], *temp_ptr, count;

   /* Set temp pointer to first char in number field */
   phbk_BCD_to_a((ubyte *)&phonebook_entry[index-1].num, temp_array);
   temp_ptr = &temp_array[0];

   /* Insert the first comma into the array after the index string */
   *src++ = ',';

   while (*temp_ptr != '\0')
      *src++ = *temp_ptr++;

   /* Place comma in between number and text fields */
   *src++ = ',';

   /* Set temp pointer to first char in text field */
   temp_ptr = (ubyte *)&phonebook_entry[index-1].text;
   count = 0;
   do
   {
      *src++ = *temp_ptr;
      count++;
   }
   while ((*temp_ptr++ != '\0') && (count < PHBK_TEXT_SIZE));

   /* End the current string with null */
   *src++ = '\0';

}

/*******************************************************************************
/
/   Routine: phbk_write_entry
/
/   Author: RSA
/
/   Creation Date: 9/5/1995.
/
/   Description: This routine is called to write an entry from the Phonebook
/                Submodule.
/
/   Input Parameters: index - the index into the stored phonebook
/                     *entry - a pointer into the current text entry.
/
/   Output Parameters: none
/
/   Global Variables Changed:  phonebook_entry, phbk_last_accessed
/
/   Users:
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:
/   Description:
/   Reason:
/
*******************************************************************************/
void phbk_write_entry(ubyte index, ubyte *entry)
{
   /* if the entry is already IN_USE, need to delete the
      existing entry and re-adjust the the next and previous
      indicies */
   if (phonebook_entry[index-1].in_use)
      phbk_delete_entry(index);

   /* Set the in_use field in the structure for the new entry */
   phonebook_entry[index-1].in_use = TRUE;

   /* Find and place the entry in the correct alphabetic position in the list */
   phbk_alphabetic_pos(entry, index);

   /* Adjust the last accessed for the next reference. 1 is added
      because the indices of the phonebook start at 1 not 0 */
   phbk_last_accessed = index;

}

/*******************************************************************************
/
/   Routine: phbk_delete_entry
/
/   Author: RSA
/
/   Creation Date: 9/5/1995.
/
/   Description: This routine is called to delete an entry from the Phonebook
/                Submodule.
/
/   Input Parameters: index - the index into the stored phonebook
/
/   Output Parameters: none
/
/   Global Variables Changed:  phbk_last_accessed, phbk_head_of_list,
/                          phonebook_entry
/
/   Users:
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:
/   Description:
/   Reason:
/
*******************************************************************************/
void phbk_delete_entry(ubyte index)
{
   ubyte saved_next, saved_previous, error;
   uword eeprom_addr, eeprom_size;

   eeprom_size = sizeof(struct phbk_bcd_entry_struct);

   /* Save the NEXT and PREVIOUS values in the structure
      and adjust the links accordingly */
   if (phonebook_entry[index-1].previous == phonebook_entry[index-1].next)
   {
      /* Remove only entry in the current phonebook */
      phbk_last_accessed = INVALID;

      /* Adjust the head index in RAM and EEPROM */
      phbk_head_of_list = EMPTY_LIST;
      eeprom_addr = PHBK_FIRST_ENTRY;
      error = modem_write_data(eeprom_addr,1,&phbk_head_of_list);

   }
   else if (phonebook_entry[index-1].previous == index)
   {
      /* Remove the first entry (A) in the phonebook (A->B) in RAM and EEPROM */
      saved_next = phonebook_entry[index-1].next;
      phonebook_entry[saved_next-1].previous = saved_next;
      eeprom_addr = ((PHBK_BASE + (eeprom_size * (saved_next-1))) + PHBK_EE_PREV_ADDR);
      error = modem_write_data(eeprom_addr,1,&phonebook_entry[saved_next-1].previous);

      phbk_head_of_list = saved_next;
      /* Adjust the HEAD INDEX then the PREVIOUS field in EEPROM */
      eeprom_addr = PHBK_FIRST_ENTRY;
      error = modem_write_data(eeprom_addr,1,&phbk_head_of_list);
   }
   else if (phonebook_entry[index-1].next == index)
   {
      /* Remove the final entry (B) in the phonebook (A->B) */
      saved_previous = phonebook_entry[index-1].previous;
      phonebook_entry[saved_previous-1].next = saved_previous;

      /* Adjust the NEXT field in EEPROM */
      eeprom_addr = ((PHBK_BASE + (eeprom_size * (saved_previous-1))) + PHBK_EE_NEXT_ADDR);
      error = modem_write_data(eeprom_addr,1,&phonebook_entry[saved_previous-1].next);
   }
   else
   {
      /* Remove an entry (B) in the middle of the linked list (A->B->C) */
      saved_previous = phonebook_entry[index-1].previous;
      saved_next = phonebook_entry[index-1].next;

      /* Adjust the previous->next and the next->previous values */
      phonebook_entry[saved_previous-1].next = saved_next;
      phonebook_entry[saved_next-1].previous = saved_previous;

      /* Adjust the NEXT field AND PREVIOUS fields in EEPROM */
      eeprom_addr = ((PHBK_BASE + (eeprom_size * (saved_previous-1))) + PHBK_EE_NEXT_ADDR);
      error = modem_write_data(eeprom_addr,1,&phonebook_entry[saved_previous-1].next);
      eeprom_addr = ((PHBK_BASE + (eeprom_size * (saved_next-1))) + PHBK_EE_PREV_ADDR);
      error = modem_write_data(eeprom_addr,1,&phonebook_entry[saved_next-1].previous);
   }

   /* Clear the in_use flag of the deleted entry */
   phonebook_entry[index-1].in_use = FALSE;

   /* Clear the in_use flag in EEPROM */
   eeprom_addr = ((PHBK_BASE + (eeprom_size * (index-1))) + PHBK_EE_INUSE_ADDR);
   error = modem_write_data(eeprom_addr,1,&phonebook_entry[index-1].in_use);

   if (error)
      phbk_error(UNKNOWN);
}

/*******************************************************************************
/
/   Routine: phbk_error
/
/   Author: RSA
/
/   Creation Date: 9/5/1995.
/
/   Description: This routine is called to report an error from the Phonebook
/                Submodule.
/
/   Input Parameters: error_code - the numeric error code for the problem
/
/   Output Parameters: none
/
/   Global Variables Changed:  send_ok, error_occurred
/
/   Users:
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:
/   Description:
/   Reason:
/
*******************************************************************************/
void phbk_error(ubyte error_code)
{
   if (phbk_cmee_flag)
   {
      output_info((ubyte *)"+CME ERROR:", STORED_NUM);
      output_info(d_to_a(error_code), NUMERIC_FORM);
      send_ok = FALSE;
   }
   else
      error_occurred = TRUE;
}

/*******************************************************************************
/
/   Routine: phbk_empty_entry
/
/   Author: RSA
/
/   Creation Date: 9/5/1995.
/
/   Description: This routine is called to report the next empty index in the
/                Phonebook.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  send_ok, error_occurred
/
/   Users:
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:
/   Description:
/   Reason:
/
*******************************************************************************/
void phbk_empty_entry(void)
{
   ubyte i,found;

   i = 0;
   found = FALSE;

   /* Search thru all of the indexes to find the first available that
         is not IN_USE and report it to the DTE */
   while ((!found) && (i < phbk_max_entries))
   {
      if (!phonebook_entry[i].in_use)
      {
         output_info(d_to_a(i+1),VERBOSE_FORM);
         found = TRUE;
      }
      i++;
   }

   /* If all of the indicies are used, then report an error */
   if (!found)
      phbk_error(MEMORY_FULL);
}
