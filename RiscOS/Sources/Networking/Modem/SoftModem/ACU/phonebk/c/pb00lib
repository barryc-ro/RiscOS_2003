/****************************************************************************
/
/     Copyright 1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             pb00lib.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the library routines for
/                       the Phonebook Submodule
/
/     Product:          ACU Core Code
/
/     History:
/
/        Created:       9/5/1995.
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "phbk_def.h"
#include "phbk_pro.h"
#include "phbk_mem.h"
#include "v25_def.h"
#include "ee_def.h"
#include "mt_pro.h"

void phbk_d_to_a(ubyte, ubyte, ubyte *);
void phbk_a_to_BCD(ubyte *);
void phbk_BCD_to_a(ubyte *, ubyte *);
void phbk_alphabetic_pos(ubyte *, ubyte);

/*******************************************************************************
/
/      Routine:        phbk_d_to_a
/
/      Author:         RSA
/
/      Creation Date:  04/07/95
/
/      Description:    This Routine converts a decimal number to an ASCII
/                        string.
/
/      Input Parameters:   size - how many digits to make
/                          data - the decimal number
/                          *storePtr - where to put the ascii string
/
/      Output Parameters: None
/
/      Global Variables Changed:  None
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void phbk_d_to_a(ubyte size, ubyte data, ubyte *storePtr)
{
   do {
       size--;
       storePtr[size] = (data % 10) + '0';
       data /= 10;
   } while (size != 0);
}

/*******************************************************************************
/
/      Routine:        phbk_a_to_BCD
/
/      Author:         RSA
/
/      Creation Date:  04/07/95
/
/      Description:    This Routine stores the phone number in BCD nibble
/                       format.
/
/      Input Parameters:   str_array - pointer to the phone number string.
/
/      Output Parameters: None
/
/      Global Variables Changed:  phonebook_entry
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void phbk_a_to_BCD(ubyte *str_array)
{
   ubyte index_count, nibble_toggle;
   ubyte temp_value, done_parsing;

   index_count = 0;
   done_parsing = FALSE;
   nibble_toggle = LOW_NIBBLE;

  /* Select the corresponding BCD value for the each ASCII
      character in the phone number string. The numeric (non-zero)
      chars are just the char value minus the ascii value of 0.
      The special dial string chars (and zero) are those defined in the
      phonebook specification */
   while (!done_parsing)
   {
      switch (*str_array)
      {
         case '1':
         case '2':
         case '3':
         case '4':
         case '5':
         case '6':
         case '7':
         case '8':
         case '9':
            temp_value = *str_array - '0';
            break;

         case '0':
            temp_value = PHBK_BCD_ZERO;
            break;

         case '*':
            temp_value = PHBK_BCD_AST;
            break;

         case '#':
            temp_value = PHBK_BCD_PND;
            break;

         case 'W':
         case 'w':
            temp_value = PHBK_BCD_WAIT;
            break;

         case '!':
            temp_value = PHBK_BCD_FLASH;
            break;

         case ',':
            temp_value = PHBK_BCD_COMMA;
            break;

         case '\0':
            done_parsing = TRUE;
            temp_value = PHBK_BCD_NULL;
            break;

         default:
            error_occurred = TRUE;
            break;
      }

      /* Alternate putting the BCD value of the phone number
         string into the high and low nibbles of the stored byte */
      if (nibble_toggle == HIGH_NIBBLE)
      {
         phonebook_entry[phbk_parsed_index-1].num[index_count++] |= temp_value;
         nibble_toggle = LOW_NIBBLE;
      }
      else
      {
         phonebook_entry[phbk_parsed_index-1].num[index_count] = temp_value << 4;
         nibble_toggle = HIGH_NIBBLE;
      }
      *str_array++;

   } /* End while */
}

/*******************************************************************************
/
/      Routine:        phbk_store_atext
/
/      Author:         RSA
/
/      Creation Date:  04/07/95
/
/      Description:    This Routine stores the ascii text in the phonebook
/                       entry.
/
/      Input Parameters:   *str_array - pointer to the text string to store.
/
/      Output Parameters: None
/
/      Global Variables Changed:  phonebook_entry
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void phbk_store_atext(ubyte *str_array)
{
   ubyte index_count;

   index_count = 0;

   do {
         phonebook_entry[phbk_parsed_index-1].text[index_count++] = *str_array;
   } while ((*str_array++ != '\0') && (index_count < PHBK_TEXT_SIZE));

}

/*******************************************************************************
/
/      Routine:        phbk_BCD_to_a
/
/      Author:         RSA
/
/      Creation Date:  04/07/95
/
/      Description:    This Routine stores the BCD phone number in ASCII format
/
/      Input Parameters:   BCD_num - number encoded in BCD format.
/                          array_ptr - temp array ptr to store decoded string.
/
/      Output Parameters: None
/
/      Global Variables Changed:  None
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void phbk_BCD_to_a(ubyte *BCD_num, ubyte *array_ptr)
{
   ubyte done_conversion, nibble_toggle, ascii_val;

   nibble_toggle = HIGH_NIBBLE;
   done_conversion = FALSE;

   while (!done_conversion)
   {
      if (nibble_toggle == HIGH_NIBBLE)
      {
         ascii_val = ((*BCD_num & 0xF0) >> 4);
         nibble_toggle = LOW_NIBBLE;
      }
      else
      {
         ascii_val = *BCD_num++ & 0x0F;
         nibble_toggle = HIGH_NIBBLE;
      }

      switch (ascii_val)
      {
         case 0x01:
         case 0x02:
         case 0x03:
         case 0x04:
         case 0x05:
         case 0x06:
         case 0x07:
         case 0x08:
         case 0x09:
            ascii_val += '0';
            break;

         case 0x0A:
            ascii_val = '0';
            break;

         case 0x0B:
            ascii_val = '0';
            break;

         case 0x0C:
            ascii_val = '#';
            break;

         case 0x0D:
            ascii_val = 'W';
            break;

         case 0x0E:
            ascii_val = '!';
            break;

         case 0x0F:
            ascii_val = ',';
            break;

         case 0x00:
            done_conversion = TRUE;
            ascii_val = '\0';
            break;

         default:
            error_occurred = TRUE;
            break;
      }

      *array_ptr = ascii_val;
      *array_ptr++;
   }
}

/*******************************************************************************
/
/      Routine:        phbk_alphabetic_pos
/
/      Author:         RSA
/
/      Creation Date:  04/07/95
/
/      Description:    This Routine searches for and finds the next alphabetic
/                       position for the phonebook entry and inserts the entry
/                       into the linked list.
/
/      Input Parameters:   str_array - incoming string.
/                          current_index - index of the position in the array.
/
/      Output Parameters: None
/
/      Global Variables Changed:  phonebook_entry, phbk_head_of_list
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void phbk_alphabetic_pos(ubyte *str_ptr, ubyte current_index)
{
   ubyte *temp_ptr, *saved_ptr;
   ubyte entry_index, entry_placed, temp_index, error;
   uword eeprom_addr, eeprom_size;

   /*********************************************************************************
      There are 4 cases to insertion into this alphabetically sorted linked list.
      If the entry is the last in the linked list, the next field points to itself.
      If the entry is the first in the linked list, the previous field points to itself.

      INSERTION CASES:
      1) insert into an empty list  ( C, ie. C's next and previous point to itself)
      2) insert at beginning list (C in list, insert B)
      3) insert in middle of > 1 element list  (A->C->D, insert B)
      4) insert at end of list (A->B->C in list, insert D)
    *********************************************************************************/

   /* Size of the Phonebook structure with all fields (32 bytes) */
   eeprom_size = sizeof(struct phbk_bcd_entry_struct);
   entry_placed = FALSE;

   if (phbk_head_of_list == EMPTY_LIST)
   {
        /* INSERTION CASE 1 from above */
        phonebook_entry[current_index-1].previous = current_index;
        phonebook_entry[current_index-1].next = current_index;

        /* Save the first entry's index in the EEPROM */
        phbk_head_of_list = current_index;
        eeprom_addr = PHBK_FIRST_ENTRY;
        error = modem_write_data(eeprom_addr,1,&phbk_head_of_list);
   }
   else
   {
      /* Start at the beginning of the linked list for search */
      entry_index = phbk_head_of_list;

      /* Save the incoming string pointer starting position */
      saved_ptr = str_ptr;

      while (!entry_placed)
      {
         /* Start at first character positions for new comparision */
         temp_ptr = (ubyte *)&phonebook_entry[entry_index-1].text;
         str_ptr = saved_ptr;

         /* Skip all chars that are the same */
         while (*temp_ptr == *str_ptr)
         {
            *temp_ptr++;
            *str_ptr++;
         }

         /* If the character has a lower ordinal value,
            insert new string into list before existing string */
         if (*str_ptr <= *temp_ptr)
         {
            if (entry_index == phbk_head_of_list)
            {
               /* INSERTION CASE 2 and save in both RAM and EEPROM */
               phonebook_entry[current_index-1].previous = current_index;
               phonebook_entry[current_index-1].next = entry_index;

               /* Adjust the index value of the first entry in RAM and EEPROM */
               phbk_head_of_list = current_index;
               eeprom_addr = PHBK_FIRST_ENTRY;
               error = modem_write_data(eeprom_addr,1,&phbk_head_of_list);
            }
            else
            {
               /* INSERTION CASE 3 and save in both RAM and EEPROM */
               phonebook_entry[current_index-1].previous =
                           phonebook_entry[entry_index-1].previous;
               phonebook_entry[current_index-1].next = phonebook_entry[temp_index-1].next;

               phonebook_entry[temp_index-1].next = current_index;
               eeprom_addr = (PHBK_BASE + (eeprom_size * (temp_index-1)));
               error = modem_write_data(eeprom_addr,eeprom_size,
                  (ubyte *)&phonebook_entry[temp_index-1].num);
            }

            /* Entry inserted, adjust NEXT and PREVIOUS values in RAM and EEPROM */
            entry_placed = TRUE;
            phonebook_entry[entry_index-1].previous = current_index;
            eeprom_addr = (PHBK_BASE + (eeprom_size * (entry_index-1)));
            error = modem_write_data(eeprom_addr,eeprom_size,
               (ubyte *)&phonebook_entry[entry_index-1].num);
         }
         else
         {
            /* INSERTION CASE 4 and save in both RAM and EEPROM */
            if (phonebook_entry[entry_index-1].next == entry_index)
            {
               entry_placed = TRUE;
               phonebook_entry[current_index-1].previous = phonebook_entry[entry_index-1].next;
               phonebook_entry[current_index-1].next = current_index;

               /* Adjust pointer indicies for changed element */
               phonebook_entry[entry_index-1].next = current_index;

               /* Write adjusted values for changed element in EEPROM */
               eeprom_addr = (PHBK_BASE + (eeprom_size * (entry_index-1)));
               error = modem_write_data(eeprom_addr,eeprom_size,
                  (ubyte *)&phonebook_entry[entry_index-1].num);
            }
            else
            {
               /* The ordinal value of incoming string was greater than compared entry
                  get the next entry and recompare with incoming string */
               temp_index = entry_index;
               entry_index = phonebook_entry[entry_index-1].next;
            }
         }

      } /* while */

   } /* if */

   /* Write the newest inserted entry into EEPROM */
   eeprom_addr = (PHBK_BASE + (eeprom_size * (current_index-1)));
   error = modem_write_data(eeprom_addr,eeprom_size,
      (ubyte *)&phonebook_entry[current_index-1].num);
   if (error)
      phbk_error(UNKNOWN);
}
