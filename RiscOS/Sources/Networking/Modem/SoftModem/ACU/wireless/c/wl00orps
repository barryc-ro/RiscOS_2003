/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00orps.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains originate/dialing processing code for
/                       Wireless Modem call establishment.
/
/     Product:          ACU core code
/
/     History:          ac00ordl.c v4.01 and ac00orps.c v4.01
/
/        Created:       1/16/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"
#include "audio_if.h"
#include "wbios.h"

/* Local Wireless ORIG Prototypes */
void orig_wl_bg(void);
void orig_wl_init_dial(void);
void orig_wl_init(void);
void orig_wl_init_no_dial(void);
void orig_wl_dial(void);
void orig_wl_wait_for_chnl(void);
void orig_wl_init_modem(void);
void orig_wl_handshake(void);
void acu_wl_connect(void);
void orig_wl_flash(void);
void wl_tone_char(ubyte);
void process_wl_modifiers(void);
ubyte wl_wait_for_DTMF(void);
ubyte wl_wait_for_flash(void);


/*******************************************************************************
/
/     Routine:       wl_orig_bg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process the background functions for
/                    the ORIG state of type WIRELESS_DATA.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:  proc_orig
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_orig_bg(void)
{
   switch (st_orig.state)
   {
      case INIT_ACU_DIAL:
         /* In this state the ACU is being initialized to dial a
            number. */
         orig_wl_init_dial();
         break;

      case INIT_ACU_NO_DIAL:
         /* In this state the ACU is being initialized to make a
            connection. */
         orig_wl_init_no_dial();
         break;

      case ORIG_DIAL:
         /* In this state the ACU is processing the dial command */
         orig_wl_dial();
         break;

      case ORIG_WAIT_FOR_CHANNEL:
         /* In this state the ACU is monitors the cellular call progress
            for Voice Channel aquisition. */
         orig_wl_wait_for_chnl();
         break;

      case INIT_MODEM_ORIG:
         /* In this state the ACU will make function calls to
            set up the modem task to originate a call. */
         orig_wl_init_modem();
         break;

      case ORIG_HANDSHAKING:
         /* In this state the ACU performs handshaking in the
            originate mode. */
         orig_wl_handshake();
         break;

      case PROCESS_DIAL_MOD:
         /* In this state the ACU will process any dial modifiers
            that takes any length of time. */
         process_wl_modifiers();
         break;
   }
}


/*******************************************************************************
/
/     Routine:       orig_wl_init_dial
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to initialize the ORIG state
/                    to dial a cellular number.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: send_ok, valid_char, timer3,
/       st_orig.state
/
/     Users:  orig_wl_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wl_init_dial(void)
{
   AUDIO_CONTROL audio;

   /* Test for Lockout */
   if (wireless_locked_out())
   {
      build_event(E_HANGUP,OK);
      return;
   }

   /* Set dial falgs */
   send_ok = FALSE;
   valid_char = TRUE;
   sr14.originate_flag = TRUE;

   /* Reset the cell dial string array */
   wl_dialString[0] = wl_dialCount = 0;

   /* Don't init if already online (phone mode or ATDT;) */
   /* Move DTMF to RX Path for audible rep. */
   /* Move DTMF to TX Path DTMF overdial */
   audio.type = AUDIO_AUDIO_PATH;
   audio.data = DTMF_TO_TXOUT_EAROUT;
   audio_control(&audio);

   /* if on hook.. */
   if (hook)
   {
      /* No dialtone to detect for cellular calls! */
      orig_wl_init();

      /* Set up the blind dialing: timer3: The greater of (s[6] * 100)
         and 2, in seconds */
      timer3 = s[6] * 100;
   }

   st_orig.state = ORIG_DIAL;
}

/*******************************************************************************
/
/     Routine:       orig_wl_init
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to setup the ORIG state to make
/                    a cellular connection.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: wl_dialString[], wl_dialCount,
/       sr14.originate_flag
/
/     Users:  orig_wl_init_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wl_init(void)
{
   if (!v25bis_active)
   {
      /* CTS pin */
      if ((comm_mode == SYNC_DTR) || (comm_mode == SYNC_TALK))
         modem_dte_cts(OFF);
      if (comm_mode == ASYNC)
         modem_dte_cts(ON);
   }

   modem_serial_echo(OFF);
   modem_td_relay(ON);

   /* Turn off RI indications incase ATD in the middle of a RING */
   modem_ri_led(OFF);
   modem_dte_ri(OFF);

   if (sr21.auxiliary_relay_ctrl == 1)
      modem_AA1_relay(ON);
}



/*******************************************************************************
/
/     Routine:       orig_wl_init_no_dial
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to initialize the ORIG state
/                    and skip the cellular dialing process.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_orig.state
/
/     Users:  orig_wl_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wl_init_no_dial(void)
{
   /* Test for Lockout */
   if (wireless_locked_out())
   {
      build_event(E_HANGUP,OK);
      return;
   }

   /* Initialize flags for dialing process   */
   st_orig.state = INIT_MODEM_ORIG;

   /* Perform Wireless Connect (w/no dial) */
   wl_dialString[0]=0;
   wireless_connect(ORIGINATE,&wl_dialString[0]);

   if (st_orig.type == WIRELESS_PHONE)
      build_event(E_CONNECT,UNUSED);
}


/*******************************************************************************
/
/     Routine:       orig_wl_dial
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is repeatedly called to build the dial string
/                    (one character at a time) for the cellular call.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: wl_dialString,wl_dialCount, acu_dial_string_ptr,
/       timer1, timer2, look_for_signal, line_signal_seen, st_orig.state,
/       modifier_type, R_mode, return_to_idle, valid_char, dial_J, dial_K,
/       send_ok.
/
/     Users: orig_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wl_dial(void)
{
   ubyte ch,inuse;
   AUDIO_CONTROL audio;

   if (!timer3)    /* remainder of billing delay */
   {
      if (valid_char)
      {
         /* Get number to dial from dial string */
         ch = *acu_dial_string_ptr++;
         switch (ch)
         {
            case '#':
            case '*':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
               /* Add char to dial string for AMPS */
               wl_dialString[wl_dialCount++] = ch;

               /* Tone out the char for audible rep. */
               wl_tone_char(ch);
               break;

            case '@':
               timer1 = (s[7] * 100);
               timer2 = 0;
               look_for_signal = TRUE;
               line_signal_seen = FALSE;
               modem_shrt_relay(OFF);
               modem_init_call_progress(OFF_HOOK_DIALED);
               st_orig.state = PROCESS_DIAL_MOD;
               modifier_type = QUIET_ANSWER;
               break;

            case '!':
               orig_wl_flash();
               break;

            case ',':
               timer1 = (dial_pause_time * 100);
               st_orig.state = PROCESS_DIAL_MOD;
               modifier_type = PAUSE;
               break;

            case 'R':
               R_mode = TRUE;
               break;

            case 'S':
               /* Use the standard PSTN routine to assign
                  "acu_dial_string_ptr" to a number stored in EEPROM */
               build_stored_dial_string();
               break;

            case 'W':
               timer1 = (s[7] * 100);
               timer2 = 0;
               look_for_signal = TRUE;
               modem_shrt_relay(OFF);
               modem_init_call_progress(OFF_HOOK_DIALED);
               st_orig.state = PROCESS_DIAL_MOD;
               modifier_type = WAIT_TONE;
               break;

            case ';':
               return_to_idle = TRUE;
               valid_char = FALSE;
               break;

            case 'J':
               dial_J = TRUE;
               break;

            case 'K':
               dial_K = TRUE;
               break;

            case '\0':
               valid_char = FALSE;
               break;
         }
      }
      else
      {
         /* Set wait for channel time-out limit (S-Reg. 7) */
         timer1 = s[7] * 100;

         /* Perform Wireless Connect (and dial) */
         wl_dialString[wl_dialCount] = '\0';

         /* Do wireless dial if not already connected */
         wireless_info(INFO_IN_USE, &inuse);
         if (!inuse)
            wireless_connect(ORIGINATE,&wl_dialString[0]);

         /* Remove DTMF from Voice Path */
         audio.type = AUDIO_AUDIO_PATH;
         if (st_orig.type == WIRELESS_PHONE)
            audio.data = VOICE_RXTX;
         else
            audio.data = DATA_RXTX;
         audio_control(&audio);

         if (st_orig.type == WIRELESS_PHONE)
         {
            if (!inuse)
               st_orig.state = ORIG_WAIT_FOR_CHANNEL;
            else
               build_event(E_CONNECT,UNUSED);
         }
         else if (R_mode)
         {
            R_mode = FALSE;
            build_event(E_ANSW,UNUSED);
         }
         else if (return_to_idle)
         {
            return_to_idle = FALSE;
            timer1 = 0;
            build_event(E_PARSE,UNUSED);
            send_ok = TRUE;
         }
         else
         {
            st_orig.state = ORIG_WAIT_FOR_CHANNEL;
         }

         if (sr22.speaker_ctrl == OFF_DIALING)
            modem_speaker(ON);
      }
   }
}


/*******************************************************************************
/
/     Routine:       orig_wl_wait_for_chnl
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called while the ACU is waiting to
/                    establish a cellular channel for call origination.  If a
/                    channel is not available, then the ACU will hang up.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_orig.state
/
/     Users:  orig_wl_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wl_wait_for_chnl(void)
{
   /* Time-out waiting for voice channel */
   if (!timer1)
   {
      /* Time-out with out a channel */
      build_event(E_HANGUP,WNO_SERVICE);
      return;
   }

   /* No debounce required for Wireless Channel detection */
   switch (wireless_call_progress())
   {
      case CONNECTION_ACTIVE:
         /* "hook" must mirror wl online in use for AT commands */
         hook = FALSE;   /* Wireless off hook */

         if (st_orig.type == WIRELESS_PHONE)
         {
            build_event(E_CONNECT,UNUSED);
         }
         else
         {
            if (CellCmds.CellularResultCodes == WECR_ENHANCED_CMDS)
               build_event(E_MSG,WIN_USE);
            st_orig.state = INIT_MODEM_ORIG;
         }
         break;

      case CONNECTION_BUSY:
      case CONNECTION_DROPPED:
         build_event(E_HANGUP,WREORDER);
         break;

      case CONNECTION_HANDOFF:
         if (!dial_flag)
         {
            if (CellCmds.CellularResultCodes)
               build_event(E_MSG,WINTERCEPT);

            /* Only send the msg once */
            dial_flag=TRUE;
         }
         break;

      default:
         /* Do nothing */
         break;
   } /* switch */
}


/*******************************************************************************
/
/     Routine:       orig_wl_init_modem
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will initialize the modem to start a
/                    connection as the originator.  Initialization includes
/                    configuration for detection of ring back, answer tone,
/                    and busy signals.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:  orig_wl_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wl_init_modem(void)
{
   /* Make sure the RSSI is good enough for the user */
   if (wl_qualify_rssi())
   {
      /* Use same code as PSTN connections */
      orig_init_modem();
   }
   /* Else RSSI is too low so drop the connection */
   else
   {
      build_event(E_HANGUP,WLOW_RSSI);
   }
}


/*******************************************************************************
/
/     Routine:       orig_wl_handshake
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is performs the modem handshaking for the
/                    ORIG state.  It is waiting for carrier in order to
/                    proceed to the ONLINE (connected) state.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:  orig_wl_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wl_handshake(void)
{
   /* Monitor the cellular link while the modems are handshaking */
   wl_online_bg();

   /* Use the same PSTN code for handshaking */
   originate_handshaking();
}


/*******************************************************************************
/
/     Routine:       acu_wl_connect
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to start the data phase after
/                    the modems are connected at the physical level.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:  orig_wl_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_wl_connect(void)
{
   /* Use same code as for PSTN mode */
   acu_connect();
}


/*******************************************************************************
/
/     Routine:       orig_wl_flash
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to process the flash '!' dial
/                    modifier for a cellular dial string.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: orig_wl_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_wl_flash(void)
{
   ubyte i=0;
   WBIOS_CONTROL wbiosmsg;

   while (*acu_dial_string_ptr)
   {
      if ((*acu_dial_string_ptr >= '0') && (*acu_dial_string_ptr <= '9'))
         wbiosmsg.u.data[i++] = *acu_dial_string_ptr++;
   }

   wbiosmsg.u.data[i] = 0;
   wbiosmsg.type = WL_FLASH;
   wbios_control(&wbiosmsg);
}


/*******************************************************************************
/
/     Routine:       wait_for_flash
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to perform background timing
/                    for hook flashes
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  timer1, dial_flag
/
/     Users: orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte wl_wait_for_flash(void)
{
   return TRUE; /* Flash complete */
}

/*******************************************************************************
/
/     Routine:       wl_tone_char
/
/     Author:        RSA
/
/     Creation Date: 04/16/95
/
/     Description:   This Routine is called to process the flash '!' dial
/                    modifier for a cellular dial string.
/
/     Input Parameters: ch - tone to generate (DTMF character in ASCII format)
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: orig_wl_dial
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_tone_char(ubyte ch)
{
   AUDIO_CONTROL audio;

   /* Select tone */
   switch (ch)
   {
      case '*':
         audio.data = DTMF_DIGIT_STAR;
         break;

      case '#':
         audio.data = DTMF_DIGIT_PND;
         break;

      case 'A':
      case 'B':
      case 'C':
      case 'D':
         audio.data = ch - 'A' + DTMF_DIGIT_A;
         break;

      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
         audio.data = ch - '0' + DTMF_DIGIT_0;
         break;
   }

   /* Play the tone */
   audio.type = AUDIO_GEN_TONE;
   audio_control(&audio);

   dial_flag = TRUE;      /* Flag denoting that DTMF is ON */
   dial_timer = s[11];    /* Tone-on time */

   /* Use "dial modifier" sub-state to wait until the entire tone is
      generated AND until an equal delay of tone-off has passed */
   st_orig.state = PROCESS_DIAL_MOD;
   modifier_type = DIAL_DIGIT_WAIT;
}


/*******************************************************************************
/
/     Routine:       wl_wait_for_DTMF
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to perform background timing
/                    on dialed DTMF digits.
/
/     Input Parameters: none
/
/     Output Parameters: 0 (FALSE) DTMF not completed, otherwise completed.
/
/     Global Variables Changed:  dial_timer, dial_flag
/
/     Users: orig_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte wl_wait_for_DTMF(void)
{
   AUDIO_CONTROL audio;

   /* Wait for tone-on and tone-off time */
   if (!dial_timer)
   {
      /* If the tone was ON */
      if (dial_flag)
      {
         /* The tone was on, so turn the tone off, and wait an
            equal amount of tone-off time */
         /* Tone off */
         audio.type = AUDIO_GEN_TONE;
         audio.data = SILENCE_TONE;
         audio_control(&audio);

         /* Set tone-off flag and tone-off time */
         dial_timer = s[11];
         dial_flag = FALSE;
      }
      /* Else the tone was OFF */
      else
      {
         /* The tone off time has expired, so return to the
            main dial state */
         return TRUE;   /* Digit timing is complete */
      }
   }
   return FALSE;   /* Digit timing not complete */
}



/*******************************************************************************
/
/     Routine:       process_wl_modifiers
/
/     Author:        RSA
/
/     Creation Date: 04/17/95
/
/     Description:   This Routine is called to process any dial modifiers that
/                    will take time to process during Wireless call origination.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_orig.state
/
/     Users: orig_pstn_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void process_wl_modifiers(void)
{
   switch (modifier_type)
   {
      case DIAL_DIGIT_WAIT:
         /* When the dial timer times-out, change back to
            dialing digit state */
         if (wl_wait_for_DTMF())
            st_orig.state = ORIG_DIAL;
         break;

      case DIAL_FLASH_WAIT:
         /* When the dial timer times-out, change back to
            dialing digit state */
         if (wl_wait_for_flash())
            st_orig.state = ORIG_DIAL;
         break;

      default:
         /* Use standard PSTN modifiers */
         process_modifiers();
         break;
   }
}



