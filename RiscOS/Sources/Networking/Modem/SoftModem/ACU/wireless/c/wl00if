/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00if.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for the ACU Wireless (cellular)
/                       interface.
/
/     Product:          ACU core code
/
/     History:          Original version (4.??)
/
/        Created:       1/16/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_pro.h"
#include "acu_mem.h"
#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"
#include "wbios.h"
#include "audio_if.h"


/* Local Prototypes */
void wireless_init(void);
void wireless_reset(void);
void wireless_store_profile(ubyte);
void wireless_retrieve_profile(ubyte);
void wireless_bg(void);
void wireless_timer(void);
ubyte wireless_call_progress(void);
void wireless_enable(void);
void wireless_disable(void);
void wireless_connect(ubyte, ubyte *);
void wireless_terminate(void);
void wireless_info(ubyte, ubyte *);
ubyte wireless_locked_out(void);
void wireless_mode_event(ubyte);



/*******************************************************************************
/
/     Routine:       wireless_init
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will initialize any available cellular
/                    modem protocol.
/
/     Input Parameters:  None
/
/     Output Parameters: None
/
/     Global Variables Changed:
/
/     Users: master_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_init(void)
{
   AUDIO_CONTROL audiomsg;
   WBIOS_CONTROL wbiosmsg;
   PWR_TABLES    pwr_tables;  /* Power tables are here once on the stack */
   ubyte i,j;

   /* Reset timer vars */
   wl_10ms_timer_tick=0;
   wl_100ms_timer=10;
   wl_1sec_timer=10;
   wl_1min_timer=60;
   wl_1hour_timer=60;
   wl_session_timer=0;

   /* Load AT command and ESN/NAM defaults (these are the only variables
      used by the Wireless Task Driver */
   acu_wl_load_defaults(LOAD_CMDS_AND_NAM);

   /* Get Stored Wireless Info (ESN/NAMs & tables) */
   acu_wl_get_profile(WL_EE_PROFILE_INFO,(ubyte *)&CellInfo);

   /* Init the WIRELESS side and associated sub-systems */
   wbiosmsg.type = WL_INIT;

   /* Load Power DAC and Level table */
   for (i=0; i<WL_TBL_COUNT; i++)
   {
      for (j=0; j<WL_TBL_SIZE; j++)
      {
         pwr_tables.target[i][j] = CellInfo.target_table[i][j];
         pwr_tables.dac[i][j]    = CellInfo.DAC_table[i][j];
      }
   }

   wbiosmsg.u.tables = &pwr_tables;
   wbios_control( &wbiosmsg );

   /* Init the Audio Interface */
   audiomsg.type = AUDIO_INIT;
   audio_control( &audiomsg );

   /* Init the Audio Attenuator Blocks with initial values from EEPROM  */
   audiomsg.type = AUDIO_SET_ATTENUATORS;
   for (i = 0; i < NUM_ATTEN_BLOCKS; i++)
      audiomsg.atten[i] = CellInfo.attenuator[i];
   audio_control( &audiomsg );

   /* Add Wireless AT Commands to the parser */
   acu_set_wl_commands(ON);
}


/*******************************************************************************
/
/     Routine:       wireless_reset
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will dynmically reset the wireless layer
/                    to an idle state
/
/     Input Parameters:  None
/
/     Output Parameters: None
/
/     Global Variables Changed: TBD
/
/     Users: master_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_reset(void)
{
   ubyte *ptr,i;
   ubyte version[WL_EE_VERSION_SIZE];

   /*
    *    Verify proper version in EEPROM
    */
   for (i=0; i<WL_EE_VERSION_SIZE; i++)
      version[i]=0;

   if (!acu_wl_get_profile(WL_EE_PROFILE_VER,(ubyte *)&version))
   {
      ptr=WL_EEPROM_VERSION;
      for (i=0; i<WL_EE_VERSION_SIZE; i++)
      {
         /* Compare ROM to EEPROM */
         if (version[i] != *ptr++)
         {
            /* Reset all defaults if EEPROM is not the same as ROM */
            acu_wl_load_defaults(LOAD_CMDS_AND_NAM);

            /* Re-write defaults to EEPROM */
            acu_wl_put_profile(WL_EE_PROFILE_VER);
            acu_wl_put_profile(0);
            acu_wl_put_profile(1);
            acu_wl_put_profile(WL_EE_PROFILE_INFO);

            /* Configure AMPS w/ the current parameters */
            acu_wl_configure();
            return;
         }
      }
   }

   /*
    *    Get AT command profile
    */
   if (acu_wl_get_profile(0,(ubyte *)&CellCmds))
   {
      /* FACTORY Command defaults */
      acu_wl_load_defaults(LOAD_CMDS);

      /* Write the defaults into EEPROM */
      acu_wl_put_profile(0);
   }

   /*
    *    Get NAMs and ESN
    */
   if (acu_wl_get_profile(WL_EE_PROFILE_INFO,(ubyte *)&CellInfo))
   {
      /* FACTORY Command and NAM/ESN defaults */
      acu_wl_load_defaults(LOAD_CMDS_AND_NAM);

      /* Write the defaults into EEPROM */
      acu_wl_put_profile(WL_EE_PROFILE_INFO);
   }

   /* Configure AMPS w/ the current parameters */
   acu_wl_configure();
}


/*******************************************************************************
/
/     Routine:       wireless_store_profile
/
/     Author:        RSA
/
/     Creation Date: 04/5/95
/
/     Description:   This Routine will store the current wirless AT command
/                    profile to EEPROM.
/
/     Input Parameters:  which profile level to store (0,1,...)
/
/     Output Parameters: None
/
/     Global Variables Changed: none
/
/     Users: store_profile
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_store_profile(ubyte which_profile)
{
   acu_wl_put_profile(which_profile);
}


/*******************************************************************************
/
/     Routine:       wireless_retrieve_profile
/
/     Author:        RSA
/
/     Creation Date: 04/5/95
/
/     Description:   This Routine will recall a wirless AT command profile
/                    from EEPROM.
/
/     Input Parameters:  which profile to recall (0,1,...)
/
/     Output Parameters: None
/
/     Global Variables Changed: none
/
/     Users: store_profile
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_retrieve_profile(ubyte which_profile)
{
   acu_wl_get_profile(which_profile,(ubyte *)&CellCmds.mode);
}

/*******************************************************************************
/
/     Routine:       wireless_bg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called repeatedly to power the Wireless
/                    module.
/
/     Input Parameters:  None
/
/     Output Parameters: None
/
/     Global Variables Changed: none
/
/     Users: main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_bg(void)
{
   /* ACU wireless driver timers */
   process_wl_timers();

   /* Wireless Module bg */
   wbios_bg();
}


/*******************************************************************************
/
/     Routine:       wireless_timer
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called every 10 milliseconds to power
/                    the Wireless module's timer.
/
/     Input Parameters:  None
/
/     Output Parameters: None
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_timer(void)
{
   /* ACU wireless driver timers */
   wl_10ms_timer_tick++; /* 10 msec timer tick */

   /* Wireless module timers */
   wbios_timer();
}

/*******************************************************************************
/
/     Routine:       wireless_call_progress
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called test the current status of the
/                    Wireless Call Progress state.
/
/     Input Parameters:  None
/
/     Output Parameters: status -   0 = UNDETERMINED
/                                   1 = CONNECTION_ACTIVE
/                                   2 = RING_MESSAGE
/                                   3 = CONNECTION_BUSY
/                                   4 = CONNECTION_HANDOFF
/                                   5 = CONNECTION_DROPPED
/
/     Global Variables Changed: TBD
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte wireless_call_progress(void)
{
   WBIOS_CONTROL wbiosmsg;

   /* Get status from Wireless layer */
   wbiosmsg.type = WL_STATUS;
   wbios_control(&wbiosmsg);

   /* Test Wireless layer status */
   if (wbiosmsg.u.status.info.state == WBIOS_STATE_UNDETERMINED)
   {
      switch (wbiosmsg.u.status.latest_event)
      {
         case WBIOS_EVENT_BUSY:
            return CONNECTION_BUSY;

         case WBIOS_EVENT_CHAN_DROPPED:
            return CONNECTION_DROPPED;
      }
      return UNDETERMINED;
   }
   else if (wbiosmsg.u.status.info.state == WBIOS_STATE_READY)
   {
      if (wbiosmsg.u.status.latest_event == WBIOS_EVENT_RINGING)
         return RING_MESSAGE;
      else
         return UNDETERMINED;
   }
   else if (wbiosmsg.u.status.info.state == WBIOS_STATE_CONNECTING)
   {
      switch (wbiosmsg.u.status.latest_event)
      {
         case WBIOS_EVENT_READY:
            return CONNECTION_ACTIVE;

         case WBIOS_EVENT_BUSY:
            return CONNECTION_BUSY;

         case WBIOS_EVENT_CHAN_DROPPED:
            return CONNECTION_DROPPED;

         case WBIOS_EVENT_RINGING:
            return RING_MESSAGE;

         default:
            return UNDETERMINED;
      }
   }
   else if (wbiosmsg.u.status.info.state == WBIOS_STATE_CONNECTED)
   {
      switch (wbiosmsg.u.status.latest_event)
      {
         default:
            return CONNECTION_ACTIVE;

         case WBIOS_EVENT_CHAN_DROPPED:
            return CONNECTION_DROPPED;

         case WBIOS_EVENT_CHAN_CHANGED:
            return CONNECTION_HANDOFF;
      }
   }

   return UNDETERMINED;
}


/*******************************************************************************
/
/     Routine:       wireless_enable
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to enable, or activate the
/                    wireless code.  For the Cellular case, this will notify
/                    AMPS to start sniffing the air for messages like ring.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: none
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_enable(void)
{
   WBIOS_CONTROL wbiosmsg;

   /* Dont enable amps if no ESN or NAM */
   if (!CellInfo.ESN)
      return;

   /* Start AMPS */
   wbiosmsg.type = WL_ENABLE;
   wbiosmsg.u.cpinit.nam.sso       = CellInfo.NAM[CellCmds.whichNAM].sso;
   wbiosmsg.u.cpinit.nam.EXp       = CellInfo.NAM[CellCmds.whichNAM].EXp;
   wbiosmsg.u.cpinit.nam.MIN2p     = ID_to_MIN2();
   wbiosmsg.u.cpinit.nam.MIN1p     = ID_to_MIN1();
   wbiosmsg.u.cpinit.nam.SCMp      = CellInfo.NAM[CellCmds.whichNAM].SCMp;
   wbiosmsg.u.cpinit.nam.ACCOLCp   = CellInfo.NAM[CellCmds.whichNAM].ACCOLCp;
   wbiosmsg.u.cpinit.nam.AutoReg   = CellInfo.NAM[CellCmds.whichNAM].AutoReg;

   if (CellInfo.NAM[CellCmds.whichNAM].SCMp & SCMP_DTX_BIT)
      wbiosmsg.u.cpinit.nam.dtx    = 1;
   else
      wbiosmsg.u.cpinit.nam.dtx    = 0;

   wbiosmsg.u.cpinit.nam.HomeOnly  = CellInfo.NAM[CellCmds.whichNAM].HomeOnly;
   wbiosmsg.u.cpinit.nam.SIDp      = CellInfo.NAM[CellCmds.whichNAM].SIDp;

   if (CellInfo.NAM[CellCmds.whichNAM].sso & 0x1)
      wbiosmsg.u.cpinit.nam.FIRSTCHPp = DEFAULT_NAM__FCCSB;
   else
      wbiosmsg.u.cpinit.nam.FIRSTCHPp = DEFAULT_NAM__FCCSA;

   wbiosmsg.u.cpinit.nam.fccsa     = CellInfo.NAM[CellCmds.whichNAM].fccsa;
   wbiosmsg.u.cpinit.nam.fccsb     = CellInfo.NAM[CellCmds.whichNAM].fccsb;
   wbiosmsg.u.cpinit.nam.lccsa     = CellInfo.NAM[CellCmds.whichNAM].lccsa;
   wbiosmsg.u.cpinit.nam.lccsb     = CellInfo.NAM[CellCmds.whichNAM].lccsb;
   wbiosmsg.u.cpinit.esn           = CellInfo.ESN;

   wbios_control(&wbiosmsg);
}


/*******************************************************************************
/
/     Routine:       wireless_disable
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to disable, or de-activate the
/                    wireless code.  For the Cellular case, this will notify
/                    AMPS to go to an idle state: stop responding to base
/                    station messages.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: none
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_disable(void)
{
   WBIOS_CONTROL wbios;

   /* start AMPS */
   wbios.type = WL_DISABLE;
   wbios_control(&wbios);
}


/*******************************************************************************
/
/     Routine:       wireless_connect
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called initiate a wireless connection.
/                    This is essentially the off-hook indication.
/
/     Input Parameters:   direction -  0           = ORIGNATE
/                                      (otherwise) = ANSWER
/                          dial_str -  pointer to the dial string (orig case)
/
/     Output Parameters:  None
/
/     Global Variables Changed: none
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_connect(ubyte direction, ubyte *dial_str)
{
   ubyte data;
   WBIOS_CONTROL wbios;
   ubyte *ptr;

   /* Dont enable amps if no ESN or NAM */
   if (!CellInfo.ESN)
   {
      build_event(E_HANGUP,WBAD_NAM);
      return;
   }

   /* Don't try to dial if no service is available */
   wireless_info(INFO_SERVICE, &data);
   if (!data)
   {
      /* Time-out with out a channel */
      build_event(E_HANGUP,WNO_SERVICE);
      return;
   }

   /* Store Dial string for ORIG */
   if (direction == ORIGINATE)
   {
      wbios.type = WL_ORIGINATE;
      ptr = &wbios.u.data[0];
      while (*dial_str)
         *ptr++ = *dial_str++;
      *ptr = '\0';
   }
   else
   {
      wbios.type = WL_ANSWER;
   }

   wbios_control(&wbios);
}

/*******************************************************************************
/
/     Routine:       wireless_terminate
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to perform an orderly shut down
/                    of a wireless call in progress.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: none
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_terminate(void)
{
   WBIOS_CONTROL wbios;

   wbios.type = WL_TERMINATE;
   wbios_control(&wbios);
}

/*******************************************************************************
/
/     Routine:       wireless_info
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to get information about the
/                    current state of a Wireless link.
/
/     Input Parameters:   buffer_ptr - pointer to a buffer to be filled with
/                                      the wirless info.
/
/     Output Parameters:  None
/
/     Global Variables Changed: none
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_info(ubyte type, ubyte *data_ptr)
{
   WBIOS_CONTROL wbiosmsg;

   /* Get status from Wireless layer */
   wbiosmsg.type = WL_STATUS;
   wbios_control(&wbiosmsg);

   switch (type)
   {
      case INFO_SERVICE:
         /* Service available */
         *data_ptr = ((wbiosmsg.u.status.info.state == WBIOS_STATE_READY) |
                     (wbiosmsg.u.status.info.state == WBIOS_STATE_CONNECTING) |
                     (wbiosmsg.u.status.info.state == WBIOS_STATE_CONNECTED));
         break;

      case INFO_IN_USE:
         *data_ptr = (wbiosmsg.u.status.info.state == WBIOS_STATE_CONNECTED);
         break;

      case INFO_ROAMING:
         *data_ptr = wbiosmsg.u.status.info.roam;
         break;

      case INFO_SYSTEM:
         *data_ptr = wbiosmsg.u.status.info.system;
         break;

      case INFO_RSSI:
         /* Get status from Wireless layer */
         wbiosmsg.type = WL_CURR_RSSI;
         wbios_control(&wbiosmsg);

         /* WL layer returns 0-20 for RSSI, so we need to normalize
            it from 0-100 for PCCA commands */
         wbiosmsg.u.data[0] /= 2;  /* round to nearest 10 */
         wbiosmsg.u.data[0] *= 10; /* scale to 100        */

         /* Pass it back to the caller */
         *data_ptr = wbiosmsg.u.data[0];
         break;
   }
}


/*******************************************************************************
/
/     Routine:       wireless_locked_out
/
/     Author:        RSA
/
/     Creation Date: 05/30/95
/
/     Description:   This Routine is called to verify if orginating or
/                    answering is enabled by AT lock commands.
/
/     Input Parameters:  None.
/
/     Output Parameters:   0 (FALSE) - phone is not locked.
/                          1 (TRUE) - phone is locked: do not dial or answer.
/
/     Global Variables Changed: None
/
/     Users: wireless_reset, wireless_recall_profile
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte wireless_locked_out(void)
{
   WBIOS_CONTROL wbiosmsg;

   /* First test for DCE Lockout */
   if (CellCmds.LockOut)
   {
      build_event(E_MSG,WLOCKED_OUT);
      return (TRUE);
   }

   /* Next test for Roam Lockout */
   else if (CellCmds.RoamLockout)
   {
      /* Get status from Wireless layer */
      wbiosmsg.type = WL_STATUS;
      wbios_control(&wbiosmsg);

      if (wbiosmsg.u.status.info.sys_id != CellInfo.NAM[CellCmds.whichNAM].SIDp)
      {
         build_event(E_MSG,WROAM_LOCKOUT);
         return (TRUE);
      }
   }

   /* Start session timer now */
   if (CellCmds.SessionTimeLimit)
      wl_session_timer = CellCmds.SessionTimeLimit * 10;

   return (FALSE);
}


/*******************************************************************************
/
/     Routine:       wireless_mode_event
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to handle changes between modes
/                    of the modem.
/
/     Input Parameters:   mode_event (see E_IDLE parms in "acu_def.h")
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_idle.type
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wireless_mode_event(ubyte mode_event)
{
   /* Configure modem based on which mode */
   switch (mode_event)
   {
      case MODE_PSTN_MODEM:
         /* Config ACU for PSTN MODEM */
         st_idle.type = AT_OFFLINE;

         /* Set WL hardware */
         wireless_disable();
         wl_set_audio_path(MODE_PSTN | MODE_DATA);

         /* Set up sleep */
         acu_sleep(S_MODE_PSTN_MODEM);

         /* Set AT!MODE command to reflect current mode */
         CellCmds.mode = MODE_PSTN | MODE_DATA;
         break;

      case MODE_WIRELESS_MODEM:
         /* Config ACU for WL MODEM */
         st_idle.type = AT_WIRELESS_DATA;
         st_idle.state = WL_IDLE_OFFLINE;

         /* Set WL hardware */
         wireless_enable();
         wl_set_audio_path(MODE_WIRELESS | MODE_DATA);

         /* Set up sleep */
         acu_sleep(S_MODE_WIRELESS_MODEM);

         /* Set AT!MODE command to reflect current mode */
         CellCmds.mode = MODE_WIRELESS | MODE_DATA;
         break;

      case MODE_PSTN_PHONE:
         /* Config ACU for PSTN PHONE */
         st_idle.type = AT_PSTN_PHONE;

         /* Disable WL Radio */
         wireless_disable();

         /* Use datapump for RING detect and DTMF dialing */
         wl_set_audio_path(MODE_PSTN | MODE_PHONE);

         /* Set up sleep */
         acu_sleep(S_MODE_PSTN_PHONE);

         /* Set AT!MODE command to reflect current mode */
         CellCmds.mode = MODE_PSTN | MODE_PHONE;
         break;

      case MODE_WIRELESS_PHONE:
         /* Config ACU for WL PHONE */
         st_idle.type = AT_WIRELESS_PHONE;
         st_idle.state = WL_IDLE_OFFLINE;

         /* Set WL hardware */
         wireless_enable();
         wl_set_audio_path(MODE_WIRELESS | MODE_PHONE);

         /* Set up sleep */
         acu_sleep(S_MODE_WIRELESS_PHONE);

         /* Set AT!MODE command to reflect current mode */
         CellCmds.mode = MODE_WIRELESS | MODE_PHONE;
         break;
   }

   /* Test for modem configuration modes, as the AT!MODE command can be
      set by an AT command or a hardware events (i.e. pluggin in the DAA */
   if ((mode_event >= MODE_PSTN_MODEM) && (mode_event <= MODE_WIRELESS_PHONE))
   {
      /* But first don't allow Data commands in phone mode... */

#if 0 /* Is this worth the trouble??? keh */
      /* Modem data AT commands (fax, voice...) are enabled at powerup.
         So suspend them if a phone mode is selected */
      /* If currently in a data mode, and phone mode is selected, suspend
         all commands, then enable only phone commands */
      if ((mode_event & MODE_PHONE) && !(CellCmds.mode & MODE_PHONE))
      {
         /* Suspend all AT commands */
         at_parser_tables(SUSPEND_PARSING,NULL);

         /* Enable basic (phone) AT commands */
         set_acu_at_cmds(ON);
         acu_set_wl_commands(ON);
      }
      /* Else if currently in a phone mode, and data mode is selected,
         resume parsing all commands */
      else if (!(mode_event & MODE_PHONE) && (CellCmds.mode & MODE_PHONE))
      {
         at_parser_tables(RESUME_PARSING,NULL);
      }
#endif

   }
}
