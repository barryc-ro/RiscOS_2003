/****************************************************************************
/
/     Copyright 1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00pin.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for processing the PIN
/                       (personal Identification Number) input and state
/                       processing for the Wireless Modem PIN commands.
/
/     Product:          ACU core code
/
/     History:
/
/        Created:       3/31/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"
#include "dte.edf"

/* Local prototypes */
void init_pin_buffers(void);
void reset_pin_buff_ptr(void);
void store_new_PIN(void);
void end_pin_entry_state(ubyte msg);
void send_pin_msg(ubyte *msg);
ubyte verify_PIN(ubyte *input_pin_ptr);
void wl_init_PIN_entry(void);
void wl_PIN_entry_bg(void);


/*******************************************************************************
/
/     Routine:       init_pin_buffers
/
/     Author:        RSA
/
/     Creation Date: 06/12/95
/
/     Description:   This Routine is called to intialize the PIN buffers.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: wl_pin_buff_ptr,wl_new_pin_buffer[],
/              wl_temp_pin_buffer[]
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void init_pin_buffers(void)
{
   wl_new_pin_buffer[0]=0;
   wl_temp_pin_buffer[0]=0;
}

/*******************************************************************************
/
/     Routine:       reset_pin_buff_ptr
/
/     Author:        RSA
/
/     Creation Date: 03/31/95
/
/     Description:   This Routine is called to set the pin buffer pointer to
/                    the current buffer (pin or old_pin) based on the pin
/                    input state.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: wl_pin_buff_ptr
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void reset_pin_buff_ptr(void)
{
   /* Select the proper buffer based on pin_state */
   switch (wl_pin_state)
   {
      case OLD_PIN_VERIFY:
      case NEW_PIN_VERIFY:
         wl_pin_buff_ptr = wl_temp_pin_buffer;
         break;

      default:
      /*
      case NEW_PIN_INIT:
      case NEW_PIN_ENTRY:
      case NEW_PIN_ERROR:
      case LOCKOUT_PIN_INIT:
      case UNLOCKOUT_PIN_INIT:
      */
         wl_pin_buff_ptr = wl_new_pin_buffer;
         break;
   }
}

/*******************************************************************************
/
/     Routine:       store_new_PIN
/
/     Author:        RSA
/
/     Creation Date: 03/31/95
/
/     Description:   This Routine is called to store a new PIN after it has been
/                    received and buffered.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: CellInfo.currentPIN
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void store_new_PIN(void)
{
   ubyte i;

   for (i=0; i< PCCA_PIN_SIZE; i++)
   {
      CellInfo.currentPIN[i] = wl_new_pin_buffer[i];
      if (CellInfo.currentPIN[i] == 0)
         break;
   }

   /* Write newPIN to EEPROM */
   wireless_store_profile(WL_EE_PROFILE_INFO);
}


/*******************************************************************************
/
/     Routine:       end_pin_entry_state
/
/     Author:        RSA
/
/     Creation Date: 03/31/95
/
/     Description:   This Routine is called to end the PIN_ENTRY states.
/
/     Input Parameters:   msg - what message to send (see acu_def.h for
/                              message defines)
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_idle.state
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void end_pin_entry_state(ubyte msg)
{
   /* Valid PIN entered during PIN ENTRY STATE? */
   if (msg != ERROR)
   {
      /* Set lock command if required */
      if (wl_pin_lock_flag == PIN_STATUS_UNLOCK)
         CellCmds.LockOut = FALSE;
      else if (wl_pin_lock_flag == PIN_STATUS_LOCK)
         CellCmds.LockOut = TRUE;
   }

   /* Take modem out of PIN ENTRY STATE */
   st_idle.state = WL_IDLE_OFFLINE;
   build_event(E_IDLE,UNUSED);
   build_event(E_MSG,msg);
   enable_acu_on_terminal();
}


/*******************************************************************************
/
/     Routine:       send_pin_msg
/
/     Author:        RSA
/
/     Creation Date: 03/31/95
/
/     Description:   This Routine is called to send a message to the DTE during
/                    PIN_ENTRY states.
/
/     Input Parameters:   msg - address of string message to send
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void send_pin_msg(ubyte *msg)
{
   if (s[3] != NULL)
      dte_to_char(s[3]);
   if (s[4] != NULL)
      dte_to_char(s[4]);
   while (*msg)
      dte_to_char(*msg++);
   if (s[3] != NULL)
      dte_to_char(s[3]);
   if (s[4] != NULL)
      dte_to_char(s[4]);
}

/*******************************************************************************
/
/     Routine:       verify_PIN
/
/     Author:        RSA
/
/     Creation Date: 03/31/95
/
/     Description:   This Routine is called to compare a buffered PIN with
/                    a selected PIN.
/
/     Input Parameters:   valid_pint_ptr = Address of PIN to compare w/buffered
/                                          PIN.
/
/     Output Parameters:  TRUE  - Match
/                      FALSE - No Match
/
/     Global Variables Changed:  None
/
/     Users:  PIN_entry_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte verify_PIN(ubyte *input_pin_ptr)
{
   /* Set pin_buff_ptr to start of current pin_buffer[] */
   reset_pin_buff_ptr();

   /* Does the buffered PIN match the input PIN? */
   while (*input_pin_ptr)
   {
      if (*input_pin_ptr++ != *wl_pin_buff_ptr++)
         return FALSE;
   }

   /* Be certain the buffered_PIN ends w/the input PIN */
   if (*wl_pin_buff_ptr)
      return FALSE;

   return TRUE;
}


/*******************************************************************************
/
/     Routine:       wl_init_PIN_entry
/
/     Author:        RSA
/
/     Creation Date: 03/31/95
/
/     Description:   This Routine is called to initialize the background
/                    processing for the PIN ENTRY STATES.  It should be called
/                    once per PIN ENTRY STATE.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed:   wl_pin_state
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_init_PIN_entry(void)
{
   /* Initialize PIN buffers */
   init_pin_buffers();

   /* Assume non lock state */
   wl_pin_lock_flag = PIN_STATUS_NONE;

   switch (wl_pin_state)
   {
      case UNLOCKOUT_PIN_INIT:
      case LOCKOUT_PIN_INIT:
         /* Set the lock flag for later */
         if (wl_pin_state == UNLOCKOUT_PIN_INIT)
            wl_pin_lock_flag = PIN_STATUS_UNLOCK;
         else
            wl_pin_lock_flag = PIN_STATUS_LOCK;

         /* If there's a currentPIN, it must be verified */
         if (CellInfo.currentPIN[0])
         {
            send_pin_msg((ubyte *)"+WPIN:");
            wl_pin_state = OLD_PIN_VERIFY;
            break;
         }

         /* Else fall through to set newPIN with a locked status */

      case NEW_PIN_INIT:

         /* Get a newPIN from the user */
         send_pin_msg((ubyte *)"+WNEWPIN:");
         wl_pin_state = NEW_PIN_ENTRY;
         break;

      default:
         /* Do nothing */
         break;
   }

   /* Move the ptr to the current buffer based on wl_pin_state */
   reset_pin_buff_ptr();
}

/*******************************************************************************
/
/     Routine:       wl_PIN_entry_bg
/
/     Author:        RSA
/
/     Creation Date: 03/31/95
/
/     Description:   This Routine is called to process in the PIN ENTRY STATES
/                    as defined by PCCA annex F.   It is called every background
/                    loop of the IDLE state when the modem is in a PIN ENTRY
/                    STATE.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed:   wl_pin_state,wl_pin_buff_ptr
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_PIN_entry_bg(void)
{
   ubyte ch;

   /* Any keyboard input? */
   while (dte_from_num() & 0xFF)
   {
      /* Get key press character */
      ch = dte_from_char();

      /*
       *  Test for end of line character
       */
      if (ch == s[3])
      {
         /* Force End of input buffer */
         *wl_pin_buff_ptr = 0;

         /* Early test for PIN sizes on command line input */
         reset_pin_buff_ptr(); /* Move ptr to start of working buffer */
         if (str_len(wl_new_pin_buffer) > PCCA_PIN_SIZE)
         {
            end_pin_entry_state(ERROR);
            return;
         }

         /* How to process the input buffer */
         switch (wl_pin_state)
         {
            case NEW_PIN_ENTRY:
               /* At this point we've got one valid newPIN input, now
                  get a second for verification.  This isn't in the
                  spec. but is good PIN practice, I.M.H.O. */
               send_pin_msg((ubyte *)"+WNEWPIN:");
               wl_pin_state = NEW_PIN_VERIFY;

               /* Select temp buffer for 2nd newPIN (set NEW_PIN_VERIFY
                  state first!) */
               reset_pin_buff_ptr();
               break;

            case NEW_PIN_VERIFY:
               /* Make sure both newPINs match each other */
               if (verify_PIN(wl_new_pin_buffer))
               {
                  /* At this point we've got the user's newPIN (twice),
                     but if there's a currentPIN, it must be verified
                     before selecting/storing the newPIN */
                  if (CellInfo.currentPIN[0])
                  {
                    /* Send msg and goto verify oldPIN state */
                     send_pin_msg((ubyte *)"+WPIN:");
                     wl_pin_state = OLD_PIN_VERIFY;
                     reset_pin_buff_ptr();
                  }
                  /* Else no currentPIN (or NEW PIN STATE due to +WCLK
                     LOCK command) so save the newPIN and exit */
                  else
                  {
                     store_new_PIN();
                     end_pin_entry_state(OK);
                  }
               }
               /* Else error in inputing the newPIN */
               else
               {
                  end_pin_entry_state(ERROR);
               }
               break;

            case OLD_PIN_VERIFY:
               /* At this point we've got an tempPIN that must be verified
                  against the previously set PIN (currentPIN) */
               if (verify_PIN(CellInfo.currentPIN))
               {
                  /* If we're verifing a PIN due to the lock command,
                     we don't store the PIN */
                  if (!wl_pin_lock_flag)
                     store_new_PIN();
                  end_pin_entry_state(OK);
               }
               /* Else currentPIN and inputPIN don't match */
               else
               {
                  end_pin_entry_state(ERROR);
               }
               break;

            default:
               /* Do nothing (for INIT cases) */
               break;
         } /* switch */

      } /* If end of line char */

      /*
       *  Test for backspace character
       */
      else if ((ch == s[5]) && (ch != s[3]))
      {
         /* Ignore the backspace if it goes beyond either input buffer */
         if ((wl_pin_buff_ptr != wl_temp_pin_buffer) &&
            (wl_pin_buff_ptr != wl_new_pin_buffer))
         {
            /* Update DTE w/back space */
            dte_to_char(s[5]);
            dte_to_char(' ');
            dte_to_char(s[5]);

            /* Update pin buffer */
            wl_pin_buff_ptr--;
            *wl_pin_buff_ptr = 0;
         }
      }
      /*
       *  Else it's a valid PIN character
       */
      else
      {
         /* Send an dummy char echoing input */
         dte_to_char('*');

         /* Update pin buffer w/ new char */
         *wl_pin_buff_ptr++ = ch;
      }
   }
}

