/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00lib.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains basic code for handling Wireless Modem
/                       functions.
/
/     Product:          ACU core code
/
/     History:          Original version (4.??)
/
/        Created:       1/16/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_pro.h"
#include "v25_def.h"
#include "ee_def.h"
#include "acu_mem.h"
#include "mt_pro.h"
#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"
#include "wbios.h"
#include "audio_if.h"

/* Local Prototypes */
void acu_wl_configure(void);
void acu_wl_load_defaults(ubyte load_type);
ubyte acu_wl_get_profile(ubyte which_profile,ubyte *eeprom_write_ptr);
ubyte acu_wl_put_profile(ubyte which_profile);
void wl_set_audio_level(ubyte type);
void wl_set_audio_path(ubyte path);
uword do_min(uword value);
uword ID_to_MIN2(void);
ulong ID_to_MIN1(void);
void process_wl_timers(void);
ubyte wl_qualify_rssi(void);


/*******************************************************************************
/
/     Routine:       acu_wl_configure
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to reconfigure the Wireless
/                    Task with the current ACU parameter settings.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None.
/
/     Users: wireless_reset
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_wl_configure(void)
{
   WBIOS_CONTROL wbios;

#if 0 /* not yet supported jfc 5/95 */
   /* Configure Wireless Static Parameters */
   wbios.type = WL_RSSI_REPORT_PERIOD; /* +data (100ms granularity)    */
   wbios.u.data[0] = 5; /* 500 ms */
   wbios_control(&wbios);
#endif


   wbios.type = WL_HANDOFF_IND_CTRL;   /* +data (On/Off)               */
   wbios.u.data[0] = TRUE;
   wbios_control(&wbios);

   /* Config the Audio Interface */
   wl_set_audio_level(WL_TX_LEVEL);
   wl_set_audio_level(WL_RX_LEVEL);

   /* Use the AT!MODE command (recalled from EEPROM) to enable/disable cellular */
   switch (CellCmds.mode)
   {
       case MODE_PSTN | MODE_DATA:
           build_event(E_IDLE,MODE_PSTN_MODEM);
           break;

       case MODE_WIRELESS | MODE_DATA:
           build_event(E_IDLE,MODE_WIRELESS_MODEM);
           break;

       case MODE_PSTN | MODE_PHONE:
           build_event(E_IDLE,MODE_PSTN_PHONE);
           break;

       case MODE_WIRELESS | MODE_PHONE:
           build_event(E_IDLE,MODE_WIRELESS_PHONE);
           break;
   }
}

/*******************************************************************************
/
/     Routine:       acu_wl_load_defaults
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to load the default configuration
/                    of the Wireless Task Driver.
/
/     Input Parameters:   load_type - which defaults to load
/                                      0 = AT command defaults
/                                      1 = AT command defaults and Wireless
/                                          data (ESN, NAMS...)
/     Output Parameters:  None
/
/     Global Variables Changed: CellCmds.*, CellInfo.*
/
/     Users: wireless_reset
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_wl_load_defaults(ubyte load_type)
{
   ubyte i,j;

   /* Always load AT command defaults */
   CellCmds.mode               = DEFAULT_WL_CMD__MODE;
   CellCmds.whichNAM           = DEFAULT_WL_CMD__NAM_SEL;
   CellCmds.AudioRxGain        = DEFAULT_WL_CMD__RX_BIAS;
   CellCmds.AudioTxGain        = DEFAULT_WL_CMD__TX_BIAS;
   CellCmds.CDstrengthThresh   = DEFAULT_WL_CMD__CDTHRESH;
   CellCmds.Antenna            = DEFAULT_WL_CMD__ANTENNA;
   CellCmds.IdleToSleepTime    = DEFAULT_WL_CMD__IDLE2SLEEP;
   CellCmds.LockOut            = DEFAULT_WL_CMD__LOCKOUT;
   CellCmds.SessionTimeLimit   = DEFAULT_WL_CMD__SESS_LIMIT;
   CellCmds.CellularResultCodes= DEFAULT_WL_CMD__RESULTS;
   CellCmds.RoamLockout        = DEFAULT_WL_CMD__RLOCKOUT;
   for (i=0; i<PCCA_PIN_SIZE; i++)  /* No PIN */
      CellInfo.currentPIN[i] = 0;

   /* Test for NAM and ESN defaults */
   if (load_type == LOAD_CMDS_AND_NAM)
   {
      /* Reset ESN */
      CellInfo.ESN = DEFAULT_ESN;

      /* Reset NAMs */
      for (i=0; i<WL_NAM_COUNT; i++)
      {
         CellInfo.NAM[i].IDareaCode = DEFAULT_NAM__MINAREA;
         CellInfo.NAM[i].IDfirst    = DEFAULT_NAM__MINFIRST;
         CellInfo.NAM[i].IDlast     = DEFAULT_NAM__MINLAST;
         CellInfo.NAM[i].sso        = DEFAULT_NAM__SSO;
         CellInfo.NAM[i].EXp        = DEFAULT_NAM__EXP;
         CellInfo.NAM[i].SCMp       = DEFAULT_NAM__SCMP;
         CellInfo.NAM[i].ACCOLCp    = DEFAULT_NAM__ACCOLCP;
         CellInfo.NAM[i].AutoReg    = DEFAULT_NAM__AUTOREG;
         CellInfo.NAM[i].dtx        = DEFAULT_NAM__DTX;
         CellInfo.NAM[i].HomeOnly   = DEFAULT_NAM__HOMEONLY;
         CellInfo.NAM[i].SIDp       = DEFAULT_NAM__SIDP;
         CellInfo.NAM[i].FirstCHPp  = DEFAULT_NAM__FIRSTCHPP;
         CellInfo.NAM[i].fccsa      = DEFAULT_NAM__FCCSA;
         CellInfo.NAM[i].fccsb      = DEFAULT_NAM__FCCSB;
         CellInfo.NAM[i].lccsa      = DEFAULT_NAM__LCCSA;
         CellInfo.NAM[i].lccsb      = DEFAULT_NAM__LCCSB;
      } /* for */

      /* Reset Power Tables to zero - must be aligned before it can be used */
      for (i=0;i<3;i++)
      {
         for (j=0;j<8;j++)
         {
            CellInfo.target_table[i][j] = default_target_table[i][j];
            CellInfo.DAC_table[i][j] = default_DAC_table[i][j];
         }
      }

      /* Reset APROC Attenuator Tables */
      for (i=0; i<NUM_ATTENUATORS; i++)
         CellInfo.attenuator[i] = default_atten_table[i];
   }
}

/*******************************************************************************
/
/     Routine:       acu_wl_get_profile
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to load the Wireless configurations
/                    stored in EEPROM.
/
/     Input Parameters:  which_profile - which stored user profile to recall:
/                                      0 - profile 0
/                                      1 - profile 1
/                                      ...
/                                      0xFE - recall the stored NAMS, ESN, LVL
/                                      0xFF - recall the EEPROM Version level
/
/                      eeprom_write_ptr - where to store the info
/                                          read from EEPORM
/
/     Output Parameters:  error_occurred - TRUE (if error occured reading EEPROM)
/                                        FALSE (if no read error occured)
/
/     Global Variables Changed: None
/
/     Users: wireless_reset, wireless_recall_profile
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte acu_wl_get_profile(ubyte which_profile,ubyte *eeprom_write_ptr)
{
   ubyte error;
   uword eeprom_addr,eeprom_size;

   switch (which_profile)
   {
      /* Various Profile numbers 0,1... */
      case 0:
      case 1:
         eeprom_size = sizeof(struct WIRELESS_CMDS_STRUCT);
         /* Address short cuts require knowledge of the EEPROM structure */
         eeprom_addr = WIRELESS_EEPROM_START_ADDR + WL_EE_VERSION_SIZE;
         eeprom_addr += which_profile * eeprom_size;
         break;

      case WL_EE_PROFILE_INFO: /* NAMS, ESN... */
         eeprom_size = sizeof(struct WIRELESS_INFO_STRUCT);
         /* Address short cuts require knowledge of the EEPROM structure */
         /* Info comes last */
         eeprom_addr = WIRELESS_EEPROM_START_ADDR +
            sizeof(struct WIRELESS_EEPROM_STRUCT);
         eeprom_addr -= sizeof(struct WIRELESS_INFO_STRUCT);
         break;

      case WL_EE_PROFILE_VER:
         eeprom_size = WL_EE_VERSION_SIZE;
         eeprom_addr = WIRELESS_EEPROM_START_ADDR;
         break;

      default:
         return TRUE;
   }

   /* Read the cellular profile from EEPROM into a temp array */
   error = modem_read_data(eeprom_addr,eeprom_size,eeprom_write_ptr);
   return (error);
}


/*******************************************************************************
/
/     Routine:       acu_wl_put_profile
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to store the Wireless configurations
/                    to EEPROM.
/
/     Input Parameters:  which_profile - which profile to store:
/                                      0 - profile 0
/                                      1 - profile 1
/                                      ...
/                                      0xFE - store NAMS, ESN, LVL
/                                      0xFF - store EEPROM Version level
/
/     Output Parameters:  error_occurred - TRUE (if error occured reading EEPROM)
/                                        FALSE (if no read error occured)
/
/     Global Variables Changed: None
/
/     Users: wireless_reset, wireless_recall_profile
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte acu_wl_put_profile(ubyte which_profile)
{
   ubyte error,chksum;
   uword eeprom_addr,eeprom_size;
   ubyte *eeprom_in_ptr;

   switch (which_profile)
   {
      /* Various Profile numbers 0,1... */
      case 0:
      case 1:
         eeprom_size = sizeof(struct WIRELESS_CMDS_STRUCT);
         eeprom_in_ptr = (ubyte *)&CellCmds;

         /* Address short cuts require knowledge of the EEPROM structure */
         eeprom_addr = WIRELESS_EEPROM_START_ADDR + WL_EE_VERSION_SIZE;
         eeprom_addr += which_profile * eeprom_size;
         break;

      case WL_EE_PROFILE_INFO: /* NAMS, ESN... */
         eeprom_in_ptr = (ubyte *)&CellInfo;

         eeprom_size = sizeof(struct WIRELESS_INFO_STRUCT);
         /* Address short cuts require knowledge of the EEPROM structure */
         /* Info comes last */
         eeprom_addr = WIRELESS_EEPROM_START_ADDR +
            sizeof(struct WIRELESS_EEPROM_STRUCT);
         eeprom_addr -= sizeof(struct WIRELESS_INFO_STRUCT);
         break;

      case WL_EE_PROFILE_VER:
         eeprom_in_ptr = WL_EEPROM_VERSION;
         eeprom_size = WL_EE_VERSION_SIZE;
         /* Version comes first */
         eeprom_addr = WIRELESS_EEPROM_START_ADDR;
         break;

      default:
         return TRUE;
   }

   /* Write the current cellular profile to EEPROM */
   error = modem_write_data(eeprom_addr,eeprom_size,eeprom_in_ptr);

   /* If no EEPROM write error, recalculate the EEPROM checksum after we
      write to it, otherwise the ACU will consider the EEPROM corrupt
      at the next power up */
   if (!error)
   {
      /* Reuse eeprom_addr */
      chksum = modem_eeprom_checksum();
      error = modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,&chksum);
   }

   return (error);
}


/*******************************************************************************
/
/     Routine:       wl_set_audio_level
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to set the Audio Volume from the
/                    current command value.
/
/     Input Parameters:  type - which path to set:
/                              0 (WL_RX_LEVEL) set RX level
/                              1 (WL_TX_LEVEL) set TX level
/
/     Output Parameters:  None.
/
/     Global Variables Changed: None
/
/     Users: wireless_reset, wireless_recall_profile
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_set_audio_level(ubyte type)
{
   AUDIO_CONTROL audiomsg;

   if (type == WL_RX_LEVEL)
   {
      audiomsg.type = AUDIO_BIAS_RX_VOL;
      audiomsg.data = CellCmds.AudioRxGain;
   }
   else
   {
      audiomsg.type = AUDIO_BIAS_TX_VOL;
      audiomsg.data = CellCmds.AudioTxGain;
   }
   audio_control( &audiomsg );
}


/*******************************************************************************
/
/     Routine:       wl_set_audio_path
/
/     Author:        RSA
/
/     Creation Date: 05/30/95
/
/     Description:   This Routine is called to set the Audio Volume from the
/                    current command value.
/
/     Input Parameters:  path - which path to set:
/                              (same defines as AT!MODE)
/                              0 Wireline DATA/Modem
/                              1 Wireless DATA/Modem
/                              2 Wireline VOICE/Telephone
/                              3 Wireless VOICE/Telephone
/
/     Output Parameters:  None.
/
/     Global Variables Changed: None
/
/     Users: wireless_reset, wireless_recall_profile
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_set_audio_path(ubyte path)
{
   AUDIO_CONTROL audiomsg;

   audiomsg.type = AUDIO_MODE;
   switch (path)
   {
      case MODE_PSTN | MODE_DATA:
         audiomsg.data = PSTN_MODE;
         audio_control( &audiomsg);
         audiomsg.data = DATA_MODE;
         audio_control( &audiomsg);
         break;

      case MODE_WIRELESS | MODE_DATA:
         audiomsg.data = WIRELESS_MODE;
         audio_control( &audiomsg);
         audiomsg.data = DATA_MODE;
         audio_control( &audiomsg);
         break;

      case MODE_PSTN | MODE_PHONE:
         audiomsg.data = PSTN_MODE;
         audio_control( &audiomsg);
         audiomsg.data = VOICE_MODE;
         audio_control( &audiomsg);

         /* Custom voice path for PSTN only (No compandor or DPROC) */
         audiomsg.type = AUDIO_AUDIO_PATH;
         audiomsg.data = PSTN_VOICE_RXTX;
         audio_control( &audiomsg);
         break;

      case MODE_WIRELESS | MODE_PHONE:
         audiomsg.data = WIRELESS_MODE;
         audio_control( &audiomsg);
         audiomsg.data = VOICE_MODE;
         audio_control( &audiomsg );
         break;
   }
}


/*******************************************************************************
/
/     Routine:       do_min
/
/     Author:        RSA
/
/     Creation Date: 05/05/95
/
/     Description:   This Routine is called to compute the value of a 3 digit
/                    telephone number to a MIN (Mobile ID Number) per
/                    TIA-553 2.3.1.
/
/     Input Parameters:  value - 3 digit telephone number.
/
/     Output Parameters:  Converted value
/
/     Global Variables Changed: None
/
/     Users: ID_to_MIN1, ID_to_MIN2
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
uword do_min(uword value)
{
   volatile ubyte d1,d2,d3;  /* No compiler optimization */

   d1 = value/100;
   value -= (d1*100);
   d2 = value/10;
   d3 = value - (d2*10);

   /* Zeros go to 10 in BCD */
   if (!d1)
      d1=10;
   if (!d2)
      d2=10;
   if (!d3)
      d3=10;

   return ((d1*100)+(10*d2)+d3-111);
}

/*******************************************************************************
/
/     Routine:       ID_to_MIN2
/
/     Author:        RSA
/
/     Creation Date: 05/05/95
/
/     Description:   This Routine is called to compute the MIN2 from the unit's
/                    local telephone number.
/
/     Input Parameters:  None
/
/     Output Parameters:  MIN2
/
/     Global Variables Changed: None
/
/     Users: wireless_enable
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
uword ID_to_MIN2(void)
{
   return (do_min(CellInfo.NAM [CellCmds.whichNAM].IDareaCode));
}

/*******************************************************************************
/
/     Routine:       ID_to_MIN1
/
/     Author:        RSA
/
/     Creation Date: 05/05/95
/
/     Description:   This Routine is called to compute the MIN1 from the unit's
/                    local telephone number.
/
/     Input Parameters:  None
/
/     Output Parameters:  MIN2
/
/     Global Variables Changed: None
/
/     Users: wireless_enable
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ulong ID_to_MIN1(void)
{
   volatile ulong holding,temp;

   holding = do_min(CellInfo.NAM [CellCmds.whichNAM].IDfirst);
   holding <<= 14;

   /* Get thousands digit */
   temp = CellInfo.NAM [CellCmds.whichNAM].IDlast/1000;

   /* BCD check */
   temp &= 0xF;
   if (!temp)
      temp=10;

   /* Add thousands digit to MIN */
   holding |= temp << 10;

   temp = CellInfo.NAM [CellCmds.whichNAM].IDlast/1000;
   temp = CellInfo.NAM [CellCmds.whichNAM].IDlast - (temp*1000);

   holding |= do_min(temp);
   return (holding);
}


/*******************************************************************************
/
/     Routine:       process_wl_timers
/
/     Author:        RSA
/
/     Creation Date: 05/30/95
/
/     Description:   This Routine is called to process the ACU wirless timers
/                    in the backgroud.
/
/     Input Parameters:  None
/
/     Output Parameters:  None
/
/     Global Variables Changed: wl_10ms_timer_tick,wl_100ms_time,
/      wl_1sec_timer,wl_session_timer,wl_1min_timer,wl_1hour_timer
/
/     Users: wireless_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void process_wl_timers(void)
{
   uword t;

   t = wl_10ms_timer_tick;
   wl_10ms_timer_tick=0;
   while (t--)
   {
      /* 10 msecs has expired */
      if (!--wl_100ms_timer)
      {
         wl_100ms_timer = 10;
         /* 100 msecs has expired */

         if (!--wl_1sec_timer)
         {
            wl_1sec_timer=10;
            /* 1 second has expired */

            /* +WSTL Session time-out in seconds */
            if (wl_session_timer)
            {
               if (!--wl_session_timer)
                  build_event(E_HANGUP,WCALL_TIMEOUT);
            }

#if 0 /* minutes are unused */
            if (!--wl_1min_timer)
            {
               wl_1min_timer=60;

               if (!--wl_1hour_timer)
               {
                  wl_1hour_timer=60;
               }
            }
#endif  /* Unused */
         }
      }
   }
}


/*******************************************************************************
/
/     Routine:       wl_qualify_rssi
/
/     Author:        RSA
/
/     Creation Date: 05/30/95
/
/     Description:   This Routine is called to quailify the RSSI threshold
/                    for a given wireless link based on the PCCA command +WS51.
/                    The routine returns T/F based on the threshold setting
/                    and the rx signal strength from the wireless code.
/
/     Input Parameters:  None
/
/     Output Parameters:  (0) FALSE, (otherwise) TRUE
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte wl_qualify_rssi(void)
{
   ubyte rssi;

   /* PCCA command to test RX signal threshold */
   if (CellCmds.CDstrengthThresh != WS51_IGNORE_LOW_RSSI)
   {
      /* Get current RSSI from wireless layer */
      wireless_info(INFO_RSSI,&rssi);

      /* Return False if RSSI is below the user's threshold (AT+WS51) */
      if (CellCmds.CDstrengthThresh > rssi)
      {
         return FALSE; /* RSSI is too poor */
      }
   }
   return TRUE; /* RSSI is qualified */
}
