/****************************************************************************
/
/     Copyright 1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00pr.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for processing the PARSE state
/                       for a Wireless Modem connection.
/
/     Product:          ACU core code
/
/     History:          Original version based on ac00pra1.c v4.02
/
/        Created:       1/16/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"
#include "audio_if.h"
#include "par_def.h"
#include "par_pro.h"
#include "mt_pro.h"



/* Local Wireless PARSE Prototypes */
void proc_parse_wl(void);
void parse_wl_at_hangup(void);
void parse_wl_at_parse(void);
void wl_parse_to_idle(void);


/*******************************************************************************
/
/     Routine:       proc_wl_parse
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process events by determining the
/                    next state and the action to perform for the
/                    PARSE state of type AT_WIRELESS_DATA.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: acu_state, acu_proc
/
/     Users: proc_online
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_wl_parse(void)
{
   acu_state = st_wl_parse_at[acu_event->type].new_state;
   acu_proc = st_wl_parse_at[acu_event->type].fnc_ptr;
}



/*******************************************************************************
/
/     Routine:       parse_wl_at_hangup
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to process HANGUP events while
/                    in PARSE state for cellular data connections.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_hangup.state,st_hangup.type,hangup_result_type
/
/     Users: master_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parse_wl_at_hangup(void)
{
   if (st_parse.type == AT_WIRELESS_PHONE)
   {
      st_hangup.type = WIRELESS_PHONE;
      st_hangup.state = HANGUP_HOOK;
   }
   else
   {
      st_hangup.type = WIRELESS_DATA;
      st_hangup.state = HANGUP_INIT;

      /* Let hangup send the OK only when off-line */
      if (at_h_command == TRUE && !hook)
         send_ok = FALSE;
   }
   hangup_result_type = (ubyte)acu_event->parm;
}



/*******************************************************************************
/
/     Routine:       wl_parse_to_idle
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to handle IDLE events in the
/                    PARSE state of type AT_WIRELESS_DATA.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_idle.type
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_parse_to_idle(void)
{
   switch (acu_event->parm)
   {
      case MODE_PSTN_MODEM:
      case MODE_WIRELESS_MODEM:
      case MODE_PSTN_PHONE:
      case MODE_WIRELESS_PHONE:
         wireless_mode_event(acu_event->parm);
         build_event(E_MSG,OK);
         break;

      case MODE_SLEEP:
         idle_sleep_event();
         break;

      default:
         if (st_parse.type == AT_WIRELESS_PHONE)
            st_idle.type = AT_WIRELESS_PHONE;
         else
            st_idle.type = AT_WIRELESS_DATA;
         break;
   }
}


/*******************************************************************************
/
/     Routine:       wl_parse_at_msg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to output a canned message to the
/                    DTE during PARSE state.  This routine checks for
/                    non-wireless messages and routes those to the standard ACU.
/
/     Input Parameters:  type - which message to send (see ACU_DEF.H)
/
/     Output Parameters: None
/
/     Global Variables Changed: None
/
/     Users: st_wl_parse_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_parse_at_msg(void)
{
   ubyte msg_type;

   msg_type = (ubyte)acu_event->parm;

   /* Test for messages exclusive to Wireless */
   if ((msg_type >= WLOCKED_OUT) && (msg_type <= WBAD_NAM))
   {
      autobaud_off();

      /* Send message to the terminal... */
      wl_output_result(msg_type);
#ifndef __riscos
      while (acu_to_num() > 0) ;
      while (!check_all_sent()) ;
#endif

      /* If a command was issued to fix the baud rate then set the terminal
         speed to the new value. */
      if (new_dte_baud)
      {
         dte_baud = new_dte_baud;
         new_dte_baud = 0;
         acu_set_tx_baud(dte_baud);
         acu_from_clear();
      }

      if (terminate_packet_protocol)
      {
         terminate_packet_protocol = FALSE;
         acu_packet_protocol(OFF, PP_TIMEOUT);
      }

      if (dont_autobaud == FALSE)
      {
         acu_from_clear();
         autobaud_on();
      }

      if (sr14.echo_cmd_flag && !dont_echo)
         modem_serial_echo(ON);
   }
   else
   {
      parse_at_msg();
   }
}
