/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00id.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for processing the IDLE state
/                       for Wireless Modem connections.
/
/     Product:          ACU core code
/
/     History:          ac00idat.c v4.02
/
/        Created:       1/16/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"


/* Local Wireless IDLE Prototypes */
void proc_idle_cell(void);
void idle_wl_bg(void);
void wl_idle_online_bg(void);
void wl_idle_ring_bg(void);
void wl_idle_offline_bg(void);
void idle_at_wl_orig(void);
void idle_at_wl_answ(void);
void idle_wl_ring(void);
void init_wl_connection(void);
void idle_wl_autoanswer(void);


/*******************************************************************************
/
/     Routine:       proc_wl_idle
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process events by determining the
/                    next state and the action to be performed for
/                    the IDLE state of type AT_WIRELESS_DATA.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users: proc_online
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_wl_idle(void)
{
   /* Process different substates of IDLE */
   switch (st_idle.state)
   {
      case WL_IDLE_OFFLINE:
         acu_state = st_wl_idle_offln_at[acu_event->type].new_state;
         acu_proc = st_wl_idle_offln_at[acu_event->type].fnc_ptr;
         break;

      case WL_IDLE_ONLINE_DATA:
         acu_state = st_wl_idle_onln_at[acu_event->type].new_state;
         acu_proc = st_wl_idle_onln_at[acu_event->type].fnc_ptr;
         break;

      case WL_IDLE_ONLINE:
         acu_state = st_wl_idle_onln[acu_event->type].new_state;
         acu_proc = st_wl_idle_onln[acu_event->type].fnc_ptr;
         break;

      case WL_IDLE_TEST:
         /* This needs work */
         acu_state = st_wl_idle_test[acu_event->type].new_state;
         acu_proc = st_wl_idle_test[acu_event->type].fnc_ptr;
         break;

      case WL_IDLE_FAX_ONLINE:
         proc_wl_idle_fax_on();
         break;

      case WL_IDLE_VOICE_ONLINE:
         /* This needs work */
         acu_state = st_wl_idle_onln[acu_event->type].new_state;
         acu_proc = st_wl_idle_onln[acu_event->type].fnc_ptr;
         break;
   }
}


/*******************************************************************************
/
/     Routine:       wl_idle_bg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process the background functions for
/                    the IDLE state of type AT_WIRELESS_DATA.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users: online_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_idle_bg(void)
{
   /* Run different substates of Wireless IDLE background */
   switch (st_idle.state)
   {
      case WL_IDLE_OFFLINE:
         /* Wireless mode selected, but not connected */

         /* Use PSTN routines for standard modem off line processing */
         idle_offline_bg();

         /* Use Cell routine for cellular off line processing */
         wl_idle_offline_bg();

         /* We have to generate the rings to the terminal */
         wl_idle_ring_bg();
         break;

      case WL_IDLE_ONLINE_DATA:
         /* Wireless mode selected, and connected to a remote phone, and
            in modem DATA mode */
         /* Use PSTN routines for standard modem on line processing */
         online_pstn_bg();

         /* Intentionally fall through */

      case WL_IDLE_FAX_ONLINE:
         /* Intentionally fall through */

      case WL_IDLE_ONLINE:
         /* Wireless mode selected, and connected to a remote phone */
         wl_idle_online_bg();
         break;


       case WL_IDLE_TEST:
         /* This needs work */

         /* Use PSTN routines for standard modem on line processing */
         online_pstn_bg();

         /* Use Cell routine for cellular on line processing */
         wl_idle_online_bg();
         break;

      case WL_IDLE_VOICE_ONLINE:
         /* This needs work */
         break;

      case WL_IDLE_PIN_INIT:
         wl_init_PIN_entry();
         st_idle.state = WL_IDLE_PIN_ENTRY;

         /* Intentionally fall through */

      case WL_IDLE_PIN_ENTRY:
         wl_PIN_entry_bg();
         break;
   }
}



/*******************************************************************************
/
/     Routine:       wl_idle_offline_bg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process the background functions for
/                    the Wireless Offline IDLE state.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users: online_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_idle_offline_bg(void)
{
   /* Wait for Ring message from wlular code */
   switch (wireless_call_progress())
   {
      case RING_MESSAGE:
         if (!wl_ringing)
            build_event(E_RING,UNUSED);
         break;

      case UNDETERMINED:
      case CONNECTION_ACTIVE:
      case CONNECTION_BUSY:
      case CONNECTION_DROPPED:
      case CONNECTION_HANDOFF:
      default:
         break;
   } /* switch */
}


/*******************************************************************************
/
/     Routine:       wl_idle_ring_bg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will generate the ring message for a
/                    Wireless call.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: timer3
/
/     Users: online_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_idle_ring_bg(void)
{
   /* If we're ringing, and the it's time to ring again, post the
      message and generate the ring signal */
   if (wl_ringing)
   {
      /* Ring message timer */
      if (!timer3)
      {
         timer3 = WL_TIME_BETWEEN_RINGS;
         build_event(E_MSG,RING);
         idle_wl_autoanswer();
      }

      /* Add Audible Ring timer here */
   }
}


/*******************************************************************************
/
/     Routine:       wl_idle_online_bg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process the background functions for
/                    the Wireless Online IDLE state.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users: online_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_idle_online_bg(void)
{
   /* No debounce required for Wireless Channel detection */
   switch (wireless_call_progress())
   {
      case CONNECTION_DROPPED:
         build_event(E_HANGUP,UNUSED);
         break;

      case CONNECTION_HANDOFF:
         if (st_idle.state == WL_IDLE_ONLINE_DATA)
            build_event(E_RETRAIN,UNUSED);
         break;

      case UNDETERMINED:
      case CONNECTION_ACTIVE:
      case RING_MESSAGE:
      case CONNECTION_BUSY:
      default:
         break;
   } /* switch */
}


/*******************************************************************************
/
/     Routine:       idle_at_wl_orig
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to process ORIG events while
/                    IDLE for wireless data connections.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_orig.type,st_orig.state,acu_dial_string_ptr
/
/     Users: master_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_at_wl_orig(void)
{
   /* Set ORIG type to Wireless Data */
   if (st_idle.type == AT_WIRELESS_PHONE)
      st_orig.type = WIRELESS_PHONE;
   else
      st_orig.type = WIRELESS_DATA;

   /* Set ORIG Wireless Data state based on Event */
   switch (acu_event->parm)
   {
      /* Setup the command line to not dial any number */
      case NO_DIAL:
         st_orig.state = INIT_ACU_NO_DIAL;
         break;

      /* Setup the command line to number stored at location 0 */
      case DIAL_NUM0:
         cmd_line[0] = 'S';
         cmd_line[1] = '\0';
         cmd_ptr = (ubyte *)&cmd_line[0];

         /* Load Dial String ptr to cmd line w/S0 */
         acu_dial_string_ptr = cmd_ptr;
         st_orig.state = INIT_ACU_DIAL;
         break;

      default:
         st_orig.state = INIT_ACU_DIAL;
         break;
   }

   /* Setup variables needed for an Wireless data connection */
   init_wl_connection();
}


/*******************************************************************************
/
/     Routine:       idle_at_wl_answ
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to process ANSW events while
/                    IDLE for wlular data connections.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_answ.type,st_answ.state
/
/     Users: master_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_at_wl_answ(void)
{
   /* Set ANSW type and state to Wireless Data */
   /* Set ORIG type to Wireless Data */
   if (st_idle.type == AT_WIRELESS_PHONE)
      st_answ.type = WIRELESS_PHONE;
   else
      st_answ.type = WIRELESS_DATA;

   st_answ.state = INIT_ACU_ANSW;

   /* Setup variables needed for an Wireless data connection */
   init_wl_connection();

   if ((sr27.comm_mode == SYNC_DTR) || (sr27.comm_mode == SYNC_TALK))
      modem_dte_cts(OFF);
   if (sr27.comm_mode == ASYNC)
      modem_dte_cts(ON);
}


/*******************************************************************************
/
/     Routine:       idle_wl_ring
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to process RING events while
/                    IDLE OFFLINE for wlular data connections.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: wl_ringing, timer3
/
/     Users: master_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_wl_ring(void)
{
   wl_ringing = TRUE;
   timer3 = WL_TIME_BETWEEN_RINGS;

   /* Wake up on every wirless ring */
   idle_wl_autoanswer();
}


/*******************************************************************************
/
/     Routine:       init_wl_connection
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to configure variables from
/                    and IDLE state for a Wireless Data connection
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: v32bis_enable, comm_mode, DSR_only_at_handshaking,
/           dial_pause_time,last_async_sync
/
/     Users: master_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void init_wl_connection(void)
{
   /* Need to determine if V.32bis is enabled in by s110.  This variable
      needs to be set before translate_modem_baud() or update_modem_rate_seq()
      is called */
   v32bis_enable = s[110];

   /* Setup the communication mode to be used during the connection   */
   comm_mode = (ubyte)(sr27.comm_mode + 4*sr27.autosync);

   DSR_only_at_handshaking = (ubyte)sr21.DSR_only_at_handshaking;

   dial_pause_time = s[8];

   /* Freeze speed until IDLE state is entered */
   autobaud_off();

   /* Set the DTE speed to the value found during autobaud   */
   acu_set_tx_baud(dte_baud);
   last_async_sync = ASYNC;
}


/*******************************************************************************
/
/     Routine:       wl_output_result
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to output a canned WIRELESS ONLY
/                    message to the DTE.
/
/     Input Parameters:  type - which message to send (see ACU_DEF.H)
/
/     Output Parameters: None
/
/     Global Variables Changed: None
/
/     Users: wl_idle_at_msg, wl_orig_at_msg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_output_result(ubyte type)
{
   const ubyte *msg;

   /* Make the Global message type local to the wireless arrays */
   type -= WLOCKED_OUT;

   /* If the cellular results are disabled, send their coresponding
      PSTN results via the non-wireless ACU */
   if (CellCmds.CellularResultCodes == WECR_DISABLE_PCCA)
   {
      build_event(E_MSG,(ubyte)wireless_to_PSTN_results[type]);
   }
   /* Else CellularResultCodes != FALSE */
   else
   {
      /* Configure DTE port for message */
      modem_serial_direct(NORMAL);
      modem_serial_echo(OFF);
      set_parms(acu_data_bits,acu_parity,acu_stop_bits);

      /* Wait for the buffer to free up 15 chars */
      while (acu_to_free() < 20);

      /* Get canned WIRELESS message (verbose or numeric) */
      if (sr14.verbose_form)
      {
         output_send_cr_lf();
         msg = wireless_verbose_result_table[type];
      }
      else
      {
         msg = wireless_numeric_result_table[type];
      }

      /* Send canned WIRELESS message to termanal */
      while (*msg != NULL)
         acu_to_char(*msg++);
      output_send_cr_lf();
   }
}



/*******************************************************************************
/
/     Routine:       wl_idle_at_msg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called to output a canned message to the
/                    DTE during IDLE state.  This routine checks for
/                    non-wireless messages and routes those to the standard ACU.
/
/     Input Parameters:  type - which message to send (see ACU_DEF.H)
/
/     Output Parameters: None
/
/     Global Variables Changed: None
/
/     Users: st_wl_idle_onln_at[],st_wl_idle_onln[],st_wl_idle_offln_at[],
/      st_wl_idle_test[],st_wl_hangup_at[],
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_idle_at_msg(void)
{
   ubyte msg_type;

   msg_type = (ubyte)acu_event->parm;

   /* Test for messages exclusive to Wireless */
   if ((msg_type >= WLOCKED_OUT) && (msg_type <= WBAD_NAM))
   {
      /* Turn off Autobaud to send message! */
      autobaud_off();

      /* Send message to the terminal... */
      wl_output_result(msg_type);

      /* Wait for message to arrive at terminal */
#ifndef __riscos
      while (acu_to_num() > 0);
      while (!check_all_sent());
#endif

      /* Reconfigure port after message */
      if (dont_autobaud == FALSE)
      {
         acu_from_clear();
         autobaud_on();
      }

      if (sr14.echo_cmd_flag && !dont_echo)
         modem_serial_echo(ON);
   }
   /* Else pass to standard data mode messaging */
   else
   {
      idle_at_msg();
   }
}

/*******************************************************************************
/
/     Routine:       idle_wl_autoanswer
/
/     Author:        RSA
/
/     Creation Date: 10/6/95
/
/     Description:   This Routine is called to update the auto answer mechanism
/                    for wireless data calls.
/
/     Input Parameters:  Nwone
/
/     Output Parameters: None
/
/     Global Variables Changed: None
/
/     Users:  wl_idle_ring_bg,idle_wl_ring
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_wl_autoanswer(void)
{
   s[1]++;
   timer2 = time_between_rings;

   /* Only auto answer in data mode */
   if (CellCmds.mode == MODE_WIRELESS | MODE_DATA)
      if (s[1] == s[0])
         build_event(E_ANSW,UNUSED);

   /* Wake up on every wirless ring */
   acu_sleep(S_DONT_SLEEP);
}

