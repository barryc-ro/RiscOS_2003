/****************************************************************************
/
/     Copyright 1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00cmpc.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for PCCA specified Cellular
/                       Modem AT commands.
/
/     Product:          ACU core code
/
/     History:          Original version 4.03
/
/        Created:       05/25/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_pro.h"
#include "acu_mem.h"
#include "par_def.h"
#include "par_pro.h"
#include "dte.edf"
#include "mt_pro.h"
#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"
#include "wbios.h"

/* Local Prototypes */
void acu_set_wl_pcca_commands(ubyte);
void force_PIN_entry_state(ubyte);
void plusw_cfx_eq(void);
void plusw_cfx_e(void);
void plusw_s46_eq(void);
void plusw_s46_q(void);
void plusw_s46_e(ubyte *);
void plusw_s50_eq(void);
void plusw_s50_q(void);
void plusw_s51_eq(void);
void plusw_s51_q(void);
void plusw_s51_e(ubyte *);
void plusw_s52_eq(void);
void plusw_s52_q(void);
void plusw_s56_eq(void);
void plusw_s56_q(void);
void plusw_s57_eq(void);
void plusw_s57_q(void);
void plusw_s57_e(ubyte *);
void plusw_s58_eq(void);
void plusw_s58_q(void);
void plusw_s58_e(ubyte *);
void plusw_CID_eq(void);
void plusw_CID_q(void);
void plusw_CPN_eq(void);
void plusw_CPN_e(ubyte *);
void plusw_CLK_eq(void);
void plusw_CLK_q(void);
void plusw_CLK_e(ubyte *);
void plusw_CHG_eq(void);
void plusw_CHG_q(void);
void plusw_DAC_eq(void);
void plusw_DAC_q(void);
void plusw_STL_eq(void);
void plusw_STL_q(void);
void plusw_STL_e(ubyte *);
void plusw_ECR_eq(void);
void plusw_ECR_q(void);
void plusw_ECR_e(ubyte *);
void plusw_RLK_eq(void);
void plusw_RLK_q(void);
void plusw_RLK_e(ubyte *);
void plusw_BAG_eq(void);
void plusw_BAG_q(void);
void plusw_BAG_e(ubyte *);
void plusw_PTH_eq(void);
void plusw_PTH_q(void);
void plusw_PTH_e(ubyte *);




/******************************************************************************
/
/                  Parser Structure for AMPS PCCA AT Commands
/
/  -------------------------------------------------------------
/  -                       Modifications                       -
/  -------------------------------------------------------------
/
/  Author & Date: RSA
/  Description:
/  Reason:
/
*******************************************************************************/
PARSE_CMD_TABLE_STRUCT PCCA_commands[]=
{
   (ubyte *)"+WS46=?",     plusw_s46_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS46?",      plusw_s46_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS46=",      plusw_s46_e,    BYTE_NUMERIC,   NO_FLAGS,
   (ubyte *)"+WCXF=?",     plusw_cfx_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WCXF",       plusw_cfx_e,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS50=?",     plusw_s50_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS50?",      plusw_s50_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS51=?",     plusw_s51_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS51?",      plusw_s51_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS51=",      plusw_s51_e,    BYTE_NUMERIC,   NO_FLAGS,
   (ubyte *)"+WS52=?",     plusw_s52_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS52?",      plusw_s52_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS56=?",     plusw_s56_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS56?",      plusw_s56_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS57=?",     plusw_s57_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS57?",      plusw_s57_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS57=",      plusw_s57_e,    BYTE_NUMERIC,   NO_FLAGS,
   (ubyte *)"+WS58=?",     plusw_s58_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS58?",      plusw_s58_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WS58=",      plusw_s58_e,    BYTE_NUMERIC,   NO_FLAGS,
   (ubyte *)"+WCID=?",     plusw_CID_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WCID?",      plusw_CID_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WCPN=?",     plusw_CPN_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WCPN=",      plusw_CPN_e,    CONST_STRING,   NO_FLAGS,
   (ubyte *)"+WCLK=?",     plusw_CLK_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WCLK?",      plusw_CLK_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WCLK=",      plusw_CLK_e,    CONST_STRING,   NO_FLAGS,
   (ubyte *)"+WCHG=?",     plusw_CHG_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WCHG?",      plusw_CHG_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WDAC=?",     plusw_DAC_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WDAC?",      plusw_DAC_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WSTL=?",     plusw_STL_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WSTL?",      plusw_STL_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WSTL=",      plusw_STL_e,    BYTE_NUMERIC,   NO_FLAGS,
   (ubyte *)"+WECR=?",     plusw_ECR_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WECR?",      plusw_ECR_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WECR=",      plusw_ECR_e,    BYTE_NUMERIC,   NO_FLAGS,
   (ubyte *)"+WRLK=?",     plusw_RLK_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WRLK?",      plusw_RLK_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WRLK=",      plusw_RLK_e,    BYTE_NUMERIC,   NO_FLAGS,
   (ubyte *)"+WBAG=?",     plusw_BAG_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WBAG?",      plusw_BAG_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WBAG=",      plusw_BAG_e,    SIGNED_BYTE,    NO_FLAGS,
   (ubyte *)"+WPTH=?",     plusw_PTH_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WPTH?",      plusw_PTH_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"+WPTH=",      plusw_PTH_e,    BYTE_NUMERIC,   NO_FLAGS,
   END_OF_PARSE_TABLE
};


/*******************************************************************************
/
/      Routine:        acu_set_wl_pcca_commands
/
/      Author:         RSA
/
/      Creation Date:  04/07/95
/
/      Description:    This Routine enables parsing of PCCA Annex I and J
/                      AT commands.
/
/      Input Parameters:   state - OFF (0) to disable, ON (otherwise) to enable.
/
/      Output Parameters: None
/
/      Global Variables Changed:  None
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void acu_set_wl_pcca_commands(ubyte state)
{
   ubyte type;

   if (state == ON)
       type = ENABLE_TABLE;
   else
       type = DISABLE_TABLE;

   at_parser_tables(type,PCCA_commands);
}

/******************************************************************************
/
/      Routine:        force_PIN_entry_state
/
/      Author:         RSA
/
/      Creation Date:  05/30/95
/
/      Description:    This routine is called to force the ACU into the
/                      Wireless PIN ENTRY STAETS as defined by PCCA PIN
/                      (Personal Identification Number) commands.
/
/      Input Parameters: which_state - which PIN entery state:
/                  0 = NEW_PIN_INIT - Enter newPIN
/                  1 = LOCKOUT_PIN_INIT - Verify currentPIN due to lockout
/                  2 = UNLOCKOUT_PIN_INIT - Verify currentPIN due to UNlockout
/                          command
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void force_PIN_entry_state(ubyte whichState)
{
   /*
    *  PIN commands only work in Wireless IDLE (non-connected) modes!
    */

   /* Clean up from the PARSE state */
   send_ok=FALSE;
   build_event(E_IDLE,UNUSED);

   /* Use DECC I/O on DTE port to disable ACU from taking PIN chars
      as AT commands */
   modem_serial_echo(OFF);
   disable_acu_on_terminal();
   dte_init(dte_baud,acu_data_bits,acu_stop_bits,acu_parity,0,0,0,0,0,0,0,0,0,0);

   /* Only works in Wireless modes! */
   st_idle.state = WL_IDLE_PIN_INIT;
   wl_pin_state = whichState;
}


/******************************************************************************
/
/      Routine:        plusw_cfx_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCFX=?"
/                      This command returns the possible settings for the
/                      command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_cfx_eq(void)
{
}

/******************************************************************************
/
/      Routine:        plusw_cxf_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCXF"
/                      This command allow the DCE to report back to the DTE
/                      which of the commands defined in PCCA Annex F it supports.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_cfx_e(void)
{
   wl_send_cr_lf();
   output_info((ubyte *) "\"+WCXF\",\"+WS50\",\"+WS51\",\",\
\"+WS54\",\"+WS56\",\"+WS57\",\"+WS58\",\"+WCID\",\"+WCPN\",\
\"+WCLK\",\"+WCHG\"", UNFORMATTED);
}


/******************************************************************************
/
/      Routine:        plusw_s46_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS46=?"
/                      This command returns the possible settings for the
/                      command.
/
/        This command is used to select the Wireless/Wireline DCE side
/        stack (WDS).  The following apply:
/
/        <value>= 0: No selected Wireless/Wireline mode (GSTN telephone only)
/                 1: GSTN voice/data/FAX Modem mode
/                 7: AMPS Cellular data Modem mode*
/                17: AMPS Cellular Voice mode (Cellular telephone)
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s46_eq(void)
{
   output_info((ubyte *)"0,1,7,17", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_s46_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS46?"
/                      This command returns the current value of the command.
/
/        This command is used to select the Wireless/Wireline DCE side
/        stack (WDS).  The following apply:
/
/        <value>= 0: No selected Wireless/Wireline mode (GSTN telephone only)
/                 1: GSTN voice/data/FAX Modem mode
/                 7: AMPS Cellular data Modem mode*
/                17: AMPS Cellular Voice mode (Cellular telephone)
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s46_q(void)
{
   /* Convert this command to RSA !mode command */
   switch (CellCmds.mode)
   {
      case MODE_PSTN | MODE_PHONE:
         output_info((ubyte *)"0", VERBOSE_FORM);
         break;

      case MODE_PSTN | MODE_DATA:
         output_info((ubyte *)"1", VERBOSE_FORM);
         break;

      case MODE_WIRELESS | MODE_DATA:
         output_info((ubyte *)"7", VERBOSE_FORM);
         break;

      case MODE_WIRELESS | MODE_PHONE:
         output_info((ubyte *)"17", VERBOSE_FORM);
         break;
   }
}

/******************************************************************************
/
/      Routine:        plusw_s46_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS46="
/
/        This command is used to select the Wireless/Wireline DCE side
/        stack (WDS).  The following apply:
/
/        <value>= 0: No selected Wireless/Wireline mode (GSTN telephone only)
/                 1: GSTN voice/data/FAX Modem mode
/                 7: AMPS Cellular data Modem mode*
/                17: AMPS Cellular Voice mode (Cellular telephone)
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s46_e(ubyte *parmater_ptr)
{
   ubyte data;

   /* Convert this command to RSA !mode command */
   switch (*parmater_ptr)
   {
      case 0:
         data = MODE_PSTN | MODE_PHONE;
         break;

      case 1:
         data = MODE_PSTN | MODE_DATA;
         break;

      case 7:
         data = MODE_WIRELESS | MODE_DATA;
         break;

      case 17:
         data = MODE_WIRELESS | MODE_PHONE;
         break;

      default:
         error_occurred = TRUE;
         return;
   }

   /* send input to RSA !MODE command */
   bang_mode_e(&data);
}


/******************************************************************************
/
/      Routine:        plusw_s50_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS50=?"
/                      This command returns the possible settings for the
/                      command.
/
/                      This command is used to get signal strength of the
/                      Wireless link. Values returned to the DTE are:
/                          0 (imperceptible) to 100 (full strength), and
/                          255: Unknown
/
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s50_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}

/******************************************************************************
/
/      Routine:        plusw_s50_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS50?"
/                      This command returns the signal strength of the current
/                      Wireless link. Values returned to the DTE are:
/                          0 (imperceptible) to 100 (full strength), and
/                          255: Unknown
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s50_q(void)
{
   ubyte data[4];

   /* Get status from Wireless layer */
   wireless_info(INFO_RSSI,&data[0]);

   /* Convert to 3 digit ASCII string */
   bang_d_to_a(3,data[0], &data[0]);
   data[3] ='\0';

   /* Send data to terminal */
   output_info(&data[0],VERBOSE_FORM);
}


/******************************************************************************
/
/      Routine:        plusw_s51_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS51=?"
/                      This command returns the possible settings for the
/                      command.
/
/        This command is used to select nominal signal strength indication
/        that +WS50 must equal or exceed for the currently selected WDS
/        to enable assertion of the RLSD (carrier detect) line when &C1 is
/        in effect.  The following apply:
/
/                  <value> = 0-100: level
/                          255: Don't Care*
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s51_eq(void)
{
   output_info((ubyte *)"0-100,255", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_s51_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS51?"
/                      This command returns the current value of the command.
/
/        This command is used to select nominal signal strength indication
/        that +WS50 must equal or exceed for the currently selected WDS
/        to enable assertion of the RLSD (carrier detect) line when &C1 is
/        in effect.  The following apply:
/
/                  <value> = 0-100: level
/                          255: Don't Care*
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s51_q(void)
{
   output_info(d_to_a(CellCmds.CDstrengthThresh), VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_s51_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS51=<value>"
/
/        This command is used to select nominal signal strength indication
/        that +WS50 must equal or exceed for the currently selected WDS
/        to enable assertion of the RLSD (carrier detect) line when &C1 is
/        in effect.  The following apply:
/
/                  <value> = 0-100: level
/                          255: Don't Care*
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s51_e(ubyte *parameter_buffer_ptr)
{
   if ((*parameter_buffer_ptr > WS51_MAX_LOW_RSSI) &&
      (*parameter_buffer_ptr != WS51_IGNORE_LOW_RSSI))
      error_occurred = TRUE;
   else
      CellCmds.CDstrengthThresh = *parameter_buffer_ptr;
}


/******************************************************************************
/
/      Routine:        plusw_s52_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS52=?"
/                      This command returns the possible settings for the
/                      command (None in this case).
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s52_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}

/******************************************************************************
/
/      Routine:        plusw_s52_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS52?"
/
/        This is a read-only command used to acquire the normalized DCE battery
/        level. The values returned are:
/
/                0 (exhausted) to 100 (full strength), and
/                255: Unknown
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s52_q(void)
{
   output_info((ubyte *)"255", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_s56_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS56=?"
/                      This command returns the possible settings for the
/                      command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s56_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}

/******************************************************************************
/
/      Routine:        plusw_s56_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS56?"
/
/        This is a read-only command used to acquire the registration status
/        of the selected WDS type. The following values are returned:
/
/                0: Not registered
/                1: Registered
/                2: Registration denied
/                3: Limited registration (guest access)
/              255: Automatic/Unknown
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s56_q(void)
{
   ubyte data;

   data = 0;
   wireless_info(INFO_SERVICE, &data);
   output_info(d_to_a(data), VERBOSE_FORM);
}


/******************************************************************************
/
/      Routine:        plusw_s57_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS57=?"
/                      This command returns the possible settings for the
/                      command.
/
/        This command is used to select the (antenna or other) port preference
/        for the selected WDS type. The following apply:
/
/        <value> =   0: None
/                    1: Port A
/                    2: Port B
/                  255: Automatic/Unknown*
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s57_eq(void)
{
   /* Valid input values */
   output_info((ubyte *)"0,255",VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_s57_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS57?"
/                      This command returns the current value of the command.
/
/        This command is used to select the (antenna or other) port preference
/        for the selected WDS type. The following apply:
/
/        <value> =   0: None
/                    1: Port A
/                    2: Port B
/                  255: Automatic/Unknown*
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s57_q(void)
{
   output_info(d_to_a(CellCmds.Antenna), VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_s57_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS57=<value>?"
/
/        This command is used to select the (antenna or other) port preference
/        for the selected WDS type. The following apply:
/
/                  <value> =   0: None
/                              1: Port A
/                              2: Port B
/                            255: Automatic/Unknown*
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s57_e(ubyte *parameter_buffer_ptr)
{
   if ((*parameter_buffer_ptr == 0) || (*parameter_buffer_ptr == 255))
      CellCmds.Antenna = *parameter_buffer_ptr;
   else
      error_occurred = TRUE;
}


/******************************************************************************
/
/      Routine:        plusw_s58_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS58=?"
/                      This command returns the possible settings for the
/                      command.
/
/        This command is used to select the idle time-out interval after which
/        the modem enters the manufacture-specific low-power state.  Idle is
/        defined as any DTE-to-DCE and selected WDS-to-DCE activity. The
/        following apply:
/
/        <value> = 0             Immediate
/                  1-60          n Seconds
/                  61-120        (n-60) Minutes, (e.g. 62 selects 2 minutes)
/                  121-254       (n-120) Hours, (e.g. 125 selects 5 hours)
/                  255           Disable idle time-out*
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s58_eq(void)
{
   output_info((ubyte *)"0-120,255", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_s58_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS58?"
/                      This command returns the current value of the command.
/
/        This command is used to select the idle time-out interval after which
/        the modem enters the manufacture-specific low-power state.  Idle is
/        defined as any DTE-to-DCE and selected WDS-to-DCE activity. The
/        following apply:
/
/        <value> = 0             Immediate
/                  1-60          n Seconds
/                  61-120        (n-60) Minutes, (e.g. 62 selects 2 minutes)
/                  121-254       (n-120) Hours, (e.g. 125 selects 5 hours)
/                  255           Disable idle time-out*
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s58_q(void)
{
   output_info(d_to_a(CellCmds.IdleToSleepTime), VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_s58_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WS58="
/
/        This command is used to select the idle time-out interval after which
/        the modem enters the manufacture-specific low-power state.  Idle is
/        defined as any DTE-to-DCE and selected WDS-to-DCE activity. The
/        following apply:
/
/        <value> = 0             Immediate
/                  1-60          n Seconds
/                  61-120        (n-60) Minutes, (e.g. 62 selects 2 minutes)
/                  121-254       (n-120) Hours, (e.g. 125 selects 5 hours)
/                  255           Disable idle time-out*
/
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_s58_e(ubyte *parameter_buffer_ptr)
{
   ubyte input;

   /* Don't set this command in online-data mode */
   if (on_line_command)
   {
      error_occurred = TRUE;
      return;
   }

   input = *parameter_buffer_ptr;

   /* 0 is Immediate */
   if (input == 0)
   {
      CellCmds.IdleToSleepTime = 0;
      acu_set_sleep_timer(OFF);
      build_event(E_IDLE,MODE_SLEEP);
   }
   /* 255 is disable */
   else if (input == 255)
   {
      CellCmds.IdleToSleepTime = 0;
      acu_set_sleep_timer(OFF);
   }
   /* We only accept sleep time in secs or minutes (not hours) */
   else if (input > 120)
   {
      error_occurred = TRUE;
   }
   else
   {
      /* Sleep in Seconds? */
      if (input < 61)
      {
         CellCmds.IdleToSleepTime = input;
      }
      /* Convert input in Minutes to Seconds */
      else
      {
         input -= 60;
         CellCmds.IdleToSleepTime = input * 60;
      }

      /* Start the ball rolling */
      acu_set_sleep_timer(CellCmds.IdleToSleepTime);
   }
}


/******************************************************************************
/
/      Routine:        plusw_CID_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCID=?"
/                      This command returns the possible settings for the
/                      command.
/
/        This is a read-only command used to display the "system ID" for the
/        currently selected WDS.  The system ID is an indication of the network
/        operator (or carrier identity), rather than the selected communications
/        technology.  The following values are returned:
/
/                Free-form information text, including "UNKNOWN."
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CID_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}

/******************************************************************************
/
/      Routine:        plusw_CID_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCID?"
/
/                      This command returns the current value of the command.
/
/        This is a read-only command used to display the "system ID" for the
/        currently selected WDS.  The system ID is an indication of the network
/        operator (or carrier identity), rather than the selected communications
/        technology.  The following values are returned:
/
/                Free-form information text, including "UNKNOWN."
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CID_q(void)
{
   WBIOS_CONTROL wbiosmsg;
   ubyte output_array[11];

   /* Get status from Wireless layer */
   wbiosmsg.type = WL_STATUS;
   wbios_control(&wbiosmsg);

   bang_d_to_a(10, wbiosmsg.u.status.info.sys_id, output_array);
   output_array[10] = '\0';
   output_info(output_array,VERBOSE_FORM);
}


/******************************************************************************
/
/      Routine:        plusw_CPN_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCPN=?"
/                      This command returns the possible settings for the
/                      command.
/
/        Syntax: +WCPN="newPIN"[,"oldPIN"]
/                +WCPN=?
/                +WCPN="*"
/
/        This command sets the personal identification number or password used
/        to lock or unlock the DCE (see +WCLK). newPIN is the desired PIN; if a
/        PIN was set previously, the correct value of oldPIN (the current PIN)
/        must also be specified. In either case, the PIN is set to newPIN.
/        To remove the PIN completely, newPIN should be the empty string
/        (mandatory format "").
/
/        The literal syntax +WCPN="*" places the DCE into a new operating state,
/        NEWPIN ENTRY STATE. In this state, the DCE issues the intermediate
/        result code
/
/                        +WNEWPIN:
/
/        and then accepts characters up to a command line termination character
/        as equivalent to newPIN. The DCE then always (regardless of whether a
/        PIN was previously set) advances to a second new state, PIN ENTRY STATE.
/        In this state, the DCE issues the intermediate result code
/
/                        +WPIN:
/
/        and then accepts characters up to a command line termination character
/        as equivalent to oldPIN. The DCE then executes the +WCPN command using
/        the specified values of newPIN and oldPIN, and returns to command state.
/
/        In both NEWPIN ENTRY STATE and PIN ENTRY STATE, the values of DCE
/        parameters E and V are overridden to E0V1 (no echo, verbose results);
/        these parameters revert to their previous values before issuing a final
/        result code and before processing additional commands. All other command
/        line editing parameters, including the command line termination character,
/        command line echo, backspace character, etc. are honored during data
/        entry in either new state. PIN values entered in either of these states
/        are not enclosed in quotes.
/
/        Some devices may use numeric PINs, while others may allow arbitrary
/        text PINs; in either case, a PIN on the command line must be enclosed
/        in double quotes (according to the rules for string parameters).
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CPN_eq(void)
{
   output_info((ubyte *)"\"*\",\"newPIN\" [,\"oldPIN\"]",VERBOSE_FORM);
}


/******************************************************************************
/
/      Routine:        plusw_CPN_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              +WCPN="string"
/
/        Syntax: +WCPN="newPIN"[,"oldPIN"]
/                +WCPN=?
/                +WCPN="*"
/
/        This command sets the personal identification number or password used
/        to lock or unlock the DCE (see +WCLK). newPIN is the desired PIN; if a
/        PIN was set previously, the correct value of oldPIN (the current PIN)
/        must also be specified. In either case, the PIN is set to newPIN.
/        To remove the PIN completely, newPIN should be the empty string
/        (mandatory format "").
/
/        The literal syntax +WCPN="*" places the DCE into a new operating state,
/        NEWPIN ENTRY STATE. In this state, the DCE issues the intermediate
/        result code
/
/                        +WNEWPIN:
/
/        and then accepts characters up to a command line termination character
/        as equivalent to newPIN. The DCE then always (regardless of whether a
/        PIN was previously set) advances to a second new state, PIN ENTRY STATE.
/        In this state, the DCE issues the intermediate result code
/
/                        +WPIN:
/
/        and then accepts characters up to a command line termination character
/        as equivalent to oldPIN. The DCE then executes the +WCPN command using
/        the specified values of newPIN and oldPIN, and returns to command state.
/
/        In both NEWPIN ENTRY STATE and PIN ENTRY STATE, the values of DCE
/        parameters E and V are overridden to E0V1 (no echo, verbose results);
/        these parameters revert to their previous values before issuing a final
/        result code and before processing additional commands. All other command
/        line editing parameters, including the command line termination character,
/        command line echo, backspace character, etc. are honored during data
/        entry in either new state. PIN values entered in either of these states
/        are not enclosed in quotes.
/
/        Some devices may use numeric PINs, while others may allow arbitrary
/        text PINs; in either case, a PIN on the command line must be enclosed
/        in double quotes (according to the rules for string parameters).
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CPN_e(ubyte *parameter_buffer_ptr)
{
   ubyte *temp_ptr,i;

   /* Only set PIN while off-line and Wireless mode */
   if (!hook || (!(CellCmds.mode & MODE_WIRELESS)) ||
      (*parameter_buffer_ptr++ != '"'))
   {
      error_occurred = TRUE;
      return;
   }

   /* Don't allow PIN changes when locked */
   if (CellCmds.LockOut)
   {
      build_event(E_MSG,WLOCKED_OUT);
      error_occurred = TRUE;
      return;
   }

   /* "*" input means goto NEW PIN ENTRY STATE */
   if ((*parameter_buffer_ptr == '*') && (*(parameter_buffer_ptr+1) == '"'))
   {
      /* Config ACU for NEW PIN ENTRY STATE (performed under
         Wireless IDLE state) */
      force_PIN_entry_state(NEW_PIN_INIT);
   }
   /* Else PINs are entered on the current command line... */
   else
   {
      /* Reset temp global PIN buffers */
      wl_new_pin_buffer[0]=0;
      wl_temp_pin_buffer[0]=0;
      wl_pin_buff_ptr = wl_new_pin_buffer;
      temp_ptr = parameter_buffer_ptr;

      /* If there is an existing PIN, it must be verified on the command line */
      if (CellInfo.currentPIN[0])
         i=0;  /* No current PIN */
      else
         i=1;  /* No current exists */

      /* Verify command line syntax:
                  AT+WCPN="newPIN","oldPIN"
         and copy input to buffers */
      for (; i<2; i++)
      {
         /* On 2nd time aroundm get the oldPIN */
         if (i && CellInfo.currentPIN[0])
         {
            /* Verify syntax AT+WCPN="newPIN","oldPIN" */
            /*                              ^^^        */
            if (!((*temp_ptr == '"') && (*(temp_ptr+1) == ',') &&
               (*(temp_ptr+2) == '"')))
            {
               error_occurred = TRUE;
               return;
            }
            else
            {
               temp_ptr+=3;
               /* Next buffer */
               wl_pin_buff_ptr = wl_temp_pin_buffer;
            }
         }

         /* Copy input to buffers */
         while (*temp_ptr != 0)
         {
            if (*temp_ptr == '"')
               break;
            *wl_pin_buff_ptr++ = *temp_ptr++;
         }
         *wl_pin_buff_ptr = 0; /* end of string */
      }

      /* Verify syntax AT+WCPN="newPIN","oldPIN" and PIN sizes */
      /*                                       ^               */
      if ((*temp_ptr != '"') || (str_len(wl_new_pin_buffer) > PCCA_PIN_SIZE) ||
         (str_len(wl_temp_pin_buffer) > PCCA_PIN_SIZE))
      {
         error_occurred = TRUE;
         return;
      }

      /* If there's a currentPIN, it must be checked against the oldPIN */
      if (CellInfo.currentPIN[0])
      {
         temp_ptr = CellInfo.currentPIN;
         wl_pin_buff_ptr = wl_temp_pin_buffer;
         i = FALSE; /* error condtion */
         while (*temp_ptr)
         {
            if (*temp_ptr++ != *wl_pin_buff_ptr++)
            {
               i = TRUE;
               break;
            }
         }

         /* Error test */
         if (i || (*wl_pin_buff_ptr != 0))
         {
            error_occurred = TRUE;
            return;
         }
      }

      /* Save the newPIN as currentPIN and write it to EEPROM */
      store_new_PIN();
   }
}



/******************************************************************************
/
/      Routine:        plusw_CLK_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCLK=?"
/                      This command returns the possible settings for the
/                      command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CLK_eq(void)
{
   output_info((ubyte *)"(0-1),\"*\",\"currentPIN\"", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_CLK_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCLK?"
/                      This command returns the current value of the command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CLK_q(void)
{
   output_info(d_to_a(CellCmds.LockOut), VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_CLK_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCLK=<value>[,"currentPIN"]"
/
/        This command is used to enable or disable the use of the DCE.
/        The following apply:
/
/              <value> =   0     Unlock*
/                          1     Lock
/
/        The literal syntax +WCLK=0,"*" or +WCLK=1,"*" places the DCE into a
/        new operating state, PIN ENTRY STATE. In this state, the DCE issues
/        the intermediate result code
/
/                        +WPIN:
/
/        and then accepts characters up to a command line termination character
/        as equivalent to currentPIN. The DCE then executes the +WCLK command
/        using the specified value of currentPIN, and returns to command state.
/
/        Refer to the description of +WCPN for additional information on
/        PIN ENTRY STATE.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CLK_e(ubyte *parameter_buffer_ptr)
{
   ubyte lock,i,*ptr;

   /* Test command bounds */
   /* Lock DCE */
   if (*parameter_buffer_ptr == '1')
   {
      lock=1;
   }
   /* Else UnLock DCE */
   else if (*parameter_buffer_ptr == '0')
   {
      lock=0;
   }
   else
   {
      error_occurred=TRUE;
      return;
   }

   /* If there's a currentPIN, filter the rest of the input */
   if (CellInfo.currentPIN[0])
   {
      /* Skip the previous numeric */
      parameter_buffer_ptr++;

      /* Verify partial command syntax: AT+WCLK=n,"xxx"   */
      /*                                         ^^       */
      if ((*parameter_buffer_ptr++ == ',') && (*parameter_buffer_ptr++ == '"'))
      {
         /* Verify PIN ENTRY STATE syntax: AT+WCLK=n,"*" */
         /*                                           ^^ */
         if ((*parameter_buffer_ptr == '*') &&
            (*(parameter_buffer_ptr+1) == '"'))
         {
            /* Config ACU for PIN ENTRY STATE (performed under WL IDLE BG) */
            /* If there's a currentPIN it must be verified, else
               a newPIN must be entered */
            if (lock)
               lock = LOCKOUT_PIN_INIT;
            else
               lock = UNLOCKOUT_PIN_INIT;

            force_PIN_entry_state(lock);

            /* The PIN ENTRY STATE handles setting the command var,
               after verification */
            /* CellCmds.LockOut = lock; */
            return;
         }
         /* Else the currentPIN must be on the command line */
         else
         {
            /* The inputPIN must match the currentPIN */
            ptr = CellInfo.currentPIN;
            i = FALSE; /* Error condition */
            while (*ptr)
            {
               if (*ptr++ != *parameter_buffer_ptr++)
               {
                  i=TRUE;
                  break;
               }
            }
            /* Make sure the input ends with the currentPIN */
            if (i || (*parameter_buffer_ptr != '"'))
            {
               error_occurred=TRUE;
               return;
            }

            /* Fall through to set command after error checking */
         }
      }
      else
      {
         error_occurred=TRUE;
         return;
      }
   }

   /* Set command */
   CellCmds.LockOut = lock;

   /* Show lock status to user */
   if (lock && CellCmds.CellularResultCodes)
      build_event(E_MSG,WLOCKED_OUT);
}



/******************************************************************************
/
/      Routine:        plusw_CHG_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCHG=?"
/                      This command returns the possible settings for the
/                      command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CHG_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}

/******************************************************************************
/
/      Routine:        plusw_CHG_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WCHG?"
/                      This command returns the current value of the command.
/
/        This is a read-only command used to display the state of the battery
/        charging system. The following values are returned:
/
/                  <value> =   0   Battery not charging
/                              1   Battery charging
/                            255   Unkown
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_CHG_q(void)
{
   output_info((ubyte *)"255", VERBOSE_FORM);
}


/******************************************************************************
/
/      Routine:        plusw_DAC_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                                  "AT+WDAC=?"
/                      This command test the validity of the command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_DAC_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}

/******************************************************************************
/
/      Routine:        plusw_DAC_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WDAC?"
/                      This command returns the current value of the command.
/
/        This command allow the DCE to report back to the DCE which of the
/        commands defined in PCCA Annex I it has implemented. The following
/        example is one possible result returned:
/
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_DAC_q(void)
{
   wl_send_cr_lf();
   output_info((ubyte *) "\"WDAC\",\"WSTL\",\"WECR\",\"WRLK\",\"WBAG\",\"WPTH\"",UNFORMATTED);
}


/******************************************************************************
/
/      Routine:        plusw_STL_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WSTL=?"
/                      This command returns the possible settings for the
/                      command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_STL_eq(void)
{
   output_info((ubyte *)"0-255", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_STL_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WSTL?"
/                      This command returns the current value of the command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_STL_q(void)
{
   output_info(d_to_a(CellCmds.SessionTimeLimit), VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_STL_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WSTL=<value>"
/
/        This command allows the user to specify a call Session Time Limit
/        threshold.   Any call that has logged more than this threshold is
/        automatically terminated.  The following apply:
/
/              <value> = 0:     Disable session time limit*
/                        1-255: Limit in 10 second intervals (8 == 80 seconds)
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_STL_e(ubyte *parameter_buffer_ptr)
{
   CellCmds.SessionTimeLimit = *parameter_buffer_ptr;
}


/******************************************************************************
/
/      Routine:        plusw_ECR_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WECR=?"
/                      This command returns the possible settings for the
/                      command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_ECR_eq(void)
{
   output_info((ubyte *)"0-1,5", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_ECR_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WECR?"
/                      This command returns the current value of the command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_ECR_q(void)
{
   output_info(d_to_a(CellCmds.CellularResultCodes),VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_ECR_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WECR=<value>"
/
/        This command allows DCE to present cellular call progress results beyond
/        what is common in the GSTN.  For instance, when there is no channel
/        available for a requested link, the cellular system responds with a
/        'REORDER' message.  It may be desired to relay this information from
/        the cellular phone all the way back to the DTE.  Some user
/        applications designed to interface with standard modems are expecting
/        standard result codes.  Defaulting to non-cellular result codes permits
/        the DCE to interface with these existing communications packages.
/        The following apply:
/
/        <value> = 0             Use GSTN Result Codes*
/                  1             Use Cellular Result Codes
/                  5             Use Enhanced Cellular Result Codes
/
/        Extended Verbose        Extended Terse        GSTN Verbose
/        Result Code             Result Code           Result Code
/        -----------------       ---------------       -------------
/        +WLOCKED                5888                  NO DIALTONE
/        +WINTERCEPT             5889                  BUSY
/        +WREORDER               5890                  BUSY
/        +WDROPPED CALL          5891                  NO CARRIER
/        +WCALL TIMEOUT          5892                  NO CARRIER
/        +WROAM LOCKOUT          5893                  NO DIALTONE
/        +WNO SERVICE            5894                  NO DIALTONE
/        +WLOW RSSI              5895                  NO DIALTONE
/
/        Enhanced Results Codes
/        +WIN SERVICE            5900                  N/A
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_ECR_e(ubyte *parameter_buffer_ptr)
{
   if ((*parameter_buffer_ptr > WECR_ENABLE_PCCA) &&
      (*parameter_buffer_ptr != WECR_ENHANCED_CMDS))
      error_occurred = TRUE;
   else
      CellCmds.CellularResultCodes = *parameter_buffer_ptr;
}


/******************************************************************************
/
/      Routine:        plusw_RLK_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WRLK=?"
/                      This command returns the possible settings for the
/                      command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_RLK_eq(void)
{
   /* Display valid values of the +WRLK=? command */
   output_info((ubyte *)"0,1", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_RLK_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WRLK?"
/                      This command returns the current value of the command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_RLK_q(void)
{
   output_info(d_to_a(CellCmds.RoamLockout), VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_RLK_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WRLK=<value>"
/
/        This command allows the user to disable the answering or originating
/        calls when the unit is in the roam mode.  The following apply:
/
/        <value> = 0     Disable Roam Lockout*
/                  1     Enable Roam Lockout (allows originating and answering
/                                calls in non-Roam mode only)
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_RLK_e(ubyte *parameter_buffer_ptr)
{
   if (*parameter_buffer_ptr > 1)
      error_occurred = TRUE;
   else
      CellCmds.RoamLockout = *parameter_buffer_ptr;
}

/******************************************************************************
/
/      Routine:        plusw_BAG_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WBAG=?"
/                      This command returns the possible settings for the
/                      command.
/
/        This command allows the user bias the DCE Audio output gain. (Note that
/        this has nothing to do with the wireless transceiver RF output power
/        level.)  This command is used on a relative basis of 1 dB steps from
/        the vendor default level.  For example, if the DTE issues +WBAG=2,
/        the modem audio output level to the phone/radio would be 2 dB above
/        the vendor suggested level.  Not that this command is not valid
/        during connections.   The following apply:
/
/                  0             Set default bias level
/                  1-25          Increase the bias in dB
/                  (-1)-(-25)    Decrease the bias in dB
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_BAG_eq(void)
{
   /* Use RSA gain AT command */
   bang_wtx_eq();
}


/******************************************************************************
/
/      Routine:        plusw_BAG_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WBAG=?"
/                      This command returns the current setting of the
/                      command.
/
/        This command allows the user bias the DCE Audio output gain. (Note that
/        this has nothing to do with the wireless transceiver RF output power
/        level.)  This command is used on a relative basis of 1 dB steps from
/        the vendor default level.  For example, if the DTE issues +WBAG=2,
/        the modem audio output level to the phone/radio would be 2 dB above
/        the vendor suggested level.  Not that this command is not valid
/        during connections.   The following apply:
/
/                  0             Set default bias level
/                  1-25          Increase the bias in dB
/                  (-1)-(-25)    Decrease the bias in dB
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_BAG_q(void)
{
   /* Use RSA gain AT command */
   bang_wtx_q();
}


/******************************************************************************
/
/      Routine:        plusw_BAG_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WBAG="
/                      This command sets the current setting of the command.
/
/        This command allows the user bias the DCE Audio output gain. (Note that
/        this has nothing to do with the wireless transceiver RF output power
/        level.)  This command is used on a relative basis of 1 dB steps from
/        the vendor default level.  For example, if the DTE issues +WBAG=2,
/        the modem audio output level to the phone/radio would be 2 dB above
/        the vendor suggested level.  Not that this command is not valid
/        during connections.   The following apply:
/
/                  0             Set default bias level
/                  1-25          Increase the bias in dB
/                  (-1)-(-25)    Decrease the bias in dB
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_BAG_e(ubyte *parameter_buffer_ptr)
{
   /* Use RSA gain AT command */
   bang_wtx_e((byte *)parameter_buffer_ptr);
}

/******************************************************************************
/
/      Routine:        plusw_PTH_eq
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WPTH=?"
/                      This routine returns the valid inputs to the command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_PTH_eq(void)
{
   output_info((ubyte *)"0-1", VERBOSE_FORM);
}

/******************************************************************************
/
/      Routine:        plusw_PTH_q
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WPTH?"
/                      This command returns the possible settings for the
/                      command.
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_PTH_q(void)
{
   /* Bit mapped MODE contains path in LSBit */
   if (CellCmds.mode & MODE_WIRELESS_MODEM)
      output_info((ubyte *)"1",VERBOSE_FORM);
   else
      output_info((ubyte *)"0",VERBOSE_FORM);
}


/******************************************************************************
/
/      Routine:        plusw_PTH_e
/
/      Author:         RSA
/
/      Creation Date:  05/25/95
/
/      Description:    This routine is called to implement the Cellular modem
/                      command:
/                              "+WPTH=<value>"
/
/        This routine configures the audio path for incoming and outgoing calls
/        to/from the modem and voice unit.  The following apply:
/
/
/        <value> = 0     Route incoming calls to the voice handset.  Outgoing
/                        calls are also considered voice handset calls
/                        regardless of whether the dial string was entered via
/                        handset or ATD command.
/                  1     Route incoming calls to the modem.  Outgoing calls are
/                        also considered modem calls regardless of whether the
/                        dial string was entered via handset or ATD command.
/
/
/      Input Parameters: none
/
/      Output Parameters: none
/
/      Global Variables Changed: none
/
/      Users: PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/      -------------------------------------------------------------
/      -                       Modifications                       -
/      -------------------------------------------------------------
/
/      Author & Date: RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void plusw_PTH_e(ubyte *parameter_buffer_ptr)
{
   /* Only accept this command off line */
   if ((*parameter_buffer_ptr > 1) || !hook)
   {
      error_occurred = TRUE;
   }
   else
   {
      if (CellCmds.mode & MODE_WIRELESS)
      {
         if (*parameter_buffer_ptr == 0 /* voice */)
            build_event(E_IDLE,MODE_WIRELESS_PHONE);
         else
            build_event(E_IDLE,MODE_WIRELESS_MODEM);
      }
      else
      {
         if (*parameter_buffer_ptr == 0 /* voice */)
            build_event(E_IDLE,MODE_PSTN_PHONE);
         else
            build_event(E_IDLE,MODE_PSTN_MODEM);
      }
   }
}


