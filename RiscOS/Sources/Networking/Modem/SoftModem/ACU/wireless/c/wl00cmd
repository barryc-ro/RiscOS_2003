/****************************************************************************
/
/     Copyright 1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00cmd.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for Cellular Modem AT commands.
/
/     Product:          ACU core code
/
/     History:          ac00cmex.c v4.02
/
/        Created:       04/07/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_pro.h"
#include "acu_mem.h"
#include "par_def.h"
#include "par_pro.h"

#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"
#include "audio_if.h"
#include "wbios.h"


/* Local Prorotypes */
void acu_set_wl_commands(ubyte);
void wl_send_cr_lf(void);
void bang_d_to_a(ubyte, ulong, ubyte *);
void bang_mode_eq(void);
void bang_mode_q(void);
void bang_mode_e(ubyte *);
void bang_wcfg_eq(void);
void bang_wcfg_q(void);
void bang_wcfg_e(ubyte *);
void output_available_gains(byte, byte);
void bang_wrx_eq(void);
void bang_wrx_e(byte *);
void bang_wrx_up(void);
void bang_wrx_down(void);
void output_audio_gain(byte);
void bang_wrx_q(void);
void bang_wtx_eq(void);
void bang_wtx_e(byte *);
void bang_wtx_up(void);
void bang_wtx_down(void);
void bang_wtx_q(void);
void bang_wchl_q(void);
void bang_wchl_eq(void);
void bang_wid_q(void);
void bang_wid_eq(void);
void bang_wstat_q(void);
void bang_wstat_eq(void);
void bang_esn_e(ulong *);
void bang_esn_q(void);
void bang_nam1_e(uword *);
void bang_nam1_q(void);
void bang_nam2_e(uword *);
void bang_nam2_q(void);
void bang_password_e(ulong *);
void bang_atten_e(ubyte *);
void bang_atten_q(void);
void bang_dac_e(ubyte *);
void bang_dac_q(void);
void bang_target_e(uword *);
void bang_target_q(void);
void bang_NOPIN(void);


/******************************************************************************
/
/                  Parser Structure for AMPS AT Commands
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
PARSE_CMD_TABLE_STRUCT amps_commands[]=
{
   (ubyte *)"!MODE=?",     bang_mode_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"!MODE?",      bang_mode_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!MODE=",      bang_mode_e,    BYTE_NUMERIC,   NO_FLAGS,
   (ubyte *)"!WCFG=?",     bang_wcfg_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WCFG?",      bang_wcfg_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WCFG=",      bang_wcfg_e,    COMPOUND_BYTE,  NO_FLAGS,
   (ubyte *)"!WRX=?",      bang_wrx_eq,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WRX=^",      bang_wrx_up,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WRX=V",      bang_wrx_down,  NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WRX=",       bang_wrx_e,     SIGNED_BYTE,    NO_FLAGS,
   (ubyte *)"!WRX?",       bang_wrx_q,     NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WTX=?",      bang_wtx_eq,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WTX=^",      bang_wtx_up,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WTX=V",      bang_wtx_down,  NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WTX=",       bang_wtx_e,     SIGNED_BYTE,    NO_FLAGS,
   (ubyte *)"!WTX?",       bang_wtx_q,     NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WCHL?",      bang_wchl_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WCHL=?",     bang_wchl_eq,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WID=?",      bang_wid_eq,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WID?",       bang_wid_q,     NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WSTAT?",     bang_wstat_q,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"!WSTAT=?",    bang_wstat_eq,  NO_PARAM,       NO_FLAGS,
   (ubyte *)"!RSA=",       bang_password_e,LONG_NUMERIC,   NO_FLAGS,

   END_OF_PARSE_TABLE
};

/* * * * * * * * * * * * * Password Protected * * * * * * * * * * * * */
PARSE_CMD_TABLE_STRUCT amps_protected_commands[]=
{
   (ubyte *)"!ESN=",   bang_esn_e,     COMPOUND_LONG,   NO_FLAGS,
   (ubyte *)"!ESN?",   bang_esn_q,     NO_PARAM,       NO_FLAGS,
   (ubyte *)"!N1=",    bang_nam1_e,    COMPOUND_WORD,  NO_FLAGS,
   (ubyte *)"!N1?",    bang_nam1_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!N2=",    bang_nam2_e,    COMPOUND_WORD,  NO_FLAGS,
   (ubyte *)"!N2?",    bang_nam2_q,    NO_PARAM,       NO_FLAGS,
   (ubyte *)"!ATTEN=", bang_atten_e,   COMPOUND_BYTE_HEX, NO_FLAGS,
   (ubyte *)"!ATTEN?", bang_atten_q,   NO_PARAM,       NO_FLAGS,
   (ubyte *)"!DAC=",   bang_dac_e,     COMPOUND_BYTE,  NO_FLAGS,
   (ubyte *)"!DAC?",   bang_dac_q,     NO_PARAM,       NO_FLAGS,
   (ubyte *)"!TARGET=",bang_target_e,  COMPOUND_WORD,  NO_FLAGS,
   (ubyte *)"!TARGET?",bang_target_q,  NO_PARAM,       NO_FLAGS,
   (ubyte *)"!NOPIN",  bang_NOPIN,     NO_PARAM,       NO_FLAGS,
   END_OF_PARSE_TABLE
};


/*******************************************************************************
/
/     Routine:       acu_set_wl_commands
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This Routine enables parsing of AMPS AT commands.
/
/     Input Parameters:   state - OFF (0) to disable, ON (otherwise) to enable.
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_set_wl_commands(ubyte state)
{
   ubyte type;
   if (state == ON)
      type = ENABLE_TABLE;
   else
      type = DISABLE_TABLE;
   at_parser_tables(type,amps_commands);

   /* Try the PCCA commands too */
   acu_set_wl_pcca_commands(state);
}

/*******************************************************************************
/
/     Routine:       wl_send_cr_lf
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This Routine sends a CR LF to the screen (note that
/                    both are configurable by AT commands)
/
/     Input Parameters:  None
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_send_cr_lf(void)
{
   output_info((ubyte *)'\0',NUMERIC_FORM);
}

/*******************************************************************************
/
/     Routine:       bang_d_to_a
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This Routine converts a decimal number to an ASCII
/                    string.
/
/     Input Parameters: size - how many digits to make
/                       data - the decimal number
/                       storePtr - where to put the ascii string
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_d_to_a(ubyte size, ulong data, ubyte *storePtr)
{
   ubyte i;

   i = size;
   do {
      i--;
      storePtr[i] = (data % 10) + '0';
      data /= 10;
   } while (i != 0);
   storePtr[size] = '\0'; /* End of String */
}

/******************************************************************************
/
/     Routine:       bang_mode_eq
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!MODE=?"
/                    This command returns the possible settings for the command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_mode_eq(void)
{
   output_info((ubyte *)"(0-3)",VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       bang_mode_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!MODE?"
/                    This command returns the current setting of the command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_mode_q(void)
{
   output_info(d_to_a(CellCmds.mode), VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       bang_mode_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!MODE="
/                    This command sets the cellular mode.
/
/     Input Parameters: *cmd_param_ptr - pointer to the command's parameter
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_mode_e(ubyte *cmd_param_ptr)
{
   /* This command is not valid when off hook */
   if (!hook)
   {
      error_occurred = TRUE;
      return;
   }

   switch (*cmd_param_ptr)
   {
      case MODE_PSTN | MODE_DATA:
         build_event(E_IDLE,MODE_PSTN_MODEM);
         break;

      case MODE_WIRELESS | MODE_DATA:
         build_event(E_IDLE,MODE_WIRELESS_MODEM);
         break;

      case MODE_PSTN | MODE_PHONE:
         build_event(E_IDLE,MODE_PSTN_PHONE);
         break;

      case MODE_WIRELESS | MODE_PHONE:
         build_event(E_IDLE,MODE_WIRELESS_PHONE);
         break;

      default:
         error_occurred = TRUE;
         return;
   }

   CellCmds.mode = *cmd_param_ptr;
}



/******************************************************************************
/
/     Routine:       bang_wcfg_eq
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WCFG=?"
/                    This command returns the possible settings for the command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wcfg_eq(void)
{
   output_info((ubyte *)"(0-3),(1-4),(0-1)",VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       bang_wcfg_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WCFG?"
/                    This command returns the current settings of the !WCFG
/                    (configuration) command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wcfg_q(void)
{
   ubyte type,output_array[32];

   wl_send_cr_lf();
   if (CellCmds.CellularResultCodes)
   {
      output_info((ubyte *)"System Select: ", UNFORMATTED);
      type = NUMERIC_FORM;
      output_array[1] = 0;
   }
   else
   {
      type = UNFORMATTED;
      output_array[1] = ',';
      output_array[2] = '\0';
   }
   if (CellInfo.NAM [CellCmds.whichNAM].HomeOnly)
      output_array[0] = '4';
   else
      output_array[0] = CellInfo.NAM [CellCmds.whichNAM].sso + 0x30;
   output_info(output_array,type);


   if (CellCmds.CellularResultCodes)
      output_info((ubyte *)"Local NAM Select: ", UNFORMATTED);
   output_array[0] = CellCmds.whichNAM + '1';
   output_info(output_array, type);

   if (CellCmds.CellularResultCodes)
      output_info((ubyte *)"DTX: ", UNFORMATTED);
   if (CellInfo.NAM[CellCmds.whichNAM].SCMp & SCMP_DTX_BIT)
      output_array[0] = '1';
   else
      output_array[0] = '0';
   output_array[1] = 0;
   output_info(output_array, NUMERIC_FORM);
}


/******************************************************************************
/
/     Routine:       bang_wcfg_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WCFG="
/                    This command sets the following cellular options:
/                      field 1: which NAM (local phone number and options)
/                      field 2: which System (A,B,A prefered, B prefered)
/                      field 3: Transmit level
/                      field 4: Receive level
/                      field 5: DTX (enabled or disabled)
/
/     Input Parameters: *cmd_param_ptr - pointer to the command's parameter buffer
/          of ubytes.
/      Parameter Buffer structure for AT command's w/ compound byte values:
/          [field#,value,f',v',f'',v'',...0]
/      Examples:
/          AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00]
/          AT+F=,6,,8   => [0x2,0x6, 0x4,0x8, 0x00]
/          AT+F=0       => [0x1,0x0, 0x00]
/          AT+F=        => [0x00]
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wcfg_e(ubyte *cmd_param_ptr)
{
   ubyte field,value,i;

   i=0;
   /* Parse all fields */
   while (TRUE)
   {
      field = *cmd_param_ptr++;
      value = *cmd_param_ptr++;
      switch (field)
      {
         case 0:
            /* Load defaults */
            if (i==0)
            {
               CellInfo.NAM [CellCmds.whichNAM].sso = DEFAULT_NAM__SSO;
               CellInfo.NAM [CellCmds.whichNAM].HomeOnly = DEFAULT_NAM__HOMEONLY;
               CellCmds.whichNAM   = DEFAULT_WL_CMD__NAM_SEL;
               CellInfo.NAM[CellCmds.whichNAM].SCMp &= ~SCMP_DTX_BIT;
            }
            return;

         case 1:
            if (CellInfo.NAM [CellCmds.whichNAM].sso == value)
               break;
            if (value <= SSO_B_PREF)
               CellInfo.NAM [CellCmds.whichNAM].sso = value;
            else if (value == SSO_HOME_ONLY)
               CellInfo.NAM [CellCmds.whichNAM].HomeOnly = value;
            else
            {
               error_occurred = TRUE;
               return;
            }
            break;

         case 2:
            /* NAMS range from 1 to 4 (zero is excluded) */
            if ((value <= WL_CMD_MAX__NAM_SEL) && value)
            {
               CellCmds.whichNAM = value-1;
            }
            else
               error_occurred = TRUE;
            break;

         case 3:
            if (value <= 1)
            {
               if (value)
                  CellInfo.NAM[CellCmds.whichNAM].SCMp |= SCMP_DTX_BIT;
               else
                  CellInfo.NAM[CellCmds.whichNAM].SCMp &= ~SCMP_DTX_BIT;
            }
            break;

         default:
            error_occurred = TRUE;
            return;
      }
      i++;
   }
}



/******************************************************************************
/
/     Routine:       output_available_gains
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to output the available settings
/                    for the audio gain AT commands. Thes can vary platform
/                    to platform and channel to channel.
/
/     Input Parameters: maxlevel: 0 - 128, minlevel -128 - -1
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: bang_wrx_eq, bang_wtx_eq
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void output_available_gains(byte maxlevel, byte minlevel)
{
   ubyte size,index,output_array[14];

   index=0;

   /* Assume neg. min level */
   output_array[index++]='(';
   output_array[index++]='-';

   /* decimal to ASCII string */
/* IAR compiler gags fails this... */
/*
 *  if (minlevel < -9)
 *      size = 2;
 *  else
 *      size = 1;
 */

   if (minlevel & 0x80)
   {
      if ((byte)(minlevel * -1) > 9)
         size = 2;
      else
         size = 1;
   }
   else if (minlevel > 9)
      size = 2;
   else
      size = 1;
/* ...IAR compiler gags fails this */

   bang_d_to_a(size,(byte)(minlevel*-1),&output_array[index]);
   index += size;

   output_array[index++]=')';
   output_array[index++]='-';

   /* decimal to ASCII string */
   if (maxlevel> 9)
      size = 2;
   else
      size = 1;
   bang_d_to_a(size,maxlevel,&output_array[index]);
   index += size;

   /* End string */
   output_array[index++]=',';
   output_array[index++]='^';
   output_array[index++]=',';
   output_array[index++]='v';
   output_array[index]='\0';

   /* Display */
   output_info(&output_array[0], VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       bang_wrx_eq
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WRX=?"
/                    This command returns the possible settings for the command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wrx_eq(void)
{
   output_available_gains(WL_CMD_MAX_RX_LEVEL, WL_CMD_MIN_RX_LEVEL);
}


/******************************************************************************
/
/     Routine:       bang_wrx_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WRX="
/                    This command sets the Wireless Audio receive gain bias.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds.AudioRxGain
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wrx_e(byte *param_ptr)
{
   /* Test input bounds */
   if ((*param_ptr & 0x80) && (*param_ptr >= (byte)WL_CMD_MIN_RX_LEVEL) ||
      (*param_ptr <= WL_CMD_MAX_RX_LEVEL))
   {
      CellCmds.AudioRxGain = *param_ptr;
      wl_set_audio_level(WL_RX_LEVEL);
   }
   else
   {
      error_occurred = TRUE;
   }
}

/******************************************************************************
/
/     Routine:       bang_wrx_up
/
/     Author:        RSA
/
/     Creation Date: 08/11/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WRX=^"
/                    This command increments the Wireless Audio receive gain
/                    bias by one normalized unit.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds.AudioRxGain
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wrx_up(void)
{
   /* Test input bounds */
/* IAR compiler problems... */
/*   if (CellCmds.AudioRxGain < WL_CMD_MAX_RX_LEVEL) */
   ubyte gain,thresh;

   gain = CellCmds.AudioRxGain;
   thresh = WL_CMD_MAX_RX_LEVEL;

   /* Always assume positive threshold */
   if (gain & 0x80 || gain < thresh)
/* ...IAR compiler problems */
   {
      CellCmds.AudioRxGain++;
      wl_set_audio_level(WL_RX_LEVEL);
   }
   else
   {
      error_occurred = TRUE;
   }
}


/******************************************************************************
/
/     Routine:       bang_wrx_down
/
/     Author:        RSA
/
/     Creation Date: 08/11/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WRX=v"
/                    This command decrements the Wireless Audio receive gain
/                    bias by one normalized unit.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds.AudioRxGain
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wrx_down(void)
{
   /* Test input bounds */
/* IAR compiler problems... */
/*   if (CellCmds.AudioRxGain > WL_CMD_MIN_RX_LEVEL) */
   ubyte gain,thresh;

   gain = CellCmds.AudioRxGain;
   thresh = WL_CMD_MIN_RX_LEVEL;

   /* Always assume neg. threshold */
   if ((gain & 0x80 && gain > thresh) || !(gain & 0x80))
/* ...IAR compiler problems */
   {
       CellCmds.AudioRxGain--;
       wl_set_audio_level(WL_RX_LEVEL);
   }
   else
   {
       error_occurred = TRUE;
   }
}


/******************************************************************************
/
/     Routine:       output_audio_gain
/
/     Author:        RSA
/
/     Creation Date: 8/10/95
/
/     Description:   This routine is called to output the current vaule of
/                    the Audio Gain Bias commands to the terminal.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: bang_wrx_q, bang_wtx_q
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void output_audio_gain(byte gain)
{
   ubyte output_array[4];
   ubyte size,index;

   /* Get positive value */
/* IAR compiler can't do this test... */
/*   if (gain < 0)  */
   if (gain & 0x80)
/* ...IAR compiler can't do this test */
   {
      gain *= -1;
      output_array[0]='-';
      index = 1;
   }
   else
   {
      index = 0;
   }

   /* Two digit # ? */
   if (gain > 9)
      size = 2;
   else
      size = 1;

   /* decimal to ASCII string */
   bang_d_to_a(size,gain,&output_array[index]);

   /* End string */
   output_array[index+size]=0;

   /* Display */
   output_info(&output_array[0], VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       bang_wrx_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WRX?"
/                    This command shows the user the current setting of the
/                    Wireless Audio receive gain bias.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds.AudioRxGain
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wrx_q(void)
{
   output_audio_gain(CellCmds.AudioRxGain);
}


/******************************************************************************
/
/     Routine:       bang_wtx_eq
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WTX=?"
/                    This command returns the possible settings for the command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wtx_eq(void)
{
   output_available_gains(WL_CMD_MAX_TX_LEVEL, WL_CMD_MIN_TX_LEVEL);
}


/******************************************************************************
/
/     Routine:       bang_wtx_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WTX="
/                    This command sets the Wireless Audio transmit gain bias.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds.AudioRxGain
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wtx_e(byte *param_ptr)
{
   /* Test input bounds */
   if ((*param_ptr & 0x80) && (*param_ptr >= (byte)WL_CMD_MIN_TX_LEVEL) ||
      (*param_ptr <= WL_CMD_MAX_TX_LEVEL))
   {
      CellCmds.AudioTxGain = *param_ptr;
      wl_set_audio_level(WL_TX_LEVEL);
   }
   else
   {
      error_occurred = TRUE;
   }
}


/******************************************************************************
/
/     Routine:       bang_wtx_up
/
/     Author:        RSA
/
/     Creation Date: 08/11/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WTX=^"
/                    This command increments the Wireless Audio transmit gain
/                    bias by one normalized unit.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds.AudioTxGain
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wtx_up(void)
{
   /* Test input bounds */
/* IAR compiler problems... */
/*   if (CellCmds.AudioTxGain < WL_CMD_MAX_TX_LEVEL) */
   ubyte gain,thresh;

   gain = CellCmds.AudioTxGain;
   thresh = WL_CMD_MAX_TX_LEVEL;

   /* Always assume positive threshold */
   if (gain & 0x80 || gain < thresh)
/* ...IAR compiler problems */
   {
      CellCmds.AudioTxGain ++;
      wl_set_audio_level(WL_TX_LEVEL);
   }
   else
   {
      error_occurred = TRUE;
   }
}


/******************************************************************************
/
/     Routine:       bang_wtx_down
/
/     Author:        RSA
/
/     Creation Date: 08/11/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WTX=v"
/                    This command decrements the Wireless Audio transmit gain
/                    bias by one normalized unit.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds.AudioTxGain
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wtx_down(void)
{
   /* Test input bounds */
/* IAR compiler problems... */
/*   if (CellCmds.AudioTxGain > WL_CMD_MIN_TX_LEVEL) */
   ubyte gain,thresh;

   gain = CellCmds.AudioTxGain;
   thresh = WL_CMD_MIN_TX_LEVEL;

   /* Always assume neg. threshold */
   if ((gain & 0x80 && gain > thresh) || !(gain & 0x80))
/* ...IAR compiler problems */
   {
      CellCmds.AudioTxGain--;
      wl_set_audio_level(WL_TX_LEVEL);
   }
   else
   {
      error_occurred = TRUE;
   }
}

/******************************************************************************
/
/     Routine:       bang_wtx_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WTX?"
/                    This command shows the user the current setting of the
/                    Wireless Audio transmit gain bias.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds.
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wtx_q(void)
{
   output_audio_gain(CellCmds.AudioTxGain);
}


/******************************************************************************
/
/     Routine:       bang_wchl_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WCHL?"
/                    This command returns the current operating cellular
/                    channel.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wchl_q(void)
{
   WBIOS_CONTROL wbiosmsg;
   ubyte output_array[11];

   /* Get status from Wireless layer */
   wbiosmsg.type = WL_STATUS;
   wbios_control(&wbiosmsg);

   bang_d_to_a(10, wbiosmsg.u.status.info.channel, output_array);
   output_array[10] = '\0';
   output_info(output_array,VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       bang_wchl_eq
/
/     Author:        RSA
/
/     Creation Date: 08/30/95
/
/     Description:   This routine is called to request the Cellular modem
/                    command:  "AT!WCHL=?"
/                    This command returns OK indicating that the command is
/                    implemented.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wchl_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}

/******************************************************************************
/
/     Routine:       bang_wid_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WID?"
/                    This command returns the local phone number of the unit.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wid_q(void)
{
   ubyte out_array[14];

   /* Area code in parens. (i.e.: (919)) */
   out_array[0] = '(';

   /* Do Decimal to ASCII conversion */
   bang_d_to_a(3,CellInfo.NAM[CellCmds.whichNAM].IDareaCode,&out_array[1]);
   out_array[4] = ')';
   out_array[5] = ' ';

   /* 1st 3 digits of number plus hypen (i.e.: xxx-????) */
   bang_d_to_a(3,CellInfo.NAM[CellCmds.whichNAM].IDfirst,&out_array[5]);
   out_array[8] = '-';

   /* Last 4 digits of phone number (i.e.: ???-xxxx) */
   bang_d_to_a(4,CellInfo.NAM [CellCmds.whichNAM].IDlast,&out_array[9]);

   out_array[13] = '\0';   /* end of string */
   output_info(out_array, VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       bang_wid_eq
/
/     Author:        RSA
/
/     Creation Date: 08/30/95
/
/     Description:   This routine is called to request the Cellular modem
/                    command:  "AT!WID=?"
/                    This command returns OK indicating that the command is
/                    implemented.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wid_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}

/******************************************************************************
/
/     Routine:       bang_wstat_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WSTAT?"
/                    This command returns the following AMPS status:
/                       Service Available: T/F
/                       Roaming: T/F
/                       Current System: 0=A, 1=B, 2=A Pref., 3=B Pref.
/                       In Use: T/F
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wstat_q(void)
{
   ubyte i,type,data,output_array[3];

   wl_send_cr_lf();
   if (CellCmds.CellularResultCodes)
   {
      output_array[1] = 0;
   }
   else
   {
      output_array[1] = ',';
      output_array[2] = 0;
   }

   for (i=0; i<4; i++)
   {
      if (i==0)
      {
         type = INFO_SERVICE;
         if (CellCmds.CellularResultCodes)
            output_info((ubyte *)"Service Available: ",UNFORMATTED);
      }
      else if (i==1)
      {
         type = INFO_ROAMING;
         if (CellCmds.CellularResultCodes)
            output_info((ubyte *)"Roaming:           ",UNFORMATTED);
      }
      else if (i==2)
      {
         type = INFO_SYSTEM;
         if (CellCmds.CellularResultCodes)
            output_info((ubyte *)"Current System:    ",UNFORMATTED);
      }
      else /* if (i==3) */
      {
         type = INFO_IN_USE;
         if (CellCmds.CellularResultCodes)
            output_info((ubyte *)"In Use:            ",UNFORMATTED);
         output_array[1] = '\0';
      }

      wireless_info(type, &data);
      if (data)
         output_array[0] = '1';
      else
         output_array[0] = '0';

      if (CellCmds.CellularResultCodes)
         output_info(output_array,NUMERIC_FORM);
      else
         output_info(output_array,UNFORMATTED);
   }

   if (!CellCmds.CellularResultCodes)
      wl_send_cr_lf();
}

/******************************************************************************
/
/     Routine:       bang_wstat_eq
/
/     Author:        RSA
/
/     Creation Date: 8/31/1995.
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!WSTAT=?"
/                    This command returns OK, indicating that the command is
/                    implemented.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_wstat_eq(void)
{
   /* Do nothing, allow the Parser to return OK verifing implementation
      of the command */
}


/******************************************************************************
/
/     Routine:       bang_esn_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!ESN="
/                    This command sets the unit's ESN.
/
/     Input Parameters: *param_ptr - pointer to a ulong (esn)
/
/     Output Parameters: none
/
/     Global Variables Changed: CellInfo
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_esn_e(ulong *parm_ptr)
{
   ulong field,value,esn;

   esn = 0;    /* Init temp ESN */

   /* Process input parameters */
   do
   {   /*
         Structure of AT command parameter array for compound numeric values:
              [f,v,f,v,...,0] (f=field, v=value, 0 is end of array).
          Examples:
               AT+F=5,6,7  => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x00]
               AT+F=5,6,,8 => [0x1,0x5, 0x2,0x6, 0x4,0x8, 0x00]
               AT+F=,6,,8  => [0x2,0x6, 0x4,0x8, 0x00]
               AT+F=,,,,8  => [0x5,0x8, 0x00]
               AT+F=       => [0x00]
         */

      /* Get field and value from Parser */
      field = *parm_ptr++;
      value = *parm_ptr++;

      switch (field)
      {
         case 0: /* END: no more fields */
            break;

         case 1: /*  SN bits 31-24: MFR, Manufacturer's code (0-999)*/
            if (value > 999)
               error_occurred = TRUE;
            else
               esn |= value << 24;
            break;

         case 2: /* SN bits 23-0 (23-18 reserved): Serial Number */
            if (value > 0xFFFFFF)
               error_occurred = TRUE;
            else
               esn |= value;
            break;

         default:
            error_occurred = TRUE;
            return;
      }
   } while (field);

   /* Save new ESN to EEPROM */
   if (!error_occurred)
   {
      CellInfo.ESN = esn;
      acu_wl_put_profile(WL_EE_PROFILE_INFO);
   }
}

/******************************************************************************
/
/     Routine:       bang_esn_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!ESN?"
/                    This command reports the unit's ESN.
/
/     Input Parameters: *param_ptr - pointer to a ulong (esn)
/
/     Output Parameters: none
/
/     Global Variables Changed: CellInfo
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_esn_q(void)
{
   ubyte mfr,out_array[13];
   ulong sn;

   mfr = (ubyte)(CellInfo.ESN >> 24);
   sn = CellInfo.ESN & 0xFFFFFF;

   bang_d_to_a(3,mfr,&out_array[0]);
   out_array[3] = '-';
   bang_d_to_a(8,sn,&out_array[4]);
   out_array[12] = 0;
   output_info(out_array, VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       bang_nam1_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!N1="
/                    This command sets the following cellular NAM options:
/                       field 1: Phone number Area Code (0-999)
/                       field 2: Phone number 1st 3 digits
/                       field 3: Phone number 2nd 4 digits
/                       field 4: Home SID
/
/     Input Parameters: *param_ptr - pointer to the command's parameter buffer
/                                  of uwords.
/      Parameter Buffer structure for AT command's w/ compound word values:
/          [field#,value,f',v',f'',v'',...0]
/      Examples:
/          AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00]
/          AT+F=,6,,8   => [0x2,0x6, 0x4,0x8, 0x00]
/          AT+F=0       => [0x1,0x0, 0x00]
/          AT+F=        => [0x00]
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_nam1_e(uword *parm_ptr)
{
   ubyte field;
   uword value;

   /* Process input parameters */
   do
   {   /*
         Structure of AT command parameter array for compound numeric values:
               [f,v,f,v,...,0] (f=field, v=value, 0 is end of array).
           Examples:
               AT+F=5,6,7  => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x00]
               AT+F=5,6,,8 => [0x1,0x5, 0x2,0x6, 0x4,0x8, 0x00]
               AT+F=,6,,8  => [0x2,0x6, 0x4,0x8, 0x00]
               AT+F=,,,,8  => [0x5,0x8, 0x00]
               AT+F=       => [0x00]
       */
      /* Get field and value from Parser */
      field = (ubyte)*parm_ptr++;
      value = *parm_ptr++;

      switch (field)
      {
         case 0: /* END: no more fields */
            break;

         case 1: /* Area Code (MIN2p) */
            CellInfo.NAM [CellCmds.whichNAM].IDareaCode = value;
            break;

         case 2: /* 1st 3 digits of phone number (i.e.: xxx-????) */
            CellInfo.NAM [CellCmds.whichNAM].IDfirst = value;
            break;

         case 3: /* last 4 digits of phone number (i.e.: ???-xxxx) */
            CellInfo.NAM [CellCmds.whichNAM].IDlast = value;
            break;

         case 4: /* uword SIDp;  */
            CellInfo.NAM [CellCmds.whichNAM].SIDp = value;
            break;

         default:
            error_occurred = TRUE;
            return;
      }
   } while (field);

   /* Always save the new values to EEPROM */
   acu_wl_put_profile(WL_EE_PROFILE_INFO);
}

/******************************************************************************
/
/     Routine:       bang_nam1_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!N1?"
/                    This command reports the following cellular NAM options:
/                      field 1: Phone number Area Code (0-999)
/                      field 2: Phone number 1st 3 digits
/                      field 3: Phone number 2nd 4 digits
/                      field 4: Home SID
/
/     Input Parameters: *param_ptr - pointer to a ulong (esn)
/
/     Output Parameters: none
/
/     Global Variables Changed: CellInfo
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_nam1_q(void)
{
   ubyte i,j,out_style,out_array[10];
   uword num;

   wl_send_cr_lf();
   out_array[9]=0;
   for (i = 0; i<4; i++)
   {
      switch (i)
      {
         case 0: /* MIN1: Area Code */
            j = 3;
            num = CellInfo.NAM [CellCmds.whichNAM].IDareaCode;
            break;

         case 1: /* 1st 3 digits of phone number (i.e.: xxx-????) */
            j = 3;
            num = CellInfo.NAM [CellCmds.whichNAM].IDfirst;
            break;

         case 2: /* Last 4 digits of phone number (i.e.: ???-xxxx) */
            num = CellInfo.NAM [CellCmds.whichNAM].IDlast;
            j = 4;
            break;

         case 3: /* SID */
            j = 5;
            num = CellInfo.NAM [CellCmds.whichNAM].SIDp;
            break;
      }

      /* Do Decimal to ASCII conversion */
      bang_d_to_a(j,num,&out_array[0]);

      /* Add comma separator or endofline */
      if (i < 3)
      {
         out_array[j++]= ',';
         out_style = UNFORMATTED;
      }
      else
      {
         out_style = NUMERIC_FORM;
      }

      out_array[j]= '\0';
      output_info(out_array,out_style);
   } /*for*/
}

/******************************************************************************
/
/     Routine:       bang_nam2_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!N2="
/                    This command sets the following cellular NAM options:
/                      field  1: Serving Sys.Opt.: 0=A,1=B,2=A pref,3=B pref
/                      field  2: Extended Addr Opt.: T/F
/                      field  3: Station Class Mark: 0-16
/                      field  4: Access Overload Class: 0-16
/                      field  5: Auto Registration: T/F
/                      field  6: DTX: T/F
/                      field  7: Home Only Use: T/F
/                      field  8: 1st ctrl Channel Sys A
/                      field  9: 1st ctrl Channel Sys B
/                      field 10: Last ctrl Channel Sys A
/                      field 11: Last ctrl Channel Sys B
/
/     Input Parameters: *param_ptr - pointer to the command's parameter buffer
/                                  of uwords.
/      Parameter Buffer structure for AT command's w/ compound word values:
/          [field#,value,f',v',f'',v'',...0]
/      Examples:
/          AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00]
/          AT+F=,6,,8   => [0x2,0x6, 0x4,0x8, 0x00]
/          AT+F=0       => [0x1,0x0, 0x00]
/          AT+F=        => [0x00]
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_nam2_e(uword *parm_ptr)
{
   ubyte error,bvalue,field;
   uword wvalue;

   error=FALSE;

   /* Process input parameters */
   do
   {  /*
          Structure of AT command parameter array for compound numeric values:
              [f,v,f,v,...,0] (f=field, v=value, 0 is end of array).
          Examples:
              AT+F=5,6,7  => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x00]
              AT+F=5,6,,8 => [0x1,0x5, 0x2,0x6, 0x4,0x8, 0x00]
              AT+F=,6,,8  => [0x2,0x6, 0x4,0x8, 0x00]
              AT+F=,,,,8  => [0x5,0x8, 0x00]
              AT+F=       => [0x00]
      */
      /* Get field and value from Parser */
      field = (ubyte)*parm_ptr++;
      wvalue = *parm_ptr++;
      bvalue = (ubyte)wvalue;

      switch (field)
      {
         case 0: /* END: no more fields */
            if (CellInfo.NAM [CellCmds.whichNAM].sso & SSO_B_ONLY)
               CellInfo.NAM [CellCmds.whichNAM].FirstCHPp=
                  CellInfo.NAM [CellCmds.whichNAM].fccsb;
            else
               CellInfo.NAM [CellCmds.whichNAM].FirstCHPp=
                  CellInfo.NAM [CellCmds.whichNAM].fccsa;
            break;

         case 1: /* ubyte sso: Serving System Option */
            if (bvalue <= SSO_B_PREF)
            {
               CellInfo.NAM [CellCmds.whichNAM].sso = bvalue;
            }
            else
               error = TRUE;
            break;

         case 2: /* ubyte Extended Addr. Opt. */
            if ((bvalue == ON) || (bvalue == OFF))
               CellInfo.NAM [CellCmds.whichNAM].EXp = bvalue;
            else
               error = TRUE;
            break;

         case 3: /* ubyte Station Class Mark */
            if (bvalue <= STA_CLASS_MRK_MAX)
               CellInfo.NAM [CellCmds.whichNAM].SCMp = bvalue;
            else
               error = TRUE;
            break;

         case 4: /* ubyte Access Overload Class */
            if (bvalue <= ACCESS_OVRLD_MAX)
               CellInfo.NAM [CellCmds.whichNAM].ACCOLCp = bvalue;
            else
               error = TRUE;
            break;

         case 5: /* ubyte Auto Registration */
            if ((bvalue == ON) || (bvalue == OFF))
               CellInfo.NAM [CellCmds.whichNAM].AutoReg = bvalue;
            else
               error = TRUE;
            break;

         case 6: /* ubyte HomeOnly */
            if ((bvalue == ON) || (bvalue == OFF))
            {
               CellInfo.NAM [CellCmds.whichNAM].HomeOnly = bvalue;
            }
            else
               error = TRUE;
            break;

         case 7: /* 1st ctrl Channel Sys A */
            CellInfo.NAM [CellCmds.whichNAM].fccsa = wvalue;
            break;

         case 8: /* 1st ctrl Channel Sys B */
            CellInfo.NAM [CellCmds.whichNAM].fccsb = wvalue;
            break;

         case 9: /* field 9: Last ctrl Channel Sys A */
            CellInfo.NAM [CellCmds.whichNAM].lccsa = wvalue;
            break;

         case 10: /* field 10: Last ctrl Channel Sys B */
            CellInfo.NAM [CellCmds.whichNAM].lccsb = wvalue;
            break;

         default:
            error_occurred = TRUE;
            return;
      }
   } while (field);

   /* Save the config to EEPROM */
   if (!error)
      acu_wl_put_profile(WL_EE_PROFILE_INFO);
}


/******************************************************************************
/
/     Routine:       bang_nam2_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!N2?"
/                    This command reports the following cellular NAM options:
/                      field  1: Serving Sys.Opt.: 0=A,1=B,2=A pref,3=B pref
/                      field  2: Extended Addr Opt.: T/F
/                      field  3: Station Class Mark: 0-16
/                      field  4: Access Overload Class: 0-16
/                      field  5: Auto Registration: T/F
/                      field  6: DTX: T/F
/                      field  7: Home Only Use: T/F
/                      field  8: 1st ctrl Channel Sys A
/                      field  9: 1st ctrl Channel Sys B
/                      field 10: Last ctrl Channel Sys A
/                      field 11: Last ctrl Channel Sys B
/
/     Input Parameters: None.
/
/     Output Parameters: None.
/
/     Global Variables Changed: None.
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_nam2_q(void)
{
   ubyte i,j,out_style,out_array[10];
   uword num;

   out_array[9]=0;
   wl_send_cr_lf();

   /* For each field of the AT command... */
   for (i = 0; i<10; i++)
   {
      switch (i)
      {
         case 0: /* Binary sso: Serving System Option */
            j=1;
            num = CellInfo.NAM [CellCmds.whichNAM].sso;
            break;

         case 1: /* Binary Extended Addr */
            j=1;
            num = CellInfo.NAM [CellCmds.whichNAM].EXp;
            break;

         case 2: /* Station Class Mark */
            j=2;
            num = CellInfo.NAM [CellCmds.whichNAM].SCMp;
            break;

         case 3: /* Access Overload Class */
            j=2;
            num = CellInfo.NAM [CellCmds.whichNAM].ACCOLCp;
            break;

         case 4: /* Binary Auto Registration */
            j=1;
            num = CellInfo.NAM [CellCmds.whichNAM].AutoReg;
            break;

         case 5: /* Binary HomeOnly */
            j=1;
            num = CellInfo.NAM [CellCmds.whichNAM].HomeOnly;
            break;

         case 6: /* 1st ctrl Channel Sys A */
            j=3;
            num = CellInfo.NAM [CellCmds.whichNAM].fccsa;
            break;

         case 7: /* 1st ctrl Channel Sys B */
            j=3;
            num = CellInfo.NAM [CellCmds.whichNAM].fccsb;
            break;

         case 8: /* field 10: Last ctrl Channel Sys A */
            j=3;
            num = CellInfo.NAM [CellCmds.whichNAM].lccsa;
            break;

         case 9: /* field 11: Last ctrl Channel Sys B */
            j=3;
            num = CellInfo.NAM [CellCmds.whichNAM].lccsb;
            break;
      }

      /* Do Decimal to ASCII conversion */
      bang_d_to_a(j,num,&out_array[0]);

      /* Add comma separator or endofline */
      if (i < 9)
      {
         out_array[j++]= ',';
         out_style = UNFORMATTED;
      }
      else
      {
         out_style = NUMERIC_FORM;
      }

      out_array[j]= '\0';
      output_info(out_array,out_style);
   } /*for*/
}


/******************************************************************************
/
/     Routine:       bang_password_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command to enable password protected AT commands
/
/     Input Parameters: pointer to a long numeric
/
/     Output Parameters: None.
/
/     Global Variables Changed: None.
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_password_e(ulong *parm_ptr)
{
   /* "AT!RSA=7701"  to enable protected commands */
   if (*parm_ptr == 7701)
   {
       at_parser_tables(ENABLE_TABLE,amps_protected_commands);
   }
   /* Zero to disable protected commands */
   else
   {
       at_parser_tables(DISABLE_TABLE,amps_protected_commands);

       /* Send error too for hackers */
       error_occurred=TRUE;
   }
}



/******************************************************************************
/
/     Routine:       bang_atten_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine programs the attenuator blocks in the aproc.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: many
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_atten_e(ubyte *parm_ptr)
{
   ubyte field, value;
   AUDIO_CONTROL msg;

   /*  read in the current settings */
   for (field = 0; field < NUM_ATTEN_BLOCKS; field++)
      msg.atten[field] = CellInfo.attenuator[field];

   while (*parm_ptr != 0)
   {
      field = *parm_ptr++;
      value = *parm_ptr++;

      if (field > NUM_ATTEN_BLOCKS)
      {
         error_occurred = TRUE;
         return;
      }
      else
      {
         msg.atten[field-1] = value;
      }
   }

   /* update attenuator blocks with new values */
   msg.type = AUDIO_SET_ATTENUATORS;
   audio_control(&msg);

   /* now read back the value actually stored in case of invalid entry */
   for (field = 0; field < NUM_ATTEN_BLOCKS; field++)
      CellInfo.attenuator[field] = msg.atten[field];

   /* save new values to EEPROM */
   acu_wl_put_profile(WL_EE_PROFILE_INFO);
}


/******************************************************************************
/
/     Routine:       bang_atten_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine prints out the attenuator blocks in the aproc.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: many
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/

void bang_atten_q(void)
{
   ubyte i,out_style,out_array[4], *p;

   wl_send_cr_lf();

   for (i=0; i<NUM_ATTEN_BLOCKS; i++)
   {
      p = out_array;


#if 0 /* Use Voice routine to save code space */
      {

         extern void vce_store_hex_byte_to_a(ubyte,ubyte *);

         vce_store_hex_byte_to_a(CellInfo.attenuator[i], &p);

      }
#endif


      /* Add comma separator or endofline */
      if (i < NUM_ATTEN_BLOCKS-1)
      {
         out_array[2]= ',';
         out_array[3]= '\0';
         out_style = UNFORMATTED;
      }
      else
      {
         out_array[2]= '\0';
         out_style = NUMERIC_FORM;
      }
      output_info(out_array,out_style);
   }
}


/******************************************************************************
/
/     Routine:       bang_dac_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!DAC="
/                      field  1:   bank number (0-2)
/                      field  2-8: DAC value
/
/     Input Parameters: *param_ptr - pointer to the command's parameter buffer
/                                  of uwords.
/      Parameter Buffer structure for AT command's w/ compound word values:
/          [field#,value,f',v',f'',v'',...0]
/      Examples:
/          AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00]
/          AT+F=,6,,8   => [0x2,0x6, 0x4,0x8, 0x00]
/          AT+F=0       => [0x1,0x0, 0x00]
/          AT+F=        => [0x00]
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_dac_e(ubyte *parm_ptr)
{
   parm_ptr=0;
#if 0 /* EXAMPLE code */

   RADIO_CONTROL radiomsg;
   PWR_TABLES    pwr_tables;  /* Power tables are here once on the stack */
   ubyte dac_bank;            /* default to zero bank */
   ubyte field, value;

   /*  read in the EEPROM values */
   for (dac_bank=0; dac_bank<WL_TBL_COUNT; dac_bank++)
      for (field=0; field<WL_TBL_SIZE; field++)
      {
         pwr_tables.dac[dac_bank][field]    = CellInfo.DAC_table[dac_bank][field];
         pwr_tables.target[dac_bank][field] = CellInfo.target_table[dac_bank][field];
      }

   /* default to zero */
   dac_bank = 0;

   /* get the new values  */
   while (*parm_ptr != 0)
   {
      field = *parm_ptr++;
      value = *parm_ptr++;

      if (field == 1)
         dac_bank = value;
      else if (field > WL_TBL_SIZE+1)
      {
         error_occurred = TRUE;
         return;
      }
      else
         pwr_tables.dac[dac_bank][field-2] = value;
   }

   /*  send the new values to the radio driver */
   radiomsg.type = RADIO_SET_TABLES;
   radiomsg.u.tables = &pwr_tables;
   radio_control( &radiomsg );

   /* save the new values */
   for (field = 0; field < WL_TBL_SIZE; field++)
      CellInfo.DAC_table[dac_bank][field] = pwr_tables.dac[dac_bank][field];
   acu_wl_put_profile(WL_EE_PROFILE_INFO);
#endif
}

/******************************************************************************
/
/     Routine:       bang_dac_q
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!DAC?."  Prints the current EEPROM DAC values.
/
/     Input Parameters: *param_ptr - pointer to the command's parameter buffer
/                                  of uwords.
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_dac_q(void)
{
   ubyte i,j,out_style,out_array[5];

   wl_send_cr_lf();

   for (i=0; i<WL_TBL_COUNT; i++)
   {
      for (j=0; j<WL_TBL_SIZE; j++)
      {
         /* Do Decimal to ASCII conversion */
         bang_d_to_a(3, CellInfo.DAC_table[i][j], out_array);

         /* Add comma separator or endofline */
         if (j < WL_TBL_SIZE-1)
         {
            out_array[3]= ',';
            out_array[4]= '\0';
            out_style = UNFORMATTED;
         }
         else
         {
            out_array[3]= '\0';
            out_style = NUMERIC_FORM;
         }

         output_info(out_array,out_style);
      }
   }
}

/******************************************************************************
/
/     Routine:       bang_target_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   Sets the radio's target power level values
/
/     Input Parameters: *param_ptr - pointer to the command's parameter buffer
/                                  of uwords.
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_target_e(uword *parm_ptr)
{
   parm_ptr=0;
#if 0 /* EXAMPLE code */

   RADIO_CONTROL radiomsg;
   PWR_TABLES    pwr_tables;  /* Power tables are here once on the stack */

   ubyte dac_bank;            /* default to zero bank */
   uword field, value;

   /*  read in the EEPROM values */
   for (dac_bank=0; dac_bank<WL_TBL_COUNT; dac_bank++)
      for (field=0; field<WL_TBL_SIZE; field++)
      {
         pwr_tables.dac[dac_bank][field]    = CellInfo.DAC_table[dac_bank][field];
         pwr_tables.target[dac_bank][field] = CellInfo.target_table[dac_bank][field];
      }

   /* default to zero */
   dac_bank = 0;

   /*  get the new values  */
   while (*parm_ptr != 0)
   {
      field = *parm_ptr++;
      value = *parm_ptr++;

      if (field == 1)
         dac_bank = (ubyte)value;
      else if (field > WL_TBL_SIZE+1)
      {
         error_occurred = TRUE;
         return;
      }
      else
         pwr_tables.target[dac_bank][field-2] = value;
   }

   /*  send the new values to the radio driver */
   radiomsg.type = RADIO_SET_TABLES;
   radiomsg.u.tables = &pwr_tables;
   radio_control( &radiomsg );

   /* save the new values */
   for (field = 0; field < WL_TBL_SIZE; field++)
      CellInfo.target_table[dac_bank][field] = pwr_tables.target[dac_bank][field];
   acu_wl_put_profile(WL_EE_PROFILE_INFO);
#endif
}


/******************************************************************************
/
/     Routine:       bang_nam2_e
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:  "AT!N2?"
/                    This command reports the following cellular NAM options:
/                      field  1: Serving Sys.Opt.: 0=A,1=B,2=A pref,3=B pref
/                      field  2: Extended Addr Opt.: T/F
/                      field  3: Station Class Mark: 0-16
/                      field  4: Access Overload Class: 0-16
/                      field  5: Auto Registration: T/F
/                      field  6: DTX: T/F
/                      field  7: Home Only Use: T/F
/                      field  8: 1st ctrl Channel Sys A
/                      field  9: 1st ctrl Channel Sys B
/                      field 10: Last ctrl Channel Sys A
/                      field 11: Last ctrl Channel Sys B
/
/     Input Parameters: *param_ptr - pointer to the command's parameter buffer
/                                  of uwords.
/      Parameter Buffer structure for AT command's w/ compound word values:
/          [field#,value,f',v',f'',v'',...0]
/      Examples:
/          AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00]
/          AT+F=,6,,8   => [0x2,0x6, 0x4,0x8, 0x00]
/          AT+F=0       => [0x1,0x0, 0x00]
/          AT+F=        => [0x00]
/
/     Output Parameters: none
/
/     Global Variables Changed: CellCmds
/
/     Users: PARSE_CMD_TABLE_STRUCT amps_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_target_q(void)
{
   ubyte i,j,out_style,out_array[7];

   wl_send_cr_lf();

   for (i=0; i<WL_TBL_COUNT; i++)
   {
      for (j=0; j<WL_TBL_SIZE; j++)
      {
         /* Do Decimal to ASCII conversion */
         bang_d_to_a(5, CellInfo.target_table[i][j], out_array);

         /* Add comma separator or endofline */
         if (j < WL_TBL_SIZE-1)
         {
            out_array[5]= ',';
            out_array[6]= '\0';
            out_style = UNFORMATTED;
         }
         else
         {
            out_style = NUMERIC_FORM;
            out_array[5]= '\0';
         }

         output_info(out_array,out_style);
      }
   }
}


/******************************************************************************
/
/     Routine:       bang_NOPIN
/
/     Author:        RSA
/
/     Creation Date: 04/07/95
/
/     Description:   This routine is called to implement the Cellular modem
/                    command:    "!NOPIN"
/                    This routine resets the PIN set by the "+WCPN" command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users:         PARSE_CMD_TABLE_STRUCT PCCA_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void bang_NOPIN(void)
{
   CellCmds.LockOut = 0;
   CellInfo.currentPIN[0] = 0;
}
