/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wl00an.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for Answering a Wireless Modem
/                       connection.
/
/     Product:          ACU core code
/
/     History:          ac00anps.c v4.02
/
/        Created:       1/16/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "acu_epro.h"
#include "wl_def.h"
#include "wl_pro.h"
#include "wl_mem.h"

/* Local Wireless ANSWER Prototypes */
void proc_wl_answ(void);
void wl_answ_bg(void);
void acu_wl_answer(void);
void answ_wl_wait_for_chnl(void);
void answ_wl_init_modem(void);
void answ_wl_handshaking(void);


/*******************************************************************************
/
/     Routine:       proc_wl_answ
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process events by determining the
/                    next state and the action to perform for the
/                    ANSW state of type WIRELESS_DATA.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: acu_state, acu_proc
/
/     Users: proc_online
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_wl_answ(void)
{
   acu_state = st_wl_answ_at[acu_event->type].new_state;
   acu_proc = st_wl_answ_at[acu_event->type].fnc_ptr;
}

/*******************************************************************************
/
/     Routine:       proc_wl_answ
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process events by determining the
/                    next state and the action to perform for the
/                    ANSW state of type WIRELESS_PHONE.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: acu_state, acu_proc
/
/     Users: proc_online
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_wl_answ_phone(void)
{
   acu_state = st_wl_answ_phone[acu_event->type].new_state;
   acu_proc = st_wl_answ_phone[acu_event->type].fnc_ptr;
}

/*******************************************************************************
/
/     Routine:       wl_answer_bg
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process the background functions for
/                    the ANSW state of type WIRELESS_DATA.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users: answer_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void wl_answ_bg(void)
{
   /* What Answer sub-state are we in? */
   switch (st_answ.state)
   {
      case INIT_ACU_ANSW:
         /* In this state the ACU is being initialized for
            answer mode. */
         acu_wl_answer();
         break;

      case INIT_MODEM_ANSW:
         /*In this state the ACU sets up the modem chips to
            send answer tone.*/
         answ_wl_init_modem();
         break;

      case ANSW_HANDSHAKE:
         /* In this state the ACU performs handshaking in
            the answer mode. */
         answ_wl_handshaking();
         break;

      case ANW_WAIT_4_CHANNEL:
         /* In this state the ACU waits for the wireless (cellular)
            channel to establish before initiating the modem handshake */
         answ_wl_wait_for_chnl();
         break;
   }
}


/*******************************************************************************
/
/     Routine:       acu_wl_answer
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine is called while the ACU is in the
/                    INIT_ACU_ANSW state. It will set up the ACU to start a
/                    connection as the answerer.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_answ.state
/
/     Users: answer_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_wl_answer(void)
{
   /* Test for Lockout */
   if (wireless_locked_out())
   {
      build_event(E_HANGUP,OK);
      return;
   }

   /* Attempt Wireless Connection */
   wireless_connect(ANSWER,NULL);

   /* Set wait for Carrier timer */
   timer1 = (s[7] * 100);
   st_answ.state = ANW_WAIT_4_CHANNEL;
}


/*******************************************************************************
/
/     Routine:       answ_wl_wait_for_chnl
/
/     Author:        RSA
/
/     Creation Date: 04/17/95
/
/     Description:   This Routine will process the Wireless answer physical
/                    handshake.  It will wait for the wireless carrier
/                    connection to be established before proceding with the
/                    modem handshake.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: st_answ.state
/
/     Users: answer_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void answ_wl_wait_for_chnl(void)
{
   /* Time-out waiting for voice channel for data modes only, allow
      the user to hangup manually in phone modes */
   if ((!timer1) && (st_answ.type != WIRELESS_PHONE))
   {
      if (CellCmds.CellularResultCodes)
         build_event(E_HANGUP,WNO_SERVICE);
      return;
   }

   /* No debounce required for Wireless Channel detection */
   switch (wireless_call_progress())
   {
      case CONNECTION_HANDOFF:
         if (CellCmds.CellularResultCodes)
            build_event(E_MSG,WINTERCEPT);
         break;

      case CONNECTION_ACTIVE:

         /* "hook" must mirror wl online in use for AT commands */
         hook = FALSE;   /* Wireless off hook */

         if (st_answ.type == WIRELESS_PHONE)
         {
            build_event(E_CONNECT,UNUSED);
         }
         else
         {
            /* Use PSTN answer code, but set Wireless Answer sub-state */
            acu_answer();
            st_answ.state = INIT_MODEM_ANSW;

            if (CellCmds.CellularResultCodes == WECR_ENHANCED_CMDS)
               build_event(E_MSG,WIN_USE);
         }
         break;

      case CONNECTION_BUSY:
         build_event(E_HANGUP,WREORDER);
         break;

      case CONNECTION_DROPPED:
         build_event(E_HANGUP,WNO_SERVICE);
         break;
   } /* switch */
}

/*******************************************************************************
/
/     Routine:       answ_wl_init_modem
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will initialize the modem to start a
/                    connection as the answerer.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: timer1
/
/     Users: answer_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void answ_wl_init_modem(void)
{
   /* No PSTN billing delay */
   timer1 = 0;

   /* Use PSTN answer code, but set Wireless Answer sub-state */
   answ_init_modem();
   st_answ.state = ANSW_HANDSHAKE;
}


/*******************************************************************************
/
/     Routine:       answ_wl_handshaking
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This Routine will process the data pump answer physical
/                    handshake.  It will wait for carrier to be detected or
/                    the modem task to go idle (no carrier time-out). If
/                    carrier is present then a CONNECT event is built to move
/                    to the ONLINE state, else if the modem task goes to idle
/                    a HANGUP event is built, and the ACU will progress to
/                    the IDLE state.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed:
/
/     Users: answer_wl_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void answ_wl_handshaking(void)
{
   /* Use PSTN answer code */
   answ_handshaking();
}
