/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00as.c
/
/     Module Version:   ACU 5.00
/
/     Function:         Supporting routines which drive AutoSync module.
/
/     Product:          ACU core code
/
/     History:
/
/        Created:
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_pro.h"
#include "acu_as.h"
#include "mt_pro.h"
#include "fp_pro.h"
#include "as_pro.h"
#include "acu_mem.h"


/*******************************************************************************
/
/     Routine:       start_as_connection
/
/     Author:        RSA
/
/     Creation Date: 1/20/93
/
/     Description:   Configures data pump for AutoSync connection
/
/	   Input Parameters: None
/
/	   Output Parameters: none
/
/	   Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void start_as_connection(void)
{
   st_online.type  = AUTOSYNC_TYPE;
   st_online.state = AS_RUNNING;

   /* Prevent fallback/fallforward when in AutoSync */
   modem_retrain_enable(perE,s[110],0);

   /* All data between DTE and line goes through SCC */
   modem_serial_direct(NORMAL);

   /* Configure data pump for synchronous mode */
   modem_char(SYNC_NORMAL,char_size,overspeed);

   modem_rdl_enable(DISABLED);

   modem_dte_rlsd(ON);
}

/*******************************************************************************
/
/     Routine:       online_as_bg()
/
/     Author:        RSA
/
/     Creation Date: 12/4/92
/
/     Description:   Invokes background functions necessary to run AutoSync.
/
/     Input Parameters: None
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users: online_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_as_bg(void)
{
   ubyte tmp;

   tmp = autosync_bg();

   switch(st_online.state)
   {
      case AS_RUNNING:
         break;

      case AS_WAITING_TO_HANGUP_DTR_OFF:
         if (tmp == AS_BG_HALTED)
            build_event(E_HANGUP,OK);
         break;

      case AS_WAITING_TO_GO_ONLINE_COMMAND_STATE:
         if (tmp == AS_BG_HALTED)
         {
            build_event(E_IDLE,UNUSED);

            /* Set state for future return to AutoSync online
               mode (i.e., ato) */
            st_online.state = AS_RUNNING;
         }
         break;

      case AS_WAITING_TO_HANGUP_CD_OFF:
         if (tmp == AS_BG_HALTED)
            build_event(E_HANGUP,NO_CARRIER);
         break;
   }

}


/*******************************************************************************
/
/     Routine:       online_as_DTR_off()
/
/     Author:        RSA
/
/     Creation Date: 1/18/93
/
/     Description:   handles on-to-off DTR transitions for AutoSync
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_as_DTR_off(void)
{
   switch (sr21.DTR_control)
   {
      case 0:
      case 2:
         /* hangup */
         /* Make sure AutoSync is running before trying to halt it */
         if (st_online.state == AS_RUNNING)
         {
            autosync_halt(DTR_DROPPED);
            st_online.state = AS_WAITING_TO_HANGUP_DTR_OFF;
         }
         break;

      case 1:
         /* online command state */
         /* Make sure AutoSync is running before trying to halt it */
         if (st_online.state == AS_RUNNING)
         {
            autosync_halt(DTR_DROPPED);
            st_online.state = AS_WAITING_TO_GO_ONLINE_COMMAND_STATE;
         }
         break;

      case 3:
         /* hard reset */
         build_event(E_RESET,UNUSED);
         break;
   }
}


/*******************************************************************************
/
/     Routine:       online_as_v24
/
/     Author:        RSA
/
/     Creation Date: 1/18/93
/
/     Description:   handles V.24 transitions for AutoSync
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_as_v24(void)
{
   switch (acu_event->parm)
   {
      case DTR_OFF:
         online_as_DTR_off();
         break;
   }
}
/*******************************************************************************
/
/     Routine:       online_as_hangup()
/
/     Author:        RSA
/
/     Creation Date: 1/20/93
/
/     Description:   Called before changing state to HANGUP.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_online_autosync[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_as_hangup(void)
{
   /* Reconfigure the SCC and re-install interrupts for the ACU */
   acu_restart();
   set_parms(acu_data_bits,acu_parity,acu_stop_bits);

   st_hangup.type = AT_PSTN;
   st_hangup.state = HANGUP_INIT;
   hangup_result_type = acu_event->parm;
}


/*******************************************************************************
/
/     Routine:       online_as_idle()
/
/     Author:        RSA
/
/     Creation Date: 1/20/93
/
/     Description:   Called before changing state to IDLE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_online_autosync[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_as_idle(void)
{
   /* Reconfigure the SCC and re-install interrupts for the ACU */
   acu_restart();
   set_parms(acu_data_bits,acu_parity,acu_stop_bits);

   st_idle.state = S_IDLE;
   st_idle.type = AT_ONLINE;

   build_event(E_MSG,OK);

   /* Need to turn CTS back on */
   CTS_up_flag = TRUE;
   CTS_turn_on_flag = FALSE;
   modem_dte_cts(ON);

   reconfigure = FALSE;
   on_line_command = TRUE;
}


/*******************************************************************************
/
/     Routine:       online_as_cd_off
/
/     Author:        RSA
/
/     Creation Date: 1/20/93
/
/     Description:   Called when loss of carrier detected.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_online_autosync[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_as_cd_off(void)
{
   /* allow AutoSync to hangup */
   if (st_online.state != AS_WAITING_TO_HANGUP_CD_OFF)
   {
      autosync_halt(CARRIER_LOST);
      st_online.state = AS_WAITING_TO_HANGUP_CD_OFF;
      modem_dte_rlsd(OFF);
   }

}

/*******************************************************************************
/
/     Routine:       online_as_msg()
/
/     Author:        RSA
/
/     Creation Date: 1/25/93
/
/     Description:   Places the CONNECT XXXX message before starting an
/                    AutoSync connection. ASSUMES ACU still has control
/                    of DTE I/O. After CONNECT XXXX message, gives control
/                    of DTE I/O to AutoSync module.
/
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_as_msg(void)
{
   output_result(acu_event->parm);
   if (result_message_sent == TRUE)
   {
      result_message_sent = FALSE;
#ifndef __riscos
      while (acu_to_num() > 0)
         ;
      while (!check_all_sent())
         ;
#endif
   }

   /* Halt ACU's control of DTE and let AutoSync have control of DTE */
   acu_halt();

   autosync_init();
   autosync_start(s[19],s[20],s[25],modem_baud);

}

const struct stateTab_struct st_online_autosync[EVT_MAX+1] =
{
/* MSG        */    {S_ONLINE,      online_as_msg},
/* CHAR_RCVD  */    {S_ONLINE,      ignore},
/* ORIG       */    {S_ONLINE,      ignore},
/* ANSW       */    {S_ONLINE,      ignore},
/* CONNECT    */    {S_ONLINE,      ignore},
/* IDLE       */    {S_IDLE,        online_as_idle},
/* RESET      */    {S_IDLE,        hard_reset},
/* SYS_STAT   */    {S_ONLINE,      ignore},
/* RING       */    {S_ONLINE,      ignore},
/* DP_CD_OFF  */    {S_ONLINE,      online_as_cd_off},
/* HANGUP     */    {S_HANGUP,      online_as_hangup},
/* RETRAIN    */    {S_ONLINE,      ignore},
/* TEST       */    {S_ONLINE,      ignore},
/* PARSE      */    {S_ONLINE,      ignore},
/* V24        */    {S_ONLINE,      online_as_v24},
/* FP         */    {S_ONLINE,      proc_fp},
/* ESC_RXD    */    {S_ONLINE,      ignore},
};


/*******************************************************************************
/
/     Routine:       proc_online_autosync
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the ONLINE
/                    state of type AUTOSYNC_TYPE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_state, acu_proc
/
/     Users: proc_idle
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_online_as(void)
{
   acu_state = st_online_autosync[acu_event->type].new_state;
   acu_proc = st_online_autosync[acu_event->type].fnc_ptr;
}

