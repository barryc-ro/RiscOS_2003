/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             v200pr.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains action routines for the PARSE stat
/                       of type V25BIS.
/
/     Product:          ACU core code
/
/     History:          v200pr.c v3.90
/                       v200pr.c v3.91
/                       v200pr.c v3.96
/
/           Created:    10/9/91
/                       3/10/92
/                       1/14/93
/
/           ----------------------------------------------------------
/           -                   Modifications                        -
/           ----------------------------------------------------------
/
/           Author & Date: RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "v25_pro.h"

void proc_parse_v25(void);
void parse_v25_bg(void);
void v25_build_cmd_line(void);
void setup_sync_build(void);
void v25_build_sync_cmd_line(void);
void v25_execute_cmd(void);
void v25_end_cmd_exec(void);
void v25_C(void);
void v25_CI(void);
void v25_CR(void);
void v25_D(void);
void v25_DI(void);
void v25_H(void);
void v25_HA(void);
void v25_P(void);
void v25_PR(void);
void v25_R(void);
void v25_RL(void);


/*******************************************************************************
/
/   Routine: proc_parse_v25
/
/   Author : RSA
/
/   Creation Date: 07/17/91
/
/   Description : This Routine will process the event by determining the
/            next state and the action to be performed for the PARSE
/            state of type V25BIS.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  acu_state, acu_proc
/
/   Users: proc_parse
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void proc_parse_v25(void)
{
   acu_state = st_parse_v25[acu_event->type].new_state;
   acu_proc = st_parse_v25[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/   Routine: parse_v25_bg
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will process the background functions for
/            the PARSE state of type V25BIS.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users: proc_parse
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void parse_v25_bg(void)
{
/*   Check to see if time between rings has expired   */
   if ((timer2 == 0) && (s[1] != 0))
   {
      s[1] = 0;
      disregard_incoming_call = FALSE;

      modem_dte_ri(OFF);
   }

   switch (st_parse.state)
   {
      case CMD1:

      /*   In this state if teh character format is ASYNC, V25bis
         receives characters from the DTE and places them in to
         the command line buffer. Else it will setup for SYNC
         characters.
      */
         if (v25_char_format !=0)
            setup_sync_build();
         else
            v25_build_cmd_line();        /* ASYNC */
         break;

      case CMD2:

      /*   In this state V25bis receives SYNC characters from the
         DTE and places them in to the command line buffer.
      */
              v25_build_sync_cmd_line();   /* HDLC and BISYNC character framing */
              break;

      case CMD3:

      /*   In this state V25bis parses the command line buffer and
         executes the entered command.
      */
              v25_execute_cmd();
              break;

      case CMD4:

      /*   In this state the ACU will exit the parse state due to
         either encountering an error or end of command line.
      */
              v25_end_cmd_exec();
              break;
   }
}


/*******************************************************************************
/
/   Routine: v25_build_cmd_line
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will place ASYNC characters received from
/            the terminal into the command line buffer. This will
/            continue until a <CR> is received.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  cmd_ptr, st_parse.state, timer1, send_val
/               error_occurred, error_type
/
/   Users: parse_v25_bg
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_build_cmd_line(void)
{
   ubyte ch;

   if (acu_from_num())
   {
      ch = acu_from_char();

      if (acu_cfg.hw_echo == FALSE)
         if (sr14.echo_cmd_flag)
            acu_to_char(ch);

      ch &= CHAR_MASK;

      if (ch == s[5])
      {               /* back space */
         if (sr14.echo_cmd_flag)
         {
            modem_serial_echo(OFF);
            if (cmd_ptr != &cmd_line[0])
            {
               *--cmd_ptr = '\0';
               acu_to_char(' ');
               acu_to_char(s[5]);
            }
#ifndef __riscos
            while (!check_all_sent())
               ;
#endif
            modem_serial_echo(ON);
         }
         else
         {
            if (cmd_ptr > (ubyte *)&cmd_line[0])
               cmd_ptr--;
         }
         return;
      }


                /* Check to see if the character is a line feed   */
      if (ch == s[4])
      {
/*   Make sure it is not the only character received */
         if (cmd_ptr != &cmd_line[0])
         {
/*   See if the previous character is a carrage return and if it was the
   only character received.
*/
            if ((s[3] == (ubyte)*(cmd_ptr - 1)) &&
                (cmd_ptr != &cmd_line[1]))
            {
/*   Put a NULL in place of the carrage return   */
               *(--cmd_ptr) = '\0';
               cmd_ptr = (ubyte *)&cmd_line[0];
               timer1 = 13;
               st_parse.state = CMD3;
               error_occurred = FALSE;
               send_val = TRUE;
               error_type = NO_ERROR_TYPE;
            }
            else
            {

/*   Return error if line feed without a carrage return or if the command
   line only contains carrage return/line feed.
*/
               build_event(E_MSG,INV);
               cmd_ptr = (ubyte *)&cmd_line[0];
            }
            return;
         }
      }

      if ((ch != ' ') && (ch != '.'))
      {
         *cmd_ptr++ = ch;
         *cmd_ptr = '\0';
         if (str_len(&cmd_line[0]) > MAX_CMD_LINE)
         {
            build_event(E_MSG,INV);
            cmd_ptr = (ubyte *)&cmd_line[0];
         }
      }

   }
}


/*******************************************************************************
/
/   Routine: setup_sync_build
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will wait until characters have been
/            and setup the count then move to build the command line.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  sync_count, st_parse.state
/
/   Users: parse_v25_bg
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void setup_sync_build(void)
{
   sync_count = acu_from_num();
   if (sync_count)
      st_parse.state = CMD2;
}


/*******************************************************************************
/
/   Routine: v25_build_sync_cmd_line
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will place SYNC characters received from
/            the terminal into the command line buffer. This will
/            continue until a all characters received are processed.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  cmd_ptr, st_parse.state, timer1, send_val
/               v25_rxpack_too_long, sync_count, error_occurred
/               error_type
/
/   Users: parse_v25_bg
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_build_sync_cmd_line(void)
{
   ubyte ch;

   if (v25_rxpack_too_long)
   {
      build_event(E_MSG,INV);
      v25_rxpack_too_long = FALSE;
   }

   if (sync_count != 0)
   {
      ch = acu_from_char() & CHAR_MASK;

      if (ch == s[5])
      {               /* back space */
         if (cmd_ptr != &cmd_line[0])
            *--cmd_ptr = '\0';
      }

      else if ((ch != ' ') && (ch != '.') && (ch != s[3]) &&
          (ch != s[4]))
      {
         *cmd_ptr++ = ch;
         *cmd_ptr = '\0';

         if (str_len(&cmd_line[0]) > MAX_CMD_LINE)
         {
            build_event(E_MSG,INV);
            acu_from_clear();
            cmd_ptr = (ubyte *)&cmd_line[0];
            st_parse.state = CMD1;
         }
      }
      sync_count--;
   }

   else if (cmd_ptr != &cmd_line[0])
   {
      *cmd_ptr = '\0';
      cmd_ptr = (ubyte *)&cmd_line[0];
      timer1 = 13;
      st_parse.state = CMD3;

      send_val = TRUE;
      error_occurred = FALSE;
      error_type = NO_ERROR_TYPE;
   }
}


/*******************************************************************************
/
/   Routine: v25_execute_cmd
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will parse and execute the command line
/            buffer.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  st_parse.state
/
/   Users: parse_v25_bg
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_execute_cmd(void)
{
   ubyte end_execution;

   end_execution = FALSE;

   switch (get_next_char())
   {
      case 'C': v25_C();
           break;

      case 'D': v25_D();
           break;

      case 'H': v25_H();
           break;

      case 'P': v25_P();
           break;

      case 'R': v25_R();
           break;

      case '\0': end_execution = TRUE;
            break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }

   if ((error_occurred == TRUE) || (end_execution == TRUE))
      st_parse.state = CMD4;
}



/*******************************************************************************
/
/   Routine: v25_end_cmd_exec
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will determine the action to be taken
/            when terminating command execution.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  st_parse.state, cmd_ptr
/
/   Users: parse_v25_bg
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_end_cmd_exec(void)
{
   if (error_occurred)
   {
/**********
*      switch(error_type)
*      {
*           case NO_ERROR_TYPE      : build_event(E_MSG,INV);
*                      break;
*           case PARAMETER_VALUE    : build_event(E_MSG,INV_PV);
*                      break;
*           case PARAMETER_SYNTAX   : build_event(E_MSG,INV_PS);
*                      break;
*           case COMMAND_UNKNOWN    : build_event(E_MSG,INV_CU);
*                      break;
*           case MESSAGE_SYNTAX     : build_event(E_MSG,INV_MS);
*           default           : break;
*      }
*************/
      build_event(E_MSG,INV);
   }
   else if (send_val)
      build_event(E_MSG,VAL);

   st_parse.state = CMD1;
   cmd_ptr = (ubyte *)&cmd_line[0];
}


/*******************************************************************************
/
/   Routine: v25_C
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'C'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_execute_cmd
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_C(void)
{
   switch (get_next_char())
   {
      case 'I': v25_CI();
           break;

      case 'R': v25_CR();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_CI
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'CI'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_C
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_CI(void)
{
   switch (get_next_char())
   {
      case 'C': v25_CIC();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_CR
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'CR'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_C
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_CR(void)
{
   switch (get_next_char())
   {
/*****      case 'I': v25_CRI();
           break;
*****/
      case 'N': v25_CRN();
           break;

      case 'S': v25_CRS();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_D
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'D'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_execute_cmd
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_D(void)
{
   switch (get_next_char())
   {
      case 'I': v25_DI();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_DI
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'DI'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_D
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_DI(void)
{
   switch (get_next_char())
   {
      case 'C': v25_DIC();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }

}

/*******************************************************************************
/
/   Routine: v25_H
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'H'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_execute_cmd
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_H(void)
{
   switch (get_next_char())
   {
      case 'A': v25_HA();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_HA
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'HA'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_H
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_HA(void)
{
   switch (get_next_char())
   {
      case 'Y': v25_HAY();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_P
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'P'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_execute_cmd
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_P(void)
{
   switch (get_next_char())
   {
      case 'R': v25_PR();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_PR
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'PR'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_P
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_PR(void)
{
   switch (get_next_char())
   {
/******    case 'I': v25_PRI();
           break;
******/
      case 'N': v25_PRN();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_R
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'R'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_execute_cmd
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_R(void)
{
   switch (get_next_char())
   {
      case 'L': v25_RL();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}

/*******************************************************************************
/
/   Routine: v25_RL
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will call the Routine needed to perform a
/            command beginning with a 'RL'.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_R
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_RL(void)
{
   switch (get_next_char())
   {
      case 'D': v25_RLD();
           break;

/*****      case 'F': v25_RLF();
           break;
*****/

/*****      case 'I': v25_RLI();
           break;
*****/
      case 'N': v25_RLN();
           break;

      default: error_occurred = TRUE;
          error_type = COMMAND_UNKNOWN;
   }
}


