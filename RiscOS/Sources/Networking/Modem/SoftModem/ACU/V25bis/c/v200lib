/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             v200lib.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains misc routines for the V.25bis code.
/
/     Product:          ACU core code
/
/     History:          v200lib.c v3.90
/                       v200lib.c v3.91
/                       v200lib.c v3.92
/
/           Created:    10/11/91
/                       1/21/92
/                       1/14/93
/
/           ----------------------------------------------------------
/           -                   Modifications                        -
/           ----------------------------------------------------------
/
/           Author & Date: RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "v25_pro.h"
#include "mt_pro.h"
#include "dce_line.edf"


ubyte check_forbidden_list(ubyte);
ubyte check_delayed_list(ubyte);
void v25_clear_all_call_status(void);
void v25_10ms_timer(void);
void v25_1sec_timer(void);
void v25_1min_timer(void);
void v25_set_defaults(void);
void v25_cvrt_dial_string(ubyte *);
void init_v25_communication(void);
void v25_clear_stored_num(void);
void v25_output_result(ubyte);
void idle_v25_msg(void);
void v25_retrieve_profile(ubyte);
void v25_store_profile(ubyte);
void v25_output_info(ubyte *msg);

ubyte dlc_array[] = "DLC   ";

/*******************************************************************************
/
/   Routine: v25_check_forbidden_list
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine is called to see if the number being dialed
/            is on the forbidden list.
/
/   Input Parameters: ubyte num - number to be checked
/
/   Output Parameters: ubyte TRUE - if number is on list
/             FALSE - if number is not on list
/
/   Global Variables Changed:  send_val
/
/   Users: idle_v25_DTR_on, v25_CRN, v25_CRS
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Descriptions:
/   Reasons:
/
*******************************************************************************/
ubyte check_forbidden_list(ubyte num)
{
   ubyte temp, current_time, delay_time;
   ubyte *ptr;

   if (v25_operating_mode == V25_108_1_MODE)
      return(FALSE);

   temp = num;

   if (v25_calls_without_dt < MAX_CALLS_WITHOUT_DIALTONE)
      return(FALSE);

   modem_disable_interrupts();

   current_time = v25_minute_timer;

   if (current_time > v25_no_dt_time[v25_dt_oldest])
      delay_time = v25_no_dt_time[v25_dt_oldest] + TIME_MAX_CALL_WITHOUT_DT - current_time;
   else if (current_time < v25_no_dt_time[v25_dt_oldest])
      delay_time = v25_no_dt_time[v25_dt_oldest] - current_time;

        /* If all calls occurred within the same minute, do not report that there
      is 0 time remaining.  Report the maximum delay time.
        */
   else if ((current_time == v25_minute_timer) &&
       (v25_calls_without_dt == MAX_CALLS_WITHOUT_DIALTONE))
      delay_time = TIME_MAX_CALL_WITHOUT_DT;

   modem_enable_interrupts();
   v25_output_result(VAL);
   send_val = FALSE;
   ptr = d_to_a(delay_time);
   if (*ptr++ != NULL)
   {
      dlc_array[4] = *ptr++;
      if (*ptr != NULL)
         dlc_array[5] = *ptr;
   }

/*   Do not send anything to the terminal if 180/1 mode   */
   if (v25_operating_mode != V25_108_1_MODE)
   {
      while (v25_sync_tx_timer != 0)
         process_wait();

      v25_output_info((ubyte *)&dlc_array[0]);
   }

/*   Need to force the code to turn echo back on after the message has been sent   */
   build_event(E_MSG,NONE);
   return(TRUE);
}


/*******************************************************************************
/
/   Routine: v25_check_delayed_list
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine is called to see if the number being dialed
/            is on the delayed list.
/
/   Input Parameters: ubyte num - number to be checked
/
/   Output Parameters: ubyte TRUE - if number is on list
/             FALSE - if number is not on list
/
/   Global Variables Changed:  v25_call_connected, send_val,
/               v25_successive_calls[], v25_number_called
/
/   Users: idle_v25_DTR_on, v25_CRN, v25_CRS
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte check_delayed_list(ubyte num)
{
   ubyte temp;
   ubyte *ptr;

   v25_call_connected = FALSE;

   if (v25_operating_mode == V25_108_1_MODE)
      return(FALSE);

   if (v25_call_delayed[num] == TRUE)
   {
      v25_output_result(VAL);
      send_val = FALSE;

      temp = v25_delay_timer[num] / 60;
      if (temp == 0)      /* If delay time is < 1 min show 1 min */
             temp = 1;

      ptr = d_to_a(temp);
      if (*ptr++ != NULL)
      {
         dlc_array[4] = *ptr++;
         if (*ptr != NULL)
            dlc_array[5] = *ptr;
      }

/*   Do not send anything to the terminal if 180/1 mode   */
      if (v25_operating_mode != V25_108_1_MODE)
      {
         while (v25_sync_tx_timer != 0)
            process_wait();

                        v25_output_info((ubyte *)&dlc_array[0]);
      }

/*   Need to force the code to turn echo back on after the message has been sent   */
      build_event(E_MSG,NONE);
      return(TRUE);
   }
   if (v25_delay_timer[num] != 0)
   {
      v25_successive_calls[num] +=1;
      if (v25_successive_calls[num] == 3)
      {
         v25_output_result(VAL);
         send_val = FALSE;

/*   Need to force the code to turn echo back on after the message has been sent   */
         build_event(E_MSG,NONE);

         /* Only output DLC if < 1 minute has passed since last attempt */
         if (v25_delay_timer[num] > TIME_DELAY_THIRD_CALL)
         {
            dlc_array[3] = NULL;

/*   Do not send anything to the terminal if 180/1 mode   */
            if (v25_operating_mode != V25_108_1_MODE)
            {
               while (v25_sync_tx_timer != 0)
                  process_wait();

               v25_output_info((ubyte *)&dlc_array[0]);
            }
            dlc_array[3] = 0x20;
            timer5 = (v25_delay_timer[num] - TIME_DELAY_THIRD_CALL) * 100;
         }
      }
   }
   else
   {
      v25_successive_calls[num] = 1;
   }

   v25_number_called = num;
   return(FALSE);
}


/*******************************************************************************
/
/   Routine: v25_clear_all_call_status
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine is called to clear the delayed status of all
/            stored numbers.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  v25_call_delayed[], v25_delay_timer[],
/               v25_successive_calls[], v25_call_without_dt,
/               v25_dt_oldest
/
/   Users: idle_v25_DTR_on, v25_CRN, v25_CRS, init_backup_sequence
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_clear_all_call_status(void)
{
   ubyte i;

   /* Clear Out Delayed Call Status */

   for (i=0 ; i<= STORED_NUM_LOCATIONS ; i++)
   {
      v25_call_delayed[i] = FALSE;
      v25_delay_timer[i] = 0;
      v25_successive_calls[i] = 0;
   }

   /* Clear Out Successive Call Attempt without Dial Tone Detection Status */
   v25_calls_without_dt = 0;
   v25_dt_oldest = 0;
}

/*******************************************************************************
/
/   Routine: v25_10ms_timer
/
/   Author : RSA
/
/   Creation Date: 10/11/91
/
/   Description : This Routine is called to process the V.25bis 10 msec
/            timers.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  v25_sync_tx_timer, v25_108_drop_timer,
/               sync_delay_timer,
/
/   Users: process_acu_timer
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_10ms_timer(void)
{
   if (v25_sync_tx_timer != 0)         /* Timer used to tx */
   {                  /* HDLC and BISYNC  */
      v25_sync_tx_timer--;         /* packets       */
      if (v25_sync_tx_timer == 0)
                {
                        mmu_open_acu_pg
         v25_tx_block();
         mmu_restore_stored_pg
                }
   }
   if (v25_108_drop_timer)
      v25_108_drop_timer--;

   if (sync_delay_timer)
      sync_delay_timer--;

   if (v25_crc_delay)
      v25_crc_delay--;
}


/*******************************************************************************
/
/   Routine: v25_1sec_timer
/
/   Author : RSA
/
/   Creation Date: 10/11/91
/
/   Description : This Routine is called to process the V.25bis 1 sec
/            timers.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  v25_delay_timer[], v25_call_delayed[]
/
/   Users: process_acu_timer
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_1sec_timer(void)
{
   ubyte i;

   for(i=0; i<= STORED_NUM_LOCATIONS ; i++)
   {
      if (v25_delay_timer[i] != 0)
      {
         v25_delay_timer[i] -=1;
         if (v25_delay_timer[i] == 0)
         {
            if (v25_call_delayed[i] == TRUE)
               v25_call_delayed[i] = FALSE;
         }
      }
   }

        if (start_ringback_timer)
        {
            start_ringback_timer -=1;
            if (!start_ringback_timer)
                received_ringback = TRUE;
        }
}



/*******************************************************************************
/
/   Routine: v25_1min_timer
/
/   Author : RSA
/
/   Creation Date: 10/11/91
/
/   Description : This Routine is called to process the V.25bis 1 min
/            timers.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  v25_minute_timer, v25_no_dt_time[],
/               v25_dt_oldest, v25_calls_without_dt
/
/   Users: process_acu_timer
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Descriptions:
/   Reasons:
/
*******************************************************************************/
void v25_1min_timer(void)
{
   v25_minute_timer++;

   if (v25_minute_timer == TIME_MAX_CALL_WITHOUT_DT)
      v25_minute_timer = 0;

   while ((v25_calls_without_dt != 0) &&
      (v25_no_dt_time[v25_dt_oldest] == v25_minute_timer))
   {
      v25_dt_oldest++;
      if (v25_dt_oldest == MAX_CALLS_WITHOUT_DIALTONE)
         v25_dt_oldest = 0;
      v25_calls_without_dt--;
   }
}


/*******************************************************************************
/
/   Routine: v25bis_init
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine is called to initialize the variables used
/            by the V.25bis code.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  all V.25bis variables
/
/   Users: master_init
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25bis_init(void)
{
   disregard_incoming_call = FALSE;
   send_val = FALSE;
   error_type = NO_ERROR_TYPE;
   state_change = FALSE;
   v25_last_packt_in_block = TRUE;
   v25_num_last_dialed[0] = NULL;

   /* Initialize V25bis 108/1 mode variables/ */
   v25_108_drop_timer = 0;
   v25_wait_for_108_drop = FALSE;
   v25_init_108_drop_time = FALSE;
   sync_delay_timer = 0;
   time_between_rings = TIME_BETWEEN_CALLS;
   v25_crc_delay = 0;
}

/*******************************************************************************
/
/   Routine: v25_set_defaults
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine is called to set the V.25bis variables to
/            the factory defaults.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  v25bis_active, v25_char_format,
/               v25_operating_mode
/
/   Users: and_F
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_set_defaults(void)
{
   v25bis_active = FALSE;
   v25_char_format = ASYNC_CHAR;
   v25_operating_mode = V25_108_2_MODE;
}

/*******************************************************************************
/
/   Routine: v25_cvrt_dial_string
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine is called to convert the V.25bis dial modifiers
/            to the AT dial modifiers.
/
/   Input Parameters: ubyte *ptr - pointer to string to be converted
/
/   Output Parameters: None
/
/   Global Variables Changed:  cmd_ptr
/
/   Users: idle_v25_DTR_on, v25_CRS, ll_do_backup
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_cvrt_dial_string(ubyte *ptr)
{
   cmd_ptr = (ubyte *)&cmd_line[0];
   while (*ptr != NULL)
   {
      switch(*ptr)
      {
         case ':' : *ptr++;
               *cmd_ptr++ = 'W';
               break;

         case '<' : *ptr++;
               *cmd_ptr++ = ',';
               break;

         case '&' : *ptr++;
               *cmd_ptr++ = '!';
               break;

         case '>' :
         case '=' : break;

         default: *cmd_ptr++ = *ptr++;
      }
   }
   *cmd_ptr = '\0';
   cmd_ptr = (ubyte *)&cmd_line[0];
}


/*******************************************************************************
/
/   Routine: init_v25_communication
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine switches from AT to V.25bis.
/
/   Input Parameters:  None
/
/   Output Parameters: None
/
/   Global Variables Changed:  st_idle.type, v25_char_format, comm_mode
/               acu_parity, acu_data_bits, acu_stop_bits,
/               char_size, num_rings_to_answ, error_occurred,
/               dial_pause_time, DSR_only_at_handshaking,
/               disreguard_incoming_call, v25bis_active,
/               look_for_DTR_low_to_high, look_for_DTR_high_to_low
/
/   Users: master_init, and_L, per_V
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reasons:
/
*******************************************************************************/
void init_v25_communication(void)
{
        ubyte temp;

   st_idle.type = V25BIS;
   st_parse.type = V25BIS;

/*   Save the format of the AT commands     */
   at_data_bits = acu_data_bits;
   at_parity = acu_parity;
   at_stop_bits = acu_stop_bits;
   at_char_size = char_size;

   if (v25_char_format == ASYNC)
      comm_mode = ASYNC;
   else
   {
      comm_mode = SYNC_NORMAL;
      sr14.echo_cmd_flag = FALSE;

                /* Initialize the DP Clocks to the correct synchronous speed */
                v32bis_enable = s[110];
                temp = translate_modem_baud();
      modem_set_sync_clocks(temp,(ubyte)sr27.clock_source);
   }

   switch (v25_operating_mode)
   {
      case 0: if (v25_char_format != ASYNC)
                        {
                                mmu_open_acu_pg
            v25_sync_port_init();      /* Synchronous */
                 mmu_restore_stored_pg
                        }
         else
         {
            acu_set_tx_baud(dte_baud);
            acu_data_bits = SEVEN;
            acu_parity = EVEN;
            acu_stop_bits = ONE;
            char_size = TEN_BITS;
            set_parms(acu_data_bits,acu_parity,acu_stop_bits);
         }

         num_rings_to_answ = V25_108_2_RING_TO_ANSWER;
         break;

      case 1: num_rings_to_answ = V25_108_1_RING_TO_ANSWER;
         modem_serial_echo(OFF);
         modem_dte_cts(OFF);
         break;

      default: error_occurred = TRUE;
   }
   modem_aa_led(ON);

   dial_pause_time = 4;
   DSR_only_at_handshaking = TRUE;
   disregard_incoming_call = FALSE;
   v25bis_active = TRUE;

/*   Set DTR flags in order to que up a DTR transition event */
   if (DTR_valid_up_flag == TRUE)
      look_for_DTR_low_to_high = TRUE;
   else
      look_for_DTR_high_to_low = TRUE;

   /* Initialize circuit 107 to OFF */
   modem_dte_dsr(OFF);

/*   Turn off autobaud interrupt because V.25bis does not autobaud   */
   autobaud_off();
}

/*******************************************************************************
/
/   Routine: v25_clear_stored_num
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine is called to clear the telephone numbers
/            stored in the EEprom.
/
/   Input Parameters:  None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users: acu_reset
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_clear_stored_num(void)
{
   ubyte addr;
   ubyte num[1];

   num[0] = '\0';
   for(addr=0; addr<STORED_NUM_LOCATIONS; addr++)
      modem_write_data(v25_tel_num_addr_array[addr],1,&num[0]);
}


/*******************************************************************************
/
/   Routine: v25_output_result
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine is called to send the selected result code
/            to the terminal.
/
/   Input Parameters: ubyte type - type of result message to be sent
/            0  - VAL
/            1  - CNX
/            2  - INC
/            3  - CFI AB
/            4  - INV
/            5  - CNX 1200
/            7  - CFI ET
/            8  - CFI NT
/            9  - CNX 0600
/            10 - CNX 2400
/            12 - CNX XXXX
/            20 - CNX 300 REL
/            21 - CNX 600 REL
/            22 - CNX 1200 REL
/            23 - CNX 2400 REL
/            70 - CFI RT
/            71 - CFI NS
/            72 - INV MS
/            73 - INV CU
/            74 - INV PV
/            75 - INV PS
/
/   Output Parameters: None
/
/   Global Variables Changed:  result_message_sent, send_val
/
/   Users: idle_v25_msg, v25_RLN, v25_RLD, online_v25_msg
/          v25_check_forbidden_list, v25_check_delayed_list
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/       Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void v25_output_result(ubyte type)
{
   byte *msg;

   if (v25_operating_mode == V25_108_1_MODE)
      return;

   if ((type == CARRIER_XXXX) || (type == NONE))
      return;

   modem_serial_direct(NORMAL);

   modem_serial_echo(OFF);
   set_parms(acu_data_bits,acu_parity,acu_stop_bits);

   if (type == CONNECT_XXXX)
      type = CONNECT;

   result_message_sent = TRUE;

/*   Output connection baud rate message    */
   msg = (byte *)v25_out_put[type];
   while (*msg != NULL)
      acu_to_char(*msg++);

   if (v25_char_format == ASYNC)
   {
      output_send_cr_lf();
   }
   send_val = FALSE;
}


/*******************************************************************************
/
/   Routine: idle_v25_msg
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will output a message to the terminal
/            while in the IDLE state with type V25BIS.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users: st_idle_at[]
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_v25_msg(void)
{
   if (v25_operating_mode == V25_108_2_MODE)
   {
      while (v25_sync_tx_timer != 0)
         process_wait();

      if (acu_event->parm != NONE)
         v25_output_result(acu_event->parm);
   }

   if (result_message_sent == TRUE)
   {
#ifndef __riscos
      while (!check_all_sent())
         process_wait();
#endif

      result_message_sent = FALSE;

      if ((v25_operating_mode == V25_108_2_MODE) && (v25_char_format != ASYNC_CHAR))
      {
         sync_delay_timer = 2;

         while (sync_delay_timer)
            process_wait();
      }
   }
   if (sr14.echo_cmd_flag)
      modem_serial_echo(ON);
   else
      modem_serial_echo(OFF);
}


/*******************************************************************************
/
/   Routine: v25_retrieve_profile
/
/   Author : RSA
/
/   Creation Date: 08/13/91
/
/   Description : This Routine will retrieve the selected profile for the
/            V.25bis code.
/
/   Input Parameters: ubyte num - profile to be retrieved.
/
/   Output Parameters: none
/
/   Global Variables Changed:  v25bis_active, v25_char_format,
/               v25_operating_mode
/
/   Users: retrieve_profile()
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_retrieve_profile(ubyte num)
{
   ubyte *string;
   uword address;

   ubyte eeprom_error;

   switch (num)
   {
      case 0: address = V25_PROFILE_0_ADD;
         break;

      case 1: address = V25_PROFILE_1_ADD;
         break;

      case 2: address = V25_PROFILE_2_ADD;
         break;
   }

   eeprom_error = modem_read_data(address,V25_PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /* If the EEPROM failed, the do not change the profile */
   if (eeprom_error == TRUE)
   {
      error_occurred = TRUE;
      return;
   }

   string = (ubyte *)&temp_array[0];

   v25bis_active = *string++;
   v25_char_format = *string++;
   v25_operating_mode = *string++;
}


/*******************************************************************************
/
/   Routine: v25_store_profile
/
/   Author : RSA
/
/   Creation Date: 08/13/91
/
/   Description : This Routine will store the selected profile for the
/            V.25bis code.
/
/   Input Parameters: ubyte num - profile to be stored.
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users: store_profile()
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_store_profile(ubyte num)
{
   ubyte *string;
   uword address;

   ubyte eeprom_error;

   string = (ubyte *)&temp_array[0];

   *string++ = v25bis_active;
   *string++ = v25_char_format;
   *string++ = v25_operating_mode;

   switch (num)
   {
      case 0: address = V25_PROFILE_0_ADD;
         break;

      case 1: address = V25_PROFILE_1_ADD;
         break;

      case 2: address = V25_PROFILE_2_ADD;
         break;
   }

   eeprom_error = modem_write_data(address,V25_PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /* If a EEPROM write error occurred, display error and return */
   if (eeprom_error == TRUE)
   {
      error_occurred = TRUE;
      return;
   }

   temp_array[0] = modem_eeprom_checksum();
   modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&temp_array[0]);
}


/*******************************************************************************
/
/   Routine: v25_output_info
/
/   Author : RSA
/
/   Creation Date: 05/07/91
/
/   Description : This Routine is called to send information text to the
/            terminal.
/
/   Input Parameters: ubyte *msg - pointer to the character string
/
/   Output Parameters: none
/
/   Global Variables Changed:  result_message_sent, send_ok
/
/   Users:   V25_RLN, v25_RLI, v25_RLF, v25_RLD, dial_stored_num,
/      check_forbidden_list, check_delayed_list
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/       Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void v25_output_info(ubyte *msg)
{
   modem_serial_echo(OFF);
   set_parms(acu_data_bits,acu_parity,acu_stop_bits);

   result_message_sent = TRUE;
   while (*msg != NULL)
   {
      process_wait();
      if (acu_to_free() >= 6)
         acu_to_char(*msg++);
   }

   if (v25_char_format == ASYNC)
   {
      output_send_cr_lf();
   }
}


/*******************************************************************************
/
/    Routine: get_next_char
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine returns the next character in the command
/              buffer. It will also convert any lower case characters
/              to uppercase.
/
/    Input Parameters: None
/
/    Output Parameters: ubyte ch - byte from buffer
/
/    Global Variables Changed:  cmd_ptr
/
/    Users:    All command line parse Routines
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte get_next_char(void)
{
   ubyte ch;

   /* Need to ignore all spaces. Loop until a character other than a space
       is found */
   do
   {
       ch = *cmd_ptr++;
   }while (ch == ' ');

   if (((ubyte)(ch - 'a')) <= (ubyte)25)
       ch = ch & 0xDF; /* toupper(ch) fails in ver 2.2 of Archimedes */

   return(ch);
}

/*******************************************************************************
/
/   Routine: a_to_d
/
/   Author : RSA
/
/   Creation Date: 05/07/91
/
/   Description : This Routine converts an ASCII character to it's
/            decimal value.
/
/   Input Parameters: None
/
/   Output Parameters: ubyte temp - decimal value
/
/   Global Variables Changed:  cmd_ptr
/
/   Users:   All command line parse Routines
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte a_to_d(void)
{
   uword temp = 0;
   ubyte num;
   ubyte ch;

   while ((ch = get_next_char()) != NULL)
   {
       num = ch - '0';
       if (num <= 9)
       {
           temp = (temp * 10) + num;
           if (temp > 255)
           {
               error_occurred = TRUE;
               return ((ubyte)temp);
           }
       }
       else
       {
           cmd_ptr--;
           return ((ubyte)temp);
       }
   }
   cmd_ptr--;
   return ((ubyte)temp);
}



/*******************************************************************************
/
/   Routine: hang_up
/
/   Author : RSA
/
/   Creation Date: 05/07/91
/
/   Description : This Routine is called cause the ACU to terminate the
/            PSTN connection.
/
/   Input Parameters: ubyte type - determines if V.32 clear down sequence should be
/                   sent or not
/
/   Output Parameters: none
/
/   Global Variables Changed:  timer1, operating_mode, slU, s[1]
/               acu_state
/
/   Users:   called from HANG_UP state, at_O, at_Z
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/       Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void hang_up(ubyte type)
{
    process_fax_hangup((ubyte) (at_h_command || at_z_command));

    at_z_command = FALSE;

    /* Used to Turn off the External V.23 clock generation hardware */
    if ((modem_mode == V23_HDX) || (modem_mode == V23_ADX))
        line_reset_v23();

    modem_serial_direct(NORMAL);

    /*   Send long space disconnect if not hanging up because one was received */
    if ((long_space_disconnect == FALSE) && (sr21.long_space_discon))
    {
        if (operating_mode != RELIABLE)
        {
            system_send_long_space_disc();

            /*   Delay to allow long space disconnect to go out     */
            timer1 = long_space_send_time;
            while (timer1 > 0)
            {
                process_wait();
                modem_task();
            }
        }
    }
    else
        long_space_disconnect = FALSE;

    /*   Release the line */
    modem_drop(type);

    while (modem_check_CD())
    {
        process_wait();
        modem_task();
    }

    fp_mode_led_off();

    /*   Reset the error correcting software   */
    system_reset();

    /*   Reset if changed due to RELIABLE connection   */
    if (sr23.grant_rdl == ENABLED)
        modem_rdl_enable(ENABLED);

    slU = FALSE;

   /* Return the line on-hook?  this variable is used for Voice Call
      Discrimination, and allows the modem to hangup with out going on hook */
   if (acu_hangup_line)
      on_hook();

    modem_shrt_relay(OFF);

    modem_td_relay(OFF);
    modem_AA1_relay(OFF);
    modem_init_call_progress(ON_HOOK);

    if ((comm_mode == ASYNC) && (!DSR_only_at_handshaking))
        modem_dte_dsr(ON);
    else
        modem_dte_dsr(OFF);

    modem_ec_led(OFF);
    modem_dc_led(OFF);
    modem_cd_led(OFF);

    /*   Need to turn off RI led and signal incase hang_up is called in the
        middle of a ring   */
    modem_ri_led(OFF);
    modem_dte_ri(OFF);

    /*   Clear ring count   */
    s[1] = 0;

    if (sr21.RLSD_reflects_CD != RLSD_reflects_CD_temp)
        sr21.RLSD_reflects_CD = RLSD_reflects_CD_temp;

    /*   Reset 400Hz disconnect tone detection variables */
    tone_disconnect = FALSE;

    on_line_command = FALSE;

    /*   Reset operating mode so it will be NORMAL while offline */
    operating_mode = NORMAL;

    v42_running_mnp10 = FALSE;
    dial_K = FALSE;
    dial_J = FALSE;
}
