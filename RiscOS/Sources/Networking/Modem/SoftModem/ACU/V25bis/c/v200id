/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             v200id.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the control code for the V25.bis state
/                       IDLE.
/
/     Product:          ACU core code
/
/     History:          v200id.c v3.90
/                       v200id.c v3.91
/                       v200id.c v3.92
/
/           Created:    10/7/91
/                       1/21/92
/                       1/14/93
/
/           ----------------------------------------------------------
/           -                   Modifications                        -
/           ----------------------------------------------------------
/
/           Author & Date: RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "ll_pro.h"
#include "v25_pro.h"

void idle_v25_bg(void);
void proc_idle_v25(void);
void idle_v25_DTR_off(void);
void idle_v25_DTR_on(void);
void idle_v25_ring(void);
void idle_v25_parse(void);
void idle_v25_orig(void);
void idle_v25_answ(void);
void parse_v25_DTR_off(void);
void parse_v25_idle(void);

/*******************************************************************************
/
/   Routine: idle_v25_bg
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will process the background function for
/            the IDLE state type V25BIS.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  s[1], disreguard_incoming_call
/
/   Users: proc_idle
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_v25_bg(void)
{
   if (sr22.speaker_ctrl == ALWAYS_OFF)
      modem_speaker(OFF);

   if (!DTR_valid_up_flag)
   {
      modem_dte_cts(OFF);
      modem_dte_rlsd(OFF);
   }

/*   Check to see if time between rings has expired   */
   if ((timer2 == 0) && (s[1] != 0))
   {
      s[1] = 0;
      disregard_incoming_call = FALSE;
      modem_dte_ri(OFF);
   }
}


/*******************************************************************************
/
/   Routine: proc_idle_v25
/
/   Author : RSA
/
/   Creation Date: 07/17/91
/
/   Description : This Routine will process the event by determining the
/            next state and the action to be performed for the IDLE
/            state of type V25BIS.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  acu_state, acu_proc
/
/   Users: proc_idle
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void proc_idle_v25(void)
{
   acu_state = st_idle_v25[acu_event->type].new_state;
   acu_proc = st_idle_v25[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/   Routine: idle_v25_DTR_off
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine handle an on to off transition of DTR.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  v25_108_drop_timer
/
/   Users: st_idle_v25[]
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_v25_DTR_off(void)
{
   v25_108_drop_timer = V25_108_1_DROP_TIME;
}



/*******************************************************************************
/
/   Routine: idle_v25_DTR_on
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine handle an off to on transition of DTR.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  v25_wait_for_108_drop
/
/   Users: st_idle_v25[]
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_v25_DTR_on(void)
{
   ubyte num_array[MAX_PHONE_NUM_LEN+1];

   ubyte eeprom_error;

   if (v25_operating_mode == V25_108_1_MODE)
   {

/*   See if DTR has been low for the drop time after aborted call before calling again   */
      if ((v25_wait_for_108_drop == TRUE) && (v25_108_drop_timer != 0))
         return;

      v25_wait_for_108_drop = FALSE;

/*   See if a RING has been detected */
      if (s[1] == 0)
      {
         eeprom_error = modem_read_data(v25_tel_num_addr_array[0],MAX_PHONE_NUM_LEN+1,
                        (ubyte *)&num_array[0]);

         if (eeprom_error)
         {
            build_event(E_HANGUP,ERROR);
            return;
         }

         v25_cvrt_dial_string(&num_array[0]);

/*   If call is not delayed or forbidden then move to originate the call   */
         if ((!check_forbidden_list(0)) && (!check_delayed_list(0)))
            build_event(E_ORIG,DIAL_NUM0);

                        /* Else need to queue up a DTR on event so this code
                           will be called until   the call can be made   */
         else
            look_for_DTR_low_to_high = TRUE;
      }
      else

/*   See if we should auto-answer   */
         if (num_rings_to_answ > 0)
            if (s[1] >= num_rings_to_answ)
               build_event(E_ANSW,UNUSED);
   }

/*   Process 108/2 mode   */
   else
      build_event(E_PARSE,UNUSED);
}


/*******************************************************************************
/
/   Routine: idle_v25_ring
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine perform any action needed due to a RING
/            being detected on the line.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  s[1], timer2, timer1
/
/   Users: proc_idle
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_v25_ring(void)
{
   if (acu_event->parm == RINGON)
   {
      modem_ri_led(ON);
      modem_dte_ri(ON);
   }

   else if (acu_event->parm == RINGOFF)
   {
                modem_ri_led(OFF);
      modem_dte_ri(OFF);

                s[1]++;

      if (s[1] == 1)
         build_event(E_MSG,INC);

      timer2 = time_between_rings;

      if (num_rings_to_answ > 0)   /* do we answer incoming calls? */
      {
         if (s[1] >= num_rings_to_answ) /* do we answer this ring? */
         {
            if (DTR_valid_up_flag)
            {
               if ((v25_operating_mode == V25_108_2_MODE)
                   && (disregard_incoming_call == FALSE))
               {
                  build_event(E_ANSW,UNUSED);
                  modem_dte_cts(ON);
                  modem_dte_rlsd(ON);
                  modem_dte_ri(OFF);
               }

               if (v25_operating_mode == V25_108_1_MODE)
               {
                  timer1 = 10;
                  while (timer1)
                     process_wait();

                  build_event(E_ANSW,UNUSED);
               }
            }
         }
      }
   }
}


/*******************************************************************************
/
/   Routine: idle_v25_parse
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will set up the ACU state PARSE with type
/            V25BIS.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  st_parse.state, st_parse.type, cmd_ptr
/
/   Users: st_idle_v25[]
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_v25_parse(void)
{
   st_parse.type = V25BIS;
   st_parse.state = CMD1;

   cmd_ptr = (ubyte *)&cmd_line[0];
   acu_from_clear();

   modem_dte_cts(ON);
   modem_dte_rlsd(ON);

   if (((v25_operating_mode == V25_108_2_MODE) && (sr14.echo_cmd_flag))
       && (v25_char_format == ASYNC))
      modem_serial_echo(ON);
   else
      modem_serial_echo(OFF);
}


/*******************************************************************************
/
/   Routine: idle_v25_orig
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will set up the ACU state ORIG with type
/            V25_PSTN.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  st_orig.state, st_orig.type
/
/   Users: st_idle_v25[]
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void idle_v25_orig(void)
{
   v32bis_enable = s[110];

   if (sr27.leased_line == TRUE)
   {
      st_orig.type = LEASED_LINE;
      st_orig.state = INIT_LEASED_LINE;

      init_v25_ll_connection();
   }
   else
   {
      st_orig.type = V25_PSTN;

      switch (acu_event->parm)
      {
/*   Setup the command line to not dial any number   */
         case NO_DIAL:
            st_orig.state = INIT_ACU_NO_DIAL;
            break;

/*   Setup the command line to number stored at location 0   */

         case DIAL_NUM0:
         default:
/*   See if need to delay before dialing another number   */
            if (timer5 != 0)
               st_orig.state = DELAY_BEFORE_DIALING;
            else
               st_orig.state = INIT_ACU_DIAL;
            break;
      }
   }
   last_async_sync = v25_char_format;
        received_ringback = FALSE;
}


/*******************************************************************************
/
/   Routine: idle_v25_answ
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine will set up the ACU state ANSW with type
/            V25_PSTN.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  st_answ.type, st_answ.state, timer1
/
/   Users: st_idle_v25[]
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_v25_answ(void)
{
   v32bis_enable = s[110];

   st_answ.type = V25_PSTN;
   st_answ.state = INIT_ACU_ANSW;

   modem_dte_cts(OFF);
   modem_dte_rlsd(OFF);

        /* Turn OFF ringing circuit and led just in case where the data button
           is pressed while ringing */
   modem_ri_led(OFF);
   modem_dte_ri(OFF);

   timer1 = answ_tone_delay;
   last_async_sync = v25_char_format;
}



/*******************************************************************************
/
/   Routine: parse_v25_DTR_off
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This Routine handle an on to off transition of DTR.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users: st_parse_v25[]
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void parse_v25_DTR_off(void)
{
   v25_clear_all_call_status();

/*   106 and 109 should drop in response to 108/2 dropping */
   modem_dte_cts(OFF);
   modem_dte_rlsd(OFF);
   build_event(E_IDLE,UNUSED);
}



/*******************************************************************************
/
/   Routine: parse_v25_idle
/
/   Author : RSA
/
/   Creation Date: 07/17/91
/
/   Description : This Routine will change the state from PARSE to IDLE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  st_idle.state, st_idle.type
/
/   Users: st_parse_v25[]
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void parse_v25_idle(void)
{
   st_idle.state = S_IDLE;
   st_idle.type = V25BIS;

   acu_from_clear();
}

